
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8110025c

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x0003e940 memsz 0x00052670 flags rwx
    LOAD off    0x00040000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00040000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00039b04  8110025c  8110025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002eac  81139d60  81139d60  0003ad60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d54  8113cc0c  8113cc0c  0003dc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00013d30  8113e960  8113e960  0003f960  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  81152690  81152690  00040000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00040000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00040000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001c18  00000000  00000000  00040028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0005a033  00000000  00000000  00041c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00014719  00000000  00000000  0009bc73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001cfc4  00000000  00000000  000b038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00007878  00000000  00000000  000cd350  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000a568  00000000  00000000  000d4bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00026ce7  00000000  00000000  000df130  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00105e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002378  00000000  00000000  00105e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00111e15  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00111e1b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00111e27  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00111e28  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00111e29  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00111e2d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00111e31  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00111e35  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000a  00000000  00000000  00111e40  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000a  00000000  00000000  00111e4a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00111e54  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  00111e65  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00278448  00000000  00000000  00111ea4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
8110025c l    d  .text	00000000 .text
81139d60 l    d  .rodata	00000000 .rodata
8113cc0c l    d  .rwdata	00000000 .rwdata
8113e960 l    d  .bss	00000000 .bss
81152690 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100294 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 comm.c
00000000 l    df *ABS*	00000000 data_packet.c
00000000 l    df *ABS*	00000000 fee_buffers.c
8113e97c l     O .bss	00000004 viCh1HoldContext
8113e980 l     O .bss	00000004 viCh2HoldContext
8113e984 l     O .bss	00000004 viCh3HoldContext
8113e988 l     O .bss	00000004 viCh4HoldContext
8113e98c l     O .bss	00000004 viCh5HoldContext
8113e990 l     O .bss	00000004 viCh6HoldContext
8113e994 l     O .bss	00000004 viCh7HoldContext
8113e998 l     O .bss	00000004 viCh8HoldContext
811050d8 l     F .text	00000054 vFeebWriteReg
8110512c l     F .text	00000050 uliFeebReadReg
00000000 l    df *ABS*	00000000 rmap.c
00000000 l    df *ABS*	00000000 spw_controller.c
811056dc l     F .text	00000050 uliSpwcReadReg
81105688 l     F .text	00000054 vSpwcWriteReg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
8113e88c l     O .rwdata	00000001 ucIoValue
811058dc l     F .text	0000007c bCtrlIoLvdsDrive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
811061cc l     F .text	0000013c msgdma_write_extended_descriptor
81106308 l     F .text	00000164 msgdma_construct_extended_descriptor
8110646c l     F .text	00000318 msgdma_descriptor_async_transfer
81106784 l     F .text	000003fc msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
81107300 l     F .text	00000054 vRstcWriteReg
81107354 l     F .text	00000050 uliRstReadReg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
8113e9a0 l     O .bss	00000004 viHoldContext
81108688 l     F .text	00000058 uliSyncReadReg
8110862c l     F .text	0000005c bSyncWriteReg
00000000 l    df *ABS*	00000000 fee_task.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
8113e9a6 l     O .bss	00000004 xRAckLocal.4434
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
8113e9aa l     O .bss	00000004 xSAckLocal.4430
00000000 l    df *ABS*	00000000 parser_comm_task.c
8113eaf0 l     O .bss	0000004c PreParsedLocal.4487
00000000 l    df *ABS*	00000000 receiver_uart_task.c
8113eb3c l     O .bss	0000004c xPreParsedReader.4488
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 sim_meb_task.c
00000000 l    df *ABS*	00000000 timeout_checker_ack_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 ccd.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
8113b2a7 l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 fee.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 meb.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
8113c2e9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8113cc0c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
811112e0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113c4b6 l     O .rodata	00000010 zeroes.4389
8113c4c6 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8113c4d6 l     O .rodata	00000010 zeroes.4404
81115f14 l     F .text	000000c4 __sbprintf
8113c4e6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
8113c4fe l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
81117a9c l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
811195ec l     F .text	00000008 __fp_unlock
81119600 l     F .text	000001a4 __sinit.part.1
811197a4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
8113d458 l     O .rwdata	00000020 lc_ctype_charset
8113d438 l     O .rwdata	00000020 lc_message_charset
8113d478 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
8113c53c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8111c614 l     F .text	0000006c sulp
8113c684 l     O .rodata	00000014 fpi.2737
8113c698 l     O .rodata	00000028 tinytens
8113c670 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113c6d0 l     O .rodata	00000010 blanks.4332
8113c6c0 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
8111fc84 l     F .text	00000104 __sprint_r.part.0
8113c6f0 l     O .rodata	00000010 blanks.4348
8113c6e0 l     O .rodata	00000010 zeroes.4349
81121220 l     F .text	000000c4 __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
811216d4 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
811255d0 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
81125714 l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81125748 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
811259cc l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
81125abc l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
81125ca0 l     F .text	00000044 alt_get_errno
81125ce4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
81125f0c l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8113e8d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
811264ac l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
8113e8dc l     O .rwdata	00000004 lockid
8113ea38 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
8113e8e0 l     O .rwdata	00000004 lockid
8113ea40 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
81127fb0 l     F .text	00000050 OS_InitMisc
81128000 l     F .text	00000074 OS_InitRdyList
81128184 l     F .text	000000ec OS_InitTCBList
81127ec8 l     F .text	000000e8 OS_InitEventList
81128074 l     F .text	00000088 OS_InitTaskIdle
811280fc l     F .text	00000088 OS_InitTaskStat
81128414 l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
8112a22c l     F .text	000000fc OS_FlagTaskRdy
81129fdc l     F .text	00000168 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
8112bb18 l     F .text	00000198 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
81130548 l     F .text	00000044 OSTmr_Lock
8112ffe8 l     F .text	00000074 OSTmr_Alloc
8113058c l     F .text	0000003c OSTmr_Unlock
8113044c l     F .text	000000fc OSTmr_Unlink
8113005c l     F .text	000000a4 OSTmr_Free
811302fc l     F .text	00000150 OSTmr_Link
81130274 l     F .text	00000088 OSTmr_InitTask
811305c8 l     F .text	00000110 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
811306d8 l     F .text	0000003c alt_dev_reg
8113d658 l     O .rwdata	0000106c jtag_uart_0
8113e6c4 l     O .rwdata	000000d0 rs232_uart
8113e794 l     O .rwdata	00000064 dma_DDR_M1
8113e7f8 l     O .rwdata	00000064 dma_DDR_M2
8113e85c l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81134ee8 l     F .text	000002ac altera_avalon_jtag_uart_irq
81135194 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
81135998 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81135d2c l     F .text	000000a4 altera_avalon_uart_irq
81135dd0 l     F .text	00000140 altera_avalon_uart_rxirq
81135f10 l     F .text	000001ac altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
81136118 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
811363cc l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
81136650 l     F .text	00000044 alt_get_errno
81136694 l     F .text	0000009c alt_msgdma_write_standard_descriptor
81136730 l     F .text	00000134 alt_msgdma_write_extended_descriptor
81136864 l     F .text	0000018c alt_msgdma_irq
811369f0 l     F .text	00000094 alt_msgdma_construct_standard_descriptor
81136a84 l     F .text	0000015c alt_msgdma_construct_extended_descriptor
81136be0 l     F .text	00000340 alt_msgdma_descriptor_async_transfer
81136f20 l     F .text	00000408 alt_msgdma_descriptor_sync_transfer
81137628 l     F .text	000000ac alt_msgdma_construct_prefetcher_standard_descriptor
811376d4 l     F .text	0000019c alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
811388a0 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
81138fb4 l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000044 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
8113eae8 l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8113eaec g     O .bss	00000004 alt_instruction_exception_handler
8110cb98 g     F .text	0000004c vFailDeleteInitialization
8113eabc g     O .bss	00000004 aux_status_register
8113f0b0 g     O .bss	00002000 vInAckHandlerTask_stk
8113865c g     F .text	00000044 alt_msgdma_standard_descriptor_async_transfer
8110788c g     F .text	0000004c vSyncInitIrq
8111bc98 g     F .text	0000007c _mprec_log10
81107a08 g     F .text	00000040 bSyncSetMbt
81105ac0 g     F .text	00000108 I2C_Read
8113e92e g     O .rwdata	00000002 OSTaskNameSize
811410b0 g     O .bss	00000118 xBuffer64
8111bd8c g     F .text	0000008c __any_on
8111a760 g     F .text	0000005c _isatty_r
8113c548 g     O .rodata	00000028 __mprec_tinytens
81125bdc g     F .text	000000c4 alt_main
81111204 g     F .text	000000c8 _puts_r
81104964 g     F .text	00000058 bFeebCh3IrqFlagBufferEmpty
8113ea48 g     O .bss	00000004 OSTmrFreeList
81152590 g     O .bss	00000100 alt_irq
8111a8d0 g     F .text	00000068 _lseek_r
8110e0e8 g     F .text	00000030 vChangeDefaultAutoResetSync
8112aa8c g     F .text	000000d4 OS_MemInit
8110b7f0 g     F .text	0000098c vLoadDefaultETHConf
8112f528 g     F .text	00000068 OSTimeSet
811199a4 g     F .text	000000ac __sflags
81124730 g     F .text	00000088 .hidden __eqdf2
81102a38 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_FULL
8110df60 g     F .text	00000034 vLoadDefaultSyncSource
81130bd8 g     F .text	000001ac Check_for_Master_Boot_Record
8114d9cc g     O .bss	00000010 OSTmrWheelTbl
811373e8 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_mm_descriptor
81126b90 g     F .text	00000618 OSEventPendMulti
81152690 g       *ABS*	00000000 __alt_heap_start
811395ec g     F .text	0000002c OSTaskCreateHook
81134a50 g     F .text	000001c4 alt_up_sd_card_fclose
8113e9b0 g     O .bss	00000004 xSemCountBuffer64
811111c0 g     F .text	00000044 printf
8113e99d g     O .bss	00000001 SspdConfigControl
81107e24 g     F .text	00000054 bSyncCtrReset
8113e906 g     O .rwdata	00000002 OSMboxEn
8110b0dc g     F .text	00000394 bSendUART128
8110e75c g     F .text	000000a4 aatoh
8112720c g     F .text	00000054 OSIntEnter
811224a0 g     F .text	000000a4 _wcrtomb_r
81104870 g     F .text	00000044 vFeebCh8IrqFlagClrBufferEmpty
8110cb00 g     F .text	0000004c vFailReceiverCreate
811044d4 g     F .text	00000040 vFeebCh2HandleIrq
8111176c g     F .text	00000064 __sseek
81119954 g     F .text	00000010 __sinit
81106c40 g     F .text	00000044 iMsgdmaExtendedDescriptorAsyncTransfer
81122340 g     F .text	00000148 __swbuf_r
8110ab68 g     F .text	000002cc bResourcesInitRTOS
8110534c g     F .text	000000f4 bSpwcGetLinkError
8113e916 g     O .rwdata	00000002 OSQEn
8111a7ec g     F .text	00000084 _setlocale_r
8113e890 g     O .rwdata	00000004 LedsPainelControl
8113ebb0 g     O .bss	00000100 cDebugBuffer
811197ac g     F .text	00000070 __sfmoreglue
8111fc6c g     F .text	00000018 ungetc
8112684c g     F .text	000000d4 __malloc_unlock
81102d28 g     F .text	00000210 DMA_MULTIPLE_TRANSFER
8113966c g     F .text	00000028 OSTaskStatHook
8110dfd0 g     F .text	00000030 vChangeDefaultSyncSource
8113ea4c g     O .bss	00000001 OSLockNesting
8113ea50 g     O .bss	00000004 OSTmrSemSignal
8110d5b4 g     F .text	000000d8 vNFeeStructureInit
8113e9b4 g     O .bss	00000004 xSemCommInit
811028bc g     F .text	00000080 uliXorshift32
8111c680 g     F .text	00001600 _strtod_r
8113e9b8 g     O .bss	00000004 xSemCountSenderACK
8110e898 g     F .text	00000448 .hidden __divsf3
8113eae0 g     O .bss	00000004 current_sector_modified
8113e954 g     O .rwdata	00000002 OSDataSize
8113ea54 g     O .bss	00000001 OSRunning
81105510 g     F .text	00000178 bSpwcInitCh
811411c8 g     O .bss	00002000 senderTask_stk
8113e9bc g     O .bss	00000004 fp
8111ac60 g     F .text	0000015c memmove
811431c8 g     O .bss	0000045c xSimMebStruct
811396e8 g     F .text	0000002c OSInitHookBegin
811082c0 g     F .text	00000074 bSyncCtrCh8OutEnable
8113e94c g     O .rwdata	00000002 OSTmrSize
8111993c g     F .text	00000018 _cleanup
8110e394 g     F .text	00000040 siCloseFile
8111adbc g     F .text	000000b0 _Balloc
8110e074 g     F .text	00000038 vLoadDefaultAutoResetSync
8113362c g     F .text	000000cc alt_up_sd_card_is_Present
81137328 g     F .text	00000060 alt_msgdma_construct_standard_st_to_mm_descriptor
8113e968 g     O .bss	00000004 pxDmaM1Dev
81102ad0 g     F .text	000000a4 DMA_DISPATCHER_STOP
81130900 g     F .text	00000054 Save_Modified_Sector
81104ac4 g     F .text	00000058 bFeebCh7IrqFlagBufferEmpty
8113ea58 g     O .bss	00000004 OSIdleCtr
8110572c g     F .text	0000003c bEnableIsoDrivers
811247b8 g     F .text	000000dc .hidden __gtdf2
8113937c g     F .text	0000002c altera_nios2_gen2_irq_init
81139464 g       .text	00000000 OSStartTsk
81107b7c g     F .text	00000070 bSyncSetNCycles
81128784 g     F .text	000002dc OS_TCBInit
8110dbb4 g     F .text	00000068 vInitSimucamBasicHW
81143624 g     O .bss	00002000 vTimeoutCheckerTask_stk
811081d8 g     F .text	00000074 bSyncCtrCh6OutEnable
81105e3c g     F .text	00000138 i2c_write
86020000 g     F .entry	00000000 __reset
8113ead8 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
8113ea5c g     O .bss	00000002 OSTmrUsed
8113e9c0 g     O .bss	00000004 xSemCountBuffer128
81103200 g     F .text	000000f8 TEMP_Read
81104554 g     F .text	00000040 vFeebCh4HandleIrq
8113e952 g     O .rwdata	00000002 OSTmrWheelTblSize
8110da84 g     F .text	0000002c cFeeSpwChannelDisable
8113e8f2 g     O .rwdata	00000002 OSEventSize
8113ea5e g     O .bss	00000001 OSPrioHighRdy
8111035c g     F .text	00000064 _fstat_r
81139618 g     F .text	0000002c OSTaskDelHook
8113ea00 g     O .bss	00000004 errno
811085b4 g     F .text	0000003c uliSyncGetCtr
8111780c g     F .text	0000001c __svfscanf
811116e0 g     F .text	00000008 __seofread
81139444 g       .text	00000000 OSStartHighRdy
8112df58 g     F .text	000001ec OSTaskCreateExt
8110cd84 g     F .text	00000068 vFailGetCountSemaphorePreParsedBuffer
8111e7b0 g     F .text	00001244 ___svfiprintf_internal_r
81129b0c g     F .text	00000068 OSFlagPendGetFlagsRdy
8113e932 g     O .rwdata	00000002 OSTaskStatStkSize
81128c58 g     F .text	00000310 OSFlagAccept
8112c234 g     F .text	000000c0 OSQFlush
8112bcb0 g     F .text	00000148 OSQAccept
8113ea28 g     O .bss	00000004 alt_argv
81146888 g       *ABS*	00000000 _gp
8110c7c8 g     F .text	0000004c vFailSendPreAckReceiverSemaphore
81126370 g     F .text	0000013c usleep
81133c04 g     F .text	00000384 alt_up_sd_card_fopen
8110e200 g     F .text	00000030 bSDcardIsPresent
8110a124 g     F .text	00000134 vSenderComTask
8113376c g     F .text	000000d8 alt_up_sd_card_find_first
8112dda4 g     F .text	000001b4 OSTaskCreate
8110cf24 g     F .text	00000068 vFailSendNack
8113eacc g     O .bss	00000004 command_argument_register
8112d8ac g     F .text	000004f8 OSTaskChangePrio
8113ea44 g     O .bss	00000004 alt_heapsem
811060d4 g     F .text	00000080 bSetBoardLeds
81128a60 g     F .text	000001f8 OSDebugInit
8112e144 g     F .text	0000034c OSTaskDel
8112ab60 g     F .text	000001ac OSMutexAccept
8110e000 g     F .text	00000040 vSetTimeCode
81137ed0 g     F .text	000000dc alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8113e9c4 g     O .bss	00000004 xSemCountPreParsed
8113d4d8 g     O .rwdata	00000180 alt_fd_list
81104a14 g     F .text	00000058 bFeebCh5IrqFlagBufferEmpty
8114d9dc g     O .bss	00000370 OSFlagTbl
8110c930 g     F .text	00000068 vFailGetCountSemaphoreReceiverTask
8110deb8 g     F .text	0000003c vLoadDefaultRTValue
81127c90 g     F .text	000000c0 OS_EventTaskRemove
81132e80 g     F .text	00000134 find_first_empty_record_in_root_directory
81138a60 g     F .text	00000098 alt_find_dev
81110ea8 g     F .text	00000150 memcpy
8112200c g     F .text	00000264 __hexnan
81145624 g     O .bss	00000130 xBuffer32
8113e91c g     O .rwdata	00000002 OSRdyTblSize
8114dd4c g     O .bss	000001a0 OSTmrTbl
811195f4 g     F .text	0000000c _cleanup_r
8112530c g     F .text	000000e4 .hidden __floatsidf
81107978 g     F .text	0000004c ucSyncStatusErrorCode
8110db80 g     F .text	00000034 cFeeRMAPLogDisable
811091f8 g     F .text	000002c0 vParserCommTask
81139080 g     F .text	00000084 alt_io_redirect
8110db14 g     F .text	00000034 cFeeRMAPEchoingDisable
81124894 g     F .text	000000f4 .hidden __ltdf2
81104cf4 g     F .text	000000d4 bFeebSetIrqControl
8110d494 g     F .text	00000068 vCouldNotRetransmitB128TimeoutTask
8113e9c8 g     O .bss	00000004 xMutexReceivedACK
81103b7c g     F .text	000000b0 bSdmaInitM2Dma
81139d60 g       *ABS*	00000000 __DTOR_END__
81138358 g     F .text	00000094 alt_msgdma_start_prefetcher_with_extd_desc_list
811386a0 g     F .text	00000044 alt_msgdma_extended_descriptor_async_transfer
81107ecc g     F .text	00000054 bSyncCtrErrInj
81138600 g     F .text	0000005c alt_msgdma_register_callback
8110c17c g     F .text	00000330 vShowEthConfig
8110dc1c g     F .text	00000030 bLogWriteSDCard
8110cc4c g     F .text	00000068 vFailSetCountSemaphorexBuffer64
811095d0 g     F .text	000000a0 bTrySendSemaphoreCommInit
811112cc g     F .text	00000014 puts
81139790 g     F .text	000000a4 alt_exception_cause_generated_bad_addr
8110784c g     F .text	00000040 vSyncHandleIrq
81126920 g     F .text	00000128 OSEventNameGet
811046d8 g     F .text	00000044 vFeebCh2IrqFlagClrBufferEmpty
8113e900 g     O .rwdata	00000002 OSFlagMax
8111a9ec g     F .text	000000e0 mbrtowc
81132a78 g     F .text	000001b4 find_first_empty_cluster
81108164 g     F .text	00000074 bSyncCtrCh5OutEnable
8113e9a4 g     O .bss	00000001 vucN
8111c3ec g     F .text	00000074 __fpclassifyd
811078d8 g     F .text	00000054 bSyncStatusExtnIrq
81117828 g     F .text	00000054 _vfscanf_r
8112b1e0 g     F .text	000005a4 OSMutexPend
8111bbec g     F .text	000000ac __ratio
81133568 g     F .text	000000c4 alt_up_sd_card_open_dev
81127260 g     F .text	00000100 OSIntExit
81107a48 g     F .text	00000040 bSyncSetBt
81121204 g     F .text	0000001c __vfiprintf_internal
8113e93a g     O .rwdata	00000002 OSTCBSize
81104694 g     F .text	00000044 vFeebCh1IrqFlagClrBufferEmpty
8113ea5f g     O .bss	00000001 OSPrioCur
81135408 g     F .text	000002c4 altera_avalon_jtag_uart_read
8110dc4c g     F .text	0000002c bLogWriteETH
81137b98 g     F .text	000000f8 alt_msgdma_prefetcher_add_standard_desc_to_list
81111188 g     F .text	00000038 _printf_r
811232d4 g     F .text	00000064 .hidden __udivsi3
81125a10 g     F .text	000000ac isatty
8113e99c g     O .bss	00000001 LedsBoardControl
8113e9cc g     O .bss	00000004 xSemCountReceivedACK
8113e920 g     O .rwdata	00000002 OSStkWidth
8111a7bc g     F .text	00000030 iswspace
8113c598 g     O .rodata	000000c8 __mprec_tens
8113e914 g     O .rwdata	00000002 OSPtrSize
8111a870 g     F .text	0000000c __locale_charset
8110807c g     F .text	00000074 bSyncCtrCh3OutEnable
811234c4 g     F .text	000000c8 .hidden __lesf2
8113e8f4 g     O .rwdata	00000002 OSEventTblSize
811226a0 g     F .text	0000007c .hidden __fixunsdfsi
811393a8 g       .text	00000000 OSCtxSw
81105bc8 g     F .text	00000160 I2C_MultipleRead
8113ea0c g     O .bss	00000004 __malloc_top_pad
8113ea60 g     O .bss	00000004 OSTCBList
8112ffa8 g     F .text	00000040 OSTmrSignal
8113ea1c g     O .bss	00000004 alt_fd_list_lock
8111e2dc g     F .text	0000001c strtoul
8113e8a8 g     O .rwdata	00000004 __mb_cur_max
8111a8a0 g     F .text	0000000c _localeconv_r
8111e2f8 g     F .text	000002e0 _strtoull_r
81107290 g     F .text	00000070 vRstcHoldDeviceReset
8111b1e0 g     F .text	00000044 __i2b
8111a104 g     F .text	000004c4 __sfvwrite_r
81131d58 g     F .text	000000c0 get_dir_divider_location
8114deec g     O .bss	00000c30 OSMemTbl
8113ea64 g     O .bss	00000001 OSTickStepState
81145754 g     O .bss	00002000 vReceiverUartTask_stk
811114d8 g     F .text	0000005c _sbrk_r
8113e9d0 g     O .bss	00000004 xSemTimeoutChecker
81131a18 g     F .text	000000cc filename_to_upper_case
8113e918 g     O .rwdata	00000002 OSQMax
81133f88 g     F .text	00000090 alt_up_sd_card_set_attributes
8112aedc g     F .text	00000304 OSMutexDel
8114eb1c g     O .bss	00000800 OSTaskStatStk
8110e230 g     F .text	00000030 bSDcardFAT16Check
8112a6a8 g     F .text	000000f8 OSMemNameGet
8110c61c g     F .text	00000060 vFailCreateMutexSResources
81130d84 g     F .text	00000284 Read_File_Record_At_Offset
8113e8f8 g     O .rwdata	00000002 OSFlagEn
8111be18 g     F .text	00000068 _read_r
8113e93e g     O .rwdata	00000002 OSTimeTickHookEn
8112c6fc g     F .text	00000170 OSQPost
8112a328 g     F .text	000000ac OS_FlagUnlink
81102420 g     F .text	0000049c bDdr2MemoryRandomReadTest
8113e8c4 g     O .rwdata	00000004 alt_max_fd
8110d240 g     F .text	0000004c vFailTimeoutCheckerTaskCreate
811282cc g     F .text	00000070 OS_MemCopy
8112833c g     F .text	000000d8 OS_Sched
811325fc g     F .text	0000047c find_file_in_directory
811213b0 g     F .text	000000f8 _fclose_r
8112a5b0 g     F .text	000000f8 OSMemGet
8112e788 g     F .text	000001bc OSTaskNameSet
811195bc g     F .text	00000030 fflush
8113ea08 g     O .bss	00000004 __malloc_max_sbrked_mem
8113ea68 g     O .bss	00000004 OSCtxSwCtr
81139694 g     F .text	00000054 OSTimeTickHook
81147754 g     O .bss	00002000 vOutAckHandlerTask_stk
81125844 g     F .text	00000188 alt_irq_register
8113e902 g     O .rwdata	00000002 OSFlagNameSize
8110fa28 g     F .text	00000118 .hidden __extendsfdf2
81127d50 g     F .text	00000108 OS_EventTaskRemoveMulti
811336f8 g     F .text	00000074 alt_up_sd_card_is_FAT16
81105958 g     F .text	00000088 I2C_TestAdress
8112358c g     F .text	000008b4 .hidden __adddf3
81123390 g     F .text	00000078 .hidden __nesf2
81127b38 g     F .text	00000158 OS_EventTaskWaitMulti
8111b984 g     F .text	00000114 __b2d
811378d0 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8113e91a g     O .rwdata	00000002 OSQSize
81122c9c g     F .text	00000540 .hidden __umoddi3
81125b00 g     F .text	000000dc lseek
8112d1ec g     F .text	00000214 OSSemPend
81105440 g     F .text	000000d0 bSpwcGetLinkStatus
81104fa4 g     F .text	00000088 bFeebGetWindowing
8113e898 g     O .rwdata	00000004 _global_impure_ptr
81107800 g     F .text	0000004c bSSDisplayUpdate
811320bc g     F .text	00000540 get_home_directory_cluster_for_file
8111be80 g     F .text	0000056c _realloc_r
8113e904 g     O .rwdata	00000002 OSLowestPrio
81152690 g       *ABS*	00000000 __bss_end
81138ebc g     F .text	000000f8 alt_iic_isr_register
81139764 g     F .text	0000002c OSTCBInitHook
8113e94a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
81126260 g     F .text	00000110 alt_tick
8110c8c8 g     F .text	00000068 vFailGetMutexSenderTask
811071b0 g     F .text	0000006c vRstcSimucamReset
8113c700 g     O .rodata	00000100 __hexdig
8113844c g     F .text	000001b4 alt_msgdma_init
8112271c g     F .text	00000580 .hidden __udivdi3
81109dd4 g     F .text	000001a8 setPreAckSenderFreePos
81121628 g     F .text	00000024 _fputwc_r
8113e8ec g     O .rwdata	00000002 OSEventEn
8113c570 g     O .rodata	00000028 __mprec_bigtens
8111afbc g     F .text	0000010c __s2b
8113e946 g     O .rwdata	00000002 OSTmrCfgNameSize
81107b08 g     F .text	00000074 bSyncSetPolarity
811253f0 g     F .text	000000b0 .hidden __floatunsidf
8110cd1c g     F .text	00000068 vFailFoundBufferRetransmission
8111b6bc g     F .text	00000060 __mcmp
8113eae4 g     O .bss	00000004 current_sector_index
81135bc4 g     F .text	00000168 altera_avalon_uart_init
81138728 g     F .text	00000044 alt_msgdma_extended_descriptor_sync_transfer
8110405c g     F .text	00000438 bSdmaDmaM2Transfer
8110e040 g     F .text	00000034 vResetTimeCode
8110da58 g     F .text	0000002c cFeeSpwChannelEnable
81119974 g     F .text	00000018 __fp_lock_all
81138e68 g     F .text	00000054 alt_ic_irq_enabled
811059e0 g     F .text	000000e0 I2C_Write
8113ea6c g     O .bss	00000002 OSTmrFree
8112a144 g     F .text	000000e8 OS_FlagInit
811261bc g     F .text	000000a4 alt_alarm_stop
81111afc g     F .text	0000001c strtol
8112f754 g     F .text	00000140 OSTmrDel
81130af0 g     F .text	000000e8 mark_cluster
8113e928 g     O .rwdata	00000002 OSTaskIdleStkSize
8113ea20 g     O .bss	00000004 alt_irq_active
8112ce0c g     F .text	000000b8 OSSemAccept
8110fef4 g     F .text	0000044c _fseeko_r
8112a8bc g     F .text	000000e0 OSMemPut
8112a3d4 g     F .text	000001dc OSMemCreate
8113ea70 g     O .bss	00000004 OSIdleCtrMax
81100104 g     F .exceptions	000000dc alt_irq_handler
8113d4b0 g     O .rwdata	00000028 alt_dev_null
811374e0 g     F .text	00000098 alt_msgdma_construct_extended_mm_to_st_descriptor
81107ac8 g     F .text	00000040 bSyncSetOst
8113e93c g     O .rwdata	00000002 OSTicksPerSec
81132fb4 g     F .text	00000194 convert_filename_to_name_extension
8110a258 g     F .text	00000030 vSimMebTask
81105d28 g     F .text	00000094 i2c_start
811393a8 g       .text	00000000 OSIntCtxSw
811080f0 g     F .text	00000074 bSyncCtrCh4OutEnable
811382c4 g     F .text	00000094 alt_msgdma_start_prefetcher_with_std_desc_list
811256ec g     F .text	00000028 alt_dcache_flush_all
8111b0c8 g     F .text	00000068 __hi0bits
8110def4 g     F .text	0000003c vChangeRTValue
8113eab8 g     O .bss	00000004 is_sd_card_formated_as_FAT16
8110d564 g     F .text	00000050 vNFeeNotInUse
8112528c g     F .text	00000080 .hidden __fixdfsi
81149754 g     O .bss	00002000 vInitialTask_stk
8113e9d4 g     O .bss	00000002 usiIdCMD
81107dd0 g     F .text	00000054 bSyncCtrStart
81132c2c g     F .text	00000254 find_first_empty_record_in_a_subdirectory
81109860 g     F .text	00000410 bPreParser
8111dc80 g     F .text	00000018 strtod
8113ea74 g     O .bss	00000004 OSTCBFreeList
8112d400 g     F .text	00000174 OSSemPendAbort
8110ca68 g     F .text	0000004c vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8110d1a8 g     F .text	0000004c vFailCreateTimerRetransmisison
8110dc78 g     F .text	0000019c vSimucamStructureInit
8113e8bc g     O .rwdata	00000008 alt_dev_list
811264f0 g     F .text	00000100 write
81139904 g     F .text	000000a8 _putc_r
8113eadc g     O .bss	00000004 device_pointer
8113e940 g     O .rwdata	00000002 OSVersionNbr
81123408 g     F .text	000000bc .hidden __gtsf2
811094b8 g     F .text	00000118 getPreParsedPacket
8112578c g     F .text	000000b8 fstat
8110e14c g     F .text	00000040 vChangeIdNFEEMaster
8110fea8 g     F .text	0000002c fprintf
8110db48 g     F .text	00000038 cFeeRMAPLogEnable
81102c18 g     F .text	00000110 DMA_SINGLE_TRANSFER
81104a6c g     F .text	00000058 bFeebCh6IrqFlagBufferEmpty
8110d2f4 g     F .text	00000068 vFailPostBlockingSemTimeoutTask
8110e43c g     F .text	00000058 _reg_write
8110e18c g     F .text	00000034 vChangeDefaultIdNFEEMaster
81124894 g     F .text	000000f4 .hidden __ledf2
8112f9d4 g     F .text	000001b8 OSTmrRemainGet
8113e8e8 g     O .rwdata	00000004 OSEndiannessTest
811073a4 g     F .text	00000058 v_spi_start
8111b424 g     F .text	00000148 __pow5mult
8111fda0 g     F .text	00001464 ___vfiprintf_internal_r
8113ea18 g     O .bss	00000004 __nlocale_changed
81123338 g     F .text	00000058 .hidden __umodsi3
81107f20 g     F .text	00000074 bSyncCtrSyncOutEnable
8110e260 g     F .text	000000f8 bInitializeSDCard
8110d0c4 g     F .text	0000004c vFailParserCommTaskCreate
81111578 g     F .text	00000038 _scanf_r
8110d15c g     F .text	0000004c vFailOutAckHandlerTaskCreate
8113e8fa g     O .rwdata	00000002 OSFlagGrpSize
81137930 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
8112fb8c g     F .text	000000ec OSTmrStateGet
81152690 g       *ABS*	00000000 end
811045d4 g     F .text	00000040 vFeebCh6HandleIrq
8110ce54 g     F .text	00000068 vNoContentInPreParsedBuffer
81110340 g     F .text	0000001c fseeko
8110fd58 g     F .text	0000000c _atoi_r
81136410 g     F .text	00000240 altera_avalon_uart_write
8110fed8 g     F .text	0000001c fseek
8110b04c g     F .text	00000090 vCCDChangeValues
81134d98 g     F .text	00000150 altera_avalon_jtag_uart_init
811285cc g     F .text	000000e4 OS_TaskStat
811001e0 g     F .exceptions	0000007c alt_instruction_exception_entry
8110c6c8 g     F .text	0000004c vFailTestCriticasParts
81139d60 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81101fb0 g     F .text	00000470 bDdr2MemoryRandomWriteTest
81135a18 g     F .text	00000084 alt_avalon_timer_sc_init
81104efc g     F .text	000000a8 bFeebSetWindowing
81135b04 g     F .text	00000068 altera_avalon_uart_write_fd
8110fce8 g     F .text	00000064 .hidden __clzsi2
81135b6c g     F .text	00000058 altera_avalon_uart_close_fd
811356cc g     F .text	000002cc altera_avalon_jtag_uart_write
81130100 g     F .text	00000174 OSTmr_Init
8114b754 g     O .bss	0000010c xBuffer128
81119964 g     F .text	00000004 __sfp_lock_acquire
811032f8 g     F .text	00000048 sense_log_temp
8111ab7c g     F .text	000000e4 memchr
81128270 g     F .text	0000005c OS_MemClr
81113cf8 g     F .text	00002200 ___vfprintf_internal_r
81139488 g     F .text	00000164 OSTaskStkInit
811115b0 g     F .text	00000060 _sprintf_r
81119dec g     F .text	00000318 _free_r
81139104 g     F .text	00000234 alt_printf
8110b7a0 g     F .text	00000050 vTimeoutCheck
8110e4ec g     F .text	000001fc _print_codec_status
8111a87c g     F .text	00000010 __locale_mb_cur_max
81127880 g     F .text	000001a0 OS_EventTaskRdy
81102b74 g     F .text	000000a4 DMA_DISPATCHER_RESET
81139b9c g     F .text	00000188 __call_exitprocs
8113ea78 g     O .bss	00000001 OSCPUUsage
8113ea14 g     O .bss	00000004 __mlocale_changed
81107e78 g     F .text	00000054 bSyncCtrOneShot
8113e8a0 g     O .rwdata	00000004 __malloc_sbrk_base
8110025c g     F .text	0000003c _start
811085f0 g     F .text	0000003c uliSyncReadStatus
8113ea30 g     O .bss	00000004 _alt_tick_rate
8112c2f4 g     F .text	00000294 OSQPend
8111dda0 g     F .text	000002e8 _strtoll_r
8112f078 g     F .text	0000010c OSTimeDly
8111b56c g     F .text	00000150 __lshift
81108f38 g     F .text	000002c0 vOutAckHandlerTask
81137388 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_st_descriptor
8113ea34 g     O .bss	00000004 _alt_nticks
81125f50 g     F .text	00000104 read
81130754 g     F .text	000000f0 alt_sys_init
8110f0e4 g     F .text	0000012c .hidden __floatsisf
8111e5d8 g     F .text	000001d8 __ssprint_r
81111120 g     F .text	00000068 _open_r
8110e414 g     F .text	00000028 bTestSimucamCriticalHW
8110502c g     F .text	000000ac bFeebGetBuffersStatus
8110c4ac g     F .text	000000a4 ucCrc8
811007ac g     F .text	00000cb4 bDdr2EepromDump
81139a7c g     F .text	00000120 __register_exitproc
8113ea79 g     O .bss	00000001 OSTaskCtr
8110b750 g     F .text	00000050 siPosStr
81122270 g     F .text	000000d0 strncmp
8112f184 g     F .text	00000164 OSTimeDlyHMSM
8111b224 g     F .text	00000200 __multiply
811352a0 g     F .text	00000070 altera_avalon_jtag_uart_close
81107574 g     F .text	00000058 v_spi_end
8110e3d4 g     F .text	00000040 cGetNextChar
8113eb88 g     O .bss	00000028 __malloc_current_mallinfo
8113e8ee g     O .rwdata	00000002 OSEventMax
81123390 g     F .text	00000078 .hidden __eqsf2
8111ba98 g     F .text	00000154 __d2b
8112d574 g     F .text	00000118 OSSemPost
81104760 g     F .text	00000044 vFeebCh4IrqFlagClrBufferEmpty
8110df30 g     F .text	00000030 vChangeDefaultRTValue
81104654 g     F .text	00000040 vFeebCh8HandleIrq
8113eab4 g     O .bss	00000004 initialized
811273f4 g     F .text	000000e4 OSSchedUnlock
811075cc g     F .text	00000164 RTCC_SPI_R_MAC
81134c14 g     F .text	00000068 altera_avalon_jtag_uart_read_fd
8111e088 g     F .text	00000254 _strtoul_r
81138c08 g     F .text	000000e4 alt_get_fd
8113ea7c g     O .bss	00000004 OSMemFreeList
81127550 g     F .text	000000b8 OSStatInit
8110293c g     F .text	00000064 DMA_OPEN_DEVICE
81152028 g     O .bss	00000014 search_data
8110517c g     F .text	00000100 bSpwcSetLink
811254a0 g     F .text	00000130 alt_busy_sleep
81129f10 g     F .text	000000cc OSFlagQuery
81107f94 g     F .text	00000074 bSyncCtrCh1OutEnable
8113e924 g     O .rwdata	00000002 OSTaskCreateExtEn
8110e6e8 g     F .text	00000074 _split_codec_status
81117a40 g     F .text	0000005c _close_r
8110cebc g     F .text	00000068 vCouldNotSendEthConfUART
81108c18 g     F .text	00000320 vInitialTask
81137870 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
81139888 g     F .text	0000007c memcmp
81127858 g     F .text	00000028 OS_Dummy
81134ce4 g     F .text	00000058 altera_avalon_jtag_uart_close_fd
81152690 g       *ABS*	00000000 __alt_stack_base
81134d3c g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
811047a4 g     F .text	00000044 vFeebCh5IrqFlagClrBufferEmpty
811103c0 g     F .text	000000d4 _fwrite_r
81137990 g     F .text	000000a8 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
811048b4 g     F .text	00000058 bFeebCh1IrqFlagBufferEmpty
811178e4 g     F .text	0000015c __swsetup_r
8114f31c g     O .bss	000001e0 OSQTbl
8110a288 g     F .text	000008e0 vTimeoutCheckerTask
8114d9b0 g     O .bss	0000001c xConfEth
81123e40 g     F .text	000008f0 .hidden __divdf3
8110df94 g     F .text	0000003c vChangeSyncSource
8111981c g     F .text	00000120 __sfp
8115203c g     O .bss	00000054 boot_sector_data
81102a84 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_EMPTY
8111bd14 g     F .text	00000078 __copybits
8113d030 g     O .rwdata	00000408 __malloc_av_
81119970 g     F .text	00000004 __sinit_lock_release
8113e960 g     O .bss	00000004 uliInitialState
81105dbc g     F .text	00000080 i2c_stop
8110e800 g     F .text	00000064 Verif_Error
8110e864 g     F .text	00000034 toInt
8110c814 g     F .text	0000004c vFailSendPreAckSenderSemaphore
8113ea80 g     O .bss	00000004 OSTCBHighRdy
8110f308 g     F .text	00000720 .hidden __muldf3
81111684 g     F .text	0000005c __sread
81119c84 g     F .text	0000003c fread
8113ea84 g     O .bss	00000004 OSQFreeList
81138af8 g     F .text	00000110 alt_find_file
811388e4 g     F .text	000000ac alt_dev_llist_insert
81126724 g     F .text	00000128 __malloc_lock
8110fe78 g     F .text	00000030 _fprintf_r
811260c0 g     F .text	000000fc sbrk
8110d9d4 g     F .text	0000002c vFeeSpwRMAPLoadDefault
81111b18 g     F .text	000021e0 ___svfprintf_internal_r
81126a48 g     F .text	00000148 OSEventNameSet
81119558 g     F .text	00000064 _fflush_r
811212e4 g     F .text	000000cc _calloc_r
8113ea88 g     O .bss	00000001 OSRdyGrp
811079c4 g     F .text	00000044 ucSyncStatusCycleNumber
8112fc78 g     F .text	00000148 OSTmrStart
81104594 g     F .text	00000040 vFeebCh5HandleIrq
8110fe60 g     F .text	00000018 fopen
811029a0 g     F .text	0000004c DMA_CONFIG
8113e960 g       *ABS*	00000000 __bss_start
81110ff8 g     F .text	00000128 memset
81109c70 g     F .text	00000164 setPreParsedFreePos
811383ec g     F .text	00000060 alt_msgdma_open
81108710 g     F .text	00000508 vInAckHandlerTask
8110ae64 g     F .text	00000180 main
8110c998 g     F .text	00000068 vFailGetMutexReceiverTask
8110de4c g     F .text	0000003c vChangeEPValue
8113ea2c g     O .bss	00000004 alt_envp
8113ea04 g     O .bss	00000004 __malloc_max_total_mem
81137c90 g     F .text	000001a0 alt_msgdma_prefetcher_add_extended_desc_to_list
8110c550 g     F .text	0000005c ucCrc8wInit
8110d1f4 g     F .text	0000004c vCouldNotCheckBufferTimeOutFunction
81134c7c g     F .text	00000068 altera_avalon_jtag_uart_write_fd
81102f38 g     F .text	000002c8 POWER_Read
81105f74 g     F .text	00000160 i2c_read
81122488 g     F .text	00000018 __swbuf
8113c830 g     O .rodata	00000100 OSUnMapTbl
811234c4 g     F .text	000000c8 .hidden __ltsf2
81134018 g     F .text	00000090 alt_up_sd_card_get_attributes
81119a50 g     F .text	00000234 _fread_r
8110c860 g     F .text	00000068 vFailGetCountSemaphoreSenderTask
81105768 g     F .text	0000003c bDisableIsoDrivers
8113e91e g     O .rwdata	00000002 OSSemEn
81130844 g     F .text	000000bc Write_Sector_Data
81134428 g     F .text	00000628 alt_up_sd_card_write
81129b74 g     F .text	0000039c OSFlagPost
811117d0 g     F .text	00000008 __sclose
8110d4fc g     F .text	00000068 vFailStartTimerRetransmission
811fa000 g       *ABS*	00000000 __alt_heap_limit
811214a8 g     F .text	00000014 fclose
81127a20 g     F .text	00000118 OS_EventTaskWait
8110d3c4 g     F .text	00000068 vCouldNotRetransmitB32TimeoutTask
811118bc g     F .text	00000240 _strtol_r
8110fb40 g     F .text	000001a8 .hidden __truncdfsf2
811286b0 g     F .text	000000d4 OS_TaskStatStkChk
8112e490 g     F .text	00000158 OSTaskDelReq
81117ca4 g     F .text	00001690 _dtoa_r
81137fac g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
81110694 g     F .text	00000814 _malloc_r
8112260c g     F .text	00000030 __ascii_wctomb
8112ad0c g     F .text	000001d0 OSMutexCreate
8110d35c g     F .text	00000068 vFailCouldNotRetransmitTimeoutTask
8113e8c8 g     O .rwdata	00000004 alt_errno
81137ad8 g     F .text	000000c0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
811274d8 g     F .text	00000078 OSStart
8110527c g     F .text	000000d0 bSpwcGetLink
81106cc8 g     F .text	000004e8 POWER_SPI_RW
8111f9f4 g     F .text	000000dc __submore
811266bc g     F .text	00000068 __env_unlock
8111a5c8 g     F .text	000000cc _fwalk
8112e944 g     F .text	000001dc OSTaskResume
8112a99c g     F .text	000000f0 OSMemQuery
8113e930 g     O .rwdata	00000002 OSTaskStatEn
81152690 g       *ABS*	00000000 __alt_stack_limit
8113e978 g     O .bss	00000004 ECommSpwCh
8110e0ac g     F .text	0000003c vChangeAutoResetSync
8111ab18 g     F .text	00000064 _mbtowc_r
8113e90a g     O .rwdata	00000002 OSMemMax
8112c86c g     F .text	00000178 OSQPostFront
811399ac g     F .text	000000d0 putc
811231dc g     F .text	00000084 .hidden __divsi3
8113ea89 g     O .bss	00000006 OSRdyTbl
8113e8e4 g     O .rwdata	00000002 OSDebugEn
81119cc0 g     F .text	0000012c _malloc_trim_r
81139d60 g       *ABS*	00000000 __CTOR_END__
8113e9f8 g     O .bss	00000008 xSdHandle
8110ece0 g     F .text	00000404 .hidden __mulsf3
8113e8fc g     O .rwdata	00000002 OSFlagNodeSize
8113e964 g     O .bss	00000004 pnt_memory
8110e1c0 g     F .text	00000040 vSyncReset
81107a88 g     F .text	00000040 bSyncSetPer
81100298 g     F .text	00000514 bDdr2EepromTest
8113eac0 g     O .bss	00000004 status_register
8113e944 g     O .rwdata	00000002 OSTmrCfgMax
8110841c g     F .text	00000074 bSyncIrqFlagClrError
8110cf8c g     F .text	00000068 vFailSetPreAckSenderBuffer
8111c538 g     F .text	000000dc strcmp
8113eac8 g     O .bss	00000004 command_register
8112bdf8 g     F .text	000001b4 OSQCreate
8112e5e8 g     F .text	000001a0 OSTaskNameGet
8114b860 g     O .bss	00000010 xReceivedACK
8112c9e4 g     F .text	00000214 OSQPostOpt
81127608 g     F .text	00000228 OSTimeTick
8113e92c g     O .rwdata	00000002 OSTaskMax
81139d60 g       *ABS*	00000000 __DTOR_LIST__
8112cec4 g     F .text	000000e0 OSSemCreate
8113e950 g     O .rwdata	00000002 OSTmrWheelSize
8110e494 g     F .text	00000058 _reg_read
8112b9a4 g     F .text	00000174 OSMutexQuery
81124730 g     F .text	00000088 .hidden __nedf2
8113e926 g     O .rwdata	00000002 OSTaskDelEn
8110de14 g     F .text	00000038 vLoadDefaultEPValue
8110824c g     F .text	00000074 bSyncCtrCh7OutEnable
8112d68c g     F .text	00000118 OSSemQuery
8112bfac g     F .text	00000288 OSQDel
8112c588 g     F .text	00000174 OSQPendAbort
8113e9d8 g     O .bss	00000004 xMutexPreParsed
81130714 g     F .text	00000040 alt_irq_init
81126054 g     F .text	0000006c alt_release_fd
81130a34 g     F .text	000000bc get_cluster_flag
81108490 g     F .text	00000074 bSyncIrqFlagClrBlank
811386e4 g     F .text	00000044 alt_msgdma_standard_descriptor_sync_transfer
81111610 g     F .text	00000074 sprintf
8113c0e8 g     O .rodata	00000100 .hidden __clz_tab
81131008 g     F .text	00000294 Write_File_Record_At_Offset
81101520 g     F .text	00000580 bDdr2MemoryWriteTest
8110ca00 g     F .text	00000068 vFailGetMutexTxUARTSenderTask
8113ea10 g     O .bss	00000004 _PathLocale
8110855c g     F .text	00000058 bSyncIrqFlagBlank
81106b80 g     F .text	000000c0 iMsgdmaConstructExtendedMmToMmDescriptor
8112fdc0 g     F .text	000001e8 OSTmrStop
8110b700 g     F .text	00000050 usiGetIdCMD
8111dc98 g     F .text	00000108 strtof
81139834 g     F .text	00000014 atexit
81104514 g     F .text	00000040 vFeebCh3HandleIrq
81123408 g     F .text	000000bc .hidden __gesf2
811117d8 g     F .text	0000004c strcspn
8111787c g     F .text	00000068 _write_r
8110721c g     F .text	00000074 vRstcReleaseDeviceReset
8110d110 g     F .text	0000004c vFailInAckHandlerTaskCreate
81127360 g     F .text	00000094 OSSchedLock
8111a8ac g     F .text	00000018 setlocale
81137a38 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8114f4fc g     O .bss	00000800 OSTmrTaskStk
81111534 g     F .text	00000044 scanf
81128f68 g     F .text	00000110 OSFlagCreate
8113129c g     F .text	00000688 Check_for_DOS_FAT
81133148 g     F .text	000002d0 create_file
8111c530 g     F .text	00000008 nanf
8113e89c g     O .rwdata	00000004 _impure_ptr
8113eac4 g     O .bss	00000004 CSD_register_w0
8113ea24 g     O .bss	00000004 alt_argc
81119334 g     F .text	00000224 __sflush_r
8111a938 g     F .text	000000b4 _mbrtowc_r
811389f8 g     F .text	00000068 _do_dtors
8111a898 g     F .text	00000008 __locale_cjk_lang
81103340 g     F .text	0000078c sense_log
8113e970 g     O .bss	00000004 ESdmaBufferSide
8113e8f6 g     O .rwdata	00000002 OSEventMultiEn
8110fed4 g     F .text	00000004 _fseek_r
8114b870 g     O .bss	00002000 vParserCommTask_stk
8110c5ac g     F .text	00000070 printErrorTask
8110de88 g     F .text	00000030 vChangeDefaultEPValue
8112f590 g     F .text	000001c4 OSTmrCreate
811112fc g     F .text	000001dc __srefill_r
811057a4 g     F .text	0000003c bEnableLvdsBoard
8113e9dc g     O .bss	00000004 xMutexBuffer32
81129078 g     F .text	00000250 OSFlagDel
8113ea90 g     O .bss	00000004 OSEventFreeList
8110581c g     F .text	000000c0 bSetPreEmphasys
81100020 g       .exceptions	00000000 alt_irq_entry
8111aacc g     F .text	0000004c __ascii_mbtowc
81107d58 g     F .text	00000078 bSyncCtrExtnIrq
8111b920 g     F .text	00000064 __ulp
8112954c g     F .text	000005c0 OSFlagPend
8113e942 g     O .rwdata	00000002 OSTmrEn
8111998c g     F .text	00000018 __fp_unlock_all
81109f7c g     F .text	000001a8 setPreAckReceiverFreePos
81107d18 g     F .text	00000040 bSyncErrInj
8113e8b4 g     O .rwdata	00000008 alt_fs_list
81131ae4 g     F .text	00000274 check_file_name_for_FAT16_compliance
8112f894 g     F .text	00000140 OSTmrNameGet
8113ecb0 g     O .bss	00000400 xSZData
81128490 g     F .text	0000007c OS_StrCopy
8113ead0 g     O .bss	00000004 buffer_memory
8110cdec g     F .text	00000068 vFailGetxMutexPreParsedParserRxTask
8113e90c g     O .rwdata	00000002 OSMemNameSize
81103acc g     F .text	000000b0 bSdmaInitM1Dma
811083a8 g     F .text	00000074 bSyncIrqEnableBlank
81139714 g     F .text	00000028 OSInitHookEnd
8110d68c g     F .text	00000348 vUpdateMemMapFEE
8110d05c g     F .text	00000068 vFailSetPreAckReceiverBuffer
81104b1c g     F .text	00000058 bFeebCh8IrqFlagBufferEmpty
8113e938 g     O .rwdata	00000002 OSTCBPrioTblMax
8111a8c4 g     F .text	0000000c localeconv
8113e9e0 g     O .bss	00000004 xTimerRetransmission
81109670 g     F .text	000001f0 vReceiverUartTask
8113e934 g     O .rwdata	00000002 OSTaskStatStkChkEn
8113e9e4 g     O .bss	00000004 xMutexBuffer128
81104494 g     F .text	00000040 vFeebCh1HandleIrq
81104614 g     F .text	00000040 vFeebCh7HandleIrq
81138cec g     F .text	00000058 alt_ic_isr_register
8113e908 g     O .rwdata	00000002 OSMemEn
8113e888 g     O .rwdata	00000004 alt_stack_limit_value
81110494 g     F .text	0000003c fwrite
8113ead4 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
8113e912 g     O .rwdata	00000002 OSMutexEn
8113e960 g       *ABS*	00000000 _edata
81135a9c g     F .text	00000068 altera_avalon_uart_read_fd
8110e118 g     F .text	00000034 vLoadDefaultIdNFEEMaster
81152690 g       *ABS*	00000000 _end
81152090 g     O .bss	00000500 active_files
8113ea94 g     O .bss	00000001 OSIntNesting
8110cab4 g     F .text	0000004c vFailInitialization
81101460 g     F .text	000000c0 bDdr2SwitchMemory
8110dab0 g     F .text	0000002c cFeeRMAPDump
8113e9e8 g     O .bss	00000004 xSemCountBuffer32
811214bc g     F .text	0000016c __fputwc
8110da00 g     F .text	0000002c vFeeSpwRMAPChangeConfig
8111779c g     F .text	00000070 vfscanf
81133418 g     F .text	00000150 copy_file_record_name_to_string
81135310 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
8112f2e8 g     F .text	000001dc OSTimeDlyResume
81131924 g     F .text	000000f4 Look_for_FAT16
811293f8 g     F .text	00000154 OSFlagNameSet
8113e9ec g     O .bss	00000004 xMutexBuffer64
8112eb20 g     F .text	000001c8 OSTaskStkChk
81138dd4 g     F .text	00000094 alt_ic_irq_disable
81103c2c g     F .text	00000430 bSdmaDmaM1Transfer
8113e90e g     O .rwdata	00000002 OSMemSize
8110cbe4 g     F .text	00000068 vFailSetCountSemaphorexBuffer32
811116e8 g     F .text	00000084 __swrite
8113e8a4 g     O .rwdata	00000004 __malloc_trim_threshold
8111a88c g     F .text	0000000c __locale_msgcharset
8113ea98 g     O .bss	00000004 OSTCBCur
8110d42c g     F .text	00000068 vCouldNotRetransmitB64TimeoutTask
81106c84 g     F .text	00000044 iMsgdmaExtendedDescriptorSyncTransfer
81139848 g     F .text	00000040 exit
8112b784 g     F .text	00000220 OSMutexPost
81108504 g     F .text	00000058 bSyncIrqFlagError
81133844 g     F .text	000003c0 alt_up_sd_card_find_next
8113e910 g     O .rwdata	00000002 OSMemTblSize
8111a694 g     F .text	000000cc _fwalk_reent
81137e30 g     F .text	000000a0 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8110f210 g     F .text	000000f8 .hidden __floatunsisf
8111b71c g     F .text	00000204 __mdiff
81104b74 g     F .text	00000180 vFeebInitIrq
8110cb4c g     F .text	0000004c vFailSenderCreate
81123260 g     F .text	00000074 .hidden __modsi3
81107c64 g     F .text	0000003c uliSyncGetPer
8113e9f0 g     O .bss	00000004 xMutexSenderACK
8110d28c g     F .text	00000068 vFailGetBlockingSemTimeoutTask
8113e894 g     O .rwdata	00000004 __ctype_ptr__
8110cff4 g     F .text	00000068 vFailSetPreParsedBuffer
81130954 g     F .text	000000e0 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
81119968 g     F .text	00000004 __sfp_lock_release
81104dc8 g     F .text	000000ac bFeebGetIrqControl
811271a8 g     F .text	00000064 OSInit
81106154 g     F .text	00000078 bSetPainelLeds
81137578 g     F .text	000000b0 alt_msgdma_construct_extended_mm_to_mm_descriptor
8113ea9c g     O .bss	00000004 OSTmrTime
81101aa0 g     F .text	00000510 bDdr2MemoryReadTest
8112eed4 g     F .text	0000012c OSTaskQuery
81108334 g     F .text	00000074 bSyncIrqEnableError
8112cd5c g     F .text	000000b0 OS_QInit
8111c460 g     F .text	000000d0 __sccl
8110fd4c g     F .text	0000000c atoi
811086e0 g     F .text	00000030 vFeeTask
8112850c g     F .text	0000005c OS_StrLen
8110490c g     F .text	00000058 bFeebCh2IrqFlagBufferEmpty
8112a7a0 g     F .text	0000011c OSMemNameSet
8113c1e8 g     O .rodata	00000101 _ctype_
81107c28 g     F .text	0000003c uliSyncGetBt
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8110ccb4 g     F .text	00000068 vFailSetCountSemaphorexBuffer128
8113e92a g     O .rwdata	00000002 OSTaskProfileEn
81137448 g     F .text	00000098 alt_msgdma_construct_extended_st_to_mm_descriptor
8113e9f4 g     O .bss	00000004 xTxUARTMutex
8113eaa0 g     O .bss	00000004 OSTime
8113e8ac g     O .rwdata	00000004 __mbtowc
811360bc g     F .text	0000005c altera_avalon_uart_close
8113eaa4 g     O .bss	00000004 OSTmrSem
8114fcfc g     O .bss	00000800 OSTaskIdleStk
8110fd64 g     F .text	000000fc _fopen_r
81139d24 g     F .text	0000003c _exit
8113876c g     F .text	00000134 alt_alarm_start
811292c8 g     F .text	00000130 OSFlagNameGet
8112f4c4 g     F .text	00000064 OSTimeGet
8113e974 g     O .bss	00000004 ESdmaChBufferId
811340a8 g     F .text	00000380 alt_up_sd_card_read
811104d0 g     F .text	000001c4 __smakebuf_r
811049bc g     F .text	00000058 bFeebCh4IrqFlagBufferEmpty
8113e958 g     O .rwdata	00000008 alt_msgdma_list
81111824 g     F .text	00000098 strlen
811074c0 g     F .text	000000b4 uc_spi_get_byte
81139644 g     F .text	00000028 OSTaskSwHook
81125db0 g     F .text	0000015c open
811504fc g     O .bss	00000c30 OSEventTbl
8110da2c g     F .text	0000002c vFeeSpwRMAPChangeDefault
811247b8 g     F .text	000000dc .hidden __gedf2
8114d870 g     O .bss	00000010 xSenderACK
81139338 g     F .text	00000044 alt_putchar
8115112c g     O .bss	00000e58 OSTCBTbl
811217d4 g     F .text	00000838 __gethex
8112d7a4 g     F .text	00000108 OSSemSet
8110dadc g     F .text	00000038 cFeeRMAPEchoingEnable
8113e8b0 g     O .rwdata	00000004 __wctomb
8110ae34 g     F .text	00000030 vVariablesInitialization
8111fd88 g     F .text	00000018 __sprint_r
81104e74 g     F .text	00000088 bFeebGetIrqFlags
8113e96c g     O .bss	00000004 pxDmaM2Dev
8110c67c g     F .text	0000004c vFailCreateSemaphoreResources
8113e8cc g     O .rwdata	00000004 alt_priority_mask
811057e0 g     F .text	0000003c bDisableLvdsBoard
8112cfa4 g     F .text	00000248 OSSemDel
8113eaa8 g     O .bss	00000004 OSFlagFreeList
811073fc g     F .text	000000c4 v_spi_send_byte
81107730 g     F .text	000000d0 bSSDisplayConfig
81138d44 g     F .text	00000090 alt_ic_irq_enable
8113e8f0 g     O .rwdata	00000002 OSEventNameSize
81115ef8 g     F .text	0000001c __vfprintf_internal
8113eaac g     O .bss	00000001 OSStatRdy
81108008 g     F .text	00000074 bSyncCtrCh2OutEnable
81151f84 g     O .bss	000000a4 OSTCBPrioTbl
8113615c g     F .text	00000270 altera_avalon_uart_read
8112263c g     F .text	00000064 _wctomb_r
811265f0 g     F .text	000000cc __env_lock
8113e936 g     O .rwdata	00000002 OSTaskSwHookEn
8110471c g     F .text	00000044 vFeebCh3IrqFlagClrBufferEmpty
81124988 g     F .text	00000904 .hidden __subdf3
8114d880 g     O .bss	00000130 xPreParsed
81107ca0 g     F .text	0000003c uliSyncGetOst
811047e8 g     F .text	00000044 vFeebCh6IrqFlagClrBufferEmpty
8110b470 g     F .text	00000290 vSendEthConf
8111b130 g     F .text	000000b0 __lo0bits
81115fd8 g     F .text	000017c4 __svfscanf_r
8113e8d4 g     O .rwdata	00000008 alt_alarm_list
8111fad0 g     F .text	0000019c _ungetc_r
8113e8fe g     O .rwdata	00000002 OSFlagWidth
81138990 g     F .text	00000068 _do_ctors
811029ec g     F .text	0000004c DMA_BUSY
81122544 g     F .text	000000c8 wcrtomb
8110afe4 g     F .text	00000068 vCCDLoadDefaultValues
81125614 g     F .text	000000d8 close
81107cdc g     F .text	0000003c uliSyncGetGeneral
8113ea3c g     O .bss	00000004 alt_envsem
8113eab0 g     O .bss	00000004 OSIdleCtrRun
81127830 g     F .text	00000028 OSVersion
8113e948 g     O .rwdata	00000002 OSTmrCfgWheelSize
8112f000 g     F .text	00000078 OS_TaskStkClr
8110e358 g     F .text	0000003c siOpenFile
8113e922 g     O .rwdata	00000002 OSTaskCreateEn
8110c77c g     F .text	0000004c vFailSendPreParsedSemaphore
81131e18 g     F .text	000002a4 match_file_record_to_name_ext
81127e58 g     F .text	00000070 OS_EventWaitListInit
8112164c g     F .text	00000088 fputwc
8110c714 g     F .text	00000068 vFailSendxSemCommInit
8113973c g     F .text	00000028 OSTaskIdleHook
8111996c g     F .text	00000004 __sinit_lock_acquire
8111ae94 g     F .text	00000128 __multadd
8110482c g     F .text	00000044 vFeebCh7IrqFlagClrBufferEmpty
8110792c g     F .text	0000004c ucSyncStatusState
8112ece8 g     F .text	000001ec OSTaskSuspend
8111ae6c g     F .text	00000028 _Bfree
81107bec g     F .text	0000003c uliSyncGetMbt
81128568 g     F .text	00000064 OS_TaskIdle
8113e94e g     O .rwdata	00000002 OSTmrTblSize
8112cbf8 g     F .text	00000164 OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:
81100020:	deffed04 	addi	sp,sp,-76
81100024:	de003636 	bltu	sp,et,81100100 <alt_exception+0xe0>
81100028:	dfc00015 	stw	ra,0(sp)
8110002c:	d8400215 	stw	at,8(sp)
81100030:	d8800315 	stw	r2,12(sp)
81100034:	d8c00415 	stw	r3,16(sp)
81100038:	d9000515 	stw	r4,20(sp)
8110003c:	d9400615 	stw	r5,24(sp)
81100040:	d9800715 	stw	r6,28(sp)
81100044:	d9c00815 	stw	r7,32(sp)
81100048:	000b307a 	rdctl	r5,estatus
8110004c:	da000915 	stw	r8,36(sp)
81100050:	da400a15 	stw	r9,40(sp)
81100054:	da800b15 	stw	r10,44(sp)
81100058:	dac00c15 	stw	r11,48(sp)
8110005c:	db000d15 	stw	r12,52(sp)
81100060:	db400e15 	stw	r13,56(sp)
81100064:	db800f15 	stw	r14,60(sp)
81100068:	dbc01015 	stw	r15,64(sp)
8110006c:	d9401115 	stw	r5,68(sp)
81100070:	ebffff04 	addi	r15,ea,-4
81100074:	dbc01215 	stw	r15,72(sp)
81100078:	0009313a 	rdctl	r4,ipending
8110007c:	2880004c 	andi	r2,r5,1
81100080:	10000326 	beq	r2,zero,81100090 <alt_exception+0x70>
81100084:	20000226 	beq	r4,zero,81100090 <alt_exception+0x70>
81100088:	11001040 	call	81100104 <alt_irq_handler>
8110008c:	00000706 	br	811000ac <alt_exception+0x8c>
81100090:	df401215 	stw	ea,72(sp)
81100094:	e8bfff17 	ldw	r2,-4(ea)
81100098:	e93fff04 	addi	r4,ea,-4
8110009c:	11001e00 	call	811001e0 <alt_instruction_exception_entry>
811000a0:	1000021e 	bne	r2,zero,811000ac <alt_exception+0x8c>
811000a4:	ebffff04 	addi	r15,ea,-4
811000a8:	dbc01215 	stw	r15,72(sp)
811000ac:	d9401117 	ldw	r5,68(sp)
811000b0:	df401217 	ldw	ea,72(sp)
811000b4:	dfc00017 	ldw	ra,0(sp)
811000b8:	2801707a 	wrctl	estatus,r5
811000bc:	d8400217 	ldw	at,8(sp)
811000c0:	d8800317 	ldw	r2,12(sp)
811000c4:	d8c00417 	ldw	r3,16(sp)
811000c8:	d9000517 	ldw	r4,20(sp)
811000cc:	d9400617 	ldw	r5,24(sp)
811000d0:	d9800717 	ldw	r6,28(sp)
811000d4:	d9c00817 	ldw	r7,32(sp)
811000d8:	da000917 	ldw	r8,36(sp)
811000dc:	da400a17 	ldw	r9,40(sp)
811000e0:	da800b17 	ldw	r10,44(sp)
811000e4:	dac00c17 	ldw	r11,48(sp)
811000e8:	db000d17 	ldw	r12,52(sp)
811000ec:	db400e17 	ldw	r13,56(sp)
811000f0:	db800f17 	ldw	r14,60(sp)
811000f4:	dbc01017 	ldw	r15,64(sp)
811000f8:	dec01304 	addi	sp,sp,76
811000fc:	ef80083a 	eret
81100100:	003da0fa 	break	3

81100104 <alt_irq_handler>:
81100104:	defff904 	addi	sp,sp,-28
81100108:	de00012e 	bgeu	sp,et,81100110 <alt_irq_handler+0xc>
8110010c:	003b68fa 	trap	3
81100110:	dfc00615 	stw	ra,24(sp)
81100114:	df000515 	stw	fp,20(sp)
81100118:	df000504 	addi	fp,sp,20
8110011c:	112720c0 	call	8112720c <OSIntEnter>
81100120:	0005313a 	rdctl	r2,ipending
81100124:	e0bffe15 	stw	r2,-8(fp)
81100128:	e0bffe17 	ldw	r2,-8(fp)
8110012c:	e0bffb15 	stw	r2,-20(fp)
81100130:	e03ffd15 	stw	zero,-12(fp)
81100134:	00800044 	movi	r2,1
81100138:	e0bffc15 	stw	r2,-16(fp)
8110013c:	e0fffb17 	ldw	r3,-20(fp)
81100140:	e0bffc17 	ldw	r2,-16(fp)
81100144:	1884703a 	and	r2,r3,r2
81100148:	10001426 	beq	r2,zero,8110019c <alt_irq_handler+0x98>
8110014c:	00a04574 	movhi	r2,33045
81100150:	10896404 	addi	r2,r2,9616
81100154:	e0fffd17 	ldw	r3,-12(fp)
81100158:	180690fa 	slli	r3,r3,3
8110015c:	10c5883a 	add	r2,r2,r3
81100160:	10c00017 	ldw	r3,0(r2)
81100164:	00a04574 	movhi	r2,33045
81100168:	10896404 	addi	r2,r2,9616
8110016c:	e13ffd17 	ldw	r4,-12(fp)
81100170:	200890fa 	slli	r4,r4,3
81100174:	1105883a 	add	r2,r2,r4
81100178:	10800104 	addi	r2,r2,4
8110017c:	10800017 	ldw	r2,0(r2)
81100180:	1009883a 	mov	r4,r2
81100184:	183ee83a 	callr	r3
81100188:	0001883a 	nop
8110018c:	0005313a 	rdctl	r2,ipending
81100190:	e0bfff15 	stw	r2,-4(fp)
81100194:	e0bfff17 	ldw	r2,-4(fp)
81100198:	00000706 	br	811001b8 <alt_irq_handler+0xb4>
8110019c:	e0bffc17 	ldw	r2,-16(fp)
811001a0:	1085883a 	add	r2,r2,r2
811001a4:	e0bffc15 	stw	r2,-16(fp)
811001a8:	e0bffd17 	ldw	r2,-12(fp)
811001ac:	10800044 	addi	r2,r2,1
811001b0:	e0bffd15 	stw	r2,-12(fp)
811001b4:	003fe106 	br	8110013c <__reset+0xfb0e013c>
811001b8:	e0bffb15 	stw	r2,-20(fp)
811001bc:	e0bffb17 	ldw	r2,-20(fp)
811001c0:	103fdb1e 	bne	r2,zero,81100130 <__reset+0xfb0e0130>
811001c4:	11272600 	call	81127260 <OSIntExit>
811001c8:	0001883a 	nop
811001cc:	e037883a 	mov	sp,fp
811001d0:	dfc00117 	ldw	ra,4(sp)
811001d4:	df000017 	ldw	fp,0(sp)
811001d8:	dec00204 	addi	sp,sp,8
811001dc:	f800283a 	ret

811001e0 <alt_instruction_exception_entry>:
811001e0:	defffb04 	addi	sp,sp,-20
811001e4:	de00012e 	bgeu	sp,et,811001ec <alt_instruction_exception_entry+0xc>
811001e8:	003b68fa 	trap	3
811001ec:	dfc00415 	stw	ra,16(sp)
811001f0:	df000315 	stw	fp,12(sp)
811001f4:	df000304 	addi	fp,sp,12
811001f8:	e13fff15 	stw	r4,-4(fp)
811001fc:	000531fa 	rdctl	r2,exception
81100200:	e0bffd15 	stw	r2,-12(fp)
81100204:	e0bffd17 	ldw	r2,-12(fp)
81100208:	10801f0c 	andi	r2,r2,124
8110020c:	1004d0ba 	srli	r2,r2,2
81100210:	e0bffd15 	stw	r2,-12(fp)
81100214:	0005333a 	rdctl	r2,badaddr
81100218:	e0bffe15 	stw	r2,-8(fp)
8110021c:	d0a09917 	ldw	r2,-32156(gp)
81100220:	10000726 	beq	r2,zero,81100240 <alt_instruction_exception_entry+0x60>
81100224:	d0a09917 	ldw	r2,-32156(gp)
81100228:	e0fffd17 	ldw	r3,-12(fp)
8110022c:	e1bffe17 	ldw	r6,-8(fp)
81100230:	e17fff17 	ldw	r5,-4(fp)
81100234:	1809883a 	mov	r4,r3
81100238:	103ee83a 	callr	r2
8110023c:	00000206 	br	81100248 <alt_instruction_exception_entry+0x68>
81100240:	003da03a 	break	0
81100244:	0005883a 	mov	r2,zero
81100248:	e037883a 	mov	sp,fp
8110024c:	dfc00117 	ldw	ra,4(sp)
81100250:	df000017 	ldw	fp,0(sp)
81100254:	dec00204 	addi	sp,sp,8
81100258:	f800283a 	ret

Disassembly of section .text:

8110025c <_start>:
8110025c:	06e047f4 	movhi	sp,33055
81100260:	dee80014 	ori	sp,sp,40960
81100264:	06a04534 	movhi	gp,33044
81100268:	d69a2214 	ori	gp,gp,26760
8110026c:	00a044f4 	movhi	r2,33043
81100270:	10ba5814 	ori	r2,r2,59744
81100274:	00e04574 	movhi	r3,33045
81100278:	18c9a414 	ori	r3,r3,9872
8110027c:	10c00326 	beq	r2,r3,8110028c <_start+0x30>
81100280:	10000015 	stw	zero,0(r2)
81100284:	10800104 	addi	r2,r2,4
81100288:	10fffd36 	bltu	r2,r3,81100280 <__reset+0xfb0e0280>
8110028c:	d6200017 	ldw	et,-32768(gp)
81100290:	1125bdc0 	call	81125bdc <alt_main>

81100294 <alt_after_alt_main>:
81100294:	003fff06 	br	81100294 <__reset+0xfb0e0294>

81100298 <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
81100298:	defff604 	addi	sp,sp,-40
8110029c:	de00012e 	bgeu	sp,et,811002a4 <bDdr2EepromTest+0xc>
811002a0:	003b68fa 	trap	3
811002a4:	dfc00915 	stw	ra,36(sp)
811002a8:	df000815 	stw	fp,32(sp)
811002ac:	df000804 	addi	fp,sp,32
811002b0:	2005883a 	mov	r2,r4
811002b4:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
811002b8:	00e04534 	movhi	r3,33044
811002bc:	18faec04 	addi	r3,r3,-5200
811002c0:	00a04534 	movhi	r2,33044
811002c4:	10a75804 	addi	r2,r2,-25248
811002c8:	1009883a 	mov	r4,r2
811002cc:	00800884 	movi	r2,34
811002d0:	100d883a 	mov	r6,r2
811002d4:	200b883a 	mov	r5,r4
811002d8:	1809883a 	mov	r4,r3
811002dc:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
811002e0:	d0a04d17 	ldw	r2,-32460(gp)
811002e4:	01604534 	movhi	r5,33044
811002e8:	297aec04 	addi	r5,r5,-5200
811002ec:	1009883a 	mov	r4,r2
811002f0:	110fea80 	call	8110fea8 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811002f4:	00bfe804 	movi	r2,-96
811002f8:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
811002fc:	00800044 	movi	r2,1
81100300:	e0bff915 	stw	r2,-28(fp)
	switch (ucMemoryId) {
81100304:	e0bfff03 	ldbu	r2,-4(fp)
81100308:	10c00060 	cmpeqi	r3,r2,1
8110030c:	1800031e 	bne	r3,zero,8110031c <bDdr2EepromTest+0x84>
81100310:	108000a0 	cmpeqi	r2,r2,2
81100314:	1000081e 	bne	r2,zero,81100338 <bDdr2EepromTest+0xa0>
81100318:	00000e06 	br	81100354 <bDdr2EepromTest+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8110031c:	00a00034 	movhi	r2,32768
81100320:	10827c04 	addi	r2,r2,2544
81100324:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100328:	00a00034 	movhi	r2,32768
8110032c:	10828004 	addi	r2,r2,2560
81100330:	e0bffb15 	stw	r2,-20(fp)
		break;
81100334:	00001906 	br	8110039c <bDdr2EepromTest+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100338:	00a00034 	movhi	r2,32768
8110033c:	10825804 	addi	r2,r2,2400
81100340:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100344:	00a00034 	movhi	r2,32768
81100348:	10825c04 	addi	r2,r2,2416
8110034c:	e0bffb15 	stw	r2,-20(fp)
		break;
81100350:	00001206 	br	8110039c <bDdr2EepromTest+0x104>
	default:
		bSuccess = FALSE;
81100354:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81100358:	00e04534 	movhi	r3,33044
8110035c:	18faec04 	addi	r3,r3,-5200
81100360:	00a04534 	movhi	r2,33044
81100364:	10a76104 	addi	r2,r2,-25212
81100368:	1009883a 	mov	r4,r2
8110036c:	00800bc4 	movi	r2,47
81100370:	100d883a 	mov	r6,r2
81100374:	200b883a 	mov	r5,r4
81100378:	1809883a 	mov	r4,r3
8110037c:	1110ea80 	call	81110ea8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81100380:	d0a04d17 	ldw	r2,-32460(gp)
81100384:	01604534 	movhi	r5,33044
81100388:	297aec04 	addi	r5,r5,-5200
8110038c:	1009883a 	mov	r4,r2
81100390:	110fea80 	call	8110fea8 <fprintf>
		;
#endif
		return bSuccess;
81100394:	e0bff917 	ldw	r2,-28(fp)
81100398:	0000ff06 	br	81100798 <bDdr2EepromTest+0x500>
	}

	alt_u8 ucControlAddr, ucValue;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
8110039c:	00e04534 	movhi	r3,33044
811003a0:	18faec04 	addi	r3,r3,-5200
811003a4:	00a04534 	movhi	r2,33044
811003a8:	10a76d04 	addi	r2,r2,-25164
811003ac:	1009883a 	mov	r4,r2
811003b0:	008005c4 	movi	r2,23
811003b4:	100d883a 	mov	r6,r2
811003b8:	200b883a 	mov	r5,r4
811003bc:	1809883a 	mov	r4,r3
811003c0:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
811003c4:	d0a04d17 	ldw	r2,-32460(gp)
811003c8:	01604534 	movhi	r5,33044
811003cc:	297aec04 	addi	r5,r5,-5200
811003d0:	1009883a 	mov	r4,r2
811003d4:	110fea80 	call	8110fea8 <fprintf>
#endif
	usleep(20 * 1000);
811003d8:	01138804 	movi	r4,20000
811003dc:	11263700 	call	81126370 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811003e0:	e03ffc15 	stw	zero,-16(fp)
811003e4:	00003306 	br	811004b4 <bDdr2EepromTest+0x21c>
		ucControlAddr = iI;
811003e8:	e0bffc17 	ldw	r2,-16(fp)
811003ec:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811003f0:	e0bffd03 	ldbu	r2,-12(fp)
811003f4:	10c03fcc 	andi	r3,r2,255
811003f8:	18c0201c 	xori	r3,r3,128
811003fc:	18ffe004 	addi	r3,r3,-128
81100400:	e13ffd43 	ldbu	r4,-11(fp)
81100404:	e0bffe04 	addi	r2,fp,-8
81100408:	d8800015 	stw	r2,0(sp)
8110040c:	200f883a 	mov	r7,r4
81100410:	180d883a 	mov	r6,r3
81100414:	e17ffb17 	ldw	r5,-20(fp)
81100418:	e13ffa17 	ldw	r4,-24(fp)
8110041c:	1105ac00 	call	81105ac0 <I2C_Read>
81100420:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
81100424:	e0bff917 	ldw	r2,-28(fp)
81100428:	10001026 	beq	r2,zero,8110046c <bDdr2EepromTest+0x1d4>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
8110042c:	e0bffd43 	ldbu	r2,-11(fp)
81100430:	e0fffe03 	ldbu	r3,-8(fp)
81100434:	18c03fcc 	andi	r3,r3,255
81100438:	180f883a 	mov	r7,r3
8110043c:	100d883a 	mov	r6,r2
81100440:	01604534 	movhi	r5,33044
81100444:	29677304 	addi	r5,r5,-25140
81100448:	01204534 	movhi	r4,33044
8110044c:	213aec04 	addi	r4,r4,-5200
81100450:	11116100 	call	81111610 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
81100454:	d0a04d17 	ldw	r2,-32460(gp)
81100458:	01604534 	movhi	r5,33044
8110045c:	297aec04 	addi	r5,r5,-5200
81100460:	1009883a 	mov	r4,r2
81100464:	110fea80 	call	8110fea8 <fprintf>
81100468:	00000f06 	br	811004a8 <bDdr2EepromTest+0x210>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
8110046c:	00e04534 	movhi	r3,33044
81100470:	18faec04 	addi	r3,r3,-5200
81100474:	00a04534 	movhi	r2,33044
81100478:	10a77804 	addi	r2,r2,-25120
8110047c:	1009883a 	mov	r4,r2
81100480:	008005c4 	movi	r2,23
81100484:	100d883a 	mov	r6,r2
81100488:	200b883a 	mov	r5,r4
8110048c:	1809883a 	mov	r4,r3
81100490:	1110ea80 	call	81110ea8 <memcpy>
			debug(fp, cDebugBuffer);
81100494:	d0a04d17 	ldw	r2,-32460(gp)
81100498:	01604534 	movhi	r5,33044
8110049c:	297aec04 	addi	r5,r5,-5200
811004a0:	1009883a 	mov	r4,r2
811004a4:	110fea80 	call	8110fea8 <fprintf>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811004a8:	e0bffc17 	ldw	r2,-16(fp)
811004ac:	10800044 	addi	r2,r2,1
811004b0:	e0bffc15 	stw	r2,-16(fp)
811004b4:	e0bffc17 	ldw	r2,-16(fp)
811004b8:	10804008 	cmpgei	r2,r2,256
811004bc:	1000021e 	bne	r2,zero,811004c8 <bDdr2EepromTest+0x230>
811004c0:	e0bff917 	ldw	r2,-28(fp)
811004c4:	103fc81e 	bne	r2,zero,811003e8 <__reset+0xfb0e03e8>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
811004c8:	e0bff917 	ldw	r2,-28(fp)
811004cc:	10001026 	beq	r2,zero,81100510 <bDdr2EepromTest+0x278>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
811004d0:	00e04534 	movhi	r3,33044
811004d4:	18faec04 	addi	r3,r3,-5200
811004d8:	00a04534 	movhi	r2,33044
811004dc:	10a77e04 	addi	r2,r2,-25096
811004e0:	1009883a 	mov	r4,r2
811004e4:	00800884 	movi	r2,34
811004e8:	100d883a 	mov	r6,r2
811004ec:	200b883a 	mov	r5,r4
811004f0:	1809883a 	mov	r4,r3
811004f4:	1110ea80 	call	81110ea8 <memcpy>
		debug(fp, cDebugBuffer);
811004f8:	d0a04d17 	ldw	r2,-32460(gp)
811004fc:	01604534 	movhi	r5,33044
81100500:	297aec04 	addi	r5,r5,-5200
81100504:	1009883a 	mov	r4,r2
81100508:	110fea80 	call	8110fea8 <fprintf>
8110050c:	00000f06 	br	8110054c <bDdr2EepromTest+0x2b4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
81100510:	00e04534 	movhi	r3,33044
81100514:	18faec04 	addi	r3,r3,-5200
81100518:	00a04534 	movhi	r2,33044
8110051c:	10a78704 	addi	r2,r2,-25060
81100520:	1009883a 	mov	r4,r2
81100524:	008007c4 	movi	r2,31
81100528:	100d883a 	mov	r6,r2
8110052c:	200b883a 	mov	r5,r4
81100530:	1809883a 	mov	r4,r3
81100534:	1110ea80 	call	81110ea8 <memcpy>
		debug(fp, cDebugBuffer);
81100538:	d0a04d17 	ldw	r2,-32460(gp)
8110053c:	01604534 	movhi	r5,33044
81100540:	297aec04 	addi	r5,r5,-5200
81100544:	1009883a 	mov	r4,r2
81100548:	110fea80 	call	8110fea8 <fprintf>
#endif
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
8110054c:	00e04534 	movhi	r3,33044
81100550:	18faec04 	addi	r3,r3,-5200
81100554:	00a04534 	movhi	r2,33044
81100558:	10a78f04 	addi	r2,r2,-25028
8110055c:	1009883a 	mov	r4,r2
81100560:	00800604 	movi	r2,24
81100564:	100d883a 	mov	r6,r2
81100568:	200b883a 	mov	r5,r4
8110056c:	1809883a 	mov	r4,r3
81100570:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
81100574:	d0a04d17 	ldw	r2,-32460(gp)
81100578:	01604534 	movhi	r5,33044
8110057c:	297aec04 	addi	r5,r5,-5200
81100580:	1009883a 	mov	r4,r2
81100584:	110fea80 	call	8110fea8 <fprintf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
81100588:	00800484 	movi	r2,18
8110058c:	e0bffd85 	stb	r2,-10(fp)
81100590:	00bfe004 	movi	r2,-128
81100594:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100598:	01138804 	movi	r4,20000
8110059c:	11263700 	call	81126370 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811005a0:	e0bffd03 	ldbu	r2,-12(fp)
811005a4:	10c03fcc 	andi	r3,r2,255
811005a8:	18c0201c 	xori	r3,r3,128
811005ac:	18ffe004 	addi	r3,r3,-128
811005b0:	e13ffdc3 	ldbu	r4,-9(fp)
811005b4:	e0bffd83 	ldbu	r2,-10(fp)
811005b8:	d8800015 	stw	r2,0(sp)
811005bc:	200f883a 	mov	r7,r4
811005c0:	180d883a 	mov	r6,r3
811005c4:	e17ffb17 	ldw	r5,-20(fp)
811005c8:	e13ffa17 	ldw	r4,-24(fp)
811005cc:	11059e00 	call	811059e0 <I2C_Write>
811005d0:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
811005d4:	e0bff917 	ldw	r2,-28(fp)
811005d8:	1000101e 	bne	r2,zero,8110061c <bDdr2EepromTest+0x384>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
811005dc:	00e04534 	movhi	r3,33044
811005e0:	18faec04 	addi	r3,r3,-5200
811005e4:	00a04534 	movhi	r2,33044
811005e8:	10a79504 	addi	r2,r2,-25004
811005ec:	1009883a 	mov	r4,r2
811005f0:	00800604 	movi	r2,24
811005f4:	100d883a 	mov	r6,r2
811005f8:	200b883a 	mov	r5,r4
811005fc:	1809883a 	mov	r4,r3
81100600:	1110ea80 	call	81110ea8 <memcpy>
		debug(fp, cDebugBuffer);
81100604:	d0a04d17 	ldw	r2,-32460(gp)
81100608:	01604534 	movhi	r5,33044
8110060c:	297aec04 	addi	r5,r5,-5200
81100610:	1009883a 	mov	r4,r2
81100614:	110fea80 	call	8110fea8 <fprintf>
81100618:	00003306 	br	811006e8 <bDdr2EepromTest+0x450>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
8110061c:	e0bffd03 	ldbu	r2,-12(fp)
81100620:	10c03fcc 	andi	r3,r2,255
81100624:	18c0201c 	xori	r3,r3,128
81100628:	18ffe004 	addi	r3,r3,-128
8110062c:	e13ffdc3 	ldbu	r4,-9(fp)
81100630:	e0bffe44 	addi	r2,fp,-7
81100634:	d8800015 	stw	r2,0(sp)
81100638:	200f883a 	mov	r7,r4
8110063c:	180d883a 	mov	r6,r3
81100640:	e17ffb17 	ldw	r5,-20(fp)
81100644:	e13ffa17 	ldw	r4,-24(fp)
81100648:	1105ac00 	call	81105ac0 <I2C_Read>
8110064c:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
81100650:	e0bff917 	ldw	r2,-28(fp)
81100654:	1000101e 	bne	r2,zero,81100698 <bDdr2EepromTest+0x400>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
81100658:	00e04534 	movhi	r3,33044
8110065c:	18faec04 	addi	r3,r3,-5200
81100660:	00a04534 	movhi	r2,33044
81100664:	10a79b04 	addi	r2,r2,-24980
81100668:	1009883a 	mov	r4,r2
8110066c:	00800884 	movi	r2,34
81100670:	100d883a 	mov	r6,r2
81100674:	200b883a 	mov	r5,r4
81100678:	1809883a 	mov	r4,r3
8110067c:	1110ea80 	call	81110ea8 <memcpy>
			debug(fp, cDebugBuffer);
81100680:	d0a04d17 	ldw	r2,-32460(gp)
81100684:	01604534 	movhi	r5,33044
81100688:	297aec04 	addi	r5,r5,-5200
8110068c:	1009883a 	mov	r4,r2
81100690:	110fea80 	call	8110fea8 <fprintf>
81100694:	00001406 	br	811006e8 <bDdr2EepromTest+0x450>
#endif
		} else {
			if (ucReadData != ucWriteData) {
81100698:	e0bffe43 	ldbu	r2,-7(fp)
8110069c:	10c03fcc 	andi	r3,r2,255
811006a0:	e0bffd83 	ldbu	r2,-10(fp)
811006a4:	18801026 	beq	r3,r2,811006e8 <bDdr2EepromTest+0x450>
				bSuccess = FALSE;
811006a8:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811006ac:	e0bffe43 	ldbu	r2,-7(fp)
811006b0:	10803fcc 	andi	r2,r2,255
811006b4:	e0fffd83 	ldbu	r3,-10(fp)
811006b8:	180f883a 	mov	r7,r3
811006bc:	100d883a 	mov	r6,r2
811006c0:	01604534 	movhi	r5,33044
811006c4:	2967a404 	addi	r5,r5,-24944
811006c8:	01204534 	movhi	r4,33044
811006cc:	213aec04 	addi	r4,r4,-5200
811006d0:	11116100 	call	81111610 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
811006d4:	d0a04d17 	ldw	r2,-32460(gp)
811006d8:	01604534 	movhi	r5,33044
811006dc:	297aec04 	addi	r5,r5,-5200
811006e0:	1009883a 	mov	r4,r2
811006e4:	110fea80 	call	8110fea8 <fprintf>
#endif
			}
		}
	}
	if (bSuccess) {
811006e8:	e0bff917 	ldw	r2,-28(fp)
811006ec:	10001026 	beq	r2,zero,81100730 <bDdr2EepromTest+0x498>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
811006f0:	00e04534 	movhi	r3,33044
811006f4:	18faec04 	addi	r3,r3,-5200
811006f8:	00a04534 	movhi	r2,33044
811006fc:	10a7b304 	addi	r2,r2,-24884
81100700:	1009883a 	mov	r4,r2
81100704:	008008c4 	movi	r2,35
81100708:	100d883a 	mov	r6,r2
8110070c:	200b883a 	mov	r5,r4
81100710:	1809883a 	mov	r4,r3
81100714:	1110ea80 	call	81110ea8 <memcpy>
		debug(fp, cDebugBuffer);
81100718:	d0a04d17 	ldw	r2,-32460(gp)
8110071c:	01604534 	movhi	r5,33044
81100720:	297aec04 	addi	r5,r5,-5200
81100724:	1009883a 	mov	r4,r2
81100728:	110fea80 	call	8110fea8 <fprintf>
8110072c:	00000f06 	br	8110076c <bDdr2EepromTest+0x4d4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
81100730:	00e04534 	movhi	r3,33044
81100734:	18faec04 	addi	r3,r3,-5200
81100738:	00a04534 	movhi	r2,33044
8110073c:	10a7bc04 	addi	r2,r2,-24848
81100740:	1009883a 	mov	r4,r2
81100744:	00800804 	movi	r2,32
81100748:	100d883a 	mov	r6,r2
8110074c:	200b883a 	mov	r5,r4
81100750:	1809883a 	mov	r4,r3
81100754:	1110ea80 	call	81110ea8 <memcpy>
		debug(fp, cDebugBuffer);
81100758:	d0a04d17 	ldw	r2,-32460(gp)
8110075c:	01604534 	movhi	r5,33044
81100760:	297aec04 	addi	r5,r5,-5200
81100764:	1009883a 	mov	r4,r2
81100768:	110fea80 	call	8110fea8 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8110076c:	00a04534 	movhi	r2,33044
81100770:	10baec04 	addi	r2,r2,-5200
81100774:	00c00284 	movi	r3,10
81100778:	10c00005 	stb	r3,0(r2)
8110077c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81100780:	d0a04d17 	ldw	r2,-32460(gp)
81100784:	01604534 	movhi	r5,33044
81100788:	297aec04 	addi	r5,r5,-5200
8110078c:	1009883a 	mov	r4,r2
81100790:	110fea80 	call	8110fea8 <fprintf>
#endif

	return bSuccess;
81100794:	e0bff917 	ldw	r2,-28(fp)
}
81100798:	e037883a 	mov	sp,fp
8110079c:	dfc00117 	ldw	ra,4(sp)
811007a0:	df000017 	ldw	fp,0(sp)
811007a4:	dec00204 	addi	sp,sp,8
811007a8:	f800283a 	ret

811007ac <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
811007ac:	deffb704 	addi	sp,sp,-292
811007b0:	de00012e 	bgeu	sp,et,811007b8 <bDdr2EepromDump+0xc>
811007b4:	003b68fa 	trap	3
811007b8:	dfc04815 	stw	ra,288(sp)
811007bc:	df004715 	stw	fp,284(sp)
811007c0:	df004704 	addi	fp,sp,284
811007c4:	2005883a 	mov	r2,r4
811007c8:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
811007cc:	00e04534 	movhi	r3,33044
811007d0:	18faec04 	addi	r3,r3,-5200
811007d4:	00a04534 	movhi	r2,33044
811007d8:	10a7c404 	addi	r2,r2,-24816
811007dc:	1009883a 	mov	r4,r2
811007e0:	00800884 	movi	r2,34
811007e4:	100d883a 	mov	r6,r2
811007e8:	200b883a 	mov	r5,r4
811007ec:	1809883a 	mov	r4,r3
811007f0:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
811007f4:	d0a04d17 	ldw	r2,-32460(gp)
811007f8:	01604534 	movhi	r5,33044
811007fc:	297aec04 	addi	r5,r5,-5200
81100800:	1009883a 	mov	r4,r2
81100804:	110fea80 	call	8110fea8 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100808:	00bfe804 	movi	r2,-96
8110080c:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
81100810:	00800044 	movi	r2,1
81100814:	e0bfbe15 	stw	r2,-264(fp)
	switch (ucMemoryId) {
81100818:	e0bfff03 	ldbu	r2,-4(fp)
8110081c:	10c00060 	cmpeqi	r3,r2,1
81100820:	1800031e 	bne	r3,zero,81100830 <bDdr2EepromDump+0x84>
81100824:	108000a0 	cmpeqi	r2,r2,2
81100828:	1000081e 	bne	r2,zero,8110084c <bDdr2EepromDump+0xa0>
8110082c:	00000e06 	br	81100868 <bDdr2EepromDump+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81100830:	00a00034 	movhi	r2,32768
81100834:	10827c04 	addi	r2,r2,2544
81100838:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
8110083c:	00a00034 	movhi	r2,32768
81100840:	10828004 	addi	r2,r2,2560
81100844:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100848:	00001906 	br	811008b0 <bDdr2EepromDump+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
8110084c:	00a00034 	movhi	r2,32768
81100850:	10825804 	addi	r2,r2,2400
81100854:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100858:	00a00034 	movhi	r2,32768
8110085c:	10825c04 	addi	r2,r2,2416
81100860:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100864:	00001206 	br	811008b0 <bDdr2EepromDump+0x104>
	default:
		bSuccess = FALSE;
81100868:	e03fbe15 	stw	zero,-264(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110086c:	00e04534 	movhi	r3,33044
81100870:	18faec04 	addi	r3,r3,-5200
81100874:	00a04534 	movhi	r2,33044
81100878:	10a7cd04 	addi	r2,r2,-24780
8110087c:	1009883a 	mov	r4,r2
81100880:	00800bc4 	movi	r2,47
81100884:	100d883a 	mov	r6,r2
81100888:	200b883a 	mov	r5,r4
8110088c:	1809883a 	mov	r4,r3
81100890:	1110ea80 	call	81110ea8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
81100894:	d0a04d17 	ldw	r2,-32460(gp)
81100898:	01604534 	movhi	r5,33044
8110089c:	297aec04 	addi	r5,r5,-5200
811008a0:	1009883a 	mov	r4,r2
811008a4:	110fea80 	call	8110fea8 <fprintf>
		;
#endif
		return bSuccess;
811008a8:	e0bfbe17 	ldw	r2,-264(fp)
811008ac:	0002e706 	br	8110144c <bDdr2EepromDump+0xca0>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811008b0:	e0bfbd03 	ldbu	r2,-268(fp)
811008b4:	10c03fcc 	andi	r3,r2,255
811008b8:	18c0201c 	xori	r3,r3,128
811008bc:	18ffe004 	addi	r3,r3,-128
811008c0:	e13fbf04 	addi	r4,fp,-260
811008c4:	00804004 	movi	r2,256
811008c8:	d8800015 	stw	r2,0(sp)
811008cc:	200f883a 	mov	r7,r4
811008d0:	180d883a 	mov	r6,r3
811008d4:	e17fbb17 	ldw	r5,-276(fp)
811008d8:	e13fba17 	ldw	r4,-280(fp)
811008dc:	1105bc80 	call	81105bc8 <I2C_MultipleRead>
811008e0:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
811008e4:	e0bfbe17 	ldw	r2,-264(fp)
811008e8:	1002be26 	beq	r2,zero,811013e4 <bDdr2EepromDump+0xc38>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811008ec:	e03fbc15 	stw	zero,-272(fp)
811008f0:	0002b606 	br	811013cc <bDdr2EepromDump+0xc20>
			if (iI == 0) {
811008f4:	e0bfbc17 	ldw	r2,-272(fp)
811008f8:	1000121e 	bne	r2,zero,81100944 <bDdr2EepromDump+0x198>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
811008fc:	e0ffbf04 	addi	r3,fp,-260
81100900:	e0bfbc17 	ldw	r2,-272(fp)
81100904:	1885883a 	add	r2,r3,r2
81100908:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110090c:	10803fcc 	andi	r2,r2,255
81100910:	100f883a 	mov	r7,r2
81100914:	e1bfbc17 	ldw	r6,-272(fp)
81100918:	01604534 	movhi	r5,33044
8110091c:	2967d904 	addi	r5,r5,-24732
81100920:	01204534 	movhi	r4,33044
81100924:	213aec04 	addi	r4,r4,-5200
81100928:	11116100 	call	81111610 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
8110092c:	d0a04d17 	ldw	r2,-32460(gp)
81100930:	01604534 	movhi	r5,33044
81100934:	297aec04 	addi	r5,r5,-5200
81100938:	1009883a 	mov	r4,r2
8110093c:	110fea80 	call	8110fea8 <fprintf>
81100940:	00029f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 1) {
81100944:	e0bfbc17 	ldw	r2,-272(fp)
81100948:	10800058 	cmpnei	r2,r2,1
8110094c:	1000101e 	bne	r2,zero,81100990 <bDdr2EepromDump+0x1e4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100950:	00e04534 	movhi	r3,33044
81100954:	18faec04 	addi	r3,r3,-5200
81100958:	00a04534 	movhi	r2,33044
8110095c:	10a7e504 	addi	r2,r2,-24684
81100960:	1009883a 	mov	r4,r2
81100964:	00800c04 	movi	r2,48
81100968:	100d883a 	mov	r6,r2
8110096c:	200b883a 	mov	r5,r4
81100970:	1809883a 	mov	r4,r3
81100974:	1110ea80 	call	81110ea8 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
81100978:	d0a04d17 	ldw	r2,-32460(gp)
8110097c:	01604534 	movhi	r5,33044
81100980:	297aec04 	addi	r5,r5,-5200
81100984:	1009883a 	mov	r4,r2
81100988:	110fea80 	call	8110fea8 <fprintf>
8110098c:	00028c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 2) {
81100990:	e0bfbc17 	ldw	r2,-272(fp)
81100994:	10800098 	cmpnei	r2,r2,2
81100998:	1000101e 	bne	r2,zero,811009dc <bDdr2EepromDump+0x230>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
8110099c:	00e04534 	movhi	r3,33044
811009a0:	18faec04 	addi	r3,r3,-5200
811009a4:	00a04534 	movhi	r2,33044
811009a8:	10a7f104 	addi	r2,r2,-24636
811009ac:	1009883a 	mov	r4,r2
811009b0:	008007c4 	movi	r2,31
811009b4:	100d883a 	mov	r6,r2
811009b8:	200b883a 	mov	r5,r4
811009bc:	1809883a 	mov	r4,r3
811009c0:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
811009c4:	d0a04d17 	ldw	r2,-32460(gp)
811009c8:	01604534 	movhi	r5,33044
811009cc:	297aec04 	addi	r5,r5,-5200
811009d0:	1009883a 	mov	r4,r2
811009d4:	110fea80 	call	8110fea8 <fprintf>
811009d8:	00027906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 3) {
811009dc:	e0bfbc17 	ldw	r2,-272(fp)
811009e0:	108000d8 	cmpnei	r2,r2,3
811009e4:	1000101e 	bne	r2,zero,81100a28 <bDdr2EepromDump+0x27c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811009e8:	00e04534 	movhi	r3,33044
811009ec:	18faec04 	addi	r3,r3,-5200
811009f0:	00a04534 	movhi	r2,33044
811009f4:	10a7f904 	addi	r2,r2,-24604
811009f8:	1009883a 	mov	r4,r2
811009fc:	008009c4 	movi	r2,39
81100a00:	100d883a 	mov	r6,r2
81100a04:	200b883a 	mov	r5,r4
81100a08:	1809883a 	mov	r4,r3
81100a0c:	1110ea80 	call	81110ea8 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a10:	d0a04d17 	ldw	r2,-32460(gp)
81100a14:	01604534 	movhi	r5,33044
81100a18:	297aec04 	addi	r5,r5,-5200
81100a1c:	1009883a 	mov	r4,r2
81100a20:	110fea80 	call	8110fea8 <fprintf>
81100a24:	00026606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 4) {
81100a28:	e0bfbc17 	ldw	r2,-272(fp)
81100a2c:	10800118 	cmpnei	r2,r2,4
81100a30:	1000101e 	bne	r2,zero,81100a74 <bDdr2EepromDump+0x2c8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a34:	00e04534 	movhi	r3,33044
81100a38:	18faec04 	addi	r3,r3,-5200
81100a3c:	00a04534 	movhi	r2,33044
81100a40:	10a80304 	addi	r2,r2,-24564
81100a44:	1009883a 	mov	r4,r2
81100a48:	00800a84 	movi	r2,42
81100a4c:	100d883a 	mov	r6,r2
81100a50:	200b883a 	mov	r5,r4
81100a54:	1809883a 	mov	r4,r3
81100a58:	1110ea80 	call	81110ea8 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a5c:	d0a04d17 	ldw	r2,-32460(gp)
81100a60:	01604534 	movhi	r5,33044
81100a64:	297aec04 	addi	r5,r5,-5200
81100a68:	1009883a 	mov	r4,r2
81100a6c:	110fea80 	call	8110fea8 <fprintf>
81100a70:	00025306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 5) {
81100a74:	e0bfbc17 	ldw	r2,-272(fp)
81100a78:	10800158 	cmpnei	r2,r2,5
81100a7c:	1000101e 	bne	r2,zero,81100ac0 <bDdr2EepromDump+0x314>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a80:	00e04534 	movhi	r3,33044
81100a84:	18faec04 	addi	r3,r3,-5200
81100a88:	00a04534 	movhi	r2,33044
81100a8c:	10a80e04 	addi	r2,r2,-24520
81100a90:	1009883a 	mov	r4,r2
81100a94:	00800c04 	movi	r2,48
81100a98:	100d883a 	mov	r6,r2
81100a9c:	200b883a 	mov	r5,r4
81100aa0:	1809883a 	mov	r4,r3
81100aa4:	1110ea80 	call	81110ea8 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
81100aa8:	d0a04d17 	ldw	r2,-32460(gp)
81100aac:	01604534 	movhi	r5,33044
81100ab0:	297aec04 	addi	r5,r5,-5200
81100ab4:	1009883a 	mov	r4,r2
81100ab8:	110fea80 	call	8110fea8 <fprintf>
81100abc:	00024006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 6) {
81100ac0:	e0bfbc17 	ldw	r2,-272(fp)
81100ac4:	10800198 	cmpnei	r2,r2,6
81100ac8:	1000101e 	bne	r2,zero,81100b0c <bDdr2EepromDump+0x360>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
81100acc:	00e04534 	movhi	r3,33044
81100ad0:	18faec04 	addi	r3,r3,-5200
81100ad4:	00a04534 	movhi	r2,33044
81100ad8:	10a81a04 	addi	r2,r2,-24472
81100adc:	1009883a 	mov	r4,r2
81100ae0:	00800544 	movi	r2,21
81100ae4:	100d883a 	mov	r6,r2
81100ae8:	200b883a 	mov	r5,r4
81100aec:	1809883a 	mov	r4,r3
81100af0:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
81100af4:	d0a04d17 	ldw	r2,-32460(gp)
81100af8:	01604534 	movhi	r5,33044
81100afc:	297aec04 	addi	r5,r5,-5200
81100b00:	1009883a 	mov	r4,r2
81100b04:	110fea80 	call	8110fea8 <fprintf>
81100b08:	00022d06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 7) {
81100b0c:	e0bfbc17 	ldw	r2,-272(fp)
81100b10:	108001d8 	cmpnei	r2,r2,7
81100b14:	1000101e 	bne	r2,zero,81100b58 <bDdr2EepromDump+0x3ac>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
81100b18:	00e04534 	movhi	r3,33044
81100b1c:	18faec04 	addi	r3,r3,-5200
81100b20:	00a04534 	movhi	r2,33044
81100b24:	10a82004 	addi	r2,r2,-24448
81100b28:	1009883a 	mov	r4,r2
81100b2c:	00800804 	movi	r2,32
81100b30:	100d883a 	mov	r6,r2
81100b34:	200b883a 	mov	r5,r4
81100b38:	1809883a 	mov	r4,r3
81100b3c:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
81100b40:	d0a04d17 	ldw	r2,-32460(gp)
81100b44:	01604534 	movhi	r5,33044
81100b48:	297aec04 	addi	r5,r5,-5200
81100b4c:	1009883a 	mov	r4,r2
81100b50:	110fea80 	call	8110fea8 <fprintf>
81100b54:	00021a06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 16) {
81100b58:	e0bfbc17 	ldw	r2,-272(fp)
81100b5c:	10800418 	cmpnei	r2,r2,16
81100b60:	1000101e 	bne	r2,zero,81100ba4 <bDdr2EepromDump+0x3f8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100b64:	00e04534 	movhi	r3,33044
81100b68:	18faec04 	addi	r3,r3,-5200
81100b6c:	00a04534 	movhi	r2,33044
81100b70:	10a82804 	addi	r2,r2,-24416
81100b74:	1009883a 	mov	r4,r2
81100b78:	00800d04 	movi	r2,52
81100b7c:	100d883a 	mov	r6,r2
81100b80:	200b883a 	mov	r5,r4
81100b84:	1809883a 	mov	r4,r3
81100b88:	1110ea80 	call	81110ea8 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
81100b8c:	d0a04d17 	ldw	r2,-32460(gp)
81100b90:	01604534 	movhi	r5,33044
81100b94:	297aec04 	addi	r5,r5,-5200
81100b98:	1009883a 	mov	r4,r2
81100b9c:	110fea80 	call	8110fea8 <fprintf>
81100ba0:	00020706 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 13) {
81100ba4:	e0bfbc17 	ldw	r2,-272(fp)
81100ba8:	10800358 	cmpnei	r2,r2,13
81100bac:	1000101e 	bne	r2,zero,81100bf0 <bDdr2EepromDump+0x444>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
81100bb0:	00e04534 	movhi	r3,33044
81100bb4:	18faec04 	addi	r3,r3,-5200
81100bb8:	00a04534 	movhi	r2,33044
81100bbc:	10a83504 	addi	r2,r2,-24364
81100bc0:	1009883a 	mov	r4,r2
81100bc4:	008005c4 	movi	r2,23
81100bc8:	100d883a 	mov	r6,r2
81100bcc:	200b883a 	mov	r5,r4
81100bd0:	1809883a 	mov	r4,r3
81100bd4:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
81100bd8:	d0a04d17 	ldw	r2,-32460(gp)
81100bdc:	01604534 	movhi	r5,33044
81100be0:	297aec04 	addi	r5,r5,-5200
81100be4:	1009883a 	mov	r4,r2
81100be8:	110fea80 	call	8110fea8 <fprintf>
81100bec:	0001f406 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 14) {
81100bf0:	e0bfbc17 	ldw	r2,-272(fp)
81100bf4:	10800398 	cmpnei	r2,r2,14
81100bf8:	1000101e 	bne	r2,zero,81100c3c <bDdr2EepromDump+0x490>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
81100bfc:	00e04534 	movhi	r3,33044
81100c00:	18faec04 	addi	r3,r3,-5200
81100c04:	00a04534 	movhi	r2,33044
81100c08:	10a83b04 	addi	r2,r2,-24340
81100c0c:	1009883a 	mov	r4,r2
81100c10:	008004c4 	movi	r2,19
81100c14:	100d883a 	mov	r6,r2
81100c18:	200b883a 	mov	r5,r4
81100c1c:	1809883a 	mov	r4,r3
81100c20:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
81100c24:	d0a04d17 	ldw	r2,-32460(gp)
81100c28:	01604534 	movhi	r5,33044
81100c2c:	297aec04 	addi	r5,r5,-5200
81100c30:	1009883a 	mov	r4,r2
81100c34:	110fea80 	call	8110fea8 <fprintf>
81100c38:	0001e106 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 17) {
81100c3c:	e0bfbc17 	ldw	r2,-272(fp)
81100c40:	10800458 	cmpnei	r2,r2,17
81100c44:	1000101e 	bne	r2,zero,81100c88 <bDdr2EepromDump+0x4dc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
81100c48:	00e04534 	movhi	r3,33044
81100c4c:	18faec04 	addi	r3,r3,-5200
81100c50:	00a04534 	movhi	r2,33044
81100c54:	10a84004 	addi	r2,r2,-24320
81100c58:	1009883a 	mov	r4,r2
81100c5c:	00800684 	movi	r2,26
81100c60:	100d883a 	mov	r6,r2
81100c64:	200b883a 	mov	r5,r4
81100c68:	1809883a 	mov	r4,r3
81100c6c:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
81100c70:	d0a04d17 	ldw	r2,-32460(gp)
81100c74:	01604534 	movhi	r5,33044
81100c78:	297aec04 	addi	r5,r5,-5200
81100c7c:	1009883a 	mov	r4,r2
81100c80:	110fea80 	call	8110fea8 <fprintf>
81100c84:	0001ce06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 18) {
81100c88:	e0bfbc17 	ldw	r2,-272(fp)
81100c8c:	10800498 	cmpnei	r2,r2,18
81100c90:	1000101e 	bne	r2,zero,81100cd4 <bDdr2EepromDump+0x528>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100c94:	00e04534 	movhi	r3,33044
81100c98:	18faec04 	addi	r3,r3,-5200
81100c9c:	00a04534 	movhi	r2,33044
81100ca0:	10a84704 	addi	r2,r2,-24292
81100ca4:	1009883a 	mov	r4,r2
81100ca8:	00800d44 	movi	r2,53
81100cac:	100d883a 	mov	r6,r2
81100cb0:	200b883a 	mov	r5,r4
81100cb4:	1809883a 	mov	r4,r3
81100cb8:	1110ea80 	call	81110ea8 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
81100cbc:	d0a04d17 	ldw	r2,-32460(gp)
81100cc0:	01604534 	movhi	r5,33044
81100cc4:	297aec04 	addi	r5,r5,-5200
81100cc8:	1009883a 	mov	r4,r2
81100ccc:	110fea80 	call	8110fea8 <fprintf>
81100cd0:	0001bb06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 20) {
81100cd4:	e0bfbc17 	ldw	r2,-272(fp)
81100cd8:	10800518 	cmpnei	r2,r2,20
81100cdc:	1000101e 	bne	r2,zero,81100d20 <bDdr2EepromDump+0x574>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ce0:	00e04534 	movhi	r3,33044
81100ce4:	18faec04 	addi	r3,r3,-5200
81100ce8:	00a04534 	movhi	r2,33044
81100cec:	10a85504 	addi	r2,r2,-24236
81100cf0:	1009883a 	mov	r4,r2
81100cf4:	00801204 	movi	r2,72
81100cf8:	100d883a 	mov	r6,r2
81100cfc:	200b883a 	mov	r5,r4
81100d00:	1809883a 	mov	r4,r3
81100d04:	1110ea80 	call	81110ea8 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
81100d08:	d0a04d17 	ldw	r2,-32460(gp)
81100d0c:	01604534 	movhi	r5,33044
81100d10:	297aec04 	addi	r5,r5,-5200
81100d14:	1009883a 	mov	r4,r2
81100d18:	110fea80 	call	8110fea8 <fprintf>
81100d1c:	0001a806 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 22) {
81100d20:	e0bfbc17 	ldw	r2,-272(fp)
81100d24:	10800598 	cmpnei	r2,r2,22
81100d28:	1000101e 	bne	r2,zero,81100d6c <bDdr2EepromDump+0x5c0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
81100d2c:	00e04534 	movhi	r3,33044
81100d30:	18faec04 	addi	r3,r3,-5200
81100d34:	00a04534 	movhi	r2,33044
81100d38:	10a86704 	addi	r2,r2,-24164
81100d3c:	1009883a 	mov	r4,r2
81100d40:	00800784 	movi	r2,30
81100d44:	100d883a 	mov	r6,r2
81100d48:	200b883a 	mov	r5,r4
81100d4c:	1809883a 	mov	r4,r3
81100d50:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
81100d54:	d0a04d17 	ldw	r2,-32460(gp)
81100d58:	01604534 	movhi	r5,33044
81100d5c:	297aec04 	addi	r5,r5,-5200
81100d60:	1009883a 	mov	r4,r2
81100d64:	110fea80 	call	8110fea8 <fprintf>
81100d68:	00019506 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 27) {
81100d6c:	e0bfbc17 	ldw	r2,-272(fp)
81100d70:	108006d8 	cmpnei	r2,r2,27
81100d74:	1000101e 	bne	r2,zero,81100db8 <bDdr2EepromDump+0x60c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d78:	00e04534 	movhi	r3,33044
81100d7c:	18faec04 	addi	r3,r3,-5200
81100d80:	00a04534 	movhi	r2,33044
81100d84:	10a86f04 	addi	r2,r2,-24132
81100d88:	1009883a 	mov	r4,r2
81100d8c:	00800a04 	movi	r2,40
81100d90:	100d883a 	mov	r6,r2
81100d94:	200b883a 	mov	r5,r4
81100d98:	1809883a 	mov	r4,r3
81100d9c:	1110ea80 	call	81110ea8 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100da0:	d0a04d17 	ldw	r2,-32460(gp)
81100da4:	01604534 	movhi	r5,33044
81100da8:	297aec04 	addi	r5,r5,-5200
81100dac:	1009883a 	mov	r4,r2
81100db0:	110fea80 	call	8110fea8 <fprintf>
81100db4:	00018206 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 28) {
81100db8:	e0bfbc17 	ldw	r2,-272(fp)
81100dbc:	10800718 	cmpnei	r2,r2,28
81100dc0:	1000101e 	bne	r2,zero,81100e04 <bDdr2EepromDump+0x658>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100dc4:	00e04534 	movhi	r3,33044
81100dc8:	18faec04 	addi	r3,r3,-5200
81100dcc:	00a04534 	movhi	r2,33044
81100dd0:	10a87904 	addi	r2,r2,-24092
81100dd4:	1009883a 	mov	r4,r2
81100dd8:	00800cc4 	movi	r2,51
81100ddc:	100d883a 	mov	r6,r2
81100de0:	200b883a 	mov	r5,r4
81100de4:	1809883a 	mov	r4,r3
81100de8:	1110ea80 	call	81110ea8 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100dec:	d0a04d17 	ldw	r2,-32460(gp)
81100df0:	01604534 	movhi	r5,33044
81100df4:	297aec04 	addi	r5,r5,-5200
81100df8:	1009883a 	mov	r4,r2
81100dfc:	110fea80 	call	8110fea8 <fprintf>
81100e00:	00016f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 29) {
81100e04:	e0bfbc17 	ldw	r2,-272(fp)
81100e08:	10800758 	cmpnei	r2,r2,29
81100e0c:	1000101e 	bne	r2,zero,81100e50 <bDdr2EepromDump+0x6a4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e10:	00e04534 	movhi	r3,33044
81100e14:	18faec04 	addi	r3,r3,-5200
81100e18:	00a04534 	movhi	r2,33044
81100e1c:	10a88604 	addi	r2,r2,-24040
81100e20:	1009883a 	mov	r4,r2
81100e24:	008009c4 	movi	r2,39
81100e28:	100d883a 	mov	r6,r2
81100e2c:	200b883a 	mov	r5,r4
81100e30:	1809883a 	mov	r4,r3
81100e34:	1110ea80 	call	81110ea8 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e38:	d0a04d17 	ldw	r2,-32460(gp)
81100e3c:	01604534 	movhi	r5,33044
81100e40:	297aec04 	addi	r5,r5,-5200
81100e44:	1009883a 	mov	r4,r2
81100e48:	110fea80 	call	8110fea8 <fprintf>
81100e4c:	00015c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 30) {
81100e50:	e0bfbc17 	ldw	r2,-272(fp)
81100e54:	10800798 	cmpnei	r2,r2,30
81100e58:	1000101e 	bne	r2,zero,81100e9c <bDdr2EepromDump+0x6f0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e5c:	00e04534 	movhi	r3,33044
81100e60:	18faec04 	addi	r3,r3,-5200
81100e64:	00a04534 	movhi	r2,33044
81100e68:	10a89004 	addi	r2,r2,-24000
81100e6c:	1009883a 	mov	r4,r2
81100e70:	00800b04 	movi	r2,44
81100e74:	100d883a 	mov	r6,r2
81100e78:	200b883a 	mov	r5,r4
81100e7c:	1809883a 	mov	r4,r3
81100e80:	1110ea80 	call	81110ea8 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
81100e84:	d0a04d17 	ldw	r2,-32460(gp)
81100e88:	01604534 	movhi	r5,33044
81100e8c:	297aec04 	addi	r5,r5,-5200
81100e90:	1009883a 	mov	r4,r2
81100e94:	110fea80 	call	8110fea8 <fprintf>
81100e98:	00014906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 31) {
81100e9c:	e0bfbc17 	ldw	r2,-272(fp)
81100ea0:	108007d8 	cmpnei	r2,r2,31
81100ea4:	1000101e 	bne	r2,zero,81100ee8 <bDdr2EepromDump+0x73c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ea8:	00e04534 	movhi	r3,33044
81100eac:	18faec04 	addi	r3,r3,-5200
81100eb0:	00a04534 	movhi	r2,33044
81100eb4:	10a89b04 	addi	r2,r2,-23956
81100eb8:	1009883a 	mov	r4,r2
81100ebc:	008010c4 	movi	r2,67
81100ec0:	100d883a 	mov	r6,r2
81100ec4:	200b883a 	mov	r5,r4
81100ec8:	1809883a 	mov	r4,r3
81100ecc:	1110ea80 	call	81110ea8 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
81100ed0:	d0a04d17 	ldw	r2,-32460(gp)
81100ed4:	01604534 	movhi	r5,33044
81100ed8:	297aec04 	addi	r5,r5,-5200
81100edc:	1009883a 	mov	r4,r2
81100ee0:	110fea80 	call	8110fea8 <fprintf>
81100ee4:	00013606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 36) {
81100ee8:	e0bfbc17 	ldw	r2,-272(fp)
81100eec:	10800918 	cmpnei	r2,r2,36
81100ef0:	1000101e 	bne	r2,zero,81100f34 <bDdr2EepromDump+0x788>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ef4:	00e04534 	movhi	r3,33044
81100ef8:	18faec04 	addi	r3,r3,-5200
81100efc:	00a04534 	movhi	r2,33044
81100f00:	10a8ac04 	addi	r2,r2,-23888
81100f04:	1009883a 	mov	r4,r2
81100f08:	00800a84 	movi	r2,42
81100f0c:	100d883a 	mov	r6,r2
81100f10:	200b883a 	mov	r5,r4
81100f14:	1809883a 	mov	r4,r3
81100f18:	1110ea80 	call	81110ea8 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f1c:	d0a04d17 	ldw	r2,-32460(gp)
81100f20:	01604534 	movhi	r5,33044
81100f24:	297aec04 	addi	r5,r5,-5200
81100f28:	1009883a 	mov	r4,r2
81100f2c:	110fea80 	call	8110fea8 <fprintf>
81100f30:	00012306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 37) {
81100f34:	e0bfbc17 	ldw	r2,-272(fp)
81100f38:	10800958 	cmpnei	r2,r2,37
81100f3c:	1000101e 	bne	r2,zero,81100f80 <bDdr2EepromDump+0x7d4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f40:	00e04534 	movhi	r3,33044
81100f44:	18faec04 	addi	r3,r3,-5200
81100f48:	00a04534 	movhi	r2,33044
81100f4c:	10a8b704 	addi	r2,r2,-23844
81100f50:	1009883a 	mov	r4,r2
81100f54:	00800cc4 	movi	r2,51
81100f58:	100d883a 	mov	r6,r2
81100f5c:	200b883a 	mov	r5,r4
81100f60:	1809883a 	mov	r4,r3
81100f64:	1110ea80 	call	81110ea8 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f68:	d0a04d17 	ldw	r2,-32460(gp)
81100f6c:	01604534 	movhi	r5,33044
81100f70:	297aec04 	addi	r5,r5,-5200
81100f74:	1009883a 	mov	r4,r2
81100f78:	110fea80 	call	8110fea8 <fprintf>
81100f7c:	00011006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 38) {
81100f80:	e0bfbc17 	ldw	r2,-272(fp)
81100f84:	10800998 	cmpnei	r2,r2,38
81100f88:	1000101e 	bne	r2,zero,81100fcc <bDdr2EepromDump+0x820>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f8c:	00e04534 	movhi	r3,33044
81100f90:	18faec04 	addi	r3,r3,-5200
81100f94:	00a04534 	movhi	r2,33044
81100f98:	10a8c404 	addi	r2,r2,-23792
81100f9c:	1009883a 	mov	r4,r2
81100fa0:	00800dc4 	movi	r2,55
81100fa4:	100d883a 	mov	r6,r2
81100fa8:	200b883a 	mov	r5,r4
81100fac:	1809883a 	mov	r4,r3
81100fb0:	1110ea80 	call	81110ea8 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100fb4:	d0a04d17 	ldw	r2,-32460(gp)
81100fb8:	01604534 	movhi	r5,33044
81100fbc:	297aec04 	addi	r5,r5,-5200
81100fc0:	1009883a 	mov	r4,r2
81100fc4:	110fea80 	call	8110fea8 <fprintf>
81100fc8:	0000fd06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 41) {
81100fcc:	e0bfbc17 	ldw	r2,-272(fp)
81100fd0:	10800a58 	cmpnei	r2,r2,41
81100fd4:	1000101e 	bne	r2,zero,81101018 <bDdr2EepromDump+0x86c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100fd8:	00e04534 	movhi	r3,33044
81100fdc:	18faec04 	addi	r3,r3,-5200
81100fe0:	00a04534 	movhi	r2,33044
81100fe4:	10a8d204 	addi	r2,r2,-23736
81100fe8:	1009883a 	mov	r4,r2
81100fec:	00800c84 	movi	r2,50
81100ff0:	100d883a 	mov	r6,r2
81100ff4:	200b883a 	mov	r5,r4
81100ff8:	1809883a 	mov	r4,r3
81100ffc:	1110ea80 	call	81110ea8 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
81101000:	d0a04d17 	ldw	r2,-32460(gp)
81101004:	01604534 	movhi	r5,33044
81101008:	297aec04 	addi	r5,r5,-5200
8110100c:	1009883a 	mov	r4,r2
81101010:	110fea80 	call	8110fea8 <fprintf>
81101014:	0000ea06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 42) {
81101018:	e0bfbc17 	ldw	r2,-272(fp)
8110101c:	10800a98 	cmpnei	r2,r2,42
81101020:	1000101e 	bne	r2,zero,81101064 <bDdr2EepromDump+0x8b8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101024:	00e04534 	movhi	r3,33044
81101028:	18faec04 	addi	r3,r3,-5200
8110102c:	00a04534 	movhi	r2,33044
81101030:	10a8df04 	addi	r2,r2,-23684
81101034:	1009883a 	mov	r4,r2
81101038:	00800cc4 	movi	r2,51
8110103c:	100d883a 	mov	r6,r2
81101040:	200b883a 	mov	r5,r4
81101044:	1809883a 	mov	r4,r3
81101048:	1110ea80 	call	81110ea8 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
8110104c:	d0a04d17 	ldw	r2,-32460(gp)
81101050:	01604534 	movhi	r5,33044
81101054:	297aec04 	addi	r5,r5,-5200
81101058:	1009883a 	mov	r4,r2
8110105c:	110fea80 	call	8110fea8 <fprintf>
81101060:	0000d706 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 62) {
81101064:	e0bfbc17 	ldw	r2,-272(fp)
81101068:	10800f98 	cmpnei	r2,r2,62
8110106c:	1000101e 	bne	r2,zero,811010b0 <bDdr2EepromDump+0x904>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
81101070:	00e04534 	movhi	r3,33044
81101074:	18faec04 	addi	r3,r3,-5200
81101078:	00a04534 	movhi	r2,33044
8110107c:	10a8ec04 	addi	r2,r2,-23632
81101080:	1009883a 	mov	r4,r2
81101084:	00800404 	movi	r2,16
81101088:	100d883a 	mov	r6,r2
8110108c:	200b883a 	mov	r5,r4
81101090:	1809883a 	mov	r4,r3
81101094:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
81101098:	d0a04d17 	ldw	r2,-32460(gp)
8110109c:	01604534 	movhi	r5,33044
811010a0:	297aec04 	addi	r5,r5,-5200
811010a4:	1009883a 	mov	r4,r2
811010a8:	110fea80 	call	8110fea8 <fprintf>
811010ac:	0000c406 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 63) {
811010b0:	e0bfbc17 	ldw	r2,-272(fp)
811010b4:	10800fd8 	cmpnei	r2,r2,63
811010b8:	10001f1e 	bne	r2,zero,81101138 <bDdr2EepromDump+0x98c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
811010bc:	00a04534 	movhi	r2,33044
811010c0:	10baec04 	addi	r2,r2,-5200
811010c4:	00c00a04 	movi	r3,40
811010c8:	10c00005 	stb	r3,0(r2)
811010cc:	00c010c4 	movi	r3,67
811010d0:	10c00045 	stb	r3,1(r2)
811010d4:	00c01a04 	movi	r3,104
811010d8:	10c00085 	stb	r3,2(r2)
811010dc:	00c01944 	movi	r3,101
811010e0:	10c000c5 	stb	r3,3(r2)
811010e4:	00c018c4 	movi	r3,99
811010e8:	10c00105 	stb	r3,4(r2)
811010ec:	00c01ac4 	movi	r3,107
811010f0:	10c00145 	stb	r3,5(r2)
811010f4:	00c01cc4 	movi	r3,115
811010f8:	10c00185 	stb	r3,6(r2)
811010fc:	00c01d44 	movi	r3,117
81101100:	10c001c5 	stb	r3,7(r2)
81101104:	00c01b44 	movi	r3,109
81101108:	10c00205 	stb	r3,8(r2)
8110110c:	00c00a44 	movi	r3,41
81101110:	10c00245 	stb	r3,9(r2)
81101114:	00c00284 	movi	r3,10
81101118:	10c00285 	stb	r3,10(r2)
8110111c:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
81101120:	d0a04d17 	ldw	r2,-32460(gp)
81101124:	01604534 	movhi	r5,33044
81101128:	297aec04 	addi	r5,r5,-5200
8110112c:	1009883a 	mov	r4,r2
81101130:	110fea80 	call	8110fea8 <fprintf>
81101134:	0000a206 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 64) {
81101138:	e0bfbc17 	ldw	r2,-272(fp)
8110113c:	10801018 	cmpnei	r2,r2,64
81101140:	1000101e 	bne	r2,zero,81101184 <bDdr2EepromDump+0x9d8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
81101144:	00e04534 	movhi	r3,33044
81101148:	18faec04 	addi	r3,r3,-5200
8110114c:	00a04534 	movhi	r2,33044
81101150:	10a8f004 	addi	r2,r2,-23616
81101154:	1009883a 	mov	r4,r2
81101158:	00800804 	movi	r2,32
8110115c:	100d883a 	mov	r6,r2
81101160:	200b883a 	mov	r5,r4
81101164:	1809883a 	mov	r4,r3
81101168:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
8110116c:	d0a04d17 	ldw	r2,-32460(gp)
81101170:	01604534 	movhi	r5,33044
81101174:	297aec04 	addi	r5,r5,-5200
81101178:	1009883a 	mov	r4,r2
8110117c:	110fea80 	call	8110fea8 <fprintf>
81101180:	00008f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 72) {
81101184:	e0bfbc17 	ldw	r2,-272(fp)
81101188:	10801218 	cmpnei	r2,r2,72
8110118c:	1000101e 	bne	r2,zero,811011d0 <bDdr2EepromDump+0xa24>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101190:	00e04534 	movhi	r3,33044
81101194:	18faec04 	addi	r3,r3,-5200
81101198:	00a04534 	movhi	r2,33044
8110119c:	10a8f804 	addi	r2,r2,-23584
811011a0:	1009883a 	mov	r4,r2
811011a4:	00800dc4 	movi	r2,55
811011a8:	100d883a 	mov	r6,r2
811011ac:	200b883a 	mov	r5,r4
811011b0:	1809883a 	mov	r4,r3
811011b4:	1110ea80 	call	81110ea8 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
811011b8:	d0a04d17 	ldw	r2,-32460(gp)
811011bc:	01604534 	movhi	r5,33044
811011c0:	297aec04 	addi	r5,r5,-5200
811011c4:	1009883a 	mov	r4,r2
811011c8:	110fea80 	call	8110fea8 <fprintf>
811011cc:	00007c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 73) {
811011d0:	e0bfbc17 	ldw	r2,-272(fp)
811011d4:	10801258 	cmpnei	r2,r2,73
811011d8:	1000101e 	bne	r2,zero,8110121c <bDdr2EepromDump+0xa70>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
811011dc:	00e04534 	movhi	r3,33044
811011e0:	18faec04 	addi	r3,r3,-5200
811011e4:	00a04534 	movhi	r2,33044
811011e8:	10a90604 	addi	r2,r2,-23528
811011ec:	1009883a 	mov	r4,r2
811011f0:	00800784 	movi	r2,30
811011f4:	100d883a 	mov	r6,r2
811011f8:	200b883a 	mov	r5,r4
811011fc:	1809883a 	mov	r4,r3
81101200:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
81101204:	d0a04d17 	ldw	r2,-32460(gp)
81101208:	01604534 	movhi	r5,33044
8110120c:	297aec04 	addi	r5,r5,-5200
81101210:	1009883a 	mov	r4,r2
81101214:	110fea80 	call	8110fea8 <fprintf>
81101218:	00006906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 91) {
8110121c:	e0bfbc17 	ldw	r2,-272(fp)
81101220:	108016d8 	cmpnei	r2,r2,91
81101224:	1000101e 	bne	r2,zero,81101268 <bDdr2EepromDump+0xabc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
81101228:	00e04534 	movhi	r3,33044
8110122c:	18faec04 	addi	r3,r3,-5200
81101230:	00a04534 	movhi	r2,33044
81101234:	10a90e04 	addi	r2,r2,-23496
81101238:	1009883a 	mov	r4,r2
8110123c:	00800804 	movi	r2,32
81101240:	100d883a 	mov	r6,r2
81101244:	200b883a 	mov	r5,r4
81101248:	1809883a 	mov	r4,r3
8110124c:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
81101250:	d0a04d17 	ldw	r2,-32460(gp)
81101254:	01604534 	movhi	r5,33044
81101258:	297aec04 	addi	r5,r5,-5200
8110125c:	1009883a 	mov	r4,r2
81101260:	110fea80 	call	8110fea8 <fprintf>
81101264:	00005606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 93) {
81101268:	e0bfbc17 	ldw	r2,-272(fp)
8110126c:	10801758 	cmpnei	r2,r2,93
81101270:	1000101e 	bne	r2,zero,811012b4 <bDdr2EepromDump+0xb08>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101274:	00e04534 	movhi	r3,33044
81101278:	18faec04 	addi	r3,r3,-5200
8110127c:	00a04534 	movhi	r2,33044
81101280:	10a91604 	addi	r2,r2,-23464
81101284:	1009883a 	mov	r4,r2
81101288:	008009c4 	movi	r2,39
8110128c:	100d883a 	mov	r6,r2
81101290:	200b883a 	mov	r5,r4
81101294:	1809883a 	mov	r4,r3
81101298:	1110ea80 	call	81110ea8 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
8110129c:	d0a04d17 	ldw	r2,-32460(gp)
811012a0:	01604534 	movhi	r5,33044
811012a4:	297aec04 	addi	r5,r5,-5200
811012a8:	1009883a 	mov	r4,r2
811012ac:	110fea80 	call	8110fea8 <fprintf>
811012b0:	00004306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 94) {
811012b4:	e0bfbc17 	ldw	r2,-272(fp)
811012b8:	10801798 	cmpnei	r2,r2,94
811012bc:	1000101e 	bne	r2,zero,81101300 <bDdr2EepromDump+0xb54>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
811012c0:	00e04534 	movhi	r3,33044
811012c4:	18faec04 	addi	r3,r3,-5200
811012c8:	00a04534 	movhi	r2,33044
811012cc:	10a92004 	addi	r2,r2,-23424
811012d0:	1009883a 	mov	r4,r2
811012d4:	008006c4 	movi	r2,27
811012d8:	100d883a 	mov	r6,r2
811012dc:	200b883a 	mov	r5,r4
811012e0:	1809883a 	mov	r4,r3
811012e4:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
811012e8:	d0a04d17 	ldw	r2,-32460(gp)
811012ec:	01604534 	movhi	r5,33044
811012f0:	297aec04 	addi	r5,r5,-5200
811012f4:	1009883a 	mov	r4,r2
811012f8:	110fea80 	call	8110fea8 <fprintf>
811012fc:	00003006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 95) {
81101300:	e0bfbc17 	ldw	r2,-272(fp)
81101304:	108017d8 	cmpnei	r2,r2,95
81101308:	1000101e 	bne	r2,zero,8110134c <bDdr2EepromDump+0xba0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110130c:	00e04534 	movhi	r3,33044
81101310:	18faec04 	addi	r3,r3,-5200
81101314:	00a04534 	movhi	r2,33044
81101318:	10a92704 	addi	r2,r2,-23396
8110131c:	1009883a 	mov	r4,r2
81101320:	00800a04 	movi	r2,40
81101324:	100d883a 	mov	r6,r2
81101328:	200b883a 	mov	r5,r4
8110132c:	1809883a 	mov	r4,r3
81101330:	1110ea80 	call	81110ea8 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
81101334:	d0a04d17 	ldw	r2,-32460(gp)
81101338:	01604534 	movhi	r5,33044
8110133c:	297aec04 	addi	r5,r5,-5200
81101340:	1009883a 	mov	r4,r2
81101344:	110fea80 	call	8110fea8 <fprintf>
81101348:	00001d06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 99) {
8110134c:	e0bfbc17 	ldw	r2,-272(fp)
81101350:	108018d8 	cmpnei	r2,r2,99
81101354:	1000101e 	bne	r2,zero,81101398 <bDdr2EepromDump+0xbec>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
81101358:	00e04534 	movhi	r3,33044
8110135c:	18faec04 	addi	r3,r3,-5200
81101360:	00a04534 	movhi	r2,33044
81101364:	10a93104 	addi	r2,r2,-23356
81101368:	1009883a 	mov	r4,r2
8110136c:	00800984 	movi	r2,38
81101370:	100d883a 	mov	r6,r2
81101374:	200b883a 	mov	r5,r4
81101378:	1809883a 	mov	r4,r3
8110137c:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
81101380:	d0a04d17 	ldw	r2,-32460(gp)
81101384:	01604534 	movhi	r5,33044
81101388:	297aec04 	addi	r5,r5,-5200
8110138c:	1009883a 	mov	r4,r2
81101390:	110fea80 	call	8110fea8 <fprintf>
81101394:	00000a06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "\n");
81101398:	00a04534 	movhi	r2,33044
8110139c:	10baec04 	addi	r2,r2,-5200
811013a0:	00c00284 	movi	r3,10
811013a4:	10c00005 	stb	r3,0(r2)
811013a8:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
811013ac:	d0a04d17 	ldw	r2,-32460(gp)
811013b0:	01604534 	movhi	r5,33044
811013b4:	297aec04 	addi	r5,r5,-5200
811013b8:	1009883a 	mov	r4,r2
811013bc:	110fea80 	call	8110fea8 <fprintf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811013c0:	e0bfbc17 	ldw	r2,-272(fp)
811013c4:	10800044 	addi	r2,r2,1
811013c8:	e0bfbc15 	stw	r2,-272(fp)
811013cc:	e0bfbc17 	ldw	r2,-272(fp)
811013d0:	10804008 	cmpgei	r2,r2,256
811013d4:	1000121e 	bne	r2,zero,81101420 <bDdr2EepromDump+0xc74>
811013d8:	e0bfbe17 	ldw	r2,-264(fp)
811013dc:	103d451e 	bne	r2,zero,811008f4 <__reset+0xfb0e08f4>
811013e0:	00000f06 	br	81101420 <bDdr2EepromDump+0xc74>
#endif
			}
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
811013e4:	00e04534 	movhi	r3,33044
811013e8:	18faec04 	addi	r3,r3,-5200
811013ec:	00a04534 	movhi	r2,33044
811013f0:	10a93b04 	addi	r2,r2,-23316
811013f4:	1009883a 	mov	r4,r2
811013f8:	008005c4 	movi	r2,23
811013fc:	100d883a 	mov	r6,r2
81101400:	200b883a 	mov	r5,r4
81101404:	1809883a 	mov	r4,r3
81101408:	1110ea80 	call	81110ea8 <memcpy>
		debug(fp, cDebugBuffer);
8110140c:	d0a04d17 	ldw	r2,-32460(gp)
81101410:	01604534 	movhi	r5,33044
81101414:	297aec04 	addi	r5,r5,-5200
81101418:	1009883a 	mov	r4,r2
8110141c:	110fea80 	call	8110fea8 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101420:	00a04534 	movhi	r2,33044
81101424:	10baec04 	addi	r2,r2,-5200
81101428:	00c00284 	movi	r3,10
8110142c:	10c00005 	stb	r3,0(r2)
81101430:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101434:	d0a04d17 	ldw	r2,-32460(gp)
81101438:	01604534 	movhi	r5,33044
8110143c:	297aec04 	addi	r5,r5,-5200
81101440:	1009883a 	mov	r4,r2
81101444:	110fea80 	call	8110fea8 <fprintf>
#endif

	return bSuccess;
81101448:	e0bfbe17 	ldw	r2,-264(fp)
}
8110144c:	e037883a 	mov	sp,fp
81101450:	dfc00117 	ldw	ra,4(sp)
81101454:	df000017 	ldw	fp,0(sp)
81101458:	dec00204 	addi	sp,sp,8
8110145c:	f800283a 	ret

81101460 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
81101460:	defffb04 	addi	sp,sp,-20
81101464:	de00012e 	bgeu	sp,et,8110146c <bDdr2SwitchMemory+0xc>
81101468:	003b68fa 	trap	3
8110146c:	dfc00415 	stw	ra,16(sp)
81101470:	df000315 	stw	fp,12(sp)
81101474:	df000304 	addi	fp,sp,12
81101478:	2005883a 	mov	r2,r4
8110147c:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
81101480:	00a04834 	movhi	r2,33056
81101484:	108c2204 	addi	r2,r2,12424
81101488:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = TRUE;
8110148c:	00800044 	movi	r2,1
81101490:	e0bffd15 	stw	r2,-12(fp)
	switch (ucMemoryId) {
81101494:	e0bfff03 	ldbu	r2,-4(fp)
81101498:	10c00060 	cmpeqi	r3,r2,1
8110149c:	1800031e 	bne	r3,zero,811014ac <bDdr2SwitchMemory+0x4c>
811014a0:	108000a0 	cmpeqi	r2,r2,2
811014a4:	1000041e 	bne	r2,zero,811014b8 <bDdr2SwitchMemory+0x58>
811014a8:	00000706 	br	811014c8 <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
811014ac:	e0bffe17 	ldw	r2,-8(fp)
811014b0:	10000015 	stw	zero,0(r2)
		break;
811014b4:	00001406 	br	81101508 <bDdr2SwitchMemory+0xa8>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
811014b8:	e0bffe17 	ldw	r2,-8(fp)
811014bc:	00e00034 	movhi	r3,32768
811014c0:	10c00015 	stw	r3,0(r2)
		break;
811014c4:	00001006 	br	81101508 <bDdr2SwitchMemory+0xa8>
	default:
		bSuccess = FALSE;
811014c8:	e03ffd15 	stw	zero,-12(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811014cc:	00e04534 	movhi	r3,33044
811014d0:	18faec04 	addi	r3,r3,-5200
811014d4:	00a04534 	movhi	r2,33044
811014d8:	10a94104 	addi	r2,r2,-23292
811014dc:	1009883a 	mov	r4,r2
811014e0:	00800f04 	movi	r2,60
811014e4:	100d883a 	mov	r6,r2
811014e8:	200b883a 	mov	r5,r4
811014ec:	1809883a 	mov	r4,r3
811014f0:	1110ea80 	call	81110ea8 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
811014f4:	d0a04d17 	ldw	r2,-32460(gp)
811014f8:	01604534 	movhi	r5,33044
811014fc:	297aec04 	addi	r5,r5,-5200
81101500:	1009883a 	mov	r4,r2
81101504:	110fea80 	call	8110fea8 <fprintf>
		;
#endif
	}

	return bSuccess;
81101508:	e0bffd17 	ldw	r2,-12(fp)
}
8110150c:	e037883a 	mov	sp,fp
81101510:	dfc00117 	ldw	ra,4(sp)
81101514:	df000017 	ldw	fp,0(sp)
81101518:	dec00204 	addi	sp,sp,8
8110151c:	f800283a 	ret

81101520 <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
81101520:	deffe204 	addi	sp,sp,-120
81101524:	de00012e 	bgeu	sp,et,8110152c <bDdr2MemoryWriteTest+0xc>
81101528:	003b68fa 	trap	3
8110152c:	dfc01d15 	stw	ra,116(sp)
81101530:	df001c15 	stw	fp,112(sp)
81101534:	dc401b15 	stw	r17,108(sp)
81101538:	dc001a15 	stw	r16,104(sp)
8110153c:	df001c04 	addi	fp,sp,112
81101540:	2005883a 	mov	r2,r4
81101544:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
81101548:	00e04534 	movhi	r3,33044
8110154c:	18faec04 	addi	r3,r3,-5200
81101550:	00a04534 	movhi	r2,33044
81101554:	10a95004 	addi	r2,r2,-23232
81101558:	1009883a 	mov	r4,r2
8110155c:	00800a04 	movi	r2,40
81101560:	100d883a 	mov	r6,r2
81101564:	200b883a 	mov	r5,r4
81101568:	1809883a 	mov	r4,r3
8110156c:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
81101570:	d0a04d17 	ldw	r2,-32460(gp)
81101574:	01604534 	movhi	r5,33044
81101578:	297aec04 	addi	r5,r5,-5200
8110157c:	1009883a 	mov	r4,r2
81101580:	110fea80 	call	8110fea8 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101584:	00800044 	movi	r2,1
81101588:	e0bfed15 	stw	r2,-76(fp)
	switch (ucMemoryId) {
8110158c:	e0bffd03 	ldbu	r2,-12(fp)
81101590:	10c00060 	cmpeqi	r3,r2,1
81101594:	1800031e 	bne	r3,zero,811015a4 <bDdr2MemoryWriteTest+0x84>
81101598:	108000a0 	cmpeqi	r2,r2,2
8110159c:	1000081e 	bne	r2,zero,811015c0 <bDdr2MemoryWriteTest+0xa0>
811015a0:	00000e06 	br	811015dc <bDdr2MemoryWriteTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015a4:	e0bffd03 	ldbu	r2,-12(fp)
811015a8:	1009883a 	mov	r4,r2
811015ac:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015b0:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811015b4:	00a00034 	movhi	r2,32768
811015b8:	e0bfe615 	stw	r2,-104(fp)
		break;
811015bc:	00001906 	br	81101624 <bDdr2MemoryWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015c0:	e0bffd03 	ldbu	r2,-12(fp)
811015c4:	1009883a 	mov	r4,r2
811015c8:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015cc:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811015d0:	00a00034 	movhi	r2,32768
811015d4:	e0bfe615 	stw	r2,-104(fp)
		break;
811015d8:	00001206 	br	81101624 <bDdr2MemoryWriteTest+0x104>
	default:
		bSuccess = FALSE;
811015dc:	e03fed15 	stw	zero,-76(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811015e0:	00e04534 	movhi	r3,33044
811015e4:	18faec04 	addi	r3,r3,-5200
811015e8:	00a04534 	movhi	r2,33044
811015ec:	10a76104 	addi	r2,r2,-25212
811015f0:	1009883a 	mov	r4,r2
811015f4:	00800bc4 	movi	r2,47
811015f8:	100d883a 	mov	r6,r2
811015fc:	200b883a 	mov	r5,r4
81101600:	1809883a 	mov	r4,r3
81101604:	1110ea80 	call	81110ea8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101608:	d0a04d17 	ldw	r2,-32460(gp)
8110160c:	01604534 	movhi	r5,33044
81101610:	297aec04 	addi	r5,r5,-5200
81101614:	1009883a 	mov	r4,r2
81101618:	110fea80 	call	8110fea8 <fprintf>
		;
#endif
		return bSuccess;
8110161c:	e0bfed17 	ldw	r2,-76(fp)
81101620:	00011806 	br	81101a84 <bDdr2MemoryWriteTest+0x564>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81101624:	e0bfe617 	ldw	r2,-104(fp)
81101628:	1004d53a 	srli	r2,r2,20
8110162c:	100d883a 	mov	r6,r2
81101630:	01604534 	movhi	r5,33044
81101634:	29695a04 	addi	r5,r5,-23192
81101638:	01204534 	movhi	r4,33044
8110163c:	213aec04 	addi	r4,r4,-5200
81101640:	11116100 	call	81111610 <sprintf>
	debug(fp, cDebugBuffer);
81101644:	d0a04d17 	ldw	r2,-32460(gp)
81101648:	01604534 	movhi	r5,33044
8110164c:	297aec04 	addi	r5,r5,-5200
81101650:	1009883a 	mov	r4,r2
81101654:	110fea80 	call	8110fea8 <fprintf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
81101658:	00800104 	movi	r2,4
8110165c:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
81101660:	e03fec15 	stw	zero,-80(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101664:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
81101668:	e03fe715 	stw	zero,-100(fp)
8110166c:	00001506 	br	811016c4 <bDdr2MemoryWriteTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101670:	e0ffe617 	ldw	r3,-104(fp)
81101674:	00b33374 	movhi	r2,52429
81101678:	10b33344 	addi	r2,r2,-13107
8110167c:	1888383a 	mulxuu	r4,r3,r2
81101680:	1885383a 	mul	r2,r3,r2
81101684:	1021883a 	mov	r16,r2
81101688:	2023883a 	mov	r17,r4
8110168c:	8804d0fa 	srli	r2,r17,3
81101690:	e0ffe717 	ldw	r3,-100(fp)
81101694:	18c00044 	addi	r3,r3,1
81101698:	10c7383a 	mul	r3,r2,r3
8110169c:	e0bfe717 	ldw	r2,-100(fp)
811016a0:	1085883a 	add	r2,r2,r2
811016a4:	1085883a 	add	r2,r2,r2
811016a8:	e13fe504 	addi	r4,fp,-108
811016ac:	2085883a 	add	r2,r4,r2
811016b0:	10800e04 	addi	r2,r2,56
811016b4:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
811016b8:	e0bfe717 	ldw	r2,-100(fp)
811016bc:	10800044 	addi	r2,r2,1
811016c0:	e0bfe715 	stw	r2,-100(fp)
811016c4:	e0bfe717 	ldw	r2,-100(fp)
811016c8:	10800290 	cmplti	r2,r2,10
811016cc:	103fe81e 	bne	r2,zero,81101670 <__reset+0xfb0e1670>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811016d0:	d0a06b17 	ldw	r2,-32340(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
811016d4:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
811016d8:	00804004 	movi	r2,256
811016dc:	e0bfea15 	stw	r2,-88(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
811016e0:	e03fe715 	stw	zero,-100(fp)
811016e4:	00001e06 	br	81101760 <bDdr2MemoryWriteTest+0x240>
		if (iI == 0) {
811016e8:	e0bfe717 	ldw	r2,-100(fp)
811016ec:	1000091e 	bne	r2,zero,81101714 <bDdr2MemoryWriteTest+0x1f4>
			xSZData[iI] = uliInitValue;
811016f0:	00a04534 	movhi	r2,33044
811016f4:	10bb2c04 	addi	r2,r2,-4944
811016f8:	e0ffe717 	ldw	r3,-100(fp)
811016fc:	18c7883a 	add	r3,r3,r3
81101700:	18c7883a 	add	r3,r3,r3
81101704:	10c5883a 	add	r2,r2,r3
81101708:	e0fff017 	ldw	r3,-64(fp)
8110170c:	10c00015 	stw	r3,0(r2)
81101710:	00001006 	br	81101754 <bDdr2MemoryWriteTest+0x234>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
81101714:	e0bfe717 	ldw	r2,-100(fp)
81101718:	10ffffc4 	addi	r3,r2,-1
8110171c:	00a04534 	movhi	r2,33044
81101720:	10bb2c04 	addi	r2,r2,-4944
81101724:	18c7883a 	add	r3,r3,r3
81101728:	18c7883a 	add	r3,r3,r3
8110172c:	10c5883a 	add	r2,r2,r3
81101730:	10800017 	ldw	r2,0(r2)
81101734:	11000364 	muli	r4,r2,13
81101738:	00a04534 	movhi	r2,33044
8110173c:	10bb2c04 	addi	r2,r2,-4944
81101740:	e0ffe717 	ldw	r3,-100(fp)
81101744:	18c7883a 	add	r3,r3,r3
81101748:	18c7883a 	add	r3,r3,r3
8110174c:	10c5883a 	add	r2,r2,r3
81101750:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
81101754:	e0bfe717 	ldw	r2,-100(fp)
81101758:	10800044 	addi	r2,r2,1
8110175c:	e0bfe715 	stw	r2,-100(fp)
81101760:	e0ffe717 	ldw	r3,-100(fp)
81101764:	e0bfea17 	ldw	r2,-88(fp)
81101768:	18bfdf16 	blt	r3,r2,811016e8 <__reset+0xfb0e16e8>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
8110176c:	e0bfea17 	ldw	r2,-88(fp)
81101770:	10ffffc4 	addi	r3,r2,-1
81101774:	00a04534 	movhi	r2,33044
81101778:	10bb2c04 	addi	r2,r2,-4944
8110177c:	18c7883a 	add	r3,r3,r3
81101780:	18c7883a 	add	r3,r3,r3
81101784:	10c7883a 	add	r3,r2,r3
81101788:	00aaaaf4 	movhi	r2,43691
8110178c:	10aaaa84 	addi	r2,r2,-21846
81101790:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81101794:	e0bfea17 	ldw	r2,-88(fp)
81101798:	10ffff84 	addi	r3,r2,-2
8110179c:	00a04534 	movhi	r2,33044
811017a0:	10bb2c04 	addi	r2,r2,-4944
811017a4:	18c7883a 	add	r3,r3,r3
811017a8:	18c7883a 	add	r3,r3,r3
811017ac:	10c7883a 	add	r3,r2,r3
811017b0:	00955574 	movhi	r2,21845
811017b4:	10955544 	addi	r2,r2,21845
811017b8:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
811017bc:	e0bfea17 	ldw	r2,-88(fp)
811017c0:	10ffff44 	addi	r3,r2,-3
811017c4:	00a04534 	movhi	r2,33044
811017c8:	10bb2c04 	addi	r2,r2,-4944
811017cc:	18c7883a 	add	r3,r3,r3
811017d0:	18c7883a 	add	r3,r3,r3
811017d4:	10c5883a 	add	r2,r2,r3
811017d8:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
811017dc:	e0bfea17 	ldw	r2,-88(fp)
811017e0:	10ffff04 	addi	r3,r2,-4
811017e4:	00a04534 	movhi	r2,33044
811017e8:	10bb2c04 	addi	r2,r2,-4944
811017ec:	18c7883a 	add	r3,r3,r3
811017f0:	18c7883a 	add	r3,r3,r3
811017f4:	10c5883a 	add	r2,r2,r3
811017f8:	00ffffc4 	movi	r3,-1
811017fc:	10c00015 	stw	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
81101800:	00e04534 	movhi	r3,33044
81101804:	18faec04 	addi	r3,r3,-5200
81101808:	00a04534 	movhi	r2,33044
8110180c:	10a96004 	addi	r2,r2,-23168
81101810:	1009883a 	mov	r4,r2
81101814:	00800444 	movi	r2,17
81101818:	100d883a 	mov	r6,r2
8110181c:	200b883a 	mov	r5,r4
81101820:	1809883a 	mov	r4,r3
81101824:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
81101828:	d0a04d17 	ldw	r2,-32460(gp)
8110182c:	01604534 	movhi	r5,33044
81101830:	297aec04 	addi	r5,r5,-5200
81101834:	1009883a 	mov	r4,r2
81101838:	110fea80 	call	8110fea8 <fprintf>
8110183c:	d0a06b17 	ldw	r2,-32340(gp)
#endif
	iTimeStart = alt_nticks();
81101840:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
81101844:	e0bfe517 	ldw	r2,-108(fp)
81101848:	e0bfe915 	stw	r2,-92(fp)
	iNAccessLen = sizeof(xSZData);
8110184c:	00810004 	movi	r2,1024
81101850:	e0bfe815 	stw	r2,-96(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101854:	e0ffe817 	ldw	r3,-96(fp)
81101858:	e0bfee17 	ldw	r2,-72(fp)
8110185c:	1885283a 	div	r2,r3,r2
81101860:	e0bfea15 	stw	r2,-88(fp)
	iNPos = 0;
81101864:	e03feb15 	stw	zero,-84(fp)
	while (iNPos < uliByteLen) {
81101868:	00003a06 	br	81101954 <bDdr2MemoryWriteTest+0x434>
		iNRemainedLen = uliByteLen - iNPos;
8110186c:	e0bfeb17 	ldw	r2,-84(fp)
81101870:	e0ffe617 	ldw	r3,-104(fp)
81101874:	1885c83a 	sub	r2,r3,r2
81101878:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
8110187c:	e0bfe817 	ldw	r2,-96(fp)
81101880:	e0fff217 	ldw	r3,-56(fp)
81101884:	1880060e 	bge	r3,r2,811018a0 <bDdr2MemoryWriteTest+0x380>
			iNAccessLen = iNRemainedLen;
81101888:	e0bff217 	ldw	r2,-56(fp)
8110188c:	e0bfe815 	stw	r2,-96(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101890:	e0ffe817 	ldw	r3,-96(fp)
81101894:	e0bfee17 	ldw	r2,-72(fp)
81101898:	1885283a 	div	r2,r3,r2
8110189c:	e0bfea15 	stw	r2,-88(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
811018a0:	e0bfe817 	ldw	r2,-96(fp)
811018a4:	100d883a 	mov	r6,r2
811018a8:	01604534 	movhi	r5,33044
811018ac:	297b2c04 	addi	r5,r5,-4944
811018b0:	e13fe917 	ldw	r4,-92(fp)
811018b4:	1110ea80 	call	81110ea8 <memcpy>
		pxDes += iNItemNum;
811018b8:	e0bfea17 	ldw	r2,-88(fp)
811018bc:	1085883a 	add	r2,r2,r2
811018c0:	1085883a 	add	r2,r2,r2
811018c4:	1007883a 	mov	r3,r2
811018c8:	e0bfe917 	ldw	r2,-92(fp)
811018cc:	10c5883a 	add	r2,r2,r3
811018d0:	e0bfe915 	stw	r2,-92(fp)
		iNPos += iNAccessLen;
811018d4:	e0ffeb17 	ldw	r3,-84(fp)
811018d8:	e0bfe817 	ldw	r2,-96(fp)
811018dc:	1885883a 	add	r2,r3,r2
811018e0:	e0bfeb15 	stw	r2,-84(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
811018e4:	e0bfec17 	ldw	r2,-80(fp)
811018e8:	10800288 	cmpgei	r2,r2,10
811018ec:	1000191e 	bne	r2,zero,81101954 <bDdr2MemoryWriteTest+0x434>
811018f0:	e0bfec17 	ldw	r2,-80(fp)
811018f4:	1085883a 	add	r2,r2,r2
811018f8:	1085883a 	add	r2,r2,r2
811018fc:	e0ffe504 	addi	r3,fp,-108
81101900:	1885883a 	add	r2,r3,r2
81101904:	10800e04 	addi	r2,r2,56
81101908:	10800017 	ldw	r2,0(r2)
8110190c:	e0ffeb17 	ldw	r3,-84(fp)
81101910:	18801036 	bltu	r3,r2,81101954 <bDdr2MemoryWriteTest+0x434>
			iNProgressIndex++;
81101914:	e0bfec17 	ldw	r2,-80(fp)
81101918:	10800044 	addi	r2,r2,1
8110191c:	e0bfec15 	stw	r2,-80(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101920:	e0bfec17 	ldw	r2,-80(fp)
81101924:	108002a4 	muli	r2,r2,10
81101928:	100d883a 	mov	r6,r2
8110192c:	01604534 	movhi	r5,33044
81101930:	29696504 	addi	r5,r5,-23148
81101934:	01204534 	movhi	r4,33044
81101938:	213aec04 	addi	r4,r4,-5200
8110193c:	11116100 	call	81111610 <sprintf>
			debug(fp, cDebugBuffer);
81101940:	d0a04d17 	ldw	r2,-32460(gp)
81101944:	01604534 	movhi	r5,33044
81101948:	297aec04 	addi	r5,r5,-5200
8110194c:	1009883a 	mov	r4,r2
81101950:	110fea80 	call	8110fea8 <fprintf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
81101954:	e0ffeb17 	ldw	r3,-84(fp)
81101958:	e0bfe617 	ldw	r2,-104(fp)
8110195c:	18bfc336 	bltu	r3,r2,8110186c <__reset+0xfb0e186c>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
81101960:	11256ec0 	call	811256ec <alt_dcache_flush_all>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101964:	00a04534 	movhi	r2,33044
81101968:	10baec04 	addi	r2,r2,-5200
8110196c:	00c00284 	movi	r3,10
81101970:	10c00005 	stb	r3,0(r2)
81101974:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101978:	d0a04d17 	ldw	r2,-32460(gp)
8110197c:	01604534 	movhi	r5,33044
81101980:	297aec04 	addi	r5,r5,-5200
81101984:	1009883a 	mov	r4,r2
81101988:	110fea80 	call	8110fea8 <fprintf>
8110198c:	d0e06b17 	ldw	r3,-32340(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101990:	e0bff117 	ldw	r2,-60(fp)
81101994:	1885c83a 	sub	r2,r3,r2
81101998:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
8110199c:	e0bfed17 	ldw	r2,-76(fp)
811019a0:	10001e26 	beq	r2,zero,81101a1c <bDdr2MemoryWriteTest+0x4fc>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
811019a4:	e13fef17 	ldw	r4,-68(fp)
811019a8:	110f0e40 	call	8110f0e4 <__floatsisf>
811019ac:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811019b0:	d0a06a17 	ldw	r2,-32344(gp)
811019b4:	1009883a 	mov	r4,r2
811019b8:	110f2100 	call	8110f210 <__floatunsisf>
811019bc:	1007883a 	mov	r3,r2
811019c0:	180b883a 	mov	r5,r3
811019c4:	8009883a 	mov	r4,r16
811019c8:	110e8980 	call	8110e898 <__divsf3>
811019cc:	1007883a 	mov	r3,r2
811019d0:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811019d4:	1009883a 	mov	r4,r2
811019d8:	110fa280 	call	8110fa28 <__extendsfdf2>
811019dc:	1009883a 	mov	r4,r2
811019e0:	180b883a 	mov	r5,r3
811019e4:	d9400015 	stw	r5,0(sp)
811019e8:	200f883a 	mov	r7,r4
811019ec:	e1bfe617 	ldw	r6,-104(fp)
811019f0:	01604534 	movhi	r5,33044
811019f4:	29696704 	addi	r5,r5,-23140
811019f8:	01204534 	movhi	r4,33044
811019fc:	213aec04 	addi	r4,r4,-5200
81101a00:	11116100 	call	81111610 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101a04:	d0a04d17 	ldw	r2,-32460(gp)
81101a08:	01604534 	movhi	r5,33044
81101a0c:	297aec04 	addi	r5,r5,-5200
81101a10:	1009883a 	mov	r4,r2
81101a14:	110fea80 	call	8110fea8 <fprintf>
81101a18:	00000f06 	br	81101a58 <bDdr2MemoryWriteTest+0x538>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81101a1c:	00e04534 	movhi	r3,33044
81101a20:	18faec04 	addi	r3,r3,-5200
81101a24:	00a04534 	movhi	r2,33044
81101a28:	10a97304 	addi	r2,r2,-23092
81101a2c:	1009883a 	mov	r4,r2
81101a30:	00800584 	movi	r2,22
81101a34:	100d883a 	mov	r6,r2
81101a38:	200b883a 	mov	r5,r4
81101a3c:	1809883a 	mov	r4,r3
81101a40:	1110ea80 	call	81110ea8 <memcpy>
		debug(fp, cDebugBuffer);
81101a44:	d0a04d17 	ldw	r2,-32460(gp)
81101a48:	01604534 	movhi	r5,33044
81101a4c:	297aec04 	addi	r5,r5,-5200
81101a50:	1009883a 	mov	r4,r2
81101a54:	110fea80 	call	8110fea8 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101a58:	00a04534 	movhi	r2,33044
81101a5c:	10baec04 	addi	r2,r2,-5200
81101a60:	00c00284 	movi	r3,10
81101a64:	10c00005 	stb	r3,0(r2)
81101a68:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101a6c:	d0a04d17 	ldw	r2,-32460(gp)
81101a70:	01604534 	movhi	r5,33044
81101a74:	297aec04 	addi	r5,r5,-5200
81101a78:	1009883a 	mov	r4,r2
81101a7c:	110fea80 	call	8110fea8 <fprintf>
#endif

	return bSuccess;
81101a80:	e0bfed17 	ldw	r2,-76(fp)
}
81101a84:	e6fffe04 	addi	sp,fp,-8
81101a88:	dfc00317 	ldw	ra,12(sp)
81101a8c:	df000217 	ldw	fp,8(sp)
81101a90:	dc400117 	ldw	r17,4(sp)
81101a94:	dc000017 	ldw	r16,0(sp)
81101a98:	dec00404 	addi	sp,sp,16
81101a9c:	f800283a 	ret

81101aa0 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
81101aa0:	deffe204 	addi	sp,sp,-120
81101aa4:	de00012e 	bgeu	sp,et,81101aac <bDdr2MemoryReadTest+0xc>
81101aa8:	003b68fa 	trap	3
81101aac:	dfc01d15 	stw	ra,116(sp)
81101ab0:	df001c15 	stw	fp,112(sp)
81101ab4:	dc401b15 	stw	r17,108(sp)
81101ab8:	dc001a15 	stw	r16,104(sp)
81101abc:	df001c04 	addi	fp,sp,112
81101ac0:	2005883a 	mov	r2,r4
81101ac4:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
81101ac8:	00e04534 	movhi	r3,33044
81101acc:	18faec04 	addi	r3,r3,-5200
81101ad0:	00a04534 	movhi	r2,33044
81101ad4:	10a97904 	addi	r2,r2,-23068
81101ad8:	1009883a 	mov	r4,r2
81101adc:	008009c4 	movi	r2,39
81101ae0:	100d883a 	mov	r6,r2
81101ae4:	200b883a 	mov	r5,r4
81101ae8:	1809883a 	mov	r4,r3
81101aec:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
81101af0:	d0a04d17 	ldw	r2,-32460(gp)
81101af4:	01604534 	movhi	r5,33044
81101af8:	297aec04 	addi	r5,r5,-5200
81101afc:	1009883a 	mov	r4,r2
81101b00:	110fea80 	call	8110fea8 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101b04:	00800044 	movi	r2,1
81101b08:	e0bfe515 	stw	r2,-108(fp)
	switch (ucMemoryId) {
81101b0c:	e0bffd03 	ldbu	r2,-12(fp)
81101b10:	10c00060 	cmpeqi	r3,r2,1
81101b14:	1800031e 	bne	r3,zero,81101b24 <bDdr2MemoryReadTest+0x84>
81101b18:	108000a0 	cmpeqi	r2,r2,2
81101b1c:	1000081e 	bne	r2,zero,81101b40 <bDdr2MemoryReadTest+0xa0>
81101b20:	00000e06 	br	81101b5c <bDdr2MemoryReadTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b24:	e0bffd03 	ldbu	r2,-12(fp)
81101b28:	1009883a 	mov	r4,r2
81101b2c:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101b30:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101b34:	00a00034 	movhi	r2,32768
81101b38:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b3c:	00001906 	br	81101ba4 <bDdr2MemoryReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b40:	e0bffd03 	ldbu	r2,-12(fp)
81101b44:	1009883a 	mov	r4,r2
81101b48:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101b4c:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101b50:	00a00034 	movhi	r2,32768
81101b54:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b58:	00001206 	br	81101ba4 <bDdr2MemoryReadTest+0x104>
	default:
		bSuccess = FALSE;
81101b5c:	e03fe515 	stw	zero,-108(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101b60:	00e04534 	movhi	r3,33044
81101b64:	18faec04 	addi	r3,r3,-5200
81101b68:	00a04534 	movhi	r2,33044
81101b6c:	10a76104 	addi	r2,r2,-25212
81101b70:	1009883a 	mov	r4,r2
81101b74:	00800bc4 	movi	r2,47
81101b78:	100d883a 	mov	r6,r2
81101b7c:	200b883a 	mov	r5,r4
81101b80:	1809883a 	mov	r4,r3
81101b84:	1110ea80 	call	81110ea8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101b88:	d0a04d17 	ldw	r2,-32460(gp)
81101b8c:	01604534 	movhi	r5,33044
81101b90:	297aec04 	addi	r5,r5,-5200
81101b94:	1009883a 	mov	r4,r2
81101b98:	110fea80 	call	8110fea8 <fprintf>
		;
#endif
		return bSuccess;
81101b9c:	e0bfe517 	ldw	r2,-108(fp)
81101ba0:	0000fc06 	br	81101f94 <bDdr2MemoryReadTest+0x4f4>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101ba4:	e0bfe717 	ldw	r2,-100(fp)
81101ba8:	1004d53a 	srli	r2,r2,20
81101bac:	100d883a 	mov	r6,r2
81101bb0:	01604534 	movhi	r5,33044
81101bb4:	29698304 	addi	r5,r5,-23028
81101bb8:	01204534 	movhi	r4,33044
81101bbc:	213aec04 	addi	r4,r4,-5200
81101bc0:	11116100 	call	81111610 <sprintf>
	debug(fp, cDebugBuffer);
81101bc4:	d0a04d17 	ldw	r2,-32460(gp)
81101bc8:	01604534 	movhi	r5,33044
81101bcc:	297aec04 	addi	r5,r5,-5200
81101bd0:	1009883a 	mov	r4,r2
81101bd4:	110fea80 	call	8110fea8 <fprintf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101bd8:	00804004 	movi	r2,256
81101bdc:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101be0:	00800104 	movi	r2,4
81101be4:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
81101be8:	e0ffec17 	ldw	r3,-80(fp)
81101bec:	e0bfef17 	ldw	r2,-68(fp)
81101bf0:	1885383a 	mul	r2,r3,r2
81101bf4:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
81101bf8:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101bfc:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
81101c00:	e03fe815 	stw	zero,-96(fp)
81101c04:	00001506 	br	81101c5c <bDdr2MemoryReadTest+0x1bc>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101c08:	e0ffe717 	ldw	r3,-100(fp)
81101c0c:	00b33374 	movhi	r2,52429
81101c10:	10b33344 	addi	r2,r2,-13107
81101c14:	1888383a 	mulxuu	r4,r3,r2
81101c18:	1885383a 	mul	r2,r3,r2
81101c1c:	1021883a 	mov	r16,r2
81101c20:	2023883a 	mov	r17,r4
81101c24:	8804d0fa 	srli	r2,r17,3
81101c28:	e0ffe817 	ldw	r3,-96(fp)
81101c2c:	18c00044 	addi	r3,r3,1
81101c30:	10c7383a 	mul	r3,r2,r3
81101c34:	e0bfe817 	ldw	r2,-96(fp)
81101c38:	1085883a 	add	r2,r2,r2
81101c3c:	1085883a 	add	r2,r2,r2
81101c40:	e13fe504 	addi	r4,fp,-108
81101c44:	2085883a 	add	r2,r4,r2
81101c48:	10800e04 	addi	r2,r2,56
81101c4c:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101c50:	e0bfe817 	ldw	r2,-96(fp)
81101c54:	10800044 	addi	r2,r2,1
81101c58:	e0bfe815 	stw	r2,-96(fp)
81101c5c:	e0bfe817 	ldw	r2,-96(fp)
81101c60:	10800290 	cmplti	r2,r2,10
81101c64:	103fe81e 	bne	r2,zero,81101c08 <__reset+0xfb0e1c08>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
81101c68:	e03fee15 	stw	zero,-72(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
81101c6c:	00e04534 	movhi	r3,33044
81101c70:	18faec04 	addi	r3,r3,-5200
81101c74:	00a04534 	movhi	r2,33044
81101c78:	10a98904 	addi	r2,r2,-23004
81101c7c:	1009883a 	mov	r4,r2
81101c80:	008006c4 	movi	r2,27
81101c84:	100d883a 	mov	r6,r2
81101c88:	200b883a 	mov	r5,r4
81101c8c:	1809883a 	mov	r4,r3
81101c90:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
81101c94:	d0a04d17 	ldw	r2,-32460(gp)
81101c98:	01604534 	movhi	r5,33044
81101c9c:	297aec04 	addi	r5,r5,-5200
81101ca0:	1009883a 	mov	r4,r2
81101ca4:	110fea80 	call	8110fea8 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101ca8:	d0a06b17 	ldw	r2,-32340(gp)
#endif
	iTimeStart = alt_nticks();
81101cac:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101cb0:	e0bfe617 	ldw	r2,-104(fp)
81101cb4:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
81101cb8:	00810004 	movi	r2,1024
81101cbc:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101cc0:	e0ffe917 	ldw	r3,-92(fp)
81101cc4:	e0bfef17 	ldw	r2,-68(fp)
81101cc8:	1885283a 	div	r2,r3,r2
81101ccc:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101cd0:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101cd4:	00006206 	br	81101e60 <bDdr2MemoryReadTest+0x3c0>
		iNRemainedLen = uliByteLen - iNPos;
81101cd8:	e0bfed17 	ldw	r2,-76(fp)
81101cdc:	e0ffe717 	ldw	r3,-100(fp)
81101ce0:	1885c83a 	sub	r2,r3,r2
81101ce4:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101ce8:	e0bfe917 	ldw	r2,-92(fp)
81101cec:	e0fff217 	ldw	r3,-56(fp)
81101cf0:	1880060e 	bge	r3,r2,81101d0c <bDdr2MemoryReadTest+0x26c>
			iNAccessLen = iNRemainedLen;
81101cf4:	e0bff217 	ldw	r2,-56(fp)
81101cf8:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101cfc:	e0ffe917 	ldw	r3,-92(fp)
81101d00:	e0bfef17 	ldw	r2,-68(fp)
81101d04:	1885283a 	div	r2,r3,r2
81101d08:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101d0c:	00a04534 	movhi	r2,33044
81101d10:	10bb2c04 	addi	r2,r2,-4944
81101d14:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101d18:	e03fe815 	stw	zero,-96(fp)
81101d1c:	00002b06 	br	81101dcc <bDdr2MemoryReadTest+0x32c>
			if (*pxSrc++ != *pxDes++) {
81101d20:	e0bfeb17 	ldw	r2,-84(fp)
81101d24:	10c00104 	addi	r3,r2,4
81101d28:	e0ffeb15 	stw	r3,-84(fp)
81101d2c:	10c00017 	ldw	r3,0(r2)
81101d30:	e0bfea17 	ldw	r2,-88(fp)
81101d34:	11000104 	addi	r4,r2,4
81101d38:	e13fea15 	stw	r4,-88(fp)
81101d3c:	10800017 	ldw	r2,0(r2)
81101d40:	18801f26 	beq	r3,r2,81101dc0 <bDdr2MemoryReadTest+0x320>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d44:	e0bfeb17 	ldw	r2,-84(fp)
81101d48:	10bfff04 	addi	r2,r2,-4
81101d4c:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d50:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d54:	00a04534 	movhi	r2,33044
81101d58:	10bb2c04 	addi	r2,r2,-4944
81101d5c:	e0ffe817 	ldw	r3,-96(fp)
81101d60:	18c7883a 	add	r3,r3,r3
81101d64:	18c7883a 	add	r3,r3,r3
81101d68:	10c5883a 	add	r2,r2,r3
81101d6c:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d70:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
81101d74:	e0ffed17 	ldw	r3,-76(fp)
81101d78:	e0bfef17 	ldw	r2,-68(fp)
81101d7c:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d80:	e0bfe817 	ldw	r2,-96(fp)
81101d84:	1885883a 	add	r2,r3,r2
81101d88:	d8800015 	stw	r2,0(sp)
81101d8c:	280f883a 	mov	r7,r5
81101d90:	200d883a 	mov	r6,r4
81101d94:	01604534 	movhi	r5,33044
81101d98:	29699004 	addi	r5,r5,-22976
81101d9c:	01204534 	movhi	r4,33044
81101da0:	213aec04 	addi	r4,r4,-5200
81101da4:	11116100 	call	81111610 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
81101da8:	d0a04d17 	ldw	r2,-32460(gp)
81101dac:	01604534 	movhi	r5,33044
81101db0:	297aec04 	addi	r5,r5,-5200
81101db4:	1009883a 	mov	r4,r2
81101db8:	110fea80 	call	8110fea8 <fprintf>
#endif
				bSuccess = FALSE;
81101dbc:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101dc0:	e0bfe817 	ldw	r2,-96(fp)
81101dc4:	10800044 	addi	r2,r2,1
81101dc8:	e0bfe815 	stw	r2,-96(fp)
81101dcc:	e0ffe817 	ldw	r3,-96(fp)
81101dd0:	e0bfec17 	ldw	r2,-80(fp)
81101dd4:	1880020e 	bge	r3,r2,81101de0 <bDdr2MemoryReadTest+0x340>
81101dd8:	e0bfe517 	ldw	r2,-108(fp)
81101ddc:	103fd01e 	bne	r2,zero,81101d20 <__reset+0xfb0e1d20>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101de0:	e0ffed17 	ldw	r3,-76(fp)
81101de4:	e0bfe917 	ldw	r2,-92(fp)
81101de8:	1885883a 	add	r2,r3,r2
81101dec:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101df0:	e0bfee17 	ldw	r2,-72(fp)
81101df4:	10800288 	cmpgei	r2,r2,10
81101df8:	1000191e 	bne	r2,zero,81101e60 <bDdr2MemoryReadTest+0x3c0>
81101dfc:	e0bfee17 	ldw	r2,-72(fp)
81101e00:	1085883a 	add	r2,r2,r2
81101e04:	1085883a 	add	r2,r2,r2
81101e08:	e0ffe504 	addi	r3,fp,-108
81101e0c:	1885883a 	add	r2,r3,r2
81101e10:	10800e04 	addi	r2,r2,56
81101e14:	10800017 	ldw	r2,0(r2)
81101e18:	e0ffed17 	ldw	r3,-76(fp)
81101e1c:	18801036 	bltu	r3,r2,81101e60 <bDdr2MemoryReadTest+0x3c0>
			iNProgressIndex++;
81101e20:	e0bfee17 	ldw	r2,-72(fp)
81101e24:	10800044 	addi	r2,r2,1
81101e28:	e0bfee15 	stw	r2,-72(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101e2c:	e0bfee17 	ldw	r2,-72(fp)
81101e30:	108002a4 	muli	r2,r2,10
81101e34:	100d883a 	mov	r6,r2
81101e38:	01604534 	movhi	r5,33044
81101e3c:	29696504 	addi	r5,r5,-23148
81101e40:	01204534 	movhi	r4,33044
81101e44:	213aec04 	addi	r4,r4,-5200
81101e48:	11116100 	call	81111610 <sprintf>
			debug(fp, cDebugBuffer);
81101e4c:	d0a04d17 	ldw	r2,-32460(gp)
81101e50:	01604534 	movhi	r5,33044
81101e54:	297aec04 	addi	r5,r5,-5200
81101e58:	1009883a 	mov	r4,r2
81101e5c:	110fea80 	call	8110fea8 <fprintf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
81101e60:	e0bfe517 	ldw	r2,-108(fp)
81101e64:	10000326 	beq	r2,zero,81101e74 <bDdr2MemoryReadTest+0x3d4>
81101e68:	e0ffed17 	ldw	r3,-76(fp)
81101e6c:	e0bfe717 	ldw	r2,-100(fp)
81101e70:	18bf9936 	bltu	r3,r2,81101cd8 <__reset+0xfb0e1cd8>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101e74:	00a04534 	movhi	r2,33044
81101e78:	10baec04 	addi	r2,r2,-5200
81101e7c:	00c00284 	movi	r3,10
81101e80:	10c00005 	stb	r3,0(r2)
81101e84:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101e88:	d0a04d17 	ldw	r2,-32460(gp)
81101e8c:	01604534 	movhi	r5,33044
81101e90:	297aec04 	addi	r5,r5,-5200
81101e94:	1009883a 	mov	r4,r2
81101e98:	110fea80 	call	8110fea8 <fprintf>
81101e9c:	d0e06b17 	ldw	r3,-32340(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101ea0:	e0bff117 	ldw	r2,-60(fp)
81101ea4:	1885c83a 	sub	r2,r3,r2
81101ea8:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
81101eac:	e0bfe517 	ldw	r2,-108(fp)
81101eb0:	10001e26 	beq	r2,zero,81101f2c <bDdr2MemoryReadTest+0x48c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101eb4:	e13ff017 	ldw	r4,-64(fp)
81101eb8:	110f0e40 	call	8110f0e4 <__floatsisf>
81101ebc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101ec0:	d0a06a17 	ldw	r2,-32344(gp)
81101ec4:	1009883a 	mov	r4,r2
81101ec8:	110f2100 	call	8110f210 <__floatunsisf>
81101ecc:	1007883a 	mov	r3,r2
81101ed0:	180b883a 	mov	r5,r3
81101ed4:	8009883a 	mov	r4,r16
81101ed8:	110e8980 	call	8110e898 <__divsf3>
81101edc:	1007883a 	mov	r3,r2
81101ee0:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
81101ee4:	1009883a 	mov	r4,r2
81101ee8:	110fa280 	call	8110fa28 <__extendsfdf2>
81101eec:	1009883a 	mov	r4,r2
81101ef0:	180b883a 	mov	r5,r3
81101ef4:	d9400015 	stw	r5,0(sp)
81101ef8:	200f883a 	mov	r7,r4
81101efc:	e1bfe717 	ldw	r6,-100(fp)
81101f00:	01604534 	movhi	r5,33044
81101f04:	29699e04 	addi	r5,r5,-22920
81101f08:	01204534 	movhi	r4,33044
81101f0c:	213aec04 	addi	r4,r4,-5200
81101f10:	11116100 	call	81111610 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101f14:	d0a04d17 	ldw	r2,-32460(gp)
81101f18:	01604534 	movhi	r5,33044
81101f1c:	297aec04 	addi	r5,r5,-5200
81101f20:	1009883a 	mov	r4,r2
81101f24:	110fea80 	call	8110fea8 <fprintf>
81101f28:	00000f06 	br	81101f68 <bDdr2MemoryReadTest+0x4c8>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81101f2c:	00e04534 	movhi	r3,33044
81101f30:	18faec04 	addi	r3,r3,-5200
81101f34:	00a04534 	movhi	r2,33044
81101f38:	10a9aa04 	addi	r2,r2,-22872
81101f3c:	1009883a 	mov	r4,r2
81101f40:	00800544 	movi	r2,21
81101f44:	100d883a 	mov	r6,r2
81101f48:	200b883a 	mov	r5,r4
81101f4c:	1809883a 	mov	r4,r3
81101f50:	1110ea80 	call	81110ea8 <memcpy>
		debug(fp, cDebugBuffer);
81101f54:	d0a04d17 	ldw	r2,-32460(gp)
81101f58:	01604534 	movhi	r5,33044
81101f5c:	297aec04 	addi	r5,r5,-5200
81101f60:	1009883a 	mov	r4,r2
81101f64:	110fea80 	call	8110fea8 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101f68:	00a04534 	movhi	r2,33044
81101f6c:	10baec04 	addi	r2,r2,-5200
81101f70:	00c00284 	movi	r3,10
81101f74:	10c00005 	stb	r3,0(r2)
81101f78:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101f7c:	d0a04d17 	ldw	r2,-32460(gp)
81101f80:	01604534 	movhi	r5,33044
81101f84:	297aec04 	addi	r5,r5,-5200
81101f88:	1009883a 	mov	r4,r2
81101f8c:	110fea80 	call	8110fea8 <fprintf>
#endif

	return bSuccess;
81101f90:	e0bfe517 	ldw	r2,-108(fp)
}
81101f94:	e6fffe04 	addi	sp,fp,-8
81101f98:	dfc00317 	ldw	ra,12(sp)
81101f9c:	df000217 	ldw	fp,8(sp)
81101fa0:	dc400117 	ldw	r17,4(sp)
81101fa4:	dc000017 	ldw	r16,0(sp)
81101fa8:	dec00404 	addi	sp,sp,16
81101fac:	f800283a 	ret

81101fb0 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81101fb0:	deffec04 	addi	sp,sp,-80
81101fb4:	de00012e 	bgeu	sp,et,81101fbc <bDdr2MemoryRandomWriteTest+0xc>
81101fb8:	003b68fa 	trap	3
81101fbc:	dfc01315 	stw	ra,76(sp)
81101fc0:	df001215 	stw	fp,72(sp)
81101fc4:	dcc01115 	stw	r19,68(sp)
81101fc8:	dc801015 	stw	r18,64(sp)
81101fcc:	dc400f15 	stw	r17,60(sp)
81101fd0:	dc000e15 	stw	r16,56(sp)
81101fd4:	df001204 	addi	fp,sp,72
81101fd8:	2005883a 	mov	r2,r4
81101fdc:	e17ffa15 	stw	r5,-24(fp)
81101fe0:	e1bffb15 	stw	r6,-20(fp)
81101fe4:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
81101fe8:	00e04534 	movhi	r3,33044
81101fec:	18faec04 	addi	r3,r3,-5200
81101ff0:	00a04534 	movhi	r2,33044
81101ff4:	10a9b004 	addi	r2,r2,-22848
81101ff8:	1009883a 	mov	r4,r2
81101ffc:	00800bc4 	movi	r2,47
81102000:	100d883a 	mov	r6,r2
81102004:	200b883a 	mov	r5,r4
81102008:	1809883a 	mov	r4,r3
8110200c:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
81102010:	d0a04d17 	ldw	r2,-32460(gp)
81102014:	01604534 	movhi	r5,33044
81102018:	297aec04 	addi	r5,r5,-5200
8110201c:	1009883a 	mov	r4,r2
81102020:	110fea80 	call	8110fea8 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102024:	00800044 	movi	r2,1
81102028:	e0bff415 	stw	r2,-48(fp)
	switch (ucMemoryId) {
8110202c:	e0bff903 	ldbu	r2,-28(fp)
81102030:	10c00060 	cmpeqi	r3,r2,1
81102034:	1800031e 	bne	r3,zero,81102044 <bDdr2MemoryRandomWriteTest+0x94>
81102038:	108000a0 	cmpeqi	r2,r2,2
8110203c:	1000081e 	bne	r2,zero,81102060 <bDdr2MemoryRandomWriteTest+0xb0>
81102040:	00000e06 	br	8110207c <bDdr2MemoryRandomWriteTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102044:	e0bff903 	ldbu	r2,-28(fp)
81102048:	1009883a 	mov	r4,r2
8110204c:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102050:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102054:	00a00034 	movhi	r2,32768
81102058:	e0bff015 	stw	r2,-64(fp)
		break;
8110205c:	00001906 	br	811020c4 <bDdr2MemoryRandomWriteTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102060:	e0bff903 	ldbu	r2,-28(fp)
81102064:	1009883a 	mov	r4,r2
81102068:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110206c:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81102070:	00a00034 	movhi	r2,32768
81102074:	e0bff015 	stw	r2,-64(fp)
		break;
81102078:	00001206 	br	811020c4 <bDdr2MemoryRandomWriteTest+0x114>
	default:
		bSuccess = FALSE;
8110207c:	e03ff415 	stw	zero,-48(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81102080:	00e04534 	movhi	r3,33044
81102084:	18faec04 	addi	r3,r3,-5200
81102088:	00a04534 	movhi	r2,33044
8110208c:	10a76104 	addi	r2,r2,-25212
81102090:	1009883a 	mov	r4,r2
81102094:	00800bc4 	movi	r2,47
81102098:	100d883a 	mov	r6,r2
8110209c:	200b883a 	mov	r5,r4
811020a0:	1809883a 	mov	r4,r3
811020a4:	1110ea80 	call	81110ea8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811020a8:	d0a04d17 	ldw	r2,-32460(gp)
811020ac:	01604534 	movhi	r5,33044
811020b0:	297aec04 	addi	r5,r5,-5200
811020b4:	1009883a 	mov	r4,r2
811020b8:	110fea80 	call	8110fea8 <fprintf>
		;
#endif
		return bSuccess;
811020bc:	e0bff417 	ldw	r2,-48(fp)
811020c0:	0000ce06 	br	811023fc <bDdr2MemoryRandomWriteTest+0x44c>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811020c4:	e0bff017 	ldw	r2,-64(fp)
811020c8:	1004d53a 	srli	r2,r2,20
811020cc:	100d883a 	mov	r6,r2
811020d0:	01604534 	movhi	r5,33044
811020d4:	29695a04 	addi	r5,r5,-23192
811020d8:	01204534 	movhi	r4,33044
811020dc:	213aec04 	addi	r4,r4,-5200
811020e0:	11116100 	call	81111610 <sprintf>
	debug(fp, cDebugBuffer);
811020e4:	d0a04d17 	ldw	r2,-32460(gp)
811020e8:	01604534 	movhi	r5,33044
811020ec:	297aec04 	addi	r5,r5,-5200
811020f0:	1009883a 	mov	r4,r2
811020f4:	110fea80 	call	8110fea8 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811020f8:	d0a06b17 	ldw	r2,-32340(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
811020fc:	d0a03615 	stw	r2,-32552(gp)
	uliCurrentState = uliInitialState;
81102100:	d0a03617 	ldw	r2,-32552(gp)
81102104:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102108:	e0ffef17 	ldw	r3,-68(fp)
8110210c:	e0bff017 	ldw	r2,-64(fp)
81102110:	1885883a 	add	r2,r3,r2
81102114:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102118:	e0fff017 	ldw	r3,-64(fp)
8110211c:	00b33374 	movhi	r2,52429
81102120:	10b33344 	addi	r2,r2,-13107
81102124:	1888383a 	mulxuu	r4,r3,r2
81102128:	1885383a 	mul	r2,r3,r2
8110212c:	1025883a 	mov	r18,r2
81102130:	2027883a 	mov	r19,r4
81102134:	9806d13a 	srli	r3,r19,4
81102138:	e0bfef17 	ldw	r2,-68(fp)
8110213c:	1885883a 	add	r2,r3,r2
81102140:	e0bff215 	stw	r2,-56(fp)
	ucPercentage = 5;
81102144:	00800144 	movi	r2,5
81102148:	e0bff305 	stb	r2,-52(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
8110214c:	00e04534 	movhi	r3,33044
81102150:	18faec04 	addi	r3,r3,-5200
81102154:	00a04534 	movhi	r2,33044
81102158:	10a9bc04 	addi	r2,r2,-22800
8110215c:	1009883a 	mov	r4,r2
81102160:	00800584 	movi	r2,22
81102164:	100d883a 	mov	r6,r2
81102168:	200b883a 	mov	r5,r4
8110216c:	1809883a 	mov	r4,r3
81102170:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
81102174:	d0a04d17 	ldw	r2,-32460(gp)
81102178:	01604534 	movhi	r5,33044
8110217c:	297aec04 	addi	r5,r5,-5200
81102180:	1009883a 	mov	r4,r2
81102184:	110fea80 	call	8110fea8 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
81102188:	e0bffa17 	ldw	r2,-24(fp)
8110218c:	10800058 	cmpnei	r2,r2,1
81102190:	10000a1e 	bne	r2,zero,811021bc <bDdr2MemoryRandomWriteTest+0x20c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
81102194:	01604534 	movhi	r5,33044
81102198:	2969c204 	addi	r5,r5,-22776
8110219c:	01204534 	movhi	r4,33044
811021a0:	213aec04 	addi	r4,r4,-5200
811021a4:	11116100 	call	81111610 <sprintf>
		debug(fp, cDebugBuffer);
811021a8:	d0a04d17 	ldw	r2,-32460(gp)
811021ac:	01604534 	movhi	r5,33044
811021b0:	297aec04 	addi	r5,r5,-5200
811021b4:	1009883a 	mov	r4,r2
811021b8:	110fea80 	call	8110fea8 <fprintf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
811021bc:	e03ff615 	stw	zero,-40(fp)
811021c0:	d0a06b17 	ldw	r2,-32340(gp)

	TimeStart = alt_nticks();
811021c4:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
811021c8:	e0bfef17 	ldw	r2,-68(fp)
811021cc:	e0bff115 	stw	r2,-60(fp)
811021d0:	00002c06 	br	81102284 <bDdr2MemoryRandomWriteTest+0x2d4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
811021d4:	e0bff804 	addi	r2,fp,-32
811021d8:	1009883a 	mov	r4,r2
811021dc:	11028bc0 	call	811028bc <uliXorshift32>
811021e0:	1007883a 	mov	r3,r2
811021e4:	e0bff117 	ldw	r2,-60(fp)
811021e8:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
811021ec:	e0bffa17 	ldw	r2,-24(fp)
811021f0:	10800060 	cmpeqi	r2,r2,1
811021f4:	1009883a 	mov	r4,r2
811021f8:	e0bff117 	ldw	r2,-60(fp)
811021fc:	e0fff217 	ldw	r3,-56(fp)
81102200:	1885803a 	cmpltu	r2,r3,r2
81102204:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
81102208:	10803fcc 	andi	r2,r2,255
8110220c:	10001a26 	beq	r2,zero,81102278 <bDdr2MemoryRandomWriteTest+0x2c8>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102210:	e0bff303 	ldbu	r2,-52(fp)
81102214:	100d883a 	mov	r6,r2
81102218:	01604534 	movhi	r5,33044
8110221c:	2969c404 	addi	r5,r5,-22768
81102220:	01204534 	movhi	r4,33044
81102224:	213aec04 	addi	r4,r4,-5200
81102228:	11116100 	call	81111610 <sprintf>
			debug(fp, cDebugBuffer);
8110222c:	d0a04d17 	ldw	r2,-32460(gp)
81102230:	01604534 	movhi	r5,33044
81102234:	297aec04 	addi	r5,r5,-5200
81102238:	1009883a 	mov	r4,r2
8110223c:	110fea80 	call	8110fea8 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
81102240:	e0fff017 	ldw	r3,-64(fp)
81102244:	00b33374 	movhi	r2,52429
81102248:	10b33344 	addi	r2,r2,-13107
8110224c:	1888383a 	mulxuu	r4,r3,r2
81102250:	1885383a 	mul	r2,r3,r2
81102254:	1021883a 	mov	r16,r2
81102258:	2023883a 	mov	r17,r4
8110225c:	8804d13a 	srli	r2,r17,4
81102260:	e0fff217 	ldw	r3,-56(fp)
81102264:	1885883a 	add	r2,r3,r2
81102268:	e0bff215 	stw	r2,-56(fp)
			ucPercentage += 5;
8110226c:	e0bff303 	ldbu	r2,-52(fp)
81102270:	10800144 	addi	r2,r2,5
81102274:	e0bff305 	stb	r2,-52(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
81102278:	e0bff117 	ldw	r2,-60(fp)
8110227c:	10800104 	addi	r2,r2,4
81102280:	e0bff115 	stw	r2,-60(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
81102284:	e0fff117 	ldw	r3,-60(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
81102288:	e0bff517 	ldw	r2,-44(fp)
8110228c:	18bfd136 	bltu	r3,r2,811021d4 <__reset+0xfb0e21d4>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
81102290:	11256ec0 	call	811256ec <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81102294:	e0bffa17 	ldw	r2,-24(fp)
81102298:	10800058 	cmpnei	r2,r2,1
8110229c:	10000a1e 	bne	r2,zero,811022c8 <bDdr2MemoryRandomWriteTest+0x318>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
811022a0:	01604534 	movhi	r5,33044
811022a4:	2969c704 	addi	r5,r5,-22756
811022a8:	01204534 	movhi	r4,33044
811022ac:	213aec04 	addi	r4,r4,-5200
811022b0:	11116100 	call	81111610 <sprintf>
		debug(fp, cDebugBuffer);
811022b4:	d0a04d17 	ldw	r2,-32460(gp)
811022b8:	01604534 	movhi	r5,33044
811022bc:	297aec04 	addi	r5,r5,-5200
811022c0:	1009883a 	mov	r4,r2
811022c4:	110fea80 	call	8110fea8 <fprintf>
#endif
	}

	if (bSuccess) {
811022c8:	e0bff417 	ldw	r2,-48(fp)
811022cc:	10003126 	beq	r2,zero,81102394 <bDdr2MemoryRandomWriteTest+0x3e4>
		if (bTime == TRUE) {
811022d0:	e0bffb17 	ldw	r2,-20(fp)
811022d4:	10800058 	cmpnei	r2,r2,1
811022d8:	1000221e 	bne	r2,zero,81102364 <bDdr2MemoryRandomWriteTest+0x3b4>
811022dc:	d0e06b17 	ldw	r3,-32340(gp)
			TimeElapsed = alt_nticks() - TimeStart;
811022e0:	e0bff717 	ldw	r2,-36(fp)
811022e4:	1885c83a 	sub	r2,r3,r2
811022e8:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
811022ec:	e13ff617 	ldw	r4,-40(fp)
811022f0:	110f0e40 	call	8110f0e4 <__floatsisf>
811022f4:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811022f8:	d0a06a17 	ldw	r2,-32344(gp)
811022fc:	1009883a 	mov	r4,r2
81102300:	110f2100 	call	8110f210 <__floatunsisf>
81102304:	1007883a 	mov	r3,r2
81102308:	180b883a 	mov	r5,r3
8110230c:	8009883a 	mov	r4,r16
81102310:	110e8980 	call	8110e898 <__divsf3>
81102314:	1007883a 	mov	r3,r2
81102318:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
8110231c:	1009883a 	mov	r4,r2
81102320:	110fa280 	call	8110fa28 <__extendsfdf2>
81102324:	1009883a 	mov	r4,r2
81102328:	180b883a 	mov	r5,r3
8110232c:	d9400015 	stw	r5,0(sp)
81102330:	200f883a 	mov	r7,r4
81102334:	e1bff017 	ldw	r6,-64(fp)
81102338:	01604534 	movhi	r5,33044
8110233c:	2969ca04 	addi	r5,r5,-22744
81102340:	01204534 	movhi	r4,33044
81102344:	213aec04 	addi	r4,r4,-5200
81102348:	11116100 	call	81111610 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
8110234c:	d0a04d17 	ldw	r2,-32460(gp)
81102350:	01604534 	movhi	r5,33044
81102354:	297aec04 	addi	r5,r5,-5200
81102358:	1009883a 	mov	r4,r2
8110235c:	110fea80 	call	8110fea8 <fprintf>
81102360:	00001b06 	br	811023d0 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
81102364:	e1bff017 	ldw	r6,-64(fp)
81102368:	01604534 	movhi	r5,33044
8110236c:	2969d604 	addi	r5,r5,-22696
81102370:	01204534 	movhi	r4,33044
81102374:	213aec04 	addi	r4,r4,-5200
81102378:	11116100 	call	81111610 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
8110237c:	d0a04d17 	ldw	r2,-32460(gp)
81102380:	01604534 	movhi	r5,33044
81102384:	297aec04 	addi	r5,r5,-5200
81102388:	1009883a 	mov	r4,r2
8110238c:	110fea80 	call	8110fea8 <fprintf>
81102390:	00000f06 	br	811023d0 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81102394:	00e04534 	movhi	r3,33044
81102398:	18faec04 	addi	r3,r3,-5200
8110239c:	00a04534 	movhi	r2,33044
811023a0:	10a97304 	addi	r2,r2,-23092
811023a4:	1009883a 	mov	r4,r2
811023a8:	00800584 	movi	r2,22
811023ac:	100d883a 	mov	r6,r2
811023b0:	200b883a 	mov	r5,r4
811023b4:	1809883a 	mov	r4,r3
811023b8:	1110ea80 	call	81110ea8 <memcpy>
		debug(fp, cDebugBuffer);
811023bc:	d0a04d17 	ldw	r2,-32460(gp)
811023c0:	01604534 	movhi	r5,33044
811023c4:	297aec04 	addi	r5,r5,-5200
811023c8:	1009883a 	mov	r4,r2
811023cc:	110fea80 	call	8110fea8 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811023d0:	00a04534 	movhi	r2,33044
811023d4:	10baec04 	addi	r2,r2,-5200
811023d8:	00c00284 	movi	r3,10
811023dc:	10c00005 	stb	r3,0(r2)
811023e0:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811023e4:	d0a04d17 	ldw	r2,-32460(gp)
811023e8:	01604534 	movhi	r5,33044
811023ec:	297aec04 	addi	r5,r5,-5200
811023f0:	1009883a 	mov	r4,r2
811023f4:	110fea80 	call	8110fea8 <fprintf>
#endif

	return bSuccess;
811023f8:	e0bff417 	ldw	r2,-48(fp)
}
811023fc:	e6fffc04 	addi	sp,fp,-16
81102400:	dfc00517 	ldw	ra,20(sp)
81102404:	df000417 	ldw	fp,16(sp)
81102408:	dcc00317 	ldw	r19,12(sp)
8110240c:	dc800217 	ldw	r18,8(sp)
81102410:	dc400117 	ldw	r17,4(sp)
81102414:	dc000017 	ldw	r16,0(sp)
81102418:	dec00604 	addi	sp,sp,24
8110241c:	f800283a 	ret

81102420 <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102420:	deffec04 	addi	sp,sp,-80
81102424:	de00012e 	bgeu	sp,et,8110242c <bDdr2MemoryRandomReadTest+0xc>
81102428:	003b68fa 	trap	3
8110242c:	dfc01315 	stw	ra,76(sp)
81102430:	df001215 	stw	fp,72(sp)
81102434:	dcc01115 	stw	r19,68(sp)
81102438:	dc801015 	stw	r18,64(sp)
8110243c:	dc400f15 	stw	r17,60(sp)
81102440:	dc000e15 	stw	r16,56(sp)
81102444:	df001204 	addi	fp,sp,72
81102448:	2005883a 	mov	r2,r4
8110244c:	e17ffa15 	stw	r5,-24(fp)
81102450:	e1bffb15 	stw	r6,-20(fp)
81102454:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
81102458:	00e04534 	movhi	r3,33044
8110245c:	18faec04 	addi	r3,r3,-5200
81102460:	00a04534 	movhi	r2,33044
81102464:	10a9e004 	addi	r2,r2,-22656
81102468:	1009883a 	mov	r4,r2
8110246c:	00800b84 	movi	r2,46
81102470:	100d883a 	mov	r6,r2
81102474:	200b883a 	mov	r5,r4
81102478:	1809883a 	mov	r4,r3
8110247c:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
81102480:	d0a04d17 	ldw	r2,-32460(gp)
81102484:	01604534 	movhi	r5,33044
81102488:	297aec04 	addi	r5,r5,-5200
8110248c:	1009883a 	mov	r4,r2
81102490:	110fea80 	call	8110fea8 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102494:	00800044 	movi	r2,1
81102498:	e0bfef15 	stw	r2,-68(fp)
	switch (ucMemoryId) {
8110249c:	e0bff903 	ldbu	r2,-28(fp)
811024a0:	10c00060 	cmpeqi	r3,r2,1
811024a4:	1800031e 	bne	r3,zero,811024b4 <bDdr2MemoryRandomReadTest+0x94>
811024a8:	108000a0 	cmpeqi	r2,r2,2
811024ac:	1000081e 	bne	r2,zero,811024d0 <bDdr2MemoryRandomReadTest+0xb0>
811024b0:	00000e06 	br	811024ec <bDdr2MemoryRandomReadTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811024b4:	e0bff903 	ldbu	r2,-28(fp)
811024b8:	1009883a 	mov	r4,r2
811024bc:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811024c0:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811024c4:	00a00034 	movhi	r2,32768
811024c8:	e0bff115 	stw	r2,-60(fp)
		break;
811024cc:	00001906 	br	81102534 <bDdr2MemoryRandomReadTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811024d0:	e0bff903 	ldbu	r2,-28(fp)
811024d4:	1009883a 	mov	r4,r2
811024d8:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811024dc:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811024e0:	00a00034 	movhi	r2,32768
811024e4:	e0bff115 	stw	r2,-60(fp)
		break;
811024e8:	00001206 	br	81102534 <bDdr2MemoryRandomReadTest+0x114>
	default:
		bSuccess = FALSE;
811024ec:	e03fef15 	stw	zero,-68(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811024f0:	00e04534 	movhi	r3,33044
811024f4:	18faec04 	addi	r3,r3,-5200
811024f8:	00a04534 	movhi	r2,33044
811024fc:	10a76104 	addi	r2,r2,-25212
81102500:	1009883a 	mov	r4,r2
81102504:	00800bc4 	movi	r2,47
81102508:	100d883a 	mov	r6,r2
8110250c:	200b883a 	mov	r5,r4
81102510:	1809883a 	mov	r4,r3
81102514:	1110ea80 	call	81110ea8 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102518:	d0a04d17 	ldw	r2,-32460(gp)
8110251c:	01604534 	movhi	r5,33044
81102520:	297aec04 	addi	r5,r5,-5200
81102524:	1009883a 	mov	r4,r2
81102528:	110fea80 	call	8110fea8 <fprintf>
		;
#endif
		return bSuccess;
8110252c:	e0bfef17 	ldw	r2,-68(fp)
81102530:	0000d906 	br	81102898 <bDdr2MemoryRandomReadTest+0x478>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81102534:	e0bff117 	ldw	r2,-60(fp)
81102538:	1004d53a 	srli	r2,r2,20
8110253c:	100d883a 	mov	r6,r2
81102540:	01604534 	movhi	r5,33044
81102544:	29695a04 	addi	r5,r5,-23192
81102548:	01204534 	movhi	r4,33044
8110254c:	213aec04 	addi	r4,r4,-5200
81102550:	11116100 	call	81111610 <sprintf>
	debug(fp, cDebugBuffer);
81102554:	d0a04d17 	ldw	r2,-32460(gp)
81102558:	01604534 	movhi	r5,33044
8110255c:	297aec04 	addi	r5,r5,-5200
81102560:	1009883a 	mov	r4,r2
81102564:	110fea80 	call	8110fea8 <fprintf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
81102568:	d0a03617 	ldw	r2,-32552(gp)
8110256c:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102570:	e0fff017 	ldw	r3,-64(fp)
81102574:	e0bff117 	ldw	r2,-60(fp)
81102578:	1885883a 	add	r2,r3,r2
8110257c:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102580:	e0fff117 	ldw	r3,-60(fp)
81102584:	00b33374 	movhi	r2,52429
81102588:	10b33344 	addi	r2,r2,-13107
8110258c:	1888383a 	mulxuu	r4,r3,r2
81102590:	1885383a 	mul	r2,r3,r2
81102594:	1025883a 	mov	r18,r2
81102598:	2027883a 	mov	r19,r4
8110259c:	9806d13a 	srli	r3,r19,4
811025a0:	e0bff017 	ldw	r2,-64(fp)
811025a4:	1885883a 	add	r2,r3,r2
811025a8:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
811025ac:	00800144 	movi	r2,5
811025b0:	e0bff405 	stb	r2,-48(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
811025b4:	00e04534 	movhi	r3,33044
811025b8:	18faec04 	addi	r3,r3,-5200
811025bc:	00a04534 	movhi	r2,33044
811025c0:	10a9ec04 	addi	r2,r2,-22608
811025c4:	1009883a 	mov	r4,r2
811025c8:	00800604 	movi	r2,24
811025cc:	100d883a 	mov	r6,r2
811025d0:	200b883a 	mov	r5,r4
811025d4:	1809883a 	mov	r4,r3
811025d8:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
811025dc:	d0a04d17 	ldw	r2,-32460(gp)
811025e0:	01604534 	movhi	r5,33044
811025e4:	297aec04 	addi	r5,r5,-5200
811025e8:	1009883a 	mov	r4,r2
811025ec:	110fea80 	call	8110fea8 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
811025f0:	e0bffa17 	ldw	r2,-24(fp)
811025f4:	10800058 	cmpnei	r2,r2,1
811025f8:	10000a1e 	bne	r2,zero,81102624 <bDdr2MemoryRandomReadTest+0x204>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
811025fc:	01604534 	movhi	r5,33044
81102600:	2969c204 	addi	r5,r5,-22776
81102604:	01204534 	movhi	r4,33044
81102608:	213aec04 	addi	r4,r4,-5200
8110260c:	11116100 	call	81111610 <sprintf>
		debug(fp, cDebugBuffer);
81102610:	d0a04d17 	ldw	r2,-32460(gp)
81102614:	01604534 	movhi	r5,33044
81102618:	297aec04 	addi	r5,r5,-5200
8110261c:	1009883a 	mov	r4,r2
81102620:	110fea80 	call	8110fea8 <fprintf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
81102624:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102628:	d0a06b17 	ldw	r2,-32340(gp)

	TimeStart = alt_nticks();
8110262c:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
81102630:	e0bff017 	ldw	r2,-64(fp)
81102634:	e0bff215 	stw	r2,-56(fp)
81102638:	00003a06 	br	81102724 <bDdr2MemoryRandomReadTest+0x304>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
8110263c:	e0bff804 	addi	r2,fp,-32
81102640:	1009883a 	mov	r4,r2
81102644:	11028bc0 	call	811028bc <uliXorshift32>
81102648:	1007883a 	mov	r3,r2
8110264c:	e0bff217 	ldw	r2,-56(fp)
81102650:	10800017 	ldw	r2,0(r2)
81102654:	18801026 	beq	r3,r2,81102698 <bDdr2MemoryRandomReadTest+0x278>
			bSuccess = FALSE;
81102658:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
8110265c:	e0bffa17 	ldw	r2,-24(fp)
81102660:	10800058 	cmpnei	r2,r2,1
81102664:	10000c1e 	bne	r2,zero,81102698 <bDdr2MemoryRandomReadTest+0x278>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
81102668:	e0bff217 	ldw	r2,-56(fp)
8110266c:	100d883a 	mov	r6,r2
81102670:	01604534 	movhi	r5,33044
81102674:	2969f204 	addi	r5,r5,-22584
81102678:	01204534 	movhi	r4,33044
8110267c:	213aec04 	addi	r4,r4,-5200
81102680:	11116100 	call	81111610 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
81102684:	d0a04d17 	ldw	r2,-32460(gp)
81102688:	01604534 	movhi	r5,33044
8110268c:	297aec04 	addi	r5,r5,-5200
81102690:	1009883a 	mov	r4,r2
81102694:	110fea80 	call	8110fea8 <fprintf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
81102698:	e0bffa17 	ldw	r2,-24(fp)
8110269c:	10800058 	cmpnei	r2,r2,1
811026a0:	10001d1e 	bne	r2,zero,81102718 <bDdr2MemoryRandomReadTest+0x2f8>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
811026a4:	e0bff217 	ldw	r2,-56(fp)
811026a8:	e0fff317 	ldw	r3,-52(fp)
811026ac:	18801a2e 	bgeu	r3,r2,81102718 <bDdr2MemoryRandomReadTest+0x2f8>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
811026b0:	e0bff403 	ldbu	r2,-48(fp)
811026b4:	100d883a 	mov	r6,r2
811026b8:	01604534 	movhi	r5,33044
811026bc:	2969c404 	addi	r5,r5,-22768
811026c0:	01204534 	movhi	r4,33044
811026c4:	213aec04 	addi	r4,r4,-5200
811026c8:	11116100 	call	81111610 <sprintf>
			debug(fp, cDebugBuffer);
811026cc:	d0a04d17 	ldw	r2,-32460(gp)
811026d0:	01604534 	movhi	r5,33044
811026d4:	297aec04 	addi	r5,r5,-5200
811026d8:	1009883a 	mov	r4,r2
811026dc:	110fea80 	call	8110fea8 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
811026e0:	e0fff117 	ldw	r3,-60(fp)
811026e4:	00b33374 	movhi	r2,52429
811026e8:	10b33344 	addi	r2,r2,-13107
811026ec:	1888383a 	mulxuu	r4,r3,r2
811026f0:	1885383a 	mul	r2,r3,r2
811026f4:	1021883a 	mov	r16,r2
811026f8:	2023883a 	mov	r17,r4
811026fc:	8804d13a 	srli	r2,r17,4
81102700:	e0fff317 	ldw	r3,-52(fp)
81102704:	1885883a 	add	r2,r3,r2
81102708:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
8110270c:	e0bff403 	ldbu	r2,-48(fp)
81102710:	10800144 	addi	r2,r2,5
81102714:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
81102718:	e0bff217 	ldw	r2,-56(fp)
8110271c:	10800104 	addi	r2,r2,4
81102720:	e0bff215 	stw	r2,-56(fp)
81102724:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
81102728:	e0bff517 	ldw	r2,-44(fp)
8110272c:	18bfc336 	bltu	r3,r2,8110263c <__reset+0xfb0e263c>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
81102730:	e0bffa17 	ldw	r2,-24(fp)
81102734:	10800058 	cmpnei	r2,r2,1
81102738:	10000a1e 	bne	r2,zero,81102764 <bDdr2MemoryRandomReadTest+0x344>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
8110273c:	01604534 	movhi	r5,33044
81102740:	2969c704 	addi	r5,r5,-22756
81102744:	01204534 	movhi	r4,33044
81102748:	213aec04 	addi	r4,r4,-5200
8110274c:	11116100 	call	81111610 <sprintf>
		debug(fp, cDebugBuffer);
81102750:	d0a04d17 	ldw	r2,-32460(gp)
81102754:	01604534 	movhi	r5,33044
81102758:	297aec04 	addi	r5,r5,-5200
8110275c:	1009883a 	mov	r4,r2
81102760:	110fea80 	call	8110fea8 <fprintf>
#endif
	}

	if (bSuccess) {
81102764:	e0bfef17 	ldw	r2,-68(fp)
81102768:	10003126 	beq	r2,zero,81102830 <bDdr2MemoryRandomReadTest+0x410>
		if (bTime == TRUE) {
8110276c:	e0bffb17 	ldw	r2,-20(fp)
81102770:	10800058 	cmpnei	r2,r2,1
81102774:	1000221e 	bne	r2,zero,81102800 <bDdr2MemoryRandomReadTest+0x3e0>
81102778:	d0e06b17 	ldw	r3,-32340(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8110277c:	e0bff717 	ldw	r2,-36(fp)
81102780:	1885c83a 	sub	r2,r3,r2
81102784:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
81102788:	e13ff617 	ldw	r4,-40(fp)
8110278c:	110f0e40 	call	8110f0e4 <__floatsisf>
81102790:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102794:	d0a06a17 	ldw	r2,-32344(gp)
81102798:	1009883a 	mov	r4,r2
8110279c:	110f2100 	call	8110f210 <__floatunsisf>
811027a0:	1007883a 	mov	r3,r2
811027a4:	180b883a 	mov	r5,r3
811027a8:	8009883a 	mov	r4,r16
811027ac:	110e8980 	call	8110e898 <__divsf3>
811027b0:	1007883a 	mov	r3,r2
811027b4:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
811027b8:	1009883a 	mov	r4,r2
811027bc:	110fa280 	call	8110fa28 <__extendsfdf2>
811027c0:	1009883a 	mov	r4,r2
811027c4:	180b883a 	mov	r5,r3
811027c8:	d9400015 	stw	r5,0(sp)
811027cc:	200f883a 	mov	r7,r4
811027d0:	e1bff117 	ldw	r6,-60(fp)
811027d4:	01604534 	movhi	r5,33044
811027d8:	2969fa04 	addi	r5,r5,-22552
811027dc:	01204534 	movhi	r4,33044
811027e0:	213aec04 	addi	r4,r4,-5200
811027e4:	11116100 	call	81111610 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
811027e8:	d0a04d17 	ldw	r2,-32460(gp)
811027ec:	01604534 	movhi	r5,33044
811027f0:	297aec04 	addi	r5,r5,-5200
811027f4:	1009883a 	mov	r4,r2
811027f8:	110fea80 	call	8110fea8 <fprintf>
811027fc:	00001b06 	br	8110286c <bDdr2MemoryRandomReadTest+0x44c>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
81102800:	e1bff117 	ldw	r6,-60(fp)
81102804:	01604534 	movhi	r5,33044
81102808:	296a0604 	addi	r5,r5,-22504
8110280c:	01204534 	movhi	r4,33044
81102810:	213aec04 	addi	r4,r4,-5200
81102814:	11116100 	call	81111610 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
81102818:	d0a04d17 	ldw	r2,-32460(gp)
8110281c:	01604534 	movhi	r5,33044
81102820:	297aec04 	addi	r5,r5,-5200
81102824:	1009883a 	mov	r4,r2
81102828:	110fea80 	call	8110fea8 <fprintf>
8110282c:	00000f06 	br	8110286c <bDdr2MemoryRandomReadTest+0x44c>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81102830:	00e04534 	movhi	r3,33044
81102834:	18faec04 	addi	r3,r3,-5200
81102838:	00a04534 	movhi	r2,33044
8110283c:	10a9aa04 	addi	r2,r2,-22872
81102840:	1009883a 	mov	r4,r2
81102844:	00800544 	movi	r2,21
81102848:	100d883a 	mov	r6,r2
8110284c:	200b883a 	mov	r5,r4
81102850:	1809883a 	mov	r4,r3
81102854:	1110ea80 	call	81110ea8 <memcpy>
		debug(fp, cDebugBuffer);
81102858:	d0a04d17 	ldw	r2,-32460(gp)
8110285c:	01604534 	movhi	r5,33044
81102860:	297aec04 	addi	r5,r5,-5200
81102864:	1009883a 	mov	r4,r2
81102868:	110fea80 	call	8110fea8 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8110286c:	00a04534 	movhi	r2,33044
81102870:	10baec04 	addi	r2,r2,-5200
81102874:	00c00284 	movi	r3,10
81102878:	10c00005 	stb	r3,0(r2)
8110287c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102880:	d0a04d17 	ldw	r2,-32460(gp)
81102884:	01604534 	movhi	r5,33044
81102888:	297aec04 	addi	r5,r5,-5200
8110288c:	1009883a 	mov	r4,r2
81102890:	110fea80 	call	8110fea8 <fprintf>
#endif

	return bSuccess;
81102894:	e0bfef17 	ldw	r2,-68(fp)
}
81102898:	e6fffc04 	addi	sp,fp,-16
8110289c:	dfc00517 	ldw	ra,20(sp)
811028a0:	df000417 	ldw	fp,16(sp)
811028a4:	dcc00317 	ldw	r19,12(sp)
811028a8:	dc800217 	ldw	r18,8(sp)
811028ac:	dc400117 	ldw	r17,4(sp)
811028b0:	dc000017 	ldw	r16,0(sp)
811028b4:	dec00604 	addi	sp,sp,24
811028b8:	f800283a 	ret

811028bc <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
811028bc:	defffd04 	addi	sp,sp,-12
811028c0:	de00012e 	bgeu	sp,et,811028c8 <uliXorshift32+0xc>
811028c4:	003b68fa 	trap	3
811028c8:	df000215 	stw	fp,8(sp)
811028cc:	df000204 	addi	fp,sp,8
811028d0:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
811028d4:	e0bfff17 	ldw	r2,-4(fp)
811028d8:	10800017 	ldw	r2,0(r2)
811028dc:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
811028e0:	e0bffe17 	ldw	r2,-8(fp)
811028e4:	1004937a 	slli	r2,r2,13
811028e8:	e0fffe17 	ldw	r3,-8(fp)
811028ec:	1884f03a 	xor	r2,r3,r2
811028f0:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
811028f4:	e0bffe17 	ldw	r2,-8(fp)
811028f8:	1004d47a 	srli	r2,r2,17
811028fc:	e0fffe17 	ldw	r3,-8(fp)
81102900:	1884f03a 	xor	r2,r3,r2
81102904:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
81102908:	e0bffe17 	ldw	r2,-8(fp)
8110290c:	1004917a 	slli	r2,r2,5
81102910:	e0fffe17 	ldw	r3,-8(fp)
81102914:	1884f03a 	xor	r2,r3,r2
81102918:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
8110291c:	e0bfff17 	ldw	r2,-4(fp)
81102920:	e0fffe17 	ldw	r3,-8(fp)
81102924:	10c00015 	stw	r3,0(r2)

	return uliX;
81102928:	e0bffe17 	ldw	r2,-8(fp)
}
8110292c:	e037883a 	mov	sp,fp
81102930:	df000017 	ldw	fp,0(sp)
81102934:	dec00104 	addi	sp,sp,4
81102938:	f800283a 	ret

8110293c <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
8110293c:	defffb04 	addi	sp,sp,-20
81102940:	de00012e 	bgeu	sp,et,81102948 <DMA_OPEN_DEVICE+0xc>
81102944:	003b68fa 	trap	3
81102948:	dfc00415 	stw	ra,16(sp)
8110294c:	df000315 	stw	fp,12(sp)
81102950:	df000304 	addi	fp,sp,12
81102954:	e13ffe15 	stw	r4,-8(fp)
81102958:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
8110295c:	00800044 	movi	r2,1
81102960:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
81102964:	e13fff17 	ldw	r4,-4(fp)
81102968:	11383ec0 	call	811383ec <alt_msgdma_open>
8110296c:	1007883a 	mov	r3,r2
81102970:	e0bffe17 	ldw	r2,-8(fp)
81102974:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
81102978:	e0bffe17 	ldw	r2,-8(fp)
8110297c:	10800017 	ldw	r2,0(r2)
81102980:	1000011e 	bne	r2,zero,81102988 <DMA_OPEN_DEVICE+0x4c>
    bSuccess = FALSE;
81102984:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
81102988:	e0bffd17 	ldw	r2,-12(fp)
}
8110298c:	e037883a 	mov	sp,fp
81102990:	dfc00117 	ldw	ra,4(sp)
81102994:	df000017 	ldw	fp,0(sp)
81102998:	dec00204 	addi	sp,sp,8
8110299c:	f800283a 	ret

811029a0 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
811029a0:	defffc04 	addi	sp,sp,-16
811029a4:	de00012e 	bgeu	sp,et,811029ac <DMA_CONFIG+0xc>
811029a8:	003b68fa 	trap	3
811029ac:	df000315 	stw	fp,12(sp)
811029b0:	df000304 	addi	fp,sp,12
811029b4:	e13ffe15 	stw	r4,-8(fp)
811029b8:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
811029bc:	00800044 	movi	r2,1
811029c0:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
811029c4:	e0bffe17 	ldw	r2,-8(fp)
811029c8:	10800317 	ldw	r2,12(r2)
811029cc:	10800104 	addi	r2,r2,4
811029d0:	e0ffff17 	ldw	r3,-4(fp)
811029d4:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
811029d8:	e0bffd17 	ldw	r2,-12(fp)
}
811029dc:	e037883a 	mov	sp,fp
811029e0:	df000017 	ldw	fp,0(sp)
811029e4:	dec00104 	addi	sp,sp,4
811029e8:	f800283a 	ret

811029ec <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
811029ec:	defffd04 	addi	sp,sp,-12
811029f0:	de00012e 	bgeu	sp,et,811029f8 <DMA_BUSY+0xc>
811029f4:	003b68fa 	trap	3
811029f8:	df000215 	stw	fp,8(sp)
811029fc:	df000204 	addi	fp,sp,8
81102a00:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
81102a04:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81102a08:	e0bfff17 	ldw	r2,-4(fp)
81102a0c:	10800317 	ldw	r2,12(r2)
81102a10:	10800037 	ldwio	r2,0(r2)
81102a14:	1080004c 	andi	r2,r2,1
81102a18:	10000226 	beq	r2,zero,81102a24 <DMA_BUSY+0x38>
    bBusy = TRUE;
81102a1c:	00800044 	movi	r2,1
81102a20:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81102a24:	e0bffe17 	ldw	r2,-8(fp)
}
81102a28:	e037883a 	mov	sp,fp
81102a2c:	df000017 	ldw	fp,0(sp)
81102a30:	dec00104 	addi	sp,sp,4
81102a34:	f800283a 	ret

81102a38 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81102a38:	defffd04 	addi	sp,sp,-12
81102a3c:	de00012e 	bgeu	sp,et,81102a44 <DMA_DESCRIPTOR_BUFFER_FULL+0xc>
81102a40:	003b68fa 	trap	3
81102a44:	df000215 	stw	fp,8(sp)
81102a48:	df000204 	addi	fp,sp,8
81102a4c:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81102a50:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81102a54:	e0bfff17 	ldw	r2,-4(fp)
81102a58:	10800317 	ldw	r2,12(r2)
81102a5c:	10800037 	ldwio	r2,0(r2)
81102a60:	1080010c 	andi	r2,r2,4
81102a64:	10000226 	beq	r2,zero,81102a70 <DMA_DESCRIPTOR_BUFFER_FULL+0x38>
    bFull = TRUE;
81102a68:	00800044 	movi	r2,1
81102a6c:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81102a70:	e0bffe17 	ldw	r2,-8(fp)
}
81102a74:	e037883a 	mov	sp,fp
81102a78:	df000017 	ldw	fp,0(sp)
81102a7c:	dec00104 	addi	sp,sp,4
81102a80:	f800283a 	ret

81102a84 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81102a84:	defffd04 	addi	sp,sp,-12
81102a88:	de00012e 	bgeu	sp,et,81102a90 <DMA_DESCRIPTOR_BUFFER_EMPTY+0xc>
81102a8c:	003b68fa 	trap	3
81102a90:	df000215 	stw	fp,8(sp)
81102a94:	df000204 	addi	fp,sp,8
81102a98:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81102a9c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81102aa0:	e0bfff17 	ldw	r2,-4(fp)
81102aa4:	10800317 	ldw	r2,12(r2)
81102aa8:	10800037 	ldwio	r2,0(r2)
81102aac:	1080008c 	andi	r2,r2,2
81102ab0:	10000226 	beq	r2,zero,81102abc <DMA_DESCRIPTOR_BUFFER_EMPTY+0x38>
    bEmpty = TRUE;
81102ab4:	00800044 	movi	r2,1
81102ab8:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81102abc:	e0bffe17 	ldw	r2,-8(fp)
}
81102ac0:	e037883a 	mov	sp,fp
81102ac4:	df000017 	ldw	fp,0(sp)
81102ac8:	dec00104 	addi	sp,sp,4
81102acc:	f800283a 	ret

81102ad0 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102ad0:	defffa04 	addi	sp,sp,-24
81102ad4:	de00012e 	bgeu	sp,et,81102adc <DMA_DISPATCHER_STOP+0xc>
81102ad8:	003b68fa 	trap	3
81102adc:	dfc00515 	stw	ra,20(sp)
81102ae0:	df000415 	stw	fp,16(sp)
81102ae4:	df000404 	addi	fp,sp,16
81102ae8:	e13ffd15 	stw	r4,-12(fp)
81102aec:	e17ffe15 	stw	r5,-8(fp)
81102af0:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102af4:	00800044 	movi	r2,1
81102af8:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81102afc:	e0bffd17 	ldw	r2,-12(fp)
81102b00:	10800317 	ldw	r2,12(r2)
81102b04:	10800104 	addi	r2,r2,4
81102b08:	00c00044 	movi	r3,1
81102b0c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102b10:	e0bffe17 	ldw	r2,-8(fp)
81102b14:	10800058 	cmpnei	r2,r2,1
81102b18:	10000e1e 	bne	r2,zero,81102b54 <DMA_DISPATCHER_STOP+0x84>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b1c:	00000706 	br	81102b3c <DMA_DISPATCHER_STOP+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102b20:	e0bfff17 	ldw	r2,-4(fp)
81102b24:	1000031e 	bne	r2,zero,81102b34 <DMA_DISPATCHER_STOP+0x64>
        usleep(1);
81102b28:	01000044 	movi	r4,1
81102b2c:	11263700 	call	81126370 <usleep>
81102b30:	00000206 	br	81102b3c <DMA_DISPATCHER_STOP+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102b34:	e13fff17 	ldw	r4,-4(fp)
81102b38:	11263700 	call	81126370 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b3c:	e0bffd17 	ldw	r2,-12(fp)
81102b40:	10800317 	ldw	r2,12(r2)
81102b44:	10800037 	ldwio	r2,0(r2)
81102b48:	1080080c 	andi	r2,r2,32
81102b4c:	103ff41e 	bne	r2,zero,81102b20 <__reset+0xfb0e2b20>
81102b50:	00000206 	br	81102b5c <DMA_DISPATCHER_STOP+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102b54:	e0bffc17 	ldw	r2,-16(fp)
81102b58:	00000106 	br	81102b60 <DMA_DISPATCHER_STOP+0x90>
  }
  
  return bSuccess;
81102b5c:	e0bffc17 	ldw	r2,-16(fp)
}
81102b60:	e037883a 	mov	sp,fp
81102b64:	dfc00117 	ldw	ra,4(sp)
81102b68:	df000017 	ldw	fp,0(sp)
81102b6c:	dec00204 	addi	sp,sp,8
81102b70:	f800283a 	ret

81102b74 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102b74:	defffa04 	addi	sp,sp,-24
81102b78:	de00012e 	bgeu	sp,et,81102b80 <DMA_DISPATCHER_RESET+0xc>
81102b7c:	003b68fa 	trap	3
81102b80:	dfc00515 	stw	ra,20(sp)
81102b84:	df000415 	stw	fp,16(sp)
81102b88:	df000404 	addi	fp,sp,16
81102b8c:	e13ffd15 	stw	r4,-12(fp)
81102b90:	e17ffe15 	stw	r5,-8(fp)
81102b94:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102b98:	00800044 	movi	r2,1
81102b9c:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81102ba0:	e0bffd17 	ldw	r2,-12(fp)
81102ba4:	10800317 	ldw	r2,12(r2)
81102ba8:	10800104 	addi	r2,r2,4
81102bac:	00c00084 	movi	r3,2
81102bb0:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102bb4:	e0bffe17 	ldw	r2,-8(fp)
81102bb8:	10800058 	cmpnei	r2,r2,1
81102bbc:	10000e1e 	bne	r2,zero,81102bf8 <DMA_DISPATCHER_RESET+0x84>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102bc0:	00000706 	br	81102be0 <DMA_DISPATCHER_RESET+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102bc4:	e0bfff17 	ldw	r2,-4(fp)
81102bc8:	1000031e 	bne	r2,zero,81102bd8 <DMA_DISPATCHER_RESET+0x64>
        usleep(1);
81102bcc:	01000044 	movi	r4,1
81102bd0:	11263700 	call	81126370 <usleep>
81102bd4:	00000206 	br	81102be0 <DMA_DISPATCHER_RESET+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102bd8:	e13fff17 	ldw	r4,-4(fp)
81102bdc:	11263700 	call	81126370 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102be0:	e0bffd17 	ldw	r2,-12(fp)
81102be4:	10800317 	ldw	r2,12(r2)
81102be8:	10800037 	ldwio	r2,0(r2)
81102bec:	1080100c 	andi	r2,r2,64
81102bf0:	103ff41e 	bne	r2,zero,81102bc4 <__reset+0xfb0e2bc4>
81102bf4:	00000206 	br	81102c00 <DMA_DISPATCHER_RESET+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102bf8:	e0bffc17 	ldw	r2,-16(fp)
81102bfc:	00000106 	br	81102c04 <DMA_DISPATCHER_RESET+0x90>
  }
  
  return bSuccess;
81102c00:	e0bffc17 	ldw	r2,-16(fp)
}
81102c04:	e037883a 	mov	sp,fp
81102c08:	dfc00117 	ldw	ra,4(sp)
81102c0c:	df000017 	ldw	fp,0(sp)
81102c10:	dec00204 	addi	sp,sp,8
81102c14:	f800283a 	ret

81102c18 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102c18:	defff604 	addi	sp,sp,-40
81102c1c:	de00012e 	bgeu	sp,et,81102c24 <DMA_SINGLE_TRANSFER+0xc>
81102c20:	003b68fa 	trap	3
81102c24:	dfc00915 	stw	ra,36(sp)
81102c28:	df000815 	stw	fp,32(sp)
81102c2c:	dc000715 	stw	r16,28(sp)
81102c30:	df000804 	addi	fp,sp,32
81102c34:	e13ffb15 	stw	r4,-20(fp)
81102c38:	e17ffc15 	stw	r5,-16(fp)
81102c3c:	e1bffd15 	stw	r6,-12(fp)
81102c40:	e1fffe15 	stw	r7,-8(fp)
81102c44:	defff804 	addi	sp,sp,-32
81102c48:	d8800204 	addi	r2,sp,8
81102c4c:	108003c4 	addi	r2,r2,15
81102c50:	1004d13a 	srli	r2,r2,4
81102c54:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102c58:	00800044 	movi	r2,1
81102c5c:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81102c60:	e0fffc17 	ldw	r3,-16(fp)
81102c64:	e13ffd17 	ldw	r4,-12(fp)
81102c68:	e0800217 	ldw	r2,8(fp)
81102c6c:	d8800115 	stw	r2,4(sp)
81102c70:	e0bffe17 	ldw	r2,-8(fp)
81102c74:	d8800015 	stw	r2,0(sp)
81102c78:	200f883a 	mov	r7,r4
81102c7c:	180d883a 	mov	r6,r3
81102c80:	800b883a 	mov	r5,r16
81102c84:	e13ffb17 	ldw	r4,-20(fp)
81102c88:	11373e80 	call	811373e8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102c8c:	10000326 	beq	r2,zero,81102c9c <DMA_SINGLE_TRANSFER+0x84>
    bSuccess = FALSE;
81102c90:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81102c94:	e0bffa17 	ldw	r2,-24(fp)
81102c98:	00001d06 	br	81102d10 <DMA_SINGLE_TRANSFER+0xf8>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102c9c:	800b883a 	mov	r5,r16
81102ca0:	e13ffb17 	ldw	r4,-20(fp)
81102ca4:	113865c0 	call	8113865c <alt_msgdma_standard_descriptor_async_transfer>
81102ca8:	10000326 	beq	r2,zero,81102cb8 <DMA_SINGLE_TRANSFER+0xa0>
      bSuccess = FALSE;
81102cac:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81102cb0:	e0bffa17 	ldw	r2,-24(fp)
81102cb4:	00001606 	br	81102d10 <DMA_SINGLE_TRANSFER+0xf8>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102cb8:	e0bffa17 	ldw	r2,-24(fp)
81102cbc:	10800060 	cmpeqi	r2,r2,1
81102cc0:	1007883a 	mov	r3,r2
81102cc4:	e0800317 	ldw	r2,12(fp)
81102cc8:	10800060 	cmpeqi	r2,r2,1
81102ccc:	1884703a 	and	r2,r3,r2
81102cd0:	10803fcc 	andi	r2,r2,255
81102cd4:	10000d26 	beq	r2,zero,81102d0c <DMA_SINGLE_TRANSFER+0xf4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102cd8:	00000706 	br	81102cf8 <DMA_SINGLE_TRANSFER+0xe0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102cdc:	e0800417 	ldw	r2,16(fp)
81102ce0:	1000031e 	bne	r2,zero,81102cf0 <DMA_SINGLE_TRANSFER+0xd8>
        usleep(1000);
81102ce4:	0100fa04 	movi	r4,1000
81102ce8:	11263700 	call	81126370 <usleep>
81102cec:	00000206 	br	81102cf8 <DMA_SINGLE_TRANSFER+0xe0>
      } else {
        usleep(WaitPeriodUs);
81102cf0:	e1000417 	ldw	r4,16(fp)
81102cf4:	11263700 	call	81126370 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102cf8:	e0bffb17 	ldw	r2,-20(fp)
81102cfc:	10800317 	ldw	r2,12(r2)
81102d00:	10800037 	ldwio	r2,0(r2)
81102d04:	1080004c 	andi	r2,r2,1
81102d08:	103ff41e 	bne	r2,zero,81102cdc <__reset+0xfb0e2cdc>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102d0c:	e0bffa17 	ldw	r2,-24(fp)
}
81102d10:	e6ffff04 	addi	sp,fp,-4
81102d14:	dfc00217 	ldw	ra,8(sp)
81102d18:	df000117 	ldw	fp,4(sp)
81102d1c:	dc000017 	ldw	r16,0(sp)
81102d20:	dec00304 	addi	sp,sp,12
81102d24:	f800283a 	ret

81102d28 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102d28:	defff504 	addi	sp,sp,-44
81102d2c:	de00012e 	bgeu	sp,et,81102d34 <DMA_MULTIPLE_TRANSFER+0xc>
81102d30:	003b68fa 	trap	3
81102d34:	dfc00a15 	stw	ra,40(sp)
81102d38:	df000915 	stw	fp,36(sp)
81102d3c:	dc000815 	stw	r16,32(sp)
81102d40:	df000904 	addi	fp,sp,36
81102d44:	e13ffb15 	stw	r4,-20(fp)
81102d48:	e17ffc15 	stw	r5,-16(fp)
81102d4c:	e1bffd15 	stw	r6,-12(fp)
81102d50:	3805883a 	mov	r2,r7
81102d54:	e0bffe05 	stb	r2,-8(fp)
81102d58:	defff804 	addi	sp,sp,-32
81102d5c:	d8800204 	addi	r2,sp,8
81102d60:	108003c4 	addi	r2,r2,15
81102d64:	1004d13a 	srli	r2,r2,4
81102d68:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102d6c:	00800044 	movi	r2,1
81102d70:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81102d74:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102d78:	00002506 	br	81102e10 <DMA_MULTIPLE_TRANSFER+0xe8>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81102d7c:	e0bffa03 	ldbu	r2,-24(fp)
81102d80:	1085883a 	add	r2,r2,r2
81102d84:	1085883a 	add	r2,r2,r2
81102d88:	1007883a 	mov	r3,r2
81102d8c:	e0bffc17 	ldw	r2,-16(fp)
81102d90:	10c5883a 	add	r2,r2,r3
81102d94:	10800017 	ldw	r2,0(r2)
81102d98:	1009883a 	mov	r4,r2
81102d9c:	e0bffa03 	ldbu	r2,-24(fp)
81102da0:	1085883a 	add	r2,r2,r2
81102da4:	1085883a 	add	r2,r2,r2
81102da8:	1007883a 	mov	r3,r2
81102dac:	e0bffd17 	ldw	r2,-12(fp)
81102db0:	10c5883a 	add	r2,r2,r3
81102db4:	10800017 	ldw	r2,0(r2)
81102db8:	1007883a 	mov	r3,r2
81102dbc:	e0800317 	ldw	r2,12(fp)
81102dc0:	10804034 	orhi	r2,r2,256
81102dc4:	d8800115 	stw	r2,4(sp)
81102dc8:	e0800217 	ldw	r2,8(fp)
81102dcc:	d8800015 	stw	r2,0(sp)
81102dd0:	180f883a 	mov	r7,r3
81102dd4:	200d883a 	mov	r6,r4
81102dd8:	800b883a 	mov	r5,r16
81102ddc:	e13ffb17 	ldw	r4,-20(fp)
81102de0:	11373e80 	call	811373e8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102de4:	10000226 	beq	r2,zero,81102df0 <DMA_MULTIPLE_TRANSFER+0xc8>
      bSuccess = FALSE;
81102de8:	e03ff915 	stw	zero,-28(fp)
81102dec:	00000506 	br	81102e04 <DMA_MULTIPLE_TRANSFER+0xdc>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102df0:	800b883a 	mov	r5,r16
81102df4:	e13ffb17 	ldw	r4,-20(fp)
81102df8:	113865c0 	call	8113865c <alt_msgdma_standard_descriptor_async_transfer>
81102dfc:	10000126 	beq	r2,zero,81102e04 <DMA_MULTIPLE_TRANSFER+0xdc>
        bSuccess = FALSE;
81102e00:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81102e04:	e0bffa03 	ldbu	r2,-24(fp)
81102e08:	10800044 	addi	r2,r2,1
81102e0c:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102e10:	e0bff917 	ldw	r2,-28(fp)
81102e14:	10800060 	cmpeqi	r2,r2,1
81102e18:	1009883a 	mov	r4,r2
81102e1c:	e0fffa03 	ldbu	r3,-24(fp)
81102e20:	e0bffe03 	ldbu	r2,-8(fp)
81102e24:	10bfffc4 	addi	r2,r2,-1
81102e28:	1884803a 	cmplt	r2,r3,r2
81102e2c:	2084703a 	and	r2,r4,r2
81102e30:	10803fcc 	andi	r2,r2,255
81102e34:	103fd11e 	bne	r2,zero,81102d7c <__reset+0xfb0e2d7c>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81102e38:	e0bff917 	ldw	r2,-28(fp)
81102e3c:	10800058 	cmpnei	r2,r2,1
81102e40:	1000211e 	bne	r2,zero,81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81102e44:	e0bffa03 	ldbu	r2,-24(fp)
81102e48:	1085883a 	add	r2,r2,r2
81102e4c:	1085883a 	add	r2,r2,r2
81102e50:	1007883a 	mov	r3,r2
81102e54:	e0bffc17 	ldw	r2,-16(fp)
81102e58:	10c5883a 	add	r2,r2,r3
81102e5c:	10800017 	ldw	r2,0(r2)
81102e60:	1009883a 	mov	r4,r2
81102e64:	e0bffa03 	ldbu	r2,-24(fp)
81102e68:	1085883a 	add	r2,r2,r2
81102e6c:	1085883a 	add	r2,r2,r2
81102e70:	1007883a 	mov	r3,r2
81102e74:	e0bffd17 	ldw	r2,-12(fp)
81102e78:	10c5883a 	add	r2,r2,r3
81102e7c:	10800017 	ldw	r2,0(r2)
81102e80:	1007883a 	mov	r3,r2
81102e84:	e0800317 	ldw	r2,12(fp)
81102e88:	d8800115 	stw	r2,4(sp)
81102e8c:	e0800217 	ldw	r2,8(fp)
81102e90:	d8800015 	stw	r2,0(sp)
81102e94:	180f883a 	mov	r7,r3
81102e98:	200d883a 	mov	r6,r4
81102e9c:	800b883a 	mov	r5,r16
81102ea0:	e13ffb17 	ldw	r4,-20(fp)
81102ea4:	11373e80 	call	811373e8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102ea8:	10000226 	beq	r2,zero,81102eb4 <DMA_MULTIPLE_TRANSFER+0x18c>
      bSuccess = FALSE;
81102eac:	e03ff915 	stw	zero,-28(fp)
81102eb0:	00000506 	br	81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102eb4:	800b883a 	mov	r5,r16
81102eb8:	e13ffb17 	ldw	r4,-20(fp)
81102ebc:	113865c0 	call	8113865c <alt_msgdma_standard_descriptor_async_transfer>
81102ec0:	10000126 	beq	r2,zero,81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
        bSuccess = FALSE;
81102ec4:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102ec8:	e0bff917 	ldw	r2,-28(fp)
81102ecc:	10800060 	cmpeqi	r2,r2,1
81102ed0:	1007883a 	mov	r3,r2
81102ed4:	e0800417 	ldw	r2,16(fp)
81102ed8:	10800060 	cmpeqi	r2,r2,1
81102edc:	1884703a 	and	r2,r3,r2
81102ee0:	10803fcc 	andi	r2,r2,255
81102ee4:	10000d26 	beq	r2,zero,81102f1c <DMA_MULTIPLE_TRANSFER+0x1f4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102ee8:	00000706 	br	81102f08 <DMA_MULTIPLE_TRANSFER+0x1e0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102eec:	e0800517 	ldw	r2,20(fp)
81102ef0:	1000031e 	bne	r2,zero,81102f00 <DMA_MULTIPLE_TRANSFER+0x1d8>
    	usleep(1000);
81102ef4:	0100fa04 	movi	r4,1000
81102ef8:	11263700 	call	81126370 <usleep>
81102efc:	00000206 	br	81102f08 <DMA_MULTIPLE_TRANSFER+0x1e0>
      } else {
    	usleep(WaitPeriodUs);
81102f00:	e1000517 	ldw	r4,20(fp)
81102f04:	11263700 	call	81126370 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f08:	e0bffb17 	ldw	r2,-20(fp)
81102f0c:	10800317 	ldw	r2,12(r2)
81102f10:	10800037 	ldwio	r2,0(r2)
81102f14:	1080004c 	andi	r2,r2,1
81102f18:	103ff41e 	bne	r2,zero,81102eec <__reset+0xfb0e2eec>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102f1c:	e0bff917 	ldw	r2,-28(fp)
}
81102f20:	e6ffff04 	addi	sp,fp,-4
81102f24:	dfc00217 	ldw	ra,8(sp)
81102f28:	df000117 	ldw	fp,4(sp)
81102f2c:	dc000017 	ldw	r16,0(sp)
81102f30:	dec00304 	addi	sp,sp,12
81102f34:	f800283a 	ret

81102f38 <POWER_Read>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]) {
81102f38:	deffef04 	addi	sp,sp,-68
81102f3c:	de00012e 	bgeu	sp,et,81102f44 <POWER_Read+0xc>
81102f40:	003b68fa 	trap	3
81102f44:	dfc01015 	stw	ra,64(sp)
81102f48:	df000f15 	stw	fp,60(sp)
81102f4c:	df000f04 	addi	fp,sp,60
81102f50:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = TRUE;
81102f54:	00800044 	movi	r2,1
81102f58:	e0bff315 	stw	r2,-52(fp)
	int i, c, nPortIndex = 0;
81102f5c:	e03ff615 	stw	zero,-40(fp)
	int szPortNum[] = { POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM };
81102f60:	00800204 	movi	r2,8
81102f64:	e0bffc15 	stw	r2,-16(fp)
81102f68:	00800104 	movi	r2,4
81102f6c:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
81102f70:	00800044 	movi	r2,1
81102f74:	e0bff715 	stw	r2,-36(fp)
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
81102f78:	00800044 	movi	r2,1
81102f7c:	e0bff815 	stw	r2,-32(fp)
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
81102f80:	e03ff915 	stw	zero,-28(fp)
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102f84:	e03ff515 	stw	zero,-44(fp)
81102f88:	00009206 	br	811031d4 <POWER_Read+0x29c>
		NextChannel = 0;
81102f8c:	e03ffa05 	stb	zero,-24(fp)
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81102f90:	e0bff517 	ldw	r2,-44(fp)
81102f94:	10c03fcc 	andi	r3,r2,255
81102f98:	e13ffa03 	ldbu	r4,-24(fp)
81102f9c:	e0bfff17 	ldw	r2,-4(fp)
81102fa0:	d8800115 	stw	r2,4(sp)
81102fa4:	e0bff917 	ldw	r2,-28(fp)
81102fa8:	d8800015 	stw	r2,0(sp)
81102fac:	e1fff817 	ldw	r7,-32(fp)
81102fb0:	e1bff717 	ldw	r6,-36(fp)
81102fb4:	200b883a 	mov	r5,r4
81102fb8:	1809883a 	mov	r4,r3
81102fbc:	1106cc80 	call	81106cc8 <POWER_SPI_RW>
81102fc0:	e0bff315 	stw	r2,-52(fp)
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81102fc4:	e03ff415 	stw	zero,-48(fp)
81102fc8:	00007406 	br	8110319c <POWER_Read+0x264>
			NextChannel = i + 1;
81102fcc:	e0bff417 	ldw	r2,-48(fp)
81102fd0:	10800044 	addi	r2,r2,1
81102fd4:	e0bffa05 	stb	r2,-24(fp)
			bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81102fd8:	e0bff517 	ldw	r2,-44(fp)
81102fdc:	10c03fcc 	andi	r3,r2,255
81102fe0:	e13ffa03 	ldbu	r4,-24(fp)
81102fe4:	e0bffe04 	addi	r2,fp,-8
81102fe8:	d8800115 	stw	r2,4(sp)
81102fec:	e0bff917 	ldw	r2,-28(fp)
81102ff0:	d8800015 	stw	r2,0(sp)
81102ff4:	e1fff817 	ldw	r7,-32(fp)
81102ff8:	e1bff717 	ldw	r6,-36(fp)
81102ffc:	200b883a 	mov	r5,r4
81103000:	1809883a 	mov	r4,r3
81103004:	1106cc80 	call	81106cc8 <POWER_SPI_RW>
81103008:	e0bff315 	stw	r2,-52(fp)
			if (bSuccess) {
8110300c:	e0bff317 	ldw	r2,-52(fp)
81103010:	10005026 	beq	r2,zero,81103154 <POWER_Read+0x21c>
				HEAD = (Value32 >> 30) & 0x03;
81103014:	e0bffe17 	ldw	r2,-8(fp)
81103018:	1004d7ba 	srli	r2,r2,30
8110301c:	e0bffa45 	stb	r2,-23(fp)
				Channel = (Value32 >> 1) & 0x07;
81103020:	e0bffe17 	ldw	r2,-8(fp)
81103024:	1004d07a 	srli	r2,r2,1
81103028:	108001cc 	andi	r2,r2,7
8110302c:	e0bffa85 	stb	r2,-22(fp)
				SIGN = (Value32 >> 4) & 0x01;
81103030:	e0bffe17 	ldw	r2,-8(fp)
81103034:	1004d13a 	srli	r2,r2,4
81103038:	1080004c 	andi	r2,r2,1
8110303c:	e0bffac5 	stb	r2,-21(fp)
				SGL = (Value32 >> 5) & 0x01;
81103040:	e0bffe17 	ldw	r2,-8(fp)
81103044:	1004d17a 	srli	r2,r2,5
81103048:	1080004c 	andi	r2,r2,1
8110304c:	e0bffb05 	stb	r2,-20(fp)
				PARITY = Value32 & 0x01;
81103050:	e0bffe17 	ldw	r2,-8(fp)
81103054:	1080004c 	andi	r2,r2,1
81103058:	e0bffb45 	stb	r2,-19(fp)
				if (HEAD != 0) {
8110305c:	e0bffa43 	ldbu	r2,-23(fp)
81103060:	10000d26 	beq	r2,zero,81103098 <POWER_Read+0x160>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected HEAD\r\n", i);
81103064:	e1bff417 	ldw	r6,-48(fp)
81103068:	01604534 	movhi	r5,33044
8110306c:	296a1004 	addi	r5,r5,-22464
81103070:	01204534 	movhi	r4,33044
81103074:	213aec04 	addi	r4,r4,-5200
81103078:	11116100 	call	81111610 <sprintf>
					debug(fp, cDebugBuffer);
8110307c:	d0a04d17 	ldw	r2,-32460(gp)
81103080:	01604534 	movhi	r5,33044
81103084:	297aec04 	addi	r5,r5,-5200
81103088:	1009883a 	mov	r4,r2
8110308c:	110fea80 	call	8110fea8 <fprintf>
#endif
					bSuccess = FALSE;
81103090:	e03ff315 	stw	zero,-52(fp)
81103094:	00002206 	br	81103120 <POWER_Read+0x1e8>
				} else if (Channel != i) {
81103098:	e0fffa83 	ldbu	r3,-22(fp)
8110309c:	e0bff417 	ldw	r2,-48(fp)
811030a0:	18801026 	beq	r3,r2,811030e4 <POWER_Read+0x1ac>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer,
811030a4:	e0bffa83 	ldbu	r2,-22(fp)
811030a8:	d8800015 	stw	r2,0(sp)
811030ac:	e1fff417 	ldw	r7,-48(fp)
811030b0:	e1bff417 	ldw	r6,-48(fp)
811030b4:	01604534 	movhi	r5,33044
811030b8:	296a1604 	addi	r5,r5,-22440
811030bc:	01204534 	movhi	r4,33044
811030c0:	213aec04 	addi	r4,r4,-5200
811030c4:	11116100 	call	81111610 <sprintf>
							"[%d]Unexpected Channel. Expected:%d, Read:%d\r\n",
							i, i, Channel);
					debug(fp, cDebugBuffer);
811030c8:	d0a04d17 	ldw	r2,-32460(gp)
811030cc:	01604534 	movhi	r5,33044
811030d0:	297aec04 	addi	r5,r5,-5200
811030d4:	1009883a 	mov	r4,r2
811030d8:	110fea80 	call	8110fea8 <fprintf>
#endif
					bSuccess = FALSE;
811030dc:	e03ff315 	stw	zero,-52(fp)
811030e0:	00000f06 	br	81103120 <POWER_Read+0x1e8>
				} else if (SIGN ^ bSIGN) {
811030e4:	e0fffac3 	ldbu	r3,-21(fp)
811030e8:	e0bff817 	ldw	r2,-32(fp)
811030ec:	18800c26 	beq	r3,r2,81103120 <POWER_Read+0x1e8>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected SIGN\r\n", i);
811030f0:	e1bff417 	ldw	r6,-48(fp)
811030f4:	01604534 	movhi	r5,33044
811030f8:	296a2204 	addi	r5,r5,-22392
811030fc:	01204534 	movhi	r4,33044
81103100:	213aec04 	addi	r4,r4,-5200
81103104:	11116100 	call	81111610 <sprintf>
					debug(fp, cDebugBuffer);
81103108:	d0a04d17 	ldw	r2,-32460(gp)
8110310c:	01604534 	movhi	r5,33044
81103110:	297aec04 	addi	r5,r5,-5200
81103114:	1009883a 	mov	r4,r2
81103118:	110fea80 	call	8110fea8 <fprintf>
#endif
					bSuccess = FALSE;
8110311c:	e03ff315 	stw	zero,-52(fp)
					sprintf(cDebugBuffer, "[%d]Unexpected SGL\r\n", i);
					debug(fp, cDebugBuffer);
#endif
					bSuccess = FALSE;
				}
				if (bSuccess)
81103120:	e0bff317 	ldw	r2,-52(fp)
81103124:	10001a26 	beq	r2,zero,81103190 <POWER_Read+0x258>
					szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81103128:	e0bff617 	ldw	r2,-40(fp)
8110312c:	10c00044 	addi	r3,r2,1
81103130:	e0fff615 	stw	r3,-40(fp)
81103134:	1085883a 	add	r2,r2,r2
81103138:	1085883a 	add	r2,r2,r2
8110313c:	1007883a 	mov	r3,r2
81103140:	e0bfff17 	ldw	r2,-4(fp)
81103144:	10c5883a 	add	r2,r2,r3
81103148:	e0fffe17 	ldw	r3,-8(fp)
8110314c:	10c00015 	stw	r3,0(r2)
81103150:	00000f06 	br	81103190 <POWER_Read+0x258>
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "SPI Read Error\r\n");
81103154:	00e04534 	movhi	r3,33044
81103158:	18faec04 	addi	r3,r3,-5200
8110315c:	00a04534 	movhi	r2,33044
81103160:	10aa2804 	addi	r2,r2,-22368
81103164:	1009883a 	mov	r4,r2
81103168:	00800444 	movi	r2,17
8110316c:	100d883a 	mov	r6,r2
81103170:	200b883a 	mov	r5,r4
81103174:	1809883a 	mov	r4,r3
81103178:	1110ea80 	call	81110ea8 <memcpy>
				debug(fp, cDebugBuffer);
8110317c:	d0a04d17 	ldw	r2,-32460(gp)
81103180:	01604534 	movhi	r5,33044
81103184:	297aec04 	addi	r5,r5,-5200
81103188:	1009883a 	mov	r4,r2
8110318c:	110fea80 	call	8110fea8 <fprintf>
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
		NextChannel = 0;
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103190:	e0bff417 	ldw	r2,-48(fp)
81103194:	10800044 	addi	r2,r2,1
81103198:	e0bff415 	stw	r2,-48(fp)
8110319c:	e0bff517 	ldw	r2,-44(fp)
811031a0:	1085883a 	add	r2,r2,r2
811031a4:	1085883a 	add	r2,r2,r2
811031a8:	e0fff304 	addi	r3,fp,-52
811031ac:	1885883a 	add	r2,r3,r2
811031b0:	10800904 	addi	r2,r2,36
811031b4:	10800017 	ldw	r2,0(r2)
811031b8:	e0fff417 	ldw	r3,-48(fp)
811031bc:	1880020e 	bge	r3,r2,811031c8 <POWER_Read+0x290>
811031c0:	e0bff317 	ldw	r2,-52(fp)
811031c4:	103f811e 	bne	r2,zero,81102fcc <__reset+0xfb0e2fcc>
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
811031c8:	e0bff517 	ldw	r2,-44(fp)
811031cc:	10800044 	addi	r2,r2,1
811031d0:	e0bff515 	stw	r2,-44(fp)
811031d4:	e0bff517 	ldw	r2,-44(fp)
811031d8:	10800088 	cmpgei	r2,r2,2
811031dc:	1000021e 	bne	r2,zero,811031e8 <POWER_Read+0x2b0>
811031e0:	e0bff317 	ldw	r2,-52(fp)
811031e4:	103f691e 	bne	r2,zero,81102f8c <__reset+0xfb0e2f8c>
				debug(fp, cDebugBuffer);
#endif
			}
		} // for i
	} // for c
	return bSuccess;
811031e8:	e0bff317 	ldw	r2,-52(fp)
}
811031ec:	e037883a 	mov	sp,fp
811031f0:	dfc00117 	ldw	ra,4(sp)
811031f4:	df000017 	ldw	fp,0(sp)
811031f8:	dec00204 	addi	sp,sp,8
811031fc:	f800283a 	ret

81103200 <TEMP_Read>:

bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp) {
81103200:	defff904 	addi	sp,sp,-28
81103204:	de00012e 	bgeu	sp,et,8110320c <TEMP_Read+0xc>
81103208:	003b68fa 	trap	3
8110320c:	dfc00615 	stw	ra,24(sp)
81103210:	df000515 	stw	fp,20(sp)
81103214:	df000504 	addi	fp,sp,20
81103218:	e13ffe15 	stw	r4,-8(fp)
8110321c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
	const alt_u8 DeviceAddr = 0x30;
81103220:	00800c04 	movi	r2,48
81103224:	e0bffd85 	stb	r2,-10(fp)
	alt_8 FpgaTemp, BoardTemp;
	char Data;

	// read local temp
	bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00,
81103228:	e0bffd83 	ldbu	r2,-10(fp)
8110322c:	10c03fcc 	andi	r3,r2,255
81103230:	18c0201c 	xori	r3,r3,128
81103234:	18ffe004 	addi	r3,r3,-128
81103238:	e0bffdc4 	addi	r2,fp,-9
8110323c:	d8800015 	stw	r2,0(sp)
81103240:	000f883a 	mov	r7,zero
81103244:	180d883a 	mov	r6,r3
81103248:	01600034 	movhi	r5,32768
8110324c:	29426004 	addi	r5,r5,2432
81103250:	01200034 	movhi	r4,32768
81103254:	21026404 	addi	r4,r4,2448
81103258:	1105ac00 	call	81105ac0 <I2C_Read>
8110325c:	e0bffc15 	stw	r2,-16(fp)
			(alt_u8 *) &Data);
	if (bSuccess)
81103260:	e0bffc17 	ldw	r2,-16(fp)
81103264:	10000226 	beq	r2,zero,81103270 <TEMP_Read+0x70>
		BoardTemp = Data;
81103268:	e0bffdc3 	ldbu	r2,-9(fp)
8110326c:	e0bffd45 	stb	r2,-11(fp)

	// read remote temp
	if (bSuccess) {
81103270:	e0bffc17 	ldw	r2,-16(fp)
81103274:	10001226 	beq	r2,zero,811032c0 <TEMP_Read+0xc0>
		bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01,
81103278:	e0bffd83 	ldbu	r2,-10(fp)
8110327c:	10c03fcc 	andi	r3,r2,255
81103280:	18c0201c 	xori	r3,r3,128
81103284:	18ffe004 	addi	r3,r3,-128
81103288:	e0bffdc4 	addi	r2,fp,-9
8110328c:	d8800015 	stw	r2,0(sp)
81103290:	01c00044 	movi	r7,1
81103294:	180d883a 	mov	r6,r3
81103298:	01600034 	movhi	r5,32768
8110329c:	29426004 	addi	r5,r5,2432
811032a0:	01200034 	movhi	r4,32768
811032a4:	21026404 	addi	r4,r4,2448
811032a8:	1105ac00 	call	81105ac0 <I2C_Read>
811032ac:	e0bffc15 	stw	r2,-16(fp)
				(alt_u8 *) &Data);
		if (bSuccess)
811032b0:	e0bffc17 	ldw	r2,-16(fp)
811032b4:	10000226 	beq	r2,zero,811032c0 <TEMP_Read+0xc0>
			FpgaTemp = Data;
811032b8:	e0bffdc3 	ldbu	r2,-9(fp)
811032bc:	e0bffd05 	stb	r2,-12(fp)
	}
	//
	if (bSuccess) {
811032c0:	e0bffc17 	ldw	r2,-16(fp)
811032c4:	10000626 	beq	r2,zero,811032e0 <TEMP_Read+0xe0>
		*pFpgaTemp = FpgaTemp;
811032c8:	e0bffe17 	ldw	r2,-8(fp)
811032cc:	e0fffd03 	ldbu	r3,-12(fp)
811032d0:	10c00005 	stb	r3,0(r2)
		*pBoardTemp = BoardTemp;
811032d4:	e0bfff17 	ldw	r2,-4(fp)
811032d8:	e0fffd43 	ldbu	r3,-11(fp)
811032dc:	10c00005 	stb	r3,0(r2)
	}

	return bSuccess;
811032e0:	e0bffc17 	ldw	r2,-16(fp)
}
811032e4:	e037883a 	mov	sp,fp
811032e8:	dfc00117 	ldw	ra,4(sp)
811032ec:	df000017 	ldw	fp,0(sp)
811032f0:	dec00204 	addi	sp,sp,8
811032f4:	f800283a 	ret

811032f8 <sense_log_temp>:

bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp) {
811032f8:	defffb04 	addi	sp,sp,-20
811032fc:	de00012e 	bgeu	sp,et,81103304 <sense_log_temp+0xc>
81103300:	003b68fa 	trap	3
81103304:	dfc00415 	stw	ra,16(sp)
81103308:	df000315 	stw	fp,12(sp)
8110330c:	df000304 	addi	fp,sp,12
81103310:	e13ffe15 	stw	r4,-8(fp)
81103314:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	// show temp
	bSuccess = TEMP_Read((alt_8*) FpgaTemp, (alt_8*) BoardTemp);
81103318:	e17fff17 	ldw	r5,-4(fp)
8110331c:	e13ffe17 	ldw	r4,-8(fp)
81103320:	11032000 	call	81103200 <TEMP_Read>
81103324:	e0bffd15 	stw	r2,-12(fp)

	return (bSuccess);
81103328:	e0bffd17 	ldw	r2,-12(fp)
}
8110332c:	e037883a 	mov	sp,fp
81103330:	dfc00117 	ldw	ra,4(sp)
81103334:	df000017 	ldw	fp,0(sp)
81103338:	dec00204 	addi	sp,sp,8
8110333c:	f800283a 	ret

81103340 <sense_log>:

void sense_log(void) {
81103340:	deff0404 	addi	sp,sp,-1008
81103344:	de00012e 	bgeu	sp,et,8110334c <sense_log+0xc>
81103348:	003b68fa 	trap	3
8110334c:	dfc0fb15 	stw	ra,1004(sp)
81103350:	df00fa15 	stw	fp,1000(sp)
81103354:	dd40f915 	stw	r21,996(sp)
81103358:	dd00f815 	stw	r20,992(sp)
8110335c:	dcc0f715 	stw	r19,988(sp)
81103360:	dc80f615 	stw	r18,984(sp)
81103364:	dc40f515 	stw	r17,980(sp)
81103368:	dc00f415 	stw	r16,976(sp)
8110336c:	df00fa04 	addi	fp,sp,1000
	bool bSuccess;
	int i;
	const float fRef = 5.0; // 5.0V
81103370:	00902834 	movhi	r2,16544
81103374:	e0bf0e15 	stw	r2,-968(fp)
	float fVolDrop, fCurrent, fPower, fVol;
	alt_u32 szVol[POWER_PORT_NUM];
	alt_u32 SIG, MSB, RESULT;
	float szRes[] = { 0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
81103378:	008ed174 	movhi	r2,15173
8110337c:	10a6e984 	addi	r2,r2,-25690
81103380:	e0bf2215 	stw	r2,-888(fp)
81103384:	008ea0f4 	movhi	r2,14979
81103388:	10849bc4 	addi	r2,r2,4719
8110338c:	e0bf2315 	stw	r2,-884(fp)
81103390:	008ed174 	movhi	r2,15173
81103394:	10a6e984 	addi	r2,r2,-25690
81103398:	e0bf2415 	stw	r2,-880(fp)
8110339c:	008ed174 	movhi	r2,15173
811033a0:	10a6e984 	addi	r2,r2,-25690
811033a4:	e0bf2515 	stw	r2,-876(fp)
811033a8:	008ed174 	movhi	r2,15173
811033ac:	10a6e984 	addi	r2,r2,-25690
811033b0:	e0bf2615 	stw	r2,-872(fp)
811033b4:	008ed174 	movhi	r2,15173
811033b8:	10a6e984 	addi	r2,r2,-25690
811033bc:	e0bf2715 	stw	r2,-868(fp)
811033c0:	008ed174 	movhi	r2,15173
811033c4:	10a6e984 	addi	r2,r2,-25690
811033c8:	e0bf2815 	stw	r2,-864(fp)
811033cc:	008ed174 	movhi	r2,15173
811033d0:	10a6e984 	addi	r2,r2,-25690
811033d4:	e0bf2915 	stw	r2,-860(fp)
811033d8:	008ed174 	movhi	r2,15173
811033dc:	10a6e984 	addi	r2,r2,-25690
811033e0:	e0bf2a15 	stw	r2,-856(fp)
811033e4:	008ed174 	movhi	r2,15173
811033e8:	10a6e984 	addi	r2,r2,-25690
811033ec:	e0bf2b15 	stw	r2,-852(fp)
811033f0:	008ed174 	movhi	r2,15173
811033f4:	10a6e984 	addi	r2,r2,-25690
811033f8:	e0bf2c15 	stw	r2,-848(fp)
811033fc:	008ed174 	movhi	r2,15173
81103400:	10a6e984 	addi	r2,r2,-25690
81103404:	e0bf2d15 	stw	r2,-844(fp)
			0.003, 0.003, 0.003, 0.003 };
	float szRefVol[] = { 0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3,
81103408:	008fd9b4 	movhi	r2,16230
8110340c:	10999984 	addi	r2,r2,26214
81103410:	e0bf2e15 	stw	r2,-840(fp)
81103414:	008fd9b4 	movhi	r2,16230
81103418:	10999984 	addi	r2,r2,26214
8110341c:	e0bf2f15 	stw	r2,-836(fp)
81103420:	00901034 	movhi	r2,16448
81103424:	e0bf3015 	stw	r2,-832(fp)
81103428:	008fd9b4 	movhi	r2,16230
8110342c:	10999984 	addi	r2,r2,26214
81103430:	e0bf3115 	stw	r2,-828(fp)
81103434:	008ff9b4 	movhi	r2,16358
81103438:	10999984 	addi	r2,r2,26214
8110343c:	e0bf3215 	stw	r2,-824(fp)
81103440:	00900834 	movhi	r2,16416
81103444:	e0bf3315 	stw	r2,-820(fp)
81103448:	008ff9b4 	movhi	r2,16358
8110344c:	10999984 	addi	r2,r2,26214
81103450:	e0bf3415 	stw	r2,-816(fp)
81103454:	00900834 	movhi	r2,16416
81103458:	e0bf3515 	stw	r2,-812(fp)
8110345c:	008fe374 	movhi	r2,16269
81103460:	10b33344 	addi	r2,r2,-13107
81103464:	e0bf3615 	stw	r2,-808(fp)
81103468:	008fecf4 	movhi	r2,16307
8110346c:	108cccc4 	addi	r2,r2,13107
81103470:	e0bf3715 	stw	r2,-804(fp)
81103474:	009014f4 	movhi	r2,16467
81103478:	108cccc4 	addi	r2,r2,13107
8110347c:	e0bf3815 	stw	r2,-800(fp)
81103480:	00900834 	movhi	r2,16416
81103484:	e0bf3915 	stw	r2,-796(fp)
			2.5 };
	char szName[][64] = { "VCCD_PLL", "VCC0P9", "GPIO_VCCIOPD", "VCCHIP",
81103488:	00a04534 	movhi	r2,33044
8110348c:	10aa5f04 	addi	r2,r2,-22148
81103490:	e0ff3a04 	addi	r3,fp,-792
81103494:	1009883a 	mov	r4,r2
81103498:	0080c004 	movi	r2,768
8110349c:	100d883a 	mov	r6,r2
811034a0:	200b883a 	mov	r5,r4
811034a4:	1809883a 	mov	r4,r3
811034a8:	1110ea80 	call	81110ea8 <memcpy>
			"VCC1P8_34R", "HSMA_VCCIO", "VCC1P8_78R", "VCCA_PLL", "VCCL_GXB",
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
811034ac:	e0bf1604 	addi	r2,fp,-936
811034b0:	1009883a 	mov	r4,r2
811034b4:	1102f380 	call	81102f38 <POWER_Read>
811034b8:	e0bf0f15 	stw	r2,-964(fp)
	if (bSuccess) {
811034bc:	e0bf0f17 	ldw	r2,-964(fp)
811034c0:	10016026 	beq	r2,zero,81103a44 <sense_log+0x704>
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
811034c4:	e03f0c15 	stw	zero,-976(fp)
811034c8:	00014c06 	br	811039fc <sense_log+0x6bc>
			SIG = (szVol[i] >> 29) & 0x01;
811034cc:	e0bf0c17 	ldw	r2,-976(fp)
811034d0:	1085883a 	add	r2,r2,r2
811034d4:	1085883a 	add	r2,r2,r2
811034d8:	e0ff0c04 	addi	r3,fp,-976
811034dc:	1885883a 	add	r2,r3,r2
811034e0:	10800a04 	addi	r2,r2,40
811034e4:	10800017 	ldw	r2,0(r2)
811034e8:	1004d77a 	srli	r2,r2,29
811034ec:	1080004c 	andi	r2,r2,1
811034f0:	e0bf1015 	stw	r2,-960(fp)
			MSB = (szVol[i] >> 28) & 0x01;
811034f4:	e0bf0c17 	ldw	r2,-976(fp)
811034f8:	1085883a 	add	r2,r2,r2
811034fc:	1085883a 	add	r2,r2,r2
81103500:	e0ff0c04 	addi	r3,fp,-976
81103504:	1885883a 	add	r2,r3,r2
81103508:	10800a04 	addi	r2,r2,40
8110350c:	10800017 	ldw	r2,0(r2)
81103510:	1004d73a 	srli	r2,r2,28
81103514:	1080004c 	andi	r2,r2,1
81103518:	e0bf1115 	stw	r2,-956(fp)
			RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
8110351c:	e0bf0c17 	ldw	r2,-976(fp)
81103520:	1085883a 	add	r2,r2,r2
81103524:	1085883a 	add	r2,r2,r2
81103528:	e0ff0c04 	addi	r3,fp,-976
8110352c:	1885883a 	add	r2,r3,r2
81103530:	10800a04 	addi	r2,r2,40
81103534:	10800017 	ldw	r2,0(r2)
81103538:	1006d1ba 	srli	r3,r2,6
8110353c:	00801034 	movhi	r2,64
81103540:	10bfffc4 	addi	r2,r2,-1
81103544:	1884703a 	and	r2,r3,r2
81103548:	e0bf1215 	stw	r2,-952(fp)
			if (MSB == 0)
8110354c:	e0bf1117 	ldw	r2,-956(fp)
81103550:	1000091e 	bne	r2,zero,81103578 <sense_log+0x238>
				fVolDrop = (float) (RESULT) / (float) 0x400000;
81103554:	e13f1217 	ldw	r4,-952(fp)
81103558:	110f2100 	call	8110f210 <__floatunsisf>
8110355c:	1007883a 	mov	r3,r2
81103560:	0152a034 	movhi	r5,19072
81103564:	1809883a 	mov	r4,r3
81103568:	110e8980 	call	8110e898 <__divsf3>
8110356c:	1007883a 	mov	r3,r2
81103570:	e0ff0d15 	stw	r3,-972(fp)
81103574:	00000106 	br	8110357c <sense_log+0x23c>
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
81103578:	e03f0d15 	stw	zero,-972(fp)
			if (SIG && MSB) {
8110357c:	e0bf1017 	ldw	r2,-960(fp)
81103580:	10002626 	beq	r2,zero,8110361c <sense_log+0x2dc>
81103584:	e0bf1117 	ldw	r2,-956(fp)
81103588:	10002426 	beq	r2,zero,8110361c <sense_log+0x2dc>
				fVol = fRef * 0.5;
8110358c:	014fc034 	movhi	r5,16128
81103590:	e13f0e17 	ldw	r4,-968(fp)
81103594:	110ece00 	call	8110ece0 <__mulsf3>
81103598:	1007883a 	mov	r3,r2
8110359c:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
811035a0:	e0ff3a04 	addi	r3,fp,-792
811035a4:	e0bf0c17 	ldw	r2,-976(fp)
811035a8:	100491ba 	slli	r2,r2,6
811035ac:	18a1883a 	add	r16,r3,r2
811035b0:	e0bf0c17 	ldw	r2,-976(fp)
811035b4:	1085883a 	add	r2,r2,r2
811035b8:	1085883a 	add	r2,r2,r2
811035bc:	e0ff0c04 	addi	r3,fp,-976
811035c0:	1885883a 	add	r2,r3,r2
811035c4:	10800a04 	addi	r2,r2,40
811035c8:	10800017 	ldw	r2,0(r2)
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
			if (SIG && MSB) {
				fVol = fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
811035cc:	1023883a 	mov	r17,r2
811035d0:	e13f1317 	ldw	r4,-948(fp)
811035d4:	110fa280 	call	8110fa28 <__extendsfdf2>
811035d8:	1009883a 	mov	r4,r2
811035dc:	180b883a 	mov	r5,r3
811035e0:	d9000015 	stw	r4,0(sp)
811035e4:	d9400115 	stw	r5,4(sp)
811035e8:	880f883a 	mov	r7,r17
811035ec:	800d883a 	mov	r6,r16
811035f0:	01604534 	movhi	r5,33044
811035f4:	296a2d04 	addi	r5,r5,-22348
811035f8:	01204534 	movhi	r4,33044
811035fc:	213aec04 	addi	r4,r4,-5200
81103600:	11116100 	call	81111610 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103604:	d0a04d17 	ldw	r2,-32460(gp)
81103608:	01604534 	movhi	r5,33044
8110360c:	297aec04 	addi	r5,r5,-5200
81103610:	1009883a 	mov	r4,r2
81103614:	110fea80 	call	8110fea8 <fprintf>
81103618:	0000f506 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (SIG && !MSB) {
8110361c:	e0bf1017 	ldw	r2,-960(fp)
81103620:	10006426 	beq	r2,zero,811037b4 <sense_log+0x474>
81103624:	e0bf1117 	ldw	r2,-956(fp)
81103628:	1000621e 	bne	r2,zero,811037b4 <sense_log+0x474>
				fVol = fRef * 0.5 * fVolDrop;
8110362c:	e13f0e17 	ldw	r4,-968(fp)
81103630:	110fa280 	call	8110fa28 <__extendsfdf2>
81103634:	1011883a 	mov	r8,r2
81103638:	1813883a 	mov	r9,r3
8110363c:	000d883a 	mov	r6,zero
81103640:	01cff834 	movhi	r7,16352
81103644:	4009883a 	mov	r4,r8
81103648:	480b883a 	mov	r5,r9
8110364c:	110f3080 	call	8110f308 <__muldf3>
81103650:	1009883a 	mov	r4,r2
81103654:	180b883a 	mov	r5,r3
81103658:	2021883a 	mov	r16,r4
8110365c:	2823883a 	mov	r17,r5
81103660:	e13f0d17 	ldw	r4,-972(fp)
81103664:	110fa280 	call	8110fa28 <__extendsfdf2>
81103668:	1009883a 	mov	r4,r2
8110366c:	180b883a 	mov	r5,r3
81103670:	200d883a 	mov	r6,r4
81103674:	280f883a 	mov	r7,r5
81103678:	8009883a 	mov	r4,r16
8110367c:	880b883a 	mov	r5,r17
81103680:	110f3080 	call	8110f308 <__muldf3>
81103684:	1009883a 	mov	r4,r2
81103688:	180b883a 	mov	r5,r3
8110368c:	2005883a 	mov	r2,r4
81103690:	2807883a 	mov	r3,r5
81103694:	1009883a 	mov	r4,r2
81103698:	180b883a 	mov	r5,r3
8110369c:	110fb400 	call	8110fb40 <__truncdfsf2>
811036a0:	1007883a 	mov	r3,r2
811036a4:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
811036a8:	e0bf0c17 	ldw	r2,-976(fp)
811036ac:	1085883a 	add	r2,r2,r2
811036b0:	1085883a 	add	r2,r2,r2
811036b4:	e0ff0c04 	addi	r3,fp,-976
811036b8:	1885883a 	add	r2,r3,r2
811036bc:	10801604 	addi	r2,r2,88
811036c0:	10c00017 	ldw	r3,0(r2)
811036c4:	180b883a 	mov	r5,r3
811036c8:	e13f0d17 	ldw	r4,-972(fp)
811036cc:	110e8980 	call	8110e898 <__divsf3>
811036d0:	1007883a 	mov	r3,r2
811036d4:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
811036d8:	e0bf0c17 	ldw	r2,-976(fp)
811036dc:	1085883a 	add	r2,r2,r2
811036e0:	1085883a 	add	r2,r2,r2
811036e4:	e0ff0c04 	addi	r3,fp,-976
811036e8:	1885883a 	add	r2,r3,r2
811036ec:	10802204 	addi	r2,r2,136
811036f0:	10c00017 	ldw	r3,0(r2)
811036f4:	e17f1417 	ldw	r5,-944(fp)
811036f8:	1809883a 	mov	r4,r3
811036fc:	110ece00 	call	8110ece0 <__mulsf3>
81103700:	1007883a 	mov	r3,r2
81103704:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103708:	e0ff3a04 	addi	r3,fp,-792
8110370c:	e0bf0c17 	ldw	r2,-976(fp)
81103710:	100491ba 	slli	r2,r2,6
81103714:	18a9883a 	add	r20,r3,r2
81103718:	e0bf0c17 	ldw	r2,-976(fp)
8110371c:	1085883a 	add	r2,r2,r2
81103720:	1085883a 	add	r2,r2,r2
81103724:	e0ff0c04 	addi	r3,fp,-976
81103728:	1885883a 	add	r2,r3,r2
8110372c:	10800a04 	addi	r2,r2,40
81103730:	10800017 	ldw	r2,0(r2)
			} else if (SIG && !MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81103734:	102b883a 	mov	r21,r2
81103738:	e13f0d17 	ldw	r4,-972(fp)
8110373c:	110fa280 	call	8110fa28 <__extendsfdf2>
81103740:	1021883a 	mov	r16,r2
81103744:	1823883a 	mov	r17,r3
81103748:	e13f1417 	ldw	r4,-944(fp)
8110374c:	110fa280 	call	8110fa28 <__extendsfdf2>
81103750:	1025883a 	mov	r18,r2
81103754:	1827883a 	mov	r19,r3
81103758:	e13f1517 	ldw	r4,-940(fp)
8110375c:	110fa280 	call	8110fa28 <__extendsfdf2>
81103760:	1009883a 	mov	r4,r2
81103764:	180b883a 	mov	r5,r3
81103768:	d9000415 	stw	r4,16(sp)
8110376c:	d9400515 	stw	r5,20(sp)
81103770:	dc800215 	stw	r18,8(sp)
81103774:	dcc00315 	stw	r19,12(sp)
81103778:	dc000015 	stw	r16,0(sp)
8110377c:	dc400115 	stw	r17,4(sp)
81103780:	a80f883a 	mov	r7,r21
81103784:	a00d883a 	mov	r6,r20
81103788:	01604534 	movhi	r5,33044
8110378c:	296a3604 	addi	r5,r5,-22312
81103790:	01204534 	movhi	r4,33044
81103794:	213aec04 	addi	r4,r4,-5200
81103798:	11116100 	call	81111610 <sprintf>
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
8110379c:	d0a04d17 	ldw	r2,-32460(gp)
811037a0:	01604534 	movhi	r5,33044
811037a4:	297aec04 	addi	r5,r5,-5200
811037a8:	1009883a 	mov	r4,r2
811037ac:	110fea80 	call	8110fea8 <fprintf>
811037b0:	00008f06 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (!SIG && MSB) {
811037b4:	e0bf1017 	ldw	r2,-960(fp)
811037b8:	1000641e 	bne	r2,zero,8110394c <sense_log+0x60c>
811037bc:	e0bf1117 	ldw	r2,-956(fp)
811037c0:	10006226 	beq	r2,zero,8110394c <sense_log+0x60c>
				fVol = fRef * 0.5 * fVolDrop;
811037c4:	e13f0e17 	ldw	r4,-968(fp)
811037c8:	110fa280 	call	8110fa28 <__extendsfdf2>
811037cc:	1011883a 	mov	r8,r2
811037d0:	1813883a 	mov	r9,r3
811037d4:	000d883a 	mov	r6,zero
811037d8:	01cff834 	movhi	r7,16352
811037dc:	4009883a 	mov	r4,r8
811037e0:	480b883a 	mov	r5,r9
811037e4:	110f3080 	call	8110f308 <__muldf3>
811037e8:	1009883a 	mov	r4,r2
811037ec:	180b883a 	mov	r5,r3
811037f0:	2021883a 	mov	r16,r4
811037f4:	2823883a 	mov	r17,r5
811037f8:	e13f0d17 	ldw	r4,-972(fp)
811037fc:	110fa280 	call	8110fa28 <__extendsfdf2>
81103800:	1009883a 	mov	r4,r2
81103804:	180b883a 	mov	r5,r3
81103808:	200d883a 	mov	r6,r4
8110380c:	280f883a 	mov	r7,r5
81103810:	8009883a 	mov	r4,r16
81103814:	880b883a 	mov	r5,r17
81103818:	110f3080 	call	8110f308 <__muldf3>
8110381c:	1009883a 	mov	r4,r2
81103820:	180b883a 	mov	r5,r3
81103824:	2005883a 	mov	r2,r4
81103828:	2807883a 	mov	r3,r5
8110382c:	1009883a 	mov	r4,r2
81103830:	180b883a 	mov	r5,r3
81103834:	110fb400 	call	8110fb40 <__truncdfsf2>
81103838:	1007883a 	mov	r3,r2
8110383c:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
81103840:	e0bf0c17 	ldw	r2,-976(fp)
81103844:	1085883a 	add	r2,r2,r2
81103848:	1085883a 	add	r2,r2,r2
8110384c:	e0ff0c04 	addi	r3,fp,-976
81103850:	1885883a 	add	r2,r3,r2
81103854:	10801604 	addi	r2,r2,88
81103858:	10c00017 	ldw	r3,0(r2)
8110385c:	180b883a 	mov	r5,r3
81103860:	e13f0d17 	ldw	r4,-972(fp)
81103864:	110e8980 	call	8110e898 <__divsf3>
81103868:	1007883a 	mov	r3,r2
8110386c:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
81103870:	e0bf0c17 	ldw	r2,-976(fp)
81103874:	1085883a 	add	r2,r2,r2
81103878:	1085883a 	add	r2,r2,r2
8110387c:	e0ff0c04 	addi	r3,fp,-976
81103880:	1885883a 	add	r2,r3,r2
81103884:	10802204 	addi	r2,r2,136
81103888:	10c00017 	ldw	r3,0(r2)
8110388c:	e17f1417 	ldw	r5,-944(fp)
81103890:	1809883a 	mov	r4,r3
81103894:	110ece00 	call	8110ece0 <__mulsf3>
81103898:	1007883a 	mov	r3,r2
8110389c:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
811038a0:	e0ff3a04 	addi	r3,fp,-792
811038a4:	e0bf0c17 	ldw	r2,-976(fp)
811038a8:	100491ba 	slli	r2,r2,6
811038ac:	18a9883a 	add	r20,r3,r2
811038b0:	e0bf0c17 	ldw	r2,-976(fp)
811038b4:	1085883a 	add	r2,r2,r2
811038b8:	1085883a 	add	r2,r2,r2
811038bc:	e0ff0c04 	addi	r3,fp,-976
811038c0:	1885883a 	add	r2,r3,r2
811038c4:	10800a04 	addi	r2,r2,40
811038c8:	10800017 	ldw	r2,0(r2)
			} else if (!SIG && MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811038cc:	102b883a 	mov	r21,r2
811038d0:	e13f0d17 	ldw	r4,-972(fp)
811038d4:	110fa280 	call	8110fa28 <__extendsfdf2>
811038d8:	1021883a 	mov	r16,r2
811038dc:	1823883a 	mov	r17,r3
811038e0:	e13f1417 	ldw	r4,-944(fp)
811038e4:	110fa280 	call	8110fa28 <__extendsfdf2>
811038e8:	1025883a 	mov	r18,r2
811038ec:	1827883a 	mov	r19,r3
811038f0:	e13f1517 	ldw	r4,-940(fp)
811038f4:	110fa280 	call	8110fa28 <__extendsfdf2>
811038f8:	1009883a 	mov	r4,r2
811038fc:	180b883a 	mov	r5,r3
81103900:	d9000415 	stw	r4,16(sp)
81103904:	d9400515 	stw	r5,20(sp)
81103908:	dc800215 	stw	r18,8(sp)
8110390c:	dcc00315 	stw	r19,12(sp)
81103910:	dc000015 	stw	r16,0(sp)
81103914:	dc400115 	stw	r17,4(sp)
81103918:	a80f883a 	mov	r7,r21
8110391c:	a00d883a 	mov	r6,r20
81103920:	01604534 	movhi	r5,33044
81103924:	296a4604 	addi	r5,r5,-22248
81103928:	01204534 	movhi	r4,33044
8110392c:	213aec04 	addi	r4,r4,-5200
81103930:	11116100 	call	81111610 <sprintf>
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
81103934:	d0a04d17 	ldw	r2,-32460(gp)
81103938:	01604534 	movhi	r5,33044
8110393c:	297aec04 	addi	r5,r5,-5200
81103940:	1009883a 	mov	r4,r2
81103944:	110fea80 	call	8110fea8 <fprintf>
81103948:	00002906 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (!SIG && !MSB) {
8110394c:	e0bf1017 	ldw	r2,-960(fp)
81103950:	1000271e 	bne	r2,zero,811039f0 <sense_log+0x6b0>
81103954:	e0bf1117 	ldw	r2,-956(fp)
81103958:	1000251e 	bne	r2,zero,811039f0 <sense_log+0x6b0>
				fVol = -fRef * 0.5;
8110395c:	e0bf0e17 	ldw	r2,-968(fp)
81103960:	10a0003c 	xorhi	r2,r2,32768
81103964:	014fc034 	movhi	r5,16128
81103968:	1009883a 	mov	r4,r2
8110396c:	110ece00 	call	8110ece0 <__mulsf3>
81103970:	1007883a 	mov	r3,r2
81103974:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81103978:	e0ff3a04 	addi	r3,fp,-792
8110397c:	e0bf0c17 	ldw	r2,-976(fp)
81103980:	100491ba 	slli	r2,r2,6
81103984:	18a1883a 	add	r16,r3,r2
81103988:	e0bf0c17 	ldw	r2,-976(fp)
8110398c:	1085883a 	add	r2,r2,r2
81103990:	1085883a 	add	r2,r2,r2
81103994:	e0ff0c04 	addi	r3,fp,-976
81103998:	1885883a 	add	r2,r3,r2
8110399c:	10800a04 	addi	r2,r2,40
811039a0:	10800017 	ldw	r2,0(r2)
				debug(fp, cDebugBuffer);
#endif
			} else if (!SIG && !MSB) {
				fVol = -fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
811039a4:	1023883a 	mov	r17,r2
811039a8:	e13f1317 	ldw	r4,-948(fp)
811039ac:	110fa280 	call	8110fa28 <__extendsfdf2>
811039b0:	1009883a 	mov	r4,r2
811039b4:	180b883a 	mov	r5,r3
811039b8:	d9000015 	stw	r4,0(sp)
811039bc:	d9400115 	stw	r5,4(sp)
811039c0:	880f883a 	mov	r7,r17
811039c4:	800d883a 	mov	r6,r16
811039c8:	01604534 	movhi	r5,33044
811039cc:	296a5604 	addi	r5,r5,-22184
811039d0:	01204534 	movhi	r4,33044
811039d4:	213aec04 	addi	r4,r4,-5200
811039d8:	11116100 	call	81111610 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
811039dc:	d0a04d17 	ldw	r2,-32460(gp)
811039e0:	01604534 	movhi	r5,33044
811039e4:	297aec04 	addi	r5,r5,-5200
811039e8:	1009883a 	mov	r4,r2
811039ec:	110fea80 	call	8110fea8 <fprintf>
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
	if (bSuccess) {
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
811039f0:	e0bf0c17 	ldw	r2,-976(fp)
811039f4:	10800044 	addi	r2,r2,1
811039f8:	e0bf0c15 	stw	r2,-976(fp)
811039fc:	e0bf0c17 	ldw	r2,-976(fp)
81103a00:	10800308 	cmpgei	r2,r2,12
81103a04:	1000021e 	bne	r2,zero,81103a10 <sense_log+0x6d0>
81103a08:	e0bf0f17 	ldw	r2,-964(fp)
81103a0c:	103eaf1e 	bne	r2,zero,811034cc <__reset+0xfb0e34cc>
				debug(fp, cDebugBuffer);
#endif
			}
		}
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "\r\n");
81103a10:	00a04534 	movhi	r2,33044
81103a14:	10baec04 	addi	r2,r2,-5200
81103a18:	00c00344 	movi	r3,13
81103a1c:	10c00005 	stb	r3,0(r2)
81103a20:	00c00284 	movi	r3,10
81103a24:	10c00045 	stb	r3,1(r2)
81103a28:	10000085 	stb	zero,2(r2)
		debug(fp, cDebugBuffer);
81103a2c:	d0a04d17 	ldw	r2,-32460(gp)
81103a30:	01604534 	movhi	r5,33044
81103a34:	297aec04 	addi	r5,r5,-5200
81103a38:	1009883a 	mov	r4,r2
81103a3c:	110fea80 	call	8110fea8 <fprintf>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
		debug(fp, cDebugBuffer);
#endif
	}
}
81103a40:	00001606 	br	81103a9c <sense_log+0x75c>
		sprintf(cDebugBuffer, "\r\n");
		debug(fp, cDebugBuffer);
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
81103a44:	00a04534 	movhi	r2,33044
81103a48:	10baec04 	addi	r2,r2,-5200
81103a4c:	00c01144 	movi	r3,69
81103a50:	10c00005 	stb	r3,0(r2)
81103a54:	00c01c84 	movi	r3,114
81103a58:	10c00045 	stb	r3,1(r2)
81103a5c:	00c01c84 	movi	r3,114
81103a60:	10c00085 	stb	r3,2(r2)
81103a64:	00c01bc4 	movi	r3,111
81103a68:	10c000c5 	stb	r3,3(r2)
81103a6c:	00c01c84 	movi	r3,114
81103a70:	10c00105 	stb	r3,4(r2)
81103a74:	00c00344 	movi	r3,13
81103a78:	10c00145 	stb	r3,5(r2)
81103a7c:	00c00284 	movi	r3,10
81103a80:	10c00185 	stb	r3,6(r2)
81103a84:	100001c5 	stb	zero,7(r2)
		debug(fp, cDebugBuffer);
81103a88:	d0a04d17 	ldw	r2,-32460(gp)
81103a8c:	01604534 	movhi	r5,33044
81103a90:	297aec04 	addi	r5,r5,-5200
81103a94:	1009883a 	mov	r4,r2
81103a98:	110fea80 	call	8110fea8 <fprintf>
#endif
	}
}
81103a9c:	0001883a 	nop
81103aa0:	e6fffa04 	addi	sp,fp,-24
81103aa4:	dfc00717 	ldw	ra,28(sp)
81103aa8:	df000617 	ldw	fp,24(sp)
81103aac:	dd400517 	ldw	r21,20(sp)
81103ab0:	dd000417 	ldw	r20,16(sp)
81103ab4:	dcc00317 	ldw	r19,12(sp)
81103ab8:	dc800217 	ldw	r18,8(sp)
81103abc:	dc400117 	ldw	r17,4(sp)
81103ac0:	dc000017 	ldw	r16,0(sp)
81103ac4:	dec00804 	addi	sp,sp,32
81103ac8:	f800283a 	ret

81103acc <bSdmaInitM1Dma>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
81103acc:	defffc04 	addi	sp,sp,-16
81103ad0:	de00012e 	bgeu	sp,et,81103ad8 <bSdmaInitM1Dma+0xc>
81103ad4:	003b68fa 	trap	3
81103ad8:	dfc00315 	stw	ra,12(sp)
81103adc:	df000215 	stw	fp,8(sp)
81103ae0:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103ae4:	00800044 	movi	r2,1
81103ae8:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103aec:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
81103af0:	01204534 	movhi	r4,33044
81103af4:	212b1f04 	addi	r4,r4,-21380
81103af8:	11383ec0 	call	811383ec <alt_msgdma_open>
81103afc:	d0a03815 	stw	r2,-32544(gp)

	// check if the device was opened
	if (pxDmaM1Dev == NULL) {
81103b00:	d0a03817 	ldw	r2,-32544(gp)
81103b04:	1000021e 	bne	r2,zero,81103b10 <bSdmaInitM1Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103b08:	e03ffe15 	stw	zero,-8(fp)
81103b0c:	00001506 	br	81103b64 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
81103b10:	d0a03817 	ldw	r2,-32544(gp)
81103b14:	10800317 	ldw	r2,12(r2)
81103b18:	10800104 	addi	r2,r2,4
81103b1c:	00c00084 	movi	r3,2
81103b20:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b24:	00000a06 	br	81103b50 <bSdmaInitM1Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103b28:	01000044 	movi	r4,1
81103b2c:	11263700 	call	81126370 <usleep>
			usiCounter++;
81103b30:	e0bfff0b 	ldhu	r2,-4(fp)
81103b34:	10800044 	addi	r2,r2,1
81103b38:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103b3c:	e0bfff0b 	ldhu	r2,-4(fp)
81103b40:	1084e230 	cmpltui	r2,r2,5000
81103b44:	1000021e 	bne	r2,zero,81103b50 <bSdmaInitM1Dma+0x84>
				bStatus = FALSE;
81103b48:	e03ffe15 	stw	zero,-8(fp)
				break;
81103b4c:	00000506 	br	81103b64 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b50:	d0a03817 	ldw	r2,-32544(gp)
81103b54:	10800317 	ldw	r2,12(r2)
81103b58:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103b5c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b60:	103ff11e 	bne	r2,zero,81103b28 <__reset+0xfb0e3b28>
				break;
			}
		}
	}

	return bStatus;
81103b64:	e0bffe17 	ldw	r2,-8(fp)
}
81103b68:	e037883a 	mov	sp,fp
81103b6c:	dfc00117 	ldw	ra,4(sp)
81103b70:	df000017 	ldw	fp,0(sp)
81103b74:	dec00204 	addi	sp,sp,8
81103b78:	f800283a 	ret

81103b7c <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
81103b7c:	defffc04 	addi	sp,sp,-16
81103b80:	de00012e 	bgeu	sp,et,81103b88 <bSdmaInitM2Dma+0xc>
81103b84:	003b68fa 	trap	3
81103b88:	dfc00315 	stw	ra,12(sp)
81103b8c:	df000215 	stw	fp,8(sp)
81103b90:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103b94:	00800044 	movi	r2,1
81103b98:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103b9c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
81103ba0:	01204534 	movhi	r4,33044
81103ba4:	212b2404 	addi	r4,r4,-21360
81103ba8:	11383ec0 	call	811383ec <alt_msgdma_open>
81103bac:	d0a03915 	stw	r2,-32540(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
81103bb0:	d0a03917 	ldw	r2,-32540(gp)
81103bb4:	1000021e 	bne	r2,zero,81103bc0 <bSdmaInitM2Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103bb8:	e03ffe15 	stw	zero,-8(fp)
81103bbc:	00001506 	br	81103c14 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
81103bc0:	d0a03917 	ldw	r2,-32540(gp)
81103bc4:	10800317 	ldw	r2,12(r2)
81103bc8:	10800104 	addi	r2,r2,4
81103bcc:	00c00084 	movi	r3,2
81103bd0:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103bd4:	00000a06 	br	81103c00 <bSdmaInitM2Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103bd8:	01000044 	movi	r4,1
81103bdc:	11263700 	call	81126370 <usleep>
			usiCounter++;
81103be0:	e0bfff0b 	ldhu	r2,-4(fp)
81103be4:	10800044 	addi	r2,r2,1
81103be8:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103bec:	e0bfff0b 	ldhu	r2,-4(fp)
81103bf0:	1084e230 	cmpltui	r2,r2,5000
81103bf4:	1000021e 	bne	r2,zero,81103c00 <bSdmaInitM2Dma+0x84>
				bStatus = FALSE;
81103bf8:	e03ffe15 	stw	zero,-8(fp)
				break;
81103bfc:	00000506 	br	81103c14 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c00:	d0a03917 	ldw	r2,-32540(gp)
81103c04:	10800317 	ldw	r2,12(r2)
81103c08:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103c0c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c10:	103ff11e 	bne	r2,zero,81103bd8 <__reset+0xfb0e3bd8>
				break;
			}
		}
	}

	return bStatus;
81103c14:	e0bffe17 	ldw	r2,-8(fp)
}
81103c18:	e037883a 	mov	sp,fp
81103c1c:	dfc00117 	ldw	ra,4(sp)
81103c20:	df000017 	ldw	fp,0(sp)
81103c24:	dec00204 	addi	sp,sp,8
81103c28:	f800283a 	ret

81103c2c <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
81103c2c:	deffe904 	addi	sp,sp,-92
81103c30:	de00012e 	bgeu	sp,et,81103c38 <bSdmaDmaM1Transfer+0xc>
81103c34:	003b68fa 	trap	3
81103c38:	dfc01615 	stw	ra,88(sp)
81103c3c:	df001515 	stw	fp,84(sp)
81103c40:	dc001415 	stw	r16,80(sp)
81103c44:	df001504 	addi	fp,sp,84
81103c48:	e13ffb15 	stw	r4,-20(fp)
81103c4c:	2809883a 	mov	r4,r5
81103c50:	3007883a 	mov	r3,r6
81103c54:	3805883a 	mov	r2,r7
81103c58:	e13ffc0d 	sth	r4,-16(fp)
81103c5c:	e0fffd05 	stb	r3,-12(fp)
81103c60:	e0bffe05 	stb	r2,-8(fp)
81103c64:	defff004 	addi	sp,sp,-64
81103c68:	d8800904 	addi	r2,sp,36
81103c6c:	108007c4 	addi	r2,r2,31
81103c70:	1004d17a 	srli	r2,r2,5
81103c74:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81103c78:	00800044 	movi	r2,1
81103c7c:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81103c80:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81103c84:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81103c88:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
81103c8c:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103c90:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103c94:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103c98:	e0bffe03 	ldbu	r2,-8(fp)
81103c9c:	10c00268 	cmpgeui	r3,r2,9
81103ca0:	1800a51e 	bne	r3,zero,81103f38 <bSdmaDmaM1Transfer+0x30c>
81103ca4:	100690ba 	slli	r3,r2,2
81103ca8:	00a04434 	movhi	r2,33040
81103cac:	108f2f04 	addi	r2,r2,15548
81103cb0:	1885883a 	add	r2,r3,r2
81103cb4:	10800017 	ldw	r2,0(r2)
81103cb8:	1000683a 	jmp	r2
81103cbc:	81103f38 	rdprs	r4,r16,16636
81103cc0:	81103ce0 	cmpeqi	r4,r16,16627
81103cc4:	81103d24 	muli	r4,r16,16628
81103cc8:	81103d70 	cmpltui	r4,r16,16629
81103ccc:	81103dbc 	xorhi	r4,r16,16630
81103cd0:	81103e08 	cmpgei	r4,r16,16632
81103cd4:	81103e54 	ori	r4,r16,16633
81103cd8:	81103ea0 	cmpeqi	r4,r16,16634
81103cdc:	81103eec 	andhi	r4,r16,16635
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103ce0:	e0bffd03 	ldbu	r2,-12(fp)
81103ce4:	10000326 	beq	r2,zero,81103cf4 <bSdmaDmaM1Transfer+0xc8>
81103ce8:	10800060 	cmpeqi	r2,r2,1
81103cec:	1000051e 	bne	r2,zero,81103d04 <bSdmaDmaM1Transfer+0xd8>
81103cf0:	00000906 	br	81103d18 <bSdmaDmaM1Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103cf4:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103cf8:	00800044 	movi	r2,1
81103cfc:	e0bff715 	stw	r2,-36(fp)
			break;
81103d00:	00000706 	br	81103d20 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103d04:	00800074 	movhi	r2,1
81103d08:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103d0c:	00800044 	movi	r2,1
81103d10:	e0bff715 	stw	r2,-36(fp)
			break;
81103d14:	00000206 	br	81103d20 <bSdmaDmaM1Transfer+0xf4>
		default:
			bStatus = FALSE;
81103d18:	e03ff415 	stw	zero,-48(fp)
			break;
81103d1c:	0001883a 	nop
		}
		break;
81103d20:	00008706 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103d24:	e0bffd03 	ldbu	r2,-12(fp)
81103d28:	10000326 	beq	r2,zero,81103d38 <bSdmaDmaM1Transfer+0x10c>
81103d2c:	10800060 	cmpeqi	r2,r2,1
81103d30:	1000061e 	bne	r2,zero,81103d4c <bSdmaDmaM1Transfer+0x120>
81103d34:	00000b06 	br	81103d64 <bSdmaDmaM1Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103d38:	00880004 	movi	r2,8192
81103d3c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81103d40:	00800044 	movi	r2,1
81103d44:	e0bff715 	stw	r2,-36(fp)
			break;
81103d48:	00000806 	br	81103d6c <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
81103d4c:	00800074 	movhi	r2,1
81103d50:	10880004 	addi	r2,r2,8192
81103d54:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81103d58:	00800044 	movi	r2,1
81103d5c:	e0bff715 	stw	r2,-36(fp)
			break;
81103d60:	00000206 	br	81103d6c <bSdmaDmaM1Transfer+0x140>
		default:
			bStatus = FALSE;
81103d64:	e03ff415 	stw	zero,-48(fp)
			break;
81103d68:	0001883a 	nop
		}
		break;
81103d6c:	00007406 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81103d70:	e0bffd03 	ldbu	r2,-12(fp)
81103d74:	10000326 	beq	r2,zero,81103d84 <bSdmaDmaM1Transfer+0x158>
81103d78:	10800060 	cmpeqi	r2,r2,1
81103d7c:	1000061e 	bne	r2,zero,81103d98 <bSdmaDmaM1Transfer+0x16c>
81103d80:	00000b06 	br	81103db0 <bSdmaDmaM1Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81103d84:	00900004 	movi	r2,16384
81103d88:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
81103d8c:	00800044 	movi	r2,1
81103d90:	e0bff715 	stw	r2,-36(fp)
			break;
81103d94:	00000806 	br	81103db8 <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103d98:	00800074 	movhi	r2,1
81103d9c:	10900004 	addi	r2,r2,16384
81103da0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103da4:	00800044 	movi	r2,1
81103da8:	e0bff715 	stw	r2,-36(fp)
			break;
81103dac:	00000206 	br	81103db8 <bSdmaDmaM1Transfer+0x18c>
		default:
			bStatus = FALSE;
81103db0:	e03ff415 	stw	zero,-48(fp)
			break;
81103db4:	0001883a 	nop
		}
		break;
81103db8:	00006106 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103dbc:	e0bffd03 	ldbu	r2,-12(fp)
81103dc0:	10000326 	beq	r2,zero,81103dd0 <bSdmaDmaM1Transfer+0x1a4>
81103dc4:	10800060 	cmpeqi	r2,r2,1
81103dc8:	1000061e 	bne	r2,zero,81103de4 <bSdmaDmaM1Transfer+0x1b8>
81103dcc:	00000b06 	br	81103dfc <bSdmaDmaM1Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103dd0:	00980004 	movi	r2,24576
81103dd4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103dd8:	00800044 	movi	r2,1
81103ddc:	e0bff715 	stw	r2,-36(fp)
			break;
81103de0:	00000806 	br	81103e04 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103de4:	00800074 	movhi	r2,1
81103de8:	10980004 	addi	r2,r2,24576
81103dec:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103df0:	00800044 	movi	r2,1
81103df4:	e0bff715 	stw	r2,-36(fp)
			break;
81103df8:	00000206 	br	81103e04 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bStatus = FALSE;
81103dfc:	e03ff415 	stw	zero,-48(fp)
			break;
81103e00:	0001883a 	nop
		}
		break;
81103e04:	00004e06 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103e08:	e0bffd03 	ldbu	r2,-12(fp)
81103e0c:	10000326 	beq	r2,zero,81103e1c <bSdmaDmaM1Transfer+0x1f0>
81103e10:	10800060 	cmpeqi	r2,r2,1
81103e14:	1000061e 	bne	r2,zero,81103e30 <bSdmaDmaM1Transfer+0x204>
81103e18:	00000b06 	br	81103e48 <bSdmaDmaM1Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
81103e1c:	00a00014 	movui	r2,32768
81103e20:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103e24:	00800044 	movi	r2,1
81103e28:	e0bff715 	stw	r2,-36(fp)
			break;
81103e2c:	00000806 	br	81103e50 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81103e30:	008000b4 	movhi	r2,2
81103e34:	10a00004 	addi	r2,r2,-32768
81103e38:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
81103e3c:	00800044 	movi	r2,1
81103e40:	e0bff715 	stw	r2,-36(fp)
			break;
81103e44:	00000206 	br	81103e50 <bSdmaDmaM1Transfer+0x224>
		default:
			bStatus = FALSE;
81103e48:	e03ff415 	stw	zero,-48(fp)
			break;
81103e4c:	0001883a 	nop
		}
		break;
81103e50:	00003b06 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81103e54:	e0bffd03 	ldbu	r2,-12(fp)
81103e58:	10000326 	beq	r2,zero,81103e68 <bSdmaDmaM1Transfer+0x23c>
81103e5c:	10800060 	cmpeqi	r2,r2,1
81103e60:	1000061e 	bne	r2,zero,81103e7c <bSdmaDmaM1Transfer+0x250>
81103e64:	00000b06 	br	81103e94 <bSdmaDmaM1Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81103e68:	00a80014 	movui	r2,40960
81103e6c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81103e70:	00800044 	movi	r2,1
81103e74:	e0bff715 	stw	r2,-36(fp)
			break;
81103e78:	00000806 	br	81103e9c <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103e7c:	008000b4 	movhi	r2,2
81103e80:	10a80004 	addi	r2,r2,-24576
81103e84:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103e88:	00800044 	movi	r2,1
81103e8c:	e0bff715 	stw	r2,-36(fp)
			break;
81103e90:	00000206 	br	81103e9c <bSdmaDmaM1Transfer+0x270>
		default:
			bStatus = FALSE;
81103e94:	e03ff415 	stw	zero,-48(fp)
			break;
81103e98:	0001883a 	nop
		}
		break;
81103e9c:	00002806 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103ea0:	e0bffd03 	ldbu	r2,-12(fp)
81103ea4:	10000326 	beq	r2,zero,81103eb4 <bSdmaDmaM1Transfer+0x288>
81103ea8:	10800060 	cmpeqi	r2,r2,1
81103eac:	1000061e 	bne	r2,zero,81103ec8 <bSdmaDmaM1Transfer+0x29c>
81103eb0:	00000b06 	br	81103ee0 <bSdmaDmaM1Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103eb4:	00b00014 	movui	r2,49152
81103eb8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
81103ebc:	00800044 	movi	r2,1
81103ec0:	e0bff715 	stw	r2,-36(fp)
			break;
81103ec4:	00000806 	br	81103ee8 <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103ec8:	008000b4 	movhi	r2,2
81103ecc:	10b00004 	addi	r2,r2,-16384
81103ed0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103ed4:	00800044 	movi	r2,1
81103ed8:	e0bff715 	stw	r2,-36(fp)
			break;
81103edc:	00000206 	br	81103ee8 <bSdmaDmaM1Transfer+0x2bc>
		default:
			bStatus = FALSE;
81103ee0:	e03ff415 	stw	zero,-48(fp)
			break;
81103ee4:	0001883a 	nop
		}
		break;
81103ee8:	00001506 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103eec:	e0bffd03 	ldbu	r2,-12(fp)
81103ef0:	10000326 	beq	r2,zero,81103f00 <bSdmaDmaM1Transfer+0x2d4>
81103ef4:	10800060 	cmpeqi	r2,r2,1
81103ef8:	1000061e 	bne	r2,zero,81103f14 <bSdmaDmaM1Transfer+0x2e8>
81103efc:	00000b06 	br	81103f2c <bSdmaDmaM1Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103f00:	00b80014 	movui	r2,57344
81103f04:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103f08:	00800044 	movi	r2,1
81103f0c:	e0bff715 	stw	r2,-36(fp)
			break;
81103f10:	00000806 	br	81103f34 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103f14:	008000b4 	movhi	r2,2
81103f18:	10b80004 	addi	r2,r2,-8192
81103f1c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103f20:	00800044 	movi	r2,1
81103f24:	e0bff715 	stw	r2,-36(fp)
			break;
81103f28:	00000206 	br	81103f34 <bSdmaDmaM1Transfer+0x308>
		default:
			bStatus = FALSE;
81103f2c:	e03ff415 	stw	zero,-48(fp)
			break;
81103f30:	0001883a 	nop
		}
		break;
81103f34:	00000206 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	default:
		bStatus = FALSE;
81103f38:	e03ff415 	stw	zero,-48(fp)
		break;
81103f3c:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW
81103f40:	e0bffb17 	ldw	r2,-20(fp)
81103f44:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81103f48:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81103f4c:	e0bff417 	ldw	r2,-48(fp)
81103f50:	10003b26 	beq	r2,zero,81104040 <bSdmaDmaM1Transfer+0x414>
		if (pxDmaM1Dev == NULL) {
81103f54:	d0a03817 	ldw	r2,-32544(gp)
81103f58:	1000021e 	bne	r2,zero,81103f64 <bSdmaDmaM1Transfer+0x338>
			bStatus = FALSE;
81103f5c:	e03ff415 	stw	zero,-48(fp)
81103f60:	00003706 	br	81104040 <bSdmaDmaM1Transfer+0x414>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103f64:	e03ff50d 	sth	zero,-44(fp)
81103f68:	00003206 	br	81104034 <bSdmaDmaM1Transfer+0x408>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103f6c:	01000044 	movi	r4,1
81103f70:	11254a00 	call	811254a0 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103f74:	d0a03817 	ldw	r2,-32544(gp)
81103f78:	10800317 	ldw	r2,12(r2)
81103f7c:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81103f80:	1080010c 	andi	r2,r2,4
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103f84:	103ff91e 	bne	r2,zero,81103f6c <__reset+0xfb0e3f6c>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
81103f88:	d2203817 	ldw	r8,-32544(gp)
81103f8c:	e17ff817 	ldw	r5,-32(fp)
81103f90:	e1bff617 	ldw	r6,-40(fp)
81103f94:	e0bff917 	ldw	r2,-28(fp)
81103f98:	e0fff717 	ldw	r3,-36(fp)
81103f9c:	01000044 	movi	r4,1
81103fa0:	d9000815 	stw	r4,32(sp)
81103fa4:	01000044 	movi	r4,1
81103fa8:	d9000715 	stw	r4,28(sp)
81103fac:	01000044 	movi	r4,1
81103fb0:	d9000615 	stw	r4,24(sp)
81103fb4:	01000044 	movi	r4,1
81103fb8:	d9000515 	stw	r4,20(sp)
81103fbc:	01000044 	movi	r4,1
81103fc0:	d9000415 	stw	r4,16(sp)
81103fc4:	d8c00315 	stw	r3,12(sp)
81103fc8:	d8800215 	stw	r2,8(sp)
81103fcc:	e0bffa17 	ldw	r2,-24(fp)
81103fd0:	d8800115 	stw	r2,4(sp)
81103fd4:	00802204 	movi	r2,136
81103fd8:	d8800015 	stw	r2,0(sp)
81103fdc:	300f883a 	mov	r7,r6
81103fe0:	280d883a 	mov	r6,r5
81103fe4:	800b883a 	mov	r5,r16
81103fe8:	4009883a 	mov	r4,r8
81103fec:	1106b800 	call	81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>
81103ff0:	10000226 	beq	r2,zero,81103ffc <bSdmaDmaM1Transfer+0x3d0>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81103ff4:	e03ff415 	stw	zero,-48(fp)
					break;
81103ff8:	00001106 	br	81104040 <bSdmaDmaM1Transfer+0x414>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM1Dev,
81103ffc:	d0a03817 	ldw	r2,-32544(gp)
81104000:	800b883a 	mov	r5,r16
81104004:	1009883a 	mov	r4,r2
81104008:	1106c840 	call	81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>
8110400c:	10000226 	beq	r2,zero,81104018 <bSdmaDmaM1Transfer+0x3ec>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104010:	e03ff415 	stw	zero,-48(fp)
						break;
81104014:	00000a06 	br	81104040 <bSdmaDmaM1Transfer+0x414>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104018:	e0bff817 	ldw	r2,-32(fp)
8110401c:	10802204 	addi	r2,r2,136
81104020:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81104024:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104028:	e0bff50b 	ldhu	r2,-44(fp)
8110402c:	10800044 	addi	r2,r2,1
81104030:	e0bff50d 	sth	r2,-44(fp)
81104034:	e0fff50b 	ldhu	r3,-44(fp)
81104038:	e0bffc0b 	ldhu	r2,-16(fp)
8110403c:	18bfcd36 	bltu	r3,r2,81103f74 <__reset+0xfb0e3f74>
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81104040:	e0bff417 	ldw	r2,-48(fp)
}
81104044:	e6ffff04 	addi	sp,fp,-4
81104048:	dfc00217 	ldw	ra,8(sp)
8110404c:	df000117 	ldw	fp,4(sp)
81104050:	dc000017 	ldw	r16,0(sp)
81104054:	dec00304 	addi	sp,sp,12
81104058:	f800283a 	ret

8110405c <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
8110405c:	deffe904 	addi	sp,sp,-92
81104060:	de00012e 	bgeu	sp,et,81104068 <bSdmaDmaM2Transfer+0xc>
81104064:	003b68fa 	trap	3
81104068:	dfc01615 	stw	ra,88(sp)
8110406c:	df001515 	stw	fp,84(sp)
81104070:	dc001415 	stw	r16,80(sp)
81104074:	df001504 	addi	fp,sp,84
81104078:	e13ffb15 	stw	r4,-20(fp)
8110407c:	2809883a 	mov	r4,r5
81104080:	3007883a 	mov	r3,r6
81104084:	3805883a 	mov	r2,r7
81104088:	e13ffc0d 	sth	r4,-16(fp)
8110408c:	e0fffd05 	stb	r3,-12(fp)
81104090:	e0bffe05 	stb	r2,-8(fp)
81104094:	defff004 	addi	sp,sp,-64
81104098:	d8800904 	addi	r2,sp,36
8110409c:	108007c4 	addi	r2,r2,31
811040a0:	1004d17a 	srli	r2,r2,5
811040a4:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
811040a8:	00800044 	movi	r2,1
811040ac:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
811040b0:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
811040b4:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
811040b8:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
811040bc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
811040c0:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
811040c4:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
811040c8:	e0bffe03 	ldbu	r2,-8(fp)
811040cc:	10c00268 	cmpgeui	r3,r2,9
811040d0:	1800a51e 	bne	r3,zero,81104368 <bSdmaDmaM2Transfer+0x30c>
811040d4:	100690ba 	slli	r3,r2,2
811040d8:	00a04434 	movhi	r2,33040
811040dc:	10903b04 	addi	r2,r2,16620
811040e0:	1885883a 	add	r2,r3,r2
811040e4:	10800017 	ldw	r2,0(r2)
811040e8:	1000683a 	jmp	r2
811040ec:	81104368 	cmpgeui	r4,r16,16653
811040f0:	81104110 	cmplti	r4,r16,16644
811040f4:	81104154 	ori	r4,r16,16645
811040f8:	811041a0 	cmpeqi	r4,r16,16646
811040fc:	811041ec 	andhi	r4,r16,16647
81104100:	81104238 	rdprs	r4,r16,16648
81104104:	81104284 	addi	r4,r16,16650
81104108:	811042d0 	cmplti	r4,r16,16651
8110410c:	8110431c 	xori	r4,r16,16652
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81104110:	e0bffd03 	ldbu	r2,-12(fp)
81104114:	10000326 	beq	r2,zero,81104124 <bSdmaDmaM2Transfer+0xc8>
81104118:	10800060 	cmpeqi	r2,r2,1
8110411c:	1000051e 	bne	r2,zero,81104134 <bSdmaDmaM2Transfer+0xd8>
81104120:	00000906 	br	81104148 <bSdmaDmaM2Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81104124:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81104128:	00800044 	movi	r2,1
8110412c:	e0bff715 	stw	r2,-36(fp)
			break;
81104130:	00000706 	br	81104150 <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81104134:	00800074 	movhi	r2,1
81104138:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
8110413c:	00800044 	movi	r2,1
81104140:	e0bff715 	stw	r2,-36(fp)
			break;
81104144:	00000206 	br	81104150 <bSdmaDmaM2Transfer+0xf4>
		default:
			bStatus = FALSE;
81104148:	e03ff415 	stw	zero,-48(fp)
			break;
8110414c:	0001883a 	nop
		}
		break;
81104150:	00008706 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81104154:	e0bffd03 	ldbu	r2,-12(fp)
81104158:	10000326 	beq	r2,zero,81104168 <bSdmaDmaM2Transfer+0x10c>
8110415c:	10800060 	cmpeqi	r2,r2,1
81104160:	1000061e 	bne	r2,zero,8110417c <bSdmaDmaM2Transfer+0x120>
81104164:	00000b06 	br	81104194 <bSdmaDmaM2Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81104168:	00880004 	movi	r2,8192
8110416c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81104170:	00800044 	movi	r2,1
81104174:	e0bff715 	stw	r2,-36(fp)
			break;
81104178:	00000806 	br	8110419c <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
8110417c:	00800074 	movhi	r2,1
81104180:	10880004 	addi	r2,r2,8192
81104184:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81104188:	00800044 	movi	r2,1
8110418c:	e0bff715 	stw	r2,-36(fp)
			break;
81104190:	00000206 	br	8110419c <bSdmaDmaM2Transfer+0x140>
		default:
			bStatus = FALSE;
81104194:	e03ff415 	stw	zero,-48(fp)
			break;
81104198:	0001883a 	nop
		}
		break;
8110419c:	00007406 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
811041a0:	e0bffd03 	ldbu	r2,-12(fp)
811041a4:	10000326 	beq	r2,zero,811041b4 <bSdmaDmaM2Transfer+0x158>
811041a8:	10800060 	cmpeqi	r2,r2,1
811041ac:	1000061e 	bne	r2,zero,811041c8 <bSdmaDmaM2Transfer+0x16c>
811041b0:	00000b06 	br	811041e0 <bSdmaDmaM2Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
811041b4:	00900004 	movi	r2,16384
811041b8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
811041bc:	00800044 	movi	r2,1
811041c0:	e0bff715 	stw	r2,-36(fp)
			break;
811041c4:	00000806 	br	811041e8 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
811041c8:	00800074 	movhi	r2,1
811041cc:	10900004 	addi	r2,r2,16384
811041d0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
811041d4:	00800044 	movi	r2,1
811041d8:	e0bff715 	stw	r2,-36(fp)
			break;
811041dc:	00000206 	br	811041e8 <bSdmaDmaM2Transfer+0x18c>
		default:
			bStatus = FALSE;
811041e0:	e03ff415 	stw	zero,-48(fp)
			break;
811041e4:	0001883a 	nop
		}
		break;
811041e8:	00006106 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
811041ec:	e0bffd03 	ldbu	r2,-12(fp)
811041f0:	10000326 	beq	r2,zero,81104200 <bSdmaDmaM2Transfer+0x1a4>
811041f4:	10800060 	cmpeqi	r2,r2,1
811041f8:	1000061e 	bne	r2,zero,81104214 <bSdmaDmaM2Transfer+0x1b8>
811041fc:	00000b06 	br	8110422c <bSdmaDmaM2Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81104200:	00980004 	movi	r2,24576
81104204:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81104208:	00800044 	movi	r2,1
8110420c:	e0bff715 	stw	r2,-36(fp)
			break;
81104210:	00000806 	br	81104234 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81104214:	00800074 	movhi	r2,1
81104218:	10980004 	addi	r2,r2,24576
8110421c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81104220:	00800044 	movi	r2,1
81104224:	e0bff715 	stw	r2,-36(fp)
			break;
81104228:	00000206 	br	81104234 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bStatus = FALSE;
8110422c:	e03ff415 	stw	zero,-48(fp)
			break;
81104230:	0001883a 	nop
		}
		break;
81104234:	00004e06 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81104238:	e0bffd03 	ldbu	r2,-12(fp)
8110423c:	10000326 	beq	r2,zero,8110424c <bSdmaDmaM2Transfer+0x1f0>
81104240:	10800060 	cmpeqi	r2,r2,1
81104244:	1000061e 	bne	r2,zero,81104260 <bSdmaDmaM2Transfer+0x204>
81104248:	00000b06 	br	81104278 <bSdmaDmaM2Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
8110424c:	00a00014 	movui	r2,32768
81104250:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81104254:	00800044 	movi	r2,1
81104258:	e0bff715 	stw	r2,-36(fp)
			break;
8110425c:	00000806 	br	81104280 <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81104260:	008000b4 	movhi	r2,2
81104264:	10a00004 	addi	r2,r2,-32768
81104268:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
8110426c:	00800044 	movi	r2,1
81104270:	e0bff715 	stw	r2,-36(fp)
			break;
81104274:	00000206 	br	81104280 <bSdmaDmaM2Transfer+0x224>
		default:
			bStatus = FALSE;
81104278:	e03ff415 	stw	zero,-48(fp)
			break;
8110427c:	0001883a 	nop
		}
		break;
81104280:	00003b06 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81104284:	e0bffd03 	ldbu	r2,-12(fp)
81104288:	10000326 	beq	r2,zero,81104298 <bSdmaDmaM2Transfer+0x23c>
8110428c:	10800060 	cmpeqi	r2,r2,1
81104290:	1000061e 	bne	r2,zero,811042ac <bSdmaDmaM2Transfer+0x250>
81104294:	00000b06 	br	811042c4 <bSdmaDmaM2Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81104298:	00a80014 	movui	r2,40960
8110429c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
811042a0:	00800044 	movi	r2,1
811042a4:	e0bff715 	stw	r2,-36(fp)
			break;
811042a8:	00000806 	br	811042cc <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
811042ac:	008000b4 	movhi	r2,2
811042b0:	10a80004 	addi	r2,r2,-24576
811042b4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
811042b8:	00800044 	movi	r2,1
811042bc:	e0bff715 	stw	r2,-36(fp)
			break;
811042c0:	00000206 	br	811042cc <bSdmaDmaM2Transfer+0x270>
		default:
			bStatus = FALSE;
811042c4:	e03ff415 	stw	zero,-48(fp)
			break;
811042c8:	0001883a 	nop
		}
		break;
811042cc:	00002806 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
811042d0:	e0bffd03 	ldbu	r2,-12(fp)
811042d4:	10000326 	beq	r2,zero,811042e4 <bSdmaDmaM2Transfer+0x288>
811042d8:	10800060 	cmpeqi	r2,r2,1
811042dc:	1000061e 	bne	r2,zero,811042f8 <bSdmaDmaM2Transfer+0x29c>
811042e0:	00000b06 	br	81104310 <bSdmaDmaM2Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
811042e4:	00b00014 	movui	r2,49152
811042e8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
811042ec:	00800044 	movi	r2,1
811042f0:	e0bff715 	stw	r2,-36(fp)
			break;
811042f4:	00000806 	br	81104318 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
811042f8:	008000b4 	movhi	r2,2
811042fc:	10b00004 	addi	r2,r2,-16384
81104300:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81104304:	00800044 	movi	r2,1
81104308:	e0bff715 	stw	r2,-36(fp)
			break;
8110430c:	00000206 	br	81104318 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bStatus = FALSE;
81104310:	e03ff415 	stw	zero,-48(fp)
			break;
81104314:	0001883a 	nop
		}
		break;
81104318:	00001506 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
8110431c:	e0bffd03 	ldbu	r2,-12(fp)
81104320:	10000326 	beq	r2,zero,81104330 <bSdmaDmaM2Transfer+0x2d4>
81104324:	10800060 	cmpeqi	r2,r2,1
81104328:	1000061e 	bne	r2,zero,81104344 <bSdmaDmaM2Transfer+0x2e8>
8110432c:	00000b06 	br	8110435c <bSdmaDmaM2Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81104330:	00b80014 	movui	r2,57344
81104334:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81104338:	00800044 	movi	r2,1
8110433c:	e0bff715 	stw	r2,-36(fp)
			break;
81104340:	00000806 	br	81104364 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81104344:	008000b4 	movhi	r2,2
81104348:	10b80004 	addi	r2,r2,-8192
8110434c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81104350:	00800044 	movi	r2,1
81104354:	e0bff715 	stw	r2,-36(fp)
			break;
81104358:	00000206 	br	81104364 <bSdmaDmaM2Transfer+0x308>
		default:
			bStatus = FALSE;
8110435c:	e03ff415 	stw	zero,-48(fp)
			break;
81104360:	0001883a 	nop
		}
		break;
81104364:	00000206 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	default:
		bStatus = FALSE;
81104368:	e03ff415 	stw	zero,-48(fp)
		break;
8110436c:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
81104370:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bStatus = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
81104374:	00a00034 	movhi	r2,32768
81104378:	1885883a 	add	r2,r3,r2
8110437c:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
81104380:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81104384:	e0bff417 	ldw	r2,-48(fp)
81104388:	10003b26 	beq	r2,zero,81104478 <bSdmaDmaM2Transfer+0x41c>
		if (pxDmaM2Dev == NULL) {
8110438c:	d0a03917 	ldw	r2,-32540(gp)
81104390:	1000021e 	bne	r2,zero,8110439c <bSdmaDmaM2Transfer+0x340>
			bStatus = FALSE;
81104394:	e03ff415 	stw	zero,-48(fp)
81104398:	00003706 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
8110439c:	e03ff50d 	sth	zero,-44(fp)
811043a0:	00003206 	br	8110446c <bSdmaDmaM2Transfer+0x410>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
811043a4:	01000044 	movi	r4,1
811043a8:	11254a00 	call	811254a0 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
811043ac:	d0a03917 	ldw	r2,-32540(gp)
811043b0:	10800317 	ldw	r2,12(r2)
811043b4:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
811043b8:	1080010c 	andi	r2,r2,4
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
811043bc:	103ff91e 	bne	r2,zero,811043a4 <__reset+0xfb0e43a4>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
811043c0:	d2203917 	ldw	r8,-32540(gp)
811043c4:	e17ff817 	ldw	r5,-32(fp)
811043c8:	e1bff617 	ldw	r6,-40(fp)
811043cc:	e0bff917 	ldw	r2,-28(fp)
811043d0:	e0fff717 	ldw	r3,-36(fp)
811043d4:	01000044 	movi	r4,1
811043d8:	d9000815 	stw	r4,32(sp)
811043dc:	01000044 	movi	r4,1
811043e0:	d9000715 	stw	r4,28(sp)
811043e4:	01000044 	movi	r4,1
811043e8:	d9000615 	stw	r4,24(sp)
811043ec:	01000044 	movi	r4,1
811043f0:	d9000515 	stw	r4,20(sp)
811043f4:	01000044 	movi	r4,1
811043f8:	d9000415 	stw	r4,16(sp)
811043fc:	d8c00315 	stw	r3,12(sp)
81104400:	d8800215 	stw	r2,8(sp)
81104404:	e0bffa17 	ldw	r2,-24(fp)
81104408:	d8800115 	stw	r2,4(sp)
8110440c:	00802204 	movi	r2,136
81104410:	d8800015 	stw	r2,0(sp)
81104414:	300f883a 	mov	r7,r6
81104418:	280d883a 	mov	r6,r5
8110441c:	800b883a 	mov	r5,r16
81104420:	4009883a 	mov	r4,r8
81104424:	1106b800 	call	81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104428:	10000226 	beq	r2,zero,81104434 <bSdmaDmaM2Transfer+0x3d8>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
8110442c:	e03ff415 	stw	zero,-48(fp)
					break;
81104430:	00001106 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
81104434:	d0a03917 	ldw	r2,-32540(gp)
81104438:	800b883a 	mov	r5,r16
8110443c:	1009883a 	mov	r4,r2
81104440:	1106c840 	call	81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>
81104444:	10000226 	beq	r2,zero,81104450 <bSdmaDmaM2Transfer+0x3f4>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104448:	e03ff415 	stw	zero,-48(fp)
						break;
8110444c:	00000a06 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104450:	e0bff817 	ldw	r2,-32(fp)
81104454:	10802204 	addi	r2,r2,136
81104458:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
8110445c:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104460:	e0bff50b 	ldhu	r2,-44(fp)
81104464:	10800044 	addi	r2,r2,1
81104468:	e0bff50d 	sth	r2,-44(fp)
8110446c:	e0fff50b 	ldhu	r3,-44(fp)
81104470:	e0bffc0b 	ldhu	r2,-16(fp)
81104474:	18bfcd36 	bltu	r3,r2,811043ac <__reset+0xfb0e43ac>
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81104478:	e0bff417 	ldw	r2,-48(fp)
}
8110447c:	e6ffff04 	addi	sp,fp,-4
81104480:	dfc00217 	ldw	ra,8(sp)
81104484:	df000117 	ldw	fp,4(sp)
81104488:	dc000017 	ldw	r16,0(sp)
8110448c:	dec00304 	addi	sp,sp,12
81104490:	f800283a 	ret

81104494 <vFeebCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFeebCh1HandleIrq(void* pvContext) {
81104494:	defffc04 	addi	sp,sp,-16
81104498:	de00012e 	bgeu	sp,et,811044a0 <vFeebCh1HandleIrq+0xc>
8110449c:	003b68fa 	trap	3
811044a0:	dfc00315 	stw	ra,12(sp)
811044a4:	df000215 	stw	fp,8(sp)
811044a8:	df000204 	addi	fp,sp,8
811044ac:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811044b0:	e0bfff17 	ldw	r2,-4(fp)
811044b4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh1IrqFlagClrBufferEmpty();
811044b8:	11046940 	call	81104694 <vFeebCh1IrqFlagClrBufferEmpty>
}
811044bc:	0001883a 	nop
811044c0:	e037883a 	mov	sp,fp
811044c4:	dfc00117 	ldw	ra,4(sp)
811044c8:	df000017 	ldw	fp,0(sp)
811044cc:	dec00204 	addi	sp,sp,8
811044d0:	f800283a 	ret

811044d4 <vFeebCh2HandleIrq>:

void vFeebCh2HandleIrq(void* pvContext) {
811044d4:	defffc04 	addi	sp,sp,-16
811044d8:	de00012e 	bgeu	sp,et,811044e0 <vFeebCh2HandleIrq+0xc>
811044dc:	003b68fa 	trap	3
811044e0:	dfc00315 	stw	ra,12(sp)
811044e4:	df000215 	stw	fp,8(sp)
811044e8:	df000204 	addi	fp,sp,8
811044ec:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811044f0:	e0bfff17 	ldw	r2,-4(fp)
811044f4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh2IrqFlagClrBufferEmpty();
811044f8:	11046d80 	call	811046d8 <vFeebCh2IrqFlagClrBufferEmpty>
}
811044fc:	0001883a 	nop
81104500:	e037883a 	mov	sp,fp
81104504:	dfc00117 	ldw	ra,4(sp)
81104508:	df000017 	ldw	fp,0(sp)
8110450c:	dec00204 	addi	sp,sp,8
81104510:	f800283a 	ret

81104514 <vFeebCh3HandleIrq>:

void vFeebCh3HandleIrq(void* pvContext) {
81104514:	defffc04 	addi	sp,sp,-16
81104518:	de00012e 	bgeu	sp,et,81104520 <vFeebCh3HandleIrq+0xc>
8110451c:	003b68fa 	trap	3
81104520:	dfc00315 	stw	ra,12(sp)
81104524:	df000215 	stw	fp,8(sp)
81104528:	df000204 	addi	fp,sp,8
8110452c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104530:	e0bfff17 	ldw	r2,-4(fp)
81104534:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh3IrqFlagClrBufferEmpty();
81104538:	110471c0 	call	8110471c <vFeebCh3IrqFlagClrBufferEmpty>
}
8110453c:	0001883a 	nop
81104540:	e037883a 	mov	sp,fp
81104544:	dfc00117 	ldw	ra,4(sp)
81104548:	df000017 	ldw	fp,0(sp)
8110454c:	dec00204 	addi	sp,sp,8
81104550:	f800283a 	ret

81104554 <vFeebCh4HandleIrq>:

void vFeebCh4HandleIrq(void* pvContext) {
81104554:	defffc04 	addi	sp,sp,-16
81104558:	de00012e 	bgeu	sp,et,81104560 <vFeebCh4HandleIrq+0xc>
8110455c:	003b68fa 	trap	3
81104560:	dfc00315 	stw	ra,12(sp)
81104564:	df000215 	stw	fp,8(sp)
81104568:	df000204 	addi	fp,sp,8
8110456c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104570:	e0bfff17 	ldw	r2,-4(fp)
81104574:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh4IrqFlagClrBufferEmpty();
81104578:	11047600 	call	81104760 <vFeebCh4IrqFlagClrBufferEmpty>
}
8110457c:	0001883a 	nop
81104580:	e037883a 	mov	sp,fp
81104584:	dfc00117 	ldw	ra,4(sp)
81104588:	df000017 	ldw	fp,0(sp)
8110458c:	dec00204 	addi	sp,sp,8
81104590:	f800283a 	ret

81104594 <vFeebCh5HandleIrq>:

void vFeebCh5HandleIrq(void* pvContext) {
81104594:	defffc04 	addi	sp,sp,-16
81104598:	de00012e 	bgeu	sp,et,811045a0 <vFeebCh5HandleIrq+0xc>
8110459c:	003b68fa 	trap	3
811045a0:	dfc00315 	stw	ra,12(sp)
811045a4:	df000215 	stw	fp,8(sp)
811045a8:	df000204 	addi	fp,sp,8
811045ac:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045b0:	e0bfff17 	ldw	r2,-4(fp)
811045b4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh5IrqFlagClrBufferEmpty();
811045b8:	11047a40 	call	811047a4 <vFeebCh5IrqFlagClrBufferEmpty>
}
811045bc:	0001883a 	nop
811045c0:	e037883a 	mov	sp,fp
811045c4:	dfc00117 	ldw	ra,4(sp)
811045c8:	df000017 	ldw	fp,0(sp)
811045cc:	dec00204 	addi	sp,sp,8
811045d0:	f800283a 	ret

811045d4 <vFeebCh6HandleIrq>:

void vFeebCh6HandleIrq(void* pvContext) {
811045d4:	defffc04 	addi	sp,sp,-16
811045d8:	de00012e 	bgeu	sp,et,811045e0 <vFeebCh6HandleIrq+0xc>
811045dc:	003b68fa 	trap	3
811045e0:	dfc00315 	stw	ra,12(sp)
811045e4:	df000215 	stw	fp,8(sp)
811045e8:	df000204 	addi	fp,sp,8
811045ec:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045f0:	e0bfff17 	ldw	r2,-4(fp)
811045f4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	vFeebCh6IrqFlagClrBufferEmpty();
811045f8:	11047e80 	call	811047e8 <vFeebCh6IrqFlagClrBufferEmpty>
}
811045fc:	0001883a 	nop
81104600:	e037883a 	mov	sp,fp
81104604:	dfc00117 	ldw	ra,4(sp)
81104608:	df000017 	ldw	fp,0(sp)
8110460c:	dec00204 	addi	sp,sp,8
81104610:	f800283a 	ret

81104614 <vFeebCh7HandleIrq>:

void vFeebCh7HandleIrq(void* pvContext) {
81104614:	defffc04 	addi	sp,sp,-16
81104618:	de00012e 	bgeu	sp,et,81104620 <vFeebCh7HandleIrq+0xc>
8110461c:	003b68fa 	trap	3
81104620:	dfc00315 	stw	ra,12(sp)
81104624:	df000215 	stw	fp,8(sp)
81104628:	df000204 	addi	fp,sp,8
8110462c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104630:	e0bfff17 	ldw	r2,-4(fp)
81104634:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh7IrqFlagClrBufferEmpty();
81104638:	110482c0 	call	8110482c <vFeebCh7IrqFlagClrBufferEmpty>
}
8110463c:	0001883a 	nop
81104640:	e037883a 	mov	sp,fp
81104644:	dfc00117 	ldw	ra,4(sp)
81104648:	df000017 	ldw	fp,0(sp)
8110464c:	dec00204 	addi	sp,sp,8
81104650:	f800283a 	ret

81104654 <vFeebCh8HandleIrq>:

void vFeebCh8HandleIrq(void* pvContext) {
81104654:	defffc04 	addi	sp,sp,-16
81104658:	de00012e 	bgeu	sp,et,81104660 <vFeebCh8HandleIrq+0xc>
8110465c:	003b68fa 	trap	3
81104660:	dfc00315 	stw	ra,12(sp)
81104664:	df000215 	stw	fp,8(sp)
81104668:	df000204 	addi	fp,sp,8
8110466c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104670:	e0bfff17 	ldw	r2,-4(fp)
81104674:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh8IrqFlagClrBufferEmpty();
81104678:	11048700 	call	81104870 <vFeebCh8IrqFlagClrBufferEmpty>
}
8110467c:	0001883a 	nop
81104680:	e037883a 	mov	sp,fp
81104684:	dfc00117 	ldw	ra,4(sp)
81104688:	df000017 	ldw	fp,0(sp)
8110468c:	dec00204 	addi	sp,sp,8
81104690:	f800283a 	ret

81104694 <vFeebCh1IrqFlagClrBufferEmpty>:

void vFeebCh1IrqFlagClrBufferEmpty(void) {
81104694:	defffe04 	addi	sp,sp,-8
81104698:	de00012e 	bgeu	sp,et,811046a0 <vFeebCh1IrqFlagClrBufferEmpty+0xc>
8110469c:	003b68fa 	trap	3
811046a0:	dfc00115 	stw	ra,4(sp)
811046a4:	df000015 	stw	fp,0(sp)
811046a8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811046ac:	01800044 	movi	r6,1
811046b0:	01400144 	movi	r5,5
811046b4:	01204834 	movhi	r4,33056
811046b8:	210b0004 	addi	r4,r4,11264
811046bc:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811046c0:	0001883a 	nop
811046c4:	e037883a 	mov	sp,fp
811046c8:	dfc00117 	ldw	ra,4(sp)
811046cc:	df000017 	ldw	fp,0(sp)
811046d0:	dec00204 	addi	sp,sp,8
811046d4:	f800283a 	ret

811046d8 <vFeebCh2IrqFlagClrBufferEmpty>:

void vFeebCh2IrqFlagClrBufferEmpty(void) {
811046d8:	defffe04 	addi	sp,sp,-8
811046dc:	de00012e 	bgeu	sp,et,811046e4 <vFeebCh2IrqFlagClrBufferEmpty+0xc>
811046e0:	003b68fa 	trap	3
811046e4:	dfc00115 	stw	ra,4(sp)
811046e8:	df000015 	stw	fp,0(sp)
811046ec:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811046f0:	01800044 	movi	r6,1
811046f4:	01400144 	movi	r5,5
811046f8:	01204834 	movhi	r4,33056
811046fc:	210a0004 	addi	r4,r4,10240
81104700:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104704:	0001883a 	nop
81104708:	e037883a 	mov	sp,fp
8110470c:	dfc00117 	ldw	ra,4(sp)
81104710:	df000017 	ldw	fp,0(sp)
81104714:	dec00204 	addi	sp,sp,8
81104718:	f800283a 	ret

8110471c <vFeebCh3IrqFlagClrBufferEmpty>:

void vFeebCh3IrqFlagClrBufferEmpty(void) {
8110471c:	defffe04 	addi	sp,sp,-8
81104720:	de00012e 	bgeu	sp,et,81104728 <vFeebCh3IrqFlagClrBufferEmpty+0xc>
81104724:	003b68fa 	trap	3
81104728:	dfc00115 	stw	ra,4(sp)
8110472c:	df000015 	stw	fp,0(sp)
81104730:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104734:	01800044 	movi	r6,1
81104738:	01400144 	movi	r5,5
8110473c:	01204834 	movhi	r4,33056
81104740:	21090004 	addi	r4,r4,9216
81104744:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104748:	0001883a 	nop
8110474c:	e037883a 	mov	sp,fp
81104750:	dfc00117 	ldw	ra,4(sp)
81104754:	df000017 	ldw	fp,0(sp)
81104758:	dec00204 	addi	sp,sp,8
8110475c:	f800283a 	ret

81104760 <vFeebCh4IrqFlagClrBufferEmpty>:

void vFeebCh4IrqFlagClrBufferEmpty(void) {
81104760:	defffe04 	addi	sp,sp,-8
81104764:	de00012e 	bgeu	sp,et,8110476c <vFeebCh4IrqFlagClrBufferEmpty+0xc>
81104768:	003b68fa 	trap	3
8110476c:	dfc00115 	stw	ra,4(sp)
81104770:	df000015 	stw	fp,0(sp)
81104774:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104778:	01800044 	movi	r6,1
8110477c:	01400144 	movi	r5,5
81104780:	01204834 	movhi	r4,33056
81104784:	21080004 	addi	r4,r4,8192
81104788:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110478c:	0001883a 	nop
81104790:	e037883a 	mov	sp,fp
81104794:	dfc00117 	ldw	ra,4(sp)
81104798:	df000017 	ldw	fp,0(sp)
8110479c:	dec00204 	addi	sp,sp,8
811047a0:	f800283a 	ret

811047a4 <vFeebCh5IrqFlagClrBufferEmpty>:

void vFeebCh5IrqFlagClrBufferEmpty(void) {
811047a4:	defffe04 	addi	sp,sp,-8
811047a8:	de00012e 	bgeu	sp,et,811047b0 <vFeebCh5IrqFlagClrBufferEmpty+0xc>
811047ac:	003b68fa 	trap	3
811047b0:	dfc00115 	stw	ra,4(sp)
811047b4:	df000015 	stw	fp,0(sp)
811047b8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
811047bc:	01800044 	movi	r6,1
811047c0:	01400144 	movi	r5,5
811047c4:	01204834 	movhi	r4,33056
811047c8:	21070004 	addi	r4,r4,7168
811047cc:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047d0:	0001883a 	nop
811047d4:	e037883a 	mov	sp,fp
811047d8:	dfc00117 	ldw	ra,4(sp)
811047dc:	df000017 	ldw	fp,0(sp)
811047e0:	dec00204 	addi	sp,sp,8
811047e4:	f800283a 	ret

811047e8 <vFeebCh6IrqFlagClrBufferEmpty>:

void vFeebCh6IrqFlagClrBufferEmpty(void) {
811047e8:	defffe04 	addi	sp,sp,-8
811047ec:	de00012e 	bgeu	sp,et,811047f4 <vFeebCh6IrqFlagClrBufferEmpty+0xc>
811047f0:	003b68fa 	trap	3
811047f4:	dfc00115 	stw	ra,4(sp)
811047f8:	df000015 	stw	fp,0(sp)
811047fc:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104800:	01800044 	movi	r6,1
81104804:	01400144 	movi	r5,5
81104808:	01204834 	movhi	r4,33056
8110480c:	21060004 	addi	r4,r4,6144
81104810:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104814:	0001883a 	nop
81104818:	e037883a 	mov	sp,fp
8110481c:	dfc00117 	ldw	ra,4(sp)
81104820:	df000017 	ldw	fp,0(sp)
81104824:	dec00204 	addi	sp,sp,8
81104828:	f800283a 	ret

8110482c <vFeebCh7IrqFlagClrBufferEmpty>:

void vFeebCh7IrqFlagClrBufferEmpty(void) {
8110482c:	defffe04 	addi	sp,sp,-8
81104830:	de00012e 	bgeu	sp,et,81104838 <vFeebCh7IrqFlagClrBufferEmpty+0xc>
81104834:	003b68fa 	trap	3
81104838:	dfc00115 	stw	ra,4(sp)
8110483c:	df000015 	stw	fp,0(sp)
81104840:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104844:	01800044 	movi	r6,1
81104848:	01400144 	movi	r5,5
8110484c:	01204834 	movhi	r4,33056
81104850:	21050004 	addi	r4,r4,5120
81104854:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104858:	0001883a 	nop
8110485c:	e037883a 	mov	sp,fp
81104860:	dfc00117 	ldw	ra,4(sp)
81104864:	df000017 	ldw	fp,0(sp)
81104868:	dec00204 	addi	sp,sp,8
8110486c:	f800283a 	ret

81104870 <vFeebCh8IrqFlagClrBufferEmpty>:

void vFeebCh8IrqFlagClrBufferEmpty(void) {
81104870:	defffe04 	addi	sp,sp,-8
81104874:	de00012e 	bgeu	sp,et,8110487c <vFeebCh8IrqFlagClrBufferEmpty+0xc>
81104878:	003b68fa 	trap	3
8110487c:	dfc00115 	stw	ra,4(sp)
81104880:	df000015 	stw	fp,0(sp)
81104884:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104888:	01800044 	movi	r6,1
8110488c:	01400144 	movi	r5,5
81104890:	01204834 	movhi	r4,33056
81104894:	21040004 	addi	r4,r4,4096
81104898:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110489c:	0001883a 	nop
811048a0:	e037883a 	mov	sp,fp
811048a4:	dfc00117 	ldw	ra,4(sp)
811048a8:	df000017 	ldw	fp,0(sp)
811048ac:	dec00204 	addi	sp,sp,8
811048b0:	f800283a 	ret

811048b4 <bFeebCh1IrqFlagBufferEmpty>:

bool bFeebCh1IrqFlagBufferEmpty(void) {
811048b4:	defffd04 	addi	sp,sp,-12
811048b8:	de00012e 	bgeu	sp,et,811048c0 <bFeebCh1IrqFlagBufferEmpty+0xc>
811048bc:	003b68fa 	trap	3
811048c0:	dfc00215 	stw	ra,8(sp)
811048c4:	df000115 	stw	fp,4(sp)
811048c8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811048cc:	01400144 	movi	r5,5
811048d0:	01204834 	movhi	r4,33056
811048d4:	210b0004 	addi	r4,r4,11264
811048d8:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811048dc:	1080004c 	andi	r2,r2,1
}

bool bFeebCh1IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811048e0:	10000326 	beq	r2,zero,811048f0 <bFeebCh1IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811048e4:	00800044 	movi	r2,1
811048e8:	e0bfff15 	stw	r2,-4(fp)
811048ec:	00000106 	br	811048f4 <bFeebCh1IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811048f0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811048f4:	e0bfff17 	ldw	r2,-4(fp)
}
811048f8:	e037883a 	mov	sp,fp
811048fc:	dfc00117 	ldw	ra,4(sp)
81104900:	df000017 	ldw	fp,0(sp)
81104904:	dec00204 	addi	sp,sp,8
81104908:	f800283a 	ret

8110490c <bFeebCh2IrqFlagBufferEmpty>:

bool bFeebCh2IrqFlagBufferEmpty(void) {
8110490c:	defffd04 	addi	sp,sp,-12
81104910:	de00012e 	bgeu	sp,et,81104918 <bFeebCh2IrqFlagBufferEmpty+0xc>
81104914:	003b68fa 	trap	3
81104918:	dfc00215 	stw	ra,8(sp)
8110491c:	df000115 	stw	fp,4(sp)
81104920:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104924:	01400144 	movi	r5,5
81104928:	01204834 	movhi	r4,33056
8110492c:	210a0004 	addi	r4,r4,10240
81104930:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104934:	1080004c 	andi	r2,r2,1
}

bool bFeebCh2IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104938:	10000326 	beq	r2,zero,81104948 <bFeebCh2IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
8110493c:	00800044 	movi	r2,1
81104940:	e0bfff15 	stw	r2,-4(fp)
81104944:	00000106 	br	8110494c <bFeebCh2IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104948:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
8110494c:	e0bfff17 	ldw	r2,-4(fp)
}
81104950:	e037883a 	mov	sp,fp
81104954:	dfc00117 	ldw	ra,4(sp)
81104958:	df000017 	ldw	fp,0(sp)
8110495c:	dec00204 	addi	sp,sp,8
81104960:	f800283a 	ret

81104964 <bFeebCh3IrqFlagBufferEmpty>:

bool bFeebCh3IrqFlagBufferEmpty(void) {
81104964:	defffd04 	addi	sp,sp,-12
81104968:	de00012e 	bgeu	sp,et,81104970 <bFeebCh3IrqFlagBufferEmpty+0xc>
8110496c:	003b68fa 	trap	3
81104970:	dfc00215 	stw	ra,8(sp)
81104974:	df000115 	stw	fp,4(sp)
81104978:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
8110497c:	01400144 	movi	r5,5
81104980:	01204834 	movhi	r4,33056
81104984:	21090004 	addi	r4,r4,9216
81104988:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110498c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh3IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104990:	10000326 	beq	r2,zero,811049a0 <bFeebCh3IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104994:	00800044 	movi	r2,1
81104998:	e0bfff15 	stw	r2,-4(fp)
8110499c:	00000106 	br	811049a4 <bFeebCh3IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049a0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049a4:	e0bfff17 	ldw	r2,-4(fp)
}
811049a8:	e037883a 	mov	sp,fp
811049ac:	dfc00117 	ldw	ra,4(sp)
811049b0:	df000017 	ldw	fp,0(sp)
811049b4:	dec00204 	addi	sp,sp,8
811049b8:	f800283a 	ret

811049bc <bFeebCh4IrqFlagBufferEmpty>:

bool bFeebCh4IrqFlagBufferEmpty(void) {
811049bc:	defffd04 	addi	sp,sp,-12
811049c0:	de00012e 	bgeu	sp,et,811049c8 <bFeebCh4IrqFlagBufferEmpty+0xc>
811049c4:	003b68fa 	trap	3
811049c8:	dfc00215 	stw	ra,8(sp)
811049cc:	df000115 	stw	fp,4(sp)
811049d0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811049d4:	01400144 	movi	r5,5
811049d8:	01204834 	movhi	r4,33056
811049dc:	21080004 	addi	r4,r4,8192
811049e0:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049e4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh4IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811049e8:	10000326 	beq	r2,zero,811049f8 <bFeebCh4IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811049ec:	00800044 	movi	r2,1
811049f0:	e0bfff15 	stw	r2,-4(fp)
811049f4:	00000106 	br	811049fc <bFeebCh4IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049f8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049fc:	e0bfff17 	ldw	r2,-4(fp)
}
81104a00:	e037883a 	mov	sp,fp
81104a04:	dfc00117 	ldw	ra,4(sp)
81104a08:	df000017 	ldw	fp,0(sp)
81104a0c:	dec00204 	addi	sp,sp,8
81104a10:	f800283a 	ret

81104a14 <bFeebCh5IrqFlagBufferEmpty>:

bool bFeebCh5IrqFlagBufferEmpty(void) {
81104a14:	defffd04 	addi	sp,sp,-12
81104a18:	de00012e 	bgeu	sp,et,81104a20 <bFeebCh5IrqFlagBufferEmpty+0xc>
81104a1c:	003b68fa 	trap	3
81104a20:	dfc00215 	stw	ra,8(sp)
81104a24:	df000115 	stw	fp,4(sp)
81104a28:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a2c:	01400144 	movi	r5,5
81104a30:	01204834 	movhi	r4,33056
81104a34:	21070004 	addi	r4,r4,7168
81104a38:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a3c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh5IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a40:	10000326 	beq	r2,zero,81104a50 <bFeebCh5IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a44:	00800044 	movi	r2,1
81104a48:	e0bfff15 	stw	r2,-4(fp)
81104a4c:	00000106 	br	81104a54 <bFeebCh5IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a50:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a54:	e0bfff17 	ldw	r2,-4(fp)
}
81104a58:	e037883a 	mov	sp,fp
81104a5c:	dfc00117 	ldw	ra,4(sp)
81104a60:	df000017 	ldw	fp,0(sp)
81104a64:	dec00204 	addi	sp,sp,8
81104a68:	f800283a 	ret

81104a6c <bFeebCh6IrqFlagBufferEmpty>:

bool bFeebCh6IrqFlagBufferEmpty(void) {
81104a6c:	defffd04 	addi	sp,sp,-12
81104a70:	de00012e 	bgeu	sp,et,81104a78 <bFeebCh6IrqFlagBufferEmpty+0xc>
81104a74:	003b68fa 	trap	3
81104a78:	dfc00215 	stw	ra,8(sp)
81104a7c:	df000115 	stw	fp,4(sp)
81104a80:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104a84:	01400144 	movi	r5,5
81104a88:	01204834 	movhi	r4,33056
81104a8c:	21060004 	addi	r4,r4,6144
81104a90:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a94:	1080004c 	andi	r2,r2,1
}

bool bFeebCh6IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104a98:	10000326 	beq	r2,zero,81104aa8 <bFeebCh6IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a9c:	00800044 	movi	r2,1
81104aa0:	e0bfff15 	stw	r2,-4(fp)
81104aa4:	00000106 	br	81104aac <bFeebCh6IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104aa8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104aac:	e0bfff17 	ldw	r2,-4(fp)
}
81104ab0:	e037883a 	mov	sp,fp
81104ab4:	dfc00117 	ldw	ra,4(sp)
81104ab8:	df000017 	ldw	fp,0(sp)
81104abc:	dec00204 	addi	sp,sp,8
81104ac0:	f800283a 	ret

81104ac4 <bFeebCh7IrqFlagBufferEmpty>:

bool bFeebCh7IrqFlagBufferEmpty(void) {
81104ac4:	defffd04 	addi	sp,sp,-12
81104ac8:	de00012e 	bgeu	sp,et,81104ad0 <bFeebCh7IrqFlagBufferEmpty+0xc>
81104acc:	003b68fa 	trap	3
81104ad0:	dfc00215 	stw	ra,8(sp)
81104ad4:	df000115 	stw	fp,4(sp)
81104ad8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104adc:	01400144 	movi	r5,5
81104ae0:	01204834 	movhi	r4,33056
81104ae4:	21050004 	addi	r4,r4,5120
81104ae8:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104aec:	1080004c 	andi	r2,r2,1
}

bool bFeebCh7IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104af0:	10000326 	beq	r2,zero,81104b00 <bFeebCh7IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104af4:	00800044 	movi	r2,1
81104af8:	e0bfff15 	stw	r2,-4(fp)
81104afc:	00000106 	br	81104b04 <bFeebCh7IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b00:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b04:	e0bfff17 	ldw	r2,-4(fp)
}
81104b08:	e037883a 	mov	sp,fp
81104b0c:	dfc00117 	ldw	ra,4(sp)
81104b10:	df000017 	ldw	fp,0(sp)
81104b14:	dec00204 	addi	sp,sp,8
81104b18:	f800283a 	ret

81104b1c <bFeebCh8IrqFlagBufferEmpty>:

bool bFeebCh8IrqFlagBufferEmpty(void) {
81104b1c:	defffd04 	addi	sp,sp,-12
81104b20:	de00012e 	bgeu	sp,et,81104b28 <bFeebCh8IrqFlagBufferEmpty+0xc>
81104b24:	003b68fa 	trap	3
81104b28:	dfc00215 	stw	ra,8(sp)
81104b2c:	df000115 	stw	fp,4(sp)
81104b30:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104b34:	01400144 	movi	r5,5
81104b38:	01204834 	movhi	r4,33056
81104b3c:	21040004 	addi	r4,r4,4096
81104b40:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b44:	1080004c 	andi	r2,r2,1
}

bool bFeebCh8IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104b48:	10000326 	beq	r2,zero,81104b58 <bFeebCh8IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b4c:	00800044 	movi	r2,1
81104b50:	e0bfff15 	stw	r2,-4(fp)
81104b54:	00000106 	br	81104b5c <bFeebCh8IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b58:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b5c:	e0bfff17 	ldw	r2,-4(fp)
}
81104b60:	e037883a 	mov	sp,fp
81104b64:	dfc00117 	ldw	ra,4(sp)
81104b68:	df000017 	ldw	fp,0(sp)
81104b6c:	dec00204 	addi	sp,sp,8
81104b70:	f800283a 	ret

81104b74 <vFeebInitIrq>:

void vFeebInitIrq(alt_u8 ucCommCh) {
81104b74:	defffc04 	addi	sp,sp,-16
81104b78:	de00012e 	bgeu	sp,et,81104b80 <vFeebInitIrq+0xc>
81104b7c:	003b68fa 	trap	3
81104b80:	dfc00315 	stw	ra,12(sp)
81104b84:	df000215 	stw	fp,8(sp)
81104b88:	df000204 	addi	fp,sp,8
81104b8c:	2005883a 	mov	r2,r4
81104b90:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81104b94:	e0bfff03 	ldbu	r2,-4(fp)
81104b98:	10c00268 	cmpgeui	r3,r2,9
81104b9c:	18004f1e 	bne	r3,zero,81104cdc <vFeebInitIrq+0x168>
81104ba0:	100690ba 	slli	r3,r2,2
81104ba4:	00a04434 	movhi	r2,33040
81104ba8:	1092ee04 	addi	r2,r2,19384
81104bac:	1885883a 	add	r2,r3,r2
81104bb0:	10800017 	ldw	r2,0(r2)
81104bb4:	1000683a 	jmp	r2
81104bb8:	81104cdc 	xori	r4,r16,16691
81104bbc:	81104bdc 	xori	r4,r16,16687
81104bc0:	81104bfc 	xorhi	r4,r16,16687
81104bc4:	81104c1c 	xori	r4,r16,16688
81104bc8:	81104c3c 	xorhi	r4,r16,16688
81104bcc:	81104c5c 	xori	r4,r16,16689
81104bd0:	81104c7c 	xorhi	r4,r16,16689
81104bd4:	81104c9c 	xori	r4,r16,16690
81104bd8:	81104cbc 	xorhi	r4,r16,16690
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
81104bdc:	d0a03d04 	addi	r2,gp,-32524
81104be0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, pvHoldContext,
81104be4:	01a04434 	movhi	r6,33040
81104be8:	31912504 	addi	r6,r6,17556
81104bec:	e17ffe17 	ldw	r5,-8(fp)
81104bf0:	01000084 	movi	r4,2
81104bf4:	11258440 	call	81125844 <alt_irq_register>
				vFeebCh1HandleIrq);
		break;
81104bf8:	00003806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
81104bfc:	d0a03e04 	addi	r2,gp,-32520
81104c00:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, pvHoldContext,
81104c04:	01a04434 	movhi	r6,33040
81104c08:	31913504 	addi	r6,r6,17620
81104c0c:	e17ffe17 	ldw	r5,-8(fp)
81104c10:	010000c4 	movi	r4,3
81104c14:	11258440 	call	81125844 <alt_irq_register>
				vFeebCh2HandleIrq);
		break;
81104c18:	00003006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
81104c1c:	d0a03f04 	addi	r2,gp,-32516
81104c20:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, pvHoldContext,
81104c24:	01a04434 	movhi	r6,33040
81104c28:	31914504 	addi	r6,r6,17684
81104c2c:	e17ffe17 	ldw	r5,-8(fp)
81104c30:	01000104 	movi	r4,4
81104c34:	11258440 	call	81125844 <alt_irq_register>
				vFeebCh3HandleIrq);
		break;
81104c38:	00002806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
81104c3c:	d0a04004 	addi	r2,gp,-32512
81104c40:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, pvHoldContext,
81104c44:	01a04434 	movhi	r6,33040
81104c48:	31915504 	addi	r6,r6,17748
81104c4c:	e17ffe17 	ldw	r5,-8(fp)
81104c50:	01000204 	movi	r4,8
81104c54:	11258440 	call	81125844 <alt_irq_register>
				vFeebCh4HandleIrq);
		break;
81104c58:	00002006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
81104c5c:	d0a04104 	addi	r2,gp,-32508
81104c60:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, pvHoldContext,
81104c64:	01a04434 	movhi	r6,33040
81104c68:	31916504 	addi	r6,r6,17812
81104c6c:	e17ffe17 	ldw	r5,-8(fp)
81104c70:	010001c4 	movi	r4,7
81104c74:	11258440 	call	81125844 <alt_irq_register>
				vFeebCh5HandleIrq);
		break;
81104c78:	00001806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
81104c7c:	d0a04204 	addi	r2,gp,-32504
81104c80:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, pvHoldContext,
81104c84:	01a04434 	movhi	r6,33040
81104c88:	31917504 	addi	r6,r6,17876
81104c8c:	e17ffe17 	ldw	r5,-8(fp)
81104c90:	01000184 	movi	r4,6
81104c94:	11258440 	call	81125844 <alt_irq_register>
				vFeebCh6HandleIrq);
		break;
81104c98:	00001006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
81104c9c:	d0a04304 	addi	r2,gp,-32500
81104ca0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, pvHoldContext,
81104ca4:	01a04434 	movhi	r6,33040
81104ca8:	31918504 	addi	r6,r6,17940
81104cac:	e17ffe17 	ldw	r5,-8(fp)
81104cb0:	01000144 	movi	r4,5
81104cb4:	11258440 	call	81125844 <alt_irq_register>
				vFeebCh7HandleIrq);
		break;
81104cb8:	00000806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
81104cbc:	d0a04404 	addi	r2,gp,-32496
81104cc0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, pvHoldContext,
81104cc4:	01a04434 	movhi	r6,33040
81104cc8:	31919504 	addi	r6,r6,18004
81104ccc:	e17ffe17 	ldw	r5,-8(fp)
81104cd0:	01000244 	movi	r4,9
81104cd4:	11258440 	call	81125844 <alt_irq_register>
				vFeebCh8HandleIrq);
		break;
81104cd8:	0001883a 	nop
	}
}
81104cdc:	0001883a 	nop
81104ce0:	e037883a 	mov	sp,fp
81104ce4:	dfc00117 	ldw	ra,4(sp)
81104ce8:	df000017 	ldw	fp,0(sp)
81104cec:	dec00204 	addi	sp,sp,8
81104cf0:	f800283a 	ret

81104cf4 <bFeebSetIrqControl>:

bool bFeebSetIrqControl(TFeebChannel *pxFeebCh) {
81104cf4:	defffb04 	addi	sp,sp,-20
81104cf8:	de00012e 	bgeu	sp,et,81104d00 <bFeebSetIrqControl+0xc>
81104cfc:	003b68fa 	trap	3
81104d00:	dfc00415 	stw	ra,16(sp)
81104d04:	df000315 	stw	fp,12(sp)
81104d08:	df000304 	addi	fp,sp,12
81104d0c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104d10:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104d14:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104d18:	e0bfff17 	ldw	r2,-4(fp)
81104d1c:	10002426 	beq	r2,zero,81104db0 <bFeebSetIrqControl+0xbc>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104d20:	e0bfff17 	ldw	r2,-4(fp)
81104d24:	10800017 	ldw	r2,0(r2)
81104d28:	01400104 	movi	r5,4
81104d2c:	1009883a 	mov	r4,r2
81104d30:	110512c0 	call	8110512c <uliFeebReadReg>
81104d34:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (pxFeebCh->xIrqControl.bLeftBufferEmptyEn) {
81104d38:	e0bfff17 	ldw	r2,-4(fp)
81104d3c:	10800217 	ldw	r2,8(r2)
81104d40:	10000426 	beq	r2,zero,81104d54 <bFeebSetIrqControl+0x60>
			uliReg |= COMM_IRQ_L_BUFFER_EMPTY_EN_MSK;
81104d44:	e0bffe17 	ldw	r2,-8(fp)
81104d48:	10804014 	ori	r2,r2,256
81104d4c:	e0bffe15 	stw	r2,-8(fp)
81104d50:	00000406 	br	81104d64 <bFeebSetIrqControl+0x70>
		} else {
			uliReg &= (~COMM_IRQ_L_BUFFER_EMPTY_EN_MSK);
81104d54:	e0fffe17 	ldw	r3,-8(fp)
81104d58:	00bfbfc4 	movi	r2,-257
81104d5c:	1884703a 	and	r2,r3,r2
81104d60:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxFeebCh->xIrqControl.bRightBufferEmptyEn) {
81104d64:	e0bfff17 	ldw	r2,-4(fp)
81104d68:	10800317 	ldw	r2,12(r2)
81104d6c:	10000426 	beq	r2,zero,81104d80 <bFeebSetIrqControl+0x8c>
			uliReg |= COMM_IRQ_R_BUFFER_EMPTY_EN_MSK;
81104d70:	e0bffe17 	ldw	r2,-8(fp)
81104d74:	10800054 	ori	r2,r2,1
81104d78:	e0bffe15 	stw	r2,-8(fp)
81104d7c:	00000406 	br	81104d90 <bFeebSetIrqControl+0x9c>
		} else {
			uliReg &= (~COMM_IRQ_R_BUFFER_EMPTY_EN_MSK);
81104d80:	e0fffe17 	ldw	r3,-8(fp)
81104d84:	00bfff84 	movi	r2,-2
81104d88:	1884703a 	and	r2,r3,r2
81104d8c:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_IRQ_CTRL_REG_OFFSET,
81104d90:	e0bfff17 	ldw	r2,-4(fp)
81104d94:	10800017 	ldw	r2,0(r2)
81104d98:	e1bffe17 	ldw	r6,-8(fp)
81104d9c:	01400104 	movi	r5,4
81104da0:	1009883a 	mov	r4,r2
81104da4:	11050d80 	call	811050d8 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104da8:	00800044 	movi	r2,1
81104dac:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104db0:	e0bffd17 	ldw	r2,-12(fp)
}
81104db4:	e037883a 	mov	sp,fp
81104db8:	dfc00117 	ldw	ra,4(sp)
81104dbc:	df000017 	ldw	fp,0(sp)
81104dc0:	dec00204 	addi	sp,sp,8
81104dc4:	f800283a 	ret

81104dc8 <bFeebGetIrqControl>:

bool bFeebGetIrqControl(TFeebChannel *pxFeebCh) {
81104dc8:	defffb04 	addi	sp,sp,-20
81104dcc:	de00012e 	bgeu	sp,et,81104dd4 <bFeebGetIrqControl+0xc>
81104dd0:	003b68fa 	trap	3
81104dd4:	dfc00415 	stw	ra,16(sp)
81104dd8:	df000315 	stw	fp,12(sp)
81104ddc:	df000304 	addi	fp,sp,12
81104de0:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104de4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104de8:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104dec:	e0bfff17 	ldw	r2,-4(fp)
81104df0:	10001a26 	beq	r2,zero,81104e5c <bFeebGetIrqControl+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104df4:	e0bfff17 	ldw	r2,-4(fp)
81104df8:	10800017 	ldw	r2,0(r2)
81104dfc:	01400104 	movi	r5,4
81104e00:	1009883a 	mov	r4,r2
81104e04:	110512c0 	call	8110512c <uliFeebReadReg>
81104e08:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (uliReg & COMM_IRQ_L_BUFFER_EMPTY_EN_MSK) {
81104e0c:	e0bffe17 	ldw	r2,-8(fp)
81104e10:	1080400c 	andi	r2,r2,256
81104e14:	10000426 	beq	r2,zero,81104e28 <bFeebGetIrqControl+0x60>
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = TRUE;
81104e18:	e0bfff17 	ldw	r2,-4(fp)
81104e1c:	00c00044 	movi	r3,1
81104e20:	10c00215 	stw	r3,8(r2)
81104e24:	00000206 	br	81104e30 <bFeebGetIrqControl+0x68>
		} else {
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = FALSE;
81104e28:	e0bfff17 	ldw	r2,-4(fp)
81104e2c:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_IRQ_R_BUFFER_EMPTY_EN_MSK) {
81104e30:	e0bffe17 	ldw	r2,-8(fp)
81104e34:	1080004c 	andi	r2,r2,1
81104e38:	10000426 	beq	r2,zero,81104e4c <bFeebGetIrqControl+0x84>
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = TRUE;
81104e3c:	e0bfff17 	ldw	r2,-4(fp)
81104e40:	00c00044 	movi	r3,1
81104e44:	10c00315 	stw	r3,12(r2)
81104e48:	00000206 	br	81104e54 <bFeebGetIrqControl+0x8c>
		} else {
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = FALSE;
81104e4c:	e0bfff17 	ldw	r2,-4(fp)
81104e50:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
81104e54:	00800044 	movi	r2,1
81104e58:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104e5c:	e0bffd17 	ldw	r2,-12(fp)
}
81104e60:	e037883a 	mov	sp,fp
81104e64:	dfc00117 	ldw	ra,4(sp)
81104e68:	df000017 	ldw	fp,0(sp)
81104e6c:	dec00204 	addi	sp,sp,8
81104e70:	f800283a 	ret

81104e74 <bFeebGetIrqFlags>:

bool bFeebGetIrqFlags(TFeebChannel *pxFeebCh) {
81104e74:	defffb04 	addi	sp,sp,-20
81104e78:	de00012e 	bgeu	sp,et,81104e80 <bFeebGetIrqFlags+0xc>
81104e7c:	003b68fa 	trap	3
81104e80:	dfc00415 	stw	ra,16(sp)
81104e84:	df000315 	stw	fp,12(sp)
81104e88:	df000304 	addi	fp,sp,12
81104e8c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104e90:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104e94:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104e98:	e0bfff17 	ldw	r2,-4(fp)
81104e9c:	10001126 	beq	r2,zero,81104ee4 <bFeebGetIrqFlags+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104ea0:	e0bfff17 	ldw	r2,-4(fp)
81104ea4:	10800017 	ldw	r2,0(r2)
81104ea8:	01400144 	movi	r5,5
81104eac:	1009883a 	mov	r4,r2
81104eb0:	110512c0 	call	8110512c <uliFeebReadReg>
81104eb4:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAG_REG_OFFSET);

		if (uliReg & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104eb8:	e0bffe17 	ldw	r2,-8(fp)
81104ebc:	1080004c 	andi	r2,r2,1
81104ec0:	10000426 	beq	r2,zero,81104ed4 <bFeebGetIrqFlags+0x60>
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = TRUE;
81104ec4:	e0bfff17 	ldw	r2,-4(fp)
81104ec8:	00c00044 	movi	r3,1
81104ecc:	10c00415 	stw	r3,16(r2)
81104ed0:	00000206 	br	81104edc <bFeebGetIrqFlags+0x68>
		} else {
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = FALSE;
81104ed4:	e0bfff17 	ldw	r2,-4(fp)
81104ed8:	10000415 	stw	zero,16(r2)
		}

		bStatus = TRUE;
81104edc:	00800044 	movi	r2,1
81104ee0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ee4:	e0bffd17 	ldw	r2,-12(fp)
}
81104ee8:	e037883a 	mov	sp,fp
81104eec:	dfc00117 	ldw	ra,4(sp)
81104ef0:	df000017 	ldw	fp,0(sp)
81104ef4:	dec00204 	addi	sp,sp,8
81104ef8:	f800283a 	ret

81104efc <bFeebSetWindowing>:

bool bFeebSetWindowing(TFeebChannel *pxFeebCh) {
81104efc:	defffb04 	addi	sp,sp,-20
81104f00:	de00012e 	bgeu	sp,et,81104f08 <bFeebSetWindowing+0xc>
81104f04:	003b68fa 	trap	3
81104f08:	dfc00415 	stw	ra,16(sp)
81104f0c:	df000315 	stw	fp,12(sp)
81104f10:	df000304 	addi	fp,sp,12
81104f14:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f18:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f1c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f20:	e0bfff17 	ldw	r2,-4(fp)
81104f24:	10001926 	beq	r2,zero,81104f8c <bFeebSetWindowing+0x90>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f28:	e0bfff17 	ldw	r2,-4(fp)
81104f2c:	10800017 	ldw	r2,0(r2)
81104f30:	000b883a 	mov	r5,zero
81104f34:	1009883a 	mov	r4,r2
81104f38:	110512c0 	call	8110512c <uliFeebReadReg>
81104f3c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxFeebCh->xWindowingConfig.bMasking) {
81104f40:	e0bfff17 	ldw	r2,-4(fp)
81104f44:	10800117 	ldw	r2,4(r2)
81104f48:	10000426 	beq	r2,zero,81104f5c <bFeebSetWindowing+0x60>
			uliReg |= COMM_CTRL_MASKING_EN_MSK;
81104f4c:	e0bffe17 	ldw	r2,-8(fp)
81104f50:	10804014 	ori	r2,r2,256
81104f54:	e0bffe15 	stw	r2,-8(fp)
81104f58:	00000406 	br	81104f6c <bFeebSetWindowing+0x70>
		} else {
			uliReg &= (~COMM_CTRL_MASKING_EN_MSK);
81104f5c:	e0fffe17 	ldw	r3,-8(fp)
81104f60:	00bfbfc4 	movi	r2,-257
81104f64:	1884703a 	and	r2,r3,r2
81104f68:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81104f6c:	e0bfff17 	ldw	r2,-4(fp)
81104f70:	10800017 	ldw	r2,0(r2)
81104f74:	e1bffe17 	ldw	r6,-8(fp)
81104f78:	000b883a 	mov	r5,zero
81104f7c:	1009883a 	mov	r4,r2
81104f80:	11050d80 	call	811050d8 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104f84:	00800044 	movi	r2,1
81104f88:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104f8c:	e0bffd17 	ldw	r2,-12(fp)
}
81104f90:	e037883a 	mov	sp,fp
81104f94:	dfc00117 	ldw	ra,4(sp)
81104f98:	df000017 	ldw	fp,0(sp)
81104f9c:	dec00204 	addi	sp,sp,8
81104fa0:	f800283a 	ret

81104fa4 <bFeebGetWindowing>:

bool bFeebGetWindowing(TFeebChannel *pxFeebCh) {
81104fa4:	defffb04 	addi	sp,sp,-20
81104fa8:	de00012e 	bgeu	sp,et,81104fb0 <bFeebGetWindowing+0xc>
81104fac:	003b68fa 	trap	3
81104fb0:	dfc00415 	stw	ra,16(sp)
81104fb4:	df000315 	stw	fp,12(sp)
81104fb8:	df000304 	addi	fp,sp,12
81104fbc:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104fc0:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104fc4:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104fc8:	e0bfff17 	ldw	r2,-4(fp)
81104fcc:	10001126 	beq	r2,zero,81105014 <bFeebGetWindowing+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104fd0:	e0bfff17 	ldw	r2,-4(fp)
81104fd4:	10800017 	ldw	r2,0(r2)
81104fd8:	000b883a 	mov	r5,zero
81104fdc:	1009883a 	mov	r4,r2
81104fe0:	110512c0 	call	8110512c <uliFeebReadReg>
81104fe4:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_MASKING_EN_MSK) {
81104fe8:	e0bffe17 	ldw	r2,-8(fp)
81104fec:	1080400c 	andi	r2,r2,256
81104ff0:	10000426 	beq	r2,zero,81105004 <bFeebGetWindowing+0x60>
			pxFeebCh->xWindowingConfig.bMasking = TRUE;
81104ff4:	e0bfff17 	ldw	r2,-4(fp)
81104ff8:	00c00044 	movi	r3,1
81104ffc:	10c00115 	stw	r3,4(r2)
81105000:	00000206 	br	8110500c <bFeebGetWindowing+0x68>
		} else {
			pxFeebCh->xWindowingConfig.bMasking = FALSE;
81105004:	e0bfff17 	ldw	r2,-4(fp)
81105008:	10000115 	stw	zero,4(r2)
		}

		bStatus = TRUE;
8110500c:	00800044 	movi	r2,1
81105010:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105014:	e0bffd17 	ldw	r2,-12(fp)
}
81105018:	e037883a 	mov	sp,fp
8110501c:	dfc00117 	ldw	ra,4(sp)
81105020:	df000017 	ldw	fp,0(sp)
81105024:	dec00204 	addi	sp,sp,8
81105028:	f800283a 	ret

8110502c <bFeebGetBuffersStatus>:

bool bFeebGetBuffersStatus(TFeebChannel *pxFeebCh) {
8110502c:	defffb04 	addi	sp,sp,-20
81105030:	de00012e 	bgeu	sp,et,81105038 <bFeebGetBuffersStatus+0xc>
81105034:	003b68fa 	trap	3
81105038:	dfc00415 	stw	ra,16(sp)
8110503c:	df000315 	stw	fp,12(sp)
81105040:	df000304 	addi	fp,sp,12
81105044:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105048:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110504c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105050:	e0bfff17 	ldw	r2,-4(fp)
81105054:	10001a26 	beq	r2,zero,811050c0 <bFeebGetBuffersStatus+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105058:	e0bfff17 	ldw	r2,-4(fp)
8110505c:	10800017 	ldw	r2,0(r2)
81105060:	01400184 	movi	r5,6
81105064:	1009883a 	mov	r4,r2
81105068:	110512c0 	call	8110512c <uliFeebReadReg>
8110506c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_BUFFER_REG_OFFSET);

		if (uliReg & COMM_BUFF_STAT_L_BUFF_EPY_MSK) {
81105070:	e0bffe17 	ldw	r2,-8(fp)
81105074:	1080400c 	andi	r2,r2,256
81105078:	10000426 	beq	r2,zero,8110508c <bFeebGetBuffersStatus+0x60>
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = TRUE;
8110507c:	e0bfff17 	ldw	r2,-4(fp)
81105080:	00c00044 	movi	r3,1
81105084:	10c00515 	stw	r3,20(r2)
81105088:	00000206 	br	81105094 <bFeebGetBuffersStatus+0x68>
		} else {
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = FALSE;
8110508c:	e0bfff17 	ldw	r2,-4(fp)
81105090:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_BUFF_STAT_R_BUFF_EPY_MSK) {
81105094:	e0bffe17 	ldw	r2,-8(fp)
81105098:	1080004c 	andi	r2,r2,1
8110509c:	10000426 	beq	r2,zero,811050b0 <bFeebGetBuffersStatus+0x84>
			pxFeebCh->xBufferStatus.bRightBufferEmpty = TRUE;
811050a0:	e0bfff17 	ldw	r2,-4(fp)
811050a4:	00c00044 	movi	r3,1
811050a8:	10c00615 	stw	r3,24(r2)
811050ac:	00000206 	br	811050b8 <bFeebGetBuffersStatus+0x8c>
		} else {
			pxFeebCh->xBufferStatus.bRightBufferEmpty = FALSE;
811050b0:	e0bfff17 	ldw	r2,-4(fp)
811050b4:	10000615 	stw	zero,24(r2)
		}

		bStatus = TRUE;
811050b8:	00800044 	movi	r2,1
811050bc:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811050c0:	e0bffd17 	ldw	r2,-12(fp)
}
811050c4:	e037883a 	mov	sp,fp
811050c8:	dfc00117 	ldw	ra,4(sp)
811050cc:	df000017 	ldw	fp,0(sp)
811050d0:	dec00204 	addi	sp,sp,8
811050d4:	f800283a 	ret

811050d8 <vFeebWriteReg>:

//! [public functions]

//! [private functions]
static void vFeebWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
811050d8:	defffc04 	addi	sp,sp,-16
811050dc:	de00012e 	bgeu	sp,et,811050e4 <vFeebWriteReg+0xc>
811050e0:	003b68fa 	trap	3
811050e4:	df000315 	stw	fp,12(sp)
811050e8:	df000304 	addi	fp,sp,12
811050ec:	e13ffd15 	stw	r4,-12(fp)
811050f0:	e17ffe15 	stw	r5,-8(fp)
811050f4:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
811050f8:	e0bffe17 	ldw	r2,-8(fp)
811050fc:	1085883a 	add	r2,r2,r2
81105100:	1085883a 	add	r2,r2,r2
81105104:	1007883a 	mov	r3,r2
81105108:	e0bffd17 	ldw	r2,-12(fp)
8110510c:	10c5883a 	add	r2,r2,r3
81105110:	e0ffff17 	ldw	r3,-4(fp)
81105114:	10c00015 	stw	r3,0(r2)
}
81105118:	0001883a 	nop
8110511c:	e037883a 	mov	sp,fp
81105120:	df000017 	ldw	fp,0(sp)
81105124:	dec00104 	addi	sp,sp,4
81105128:	f800283a 	ret

8110512c <uliFeebReadReg>:

static alt_u32 uliFeebReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110512c:	defffc04 	addi	sp,sp,-16
81105130:	de00012e 	bgeu	sp,et,81105138 <uliFeebReadReg+0xc>
81105134:	003b68fa 	trap	3
81105138:	df000315 	stw	fp,12(sp)
8110513c:	df000304 	addi	fp,sp,12
81105140:	e13ffe15 	stw	r4,-8(fp)
81105144:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81105148:	e0bfff17 	ldw	r2,-4(fp)
8110514c:	1085883a 	add	r2,r2,r2
81105150:	1085883a 	add	r2,r2,r2
81105154:	1007883a 	mov	r3,r2
81105158:	e0bffe17 	ldw	r2,-8(fp)
8110515c:	10c5883a 	add	r2,r2,r3
81105160:	10800017 	ldw	r2,0(r2)
81105164:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105168:	e0bffd17 	ldw	r2,-12(fp)
}
8110516c:	e037883a 	mov	sp,fp
81105170:	df000017 	ldw	fp,0(sp)
81105174:	dec00104 	addi	sp,sp,4
81105178:	f800283a 	ret

8110517c <bSpwcSetLink>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSpwcSetLink(TSpwcChannel *pxSpwcCh) {
8110517c:	defffb04 	addi	sp,sp,-20
81105180:	de00012e 	bgeu	sp,et,81105188 <bSpwcSetLink+0xc>
81105184:	003b68fa 	trap	3
81105188:	dfc00415 	stw	ra,16(sp)
8110518c:	df000315 	stw	fp,12(sp)
81105190:	df000304 	addi	fp,sp,12
81105194:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105198:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110519c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811051a0:	e0bfff17 	ldw	r2,-4(fp)
811051a4:	10002f26 	beq	r2,zero,81105264 <bSpwcSetLink+0xe8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811051a8:	e0bfff17 	ldw	r2,-4(fp)
811051ac:	10800017 	ldw	r2,0(r2)
811051b0:	000b883a 	mov	r5,zero
811051b4:	1009883a 	mov	r4,r2
811051b8:	11056dc0 	call	811056dc <uliSpwcReadReg>
811051bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxSpwcCh->xLinkConfig.bAutostart) {
811051c0:	e0bfff17 	ldw	r2,-4(fp)
811051c4:	10800117 	ldw	r2,4(r2)
811051c8:	10000426 	beq	r2,zero,811051dc <bSpwcSetLink+0x60>
			uliReg |= COMM_CTRL_LINK_AUTOSTART_MSK;
811051cc:	e0bffe17 	ldw	r2,-8(fp)
811051d0:	10800114 	ori	r2,r2,4
811051d4:	e0bffe15 	stw	r2,-8(fp)
811051d8:	00000406 	br	811051ec <bSpwcSetLink+0x70>
		} else {
			uliReg &= (~COMM_CTRL_LINK_AUTOSTART_MSK);
811051dc:	e0fffe17 	ldw	r3,-8(fp)
811051e0:	00bffec4 	movi	r2,-5
811051e4:	1884703a 	and	r2,r3,r2
811051e8:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bStart) {
811051ec:	e0bfff17 	ldw	r2,-4(fp)
811051f0:	10800217 	ldw	r2,8(r2)
811051f4:	10000426 	beq	r2,zero,81105208 <bSpwcSetLink+0x8c>
			uliReg |= COMM_CTRL_LINK_START_MSK;
811051f8:	e0bffe17 	ldw	r2,-8(fp)
811051fc:	10800094 	ori	r2,r2,2
81105200:	e0bffe15 	stw	r2,-8(fp)
81105204:	00000406 	br	81105218 <bSpwcSetLink+0x9c>
		} else {
			uliReg &= (~COMM_CTRL_LINK_START_MSK);
81105208:	e0fffe17 	ldw	r3,-8(fp)
8110520c:	00bfff44 	movi	r2,-3
81105210:	1884703a 	and	r2,r3,r2
81105214:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bDisconnect) {
81105218:	e0bfff17 	ldw	r2,-4(fp)
8110521c:	10800317 	ldw	r2,12(r2)
81105220:	10000426 	beq	r2,zero,81105234 <bSpwcSetLink+0xb8>
			uliReg |= COMM_CTRL_LINK_DISCONNECT_MSK;
81105224:	e0bffe17 	ldw	r2,-8(fp)
81105228:	10800054 	ori	r2,r2,1
8110522c:	e0bffe15 	stw	r2,-8(fp)
81105230:	00000406 	br	81105244 <bSpwcSetLink+0xc8>
		} else {
			uliReg &= (~COMM_CTRL_LINK_DISCONNECT_MSK);
81105234:	e0fffe17 	ldw	r3,-8(fp)
81105238:	00bfff84 	movi	r2,-2
8110523c:	1884703a 	and	r2,r3,r2
81105240:	e0bffe15 	stw	r2,-8(fp)
		}

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81105244:	e0bfff17 	ldw	r2,-4(fp)
81105248:	10800017 	ldw	r2,0(r2)
8110524c:	e1bffe17 	ldw	r6,-8(fp)
81105250:	000b883a 	mov	r5,zero
81105254:	1009883a 	mov	r4,r2
81105258:	11056880 	call	81105688 <vSpwcWriteReg>
				uliReg);
		bStatus = TRUE;
8110525c:	00800044 	movi	r2,1
81105260:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105264:	e0bffd17 	ldw	r2,-12(fp)
}
81105268:	e037883a 	mov	sp,fp
8110526c:	dfc00117 	ldw	ra,4(sp)
81105270:	df000017 	ldw	fp,0(sp)
81105274:	dec00204 	addi	sp,sp,8
81105278:	f800283a 	ret

8110527c <bSpwcGetLink>:

bool bSpwcGetLink(TSpwcChannel *pxSpwcCh) {
8110527c:	defffb04 	addi	sp,sp,-20
81105280:	de00012e 	bgeu	sp,et,81105288 <bSpwcGetLink+0xc>
81105284:	003b68fa 	trap	3
81105288:	dfc00415 	stw	ra,16(sp)
8110528c:	df000315 	stw	fp,12(sp)
81105290:	df000304 	addi	fp,sp,12
81105294:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105298:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110529c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811052a0:	e0bfff17 	ldw	r2,-4(fp)
811052a4:	10002326 	beq	r2,zero,81105334 <bSpwcGetLink+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811052a8:	e0bfff17 	ldw	r2,-4(fp)
811052ac:	10800017 	ldw	r2,0(r2)
811052b0:	000b883a 	mov	r5,zero
811052b4:	1009883a 	mov	r4,r2
811052b8:	11056dc0 	call	811056dc <uliSpwcReadReg>
811052bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_LINK_AUTOSTART_MSK) {
811052c0:	e0bffe17 	ldw	r2,-8(fp)
811052c4:	1080010c 	andi	r2,r2,4
811052c8:	10000426 	beq	r2,zero,811052dc <bSpwcGetLink+0x60>
			pxSpwcCh->xLinkConfig.bAutostart = TRUE;
811052cc:	e0bfff17 	ldw	r2,-4(fp)
811052d0:	00c00044 	movi	r3,1
811052d4:	10c00115 	stw	r3,4(r2)
811052d8:	00000206 	br	811052e4 <bSpwcGetLink+0x68>
		} else {
			pxSpwcCh->xLinkConfig.bAutostart = FALSE;
811052dc:	e0bfff17 	ldw	r2,-4(fp)
811052e0:	10000115 	stw	zero,4(r2)
		}
		if (uliReg & COMM_CTRL_LINK_START_MSK) {
811052e4:	e0bffe17 	ldw	r2,-8(fp)
811052e8:	1080008c 	andi	r2,r2,2
811052ec:	10000426 	beq	r2,zero,81105300 <bSpwcGetLink+0x84>
			pxSpwcCh->xLinkConfig.bStart = TRUE;
811052f0:	e0bfff17 	ldw	r2,-4(fp)
811052f4:	00c00044 	movi	r3,1
811052f8:	10c00215 	stw	r3,8(r2)
811052fc:	00000206 	br	81105308 <bSpwcGetLink+0x8c>
		} else {
			pxSpwcCh->xLinkConfig.bStart = FALSE;
81105300:	e0bfff17 	ldw	r2,-4(fp)
81105304:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_CTRL_LINK_DISCONNECT_MSK) {
81105308:	e0bffe17 	ldw	r2,-8(fp)
8110530c:	1080004c 	andi	r2,r2,1
81105310:	10000426 	beq	r2,zero,81105324 <bSpwcGetLink+0xa8>
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
81105314:	e0bfff17 	ldw	r2,-4(fp)
81105318:	00c00044 	movi	r3,1
8110531c:	10c00315 	stw	r3,12(r2)
81105320:	00000206 	br	8110532c <bSpwcGetLink+0xb0>
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
81105324:	e0bfff17 	ldw	r2,-4(fp)
81105328:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
8110532c:	00800044 	movi	r2,1
81105330:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105334:	e0bffd17 	ldw	r2,-12(fp)
}
81105338:	e037883a 	mov	sp,fp
8110533c:	dfc00117 	ldw	ra,4(sp)
81105340:	df000017 	ldw	fp,0(sp)
81105344:	dec00204 	addi	sp,sp,8
81105348:	f800283a 	ret

8110534c <bSpwcGetLinkError>:

bool bSpwcGetLinkError(TSpwcChannel *pxSpwcCh) {
8110534c:	defffb04 	addi	sp,sp,-20
81105350:	de00012e 	bgeu	sp,et,81105358 <bSpwcGetLinkError+0xc>
81105354:	003b68fa 	trap	3
81105358:	dfc00415 	stw	ra,16(sp)
8110535c:	df000315 	stw	fp,12(sp)
81105360:	df000304 	addi	fp,sp,12
81105364:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105368:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110536c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105370:	e0bfff17 	ldw	r2,-4(fp)
81105374:	10002c26 	beq	r2,zero,81105428 <bSpwcGetLinkError+0xdc>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105378:	e0bfff17 	ldw	r2,-4(fp)
8110537c:	10800017 	ldw	r2,0(r2)
81105380:	01400044 	movi	r5,1
81105384:	1009883a 	mov	r4,r2
81105388:	11056dc0 	call	811056dc <uliSpwcReadReg>
8110538c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_DISC_ERR_MSK) {
81105390:	e0bffe17 	ldw	r2,-8(fp)
81105394:	1082000c 	andi	r2,r2,2048
81105398:	10000426 	beq	r2,zero,811053ac <bSpwcGetLinkError+0x60>
			pxSpwcCh->xLinkError.bDisconnect = TRUE;
8110539c:	e0bfff17 	ldw	r2,-4(fp)
811053a0:	00c00044 	movi	r3,1
811053a4:	10c00415 	stw	r3,16(r2)
811053a8:	00000206 	br	811053b4 <bSpwcGetLinkError+0x68>
		} else {
			pxSpwcCh->xLinkError.bDisconnect = FALSE;
811053ac:	e0bfff17 	ldw	r2,-4(fp)
811053b0:	10000415 	stw	zero,16(r2)
		}
		if (uliReg & COMM_STAT_LINK_PAR_ERR_MSK) {
811053b4:	e0bffe17 	ldw	r2,-8(fp)
811053b8:	1081000c 	andi	r2,r2,1024
811053bc:	10000426 	beq	r2,zero,811053d0 <bSpwcGetLinkError+0x84>
			pxSpwcCh->xLinkError.bParity = TRUE;
811053c0:	e0bfff17 	ldw	r2,-4(fp)
811053c4:	00c00044 	movi	r3,1
811053c8:	10c00515 	stw	r3,20(r2)
811053cc:	00000206 	br	811053d8 <bSpwcGetLinkError+0x8c>
		} else {
			pxSpwcCh->xLinkError.bParity = FALSE;
811053d0:	e0bfff17 	ldw	r2,-4(fp)
811053d4:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_STAT_LINK_ESC_ERR_MSK) {
811053d8:	e0bffe17 	ldw	r2,-8(fp)
811053dc:	1080800c 	andi	r2,r2,512
811053e0:	10000426 	beq	r2,zero,811053f4 <bSpwcGetLinkError+0xa8>
			pxSpwcCh->xLinkError.bEscape = TRUE;
811053e4:	e0bfff17 	ldw	r2,-4(fp)
811053e8:	00c00044 	movi	r3,1
811053ec:	10c00615 	stw	r3,24(r2)
811053f0:	00000206 	br	811053fc <bSpwcGetLinkError+0xb0>
		} else {
			pxSpwcCh->xLinkError.bEscape = FALSE;
811053f4:	e0bfff17 	ldw	r2,-4(fp)
811053f8:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_STAT_LINK_CRED_ERR_MSK) {
811053fc:	e0bffe17 	ldw	r2,-8(fp)
81105400:	1080400c 	andi	r2,r2,256
81105404:	10000426 	beq	r2,zero,81105418 <bSpwcGetLinkError+0xcc>
			pxSpwcCh->xLinkError.bCredit = TRUE;
81105408:	e0bfff17 	ldw	r2,-4(fp)
8110540c:	00c00044 	movi	r3,1
81105410:	10c00715 	stw	r3,28(r2)
81105414:	00000206 	br	81105420 <bSpwcGetLinkError+0xd4>
		} else {
			pxSpwcCh->xLinkError.bCredit = FALSE;
81105418:	e0bfff17 	ldw	r2,-4(fp)
8110541c:	10000715 	stw	zero,28(r2)
		}

		bStatus = TRUE;
81105420:	00800044 	movi	r2,1
81105424:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105428:	e0bffd17 	ldw	r2,-12(fp)
}
8110542c:	e037883a 	mov	sp,fp
81105430:	dfc00117 	ldw	ra,4(sp)
81105434:	df000017 	ldw	fp,0(sp)
81105438:	dec00204 	addi	sp,sp,8
8110543c:	f800283a 	ret

81105440 <bSpwcGetLinkStatus>:

bool bSpwcGetLinkStatus(TSpwcChannel *pxSpwcCh) {
81105440:	defffb04 	addi	sp,sp,-20
81105444:	de00012e 	bgeu	sp,et,8110544c <bSpwcGetLinkStatus+0xc>
81105448:	003b68fa 	trap	3
8110544c:	dfc00415 	stw	ra,16(sp)
81105450:	df000315 	stw	fp,12(sp)
81105454:	df000304 	addi	fp,sp,12
81105458:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
8110545c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105460:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105464:	e0bfff17 	ldw	r2,-4(fp)
81105468:	10002326 	beq	r2,zero,811054f8 <bSpwcGetLinkStatus+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
8110546c:	e0bfff17 	ldw	r2,-4(fp)
81105470:	10800017 	ldw	r2,0(r2)
81105474:	01400044 	movi	r5,1
81105478:	1009883a 	mov	r4,r2
8110547c:	11056dc0 	call	811056dc <uliSpwcReadReg>
81105480:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_STARTED_MSK) {
81105484:	e0bffe17 	ldw	r2,-8(fp)
81105488:	1080010c 	andi	r2,r2,4
8110548c:	10000426 	beq	r2,zero,811054a0 <bSpwcGetLinkStatus+0x60>
			pxSpwcCh->xLinkStatus.bStarted = TRUE;
81105490:	e0bfff17 	ldw	r2,-4(fp)
81105494:	00c00044 	movi	r3,1
81105498:	10c00815 	stw	r3,32(r2)
8110549c:	00000206 	br	811054a8 <bSpwcGetLinkStatus+0x68>
		} else {
			pxSpwcCh->xLinkStatus.bStarted = FALSE;
811054a0:	e0bfff17 	ldw	r2,-4(fp)
811054a4:	10000815 	stw	zero,32(r2)
		}
		if (uliReg & COMM_STAT_LINK_CONNECTING_MSK) {
811054a8:	e0bffe17 	ldw	r2,-8(fp)
811054ac:	1080008c 	andi	r2,r2,2
811054b0:	10000426 	beq	r2,zero,811054c4 <bSpwcGetLinkStatus+0x84>
			pxSpwcCh->xLinkStatus.bConnecting = TRUE;
811054b4:	e0bfff17 	ldw	r2,-4(fp)
811054b8:	00c00044 	movi	r3,1
811054bc:	10c00915 	stw	r3,36(r2)
811054c0:	00000206 	br	811054cc <bSpwcGetLinkStatus+0x8c>
		} else {
			pxSpwcCh->xLinkStatus.bConnecting = FALSE;
811054c4:	e0bfff17 	ldw	r2,-4(fp)
811054c8:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_STAT_LINK_RUNNING_MSK) {
811054cc:	e0bffe17 	ldw	r2,-8(fp)
811054d0:	1080004c 	andi	r2,r2,1
811054d4:	10000426 	beq	r2,zero,811054e8 <bSpwcGetLinkStatus+0xa8>
			pxSpwcCh->xLinkStatus.bRunning = TRUE;
811054d8:	e0bfff17 	ldw	r2,-4(fp)
811054dc:	00c00044 	movi	r3,1
811054e0:	10c00a15 	stw	r3,40(r2)
811054e4:	00000206 	br	811054f0 <bSpwcGetLinkStatus+0xb0>
		} else {
			pxSpwcCh->xLinkStatus.bRunning = FALSE;
811054e8:	e0bfff17 	ldw	r2,-4(fp)
811054ec:	10000a15 	stw	zero,40(r2)
		}

		bStatus = TRUE;
811054f0:	00800044 	movi	r2,1
811054f4:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811054f8:	e0bffd17 	ldw	r2,-12(fp)
}
811054fc:	e037883a 	mov	sp,fp
81105500:	dfc00117 	ldw	ra,4(sp)
81105504:	df000017 	ldw	fp,0(sp)
81105508:	dec00204 	addi	sp,sp,8
8110550c:	f800283a 	ret

81105510 <bSpwcInitCh>:

bool bSpwcInitCh(TSpwcChannel *pxSpwcCh, alt_u8 ucCommCh) {
81105510:	defffb04 	addi	sp,sp,-20
81105514:	de00012e 	bgeu	sp,et,8110551c <bSpwcInitCh+0xc>
81105518:	003b68fa 	trap	3
8110551c:	dfc00415 	stw	ra,16(sp)
81105520:	df000315 	stw	fp,12(sp)
81105524:	df000304 	addi	fp,sp,12
81105528:	e13ffe15 	stw	r4,-8(fp)
8110552c:	2805883a 	mov	r2,r5
81105530:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
81105534:	e03ffd15 	stw	zero,-12(fp)

	if (pxSpwcCh != NULL) {
81105538:	e0bffe17 	ldw	r2,-8(fp)
8110553c:	10004c26 	beq	r2,zero,81105670 <bSpwcInitCh+0x160>
		bStatus = TRUE;
81105540:	00800044 	movi	r2,1
81105544:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
81105548:	e0bfff03 	ldbu	r2,-4(fp)
8110554c:	10c00268 	cmpgeui	r3,r2,9
81105550:	1800371e 	bne	r3,zero,81105630 <bSpwcInitCh+0x120>
81105554:	100690ba 	slli	r3,r2,2
81105558:	00a04434 	movhi	r2,33040
8110555c:	10955b04 	addi	r2,r2,21868
81105560:	1885883a 	add	r2,r3,r2
81105564:	10800017 	ldw	r2,0(r2)
81105568:	1000683a 	jmp	r2
8110556c:	81105630 	cmpltui	r4,r16,16728
81105570:	81105590 	cmplti	r4,r16,16726
81105574:	811055a4 	muli	r4,r16,16726
81105578:	811055b8 	rdprs	r4,r16,16726
8110557c:	811055cc 	andi	r4,r16,16727
81105580:	811055e0 	cmpeqi	r4,r16,16727
81105584:	811055f4 	orhi	r4,r16,16727
81105588:	81105608 	cmpgei	r4,r16,16728
8110558c:	8110561c 	xori	r4,r16,16728
		case eCommSpwCh1:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81105590:	e0fffe17 	ldw	r3,-8(fp)
81105594:	00a04834 	movhi	r2,33056
81105598:	108b0004 	addi	r2,r2,11264
8110559c:	18800015 	stw	r2,0(r3)
			break;
811055a0:	00002506 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh2:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
811055a4:	e0fffe17 	ldw	r3,-8(fp)
811055a8:	00a04834 	movhi	r2,33056
811055ac:	108a0004 	addi	r2,r2,10240
811055b0:	18800015 	stw	r2,0(r3)
			break;
811055b4:	00002006 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh3:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
811055b8:	e0fffe17 	ldw	r3,-8(fp)
811055bc:	00a04834 	movhi	r2,33056
811055c0:	10890004 	addi	r2,r2,9216
811055c4:	18800015 	stw	r2,0(r3)
			break;
811055c8:	00001b06 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh4:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
811055cc:	e0fffe17 	ldw	r3,-8(fp)
811055d0:	00a04834 	movhi	r2,33056
811055d4:	10880004 	addi	r2,r2,8192
811055d8:	18800015 	stw	r2,0(r3)
			break;
811055dc:	00001606 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh5:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
811055e0:	e0fffe17 	ldw	r3,-8(fp)
811055e4:	00a04834 	movhi	r2,33056
811055e8:	10870004 	addi	r2,r2,7168
811055ec:	18800015 	stw	r2,0(r3)
			break;
811055f0:	00001106 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh6:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
811055f4:	e0fffe17 	ldw	r3,-8(fp)
811055f8:	00a04834 	movhi	r2,33056
811055fc:	10860004 	addi	r2,r2,6144
81105600:	18800015 	stw	r2,0(r3)
			break;
81105604:	00000c06 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh7:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81105608:	e0fffe17 	ldw	r3,-8(fp)
8110560c:	00a04834 	movhi	r2,33056
81105610:	10850004 	addi	r2,r2,5120
81105614:	18800015 	stw	r2,0(r3)
			break;
81105618:	00000706 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh8:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
8110561c:	e0fffe17 	ldw	r3,-8(fp)
81105620:	00a04834 	movhi	r2,33056
81105624:	10840004 	addi	r2,r2,4096
81105628:	18800015 	stw	r2,0(r3)
			break;
8110562c:	00000206 	br	81105638 <bSpwcInitCh+0x128>
		default:
			bStatus = FALSE;
81105630:	e03ffd15 	stw	zero,-12(fp)
			break;
81105634:	0001883a 	nop
		}

		if (bStatus) {
81105638:	e0bffd17 	ldw	r2,-12(fp)
8110563c:	10000c26 	beq	r2,zero,81105670 <bSpwcInitCh+0x160>
//			if (!bFeebGetWindowing(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
			if (!bSpwcGetLink(pxSpwcCh)) {
81105640:	e13ffe17 	ldw	r4,-8(fp)
81105644:	110527c0 	call	8110527c <bSpwcGetLink>
81105648:	1000011e 	bne	r2,zero,81105650 <bSpwcInitCh+0x140>
				bStatus = FALSE;
8110564c:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkError(pxSpwcCh)) {
81105650:	e13ffe17 	ldw	r4,-8(fp)
81105654:	110534c0 	call	8110534c <bSpwcGetLinkError>
81105658:	1000011e 	bne	r2,zero,81105660 <bSpwcInitCh+0x150>
				bStatus = FALSE;
8110565c:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkStatus(pxSpwcCh)) {
81105660:	e13ffe17 	ldw	r4,-8(fp)
81105664:	11054400 	call	81105440 <bSpwcGetLinkStatus>
81105668:	1000011e 	bne	r2,zero,81105670 <bSpwcInitCh+0x160>
				bStatus = FALSE;
8110566c:	e03ffd15 	stw	zero,-12(fp)
//			if (!bFeebGetBuffersStatus(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
		}
	}
	return bStatus;
81105670:	e0bffd17 	ldw	r2,-12(fp)
}
81105674:	e037883a 	mov	sp,fp
81105678:	dfc00117 	ldw	ra,4(sp)
8110567c:	df000017 	ldw	fp,0(sp)
81105680:	dec00204 	addi	sp,sp,8
81105684:	f800283a 	ret

81105688 <vSpwcWriteReg>:
//! [public functions]

//! [private functions]
static void vSpwcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81105688:	defffc04 	addi	sp,sp,-16
8110568c:	de00012e 	bgeu	sp,et,81105694 <vSpwcWriteReg+0xc>
81105690:	003b68fa 	trap	3
81105694:	df000315 	stw	fp,12(sp)
81105698:	df000304 	addi	fp,sp,12
8110569c:	e13ffd15 	stw	r4,-12(fp)
811056a0:	e17ffe15 	stw	r5,-8(fp)
811056a4:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
811056a8:	e0bffe17 	ldw	r2,-8(fp)
811056ac:	1085883a 	add	r2,r2,r2
811056b0:	1085883a 	add	r2,r2,r2
811056b4:	1007883a 	mov	r3,r2
811056b8:	e0bffd17 	ldw	r2,-12(fp)
811056bc:	10c5883a 	add	r2,r2,r3
811056c0:	e0ffff17 	ldw	r3,-4(fp)
811056c4:	10c00015 	stw	r3,0(r2)
}
811056c8:	0001883a 	nop
811056cc:	e037883a 	mov	sp,fp
811056d0:	df000017 	ldw	fp,0(sp)
811056d4:	dec00104 	addi	sp,sp,4
811056d8:	f800283a 	ret

811056dc <uliSpwcReadReg>:

static alt_u32 uliSpwcReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
811056dc:	defffc04 	addi	sp,sp,-16
811056e0:	de00012e 	bgeu	sp,et,811056e8 <uliSpwcReadReg+0xc>
811056e4:	003b68fa 	trap	3
811056e8:	df000315 	stw	fp,12(sp)
811056ec:	df000304 	addi	fp,sp,12
811056f0:	e13ffe15 	stw	r4,-8(fp)
811056f4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811056f8:	e0bfff17 	ldw	r2,-4(fp)
811056fc:	1085883a 	add	r2,r2,r2
81105700:	1085883a 	add	r2,r2,r2
81105704:	1007883a 	mov	r3,r2
81105708:	e0bffe17 	ldw	r2,-8(fp)
8110570c:	10c5883a 	add	r2,r2,r3
81105710:	10800017 	ldw	r2,0(r2)
81105714:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105718:	e0bffd17 	ldw	r2,-12(fp)
}
8110571c:	e037883a 	mov	sp,fp
81105720:	df000017 	ldw	fp,0(sp)
81105724:	dec00104 	addi	sp,sp,4
81105728:	f800283a 	ret

8110572c <bEnableIsoDrivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bEnableIsoDrivers(void)
{
8110572c:	defffe04 	addi	sp,sp,-8
81105730:	de00012e 	bgeu	sp,et,81105738 <bEnableIsoDrivers+0xc>
81105734:	003b68fa 	trap	3
81105738:	dfc00115 	stw	ra,4(sp)
8110573c:	df000015 	stw	fp,0(sp)
81105740:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_EN_ISO_DRIVERS_MSK);
81105744:	01400204 	movi	r5,8
81105748:	01000044 	movi	r4,1
8110574c:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
81105750:	00800044 	movi	r2,1
}
81105754:	e037883a 	mov	sp,fp
81105758:	dfc00117 	ldw	ra,4(sp)
8110575c:	df000017 	ldw	fp,0(sp)
81105760:	dec00204 	addi	sp,sp,8
81105764:	f800283a 	ret

81105768 <bDisableIsoDrivers>:

bool bDisableIsoDrivers(void)
{
81105768:	defffe04 	addi	sp,sp,-8
8110576c:	de00012e 	bgeu	sp,et,81105774 <bDisableIsoDrivers+0xc>
81105770:	003b68fa 	trap	3
81105774:	dfc00115 	stw	ra,4(sp)
81105778:	df000015 	stw	fp,0(sp)
8110577c:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_EN_ISO_DRIVERS_MSK);
81105780:	01400204 	movi	r5,8
81105784:	0009883a 	mov	r4,zero
81105788:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
8110578c:	00800044 	movi	r2,1
}
81105790:	e037883a 	mov	sp,fp
81105794:	dfc00117 	ldw	ra,4(sp)
81105798:	df000017 	ldw	fp,0(sp)
8110579c:	dec00204 	addi	sp,sp,8
811057a0:	f800283a 	ret

811057a4 <bEnableLvdsBoard>:

bool bEnableLvdsBoard(void)
{
811057a4:	defffe04 	addi	sp,sp,-8
811057a8:	de00012e 	bgeu	sp,et,811057b0 <bEnableLvdsBoard+0xc>
811057ac:	003b68fa 	trap	3
811057b0:	dfc00115 	stw	ra,4(sp)
811057b4:	df000015 	stw	fp,0(sp)
811057b8:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PWDN_MSK);
811057bc:	01400104 	movi	r5,4
811057c0:	01000044 	movi	r4,1
811057c4:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
811057c8:	00800044 	movi	r2,1
}
811057cc:	e037883a 	mov	sp,fp
811057d0:	dfc00117 	ldw	ra,4(sp)
811057d4:	df000017 	ldw	fp,0(sp)
811057d8:	dec00204 	addi	sp,sp,8
811057dc:	f800283a 	ret

811057e0 <bDisableLvdsBoard>:

bool bDisableLvdsBoard(void)
{
811057e0:	defffe04 	addi	sp,sp,-8
811057e4:	de00012e 	bgeu	sp,et,811057ec <bDisableLvdsBoard+0xc>
811057e8:	003b68fa 	trap	3
811057ec:	dfc00115 	stw	ra,4(sp)
811057f0:	df000015 	stw	fp,0(sp)
811057f4:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PWDN_MSK);
811057f8:	01400104 	movi	r5,4
811057fc:	0009883a 	mov	r4,zero
81105800:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
81105804:	00800044 	movi	r2,1
}
81105808:	e037883a 	mov	sp,fp
8110580c:	dfc00117 	ldw	ra,4(sp)
81105810:	df000017 	ldw	fp,0(sp)
81105814:	dec00204 	addi	sp,sp,8
81105818:	f800283a 	ret

8110581c <bSetPreEmphasys>:

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
8110581c:	defffd04 	addi	sp,sp,-12
81105820:	de00012e 	bgeu	sp,et,81105828 <bSetPreEmphasys+0xc>
81105824:	003b68fa 	trap	3
81105828:	dfc00215 	stw	ra,8(sp)
8110582c:	df000115 	stw	fp,4(sp)
81105830:	df000104 	addi	fp,sp,4
81105834:	2005883a 	mov	r2,r4
81105838:	e0bfff05 	stb	r2,-4(fp)
  switch (ucPemLevel) {
8110583c:	e0bfff03 	ldbu	r2,-4(fp)
81105840:	10c00060 	cmpeqi	r3,r2,1
81105844:	18000d1e 	bne	r3,zero,8110587c <bSetPreEmphasys+0x60>
81105848:	10c00088 	cmpgei	r3,r2,2
8110584c:	1800021e 	bne	r3,zero,81105858 <bSetPreEmphasys+0x3c>
81105850:	10000626 	beq	r2,zero,8110586c <bSetPreEmphasys+0x50>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105854:	00001b06 	br	811058c4 <bSetPreEmphasys+0xa8>
  return  TRUE;
}

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
81105858:	10c000a0 	cmpeqi	r3,r2,2
8110585c:	18000e1e 	bne	r3,zero,81105898 <bSetPreEmphasys+0x7c>
81105860:	108000e0 	cmpeqi	r2,r2,3
81105864:	1000131e 	bne	r2,zero,811058b4 <bSetPreEmphasys+0x98>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105868:	00001606 	br	811058c4 <bSetPreEmphasys+0xa8>

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
    case LVDS_PEM_OFF:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
8110586c:	014000c4 	movi	r5,3
81105870:	0009883a 	mov	r4,zero
81105874:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
81105878:	00001206 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_LO:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK);
8110587c:	01400084 	movi	r5,2
81105880:	0009883a 	mov	r4,zero
81105884:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM0_MSK);
81105888:	01400044 	movi	r5,1
8110588c:	01000044 	movi	r4,1
81105890:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
81105894:	00000b06 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_MID:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM0_MSK);
81105898:	01400044 	movi	r5,1
8110589c:	0009883a 	mov	r4,zero
811058a0:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM1_MSK);
811058a4:	01400084 	movi	r5,2
811058a8:	01000044 	movi	r4,1
811058ac:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
811058b0:	00000406 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
811058b4:	014000c4 	movi	r5,3
811058b8:	01000044 	movi	r4,1
811058bc:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
811058c0:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
811058c4:	00800044 	movi	r2,1
}
811058c8:	e037883a 	mov	sp,fp
811058cc:	dfc00117 	ldw	ra,4(sp)
811058d0:	df000017 	ldw	fp,0(sp)
811058d4:	dec00204 	addi	sp,sp,8
811058d8:	f800283a 	ret

811058dc <bCtrlIoLvdsDrive>:
 * @param [in] ulliMask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
static bool bCtrlIoLvdsDrive(bool bOnOff, alt_u8 ucMask)
{
811058dc:	defffd04 	addi	sp,sp,-12
811058e0:	de00012e 	bgeu	sp,et,811058e8 <bCtrlIoLvdsDrive+0xc>
811058e4:	003b68fa 	trap	3
811058e8:	df000215 	stw	fp,8(sp)
811058ec:	df000204 	addi	fp,sp,8
811058f0:	e13ffe15 	stw	r4,-8(fp)
811058f4:	2805883a 	mov	r2,r5
811058f8:	e0bfff05 	stb	r2,-4(fp)
  if (bOnOff == LVDS_IO_OFF) {
811058fc:	e0bffe17 	ldw	r2,-8(fp)
81105900:	1000071e 	bne	r2,zero,81105920 <bCtrlIoLvdsDrive+0x44>
	 ucIoValue &= (~ucMask);
81105904:	e0bfff03 	ldbu	r2,-4(fp)
81105908:	0084303a 	nor	r2,zero,r2
8110590c:	1007883a 	mov	r3,r2
81105910:	d0a00103 	ldbu	r2,-32764(gp)
81105914:	1884703a 	and	r2,r3,r2
81105918:	d0a00105 	stb	r2,-32764(gp)
8110591c:	00000406 	br	81105930 <bCtrlIoLvdsDrive+0x54>
  }
  else {
	 ucIoValue |= ucMask;
81105920:	d0e00103 	ldbu	r3,-32764(gp)
81105924:	e0bfff03 	ldbu	r2,-4(fp)
81105928:	1884b03a 	or	r2,r3,r2
8110592c:	d0a00105 	stb	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LVDS_CTRL_IO_LVDS_ADDR_BASE, ucIoValue);
81105930:	d0a00103 	ldbu	r2,-32764(gp)
81105934:	10c03fcc 	andi	r3,r2,255
81105938:	00a00034 	movhi	r2,32768
8110593c:	10822804 	addi	r2,r2,2208
81105940:	10c00035 	stwio	r3,0(r2)
  return TRUE;
81105944:	00800044 	movi	r2,1
}
81105948:	e037883a 	mov	sp,fp
8110594c:	df000017 	ldw	fp,0(sp)
81105950:	dec00104 	addi	sp,sp,4
81105954:	f800283a 	ret

81105958 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
81105958:	defffa04 	addi	sp,sp,-24
8110595c:	de00012e 	bgeu	sp,et,81105964 <I2C_TestAdress+0xc>
81105960:	003b68fa 	trap	3
81105964:	dfc00515 	stw	ra,20(sp)
81105968:	df000415 	stw	fp,16(sp)
8110596c:	df000404 	addi	fp,sp,16
81105970:	e13ffd15 	stw	r4,-12(fp)
81105974:	e17ffe15 	stw	r5,-8(fp)
81105978:	3005883a 	mov	r2,r6
8110597c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105980:	00800044 	movi	r2,1
81105984:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105988:	e17ffe17 	ldw	r5,-8(fp)
8110598c:	e13ffd17 	ldw	r4,-12(fp)
81105990:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105994:	e0bfff03 	ldbu	r2,-4(fp)
81105998:	10803fcc 	andi	r2,r2,255
8110599c:	100d883a 	mov	r6,r2
811059a0:	e17ffe17 	ldw	r5,-8(fp)
811059a4:	e13ffd17 	ldw	r4,-12(fp)
811059a8:	1105e3c0 	call	81105e3c <i2c_write>
811059ac:	1000011e 	bne	r2,zero,811059b4 <I2C_TestAdress+0x5c>
        bSuccess = FALSE;
811059b0:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811059b4:	e17ffe17 	ldw	r5,-8(fp)
811059b8:	e13ffd17 	ldw	r4,-12(fp)
811059bc:	1105dbc0 	call	81105dbc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
811059c0:	0106d604 	movi	r4,7000
811059c4:	11263700 	call	81126370 <usleep>
    
    return bSuccess;
811059c8:	e0bffc17 	ldw	r2,-16(fp)

}
811059cc:	e037883a 	mov	sp,fp
811059d0:	dfc00117 	ldw	ra,4(sp)
811059d4:	df000017 	ldw	fp,0(sp)
811059d8:	dec00204 	addi	sp,sp,8
811059dc:	f800283a 	ret

811059e0 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
811059e0:	defff804 	addi	sp,sp,-32
811059e4:	de00012e 	bgeu	sp,et,811059ec <I2C_Write+0xc>
811059e8:	003b68fa 	trap	3
811059ec:	dfc00715 	stw	ra,28(sp)
811059f0:	df000615 	stw	fp,24(sp)
811059f4:	df000604 	addi	fp,sp,24
811059f8:	e13ffb15 	stw	r4,-20(fp)
811059fc:	e17ffc15 	stw	r5,-16(fp)
81105a00:	3009883a 	mov	r4,r6
81105a04:	3807883a 	mov	r3,r7
81105a08:	e0800217 	ldw	r2,8(fp)
81105a0c:	e13ffd05 	stb	r4,-12(fp)
81105a10:	e0fffe05 	stb	r3,-8(fp)
81105a14:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105a18:	00800044 	movi	r2,1
81105a1c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105a20:	e17ffc17 	ldw	r5,-16(fp)
81105a24:	e13ffb17 	ldw	r4,-20(fp)
81105a28:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a2c:	e0bffd03 	ldbu	r2,-12(fp)
81105a30:	10803fcc 	andi	r2,r2,255
81105a34:	100d883a 	mov	r6,r2
81105a38:	e17ffc17 	ldw	r5,-16(fp)
81105a3c:	e13ffb17 	ldw	r4,-20(fp)
81105a40:	1105e3c0 	call	81105e3c <i2c_write>
81105a44:	1000011e 	bne	r2,zero,81105a4c <I2C_Write+0x6c>
        bSuccess = FALSE;
81105a48:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105a4c:	e0bffa17 	ldw	r2,-24(fp)
81105a50:	10000726 	beq	r2,zero,81105a70 <I2C_Write+0x90>
81105a54:	e0bffe03 	ldbu	r2,-8(fp)
81105a58:	100d883a 	mov	r6,r2
81105a5c:	e17ffc17 	ldw	r5,-16(fp)
81105a60:	e13ffb17 	ldw	r4,-20(fp)
81105a64:	1105e3c0 	call	81105e3c <i2c_write>
81105a68:	1000011e 	bne	r2,zero,81105a70 <I2C_Write+0x90>
        bSuccess = FALSE;
81105a6c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105a70:	e0bffa17 	ldw	r2,-24(fp)
81105a74:	10000726 	beq	r2,zero,81105a94 <I2C_Write+0xb4>
81105a78:	e0bfff03 	ldbu	r2,-4(fp)
81105a7c:	100d883a 	mov	r6,r2
81105a80:	e17ffc17 	ldw	r5,-16(fp)
81105a84:	e13ffb17 	ldw	r4,-20(fp)
81105a88:	1105e3c0 	call	81105e3c <i2c_write>
81105a8c:	1000011e 	bne	r2,zero,81105a94 <I2C_Write+0xb4>
        bSuccess = FALSE;
81105a90:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105a94:	e17ffc17 	ldw	r5,-16(fp)
81105a98:	e13ffb17 	ldw	r4,-20(fp)
81105a9c:	1105dbc0 	call	81105dbc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105aa0:	0106d604 	movi	r4,7000
81105aa4:	11263700 	call	81126370 <usleep>
    
    return bSuccess;
81105aa8:	e0bffa17 	ldw	r2,-24(fp)

}
81105aac:	e037883a 	mov	sp,fp
81105ab0:	dfc00117 	ldw	ra,4(sp)
81105ab4:	df000017 	ldw	fp,0(sp)
81105ab8:	dec00204 	addi	sp,sp,8
81105abc:	f800283a 	ret

81105ac0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105ac0:	defff904 	addi	sp,sp,-28
81105ac4:	de00012e 	bgeu	sp,et,81105acc <I2C_Read+0xc>
81105ac8:	003b68fa 	trap	3
81105acc:	dfc00615 	stw	ra,24(sp)
81105ad0:	df000515 	stw	fp,20(sp)
81105ad4:	df000504 	addi	fp,sp,20
81105ad8:	e13ffc15 	stw	r4,-16(fp)
81105adc:	e17ffd15 	stw	r5,-12(fp)
81105ae0:	3007883a 	mov	r3,r6
81105ae4:	3805883a 	mov	r2,r7
81105ae8:	e0fffe05 	stb	r3,-8(fp)
81105aec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105af0:	00800044 	movi	r2,1
81105af4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105af8:	e17ffd17 	ldw	r5,-12(fp)
81105afc:	e13ffc17 	ldw	r4,-16(fp)
81105b00:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105b04:	e0bffe03 	ldbu	r2,-8(fp)
81105b08:	10803fcc 	andi	r2,r2,255
81105b0c:	100d883a 	mov	r6,r2
81105b10:	e17ffd17 	ldw	r5,-12(fp)
81105b14:	e13ffc17 	ldw	r4,-16(fp)
81105b18:	1105e3c0 	call	81105e3c <i2c_write>
81105b1c:	1000011e 	bne	r2,zero,81105b24 <I2C_Read+0x64>
        bSuccess = FALSE;
81105b20:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105b24:	e0bffb17 	ldw	r2,-20(fp)
81105b28:	10000726 	beq	r2,zero,81105b48 <I2C_Read+0x88>
81105b2c:	e0bfff03 	ldbu	r2,-4(fp)
81105b30:	100d883a 	mov	r6,r2
81105b34:	e17ffd17 	ldw	r5,-12(fp)
81105b38:	e13ffc17 	ldw	r4,-16(fp)
81105b3c:	1105e3c0 	call	81105e3c <i2c_write>
81105b40:	1000011e 	bne	r2,zero,81105b48 <I2C_Read+0x88>
        bSuccess = FALSE;
81105b44:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81105b48:	e17ffd17 	ldw	r5,-12(fp)
81105b4c:	e13ffc17 	ldw	r4,-16(fp)
81105b50:	1105d280 	call	81105d28 <i2c_start>
    DeviceAddr |= 1; // Read
81105b54:	e0bffe03 	ldbu	r2,-8(fp)
81105b58:	10800054 	ori	r2,r2,1
81105b5c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105b60:	e0bffb17 	ldw	r2,-20(fp)
81105b64:	10000826 	beq	r2,zero,81105b88 <I2C_Read+0xc8>
81105b68:	e0bffe03 	ldbu	r2,-8(fp)
81105b6c:	10803fcc 	andi	r2,r2,255
81105b70:	100d883a 	mov	r6,r2
81105b74:	e17ffd17 	ldw	r5,-12(fp)
81105b78:	e13ffc17 	ldw	r4,-16(fp)
81105b7c:	1105e3c0 	call	81105e3c <i2c_write>
81105b80:	1000011e 	bne	r2,zero,81105b88 <I2C_Read+0xc8>
        bSuccess = FALSE;
81105b84:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105b88:	e0bffb17 	ldw	r2,-20(fp)
81105b8c:	10000526 	beq	r2,zero,81105ba4 <I2C_Read+0xe4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105b90:	000f883a 	mov	r7,zero
81105b94:	e1800217 	ldw	r6,8(fp)
81105b98:	e17ffd17 	ldw	r5,-12(fp)
81105b9c:	e13ffc17 	ldw	r4,-16(fp)
81105ba0:	1105f740 	call	81105f74 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105ba4:	e17ffd17 	ldw	r5,-12(fp)
81105ba8:	e13ffc17 	ldw	r4,-16(fp)
81105bac:	1105dbc0 	call	81105dbc <i2c_stop>
    
    return bSuccess;
81105bb0:	e0bffb17 	ldw	r2,-20(fp)
}
81105bb4:	e037883a 	mov	sp,fp
81105bb8:	dfc00117 	ldw	ra,4(sp)
81105bbc:	df000017 	ldw	fp,0(sp)
81105bc0:	dec00204 	addi	sp,sp,8
81105bc4:	f800283a 	ret

81105bc8 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81105bc8:	defff604 	addi	sp,sp,-40
81105bcc:	de00012e 	bgeu	sp,et,81105bd4 <I2C_MultipleRead+0xc>
81105bd0:	003b68fa 	trap	3
81105bd4:	dfc00915 	stw	ra,36(sp)
81105bd8:	df000815 	stw	fp,32(sp)
81105bdc:	df000804 	addi	fp,sp,32
81105be0:	e13ffb15 	stw	r4,-20(fp)
81105be4:	e17ffc15 	stw	r5,-16(fp)
81105be8:	3007883a 	mov	r3,r6
81105bec:	e1fffe15 	stw	r7,-8(fp)
81105bf0:	e0800217 	ldw	r2,8(fp)
81105bf4:	e0fffd05 	stb	r3,-12(fp)
81105bf8:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81105bfc:	00800044 	movi	r2,1
81105c00:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81105c04:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105c08:	e17ffc17 	ldw	r5,-16(fp)
81105c0c:	e13ffb17 	ldw	r4,-20(fp)
81105c10:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105c14:	e0bffd03 	ldbu	r2,-12(fp)
81105c18:	10803fcc 	andi	r2,r2,255
81105c1c:	100d883a 	mov	r6,r2
81105c20:	e17ffc17 	ldw	r5,-16(fp)
81105c24:	e13ffb17 	ldw	r4,-20(fp)
81105c28:	1105e3c0 	call	81105e3c <i2c_write>
81105c2c:	1000011e 	bne	r2,zero,81105c34 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
81105c30:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105c34:	e0bff917 	ldw	r2,-28(fp)
81105c38:	10000726 	beq	r2,zero,81105c58 <I2C_MultipleRead+0x90>
81105c3c:	e0bffa03 	ldbu	r2,-24(fp)
81105c40:	100d883a 	mov	r6,r2
81105c44:	e17ffc17 	ldw	r5,-16(fp)
81105c48:	e13ffb17 	ldw	r4,-20(fp)
81105c4c:	1105e3c0 	call	81105e3c <i2c_write>
81105c50:	1000011e 	bne	r2,zero,81105c58 <I2C_MultipleRead+0x90>
        bSuccess = FALSE;
81105c54:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81105c58:	e0bff917 	ldw	r2,-28(fp)
81105c5c:	10000326 	beq	r2,zero,81105c6c <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
81105c60:	e17ffc17 	ldw	r5,-16(fp)
81105c64:	e13ffb17 	ldw	r4,-20(fp)
81105c68:	1105d280 	call	81105d28 <i2c_start>
    DeviceAddr |= 1; // Read
81105c6c:	e0bffd03 	ldbu	r2,-12(fp)
81105c70:	10800054 	ori	r2,r2,1
81105c74:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105c78:	e0bff917 	ldw	r2,-28(fp)
81105c7c:	10000826 	beq	r2,zero,81105ca0 <I2C_MultipleRead+0xd8>
81105c80:	e0bffd03 	ldbu	r2,-12(fp)
81105c84:	10803fcc 	andi	r2,r2,255
81105c88:	100d883a 	mov	r6,r2
81105c8c:	e17ffc17 	ldw	r5,-16(fp)
81105c90:	e13ffb17 	ldw	r4,-20(fp)
81105c94:	1105e3c0 	call	81105e3c <i2c_write>
81105c98:	1000011e 	bne	r2,zero,81105ca0 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
81105c9c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105ca0:	e0bff917 	ldw	r2,-28(fp)
81105ca4:	10001726 	beq	r2,zero,81105d04 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
81105ca8:	e03ff815 	stw	zero,-32(fp)
81105cac:	00001006 	br	81105cf0 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105cb0:	e0bff817 	ldw	r2,-32(fp)
81105cb4:	e0fffe17 	ldw	r3,-8(fp)
81105cb8:	1889883a 	add	r4,r3,r2
81105cbc:	e0bfff0b 	ldhu	r2,-4(fp)
81105cc0:	10ffffc4 	addi	r3,r2,-1
81105cc4:	e0bff817 	ldw	r2,-32(fp)
81105cc8:	1884c03a 	cmpne	r2,r3,r2
81105ccc:	10803fcc 	andi	r2,r2,255
81105cd0:	100f883a 	mov	r7,r2
81105cd4:	200d883a 	mov	r6,r4
81105cd8:	e17ffc17 	ldw	r5,-16(fp)
81105cdc:	e13ffb17 	ldw	r4,-20(fp)
81105ce0:	1105f740 	call	81105f74 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81105ce4:	e0bff817 	ldw	r2,-32(fp)
81105ce8:	10800044 	addi	r2,r2,1
81105cec:	e0bff815 	stw	r2,-32(fp)
81105cf0:	e0bfff0b 	ldhu	r2,-4(fp)
81105cf4:	e0fff817 	ldw	r3,-32(fp)
81105cf8:	1880020e 	bge	r3,r2,81105d04 <I2C_MultipleRead+0x13c>
81105cfc:	e0bff917 	ldw	r2,-28(fp)
81105d00:	103feb1e 	bne	r2,zero,81105cb0 <__reset+0xfb0e5cb0>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81105d04:	e17ffc17 	ldw	r5,-16(fp)
81105d08:	e13ffb17 	ldw	r4,-20(fp)
81105d0c:	1105dbc0 	call	81105dbc <i2c_stop>
    
    return bSuccess;    
81105d10:	e0bff917 	ldw	r2,-28(fp)
    
}
81105d14:	e037883a 	mov	sp,fp
81105d18:	dfc00117 	ldw	ra,4(sp)
81105d1c:	df000017 	ldw	fp,0(sp)
81105d20:	dec00204 	addi	sp,sp,8
81105d24:	f800283a 	ret

81105d28 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105d28:	defffc04 	addi	sp,sp,-16
81105d2c:	de00012e 	bgeu	sp,et,81105d34 <i2c_start+0xc>
81105d30:	003b68fa 	trap	3
81105d34:	dfc00315 	stw	ra,12(sp)
81105d38:	df000215 	stw	fp,8(sp)
81105d3c:	df000204 	addi	fp,sp,8
81105d40:	e13ffe15 	stw	r4,-8(fp)
81105d44:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105d48:	e0bfff17 	ldw	r2,-4(fp)
81105d4c:	10800104 	addi	r2,r2,4
81105d50:	1007883a 	mov	r3,r2
81105d54:	00800044 	movi	r2,1
81105d58:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81105d5c:	e0bfff17 	ldw	r2,-4(fp)
81105d60:	00c00044 	movi	r3,1
81105d64:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81105d68:	e0bffe17 	ldw	r2,-8(fp)
81105d6c:	00c00044 	movi	r3,1
81105d70:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105d74:	01000044 	movi	r4,1
81105d78:	11263700 	call	81126370 <usleep>
     
    SDA_LOW(data_base); // data low
81105d7c:	e0bfff17 	ldw	r2,-4(fp)
81105d80:	0007883a 	mov	r3,zero
81105d84:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81105d88:	01000044 	movi	r4,1
81105d8c:	11263700 	call	81126370 <usleep>
    SCL_LOW(clk_base); // clock low
81105d90:	e0bffe17 	ldw	r2,-8(fp)
81105d94:	0007883a 	mov	r3,zero
81105d98:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105d9c:	01000044 	movi	r4,1
81105da0:	11263700 	call	81126370 <usleep>
}
81105da4:	0001883a 	nop
81105da8:	e037883a 	mov	sp,fp
81105dac:	dfc00117 	ldw	ra,4(sp)
81105db0:	df000017 	ldw	fp,0(sp)
81105db4:	dec00204 	addi	sp,sp,8
81105db8:	f800283a 	ret

81105dbc <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81105dbc:	defffc04 	addi	sp,sp,-16
81105dc0:	de00012e 	bgeu	sp,et,81105dc8 <i2c_stop+0xc>
81105dc4:	003b68fa 	trap	3
81105dc8:	dfc00315 	stw	ra,12(sp)
81105dcc:	df000215 	stw	fp,8(sp)
81105dd0:	df000204 	addi	fp,sp,8
81105dd4:	e13ffe15 	stw	r4,-8(fp)
81105dd8:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105ddc:	e0bfff17 	ldw	r2,-4(fp)
81105de0:	10800104 	addi	r2,r2,4
81105de4:	1007883a 	mov	r3,r2
81105de8:	00800044 	movi	r2,1
81105dec:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105df0:	e0bfff17 	ldw	r2,-4(fp)
81105df4:	0007883a 	mov	r3,zero
81105df8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81105dfc:	e0bffe17 	ldw	r2,-8(fp)
81105e00:	00c00044 	movi	r3,1
81105e04:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81105e08:	01000044 	movi	r4,1
81105e0c:	11263700 	call	81126370 <usleep>
    SDA_HIGH(data_base); // data high
81105e10:	e0bfff17 	ldw	r2,-4(fp)
81105e14:	00c00044 	movi	r3,1
81105e18:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81105e1c:	01000044 	movi	r4,1
81105e20:	11263700 	call	81126370 <usleep>
    

    
}
81105e24:	0001883a 	nop
81105e28:	e037883a 	mov	sp,fp
81105e2c:	dfc00117 	ldw	ra,4(sp)
81105e30:	df000017 	ldw	fp,0(sp)
81105e34:	dec00204 	addi	sp,sp,8
81105e38:	f800283a 	ret

81105e3c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105e3c:	defff804 	addi	sp,sp,-32
81105e40:	de00012e 	bgeu	sp,et,81105e48 <i2c_write+0xc>
81105e44:	003b68fa 	trap	3
81105e48:	dfc00715 	stw	ra,28(sp)
81105e4c:	df000615 	stw	fp,24(sp)
81105e50:	df000604 	addi	fp,sp,24
81105e54:	e13ffd15 	stw	r4,-12(fp)
81105e58:	e17ffe15 	stw	r5,-8(fp)
81105e5c:	3005883a 	mov	r2,r6
81105e60:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105e64:	00bfe004 	movi	r2,-128
81105e68:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81105e6c:	e0bffe17 	ldw	r2,-8(fp)
81105e70:	10800104 	addi	r2,r2,4
81105e74:	1007883a 	mov	r3,r2
81105e78:	00800044 	movi	r2,1
81105e7c:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105e80:	e03ffb15 	stw	zero,-20(fp)
81105e84:	00001f06 	br	81105f04 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81105e88:	e0bffd17 	ldw	r2,-12(fp)
81105e8c:	0007883a 	mov	r3,zero
81105e90:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105e94:	e0ffff03 	ldbu	r3,-4(fp)
81105e98:	e0bffa03 	ldbu	r2,-24(fp)
81105e9c:	1884703a 	and	r2,r3,r2
81105ea0:	10803fcc 	andi	r2,r2,255
81105ea4:	10000426 	beq	r2,zero,81105eb8 <i2c_write+0x7c>
            SDA_HIGH(data_base);
81105ea8:	e0bffe17 	ldw	r2,-8(fp)
81105eac:	00c00044 	movi	r3,1
81105eb0:	10c00035 	stwio	r3,0(r2)
81105eb4:	00000306 	br	81105ec4 <i2c_write+0x88>
        }else{    
            SDA_LOW(data_base);
81105eb8:	e0bffe17 	ldw	r2,-8(fp)
81105ebc:	0007883a 	mov	r3,zero
81105ec0:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105ec4:	e0bffa03 	ldbu	r2,-24(fp)
81105ec8:	1004d07a 	srli	r2,r2,1
81105ecc:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105ed0:	e0bffd17 	ldw	r2,-12(fp)
81105ed4:	00c00044 	movi	r3,1
81105ed8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105edc:	01000044 	movi	r4,1
81105ee0:	11263700 	call	81126370 <usleep>
        SCL_LOW(clk_base);
81105ee4:	e0bffd17 	ldw	r2,-12(fp)
81105ee8:	0007883a 	mov	r3,zero
81105eec:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105ef0:	01000044 	movi	r4,1
81105ef4:	11263700 	call	81126370 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81105ef8:	e0bffb17 	ldw	r2,-20(fp)
81105efc:	10800044 	addi	r2,r2,1
81105f00:	e0bffb15 	stw	r2,-20(fp)
81105f04:	e0bffb17 	ldw	r2,-20(fp)
81105f08:	10800210 	cmplti	r2,r2,8
81105f0c:	103fde1e 	bne	r2,zero,81105e88 <__reset+0xfb0e5e88>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81105f10:	e0bffe17 	ldw	r2,-8(fp)
81105f14:	10800104 	addi	r2,r2,4
81105f18:	0007883a 	mov	r3,zero
81105f1c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81105f20:	e0bffd17 	ldw	r2,-12(fp)
81105f24:	00c00044 	movi	r3,1
81105f28:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81105f2c:	01000044 	movi	r4,1
81105f30:	11263700 	call	81126370 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81105f34:	e0bffe17 	ldw	r2,-8(fp)
81105f38:	10800037 	ldwio	r2,0(r2)
81105f3c:	1005003a 	cmpeq	r2,r2,zero
81105f40:	10803fcc 	andi	r2,r2,255
81105f44:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105f48:	e0bffd17 	ldw	r2,-12(fp)
81105f4c:	0007883a 	mov	r3,zero
81105f50:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105f54:	01000044 	movi	r4,1
81105f58:	11263700 	call	81126370 <usleep>
    return bAck;
81105f5c:	e0bffc17 	ldw	r2,-16(fp)
}    
81105f60:	e037883a 	mov	sp,fp
81105f64:	dfc00117 	ldw	ra,4(sp)
81105f68:	df000017 	ldw	fp,0(sp)
81105f6c:	dec00204 	addi	sp,sp,8
81105f70:	f800283a 	ret

81105f74 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105f74:	defff804 	addi	sp,sp,-32
81105f78:	de00012e 	bgeu	sp,et,81105f80 <i2c_read+0xc>
81105f7c:	003b68fa 	trap	3
81105f80:	dfc00715 	stw	ra,28(sp)
81105f84:	df000615 	stw	fp,24(sp)
81105f88:	df000604 	addi	fp,sp,24
81105f8c:	e13ffc15 	stw	r4,-16(fp)
81105f90:	e17ffd15 	stw	r5,-12(fp)
81105f94:	e1bffe15 	stw	r6,-8(fp)
81105f98:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
81105f9c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81105fa0:	e0bffd17 	ldw	r2,-12(fp)
81105fa4:	10800104 	addi	r2,r2,4
81105fa8:	0007883a 	mov	r3,zero
81105fac:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81105fb0:	e0bffc17 	ldw	r2,-16(fp)
81105fb4:	0007883a 	mov	r3,zero
81105fb8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105fbc:	01000044 	movi	r4,1
81105fc0:	11263700 	call	81126370 <usleep>

    for(i=0;i<8;i++){
81105fc4:	e03ffb15 	stw	zero,-20(fp)
81105fc8:	00001606 	br	81106024 <i2c_read+0xb0>
        Data <<= 1;
81105fcc:	e0bffa03 	ldbu	r2,-24(fp)
81105fd0:	1085883a 	add	r2,r2,r2
81105fd4:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81105fd8:	e0bffc17 	ldw	r2,-16(fp)
81105fdc:	00c00044 	movi	r3,1
81105fe0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105fe4:	01000044 	movi	r4,1
81105fe8:	11263700 	call	81126370 <usleep>
        if (SDA_READ(data_base))  // read data   
81105fec:	e0bffd17 	ldw	r2,-12(fp)
81105ff0:	10800037 	ldwio	r2,0(r2)
81105ff4:	10000326 	beq	r2,zero,81106004 <i2c_read+0x90>
            Data |= 0x01;
81105ff8:	e0bffa03 	ldbu	r2,-24(fp)
81105ffc:	10800054 	ori	r2,r2,1
81106000:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
81106004:	e0bffc17 	ldw	r2,-16(fp)
81106008:	0007883a 	mov	r3,zero
8110600c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106010:	01000044 	movi	r4,1
81106014:	11263700 	call	81126370 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81106018:	e0bffb17 	ldw	r2,-20(fp)
8110601c:	10800044 	addi	r2,r2,1
81106020:	e0bffb15 	stw	r2,-20(fp)
81106024:	e0bffb17 	ldw	r2,-20(fp)
81106028:	10800210 	cmplti	r2,r2,8
8110602c:	103fe71e 	bne	r2,zero,81105fcc <__reset+0xfb0e5fcc>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
81106030:	e0bffc17 	ldw	r2,-16(fp)
81106034:	0007883a 	mov	r3,zero
81106038:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
8110603c:	e0bffd17 	ldw	r2,-12(fp)
81106040:	10800104 	addi	r2,r2,4
81106044:	1007883a 	mov	r3,r2
81106048:	00800044 	movi	r2,1
8110604c:	18800035 	stwio	r2,0(r3)
    if (bAck)
81106050:	e0bfff17 	ldw	r2,-4(fp)
81106054:	10000426 	beq	r2,zero,81106068 <i2c_read+0xf4>
        SDA_LOW(data_base);
81106058:	e0bffd17 	ldw	r2,-12(fp)
8110605c:	0007883a 	mov	r3,zero
81106060:	10c00035 	stwio	r3,0(r2)
81106064:	00000306 	br	81106074 <i2c_read+0x100>
    else
        SDA_HIGH(data_base);
81106068:	e0bffd17 	ldw	r2,-12(fp)
8110606c:	00c00044 	movi	r3,1
81106070:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
81106074:	e0bffc17 	ldw	r2,-16(fp)
81106078:	00c00044 	movi	r3,1
8110607c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
81106080:	01000044 	movi	r4,1
81106084:	11263700 	call	81126370 <usleep>
    SCL_LOW(clk_base); // clock low
81106088:	e0bffc17 	ldw	r2,-16(fp)
8110608c:	0007883a 	mov	r3,zero
81106090:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81106094:	01000044 	movi	r4,1
81106098:	11263700 	call	81126370 <usleep>
    SDA_LOW(data_base);  // data low
8110609c:	e0bffd17 	ldw	r2,-12(fp)
811060a0:	0007883a 	mov	r3,zero
811060a4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
811060a8:	01000044 	movi	r4,1
811060ac:	11263700 	call	81126370 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
811060b0:	e0bffe17 	ldw	r2,-8(fp)
811060b4:	e0fffa03 	ldbu	r3,-24(fp)
811060b8:	10c00005 	stb	r3,0(r2)
}
811060bc:	0001883a 	nop
811060c0:	e037883a 	mov	sp,fp
811060c4:	dfc00117 	ldw	ra,4(sp)
811060c8:	df000017 	ldw	fp,0(sp)
811060cc:	dec00204 	addi	sp,sp,8
811060d0:	f800283a 	ret

811060d4 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
811060d4:	defffd04 	addi	sp,sp,-12
811060d8:	de00012e 	bgeu	sp,et,811060e0 <bSetBoardLeds+0xc>
811060dc:	003b68fa 	trap	3
811060e0:	df000215 	stw	fp,8(sp)
811060e4:	df000204 	addi	fp,sp,8
811060e8:	e13ffe15 	stw	r4,-8(fp)
811060ec:	2805883a 	mov	r2,r5
811060f0:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
811060f4:	e0bffe17 	ldw	r2,-8(fp)
811060f8:	10800058 	cmpnei	r2,r2,1
811060fc:	1000071e 	bne	r2,zero,8110611c <bSetBoardLeds+0x48>
	LedsBoardControl &= (~LedsMask);
81106100:	e0bfff03 	ldbu	r2,-4(fp)
81106104:	0084303a 	nor	r2,zero,r2
81106108:	1007883a 	mov	r3,r2
8110610c:	d0a04503 	ldbu	r2,-32492(gp)
81106110:	1884703a 	and	r2,r3,r2
81106114:	d0a04505 	stb	r2,-32492(gp)
81106118:	00000406 	br	8110612c <bSetBoardLeds+0x58>
  } else {
	LedsBoardControl |= LedsMask;
8110611c:	d0e04503 	ldbu	r3,-32492(gp)
81106120:	e0bfff03 	ldbu	r2,-4(fp)
81106124:	1884b03a 	or	r2,r3,r2
81106128:	d0a04505 	stb	r2,-32492(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110612c:	d0a04503 	ldbu	r2,-32492(gp)
81106130:	10c03fcc 	andi	r3,r2,255
81106134:	00a00034 	movhi	r2,32768
81106138:	10827404 	addi	r2,r2,2512
8110613c:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81106140:	00800044 	movi	r2,1
}
81106144:	e037883a 	mov	sp,fp
81106148:	df000017 	ldw	fp,0(sp)
8110614c:	dec00104 	addi	sp,sp,4
81106150:	f800283a 	ret

81106154 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
81106154:	defffd04 	addi	sp,sp,-12
81106158:	de00012e 	bgeu	sp,et,81106160 <bSetPainelLeds+0xc>
8110615c:	003b68fa 	trap	3
81106160:	df000215 	stw	fp,8(sp)
81106164:	df000204 	addi	fp,sp,8
81106168:	e13ffe15 	stw	r4,-8(fp)
8110616c:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
81106170:	e0bffe17 	ldw	r2,-8(fp)
81106174:	10800058 	cmpnei	r2,r2,1
81106178:	1000051e 	bne	r2,zero,81106190 <bSetPainelLeds+0x3c>
	LedsPainelControl |= LedsMask;
8110617c:	d0e00217 	ldw	r3,-32760(gp)
81106180:	e0bfff17 	ldw	r2,-4(fp)
81106184:	1884b03a 	or	r2,r3,r2
81106188:	d0a00215 	stw	r2,-32760(gp)
8110618c:	00000506 	br	811061a4 <bSetPainelLeds+0x50>
  } else {
	LedsPainelControl &= (~LedsMask);
81106190:	e0bfff17 	ldw	r2,-4(fp)
81106194:	0086303a 	nor	r3,zero,r2
81106198:	d0a00217 	ldw	r2,-32760(gp)
8110619c:	1884703a 	and	r2,r3,r2
811061a0:	d0a00215 	stw	r2,-32760(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
811061a4:	d0a00217 	ldw	r2,-32760(gp)
811061a8:	1007883a 	mov	r3,r2
811061ac:	00a00034 	movhi	r2,32768
811061b0:	10824004 	addi	r2,r2,2304
811061b4:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811061b8:	00800044 	movi	r2,1
}
811061bc:	e037883a 	mov	sp,fp
811061c0:	df000017 	ldw	fp,0(sp)
811061c4:	dec00104 	addi	sp,sp,4
811061c8:	f800283a 	ret

811061cc <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
811061cc:	defffc04 	addi	sp,sp,-16
811061d0:	de00012e 	bgeu	sp,et,811061d8 <msgdma_write_extended_descriptor+0xc>
811061d4:	003b68fa 	trap	3
811061d8:	df000315 	stw	fp,12(sp)
811061dc:	df000304 	addi	fp,sp,12
811061e0:	e13ffd15 	stw	r4,-12(fp)
811061e4:	e17ffe15 	stw	r5,-8(fp)
811061e8:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
811061ec:	e0bffd17 	ldw	r2,-12(fp)
811061f0:	10800037 	ldwio	r2,0(r2)
811061f4:	1080010c 	andi	r2,r2,4
811061f8:	10000226 	beq	r2,zero,81106204 <msgdma_write_extended_descriptor+0x38>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
811061fc:	00bff904 	movi	r2,-28
81106200:	00003d06 	br	811062f8 <msgdma_write_extended_descriptor+0x12c>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
81106204:	e0bfff17 	ldw	r2,-4(fp)
81106208:	10800017 	ldw	r2,0(r2)
8110620c:	1007883a 	mov	r3,r2
81106210:	e0bffe17 	ldw	r2,-8(fp)
81106214:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
81106218:	e0bffe17 	ldw	r2,-8(fp)
8110621c:	10800104 	addi	r2,r2,4
81106220:	e0ffff17 	ldw	r3,-4(fp)
81106224:	18c00117 	ldw	r3,4(r3)
81106228:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
8110622c:	e0bffe17 	ldw	r2,-8(fp)
81106230:	10800204 	addi	r2,r2,8
81106234:	e0ffff17 	ldw	r3,-4(fp)
81106238:	18c00217 	ldw	r3,8(r3)
8110623c:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
81106240:	e0bffe17 	ldw	r2,-8(fp)
81106244:	10800304 	addi	r2,r2,12
81106248:	e0ffff17 	ldw	r3,-4(fp)
8110624c:	18c0030b 	ldhu	r3,12(r3)
81106250:	18ffffcc 	andi	r3,r3,65535
81106254:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
81106258:	e0bffe17 	ldw	r2,-8(fp)
8110625c:	10800384 	addi	r2,r2,14
81106260:	e0ffff17 	ldw	r3,-4(fp)
81106264:	18c00383 	ldbu	r3,14(r3)
81106268:	18c03fcc 	andi	r3,r3,255
8110626c:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
81106270:	e0bffe17 	ldw	r2,-8(fp)
81106274:	108003c4 	addi	r2,r2,15
81106278:	e0ffff17 	ldw	r3,-4(fp)
8110627c:	18c003c3 	ldbu	r3,15(r3)
81106280:	18c03fcc 	andi	r3,r3,255
81106284:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
81106288:	e0bffe17 	ldw	r2,-8(fp)
8110628c:	10800404 	addi	r2,r2,16
81106290:	e0ffff17 	ldw	r3,-4(fp)
81106294:	18c0040b 	ldhu	r3,16(r3)
81106298:	18ffffcc 	andi	r3,r3,65535
8110629c:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
811062a0:	e0bffe17 	ldw	r2,-8(fp)
811062a4:	10800484 	addi	r2,r2,18
811062a8:	e0ffff17 	ldw	r3,-4(fp)
811062ac:	18c0048b 	ldhu	r3,18(r3)
811062b0:	18ffffcc 	andi	r3,r3,65535
811062b4:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
811062b8:	e0bffe17 	ldw	r2,-8(fp)
811062bc:	10800504 	addi	r2,r2,20
811062c0:	e0ffff17 	ldw	r3,-4(fp)
811062c4:	18c00517 	ldw	r3,20(r3)
811062c8:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
811062cc:	e0bffe17 	ldw	r2,-8(fp)
811062d0:	10800604 	addi	r2,r2,24
811062d4:	e0ffff17 	ldw	r3,-4(fp)
811062d8:	18c00617 	ldw	r3,24(r3)
811062dc:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
811062e0:	e0bffe17 	ldw	r2,-8(fp)
811062e4:	10800704 	addi	r2,r2,28
811062e8:	e0ffff17 	ldw	r3,-4(fp)
811062ec:	18c00717 	ldw	r3,28(r3)
811062f0:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
811062f4:	0005883a 	mov	r2,zero
}
811062f8:	e037883a 	mov	sp,fp
811062fc:	df000017 	ldw	fp,0(sp)
81106300:	dec00104 	addi	sp,sp,4
81106304:	f800283a 	ret

81106308 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81106308:	defff604 	addi	sp,sp,-40
8110630c:	de00012e 	bgeu	sp,et,81106314 <msgdma_construct_extended_descriptor+0xc>
81106310:	003b68fa 	trap	3
81106314:	df000915 	stw	fp,36(sp)
81106318:	df000904 	addi	fp,sp,36
8110631c:	e13ff715 	stw	r4,-36(fp)
81106320:	e17ff815 	stw	r5,-32(fp)
81106324:	e1bff915 	stw	r6,-28(fp)
81106328:	e1fffa15 	stw	r7,-24(fp)
8110632c:	e1800517 	ldw	r6,20(fp)
81106330:	e1400617 	ldw	r5,24(fp)
81106334:	e1000717 	ldw	r4,28(fp)
81106338:	e0c00817 	ldw	r3,32(fp)
8110633c:	e0800917 	ldw	r2,36(fp)
81106340:	e1bffb0d 	sth	r6,-20(fp)
81106344:	e17ffc05 	stb	r5,-16(fp)
81106348:	e13ffd05 	stb	r4,-12(fp)
8110634c:	e0fffe0d 	sth	r3,-8(fp)
81106350:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
81106354:	e0bff717 	ldw	r2,-36(fp)
81106358:	10c01217 	ldw	r3,72(r2)
8110635c:	e0800117 	ldw	r2,4(fp)
81106360:	18801936 	bltu	r3,r2,811063c8 <msgdma_construct_extended_descriptor+0xc0>
81106364:	e13ff717 	ldw	r4,-36(fp)
81106368:	20801317 	ldw	r2,76(r4)
8110636c:	20c01417 	ldw	r3,80(r4)
81106370:	e13ffe0b 	ldhu	r4,-8(fp)
81106374:	213fffcc 	andi	r4,r4,65535
81106378:	2015883a 	mov	r10,r4
8110637c:	0017883a 	mov	r11,zero
81106380:	1ac01136 	bltu	r3,r11,811063c8 <msgdma_construct_extended_descriptor+0xc0>
81106384:	58c0011e 	bne	r11,r3,8110638c <msgdma_construct_extended_descriptor+0x84>
81106388:	12800f36 	bltu	r2,r10,811063c8 <msgdma_construct_extended_descriptor+0xc0>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
8110638c:	e13ff717 	ldw	r4,-36(fp)
81106390:	20801317 	ldw	r2,76(r4)
81106394:	20c01417 	ldw	r3,80(r4)
81106398:	e13fff0b 	ldhu	r4,-4(fp)
8110639c:	213fffcc 	andi	r4,r4,65535
811063a0:	2011883a 	mov	r8,r4
811063a4:	0013883a 	mov	r9,zero
811063a8:	1a400736 	bltu	r3,r9,811063c8 <msgdma_construct_extended_descriptor+0xc0>
811063ac:	48c0011e 	bne	r9,r3,811063b4 <msgdma_construct_extended_descriptor+0xac>
811063b0:	12000536 	bltu	r2,r8,811063c8 <msgdma_construct_extended_descriptor+0xc0>
811063b4:	e0bff717 	ldw	r2,-36(fp)
811063b8:	10801703 	ldbu	r2,92(r2)
811063bc:	10803fcc 	andi	r2,r2,255
811063c0:	10800060 	cmpeqi	r2,r2,1
811063c4:	1000021e 	bne	r2,zero,811063d0 <msgdma_construct_extended_descriptor+0xc8>
		return -EINVAL;
811063c8:	00bffa84 	movi	r2,-22
811063cc:	00002306 	br	8110645c <msgdma_construct_extended_descriptor+0x154>
	}

	descriptor->read_address_low = read_address;
811063d0:	e0bff817 	ldw	r2,-32(fp)
811063d4:	e0fff917 	ldw	r3,-28(fp)
811063d8:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
811063dc:	e0bff817 	ldw	r2,-32(fp)
811063e0:	e0fffa17 	ldw	r3,-24(fp)
811063e4:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
811063e8:	e0bff817 	ldw	r2,-32(fp)
811063ec:	e0c00117 	ldw	r3,4(fp)
811063f0:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
811063f4:	e0bff817 	ldw	r2,-32(fp)
811063f8:	e0fffb0b 	ldhu	r3,-20(fp)
811063fc:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81106400:	e0bff817 	ldw	r2,-32(fp)
81106404:	e0fffc03 	ldbu	r3,-16(fp)
81106408:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
8110640c:	e0bff817 	ldw	r2,-32(fp)
81106410:	e0fffd03 	ldbu	r3,-12(fp)
81106414:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81106418:	e0bff817 	ldw	r2,-32(fp)
8110641c:	e0fffe0b 	ldhu	r3,-8(fp)
81106420:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
81106424:	e0bff817 	ldw	r2,-32(fp)
81106428:	e0ffff0b 	ldhu	r3,-4(fp)
8110642c:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
81106430:	e0bff817 	ldw	r2,-32(fp)
81106434:	e0c00317 	ldw	r3,12(fp)
81106438:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
8110643c:	e0bff817 	ldw	r2,-32(fp)
81106440:	e0c00417 	ldw	r3,16(fp)
81106444:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81106448:	e0800217 	ldw	r2,8(fp)
8110644c:	10e00034 	orhi	r3,r2,32768
81106450:	e0bff817 	ldw	r2,-32(fp)
81106454:	10c00715 	stw	r3,28(r2)

	return 0;
81106458:	0005883a 	mov	r2,zero

}
8110645c:	e037883a 	mov	sp,fp
81106460:	df000017 	ldw	fp,0(sp)
81106464:	dec00104 	addi	sp,sp,4
81106468:	f800283a 	ret

8110646c <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
8110646c:	deffee04 	addi	sp,sp,-72
81106470:	de00012e 	bgeu	sp,et,81106478 <msgdma_descriptor_async_transfer+0xc>
81106474:	003b68fa 	trap	3
81106478:	dfc01115 	stw	ra,68(sp)
8110647c:	df001015 	stw	fp,64(sp)
81106480:	df001004 	addi	fp,sp,64
81106484:	e13ffd15 	stw	r4,-12(fp)
81106488:	e17ffe15 	stw	r5,-8(fp)
8110648c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106490:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81106494:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81106498:	e03ff00d 	sth	zero,-64(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110649c:	e0bffd17 	ldw	r2,-12(fp)
811064a0:	10800317 	ldw	r2,12(r2)
811064a4:	10800204 	addi	r2,r2,8
811064a8:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
811064ac:	10bfffcc 	andi	r2,r2,65535
811064b0:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811064b4:	e0bffd17 	ldw	r2,-12(fp)
811064b8:	10800317 	ldw	r2,12(r2)
811064bc:	10800204 	addi	r2,r2,8
811064c0:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
811064c4:	1004d43a 	srli	r2,r2,16
811064c8:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811064cc:	e0bffd17 	ldw	r2,-12(fp)
811064d0:	10800917 	ldw	r2,36(r2)
811064d4:	e0fff417 	ldw	r3,-48(fp)
811064d8:	1880042e 	bgeu	r3,r2,811064ec <msgdma_descriptor_async_transfer+0x80>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
811064dc:	e0bffd17 	ldw	r2,-12(fp)
811064e0:	10800917 	ldw	r2,36(r2)
811064e4:	e0fff317 	ldw	r3,-52(fp)
811064e8:	18800236 	bltu	r3,r2,811064f4 <msgdma_descriptor_async_transfer+0x88>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
811064ec:	00bff904 	movi	r2,-28
811064f0:	00009f06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
811064f4:	e0bffd17 	ldw	r2,-12(fp)
811064f8:	10801817 	ldw	r2,96(r2)
811064fc:	e0bff615 	stw	r2,-40(fp)
81106500:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81106504:	e0bffc0b 	ldhu	r2,-16(fp)
81106508:	e0fffc84 	addi	r3,fp,-14
8110650c:	180d883a 	mov	r6,r3
81106510:	100b883a 	mov	r5,r2
81106514:	e13ff617 	ldw	r4,-40(fp)
81106518:	112d1ec0 	call	8112d1ec <OSSemPend>

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8110651c:	00800804 	movi	r2,32
81106520:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106524:	0005303a 	rdctl	r2,status
81106528:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110652c:	e0fff717 	ldw	r3,-36(fp)
81106530:	00bfff84 	movi	r2,-2
81106534:	1884703a 	and	r2,r3,r2
81106538:	1001703a 	wrctl	status,r2
  
  return context;
8110653c:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106540:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106544:	e0bffd17 	ldw	r2,-12(fp)
81106548:	10800317 	ldw	r2,12(r2)
8110654c:	10800104 	addi	r2,r2,4
81106550:	e0fff117 	ldw	r3,-60(fp)
81106554:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106558:	e0bffd17 	ldw	r2,-12(fp)
8110655c:	10800317 	ldw	r2,12(r2)
81106560:	e0fffd17 	ldw	r3,-12(fp)
81106564:	18c00317 	ldw	r3,12(r3)
81106568:	18c00037 	ldwio	r3,0(r3)
8110656c:	10c00035 	stwio	r3,0(r2)
81106570:	e0bff217 	ldw	r2,-56(fp)
81106574:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106578:	e0bffb17 	ldw	r2,-20(fp)
8110657c:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
81106580:	e0bffe17 	ldw	r2,-8(fp)
81106584:	10001026 	beq	r2,zero,811065c8 <msgdma_descriptor_async_transfer+0x15c>
81106588:	e0bfff17 	ldw	r2,-4(fp)
8110658c:	10000e1e 	bne	r2,zero,811065c8 <msgdma_descriptor_async_transfer+0x15c>
		counter = 0; /* reset counter */
81106590:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106594:	d0a04d17 	ldw	r2,-32460(gp)
81106598:	100f883a 	mov	r7,r2
8110659c:	01800784 	movi	r6,30
811065a0:	01400044 	movi	r5,1
811065a4:	01204534 	movhi	r4,33044
811065a8:	212b2904 	addi	r4,r4,-21340
811065ac:	11104940 	call	81110494 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811065b0:	e0bffd17 	ldw	r2,-12(fp)
811065b4:	10801817 	ldw	r2,96(r2)
811065b8:	1009883a 	mov	r4,r2
811065bc:	112d5740 	call	8112d574 <OSSemPost>

		return -ETIME;
811065c0:	00bff084 	movi	r2,-62
811065c4:	00006a06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
	} else if (NULL == standard_desc && NULL != extended_desc) {
811065c8:	e0bffe17 	ldw	r2,-8(fp)
811065cc:	1000231e 	bne	r2,zero,8110665c <msgdma_descriptor_async_transfer+0x1f0>
811065d0:	e0bfff17 	ldw	r2,-4(fp)
811065d4:	10002126 	beq	r2,zero,8110665c <msgdma_descriptor_async_transfer+0x1f0>
		counter = 0; /* reset counter */
811065d8:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811065dc:	00001506 	br	81106634 <msgdma_descriptor_async_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
811065e0:	01000044 	movi	r4,1
811065e4:	11254a00 	call	811254a0 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811065e8:	e0bff00b 	ldhu	r2,-64(fp)
811065ec:	1084e230 	cmpltui	r2,r2,5000
811065f0:	10000d1e 	bne	r2,zero,81106628 <msgdma_descriptor_async_transfer+0x1bc>
			{
#ifdef DEBUG_ON
				debug(fp,
811065f4:	d0a04d17 	ldw	r2,-32460(gp)
811065f8:	100f883a 	mov	r7,r2
811065fc:	01801544 	movi	r6,85
81106600:	01400044 	movi	r5,1
81106604:	01204534 	movhi	r4,33044
81106608:	212b3104 	addi	r4,r4,-21308
8110660c:	11104940 	call	81110494 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
81106610:	e0bffd17 	ldw	r2,-12(fp)
81106614:	10801817 	ldw	r2,96(r2)
81106618:	1009883a 	mov	r4,r2
8110661c:	112d5740 	call	8112d574 <OSSemPost>

				return -ETIME;
81106620:	00bff084 	movi	r2,-62
81106624:	00005206 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
			}
			counter++;
81106628:	e0bff00b 	ldhu	r2,-64(fp)
8110662c:	10800044 	addi	r2,r2,1
81106630:	e0bff00d 	sth	r2,-64(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81106634:	e0bffd17 	ldw	r2,-12(fp)
81106638:	10c00317 	ldw	r3,12(r2)
8110663c:	e0bffd17 	ldw	r2,-12(fp)
81106640:	10800417 	ldw	r2,16(r2)
81106644:	e1bfff17 	ldw	r6,-4(fp)
81106648:	100b883a 	mov	r5,r2
8110664c:	1809883a 	mov	r4,r3
81106650:	11061cc0 	call	811061cc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106654:	103fe21e 	bne	r2,zero,811065e0 <__reset+0xfb0e65e0>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106658:	00000606 	br	81106674 <msgdma_descriptor_async_transfer+0x208>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110665c:	e0bffd17 	ldw	r2,-12(fp)
81106660:	10801817 	ldw	r2,96(r2)
81106664:	1009883a 	mov	r4,r2
81106668:	112d5740 	call	8112d574 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
8110666c:	00bfffc4 	movi	r2,-1
81106670:	00003f06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
81106674:	e0bffd17 	ldw	r2,-12(fp)
81106678:	10800b17 	ldw	r2,44(r2)
8110667c:	10001c26 	beq	r2,zero,811066f0 <msgdma_descriptor_async_transfer+0x284>

		control |= (dev->control |
81106680:	e0bffd17 	ldw	r2,-12(fp)
81106684:	10c00d17 	ldw	r3,52(r2)
81106688:	e0bff117 	ldw	r2,-60(fp)
8110668c:	1884b03a 	or	r2,r3,r2
81106690:	10800514 	ori	r2,r2,20
81106694:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81106698:	e0fff117 	ldw	r3,-60(fp)
8110669c:	00bff7c4 	movi	r2,-33
811066a0:	1884703a 	and	r2,r3,r2
811066a4:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811066a8:	0005303a 	rdctl	r2,status
811066ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811066b0:	e0fff917 	ldw	r3,-28(fp)
811066b4:	00bfff84 	movi	r2,-2
811066b8:	1884703a 	and	r2,r3,r2
811066bc:	1001703a 	wrctl	status,r2
  
  return context;
811066c0:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
811066c4:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811066c8:	e0bffd17 	ldw	r2,-12(fp)
811066cc:	10800317 	ldw	r2,12(r2)
811066d0:	10800104 	addi	r2,r2,4
811066d4:	e0fff117 	ldw	r3,-60(fp)
811066d8:	10c00035 	stwio	r3,0(r2)
811066dc:	e0bff217 	ldw	r2,-56(fp)
811066e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811066e4:	e0bff517 	ldw	r2,-44(fp)
811066e8:	1001703a 	wrctl	status,r2
811066ec:	00001b06 	br	8110675c <msgdma_descriptor_async_transfer+0x2f0>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
811066f0:	e0bffd17 	ldw	r2,-12(fp)
811066f4:	10c00d17 	ldw	r3,52(r2)
811066f8:	e0bff117 	ldw	r2,-60(fp)
811066fc:	1884b03a 	or	r2,r3,r2
81106700:	10800114 	ori	r2,r2,4
81106704:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
81106708:	e0fff117 	ldw	r3,-60(fp)
8110670c:	00bff3c4 	movi	r2,-49
81106710:	1884703a 	and	r2,r3,r2
81106714:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106718:	0005303a 	rdctl	r2,status
8110671c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106720:	e0fffa17 	ldw	r3,-24(fp)
81106724:	00bfff84 	movi	r2,-2
81106728:	1884703a 	and	r2,r3,r2
8110672c:	1001703a 	wrctl	status,r2
  
  return context;
81106730:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81106734:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106738:	e0bffd17 	ldw	r2,-12(fp)
8110673c:	10800317 	ldw	r2,12(r2)
81106740:	10800104 	addi	r2,r2,4
81106744:	e0fff117 	ldw	r3,-60(fp)
81106748:	10c00035 	stwio	r3,0(r2)
8110674c:	e0bff217 	ldw	r2,-56(fp)
81106750:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106754:	e0bff817 	ldw	r2,-32(fp)
81106758:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
8110675c:	e0bffd17 	ldw	r2,-12(fp)
81106760:	10801817 	ldw	r2,96(r2)
81106764:	1009883a 	mov	r4,r2
81106768:	112d5740 	call	8112d574 <OSSemPost>

	return 0;
8110676c:	0005883a 	mov	r2,zero
}
81106770:	e037883a 	mov	sp,fp
81106774:	dfc00117 	ldw	ra,4(sp)
81106778:	df000017 	ldw	fp,0(sp)
8110677c:	dec00204 	addi	sp,sp,8
81106780:	f800283a 	ret

81106784 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
81106784:	deffee04 	addi	sp,sp,-72
81106788:	de00012e 	bgeu	sp,et,81106790 <msgdma_descriptor_sync_transfer+0xc>
8110678c:	003b68fa 	trap	3
81106790:	dfc01115 	stw	ra,68(sp)
81106794:	df001015 	stw	fp,64(sp)
81106798:	df001004 	addi	fp,sp,64
8110679c:	e13ffd15 	stw	r4,-12(fp)
811067a0:	e17ffe15 	stw	r5,-8(fp)
811067a4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
811067a8:	e03ff415 	stw	zero,-48(fp)
	alt_irq_context context = 0;
811067ac:	e03ff515 	stw	zero,-44(fp)
	alt_u32 csr_status = 0;
811067b0:	e03ff015 	stw	zero,-64(fp)
	alt_u16 counter = 0;
811067b4:	e03ff10d 	sth	zero,-60(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811067b8:	e0bffd17 	ldw	r2,-12(fp)
811067bc:	10800317 	ldw	r2,12(r2)
811067c0:	10800204 	addi	r2,r2,8
811067c4:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
811067c8:	10bfffcc 	andi	r2,r2,65535
811067cc:	e0bff215 	stw	r2,-56(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811067d0:	e0bffd17 	ldw	r2,-12(fp)
811067d4:	10800317 	ldw	r2,12(r2)
811067d8:	10800204 	addi	r2,r2,8
811067dc:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
811067e0:	1004d43a 	srli	r2,r2,16
811067e4:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
811067e8:	00807804 	movi	r2,480
811067ec:	e0bff615 	stw	r2,-40(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811067f0:	00001d06 	br	81106868 <msgdma_descriptor_sync_transfer+0xe4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
811067f4:	01000044 	movi	r4,1
811067f8:	11254a00 	call	811254a0 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811067fc:	e0bff10b 	ldhu	r2,-60(fp)
81106800:	1084e230 	cmpltui	r2,r2,5000
81106804:	1000091e 	bne	r2,zero,8110682c <msgdma_descriptor_sync_transfer+0xa8>
		{
#ifdef DEBUG_ON
			debug(fp,
81106808:	d0a04d17 	ldw	r2,-32460(gp)
8110680c:	100f883a 	mov	r7,r2
81106810:	01801304 	movi	r6,76
81106814:	01400044 	movi	r5,1
81106818:	01204534 	movhi	r4,33044
8110681c:	212b4704 	addi	r4,r4,-21220
81106820:	11104940 	call	81110494 <fwrite>
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
81106824:	00bff084 	movi	r2,-62
81106828:	0000d006 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
8110682c:	e0bff10b 	ldhu	r2,-60(fp)
81106830:	10800044 	addi	r2,r2,1
81106834:	e0bff10d 	sth	r2,-60(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106838:	e0bffd17 	ldw	r2,-12(fp)
8110683c:	10800317 	ldw	r2,12(r2)
81106840:	10800204 	addi	r2,r2,8
81106844:	10800037 	ldwio	r2,0(r2)
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
81106848:	10bfffcc 	andi	r2,r2,65535
8110684c:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106850:	e0bffd17 	ldw	r2,-12(fp)
81106854:	10800317 	ldw	r2,12(r2)
81106858:	10800204 	addi	r2,r2,8
8110685c:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
81106860:	1004d43a 	srli	r2,r2,16
81106864:	e0bff315 	stw	r2,-52(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81106868:	e0bffd17 	ldw	r2,-12(fp)
8110686c:	10800917 	ldw	r2,36(r2)
81106870:	e0fff317 	ldw	r3,-52(fp)
81106874:	18bfdf2e 	bgeu	r3,r2,811067f4 <__reset+0xfb0e67f4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
81106878:	e0bffd17 	ldw	r2,-12(fp)
8110687c:	10800917 	ldw	r2,36(r2)
81106880:	e0fff217 	ldw	r3,-56(fp)
81106884:	18bfdb2e 	bgeu	r3,r2,811067f4 <__reset+0xfb0e67f4>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
81106888:	e0bffd17 	ldw	r2,-12(fp)
8110688c:	10801817 	ldw	r2,96(r2)
81106890:	e0bff815 	stw	r2,-32(fp)
81106894:	e03ffc0d 	sth	zero,-16(fp)
81106898:	e0bffc0b 	ldhu	r2,-16(fp)
8110689c:	e0fffc84 	addi	r3,fp,-14
811068a0:	180d883a 	mov	r6,r3
811068a4:	100b883a 	mov	r5,r2
811068a8:	e13ff817 	ldw	r4,-32(fp)
811068ac:	112d1ec0 	call	8112d1ec <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811068b0:	0005303a 	rdctl	r2,status
811068b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811068b8:	e0fffb17 	ldw	r3,-20(fp)
811068bc:	00bfff84 	movi	r2,-2
811068c0:	1884703a 	and	r2,r3,r2
811068c4:	1001703a 	wrctl	status,r2
  
  return context;
811068c8:	e0bffb17 	ldw	r2,-20(fp)

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811068cc:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811068d0:	e0bffd17 	ldw	r2,-12(fp)
811068d4:	10800317 	ldw	r2,12(r2)
811068d8:	10800104 	addi	r2,r2,4
811068dc:	00c00804 	movi	r3,32
811068e0:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811068e4:	e0bffd17 	ldw	r2,-12(fp)
811068e8:	10800317 	ldw	r2,12(r2)
811068ec:	e0fffd17 	ldw	r3,-12(fp)
811068f0:	18c00317 	ldw	r3,12(r3)
811068f4:	18c00037 	ldwio	r3,0(r3)
811068f8:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
811068fc:	e0bffe17 	ldw	r2,-8(fp)
81106900:	10001026 	beq	r2,zero,81106944 <msgdma_descriptor_sync_transfer+0x1c0>
81106904:	e0bfff17 	ldw	r2,-4(fp)
81106908:	10000e1e 	bne	r2,zero,81106944 <msgdma_descriptor_sync_transfer+0x1c0>
		counter = 0; /* reset counter */
8110690c:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106910:	d0a04d17 	ldw	r2,-32460(gp)
81106914:	100f883a 	mov	r7,r2
81106918:	01800784 	movi	r6,30
8110691c:	01400044 	movi	r5,1
81106920:	01204534 	movhi	r4,33044
81106924:	212b2904 	addi	r4,r4,-21340
81106928:	11104940 	call	81110494 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110692c:	e0bffd17 	ldw	r2,-12(fp)
81106930:	10801817 	ldw	r2,96(r2)
81106934:	1009883a 	mov	r4,r2
81106938:	112d5740 	call	8112d574 <OSSemPost>

		return -ETIME;
8110693c:	00bff084 	movi	r2,-62
81106940:	00008a06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106944:	e0bffe17 	ldw	r2,-8(fp)
81106948:	1000231e 	bne	r2,zero,811069d8 <msgdma_descriptor_sync_transfer+0x254>
8110694c:	e0bfff17 	ldw	r2,-4(fp)
81106950:	10002126 	beq	r2,zero,811069d8 <msgdma_descriptor_sync_transfer+0x254>
		counter = 0; /* reset counter */
81106954:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106958:	00001506 	br	811069b0 <msgdma_descriptor_sync_transfer+0x22c>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
8110695c:	01000044 	movi	r4,1
81106960:	11254a00 	call	811254a0 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106964:	e0bff10b 	ldhu	r2,-60(fp)
81106968:	1084e230 	cmpltui	r2,r2,5000
8110696c:	10000d1e 	bne	r2,zero,811069a4 <msgdma_descriptor_sync_transfer+0x220>
			{
#ifdef DEBUG_ON
				debug(fp,
81106970:	d0a04d17 	ldw	r2,-32460(gp)
81106974:	100f883a 	mov	r7,r2
81106978:	01801004 	movi	r6,64
8110697c:	01400044 	movi	r5,1
81106980:	01204534 	movhi	r4,33044
81106984:	212b5b04 	addi	r4,r4,-21140
81106988:	11104940 	call	81110494 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
8110698c:	e0bffd17 	ldw	r2,-12(fp)
81106990:	10801817 	ldw	r2,96(r2)
81106994:	1009883a 	mov	r4,r2
81106998:	112d5740 	call	8112d574 <OSSemPost>

				return -ETIME;
8110699c:	00bff084 	movi	r2,-62
811069a0:	00007206 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
			}
			counter++;
811069a4:	e0bff10b 	ldhu	r2,-60(fp)
811069a8:	10800044 	addi	r2,r2,1
811069ac:	e0bff10d 	sth	r2,-60(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
811069b0:	e0bffd17 	ldw	r2,-12(fp)
811069b4:	10c00317 	ldw	r3,12(r2)
811069b8:	e0bffd17 	ldw	r2,-12(fp)
811069bc:	10800417 	ldw	r2,16(r2)
811069c0:	e1bfff17 	ldw	r6,-4(fp)
811069c4:	100b883a 	mov	r5,r2
811069c8:	1809883a 	mov	r4,r3
811069cc:	11061cc0 	call	811061cc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811069d0:	103fe21e 	bne	r2,zero,8110695c <__reset+0xfb0e695c>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
811069d4:	00000606 	br	811069f0 <msgdma_descriptor_sync_transfer+0x26c>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811069d8:	e0bffd17 	ldw	r2,-12(fp)
811069dc:	10801817 	ldw	r2,96(r2)
811069e0:	1009883a 	mov	r4,r2
811069e4:	112d5740 	call	8112d574 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
811069e8:	00bfffc4 	movi	r2,-1
811069ec:	00005f06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811069f0:	e0bffd17 	ldw	r2,-12(fp)
811069f4:	10800317 	ldw	r2,12(r2)
811069f8:	10800104 	addi	r2,r2,4
811069fc:	e0fffd17 	ldw	r3,-12(fp)
81106a00:	19000d17 	ldw	r4,52(r3)
81106a04:	00fff2c4 	movi	r3,-53
81106a08:	20c6703a 	and	r3,r4,r3
81106a0c:	18c00114 	ori	r3,r3,4
81106a10:	10c00035 	stwio	r3,0(r2)
81106a14:	e0bff517 	ldw	r2,-44(fp)
81106a18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106a1c:	e0bff717 	ldw	r2,-36(fp)
81106a20:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
81106a24:	e03ff10d 	sth	zero,-60(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a28:	e0bffd17 	ldw	r2,-12(fp)
81106a2c:	10800317 	ldw	r2,12(r2)
81106a30:	10800037 	ldwio	r2,0(r2)
81106a34:	e0bff015 	stw	r2,-64(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106a38:	00001906 	br	81106aa0 <msgdma_descriptor_sync_transfer+0x31c>
		alt_busy_sleep(1); /* delay 1us */
81106a3c:	01000044 	movi	r4,1
81106a40:	11254a00 	call	811254a0 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106a44:	e0bff10b 	ldhu	r2,-60(fp)
81106a48:	1084e230 	cmpltui	r2,r2,5000
81106a4c:	10000d1e 	bne	r2,zero,81106a84 <msgdma_descriptor_sync_transfer+0x300>
		{
#ifdef DEBUG_ON
			debug(fp,
81106a50:	d0a04d17 	ldw	r2,-32460(gp)
81106a54:	100f883a 	mov	r7,r2
81106a58:	01801184 	movi	r6,70
81106a5c:	01400044 	movi	r5,1
81106a60:	01204534 	movhi	r4,33044
81106a64:	212b6c04 	addi	r4,r4,-21072
81106a68:	11104940 	call	81110494 <fwrite>

			/*
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);
81106a6c:	e0bffd17 	ldw	r2,-12(fp)
81106a70:	10801817 	ldw	r2,96(r2)
81106a74:	1009883a 	mov	r4,r2
81106a78:	112d5740 	call	8112d574 <OSSemPost>

			return -ETIME;
81106a7c:	00bff084 	movi	r2,-62
81106a80:	00003a06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
81106a84:	e0bff10b 	ldhu	r2,-60(fp)
81106a88:	10800044 	addi	r2,r2,1
81106a8c:	e0bff10d 	sth	r2,-60(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a90:	e0bffd17 	ldw	r2,-12(fp)
81106a94:	10800317 	ldw	r2,12(r2)
81106a98:	10800037 	ldwio	r2,0(r2)
81106a9c:	e0bff015 	stw	r2,-64(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106aa0:	e0fff017 	ldw	r3,-64(fp)
81106aa4:	e0bff617 	ldw	r2,-40(fp)
81106aa8:	1884703a 	and	r2,r3,r2
81106aac:	1000031e 	bne	r2,zero,81106abc <msgdma_descriptor_sync_transfer+0x338>
81106ab0:	e0bff017 	ldw	r2,-64(fp)
81106ab4:	1080004c 	andi	r2,r2,1
81106ab8:	103fe01e 	bne	r2,zero,81106a3c <__reset+0xfb0e6a3c>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81106abc:	e0fff017 	ldw	r3,-64(fp)
81106ac0:	e0bff617 	ldw	r2,-40(fp)
81106ac4:	1884703a 	and	r2,r3,r2
81106ac8:	10000626 	beq	r2,zero,81106ae4 <msgdma_descriptor_sync_transfer+0x360>
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106acc:	e0bffd17 	ldw	r2,-12(fp)
81106ad0:	10801817 	ldw	r2,96(r2)
81106ad4:	1009883a 	mov	r4,r2
81106ad8:	112d5740 	call	8112d574 <OSSemPost>

		return error;
81106adc:	e0bff617 	ldw	r2,-40(fp)
81106ae0:	00002206 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
81106ae4:	e0bffd17 	ldw	r2,-12(fp)
81106ae8:	10800317 	ldw	r2,12(r2)
81106aec:	10800104 	addi	r2,r2,4
81106af0:	10800037 	ldwio	r2,0(r2)
81106af4:	10800814 	ori	r2,r2,32
81106af8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106afc:	0005303a 	rdctl	r2,status
81106b00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106b04:	e0fffa17 	ldw	r3,-24(fp)
81106b08:	00bfff84 	movi	r2,-2
81106b0c:	1884703a 	and	r2,r3,r2
81106b10:	1001703a 	wrctl	status,r2
  
  return context;
81106b14:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106b18:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106b1c:	e0bffd17 	ldw	r2,-12(fp)
81106b20:	10800317 	ldw	r2,12(r2)
81106b24:	10800104 	addi	r2,r2,4
81106b28:	e0fff417 	ldw	r3,-48(fp)
81106b2c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106b30:	e0bffd17 	ldw	r2,-12(fp)
81106b34:	10800317 	ldw	r2,12(r2)
81106b38:	e0fffd17 	ldw	r3,-12(fp)
81106b3c:	18c00317 	ldw	r3,12(r3)
81106b40:	18c00037 	ldwio	r3,0(r3)
81106b44:	10c00035 	stwio	r3,0(r2)
81106b48:	e0bff517 	ldw	r2,-44(fp)
81106b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106b50:	e0bff917 	ldw	r2,-28(fp)
81106b54:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
81106b58:	e0bffd17 	ldw	r2,-12(fp)
81106b5c:	10801817 	ldw	r2,96(r2)
81106b60:	1009883a 	mov	r4,r2
81106b64:	112d5740 	call	8112d574 <OSSemPost>

	return 0;
81106b68:	0005883a 	mov	r2,zero

}
81106b6c:	e037883a 	mov	sp,fp
81106b70:	dfc00117 	ldw	ra,4(sp)
81106b74:	df000017 	ldw	fp,0(sp)
81106b78:	dec00204 	addi	sp,sp,8
81106b7c:	f800283a 	ret

81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
81106b80:	deffec04 	addi	sp,sp,-80
81106b84:	de00012e 	bgeu	sp,et,81106b8c <iMsgdmaConstructExtendedMmToMmDescriptor+0xc>
81106b88:	003b68fa 	trap	3
81106b8c:	dfc01315 	stw	ra,76(sp)
81106b90:	df001215 	stw	fp,72(sp)
81106b94:	df001204 	addi	fp,sp,72
81106b98:	e13ff715 	stw	r4,-36(fp)
81106b9c:	e17ff815 	stw	r5,-32(fp)
81106ba0:	e1bff915 	stw	r6,-28(fp)
81106ba4:	e1fffa15 	stw	r7,-24(fp)
81106ba8:	e1800617 	ldw	r6,24(fp)
81106bac:	e1400717 	ldw	r5,28(fp)
81106bb0:	e1000817 	ldw	r4,32(fp)
81106bb4:	e0c00917 	ldw	r3,36(fp)
81106bb8:	e0800a17 	ldw	r2,40(fp)
81106bbc:	e1bffb0d 	sth	r6,-20(fp)
81106bc0:	e17ffc05 	stb	r5,-16(fp)
81106bc4:	e13ffd05 	stb	r4,-12(fp)
81106bc8:	e0fffe0d 	sth	r3,-8(fp)
81106bcc:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
81106bd0:	e0bffb0b 	ldhu	r2,-20(fp)
81106bd4:	e0fffc03 	ldbu	r3,-16(fp)
81106bd8:	e13ffd03 	ldbu	r4,-12(fp)
81106bdc:	e17ffe0b 	ldhu	r5,-8(fp)
81106be0:	e1bfff0b 	ldhu	r6,-4(fp)
81106be4:	d9800815 	stw	r6,32(sp)
81106be8:	d9400715 	stw	r5,28(sp)
81106bec:	d9000615 	stw	r4,24(sp)
81106bf0:	d8c00515 	stw	r3,20(sp)
81106bf4:	d8800415 	stw	r2,16(sp)
81106bf8:	e0800517 	ldw	r2,20(fp)
81106bfc:	d8800315 	stw	r2,12(sp)
81106c00:	e0800417 	ldw	r2,16(fp)
81106c04:	d8800215 	stw	r2,8(sp)
81106c08:	e0800317 	ldw	r2,12(fp)
81106c0c:	d8800115 	stw	r2,4(sp)
81106c10:	e0800217 	ldw	r2,8(fp)
81106c14:	d8800015 	stw	r2,0(sp)
81106c18:	e1fffa17 	ldw	r7,-24(fp)
81106c1c:	e1bff917 	ldw	r6,-28(fp)
81106c20:	e17ff817 	ldw	r5,-32(fp)
81106c24:	e13ff717 	ldw	r4,-36(fp)
81106c28:	11063080 	call	81106308 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
81106c2c:	e037883a 	mov	sp,fp
81106c30:	dfc00117 	ldw	ra,4(sp)
81106c34:	df000017 	ldw	fp,0(sp)
81106c38:	dec00204 	addi	sp,sp,8
81106c3c:	f800283a 	ret

81106c40 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106c40:	defffc04 	addi	sp,sp,-16
81106c44:	de00012e 	bgeu	sp,et,81106c4c <iMsgdmaExtendedDescriptorAsyncTransfer+0xc>
81106c48:	003b68fa 	trap	3
81106c4c:	dfc00315 	stw	ra,12(sp)
81106c50:	df000215 	stw	fp,8(sp)
81106c54:	df000204 	addi	fp,sp,8
81106c58:	e13ffe15 	stw	r4,-8(fp)
81106c5c:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
81106c60:	e1bfff17 	ldw	r6,-4(fp)
81106c64:	000b883a 	mov	r5,zero
81106c68:	e13ffe17 	ldw	r4,-8(fp)
81106c6c:	110646c0 	call	8110646c <msgdma_descriptor_async_transfer>
}
81106c70:	e037883a 	mov	sp,fp
81106c74:	dfc00117 	ldw	ra,4(sp)
81106c78:	df000017 	ldw	fp,0(sp)
81106c7c:	dec00204 	addi	sp,sp,8
81106c80:	f800283a 	ret

81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106c84:	defffc04 	addi	sp,sp,-16
81106c88:	de00012e 	bgeu	sp,et,81106c90 <iMsgdmaExtendedDescriptorSyncTransfer+0xc>
81106c8c:	003b68fa 	trap	3
81106c90:	dfc00315 	stw	ra,12(sp)
81106c94:	df000215 	stw	fp,8(sp)
81106c98:	df000204 	addi	fp,sp,8
81106c9c:	e13ffe15 	stw	r4,-8(fp)
81106ca0:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
81106ca4:	e1bfff17 	ldw	r6,-4(fp)
81106ca8:	000b883a 	mov	r5,zero
81106cac:	e13ffe17 	ldw	r4,-8(fp)
81106cb0:	11067840 	call	81106784 <msgdma_descriptor_sync_transfer>
}
81106cb4:	e037883a 	mov	sp,fp
81106cb8:	dfc00117 	ldw	ra,4(sp)
81106cbc:	df000017 	ldw	fp,0(sp)
81106cc0:	dec00204 	addi	sp,sp,8
81106cc4:	f800283a 	ret

81106cc8 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
81106cc8:	defff204 	addi	sp,sp,-56
81106ccc:	de00012e 	bgeu	sp,et,81106cd4 <POWER_SPI_RW+0xc>
81106cd0:	003b68fa 	trap	3
81106cd4:	dfc00d15 	stw	ra,52(sp)
81106cd8:	df000c15 	stw	fp,48(sp)
81106cdc:	df000c04 	addi	fp,sp,48
81106ce0:	2007883a 	mov	r3,r4
81106ce4:	2805883a 	mov	r2,r5
81106ce8:	e1bffe15 	stw	r6,-8(fp)
81106cec:	e1ffff15 	stw	r7,-4(fp)
81106cf0:	e0fffc05 	stb	r3,-16(fp)
81106cf4:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
81106cf8:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
81106cfc:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
81106d00:	008003f4 	movhi	r2,15
81106d04:	10909004 	addi	r2,r2,16960
81106d08:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
81106d0c:	00bfe004 	movi	r2,-128
81106d10:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
81106d14:	e0bffe17 	ldw	r2,-8(fp)
81106d18:	10000226 	beq	r2,zero,81106d24 <POWER_SPI_RW+0x5c>
81106d1c:	00800804 	movi	r2,32
81106d20:	00000106 	br	81106d28 <POWER_SPI_RW+0x60>
81106d24:	0005883a 	mov	r2,zero
81106d28:	e0fff403 	ldbu	r3,-48(fp)
81106d2c:	10c4b03a 	or	r2,r2,r3
81106d30:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
81106d34:	e0800217 	ldw	r2,8(fp)
81106d38:	10000226 	beq	r2,zero,81106d44 <POWER_SPI_RW+0x7c>
81106d3c:	00800404 	movi	r2,16
81106d40:	00000106 	br	81106d48 <POWER_SPI_RW+0x80>
81106d44:	0005883a 	mov	r2,zero
81106d48:	e0fff403 	ldbu	r3,-48(fp)
81106d4c:	10c4b03a 	or	r2,r2,r3
81106d50:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
81106d54:	e0bfff17 	ldw	r2,-4(fp)
81106d58:	10000226 	beq	r2,zero,81106d64 <POWER_SPI_RW+0x9c>
81106d5c:	00800204 	movi	r2,8
81106d60:	00000106 	br	81106d68 <POWER_SPI_RW+0xa0>
81106d64:	0005883a 	mov	r2,zero
81106d68:	e0fff403 	ldbu	r3,-48(fp)
81106d6c:	10c4b03a 	or	r2,r2,r3
81106d70:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
81106d74:	e0bffd03 	ldbu	r2,-12(fp)
81106d78:	108001cc 	andi	r2,r2,7
81106d7c:	1007883a 	mov	r3,r2
81106d80:	e0bff403 	ldbu	r2,-48(fp)
81106d84:	1884b03a 	or	r2,r3,r2
81106d88:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
81106d8c:	0007883a 	mov	r3,zero
81106d90:	00a00034 	movhi	r2,32768
81106d94:	10824404 	addi	r2,r2,2320
81106d98:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
81106d9c:	0007883a 	mov	r3,zero
81106da0:	00a00034 	movhi	r2,32768
81106da4:	10824c04 	addi	r2,r2,2352
81106da8:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
81106dac:	e0bffc03 	ldbu	r2,-16(fp)
81106db0:	1000021e 	bne	r2,zero,81106dbc <POWER_SPI_RW+0xf4>
81106db4:	00c00084 	movi	r3,2
81106db8:	00000106 	br	81106dc0 <POWER_SPI_RW+0xf8>
81106dbc:	00c00044 	movi	r3,1
81106dc0:	00a00034 	movhi	r2,32768
81106dc4:	10824804 	addi	r2,r2,2336
81106dc8:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
81106dcc:	010003c4 	movi	r4,15
81106dd0:	11263700 	call	81126370 <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106dd4:	00000306 	br	81106de4 <POWER_SPI_RW+0x11c>
		nWait++;
81106dd8:	e0bff817 	ldw	r2,-32(fp)
81106ddc:	10800044 	addi	r2,r2,1
81106de0:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106de4:	00a00034 	movhi	r2,32768
81106de8:	10825404 	addi	r2,r2,2384
81106dec:	10800037 	ldwio	r2,0(r2)
81106df0:	1080004c 	andi	r2,r2,1
81106df4:	10000326 	beq	r2,zero,81106e04 <POWER_SPI_RW+0x13c>
81106df8:	e0fff817 	ldw	r3,-32(fp)
81106dfc:	e0bffa17 	ldw	r2,-24(fp)
81106e00:	18bff516 	blt	r3,r2,81106dd8 <__reset+0xfb0e6dd8>
		nWait++;
	}

	if (SPI_SDO) {
81106e04:	00a00034 	movhi	r2,32768
81106e08:	10825404 	addi	r2,r2,2384
81106e0c:	10800037 	ldwio	r2,0(r2)
81106e10:	1080004c 	andi	r2,r2,1
81106e14:	10000626 	beq	r2,zero,81106e30 <POWER_SPI_RW+0x168>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
81106e18:	00c000c4 	movi	r3,3
81106e1c:	00a00034 	movhi	r2,32768
81106e20:	10824804 	addi	r2,r2,2336
81106e24:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG_ON
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
81106e28:	0005883a 	mov	r2,zero
81106e2c:	0000db06 	br	8110719c <POWER_SPI_RW+0x4d4>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106e30:	e03ff715 	stw	zero,-36(fp)
81106e34:	00002406 	br	81106ec8 <POWER_SPI_RW+0x200>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
81106e38:	e0bff403 	ldbu	r2,-48(fp)
81106e3c:	10803fcc 	andi	r2,r2,255
81106e40:	1004d1fa 	srli	r2,r2,7
81106e44:	10c03fcc 	andi	r3,r2,255
81106e48:	00a00034 	movhi	r2,32768
81106e4c:	10825004 	addi	r2,r2,2368
81106e50:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106e54:	e0bff403 	ldbu	r2,-48(fp)
81106e58:	1085883a 	add	r2,r2,r2
81106e5c:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81106e60:	e0bff517 	ldw	r2,-44(fp)
81106e64:	1085883a 	add	r2,r2,r2
81106e68:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81106e6c:	00a00034 	movhi	r2,32768
81106e70:	10825404 	addi	r2,r2,2384
81106e74:	10800037 	ldwio	r2,0(r2)
81106e78:	1080004c 	andi	r2,r2,1
81106e7c:	1007883a 	mov	r3,r2
81106e80:	e0bff517 	ldw	r2,-44(fp)
81106e84:	10c4b03a 	or	r2,r2,r3
81106e88:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106e8c:	00c00044 	movi	r3,1
81106e90:	00a00034 	movhi	r2,32768
81106e94:	10824c04 	addi	r2,r2,2352
81106e98:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106e9c:	010003c4 	movi	r4,15
81106ea0:	11263700 	call	81126370 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106ea4:	0007883a 	mov	r3,zero
81106ea8:	00a00034 	movhi	r2,32768
81106eac:	10824c04 	addi	r2,r2,2352
81106eb0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106eb4:	010003c4 	movi	r4,15
81106eb8:	11263700 	call	81126370 <usleep>
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106ebc:	e0bff717 	ldw	r2,-36(fp)
81106ec0:	10800044 	addi	r2,r2,1
81106ec4:	e0bff715 	stw	r2,-36(fp)
81106ec8:	e0bff717 	ldw	r2,-36(fp)
81106ecc:	10800090 	cmplti	r2,r2,2
81106ed0:	103fd91e 	bne	r2,zero,81106e38 <__reset+0xfb0e6e38>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106ed4:	e03ff715 	stw	zero,-36(fp)
81106ed8:	00002406 	br	81106f6c <POWER_SPI_RW+0x2a4>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
81106edc:	e0bff403 	ldbu	r2,-48(fp)
81106ee0:	10803fcc 	andi	r2,r2,255
81106ee4:	1004d1fa 	srli	r2,r2,7
81106ee8:	10c03fcc 	andi	r3,r2,255
81106eec:	00a00034 	movhi	r2,32768
81106ef0:	10825004 	addi	r2,r2,2368
81106ef4:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106ef8:	e0bff403 	ldbu	r2,-48(fp)
81106efc:	1085883a 	add	r2,r2,r2
81106f00:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81106f04:	e0bff517 	ldw	r2,-44(fp)
81106f08:	1085883a 	add	r2,r2,r2
81106f0c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81106f10:	00a00034 	movhi	r2,32768
81106f14:	10825404 	addi	r2,r2,2384
81106f18:	10800037 	ldwio	r2,0(r2)
81106f1c:	1080004c 	andi	r2,r2,1
81106f20:	1007883a 	mov	r3,r2
81106f24:	e0bff517 	ldw	r2,-44(fp)
81106f28:	10c4b03a 	or	r2,r2,r3
81106f2c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106f30:	00c00044 	movi	r3,1
81106f34:	00a00034 	movhi	r2,32768
81106f38:	10824c04 	addi	r2,r2,2352
81106f3c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f40:	010003c4 	movi	r4,15
81106f44:	11263700 	call	81126370 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106f48:	0007883a 	mov	r3,zero
81106f4c:	00a00034 	movhi	r2,32768
81106f50:	10824c04 	addi	r2,r2,2352
81106f54:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f58:	010003c4 	movi	r4,15
81106f5c:	11263700 	call	81126370 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106f60:	e0bff717 	ldw	r2,-36(fp)
81106f64:	10800044 	addi	r2,r2,1
81106f68:	e0bff715 	stw	r2,-36(fp)
81106f6c:	e0bff717 	ldw	r2,-36(fp)
81106f70:	10800210 	cmplti	r2,r2,8
81106f74:	103fd91e 	bne	r2,zero,81106edc <__reset+0xfb0e6edc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106f78:	e03ff715 	stw	zero,-36(fp)
81106f7c:	00001a06 	br	81106fe8 <POWER_SPI_RW+0x320>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81106f80:	e0bff517 	ldw	r2,-44(fp)
81106f84:	1085883a 	add	r2,r2,r2
81106f88:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106f8c:	00a00034 	movhi	r2,32768
81106f90:	10825404 	addi	r2,r2,2384
81106f94:	10800037 	ldwio	r2,0(r2)
81106f98:	1080004c 	andi	r2,r2,1
81106f9c:	1007883a 	mov	r3,r2
81106fa0:	e0bff517 	ldw	r2,-44(fp)
81106fa4:	10c4b03a 	or	r2,r2,r3
81106fa8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106fac:	00c00044 	movi	r3,1
81106fb0:	00a00034 	movhi	r2,32768
81106fb4:	10824c04 	addi	r2,r2,2352
81106fb8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fbc:	010003c4 	movi	r4,15
81106fc0:	11263700 	call	81126370 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106fc4:	0007883a 	mov	r3,zero
81106fc8:	00a00034 	movhi	r2,32768
81106fcc:	10824c04 	addi	r2,r2,2352
81106fd0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fd4:	010003c4 	movi	r4,15
81106fd8:	11263700 	call	81126370 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106fdc:	e0bff717 	ldw	r2,-36(fp)
81106fe0:	10800044 	addi	r2,r2,1
81106fe4:	e0bff715 	stw	r2,-36(fp)
81106fe8:	e0bff717 	ldw	r2,-36(fp)
81106fec:	10800210 	cmplti	r2,r2,8
81106ff0:	103fe31e 	bne	r2,zero,81106f80 <__reset+0xfb0e6f80>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81106ff4:	e03ff715 	stw	zero,-36(fp)
81106ff8:	00001a06 	br	81107064 <POWER_SPI_RW+0x39c>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
81106ffc:	e0bff517 	ldw	r2,-44(fp)
81107000:	1085883a 	add	r2,r2,r2
81107004:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
81107008:	00a00034 	movhi	r2,32768
8110700c:	10825404 	addi	r2,r2,2384
81107010:	10800037 	ldwio	r2,0(r2)
81107014:	1080004c 	andi	r2,r2,1
81107018:	1007883a 	mov	r3,r2
8110701c:	e0bff517 	ldw	r2,-44(fp)
81107020:	10c4b03a 	or	r2,r2,r3
81107024:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107028:	00c00044 	movi	r3,1
8110702c:	00a00034 	movhi	r2,32768
81107030:	10824c04 	addi	r2,r2,2352
81107034:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107038:	010003c4 	movi	r4,15
8110703c:	11263700 	call	81126370 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81107040:	0007883a 	mov	r3,zero
81107044:	00a00034 	movhi	r2,32768
81107048:	10824c04 	addi	r2,r2,2352
8110704c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107050:	010003c4 	movi	r4,15
81107054:	11263700 	call	81126370 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81107058:	e0bff717 	ldw	r2,-36(fp)
8110705c:	10800044 	addi	r2,r2,1
81107060:	e0bff715 	stw	r2,-36(fp)
81107064:	e0bff717 	ldw	r2,-36(fp)
81107068:	10800210 	cmplti	r2,r2,8
8110706c:	103fe31e 	bne	r2,zero,81106ffc <__reset+0xfb0e6ffc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
81107070:	e03ff715 	stw	zero,-36(fp)
81107074:	00001a06 	br	811070e0 <POWER_SPI_RW+0x418>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81107078:	e0bff517 	ldw	r2,-44(fp)
8110707c:	1085883a 	add	r2,r2,r2
81107080:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81107084:	00a00034 	movhi	r2,32768
81107088:	10825404 	addi	r2,r2,2384
8110708c:	10800037 	ldwio	r2,0(r2)
81107090:	1080004c 	andi	r2,r2,1
81107094:	1007883a 	mov	r3,r2
81107098:	e0bff517 	ldw	r2,-44(fp)
8110709c:	10c4b03a 	or	r2,r2,r3
811070a0:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
811070a4:	00c00044 	movi	r3,1
811070a8:	00a00034 	movhi	r2,32768
811070ac:	10824c04 	addi	r2,r2,2352
811070b0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070b4:	010003c4 	movi	r4,15
811070b8:	11263700 	call	81126370 <usleep>
		SPI_SCK(0); //sck=0; // clock low
811070bc:	0007883a 	mov	r3,zero
811070c0:	00a00034 	movhi	r2,32768
811070c4:	10824c04 	addi	r2,r2,2352
811070c8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070cc:	010003c4 	movi	r4,15
811070d0:	11263700 	call	81126370 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
811070d4:	e0bff717 	ldw	r2,-36(fp)
811070d8:	10800044 	addi	r2,r2,1
811070dc:	e0bff715 	stw	r2,-36(fp)
811070e0:	e0bff717 	ldw	r2,-36(fp)
811070e4:	10800190 	cmplti	r2,r2,6
811070e8:	103fe31e 	bne	r2,zero,81107078 <__reset+0xfb0e7078>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
811070ec:	00c00044 	movi	r3,1
811070f0:	00a00034 	movhi	r2,32768
811070f4:	10824c04 	addi	r2,r2,2352
811070f8:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
811070fc:	010003c4 	movi	r4,15
81107100:	11263700 	call	81126370 <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
81107104:	00c000c4 	movi	r3,3
81107108:	00a00034 	movhi	r2,32768
8110710c:	10824804 	addi	r2,r2,2336
81107110:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
81107114:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
81107118:	00800044 	movi	r2,1
8110711c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
81107120:	e03ff715 	stw	zero,-36(fp)
81107124:	00000d06 	br	8110715c <POWER_SPI_RW+0x494>
		if ((Value32 & Mask32) == 0x00) {
81107128:	e0fff517 	ldw	r3,-44(fp)
8110712c:	e0bff617 	ldw	r2,-40(fp)
81107130:	1884703a 	and	r2,r3,r2
81107134:	1000031e 	bne	r2,zero,81107144 <POWER_SPI_RW+0x47c>
			nZeroCnt++;
81107138:	e0bff917 	ldw	r2,-28(fp)
8110713c:	10800044 	addi	r2,r2,1
81107140:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
81107144:	e0bff617 	ldw	r2,-40(fp)
81107148:	1085883a 	add	r2,r2,r2
8110714c:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
81107150:	e0bff717 	ldw	r2,-36(fp)
81107154:	10800044 	addi	r2,r2,1
81107158:	e0bff715 	stw	r2,-36(fp)
8110715c:	e0bff717 	ldw	r2,-36(fp)
81107160:	10800810 	cmplti	r2,r2,32
81107164:	103ff01e 	bne	r2,zero,81107128 <__reset+0xfb0e7128>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
81107168:	e0bff917 	ldw	r2,-28(fp)
8110716c:	1080004c 	andi	r2,r2,1
81107170:	1005003a 	cmpeq	r2,r2,zero
81107174:	10803fcc 	andi	r2,r2,255
81107178:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
8110717c:	e0bffb17 	ldw	r2,-20(fp)
81107180:	1000021e 	bne	r2,zero,8110718c <POWER_SPI_RW+0x4c4>
#ifdef DEBUG_ON
//		debug(fp, "Parity Check Error \r\n");
#endif
		return FALSE;
81107184:	0005883a 	mov	r2,zero
81107188:	00000406 	br	8110719c <POWER_SPI_RW+0x4d4>
	}

	*pValue = Value32;
8110718c:	e0800317 	ldw	r2,12(fp)
81107190:	e0fff517 	ldw	r3,-44(fp)
81107194:	10c00015 	stw	r3,0(r2)

	return bSuccess;
81107198:	e0bffb17 	ldw	r2,-20(fp)
}
8110719c:	e037883a 	mov	sp,fp
811071a0:	dfc00117 	ldw	ra,4(sp)
811071a4:	df000017 	ldw	fp,0(sp)
811071a8:	dec00204 	addi	sp,sp,8
811071ac:	f800283a 	ret

811071b0 <vRstcSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcSimucamReset(alt_u16 usiRstCnt) {
811071b0:	defffc04 	addi	sp,sp,-16
811071b4:	de00012e 	bgeu	sp,et,811071bc <vRstcSimucamReset+0xc>
811071b8:	003b68fa 	trap	3
811071bc:	dfc00315 	stw	ra,12(sp)
811071c0:	df000215 	stw	fp,8(sp)
811071c4:	df000204 	addi	fp,sp,8
811071c8:	2005883a 	mov	r2,r4
811071cc:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 uliReg = 0;
811071d0:	e03ffe15 	stw	zero,-8(fp)

	uliReg |= (alt_u32) (usiRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
811071d4:	e0bfff0b 	ldhu	r2,-4(fp)
811071d8:	e0fffe17 	ldw	r3,-8(fp)
811071dc:	1884b03a 	or	r2,r3,r2
811071e0:	e0bffe15 	stw	r2,-8(fp)
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
811071e4:	e0bffe17 	ldw	r2,-8(fp)
811071e8:	10800074 	orhi	r2,r2,1
811071ec:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811071f0:	e1bffe17 	ldw	r6,-8(fp)
811071f4:	000b883a 	mov	r5,zero
811071f8:	01200034 	movhi	r4,32768
811071fc:	21020004 	addi	r4,r4,2048
81107200:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
}
81107204:	0001883a 	nop
81107208:	e037883a 	mov	sp,fp
8110720c:	dfc00117 	ldw	ra,4(sp)
81107210:	df000017 	ldw	fp,0(sp)
81107214:	dec00204 	addi	sp,sp,8
81107218:	f800283a 	ret

8110721c <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8110721c:	defffc04 	addi	sp,sp,-16
81107220:	de00012e 	bgeu	sp,et,81107228 <vRstcReleaseDeviceReset+0xc>
81107224:	003b68fa 	trap	3
81107228:	dfc00315 	stw	ra,12(sp)
8110722c:	df000215 	stw	fp,8(sp)
81107230:	df000204 	addi	fp,sp,8
81107234:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
81107238:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
8110723c:	01400044 	movi	r5,1
81107240:	01200034 	movhi	r4,32768
81107244:	21020004 	addi	r4,r4,2048
81107248:	11073540 	call	81107354 <uliRstReadReg>
8110724c:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
81107250:	e0bfff17 	ldw	r2,-4(fp)
81107254:	0084303a 	nor	r2,zero,r2
81107258:	e0fffe17 	ldw	r3,-8(fp)
8110725c:	1884703a 	and	r2,r3,r2
81107260:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107264:	e1bffe17 	ldw	r6,-8(fp)
81107268:	01400044 	movi	r5,1
8110726c:	01200034 	movhi	r4,32768
81107270:	21020004 	addi	r4,r4,2048
81107274:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
81107278:	0001883a 	nop
8110727c:	e037883a 	mov	sp,fp
81107280:	dfc00117 	ldw	ra,4(sp)
81107284:	df000017 	ldw	fp,0(sp)
81107288:	dec00204 	addi	sp,sp,8
8110728c:	f800283a 	ret

81107290 <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
81107290:	defffc04 	addi	sp,sp,-16
81107294:	de00012e 	bgeu	sp,et,8110729c <vRstcHoldDeviceReset+0xc>
81107298:	003b68fa 	trap	3
8110729c:	dfc00315 	stw	ra,12(sp)
811072a0:	df000215 	stw	fp,8(sp)
811072a4:	df000204 	addi	fp,sp,8
811072a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
811072ac:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072b0:	01400044 	movi	r5,1
811072b4:	01200034 	movhi	r4,32768
811072b8:	21020004 	addi	r4,r4,2048
811072bc:	11073540 	call	81107354 <uliRstReadReg>
811072c0:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
811072c4:	e0fffe17 	ldw	r3,-8(fp)
811072c8:	e0bfff17 	ldw	r2,-4(fp)
811072cc:	1884b03a 	or	r2,r3,r2
811072d0:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072d4:	e1bffe17 	ldw	r6,-8(fp)
811072d8:	01400044 	movi	r5,1
811072dc:	01200034 	movhi	r4,32768
811072e0:	21020004 	addi	r4,r4,2048
811072e4:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
811072e8:	0001883a 	nop
811072ec:	e037883a 	mov	sp,fp
811072f0:	dfc00117 	ldw	ra,4(sp)
811072f4:	df000017 	ldw	fp,0(sp)
811072f8:	dec00204 	addi	sp,sp,8
811072fc:	f800283a 	ret

81107300 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81107300:	defffc04 	addi	sp,sp,-16
81107304:	de00012e 	bgeu	sp,et,8110730c <vRstcWriteReg+0xc>
81107308:	003b68fa 	trap	3
8110730c:	df000315 	stw	fp,12(sp)
81107310:	df000304 	addi	fp,sp,12
81107314:	e13ffd15 	stw	r4,-12(fp)
81107318:	e17ffe15 	stw	r5,-8(fp)
8110731c:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81107320:	e0bffe17 	ldw	r2,-8(fp)
81107324:	1085883a 	add	r2,r2,r2
81107328:	1085883a 	add	r2,r2,r2
8110732c:	1007883a 	mov	r3,r2
81107330:	e0bffd17 	ldw	r2,-12(fp)
81107334:	10c5883a 	add	r2,r2,r3
81107338:	e0ffff17 	ldw	r3,-4(fp)
8110733c:	10c00015 	stw	r3,0(r2)
}
81107340:	0001883a 	nop
81107344:	e037883a 	mov	sp,fp
81107348:	df000017 	ldw	fp,0(sp)
8110734c:	dec00104 	addi	sp,sp,4
81107350:	f800283a 	ret

81107354 <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
81107354:	defffc04 	addi	sp,sp,-16
81107358:	de00012e 	bgeu	sp,et,81107360 <uliRstReadReg+0xc>
8110735c:	003b68fa 	trap	3
81107360:	df000315 	stw	fp,12(sp)
81107364:	df000304 	addi	fp,sp,12
81107368:	e13ffe15 	stw	r4,-8(fp)
8110736c:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81107370:	e0bfff17 	ldw	r2,-4(fp)
81107374:	1085883a 	add	r2,r2,r2
81107378:	1085883a 	add	r2,r2,r2
8110737c:	1007883a 	mov	r3,r2
81107380:	e0bffe17 	ldw	r2,-8(fp)
81107384:	10c5883a 	add	r2,r2,r3
81107388:	10800017 	ldw	r2,0(r2)
8110738c:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81107390:	e0bffd17 	ldw	r2,-12(fp)
}
81107394:	e037883a 	mov	sp,fp
81107398:	df000017 	ldw	fp,0(sp)
8110739c:	dec00104 	addi	sp,sp,4
811073a0:	f800283a 	ret

811073a4 <v_spi_start>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

void v_spi_start(void){
811073a4:	defffe04 	addi	sp,sp,-8
811073a8:	de00012e 	bgeu	sp,et,811073b0 <v_spi_start+0xc>
811073ac:	003b68fa 	trap	3
811073b0:	dfc00115 	stw	ra,4(sp)
811073b4:	df000015 	stw	fp,0(sp)
811073b8:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
811073bc:	0007883a 	mov	r3,zero
811073c0:	00a00034 	movhi	r2,32768
811073c4:	10823004 	addi	r2,r2,2240
811073c8:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
811073cc:	0007883a 	mov	r3,zero
811073d0:	00a00034 	movhi	r2,32768
811073d4:	10822c04 	addi	r2,r2,2224
811073d8:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
811073dc:	01002584 	movi	r4,150
811073e0:	11263700 	call	81126370 <usleep>
}
811073e4:	0001883a 	nop
811073e8:	e037883a 	mov	sp,fp
811073ec:	dfc00117 	ldw	ra,4(sp)
811073f0:	df000017 	ldw	fp,0(sp)
811073f4:	dec00204 	addi	sp,sp,8
811073f8:	f800283a 	ret

811073fc <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
811073fc:	defffc04 	addi	sp,sp,-16
81107400:	de00012e 	bgeu	sp,et,81107408 <v_spi_send_byte+0xc>
81107404:	003b68fa 	trap	3
81107408:	dfc00315 	stw	ra,12(sp)
8110740c:	df000215 	stw	fp,8(sp)
81107410:	df000204 	addi	fp,sp,8
81107414:	2005883a 	mov	r2,r4
81107418:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
8110741c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
81107420:	00bfe004 	movi	r2,-128
81107424:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81107428:	e03ffe05 	stb	zero,-8(fp)
8110742c:	00001b06 	br	8110749c <v_spi_send_byte+0xa0>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
81107430:	e0ffff03 	ldbu	r3,-4(fp)
81107434:	e0bffe43 	ldbu	r2,-7(fp)
81107438:	1884703a 	and	r2,r3,r2
8110743c:	10803fcc 	andi	r2,r2,255
81107440:	1004c03a 	cmpne	r2,r2,zero
81107444:	10c03fcc 	andi	r3,r2,255
81107448:	00a00034 	movhi	r2,32768
8110744c:	10823404 	addi	r2,r2,2256
81107450:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
81107454:	e0bffe43 	ldbu	r2,-7(fp)
81107458:	1004d07a 	srli	r2,r2,1
8110745c:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
81107460:	00c00044 	movi	r3,1
81107464:	00a00034 	movhi	r2,32768
81107468:	10823004 	addi	r2,r2,2240
8110746c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107470:	01002584 	movi	r4,150
81107474:	11263700 	call	81126370 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81107478:	0007883a 	mov	r3,zero
8110747c:	00a00034 	movhi	r2,32768
81107480:	10823004 	addi	r2,r2,2240
81107484:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107488:	01002584 	movi	r4,150
8110748c:	11263700 	call	81126370 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81107490:	e0bffe03 	ldbu	r2,-8(fp)
81107494:	10800044 	addi	r2,r2,1
81107498:	e0bffe05 	stb	r2,-8(fp)
8110749c:	e0bffe03 	ldbu	r2,-8(fp)
811074a0:	10800230 	cmpltui	r2,r2,8
811074a4:	103fe21e 	bne	r2,zero,81107430 <__reset+0xfb0e7430>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
811074a8:	0001883a 	nop
811074ac:	e037883a 	mov	sp,fp
811074b0:	dfc00117 	ldw	ra,4(sp)
811074b4:	df000017 	ldw	fp,0(sp)
811074b8:	dec00204 	addi	sp,sp,8
811074bc:	f800283a 	ret

811074c0 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
811074c0:	defffd04 	addi	sp,sp,-12
811074c4:	de00012e 	bgeu	sp,et,811074cc <uc_spi_get_byte+0xc>
811074c8:	003b68fa 	trap	3
811074cc:	dfc00215 	stw	ra,8(sp)
811074d0:	df000115 	stw	fp,4(sp)
811074d4:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
811074d8:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
811074dc:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
811074e0:	e03fff05 	stb	zero,-4(fp)
811074e4:	00001a06 	br	81107550 <uc_spi_get_byte+0x90>
    {
        uc_data <<= 1;
811074e8:	e0bfff43 	ldbu	r2,-3(fp)
811074ec:	1085883a 	add	r2,r2,r2
811074f0:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
811074f4:	00a00034 	movhi	r2,32768
811074f8:	10823804 	addi	r2,r2,2272
811074fc:	10800037 	ldwio	r2,0(r2)
81107500:	1080004c 	andi	r2,r2,1
81107504:	1007883a 	mov	r3,r2
81107508:	e0bfff43 	ldbu	r2,-3(fp)
8110750c:	1884b03a 	or	r2,r3,r2
81107510:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
81107514:	00c00044 	movi	r3,1
81107518:	00a00034 	movhi	r2,32768
8110751c:	10823004 	addi	r2,r2,2240
81107520:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107524:	01002584 	movi	r4,150
81107528:	11263700 	call	81126370 <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110752c:	0007883a 	mov	r3,zero
81107530:	00a00034 	movhi	r2,32768
81107534:	10823004 	addi	r2,r2,2240
81107538:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110753c:	01002584 	movi	r4,150
81107540:	11263700 	call	81126370 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
81107544:	e0bfff03 	ldbu	r2,-4(fp)
81107548:	10800044 	addi	r2,r2,1
8110754c:	e0bfff05 	stb	r2,-4(fp)
81107550:	e0bfff03 	ldbu	r2,-4(fp)
81107554:	10800230 	cmpltui	r2,r2,8
81107558:	103fe31e 	bne	r2,zero,811074e8 <__reset+0xfb0e74e8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
8110755c:	e0bfff43 	ldbu	r2,-3(fp)
}
81107560:	e037883a 	mov	sp,fp
81107564:	dfc00117 	ldw	ra,4(sp)
81107568:	df000017 	ldw	fp,0(sp)
8110756c:	dec00204 	addi	sp,sp,8
81107570:	f800283a 	ret

81107574 <v_spi_end>:

void v_spi_end(void){
81107574:	defffe04 	addi	sp,sp,-8
81107578:	de00012e 	bgeu	sp,et,81107580 <v_spi_end+0xc>
8110757c:	003b68fa 	trap	3
81107580:	dfc00115 	stw	ra,4(sp)
81107584:	df000015 	stw	fp,0(sp)
81107588:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
8110758c:	0007883a 	mov	r3,zero
81107590:	00a00034 	movhi	r2,32768
81107594:	10823004 	addi	r2,r2,2240
81107598:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110759c:	01002584 	movi	r4,150
811075a0:	11263700 	call	81126370 <usleep>
    SPI_CS_N(1);
811075a4:	00c00044 	movi	r3,1
811075a8:	00a00034 	movhi	r2,32768
811075ac:	10822c04 	addi	r2,r2,2224
811075b0:	10c00035 	stwio	r3,0(r2)
}
811075b4:	0001883a 	nop
811075b8:	e037883a 	mov	sp,fp
811075bc:	dfc00117 	ldw	ra,4(sp)
811075c0:	df000017 	ldw	fp,0(sp)
811075c4:	dec00204 	addi	sp,sp,8
811075c8:	f800283a 	ret

811075cc <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
811075cc:	defff604 	addi	sp,sp,-40
811075d0:	de00012e 	bgeu	sp,et,811075d8 <RTCC_SPI_R_MAC+0xc>
811075d4:	003b68fa 	trap	3
811075d8:	dfc00915 	stw	ra,36(sp)
811075dc:	df000815 	stw	fp,32(sp)
811075e0:	df000804 	addi	fp,sp,32
811075e4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811075e8:	e03ffc15 	stw	zero,-16(fp)

    alt_u8 uc_EUI48_B0 = 0;
811075ec:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 uc_EUI48_B1 = 0;
811075f0:	e03ffd45 	stb	zero,-11(fp)
    alt_u8 uc_EUI48_B2 = 0;
811075f4:	e03ffd85 	stb	zero,-10(fp)
    alt_u8 uc_EUI48_B3 = 0;
811075f8:	e03ffdc5 	stb	zero,-9(fp)
    alt_u8 uc_EUI48_B4 = 0;
811075fc:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_EUI48_B5 = 0;
81107600:	e03ffe45 	stb	zero,-7(fp)

//    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
81107604:	00800084 	movi	r2,2
81107608:	e0bffe85 	stb	r2,-6(fp)
//    const alt_u8 uc_EUI48_B2_addr = 0x04;
//    const alt_u8 uc_EUI48_B3_addr = 0x05;
//    const alt_u8 uc_EUI48_B4_addr = 0x06;
//    const alt_u8 uc_EUI48_B5_addr = 0x07;

    const alt_u8 uc_IDREAD_cmd = 0x33;
8110760c:	00800cc4 	movi	r2,51
81107610:	e0bffec5 	stb	r2,-5(fp)

//    int i = 0;
    
    // Start Communication
    v_spi_start();
81107614:	11073a40 	call	811073a4 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81107618:	e0bffec3 	ldbu	r2,-5(fp)
8110761c:	1009883a 	mov	r4,r2
81107620:	11073fc0 	call	811073fc <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81107624:	e0bffe83 	ldbu	r2,-6(fp)
81107628:	1009883a 	mov	r4,r2
8110762c:	11073fc0 	call	811073fc <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
81107630:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107634:	e0bffd05 	stb	r2,-12(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
81107638:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110763c:	e0bffd45 	stb	r2,-11(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81107640:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107644:	e0bffd85 	stb	r2,-10(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
81107648:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110764c:	e0bffdc5 	stb	r2,-9(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81107650:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107654:	e0bffe05 	stb	r2,-8(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
81107658:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110765c:	e0bffe45 	stb	r2,-7(fp)

    // End communication
    v_spi_end();
81107660:	11075740 	call	81107574 <v_spi_end>

    bSuccess = TRUE;
81107664:	00800044 	movi	r2,1
81107668:	e0bffc15 	stw	r2,-16(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
8110766c:	e0bfff17 	ldw	r2,-4(fp)
81107670:	e0fffd03 	ldbu	r3,-12(fp)
81107674:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
81107678:	e0bfff17 	ldw	r2,-4(fp)
8110767c:	10800044 	addi	r2,r2,1
81107680:	e0fffd43 	ldbu	r3,-11(fp)
81107684:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
81107688:	e0bfff17 	ldw	r2,-4(fp)
8110768c:	10800084 	addi	r2,r2,2
81107690:	e0fffd83 	ldbu	r3,-10(fp)
81107694:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81107698:	e0bfff17 	ldw	r2,-4(fp)
8110769c:	108000c4 	addi	r2,r2,3
811076a0:	e0fffdc3 	ldbu	r3,-9(fp)
811076a4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
811076a8:	e0bfff17 	ldw	r2,-4(fp)
811076ac:	10800104 	addi	r2,r2,4
811076b0:	e0fffe03 	ldbu	r3,-8(fp)
811076b4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
811076b8:	e0bfff17 	ldw	r2,-4(fp)
811076bc:	10800144 	addi	r2,r2,5
811076c0:	e0fffe43 	ldbu	r3,-7(fp)
811076c4:	10c00005 	stb	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
811076c8:	e1bffd03 	ldbu	r6,-12(fp)
811076cc:	e1fffd43 	ldbu	r7,-11(fp)
811076d0:	e0bffd83 	ldbu	r2,-10(fp)
811076d4:	e0fffdc3 	ldbu	r3,-9(fp)
811076d8:	e13ffe03 	ldbu	r4,-8(fp)
811076dc:	e17ffe43 	ldbu	r5,-7(fp)
811076e0:	d9400315 	stw	r5,12(sp)
811076e4:	d9000215 	stw	r4,8(sp)
811076e8:	d8c00115 	stw	r3,4(sp)
811076ec:	d8800015 	stw	r2,0(sp)
811076f0:	01604534 	movhi	r5,33044
811076f4:	296b7e04 	addi	r5,r5,-21000
811076f8:	01204534 	movhi	r4,33044
811076fc:	213aec04 	addi	r4,r4,-5200
81107700:	11116100 	call	81111610 <sprintf>
	debug(fp, cDebugBuffer);
81107704:	d0a04d17 	ldw	r2,-32460(gp)
81107708:	01604534 	movhi	r5,33044
8110770c:	297aec04 	addi	r5,r5,-5200
81107710:	1009883a 	mov	r4,r2
81107714:	110fea80 	call	8110fea8 <fprintf>
#endif

    return bSuccess;
81107718:	e0bffc17 	ldw	r2,-16(fp)
}
8110771c:	e037883a 	mov	sp,fp
81107720:	dfc00117 	ldw	ra,4(sp)
81107724:	df000017 	ldw	fp,0(sp)
81107728:	dec00204 	addi	sp,sp,8
8110772c:	f800283a 	ret

81107730 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
81107730:	defffd04 	addi	sp,sp,-12
81107734:	de00012e 	bgeu	sp,et,8110773c <bSSDisplayConfig+0xc>
81107738:	003b68fa 	trap	3
8110773c:	df000215 	stw	fp,8(sp)
81107740:	df000204 	addi	fp,sp,8
81107744:	2005883a 	mov	r2,r4
81107748:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
8110774c:	e0bfff03 	ldbu	r2,-4(fp)
81107750:	10c00168 	cmpgeui	r3,r2,5
81107754:	18001c1e 	bne	r3,zero,811077c8 <bSSDisplayConfig+0x98>
81107758:	100690ba 	slli	r3,r2,2
8110775c:	00a04434 	movhi	r2,33040
81107760:	109ddc04 	addi	r2,r2,30576
81107764:	1885883a 	add	r2,r3,r2
81107768:	10800017 	ldw	r2,0(r2)
8110776c:	1000683a 	jmp	r2
81107770:	81107784 	addi	r4,r16,16862
81107774:	81107790 	cmplti	r4,r16,16862
81107778:	8110779c 	xori	r4,r16,16862
8110777c:	811077b0 	cmpltui	r4,r16,16862
81107780:	811077c0 	call	8811077c <__reset+0x20f077c>
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
81107784:	00800cc4 	movi	r2,51
81107788:	d0a04545 	stb	r2,-32491(gp)
	    break;
8110778c:	00001006 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81107790:	00801544 	movi	r2,85
81107794:	d0a04545 	stb	r2,-32491(gp)
	    break;
81107798:	00000d06 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
8110779c:	d0e04543 	ldbu	r3,-32491(gp)
811077a0:	00bff744 	movi	r2,-35
811077a4:	1884703a 	and	r2,r3,r2
811077a8:	d0a04545 	stb	r2,-32491(gp)
	    break;
811077ac:	00000806 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
811077b0:	d0a04543 	ldbu	r2,-32491(gp)
811077b4:	10800894 	ori	r2,r2,34
811077b8:	d0a04545 	stb	r2,-32491(gp)
	    break;
811077bc:	00000406 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
811077c0:	d0204545 	stb	zero,-32491(gp)
	    break;
811077c4:	00000206 	br	811077d0 <bSSDisplayConfig+0xa0>
		
		default:
		    return FALSE;
811077c8:	0005883a 	mov	r2,zero
811077cc:	00000806 	br	811077f0 <bSSDisplayConfig+0xc0>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
811077d0:	00a00034 	movhi	r2,32768
811077d4:	10828404 	addi	r2,r2,2576
811077d8:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
811077dc:	d0a04543 	ldbu	r2,-32491(gp)
811077e0:	10c03fcc 	andi	r3,r2,255
811077e4:	e0bffe17 	ldw	r2,-8(fp)
811077e8:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811077ec:	00800044 	movi	r2,1
}
811077f0:	e037883a 	mov	sp,fp
811077f4:	df000017 	ldw	fp,0(sp)
811077f8:	dec00104 	addi	sp,sp,4
811077fc:	f800283a 	ret

81107800 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
81107800:	defffd04 	addi	sp,sp,-12
81107804:	de00012e 	bgeu	sp,et,8110780c <bSSDisplayUpdate+0xc>
81107808:	003b68fa 	trap	3
8110780c:	df000215 	stw	fp,8(sp)
81107810:	df000204 	addi	fp,sp,8
81107814:	2005883a 	mov	r2,r4
81107818:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
8110781c:	00a00034 	movhi	r2,32768
81107820:	10828404 	addi	r2,r2,2576
81107824:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81107828:	e0bffe17 	ldw	r2,-8(fp)
8110782c:	10800104 	addi	r2,r2,4
81107830:	e0ffff03 	ldbu	r3,-4(fp)
81107834:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81107838:	00800044 	movi	r2,1
}
8110783c:	e037883a 	mov	sp,fp
81107840:	df000017 	ldw	fp,0(sp)
81107844:	dec00104 	addi	sp,sp,4
81107848:	f800283a 	ret

8110784c <vSyncHandleIrq>:
 *
 * @param [in] void* context
 *
 * @retval void
 */
void vSyncHandleIrq(void* pvContext) {
8110784c:	defffd04 	addi	sp,sp,-12
81107850:	de00012e 	bgeu	sp,et,81107858 <vSyncHandleIrq+0xc>
81107854:	003b68fa 	trap	3
81107858:	df000215 	stw	fp,8(sp)
8110785c:	df000204 	addi	fp,sp,8
81107860:	e13fff15 	stw	r4,-4(fp)
	// Cast pvContext to viHoldContext's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81107864:	e0bfff17 	ldw	r2,-4(fp)
81107868:	e0bffe15 	stw	r2,-8(fp)
	// Use pvContext value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vucN += 1;
8110786c:	d0a04703 	ldbu	r2,-32484(gp)
81107870:	10800044 	addi	r2,r2,1
81107874:	d0a04705 	stb	r2,-32484(gp)
}
81107878:	0001883a 	nop
8110787c:	e037883a 	mov	sp,fp
81107880:	df000017 	ldw	fp,0(sp)
81107884:	dec00104 	addi	sp,sp,4
81107888:	f800283a 	ret

8110788c <vSyncInitIrq>:
 *
 * @param [in] void
 *
 * @retval void
 */
void vSyncInitIrq(void) {
8110788c:	defffd04 	addi	sp,sp,-12
81107890:	de00012e 	bgeu	sp,et,81107898 <vSyncInitIrq+0xc>
81107894:	003b68fa 	trap	3
81107898:	dfc00215 	stw	ra,8(sp)
8110789c:	df000115 	stw	fp,4(sp)
811078a0:	df000104 	addi	fp,sp,4
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	void* hold_context_ptr = (void*) &viHoldContext;
811078a4:	d0a04604 	addi	r2,gp,-32488
811078a8:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(SYNC_IRQ, hold_context_ptr, vSyncHandleIrq);
811078ac:	01a04434 	movhi	r6,33040
811078b0:	319e1304 	addi	r6,r6,30796
811078b4:	e17fff17 	ldw	r5,-4(fp)
811078b8:	01000284 	movi	r4,10
811078bc:	11258440 	call	81125844 <alt_irq_register>
}
811078c0:	0001883a 	nop
811078c4:	e037883a 	mov	sp,fp
811078c8:	dfc00117 	ldw	ra,4(sp)
811078cc:	df000017 	ldw	fp,0(sp)
811078d0:	dec00204 	addi	sp,sp,8
811078d4:	f800283a 	ret

811078d8 <bSyncStatusExtnIrq>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncStatusExtnIrq(void) {
811078d8:	defffc04 	addi	sp,sp,-16
811078dc:	de00012e 	bgeu	sp,et,811078e4 <bSyncStatusExtnIrq+0xc>
811078e0:	003b68fa 	trap	3
811078e4:	dfc00315 	stw	ra,12(sp)
811078e8:	df000215 	stw	fp,8(sp)
811078ec:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811078f0:	0009883a 	mov	r4,zero
811078f4:	11086880 	call	81108688 <uliSyncReadReg>
811078f8:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_STAT_EXTN_IRQ_MSK) {
811078fc:	e0bfff17 	ldw	r2,-4(fp)
81107900:	1000030e 	bge	r2,zero,81107910 <bSyncStatusExtnIrq+0x38>
		bResult = TRUE;
81107904:	00800044 	movi	r2,1
81107908:	e0bffe15 	stw	r2,-8(fp)
8110790c:	00000106 	br	81107914 <bSyncStatusExtnIrq+0x3c>
	} else {
		bResult = FALSE;
81107910:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81107914:	e0bffe17 	ldw	r2,-8(fp)
}
81107918:	e037883a 	mov	sp,fp
8110791c:	dfc00117 	ldw	ra,4(sp)
81107920:	df000017 	ldw	fp,0(sp)
81107924:	dec00204 	addi	sp,sp,8
81107928:	f800283a 	ret

8110792c <ucSyncStatusState>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusState(void) {
8110792c:	defffc04 	addi	sp,sp,-16
81107930:	de00012e 	bgeu	sp,et,81107938 <ucSyncStatusState+0xc>
81107934:	003b68fa 	trap	3
81107938:	dfc00315 	stw	ra,12(sp)
8110793c:	df000215 	stw	fp,8(sp)
81107940:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107944:	0009883a 	mov	r4,zero
81107948:	11086880 	call	81108688 <uliSyncReadReg>
8110794c:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_STATE_MSK) >> 16);
81107950:	e0bffe17 	ldw	r2,-8(fp)
81107954:	10803fec 	andhi	r2,r2,255
81107958:	1004d43a 	srli	r2,r2,16
8110795c:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107960:	e0bfff03 	ldbu	r2,-4(fp)
}
81107964:	e037883a 	mov	sp,fp
81107968:	dfc00117 	ldw	ra,4(sp)
8110796c:	df000017 	ldw	fp,0(sp)
81107970:	dec00204 	addi	sp,sp,8
81107974:	f800283a 	ret

81107978 <ucSyncStatusErrorCode>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusErrorCode(void) {
81107978:	defffc04 	addi	sp,sp,-16
8110797c:	de00012e 	bgeu	sp,et,81107984 <ucSyncStatusErrorCode+0xc>
81107980:	003b68fa 	trap	3
81107984:	dfc00315 	stw	ra,12(sp)
81107988:	df000215 	stw	fp,8(sp)
8110798c:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107990:	0009883a 	mov	r4,zero
81107994:	11086880 	call	81108688 <uliSyncReadReg>
81107998:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_ERROR_CODE_MSK) >> 8);
8110799c:	e0bffe17 	ldw	r2,-8(fp)
811079a0:	10bfc00c 	andi	r2,r2,65280
811079a4:	1004d23a 	srli	r2,r2,8
811079a8:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079ac:	e0bfff03 	ldbu	r2,-4(fp)
}
811079b0:	e037883a 	mov	sp,fp
811079b4:	dfc00117 	ldw	ra,4(sp)
811079b8:	df000017 	ldw	fp,0(sp)
811079bc:	dec00204 	addi	sp,sp,8
811079c0:	f800283a 	ret

811079c4 <ucSyncStatusCycleNumber>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusCycleNumber(void) {
811079c4:	defffc04 	addi	sp,sp,-16
811079c8:	de00012e 	bgeu	sp,et,811079d0 <ucSyncStatusCycleNumber+0xc>
811079cc:	003b68fa 	trap	3
811079d0:	dfc00315 	stw	ra,12(sp)
811079d4:	df000215 	stw	fp,8(sp)
811079d8:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811079dc:	0009883a 	mov	r4,zero
811079e0:	11086880 	call	81108688 <uliSyncReadReg>
811079e4:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_CYCLE_NUMBER_MSK) >> 0);
811079e8:	e0bffe17 	ldw	r2,-8(fp)
811079ec:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079f0:	e0bfff03 	ldbu	r2,-4(fp)
}
811079f4:	e037883a 	mov	sp,fp
811079f8:	dfc00117 	ldw	ra,4(sp)
811079fc:	df000017 	ldw	fp,0(sp)
81107a00:	dec00204 	addi	sp,sp,8
81107a04:	f800283a 	ret

81107a08 <bSyncSetMbt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetMbt(alt_u32 uliValue) {
81107a08:	defffd04 	addi	sp,sp,-12
81107a0c:	de00012e 	bgeu	sp,et,81107a14 <bSyncSetMbt+0xc>
81107a10:	003b68fa 	trap	3
81107a14:	dfc00215 	stw	ra,8(sp)
81107a18:	df000115 	stw	fp,4(sp)
81107a1c:	df000104 	addi	fp,sp,4
81107a20:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_MBT_REG_OFFSET, uliValue);
81107a24:	e17fff17 	ldw	r5,-4(fp)
81107a28:	01000104 	movi	r4,4
81107a2c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107a30:	00800044 	movi	r2,1
}
81107a34:	e037883a 	mov	sp,fp
81107a38:	dfc00117 	ldw	ra,4(sp)
81107a3c:	df000017 	ldw	fp,0(sp)
81107a40:	dec00204 	addi	sp,sp,8
81107a44:	f800283a 	ret

81107a48 <bSyncSetBt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetBt(alt_u32 uliValue) {
81107a48:	defffd04 	addi	sp,sp,-12
81107a4c:	de00012e 	bgeu	sp,et,81107a54 <bSyncSetBt+0xc>
81107a50:	003b68fa 	trap	3
81107a54:	dfc00215 	stw	ra,8(sp)
81107a58:	df000115 	stw	fp,4(sp)
81107a5c:	df000104 	addi	fp,sp,4
81107a60:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_BT_REG_OFFSET, uliValue);
81107a64:	e17fff17 	ldw	r5,-4(fp)
81107a68:	01000144 	movi	r4,5
81107a6c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107a70:	00800044 	movi	r2,1
}
81107a74:	e037883a 	mov	sp,fp
81107a78:	dfc00117 	ldw	ra,4(sp)
81107a7c:	df000017 	ldw	fp,0(sp)
81107a80:	dec00204 	addi	sp,sp,8
81107a84:	f800283a 	ret

81107a88 <bSyncSetPer>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetPer(alt_u32 uliValue) {
81107a88:	defffd04 	addi	sp,sp,-12
81107a8c:	de00012e 	bgeu	sp,et,81107a94 <bSyncSetPer+0xc>
81107a90:	003b68fa 	trap	3
81107a94:	dfc00215 	stw	ra,8(sp)
81107a98:	df000115 	stw	fp,4(sp)
81107a9c:	df000104 	addi	fp,sp,4
81107aa0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_PER_REG_OFFSET, uliValue);
81107aa4:	e17fff17 	ldw	r5,-4(fp)
81107aa8:	01000184 	movi	r4,6
81107aac:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107ab0:	00800044 	movi	r2,1
}
81107ab4:	e037883a 	mov	sp,fp
81107ab8:	dfc00117 	ldw	ra,4(sp)
81107abc:	df000017 	ldw	fp,0(sp)
81107ac0:	dec00204 	addi	sp,sp,8
81107ac4:	f800283a 	ret

81107ac8 <bSyncSetOst>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetOst(alt_u32 uliValue) {
81107ac8:	defffd04 	addi	sp,sp,-12
81107acc:	de00012e 	bgeu	sp,et,81107ad4 <bSyncSetOst+0xc>
81107ad0:	003b68fa 	trap	3
81107ad4:	dfc00215 	stw	ra,8(sp)
81107ad8:	df000115 	stw	fp,4(sp)
81107adc:	df000104 	addi	fp,sp,4
81107ae0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_OST_REG_OFFSET, uliValue);
81107ae4:	e17fff17 	ldw	r5,-4(fp)
81107ae8:	010001c4 	movi	r4,7
81107aec:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107af0:	00800044 	movi	r2,1
}
81107af4:	e037883a 	mov	sp,fp
81107af8:	dfc00117 	ldw	ra,4(sp)
81107afc:	df000017 	ldw	fp,0(sp)
81107b00:	dec00204 	addi	sp,sp,8
81107b04:	f800283a 	ret

81107b08 <bSyncSetPolarity>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncSetPolarity(bool bValue) {
81107b08:	defffc04 	addi	sp,sp,-16
81107b0c:	de00012e 	bgeu	sp,et,81107b14 <bSyncSetPolarity+0xc>
81107b10:	003b68fa 	trap	3
81107b14:	dfc00315 	stw	ra,12(sp)
81107b18:	df000215 	stw	fp,8(sp)
81107b1c:	df000204 	addi	fp,sp,8
81107b20:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b24:	01000204 	movi	r4,8
81107b28:	11086880 	call	81108688 <uliSyncReadReg>
81107b2c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107b30:	e0bfff17 	ldw	r2,-4(fp)
81107b34:	1000051e 	bne	r2,zero,81107b4c <bSyncSetPolarity+0x44>
		uliAux &= ~SYNC_CONFIG_GEN_POLARITY_MSK;
81107b38:	e0fffe17 	ldw	r3,-8(fp)
81107b3c:	00bfbfc4 	movi	r2,-257
81107b40:	1884703a 	and	r2,r3,r2
81107b44:	e0bffe15 	stw	r2,-8(fp)
81107b48:	00000306 	br	81107b58 <bSyncSetPolarity+0x50>
	} else {
		uliAux |= SYNC_CONFIG_GEN_POLARITY_MSK;
81107b4c:	e0bffe17 	ldw	r2,-8(fp)
81107b50:	10804014 	ori	r2,r2,256
81107b54:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107b58:	e17ffe17 	ldw	r5,-8(fp)
81107b5c:	01000204 	movi	r4,8
81107b60:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107b64:	00800044 	movi	r2,1
}
81107b68:	e037883a 	mov	sp,fp
81107b6c:	dfc00117 	ldw	ra,4(sp)
81107b70:	df000017 	ldw	fp,0(sp)
81107b74:	dec00204 	addi	sp,sp,8
81107b78:	f800283a 	ret

81107b7c <bSyncSetNCycles>:
 *
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
bool bSyncSetNCycles(alt_u8 ucValue) {
81107b7c:	defffc04 	addi	sp,sp,-16
81107b80:	de00012e 	bgeu	sp,et,81107b88 <bSyncSetNCycles+0xc>
81107b84:	003b68fa 	trap	3
81107b88:	dfc00315 	stw	ra,12(sp)
81107b8c:	df000215 	stw	fp,8(sp)
81107b90:	df000204 	addi	fp,sp,8
81107b94:	2005883a 	mov	r2,r4
81107b98:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b9c:	01000204 	movi	r4,8
81107ba0:	11086880 	call	81108688 <uliSyncReadReg>
81107ba4:	e0bffe15 	stw	r2,-8(fp)
	uliAux &= ~SYNC_CONFIG_GEN_N_CYCLES_MSK;
81107ba8:	e0fffe17 	ldw	r3,-8(fp)
81107bac:	00bfc004 	movi	r2,-256
81107bb0:	1884703a 	and	r2,r3,r2
81107bb4:	e0bffe15 	stw	r2,-8(fp)
	uliAux |= (alt_u32) ucValue;
81107bb8:	e0bfff03 	ldbu	r2,-4(fp)
81107bbc:	e0fffe17 	ldw	r3,-8(fp)
81107bc0:	1884b03a 	or	r2,r3,r2
81107bc4:	e0bffe15 	stw	r2,-8(fp)

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107bc8:	e17ffe17 	ldw	r5,-8(fp)
81107bcc:	01000204 	movi	r4,8
81107bd0:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107bd4:	00800044 	movi	r2,1
}
81107bd8:	e037883a 	mov	sp,fp
81107bdc:	dfc00117 	ldw	ra,4(sp)
81107be0:	df000017 	ldw	fp,0(sp)
81107be4:	dec00204 	addi	sp,sp,8
81107be8:	f800283a 	ret

81107bec <uliSyncGetMbt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetMbt(void) {
81107bec:	defffd04 	addi	sp,sp,-12
81107bf0:	de00012e 	bgeu	sp,et,81107bf8 <uliSyncGetMbt+0xc>
81107bf4:	003b68fa 	trap	3
81107bf8:	dfc00215 	stw	ra,8(sp)
81107bfc:	df000115 	stw	fp,4(sp)
81107c00:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_MBT_REG_OFFSET);
81107c04:	01000104 	movi	r4,4
81107c08:	11086880 	call	81108688 <uliSyncReadReg>
81107c0c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c10:	e0bfff17 	ldw	r2,-4(fp)
}
81107c14:	e037883a 	mov	sp,fp
81107c18:	dfc00117 	ldw	ra,4(sp)
81107c1c:	df000017 	ldw	fp,0(sp)
81107c20:	dec00204 	addi	sp,sp,8
81107c24:	f800283a 	ret

81107c28 <uliSyncGetBt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetBt(void) {
81107c28:	defffd04 	addi	sp,sp,-12
81107c2c:	de00012e 	bgeu	sp,et,81107c34 <uliSyncGetBt+0xc>
81107c30:	003b68fa 	trap	3
81107c34:	dfc00215 	stw	ra,8(sp)
81107c38:	df000115 	stw	fp,4(sp)
81107c3c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_BT_REG_OFFSET);
81107c40:	01000144 	movi	r4,5
81107c44:	11086880 	call	81108688 <uliSyncReadReg>
81107c48:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c4c:	e0bfff17 	ldw	r2,-4(fp)
}
81107c50:	e037883a 	mov	sp,fp
81107c54:	dfc00117 	ldw	ra,4(sp)
81107c58:	df000017 	ldw	fp,0(sp)
81107c5c:	dec00204 	addi	sp,sp,8
81107c60:	f800283a 	ret

81107c64 <uliSyncGetPer>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetPer(void) {
81107c64:	defffd04 	addi	sp,sp,-12
81107c68:	de00012e 	bgeu	sp,et,81107c70 <uliSyncGetPer+0xc>
81107c6c:	003b68fa 	trap	3
81107c70:	dfc00215 	stw	ra,8(sp)
81107c74:	df000115 	stw	fp,4(sp)
81107c78:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_PER_REG_OFFSET);
81107c7c:	01000184 	movi	r4,6
81107c80:	11086880 	call	81108688 <uliSyncReadReg>
81107c84:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c88:	e0bfff17 	ldw	r2,-4(fp)
}
81107c8c:	e037883a 	mov	sp,fp
81107c90:	dfc00117 	ldw	ra,4(sp)
81107c94:	df000017 	ldw	fp,0(sp)
81107c98:	dec00204 	addi	sp,sp,8
81107c9c:	f800283a 	ret

81107ca0 <uliSyncGetOst>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetOst(void) {
81107ca0:	defffd04 	addi	sp,sp,-12
81107ca4:	de00012e 	bgeu	sp,et,81107cac <uliSyncGetOst+0xc>
81107ca8:	003b68fa 	trap	3
81107cac:	dfc00215 	stw	ra,8(sp)
81107cb0:	df000115 	stw	fp,4(sp)
81107cb4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_OST_REG_OFFSET);
81107cb8:	010001c4 	movi	r4,7
81107cbc:	11086880 	call	81108688 <uliSyncReadReg>
81107cc0:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cc4:	e0bfff17 	ldw	r2,-4(fp)
}
81107cc8:	e037883a 	mov	sp,fp
81107ccc:	dfc00117 	ldw	ra,4(sp)
81107cd0:	df000017 	ldw	fp,0(sp)
81107cd4:	dec00204 	addi	sp,sp,8
81107cd8:	f800283a 	ret

81107cdc <uliSyncGetGeneral>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetGeneral(void) {
81107cdc:	defffd04 	addi	sp,sp,-12
81107ce0:	de00012e 	bgeu	sp,et,81107ce8 <uliSyncGetGeneral+0xc>
81107ce4:	003b68fa 	trap	3
81107ce8:	dfc00215 	stw	ra,8(sp)
81107cec:	df000115 	stw	fp,4(sp)
81107cf0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107cf4:	01000204 	movi	r4,8
81107cf8:	11086880 	call	81108688 <uliSyncReadReg>
81107cfc:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d00:	e0bfff17 	ldw	r2,-4(fp)
}
81107d04:	e037883a 	mov	sp,fp
81107d08:	dfc00117 	ldw	ra,4(sp)
81107d0c:	df000017 	ldw	fp,0(sp)
81107d10:	dec00204 	addi	sp,sp,8
81107d14:	f800283a 	ret

81107d18 <bSyncErrInj>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncErrInj(alt_u32 uliValue) {
81107d18:	defffd04 	addi	sp,sp,-12
81107d1c:	de00012e 	bgeu	sp,et,81107d24 <bSyncErrInj+0xc>
81107d20:	003b68fa 	trap	3
81107d24:	dfc00215 	stw	ra,8(sp)
81107d28:	df000115 	stw	fp,4(sp)
81107d2c:	df000104 	addi	fp,sp,4
81107d30:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_ERR_INJ_REG_OFFSET, uliValue);
81107d34:	e17fff17 	ldw	r5,-4(fp)
81107d38:	01000244 	movi	r4,9
81107d3c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107d40:	00800044 	movi	r2,1
}
81107d44:	e037883a 	mov	sp,fp
81107d48:	dfc00117 	ldw	ra,4(sp)
81107d4c:	df000017 	ldw	fp,0(sp)
81107d50:	dec00204 	addi	sp,sp,8
81107d54:	f800283a 	ret

81107d58 <bSyncCtrExtnIrq>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrExtnIrq(bool bValue) {
81107d58:	defffc04 	addi	sp,sp,-16
81107d5c:	de00012e 	bgeu	sp,et,81107d64 <bSyncCtrExtnIrq+0xc>
81107d60:	003b68fa 	trap	3
81107d64:	dfc00315 	stw	ra,12(sp)
81107d68:	df000215 	stw	fp,8(sp)
81107d6c:	df000204 	addi	fp,sp,8
81107d70:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107d74:	01000284 	movi	r4,10
81107d78:	11086880 	call	81108688 <uliSyncReadReg>
81107d7c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107d80:	e0bfff17 	ldw	r2,-4(fp)
81107d84:	1000061e 	bne	r2,zero,81107da0 <bSyncCtrExtnIrq+0x48>
		uliAux &= ~SYNC_CTR_EXTN_INT_MSK;
81107d88:	e0fffe17 	ldw	r3,-8(fp)
81107d8c:	00a00034 	movhi	r2,32768
81107d90:	10bfffc4 	addi	r2,r2,-1
81107d94:	1884703a 	and	r2,r3,r2
81107d98:	e0bffe15 	stw	r2,-8(fp)
81107d9c:	00000306 	br	81107dac <bSyncCtrExtnIrq+0x54>
	} else {
		uliAux |= SYNC_CTR_EXTN_INT_MSK;
81107da0:	e0bffe17 	ldw	r2,-8(fp)
81107da4:	10a00034 	orhi	r2,r2,32768
81107da8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107dac:	e17ffe17 	ldw	r5,-8(fp)
81107db0:	01000284 	movi	r4,10
81107db4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107db8:	00800044 	movi	r2,1
}
81107dbc:	e037883a 	mov	sp,fp
81107dc0:	dfc00117 	ldw	ra,4(sp)
81107dc4:	df000017 	ldw	fp,0(sp)
81107dc8:	dec00204 	addi	sp,sp,8
81107dcc:	f800283a 	ret

81107dd0 <bSyncCtrStart>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrStart(void) {
81107dd0:	defffd04 	addi	sp,sp,-12
81107dd4:	de00012e 	bgeu	sp,et,81107ddc <bSyncCtrStart+0xc>
81107dd8:	003b68fa 	trap	3
81107ddc:	dfc00215 	stw	ra,8(sp)
81107de0:	df000115 	stw	fp,4(sp)
81107de4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107de8:	01000284 	movi	r4,10
81107dec:	11086880 	call	81108688 <uliSyncReadReg>
81107df0:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_START_MSK;
81107df4:	e0bfff17 	ldw	r2,-4(fp)
81107df8:	10800234 	orhi	r2,r2,8
81107dfc:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e00:	e17fff17 	ldw	r5,-4(fp)
81107e04:	01000284 	movi	r4,10
81107e08:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107e0c:	00800044 	movi	r2,1
}
81107e10:	e037883a 	mov	sp,fp
81107e14:	dfc00117 	ldw	ra,4(sp)
81107e18:	df000017 	ldw	fp,0(sp)
81107e1c:	dec00204 	addi	sp,sp,8
81107e20:	f800283a 	ret

81107e24 <bSyncCtrReset>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrReset(void) {
81107e24:	defffd04 	addi	sp,sp,-12
81107e28:	de00012e 	bgeu	sp,et,81107e30 <bSyncCtrReset+0xc>
81107e2c:	003b68fa 	trap	3
81107e30:	dfc00215 	stw	ra,8(sp)
81107e34:	df000115 	stw	fp,4(sp)
81107e38:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e3c:	01000284 	movi	r4,10
81107e40:	11086880 	call	81108688 <uliSyncReadReg>
81107e44:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_RESET_MSK;
81107e48:	e0bfff17 	ldw	r2,-4(fp)
81107e4c:	10800134 	orhi	r2,r2,4
81107e50:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e54:	e17fff17 	ldw	r5,-4(fp)
81107e58:	01000284 	movi	r4,10
81107e5c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107e60:	00800044 	movi	r2,1
}
81107e64:	e037883a 	mov	sp,fp
81107e68:	dfc00117 	ldw	ra,4(sp)
81107e6c:	df000017 	ldw	fp,0(sp)
81107e70:	dec00204 	addi	sp,sp,8
81107e74:	f800283a 	ret

81107e78 <bSyncCtrOneShot>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrOneShot(void) {
81107e78:	defffd04 	addi	sp,sp,-12
81107e7c:	de00012e 	bgeu	sp,et,81107e84 <bSyncCtrOneShot+0xc>
81107e80:	003b68fa 	trap	3
81107e84:	dfc00215 	stw	ra,8(sp)
81107e88:	df000115 	stw	fp,4(sp)
81107e8c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e90:	01000284 	movi	r4,10
81107e94:	11086880 	call	81108688 <uliSyncReadReg>
81107e98:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ONE_SHOT_MSK;
81107e9c:	e0bfff17 	ldw	r2,-4(fp)
81107ea0:	108000b4 	orhi	r2,r2,2
81107ea4:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107ea8:	e17fff17 	ldw	r5,-4(fp)
81107eac:	01000284 	movi	r4,10
81107eb0:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107eb4:	00800044 	movi	r2,1
}
81107eb8:	e037883a 	mov	sp,fp
81107ebc:	dfc00117 	ldw	ra,4(sp)
81107ec0:	df000017 	ldw	fp,0(sp)
81107ec4:	dec00204 	addi	sp,sp,8
81107ec8:	f800283a 	ret

81107ecc <bSyncCtrErrInj>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrErrInj(void) {
81107ecc:	defffd04 	addi	sp,sp,-12
81107ed0:	de00012e 	bgeu	sp,et,81107ed8 <bSyncCtrErrInj+0xc>
81107ed4:	003b68fa 	trap	3
81107ed8:	dfc00215 	stw	ra,8(sp)
81107edc:	df000115 	stw	fp,4(sp)
81107ee0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107ee4:	01000284 	movi	r4,10
81107ee8:	11086880 	call	81108688 <uliSyncReadReg>
81107eec:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ERR_INJ_MSK;
81107ef0:	e0bfff17 	ldw	r2,-4(fp)
81107ef4:	10800074 	orhi	r2,r2,1
81107ef8:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107efc:	e17fff17 	ldw	r5,-4(fp)
81107f00:	01000284 	movi	r4,10
81107f04:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107f08:	00800044 	movi	r2,1
}
81107f0c:	e037883a 	mov	sp,fp
81107f10:	dfc00117 	ldw	ra,4(sp)
81107f14:	df000017 	ldw	fp,0(sp)
81107f18:	dec00204 	addi	sp,sp,8
81107f1c:	f800283a 	ret

81107f20 <bSyncCtrSyncOutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrSyncOutEnable(bool bValue) {
81107f20:	defffc04 	addi	sp,sp,-16
81107f24:	de00012e 	bgeu	sp,et,81107f2c <bSyncCtrSyncOutEnable+0xc>
81107f28:	003b68fa 	trap	3
81107f2c:	dfc00315 	stw	ra,12(sp)
81107f30:	df000215 	stw	fp,8(sp)
81107f34:	df000204 	addi	fp,sp,8
81107f38:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f3c:	01000284 	movi	r4,10
81107f40:	11086880 	call	81108688 <uliSyncReadReg>
81107f44:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107f48:	e0bfff17 	ldw	r2,-4(fp)
81107f4c:	1000051e 	bne	r2,zero,81107f64 <bSyncCtrSyncOutEnable+0x44>
		uliAux &= ~SYNC_CTR_SYNC_OUT_EN_MSK;
81107f50:	e0fffe17 	ldw	r3,-8(fp)
81107f54:	00bfbfc4 	movi	r2,-257
81107f58:	1884703a 	and	r2,r3,r2
81107f5c:	e0bffe15 	stw	r2,-8(fp)
81107f60:	00000306 	br	81107f70 <bSyncCtrSyncOutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_SYNC_OUT_EN_MSK;
81107f64:	e0bffe17 	ldw	r2,-8(fp)
81107f68:	10804014 	ori	r2,r2,256
81107f6c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f70:	e17ffe17 	ldw	r5,-8(fp)
81107f74:	01000284 	movi	r4,10
81107f78:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107f7c:	00800044 	movi	r2,1
}
81107f80:	e037883a 	mov	sp,fp
81107f84:	dfc00117 	ldw	ra,4(sp)
81107f88:	df000017 	ldw	fp,0(sp)
81107f8c:	dec00204 	addi	sp,sp,8
81107f90:	f800283a 	ret

81107f94 <bSyncCtrCh1OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh1OutEnable(bool bValue) {
81107f94:	defffc04 	addi	sp,sp,-16
81107f98:	de00012e 	bgeu	sp,et,81107fa0 <bSyncCtrCh1OutEnable+0xc>
81107f9c:	003b68fa 	trap	3
81107fa0:	dfc00315 	stw	ra,12(sp)
81107fa4:	df000215 	stw	fp,8(sp)
81107fa8:	df000204 	addi	fp,sp,8
81107fac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107fb0:	01000284 	movi	r4,10
81107fb4:	11086880 	call	81108688 <uliSyncReadReg>
81107fb8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107fbc:	e0bfff17 	ldw	r2,-4(fp)
81107fc0:	1000051e 	bne	r2,zero,81107fd8 <bSyncCtrCh1OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHA_EN_MSK;
81107fc4:	e0fffe17 	ldw	r3,-8(fp)
81107fc8:	00bfff84 	movi	r2,-2
81107fcc:	1884703a 	and	r2,r3,r2
81107fd0:	e0bffe15 	stw	r2,-8(fp)
81107fd4:	00000306 	br	81107fe4 <bSyncCtrCh1OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHA_EN_MSK;
81107fd8:	e0bffe17 	ldw	r2,-8(fp)
81107fdc:	10800054 	ori	r2,r2,1
81107fe0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107fe4:	e17ffe17 	ldw	r5,-8(fp)
81107fe8:	01000284 	movi	r4,10
81107fec:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107ff0:	00800044 	movi	r2,1
}
81107ff4:	e037883a 	mov	sp,fp
81107ff8:	dfc00117 	ldw	ra,4(sp)
81107ffc:	df000017 	ldw	fp,0(sp)
81108000:	dec00204 	addi	sp,sp,8
81108004:	f800283a 	ret

81108008 <bSyncCtrCh2OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh2OutEnable(bool bValue) {
81108008:	defffc04 	addi	sp,sp,-16
8110800c:	de00012e 	bgeu	sp,et,81108014 <bSyncCtrCh2OutEnable+0xc>
81108010:	003b68fa 	trap	3
81108014:	dfc00315 	stw	ra,12(sp)
81108018:	df000215 	stw	fp,8(sp)
8110801c:	df000204 	addi	fp,sp,8
81108020:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108024:	01000284 	movi	r4,10
81108028:	11086880 	call	81108688 <uliSyncReadReg>
8110802c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108030:	e0bfff17 	ldw	r2,-4(fp)
81108034:	1000051e 	bne	r2,zero,8110804c <bSyncCtrCh2OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHB_EN_MSK;
81108038:	e0fffe17 	ldw	r3,-8(fp)
8110803c:	00bfff44 	movi	r2,-3
81108040:	1884703a 	and	r2,r3,r2
81108044:	e0bffe15 	stw	r2,-8(fp)
81108048:	00000306 	br	81108058 <bSyncCtrCh2OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHB_EN_MSK;
8110804c:	e0bffe17 	ldw	r2,-8(fp)
81108050:	10800094 	ori	r2,r2,2
81108054:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108058:	e17ffe17 	ldw	r5,-8(fp)
8110805c:	01000284 	movi	r4,10
81108060:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108064:	00800044 	movi	r2,1
}
81108068:	e037883a 	mov	sp,fp
8110806c:	dfc00117 	ldw	ra,4(sp)
81108070:	df000017 	ldw	fp,0(sp)
81108074:	dec00204 	addi	sp,sp,8
81108078:	f800283a 	ret

8110807c <bSyncCtrCh3OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh3OutEnable(bool bValue) {
8110807c:	defffc04 	addi	sp,sp,-16
81108080:	de00012e 	bgeu	sp,et,81108088 <bSyncCtrCh3OutEnable+0xc>
81108084:	003b68fa 	trap	3
81108088:	dfc00315 	stw	ra,12(sp)
8110808c:	df000215 	stw	fp,8(sp)
81108090:	df000204 	addi	fp,sp,8
81108094:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108098:	01000284 	movi	r4,10
8110809c:	11086880 	call	81108688 <uliSyncReadReg>
811080a0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811080a4:	e0bfff17 	ldw	r2,-4(fp)
811080a8:	1000051e 	bne	r2,zero,811080c0 <bSyncCtrCh3OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHC_EN_MSK;
811080ac:	e0fffe17 	ldw	r3,-8(fp)
811080b0:	00bffec4 	movi	r2,-5
811080b4:	1884703a 	and	r2,r3,r2
811080b8:	e0bffe15 	stw	r2,-8(fp)
811080bc:	00000306 	br	811080cc <bSyncCtrCh3OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHC_EN_MSK;
811080c0:	e0bffe17 	ldw	r2,-8(fp)
811080c4:	10800114 	ori	r2,r2,4
811080c8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811080cc:	e17ffe17 	ldw	r5,-8(fp)
811080d0:	01000284 	movi	r4,10
811080d4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811080d8:	00800044 	movi	r2,1
}
811080dc:	e037883a 	mov	sp,fp
811080e0:	dfc00117 	ldw	ra,4(sp)
811080e4:	df000017 	ldw	fp,0(sp)
811080e8:	dec00204 	addi	sp,sp,8
811080ec:	f800283a 	ret

811080f0 <bSyncCtrCh4OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh4OutEnable(bool bValue) {
811080f0:	defffc04 	addi	sp,sp,-16
811080f4:	de00012e 	bgeu	sp,et,811080fc <bSyncCtrCh4OutEnable+0xc>
811080f8:	003b68fa 	trap	3
811080fc:	dfc00315 	stw	ra,12(sp)
81108100:	df000215 	stw	fp,8(sp)
81108104:	df000204 	addi	fp,sp,8
81108108:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110810c:	01000284 	movi	r4,10
81108110:	11086880 	call	81108688 <uliSyncReadReg>
81108114:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108118:	e0bfff17 	ldw	r2,-4(fp)
8110811c:	1000051e 	bne	r2,zero,81108134 <bSyncCtrCh4OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHD_EN_MSK;
81108120:	e0fffe17 	ldw	r3,-8(fp)
81108124:	00bffdc4 	movi	r2,-9
81108128:	1884703a 	and	r2,r3,r2
8110812c:	e0bffe15 	stw	r2,-8(fp)
81108130:	00000306 	br	81108140 <bSyncCtrCh4OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHD_EN_MSK;
81108134:	e0bffe17 	ldw	r2,-8(fp)
81108138:	10800214 	ori	r2,r2,8
8110813c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108140:	e17ffe17 	ldw	r5,-8(fp)
81108144:	01000284 	movi	r4,10
81108148:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
8110814c:	00800044 	movi	r2,1
}
81108150:	e037883a 	mov	sp,fp
81108154:	dfc00117 	ldw	ra,4(sp)
81108158:	df000017 	ldw	fp,0(sp)
8110815c:	dec00204 	addi	sp,sp,8
81108160:	f800283a 	ret

81108164 <bSyncCtrCh5OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh5OutEnable(bool bValue) {
81108164:	defffc04 	addi	sp,sp,-16
81108168:	de00012e 	bgeu	sp,et,81108170 <bSyncCtrCh5OutEnable+0xc>
8110816c:	003b68fa 	trap	3
81108170:	dfc00315 	stw	ra,12(sp)
81108174:	df000215 	stw	fp,8(sp)
81108178:	df000204 	addi	fp,sp,8
8110817c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108180:	01000284 	movi	r4,10
81108184:	11086880 	call	81108688 <uliSyncReadReg>
81108188:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110818c:	e0bfff17 	ldw	r2,-4(fp)
81108190:	1000051e 	bne	r2,zero,811081a8 <bSyncCtrCh5OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHE_EN_MSK;
81108194:	e0fffe17 	ldw	r3,-8(fp)
81108198:	00bffbc4 	movi	r2,-17
8110819c:	1884703a 	and	r2,r3,r2
811081a0:	e0bffe15 	stw	r2,-8(fp)
811081a4:	00000306 	br	811081b4 <bSyncCtrCh5OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHE_EN_MSK;
811081a8:	e0bffe17 	ldw	r2,-8(fp)
811081ac:	10800414 	ori	r2,r2,16
811081b0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811081b4:	e17ffe17 	ldw	r5,-8(fp)
811081b8:	01000284 	movi	r4,10
811081bc:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811081c0:	00800044 	movi	r2,1
}
811081c4:	e037883a 	mov	sp,fp
811081c8:	dfc00117 	ldw	ra,4(sp)
811081cc:	df000017 	ldw	fp,0(sp)
811081d0:	dec00204 	addi	sp,sp,8
811081d4:	f800283a 	ret

811081d8 <bSyncCtrCh6OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh6OutEnable(bool bValue) {
811081d8:	defffc04 	addi	sp,sp,-16
811081dc:	de00012e 	bgeu	sp,et,811081e4 <bSyncCtrCh6OutEnable+0xc>
811081e0:	003b68fa 	trap	3
811081e4:	dfc00315 	stw	ra,12(sp)
811081e8:	df000215 	stw	fp,8(sp)
811081ec:	df000204 	addi	fp,sp,8
811081f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811081f4:	01000284 	movi	r4,10
811081f8:	11086880 	call	81108688 <uliSyncReadReg>
811081fc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108200:	e0bfff17 	ldw	r2,-4(fp)
81108204:	1000051e 	bne	r2,zero,8110821c <bSyncCtrCh6OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHF_EN_MSK;
81108208:	e0fffe17 	ldw	r3,-8(fp)
8110820c:	00bff7c4 	movi	r2,-33
81108210:	1884703a 	and	r2,r3,r2
81108214:	e0bffe15 	stw	r2,-8(fp)
81108218:	00000306 	br	81108228 <bSyncCtrCh6OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHF_EN_MSK;
8110821c:	e0bffe17 	ldw	r2,-8(fp)
81108220:	10800814 	ori	r2,r2,32
81108224:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108228:	e17ffe17 	ldw	r5,-8(fp)
8110822c:	01000284 	movi	r4,10
81108230:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108234:	00800044 	movi	r2,1
}
81108238:	e037883a 	mov	sp,fp
8110823c:	dfc00117 	ldw	ra,4(sp)
81108240:	df000017 	ldw	fp,0(sp)
81108244:	dec00204 	addi	sp,sp,8
81108248:	f800283a 	ret

8110824c <bSyncCtrCh7OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh7OutEnable(bool bValue) {
8110824c:	defffc04 	addi	sp,sp,-16
81108250:	de00012e 	bgeu	sp,et,81108258 <bSyncCtrCh7OutEnable+0xc>
81108254:	003b68fa 	trap	3
81108258:	dfc00315 	stw	ra,12(sp)
8110825c:	df000215 	stw	fp,8(sp)
81108260:	df000204 	addi	fp,sp,8
81108264:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108268:	01000284 	movi	r4,10
8110826c:	11086880 	call	81108688 <uliSyncReadReg>
81108270:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108274:	e0bfff17 	ldw	r2,-4(fp)
81108278:	1000051e 	bne	r2,zero,81108290 <bSyncCtrCh7OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHG_EN_MSK;
8110827c:	e0fffe17 	ldw	r3,-8(fp)
81108280:	00bfefc4 	movi	r2,-65
81108284:	1884703a 	and	r2,r3,r2
81108288:	e0bffe15 	stw	r2,-8(fp)
8110828c:	00000306 	br	8110829c <bSyncCtrCh7OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHG_EN_MSK;
81108290:	e0bffe17 	ldw	r2,-8(fp)
81108294:	10801014 	ori	r2,r2,64
81108298:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110829c:	e17ffe17 	ldw	r5,-8(fp)
811082a0:	01000284 	movi	r4,10
811082a4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811082a8:	00800044 	movi	r2,1
}
811082ac:	e037883a 	mov	sp,fp
811082b0:	dfc00117 	ldw	ra,4(sp)
811082b4:	df000017 	ldw	fp,0(sp)
811082b8:	dec00204 	addi	sp,sp,8
811082bc:	f800283a 	ret

811082c0 <bSyncCtrCh8OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh8OutEnable(bool bValue) {
811082c0:	defffc04 	addi	sp,sp,-16
811082c4:	de00012e 	bgeu	sp,et,811082cc <bSyncCtrCh8OutEnable+0xc>
811082c8:	003b68fa 	trap	3
811082cc:	dfc00315 	stw	ra,12(sp)
811082d0:	df000215 	stw	fp,8(sp)
811082d4:	df000204 	addi	fp,sp,8
811082d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811082dc:	01000284 	movi	r4,10
811082e0:	11086880 	call	81108688 <uliSyncReadReg>
811082e4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811082e8:	e0bfff17 	ldw	r2,-4(fp)
811082ec:	1000051e 	bne	r2,zero,81108304 <bSyncCtrCh8OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHH_EN_MSK;
811082f0:	e0fffe17 	ldw	r3,-8(fp)
811082f4:	00bfdfc4 	movi	r2,-129
811082f8:	1884703a 	and	r2,r3,r2
811082fc:	e0bffe15 	stw	r2,-8(fp)
81108300:	00000306 	br	81108310 <bSyncCtrCh8OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHH_EN_MSK;
81108304:	e0bffe17 	ldw	r2,-8(fp)
81108308:	10802014 	ori	r2,r2,128
8110830c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108310:	e17ffe17 	ldw	r5,-8(fp)
81108314:	01000284 	movi	r4,10
81108318:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
8110831c:	00800044 	movi	r2,1
}
81108320:	e037883a 	mov	sp,fp
81108324:	dfc00117 	ldw	ra,4(sp)
81108328:	df000017 	ldw	fp,0(sp)
8110832c:	dec00204 	addi	sp,sp,8
81108330:	f800283a 	ret

81108334 <bSyncIrqEnableError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableError(bool bValue) {
81108334:	defffc04 	addi	sp,sp,-16
81108338:	de00012e 	bgeu	sp,et,81108340 <bSyncIrqEnableError+0xc>
8110833c:	003b68fa 	trap	3
81108340:	dfc00315 	stw	ra,12(sp)
81108344:	df000215 	stw	fp,8(sp)
81108348:	df000204 	addi	fp,sp,8
8110834c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
81108350:	01000044 	movi	r4,1
81108354:	11086880 	call	81108688 <uliSyncReadReg>
81108358:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110835c:	e0bfff17 	ldw	r2,-4(fp)
81108360:	1000051e 	bne	r2,zero,81108378 <bSyncIrqEnableError+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_ERROR_MSK;
81108364:	e0fffe17 	ldw	r3,-8(fp)
81108368:	00bfff44 	movi	r2,-3
8110836c:	1884703a 	and	r2,r3,r2
81108370:	e0bffe15 	stw	r2,-8(fp)
81108374:	00000306 	br	81108384 <bSyncIrqEnableError+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_ERROR_MSK;
81108378:	e0bffe17 	ldw	r2,-8(fp)
8110837c:	10800094 	ori	r2,r2,2
81108380:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
81108384:	e17ffe17 	ldw	r5,-8(fp)
81108388:	01000044 	movi	r4,1
8110838c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108390:	00800044 	movi	r2,1
}
81108394:	e037883a 	mov	sp,fp
81108398:	dfc00117 	ldw	ra,4(sp)
8110839c:	df000017 	ldw	fp,0(sp)
811083a0:	dec00204 	addi	sp,sp,8
811083a4:	f800283a 	ret

811083a8 <bSyncIrqEnableBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableBlank(bool bValue) {
811083a8:	defffc04 	addi	sp,sp,-16
811083ac:	de00012e 	bgeu	sp,et,811083b4 <bSyncIrqEnableBlank+0xc>
811083b0:	003b68fa 	trap	3
811083b4:	dfc00315 	stw	ra,12(sp)
811083b8:	df000215 	stw	fp,8(sp)
811083bc:	df000204 	addi	fp,sp,8
811083c0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
811083c4:	01000044 	movi	r4,1
811083c8:	11086880 	call	81108688 <uliSyncReadReg>
811083cc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811083d0:	e0bfff17 	ldw	r2,-4(fp)
811083d4:	1000051e 	bne	r2,zero,811083ec <bSyncIrqEnableBlank+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_BLANK_MSK;
811083d8:	e0fffe17 	ldw	r3,-8(fp)
811083dc:	00bfff84 	movi	r2,-2
811083e0:	1884703a 	and	r2,r3,r2
811083e4:	e0bffe15 	stw	r2,-8(fp)
811083e8:	00000306 	br	811083f8 <bSyncIrqEnableBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_BLANK_MSK;
811083ec:	e0bffe17 	ldw	r2,-8(fp)
811083f0:	10800054 	ori	r2,r2,1
811083f4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
811083f8:	e17ffe17 	ldw	r5,-8(fp)
811083fc:	01000044 	movi	r4,1
81108400:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108404:	00800044 	movi	r2,1
}
81108408:	e037883a 	mov	sp,fp
8110840c:	dfc00117 	ldw	ra,4(sp)
81108410:	df000017 	ldw	fp,0(sp)
81108414:	dec00204 	addi	sp,sp,8
81108418:	f800283a 	ret

8110841c <bSyncIrqFlagClrError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrError(bool bValue) {
8110841c:	defffc04 	addi	sp,sp,-16
81108420:	de00012e 	bgeu	sp,et,81108428 <bSyncIrqFlagClrError+0xc>
81108424:	003b68fa 	trap	3
81108428:	dfc00315 	stw	ra,12(sp)
8110842c:	df000215 	stw	fp,8(sp)
81108430:	df000204 	addi	fp,sp,8
81108434:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
81108438:	01000084 	movi	r4,2
8110843c:	11086880 	call	81108688 <uliSyncReadReg>
81108440:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108444:	e0bfff17 	ldw	r2,-4(fp)
81108448:	1000051e 	bne	r2,zero,81108460 <bSyncIrqFlagClrError+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_ERROR_MSK;
8110844c:	e0fffe17 	ldw	r3,-8(fp)
81108450:	00bfff44 	movi	r2,-3
81108454:	1884703a 	and	r2,r3,r2
81108458:	e0bffe15 	stw	r2,-8(fp)
8110845c:	00000306 	br	8110846c <bSyncIrqFlagClrError+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_ERROR_MSK;
81108460:	e0bffe17 	ldw	r2,-8(fp)
81108464:	10800094 	ori	r2,r2,2
81108468:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
8110846c:	e17ffe17 	ldw	r5,-8(fp)
81108470:	01000084 	movi	r4,2
81108474:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108478:	00800044 	movi	r2,1
}
8110847c:	e037883a 	mov	sp,fp
81108480:	dfc00117 	ldw	ra,4(sp)
81108484:	df000017 	ldw	fp,0(sp)
81108488:	dec00204 	addi	sp,sp,8
8110848c:	f800283a 	ret

81108490 <bSyncIrqFlagClrBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrBlank(bool bValue) {
81108490:	defffc04 	addi	sp,sp,-16
81108494:	de00012e 	bgeu	sp,et,8110849c <bSyncIrqFlagClrBlank+0xc>
81108498:	003b68fa 	trap	3
8110849c:	dfc00315 	stw	ra,12(sp)
811084a0:	df000215 	stw	fp,8(sp)
811084a4:	df000204 	addi	fp,sp,8
811084a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
811084ac:	01000084 	movi	r4,2
811084b0:	11086880 	call	81108688 <uliSyncReadReg>
811084b4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811084b8:	e0bfff17 	ldw	r2,-4(fp)
811084bc:	1000051e 	bne	r2,zero,811084d4 <bSyncIrqFlagClrBlank+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811084c0:	e0fffe17 	ldw	r3,-8(fp)
811084c4:	00bfff84 	movi	r2,-2
811084c8:	1884703a 	and	r2,r3,r2
811084cc:	e0bffe15 	stw	r2,-8(fp)
811084d0:	00000306 	br	811084e0 <bSyncIrqFlagClrBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811084d4:	e0bffe17 	ldw	r2,-8(fp)
811084d8:	10800054 	ori	r2,r2,1
811084dc:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
811084e0:	e17ffe17 	ldw	r5,-8(fp)
811084e4:	01000084 	movi	r4,2
811084e8:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811084ec:	00800044 	movi	r2,1
}
811084f0:	e037883a 	mov	sp,fp
811084f4:	dfc00117 	ldw	ra,4(sp)
811084f8:	df000017 	ldw	fp,0(sp)
811084fc:	dec00204 	addi	sp,sp,8
81108500:	f800283a 	ret

81108504 <bSyncIrqFlagError>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagError(void) {
81108504:	defffc04 	addi	sp,sp,-16
81108508:	de00012e 	bgeu	sp,et,81108510 <bSyncIrqFlagError+0xc>
8110850c:	003b68fa 	trap	3
81108510:	dfc00315 	stw	ra,12(sp)
81108514:	df000215 	stw	fp,8(sp)
81108518:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
8110851c:	010000c4 	movi	r4,3
81108520:	11086880 	call	81108688 <uliSyncReadReg>
81108524:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_ERROR_MSK) {
81108528:	e0bfff17 	ldw	r2,-4(fp)
8110852c:	1080008c 	andi	r2,r2,2
81108530:	10000326 	beq	r2,zero,81108540 <bSyncIrqFlagError+0x3c>
		bResult = TRUE;
81108534:	00800044 	movi	r2,1
81108538:	e0bffe15 	stw	r2,-8(fp)
8110853c:	00000106 	br	81108544 <bSyncIrqFlagError+0x40>
	} else {
		bResult = FALSE;
81108540:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81108544:	e0bffe17 	ldw	r2,-8(fp)
}
81108548:	e037883a 	mov	sp,fp
8110854c:	dfc00117 	ldw	ra,4(sp)
81108550:	df000017 	ldw	fp,0(sp)
81108554:	dec00204 	addi	sp,sp,8
81108558:	f800283a 	ret

8110855c <bSyncIrqFlagBlank>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagBlank(void) {
8110855c:	defffc04 	addi	sp,sp,-16
81108560:	de00012e 	bgeu	sp,et,81108568 <bSyncIrqFlagBlank+0xc>
81108564:	003b68fa 	trap	3
81108568:	dfc00315 	stw	ra,12(sp)
8110856c:	df000215 	stw	fp,8(sp)
81108570:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
81108574:	010000c4 	movi	r4,3
81108578:	11086880 	call	81108688 <uliSyncReadReg>
8110857c:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_BLANK_MSK) {
81108580:	e0bfff17 	ldw	r2,-4(fp)
81108584:	1080004c 	andi	r2,r2,1
81108588:	10000326 	beq	r2,zero,81108598 <bSyncIrqFlagBlank+0x3c>
		bResult = TRUE;
8110858c:	00800044 	movi	r2,1
81108590:	e0bffe15 	stw	r2,-8(fp)
81108594:	00000106 	br	8110859c <bSyncIrqFlagBlank+0x40>
	} else {
		bResult = FALSE;
81108598:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110859c:	e0bffe17 	ldw	r2,-8(fp)
}
811085a0:	e037883a 	mov	sp,fp
811085a4:	dfc00117 	ldw	ra,4(sp)
811085a8:	df000017 	ldw	fp,0(sp)
811085ac:	dec00204 	addi	sp,sp,8
811085b0:	f800283a 	ret

811085b4 <uliSyncGetCtr>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetCtr(void) {
811085b4:	defffd04 	addi	sp,sp,-12
811085b8:	de00012e 	bgeu	sp,et,811085c0 <uliSyncGetCtr+0xc>
811085bc:	003b68fa 	trap	3
811085c0:	dfc00215 	stw	ra,8(sp)
811085c4:	df000115 	stw	fp,4(sp)
811085c8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811085cc:	01000284 	movi	r4,10
811085d0:	11086880 	call	81108688 <uliSyncReadReg>
811085d4:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
811085d8:	e0bfff17 	ldw	r2,-4(fp)
}
811085dc:	e037883a 	mov	sp,fp
811085e0:	dfc00117 	ldw	ra,4(sp)
811085e4:	df000017 	ldw	fp,0(sp)
811085e8:	dec00204 	addi	sp,sp,8
811085ec:	f800283a 	ret

811085f0 <uliSyncReadStatus>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncReadStatus(void) {
811085f0:	defffd04 	addi	sp,sp,-12
811085f4:	de00012e 	bgeu	sp,et,811085fc <uliSyncReadStatus+0xc>
811085f8:	003b68fa 	trap	3
811085fc:	dfc00215 	stw	ra,8(sp)
81108600:	df000115 	stw	fp,4(sp)
81108604:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81108608:	0009883a 	mov	r4,zero
8110860c:	11086880 	call	81108688 <uliSyncReadReg>
81108610:	e0bfff15 	stw	r2,-4(fp)
	return aux;
81108614:	e0bfff17 	ldw	r2,-4(fp)
}
81108618:	e037883a 	mov	sp,fp
8110861c:	dfc00117 	ldw	ra,4(sp)
81108620:	df000017 	ldw	fp,0(sp)
81108624:	dec00204 	addi	sp,sp,8
81108628:	f800283a 	ret

8110862c <bSyncWriteReg>:
 * @param [in] alt_u32 offset
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
static bool bSyncWriteReg(alt_u32 uliOffset, alt_u32 uliValue) {
8110862c:	defffc04 	addi	sp,sp,-16
81108630:	de00012e 	bgeu	sp,et,81108638 <bSyncWriteReg+0xc>
81108634:	003b68fa 	trap	3
81108638:	df000315 	stw	fp,12(sp)
8110863c:	df000304 	addi	fp,sp,12
81108640:	e13ffe15 	stw	r4,-8(fp)
81108644:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81108648:	00a00034 	movhi	r2,32768
8110864c:	10810004 	addi	r2,r2,1024
81108650:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + uliOffset) = uliValue;
81108654:	e0bffe17 	ldw	r2,-8(fp)
81108658:	1085883a 	add	r2,r2,r2
8110865c:	1085883a 	add	r2,r2,r2
81108660:	1007883a 	mov	r3,r2
81108664:	e0bffd17 	ldw	r2,-12(fp)
81108668:	10c5883a 	add	r2,r2,r3
8110866c:	e0ffff17 	ldw	r3,-4(fp)
81108670:	10c00015 	stw	r3,0(r2)
	return TRUE;
81108674:	00800044 	movi	r2,1
}
81108678:	e037883a 	mov	sp,fp
8110867c:	df000017 	ldw	fp,0(sp)
81108680:	dec00104 	addi	sp,sp,4
81108684:	f800283a 	ret

81108688 <uliSyncReadReg>:
 *
 * @param [in] alt_u32 offset
 *
 * @retval alt_u32 value -> reg
 */
static alt_u32 uliSyncReadReg(alt_u32 uliOffset) {
81108688:	defffc04 	addi	sp,sp,-16
8110868c:	de00012e 	bgeu	sp,et,81108694 <uliSyncReadReg+0xc>
81108690:	003b68fa 	trap	3
81108694:	df000315 	stw	fp,12(sp)
81108698:	df000304 	addi	fp,sp,12
8110869c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
811086a0:	00a00034 	movhi	r2,32768
811086a4:	10810004 	addi	r2,r2,1024
811086a8:	e0bffd15 	stw	r2,-12(fp)
	value = *(p_addr + uliOffset);
811086ac:	e0bfff17 	ldw	r2,-4(fp)
811086b0:	1085883a 	add	r2,r2,r2
811086b4:	1085883a 	add	r2,r2,r2
811086b8:	1007883a 	mov	r3,r2
811086bc:	e0bffd17 	ldw	r2,-12(fp)
811086c0:	10c5883a 	add	r2,r2,r3
811086c4:	10800017 	ldw	r2,0(r2)
811086c8:	e0bffe15 	stw	r2,-8(fp)
	return value;
811086cc:	e0bffe17 	ldw	r2,-8(fp)
}
811086d0:	e037883a 	mov	sp,fp
811086d4:	df000017 	ldw	fp,0(sp)
811086d8:	dec00104 	addi	sp,sp,4
811086dc:	f800283a 	ret

811086e0 <vFeeTask>:

#include "fee_task.h"



void vFeeTask(void *task_data) {
811086e0:	defffd04 	addi	sp,sp,-12
811086e4:	de00012e 	bgeu	sp,et,811086ec <vFeeTask+0xc>
811086e8:	003b68fa 	trap	3
811086ec:	df000215 	stw	fp,8(sp)
811086f0:	df000204 	addi	fp,sp,8
811086f4:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
811086f8:	e03ffe15 	stw	zero,-8(fp)

		// Check sync ?
			// mudar de estado se isso estiver agendado


}
811086fc:	0001883a 	nop
81108700:	e037883a 	mov	sp,fp
81108704:	df000017 	ldw	fp,0(sp)
81108708:	dec00104 	addi	sp,sp,4
8110870c:	f800283a 	ret

81108710 <vInAckHandlerTask>:


#include "in_ack_handler_task.h"


void vInAckHandlerTask(void *task_data) {
81108710:	defff704 	addi	sp,sp,-36
81108714:	de00012e 	bgeu	sp,et,8110871c <vInAckHandlerTask+0xc>
81108718:	003b68fa 	trap	3
8110871c:	dfc00815 	stw	ra,32(sp)
81108720:	df000715 	stw	fp,28(sp)
81108724:	df000704 	addi	fp,sp,28
81108728:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
8110872c:	e03ff915 	stw	zero,-28(fp)
    bool bFinished32 = FALSE;
81108730:	e03ffa15 	stw	zero,-24(fp)
    bool bFinished64 = FALSE;
81108734:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished128 = FALSE;
81108738:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    INT8U ucReturnMutex;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucCountRetries = 0;
8110873c:	e03ffe05 	stb	zero,-8(fp)
    unsigned char i = 0;
81108740:	e03ffe45 	stb	zero,-7(fp)

	#ifdef DEBUG_ON
		debug(fp,"vReceiverAckTask, enter task.\n");
81108744:	d0a04d17 	ldw	r2,-32460(gp)
81108748:	100f883a 	mov	r7,r2
8110874c:	01800784 	movi	r6,30
81108750:	01400044 	movi	r5,1
81108754:	01204534 	movhi	r4,33044
81108758:	212b8d04 	addi	r4,r4,-20940
8110875c:	11104940 	call	81110494 <fwrite>
	#endif

	eReceiverAckState = sRAConfiguring;
81108760:	e03ffd15 	stw	zero,-12(fp)

	for(;;){

		switch (eReceiverAckState) {
81108764:	e0bffd17 	ldw	r2,-12(fp)
81108768:	10c00060 	cmpeqi	r3,r2,1
8110876c:	1800071e 	bne	r3,zero,8110878c <vInAckHandlerTask+0x7c>
81108770:	0080032e 	bgeu	zero,r2,81108780 <vInAckHandlerTask+0x70>
81108774:	108000a0 	cmpeqi	r2,r2,2
81108778:	10005a1e 	bne	r2,zero,811088e4 <vInAckHandlerTask+0x1d4>
                    vFailFoundBufferRetransmission();
                }
                eReceiverAckState = sRAGettingACK;
				break;
			default:
				break;
8110877c:	00012506 	br	81108c14 <vInAckHandlerTask+0x504>
	for(;;){

		switch (eReceiverAckState) {
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
81108780:	00800044 	movi	r2,1
81108784:	e0bffd15 	stw	r2,-12(fp)
				break;
81108788:	00012206 	br	81108c14 <vInAckHandlerTask+0x504>
            case sRAGettingACK:
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
8110878c:	d0a05117 	ldw	r2,-32444(gp)
81108790:	e0fffec4 	addi	r3,fp,-5
81108794:	180d883a 	mov	r6,r3
81108798:	000b883a 	mov	r5,zero
8110879c:	1009883a 	mov	r4,r2
811087a0:	112d1ec0 	call	8112d1ec <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
811087a4:	e0bffec3 	ldbu	r2,-5(fp)
811087a8:	10803fcc 	andi	r2,r2,255
811087ac:	10004b1e 	bne	r2,zero,811088dc <vInAckHandlerTask+0x1cc>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
811087b0:	d0a05017 	ldw	r2,-32448(gp)
811087b4:	e0fffec4 	addi	r3,fp,-5
811087b8:	180d883a 	mov	r6,r3
811087bc:	000b883a 	mov	r5,zero
811087c0:	1009883a 	mov	r4,r2
811087c4:	112b1e00 	call	8112b1e0 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
811087c8:	e0bffec3 	ldbu	r2,-5(fp)
811087cc:	10803fcc 	andi	r2,r2,255
811087d0:	1000401e 	bne	r2,zero,811088d4 <vInAckHandlerTask+0x1c4>

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811087d4:	e03ffe45 	stb	zero,-7(fp)
811087d8:	00003706 	br	811088b8 <vInAckHandlerTask+0x1a8>
                        {
                            
                            if ( xReceivedACK[i].cType != 0 ) {
811087dc:	e0fffe43 	ldbu	r3,-7(fp)
811087e0:	00a04574 	movhi	r2,33045
811087e4:	10ae1804 	addi	r2,r2,-18336
811087e8:	18c7883a 	add	r3,r3,r3
811087ec:	18c7883a 	add	r3,r3,r3
811087f0:	10c5883a 	add	r2,r2,r3
811087f4:	10800003 	ldbu	r2,0(r2)
811087f8:	10803fcc 	andi	r2,r2,255
811087fc:	1080201c 	xori	r2,r2,128
81108800:	10bfe004 	addi	r2,r2,-128
81108804:	10002926 	beq	r2,zero,811088ac <vInAckHandlerTask+0x19c>

                                /*  Is it a NACK? */
                                if ( xReceivedACK[i].cType != NACK_CHAR ) {
81108808:	e0fffe43 	ldbu	r3,-7(fp)
8110880c:	00a04574 	movhi	r2,33045
81108810:	10ae1804 	addi	r2,r2,-18336
81108814:	18c7883a 	add	r3,r3,r3
81108818:	18c7883a 	add	r3,r3,r3
8110881c:	10c5883a 	add	r2,r2,r3
81108820:	10800003 	ldbu	r2,0(r2)
81108824:	10803fcc 	andi	r2,r2,255
81108828:	1080201c 	xori	r2,r2,128
8110882c:	10bfe004 	addi	r2,r2,-128
81108830:	108008e0 	cmpeqi	r2,r2,35
81108834:	10000d1e 	bne	r2,zero,8110886c <vInAckHandlerTask+0x15c>
                                    /* Locate the message, copy for the local variable in order to free the mutex. */
                                    xRAckLocal = xReceivedACK[i];
81108838:	e0fffe43 	ldbu	r3,-7(fp)
8110883c:	00a04574 	movhi	r2,33045
81108840:	10ae1804 	addi	r2,r2,-18336
81108844:	18c7883a 	add	r3,r3,r3
81108848:	18c7883a 	add	r3,r3,r3
8110884c:	10c5883a 	add	r2,r2,r3
81108850:	10c0000b 	ldhu	r3,0(r2)
81108854:	d0e0478d 	sth	r3,-32482(gp)
81108858:	1080008b 	ldhu	r2,2(r2)
8110885c:	d0a0480d 	sth	r2,-32480(gp)
                                    eReceiverAckState = sRACleanningBuffer;
81108860:	00800084 	movi	r2,2
81108864:	e0bffd15 	stw	r2,-12(fp)
                                    break;
81108868:	00001606 	br	811088c4 <vInAckHandlerTask+0x1b4>
                                } else {
                                    /*  Yes is a NACK, do nothing. The packet will be retransmited after timeout, since we can't know which message
                                        was not transmited, is too much expensive retransmit all "waiting ack" packets. So, do nothing, excet clear the pipe buffer*/
                                    #ifdef DEBUG_ON
                                        debug(fp,"NACK received.");
8110886c:	d0a04d17 	ldw	r2,-32460(gp)
81108870:	100f883a 	mov	r7,r2
81108874:	01800384 	movi	r6,14
81108878:	01400044 	movi	r5,1
8110887c:	01204534 	movhi	r4,33044
81108880:	212b9504 	addi	r4,r4,-20908
81108884:	11104940 	call	81110494 <fwrite>
                                    #endif
                                    eReceiverAckState = sRAGettingACK;
81108888:	00800044 	movi	r2,1
8110888c:	e0bffd15 	stw	r2,-12(fp)
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
81108890:	e0fffe43 	ldbu	r3,-7(fp)
81108894:	00a04574 	movhi	r2,33045
81108898:	10ae1804 	addi	r2,r2,-18336
8110889c:	18c7883a 	add	r3,r3,r3
811088a0:	18c7883a 	add	r3,r3,r3
811088a4:	10c5883a 	add	r2,r2,r3
811088a8:	10000005 	stb	zero,0(r2)

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811088ac:	e0bffe43 	ldbu	r2,-7(fp)
811088b0:	10800044 	addi	r2,r2,1
811088b4:	e0bffe45 	stb	r2,-7(fp)
811088b8:	e0bffe43 	ldbu	r2,-7(fp)
811088bc:	10800130 	cmpltui	r2,r2,4
811088c0:	103fc61e 	bne	r2,zero,811087dc <__reset+0xfb0e87dc>
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                            }

                        }
                        OSMutexPost(xMutexReceivedACK);
811088c4:	d0a05017 	ldw	r2,-32448(gp)
811088c8:	1009883a 	mov	r4,r2
811088cc:	112b7840 	call	8112b784 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088d0:	0000d006 	br	81108c14 <vInAckHandlerTask+0x504>
                        }
                        OSMutexPost(xMutexReceivedACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexReceiverTask();
811088d4:	110c9980 	call	8110c998 <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088d8:	0000ce06 	br	81108c14 <vInAckHandlerTask+0x504>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
811088dc:	110c9300 	call	8110c930 <vFailGetCountSemaphoreReceiverTask>
                }
                break;
811088e0:	0000cc06 	br	81108c14 <vInAckHandlerTask+0x504>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */

                bFound = FALSE;
811088e4:	e03ff915 	stw	zero,-28(fp)
                bFinished32=FALSE;
811088e8:	e03ffa15 	stw	zero,-24(fp)
                bFinished64=FALSE;
811088ec:	e03ffb15 	stw	zero,-20(fp)
                bFinished128=FALSE;
811088f0:	e03ffc15 	stw	zero,-16(fp)
                ucCountRetries = 0;
811088f4:	e03ffe05 	stb	zero,-8(fp)
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
811088f8:	0000b506 	br	81108bd0 <vInAckHandlerTask+0x4c0>

                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
811088fc:	e0bff917 	ldw	r2,-28(fp)
81108900:	1000361e 	bne	r2,zero,811089dc <vInAckHandlerTask+0x2cc>
81108904:	e0bffa17 	ldw	r2,-24(fp)
81108908:	1000341e 	bne	r2,zero,811089dc <vInAckHandlerTask+0x2cc>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
8110890c:	d0a05517 	ldw	r2,-32428(gp)
81108910:	e0fffec4 	addi	r3,fp,-5
81108914:	180b883a 	mov	r5,r3
81108918:	1009883a 	mov	r4,r2
8110891c:	112ab600 	call	8112ab60 <OSMutexAccept>
81108920:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81108924:	e0bffe83 	ldbu	r2,-6(fp)
81108928:	10002c26 	beq	r2,zero,811089dc <vInAckHandlerTask+0x2cc>
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
8110892c:	e03ffe45 	stb	zero,-7(fp)
81108930:	00002306 	br	811089c0 <vInAckHandlerTask+0x2b0>
                            {
                                if ( xBuffer32[i].usiId == xRAckLocal.usiId ) {
81108934:	e0fffe43 	ldbu	r3,-7(fp)
81108938:	00a04534 	movhi	r2,33044
8110893c:	10958904 	addi	r2,r2,22052
81108940:	18c009a4 	muli	r3,r3,38
81108944:	10c5883a 	add	r2,r2,r3
81108948:	10800804 	addi	r2,r2,32
8110894c:	10c0000b 	ldhu	r3,0(r2)
81108950:	d0a0480b 	ldhu	r2,-32480(gp)
81108954:	18ffffcc 	andi	r3,r3,65535
81108958:	10bfffcc 	andi	r2,r2,65535
8110895c:	1880151e 	bne	r3,r2,811089b4 <vInAckHandlerTask+0x2a4>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer32[i].usiId = 0;
81108960:	e0fffe43 	ldbu	r3,-7(fp)
81108964:	00a04534 	movhi	r2,33044
81108968:	10958904 	addi	r2,r2,22052
8110896c:	18c009a4 	muli	r3,r3,38
81108970:	10c5883a 	add	r2,r2,r3
81108974:	10800804 	addi	r2,r2,32
81108978:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110897c:	d0a05517 	ldw	r2,-32428(gp)
81108980:	1009883a 	mov	r4,r2
81108984:	112b7840 	call	8112b784 <OSMutexPost>
                                    bFound = TRUE;
81108988:	00800044 	movi	r2,1
8110898c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer32);
81108990:	d0a05817 	ldw	r2,-32416(gp)
81108994:	1009883a 	mov	r4,r2
81108998:	112d5740 	call	8112d574 <OSSemPost>
8110899c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
811089a0:	e0bffec3 	ldbu	r2,-5(fp)
811089a4:	10803fcc 	andi	r2,r2,255
811089a8:	10000926 	beq	r2,zero,811089d0 <vInAckHandlerTask+0x2c0>
                                        vFailSetCountSemaphorexBuffer32();
811089ac:	110cbe40 	call	8110cbe4 <vFailSetCountSemaphorexBuffer32>
                                    }
                                    break;
811089b0:	00000706 	br	811089d0 <vInAckHandlerTask+0x2c0>
                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
811089b4:	e0bffe43 	ldbu	r2,-7(fp)
811089b8:	10800044 	addi	r2,r2,1
811089bc:	e0bffe45 	stb	r2,-7(fp)
811089c0:	e0bffe43 	ldbu	r2,-7(fp)
811089c4:	10800230 	cmpltui	r2,r2,8
811089c8:	103fda1e 	bne	r2,zero,81108934 <__reset+0xfb0e8934>
811089cc:	00000106 	br	811089d4 <vInAckHandlerTask+0x2c4>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer32);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer32();
                                    }
                                    break;
811089d0:	0001883a 	nop
                                }
                            }
                            bFinished32 = TRUE;
811089d4:	00800044 	movi	r2,1
811089d8:	e0bffa15 	stw	r2,-24(fp)
                        }
                    }


                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
811089dc:	e0bff917 	ldw	r2,-28(fp)
811089e0:	1000361e 	bne	r2,zero,81108abc <vInAckHandlerTask+0x3ac>
811089e4:	e0bffb17 	ldw	r2,-20(fp)
811089e8:	1000341e 	bne	r2,zero,81108abc <vInAckHandlerTask+0x3ac>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
811089ec:	d0a05917 	ldw	r2,-32412(gp)
811089f0:	e0fffec4 	addi	r3,fp,-5
811089f4:	180b883a 	mov	r5,r3
811089f8:	1009883a 	mov	r4,r2
811089fc:	112ab600 	call	8112ab60 <OSMutexAccept>
81108a00:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81108a04:	e0bffe83 	ldbu	r2,-6(fp)
81108a08:	10002c26 	beq	r2,zero,81108abc <vInAckHandlerTask+0x3ac>
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81108a0c:	e03ffe45 	stb	zero,-7(fp)
81108a10:	00002306 	br	81108aa0 <vInAckHandlerTask+0x390>
                            {
                                if ( xBuffer64[i].usiId == xRAckLocal.usiId ) {
81108a14:	e0fffe43 	ldbu	r3,-7(fp)
81108a18:	00a04534 	movhi	r2,33044
81108a1c:	10842c04 	addi	r2,r2,4272
81108a20:	18c011a4 	muli	r3,r3,70
81108a24:	10c5883a 	add	r2,r2,r3
81108a28:	10801004 	addi	r2,r2,64
81108a2c:	10c0000b 	ldhu	r3,0(r2)
81108a30:	d0a0480b 	ldhu	r2,-32480(gp)
81108a34:	18ffffcc 	andi	r3,r3,65535
81108a38:	10bfffcc 	andi	r2,r2,65535
81108a3c:	1880151e 	bne	r3,r2,81108a94 <vInAckHandlerTask+0x384>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer64[i].usiId = 0;
81108a40:	e0fffe43 	ldbu	r3,-7(fp)
81108a44:	00a04534 	movhi	r2,33044
81108a48:	10842c04 	addi	r2,r2,4272
81108a4c:	18c011a4 	muli	r3,r3,70
81108a50:	10c5883a 	add	r2,r2,r3
81108a54:	10801004 	addi	r2,r2,64
81108a58:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64*/
81108a5c:	d0a05917 	ldw	r2,-32412(gp)
81108a60:	1009883a 	mov	r4,r2
81108a64:	112b7840 	call	8112b784 <OSMutexPost>
                                    bFound = TRUE;
81108a68:	00800044 	movi	r2,1
81108a6c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer64);
81108a70:	d0a04a17 	ldw	r2,-32472(gp)
81108a74:	1009883a 	mov	r4,r2
81108a78:	112d5740 	call	8112d574 <OSSemPost>
81108a7c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108a80:	e0bffec3 	ldbu	r2,-5(fp)
81108a84:	10803fcc 	andi	r2,r2,255
81108a88:	10000926 	beq	r2,zero,81108ab0 <vInAckHandlerTask+0x3a0>
                                        vFailSetCountSemaphorexBuffer64();
81108a8c:	110cc4c0 	call	8110cc4c <vFailSetCountSemaphorexBuffer64>
                                    }
                                    break;
81108a90:	00000706 	br	81108ab0 <vInAckHandlerTask+0x3a0>
                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81108a94:	e0bffe43 	ldbu	r2,-7(fp)
81108a98:	10800044 	addi	r2,r2,1
81108a9c:	e0bffe45 	stb	r2,-7(fp)
81108aa0:	e0bffe43 	ldbu	r2,-7(fp)
81108aa4:	10800130 	cmpltui	r2,r2,4
81108aa8:	103fda1e 	bne	r2,zero,81108a14 <__reset+0xfb0e8a14>
81108aac:	00000106 	br	81108ab4 <vInAckHandlerTask+0x3a4>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer64);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer64();
                                    }
                                    break;
81108ab0:	0001883a 	nop
                                }
                            }
                            bFinished64 = TRUE;
81108ab4:	00800044 	movi	r2,1
81108ab8:	e0bffb15 	stw	r2,-20(fp)
                        }
                    }

                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
81108abc:	e0bff917 	ldw	r2,-28(fp)
81108ac0:	1000361e 	bne	r2,zero,81108b9c <vInAckHandlerTask+0x48c>
81108ac4:	e0bffc17 	ldw	r2,-16(fp)
81108ac8:	1000341e 	bne	r2,zero,81108b9c <vInAckHandlerTask+0x48c>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
81108acc:	d0a05717 	ldw	r2,-32420(gp)
81108ad0:	e0fffec4 	addi	r3,fp,-5
81108ad4:	180b883a 	mov	r5,r3
81108ad8:	1009883a 	mov	r4,r2
81108adc:	112ab600 	call	8112ab60 <OSMutexAccept>
81108ae0:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81108ae4:	e0bffe83 	ldbu	r2,-6(fp)
81108ae8:	10002c26 	beq	r2,zero,81108b9c <vInAckHandlerTask+0x48c>
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81108aec:	e03ffe45 	stb	zero,-7(fp)
81108af0:	00002306 	br	81108b80 <vInAckHandlerTask+0x470>
                            {
                                if ( xBuffer128[i].usiId == xRAckLocal.usiId ) {
81108af4:	e0fffe43 	ldbu	r3,-7(fp)
81108af8:	00a04574 	movhi	r2,33045
81108afc:	10add504 	addi	r2,r2,-18604
81108b00:	18c021a4 	muli	r3,r3,134
81108b04:	10c5883a 	add	r2,r2,r3
81108b08:	10802004 	addi	r2,r2,128
81108b0c:	10c0000b 	ldhu	r3,0(r2)
81108b10:	d0a0480b 	ldhu	r2,-32480(gp)
81108b14:	18ffffcc 	andi	r3,r3,65535
81108b18:	10bfffcc 	andi	r2,r2,65535
81108b1c:	1880151e 	bne	r3,r2,81108b74 <vInAckHandlerTask+0x464>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer128[i].usiId = 0;
81108b20:	e0fffe43 	ldbu	r3,-7(fp)
81108b24:	00a04574 	movhi	r2,33045
81108b28:	10add504 	addi	r2,r2,-18604
81108b2c:	18c021a4 	muli	r3,r3,134
81108b30:	10c5883a 	add	r2,r2,r3
81108b34:	10802004 	addi	r2,r2,128
81108b38:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81108b3c:	d0a05717 	ldw	r2,-32420(gp)
81108b40:	1009883a 	mov	r4,r2
81108b44:	112b7840 	call	8112b784 <OSMutexPost>
                                    bFound = TRUE;
81108b48:	00800044 	movi	r2,1
81108b4c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer128);
81108b50:	d0a04e17 	ldw	r2,-32456(gp)
81108b54:	1009883a 	mov	r4,r2
81108b58:	112d5740 	call	8112d574 <OSSemPost>
81108b5c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108b60:	e0bffec3 	ldbu	r2,-5(fp)
81108b64:	10803fcc 	andi	r2,r2,255
81108b68:	10000926 	beq	r2,zero,81108b90 <vInAckHandlerTask+0x480>
                                        vFailSetCountSemaphorexBuffer128();
81108b6c:	110ccb40 	call	8110ccb4 <vFailSetCountSemaphorexBuffer128>
                                    }
                                    break;
81108b70:	00000706 	br	81108b90 <vInAckHandlerTask+0x480>
                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81108b74:	e0bffe43 	ldbu	r2,-7(fp)
81108b78:	10800044 	addi	r2,r2,1
81108b7c:	e0bffe45 	stb	r2,-7(fp)
81108b80:	e0bffe43 	ldbu	r2,-7(fp)
81108b84:	108000b0 	cmpltui	r2,r2,2
81108b88:	103fda1e 	bne	r2,zero,81108af4 <__reset+0xfb0e8af4>
81108b8c:	00000106 	br	81108b94 <vInAckHandlerTask+0x484>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer128);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer128();
                                    }
                                    break;
81108b90:	0001883a 	nop
                                }
                            }
                            bFinished128 = TRUE;
81108b94:	00800044 	movi	r2,1
81108b98:	e0bffc15 	stw	r2,-16(fp)
                        }
                    }
                    /* Check if finish the search, if not probably some mutex is in use, so put the task to sleep for some time*/
                    if ( ( bFound == FALSE ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) )) {
81108b9c:	e0bff917 	ldw	r2,-28(fp)
81108ba0:	10000b1e 	bne	r2,zero,81108bd0 <vInAckHandlerTask+0x4c0>
81108ba4:	e0bffa17 	ldw	r2,-24(fp)
81108ba8:	10000426 	beq	r2,zero,81108bbc <vInAckHandlerTask+0x4ac>
81108bac:	e0bffb17 	ldw	r2,-20(fp)
81108bb0:	10000226 	beq	r2,zero,81108bbc <vInAckHandlerTask+0x4ac>
81108bb4:	e0bffc17 	ldw	r2,-16(fp)
81108bb8:	1000051e 	bne	r2,zero,81108bd0 <vInAckHandlerTask+0x4c0>
                        OSTimeDly(5); /* Make this task sleep for 5 ticks*/
81108bbc:	01000144 	movi	r4,5
81108bc0:	112f0780 	call	8112f078 <OSTimeDly>
                        ucCountRetries++;
81108bc4:	e0bffe03 	ldbu	r2,-8(fp)
81108bc8:	10800044 	addi	r2,r2,1
81108bcc:	e0bffe05 	stb	r2,-8(fp)
                bFinished32=FALSE;
                bFinished64=FALSE;
                bFinished128=FALSE;
                ucCountRetries = 0;
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
81108bd0:	e0bff917 	ldw	r2,-28(fp)
81108bd4:	1000091e 	bne	r2,zero,81108bfc <vInAckHandlerTask+0x4ec>
81108bd8:	e0bffe03 	ldbu	r2,-8(fp)
81108bdc:	108001a8 	cmpgeui	r2,r2,6
81108be0:	1000061e 	bne	r2,zero,81108bfc <vInAckHandlerTask+0x4ec>
81108be4:	e0bffa17 	ldw	r2,-24(fp)
81108be8:	103f4426 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
81108bec:	e0bffb17 	ldw	r2,-20(fp)
81108bf0:	103f4226 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
81108bf4:	e0bffc17 	ldw	r2,-16(fp)
81108bf8:	103f4026 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
                        OSTimeDly(5); /* Make this task sleep for 5 ticks*/
                        ucCountRetries++;
                    }
                }
                
                if (bFound == FALSE) {
81108bfc:	e0bff917 	ldw	r2,-28(fp)
81108c00:	1000011e 	bne	r2,zero,81108c08 <vInAckHandlerTask+0x4f8>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
81108c04:	110cd1c0 	call	8110cd1c <vFailFoundBufferRetransmission>
                }
                eReceiverAckState = sRAGettingACK;
81108c08:	00800044 	movi	r2,1
81108c0c:	e0bffd15 	stw	r2,-12(fp)
				break;
81108c10:	0001883a 	nop
			default:
				break;
		}
	}
81108c14:	003ed306 	br	81108764 <__reset+0xfb0e8764>

81108c18 <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81108c18:	defff704 	addi	sp,sp,-36
81108c1c:	de00012e 	bgeu	sp,et,81108c24 <vInitialTask+0xc>
81108c20:	003b68fa 	trap	3
81108c24:	dfc00815 	stw	ra,32(sp)
81108c28:	df000715 	stw	fp,28(sp)
81108c2c:	df000704 	addi	fp,sp,28
81108c30:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81108c34:	e03ffe05 	stb	zero,-8(fp)

	/* READ: Create the task that is responsible to READ UART buffer */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vReceiverUartTask,
81108c38:	00800104 	movi	r2,4
81108c3c:	d8800415 	stw	r2,16(sp)
81108c40:	d8000315 	stw	zero,12(sp)
81108c44:	00820004 	movi	r2,2048
81108c48:	d8800215 	stw	r2,8(sp)
81108c4c:	00a04534 	movhi	r2,33044
81108c50:	1095d504 	addi	r2,r2,22356
81108c54:	d8800115 	stw	r2,4(sp)
81108c58:	00800784 	movi	r2,30
81108c5c:	d8800015 	stw	r2,0(sp)
81108c60:	01c00784 	movi	r7,30
81108c64:	01a04534 	movhi	r6,33044
81108c68:	319dd404 	addi	r6,r6,30544
81108c6c:	000b883a 	mov	r5,zero
81108c70:	01204474 	movhi	r4,33041
81108c74:	21259c04 	addi	r4,r4,-27024
81108c78:	112df580 	call	8112df58 <OSTaskCreateExt>
81108c7c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108c80:	e0bffe03 	ldbu	r2,-8(fp)
81108c84:	10803fcc 	andi	r2,r2,255
81108c88:	10000526 	beq	r2,zero,81108ca0 <vInitialTask+0x88>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108c8c:	e0bffe03 	ldbu	r2,-8(fp)
81108c90:	10803fcc 	andi	r2,r2,255
81108c94:	1009883a 	mov	r4,r2
81108c98:	110c5ac0 	call	8110c5ac <printErrorTask>
		#endif
		vFailReceiverCreate();
81108c9c:	110cb000 	call	8110cb00 <vFailReceiverCreate>
	}


	/* Create the task that is responsible to parse all received messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vParserCommTask,
81108ca0:	00800104 	movi	r2,4
81108ca4:	d8800415 	stw	r2,16(sp)
81108ca8:	d8000315 	stw	zero,12(sp)
81108cac:	00820004 	movi	r2,2048
81108cb0:	d8800215 	stw	r2,8(sp)
81108cb4:	00a04574 	movhi	r2,33045
81108cb8:	10ae1c04 	addi	r2,r2,-18320
81108cbc:	d8800115 	stw	r2,4(sp)
81108cc0:	00800684 	movi	r2,26
81108cc4:	d8800015 	stw	r2,0(sp)
81108cc8:	01c00684 	movi	r7,26
81108ccc:	01a04574 	movhi	r6,33045
81108cd0:	31b61b04 	addi	r6,r6,-10132
81108cd4:	000b883a 	mov	r5,zero
81108cd8:	01204474 	movhi	r4,33041
81108cdc:	21247e04 	addi	r4,r4,-28168
81108ce0:	112df580 	call	8112df58 <OSTaskCreateExt>
81108ce4:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108ce8:	e0bffe03 	ldbu	r2,-8(fp)
81108cec:	10803fcc 	andi	r2,r2,255
81108cf0:	10000526 	beq	r2,zero,81108d08 <vInitialTask+0xf0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108cf4:	e0bffe03 	ldbu	r2,-8(fp)
81108cf8:	10803fcc 	andi	r2,r2,255
81108cfc:	1009883a 	mov	r4,r2
81108d00:	110c5ac0 	call	8110c5ac <printErrorTask>
		#endif
		vFailParserCommTaskCreate();
81108d04:	110d0c40 	call	8110d0c4 <vFailParserCommTaskCreate>
	}


	/* Create the task that is responsible to handle incomming ack packet */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInAckHandlerTask,
81108d08:	00800104 	movi	r2,4
81108d0c:	d8800415 	stw	r2,16(sp)
81108d10:	d8000315 	stw	zero,12(sp)
81108d14:	00820004 	movi	r2,2048
81108d18:	d8800215 	stw	r2,8(sp)
81108d1c:	00a04534 	movhi	r2,33044
81108d20:	10bc2c04 	addi	r2,r2,-3920
81108d24:	d8800115 	stw	r2,4(sp)
81108d28:	008005c4 	movi	r2,23
81108d2c:	d8800015 	stw	r2,0(sp)
81108d30:	01c005c4 	movi	r7,23
81108d34:	01a04534 	movhi	r6,33044
81108d38:	31842b04 	addi	r6,r6,4268
81108d3c:	000b883a 	mov	r5,zero
81108d40:	01204474 	movhi	r4,33041
81108d44:	2121c404 	addi	r4,r4,-30960
81108d48:	112df580 	call	8112df58 <OSTaskCreateExt>
81108d4c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108d50:	e0bffe03 	ldbu	r2,-8(fp)
81108d54:	10803fcc 	andi	r2,r2,255
81108d58:	10000526 	beq	r2,zero,81108d70 <vInitialTask+0x158>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108d5c:	e0bffe03 	ldbu	r2,-8(fp)
81108d60:	10803fcc 	andi	r2,r2,255
81108d64:	1009883a 	mov	r4,r2
81108d68:	110c5ac0 	call	8110c5ac <printErrorTask>
		#endif
		vFailInAckHandlerTaskCreate();
81108d6c:	110d1100 	call	8110d110 <vFailInAckHandlerTaskCreate>



	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vOutAckHandlerTask,
81108d70:	00800104 	movi	r2,4
81108d74:	d8800415 	stw	r2,16(sp)
81108d78:	d8000315 	stw	zero,12(sp)
81108d7c:	00820004 	movi	r2,2048
81108d80:	d8800215 	stw	r2,8(sp)
81108d84:	00a04534 	movhi	r2,33044
81108d88:	109dd504 	addi	r2,r2,30548
81108d8c:	d8800115 	stw	r2,4(sp)
81108d90:	00800644 	movi	r2,25
81108d94:	d8800015 	stw	r2,0(sp)
81108d98:	01c00644 	movi	r7,25
81108d9c:	01a04574 	movhi	r6,33045
81108da0:	31a5d404 	addi	r6,r6,-26800
81108da4:	000b883a 	mov	r5,zero
81108da8:	01204474 	movhi	r4,33041
81108dac:	2123ce04 	addi	r4,r4,-28872
81108db0:	112df580 	call	8112df58 <OSTaskCreateExt>
81108db4:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108db8:	e0bffe03 	ldbu	r2,-8(fp)
81108dbc:	10803fcc 	andi	r2,r2,255
81108dc0:	10000526 	beq	r2,zero,81108dd8 <vInitialTask+0x1c0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108dc4:	e0bffe03 	ldbu	r2,-8(fp)
81108dc8:	10803fcc 	andi	r2,r2,255
81108dcc:	1009883a 	mov	r4,r2
81108dd0:	110c5ac0 	call	8110c5ac <printErrorTask>
		#endif
		vFailOutAckHandlerTaskCreate();
81108dd4:	110d15c0 	call	8110d15c <vFailOutAckHandlerTaskCreate>
	}


	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vTimeoutCheckerTask,
81108dd8:	00800104 	movi	r2,4
81108ddc:	d8800415 	stw	r2,16(sp)
81108de0:	d8000315 	stw	zero,12(sp)
81108de4:	00820004 	movi	r2,2048
81108de8:	d8800215 	stw	r2,8(sp)
81108dec:	00a04534 	movhi	r2,33044
81108df0:	108d8904 	addi	r2,r2,13860
81108df4:	d8800115 	stw	r2,4(sp)
81108df8:	00800704 	movi	r2,28
81108dfc:	d8800015 	stw	r2,0(sp)
81108e00:	01c00704 	movi	r7,28
81108e04:	01a04534 	movhi	r6,33044
81108e08:	31958804 	addi	r6,r6,22048
81108e0c:	000b883a 	mov	r5,zero
81108e10:	01204474 	movhi	r4,33041
81108e14:	2128a204 	addi	r4,r4,-23928
81108e18:	112df580 	call	8112df58 <OSTaskCreateExt>
81108e1c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108e20:	e0bffe03 	ldbu	r2,-8(fp)
81108e24:	10803fcc 	andi	r2,r2,255
81108e28:	10000526 	beq	r2,zero,81108e40 <vInitialTask+0x228>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108e2c:	e0bffe03 	ldbu	r2,-8(fp)
81108e30:	10803fcc 	andi	r2,r2,255
81108e34:	1009883a 	mov	r4,r2
81108e38:	110c5ac0 	call	8110c5ac <printErrorTask>
		#endif
		vFailTimeoutCheckerTaskCreate();
81108e3c:	110d2400 	call	8110d240 <vFailTimeoutCheckerTaskCreate>



	/* SEND: Create the task that is responsible to SEND UART packets */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vSenderComTask,
81108e40:	00800104 	movi	r2,4
81108e44:	d8800415 	stw	r2,16(sp)
81108e48:	d8000315 	stw	zero,12(sp)
81108e4c:	00820004 	movi	r2,2048
81108e50:	d8800215 	stw	r2,8(sp)
81108e54:	00a04534 	movhi	r2,33044
81108e58:	10847204 	addi	r2,r2,4552
81108e5c:	d8800115 	stw	r2,4(sp)
81108e60:	00800604 	movi	r2,24
81108e64:	d8800015 	stw	r2,0(sp)
81108e68:	01c00604 	movi	r7,24
81108e6c:	01a04534 	movhi	r6,33044
81108e70:	318c7104 	addi	r6,r6,12740
81108e74:	000b883a 	mov	r5,zero
81108e78:	01204474 	movhi	r4,33041
81108e7c:	21284904 	addi	r4,r4,-24284
81108e80:	112df580 	call	8112df58 <OSTaskCreateExt>
81108e84:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108e88:	e0bffe03 	ldbu	r2,-8(fp)
81108e8c:	10803fcc 	andi	r2,r2,255
81108e90:	10000526 	beq	r2,zero,81108ea8 <vInitialTask+0x290>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108e94:	e0bffe03 	ldbu	r2,-8(fp)
81108e98:	10803fcc 	andi	r2,r2,255
81108e9c:	1009883a 	mov	r4,r2
81108ea0:	110c5ac0 	call	8110c5ac <printErrorTask>
		#endif
		vFailSenderCreate();
81108ea4:	110cb4c0 	call	8110cb4c <vFailSenderCreate>
	}

	/*	This is the timer that's trigger the task that implements the timeout/retransmission logic*/
	OSTmrStart ((OS_TMR *)xTimerRetransmission, (INT8U  *)&error_code);
81108ea8:	d0a05617 	ldw	r2,-32424(gp)
81108eac:	e17ffe04 	addi	r5,fp,-8
81108eb0:	1009883a 	mov	r4,r2
81108eb4:	112fc780 	call	8112fc78 <OSTmrStart>
	if ( error_code != OS_ERR_NONE) {
81108eb8:	e0bffe03 	ldbu	r2,-8(fp)
81108ebc:	10803fcc 	andi	r2,r2,255
81108ec0:	10000126 	beq	r2,zero,81108ec8 <vInitialTask+0x2b0>
		/*	Could not create the timer that syncs the task that is responsible to retransmit the packets*/
		vFailStartTimerRetransmission();
81108ec4:	110d4fc0 	call	8110d4fc <vFailStartTimerRetransmission>




	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
81108ec8:	01003fc4 	movi	r4,255
81108ecc:	112e1440 	call	8112e144 <OSTaskDel>
81108ed0:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
81108ed4:	e0bffe03 	ldbu	r2,-8(fp)
81108ed8:	10803fcc 	andi	r2,r2,255
81108edc:	10001026 	beq	r2,zero,81108f20 <vInitialTask+0x308>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108ee0:	e0bffe03 	ldbu	r2,-8(fp)
81108ee4:	10803fcc 	andi	r2,r2,255
81108ee8:	1009883a 	mov	r4,r2
81108eec:	110c5ac0 	call	8110c5ac <printErrorTask>
		#endif
		vFailDeleteInitialization();
81108ef0:	110cb980 	call	8110cb98 <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
81108ef4:	014009c4 	movi	r5,39
81108ef8:	01000044 	movi	r4,1
81108efc:	112d8ac0 	call	8112d8ac <OSTaskChangePrio>

		for(;;) { /* Correct Program Flow should never get here */
			OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
81108f00:	01003fc4 	movi	r4,255
81108f04:	112e1440 	call	8112e144 <OSTaskDel>
			OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
81108f08:	000f883a 	mov	r7,zero
81108f0c:	01800284 	movi	r6,10
81108f10:	000b883a 	mov	r5,zero
81108f14:	0009883a 	mov	r4,zero
81108f18:	112f1840 	call	8112f184 <OSTimeDlyHMSM>
		}
81108f1c:	003ff806 	br	81108f00 <__reset+0xfb0e8f00>
	}

}
81108f20:	0001883a 	nop
81108f24:	e037883a 	mov	sp,fp
81108f28:	dfc00117 	ldw	ra,4(sp)
81108f2c:	df000017 	ldw	fp,0(sp)
81108f30:	dec00204 	addi	sp,sp,8
81108f34:	f800283a 	ret

81108f38 <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
81108f38:	defff604 	addi	sp,sp,-40
81108f3c:	de00012e 	bgeu	sp,et,81108f44 <vOutAckHandlerTask+0xc>
81108f40:	003b68fa 	trap	3
81108f44:	dfc00915 	stw	ra,36(sp)
81108f48:	df000815 	stw	fp,32(sp)
81108f4c:	df000804 	addi	fp,sp,32
81108f50:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
81108f54:	e03ff815 	stw	zero,-32(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
81108f58:	e03ffb15 	stw	zero,-20(fp)
81108f5c:	e03ffc15 	stw	zero,-16(fp)
81108f60:	e03ffd15 	stw	zero,-12(fp)
81108f64:	e03ffe15 	stw	zero,-8(fp)
    unsigned char ucCountRetries = 0;
81108f68:	e03ffa05 	stb	zero,-24(fp)
    unsigned char crc = 0;
81108f6c:	e03ffa85 	stb	zero,-22(fp)

	#ifdef DEBUG_ON
		debug(fp,"vSenderAckTask, enter task.\n");
81108f70:	d0a04d17 	ldw	r2,-32460(gp)
81108f74:	100f883a 	mov	r7,r2
81108f78:	01800704 	movi	r6,28
81108f7c:	01400044 	movi	r5,1
81108f80:	01204534 	movhi	r4,33044
81108f84:	212b9904 	addi	r4,r4,-20892
81108f88:	11104940 	call	81110494 <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
81108f8c:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
81108f90:	e0bff917 	ldw	r2,-28(fp)
81108f94:	10c00060 	cmpeqi	r3,r2,1
81108f98:	1800071e 	bne	r3,zero,81108fb8 <vOutAckHandlerTask+0x80>
81108f9c:	0080032e 	bgeu	zero,r2,81108fac <vOutAckHandlerTask+0x74>
81108fa0:	108000a0 	cmpeqi	r2,r2,2
81108fa4:	1000451e 	bne	r2,zero,811090bc <vOutAckHandlerTask+0x184>
                    vFailGetMutexTxUARTSenderTask();
                }
                eSenderAckState = sSAGettingACK;
				break;
			default:
				break;
81108fa8:	00009206 	br	811091f4 <vOutAckHandlerTask+0x2bc>
	for(;;){

		switch (eSenderAckState) {
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
81108fac:	00800044 	movi	r2,1
81108fb0:	e0bff915 	stw	r2,-28(fp)
				break;
81108fb4:	00008f06 	br	811091f4 <vOutAckHandlerTask+0x2bc>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                OSSemPend(xSemCountSenderACK, 0, &error_code);
81108fb8:	d0a04c17 	ldw	r2,-32464(gp)
81108fbc:	e0fffac4 	addi	r3,fp,-21
81108fc0:	180d883a 	mov	r6,r3
81108fc4:	000b883a 	mov	r5,zero
81108fc8:	1009883a 	mov	r4,r2
81108fcc:	112d1ec0 	call	8112d1ec <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
81108fd0:	e0bffac3 	ldbu	r2,-21(fp)
81108fd4:	10803fcc 	andi	r2,r2,255
81108fd8:	1000361e 	bne	r2,zero,811090b4 <vOutAckHandlerTask+0x17c>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
81108fdc:	d0a05a17 	ldw	r2,-32408(gp)
81108fe0:	e0fffac4 	addi	r3,fp,-21
81108fe4:	180d883a 	mov	r6,r3
81108fe8:	000b883a 	mov	r5,zero
81108fec:	1009883a 	mov	r4,r2
81108ff0:	112b1e00 	call	8112b1e0 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81108ff4:	e0bffac3 	ldbu	r2,-21(fp)
81108ff8:	10803fcc 	andi	r2,r2,255
81108ffc:	10002b1e 	bne	r2,zero,811090ac <vOutAckHandlerTask+0x174>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81109000:	e03ffa45 	stb	zero,-23(fp)
81109004:	00002206 	br	81109090 <vOutAckHandlerTask+0x158>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
81109008:	e0fffa43 	ldbu	r3,-23(fp)
8110900c:	00a04574 	movhi	r2,33045
81109010:	10b61c04 	addi	r2,r2,-10128
81109014:	18c7883a 	add	r3,r3,r3
81109018:	18c7883a 	add	r3,r3,r3
8110901c:	10c5883a 	add	r2,r2,r3
81109020:	10800003 	ldbu	r2,0(r2)
81109024:	10803fcc 	andi	r2,r2,255
81109028:	1080201c 	xori	r2,r2,128
8110902c:	10bfe004 	addi	r2,r2,-128
81109030:	10001426 	beq	r2,zero,81109084 <vOutAckHandlerTask+0x14c>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
81109034:	e0fffa43 	ldbu	r3,-23(fp)
81109038:	00a04574 	movhi	r2,33045
8110903c:	10b61c04 	addi	r2,r2,-10128
81109040:	18c7883a 	add	r3,r3,r3
81109044:	18c7883a 	add	r3,r3,r3
81109048:	10c5883a 	add	r2,r2,r3
8110904c:	10c0000b 	ldhu	r3,0(r2)
81109050:	d0e0488d 	sth	r3,-32478(gp)
81109054:	1080008b 	ldhu	r2,2(r2)
81109058:	d0a0490d 	sth	r2,-32476(gp)
                                eSenderAckState = sSASending;
8110905c:	00800084 	movi	r2,2
81109060:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
81109064:	e0fffa43 	ldbu	r3,-23(fp)
81109068:	00a04574 	movhi	r2,33045
8110906c:	10b61c04 	addi	r2,r2,-10128
81109070:	18c7883a 	add	r3,r3,r3
81109074:	18c7883a 	add	r3,r3,r3
81109078:	10c5883a 	add	r2,r2,r3
8110907c:	10000005 	stb	zero,0(r2)
                                break;
81109080:	00000606 	br	8110909c <vOutAckHandlerTask+0x164>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81109084:	e0bffa43 	ldbu	r2,-23(fp)
81109088:	10800044 	addi	r2,r2,1
8110908c:	e0bffa45 	stb	r2,-23(fp)
81109090:	e0bffa43 	ldbu	r2,-23(fp)
81109094:	10800130 	cmpltui	r2,r2,4
81109098:	103fdb1e 	bne	r2,zero,81109008 <__reset+0xfb0e9008>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
8110909c:	d0a05a17 	ldw	r2,-32408(gp)
811090a0:	1009883a 	mov	r4,r2
811090a4:	112b7840 	call	8112b784 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811090a8:	00005206 	br	811091f4 <vOutAckHandlerTask+0x2bc>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
811090ac:	110c8c80 	call	8110c8c8 <vFailGetMutexSenderTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811090b0:	00005006 	br	811091f4 <vOutAckHandlerTask+0x2bc>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
811090b4:	110c8600 	call	8110c860 <vFailGetCountSemaphoreSenderTask>
                }
                break;
811090b8:	00004e06 	br	811091f4 <vOutAckHandlerTask+0x2bc>
			case sSASending:

                /* First check if is an NACK packet that should be sent */
                if ( xSAckLocal.cType != '#' ) {
811090bc:	d0a04883 	ldbu	r2,-32478(gp)
811090c0:	10803fcc 	andi	r2,r2,255
811090c4:	1080201c 	xori	r2,r2,128
811090c8:	10bfe004 	addi	r2,r2,-128
811090cc:	108008e0 	cmpeqi	r2,r2,35
811090d0:	1000201e 	bne	r2,zero,81109154 <vOutAckHandlerTask+0x21c>
                    /* In this state has a parsed ack packet in the variable xSAckLocal
                    we just need to calc the crc8 and create the uart packet to send. */
                    sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
811090d4:	d0a048c3 	ldbu	r2,-32477(gp)
811090d8:	10c03fcc 	andi	r3,r2,255
811090dc:	18c0201c 	xori	r3,r3,128
811090e0:	18ffe004 	addi	r3,r3,-128
811090e4:	d0a0490b 	ldhu	r2,-32476(gp)
811090e8:	113fffcc 	andi	r4,r2,65535
811090ec:	e0bffb04 	addi	r2,fp,-20
811090f0:	200f883a 	mov	r7,r4
811090f4:	180d883a 	mov	r6,r3
811090f8:	01604534 	movhi	r5,33044
811090fc:	296ba104 	addi	r5,r5,-20860
81109100:	1009883a 	mov	r4,r2
81109104:	11116100 	call	81111610 <sprintf>
                    crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
81109108:	e0bffb04 	addi	r2,fp,-20
8110910c:	1009883a 	mov	r4,r2
81109110:	11118240 	call	81111824 <strlen>
81109114:	1007883a 	mov	r3,r2
81109118:	e0bffb04 	addi	r2,fp,-20
8110911c:	180b883a 	mov	r5,r3
81109120:	1009883a 	mov	r4,r2
81109124:	110c5500 	call	8110c550 <ucCrc8wInit>
81109128:	e0bffa85 	stb	r2,-22(fp)
                    sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
8110912c:	e13ffa83 	ldbu	r4,-22(fp)
81109130:	e0fffb04 	addi	r3,fp,-20
81109134:	e0bffb04 	addi	r2,fp,-20
81109138:	200f883a 	mov	r7,r4
8110913c:	180d883a 	mov	r6,r3
81109140:	01604534 	movhi	r5,33044
81109144:	296ba304 	addi	r5,r5,-20852
81109148:	1009883a 	mov	r4,r2
8110914c:	11116100 	call	81111610 <sprintf>
81109150:	00000606 	br	8110916c <vOutAckHandlerTask+0x234>
                } else {
                    /* Nack */
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
81109154:	e0fffb04 	addi	r3,fp,-20
81109158:	008d0d74 	movhi	r2,13365
8110915c:	109f08c4 	addi	r2,r2,31779
81109160:	18800015 	stw	r2,0(r3)
81109164:	00800ec4 	movi	r2,59
81109168:	1880010d 	sth	r2,4(r3)
                }

                bSuccess = FALSE;
8110916c:	e03ff815 	stw	zero,-32(fp)
                ucCountRetries = 0;
81109170:	e03ffa05 	stb	zero,-24(fp)
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
81109174:	00001406 	br	811091c8 <vOutAckHandlerTask+0x290>

                    OSMutexPend(xTxUARTMutex, 5, &error_code); /* Wait 5 ticks = 5 ms */
81109178:	d0a05b17 	ldw	r2,-32404(gp)
8110917c:	e0fffac4 	addi	r3,fp,-21
81109180:	180d883a 	mov	r6,r3
81109184:	01400144 	movi	r5,5
81109188:	1009883a 	mov	r4,r2
8110918c:	112b1e00 	call	8112b1e0 <OSMutexPend>
                    if ( error_code == OS_NO_ERR ) {
81109190:	e0bffac3 	ldbu	r2,-21(fp)
81109194:	10803fcc 	andi	r2,r2,255
81109198:	1000081e 	bne	r2,zero,811091bc <vOutAckHandlerTask+0x284>
                        puts(cBufferAck);
8110919c:	e0bffb04 	addi	r2,fp,-20
811091a0:	1009883a 	mov	r4,r2
811091a4:	11112cc0 	call	811112cc <puts>
                        OSMutexPost(xTxUARTMutex);
811091a8:	d0a05b17 	ldw	r2,-32404(gp)
811091ac:	1009883a 	mov	r4,r2
811091b0:	112b7840 	call	8112b784 <OSMutexPost>
                        bSuccess = TRUE;
811091b4:	00800044 	movi	r2,1
811091b8:	e0bff815 	stw	r2,-32(fp)
                    }
                    ucCountRetries++;
811091bc:	e0bffa03 	ldbu	r2,-24(fp)
811091c0:	10800044 	addi	r2,r2,1
811091c4:	e0bffa05 	stb	r2,-24(fp)
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
                }

                bSuccess = FALSE;
                ucCountRetries = 0;
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
811091c8:	e0bff817 	ldw	r2,-32(fp)
811091cc:	1000031e 	bne	r2,zero,811091dc <vOutAckHandlerTask+0x2a4>
811091d0:	e0bffa03 	ldbu	r2,-24(fp)
811091d4:	108001b0 	cmpltui	r2,r2,6
811091d8:	103fe71e 	bne	r2,zero,81109178 <__reset+0xfb0e9178>
                        bSuccess = TRUE;
                    }
                    ucCountRetries++;
                }

                if (bSuccess == FALSE) {
811091dc:	e0bff817 	ldw	r2,-32(fp)
811091e0:	1000011e 	bne	r2,zero,811091e8 <vOutAckHandlerTask+0x2b0>
                    /* Could not use the uart tx buffer to send the ack*/
                    vFailGetMutexTxUARTSenderTask();
811091e4:	110ca000 	call	8110ca00 <vFailGetMutexTxUARTSenderTask>
                }
                eSenderAckState = sSAGettingACK;
811091e8:	00800044 	movi	r2,1
811091ec:	e0bff915 	stw	r2,-28(fp)
				break;
811091f0:	0001883a 	nop
			default:
				break;
		}
	}
811091f4:	003f6606 	br	81108f90 <__reset+0xfb0e8f90>

811091f8 <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
811091f8:	defffa04 	addi	sp,sp,-24
811091fc:	de00012e 	bgeu	sp,et,81109204 <vParserCommTask+0xc>
81109200:	003b68fa 	trap	3
81109204:	dfc00515 	stw	ra,20(sp)
81109208:	df000415 	stw	fp,16(sp)
8110920c:	df000404 	addi	fp,sp,16
81109210:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
81109214:	e03ffd15 	stw	zero,-12(fp)
	INT8U error_code;
	tParserStates eParserMode;
	static tPreParsed PreParsedLocal;

	#ifdef DEBUG_ON
		debug(fp,"vParserRXTask, enter task.\n");
81109218:	d0a04d17 	ldw	r2,-32460(gp)
8110921c:	100f883a 	mov	r7,r2
81109220:	018006c4 	movi	r6,27
81109224:	01400044 	movi	r5,1
81109228:	01204534 	movhi	r4,33044
8110922c:	212ba604 	addi	r4,r4,-20840
81109230:	11104940 	call	81110494 <fwrite>
	#endif

	eParserMode = sConfiguring;
81109234:	e03ffc15 	stw	zero,-16(fp)

	for(;;){

		switch (eParserMode) {
81109238:	e0bffc17 	ldw	r2,-16(fp)
8110923c:	10800168 	cmpgeui	r2,r2,5
81109240:	1000981e 	bne	r2,zero,811094a4 <vParserCommTask+0x2ac>
81109244:	e0bffc17 	ldw	r2,-16(fp)
81109248:	100690ba 	slli	r3,r2,2
8110924c:	00a04474 	movhi	r2,33041
81109250:	10a49804 	addi	r2,r2,-28064
81109254:	1885883a 	add	r2,r3,r2
81109258:	10800017 	ldw	r2,0(r2)
8110925c:	1000683a 	jmp	r2
81109260:	81109274 	orhi	r4,r16,16969
81109264:	81109280 	call	88110928 <__reset+0x20f0928>
81109268:	8110934c 	andi	r4,r16,16973
8110926c:	811093e0 	cmpeqi	r4,r16,16975
81109270:	81109420 	cmpeqi	r4,r16,16976
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingConn;
81109274:	00800044 	movi	r2,1
81109278:	e0bffc15 	stw	r2,-16(fp)
				break;
8110927c:	00008d06 	br	811094b4 <vParserCommTask+0x2bc>
			case sWaitingConn:

				bSuccess = FALSE;
81109280:	e03ffd15 	stw	zero,-12(fp)
				eParserMode = sWaitingConn;
81109284:	00800044 	movi	r2,1
81109288:	e0bffc15 	stw	r2,-16(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
8110928c:	d0a04f17 	ldw	r2,-32452(gp)
81109290:	e0fffe04 	addi	r3,fp,-8
81109294:	180d883a 	mov	r6,r3
81109298:	000b883a 	mov	r5,zero
8110929c:	1009883a 	mov	r4,r2
811092a0:	112d1ec0 	call	8112d1ec <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
811092a4:	e0bffe03 	ldbu	r2,-8(fp)
811092a8:	10803fcc 	andi	r2,r2,255
811092ac:	1000251e 	bne	r2,zero,81109344 <vParserCommTask+0x14c>
					/* There's command waiting to be threat */

					/* Should post the semaphore to the Sender Task stop to send the Initialization message (Request Status) */
					error_code = OSSemPost(xSemCommInit);
811092b0:	d0a04b17 	ldw	r2,-32468(gp)
811092b4:	1009883a 	mov	r4,r2
811092b8:	112d5740 	call	8112d574 <OSSemPost>
811092bc:	e0bffe05 	stb	r2,-8(fp)
                    if ( error_code == OS_ERR_NONE ) {
811092c0:	e0bffe03 	ldbu	r2,-8(fp)
811092c4:	10803fcc 	andi	r2,r2,255
811092c8:	1000171e 	bne	r2,zero,81109328 <vParserCommTask+0x130>

                    	bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
811092cc:	01204534 	movhi	r4,33044
811092d0:	213abc04 	addi	r4,r4,-5392
811092d4:	11094b80 	call	811094b8 <getPreParsedPacket>
811092d8:	e0bffd15 	stw	r2,-12(fp)
                    	if (bSuccess == TRUE) {
811092dc:	e0bffd17 	ldw	r2,-12(fp)
811092e0:	10800058 	cmpnei	r2,r2,1
811092e4:	10000e1e 	bne	r2,zero,81109320 <vParserCommTask+0x128>
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
811092e8:	00a04534 	movhi	r2,33044
811092ec:	10babc04 	addi	r2,r2,-5392
811092f0:	10800103 	ldbu	r2,4(r2)
811092f4:	10803fcc 	andi	r2,r2,255
811092f8:	1080201c 	xori	r2,r2,128
811092fc:	10bfe004 	addi	r2,r2,-128
81109300:	10800858 	cmpnei	r2,r2,33
81109304:	1000031e 	bne	r2,zero,81109314 <vParserCommTask+0x11c>
                            	eParserMode = sReplyParsing;
81109308:	00800104 	movi	r2,4
8110930c:	e0bffc15 	stw	r2,-16(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109310:	00006706 	br	811094b0 <vParserCommTask+0x2b8>
                    	if (bSuccess == TRUE) {
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
81109314:	008000c4 	movi	r2,3
81109318:	e0bffc15 	stw	r2,-16(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
8110931c:	00006406 	br	811094b0 <vParserCommTask+0x2b8>
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
                    	} else {
							/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
							vNoContentInPreParsedBuffer();
81109320:	110ce540 	call	8110ce54 <vNoContentInPreParsedBuffer>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109324:	00006206 	br	811094b0 <vParserCommTask+0x2b8>
							vNoContentInPreParsedBuffer();
						}
                    } else {
						/*  Could not post the semaphore that indicates that NUC is connected and send a message.
							this a very IMPORTANT signalization!*/
                    	bSuccess = bTrySendSemaphoreCommInit();
81109328:	11095d00 	call	811095d0 <bTrySendSemaphoreCommInit>
8110932c:	e0bffd15 	stw	r2,-12(fp)
						if (bSuccess == TRUE) {
81109330:	e0bffd17 	ldw	r2,-12(fp)
81109334:	10800058 	cmpnei	r2,r2,1
81109338:	10005d1e 	bne	r2,zero,811094b0 <vParserCommTask+0x2b8>
							vFailSendxSemCommInit();
8110933c:	110c7140 	call	8110c714 <vFailSendxSemCommInit>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109340:	00005b06 	br	811094b0 <vParserCommTask+0x2b8>
						if (bSuccess == TRUE) {
							vFailSendxSemCommInit();
						}
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
81109344:	110cd840 	call	8110cd84 <vFailGetCountSemaphorePreParsedBuffer>
				}

				break;
81109348:	00005906 	br	811094b0 <vParserCommTask+0x2b8>
			case sWaitingMessage:

				bSuccess = FALSE;
8110934c:	e03ffd15 	stw	zero,-12(fp)
				eParserMode = sWaitingMessage;
81109350:	00800084 	movi	r2,2
81109354:	e0bffc15 	stw	r2,-16(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81109358:	d0a04f17 	ldw	r2,-32452(gp)
8110935c:	e0fffe04 	addi	r3,fp,-8
81109360:	180d883a 	mov	r6,r3
81109364:	000b883a 	mov	r5,zero
81109368:	1009883a 	mov	r4,r2
8110936c:	112d1ec0 	call	8112d1ec <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
81109370:	e0bffe03 	ldbu	r2,-8(fp)
81109374:	10803fcc 	andi	r2,r2,255
81109378:	1000171e 	bne	r2,zero,811093d8 <vParserCommTask+0x1e0>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
8110937c:	01204534 	movhi	r4,33044
81109380:	213abc04 	addi	r4,r4,-5392
81109384:	11094b80 	call	811094b8 <getPreParsedPacket>
81109388:	e0bffd15 	stw	r2,-12(fp)
					if (bSuccess == TRUE) {
8110938c:	e0bffd17 	ldw	r2,-12(fp)
81109390:	10800058 	cmpnei	r2,r2,1
81109394:	10000e1e 	bne	r2,zero,811093d0 <vParserCommTask+0x1d8>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
81109398:	00a04534 	movhi	r2,33044
8110939c:	10babc04 	addi	r2,r2,-5392
811093a0:	10800103 	ldbu	r2,4(r2)
811093a4:	10803fcc 	andi	r2,r2,255
811093a8:	1080201c 	xori	r2,r2,128
811093ac:	10bfe004 	addi	r2,r2,-128
811093b0:	10800858 	cmpnei	r2,r2,33
811093b4:	1000031e 	bne	r2,zero,811093c4 <vParserCommTask+0x1cc>
							eParserMode = sReplyParsing;
811093b8:	00800104 	movi	r2,4
811093bc:	e0bffc15 	stw	r2,-16(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811093c0:	00003c06 	br	811094b4 <vParserCommTask+0x2bc>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
811093c4:	008000c4 	movi	r2,3
811093c8:	e0bffc15 	stw	r2,-16(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811093cc:	00003906 	br	811094b4 <vParserCommTask+0x2bc>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
811093d0:	110ce540 	call	8110ce54 <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811093d4:	00003706 	br	811094b4 <vParserCommTask+0x2bc>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
811093d8:	110cd840 	call	8110cd84 <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
811093dc:	00003506 	br	811094b4 <vParserCommTask+0x2bc>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cCommand)
811093e0:	00a04534 	movhi	r2,33044
811093e4:	10babc04 	addi	r2,r2,-5392
811093e8:	10800143 	ldbu	r2,5(r2)
811093ec:	10803fcc 	andi	r2,r2,255
811093f0:	1080201c 	xori	r2,r2,128
811093f4:	10bfe004 	addi	r2,r2,-128
811093f8:	108010e0 	cmpeqi	r2,r2,67
811093fc:	10000426 	beq	r2,zero,81109410 <vParserCommTask+0x218>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
							vSendEthConf();
81109400:	110b4700 	call	8110b470 <vSendEthConf>
							eParserMode = sWaitingMessage;
81109404:	00800084 	movi	r2,2
81109408:	e0bffc15 	stw	r2,-16(fp)
						break;
8110940c:	00000306 	br	8110941c <vParserCommTask+0x224>
					default:
						eParserMode = sWaitingMessage;
81109410:	00800084 	movi	r2,2
81109414:	e0bffc15 	stw	r2,-16(fp)
						break;
81109418:	0001883a 	nop
				}
				break;
8110941c:	00002506 	br	811094b4 <vParserCommTask+0x2bc>
			case sReplyParsing:
                switch (PreParsedLocal.cCommand)
81109420:	00a04534 	movhi	r2,33044
81109424:	10babc04 	addi	r2,r2,-5392
81109428:	10800143 	ldbu	r2,5(r2)
8110942c:	10803fcc 	andi	r2,r2,255
81109430:	1080201c 	xori	r2,r2,128
81109434:	10bfe004 	addi	r2,r2,-128
81109438:	10c01220 	cmpeqi	r3,r2,72
8110943c:	1800121e 	bne	r3,zero,81109488 <vParserCommTask+0x290>
81109440:	10c01248 	cmpgei	r3,r2,73
81109444:	1800031e 	bne	r3,zero,81109454 <vParserCommTask+0x25c>
81109448:	10801120 	cmpeqi	r2,r2,68
8110944c:	1000081e 	bne	r2,zero,81109470 <vParserCommTask+0x278>
81109450:	00001006 	br	81109494 <vParserCommTask+0x29c>
81109454:	10c01420 	cmpeqi	r3,r2,80
81109458:	1800081e 	bne	r3,zero,8110947c <vParserCommTask+0x284>
8110945c:	108014e0 	cmpeqi	r2,r2,83
81109460:	10000c26 	beq	r2,zero,81109494 <vParserCommTask+0x29c>
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						eParserMode = sWaitingMessage;
81109464:	00800084 	movi	r2,2
81109468:	e0bffc15 	stw	r2,-16(fp)
                        break;
8110946c:	00000c06 	br	811094a0 <vParserCommTask+0x2a8>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/

						eParserMode = sWaitingMessage;
81109470:	00800084 	movi	r2,2
81109474:	e0bffc15 	stw	r2,-16(fp)
                        break;
81109478:	00000906 	br	811094a0 <vParserCommTask+0x2a8>
                    case PUS_CMD: /*PUS command to MEB*/

						eParserMode = sWaitingMessage;
8110947c:	00800084 	movi	r2,2
81109480:	e0bffc15 	stw	r2,-16(fp)
                        break;
81109484:	00000606 	br	811094a0 <vParserCommTask+0x2a8>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						eParserMode = sWaitingMessage;
81109488:	00800084 	movi	r2,2
8110948c:	e0bffc15 	stw	r2,-16(fp)
                        break;
81109490:	00000306 	br	811094a0 <vParserCommTask+0x2a8>
                    default:
						eParserMode = sWaitingMessage;
81109494:	00800084 	movi	r2,2
81109498:	e0bffc15 	stw	r2,-16(fp)
                        break;
8110949c:	0001883a 	nop
                }
				break;
811094a0:	00000406 	br	811094b4 <vParserCommTask+0x2bc>
			default:
				eParserMode = sWaitingMessage;
811094a4:	00800084 	movi	r2,2
811094a8:	e0bffc15 	stw	r2,-16(fp)
				break;
811094ac:	00000106 	br	811094b4 <vParserCommTask+0x2bc>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
811094b0:	0001883a 	nop
				break;
			default:
				eParserMode = sWaitingMessage;
				break;
		}
	}
811094b4:	003f6006 	br	81109238 <__reset+0xfb0e9238>

811094b8 <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
811094b8:	defffb04 	addi	sp,sp,-20
811094bc:	de00012e 	bgeu	sp,et,811094c4 <getPreParsedPacket+0xc>
811094c0:	003b68fa 	trap	3
811094c4:	dfc00415 	stw	ra,16(sp)
811094c8:	df000315 	stw	fp,12(sp)
811094cc:	df000304 	addi	fp,sp,12
811094d0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811094d4:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
811094d8:	d0a05417 	ldw	r2,-32432(gp)
811094dc:	e0fffe44 	addi	r3,fp,-7
811094e0:	180d883a 	mov	r6,r3
811094e4:	000b883a 	mov	r5,zero
811094e8:	1009883a 	mov	r4,r2
811094ec:	112b1e00 	call	8112b1e0 <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
811094f0:	e0bffe43 	ldbu	r2,-7(fp)
811094f4:	10803fcc 	andi	r2,r2,255
811094f8:	10002e1e 	bne	r2,zero,811095b4 <getPreParsedPacket+0xfc>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
811094fc:	e03ffe05 	stb	zero,-8(fp)
81109500:	00002506 	br	81109598 <getPreParsedPacket+0xe0>
		{
            if ( xPreParsed[i].cType != 0 ) {
81109504:	e0fffe03 	ldbu	r3,-8(fp)
81109508:	00a04574 	movhi	r2,33045
8110950c:	10b62004 	addi	r2,r2,-10112
81109510:	18c01324 	muli	r3,r3,76
81109514:	10c5883a 	add	r2,r2,r3
81109518:	10800104 	addi	r2,r2,4
8110951c:	10800003 	ldbu	r2,0(r2)
81109520:	10803fcc 	andi	r2,r2,255
81109524:	1080201c 	xori	r2,r2,128
81109528:	10bfe004 	addi	r2,r2,-128
8110952c:	10001726 	beq	r2,zero,8110958c <getPreParsedPacket+0xd4>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
81109530:	e0fffe03 	ldbu	r3,-8(fp)
81109534:	e13fff17 	ldw	r4,-4(fp)
81109538:	00a04574 	movhi	r2,33045
8110953c:	10b62004 	addi	r2,r2,-10112
81109540:	18c01324 	muli	r3,r3,76
81109544:	10c5883a 	add	r2,r2,r3
81109548:	2007883a 	mov	r3,r4
8110954c:	1009883a 	mov	r4,r2
81109550:	00801304 	movi	r2,76
81109554:	100d883a 	mov	r6,r2
81109558:	200b883a 	mov	r5,r4
8110955c:	1809883a 	mov	r4,r3
81109560:	1110ea80 	call	81110ea8 <memcpy>
                bSuccess = TRUE;
81109564:	00800044 	movi	r2,1
81109568:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
8110956c:	e0fffe03 	ldbu	r3,-8(fp)
81109570:	00a04574 	movhi	r2,33045
81109574:	10b62004 	addi	r2,r2,-10112
81109578:	18c01324 	muli	r3,r3,76
8110957c:	10c5883a 	add	r2,r2,r3
81109580:	10800104 	addi	r2,r2,4
81109584:	10000005 	stb	zero,0(r2)
                break;
81109588:	00000606 	br	811095a4 <getPreParsedPacket+0xec>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
8110958c:	e0bffe03 	ldbu	r2,-8(fp)
81109590:	10800044 	addi	r2,r2,1
81109594:	e0bffe05 	stb	r2,-8(fp)
81109598:	e0bffe03 	ldbu	r2,-8(fp)
8110959c:	10800130 	cmpltui	r2,r2,4
811095a0:	103fd81e 	bne	r2,zero,81109504 <__reset+0xfb0e9504>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
811095a4:	d0a05417 	ldw	r2,-32432(gp)
811095a8:	1009883a 	mov	r4,r2
811095ac:	112b7840 	call	8112b784 <OSMutexPost>
811095b0:	00000106 	br	811095b8 <getPreParsedPacket+0x100>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
811095b4:	110cdec0 	call	8110cdec <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
811095b8:	e0bffd17 	ldw	r2,-12(fp)
}
811095bc:	e037883a 	mov	sp,fp
811095c0:	dfc00117 	ldw	ra,4(sp)
811095c4:	df000017 	ldw	fp,0(sp)
811095c8:	dec00204 	addi	sp,sp,8
811095cc:	f800283a 	ret

811095d0 <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
811095d0:	defffc04 	addi	sp,sp,-16
811095d4:	de00012e 	bgeu	sp,et,811095dc <bTrySendSemaphoreCommInit+0xc>
811095d8:	003b68fa 	trap	3
811095dc:	dfc00315 	stw	ra,12(sp)
811095e0:	df000215 	stw	fp,8(sp)
811095e4:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
811095e8:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
811095ec:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
811095f0:	d0a04d17 	ldw	r2,-32460(gp)
811095f4:	100f883a 	mov	r7,r2
811095f8:	01800e84 	movi	r6,58
811095fc:	01400044 	movi	r5,1
81109600:	01204534 	movhi	r4,33044
81109604:	212bad04 	addi	r4,r4,-20812
81109608:	11104940 	call	81110494 <fwrite>
	#endif

	ucCountRetries = 0;
8110960c:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
81109610:	e0bfff03 	ldbu	r2,-4(fp)
81109614:	10800044 	addi	r2,r2,1
81109618:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
8110961c:	01000c84 	movi	r4,50
81109620:	112f0780 	call	8112f078 <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
81109624:	d0a04b17 	ldw	r2,-32468(gp)
81109628:	1009883a 	mov	r4,r2
8110962c:	112d5740 	call	8112d574 <OSSemPost>
81109630:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
81109634:	e0bfff43 	ldbu	r2,-3(fp)
81109638:	10000326 	beq	r2,zero,81109648 <bTrySendSemaphoreCommInit+0x78>
8110963c:	e0bfff03 	ldbu	r2,-4(fp)
81109640:	108002f0 	cmpltui	r2,r2,11
81109644:	103ff21e 	bne	r2,zero,81109610 <__reset+0xfb0e9610>

	if ( error_code == OS_ERR_NONE ) {
81109648:	e0bfff43 	ldbu	r2,-3(fp)
8110964c:	1000021e 	bne	r2,zero,81109658 <bTrySendSemaphoreCommInit+0x88>
		bSuccess = TRUE;
81109650:	00800044 	movi	r2,1
81109654:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
81109658:	e0bffe17 	ldw	r2,-8(fp)
}
8110965c:	e037883a 	mov	sp,fp
81109660:	dfc00117 	ldw	ra,4(sp)
81109664:	df000017 	ldw	fp,0(sp)
81109668:	dec00204 	addi	sp,sp,8
8110966c:	f800283a 	ret

81109670 <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
81109670:	deffeb04 	addi	sp,sp,-84
81109674:	de00012e 	bgeu	sp,et,8110967c <vReceiverUartTask+0xc>
81109678:	003b68fa 	trap	3
8110967c:	dfc01415 	stw	ra,80(sp)
81109680:	df001315 	stw	fp,76(sp)
81109684:	df001304 	addi	fp,sp,76
81109688:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110968c:	e03fee15 	stw	zero,-72(fp)
    char cReceiveBuffer[SIZE_RCV_BUFFER];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"vFastReaderRX, enter task.\n");
81109690:	d0a04d17 	ldw	r2,-32460(gp)
81109694:	100f883a 	mov	r7,r2
81109698:	018006c4 	movi	r6,27
8110969c:	01400044 	movi	r5,1
811096a0:	01204534 	movhi	r4,33044
811096a4:	212bbc04 	addi	r4,r4,-20752
811096a8:	11104940 	call	81110494 <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
811096ac:	e03fed15 	stw	zero,-76(fp)

    for(;;) {

        switch (eReaderRXMode)
811096b0:	e0bfed17 	ldw	r2,-76(fp)
811096b4:	10c00060 	cmpeqi	r3,r2,1
811096b8:	1800091e 	bne	r3,zero,811096e0 <vReceiverUartTask+0x70>
811096bc:	0080052e 	bgeu	zero,r2,811096d4 <vReceiverUartTask+0x64>
811096c0:	10c000a0 	cmpeqi	r3,r2,2
811096c4:	1800451e 	bne	r3,zero,811097dc <vReceiverUartTask+0x16c>
811096c8:	108000e0 	cmpeqi	r2,r2,3
811096cc:	1000561e 	bne	r2,zero,81109828 <vReceiverUartTask+0x1b8>
811096d0:	00005f06 	br	81109850 <vReceiverUartTask+0x1e0>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
811096d4:	00800044 	movi	r2,1
811096d8:	e0bfed15 	stw	r2,-76(fp)
                break;
811096dc:	00005f06 	br	8110985c <vReceiverUartTask+0x1ec>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
811096e0:	e0bfef04 	addi	r2,fp,-68
811096e4:	01801004 	movi	r6,64
811096e8:	000b883a 	mov	r5,zero
811096ec:	1009883a 	mov	r4,r2
811096f0:	1110ff80 	call	81110ff8 <memset>
                scanf("%s", cReceiveBuffer);
811096f4:	e0bfef04 	addi	r2,fp,-68
811096f8:	100b883a 	mov	r5,r2
811096fc:	01204534 	movhi	r4,33044
81109700:	212bc304 	addi	r4,r4,-20724
81109704:	11115340 	call	81111534 <scanf>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedReader );
81109708:	e0bfef04 	addi	r2,fp,-68
8110970c:	01604534 	movhi	r5,33044
81109710:	297acf04 	addi	r5,r5,-5316
81109714:	1009883a 	mov	r4,r2
81109718:	11098600 	call	81109860 <bPreParser>
8110971c:	e0bfee15 	stw	r2,-72(fp)

                if ( bSuccess == TRUE ) {
81109720:	e0bfee17 	ldw	r2,-72(fp)
81109724:	10800058 	cmpnei	r2,r2,1
81109728:	1000161e 	bne	r2,zero,81109784 <vReceiverUartTask+0x114>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
8110972c:	00a04534 	movhi	r2,33044
81109730:	10bacf04 	addi	r2,r2,-5316
81109734:	10800103 	ldbu	r2,4(r2)
81109738:	10803fcc 	andi	r2,r2,255
8110973c:	1080201c 	xori	r2,r2,128
81109740:	10bfe004 	addi	r2,r2,-128
81109744:	10800fe0 	cmpeqi	r2,r2,63
81109748:	1000081e 	bne	r2,zero,8110976c <vReceiverUartTask+0xfc>
8110974c:	00a04534 	movhi	r2,33044
81109750:	10bacf04 	addi	r2,r2,-5316
81109754:	10800103 	ldbu	r2,4(r2)
81109758:	10803fcc 	andi	r2,r2,255
8110975c:	1080201c 	xori	r2,r2,128
81109760:	10bfe004 	addi	r2,r2,-128
81109764:	10800858 	cmpnei	r2,r2,33
81109768:	1000031e 	bne	r2,zero,81109778 <vReceiverUartTask+0x108>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
8110976c:	00800084 	movi	r2,2
81109770:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81109774:	00003906 	br	8110985c <vReceiverUartTask+0x1ec>
                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        eReaderRXMode = sSendToACKReceiver;
81109778:	008000c4 	movi	r2,3
8110977c:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81109780:	00003606 	br	8110985c <vReceiverUartTask+0x1ec>
                        eReaderRXMode = sSendToACKReceiver;
                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
81109784:	00a04534 	movhi	r2,33044
81109788:	10bacf04 	addi	r2,r2,-5316
8110978c:	00c008c4 	movi	r3,35
81109790:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = ')';
81109794:	00a04534 	movhi	r2,33044
81109798:	10bacf04 	addi	r2,r2,-5316
8110979c:	00c00a44 	movi	r3,41
811097a0:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
811097a4:	00a04534 	movhi	r2,33044
811097a8:	10bacf04 	addi	r2,r2,-5316
811097ac:	00c00044 	movi	r3,1
811097b0:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
811097b4:	01204534 	movhi	r4,33044
811097b8:	213acf04 	addi	r4,r4,-5316
811097bc:	1109dd40 	call	81109dd4 <setPreAckSenderFreePos>
811097c0:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
811097c4:	e0bfee17 	ldw	r2,-72(fp)
811097c8:	1000011e 	bne	r2,zero,811097d0 <vReceiverUartTask+0x160>
                        vFailSendNack();
811097cc:	110cf240 	call	8110cf24 <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
811097d0:	00800044 	movi	r2,1
811097d4:	e0bfed15 	stw	r2,-76(fp)
                }

                break;
811097d8:	00002006 	br	8110985c <vReceiverUartTask+0x1ec>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
811097dc:	01204534 	movhi	r4,33044
811097e0:	213acf04 	addi	r4,r4,-5316
811097e4:	1109dd40 	call	81109dd4 <setPreAckSenderFreePos>
811097e8:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == TRUE ) {
811097ec:	e0bfee17 	ldw	r2,-72(fp)
811097f0:	10800058 	cmpnei	r2,r2,1
811097f4:	1000081e 	bne	r2,zero,81109818 <vReceiverUartTask+0x1a8>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
811097f8:	01204534 	movhi	r4,33044
811097fc:	213acf04 	addi	r4,r4,-5316
81109800:	1109c700 	call	81109c70 <setPreParsedFreePos>
81109804:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
81109808:	e0bfee17 	ldw	r2,-72(fp)
8110980c:	1000031e 	bne	r2,zero,8110981c <vReceiverUartTask+0x1ac>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
81109810:	110cff40 	call	8110cff4 <vFailSetPreParsedBuffer>
81109814:	00000106 	br	8110981c <vReceiverUartTask+0x1ac>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
81109818:	110cf8c0 	call	8110cf8c <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
8110981c:	00800044 	movi	r2,1
81109820:	e0bfed15 	stw	r2,-76(fp)
                break;
81109824:	00000d06 	br	8110985c <vReceiverUartTask+0x1ec>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
81109828:	01204534 	movhi	r4,33044
8110982c:	213acf04 	addi	r4,r4,-5316
81109830:	1109f7c0 	call	81109f7c <setPreAckReceiverFreePos>
81109834:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == FALSE ) {
81109838:	e0bfee17 	ldw	r2,-72(fp)
8110983c:	1000011e 	bne	r2,zero,81109844 <vReceiverUartTask+0x1d4>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
81109840:	110d05c0 	call	8110d05c <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
81109844:	00800044 	movi	r2,1
81109848:	e0bfed15 	stw	r2,-76(fp)
                break;
8110984c:	00000306 	br	8110985c <vReceiverUartTask+0x1ec>
            default:
                eReaderRXMode = sGetRxUart;
81109850:	00800044 	movi	r2,1
81109854:	e0bfed15 	stw	r2,-76(fp)
                break;
81109858:	0001883a 	nop
        }

    }
8110985c:	003f9406 	br	811096b0 <__reset+0xfb0e96b0>

81109860 <bPreParser>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParser( char *buffer, tPreParsed *xPerParcedBuffer )
{
81109860:	defff204 	addi	sp,sp,-56
81109864:	de00012e 	bgeu	sp,et,8110986c <bPreParser+0xc>
81109868:	003b68fa 	trap	3
8110986c:	dfc00d15 	stw	ra,52(sp)
81109870:	df000c15 	stw	fp,48(sp)
81109874:	dc000b15 	stw	r16,44(sp)
81109878:	df000c04 	addi	fp,sp,48
8110987c:	e13ffd15 	stw	r4,-12(fp)
81109880:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
81109884:	e03ff415 	stw	zero,-48(fp)
    short int siStrLen, siTeminador, siIniReq, siIniResp, siIniACK, siIniNACK, siCRC;
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */

    siStrLen = strlen(buffer);
81109888:	e13ffd17 	ldw	r4,-12(fp)
8110988c:	11118240 	call	81111824 <strlen>
81109890:	e0bff70d 	sth	r2,-36(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
81109894:	01400ec4 	movi	r5,59
81109898:	e13ffd17 	ldw	r4,-12(fp)
8110989c:	110b7500 	call	8110b750 <siPosStr>
811098a0:	e0bff78d 	sth	r2,-34(fp)
    siIniACK = siPosStr(buffer, ACK_CHAR);
811098a4:	01401004 	movi	r5,64
811098a8:	e13ffd17 	ldw	r4,-12(fp)
811098ac:	110b7500 	call	8110b750 <siPosStr>
811098b0:	e0bff80d 	sth	r2,-32(fp)
    siIniNACK = siPosStr(buffer, NACK_CHAR);
811098b4:	014008c4 	movi	r5,35
811098b8:	e13ffd17 	ldw	r4,-12(fp)
811098bc:	110b7500 	call	8110b750 <siPosStr>
811098c0:	e0bff88d 	sth	r2,-30(fp)
    siIniACK = min_sim(siIniACK, siIniNACK);
811098c4:	e17ff80b 	ldhu	r5,-32(fp)
811098c8:	e0bff88b 	ldhu	r2,-30(fp)
811098cc:	10ffffcc 	andi	r3,r2,65535
811098d0:	18e0001c 	xori	r3,r3,32768
811098d4:	18e00004 	addi	r3,r3,-32768
811098d8:	293fffcc 	andi	r4,r5,65535
811098dc:	2120001c 	xori	r4,r4,32768
811098e0:	21200004 	addi	r4,r4,-32768
811098e4:	20c0010e 	bge	r4,r3,811098ec <bPreParser+0x8c>
811098e8:	2805883a 	mov	r2,r5
811098ec:	e0bff80d 	sth	r2,-32(fp)
    siIniReq = siPosStr(buffer, START_REQUEST_CHAR);
811098f0:	01400fc4 	movi	r5,63
811098f4:	e13ffd17 	ldw	r4,-12(fp)
811098f8:	110b7500 	call	8110b750 <siPosStr>
811098fc:	e0bff90d 	sth	r2,-28(fp)
    siIniResp = siPosStr(buffer, START_REPLY_CHAR);
81109900:	01400844 	movi	r5,33
81109904:	e13ffd17 	ldw	r4,-12(fp)
81109908:	110b7500 	call	8110b750 <siPosStr>
8110990c:	e0bff98d 	sth	r2,-26(fp)
    siIniReq = min_sim(siIniReq, siIniResp);
81109910:	e17ff90b 	ldhu	r5,-28(fp)
81109914:	e0bff98b 	ldhu	r2,-26(fp)
81109918:	10ffffcc 	andi	r3,r2,65535
8110991c:	18e0001c 	xori	r3,r3,32768
81109920:	18e00004 	addi	r3,r3,-32768
81109924:	293fffcc 	andi	r4,r5,65535
81109928:	2120001c 	xori	r4,r4,32768
8110992c:	21200004 	addi	r4,r4,-32768
81109930:	20c0010e 	bge	r4,r3,81109938 <bPreParser+0xd8>
81109934:	2805883a 	mov	r2,r5
81109938:	e0bff90d 	sth	r2,-28(fp)
    siIniReq = min_sim(siIniReq, siIniACK);
8110993c:	e17ff90b 	ldhu	r5,-28(fp)
81109940:	e0bff80b 	ldhu	r2,-32(fp)
81109944:	10ffffcc 	andi	r3,r2,65535
81109948:	18e0001c 	xori	r3,r3,32768
8110994c:	18e00004 	addi	r3,r3,-32768
81109950:	293fffcc 	andi	r4,r5,65535
81109954:	2120001c 	xori	r4,r4,32768
81109958:	21200004 	addi	r4,r4,-32768
8110995c:	20c0010e 	bge	r4,r3,81109964 <bPreParser+0x104>
81109960:	2805883a 	mov	r2,r5
81109964:	e0bff90d 	sth	r2,-28(fp)
    siCRC = siPosStr(buffer, SEPARATOR_CRC);
81109968:	01401f04 	movi	r5,124
8110996c:	e13ffd17 	ldw	r4,-12(fp)
81109970:	110b7500 	call	8110b750 <siPosStr>
81109974:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there is [!|?] , |, ; in the packet*/
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {
81109978:	e0fff78f 	ldh	r3,-34(fp)
8110997c:	e0bff70f 	ldh	r2,-36(fp)
81109980:	10bfffc4 	addi	r2,r2,-1
81109984:	1880ac1e 	bne	r3,r2,81109c38 <bPreParser+0x3d8>
81109988:	e0fffa0f 	ldh	r3,-24(fp)
8110998c:	e0bff78f 	ldh	r2,-34(fp)
81109990:	1880a90e 	bge	r3,r2,81109c38 <bPreParser+0x3d8>
81109994:	e0fff90f 	ldh	r3,-28(fp)
81109998:	e0bffa0f 	ldh	r2,-24(fp)
8110999c:	1880a60e 	bge	r3,r2,81109c38 <bPreParser+0x3d8>

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
811099a0:	e0bff90f 	ldh	r2,-28(fp)
811099a4:	e0fffd17 	ldw	r3,-12(fp)
811099a8:	1889883a 	add	r4,r3,r2
811099ac:	e0fffa0f 	ldh	r3,-24(fp)
811099b0:	e0bff90f 	ldh	r2,-28(fp)
811099b4:	1885c83a 	sub	r2,r3,r2
811099b8:	100b883a 	mov	r5,r2
811099bc:	110c5500 	call	8110c550 <ucCrc8wInit>
811099c0:	1007883a 	mov	r3,r2
811099c4:	e0bffe17 	ldw	r2,-8(fp)
811099c8:	10c01205 	stb	r3,72(r2)
        xPerParcedBuffer->cType = buffer[siIniReq];
811099cc:	e0bff90f 	ldh	r2,-28(fp)
811099d0:	e0fffd17 	ldw	r3,-12(fp)
811099d4:	1885883a 	add	r2,r3,r2
811099d8:	10c00003 	ldbu	r3,0(r2)
811099dc:	e0bffe17 	ldw	r2,-8(fp)
811099e0:	10c00105 	stb	r3,4(r2)

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
811099e4:	e0bffe17 	ldw	r2,-8(fp)
811099e8:	10800103 	ldbu	r2,4(r2)
811099ec:	10803fcc 	andi	r2,r2,255
811099f0:	1080201c 	xori	r2,r2,128
811099f4:	10bfe004 	addi	r2,r2,-128
811099f8:	108008d8 	cmpnei	r2,r2,35
811099fc:	1000091e 	bne	r2,zero,81109a24 <bPreParser+0x1c4>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
81109a00:	e0bffe17 	ldw	r2,-8(fp)
81109a04:	00c00d84 	movi	r3,54
81109a08:	10c01245 	stb	r3,73(r2)
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
81109a0c:	e0bffe17 	ldw	r2,-8(fp)
81109a10:	00c00d84 	movi	r3,54
81109a14:	10c01205 	stb	r3,72(r2)
            bSuccess = TRUE;
81109a18:	00800044 	movi	r2,1
81109a1c:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81109a20:	00008606 	br	81109c3c <bPreParser+0x3dc>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
            bSuccess = TRUE;
        } else {
            xPerParcedBuffer->cCommand = buffer[siIniReq+1];
81109a24:	e0bff90f 	ldh	r2,-28(fp)
81109a28:	10800044 	addi	r2,r2,1
81109a2c:	e0fffd17 	ldw	r3,-12(fp)
81109a30:	1885883a 	add	r2,r3,r2
81109a34:	10c00003 	ldbu	r3,0(r2)
81109a38:	e0bffe17 	ldw	r2,-8(fp)
81109a3c:	10c00145 	stb	r3,5(r2)
            xPerParcedBuffer->ucNofBytes = 0;
81109a40:	e0bffe17 	ldw	r2,-8(fp)
81109a44:	10000185 	stb	zero,6(r2)
            memset( xPerParcedBuffer->usiValues , 0 , SIZE_UCVALUES);
81109a48:	e0bffe17 	ldw	r2,-8(fp)
81109a4c:	10800204 	addi	r2,r2,8
81109a50:	01800804 	movi	r6,32
81109a54:	000b883a 	mov	r5,zero
81109a58:	1009883a 	mov	r4,r2
81109a5c:	1110ff80 	call	81110ff8 <memset>

            i = siIniReq + 3; /* "?C:i..." */
81109a60:	e0bff90b 	ldhu	r2,-28(fp)
81109a64:	108000c4 	addi	r2,r2,3
81109a68:	e0bff505 	stb	r2,-44(fp)
            do {
                p_inteiro = inteiro;
81109a6c:	e0bffac4 	addi	r2,fp,-21
81109a70:	e0bff615 	stw	r2,-40(fp)
                memset( &(inteiro) , 0 , sizeof( inteiro ) );
81109a74:	e0bffac4 	addi	r2,fp,-21
81109a78:	01800184 	movi	r6,6
81109a7c:	000b883a 	mov	r5,zero
81109a80:	1009883a 	mov	r4,r2
81109a84:	1110ff80 	call	81110ff8 <memset>
                do {
                    c = buffer[i];
81109a88:	e0bff503 	ldbu	r2,-44(fp)
81109a8c:	e0fffd17 	ldw	r3,-12(fp)
81109a90:	1885883a 	add	r2,r3,r2
81109a94:	10800003 	ldbu	r2,0(r2)
81109a98:	e0bffa85 	stb	r2,-22(fp)
                    if ( isdigit( c ) ) {
81109a9c:	d0e00317 	ldw	r3,-32756(gp)
81109aa0:	e0bffa87 	ldb	r2,-22(fp)
81109aa4:	10800044 	addi	r2,r2,1
81109aa8:	1885883a 	add	r2,r3,r2
81109aac:	10800003 	ldbu	r2,0(r2)
81109ab0:	10803fcc 	andi	r2,r2,255
81109ab4:	1080010c 	andi	r2,r2,4
81109ab8:	10000626 	beq	r2,zero,81109ad4 <bPreParser+0x274>
                        (*p_inteiro) = c;
81109abc:	e0bff617 	ldw	r2,-40(fp)
81109ac0:	e0fffa83 	ldbu	r3,-22(fp)
81109ac4:	10c00005 	stb	r3,0(r2)
                        p_inteiro++;
81109ac8:	e0bff617 	ldw	r2,-40(fp)
81109acc:	10800044 	addi	r2,r2,1
81109ad0:	e0bff615 	stw	r2,-40(fp)
                    }
                    i++;
81109ad4:	e0bff503 	ldbu	r2,-44(fp)
81109ad8:	10800044 	addi	r2,r2,1
81109adc:	e0bff505 	stb	r2,-44(fp)
                } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
81109ae0:	e0bff70f 	ldh	r2,-36(fp)
81109ae4:	e0fff503 	ldbu	r3,-44(fp)
81109ae8:	1880090e 	bge	r3,r2,81109b10 <bPreParser+0x2b0>
81109aec:	e0bffa87 	ldb	r2,-22(fp)
81109af0:	10800ea0 	cmpeqi	r2,r2,58
81109af4:	1000061e 	bne	r2,zero,81109b10 <bPreParser+0x2b0>
81109af8:	e0bffa87 	ldb	r2,-22(fp)
81109afc:	10800ee0 	cmpeqi	r2,r2,59
81109b00:	1000031e 	bne	r2,zero,81109b10 <bPreParser+0x2b0>
81109b04:	e0bffa87 	ldb	r2,-22(fp)
81109b08:	10801f18 	cmpnei	r2,r2,124
81109b0c:	103fde1e 	bne	r2,zero,81109a88 <__reset+0xfb0e9a88>
                (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81109b10:	e0bff617 	ldw	r2,-40(fp)
81109b14:	00c00284 	movi	r3,10
81109b18:	10c00005 	stb	r3,0(r2)

                if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
81109b1c:	e0bffa87 	ldb	r2,-22(fp)
81109b20:	10800ea0 	cmpeqi	r2,r2,58
81109b24:	1000031e 	bne	r2,zero,81109b34 <bPreParser+0x2d4>
81109b28:	e0bffa87 	ldb	r2,-22(fp)
81109b2c:	10801f18 	cmpnei	r2,r2,124
81109b30:	10001a1e 	bne	r2,zero,81109b9c <bPreParser+0x33c>
                    xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
81109b34:	e0bffe17 	ldw	r2,-8(fp)
81109b38:	10800183 	ldbu	r2,6(r2)
81109b3c:	10803fcc 	andi	r2,r2,255
81109b40:	10800828 	cmpgeui	r2,r2,32
81109b44:	1000041e 	bne	r2,zero,81109b58 <bPreParser+0x2f8>
81109b48:	e0bffe17 	ldw	r2,-8(fp)
81109b4c:	10800183 	ldbu	r2,6(r2)
81109b50:	14003fcc 	andi	r16,r2,255
81109b54:	00000106 	br	81109b5c <bPreParser+0x2fc>
81109b58:	04000804 	movi	r16,32
81109b5c:	e0bffac4 	addi	r2,fp,-21
81109b60:	1009883a 	mov	r4,r2
81109b64:	110fd4c0 	call	8110fd4c <atoi>
81109b68:	1009883a 	mov	r4,r2
81109b6c:	e0fffe17 	ldw	r3,-8(fp)
81109b70:	80800104 	addi	r2,r16,4
81109b74:	1085883a 	add	r2,r2,r2
81109b78:	1885883a 	add	r2,r3,r2
81109b7c:	1100000d 	sth	r4,0(r2)
                    xPerParcedBuffer->ucNofBytes++;
81109b80:	e0bffe17 	ldw	r2,-8(fp)
81109b84:	10800183 	ldbu	r2,6(r2)
81109b88:	10800044 	addi	r2,r2,1
81109b8c:	1007883a 	mov	r3,r2
81109b90:	e0bffe17 	ldw	r2,-8(fp)
81109b94:	10c00185 	stb	r3,6(r2)
81109b98:	00000906 	br	81109bc0 <bPreParser+0x360>
                }
                else if ( c == FINAL_CHAR )
81109b9c:	e0bffa87 	ldb	r2,-22(fp)
81109ba0:	10800ed8 	cmpnei	r2,r2,59
81109ba4:	1000061e 	bne	r2,zero,81109bc0 <bPreParser+0x360>
                {
                    xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
81109ba8:	e0bffac4 	addi	r2,fp,-21
81109bac:	1009883a 	mov	r4,r2
81109bb0:	110fd4c0 	call	8110fd4c <atoi>
81109bb4:	1007883a 	mov	r3,r2
81109bb8:	e0bffe17 	ldw	r2,-8(fp)
81109bbc:	10c01245 	stb	r3,73(r2)
                }

            } while ( (c != FINAL_CHAR) && (siStrLen>i) );
81109bc0:	e0bffa87 	ldb	r2,-22(fp)
81109bc4:	10800ee0 	cmpeqi	r2,r2,59
81109bc8:	1000031e 	bne	r2,zero,81109bd8 <bPreParser+0x378>
81109bcc:	e0bff70f 	ldh	r2,-36(fp)
81109bd0:	e0fff503 	ldbu	r3,-44(fp)
81109bd4:	18bfa516 	blt	r3,r2,81109a6c <__reset+0xfb0e9a6c>

            if ( c == FINAL_CHAR )
81109bd8:	e0bffa87 	ldb	r2,-22(fp)
81109bdc:	10800ed8 	cmpnei	r2,r2,59
81109be0:	1000131e 	bne	r2,zero,81109c30 <bPreParser+0x3d0>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
81109be4:	e0bffe17 	ldw	r2,-8(fp)
81109be8:	10c01243 	ldbu	r3,73(r2)
81109bec:	e0bffe17 	ldw	r2,-8(fp)
81109bf0:	10801203 	ldbu	r2,72(r2)
81109bf4:	18c03fcc 	andi	r3,r3,255
81109bf8:	10803fcc 	andi	r2,r2,255
81109bfc:	1880031e 	bne	r3,r2,81109c0c <bPreParser+0x3ac>
                    bSuccess = TRUE;
81109c00:	00800044 	movi	r2,1
81109c04:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81109c08:	00000c06 	br	81109c3c <bPreParser+0x3dc>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
                    bSuccess = TRUE;
                } else {
                    /* Wrong CRC */
                    #ifdef DEBUG_ON
                        debug(fp,"Wrong CRC. Pre Parsed.\n");
81109c0c:	d0a04d17 	ldw	r2,-32460(gp)
81109c10:	100f883a 	mov	r7,r2
81109c14:	018005c4 	movi	r6,23
81109c18:	01400044 	movi	r5,1
81109c1c:	01204534 	movhi	r4,33044
81109c20:	212bc404 	addi	r4,r4,-20720
81109c24:	11104940 	call	81110494 <fwrite>
                    #endif
                    bSuccess = FALSE;
81109c28:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81109c2c:	00000306 	br	81109c3c <bPreParser+0x3dc>
                    #endif
                    bSuccess = FALSE;
                }

            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
81109c30:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81109c34:	00000106 	br	81109c3c <bPreParser+0x3dc>
            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
            }
    } else {
        /*Malformed Packet*/
        bSuccess = FALSE;
81109c38:	e03ff415 	stw	zero,-48(fp)
    }
    memset(buffer,0,strlen(buffer));
81109c3c:	e13ffd17 	ldw	r4,-12(fp)
81109c40:	11118240 	call	81111824 <strlen>
81109c44:	100d883a 	mov	r6,r2
81109c48:	000b883a 	mov	r5,zero
81109c4c:	e13ffd17 	ldw	r4,-12(fp)
81109c50:	1110ff80 	call	81110ff8 <memset>

    return bSuccess;
81109c54:	e0bff417 	ldw	r2,-48(fp)
}
81109c58:	e6ffff04 	addi	sp,fp,-4
81109c5c:	dfc00217 	ldw	ra,8(sp)
81109c60:	df000117 	ldw	fp,4(sp)
81109c64:	dc000017 	ldw	r16,0(sp)
81109c68:	dec00304 	addi	sp,sp,12
81109c6c:	f800283a 	ret

81109c70 <setPreParsedFreePos>:

/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
81109c70:	defffb04 	addi	sp,sp,-20
81109c74:	de00012e 	bgeu	sp,et,81109c7c <setPreParsedFreePos+0xc>
81109c78:	003b68fa 	trap	3
81109c7c:	dfc00415 	stw	ra,16(sp)
81109c80:	df000315 	stw	fp,12(sp)
81109c84:	df000304 	addi	fp,sp,12
81109c88:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109c8c:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81109c90:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
81109c94:	e03ffe05 	stb	zero,-8(fp)
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81109c98:	00004306 	br	81109da8 <setPreParsedFreePos+0x138>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
81109c9c:	d0a05417 	ldw	r2,-32432(gp)
81109ca0:	e0fffe84 	addi	r3,fp,-6
81109ca4:	180d883a 	mov	r6,r3
81109ca8:	01400084 	movi	r5,2
81109cac:	1009883a 	mov	r4,r2
81109cb0:	112b1e00 	call	8112b1e0 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81109cb4:	e0bffe83 	ldbu	r2,-6(fp)
81109cb8:	10803fcc 	andi	r2,r2,255
81109cbc:	1000371e 	bne	r2,zero,81109d9c <setPreParsedFreePos+0x12c>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81109cc0:	e03ffe45 	stb	zero,-7(fp)
81109cc4:	00002e06 	br	81109d80 <setPreParsedFreePos+0x110>
            {
                if ( xPreParsed[i].cType == 0 ) {
81109cc8:	e0fffe43 	ldbu	r3,-7(fp)
81109ccc:	00a04574 	movhi	r2,33045
81109cd0:	10b62004 	addi	r2,r2,-10112
81109cd4:	18c01324 	muli	r3,r3,76
81109cd8:	10c5883a 	add	r2,r2,r3
81109cdc:	10800104 	addi	r2,r2,4
81109ce0:	10800003 	ldbu	r2,0(r2)
81109ce4:	10803fcc 	andi	r2,r2,255
81109ce8:	1080201c 	xori	r2,r2,128
81109cec:	10bfe004 	addi	r2,r2,-128
81109cf0:	1000201e 	bne	r2,zero,81109d74 <setPreParsedFreePos+0x104>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xPreParsed[i] = (*xPrePReader);
81109cf4:	e0fffe43 	ldbu	r3,-7(fp)
81109cf8:	00a04574 	movhi	r2,33045
81109cfc:	10b62004 	addi	r2,r2,-10112
81109d00:	18c01324 	muli	r3,r3,76
81109d04:	10c7883a 	add	r3,r2,r3
81109d08:	e0bfff17 	ldw	r2,-4(fp)
81109d0c:	1009883a 	mov	r4,r2
81109d10:	00801304 	movi	r2,76
81109d14:	100d883a 	mov	r6,r2
81109d18:	200b883a 	mov	r5,r4
81109d1c:	1809883a 	mov	r4,r3
81109d20:	1110ea80 	call	81110ea8 <memcpy>
                    error_code = OSSemPost(xSemCountPreParsed);
81109d24:	d0a04f17 	ldw	r2,-32452(gp)
81109d28:	1009883a 	mov	r4,r2
81109d2c:	112d5740 	call	8112d574 <OSSemPost>
81109d30:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81109d34:	e0bffe83 	ldbu	r2,-6(fp)
81109d38:	10803fcc 	andi	r2,r2,255
81109d3c:	1000031e 	bne	r2,zero,81109d4c <setPreParsedFreePos+0xdc>
                        bSuccess = TRUE;
81109d40:	00800044 	movi	r2,1
81109d44:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreParsedSemaphore();
                        xPreParsed[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81109d48:	00001006 	br	81109d8c <setPreParsedFreePos+0x11c>
                    xPreParsed[i] = (*xPrePReader);
                    error_code = OSSemPost(xSemCountPreParsed);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreParsedSemaphore();
81109d4c:	110c77c0 	call	8110c77c <vFailSendPreParsedSemaphore>
                        xPreParsed[i].cType = 0;
81109d50:	e0fffe43 	ldbu	r3,-7(fp)
81109d54:	00a04574 	movhi	r2,33045
81109d58:	10b62004 	addi	r2,r2,-10112
81109d5c:	18c01324 	muli	r3,r3,76
81109d60:	10c5883a 	add	r2,r2,r3
81109d64:	10800104 	addi	r2,r2,4
81109d68:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81109d6c:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
81109d70:	00000606 	br	81109d8c <setPreParsedFreePos+0x11c>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81109d74:	e0bffe43 	ldbu	r2,-7(fp)
81109d78:	10800044 	addi	r2,r2,1
81109d7c:	e0bffe45 	stb	r2,-7(fp)
81109d80:	e0bffe43 	ldbu	r2,-7(fp)
81109d84:	10800130 	cmpltui	r2,r2,4
81109d88:	103fcf1e 	bne	r2,zero,81109cc8 <__reset+0xfb0e9cc8>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexPreParsed);
81109d8c:	d0a05417 	ldw	r2,-32432(gp)
81109d90:	1009883a 	mov	r4,r2
81109d94:	112b7840 	call	8112b784 <OSMutexPost>
81109d98:	00000306 	br	81109da8 <setPreParsedFreePos+0x138>
        } else {
            ucCountRetries++;
81109d9c:	e0bffe03 	ldbu	r2,-8(fp)
81109da0:	10800044 	addi	r2,r2,1
81109da4:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81109da8:	e0bffd17 	ldw	r2,-12(fp)
81109dac:	1000031e 	bne	r2,zero,81109dbc <setPreParsedFreePos+0x14c>
81109db0:	e0bffe03 	ldbu	r2,-8(fp)
81109db4:	108000b0 	cmpltui	r2,r2,2
81109db8:	103fb81e 	bne	r2,zero,81109c9c <__reset+0xfb0e9c9c>
            OSMutexPost(xMutexPreParsed);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81109dbc:	e0bffd17 	ldw	r2,-12(fp)
}
81109dc0:	e037883a 	mov	sp,fp
81109dc4:	dfc00117 	ldw	ra,4(sp)
81109dc8:	df000017 	ldw	fp,0(sp)
81109dcc:	dec00204 	addi	sp,sp,8
81109dd0:	f800283a 	ret

81109dd4 <setPreAckSenderFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
81109dd4:	defffb04 	addi	sp,sp,-20
81109dd8:	de00012e 	bgeu	sp,et,81109de0 <setPreAckSenderFreePos+0xc>
81109ddc:	003b68fa 	trap	3
81109de0:	dfc00415 	stw	ra,16(sp)
81109de4:	df000315 	stw	fp,12(sp)
81109de8:	df000304 	addi	fp,sp,12
81109dec:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109df0:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81109df4:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
81109df8:	e03ffe05 	stb	zero,-8(fp)
    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81109dfc:	00005406 	br	81109f50 <setPreAckSenderFreePos+0x17c>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
81109e00:	d0a05a17 	ldw	r2,-32408(gp)
81109e04:	e0fffe84 	addi	r3,fp,-6
81109e08:	180d883a 	mov	r6,r3
81109e0c:	01400104 	movi	r5,4
81109e10:	1009883a 	mov	r4,r2
81109e14:	112b1e00 	call	8112b1e0 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81109e18:	e0bffe83 	ldbu	r2,-6(fp)
81109e1c:	10803fcc 	andi	r2,r2,255
81109e20:	1000481e 	bne	r2,zero,81109f44 <setPreAckSenderFreePos+0x170>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81109e24:	e03ffe45 	stb	zero,-7(fp)
81109e28:	00003f06 	br	81109f28 <setPreAckSenderFreePos+0x154>
            {
                if ( xSenderACK[i].cType == 0 ) {
81109e2c:	e0fffe43 	ldbu	r3,-7(fp)
81109e30:	00a04574 	movhi	r2,33045
81109e34:	10b61c04 	addi	r2,r2,-10128
81109e38:	18c7883a 	add	r3,r3,r3
81109e3c:	18c7883a 	add	r3,r3,r3
81109e40:	10c5883a 	add	r2,r2,r3
81109e44:	10800003 	ldbu	r2,0(r2)
81109e48:	10803fcc 	andi	r2,r2,255
81109e4c:	1080201c 	xori	r2,r2,128
81109e50:	10bfe004 	addi	r2,r2,-128
81109e54:	1000311e 	bne	r2,zero,81109f1c <setPreAckSenderFreePos+0x148>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xSenderACK[i].cType = xPrePReader->cType;
81109e58:	e0fffe43 	ldbu	r3,-7(fp)
81109e5c:	e0bfff17 	ldw	r2,-4(fp)
81109e60:	11000103 	ldbu	r4,4(r2)
81109e64:	00a04574 	movhi	r2,33045
81109e68:	10b61c04 	addi	r2,r2,-10128
81109e6c:	18c7883a 	add	r3,r3,r3
81109e70:	18c7883a 	add	r3,r3,r3
81109e74:	10c5883a 	add	r2,r2,r3
81109e78:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].cCommand = xPrePReader->cCommand;
81109e7c:	e0fffe43 	ldbu	r3,-7(fp)
81109e80:	e0bfff17 	ldw	r2,-4(fp)
81109e84:	11000143 	ldbu	r4,5(r2)
81109e88:	00a04574 	movhi	r2,33045
81109e8c:	10b61c04 	addi	r2,r2,-10128
81109e90:	18c7883a 	add	r3,r3,r3
81109e94:	18c7883a 	add	r3,r3,r3
81109e98:	10c5883a 	add	r2,r2,r3
81109e9c:	10800044 	addi	r2,r2,1
81109ea0:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
81109ea4:	e0fffe43 	ldbu	r3,-7(fp)
81109ea8:	e0bfff17 	ldw	r2,-4(fp)
81109eac:	1100020b 	ldhu	r4,8(r2)
81109eb0:	00a04574 	movhi	r2,33045
81109eb4:	10b61c04 	addi	r2,r2,-10128
81109eb8:	18c7883a 	add	r3,r3,r3
81109ebc:	18c7883a 	add	r3,r3,r3
81109ec0:	10c5883a 	add	r2,r2,r3
81109ec4:	10800084 	addi	r2,r2,2
81109ec8:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountSenderACK);
81109ecc:	d0a04c17 	ldw	r2,-32464(gp)
81109ed0:	1009883a 	mov	r4,r2
81109ed4:	112d5740 	call	8112d574 <OSSemPost>
81109ed8:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81109edc:	e0bffe83 	ldbu	r2,-6(fp)
81109ee0:	10803fcc 	andi	r2,r2,255
81109ee4:	1000031e 	bne	r2,zero,81109ef4 <setPreAckSenderFreePos+0x120>
                        bSuccess = TRUE;
81109ee8:	00800044 	movi	r2,1
81109eec:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckSenderSemaphore();
                        xSenderACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81109ef0:	00001006 	br	81109f34 <setPreAckSenderFreePos+0x160>

                    error_code = OSSemPost(xSemCountSenderACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckSenderSemaphore();
81109ef4:	110c8140 	call	8110c814 <vFailSendPreAckSenderSemaphore>
                        xSenderACK[i].cType = 0;
81109ef8:	e0fffe43 	ldbu	r3,-7(fp)
81109efc:	00a04574 	movhi	r2,33045
81109f00:	10b61c04 	addi	r2,r2,-10128
81109f04:	18c7883a 	add	r3,r3,r3
81109f08:	18c7883a 	add	r3,r3,r3
81109f0c:	10c5883a 	add	r2,r2,r3
81109f10:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81109f14:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
81109f18:	00000606 	br	81109f34 <setPreAckSenderFreePos+0x160>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81109f1c:	e0bffe43 	ldbu	r2,-7(fp)
81109f20:	10800044 	addi	r2,r2,1
81109f24:	e0bffe45 	stb	r2,-7(fp)
81109f28:	e0bffe43 	ldbu	r2,-7(fp)
81109f2c:	10800130 	cmpltui	r2,r2,4
81109f30:	103fbe1e 	bne	r2,zero,81109e2c <__reset+0xfb0e9e2c>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexSenderACK);
81109f34:	d0a05a17 	ldw	r2,-32408(gp)
81109f38:	1009883a 	mov	r4,r2
81109f3c:	112b7840 	call	8112b784 <OSMutexPost>
81109f40:	00000306 	br	81109f50 <setPreAckSenderFreePos+0x17c>
        } else {
            ucCountRetries++;
81109f44:	e0bffe03 	ldbu	r2,-8(fp)
81109f48:	10800044 	addi	r2,r2,1
81109f4c:	e0bffe05 	stb	r2,-8(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81109f50:	e0bffd17 	ldw	r2,-12(fp)
81109f54:	1000031e 	bne	r2,zero,81109f64 <setPreAckSenderFreePos+0x190>
81109f58:	e0bffe03 	ldbu	r2,-8(fp)
81109f5c:	108000b0 	cmpltui	r2,r2,2
81109f60:	103fa71e 	bne	r2,zero,81109e00 <__reset+0xfb0e9e00>
            OSMutexPost(xMutexSenderACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81109f64:	e0bffd17 	ldw	r2,-12(fp)
}
81109f68:	e037883a 	mov	sp,fp
81109f6c:	dfc00117 	ldw	ra,4(sp)
81109f70:	df000017 	ldw	fp,0(sp)
81109f74:	dec00204 	addi	sp,sp,8
81109f78:	f800283a 	ret

81109f7c <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
81109f7c:	defffb04 	addi	sp,sp,-20
81109f80:	de00012e 	bgeu	sp,et,81109f88 <setPreAckReceiverFreePos+0xc>
81109f84:	003b68fa 	trap	3
81109f88:	dfc00415 	stw	ra,16(sp)
81109f8c:	df000315 	stw	fp,12(sp)
81109f90:	df000304 	addi	fp,sp,12
81109f94:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109f98:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81109f9c:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
81109fa0:	e03ffe05 	stb	zero,-8(fp)
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81109fa4:	00005406 	br	8110a0f8 <setPreAckReceiverFreePos+0x17c>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
81109fa8:	d0a05017 	ldw	r2,-32448(gp)
81109fac:	e0fffe84 	addi	r3,fp,-6
81109fb0:	180d883a 	mov	r6,r3
81109fb4:	01400084 	movi	r5,2
81109fb8:	1009883a 	mov	r4,r2
81109fbc:	112b1e00 	call	8112b1e0 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81109fc0:	e0bffe83 	ldbu	r2,-6(fp)
81109fc4:	10803fcc 	andi	r2,r2,255
81109fc8:	1000481e 	bne	r2,zero,8110a0ec <setPreAckReceiverFreePos+0x170>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
81109fcc:	e03ffe45 	stb	zero,-7(fp)
81109fd0:	00003f06 	br	8110a0d0 <setPreAckReceiverFreePos+0x154>
            {
                if ( xReceivedACK[i].cType == 0 ) {
81109fd4:	e0fffe43 	ldbu	r3,-7(fp)
81109fd8:	00a04574 	movhi	r2,33045
81109fdc:	10ae1804 	addi	r2,r2,-18336
81109fe0:	18c7883a 	add	r3,r3,r3
81109fe4:	18c7883a 	add	r3,r3,r3
81109fe8:	10c5883a 	add	r2,r2,r3
81109fec:	10800003 	ldbu	r2,0(r2)
81109ff0:	10803fcc 	andi	r2,r2,255
81109ff4:	1080201c 	xori	r2,r2,128
81109ff8:	10bfe004 	addi	r2,r2,-128
81109ffc:	1000311e 	bne	r2,zero,8110a0c4 <setPreAckReceiverFreePos+0x148>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xReceivedACK[i].cType = xPrePReader->cType;
8110a000:	e0fffe43 	ldbu	r3,-7(fp)
8110a004:	e0bfff17 	ldw	r2,-4(fp)
8110a008:	11000103 	ldbu	r4,4(r2)
8110a00c:	00a04574 	movhi	r2,33045
8110a010:	10ae1804 	addi	r2,r2,-18336
8110a014:	18c7883a 	add	r3,r3,r3
8110a018:	18c7883a 	add	r3,r3,r3
8110a01c:	10c5883a 	add	r2,r2,r3
8110a020:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].cCommand = xPrePReader->cCommand;
8110a024:	e0fffe43 	ldbu	r3,-7(fp)
8110a028:	e0bfff17 	ldw	r2,-4(fp)
8110a02c:	11000143 	ldbu	r4,5(r2)
8110a030:	00a04574 	movhi	r2,33045
8110a034:	10ae1804 	addi	r2,r2,-18336
8110a038:	18c7883a 	add	r3,r3,r3
8110a03c:	18c7883a 	add	r3,r3,r3
8110a040:	10c5883a 	add	r2,r2,r3
8110a044:	10800044 	addi	r2,r2,1
8110a048:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].usiId = xPrePReader->usiValues[0];
8110a04c:	e0fffe43 	ldbu	r3,-7(fp)
8110a050:	e0bfff17 	ldw	r2,-4(fp)
8110a054:	1100020b 	ldhu	r4,8(r2)
8110a058:	00a04574 	movhi	r2,33045
8110a05c:	10ae1804 	addi	r2,r2,-18336
8110a060:	18c7883a 	add	r3,r3,r3
8110a064:	18c7883a 	add	r3,r3,r3
8110a068:	10c5883a 	add	r2,r2,r3
8110a06c:	10800084 	addi	r2,r2,2
8110a070:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountReceivedACK);
8110a074:	d0a05117 	ldw	r2,-32444(gp)
8110a078:	1009883a 	mov	r4,r2
8110a07c:	112d5740 	call	8112d574 <OSSemPost>
8110a080:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
8110a084:	e0bffe83 	ldbu	r2,-6(fp)
8110a088:	10803fcc 	andi	r2,r2,255
8110a08c:	1000031e 	bne	r2,zero,8110a09c <setPreAckReceiverFreePos+0x120>
                        bSuccess = TRUE;
8110a090:	00800044 	movi	r2,1
8110a094:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckReceiverSemaphore();
                        xReceivedACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
8110a098:	00001006 	br	8110a0dc <setPreAckReceiverFreePos+0x160>

                    error_code = OSSemPost(xSemCountReceivedACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckReceiverSemaphore();
8110a09c:	110c7c80 	call	8110c7c8 <vFailSendPreAckReceiverSemaphore>
                        xReceivedACK[i].cType = 0;
8110a0a0:	e0fffe43 	ldbu	r3,-7(fp)
8110a0a4:	00a04574 	movhi	r2,33045
8110a0a8:	10ae1804 	addi	r2,r2,-18336
8110a0ac:	18c7883a 	add	r3,r3,r3
8110a0b0:	18c7883a 	add	r3,r3,r3
8110a0b4:	10c5883a 	add	r2,r2,r3
8110a0b8:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
8110a0bc:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110a0c0:	00000606 	br	8110a0dc <setPreAckReceiverFreePos+0x160>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
8110a0c4:	e0bffe43 	ldbu	r2,-7(fp)
8110a0c8:	10800044 	addi	r2,r2,1
8110a0cc:	e0bffe45 	stb	r2,-7(fp)
8110a0d0:	e0bffe43 	ldbu	r2,-7(fp)
8110a0d4:	10800130 	cmpltui	r2,r2,4
8110a0d8:	103fbe1e 	bne	r2,zero,81109fd4 <__reset+0xfb0e9fd4>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexReceivedACK);
8110a0dc:	d0a05017 	ldw	r2,-32448(gp)
8110a0e0:	1009883a 	mov	r4,r2
8110a0e4:	112b7840 	call	8112b784 <OSMutexPost>
8110a0e8:	00000306 	br	8110a0f8 <setPreAckReceiverFreePos+0x17c>
        } else {
            ucCountRetries++;
8110a0ec:	e0bffe03 	ldbu	r2,-8(fp)
8110a0f0:	10800044 	addi	r2,r2,1
8110a0f4:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a0f8:	e0bffd17 	ldw	r2,-12(fp)
8110a0fc:	1000031e 	bne	r2,zero,8110a10c <setPreAckReceiverFreePos+0x190>
8110a100:	e0bffe03 	ldbu	r2,-8(fp)
8110a104:	108000b0 	cmpltui	r2,r2,2
8110a108:	103fa71e 	bne	r2,zero,81109fa8 <__reset+0xfb0e9fa8>
            OSMutexPost(xMutexReceivedACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
8110a10c:	e0bffd17 	ldw	r2,-12(fp)
}
8110a110:	e037883a 	mov	sp,fp
8110a114:	dfc00117 	ldw	ra,4(sp)
8110a118:	df000017 	ldw	fp,0(sp)
8110a11c:	dec00204 	addi	sp,sp,8
8110a120:	f800283a 	ret

8110a124 <vSenderComTask>:

#include "sender_com_task.h"


void vSenderComTask(void *task_data)
{
8110a124:	defffb04 	addi	sp,sp,-20
8110a128:	de00012e 	bgeu	sp,et,8110a130 <vSenderComTask+0xc>
8110a12c:	003b68fa 	trap	3
8110a130:	dfc00415 	stw	ra,16(sp)
8110a134:	df000315 	stw	fp,12(sp)
8110a138:	df000304 	addi	fp,sp,12
8110a13c:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    int desligarEm = 0;
8110a140:	e03ffe15 	stw	zero,-8(fp)

    eSenderMode = sConfiguringSender;
8110a144:	e03ffd15 	stw	zero,-12(fp)

    #ifdef DEBUG_ON
        debug(fp,"vSenderComTask, enter task.\n");
8110a148:	d0a04d17 	ldw	r2,-32460(gp)
8110a14c:	100f883a 	mov	r7,r2
8110a150:	01800704 	movi	r6,28
8110a154:	01400044 	movi	r5,1
8110a158:	01204534 	movhi	r4,33044
8110a15c:	212bca04 	addi	r4,r4,-20696
8110a160:	11104940 	call	81110494 <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
8110a164:	e0bffd17 	ldw	r2,-12(fp)
8110a168:	10c00060 	cmpeqi	r3,r2,1
8110a16c:	1800091e 	bne	r3,zero,8110a194 <vSenderComTask+0x70>
8110a170:	0080052e 	bgeu	zero,r2,8110a188 <vSenderComTask+0x64>
8110a174:	10c000a0 	cmpeqi	r3,r2,2
8110a178:	1800351e 	bne	r3,zero,8110a250 <vSenderComTask+0x12c>
8110a17c:	10800160 	cmpeqi	r2,r2,5
8110a180:	10001c1e 	bne	r2,zero,8110a1f4 <vSenderComTask+0xd0>
8110a184:	00002a06 	br	8110a230 <vSenderComTask+0x10c>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
8110a188:	00800044 	movi	r2,1
8110a18c:	e0bffd15 	stw	r2,-12(fp)
                break;
8110a190:	00003006 	br	8110a254 <vSenderComTask+0x130>
            case sStartingConnSender:

                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
8110a194:	d0a04b17 	ldw	r2,-32468(gp)
8110a198:	1009883a 	mov	r4,r2
8110a19c:	112ce0c0 	call	8112ce0c <OSSemAccept>
8110a1a0:	10bfffcc 	andi	r2,r2,65535
8110a1a4:	10000326 	beq	r2,zero,8110a1b4 <vSenderComTask+0x90>
                    eSenderMode = sDummySender;
8110a1a8:	00800144 	movi	r2,5
8110a1ac:	e0bffd15 	stw	r2,-12(fp)
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }

                break;
8110a1b0:	00002806 	br	8110a254 <vSenderComTask+0x130>
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
                    eSenderMode = sDummySender;
                } else {
					#ifdef DEBUG_ON
						debug(fp,"Sending start sequence\n");
8110a1b4:	d0a04d17 	ldw	r2,-32460(gp)
8110a1b8:	100f883a 	mov	r7,r2
8110a1bc:	018005c4 	movi	r6,23
8110a1c0:	01400044 	movi	r5,1
8110a1c4:	01204534 	movhi	r4,33044
8110a1c8:	212bd204 	addi	r4,r4,-20664
8110a1cc:	11104940 	call	81110494 <fwrite>
					#endif
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
8110a1d0:	01204534 	movhi	r4,33044
8110a1d4:	212bd804 	addi	r4,r4,-20640
8110a1d8:	11112cc0 	call	811112cc <puts>
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
8110a1dc:	000f883a 	mov	r7,zero
8110a1e0:	01800144 	movi	r6,5
8110a1e4:	000b883a 	mov	r5,zero
8110a1e8:	0009883a 	mov	r4,zero
8110a1ec:	112f1840 	call	8112f184 <OSTimeDlyHMSM>
                }

                break;
8110a1f0:	00001806 	br	8110a254 <vSenderComTask+0x130>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
8110a1f4:	00800144 	movi	r2,5
8110a1f8:	e0bffd15 	stw	r2,-12(fp)


#ifdef DEBUG_ON
	debug(fp,"sDummySender\n");
8110a1fc:	d0a04d17 	ldw	r2,-32460(gp)
8110a200:	100f883a 	mov	r7,r2
8110a204:	01800344 	movi	r6,13
8110a208:	01400044 	movi	r5,1
8110a20c:	01204534 	movhi	r4,33044
8110a210:	212bdb04 	addi	r4,r4,-20628
8110a214:	11104940 	call	81110494 <fwrite>
#endif
				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
8110a218:	000f883a 	mov	r7,zero
8110a21c:	01800284 	movi	r6,10
8110a220:	000b883a 	mov	r5,zero
8110a224:	0009883a 	mov	r4,zero
8110a228:	112f1840 	call	8112f184 <OSTimeDlyHMSM>
                break;
8110a22c:	00000906 	br	8110a254 <vSenderComTask+0x130>
            default:
#ifdef DEBUG_ON
	debug(fp,"sender default\n");
8110a230:	d0a04d17 	ldw	r2,-32460(gp)
8110a234:	100f883a 	mov	r7,r2
8110a238:	018003c4 	movi	r6,15
8110a23c:	01400044 	movi	r5,1
8110a240:	01204534 	movhi	r4,33044
8110a244:	212bdf04 	addi	r4,r4,-20612
8110a248:	11104940 	call	81110494 <fwrite>
#endif
                break;
8110a24c:	00000106 	br	8110a254 <vSenderComTask+0x130>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
8110a250:	0001883a 	nop
	debug(fp,"sender default\n");
#endif
                break;
        }

    }
8110a254:	003fc306 	br	8110a164 <__reset+0xfb0ea164>

8110a258 <vSimMebTask>:


#include "sim_meb_task.h"


void vSimMebTask(void *task_data) {
8110a258:	defffd04 	addi	sp,sp,-12
8110a25c:	de00012e 	bgeu	sp,et,8110a264 <vSimMebTask+0xc>
8110a260:	003b68fa 	trap	3
8110a264:	df000215 	stw	fp,8(sp)
8110a268:	df000204 	addi	fp,sp,8
8110a26c:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
8110a270:	e03ffe15 	stw	zero,-8(fp)


	//SIMUCAM MAIN TASK


}
8110a274:	0001883a 	nop
8110a278:	e037883a 	mov	sp,fp
8110a27c:	df000017 	ldw	fp,0(sp)
8110a280:	dec00104 	addi	sp,sp,4
8110a284:	f800283a 	ret

8110a288 <vTimeoutCheckerTask>:

#include "timeout_checker_ack_task.h"


/* Could impact in the overall performance of the system due to need many shared resources (many mutexes) */
void vTimeoutCheckerTask(void *task_data) {
8110a288:	defff504 	addi	sp,sp,-44
8110a28c:	de00012e 	bgeu	sp,et,8110a294 <vTimeoutCheckerTask+0xc>
8110a290:	003b68fa 	trap	3
8110a294:	dfc00a15 	stw	ra,40(sp)
8110a298:	df000915 	stw	fp,36(sp)
8110a29c:	df000904 	addi	fp,sp,36
8110a2a0:	e13fff15 	stw	r4,-4(fp)
    bool bFinished32 = FALSE;
8110a2a4:	e03ff715 	stw	zero,-36(fp)
    bool bFinished64 = FALSE;
8110a2a8:	e03ff815 	stw	zero,-32(fp)
    bool bFinished128 = FALSE;
8110a2ac:	e03ff915 	stw	zero,-28(fp)
	INT8U error_code;
    unsigned char ucCountRetries = 0;
8110a2b0:	e03ffa05 	stb	zero,-24(fp)
    unsigned char i = 0, k =0;
8110a2b4:	e03ffa45 	stb	zero,-23(fp)
8110a2b8:	e03ffa85 	stb	zero,-22(fp)
	unsigned char ucRetransB32[N_32];
	unsigned char ucRetransB64[N_64];
	unsigned char ucRetransB128[N_128];

    #ifdef DEBUG_ON
        debug(fp,"vTimeoutCheckerTask, enter task.\n");
8110a2bc:	d0a04d17 	ldw	r2,-32460(gp)
8110a2c0:	100f883a 	mov	r7,r2
8110a2c4:	01800844 	movi	r6,33
8110a2c8:	01400044 	movi	r5,1
8110a2cc:	01204534 	movhi	r4,33044
8110a2d0:	212be304 	addi	r4,r4,-20596
8110a2d4:	11104940 	call	81110494 <fwrite>
    #endif

    for (;;) {
        /* This semaphore is used to sync the Timer used for check timeout and this task that is for actualy implement the logic of the timeout for the communication*/
        OSSemPend(xSemTimeoutChecker, 0, &error_code);
8110a2d8:	d0a05217 	ldw	r2,-32440(gp)
8110a2dc:	e0fffac4 	addi	r3,fp,-21
8110a2e0:	180d883a 	mov	r6,r3
8110a2e4:	000b883a 	mov	r5,zero
8110a2e8:	1009883a 	mov	r4,r2
8110a2ec:	112d1ec0 	call	8112d1ec <OSSemPend>
        if ( error_code == OS_NO_ERR ) {
8110a2f0:	e0bffac3 	ldbu	r2,-21(fp)
8110a2f4:	10803fcc 	andi	r2,r2,255
8110a2f8:	1002191e 	bne	r2,zero,8110ab60 <vTimeoutCheckerTask+0x8d8>
            /*  Time to check all the (re)transmission buffers in order to retransmit if any message got timeout*/

            /*  Writing 0xFF in the buffer to check after if there is any scheduled retransmission
                If there is some, the valur will be between 0 and <max buffer size>*/
            memset(ucRetransB32, 255, N_32);
8110a2fc:	e0bffb04 	addi	r2,fp,-20
8110a300:	01800204 	movi	r6,8
8110a304:	01403fc4 	movi	r5,255
8110a308:	1009883a 	mov	r4,r2
8110a30c:	1110ff80 	call	81110ff8 <memset>
            memset(ucRetransB64, 255, N_64);
8110a310:	e0bffd04 	addi	r2,fp,-12
8110a314:	01800104 	movi	r6,4
8110a318:	01403fc4 	movi	r5,255
8110a31c:	1009883a 	mov	r4,r2
8110a320:	1110ff80 	call	81110ff8 <memset>
            memset(ucRetransB128, 255, N_128);
8110a324:	e0bffe04 	addi	r2,fp,-8
8110a328:	01800084 	movi	r6,2
8110a32c:	01403fc4 	movi	r5,255
8110a330:	1009883a 	mov	r4,r2
8110a334:	1110ff80 	call	81110ff8 <memset>

            bFinished32=FALSE;
8110a338:	e03ff715 	stw	zero,-36(fp)
            bFinished64=FALSE;
8110a33c:	e03ff815 	stw	zero,-32(fp)
            bFinished128=FALSE;
8110a340:	e03ff915 	stw	zero,-28(fp)
            ucCountRetries = 0;
8110a344:	e03ffa05 	stb	zero,-24(fp)

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
8110a348:	00011a06 	br	8110a7b4 <vTimeoutCheckerTask+0x52c>

                if ( bFinished32 == FALSE ) {
8110a34c:	e0bff717 	ldw	r2,-36(fp)
8110a350:	10005b1e 	bne	r2,zero,8110a4c0 <vTimeoutCheckerTask+0x238>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110a354:	d0a05517 	ldw	r2,-32428(gp)
8110a358:	e0fffac4 	addi	r3,fp,-21
8110a35c:	180d883a 	mov	r6,r3
8110a360:	01400084 	movi	r5,2
8110a364:	1009883a 	mov	r4,r2
8110a368:	112b1e00 	call	8112b1e0 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110a36c:	e0bffac3 	ldbu	r2,-21(fp)
8110a370:	10803fcc 	andi	r2,r2,255
8110a374:	1000521e 	bne	r2,zero,8110a4c0 <vTimeoutCheckerTask+0x238>
                        /*Search for the id*/
                        k = 0;
8110a378:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_32; i++)
8110a37c:	e03ffa45 	stb	zero,-23(fp)
8110a380:	00004706 	br	8110a4a0 <vTimeoutCheckerTask+0x218>
                        {
                            if ( xBuffer32[i].usiId != 0 ) {
8110a384:	e0fffa43 	ldbu	r3,-23(fp)
8110a388:	00a04534 	movhi	r2,33044
8110a38c:	10958904 	addi	r2,r2,22052
8110a390:	18c009a4 	muli	r3,r3,38
8110a394:	10c5883a 	add	r2,r2,r3
8110a398:	10800804 	addi	r2,r2,32
8110a39c:	1080000b 	ldhu	r2,0(r2)
8110a3a0:	10bfffcc 	andi	r2,r2,65535
8110a3a4:	10003b26 	beq	r2,zero,8110a494 <vTimeoutCheckerTask+0x20c>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer32[i].ucNofRetries < 1 ) {
8110a3a8:	e0fffa43 	ldbu	r3,-23(fp)
8110a3ac:	00a04534 	movhi	r2,33044
8110a3b0:	10958904 	addi	r2,r2,22052
8110a3b4:	18c009a4 	muli	r3,r3,38
8110a3b8:	10c5883a 	add	r2,r2,r3
8110a3bc:	10800904 	addi	r2,r2,36
8110a3c0:	10800003 	ldbu	r2,0(r2)
8110a3c4:	10803fcc 	andi	r2,r2,255
8110a3c8:	1000101e 	bne	r2,zero,8110a40c <vTimeoutCheckerTask+0x184>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer32[i].usiId = 0;
8110a3cc:	e0fffa43 	ldbu	r3,-23(fp)
8110a3d0:	00a04534 	movhi	r2,33044
8110a3d4:	10958904 	addi	r2,r2,22052
8110a3d8:	18c009a4 	muli	r3,r3,38
8110a3dc:	10c5883a 	add	r2,r2,r3
8110a3e0:	10800804 	addi	r2,r2,32
8110a3e4:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer32);
8110a3e8:	d0a05817 	ldw	r2,-32416(gp)
8110a3ec:	1009883a 	mov	r4,r2
8110a3f0:	112d5740 	call	8112d574 <OSSemPost>
8110a3f4:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110a3f8:	e0bffac3 	ldbu	r2,-21(fp)
8110a3fc:	10803fcc 	andi	r2,r2,255
8110a400:	10002426 	beq	r2,zero,8110a494 <vTimeoutCheckerTask+0x20c>
                                        vFailSetCountSemaphorexBuffer32();
8110a404:	110cbe40 	call	8110cbe4 <vFailSetCountSemaphorexBuffer32>
8110a408:	00002206 	br	8110a494 <vTimeoutCheckerTask+0x20c>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer32[i].usiTimeOut--;
8110a40c:	e0fffa43 	ldbu	r3,-23(fp)
8110a410:	00a04534 	movhi	r2,33044
8110a414:	10958904 	addi	r2,r2,22052
8110a418:	190009a4 	muli	r4,r3,38
8110a41c:	1105883a 	add	r2,r2,r4
8110a420:	10800884 	addi	r2,r2,34
8110a424:	1080000b 	ldhu	r2,0(r2)
8110a428:	10bfffc4 	addi	r2,r2,-1
8110a42c:	1009883a 	mov	r4,r2
8110a430:	00a04534 	movhi	r2,33044
8110a434:	10958904 	addi	r2,r2,22052
8110a438:	18c009a4 	muli	r3,r3,38
8110a43c:	10c5883a 	add	r2,r2,r3
8110a440:	10800884 	addi	r2,r2,34
8110a444:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer32[i].usiTimeOut < 1 ) {
8110a448:	e0fffa43 	ldbu	r3,-23(fp)
8110a44c:	00a04534 	movhi	r2,33044
8110a450:	10958904 	addi	r2,r2,22052
8110a454:	18c009a4 	muli	r3,r3,38
8110a458:	10c5883a 	add	r2,r2,r3
8110a45c:	10800884 	addi	r2,r2,34
8110a460:	1080000b 	ldhu	r2,0(r2)
8110a464:	10bfffcc 	andi	r2,r2,65535
8110a468:	10a0001c 	xori	r2,r2,32768
8110a46c:	10a00004 	addi	r2,r2,-32768
8110a470:	00800816 	blt	zero,r2,8110a494 <vTimeoutCheckerTask+0x20c>
                                        /* Schedule to retransmit */
                                        ucRetransB32[k] = i;
8110a474:	e0bffa83 	ldbu	r2,-22(fp)
8110a478:	e0fffb04 	addi	r3,fp,-20
8110a47c:	1885883a 	add	r2,r3,r2
8110a480:	e0fffa43 	ldbu	r3,-23(fp)
8110a484:	10c00005 	stb	r3,0(r2)
                                        k++;
8110a488:	e0bffa83 	ldbu	r2,-22(fp)
8110a48c:	10800044 	addi	r2,r2,1
8110a490:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_32; i++)
8110a494:	e0bffa43 	ldbu	r2,-23(fp)
8110a498:	10800044 	addi	r2,r2,1
8110a49c:	e0bffa45 	stb	r2,-23(fp)
8110a4a0:	e0bffa43 	ldbu	r2,-23(fp)
8110a4a4:	10800230 	cmpltui	r2,r2,8
8110a4a8:	103fb61e 	bne	r2,zero,8110a384 <__reset+0xfb0ea384>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110a4ac:	d0a05517 	ldw	r2,-32428(gp)
8110a4b0:	1009883a 	mov	r4,r2
8110a4b4:	112b7840 	call	8112b784 <OSMutexPost>
                        bFinished32 = TRUE;
8110a4b8:	00800044 	movi	r2,1
8110a4bc:	e0bff715 	stw	r2,-36(fp)
                    }
                }

                if ( bFinished64 == FALSE ) {
8110a4c0:	e0bff817 	ldw	r2,-32(fp)
8110a4c4:	10005b1e 	bne	r2,zero,8110a634 <vTimeoutCheckerTask+0x3ac>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110a4c8:	d0a05917 	ldw	r2,-32412(gp)
8110a4cc:	e0fffac4 	addi	r3,fp,-21
8110a4d0:	180d883a 	mov	r6,r3
8110a4d4:	01400084 	movi	r5,2
8110a4d8:	1009883a 	mov	r4,r2
8110a4dc:	112b1e00 	call	8112b1e0 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110a4e0:	e0bffac3 	ldbu	r2,-21(fp)
8110a4e4:	10803fcc 	andi	r2,r2,255
8110a4e8:	1000521e 	bne	r2,zero,8110a634 <vTimeoutCheckerTask+0x3ac>
                        /*Search for the id*/
                        k = 0;
8110a4ec:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_64; i++)
8110a4f0:	e03ffa45 	stb	zero,-23(fp)
8110a4f4:	00004706 	br	8110a614 <vTimeoutCheckerTask+0x38c>
                        {
                            if ( xBuffer64[i].usiId != 0 ) {
8110a4f8:	e0fffa43 	ldbu	r3,-23(fp)
8110a4fc:	00a04534 	movhi	r2,33044
8110a500:	10842c04 	addi	r2,r2,4272
8110a504:	18c011a4 	muli	r3,r3,70
8110a508:	10c5883a 	add	r2,r2,r3
8110a50c:	10801004 	addi	r2,r2,64
8110a510:	1080000b 	ldhu	r2,0(r2)
8110a514:	10bfffcc 	andi	r2,r2,65535
8110a518:	10003b26 	beq	r2,zero,8110a608 <vTimeoutCheckerTask+0x380>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer64[i].ucNofRetries < 1 ) {
8110a51c:	e0fffa43 	ldbu	r3,-23(fp)
8110a520:	00a04534 	movhi	r2,33044
8110a524:	10842c04 	addi	r2,r2,4272
8110a528:	18c011a4 	muli	r3,r3,70
8110a52c:	10c5883a 	add	r2,r2,r3
8110a530:	10801104 	addi	r2,r2,68
8110a534:	10800003 	ldbu	r2,0(r2)
8110a538:	10803fcc 	andi	r2,r2,255
8110a53c:	1000101e 	bne	r2,zero,8110a580 <vTimeoutCheckerTask+0x2f8>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer64[i].usiId = 0;
8110a540:	e0fffa43 	ldbu	r3,-23(fp)
8110a544:	00a04534 	movhi	r2,33044
8110a548:	10842c04 	addi	r2,r2,4272
8110a54c:	18c011a4 	muli	r3,r3,70
8110a550:	10c5883a 	add	r2,r2,r3
8110a554:	10801004 	addi	r2,r2,64
8110a558:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer64);
8110a55c:	d0a04a17 	ldw	r2,-32472(gp)
8110a560:	1009883a 	mov	r4,r2
8110a564:	112d5740 	call	8112d574 <OSSemPost>
8110a568:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110a56c:	e0bffac3 	ldbu	r2,-21(fp)
8110a570:	10803fcc 	andi	r2,r2,255
8110a574:	10002426 	beq	r2,zero,8110a608 <vTimeoutCheckerTask+0x380>
                                        vFailSetCountSemaphorexBuffer64();
8110a578:	110cc4c0 	call	8110cc4c <vFailSetCountSemaphorexBuffer64>
8110a57c:	00002206 	br	8110a608 <vTimeoutCheckerTask+0x380>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer64[i].usiTimeOut--;
8110a580:	e0fffa43 	ldbu	r3,-23(fp)
8110a584:	00a04534 	movhi	r2,33044
8110a588:	10842c04 	addi	r2,r2,4272
8110a58c:	190011a4 	muli	r4,r3,70
8110a590:	1105883a 	add	r2,r2,r4
8110a594:	10801084 	addi	r2,r2,66
8110a598:	1080000b 	ldhu	r2,0(r2)
8110a59c:	10bfffc4 	addi	r2,r2,-1
8110a5a0:	1009883a 	mov	r4,r2
8110a5a4:	00a04534 	movhi	r2,33044
8110a5a8:	10842c04 	addi	r2,r2,4272
8110a5ac:	18c011a4 	muli	r3,r3,70
8110a5b0:	10c5883a 	add	r2,r2,r3
8110a5b4:	10801084 	addi	r2,r2,66
8110a5b8:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer64[i].usiTimeOut < 1 ) {
8110a5bc:	e0fffa43 	ldbu	r3,-23(fp)
8110a5c0:	00a04534 	movhi	r2,33044
8110a5c4:	10842c04 	addi	r2,r2,4272
8110a5c8:	18c011a4 	muli	r3,r3,70
8110a5cc:	10c5883a 	add	r2,r2,r3
8110a5d0:	10801084 	addi	r2,r2,66
8110a5d4:	1080000b 	ldhu	r2,0(r2)
8110a5d8:	10bfffcc 	andi	r2,r2,65535
8110a5dc:	10a0001c 	xori	r2,r2,32768
8110a5e0:	10a00004 	addi	r2,r2,-32768
8110a5e4:	00800816 	blt	zero,r2,8110a608 <vTimeoutCheckerTask+0x380>
                                        /* Schedule to retransmit */
                                        ucRetransB64[k] = i;
8110a5e8:	e0bffa83 	ldbu	r2,-22(fp)
8110a5ec:	e0fffd04 	addi	r3,fp,-12
8110a5f0:	1885883a 	add	r2,r3,r2
8110a5f4:	e0fffa43 	ldbu	r3,-23(fp)
8110a5f8:	10c00005 	stb	r3,0(r2)
                                        k++;
8110a5fc:	e0bffa83 	ldbu	r2,-22(fp)
8110a600:	10800044 	addi	r2,r2,1
8110a604:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_64; i++)
8110a608:	e0bffa43 	ldbu	r2,-23(fp)
8110a60c:	10800044 	addi	r2,r2,1
8110a610:	e0bffa45 	stb	r2,-23(fp)
8110a614:	e0bffa43 	ldbu	r2,-23(fp)
8110a618:	10800130 	cmpltui	r2,r2,4
8110a61c:	103fb61e 	bne	r2,zero,8110a4f8 <__reset+0xfb0ea4f8>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer32*/
8110a620:	d0a05917 	ldw	r2,-32412(gp)
8110a624:	1009883a 	mov	r4,r2
8110a628:	112b7840 	call	8112b784 <OSMutexPost>
                        bFinished64 = TRUE;
8110a62c:	00800044 	movi	r2,1
8110a630:	e0bff815 	stw	r2,-32(fp)
                    }
                }

                if ( bFinished128 == FALSE ) {
8110a634:	e0bff917 	ldw	r2,-28(fp)
8110a638:	10005b1e 	bne	r2,zero,8110a7a8 <vTimeoutCheckerTask+0x520>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110a63c:	d0a05717 	ldw	r2,-32420(gp)
8110a640:	e0fffac4 	addi	r3,fp,-21
8110a644:	180d883a 	mov	r6,r3
8110a648:	01400084 	movi	r5,2
8110a64c:	1009883a 	mov	r4,r2
8110a650:	112b1e00 	call	8112b1e0 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110a654:	e0bffac3 	ldbu	r2,-21(fp)
8110a658:	10803fcc 	andi	r2,r2,255
8110a65c:	1000521e 	bne	r2,zero,8110a7a8 <vTimeoutCheckerTask+0x520>
                        /*Search for the id*/
                        k = 0;
8110a660:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_128; i++)
8110a664:	e03ffa45 	stb	zero,-23(fp)
8110a668:	00004706 	br	8110a788 <vTimeoutCheckerTask+0x500>
                        {
                            if ( xBuffer128[i].usiId != 0 ) {
8110a66c:	e0fffa43 	ldbu	r3,-23(fp)
8110a670:	00a04574 	movhi	r2,33045
8110a674:	10add504 	addi	r2,r2,-18604
8110a678:	18c021a4 	muli	r3,r3,134
8110a67c:	10c5883a 	add	r2,r2,r3
8110a680:	10802004 	addi	r2,r2,128
8110a684:	1080000b 	ldhu	r2,0(r2)
8110a688:	10bfffcc 	andi	r2,r2,65535
8110a68c:	10003b26 	beq	r2,zero,8110a77c <vTimeoutCheckerTask+0x4f4>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer128[i].ucNofRetries < 1 ) {
8110a690:	e0fffa43 	ldbu	r3,-23(fp)
8110a694:	00a04574 	movhi	r2,33045
8110a698:	10add504 	addi	r2,r2,-18604
8110a69c:	18c021a4 	muli	r3,r3,134
8110a6a0:	10c5883a 	add	r2,r2,r3
8110a6a4:	10802104 	addi	r2,r2,132
8110a6a8:	10800003 	ldbu	r2,0(r2)
8110a6ac:	10803fcc 	andi	r2,r2,255
8110a6b0:	1000101e 	bne	r2,zero,8110a6f4 <vTimeoutCheckerTask+0x46c>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer128[i].usiId = 0;
8110a6b4:	e0fffa43 	ldbu	r3,-23(fp)
8110a6b8:	00a04574 	movhi	r2,33045
8110a6bc:	10add504 	addi	r2,r2,-18604
8110a6c0:	18c021a4 	muli	r3,r3,134
8110a6c4:	10c5883a 	add	r2,r2,r3
8110a6c8:	10802004 	addi	r2,r2,128
8110a6cc:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer128);
8110a6d0:	d0a04e17 	ldw	r2,-32456(gp)
8110a6d4:	1009883a 	mov	r4,r2
8110a6d8:	112d5740 	call	8112d574 <OSSemPost>
8110a6dc:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110a6e0:	e0bffac3 	ldbu	r2,-21(fp)
8110a6e4:	10803fcc 	andi	r2,r2,255
8110a6e8:	10002426 	beq	r2,zero,8110a77c <vTimeoutCheckerTask+0x4f4>
                                        vFailSetCountSemaphorexBuffer128();
8110a6ec:	110ccb40 	call	8110ccb4 <vFailSetCountSemaphorexBuffer128>
8110a6f0:	00002206 	br	8110a77c <vTimeoutCheckerTask+0x4f4>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer128[i].usiTimeOut--;
8110a6f4:	e0fffa43 	ldbu	r3,-23(fp)
8110a6f8:	00a04574 	movhi	r2,33045
8110a6fc:	10add504 	addi	r2,r2,-18604
8110a700:	190021a4 	muli	r4,r3,134
8110a704:	1105883a 	add	r2,r2,r4
8110a708:	10802084 	addi	r2,r2,130
8110a70c:	1080000b 	ldhu	r2,0(r2)
8110a710:	10bfffc4 	addi	r2,r2,-1
8110a714:	1009883a 	mov	r4,r2
8110a718:	00a04574 	movhi	r2,33045
8110a71c:	10add504 	addi	r2,r2,-18604
8110a720:	18c021a4 	muli	r3,r3,134
8110a724:	10c5883a 	add	r2,r2,r3
8110a728:	10802084 	addi	r2,r2,130
8110a72c:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer128[i].usiTimeOut < 1 ) {
8110a730:	e0fffa43 	ldbu	r3,-23(fp)
8110a734:	00a04574 	movhi	r2,33045
8110a738:	10add504 	addi	r2,r2,-18604
8110a73c:	18c021a4 	muli	r3,r3,134
8110a740:	10c5883a 	add	r2,r2,r3
8110a744:	10802084 	addi	r2,r2,130
8110a748:	1080000b 	ldhu	r2,0(r2)
8110a74c:	10bfffcc 	andi	r2,r2,65535
8110a750:	10a0001c 	xori	r2,r2,32768
8110a754:	10a00004 	addi	r2,r2,-32768
8110a758:	00800816 	blt	zero,r2,8110a77c <vTimeoutCheckerTask+0x4f4>
                                        /* Schedule to retransmit */
                                        ucRetransB128[k] = i;
8110a75c:	e0bffa83 	ldbu	r2,-22(fp)
8110a760:	e0fffe04 	addi	r3,fp,-8
8110a764:	1885883a 	add	r2,r3,r2
8110a768:	e0fffa43 	ldbu	r3,-23(fp)
8110a76c:	10c00005 	stb	r3,0(r2)
                                        k++;
8110a770:	e0bffa83 	ldbu	r2,-22(fp)
8110a774:	10800044 	addi	r2,r2,1
8110a778:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_128; i++)
8110a77c:	e0bffa43 	ldbu	r2,-23(fp)
8110a780:	10800044 	addi	r2,r2,1
8110a784:	e0bffa45 	stb	r2,-23(fp)
8110a788:	e0bffa43 	ldbu	r2,-23(fp)
8110a78c:	108000b0 	cmpltui	r2,r2,2
8110a790:	103fb61e 	bne	r2,zero,8110a66c <__reset+0xfb0ea66c>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer32*/
8110a794:	d0a05717 	ldw	r2,-32420(gp)
8110a798:	1009883a 	mov	r4,r2
8110a79c:	112b7840 	call	8112b784 <OSMutexPost>
                        bFinished128 = TRUE;
8110a7a0:	00800044 	movi	r2,1
8110a7a4:	e0bff915 	stw	r2,-28(fp)
                    }
                }
                ucCountRetries++;
8110a7a8:	e0bffa03 	ldbu	r2,-24(fp)
8110a7ac:	10800044 	addi	r2,r2,1
8110a7b0:	e0bffa05 	stb	r2,-24(fp)
            bFinished64=FALSE;
            bFinished128=FALSE;
            ucCountRetries = 0;

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
8110a7b4:	e0bffa03 	ldbu	r2,-24(fp)
8110a7b8:	108001a8 	cmpgeui	r2,r2,6
8110a7bc:	1000061e 	bne	r2,zero,8110a7d8 <vTimeoutCheckerTask+0x550>
8110a7c0:	e0bff717 	ldw	r2,-36(fp)
8110a7c4:	103ee126 	beq	r2,zero,8110a34c <__reset+0xfb0ea34c>
8110a7c8:	e0bff817 	ldw	r2,-32(fp)
8110a7cc:	103edf26 	beq	r2,zero,8110a34c <__reset+0xfb0ea34c>
8110a7d0:	e0bff917 	ldw	r2,-28(fp)
8110a7d4:	103edd26 	beq	r2,zero,8110a34c <__reset+0xfb0ea34c>
                }
                ucCountRetries++;
            }

            /*  Check if could not check some of the (re)transmission buffer*/
            if ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) {
8110a7d8:	e0bff717 	ldw	r2,-36(fp)
8110a7dc:	10000426 	beq	r2,zero,8110a7f0 <vTimeoutCheckerTask+0x568>
8110a7e0:	e0bff817 	ldw	r2,-32(fp)
8110a7e4:	10000226 	beq	r2,zero,8110a7f0 <vTimeoutCheckerTask+0x568>
8110a7e8:	e0bff917 	ldw	r2,-28(fp)
8110a7ec:	1000011e 	bne	r2,zero,8110a7f4 <vTimeoutCheckerTask+0x56c>
                /*  Could not check all (re)transmission buffer, only show message for now. There's no hard impact to thesystem
                    but we need to know that is accurring*/
                vCouldNotCheckBufferTimeOutFunction();
8110a7f0:	110d1f40 	call	8110d1f4 <vCouldNotCheckBufferTimeOutFunction>
            /*  Retransmit could slow down the system in the worst case, because need to get more than one mutex at same time
                this also could impact in various task that need the mutex also, as this operation may be rare
                before try to get all mutexes, will check if there is anything in the scheduler buffers (ucRetransB32,ucRetransB64,ucRetransB128). */
                
            /*  Most part of the time this will be false, and many processing and kernell resources will be saved with this verification*/
            if ( (ucRetransB32[0] != 255) || (ucRetransB64[0] != 255) || (ucRetransB128[0] != 255) ) {
8110a7f4:	e0bffb03 	ldbu	r2,-20(fp)
8110a7f8:	10803fcc 	andi	r2,r2,255
8110a7fc:	10803fd8 	cmpnei	r2,r2,255
8110a800:	1000081e 	bne	r2,zero,8110a824 <vTimeoutCheckerTask+0x59c>
8110a804:	e0bffd03 	ldbu	r2,-12(fp)
8110a808:	10803fcc 	andi	r2,r2,255
8110a80c:	10803fd8 	cmpnei	r2,r2,255
8110a810:	1000041e 	bne	r2,zero,8110a824 <vTimeoutCheckerTask+0x59c>
8110a814:	e0bffe03 	ldbu	r2,-8(fp)
8110a818:	10803fcc 	andi	r2,r2,255
8110a81c:	10803fe0 	cmpeqi	r2,r2,255
8110a820:	103ead1e 	bne	r2,zero,8110a2d8 <__reset+0xfb0ea2d8>
                /*  This operation will try to use the UART TX buffer, so after get the mutex it will remain for almost 3 or 4 ticks in the worst case.
                    In order to avoid that all the system lost the access to the communication for more time, and to minimize the priority inversion
                    if we can't get the mutex for the buffer32, buffer 64 or buffer128, we continue and in the next cycle of checkout it will try to re-send finaly. */                

                /*  Sleep for 50 ticks (50 milli) in the worst case*/
                OSMutexPend(xTxUARTMutex, 50, &error_code); /* Wait 50 ticks = 50 ms */
8110a824:	d0a05b17 	ldw	r2,-32404(gp)
8110a828:	e0fffac4 	addi	r3,fp,-21
8110a82c:	180d883a 	mov	r6,r3
8110a830:	01400c84 	movi	r5,50
8110a834:	1009883a 	mov	r4,r2
8110a838:	112b1e00 	call	8112b1e0 <OSMutexPend>
                if ( error_code == OS_NO_ERR ) {
8110a83c:	e0bffac3 	ldbu	r2,-21(fp)
8110a840:	10803fcc 	andi	r2,r2,255
8110a844:	1000c41e 	bne	r2,zero,8110ab58 <vTimeoutCheckerTask+0x8d0>


                    if ( ucRetransB32[0] != 255 ) {
8110a848:	e0bffb03 	ldbu	r2,-20(fp)
8110a84c:	10803fcc 	andi	r2,r2,255
8110a850:	10803fe0 	cmpeqi	r2,r2,255
8110a854:	10003c1e 	bne	r2,zero,8110a948 <vTimeoutCheckerTask+0x6c0>
                        OSMutexPend(xMutexBuffer32, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110a858:	d0a05517 	ldw	r2,-32428(gp)
8110a85c:	e0fffac4 	addi	r3,fp,-21
8110a860:	180d883a 	mov	r6,r3
8110a864:	01400044 	movi	r5,1
8110a868:	1009883a 	mov	r4,r2
8110a86c:	112b1e00 	call	8112b1e0 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110a870:	e0bffac3 	ldbu	r2,-21(fp)
8110a874:	10803fcc 	andi	r2,r2,255
8110a878:	1000321e 	bne	r2,zero,8110a944 <vTimeoutCheckerTask+0x6bc>
                            k = 0;
8110a87c:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB32[k];
8110a880:	e0bffa83 	ldbu	r2,-22(fp)
8110a884:	e0fffb04 	addi	r3,fp,-20
8110a888:	1885883a 	add	r2,r3,r2
8110a88c:	10800003 	ldbu	r2,0(r2)
8110a890:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer32[i].ucNofRetries--;
8110a894:	e0fffa43 	ldbu	r3,-23(fp)
8110a898:	00a04534 	movhi	r2,33044
8110a89c:	10958904 	addi	r2,r2,22052
8110a8a0:	190009a4 	muli	r4,r3,38
8110a8a4:	1105883a 	add	r2,r2,r4
8110a8a8:	10800904 	addi	r2,r2,36
8110a8ac:	10800003 	ldbu	r2,0(r2)
8110a8b0:	10bfffc4 	addi	r2,r2,-1
8110a8b4:	1009883a 	mov	r4,r2
8110a8b8:	00a04534 	movhi	r2,33044
8110a8bc:	10958904 	addi	r2,r2,22052
8110a8c0:	18c009a4 	muli	r3,r3,38
8110a8c4:	10c5883a 	add	r2,r2,r3
8110a8c8:	10800904 	addi	r2,r2,36
8110a8cc:	11000005 	stb	r4,0(r2)
                                xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110a8d0:	e0fffa43 	ldbu	r3,-23(fp)
8110a8d4:	00a04534 	movhi	r2,33044
8110a8d8:	10958904 	addi	r2,r2,22052
8110a8dc:	18c009a4 	muli	r3,r3,38
8110a8e0:	10c5883a 	add	r2,r2,r3
8110a8e4:	10800884 	addi	r2,r2,34
8110a8e8:	00c00104 	movi	r3,4
8110a8ec:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer32[i].buffer);                                
8110a8f0:	e0bffa43 	ldbu	r2,-23(fp)
8110a8f4:	10c009a4 	muli	r3,r2,38
8110a8f8:	00a04534 	movhi	r2,33044
8110a8fc:	10958904 	addi	r2,r2,22052
8110a900:	1885883a 	add	r2,r3,r2
8110a904:	1009883a 	mov	r4,r2
8110a908:	11112cc0 	call	811112cc <puts>
                                k++;
8110a90c:	e0bffa83 	ldbu	r2,-22(fp)
8110a910:	10800044 	addi	r2,r2,1
8110a914:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB32[k] != 255 );                       
8110a918:	e0bffa83 	ldbu	r2,-22(fp)
8110a91c:	e0fffb04 	addi	r3,fp,-20
8110a920:	1885883a 	add	r2,r3,r2
8110a924:	10800003 	ldbu	r2,0(r2)
8110a928:	10803fcc 	andi	r2,r2,255
8110a92c:	10803fd8 	cmpnei	r2,r2,255
8110a930:	103fd31e 	bne	r2,zero,8110a880 <__reset+0xfb0ea880>

                            OSMutexPost(xMutexBuffer32);
8110a934:	d0a05517 	ldw	r2,-32428(gp)
8110a938:	1009883a 	mov	r4,r2
8110a93c:	112b7840 	call	8112b784 <OSMutexPost>
8110a940:	00000106 	br	8110a948 <vTimeoutCheckerTask+0x6c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB32TimeoutTask();
8110a944:	110d3c40 	call	8110d3c4 <vCouldNotRetransmitB32TimeoutTask>
                        }
                    }

                    if ( ucRetransB64[0] != 255 ) {
8110a948:	e0bffd03 	ldbu	r2,-12(fp)
8110a94c:	10803fcc 	andi	r2,r2,255
8110a950:	10803fe0 	cmpeqi	r2,r2,255
8110a954:	10003c1e 	bne	r2,zero,8110aa48 <vTimeoutCheckerTask+0x7c0>
                        OSMutexPend(xMutexBuffer64, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110a958:	d0a05917 	ldw	r2,-32412(gp)
8110a95c:	e0fffac4 	addi	r3,fp,-21
8110a960:	180d883a 	mov	r6,r3
8110a964:	01400044 	movi	r5,1
8110a968:	1009883a 	mov	r4,r2
8110a96c:	112b1e00 	call	8112b1e0 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110a970:	e0bffac3 	ldbu	r2,-21(fp)
8110a974:	10803fcc 	andi	r2,r2,255
8110a978:	1000321e 	bne	r2,zero,8110aa44 <vTimeoutCheckerTask+0x7bc>
                            k = 0;
8110a97c:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB64[k];
8110a980:	e0bffa83 	ldbu	r2,-22(fp)
8110a984:	e0fffd04 	addi	r3,fp,-12
8110a988:	1885883a 	add	r2,r3,r2
8110a98c:	10800003 	ldbu	r2,0(r2)
8110a990:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer64[i].ucNofRetries--;
8110a994:	e0fffa43 	ldbu	r3,-23(fp)
8110a998:	00a04534 	movhi	r2,33044
8110a99c:	10842c04 	addi	r2,r2,4272
8110a9a0:	190011a4 	muli	r4,r3,70
8110a9a4:	1105883a 	add	r2,r2,r4
8110a9a8:	10801104 	addi	r2,r2,68
8110a9ac:	10800003 	ldbu	r2,0(r2)
8110a9b0:	10bfffc4 	addi	r2,r2,-1
8110a9b4:	1009883a 	mov	r4,r2
8110a9b8:	00a04534 	movhi	r2,33044
8110a9bc:	10842c04 	addi	r2,r2,4272
8110a9c0:	18c011a4 	muli	r3,r3,70
8110a9c4:	10c5883a 	add	r2,r2,r3
8110a9c8:	10801104 	addi	r2,r2,68
8110a9cc:	11000005 	stb	r4,0(r2)
                                xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
8110a9d0:	e0fffa43 	ldbu	r3,-23(fp)
8110a9d4:	00a04534 	movhi	r2,33044
8110a9d8:	10842c04 	addi	r2,r2,4272
8110a9dc:	18c011a4 	muli	r3,r3,70
8110a9e0:	10c5883a 	add	r2,r2,r3
8110a9e4:	10801084 	addi	r2,r2,66
8110a9e8:	00c00104 	movi	r3,4
8110a9ec:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer64[i].buffer);                                
8110a9f0:	e0bffa43 	ldbu	r2,-23(fp)
8110a9f4:	10c011a4 	muli	r3,r2,70
8110a9f8:	00a04534 	movhi	r2,33044
8110a9fc:	10842c04 	addi	r2,r2,4272
8110aa00:	1885883a 	add	r2,r3,r2
8110aa04:	1009883a 	mov	r4,r2
8110aa08:	11112cc0 	call	811112cc <puts>
                                k++;
8110aa0c:	e0bffa83 	ldbu	r2,-22(fp)
8110aa10:	10800044 	addi	r2,r2,1
8110aa14:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB64[k] != 255 );
8110aa18:	e0bffa83 	ldbu	r2,-22(fp)
8110aa1c:	e0fffd04 	addi	r3,fp,-12
8110aa20:	1885883a 	add	r2,r3,r2
8110aa24:	10800003 	ldbu	r2,0(r2)
8110aa28:	10803fcc 	andi	r2,r2,255
8110aa2c:	10803fd8 	cmpnei	r2,r2,255
8110aa30:	103fd31e 	bne	r2,zero,8110a980 <__reset+0xfb0ea980>

                            OSMutexPost(xMutexBuffer64);
8110aa34:	d0a05917 	ldw	r2,-32412(gp)
8110aa38:	1009883a 	mov	r4,r2
8110aa3c:	112b7840 	call	8112b784 <OSMutexPost>
8110aa40:	00000106 	br	8110aa48 <vTimeoutCheckerTask+0x7c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB64TimeoutTask();
8110aa44:	110d42c0 	call	8110d42c <vCouldNotRetransmitB64TimeoutTask>
                        }    
                    }

                    if ( ucRetransB128[0] != 255 ) {
8110aa48:	e0bffe03 	ldbu	r2,-8(fp)
8110aa4c:	10803fcc 	andi	r2,r2,255
8110aa50:	10803fe0 	cmpeqi	r2,r2,255
8110aa54:	10003c1e 	bne	r2,zero,8110ab48 <vTimeoutCheckerTask+0x8c0>
                        OSMutexPend(xMutexBuffer128, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110aa58:	d0a05717 	ldw	r2,-32420(gp)
8110aa5c:	e0fffac4 	addi	r3,fp,-21
8110aa60:	180d883a 	mov	r6,r3
8110aa64:	01400044 	movi	r5,1
8110aa68:	1009883a 	mov	r4,r2
8110aa6c:	112b1e00 	call	8112b1e0 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110aa70:	e0bffac3 	ldbu	r2,-21(fp)
8110aa74:	10803fcc 	andi	r2,r2,255
8110aa78:	1000321e 	bne	r2,zero,8110ab44 <vTimeoutCheckerTask+0x8bc>
                            k = 0;
8110aa7c:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB128[k];
8110aa80:	e0bffa83 	ldbu	r2,-22(fp)
8110aa84:	e0fffe04 	addi	r3,fp,-8
8110aa88:	1885883a 	add	r2,r3,r2
8110aa8c:	10800003 	ldbu	r2,0(r2)
8110aa90:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer128[i].ucNofRetries--;
8110aa94:	e0fffa43 	ldbu	r3,-23(fp)
8110aa98:	00a04574 	movhi	r2,33045
8110aa9c:	10add504 	addi	r2,r2,-18604
8110aaa0:	190021a4 	muli	r4,r3,134
8110aaa4:	1105883a 	add	r2,r2,r4
8110aaa8:	10802104 	addi	r2,r2,132
8110aaac:	10800003 	ldbu	r2,0(r2)
8110aab0:	10bfffc4 	addi	r2,r2,-1
8110aab4:	1009883a 	mov	r4,r2
8110aab8:	00a04574 	movhi	r2,33045
8110aabc:	10add504 	addi	r2,r2,-18604
8110aac0:	18c021a4 	muli	r3,r3,134
8110aac4:	10c5883a 	add	r2,r2,r3
8110aac8:	10802104 	addi	r2,r2,132
8110aacc:	11000005 	stb	r4,0(r2)
                                xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110aad0:	e0fffa43 	ldbu	r3,-23(fp)
8110aad4:	00a04574 	movhi	r2,33045
8110aad8:	10add504 	addi	r2,r2,-18604
8110aadc:	18c021a4 	muli	r3,r3,134
8110aae0:	10c5883a 	add	r2,r2,r3
8110aae4:	10802084 	addi	r2,r2,130
8110aae8:	00c00104 	movi	r3,4
8110aaec:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer128[i].buffer);                                
8110aaf0:	e0bffa43 	ldbu	r2,-23(fp)
8110aaf4:	10c021a4 	muli	r3,r2,134
8110aaf8:	00a04574 	movhi	r2,33045
8110aafc:	10add504 	addi	r2,r2,-18604
8110ab00:	1885883a 	add	r2,r3,r2
8110ab04:	1009883a 	mov	r4,r2
8110ab08:	11112cc0 	call	811112cc <puts>
                                k++;
8110ab0c:	e0bffa83 	ldbu	r2,-22(fp)
8110ab10:	10800044 	addi	r2,r2,1
8110ab14:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB128[k] != 255 );
8110ab18:	e0bffa83 	ldbu	r2,-22(fp)
8110ab1c:	e0fffe04 	addi	r3,fp,-8
8110ab20:	1885883a 	add	r2,r3,r2
8110ab24:	10800003 	ldbu	r2,0(r2)
8110ab28:	10803fcc 	andi	r2,r2,255
8110ab2c:	10803fd8 	cmpnei	r2,r2,255
8110ab30:	103fd31e 	bne	r2,zero,8110aa80 <__reset+0xfb0eaa80>

                            OSMutexPost(xMutexBuffer128);
8110ab34:	d0a05717 	ldw	r2,-32420(gp)
8110ab38:	1009883a 	mov	r4,r2
8110ab3c:	112b7840 	call	8112b784 <OSMutexPost>
8110ab40:	00000106 	br	8110ab48 <vTimeoutCheckerTask+0x8c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB128TimeoutTask();
8110ab44:	110d4940 	call	8110d494 <vCouldNotRetransmitB128TimeoutTask>
                        }
                    }                    
                    OSMutexPost(xTxUARTMutex);
8110ab48:	d0a05b17 	ldw	r2,-32404(gp)
8110ab4c:	1009883a 	mov	r4,r2
8110ab50:	112b7840 	call	8112b784 <OSMutexPost>
8110ab54:	003de006 	br	8110a2d8 <__reset+0xfb0ea2d8>
                } else {
                    /*  Couldn't get access to the UART tx buffer, there is no big impact to the system. So next cycle it may be transmited.
                        This is not a reason to exit the execution of all Simucam.*/
                    vFailCouldNotRetransmitTimeoutTask();
8110ab58:	110d35c0 	call	8110d35c <vFailCouldNotRetransmitTimeoutTask>
8110ab5c:	003dde06 	br	8110a2d8 <__reset+0xfb0ea2d8>
                }
            }

        } else {
            /* Should not get here, is a blocking semaphore for sync.*/
            vFailGetBlockingSemTimeoutTask();
8110ab60:	110d28c0 	call	8110d28c <vFailGetBlockingSemTimeoutTask>
        }
    }
8110ab64:	003ddc06 	br	8110a2d8 <__reset+0xfb0ea2d8>

8110ab68 <bResourcesInitRTOS>:
 */
TSimucam_MEB xSimMebStruct;

/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void )
{
8110ab68:	defff904 	addi	sp,sp,-28
8110ab6c:	de00012e 	bgeu	sp,et,8110ab74 <bResourcesInitRTOS+0xc>
8110ab70:	003b68fa 	trap	3
8110ab74:	dfc00615 	stw	ra,24(sp)
8110ab78:	df000515 	stw	fp,20(sp)
8110ab7c:	df000504 	addi	fp,sp,20
	bool bSuccess = TRUE;
8110ab80:	00800044 	movi	r2,1
8110ab84:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
8110ab88:	0009883a 	mov	r4,zero
8110ab8c:	112cec40 	call	8112cec4 <OSSemCreate>
8110ab90:	d0a04b15 	stw	r2,-32468(gp)
	if (!xSemCommInit) {
8110ab94:	d0a04b17 	ldw	r2,-32468(gp)
8110ab98:	1000021e 	bne	r2,zero,8110aba4 <bResourcesInitRTOS+0x3c>
		vFailCreateSemaphoreResources();
8110ab9c:	110c67c0 	call	8110c67c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110aba0:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
8110aba4:	e0bfff04 	addi	r2,fp,-4
8110aba8:	100b883a 	mov	r5,r2
8110abac:	010000c4 	movi	r4,3
8110abb0:	112ad0c0 	call	8112ad0c <OSMutexCreate>
8110abb4:	d0a05b15 	stw	r2,-32404(gp)
	if ( err != OS_ERR_NONE ) {
8110abb8:	e0bfff03 	ldbu	r2,-4(fp)
8110abbc:	10803fcc 	andi	r2,r2,255
8110abc0:	10000526 	beq	r2,zero,8110abd8 <bResourcesInitRTOS+0x70>
		vFailCreateMutexSResources(err);
8110abc4:	e0bfff03 	ldbu	r2,-4(fp)
8110abc8:	10803fcc 	andi	r2,r2,255
8110abcc:	1009883a 	mov	r4,r2
8110abd0:	110c61c0 	call	8110c61c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110abd4:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
8110abd8:	e0bfff04 	addi	r2,fp,-4
8110abdc:	100b883a 	mov	r5,r2
8110abe0:	01000184 	movi	r4,6
8110abe4:	112ad0c0 	call	8112ad0c <OSMutexCreate>
8110abe8:	d0a05715 	stw	r2,-32420(gp)
	if ( err != OS_ERR_NONE ) {
8110abec:	e0bfff03 	ldbu	r2,-4(fp)
8110abf0:	10803fcc 	andi	r2,r2,255
8110abf4:	10000526 	beq	r2,zero,8110ac0c <bResourcesInitRTOS+0xa4>
		vFailCreateMutexSResources(err);
8110abf8:	e0bfff03 	ldbu	r2,-4(fp)
8110abfc:	10803fcc 	andi	r2,r2,255
8110ac00:	1009883a 	mov	r4,r2
8110ac04:	110c61c0 	call	8110c61c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ac08:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
8110ac0c:	e0bfff04 	addi	r2,fp,-4
8110ac10:	100b883a 	mov	r5,r2
8110ac14:	010001c4 	movi	r4,7
8110ac18:	112ad0c0 	call	8112ad0c <OSMutexCreate>
8110ac1c:	d0a05915 	stw	r2,-32412(gp)
	if ( err != OS_ERR_NONE ) {
8110ac20:	e0bfff03 	ldbu	r2,-4(fp)
8110ac24:	10803fcc 	andi	r2,r2,255
8110ac28:	10000526 	beq	r2,zero,8110ac40 <bResourcesInitRTOS+0xd8>
		vFailCreateMutexSResources(err);
8110ac2c:	e0bfff03 	ldbu	r2,-4(fp)
8110ac30:	10803fcc 	andi	r2,r2,255
8110ac34:	1009883a 	mov	r4,r2
8110ac38:	110c61c0 	call	8110c61c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ac3c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
8110ac40:	e0bfff04 	addi	r2,fp,-4
8110ac44:	100b883a 	mov	r5,r2
8110ac48:	01000204 	movi	r4,8
8110ac4c:	112ad0c0 	call	8112ad0c <OSMutexCreate>
8110ac50:	d0a05515 	stw	r2,-32428(gp)
	if ( err != OS_ERR_NONE ) {
8110ac54:	e0bfff03 	ldbu	r2,-4(fp)
8110ac58:	10803fcc 	andi	r2,r2,255
8110ac5c:	10000526 	beq	r2,zero,8110ac74 <bResourcesInitRTOS+0x10c>
		vFailCreateMutexSResources(err);
8110ac60:	e0bfff03 	ldbu	r2,-4(fp)
8110ac64:	10803fcc 	andi	r2,r2,255
8110ac68:	1009883a 	mov	r4,r2
8110ac6c:	110c61c0 	call	8110c61c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ac70:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	xSemCountBuffer128 = OSSemCreate(N_128);
8110ac74:	01000084 	movi	r4,2
8110ac78:	112cec40 	call	8112cec4 <OSSemCreate>
8110ac7c:	d0a04e15 	stw	r2,-32456(gp)
	if (!xSemCountBuffer128) {
8110ac80:	d0a04e17 	ldw	r2,-32456(gp)
8110ac84:	1000021e 	bne	r2,zero,8110ac90 <bResourcesInitRTOS+0x128>
		vFailCreateSemaphoreResources();
8110ac88:	110c67c0 	call	8110c67c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ac8c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	xSemCountBuffer64 = OSSemCreate(N_64);
8110ac90:	01000104 	movi	r4,4
8110ac94:	112cec40 	call	8112cec4 <OSSemCreate>
8110ac98:	d0a04a15 	stw	r2,-32472(gp)
	if (!xSemCountBuffer64) {
8110ac9c:	d0a04a17 	ldw	r2,-32472(gp)
8110aca0:	1000021e 	bne	r2,zero,8110acac <bResourcesInitRTOS+0x144>
		vFailCreateSemaphoreResources();
8110aca4:	110c67c0 	call	8110c67c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110aca8:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	xSemCountBuffer32 = OSSemCreate(N_32);
8110acac:	01000204 	movi	r4,8
8110acb0:	112cec40 	call	8112cec4 <OSSemCreate>
8110acb4:	d0a05815 	stw	r2,-32416(gp)
	if (!xSemCountBuffer32) {
8110acb8:	d0a05817 	ldw	r2,-32416(gp)
8110acbc:	1000021e 	bne	r2,zero,8110acc8 <bResourcesInitRTOS+0x160>
		vFailCreateSemaphoreResources();
8110acc0:	110c67c0 	call	8110c67c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110acc4:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
8110acc8:	e0bfff04 	addi	r2,fp,-4
8110accc:	100b883a 	mov	r5,r2
8110acd0:	01000144 	movi	r4,5
8110acd4:	112ad0c0 	call	8112ad0c <OSMutexCreate>
8110acd8:	d0a05015 	stw	r2,-32448(gp)
	if ( err != OS_ERR_NONE ) {
8110acdc:	e0bfff03 	ldbu	r2,-4(fp)
8110ace0:	10803fcc 	andi	r2,r2,255
8110ace4:	10000526 	beq	r2,zero,8110acfc <bResourcesInitRTOS+0x194>
		vFailCreateMutexSResources(err);
8110ace8:	e0bfff03 	ldbu	r2,-4(fp)
8110acec:	10803fcc 	andi	r2,r2,255
8110acf0:	1009883a 	mov	r4,r2
8110acf4:	110c61c0 	call	8110c61c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110acf8:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
8110acfc:	e0bfff04 	addi	r2,fp,-4
8110ad00:	100b883a 	mov	r5,r2
8110ad04:	01000244 	movi	r4,9
8110ad08:	112ad0c0 	call	8112ad0c <OSMutexCreate>
8110ad0c:	d0a05415 	stw	r2,-32432(gp)
	if ( err != OS_ERR_NONE ) {
8110ad10:	e0bfff03 	ldbu	r2,-4(fp)
8110ad14:	10803fcc 	andi	r2,r2,255
8110ad18:	10000526 	beq	r2,zero,8110ad30 <bResourcesInitRTOS+0x1c8>
		vFailCreateMutexSResources(err);
8110ad1c:	e0bfff03 	ldbu	r2,-4(fp)
8110ad20:	10803fcc 	andi	r2,r2,255
8110ad24:	1009883a 	mov	r4,r2
8110ad28:	110c61c0 	call	8110c61c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ad2c:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
8110ad30:	0009883a 	mov	r4,zero
8110ad34:	112cec40 	call	8112cec4 <OSSemCreate>
8110ad38:	d0a05115 	stw	r2,-32444(gp)
	if (!xSemCountReceivedACK) {
8110ad3c:	d0a05117 	ldw	r2,-32444(gp)
8110ad40:	1000021e 	bne	r2,zero,8110ad4c <bResourcesInitRTOS+0x1e4>
		vFailCreateSemaphoreResources();
8110ad44:	110c67c0 	call	8110c67c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ad48:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
8110ad4c:	0009883a 	mov	r4,zero
8110ad50:	112cec40 	call	8112cec4 <OSSemCreate>
8110ad54:	d0a04f15 	stw	r2,-32452(gp)
	if (!xSemCountPreParsed) {
8110ad58:	d0a04f17 	ldw	r2,-32452(gp)
8110ad5c:	1000021e 	bne	r2,zero,8110ad68 <bResourcesInitRTOS+0x200>
		vFailCreateSemaphoreResources();
8110ad60:	110c67c0 	call	8110c67c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ad64:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/
	xSemCountSenderACK = OSSemCreate(0);
8110ad68:	0009883a 	mov	r4,zero
8110ad6c:	112cec40 	call	8112cec4 <OSSemCreate>
8110ad70:	d0a04c15 	stw	r2,-32464(gp)
	if (!xSemCountSenderACK) {
8110ad74:	d0a04c17 	ldw	r2,-32464(gp)
8110ad78:	1000021e 	bne	r2,zero,8110ad84 <bResourcesInitRTOS+0x21c>
		vFailCreateSemaphoreResources();
8110ad7c:	110c67c0 	call	8110c67c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ad80:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
8110ad84:	e0bfff04 	addi	r2,fp,-4
8110ad88:	100b883a 	mov	r5,r2
8110ad8c:	01000104 	movi	r4,4
8110ad90:	112ad0c0 	call	8112ad0c <OSMutexCreate>
8110ad94:	d0a05a15 	stw	r2,-32408(gp)
	if ( err != OS_ERR_NONE ) {
8110ad98:	e0bfff03 	ldbu	r2,-4(fp)
8110ad9c:	10803fcc 	andi	r2,r2,255
8110ada0:	10000526 	beq	r2,zero,8110adb8 <bResourcesInitRTOS+0x250>
		vFailCreateMutexSResources(err);
8110ada4:	e0bfff03 	ldbu	r2,-4(fp)
8110ada8:	10803fcc 	andi	r2,r2,255
8110adac:	1009883a 	mov	r4,r2
8110adb0:	110c61c0 	call	8110c61c <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110adb4:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemTimeoutChecker = OSSemCreate(0);
8110adb8:	0009883a 	mov	r4,zero
8110adbc:	112cec40 	call	8112cec4 <OSSemCreate>
8110adc0:	d0a05215 	stw	r2,-32440(gp)
	if (!xSemTimeoutChecker) {
8110adc4:	d0a05217 	ldw	r2,-32440(gp)
8110adc8:	1000021e 	bne	r2,zero,8110add4 <bResourcesInitRTOS+0x26c>
		vFailCreateSemaphoreResources();
8110adcc:	110c67c0 	call	8110c67c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110add0:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Create the timer that will be used to count the timeout for the retransmission*/
	xTimerRetransmission = OSTmrCreate(	(INT32U         )DLY_TIMER,  /* 200 ticks = 200 millisec */
8110add4:	e0bfff04 	addi	r2,fp,-4
8110add8:	d8800215 	stw	r2,8(sp)
8110addc:	00a04534 	movhi	r2,33044
8110ade0:	10abec04 	addi	r2,r2,-20560
8110ade4:	d8800115 	stw	r2,4(sp)
8110ade8:	d8000015 	stw	zero,0(sp)
8110adec:	01e04474 	movhi	r7,33041
8110adf0:	39ede804 	addi	r7,r7,-18528
8110adf4:	01800084 	movi	r6,2
8110adf8:	01400144 	movi	r5,5
8110adfc:	01003204 	movi	r4,200
8110ae00:	112f5900 	call	8112f590 <OSTmrCreate>
8110ae04:	d0a05615 	stw	r2,-32424(gp)
										(INT8U          )OS_TMR_OPT_PERIODIC,
										(OS_TMR_CALLBACK)vTimeoutCheck,
										(void          *)0,
										(INT8U         *)"timer timeout",
										(INT8U         *)&err);	
	if ( err != OS_ERR_NONE ) {
8110ae08:	e0bfff03 	ldbu	r2,-4(fp)
8110ae0c:	10803fcc 	andi	r2,r2,255
8110ae10:	10000226 	beq	r2,zero,8110ae1c <bResourcesInitRTOS+0x2b4>
		vFailCreateTimerRetransmisison();
8110ae14:	110d1a80 	call	8110d1a8 <vFailCreateTimerRetransmisison>
		bSuccess = FALSE;
8110ae18:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
8110ae1c:	e0bffe17 	ldw	r2,-8(fp)
}
8110ae20:	e037883a 	mov	sp,fp
8110ae24:	dfc00117 	ldw	ra,4(sp)
8110ae28:	df000017 	ldw	fp,0(sp)
8110ae2c:	dec00204 	addi	sp,sp,8
8110ae30:	f800283a 	ret

8110ae34 <vVariablesInitialization>:

void vVariablesInitialization ( void ) {
8110ae34:	deffff04 	addi	sp,sp,-4
8110ae38:	de00012e 	bgeu	sp,et,8110ae40 <vVariablesInitialization+0xc>
8110ae3c:	003b68fa 	trap	3
8110ae40:	df000015 	stw	fp,0(sp)
8110ae44:	d839883a 	mov	fp,sp
	usiIdCMD = 1;
8110ae48:	00800044 	movi	r2,1
8110ae4c:	d0a0530d 	sth	r2,-32436(gp)
}
8110ae50:	0001883a 	nop
8110ae54:	e037883a 	mov	sp,fp
8110ae58:	df000017 	ldw	fp,0(sp)
8110ae5c:	dec00104 	addi	sp,sp,4
8110ae60:	f800283a 	ret

8110ae64 <main>:



/* Entry point */
int main(void)
{
8110ae64:	defff704 	addi	sp,sp,-36
8110ae68:	de00012e 	bgeu	sp,et,8110ae70 <main+0xc>
8110ae6c:	003b68fa 	trap	3
8110ae70:	dfc00815 	stw	ra,32(sp)
8110ae74:	df000715 	stw	fp,28(sp)
8110ae78:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
8110ae7c:	e03ffe15 	stw	zero,-8(fp)
	
	/* Clear the RTOS timer */
	OSTimeSet(0);
8110ae80:	0009883a 	mov	r4,zero
8110ae84:	112f5280 	call	8112f528 <OSTimeSet>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
8110ae88:	01604534 	movhi	r5,33044
8110ae8c:	296bf004 	addi	r5,r5,-20544
8110ae90:	01204534 	movhi	r4,33044
8110ae94:	212bf104 	addi	r4,r4,-20540
8110ae98:	110fe600 	call	8110fe60 <fopen>
8110ae9c:	d0a04d15 	stw	r2,-32460(gp)
	#endif	

	#ifdef DEBUG_ON
		debug(fp, "Main entry point.\n");
8110aea0:	d0a04d17 	ldw	r2,-32460(gp)
8110aea4:	100f883a 	mov	r7,r2
8110aea8:	01800484 	movi	r6,18
8110aeac:	01400044 	movi	r5,1
8110aeb0:	01204534 	movhi	r4,33044
8110aeb4:	212bf604 	addi	r4,r4,-20520
8110aeb8:	11104940 	call	81110494 <fwrite>
	#endif


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
8110aebc:	110dbb40 	call	8110dbb4 <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
8110aec0:	110e4140 	call	8110e414 <bTestSimucamCriticalHW>
8110aec4:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110aec8:	e0bffe17 	ldw	r2,-8(fp)
8110aecc:	1000031e 	bne	r2,zero,8110aedc <main+0x78>
		vFailTestCriticasParts();
8110aed0:	110c6c80 	call	8110c6c8 <vFailTestCriticasParts>
		return -1;
8110aed4:	00bfffc4 	movi	r2,-1
8110aed8:	00003d06 	br	8110afd0 <main+0x16c>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
8110aedc:	110e2600 	call	8110e260 <bInitializeSDCard>
8110aee0:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110aee4:	e0bffe17 	ldw	r2,-8(fp)
8110aee8:	1000031e 	bne	r2,zero,8110aef8 <main+0x94>
		vFailTestCriticasParts();
8110aeec:	110c6c80 	call	8110c6c8 <vFailTestCriticasParts>
		return -1;
8110aef0:	00bfffc4 	movi	r2,-1
8110aef4:	00003606 	br	8110afd0 <main+0x16c>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
8110aef8:	110b7f00 	call	8110b7f0 <vLoadDefaultETHConf>
8110aefc:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110af00:	e0bffe17 	ldw	r2,-8(fp)
8110af04:	1000091e 	bne	r2,zero,8110af2c <main+0xc8>
		/* Default configuration for eth connection loaded */
		#ifdef DEBUG_ON
			debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
8110af08:	d0a04d17 	ldw	r2,-32460(gp)
8110af0c:	100f883a 	mov	r7,r2
8110af10:	01801644 	movi	r6,89
8110af14:	01400044 	movi	r5,1
8110af18:	01204534 	movhi	r4,33044
8110af1c:	212bfb04 	addi	r4,r4,-20500
8110af20:	11104940 	call	81110494 <fwrite>
		#endif
		return -1;
8110af24:	00bfffc4 	movi	r2,-1
8110af28:	00002906 	br	8110afd0 <main+0x16c>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
8110af2c:	110c17c0 	call	8110c17c <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
8110af30:	110ab680 	call	8110ab68 <bResourcesInitRTOS>
8110af34:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110af38:	e0bffe17 	ldw	r2,-8(fp)
8110af3c:	1000091e 	bne	r2,zero,8110af64 <main+0x100>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't allocate resources for RTOS. (exit) \n");
8110af40:	d0a04d17 	ldw	r2,-32460(gp)
8110af44:	100f883a 	mov	r7,r2
8110af48:	01800ac4 	movi	r6,43
8110af4c:	01400044 	movi	r5,1
8110af50:	01204534 	movhi	r4,33044
8110af54:	212c1204 	addi	r4,r4,-20408
8110af58:	11104940 	call	81110494 <fwrite>
		return -1;
8110af5c:	00bfffc4 	movi	r2,-1
8110af60:	00001b06 	br	8110afd0 <main+0x16c>
	}

	/* Start the structure of control of the Simucam Application, including all FEEs instances */
	vSimucamStructureInit( &xSimMebStruct );
8110af64:	01204534 	movhi	r4,33044
8110af68:	210c7204 	addi	r4,r4,12744
8110af6c:	110dc780 	call	8110dc78 <vSimucamStructureInit>

	/* Creating the initialization task*/
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInitialTask,
8110af70:	00800104 	movi	r2,4
8110af74:	d8800415 	stw	r2,16(sp)
8110af78:	d8000315 	stw	zero,12(sp)
8110af7c:	00820004 	movi	r2,2048
8110af80:	d8800215 	stw	r2,8(sp)
8110af84:	00a04574 	movhi	r2,33045
8110af88:	10a5d504 	addi	r2,r2,-26796
8110af8c:	d8800115 	stw	r2,4(sp)
8110af90:	00800044 	movi	r2,1
8110af94:	d8800015 	stw	r2,0(sp)
8110af98:	01c00044 	movi	r7,1
8110af9c:	01a04574 	movhi	r6,33045
8110afa0:	31add404 	addi	r6,r6,-18608
8110afa4:	000b883a 	mov	r5,zero
8110afa8:	01204474 	movhi	r4,33041
8110afac:	21230604 	addi	r4,r4,-29672
8110afb0:	112df580 	call	8112df58 <OSTaskCreateExt>
8110afb4:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
8110afb8:	e0bfff03 	ldbu	r2,-4(fp)
8110afbc:	1000021e 	bne	r2,zero,8110afc8 <main+0x164>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
8110afc0:	11274d80 	call	811274d8 <OSStart>
8110afc4:	00000106 	br	8110afcc <main+0x168>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
8110afc8:	110cab40 	call	8110cab4 <vFailInitialization>
	}
  
	return 0;
8110afcc:	0005883a 	mov	r2,zero
}
8110afd0:	e037883a 	mov	sp,fp
8110afd4:	dfc00117 	ldw	ra,4(sp)
8110afd8:	df000017 	ldw	fp,0(sp)
8110afdc:	dec00204 	addi	sp,sp,8
8110afe0:	f800283a 	ret

8110afe4 <vCCDLoadDefaultValues>:
 */

#include "ccd.h"


void vCCDLoadDefaultValues( TCcdInfos *ccdDef ) {
8110afe4:	defffe04 	addi	sp,sp,-8
8110afe8:	de00012e 	bgeu	sp,et,8110aff0 <vCCDLoadDefaultValues+0xc>
8110afec:	003b68fa 	trap	3
8110aff0:	df000115 	stw	fp,4(sp)
8110aff4:	df000104 	addi	fp,sp,4
8110aff8:	e13fff15 	stw	r4,-4(fp)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadCcdDefsSDCard();

	ccdDef->usiHeight = 4510;
8110affc:	e0bfff17 	ldw	r2,-4(fp)
8110b000:	00c46784 	movi	r3,4510
8110b004:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = 30;
8110b008:	e0bfff17 	ldw	r2,-4(fp)
8110b00c:	00c00784 	movi	r3,30
8110b010:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = 2255;
8110b014:	e0bfff17 	ldw	r2,-4(fp)
8110b018:	00c233c4 	movi	r3,2255
8110b01c:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = 15;
8110b020:	e0bfff17 	ldw	r2,-4(fp)
8110b024:	00c003c4 	movi	r3,15
8110b028:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = 25;
8110b02c:	e0bfff17 	ldw	r2,-4(fp)
8110b030:	00c00644 	movi	r3,25
8110b034:	10c0000d 	sth	r3,0(r2)
}
8110b038:	0001883a 	nop
8110b03c:	e037883a 	mov	sp,fp
8110b040:	df000017 	ldw	fp,0(sp)
8110b044:	dec00104 	addi	sp,sp,4
8110b048:	f800283a 	ret

8110b04c <vCCDChangeValues>:

/* Only in NFEE_CONFIG of NFEE_STAND_BY */
/* Used to change de values of the CCD definitions from any source */
void vCCDChangeValues( TCcdInfos *ccdDef, unsigned short int usiHeight, unsigned short int usiOLN, unsigned short int usiHalfWidth,
                                unsigned short int usiSOverscanN, unsigned short int usiSPrescanN  ) {
8110b04c:	defff904 	addi	sp,sp,-28
8110b050:	de00012e 	bgeu	sp,et,8110b058 <vCCDChangeValues+0xc>
8110b054:	003b68fa 	trap	3
8110b058:	df000615 	stw	fp,24(sp)
8110b05c:	df000604 	addi	fp,sp,24
8110b060:	e13ffa15 	stw	r4,-24(fp)
8110b064:	2811883a 	mov	r8,r5
8110b068:	300b883a 	mov	r5,r6
8110b06c:	3809883a 	mov	r4,r7
8110b070:	e0c00117 	ldw	r3,4(fp)
8110b074:	e0800217 	ldw	r2,8(fp)
8110b078:	e23ffb0d 	sth	r8,-20(fp)
8110b07c:	e17ffc0d 	sth	r5,-16(fp)
8110b080:	e13ffd0d 	sth	r4,-12(fp)
8110b084:	e0fffe0d 	sth	r3,-8(fp)
8110b088:	e0bfff0d 	sth	r2,-4(fp)

	ccdDef->usiHeight = usiHeight;
8110b08c:	e0bffa17 	ldw	r2,-24(fp)
8110b090:	e0fffb0b 	ldhu	r3,-20(fp)
8110b094:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = usiOLN;
8110b098:	e0bffa17 	ldw	r2,-24(fp)
8110b09c:	e0fffc0b 	ldhu	r3,-16(fp)
8110b0a0:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = usiHalfWidth;
8110b0a4:	e0bffa17 	ldw	r2,-24(fp)
8110b0a8:	e0fffd0b 	ldhu	r3,-12(fp)
8110b0ac:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = usiSOverscanN;
8110b0b0:	e0bffa17 	ldw	r2,-24(fp)
8110b0b4:	e0fffe0b 	ldhu	r3,-8(fp)
8110b0b8:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = usiSPrescanN;
8110b0bc:	e0bffa17 	ldw	r2,-24(fp)
8110b0c0:	e0ffff0b 	ldhu	r3,-4(fp)
8110b0c4:	10c0000d 	sth	r3,0(r2)
}
8110b0c8:	0001883a 	nop
8110b0cc:	e037883a 	mov	sp,fp
8110b0d0:	df000017 	ldw	fp,0(sp)
8110b0d4:	dec00104 	addi	sp,sp,4
8110b0d8:	f800283a 	ret

8110b0dc <bSendUART128>:




/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART128 ( char *cBuffer, short int siIdMessage ) {
8110b0dc:	deffd804 	addi	sp,sp,-160
8110b0e0:	de00012e 	bgeu	sp,et,8110b0e8 <bSendUART128+0xc>
8110b0e4:	003b68fa 	trap	3
8110b0e8:	dfc02715 	stw	ra,156(sp)
8110b0ec:	df002615 	stw	fp,152(sp)
8110b0f0:	df002604 	addi	fp,sp,152
8110b0f4:	e13ffe15 	stw	r4,-8(fp)
8110b0f8:	2805883a 	mov	r2,r5
8110b0fc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110b100:	e03fda05 	stb	zero,-152(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110b104:	e03fda45 	stb	zero,-151(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110b108:	e03fda85 	stb	zero,-150(fp)
	unsigned char i = 0;
8110b10c:	e03fdac5 	stb	zero,-149(fp)
	bool bSuccess = FALSE;
8110b110:	e03fdb15 	stw	zero,-148(fp)
	char cLocalBuffer128[128];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer128, cBuffer, 128);
8110b114:	e0fffe17 	ldw	r3,-8(fp)
8110b118:	e0bfdd44 	addi	r2,fp,-139
8110b11c:	1809883a 	mov	r4,r3
8110b120:	00c02004 	movi	r3,128
8110b124:	180d883a 	mov	r6,r3
8110b128:	200b883a 	mov	r5,r4
8110b12c:	1009883a 	mov	r4,r2
8110b130:	1110ea80 	call	81110ea8 <memcpy>
	bSuccess = FALSE;
8110b134:	e03fdb15 	stw	zero,-148(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110b138:	e03fda05 	stb	zero,-152(fp)
	do
	{
		ucCountRetriesSem++;
8110b13c:	e0bfda03 	ldbu	r2,-152(fp)
8110b140:	10800044 	addi	r2,r2,1
8110b144:	e0bfda05 	stb	r2,-152(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110b148:	d0a04e17 	ldw	r2,-32456(gp)
8110b14c:	e0ffdc84 	addi	r3,fp,-142
8110b150:	180d883a 	mov	r6,r3
8110b154:	01401904 	movi	r5,100
8110b158:	1009883a 	mov	r4,r2
8110b15c:	112d1ec0 	call	8112d1ec <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110b160:	e0bfdc83 	ldbu	r2,-142(fp)
8110b164:	10803fcc 	andi	r2,r2,255
8110b168:	1000b51e 	bne	r2,zero,8110b440 <bSendUART128+0x364>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110b16c:	e03fda85 	stb	zero,-150(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110b170:	e0bfda83 	ldbu	r2,-150(fp)
8110b174:	10800044 	addi	r2,r2,1
8110b178:	e0bfda85 	stb	r2,-150(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110b17c:	d0a05b17 	ldw	r2,-32404(gp)
8110b180:	e0ffdd04 	addi	r3,fp,-140
8110b184:	180d883a 	mov	r6,r3
8110b188:	01400144 	movi	r5,5
8110b18c:	1009883a 	mov	r4,r2
8110b190:	112b1e00 	call	8112b1e0 <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110b194:	e0bfdd03 	ldbu	r2,-140(fp)
8110b198:	10803fcc 	andi	r2,r2,255
8110b19c:	1000981e 	bne	r2,zero,8110b400 <bSendUART128+0x324>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer128);
8110b1a0:	e0bfdd44 	addi	r2,fp,-139
8110b1a4:	1009883a 	mov	r4,r2
8110b1a8:	11112cc0 	call	811112cc <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110b1ac:	d0a05717 	ldw	r2,-32420(gp)
8110b1b0:	e0ffdcc4 	addi	r3,fp,-141
8110b1b4:	180b883a 	mov	r5,r3
8110b1b8:	1009883a 	mov	r4,r2
8110b1bc:	112ab600 	call	8112ab60 <OSMutexAccept>
8110b1c0:	e0bfdc05 	stb	r2,-144(fp)
					if ( ucReturnMutexRetrans != 0 ) { /* Returning zero = Mutex not available */
8110b1c4:	e0bfdc03 	ldbu	r2,-144(fp)
8110b1c8:	10003a26 	beq	r2,zero,8110b2b4 <bSendUART128+0x1d8>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
8110b1cc:	e03fdac5 	stb	zero,-149(fp)
8110b1d0:	00003206 	br	8110b29c <bSendUART128+0x1c0>
						{
							if ( xBuffer128[i].usiId == 0 ) {
8110b1d4:	e0ffdac3 	ldbu	r3,-149(fp)
8110b1d8:	00a04574 	movhi	r2,33045
8110b1dc:	10add504 	addi	r2,r2,-18604
8110b1e0:	18c021a4 	muli	r3,r3,134
8110b1e4:	10c5883a 	add	r2,r2,r3
8110b1e8:	10802004 	addi	r2,r2,128
8110b1ec:	1080000b 	ldhu	r2,0(r2)
8110b1f0:	10bfffcc 	andi	r2,r2,65535
8110b1f4:	1000261e 	bne	r2,zero,8110b290 <bSendUART128+0x1b4>
								/* Found a free place */
								bSuccess = TRUE;
8110b1f8:	00800044 	movi	r2,1
8110b1fc:	e0bfdb15 	stw	r2,-148(fp)
								memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
8110b200:	e0bfdac3 	ldbu	r2,-149(fp)
8110b204:	10c021a4 	muli	r3,r2,134
8110b208:	00a04574 	movhi	r2,33045
8110b20c:	10add504 	addi	r2,r2,-18604
8110b210:	1885883a 	add	r2,r3,r2
8110b214:	1009883a 	mov	r4,r2
8110b218:	e0bfdd44 	addi	r2,fp,-139
8110b21c:	00c02004 	movi	r3,128
8110b220:	180d883a 	mov	r6,r3
8110b224:	100b883a 	mov	r5,r2
8110b228:	1110ea80 	call	81110ea8 <memcpy>
								xBuffer128[i].usiId = siIdMessage;
8110b22c:	e13fdac3 	ldbu	r4,-149(fp)
8110b230:	e0ffff0b 	ldhu	r3,-4(fp)
8110b234:	00a04574 	movhi	r2,33045
8110b238:	10add504 	addi	r2,r2,-18604
8110b23c:	210021a4 	muli	r4,r4,134
8110b240:	1105883a 	add	r2,r2,r4
8110b244:	10802004 	addi	r2,r2,128
8110b248:	10c0000d 	sth	r3,0(r2)
								xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
8110b24c:	e0ffdac3 	ldbu	r3,-149(fp)
8110b250:	00a04574 	movhi	r2,33045
8110b254:	10add504 	addi	r2,r2,-18604
8110b258:	18c021a4 	muli	r3,r3,134
8110b25c:	10c5883a 	add	r2,r2,r3
8110b260:	10802104 	addi	r2,r2,132
8110b264:	00c000c4 	movi	r3,3
8110b268:	10c00005 	stb	r3,0(r2)
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110b26c:	e0ffdac3 	ldbu	r3,-149(fp)
8110b270:	00a04574 	movhi	r2,33045
8110b274:	10add504 	addi	r2,r2,-18604
8110b278:	18c021a4 	muli	r3,r3,134
8110b27c:	10c5883a 	add	r2,r2,r3
8110b280:	10802084 	addi	r2,r2,130
8110b284:	00c00104 	movi	r3,4
8110b288:	10c0000d 	sth	r3,0(r2)
								break;
8110b28c:	00000606 	br	8110b2a8 <bSendUART128+0x1cc>
					puts(cLocalBuffer128);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucReturnMutexRetrans != 0 ) { /* Returning zero = Mutex not available */
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
8110b290:	e0bfdac3 	ldbu	r2,-149(fp)
8110b294:	10800044 	addi	r2,r2,1
8110b298:	e0bfdac5 	stb	r2,-149(fp)
8110b29c:	e0bfdac3 	ldbu	r2,-149(fp)
8110b2a0:	108000b0 	cmpltui	r2,r2,2
8110b2a4:	103fcb1e 	bne	r2,zero,8110b1d4 <__reset+0xfb0eb1d4>
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110b2a8:	d0a05717 	ldw	r2,-32420(gp)
8110b2ac:	1009883a 	mov	r4,r2
8110b2b0:	112b7840 	call	8112b784 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110b2b4:	d0a05b17 	ldw	r2,-32404(gp)
8110b2b8:	1009883a 	mov	r4,r2
8110b2bc:	112b7840 	call	8112b784 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110b2c0:	e0bfdb17 	ldw	r2,-148(fp)
8110b2c4:	10800060 	cmpeqi	r2,r2,1
8110b2c8:	10004d1e 	bne	r2,zero,8110b400 <bSendUART128+0x324>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110b2cc:	e03fda45 	stb	zero,-151(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110b2d0:	e0bfda43 	ldbu	r2,-151(fp)
8110b2d4:	10800044 	addi	r2,r2,1
8110b2d8:	e0bfda45 	stb	r2,-151(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110b2dc:	d0a05717 	ldw	r2,-32420(gp)
8110b2e0:	e0ffdcc4 	addi	r3,fp,-141
8110b2e4:	180d883a 	mov	r6,r3
8110b2e8:	01400144 	movi	r5,5
8110b2ec:	1009883a 	mov	r4,r2
8110b2f0:	112b1e00 	call	8112b1e0 <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110b2f4:	e0bfdcc3 	ldbu	r2,-141(fp)
8110b2f8:	10803fcc 	andi	r2,r2,255
8110b2fc:	10003a1e 	bne	r2,zero,8110b3e8 <bSendUART128+0x30c>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
8110b300:	e03fdac5 	stb	zero,-149(fp)
8110b304:	00003206 	br	8110b3d0 <bSendUART128+0x2f4>
								{
									if ( xBuffer128[i].usiId == 0 ) {
8110b308:	e0ffdac3 	ldbu	r3,-149(fp)
8110b30c:	00a04574 	movhi	r2,33045
8110b310:	10add504 	addi	r2,r2,-18604
8110b314:	18c021a4 	muli	r3,r3,134
8110b318:	10c5883a 	add	r2,r2,r3
8110b31c:	10802004 	addi	r2,r2,128
8110b320:	1080000b 	ldhu	r2,0(r2)
8110b324:	10bfffcc 	andi	r2,r2,65535
8110b328:	1000261e 	bne	r2,zero,8110b3c4 <bSendUART128+0x2e8>
										/* Found a free place */
										bSuccess = TRUE;
8110b32c:	00800044 	movi	r2,1
8110b330:	e0bfdb15 	stw	r2,-148(fp)
										memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
8110b334:	e0bfdac3 	ldbu	r2,-149(fp)
8110b338:	10c021a4 	muli	r3,r2,134
8110b33c:	00a04574 	movhi	r2,33045
8110b340:	10add504 	addi	r2,r2,-18604
8110b344:	1885883a 	add	r2,r3,r2
8110b348:	1009883a 	mov	r4,r2
8110b34c:	e0bfdd44 	addi	r2,fp,-139
8110b350:	00c02004 	movi	r3,128
8110b354:	180d883a 	mov	r6,r3
8110b358:	100b883a 	mov	r5,r2
8110b35c:	1110ea80 	call	81110ea8 <memcpy>
										xBuffer128[i].usiId = siIdMessage;
8110b360:	e13fdac3 	ldbu	r4,-149(fp)
8110b364:	e0ffff0b 	ldhu	r3,-4(fp)
8110b368:	00a04574 	movhi	r2,33045
8110b36c:	10add504 	addi	r2,r2,-18604
8110b370:	210021a4 	muli	r4,r4,134
8110b374:	1105883a 	add	r2,r2,r4
8110b378:	10802004 	addi	r2,r2,128
8110b37c:	10c0000d 	sth	r3,0(r2)
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
8110b380:	e0ffdac3 	ldbu	r3,-149(fp)
8110b384:	00a04574 	movhi	r2,33045
8110b388:	10add504 	addi	r2,r2,-18604
8110b38c:	18c021a4 	muli	r3,r3,134
8110b390:	10c5883a 	add	r2,r2,r3
8110b394:	10802104 	addi	r2,r2,132
8110b398:	00c000c4 	movi	r3,3
8110b39c:	10c00005 	stb	r3,0(r2)
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110b3a0:	e0ffdac3 	ldbu	r3,-149(fp)
8110b3a4:	00a04574 	movhi	r2,33045
8110b3a8:	10add504 	addi	r2,r2,-18604
8110b3ac:	18c021a4 	muli	r3,r3,134
8110b3b0:	10c5883a 	add	r2,r2,r3
8110b3b4:	10802084 	addi	r2,r2,130
8110b3b8:	00c00104 	movi	r3,4
8110b3bc:	10c0000d 	sth	r3,0(r2)
										break;
8110b3c0:	00000606 	br	8110b3dc <bSendUART128+0x300>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
8110b3c4:	e0bfdac3 	ldbu	r2,-149(fp)
8110b3c8:	10800044 	addi	r2,r2,1
8110b3cc:	e0bfdac5 	stb	r2,-149(fp)
8110b3d0:	e0bfdac3 	ldbu	r2,-149(fp)
8110b3d4:	108000b0 	cmpltui	r2,r2,2
8110b3d8:	103fcb1e 	bne	r2,zero,8110b308 <__reset+0xfb0eb308>
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110b3dc:	d0a05717 	ldw	r2,-32420(gp)
8110b3e0:	1009883a 	mov	r4,r2
8110b3e4:	112b7840 	call	8112b784 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) || ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110b3e8:	e0bfdcc3 	ldbu	r2,-141(fp)
8110b3ec:	10803fcc 	andi	r2,r2,255
8110b3f0:	103fb71e 	bne	r2,zero,8110b2d0 <__reset+0xfb0eb2d0>
8110b3f4:	e0bfda43 	ldbu	r2,-151(fp)
8110b3f8:	10800130 	cmpltui	r2,r2,4
8110b3fc:	103fb41e 	bne	r2,zero,8110b2d0 <__reset+0xfb0eb2d0>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) || ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110b400:	e0bfdd03 	ldbu	r2,-140(fp)
8110b404:	10803fcc 	andi	r2,r2,255
8110b408:	103f591e 	bne	r2,zero,8110b170 <__reset+0xfb0eb170>
8110b40c:	e0bfda83 	ldbu	r2,-150(fp)
8110b410:	10800130 	cmpltui	r2,r2,4
8110b414:	103f561e 	bne	r2,zero,8110b170 <__reset+0xfb0eb170>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110b418:	e0bfdb17 	ldw	r2,-148(fp)
8110b41c:	10800060 	cmpeqi	r2,r2,1
8110b420:	1000071e 	bne	r2,zero,8110b440 <bSendUART128+0x364>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer128);
8110b424:	d0a04e17 	ldw	r2,-32456(gp)
8110b428:	1009883a 	mov	r4,r2
8110b42c:	112d5740 	call	8112d574 <OSSemPost>
8110b430:	e0bfdc45 	stb	r2,-143(fp)
				if ( error_code != OS_ERR_NONE ) {
8110b434:	e0bfdc43 	ldbu	r2,-143(fp)
8110b438:	10000126 	beq	r2,zero,8110b440 <bSendUART128+0x364>
					vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110b43c:	110ccb40 	call	8110ccb4 <vFailSetCountSemaphorexBuffer128>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) || ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110b440:	e0bfdc83 	ldbu	r2,-142(fp)
8110b444:	10803fcc 	andi	r2,r2,255
8110b448:	103f3c1e 	bne	r2,zero,8110b13c <__reset+0xfb0eb13c>
8110b44c:	e0bfda03 	ldbu	r2,-152(fp)
8110b450:	108001b0 	cmpltui	r2,r2,6
8110b454:	103f391e 	bne	r2,zero,8110b13c <__reset+0xfb0eb13c>

	return bSuccess;
8110b458:	e0bfdb17 	ldw	r2,-148(fp)
}
8110b45c:	e037883a 	mov	sp,fp
8110b460:	dfc00117 	ldw	ra,4(sp)
8110b464:	df000017 	ldw	fp,0(sp)
8110b468:	dec00204 	addi	sp,sp,8
8110b46c:	f800283a 	ret

8110b470 <vSendEthConf>:



void vSendEthConf ( void ) {
8110b470:	deffc304 	addi	sp,sp,-244
8110b474:	de00012e 	bgeu	sp,et,8110b47c <vSendEthConf+0xc>
8110b478:	003b68fa 	trap	3
8110b47c:	dfc03c15 	stw	ra,240(sp)
8110b480:	df003b15 	stw	fp,236(sp)
8110b484:	dd403a15 	stw	r21,232(sp)
8110b488:	dd003915 	stw	r20,228(sp)
8110b48c:	dcc03815 	stw	r19,224(sp)
8110b490:	dc803715 	stw	r18,220(sp)
8110b494:	dc403615 	stw	r17,216(sp)
8110b498:	dc003515 	stw	r16,212(sp)
8110b49c:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
8110b4a0:	e03fd98d 	sth	zero,-154(fp)
8110b4a4:	e03fda0d 	sth	zero,-152(fp)
8110b4a8:	e0bfda84 	addi	r2,fp,-150
8110b4ac:	00c01f04 	movi	r3,124
8110b4b0:	180d883a 	mov	r6,r3
8110b4b4:	000b883a 	mov	r5,zero
8110b4b8:	1009883a 	mov	r4,r2
8110b4bc:	1110ff80 	call	81110ff8 <memset>
    unsigned char crc = 0;
8110b4c0:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110b4c4:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110b4c8:	110b7000 	call	8110b700 <usiGetIdCMD>
8110b4cc:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b4d0:	e57fd90b 	ldhu	r21,-156(fp)
8110b4d4:	00a04574 	movhi	r2,33045
8110b4d8:	10b66c04 	addi	r2,r2,-9808
8110b4dc:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110b4e0:	00a04574 	movhi	r2,33045
8110b4e4:	10b66c04 	addi	r2,r2,-9808
8110b4e8:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b4ec:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110b4f0:	00a04574 	movhi	r2,33045
8110b4f4:	10b66c04 	addi	r2,r2,-9808
8110b4f8:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b4fc:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110b500:	00a04574 	movhi	r2,33045
8110b504:	10b66c04 	addi	r2,r2,-9808
8110b508:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b50c:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110b510:	00a04574 	movhi	r2,33045
8110b514:	10b66c04 	addi	r2,r2,-9808
8110b518:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b51c:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110b520:	00a04574 	movhi	r2,33045
8110b524:	10b66c04 	addi	r2,r2,-9808
8110b528:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b52c:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110b530:	00a04574 	movhi	r2,33045
8110b534:	10b66c04 	addi	r2,r2,-9808
8110b538:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b53c:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110b540:	00a04574 	movhi	r2,33045
8110b544:	10b66c04 	addi	r2,r2,-9808
8110b548:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b54c:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110b550:	00a04574 	movhi	r2,33045
8110b554:	10b66c04 	addi	r2,r2,-9808
8110b558:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b55c:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110b560:	00a04574 	movhi	r2,33045
8110b564:	10b66c04 	addi	r2,r2,-9808
8110b568:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b56c:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110b570:	00a04574 	movhi	r2,33045
8110b574:	10b66c04 	addi	r2,r2,-9808
8110b578:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b57c:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110b580:	00a04574 	movhi	r2,33045
8110b584:	10b66c04 	addi	r2,r2,-9808
8110b588:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b58c:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110b590:	00a04574 	movhi	r2,33045
8110b594:	10b66c04 	addi	r2,r2,-9808
8110b598:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b59c:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110b5a0:	00a04574 	movhi	r2,33045
8110b5a4:	10b66c04 	addi	r2,r2,-9808
8110b5a8:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b5ac:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110b5b0:	00a04574 	movhi	r2,33045
8110b5b4:	10b66c04 	addi	r2,r2,-9808
8110b5b8:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b5bc:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110b5c0:	00a04574 	movhi	r2,33045
8110b5c4:	10b66c04 	addi	r2,r2,-9808
8110b5c8:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b5cc:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110b5d0:	00a04574 	movhi	r2,33045
8110b5d4:	10b66c04 	addi	r2,r2,-9808
8110b5d8:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b5dc:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
8110b5e0:	00a04574 	movhi	r2,33045
8110b5e4:	10b66c04 	addi	r2,r2,-9808
8110b5e8:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b5ec:	10bfffcc 	andi	r2,r2,65535
8110b5f0:	e53fd984 	addi	r20,fp,-154
8110b5f4:	d8801115 	stw	r2,68(sp)
8110b5f8:	dcc01015 	stw	r19,64(sp)
8110b5fc:	dc800f15 	stw	r18,60(sp)
8110b600:	dc400e15 	stw	r17,56(sp)
8110b604:	dc000d15 	stw	r16,52(sp)
8110b608:	dbc00c15 	stw	r15,48(sp)
8110b60c:	db800b15 	stw	r14,44(sp)
8110b610:	db400a15 	stw	r13,40(sp)
8110b614:	db000915 	stw	r12,36(sp)
8110b618:	dac00815 	stw	r11,32(sp)
8110b61c:	da800715 	stw	r10,28(sp)
8110b620:	da400615 	stw	r9,24(sp)
8110b624:	da000515 	stw	r8,20(sp)
8110b628:	d9c00415 	stw	r7,16(sp)
8110b62c:	d9800315 	stw	r6,12(sp)
8110b630:	d9400215 	stw	r5,8(sp)
8110b634:	d9000115 	stw	r4,4(sp)
8110b638:	d8c00015 	stw	r3,0(sp)
8110b63c:	a80f883a 	mov	r7,r21
8110b640:	018010c4 	movi	r6,67
8110b644:	01604534 	movhi	r5,33044
8110b648:	296c1d04 	addi	r5,r5,-20364
8110b64c:	a009883a 	mov	r4,r20
8110b650:	11116100 	call	81111610 <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
8110b654:	e0bfd984 	addi	r2,fp,-154
8110b658:	1009883a 	mov	r4,r2
8110b65c:	11118240 	call	81111824 <strlen>
8110b660:	1007883a 	mov	r3,r2
8110b664:	e0bfd984 	addi	r2,fp,-154
8110b668:	180b883a 	mov	r5,r3
8110b66c:	1009883a 	mov	r4,r2
8110b670:	110c5500 	call	8110c550 <ucCrc8wInit>
8110b674:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
8110b678:	e13fd703 	ldbu	r4,-164(fp)
8110b67c:	e0ffd984 	addi	r3,fp,-154
8110b680:	e0bfd984 	addi	r2,fp,-154
8110b684:	200f883a 	mov	r7,r4
8110b688:	180d883a 	mov	r6,r3
8110b68c:	01604534 	movhi	r5,33044
8110b690:	296c3504 	addi	r5,r5,-20268
8110b694:	1009883a 	mov	r4,r2
8110b698:	11116100 	call	81111610 <sprintf>

	bSuccees = bSendUART128(cBufferETH, usiIdCMDLocal);
8110b69c:	e0bfd90b 	ldhu	r2,-156(fp)
8110b6a0:	10ffffcc 	andi	r3,r2,65535
8110b6a4:	18e0001c 	xori	r3,r3,32768
8110b6a8:	18e00004 	addi	r3,r3,-32768
8110b6ac:	e0bfd984 	addi	r2,fp,-154
8110b6b0:	180b883a 	mov	r5,r3
8110b6b4:	1009883a 	mov	r4,r2
8110b6b8:	110b0dc0 	call	8110b0dc <bSendUART128>
8110b6bc:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
8110b6c0:	e0bfd817 	ldw	r2,-160(fp)
8110b6c4:	10800060 	cmpeqi	r2,r2,1
8110b6c8:	1000011e 	bne	r2,zero,8110b6d0 <vSendEthConf+0x260>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
8110b6cc:	110cebc0 	call	8110cebc <vCouldNotSendEthConfUART>
	}
}
8110b6d0:	0001883a 	nop
8110b6d4:	e6fffa04 	addi	sp,fp,-24
8110b6d8:	dfc00717 	ldw	ra,28(sp)
8110b6dc:	df000617 	ldw	fp,24(sp)
8110b6e0:	dd400517 	ldw	r21,20(sp)
8110b6e4:	dd000417 	ldw	r20,16(sp)
8110b6e8:	dcc00317 	ldw	r19,12(sp)
8110b6ec:	dc800217 	ldw	r18,8(sp)
8110b6f0:	dc400117 	ldw	r17,4(sp)
8110b6f4:	dc000017 	ldw	r16,0(sp)
8110b6f8:	dec00804 	addi	sp,sp,32
8110b6fc:	f800283a 	ret

8110b700 <usiGetIdCMD>:


unsigned short int usiGetIdCMD ( void ) {
8110b700:	deffff04 	addi	sp,sp,-4
8110b704:	de00012e 	bgeu	sp,et,8110b70c <usiGetIdCMD+0xc>
8110b708:	003b68fa 	trap	3
8110b70c:	df000015 	stw	fp,0(sp)
8110b710:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
8110b714:	d0a0530b 	ldhu	r2,-32436(gp)
8110b718:	10ffffcc 	andi	r3,r2,65535
8110b71c:	00bfffd4 	movui	r2,65535
8110b720:	1880031e 	bne	r3,r2,8110b730 <usiGetIdCMD+0x30>
        usiIdCMD = 1;
8110b724:	00800044 	movi	r2,1
8110b728:	d0a0530d 	sth	r2,-32436(gp)
8110b72c:	00000306 	br	8110b73c <usiGetIdCMD+0x3c>
    else
        usiIdCMD++;
8110b730:	d0a0530b 	ldhu	r2,-32436(gp)
8110b734:	10800044 	addi	r2,r2,1
8110b738:	d0a0530d 	sth	r2,-32436(gp)
    return usiIdCMD;
8110b73c:	d0a0530b 	ldhu	r2,-32436(gp)
}
8110b740:	e037883a 	mov	sp,fp
8110b744:	df000017 	ldw	fp,0(sp)
8110b748:	dec00104 	addi	sp,sp,4
8110b74c:	f800283a 	ret

8110b750 <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
8110b750:	defffb04 	addi	sp,sp,-20
8110b754:	de00012e 	bgeu	sp,et,8110b75c <siPosStr+0xc>
8110b758:	003b68fa 	trap	3
8110b75c:	dfc00415 	stw	ra,16(sp)
8110b760:	df000315 	stw	fp,12(sp)
8110b764:	df000304 	addi	fp,sp,12
8110b768:	e13ffe15 	stw	r4,-8(fp)
8110b76c:	2805883a 	mov	r2,r5
8110b770:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
8110b774:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
8110b778:	e0bfff03 	ldbu	r2,-4(fp)
8110b77c:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
8110b780:	e17ffd04 	addi	r5,fp,-12
8110b784:	e13ffe17 	ldw	r4,-8(fp)
8110b788:	11117d80 	call	811117d8 <strcspn>
}
8110b78c:	e037883a 	mov	sp,fp
8110b790:	dfc00117 	ldw	ra,4(sp)
8110b794:	df000017 	ldw	fp,0(sp)
8110b798:	dec00204 	addi	sp,sp,8
8110b79c:	f800283a 	ret

8110b7a0 <vTimeoutCheck>:


void vTimeoutCheck (void *p_arg)
{
8110b7a0:	defffc04 	addi	sp,sp,-16
8110b7a4:	de00012e 	bgeu	sp,et,8110b7ac <vTimeoutCheck+0xc>
8110b7a8:	003b68fa 	trap	3
8110b7ac:	dfc00315 	stw	ra,12(sp)
8110b7b0:	df000215 	stw	fp,8(sp)
8110b7b4:	df000204 	addi	fp,sp,8
8110b7b8:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;

	/* Time to check the (re)transmission buffers, posting a semaphore to sync the task that will threat timeout logic (vTimeoutCheckerTask) */
	error_code = OSSemPost(xSemTimeoutChecker);
8110b7bc:	d0a05217 	ldw	r2,-32440(gp)
8110b7c0:	1009883a 	mov	r4,r2
8110b7c4:	112d5740 	call	8112d574 <OSSemPost>
8110b7c8:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE ) {
8110b7cc:	e0bffe03 	ldbu	r2,-8(fp)
8110b7d0:	10000126 	beq	r2,zero,8110b7d8 <vTimeoutCheck+0x38>
		vFailPostBlockingSemTimeoutTask();
8110b7d4:	110d2f40 	call	8110d2f4 <vFailPostBlockingSemTimeoutTask>
	}
}
8110b7d8:	0001883a 	nop
8110b7dc:	e037883a 	mov	sp,fp
8110b7e0:	dfc00117 	ldw	ra,4(sp)
8110b7e4:	df000017 	ldw	fp,0(sp)
8110b7e8:	dec00204 	addi	sp,sp,8
8110b7ec:	f800283a 	ret

8110b7f0 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
8110b7f0:	defff504 	addi	sp,sp,-44
8110b7f4:	de00012e 	bgeu	sp,et,8110b7fc <vLoadDefaultETHConf+0xc>
8110b7f8:	003b68fa 	trap	3
8110b7fc:	dfc00a15 	stw	ra,40(sp)
8110b800:	df000915 	stw	fp,36(sp)
8110b804:	dc000815 	stw	r16,32(sp)
8110b808:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
8110b80c:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
8110b810:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
8110b814:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
8110b818:	d0a05c17 	ldw	r2,-32400(gp)
8110b81c:	10800058 	cmpnei	r2,r2,1
8110b820:	1001f61e 	bne	r2,zero,8110bffc <vLoadDefaultETHConf+0x80c>
8110b824:	110e2000 	call	8110e200 <bSDcardIsPresent>
8110b828:	1001f426 	beq	r2,zero,8110bffc <vLoadDefaultETHConf+0x80c>
8110b82c:	110e2300 	call	8110e230 <bSDcardFAT16Check>
8110b830:	1001f226 	beq	r2,zero,8110bffc <vLoadDefaultETHConf+0x80c>

		siFile = siOpenFile( ETH_FILE_NAME );
8110b834:	01204534 	movhi	r4,33044
8110b838:	212c3804 	addi	r4,r4,-20256
8110b83c:	110e3580 	call	8110e358 <siOpenFile>
8110b840:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
8110b844:	e0bffc0f 	ldh	r2,-16(fp)
8110b848:	1001e816 	blt	r2,zero,8110bfec <vLoadDefaultETHConf+0x7fc>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
8110b84c:	e0bffd04 	addi	r2,fp,-12
8110b850:	01800204 	movi	r6,8
8110b854:	01400284 	movi	r5,10
8110b858:	1009883a 	mov	r4,r2
8110b85c:	1110ff80 	call	81110ff8 <memset>
			p_inteiro = inteiro;
8110b860:	e0bffd04 	addi	r2,fp,-12
8110b864:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
8110b868:	e0bffc0f 	ldh	r2,-16(fp)
8110b86c:	1009883a 	mov	r4,r2
8110b870:	110e3d40 	call	8110e3d4 <cGetNextChar>
8110b874:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
8110b878:	e0bff947 	ldb	r2,-27(fp)
8110b87c:	10800084 	addi	r2,r2,2
8110b880:	10c015a8 	cmpgeui	r3,r2,86
8110b884:	1801cf1e 	bne	r3,zero,8110bfc4 <vLoadDefaultETHConf+0x7d4>
8110b888:	100690ba 	slli	r3,r2,2
8110b88c:	00a04474 	movhi	r2,33041
8110b890:	10ae2804 	addi	r2,r2,-18272
8110b894:	1885883a 	add	r2,r3,r2
8110b898:	10800017 	ldw	r2,0(r2)
8110b89c:	1000683a 	jmp	r2
8110b8a0:	8110ba38 	rdprs	r4,r16,17128
8110b8a4:	8110ba2c 	andhi	r4,r16,17128
8110b8a8:	8110bfc4 	addi	r4,r16,17151
8110b8ac:	8110bfc4 	addi	r4,r16,17151
8110b8b0:	8110bfc4 	addi	r4,r16,17151
8110b8b4:	8110bfc4 	addi	r4,r16,17151
8110b8b8:	8110bfc4 	addi	r4,r16,17151
8110b8bc:	8110bfc4 	addi	r4,r16,17151
8110b8c0:	8110bfc4 	addi	r4,r16,17151
8110b8c4:	8110bfc4 	addi	r4,r16,17151
8110b8c8:	8110bfc4 	addi	r4,r16,17151
8110b8cc:	8110bfc4 	addi	r4,r16,17151
8110b8d0:	8110bfdc 	xori	r4,r16,17151
8110b8d4:	8110bfc4 	addi	r4,r16,17151
8110b8d8:	8110bfc4 	addi	r4,r16,17151
8110b8dc:	8110bfdc 	xori	r4,r16,17151
8110b8e0:	8110bfc4 	addi	r4,r16,17151
8110b8e4:	8110bfc4 	addi	r4,r16,17151
8110b8e8:	8110bfc4 	addi	r4,r16,17151
8110b8ec:	8110bfc4 	addi	r4,r16,17151
8110b8f0:	8110bfc4 	addi	r4,r16,17151
8110b8f4:	8110bfc4 	addi	r4,r16,17151
8110b8f8:	8110bfc4 	addi	r4,r16,17151
8110b8fc:	8110bfc4 	addi	r4,r16,17151
8110b900:	8110bfc4 	addi	r4,r16,17151
8110b904:	8110bfc4 	addi	r4,r16,17151
8110b908:	8110bfc4 	addi	r4,r16,17151
8110b90c:	8110bfc4 	addi	r4,r16,17151
8110b910:	8110bfc4 	addi	r4,r16,17151
8110b914:	8110bfc4 	addi	r4,r16,17151
8110b918:	8110bfc4 	addi	r4,r16,17151
8110b91c:	8110bfc4 	addi	r4,r16,17151
8110b920:	8110bfc4 	addi	r4,r16,17151
8110b924:	8110bfc4 	addi	r4,r16,17151
8110b928:	8110bfdc 	xori	r4,r16,17151
8110b92c:	8110bfc4 	addi	r4,r16,17151
8110b930:	8110bfc4 	addi	r4,r16,17151
8110b934:	8110bfc4 	addi	r4,r16,17151
8110b938:	8110bfc4 	addi	r4,r16,17151
8110b93c:	8110bfc4 	addi	r4,r16,17151
8110b940:	8110bfc4 	addi	r4,r16,17151
8110b944:	8110b9f8 	rdprs	r4,r16,17127
8110b948:	8110bfc4 	addi	r4,r16,17151
8110b94c:	8110bfc4 	addi	r4,r16,17151
8110b950:	8110bfc4 	addi	r4,r16,17151
8110b954:	8110bfc4 	addi	r4,r16,17151
8110b958:	8110bfc4 	addi	r4,r16,17151
8110b95c:	8110bfc4 	addi	r4,r16,17151
8110b960:	8110bfc4 	addi	r4,r16,17151
8110b964:	8110bfc4 	addi	r4,r16,17151
8110b968:	8110bfc4 	addi	r4,r16,17151
8110b96c:	8110bfc4 	addi	r4,r16,17151
8110b970:	8110bfc4 	addi	r4,r16,17151
8110b974:	8110bfc4 	addi	r4,r16,17151
8110b978:	8110bfc4 	addi	r4,r16,17151
8110b97c:	8110bfc4 	addi	r4,r16,17151
8110b980:	8110bfc4 	addi	r4,r16,17151
8110b984:	8110bfc4 	addi	r4,r16,17151
8110b988:	8110bfc4 	addi	r4,r16,17151
8110b98c:	8110bfc4 	addi	r4,r16,17151
8110b990:	8110bfc4 	addi	r4,r16,17151
8110b994:	8110bfc4 	addi	r4,r16,17151
8110b998:	8110bf8c 	andi	r4,r16,17150
8110b99c:	8110bfc4 	addi	r4,r16,17151
8110b9a0:	8110bfc4 	addi	r4,r16,17151
8110b9a4:	8110bfc4 	addi	r4,r16,17151
8110b9a8:	8110bfc4 	addi	r4,r16,17151
8110b9ac:	8110bfc4 	addi	r4,r16,17151
8110b9b0:	8110bfc4 	addi	r4,r16,17151
8110b9b4:	8110bfc4 	addi	r4,r16,17151
8110b9b8:	8110bd8c 	andi	r4,r16,17142
8110b9bc:	8110bfc4 	addi	r4,r16,17151
8110b9c0:	8110bfc4 	addi	r4,r16,17151
8110b9c4:	8110bbec 	andhi	r4,r16,17135
8110b9c8:	8110bee4 	muli	r4,r16,17147
8110b9cc:	8110bb20 	cmpeqi	r4,r16,17132
8110b9d0:	8110bfc4 	addi	r4,r16,17151
8110b9d4:	8110bfc4 	addi	r4,r16,17151
8110b9d8:	8110bfc4 	addi	r4,r16,17151
8110b9dc:	8110ba50 	cmplti	r4,r16,17129
8110b9e0:	8110bfc4 	addi	r4,r16,17151
8110b9e4:	8110bfc4 	addi	r4,r16,17151
8110b9e8:	8110be5c 	xori	r4,r16,17145
8110b9ec:	8110bfc4 	addi	r4,r16,17151
8110b9f0:	8110bfc4 	addi	r4,r16,17151
8110b9f4:	8110bcbc 	xorhi	r4,r16,17138
					case 39:// single quote '
						c = cGetNextChar(siFile);
8110b9f8:	e0bffc0f 	ldh	r2,-16(fp)
8110b9fc:	1009883a 	mov	r4,r2
8110ba00:	110e3d40 	call	8110e3d4 <cGetNextChar>
8110ba04:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
8110ba08:	00000406 	br	8110ba1c <vLoadDefaultETHConf+0x22c>
							c = cGetNextChar(siFile);
8110ba0c:	e0bffc0f 	ldh	r2,-16(fp)
8110ba10:	1009883a 	mov	r4,r2
8110ba14:	110e3d40 	call	8110e3d4 <cGetNextChar>
8110ba18:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
8110ba1c:	e0bff947 	ldb	r2,-27(fp)
8110ba20:	108009d8 	cmpnei	r2,r2,39
8110ba24:	103ff91e 	bne	r2,zero,8110ba0c <__reset+0xfb0eba0c>
							c = cGetNextChar(siFile);
						}
						break;
8110ba28:	00016d06 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
					case -1: 	//EOF
						bEOF = TRUE;
8110ba2c:	00800044 	movi	r2,1
8110ba30:	e0bff815 	stw	r2,-32(fp)
						break;
8110ba34:	00016a06 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
					case -2: 	//EOF
						printf("Problem with SDCard");
8110ba38:	01204534 	movhi	r4,33044
8110ba3c:	212c3a04 	addi	r4,r4,-20248
8110ba40:	11111c00 	call	811111c0 <printf>
						bEOF = TRUE;
8110ba44:	00800044 	movi	r2,1
8110ba48:	e0bff815 	stw	r2,-32(fp)
						break;
8110ba4c:	00016406 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
8110ba50:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110ba54:	e0bffc0f 	ldh	r2,-16(fp)
8110ba58:	1009883a 	mov	r4,r2
8110ba5c:	110e3d40 	call	8110e3d4 <cGetNextChar>
8110ba60:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110ba64:	d0e00317 	ldw	r3,-32756(gp)
8110ba68:	e0bff947 	ldb	r2,-27(fp)
8110ba6c:	10800044 	addi	r2,r2,1
8110ba70:	1885883a 	add	r2,r3,r2
8110ba74:	10800003 	ldbu	r2,0(r2)
8110ba78:	10803fcc 	andi	r2,r2,255
8110ba7c:	1080010c 	andi	r2,r2,4
8110ba80:	10000626 	beq	r2,zero,8110ba9c <vLoadDefaultETHConf+0x2ac>
									(*p_inteiro) = c;
8110ba84:	e0bffa17 	ldw	r2,-24(fp)
8110ba88:	e0fff943 	ldbu	r3,-27(fp)
8110ba8c:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110ba90:	e0bffa17 	ldw	r2,-24(fp)
8110ba94:	10800044 	addi	r2,r2,1
8110ba98:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
8110ba9c:	e0bff947 	ldb	r2,-27(fp)
8110baa0:	10800ea0 	cmpeqi	r2,r2,58
8110baa4:	1000031e 	bne	r2,zero,8110bab4 <vLoadDefaultETHConf+0x2c4>
8110baa8:	e0bff947 	ldb	r2,-27(fp)
8110baac:	10800ed8 	cmpnei	r2,r2,59
8110bab0:	103fe81e 	bne	r2,zero,8110ba54 <__reset+0xfb0eba54>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110bab4:	e0bffa17 	ldw	r2,-24(fp)
8110bab8:	00c00284 	movi	r3,10
8110babc:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
8110bac0:	e0bff903 	ldbu	r2,-28(fp)
8110bac4:	10800168 	cmpgeui	r2,r2,5
8110bac8:	1000021e 	bne	r2,zero,8110bad4 <vLoadDefaultETHConf+0x2e4>
8110bacc:	e43ff903 	ldbu	r16,-28(fp)
8110bad0:	00000106 	br	8110bad8 <vLoadDefaultETHConf+0x2e8>
8110bad4:	04000144 	movi	r16,5
8110bad8:	e0bffd04 	addi	r2,fp,-12
8110badc:	1009883a 	mov	r4,r2
8110bae0:	110fd4c0 	call	8110fd4c <atoi>
8110bae4:	1007883a 	mov	r3,r2
8110bae8:	00a04574 	movhi	r2,33045
8110baec:	10b66c04 	addi	r2,r2,-9808
8110baf0:	1405883a 	add	r2,r2,r16
8110baf4:	10800404 	addi	r2,r2,16
8110baf8:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110bafc:	e0bffd04 	addi	r2,fp,-12
8110bb00:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110bb04:	e0bff903 	ldbu	r2,-28(fp)
8110bb08:	10800044 	addi	r2,r2,1
8110bb0c:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110bb10:	e0bff947 	ldb	r2,-27(fp)
8110bb14:	10800ed8 	cmpnei	r2,r2,59
8110bb18:	103fce1e 	bne	r2,zero,8110ba54 <__reset+0xfb0eba54>

						break;
8110bb1c:	00013006 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
					case 'I':

						ucParser = 0;
8110bb20:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110bb24:	e0bffc0f 	ldh	r2,-16(fp)
8110bb28:	1009883a 	mov	r4,r2
8110bb2c:	110e3d40 	call	8110e3d4 <cGetNextChar>
8110bb30:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110bb34:	d0e00317 	ldw	r3,-32756(gp)
8110bb38:	e0bff947 	ldb	r2,-27(fp)
8110bb3c:	10800044 	addi	r2,r2,1
8110bb40:	1885883a 	add	r2,r3,r2
8110bb44:	10800003 	ldbu	r2,0(r2)
8110bb48:	10803fcc 	andi	r2,r2,255
8110bb4c:	1080010c 	andi	r2,r2,4
8110bb50:	10000626 	beq	r2,zero,8110bb6c <vLoadDefaultETHConf+0x37c>
									(*p_inteiro) = c;
8110bb54:	e0bffa17 	ldw	r2,-24(fp)
8110bb58:	e0fff943 	ldbu	r3,-27(fp)
8110bb5c:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110bb60:	e0bffa17 	ldw	r2,-24(fp)
8110bb64:	10800044 	addi	r2,r2,1
8110bb68:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110bb6c:	e0bff947 	ldb	r2,-27(fp)
8110bb70:	10800ba0 	cmpeqi	r2,r2,46
8110bb74:	1000031e 	bne	r2,zero,8110bb84 <vLoadDefaultETHConf+0x394>
8110bb78:	e0bff947 	ldb	r2,-27(fp)
8110bb7c:	10800ed8 	cmpnei	r2,r2,59
8110bb80:	103fe81e 	bne	r2,zero,8110bb24 <__reset+0xfb0ebb24>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110bb84:	e0bffa17 	ldw	r2,-24(fp)
8110bb88:	00c00284 	movi	r3,10
8110bb8c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
8110bb90:	e0bff903 	ldbu	r2,-28(fp)
8110bb94:	108000e8 	cmpgeui	r2,r2,3
8110bb98:	1000021e 	bne	r2,zero,8110bba4 <vLoadDefaultETHConf+0x3b4>
8110bb9c:	e43ff903 	ldbu	r16,-28(fp)
8110bba0:	00000106 	br	8110bba8 <vLoadDefaultETHConf+0x3b8>
8110bba4:	040000c4 	movi	r16,3
8110bba8:	e0bffd04 	addi	r2,fp,-12
8110bbac:	1009883a 	mov	r4,r2
8110bbb0:	110fd4c0 	call	8110fd4c <atoi>
8110bbb4:	1007883a 	mov	r3,r2
8110bbb8:	00a04574 	movhi	r2,33045
8110bbbc:	10b66c04 	addi	r2,r2,-9808
8110bbc0:	1405883a 	add	r2,r2,r16
8110bbc4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110bbc8:	e0bffd04 	addi	r2,fp,-12
8110bbcc:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110bbd0:	e0bff903 	ldbu	r2,-28(fp)
8110bbd4:	10800044 	addi	r2,r2,1
8110bbd8:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110bbdc:	e0bff947 	ldb	r2,-27(fp)
8110bbe0:	10800ed8 	cmpnei	r2,r2,59
8110bbe4:	103fcf1e 	bne	r2,zero,8110bb24 <__reset+0xfb0ebb24>

						break;
8110bbe8:	0000fd06 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
					case 'G':

						ucParser = 0;
8110bbec:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110bbf0:	e0bffc0f 	ldh	r2,-16(fp)
8110bbf4:	1009883a 	mov	r4,r2
8110bbf8:	110e3d40 	call	8110e3d4 <cGetNextChar>
8110bbfc:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110bc00:	d0e00317 	ldw	r3,-32756(gp)
8110bc04:	e0bff947 	ldb	r2,-27(fp)
8110bc08:	10800044 	addi	r2,r2,1
8110bc0c:	1885883a 	add	r2,r3,r2
8110bc10:	10800003 	ldbu	r2,0(r2)
8110bc14:	10803fcc 	andi	r2,r2,255
8110bc18:	1080010c 	andi	r2,r2,4
8110bc1c:	10000626 	beq	r2,zero,8110bc38 <vLoadDefaultETHConf+0x448>
									(*p_inteiro) = c;
8110bc20:	e0bffa17 	ldw	r2,-24(fp)
8110bc24:	e0fff943 	ldbu	r3,-27(fp)
8110bc28:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110bc2c:	e0bffa17 	ldw	r2,-24(fp)
8110bc30:	10800044 	addi	r2,r2,1
8110bc34:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110bc38:	e0bff947 	ldb	r2,-27(fp)
8110bc3c:	10800ba0 	cmpeqi	r2,r2,46
8110bc40:	1000031e 	bne	r2,zero,8110bc50 <vLoadDefaultETHConf+0x460>
8110bc44:	e0bff947 	ldb	r2,-27(fp)
8110bc48:	10800ed8 	cmpnei	r2,r2,59
8110bc4c:	103fe81e 	bne	r2,zero,8110bbf0 <__reset+0xfb0ebbf0>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110bc50:	e0bffa17 	ldw	r2,-24(fp)
8110bc54:	00c00284 	movi	r3,10
8110bc58:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
8110bc5c:	e0bff903 	ldbu	r2,-28(fp)
8110bc60:	108000e8 	cmpgeui	r2,r2,3
8110bc64:	1000021e 	bne	r2,zero,8110bc70 <vLoadDefaultETHConf+0x480>
8110bc68:	e43ff903 	ldbu	r16,-28(fp)
8110bc6c:	00000106 	br	8110bc74 <vLoadDefaultETHConf+0x484>
8110bc70:	040000c4 	movi	r16,3
8110bc74:	e0bffd04 	addi	r2,fp,-12
8110bc78:	1009883a 	mov	r4,r2
8110bc7c:	110fd4c0 	call	8110fd4c <atoi>
8110bc80:	1007883a 	mov	r3,r2
8110bc84:	00a04574 	movhi	r2,33045
8110bc88:	10b66c04 	addi	r2,r2,-9808
8110bc8c:	1405883a 	add	r2,r2,r16
8110bc90:	10800104 	addi	r2,r2,4
8110bc94:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110bc98:	e0bffd04 	addi	r2,fp,-12
8110bc9c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110bca0:	e0bff903 	ldbu	r2,-28(fp)
8110bca4:	10800044 	addi	r2,r2,1
8110bca8:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110bcac:	e0bff947 	ldb	r2,-27(fp)
8110bcb0:	10800ed8 	cmpnei	r2,r2,59
8110bcb4:	103fce1e 	bne	r2,zero,8110bbf0 <__reset+0xfb0ebbf0>

						break;
8110bcb8:	0000c906 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
					case 'S':

						ucParser = 0;
8110bcbc:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110bcc0:	e0bffc0f 	ldh	r2,-16(fp)
8110bcc4:	1009883a 	mov	r4,r2
8110bcc8:	110e3d40 	call	8110e3d4 <cGetNextChar>
8110bccc:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110bcd0:	d0e00317 	ldw	r3,-32756(gp)
8110bcd4:	e0bff947 	ldb	r2,-27(fp)
8110bcd8:	10800044 	addi	r2,r2,1
8110bcdc:	1885883a 	add	r2,r3,r2
8110bce0:	10800003 	ldbu	r2,0(r2)
8110bce4:	10803fcc 	andi	r2,r2,255
8110bce8:	1080010c 	andi	r2,r2,4
8110bcec:	10000626 	beq	r2,zero,8110bd08 <vLoadDefaultETHConf+0x518>
									(*p_inteiro) = c;
8110bcf0:	e0bffa17 	ldw	r2,-24(fp)
8110bcf4:	e0fff943 	ldbu	r3,-27(fp)
8110bcf8:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110bcfc:	e0bffa17 	ldw	r2,-24(fp)
8110bd00:	10800044 	addi	r2,r2,1
8110bd04:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110bd08:	e0bff947 	ldb	r2,-27(fp)
8110bd0c:	10800ba0 	cmpeqi	r2,r2,46
8110bd10:	1000031e 	bne	r2,zero,8110bd20 <vLoadDefaultETHConf+0x530>
8110bd14:	e0bff947 	ldb	r2,-27(fp)
8110bd18:	10800ed8 	cmpnei	r2,r2,59
8110bd1c:	103fe81e 	bne	r2,zero,8110bcc0 <__reset+0xfb0ebcc0>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110bd20:	e0bffa17 	ldw	r2,-24(fp)
8110bd24:	00c00284 	movi	r3,10
8110bd28:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
8110bd2c:	e0bff903 	ldbu	r2,-28(fp)
8110bd30:	108000e8 	cmpgeui	r2,r2,3
8110bd34:	1000021e 	bne	r2,zero,8110bd40 <vLoadDefaultETHConf+0x550>
8110bd38:	e43ff903 	ldbu	r16,-28(fp)
8110bd3c:	00000106 	br	8110bd44 <vLoadDefaultETHConf+0x554>
8110bd40:	040000c4 	movi	r16,3
8110bd44:	e0bffd04 	addi	r2,fp,-12
8110bd48:	1009883a 	mov	r4,r2
8110bd4c:	110fd4c0 	call	8110fd4c <atoi>
8110bd50:	1007883a 	mov	r3,r2
8110bd54:	00a04574 	movhi	r2,33045
8110bd58:	10b66c04 	addi	r2,r2,-9808
8110bd5c:	1405883a 	add	r2,r2,r16
8110bd60:	10800204 	addi	r2,r2,8
8110bd64:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110bd68:	e0bffd04 	addi	r2,fp,-12
8110bd6c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110bd70:	e0bff903 	ldbu	r2,-28(fp)
8110bd74:	10800044 	addi	r2,r2,1
8110bd78:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110bd7c:	e0bff947 	ldb	r2,-27(fp)
8110bd80:	10800ed8 	cmpnei	r2,r2,59
8110bd84:	103fce1e 	bne	r2,zero,8110bcc0 <__reset+0xfb0ebcc0>

						break;
8110bd88:	00009506 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
					case 'D':

						ucParser = 0;
8110bd8c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110bd90:	e0bffc0f 	ldh	r2,-16(fp)
8110bd94:	1009883a 	mov	r4,r2
8110bd98:	110e3d40 	call	8110e3d4 <cGetNextChar>
8110bd9c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110bda0:	d0e00317 	ldw	r3,-32756(gp)
8110bda4:	e0bff947 	ldb	r2,-27(fp)
8110bda8:	10800044 	addi	r2,r2,1
8110bdac:	1885883a 	add	r2,r3,r2
8110bdb0:	10800003 	ldbu	r2,0(r2)
8110bdb4:	10803fcc 	andi	r2,r2,255
8110bdb8:	1080010c 	andi	r2,r2,4
8110bdbc:	10000626 	beq	r2,zero,8110bdd8 <vLoadDefaultETHConf+0x5e8>
									(*p_inteiro) = c;
8110bdc0:	e0bffa17 	ldw	r2,-24(fp)
8110bdc4:	e0fff943 	ldbu	r3,-27(fp)
8110bdc8:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110bdcc:	e0bffa17 	ldw	r2,-24(fp)
8110bdd0:	10800044 	addi	r2,r2,1
8110bdd4:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110bdd8:	e0bff947 	ldb	r2,-27(fp)
8110bddc:	10800ba0 	cmpeqi	r2,r2,46
8110bde0:	1000031e 	bne	r2,zero,8110bdf0 <vLoadDefaultETHConf+0x600>
8110bde4:	e0bff947 	ldb	r2,-27(fp)
8110bde8:	10800ed8 	cmpnei	r2,r2,59
8110bdec:	103fe81e 	bne	r2,zero,8110bd90 <__reset+0xfb0ebd90>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110bdf0:	e0bffa17 	ldw	r2,-24(fp)
8110bdf4:	00c00284 	movi	r3,10
8110bdf8:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
8110bdfc:	e0bff903 	ldbu	r2,-28(fp)
8110be00:	108000e8 	cmpgeui	r2,r2,3
8110be04:	1000021e 	bne	r2,zero,8110be10 <vLoadDefaultETHConf+0x620>
8110be08:	e43ff903 	ldbu	r16,-28(fp)
8110be0c:	00000106 	br	8110be14 <vLoadDefaultETHConf+0x624>
8110be10:	040000c4 	movi	r16,3
8110be14:	e0bffd04 	addi	r2,fp,-12
8110be18:	1009883a 	mov	r4,r2
8110be1c:	110fd4c0 	call	8110fd4c <atoi>
8110be20:	1007883a 	mov	r3,r2
8110be24:	00a04574 	movhi	r2,33045
8110be28:	10b66c04 	addi	r2,r2,-9808
8110be2c:	1405883a 	add	r2,r2,r16
8110be30:	10800304 	addi	r2,r2,12
8110be34:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110be38:	e0bffd04 	addi	r2,fp,-12
8110be3c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110be40:	e0bff903 	ldbu	r2,-28(fp)
8110be44:	10800044 	addi	r2,r2,1
8110be48:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110be4c:	e0bff947 	ldb	r2,-27(fp)
8110be50:	10800ed8 	cmpnei	r2,r2,59
8110be54:	103fce1e 	bne	r2,zero,8110bd90 <__reset+0xfb0ebd90>

						break;						
8110be58:	00006106 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
					case 'P':

						do {
							c = cGetNextChar(siFile);
8110be5c:	e0bffc0f 	ldh	r2,-16(fp)
8110be60:	1009883a 	mov	r4,r2
8110be64:	110e3d40 	call	8110e3d4 <cGetNextChar>
8110be68:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110be6c:	d0e00317 	ldw	r3,-32756(gp)
8110be70:	e0bff947 	ldb	r2,-27(fp)
8110be74:	10800044 	addi	r2,r2,1
8110be78:	1885883a 	add	r2,r3,r2
8110be7c:	10800003 	ldbu	r2,0(r2)
8110be80:	10803fcc 	andi	r2,r2,255
8110be84:	1080010c 	andi	r2,r2,4
8110be88:	10000626 	beq	r2,zero,8110bea4 <vLoadDefaultETHConf+0x6b4>
								(*p_inteiro) = c;
8110be8c:	e0bffa17 	ldw	r2,-24(fp)
8110be90:	e0fff943 	ldbu	r3,-27(fp)
8110be94:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110be98:	e0bffa17 	ldw	r2,-24(fp)
8110be9c:	10800044 	addi	r2,r2,1
8110bea0:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110bea4:	e0bff947 	ldb	r2,-27(fp)
8110bea8:	10800ed8 	cmpnei	r2,r2,59
8110beac:	103feb1e 	bne	r2,zero,8110be5c <__reset+0xfb0ebe5c>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110beb0:	e0bffa17 	ldw	r2,-24(fp)
8110beb4:	00c00284 	movi	r3,10
8110beb8:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
8110bebc:	e0bffd04 	addi	r2,fp,-12
8110bec0:	1009883a 	mov	r4,r2
8110bec4:	110fd4c0 	call	8110fd4c <atoi>
8110bec8:	1007883a 	mov	r3,r2
8110becc:	00a04574 	movhi	r2,33045
8110bed0:	10b66c04 	addi	r2,r2,-9808
8110bed4:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110bed8:	e0bffd04 	addi	r2,fp,-12
8110bedc:	e0bffa15 	stw	r2,-24(fp)

						break;
8110bee0:	00003f06 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110bee4:	e0bffc0f 	ldh	r2,-16(fp)
8110bee8:	1009883a 	mov	r4,r2
8110beec:	110e3d40 	call	8110e3d4 <cGetNextChar>
8110bef0:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110bef4:	d0e00317 	ldw	r3,-32756(gp)
8110bef8:	e0bff947 	ldb	r2,-27(fp)
8110befc:	10800044 	addi	r2,r2,1
8110bf00:	1885883a 	add	r2,r3,r2
8110bf04:	10800003 	ldbu	r2,0(r2)
8110bf08:	10803fcc 	andi	r2,r2,255
8110bf0c:	1080010c 	andi	r2,r2,4
8110bf10:	10000626 	beq	r2,zero,8110bf2c <vLoadDefaultETHConf+0x73c>
								(*p_inteiro) = c;
8110bf14:	e0bffa17 	ldw	r2,-24(fp)
8110bf18:	e0fff943 	ldbu	r3,-27(fp)
8110bf1c:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110bf20:	e0bffa17 	ldw	r2,-24(fp)
8110bf24:	10800044 	addi	r2,r2,1
8110bf28:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110bf2c:	e0bff947 	ldb	r2,-27(fp)
8110bf30:	10800ed8 	cmpnei	r2,r2,59
8110bf34:	103feb1e 	bne	r2,zero,8110bee4 <__reset+0xfb0ebee4>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110bf38:	e0bffa17 	ldw	r2,-24(fp)
8110bf3c:	00c00284 	movi	r3,10
8110bf40:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
8110bf44:	e0bffd04 	addi	r2,fp,-12
8110bf48:	1009883a 	mov	r4,r2
8110bf4c:	110fd4c0 	call	8110fd4c <atoi>
8110bf50:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
8110bf54:	e0bffc8f 	ldh	r2,-14(fp)
8110bf58:	10800058 	cmpnei	r2,r2,1
8110bf5c:	1000051e 	bne	r2,zero,8110bf74 <vLoadDefaultETHConf+0x784>
							xConfEth.bDHCP = TRUE;
8110bf60:	00a04574 	movhi	r2,33045
8110bf64:	10b66c04 	addi	r2,r2,-9808
8110bf68:	00c00044 	movi	r3,1
8110bf6c:	10c00615 	stw	r3,24(r2)
8110bf70:	00000306 	br	8110bf80 <vLoadDefaultETHConf+0x790>
						else
							xConfEth.bDHCP = FALSE;
8110bf74:	00a04574 	movhi	r2,33045
8110bf78:	10b66c04 	addi	r2,r2,-9808
8110bf7c:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110bf80:	e0bffd04 	addi	r2,fp,-12
8110bf84:	e0bffa15 	stw	r2,-24(fp)

						break;
8110bf88:	00001506 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
8110bf8c:	e0bffc0f 	ldh	r2,-16(fp)
8110bf90:	1009883a 	mov	r4,r2
8110bf94:	110e3940 	call	8110e394 <siCloseFile>
8110bf98:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
8110bf9c:	e0bffb17 	ldw	r2,-20(fp)
8110bfa0:	1000031e 	bne	r2,zero,8110bfb0 <vLoadDefaultETHConf+0x7c0>
							printf("Problema em fechar o arquivo\n");
8110bfa4:	01204534 	movhi	r4,33044
8110bfa8:	212c3f04 	addi	r4,r4,-20228
8110bfac:	11112cc0 	call	811112cc <puts>

						/* End of Parser File */
						bEOF = TRUE;
8110bfb0:	00800044 	movi	r2,1
8110bfb4:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
8110bfb8:	00800044 	movi	r2,1
8110bfbc:	e0bff715 	stw	r2,-36(fp)
						break;
8110bfc0:	00000706 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110bfc4:	e0bff947 	ldb	r2,-27(fp)
8110bfc8:	100b883a 	mov	r5,r2
8110bfcc:	01204534 	movhi	r4,33044
8110bfd0:	212c4704 	addi	r4,r4,-20196
8110bfd4:	11111c00 	call	811111c0 <printf>
						break;
8110bfd8:	00000106 	br	8110bfe0 <vLoadDefaultETHConf+0x7f0>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
8110bfdc:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
8110bfe0:	e0bff817 	ldw	r2,-32(fp)
8110bfe4:	103e2026 	beq	r2,zero,8110b868 <__reset+0xfb0eb868>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110bfe8:	00000706 	br	8110c008 <vLoadDefaultETHConf+0x818>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
8110bfec:	01204534 	movhi	r4,33044
8110bff0:	212c5404 	addi	r4,r4,-20144
8110bff4:	11112cc0 	call	811112cc <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110bff8:	00000306 	br	8110c008 <vLoadDefaultETHConf+0x818>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
8110bffc:	01204534 	movhi	r4,33044
8110c000:	212c5d04 	addi	r4,r4,-20108
8110c004:	11112cc0 	call	811112cc <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
8110c008:	e0bff717 	ldw	r2,-36(fp)
8110c00c:	1000541e 	bne	r2,zero,8110c160 <vLoadDefaultETHConf+0x970>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
8110c010:	01204534 	movhi	r4,33044
8110c014:	212c6004 	addi	r4,r4,-20096
8110c018:	11112cc0 	call	811112cc <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
8110c01c:	01604534 	movhi	r5,33044
8110c020:	296c3804 	addi	r5,r5,-20256
8110c024:	01204534 	movhi	r4,33044
8110c028:	212c7404 	addi	r4,r4,-20016
8110c02c:	11111c00 	call	811111c0 <printf>


		xConfEth.siPortPUS = 17000;
8110c030:	00a04574 	movhi	r2,33045
8110c034:	10b66c04 	addi	r2,r2,-9808
8110c038:	00d09a04 	movi	r3,17000
8110c03c:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
8110c040:	00a04574 	movhi	r2,33045
8110c044:	10b66c04 	addi	r2,r2,-9808
8110c048:	00fff004 	movi	r3,-64
8110c04c:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
8110c050:	00a04574 	movhi	r2,33045
8110c054:	10b66c04 	addi	r2,r2,-9808
8110c058:	00ffea04 	movi	r3,-88
8110c05c:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
8110c060:	00a04574 	movhi	r2,33045
8110c064:	10b66c04 	addi	r2,r2,-9808
8110c068:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
8110c06c:	00a04574 	movhi	r2,33045
8110c070:	10b66c04 	addi	r2,r2,-9808
8110c074:	00c00144 	movi	r3,5
8110c078:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
8110c07c:	00a04574 	movhi	r2,33045
8110c080:	10b66c04 	addi	r2,r2,-9808
8110c084:	00fff004 	movi	r3,-64
8110c088:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
8110c08c:	00a04574 	movhi	r2,33045
8110c090:	10b66c04 	addi	r2,r2,-9808
8110c094:	00ffea04 	movi	r3,-88
8110c098:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
8110c09c:	00a04574 	movhi	r2,33045
8110c0a0:	10b66c04 	addi	r2,r2,-9808
8110c0a4:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
8110c0a8:	00a04574 	movhi	r2,33045
8110c0ac:	10b66c04 	addi	r2,r2,-9808
8110c0b0:	00c00044 	movi	r3,1
8110c0b4:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
8110c0b8:	00a04574 	movhi	r2,33045
8110c0bc:	10b66c04 	addi	r2,r2,-9808
8110c0c0:	00ffffc4 	movi	r3,-1
8110c0c4:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
8110c0c8:	00a04574 	movhi	r2,33045
8110c0cc:	10b66c04 	addi	r2,r2,-9808
8110c0d0:	00ffffc4 	movi	r3,-1
8110c0d4:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
8110c0d8:	00a04574 	movhi	r2,33045
8110c0dc:	10b66c04 	addi	r2,r2,-9808
8110c0e0:	00ffffc4 	movi	r3,-1
8110c0e4:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
8110c0e8:	00a04574 	movhi	r2,33045
8110c0ec:	10b66c04 	addi	r2,r2,-9808
8110c0f0:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110c0f4:	00a04574 	movhi	r2,33045
8110c0f8:	10b66c04 	addi	r2,r2,-9808
8110c0fc:	00ffff04 	movi	r3,-4
8110c100:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110c104:	00a04574 	movhi	r2,33045
8110c108:	10b66c04 	addi	r2,r2,-9808
8110c10c:	00fffdc4 	movi	r3,-9
8110c110:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110c114:	00a04574 	movhi	r2,33045
8110c118:	10b66c04 	addi	r2,r2,-9808
8110c11c:	00c018c4 	movi	r3,99
8110c120:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
8110c124:	00a04574 	movhi	r2,33045
8110c128:	10b66c04 	addi	r2,r2,-9808
8110c12c:	00c01344 	movi	r3,77
8110c130:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
8110c134:	00a04574 	movhi	r2,33045
8110c138:	10b66c04 	addi	r2,r2,-9808
8110c13c:	00c007c4 	movi	r3,31
8110c140:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
8110c144:	00a04574 	movhi	r2,33045
8110c148:	10b66c04 	addi	r2,r2,-9808
8110c14c:	00c01084 	movi	r3,66
8110c150:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
8110c154:	00a04574 	movhi	r2,33045
8110c158:	10b66c04 	addi	r2,r2,-9808
8110c15c:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
8110c160:	e0bff717 	ldw	r2,-36(fp)
}
8110c164:	e6ffff04 	addi	sp,fp,-4
8110c168:	dfc00217 	ldw	ra,8(sp)
8110c16c:	df000117 	ldw	fp,4(sp)
8110c170:	dc000017 	ldw	r16,0(sp)
8110c174:	dec00304 	addi	sp,sp,12
8110c178:	f800283a 	ret

8110c17c <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
8110c17c:	defff004 	addi	sp,sp,-64
8110c180:	de00012e 	bgeu	sp,et,8110c188 <vShowEthConfig+0xc>
8110c184:	003b68fa 	trap	3
8110c188:	dfc00f15 	stw	ra,60(sp)
8110c18c:	df000e15 	stw	fp,56(sp)
8110c190:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
8110c194:	d0a04d17 	ldw	r2,-32460(gp)
8110c198:	100f883a 	mov	r7,r2
8110c19c:	018007c4 	movi	r6,31
8110c1a0:	01400044 	movi	r5,1
8110c1a4:	01204534 	movhi	r4,33044
8110c1a8:	212c7a04 	addi	r4,r4,-19992
8110c1ac:	11104940 	call	81110494 <fwrite>

		memset(buffer,0,40);
8110c1b0:	01800a04 	movi	r6,40
8110c1b4:	000b883a 	mov	r5,zero
8110c1b8:	e13ff604 	addi	r4,fp,-40
8110c1bc:	1110ff80 	call	81110ff8 <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
8110c1c0:	00a04574 	movhi	r2,33045
8110c1c4:	10b66c04 	addi	r2,r2,-9808
8110c1c8:	10800403 	ldbu	r2,16(r2)
8110c1cc:	11803fcc 	andi	r6,r2,255
8110c1d0:	00a04574 	movhi	r2,33045
8110c1d4:	10b66c04 	addi	r2,r2,-9808
8110c1d8:	10800443 	ldbu	r2,17(r2)
8110c1dc:	11c03fcc 	andi	r7,r2,255
8110c1e0:	00a04574 	movhi	r2,33045
8110c1e4:	10b66c04 	addi	r2,r2,-9808
8110c1e8:	10800483 	ldbu	r2,18(r2)
8110c1ec:	10c03fcc 	andi	r3,r2,255
8110c1f0:	00a04574 	movhi	r2,33045
8110c1f4:	10b66c04 	addi	r2,r2,-9808
8110c1f8:	108004c3 	ldbu	r2,19(r2)
8110c1fc:	11003fcc 	andi	r4,r2,255
8110c200:	00a04574 	movhi	r2,33045
8110c204:	10b66c04 	addi	r2,r2,-9808
8110c208:	10800503 	ldbu	r2,20(r2)
8110c20c:	11403fcc 	andi	r5,r2,255
8110c210:	00a04574 	movhi	r2,33045
8110c214:	10b66c04 	addi	r2,r2,-9808
8110c218:	10800543 	ldbu	r2,21(r2)
8110c21c:	10803fcc 	andi	r2,r2,255
8110c220:	d8800315 	stw	r2,12(sp)
8110c224:	d9400215 	stw	r5,8(sp)
8110c228:	d9000115 	stw	r4,4(sp)
8110c22c:	d8c00015 	stw	r3,0(sp)
8110c230:	01604534 	movhi	r5,33044
8110c234:	296c8204 	addi	r5,r5,-19960
8110c238:	e13ff604 	addi	r4,fp,-40
8110c23c:	11116100 	call	81111610 <sprintf>
		debug(fp, buffer );
8110c240:	d0a04d17 	ldw	r2,-32460(gp)
8110c244:	e17ff604 	addi	r5,fp,-40
8110c248:	1009883a 	mov	r4,r2
8110c24c:	110fea80 	call	8110fea8 <fprintf>

		memset(buffer,0,40);
8110c250:	01800a04 	movi	r6,40
8110c254:	000b883a 	mov	r5,zero
8110c258:	e13ff604 	addi	r4,fp,-40
8110c25c:	1110ff80 	call	81110ff8 <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
8110c260:	00a04574 	movhi	r2,33045
8110c264:	10b66c04 	addi	r2,r2,-9808
8110c268:	10800003 	ldbu	r2,0(r2)
8110c26c:	11003fcc 	andi	r4,r2,255
8110c270:	00a04574 	movhi	r2,33045
8110c274:	10b66c04 	addi	r2,r2,-9808
8110c278:	10800043 	ldbu	r2,1(r2)
8110c27c:	11403fcc 	andi	r5,r2,255
8110c280:	00a04574 	movhi	r2,33045
8110c284:	10b66c04 	addi	r2,r2,-9808
8110c288:	10800083 	ldbu	r2,2(r2)
8110c28c:	10c03fcc 	andi	r3,r2,255
8110c290:	00a04574 	movhi	r2,33045
8110c294:	10b66c04 	addi	r2,r2,-9808
8110c298:	108000c3 	ldbu	r2,3(r2)
8110c29c:	10803fcc 	andi	r2,r2,255
8110c2a0:	d8800115 	stw	r2,4(sp)
8110c2a4:	d8c00015 	stw	r3,0(sp)
8110c2a8:	280f883a 	mov	r7,r5
8110c2ac:	200d883a 	mov	r6,r4
8110c2b0:	01604534 	movhi	r5,33044
8110c2b4:	296c8b04 	addi	r5,r5,-19924
8110c2b8:	e13ff604 	addi	r4,fp,-40
8110c2bc:	11116100 	call	81111610 <sprintf>
		debug(fp, buffer );
8110c2c0:	d0a04d17 	ldw	r2,-32460(gp)
8110c2c4:	e17ff604 	addi	r5,fp,-40
8110c2c8:	1009883a 	mov	r4,r2
8110c2cc:	110fea80 	call	8110fea8 <fprintf>

		memset(buffer,0,40);
8110c2d0:	01800a04 	movi	r6,40
8110c2d4:	000b883a 	mov	r5,zero
8110c2d8:	e13ff604 	addi	r4,fp,-40
8110c2dc:	1110ff80 	call	81110ff8 <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
8110c2e0:	00a04574 	movhi	r2,33045
8110c2e4:	10b66c04 	addi	r2,r2,-9808
8110c2e8:	10800103 	ldbu	r2,4(r2)
8110c2ec:	11003fcc 	andi	r4,r2,255
8110c2f0:	00a04574 	movhi	r2,33045
8110c2f4:	10b66c04 	addi	r2,r2,-9808
8110c2f8:	10800143 	ldbu	r2,5(r2)
8110c2fc:	11403fcc 	andi	r5,r2,255
8110c300:	00a04574 	movhi	r2,33045
8110c304:	10b66c04 	addi	r2,r2,-9808
8110c308:	10800183 	ldbu	r2,6(r2)
8110c30c:	10c03fcc 	andi	r3,r2,255
8110c310:	00a04574 	movhi	r2,33045
8110c314:	10b66c04 	addi	r2,r2,-9808
8110c318:	108001c3 	ldbu	r2,7(r2)
8110c31c:	10803fcc 	andi	r2,r2,255
8110c320:	d8800115 	stw	r2,4(sp)
8110c324:	d8c00015 	stw	r3,0(sp)
8110c328:	280f883a 	mov	r7,r5
8110c32c:	200d883a 	mov	r6,r4
8110c330:	01604534 	movhi	r5,33044
8110c334:	296c9104 	addi	r5,r5,-19900
8110c338:	e13ff604 	addi	r4,fp,-40
8110c33c:	11116100 	call	81111610 <sprintf>
		debug(fp, buffer );
8110c340:	d0a04d17 	ldw	r2,-32460(gp)
8110c344:	e17ff604 	addi	r5,fp,-40
8110c348:	1009883a 	mov	r4,r2
8110c34c:	110fea80 	call	8110fea8 <fprintf>

		memset(buffer,0,40);
8110c350:	01800a04 	movi	r6,40
8110c354:	000b883a 	mov	r5,zero
8110c358:	e13ff604 	addi	r4,fp,-40
8110c35c:	1110ff80 	call	81110ff8 <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
8110c360:	00a04574 	movhi	r2,33045
8110c364:	10b66c04 	addi	r2,r2,-9808
8110c368:	10800203 	ldbu	r2,8(r2)
8110c36c:	11003fcc 	andi	r4,r2,255
8110c370:	00a04574 	movhi	r2,33045
8110c374:	10b66c04 	addi	r2,r2,-9808
8110c378:	10800243 	ldbu	r2,9(r2)
8110c37c:	11403fcc 	andi	r5,r2,255
8110c380:	00a04574 	movhi	r2,33045
8110c384:	10b66c04 	addi	r2,r2,-9808
8110c388:	10800283 	ldbu	r2,10(r2)
8110c38c:	10c03fcc 	andi	r3,r2,255
8110c390:	00a04574 	movhi	r2,33045
8110c394:	10b66c04 	addi	r2,r2,-9808
8110c398:	108002c3 	ldbu	r2,11(r2)
8110c39c:	10803fcc 	andi	r2,r2,255
8110c3a0:	d8800115 	stw	r2,4(sp)
8110c3a4:	d8c00015 	stw	r3,0(sp)
8110c3a8:	280f883a 	mov	r7,r5
8110c3ac:	200d883a 	mov	r6,r4
8110c3b0:	01604534 	movhi	r5,33044
8110c3b4:	296c9804 	addi	r5,r5,-19872
8110c3b8:	e13ff604 	addi	r4,fp,-40
8110c3bc:	11116100 	call	81111610 <sprintf>
		debug(fp, buffer );
8110c3c0:	d0a04d17 	ldw	r2,-32460(gp)
8110c3c4:	e17ff604 	addi	r5,fp,-40
8110c3c8:	1009883a 	mov	r4,r2
8110c3cc:	110fea80 	call	8110fea8 <fprintf>

		memset(buffer,0,40);
8110c3d0:	01800a04 	movi	r6,40
8110c3d4:	000b883a 	mov	r5,zero
8110c3d8:	e13ff604 	addi	r4,fp,-40
8110c3dc:	1110ff80 	call	81110ff8 <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
8110c3e0:	00a04574 	movhi	r2,33045
8110c3e4:	10b66c04 	addi	r2,r2,-9808
8110c3e8:	10800303 	ldbu	r2,12(r2)
8110c3ec:	11003fcc 	andi	r4,r2,255
8110c3f0:	00a04574 	movhi	r2,33045
8110c3f4:	10b66c04 	addi	r2,r2,-9808
8110c3f8:	10800343 	ldbu	r2,13(r2)
8110c3fc:	11403fcc 	andi	r5,r2,255
8110c400:	00a04574 	movhi	r2,33045
8110c404:	10b66c04 	addi	r2,r2,-9808
8110c408:	10800383 	ldbu	r2,14(r2)
8110c40c:	10c03fcc 	andi	r3,r2,255
8110c410:	00a04574 	movhi	r2,33045
8110c414:	10b66c04 	addi	r2,r2,-9808
8110c418:	108003c3 	ldbu	r2,15(r2)
8110c41c:	10803fcc 	andi	r2,r2,255
8110c420:	d8800115 	stw	r2,4(sp)
8110c424:	d8c00015 	stw	r3,0(sp)
8110c428:	280f883a 	mov	r7,r5
8110c42c:	200d883a 	mov	r6,r4
8110c430:	01604534 	movhi	r5,33044
8110c434:	296c9f04 	addi	r5,r5,-19844
8110c438:	e13ff604 	addi	r4,fp,-40
8110c43c:	11116100 	call	81111610 <sprintf>
		debug(fp, buffer );
8110c440:	d0a04d17 	ldw	r2,-32460(gp)
8110c444:	e17ff604 	addi	r5,fp,-40
8110c448:	1009883a 	mov	r4,r2
8110c44c:	110fea80 	call	8110fea8 <fprintf>

		memset(buffer,0,40);
8110c450:	01800a04 	movi	r6,40
8110c454:	000b883a 	mov	r5,zero
8110c458:	e13ff604 	addi	r4,fp,-40
8110c45c:	1110ff80 	call	81110ff8 <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
8110c460:	00a04574 	movhi	r2,33045
8110c464:	10b66c04 	addi	r2,r2,-9808
8110c468:	1080058b 	ldhu	r2,22(r2)
8110c46c:	10bfffcc 	andi	r2,r2,65535
8110c470:	100d883a 	mov	r6,r2
8110c474:	01604534 	movhi	r5,33044
8110c478:	296ca604 	addi	r5,r5,-19816
8110c47c:	e13ff604 	addi	r4,fp,-40
8110c480:	11116100 	call	81111610 <sprintf>
		debug(fp, buffer );
8110c484:	d0a04d17 	ldw	r2,-32460(gp)
8110c488:	e17ff604 	addi	r5,fp,-40
8110c48c:	1009883a 	mov	r4,r2
8110c490:	110fea80 	call	8110fea8 <fprintf>

	}
8110c494:	0001883a 	nop
8110c498:	e037883a 	mov	sp,fp
8110c49c:	dfc00117 	ldw	ra,4(sp)
8110c4a0:	df000017 	ldw	fp,0(sp)
8110c4a4:	dec00204 	addi	sp,sp,8
8110c4a8:	f800283a 	ret

8110c4ac <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
8110c4ac:	defffb04 	addi	sp,sp,-20
8110c4b0:	de00012e 	bgeu	sp,et,8110c4b8 <ucCrc8+0xc>
8110c4b4:	003b68fa 	trap	3
8110c4b8:	df000415 	stw	fp,16(sp)
8110c4bc:	df000404 	addi	fp,sp,16
8110c4c0:	e13ffd15 	stw	r4,-12(fp)
8110c4c4:	e17ffe15 	stw	r5,-8(fp)
8110c4c8:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
8110c4cc:	e0bffe17 	ldw	r2,-8(fp)
8110c4d0:	1000021e 	bne	r2,zero,8110c4dc <ucCrc8+0x30>
        return 0;
8110c4d4:	0005883a 	mov	r2,zero
8110c4d8:	00001906 	br	8110c540 <ucCrc8+0x94>
    crc &= 0xff;
8110c4dc:	e0bffd17 	ldw	r2,-12(fp)
8110c4e0:	10803fcc 	andi	r2,r2,255
8110c4e4:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
8110c4e8:	e0fffe17 	ldw	r3,-8(fp)
8110c4ec:	e0bfff17 	ldw	r2,-4(fp)
8110c4f0:	1885883a 	add	r2,r3,r2
8110c4f4:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
8110c4f8:	00000d06 	br	8110c530 <ucCrc8+0x84>
        crc = crc8_table[crc ^ *data++];
8110c4fc:	e0bffe17 	ldw	r2,-8(fp)
8110c500:	10c00044 	addi	r3,r2,1
8110c504:	e0fffe15 	stw	r3,-8(fp)
8110c508:	10800003 	ldbu	r2,0(r2)
8110c50c:	10c03fcc 	andi	r3,r2,255
8110c510:	e0bffd17 	ldw	r2,-12(fp)
8110c514:	1886f03a 	xor	r3,r3,r2
8110c518:	00a04534 	movhi	r2,33044
8110c51c:	10aca9c4 	addi	r2,r2,-19801
8110c520:	10c5883a 	add	r2,r2,r3
8110c524:	10800003 	ldbu	r2,0(r2)
8110c528:	10803fcc 	andi	r2,r2,255
8110c52c:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110c530:	e0fffe17 	ldw	r3,-8(fp)
8110c534:	e0bffc17 	ldw	r2,-16(fp)
8110c538:	18bff036 	bltu	r3,r2,8110c4fc <__reset+0xfb0ec4fc>
        crc = crc8_table[crc ^ *data++];
    return crc;
8110c53c:	e0bffd17 	ldw	r2,-12(fp)
}
8110c540:	e037883a 	mov	sp,fp
8110c544:	df000017 	ldw	fp,0(sp)
8110c548:	dec00104 	addi	sp,sp,4
8110c54c:	f800283a 	ret

8110c550 <ucCrc8wInit>:

unsigned char ucCrc8wInit(char const *data, size_t len)
{
8110c550:	defffb04 	addi	sp,sp,-20
8110c554:	de00012e 	bgeu	sp,et,8110c55c <ucCrc8wInit+0xc>
8110c558:	003b68fa 	trap	3
8110c55c:	dfc00415 	stw	ra,16(sp)
8110c560:	df000315 	stw	fp,12(sp)
8110c564:	df000304 	addi	fp,sp,12
8110c568:	e13ffe15 	stw	r4,-8(fp)
8110c56c:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;
	crc = ucCrc8(0, NULL, 0);
8110c570:	000d883a 	mov	r6,zero
8110c574:	000b883a 	mov	r5,zero
8110c578:	0009883a 	mov	r4,zero
8110c57c:	110c4ac0 	call	8110c4ac <ucCrc8>
8110c580:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, (unsigned char const *)data, len);
8110c584:	e0bffd03 	ldbu	r2,-12(fp)
8110c588:	e1bfff17 	ldw	r6,-4(fp)
8110c58c:	e17ffe17 	ldw	r5,-8(fp)
8110c590:	1009883a 	mov	r4,r2
8110c594:	110c4ac0 	call	8110c4ac <ucCrc8>
}
8110c598:	e037883a 	mov	sp,fp
8110c59c:	dfc00117 	ldw	ra,4(sp)
8110c5a0:	df000017 	ldw	fp,0(sp)
8110c5a4:	dec00204 	addi	sp,sp,8
8110c5a8:	f800283a 	ret

8110c5ac <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
8110c5ac:	defff904 	addi	sp,sp,-28
8110c5b0:	de00012e 	bgeu	sp,et,8110c5b8 <printErrorTask+0xc>
8110c5b4:	003b68fa 	trap	3
8110c5b8:	dfc00615 	stw	ra,24(sp)
8110c5bc:	df000515 	stw	fp,20(sp)
8110c5c0:	df000504 	addi	fp,sp,20
8110c5c4:	2005883a 	mov	r2,r4
8110c5c8:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
8110c5cc:	e03ffb15 	stw	zero,-20(fp)
8110c5d0:	e03ffc15 	stw	zero,-16(fp)
8110c5d4:	e03ffd15 	stw	zero,-12(fp)
8110c5d8:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
8110c5dc:	e0bfff03 	ldbu	r2,-4(fp)
8110c5e0:	100d883a 	mov	r6,r2
8110c5e4:	01604534 	movhi	r5,33044
8110c5e8:	296cea04 	addi	r5,r5,-19544
8110c5ec:	e13ffb04 	addi	r4,fp,-20
8110c5f0:	11116100 	call	81111610 <sprintf>
		debug(fp, buffer);
8110c5f4:	d0a04d17 	ldw	r2,-32460(gp)
8110c5f8:	e17ffb04 	addi	r5,fp,-20
8110c5fc:	1009883a 	mov	r4,r2
8110c600:	110fea80 	call	8110fea8 <fprintf>
	}
8110c604:	0001883a 	nop
8110c608:	e037883a 	mov	sp,fp
8110c60c:	dfc00117 	ldw	ra,4(sp)
8110c610:	df000017 	ldw	fp,0(sp)
8110c614:	dec00204 	addi	sp,sp,8
8110c618:	f800283a 	ret

8110c61c <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
8110c61c:	defffd04 	addi	sp,sp,-12
8110c620:	de00012e 	bgeu	sp,et,8110c628 <vFailCreateMutexSResources+0xc>
8110c624:	003b68fa 	trap	3
8110c628:	dfc00215 	stw	ra,8(sp)
8110c62c:	df000115 	stw	fp,4(sp)
8110c630:	df000104 	addi	fp,sp,4
8110c634:	2005883a 	mov	r2,r4
8110c638:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)");
8110c63c:	d0a04d17 	ldw	r2,-32460(gp)
8110c640:	100f883a 	mov	r7,r2
8110c644:	01800884 	movi	r6,34
8110c648:	01400044 	movi	r5,1
8110c64c:	01204534 	movhi	r4,33044
8110c650:	212ced04 	addi	r4,r4,-19532
8110c654:	11104940 	call	81110494 <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
8110c658:	e0bfff03 	ldbu	r2,-4(fp)
8110c65c:	1009883a 	mov	r4,r2
8110c660:	110c5ac0 	call	8110c5ac <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c664:	0001883a 	nop
8110c668:	e037883a 	mov	sp,fp
8110c66c:	dfc00117 	ldw	ra,4(sp)
8110c670:	df000017 	ldw	fp,0(sp)
8110c674:	dec00204 	addi	sp,sp,8
8110c678:	f800283a 	ret

8110c67c <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
8110c67c:	defffe04 	addi	sp,sp,-8
8110c680:	de00012e 	bgeu	sp,et,8110c688 <vFailCreateSemaphoreResources+0xc>
8110c684:	003b68fa 	trap	3
8110c688:	dfc00115 	stw	ra,4(sp)
8110c68c:	df000015 	stw	fp,0(sp)
8110c690:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)");
8110c694:	d0a04d17 	ldw	r2,-32460(gp)
8110c698:	100f883a 	mov	r7,r2
8110c69c:	01800944 	movi	r6,37
8110c6a0:	01400044 	movi	r5,1
8110c6a4:	01204534 	movhi	r4,33044
8110c6a8:	212cf604 	addi	r4,r4,-19496
8110c6ac:	11104940 	call	81110494 <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c6b0:	0001883a 	nop
8110c6b4:	e037883a 	mov	sp,fp
8110c6b8:	dfc00117 	ldw	ra,4(sp)
8110c6bc:	df000017 	ldw	fp,0(sp)
8110c6c0:	dec00204 	addi	sp,sp,8
8110c6c4:	f800283a 	ret

8110c6c8 <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
8110c6c8:	defffe04 	addi	sp,sp,-8
8110c6cc:	de00012e 	bgeu	sp,et,8110c6d4 <vFailTestCriticasParts+0xc>
8110c6d0:	003b68fa 	trap	3
8110c6d4:	dfc00115 	stw	ra,4(sp)
8110c6d8:	df000015 	stw	fp,0(sp)
8110c6dc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)");
8110c6e0:	d0a04d17 	ldw	r2,-32460(gp)
8110c6e4:	100f883a 	mov	r7,r2
8110c6e8:	01800784 	movi	r6,30
8110c6ec:	01400044 	movi	r5,1
8110c6f0:	01204534 	movhi	r4,33044
8110c6f4:	212d0004 	addi	r4,r4,-19456
8110c6f8:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c6fc:	0001883a 	nop
8110c700:	e037883a 	mov	sp,fp
8110c704:	dfc00117 	ldw	ra,4(sp)
8110c708:	df000017 	ldw	fp,0(sp)
8110c70c:	dec00204 	addi	sp,sp,8
8110c710:	f800283a 	ret

8110c714 <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
8110c714:	defffe04 	addi	sp,sp,-8
8110c718:	de00012e 	bgeu	sp,et,8110c720 <vFailSendxSemCommInit+0xc>
8110c71c:	003b68fa 	trap	3
8110c720:	dfc00115 	stw	ra,4(sp)
8110c724:	df000015 	stw	fp,0(sp)
8110c728:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
8110c72c:	d0a04d17 	ldw	r2,-32460(gp)
8110c730:	100f883a 	mov	r7,r2
8110c734:	01800744 	movi	r6,29
8110c738:	01400044 	movi	r5,1
8110c73c:	01204534 	movhi	r4,33044
8110c740:	212d0804 	addi	r4,r4,-19424
8110c744:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)");
8110c748:	d0a04d17 	ldw	r2,-32460(gp)
8110c74c:	100f883a 	mov	r7,r2
8110c750:	01800a04 	movi	r6,40
8110c754:	01400044 	movi	r5,1
8110c758:	01204534 	movhi	r4,33044
8110c75c:	212d1004 	addi	r4,r4,-19392
8110c760:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c764:	0001883a 	nop
8110c768:	e037883a 	mov	sp,fp
8110c76c:	dfc00117 	ldw	ra,4(sp)
8110c770:	df000017 	ldw	fp,0(sp)
8110c774:	dec00204 	addi	sp,sp,8
8110c778:	f800283a 	ret

8110c77c <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
8110c77c:	defffe04 	addi	sp,sp,-8
8110c780:	de00012e 	bgeu	sp,et,8110c788 <vFailSendPreParsedSemaphore+0xc>
8110c784:	003b68fa 	trap	3
8110c788:	dfc00115 	stw	ra,4(sp)
8110c78c:	df000015 	stw	fp,0(sp)
8110c790:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)");
8110c794:	d0a04d17 	ldw	r2,-32460(gp)
8110c798:	100f883a 	mov	r7,r2
8110c79c:	018008c4 	movi	r6,35
8110c7a0:	01400044 	movi	r5,1
8110c7a4:	01204534 	movhi	r4,33044
8110c7a8:	212d1b04 	addi	r4,r4,-19348
8110c7ac:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c7b0:	0001883a 	nop
8110c7b4:	e037883a 	mov	sp,fp
8110c7b8:	dfc00117 	ldw	ra,4(sp)
8110c7bc:	df000017 	ldw	fp,0(sp)
8110c7c0:	dec00204 	addi	sp,sp,8
8110c7c4:	f800283a 	ret

8110c7c8 <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110c7c8:	defffe04 	addi	sp,sp,-8
8110c7cc:	de00012e 	bgeu	sp,et,8110c7d4 <vFailSendPreAckReceiverSemaphore+0xc>
8110c7d0:	003b68fa 	trap	3
8110c7d4:	dfc00115 	stw	ra,4(sp)
8110c7d8:	df000015 	stw	fp,0(sp)
8110c7dc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)");
8110c7e0:	d0a04d17 	ldw	r2,-32460(gp)
8110c7e4:	100f883a 	mov	r7,r2
8110c7e8:	01800a04 	movi	r6,40
8110c7ec:	01400044 	movi	r5,1
8110c7f0:	01204534 	movhi	r4,33044
8110c7f4:	212d2404 	addi	r4,r4,-19312
8110c7f8:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c7fc:	0001883a 	nop
8110c800:	e037883a 	mov	sp,fp
8110c804:	dfc00117 	ldw	ra,4(sp)
8110c808:	df000017 	ldw	fp,0(sp)
8110c80c:	dec00204 	addi	sp,sp,8
8110c810:	f800283a 	ret

8110c814 <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110c814:	defffe04 	addi	sp,sp,-8
8110c818:	de00012e 	bgeu	sp,et,8110c820 <vFailSendPreAckSenderSemaphore+0xc>
8110c81c:	003b68fa 	trap	3
8110c820:	dfc00115 	stw	ra,4(sp)
8110c824:	df000015 	stw	fp,0(sp)
8110c828:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)");
8110c82c:	d0a04d17 	ldw	r2,-32460(gp)
8110c830:	100f883a 	mov	r7,r2
8110c834:	01800984 	movi	r6,38
8110c838:	01400044 	movi	r5,1
8110c83c:	01204534 	movhi	r4,33044
8110c840:	212d2f04 	addi	r4,r4,-19268
8110c844:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c848:	0001883a 	nop
8110c84c:	e037883a 	mov	sp,fp
8110c850:	dfc00117 	ldw	ra,4(sp)
8110c854:	df000017 	ldw	fp,0(sp)
8110c858:	dec00204 	addi	sp,sp,8
8110c85c:	f800283a 	ret

8110c860 <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110c860:	defffe04 	addi	sp,sp,-8
8110c864:	de00012e 	bgeu	sp,et,8110c86c <vFailGetCountSemaphoreSenderTask+0xc>
8110c868:	003b68fa 	trap	3
8110c86c:	dfc00115 	stw	ra,4(sp)
8110c870:	df000015 	stw	fp,0(sp)
8110c874:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)");
8110c878:	d0a04d17 	ldw	r2,-32460(gp)
8110c87c:	100f883a 	mov	r7,r2
8110c880:	01800a04 	movi	r6,40
8110c884:	01400044 	movi	r5,1
8110c888:	01204534 	movhi	r4,33044
8110c88c:	212d3904 	addi	r4,r4,-19228
8110c890:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110c894:	d0a04d17 	ldw	r2,-32460(gp)
8110c898:	100f883a 	mov	r7,r2
8110c89c:	01801104 	movi	r6,68
8110c8a0:	01400044 	movi	r5,1
8110c8a4:	01204534 	movhi	r4,33044
8110c8a8:	212d4404 	addi	r4,r4,-19184
8110c8ac:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c8b0:	0001883a 	nop
8110c8b4:	e037883a 	mov	sp,fp
8110c8b8:	dfc00117 	ldw	ra,4(sp)
8110c8bc:	df000017 	ldw	fp,0(sp)
8110c8c0:	dec00204 	addi	sp,sp,8
8110c8c4:	f800283a 	ret

8110c8c8 <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110c8c8:	defffe04 	addi	sp,sp,-8
8110c8cc:	de00012e 	bgeu	sp,et,8110c8d4 <vFailGetMutexSenderTask+0xc>
8110c8d0:	003b68fa 	trap	3
8110c8d4:	dfc00115 	stw	ra,4(sp)
8110c8d8:	df000015 	stw	fp,0(sp)
8110c8dc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)");
8110c8e0:	d0a04d17 	ldw	r2,-32460(gp)
8110c8e4:	100f883a 	mov	r7,r2
8110c8e8:	018007c4 	movi	r6,31
8110c8ec:	01400044 	movi	r5,1
8110c8f0:	01204534 	movhi	r4,33044
8110c8f4:	212d5604 	addi	r4,r4,-19112
8110c8f8:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110c8fc:	d0a04d17 	ldw	r2,-32460(gp)
8110c900:	100f883a 	mov	r7,r2
8110c904:	01801084 	movi	r6,66
8110c908:	01400044 	movi	r5,1
8110c90c:	01204534 	movhi	r4,33044
8110c910:	212d5e04 	addi	r4,r4,-19080
8110c914:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c918:	0001883a 	nop
8110c91c:	e037883a 	mov	sp,fp
8110c920:	dfc00117 	ldw	ra,4(sp)
8110c924:	df000017 	ldw	fp,0(sp)
8110c928:	dec00204 	addi	sp,sp,8
8110c92c:	f800283a 	ret

8110c930 <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110c930:	defffe04 	addi	sp,sp,-8
8110c934:	de00012e 	bgeu	sp,et,8110c93c <vFailGetCountSemaphoreReceiverTask+0xc>
8110c938:	003b68fa 	trap	3
8110c93c:	dfc00115 	stw	ra,4(sp)
8110c940:	df000015 	stw	fp,0(sp)
8110c944:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)");
8110c948:	d0a04d17 	ldw	r2,-32460(gp)
8110c94c:	100f883a 	mov	r7,r2
8110c950:	01800a84 	movi	r6,42
8110c954:	01400044 	movi	r5,1
8110c958:	01204534 	movhi	r4,33044
8110c95c:	212d6f04 	addi	r4,r4,-19012
8110c960:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110c964:	d0a04d17 	ldw	r2,-32460(gp)
8110c968:	100f883a 	mov	r7,r2
8110c96c:	01801184 	movi	r6,70
8110c970:	01400044 	movi	r5,1
8110c974:	01204534 	movhi	r4,33044
8110c978:	212d7a04 	addi	r4,r4,-18968
8110c97c:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c980:	0001883a 	nop
8110c984:	e037883a 	mov	sp,fp
8110c988:	dfc00117 	ldw	ra,4(sp)
8110c98c:	df000017 	ldw	fp,0(sp)
8110c990:	dec00204 	addi	sp,sp,8
8110c994:	f800283a 	ret

8110c998 <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110c998:	defffe04 	addi	sp,sp,-8
8110c99c:	de00012e 	bgeu	sp,et,8110c9a4 <vFailGetMutexReceiverTask+0xc>
8110c9a0:	003b68fa 	trap	3
8110c9a4:	dfc00115 	stw	ra,4(sp)
8110c9a8:	df000015 	stw	fp,0(sp)
8110c9ac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)");
8110c9b0:	d0a04d17 	ldw	r2,-32460(gp)
8110c9b4:	100f883a 	mov	r7,r2
8110c9b8:	01800844 	movi	r6,33
8110c9bc:	01400044 	movi	r5,1
8110c9c0:	01204534 	movhi	r4,33044
8110c9c4:	212d8c04 	addi	r4,r4,-18896
8110c9c8:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110c9cc:	d0a04d17 	ldw	r2,-32460(gp)
8110c9d0:	100f883a 	mov	r7,r2
8110c9d4:	01801104 	movi	r6,68
8110c9d8:	01400044 	movi	r5,1
8110c9dc:	01204534 	movhi	r4,33044
8110c9e0:	212d9504 	addi	r4,r4,-18860
8110c9e4:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c9e8:	0001883a 	nop
8110c9ec:	e037883a 	mov	sp,fp
8110c9f0:	dfc00117 	ldw	ra,4(sp)
8110c9f4:	df000017 	ldw	fp,0(sp)
8110c9f8:	dec00204 	addi	sp,sp,8
8110c9fc:	f800283a 	ret

8110ca00 <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110ca00:	defffe04 	addi	sp,sp,-8
8110ca04:	de00012e 	bgeu	sp,et,8110ca0c <vFailGetMutexTxUARTSenderTask+0xc>
8110ca08:	003b68fa 	trap	3
8110ca0c:	dfc00115 	stw	ra,4(sp)
8110ca10:	df000015 	stw	fp,0(sp)
8110ca14:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)");
8110ca18:	d0a04d17 	ldw	r2,-32460(gp)
8110ca1c:	100f883a 	mov	r7,r2
8110ca20:	01800944 	movi	r6,37
8110ca24:	01400044 	movi	r5,1
8110ca28:	01204534 	movhi	r4,33044
8110ca2c:	212da704 	addi	r4,r4,-18788
8110ca30:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110ca34:	d0a04d17 	ldw	r2,-32460(gp)
8110ca38:	100f883a 	mov	r7,r2
8110ca3c:	01801044 	movi	r6,65
8110ca40:	01400044 	movi	r5,1
8110ca44:	01204534 	movhi	r4,33044
8110ca48:	212db104 	addi	r4,r4,-18748
8110ca4c:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ca50:	0001883a 	nop
8110ca54:	e037883a 	mov	sp,fp
8110ca58:	dfc00117 	ldw	ra,4(sp)
8110ca5c:	df000017 	ldw	fp,0(sp)
8110ca60:	dec00204 	addi	sp,sp,8
8110ca64:	f800283a 	ret

8110ca68 <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110ca68:	defffe04 	addi	sp,sp,-8
8110ca6c:	de00012e 	bgeu	sp,et,8110ca74 <vFailGetMacRTC+0xc>
8110ca70:	003b68fa 	trap	3
8110ca74:	dfc00115 	stw	ra,4(sp)
8110ca78:	df000015 	stw	fp,0(sp)
8110ca7c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC");
8110ca80:	d0a04d17 	ldw	r2,-32460(gp)
8110ca84:	100f883a 	mov	r7,r2
8110ca88:	01800384 	movi	r6,14
8110ca8c:	01400044 	movi	r5,1
8110ca90:	01204534 	movhi	r4,33044
8110ca94:	212dc204 	addi	r4,r4,-18680
8110ca98:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ca9c:	0001883a 	nop
8110caa0:	e037883a 	mov	sp,fp
8110caa4:	dfc00117 	ldw	ra,4(sp)
8110caa8:	df000017 	ldw	fp,0(sp)
8110caac:	dec00204 	addi	sp,sp,8
8110cab0:	f800283a 	ret

8110cab4 <vFailInitialization>:


void vFailInitialization( void )
{
8110cab4:	defffe04 	addi	sp,sp,-8
8110cab8:	de00012e 	bgeu	sp,et,8110cac0 <vFailInitialization+0xc>
8110cabc:	003b68fa 	trap	3
8110cac0:	dfc00115 	stw	ra,4(sp)
8110cac4:	df000015 	stw	fp,0(sp)
8110cac8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization");
8110cacc:	d0a04d17 	ldw	r2,-32460(gp)
8110cad0:	100f883a 	mov	r7,r2
8110cad4:	018004c4 	movi	r6,19
8110cad8:	01400044 	movi	r5,1
8110cadc:	01204534 	movhi	r4,33044
8110cae0:	212dc604 	addi	r4,r4,-18664
8110cae4:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cae8:	0001883a 	nop
8110caec:	e037883a 	mov	sp,fp
8110caf0:	dfc00117 	ldw	ra,4(sp)
8110caf4:	df000017 	ldw	fp,0(sp)
8110caf8:	dec00204 	addi	sp,sp,8
8110cafc:	f800283a 	ret

8110cb00 <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110cb00:	defffe04 	addi	sp,sp,-8
8110cb04:	de00012e 	bgeu	sp,et,8110cb0c <vFailReceiverCreate+0xc>
8110cb08:	003b68fa 	trap	3
8110cb0c:	dfc00115 	stw	ra,4(sp)
8110cb10:	df000015 	stw	fp,0(sp)
8110cb14:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask");
8110cb18:	d0a04d17 	ldw	r2,-32460(gp)
8110cb1c:	100f883a 	mov	r7,r2
8110cb20:	01800444 	movi	r6,17
8110cb24:	01400044 	movi	r5,1
8110cb28:	01204534 	movhi	r4,33044
8110cb2c:	212dcb04 	addi	r4,r4,-18644
8110cb30:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cb34:	0001883a 	nop
8110cb38:	e037883a 	mov	sp,fp
8110cb3c:	dfc00117 	ldw	ra,4(sp)
8110cb40:	df000017 	ldw	fp,0(sp)
8110cb44:	dec00204 	addi	sp,sp,8
8110cb48:	f800283a 	ret

8110cb4c <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110cb4c:	defffe04 	addi	sp,sp,-8
8110cb50:	de00012e 	bgeu	sp,et,8110cb58 <vFailSenderCreate+0xc>
8110cb54:	003b68fa 	trap	3
8110cb58:	dfc00115 	stw	ra,4(sp)
8110cb5c:	df000015 	stw	fp,0(sp)
8110cb60:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate");
8110cb64:	d0a04d17 	ldw	r2,-32460(gp)
8110cb68:	100f883a 	mov	r7,r2
8110cb6c:	01800444 	movi	r6,17
8110cb70:	01400044 	movi	r5,1
8110cb74:	01204534 	movhi	r4,33044
8110cb78:	212dd004 	addi	r4,r4,-18624
8110cb7c:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cb80:	0001883a 	nop
8110cb84:	e037883a 	mov	sp,fp
8110cb88:	dfc00117 	ldw	ra,4(sp)
8110cb8c:	df000017 	ldw	fp,0(sp)
8110cb90:	dec00204 	addi	sp,sp,8
8110cb94:	f800283a 	ret

8110cb98 <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110cb98:	defffe04 	addi	sp,sp,-8
8110cb9c:	de00012e 	bgeu	sp,et,8110cba4 <vFailDeleteInitialization+0xc>
8110cba0:	003b68fa 	trap	3
8110cba4:	dfc00115 	stw	ra,4(sp)
8110cba8:	df000015 	stw	fp,0(sp)
8110cbac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization");
8110cbb0:	d0a04d17 	ldw	r2,-32460(gp)
8110cbb4:	100f883a 	mov	r7,r2
8110cbb8:	01800644 	movi	r6,25
8110cbbc:	01400044 	movi	r5,1
8110cbc0:	01204534 	movhi	r4,33044
8110cbc4:	212dd504 	addi	r4,r4,-18604
8110cbc8:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cbcc:	0001883a 	nop
8110cbd0:	e037883a 	mov	sp,fp
8110cbd4:	dfc00117 	ldw	ra,4(sp)
8110cbd8:	df000017 	ldw	fp,0(sp)
8110cbdc:	dec00204 	addi	sp,sp,8
8110cbe0:	f800283a 	ret

8110cbe4 <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110cbe4:	defffe04 	addi	sp,sp,-8
8110cbe8:	de00012e 	bgeu	sp,et,8110cbf0 <vFailSetCountSemaphorexBuffer32+0xc>
8110cbec:	003b68fa 	trap	3
8110cbf0:	dfc00115 	stw	ra,4(sp)
8110cbf4:	df000015 	stw	fp,0(sp)
8110cbf8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)");
8110cbfc:	d0a04d17 	ldw	r2,-32460(gp)
8110cc00:	100f883a 	mov	r7,r2
8110cc04:	018009c4 	movi	r6,39
8110cc08:	01400044 	movi	r5,1
8110cc0c:	01204534 	movhi	r4,33044
8110cc10:	212ddc04 	addi	r4,r4,-18576
8110cc14:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110cc18:	d0a04d17 	ldw	r2,-32460(gp)
8110cc1c:	100f883a 	mov	r7,r2
8110cc20:	018008c4 	movi	r6,35
8110cc24:	01400044 	movi	r5,1
8110cc28:	01204534 	movhi	r4,33044
8110cc2c:	212de604 	addi	r4,r4,-18536
8110cc30:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cc34:	0001883a 	nop
8110cc38:	e037883a 	mov	sp,fp
8110cc3c:	dfc00117 	ldw	ra,4(sp)
8110cc40:	df000017 	ldw	fp,0(sp)
8110cc44:	dec00204 	addi	sp,sp,8
8110cc48:	f800283a 	ret

8110cc4c <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110cc4c:	defffe04 	addi	sp,sp,-8
8110cc50:	de00012e 	bgeu	sp,et,8110cc58 <vFailSetCountSemaphorexBuffer64+0xc>
8110cc54:	003b68fa 	trap	3
8110cc58:	dfc00115 	stw	ra,4(sp)
8110cc5c:	df000015 	stw	fp,0(sp)
8110cc60:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)");
8110cc64:	d0a04d17 	ldw	r2,-32460(gp)
8110cc68:	100f883a 	mov	r7,r2
8110cc6c:	018009c4 	movi	r6,39
8110cc70:	01400044 	movi	r5,1
8110cc74:	01204534 	movhi	r4,33044
8110cc78:	212def04 	addi	r4,r4,-18500
8110cc7c:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110cc80:	d0a04d17 	ldw	r2,-32460(gp)
8110cc84:	100f883a 	mov	r7,r2
8110cc88:	018008c4 	movi	r6,35
8110cc8c:	01400044 	movi	r5,1
8110cc90:	01204534 	movhi	r4,33044
8110cc94:	212de604 	addi	r4,r4,-18536
8110cc98:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cc9c:	0001883a 	nop
8110cca0:	e037883a 	mov	sp,fp
8110cca4:	dfc00117 	ldw	ra,4(sp)
8110cca8:	df000017 	ldw	fp,0(sp)
8110ccac:	dec00204 	addi	sp,sp,8
8110ccb0:	f800283a 	ret

8110ccb4 <vFailSetCountSemaphorexBuffer128>:

void vFailSetCountSemaphorexBuffer128( void )
{
8110ccb4:	defffe04 	addi	sp,sp,-8
8110ccb8:	de00012e 	bgeu	sp,et,8110ccc0 <vFailSetCountSemaphorexBuffer128+0xc>
8110ccbc:	003b68fa 	trap	3
8110ccc0:	dfc00115 	stw	ra,4(sp)
8110ccc4:	df000015 	stw	fp,0(sp)
8110ccc8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)");
8110cccc:	d0a04d17 	ldw	r2,-32460(gp)
8110ccd0:	100f883a 	mov	r7,r2
8110ccd4:	01800a04 	movi	r6,40
8110ccd8:	01400044 	movi	r5,1
8110ccdc:	01204534 	movhi	r4,33044
8110cce0:	212df904 	addi	r4,r4,-18460
8110cce4:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110cce8:	d0a04d17 	ldw	r2,-32460(gp)
8110ccec:	100f883a 	mov	r7,r2
8110ccf0:	018008c4 	movi	r6,35
8110ccf4:	01400044 	movi	r5,1
8110ccf8:	01204534 	movhi	r4,33044
8110ccfc:	212de604 	addi	r4,r4,-18536
8110cd00:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cd04:	0001883a 	nop
8110cd08:	e037883a 	mov	sp,fp
8110cd0c:	dfc00117 	ldw	ra,4(sp)
8110cd10:	df000017 	ldw	fp,0(sp)
8110cd14:	dec00204 	addi	sp,sp,8
8110cd18:	f800283a 	ret

8110cd1c <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
8110cd1c:	defffe04 	addi	sp,sp,-8
8110cd20:	de00012e 	bgeu	sp,et,8110cd28 <vFailFoundBufferRetransmission+0xc>
8110cd24:	003b68fa 	trap	3
8110cd28:	dfc00115 	stw	ra,4(sp)
8110cd2c:	df000015 	stw	fp,0(sp)
8110cd30:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailFoundBufferRetransmission. (exit)");
8110cd34:	d0a04d17 	ldw	r2,-32460(gp)
8110cd38:	100f883a 	mov	r7,r2
8110cd3c:	01800984 	movi	r6,38
8110cd40:	01400044 	movi	r5,1
8110cd44:	01204534 	movhi	r4,33044
8110cd48:	212e0404 	addi	r4,r4,-18416
8110cd4c:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(vReceiverAckTask)\n");
8110cd50:	d0a04d17 	ldw	r2,-32460(gp)
8110cd54:	100f883a 	mov	r7,r2
8110cd58:	01801284 	movi	r6,74
8110cd5c:	01400044 	movi	r5,1
8110cd60:	01204534 	movhi	r4,33044
8110cd64:	212e0e04 	addi	r4,r4,-18376
8110cd68:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cd6c:	0001883a 	nop
8110cd70:	e037883a 	mov	sp,fp
8110cd74:	dfc00117 	ldw	ra,4(sp)
8110cd78:	df000017 	ldw	fp,0(sp)
8110cd7c:	dec00204 	addi	sp,sp,8
8110cd80:	f800283a 	ret

8110cd84 <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
8110cd84:	defffe04 	addi	sp,sp,-8
8110cd88:	de00012e 	bgeu	sp,et,8110cd90 <vFailGetCountSemaphorePreParsedBuffer+0xc>
8110cd8c:	003b68fa 	trap	3
8110cd90:	dfc00115 	stw	ra,4(sp)
8110cd94:	df000015 	stw	fp,0(sp)
8110cd98:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)");
8110cd9c:	d0a04d17 	ldw	r2,-32460(gp)
8110cda0:	100f883a 	mov	r7,r2
8110cda4:	01800b44 	movi	r6,45
8110cda8:	01400044 	movi	r5,1
8110cdac:	01204534 	movhi	r4,33044
8110cdb0:	212e2104 	addi	r4,r4,-18300
8110cdb4:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8110cdb8:	d0a04d17 	ldw	r2,-32460(gp)
8110cdbc:	100f883a 	mov	r7,r2
8110cdc0:	018010c4 	movi	r6,67
8110cdc4:	01400044 	movi	r5,1
8110cdc8:	01204534 	movhi	r4,33044
8110cdcc:	212e2d04 	addi	r4,r4,-18252
8110cdd0:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cdd4:	0001883a 	nop
8110cdd8:	e037883a 	mov	sp,fp
8110cddc:	dfc00117 	ldw	ra,4(sp)
8110cde0:	df000017 	ldw	fp,0(sp)
8110cde4:	dec00204 	addi	sp,sp,8
8110cde8:	f800283a 	ret

8110cdec <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
8110cdec:	defffe04 	addi	sp,sp,-8
8110cdf0:	de00012e 	bgeu	sp,et,8110cdf8 <vFailGetxMutexPreParsedParserRxTask+0xc>
8110cdf4:	003b68fa 	trap	3
8110cdf8:	dfc00115 	stw	ra,4(sp)
8110cdfc:	df000015 	stw	fp,0(sp)
8110ce00:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)");
8110ce04:	d0a04d17 	ldw	r2,-32460(gp)
8110ce08:	100f883a 	mov	r7,r2
8110ce0c:	01800ac4 	movi	r6,43
8110ce10:	01400044 	movi	r5,1
8110ce14:	01204534 	movhi	r4,33044
8110ce18:	212e3e04 	addi	r4,r4,-18184
8110ce1c:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
8110ce20:	d0a04d17 	ldw	r2,-32460(gp)
8110ce24:	100f883a 	mov	r7,r2
8110ce28:	01800fc4 	movi	r6,63
8110ce2c:	01400044 	movi	r5,1
8110ce30:	01204534 	movhi	r4,33044
8110ce34:	212e4904 	addi	r4,r4,-18140
8110ce38:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ce3c:	0001883a 	nop
8110ce40:	e037883a 	mov	sp,fp
8110ce44:	dfc00117 	ldw	ra,4(sp)
8110ce48:	df000017 	ldw	fp,0(sp)
8110ce4c:	dec00204 	addi	sp,sp,8
8110ce50:	f800283a 	ret

8110ce54 <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
8110ce54:	defffe04 	addi	sp,sp,-8
8110ce58:	de00012e 	bgeu	sp,et,8110ce60 <vNoContentInPreParsedBuffer+0xc>
8110ce5c:	003b68fa 	trap	3
8110ce60:	dfc00115 	stw	ra,4(sp)
8110ce64:	df000015 	stw	fp,0(sp)
8110ce68:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)");
8110ce6c:	d0a04d17 	ldw	r2,-32460(gp)
8110ce70:	100f883a 	mov	r7,r2
8110ce74:	018008c4 	movi	r6,35
8110ce78:	01400044 	movi	r5,1
8110ce7c:	01204534 	movhi	r4,33044
8110ce80:	212e5904 	addi	r4,r4,-18076
8110ce84:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8110ce88:	d0a04d17 	ldw	r2,-32460(gp)
8110ce8c:	100f883a 	mov	r7,r2
8110ce90:	01801684 	movi	r6,90
8110ce94:	01400044 	movi	r5,1
8110ce98:	01204534 	movhi	r4,33044
8110ce9c:	212e6204 	addi	r4,r4,-18040
8110cea0:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cea4:	0001883a 	nop
8110cea8:	e037883a 	mov	sp,fp
8110ceac:	dfc00117 	ldw	ra,4(sp)
8110ceb0:	df000017 	ldw	fp,0(sp)
8110ceb4:	dec00204 	addi	sp,sp,8
8110ceb8:	f800283a 	ret

8110cebc <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
8110cebc:	defffe04 	addi	sp,sp,-8
8110cec0:	de00012e 	bgeu	sp,et,8110cec8 <vCouldNotSendEthConfUART+0xc>
8110cec4:	003b68fa 	trap	3
8110cec8:	dfc00115 	stw	ra,4(sp)
8110cecc:	df000015 	stw	fp,0(sp)
8110ced0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)");
8110ced4:	d0a04d17 	ldw	r2,-32460(gp)
8110ced8:	100f883a 	mov	r7,r2
8110cedc:	01800804 	movi	r6,32
8110cee0:	01400044 	movi	r5,1
8110cee4:	01204534 	movhi	r4,33044
8110cee8:	212e7904 	addi	r4,r4,-17948
8110ceec:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
8110cef0:	d0a04d17 	ldw	r2,-32460(gp)
8110cef4:	100f883a 	mov	r7,r2
8110cef8:	01801784 	movi	r6,94
8110cefc:	01400044 	movi	r5,1
8110cf00:	01204534 	movhi	r4,33044
8110cf04:	212e8204 	addi	r4,r4,-17912
8110cf08:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cf0c:	0001883a 	nop
8110cf10:	e037883a 	mov	sp,fp
8110cf14:	dfc00117 	ldw	ra,4(sp)
8110cf18:	df000017 	ldw	fp,0(sp)
8110cf1c:	dec00204 	addi	sp,sp,8
8110cf20:	f800283a 	ret

8110cf24 <vFailSendNack>:

void vFailSendNack( void )
{
8110cf24:	defffe04 	addi	sp,sp,-8
8110cf28:	de00012e 	bgeu	sp,et,8110cf30 <vFailSendNack+0xc>
8110cf2c:	003b68fa 	trap	3
8110cf30:	dfc00115 	stw	ra,4(sp)
8110cf34:	df000015 	stw	fp,0(sp)
8110cf38:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)");
8110cf3c:	d0a04d17 	ldw	r2,-32460(gp)
8110cf40:	100f883a 	mov	r7,r2
8110cf44:	01800544 	movi	r6,21
8110cf48:	01400044 	movi	r5,1
8110cf4c:	01204534 	movhi	r4,33044
8110cf50:	212e9a04 	addi	r4,r4,-17816
8110cf54:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
8110cf58:	d0a04d17 	ldw	r2,-32460(gp)
8110cf5c:	100f883a 	mov	r7,r2
8110cf60:	01800a84 	movi	r6,42
8110cf64:	01400044 	movi	r5,1
8110cf68:	01204534 	movhi	r4,33044
8110cf6c:	212ea004 	addi	r4,r4,-17792
8110cf70:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cf74:	0001883a 	nop
8110cf78:	e037883a 	mov	sp,fp
8110cf7c:	dfc00117 	ldw	ra,4(sp)
8110cf80:	df000017 	ldw	fp,0(sp)
8110cf84:	dec00204 	addi	sp,sp,8
8110cf88:	f800283a 	ret

8110cf8c <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
8110cf8c:	defffe04 	addi	sp,sp,-8
8110cf90:	de00012e 	bgeu	sp,et,8110cf98 <vFailSetPreAckSenderBuffer+0xc>
8110cf94:	003b68fa 	trap	3
8110cf98:	dfc00115 	stw	ra,4(sp)
8110cf9c:	df000015 	stw	fp,0(sp)
8110cfa0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)");
8110cfa4:	d0a04d17 	ldw	r2,-32460(gp)
8110cfa8:	100f883a 	mov	r7,r2
8110cfac:	01800884 	movi	r6,34
8110cfb0:	01400044 	movi	r5,1
8110cfb4:	01204534 	movhi	r4,33044
8110cfb8:	212eab04 	addi	r4,r4,-17748
8110cfbc:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
8110cfc0:	d0a04d17 	ldw	r2,-32460(gp)
8110cfc4:	100f883a 	mov	r7,r2
8110cfc8:	01801584 	movi	r6,86
8110cfcc:	01400044 	movi	r5,1
8110cfd0:	01204534 	movhi	r4,33044
8110cfd4:	212eb404 	addi	r4,r4,-17712
8110cfd8:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cfdc:	0001883a 	nop
8110cfe0:	e037883a 	mov	sp,fp
8110cfe4:	dfc00117 	ldw	ra,4(sp)
8110cfe8:	df000017 	ldw	fp,0(sp)
8110cfec:	dec00204 	addi	sp,sp,8
8110cff0:	f800283a 	ret

8110cff4 <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
8110cff4:	defffe04 	addi	sp,sp,-8
8110cff8:	de00012e 	bgeu	sp,et,8110d000 <vFailSetPreParsedBuffer+0xc>
8110cffc:	003b68fa 	trap	3
8110d000:	dfc00115 	stw	ra,4(sp)
8110d004:	df000015 	stw	fp,0(sp)
8110d008:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)");
8110d00c:	d0a04d17 	ldw	r2,-32460(gp)
8110d010:	100f883a 	mov	r7,r2
8110d014:	018007c4 	movi	r6,31
8110d018:	01400044 	movi	r5,1
8110d01c:	01204534 	movhi	r4,33044
8110d020:	212eca04 	addi	r4,r4,-17624
8110d024:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
8110d028:	d0a04d17 	ldw	r2,-32460(gp)
8110d02c:	100f883a 	mov	r7,r2
8110d030:	018013c4 	movi	r6,79
8110d034:	01400044 	movi	r5,1
8110d038:	01204534 	movhi	r4,33044
8110d03c:	212ed204 	addi	r4,r4,-17592
8110d040:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d044:	0001883a 	nop
8110d048:	e037883a 	mov	sp,fp
8110d04c:	dfc00117 	ldw	ra,4(sp)
8110d050:	df000017 	ldw	fp,0(sp)
8110d054:	dec00204 	addi	sp,sp,8
8110d058:	f800283a 	ret

8110d05c <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
8110d05c:	defffe04 	addi	sp,sp,-8
8110d060:	de00012e 	bgeu	sp,et,8110d068 <vFailSetPreAckReceiverBuffer+0xc>
8110d064:	003b68fa 	trap	3
8110d068:	dfc00115 	stw	ra,4(sp)
8110d06c:	df000015 	stw	fp,0(sp)
8110d070:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)");
8110d074:	d0a04d17 	ldw	r2,-32460(gp)
8110d078:	100f883a 	mov	r7,r2
8110d07c:	01800904 	movi	r6,36
8110d080:	01400044 	movi	r5,1
8110d084:	01204534 	movhi	r4,33044
8110d088:	212ee604 	addi	r4,r4,-17512
8110d08c:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
8110d090:	d0a04d17 	ldw	r2,-32460(gp)
8110d094:	100f883a 	mov	r7,r2
8110d098:	018015c4 	movi	r6,87
8110d09c:	01400044 	movi	r5,1
8110d0a0:	01204534 	movhi	r4,33044
8110d0a4:	212ef004 	addi	r4,r4,-17472
8110d0a8:	11104940 	call	81110494 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d0ac:	0001883a 	nop
8110d0b0:	e037883a 	mov	sp,fp
8110d0b4:	dfc00117 	ldw	ra,4(sp)
8110d0b8:	df000017 	ldw	fp,0(sp)
8110d0bc:	dec00204 	addi	sp,sp,8
8110d0c0:	f800283a 	ret

8110d0c4 <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
8110d0c4:	defffe04 	addi	sp,sp,-8
8110d0c8:	de00012e 	bgeu	sp,et,8110d0d0 <vFailParserCommTaskCreate+0xc>
8110d0cc:	003b68fa 	trap	3
8110d0d0:	dfc00115 	stw	ra,4(sp)
8110d0d4:	df000015 	stw	fp,0(sp)
8110d0d8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate");
8110d0dc:	d0a04d17 	ldw	r2,-32460(gp)
8110d0e0:	100f883a 	mov	r7,r2
8110d0e4:	01800644 	movi	r6,25
8110d0e8:	01400044 	movi	r5,1
8110d0ec:	01204534 	movhi	r4,33044
8110d0f0:	212f0604 	addi	r4,r4,-17384
8110d0f4:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d0f8:	0001883a 	nop
8110d0fc:	e037883a 	mov	sp,fp
8110d100:	dfc00117 	ldw	ra,4(sp)
8110d104:	df000017 	ldw	fp,0(sp)
8110d108:	dec00204 	addi	sp,sp,8
8110d10c:	f800283a 	ret

8110d110 <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
8110d110:	defffe04 	addi	sp,sp,-8
8110d114:	de00012e 	bgeu	sp,et,8110d11c <vFailInAckHandlerTaskCreate+0xc>
8110d118:	003b68fa 	trap	3
8110d11c:	dfc00115 	stw	ra,4(sp)
8110d120:	df000015 	stw	fp,0(sp)
8110d124:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate");
8110d128:	d0a04d17 	ldw	r2,-32460(gp)
8110d12c:	100f883a 	mov	r7,r2
8110d130:	018006c4 	movi	r6,27
8110d134:	01400044 	movi	r5,1
8110d138:	01204534 	movhi	r4,33044
8110d13c:	212f0d04 	addi	r4,r4,-17356
8110d140:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d144:	0001883a 	nop
8110d148:	e037883a 	mov	sp,fp
8110d14c:	dfc00117 	ldw	ra,4(sp)
8110d150:	df000017 	ldw	fp,0(sp)
8110d154:	dec00204 	addi	sp,sp,8
8110d158:	f800283a 	ret

8110d15c <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
8110d15c:	defffe04 	addi	sp,sp,-8
8110d160:	de00012e 	bgeu	sp,et,8110d168 <vFailOutAckHandlerTaskCreate+0xc>
8110d164:	003b68fa 	trap	3
8110d168:	dfc00115 	stw	ra,4(sp)
8110d16c:	df000015 	stw	fp,0(sp)
8110d170:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate");
8110d174:	d0a04d17 	ldw	r2,-32460(gp)
8110d178:	100f883a 	mov	r7,r2
8110d17c:	018006c4 	movi	r6,27
8110d180:	01400044 	movi	r5,1
8110d184:	01204534 	movhi	r4,33044
8110d188:	212f0d04 	addi	r4,r4,-17356
8110d18c:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d190:	0001883a 	nop
8110d194:	e037883a 	mov	sp,fp
8110d198:	dfc00117 	ldw	ra,4(sp)
8110d19c:	df000017 	ldw	fp,0(sp)
8110d1a0:	dec00204 	addi	sp,sp,8
8110d1a4:	f800283a 	ret

8110d1a8 <vFailCreateTimerRetransmisison>:


void vFailCreateTimerRetransmisison( void )
{
8110d1a8:	defffe04 	addi	sp,sp,-8
8110d1ac:	de00012e 	bgeu	sp,et,8110d1b4 <vFailCreateTimerRetransmisison+0xc>
8110d1b0:	003b68fa 	trap	3
8110d1b4:	dfc00115 	stw	ra,4(sp)
8110d1b8:	df000015 	stw	fp,0(sp)
8110d1bc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateTimerRetransmisison");
8110d1c0:	d0a04d17 	ldw	r2,-32460(gp)
8110d1c4:	100f883a 	mov	r7,r2
8110d1c8:	01800784 	movi	r6,30
8110d1cc:	01400044 	movi	r5,1
8110d1d0:	01204534 	movhi	r4,33044
8110d1d4:	212f1404 	addi	r4,r4,-17328
8110d1d8:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d1dc:	0001883a 	nop
8110d1e0:	e037883a 	mov	sp,fp
8110d1e4:	dfc00117 	ldw	ra,4(sp)
8110d1e8:	df000017 	ldw	fp,0(sp)
8110d1ec:	dec00204 	addi	sp,sp,8
8110d1f0:	f800283a 	ret

8110d1f4 <vCouldNotCheckBufferTimeOutFunction>:


void vCouldNotCheckBufferTimeOutFunction( void )
{
8110d1f4:	defffe04 	addi	sp,sp,-8
8110d1f8:	de00012e 	bgeu	sp,et,8110d200 <vCouldNotCheckBufferTimeOutFunction+0xc>
8110d1fc:	003b68fa 	trap	3
8110d200:	dfc00115 	stw	ra,4(sp)
8110d204:	df000015 	stw	fp,0(sp)
8110d208:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotCheckBufferTimeOutFunction");
8110d20c:	d0a04d17 	ldw	r2,-32460(gp)
8110d210:	100f883a 	mov	r7,r2
8110d214:	018008c4 	movi	r6,35
8110d218:	01400044 	movi	r5,1
8110d21c:	01204534 	movhi	r4,33044
8110d220:	212f1c04 	addi	r4,r4,-17296
8110d224:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d228:	0001883a 	nop
8110d22c:	e037883a 	mov	sp,fp
8110d230:	dfc00117 	ldw	ra,4(sp)
8110d234:	df000017 	ldw	fp,0(sp)
8110d238:	dec00204 	addi	sp,sp,8
8110d23c:	f800283a 	ret

8110d240 <vFailTimeoutCheckerTaskCreate>:

void vFailTimeoutCheckerTaskCreate( void )
{
8110d240:	defffe04 	addi	sp,sp,-8
8110d244:	de00012e 	bgeu	sp,et,8110d24c <vFailTimeoutCheckerTaskCreate+0xc>
8110d248:	003b68fa 	trap	3
8110d24c:	dfc00115 	stw	ra,4(sp)
8110d250:	df000015 	stw	fp,0(sp)
8110d254:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTimeoutCheckerTaskCreate");
8110d258:	d0a04d17 	ldw	r2,-32460(gp)
8110d25c:	100f883a 	mov	r7,r2
8110d260:	01800744 	movi	r6,29
8110d264:	01400044 	movi	r5,1
8110d268:	01204534 	movhi	r4,33044
8110d26c:	212f2504 	addi	r4,r4,-17260
8110d270:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d274:	0001883a 	nop
8110d278:	e037883a 	mov	sp,fp
8110d27c:	dfc00117 	ldw	ra,4(sp)
8110d280:	df000017 	ldw	fp,0(sp)
8110d284:	dec00204 	addi	sp,sp,8
8110d288:	f800283a 	ret

8110d28c <vFailGetBlockingSemTimeoutTask>:


void vFailGetBlockingSemTimeoutTask( void )
{
8110d28c:	defffe04 	addi	sp,sp,-8
8110d290:	de00012e 	bgeu	sp,et,8110d298 <vFailGetBlockingSemTimeoutTask+0xc>
8110d294:	003b68fa 	trap	3
8110d298:	dfc00115 	stw	ra,4(sp)
8110d29c:	df000015 	stw	fp,0(sp)
8110d2a0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetBlockingSemTimeoutTask. (exit)");
8110d2a4:	d0a04d17 	ldw	r2,-32460(gp)
8110d2a8:	100f883a 	mov	r7,r2
8110d2ac:	01800984 	movi	r6,38
8110d2b0:	01400044 	movi	r5,1
8110d2b4:	01204534 	movhi	r4,33044
8110d2b8:	212f2d04 	addi	r4,r4,-17228
8110d2bc:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Retrun from a blocking (0) OSSemPend with a error.");
8110d2c0:	d0a04d17 	ldw	r2,-32460(gp)
8110d2c4:	100f883a 	mov	r7,r2
8110d2c8:	01800c84 	movi	r6,50
8110d2cc:	01400044 	movi	r5,1
8110d2d0:	01204534 	movhi	r4,33044
8110d2d4:	212f3704 	addi	r4,r4,-17188
8110d2d8:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d2dc:	0001883a 	nop
8110d2e0:	e037883a 	mov	sp,fp
8110d2e4:	dfc00117 	ldw	ra,4(sp)
8110d2e8:	df000017 	ldw	fp,0(sp)
8110d2ec:	dec00204 	addi	sp,sp,8
8110d2f0:	f800283a 	ret

8110d2f4 <vFailPostBlockingSemTimeoutTask>:

void vFailPostBlockingSemTimeoutTask( void )
{
8110d2f4:	defffe04 	addi	sp,sp,-8
8110d2f8:	de00012e 	bgeu	sp,et,8110d300 <vFailPostBlockingSemTimeoutTask+0xc>
8110d2fc:	003b68fa 	trap	3
8110d300:	dfc00115 	stw	ra,4(sp)
8110d304:	df000015 	stw	fp,0(sp)
8110d308:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailPostBlockingSemTimeoutTask. (exit)");
8110d30c:	d0a04d17 	ldw	r2,-32460(gp)
8110d310:	100f883a 	mov	r7,r2
8110d314:	018009c4 	movi	r6,39
8110d318:	01400044 	movi	r5,1
8110d31c:	01204534 	movhi	r4,33044
8110d320:	212f4404 	addi	r4,r4,-17136
8110d324:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not Post the semaphore for the TimeoutTask.");
8110d328:	d0a04d17 	ldw	r2,-32460(gp)
8110d32c:	100f883a 	mov	r7,r2
8110d330:	01800c44 	movi	r6,49
8110d334:	01400044 	movi	r5,1
8110d338:	01204534 	movhi	r4,33044
8110d33c:	212f4e04 	addi	r4,r4,-17096
8110d340:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d344:	0001883a 	nop
8110d348:	e037883a 	mov	sp,fp
8110d34c:	dfc00117 	ldw	ra,4(sp)
8110d350:	df000017 	ldw	fp,0(sp)
8110d354:	dec00204 	addi	sp,sp,8
8110d358:	f800283a 	ret

8110d35c <vFailCouldNotRetransmitTimeoutTask>:


void vFailCouldNotRetransmitTimeoutTask( void )
{
8110d35c:	defffe04 	addi	sp,sp,-8
8110d360:	de00012e 	bgeu	sp,et,8110d368 <vFailCouldNotRetransmitTimeoutTask+0xc>
8110d364:	003b68fa 	trap	3
8110d368:	dfc00115 	stw	ra,4(sp)
8110d36c:	df000015 	stw	fp,0(sp)
8110d370:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCouldNotRetransmitTimeoutTask. (exit)");
8110d374:	d0a04d17 	ldw	r2,-32460(gp)
8110d378:	100f883a 	mov	r7,r2
8110d37c:	01800a84 	movi	r6,42
8110d380:	01400044 	movi	r5,1
8110d384:	01204534 	movhi	r4,33044
8110d388:	212f5b04 	addi	r4,r4,-17044
8110d38c:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"After sleep for 50 ticks, could not get access to the tx uart. No retransmission occurs.");
8110d390:	d0a04d17 	ldw	r2,-32460(gp)
8110d394:	100f883a 	mov	r7,r2
8110d398:	01801604 	movi	r6,88
8110d39c:	01400044 	movi	r5,1
8110d3a0:	01204534 	movhi	r4,33044
8110d3a4:	212f6604 	addi	r4,r4,-17000
8110d3a8:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d3ac:	0001883a 	nop
8110d3b0:	e037883a 	mov	sp,fp
8110d3b4:	dfc00117 	ldw	ra,4(sp)
8110d3b8:	df000017 	ldw	fp,0(sp)
8110d3bc:	dec00204 	addi	sp,sp,8
8110d3c0:	f800283a 	ret

8110d3c4 <vCouldNotRetransmitB32TimeoutTask>:


void vCouldNotRetransmitB32TimeoutTask( void )
{
8110d3c4:	defffe04 	addi	sp,sp,-8
8110d3c8:	de00012e 	bgeu	sp,et,8110d3d0 <vCouldNotRetransmitB32TimeoutTask+0xc>
8110d3cc:	003b68fa 	trap	3
8110d3d0:	dfc00115 	stw	ra,4(sp)
8110d3d4:	df000015 	stw	fp,0(sp)
8110d3d8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB32TimeoutTask. (exit)");
8110d3dc:	d0a04d17 	ldw	r2,-32460(gp)
8110d3e0:	100f883a 	mov	r7,r2
8110d3e4:	01800a44 	movi	r6,41
8110d3e8:	01400044 	movi	r5,1
8110d3ec:	01204534 	movhi	r4,33044
8110d3f0:	212f7d04 	addi	r4,r4,-16908
8110d3f4:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (32).");
8110d3f8:	d0a04d17 	ldw	r2,-32460(gp)
8110d3fc:	100f883a 	mov	r7,r2
8110d400:	01801404 	movi	r6,80
8110d404:	01400044 	movi	r5,1
8110d408:	01204534 	movhi	r4,33044
8110d40c:	212f8804 	addi	r4,r4,-16864
8110d410:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d414:	0001883a 	nop
8110d418:	e037883a 	mov	sp,fp
8110d41c:	dfc00117 	ldw	ra,4(sp)
8110d420:	df000017 	ldw	fp,0(sp)
8110d424:	dec00204 	addi	sp,sp,8
8110d428:	f800283a 	ret

8110d42c <vCouldNotRetransmitB64TimeoutTask>:

void vCouldNotRetransmitB64TimeoutTask( void )
{
8110d42c:	defffe04 	addi	sp,sp,-8
8110d430:	de00012e 	bgeu	sp,et,8110d438 <vCouldNotRetransmitB64TimeoutTask+0xc>
8110d434:	003b68fa 	trap	3
8110d438:	dfc00115 	stw	ra,4(sp)
8110d43c:	df000015 	stw	fp,0(sp)
8110d440:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB64TimeoutTask. (exit)");
8110d444:	d0a04d17 	ldw	r2,-32460(gp)
8110d448:	100f883a 	mov	r7,r2
8110d44c:	01800a44 	movi	r6,41
8110d450:	01400044 	movi	r5,1
8110d454:	01204534 	movhi	r4,33044
8110d458:	212f9d04 	addi	r4,r4,-16780
8110d45c:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (64).");
8110d460:	d0a04d17 	ldw	r2,-32460(gp)
8110d464:	100f883a 	mov	r7,r2
8110d468:	01801404 	movi	r6,80
8110d46c:	01400044 	movi	r5,1
8110d470:	01204534 	movhi	r4,33044
8110d474:	212fa804 	addi	r4,r4,-16736
8110d478:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d47c:	0001883a 	nop
8110d480:	e037883a 	mov	sp,fp
8110d484:	dfc00117 	ldw	ra,4(sp)
8110d488:	df000017 	ldw	fp,0(sp)
8110d48c:	dec00204 	addi	sp,sp,8
8110d490:	f800283a 	ret

8110d494 <vCouldNotRetransmitB128TimeoutTask>:

void vCouldNotRetransmitB128TimeoutTask( void )
{
8110d494:	defffe04 	addi	sp,sp,-8
8110d498:	de00012e 	bgeu	sp,et,8110d4a0 <vCouldNotRetransmitB128TimeoutTask+0xc>
8110d49c:	003b68fa 	trap	3
8110d4a0:	dfc00115 	stw	ra,4(sp)
8110d4a4:	df000015 	stw	fp,0(sp)
8110d4a8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB128TimeoutTask. (exit)");
8110d4ac:	d0a04d17 	ldw	r2,-32460(gp)
8110d4b0:	100f883a 	mov	r7,r2
8110d4b4:	01800a84 	movi	r6,42
8110d4b8:	01400044 	movi	r5,1
8110d4bc:	01204534 	movhi	r4,33044
8110d4c0:	212fbd04 	addi	r4,r4,-16652
8110d4c4:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (128).");
8110d4c8:	d0a04d17 	ldw	r2,-32460(gp)
8110d4cc:	100f883a 	mov	r7,r2
8110d4d0:	01801444 	movi	r6,81
8110d4d4:	01400044 	movi	r5,1
8110d4d8:	01204534 	movhi	r4,33044
8110d4dc:	212fc804 	addi	r4,r4,-16608
8110d4e0:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d4e4:	0001883a 	nop
8110d4e8:	e037883a 	mov	sp,fp
8110d4ec:	dfc00117 	ldw	ra,4(sp)
8110d4f0:	df000017 	ldw	fp,0(sp)
8110d4f4:	dec00204 	addi	sp,sp,8
8110d4f8:	f800283a 	ret

8110d4fc <vFailStartTimerRetransmission>:


void vFailStartTimerRetransmission( void )
{
8110d4fc:	defffe04 	addi	sp,sp,-8
8110d500:	de00012e 	bgeu	sp,et,8110d508 <vFailStartTimerRetransmission+0xc>
8110d504:	003b68fa 	trap	3
8110d508:	dfc00115 	stw	ra,4(sp)
8110d50c:	df000015 	stw	fp,0(sp)
8110d510:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailStartTimerRetransmission. (exit)");
8110d514:	d0a04d17 	ldw	r2,-32460(gp)
8110d518:	100f883a 	mov	r7,r2
8110d51c:	01800944 	movi	r6,37
8110d520:	01400044 	movi	r5,1
8110d524:	01204534 	movhi	r4,33044
8110d528:	212fdd04 	addi	r4,r4,-16524
8110d52c:	11104940 	call	81110494 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Fail trying to start the timer xTimerRetransmission.");
8110d530:	d0a04d17 	ldw	r2,-32460(gp)
8110d534:	100f883a 	mov	r7,r2
8110d538:	01800d04 	movi	r6,52
8110d53c:	01400044 	movi	r5,1
8110d540:	01204534 	movhi	r4,33044
8110d544:	212fe704 	addi	r4,r4,-16484
8110d548:	11104940 	call	81110494 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
8110d54c:	0001883a 	nop
8110d550:	e037883a 	mov	sp,fp
8110d554:	dfc00117 	ldw	ra,4(sp)
8110d558:	df000017 	ldw	fp,0(sp)
8110d55c:	dec00204 	addi	sp,sp,8
8110d560:	f800283a 	ret

8110d564 <vNFeeNotInUse>:
 *      Author: Tiago-Low
 */

#include "fee.h"

void vNFeeNotInUse( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110d564:	defffd04 	addi	sp,sp,-12
8110d568:	de00012e 	bgeu	sp,et,8110d570 <vNFeeNotInUse+0xc>
8110d56c:	003b68fa 	trap	3
8110d570:	df000215 	stw	fp,8(sp)
8110d574:	df000204 	addi	fp,sp,8
8110d578:	e13ffe15 	stw	r4,-8(fp)
8110d57c:	2805883a 	mov	r2,r5
8110d580:	e0bfff05 	stb	r2,-4(fp)

    /* NFEE id [0..7] */
    pxNfeeL->ucId = ucIdNFEE;
8110d584:	e0bffe17 	ldw	r2,-8(fp)
8110d588:	e0ffff03 	ldbu	r3,-4(fp)
8110d58c:	10c00005 	stb	r3,0(r2)
    pxNfeeL->xControl.bEnabled = FALSE;
8110d590:	e0bffe17 	ldw	r2,-8(fp)
8110d594:	10002015 	stw	zero,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110d598:	e0bffe17 	ldw	r2,-8(fp)
8110d59c:	10002115 	stw	zero,132(r2)
}
8110d5a0:	0001883a 	nop
8110d5a4:	e037883a 	mov	sp,fp
8110d5a8:	df000017 	ldw	fp,0(sp)
8110d5ac:	dec00104 	addi	sp,sp,4
8110d5b0:	f800283a 	ret

8110d5b4 <vNFeeStructureInit>:


/* Initialize the structure of control of NFEE with the default Configurations */
void vNFeeStructureInit( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110d5b4:	defffb04 	addi	sp,sp,-20
8110d5b8:	de00012e 	bgeu	sp,et,8110d5c0 <vNFeeStructureInit+0xc>
8110d5bc:	003b68fa 	trap	3
8110d5c0:	dfc00415 	stw	ra,16(sp)
8110d5c4:	df000315 	stw	fp,12(sp)
8110d5c8:	df000304 	addi	fp,sp,12
8110d5cc:	e13ffe15 	stw	r4,-8(fp)
8110d5d0:	2805883a 	mov	r2,r5
8110d5d4:	e0bfff05 	stb	r2,-4(fp)
    unsigned char ucIL = 0;
8110d5d8:	e03ffd05 	stb	zero,-12(fp)

    /* NFEE id [0..5] */
    pxNfeeL->ucId = ucIdNFEE;
8110d5dc:	e0bffe17 	ldw	r2,-8(fp)
8110d5e0:	e0ffff03 	ldbu	r3,-4(fp)
8110d5e4:	10c00005 	stb	r3,0(r2)

    /* Load the default values of the CCDs regarding pixels configuration */
    vCCDLoadDefaultValues(&pxNfeeL->xCcdInfo);
8110d5e8:	e0bffe17 	ldw	r2,-8(fp)
8110d5ec:	10802804 	addi	r2,r2,160
8110d5f0:	1009883a 	mov	r4,r2
8110d5f4:	110afe40 	call	8110afe4 <vCCDLoadDefaultValues>

    /* Update the values of memory mapping for this FEE */
    vUpdateMemMapFEE(pxNfeeL);
8110d5f8:	e13ffe17 	ldw	r4,-8(fp)
8110d5fc:	110d68c0 	call	8110d68c <vUpdateMemMapFEE>

    /* Initilizing control variables */
    pxNfeeL->xControl.bEnabled = TRUE;
8110d600:	e0bffe17 	ldw	r2,-8(fp)
8110d604:	00c00044 	movi	r3,1
8110d608:	10c02015 	stw	r3,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110d60c:	e0bffe17 	ldw	r2,-8(fp)
8110d610:	10002115 	stw	zero,132(r2)
    /* The NFEE initialize in the Config mode by default */
    pxNfeeL->xControl.eMode = sFeeConfig;    
8110d614:	e0bffe17 	ldw	r2,-8(fp)
8110d618:	10002615 	stw	zero,152(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110d61c:	e03ffd05 	stb	zero,-12(fp)
8110d620:	00000906 	br	8110d648 <vNFeeStructureInit+0x94>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
8110d624:	e0bffd03 	ldbu	r2,-12(fp)
8110d628:	e0fffe17 	ldw	r3,-8(fp)
8110d62c:	1885883a 	add	r2,r3,r2
8110d630:	10802504 	addi	r2,r2,148
8110d634:	e0fffd03 	ldbu	r3,-12(fp)
8110d638:	10c00005 	stb	r3,0(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110d63c:	e0bffd03 	ldbu	r2,-12(fp)
8110d640:	10800044 	addi	r2,r2,1
8110d644:	e0bffd05 	stb	r2,-12(fp)
8110d648:	e0bffd03 	ldbu	r2,-12(fp)
8110d64c:	10800130 	cmpltui	r2,r2,4
8110d650:	103ff41e 	bne	r2,zero,8110d624 <__reset+0xfb0ed624>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
    /* The default side is left */
    pxNfeeL->xControl.eSide = sLeft;
8110d654:	e0bffe17 	ldw	r2,-8(fp)
8110d658:	10002715 	stw	zero,156(r2)
    pxNfeeL->xControl.bEchoing = FALSE;
8110d65c:	e0bffe17 	ldw	r2,-8(fp)
8110d660:	10002315 	stw	zero,140(r2)
    pxNfeeL->xControl.bLogging = FALSE;
8110d664:	e0bffe17 	ldw	r2,-8(fp)
8110d668:	10002215 	stw	zero,136(r2)
    pxNfeeL->xControl.bChannelEnable = FALSE;
8110d66c:	e0bffe17 	ldw	r2,-8(fp)
8110d670:	10002415 	stw	zero,144(r2)

}
8110d674:	0001883a 	nop
8110d678:	e037883a 	mov	sp,fp
8110d67c:	dfc00117 	ldw	ra,4(sp)
8110d680:	df000017 	ldw	fp,0(sp)
8110d684:	dec00204 	addi	sp,sp,8
8110d688:	f800283a 	ret

8110d68c <vUpdateMemMapFEE>:

/* Update the memory mapping for the FEE due to the CCD informations */
void vUpdateMemMapFEE( TNFee *pxNfeeL ) {
8110d68c:	defff404 	addi	sp,sp,-48
8110d690:	de00012e 	bgeu	sp,et,8110d698 <vUpdateMemMapFEE+0xc>
8110d694:	003b68fa 	trap	3
8110d698:	df000b15 	stw	fp,44(sp)
8110d69c:	df000b04 	addi	fp,sp,44
8110d6a0:	e13fff15 	stw	r4,-4(fp)
    unsigned long ulTotalSizeL = 0; /* pixels */
8110d6a4:	e03ff915 	stw	zero,-28(fp)
    unsigned long ulMemLinesL = 0; /* mem lines */
8110d6a8:	e03ff515 	stw	zero,-44(fp)
    unsigned long ulTotalMemLinesL = 0;
8110d6ac:	e03ffa15 	stw	zero,-24(fp)
    unsigned long ulMemLeftBytesL = 0; /* bytes */
8110d6b0:	e03ffb15 	stw	zero,-20(fp)
    unsigned long ulMemLeftLinesL = 0; /* mem lines */
8110d6b4:	e03ffc15 	stw	zero,-16(fp)
    unsigned long ulMaskMemLinesL = 0; /* mem lines */
8110d6b8:	e03ff615 	stw	zero,-40(fp)
    unsigned char ucPixelsInLastBlockL = 0;
8110d6bc:	e03ff705 	stb	zero,-36(fp)
    unsigned char ucShiftsL = 0;
8110d6c0:	e03ffd05 	stb	zero,-12(fp)
    unsigned char ucIL = 0;
8110d6c4:	e03ff745 	stb	zero,-35(fp)
    unsigned long ulLastOffset = 0;
8110d6c8:	e03ff815 	stw	zero,-32(fp)
    unsigned long ulStepHalfCCD = 0;
8110d6cc:	e03ffe15 	stw	zero,-8(fp)


    /* Size of the footprint of the CCD in the DDR memory */
    pxNfeeL->xMemMap.ulTotalBytes = ( OFFSET_STEP_FEE );
8110d6d0:	e17fff17 	ldw	r5,-4(fp)
8110d6d4:	01035a34 	movhi	r4,3432
8110d6d8:	21348c04 	addi	r4,r4,-11728
8110d6dc:	29000215 	stw	r4,8(r5)

    /* Offset of the FEE in the DDR memory */
    pxNfeeL->xMemMap.ulOffsetRoot = OFFSET_STEP_FEE * pxNfeeL->ucId;
8110d6e0:	e13fff17 	ldw	r4,-4(fp)
8110d6e4:	21000003 	ldbu	r4,0(r4)
8110d6e8:	21403fcc 	andi	r5,r4,255
8110d6ec:	01035a34 	movhi	r4,3432
8110d6f0:	21348c04 	addi	r4,r4,-11728
8110d6f4:	2909383a 	mul	r4,r5,r4
8110d6f8:	200b883a 	mov	r5,r4
8110d6fc:	e13fff17 	ldw	r4,-4(fp)
8110d700:	21400115 	stw	r5,4(r4)

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;
8110d704:	e13fff17 	ldw	r4,-4(fp)
8110d708:	21400117 	ldw	r5,4(r4)
8110d70c:	01033234 	movhi	r4,3272
8110d710:	21348c04 	addi	r4,r4,-11728
8110d714:	290b883a 	add	r5,r5,r4
8110d718:	e13fff17 	ldw	r4,-4(fp)
8110d71c:	21400315 	stw	r5,12(r4)

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110d720:	e13fff17 	ldw	r4,-4(fp)
8110d724:	21002a0b 	ldhu	r4,168(r4)
8110d728:	217fffcc 	andi	r5,r4,65535
8110d72c:	e13fff17 	ldw	r4,-4(fp)
8110d730:	2100290b 	ldhu	r4,164(r4)
8110d734:	213fffcc 	andi	r4,r4,65535
8110d738:	290b883a 	add	r5,r5,r4
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );
8110d73c:	e13fff17 	ldw	r4,-4(fp)
8110d740:	2100298b 	ldhu	r4,166(r4)
8110d744:	21bfffcc 	andi	r6,r4,65535
8110d748:	e13fff17 	ldw	r4,-4(fp)
8110d74c:	2100288b 	ldhu	r4,162(r4)
8110d750:	213fffcc 	andi	r4,r4,65535
8110d754:	310d883a 	add	r6,r6,r4
8110d758:	e13fff17 	ldw	r4,-4(fp)
8110d75c:	2100280b 	ldhu	r4,160(r4)
8110d760:	213fffcc 	andi	r4,r4,65535
8110d764:	3109883a 	add	r4,r6,r4

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110d768:	2909383a 	mul	r4,r5,r4
8110d76c:	e13ff915 	stw	r4,-28(fp)
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );

    /* Total size in Bytes of a half CCD */
    pxNfeeL->xMemMap.xCommon.usiTotalBytes = ulTotalSizeL * BYTES_PER_PIXEL;
8110d770:	e13ff917 	ldw	r4,-28(fp)
8110d774:	2109883a 	add	r4,r4,r4
8110d778:	200b883a 	mov	r5,r4
8110d77c:	e13fff17 	ldw	r4,-4(fp)
8110d780:	2140048d 	sth	r5,18(r4)

    /* Total of Memory lines (64 bits memory) */
    ulMemLinesL = (unsigned long) pxNfeeL->xMemMap.xCommon.usiTotalBytes / BYTES_PER_MEM_LINE;
8110d784:	e13fff17 	ldw	r4,-4(fp)
8110d788:	2100048b 	ldhu	r4,18(r4)
8110d78c:	213fffcc 	andi	r4,r4,65535
8110d790:	2008d0fa 	srli	r4,r4,3
8110d794:	213fffcc 	andi	r4,r4,65535
8110d798:	e13ff515 	stw	r4,-44(fp)
    ulMemLeftBytesL = pxNfeeL->xMemMap.xCommon.usiTotalBytes % BYTES_PER_MEM_LINE;   /* Word memory Alignment check: how much bytes left not align in the last word of the memory */
8110d79c:	e13fff17 	ldw	r4,-4(fp)
8110d7a0:	2100048b 	ldhu	r4,18(r4)
8110d7a4:	213fffcc 	andi	r4,r4,65535
8110d7a8:	210001cc 	andi	r4,r4,7
8110d7ac:	e13ffb15 	stw	r4,-20(fp)
    if ( ulMemLeftBytesL > 0 ) {
8110d7b0:	e13ffb17 	ldw	r4,-20(fp)
8110d7b4:	20001326 	beq	r4,zero,8110d804 <vUpdateMemMapFEE+0x178>
        ulMemLinesL = ulMemLinesL + 1;
8110d7b8:	e13ff517 	ldw	r4,-44(fp)
8110d7bc:	21000044 	addi	r4,r4,1
8110d7c0:	e13ff515 	stw	r4,-44(fp)
        pxNfeeL->xMemMap.xCommon.usiTotalBytes = pxNfeeL->xMemMap.xCommon.usiTotalBytes - ulMemLeftBytesL + BYTES_PER_MEM_LINE; /* Add a full line, after will be filled with zero padding */
8110d7c4:	e13fff17 	ldw	r4,-4(fp)
8110d7c8:	2100048b 	ldhu	r4,18(r4)
8110d7cc:	e17ffb17 	ldw	r5,-20(fp)
8110d7d0:	2149c83a 	sub	r4,r4,r5
8110d7d4:	21000204 	addi	r4,r4,8
8110d7d8:	200b883a 	mov	r5,r4
8110d7dc:	e13fff17 	ldw	r4,-4(fp)
8110d7e0:	2140048d 	sth	r5,18(r4)
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = BYTES_PER_MEM_LINE - ulMemLeftBytesL;
8110d7e4:	e13ffb17 	ldw	r4,-20(fp)
8110d7e8:	200b883a 	mov	r5,r4
8110d7ec:	01000204 	movi	r4,8
8110d7f0:	2149c83a 	sub	r4,r4,r5
8110d7f4:	200b883a 	mov	r5,r4
8110d7f8:	e13fff17 	ldw	r4,-4(fp)
8110d7fc:	21400505 	stb	r5,20(r4)
8110d800:	00000206 	br	8110d80c <vUpdateMemMapFEE+0x180>
    } else {
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = 0;
8110d804:	e13fff17 	ldw	r4,-4(fp)
8110d808:	20000505 	stb	zero,20(r4)
    }

    /* At this point we have mapping the pixel in the CCD and calculate the zero padding for the last WORD of the line memory of the half ccd */

    /* For every 16 mem line will be 1 mask mem line */
    ulMaskMemLinesL = (unsigned long) ulMemLinesL / BLOCK_MEM_SIZE;
8110d80c:	e13ff517 	ldw	r4,-44(fp)
8110d810:	2008d13a 	srli	r4,r4,4
8110d814:	e13ff615 	stw	r4,-40(fp)
    ulMemLeftLinesL = ulMemLinesL % BLOCK_MEM_SIZE;
8110d818:	e13ff517 	ldw	r4,-44(fp)
8110d81c:	210003cc 	andi	r4,r4,15
8110d820:	e13ffc15 	stw	r4,-16(fp)
    if ( ulMemLeftLinesL >= 1 ) {
8110d824:	e13ffc17 	ldw	r4,-16(fp)
8110d828:	20000b26 	beq	r4,zero,8110d858 <vUpdateMemMapFEE+0x1cc>
        ulMaskMemLinesL = ulMaskMemLinesL + 1;
8110d82c:	e13ff617 	ldw	r4,-40(fp)
8110d830:	21000044 	addi	r4,r4,1
8110d834:	e13ff615 	stw	r4,-40(fp)
        ulTotalMemLinesL = ( ulMemLinesL - ulMemLeftLinesL + BLOCK_MEM_SIZE ) + ulMaskMemLinesL; /* One extra 16 sized block, will be filled with zero padding the ret os spare lines */
8110d838:	e17ff517 	ldw	r5,-44(fp)
8110d83c:	e13ffc17 	ldw	r4,-16(fp)
8110d840:	290bc83a 	sub	r5,r5,r4
8110d844:	e13ff617 	ldw	r4,-40(fp)
8110d848:	2909883a 	add	r4,r5,r4
8110d84c:	21000404 	addi	r4,r4,16
8110d850:	e13ffa15 	stw	r4,-24(fp)
8110d854:	00000406 	br	8110d868 <vUpdateMemMapFEE+0x1dc>
    } else {
        ulTotalMemLinesL = ulMemLinesL + ulMaskMemLinesL;
8110d858:	e17ff517 	ldw	r5,-44(fp)
8110d85c:	e13ff617 	ldw	r4,-40(fp)
8110d860:	2909883a 	add	r4,r5,r4
8110d864:	e13ffa15 	stw	r4,-24(fp)
    }

    /* Calculating how is the final mask with zero padding */
    if ( ulMemLeftBytesL >= 1 ) {
8110d868:	e13ffb17 	ldw	r4,-20(fp)
8110d86c:	20000926 	beq	r4,zero,8110d894 <vUpdateMemMapFEE+0x208>
        ucPixelsInLastBlockL = (unsigned char) (( ulMemLeftLinesL * PIXEL_PER_MEM_LINE ) + (unsigned int) ( ulMemLeftBytesL / BYTES_PER_PIXEL ));
8110d870:	e13ffc17 	ldw	r4,-16(fp)
8110d874:	2109883a 	add	r4,r4,r4
8110d878:	2109883a 	add	r4,r4,r4
8110d87c:	200b883a 	mov	r5,r4
8110d880:	e13ffb17 	ldw	r4,-20(fp)
8110d884:	2008d07a 	srli	r4,r4,1
8110d888:	2909883a 	add	r4,r5,r4
8110d88c:	e13ff705 	stb	r4,-36(fp)
8110d890:	00000406 	br	8110d8a4 <vUpdateMemMapFEE+0x218>
    } else {
        ucPixelsInLastBlockL = (unsigned char) ( ulMemLeftLinesL * PIXEL_PER_MEM_LINE );
8110d894:	e13ffc17 	ldw	r4,-16(fp)
8110d898:	2109883a 	add	r4,r4,r4
8110d89c:	2109883a 	add	r4,r4,r4
8110d8a0:	e13ff705 	stb	r4,-36(fp)
    }

    /* 16 * 4 = 64 - (number of pixels in the last block)) */
    ucShiftsL = ( BLOCK_MEM_SIZE * PIXEL_PER_MEM_LINE ) - ucPixelsInLastBlockL;
8110d8a4:	e13ff703 	ldbu	r4,-36(fp)
8110d8a8:	01401004 	movi	r5,64
8110d8ac:	2909c83a 	sub	r4,r5,r4
8110d8b0:	e13ffd05 	stb	r4,-12(fp)

    /* WARNING: Verify the memory alocation (endianess) */
    pxNfeeL->xMemMap.xCommon.ucPaddingMask.ullWord = (unsigned long long)(0xFFFFFFFFFFFFFFFF >> ucShiftsL);
8110d8b4:	e13ffd03 	ldbu	r4,-12(fp)
8110d8b8:	217ff804 	addi	r5,r4,-32
8110d8bc:	28000416 	blt	r5,zero,8110d8d0 <vUpdateMemMapFEE+0x244>
8110d8c0:	013fffc4 	movi	r4,-1
8110d8c4:	2144d83a 	srl	r2,r4,r5
8110d8c8:	0007883a 	mov	r3,zero
8110d8cc:	00000a06 	br	8110d8f8 <vUpdateMemMapFEE+0x26c>
8110d8d0:	017fffc4 	movi	r5,-1
8110d8d4:	280c907a 	slli	r6,r5,1
8110d8d8:	014007c4 	movi	r5,31
8110d8dc:	290bc83a 	sub	r5,r5,r4
8110d8e0:	314a983a 	sll	r5,r6,r5
8110d8e4:	01bfffc4 	movi	r6,-1
8110d8e8:	3104d83a 	srl	r2,r6,r4
8110d8ec:	2884b03a 	or	r2,r5,r2
8110d8f0:	017fffc4 	movi	r5,-1
8110d8f4:	2906d83a 	srl	r3,r5,r4
8110d8f8:	e13fff17 	ldw	r4,-4(fp)
8110d8fc:	20800615 	stw	r2,24(r4)
8110d900:	20c00715 	stw	r3,28(r4)

    /* Number of block is te same as the number of line masks in the memory */
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;
8110d904:	e0bff617 	ldw	r2,-40(fp)
8110d908:	1007883a 	mov	r3,r2
8110d90c:	e0bfff17 	ldw	r2,-4(fp)
8110d910:	10c0040d 	sth	r3,16(r2)

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
8110d914:	e0bfff17 	ldw	r2,-4(fp)
8110d918:	10c00117 	ldw	r3,4(r2)
8110d91c:	008004b4 	movhi	r2,18
8110d920:	10a40004 	addi	r2,r2,-28672
8110d924:	1885883a 	add	r2,r3,r2
8110d928:	e0bff815 	stw	r2,-32(fp)
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
8110d92c:	e0bfff17 	ldw	r2,-4(fp)
8110d930:	1080048b 	ldhu	r2,18(r2)
8110d934:	10ffffcc 	andi	r3,r2,65535
8110d938:	008000b4 	movhi	r2,2
8110d93c:	10a40004 	addi	r2,r2,-28672
8110d940:	1885883a 	add	r2,r3,r2
8110d944:	e0bffe15 	stw	r2,-8(fp)
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110d948:	e03ff745 	stb	zero,-35(fp)
8110d94c:	00001906 	br	8110d9b4 <vUpdateMemMapFEE+0x328>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
8110d950:	e0bff743 	ldbu	r2,-35(fp)
8110d954:	e0ffff17 	ldw	r3,-4(fp)
8110d958:	10800624 	muli	r2,r2,24
8110d95c:	1885883a 	add	r2,r3,r2
8110d960:	10800804 	addi	r2,r2,32
8110d964:	e0fff817 	ldw	r3,-32(fp)
8110d968:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110d96c:	e0fff817 	ldw	r3,-32(fp)
8110d970:	e0bffe17 	ldw	r2,-8(fp)
8110d974:	1885883a 	add	r2,r3,r2
8110d978:	e0bff815 	stw	r2,-32(fp)
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
8110d97c:	e0bff743 	ldbu	r2,-35(fp)
8110d980:	e0ffff17 	ldw	r3,-4(fp)
8110d984:	10800624 	muli	r2,r2,24
8110d988:	1885883a 	add	r2,r3,r2
8110d98c:	10800b04 	addi	r2,r2,44
8110d990:	e0fff817 	ldw	r3,-32(fp)
8110d994:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110d998:	e0fff817 	ldw	r3,-32(fp)
8110d99c:	e0bffe17 	ldw	r2,-8(fp)
8110d9a0:	1885883a 	add	r2,r3,r2
8110d9a4:	e0bff815 	stw	r2,-32(fp)
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110d9a8:	e0bff743 	ldbu	r2,-35(fp)
8110d9ac:	10800044 	addi	r2,r2,1
8110d9b0:	e0bff745 	stb	r2,-35(fp)
8110d9b4:	e0bff743 	ldbu	r2,-35(fp)
8110d9b8:	10800130 	cmpltui	r2,r2,4
8110d9bc:	103fe41e 	bne	r2,zero,8110d950 <__reset+0xfb0ed950>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
    }
}
8110d9c0:	0001883a 	nop
8110d9c4:	e037883a 	mov	sp,fp
8110d9c8:	df000017 	ldw	fp,0(sp)
8110d9cc:	dec00104 	addi	sp,sp,4
8110d9d0:	f800283a 	ret

8110d9d4 <vFeeSpwRMAPLoadDefault>:

/* Load the default configuration of the SPW/RMAP */
void vFeeSpwRMAPLoadDefault( TNFee *pxNfeeL ) {
8110d9d4:	defffe04 	addi	sp,sp,-8
8110d9d8:	de00012e 	bgeu	sp,et,8110d9e0 <vFeeSpwRMAPLoadDefault+0xc>
8110d9dc:	003b68fa 	trap	3
8110d9e0:	df000115 	stw	fp,4(sp)
8110d9e4:	df000104 	addi	fp,sp,4
8110d9e8:	e13fff15 	stw	r4,-4(fp)
    //bGetSpwRmapSDCard();
    //todo: For now is hardcoded
    //todo: Verificar qual a estrutura usar para as configurações
}
8110d9ec:	0001883a 	nop
8110d9f0:	e037883a 	mov	sp,fp
8110d9f4:	df000017 	ldw	fp,0(sp)
8110d9f8:	dec00104 	addi	sp,sp,4
8110d9fc:	f800283a 	ret

8110da00 <vFeeSpwRMAPChangeConfig>:

/* Only in NFEE_CONFIG */
/* Change the active configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeConfig( TNFee *pxNfeeL ) {
8110da00:	defffe04 	addi	sp,sp,-8
8110da04:	de00012e 	bgeu	sp,et,8110da0c <vFeeSpwRMAPChangeConfig+0xc>
8110da08:	003b68fa 	trap	3
8110da0c:	df000115 	stw	fp,4(sp)
8110da10:	df000104 	addi	fp,sp,4
8110da14:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar qual a estrutura usar para as configurações
}
8110da18:	0001883a 	nop
8110da1c:	e037883a 	mov	sp,fp
8110da20:	df000017 	ldw	fp,0(sp)
8110da24:	dec00104 	addi	sp,sp,4
8110da28:	f800283a 	ret

8110da2c <vFeeSpwRMAPChangeDefault>:

/* Only in NFEE_CONFIG */
/* Change the default configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeDefault( TNFee *pxNfeeL ) {
8110da2c:	defffe04 	addi	sp,sp,-8
8110da30:	de00012e 	bgeu	sp,et,8110da38 <vFeeSpwRMAPChangeDefault+0xc>
8110da34:	003b68fa 	trap	3
8110da38:	df000115 	stw	fp,4(sp)
8110da3c:	df000104 	addi	fp,sp,4
8110da40:	e13fff15 	stw	r4,-4(fp)
    //bSaveSpwRmapSDCard();
    //todo: Verificar qual a estrutura usar para as configurações, enviar o numero do FEE tbm
}
8110da44:	0001883a 	nop
8110da48:	e037883a 	mov	sp,fp
8110da4c:	df000017 	ldw	fp,0(sp)
8110da50:	dec00104 	addi	sp,sp,4
8110da54:	f800283a 	ret

8110da58 <cFeeSpwChannelEnable>:

/* Any mode */
/* Enable SPW channel for the FEE */
void cFeeSpwChannelEnable( TNFee *pxNfeeL ) {
8110da58:	defffe04 	addi	sp,sp,-8
8110da5c:	de00012e 	bgeu	sp,et,8110da64 <cFeeSpwChannelEnable+0xc>
8110da60:	003b68fa 	trap	3
8110da64:	df000115 	stw	fp,4(sp)
8110da68:	df000104 	addi	fp,sp,4
8110da6c:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110da70:	0001883a 	nop
8110da74:	e037883a 	mov	sp,fp
8110da78:	df000017 	ldw	fp,0(sp)
8110da7c:	dec00104 	addi	sp,sp,4
8110da80:	f800283a 	ret

8110da84 <cFeeSpwChannelDisable>:

/* Any mode */
/* Disable SPW channel for the FEE */
void cFeeSpwChannelDisable( TNFee *pxNfeeL ) {
8110da84:	defffe04 	addi	sp,sp,-8
8110da88:	de00012e 	bgeu	sp,et,8110da90 <cFeeSpwChannelDisable+0xc>
8110da8c:	003b68fa 	trap	3
8110da90:	df000115 	stw	fp,4(sp)
8110da94:	df000104 	addi	fp,sp,4
8110da98:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110da9c:	0001883a 	nop
8110daa0:	e037883a 	mov	sp,fp
8110daa4:	df000017 	ldw	fp,0(sp)
8110daa8:	dec00104 	addi	sp,sp,4
8110daac:	f800283a 	ret

8110dab0 <cFeeRMAPDump>:

/* Any mode */
/* Dump and send using PUS the RMAP Configuration areas [NFEESIM-UR-699] */
void cFeeRMAPDump( TNFee *pxNfeeL ) {
8110dab0:	defffe04 	addi	sp,sp,-8
8110dab4:	de00012e 	bgeu	sp,et,8110dabc <cFeeRMAPDump+0xc>
8110dab8:	003b68fa 	trap	3
8110dabc:	df000115 	stw	fp,4(sp)
8110dac0:	df000104 	addi	fp,sp,4
8110dac4:	e13fff15 	stw	r4,-4(fp)

    //todo: ler as areas de memoria do RMAP e enviar via ethernet

}
8110dac8:	0001883a 	nop
8110dacc:	e037883a 	mov	sp,fp
8110dad0:	df000017 	ldw	fp,0(sp)
8110dad4:	dec00104 	addi	sp,sp,4
8110dad8:	f800283a 	ret

8110dadc <cFeeRMAPEchoingEnable>:

/* Any mode */
/* Allow the user to activate the echo mode for RMAP [NFEESIM-UR-588]  */
void cFeeRMAPEchoingEnable( TNFee *pxNfeeL ) {
8110dadc:	defffe04 	addi	sp,sp,-8
8110dae0:	de00012e 	bgeu	sp,et,8110dae8 <cFeeRMAPEchoingEnable+0xc>
8110dae4:	003b68fa 	trap	3
8110dae8:	df000115 	stw	fp,4(sp)
8110daec:	df000104 	addi	fp,sp,4
8110daf0:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = TRUE;
8110daf4:	e0bfff17 	ldw	r2,-4(fp)
8110daf8:	00c00044 	movi	r3,1
8110dafc:	10c02315 	stw	r3,140(r2)
}
8110db00:	0001883a 	nop
8110db04:	e037883a 	mov	sp,fp
8110db08:	df000017 	ldw	fp,0(sp)
8110db0c:	dec00104 	addi	sp,sp,4
8110db10:	f800283a 	ret

8110db14 <cFeeRMAPEchoingDisable>:

/* Any mode */
/* Allow the user to disable the echo mode for RMAP [NFEESIM-UR-589]  */
void cFeeRMAPEchoingDisable( TNFee *pxNfeeL ) {
8110db14:	defffe04 	addi	sp,sp,-8
8110db18:	de00012e 	bgeu	sp,et,8110db20 <cFeeRMAPEchoingDisable+0xc>
8110db1c:	003b68fa 	trap	3
8110db20:	df000115 	stw	fp,4(sp)
8110db24:	df000104 	addi	fp,sp,4
8110db28:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = FALSE;
8110db2c:	e0bfff17 	ldw	r2,-4(fp)
8110db30:	10002315 	stw	zero,140(r2)
}
8110db34:	0001883a 	nop
8110db38:	e037883a 	mov	sp,fp
8110db3c:	df000017 	ldw	fp,0(sp)
8110db40:	dec00104 	addi	sp,sp,4
8110db44:	f800283a 	ret

8110db48 <cFeeRMAPLogEnable>:

/* Any mode */
/* Allow the user to activate the log of RMAP [NFEESIM-UR-588]  */
void cFeeRMAPLogEnable( TNFee *pxNfeeL ) {
8110db48:	defffe04 	addi	sp,sp,-8
8110db4c:	de00012e 	bgeu	sp,et,8110db54 <cFeeRMAPLogEnable+0xc>
8110db50:	003b68fa 	trap	3
8110db54:	df000115 	stw	fp,4(sp)
8110db58:	df000104 	addi	fp,sp,4
8110db5c:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = TRUE;
8110db60:	e0bfff17 	ldw	r2,-4(fp)
8110db64:	00c00044 	movi	r3,1
8110db68:	10c02215 	stw	r3,136(r2)
}
8110db6c:	0001883a 	nop
8110db70:	e037883a 	mov	sp,fp
8110db74:	df000017 	ldw	fp,0(sp)
8110db78:	dec00104 	addi	sp,sp,4
8110db7c:	f800283a 	ret

8110db80 <cFeeRMAPLogDisable>:

/* Any mode */
/* Allow the user to disable the log of RMAP [NFEESIM-UR-589]  */
void cFeeRMAPLogDisable( TNFee *pxNfeeL ) {
8110db80:	defffe04 	addi	sp,sp,-8
8110db84:	de00012e 	bgeu	sp,et,8110db8c <cFeeRMAPLogDisable+0xc>
8110db88:	003b68fa 	trap	3
8110db8c:	df000115 	stw	fp,4(sp)
8110db90:	df000104 	addi	fp,sp,4
8110db94:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = FALSE;
8110db98:	e0bfff17 	ldw	r2,-4(fp)
8110db9c:	10002215 	stw	zero,136(r2)
}
8110dba0:	0001883a 	nop
8110dba4:	e037883a 	mov	sp,fp
8110dba8:	df000017 	ldw	fp,0(sp)
8110dbac:	dec00104 	addi	sp,sp,4
8110dbb0:	f800283a 	ret

8110dbb4 <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
8110dbb4:	defffe04 	addi	sp,sp,-8
8110dbb8:	de00012e 	bgeu	sp,et,8110dbc0 <vInitSimucamBasicHW+0xc>
8110dbbc:	003b68fa 	trap	3
8110dbc0:	dfc00115 	stw	ra,4(sp)
8110dbc4:	df000015 	stw	fp,0(sp)
8110dbc8:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110dbcc:	01403fc4 	movi	r5,255
8110dbd0:	0009883a 	mov	r4,zero
8110dbd4:	11060d40 	call	811060d4 <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
8110dbd8:	01400834 	movhi	r5,32
8110dbdc:	297fffc4 	addi	r5,r5,-1
8110dbe0:	0009883a 	mov	r4,zero
8110dbe4:	11061540 	call	81106154 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
8110dbe8:	01400074 	movhi	r5,1
8110dbec:	01000044 	movi	r4,1
8110dbf0:	11061540 	call	81106154 <bSetPainelLeds>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
8110dbf4:	0009883a 	mov	r4,zero
8110dbf8:	11077300 	call	81107730 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
8110dbfc:	0009883a 	mov	r4,zero
8110dc00:	11078000 	call	81107800 <bSSDisplayUpdate>

}
8110dc04:	0001883a 	nop
8110dc08:	e037883a 	mov	sp,fp
8110dc0c:	dfc00117 	ldw	ra,4(sp)
8110dc10:	df000017 	ldw	fp,0(sp)
8110dc14:	dec00204 	addi	sp,sp,8
8110dc18:	f800283a 	ret

8110dc1c <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
8110dc1c:	defffd04 	addi	sp,sp,-12
8110dc20:	de00012e 	bgeu	sp,et,8110dc28 <bLogWriteSDCard+0xc>
8110dc24:	003b68fa 	trap	3
8110dc28:	df000215 	stw	fp,8(sp)
8110dc2c:	df000204 	addi	fp,sp,8
8110dc30:	e13ffe15 	stw	r4,-8(fp)
8110dc34:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
8110dc38:	00800044 	movi	r2,1
}
8110dc3c:	e037883a 	mov	sp,fp
8110dc40:	df000017 	ldw	fp,0(sp)
8110dc44:	dec00104 	addi	sp,sp,4
8110dc48:	f800283a 	ret

8110dc4c <bLogWriteETH>:

bool bLogWriteETH ( const char * cDataIn )
{
8110dc4c:	defffe04 	addi	sp,sp,-8
8110dc50:	de00012e 	bgeu	sp,et,8110dc58 <bLogWriteETH+0xc>
8110dc54:	003b68fa 	trap	3
8110dc58:	df000115 	stw	fp,4(sp)
8110dc5c:	df000104 	addi	fp,sp,4
8110dc60:	e13fff15 	stw	r4,-4(fp)

	return TRUE;
8110dc64:	00800044 	movi	r2,1
}
8110dc68:	e037883a 	mov	sp,fp
8110dc6c:	df000017 	ldw	fp,0(sp)
8110dc70:	dec00104 	addi	sp,sp,4
8110dc74:	f800283a 	ret

8110dc78 <vSimucamStructureInit>:
 */


#include "meb.h"

void vSimucamStructureInit( TSimucam_MEB *xMeb ) {
8110dc78:	defffc04 	addi	sp,sp,-16
8110dc7c:	de00012e 	bgeu	sp,et,8110dc84 <vSimucamStructureInit+0xc>
8110dc80:	003b68fa 	trap	3
8110dc84:	dfc00315 	stw	ra,12(sp)
8110dc88:	df000215 	stw	fp,8(sp)
8110dc8c:	df000204 	addi	fp,sp,8
8110dc90:	e13fff15 	stw	r4,-4(fp)
    unsigned char ucIL = 0;
8110dc94:	e03ffe05 	stb	zero,-8(fp)

    // LoadTypeOfFeeSDCard();
    // todo: Load from SDCard for now is Hardcoded to Normal FEE
    xMeb->eType = sNormalFEE;
8110dc98:	e0bfff17 	ldw	r2,-4(fp)
8110dc9c:	10000015 	stw	zero,0(r2)
    
    /* Simucam start in the Meb Config Mode */
    xMeb->eMode = sMebConfig;
8110dca0:	e0bfff17 	ldw	r2,-4(fp)
8110dca4:	10000115 	stw	zero,4(r2)

    /* Load EP */
    vLoadDefaultEPValue( xMeb );
8110dca8:	e13fff17 	ldw	r4,-4(fp)
8110dcac:	110de140 	call	8110de14 <vLoadDefaultEPValue>
    /* Load RT */
    vLoadDefaultRTValue( xMeb );
8110dcb0:	e13fff17 	ldw	r4,-4(fp)
8110dcb4:	110deb80 	call	8110deb8 <vLoadDefaultRTValue>
    /* Load SyncSource */
    vLoadDefaultSyncSource( xMeb );
8110dcb8:	e13fff17 	ldw	r4,-4(fp)
8110dcbc:	110df600 	call	8110df60 <vLoadDefaultSyncSource>
    /* Reset TimeCode */
    vResetTimeCode( xMeb );
8110dcc0:	e13fff17 	ldw	r4,-4(fp)
8110dcc4:	110e0400 	call	8110e040 <vResetTimeCode>
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xMeb );
8110dcc8:	e13fff17 	ldw	r4,-4(fp)
8110dccc:	110e1180 	call	8110e118 <vLoadDefaultIdNFEEMaster>
    /* Load Default Config for Auto Reset Mode */
    vLoadDefaultAutoResetSync( xMeb );
8110dcd0:	e13fff17 	ldw	r4,-4(fp)
8110dcd4:	110e0740 	call	8110e074 <vLoadDefaultAutoResetSync>

    // LoadNumberOfNFeesSDCard();
    /* todo: Load from SDCard for now is Hardcoded for 4 instances of NFEE */
    xMeb->ucNofFeesInUse = 2;
8110dcd8:	e0bfff17 	ldw	r2,-4(fp)
8110dcdc:	00c00084 	movi	r3,2
8110dce0:	10c00205 	stb	r3,8(r2)

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
8110dce4:	e0bfff17 	ldw	r2,-4(fp)
8110dce8:	10800017 	ldw	r2,0(r2)
8110dcec:	1000391e 	bne	r2,zero,8110ddd4 <vSimucamStructureInit+0x15c>
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110dcf0:	e03ffe05 	stb	zero,-8(fp)
8110dcf4:	00003306 	br	8110ddc4 <vSimucamStructureInit+0x14c>
            if ( ucIL < xMeb->ucNofFeesInUse ) {
8110dcf8:	e0bfff17 	ldw	r2,-4(fp)
8110dcfc:	10800203 	ldbu	r2,8(r2)
8110dd00:	10803fcc 	andi	r2,r2,255
8110dd04:	e0fffe03 	ldbu	r3,-8(fp)
8110dd08:	18800a2e 	bgeu	r3,r2,8110dd34 <vSimucamStructureInit+0xbc>
                vNFeeStructureInit( &xMeb->xNfee[ ucIL ], ucIL);
8110dd0c:	e0bffe03 	ldbu	r2,-8(fp)
8110dd10:	10802b24 	muli	r2,r2,172
8110dd14:	10800304 	addi	r2,r2,12
8110dd18:	e0ffff17 	ldw	r3,-4(fp)
8110dd1c:	1885883a 	add	r2,r3,r2
8110dd20:	e0fffe03 	ldbu	r3,-8(fp)
8110dd24:	180b883a 	mov	r5,r3
8110dd28:	1009883a 	mov	r4,r2
8110dd2c:	110d5b40 	call	8110d5b4 <vNFeeStructureInit>
8110dd30:	00000906 	br	8110dd58 <vSimucamStructureInit+0xe0>
            } else {
                vNFeeNotInUse( &xMeb->xNfee[ ucIL ], ucIL);
8110dd34:	e0bffe03 	ldbu	r2,-8(fp)
8110dd38:	10802b24 	muli	r2,r2,172
8110dd3c:	10800304 	addi	r2,r2,12
8110dd40:	e0ffff17 	ldw	r3,-4(fp)
8110dd44:	1885883a 	add	r2,r3,r2
8110dd48:	e0fffe03 	ldbu	r3,-8(fp)
8110dd4c:	180b883a 	mov	r5,r3
8110dd50:	1009883a 	mov	r4,r2
8110dd54:	110d5640 	call	8110d564 <vNFeeNotInUse>
            }
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
8110dd58:	e0bffe03 	ldbu	r2,-8(fp)
8110dd5c:	e0fffe03 	ldbu	r3,-8(fp)
8110dd60:	18c02b24 	muli	r3,r3,172
8110dd64:	18c02304 	addi	r3,r3,140
8110dd68:	e13fff17 	ldw	r4,-4(fp)
8110dd6c:	20c7883a 	add	r3,r4,r3
8110dd70:	e13fff17 	ldw	r4,-4(fp)
8110dd74:	108042c4 	addi	r2,r2,267
8110dd78:	1085883a 	add	r2,r2,r2
8110dd7c:	1085883a 	add	r2,r2,r2
8110dd80:	2085883a 	add	r2,r4,r2
8110dd84:	10c00015 	stw	r3,0(r2)
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
8110dd88:	e0bffe03 	ldbu	r2,-8(fp)
8110dd8c:	e0fffe03 	ldbu	r3,-8(fp)
8110dd90:	18c02b24 	muli	r3,r3,172
8110dd94:	18c02404 	addi	r3,r3,144
8110dd98:	e13fff17 	ldw	r4,-4(fp)
8110dd9c:	20c7883a 	add	r3,r4,r3
8110dda0:	e13fff17 	ldw	r4,-4(fp)
8110dda4:	10804444 	addi	r2,r2,273
8110dda8:	1085883a 	add	r2,r2,r2
8110ddac:	1085883a 	add	r2,r2,r2
8110ddb0:	2085883a 	add	r2,r4,r2
8110ddb4:	10c00015 	stw	r3,0(r2)
    xMeb->ucNofFeesInUse = 2;

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110ddb8:	e0bffe03 	ldbu	r2,-8(fp)
8110ddbc:	10800044 	addi	r2,r2,1
8110ddc0:	e0bffe05 	stb	r2,-8(fp)
8110ddc4:	e0bffe03 	ldbu	r2,-8(fp)
8110ddc8:	108001b0 	cmpltui	r2,r2,6
8110ddcc:	103fca1e 	bne	r2,zero,8110dcf8 <__reset+0xfb0edcf8>
8110ddd0:	00000806 	br	8110ddf4 <vSimucamStructureInit+0x17c>
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
        }
    } else {
        /* Are Fast Fee instances */
        for ( ucIL = 0; ucIL < N_OF_FastFEE; ucIL++ ) {
8110ddd4:	e03ffe05 	stb	zero,-8(fp)
8110ddd8:	00000306 	br	8110dde8 <vSimucamStructureInit+0x170>
8110dddc:	e0bffe03 	ldbu	r2,-8(fp)
8110dde0:	10800044 	addi	r2,r2,1
8110dde4:	e0bffe05 	stb	r2,-8(fp)
8110dde8:	e0bffe03 	ldbu	r2,-8(fp)
8110ddec:	108000b0 	cmpltui	r2,r2,2
8110ddf0:	103ffa1e 	bne	r2,zero,8110dddc <__reset+0xfb0edddc>
            }            
        }
    }

    /* Reseting swap memory mechanism */
    xMeb->ucActualDDR = 0;
8110ddf4:	e0bfff17 	ldw	r2,-4(fp)
8110ddf8:	10010505 	stb	zero,1044(r2)

    /* At this point all structures that manage the aplication of Simucam and FEE are initialized, the tasks could start now */


}
8110ddfc:	0001883a 	nop
8110de00:	e037883a 	mov	sp,fp
8110de04:	dfc00117 	ldw	ra,4(sp)
8110de08:	df000017 	ldw	fp,0(sp)
8110de0c:	dec00204 	addi	sp,sp,8
8110de10:	f800283a 	ret

8110de14 <vLoadDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultEPValue( TSimucam_MEB *xMeb ) {
8110de14:	defffe04 	addi	sp,sp,-8
8110de18:	de00012e 	bgeu	sp,et,8110de20 <vLoadDefaultEPValue+0xc>
8110de1c:	003b68fa 	trap	3
8110de20:	df000115 	stw	fp,4(sp)
8110de24:	df000104 	addi	fp,sp,4
8110de28:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucEP = 25;
8110de2c:	e0bfff17 	ldw	r2,-4(fp)
8110de30:	00d07234 	movhi	r3,16840
8110de34:	10c10615 	stw	r3,1048(r2)
}
8110de38:	0001883a 	nop
8110de3c:	e037883a 	mov	sp,fp
8110de40:	df000017 	ldw	fp,0(sp)
8110de44:	dec00104 	addi	sp,sp,4
8110de48:	f800283a 	ret

8110de4c <vChangeEPValue>:

/* Only in MEB_CONFIG */
/* Change the active value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110de4c:	defffd04 	addi	sp,sp,-12
8110de50:	de00012e 	bgeu	sp,et,8110de58 <vChangeEPValue+0xc>
8110de54:	003b68fa 	trap	3
8110de58:	df000215 	stw	fp,8(sp)
8110de5c:	df000204 	addi	fp,sp,8
8110de60:	e13ffe15 	stw	r4,-8(fp)
8110de64:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucEP = ucValue;
8110de68:	e0bffe17 	ldw	r2,-8(fp)
8110de6c:	e0ffff17 	ldw	r3,-4(fp)
8110de70:	10c10615 	stw	r3,1048(r2)
}
8110de74:	0001883a 	nop
8110de78:	e037883a 	mov	sp,fp
8110de7c:	df000017 	ldw	fp,0(sp)
8110de80:	dec00104 	addi	sp,sp,4
8110de84:	f800283a 	ret

8110de88 <vChangeDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Change the default value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeDefaultEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110de88:	defffd04 	addi	sp,sp,-12
8110de8c:	de00012e 	bgeu	sp,et,8110de94 <vChangeDefaultEPValue+0xc>
8110de90:	003b68fa 	trap	3
8110de94:	df000215 	stw	fp,8(sp)
8110de98:	df000204 	addi	fp,sp,8
8110de9c:	e13ffe15 	stw	r4,-8(fp)
8110dea0:	e17fff15 	stw	r5,-4(fp)
    //bSaveEPSDCard(ucValue);
}
8110dea4:	0001883a 	nop
8110dea8:	e037883a 	mov	sp,fp
8110deac:	df000017 	ldw	fp,0(sp)
8110deb0:	dec00104 	addi	sp,sp,4
8110deb4:	f800283a 	ret

8110deb8 <vLoadDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultRTValue( TSimucam_MEB *xMeb ) {
8110deb8:	defffe04 	addi	sp,sp,-8
8110debc:	de00012e 	bgeu	sp,et,8110dec4 <vLoadDefaultRTValue+0xc>
8110dec0:	003b68fa 	trap	3
8110dec4:	df000115 	stw	fp,4(sp)
8110dec8:	df000104 	addi	fp,sp,4
8110decc:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucRT = 3.9;
8110ded0:	e0ffff17 	ldw	r3,-4(fp)
8110ded4:	00901eb4 	movhi	r2,16506
8110ded8:	10a66684 	addi	r2,r2,-26214
8110dedc:	18810715 	stw	r2,1052(r3)
}
8110dee0:	0001883a 	nop
8110dee4:	e037883a 	mov	sp,fp
8110dee8:	df000017 	ldw	fp,0(sp)
8110deec:	dec00104 	addi	sp,sp,4
8110def0:	f800283a 	ret

8110def4 <vChangeRTValue>:

/* Only in MEB_CONFIG */
/* Change the active value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110def4:	defffd04 	addi	sp,sp,-12
8110def8:	de00012e 	bgeu	sp,et,8110df00 <vChangeRTValue+0xc>
8110defc:	003b68fa 	trap	3
8110df00:	df000215 	stw	fp,8(sp)
8110df04:	df000204 	addi	fp,sp,8
8110df08:	e13ffe15 	stw	r4,-8(fp)
8110df0c:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucRT = ucValue;
8110df10:	e0bffe17 	ldw	r2,-8(fp)
8110df14:	e0ffff17 	ldw	r3,-4(fp)
8110df18:	10c10715 	stw	r3,1052(r2)
}
8110df1c:	0001883a 	nop
8110df20:	e037883a 	mov	sp,fp
8110df24:	df000017 	ldw	fp,0(sp)
8110df28:	dec00104 	addi	sp,sp,4
8110df2c:	f800283a 	ret

8110df30 <vChangeDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Change the default value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeDefaultRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110df30:	defffd04 	addi	sp,sp,-12
8110df34:	de00012e 	bgeu	sp,et,8110df3c <vChangeDefaultRTValue+0xc>
8110df38:	003b68fa 	trap	3
8110df3c:	df000215 	stw	fp,8(sp)
8110df40:	df000204 	addi	fp,sp,8
8110df44:	e13ffe15 	stw	r4,-8(fp)
8110df48:	e17fff15 	stw	r5,-4(fp)
    //bSaveRTSDCard(ucValue);
}
8110df4c:	0001883a 	nop
8110df50:	e037883a 	mov	sp,fp
8110df54:	df000017 	ldw	fp,0(sp)
8110df58:	dec00104 	addi	sp,sp,4
8110df5c:	f800283a 	ret

8110df60 <vLoadDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Load Default Config Sync - Internal or external */
void vLoadDefaultSyncSource( TSimucam_MEB *xMeb ) {
8110df60:	defffe04 	addi	sp,sp,-8
8110df64:	de00012e 	bgeu	sp,et,8110df6c <vLoadDefaultSyncSource+0xc>
8110df68:	003b68fa 	trap	3
8110df6c:	df000115 	stw	fp,4(sp)
8110df70:	df000104 	addi	fp,sp,4
8110df74:	e13fff15 	stw	r4,-4(fp)
    //bGetSyncSourceSDCard();
    //todo: For now is hardcoded
    xMeb->eSync = sInternal;
8110df78:	e0bfff17 	ldw	r2,-4(fp)
8110df7c:	10010815 	stw	zero,1056(r2)
}
8110df80:	0001883a 	nop
8110df84:	e037883a 	mov	sp,fp
8110df88:	df000017 	ldw	fp,0(sp)
8110df8c:	dec00104 	addi	sp,sp,4
8110df90:	f800283a 	ret

8110df94 <vChangeSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Active Config Sync - Internal or external */
void vChangeSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110df94:	defffd04 	addi	sp,sp,-12
8110df98:	de00012e 	bgeu	sp,et,8110dfa0 <vChangeSyncSource+0xc>
8110df9c:	003b68fa 	trap	3
8110dfa0:	df000215 	stw	fp,8(sp)
8110dfa4:	df000204 	addi	fp,sp,8
8110dfa8:	e13ffe15 	stw	r4,-8(fp)
8110dfac:	e17fff15 	stw	r5,-4(fp)
    xMeb->eSync = eSource;
8110dfb0:	e0bffe17 	ldw	r2,-8(fp)
8110dfb4:	e0ffff17 	ldw	r3,-4(fp)
8110dfb8:	10c10815 	stw	r3,1056(r2)
}
8110dfbc:	0001883a 	nop
8110dfc0:	e037883a 	mov	sp,fp
8110dfc4:	df000017 	ldw	fp,0(sp)
8110dfc8:	dec00104 	addi	sp,sp,4
8110dfcc:	f800283a 	ret

8110dfd0 <vChangeDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Default Config Sync - Internal or external */
void vChangeDefaultSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110dfd0:	defffd04 	addi	sp,sp,-12
8110dfd4:	de00012e 	bgeu	sp,et,8110dfdc <vChangeDefaultSyncSource+0xc>
8110dfd8:	003b68fa 	trap	3
8110dfdc:	df000215 	stw	fp,8(sp)
8110dfe0:	df000204 	addi	fp,sp,8
8110dfe4:	e13ffe15 	stw	r4,-8(fp)
8110dfe8:	e17fff15 	stw	r5,-4(fp)
    //bSaveSyncSourceSDCard(eSource);
}
8110dfec:	0001883a 	nop
8110dff0:	e037883a 	mov	sp,fp
8110dff4:	df000017 	ldw	fp,0(sp)
8110dff8:	dec00104 	addi	sp,sp,4
8110dffc:	f800283a 	ret

8110e000 <vSetTimeCode>:

/* Any mode */
/* Set the time code of the Simucam */
void vSetTimeCode( TSimucam_MEB *xMeb, unsigned char ucTime ) {
8110e000:	defffd04 	addi	sp,sp,-12
8110e004:	de00012e 	bgeu	sp,et,8110e00c <vSetTimeCode+0xc>
8110e008:	003b68fa 	trap	3
8110e00c:	df000215 	stw	fp,8(sp)
8110e010:	df000204 	addi	fp,sp,8
8110e014:	e13ffe15 	stw	r4,-8(fp)
8110e018:	2805883a 	mov	r2,r5
8110e01c:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucTimeCode = ucTime;
8110e020:	e0bffe17 	ldw	r2,-8(fp)
8110e024:	e0ffff03 	ldbu	r3,-4(fp)
8110e028:	10c10905 	stb	r3,1060(r2)
}
8110e02c:	0001883a 	nop
8110e030:	e037883a 	mov	sp,fp
8110e034:	df000017 	ldw	fp,0(sp)
8110e038:	dec00104 	addi	sp,sp,4
8110e03c:	f800283a 	ret

8110e040 <vResetTimeCode>:

/* Reset the time code of the Simucam */
void vResetTimeCode( TSimucam_MEB *xMeb ) {
8110e040:	defffe04 	addi	sp,sp,-8
8110e044:	de00012e 	bgeu	sp,et,8110e04c <vResetTimeCode+0xc>
8110e048:	003b68fa 	trap	3
8110e04c:	df000115 	stw	fp,4(sp)
8110e050:	df000104 	addi	fp,sp,4
8110e054:	e13fff15 	stw	r4,-4(fp)
    xMeb->ucTimeCode = 0;
8110e058:	e0bfff17 	ldw	r2,-4(fp)
8110e05c:	10010905 	stb	zero,1060(r2)
}
8110e060:	0001883a 	nop
8110e064:	e037883a 	mov	sp,fp
8110e068:	df000017 	ldw	fp,0(sp)
8110e06c:	dec00104 	addi	sp,sp,4
8110e070:	f800283a 	ret

8110e074 <vLoadDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Load Default Config for AutoResetSync */
void vLoadDefaultAutoResetSync( TSimucam_MEB *xMeb ) {
8110e074:	defffe04 	addi	sp,sp,-8
8110e078:	de00012e 	bgeu	sp,et,8110e080 <vLoadDefaultAutoResetSync+0xc>
8110e07c:	003b68fa 	trap	3
8110e080:	df000115 	stw	fp,4(sp)
8110e084:	df000104 	addi	fp,sp,4
8110e088:	e13fff15 	stw	r4,-4(fp)
    //bGetAutoResetSyncSDCard();
    //todo: For now is hardcoded
    xMeb->bAutoRestSyncMode = TRUE;
8110e08c:	e0bfff17 	ldw	r2,-4(fp)
8110e090:	00c00044 	movi	r3,1
8110e094:	10c10a15 	stw	r3,1064(r2)
}
8110e098:	0001883a 	nop
8110e09c:	e037883a 	mov	sp,fp
8110e0a0:	df000017 	ldw	fp,0(sp)
8110e0a4:	dec00104 	addi	sp,sp,4
8110e0a8:	f800283a 	ret

8110e0ac <vChangeAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Config for AutoResetSync*/
void vChangeAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110e0ac:	defffd04 	addi	sp,sp,-12
8110e0b0:	de00012e 	bgeu	sp,et,8110e0b8 <vChangeAutoResetSync+0xc>
8110e0b4:	003b68fa 	trap	3
8110e0b8:	df000215 	stw	fp,8(sp)
8110e0bc:	df000204 	addi	fp,sp,8
8110e0c0:	e13ffe15 	stw	r4,-8(fp)
8110e0c4:	e17fff15 	stw	r5,-4(fp)
    xMeb->bAutoRestSyncMode = bAutoReset;
8110e0c8:	e0bffe17 	ldw	r2,-8(fp)
8110e0cc:	e0ffff17 	ldw	r3,-4(fp)
8110e0d0:	10c10a15 	stw	r3,1064(r2)
}
8110e0d4:	0001883a 	nop
8110e0d8:	e037883a 	mov	sp,fp
8110e0dc:	df000017 	ldw	fp,0(sp)
8110e0e0:	dec00104 	addi	sp,sp,4
8110e0e4:	f800283a 	ret

8110e0e8 <vChangeDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Default Config for AutoResetSync */
void vChangeDefaultAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110e0e8:	defffd04 	addi	sp,sp,-12
8110e0ec:	de00012e 	bgeu	sp,et,8110e0f4 <vChangeDefaultAutoResetSync+0xc>
8110e0f0:	003b68fa 	trap	3
8110e0f4:	df000215 	stw	fp,8(sp)
8110e0f8:	df000204 	addi	fp,sp,8
8110e0fc:	e13ffe15 	stw	r4,-8(fp)
8110e100:	e17fff15 	stw	r5,-4(fp)
    //bSaveAutoResetSyncSDCard(bAutoReset);
}
8110e104:	0001883a 	nop
8110e108:	e037883a 	mov	sp,fp
8110e10c:	df000017 	ldw	fp,0(sp)
8110e110:	dec00104 	addi	sp,sp,4
8110e114:	f800283a 	ret

8110e118 <vLoadDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Load Default Config for IdNFEEMaster */
void vLoadDefaultIdNFEEMaster( TSimucam_MEB *xMeb ) {
8110e118:	defffe04 	addi	sp,sp,-8
8110e11c:	de00012e 	bgeu	sp,et,8110e124 <vLoadDefaultIdNFEEMaster+0xc>
8110e120:	003b68fa 	trap	3
8110e124:	df000115 	stw	fp,4(sp)
8110e128:	df000104 	addi	fp,sp,4
8110e12c:	e13fff15 	stw	r4,-4(fp)
    //bGetIdNFEEMasterSDCard();
    //todo: For now is hardcoded
    xMeb->ucIdNFEEMaster = 0;
8110e130:	e0bfff17 	ldw	r2,-4(fp)
8110e134:	10010945 	stb	zero,1061(r2)
}
8110e138:	0001883a 	nop
8110e13c:	e037883a 	mov	sp,fp
8110e140:	df000017 	ldw	fp,0(sp)
8110e144:	dec00104 	addi	sp,sp,4
8110e148:	f800283a 	ret

8110e14c <vChangeIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Config for IdNFEEMaster*/
void vChangeIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110e14c:	defffd04 	addi	sp,sp,-12
8110e150:	de00012e 	bgeu	sp,et,8110e158 <vChangeIdNFEEMaster+0xc>
8110e154:	003b68fa 	trap	3
8110e158:	df000215 	stw	fp,8(sp)
8110e15c:	df000204 	addi	fp,sp,8
8110e160:	e13ffe15 	stw	r4,-8(fp)
8110e164:	2805883a 	mov	r2,r5
8110e168:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucIdNFEEMaster = ucIdMaster;
8110e16c:	e0bffe17 	ldw	r2,-8(fp)
8110e170:	e0ffff03 	ldbu	r3,-4(fp)
8110e174:	10c10945 	stb	r3,1061(r2)
}
8110e178:	0001883a 	nop
8110e17c:	e037883a 	mov	sp,fp
8110e180:	df000017 	ldw	fp,0(sp)
8110e184:	dec00104 	addi	sp,sp,4
8110e188:	f800283a 	ret

8110e18c <vChangeDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Default Config for IdNFEEMaster */
void vChangeDefaultIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110e18c:	defffd04 	addi	sp,sp,-12
8110e190:	de00012e 	bgeu	sp,et,8110e198 <vChangeDefaultIdNFEEMaster+0xc>
8110e194:	003b68fa 	trap	3
8110e198:	df000215 	stw	fp,8(sp)
8110e19c:	df000204 	addi	fp,sp,8
8110e1a0:	e13ffe15 	stw	r4,-8(fp)
8110e1a4:	2805883a 	mov	r2,r5
8110e1a8:	e0bfff05 	stb	r2,-4(fp)
    //bSaveIdNFEEMasterSDCard(ucIdMaster);
}
8110e1ac:	0001883a 	nop
8110e1b0:	e037883a 	mov	sp,fp
8110e1b4:	df000017 	ldw	fp,0(sp)
8110e1b8:	dec00104 	addi	sp,sp,4
8110e1bc:	f800283a 	ret

8110e1c0 <vSyncReset>:

/* Any mode */
/* Synchronization Reset */
void vSyncReset( TSimucam_MEB *xMeb, float ufSynchDelay ) {
8110e1c0:	defffc04 	addi	sp,sp,-16
8110e1c4:	de00012e 	bgeu	sp,et,8110e1cc <vSyncReset+0xc>
8110e1c8:	003b68fa 	trap	3
8110e1cc:	dfc00315 	stw	ra,12(sp)
8110e1d0:	df000215 	stw	fp,8(sp)
8110e1d4:	df000204 	addi	fp,sp,8
8110e1d8:	e13ffe15 	stw	r4,-8(fp)
8110e1dc:	e17fff15 	stw	r5,-4(fp)
    // Stop all transmission

    // Put all NFEE in Stand-by mode, if not in Config mode

    // Reset the time code
    vResetTimeCode(xMeb);
8110e1e0:	e13ffe17 	ldw	r4,-8(fp)
8110e1e4:	110e0400 	call	8110e040 <vResetTimeCode>

    // Release a synchronization signal

    // Start new cycle

}
8110e1e8:	0001883a 	nop
8110e1ec:	e037883a 	mov	sp,fp
8110e1f0:	dfc00117 	ldw	ra,4(sp)
8110e1f4:	df000017 	ldw	fp,0(sp)
8110e1f8:	dec00204 	addi	sp,sp,8
8110e1fc:	f800283a 	ret

8110e200 <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
8110e200:	defffe04 	addi	sp,sp,-8
8110e204:	de00012e 	bgeu	sp,et,8110e20c <bSDcardIsPresent+0xc>
8110e208:	003b68fa 	trap	3
8110e20c:	dfc00115 	stw	ra,4(sp)
8110e210:	df000015 	stw	fp,0(sp)
8110e214:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
8110e218:	113362c0 	call	8113362c <alt_up_sd_card_is_Present>
}
8110e21c:	e037883a 	mov	sp,fp
8110e220:	dfc00117 	ldw	ra,4(sp)
8110e224:	df000017 	ldw	fp,0(sp)
8110e228:	dec00204 	addi	sp,sp,8
8110e22c:	f800283a 	ret

8110e230 <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
8110e230:	defffe04 	addi	sp,sp,-8
8110e234:	de00012e 	bgeu	sp,et,8110e23c <bSDcardFAT16Check+0xc>
8110e238:	003b68fa 	trap	3
8110e23c:	dfc00115 	stw	ra,4(sp)
8110e240:	df000015 	stw	fp,0(sp)
8110e244:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
8110e248:	11336f80 	call	811336f8 <alt_up_sd_card_is_FAT16>
}
8110e24c:	e037883a 	mov	sp,fp
8110e250:	dfc00117 	ldw	ra,4(sp)
8110e254:	df000017 	ldw	fp,0(sp)
8110e258:	dec00204 	addi	sp,sp,8
8110e25c:	f800283a 	ret

8110e260 <bInitializeSDCard>:

bool bInitializeSDCard( void ){
8110e260:	defffd04 	addi	sp,sp,-12
8110e264:	de00012e 	bgeu	sp,et,8110e26c <bInitializeSDCard+0xc>
8110e268:	003b68fa 	trap	3
8110e26c:	dfc00215 	stw	ra,8(sp)
8110e270:	df000115 	stw	fp,4(sp)
8110e274:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
8110e278:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
8110e27c:	d0205d15 	stw	zero,-32396(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
8110e280:	01204534 	movhi	r4,33044
8110e284:	212ff504 	addi	r4,r4,-16428
8110e288:	11335680 	call	81133568 <alt_up_sd_card_open_dev>
8110e28c:	d0a05d15 	stw	r2,-32396(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
8110e290:	d0a05d17 	ldw	r2,-32396(gp)
8110e294:	10002226 	beq	r2,zero,8110e320 <bInitializeSDCard+0xc0>

		bSucess = bSDcardIsPresent();
8110e298:	110e2000 	call	8110e200 <bSDcardIsPresent>
8110e29c:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
8110e2a0:	e0bfff17 	ldw	r2,-4(fp)
8110e2a4:	10001626 	beq	r2,zero,8110e300 <bInitializeSDCard+0xa0>
			bSucess = bSDcardFAT16Check();
8110e2a8:	110e2300 	call	8110e230 <bSDcardFAT16Check>
8110e2ac:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
8110e2b0:	e0bfff17 	ldw	r2,-4(fp)
8110e2b4:	10000a26 	beq	r2,zero,8110e2e0 <bInitializeSDCard+0x80>
				xSdHandle.connected = TRUE;
8110e2b8:	00800044 	movi	r2,1
8110e2bc:	d0a05c15 	stw	r2,-32400(gp)
				debug(fp, "SD is up.\r\n");
8110e2c0:	d0a04d17 	ldw	r2,-32460(gp)
8110e2c4:	100f883a 	mov	r7,r2
8110e2c8:	018002c4 	movi	r6,11
8110e2cc:	01400044 	movi	r5,1
8110e2d0:	01204534 	movhi	r4,33044
8110e2d4:	21300004 	addi	r4,r4,-16384
8110e2d8:	11104940 	call	81110494 <fwrite>
8110e2dc:	00001806 	br	8110e340 <bInitializeSDCard+0xe0>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
8110e2e0:	d0a04d17 	ldw	r2,-32460(gp)
8110e2e4:	100f883a 	mov	r7,r2
8110e2e8:	01800984 	movi	r6,38
8110e2ec:	01400044 	movi	r5,1
8110e2f0:	01204534 	movhi	r4,33044
8110e2f4:	21300304 	addi	r4,r4,-16372
8110e2f8:	11104940 	call	81110494 <fwrite>
8110e2fc:	00001006 	br	8110e340 <bInitializeSDCard+0xe0>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
8110e300:	d0a04d17 	ldw	r2,-32460(gp)
8110e304:	100f883a 	mov	r7,r2
8110e308:	01800744 	movi	r6,29
8110e30c:	01400044 	movi	r5,1
8110e310:	01204534 	movhi	r4,33044
8110e314:	21300d04 	addi	r4,r4,-16332
8110e318:	11104940 	call	81110494 <fwrite>
8110e31c:	00000806 	br	8110e340 <bInitializeSDCard+0xe0>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
8110e320:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
8110e324:	d0a04d17 	ldw	r2,-32460(gp)
8110e328:	100f883a 	mov	r7,r2
8110e32c:	018008c4 	movi	r6,35
8110e330:	01400044 	movi	r5,1
8110e334:	01204534 	movhi	r4,33044
8110e338:	21301504 	addi	r4,r4,-16300
8110e33c:	11104940 	call	81110494 <fwrite>
	}

	return bSucess;
8110e340:	e0bfff17 	ldw	r2,-4(fp)
}
8110e344:	e037883a 	mov	sp,fp
8110e348:	dfc00117 	ldw	ra,4(sp)
8110e34c:	df000017 	ldw	fp,0(sp)
8110e350:	dec00204 	addi	sp,sp,8
8110e354:	f800283a 	ret

8110e358 <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
8110e358:	defffd04 	addi	sp,sp,-12
8110e35c:	de00012e 	bgeu	sp,et,8110e364 <siOpenFile+0xc>
8110e360:	003b68fa 	trap	3
8110e364:	dfc00215 	stw	ra,8(sp)
8110e368:	df000115 	stw	fp,4(sp)
8110e36c:	df000104 	addi	fp,sp,4
8110e370:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
8110e374:	000b883a 	mov	r5,zero
8110e378:	e13fff17 	ldw	r4,-4(fp)
8110e37c:	1133c040 	call	81133c04 <alt_up_sd_card_fopen>
}
8110e380:	e037883a 	mov	sp,fp
8110e384:	dfc00117 	ldw	ra,4(sp)
8110e388:	df000017 	ldw	fp,0(sp)
8110e38c:	dec00204 	addi	sp,sp,8
8110e390:	f800283a 	ret

8110e394 <siCloseFile>:

bool siCloseFile( short int file_handle ) {
8110e394:	defffd04 	addi	sp,sp,-12
8110e398:	de00012e 	bgeu	sp,et,8110e3a0 <siCloseFile+0xc>
8110e39c:	003b68fa 	trap	3
8110e3a0:	dfc00215 	stw	ra,8(sp)
8110e3a4:	df000115 	stw	fp,4(sp)
8110e3a8:	df000104 	addi	fp,sp,4
8110e3ac:	2005883a 	mov	r2,r4
8110e3b0:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
8110e3b4:	e0bfff0f 	ldh	r2,-4(fp)
8110e3b8:	1009883a 	mov	r4,r2
8110e3bc:	1134a500 	call	81134a50 <alt_up_sd_card_fclose>
}
8110e3c0:	e037883a 	mov	sp,fp
8110e3c4:	dfc00117 	ldw	ra,4(sp)
8110e3c8:	df000017 	ldw	fp,0(sp)
8110e3cc:	dec00204 	addi	sp,sp,8
8110e3d0:	f800283a 	ret

8110e3d4 <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
8110e3d4:	defffd04 	addi	sp,sp,-12
8110e3d8:	de00012e 	bgeu	sp,et,8110e3e0 <cGetNextChar+0xc>
8110e3dc:	003b68fa 	trap	3
8110e3e0:	dfc00215 	stw	ra,8(sp)
8110e3e4:	df000115 	stw	fp,4(sp)
8110e3e8:	df000104 	addi	fp,sp,4
8110e3ec:	2005883a 	mov	r2,r4
8110e3f0:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
8110e3f4:	e0bfff0f 	ldh	r2,-4(fp)
8110e3f8:	1009883a 	mov	r4,r2
8110e3fc:	11340a80 	call	811340a8 <alt_up_sd_card_read>
}
8110e400:	e037883a 	mov	sp,fp
8110e404:	dfc00117 	ldw	ra,4(sp)
8110e408:	df000017 	ldw	fp,0(sp)
8110e40c:	dec00204 	addi	sp,sp,8
8110e410:	f800283a 	ret

8110e414 <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
8110e414:	deffff04 	addi	sp,sp,-4
8110e418:	de00012e 	bgeu	sp,et,8110e420 <bTestSimucamCriticalHW+0xc>
8110e41c:	003b68fa 	trap	3
8110e420:	df000015 	stw	fp,0(sp)
8110e424:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
8110e428:	00800044 	movi	r2,1
}
8110e42c:	e037883a 	mov	sp,fp
8110e430:	df000017 	ldw	fp,0(sp)
8110e434:	dec00104 	addi	sp,sp,4
8110e438:	f800283a 	ret

8110e43c <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
8110e43c:	defffc04 	addi	sp,sp,-16
8110e440:	de00012e 	bgeu	sp,et,8110e448 <_reg_write+0xc>
8110e444:	003b68fa 	trap	3
8110e448:	df000315 	stw	fp,12(sp)
8110e44c:	df000304 	addi	fp,sp,12
8110e450:	e13ffd15 	stw	r4,-12(fp)
8110e454:	e17ffe15 	stw	r5,-8(fp)
8110e458:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
8110e45c:	e0bffe17 	ldw	r2,-8(fp)
8110e460:	1085883a 	add	r2,r2,r2
8110e464:	1085883a 	add	r2,r2,r2
8110e468:	1007883a 	mov	r3,r2
8110e46c:	e0bffd17 	ldw	r2,-12(fp)
8110e470:	1885883a 	add	r2,r3,r2
8110e474:	1007883a 	mov	r3,r2
8110e478:	e0bfff17 	ldw	r2,-4(fp)
8110e47c:	18800035 	stwio	r2,0(r3)
	return 1;
8110e480:	00800044 	movi	r2,1

}
8110e484:	e037883a 	mov	sp,fp
8110e488:	df000017 	ldw	fp,0(sp)
8110e48c:	dec00104 	addi	sp,sp,4
8110e490:	f800283a 	ret

8110e494 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
8110e494:	defffc04 	addi	sp,sp,-16
8110e498:	de00012e 	bgeu	sp,et,8110e4a0 <_reg_read+0xc>
8110e49c:	003b68fa 	trap	3
8110e4a0:	df000315 	stw	fp,12(sp)
8110e4a4:	df000304 	addi	fp,sp,12
8110e4a8:	e13ffd15 	stw	r4,-12(fp)
8110e4ac:	e17ffe15 	stw	r5,-8(fp)
8110e4b0:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
8110e4b4:	e0bffe17 	ldw	r2,-8(fp)
8110e4b8:	1085883a 	add	r2,r2,r2
8110e4bc:	1085883a 	add	r2,r2,r2
8110e4c0:	1007883a 	mov	r3,r2
8110e4c4:	e0bffd17 	ldw	r2,-12(fp)
8110e4c8:	1885883a 	add	r2,r3,r2
8110e4cc:	10c00037 	ldwio	r3,0(r2)
8110e4d0:	e0bfff17 	ldw	r2,-4(fp)
8110e4d4:	10c00015 	stw	r3,0(r2)
	return 1;
8110e4d8:	00800044 	movi	r2,1

}
8110e4dc:	e037883a 	mov	sp,fp
8110e4e0:	df000017 	ldw	fp,0(sp)
8110e4e4:	dec00104 	addi	sp,sp,4
8110e4e8:	f800283a 	ret

8110e4ec <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
8110e4ec:	defffa04 	addi	sp,sp,-24
8110e4f0:	de00012e 	bgeu	sp,et,8110e4f8 <_print_codec_status+0xc>
8110e4f4:	003b68fa 	trap	3
8110e4f8:	dfc00515 	stw	ra,20(sp)
8110e4fc:	df000415 	stw	fp,16(sp)
8110e500:	df000404 	addi	fp,sp,16
8110e504:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
8110e508:	e0bfff17 	ldw	r2,-4(fp)
8110e50c:	1005d1ba 	srai	r2,r2,6
8110e510:	1080004c 	andi	r2,r2,1
8110e514:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
8110e518:	e0bfff17 	ldw	r2,-4(fp)
8110e51c:	1005d17a 	srai	r2,r2,5
8110e520:	1080004c 	andi	r2,r2,1
8110e524:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
8110e528:	e0bfff17 	ldw	r2,-4(fp)
8110e52c:	1005d13a 	srai	r2,r2,4
8110e530:	1080004c 	andi	r2,r2,1
8110e534:	e0bffe15 	stw	r2,-8(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "-------- link status \n");
8110e538:	00e04534 	movhi	r3,33044
8110e53c:	18faec04 	addi	r3,r3,-5200
8110e540:	00a04534 	movhi	r2,33044
8110e544:	10b01e04 	addi	r2,r2,-16264
8110e548:	1009883a 	mov	r4,r2
8110e54c:	008005c4 	movi	r2,23
8110e550:	100d883a 	mov	r6,r2
8110e554:	200b883a 	mov	r5,r4
8110e558:	1809883a 	mov	r4,r3
8110e55c:	1110ea80 	call	81110ea8 <memcpy>
	debug(fp, cDebugBuffer);
8110e560:	d0a04d17 	ldw	r2,-32460(gp)
8110e564:	01604534 	movhi	r5,33044
8110e568:	297aec04 	addi	r5,r5,-5200
8110e56c:	1009883a 	mov	r4,r2
8110e570:	110fea80 	call	8110fea8 <fprintf>
	sprintf(cDebugBuffer, "Link started    : %s \n", (started == 1) ? "S" : "N");
8110e574:	e0bffc17 	ldw	r2,-16(fp)
8110e578:	10800058 	cmpnei	r2,r2,1
8110e57c:	1000031e 	bne	r2,zero,8110e58c <_print_codec_status+0xa0>
8110e580:	00a04534 	movhi	r2,33044
8110e584:	10b02404 	addi	r2,r2,-16240
8110e588:	00000206 	br	8110e594 <_print_codec_status+0xa8>
8110e58c:	00a04534 	movhi	r2,33044
8110e590:	10b02504 	addi	r2,r2,-16236
8110e594:	100d883a 	mov	r6,r2
8110e598:	01604534 	movhi	r5,33044
8110e59c:	29702604 	addi	r5,r5,-16232
8110e5a0:	01204534 	movhi	r4,33044
8110e5a4:	213aec04 	addi	r4,r4,-5200
8110e5a8:	11116100 	call	81111610 <sprintf>
	debug(fp, cDebugBuffer);
8110e5ac:	d0a04d17 	ldw	r2,-32460(gp)
8110e5b0:	01604534 	movhi	r5,33044
8110e5b4:	297aec04 	addi	r5,r5,-5200
8110e5b8:	1009883a 	mov	r4,r2
8110e5bc:	110fea80 	call	8110fea8 <fprintf>
	sprintf(cDebugBuffer, "Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8110e5c0:	e0bffd17 	ldw	r2,-12(fp)
8110e5c4:	10800058 	cmpnei	r2,r2,1
8110e5c8:	1000031e 	bne	r2,zero,8110e5d8 <_print_codec_status+0xec>
8110e5cc:	00a04534 	movhi	r2,33044
8110e5d0:	10b02404 	addi	r2,r2,-16240
8110e5d4:	00000206 	br	8110e5e0 <_print_codec_status+0xf4>
8110e5d8:	00a04534 	movhi	r2,33044
8110e5dc:	10b02504 	addi	r2,r2,-16236
8110e5e0:	100d883a 	mov	r6,r2
8110e5e4:	01604534 	movhi	r5,33044
8110e5e8:	29702c04 	addi	r5,r5,-16208
8110e5ec:	01204534 	movhi	r4,33044
8110e5f0:	213aec04 	addi	r4,r4,-5200
8110e5f4:	11116100 	call	81111610 <sprintf>
	debug(fp, cDebugBuffer);
8110e5f8:	d0a04d17 	ldw	r2,-32460(gp)
8110e5fc:	01604534 	movhi	r5,33044
8110e600:	297aec04 	addi	r5,r5,-5200
8110e604:	1009883a 	mov	r4,r2
8110e608:	110fea80 	call	8110fea8 <fprintf>
	sprintf(cDebugBuffer, "Link running    : %s \n", (running == 1) ? "S" : "N");
8110e60c:	e0bffe17 	ldw	r2,-8(fp)
8110e610:	10800058 	cmpnei	r2,r2,1
8110e614:	1000031e 	bne	r2,zero,8110e624 <_print_codec_status+0x138>
8110e618:	00a04534 	movhi	r2,33044
8110e61c:	10b02404 	addi	r2,r2,-16240
8110e620:	00000206 	br	8110e62c <_print_codec_status+0x140>
8110e624:	00a04534 	movhi	r2,33044
8110e628:	10b02504 	addi	r2,r2,-16236
8110e62c:	100d883a 	mov	r6,r2
8110e630:	01604534 	movhi	r5,33044
8110e634:	29703204 	addi	r5,r5,-16184
8110e638:	01204534 	movhi	r4,33044
8110e63c:	213aec04 	addi	r4,r4,-5200
8110e640:	11116100 	call	81111610 <sprintf>
	debug(fp, cDebugBuffer);
8110e644:	d0a04d17 	ldw	r2,-32460(gp)
8110e648:	01604534 	movhi	r5,33044
8110e64c:	297aec04 	addi	r5,r5,-5200
8110e650:	1009883a 	mov	r4,r2
8110e654:	110fea80 	call	8110fea8 <fprintf>
	sprintf(cDebugBuffer, "--------  \n");
8110e658:	00a04534 	movhi	r2,33044
8110e65c:	10baec04 	addi	r2,r2,-5200
8110e660:	00c00b44 	movi	r3,45
8110e664:	10c00005 	stb	r3,0(r2)
8110e668:	00c00b44 	movi	r3,45
8110e66c:	10c00045 	stb	r3,1(r2)
8110e670:	00c00b44 	movi	r3,45
8110e674:	10c00085 	stb	r3,2(r2)
8110e678:	00c00b44 	movi	r3,45
8110e67c:	10c000c5 	stb	r3,3(r2)
8110e680:	00c00b44 	movi	r3,45
8110e684:	10c00105 	stb	r3,4(r2)
8110e688:	00c00b44 	movi	r3,45
8110e68c:	10c00145 	stb	r3,5(r2)
8110e690:	00c00b44 	movi	r3,45
8110e694:	10c00185 	stb	r3,6(r2)
8110e698:	00c00b44 	movi	r3,45
8110e69c:	10c001c5 	stb	r3,7(r2)
8110e6a0:	00c00804 	movi	r3,32
8110e6a4:	10c00205 	stb	r3,8(r2)
8110e6a8:	00c00804 	movi	r3,32
8110e6ac:	10c00245 	stb	r3,9(r2)
8110e6b0:	00c00284 	movi	r3,10
8110e6b4:	10c00285 	stb	r3,10(r2)
8110e6b8:	100002c5 	stb	zero,11(r2)
	debug(fp, cDebugBuffer);
8110e6bc:	d0a04d17 	ldw	r2,-32460(gp)
8110e6c0:	01604534 	movhi	r5,33044
8110e6c4:	297aec04 	addi	r5,r5,-5200
8110e6c8:	1009883a 	mov	r4,r2
8110e6cc:	110fea80 	call	8110fea8 <fprintf>
#endif
}
8110e6d0:	0001883a 	nop
8110e6d4:	e037883a 	mov	sp,fp
8110e6d8:	dfc00117 	ldw	ra,4(sp)
8110e6dc:	df000017 	ldw	fp,0(sp)
8110e6e0:	dec00204 	addi	sp,sp,8
8110e6e4:	f800283a 	ret

8110e6e8 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
8110e6e8:	defffb04 	addi	sp,sp,-20
8110e6ec:	de00012e 	bgeu	sp,et,8110e6f4 <_split_codec_status+0xc>
8110e6f0:	003b68fa 	trap	3
8110e6f4:	df000415 	stw	fp,16(sp)
8110e6f8:	df000404 	addi	fp,sp,16
8110e6fc:	e13ffc15 	stw	r4,-16(fp)
8110e700:	e17ffd15 	stw	r5,-12(fp)
8110e704:	e1bffe15 	stw	r6,-8(fp)
8110e708:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
8110e70c:	e0bffc17 	ldw	r2,-16(fp)
8110e710:	1005d1ba 	srai	r2,r2,6
8110e714:	10c0004c 	andi	r3,r2,1
8110e718:	e0bffd17 	ldw	r2,-12(fp)
8110e71c:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8110e720:	e0bffc17 	ldw	r2,-16(fp)
8110e724:	1005d17a 	srai	r2,r2,5
8110e728:	10c0004c 	andi	r3,r2,1
8110e72c:	e0bffe17 	ldw	r2,-8(fp)
8110e730:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
8110e734:	e0bffc17 	ldw	r2,-16(fp)
8110e738:	1005d13a 	srai	r2,r2,4
8110e73c:	10c0004c 	andi	r3,r2,1
8110e740:	e0bfff17 	ldw	r2,-4(fp)
8110e744:	10c00015 	stw	r3,0(r2)
}
8110e748:	0001883a 	nop
8110e74c:	e037883a 	mov	sp,fp
8110e750:	df000017 	ldw	fp,0(sp)
8110e754:	dec00104 	addi	sp,sp,4
8110e758:	f800283a 	ret

8110e75c <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
alt_u8 aatoh(alt_u8 *buffer) {
8110e75c:	defffc04 	addi	sp,sp,-16
8110e760:	de00012e 	bgeu	sp,et,8110e768 <aatoh+0xc>
8110e764:	003b68fa 	trap	3
8110e768:	df000315 	stw	fp,12(sp)
8110e76c:	df000304 	addi	fp,sp,12
8110e770:	e13fff15 	stw	r4,-4(fp)
	alt_u8* a;
	alt_u8 v;
	a = buffer;
8110e774:	e0bfff17 	ldw	r2,-4(fp)
8110e778:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110e77c:	e0bffd17 	ldw	r2,-12(fp)
8110e780:	10c00003 	ldbu	r3,0(r2)
8110e784:	e0bffd17 	ldw	r2,-12(fp)
8110e788:	10800003 	ldbu	r2,0(r2)
8110e78c:	10803fcc 	andi	r2,r2,255
8110e790:	10800eb0 	cmpltui	r2,r2,58
8110e794:	1000021e 	bne	r2,zero,8110e7a0 <aatoh+0x44>
8110e798:	00800dc4 	movi	r2,55
8110e79c:	00000106 	br	8110e7a4 <aatoh+0x48>
8110e7a0:	00800c04 	movi	r2,48
8110e7a4:	1885c83a 	sub	r2,r3,r2
8110e7a8:	1004913a 	slli	r2,r2,4
8110e7ac:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
8110e7b0:	e0bffd17 	ldw	r2,-12(fp)
8110e7b4:	10800044 	addi	r2,r2,1
8110e7b8:	10c00003 	ldbu	r3,0(r2)
8110e7bc:	e0bffd17 	ldw	r2,-12(fp)
8110e7c0:	10800044 	addi	r2,r2,1
8110e7c4:	10800003 	ldbu	r2,0(r2)
 */
alt_u8 aatoh(alt_u8 *buffer) {
	alt_u8* a;
	alt_u8 v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110e7c8:	10803fcc 	andi	r2,r2,255
8110e7cc:	10800eb0 	cmpltui	r2,r2,58
8110e7d0:	1000021e 	bne	r2,zero,8110e7dc <aatoh+0x80>
8110e7d4:	00800dc4 	movi	r2,55
8110e7d8:	00000106 	br	8110e7e0 <aatoh+0x84>
8110e7dc:	00800c04 	movi	r2,48
8110e7e0:	1885c83a 	sub	r2,r3,r2
8110e7e4:	2085883a 	add	r2,r4,r2
8110e7e8:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
8110e7ec:	e0bffe03 	ldbu	r2,-8(fp)
}
8110e7f0:	e037883a 	mov	sp,fp
8110e7f4:	df000017 	ldw	fp,0(sp)
8110e7f8:	dec00104 	addi	sp,sp,4
8110e7fc:	f800283a 	ret

8110e800 <Verif_Error>:
 * *
 * @retval int
 *
 */

alt_u8 Verif_Error(alt_u8 error_code) {
8110e800:	defffd04 	addi	sp,sp,-12
8110e804:	de00012e 	bgeu	sp,et,8110e80c <Verif_Error+0xc>
8110e808:	003b68fa 	trap	3
8110e80c:	dfc00215 	stw	ra,8(sp)
8110e810:	df000115 	stw	fp,4(sp)
8110e814:	df000104 	addi	fp,sp,4
8110e818:	2005883a 	mov	r2,r4
8110e81c:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
8110e820:	e0bfff03 	ldbu	r2,-4(fp)
8110e824:	1000091e 	bne	r2,zero,8110e84c <Verif_Error+0x4c>
#ifdef DEBUG_ON
	debug(fp, "ERROR\n\r");
8110e828:	d0a04d17 	ldw	r2,-32460(gp)
8110e82c:	100f883a 	mov	r7,r2
8110e830:	018001c4 	movi	r6,7
8110e834:	01400044 	movi	r5,1
8110e838:	01204534 	movhi	r4,33044
8110e83c:	21303804 	addi	r4,r4,-16160
8110e840:	11104940 	call	81110494 <fwrite>
#endif
		return 0;
8110e844:	0005883a 	mov	r2,zero
8110e848:	00000106 	br	8110e850 <Verif_Error+0x50>
	} else
		return 1;
8110e84c:	00800044 	movi	r2,1
}
8110e850:	e037883a 	mov	sp,fp
8110e854:	dfc00117 	ldw	ra,4(sp)
8110e858:	df000017 	ldw	fp,0(sp)
8110e85c:	dec00204 	addi	sp,sp,8
8110e860:	f800283a 	ret

8110e864 <toInt>:
 * *
 * @retval int
 *
 */

alt_u8 toInt(alt_u8 ascii) {
8110e864:	defffe04 	addi	sp,sp,-8
8110e868:	de00012e 	bgeu	sp,et,8110e870 <toInt+0xc>
8110e86c:	003b68fa 	trap	3
8110e870:	df000115 	stw	fp,4(sp)
8110e874:	df000104 	addi	fp,sp,4
8110e878:	2005883a 	mov	r2,r4
8110e87c:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
8110e880:	e0bfff03 	ldbu	r2,-4(fp)
8110e884:	10bff404 	addi	r2,r2,-48
}
8110e888:	e037883a 	mov	sp,fp
8110e88c:	df000017 	ldw	fp,0(sp)
8110e890:	dec00104 	addi	sp,sp,4
8110e894:	f800283a 	ret

8110e898 <__divsf3>:
8110e898:	defff504 	addi	sp,sp,-44
8110e89c:	200cd5fa 	srli	r6,r4,23
8110e8a0:	de00012e 	bgeu	sp,et,8110e8a8 <__divsf3+0x10>
8110e8a4:	003b68fa 	trap	3
8110e8a8:	dcc00415 	stw	r19,16(sp)
8110e8ac:	2026d7fa 	srli	r19,r4,31
8110e8b0:	00c02034 	movhi	r3,128
8110e8b4:	dd800715 	stw	r22,28(sp)
8110e8b8:	dd000515 	stw	r20,20(sp)
8110e8bc:	dc800315 	stw	r18,12(sp)
8110e8c0:	18ffffc4 	addi	r3,r3,-1
8110e8c4:	dfc00a15 	stw	ra,40(sp)
8110e8c8:	df000915 	stw	fp,36(sp)
8110e8cc:	ddc00815 	stw	r23,32(sp)
8110e8d0:	dd400615 	stw	r21,24(sp)
8110e8d4:	dc400215 	stw	r17,8(sp)
8110e8d8:	dc000115 	stw	r16,4(sp)
8110e8dc:	35003fcc 	andi	r20,r6,255
8110e8e0:	1924703a 	and	r18,r3,r4
8110e8e4:	9d803fcc 	andi	r22,r19,255
8110e8e8:	a0005226 	beq	r20,zero,8110ea34 <__divsf3+0x19c>
8110e8ec:	00803fc4 	movi	r2,255
8110e8f0:	a0802e26 	beq	r20,r2,8110e9ac <__divsf3+0x114>
8110e8f4:	91002034 	orhi	r4,r18,128
8110e8f8:	202490fa 	slli	r18,r4,3
8110e8fc:	a53fe044 	addi	r20,r20,-127
8110e900:	0021883a 	mov	r16,zero
8110e904:	002f883a 	mov	r23,zero
8110e908:	280cd5fa 	srli	r6,r5,23
8110e90c:	282ad7fa 	srli	r21,r5,31
8110e910:	00c02034 	movhi	r3,128
8110e914:	18ffffc4 	addi	r3,r3,-1
8110e918:	31803fcc 	andi	r6,r6,255
8110e91c:	1962703a 	and	r17,r3,r5
8110e920:	af003fcc 	andi	fp,r21,255
8110e924:	30004a26 	beq	r6,zero,8110ea50 <__divsf3+0x1b8>
8110e928:	00803fc4 	movi	r2,255
8110e92c:	30804526 	beq	r6,r2,8110ea44 <__divsf3+0x1ac>
8110e930:	89402034 	orhi	r5,r17,128
8110e934:	282290fa 	slli	r17,r5,3
8110e938:	31bfe044 	addi	r6,r6,-127
8110e93c:	000b883a 	mov	r5,zero
8110e940:	2c20b03a 	or	r16,r5,r16
8110e944:	802090ba 	slli	r16,r16,2
8110e948:	00a04474 	movhi	r2,33041
8110e94c:	10ba5b04 	addi	r2,r2,-5780
8110e950:	80a1883a 	add	r16,r16,r2
8110e954:	81000017 	ldw	r4,0(r16)
8110e958:	9d46f03a 	xor	r3,r19,r21
8110e95c:	180f883a 	mov	r7,r3
8110e960:	18803fcc 	andi	r2,r3,255
8110e964:	a18dc83a 	sub	r6,r20,r6
8110e968:	2000683a 	jmp	r4
8110e96c:	8110eb50 	cmplti	r4,r16,17325
8110e970:	8110e9d4 	ori	r4,r16,17319
8110e974:	8110eb44 	addi	r4,r16,17325
8110e978:	8110e9c0 	call	88110e9c <__reset+0x20f0e9c>
8110e97c:	8110eb44 	addi	r4,r16,17325
8110e980:	8110eb1c 	xori	r4,r16,17324
8110e984:	8110eb44 	addi	r4,r16,17325
8110e988:	8110e9c0 	call	88110e9c <__reset+0x20f0e9c>
8110e98c:	8110e9d4 	ori	r4,r16,17319
8110e990:	8110e9d4 	ori	r4,r16,17319
8110e994:	8110eb1c 	xori	r4,r16,17324
8110e998:	8110e9c0 	call	88110e9c <__reset+0x20f0e9c>
8110e99c:	8110ec30 	cmpltui	r4,r16,17328
8110e9a0:	8110ec30 	cmpltui	r4,r16,17328
8110e9a4:	8110ec30 	cmpltui	r4,r16,17328
8110e9a8:	8110ebe4 	muli	r4,r16,17327
8110e9ac:	9000581e 	bne	r18,zero,8110eb10 <__divsf3+0x278>
8110e9b0:	04000204 	movi	r16,8
8110e9b4:	05c00084 	movi	r23,2
8110e9b8:	003fd306 	br	8110e908 <__reset+0xfb0ee908>
8110e9bc:	0023883a 	mov	r17,zero
8110e9c0:	e02d883a 	mov	r22,fp
8110e9c4:	282f883a 	mov	r23,r5
8110e9c8:	00800084 	movi	r2,2
8110e9cc:	b8808f1e 	bne	r23,r2,8110ec0c <__divsf3+0x374>
8110e9d0:	b005883a 	mov	r2,r22
8110e9d4:	11c0004c 	andi	r7,r2,1
8110e9d8:	013fffc4 	movi	r4,-1
8110e9dc:	000d883a 	mov	r6,zero
8110e9e0:	21003fcc 	andi	r4,r4,255
8110e9e4:	200895fa 	slli	r4,r4,23
8110e9e8:	38803fcc 	andi	r2,r7,255
8110e9ec:	00c02034 	movhi	r3,128
8110e9f0:	100497fa 	slli	r2,r2,31
8110e9f4:	18ffffc4 	addi	r3,r3,-1
8110e9f8:	30c6703a 	and	r3,r6,r3
8110e9fc:	1906b03a 	or	r3,r3,r4
8110ea00:	1884b03a 	or	r2,r3,r2
8110ea04:	dfc00a17 	ldw	ra,40(sp)
8110ea08:	df000917 	ldw	fp,36(sp)
8110ea0c:	ddc00817 	ldw	r23,32(sp)
8110ea10:	dd800717 	ldw	r22,28(sp)
8110ea14:	dd400617 	ldw	r21,24(sp)
8110ea18:	dd000517 	ldw	r20,20(sp)
8110ea1c:	dcc00417 	ldw	r19,16(sp)
8110ea20:	dc800317 	ldw	r18,12(sp)
8110ea24:	dc400217 	ldw	r17,8(sp)
8110ea28:	dc000117 	ldw	r16,4(sp)
8110ea2c:	dec00b04 	addi	sp,sp,44
8110ea30:	f800283a 	ret
8110ea34:	90002b1e 	bne	r18,zero,8110eae4 <__divsf3+0x24c>
8110ea38:	04000104 	movi	r16,4
8110ea3c:	05c00044 	movi	r23,1
8110ea40:	003fb106 	br	8110e908 <__reset+0xfb0ee908>
8110ea44:	8800251e 	bne	r17,zero,8110eadc <__divsf3+0x244>
8110ea48:	01400084 	movi	r5,2
8110ea4c:	00000206 	br	8110ea58 <__divsf3+0x1c0>
8110ea50:	88001a1e 	bne	r17,zero,8110eabc <__divsf3+0x224>
8110ea54:	01400044 	movi	r5,1
8110ea58:	8160b03a 	or	r16,r16,r5
8110ea5c:	802090ba 	slli	r16,r16,2
8110ea60:	00e04474 	movhi	r3,33041
8110ea64:	18fa9f04 	addi	r3,r3,-5508
8110ea68:	80e1883a 	add	r16,r16,r3
8110ea6c:	80c00017 	ldw	r3,0(r16)
8110ea70:	9d44f03a 	xor	r2,r19,r21
8110ea74:	a18dc83a 	sub	r6,r20,r6
8110ea78:	1800683a 	jmp	r3
8110ea7c:	8110e9d4 	ori	r4,r16,17319
8110ea80:	8110e9d4 	ori	r4,r16,17319
8110ea84:	8110ec20 	cmpeqi	r4,r16,17328
8110ea88:	8110e9bc 	xorhi	r4,r16,17318
8110ea8c:	8110ec20 	cmpeqi	r4,r16,17328
8110ea90:	8110eb1c 	xori	r4,r16,17324
8110ea94:	8110ec20 	cmpeqi	r4,r16,17328
8110ea98:	8110e9bc 	xorhi	r4,r16,17318
8110ea9c:	8110e9d4 	ori	r4,r16,17319
8110eaa0:	8110e9d4 	ori	r4,r16,17319
8110eaa4:	8110eb1c 	xori	r4,r16,17324
8110eaa8:	8110e9bc 	xorhi	r4,r16,17318
8110eaac:	8110ec30 	cmpltui	r4,r16,17328
8110eab0:	8110ec30 	cmpltui	r4,r16,17328
8110eab4:	8110ec30 	cmpltui	r4,r16,17328
8110eab8:	8110ec48 	cmpgei	r4,r16,17329
8110eabc:	8809883a 	mov	r4,r17
8110eac0:	110fce80 	call	8110fce8 <__clzsi2>
8110eac4:	10fffec4 	addi	r3,r2,-5
8110eac8:	10801d84 	addi	r2,r2,118
8110eacc:	88e2983a 	sll	r17,r17,r3
8110ead0:	008dc83a 	sub	r6,zero,r2
8110ead4:	000b883a 	mov	r5,zero
8110ead8:	003f9906 	br	8110e940 <__reset+0xfb0ee940>
8110eadc:	014000c4 	movi	r5,3
8110eae0:	003f9706 	br	8110e940 <__reset+0xfb0ee940>
8110eae4:	9009883a 	mov	r4,r18
8110eae8:	d9400015 	stw	r5,0(sp)
8110eaec:	110fce80 	call	8110fce8 <__clzsi2>
8110eaf0:	10fffec4 	addi	r3,r2,-5
8110eaf4:	11801d84 	addi	r6,r2,118
8110eaf8:	90e4983a 	sll	r18,r18,r3
8110eafc:	01a9c83a 	sub	r20,zero,r6
8110eb00:	0021883a 	mov	r16,zero
8110eb04:	002f883a 	mov	r23,zero
8110eb08:	d9400017 	ldw	r5,0(sp)
8110eb0c:	003f7e06 	br	8110e908 <__reset+0xfb0ee908>
8110eb10:	04000304 	movi	r16,12
8110eb14:	05c000c4 	movi	r23,3
8110eb18:	003f7b06 	br	8110e908 <__reset+0xfb0ee908>
8110eb1c:	01802034 	movhi	r6,128
8110eb20:	000f883a 	mov	r7,zero
8110eb24:	31bfffc4 	addi	r6,r6,-1
8110eb28:	013fffc4 	movi	r4,-1
8110eb2c:	003fac06 	br	8110e9e0 <__reset+0xfb0ee9e0>
8110eb30:	01400044 	movi	r5,1
8110eb34:	2909c83a 	sub	r4,r5,r4
8110eb38:	00c006c4 	movi	r3,27
8110eb3c:	19004b0e 	bge	r3,r4,8110ec6c <__divsf3+0x3d4>
8110eb40:	114e703a 	and	r7,r2,r5
8110eb44:	0009883a 	mov	r4,zero
8110eb48:	000d883a 	mov	r6,zero
8110eb4c:	003fa406 	br	8110e9e0 <__reset+0xfb0ee9e0>
8110eb50:	9006917a 	slli	r3,r18,5
8110eb54:	8822917a 	slli	r17,r17,5
8110eb58:	1c40372e 	bgeu	r3,r17,8110ec38 <__divsf3+0x3a0>
8110eb5c:	31bfffc4 	addi	r6,r6,-1
8110eb60:	010006c4 	movi	r4,27
8110eb64:	000b883a 	mov	r5,zero
8110eb68:	180f883a 	mov	r7,r3
8110eb6c:	294b883a 	add	r5,r5,r5
8110eb70:	18c7883a 	add	r3,r3,r3
8110eb74:	38000116 	blt	r7,zero,8110eb7c <__divsf3+0x2e4>
8110eb78:	1c400236 	bltu	r3,r17,8110eb84 <__divsf3+0x2ec>
8110eb7c:	1c47c83a 	sub	r3,r3,r17
8110eb80:	29400054 	ori	r5,r5,1
8110eb84:	213fffc4 	addi	r4,r4,-1
8110eb88:	203ff71e 	bne	r4,zero,8110eb68 <__reset+0xfb0eeb68>
8110eb8c:	1806c03a 	cmpne	r3,r3,zero
8110eb90:	1962b03a 	or	r17,r3,r5
8110eb94:	31001fc4 	addi	r4,r6,127
8110eb98:	013fe50e 	bge	zero,r4,8110eb30 <__reset+0xfb0eeb30>
8110eb9c:	88c001cc 	andi	r3,r17,7
8110eba0:	18000426 	beq	r3,zero,8110ebb4 <__divsf3+0x31c>
8110eba4:	88c003cc 	andi	r3,r17,15
8110eba8:	01400104 	movi	r5,4
8110ebac:	19400126 	beq	r3,r5,8110ebb4 <__divsf3+0x31c>
8110ebb0:	8963883a 	add	r17,r17,r5
8110ebb4:	88c2002c 	andhi	r3,r17,2048
8110ebb8:	18000426 	beq	r3,zero,8110ebcc <__divsf3+0x334>
8110ebbc:	00fe0034 	movhi	r3,63488
8110ebc0:	18ffffc4 	addi	r3,r3,-1
8110ebc4:	31002004 	addi	r4,r6,128
8110ebc8:	88e2703a 	and	r17,r17,r3
8110ebcc:	00c03f84 	movi	r3,254
8110ebd0:	193f8016 	blt	r3,r4,8110e9d4 <__reset+0xfb0ee9d4>
8110ebd4:	880c91ba 	slli	r6,r17,6
8110ebd8:	11c0004c 	andi	r7,r2,1
8110ebdc:	300cd27a 	srli	r6,r6,9
8110ebe0:	003f7f06 	br	8110e9e0 <__reset+0xfb0ee9e0>
8110ebe4:	9080102c 	andhi	r2,r18,64
8110ebe8:	10000226 	beq	r2,zero,8110ebf4 <__divsf3+0x35c>
8110ebec:	8880102c 	andhi	r2,r17,64
8110ebf0:	10001826 	beq	r2,zero,8110ec54 <__divsf3+0x3bc>
8110ebf4:	00802034 	movhi	r2,128
8110ebf8:	91801034 	orhi	r6,r18,64
8110ebfc:	10bfffc4 	addi	r2,r2,-1
8110ec00:	980f883a 	mov	r7,r19
8110ec04:	308c703a 	and	r6,r6,r2
8110ec08:	003fc706 	br	8110eb28 <__reset+0xfb0eeb28>
8110ec0c:	008000c4 	movi	r2,3
8110ec10:	b8802d26 	beq	r23,r2,8110ecc8 <__divsf3+0x430>
8110ec14:	00c00044 	movi	r3,1
8110ec18:	b005883a 	mov	r2,r22
8110ec1c:	b8ffdd1e 	bne	r23,r3,8110eb94 <__reset+0xfb0eeb94>
8110ec20:	11c0004c 	andi	r7,r2,1
8110ec24:	0009883a 	mov	r4,zero
8110ec28:	000d883a 	mov	r6,zero
8110ec2c:	003f6c06 	br	8110e9e0 <__reset+0xfb0ee9e0>
8110ec30:	9023883a 	mov	r17,r18
8110ec34:	003f6406 	br	8110e9c8 <__reset+0xfb0ee9c8>
8110ec38:	1c47c83a 	sub	r3,r3,r17
8110ec3c:	01000684 	movi	r4,26
8110ec40:	01400044 	movi	r5,1
8110ec44:	003fc806 	br	8110eb68 <__reset+0xfb0eeb68>
8110ec48:	9080102c 	andhi	r2,r18,64
8110ec4c:	103fe926 	beq	r2,zero,8110ebf4 <__reset+0xfb0eebf4>
8110ec50:	0023883a 	mov	r17,zero
8110ec54:	00802034 	movhi	r2,128
8110ec58:	89801034 	orhi	r6,r17,64
8110ec5c:	10bfffc4 	addi	r2,r2,-1
8110ec60:	a80f883a 	mov	r7,r21
8110ec64:	308c703a 	and	r6,r6,r2
8110ec68:	003faf06 	br	8110eb28 <__reset+0xfb0eeb28>
8110ec6c:	01c00804 	movi	r7,32
8110ec70:	390fc83a 	sub	r7,r7,r4
8110ec74:	89ce983a 	sll	r7,r17,r7
8110ec78:	890ad83a 	srl	r5,r17,r4
8110ec7c:	380ec03a 	cmpne	r7,r7,zero
8110ec80:	29cab03a 	or	r5,r5,r7
8110ec84:	28c001cc 	andi	r3,r5,7
8110ec88:	18000426 	beq	r3,zero,8110ec9c <__divsf3+0x404>
8110ec8c:	28c003cc 	andi	r3,r5,15
8110ec90:	01000104 	movi	r4,4
8110ec94:	19000126 	beq	r3,r4,8110ec9c <__divsf3+0x404>
8110ec98:	290b883a 	add	r5,r5,r4
8110ec9c:	28c1002c 	andhi	r3,r5,1024
8110eca0:	18000426 	beq	r3,zero,8110ecb4 <__divsf3+0x41c>
8110eca4:	11c0004c 	andi	r7,r2,1
8110eca8:	01000044 	movi	r4,1
8110ecac:	000d883a 	mov	r6,zero
8110ecb0:	003f4b06 	br	8110e9e0 <__reset+0xfb0ee9e0>
8110ecb4:	280a91ba 	slli	r5,r5,6
8110ecb8:	11c0004c 	andi	r7,r2,1
8110ecbc:	0009883a 	mov	r4,zero
8110ecc0:	280cd27a 	srli	r6,r5,9
8110ecc4:	003f4606 	br	8110e9e0 <__reset+0xfb0ee9e0>
8110ecc8:	00802034 	movhi	r2,128
8110eccc:	89801034 	orhi	r6,r17,64
8110ecd0:	10bfffc4 	addi	r2,r2,-1
8110ecd4:	b00f883a 	mov	r7,r22
8110ecd8:	308c703a 	and	r6,r6,r2
8110ecdc:	003f9206 	br	8110eb28 <__reset+0xfb0eeb28>

8110ece0 <__mulsf3>:
8110ece0:	defff504 	addi	sp,sp,-44
8110ece4:	de00012e 	bgeu	sp,et,8110ecec <__mulsf3+0xc>
8110ece8:	003b68fa 	trap	3
8110ecec:	dc000115 	stw	r16,4(sp)
8110ecf0:	2020d5fa 	srli	r16,r4,23
8110ecf4:	dd400615 	stw	r21,24(sp)
8110ecf8:	202ad7fa 	srli	r21,r4,31
8110ecfc:	dc800315 	stw	r18,12(sp)
8110ed00:	04802034 	movhi	r18,128
8110ed04:	df000915 	stw	fp,36(sp)
8110ed08:	dd000515 	stw	r20,20(sp)
8110ed0c:	94bfffc4 	addi	r18,r18,-1
8110ed10:	dfc00a15 	stw	ra,40(sp)
8110ed14:	ddc00815 	stw	r23,32(sp)
8110ed18:	dd800715 	stw	r22,28(sp)
8110ed1c:	dcc00415 	stw	r19,16(sp)
8110ed20:	dc400215 	stw	r17,8(sp)
8110ed24:	84003fcc 	andi	r16,r16,255
8110ed28:	9124703a 	and	r18,r18,r4
8110ed2c:	a829883a 	mov	r20,r21
8110ed30:	af003fcc 	andi	fp,r21,255
8110ed34:	80005426 	beq	r16,zero,8110ee88 <__mulsf3+0x1a8>
8110ed38:	00803fc4 	movi	r2,255
8110ed3c:	80802f26 	beq	r16,r2,8110edfc <__mulsf3+0x11c>
8110ed40:	91002034 	orhi	r4,r18,128
8110ed44:	202490fa 	slli	r18,r4,3
8110ed48:	843fe044 	addi	r16,r16,-127
8110ed4c:	0023883a 	mov	r17,zero
8110ed50:	002f883a 	mov	r23,zero
8110ed54:	2804d5fa 	srli	r2,r5,23
8110ed58:	282cd7fa 	srli	r22,r5,31
8110ed5c:	01002034 	movhi	r4,128
8110ed60:	213fffc4 	addi	r4,r4,-1
8110ed64:	10803fcc 	andi	r2,r2,255
8110ed68:	2166703a 	and	r19,r4,r5
8110ed6c:	b1803fcc 	andi	r6,r22,255
8110ed70:	10004c26 	beq	r2,zero,8110eea4 <__mulsf3+0x1c4>
8110ed74:	00c03fc4 	movi	r3,255
8110ed78:	10c04726 	beq	r2,r3,8110ee98 <__mulsf3+0x1b8>
8110ed7c:	99002034 	orhi	r4,r19,128
8110ed80:	202690fa 	slli	r19,r4,3
8110ed84:	10bfe044 	addi	r2,r2,-127
8110ed88:	0007883a 	mov	r3,zero
8110ed8c:	80a1883a 	add	r16,r16,r2
8110ed90:	010003c4 	movi	r4,15
8110ed94:	1c44b03a 	or	r2,r3,r17
8110ed98:	b56af03a 	xor	r21,r22,r21
8110ed9c:	81c00044 	addi	r7,r16,1
8110eda0:	20806b36 	bltu	r4,r2,8110ef50 <__mulsf3+0x270>
8110eda4:	100490ba 	slli	r2,r2,2
8110eda8:	01204474 	movhi	r4,33041
8110edac:	213b6f04 	addi	r4,r4,-4676
8110edb0:	1105883a 	add	r2,r2,r4
8110edb4:	10800017 	ldw	r2,0(r2)
8110edb8:	1000683a 	jmp	r2
8110edbc:	8110ef50 	cmplti	r4,r16,17341
8110edc0:	8110ee10 	cmplti	r4,r16,17336
8110edc4:	8110ee10 	cmplti	r4,r16,17336
8110edc8:	8110ee0c 	andi	r4,r16,17336
8110edcc:	8110ef34 	orhi	r4,r16,17340
8110edd0:	8110ef34 	orhi	r4,r16,17340
8110edd4:	8110ef20 	cmpeqi	r4,r16,17340
8110edd8:	8110ee0c 	andi	r4,r16,17336
8110eddc:	8110ef34 	orhi	r4,r16,17340
8110ede0:	8110ef20 	cmpeqi	r4,r16,17340
8110ede4:	8110ef34 	orhi	r4,r16,17340
8110ede8:	8110ee0c 	andi	r4,r16,17336
8110edec:	8110ef40 	call	88110ef4 <__reset+0x20f0ef4>
8110edf0:	8110ef40 	call	88110ef4 <__reset+0x20f0ef4>
8110edf4:	8110ef40 	call	88110ef4 <__reset+0x20f0ef4>
8110edf8:	8110f01c 	xori	r4,r16,17344
8110edfc:	90003b1e 	bne	r18,zero,8110eeec <__mulsf3+0x20c>
8110ee00:	04400204 	movi	r17,8
8110ee04:	05c00084 	movi	r23,2
8110ee08:	003fd206 	br	8110ed54 <__reset+0xfb0eed54>
8110ee0c:	302b883a 	mov	r21,r6
8110ee10:	00800084 	movi	r2,2
8110ee14:	18802626 	beq	r3,r2,8110eeb0 <__mulsf3+0x1d0>
8110ee18:	008000c4 	movi	r2,3
8110ee1c:	1880ab26 	beq	r3,r2,8110f0cc <__mulsf3+0x3ec>
8110ee20:	00800044 	movi	r2,1
8110ee24:	1880a21e 	bne	r3,r2,8110f0b0 <__mulsf3+0x3d0>
8110ee28:	a829883a 	mov	r20,r21
8110ee2c:	0007883a 	mov	r3,zero
8110ee30:	0009883a 	mov	r4,zero
8110ee34:	18803fcc 	andi	r2,r3,255
8110ee38:	100695fa 	slli	r3,r2,23
8110ee3c:	a0803fcc 	andi	r2,r20,255
8110ee40:	100a97fa 	slli	r5,r2,31
8110ee44:	00802034 	movhi	r2,128
8110ee48:	10bfffc4 	addi	r2,r2,-1
8110ee4c:	2084703a 	and	r2,r4,r2
8110ee50:	10c4b03a 	or	r2,r2,r3
8110ee54:	1144b03a 	or	r2,r2,r5
8110ee58:	dfc00a17 	ldw	ra,40(sp)
8110ee5c:	df000917 	ldw	fp,36(sp)
8110ee60:	ddc00817 	ldw	r23,32(sp)
8110ee64:	dd800717 	ldw	r22,28(sp)
8110ee68:	dd400617 	ldw	r21,24(sp)
8110ee6c:	dd000517 	ldw	r20,20(sp)
8110ee70:	dcc00417 	ldw	r19,16(sp)
8110ee74:	dc800317 	ldw	r18,12(sp)
8110ee78:	dc400217 	ldw	r17,8(sp)
8110ee7c:	dc000117 	ldw	r16,4(sp)
8110ee80:	dec00b04 	addi	sp,sp,44
8110ee84:	f800283a 	ret
8110ee88:	90000d1e 	bne	r18,zero,8110eec0 <__mulsf3+0x1e0>
8110ee8c:	04400104 	movi	r17,4
8110ee90:	05c00044 	movi	r23,1
8110ee94:	003faf06 	br	8110ed54 <__reset+0xfb0eed54>
8110ee98:	9806c03a 	cmpne	r3,r19,zero
8110ee9c:	18c00084 	addi	r3,r3,2
8110eea0:	003fba06 	br	8110ed8c <__reset+0xfb0eed8c>
8110eea4:	9800141e 	bne	r19,zero,8110eef8 <__mulsf3+0x218>
8110eea8:	00c00044 	movi	r3,1
8110eeac:	003fb706 	br	8110ed8c <__reset+0xfb0eed8c>
8110eeb0:	a829883a 	mov	r20,r21
8110eeb4:	00ffffc4 	movi	r3,-1
8110eeb8:	0009883a 	mov	r4,zero
8110eebc:	003fdd06 	br	8110ee34 <__reset+0xfb0eee34>
8110eec0:	9009883a 	mov	r4,r18
8110eec4:	d9400015 	stw	r5,0(sp)
8110eec8:	110fce80 	call	8110fce8 <__clzsi2>
8110eecc:	10fffec4 	addi	r3,r2,-5
8110eed0:	10801d84 	addi	r2,r2,118
8110eed4:	90e4983a 	sll	r18,r18,r3
8110eed8:	00a1c83a 	sub	r16,zero,r2
8110eedc:	0023883a 	mov	r17,zero
8110eee0:	002f883a 	mov	r23,zero
8110eee4:	d9400017 	ldw	r5,0(sp)
8110eee8:	003f9a06 	br	8110ed54 <__reset+0xfb0eed54>
8110eeec:	04400304 	movi	r17,12
8110eef0:	05c000c4 	movi	r23,3
8110eef4:	003f9706 	br	8110ed54 <__reset+0xfb0eed54>
8110eef8:	9809883a 	mov	r4,r19
8110eefc:	d9800015 	stw	r6,0(sp)
8110ef00:	110fce80 	call	8110fce8 <__clzsi2>
8110ef04:	10fffec4 	addi	r3,r2,-5
8110ef08:	10801d84 	addi	r2,r2,118
8110ef0c:	98e6983a 	sll	r19,r19,r3
8110ef10:	0085c83a 	sub	r2,zero,r2
8110ef14:	0007883a 	mov	r3,zero
8110ef18:	d9800017 	ldw	r6,0(sp)
8110ef1c:	003f9b06 	br	8110ed8c <__reset+0xfb0eed8c>
8110ef20:	01002034 	movhi	r4,128
8110ef24:	0029883a 	mov	r20,zero
8110ef28:	213fffc4 	addi	r4,r4,-1
8110ef2c:	00ffffc4 	movi	r3,-1
8110ef30:	003fc006 	br	8110ee34 <__reset+0xfb0eee34>
8110ef34:	9027883a 	mov	r19,r18
8110ef38:	b807883a 	mov	r3,r23
8110ef3c:	003fb406 	br	8110ee10 <__reset+0xfb0eee10>
8110ef40:	9027883a 	mov	r19,r18
8110ef44:	e02b883a 	mov	r21,fp
8110ef48:	b807883a 	mov	r3,r23
8110ef4c:	003fb006 	br	8110ee10 <__reset+0xfb0eee10>
8110ef50:	9004d43a 	srli	r2,r18,16
8110ef54:	9810d43a 	srli	r8,r19,16
8110ef58:	94bfffcc 	andi	r18,r18,65535
8110ef5c:	993fffcc 	andi	r4,r19,65535
8110ef60:	910d383a 	mul	r6,r18,r4
8110ef64:	20a7383a 	mul	r19,r4,r2
8110ef68:	9225383a 	mul	r18,r18,r8
8110ef6c:	3006d43a 	srli	r3,r6,16
8110ef70:	1211383a 	mul	r8,r2,r8
8110ef74:	94e5883a 	add	r18,r18,r19
8110ef78:	1c87883a 	add	r3,r3,r18
8110ef7c:	1cc0022e 	bgeu	r3,r19,8110ef88 <__mulsf3+0x2a8>
8110ef80:	00800074 	movhi	r2,1
8110ef84:	4091883a 	add	r8,r8,r2
8110ef88:	1804943a 	slli	r2,r3,16
8110ef8c:	31bfffcc 	andi	r6,r6,65535
8110ef90:	1806d43a 	srli	r3,r3,16
8110ef94:	1185883a 	add	r2,r2,r6
8110ef98:	102691ba 	slli	r19,r2,6
8110ef9c:	1a07883a 	add	r3,r3,r8
8110efa0:	1004d6ba 	srli	r2,r2,26
8110efa4:	180891ba 	slli	r4,r3,6
8110efa8:	9826c03a 	cmpne	r19,r19,zero
8110efac:	9884b03a 	or	r2,r19,r2
8110efb0:	1126b03a 	or	r19,r2,r4
8110efb4:	9882002c 	andhi	r2,r19,2048
8110efb8:	10000426 	beq	r2,zero,8110efcc <__mulsf3+0x2ec>
8110efbc:	9804d07a 	srli	r2,r19,1
8110efc0:	9900004c 	andi	r4,r19,1
8110efc4:	3821883a 	mov	r16,r7
8110efc8:	1126b03a 	or	r19,r2,r4
8110efcc:	80c01fc4 	addi	r3,r16,127
8110efd0:	00c0210e 	bge	zero,r3,8110f058 <__mulsf3+0x378>
8110efd4:	988001cc 	andi	r2,r19,7
8110efd8:	10000426 	beq	r2,zero,8110efec <__mulsf3+0x30c>
8110efdc:	988003cc 	andi	r2,r19,15
8110efe0:	01000104 	movi	r4,4
8110efe4:	11000126 	beq	r2,r4,8110efec <__mulsf3+0x30c>
8110efe8:	9927883a 	add	r19,r19,r4
8110efec:	9882002c 	andhi	r2,r19,2048
8110eff0:	10000426 	beq	r2,zero,8110f004 <__mulsf3+0x324>
8110eff4:	00be0034 	movhi	r2,63488
8110eff8:	10bfffc4 	addi	r2,r2,-1
8110effc:	80c02004 	addi	r3,r16,128
8110f000:	98a6703a 	and	r19,r19,r2
8110f004:	00803f84 	movi	r2,254
8110f008:	10ffa916 	blt	r2,r3,8110eeb0 <__reset+0xfb0eeeb0>
8110f00c:	980891ba 	slli	r4,r19,6
8110f010:	a829883a 	mov	r20,r21
8110f014:	2008d27a 	srli	r4,r4,9
8110f018:	003f8606 	br	8110ee34 <__reset+0xfb0eee34>
8110f01c:	9080102c 	andhi	r2,r18,64
8110f020:	10000826 	beq	r2,zero,8110f044 <__mulsf3+0x364>
8110f024:	9880102c 	andhi	r2,r19,64
8110f028:	1000061e 	bne	r2,zero,8110f044 <__mulsf3+0x364>
8110f02c:	00802034 	movhi	r2,128
8110f030:	99001034 	orhi	r4,r19,64
8110f034:	10bfffc4 	addi	r2,r2,-1
8110f038:	b029883a 	mov	r20,r22
8110f03c:	2088703a 	and	r4,r4,r2
8110f040:	003fba06 	br	8110ef2c <__reset+0xfb0eef2c>
8110f044:	00802034 	movhi	r2,128
8110f048:	91001034 	orhi	r4,r18,64
8110f04c:	10bfffc4 	addi	r2,r2,-1
8110f050:	2088703a 	and	r4,r4,r2
8110f054:	003fb506 	br	8110ef2c <__reset+0xfb0eef2c>
8110f058:	00800044 	movi	r2,1
8110f05c:	10c7c83a 	sub	r3,r2,r3
8110f060:	008006c4 	movi	r2,27
8110f064:	10ff7016 	blt	r2,r3,8110ee28 <__reset+0xfb0eee28>
8110f068:	00800804 	movi	r2,32
8110f06c:	10c5c83a 	sub	r2,r2,r3
8110f070:	9884983a 	sll	r2,r19,r2
8110f074:	98c6d83a 	srl	r3,r19,r3
8110f078:	1004c03a 	cmpne	r2,r2,zero
8110f07c:	1884b03a 	or	r2,r3,r2
8110f080:	10c001cc 	andi	r3,r2,7
8110f084:	18000426 	beq	r3,zero,8110f098 <__mulsf3+0x3b8>
8110f088:	10c003cc 	andi	r3,r2,15
8110f08c:	01000104 	movi	r4,4
8110f090:	19000126 	beq	r3,r4,8110f098 <__mulsf3+0x3b8>
8110f094:	1105883a 	add	r2,r2,r4
8110f098:	10c1002c 	andhi	r3,r2,1024
8110f09c:	18000626 	beq	r3,zero,8110f0b8 <__mulsf3+0x3d8>
8110f0a0:	a829883a 	mov	r20,r21
8110f0a4:	00c00044 	movi	r3,1
8110f0a8:	0009883a 	mov	r4,zero
8110f0ac:	003f6106 	br	8110ee34 <__reset+0xfb0eee34>
8110f0b0:	3821883a 	mov	r16,r7
8110f0b4:	003fc506 	br	8110efcc <__reset+0xfb0eefcc>
8110f0b8:	100491ba 	slli	r2,r2,6
8110f0bc:	a829883a 	mov	r20,r21
8110f0c0:	0007883a 	mov	r3,zero
8110f0c4:	1008d27a 	srli	r4,r2,9
8110f0c8:	003f5a06 	br	8110ee34 <__reset+0xfb0eee34>
8110f0cc:	00802034 	movhi	r2,128
8110f0d0:	99001034 	orhi	r4,r19,64
8110f0d4:	10bfffc4 	addi	r2,r2,-1
8110f0d8:	a829883a 	mov	r20,r21
8110f0dc:	2088703a 	and	r4,r4,r2
8110f0e0:	003f9206 	br	8110ef2c <__reset+0xfb0eef2c>

8110f0e4 <__floatsisf>:
8110f0e4:	defffd04 	addi	sp,sp,-12
8110f0e8:	de00012e 	bgeu	sp,et,8110f0f0 <__floatsisf+0xc>
8110f0ec:	003b68fa 	trap	3
8110f0f0:	dfc00215 	stw	ra,8(sp)
8110f0f4:	dc400115 	stw	r17,4(sp)
8110f0f8:	dc000015 	stw	r16,0(sp)
8110f0fc:	20003526 	beq	r4,zero,8110f1d4 <__floatsisf+0xf0>
8110f100:	2021883a 	mov	r16,r4
8110f104:	2022d7fa 	srli	r17,r4,31
8110f108:	20003616 	blt	r4,zero,8110f1e4 <__floatsisf+0x100>
8110f10c:	8009883a 	mov	r4,r16
8110f110:	110fce80 	call	8110fce8 <__clzsi2>
8110f114:	00c02784 	movi	r3,158
8110f118:	1887c83a 	sub	r3,r3,r2
8110f11c:	01002584 	movi	r4,150
8110f120:	20c01416 	blt	r4,r3,8110f174 <__floatsisf+0x90>
8110f124:	20c9c83a 	sub	r4,r4,r3
8110f128:	8120983a 	sll	r16,r16,r4
8110f12c:	00802034 	movhi	r2,128
8110f130:	10bfffc4 	addi	r2,r2,-1
8110f134:	8809883a 	mov	r4,r17
8110f138:	80a0703a 	and	r16,r16,r2
8110f13c:	18803fcc 	andi	r2,r3,255
8110f140:	100695fa 	slli	r3,r2,23
8110f144:	20803fcc 	andi	r2,r4,255
8110f148:	100897fa 	slli	r4,r2,31
8110f14c:	00802034 	movhi	r2,128
8110f150:	10bfffc4 	addi	r2,r2,-1
8110f154:	8084703a 	and	r2,r16,r2
8110f158:	10c4b03a 	or	r2,r2,r3
8110f15c:	1104b03a 	or	r2,r2,r4
8110f160:	dfc00217 	ldw	ra,8(sp)
8110f164:	dc400117 	ldw	r17,4(sp)
8110f168:	dc000017 	ldw	r16,0(sp)
8110f16c:	dec00304 	addi	sp,sp,12
8110f170:	f800283a 	ret
8110f174:	01002644 	movi	r4,153
8110f178:	20c01c16 	blt	r4,r3,8110f1ec <__floatsisf+0x108>
8110f17c:	20c9c83a 	sub	r4,r4,r3
8110f180:	8120983a 	sll	r16,r16,r4
8110f184:	013f0034 	movhi	r4,64512
8110f188:	213fffc4 	addi	r4,r4,-1
8110f18c:	814001cc 	andi	r5,r16,7
8110f190:	8108703a 	and	r4,r16,r4
8110f194:	28000426 	beq	r5,zero,8110f1a8 <__floatsisf+0xc4>
8110f198:	840003cc 	andi	r16,r16,15
8110f19c:	01400104 	movi	r5,4
8110f1a0:	81400126 	beq	r16,r5,8110f1a8 <__floatsisf+0xc4>
8110f1a4:	2149883a 	add	r4,r4,r5
8110f1a8:	2141002c 	andhi	r5,r4,1024
8110f1ac:	28000526 	beq	r5,zero,8110f1c4 <__floatsisf+0xe0>
8110f1b0:	00c027c4 	movi	r3,159
8110f1b4:	1887c83a 	sub	r3,r3,r2
8110f1b8:	00bf0034 	movhi	r2,64512
8110f1bc:	10bfffc4 	addi	r2,r2,-1
8110f1c0:	2088703a 	and	r4,r4,r2
8110f1c4:	202091ba 	slli	r16,r4,6
8110f1c8:	8809883a 	mov	r4,r17
8110f1cc:	8020d27a 	srli	r16,r16,9
8110f1d0:	003fda06 	br	8110f13c <__reset+0xfb0ef13c>
8110f1d4:	0009883a 	mov	r4,zero
8110f1d8:	0007883a 	mov	r3,zero
8110f1dc:	0021883a 	mov	r16,zero
8110f1e0:	003fd606 	br	8110f13c <__reset+0xfb0ef13c>
8110f1e4:	0121c83a 	sub	r16,zero,r4
8110f1e8:	003fc806 	br	8110f10c <__reset+0xfb0ef10c>
8110f1ec:	01002e44 	movi	r4,185
8110f1f0:	20c9c83a 	sub	r4,r4,r3
8110f1f4:	01400144 	movi	r5,5
8110f1f8:	8108983a 	sll	r4,r16,r4
8110f1fc:	288bc83a 	sub	r5,r5,r2
8110f200:	8160d83a 	srl	r16,r16,r5
8110f204:	2008c03a 	cmpne	r4,r4,zero
8110f208:	8120b03a 	or	r16,r16,r4
8110f20c:	003fdd06 	br	8110f184 <__reset+0xfb0ef184>

8110f210 <__floatunsisf>:
8110f210:	defffe04 	addi	sp,sp,-8
8110f214:	de00012e 	bgeu	sp,et,8110f21c <__floatunsisf+0xc>
8110f218:	003b68fa 	trap	3
8110f21c:	dfc00115 	stw	ra,4(sp)
8110f220:	dc000015 	stw	r16,0(sp)
8110f224:	20002c26 	beq	r4,zero,8110f2d8 <__floatunsisf+0xc8>
8110f228:	2021883a 	mov	r16,r4
8110f22c:	110fce80 	call	8110fce8 <__clzsi2>
8110f230:	00c02784 	movi	r3,158
8110f234:	1887c83a 	sub	r3,r3,r2
8110f238:	01002584 	movi	r4,150
8110f23c:	20c00f16 	blt	r4,r3,8110f27c <__floatunsisf+0x6c>
8110f240:	20c9c83a 	sub	r4,r4,r3
8110f244:	8108983a 	sll	r4,r16,r4
8110f248:	00802034 	movhi	r2,128
8110f24c:	10bfffc4 	addi	r2,r2,-1
8110f250:	2088703a 	and	r4,r4,r2
8110f254:	18803fcc 	andi	r2,r3,255
8110f258:	100695fa 	slli	r3,r2,23
8110f25c:	00802034 	movhi	r2,128
8110f260:	10bfffc4 	addi	r2,r2,-1
8110f264:	2084703a 	and	r2,r4,r2
8110f268:	10c4b03a 	or	r2,r2,r3
8110f26c:	dfc00117 	ldw	ra,4(sp)
8110f270:	dc000017 	ldw	r16,0(sp)
8110f274:	dec00204 	addi	sp,sp,8
8110f278:	f800283a 	ret
8110f27c:	01002644 	movi	r4,153
8110f280:	20c01816 	blt	r4,r3,8110f2e4 <__floatunsisf+0xd4>
8110f284:	20c9c83a 	sub	r4,r4,r3
8110f288:	8108983a 	sll	r4,r16,r4
8110f28c:	017f0034 	movhi	r5,64512
8110f290:	297fffc4 	addi	r5,r5,-1
8110f294:	218001cc 	andi	r6,r4,7
8110f298:	214a703a 	and	r5,r4,r5
8110f29c:	30000426 	beq	r6,zero,8110f2b0 <__floatunsisf+0xa0>
8110f2a0:	210003cc 	andi	r4,r4,15
8110f2a4:	01800104 	movi	r6,4
8110f2a8:	21800126 	beq	r4,r6,8110f2b0 <__floatunsisf+0xa0>
8110f2ac:	298b883a 	add	r5,r5,r6
8110f2b0:	2901002c 	andhi	r4,r5,1024
8110f2b4:	20000526 	beq	r4,zero,8110f2cc <__floatunsisf+0xbc>
8110f2b8:	00c027c4 	movi	r3,159
8110f2bc:	1887c83a 	sub	r3,r3,r2
8110f2c0:	00bf0034 	movhi	r2,64512
8110f2c4:	10bfffc4 	addi	r2,r2,-1
8110f2c8:	288a703a 	and	r5,r5,r2
8110f2cc:	280891ba 	slli	r4,r5,6
8110f2d0:	2008d27a 	srli	r4,r4,9
8110f2d4:	003fdf06 	br	8110f254 <__reset+0xfb0ef254>
8110f2d8:	0007883a 	mov	r3,zero
8110f2dc:	0009883a 	mov	r4,zero
8110f2e0:	003fdc06 	br	8110f254 <__reset+0xfb0ef254>
8110f2e4:	01402e44 	movi	r5,185
8110f2e8:	28cbc83a 	sub	r5,r5,r3
8110f2ec:	01000144 	movi	r4,5
8110f2f0:	2089c83a 	sub	r4,r4,r2
8110f2f4:	814a983a 	sll	r5,r16,r5
8110f2f8:	8108d83a 	srl	r4,r16,r4
8110f2fc:	2820c03a 	cmpne	r16,r5,zero
8110f300:	2408b03a 	or	r4,r4,r16
8110f304:	003fe106 	br	8110f28c <__reset+0xfb0ef28c>

8110f308 <__muldf3>:
8110f308:	defff304 	addi	sp,sp,-52
8110f30c:	2804d53a 	srli	r2,r5,20
8110f310:	de00012e 	bgeu	sp,et,8110f318 <__muldf3+0x10>
8110f314:	003b68fa 	trap	3
8110f318:	dd800915 	stw	r22,36(sp)
8110f31c:	282cd7fa 	srli	r22,r5,31
8110f320:	dc000315 	stw	r16,12(sp)
8110f324:	04000434 	movhi	r16,16
8110f328:	dd400815 	stw	r21,32(sp)
8110f32c:	dc800515 	stw	r18,20(sp)
8110f330:	843fffc4 	addi	r16,r16,-1
8110f334:	dfc00c15 	stw	ra,48(sp)
8110f338:	df000b15 	stw	fp,44(sp)
8110f33c:	ddc00a15 	stw	r23,40(sp)
8110f340:	dd000715 	stw	r20,28(sp)
8110f344:	dcc00615 	stw	r19,24(sp)
8110f348:	dc400415 	stw	r17,16(sp)
8110f34c:	1481ffcc 	andi	r18,r2,2047
8110f350:	2c20703a 	and	r16,r5,r16
8110f354:	b02b883a 	mov	r21,r22
8110f358:	b2403fcc 	andi	r9,r22,255
8110f35c:	90006026 	beq	r18,zero,8110f4e0 <__muldf3+0x1d8>
8110f360:	0081ffc4 	movi	r2,2047
8110f364:	2029883a 	mov	r20,r4
8110f368:	90803626 	beq	r18,r2,8110f444 <__muldf3+0x13c>
8110f36c:	80800434 	orhi	r2,r16,16
8110f370:	100490fa 	slli	r2,r2,3
8110f374:	2020d77a 	srli	r16,r4,29
8110f378:	202890fa 	slli	r20,r4,3
8110f37c:	94bf0044 	addi	r18,r18,-1023
8110f380:	80a0b03a 	or	r16,r16,r2
8110f384:	0027883a 	mov	r19,zero
8110f388:	0039883a 	mov	fp,zero
8110f38c:	3804d53a 	srli	r2,r7,20
8110f390:	382ed7fa 	srli	r23,r7,31
8110f394:	04400434 	movhi	r17,16
8110f398:	8c7fffc4 	addi	r17,r17,-1
8110f39c:	1081ffcc 	andi	r2,r2,2047
8110f3a0:	3011883a 	mov	r8,r6
8110f3a4:	3c62703a 	and	r17,r7,r17
8110f3a8:	ba803fcc 	andi	r10,r23,255
8110f3ac:	10006d26 	beq	r2,zero,8110f564 <__muldf3+0x25c>
8110f3b0:	00c1ffc4 	movi	r3,2047
8110f3b4:	10c06526 	beq	r2,r3,8110f54c <__muldf3+0x244>
8110f3b8:	88c00434 	orhi	r3,r17,16
8110f3bc:	180690fa 	slli	r3,r3,3
8110f3c0:	3022d77a 	srli	r17,r6,29
8110f3c4:	301090fa 	slli	r8,r6,3
8110f3c8:	10bf0044 	addi	r2,r2,-1023
8110f3cc:	88e2b03a 	or	r17,r17,r3
8110f3d0:	000b883a 	mov	r5,zero
8110f3d4:	9085883a 	add	r2,r18,r2
8110f3d8:	2cc8b03a 	or	r4,r5,r19
8110f3dc:	00c003c4 	movi	r3,15
8110f3e0:	bdacf03a 	xor	r22,r23,r22
8110f3e4:	12c00044 	addi	r11,r2,1
8110f3e8:	19009936 	bltu	r3,r4,8110f650 <__muldf3+0x348>
8110f3ec:	200890ba 	slli	r4,r4,2
8110f3f0:	00e04474 	movhi	r3,33041
8110f3f4:	18fd0104 	addi	r3,r3,-3068
8110f3f8:	20c9883a 	add	r4,r4,r3
8110f3fc:	20c00017 	ldw	r3,0(r4)
8110f400:	1800683a 	jmp	r3
8110f404:	8110f650 	cmplti	r4,r16,17369
8110f408:	8110f464 	muli	r4,r16,17361
8110f40c:	8110f464 	muli	r4,r16,17361
8110f410:	8110f460 	cmpeqi	r4,r16,17361
8110f414:	8110f62c 	andhi	r4,r16,17368
8110f418:	8110f62c 	andhi	r4,r16,17368
8110f41c:	8110f614 	ori	r4,r16,17368
8110f420:	8110f460 	cmpeqi	r4,r16,17361
8110f424:	8110f62c 	andhi	r4,r16,17368
8110f428:	8110f614 	ori	r4,r16,17368
8110f42c:	8110f62c 	andhi	r4,r16,17368
8110f430:	8110f460 	cmpeqi	r4,r16,17361
8110f434:	8110f63c 	xorhi	r4,r16,17368
8110f438:	8110f63c 	xorhi	r4,r16,17368
8110f43c:	8110f63c 	xorhi	r4,r16,17368
8110f440:	8110f858 	cmpnei	r4,r16,17377
8110f444:	2404b03a 	or	r2,r4,r16
8110f448:	10006f1e 	bne	r2,zero,8110f608 <__muldf3+0x300>
8110f44c:	04c00204 	movi	r19,8
8110f450:	0021883a 	mov	r16,zero
8110f454:	0029883a 	mov	r20,zero
8110f458:	07000084 	movi	fp,2
8110f45c:	003fcb06 	br	8110f38c <__reset+0xfb0ef38c>
8110f460:	502d883a 	mov	r22,r10
8110f464:	00800084 	movi	r2,2
8110f468:	28805726 	beq	r5,r2,8110f5c8 <__muldf3+0x2c0>
8110f46c:	008000c4 	movi	r2,3
8110f470:	28816626 	beq	r5,r2,8110fa0c <__muldf3+0x704>
8110f474:	00800044 	movi	r2,1
8110f478:	2881411e 	bne	r5,r2,8110f980 <__muldf3+0x678>
8110f47c:	b02b883a 	mov	r21,r22
8110f480:	0005883a 	mov	r2,zero
8110f484:	000b883a 	mov	r5,zero
8110f488:	0029883a 	mov	r20,zero
8110f48c:	1004953a 	slli	r2,r2,20
8110f490:	a8c03fcc 	andi	r3,r21,255
8110f494:	04400434 	movhi	r17,16
8110f498:	8c7fffc4 	addi	r17,r17,-1
8110f49c:	180697fa 	slli	r3,r3,31
8110f4a0:	2c4a703a 	and	r5,r5,r17
8110f4a4:	288ab03a 	or	r5,r5,r2
8110f4a8:	28c6b03a 	or	r3,r5,r3
8110f4ac:	a005883a 	mov	r2,r20
8110f4b0:	dfc00c17 	ldw	ra,48(sp)
8110f4b4:	df000b17 	ldw	fp,44(sp)
8110f4b8:	ddc00a17 	ldw	r23,40(sp)
8110f4bc:	dd800917 	ldw	r22,36(sp)
8110f4c0:	dd400817 	ldw	r21,32(sp)
8110f4c4:	dd000717 	ldw	r20,28(sp)
8110f4c8:	dcc00617 	ldw	r19,24(sp)
8110f4cc:	dc800517 	ldw	r18,20(sp)
8110f4d0:	dc400417 	ldw	r17,16(sp)
8110f4d4:	dc000317 	ldw	r16,12(sp)
8110f4d8:	dec00d04 	addi	sp,sp,52
8110f4dc:	f800283a 	ret
8110f4e0:	2404b03a 	or	r2,r4,r16
8110f4e4:	2027883a 	mov	r19,r4
8110f4e8:	10004226 	beq	r2,zero,8110f5f4 <__muldf3+0x2ec>
8110f4ec:	8000fc26 	beq	r16,zero,8110f8e0 <__muldf3+0x5d8>
8110f4f0:	8009883a 	mov	r4,r16
8110f4f4:	d9800215 	stw	r6,8(sp)
8110f4f8:	d9c00015 	stw	r7,0(sp)
8110f4fc:	da400115 	stw	r9,4(sp)
8110f500:	110fce80 	call	8110fce8 <__clzsi2>
8110f504:	d9800217 	ldw	r6,8(sp)
8110f508:	d9c00017 	ldw	r7,0(sp)
8110f50c:	da400117 	ldw	r9,4(sp)
8110f510:	113ffd44 	addi	r4,r2,-11
8110f514:	00c00704 	movi	r3,28
8110f518:	1900ed16 	blt	r3,r4,8110f8d0 <__muldf3+0x5c8>
8110f51c:	00c00744 	movi	r3,29
8110f520:	147ffe04 	addi	r17,r2,-8
8110f524:	1907c83a 	sub	r3,r3,r4
8110f528:	8460983a 	sll	r16,r16,r17
8110f52c:	98c6d83a 	srl	r3,r19,r3
8110f530:	9c68983a 	sll	r20,r19,r17
8110f534:	1c20b03a 	or	r16,r3,r16
8110f538:	1080fcc4 	addi	r2,r2,1011
8110f53c:	00a5c83a 	sub	r18,zero,r2
8110f540:	0027883a 	mov	r19,zero
8110f544:	0039883a 	mov	fp,zero
8110f548:	003f9006 	br	8110f38c <__reset+0xfb0ef38c>
8110f54c:	3446b03a 	or	r3,r6,r17
8110f550:	1800261e 	bne	r3,zero,8110f5ec <__muldf3+0x2e4>
8110f554:	0023883a 	mov	r17,zero
8110f558:	0011883a 	mov	r8,zero
8110f55c:	01400084 	movi	r5,2
8110f560:	003f9c06 	br	8110f3d4 <__reset+0xfb0ef3d4>
8110f564:	3446b03a 	or	r3,r6,r17
8110f568:	18001c26 	beq	r3,zero,8110f5dc <__muldf3+0x2d4>
8110f56c:	8800ce26 	beq	r17,zero,8110f8a8 <__muldf3+0x5a0>
8110f570:	8809883a 	mov	r4,r17
8110f574:	d9800215 	stw	r6,8(sp)
8110f578:	da400115 	stw	r9,4(sp)
8110f57c:	da800015 	stw	r10,0(sp)
8110f580:	110fce80 	call	8110fce8 <__clzsi2>
8110f584:	d9800217 	ldw	r6,8(sp)
8110f588:	da400117 	ldw	r9,4(sp)
8110f58c:	da800017 	ldw	r10,0(sp)
8110f590:	113ffd44 	addi	r4,r2,-11
8110f594:	00c00704 	movi	r3,28
8110f598:	1900bf16 	blt	r3,r4,8110f898 <__muldf3+0x590>
8110f59c:	00c00744 	movi	r3,29
8110f5a0:	123ffe04 	addi	r8,r2,-8
8110f5a4:	1907c83a 	sub	r3,r3,r4
8110f5a8:	8a22983a 	sll	r17,r17,r8
8110f5ac:	30c6d83a 	srl	r3,r6,r3
8110f5b0:	3210983a 	sll	r8,r6,r8
8110f5b4:	1c62b03a 	or	r17,r3,r17
8110f5b8:	1080fcc4 	addi	r2,r2,1011
8110f5bc:	0085c83a 	sub	r2,zero,r2
8110f5c0:	000b883a 	mov	r5,zero
8110f5c4:	003f8306 	br	8110f3d4 <__reset+0xfb0ef3d4>
8110f5c8:	b02b883a 	mov	r21,r22
8110f5cc:	0081ffc4 	movi	r2,2047
8110f5d0:	000b883a 	mov	r5,zero
8110f5d4:	0029883a 	mov	r20,zero
8110f5d8:	003fac06 	br	8110f48c <__reset+0xfb0ef48c>
8110f5dc:	0023883a 	mov	r17,zero
8110f5e0:	0011883a 	mov	r8,zero
8110f5e4:	01400044 	movi	r5,1
8110f5e8:	003f7a06 	br	8110f3d4 <__reset+0xfb0ef3d4>
8110f5ec:	014000c4 	movi	r5,3
8110f5f0:	003f7806 	br	8110f3d4 <__reset+0xfb0ef3d4>
8110f5f4:	04c00104 	movi	r19,4
8110f5f8:	0021883a 	mov	r16,zero
8110f5fc:	0029883a 	mov	r20,zero
8110f600:	07000044 	movi	fp,1
8110f604:	003f6106 	br	8110f38c <__reset+0xfb0ef38c>
8110f608:	04c00304 	movi	r19,12
8110f60c:	070000c4 	movi	fp,3
8110f610:	003f5e06 	br	8110f38c <__reset+0xfb0ef38c>
8110f614:	01400434 	movhi	r5,16
8110f618:	002b883a 	mov	r21,zero
8110f61c:	297fffc4 	addi	r5,r5,-1
8110f620:	053fffc4 	movi	r20,-1
8110f624:	0081ffc4 	movi	r2,2047
8110f628:	003f9806 	br	8110f48c <__reset+0xfb0ef48c>
8110f62c:	8023883a 	mov	r17,r16
8110f630:	a011883a 	mov	r8,r20
8110f634:	e00b883a 	mov	r5,fp
8110f638:	003f8a06 	br	8110f464 <__reset+0xfb0ef464>
8110f63c:	8023883a 	mov	r17,r16
8110f640:	a011883a 	mov	r8,r20
8110f644:	482d883a 	mov	r22,r9
8110f648:	e00b883a 	mov	r5,fp
8110f64c:	003f8506 	br	8110f464 <__reset+0xfb0ef464>
8110f650:	a00ad43a 	srli	r5,r20,16
8110f654:	401ad43a 	srli	r13,r8,16
8110f658:	a53fffcc 	andi	r20,r20,65535
8110f65c:	423fffcc 	andi	r8,r8,65535
8110f660:	4519383a 	mul	r12,r8,r20
8110f664:	4147383a 	mul	r3,r8,r5
8110f668:	6d09383a 	mul	r4,r13,r20
8110f66c:	600cd43a 	srli	r6,r12,16
8110f670:	2b5d383a 	mul	r14,r5,r13
8110f674:	20c9883a 	add	r4,r4,r3
8110f678:	310d883a 	add	r6,r6,r4
8110f67c:	30c0022e 	bgeu	r6,r3,8110f688 <__muldf3+0x380>
8110f680:	00c00074 	movhi	r3,1
8110f684:	70dd883a 	add	r14,r14,r3
8110f688:	8826d43a 	srli	r19,r17,16
8110f68c:	8bffffcc 	andi	r15,r17,65535
8110f690:	7d23383a 	mul	r17,r15,r20
8110f694:	7949383a 	mul	r4,r15,r5
8110f698:	9d29383a 	mul	r20,r19,r20
8110f69c:	8814d43a 	srli	r10,r17,16
8110f6a0:	3012943a 	slli	r9,r6,16
8110f6a4:	a129883a 	add	r20,r20,r4
8110f6a8:	633fffcc 	andi	r12,r12,65535
8110f6ac:	5515883a 	add	r10,r10,r20
8110f6b0:	3006d43a 	srli	r3,r6,16
8110f6b4:	4b13883a 	add	r9,r9,r12
8110f6b8:	2ccb383a 	mul	r5,r5,r19
8110f6bc:	5100022e 	bgeu	r10,r4,8110f6c8 <__muldf3+0x3c0>
8110f6c0:	01000074 	movhi	r4,1
8110f6c4:	290b883a 	add	r5,r5,r4
8110f6c8:	802ad43a 	srli	r21,r16,16
8110f6cc:	843fffcc 	andi	r16,r16,65535
8110f6d0:	440d383a 	mul	r6,r8,r16
8110f6d4:	4565383a 	mul	r18,r8,r21
8110f6d8:	8349383a 	mul	r4,r16,r13
8110f6dc:	500e943a 	slli	r7,r10,16
8110f6e0:	3010d43a 	srli	r8,r6,16
8110f6e4:	5028d43a 	srli	r20,r10,16
8110f6e8:	2489883a 	add	r4,r4,r18
8110f6ec:	8abfffcc 	andi	r10,r17,65535
8110f6f0:	3a95883a 	add	r10,r7,r10
8110f6f4:	4119883a 	add	r12,r8,r4
8110f6f8:	a169883a 	add	r20,r20,r5
8110f6fc:	1a87883a 	add	r3,r3,r10
8110f700:	6d5b383a 	mul	r13,r13,r21
8110f704:	6480022e 	bgeu	r12,r18,8110f710 <__muldf3+0x408>
8110f708:	01000074 	movhi	r4,1
8110f70c:	691b883a 	add	r13,r13,r4
8110f710:	7c25383a 	mul	r18,r15,r16
8110f714:	7d4b383a 	mul	r5,r15,r21
8110f718:	84cf383a 	mul	r7,r16,r19
8110f71c:	901ed43a 	srli	r15,r18,16
8110f720:	6008d43a 	srli	r4,r12,16
8110f724:	6010943a 	slli	r8,r12,16
8110f728:	394f883a 	add	r7,r7,r5
8110f72c:	333fffcc 	andi	r12,r6,65535
8110f730:	79df883a 	add	r15,r15,r7
8110f734:	235b883a 	add	r13,r4,r13
8110f738:	9d63383a 	mul	r17,r19,r21
8110f73c:	4309883a 	add	r4,r8,r12
8110f740:	7940022e 	bgeu	r15,r5,8110f74c <__muldf3+0x444>
8110f744:	01400074 	movhi	r5,1
8110f748:	8963883a 	add	r17,r17,r5
8110f74c:	780a943a 	slli	r5,r15,16
8110f750:	91bfffcc 	andi	r6,r18,65535
8110f754:	70c7883a 	add	r3,r14,r3
8110f758:	298d883a 	add	r6,r5,r6
8110f75c:	1a8f803a 	cmpltu	r7,r3,r10
8110f760:	350b883a 	add	r5,r6,r20
8110f764:	20c7883a 	add	r3,r4,r3
8110f768:	3955883a 	add	r10,r7,r5
8110f76c:	1909803a 	cmpltu	r4,r3,r4
8110f770:	6a91883a 	add	r8,r13,r10
8110f774:	780cd43a 	srli	r6,r15,16
8110f778:	2219883a 	add	r12,r4,r8
8110f77c:	2d0b803a 	cmpltu	r5,r5,r20
8110f780:	51cf803a 	cmpltu	r7,r10,r7
8110f784:	29ceb03a 	or	r7,r5,r7
8110f788:	4351803a 	cmpltu	r8,r8,r13
8110f78c:	610b803a 	cmpltu	r5,r12,r4
8110f790:	4148b03a 	or	r4,r8,r5
8110f794:	398f883a 	add	r7,r7,r6
8110f798:	3909883a 	add	r4,r7,r4
8110f79c:	1810927a 	slli	r8,r3,9
8110f7a0:	2449883a 	add	r4,r4,r17
8110f7a4:	2008927a 	slli	r4,r4,9
8110f7a8:	6022d5fa 	srli	r17,r12,23
8110f7ac:	1806d5fa 	srli	r3,r3,23
8110f7b0:	4252b03a 	or	r9,r8,r9
8110f7b4:	600a927a 	slli	r5,r12,9
8110f7b8:	4810c03a 	cmpne	r8,r9,zero
8110f7bc:	2462b03a 	or	r17,r4,r17
8110f7c0:	40c6b03a 	or	r3,r8,r3
8110f7c4:	8900402c 	andhi	r4,r17,256
8110f7c8:	1950b03a 	or	r8,r3,r5
8110f7cc:	20000726 	beq	r4,zero,8110f7ec <__muldf3+0x4e4>
8110f7d0:	4006d07a 	srli	r3,r8,1
8110f7d4:	880497fa 	slli	r2,r17,31
8110f7d8:	4200004c 	andi	r8,r8,1
8110f7dc:	8822d07a 	srli	r17,r17,1
8110f7e0:	1a10b03a 	or	r8,r3,r8
8110f7e4:	1210b03a 	or	r8,r2,r8
8110f7e8:	5805883a 	mov	r2,r11
8110f7ec:	1140ffc4 	addi	r5,r2,1023
8110f7f0:	0140440e 	bge	zero,r5,8110f904 <__muldf3+0x5fc>
8110f7f4:	40c001cc 	andi	r3,r8,7
8110f7f8:	18000726 	beq	r3,zero,8110f818 <__muldf3+0x510>
8110f7fc:	40c003cc 	andi	r3,r8,15
8110f800:	01000104 	movi	r4,4
8110f804:	19000426 	beq	r3,r4,8110f818 <__muldf3+0x510>
8110f808:	4107883a 	add	r3,r8,r4
8110f80c:	1a11803a 	cmpltu	r8,r3,r8
8110f810:	8a23883a 	add	r17,r17,r8
8110f814:	1811883a 	mov	r8,r3
8110f818:	88c0402c 	andhi	r3,r17,256
8110f81c:	18000426 	beq	r3,zero,8110f830 <__muldf3+0x528>
8110f820:	11410004 	addi	r5,r2,1024
8110f824:	00bfc034 	movhi	r2,65280
8110f828:	10bfffc4 	addi	r2,r2,-1
8110f82c:	88a2703a 	and	r17,r17,r2
8110f830:	0081ff84 	movi	r2,2046
8110f834:	117f6416 	blt	r2,r5,8110f5c8 <__reset+0xfb0ef5c8>
8110f838:	8828977a 	slli	r20,r17,29
8110f83c:	4010d0fa 	srli	r8,r8,3
8110f840:	8822927a 	slli	r17,r17,9
8110f844:	2881ffcc 	andi	r2,r5,2047
8110f848:	a228b03a 	or	r20,r20,r8
8110f84c:	880ad33a 	srli	r5,r17,12
8110f850:	b02b883a 	mov	r21,r22
8110f854:	003f0d06 	br	8110f48c <__reset+0xfb0ef48c>
8110f858:	8080022c 	andhi	r2,r16,8
8110f85c:	10000926 	beq	r2,zero,8110f884 <__muldf3+0x57c>
8110f860:	8880022c 	andhi	r2,r17,8
8110f864:	1000071e 	bne	r2,zero,8110f884 <__muldf3+0x57c>
8110f868:	00800434 	movhi	r2,16
8110f86c:	89400234 	orhi	r5,r17,8
8110f870:	10bfffc4 	addi	r2,r2,-1
8110f874:	b82b883a 	mov	r21,r23
8110f878:	288a703a 	and	r5,r5,r2
8110f87c:	4029883a 	mov	r20,r8
8110f880:	003f6806 	br	8110f624 <__reset+0xfb0ef624>
8110f884:	00800434 	movhi	r2,16
8110f888:	81400234 	orhi	r5,r16,8
8110f88c:	10bfffc4 	addi	r2,r2,-1
8110f890:	288a703a 	and	r5,r5,r2
8110f894:	003f6306 	br	8110f624 <__reset+0xfb0ef624>
8110f898:	147ff604 	addi	r17,r2,-40
8110f89c:	3462983a 	sll	r17,r6,r17
8110f8a0:	0011883a 	mov	r8,zero
8110f8a4:	003f4406 	br	8110f5b8 <__reset+0xfb0ef5b8>
8110f8a8:	3009883a 	mov	r4,r6
8110f8ac:	d9800215 	stw	r6,8(sp)
8110f8b0:	da400115 	stw	r9,4(sp)
8110f8b4:	da800015 	stw	r10,0(sp)
8110f8b8:	110fce80 	call	8110fce8 <__clzsi2>
8110f8bc:	10800804 	addi	r2,r2,32
8110f8c0:	da800017 	ldw	r10,0(sp)
8110f8c4:	da400117 	ldw	r9,4(sp)
8110f8c8:	d9800217 	ldw	r6,8(sp)
8110f8cc:	003f3006 	br	8110f590 <__reset+0xfb0ef590>
8110f8d0:	143ff604 	addi	r16,r2,-40
8110f8d4:	9c20983a 	sll	r16,r19,r16
8110f8d8:	0029883a 	mov	r20,zero
8110f8dc:	003f1606 	br	8110f538 <__reset+0xfb0ef538>
8110f8e0:	d9800215 	stw	r6,8(sp)
8110f8e4:	d9c00015 	stw	r7,0(sp)
8110f8e8:	da400115 	stw	r9,4(sp)
8110f8ec:	110fce80 	call	8110fce8 <__clzsi2>
8110f8f0:	10800804 	addi	r2,r2,32
8110f8f4:	da400117 	ldw	r9,4(sp)
8110f8f8:	d9c00017 	ldw	r7,0(sp)
8110f8fc:	d9800217 	ldw	r6,8(sp)
8110f900:	003f0306 	br	8110f510 <__reset+0xfb0ef510>
8110f904:	00c00044 	movi	r3,1
8110f908:	1947c83a 	sub	r3,r3,r5
8110f90c:	00800e04 	movi	r2,56
8110f910:	10feda16 	blt	r2,r3,8110f47c <__reset+0xfb0ef47c>
8110f914:	008007c4 	movi	r2,31
8110f918:	10c01b16 	blt	r2,r3,8110f988 <__muldf3+0x680>
8110f91c:	00800804 	movi	r2,32
8110f920:	10c5c83a 	sub	r2,r2,r3
8110f924:	888a983a 	sll	r5,r17,r2
8110f928:	40c8d83a 	srl	r4,r8,r3
8110f92c:	4084983a 	sll	r2,r8,r2
8110f930:	88e2d83a 	srl	r17,r17,r3
8110f934:	2906b03a 	or	r3,r5,r4
8110f938:	1004c03a 	cmpne	r2,r2,zero
8110f93c:	1886b03a 	or	r3,r3,r2
8110f940:	188001cc 	andi	r2,r3,7
8110f944:	10000726 	beq	r2,zero,8110f964 <__muldf3+0x65c>
8110f948:	188003cc 	andi	r2,r3,15
8110f94c:	01000104 	movi	r4,4
8110f950:	11000426 	beq	r2,r4,8110f964 <__muldf3+0x65c>
8110f954:	1805883a 	mov	r2,r3
8110f958:	10c00104 	addi	r3,r2,4
8110f95c:	1885803a 	cmpltu	r2,r3,r2
8110f960:	88a3883a 	add	r17,r17,r2
8110f964:	8880202c 	andhi	r2,r17,128
8110f968:	10001c26 	beq	r2,zero,8110f9dc <__muldf3+0x6d4>
8110f96c:	b02b883a 	mov	r21,r22
8110f970:	00800044 	movi	r2,1
8110f974:	000b883a 	mov	r5,zero
8110f978:	0029883a 	mov	r20,zero
8110f97c:	003ec306 	br	8110f48c <__reset+0xfb0ef48c>
8110f980:	5805883a 	mov	r2,r11
8110f984:	003f9906 	br	8110f7ec <__reset+0xfb0ef7ec>
8110f988:	00bff844 	movi	r2,-31
8110f98c:	1145c83a 	sub	r2,r2,r5
8110f990:	8888d83a 	srl	r4,r17,r2
8110f994:	00800804 	movi	r2,32
8110f998:	18801a26 	beq	r3,r2,8110fa04 <__muldf3+0x6fc>
8110f99c:	00801004 	movi	r2,64
8110f9a0:	10c5c83a 	sub	r2,r2,r3
8110f9a4:	8884983a 	sll	r2,r17,r2
8110f9a8:	1204b03a 	or	r2,r2,r8
8110f9ac:	1004c03a 	cmpne	r2,r2,zero
8110f9b0:	2084b03a 	or	r2,r4,r2
8110f9b4:	144001cc 	andi	r17,r2,7
8110f9b8:	88000d1e 	bne	r17,zero,8110f9f0 <__muldf3+0x6e8>
8110f9bc:	000b883a 	mov	r5,zero
8110f9c0:	1028d0fa 	srli	r20,r2,3
8110f9c4:	b02b883a 	mov	r21,r22
8110f9c8:	0005883a 	mov	r2,zero
8110f9cc:	a468b03a 	or	r20,r20,r17
8110f9d0:	003eae06 	br	8110f48c <__reset+0xfb0ef48c>
8110f9d4:	1007883a 	mov	r3,r2
8110f9d8:	0023883a 	mov	r17,zero
8110f9dc:	880a927a 	slli	r5,r17,9
8110f9e0:	1805883a 	mov	r2,r3
8110f9e4:	8822977a 	slli	r17,r17,29
8110f9e8:	280ad33a 	srli	r5,r5,12
8110f9ec:	003ff406 	br	8110f9c0 <__reset+0xfb0ef9c0>
8110f9f0:	10c003cc 	andi	r3,r2,15
8110f9f4:	01000104 	movi	r4,4
8110f9f8:	193ff626 	beq	r3,r4,8110f9d4 <__reset+0xfb0ef9d4>
8110f9fc:	0023883a 	mov	r17,zero
8110fa00:	003fd506 	br	8110f958 <__reset+0xfb0ef958>
8110fa04:	0005883a 	mov	r2,zero
8110fa08:	003fe706 	br	8110f9a8 <__reset+0xfb0ef9a8>
8110fa0c:	00800434 	movhi	r2,16
8110fa10:	89400234 	orhi	r5,r17,8
8110fa14:	10bfffc4 	addi	r2,r2,-1
8110fa18:	b02b883a 	mov	r21,r22
8110fa1c:	288a703a 	and	r5,r5,r2
8110fa20:	4029883a 	mov	r20,r8
8110fa24:	003eff06 	br	8110f624 <__reset+0xfb0ef624>

8110fa28 <__extendsfdf2>:
8110fa28:	200ad5fa 	srli	r5,r4,23
8110fa2c:	defffd04 	addi	sp,sp,-12
8110fa30:	de00012e 	bgeu	sp,et,8110fa38 <__extendsfdf2+0x10>
8110fa34:	003b68fa 	trap	3
8110fa38:	29403fcc 	andi	r5,r5,255
8110fa3c:	dc400115 	stw	r17,4(sp)
8110fa40:	29800044 	addi	r6,r5,1
8110fa44:	04402034 	movhi	r17,128
8110fa48:	dc000015 	stw	r16,0(sp)
8110fa4c:	8c7fffc4 	addi	r17,r17,-1
8110fa50:	dfc00215 	stw	ra,8(sp)
8110fa54:	31803fcc 	andi	r6,r6,255
8110fa58:	00800044 	movi	r2,1
8110fa5c:	8922703a 	and	r17,r17,r4
8110fa60:	2020d7fa 	srli	r16,r4,31
8110fa64:	1180110e 	bge	r2,r6,8110faac <__extendsfdf2+0x84>
8110fa68:	880cd0fa 	srli	r6,r17,3
8110fa6c:	8822977a 	slli	r17,r17,29
8110fa70:	2940e004 	addi	r5,r5,896
8110fa74:	2941ffcc 	andi	r5,r5,2047
8110fa78:	2804953a 	slli	r2,r5,20
8110fa7c:	01400434 	movhi	r5,16
8110fa80:	800697fa 	slli	r3,r16,31
8110fa84:	297fffc4 	addi	r5,r5,-1
8110fa88:	314a703a 	and	r5,r6,r5
8110fa8c:	288ab03a 	or	r5,r5,r2
8110fa90:	28c6b03a 	or	r3,r5,r3
8110fa94:	8805883a 	mov	r2,r17
8110fa98:	dfc00217 	ldw	ra,8(sp)
8110fa9c:	dc400117 	ldw	r17,4(sp)
8110faa0:	dc000017 	ldw	r16,0(sp)
8110faa4:	dec00304 	addi	sp,sp,12
8110faa8:	f800283a 	ret
8110faac:	2800111e 	bne	r5,zero,8110faf4 <__extendsfdf2+0xcc>
8110fab0:	88001c26 	beq	r17,zero,8110fb24 <__extendsfdf2+0xfc>
8110fab4:	8809883a 	mov	r4,r17
8110fab8:	110fce80 	call	8110fce8 <__clzsi2>
8110fabc:	00c00284 	movi	r3,10
8110fac0:	18801b16 	blt	r3,r2,8110fb30 <__extendsfdf2+0x108>
8110fac4:	018002c4 	movi	r6,11
8110fac8:	308dc83a 	sub	r6,r6,r2
8110facc:	11000544 	addi	r4,r2,21
8110fad0:	8986d83a 	srl	r3,r17,r6
8110fad4:	8922983a 	sll	r17,r17,r4
8110fad8:	0180e244 	movi	r6,905
8110fadc:	01400434 	movhi	r5,16
8110fae0:	3085c83a 	sub	r2,r6,r2
8110fae4:	297fffc4 	addi	r5,r5,-1
8110fae8:	194c703a 	and	r6,r3,r5
8110faec:	1141ffcc 	andi	r5,r2,2047
8110faf0:	003fe006 	br	8110fa74 <__reset+0xfb0efa74>
8110faf4:	88000826 	beq	r17,zero,8110fb18 <__extendsfdf2+0xf0>
8110faf8:	880cd0fa 	srli	r6,r17,3
8110fafc:	00800434 	movhi	r2,16
8110fb00:	10bfffc4 	addi	r2,r2,-1
8110fb04:	31800234 	orhi	r6,r6,8
8110fb08:	8822977a 	slli	r17,r17,29
8110fb0c:	308c703a 	and	r6,r6,r2
8110fb10:	0141ffc4 	movi	r5,2047
8110fb14:	003fd706 	br	8110fa74 <__reset+0xfb0efa74>
8110fb18:	0141ffc4 	movi	r5,2047
8110fb1c:	000d883a 	mov	r6,zero
8110fb20:	003fd406 	br	8110fa74 <__reset+0xfb0efa74>
8110fb24:	000b883a 	mov	r5,zero
8110fb28:	000d883a 	mov	r6,zero
8110fb2c:	003fd106 	br	8110fa74 <__reset+0xfb0efa74>
8110fb30:	11bffd44 	addi	r6,r2,-11
8110fb34:	8986983a 	sll	r3,r17,r6
8110fb38:	0023883a 	mov	r17,zero
8110fb3c:	003fe606 	br	8110fad8 <__reset+0xfb0efad8>

8110fb40 <__truncdfsf2>:
8110fb40:	2810d53a 	srli	r8,r5,20
8110fb44:	01c00434 	movhi	r7,16
8110fb48:	39ffffc4 	addi	r7,r7,-1
8110fb4c:	29ce703a 	and	r7,r5,r7
8110fb50:	4201ffcc 	andi	r8,r8,2047
8110fb54:	380e90fa 	slli	r7,r7,3
8110fb58:	200cd77a 	srli	r6,r4,29
8110fb5c:	42400044 	addi	r9,r8,1
8110fb60:	4a41ffcc 	andi	r9,r9,2047
8110fb64:	00c00044 	movi	r3,1
8110fb68:	280ad7fa 	srli	r5,r5,31
8110fb6c:	31ceb03a 	or	r7,r6,r7
8110fb70:	200490fa 	slli	r2,r4,3
8110fb74:	1a40230e 	bge	r3,r9,8110fc04 <__truncdfsf2+0xc4>
8110fb78:	40ff2004 	addi	r3,r8,-896
8110fb7c:	01803f84 	movi	r6,254
8110fb80:	30c01516 	blt	r6,r3,8110fbd8 <__truncdfsf2+0x98>
8110fb84:	00c0380e 	bge	zero,r3,8110fc68 <__truncdfsf2+0x128>
8110fb88:	200c91ba 	slli	r6,r4,6
8110fb8c:	380e90fa 	slli	r7,r7,3
8110fb90:	1004d77a 	srli	r2,r2,29
8110fb94:	300cc03a 	cmpne	r6,r6,zero
8110fb98:	31ccb03a 	or	r6,r6,r7
8110fb9c:	308cb03a 	or	r6,r6,r2
8110fba0:	308001cc 	andi	r2,r6,7
8110fba4:	10000426 	beq	r2,zero,8110fbb8 <__truncdfsf2+0x78>
8110fba8:	308003cc 	andi	r2,r6,15
8110fbac:	01000104 	movi	r4,4
8110fbb0:	11000126 	beq	r2,r4,8110fbb8 <__truncdfsf2+0x78>
8110fbb4:	31800104 	addi	r6,r6,4
8110fbb8:	3081002c 	andhi	r2,r6,1024
8110fbbc:	10001626 	beq	r2,zero,8110fc18 <__truncdfsf2+0xd8>
8110fbc0:	18c00044 	addi	r3,r3,1
8110fbc4:	00803fc4 	movi	r2,255
8110fbc8:	18800326 	beq	r3,r2,8110fbd8 <__truncdfsf2+0x98>
8110fbcc:	300c91ba 	slli	r6,r6,6
8110fbd0:	300cd27a 	srli	r6,r6,9
8110fbd4:	00000206 	br	8110fbe0 <__truncdfsf2+0xa0>
8110fbd8:	00ffffc4 	movi	r3,-1
8110fbdc:	000d883a 	mov	r6,zero
8110fbe0:	18c03fcc 	andi	r3,r3,255
8110fbe4:	180895fa 	slli	r4,r3,23
8110fbe8:	00c02034 	movhi	r3,128
8110fbec:	280a97fa 	slli	r5,r5,31
8110fbf0:	18ffffc4 	addi	r3,r3,-1
8110fbf4:	30c6703a 	and	r3,r6,r3
8110fbf8:	1906b03a 	or	r3,r3,r4
8110fbfc:	1944b03a 	or	r2,r3,r5
8110fc00:	f800283a 	ret
8110fc04:	40000b1e 	bne	r8,zero,8110fc34 <__truncdfsf2+0xf4>
8110fc08:	388cb03a 	or	r6,r7,r2
8110fc0c:	0007883a 	mov	r3,zero
8110fc10:	30000426 	beq	r6,zero,8110fc24 <__truncdfsf2+0xe4>
8110fc14:	01800144 	movi	r6,5
8110fc18:	00803fc4 	movi	r2,255
8110fc1c:	300cd0fa 	srli	r6,r6,3
8110fc20:	18800a26 	beq	r3,r2,8110fc4c <__truncdfsf2+0x10c>
8110fc24:	00802034 	movhi	r2,128
8110fc28:	10bfffc4 	addi	r2,r2,-1
8110fc2c:	308c703a 	and	r6,r6,r2
8110fc30:	003feb06 	br	8110fbe0 <__reset+0xfb0efbe0>
8110fc34:	3888b03a 	or	r4,r7,r2
8110fc38:	203fe726 	beq	r4,zero,8110fbd8 <__reset+0xfb0efbd8>
8110fc3c:	380c90fa 	slli	r6,r7,3
8110fc40:	00c03fc4 	movi	r3,255
8110fc44:	31808034 	orhi	r6,r6,512
8110fc48:	003fd506 	br	8110fba0 <__reset+0xfb0efba0>
8110fc4c:	303fe226 	beq	r6,zero,8110fbd8 <__reset+0xfb0efbd8>
8110fc50:	00802034 	movhi	r2,128
8110fc54:	31801034 	orhi	r6,r6,64
8110fc58:	10bfffc4 	addi	r2,r2,-1
8110fc5c:	00ffffc4 	movi	r3,-1
8110fc60:	308c703a 	and	r6,r6,r2
8110fc64:	003fde06 	br	8110fbe0 <__reset+0xfb0efbe0>
8110fc68:	013ffa44 	movi	r4,-23
8110fc6c:	19000e16 	blt	r3,r4,8110fca8 <__truncdfsf2+0x168>
8110fc70:	01000784 	movi	r4,30
8110fc74:	20c9c83a 	sub	r4,r4,r3
8110fc78:	018007c4 	movi	r6,31
8110fc7c:	39c02034 	orhi	r7,r7,128
8110fc80:	31000b16 	blt	r6,r4,8110fcb0 <__truncdfsf2+0x170>
8110fc84:	423f2084 	addi	r8,r8,-894
8110fc88:	120c983a 	sll	r6,r2,r8
8110fc8c:	3a0e983a 	sll	r7,r7,r8
8110fc90:	1104d83a 	srl	r2,r2,r4
8110fc94:	300cc03a 	cmpne	r6,r6,zero
8110fc98:	31ceb03a 	or	r7,r6,r7
8110fc9c:	388cb03a 	or	r6,r7,r2
8110fca0:	0007883a 	mov	r3,zero
8110fca4:	003fbe06 	br	8110fba0 <__reset+0xfb0efba0>
8110fca8:	0007883a 	mov	r3,zero
8110fcac:	003fd906 	br	8110fc14 <__reset+0xfb0efc14>
8110fcb0:	01bfff84 	movi	r6,-2
8110fcb4:	30cdc83a 	sub	r6,r6,r3
8110fcb8:	00c00804 	movi	r3,32
8110fcbc:	398cd83a 	srl	r6,r7,r6
8110fcc0:	20c00726 	beq	r4,r3,8110fce0 <__truncdfsf2+0x1a0>
8110fcc4:	423f2884 	addi	r8,r8,-862
8110fcc8:	3a0e983a 	sll	r7,r7,r8
8110fccc:	3884b03a 	or	r2,r7,r2
8110fcd0:	1004c03a 	cmpne	r2,r2,zero
8110fcd4:	118cb03a 	or	r6,r2,r6
8110fcd8:	0007883a 	mov	r3,zero
8110fcdc:	003fb006 	br	8110fba0 <__reset+0xfb0efba0>
8110fce0:	000f883a 	mov	r7,zero
8110fce4:	003ff906 	br	8110fccc <__reset+0xfb0efccc>

8110fce8 <__clzsi2>:
8110fce8:	00bfffd4 	movui	r2,65535
8110fcec:	11000536 	bltu	r2,r4,8110fd04 <__clzsi2+0x1c>
8110fcf0:	00803fc4 	movi	r2,255
8110fcf4:	11000f36 	bltu	r2,r4,8110fd34 <__clzsi2+0x4c>
8110fcf8:	00800804 	movi	r2,32
8110fcfc:	0007883a 	mov	r3,zero
8110fd00:	00000506 	br	8110fd18 <__clzsi2+0x30>
8110fd04:	00804034 	movhi	r2,256
8110fd08:	10bfffc4 	addi	r2,r2,-1
8110fd0c:	11000c2e 	bgeu	r2,r4,8110fd40 <__clzsi2+0x58>
8110fd10:	00800204 	movi	r2,8
8110fd14:	00c00604 	movi	r3,24
8110fd18:	20c8d83a 	srl	r4,r4,r3
8110fd1c:	00e04534 	movhi	r3,33044
8110fd20:	18f03a04 	addi	r3,r3,-16152
8110fd24:	1909883a 	add	r4,r3,r4
8110fd28:	20c00003 	ldbu	r3,0(r4)
8110fd2c:	10c5c83a 	sub	r2,r2,r3
8110fd30:	f800283a 	ret
8110fd34:	00800604 	movi	r2,24
8110fd38:	00c00204 	movi	r3,8
8110fd3c:	003ff606 	br	8110fd18 <__reset+0xfb0efd18>
8110fd40:	00800404 	movi	r2,16
8110fd44:	1007883a 	mov	r3,r2
8110fd48:	003ff306 	br	8110fd18 <__reset+0xfb0efd18>

8110fd4c <atoi>:
8110fd4c:	01800284 	movi	r6,10
8110fd50:	000b883a 	mov	r5,zero
8110fd54:	1111afc1 	jmpi	81111afc <strtol>

8110fd58 <_atoi_r>:
8110fd58:	01c00284 	movi	r7,10
8110fd5c:	000d883a 	mov	r6,zero
8110fd60:	11118bc1 	jmpi	811118bc <_strtol_r>

8110fd64 <_fopen_r>:
8110fd64:	defffa04 	addi	sp,sp,-24
8110fd68:	3005883a 	mov	r2,r6
8110fd6c:	de00012e 	bgeu	sp,et,8110fd74 <_fopen_r+0x10>
8110fd70:	003b68fa 	trap	3
8110fd74:	d80d883a 	mov	r6,sp
8110fd78:	dcc00415 	stw	r19,16(sp)
8110fd7c:	2827883a 	mov	r19,r5
8110fd80:	100b883a 	mov	r5,r2
8110fd84:	dc800315 	stw	r18,12(sp)
8110fd88:	dfc00515 	stw	ra,20(sp)
8110fd8c:	dc400215 	stw	r17,8(sp)
8110fd90:	dc000115 	stw	r16,4(sp)
8110fd94:	2025883a 	mov	r18,r4
8110fd98:	11199a40 	call	811199a4 <__sflags>
8110fd9c:	10002726 	beq	r2,zero,8110fe3c <_fopen_r+0xd8>
8110fda0:	9009883a 	mov	r4,r18
8110fda4:	1023883a 	mov	r17,r2
8110fda8:	111981c0 	call	8111981c <__sfp>
8110fdac:	1021883a 	mov	r16,r2
8110fdb0:	10002226 	beq	r2,zero,8110fe3c <_fopen_r+0xd8>
8110fdb4:	d9800017 	ldw	r6,0(sp)
8110fdb8:	01c06d84 	movi	r7,438
8110fdbc:	980b883a 	mov	r5,r19
8110fdc0:	9009883a 	mov	r4,r18
8110fdc4:	11111200 	call	81111120 <_open_r>
8110fdc8:	10001916 	blt	r2,zero,8110fe30 <_fopen_r+0xcc>
8110fdcc:	8080038d 	sth	r2,14(r16)
8110fdd0:	00a04474 	movhi	r2,33041
8110fdd4:	1085a104 	addi	r2,r2,5764
8110fdd8:	80800815 	stw	r2,32(r16)
8110fddc:	00a04474 	movhi	r2,33041
8110fde0:	1085ba04 	addi	r2,r2,5864
8110fde4:	80800915 	stw	r2,36(r16)
8110fde8:	00a04474 	movhi	r2,33041
8110fdec:	1085db04 	addi	r2,r2,5996
8110fdf0:	80800a15 	stw	r2,40(r16)
8110fdf4:	00a04474 	movhi	r2,33041
8110fdf8:	1085f404 	addi	r2,r2,6096
8110fdfc:	8440030d 	sth	r17,12(r16)
8110fe00:	84000715 	stw	r16,28(r16)
8110fe04:	80800b15 	stw	r2,44(r16)
8110fe08:	8c40400c 	andi	r17,r17,256
8110fe0c:	88000d1e 	bne	r17,zero,8110fe44 <_fopen_r+0xe0>
8110fe10:	8005883a 	mov	r2,r16
8110fe14:	dfc00517 	ldw	ra,20(sp)
8110fe18:	dcc00417 	ldw	r19,16(sp)
8110fe1c:	dc800317 	ldw	r18,12(sp)
8110fe20:	dc400217 	ldw	r17,8(sp)
8110fe24:	dc000117 	ldw	r16,4(sp)
8110fe28:	dec00604 	addi	sp,sp,24
8110fe2c:	f800283a 	ret
8110fe30:	11199640 	call	81119964 <__sfp_lock_acquire>
8110fe34:	8000030d 	sth	zero,12(r16)
8110fe38:	11199680 	call	81119968 <__sfp_lock_release>
8110fe3c:	0005883a 	mov	r2,zero
8110fe40:	003ff406 	br	8110fe14 <__reset+0xfb0efe14>
8110fe44:	01c00084 	movi	r7,2
8110fe48:	000d883a 	mov	r6,zero
8110fe4c:	800b883a 	mov	r5,r16
8110fe50:	9009883a 	mov	r4,r18
8110fe54:	110fed40 	call	8110fed4 <_fseek_r>
8110fe58:	8005883a 	mov	r2,r16
8110fe5c:	003fed06 	br	8110fe14 <__reset+0xfb0efe14>

8110fe60 <fopen>:
8110fe60:	00a04534 	movhi	r2,33044
8110fe64:	10ba2704 	addi	r2,r2,-5988
8110fe68:	280d883a 	mov	r6,r5
8110fe6c:	200b883a 	mov	r5,r4
8110fe70:	11000017 	ldw	r4,0(r2)
8110fe74:	110fd641 	jmpi	8110fd64 <_fopen_r>

8110fe78 <_fprintf_r>:
8110fe78:	defffe04 	addi	sp,sp,-8
8110fe7c:	2809883a 	mov	r4,r5
8110fe80:	300b883a 	mov	r5,r6
8110fe84:	de00012e 	bgeu	sp,et,8110fe8c <_fprintf_r+0x14>
8110fe88:	003b68fa 	trap	3
8110fe8c:	dfc00015 	stw	ra,0(sp)
8110fe90:	d9c00115 	stw	r7,4(sp)
8110fe94:	d9800104 	addi	r6,sp,4
8110fe98:	1115ef80 	call	81115ef8 <__vfprintf_internal>
8110fe9c:	dfc00017 	ldw	ra,0(sp)
8110fea0:	dec00204 	addi	sp,sp,8
8110fea4:	f800283a 	ret

8110fea8 <fprintf>:
8110fea8:	defffd04 	addi	sp,sp,-12
8110feac:	de00012e 	bgeu	sp,et,8110feb4 <fprintf+0xc>
8110feb0:	003b68fa 	trap	3
8110feb4:	dfc00015 	stw	ra,0(sp)
8110feb8:	d9800115 	stw	r6,4(sp)
8110febc:	d9c00215 	stw	r7,8(sp)
8110fec0:	d9800104 	addi	r6,sp,4
8110fec4:	1115ef80 	call	81115ef8 <__vfprintf_internal>
8110fec8:	dfc00017 	ldw	ra,0(sp)
8110fecc:	dec00304 	addi	sp,sp,12
8110fed0:	f800283a 	ret

8110fed4 <_fseek_r>:
8110fed4:	110fef41 	jmpi	8110fef4 <_fseeko_r>

8110fed8 <fseek>:
8110fed8:	00a04534 	movhi	r2,33044
8110fedc:	10ba2704 	addi	r2,r2,-5988
8110fee0:	300f883a 	mov	r7,r6
8110fee4:	280d883a 	mov	r6,r5
8110fee8:	200b883a 	mov	r5,r4
8110feec:	11000017 	ldw	r4,0(r2)
8110fef0:	110fef41 	jmpi	8110fef4 <_fseeko_r>

8110fef4 <_fseeko_r>:
8110fef4:	deffe804 	addi	sp,sp,-96
8110fef8:	de00012e 	bgeu	sp,et,8110ff00 <_fseeko_r+0xc>
8110fefc:	003b68fa 	trap	3
8110ff00:	dd401415 	stw	r21,80(sp)
8110ff04:	dc801115 	stw	r18,68(sp)
8110ff08:	dc401015 	stw	r17,64(sp)
8110ff0c:	dc000f15 	stw	r16,60(sp)
8110ff10:	dfc01715 	stw	ra,92(sp)
8110ff14:	ddc01615 	stw	r23,88(sp)
8110ff18:	dd801515 	stw	r22,84(sp)
8110ff1c:	dd001315 	stw	r20,76(sp)
8110ff20:	dcc01215 	stw	r19,72(sp)
8110ff24:	2023883a 	mov	r17,r4
8110ff28:	2821883a 	mov	r16,r5
8110ff2c:	302b883a 	mov	r21,r6
8110ff30:	3825883a 	mov	r18,r7
8110ff34:	20000226 	beq	r4,zero,8110ff40 <_fseeko_r+0x4c>
8110ff38:	20800e17 	ldw	r2,56(r4)
8110ff3c:	10005a26 	beq	r2,zero,811100a8 <_fseeko_r+0x1b4>
8110ff40:	8080030b 	ldhu	r2,12(r16)
8110ff44:	00c04204 	movi	r3,264
8110ff48:	1080420c 	andi	r2,r2,264
8110ff4c:	10c05b26 	beq	r2,r3,811100bc <_fseeko_r+0x1c8>
8110ff50:	85000a17 	ldw	r20,40(r16)
8110ff54:	a000f626 	beq	r20,zero,81110330 <_fseeko_r+0x43c>
8110ff58:	00800044 	movi	r2,1
8110ff5c:	90803e26 	beq	r18,r2,81110058 <_fseeko_r+0x164>
8110ff60:	00800084 	movi	r2,2
8110ff64:	90801026 	beq	r18,r2,8110ffa8 <_fseeko_r+0xb4>
8110ff68:	90000f26 	beq	r18,zero,8110ffa8 <_fseeko_r+0xb4>
8110ff6c:	00800584 	movi	r2,22
8110ff70:	88800015 	stw	r2,0(r17)
8110ff74:	04ffffc4 	movi	r19,-1
8110ff78:	9805883a 	mov	r2,r19
8110ff7c:	dfc01717 	ldw	ra,92(sp)
8110ff80:	ddc01617 	ldw	r23,88(sp)
8110ff84:	dd801517 	ldw	r22,84(sp)
8110ff88:	dd401417 	ldw	r21,80(sp)
8110ff8c:	dd001317 	ldw	r20,76(sp)
8110ff90:	dcc01217 	ldw	r19,72(sp)
8110ff94:	dc801117 	ldw	r18,68(sp)
8110ff98:	dc401017 	ldw	r17,64(sp)
8110ff9c:	dc000f17 	ldw	r16,60(sp)
8110ffa0:	dec01804 	addi	sp,sp,96
8110ffa4:	f800283a 	ret
8110ffa8:	80800417 	ldw	r2,16(r16)
8110ffac:	002f883a 	mov	r23,zero
8110ffb0:	0027883a 	mov	r19,zero
8110ffb4:	1000cb26 	beq	r2,zero,811102e4 <_fseeko_r+0x3f0>
8110ffb8:	8080030b 	ldhu	r2,12(r16)
8110ffbc:	10c2068c 	andi	r3,r2,2074
8110ffc0:	1800071e 	bne	r3,zero,8110ffe0 <_fseeko_r+0xec>
8110ffc4:	10c1000c 	andi	r3,r2,1024
8110ffc8:	1800451e 	bne	r3,zero,811100e0 <_fseeko_r+0x1ec>
8110ffcc:	00e04474 	movhi	r3,33041
8110ffd0:	18c5db04 	addi	r3,r3,5996
8110ffd4:	a0c0b726 	beq	r20,r3,811102b4 <_fseeko_r+0x3c0>
8110ffd8:	10820014 	ori	r2,r2,2048
8110ffdc:	8080030d 	sth	r2,12(r16)
8110ffe0:	800b883a 	mov	r5,r16
8110ffe4:	8809883a 	mov	r4,r17
8110ffe8:	11195580 	call	81119558 <_fflush_r>
8110ffec:	1027883a 	mov	r19,r2
8110fff0:	103fe01e 	bne	r2,zero,8110ff74 <__reset+0xfb0eff74>
8110fff4:	81400717 	ldw	r5,28(r16)
8110fff8:	900f883a 	mov	r7,r18
8110fffc:	a80d883a 	mov	r6,r21
81110000:	8809883a 	mov	r4,r17
81110004:	a03ee83a 	callr	r20
81110008:	00ffffc4 	movi	r3,-1
8111000c:	10ffd926 	beq	r2,r3,8110ff74 <__reset+0xfb0eff74>
81110010:	81400c17 	ldw	r5,48(r16)
81110014:	28000526 	beq	r5,zero,8111002c <_fseeko_r+0x138>
81110018:	80801004 	addi	r2,r16,64
8111001c:	28800226 	beq	r5,r2,81110028 <_fseeko_r+0x134>
81110020:	8809883a 	mov	r4,r17
81110024:	1119dec0 	call	81119dec <_free_r>
81110028:	80000c15 	stw	zero,48(r16)
8111002c:	8080030b 	ldhu	r2,12(r16)
81110030:	80c00417 	ldw	r3,16(r16)
81110034:	80000115 	stw	zero,4(r16)
81110038:	10bdf7cc 	andi	r2,r2,63455
8111003c:	80c00015 	stw	r3,0(r16)
81110040:	8080030d 	sth	r2,12(r16)
81110044:	01800204 	movi	r6,8
81110048:	000b883a 	mov	r5,zero
8111004c:	81001704 	addi	r4,r16,92
81110050:	1110ff80 	call	81110ff8 <memset>
81110054:	003fc806 	br	8110ff78 <__reset+0xfb0eff78>
81110058:	800b883a 	mov	r5,r16
8111005c:	8809883a 	mov	r4,r17
81110060:	11195580 	call	81119558 <_fflush_r>
81110064:	8080030b 	ldhu	r2,12(r16)
81110068:	10c4000c 	andi	r3,r2,4096
8111006c:	18008726 	beq	r3,zero,8111028c <_fseeko_r+0x398>
81110070:	84c01417 	ldw	r19,80(r16)
81110074:	10c0010c 	andi	r3,r2,4
81110078:	1800431e 	bne	r3,zero,81110188 <_fseeko_r+0x294>
8111007c:	1080020c 	andi	r2,r2,8
81110080:	10008026 	beq	r2,zero,81110284 <_fseeko_r+0x390>
81110084:	80c00017 	ldw	r3,0(r16)
81110088:	80800417 	ldw	r2,16(r16)
8111008c:	18000226 	beq	r3,zero,81110098 <_fseeko_r+0x1a4>
81110090:	1887c83a 	sub	r3,r3,r2
81110094:	98e7883a 	add	r19,r19,r3
81110098:	aceb883a 	add	r21,r21,r19
8111009c:	05c00044 	movi	r23,1
811100a0:	0025883a 	mov	r18,zero
811100a4:	003fc306 	br	8110ffb4 <__reset+0xfb0effb4>
811100a8:	11199540 	call	81119954 <__sinit>
811100ac:	8080030b 	ldhu	r2,12(r16)
811100b0:	00c04204 	movi	r3,264
811100b4:	1080420c 	andi	r2,r2,264
811100b8:	10ffa51e 	bne	r2,r3,8110ff50 <__reset+0xfb0eff50>
811100bc:	800b883a 	mov	r5,r16
811100c0:	8809883a 	mov	r4,r17
811100c4:	11195580 	call	81119558 <_fflush_r>
811100c8:	003fa106 	br	8110ff50 <__reset+0xfb0eff50>
811100cc:	8080030b 	ldhu	r2,12(r16)
811100d0:	00c10004 	movi	r3,1024
811100d4:	80c01315 	stw	r3,76(r16)
811100d8:	10c4b03a 	or	r2,r2,r3
811100dc:	8080030d 	sth	r2,12(r16)
811100e0:	9000311e 	bne	r18,zero,811101a8 <_fseeko_r+0x2b4>
811100e4:	a82d883a 	mov	r22,r21
811100e8:	b800371e 	bne	r23,zero,811101c8 <_fseeko_r+0x2d4>
811100ec:	8080030b 	ldhu	r2,12(r16)
811100f0:	1084000c 	andi	r2,r2,4096
811100f4:	10007f26 	beq	r2,zero,811102f4 <_fseeko_r+0x400>
811100f8:	80801417 	ldw	r2,80(r16)
811100fc:	81800117 	ldw	r6,4(r16)
81110100:	81400c17 	ldw	r5,48(r16)
81110104:	11a7c83a 	sub	r19,r2,r6
81110108:	28008226 	beq	r5,zero,81110314 <_fseeko_r+0x420>
8111010c:	81c00f17 	ldw	r7,60(r16)
81110110:	99e7c83a 	sub	r19,r19,r7
81110114:	81000e17 	ldw	r4,56(r16)
81110118:	80800417 	ldw	r2,16(r16)
8111011c:	99a7883a 	add	r19,r19,r6
81110120:	2087c83a 	sub	r3,r4,r2
81110124:	98e7c83a 	sub	r19,r19,r3
81110128:	38c7883a 	add	r3,r7,r3
8111012c:	b4c02b16 	blt	r22,r19,811101dc <_fseeko_r+0x2e8>
81110130:	98c9883a 	add	r4,r19,r3
81110134:	b100292e 	bgeu	r22,r4,811101dc <_fseeko_r+0x2e8>
81110138:	b4e7c83a 	sub	r19,r22,r19
8111013c:	14c5883a 	add	r2,r2,r19
81110140:	1ce7c83a 	sub	r19,r3,r19
81110144:	80800015 	stw	r2,0(r16)
81110148:	84c00115 	stw	r19,4(r16)
8111014c:	28000526 	beq	r5,zero,81110164 <_fseeko_r+0x270>
81110150:	80801004 	addi	r2,r16,64
81110154:	28800226 	beq	r5,r2,81110160 <_fseeko_r+0x26c>
81110158:	8809883a 	mov	r4,r17
8111015c:	1119dec0 	call	81119dec <_free_r>
81110160:	80000c15 	stw	zero,48(r16)
81110164:	8080030b 	ldhu	r2,12(r16)
81110168:	01800204 	movi	r6,8
8111016c:	000b883a 	mov	r5,zero
81110170:	10bff7cc 	andi	r2,r2,65503
81110174:	8080030d 	sth	r2,12(r16)
81110178:	81001704 	addi	r4,r16,92
8111017c:	1110ff80 	call	81110ff8 <memset>
81110180:	0027883a 	mov	r19,zero
81110184:	003f7c06 	br	8110ff78 <__reset+0xfb0eff78>
81110188:	80c00117 	ldw	r3,4(r16)
8111018c:	80800c17 	ldw	r2,48(r16)
81110190:	98e7c83a 	sub	r19,r19,r3
81110194:	10003b26 	beq	r2,zero,81110284 <_fseeko_r+0x390>
81110198:	80c00f17 	ldw	r3,60(r16)
8111019c:	80800417 	ldw	r2,16(r16)
811101a0:	98e7c83a 	sub	r19,r19,r3
811101a4:	003fbc06 	br	81110098 <__reset+0xfb0f0098>
811101a8:	8140038f 	ldh	r5,14(r16)
811101ac:	d80d883a 	mov	r6,sp
811101b0:	8809883a 	mov	r4,r17
811101b4:	111035c0 	call	8111035c <_fstat_r>
811101b8:	103f891e 	bne	r2,zero,8110ffe0 <__reset+0xfb0effe0>
811101bc:	dd800417 	ldw	r22,16(sp)
811101c0:	adad883a 	add	r22,r21,r22
811101c4:	b83fc926 	beq	r23,zero,811100ec <__reset+0xfb0f00ec>
811101c8:	81400c17 	ldw	r5,48(r16)
811101cc:	81800117 	ldw	r6,4(r16)
811101d0:	28005026 	beq	r5,zero,81110314 <_fseeko_r+0x420>
811101d4:	81c00f17 	ldw	r7,60(r16)
811101d8:	003fce06 	br	81110114 <__reset+0xfb0f0114>
811101dc:	84c01317 	ldw	r19,76(r16)
811101e0:	81400717 	ldw	r5,28(r16)
811101e4:	000f883a 	mov	r7,zero
811101e8:	04e7c83a 	sub	r19,zero,r19
811101ec:	9da6703a 	and	r19,r19,r22
811101f0:	980d883a 	mov	r6,r19
811101f4:	8809883a 	mov	r4,r17
811101f8:	a03ee83a 	callr	r20
811101fc:	00ffffc4 	movi	r3,-1
81110200:	10ff7726 	beq	r2,r3,8110ffe0 <__reset+0xfb0effe0>
81110204:	80800417 	ldw	r2,16(r16)
81110208:	81400c17 	ldw	r5,48(r16)
8111020c:	80000115 	stw	zero,4(r16)
81110210:	80800015 	stw	r2,0(r16)
81110214:	28000526 	beq	r5,zero,8111022c <_fseeko_r+0x338>
81110218:	80801004 	addi	r2,r16,64
8111021c:	28800226 	beq	r5,r2,81110228 <_fseeko_r+0x334>
81110220:	8809883a 	mov	r4,r17
81110224:	1119dec0 	call	81119dec <_free_r>
81110228:	80000c15 	stw	zero,48(r16)
8111022c:	8080030b 	ldhu	r2,12(r16)
81110230:	b4e7c83a 	sub	r19,r22,r19
81110234:	10bff7cc 	andi	r2,r2,65503
81110238:	8080030d 	sth	r2,12(r16)
8111023c:	98000b26 	beq	r19,zero,8111026c <_fseeko_r+0x378>
81110240:	800b883a 	mov	r5,r16
81110244:	8809883a 	mov	r4,r17
81110248:	11112fc0 	call	811112fc <__srefill_r>
8111024c:	103f641e 	bne	r2,zero,8110ffe0 <__reset+0xfb0effe0>
81110250:	80800117 	ldw	r2,4(r16)
81110254:	14ff6236 	bltu	r2,r19,8110ffe0 <__reset+0xfb0effe0>
81110258:	80c00017 	ldw	r3,0(r16)
8111025c:	14c5c83a 	sub	r2,r2,r19
81110260:	80800115 	stw	r2,4(r16)
81110264:	1ce7883a 	add	r19,r3,r19
81110268:	84c00015 	stw	r19,0(r16)
8111026c:	01800204 	movi	r6,8
81110270:	000b883a 	mov	r5,zero
81110274:	81001704 	addi	r4,r16,92
81110278:	1110ff80 	call	81110ff8 <memset>
8111027c:	0027883a 	mov	r19,zero
81110280:	003f3d06 	br	8110ff78 <__reset+0xfb0eff78>
81110284:	80800417 	ldw	r2,16(r16)
81110288:	003f8306 	br	81110098 <__reset+0xfb0f0098>
8111028c:	81400717 	ldw	r5,28(r16)
81110290:	900f883a 	mov	r7,r18
81110294:	000d883a 	mov	r6,zero
81110298:	8809883a 	mov	r4,r17
8111029c:	a03ee83a 	callr	r20
811102a0:	1027883a 	mov	r19,r2
811102a4:	00bfffc4 	movi	r2,-1
811102a8:	98bf3226 	beq	r19,r2,8110ff74 <__reset+0xfb0eff74>
811102ac:	8080030b 	ldhu	r2,12(r16)
811102b0:	003f7006 	br	81110074 <__reset+0xfb0f0074>
811102b4:	8140038f 	ldh	r5,14(r16)
811102b8:	283f4716 	blt	r5,zero,8110ffd8 <__reset+0xfb0effd8>
811102bc:	d80d883a 	mov	r6,sp
811102c0:	8809883a 	mov	r4,r17
811102c4:	111035c0 	call	8111035c <_fstat_r>
811102c8:	1000041e 	bne	r2,zero,811102dc <_fseeko_r+0x3e8>
811102cc:	d8800117 	ldw	r2,4(sp)
811102d0:	00e00014 	movui	r3,32768
811102d4:	10bc000c 	andi	r2,r2,61440
811102d8:	10ff7c26 	beq	r2,r3,811100cc <__reset+0xfb0f00cc>
811102dc:	8080030b 	ldhu	r2,12(r16)
811102e0:	003f3d06 	br	8110ffd8 <__reset+0xfb0effd8>
811102e4:	800b883a 	mov	r5,r16
811102e8:	8809883a 	mov	r4,r17
811102ec:	11104d00 	call	811104d0 <__smakebuf_r>
811102f0:	003f3106 	br	8110ffb8 <__reset+0xfb0effb8>
811102f4:	81400717 	ldw	r5,28(r16)
811102f8:	01c00044 	movi	r7,1
811102fc:	000d883a 	mov	r6,zero
81110300:	8809883a 	mov	r4,r17
81110304:	a03ee83a 	callr	r20
81110308:	00ffffc4 	movi	r3,-1
8111030c:	10ff7b1e 	bne	r2,r3,811100fc <__reset+0xfb0f00fc>
81110310:	003f3306 	br	8110ffe0 <__reset+0xfb0effe0>
81110314:	80c00017 	ldw	r3,0(r16)
81110318:	80800417 	ldw	r2,16(r16)
8111031c:	000b883a 	mov	r5,zero
81110320:	1887c83a 	sub	r3,r3,r2
81110324:	98e7c83a 	sub	r19,r19,r3
81110328:	30c7883a 	add	r3,r6,r3
8111032c:	003f7f06 	br	8111012c <__reset+0xfb0f012c>
81110330:	00800744 	movi	r2,29
81110334:	88800015 	stw	r2,0(r17)
81110338:	04ffffc4 	movi	r19,-1
8111033c:	003f0e06 	br	8110ff78 <__reset+0xfb0eff78>

81110340 <fseeko>:
81110340:	00a04534 	movhi	r2,33044
81110344:	10ba2704 	addi	r2,r2,-5988
81110348:	300f883a 	mov	r7,r6
8111034c:	280d883a 	mov	r6,r5
81110350:	200b883a 	mov	r5,r4
81110354:	11000017 	ldw	r4,0(r2)
81110358:	110fef41 	jmpi	8110fef4 <_fseeko_r>

8111035c <_fstat_r>:
8111035c:	defffd04 	addi	sp,sp,-12
81110360:	de00012e 	bgeu	sp,et,81110368 <_fstat_r+0xc>
81110364:	003b68fa 	trap	3
81110368:	2805883a 	mov	r2,r5
8111036c:	dc000015 	stw	r16,0(sp)
81110370:	04204534 	movhi	r16,33044
81110374:	dc400115 	stw	r17,4(sp)
81110378:	843a8004 	addi	r16,r16,-5632
8111037c:	2023883a 	mov	r17,r4
81110380:	300b883a 	mov	r5,r6
81110384:	1009883a 	mov	r4,r2
81110388:	dfc00215 	stw	ra,8(sp)
8111038c:	80000015 	stw	zero,0(r16)
81110390:	112578c0 	call	8112578c <fstat>
81110394:	00ffffc4 	movi	r3,-1
81110398:	10c00526 	beq	r2,r3,811103b0 <_fstat_r+0x54>
8111039c:	dfc00217 	ldw	ra,8(sp)
811103a0:	dc400117 	ldw	r17,4(sp)
811103a4:	dc000017 	ldw	r16,0(sp)
811103a8:	dec00304 	addi	sp,sp,12
811103ac:	f800283a 	ret
811103b0:	80c00017 	ldw	r3,0(r16)
811103b4:	183ff926 	beq	r3,zero,8111039c <__reset+0xfb0f039c>
811103b8:	88c00015 	stw	r3,0(r17)
811103bc:	003ff706 	br	8111039c <__reset+0xfb0f039c>

811103c0 <_fwrite_r>:
811103c0:	defff504 	addi	sp,sp,-44
811103c4:	de00012e 	bgeu	sp,et,811103cc <_fwrite_r+0xc>
811103c8:	003b68fa 	trap	3
811103cc:	dc800815 	stw	r18,32(sp)
811103d0:	39a5383a 	mul	r18,r7,r6
811103d4:	d8800304 	addi	r2,sp,12
811103d8:	d8800015 	stw	r2,0(sp)
811103dc:	00800044 	movi	r2,1
811103e0:	dcc00915 	stw	r19,36(sp)
811103e4:	dc400715 	stw	r17,28(sp)
811103e8:	dc000615 	stw	r16,24(sp)
811103ec:	d9400315 	stw	r5,12(sp)
811103f0:	dfc00a15 	stw	ra,40(sp)
811103f4:	dc800415 	stw	r18,16(sp)
811103f8:	dc800215 	stw	r18,8(sp)
811103fc:	d8800115 	stw	r2,4(sp)
81110400:	3027883a 	mov	r19,r6
81110404:	3821883a 	mov	r16,r7
81110408:	2023883a 	mov	r17,r4
8111040c:	d9400b17 	ldw	r5,44(sp)
81110410:	20000226 	beq	r4,zero,8111041c <_fwrite_r+0x5c>
81110414:	20800e17 	ldw	r2,56(r4)
81110418:	10001a26 	beq	r2,zero,81110484 <_fwrite_r+0xc4>
8111041c:	2880030b 	ldhu	r2,12(r5)
81110420:	10c8000c 	andi	r3,r2,8192
81110424:	1800061e 	bne	r3,zero,81110440 <_fwrite_r+0x80>
81110428:	29001917 	ldw	r4,100(r5)
8111042c:	00f7ffc4 	movi	r3,-8193
81110430:	10880014 	ori	r2,r2,8192
81110434:	20c6703a 	and	r3,r4,r3
81110438:	2880030d 	sth	r2,12(r5)
8111043c:	28c01915 	stw	r3,100(r5)
81110440:	d80d883a 	mov	r6,sp
81110444:	8809883a 	mov	r4,r17
81110448:	111a1040 	call	8111a104 <__sfvwrite_r>
8111044c:	10000b26 	beq	r2,zero,8111047c <_fwrite_r+0xbc>
81110450:	d9000217 	ldw	r4,8(sp)
81110454:	980b883a 	mov	r5,r19
81110458:	9109c83a 	sub	r4,r18,r4
8111045c:	11232d40 	call	811232d4 <__udivsi3>
81110460:	dfc00a17 	ldw	ra,40(sp)
81110464:	dcc00917 	ldw	r19,36(sp)
81110468:	dc800817 	ldw	r18,32(sp)
8111046c:	dc400717 	ldw	r17,28(sp)
81110470:	dc000617 	ldw	r16,24(sp)
81110474:	dec00b04 	addi	sp,sp,44
81110478:	f800283a 	ret
8111047c:	8005883a 	mov	r2,r16
81110480:	003ff706 	br	81110460 <__reset+0xfb0f0460>
81110484:	d9400515 	stw	r5,20(sp)
81110488:	11199540 	call	81119954 <__sinit>
8111048c:	d9400517 	ldw	r5,20(sp)
81110490:	003fe206 	br	8111041c <__reset+0xfb0f041c>

81110494 <fwrite>:
81110494:	defffe04 	addi	sp,sp,-8
81110498:	00a04534 	movhi	r2,33044
8111049c:	de00012e 	bgeu	sp,et,811104a4 <fwrite+0x10>
811104a0:	003b68fa 	trap	3
811104a4:	10ba2704 	addi	r2,r2,-5988
811104a8:	d9c00015 	stw	r7,0(sp)
811104ac:	300f883a 	mov	r7,r6
811104b0:	280d883a 	mov	r6,r5
811104b4:	200b883a 	mov	r5,r4
811104b8:	11000017 	ldw	r4,0(r2)
811104bc:	dfc00115 	stw	ra,4(sp)
811104c0:	11103c00 	call	811103c0 <_fwrite_r>
811104c4:	dfc00117 	ldw	ra,4(sp)
811104c8:	dec00204 	addi	sp,sp,8
811104cc:	f800283a 	ret

811104d0 <__smakebuf_r>:
811104d0:	2880030b 	ldhu	r2,12(r5)
811104d4:	10c0008c 	andi	r3,r2,2
811104d8:	1800431e 	bne	r3,zero,811105e8 <__smakebuf_r+0x118>
811104dc:	deffec04 	addi	sp,sp,-80
811104e0:	de00012e 	bgeu	sp,et,811104e8 <__smakebuf_r+0x18>
811104e4:	003b68fa 	trap	3
811104e8:	dc000f15 	stw	r16,60(sp)
811104ec:	2821883a 	mov	r16,r5
811104f0:	2940038f 	ldh	r5,14(r5)
811104f4:	dc401015 	stw	r17,64(sp)
811104f8:	dfc01315 	stw	ra,76(sp)
811104fc:	dcc01215 	stw	r19,72(sp)
81110500:	dc801115 	stw	r18,68(sp)
81110504:	2023883a 	mov	r17,r4
81110508:	28001c16 	blt	r5,zero,8111057c <__smakebuf_r+0xac>
8111050c:	d80d883a 	mov	r6,sp
81110510:	111035c0 	call	8111035c <_fstat_r>
81110514:	10001816 	blt	r2,zero,81110578 <__smakebuf_r+0xa8>
81110518:	d8800117 	ldw	r2,4(sp)
8111051c:	00e00014 	movui	r3,32768
81110520:	10bc000c 	andi	r2,r2,61440
81110524:	14c80020 	cmpeqi	r19,r2,8192
81110528:	10c03726 	beq	r2,r3,81110608 <__smakebuf_r+0x138>
8111052c:	80c0030b 	ldhu	r3,12(r16)
81110530:	18c20014 	ori	r3,r3,2048
81110534:	80c0030d 	sth	r3,12(r16)
81110538:	00c80004 	movi	r3,8192
8111053c:	10c0521e 	bne	r2,r3,81110688 <__smakebuf_r+0x1b8>
81110540:	8140038f 	ldh	r5,14(r16)
81110544:	8809883a 	mov	r4,r17
81110548:	111a7600 	call	8111a760 <_isatty_r>
8111054c:	10004c26 	beq	r2,zero,81110680 <__smakebuf_r+0x1b0>
81110550:	8080030b 	ldhu	r2,12(r16)
81110554:	80c010c4 	addi	r3,r16,67
81110558:	80c00015 	stw	r3,0(r16)
8111055c:	10800054 	ori	r2,r2,1
81110560:	8080030d 	sth	r2,12(r16)
81110564:	00800044 	movi	r2,1
81110568:	80c00415 	stw	r3,16(r16)
8111056c:	80800515 	stw	r2,20(r16)
81110570:	04810004 	movi	r18,1024
81110574:	00000706 	br	81110594 <__smakebuf_r+0xc4>
81110578:	8080030b 	ldhu	r2,12(r16)
8111057c:	10c0200c 	andi	r3,r2,128
81110580:	18001f1e 	bne	r3,zero,81110600 <__smakebuf_r+0x130>
81110584:	04810004 	movi	r18,1024
81110588:	10820014 	ori	r2,r2,2048
8111058c:	8080030d 	sth	r2,12(r16)
81110590:	0027883a 	mov	r19,zero
81110594:	900b883a 	mov	r5,r18
81110598:	8809883a 	mov	r4,r17
8111059c:	11106940 	call	81110694 <_malloc_r>
811105a0:	10002c26 	beq	r2,zero,81110654 <__smakebuf_r+0x184>
811105a4:	80c0030b 	ldhu	r3,12(r16)
811105a8:	012044b4 	movhi	r4,33042
811105ac:	21257d04 	addi	r4,r4,-27148
811105b0:	89000f15 	stw	r4,60(r17)
811105b4:	18c02014 	ori	r3,r3,128
811105b8:	80c0030d 	sth	r3,12(r16)
811105bc:	80800015 	stw	r2,0(r16)
811105c0:	80800415 	stw	r2,16(r16)
811105c4:	84800515 	stw	r18,20(r16)
811105c8:	98001a1e 	bne	r19,zero,81110634 <__smakebuf_r+0x164>
811105cc:	dfc01317 	ldw	ra,76(sp)
811105d0:	dcc01217 	ldw	r19,72(sp)
811105d4:	dc801117 	ldw	r18,68(sp)
811105d8:	dc401017 	ldw	r17,64(sp)
811105dc:	dc000f17 	ldw	r16,60(sp)
811105e0:	dec01404 	addi	sp,sp,80
811105e4:	f800283a 	ret
811105e8:	288010c4 	addi	r2,r5,67
811105ec:	28800015 	stw	r2,0(r5)
811105f0:	28800415 	stw	r2,16(r5)
811105f4:	00800044 	movi	r2,1
811105f8:	28800515 	stw	r2,20(r5)
811105fc:	f800283a 	ret
81110600:	04801004 	movi	r18,64
81110604:	003fe006 	br	81110588 <__reset+0xfb0f0588>
81110608:	81000a17 	ldw	r4,40(r16)
8111060c:	00e04474 	movhi	r3,33041
81110610:	18c5db04 	addi	r3,r3,5996
81110614:	20ffc51e 	bne	r4,r3,8111052c <__reset+0xfb0f052c>
81110618:	8080030b 	ldhu	r2,12(r16)
8111061c:	04810004 	movi	r18,1024
81110620:	84801315 	stw	r18,76(r16)
81110624:	1484b03a 	or	r2,r2,r18
81110628:	8080030d 	sth	r2,12(r16)
8111062c:	0027883a 	mov	r19,zero
81110630:	003fd806 	br	81110594 <__reset+0xfb0f0594>
81110634:	8140038f 	ldh	r5,14(r16)
81110638:	8809883a 	mov	r4,r17
8111063c:	111a7600 	call	8111a760 <_isatty_r>
81110640:	103fe226 	beq	r2,zero,811105cc <__reset+0xfb0f05cc>
81110644:	8080030b 	ldhu	r2,12(r16)
81110648:	10800054 	ori	r2,r2,1
8111064c:	8080030d 	sth	r2,12(r16)
81110650:	003fde06 	br	811105cc <__reset+0xfb0f05cc>
81110654:	8080030b 	ldhu	r2,12(r16)
81110658:	10c0800c 	andi	r3,r2,512
8111065c:	183fdb1e 	bne	r3,zero,811105cc <__reset+0xfb0f05cc>
81110660:	10800094 	ori	r2,r2,2
81110664:	80c010c4 	addi	r3,r16,67
81110668:	8080030d 	sth	r2,12(r16)
8111066c:	00800044 	movi	r2,1
81110670:	80c00015 	stw	r3,0(r16)
81110674:	80c00415 	stw	r3,16(r16)
81110678:	80800515 	stw	r2,20(r16)
8111067c:	003fd306 	br	811105cc <__reset+0xfb0f05cc>
81110680:	04810004 	movi	r18,1024
81110684:	003fc306 	br	81110594 <__reset+0xfb0f0594>
81110688:	0027883a 	mov	r19,zero
8111068c:	04810004 	movi	r18,1024
81110690:	003fc006 	br	81110594 <__reset+0xfb0f0594>

81110694 <_malloc_r>:
81110694:	defff504 	addi	sp,sp,-44
81110698:	de00012e 	bgeu	sp,et,811106a0 <_malloc_r+0xc>
8111069c:	003b68fa 	trap	3
811106a0:	288002c4 	addi	r2,r5,11
811106a4:	dc800315 	stw	r18,12(sp)
811106a8:	dfc00a15 	stw	ra,40(sp)
811106ac:	df000915 	stw	fp,36(sp)
811106b0:	ddc00815 	stw	r23,32(sp)
811106b4:	dd800715 	stw	r22,28(sp)
811106b8:	dd400615 	stw	r21,24(sp)
811106bc:	dd000515 	stw	r20,20(sp)
811106c0:	dcc00415 	stw	r19,16(sp)
811106c4:	dc400215 	stw	r17,8(sp)
811106c8:	dc000115 	stw	r16,4(sp)
811106cc:	00c00584 	movi	r3,22
811106d0:	2025883a 	mov	r18,r4
811106d4:	18807f2e 	bgeu	r3,r2,811108d4 <_malloc_r+0x240>
811106d8:	047ffe04 	movi	r17,-8
811106dc:	1462703a 	and	r17,r2,r17
811106e0:	8800a316 	blt	r17,zero,81110970 <_malloc_r+0x2dc>
811106e4:	8940a236 	bltu	r17,r5,81110970 <_malloc_r+0x2dc>
811106e8:	11267240 	call	81126724 <__malloc_lock>
811106ec:	00807dc4 	movi	r2,503
811106f0:	1441e92e 	bgeu	r2,r17,81110e98 <_malloc_r+0x804>
811106f4:	8804d27a 	srli	r2,r17,9
811106f8:	1000a126 	beq	r2,zero,81110980 <_malloc_r+0x2ec>
811106fc:	00c00104 	movi	r3,4
81110700:	18811e36 	bltu	r3,r2,81110b7c <_malloc_r+0x4e8>
81110704:	8804d1ba 	srli	r2,r17,6
81110708:	12000e44 	addi	r8,r2,57
8111070c:	11c00e04 	addi	r7,r2,56
81110710:	4209883a 	add	r4,r8,r8
81110714:	04e04534 	movhi	r19,33044
81110718:	2109883a 	add	r4,r4,r4
8111071c:	9cf40c04 	addi	r19,r19,-12240
81110720:	2109883a 	add	r4,r4,r4
81110724:	9909883a 	add	r4,r19,r4
81110728:	24000117 	ldw	r16,4(r4)
8111072c:	213ffe04 	addi	r4,r4,-8
81110730:	24009726 	beq	r4,r16,81110990 <_malloc_r+0x2fc>
81110734:	80800117 	ldw	r2,4(r16)
81110738:	01bfff04 	movi	r6,-4
8111073c:	014003c4 	movi	r5,15
81110740:	1184703a 	and	r2,r2,r6
81110744:	1447c83a 	sub	r3,r2,r17
81110748:	28c00716 	blt	r5,r3,81110768 <_malloc_r+0xd4>
8111074c:	1800920e 	bge	r3,zero,81110998 <_malloc_r+0x304>
81110750:	84000317 	ldw	r16,12(r16)
81110754:	24008e26 	beq	r4,r16,81110990 <_malloc_r+0x2fc>
81110758:	80800117 	ldw	r2,4(r16)
8111075c:	1184703a 	and	r2,r2,r6
81110760:	1447c83a 	sub	r3,r2,r17
81110764:	28fff90e 	bge	r5,r3,8111074c <__reset+0xfb0f074c>
81110768:	3809883a 	mov	r4,r7
8111076c:	01a04534 	movhi	r6,33044
81110770:	9c000417 	ldw	r16,16(r19)
81110774:	31b40c04 	addi	r6,r6,-12240
81110778:	32000204 	addi	r8,r6,8
8111077c:	82013426 	beq	r16,r8,81110c50 <_malloc_r+0x5bc>
81110780:	80c00117 	ldw	r3,4(r16)
81110784:	00bfff04 	movi	r2,-4
81110788:	188e703a 	and	r7,r3,r2
8111078c:	3c45c83a 	sub	r2,r7,r17
81110790:	00c003c4 	movi	r3,15
81110794:	18811f16 	blt	r3,r2,81110c14 <_malloc_r+0x580>
81110798:	32000515 	stw	r8,20(r6)
8111079c:	32000415 	stw	r8,16(r6)
811107a0:	10007f0e 	bge	r2,zero,811109a0 <_malloc_r+0x30c>
811107a4:	00807fc4 	movi	r2,511
811107a8:	11c0fd36 	bltu	r2,r7,81110ba0 <_malloc_r+0x50c>
811107ac:	3806d0fa 	srli	r3,r7,3
811107b0:	01c00044 	movi	r7,1
811107b4:	30800117 	ldw	r2,4(r6)
811107b8:	19400044 	addi	r5,r3,1
811107bc:	294b883a 	add	r5,r5,r5
811107c0:	1807d0ba 	srai	r3,r3,2
811107c4:	294b883a 	add	r5,r5,r5
811107c8:	294b883a 	add	r5,r5,r5
811107cc:	298b883a 	add	r5,r5,r6
811107d0:	38c6983a 	sll	r3,r7,r3
811107d4:	29c00017 	ldw	r7,0(r5)
811107d8:	2a7ffe04 	addi	r9,r5,-8
811107dc:	1886b03a 	or	r3,r3,r2
811107e0:	82400315 	stw	r9,12(r16)
811107e4:	81c00215 	stw	r7,8(r16)
811107e8:	30c00115 	stw	r3,4(r6)
811107ec:	2c000015 	stw	r16,0(r5)
811107f0:	3c000315 	stw	r16,12(r7)
811107f4:	2005d0ba 	srai	r2,r4,2
811107f8:	01400044 	movi	r5,1
811107fc:	288a983a 	sll	r5,r5,r2
81110800:	19406f36 	bltu	r3,r5,811109c0 <_malloc_r+0x32c>
81110804:	28c4703a 	and	r2,r5,r3
81110808:	10000a1e 	bne	r2,zero,81110834 <_malloc_r+0x1a0>
8111080c:	00bfff04 	movi	r2,-4
81110810:	294b883a 	add	r5,r5,r5
81110814:	2088703a 	and	r4,r4,r2
81110818:	28c4703a 	and	r2,r5,r3
8111081c:	21000104 	addi	r4,r4,4
81110820:	1000041e 	bne	r2,zero,81110834 <_malloc_r+0x1a0>
81110824:	294b883a 	add	r5,r5,r5
81110828:	28c4703a 	and	r2,r5,r3
8111082c:	21000104 	addi	r4,r4,4
81110830:	103ffc26 	beq	r2,zero,81110824 <__reset+0xfb0f0824>
81110834:	02bfff04 	movi	r10,-4
81110838:	024003c4 	movi	r9,15
8111083c:	21800044 	addi	r6,r4,1
81110840:	318d883a 	add	r6,r6,r6
81110844:	318d883a 	add	r6,r6,r6
81110848:	318d883a 	add	r6,r6,r6
8111084c:	998d883a 	add	r6,r19,r6
81110850:	333ffe04 	addi	r12,r6,-8
81110854:	2017883a 	mov	r11,r4
81110858:	31800104 	addi	r6,r6,4
8111085c:	34000017 	ldw	r16,0(r6)
81110860:	31fffd04 	addi	r7,r6,-12
81110864:	81c0041e 	bne	r16,r7,81110878 <_malloc_r+0x1e4>
81110868:	0000fb06 	br	81110c58 <_malloc_r+0x5c4>
8111086c:	1801030e 	bge	r3,zero,81110c7c <_malloc_r+0x5e8>
81110870:	84000317 	ldw	r16,12(r16)
81110874:	81c0f826 	beq	r16,r7,81110c58 <_malloc_r+0x5c4>
81110878:	80800117 	ldw	r2,4(r16)
8111087c:	1284703a 	and	r2,r2,r10
81110880:	1447c83a 	sub	r3,r2,r17
81110884:	48fff90e 	bge	r9,r3,8111086c <__reset+0xfb0f086c>
81110888:	80800317 	ldw	r2,12(r16)
8111088c:	81000217 	ldw	r4,8(r16)
81110890:	89400054 	ori	r5,r17,1
81110894:	81400115 	stw	r5,4(r16)
81110898:	20800315 	stw	r2,12(r4)
8111089c:	11000215 	stw	r4,8(r2)
811108a0:	8463883a 	add	r17,r16,r17
811108a4:	9c400515 	stw	r17,20(r19)
811108a8:	9c400415 	stw	r17,16(r19)
811108ac:	18800054 	ori	r2,r3,1
811108b0:	88800115 	stw	r2,4(r17)
811108b4:	8a000315 	stw	r8,12(r17)
811108b8:	8a000215 	stw	r8,8(r17)
811108bc:	88e3883a 	add	r17,r17,r3
811108c0:	88c00015 	stw	r3,0(r17)
811108c4:	9009883a 	mov	r4,r18
811108c8:	112684c0 	call	8112684c <__malloc_unlock>
811108cc:	80800204 	addi	r2,r16,8
811108d0:	00001b06 	br	81110940 <_malloc_r+0x2ac>
811108d4:	04400404 	movi	r17,16
811108d8:	89402536 	bltu	r17,r5,81110970 <_malloc_r+0x2dc>
811108dc:	11267240 	call	81126724 <__malloc_lock>
811108e0:	00800184 	movi	r2,6
811108e4:	01000084 	movi	r4,2
811108e8:	04e04534 	movhi	r19,33044
811108ec:	1085883a 	add	r2,r2,r2
811108f0:	9cf40c04 	addi	r19,r19,-12240
811108f4:	1085883a 	add	r2,r2,r2
811108f8:	9885883a 	add	r2,r19,r2
811108fc:	14000117 	ldw	r16,4(r2)
81110900:	10fffe04 	addi	r3,r2,-8
81110904:	80c0d926 	beq	r16,r3,81110c6c <_malloc_r+0x5d8>
81110908:	80c00117 	ldw	r3,4(r16)
8111090c:	81000317 	ldw	r4,12(r16)
81110910:	00bfff04 	movi	r2,-4
81110914:	1884703a 	and	r2,r3,r2
81110918:	81400217 	ldw	r5,8(r16)
8111091c:	8085883a 	add	r2,r16,r2
81110920:	10c00117 	ldw	r3,4(r2)
81110924:	29000315 	stw	r4,12(r5)
81110928:	21400215 	stw	r5,8(r4)
8111092c:	18c00054 	ori	r3,r3,1
81110930:	10c00115 	stw	r3,4(r2)
81110934:	9009883a 	mov	r4,r18
81110938:	112684c0 	call	8112684c <__malloc_unlock>
8111093c:	80800204 	addi	r2,r16,8
81110940:	dfc00a17 	ldw	ra,40(sp)
81110944:	df000917 	ldw	fp,36(sp)
81110948:	ddc00817 	ldw	r23,32(sp)
8111094c:	dd800717 	ldw	r22,28(sp)
81110950:	dd400617 	ldw	r21,24(sp)
81110954:	dd000517 	ldw	r20,20(sp)
81110958:	dcc00417 	ldw	r19,16(sp)
8111095c:	dc800317 	ldw	r18,12(sp)
81110960:	dc400217 	ldw	r17,8(sp)
81110964:	dc000117 	ldw	r16,4(sp)
81110968:	dec00b04 	addi	sp,sp,44
8111096c:	f800283a 	ret
81110970:	00800304 	movi	r2,12
81110974:	90800015 	stw	r2,0(r18)
81110978:	0005883a 	mov	r2,zero
8111097c:	003ff006 	br	81110940 <__reset+0xfb0f0940>
81110980:	01002004 	movi	r4,128
81110984:	02001004 	movi	r8,64
81110988:	01c00fc4 	movi	r7,63
8111098c:	003f6106 	br	81110714 <__reset+0xfb0f0714>
81110990:	4009883a 	mov	r4,r8
81110994:	003f7506 	br	8111076c <__reset+0xfb0f076c>
81110998:	81000317 	ldw	r4,12(r16)
8111099c:	003fde06 	br	81110918 <__reset+0xfb0f0918>
811109a0:	81c5883a 	add	r2,r16,r7
811109a4:	11400117 	ldw	r5,4(r2)
811109a8:	9009883a 	mov	r4,r18
811109ac:	29400054 	ori	r5,r5,1
811109b0:	11400115 	stw	r5,4(r2)
811109b4:	112684c0 	call	8112684c <__malloc_unlock>
811109b8:	80800204 	addi	r2,r16,8
811109bc:	003fe006 	br	81110940 <__reset+0xfb0f0940>
811109c0:	9c000217 	ldw	r16,8(r19)
811109c4:	00bfff04 	movi	r2,-4
811109c8:	85800117 	ldw	r22,4(r16)
811109cc:	b0ac703a 	and	r22,r22,r2
811109d0:	b4400336 	bltu	r22,r17,811109e0 <_malloc_r+0x34c>
811109d4:	b445c83a 	sub	r2,r22,r17
811109d8:	00c003c4 	movi	r3,15
811109dc:	18805d16 	blt	r3,r2,81110b54 <_malloc_r+0x4c0>
811109e0:	05e04534 	movhi	r23,33044
811109e4:	00a04534 	movhi	r2,33044
811109e8:	10ba8304 	addi	r2,r2,-5620
811109ec:	bdfa2804 	addi	r23,r23,-5984
811109f0:	15400017 	ldw	r21,0(r2)
811109f4:	b8c00017 	ldw	r3,0(r23)
811109f8:	00bfffc4 	movi	r2,-1
811109fc:	858d883a 	add	r6,r16,r22
81110a00:	8d6b883a 	add	r21,r17,r21
81110a04:	1880ea26 	beq	r3,r2,81110db0 <_malloc_r+0x71c>
81110a08:	ad4403c4 	addi	r21,r21,4111
81110a0c:	00bc0004 	movi	r2,-4096
81110a10:	a8aa703a 	and	r21,r21,r2
81110a14:	a80b883a 	mov	r5,r21
81110a18:	9009883a 	mov	r4,r18
81110a1c:	d9800015 	stw	r6,0(sp)
81110a20:	11114d80 	call	811114d8 <_sbrk_r>
81110a24:	1029883a 	mov	r20,r2
81110a28:	00bfffc4 	movi	r2,-1
81110a2c:	d9800017 	ldw	r6,0(sp)
81110a30:	a080e826 	beq	r20,r2,81110dd4 <_malloc_r+0x740>
81110a34:	a180a636 	bltu	r20,r6,81110cd0 <_malloc_r+0x63c>
81110a38:	07204534 	movhi	fp,33044
81110a3c:	e73ae204 	addi	fp,fp,-5240
81110a40:	e0800017 	ldw	r2,0(fp)
81110a44:	a887883a 	add	r3,r21,r2
81110a48:	e0c00015 	stw	r3,0(fp)
81110a4c:	3500e626 	beq	r6,r20,81110de8 <_malloc_r+0x754>
81110a50:	b9000017 	ldw	r4,0(r23)
81110a54:	00bfffc4 	movi	r2,-1
81110a58:	2080ee26 	beq	r4,r2,81110e14 <_malloc_r+0x780>
81110a5c:	a185c83a 	sub	r2,r20,r6
81110a60:	10c5883a 	add	r2,r2,r3
81110a64:	e0800015 	stw	r2,0(fp)
81110a68:	a0c001cc 	andi	r3,r20,7
81110a6c:	1800bc26 	beq	r3,zero,81110d60 <_malloc_r+0x6cc>
81110a70:	a0e9c83a 	sub	r20,r20,r3
81110a74:	00840204 	movi	r2,4104
81110a78:	a5000204 	addi	r20,r20,8
81110a7c:	10c7c83a 	sub	r3,r2,r3
81110a80:	a545883a 	add	r2,r20,r21
81110a84:	1083ffcc 	andi	r2,r2,4095
81110a88:	18abc83a 	sub	r21,r3,r2
81110a8c:	a80b883a 	mov	r5,r21
81110a90:	9009883a 	mov	r4,r18
81110a94:	11114d80 	call	811114d8 <_sbrk_r>
81110a98:	00ffffc4 	movi	r3,-1
81110a9c:	10c0e126 	beq	r2,r3,81110e24 <_malloc_r+0x790>
81110aa0:	1505c83a 	sub	r2,r2,r20
81110aa4:	1545883a 	add	r2,r2,r21
81110aa8:	10800054 	ori	r2,r2,1
81110aac:	e0c00017 	ldw	r3,0(fp)
81110ab0:	9d000215 	stw	r20,8(r19)
81110ab4:	a0800115 	stw	r2,4(r20)
81110ab8:	a8c7883a 	add	r3,r21,r3
81110abc:	e0c00015 	stw	r3,0(fp)
81110ac0:	84c00e26 	beq	r16,r19,81110afc <_malloc_r+0x468>
81110ac4:	018003c4 	movi	r6,15
81110ac8:	3580a72e 	bgeu	r6,r22,81110d68 <_malloc_r+0x6d4>
81110acc:	81400117 	ldw	r5,4(r16)
81110ad0:	013ffe04 	movi	r4,-8
81110ad4:	b0bffd04 	addi	r2,r22,-12
81110ad8:	1104703a 	and	r2,r2,r4
81110adc:	2900004c 	andi	r4,r5,1
81110ae0:	2088b03a 	or	r4,r4,r2
81110ae4:	81000115 	stw	r4,4(r16)
81110ae8:	01400144 	movi	r5,5
81110aec:	8089883a 	add	r4,r16,r2
81110af0:	21400115 	stw	r5,4(r4)
81110af4:	21400215 	stw	r5,8(r4)
81110af8:	3080cd36 	bltu	r6,r2,81110e30 <_malloc_r+0x79c>
81110afc:	00a04534 	movhi	r2,33044
81110b00:	10ba8204 	addi	r2,r2,-5624
81110b04:	11000017 	ldw	r4,0(r2)
81110b08:	20c0012e 	bgeu	r4,r3,81110b10 <_malloc_r+0x47c>
81110b0c:	10c00015 	stw	r3,0(r2)
81110b10:	00a04534 	movhi	r2,33044
81110b14:	10ba8104 	addi	r2,r2,-5628
81110b18:	11000017 	ldw	r4,0(r2)
81110b1c:	9c000217 	ldw	r16,8(r19)
81110b20:	20c0012e 	bgeu	r4,r3,81110b28 <_malloc_r+0x494>
81110b24:	10c00015 	stw	r3,0(r2)
81110b28:	80c00117 	ldw	r3,4(r16)
81110b2c:	00bfff04 	movi	r2,-4
81110b30:	1886703a 	and	r3,r3,r2
81110b34:	1c45c83a 	sub	r2,r3,r17
81110b38:	1c400236 	bltu	r3,r17,81110b44 <_malloc_r+0x4b0>
81110b3c:	00c003c4 	movi	r3,15
81110b40:	18800416 	blt	r3,r2,81110b54 <_malloc_r+0x4c0>
81110b44:	9009883a 	mov	r4,r18
81110b48:	112684c0 	call	8112684c <__malloc_unlock>
81110b4c:	0005883a 	mov	r2,zero
81110b50:	003f7b06 	br	81110940 <__reset+0xfb0f0940>
81110b54:	88c00054 	ori	r3,r17,1
81110b58:	80c00115 	stw	r3,4(r16)
81110b5c:	8463883a 	add	r17,r16,r17
81110b60:	10800054 	ori	r2,r2,1
81110b64:	9c400215 	stw	r17,8(r19)
81110b68:	88800115 	stw	r2,4(r17)
81110b6c:	9009883a 	mov	r4,r18
81110b70:	112684c0 	call	8112684c <__malloc_unlock>
81110b74:	80800204 	addi	r2,r16,8
81110b78:	003f7106 	br	81110940 <__reset+0xfb0f0940>
81110b7c:	00c00504 	movi	r3,20
81110b80:	18804a2e 	bgeu	r3,r2,81110cac <_malloc_r+0x618>
81110b84:	00c01504 	movi	r3,84
81110b88:	18806e36 	bltu	r3,r2,81110d44 <_malloc_r+0x6b0>
81110b8c:	8804d33a 	srli	r2,r17,12
81110b90:	12001bc4 	addi	r8,r2,111
81110b94:	11c01b84 	addi	r7,r2,110
81110b98:	4209883a 	add	r4,r8,r8
81110b9c:	003edd06 	br	81110714 <__reset+0xfb0f0714>
81110ba0:	3804d27a 	srli	r2,r7,9
81110ba4:	00c00104 	movi	r3,4
81110ba8:	1880442e 	bgeu	r3,r2,81110cbc <_malloc_r+0x628>
81110bac:	00c00504 	movi	r3,20
81110bb0:	18808136 	bltu	r3,r2,81110db8 <_malloc_r+0x724>
81110bb4:	11401704 	addi	r5,r2,92
81110bb8:	10c016c4 	addi	r3,r2,91
81110bbc:	294b883a 	add	r5,r5,r5
81110bc0:	294b883a 	add	r5,r5,r5
81110bc4:	294b883a 	add	r5,r5,r5
81110bc8:	994b883a 	add	r5,r19,r5
81110bcc:	28800017 	ldw	r2,0(r5)
81110bd0:	01a04534 	movhi	r6,33044
81110bd4:	297ffe04 	addi	r5,r5,-8
81110bd8:	31b40c04 	addi	r6,r6,-12240
81110bdc:	28806526 	beq	r5,r2,81110d74 <_malloc_r+0x6e0>
81110be0:	01bfff04 	movi	r6,-4
81110be4:	10c00117 	ldw	r3,4(r2)
81110be8:	1986703a 	and	r3,r3,r6
81110bec:	38c0022e 	bgeu	r7,r3,81110bf8 <_malloc_r+0x564>
81110bf0:	10800217 	ldw	r2,8(r2)
81110bf4:	28bffb1e 	bne	r5,r2,81110be4 <__reset+0xfb0f0be4>
81110bf8:	11400317 	ldw	r5,12(r2)
81110bfc:	98c00117 	ldw	r3,4(r19)
81110c00:	81400315 	stw	r5,12(r16)
81110c04:	80800215 	stw	r2,8(r16)
81110c08:	2c000215 	stw	r16,8(r5)
81110c0c:	14000315 	stw	r16,12(r2)
81110c10:	003ef806 	br	811107f4 <__reset+0xfb0f07f4>
81110c14:	88c00054 	ori	r3,r17,1
81110c18:	80c00115 	stw	r3,4(r16)
81110c1c:	8463883a 	add	r17,r16,r17
81110c20:	34400515 	stw	r17,20(r6)
81110c24:	34400415 	stw	r17,16(r6)
81110c28:	10c00054 	ori	r3,r2,1
81110c2c:	8a000315 	stw	r8,12(r17)
81110c30:	8a000215 	stw	r8,8(r17)
81110c34:	88c00115 	stw	r3,4(r17)
81110c38:	88a3883a 	add	r17,r17,r2
81110c3c:	88800015 	stw	r2,0(r17)
81110c40:	9009883a 	mov	r4,r18
81110c44:	112684c0 	call	8112684c <__malloc_unlock>
81110c48:	80800204 	addi	r2,r16,8
81110c4c:	003f3c06 	br	81110940 <__reset+0xfb0f0940>
81110c50:	30c00117 	ldw	r3,4(r6)
81110c54:	003ee706 	br	811107f4 <__reset+0xfb0f07f4>
81110c58:	5ac00044 	addi	r11,r11,1
81110c5c:	588000cc 	andi	r2,r11,3
81110c60:	31800204 	addi	r6,r6,8
81110c64:	103efd1e 	bne	r2,zero,8111085c <__reset+0xfb0f085c>
81110c68:	00002406 	br	81110cfc <_malloc_r+0x668>
81110c6c:	14000317 	ldw	r16,12(r2)
81110c70:	143f251e 	bne	r2,r16,81110908 <__reset+0xfb0f0908>
81110c74:	21000084 	addi	r4,r4,2
81110c78:	003ebc06 	br	8111076c <__reset+0xfb0f076c>
81110c7c:	8085883a 	add	r2,r16,r2
81110c80:	10c00117 	ldw	r3,4(r2)
81110c84:	81000317 	ldw	r4,12(r16)
81110c88:	81400217 	ldw	r5,8(r16)
81110c8c:	18c00054 	ori	r3,r3,1
81110c90:	10c00115 	stw	r3,4(r2)
81110c94:	29000315 	stw	r4,12(r5)
81110c98:	21400215 	stw	r5,8(r4)
81110c9c:	9009883a 	mov	r4,r18
81110ca0:	112684c0 	call	8112684c <__malloc_unlock>
81110ca4:	80800204 	addi	r2,r16,8
81110ca8:	003f2506 	br	81110940 <__reset+0xfb0f0940>
81110cac:	12001704 	addi	r8,r2,92
81110cb0:	11c016c4 	addi	r7,r2,91
81110cb4:	4209883a 	add	r4,r8,r8
81110cb8:	003e9606 	br	81110714 <__reset+0xfb0f0714>
81110cbc:	3804d1ba 	srli	r2,r7,6
81110cc0:	11400e44 	addi	r5,r2,57
81110cc4:	10c00e04 	addi	r3,r2,56
81110cc8:	294b883a 	add	r5,r5,r5
81110ccc:	003fbc06 	br	81110bc0 <__reset+0xfb0f0bc0>
81110cd0:	84ff5926 	beq	r16,r19,81110a38 <__reset+0xfb0f0a38>
81110cd4:	00a04534 	movhi	r2,33044
81110cd8:	10b40c04 	addi	r2,r2,-12240
81110cdc:	14000217 	ldw	r16,8(r2)
81110ce0:	00bfff04 	movi	r2,-4
81110ce4:	80c00117 	ldw	r3,4(r16)
81110ce8:	1886703a 	and	r3,r3,r2
81110cec:	003f9106 	br	81110b34 <__reset+0xfb0f0b34>
81110cf0:	60800217 	ldw	r2,8(r12)
81110cf4:	213fffc4 	addi	r4,r4,-1
81110cf8:	1300651e 	bne	r2,r12,81110e90 <_malloc_r+0x7fc>
81110cfc:	208000cc 	andi	r2,r4,3
81110d00:	633ffe04 	addi	r12,r12,-8
81110d04:	103ffa1e 	bne	r2,zero,81110cf0 <__reset+0xfb0f0cf0>
81110d08:	98800117 	ldw	r2,4(r19)
81110d0c:	0146303a 	nor	r3,zero,r5
81110d10:	1884703a 	and	r2,r3,r2
81110d14:	98800115 	stw	r2,4(r19)
81110d18:	294b883a 	add	r5,r5,r5
81110d1c:	117f2836 	bltu	r2,r5,811109c0 <__reset+0xfb0f09c0>
81110d20:	283f2726 	beq	r5,zero,811109c0 <__reset+0xfb0f09c0>
81110d24:	2886703a 	and	r3,r5,r2
81110d28:	5809883a 	mov	r4,r11
81110d2c:	183ec31e 	bne	r3,zero,8111083c <__reset+0xfb0f083c>
81110d30:	294b883a 	add	r5,r5,r5
81110d34:	2886703a 	and	r3,r5,r2
81110d38:	21000104 	addi	r4,r4,4
81110d3c:	183ffc26 	beq	r3,zero,81110d30 <__reset+0xfb0f0d30>
81110d40:	003ebe06 	br	8111083c <__reset+0xfb0f083c>
81110d44:	00c05504 	movi	r3,340
81110d48:	18801236 	bltu	r3,r2,81110d94 <_malloc_r+0x700>
81110d4c:	8804d3fa 	srli	r2,r17,15
81110d50:	12001e04 	addi	r8,r2,120
81110d54:	11c01dc4 	addi	r7,r2,119
81110d58:	4209883a 	add	r4,r8,r8
81110d5c:	003e6d06 	br	81110714 <__reset+0xfb0f0714>
81110d60:	00c40004 	movi	r3,4096
81110d64:	003f4606 	br	81110a80 <__reset+0xfb0f0a80>
81110d68:	00800044 	movi	r2,1
81110d6c:	a0800115 	stw	r2,4(r20)
81110d70:	003f7406 	br	81110b44 <__reset+0xfb0f0b44>
81110d74:	1805d0ba 	srai	r2,r3,2
81110d78:	01c00044 	movi	r7,1
81110d7c:	30c00117 	ldw	r3,4(r6)
81110d80:	388e983a 	sll	r7,r7,r2
81110d84:	2805883a 	mov	r2,r5
81110d88:	38c6b03a 	or	r3,r7,r3
81110d8c:	30c00115 	stw	r3,4(r6)
81110d90:	003f9b06 	br	81110c00 <__reset+0xfb0f0c00>
81110d94:	00c15504 	movi	r3,1364
81110d98:	18801a36 	bltu	r3,r2,81110e04 <_malloc_r+0x770>
81110d9c:	8804d4ba 	srli	r2,r17,18
81110da0:	12001f44 	addi	r8,r2,125
81110da4:	11c01f04 	addi	r7,r2,124
81110da8:	4209883a 	add	r4,r8,r8
81110dac:	003e5906 	br	81110714 <__reset+0xfb0f0714>
81110db0:	ad400404 	addi	r21,r21,16
81110db4:	003f1706 	br	81110a14 <__reset+0xfb0f0a14>
81110db8:	00c01504 	movi	r3,84
81110dbc:	18802336 	bltu	r3,r2,81110e4c <_malloc_r+0x7b8>
81110dc0:	3804d33a 	srli	r2,r7,12
81110dc4:	11401bc4 	addi	r5,r2,111
81110dc8:	10c01b84 	addi	r3,r2,110
81110dcc:	294b883a 	add	r5,r5,r5
81110dd0:	003f7b06 	br	81110bc0 <__reset+0xfb0f0bc0>
81110dd4:	9c000217 	ldw	r16,8(r19)
81110dd8:	00bfff04 	movi	r2,-4
81110ddc:	80c00117 	ldw	r3,4(r16)
81110de0:	1886703a 	and	r3,r3,r2
81110de4:	003f5306 	br	81110b34 <__reset+0xfb0f0b34>
81110de8:	3083ffcc 	andi	r2,r6,4095
81110dec:	103f181e 	bne	r2,zero,81110a50 <__reset+0xfb0f0a50>
81110df0:	99000217 	ldw	r4,8(r19)
81110df4:	b545883a 	add	r2,r22,r21
81110df8:	10800054 	ori	r2,r2,1
81110dfc:	20800115 	stw	r2,4(r4)
81110e00:	003f3e06 	br	81110afc <__reset+0xfb0f0afc>
81110e04:	01003f84 	movi	r4,254
81110e08:	02001fc4 	movi	r8,127
81110e0c:	01c01f84 	movi	r7,126
81110e10:	003e4006 	br	81110714 <__reset+0xfb0f0714>
81110e14:	00a04534 	movhi	r2,33044
81110e18:	10ba2804 	addi	r2,r2,-5984
81110e1c:	15000015 	stw	r20,0(r2)
81110e20:	003f1106 	br	81110a68 <__reset+0xfb0f0a68>
81110e24:	00800044 	movi	r2,1
81110e28:	002b883a 	mov	r21,zero
81110e2c:	003f1f06 	br	81110aac <__reset+0xfb0f0aac>
81110e30:	81400204 	addi	r5,r16,8
81110e34:	9009883a 	mov	r4,r18
81110e38:	1119dec0 	call	81119dec <_free_r>
81110e3c:	00a04534 	movhi	r2,33044
81110e40:	10bae204 	addi	r2,r2,-5240
81110e44:	10c00017 	ldw	r3,0(r2)
81110e48:	003f2c06 	br	81110afc <__reset+0xfb0f0afc>
81110e4c:	00c05504 	movi	r3,340
81110e50:	18800536 	bltu	r3,r2,81110e68 <_malloc_r+0x7d4>
81110e54:	3804d3fa 	srli	r2,r7,15
81110e58:	11401e04 	addi	r5,r2,120
81110e5c:	10c01dc4 	addi	r3,r2,119
81110e60:	294b883a 	add	r5,r5,r5
81110e64:	003f5606 	br	81110bc0 <__reset+0xfb0f0bc0>
81110e68:	00c15504 	movi	r3,1364
81110e6c:	18800536 	bltu	r3,r2,81110e84 <_malloc_r+0x7f0>
81110e70:	3804d4ba 	srli	r2,r7,18
81110e74:	11401f44 	addi	r5,r2,125
81110e78:	10c01f04 	addi	r3,r2,124
81110e7c:	294b883a 	add	r5,r5,r5
81110e80:	003f4f06 	br	81110bc0 <__reset+0xfb0f0bc0>
81110e84:	01403f84 	movi	r5,254
81110e88:	00c01f84 	movi	r3,126
81110e8c:	003f4c06 	br	81110bc0 <__reset+0xfb0f0bc0>
81110e90:	98800117 	ldw	r2,4(r19)
81110e94:	003fa006 	br	81110d18 <__reset+0xfb0f0d18>
81110e98:	8808d0fa 	srli	r4,r17,3
81110e9c:	20800044 	addi	r2,r4,1
81110ea0:	1085883a 	add	r2,r2,r2
81110ea4:	003e9006 	br	811108e8 <__reset+0xfb0f08e8>

81110ea8 <memcpy>:
81110ea8:	defffd04 	addi	sp,sp,-12
81110eac:	de00012e 	bgeu	sp,et,81110eb4 <memcpy+0xc>
81110eb0:	003b68fa 	trap	3
81110eb4:	00c003c4 	movi	r3,15
81110eb8:	dfc00215 	stw	ra,8(sp)
81110ebc:	dc400115 	stw	r17,4(sp)
81110ec0:	dc000015 	stw	r16,0(sp)
81110ec4:	2005883a 	mov	r2,r4
81110ec8:	1980452e 	bgeu	r3,r6,81110fe0 <memcpy+0x138>
81110ecc:	2906b03a 	or	r3,r5,r4
81110ed0:	18c000cc 	andi	r3,r3,3
81110ed4:	1800441e 	bne	r3,zero,81110fe8 <memcpy+0x140>
81110ed8:	347ffc04 	addi	r17,r6,-16
81110edc:	8822d13a 	srli	r17,r17,4
81110ee0:	28c00104 	addi	r3,r5,4
81110ee4:	23400104 	addi	r13,r4,4
81110ee8:	8820913a 	slli	r16,r17,4
81110eec:	2b000204 	addi	r12,r5,8
81110ef0:	22c00204 	addi	r11,r4,8
81110ef4:	84000504 	addi	r16,r16,20
81110ef8:	2a800304 	addi	r10,r5,12
81110efc:	22400304 	addi	r9,r4,12
81110f00:	2c21883a 	add	r16,r5,r16
81110f04:	2811883a 	mov	r8,r5
81110f08:	200f883a 	mov	r7,r4
81110f0c:	41000017 	ldw	r4,0(r8)
81110f10:	1fc00017 	ldw	ra,0(r3)
81110f14:	63c00017 	ldw	r15,0(r12)
81110f18:	39000015 	stw	r4,0(r7)
81110f1c:	53800017 	ldw	r14,0(r10)
81110f20:	6fc00015 	stw	ra,0(r13)
81110f24:	5bc00015 	stw	r15,0(r11)
81110f28:	4b800015 	stw	r14,0(r9)
81110f2c:	18c00404 	addi	r3,r3,16
81110f30:	39c00404 	addi	r7,r7,16
81110f34:	42000404 	addi	r8,r8,16
81110f38:	6b400404 	addi	r13,r13,16
81110f3c:	63000404 	addi	r12,r12,16
81110f40:	5ac00404 	addi	r11,r11,16
81110f44:	52800404 	addi	r10,r10,16
81110f48:	4a400404 	addi	r9,r9,16
81110f4c:	1c3fef1e 	bne	r3,r16,81110f0c <__reset+0xfb0f0f0c>
81110f50:	89c00044 	addi	r7,r17,1
81110f54:	380e913a 	slli	r7,r7,4
81110f58:	310003cc 	andi	r4,r6,15
81110f5c:	02c000c4 	movi	r11,3
81110f60:	11c7883a 	add	r3,r2,r7
81110f64:	29cb883a 	add	r5,r5,r7
81110f68:	5900212e 	bgeu	r11,r4,81110ff0 <memcpy+0x148>
81110f6c:	1813883a 	mov	r9,r3
81110f70:	2811883a 	mov	r8,r5
81110f74:	200f883a 	mov	r7,r4
81110f78:	42800017 	ldw	r10,0(r8)
81110f7c:	4a400104 	addi	r9,r9,4
81110f80:	39ffff04 	addi	r7,r7,-4
81110f84:	4abfff15 	stw	r10,-4(r9)
81110f88:	42000104 	addi	r8,r8,4
81110f8c:	59fffa36 	bltu	r11,r7,81110f78 <__reset+0xfb0f0f78>
81110f90:	213fff04 	addi	r4,r4,-4
81110f94:	2008d0ba 	srli	r4,r4,2
81110f98:	318000cc 	andi	r6,r6,3
81110f9c:	21000044 	addi	r4,r4,1
81110fa0:	2109883a 	add	r4,r4,r4
81110fa4:	2109883a 	add	r4,r4,r4
81110fa8:	1907883a 	add	r3,r3,r4
81110fac:	290b883a 	add	r5,r5,r4
81110fb0:	30000626 	beq	r6,zero,81110fcc <memcpy+0x124>
81110fb4:	198d883a 	add	r6,r3,r6
81110fb8:	29c00003 	ldbu	r7,0(r5)
81110fbc:	18c00044 	addi	r3,r3,1
81110fc0:	29400044 	addi	r5,r5,1
81110fc4:	19ffffc5 	stb	r7,-1(r3)
81110fc8:	19bffb1e 	bne	r3,r6,81110fb8 <__reset+0xfb0f0fb8>
81110fcc:	dfc00217 	ldw	ra,8(sp)
81110fd0:	dc400117 	ldw	r17,4(sp)
81110fd4:	dc000017 	ldw	r16,0(sp)
81110fd8:	dec00304 	addi	sp,sp,12
81110fdc:	f800283a 	ret
81110fe0:	2007883a 	mov	r3,r4
81110fe4:	003ff206 	br	81110fb0 <__reset+0xfb0f0fb0>
81110fe8:	2007883a 	mov	r3,r4
81110fec:	003ff106 	br	81110fb4 <__reset+0xfb0f0fb4>
81110ff0:	200d883a 	mov	r6,r4
81110ff4:	003fee06 	br	81110fb0 <__reset+0xfb0f0fb0>

81110ff8 <memset>:
81110ff8:	20c000cc 	andi	r3,r4,3
81110ffc:	2005883a 	mov	r2,r4
81111000:	18004426 	beq	r3,zero,81111114 <memset+0x11c>
81111004:	31ffffc4 	addi	r7,r6,-1
81111008:	30004026 	beq	r6,zero,8111110c <memset+0x114>
8111100c:	2813883a 	mov	r9,r5
81111010:	200d883a 	mov	r6,r4
81111014:	2007883a 	mov	r3,r4
81111018:	00000406 	br	8111102c <memset+0x34>
8111101c:	3a3fffc4 	addi	r8,r7,-1
81111020:	31800044 	addi	r6,r6,1
81111024:	38003926 	beq	r7,zero,8111110c <memset+0x114>
81111028:	400f883a 	mov	r7,r8
8111102c:	18c00044 	addi	r3,r3,1
81111030:	32400005 	stb	r9,0(r6)
81111034:	1a0000cc 	andi	r8,r3,3
81111038:	403ff81e 	bne	r8,zero,8111101c <__reset+0xfb0f101c>
8111103c:	010000c4 	movi	r4,3
81111040:	21c02d2e 	bgeu	r4,r7,811110f8 <memset+0x100>
81111044:	29003fcc 	andi	r4,r5,255
81111048:	200c923a 	slli	r6,r4,8
8111104c:	3108b03a 	or	r4,r6,r4
81111050:	200c943a 	slli	r6,r4,16
81111054:	218cb03a 	or	r6,r4,r6
81111058:	010003c4 	movi	r4,15
8111105c:	21c0182e 	bgeu	r4,r7,811110c0 <memset+0xc8>
81111060:	3b3ffc04 	addi	r12,r7,-16
81111064:	6018d13a 	srli	r12,r12,4
81111068:	1a000104 	addi	r8,r3,4
8111106c:	1ac00204 	addi	r11,r3,8
81111070:	6008913a 	slli	r4,r12,4
81111074:	1a800304 	addi	r10,r3,12
81111078:	1813883a 	mov	r9,r3
8111107c:	21000504 	addi	r4,r4,20
81111080:	1909883a 	add	r4,r3,r4
81111084:	49800015 	stw	r6,0(r9)
81111088:	41800015 	stw	r6,0(r8)
8111108c:	59800015 	stw	r6,0(r11)
81111090:	51800015 	stw	r6,0(r10)
81111094:	42000404 	addi	r8,r8,16
81111098:	4a400404 	addi	r9,r9,16
8111109c:	5ac00404 	addi	r11,r11,16
811110a0:	52800404 	addi	r10,r10,16
811110a4:	413ff71e 	bne	r8,r4,81111084 <__reset+0xfb0f1084>
811110a8:	63000044 	addi	r12,r12,1
811110ac:	6018913a 	slli	r12,r12,4
811110b0:	39c003cc 	andi	r7,r7,15
811110b4:	010000c4 	movi	r4,3
811110b8:	1b07883a 	add	r3,r3,r12
811110bc:	21c00e2e 	bgeu	r4,r7,811110f8 <memset+0x100>
811110c0:	1813883a 	mov	r9,r3
811110c4:	3811883a 	mov	r8,r7
811110c8:	010000c4 	movi	r4,3
811110cc:	49800015 	stw	r6,0(r9)
811110d0:	423fff04 	addi	r8,r8,-4
811110d4:	4a400104 	addi	r9,r9,4
811110d8:	223ffc36 	bltu	r4,r8,811110cc <__reset+0xfb0f10cc>
811110dc:	393fff04 	addi	r4,r7,-4
811110e0:	2008d0ba 	srli	r4,r4,2
811110e4:	39c000cc 	andi	r7,r7,3
811110e8:	21000044 	addi	r4,r4,1
811110ec:	2109883a 	add	r4,r4,r4
811110f0:	2109883a 	add	r4,r4,r4
811110f4:	1907883a 	add	r3,r3,r4
811110f8:	38000526 	beq	r7,zero,81111110 <memset+0x118>
811110fc:	19cf883a 	add	r7,r3,r7
81111100:	19400005 	stb	r5,0(r3)
81111104:	18c00044 	addi	r3,r3,1
81111108:	38fffd1e 	bne	r7,r3,81111100 <__reset+0xfb0f1100>
8111110c:	f800283a 	ret
81111110:	f800283a 	ret
81111114:	2007883a 	mov	r3,r4
81111118:	300f883a 	mov	r7,r6
8111111c:	003fc706 	br	8111103c <__reset+0xfb0f103c>

81111120 <_open_r>:
81111120:	defffd04 	addi	sp,sp,-12
81111124:	de00012e 	bgeu	sp,et,8111112c <_open_r+0xc>
81111128:	003b68fa 	trap	3
8111112c:	2805883a 	mov	r2,r5
81111130:	dc000015 	stw	r16,0(sp)
81111134:	04204534 	movhi	r16,33044
81111138:	dc400115 	stw	r17,4(sp)
8111113c:	300b883a 	mov	r5,r6
81111140:	843a8004 	addi	r16,r16,-5632
81111144:	2023883a 	mov	r17,r4
81111148:	380d883a 	mov	r6,r7
8111114c:	1009883a 	mov	r4,r2
81111150:	dfc00215 	stw	ra,8(sp)
81111154:	80000015 	stw	zero,0(r16)
81111158:	1125db00 	call	81125db0 <open>
8111115c:	00ffffc4 	movi	r3,-1
81111160:	10c00526 	beq	r2,r3,81111178 <_open_r+0x58>
81111164:	dfc00217 	ldw	ra,8(sp)
81111168:	dc400117 	ldw	r17,4(sp)
8111116c:	dc000017 	ldw	r16,0(sp)
81111170:	dec00304 	addi	sp,sp,12
81111174:	f800283a 	ret
81111178:	80c00017 	ldw	r3,0(r16)
8111117c:	183ff926 	beq	r3,zero,81111164 <__reset+0xfb0f1164>
81111180:	88c00015 	stw	r3,0(r17)
81111184:	003ff706 	br	81111164 <__reset+0xfb0f1164>

81111188 <_printf_r>:
81111188:	defffd04 	addi	sp,sp,-12
8111118c:	2805883a 	mov	r2,r5
81111190:	de00012e 	bgeu	sp,et,81111198 <_printf_r+0x10>
81111194:	003b68fa 	trap	3
81111198:	dfc00015 	stw	ra,0(sp)
8111119c:	d9800115 	stw	r6,4(sp)
811111a0:	d9c00215 	stw	r7,8(sp)
811111a4:	21400217 	ldw	r5,8(r4)
811111a8:	d9c00104 	addi	r7,sp,4
811111ac:	100d883a 	mov	r6,r2
811111b0:	1113cf80 	call	81113cf8 <___vfprintf_internal_r>
811111b4:	dfc00017 	ldw	ra,0(sp)
811111b8:	dec00304 	addi	sp,sp,12
811111bc:	f800283a 	ret

811111c0 <printf>:
811111c0:	defffc04 	addi	sp,sp,-16
811111c4:	de00012e 	bgeu	sp,et,811111cc <printf+0xc>
811111c8:	003b68fa 	trap	3
811111cc:	dfc00015 	stw	ra,0(sp)
811111d0:	d9400115 	stw	r5,4(sp)
811111d4:	d9800215 	stw	r6,8(sp)
811111d8:	d9c00315 	stw	r7,12(sp)
811111dc:	00a04534 	movhi	r2,33044
811111e0:	10ba2704 	addi	r2,r2,-5988
811111e4:	10800017 	ldw	r2,0(r2)
811111e8:	200b883a 	mov	r5,r4
811111ec:	d9800104 	addi	r6,sp,4
811111f0:	11000217 	ldw	r4,8(r2)
811111f4:	1115ef80 	call	81115ef8 <__vfprintf_internal>
811111f8:	dfc00017 	ldw	ra,0(sp)
811111fc:	dec00404 	addi	sp,sp,16
81111200:	f800283a 	ret

81111204 <_puts_r>:
81111204:	defff604 	addi	sp,sp,-40
81111208:	de00012e 	bgeu	sp,et,81111210 <_puts_r+0xc>
8111120c:	003b68fa 	trap	3
81111210:	dc000715 	stw	r16,28(sp)
81111214:	2021883a 	mov	r16,r4
81111218:	2809883a 	mov	r4,r5
8111121c:	dc400815 	stw	r17,32(sp)
81111220:	dfc00915 	stw	ra,36(sp)
81111224:	2823883a 	mov	r17,r5
81111228:	11118240 	call	81111824 <strlen>
8111122c:	10c00044 	addi	r3,r2,1
81111230:	d8800115 	stw	r2,4(sp)
81111234:	00a04534 	movhi	r2,33044
81111238:	10b11c04 	addi	r2,r2,-15248
8111123c:	d8800215 	stw	r2,8(sp)
81111240:	00800044 	movi	r2,1
81111244:	d8800315 	stw	r2,12(sp)
81111248:	00800084 	movi	r2,2
8111124c:	dc400015 	stw	r17,0(sp)
81111250:	d8c00615 	stw	r3,24(sp)
81111254:	dec00415 	stw	sp,16(sp)
81111258:	d8800515 	stw	r2,20(sp)
8111125c:	80000226 	beq	r16,zero,81111268 <_puts_r+0x64>
81111260:	80800e17 	ldw	r2,56(r16)
81111264:	10001426 	beq	r2,zero,811112b8 <_puts_r+0xb4>
81111268:	81400217 	ldw	r5,8(r16)
8111126c:	2880030b 	ldhu	r2,12(r5)
81111270:	10c8000c 	andi	r3,r2,8192
81111274:	1800061e 	bne	r3,zero,81111290 <_puts_r+0x8c>
81111278:	29001917 	ldw	r4,100(r5)
8111127c:	00f7ffc4 	movi	r3,-8193
81111280:	10880014 	ori	r2,r2,8192
81111284:	20c6703a 	and	r3,r4,r3
81111288:	2880030d 	sth	r2,12(r5)
8111128c:	28c01915 	stw	r3,100(r5)
81111290:	d9800404 	addi	r6,sp,16
81111294:	8009883a 	mov	r4,r16
81111298:	111a1040 	call	8111a104 <__sfvwrite_r>
8111129c:	1000091e 	bne	r2,zero,811112c4 <_puts_r+0xc0>
811112a0:	00800284 	movi	r2,10
811112a4:	dfc00917 	ldw	ra,36(sp)
811112a8:	dc400817 	ldw	r17,32(sp)
811112ac:	dc000717 	ldw	r16,28(sp)
811112b0:	dec00a04 	addi	sp,sp,40
811112b4:	f800283a 	ret
811112b8:	8009883a 	mov	r4,r16
811112bc:	11199540 	call	81119954 <__sinit>
811112c0:	003fe906 	br	81111268 <__reset+0xfb0f1268>
811112c4:	00bfffc4 	movi	r2,-1
811112c8:	003ff606 	br	811112a4 <__reset+0xfb0f12a4>

811112cc <puts>:
811112cc:	00a04534 	movhi	r2,33044
811112d0:	10ba2704 	addi	r2,r2,-5988
811112d4:	200b883a 	mov	r5,r4
811112d8:	11000017 	ldw	r4,0(r2)
811112dc:	11112041 	jmpi	81111204 <_puts_r>

811112e0 <lflush>:
811112e0:	2080030b 	ldhu	r2,12(r4)
811112e4:	00c00244 	movi	r3,9
811112e8:	1080024c 	andi	r2,r2,9
811112ec:	10c00226 	beq	r2,r3,811112f8 <lflush+0x18>
811112f0:	0005883a 	mov	r2,zero
811112f4:	f800283a 	ret
811112f8:	11195bc1 	jmpi	811195bc <fflush>

811112fc <__srefill_r>:
811112fc:	defffc04 	addi	sp,sp,-16
81111300:	de00012e 	bgeu	sp,et,81111308 <__srefill_r+0xc>
81111304:	003b68fa 	trap	3
81111308:	dc400115 	stw	r17,4(sp)
8111130c:	dc000015 	stw	r16,0(sp)
81111310:	dfc00315 	stw	ra,12(sp)
81111314:	dc800215 	stw	r18,8(sp)
81111318:	2023883a 	mov	r17,r4
8111131c:	2821883a 	mov	r16,r5
81111320:	20000226 	beq	r4,zero,8111132c <__srefill_r+0x30>
81111324:	20800e17 	ldw	r2,56(r4)
81111328:	10003c26 	beq	r2,zero,8111141c <__srefill_r+0x120>
8111132c:	80c0030b 	ldhu	r3,12(r16)
81111330:	1908000c 	andi	r4,r3,8192
81111334:	1805883a 	mov	r2,r3
81111338:	2000071e 	bne	r4,zero,81111358 <__srefill_r+0x5c>
8111133c:	81001917 	ldw	r4,100(r16)
81111340:	18880014 	ori	r2,r3,8192
81111344:	00f7ffc4 	movi	r3,-8193
81111348:	20c8703a 	and	r4,r4,r3
8111134c:	8080030d 	sth	r2,12(r16)
81111350:	1007883a 	mov	r3,r2
81111354:	81001915 	stw	r4,100(r16)
81111358:	80000115 	stw	zero,4(r16)
8111135c:	1100080c 	andi	r4,r2,32
81111360:	2000571e 	bne	r4,zero,811114c0 <__srefill_r+0x1c4>
81111364:	1100010c 	andi	r4,r2,4
81111368:	20001f26 	beq	r4,zero,811113e8 <__srefill_r+0xec>
8111136c:	81400c17 	ldw	r5,48(r16)
81111370:	28000826 	beq	r5,zero,81111394 <__srefill_r+0x98>
81111374:	80801004 	addi	r2,r16,64
81111378:	28800226 	beq	r5,r2,81111384 <__srefill_r+0x88>
8111137c:	8809883a 	mov	r4,r17
81111380:	1119dec0 	call	81119dec <_free_r>
81111384:	80800f17 	ldw	r2,60(r16)
81111388:	80000c15 	stw	zero,48(r16)
8111138c:	80800115 	stw	r2,4(r16)
81111390:	1000391e 	bne	r2,zero,81111478 <__srefill_r+0x17c>
81111394:	80800417 	ldw	r2,16(r16)
81111398:	10004b26 	beq	r2,zero,811114c8 <__srefill_r+0x1cc>
8111139c:	8480030b 	ldhu	r18,12(r16)
811113a0:	908000cc 	andi	r2,r18,3
811113a4:	10001f1e 	bne	r2,zero,81111424 <__srefill_r+0x128>
811113a8:	81800417 	ldw	r6,16(r16)
811113ac:	80800817 	ldw	r2,32(r16)
811113b0:	81c00517 	ldw	r7,20(r16)
811113b4:	81400717 	ldw	r5,28(r16)
811113b8:	81800015 	stw	r6,0(r16)
811113bc:	8809883a 	mov	r4,r17
811113c0:	103ee83a 	callr	r2
811113c4:	80800115 	stw	r2,4(r16)
811113c8:	00800e0e 	bge	zero,r2,81111404 <__srefill_r+0x108>
811113cc:	0005883a 	mov	r2,zero
811113d0:	dfc00317 	ldw	ra,12(sp)
811113d4:	dc800217 	ldw	r18,8(sp)
811113d8:	dc400117 	ldw	r17,4(sp)
811113dc:	dc000017 	ldw	r16,0(sp)
811113e0:	dec00404 	addi	sp,sp,16
811113e4:	f800283a 	ret
811113e8:	1100040c 	andi	r4,r2,16
811113ec:	20003026 	beq	r4,zero,811114b0 <__srefill_r+0x1b4>
811113f0:	1080020c 	andi	r2,r2,8
811113f4:	1000241e 	bne	r2,zero,81111488 <__srefill_r+0x18c>
811113f8:	18c00114 	ori	r3,r3,4
811113fc:	80c0030d 	sth	r3,12(r16)
81111400:	003fe406 	br	81111394 <__reset+0xfb0f1394>
81111404:	80c0030b 	ldhu	r3,12(r16)
81111408:	1000161e 	bne	r2,zero,81111464 <__srefill_r+0x168>
8111140c:	18c00814 	ori	r3,r3,32
81111410:	00bfffc4 	movi	r2,-1
81111414:	80c0030d 	sth	r3,12(r16)
81111418:	003fed06 	br	811113d0 <__reset+0xfb0f13d0>
8111141c:	11199540 	call	81119954 <__sinit>
81111420:	003fc206 	br	8111132c <__reset+0xfb0f132c>
81111424:	00a04534 	movhi	r2,33044
81111428:	10ba2604 	addi	r2,r2,-5992
8111142c:	11000017 	ldw	r4,0(r2)
81111430:	01604474 	movhi	r5,33041
81111434:	00800044 	movi	r2,1
81111438:	2944b804 	addi	r5,r5,4832
8111143c:	8080030d 	sth	r2,12(r16)
81111440:	111a5c80 	call	8111a5c8 <_fwalk>
81111444:	00800244 	movi	r2,9
81111448:	8480030d 	sth	r18,12(r16)
8111144c:	9480024c 	andi	r18,r18,9
81111450:	90bfd51e 	bne	r18,r2,811113a8 <__reset+0xfb0f13a8>
81111454:	800b883a 	mov	r5,r16
81111458:	8809883a 	mov	r4,r17
8111145c:	11193340 	call	81119334 <__sflush_r>
81111460:	003fd106 	br	811113a8 <__reset+0xfb0f13a8>
81111464:	18c01014 	ori	r3,r3,64
81111468:	80000115 	stw	zero,4(r16)
8111146c:	00bfffc4 	movi	r2,-1
81111470:	80c0030d 	sth	r3,12(r16)
81111474:	003fd606 	br	811113d0 <__reset+0xfb0f13d0>
81111478:	80c00e17 	ldw	r3,56(r16)
8111147c:	0005883a 	mov	r2,zero
81111480:	80c00015 	stw	r3,0(r16)
81111484:	003fd206 	br	811113d0 <__reset+0xfb0f13d0>
81111488:	800b883a 	mov	r5,r16
8111148c:	8809883a 	mov	r4,r17
81111490:	11195580 	call	81119558 <_fflush_r>
81111494:	10000a1e 	bne	r2,zero,811114c0 <__srefill_r+0x1c4>
81111498:	8080030b 	ldhu	r2,12(r16)
8111149c:	00fffdc4 	movi	r3,-9
811114a0:	80000215 	stw	zero,8(r16)
811114a4:	1886703a 	and	r3,r3,r2
811114a8:	80000615 	stw	zero,24(r16)
811114ac:	003fd206 	br	811113f8 <__reset+0xfb0f13f8>
811114b0:	00800244 	movi	r2,9
811114b4:	88800015 	stw	r2,0(r17)
811114b8:	18c01014 	ori	r3,r3,64
811114bc:	80c0030d 	sth	r3,12(r16)
811114c0:	00bfffc4 	movi	r2,-1
811114c4:	003fc206 	br	811113d0 <__reset+0xfb0f13d0>
811114c8:	800b883a 	mov	r5,r16
811114cc:	8809883a 	mov	r4,r17
811114d0:	11104d00 	call	811104d0 <__smakebuf_r>
811114d4:	003fb106 	br	8111139c <__reset+0xfb0f139c>

811114d8 <_sbrk_r>:
811114d8:	defffd04 	addi	sp,sp,-12
811114dc:	de00012e 	bgeu	sp,et,811114e4 <_sbrk_r+0xc>
811114e0:	003b68fa 	trap	3
811114e4:	dc000015 	stw	r16,0(sp)
811114e8:	04204534 	movhi	r16,33044
811114ec:	dc400115 	stw	r17,4(sp)
811114f0:	843a8004 	addi	r16,r16,-5632
811114f4:	2023883a 	mov	r17,r4
811114f8:	2809883a 	mov	r4,r5
811114fc:	dfc00215 	stw	ra,8(sp)
81111500:	80000015 	stw	zero,0(r16)
81111504:	11260c00 	call	811260c0 <sbrk>
81111508:	00ffffc4 	movi	r3,-1
8111150c:	10c00526 	beq	r2,r3,81111524 <_sbrk_r+0x4c>
81111510:	dfc00217 	ldw	ra,8(sp)
81111514:	dc400117 	ldw	r17,4(sp)
81111518:	dc000017 	ldw	r16,0(sp)
8111151c:	dec00304 	addi	sp,sp,12
81111520:	f800283a 	ret
81111524:	80c00017 	ldw	r3,0(r16)
81111528:	183ff926 	beq	r3,zero,81111510 <__reset+0xfb0f1510>
8111152c:	88c00015 	stw	r3,0(r17)
81111530:	003ff706 	br	81111510 <__reset+0xfb0f1510>

81111534 <scanf>:
81111534:	defffc04 	addi	sp,sp,-16
81111538:	de00012e 	bgeu	sp,et,81111540 <scanf+0xc>
8111153c:	003b68fa 	trap	3
81111540:	dfc00015 	stw	ra,0(sp)
81111544:	d9400115 	stw	r5,4(sp)
81111548:	d9800215 	stw	r6,8(sp)
8111154c:	d9c00315 	stw	r7,12(sp)
81111550:	00a04534 	movhi	r2,33044
81111554:	10ba2704 	addi	r2,r2,-5988
81111558:	200d883a 	mov	r6,r4
8111155c:	11000017 	ldw	r4,0(r2)
81111560:	d9c00104 	addi	r7,sp,4
81111564:	21400117 	ldw	r5,4(r4)
81111568:	11178280 	call	81117828 <_vfscanf_r>
8111156c:	dfc00017 	ldw	ra,0(sp)
81111570:	dec00404 	addi	sp,sp,16
81111574:	f800283a 	ret

81111578 <_scanf_r>:
81111578:	defffd04 	addi	sp,sp,-12
8111157c:	2805883a 	mov	r2,r5
81111580:	de00012e 	bgeu	sp,et,81111588 <_scanf_r+0x10>
81111584:	003b68fa 	trap	3
81111588:	dfc00015 	stw	ra,0(sp)
8111158c:	d9800115 	stw	r6,4(sp)
81111590:	d9c00215 	stw	r7,8(sp)
81111594:	21400117 	ldw	r5,4(r4)
81111598:	d9c00104 	addi	r7,sp,4
8111159c:	100d883a 	mov	r6,r2
811115a0:	11178280 	call	81117828 <_vfscanf_r>
811115a4:	dfc00017 	ldw	ra,0(sp)
811115a8:	dec00304 	addi	sp,sp,12
811115ac:	f800283a 	ret

811115b0 <_sprintf_r>:
811115b0:	deffe404 	addi	sp,sp,-112
811115b4:	2807883a 	mov	r3,r5
811115b8:	de00012e 	bgeu	sp,et,811115c0 <_sprintf_r+0x10>
811115bc:	003b68fa 	trap	3
811115c0:	dfc01a15 	stw	ra,104(sp)
811115c4:	d9c01b15 	stw	r7,108(sp)
811115c8:	00a00034 	movhi	r2,32768
811115cc:	10bfffc4 	addi	r2,r2,-1
811115d0:	02008204 	movi	r8,520
811115d4:	d8800215 	stw	r2,8(sp)
811115d8:	d8800515 	stw	r2,20(sp)
811115dc:	d9c01b04 	addi	r7,sp,108
811115e0:	d80b883a 	mov	r5,sp
811115e4:	00bfffc4 	movi	r2,-1
811115e8:	d8c00015 	stw	r3,0(sp)
811115ec:	d8c00415 	stw	r3,16(sp)
811115f0:	da00030d 	sth	r8,12(sp)
811115f4:	d880038d 	sth	r2,14(sp)
811115f8:	1111b180 	call	81111b18 <___svfprintf_internal_r>
811115fc:	d8c00017 	ldw	r3,0(sp)
81111600:	18000005 	stb	zero,0(r3)
81111604:	dfc01a17 	ldw	ra,104(sp)
81111608:	dec01c04 	addi	sp,sp,112
8111160c:	f800283a 	ret

81111610 <sprintf>:
81111610:	deffe304 	addi	sp,sp,-116
81111614:	2007883a 	mov	r3,r4
81111618:	de00012e 	bgeu	sp,et,81111620 <sprintf+0x10>
8111161c:	003b68fa 	trap	3
81111620:	dfc01a15 	stw	ra,104(sp)
81111624:	d9801b15 	stw	r6,108(sp)
81111628:	d9c01c15 	stw	r7,112(sp)
8111162c:	01204534 	movhi	r4,33044
81111630:	213a2704 	addi	r4,r4,-5988
81111634:	21000017 	ldw	r4,0(r4)
81111638:	00a00034 	movhi	r2,32768
8111163c:	10bfffc4 	addi	r2,r2,-1
81111640:	280d883a 	mov	r6,r5
81111644:	02008204 	movi	r8,520
81111648:	d8800215 	stw	r2,8(sp)
8111164c:	d8800515 	stw	r2,20(sp)
81111650:	d9c01b04 	addi	r7,sp,108
81111654:	d80b883a 	mov	r5,sp
81111658:	00bfffc4 	movi	r2,-1
8111165c:	d8c00015 	stw	r3,0(sp)
81111660:	d8c00415 	stw	r3,16(sp)
81111664:	da00030d 	sth	r8,12(sp)
81111668:	d880038d 	sth	r2,14(sp)
8111166c:	1111b180 	call	81111b18 <___svfprintf_internal_r>
81111670:	d8c00017 	ldw	r3,0(sp)
81111674:	18000005 	stb	zero,0(r3)
81111678:	dfc01a17 	ldw	ra,104(sp)
8111167c:	dec01d04 	addi	sp,sp,116
81111680:	f800283a 	ret

81111684 <__sread>:
81111684:	defffe04 	addi	sp,sp,-8
81111688:	de00012e 	bgeu	sp,et,81111690 <__sread+0xc>
8111168c:	003b68fa 	trap	3
81111690:	dc000015 	stw	r16,0(sp)
81111694:	2821883a 	mov	r16,r5
81111698:	2940038f 	ldh	r5,14(r5)
8111169c:	dfc00115 	stw	ra,4(sp)
811116a0:	111be180 	call	8111be18 <_read_r>
811116a4:	10000716 	blt	r2,zero,811116c4 <__sread+0x40>
811116a8:	80c01417 	ldw	r3,80(r16)
811116ac:	1887883a 	add	r3,r3,r2
811116b0:	80c01415 	stw	r3,80(r16)
811116b4:	dfc00117 	ldw	ra,4(sp)
811116b8:	dc000017 	ldw	r16,0(sp)
811116bc:	dec00204 	addi	sp,sp,8
811116c0:	f800283a 	ret
811116c4:	80c0030b 	ldhu	r3,12(r16)
811116c8:	18fbffcc 	andi	r3,r3,61439
811116cc:	80c0030d 	sth	r3,12(r16)
811116d0:	dfc00117 	ldw	ra,4(sp)
811116d4:	dc000017 	ldw	r16,0(sp)
811116d8:	dec00204 	addi	sp,sp,8
811116dc:	f800283a 	ret

811116e0 <__seofread>:
811116e0:	0005883a 	mov	r2,zero
811116e4:	f800283a 	ret

811116e8 <__swrite>:
811116e8:	defffb04 	addi	sp,sp,-20
811116ec:	de00012e 	bgeu	sp,et,811116f4 <__swrite+0xc>
811116f0:	003b68fa 	trap	3
811116f4:	2880030b 	ldhu	r2,12(r5)
811116f8:	dcc00315 	stw	r19,12(sp)
811116fc:	dc800215 	stw	r18,8(sp)
81111700:	dc400115 	stw	r17,4(sp)
81111704:	dc000015 	stw	r16,0(sp)
81111708:	dfc00415 	stw	ra,16(sp)
8111170c:	10c0400c 	andi	r3,r2,256
81111710:	2821883a 	mov	r16,r5
81111714:	2023883a 	mov	r17,r4
81111718:	3025883a 	mov	r18,r6
8111171c:	3827883a 	mov	r19,r7
81111720:	18000526 	beq	r3,zero,81111738 <__swrite+0x50>
81111724:	2940038f 	ldh	r5,14(r5)
81111728:	01c00084 	movi	r7,2
8111172c:	000d883a 	mov	r6,zero
81111730:	111a8d00 	call	8111a8d0 <_lseek_r>
81111734:	8080030b 	ldhu	r2,12(r16)
81111738:	8140038f 	ldh	r5,14(r16)
8111173c:	10bbffcc 	andi	r2,r2,61439
81111740:	980f883a 	mov	r7,r19
81111744:	900d883a 	mov	r6,r18
81111748:	8809883a 	mov	r4,r17
8111174c:	8080030d 	sth	r2,12(r16)
81111750:	dfc00417 	ldw	ra,16(sp)
81111754:	dcc00317 	ldw	r19,12(sp)
81111758:	dc800217 	ldw	r18,8(sp)
8111175c:	dc400117 	ldw	r17,4(sp)
81111760:	dc000017 	ldw	r16,0(sp)
81111764:	dec00504 	addi	sp,sp,20
81111768:	111787c1 	jmpi	8111787c <_write_r>

8111176c <__sseek>:
8111176c:	defffe04 	addi	sp,sp,-8
81111770:	de00012e 	bgeu	sp,et,81111778 <__sseek+0xc>
81111774:	003b68fa 	trap	3
81111778:	dc000015 	stw	r16,0(sp)
8111177c:	2821883a 	mov	r16,r5
81111780:	2940038f 	ldh	r5,14(r5)
81111784:	dfc00115 	stw	ra,4(sp)
81111788:	111a8d00 	call	8111a8d0 <_lseek_r>
8111178c:	00ffffc4 	movi	r3,-1
81111790:	10c00826 	beq	r2,r3,811117b4 <__sseek+0x48>
81111794:	80c0030b 	ldhu	r3,12(r16)
81111798:	80801415 	stw	r2,80(r16)
8111179c:	18c40014 	ori	r3,r3,4096
811117a0:	80c0030d 	sth	r3,12(r16)
811117a4:	dfc00117 	ldw	ra,4(sp)
811117a8:	dc000017 	ldw	r16,0(sp)
811117ac:	dec00204 	addi	sp,sp,8
811117b0:	f800283a 	ret
811117b4:	80c0030b 	ldhu	r3,12(r16)
811117b8:	18fbffcc 	andi	r3,r3,61439
811117bc:	80c0030d 	sth	r3,12(r16)
811117c0:	dfc00117 	ldw	ra,4(sp)
811117c4:	dc000017 	ldw	r16,0(sp)
811117c8:	dec00204 	addi	sp,sp,8
811117cc:	f800283a 	ret

811117d0 <__sclose>:
811117d0:	2940038f 	ldh	r5,14(r5)
811117d4:	1117a401 	jmpi	81117a40 <_close_r>

811117d8 <strcspn>:
811117d8:	21c00007 	ldb	r7,0(r4)
811117dc:	38000f26 	beq	r7,zero,8111181c <strcspn+0x44>
811117e0:	2a000007 	ldb	r8,0(r5)
811117e4:	2005883a 	mov	r2,r4
811117e8:	40000726 	beq	r8,zero,81111808 <strcspn+0x30>
811117ec:	3a000926 	beq	r7,r8,81111814 <strcspn+0x3c>
811117f0:	2807883a 	mov	r3,r5
811117f4:	00000106 	br	811117fc <strcspn+0x24>
811117f8:	31c00626 	beq	r6,r7,81111814 <strcspn+0x3c>
811117fc:	18c00044 	addi	r3,r3,1
81111800:	19800007 	ldb	r6,0(r3)
81111804:	303ffc1e 	bne	r6,zero,811117f8 <__reset+0xfb0f17f8>
81111808:	10800044 	addi	r2,r2,1
8111180c:	11c00007 	ldb	r7,0(r2)
81111810:	383ff51e 	bne	r7,zero,811117e8 <__reset+0xfb0f17e8>
81111814:	1105c83a 	sub	r2,r2,r4
81111818:	f800283a 	ret
8111181c:	0005883a 	mov	r2,zero
81111820:	f800283a 	ret

81111824 <strlen>:
81111824:	208000cc 	andi	r2,r4,3
81111828:	10002026 	beq	r2,zero,811118ac <strlen+0x88>
8111182c:	20800007 	ldb	r2,0(r4)
81111830:	10002026 	beq	r2,zero,811118b4 <strlen+0x90>
81111834:	2005883a 	mov	r2,r4
81111838:	00000206 	br	81111844 <strlen+0x20>
8111183c:	10c00007 	ldb	r3,0(r2)
81111840:	18001826 	beq	r3,zero,811118a4 <strlen+0x80>
81111844:	10800044 	addi	r2,r2,1
81111848:	10c000cc 	andi	r3,r2,3
8111184c:	183ffb1e 	bne	r3,zero,8111183c <__reset+0xfb0f183c>
81111850:	10c00017 	ldw	r3,0(r2)
81111854:	01ffbff4 	movhi	r7,65279
81111858:	39ffbfc4 	addi	r7,r7,-257
8111185c:	00ca303a 	nor	r5,zero,r3
81111860:	01a02074 	movhi	r6,32897
81111864:	19c7883a 	add	r3,r3,r7
81111868:	31a02004 	addi	r6,r6,-32640
8111186c:	1946703a 	and	r3,r3,r5
81111870:	1986703a 	and	r3,r3,r6
81111874:	1800091e 	bne	r3,zero,8111189c <strlen+0x78>
81111878:	10800104 	addi	r2,r2,4
8111187c:	10c00017 	ldw	r3,0(r2)
81111880:	19cb883a 	add	r5,r3,r7
81111884:	00c6303a 	nor	r3,zero,r3
81111888:	28c6703a 	and	r3,r5,r3
8111188c:	1986703a 	and	r3,r3,r6
81111890:	183ff926 	beq	r3,zero,81111878 <__reset+0xfb0f1878>
81111894:	00000106 	br	8111189c <strlen+0x78>
81111898:	10800044 	addi	r2,r2,1
8111189c:	10c00007 	ldb	r3,0(r2)
811118a0:	183ffd1e 	bne	r3,zero,81111898 <__reset+0xfb0f1898>
811118a4:	1105c83a 	sub	r2,r2,r4
811118a8:	f800283a 	ret
811118ac:	2005883a 	mov	r2,r4
811118b0:	003fe706 	br	81111850 <__reset+0xfb0f1850>
811118b4:	0005883a 	mov	r2,zero
811118b8:	f800283a 	ret

811118bc <_strtol_r>:
811118bc:	00a04534 	movhi	r2,33044
811118c0:	defff404 	addi	sp,sp,-48
811118c4:	10ba2504 	addi	r2,r2,-5996
811118c8:	de00012e 	bgeu	sp,et,811118d0 <_strtol_r+0x14>
811118cc:	003b68fa 	trap	3
811118d0:	dd400715 	stw	r21,28(sp)
811118d4:	15400017 	ldw	r21,0(r2)
811118d8:	dd800815 	stw	r22,32(sp)
811118dc:	dd000615 	stw	r20,24(sp)
811118e0:	dcc00515 	stw	r19,20(sp)
811118e4:	d9000015 	stw	r4,0(sp)
811118e8:	dfc00b15 	stw	ra,44(sp)
811118ec:	df000a15 	stw	fp,40(sp)
811118f0:	ddc00915 	stw	r23,36(sp)
811118f4:	dc800415 	stw	r18,16(sp)
811118f8:	dc400315 	stw	r17,12(sp)
811118fc:	dc000215 	stw	r16,8(sp)
81111900:	2829883a 	mov	r20,r5
81111904:	3027883a 	mov	r19,r6
81111908:	382d883a 	mov	r22,r7
8111190c:	2809883a 	mov	r4,r5
81111910:	24000003 	ldbu	r16,0(r4)
81111914:	24400044 	addi	r17,r4,1
81111918:	2007883a 	mov	r3,r4
8111191c:	ac05883a 	add	r2,r21,r16
81111920:	10800043 	ldbu	r2,1(r2)
81111924:	8809883a 	mov	r4,r17
81111928:	1080020c 	andi	r2,r2,8
8111192c:	103ff81e 	bne	r2,zero,81111910 <__reset+0xfb0f1910>
81111930:	00800b44 	movi	r2,45
81111934:	80805826 	beq	r16,r2,81111a98 <_strtol_r+0x1dc>
81111938:	00800ac4 	movi	r2,43
8111193c:	80805a26 	beq	r16,r2,81111aa8 <_strtol_r+0x1ec>
81111940:	0039883a 	mov	fp,zero
81111944:	b0004426 	beq	r22,zero,81111a58 <_strtol_r+0x19c>
81111948:	00800404 	movi	r2,16
8111194c:	b0806026 	beq	r22,r2,81111ad0 <_strtol_r+0x214>
81111950:	b02f883a 	mov	r23,r22
81111954:	00a00034 	movhi	r2,32768
81111958:	e025003a 	cmpeq	r18,fp,zero
8111195c:	14a5c83a 	sub	r18,r2,r18
81111960:	b80b883a 	mov	r5,r23
81111964:	9009883a 	mov	r4,r18
81111968:	11233380 	call	81123338 <__umodsi3>
8111196c:	b80b883a 	mov	r5,r23
81111970:	9009883a 	mov	r4,r18
81111974:	d8800115 	stw	r2,4(sp)
81111978:	11232d40 	call	811232d4 <__udivsi3>
8111197c:	ac07883a 	add	r3,r21,r16
81111980:	18c00043 	ldbu	r3,1(r3)
81111984:	880b883a 	mov	r5,r17
81111988:	000d883a 	mov	r6,zero
8111198c:	1a00010c 	andi	r8,r3,4
81111990:	0009883a 	mov	r4,zero
81111994:	02800044 	movi	r10,1
81111998:	027fffc4 	movi	r9,-1
8111199c:	d9c00117 	ldw	r7,4(sp)
811119a0:	40000e26 	beq	r8,zero,811119dc <_strtol_r+0x120>
811119a4:	843ff404 	addi	r16,r16,-48
811119a8:	8580120e 	bge	r16,r22,811119f4 <_strtol_r+0x138>
811119ac:	32400526 	beq	r6,r9,811119c4 <_strtol_r+0x108>
811119b0:	11002536 	bltu	r2,r4,81111a48 <_strtol_r+0x18c>
811119b4:	20802326 	beq	r4,r2,81111a44 <_strtol_r+0x188>
811119b8:	25c9383a 	mul	r4,r4,r23
811119bc:	01800044 	movi	r6,1
811119c0:	8109883a 	add	r4,r16,r4
811119c4:	2c000003 	ldbu	r16,0(r5)
811119c8:	29400044 	addi	r5,r5,1
811119cc:	ac07883a 	add	r3,r21,r16
811119d0:	18c00043 	ldbu	r3,1(r3)
811119d4:	1a00010c 	andi	r8,r3,4
811119d8:	403ff21e 	bne	r8,zero,811119a4 <__reset+0xfb0f19a4>
811119dc:	18c000cc 	andi	r3,r3,3
811119e0:	18000426 	beq	r3,zero,811119f4 <_strtol_r+0x138>
811119e4:	1a801a26 	beq	r3,r10,81111a50 <_strtol_r+0x194>
811119e8:	00c015c4 	movi	r3,87
811119ec:	80e1c83a 	sub	r16,r16,r3
811119f0:	85bfee16 	blt	r16,r22,811119ac <__reset+0xfb0f19ac>
811119f4:	00bfffc4 	movi	r2,-1
811119f8:	30801e26 	beq	r6,r2,81111a74 <_strtol_r+0x1b8>
811119fc:	e0001b1e 	bne	fp,zero,81111a6c <_strtol_r+0x1b0>
81111a00:	2005883a 	mov	r2,r4
81111a04:	98000326 	beq	r19,zero,81111a14 <_strtol_r+0x158>
81111a08:	3000211e 	bne	r6,zero,81111a90 <_strtol_r+0x1d4>
81111a0c:	a00b883a 	mov	r5,r20
81111a10:	99400015 	stw	r5,0(r19)
81111a14:	dfc00b17 	ldw	ra,44(sp)
81111a18:	df000a17 	ldw	fp,40(sp)
81111a1c:	ddc00917 	ldw	r23,36(sp)
81111a20:	dd800817 	ldw	r22,32(sp)
81111a24:	dd400717 	ldw	r21,28(sp)
81111a28:	dd000617 	ldw	r20,24(sp)
81111a2c:	dcc00517 	ldw	r19,20(sp)
81111a30:	dc800417 	ldw	r18,16(sp)
81111a34:	dc400317 	ldw	r17,12(sp)
81111a38:	dc000217 	ldw	r16,8(sp)
81111a3c:	dec00c04 	addi	sp,sp,48
81111a40:	f800283a 	ret
81111a44:	3c3fdc0e 	bge	r7,r16,811119b8 <__reset+0xfb0f19b8>
81111a48:	01bfffc4 	movi	r6,-1
81111a4c:	003fdd06 	br	811119c4 <__reset+0xfb0f19c4>
81111a50:	00c00dc4 	movi	r3,55
81111a54:	003fe506 	br	811119ec <__reset+0xfb0f19ec>
81111a58:	00800c04 	movi	r2,48
81111a5c:	80801626 	beq	r16,r2,81111ab8 <_strtol_r+0x1fc>
81111a60:	05800284 	movi	r22,10
81111a64:	b02f883a 	mov	r23,r22
81111a68:	003fba06 	br	81111954 <__reset+0xfb0f1954>
81111a6c:	0109c83a 	sub	r4,zero,r4
81111a70:	003fe306 	br	81111a00 <__reset+0xfb0f1a00>
81111a74:	d9000017 	ldw	r4,0(sp)
81111a78:	00c00884 	movi	r3,34
81111a7c:	e005003a 	cmpeq	r2,fp,zero
81111a80:	20c00015 	stw	r3,0(r4)
81111a84:	00e00034 	movhi	r3,32768
81111a88:	1885c83a 	sub	r2,r3,r2
81111a8c:	983fe126 	beq	r19,zero,81111a14 <__reset+0xfb0f1a14>
81111a90:	297fffc4 	addi	r5,r5,-1
81111a94:	003fde06 	br	81111a10 <__reset+0xfb0f1a10>
81111a98:	1c400084 	addi	r17,r3,2
81111a9c:	1c000043 	ldbu	r16,1(r3)
81111aa0:	07000044 	movi	fp,1
81111aa4:	003fa706 	br	81111944 <__reset+0xfb0f1944>
81111aa8:	1c400084 	addi	r17,r3,2
81111aac:	1c000043 	ldbu	r16,1(r3)
81111ab0:	0039883a 	mov	fp,zero
81111ab4:	003fa306 	br	81111944 <__reset+0xfb0f1944>
81111ab8:	88800003 	ldbu	r2,0(r17)
81111abc:	00c01604 	movi	r3,88
81111ac0:	108037cc 	andi	r2,r2,223
81111ac4:	10c00826 	beq	r2,r3,81111ae8 <_strtol_r+0x22c>
81111ac8:	05800204 	movi	r22,8
81111acc:	003fa006 	br	81111950 <__reset+0xfb0f1950>
81111ad0:	00800c04 	movi	r2,48
81111ad4:	80bf9e1e 	bne	r16,r2,81111950 <__reset+0xfb0f1950>
81111ad8:	88800003 	ldbu	r2,0(r17)
81111adc:	00c01604 	movi	r3,88
81111ae0:	108037cc 	andi	r2,r2,223
81111ae4:	10ff9a1e 	bne	r2,r3,81111950 <__reset+0xfb0f1950>
81111ae8:	05c00404 	movi	r23,16
81111aec:	8c000043 	ldbu	r16,1(r17)
81111af0:	b82d883a 	mov	r22,r23
81111af4:	8c400084 	addi	r17,r17,2
81111af8:	003f9606 	br	81111954 <__reset+0xfb0f1954>

81111afc <strtol>:
81111afc:	00a04534 	movhi	r2,33044
81111b00:	10ba2704 	addi	r2,r2,-5988
81111b04:	300f883a 	mov	r7,r6
81111b08:	280d883a 	mov	r6,r5
81111b0c:	200b883a 	mov	r5,r4
81111b10:	11000017 	ldw	r4,0(r2)
81111b14:	11118bc1 	jmpi	811118bc <_strtol_r>

81111b18 <___svfprintf_internal_r>:
81111b18:	deffb704 	addi	sp,sp,-292
81111b1c:	de00012e 	bgeu	sp,et,81111b24 <___svfprintf_internal_r+0xc>
81111b20:	003b68fa 	trap	3
81111b24:	dfc04815 	stw	ra,288(sp)
81111b28:	ddc04615 	stw	r23,280(sp)
81111b2c:	d9402c15 	stw	r5,176(sp)
81111b30:	d9003915 	stw	r4,228(sp)
81111b34:	302f883a 	mov	r23,r6
81111b38:	d9c02d15 	stw	r7,180(sp)
81111b3c:	df004715 	stw	fp,284(sp)
81111b40:	dd804515 	stw	r22,276(sp)
81111b44:	dd404415 	stw	r21,272(sp)
81111b48:	dd004315 	stw	r20,268(sp)
81111b4c:	dcc04215 	stw	r19,264(sp)
81111b50:	dc804115 	stw	r18,260(sp)
81111b54:	dc404015 	stw	r17,256(sp)
81111b58:	dc003f15 	stw	r16,252(sp)
81111b5c:	111a8a00 	call	8111a8a0 <_localeconv_r>
81111b60:	10800017 	ldw	r2,0(r2)
81111b64:	1009883a 	mov	r4,r2
81111b68:	d8803415 	stw	r2,208(sp)
81111b6c:	11118240 	call	81111824 <strlen>
81111b70:	d8c02c17 	ldw	r3,176(sp)
81111b74:	d8803815 	stw	r2,224(sp)
81111b78:	1880030b 	ldhu	r2,12(r3)
81111b7c:	1080200c 	andi	r2,r2,128
81111b80:	10000226 	beq	r2,zero,81111b8c <___svfprintf_internal_r+0x74>
81111b84:	18800417 	ldw	r2,16(r3)
81111b88:	10067f26 	beq	r2,zero,81113588 <___svfprintf_internal_r+0x1a70>
81111b8c:	dcc03917 	ldw	r19,228(sp)
81111b90:	d8c00404 	addi	r3,sp,16
81111b94:	05604534 	movhi	r21,33044
81111b98:	d9001e04 	addi	r4,sp,120
81111b9c:	ad712d84 	addi	r21,r21,-15178
81111ba0:	d8c01e15 	stw	r3,120(sp)
81111ba4:	d8002015 	stw	zero,128(sp)
81111ba8:	d8001f15 	stw	zero,124(sp)
81111bac:	d8003315 	stw	zero,204(sp)
81111bb0:	d8003615 	stw	zero,216(sp)
81111bb4:	d8003715 	stw	zero,220(sp)
81111bb8:	1811883a 	mov	r8,r3
81111bbc:	d8003a15 	stw	zero,232(sp)
81111bc0:	d8003b15 	stw	zero,236(sp)
81111bc4:	d8002f15 	stw	zero,188(sp)
81111bc8:	d9002815 	stw	r4,160(sp)
81111bcc:	b8800007 	ldb	r2,0(r23)
81111bd0:	10026726 	beq	r2,zero,81112570 <___svfprintf_internal_r+0xa58>
81111bd4:	00c00944 	movi	r3,37
81111bd8:	b821883a 	mov	r16,r23
81111bdc:	10c0021e 	bne	r2,r3,81111be8 <___svfprintf_internal_r+0xd0>
81111be0:	00001406 	br	81111c34 <___svfprintf_internal_r+0x11c>
81111be4:	10c00326 	beq	r2,r3,81111bf4 <___svfprintf_internal_r+0xdc>
81111be8:	84000044 	addi	r16,r16,1
81111bec:	80800007 	ldb	r2,0(r16)
81111bf0:	103ffc1e 	bne	r2,zero,81111be4 <__reset+0xfb0f1be4>
81111bf4:	85e3c83a 	sub	r17,r16,r23
81111bf8:	88000e26 	beq	r17,zero,81111c34 <___svfprintf_internal_r+0x11c>
81111bfc:	d8c02017 	ldw	r3,128(sp)
81111c00:	d8801f17 	ldw	r2,124(sp)
81111c04:	45c00015 	stw	r23,0(r8)
81111c08:	1c47883a 	add	r3,r3,r17
81111c0c:	10800044 	addi	r2,r2,1
81111c10:	d8c02015 	stw	r3,128(sp)
81111c14:	44400115 	stw	r17,4(r8)
81111c18:	d8801f15 	stw	r2,124(sp)
81111c1c:	00c001c4 	movi	r3,7
81111c20:	18809716 	blt	r3,r2,81111e80 <___svfprintf_internal_r+0x368>
81111c24:	42000204 	addi	r8,r8,8
81111c28:	d9402f17 	ldw	r5,188(sp)
81111c2c:	2c4b883a 	add	r5,r5,r17
81111c30:	d9402f15 	stw	r5,188(sp)
81111c34:	80800007 	ldb	r2,0(r16)
81111c38:	10009826 	beq	r2,zero,81111e9c <___svfprintf_internal_r+0x384>
81111c3c:	84400047 	ldb	r17,1(r16)
81111c40:	00bfffc4 	movi	r2,-1
81111c44:	85c00044 	addi	r23,r16,1
81111c48:	d8002785 	stb	zero,158(sp)
81111c4c:	0007883a 	mov	r3,zero
81111c50:	000f883a 	mov	r7,zero
81111c54:	d8802915 	stw	r2,164(sp)
81111c58:	d8003115 	stw	zero,196(sp)
81111c5c:	0025883a 	mov	r18,zero
81111c60:	01401604 	movi	r5,88
81111c64:	01800244 	movi	r6,9
81111c68:	02800a84 	movi	r10,42
81111c6c:	02401b04 	movi	r9,108
81111c70:	bdc00044 	addi	r23,r23,1
81111c74:	88bff804 	addi	r2,r17,-32
81111c78:	2882f036 	bltu	r5,r2,8111283c <___svfprintf_internal_r+0xd24>
81111c7c:	100490ba 	slli	r2,r2,2
81111c80:	01204474 	movhi	r4,33041
81111c84:	21072504 	addi	r4,r4,7316
81111c88:	1105883a 	add	r2,r2,r4
81111c8c:	10800017 	ldw	r2,0(r2)
81111c90:	1000683a 	jmp	r2
81111c94:	811127a4 	muli	r4,r16,17566
81111c98:	8111283c 	xorhi	r4,r16,17568
81111c9c:	8111283c 	xorhi	r4,r16,17568
81111ca0:	81112798 	cmpnei	r4,r16,17566
81111ca4:	8111283c 	xorhi	r4,r16,17568
81111ca8:	8111283c 	xorhi	r4,r16,17568
81111cac:	8111283c 	xorhi	r4,r16,17568
81111cb0:	8111283c 	xorhi	r4,r16,17568
81111cb4:	8111283c 	xorhi	r4,r16,17568
81111cb8:	8111283c 	xorhi	r4,r16,17568
81111cbc:	81111ef8 	rdprs	r4,r16,17531
81111cc0:	811126d4 	ori	r4,r16,17563
81111cc4:	8111283c 	xorhi	r4,r16,17568
81111cc8:	81111e08 	cmpgei	r4,r16,17528
81111ccc:	81111f20 	cmpeqi	r4,r16,17532
81111cd0:	8111283c 	xorhi	r4,r16,17568
81111cd4:	81111f94 	ori	r4,r16,17534
81111cd8:	81111f60 	cmpeqi	r4,r16,17533
81111cdc:	81111f60 	cmpeqi	r4,r16,17533
81111ce0:	81111f60 	cmpeqi	r4,r16,17533
81111ce4:	81111f60 	cmpeqi	r4,r16,17533
81111ce8:	81111f60 	cmpeqi	r4,r16,17533
81111cec:	81111f60 	cmpeqi	r4,r16,17533
81111cf0:	81111f60 	cmpeqi	r4,r16,17533
81111cf4:	81111f60 	cmpeqi	r4,r16,17533
81111cf8:	81111f60 	cmpeqi	r4,r16,17533
81111cfc:	8111283c 	xorhi	r4,r16,17568
81111d00:	8111283c 	xorhi	r4,r16,17568
81111d04:	8111283c 	xorhi	r4,r16,17568
81111d08:	8111283c 	xorhi	r4,r16,17568
81111d0c:	8111283c 	xorhi	r4,r16,17568
81111d10:	8111283c 	xorhi	r4,r16,17568
81111d14:	8111283c 	xorhi	r4,r16,17568
81111d18:	8111283c 	xorhi	r4,r16,17568
81111d1c:	8111283c 	xorhi	r4,r16,17568
81111d20:	8111283c 	xorhi	r4,r16,17568
81111d24:	8111204c 	andi	r4,r16,17537
81111d28:	81111fa0 	cmpeqi	r4,r16,17534
81111d2c:	8111283c 	xorhi	r4,r16,17568
81111d30:	81111fa0 	cmpeqi	r4,r16,17534
81111d34:	8111283c 	xorhi	r4,r16,17568
81111d38:	8111283c 	xorhi	r4,r16,17568
81111d3c:	8111283c 	xorhi	r4,r16,17568
81111d40:	8111283c 	xorhi	r4,r16,17568
81111d44:	81112040 	call	88111204 <__reset+0x20f1204>
81111d48:	8111283c 	xorhi	r4,r16,17568
81111d4c:	8111283c 	xorhi	r4,r16,17568
81111d50:	81112108 	cmpgei	r4,r16,17540
81111d54:	8111283c 	xorhi	r4,r16,17568
81111d58:	8111283c 	xorhi	r4,r16,17568
81111d5c:	8111283c 	xorhi	r4,r16,17568
81111d60:	8111283c 	xorhi	r4,r16,17568
81111d64:	8111283c 	xorhi	r4,r16,17568
81111d68:	81112578 	rdprs	r4,r16,17557
81111d6c:	8111283c 	xorhi	r4,r16,17568
81111d70:	8111283c 	xorhi	r4,r16,17568
81111d74:	811125d8 	cmpnei	r4,r16,17559
81111d78:	8111283c 	xorhi	r4,r16,17568
81111d7c:	8111283c 	xorhi	r4,r16,17568
81111d80:	8111283c 	xorhi	r4,r16,17568
81111d84:	8111283c 	xorhi	r4,r16,17568
81111d88:	8111283c 	xorhi	r4,r16,17568
81111d8c:	8111283c 	xorhi	r4,r16,17568
81111d90:	8111283c 	xorhi	r4,r16,17568
81111d94:	8111283c 	xorhi	r4,r16,17568
81111d98:	8111283c 	xorhi	r4,r16,17568
81111d9c:	8111283c 	xorhi	r4,r16,17568
81111da0:	81112688 	cmpgei	r4,r16,17562
81111da4:	811127c4 	addi	r4,r16,17567
81111da8:	81111fa0 	cmpeqi	r4,r16,17534
81111dac:	81111fa0 	cmpeqi	r4,r16,17534
81111db0:	81111fa0 	cmpeqi	r4,r16,17534
81111db4:	81112818 	cmpnei	r4,r16,17568
81111db8:	811127c4 	addi	r4,r16,17567
81111dbc:	8111283c 	xorhi	r4,r16,17568
81111dc0:	8111283c 	xorhi	r4,r16,17568
81111dc4:	811127d4 	ori	r4,r16,17567
81111dc8:	8111283c 	xorhi	r4,r16,17568
81111dcc:	811127e4 	muli	r4,r16,17567
81111dd0:	811126c4 	addi	r4,r16,17563
81111dd4:	81111e14 	ori	r4,r16,17528
81111dd8:	811126e4 	muli	r4,r16,17563
81111ddc:	8111283c 	xorhi	r4,r16,17568
81111de0:	811126f0 	cmpltui	r4,r16,17563
81111de4:	8111283c 	xorhi	r4,r16,17568
81111de8:	8111274c 	andi	r4,r16,17565
81111dec:	8111283c 	xorhi	r4,r16,17568
81111df0:	8111283c 	xorhi	r4,r16,17568
81111df4:	8111275c 	xori	r4,r16,17565
81111df8:	d9003117 	ldw	r4,196(sp)
81111dfc:	d8802d15 	stw	r2,180(sp)
81111e00:	0109c83a 	sub	r4,zero,r4
81111e04:	d9003115 	stw	r4,196(sp)
81111e08:	94800114 	ori	r18,r18,4
81111e0c:	bc400007 	ldb	r17,0(r23)
81111e10:	003f9706 	br	81111c70 <__reset+0xfb0f1c70>
81111e14:	00800c04 	movi	r2,48
81111e18:	d9002d17 	ldw	r4,180(sp)
81111e1c:	d9402917 	ldw	r5,164(sp)
81111e20:	d8802705 	stb	r2,156(sp)
81111e24:	00801e04 	movi	r2,120
81111e28:	d8802745 	stb	r2,157(sp)
81111e2c:	d8002785 	stb	zero,158(sp)
81111e30:	20c00104 	addi	r3,r4,4
81111e34:	25000017 	ldw	r20,0(r4)
81111e38:	002d883a 	mov	r22,zero
81111e3c:	90800094 	ori	r2,r18,2
81111e40:	28028616 	blt	r5,zero,8111285c <___svfprintf_internal_r+0xd44>
81111e44:	00bfdfc4 	movi	r2,-129
81111e48:	90a4703a 	and	r18,r18,r2
81111e4c:	d8c02d15 	stw	r3,180(sp)
81111e50:	94800094 	ori	r18,r18,2
81111e54:	a002731e 	bne	r20,zero,81112824 <___svfprintf_internal_r+0xd0c>
81111e58:	00a04534 	movhi	r2,33044
81111e5c:	10b12604 	addi	r2,r2,-15208
81111e60:	d8803a15 	stw	r2,232(sp)
81111e64:	04401e04 	movi	r17,120
81111e68:	d8c02917 	ldw	r3,164(sp)
81111e6c:	0039883a 	mov	fp,zero
81111e70:	1801d526 	beq	r3,zero,811125c8 <___svfprintf_internal_r+0xab0>
81111e74:	0029883a 	mov	r20,zero
81111e78:	002d883a 	mov	r22,zero
81111e7c:	0001f106 	br	81112644 <___svfprintf_internal_r+0xb2c>
81111e80:	d9402c17 	ldw	r5,176(sp)
81111e84:	d9801e04 	addi	r6,sp,120
81111e88:	9809883a 	mov	r4,r19
81111e8c:	111e5d80 	call	8111e5d8 <__ssprint_r>
81111e90:	1000081e 	bne	r2,zero,81111eb4 <___svfprintf_internal_r+0x39c>
81111e94:	da000404 	addi	r8,sp,16
81111e98:	003f6306 	br	81111c28 <__reset+0xfb0f1c28>
81111e9c:	d8802017 	ldw	r2,128(sp)
81111ea0:	10000426 	beq	r2,zero,81111eb4 <___svfprintf_internal_r+0x39c>
81111ea4:	d9402c17 	ldw	r5,176(sp)
81111ea8:	d9003917 	ldw	r4,228(sp)
81111eac:	d9801e04 	addi	r6,sp,120
81111eb0:	111e5d80 	call	8111e5d8 <__ssprint_r>
81111eb4:	d8802c17 	ldw	r2,176(sp)
81111eb8:	10c0030b 	ldhu	r3,12(r2)
81111ebc:	d8802f17 	ldw	r2,188(sp)
81111ec0:	18c0100c 	andi	r3,r3,64
81111ec4:	1805f51e 	bne	r3,zero,8111369c <___svfprintf_internal_r+0x1b84>
81111ec8:	dfc04817 	ldw	ra,288(sp)
81111ecc:	df004717 	ldw	fp,284(sp)
81111ed0:	ddc04617 	ldw	r23,280(sp)
81111ed4:	dd804517 	ldw	r22,276(sp)
81111ed8:	dd404417 	ldw	r21,272(sp)
81111edc:	dd004317 	ldw	r20,268(sp)
81111ee0:	dcc04217 	ldw	r19,264(sp)
81111ee4:	dc804117 	ldw	r18,260(sp)
81111ee8:	dc404017 	ldw	r17,256(sp)
81111eec:	dc003f17 	ldw	r16,252(sp)
81111ef0:	dec04904 	addi	sp,sp,292
81111ef4:	f800283a 	ret
81111ef8:	d8802d17 	ldw	r2,180(sp)
81111efc:	d9002d17 	ldw	r4,180(sp)
81111f00:	10800017 	ldw	r2,0(r2)
81111f04:	d8803115 	stw	r2,196(sp)
81111f08:	20800104 	addi	r2,r4,4
81111f0c:	d9003117 	ldw	r4,196(sp)
81111f10:	203fb916 	blt	r4,zero,81111df8 <__reset+0xfb0f1df8>
81111f14:	d8802d15 	stw	r2,180(sp)
81111f18:	bc400007 	ldb	r17,0(r23)
81111f1c:	003f5406 	br	81111c70 <__reset+0xfb0f1c70>
81111f20:	bc400007 	ldb	r17,0(r23)
81111f24:	bac00044 	addi	r11,r23,1
81111f28:	8a873926 	beq	r17,r10,81113c10 <___svfprintf_internal_r+0x20f8>
81111f2c:	88bff404 	addi	r2,r17,-48
81111f30:	0009883a 	mov	r4,zero
81111f34:	30868836 	bltu	r6,r2,81113958 <___svfprintf_internal_r+0x1e40>
81111f38:	5c400007 	ldb	r17,0(r11)
81111f3c:	210002a4 	muli	r4,r4,10
81111f40:	5dc00044 	addi	r23,r11,1
81111f44:	b817883a 	mov	r11,r23
81111f48:	2089883a 	add	r4,r4,r2
81111f4c:	88bff404 	addi	r2,r17,-48
81111f50:	30bff92e 	bgeu	r6,r2,81111f38 <__reset+0xfb0f1f38>
81111f54:	2005d716 	blt	r4,zero,811136b4 <___svfprintf_internal_r+0x1b9c>
81111f58:	d9002915 	stw	r4,164(sp)
81111f5c:	003f4506 	br	81111c74 <__reset+0xfb0f1c74>
81111f60:	b809883a 	mov	r4,r23
81111f64:	d8003115 	stw	zero,196(sp)
81111f68:	88bff404 	addi	r2,r17,-48
81111f6c:	0017883a 	mov	r11,zero
81111f70:	24400007 	ldb	r17,0(r4)
81111f74:	5ac002a4 	muli	r11,r11,10
81111f78:	bdc00044 	addi	r23,r23,1
81111f7c:	b809883a 	mov	r4,r23
81111f80:	12d7883a 	add	r11,r2,r11
81111f84:	88bff404 	addi	r2,r17,-48
81111f88:	30bff92e 	bgeu	r6,r2,81111f70 <__reset+0xfb0f1f70>
81111f8c:	dac03115 	stw	r11,196(sp)
81111f90:	003f3806 	br	81111c74 <__reset+0xfb0f1c74>
81111f94:	94802014 	ori	r18,r18,128
81111f98:	bc400007 	ldb	r17,0(r23)
81111f9c:	003f3406 	br	81111c70 <__reset+0xfb0f1c70>
81111fa0:	18c03fcc 	andi	r3,r3,255
81111fa4:	1807471e 	bne	r3,zero,81113cc4 <___svfprintf_internal_r+0x21ac>
81111fa8:	9080020c 	andi	r2,r18,8
81111fac:	10047d26 	beq	r2,zero,811131a4 <___svfprintf_internal_r+0x168c>
81111fb0:	d8c02d17 	ldw	r3,180(sp)
81111fb4:	d9002d17 	ldw	r4,180(sp)
81111fb8:	d9402d17 	ldw	r5,180(sp)
81111fbc:	18c00017 	ldw	r3,0(r3)
81111fc0:	21000117 	ldw	r4,4(r4)
81111fc4:	29400204 	addi	r5,r5,8
81111fc8:	d8c03615 	stw	r3,216(sp)
81111fcc:	d9003715 	stw	r4,220(sp)
81111fd0:	d9402d15 	stw	r5,180(sp)
81111fd4:	d9003617 	ldw	r4,216(sp)
81111fd8:	d9403717 	ldw	r5,220(sp)
81111fdc:	da003e15 	stw	r8,248(sp)
81111fe0:	04000044 	movi	r16,1
81111fe4:	111c3ec0 	call	8111c3ec <__fpclassifyd>
81111fe8:	da003e17 	ldw	r8,248(sp)
81111fec:	14044b1e 	bne	r2,r16,8111311c <___svfprintf_internal_r+0x1604>
81111ff0:	d9003617 	ldw	r4,216(sp)
81111ff4:	d9403717 	ldw	r5,220(sp)
81111ff8:	000d883a 	mov	r6,zero
81111ffc:	000f883a 	mov	r7,zero
81112000:	11248940 	call	81124894 <__ledf2>
81112004:	da003e17 	ldw	r8,248(sp)
81112008:	1005f316 	blt	r2,zero,811137d8 <___svfprintf_internal_r+0x1cc0>
8111200c:	df002783 	ldbu	fp,158(sp)
81112010:	008011c4 	movi	r2,71
81112014:	1445590e 	bge	r2,r17,8111357c <___svfprintf_internal_r+0x1a64>
81112018:	04204534 	movhi	r16,33044
8111201c:	84311e04 	addi	r16,r16,-15240
81112020:	00c000c4 	movi	r3,3
81112024:	00bfdfc4 	movi	r2,-129
81112028:	d8c02a15 	stw	r3,168(sp)
8111202c:	90a4703a 	and	r18,r18,r2
81112030:	d8c02e15 	stw	r3,184(sp)
81112034:	d8002915 	stw	zero,164(sp)
81112038:	d8003215 	stw	zero,200(sp)
8111203c:	00006606 	br	811121d8 <___svfprintf_internal_r+0x6c0>
81112040:	94800214 	ori	r18,r18,8
81112044:	bc400007 	ldb	r17,0(r23)
81112048:	003f0906 	br	81111c70 <__reset+0xfb0f1c70>
8111204c:	18c03fcc 	andi	r3,r3,255
81112050:	1807181e 	bne	r3,zero,81113cb4 <___svfprintf_internal_r+0x219c>
81112054:	94800414 	ori	r18,r18,16
81112058:	9080080c 	andi	r2,r18,32
8111205c:	10039626 	beq	r2,zero,81112eb8 <___svfprintf_internal_r+0x13a0>
81112060:	d9402d17 	ldw	r5,180(sp)
81112064:	28800117 	ldw	r2,4(r5)
81112068:	2d000017 	ldw	r20,0(r5)
8111206c:	29400204 	addi	r5,r5,8
81112070:	d9402d15 	stw	r5,180(sp)
81112074:	102d883a 	mov	r22,r2
81112078:	10039816 	blt	r2,zero,81112edc <___svfprintf_internal_r+0x13c4>
8111207c:	d9402917 	ldw	r5,164(sp)
81112080:	df002783 	ldbu	fp,158(sp)
81112084:	2803ab16 	blt	r5,zero,81112f34 <___svfprintf_internal_r+0x141c>
81112088:	00ffdfc4 	movi	r3,-129
8111208c:	a584b03a 	or	r2,r20,r22
81112090:	90e4703a 	and	r18,r18,r3
81112094:	10014a26 	beq	r2,zero,811125c0 <___svfprintf_internal_r+0xaa8>
81112098:	b0034b26 	beq	r22,zero,81112dc8 <___svfprintf_internal_r+0x12b0>
8111209c:	dc402a15 	stw	r17,168(sp)
811120a0:	dc001e04 	addi	r16,sp,120
811120a4:	b023883a 	mov	r17,r22
811120a8:	402d883a 	mov	r22,r8
811120ac:	a009883a 	mov	r4,r20
811120b0:	880b883a 	mov	r5,r17
811120b4:	01800284 	movi	r6,10
811120b8:	000f883a 	mov	r7,zero
811120bc:	1122c9c0 	call	81122c9c <__umoddi3>
811120c0:	10800c04 	addi	r2,r2,48
811120c4:	843fffc4 	addi	r16,r16,-1
811120c8:	a009883a 	mov	r4,r20
811120cc:	880b883a 	mov	r5,r17
811120d0:	80800005 	stb	r2,0(r16)
811120d4:	01800284 	movi	r6,10
811120d8:	000f883a 	mov	r7,zero
811120dc:	112271c0 	call	8112271c <__udivdi3>
811120e0:	1029883a 	mov	r20,r2
811120e4:	10c4b03a 	or	r2,r2,r3
811120e8:	1823883a 	mov	r17,r3
811120ec:	103fef1e 	bne	r2,zero,811120ac <__reset+0xfb0f20ac>
811120f0:	d8c02817 	ldw	r3,160(sp)
811120f4:	dc402a17 	ldw	r17,168(sp)
811120f8:	b011883a 	mov	r8,r22
811120fc:	1c07c83a 	sub	r3,r3,r16
81112100:	d8c02e15 	stw	r3,184(sp)
81112104:	00002e06 	br	811121c0 <___svfprintf_internal_r+0x6a8>
81112108:	18c03fcc 	andi	r3,r3,255
8111210c:	1806e71e 	bne	r3,zero,81113cac <___svfprintf_internal_r+0x2194>
81112110:	94800414 	ori	r18,r18,16
81112114:	9080080c 	andi	r2,r18,32
81112118:	1002d426 	beq	r2,zero,81112c6c <___svfprintf_internal_r+0x1154>
8111211c:	d9402d17 	ldw	r5,180(sp)
81112120:	d8c02917 	ldw	r3,164(sp)
81112124:	d8002785 	stb	zero,158(sp)
81112128:	28800204 	addi	r2,r5,8
8111212c:	2d000017 	ldw	r20,0(r5)
81112130:	2d800117 	ldw	r22,4(r5)
81112134:	18041516 	blt	r3,zero,8111318c <___svfprintf_internal_r+0x1674>
81112138:	013fdfc4 	movi	r4,-129
8111213c:	a586b03a 	or	r3,r20,r22
81112140:	d8802d15 	stw	r2,180(sp)
81112144:	9124703a 	and	r18,r18,r4
81112148:	1802d51e 	bne	r3,zero,81112ca0 <___svfprintf_internal_r+0x1188>
8111214c:	d9402917 	ldw	r5,164(sp)
81112150:	0039883a 	mov	fp,zero
81112154:	2806be26 	beq	r5,zero,81113c50 <___svfprintf_internal_r+0x2138>
81112158:	0029883a 	mov	r20,zero
8111215c:	002d883a 	mov	r22,zero
81112160:	dc001e04 	addi	r16,sp,120
81112164:	a006d0fa 	srli	r3,r20,3
81112168:	b008977a 	slli	r4,r22,29
8111216c:	b02cd0fa 	srli	r22,r22,3
81112170:	a50001cc 	andi	r20,r20,7
81112174:	a0800c04 	addi	r2,r20,48
81112178:	843fffc4 	addi	r16,r16,-1
8111217c:	20e8b03a 	or	r20,r4,r3
81112180:	80800005 	stb	r2,0(r16)
81112184:	a586b03a 	or	r3,r20,r22
81112188:	183ff61e 	bne	r3,zero,81112164 <__reset+0xfb0f2164>
8111218c:	90c0004c 	andi	r3,r18,1
81112190:	18013926 	beq	r3,zero,81112678 <___svfprintf_internal_r+0xb60>
81112194:	10803fcc 	andi	r2,r2,255
81112198:	1080201c 	xori	r2,r2,128
8111219c:	10bfe004 	addi	r2,r2,-128
811121a0:	00c00c04 	movi	r3,48
811121a4:	10c13426 	beq	r2,r3,81112678 <___svfprintf_internal_r+0xb60>
811121a8:	80ffffc5 	stb	r3,-1(r16)
811121ac:	d8c02817 	ldw	r3,160(sp)
811121b0:	80bfffc4 	addi	r2,r16,-1
811121b4:	1021883a 	mov	r16,r2
811121b8:	1887c83a 	sub	r3,r3,r2
811121bc:	d8c02e15 	stw	r3,184(sp)
811121c0:	d8802e17 	ldw	r2,184(sp)
811121c4:	d9002917 	ldw	r4,164(sp)
811121c8:	1100010e 	bge	r2,r4,811121d0 <___svfprintf_internal_r+0x6b8>
811121cc:	2005883a 	mov	r2,r4
811121d0:	d8802a15 	stw	r2,168(sp)
811121d4:	d8003215 	stw	zero,200(sp)
811121d8:	e7003fcc 	andi	fp,fp,255
811121dc:	e700201c 	xori	fp,fp,128
811121e0:	e73fe004 	addi	fp,fp,-128
811121e4:	e0000326 	beq	fp,zero,811121f4 <___svfprintf_internal_r+0x6dc>
811121e8:	d8c02a17 	ldw	r3,168(sp)
811121ec:	18c00044 	addi	r3,r3,1
811121f0:	d8c02a15 	stw	r3,168(sp)
811121f4:	90c0008c 	andi	r3,r18,2
811121f8:	d8c02b15 	stw	r3,172(sp)
811121fc:	18000326 	beq	r3,zero,8111220c <___svfprintf_internal_r+0x6f4>
81112200:	d8c02a17 	ldw	r3,168(sp)
81112204:	18c00084 	addi	r3,r3,2
81112208:	d8c02a15 	stw	r3,168(sp)
8111220c:	90c0210c 	andi	r3,r18,132
81112210:	d8c03015 	stw	r3,192(sp)
81112214:	1801a11e 	bne	r3,zero,8111289c <___svfprintf_internal_r+0xd84>
81112218:	d9003117 	ldw	r4,196(sp)
8111221c:	d8c02a17 	ldw	r3,168(sp)
81112220:	20e9c83a 	sub	r20,r4,r3
81112224:	05019d0e 	bge	zero,r20,8111289c <___svfprintf_internal_r+0xd84>
81112228:	02400404 	movi	r9,16
8111222c:	d8c02017 	ldw	r3,128(sp)
81112230:	d8801f17 	ldw	r2,124(sp)
81112234:	4d051b0e 	bge	r9,r20,811136a4 <___svfprintf_internal_r+0x1b8c>
81112238:	01604534 	movhi	r5,33044
8111223c:	29713184 	addi	r5,r5,-15162
81112240:	dc403c15 	stw	r17,240(sp)
81112244:	d9403515 	stw	r5,212(sp)
81112248:	a023883a 	mov	r17,r20
8111224c:	482d883a 	mov	r22,r9
81112250:	9029883a 	mov	r20,r18
81112254:	070001c4 	movi	fp,7
81112258:	8025883a 	mov	r18,r16
8111225c:	dc002c17 	ldw	r16,176(sp)
81112260:	00000306 	br	81112270 <___svfprintf_internal_r+0x758>
81112264:	8c7ffc04 	addi	r17,r17,-16
81112268:	42000204 	addi	r8,r8,8
8111226c:	b440130e 	bge	r22,r17,811122bc <___svfprintf_internal_r+0x7a4>
81112270:	01204534 	movhi	r4,33044
81112274:	18c00404 	addi	r3,r3,16
81112278:	10800044 	addi	r2,r2,1
8111227c:	21313184 	addi	r4,r4,-15162
81112280:	41000015 	stw	r4,0(r8)
81112284:	45800115 	stw	r22,4(r8)
81112288:	d8c02015 	stw	r3,128(sp)
8111228c:	d8801f15 	stw	r2,124(sp)
81112290:	e0bff40e 	bge	fp,r2,81112264 <__reset+0xfb0f2264>
81112294:	d9801e04 	addi	r6,sp,120
81112298:	800b883a 	mov	r5,r16
8111229c:	9809883a 	mov	r4,r19
811122a0:	111e5d80 	call	8111e5d8 <__ssprint_r>
811122a4:	103f031e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
811122a8:	8c7ffc04 	addi	r17,r17,-16
811122ac:	d8c02017 	ldw	r3,128(sp)
811122b0:	d8801f17 	ldw	r2,124(sp)
811122b4:	da000404 	addi	r8,sp,16
811122b8:	b47fed16 	blt	r22,r17,81112270 <__reset+0xfb0f2270>
811122bc:	9021883a 	mov	r16,r18
811122c0:	a025883a 	mov	r18,r20
811122c4:	8829883a 	mov	r20,r17
811122c8:	dc403c17 	ldw	r17,240(sp)
811122cc:	d9403517 	ldw	r5,212(sp)
811122d0:	a0c7883a 	add	r3,r20,r3
811122d4:	10800044 	addi	r2,r2,1
811122d8:	41400015 	stw	r5,0(r8)
811122dc:	45000115 	stw	r20,4(r8)
811122e0:	d8c02015 	stw	r3,128(sp)
811122e4:	d8801f15 	stw	r2,124(sp)
811122e8:	010001c4 	movi	r4,7
811122ec:	20829f16 	blt	r4,r2,81112d6c <___svfprintf_internal_r+0x1254>
811122f0:	df002787 	ldb	fp,158(sp)
811122f4:	42000204 	addi	r8,r8,8
811122f8:	e0000c26 	beq	fp,zero,8111232c <___svfprintf_internal_r+0x814>
811122fc:	d8801f17 	ldw	r2,124(sp)
81112300:	d9002784 	addi	r4,sp,158
81112304:	18c00044 	addi	r3,r3,1
81112308:	10800044 	addi	r2,r2,1
8111230c:	41000015 	stw	r4,0(r8)
81112310:	01000044 	movi	r4,1
81112314:	41000115 	stw	r4,4(r8)
81112318:	d8c02015 	stw	r3,128(sp)
8111231c:	d8801f15 	stw	r2,124(sp)
81112320:	010001c4 	movi	r4,7
81112324:	20823816 	blt	r4,r2,81112c08 <___svfprintf_internal_r+0x10f0>
81112328:	42000204 	addi	r8,r8,8
8111232c:	d8802b17 	ldw	r2,172(sp)
81112330:	10000c26 	beq	r2,zero,81112364 <___svfprintf_internal_r+0x84c>
81112334:	d8801f17 	ldw	r2,124(sp)
81112338:	d9002704 	addi	r4,sp,156
8111233c:	18c00084 	addi	r3,r3,2
81112340:	10800044 	addi	r2,r2,1
81112344:	41000015 	stw	r4,0(r8)
81112348:	01000084 	movi	r4,2
8111234c:	41000115 	stw	r4,4(r8)
81112350:	d8c02015 	stw	r3,128(sp)
81112354:	d8801f15 	stw	r2,124(sp)
81112358:	010001c4 	movi	r4,7
8111235c:	20823216 	blt	r4,r2,81112c28 <___svfprintf_internal_r+0x1110>
81112360:	42000204 	addi	r8,r8,8
81112364:	d9003017 	ldw	r4,192(sp)
81112368:	00802004 	movi	r2,128
8111236c:	20819726 	beq	r4,r2,811129cc <___svfprintf_internal_r+0xeb4>
81112370:	d9402917 	ldw	r5,164(sp)
81112374:	d8802e17 	ldw	r2,184(sp)
81112378:	28adc83a 	sub	r22,r5,r2
8111237c:	05802f0e 	bge	zero,r22,8111243c <___svfprintf_internal_r+0x924>
81112380:	07000404 	movi	fp,16
81112384:	d8801f17 	ldw	r2,124(sp)
81112388:	e583c00e 	bge	fp,r22,8111328c <___svfprintf_internal_r+0x1774>
8111238c:	01604534 	movhi	r5,33044
81112390:	29712d84 	addi	r5,r5,-15178
81112394:	dc402915 	stw	r17,164(sp)
81112398:	d9402b15 	stw	r5,172(sp)
8111239c:	b023883a 	mov	r17,r22
811123a0:	050001c4 	movi	r20,7
811123a4:	902d883a 	mov	r22,r18
811123a8:	8025883a 	mov	r18,r16
811123ac:	dc002c17 	ldw	r16,176(sp)
811123b0:	00000306 	br	811123c0 <___svfprintf_internal_r+0x8a8>
811123b4:	8c7ffc04 	addi	r17,r17,-16
811123b8:	42000204 	addi	r8,r8,8
811123bc:	e440110e 	bge	fp,r17,81112404 <___svfprintf_internal_r+0x8ec>
811123c0:	18c00404 	addi	r3,r3,16
811123c4:	10800044 	addi	r2,r2,1
811123c8:	45400015 	stw	r21,0(r8)
811123cc:	47000115 	stw	fp,4(r8)
811123d0:	d8c02015 	stw	r3,128(sp)
811123d4:	d8801f15 	stw	r2,124(sp)
811123d8:	a0bff60e 	bge	r20,r2,811123b4 <__reset+0xfb0f23b4>
811123dc:	d9801e04 	addi	r6,sp,120
811123e0:	800b883a 	mov	r5,r16
811123e4:	9809883a 	mov	r4,r19
811123e8:	111e5d80 	call	8111e5d8 <__ssprint_r>
811123ec:	103eb11e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
811123f0:	8c7ffc04 	addi	r17,r17,-16
811123f4:	d8c02017 	ldw	r3,128(sp)
811123f8:	d8801f17 	ldw	r2,124(sp)
811123fc:	da000404 	addi	r8,sp,16
81112400:	e47fef16 	blt	fp,r17,811123c0 <__reset+0xfb0f23c0>
81112404:	9021883a 	mov	r16,r18
81112408:	b025883a 	mov	r18,r22
8111240c:	882d883a 	mov	r22,r17
81112410:	dc402917 	ldw	r17,164(sp)
81112414:	d9002b17 	ldw	r4,172(sp)
81112418:	1d87883a 	add	r3,r3,r22
8111241c:	10800044 	addi	r2,r2,1
81112420:	41000015 	stw	r4,0(r8)
81112424:	45800115 	stw	r22,4(r8)
81112428:	d8c02015 	stw	r3,128(sp)
8111242c:	d8801f15 	stw	r2,124(sp)
81112430:	010001c4 	movi	r4,7
81112434:	2081ec16 	blt	r4,r2,81112be8 <___svfprintf_internal_r+0x10d0>
81112438:	42000204 	addi	r8,r8,8
8111243c:	9080400c 	andi	r2,r18,256
81112440:	1001181e 	bne	r2,zero,811128a4 <___svfprintf_internal_r+0xd8c>
81112444:	d9402e17 	ldw	r5,184(sp)
81112448:	d8801f17 	ldw	r2,124(sp)
8111244c:	44000015 	stw	r16,0(r8)
81112450:	1947883a 	add	r3,r3,r5
81112454:	10800044 	addi	r2,r2,1
81112458:	41400115 	stw	r5,4(r8)
8111245c:	d8c02015 	stw	r3,128(sp)
81112460:	d8801f15 	stw	r2,124(sp)
81112464:	010001c4 	movi	r4,7
81112468:	2081d116 	blt	r4,r2,81112bb0 <___svfprintf_internal_r+0x1098>
8111246c:	42000204 	addi	r8,r8,8
81112470:	9480010c 	andi	r18,r18,4
81112474:	90003226 	beq	r18,zero,81112540 <___svfprintf_internal_r+0xa28>
81112478:	d9403117 	ldw	r5,196(sp)
8111247c:	d8802a17 	ldw	r2,168(sp)
81112480:	28a1c83a 	sub	r16,r5,r2
81112484:	04002e0e 	bge	zero,r16,81112540 <___svfprintf_internal_r+0xa28>
81112488:	04400404 	movi	r17,16
8111248c:	d8801f17 	ldw	r2,124(sp)
81112490:	8c04b90e 	bge	r17,r16,81113778 <___svfprintf_internal_r+0x1c60>
81112494:	01604534 	movhi	r5,33044
81112498:	29713184 	addi	r5,r5,-15162
8111249c:	d9403515 	stw	r5,212(sp)
811124a0:	048001c4 	movi	r18,7
811124a4:	dd002c17 	ldw	r20,176(sp)
811124a8:	00000306 	br	811124b8 <___svfprintf_internal_r+0x9a0>
811124ac:	843ffc04 	addi	r16,r16,-16
811124b0:	42000204 	addi	r8,r8,8
811124b4:	8c00130e 	bge	r17,r16,81112504 <___svfprintf_internal_r+0x9ec>
811124b8:	01204534 	movhi	r4,33044
811124bc:	18c00404 	addi	r3,r3,16
811124c0:	10800044 	addi	r2,r2,1
811124c4:	21313184 	addi	r4,r4,-15162
811124c8:	41000015 	stw	r4,0(r8)
811124cc:	44400115 	stw	r17,4(r8)
811124d0:	d8c02015 	stw	r3,128(sp)
811124d4:	d8801f15 	stw	r2,124(sp)
811124d8:	90bff40e 	bge	r18,r2,811124ac <__reset+0xfb0f24ac>
811124dc:	d9801e04 	addi	r6,sp,120
811124e0:	a00b883a 	mov	r5,r20
811124e4:	9809883a 	mov	r4,r19
811124e8:	111e5d80 	call	8111e5d8 <__ssprint_r>
811124ec:	103e711e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
811124f0:	843ffc04 	addi	r16,r16,-16
811124f4:	d8c02017 	ldw	r3,128(sp)
811124f8:	d8801f17 	ldw	r2,124(sp)
811124fc:	da000404 	addi	r8,sp,16
81112500:	8c3fed16 	blt	r17,r16,811124b8 <__reset+0xfb0f24b8>
81112504:	d9403517 	ldw	r5,212(sp)
81112508:	1c07883a 	add	r3,r3,r16
8111250c:	10800044 	addi	r2,r2,1
81112510:	41400015 	stw	r5,0(r8)
81112514:	44000115 	stw	r16,4(r8)
81112518:	d8c02015 	stw	r3,128(sp)
8111251c:	d8801f15 	stw	r2,124(sp)
81112520:	010001c4 	movi	r4,7
81112524:	2080060e 	bge	r4,r2,81112540 <___svfprintf_internal_r+0xa28>
81112528:	d9402c17 	ldw	r5,176(sp)
8111252c:	d9801e04 	addi	r6,sp,120
81112530:	9809883a 	mov	r4,r19
81112534:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112538:	103e5e1e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
8111253c:	d8c02017 	ldw	r3,128(sp)
81112540:	d8803117 	ldw	r2,196(sp)
81112544:	d9002a17 	ldw	r4,168(sp)
81112548:	1100010e 	bge	r2,r4,81112550 <___svfprintf_internal_r+0xa38>
8111254c:	2005883a 	mov	r2,r4
81112550:	d9402f17 	ldw	r5,188(sp)
81112554:	288b883a 	add	r5,r5,r2
81112558:	d9402f15 	stw	r5,188(sp)
8111255c:	18019c1e 	bne	r3,zero,81112bd0 <___svfprintf_internal_r+0x10b8>
81112560:	b8800007 	ldb	r2,0(r23)
81112564:	d8001f15 	stw	zero,124(sp)
81112568:	da000404 	addi	r8,sp,16
8111256c:	103d991e 	bne	r2,zero,81111bd4 <__reset+0xfb0f1bd4>
81112570:	b821883a 	mov	r16,r23
81112574:	003daf06 	br	81111c34 <__reset+0xfb0f1c34>
81112578:	18c03fcc 	andi	r3,r3,255
8111257c:	1805c71e 	bne	r3,zero,81113c9c <___svfprintf_internal_r+0x2184>
81112580:	94800414 	ori	r18,r18,16
81112584:	9080080c 	andi	r2,r18,32
81112588:	10020126 	beq	r2,zero,81112d90 <___svfprintf_internal_r+0x1278>
8111258c:	d8802d17 	ldw	r2,180(sp)
81112590:	d9002917 	ldw	r4,164(sp)
81112594:	d8002785 	stb	zero,158(sp)
81112598:	10c00204 	addi	r3,r2,8
8111259c:	15000017 	ldw	r20,0(r2)
811125a0:	15800117 	ldw	r22,4(r2)
811125a4:	20038e16 	blt	r4,zero,811133e0 <___svfprintf_internal_r+0x18c8>
811125a8:	013fdfc4 	movi	r4,-129
811125ac:	a584b03a 	or	r2,r20,r22
811125b0:	d8c02d15 	stw	r3,180(sp)
811125b4:	9124703a 	and	r18,r18,r4
811125b8:	0039883a 	mov	fp,zero
811125bc:	103eb61e 	bne	r2,zero,81112098 <__reset+0xfb0f2098>
811125c0:	d8802917 	ldw	r2,164(sp)
811125c4:	1002c81e 	bne	r2,zero,811130e8 <___svfprintf_internal_r+0x15d0>
811125c8:	d8002915 	stw	zero,164(sp)
811125cc:	d8002e15 	stw	zero,184(sp)
811125d0:	dc001e04 	addi	r16,sp,120
811125d4:	003efa06 	br	811121c0 <__reset+0xfb0f21c0>
811125d8:	18c03fcc 	andi	r3,r3,255
811125dc:	1805ad1e 	bne	r3,zero,81113c94 <___svfprintf_internal_r+0x217c>
811125e0:	01604534 	movhi	r5,33044
811125e4:	29712104 	addi	r5,r5,-15228
811125e8:	d9403a15 	stw	r5,232(sp)
811125ec:	9080080c 	andi	r2,r18,32
811125f0:	10006126 	beq	r2,zero,81112778 <___svfprintf_internal_r+0xc60>
811125f4:	d8802d17 	ldw	r2,180(sp)
811125f8:	15000017 	ldw	r20,0(r2)
811125fc:	15800117 	ldw	r22,4(r2)
81112600:	10800204 	addi	r2,r2,8
81112604:	d8802d15 	stw	r2,180(sp)
81112608:	9080004c 	andi	r2,r18,1
8111260c:	10018e26 	beq	r2,zero,81112c48 <___svfprintf_internal_r+0x1130>
81112610:	a584b03a 	or	r2,r20,r22
81112614:	10030926 	beq	r2,zero,8111323c <___svfprintf_internal_r+0x1724>
81112618:	d8c02917 	ldw	r3,164(sp)
8111261c:	00800c04 	movi	r2,48
81112620:	d8802705 	stb	r2,156(sp)
81112624:	dc402745 	stb	r17,157(sp)
81112628:	d8002785 	stb	zero,158(sp)
8111262c:	90800094 	ori	r2,r18,2
81112630:	18048716 	blt	r3,zero,81113850 <___svfprintf_internal_r+0x1d38>
81112634:	00bfdfc4 	movi	r2,-129
81112638:	90a4703a 	and	r18,r18,r2
8111263c:	94800094 	ori	r18,r18,2
81112640:	0039883a 	mov	fp,zero
81112644:	d9003a17 	ldw	r4,232(sp)
81112648:	dc001e04 	addi	r16,sp,120
8111264c:	a08003cc 	andi	r2,r20,15
81112650:	b006973a 	slli	r3,r22,28
81112654:	2085883a 	add	r2,r4,r2
81112658:	a028d13a 	srli	r20,r20,4
8111265c:	10800003 	ldbu	r2,0(r2)
81112660:	b02cd13a 	srli	r22,r22,4
81112664:	843fffc4 	addi	r16,r16,-1
81112668:	1d28b03a 	or	r20,r3,r20
8111266c:	80800005 	stb	r2,0(r16)
81112670:	a584b03a 	or	r2,r20,r22
81112674:	103ff51e 	bne	r2,zero,8111264c <__reset+0xfb0f264c>
81112678:	d8c02817 	ldw	r3,160(sp)
8111267c:	1c07c83a 	sub	r3,r3,r16
81112680:	d8c02e15 	stw	r3,184(sp)
81112684:	003ece06 	br	811121c0 <__reset+0xfb0f21c0>
81112688:	d8c02d17 	ldw	r3,180(sp)
8111268c:	d9002d17 	ldw	r4,180(sp)
81112690:	d8002785 	stb	zero,158(sp)
81112694:	18800017 	ldw	r2,0(r3)
81112698:	21000104 	addi	r4,r4,4
8111269c:	00c00044 	movi	r3,1
811126a0:	d8c02a15 	stw	r3,168(sp)
811126a4:	d8801405 	stb	r2,80(sp)
811126a8:	d9002d15 	stw	r4,180(sp)
811126ac:	d8c02e15 	stw	r3,184(sp)
811126b0:	d8002915 	stw	zero,164(sp)
811126b4:	d8003215 	stw	zero,200(sp)
811126b8:	dc001404 	addi	r16,sp,80
811126bc:	0039883a 	mov	fp,zero
811126c0:	003ecc06 	br	811121f4 <__reset+0xfb0f21f4>
811126c4:	18c03fcc 	andi	r3,r3,255
811126c8:	183e9226 	beq	r3,zero,81112114 <__reset+0xfb0f2114>
811126cc:	d9c02785 	stb	r7,158(sp)
811126d0:	003e9006 	br	81112114 <__reset+0xfb0f2114>
811126d4:	00c00044 	movi	r3,1
811126d8:	01c00ac4 	movi	r7,43
811126dc:	bc400007 	ldb	r17,0(r23)
811126e0:	003d6306 	br	81111c70 <__reset+0xfb0f1c70>
811126e4:	94800814 	ori	r18,r18,32
811126e8:	bc400007 	ldb	r17,0(r23)
811126ec:	003d6006 	br	81111c70 <__reset+0xfb0f1c70>
811126f0:	d8c02d17 	ldw	r3,180(sp)
811126f4:	d8002785 	stb	zero,158(sp)
811126f8:	1c000017 	ldw	r16,0(r3)
811126fc:	1d000104 	addi	r20,r3,4
81112700:	80040f26 	beq	r16,zero,81113740 <___svfprintf_internal_r+0x1c28>
81112704:	d9002917 	ldw	r4,164(sp)
81112708:	2003dc16 	blt	r4,zero,8111367c <___svfprintf_internal_r+0x1b64>
8111270c:	200d883a 	mov	r6,r4
81112710:	000b883a 	mov	r5,zero
81112714:	8009883a 	mov	r4,r16
81112718:	da003e15 	stw	r8,248(sp)
8111271c:	111ab7c0 	call	8111ab7c <memchr>
81112720:	da003e17 	ldw	r8,248(sp)
81112724:	10045826 	beq	r2,zero,81113888 <___svfprintf_internal_r+0x1d70>
81112728:	1405c83a 	sub	r2,r2,r16
8111272c:	d8802e15 	stw	r2,184(sp)
81112730:	1003d816 	blt	r2,zero,81113694 <___svfprintf_internal_r+0x1b7c>
81112734:	df002783 	ldbu	fp,158(sp)
81112738:	d8802a15 	stw	r2,168(sp)
8111273c:	dd002d15 	stw	r20,180(sp)
81112740:	d8002915 	stw	zero,164(sp)
81112744:	d8003215 	stw	zero,200(sp)
81112748:	003ea306 	br	811121d8 <__reset+0xfb0f21d8>
8111274c:	18c03fcc 	andi	r3,r3,255
81112750:	183f8c26 	beq	r3,zero,81112584 <__reset+0xfb0f2584>
81112754:	d9c02785 	stb	r7,158(sp)
81112758:	003f8a06 	br	81112584 <__reset+0xfb0f2584>
8111275c:	18c03fcc 	andi	r3,r3,255
81112760:	1805631e 	bne	r3,zero,81113cf0 <___svfprintf_internal_r+0x21d8>
81112764:	01604534 	movhi	r5,33044
81112768:	29712604 	addi	r5,r5,-15208
8111276c:	d9403a15 	stw	r5,232(sp)
81112770:	9080080c 	andi	r2,r18,32
81112774:	103f9f1e 	bne	r2,zero,811125f4 <__reset+0xfb0f25f4>
81112778:	9080040c 	andi	r2,r18,16
8111277c:	10029c26 	beq	r2,zero,811131f0 <___svfprintf_internal_r+0x16d8>
81112780:	d8c02d17 	ldw	r3,180(sp)
81112784:	002d883a 	mov	r22,zero
81112788:	1d000017 	ldw	r20,0(r3)
8111278c:	18c00104 	addi	r3,r3,4
81112790:	d8c02d15 	stw	r3,180(sp)
81112794:	003f9c06 	br	81112608 <__reset+0xfb0f2608>
81112798:	94800054 	ori	r18,r18,1
8111279c:	bc400007 	ldb	r17,0(r23)
811127a0:	003d3306 	br	81111c70 <__reset+0xfb0f1c70>
811127a4:	38803fcc 	andi	r2,r7,255
811127a8:	1080201c 	xori	r2,r2,128
811127ac:	10bfe004 	addi	r2,r2,-128
811127b0:	1002971e 	bne	r2,zero,81113210 <___svfprintf_internal_r+0x16f8>
811127b4:	00c00044 	movi	r3,1
811127b8:	01c00804 	movi	r7,32
811127bc:	bc400007 	ldb	r17,0(r23)
811127c0:	003d2b06 	br	81111c70 <__reset+0xfb0f1c70>
811127c4:	18c03fcc 	andi	r3,r3,255
811127c8:	183e2326 	beq	r3,zero,81112058 <__reset+0xfb0f2058>
811127cc:	d9c02785 	stb	r7,158(sp)
811127d0:	003e2106 	br	81112058 <__reset+0xfb0f2058>
811127d4:	bc400007 	ldb	r17,0(r23)
811127d8:	8a430426 	beq	r17,r9,811133ec <___svfprintf_internal_r+0x18d4>
811127dc:	94800414 	ori	r18,r18,16
811127e0:	003d2306 	br	81111c70 <__reset+0xfb0f1c70>
811127e4:	18c03fcc 	andi	r3,r3,255
811127e8:	18053f1e 	bne	r3,zero,81113ce8 <___svfprintf_internal_r+0x21d0>
811127ec:	9080080c 	andi	r2,r18,32
811127f0:	10028926 	beq	r2,zero,81113218 <___svfprintf_internal_r+0x1700>
811127f4:	d9402d17 	ldw	r5,180(sp)
811127f8:	d9002f17 	ldw	r4,188(sp)
811127fc:	28800017 	ldw	r2,0(r5)
81112800:	2007d7fa 	srai	r3,r4,31
81112804:	29400104 	addi	r5,r5,4
81112808:	d9402d15 	stw	r5,180(sp)
8111280c:	11000015 	stw	r4,0(r2)
81112810:	10c00115 	stw	r3,4(r2)
81112814:	003ced06 	br	81111bcc <__reset+0xfb0f1bcc>
81112818:	94801014 	ori	r18,r18,64
8111281c:	bc400007 	ldb	r17,0(r23)
81112820:	003d1306 	br	81111c70 <__reset+0xfb0f1c70>
81112824:	01204534 	movhi	r4,33044
81112828:	21312604 	addi	r4,r4,-15208
8111282c:	0039883a 	mov	fp,zero
81112830:	d9003a15 	stw	r4,232(sp)
81112834:	04401e04 	movi	r17,120
81112838:	003f8206 	br	81112644 <__reset+0xfb0f2644>
8111283c:	18c03fcc 	andi	r3,r3,255
81112840:	1805221e 	bne	r3,zero,81113ccc <___svfprintf_internal_r+0x21b4>
81112844:	883d9526 	beq	r17,zero,81111e9c <__reset+0xfb0f1e9c>
81112848:	00c00044 	movi	r3,1
8111284c:	d8c02a15 	stw	r3,168(sp)
81112850:	dc401405 	stb	r17,80(sp)
81112854:	d8002785 	stb	zero,158(sp)
81112858:	003f9406 	br	811126ac <__reset+0xfb0f26ac>
8111285c:	01204534 	movhi	r4,33044
81112860:	21312604 	addi	r4,r4,-15208
81112864:	d9003a15 	stw	r4,232(sp)
81112868:	d8c02d15 	stw	r3,180(sp)
8111286c:	1025883a 	mov	r18,r2
81112870:	04401e04 	movi	r17,120
81112874:	a584b03a 	or	r2,r20,r22
81112878:	1000fa1e 	bne	r2,zero,81112c64 <___svfprintf_internal_r+0x114c>
8111287c:	0039883a 	mov	fp,zero
81112880:	00800084 	movi	r2,2
81112884:	10803fcc 	andi	r2,r2,255
81112888:	00c00044 	movi	r3,1
8111288c:	10c21626 	beq	r2,r3,811130e8 <___svfprintf_internal_r+0x15d0>
81112890:	00c00084 	movi	r3,2
81112894:	10fe301e 	bne	r2,r3,81112158 <__reset+0xfb0f2158>
81112898:	003d7606 	br	81111e74 <__reset+0xfb0f1e74>
8111289c:	d8c02017 	ldw	r3,128(sp)
811128a0:	003e9506 	br	811122f8 <__reset+0xfb0f22f8>
811128a4:	00801944 	movi	r2,101
811128a8:	14407c0e 	bge	r2,r17,81112a9c <___svfprintf_internal_r+0xf84>
811128ac:	d9003617 	ldw	r4,216(sp)
811128b0:	d9403717 	ldw	r5,220(sp)
811128b4:	000d883a 	mov	r6,zero
811128b8:	000f883a 	mov	r7,zero
811128bc:	d8c03d15 	stw	r3,244(sp)
811128c0:	da003e15 	stw	r8,248(sp)
811128c4:	11247300 	call	81124730 <__eqdf2>
811128c8:	d8c03d17 	ldw	r3,244(sp)
811128cc:	da003e17 	ldw	r8,248(sp)
811128d0:	1000f51e 	bne	r2,zero,81112ca8 <___svfprintf_internal_r+0x1190>
811128d4:	d8801f17 	ldw	r2,124(sp)
811128d8:	01204534 	movhi	r4,33044
811128dc:	21312d04 	addi	r4,r4,-15180
811128e0:	18c00044 	addi	r3,r3,1
811128e4:	10800044 	addi	r2,r2,1
811128e8:	41000015 	stw	r4,0(r8)
811128ec:	01000044 	movi	r4,1
811128f0:	41000115 	stw	r4,4(r8)
811128f4:	d8c02015 	stw	r3,128(sp)
811128f8:	d8801f15 	stw	r2,124(sp)
811128fc:	010001c4 	movi	r4,7
81112900:	20826616 	blt	r4,r2,8111329c <___svfprintf_internal_r+0x1784>
81112904:	42000204 	addi	r8,r8,8
81112908:	d8802617 	ldw	r2,152(sp)
8111290c:	d9403317 	ldw	r5,204(sp)
81112910:	11400216 	blt	r2,r5,8111291c <___svfprintf_internal_r+0xe04>
81112914:	9080004c 	andi	r2,r18,1
81112918:	103ed526 	beq	r2,zero,81112470 <__reset+0xfb0f2470>
8111291c:	d8803817 	ldw	r2,224(sp)
81112920:	d9003417 	ldw	r4,208(sp)
81112924:	d9403817 	ldw	r5,224(sp)
81112928:	1887883a 	add	r3,r3,r2
8111292c:	d8801f17 	ldw	r2,124(sp)
81112930:	41000015 	stw	r4,0(r8)
81112934:	41400115 	stw	r5,4(r8)
81112938:	10800044 	addi	r2,r2,1
8111293c:	d8c02015 	stw	r3,128(sp)
81112940:	d8801f15 	stw	r2,124(sp)
81112944:	010001c4 	movi	r4,7
81112948:	2082af16 	blt	r4,r2,81113408 <___svfprintf_internal_r+0x18f0>
8111294c:	42000204 	addi	r8,r8,8
81112950:	d8803317 	ldw	r2,204(sp)
81112954:	143fffc4 	addi	r16,r2,-1
81112958:	043ec50e 	bge	zero,r16,81112470 <__reset+0xfb0f2470>
8111295c:	04400404 	movi	r17,16
81112960:	d8801f17 	ldw	r2,124(sp)
81112964:	8c00860e 	bge	r17,r16,81112b80 <___svfprintf_internal_r+0x1068>
81112968:	01604534 	movhi	r5,33044
8111296c:	29712d84 	addi	r5,r5,-15178
81112970:	d9402b15 	stw	r5,172(sp)
81112974:	058001c4 	movi	r22,7
81112978:	dd002c17 	ldw	r20,176(sp)
8111297c:	00000306 	br	8111298c <___svfprintf_internal_r+0xe74>
81112980:	42000204 	addi	r8,r8,8
81112984:	843ffc04 	addi	r16,r16,-16
81112988:	8c00800e 	bge	r17,r16,81112b8c <___svfprintf_internal_r+0x1074>
8111298c:	18c00404 	addi	r3,r3,16
81112990:	10800044 	addi	r2,r2,1
81112994:	45400015 	stw	r21,0(r8)
81112998:	44400115 	stw	r17,4(r8)
8111299c:	d8c02015 	stw	r3,128(sp)
811129a0:	d8801f15 	stw	r2,124(sp)
811129a4:	b0bff60e 	bge	r22,r2,81112980 <__reset+0xfb0f2980>
811129a8:	d9801e04 	addi	r6,sp,120
811129ac:	a00b883a 	mov	r5,r20
811129b0:	9809883a 	mov	r4,r19
811129b4:	111e5d80 	call	8111e5d8 <__ssprint_r>
811129b8:	103d3e1e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
811129bc:	d8c02017 	ldw	r3,128(sp)
811129c0:	d8801f17 	ldw	r2,124(sp)
811129c4:	da000404 	addi	r8,sp,16
811129c8:	003fee06 	br	81112984 <__reset+0xfb0f2984>
811129cc:	d9403117 	ldw	r5,196(sp)
811129d0:	d8802a17 	ldw	r2,168(sp)
811129d4:	28adc83a 	sub	r22,r5,r2
811129d8:	05be650e 	bge	zero,r22,81112370 <__reset+0xfb0f2370>
811129dc:	07000404 	movi	fp,16
811129e0:	d8801f17 	ldw	r2,124(sp)
811129e4:	e583a20e 	bge	fp,r22,81113870 <___svfprintf_internal_r+0x1d58>
811129e8:	01604534 	movhi	r5,33044
811129ec:	29712d84 	addi	r5,r5,-15178
811129f0:	dc403015 	stw	r17,192(sp)
811129f4:	d9402b15 	stw	r5,172(sp)
811129f8:	b023883a 	mov	r17,r22
811129fc:	050001c4 	movi	r20,7
81112a00:	902d883a 	mov	r22,r18
81112a04:	8025883a 	mov	r18,r16
81112a08:	dc002c17 	ldw	r16,176(sp)
81112a0c:	00000306 	br	81112a1c <___svfprintf_internal_r+0xf04>
81112a10:	8c7ffc04 	addi	r17,r17,-16
81112a14:	42000204 	addi	r8,r8,8
81112a18:	e440110e 	bge	fp,r17,81112a60 <___svfprintf_internal_r+0xf48>
81112a1c:	18c00404 	addi	r3,r3,16
81112a20:	10800044 	addi	r2,r2,1
81112a24:	45400015 	stw	r21,0(r8)
81112a28:	47000115 	stw	fp,4(r8)
81112a2c:	d8c02015 	stw	r3,128(sp)
81112a30:	d8801f15 	stw	r2,124(sp)
81112a34:	a0bff60e 	bge	r20,r2,81112a10 <__reset+0xfb0f2a10>
81112a38:	d9801e04 	addi	r6,sp,120
81112a3c:	800b883a 	mov	r5,r16
81112a40:	9809883a 	mov	r4,r19
81112a44:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112a48:	103d1a1e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81112a4c:	8c7ffc04 	addi	r17,r17,-16
81112a50:	d8c02017 	ldw	r3,128(sp)
81112a54:	d8801f17 	ldw	r2,124(sp)
81112a58:	da000404 	addi	r8,sp,16
81112a5c:	e47fef16 	blt	fp,r17,81112a1c <__reset+0xfb0f2a1c>
81112a60:	9021883a 	mov	r16,r18
81112a64:	b025883a 	mov	r18,r22
81112a68:	882d883a 	mov	r22,r17
81112a6c:	dc403017 	ldw	r17,192(sp)
81112a70:	d9002b17 	ldw	r4,172(sp)
81112a74:	1d87883a 	add	r3,r3,r22
81112a78:	10800044 	addi	r2,r2,1
81112a7c:	41000015 	stw	r4,0(r8)
81112a80:	45800115 	stw	r22,4(r8)
81112a84:	d8c02015 	stw	r3,128(sp)
81112a88:	d8801f15 	stw	r2,124(sp)
81112a8c:	010001c4 	movi	r4,7
81112a90:	20819a16 	blt	r4,r2,811130fc <___svfprintf_internal_r+0x15e4>
81112a94:	42000204 	addi	r8,r8,8
81112a98:	003e3506 	br	81112370 <__reset+0xfb0f2370>
81112a9c:	d9403317 	ldw	r5,204(sp)
81112aa0:	00800044 	movi	r2,1
81112aa4:	18c00044 	addi	r3,r3,1
81112aa8:	1141710e 	bge	r2,r5,81113070 <___svfprintf_internal_r+0x1558>
81112aac:	dc401f17 	ldw	r17,124(sp)
81112ab0:	00800044 	movi	r2,1
81112ab4:	40800115 	stw	r2,4(r8)
81112ab8:	8c400044 	addi	r17,r17,1
81112abc:	44000015 	stw	r16,0(r8)
81112ac0:	d8c02015 	stw	r3,128(sp)
81112ac4:	dc401f15 	stw	r17,124(sp)
81112ac8:	008001c4 	movi	r2,7
81112acc:	14417416 	blt	r2,r17,811130a0 <___svfprintf_internal_r+0x1588>
81112ad0:	42000204 	addi	r8,r8,8
81112ad4:	d8803817 	ldw	r2,224(sp)
81112ad8:	d9003417 	ldw	r4,208(sp)
81112adc:	8c400044 	addi	r17,r17,1
81112ae0:	10c7883a 	add	r3,r2,r3
81112ae4:	40800115 	stw	r2,4(r8)
81112ae8:	41000015 	stw	r4,0(r8)
81112aec:	d8c02015 	stw	r3,128(sp)
81112af0:	dc401f15 	stw	r17,124(sp)
81112af4:	008001c4 	movi	r2,7
81112af8:	14417216 	blt	r2,r17,811130c4 <___svfprintf_internal_r+0x15ac>
81112afc:	45800204 	addi	r22,r8,8
81112b00:	d9003617 	ldw	r4,216(sp)
81112b04:	d9403717 	ldw	r5,220(sp)
81112b08:	000d883a 	mov	r6,zero
81112b0c:	000f883a 	mov	r7,zero
81112b10:	d8c03d15 	stw	r3,244(sp)
81112b14:	11247300 	call	81124730 <__eqdf2>
81112b18:	d8c03d17 	ldw	r3,244(sp)
81112b1c:	1000b326 	beq	r2,zero,81112dec <___svfprintf_internal_r+0x12d4>
81112b20:	d9403317 	ldw	r5,204(sp)
81112b24:	84000044 	addi	r16,r16,1
81112b28:	8c400044 	addi	r17,r17,1
81112b2c:	28bfffc4 	addi	r2,r5,-1
81112b30:	1887883a 	add	r3,r3,r2
81112b34:	b0800115 	stw	r2,4(r22)
81112b38:	b4000015 	stw	r16,0(r22)
81112b3c:	d8c02015 	stw	r3,128(sp)
81112b40:	dc401f15 	stw	r17,124(sp)
81112b44:	008001c4 	movi	r2,7
81112b48:	1440d216 	blt	r2,r17,81112e94 <___svfprintf_internal_r+0x137c>
81112b4c:	b5800204 	addi	r22,r22,8
81112b50:	d9003b17 	ldw	r4,236(sp)
81112b54:	df0022c4 	addi	fp,sp,139
81112b58:	8c400044 	addi	r17,r17,1
81112b5c:	20c7883a 	add	r3,r4,r3
81112b60:	b7000015 	stw	fp,0(r22)
81112b64:	b1000115 	stw	r4,4(r22)
81112b68:	d8c02015 	stw	r3,128(sp)
81112b6c:	dc401f15 	stw	r17,124(sp)
81112b70:	008001c4 	movi	r2,7
81112b74:	14400e16 	blt	r2,r17,81112bb0 <___svfprintf_internal_r+0x1098>
81112b78:	b2000204 	addi	r8,r22,8
81112b7c:	003e3c06 	br	81112470 <__reset+0xfb0f2470>
81112b80:	01204534 	movhi	r4,33044
81112b84:	21312d84 	addi	r4,r4,-15178
81112b88:	d9002b15 	stw	r4,172(sp)
81112b8c:	d9002b17 	ldw	r4,172(sp)
81112b90:	1c07883a 	add	r3,r3,r16
81112b94:	44000115 	stw	r16,4(r8)
81112b98:	41000015 	stw	r4,0(r8)
81112b9c:	10800044 	addi	r2,r2,1
81112ba0:	d8c02015 	stw	r3,128(sp)
81112ba4:	d8801f15 	stw	r2,124(sp)
81112ba8:	010001c4 	movi	r4,7
81112bac:	20be2f0e 	bge	r4,r2,8111246c <__reset+0xfb0f246c>
81112bb0:	d9402c17 	ldw	r5,176(sp)
81112bb4:	d9801e04 	addi	r6,sp,120
81112bb8:	9809883a 	mov	r4,r19
81112bbc:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112bc0:	103cbc1e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81112bc4:	d8c02017 	ldw	r3,128(sp)
81112bc8:	da000404 	addi	r8,sp,16
81112bcc:	003e2806 	br	81112470 <__reset+0xfb0f2470>
81112bd0:	d9402c17 	ldw	r5,176(sp)
81112bd4:	d9801e04 	addi	r6,sp,120
81112bd8:	9809883a 	mov	r4,r19
81112bdc:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112be0:	103e5f26 	beq	r2,zero,81112560 <__reset+0xfb0f2560>
81112be4:	003cb306 	br	81111eb4 <__reset+0xfb0f1eb4>
81112be8:	d9402c17 	ldw	r5,176(sp)
81112bec:	d9801e04 	addi	r6,sp,120
81112bf0:	9809883a 	mov	r4,r19
81112bf4:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112bf8:	103cae1e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81112bfc:	d8c02017 	ldw	r3,128(sp)
81112c00:	da000404 	addi	r8,sp,16
81112c04:	003e0d06 	br	8111243c <__reset+0xfb0f243c>
81112c08:	d9402c17 	ldw	r5,176(sp)
81112c0c:	d9801e04 	addi	r6,sp,120
81112c10:	9809883a 	mov	r4,r19
81112c14:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112c18:	103ca61e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81112c1c:	d8c02017 	ldw	r3,128(sp)
81112c20:	da000404 	addi	r8,sp,16
81112c24:	003dc106 	br	8111232c <__reset+0xfb0f232c>
81112c28:	d9402c17 	ldw	r5,176(sp)
81112c2c:	d9801e04 	addi	r6,sp,120
81112c30:	9809883a 	mov	r4,r19
81112c34:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112c38:	103c9e1e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81112c3c:	d8c02017 	ldw	r3,128(sp)
81112c40:	da000404 	addi	r8,sp,16
81112c44:	003dc706 	br	81112364 <__reset+0xfb0f2364>
81112c48:	d8802917 	ldw	r2,164(sp)
81112c4c:	d8002785 	stb	zero,158(sp)
81112c50:	103f0816 	blt	r2,zero,81112874 <__reset+0xfb0f2874>
81112c54:	00ffdfc4 	movi	r3,-129
81112c58:	a584b03a 	or	r2,r20,r22
81112c5c:	90e4703a 	and	r18,r18,r3
81112c60:	103c8126 	beq	r2,zero,81111e68 <__reset+0xfb0f1e68>
81112c64:	0039883a 	mov	fp,zero
81112c68:	003e7606 	br	81112644 <__reset+0xfb0f2644>
81112c6c:	9080040c 	andi	r2,r18,16
81112c70:	10013d26 	beq	r2,zero,81113168 <___svfprintf_internal_r+0x1650>
81112c74:	d9002d17 	ldw	r4,180(sp)
81112c78:	d9402917 	ldw	r5,164(sp)
81112c7c:	d8002785 	stb	zero,158(sp)
81112c80:	20800104 	addi	r2,r4,4
81112c84:	25000017 	ldw	r20,0(r4)
81112c88:	002d883a 	mov	r22,zero
81112c8c:	28013f16 	blt	r5,zero,8111318c <___svfprintf_internal_r+0x1674>
81112c90:	00ffdfc4 	movi	r3,-129
81112c94:	d8802d15 	stw	r2,180(sp)
81112c98:	90e4703a 	and	r18,r18,r3
81112c9c:	a03d2b26 	beq	r20,zero,8111214c <__reset+0xfb0f214c>
81112ca0:	0039883a 	mov	fp,zero
81112ca4:	003d2e06 	br	81112160 <__reset+0xfb0f2160>
81112ca8:	dc402617 	ldw	r17,152(sp)
81112cac:	0441830e 	bge	zero,r17,811132bc <___svfprintf_internal_r+0x17a4>
81112cb0:	dc403217 	ldw	r17,200(sp)
81112cb4:	d8803317 	ldw	r2,204(sp)
81112cb8:	1440010e 	bge	r2,r17,81112cc0 <___svfprintf_internal_r+0x11a8>
81112cbc:	1023883a 	mov	r17,r2
81112cc0:	04400a0e 	bge	zero,r17,81112cec <___svfprintf_internal_r+0x11d4>
81112cc4:	d8801f17 	ldw	r2,124(sp)
81112cc8:	1c47883a 	add	r3,r3,r17
81112ccc:	44000015 	stw	r16,0(r8)
81112cd0:	10800044 	addi	r2,r2,1
81112cd4:	44400115 	stw	r17,4(r8)
81112cd8:	d8c02015 	stw	r3,128(sp)
81112cdc:	d8801f15 	stw	r2,124(sp)
81112ce0:	010001c4 	movi	r4,7
81112ce4:	20827516 	blt	r4,r2,811136bc <___svfprintf_internal_r+0x1ba4>
81112ce8:	42000204 	addi	r8,r8,8
81112cec:	88027b16 	blt	r17,zero,811136dc <___svfprintf_internal_r+0x1bc4>
81112cf0:	d9003217 	ldw	r4,200(sp)
81112cf4:	2463c83a 	sub	r17,r4,r17
81112cf8:	0440990e 	bge	zero,r17,81112f60 <___svfprintf_internal_r+0x1448>
81112cfc:	05800404 	movi	r22,16
81112d00:	d8801f17 	ldw	r2,124(sp)
81112d04:	b441530e 	bge	r22,r17,81113254 <___svfprintf_internal_r+0x173c>
81112d08:	01204534 	movhi	r4,33044
81112d0c:	21312d84 	addi	r4,r4,-15178
81112d10:	d9002b15 	stw	r4,172(sp)
81112d14:	070001c4 	movi	fp,7
81112d18:	dd002c17 	ldw	r20,176(sp)
81112d1c:	00000306 	br	81112d2c <___svfprintf_internal_r+0x1214>
81112d20:	42000204 	addi	r8,r8,8
81112d24:	8c7ffc04 	addi	r17,r17,-16
81112d28:	b4414d0e 	bge	r22,r17,81113260 <___svfprintf_internal_r+0x1748>
81112d2c:	18c00404 	addi	r3,r3,16
81112d30:	10800044 	addi	r2,r2,1
81112d34:	45400015 	stw	r21,0(r8)
81112d38:	45800115 	stw	r22,4(r8)
81112d3c:	d8c02015 	stw	r3,128(sp)
81112d40:	d8801f15 	stw	r2,124(sp)
81112d44:	e0bff60e 	bge	fp,r2,81112d20 <__reset+0xfb0f2d20>
81112d48:	d9801e04 	addi	r6,sp,120
81112d4c:	a00b883a 	mov	r5,r20
81112d50:	9809883a 	mov	r4,r19
81112d54:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112d58:	103c561e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81112d5c:	d8c02017 	ldw	r3,128(sp)
81112d60:	d8801f17 	ldw	r2,124(sp)
81112d64:	da000404 	addi	r8,sp,16
81112d68:	003fee06 	br	81112d24 <__reset+0xfb0f2d24>
81112d6c:	d9402c17 	ldw	r5,176(sp)
81112d70:	d9801e04 	addi	r6,sp,120
81112d74:	9809883a 	mov	r4,r19
81112d78:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112d7c:	103c4d1e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81112d80:	d8c02017 	ldw	r3,128(sp)
81112d84:	df002787 	ldb	fp,158(sp)
81112d88:	da000404 	addi	r8,sp,16
81112d8c:	003d5a06 	br	811122f8 <__reset+0xfb0f22f8>
81112d90:	9080040c 	andi	r2,r18,16
81112d94:	10005c26 	beq	r2,zero,81112f08 <___svfprintf_internal_r+0x13f0>
81112d98:	d9402d17 	ldw	r5,180(sp)
81112d9c:	d8c02917 	ldw	r3,164(sp)
81112da0:	d8002785 	stb	zero,158(sp)
81112da4:	28800104 	addi	r2,r5,4
81112da8:	2d000017 	ldw	r20,0(r5)
81112dac:	002d883a 	mov	r22,zero
81112db0:	18005e16 	blt	r3,zero,81112f2c <___svfprintf_internal_r+0x1414>
81112db4:	00ffdfc4 	movi	r3,-129
81112db8:	d8802d15 	stw	r2,180(sp)
81112dbc:	90e4703a 	and	r18,r18,r3
81112dc0:	0039883a 	mov	fp,zero
81112dc4:	a03dfe26 	beq	r20,zero,811125c0 <__reset+0xfb0f25c0>
81112dc8:	00800244 	movi	r2,9
81112dcc:	153cb336 	bltu	r2,r20,8111209c <__reset+0xfb0f209c>
81112dd0:	a5000c04 	addi	r20,r20,48
81112dd4:	dc001dc4 	addi	r16,sp,119
81112dd8:	dd001dc5 	stb	r20,119(sp)
81112ddc:	d8c02817 	ldw	r3,160(sp)
81112de0:	1c07c83a 	sub	r3,r3,r16
81112de4:	d8c02e15 	stw	r3,184(sp)
81112de8:	003cf506 	br	811121c0 <__reset+0xfb0f21c0>
81112dec:	d8803317 	ldw	r2,204(sp)
81112df0:	143fffc4 	addi	r16,r2,-1
81112df4:	043f560e 	bge	zero,r16,81112b50 <__reset+0xfb0f2b50>
81112df8:	07000404 	movi	fp,16
81112dfc:	e403530e 	bge	fp,r16,81113b4c <___svfprintf_internal_r+0x2034>
81112e00:	01604534 	movhi	r5,33044
81112e04:	29712d84 	addi	r5,r5,-15178
81112e08:	d9402b15 	stw	r5,172(sp)
81112e0c:	01c001c4 	movi	r7,7
81112e10:	dd002c17 	ldw	r20,176(sp)
81112e14:	00000306 	br	81112e24 <___svfprintf_internal_r+0x130c>
81112e18:	843ffc04 	addi	r16,r16,-16
81112e1c:	b5800204 	addi	r22,r22,8
81112e20:	e400130e 	bge	fp,r16,81112e70 <___svfprintf_internal_r+0x1358>
81112e24:	18c00404 	addi	r3,r3,16
81112e28:	8c400044 	addi	r17,r17,1
81112e2c:	b5400015 	stw	r21,0(r22)
81112e30:	b7000115 	stw	fp,4(r22)
81112e34:	d8c02015 	stw	r3,128(sp)
81112e38:	dc401f15 	stw	r17,124(sp)
81112e3c:	3c7ff60e 	bge	r7,r17,81112e18 <__reset+0xfb0f2e18>
81112e40:	d9801e04 	addi	r6,sp,120
81112e44:	a00b883a 	mov	r5,r20
81112e48:	9809883a 	mov	r4,r19
81112e4c:	d9c03d15 	stw	r7,244(sp)
81112e50:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112e54:	d9c03d17 	ldw	r7,244(sp)
81112e58:	103c161e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81112e5c:	843ffc04 	addi	r16,r16,-16
81112e60:	d8c02017 	ldw	r3,128(sp)
81112e64:	dc401f17 	ldw	r17,124(sp)
81112e68:	dd800404 	addi	r22,sp,16
81112e6c:	e43fed16 	blt	fp,r16,81112e24 <__reset+0xfb0f2e24>
81112e70:	d8802b17 	ldw	r2,172(sp)
81112e74:	1c07883a 	add	r3,r3,r16
81112e78:	8c400044 	addi	r17,r17,1
81112e7c:	b0800015 	stw	r2,0(r22)
81112e80:	b4000115 	stw	r16,4(r22)
81112e84:	d8c02015 	stw	r3,128(sp)
81112e88:	dc401f15 	stw	r17,124(sp)
81112e8c:	008001c4 	movi	r2,7
81112e90:	147f2e0e 	bge	r2,r17,81112b4c <__reset+0xfb0f2b4c>
81112e94:	d9402c17 	ldw	r5,176(sp)
81112e98:	d9801e04 	addi	r6,sp,120
81112e9c:	9809883a 	mov	r4,r19
81112ea0:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112ea4:	103c031e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81112ea8:	d8c02017 	ldw	r3,128(sp)
81112eac:	dc401f17 	ldw	r17,124(sp)
81112eb0:	dd800404 	addi	r22,sp,16
81112eb4:	003f2606 	br	81112b50 <__reset+0xfb0f2b50>
81112eb8:	9080040c 	andi	r2,r18,16
81112ebc:	1000c326 	beq	r2,zero,811131cc <___svfprintf_internal_r+0x16b4>
81112ec0:	d8802d17 	ldw	r2,180(sp)
81112ec4:	15000017 	ldw	r20,0(r2)
81112ec8:	10800104 	addi	r2,r2,4
81112ecc:	d8802d15 	stw	r2,180(sp)
81112ed0:	a02dd7fa 	srai	r22,r20,31
81112ed4:	b005883a 	mov	r2,r22
81112ed8:	103c680e 	bge	r2,zero,8111207c <__reset+0xfb0f207c>
81112edc:	0529c83a 	sub	r20,zero,r20
81112ee0:	a004c03a 	cmpne	r2,r20,zero
81112ee4:	05adc83a 	sub	r22,zero,r22
81112ee8:	b0adc83a 	sub	r22,r22,r2
81112eec:	d8802917 	ldw	r2,164(sp)
81112ef0:	07000b44 	movi	fp,45
81112ef4:	df002785 	stb	fp,158(sp)
81112ef8:	10022e16 	blt	r2,zero,811137b4 <___svfprintf_internal_r+0x1c9c>
81112efc:	00bfdfc4 	movi	r2,-129
81112f00:	90a4703a 	and	r18,r18,r2
81112f04:	003c6406 	br	81112098 <__reset+0xfb0f2098>
81112f08:	9080100c 	andi	r2,r18,64
81112f0c:	d8002785 	stb	zero,158(sp)
81112f10:	10012526 	beq	r2,zero,811133a8 <___svfprintf_internal_r+0x1890>
81112f14:	d9002d17 	ldw	r4,180(sp)
81112f18:	d9402917 	ldw	r5,164(sp)
81112f1c:	002d883a 	mov	r22,zero
81112f20:	20800104 	addi	r2,r4,4
81112f24:	2500000b 	ldhu	r20,0(r4)
81112f28:	283fa20e 	bge	r5,zero,81112db4 <__reset+0xfb0f2db4>
81112f2c:	d8802d15 	stw	r2,180(sp)
81112f30:	0039883a 	mov	fp,zero
81112f34:	a584b03a 	or	r2,r20,r22
81112f38:	103c571e 	bne	r2,zero,81112098 <__reset+0xfb0f2098>
81112f3c:	00800044 	movi	r2,1
81112f40:	003e5006 	br	81112884 <__reset+0xfb0f2884>
81112f44:	d9402c17 	ldw	r5,176(sp)
81112f48:	d9801e04 	addi	r6,sp,120
81112f4c:	9809883a 	mov	r4,r19
81112f50:	111e5d80 	call	8111e5d8 <__ssprint_r>
81112f54:	103bd71e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81112f58:	d8c02017 	ldw	r3,128(sp)
81112f5c:	da000404 	addi	r8,sp,16
81112f60:	d9003217 	ldw	r4,200(sp)
81112f64:	d8802617 	ldw	r2,152(sp)
81112f68:	d9403317 	ldw	r5,204(sp)
81112f6c:	8123883a 	add	r17,r16,r4
81112f70:	11400216 	blt	r2,r5,81112f7c <___svfprintf_internal_r+0x1464>
81112f74:	9100004c 	andi	r4,r18,1
81112f78:	20000d26 	beq	r4,zero,81112fb0 <___svfprintf_internal_r+0x1498>
81112f7c:	d9003817 	ldw	r4,224(sp)
81112f80:	d9403417 	ldw	r5,208(sp)
81112f84:	1907883a 	add	r3,r3,r4
81112f88:	d9001f17 	ldw	r4,124(sp)
81112f8c:	41400015 	stw	r5,0(r8)
81112f90:	d9403817 	ldw	r5,224(sp)
81112f94:	21000044 	addi	r4,r4,1
81112f98:	d8c02015 	stw	r3,128(sp)
81112f9c:	41400115 	stw	r5,4(r8)
81112fa0:	d9001f15 	stw	r4,124(sp)
81112fa4:	014001c4 	movi	r5,7
81112fa8:	2901dc16 	blt	r5,r4,8111371c <___svfprintf_internal_r+0x1c04>
81112fac:	42000204 	addi	r8,r8,8
81112fb0:	d9003317 	ldw	r4,204(sp)
81112fb4:	8121883a 	add	r16,r16,r4
81112fb8:	2085c83a 	sub	r2,r4,r2
81112fbc:	8461c83a 	sub	r16,r16,r17
81112fc0:	1400010e 	bge	r2,r16,81112fc8 <___svfprintf_internal_r+0x14b0>
81112fc4:	1021883a 	mov	r16,r2
81112fc8:	04000a0e 	bge	zero,r16,81112ff4 <___svfprintf_internal_r+0x14dc>
81112fcc:	d9001f17 	ldw	r4,124(sp)
81112fd0:	1c07883a 	add	r3,r3,r16
81112fd4:	44400015 	stw	r17,0(r8)
81112fd8:	21000044 	addi	r4,r4,1
81112fdc:	44000115 	stw	r16,4(r8)
81112fe0:	d8c02015 	stw	r3,128(sp)
81112fe4:	d9001f15 	stw	r4,124(sp)
81112fe8:	014001c4 	movi	r5,7
81112fec:	2901e616 	blt	r5,r4,81113788 <___svfprintf_internal_r+0x1c70>
81112ff0:	42000204 	addi	r8,r8,8
81112ff4:	8001f616 	blt	r16,zero,811137d0 <___svfprintf_internal_r+0x1cb8>
81112ff8:	1421c83a 	sub	r16,r2,r16
81112ffc:	043d1c0e 	bge	zero,r16,81112470 <__reset+0xfb0f2470>
81113000:	04400404 	movi	r17,16
81113004:	d8801f17 	ldw	r2,124(sp)
81113008:	8c3edd0e 	bge	r17,r16,81112b80 <__reset+0xfb0f2b80>
8111300c:	01604534 	movhi	r5,33044
81113010:	29712d84 	addi	r5,r5,-15178
81113014:	d9402b15 	stw	r5,172(sp)
81113018:	058001c4 	movi	r22,7
8111301c:	dd002c17 	ldw	r20,176(sp)
81113020:	00000306 	br	81113030 <___svfprintf_internal_r+0x1518>
81113024:	42000204 	addi	r8,r8,8
81113028:	843ffc04 	addi	r16,r16,-16
8111302c:	8c3ed70e 	bge	r17,r16,81112b8c <__reset+0xfb0f2b8c>
81113030:	18c00404 	addi	r3,r3,16
81113034:	10800044 	addi	r2,r2,1
81113038:	45400015 	stw	r21,0(r8)
8111303c:	44400115 	stw	r17,4(r8)
81113040:	d8c02015 	stw	r3,128(sp)
81113044:	d8801f15 	stw	r2,124(sp)
81113048:	b0bff60e 	bge	r22,r2,81113024 <__reset+0xfb0f3024>
8111304c:	d9801e04 	addi	r6,sp,120
81113050:	a00b883a 	mov	r5,r20
81113054:	9809883a 	mov	r4,r19
81113058:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111305c:	103b951e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81113060:	d8c02017 	ldw	r3,128(sp)
81113064:	d8801f17 	ldw	r2,124(sp)
81113068:	da000404 	addi	r8,sp,16
8111306c:	003fee06 	br	81113028 <__reset+0xfb0f3028>
81113070:	9088703a 	and	r4,r18,r2
81113074:	203e8d1e 	bne	r4,zero,81112aac <__reset+0xfb0f2aac>
81113078:	dc401f17 	ldw	r17,124(sp)
8111307c:	40800115 	stw	r2,4(r8)
81113080:	44000015 	stw	r16,0(r8)
81113084:	8c400044 	addi	r17,r17,1
81113088:	d8c02015 	stw	r3,128(sp)
8111308c:	dc401f15 	stw	r17,124(sp)
81113090:	008001c4 	movi	r2,7
81113094:	147f7f16 	blt	r2,r17,81112e94 <__reset+0xfb0f2e94>
81113098:	45800204 	addi	r22,r8,8
8111309c:	003eac06 	br	81112b50 <__reset+0xfb0f2b50>
811130a0:	d9402c17 	ldw	r5,176(sp)
811130a4:	d9801e04 	addi	r6,sp,120
811130a8:	9809883a 	mov	r4,r19
811130ac:	111e5d80 	call	8111e5d8 <__ssprint_r>
811130b0:	103b801e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
811130b4:	d8c02017 	ldw	r3,128(sp)
811130b8:	dc401f17 	ldw	r17,124(sp)
811130bc:	da000404 	addi	r8,sp,16
811130c0:	003e8406 	br	81112ad4 <__reset+0xfb0f2ad4>
811130c4:	d9402c17 	ldw	r5,176(sp)
811130c8:	d9801e04 	addi	r6,sp,120
811130cc:	9809883a 	mov	r4,r19
811130d0:	111e5d80 	call	8111e5d8 <__ssprint_r>
811130d4:	103b771e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
811130d8:	d8c02017 	ldw	r3,128(sp)
811130dc:	dc401f17 	ldw	r17,124(sp)
811130e0:	dd800404 	addi	r22,sp,16
811130e4:	003e8606 	br	81112b00 <__reset+0xfb0f2b00>
811130e8:	0029883a 	mov	r20,zero
811130ec:	a5000c04 	addi	r20,r20,48
811130f0:	dc001dc4 	addi	r16,sp,119
811130f4:	dd001dc5 	stb	r20,119(sp)
811130f8:	003f3806 	br	81112ddc <__reset+0xfb0f2ddc>
811130fc:	d9402c17 	ldw	r5,176(sp)
81113100:	d9801e04 	addi	r6,sp,120
81113104:	9809883a 	mov	r4,r19
81113108:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111310c:	103b691e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81113110:	d8c02017 	ldw	r3,128(sp)
81113114:	da000404 	addi	r8,sp,16
81113118:	003c9506 	br	81112370 <__reset+0xfb0f2370>
8111311c:	d9003617 	ldw	r4,216(sp)
81113120:	d9403717 	ldw	r5,220(sp)
81113124:	da003e15 	stw	r8,248(sp)
81113128:	111c3ec0 	call	8111c3ec <__fpclassifyd>
8111312c:	da003e17 	ldw	r8,248(sp)
81113130:	1000bd1e 	bne	r2,zero,81113428 <___svfprintf_internal_r+0x1910>
81113134:	008011c4 	movi	r2,71
81113138:	14411e0e 	bge	r2,r17,811135b4 <___svfprintf_internal_r+0x1a9c>
8111313c:	04204534 	movhi	r16,33044
81113140:	84312004 	addi	r16,r16,-15232
81113144:	00c000c4 	movi	r3,3
81113148:	00bfdfc4 	movi	r2,-129
8111314c:	d8c02a15 	stw	r3,168(sp)
81113150:	90a4703a 	and	r18,r18,r2
81113154:	df002783 	ldbu	fp,158(sp)
81113158:	d8c02e15 	stw	r3,184(sp)
8111315c:	d8002915 	stw	zero,164(sp)
81113160:	d8003215 	stw	zero,200(sp)
81113164:	003c1c06 	br	811121d8 <__reset+0xfb0f21d8>
81113168:	9080100c 	andi	r2,r18,64
8111316c:	d8002785 	stb	zero,158(sp)
81113170:	10009426 	beq	r2,zero,811133c4 <___svfprintf_internal_r+0x18ac>
81113174:	d8c02d17 	ldw	r3,180(sp)
81113178:	d9002917 	ldw	r4,164(sp)
8111317c:	002d883a 	mov	r22,zero
81113180:	18800104 	addi	r2,r3,4
81113184:	1d00000b 	ldhu	r20,0(r3)
81113188:	203ec10e 	bge	r4,zero,81112c90 <__reset+0xfb0f2c90>
8111318c:	a586b03a 	or	r3,r20,r22
81113190:	d8802d15 	stw	r2,180(sp)
81113194:	183ec21e 	bne	r3,zero,81112ca0 <__reset+0xfb0f2ca0>
81113198:	0039883a 	mov	fp,zero
8111319c:	0005883a 	mov	r2,zero
811131a0:	003db806 	br	81112884 <__reset+0xfb0f2884>
811131a4:	d8802d17 	ldw	r2,180(sp)
811131a8:	d8c02d17 	ldw	r3,180(sp)
811131ac:	d9002d17 	ldw	r4,180(sp)
811131b0:	10800017 	ldw	r2,0(r2)
811131b4:	18c00117 	ldw	r3,4(r3)
811131b8:	21000204 	addi	r4,r4,8
811131bc:	d8803615 	stw	r2,216(sp)
811131c0:	d8c03715 	stw	r3,220(sp)
811131c4:	d9002d15 	stw	r4,180(sp)
811131c8:	003b8206 	br	81111fd4 <__reset+0xfb0f1fd4>
811131cc:	9080100c 	andi	r2,r18,64
811131d0:	10010726 	beq	r2,zero,811135f0 <___svfprintf_internal_r+0x1ad8>
811131d4:	d8c02d17 	ldw	r3,180(sp)
811131d8:	1d00000f 	ldh	r20,0(r3)
811131dc:	18c00104 	addi	r3,r3,4
811131e0:	d8c02d15 	stw	r3,180(sp)
811131e4:	a02dd7fa 	srai	r22,r20,31
811131e8:	b005883a 	mov	r2,r22
811131ec:	003ba206 	br	81112078 <__reset+0xfb0f2078>
811131f0:	9080100c 	andi	r2,r18,64
811131f4:	10010526 	beq	r2,zero,8111360c <___svfprintf_internal_r+0x1af4>
811131f8:	d9002d17 	ldw	r4,180(sp)
811131fc:	002d883a 	mov	r22,zero
81113200:	2500000b 	ldhu	r20,0(r4)
81113204:	21000104 	addi	r4,r4,4
81113208:	d9002d15 	stw	r4,180(sp)
8111320c:	003cfe06 	br	81112608 <__reset+0xfb0f2608>
81113210:	bc400007 	ldb	r17,0(r23)
81113214:	003a9606 	br	81111c70 <__reset+0xfb0f1c70>
81113218:	9080040c 	andi	r2,r18,16
8111321c:	10010126 	beq	r2,zero,81113624 <___svfprintf_internal_r+0x1b0c>
81113220:	d9402d17 	ldw	r5,180(sp)
81113224:	d8c02f17 	ldw	r3,188(sp)
81113228:	28800017 	ldw	r2,0(r5)
8111322c:	29400104 	addi	r5,r5,4
81113230:	d9402d15 	stw	r5,180(sp)
81113234:	10c00015 	stw	r3,0(r2)
81113238:	003a6406 	br	81111bcc <__reset+0xfb0f1bcc>
8111323c:	d9002917 	ldw	r4,164(sp)
81113240:	d8002785 	stb	zero,158(sp)
81113244:	203d8d16 	blt	r4,zero,8111287c <__reset+0xfb0f287c>
81113248:	00bfdfc4 	movi	r2,-129
8111324c:	90a4703a 	and	r18,r18,r2
81113250:	003b0506 	br	81111e68 <__reset+0xfb0f1e68>
81113254:	01604534 	movhi	r5,33044
81113258:	29712d84 	addi	r5,r5,-15178
8111325c:	d9402b15 	stw	r5,172(sp)
81113260:	d9402b17 	ldw	r5,172(sp)
81113264:	1c47883a 	add	r3,r3,r17
81113268:	10800044 	addi	r2,r2,1
8111326c:	41400015 	stw	r5,0(r8)
81113270:	44400115 	stw	r17,4(r8)
81113274:	d8c02015 	stw	r3,128(sp)
81113278:	d8801f15 	stw	r2,124(sp)
8111327c:	010001c4 	movi	r4,7
81113280:	20bf3016 	blt	r4,r2,81112f44 <__reset+0xfb0f2f44>
81113284:	42000204 	addi	r8,r8,8
81113288:	003f3506 	br	81112f60 <__reset+0xfb0f2f60>
8111328c:	01204534 	movhi	r4,33044
81113290:	21312d84 	addi	r4,r4,-15178
81113294:	d9002b15 	stw	r4,172(sp)
81113298:	003c5e06 	br	81112414 <__reset+0xfb0f2414>
8111329c:	d9402c17 	ldw	r5,176(sp)
811132a0:	d9801e04 	addi	r6,sp,120
811132a4:	9809883a 	mov	r4,r19
811132a8:	111e5d80 	call	8111e5d8 <__ssprint_r>
811132ac:	103b011e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
811132b0:	d8c02017 	ldw	r3,128(sp)
811132b4:	da000404 	addi	r8,sp,16
811132b8:	003d9306 	br	81112908 <__reset+0xfb0f2908>
811132bc:	d8801f17 	ldw	r2,124(sp)
811132c0:	01604534 	movhi	r5,33044
811132c4:	01000044 	movi	r4,1
811132c8:	18c00044 	addi	r3,r3,1
811132cc:	10800044 	addi	r2,r2,1
811132d0:	29712d04 	addi	r5,r5,-15180
811132d4:	41000115 	stw	r4,4(r8)
811132d8:	41400015 	stw	r5,0(r8)
811132dc:	d8c02015 	stw	r3,128(sp)
811132e0:	d8801f15 	stw	r2,124(sp)
811132e4:	010001c4 	movi	r4,7
811132e8:	2080b516 	blt	r4,r2,811135c0 <___svfprintf_internal_r+0x1aa8>
811132ec:	42000204 	addi	r8,r8,8
811132f0:	8800041e 	bne	r17,zero,81113304 <___svfprintf_internal_r+0x17ec>
811132f4:	d8803317 	ldw	r2,204(sp)
811132f8:	1000021e 	bne	r2,zero,81113304 <___svfprintf_internal_r+0x17ec>
811132fc:	9080004c 	andi	r2,r18,1
81113300:	103c5b26 	beq	r2,zero,81112470 <__reset+0xfb0f2470>
81113304:	d9003817 	ldw	r4,224(sp)
81113308:	d8801f17 	ldw	r2,124(sp)
8111330c:	d9403417 	ldw	r5,208(sp)
81113310:	20c7883a 	add	r3,r4,r3
81113314:	10800044 	addi	r2,r2,1
81113318:	41000115 	stw	r4,4(r8)
8111331c:	41400015 	stw	r5,0(r8)
81113320:	d8c02015 	stw	r3,128(sp)
81113324:	d8801f15 	stw	r2,124(sp)
81113328:	010001c4 	movi	r4,7
8111332c:	20818016 	blt	r4,r2,81113930 <___svfprintf_internal_r+0x1e18>
81113330:	42000204 	addi	r8,r8,8
81113334:	0463c83a 	sub	r17,zero,r17
81113338:	0440cb0e 	bge	zero,r17,81113668 <___svfprintf_internal_r+0x1b50>
8111333c:	05800404 	movi	r22,16
81113340:	b440e80e 	bge	r22,r17,811136e4 <___svfprintf_internal_r+0x1bcc>
81113344:	01604534 	movhi	r5,33044
81113348:	29712d84 	addi	r5,r5,-15178
8111334c:	d9402b15 	stw	r5,172(sp)
81113350:	070001c4 	movi	fp,7
81113354:	dd002c17 	ldw	r20,176(sp)
81113358:	00000306 	br	81113368 <___svfprintf_internal_r+0x1850>
8111335c:	42000204 	addi	r8,r8,8
81113360:	8c7ffc04 	addi	r17,r17,-16
81113364:	b440e20e 	bge	r22,r17,811136f0 <___svfprintf_internal_r+0x1bd8>
81113368:	18c00404 	addi	r3,r3,16
8111336c:	10800044 	addi	r2,r2,1
81113370:	45400015 	stw	r21,0(r8)
81113374:	45800115 	stw	r22,4(r8)
81113378:	d8c02015 	stw	r3,128(sp)
8111337c:	d8801f15 	stw	r2,124(sp)
81113380:	e0bff60e 	bge	fp,r2,8111335c <__reset+0xfb0f335c>
81113384:	d9801e04 	addi	r6,sp,120
81113388:	a00b883a 	mov	r5,r20
8111338c:	9809883a 	mov	r4,r19
81113390:	111e5d80 	call	8111e5d8 <__ssprint_r>
81113394:	103ac71e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81113398:	d8c02017 	ldw	r3,128(sp)
8111339c:	d8801f17 	ldw	r2,124(sp)
811133a0:	da000404 	addi	r8,sp,16
811133a4:	003fee06 	br	81113360 <__reset+0xfb0f3360>
811133a8:	d8c02d17 	ldw	r3,180(sp)
811133ac:	d9002917 	ldw	r4,164(sp)
811133b0:	002d883a 	mov	r22,zero
811133b4:	18800104 	addi	r2,r3,4
811133b8:	1d000017 	ldw	r20,0(r3)
811133bc:	203e7d0e 	bge	r4,zero,81112db4 <__reset+0xfb0f2db4>
811133c0:	003eda06 	br	81112f2c <__reset+0xfb0f2f2c>
811133c4:	d9402d17 	ldw	r5,180(sp)
811133c8:	d8c02917 	ldw	r3,164(sp)
811133cc:	002d883a 	mov	r22,zero
811133d0:	28800104 	addi	r2,r5,4
811133d4:	2d000017 	ldw	r20,0(r5)
811133d8:	183e2d0e 	bge	r3,zero,81112c90 <__reset+0xfb0f2c90>
811133dc:	003f6b06 	br	8111318c <__reset+0xfb0f318c>
811133e0:	d8c02d15 	stw	r3,180(sp)
811133e4:	0039883a 	mov	fp,zero
811133e8:	003ed206 	br	81112f34 <__reset+0xfb0f2f34>
811133ec:	bc400043 	ldbu	r17,1(r23)
811133f0:	94800814 	ori	r18,r18,32
811133f4:	bdc00044 	addi	r23,r23,1
811133f8:	8c403fcc 	andi	r17,r17,255
811133fc:	8c40201c 	xori	r17,r17,128
81113400:	8c7fe004 	addi	r17,r17,-128
81113404:	003a1a06 	br	81111c70 <__reset+0xfb0f1c70>
81113408:	d9402c17 	ldw	r5,176(sp)
8111340c:	d9801e04 	addi	r6,sp,120
81113410:	9809883a 	mov	r4,r19
81113414:	111e5d80 	call	8111e5d8 <__ssprint_r>
81113418:	103aa61e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
8111341c:	d8c02017 	ldw	r3,128(sp)
81113420:	da000404 	addi	r8,sp,16
81113424:	003d4a06 	br	81112950 <__reset+0xfb0f2950>
81113428:	d9002917 	ldw	r4,164(sp)
8111342c:	05bff7c4 	movi	r22,-33
81113430:	00bfffc4 	movi	r2,-1
81113434:	8dac703a 	and	r22,r17,r22
81113438:	20806a26 	beq	r4,r2,811135e4 <___svfprintf_internal_r+0x1acc>
8111343c:	008011c4 	movi	r2,71
81113440:	b0813726 	beq	r22,r2,81113920 <___svfprintf_internal_r+0x1e08>
81113444:	d9003717 	ldw	r4,220(sp)
81113448:	90c04014 	ori	r3,r18,256
8111344c:	d8c02b15 	stw	r3,172(sp)
81113450:	20015d16 	blt	r4,zero,811139c8 <___svfprintf_internal_r+0x1eb0>
81113454:	dd003717 	ldw	r20,220(sp)
81113458:	d8002a05 	stb	zero,168(sp)
8111345c:	00801984 	movi	r2,102
81113460:	88814026 	beq	r17,r2,81113964 <___svfprintf_internal_r+0x1e4c>
81113464:	00801184 	movi	r2,70
81113468:	88817126 	beq	r17,r2,81113a30 <___svfprintf_internal_r+0x1f18>
8111346c:	00801144 	movi	r2,69
81113470:	b0816226 	beq	r22,r2,811139fc <___svfprintf_internal_r+0x1ee4>
81113474:	d8c02917 	ldw	r3,164(sp)
81113478:	d8802104 	addi	r2,sp,132
8111347c:	d8800315 	stw	r2,12(sp)
81113480:	d9403617 	ldw	r5,216(sp)
81113484:	d8802504 	addi	r2,sp,148
81113488:	d8800215 	stw	r2,8(sp)
8111348c:	d8802604 	addi	r2,sp,152
81113490:	d8c00015 	stw	r3,0(sp)
81113494:	d8800115 	stw	r2,4(sp)
81113498:	01c00084 	movi	r7,2
8111349c:	a00d883a 	mov	r6,r20
811134a0:	9809883a 	mov	r4,r19
811134a4:	d8c03d15 	stw	r3,244(sp)
811134a8:	da003e15 	stw	r8,248(sp)
811134ac:	1117ca40 	call	81117ca4 <_dtoa_r>
811134b0:	1021883a 	mov	r16,r2
811134b4:	008019c4 	movi	r2,103
811134b8:	d8c03d17 	ldw	r3,244(sp)
811134bc:	da003e17 	ldw	r8,248(sp)
811134c0:	8880e726 	beq	r17,r2,81113860 <___svfprintf_internal_r+0x1d48>
811134c4:	008011c4 	movi	r2,71
811134c8:	8880d426 	beq	r17,r2,8111381c <___svfprintf_internal_r+0x1d04>
811134cc:	80f9883a 	add	fp,r16,r3
811134d0:	d9003617 	ldw	r4,216(sp)
811134d4:	000d883a 	mov	r6,zero
811134d8:	000f883a 	mov	r7,zero
811134dc:	a00b883a 	mov	r5,r20
811134e0:	da003e15 	stw	r8,248(sp)
811134e4:	11247300 	call	81124730 <__eqdf2>
811134e8:	da003e17 	ldw	r8,248(sp)
811134ec:	1000e426 	beq	r2,zero,81113880 <___svfprintf_internal_r+0x1d68>
811134f0:	d8802117 	ldw	r2,132(sp)
811134f4:	1700062e 	bgeu	r2,fp,81113510 <___svfprintf_internal_r+0x19f8>
811134f8:	01000c04 	movi	r4,48
811134fc:	10c00044 	addi	r3,r2,1
81113500:	d8c02115 	stw	r3,132(sp)
81113504:	11000005 	stb	r4,0(r2)
81113508:	d8802117 	ldw	r2,132(sp)
8111350c:	173ffb36 	bltu	r2,fp,811134fc <__reset+0xfb0f34fc>
81113510:	1405c83a 	sub	r2,r2,r16
81113514:	d8803315 	stw	r2,204(sp)
81113518:	008011c4 	movi	r2,71
8111351c:	b080c526 	beq	r22,r2,81113834 <___svfprintf_internal_r+0x1d1c>
81113520:	00801944 	movi	r2,101
81113524:	1441d90e 	bge	r2,r17,81113c8c <___svfprintf_internal_r+0x2174>
81113528:	d8c02617 	ldw	r3,152(sp)
8111352c:	00801984 	movi	r2,102
81113530:	d8c03215 	stw	r3,200(sp)
81113534:	88813426 	beq	r17,r2,81113a08 <___svfprintf_internal_r+0x1ef0>
81113538:	d8c03217 	ldw	r3,200(sp)
8111353c:	d9003317 	ldw	r4,204(sp)
81113540:	19012516 	blt	r3,r4,811139d8 <___svfprintf_internal_r+0x1ec0>
81113544:	9480004c 	andi	r18,r18,1
81113548:	9001841e 	bne	r18,zero,81113b5c <___svfprintf_internal_r+0x2044>
8111354c:	1805883a 	mov	r2,r3
81113550:	1801cc16 	blt	r3,zero,81113c84 <___svfprintf_internal_r+0x216c>
81113554:	d8c03217 	ldw	r3,200(sp)
81113558:	044019c4 	movi	r17,103
8111355c:	d8c02e15 	stw	r3,184(sp)
81113560:	df002a07 	ldb	fp,168(sp)
81113564:	e000a61e 	bne	fp,zero,81113800 <___svfprintf_internal_r+0x1ce8>
81113568:	df002783 	ldbu	fp,158(sp)
8111356c:	d8802a15 	stw	r2,168(sp)
81113570:	dc802b17 	ldw	r18,172(sp)
81113574:	d8002915 	stw	zero,164(sp)
81113578:	003b1706 	br	811121d8 <__reset+0xfb0f21d8>
8111357c:	04204534 	movhi	r16,33044
81113580:	84311d04 	addi	r16,r16,-15244
81113584:	003aa606 	br	81112020 <__reset+0xfb0f2020>
81113588:	d9003917 	ldw	r4,228(sp)
8111358c:	04001004 	movi	r16,64
81113590:	800b883a 	mov	r5,r16
81113594:	11106940 	call	81110694 <_malloc_r>
81113598:	d9002c17 	ldw	r4,176(sp)
8111359c:	20800015 	stw	r2,0(r4)
811135a0:	20800415 	stw	r2,16(r4)
811135a4:	1001cb26 	beq	r2,zero,81113cd4 <___svfprintf_internal_r+0x21bc>
811135a8:	d8802c17 	ldw	r2,176(sp)
811135ac:	14000515 	stw	r16,20(r2)
811135b0:	00397606 	br	81111b8c <__reset+0xfb0f1b8c>
811135b4:	04204534 	movhi	r16,33044
811135b8:	84311f04 	addi	r16,r16,-15236
811135bc:	003ee106 	br	81113144 <__reset+0xfb0f3144>
811135c0:	d9402c17 	ldw	r5,176(sp)
811135c4:	d9801e04 	addi	r6,sp,120
811135c8:	9809883a 	mov	r4,r19
811135cc:	111e5d80 	call	8111e5d8 <__ssprint_r>
811135d0:	103a381e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
811135d4:	dc402617 	ldw	r17,152(sp)
811135d8:	d8c02017 	ldw	r3,128(sp)
811135dc:	da000404 	addi	r8,sp,16
811135e0:	003f4306 	br	811132f0 <__reset+0xfb0f32f0>
811135e4:	01400184 	movi	r5,6
811135e8:	d9402915 	stw	r5,164(sp)
811135ec:	003f9506 	br	81113444 <__reset+0xfb0f3444>
811135f0:	d9002d17 	ldw	r4,180(sp)
811135f4:	25000017 	ldw	r20,0(r4)
811135f8:	21000104 	addi	r4,r4,4
811135fc:	d9002d15 	stw	r4,180(sp)
81113600:	a02dd7fa 	srai	r22,r20,31
81113604:	b005883a 	mov	r2,r22
81113608:	003a9b06 	br	81112078 <__reset+0xfb0f2078>
8111360c:	d9402d17 	ldw	r5,180(sp)
81113610:	002d883a 	mov	r22,zero
81113614:	2d000017 	ldw	r20,0(r5)
81113618:	29400104 	addi	r5,r5,4
8111361c:	d9402d15 	stw	r5,180(sp)
81113620:	003bf906 	br	81112608 <__reset+0xfb0f2608>
81113624:	9480100c 	andi	r18,r18,64
81113628:	90006e26 	beq	r18,zero,811137e4 <___svfprintf_internal_r+0x1ccc>
8111362c:	d9002d17 	ldw	r4,180(sp)
81113630:	d9402f17 	ldw	r5,188(sp)
81113634:	20800017 	ldw	r2,0(r4)
81113638:	21000104 	addi	r4,r4,4
8111363c:	d9002d15 	stw	r4,180(sp)
81113640:	1140000d 	sth	r5,0(r2)
81113644:	00396106 	br	81111bcc <__reset+0xfb0f1bcc>
81113648:	d9402c17 	ldw	r5,176(sp)
8111364c:	d9801e04 	addi	r6,sp,120
81113650:	9809883a 	mov	r4,r19
81113654:	111e5d80 	call	8111e5d8 <__ssprint_r>
81113658:	103a161e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
8111365c:	d8c02017 	ldw	r3,128(sp)
81113660:	d8801f17 	ldw	r2,124(sp)
81113664:	da000404 	addi	r8,sp,16
81113668:	d9403317 	ldw	r5,204(sp)
8111366c:	10800044 	addi	r2,r2,1
81113670:	44000015 	stw	r16,0(r8)
81113674:	28c7883a 	add	r3,r5,r3
81113678:	003b7706 	br	81112458 <__reset+0xfb0f2458>
8111367c:	8009883a 	mov	r4,r16
81113680:	da003e15 	stw	r8,248(sp)
81113684:	11118240 	call	81111824 <strlen>
81113688:	d8802e15 	stw	r2,184(sp)
8111368c:	da003e17 	ldw	r8,248(sp)
81113690:	103c280e 	bge	r2,zero,81112734 <__reset+0xfb0f2734>
81113694:	0005883a 	mov	r2,zero
81113698:	003c2606 	br	81112734 <__reset+0xfb0f2734>
8111369c:	00bfffc4 	movi	r2,-1
811136a0:	003a0906 	br	81111ec8 <__reset+0xfb0f1ec8>
811136a4:	01204534 	movhi	r4,33044
811136a8:	21313184 	addi	r4,r4,-15162
811136ac:	d9003515 	stw	r4,212(sp)
811136b0:	003b0606 	br	811122cc <__reset+0xfb0f22cc>
811136b4:	013fffc4 	movi	r4,-1
811136b8:	003a2706 	br	81111f58 <__reset+0xfb0f1f58>
811136bc:	d9402c17 	ldw	r5,176(sp)
811136c0:	d9801e04 	addi	r6,sp,120
811136c4:	9809883a 	mov	r4,r19
811136c8:	111e5d80 	call	8111e5d8 <__ssprint_r>
811136cc:	1039f91e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
811136d0:	d8c02017 	ldw	r3,128(sp)
811136d4:	da000404 	addi	r8,sp,16
811136d8:	003d8406 	br	81112cec <__reset+0xfb0f2cec>
811136dc:	0023883a 	mov	r17,zero
811136e0:	003d8306 	br	81112cf0 <__reset+0xfb0f2cf0>
811136e4:	01204534 	movhi	r4,33044
811136e8:	21312d84 	addi	r4,r4,-15178
811136ec:	d9002b15 	stw	r4,172(sp)
811136f0:	d9002b17 	ldw	r4,172(sp)
811136f4:	1c47883a 	add	r3,r3,r17
811136f8:	10800044 	addi	r2,r2,1
811136fc:	41000015 	stw	r4,0(r8)
81113700:	44400115 	stw	r17,4(r8)
81113704:	d8c02015 	stw	r3,128(sp)
81113708:	d8801f15 	stw	r2,124(sp)
8111370c:	010001c4 	movi	r4,7
81113710:	20bfcd16 	blt	r4,r2,81113648 <__reset+0xfb0f3648>
81113714:	42000204 	addi	r8,r8,8
81113718:	003fd306 	br	81113668 <__reset+0xfb0f3668>
8111371c:	d9402c17 	ldw	r5,176(sp)
81113720:	d9801e04 	addi	r6,sp,120
81113724:	9809883a 	mov	r4,r19
81113728:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111372c:	1039e11e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81113730:	d8802617 	ldw	r2,152(sp)
81113734:	d8c02017 	ldw	r3,128(sp)
81113738:	da000404 	addi	r8,sp,16
8111373c:	003e1c06 	br	81112fb0 <__reset+0xfb0f2fb0>
81113740:	d8802917 	ldw	r2,164(sp)
81113744:	00c00184 	movi	r3,6
81113748:	1880012e 	bgeu	r3,r2,81113750 <___svfprintf_internal_r+0x1c38>
8111374c:	1805883a 	mov	r2,r3
81113750:	d8802e15 	stw	r2,184(sp)
81113754:	1000f316 	blt	r2,zero,81113b24 <___svfprintf_internal_r+0x200c>
81113758:	04204534 	movhi	r16,33044
8111375c:	d8802a15 	stw	r2,168(sp)
81113760:	dd002d15 	stw	r20,180(sp)
81113764:	d8002915 	stw	zero,164(sp)
81113768:	d8003215 	stw	zero,200(sp)
8111376c:	84312b04 	addi	r16,r16,-15188
81113770:	0039883a 	mov	fp,zero
81113774:	003a9f06 	br	811121f4 <__reset+0xfb0f21f4>
81113778:	01204534 	movhi	r4,33044
8111377c:	21313184 	addi	r4,r4,-15162
81113780:	d9003515 	stw	r4,212(sp)
81113784:	003b5f06 	br	81112504 <__reset+0xfb0f2504>
81113788:	d9402c17 	ldw	r5,176(sp)
8111378c:	d9801e04 	addi	r6,sp,120
81113790:	9809883a 	mov	r4,r19
81113794:	111e5d80 	call	8111e5d8 <__ssprint_r>
81113798:	1039c61e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
8111379c:	d8802617 	ldw	r2,152(sp)
811137a0:	d9403317 	ldw	r5,204(sp)
811137a4:	d8c02017 	ldw	r3,128(sp)
811137a8:	da000404 	addi	r8,sp,16
811137ac:	2885c83a 	sub	r2,r5,r2
811137b0:	003e1006 	br	81112ff4 <__reset+0xfb0f2ff4>
811137b4:	00800044 	movi	r2,1
811137b8:	10803fcc 	andi	r2,r2,255
811137bc:	00c00044 	movi	r3,1
811137c0:	10fa3526 	beq	r2,r3,81112098 <__reset+0xfb0f2098>
811137c4:	00c00084 	movi	r3,2
811137c8:	10fb9e26 	beq	r2,r3,81112644 <__reset+0xfb0f2644>
811137cc:	003a6406 	br	81112160 <__reset+0xfb0f2160>
811137d0:	0021883a 	mov	r16,zero
811137d4:	003e0806 	br	81112ff8 <__reset+0xfb0f2ff8>
811137d8:	07000b44 	movi	fp,45
811137dc:	df002785 	stb	fp,158(sp)
811137e0:	003a0b06 	br	81112010 <__reset+0xfb0f2010>
811137e4:	d8c02d17 	ldw	r3,180(sp)
811137e8:	d9002f17 	ldw	r4,188(sp)
811137ec:	18800017 	ldw	r2,0(r3)
811137f0:	18c00104 	addi	r3,r3,4
811137f4:	d8c02d15 	stw	r3,180(sp)
811137f8:	11000015 	stw	r4,0(r2)
811137fc:	0038f306 	br	81111bcc <__reset+0xfb0f1bcc>
81113800:	00c00b44 	movi	r3,45
81113804:	d8c02785 	stb	r3,158(sp)
81113808:	d8802a15 	stw	r2,168(sp)
8111380c:	dc802b17 	ldw	r18,172(sp)
81113810:	d8002915 	stw	zero,164(sp)
81113814:	07000b44 	movi	fp,45
81113818:	003a7306 	br	811121e8 <__reset+0xfb0f21e8>
8111381c:	9080004c 	andi	r2,r18,1
81113820:	1000941e 	bne	r2,zero,81113a74 <___svfprintf_internal_r+0x1f5c>
81113824:	d8802117 	ldw	r2,132(sp)
81113828:	1405c83a 	sub	r2,r2,r16
8111382c:	d8803315 	stw	r2,204(sp)
81113830:	b441161e 	bne	r22,r17,81113c8c <___svfprintf_internal_r+0x2174>
81113834:	dd802617 	ldw	r22,152(sp)
81113838:	00bfff44 	movi	r2,-3
8111383c:	b0801a16 	blt	r22,r2,811138a8 <___svfprintf_internal_r+0x1d90>
81113840:	d9402917 	ldw	r5,164(sp)
81113844:	2d801816 	blt	r5,r22,811138a8 <___svfprintf_internal_r+0x1d90>
81113848:	dd803215 	stw	r22,200(sp)
8111384c:	003f3a06 	br	81113538 <__reset+0xfb0f3538>
81113850:	1025883a 	mov	r18,r2
81113854:	0039883a 	mov	fp,zero
81113858:	00800084 	movi	r2,2
8111385c:	003fd606 	br	811137b8 <__reset+0xfb0f37b8>
81113860:	9080004c 	andi	r2,r18,1
81113864:	103f191e 	bne	r2,zero,811134cc <__reset+0xfb0f34cc>
81113868:	d8802117 	ldw	r2,132(sp)
8111386c:	003f2806 	br	81113510 <__reset+0xfb0f3510>
81113870:	01204534 	movhi	r4,33044
81113874:	21312d84 	addi	r4,r4,-15178
81113878:	d9002b15 	stw	r4,172(sp)
8111387c:	003c7c06 	br	81112a70 <__reset+0xfb0f2a70>
81113880:	e005883a 	mov	r2,fp
81113884:	003f2206 	br	81113510 <__reset+0xfb0f3510>
81113888:	d9402917 	ldw	r5,164(sp)
8111388c:	df002783 	ldbu	fp,158(sp)
81113890:	dd002d15 	stw	r20,180(sp)
81113894:	d9402a15 	stw	r5,168(sp)
81113898:	d9402e15 	stw	r5,184(sp)
8111389c:	d8002915 	stw	zero,164(sp)
811138a0:	d8003215 	stw	zero,200(sp)
811138a4:	003a4c06 	br	811121d8 <__reset+0xfb0f21d8>
811138a8:	8c7fff84 	addi	r17,r17,-2
811138ac:	b5bfffc4 	addi	r22,r22,-1
811138b0:	dd802615 	stw	r22,152(sp)
811138b4:	dc4022c5 	stb	r17,139(sp)
811138b8:	b000c316 	blt	r22,zero,81113bc8 <___svfprintf_internal_r+0x20b0>
811138bc:	00800ac4 	movi	r2,43
811138c0:	d8802305 	stb	r2,140(sp)
811138c4:	00800244 	movi	r2,9
811138c8:	15806e16 	blt	r2,r22,81113a84 <___svfprintf_internal_r+0x1f6c>
811138cc:	00800c04 	movi	r2,48
811138d0:	b5800c04 	addi	r22,r22,48
811138d4:	d8802345 	stb	r2,141(sp)
811138d8:	dd802385 	stb	r22,142(sp)
811138dc:	d88023c4 	addi	r2,sp,143
811138e0:	df0022c4 	addi	fp,sp,139
811138e4:	d8c03317 	ldw	r3,204(sp)
811138e8:	1739c83a 	sub	fp,r2,fp
811138ec:	d9003317 	ldw	r4,204(sp)
811138f0:	e0c7883a 	add	r3,fp,r3
811138f4:	df003b15 	stw	fp,236(sp)
811138f8:	d8c02e15 	stw	r3,184(sp)
811138fc:	00800044 	movi	r2,1
81113900:	1100b70e 	bge	r2,r4,81113be0 <___svfprintf_internal_r+0x20c8>
81113904:	d8c02e17 	ldw	r3,184(sp)
81113908:	18c00044 	addi	r3,r3,1
8111390c:	d8c02e15 	stw	r3,184(sp)
81113910:	1805883a 	mov	r2,r3
81113914:	1800b016 	blt	r3,zero,81113bd8 <___svfprintf_internal_r+0x20c0>
81113918:	d8003215 	stw	zero,200(sp)
8111391c:	003f1006 	br	81113560 <__reset+0xfb0f3560>
81113920:	d8802917 	ldw	r2,164(sp)
81113924:	103ec71e 	bne	r2,zero,81113444 <__reset+0xfb0f3444>
81113928:	dc002915 	stw	r16,164(sp)
8111392c:	003ec506 	br	81113444 <__reset+0xfb0f3444>
81113930:	d9402c17 	ldw	r5,176(sp)
81113934:	d9801e04 	addi	r6,sp,120
81113938:	9809883a 	mov	r4,r19
8111393c:	111e5d80 	call	8111e5d8 <__ssprint_r>
81113940:	10395c1e 	bne	r2,zero,81111eb4 <__reset+0xfb0f1eb4>
81113944:	dc402617 	ldw	r17,152(sp)
81113948:	d8c02017 	ldw	r3,128(sp)
8111394c:	d8801f17 	ldw	r2,124(sp)
81113950:	da000404 	addi	r8,sp,16
81113954:	003e7706 	br	81113334 <__reset+0xfb0f3334>
81113958:	582f883a 	mov	r23,r11
8111395c:	d8002915 	stw	zero,164(sp)
81113960:	0038c406 	br	81111c74 <__reset+0xfb0f1c74>
81113964:	d8c02917 	ldw	r3,164(sp)
81113968:	d8802104 	addi	r2,sp,132
8111396c:	d8800315 	stw	r2,12(sp)
81113970:	d9403617 	ldw	r5,216(sp)
81113974:	d8802504 	addi	r2,sp,148
81113978:	d8800215 	stw	r2,8(sp)
8111397c:	d8802604 	addi	r2,sp,152
81113980:	d8c00015 	stw	r3,0(sp)
81113984:	9809883a 	mov	r4,r19
81113988:	d8800115 	stw	r2,4(sp)
8111398c:	01c000c4 	movi	r7,3
81113990:	a00d883a 	mov	r6,r20
81113994:	da003e15 	stw	r8,248(sp)
81113998:	1117ca40 	call	81117ca4 <_dtoa_r>
8111399c:	d9002917 	ldw	r4,164(sp)
811139a0:	da003e17 	ldw	r8,248(sp)
811139a4:	1021883a 	mov	r16,r2
811139a8:	1139883a 	add	fp,r2,r4
811139ac:	2007883a 	mov	r3,r4
811139b0:	81000007 	ldb	r4,0(r16)
811139b4:	00800c04 	movi	r2,48
811139b8:	20806f26 	beq	r4,r2,81113b78 <___svfprintf_internal_r+0x2060>
811139bc:	d8c02617 	ldw	r3,152(sp)
811139c0:	e0f9883a 	add	fp,fp,r3
811139c4:	003ec206 	br	811134d0 <__reset+0xfb0f34d0>
811139c8:	00c00b44 	movi	r3,45
811139cc:	2520003c 	xorhi	r20,r4,32768
811139d0:	d8c02a05 	stb	r3,168(sp)
811139d4:	003ea106 	br	8111345c <__reset+0xfb0f345c>
811139d8:	d8c03217 	ldw	r3,200(sp)
811139dc:	00c0890e 	bge	zero,r3,81113c04 <___svfprintf_internal_r+0x20ec>
811139e0:	00800044 	movi	r2,1
811139e4:	d9003317 	ldw	r4,204(sp)
811139e8:	1105883a 	add	r2,r2,r4
811139ec:	d8802e15 	stw	r2,184(sp)
811139f0:	10005f16 	blt	r2,zero,81113b70 <___svfprintf_internal_r+0x2058>
811139f4:	044019c4 	movi	r17,103
811139f8:	003ed906 	br	81113560 <__reset+0xfb0f3560>
811139fc:	d9002917 	ldw	r4,164(sp)
81113a00:	20c00044 	addi	r3,r4,1
81113a04:	003e9c06 	br	81113478 <__reset+0xfb0f3478>
81113a08:	d9002917 	ldw	r4,164(sp)
81113a0c:	00c0680e 	bge	zero,r3,81113bb0 <___svfprintf_internal_r+0x2098>
81113a10:	2000461e 	bne	r4,zero,81113b2c <___svfprintf_internal_r+0x2014>
81113a14:	9480004c 	andi	r18,r18,1
81113a18:	9000441e 	bne	r18,zero,81113b2c <___svfprintf_internal_r+0x2014>
81113a1c:	1805883a 	mov	r2,r3
81113a20:	1800a016 	blt	r3,zero,81113ca4 <___svfprintf_internal_r+0x218c>
81113a24:	d8c03217 	ldw	r3,200(sp)
81113a28:	d8c02e15 	stw	r3,184(sp)
81113a2c:	003ecc06 	br	81113560 <__reset+0xfb0f3560>
81113a30:	d9402917 	ldw	r5,164(sp)
81113a34:	d8802104 	addi	r2,sp,132
81113a38:	d8800315 	stw	r2,12(sp)
81113a3c:	d9400015 	stw	r5,0(sp)
81113a40:	d8802504 	addi	r2,sp,148
81113a44:	d9403617 	ldw	r5,216(sp)
81113a48:	d8800215 	stw	r2,8(sp)
81113a4c:	d8802604 	addi	r2,sp,152
81113a50:	d8800115 	stw	r2,4(sp)
81113a54:	01c000c4 	movi	r7,3
81113a58:	a00d883a 	mov	r6,r20
81113a5c:	9809883a 	mov	r4,r19
81113a60:	da003e15 	stw	r8,248(sp)
81113a64:	1117ca40 	call	81117ca4 <_dtoa_r>
81113a68:	d8c02917 	ldw	r3,164(sp)
81113a6c:	da003e17 	ldw	r8,248(sp)
81113a70:	1021883a 	mov	r16,r2
81113a74:	00801184 	movi	r2,70
81113a78:	80f9883a 	add	fp,r16,r3
81113a7c:	88bfcc26 	beq	r17,r2,811139b0 <__reset+0xfb0f39b0>
81113a80:	003e9306 	br	811134d0 <__reset+0xfb0f34d0>
81113a84:	df0022c4 	addi	fp,sp,139
81113a88:	dc002915 	stw	r16,164(sp)
81113a8c:	9829883a 	mov	r20,r19
81113a90:	e021883a 	mov	r16,fp
81113a94:	4027883a 	mov	r19,r8
81113a98:	b009883a 	mov	r4,r22
81113a9c:	01400284 	movi	r5,10
81113aa0:	11232600 	call	81123260 <__modsi3>
81113aa4:	10800c04 	addi	r2,r2,48
81113aa8:	843fffc4 	addi	r16,r16,-1
81113aac:	b009883a 	mov	r4,r22
81113ab0:	01400284 	movi	r5,10
81113ab4:	80800005 	stb	r2,0(r16)
81113ab8:	11231dc0 	call	811231dc <__divsi3>
81113abc:	102d883a 	mov	r22,r2
81113ac0:	00800244 	movi	r2,9
81113ac4:	15bff416 	blt	r2,r22,81113a98 <__reset+0xfb0f3a98>
81113ac8:	9811883a 	mov	r8,r19
81113acc:	b0800c04 	addi	r2,r22,48
81113ad0:	a027883a 	mov	r19,r20
81113ad4:	8029883a 	mov	r20,r16
81113ad8:	a17fffc4 	addi	r5,r20,-1
81113adc:	a0bfffc5 	stb	r2,-1(r20)
81113ae0:	dc002917 	ldw	r16,164(sp)
81113ae4:	2f00752e 	bgeu	r5,fp,81113cbc <___svfprintf_internal_r+0x21a4>
81113ae8:	d9c02384 	addi	r7,sp,142
81113aec:	3d0fc83a 	sub	r7,r7,r20
81113af0:	d9002344 	addi	r4,sp,141
81113af4:	e1cf883a 	add	r7,fp,r7
81113af8:	00000106 	br	81113b00 <___svfprintf_internal_r+0x1fe8>
81113afc:	28800003 	ldbu	r2,0(r5)
81113b00:	20800005 	stb	r2,0(r4)
81113b04:	21000044 	addi	r4,r4,1
81113b08:	29400044 	addi	r5,r5,1
81113b0c:	21fffb1e 	bne	r4,r7,81113afc <__reset+0xfb0f3afc>
81113b10:	d8802304 	addi	r2,sp,140
81113b14:	1505c83a 	sub	r2,r2,r20
81113b18:	d8c02344 	addi	r3,sp,141
81113b1c:	1885883a 	add	r2,r3,r2
81113b20:	003f7006 	br	811138e4 <__reset+0xfb0f38e4>
81113b24:	0005883a 	mov	r2,zero
81113b28:	003f0b06 	br	81113758 <__reset+0xfb0f3758>
81113b2c:	d9002917 	ldw	r4,164(sp)
81113b30:	d8c03217 	ldw	r3,200(sp)
81113b34:	20800044 	addi	r2,r4,1
81113b38:	1885883a 	add	r2,r3,r2
81113b3c:	d8802e15 	stw	r2,184(sp)
81113b40:	103e870e 	bge	r2,zero,81113560 <__reset+0xfb0f3560>
81113b44:	0005883a 	mov	r2,zero
81113b48:	003e8506 	br	81113560 <__reset+0xfb0f3560>
81113b4c:	01204534 	movhi	r4,33044
81113b50:	21312d84 	addi	r4,r4,-15178
81113b54:	d9002b15 	stw	r4,172(sp)
81113b58:	003cc506 	br	81112e70 <__reset+0xfb0f2e70>
81113b5c:	d8c03217 	ldw	r3,200(sp)
81113b60:	18c00044 	addi	r3,r3,1
81113b64:	d8c02e15 	stw	r3,184(sp)
81113b68:	1805883a 	mov	r2,r3
81113b6c:	183fa10e 	bge	r3,zero,811139f4 <__reset+0xfb0f39f4>
81113b70:	0005883a 	mov	r2,zero
81113b74:	003f9f06 	br	811139f4 <__reset+0xfb0f39f4>
81113b78:	d9003617 	ldw	r4,216(sp)
81113b7c:	000d883a 	mov	r6,zero
81113b80:	000f883a 	mov	r7,zero
81113b84:	a00b883a 	mov	r5,r20
81113b88:	d8c03d15 	stw	r3,244(sp)
81113b8c:	da003e15 	stw	r8,248(sp)
81113b90:	11247300 	call	81124730 <__eqdf2>
81113b94:	d8c03d17 	ldw	r3,244(sp)
81113b98:	da003e17 	ldw	r8,248(sp)
81113b9c:	103f8726 	beq	r2,zero,811139bc <__reset+0xfb0f39bc>
81113ba0:	00800044 	movi	r2,1
81113ba4:	10c7c83a 	sub	r3,r2,r3
81113ba8:	d8c02615 	stw	r3,152(sp)
81113bac:	003f8406 	br	811139c0 <__reset+0xfb0f39c0>
81113bb0:	20000e1e 	bne	r4,zero,81113bec <___svfprintf_internal_r+0x20d4>
81113bb4:	9480004c 	andi	r18,r18,1
81113bb8:	90000c1e 	bne	r18,zero,81113bec <___svfprintf_internal_r+0x20d4>
81113bbc:	00800044 	movi	r2,1
81113bc0:	d8802e15 	stw	r2,184(sp)
81113bc4:	003e6606 	br	81113560 <__reset+0xfb0f3560>
81113bc8:	00800b44 	movi	r2,45
81113bcc:	05adc83a 	sub	r22,zero,r22
81113bd0:	d8802305 	stb	r2,140(sp)
81113bd4:	003f3b06 	br	811138c4 <__reset+0xfb0f38c4>
81113bd8:	0005883a 	mov	r2,zero
81113bdc:	003f4e06 	br	81113918 <__reset+0xfb0f3918>
81113be0:	90a4703a 	and	r18,r18,r2
81113be4:	903f4a26 	beq	r18,zero,81113910 <__reset+0xfb0f3910>
81113be8:	003f4606 	br	81113904 <__reset+0xfb0f3904>
81113bec:	d8c02917 	ldw	r3,164(sp)
81113bf0:	18c00084 	addi	r3,r3,2
81113bf4:	d8c02e15 	stw	r3,184(sp)
81113bf8:	1805883a 	mov	r2,r3
81113bfc:	183e580e 	bge	r3,zero,81113560 <__reset+0xfb0f3560>
81113c00:	003fd006 	br	81113b44 <__reset+0xfb0f3b44>
81113c04:	00800084 	movi	r2,2
81113c08:	10c5c83a 	sub	r2,r2,r3
81113c0c:	003f7506 	br	811139e4 <__reset+0xfb0f39e4>
81113c10:	d8802d17 	ldw	r2,180(sp)
81113c14:	d9002d17 	ldw	r4,180(sp)
81113c18:	bc400043 	ldbu	r17,1(r23)
81113c1c:	10800017 	ldw	r2,0(r2)
81113c20:	582f883a 	mov	r23,r11
81113c24:	d8802915 	stw	r2,164(sp)
81113c28:	20800104 	addi	r2,r4,4
81113c2c:	d9002917 	ldw	r4,164(sp)
81113c30:	d8802d15 	stw	r2,180(sp)
81113c34:	203df00e 	bge	r4,zero,811133f8 <__reset+0xfb0f33f8>
81113c38:	8c403fcc 	andi	r17,r17,255
81113c3c:	00bfffc4 	movi	r2,-1
81113c40:	8c40201c 	xori	r17,r17,128
81113c44:	d8802915 	stw	r2,164(sp)
81113c48:	8c7fe004 	addi	r17,r17,-128
81113c4c:	00380806 	br	81111c70 <__reset+0xfb0f1c70>
81113c50:	9080004c 	andi	r2,r18,1
81113c54:	0039883a 	mov	fp,zero
81113c58:	10000726 	beq	r2,zero,81113c78 <___svfprintf_internal_r+0x2160>
81113c5c:	d8c02817 	ldw	r3,160(sp)
81113c60:	dc001dc4 	addi	r16,sp,119
81113c64:	00800c04 	movi	r2,48
81113c68:	1c07c83a 	sub	r3,r3,r16
81113c6c:	d8801dc5 	stb	r2,119(sp)
81113c70:	d8c02e15 	stw	r3,184(sp)
81113c74:	00395206 	br	811121c0 <__reset+0xfb0f21c0>
81113c78:	d8002e15 	stw	zero,184(sp)
81113c7c:	dc001e04 	addi	r16,sp,120
81113c80:	00394f06 	br	811121c0 <__reset+0xfb0f21c0>
81113c84:	0005883a 	mov	r2,zero
81113c88:	003e3206 	br	81113554 <__reset+0xfb0f3554>
81113c8c:	dd802617 	ldw	r22,152(sp)
81113c90:	003f0606 	br	811138ac <__reset+0xfb0f38ac>
81113c94:	d9c02785 	stb	r7,158(sp)
81113c98:	003a5106 	br	811125e0 <__reset+0xfb0f25e0>
81113c9c:	d9c02785 	stb	r7,158(sp)
81113ca0:	003a3706 	br	81112580 <__reset+0xfb0f2580>
81113ca4:	0005883a 	mov	r2,zero
81113ca8:	003f5e06 	br	81113a24 <__reset+0xfb0f3a24>
81113cac:	d9c02785 	stb	r7,158(sp)
81113cb0:	00391706 	br	81112110 <__reset+0xfb0f2110>
81113cb4:	d9c02785 	stb	r7,158(sp)
81113cb8:	0038e606 	br	81112054 <__reset+0xfb0f2054>
81113cbc:	d8802344 	addi	r2,sp,141
81113cc0:	003f0806 	br	811138e4 <__reset+0xfb0f38e4>
81113cc4:	d9c02785 	stb	r7,158(sp)
81113cc8:	0038b706 	br	81111fa8 <__reset+0xfb0f1fa8>
81113ccc:	d9c02785 	stb	r7,158(sp)
81113cd0:	003adc06 	br	81112844 <__reset+0xfb0f2844>
81113cd4:	d9403917 	ldw	r5,228(sp)
81113cd8:	00800304 	movi	r2,12
81113cdc:	28800015 	stw	r2,0(r5)
81113ce0:	00bfffc4 	movi	r2,-1
81113ce4:	00387806 	br	81111ec8 <__reset+0xfb0f1ec8>
81113ce8:	d9c02785 	stb	r7,158(sp)
81113cec:	003abf06 	br	811127ec <__reset+0xfb0f27ec>
81113cf0:	d9c02785 	stb	r7,158(sp)
81113cf4:	003a9b06 	br	81112764 <__reset+0xfb0f2764>

81113cf8 <___vfprintf_internal_r>:
81113cf8:	deffb804 	addi	sp,sp,-288
81113cfc:	de00012e 	bgeu	sp,et,81113d04 <___vfprintf_internal_r+0xc>
81113d00:	003b68fa 	trap	3
81113d04:	dfc04715 	stw	ra,284(sp)
81113d08:	ddc04515 	stw	r23,276(sp)
81113d0c:	dd404315 	stw	r21,268(sp)
81113d10:	d9002c15 	stw	r4,176(sp)
81113d14:	282f883a 	mov	r23,r5
81113d18:	302b883a 	mov	r21,r6
81113d1c:	d9c02d15 	stw	r7,180(sp)
81113d20:	df004615 	stw	fp,280(sp)
81113d24:	dd804415 	stw	r22,272(sp)
81113d28:	dd004215 	stw	r20,264(sp)
81113d2c:	dcc04115 	stw	r19,260(sp)
81113d30:	dc804015 	stw	r18,256(sp)
81113d34:	dc403f15 	stw	r17,252(sp)
81113d38:	dc003e15 	stw	r16,248(sp)
81113d3c:	111a8a00 	call	8111a8a0 <_localeconv_r>
81113d40:	10800017 	ldw	r2,0(r2)
81113d44:	1009883a 	mov	r4,r2
81113d48:	d8803415 	stw	r2,208(sp)
81113d4c:	11118240 	call	81111824 <strlen>
81113d50:	d8803715 	stw	r2,220(sp)
81113d54:	d8802c17 	ldw	r2,176(sp)
81113d58:	10000226 	beq	r2,zero,81113d64 <___vfprintf_internal_r+0x6c>
81113d5c:	10800e17 	ldw	r2,56(r2)
81113d60:	1000f926 	beq	r2,zero,81114148 <___vfprintf_internal_r+0x450>
81113d64:	b880030b 	ldhu	r2,12(r23)
81113d68:	10c8000c 	andi	r3,r2,8192
81113d6c:	1800061e 	bne	r3,zero,81113d88 <___vfprintf_internal_r+0x90>
81113d70:	b9001917 	ldw	r4,100(r23)
81113d74:	00f7ffc4 	movi	r3,-8193
81113d78:	10880014 	ori	r2,r2,8192
81113d7c:	20c6703a 	and	r3,r4,r3
81113d80:	b880030d 	sth	r2,12(r23)
81113d84:	b8c01915 	stw	r3,100(r23)
81113d88:	10c0020c 	andi	r3,r2,8
81113d8c:	1800c126 	beq	r3,zero,81114094 <___vfprintf_internal_r+0x39c>
81113d90:	b8c00417 	ldw	r3,16(r23)
81113d94:	1800bf26 	beq	r3,zero,81114094 <___vfprintf_internal_r+0x39c>
81113d98:	1080068c 	andi	r2,r2,26
81113d9c:	00c00284 	movi	r3,10
81113da0:	10c0c426 	beq	r2,r3,811140b4 <___vfprintf_internal_r+0x3bc>
81113da4:	d8c00404 	addi	r3,sp,16
81113da8:	05204534 	movhi	r20,33044
81113dac:	d9001e04 	addi	r4,sp,120
81113db0:	a5313584 	addi	r20,r20,-15146
81113db4:	d8c01e15 	stw	r3,120(sp)
81113db8:	d8002015 	stw	zero,128(sp)
81113dbc:	d8001f15 	stw	zero,124(sp)
81113dc0:	d8003315 	stw	zero,204(sp)
81113dc4:	d8003615 	stw	zero,216(sp)
81113dc8:	d8003815 	stw	zero,224(sp)
81113dcc:	1811883a 	mov	r8,r3
81113dd0:	d8003915 	stw	zero,228(sp)
81113dd4:	d8003a15 	stw	zero,232(sp)
81113dd8:	d8002f15 	stw	zero,188(sp)
81113ddc:	d9002815 	stw	r4,160(sp)
81113de0:	a8800007 	ldb	r2,0(r21)
81113de4:	10027b26 	beq	r2,zero,811147d4 <___vfprintf_internal_r+0xadc>
81113de8:	00c00944 	movi	r3,37
81113dec:	a821883a 	mov	r16,r21
81113df0:	10c0021e 	bne	r2,r3,81113dfc <___vfprintf_internal_r+0x104>
81113df4:	00001406 	br	81113e48 <___vfprintf_internal_r+0x150>
81113df8:	10c00326 	beq	r2,r3,81113e08 <___vfprintf_internal_r+0x110>
81113dfc:	84000044 	addi	r16,r16,1
81113e00:	80800007 	ldb	r2,0(r16)
81113e04:	103ffc1e 	bne	r2,zero,81113df8 <__reset+0xfb0f3df8>
81113e08:	8563c83a 	sub	r17,r16,r21
81113e0c:	88000e26 	beq	r17,zero,81113e48 <___vfprintf_internal_r+0x150>
81113e10:	d8c02017 	ldw	r3,128(sp)
81113e14:	d8801f17 	ldw	r2,124(sp)
81113e18:	45400015 	stw	r21,0(r8)
81113e1c:	1c47883a 	add	r3,r3,r17
81113e20:	10800044 	addi	r2,r2,1
81113e24:	d8c02015 	stw	r3,128(sp)
81113e28:	44400115 	stw	r17,4(r8)
81113e2c:	d8801f15 	stw	r2,124(sp)
81113e30:	00c001c4 	movi	r3,7
81113e34:	1880a716 	blt	r3,r2,811140d4 <___vfprintf_internal_r+0x3dc>
81113e38:	42000204 	addi	r8,r8,8
81113e3c:	d9402f17 	ldw	r5,188(sp)
81113e40:	2c4b883a 	add	r5,r5,r17
81113e44:	d9402f15 	stw	r5,188(sp)
81113e48:	80800007 	ldb	r2,0(r16)
81113e4c:	1000a826 	beq	r2,zero,811140f0 <___vfprintf_internal_r+0x3f8>
81113e50:	84400047 	ldb	r17,1(r16)
81113e54:	00bfffc4 	movi	r2,-1
81113e58:	85400044 	addi	r21,r16,1
81113e5c:	d8002785 	stb	zero,158(sp)
81113e60:	0007883a 	mov	r3,zero
81113e64:	000f883a 	mov	r7,zero
81113e68:	d8802915 	stw	r2,164(sp)
81113e6c:	d8003115 	stw	zero,196(sp)
81113e70:	0025883a 	mov	r18,zero
81113e74:	01401604 	movi	r5,88
81113e78:	01800244 	movi	r6,9
81113e7c:	02800a84 	movi	r10,42
81113e80:	02401b04 	movi	r9,108
81113e84:	ad400044 	addi	r21,r21,1
81113e88:	88bff804 	addi	r2,r17,-32
81113e8c:	28830436 	bltu	r5,r2,81114aa0 <___vfprintf_internal_r+0xda8>
81113e90:	100490ba 	slli	r2,r2,2
81113e94:	01204474 	movhi	r4,33041
81113e98:	210faa04 	addi	r4,r4,16040
81113e9c:	1105883a 	add	r2,r2,r4
81113ea0:	10800017 	ldw	r2,0(r2)
81113ea4:	1000683a 	jmp	r2
81113ea8:	811149c0 	call	8811149c <__reset+0x20f149c>
81113eac:	81114aa0 	cmpeqi	r4,r16,17706
81113eb0:	81114aa0 	cmpeqi	r4,r16,17706
81113eb4:	811149e0 	cmpeqi	r4,r16,17703
81113eb8:	81114aa0 	cmpeqi	r4,r16,17706
81113ebc:	81114aa0 	cmpeqi	r4,r16,17706
81113ec0:	81114aa0 	cmpeqi	r4,r16,17706
81113ec4:	81114aa0 	cmpeqi	r4,r16,17706
81113ec8:	81114aa0 	cmpeqi	r4,r16,17706
81113ecc:	81114aa0 	cmpeqi	r4,r16,17706
81113ed0:	81114154 	ori	r4,r16,17669
81113ed4:	811148fc 	xorhi	r4,r16,17699
81113ed8:	81114aa0 	cmpeqi	r4,r16,17706
81113edc:	8111401c 	xori	r4,r16,17664
81113ee0:	8111417c 	xorhi	r4,r16,17669
81113ee4:	81114aa0 	cmpeqi	r4,r16,17706
81113ee8:	811141bc 	xorhi	r4,r16,17670
81113eec:	811141c8 	cmpgei	r4,r16,17671
81113ef0:	811141c8 	cmpgei	r4,r16,17671
81113ef4:	811141c8 	cmpgei	r4,r16,17671
81113ef8:	811141c8 	cmpgei	r4,r16,17671
81113efc:	811141c8 	cmpgei	r4,r16,17671
81113f00:	811141c8 	cmpgei	r4,r16,17671
81113f04:	811141c8 	cmpgei	r4,r16,17671
81113f08:	811141c8 	cmpgei	r4,r16,17671
81113f0c:	811141c8 	cmpgei	r4,r16,17671
81113f10:	81114aa0 	cmpeqi	r4,r16,17706
81113f14:	81114aa0 	cmpeqi	r4,r16,17706
81113f18:	81114aa0 	cmpeqi	r4,r16,17706
81113f1c:	81114aa0 	cmpeqi	r4,r16,17706
81113f20:	81114aa0 	cmpeqi	r4,r16,17706
81113f24:	81114aa0 	cmpeqi	r4,r16,17706
81113f28:	81114aa0 	cmpeqi	r4,r16,17706
81113f2c:	81114aa0 	cmpeqi	r4,r16,17706
81113f30:	81114aa0 	cmpeqi	r4,r16,17706
81113f34:	81114aa0 	cmpeqi	r4,r16,17706
81113f38:	811141fc 	xorhi	r4,r16,17671
81113f3c:	811142b8 	rdprs	r4,r16,17674
81113f40:	81114aa0 	cmpeqi	r4,r16,17706
81113f44:	811142b8 	rdprs	r4,r16,17674
81113f48:	81114aa0 	cmpeqi	r4,r16,17706
81113f4c:	81114aa0 	cmpeqi	r4,r16,17706
81113f50:	81114aa0 	cmpeqi	r4,r16,17706
81113f54:	81114aa0 	cmpeqi	r4,r16,17706
81113f58:	81114358 	cmpnei	r4,r16,17677
81113f5c:	81114aa0 	cmpeqi	r4,r16,17706
81113f60:	81114aa0 	cmpeqi	r4,r16,17706
81113f64:	81114364 	muli	r4,r16,17677
81113f68:	81114aa0 	cmpeqi	r4,r16,17706
81113f6c:	81114aa0 	cmpeqi	r4,r16,17706
81113f70:	81114aa0 	cmpeqi	r4,r16,17706
81113f74:	81114aa0 	cmpeqi	r4,r16,17706
81113f78:	81114aa0 	cmpeqi	r4,r16,17706
81113f7c:	811147dc 	xori	r4,r16,17695
81113f80:	81114aa0 	cmpeqi	r4,r16,17706
81113f84:	81114aa0 	cmpeqi	r4,r16,17706
81113f88:	8111483c 	xorhi	r4,r16,17696
81113f8c:	81114aa0 	cmpeqi	r4,r16,17706
81113f90:	81114aa0 	cmpeqi	r4,r16,17706
81113f94:	81114aa0 	cmpeqi	r4,r16,17706
81113f98:	81114aa0 	cmpeqi	r4,r16,17706
81113f9c:	81114aa0 	cmpeqi	r4,r16,17706
81113fa0:	81114aa0 	cmpeqi	r4,r16,17706
81113fa4:	81114aa0 	cmpeqi	r4,r16,17706
81113fa8:	81114aa0 	cmpeqi	r4,r16,17706
81113fac:	81114aa0 	cmpeqi	r4,r16,17706
81113fb0:	81114aa0 	cmpeqi	r4,r16,17706
81113fb4:	81114a4c 	andi	r4,r16,17705
81113fb8:	811149ec 	andhi	r4,r16,17703
81113fbc:	811142b8 	rdprs	r4,r16,17674
81113fc0:	811142b8 	rdprs	r4,r16,17674
81113fc4:	811142b8 	rdprs	r4,r16,17674
81113fc8:	811149fc 	xorhi	r4,r16,17703
81113fcc:	811149ec 	andhi	r4,r16,17703
81113fd0:	81114aa0 	cmpeqi	r4,r16,17706
81113fd4:	81114aa0 	cmpeqi	r4,r16,17706
81113fd8:	81114a08 	cmpgei	r4,r16,17704
81113fdc:	81114aa0 	cmpeqi	r4,r16,17706
81113fe0:	81114a18 	cmpnei	r4,r16,17704
81113fe4:	811148ec 	andhi	r4,r16,17699
81113fe8:	81114028 	cmpgeui	r4,r16,17664
81113fec:	8111490c 	andi	r4,r16,17700
81113ff0:	81114aa0 	cmpeqi	r4,r16,17706
81113ff4:	81114918 	cmpnei	r4,r16,17700
81113ff8:	81114aa0 	cmpeqi	r4,r16,17706
81113ffc:	81114974 	orhi	r4,r16,17701
81114000:	81114aa0 	cmpeqi	r4,r16,17706
81114004:	81114aa0 	cmpeqi	r4,r16,17706
81114008:	81114984 	addi	r4,r16,17702
8111400c:	d9003117 	ldw	r4,196(sp)
81114010:	d8802d15 	stw	r2,180(sp)
81114014:	0109c83a 	sub	r4,zero,r4
81114018:	d9003115 	stw	r4,196(sp)
8111401c:	94800114 	ori	r18,r18,4
81114020:	ac400007 	ldb	r17,0(r21)
81114024:	003f9706 	br	81113e84 <__reset+0xfb0f3e84>
81114028:	00800c04 	movi	r2,48
8111402c:	d9002d17 	ldw	r4,180(sp)
81114030:	d9402917 	ldw	r5,164(sp)
81114034:	d8802705 	stb	r2,156(sp)
81114038:	00801e04 	movi	r2,120
8111403c:	d8802745 	stb	r2,157(sp)
81114040:	d8002785 	stb	zero,158(sp)
81114044:	20c00104 	addi	r3,r4,4
81114048:	24c00017 	ldw	r19,0(r4)
8111404c:	002d883a 	mov	r22,zero
81114050:	90800094 	ori	r2,r18,2
81114054:	28029a16 	blt	r5,zero,81114ac0 <___vfprintf_internal_r+0xdc8>
81114058:	00bfdfc4 	movi	r2,-129
8111405c:	90a4703a 	and	r18,r18,r2
81114060:	d8c02d15 	stw	r3,180(sp)
81114064:	94800094 	ori	r18,r18,2
81114068:	9802871e 	bne	r19,zero,81114a88 <___vfprintf_internal_r+0xd90>
8111406c:	00a04534 	movhi	r2,33044
81114070:	10b12604 	addi	r2,r2,-15208
81114074:	d8803915 	stw	r2,228(sp)
81114078:	04401e04 	movi	r17,120
8111407c:	d8802917 	ldw	r2,164(sp)
81114080:	0039883a 	mov	fp,zero
81114084:	1001e926 	beq	r2,zero,8111482c <___vfprintf_internal_r+0xb34>
81114088:	0027883a 	mov	r19,zero
8111408c:	002d883a 	mov	r22,zero
81114090:	00020506 	br	811148a8 <___vfprintf_internal_r+0xbb0>
81114094:	d9002c17 	ldw	r4,176(sp)
81114098:	b80b883a 	mov	r5,r23
8111409c:	11178e40 	call	811178e4 <__swsetup_r>
811140a0:	1005ac1e 	bne	r2,zero,81115754 <___vfprintf_internal_r+0x1a5c>
811140a4:	b880030b 	ldhu	r2,12(r23)
811140a8:	00c00284 	movi	r3,10
811140ac:	1080068c 	andi	r2,r2,26
811140b0:	10ff3c1e 	bne	r2,r3,81113da4 <__reset+0xfb0f3da4>
811140b4:	b880038f 	ldh	r2,14(r23)
811140b8:	103f3a16 	blt	r2,zero,81113da4 <__reset+0xfb0f3da4>
811140bc:	d9c02d17 	ldw	r7,180(sp)
811140c0:	d9002c17 	ldw	r4,176(sp)
811140c4:	a80d883a 	mov	r6,r21
811140c8:	b80b883a 	mov	r5,r23
811140cc:	1115f140 	call	81115f14 <__sbprintf>
811140d0:	00001106 	br	81114118 <___vfprintf_internal_r+0x420>
811140d4:	d9002c17 	ldw	r4,176(sp)
811140d8:	d9801e04 	addi	r6,sp,120
811140dc:	b80b883a 	mov	r5,r23
811140e0:	111fd880 	call	8111fd88 <__sprint_r>
811140e4:	1000081e 	bne	r2,zero,81114108 <___vfprintf_internal_r+0x410>
811140e8:	da000404 	addi	r8,sp,16
811140ec:	003f5306 	br	81113e3c <__reset+0xfb0f3e3c>
811140f0:	d8802017 	ldw	r2,128(sp)
811140f4:	10000426 	beq	r2,zero,81114108 <___vfprintf_internal_r+0x410>
811140f8:	d9002c17 	ldw	r4,176(sp)
811140fc:	d9801e04 	addi	r6,sp,120
81114100:	b80b883a 	mov	r5,r23
81114104:	111fd880 	call	8111fd88 <__sprint_r>
81114108:	b880030b 	ldhu	r2,12(r23)
8111410c:	1080100c 	andi	r2,r2,64
81114110:	1005901e 	bne	r2,zero,81115754 <___vfprintf_internal_r+0x1a5c>
81114114:	d8802f17 	ldw	r2,188(sp)
81114118:	dfc04717 	ldw	ra,284(sp)
8111411c:	df004617 	ldw	fp,280(sp)
81114120:	ddc04517 	ldw	r23,276(sp)
81114124:	dd804417 	ldw	r22,272(sp)
81114128:	dd404317 	ldw	r21,268(sp)
8111412c:	dd004217 	ldw	r20,264(sp)
81114130:	dcc04117 	ldw	r19,260(sp)
81114134:	dc804017 	ldw	r18,256(sp)
81114138:	dc403f17 	ldw	r17,252(sp)
8111413c:	dc003e17 	ldw	r16,248(sp)
81114140:	dec04804 	addi	sp,sp,288
81114144:	f800283a 	ret
81114148:	d9002c17 	ldw	r4,176(sp)
8111414c:	11199540 	call	81119954 <__sinit>
81114150:	003f0406 	br	81113d64 <__reset+0xfb0f3d64>
81114154:	d8802d17 	ldw	r2,180(sp)
81114158:	d9002d17 	ldw	r4,180(sp)
8111415c:	10800017 	ldw	r2,0(r2)
81114160:	d8803115 	stw	r2,196(sp)
81114164:	20800104 	addi	r2,r4,4
81114168:	d9003117 	ldw	r4,196(sp)
8111416c:	203fa716 	blt	r4,zero,8111400c <__reset+0xfb0f400c>
81114170:	d8802d15 	stw	r2,180(sp)
81114174:	ac400007 	ldb	r17,0(r21)
81114178:	003f4206 	br	81113e84 <__reset+0xfb0f3e84>
8111417c:	ac400007 	ldb	r17,0(r21)
81114180:	aac00044 	addi	r11,r21,1
81114184:	8a872826 	beq	r17,r10,81115e28 <___vfprintf_internal_r+0x2130>
81114188:	88bff404 	addi	r2,r17,-48
8111418c:	0009883a 	mov	r4,zero
81114190:	30867d36 	bltu	r6,r2,81115b88 <___vfprintf_internal_r+0x1e90>
81114194:	5c400007 	ldb	r17,0(r11)
81114198:	210002a4 	muli	r4,r4,10
8111419c:	5d400044 	addi	r21,r11,1
811141a0:	a817883a 	mov	r11,r21
811141a4:	2089883a 	add	r4,r4,r2
811141a8:	88bff404 	addi	r2,r17,-48
811141ac:	30bff92e 	bgeu	r6,r2,81114194 <__reset+0xfb0f4194>
811141b0:	2005c916 	blt	r4,zero,811158d8 <___vfprintf_internal_r+0x1be0>
811141b4:	d9002915 	stw	r4,164(sp)
811141b8:	003f3306 	br	81113e88 <__reset+0xfb0f3e88>
811141bc:	94802014 	ori	r18,r18,128
811141c0:	ac400007 	ldb	r17,0(r21)
811141c4:	003f2f06 	br	81113e84 <__reset+0xfb0f3e84>
811141c8:	a809883a 	mov	r4,r21
811141cc:	d8003115 	stw	zero,196(sp)
811141d0:	88bff404 	addi	r2,r17,-48
811141d4:	0017883a 	mov	r11,zero
811141d8:	24400007 	ldb	r17,0(r4)
811141dc:	5ac002a4 	muli	r11,r11,10
811141e0:	ad400044 	addi	r21,r21,1
811141e4:	a809883a 	mov	r4,r21
811141e8:	12d7883a 	add	r11,r2,r11
811141ec:	88bff404 	addi	r2,r17,-48
811141f0:	30bff92e 	bgeu	r6,r2,811141d8 <__reset+0xfb0f41d8>
811141f4:	dac03115 	stw	r11,196(sp)
811141f8:	003f2306 	br	81113e88 <__reset+0xfb0f3e88>
811141fc:	18c03fcc 	andi	r3,r3,255
81114200:	18072b1e 	bne	r3,zero,81115eb0 <___vfprintf_internal_r+0x21b8>
81114204:	94800414 	ori	r18,r18,16
81114208:	9080080c 	andi	r2,r18,32
8111420c:	10037b26 	beq	r2,zero,81114ffc <___vfprintf_internal_r+0x1304>
81114210:	d9402d17 	ldw	r5,180(sp)
81114214:	28800117 	ldw	r2,4(r5)
81114218:	2cc00017 	ldw	r19,0(r5)
8111421c:	29400204 	addi	r5,r5,8
81114220:	d9402d15 	stw	r5,180(sp)
81114224:	102d883a 	mov	r22,r2
81114228:	10044b16 	blt	r2,zero,81115358 <___vfprintf_internal_r+0x1660>
8111422c:	d9402917 	ldw	r5,164(sp)
81114230:	df002783 	ldbu	fp,158(sp)
81114234:	2803bc16 	blt	r5,zero,81115128 <___vfprintf_internal_r+0x1430>
81114238:	00ffdfc4 	movi	r3,-129
8111423c:	9d84b03a 	or	r2,r19,r22
81114240:	90e4703a 	and	r18,r18,r3
81114244:	10017726 	beq	r2,zero,81114824 <___vfprintf_internal_r+0xb2c>
81114248:	b0038326 	beq	r22,zero,81115058 <___vfprintf_internal_r+0x1360>
8111424c:	dc402a15 	stw	r17,168(sp)
81114250:	dc001e04 	addi	r16,sp,120
81114254:	b023883a 	mov	r17,r22
81114258:	402d883a 	mov	r22,r8
8111425c:	9809883a 	mov	r4,r19
81114260:	880b883a 	mov	r5,r17
81114264:	01800284 	movi	r6,10
81114268:	000f883a 	mov	r7,zero
8111426c:	1122c9c0 	call	81122c9c <__umoddi3>
81114270:	10800c04 	addi	r2,r2,48
81114274:	843fffc4 	addi	r16,r16,-1
81114278:	9809883a 	mov	r4,r19
8111427c:	880b883a 	mov	r5,r17
81114280:	80800005 	stb	r2,0(r16)
81114284:	01800284 	movi	r6,10
81114288:	000f883a 	mov	r7,zero
8111428c:	112271c0 	call	8112271c <__udivdi3>
81114290:	1027883a 	mov	r19,r2
81114294:	10c4b03a 	or	r2,r2,r3
81114298:	1823883a 	mov	r17,r3
8111429c:	103fef1e 	bne	r2,zero,8111425c <__reset+0xfb0f425c>
811142a0:	d8c02817 	ldw	r3,160(sp)
811142a4:	dc402a17 	ldw	r17,168(sp)
811142a8:	b011883a 	mov	r8,r22
811142ac:	1c07c83a 	sub	r3,r3,r16
811142b0:	d8c02e15 	stw	r3,184(sp)
811142b4:	00005906 	br	8111441c <___vfprintf_internal_r+0x724>
811142b8:	18c03fcc 	andi	r3,r3,255
811142bc:	1806fa1e 	bne	r3,zero,81115ea8 <___vfprintf_internal_r+0x21b0>
811142c0:	9080020c 	andi	r2,r18,8
811142c4:	10048a26 	beq	r2,zero,811154f0 <___vfprintf_internal_r+0x17f8>
811142c8:	d8c02d17 	ldw	r3,180(sp)
811142cc:	d9002d17 	ldw	r4,180(sp)
811142d0:	d9402d17 	ldw	r5,180(sp)
811142d4:	18c00017 	ldw	r3,0(r3)
811142d8:	21000117 	ldw	r4,4(r4)
811142dc:	29400204 	addi	r5,r5,8
811142e0:	d8c03615 	stw	r3,216(sp)
811142e4:	d9003815 	stw	r4,224(sp)
811142e8:	d9402d15 	stw	r5,180(sp)
811142ec:	d9003617 	ldw	r4,216(sp)
811142f0:	d9403817 	ldw	r5,224(sp)
811142f4:	da003d15 	stw	r8,244(sp)
811142f8:	04000044 	movi	r16,1
811142fc:	111c3ec0 	call	8111c3ec <__fpclassifyd>
81114300:	da003d17 	ldw	r8,244(sp)
81114304:	14041f1e 	bne	r2,r16,81115384 <___vfprintf_internal_r+0x168c>
81114308:	d9003617 	ldw	r4,216(sp)
8111430c:	d9403817 	ldw	r5,224(sp)
81114310:	000d883a 	mov	r6,zero
81114314:	000f883a 	mov	r7,zero
81114318:	11248940 	call	81124894 <__ledf2>
8111431c:	da003d17 	ldw	r8,244(sp)
81114320:	1005be16 	blt	r2,zero,81115a1c <___vfprintf_internal_r+0x1d24>
81114324:	df002783 	ldbu	fp,158(sp)
81114328:	008011c4 	movi	r2,71
8111432c:	1445330e 	bge	r2,r17,811157fc <___vfprintf_internal_r+0x1b04>
81114330:	04204534 	movhi	r16,33044
81114334:	84311e04 	addi	r16,r16,-15240
81114338:	00c000c4 	movi	r3,3
8111433c:	00bfdfc4 	movi	r2,-129
81114340:	d8c02a15 	stw	r3,168(sp)
81114344:	90a4703a 	and	r18,r18,r2
81114348:	d8c02e15 	stw	r3,184(sp)
8111434c:	d8002915 	stw	zero,164(sp)
81114350:	d8003215 	stw	zero,200(sp)
81114354:	00003706 	br	81114434 <___vfprintf_internal_r+0x73c>
81114358:	94800214 	ori	r18,r18,8
8111435c:	ac400007 	ldb	r17,0(r21)
81114360:	003ec806 	br	81113e84 <__reset+0xfb0f3e84>
81114364:	18c03fcc 	andi	r3,r3,255
81114368:	1806db1e 	bne	r3,zero,81115ed8 <___vfprintf_internal_r+0x21e0>
8111436c:	94800414 	ori	r18,r18,16
81114370:	9080080c 	andi	r2,r18,32
81114374:	1002d826 	beq	r2,zero,81114ed8 <___vfprintf_internal_r+0x11e0>
81114378:	d9402d17 	ldw	r5,180(sp)
8111437c:	d8c02917 	ldw	r3,164(sp)
81114380:	d8002785 	stb	zero,158(sp)
81114384:	28800204 	addi	r2,r5,8
81114388:	2cc00017 	ldw	r19,0(r5)
8111438c:	2d800117 	ldw	r22,4(r5)
81114390:	18048f16 	blt	r3,zero,811155d0 <___vfprintf_internal_r+0x18d8>
81114394:	013fdfc4 	movi	r4,-129
81114398:	9d86b03a 	or	r3,r19,r22
8111439c:	d8802d15 	stw	r2,180(sp)
811143a0:	9124703a 	and	r18,r18,r4
811143a4:	1802d91e 	bne	r3,zero,81114f0c <___vfprintf_internal_r+0x1214>
811143a8:	d8c02917 	ldw	r3,164(sp)
811143ac:	0039883a 	mov	fp,zero
811143b0:	1805c326 	beq	r3,zero,81115ac0 <___vfprintf_internal_r+0x1dc8>
811143b4:	0027883a 	mov	r19,zero
811143b8:	002d883a 	mov	r22,zero
811143bc:	dc001e04 	addi	r16,sp,120
811143c0:	9806d0fa 	srli	r3,r19,3
811143c4:	b008977a 	slli	r4,r22,29
811143c8:	b02cd0fa 	srli	r22,r22,3
811143cc:	9cc001cc 	andi	r19,r19,7
811143d0:	98800c04 	addi	r2,r19,48
811143d4:	843fffc4 	addi	r16,r16,-1
811143d8:	20e6b03a 	or	r19,r4,r3
811143dc:	80800005 	stb	r2,0(r16)
811143e0:	9d86b03a 	or	r3,r19,r22
811143e4:	183ff61e 	bne	r3,zero,811143c0 <__reset+0xfb0f43c0>
811143e8:	90c0004c 	andi	r3,r18,1
811143ec:	18013b26 	beq	r3,zero,811148dc <___vfprintf_internal_r+0xbe4>
811143f0:	10803fcc 	andi	r2,r2,255
811143f4:	1080201c 	xori	r2,r2,128
811143f8:	10bfe004 	addi	r2,r2,-128
811143fc:	00c00c04 	movi	r3,48
81114400:	10c13626 	beq	r2,r3,811148dc <___vfprintf_internal_r+0xbe4>
81114404:	80ffffc5 	stb	r3,-1(r16)
81114408:	d8c02817 	ldw	r3,160(sp)
8111440c:	80bfffc4 	addi	r2,r16,-1
81114410:	1021883a 	mov	r16,r2
81114414:	1887c83a 	sub	r3,r3,r2
81114418:	d8c02e15 	stw	r3,184(sp)
8111441c:	d8802e17 	ldw	r2,184(sp)
81114420:	d9002917 	ldw	r4,164(sp)
81114424:	1100010e 	bge	r2,r4,8111442c <___vfprintf_internal_r+0x734>
81114428:	2005883a 	mov	r2,r4
8111442c:	d8802a15 	stw	r2,168(sp)
81114430:	d8003215 	stw	zero,200(sp)
81114434:	e7003fcc 	andi	fp,fp,255
81114438:	e700201c 	xori	fp,fp,128
8111443c:	e73fe004 	addi	fp,fp,-128
81114440:	e0000326 	beq	fp,zero,81114450 <___vfprintf_internal_r+0x758>
81114444:	d8c02a17 	ldw	r3,168(sp)
81114448:	18c00044 	addi	r3,r3,1
8111444c:	d8c02a15 	stw	r3,168(sp)
81114450:	90c0008c 	andi	r3,r18,2
81114454:	d8c02b15 	stw	r3,172(sp)
81114458:	18000326 	beq	r3,zero,81114468 <___vfprintf_internal_r+0x770>
8111445c:	d8c02a17 	ldw	r3,168(sp)
81114460:	18c00084 	addi	r3,r3,2
81114464:	d8c02a15 	stw	r3,168(sp)
81114468:	90c0210c 	andi	r3,r18,132
8111446c:	d8c03015 	stw	r3,192(sp)
81114470:	1801a31e 	bne	r3,zero,81114b00 <___vfprintf_internal_r+0xe08>
81114474:	d9003117 	ldw	r4,196(sp)
81114478:	d8c02a17 	ldw	r3,168(sp)
8111447c:	20e7c83a 	sub	r19,r4,r3
81114480:	04c19f0e 	bge	zero,r19,81114b00 <___vfprintf_internal_r+0xe08>
81114484:	02400404 	movi	r9,16
81114488:	d8c02017 	ldw	r3,128(sp)
8111448c:	d8801f17 	ldw	r2,124(sp)
81114490:	4cc50d0e 	bge	r9,r19,811158c8 <___vfprintf_internal_r+0x1bd0>
81114494:	01604534 	movhi	r5,33044
81114498:	29713984 	addi	r5,r5,-15130
8111449c:	dc403b15 	stw	r17,236(sp)
811144a0:	d9403515 	stw	r5,212(sp)
811144a4:	9823883a 	mov	r17,r19
811144a8:	482d883a 	mov	r22,r9
811144ac:	9027883a 	mov	r19,r18
811144b0:	070001c4 	movi	fp,7
811144b4:	8025883a 	mov	r18,r16
811144b8:	dc002c17 	ldw	r16,176(sp)
811144bc:	00000306 	br	811144cc <___vfprintf_internal_r+0x7d4>
811144c0:	8c7ffc04 	addi	r17,r17,-16
811144c4:	42000204 	addi	r8,r8,8
811144c8:	b440130e 	bge	r22,r17,81114518 <___vfprintf_internal_r+0x820>
811144cc:	01204534 	movhi	r4,33044
811144d0:	18c00404 	addi	r3,r3,16
811144d4:	10800044 	addi	r2,r2,1
811144d8:	21313984 	addi	r4,r4,-15130
811144dc:	41000015 	stw	r4,0(r8)
811144e0:	45800115 	stw	r22,4(r8)
811144e4:	d8c02015 	stw	r3,128(sp)
811144e8:	d8801f15 	stw	r2,124(sp)
811144ec:	e0bff40e 	bge	fp,r2,811144c0 <__reset+0xfb0f44c0>
811144f0:	d9801e04 	addi	r6,sp,120
811144f4:	b80b883a 	mov	r5,r23
811144f8:	8009883a 	mov	r4,r16
811144fc:	111fd880 	call	8111fd88 <__sprint_r>
81114500:	103f011e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81114504:	8c7ffc04 	addi	r17,r17,-16
81114508:	d8c02017 	ldw	r3,128(sp)
8111450c:	d8801f17 	ldw	r2,124(sp)
81114510:	da000404 	addi	r8,sp,16
81114514:	b47fed16 	blt	r22,r17,811144cc <__reset+0xfb0f44cc>
81114518:	9021883a 	mov	r16,r18
8111451c:	9825883a 	mov	r18,r19
81114520:	8827883a 	mov	r19,r17
81114524:	dc403b17 	ldw	r17,236(sp)
81114528:	d9403517 	ldw	r5,212(sp)
8111452c:	98c7883a 	add	r3,r19,r3
81114530:	10800044 	addi	r2,r2,1
81114534:	41400015 	stw	r5,0(r8)
81114538:	44c00115 	stw	r19,4(r8)
8111453c:	d8c02015 	stw	r3,128(sp)
81114540:	d8801f15 	stw	r2,124(sp)
81114544:	010001c4 	movi	r4,7
81114548:	2082a316 	blt	r4,r2,81114fd8 <___vfprintf_internal_r+0x12e0>
8111454c:	df002787 	ldb	fp,158(sp)
81114550:	42000204 	addi	r8,r8,8
81114554:	e0000c26 	beq	fp,zero,81114588 <___vfprintf_internal_r+0x890>
81114558:	d8801f17 	ldw	r2,124(sp)
8111455c:	d9002784 	addi	r4,sp,158
81114560:	18c00044 	addi	r3,r3,1
81114564:	10800044 	addi	r2,r2,1
81114568:	41000015 	stw	r4,0(r8)
8111456c:	01000044 	movi	r4,1
81114570:	41000115 	stw	r4,4(r8)
81114574:	d8c02015 	stw	r3,128(sp)
81114578:	d8801f15 	stw	r2,124(sp)
8111457c:	010001c4 	movi	r4,7
81114580:	20823c16 	blt	r4,r2,81114e74 <___vfprintf_internal_r+0x117c>
81114584:	42000204 	addi	r8,r8,8
81114588:	d8802b17 	ldw	r2,172(sp)
8111458c:	10000c26 	beq	r2,zero,811145c0 <___vfprintf_internal_r+0x8c8>
81114590:	d8801f17 	ldw	r2,124(sp)
81114594:	d9002704 	addi	r4,sp,156
81114598:	18c00084 	addi	r3,r3,2
8111459c:	10800044 	addi	r2,r2,1
811145a0:	41000015 	stw	r4,0(r8)
811145a4:	01000084 	movi	r4,2
811145a8:	41000115 	stw	r4,4(r8)
811145ac:	d8c02015 	stw	r3,128(sp)
811145b0:	d8801f15 	stw	r2,124(sp)
811145b4:	010001c4 	movi	r4,7
811145b8:	20823616 	blt	r4,r2,81114e94 <___vfprintf_internal_r+0x119c>
811145bc:	42000204 	addi	r8,r8,8
811145c0:	d9003017 	ldw	r4,192(sp)
811145c4:	00802004 	movi	r2,128
811145c8:	20819926 	beq	r4,r2,81114c30 <___vfprintf_internal_r+0xf38>
811145cc:	d9402917 	ldw	r5,164(sp)
811145d0:	d8802e17 	ldw	r2,184(sp)
811145d4:	28adc83a 	sub	r22,r5,r2
811145d8:	0580310e 	bge	zero,r22,811146a0 <___vfprintf_internal_r+0x9a8>
811145dc:	07000404 	movi	fp,16
811145e0:	d8801f17 	ldw	r2,124(sp)
811145e4:	e584140e 	bge	fp,r22,81115638 <___vfprintf_internal_r+0x1940>
811145e8:	01604534 	movhi	r5,33044
811145ec:	29713584 	addi	r5,r5,-15146
811145f0:	dc402915 	stw	r17,164(sp)
811145f4:	d9402b15 	stw	r5,172(sp)
811145f8:	b023883a 	mov	r17,r22
811145fc:	04c001c4 	movi	r19,7
81114600:	a82d883a 	mov	r22,r21
81114604:	902b883a 	mov	r21,r18
81114608:	8025883a 	mov	r18,r16
8111460c:	dc002c17 	ldw	r16,176(sp)
81114610:	00000306 	br	81114620 <___vfprintf_internal_r+0x928>
81114614:	8c7ffc04 	addi	r17,r17,-16
81114618:	42000204 	addi	r8,r8,8
8111461c:	e440110e 	bge	fp,r17,81114664 <___vfprintf_internal_r+0x96c>
81114620:	18c00404 	addi	r3,r3,16
81114624:	10800044 	addi	r2,r2,1
81114628:	45000015 	stw	r20,0(r8)
8111462c:	47000115 	stw	fp,4(r8)
81114630:	d8c02015 	stw	r3,128(sp)
81114634:	d8801f15 	stw	r2,124(sp)
81114638:	98bff60e 	bge	r19,r2,81114614 <__reset+0xfb0f4614>
8111463c:	d9801e04 	addi	r6,sp,120
81114640:	b80b883a 	mov	r5,r23
81114644:	8009883a 	mov	r4,r16
81114648:	111fd880 	call	8111fd88 <__sprint_r>
8111464c:	103eae1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81114650:	8c7ffc04 	addi	r17,r17,-16
81114654:	d8c02017 	ldw	r3,128(sp)
81114658:	d8801f17 	ldw	r2,124(sp)
8111465c:	da000404 	addi	r8,sp,16
81114660:	e47fef16 	blt	fp,r17,81114620 <__reset+0xfb0f4620>
81114664:	9021883a 	mov	r16,r18
81114668:	a825883a 	mov	r18,r21
8111466c:	b02b883a 	mov	r21,r22
81114670:	882d883a 	mov	r22,r17
81114674:	dc402917 	ldw	r17,164(sp)
81114678:	d9002b17 	ldw	r4,172(sp)
8111467c:	1d87883a 	add	r3,r3,r22
81114680:	10800044 	addi	r2,r2,1
81114684:	41000015 	stw	r4,0(r8)
81114688:	45800115 	stw	r22,4(r8)
8111468c:	d8c02015 	stw	r3,128(sp)
81114690:	d8801f15 	stw	r2,124(sp)
81114694:	010001c4 	movi	r4,7
81114698:	2081ee16 	blt	r4,r2,81114e54 <___vfprintf_internal_r+0x115c>
8111469c:	42000204 	addi	r8,r8,8
811146a0:	9080400c 	andi	r2,r18,256
811146a4:	1001181e 	bne	r2,zero,81114b08 <___vfprintf_internal_r+0xe10>
811146a8:	d9402e17 	ldw	r5,184(sp)
811146ac:	d8801f17 	ldw	r2,124(sp)
811146b0:	44000015 	stw	r16,0(r8)
811146b4:	1947883a 	add	r3,r3,r5
811146b8:	10800044 	addi	r2,r2,1
811146bc:	41400115 	stw	r5,4(r8)
811146c0:	d8c02015 	stw	r3,128(sp)
811146c4:	d8801f15 	stw	r2,124(sp)
811146c8:	010001c4 	movi	r4,7
811146cc:	2081d316 	blt	r4,r2,81114e1c <___vfprintf_internal_r+0x1124>
811146d0:	42000204 	addi	r8,r8,8
811146d4:	9480010c 	andi	r18,r18,4
811146d8:	90003226 	beq	r18,zero,811147a4 <___vfprintf_internal_r+0xaac>
811146dc:	d9403117 	ldw	r5,196(sp)
811146e0:	d8802a17 	ldw	r2,168(sp)
811146e4:	28a1c83a 	sub	r16,r5,r2
811146e8:	04002e0e 	bge	zero,r16,811147a4 <___vfprintf_internal_r+0xaac>
811146ec:	04400404 	movi	r17,16
811146f0:	d8801f17 	ldw	r2,124(sp)
811146f4:	8c04a20e 	bge	r17,r16,81115980 <___vfprintf_internal_r+0x1c88>
811146f8:	01604534 	movhi	r5,33044
811146fc:	29713984 	addi	r5,r5,-15130
81114700:	d9403515 	stw	r5,212(sp)
81114704:	048001c4 	movi	r18,7
81114708:	dcc02c17 	ldw	r19,176(sp)
8111470c:	00000306 	br	8111471c <___vfprintf_internal_r+0xa24>
81114710:	843ffc04 	addi	r16,r16,-16
81114714:	42000204 	addi	r8,r8,8
81114718:	8c00130e 	bge	r17,r16,81114768 <___vfprintf_internal_r+0xa70>
8111471c:	01204534 	movhi	r4,33044
81114720:	18c00404 	addi	r3,r3,16
81114724:	10800044 	addi	r2,r2,1
81114728:	21313984 	addi	r4,r4,-15130
8111472c:	41000015 	stw	r4,0(r8)
81114730:	44400115 	stw	r17,4(r8)
81114734:	d8c02015 	stw	r3,128(sp)
81114738:	d8801f15 	stw	r2,124(sp)
8111473c:	90bff40e 	bge	r18,r2,81114710 <__reset+0xfb0f4710>
81114740:	d9801e04 	addi	r6,sp,120
81114744:	b80b883a 	mov	r5,r23
81114748:	9809883a 	mov	r4,r19
8111474c:	111fd880 	call	8111fd88 <__sprint_r>
81114750:	103e6d1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81114754:	843ffc04 	addi	r16,r16,-16
81114758:	d8c02017 	ldw	r3,128(sp)
8111475c:	d8801f17 	ldw	r2,124(sp)
81114760:	da000404 	addi	r8,sp,16
81114764:	8c3fed16 	blt	r17,r16,8111471c <__reset+0xfb0f471c>
81114768:	d9403517 	ldw	r5,212(sp)
8111476c:	1c07883a 	add	r3,r3,r16
81114770:	10800044 	addi	r2,r2,1
81114774:	41400015 	stw	r5,0(r8)
81114778:	44000115 	stw	r16,4(r8)
8111477c:	d8c02015 	stw	r3,128(sp)
81114780:	d8801f15 	stw	r2,124(sp)
81114784:	010001c4 	movi	r4,7
81114788:	2080060e 	bge	r4,r2,811147a4 <___vfprintf_internal_r+0xaac>
8111478c:	d9002c17 	ldw	r4,176(sp)
81114790:	d9801e04 	addi	r6,sp,120
81114794:	b80b883a 	mov	r5,r23
81114798:	111fd880 	call	8111fd88 <__sprint_r>
8111479c:	103e5a1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
811147a0:	d8c02017 	ldw	r3,128(sp)
811147a4:	d8803117 	ldw	r2,196(sp)
811147a8:	d9002a17 	ldw	r4,168(sp)
811147ac:	1100010e 	bge	r2,r4,811147b4 <___vfprintf_internal_r+0xabc>
811147b0:	2005883a 	mov	r2,r4
811147b4:	d9402f17 	ldw	r5,188(sp)
811147b8:	288b883a 	add	r5,r5,r2
811147bc:	d9402f15 	stw	r5,188(sp)
811147c0:	18019e1e 	bne	r3,zero,81114e3c <___vfprintf_internal_r+0x1144>
811147c4:	a8800007 	ldb	r2,0(r21)
811147c8:	d8001f15 	stw	zero,124(sp)
811147cc:	da000404 	addi	r8,sp,16
811147d0:	103d851e 	bne	r2,zero,81113de8 <__reset+0xfb0f3de8>
811147d4:	a821883a 	mov	r16,r21
811147d8:	003d9b06 	br	81113e48 <__reset+0xfb0f3e48>
811147dc:	18c03fcc 	andi	r3,r3,255
811147e0:	1805c11e 	bne	r3,zero,81115ee8 <___vfprintf_internal_r+0x21f0>
811147e4:	94800414 	ori	r18,r18,16
811147e8:	9080080c 	andi	r2,r18,32
811147ec:	10020c26 	beq	r2,zero,81115020 <___vfprintf_internal_r+0x1328>
811147f0:	d8802d17 	ldw	r2,180(sp)
811147f4:	d9002917 	ldw	r4,164(sp)
811147f8:	d8002785 	stb	zero,158(sp)
811147fc:	10c00204 	addi	r3,r2,8
81114800:	14c00017 	ldw	r19,0(r2)
81114804:	15800117 	ldw	r22,4(r2)
81114808:	20040f16 	blt	r4,zero,81115848 <___vfprintf_internal_r+0x1b50>
8111480c:	013fdfc4 	movi	r4,-129
81114810:	9d84b03a 	or	r2,r19,r22
81114814:	d8c02d15 	stw	r3,180(sp)
81114818:	9124703a 	and	r18,r18,r4
8111481c:	0039883a 	mov	fp,zero
81114820:	103e891e 	bne	r2,zero,81114248 <__reset+0xfb0f4248>
81114824:	d9002917 	ldw	r4,164(sp)
81114828:	2002c11e 	bne	r4,zero,81115330 <___vfprintf_internal_r+0x1638>
8111482c:	d8002915 	stw	zero,164(sp)
81114830:	d8002e15 	stw	zero,184(sp)
81114834:	dc001e04 	addi	r16,sp,120
81114838:	003ef806 	br	8111441c <__reset+0xfb0f441c>
8111483c:	18c03fcc 	andi	r3,r3,255
81114840:	18059d1e 	bne	r3,zero,81115eb8 <___vfprintf_internal_r+0x21c0>
81114844:	01604534 	movhi	r5,33044
81114848:	29712104 	addi	r5,r5,-15228
8111484c:	d9403915 	stw	r5,228(sp)
81114850:	9080080c 	andi	r2,r18,32
81114854:	10005226 	beq	r2,zero,811149a0 <___vfprintf_internal_r+0xca8>
81114858:	d8802d17 	ldw	r2,180(sp)
8111485c:	14c00017 	ldw	r19,0(r2)
81114860:	15800117 	ldw	r22,4(r2)
81114864:	10800204 	addi	r2,r2,8
81114868:	d8802d15 	stw	r2,180(sp)
8111486c:	9080004c 	andi	r2,r18,1
81114870:	10019026 	beq	r2,zero,81114eb4 <___vfprintf_internal_r+0x11bc>
81114874:	9d84b03a 	or	r2,r19,r22
81114878:	10036926 	beq	r2,zero,81115620 <___vfprintf_internal_r+0x1928>
8111487c:	d8c02917 	ldw	r3,164(sp)
81114880:	00800c04 	movi	r2,48
81114884:	d8802705 	stb	r2,156(sp)
81114888:	dc402745 	stb	r17,157(sp)
8111488c:	d8002785 	stb	zero,158(sp)
81114890:	90800094 	ori	r2,r18,2
81114894:	18045d16 	blt	r3,zero,81115a0c <___vfprintf_internal_r+0x1d14>
81114898:	00bfdfc4 	movi	r2,-129
8111489c:	90a4703a 	and	r18,r18,r2
811148a0:	94800094 	ori	r18,r18,2
811148a4:	0039883a 	mov	fp,zero
811148a8:	d9003917 	ldw	r4,228(sp)
811148ac:	dc001e04 	addi	r16,sp,120
811148b0:	988003cc 	andi	r2,r19,15
811148b4:	b006973a 	slli	r3,r22,28
811148b8:	2085883a 	add	r2,r4,r2
811148bc:	9826d13a 	srli	r19,r19,4
811148c0:	10800003 	ldbu	r2,0(r2)
811148c4:	b02cd13a 	srli	r22,r22,4
811148c8:	843fffc4 	addi	r16,r16,-1
811148cc:	1ce6b03a 	or	r19,r3,r19
811148d0:	80800005 	stb	r2,0(r16)
811148d4:	9d84b03a 	or	r2,r19,r22
811148d8:	103ff51e 	bne	r2,zero,811148b0 <__reset+0xfb0f48b0>
811148dc:	d8c02817 	ldw	r3,160(sp)
811148e0:	1c07c83a 	sub	r3,r3,r16
811148e4:	d8c02e15 	stw	r3,184(sp)
811148e8:	003ecc06 	br	8111441c <__reset+0xfb0f441c>
811148ec:	18c03fcc 	andi	r3,r3,255
811148f0:	183e9f26 	beq	r3,zero,81114370 <__reset+0xfb0f4370>
811148f4:	d9c02785 	stb	r7,158(sp)
811148f8:	003e9d06 	br	81114370 <__reset+0xfb0f4370>
811148fc:	00c00044 	movi	r3,1
81114900:	01c00ac4 	movi	r7,43
81114904:	ac400007 	ldb	r17,0(r21)
81114908:	003d5e06 	br	81113e84 <__reset+0xfb0f3e84>
8111490c:	94800814 	ori	r18,r18,32
81114910:	ac400007 	ldb	r17,0(r21)
81114914:	003d5b06 	br	81113e84 <__reset+0xfb0f3e84>
81114918:	d8c02d17 	ldw	r3,180(sp)
8111491c:	d8002785 	stb	zero,158(sp)
81114920:	1c000017 	ldw	r16,0(r3)
81114924:	1cc00104 	addi	r19,r3,4
81114928:	80041926 	beq	r16,zero,81115990 <___vfprintf_internal_r+0x1c98>
8111492c:	d9002917 	ldw	r4,164(sp)
81114930:	2003d016 	blt	r4,zero,81115874 <___vfprintf_internal_r+0x1b7c>
81114934:	200d883a 	mov	r6,r4
81114938:	000b883a 	mov	r5,zero
8111493c:	8009883a 	mov	r4,r16
81114940:	da003d15 	stw	r8,244(sp)
81114944:	111ab7c0 	call	8111ab7c <memchr>
81114948:	da003d17 	ldw	r8,244(sp)
8111494c:	10045426 	beq	r2,zero,81115aa0 <___vfprintf_internal_r+0x1da8>
81114950:	1405c83a 	sub	r2,r2,r16
81114954:	d8802e15 	stw	r2,184(sp)
81114958:	1003cc16 	blt	r2,zero,8111588c <___vfprintf_internal_r+0x1b94>
8111495c:	df002783 	ldbu	fp,158(sp)
81114960:	d8802a15 	stw	r2,168(sp)
81114964:	dcc02d15 	stw	r19,180(sp)
81114968:	d8002915 	stw	zero,164(sp)
8111496c:	d8003215 	stw	zero,200(sp)
81114970:	003eb006 	br	81114434 <__reset+0xfb0f4434>
81114974:	18c03fcc 	andi	r3,r3,255
81114978:	183f9b26 	beq	r3,zero,811147e8 <__reset+0xfb0f47e8>
8111497c:	d9c02785 	stb	r7,158(sp)
81114980:	003f9906 	br	811147e8 <__reset+0xfb0f47e8>
81114984:	18c03fcc 	andi	r3,r3,255
81114988:	1805551e 	bne	r3,zero,81115ee0 <___vfprintf_internal_r+0x21e8>
8111498c:	01604534 	movhi	r5,33044
81114990:	29712604 	addi	r5,r5,-15208
81114994:	d9403915 	stw	r5,228(sp)
81114998:	9080080c 	andi	r2,r18,32
8111499c:	103fae1e 	bne	r2,zero,81114858 <__reset+0xfb0f4858>
811149a0:	9080040c 	andi	r2,r18,16
811149a4:	1002de26 	beq	r2,zero,81115520 <___vfprintf_internal_r+0x1828>
811149a8:	d8c02d17 	ldw	r3,180(sp)
811149ac:	002d883a 	mov	r22,zero
811149b0:	1cc00017 	ldw	r19,0(r3)
811149b4:	18c00104 	addi	r3,r3,4
811149b8:	d8c02d15 	stw	r3,180(sp)
811149bc:	003fab06 	br	8111486c <__reset+0xfb0f486c>
811149c0:	38803fcc 	andi	r2,r7,255
811149c4:	1080201c 	xori	r2,r2,128
811149c8:	10bfe004 	addi	r2,r2,-128
811149cc:	1002d21e 	bne	r2,zero,81115518 <___vfprintf_internal_r+0x1820>
811149d0:	00c00044 	movi	r3,1
811149d4:	01c00804 	movi	r7,32
811149d8:	ac400007 	ldb	r17,0(r21)
811149dc:	003d2906 	br	81113e84 <__reset+0xfb0f3e84>
811149e0:	94800054 	ori	r18,r18,1
811149e4:	ac400007 	ldb	r17,0(r21)
811149e8:	003d2606 	br	81113e84 <__reset+0xfb0f3e84>
811149ec:	18c03fcc 	andi	r3,r3,255
811149f0:	183e0526 	beq	r3,zero,81114208 <__reset+0xfb0f4208>
811149f4:	d9c02785 	stb	r7,158(sp)
811149f8:	003e0306 	br	81114208 <__reset+0xfb0f4208>
811149fc:	94801014 	ori	r18,r18,64
81114a00:	ac400007 	ldb	r17,0(r21)
81114a04:	003d1f06 	br	81113e84 <__reset+0xfb0f3e84>
81114a08:	ac400007 	ldb	r17,0(r21)
81114a0c:	8a438726 	beq	r17,r9,8111582c <___vfprintf_internal_r+0x1b34>
81114a10:	94800414 	ori	r18,r18,16
81114a14:	003d1b06 	br	81113e84 <__reset+0xfb0f3e84>
81114a18:	18c03fcc 	andi	r3,r3,255
81114a1c:	1805341e 	bne	r3,zero,81115ef0 <___vfprintf_internal_r+0x21f8>
81114a20:	9080080c 	andi	r2,r18,32
81114a24:	1002cd26 	beq	r2,zero,8111555c <___vfprintf_internal_r+0x1864>
81114a28:	d9402d17 	ldw	r5,180(sp)
81114a2c:	d9002f17 	ldw	r4,188(sp)
81114a30:	28800017 	ldw	r2,0(r5)
81114a34:	2007d7fa 	srai	r3,r4,31
81114a38:	29400104 	addi	r5,r5,4
81114a3c:	d9402d15 	stw	r5,180(sp)
81114a40:	11000015 	stw	r4,0(r2)
81114a44:	10c00115 	stw	r3,4(r2)
81114a48:	003ce506 	br	81113de0 <__reset+0xfb0f3de0>
81114a4c:	d8c02d17 	ldw	r3,180(sp)
81114a50:	d9002d17 	ldw	r4,180(sp)
81114a54:	d8002785 	stb	zero,158(sp)
81114a58:	18800017 	ldw	r2,0(r3)
81114a5c:	21000104 	addi	r4,r4,4
81114a60:	00c00044 	movi	r3,1
81114a64:	d8c02a15 	stw	r3,168(sp)
81114a68:	d8801405 	stb	r2,80(sp)
81114a6c:	d9002d15 	stw	r4,180(sp)
81114a70:	d8c02e15 	stw	r3,184(sp)
81114a74:	d8002915 	stw	zero,164(sp)
81114a78:	d8003215 	stw	zero,200(sp)
81114a7c:	dc001404 	addi	r16,sp,80
81114a80:	0039883a 	mov	fp,zero
81114a84:	003e7206 	br	81114450 <__reset+0xfb0f4450>
81114a88:	01204534 	movhi	r4,33044
81114a8c:	21312604 	addi	r4,r4,-15208
81114a90:	0039883a 	mov	fp,zero
81114a94:	d9003915 	stw	r4,228(sp)
81114a98:	04401e04 	movi	r17,120
81114a9c:	003f8206 	br	811148a8 <__reset+0xfb0f48a8>
81114aa0:	18c03fcc 	andi	r3,r3,255
81114aa4:	1805061e 	bne	r3,zero,81115ec0 <___vfprintf_internal_r+0x21c8>
81114aa8:	883d9126 	beq	r17,zero,811140f0 <__reset+0xfb0f40f0>
81114aac:	00c00044 	movi	r3,1
81114ab0:	d8c02a15 	stw	r3,168(sp)
81114ab4:	dc401405 	stb	r17,80(sp)
81114ab8:	d8002785 	stb	zero,158(sp)
81114abc:	003fec06 	br	81114a70 <__reset+0xfb0f4a70>
81114ac0:	01604534 	movhi	r5,33044
81114ac4:	29712604 	addi	r5,r5,-15208
81114ac8:	d9403915 	stw	r5,228(sp)
81114acc:	d8c02d15 	stw	r3,180(sp)
81114ad0:	1025883a 	mov	r18,r2
81114ad4:	04401e04 	movi	r17,120
81114ad8:	9d84b03a 	or	r2,r19,r22
81114adc:	1000fc1e 	bne	r2,zero,81114ed0 <___vfprintf_internal_r+0x11d8>
81114ae0:	0039883a 	mov	fp,zero
81114ae4:	00800084 	movi	r2,2
81114ae8:	10803fcc 	andi	r2,r2,255
81114aec:	00c00044 	movi	r3,1
81114af0:	10c20f26 	beq	r2,r3,81115330 <___vfprintf_internal_r+0x1638>
81114af4:	00c00084 	movi	r3,2
81114af8:	10fd6326 	beq	r2,r3,81114088 <__reset+0xfb0f4088>
81114afc:	003e2d06 	br	811143b4 <__reset+0xfb0f43b4>
81114b00:	d8c02017 	ldw	r3,128(sp)
81114b04:	003e9306 	br	81114554 <__reset+0xfb0f4554>
81114b08:	00801944 	movi	r2,101
81114b0c:	14407e0e 	bge	r2,r17,81114d08 <___vfprintf_internal_r+0x1010>
81114b10:	d9003617 	ldw	r4,216(sp)
81114b14:	d9403817 	ldw	r5,224(sp)
81114b18:	000d883a 	mov	r6,zero
81114b1c:	000f883a 	mov	r7,zero
81114b20:	d8c03c15 	stw	r3,240(sp)
81114b24:	da003d15 	stw	r8,244(sp)
81114b28:	11247300 	call	81124730 <__eqdf2>
81114b2c:	d8c03c17 	ldw	r3,240(sp)
81114b30:	da003d17 	ldw	r8,244(sp)
81114b34:	1000f71e 	bne	r2,zero,81114f14 <___vfprintf_internal_r+0x121c>
81114b38:	d8801f17 	ldw	r2,124(sp)
81114b3c:	01204534 	movhi	r4,33044
81114b40:	21312d04 	addi	r4,r4,-15180
81114b44:	18c00044 	addi	r3,r3,1
81114b48:	10800044 	addi	r2,r2,1
81114b4c:	41000015 	stw	r4,0(r8)
81114b50:	01000044 	movi	r4,1
81114b54:	41000115 	stw	r4,4(r8)
81114b58:	d8c02015 	stw	r3,128(sp)
81114b5c:	d8801f15 	stw	r2,124(sp)
81114b60:	010001c4 	movi	r4,7
81114b64:	2082b816 	blt	r4,r2,81115648 <___vfprintf_internal_r+0x1950>
81114b68:	42000204 	addi	r8,r8,8
81114b6c:	d8802617 	ldw	r2,152(sp)
81114b70:	d9403317 	ldw	r5,204(sp)
81114b74:	11400216 	blt	r2,r5,81114b80 <___vfprintf_internal_r+0xe88>
81114b78:	9080004c 	andi	r2,r18,1
81114b7c:	103ed526 	beq	r2,zero,811146d4 <__reset+0xfb0f46d4>
81114b80:	d8803717 	ldw	r2,220(sp)
81114b84:	d9003417 	ldw	r4,208(sp)
81114b88:	d9403717 	ldw	r5,220(sp)
81114b8c:	1887883a 	add	r3,r3,r2
81114b90:	d8801f17 	ldw	r2,124(sp)
81114b94:	41000015 	stw	r4,0(r8)
81114b98:	41400115 	stw	r5,4(r8)
81114b9c:	10800044 	addi	r2,r2,1
81114ba0:	d8c02015 	stw	r3,128(sp)
81114ba4:	d8801f15 	stw	r2,124(sp)
81114ba8:	010001c4 	movi	r4,7
81114bac:	20832916 	blt	r4,r2,81115854 <___vfprintf_internal_r+0x1b5c>
81114bb0:	42000204 	addi	r8,r8,8
81114bb4:	d8803317 	ldw	r2,204(sp)
81114bb8:	143fffc4 	addi	r16,r2,-1
81114bbc:	043ec50e 	bge	zero,r16,811146d4 <__reset+0xfb0f46d4>
81114bc0:	04400404 	movi	r17,16
81114bc4:	d8801f17 	ldw	r2,124(sp)
81114bc8:	8c00880e 	bge	r17,r16,81114dec <___vfprintf_internal_r+0x10f4>
81114bcc:	01604534 	movhi	r5,33044
81114bd0:	29713584 	addi	r5,r5,-15146
81114bd4:	d9402b15 	stw	r5,172(sp)
81114bd8:	058001c4 	movi	r22,7
81114bdc:	dcc02c17 	ldw	r19,176(sp)
81114be0:	00000306 	br	81114bf0 <___vfprintf_internal_r+0xef8>
81114be4:	42000204 	addi	r8,r8,8
81114be8:	843ffc04 	addi	r16,r16,-16
81114bec:	8c00820e 	bge	r17,r16,81114df8 <___vfprintf_internal_r+0x1100>
81114bf0:	18c00404 	addi	r3,r3,16
81114bf4:	10800044 	addi	r2,r2,1
81114bf8:	45000015 	stw	r20,0(r8)
81114bfc:	44400115 	stw	r17,4(r8)
81114c00:	d8c02015 	stw	r3,128(sp)
81114c04:	d8801f15 	stw	r2,124(sp)
81114c08:	b0bff60e 	bge	r22,r2,81114be4 <__reset+0xfb0f4be4>
81114c0c:	d9801e04 	addi	r6,sp,120
81114c10:	b80b883a 	mov	r5,r23
81114c14:	9809883a 	mov	r4,r19
81114c18:	111fd880 	call	8111fd88 <__sprint_r>
81114c1c:	103d3a1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81114c20:	d8c02017 	ldw	r3,128(sp)
81114c24:	d8801f17 	ldw	r2,124(sp)
81114c28:	da000404 	addi	r8,sp,16
81114c2c:	003fee06 	br	81114be8 <__reset+0xfb0f4be8>
81114c30:	d9403117 	ldw	r5,196(sp)
81114c34:	d8802a17 	ldw	r2,168(sp)
81114c38:	28adc83a 	sub	r22,r5,r2
81114c3c:	05be630e 	bge	zero,r22,811145cc <__reset+0xfb0f45cc>
81114c40:	07000404 	movi	fp,16
81114c44:	d8801f17 	ldw	r2,124(sp)
81114c48:	e5838f0e 	bge	fp,r22,81115a88 <___vfprintf_internal_r+0x1d90>
81114c4c:	01604534 	movhi	r5,33044
81114c50:	29713584 	addi	r5,r5,-15146
81114c54:	dc403015 	stw	r17,192(sp)
81114c58:	d9402b15 	stw	r5,172(sp)
81114c5c:	b023883a 	mov	r17,r22
81114c60:	04c001c4 	movi	r19,7
81114c64:	a82d883a 	mov	r22,r21
81114c68:	902b883a 	mov	r21,r18
81114c6c:	8025883a 	mov	r18,r16
81114c70:	dc002c17 	ldw	r16,176(sp)
81114c74:	00000306 	br	81114c84 <___vfprintf_internal_r+0xf8c>
81114c78:	8c7ffc04 	addi	r17,r17,-16
81114c7c:	42000204 	addi	r8,r8,8
81114c80:	e440110e 	bge	fp,r17,81114cc8 <___vfprintf_internal_r+0xfd0>
81114c84:	18c00404 	addi	r3,r3,16
81114c88:	10800044 	addi	r2,r2,1
81114c8c:	45000015 	stw	r20,0(r8)
81114c90:	47000115 	stw	fp,4(r8)
81114c94:	d8c02015 	stw	r3,128(sp)
81114c98:	d8801f15 	stw	r2,124(sp)
81114c9c:	98bff60e 	bge	r19,r2,81114c78 <__reset+0xfb0f4c78>
81114ca0:	d9801e04 	addi	r6,sp,120
81114ca4:	b80b883a 	mov	r5,r23
81114ca8:	8009883a 	mov	r4,r16
81114cac:	111fd880 	call	8111fd88 <__sprint_r>
81114cb0:	103d151e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81114cb4:	8c7ffc04 	addi	r17,r17,-16
81114cb8:	d8c02017 	ldw	r3,128(sp)
81114cbc:	d8801f17 	ldw	r2,124(sp)
81114cc0:	da000404 	addi	r8,sp,16
81114cc4:	e47fef16 	blt	fp,r17,81114c84 <__reset+0xfb0f4c84>
81114cc8:	9021883a 	mov	r16,r18
81114ccc:	a825883a 	mov	r18,r21
81114cd0:	b02b883a 	mov	r21,r22
81114cd4:	882d883a 	mov	r22,r17
81114cd8:	dc403017 	ldw	r17,192(sp)
81114cdc:	d9002b17 	ldw	r4,172(sp)
81114ce0:	1d87883a 	add	r3,r3,r22
81114ce4:	10800044 	addi	r2,r2,1
81114ce8:	41000015 	stw	r4,0(r8)
81114cec:	45800115 	stw	r22,4(r8)
81114cf0:	d8c02015 	stw	r3,128(sp)
81114cf4:	d8801f15 	stw	r2,124(sp)
81114cf8:	010001c4 	movi	r4,7
81114cfc:	20818e16 	blt	r4,r2,81115338 <___vfprintf_internal_r+0x1640>
81114d00:	42000204 	addi	r8,r8,8
81114d04:	003e3106 	br	811145cc <__reset+0xfb0f45cc>
81114d08:	d9403317 	ldw	r5,204(sp)
81114d0c:	00800044 	movi	r2,1
81114d10:	18c00044 	addi	r3,r3,1
81114d14:	1141530e 	bge	r2,r5,81115264 <___vfprintf_internal_r+0x156c>
81114d18:	dc401f17 	ldw	r17,124(sp)
81114d1c:	00800044 	movi	r2,1
81114d20:	40800115 	stw	r2,4(r8)
81114d24:	8c400044 	addi	r17,r17,1
81114d28:	44000015 	stw	r16,0(r8)
81114d2c:	d8c02015 	stw	r3,128(sp)
81114d30:	dc401f15 	stw	r17,124(sp)
81114d34:	008001c4 	movi	r2,7
81114d38:	14416b16 	blt	r2,r17,811152e8 <___vfprintf_internal_r+0x15f0>
81114d3c:	42000204 	addi	r8,r8,8
81114d40:	d8803717 	ldw	r2,220(sp)
81114d44:	d9003417 	ldw	r4,208(sp)
81114d48:	8c400044 	addi	r17,r17,1
81114d4c:	10c7883a 	add	r3,r2,r3
81114d50:	40800115 	stw	r2,4(r8)
81114d54:	41000015 	stw	r4,0(r8)
81114d58:	d8c02015 	stw	r3,128(sp)
81114d5c:	dc401f15 	stw	r17,124(sp)
81114d60:	008001c4 	movi	r2,7
81114d64:	14416916 	blt	r2,r17,8111530c <___vfprintf_internal_r+0x1614>
81114d68:	45800204 	addi	r22,r8,8
81114d6c:	d9003617 	ldw	r4,216(sp)
81114d70:	d9403817 	ldw	r5,224(sp)
81114d74:	000d883a 	mov	r6,zero
81114d78:	000f883a 	mov	r7,zero
81114d7c:	d8c03c15 	stw	r3,240(sp)
81114d80:	11247300 	call	81124730 <__eqdf2>
81114d84:	d8c03c17 	ldw	r3,240(sp)
81114d88:	1000bc26 	beq	r2,zero,8111507c <___vfprintf_internal_r+0x1384>
81114d8c:	d9403317 	ldw	r5,204(sp)
81114d90:	84000044 	addi	r16,r16,1
81114d94:	8c400044 	addi	r17,r17,1
81114d98:	28bfffc4 	addi	r2,r5,-1
81114d9c:	1887883a 	add	r3,r3,r2
81114da0:	b0800115 	stw	r2,4(r22)
81114da4:	b4000015 	stw	r16,0(r22)
81114da8:	d8c02015 	stw	r3,128(sp)
81114dac:	dc401f15 	stw	r17,124(sp)
81114db0:	008001c4 	movi	r2,7
81114db4:	14414316 	blt	r2,r17,811152c4 <___vfprintf_internal_r+0x15cc>
81114db8:	b5800204 	addi	r22,r22,8
81114dbc:	d9003a17 	ldw	r4,232(sp)
81114dc0:	df0022c4 	addi	fp,sp,139
81114dc4:	8c400044 	addi	r17,r17,1
81114dc8:	20c7883a 	add	r3,r4,r3
81114dcc:	b7000015 	stw	fp,0(r22)
81114dd0:	b1000115 	stw	r4,4(r22)
81114dd4:	d8c02015 	stw	r3,128(sp)
81114dd8:	dc401f15 	stw	r17,124(sp)
81114ddc:	008001c4 	movi	r2,7
81114de0:	14400e16 	blt	r2,r17,81114e1c <___vfprintf_internal_r+0x1124>
81114de4:	b2000204 	addi	r8,r22,8
81114de8:	003e3a06 	br	811146d4 <__reset+0xfb0f46d4>
81114dec:	01204534 	movhi	r4,33044
81114df0:	21313584 	addi	r4,r4,-15146
81114df4:	d9002b15 	stw	r4,172(sp)
81114df8:	d9002b17 	ldw	r4,172(sp)
81114dfc:	1c07883a 	add	r3,r3,r16
81114e00:	44000115 	stw	r16,4(r8)
81114e04:	41000015 	stw	r4,0(r8)
81114e08:	10800044 	addi	r2,r2,1
81114e0c:	d8c02015 	stw	r3,128(sp)
81114e10:	d8801f15 	stw	r2,124(sp)
81114e14:	010001c4 	movi	r4,7
81114e18:	20be2d0e 	bge	r4,r2,811146d0 <__reset+0xfb0f46d0>
81114e1c:	d9002c17 	ldw	r4,176(sp)
81114e20:	d9801e04 	addi	r6,sp,120
81114e24:	b80b883a 	mov	r5,r23
81114e28:	111fd880 	call	8111fd88 <__sprint_r>
81114e2c:	103cb61e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81114e30:	d8c02017 	ldw	r3,128(sp)
81114e34:	da000404 	addi	r8,sp,16
81114e38:	003e2606 	br	811146d4 <__reset+0xfb0f46d4>
81114e3c:	d9002c17 	ldw	r4,176(sp)
81114e40:	d9801e04 	addi	r6,sp,120
81114e44:	b80b883a 	mov	r5,r23
81114e48:	111fd880 	call	8111fd88 <__sprint_r>
81114e4c:	103e5d26 	beq	r2,zero,811147c4 <__reset+0xfb0f47c4>
81114e50:	003cad06 	br	81114108 <__reset+0xfb0f4108>
81114e54:	d9002c17 	ldw	r4,176(sp)
81114e58:	d9801e04 	addi	r6,sp,120
81114e5c:	b80b883a 	mov	r5,r23
81114e60:	111fd880 	call	8111fd88 <__sprint_r>
81114e64:	103ca81e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81114e68:	d8c02017 	ldw	r3,128(sp)
81114e6c:	da000404 	addi	r8,sp,16
81114e70:	003e0b06 	br	811146a0 <__reset+0xfb0f46a0>
81114e74:	d9002c17 	ldw	r4,176(sp)
81114e78:	d9801e04 	addi	r6,sp,120
81114e7c:	b80b883a 	mov	r5,r23
81114e80:	111fd880 	call	8111fd88 <__sprint_r>
81114e84:	103ca01e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81114e88:	d8c02017 	ldw	r3,128(sp)
81114e8c:	da000404 	addi	r8,sp,16
81114e90:	003dbd06 	br	81114588 <__reset+0xfb0f4588>
81114e94:	d9002c17 	ldw	r4,176(sp)
81114e98:	d9801e04 	addi	r6,sp,120
81114e9c:	b80b883a 	mov	r5,r23
81114ea0:	111fd880 	call	8111fd88 <__sprint_r>
81114ea4:	103c981e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81114ea8:	d8c02017 	ldw	r3,128(sp)
81114eac:	da000404 	addi	r8,sp,16
81114eb0:	003dc306 	br	811145c0 <__reset+0xfb0f45c0>
81114eb4:	d8802917 	ldw	r2,164(sp)
81114eb8:	d8002785 	stb	zero,158(sp)
81114ebc:	103f0616 	blt	r2,zero,81114ad8 <__reset+0xfb0f4ad8>
81114ec0:	00ffdfc4 	movi	r3,-129
81114ec4:	9d84b03a 	or	r2,r19,r22
81114ec8:	90e4703a 	and	r18,r18,r3
81114ecc:	103c6b26 	beq	r2,zero,8111407c <__reset+0xfb0f407c>
81114ed0:	0039883a 	mov	fp,zero
81114ed4:	003e7406 	br	811148a8 <__reset+0xfb0f48a8>
81114ed8:	9080040c 	andi	r2,r18,16
81114edc:	1001b326 	beq	r2,zero,811155ac <___vfprintf_internal_r+0x18b4>
81114ee0:	d9002d17 	ldw	r4,180(sp)
81114ee4:	d9402917 	ldw	r5,164(sp)
81114ee8:	d8002785 	stb	zero,158(sp)
81114eec:	20800104 	addi	r2,r4,4
81114ef0:	24c00017 	ldw	r19,0(r4)
81114ef4:	002d883a 	mov	r22,zero
81114ef8:	2801b516 	blt	r5,zero,811155d0 <___vfprintf_internal_r+0x18d8>
81114efc:	00ffdfc4 	movi	r3,-129
81114f00:	d8802d15 	stw	r2,180(sp)
81114f04:	90e4703a 	and	r18,r18,r3
81114f08:	983d2726 	beq	r19,zero,811143a8 <__reset+0xfb0f43a8>
81114f0c:	0039883a 	mov	fp,zero
81114f10:	003d2a06 	br	811143bc <__reset+0xfb0f43bc>
81114f14:	dc402617 	ldw	r17,152(sp)
81114f18:	0441d30e 	bge	zero,r17,81115668 <___vfprintf_internal_r+0x1970>
81114f1c:	dc403217 	ldw	r17,200(sp)
81114f20:	d8803317 	ldw	r2,204(sp)
81114f24:	1440010e 	bge	r2,r17,81114f2c <___vfprintf_internal_r+0x1234>
81114f28:	1023883a 	mov	r17,r2
81114f2c:	04400a0e 	bge	zero,r17,81114f58 <___vfprintf_internal_r+0x1260>
81114f30:	d8801f17 	ldw	r2,124(sp)
81114f34:	1c47883a 	add	r3,r3,r17
81114f38:	44000015 	stw	r16,0(r8)
81114f3c:	10800044 	addi	r2,r2,1
81114f40:	44400115 	stw	r17,4(r8)
81114f44:	d8c02015 	stw	r3,128(sp)
81114f48:	d8801f15 	stw	r2,124(sp)
81114f4c:	010001c4 	movi	r4,7
81114f50:	20826516 	blt	r4,r2,811158e8 <___vfprintf_internal_r+0x1bf0>
81114f54:	42000204 	addi	r8,r8,8
81114f58:	88026116 	blt	r17,zero,811158e0 <___vfprintf_internal_r+0x1be8>
81114f5c:	d9003217 	ldw	r4,200(sp)
81114f60:	2463c83a 	sub	r17,r4,r17
81114f64:	04407b0e 	bge	zero,r17,81115154 <___vfprintf_internal_r+0x145c>
81114f68:	05800404 	movi	r22,16
81114f6c:	d8801f17 	ldw	r2,124(sp)
81114f70:	b4419d0e 	bge	r22,r17,811155e8 <___vfprintf_internal_r+0x18f0>
81114f74:	01204534 	movhi	r4,33044
81114f78:	21313584 	addi	r4,r4,-15146
81114f7c:	d9002b15 	stw	r4,172(sp)
81114f80:	070001c4 	movi	fp,7
81114f84:	dcc02c17 	ldw	r19,176(sp)
81114f88:	00000306 	br	81114f98 <___vfprintf_internal_r+0x12a0>
81114f8c:	42000204 	addi	r8,r8,8
81114f90:	8c7ffc04 	addi	r17,r17,-16
81114f94:	b441970e 	bge	r22,r17,811155f4 <___vfprintf_internal_r+0x18fc>
81114f98:	18c00404 	addi	r3,r3,16
81114f9c:	10800044 	addi	r2,r2,1
81114fa0:	45000015 	stw	r20,0(r8)
81114fa4:	45800115 	stw	r22,4(r8)
81114fa8:	d8c02015 	stw	r3,128(sp)
81114fac:	d8801f15 	stw	r2,124(sp)
81114fb0:	e0bff60e 	bge	fp,r2,81114f8c <__reset+0xfb0f4f8c>
81114fb4:	d9801e04 	addi	r6,sp,120
81114fb8:	b80b883a 	mov	r5,r23
81114fbc:	9809883a 	mov	r4,r19
81114fc0:	111fd880 	call	8111fd88 <__sprint_r>
81114fc4:	103c501e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81114fc8:	d8c02017 	ldw	r3,128(sp)
81114fcc:	d8801f17 	ldw	r2,124(sp)
81114fd0:	da000404 	addi	r8,sp,16
81114fd4:	003fee06 	br	81114f90 <__reset+0xfb0f4f90>
81114fd8:	d9002c17 	ldw	r4,176(sp)
81114fdc:	d9801e04 	addi	r6,sp,120
81114fe0:	b80b883a 	mov	r5,r23
81114fe4:	111fd880 	call	8111fd88 <__sprint_r>
81114fe8:	103c471e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81114fec:	d8c02017 	ldw	r3,128(sp)
81114ff0:	df002787 	ldb	fp,158(sp)
81114ff4:	da000404 	addi	r8,sp,16
81114ff8:	003d5606 	br	81114554 <__reset+0xfb0f4554>
81114ffc:	9080040c 	andi	r2,r18,16
81115000:	10016126 	beq	r2,zero,81115588 <___vfprintf_internal_r+0x1890>
81115004:	d8802d17 	ldw	r2,180(sp)
81115008:	14c00017 	ldw	r19,0(r2)
8111500c:	10800104 	addi	r2,r2,4
81115010:	d8802d15 	stw	r2,180(sp)
81115014:	982dd7fa 	srai	r22,r19,31
81115018:	b005883a 	mov	r2,r22
8111501c:	003c8206 	br	81114228 <__reset+0xfb0f4228>
81115020:	9080040c 	andi	r2,r18,16
81115024:	10003526 	beq	r2,zero,811150fc <___vfprintf_internal_r+0x1404>
81115028:	d9402d17 	ldw	r5,180(sp)
8111502c:	d8c02917 	ldw	r3,164(sp)
81115030:	d8002785 	stb	zero,158(sp)
81115034:	28800104 	addi	r2,r5,4
81115038:	2cc00017 	ldw	r19,0(r5)
8111503c:	002d883a 	mov	r22,zero
81115040:	18003716 	blt	r3,zero,81115120 <___vfprintf_internal_r+0x1428>
81115044:	00ffdfc4 	movi	r3,-129
81115048:	d8802d15 	stw	r2,180(sp)
8111504c:	90e4703a 	and	r18,r18,r3
81115050:	0039883a 	mov	fp,zero
81115054:	983df326 	beq	r19,zero,81114824 <__reset+0xfb0f4824>
81115058:	00800244 	movi	r2,9
8111505c:	14fc7b36 	bltu	r2,r19,8111424c <__reset+0xfb0f424c>
81115060:	d8c02817 	ldw	r3,160(sp)
81115064:	dc001dc4 	addi	r16,sp,119
81115068:	9cc00c04 	addi	r19,r19,48
8111506c:	1c07c83a 	sub	r3,r3,r16
81115070:	dcc01dc5 	stb	r19,119(sp)
81115074:	d8c02e15 	stw	r3,184(sp)
81115078:	003ce806 	br	8111441c <__reset+0xfb0f441c>
8111507c:	d8803317 	ldw	r2,204(sp)
81115080:	143fffc4 	addi	r16,r2,-1
81115084:	043f4d0e 	bge	zero,r16,81114dbc <__reset+0xfb0f4dbc>
81115088:	07000404 	movi	fp,16
8111508c:	e400810e 	bge	fp,r16,81115294 <___vfprintf_internal_r+0x159c>
81115090:	01604534 	movhi	r5,33044
81115094:	29713584 	addi	r5,r5,-15146
81115098:	d9402b15 	stw	r5,172(sp)
8111509c:	01c001c4 	movi	r7,7
811150a0:	dcc02c17 	ldw	r19,176(sp)
811150a4:	00000306 	br	811150b4 <___vfprintf_internal_r+0x13bc>
811150a8:	b5800204 	addi	r22,r22,8
811150ac:	843ffc04 	addi	r16,r16,-16
811150b0:	e4007b0e 	bge	fp,r16,811152a0 <___vfprintf_internal_r+0x15a8>
811150b4:	18c00404 	addi	r3,r3,16
811150b8:	8c400044 	addi	r17,r17,1
811150bc:	b5000015 	stw	r20,0(r22)
811150c0:	b7000115 	stw	fp,4(r22)
811150c4:	d8c02015 	stw	r3,128(sp)
811150c8:	dc401f15 	stw	r17,124(sp)
811150cc:	3c7ff60e 	bge	r7,r17,811150a8 <__reset+0xfb0f50a8>
811150d0:	d9801e04 	addi	r6,sp,120
811150d4:	b80b883a 	mov	r5,r23
811150d8:	9809883a 	mov	r4,r19
811150dc:	d9c03c15 	stw	r7,240(sp)
811150e0:	111fd880 	call	8111fd88 <__sprint_r>
811150e4:	d9c03c17 	ldw	r7,240(sp)
811150e8:	103c071e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
811150ec:	d8c02017 	ldw	r3,128(sp)
811150f0:	dc401f17 	ldw	r17,124(sp)
811150f4:	dd800404 	addi	r22,sp,16
811150f8:	003fec06 	br	811150ac <__reset+0xfb0f50ac>
811150fc:	9080100c 	andi	r2,r18,64
81115100:	d8002785 	stb	zero,158(sp)
81115104:	10010e26 	beq	r2,zero,81115540 <___vfprintf_internal_r+0x1848>
81115108:	d9002d17 	ldw	r4,180(sp)
8111510c:	d9402917 	ldw	r5,164(sp)
81115110:	002d883a 	mov	r22,zero
81115114:	20800104 	addi	r2,r4,4
81115118:	24c0000b 	ldhu	r19,0(r4)
8111511c:	283fc90e 	bge	r5,zero,81115044 <__reset+0xfb0f5044>
81115120:	d8802d15 	stw	r2,180(sp)
81115124:	0039883a 	mov	fp,zero
81115128:	9d84b03a 	or	r2,r19,r22
8111512c:	103c461e 	bne	r2,zero,81114248 <__reset+0xfb0f4248>
81115130:	00800044 	movi	r2,1
81115134:	003e6c06 	br	81114ae8 <__reset+0xfb0f4ae8>
81115138:	d9002c17 	ldw	r4,176(sp)
8111513c:	d9801e04 	addi	r6,sp,120
81115140:	b80b883a 	mov	r5,r23
81115144:	111fd880 	call	8111fd88 <__sprint_r>
81115148:	103bef1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
8111514c:	d8c02017 	ldw	r3,128(sp)
81115150:	da000404 	addi	r8,sp,16
81115154:	d9003217 	ldw	r4,200(sp)
81115158:	d8802617 	ldw	r2,152(sp)
8111515c:	d9403317 	ldw	r5,204(sp)
81115160:	8123883a 	add	r17,r16,r4
81115164:	11400216 	blt	r2,r5,81115170 <___vfprintf_internal_r+0x1478>
81115168:	9100004c 	andi	r4,r18,1
8111516c:	20000d26 	beq	r4,zero,811151a4 <___vfprintf_internal_r+0x14ac>
81115170:	d9003717 	ldw	r4,220(sp)
81115174:	d9403417 	ldw	r5,208(sp)
81115178:	1907883a 	add	r3,r3,r4
8111517c:	d9001f17 	ldw	r4,124(sp)
81115180:	41400015 	stw	r5,0(r8)
81115184:	d9403717 	ldw	r5,220(sp)
81115188:	21000044 	addi	r4,r4,1
8111518c:	d8c02015 	stw	r3,128(sp)
81115190:	41400115 	stw	r5,4(r8)
81115194:	d9001f15 	stw	r4,124(sp)
81115198:	014001c4 	movi	r5,7
8111519c:	2901e816 	blt	r5,r4,81115940 <___vfprintf_internal_r+0x1c48>
811151a0:	42000204 	addi	r8,r8,8
811151a4:	d9003317 	ldw	r4,204(sp)
811151a8:	8121883a 	add	r16,r16,r4
811151ac:	2085c83a 	sub	r2,r4,r2
811151b0:	8461c83a 	sub	r16,r16,r17
811151b4:	1400010e 	bge	r2,r16,811151bc <___vfprintf_internal_r+0x14c4>
811151b8:	1021883a 	mov	r16,r2
811151bc:	04000a0e 	bge	zero,r16,811151e8 <___vfprintf_internal_r+0x14f0>
811151c0:	d9001f17 	ldw	r4,124(sp)
811151c4:	1c07883a 	add	r3,r3,r16
811151c8:	44400015 	stw	r17,0(r8)
811151cc:	21000044 	addi	r4,r4,1
811151d0:	44000115 	stw	r16,4(r8)
811151d4:	d8c02015 	stw	r3,128(sp)
811151d8:	d9001f15 	stw	r4,124(sp)
811151dc:	014001c4 	movi	r5,7
811151e0:	2901fb16 	blt	r5,r4,811159d0 <___vfprintf_internal_r+0x1cd8>
811151e4:	42000204 	addi	r8,r8,8
811151e8:	8001f716 	blt	r16,zero,811159c8 <___vfprintf_internal_r+0x1cd0>
811151ec:	1421c83a 	sub	r16,r2,r16
811151f0:	043d380e 	bge	zero,r16,811146d4 <__reset+0xfb0f46d4>
811151f4:	04400404 	movi	r17,16
811151f8:	d8801f17 	ldw	r2,124(sp)
811151fc:	8c3efb0e 	bge	r17,r16,81114dec <__reset+0xfb0f4dec>
81115200:	01604534 	movhi	r5,33044
81115204:	29713584 	addi	r5,r5,-15146
81115208:	d9402b15 	stw	r5,172(sp)
8111520c:	058001c4 	movi	r22,7
81115210:	dcc02c17 	ldw	r19,176(sp)
81115214:	00000306 	br	81115224 <___vfprintf_internal_r+0x152c>
81115218:	42000204 	addi	r8,r8,8
8111521c:	843ffc04 	addi	r16,r16,-16
81115220:	8c3ef50e 	bge	r17,r16,81114df8 <__reset+0xfb0f4df8>
81115224:	18c00404 	addi	r3,r3,16
81115228:	10800044 	addi	r2,r2,1
8111522c:	45000015 	stw	r20,0(r8)
81115230:	44400115 	stw	r17,4(r8)
81115234:	d8c02015 	stw	r3,128(sp)
81115238:	d8801f15 	stw	r2,124(sp)
8111523c:	b0bff60e 	bge	r22,r2,81115218 <__reset+0xfb0f5218>
81115240:	d9801e04 	addi	r6,sp,120
81115244:	b80b883a 	mov	r5,r23
81115248:	9809883a 	mov	r4,r19
8111524c:	111fd880 	call	8111fd88 <__sprint_r>
81115250:	103bad1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81115254:	d8c02017 	ldw	r3,128(sp)
81115258:	d8801f17 	ldw	r2,124(sp)
8111525c:	da000404 	addi	r8,sp,16
81115260:	003fee06 	br	8111521c <__reset+0xfb0f521c>
81115264:	9088703a 	and	r4,r18,r2
81115268:	203eab1e 	bne	r4,zero,81114d18 <__reset+0xfb0f4d18>
8111526c:	dc401f17 	ldw	r17,124(sp)
81115270:	40800115 	stw	r2,4(r8)
81115274:	44000015 	stw	r16,0(r8)
81115278:	8c400044 	addi	r17,r17,1
8111527c:	d8c02015 	stw	r3,128(sp)
81115280:	dc401f15 	stw	r17,124(sp)
81115284:	008001c4 	movi	r2,7
81115288:	14400e16 	blt	r2,r17,811152c4 <___vfprintf_internal_r+0x15cc>
8111528c:	45800204 	addi	r22,r8,8
81115290:	003eca06 	br	81114dbc <__reset+0xfb0f4dbc>
81115294:	01204534 	movhi	r4,33044
81115298:	21313584 	addi	r4,r4,-15146
8111529c:	d9002b15 	stw	r4,172(sp)
811152a0:	d8802b17 	ldw	r2,172(sp)
811152a4:	1c07883a 	add	r3,r3,r16
811152a8:	8c400044 	addi	r17,r17,1
811152ac:	b0800015 	stw	r2,0(r22)
811152b0:	b4000115 	stw	r16,4(r22)
811152b4:	d8c02015 	stw	r3,128(sp)
811152b8:	dc401f15 	stw	r17,124(sp)
811152bc:	008001c4 	movi	r2,7
811152c0:	147ebd0e 	bge	r2,r17,81114db8 <__reset+0xfb0f4db8>
811152c4:	d9002c17 	ldw	r4,176(sp)
811152c8:	d9801e04 	addi	r6,sp,120
811152cc:	b80b883a 	mov	r5,r23
811152d0:	111fd880 	call	8111fd88 <__sprint_r>
811152d4:	103b8c1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
811152d8:	d8c02017 	ldw	r3,128(sp)
811152dc:	dc401f17 	ldw	r17,124(sp)
811152e0:	dd800404 	addi	r22,sp,16
811152e4:	003eb506 	br	81114dbc <__reset+0xfb0f4dbc>
811152e8:	d9002c17 	ldw	r4,176(sp)
811152ec:	d9801e04 	addi	r6,sp,120
811152f0:	b80b883a 	mov	r5,r23
811152f4:	111fd880 	call	8111fd88 <__sprint_r>
811152f8:	103b831e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
811152fc:	d8c02017 	ldw	r3,128(sp)
81115300:	dc401f17 	ldw	r17,124(sp)
81115304:	da000404 	addi	r8,sp,16
81115308:	003e8d06 	br	81114d40 <__reset+0xfb0f4d40>
8111530c:	d9002c17 	ldw	r4,176(sp)
81115310:	d9801e04 	addi	r6,sp,120
81115314:	b80b883a 	mov	r5,r23
81115318:	111fd880 	call	8111fd88 <__sprint_r>
8111531c:	103b7a1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81115320:	d8c02017 	ldw	r3,128(sp)
81115324:	dc401f17 	ldw	r17,124(sp)
81115328:	dd800404 	addi	r22,sp,16
8111532c:	003e8f06 	br	81114d6c <__reset+0xfb0f4d6c>
81115330:	0027883a 	mov	r19,zero
81115334:	003f4a06 	br	81115060 <__reset+0xfb0f5060>
81115338:	d9002c17 	ldw	r4,176(sp)
8111533c:	d9801e04 	addi	r6,sp,120
81115340:	b80b883a 	mov	r5,r23
81115344:	111fd880 	call	8111fd88 <__sprint_r>
81115348:	103b6f1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
8111534c:	d8c02017 	ldw	r3,128(sp)
81115350:	da000404 	addi	r8,sp,16
81115354:	003c9d06 	br	811145cc <__reset+0xfb0f45cc>
81115358:	04e7c83a 	sub	r19,zero,r19
8111535c:	9804c03a 	cmpne	r2,r19,zero
81115360:	05adc83a 	sub	r22,zero,r22
81115364:	b0adc83a 	sub	r22,r22,r2
81115368:	d8802917 	ldw	r2,164(sp)
8111536c:	07000b44 	movi	fp,45
81115370:	df002785 	stb	fp,158(sp)
81115374:	10017b16 	blt	r2,zero,81115964 <___vfprintf_internal_r+0x1c6c>
81115378:	00bfdfc4 	movi	r2,-129
8111537c:	90a4703a 	and	r18,r18,r2
81115380:	003bb106 	br	81114248 <__reset+0xfb0f4248>
81115384:	d9003617 	ldw	r4,216(sp)
81115388:	d9403817 	ldw	r5,224(sp)
8111538c:	da003d15 	stw	r8,244(sp)
81115390:	111c3ec0 	call	8111c3ec <__fpclassifyd>
81115394:	da003d17 	ldw	r8,244(sp)
81115398:	1000f026 	beq	r2,zero,8111575c <___vfprintf_internal_r+0x1a64>
8111539c:	d9002917 	ldw	r4,164(sp)
811153a0:	05bff7c4 	movi	r22,-33
811153a4:	00bfffc4 	movi	r2,-1
811153a8:	8dac703a 	and	r22,r17,r22
811153ac:	20820026 	beq	r4,r2,81115bb0 <___vfprintf_internal_r+0x1eb8>
811153b0:	008011c4 	movi	r2,71
811153b4:	b081f726 	beq	r22,r2,81115b94 <___vfprintf_internal_r+0x1e9c>
811153b8:	d9003817 	ldw	r4,224(sp)
811153bc:	90c04014 	ori	r3,r18,256
811153c0:	d8c02b15 	stw	r3,172(sp)
811153c4:	20021516 	blt	r4,zero,81115c1c <___vfprintf_internal_r+0x1f24>
811153c8:	dcc03817 	ldw	r19,224(sp)
811153cc:	d8002a05 	stb	zero,168(sp)
811153d0:	00801984 	movi	r2,102
811153d4:	8881f926 	beq	r17,r2,81115bbc <___vfprintf_internal_r+0x1ec4>
811153d8:	00801184 	movi	r2,70
811153dc:	88821c26 	beq	r17,r2,81115c50 <___vfprintf_internal_r+0x1f58>
811153e0:	00801144 	movi	r2,69
811153e4:	b081ef26 	beq	r22,r2,81115ba4 <___vfprintf_internal_r+0x1eac>
811153e8:	d8c02917 	ldw	r3,164(sp)
811153ec:	d8802104 	addi	r2,sp,132
811153f0:	d8800315 	stw	r2,12(sp)
811153f4:	d9403617 	ldw	r5,216(sp)
811153f8:	d8802504 	addi	r2,sp,148
811153fc:	d9002c17 	ldw	r4,176(sp)
81115400:	d8800215 	stw	r2,8(sp)
81115404:	d8802604 	addi	r2,sp,152
81115408:	d8c00015 	stw	r3,0(sp)
8111540c:	d8800115 	stw	r2,4(sp)
81115410:	01c00084 	movi	r7,2
81115414:	980d883a 	mov	r6,r19
81115418:	d8c03c15 	stw	r3,240(sp)
8111541c:	da003d15 	stw	r8,244(sp)
81115420:	1117ca40 	call	81117ca4 <_dtoa_r>
81115424:	1021883a 	mov	r16,r2
81115428:	008019c4 	movi	r2,103
8111542c:	d8c03c17 	ldw	r3,240(sp)
81115430:	da003d17 	ldw	r8,244(sp)
81115434:	88817126 	beq	r17,r2,811159fc <___vfprintf_internal_r+0x1d04>
81115438:	008011c4 	movi	r2,71
8111543c:	88829226 	beq	r17,r2,81115e88 <___vfprintf_internal_r+0x2190>
81115440:	80f9883a 	add	fp,r16,r3
81115444:	d9003617 	ldw	r4,216(sp)
81115448:	000d883a 	mov	r6,zero
8111544c:	000f883a 	mov	r7,zero
81115450:	980b883a 	mov	r5,r19
81115454:	da003d15 	stw	r8,244(sp)
81115458:	11247300 	call	81124730 <__eqdf2>
8111545c:	da003d17 	ldw	r8,244(sp)
81115460:	10018d26 	beq	r2,zero,81115a98 <___vfprintf_internal_r+0x1da0>
81115464:	d8802117 	ldw	r2,132(sp)
81115468:	1700062e 	bgeu	r2,fp,81115484 <___vfprintf_internal_r+0x178c>
8111546c:	01000c04 	movi	r4,48
81115470:	10c00044 	addi	r3,r2,1
81115474:	d8c02115 	stw	r3,132(sp)
81115478:	11000005 	stb	r4,0(r2)
8111547c:	d8802117 	ldw	r2,132(sp)
81115480:	173ffb36 	bltu	r2,fp,81115470 <__reset+0xfb0f5470>
81115484:	1405c83a 	sub	r2,r2,r16
81115488:	d8803315 	stw	r2,204(sp)
8111548c:	008011c4 	movi	r2,71
81115490:	b0817626 	beq	r22,r2,81115a6c <___vfprintf_internal_r+0x1d74>
81115494:	00801944 	movi	r2,101
81115498:	1442810e 	bge	r2,r17,81115ea0 <___vfprintf_internal_r+0x21a8>
8111549c:	d8c02617 	ldw	r3,152(sp)
811154a0:	00801984 	movi	r2,102
811154a4:	d8c03215 	stw	r3,200(sp)
811154a8:	8881fe26 	beq	r17,r2,81115ca4 <___vfprintf_internal_r+0x1fac>
811154ac:	d8c03217 	ldw	r3,200(sp)
811154b0:	d9003317 	ldw	r4,204(sp)
811154b4:	1901dd16 	blt	r3,r4,81115c2c <___vfprintf_internal_r+0x1f34>
811154b8:	9480004c 	andi	r18,r18,1
811154bc:	90022b1e 	bne	r18,zero,81115d6c <___vfprintf_internal_r+0x2074>
811154c0:	1805883a 	mov	r2,r3
811154c4:	18028016 	blt	r3,zero,81115ec8 <___vfprintf_internal_r+0x21d0>
811154c8:	d8c03217 	ldw	r3,200(sp)
811154cc:	044019c4 	movi	r17,103
811154d0:	d8c02e15 	stw	r3,184(sp)
811154d4:	df002a07 	ldb	fp,168(sp)
811154d8:	e001531e 	bne	fp,zero,81115a28 <___vfprintf_internal_r+0x1d30>
811154dc:	df002783 	ldbu	fp,158(sp)
811154e0:	d8802a15 	stw	r2,168(sp)
811154e4:	dc802b17 	ldw	r18,172(sp)
811154e8:	d8002915 	stw	zero,164(sp)
811154ec:	003bd106 	br	81114434 <__reset+0xfb0f4434>
811154f0:	d8802d17 	ldw	r2,180(sp)
811154f4:	d8c02d17 	ldw	r3,180(sp)
811154f8:	d9002d17 	ldw	r4,180(sp)
811154fc:	10800017 	ldw	r2,0(r2)
81115500:	18c00117 	ldw	r3,4(r3)
81115504:	21000204 	addi	r4,r4,8
81115508:	d8803615 	stw	r2,216(sp)
8111550c:	d8c03815 	stw	r3,224(sp)
81115510:	d9002d15 	stw	r4,180(sp)
81115514:	003b7506 	br	811142ec <__reset+0xfb0f42ec>
81115518:	ac400007 	ldb	r17,0(r21)
8111551c:	003a5906 	br	81113e84 <__reset+0xfb0f3e84>
81115520:	9080100c 	andi	r2,r18,64
81115524:	1000a826 	beq	r2,zero,811157c8 <___vfprintf_internal_r+0x1ad0>
81115528:	d9002d17 	ldw	r4,180(sp)
8111552c:	002d883a 	mov	r22,zero
81115530:	24c0000b 	ldhu	r19,0(r4)
81115534:	21000104 	addi	r4,r4,4
81115538:	d9002d15 	stw	r4,180(sp)
8111553c:	003ccb06 	br	8111486c <__reset+0xfb0f486c>
81115540:	d8c02d17 	ldw	r3,180(sp)
81115544:	d9002917 	ldw	r4,164(sp)
81115548:	002d883a 	mov	r22,zero
8111554c:	18800104 	addi	r2,r3,4
81115550:	1cc00017 	ldw	r19,0(r3)
81115554:	203ebb0e 	bge	r4,zero,81115044 <__reset+0xfb0f5044>
81115558:	003ef106 	br	81115120 <__reset+0xfb0f5120>
8111555c:	9080040c 	andi	r2,r18,16
81115560:	1000921e 	bne	r2,zero,811157ac <___vfprintf_internal_r+0x1ab4>
81115564:	9480100c 	andi	r18,r18,64
81115568:	90013926 	beq	r18,zero,81115a50 <___vfprintf_internal_r+0x1d58>
8111556c:	d9002d17 	ldw	r4,180(sp)
81115570:	d9402f17 	ldw	r5,188(sp)
81115574:	20800017 	ldw	r2,0(r4)
81115578:	21000104 	addi	r4,r4,4
8111557c:	d9002d15 	stw	r4,180(sp)
81115580:	1140000d 	sth	r5,0(r2)
81115584:	003a1606 	br	81113de0 <__reset+0xfb0f3de0>
81115588:	9080100c 	andi	r2,r18,64
8111558c:	10008026 	beq	r2,zero,81115790 <___vfprintf_internal_r+0x1a98>
81115590:	d8c02d17 	ldw	r3,180(sp)
81115594:	1cc0000f 	ldh	r19,0(r3)
81115598:	18c00104 	addi	r3,r3,4
8111559c:	d8c02d15 	stw	r3,180(sp)
811155a0:	982dd7fa 	srai	r22,r19,31
811155a4:	b005883a 	mov	r2,r22
811155a8:	003b1f06 	br	81114228 <__reset+0xfb0f4228>
811155ac:	9080100c 	andi	r2,r18,64
811155b0:	d8002785 	stb	zero,158(sp)
811155b4:	10008a1e 	bne	r2,zero,811157e0 <___vfprintf_internal_r+0x1ae8>
811155b8:	d9402d17 	ldw	r5,180(sp)
811155bc:	d8c02917 	ldw	r3,164(sp)
811155c0:	002d883a 	mov	r22,zero
811155c4:	28800104 	addi	r2,r5,4
811155c8:	2cc00017 	ldw	r19,0(r5)
811155cc:	183e4b0e 	bge	r3,zero,81114efc <__reset+0xfb0f4efc>
811155d0:	9d86b03a 	or	r3,r19,r22
811155d4:	d8802d15 	stw	r2,180(sp)
811155d8:	183e4c1e 	bne	r3,zero,81114f0c <__reset+0xfb0f4f0c>
811155dc:	0039883a 	mov	fp,zero
811155e0:	0005883a 	mov	r2,zero
811155e4:	003d4006 	br	81114ae8 <__reset+0xfb0f4ae8>
811155e8:	01604534 	movhi	r5,33044
811155ec:	29713584 	addi	r5,r5,-15146
811155f0:	d9402b15 	stw	r5,172(sp)
811155f4:	d9402b17 	ldw	r5,172(sp)
811155f8:	1c47883a 	add	r3,r3,r17
811155fc:	10800044 	addi	r2,r2,1
81115600:	41400015 	stw	r5,0(r8)
81115604:	44400115 	stw	r17,4(r8)
81115608:	d8c02015 	stw	r3,128(sp)
8111560c:	d8801f15 	stw	r2,124(sp)
81115610:	010001c4 	movi	r4,7
81115614:	20bec816 	blt	r4,r2,81115138 <__reset+0xfb0f5138>
81115618:	42000204 	addi	r8,r8,8
8111561c:	003ecd06 	br	81115154 <__reset+0xfb0f5154>
81115620:	d9002917 	ldw	r4,164(sp)
81115624:	d8002785 	stb	zero,158(sp)
81115628:	203d2d16 	blt	r4,zero,81114ae0 <__reset+0xfb0f4ae0>
8111562c:	00bfdfc4 	movi	r2,-129
81115630:	90a4703a 	and	r18,r18,r2
81115634:	003a9106 	br	8111407c <__reset+0xfb0f407c>
81115638:	01204534 	movhi	r4,33044
8111563c:	21313584 	addi	r4,r4,-15146
81115640:	d9002b15 	stw	r4,172(sp)
81115644:	003c0c06 	br	81114678 <__reset+0xfb0f4678>
81115648:	d9002c17 	ldw	r4,176(sp)
8111564c:	d9801e04 	addi	r6,sp,120
81115650:	b80b883a 	mov	r5,r23
81115654:	111fd880 	call	8111fd88 <__sprint_r>
81115658:	103aab1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
8111565c:	d8c02017 	ldw	r3,128(sp)
81115660:	da000404 	addi	r8,sp,16
81115664:	003d4106 	br	81114b6c <__reset+0xfb0f4b6c>
81115668:	d8801f17 	ldw	r2,124(sp)
8111566c:	01604534 	movhi	r5,33044
81115670:	01000044 	movi	r4,1
81115674:	18c00044 	addi	r3,r3,1
81115678:	10800044 	addi	r2,r2,1
8111567c:	29712d04 	addi	r5,r5,-15180
81115680:	41000115 	stw	r4,4(r8)
81115684:	41400015 	stw	r5,0(r8)
81115688:	d8c02015 	stw	r3,128(sp)
8111568c:	d8801f15 	stw	r2,124(sp)
81115690:	010001c4 	movi	r4,7
81115694:	20805c16 	blt	r4,r2,81115808 <___vfprintf_internal_r+0x1b10>
81115698:	42000204 	addi	r8,r8,8
8111569c:	8800041e 	bne	r17,zero,811156b0 <___vfprintf_internal_r+0x19b8>
811156a0:	d8803317 	ldw	r2,204(sp)
811156a4:	1000021e 	bne	r2,zero,811156b0 <___vfprintf_internal_r+0x19b8>
811156a8:	9080004c 	andi	r2,r18,1
811156ac:	103c0926 	beq	r2,zero,811146d4 <__reset+0xfb0f46d4>
811156b0:	d9003717 	ldw	r4,220(sp)
811156b4:	d8801f17 	ldw	r2,124(sp)
811156b8:	d9403417 	ldw	r5,208(sp)
811156bc:	20c7883a 	add	r3,r4,r3
811156c0:	10800044 	addi	r2,r2,1
811156c4:	41000115 	stw	r4,4(r8)
811156c8:	41400015 	stw	r5,0(r8)
811156cc:	d8c02015 	stw	r3,128(sp)
811156d0:	d8801f15 	stw	r2,124(sp)
811156d4:	010001c4 	movi	r4,7
811156d8:	20812116 	blt	r4,r2,81115b60 <___vfprintf_internal_r+0x1e68>
811156dc:	42000204 	addi	r8,r8,8
811156e0:	0463c83a 	sub	r17,zero,r17
811156e4:	0440730e 	bge	zero,r17,811158b4 <___vfprintf_internal_r+0x1bbc>
811156e8:	05800404 	movi	r22,16
811156ec:	b440860e 	bge	r22,r17,81115908 <___vfprintf_internal_r+0x1c10>
811156f0:	01604534 	movhi	r5,33044
811156f4:	29713584 	addi	r5,r5,-15146
811156f8:	d9402b15 	stw	r5,172(sp)
811156fc:	070001c4 	movi	fp,7
81115700:	dcc02c17 	ldw	r19,176(sp)
81115704:	00000306 	br	81115714 <___vfprintf_internal_r+0x1a1c>
81115708:	42000204 	addi	r8,r8,8
8111570c:	8c7ffc04 	addi	r17,r17,-16
81115710:	b440800e 	bge	r22,r17,81115914 <___vfprintf_internal_r+0x1c1c>
81115714:	18c00404 	addi	r3,r3,16
81115718:	10800044 	addi	r2,r2,1
8111571c:	45000015 	stw	r20,0(r8)
81115720:	45800115 	stw	r22,4(r8)
81115724:	d8c02015 	stw	r3,128(sp)
81115728:	d8801f15 	stw	r2,124(sp)
8111572c:	e0bff60e 	bge	fp,r2,81115708 <__reset+0xfb0f5708>
81115730:	d9801e04 	addi	r6,sp,120
81115734:	b80b883a 	mov	r5,r23
81115738:	9809883a 	mov	r4,r19
8111573c:	111fd880 	call	8111fd88 <__sprint_r>
81115740:	103a711e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81115744:	d8c02017 	ldw	r3,128(sp)
81115748:	d8801f17 	ldw	r2,124(sp)
8111574c:	da000404 	addi	r8,sp,16
81115750:	003fee06 	br	8111570c <__reset+0xfb0f570c>
81115754:	00bfffc4 	movi	r2,-1
81115758:	003a6f06 	br	81114118 <__reset+0xfb0f4118>
8111575c:	008011c4 	movi	r2,71
81115760:	1440b816 	blt	r2,r17,81115a44 <___vfprintf_internal_r+0x1d4c>
81115764:	04204534 	movhi	r16,33044
81115768:	84311f04 	addi	r16,r16,-15236
8111576c:	00c000c4 	movi	r3,3
81115770:	00bfdfc4 	movi	r2,-129
81115774:	d8c02a15 	stw	r3,168(sp)
81115778:	90a4703a 	and	r18,r18,r2
8111577c:	df002783 	ldbu	fp,158(sp)
81115780:	d8c02e15 	stw	r3,184(sp)
81115784:	d8002915 	stw	zero,164(sp)
81115788:	d8003215 	stw	zero,200(sp)
8111578c:	003b2906 	br	81114434 <__reset+0xfb0f4434>
81115790:	d9002d17 	ldw	r4,180(sp)
81115794:	24c00017 	ldw	r19,0(r4)
81115798:	21000104 	addi	r4,r4,4
8111579c:	d9002d15 	stw	r4,180(sp)
811157a0:	982dd7fa 	srai	r22,r19,31
811157a4:	b005883a 	mov	r2,r22
811157a8:	003a9f06 	br	81114228 <__reset+0xfb0f4228>
811157ac:	d9402d17 	ldw	r5,180(sp)
811157b0:	d8c02f17 	ldw	r3,188(sp)
811157b4:	28800017 	ldw	r2,0(r5)
811157b8:	29400104 	addi	r5,r5,4
811157bc:	d9402d15 	stw	r5,180(sp)
811157c0:	10c00015 	stw	r3,0(r2)
811157c4:	00398606 	br	81113de0 <__reset+0xfb0f3de0>
811157c8:	d9402d17 	ldw	r5,180(sp)
811157cc:	002d883a 	mov	r22,zero
811157d0:	2cc00017 	ldw	r19,0(r5)
811157d4:	29400104 	addi	r5,r5,4
811157d8:	d9402d15 	stw	r5,180(sp)
811157dc:	003c2306 	br	8111486c <__reset+0xfb0f486c>
811157e0:	d8c02d17 	ldw	r3,180(sp)
811157e4:	d9002917 	ldw	r4,164(sp)
811157e8:	002d883a 	mov	r22,zero
811157ec:	18800104 	addi	r2,r3,4
811157f0:	1cc0000b 	ldhu	r19,0(r3)
811157f4:	203dc10e 	bge	r4,zero,81114efc <__reset+0xfb0f4efc>
811157f8:	003f7506 	br	811155d0 <__reset+0xfb0f55d0>
811157fc:	04204534 	movhi	r16,33044
81115800:	84311d04 	addi	r16,r16,-15244
81115804:	003acc06 	br	81114338 <__reset+0xfb0f4338>
81115808:	d9002c17 	ldw	r4,176(sp)
8111580c:	d9801e04 	addi	r6,sp,120
81115810:	b80b883a 	mov	r5,r23
81115814:	111fd880 	call	8111fd88 <__sprint_r>
81115818:	103a3b1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
8111581c:	dc402617 	ldw	r17,152(sp)
81115820:	d8c02017 	ldw	r3,128(sp)
81115824:	da000404 	addi	r8,sp,16
81115828:	003f9c06 	br	8111569c <__reset+0xfb0f569c>
8111582c:	ac400043 	ldbu	r17,1(r21)
81115830:	94800814 	ori	r18,r18,32
81115834:	ad400044 	addi	r21,r21,1
81115838:	8c403fcc 	andi	r17,r17,255
8111583c:	8c40201c 	xori	r17,r17,128
81115840:	8c7fe004 	addi	r17,r17,-128
81115844:	00398f06 	br	81113e84 <__reset+0xfb0f3e84>
81115848:	d8c02d15 	stw	r3,180(sp)
8111584c:	0039883a 	mov	fp,zero
81115850:	003e3506 	br	81115128 <__reset+0xfb0f5128>
81115854:	d9002c17 	ldw	r4,176(sp)
81115858:	d9801e04 	addi	r6,sp,120
8111585c:	b80b883a 	mov	r5,r23
81115860:	111fd880 	call	8111fd88 <__sprint_r>
81115864:	103a281e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81115868:	d8c02017 	ldw	r3,128(sp)
8111586c:	da000404 	addi	r8,sp,16
81115870:	003cd006 	br	81114bb4 <__reset+0xfb0f4bb4>
81115874:	8009883a 	mov	r4,r16
81115878:	da003d15 	stw	r8,244(sp)
8111587c:	11118240 	call	81111824 <strlen>
81115880:	d8802e15 	stw	r2,184(sp)
81115884:	da003d17 	ldw	r8,244(sp)
81115888:	103c340e 	bge	r2,zero,8111495c <__reset+0xfb0f495c>
8111588c:	0005883a 	mov	r2,zero
81115890:	003c3206 	br	8111495c <__reset+0xfb0f495c>
81115894:	d9002c17 	ldw	r4,176(sp)
81115898:	d9801e04 	addi	r6,sp,120
8111589c:	b80b883a 	mov	r5,r23
811158a0:	111fd880 	call	8111fd88 <__sprint_r>
811158a4:	103a181e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
811158a8:	d8c02017 	ldw	r3,128(sp)
811158ac:	d8801f17 	ldw	r2,124(sp)
811158b0:	da000404 	addi	r8,sp,16
811158b4:	d9403317 	ldw	r5,204(sp)
811158b8:	10800044 	addi	r2,r2,1
811158bc:	44000015 	stw	r16,0(r8)
811158c0:	28c7883a 	add	r3,r5,r3
811158c4:	003b7d06 	br	811146bc <__reset+0xfb0f46bc>
811158c8:	01204534 	movhi	r4,33044
811158cc:	21313984 	addi	r4,r4,-15130
811158d0:	d9003515 	stw	r4,212(sp)
811158d4:	003b1406 	br	81114528 <__reset+0xfb0f4528>
811158d8:	013fffc4 	movi	r4,-1
811158dc:	003a3506 	br	811141b4 <__reset+0xfb0f41b4>
811158e0:	0023883a 	mov	r17,zero
811158e4:	003d9d06 	br	81114f5c <__reset+0xfb0f4f5c>
811158e8:	d9002c17 	ldw	r4,176(sp)
811158ec:	d9801e04 	addi	r6,sp,120
811158f0:	b80b883a 	mov	r5,r23
811158f4:	111fd880 	call	8111fd88 <__sprint_r>
811158f8:	103a031e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
811158fc:	d8c02017 	ldw	r3,128(sp)
81115900:	da000404 	addi	r8,sp,16
81115904:	003d9406 	br	81114f58 <__reset+0xfb0f4f58>
81115908:	01204534 	movhi	r4,33044
8111590c:	21313584 	addi	r4,r4,-15146
81115910:	d9002b15 	stw	r4,172(sp)
81115914:	d9002b17 	ldw	r4,172(sp)
81115918:	1c47883a 	add	r3,r3,r17
8111591c:	10800044 	addi	r2,r2,1
81115920:	41000015 	stw	r4,0(r8)
81115924:	44400115 	stw	r17,4(r8)
81115928:	d8c02015 	stw	r3,128(sp)
8111592c:	d8801f15 	stw	r2,124(sp)
81115930:	010001c4 	movi	r4,7
81115934:	20bfd716 	blt	r4,r2,81115894 <__reset+0xfb0f5894>
81115938:	42000204 	addi	r8,r8,8
8111593c:	003fdd06 	br	811158b4 <__reset+0xfb0f58b4>
81115940:	d9002c17 	ldw	r4,176(sp)
81115944:	d9801e04 	addi	r6,sp,120
81115948:	b80b883a 	mov	r5,r23
8111594c:	111fd880 	call	8111fd88 <__sprint_r>
81115950:	1039ed1e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81115954:	d8802617 	ldw	r2,152(sp)
81115958:	d8c02017 	ldw	r3,128(sp)
8111595c:	da000404 	addi	r8,sp,16
81115960:	003e1006 	br	811151a4 <__reset+0xfb0f51a4>
81115964:	00800044 	movi	r2,1
81115968:	10803fcc 	andi	r2,r2,255
8111596c:	00c00044 	movi	r3,1
81115970:	10fa3526 	beq	r2,r3,81114248 <__reset+0xfb0f4248>
81115974:	00c00084 	movi	r3,2
81115978:	10fbcb26 	beq	r2,r3,811148a8 <__reset+0xfb0f48a8>
8111597c:	003a8f06 	br	811143bc <__reset+0xfb0f43bc>
81115980:	01204534 	movhi	r4,33044
81115984:	21313984 	addi	r4,r4,-15130
81115988:	d9003515 	stw	r4,212(sp)
8111598c:	003b7606 	br	81114768 <__reset+0xfb0f4768>
81115990:	d8802917 	ldw	r2,164(sp)
81115994:	00c00184 	movi	r3,6
81115998:	1880012e 	bgeu	r3,r2,811159a0 <___vfprintf_internal_r+0x1ca8>
8111599c:	1805883a 	mov	r2,r3
811159a0:	d8802e15 	stw	r2,184(sp)
811159a4:	1000ef16 	blt	r2,zero,81115d64 <___vfprintf_internal_r+0x206c>
811159a8:	04204534 	movhi	r16,33044
811159ac:	d8802a15 	stw	r2,168(sp)
811159b0:	dcc02d15 	stw	r19,180(sp)
811159b4:	d8002915 	stw	zero,164(sp)
811159b8:	d8003215 	stw	zero,200(sp)
811159bc:	84312b04 	addi	r16,r16,-15188
811159c0:	0039883a 	mov	fp,zero
811159c4:	003aa206 	br	81114450 <__reset+0xfb0f4450>
811159c8:	0021883a 	mov	r16,zero
811159cc:	003e0706 	br	811151ec <__reset+0xfb0f51ec>
811159d0:	d9002c17 	ldw	r4,176(sp)
811159d4:	d9801e04 	addi	r6,sp,120
811159d8:	b80b883a 	mov	r5,r23
811159dc:	111fd880 	call	8111fd88 <__sprint_r>
811159e0:	1039c91e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
811159e4:	d8802617 	ldw	r2,152(sp)
811159e8:	d9403317 	ldw	r5,204(sp)
811159ec:	d8c02017 	ldw	r3,128(sp)
811159f0:	da000404 	addi	r8,sp,16
811159f4:	2885c83a 	sub	r2,r5,r2
811159f8:	003dfb06 	br	811151e8 <__reset+0xfb0f51e8>
811159fc:	9080004c 	andi	r2,r18,1
81115a00:	103e8f1e 	bne	r2,zero,81115440 <__reset+0xfb0f5440>
81115a04:	d8802117 	ldw	r2,132(sp)
81115a08:	003e9e06 	br	81115484 <__reset+0xfb0f5484>
81115a0c:	1025883a 	mov	r18,r2
81115a10:	0039883a 	mov	fp,zero
81115a14:	00800084 	movi	r2,2
81115a18:	003fd306 	br	81115968 <__reset+0xfb0f5968>
81115a1c:	07000b44 	movi	fp,45
81115a20:	df002785 	stb	fp,158(sp)
81115a24:	003a4006 	br	81114328 <__reset+0xfb0f4328>
81115a28:	00c00b44 	movi	r3,45
81115a2c:	d8c02785 	stb	r3,158(sp)
81115a30:	d8802a15 	stw	r2,168(sp)
81115a34:	dc802b17 	ldw	r18,172(sp)
81115a38:	d8002915 	stw	zero,164(sp)
81115a3c:	07000b44 	movi	fp,45
81115a40:	003a8006 	br	81114444 <__reset+0xfb0f4444>
81115a44:	04204534 	movhi	r16,33044
81115a48:	84312004 	addi	r16,r16,-15232
81115a4c:	003f4706 	br	8111576c <__reset+0xfb0f576c>
81115a50:	d8c02d17 	ldw	r3,180(sp)
81115a54:	d9002f17 	ldw	r4,188(sp)
81115a58:	18800017 	ldw	r2,0(r3)
81115a5c:	18c00104 	addi	r3,r3,4
81115a60:	d8c02d15 	stw	r3,180(sp)
81115a64:	11000015 	stw	r4,0(r2)
81115a68:	0038dd06 	br	81113de0 <__reset+0xfb0f3de0>
81115a6c:	dd802617 	ldw	r22,152(sp)
81115a70:	00bfff44 	movi	r2,-3
81115a74:	b0801c16 	blt	r22,r2,81115ae8 <___vfprintf_internal_r+0x1df0>
81115a78:	d9402917 	ldw	r5,164(sp)
81115a7c:	2d801a16 	blt	r5,r22,81115ae8 <___vfprintf_internal_r+0x1df0>
81115a80:	dd803215 	stw	r22,200(sp)
81115a84:	003e8906 	br	811154ac <__reset+0xfb0f54ac>
81115a88:	01204534 	movhi	r4,33044
81115a8c:	21313584 	addi	r4,r4,-15146
81115a90:	d9002b15 	stw	r4,172(sp)
81115a94:	003c9106 	br	81114cdc <__reset+0xfb0f4cdc>
81115a98:	e005883a 	mov	r2,fp
81115a9c:	003e7906 	br	81115484 <__reset+0xfb0f5484>
81115aa0:	d9402917 	ldw	r5,164(sp)
81115aa4:	df002783 	ldbu	fp,158(sp)
81115aa8:	dcc02d15 	stw	r19,180(sp)
81115aac:	d9402a15 	stw	r5,168(sp)
81115ab0:	d9402e15 	stw	r5,184(sp)
81115ab4:	d8002915 	stw	zero,164(sp)
81115ab8:	d8003215 	stw	zero,200(sp)
81115abc:	003a5d06 	br	81114434 <__reset+0xfb0f4434>
81115ac0:	9080004c 	andi	r2,r18,1
81115ac4:	0039883a 	mov	fp,zero
81115ac8:	10000426 	beq	r2,zero,81115adc <___vfprintf_internal_r+0x1de4>
81115acc:	00800c04 	movi	r2,48
81115ad0:	dc001dc4 	addi	r16,sp,119
81115ad4:	d8801dc5 	stb	r2,119(sp)
81115ad8:	003b8006 	br	811148dc <__reset+0xfb0f48dc>
81115adc:	d8002e15 	stw	zero,184(sp)
81115ae0:	dc001e04 	addi	r16,sp,120
81115ae4:	003a4d06 	br	8111441c <__reset+0xfb0f441c>
81115ae8:	8c7fff84 	addi	r17,r17,-2
81115aec:	b5bfffc4 	addi	r22,r22,-1
81115af0:	dd802615 	stw	r22,152(sp)
81115af4:	dc4022c5 	stb	r17,139(sp)
81115af8:	b000bf16 	blt	r22,zero,81115df8 <___vfprintf_internal_r+0x2100>
81115afc:	00800ac4 	movi	r2,43
81115b00:	d8802305 	stb	r2,140(sp)
81115b04:	00800244 	movi	r2,9
81115b08:	15807016 	blt	r2,r22,81115ccc <___vfprintf_internal_r+0x1fd4>
81115b0c:	00800c04 	movi	r2,48
81115b10:	b5800c04 	addi	r22,r22,48
81115b14:	d8802345 	stb	r2,141(sp)
81115b18:	dd802385 	stb	r22,142(sp)
81115b1c:	d88023c4 	addi	r2,sp,143
81115b20:	df0022c4 	addi	fp,sp,139
81115b24:	d8c03317 	ldw	r3,204(sp)
81115b28:	1739c83a 	sub	fp,r2,fp
81115b2c:	d9003317 	ldw	r4,204(sp)
81115b30:	e0c7883a 	add	r3,fp,r3
81115b34:	df003a15 	stw	fp,232(sp)
81115b38:	d8c02e15 	stw	r3,184(sp)
81115b3c:	00800044 	movi	r2,1
81115b40:	1100b30e 	bge	r2,r4,81115e10 <___vfprintf_internal_r+0x2118>
81115b44:	d8c02e17 	ldw	r3,184(sp)
81115b48:	18c00044 	addi	r3,r3,1
81115b4c:	d8c02e15 	stw	r3,184(sp)
81115b50:	1805883a 	mov	r2,r3
81115b54:	1800ac16 	blt	r3,zero,81115e08 <___vfprintf_internal_r+0x2110>
81115b58:	d8003215 	stw	zero,200(sp)
81115b5c:	003e5d06 	br	811154d4 <__reset+0xfb0f54d4>
81115b60:	d9002c17 	ldw	r4,176(sp)
81115b64:	d9801e04 	addi	r6,sp,120
81115b68:	b80b883a 	mov	r5,r23
81115b6c:	111fd880 	call	8111fd88 <__sprint_r>
81115b70:	1039651e 	bne	r2,zero,81114108 <__reset+0xfb0f4108>
81115b74:	dc402617 	ldw	r17,152(sp)
81115b78:	d8c02017 	ldw	r3,128(sp)
81115b7c:	d8801f17 	ldw	r2,124(sp)
81115b80:	da000404 	addi	r8,sp,16
81115b84:	003ed606 	br	811156e0 <__reset+0xfb0f56e0>
81115b88:	582b883a 	mov	r21,r11
81115b8c:	d8002915 	stw	zero,164(sp)
81115b90:	0038bd06 	br	81113e88 <__reset+0xfb0f3e88>
81115b94:	d8802917 	ldw	r2,164(sp)
81115b98:	103e071e 	bne	r2,zero,811153b8 <__reset+0xfb0f53b8>
81115b9c:	dc002915 	stw	r16,164(sp)
81115ba0:	003e0506 	br	811153b8 <__reset+0xfb0f53b8>
81115ba4:	d9002917 	ldw	r4,164(sp)
81115ba8:	20c00044 	addi	r3,r4,1
81115bac:	003e0f06 	br	811153ec <__reset+0xfb0f53ec>
81115bb0:	01400184 	movi	r5,6
81115bb4:	d9402915 	stw	r5,164(sp)
81115bb8:	003dff06 	br	811153b8 <__reset+0xfb0f53b8>
81115bbc:	d8802104 	addi	r2,sp,132
81115bc0:	d8800315 	stw	r2,12(sp)
81115bc4:	d8802504 	addi	r2,sp,148
81115bc8:	d8800215 	stw	r2,8(sp)
81115bcc:	d8802604 	addi	r2,sp,152
81115bd0:	d8800115 	stw	r2,4(sp)
81115bd4:	d8802917 	ldw	r2,164(sp)
81115bd8:	d9403617 	ldw	r5,216(sp)
81115bdc:	d9002c17 	ldw	r4,176(sp)
81115be0:	d8800015 	stw	r2,0(sp)
81115be4:	01c000c4 	movi	r7,3
81115be8:	980d883a 	mov	r6,r19
81115bec:	da003d15 	stw	r8,244(sp)
81115bf0:	1117ca40 	call	81117ca4 <_dtoa_r>
81115bf4:	d8c02917 	ldw	r3,164(sp)
81115bf8:	da003d17 	ldw	r8,244(sp)
81115bfc:	1021883a 	mov	r16,r2
81115c00:	10f9883a 	add	fp,r2,r3
81115c04:	81000007 	ldb	r4,0(r16)
81115c08:	00800c04 	movi	r2,48
81115c0c:	20805e26 	beq	r4,r2,81115d88 <___vfprintf_internal_r+0x2090>
81115c10:	d8c02617 	ldw	r3,152(sp)
81115c14:	e0f9883a 	add	fp,fp,r3
81115c18:	003e0a06 	br	81115444 <__reset+0xfb0f5444>
81115c1c:	00c00b44 	movi	r3,45
81115c20:	24e0003c 	xorhi	r19,r4,32768
81115c24:	d8c02a05 	stb	r3,168(sp)
81115c28:	003de906 	br	811153d0 <__reset+0xfb0f53d0>
81115c2c:	d8c03217 	ldw	r3,200(sp)
81115c30:	00c07a0e 	bge	zero,r3,81115e1c <___vfprintf_internal_r+0x2124>
81115c34:	00800044 	movi	r2,1
81115c38:	d9003317 	ldw	r4,204(sp)
81115c3c:	1105883a 	add	r2,r2,r4
81115c40:	d8802e15 	stw	r2,184(sp)
81115c44:	10004e16 	blt	r2,zero,81115d80 <___vfprintf_internal_r+0x2088>
81115c48:	044019c4 	movi	r17,103
81115c4c:	003e2106 	br	811154d4 <__reset+0xfb0f54d4>
81115c50:	d9002917 	ldw	r4,164(sp)
81115c54:	d8802104 	addi	r2,sp,132
81115c58:	d8800315 	stw	r2,12(sp)
81115c5c:	d9000015 	stw	r4,0(sp)
81115c60:	d8802504 	addi	r2,sp,148
81115c64:	d9403617 	ldw	r5,216(sp)
81115c68:	d9002c17 	ldw	r4,176(sp)
81115c6c:	d8800215 	stw	r2,8(sp)
81115c70:	d8802604 	addi	r2,sp,152
81115c74:	d8800115 	stw	r2,4(sp)
81115c78:	01c000c4 	movi	r7,3
81115c7c:	980d883a 	mov	r6,r19
81115c80:	da003d15 	stw	r8,244(sp)
81115c84:	1117ca40 	call	81117ca4 <_dtoa_r>
81115c88:	d8c02917 	ldw	r3,164(sp)
81115c8c:	da003d17 	ldw	r8,244(sp)
81115c90:	1021883a 	mov	r16,r2
81115c94:	00801184 	movi	r2,70
81115c98:	80f9883a 	add	fp,r16,r3
81115c9c:	88bfd926 	beq	r17,r2,81115c04 <__reset+0xfb0f5c04>
81115ca0:	003de806 	br	81115444 <__reset+0xfb0f5444>
81115ca4:	d9002917 	ldw	r4,164(sp)
81115ca8:	00c04d0e 	bge	zero,r3,81115de0 <___vfprintf_internal_r+0x20e8>
81115cac:	2000441e 	bne	r4,zero,81115dc0 <___vfprintf_internal_r+0x20c8>
81115cb0:	9480004c 	andi	r18,r18,1
81115cb4:	9000421e 	bne	r18,zero,81115dc0 <___vfprintf_internal_r+0x20c8>
81115cb8:	1805883a 	mov	r2,r3
81115cbc:	18007016 	blt	r3,zero,81115e80 <___vfprintf_internal_r+0x2188>
81115cc0:	d8c03217 	ldw	r3,200(sp)
81115cc4:	d8c02e15 	stw	r3,184(sp)
81115cc8:	003e0206 	br	811154d4 <__reset+0xfb0f54d4>
81115ccc:	df0022c4 	addi	fp,sp,139
81115cd0:	dc002915 	stw	r16,164(sp)
81115cd4:	4027883a 	mov	r19,r8
81115cd8:	e021883a 	mov	r16,fp
81115cdc:	b009883a 	mov	r4,r22
81115ce0:	01400284 	movi	r5,10
81115ce4:	11232600 	call	81123260 <__modsi3>
81115ce8:	10800c04 	addi	r2,r2,48
81115cec:	843fffc4 	addi	r16,r16,-1
81115cf0:	b009883a 	mov	r4,r22
81115cf4:	01400284 	movi	r5,10
81115cf8:	80800005 	stb	r2,0(r16)
81115cfc:	11231dc0 	call	811231dc <__divsi3>
81115d00:	102d883a 	mov	r22,r2
81115d04:	00800244 	movi	r2,9
81115d08:	15bff416 	blt	r2,r22,81115cdc <__reset+0xfb0f5cdc>
81115d0c:	9811883a 	mov	r8,r19
81115d10:	b0800c04 	addi	r2,r22,48
81115d14:	8027883a 	mov	r19,r16
81115d18:	997fffc4 	addi	r5,r19,-1
81115d1c:	98bfffc5 	stb	r2,-1(r19)
81115d20:	dc002917 	ldw	r16,164(sp)
81115d24:	2f006a2e 	bgeu	r5,fp,81115ed0 <___vfprintf_internal_r+0x21d8>
81115d28:	d9c02384 	addi	r7,sp,142
81115d2c:	3ccfc83a 	sub	r7,r7,r19
81115d30:	d9002344 	addi	r4,sp,141
81115d34:	e1cf883a 	add	r7,fp,r7
81115d38:	00000106 	br	81115d40 <___vfprintf_internal_r+0x2048>
81115d3c:	28800003 	ldbu	r2,0(r5)
81115d40:	20800005 	stb	r2,0(r4)
81115d44:	21000044 	addi	r4,r4,1
81115d48:	29400044 	addi	r5,r5,1
81115d4c:	393ffb1e 	bne	r7,r4,81115d3c <__reset+0xfb0f5d3c>
81115d50:	d8802304 	addi	r2,sp,140
81115d54:	14c5c83a 	sub	r2,r2,r19
81115d58:	d8c02344 	addi	r3,sp,141
81115d5c:	1885883a 	add	r2,r3,r2
81115d60:	003f7006 	br	81115b24 <__reset+0xfb0f5b24>
81115d64:	0005883a 	mov	r2,zero
81115d68:	003f0f06 	br	811159a8 <__reset+0xfb0f59a8>
81115d6c:	d8c03217 	ldw	r3,200(sp)
81115d70:	18c00044 	addi	r3,r3,1
81115d74:	d8c02e15 	stw	r3,184(sp)
81115d78:	1805883a 	mov	r2,r3
81115d7c:	183fb20e 	bge	r3,zero,81115c48 <__reset+0xfb0f5c48>
81115d80:	0005883a 	mov	r2,zero
81115d84:	003fb006 	br	81115c48 <__reset+0xfb0f5c48>
81115d88:	d9003617 	ldw	r4,216(sp)
81115d8c:	000d883a 	mov	r6,zero
81115d90:	000f883a 	mov	r7,zero
81115d94:	980b883a 	mov	r5,r19
81115d98:	d8c03c15 	stw	r3,240(sp)
81115d9c:	da003d15 	stw	r8,244(sp)
81115da0:	11247300 	call	81124730 <__eqdf2>
81115da4:	d8c03c17 	ldw	r3,240(sp)
81115da8:	da003d17 	ldw	r8,244(sp)
81115dac:	103f9826 	beq	r2,zero,81115c10 <__reset+0xfb0f5c10>
81115db0:	00800044 	movi	r2,1
81115db4:	10c7c83a 	sub	r3,r2,r3
81115db8:	d8c02615 	stw	r3,152(sp)
81115dbc:	003f9506 	br	81115c14 <__reset+0xfb0f5c14>
81115dc0:	d9002917 	ldw	r4,164(sp)
81115dc4:	d8c03217 	ldw	r3,200(sp)
81115dc8:	20800044 	addi	r2,r4,1
81115dcc:	1885883a 	add	r2,r3,r2
81115dd0:	d8802e15 	stw	r2,184(sp)
81115dd4:	103dbf0e 	bge	r2,zero,811154d4 <__reset+0xfb0f54d4>
81115dd8:	0005883a 	mov	r2,zero
81115ddc:	003dbd06 	br	811154d4 <__reset+0xfb0f54d4>
81115de0:	2000211e 	bne	r4,zero,81115e68 <___vfprintf_internal_r+0x2170>
81115de4:	9480004c 	andi	r18,r18,1
81115de8:	90001f1e 	bne	r18,zero,81115e68 <___vfprintf_internal_r+0x2170>
81115dec:	00800044 	movi	r2,1
81115df0:	d8802e15 	stw	r2,184(sp)
81115df4:	003db706 	br	811154d4 <__reset+0xfb0f54d4>
81115df8:	00800b44 	movi	r2,45
81115dfc:	05adc83a 	sub	r22,zero,r22
81115e00:	d8802305 	stb	r2,140(sp)
81115e04:	003f3f06 	br	81115b04 <__reset+0xfb0f5b04>
81115e08:	0005883a 	mov	r2,zero
81115e0c:	003f5206 	br	81115b58 <__reset+0xfb0f5b58>
81115e10:	90a4703a 	and	r18,r18,r2
81115e14:	903f4e26 	beq	r18,zero,81115b50 <__reset+0xfb0f5b50>
81115e18:	003f4a06 	br	81115b44 <__reset+0xfb0f5b44>
81115e1c:	00800084 	movi	r2,2
81115e20:	10c5c83a 	sub	r2,r2,r3
81115e24:	003f8406 	br	81115c38 <__reset+0xfb0f5c38>
81115e28:	d8802d17 	ldw	r2,180(sp)
81115e2c:	d9002d17 	ldw	r4,180(sp)
81115e30:	ac400043 	ldbu	r17,1(r21)
81115e34:	10800017 	ldw	r2,0(r2)
81115e38:	582b883a 	mov	r21,r11
81115e3c:	d8802915 	stw	r2,164(sp)
81115e40:	20800104 	addi	r2,r4,4
81115e44:	d9002917 	ldw	r4,164(sp)
81115e48:	d8802d15 	stw	r2,180(sp)
81115e4c:	203e7a0e 	bge	r4,zero,81115838 <__reset+0xfb0f5838>
81115e50:	8c403fcc 	andi	r17,r17,255
81115e54:	00bfffc4 	movi	r2,-1
81115e58:	8c40201c 	xori	r17,r17,128
81115e5c:	d8802915 	stw	r2,164(sp)
81115e60:	8c7fe004 	addi	r17,r17,-128
81115e64:	00380706 	br	81113e84 <__reset+0xfb0f3e84>
81115e68:	d8c02917 	ldw	r3,164(sp)
81115e6c:	18c00084 	addi	r3,r3,2
81115e70:	d8c02e15 	stw	r3,184(sp)
81115e74:	1805883a 	mov	r2,r3
81115e78:	183d960e 	bge	r3,zero,811154d4 <__reset+0xfb0f54d4>
81115e7c:	003fd606 	br	81115dd8 <__reset+0xfb0f5dd8>
81115e80:	0005883a 	mov	r2,zero
81115e84:	003f8e06 	br	81115cc0 <__reset+0xfb0f5cc0>
81115e88:	9080004c 	andi	r2,r18,1
81115e8c:	103f811e 	bne	r2,zero,81115c94 <__reset+0xfb0f5c94>
81115e90:	d8802117 	ldw	r2,132(sp)
81115e94:	1405c83a 	sub	r2,r2,r16
81115e98:	d8803315 	stw	r2,204(sp)
81115e9c:	b47ef326 	beq	r22,r17,81115a6c <__reset+0xfb0f5a6c>
81115ea0:	dd802617 	ldw	r22,152(sp)
81115ea4:	003f1106 	br	81115aec <__reset+0xfb0f5aec>
81115ea8:	d9c02785 	stb	r7,158(sp)
81115eac:	00390406 	br	811142c0 <__reset+0xfb0f42c0>
81115eb0:	d9c02785 	stb	r7,158(sp)
81115eb4:	0038d306 	br	81114204 <__reset+0xfb0f4204>
81115eb8:	d9c02785 	stb	r7,158(sp)
81115ebc:	003a6106 	br	81114844 <__reset+0xfb0f4844>
81115ec0:	d9c02785 	stb	r7,158(sp)
81115ec4:	003af806 	br	81114aa8 <__reset+0xfb0f4aa8>
81115ec8:	0005883a 	mov	r2,zero
81115ecc:	003d7e06 	br	811154c8 <__reset+0xfb0f54c8>
81115ed0:	d8802344 	addi	r2,sp,141
81115ed4:	003f1306 	br	81115b24 <__reset+0xfb0f5b24>
81115ed8:	d9c02785 	stb	r7,158(sp)
81115edc:	00392306 	br	8111436c <__reset+0xfb0f436c>
81115ee0:	d9c02785 	stb	r7,158(sp)
81115ee4:	003aa906 	br	8111498c <__reset+0xfb0f498c>
81115ee8:	d9c02785 	stb	r7,158(sp)
81115eec:	003a3d06 	br	811147e4 <__reset+0xfb0f47e4>
81115ef0:	d9c02785 	stb	r7,158(sp)
81115ef4:	003aca06 	br	81114a20 <__reset+0xfb0f4a20>

81115ef8 <__vfprintf_internal>:
81115ef8:	00a04534 	movhi	r2,33044
81115efc:	10ba2704 	addi	r2,r2,-5988
81115f00:	300f883a 	mov	r7,r6
81115f04:	280d883a 	mov	r6,r5
81115f08:	200b883a 	mov	r5,r4
81115f0c:	11000017 	ldw	r4,0(r2)
81115f10:	1113cf81 	jmpi	81113cf8 <___vfprintf_internal_r>

81115f14 <__sbprintf>:
81115f14:	defee204 	addi	sp,sp,-1144
81115f18:	de00012e 	bgeu	sp,et,81115f20 <__sbprintf+0xc>
81115f1c:	003b68fa 	trap	3
81115f20:	2880030b 	ldhu	r2,12(r5)
81115f24:	2ac01917 	ldw	r11,100(r5)
81115f28:	2a80038b 	ldhu	r10,14(r5)
81115f2c:	2a400717 	ldw	r9,28(r5)
81115f30:	2a000917 	ldw	r8,36(r5)
81115f34:	00c10004 	movi	r3,1024
81115f38:	dc011a15 	stw	r16,1128(sp)
81115f3c:	10bfff4c 	andi	r2,r2,65533
81115f40:	2821883a 	mov	r16,r5
81115f44:	d8cb883a 	add	r5,sp,r3
81115f48:	dc811c15 	stw	r18,1136(sp)
81115f4c:	dc411b15 	stw	r17,1132(sp)
81115f50:	dfc11d15 	stw	ra,1140(sp)
81115f54:	2025883a 	mov	r18,r4
81115f58:	d881030d 	sth	r2,1036(sp)
81115f5c:	dac11915 	stw	r11,1124(sp)
81115f60:	da81038d 	sth	r10,1038(sp)
81115f64:	da410715 	stw	r9,1052(sp)
81115f68:	da010915 	stw	r8,1060(sp)
81115f6c:	dec10015 	stw	sp,1024(sp)
81115f70:	dec10415 	stw	sp,1040(sp)
81115f74:	d8c10215 	stw	r3,1032(sp)
81115f78:	d8c10515 	stw	r3,1044(sp)
81115f7c:	d8010615 	stw	zero,1048(sp)
81115f80:	1113cf80 	call	81113cf8 <___vfprintf_internal_r>
81115f84:	1023883a 	mov	r17,r2
81115f88:	10000416 	blt	r2,zero,81115f9c <__sbprintf+0x88>
81115f8c:	d9410004 	addi	r5,sp,1024
81115f90:	9009883a 	mov	r4,r18
81115f94:	11195580 	call	81119558 <_fflush_r>
81115f98:	10000d1e 	bne	r2,zero,81115fd0 <__sbprintf+0xbc>
81115f9c:	d881030b 	ldhu	r2,1036(sp)
81115fa0:	1080100c 	andi	r2,r2,64
81115fa4:	10000326 	beq	r2,zero,81115fb4 <__sbprintf+0xa0>
81115fa8:	8080030b 	ldhu	r2,12(r16)
81115fac:	10801014 	ori	r2,r2,64
81115fb0:	8080030d 	sth	r2,12(r16)
81115fb4:	8805883a 	mov	r2,r17
81115fb8:	dfc11d17 	ldw	ra,1140(sp)
81115fbc:	dc811c17 	ldw	r18,1136(sp)
81115fc0:	dc411b17 	ldw	r17,1132(sp)
81115fc4:	dc011a17 	ldw	r16,1128(sp)
81115fc8:	dec11e04 	addi	sp,sp,1144
81115fcc:	f800283a 	ret
81115fd0:	047fffc4 	movi	r17,-1
81115fd4:	003ff106 	br	81115f9c <__reset+0xfb0f5f9c>

81115fd8 <__svfscanf_r>:
81115fd8:	deff4b04 	addi	sp,sp,-724
81115fdc:	de00012e 	bgeu	sp,et,81115fe4 <__svfscanf_r+0xc>
81115fe0:	003b68fa 	trap	3
81115fe4:	2880030b 	ldhu	r2,12(r5)
81115fe8:	df00b315 	stw	fp,716(sp)
81115fec:	dd80b115 	stw	r22,708(sp)
81115ff0:	dfc0b415 	stw	ra,720(sp)
81115ff4:	ddc0b215 	stw	r23,712(sp)
81115ff8:	dd40b015 	stw	r21,704(sp)
81115ffc:	dd00af15 	stw	r20,700(sp)
81116000:	dcc0ae15 	stw	r19,696(sp)
81116004:	dc80ad15 	stw	r18,692(sp)
81116008:	dc40ac15 	stw	r17,688(sp)
8111600c:	dc00ab15 	stw	r16,684(sp)
81116010:	10c8000c 	andi	r3,r2,8192
81116014:	d9c09c15 	stw	r7,624(sp)
81116018:	2839883a 	mov	fp,r5
8111601c:	202d883a 	mov	r22,r4
81116020:	1800061e 	bne	r3,zero,8111603c <__svfscanf_r+0x64>
81116024:	29001917 	ldw	r4,100(r5)
81116028:	00f7ffc4 	movi	r3,-8193
8111602c:	10880014 	ori	r2,r2,8192
81116030:	20c6703a 	and	r3,r4,r3
81116034:	2880030d 	sth	r2,12(r5)
81116038:	28c01915 	stw	r3,100(r5)
8111603c:	30800003 	ldbu	r2,0(r6)
81116040:	0021883a 	mov	r16,zero
81116044:	05e04534 	movhi	r23,33044
81116048:	d800a115 	stw	zero,644(sp)
8111604c:	d8009e15 	stw	zero,632(sp)
81116050:	d800a015 	stw	zero,640(sp)
81116054:	d8809b15 	stw	r2,620(sp)
81116058:	bdfa2504 	addi	r23,r23,-5996
8111605c:	8025883a 	mov	r18,r16
81116060:	35000044 	addi	r20,r6,1
81116064:	10001e26 	beq	r2,zero,811160e0 <__svfscanf_r+0x108>
81116068:	b9c00017 	ldw	r7,0(r23)
8111606c:	3887883a 	add	r3,r7,r2
81116070:	18c00043 	ldbu	r3,1(r3)
81116074:	18c0020c 	andi	r3,r3,8
81116078:	18001b26 	beq	r3,zero,811160e8 <__svfscanf_r+0x110>
8111607c:	e0800117 	ldw	r2,4(fp)
81116080:	00800e0e 	bge	zero,r2,811160bc <__svfscanf_r+0xe4>
81116084:	e0c00017 	ldw	r3,0(fp)
81116088:	b9000017 	ldw	r4,0(r23)
8111608c:	18800003 	ldbu	r2,0(r3)
81116090:	2085883a 	add	r2,r4,r2
81116094:	10800043 	ldbu	r2,1(r2)
81116098:	1080020c 	andi	r2,r2,8
8111609c:	10000b26 	beq	r2,zero,811160cc <__svfscanf_r+0xf4>
811160a0:	e0800117 	ldw	r2,4(fp)
811160a4:	18c00044 	addi	r3,r3,1
811160a8:	e0c00015 	stw	r3,0(fp)
811160ac:	10bfffc4 	addi	r2,r2,-1
811160b0:	e0800115 	stw	r2,4(fp)
811160b4:	94800044 	addi	r18,r18,1
811160b8:	00bff216 	blt	zero,r2,81116084 <__reset+0xfb0f6084>
811160bc:	e00b883a 	mov	r5,fp
811160c0:	b009883a 	mov	r4,r22
811160c4:	11112fc0 	call	811112fc <__srefill_r>
811160c8:	103fee26 	beq	r2,zero,81116084 <__reset+0xfb0f6084>
811160cc:	a00d883a 	mov	r6,r20
811160d0:	30800003 	ldbu	r2,0(r6)
811160d4:	35000044 	addi	r20,r6,1
811160d8:	d8809b15 	stw	r2,620(sp)
811160dc:	103fe21e 	bne	r2,zero,81116068 <__reset+0xfb0f6068>
811160e0:	d880a017 	ldw	r2,640(sp)
811160e4:	00009906 	br	8111634c <__svfscanf_r+0x374>
811160e8:	00c00944 	movi	r3,37
811160ec:	10c0881e 	bne	r2,r3,81116310 <__svfscanf_r+0x338>
811160f0:	30c00043 	ldbu	r3,1(r6)
811160f4:	0023883a 	mov	r17,zero
811160f8:	0027883a 	mov	r19,zero
811160fc:	01001e04 	movi	r4,120
81116100:	01401b04 	movi	r5,108
81116104:	a1800044 	addi	r6,r20,1
81116108:	20c0a236 	bltu	r4,r3,81116394 <__svfscanf_r+0x3bc>
8111610c:	180490ba 	slli	r2,r3,2
81116110:	02204474 	movhi	r8,33041
81116114:	42184904 	addi	r8,r8,24868
81116118:	1205883a 	add	r2,r2,r8
8111611c:	10800017 	ldw	r2,0(r2)
81116120:	1000683a 	jmp	r2
81116124:	81116348 	cmpgei	r4,r16,17805
81116128:	81116394 	ori	r4,r16,17806
8111612c:	81116394 	ori	r4,r16,17806
81116130:	81116394 	ori	r4,r16,17806
81116134:	81116394 	ori	r4,r16,17806
81116138:	81116394 	ori	r4,r16,17806
8111613c:	81116394 	ori	r4,r16,17806
81116140:	81116394 	ori	r4,r16,17806
81116144:	81116394 	ori	r4,r16,17806
81116148:	81116394 	ori	r4,r16,17806
8111614c:	81116394 	ori	r4,r16,17806
81116150:	81116394 	ori	r4,r16,17806
81116154:	81116394 	ori	r4,r16,17806
81116158:	81116394 	ori	r4,r16,17806
8111615c:	81116394 	ori	r4,r16,17806
81116160:	81116394 	ori	r4,r16,17806
81116164:	81116394 	ori	r4,r16,17806
81116168:	81116394 	ori	r4,r16,17806
8111616c:	81116394 	ori	r4,r16,17806
81116170:	81116394 	ori	r4,r16,17806
81116174:	81116394 	ori	r4,r16,17806
81116178:	81116394 	ori	r4,r16,17806
8111617c:	81116394 	ori	r4,r16,17806
81116180:	81116394 	ori	r4,r16,17806
81116184:	81116394 	ori	r4,r16,17806
81116188:	81116394 	ori	r4,r16,17806
8111618c:	81116394 	ori	r4,r16,17806
81116190:	81116394 	ori	r4,r16,17806
81116194:	81116394 	ori	r4,r16,17806
81116198:	81116394 	ori	r4,r16,17806
8111619c:	81116394 	ori	r4,r16,17806
811161a0:	81116394 	ori	r4,r16,17806
811161a4:	81116394 	ori	r4,r16,17806
811161a8:	81116394 	ori	r4,r16,17806
811161ac:	81116394 	ori	r4,r16,17806
811161b0:	81116394 	ori	r4,r16,17806
811161b4:	81116394 	ori	r4,r16,17806
811161b8:	81116308 	cmpgei	r4,r16,17804
811161bc:	81116394 	ori	r4,r16,17806
811161c0:	81116394 	ori	r4,r16,17806
811161c4:	81116394 	ori	r4,r16,17806
811161c8:	81116394 	ori	r4,r16,17806
811161cc:	8111637c 	xorhi	r4,r16,17805
811161d0:	81116394 	ori	r4,r16,17806
811161d4:	81116394 	ori	r4,r16,17806
811161d8:	81116394 	ori	r4,r16,17806
811161dc:	81116394 	ori	r4,r16,17806
811161e0:	81116394 	ori	r4,r16,17806
811161e4:	811164b0 	cmpltui	r4,r16,17810
811161e8:	811164b0 	cmpltui	r4,r16,17810
811161ec:	811164b0 	cmpltui	r4,r16,17810
811161f0:	811164b0 	cmpltui	r4,r16,17810
811161f4:	811164b0 	cmpltui	r4,r16,17810
811161f8:	811164b0 	cmpltui	r4,r16,17810
811161fc:	811164b0 	cmpltui	r4,r16,17810
81116200:	811164b0 	cmpltui	r4,r16,17810
81116204:	811164b0 	cmpltui	r4,r16,17810
81116208:	811164b0 	cmpltui	r4,r16,17810
8111620c:	81116394 	ori	r4,r16,17806
81116210:	81116394 	ori	r4,r16,17806
81116214:	81116394 	ori	r4,r16,17806
81116218:	81116394 	ori	r4,r16,17806
8111621c:	81116394 	ori	r4,r16,17806
81116220:	81116394 	ori	r4,r16,17806
81116224:	81116394 	ori	r4,r16,17806
81116228:	81116394 	ori	r4,r16,17806
8111622c:	81116394 	ori	r4,r16,17806
81116230:	81116394 	ori	r4,r16,17806
81116234:	81116484 	addi	r4,r16,17810
81116238:	81116534 	orhi	r4,r16,17812
8111623c:	81116394 	ori	r4,r16,17806
81116240:	81116534 	orhi	r4,r16,17812
81116244:	81116394 	ori	r4,r16,17806
81116248:	81116394 	ori	r4,r16,17806
8111624c:	81116394 	ori	r4,r16,17806
81116250:	81116394 	ori	r4,r16,17806
81116254:	81116520 	cmpeqi	r4,r16,17812
81116258:	81116394 	ori	r4,r16,17806
8111625c:	81116394 	ori	r4,r16,17806
81116260:	811164f4 	orhi	r4,r16,17811
81116264:	81116394 	ori	r4,r16,17806
81116268:	81116394 	ori	r4,r16,17806
8111626c:	81116394 	ori	r4,r16,17806
81116270:	81116394 	ori	r4,r16,17806
81116274:	81116394 	ori	r4,r16,17806
81116278:	81116394 	ori	r4,r16,17806
8111627c:	81116394 	ori	r4,r16,17806
81116280:	81116394 	ori	r4,r16,17806
81116284:	811164cc 	andi	r4,r16,17811
81116288:	81116394 	ori	r4,r16,17806
8111628c:	81116394 	ori	r4,r16,17806
81116290:	81116668 	cmpgeui	r4,r16,17817
81116294:	81116394 	ori	r4,r16,17806
81116298:	81116394 	ori	r4,r16,17806
8111629c:	81116394 	ori	r4,r16,17806
811162a0:	81116394 	ori	r4,r16,17806
811162a4:	81116394 	ori	r4,r16,17806
811162a8:	81116394 	ori	r4,r16,17806
811162ac:	81116394 	ori	r4,r16,17806
811162b0:	811165ec 	andhi	r4,r16,17815
811162b4:	811165c4 	addi	r4,r16,17815
811162b8:	81116534 	orhi	r4,r16,17812
811162bc:	81116534 	orhi	r4,r16,17812
811162c0:	81116534 	orhi	r4,r16,17812
811162c4:	811165b0 	cmpltui	r4,r16,17814
811162c8:	811166f4 	orhi	r4,r16,17819
811162cc:	81116394 	ori	r4,r16,17806
811162d0:	81116394 	ori	r4,r16,17806
811162d4:	8111659c 	xori	r4,r16,17814
811162d8:	81116394 	ori	r4,r16,17806
811162dc:	8111656c 	andhi	r4,r16,17813
811162e0:	81116548 	cmpgei	r4,r16,17813
811162e4:	81116458 	cmpnei	r4,r16,17809
811162e8:	81116394 	ori	r4,r16,17806
811162ec:	81116394 	ori	r4,r16,17806
811162f0:	81116444 	addi	r4,r16,17809
811162f4:	81116394 	ori	r4,r16,17806
811162f8:	811163cc 	andi	r4,r16,17807
811162fc:	81116394 	ori	r4,r16,17806
81116300:	81116394 	ori	r4,r16,17806
81116304:	811164cc 	andi	r4,r16,17811
81116308:	d9809d15 	stw	r6,628(sp)
8111630c:	3029883a 	mov	r20,r6
81116310:	e0800117 	ldw	r2,4(fp)
81116314:	0081aa0e 	bge	zero,r2,811169c0 <__svfscanf_r+0x9e8>
81116318:	e0800017 	ldw	r2,0(fp)
8111631c:	a0ffffc3 	ldbu	r3,-1(r20)
81116320:	11000003 	ldbu	r4,0(r2)
81116324:	20ff6e1e 	bne	r4,r3,811160e0 <__reset+0xfb0f60e0>
81116328:	e0c00117 	ldw	r3,4(fp)
8111632c:	10800044 	addi	r2,r2,1
81116330:	e0800015 	stw	r2,0(fp)
81116334:	18bfffc4 	addi	r2,r3,-1
81116338:	e0800115 	stw	r2,4(fp)
8111633c:	94800044 	addi	r18,r18,1
81116340:	a00d883a 	mov	r6,r20
81116344:	003f6206 	br	811160d0 <__reset+0xfb0f60d0>
81116348:	00bfffc4 	movi	r2,-1
8111634c:	dfc0b417 	ldw	ra,720(sp)
81116350:	df00b317 	ldw	fp,716(sp)
81116354:	ddc0b217 	ldw	r23,712(sp)
81116358:	dd80b117 	ldw	r22,708(sp)
8111635c:	dd40b017 	ldw	r21,704(sp)
81116360:	dd00af17 	ldw	r20,700(sp)
81116364:	dcc0ae17 	ldw	r19,696(sp)
81116368:	dc80ad17 	ldw	r18,692(sp)
8111636c:	dc40ac17 	ldw	r17,688(sp)
81116370:	dc00ab17 	ldw	r16,684(sp)
81116374:	dec0b504 	addi	sp,sp,724
81116378:	f800283a 	ret
8111637c:	a0800043 	ldbu	r2,1(r20)
81116380:	3029883a 	mov	r20,r6
81116384:	8c400414 	ori	r17,r17,16
81116388:	10c03fcc 	andi	r3,r2,255
8111638c:	a1800044 	addi	r6,r20,1
81116390:	20ff5e2e 	bgeu	r4,r3,8111610c <__reset+0xfb0f610c>
81116394:	38c7883a 	add	r3,r7,r3
81116398:	18800043 	ldbu	r2,1(r3)
8111639c:	d9809d15 	stw	r6,628(sp)
811163a0:	00c00044 	movi	r3,1
811163a4:	108000cc 	andi	r2,r2,3
811163a8:	10c18f26 	beq	r2,r3,811169e8 <__svfscanf_r+0xa10>
811163ac:	e0800117 	ldw	r2,4(fp)
811163b0:	00808716 	blt	zero,r2,811165d0 <__svfscanf_r+0x5f8>
811163b4:	e00b883a 	mov	r5,fp
811163b8:	b009883a 	mov	r4,r22
811163bc:	11112fc0 	call	811112fc <__srefill_r>
811163c0:	1001431e 	bne	r2,zero,811168d0 <__svfscanf_r+0x8f8>
811163c4:	b9c00017 	ldw	r7,0(r23)
811163c8:	00008106 	br	811165d0 <__svfscanf_r+0x5f8>
811163cc:	e0800117 	ldw	r2,4(fp)
811163d0:	d9809d15 	stw	r6,628(sp)
811163d4:	0081a30e 	bge	zero,r2,81116a64 <__svfscanf_r+0xa8c>
811163d8:	00a044b4 	movhi	r2,33042
811163dc:	10b82204 	addi	r2,r2,-8056
811163e0:	02000284 	movi	r8,10
811163e4:	d880a115 	stw	r2,644(sp)
811163e8:	da009e15 	stw	r8,632(sp)
811163ec:	050000c4 	movi	r20,3
811163f0:	e0c00017 	ldw	r3,0(fp)
811163f4:	00000206 	br	81116400 <__svfscanf_r+0x428>
811163f8:	18c00044 	addi	r3,r3,1
811163fc:	e0c00015 	stw	r3,0(fp)
81116400:	19000003 	ldbu	r4,0(r3)
81116404:	20803fcc 	andi	r2,r4,255
81116408:	3885883a 	add	r2,r7,r2
8111640c:	10800043 	ldbu	r2,1(r2)
81116410:	1140020c 	andi	r5,r2,8
81116414:	2801ab26 	beq	r5,zero,81116ac4 <__svfscanf_r+0xaec>
81116418:	e0800117 	ldw	r2,4(fp)
8111641c:	94800044 	addi	r18,r18,1
81116420:	10bfffc4 	addi	r2,r2,-1
81116424:	e0800115 	stw	r2,4(fp)
81116428:	00bff316 	blt	zero,r2,811163f8 <__reset+0xfb0f63f8>
8111642c:	e00b883a 	mov	r5,fp
81116430:	b009883a 	mov	r4,r22
81116434:	11112fc0 	call	811112fc <__srefill_r>
81116438:	1001251e 	bne	r2,zero,811168d0 <__svfscanf_r+0x8f8>
8111643c:	b9c00017 	ldw	r7,0(r23)
81116440:	003feb06 	br	811163f0 <__reset+0xfb0f63f0>
81116444:	e0800117 	ldw	r2,4(fp)
81116448:	d9809d15 	stw	r6,628(sp)
8111644c:	00818b0e 	bge	zero,r2,81116a7c <__svfscanf_r+0xaa4>
81116450:	05000084 	movi	r20,2
81116454:	003fe606 	br	811163f0 <__reset+0xfb0f63f0>
81116458:	e0800117 	ldw	r2,4(fp)
8111645c:	d9809d15 	stw	r6,628(sp)
81116460:	8c408814 	ori	r17,r17,544
81116464:	00801d0e 	bge	zero,r2,811164dc <__svfscanf_r+0x504>
81116468:	00a044b4 	movhi	r2,33042
8111646c:	10b82204 	addi	r2,r2,-8056
81116470:	02000404 	movi	r8,16
81116474:	d880a115 	stw	r2,644(sp)
81116478:	da009e15 	stw	r8,632(sp)
8111647c:	050000c4 	movi	r20,3
81116480:	003fdb06 	br	811163f0 <__reset+0xfb0f63f0>
81116484:	e0800117 	ldw	r2,4(fp)
81116488:	d9809d15 	stw	r6,628(sp)
8111648c:	8c400054 	ori	r17,r17,1
81116490:	00bfc80e 	bge	zero,r2,811163b4 <__reset+0xfb0f63b4>
81116494:	00e04474 	movhi	r3,33041
81116498:	18c62f04 	addi	r3,r3,6332
8111649c:	02000284 	movi	r8,10
811164a0:	d8c0a115 	stw	r3,644(sp)
811164a4:	da009e15 	stw	r8,632(sp)
811164a8:	050000c4 	movi	r20,3
811164ac:	003fd006 	br	811163f0 <__reset+0xfb0f63f0>
811164b0:	9cc002a4 	muli	r19,r19,10
811164b4:	a0800043 	ldbu	r2,1(r20)
811164b8:	3029883a 	mov	r20,r6
811164bc:	98e7883a 	add	r19,r19,r3
811164c0:	9cfff404 	addi	r19,r19,-48
811164c4:	10c03fcc 	andi	r3,r2,255
811164c8:	003f0e06 	br	81116104 <__reset+0xfb0f6104>
811164cc:	e0800117 	ldw	r2,4(fp)
811164d0:	d9809d15 	stw	r6,628(sp)
811164d4:	8c408014 	ori	r17,r17,512
811164d8:	00bfe316 	blt	zero,r2,81116468 <__reset+0xfb0f6468>
811164dc:	e00b883a 	mov	r5,fp
811164e0:	b009883a 	mov	r4,r22
811164e4:	11112fc0 	call	811112fc <__srefill_r>
811164e8:	1000f91e 	bne	r2,zero,811168d0 <__svfscanf_r+0x8f8>
811164ec:	b9c00017 	ldw	r7,0(r23)
811164f0:	003fdd06 	br	81116468 <__reset+0xfb0f6468>
811164f4:	e0800117 	ldw	r2,4(fp)
811164f8:	d9809d15 	stw	r6,628(sp)
811164fc:	8c400054 	ori	r17,r17,1
81116500:	0080140e 	bge	zero,r2,81116554 <__svfscanf_r+0x57c>
81116504:	00a044b4 	movhi	r2,33042
81116508:	10b82204 	addi	r2,r2,-8056
8111650c:	02000204 	movi	r8,8
81116510:	d880a115 	stw	r2,644(sp)
81116514:	da009e15 	stw	r8,632(sp)
81116518:	050000c4 	movi	r20,3
8111651c:	003fb406 	br	811163f0 <__reset+0xfb0f63f0>
81116520:	a0800043 	ldbu	r2,1(r20)
81116524:	8c400094 	ori	r17,r17,2
81116528:	3029883a 	mov	r20,r6
8111652c:	10c03fcc 	andi	r3,r2,255
81116530:	003ef406 	br	81116104 <__reset+0xfb0f6104>
81116534:	e0800117 	ldw	r2,4(fp)
81116538:	d9809d15 	stw	r6,628(sp)
8111653c:	0081420e 	bge	zero,r2,81116a48 <__svfscanf_r+0xa70>
81116540:	05000104 	movi	r20,4
81116544:	003faa06 	br	811163f0 <__reset+0xfb0f63f0>
81116548:	e0800117 	ldw	r2,4(fp)
8111654c:	d9809d15 	stw	r6,628(sp)
81116550:	00bfec16 	blt	zero,r2,81116504 <__reset+0xfb0f6504>
81116554:	e00b883a 	mov	r5,fp
81116558:	b009883a 	mov	r4,r22
8111655c:	11112fc0 	call	811112fc <__srefill_r>
81116560:	1000db1e 	bne	r2,zero,811168d0 <__svfscanf_r+0x8f8>
81116564:	b9c00017 	ldw	r7,0(r23)
81116568:	003fe606 	br	81116504 <__reset+0xfb0f6504>
8111656c:	d9809d15 	stw	r6,628(sp)
81116570:	8880040c 	andi	r2,r17,16
81116574:	10009c1e 	bne	r2,zero,811167e8 <__svfscanf_r+0x810>
81116578:	8880010c 	andi	r2,r17,4
8111657c:	10011e26 	beq	r2,zero,811169f8 <__svfscanf_r+0xa20>
81116580:	da009c17 	ldw	r8,624(sp)
81116584:	3029883a 	mov	r20,r6
81116588:	40800017 	ldw	r2,0(r8)
8111658c:	42000104 	addi	r8,r8,4
81116590:	da009c15 	stw	r8,624(sp)
81116594:	1480000d 	sth	r18,0(r2)
81116598:	003ecc06 	br	811160cc <__reset+0xfb0f60cc>
8111659c:	a0c00043 	ldbu	r3,1(r20)
811165a0:	19410c26 	beq	r3,r5,811169d4 <__svfscanf_r+0x9fc>
811165a4:	8c400054 	ori	r17,r17,1
811165a8:	3029883a 	mov	r20,r6
811165ac:	003ed506 	br	81116104 <__reset+0xfb0f6104>
811165b0:	a0800043 	ldbu	r2,1(r20)
811165b4:	8c400114 	ori	r17,r17,4
811165b8:	3029883a 	mov	r20,r6
811165bc:	10c03fcc 	andi	r3,r2,255
811165c0:	003ed006 	br	81116104 <__reset+0xfb0f6104>
811165c4:	e0800117 	ldw	r2,4(fp)
811165c8:	d9809d15 	stw	r6,628(sp)
811165cc:	00bf790e 	bge	zero,r2,811163b4 <__reset+0xfb0f63b4>
811165d0:	00a04474 	movhi	r2,33041
811165d4:	10862f04 	addi	r2,r2,6332
811165d8:	02000284 	movi	r8,10
811165dc:	d880a115 	stw	r2,644(sp)
811165e0:	da009e15 	stw	r8,632(sp)
811165e4:	050000c4 	movi	r20,3
811165e8:	003f8106 	br	811163f0 <__reset+0xfb0f63f0>
811165ec:	e0800117 	ldw	r2,4(fp)
811165f0:	d9809d15 	stw	r6,628(sp)
811165f4:	0080c40e 	bge	zero,r2,81116908 <__svfscanf_r+0x930>
811165f8:	9800011e 	bne	r19,zero,81116600 <__svfscanf_r+0x628>
811165fc:	04c00044 	movi	r19,1
81116600:	8880004c 	andi	r2,r17,1
81116604:	1000441e 	bne	r2,zero,81116718 <__svfscanf_r+0x740>
81116608:	8c40040c 	andi	r17,r17,16
8111660c:	8800da26 	beq	r17,zero,81116978 <__svfscanf_r+0x9a0>
81116610:	0021883a 	mov	r16,zero
81116614:	00000806 	br	81116638 <__svfscanf_r+0x660>
81116618:	1887883a 	add	r3,r3,r2
8111661c:	e00b883a 	mov	r5,fp
81116620:	b009883a 	mov	r4,r22
81116624:	e0c00015 	stw	r3,0(fp)
81116628:	80a1883a 	add	r16,r16,r2
8111662c:	98a7c83a 	sub	r19,r19,r2
81116630:	11112fc0 	call	811112fc <__srefill_r>
81116634:	1000ca1e 	bne	r2,zero,81116960 <__svfscanf_r+0x988>
81116638:	e0800117 	ldw	r2,4(fp)
8111663c:	e0c00017 	ldw	r3,0(fp)
81116640:	14fff516 	blt	r2,r19,81116618 <__reset+0xfb0f6618>
81116644:	14c5c83a 	sub	r2,r2,r19
81116648:	1cd5883a 	add	r10,r3,r19
8111664c:	84e1883a 	add	r16,r16,r19
81116650:	e0800115 	stw	r2,4(fp)
81116654:	e2800015 	stw	r10,0(fp)
81116658:	dd009d17 	ldw	r20,628(sp)
8111665c:	9425883a 	add	r18,r18,r16
81116660:	a00d883a 	mov	r6,r20
81116664:	003e9a06 	br	811160d0 <__reset+0xfb0f60d0>
81116668:	300b883a 	mov	r5,r6
8111666c:	d9005884 	addi	r4,sp,354
81116670:	d9809d15 	stw	r6,628(sp)
81116674:	111c4600 	call	8111c460 <__sccl>
81116678:	1029883a 	mov	r20,r2
8111667c:	e0800117 	ldw	r2,4(fp)
81116680:	0081050e 	bge	zero,r2,81116a98 <__svfscanf_r+0xac0>
81116684:	e1000017 	ldw	r4,0(fp)
81116688:	20800003 	ldbu	r2,0(r4)
8111668c:	98005926 	beq	r19,zero,811167f4 <__svfscanf_r+0x81c>
81116690:	8c40040c 	andi	r17,r17,16
81116694:	88005a26 	beq	r17,zero,81116800 <__svfscanf_r+0x828>
81116698:	9823883a 	mov	r17,r19
8111669c:	0021883a 	mov	r16,zero
811166a0:	00000106 	br	811166a8 <__svfscanf_r+0x6d0>
811166a4:	20800003 	ldbu	r2,0(r4)
811166a8:	10803fcc 	andi	r2,r2,255
811166ac:	d8c05884 	addi	r3,sp,354
811166b0:	1885883a 	add	r2,r3,r2
811166b4:	10800007 	ldb	r2,0(r2)
811166b8:	1000ad26 	beq	r2,zero,81116970 <__svfscanf_r+0x998>
811166bc:	e0800117 	ldw	r2,4(fp)
811166c0:	21000044 	addi	r4,r4,1
811166c4:	84000044 	addi	r16,r16,1
811166c8:	10bfffc4 	addi	r2,r2,-1
811166cc:	e0800115 	stw	r2,4(fp)
811166d0:	e1000015 	stw	r4,0(fp)
811166d4:	84c0a026 	beq	r16,r19,81116958 <__svfscanf_r+0x980>
811166d8:	00bff216 	blt	zero,r2,811166a4 <__reset+0xfb0f66a4>
811166dc:	e00b883a 	mov	r5,fp
811166e0:	b009883a 	mov	r4,r22
811166e4:	11112fc0 	call	811112fc <__srefill_r>
811166e8:	10009a1e 	bne	r2,zero,81116954 <__svfscanf_r+0x97c>
811166ec:	e1000017 	ldw	r4,0(fp)
811166f0:	003fec06 	br	811166a4 <__reset+0xfb0f66a4>
811166f4:	e0800117 	ldw	r2,4(fp)
811166f8:	d9809d15 	stw	r6,628(sp)
811166fc:	0080eb0e 	bge	zero,r2,81116aac <__svfscanf_r+0xad4>
81116700:	00a04474 	movhi	r2,33041
81116704:	10862f04 	addi	r2,r2,6332
81116708:	d880a115 	stw	r2,644(sp)
8111670c:	d8009e15 	stw	zero,632(sp)
81116710:	050000c4 	movi	r20,3
81116714:	003f3606 	br	811163f0 <__reset+0xfb0f63f0>
81116718:	dd409904 	addi	r21,sp,612
8111671c:	8c40040c 	andi	r17,r17,16
81116720:	01800204 	movi	r6,8
81116724:	000b883a 	mov	r5,zero
81116728:	a809883a 	mov	r4,r21
8111672c:	dc409f15 	stw	r17,636(sp)
81116730:	1110ff80 	call	81110ff8 <memset>
81116734:	dc409f17 	ldw	r17,636(sp)
81116738:	88006e26 	beq	r17,zero,811168f4 <__svfscanf_r+0x91c>
8111673c:	0029883a 	mov	r20,zero
81116740:	0023883a 	mov	r17,zero
81116744:	111a87c0 	call	8111a87c <__locale_mb_cur_max>
81116748:	14406126 	beq	r2,r17,811168d0 <__svfscanf_r+0x8f8>
8111674c:	e0800017 	ldw	r2,0(fp)
81116750:	e0c00117 	ldw	r3,4(fp)
81116754:	d9000104 	addi	r4,sp,4
81116758:	12000003 	ldbu	r8,0(r2)
8111675c:	18ffffc4 	addi	r3,r3,-1
81116760:	10800044 	addi	r2,r2,1
81116764:	e0c00115 	stw	r3,4(fp)
81116768:	e0800015 	stw	r2,0(fp)
8111676c:	8c000044 	addi	r16,r17,1
81116770:	dd400015 	stw	r21,0(sp)
81116774:	2463883a 	add	r17,r4,r17
81116778:	200d883a 	mov	r6,r4
8111677c:	a00b883a 	mov	r5,r20
81116780:	800f883a 	mov	r7,r16
81116784:	b009883a 	mov	r4,r22
81116788:	8a000005 	stb	r8,0(r17)
8111678c:	111a9380 	call	8111a938 <_mbrtowc_r>
81116790:	017fffc4 	movi	r5,-1
81116794:	11404e26 	beq	r2,r5,811168d0 <__svfscanf_r+0x8f8>
81116798:	1000601e 	bne	r2,zero,8111691c <__svfscanf_r+0x944>
8111679c:	da009f17 	ldw	r8,636(sp)
811167a0:	4000641e 	bne	r8,zero,81116934 <__svfscanf_r+0x95c>
811167a4:	a0000015 	stw	zero,0(r20)
811167a8:	9425883a 	add	r18,r18,r16
811167ac:	9967883a 	add	r19,r19,r5
811167b0:	a5000104 	addi	r20,r20,4
811167b4:	e0800117 	ldw	r2,4(fp)
811167b8:	0023883a 	mov	r17,zero
811167bc:	00804b16 	blt	zero,r2,811168ec <__svfscanf_r+0x914>
811167c0:	e00b883a 	mov	r5,fp
811167c4:	b009883a 	mov	r4,r22
811167c8:	11112fc0 	call	811112fc <__srefill_r>
811167cc:	10004726 	beq	r2,zero,811168ec <__svfscanf_r+0x914>
811167d0:	88003f1e 	bne	r17,zero,811168d0 <__svfscanf_r+0x8f8>
811167d4:	d8c09f17 	ldw	r3,636(sp)
811167d8:	1800031e 	bne	r3,zero,811167e8 <__svfscanf_r+0x810>
811167dc:	da00a017 	ldw	r8,640(sp)
811167e0:	42000044 	addi	r8,r8,1
811167e4:	da00a015 	stw	r8,640(sp)
811167e8:	dd009d17 	ldw	r20,628(sp)
811167ec:	a00d883a 	mov	r6,r20
811167f0:	003e3706 	br	811160d0 <__reset+0xfb0f60d0>
811167f4:	8c40040c 	andi	r17,r17,16
811167f8:	04ffffc4 	movi	r19,-1
811167fc:	883fa61e 	bne	r17,zero,81116698 <__reset+0xfb0f6698>
81116800:	da009c17 	ldw	r8,624(sp)
81116804:	9abfffc4 	addi	r10,r19,-1
81116808:	44000017 	ldw	r16,0(r8)
8111680c:	44400104 	addi	r17,r8,4
81116810:	8007883a 	mov	r3,r16
81116814:	82ab883a 	add	r21,r16,r10
81116818:	00000306 	br	81116828 <__svfscanf_r+0x850>
8111681c:	e1000017 	ldw	r4,0(fp)
81116820:	9807883a 	mov	r3,r19
81116824:	20800003 	ldbu	r2,0(r4)
81116828:	10803fcc 	andi	r2,r2,255
8111682c:	d9405884 	addi	r5,sp,354
81116830:	2885883a 	add	r2,r5,r2
81116834:	10800007 	ldb	r2,0(r2)
81116838:	10004b26 	beq	r2,zero,81116968 <__svfscanf_r+0x990>
8111683c:	e0800117 	ldw	r2,4(fp)
81116840:	21400044 	addi	r5,r4,1
81116844:	e1400015 	stw	r5,0(fp)
81116848:	10bfffc4 	addi	r2,r2,-1
8111684c:	e0800115 	stw	r2,4(fp)
81116850:	20800003 	ldbu	r2,0(r4)
81116854:	1cc00044 	addi	r19,r3,1
81116858:	18800005 	stb	r2,0(r3)
8111685c:	1d400726 	beq	r3,r21,8111687c <__svfscanf_r+0x8a4>
81116860:	e0800117 	ldw	r2,4(fp)
81116864:	00bfed16 	blt	zero,r2,8111681c <__reset+0xfb0f681c>
81116868:	e00b883a 	mov	r5,fp
8111686c:	b009883a 	mov	r4,r22
81116870:	11112fc0 	call	811112fc <__srefill_r>
81116874:	103fe926 	beq	r2,zero,8111681c <__reset+0xfb0f681c>
81116878:	84c01526 	beq	r16,r19,811168d0 <__svfscanf_r+0x8f8>
8111687c:	9c21c83a 	sub	r16,r19,r16
81116880:	803e1726 	beq	r16,zero,811160e0 <__reset+0xfb0f60e0>
81116884:	da00a017 	ldw	r8,640(sp)
81116888:	98000005 	stb	zero,0(r19)
8111688c:	dc409c15 	stw	r17,624(sp)
81116890:	42000044 	addi	r8,r8,1
81116894:	da00a015 	stw	r8,640(sp)
81116898:	9425883a 	add	r18,r18,r16
8111689c:	a00d883a 	mov	r6,r20
811168a0:	003e0b06 	br	811160d0 <__reset+0xfb0f60d0>
811168a4:	017fff84 	movi	r5,-2
811168a8:	11439b1e 	bne	r2,r5,81117718 <__svfscanf_r+0x1740>
811168ac:	8821883a 	mov	r16,r17
811168b0:	e0800117 	ldw	r2,4(fp)
811168b4:	0082e516 	blt	zero,r2,8111744c <__svfscanf_r+0x1474>
811168b8:	e00b883a 	mov	r5,fp
811168bc:	b009883a 	mov	r4,r22
811168c0:	11112fc0 	call	811112fc <__srefill_r>
811168c4:	1002e126 	beq	r2,zero,8111744c <__svfscanf_r+0x1474>
811168c8:	dc409f17 	ldw	r17,636(sp)
811168cc:	8002e826 	beq	r16,zero,81117470 <__svfscanf_r+0x1498>
811168d0:	da00a017 	ldw	r8,640(sp)
811168d4:	403e9c26 	beq	r8,zero,81116348 <__reset+0xfb0f6348>
811168d8:	e080030b 	ldhu	r2,12(fp)
811168dc:	1080100c 	andi	r2,r2,64
811168e0:	103e991e 	bne	r2,zero,81116348 <__reset+0xfb0f6348>
811168e4:	4005883a 	mov	r2,r8
811168e8:	003e9806 	br	8111634c <__reset+0xfb0f634c>
811168ec:	983f951e 	bne	r19,zero,81116744 <__reset+0xfb0f6744>
811168f0:	003fb806 	br	811167d4 <__reset+0xfb0f67d4>
811168f4:	da009c17 	ldw	r8,624(sp)
811168f8:	45000017 	ldw	r20,0(r8)
811168fc:	42000104 	addi	r8,r8,4
81116900:	da009c15 	stw	r8,624(sp)
81116904:	003f8e06 	br	81116740 <__reset+0xfb0f6740>
81116908:	e00b883a 	mov	r5,fp
8111690c:	b009883a 	mov	r4,r22
81116910:	11112fc0 	call	811112fc <__srefill_r>
81116914:	103f3826 	beq	r2,zero,811165f8 <__reset+0xfb0f65f8>
81116918:	003fed06 	br	811168d0 <__reset+0xfb0f68d0>
8111691c:	00ffff84 	movi	r3,-2
81116920:	10c0071e 	bne	r2,r3,81116940 <__svfscanf_r+0x968>
81116924:	e0800117 	ldw	r2,4(fp)
81116928:	8023883a 	mov	r17,r16
8111692c:	00bf8516 	blt	zero,r2,81116744 <__reset+0xfb0f6744>
81116930:	003fa306 	br	811167c0 <__reset+0xfb0f67c0>
81116934:	9425883a 	add	r18,r18,r16
81116938:	9cffffc4 	addi	r19,r19,-1
8111693c:	003f9d06 	br	811167b4 <__reset+0xfb0f67b4>
81116940:	da009f17 	ldw	r8,636(sp)
81116944:	9425883a 	add	r18,r18,r16
81116948:	9cffffc4 	addi	r19,r19,-1
8111694c:	403f9826 	beq	r8,zero,811167b0 <__reset+0xfb0f67b0>
81116950:	003f9806 	br	811167b4 <__reset+0xfb0f67b4>
81116954:	8023883a 	mov	r17,r16
81116958:	8821883a 	mov	r16,r17
8111695c:	003fce06 	br	81116898 <__reset+0xfb0f6898>
81116960:	803f3d1e 	bne	r16,zero,81116658 <__reset+0xfb0f6658>
81116964:	003fda06 	br	811168d0 <__reset+0xfb0f68d0>
81116968:	1827883a 	mov	r19,r3
8111696c:	003fc306 	br	8111687c <__reset+0xfb0f687c>
81116970:	803fc91e 	bne	r16,zero,81116898 <__reset+0xfb0f6898>
81116974:	003dda06 	br	811160e0 <__reset+0xfb0f60e0>
81116978:	da009c17 	ldw	r8,624(sp)
8111697c:	df000015 	stw	fp,0(sp)
81116980:	980f883a 	mov	r7,r19
81116984:	41400017 	ldw	r5,0(r8)
81116988:	01800044 	movi	r6,1
8111698c:	b009883a 	mov	r4,r22
81116990:	1119a500 	call	81119a50 <_fread_r>
81116994:	da009c17 	ldw	r8,624(sp)
81116998:	40c00104 	addi	r3,r8,4
8111699c:	103fcc26 	beq	r2,zero,811168d0 <__reset+0xfb0f68d0>
811169a0:	da00a017 	ldw	r8,640(sp)
811169a4:	dd009d17 	ldw	r20,628(sp)
811169a8:	90a5883a 	add	r18,r18,r2
811169ac:	42000044 	addi	r8,r8,1
811169b0:	da00a015 	stw	r8,640(sp)
811169b4:	d8c09c15 	stw	r3,624(sp)
811169b8:	a00d883a 	mov	r6,r20
811169bc:	003dc406 	br	811160d0 <__reset+0xfb0f60d0>
811169c0:	e00b883a 	mov	r5,fp
811169c4:	b009883a 	mov	r4,r22
811169c8:	11112fc0 	call	811112fc <__srefill_r>
811169cc:	103e5226 	beq	r2,zero,81116318 <__reset+0xfb0f6318>
811169d0:	003fbf06 	br	811168d0 <__reset+0xfb0f68d0>
811169d4:	a0800083 	ldbu	r2,2(r20)
811169d8:	8c400094 	ori	r17,r17,2
811169dc:	a5000084 	addi	r20,r20,2
811169e0:	10c03fcc 	andi	r3,r2,255
811169e4:	003dc706 	br	81116104 <__reset+0xfb0f6104>
811169e8:	e0800117 	ldw	r2,4(fp)
811169ec:	88e2b03a 	or	r17,r17,r3
811169f0:	00bef716 	blt	zero,r2,811165d0 <__reset+0xfb0f65d0>
811169f4:	003e6f06 	br	811163b4 <__reset+0xfb0f63b4>
811169f8:	8880004c 	andi	r2,r17,1
811169fc:	10000b1e 	bne	r2,zero,81116a2c <__svfscanf_r+0xa54>
81116a00:	8c40008c 	andi	r17,r17,2
81116a04:	88000926 	beq	r17,zero,81116a2c <__svfscanf_r+0xa54>
81116a08:	da009c17 	ldw	r8,624(sp)
81116a0c:	9007d7fa 	srai	r3,r18,31
81116a10:	dd009d17 	ldw	r20,628(sp)
81116a14:	40800017 	ldw	r2,0(r8)
81116a18:	42000104 	addi	r8,r8,4
81116a1c:	da009c15 	stw	r8,624(sp)
81116a20:	14800015 	stw	r18,0(r2)
81116a24:	10c00115 	stw	r3,4(r2)
81116a28:	003da806 	br	811160cc <__reset+0xfb0f60cc>
81116a2c:	da009c17 	ldw	r8,624(sp)
81116a30:	dd009d17 	ldw	r20,628(sp)
81116a34:	40800017 	ldw	r2,0(r8)
81116a38:	42000104 	addi	r8,r8,4
81116a3c:	da009c15 	stw	r8,624(sp)
81116a40:	14800015 	stw	r18,0(r2)
81116a44:	003da106 	br	811160cc <__reset+0xfb0f60cc>
81116a48:	e00b883a 	mov	r5,fp
81116a4c:	b009883a 	mov	r4,r22
81116a50:	11112fc0 	call	811112fc <__srefill_r>
81116a54:	103f9e1e 	bne	r2,zero,811168d0 <__reset+0xfb0f68d0>
81116a58:	b9c00017 	ldw	r7,0(r23)
81116a5c:	05000104 	movi	r20,4
81116a60:	003e6306 	br	811163f0 <__reset+0xfb0f63f0>
81116a64:	e00b883a 	mov	r5,fp
81116a68:	b009883a 	mov	r4,r22
81116a6c:	11112fc0 	call	811112fc <__srefill_r>
81116a70:	103f971e 	bne	r2,zero,811168d0 <__reset+0xfb0f68d0>
81116a74:	b9c00017 	ldw	r7,0(r23)
81116a78:	003e5706 	br	811163d8 <__reset+0xfb0f63d8>
81116a7c:	e00b883a 	mov	r5,fp
81116a80:	b009883a 	mov	r4,r22
81116a84:	11112fc0 	call	811112fc <__srefill_r>
81116a88:	103f911e 	bne	r2,zero,811168d0 <__reset+0xfb0f68d0>
81116a8c:	b9c00017 	ldw	r7,0(r23)
81116a90:	05000084 	movi	r20,2
81116a94:	003e5606 	br	811163f0 <__reset+0xfb0f63f0>
81116a98:	e00b883a 	mov	r5,fp
81116a9c:	b009883a 	mov	r4,r22
81116aa0:	11112fc0 	call	811112fc <__srefill_r>
81116aa4:	103ef726 	beq	r2,zero,81116684 <__reset+0xfb0f6684>
81116aa8:	003f8906 	br	811168d0 <__reset+0xfb0f68d0>
81116aac:	e00b883a 	mov	r5,fp
81116ab0:	b009883a 	mov	r4,r22
81116ab4:	11112fc0 	call	811112fc <__srefill_r>
81116ab8:	103f851e 	bne	r2,zero,811168d0 <__reset+0xfb0f68d0>
81116abc:	b9c00017 	ldw	r7,0(r23)
81116ac0:	003f0f06 	br	81116700 <__reset+0xfb0f6700>
81116ac4:	014000c4 	movi	r5,3
81116ac8:	a1414a26 	beq	r20,r5,81116ff4 <__svfscanf_r+0x101c>
81116acc:	01000104 	movi	r4,4
81116ad0:	a101f11e 	bne	r20,r4,81117298 <__svfscanf_r+0x12c0>
81116ad4:	b009883a 	mov	r4,r22
81116ad8:	111a8a00 	call	8111a8a0 <_localeconv_r>
81116adc:	10800017 	ldw	r2,0(r2)
81116ae0:	98ffffc4 	addi	r3,r19,-1
81116ae4:	d880a315 	stw	r2,652(sp)
81116ae8:	00805704 	movi	r2,348
81116aec:	10c21e2e 	bgeu	r2,r3,81117368 <__svfscanf_r+0x1390>
81116af0:	9cffa8c4 	addi	r19,r19,-349
81116af4:	dcc0a215 	stw	r19,648(sp)
81116af8:	04c05744 	movi	r19,349
81116afc:	8d01e014 	ori	r20,r17,1920
81116b00:	0023883a 	mov	r17,zero
81116b04:	dc000104 	addi	r16,sp,4
81116b08:	8805883a 	mov	r2,r17
81116b0c:	0019883a 	mov	r12,zero
81116b10:	8023883a 	mov	r17,r16
81116b14:	b007883a 	mov	r3,r22
81116b18:	9821883a 	mov	r16,r19
81116b1c:	002b883a 	mov	r21,zero
81116b20:	d800a515 	stw	zero,660(sp)
81116b24:	d800a415 	stw	zero,656(sp)
81116b28:	d8009f15 	stw	zero,636(sp)
81116b2c:	01c01384 	movi	r7,78
81116b30:	602d883a 	mov	r22,r12
81116b34:	1027883a 	mov	r19,r2
81116b38:	e1000017 	ldw	r4,0(fp)
81116b3c:	21400003 	ldbu	r5,0(r4)
81116b40:	28bff544 	addi	r2,r5,-43
81116b44:	10803fcc 	andi	r2,r2,255
81116b48:	38810e36 	bltu	r7,r2,81116f84 <__svfscanf_r+0xfac>
81116b4c:	100490ba 	slli	r2,r2,2
81116b50:	01a04474 	movhi	r6,33041
81116b54:	319ad904 	addi	r6,r6,27492
81116b58:	1185883a 	add	r2,r2,r6
81116b5c:	10800017 	ldw	r2,0(r2)
81116b60:	1000683a 	jmp	r2
81116b64:	81116e5c 	xori	r4,r16,17849
81116b68:	81116f84 	addi	r4,r16,17854
81116b6c:	81116e5c 	xori	r4,r16,17849
81116b70:	81116f84 	addi	r4,r16,17854
81116b74:	81116f84 	addi	r4,r16,17854
81116b78:	81116e30 	cmpltui	r4,r16,17848
81116b7c:	81116ca0 	cmpeqi	r4,r16,17842
81116b80:	81116ca0 	cmpeqi	r4,r16,17842
81116b84:	81116ca0 	cmpeqi	r4,r16,17842
81116b88:	81116ca0 	cmpeqi	r4,r16,17842
81116b8c:	81116ca0 	cmpeqi	r4,r16,17842
81116b90:	81116ca0 	cmpeqi	r4,r16,17842
81116b94:	81116ca0 	cmpeqi	r4,r16,17842
81116b98:	81116ca0 	cmpeqi	r4,r16,17842
81116b9c:	81116ca0 	cmpeqi	r4,r16,17842
81116ba0:	81116f84 	addi	r4,r16,17854
81116ba4:	81116f84 	addi	r4,r16,17854
81116ba8:	81116f84 	addi	r4,r16,17854
81116bac:	81116f84 	addi	r4,r16,17854
81116bb0:	81116f84 	addi	r4,r16,17854
81116bb4:	81116f84 	addi	r4,r16,17854
81116bb8:	81116f84 	addi	r4,r16,17854
81116bbc:	81116f74 	orhi	r4,r16,17853
81116bc0:	81116f84 	addi	r4,r16,17854
81116bc4:	81116f84 	addi	r4,r16,17854
81116bc8:	81116f84 	addi	r4,r16,17854
81116bcc:	81116f30 	cmpltui	r4,r16,17852
81116bd0:	81116f14 	ori	r4,r16,17852
81116bd4:	81116f84 	addi	r4,r16,17854
81116bd8:	81116f84 	addi	r4,r16,17854
81116bdc:	81116ee0 	cmpeqi	r4,r16,17851
81116be0:	81116f84 	addi	r4,r16,17854
81116be4:	81116f84 	addi	r4,r16,17854
81116be8:	81116f84 	addi	r4,r16,17854
81116bec:	81116f84 	addi	r4,r16,17854
81116bf0:	81116ea8 	cmpgeui	r4,r16,17850
81116bf4:	81116f84 	addi	r4,r16,17854
81116bf8:	81116f84 	addi	r4,r16,17854
81116bfc:	81116f84 	addi	r4,r16,17854
81116c00:	81116f84 	addi	r4,r16,17854
81116c04:	81116f84 	addi	r4,r16,17854
81116c08:	81116e8c 	andi	r4,r16,17850
81116c0c:	81116f84 	addi	r4,r16,17854
81116c10:	81116f84 	addi	r4,r16,17854
81116c14:	81116f84 	addi	r4,r16,17854
81116c18:	81116f84 	addi	r4,r16,17854
81116c1c:	81116e70 	cmpltui	r4,r16,17849
81116c20:	81116f84 	addi	r4,r16,17854
81116c24:	81116f84 	addi	r4,r16,17854
81116c28:	81116f84 	addi	r4,r16,17854
81116c2c:	81116f84 	addi	r4,r16,17854
81116c30:	81116f84 	addi	r4,r16,17854
81116c34:	81116f84 	addi	r4,r16,17854
81116c38:	81116f84 	addi	r4,r16,17854
81116c3c:	81116f74 	orhi	r4,r16,17853
81116c40:	81116f84 	addi	r4,r16,17854
81116c44:	81116f84 	addi	r4,r16,17854
81116c48:	81116f84 	addi	r4,r16,17854
81116c4c:	81116f30 	cmpltui	r4,r16,17852
81116c50:	81116f14 	ori	r4,r16,17852
81116c54:	81116f84 	addi	r4,r16,17854
81116c58:	81116f84 	addi	r4,r16,17854
81116c5c:	81116ee0 	cmpeqi	r4,r16,17851
81116c60:	81116f84 	addi	r4,r16,17854
81116c64:	81116f84 	addi	r4,r16,17854
81116c68:	81116f84 	addi	r4,r16,17854
81116c6c:	81116f84 	addi	r4,r16,17854
81116c70:	81116ea8 	cmpgeui	r4,r16,17850
81116c74:	81116f84 	addi	r4,r16,17854
81116c78:	81116f84 	addi	r4,r16,17854
81116c7c:	81116f84 	addi	r4,r16,17854
81116c80:	81116f84 	addi	r4,r16,17854
81116c84:	81116f84 	addi	r4,r16,17854
81116c88:	81116e8c 	andi	r4,r16,17850
81116c8c:	81116f84 	addi	r4,r16,17854
81116c90:	81116f84 	addi	r4,r16,17854
81116c94:	81116f84 	addi	r4,r16,17854
81116c98:	81116f84 	addi	r4,r16,17854
81116c9c:	81116e70 	cmpltui	r4,r16,17849
81116ca0:	a8803fcc 	andi	r2,r21,255
81116ca4:	1080201c 	xori	r2,r2,128
81116ca8:	10bfe004 	addi	r2,r2,-128
81116cac:	b085883a 	add	r2,r22,r2
81116cb0:	10000d1e 	bne	r2,zero,81116ce8 <__svfscanf_r+0xd10>
81116cb4:	00bf9fc4 	movi	r2,-385
81116cb8:	a0a8703a 	and	r20,r20,r2
81116cbc:	89400005 	stb	r5,0(r17)
81116cc0:	8c400044 	addi	r17,r17,1
81116cc4:	e0800117 	ldw	r2,4(fp)
81116cc8:	843fffc4 	addi	r16,r16,-1
81116ccc:	94800044 	addi	r18,r18,1
81116cd0:	10bfffc4 	addi	r2,r2,-1
81116cd4:	e0800115 	stw	r2,4(fp)
81116cd8:	0080b40e 	bge	zero,r2,81116fac <__svfscanf_r+0xfd4>
81116cdc:	21000044 	addi	r4,r4,1
81116ce0:	e1000015 	stw	r4,0(fp)
81116ce4:	803f941e 	bne	r16,zero,81116b38 <__reset+0xfb0f6b38>
81116ce8:	8821883a 	mov	r16,r17
81116cec:	b019883a 	mov	r12,r22
81116cf0:	9823883a 	mov	r17,r19
81116cf4:	182d883a 	mov	r22,r3
81116cf8:	9801961e 	bne	r19,zero,81117354 <__svfscanf_r+0x137c>
81116cfc:	633fffc4 	addi	r12,r12,-1
81116d00:	00800044 	movi	r2,1
81116d04:	1302882e 	bgeu	r2,r12,81117728 <__svfscanf_r+0x1750>
81116d08:	a8803fcc 	andi	r2,r21,255
81116d0c:	1080201c 	xori	r2,r2,128
81116d10:	10bfe004 	addi	r2,r2,-128
81116d14:	113fffc4 	addi	r4,r2,-1
81116d18:	01400184 	movi	r5,6
81116d1c:	29001136 	bltu	r5,r4,81116d64 <__svfscanf_r+0xd8c>
81116d20:	01000084 	movi	r4,2
81116d24:	2082900e 	bge	r4,r2,81117768 <__svfscanf_r+0x1790>
81116d28:	00c000c4 	movi	r3,3
81116d2c:	10c00d26 	beq	r2,r3,81116d64 <__svfscanf_r+0xd8c>
81116d30:	9425c83a 	sub	r18,r18,r16
81116d34:	1827883a 	mov	r19,r3
81116d38:	843fffc4 	addi	r16,r16,-1
81116d3c:	81400007 	ldb	r5,0(r16)
81116d40:	e00d883a 	mov	r6,fp
81116d44:	b009883a 	mov	r4,r22
81116d48:	111fad00 	call	8111fad0 <_ungetc_r>
81116d4c:	a8bfffc4 	addi	r2,r21,-1
81116d50:	10c03fcc 	andi	r3,r2,255
81116d54:	8493883a 	add	r9,r16,r18
81116d58:	102b883a 	mov	r21,r2
81116d5c:	98fff636 	bltu	r19,r3,81116d38 <__reset+0xfb0f6d38>
81116d60:	4825883a 	mov	r18,r9
81116d64:	a080400c 	andi	r2,r20,256
81116d68:	10001426 	beq	r2,zero,81116dbc <__svfscanf_r+0xde4>
81116d6c:	a081000c 	andi	r2,r20,1024
81116d70:	1002571e 	bne	r2,zero,811176d0 <__svfscanf_r+0x16f8>
81116d74:	817fffc7 	ldb	r5,-1(r16)
81116d78:	00801944 	movi	r2,101
81116d7c:	84ffffc4 	addi	r19,r16,-1
81116d80:	957fffc4 	addi	r21,r18,-1
81116d84:	28800826 	beq	r5,r2,81116da8 <__svfscanf_r+0xdd0>
81116d88:	00801144 	movi	r2,69
81116d8c:	28800626 	beq	r5,r2,81116da8 <__svfscanf_r+0xdd0>
81116d90:	e00d883a 	mov	r6,fp
81116d94:	b009883a 	mov	r4,r22
81116d98:	111fad00 	call	8111fad0 <_ungetc_r>
81116d9c:	817fff87 	ldb	r5,-2(r16)
81116da0:	84ffff84 	addi	r19,r16,-2
81116da4:	957fff84 	addi	r21,r18,-2
81116da8:	e00d883a 	mov	r6,fp
81116dac:	b009883a 	mov	r4,r22
81116db0:	111fad00 	call	8111fad0 <_ungetc_r>
81116db4:	a825883a 	mov	r18,r21
81116db8:	9821883a 	mov	r16,r19
81116dbc:	a080040c 	andi	r2,r20,16
81116dc0:	103e891e 	bne	r2,zero,811167e8 <__reset+0xfb0f67e8>
81116dc4:	80000005 	stb	zero,0(r16)
81116dc8:	a081800c 	andi	r2,r20,1536
81116dcc:	01010004 	movi	r4,1024
81116dd0:	1101dd26 	beq	r2,r4,81117548 <__svfscanf_r+0x1570>
81116dd4:	da00a417 	ldw	r8,656(sp)
81116dd8:	4001e71e 	bne	r8,zero,81117578 <__svfscanf_r+0x15a0>
81116ddc:	000d883a 	mov	r6,zero
81116de0:	d9400104 	addi	r5,sp,4
81116de4:	b009883a 	mov	r4,r22
81116de8:	111c6800 	call	8111c680 <_strtod_r>
81116dec:	1021883a 	mov	r16,r2
81116df0:	a080004c 	andi	r2,r20,1
81116df4:	1000021e 	bne	r2,zero,81116e00 <__svfscanf_r+0xe28>
81116df8:	a2c0008c 	andi	r11,r20,2
81116dfc:	5801e826 	beq	r11,zero,811175a0 <__svfscanf_r+0x15c8>
81116e00:	da009c17 	ldw	r8,624(sp)
81116e04:	40800017 	ldw	r2,0(r8)
81116e08:	42000104 	addi	r8,r8,4
81116e0c:	da009c15 	stw	r8,624(sp)
81116e10:	14000015 	stw	r16,0(r2)
81116e14:	10c00115 	stw	r3,4(r2)
81116e18:	da00a017 	ldw	r8,640(sp)
81116e1c:	dd009d17 	ldw	r20,628(sp)
81116e20:	42000044 	addi	r8,r8,1
81116e24:	da00a015 	stw	r8,640(sp)
81116e28:	a00d883a 	mov	r6,r20
81116e2c:	003ca806 	br	811160d0 <__reset+0xfb0f60d0>
81116e30:	a080400c 	andi	r2,r20,256
81116e34:	103f9a26 	beq	r2,zero,81116ca0 <__reset+0xfb0f6ca0>
81116e38:	da00a217 	ldw	r8,648(sp)
81116e3c:	00bfdfc4 	movi	r2,-129
81116e40:	a0a8703a 	and	r20,r20,r2
81116e44:	9cc00044 	addi	r19,r19,1
81116e48:	403f9e26 	beq	r8,zero,81116cc4 <__reset+0xfb0f6cc4>
81116e4c:	423fffc4 	addi	r8,r8,-1
81116e50:	da00a215 	stw	r8,648(sp)
81116e54:	84000044 	addi	r16,r16,1
81116e58:	003f9a06 	br	81116cc4 <__reset+0xfb0f6cc4>
81116e5c:	a080200c 	andi	r2,r20,128
81116e60:	103fa126 	beq	r2,zero,81116ce8 <__reset+0xfb0f6ce8>
81116e64:	00bfdfc4 	movi	r2,-129
81116e68:	a0a8703a 	and	r20,r20,r2
81116e6c:	003f9306 	br	81116cbc <__reset+0xfb0f6cbc>
81116e70:	a8803fcc 	andi	r2,r21,255
81116e74:	1080201c 	xori	r2,r2,128
81116e78:	10bfe004 	addi	r2,r2,-128
81116e7c:	020001c4 	movi	r8,7
81116e80:	123f991e 	bne	r2,r8,81116ce8 <__reset+0xfb0f6ce8>
81116e84:	05400204 	movi	r21,8
81116e88:	003f8c06 	br	81116cbc <__reset+0xfb0f6cbc>
81116e8c:	a8803fcc 	andi	r2,r21,255
81116e90:	1080201c 	xori	r2,r2,128
81116e94:	10bfe004 	addi	r2,r2,-128
81116e98:	01800184 	movi	r6,6
81116e9c:	11bf921e 	bne	r2,r6,81116ce8 <__reset+0xfb0f6ce8>
81116ea0:	054001c4 	movi	r21,7
81116ea4:	003f8506 	br	81116cbc <__reset+0xfb0f6cbc>
81116ea8:	b000491e 	bne	r22,zero,81116fd0 <__svfscanf_r+0xff8>
81116eac:	9800031e 	bne	r19,zero,81116ebc <__svfscanf_r+0xee4>
81116eb0:	a081c00c 	andi	r2,r20,1792
81116eb4:	0181c004 	movi	r6,1792
81116eb8:	11819f26 	beq	r2,r6,81117538 <__svfscanf_r+0x1560>
81116ebc:	a8803fcc 	andi	r2,r21,255
81116ec0:	1080201c 	xori	r2,r2,128
81116ec4:	10bfe004 	addi	r2,r2,-128
81116ec8:	01800044 	movi	r6,1
81116ecc:	11800226 	beq	r2,r6,81116ed8 <__svfscanf_r+0xf00>
81116ed0:	01800104 	movi	r6,4
81116ed4:	11bf841e 	bne	r2,r6,81116ce8 <__reset+0xfb0f6ce8>
81116ed8:	ad400044 	addi	r21,r21,1
81116edc:	003f7706 	br	81116cbc <__reset+0xfb0f6cbc>
81116ee0:	a8803fcc 	andi	r2,r21,255
81116ee4:	1080201c 	xori	r2,r2,128
81116ee8:	10bfe004 	addi	r2,r2,-128
81116eec:	10003c1e 	bne	r2,zero,81116fe0 <__svfscanf_r+0x1008>
81116ef0:	9801141e 	bne	r19,zero,81117344 <__svfscanf_r+0x136c>
81116ef4:	a081c00c 	andi	r2,r20,1792
81116ef8:	0181c004 	movi	r6,1792
81116efc:	11818226 	beq	r2,r6,81117508 <__svfscanf_r+0x1530>
81116f00:	8821883a 	mov	r16,r17
81116f04:	b019883a 	mov	r12,r22
81116f08:	9823883a 	mov	r17,r19
81116f0c:	182d883a 	mov	r22,r3
81116f10:	003f7a06 	br	81116cfc <__reset+0xfb0f6cfc>
81116f14:	a8803fcc 	andi	r2,r21,255
81116f18:	1080201c 	xori	r2,r2,128
81116f1c:	10bfe004 	addi	r2,r2,-128
81116f20:	01800084 	movi	r6,2
81116f24:	11bf701e 	bne	r2,r6,81116ce8 <__reset+0xfb0f6ce8>
81116f28:	054000c4 	movi	r21,3
81116f2c:	003f6306 	br	81116cbc <__reset+0xfb0f6cbc>
81116f30:	a081400c 	andi	r2,r20,1280
81116f34:	01810004 	movi	r6,1024
81116f38:	11800326 	beq	r2,r6,81116f48 <__svfscanf_r+0xf70>
81116f3c:	a184703a 	and	r2,r20,r6
81116f40:	103f6926 	beq	r2,zero,81116ce8 <__reset+0xfb0f6ce8>
81116f44:	983fee26 	beq	r19,zero,81116f00 <__reset+0xfb0f6f00>
81116f48:	a080800c 	andi	r2,r20,512
81116f4c:	1000041e 	bne	r2,zero,81116f60 <__svfscanf_r+0xf88>
81116f50:	da009f17 	ldw	r8,636(sp)
81116f54:	dc40a515 	stw	r17,660(sp)
81116f58:	9a27c83a 	sub	r19,r19,r8
81116f5c:	dcc0a415 	stw	r19,656(sp)
81116f60:	00be1fc4 	movi	r2,-1921
81116f64:	a0a8703a 	and	r20,r20,r2
81116f68:	a5006014 	ori	r20,r20,384
81116f6c:	0027883a 	mov	r19,zero
81116f70:	003f5206 	br	81116cbc <__reset+0xfb0f6cbc>
81116f74:	00800044 	movi	r2,1
81116f78:	b0bf5b1e 	bne	r22,r2,81116ce8 <__reset+0xfb0f6ce8>
81116f7c:	05800084 	movi	r22,2
81116f80:	003f4e06 	br	81116cbc <__reset+0xfb0f6cbc>
81116f84:	d980a317 	ldw	r6,652(sp)
81116f88:	30800003 	ldbu	r2,0(r6)
81116f8c:	29803fcc 	andi	r6,r5,255
81116f90:	30bf551e 	bne	r6,r2,81116ce8 <__reset+0xfb0f6ce8>
81116f94:	a080800c 	andi	r2,r20,512
81116f98:	103f5326 	beq	r2,zero,81116ce8 <__reset+0xfb0f6ce8>
81116f9c:	023f5fc4 	movi	r8,-641
81116fa0:	a228703a 	and	r20,r20,r8
81116fa4:	dcc09f15 	stw	r19,636(sp)
81116fa8:	003f4406 	br	81116cbc <__reset+0xfb0f6cbc>
81116fac:	1809883a 	mov	r4,r3
81116fb0:	e00b883a 	mov	r5,fp
81116fb4:	d8c0a615 	stw	r3,664(sp)
81116fb8:	d9c0aa15 	stw	r7,680(sp)
81116fbc:	11112fc0 	call	811112fc <__srefill_r>
81116fc0:	d8c0a617 	ldw	r3,664(sp)
81116fc4:	d9c0aa17 	ldw	r7,680(sp)
81116fc8:	103f4626 	beq	r2,zero,81116ce4 <__reset+0xfb0f6ce4>
81116fcc:	003f4606 	br	81116ce8 <__reset+0xfb0f6ce8>
81116fd0:	00800084 	movi	r2,2
81116fd4:	b0bfb91e 	bne	r22,r2,81116ebc <__reset+0xfb0f6ebc>
81116fd8:	058000c4 	movi	r22,3
81116fdc:	003f3706 	br	81116cbc <__reset+0xfb0f6cbc>
81116fe0:	018000c4 	movi	r6,3
81116fe4:	11bfbc26 	beq	r2,r6,81116ed8 <__reset+0xfb0f6ed8>
81116fe8:	01800144 	movi	r6,5
81116fec:	11bfba26 	beq	r2,r6,81116ed8 <__reset+0xfb0f6ed8>
81116ff0:	003f3d06 	br	81116ce8 <__reset+0xfb0f6ce8>
81116ff4:	98bfffc4 	addi	r2,r19,-1
81116ff8:	01405704 	movi	r5,348
81116ffc:	2880d82e 	bgeu	r5,r2,81117360 <__svfscanf_r+0x1388>
81117000:	99ffa8c4 	addi	r7,r19,-349
81117004:	04c05744 	movi	r19,349
81117008:	8c436014 	ori	r17,r17,3456
8111700c:	9013883a 	mov	r9,r18
81117010:	8825883a 	mov	r18,r17
81117014:	dc409e17 	ldw	r17,632(sp)
81117018:	0029883a 	mov	r20,zero
8111701c:	dc000104 	addi	r16,sp,4
81117020:	05401344 	movi	r21,77
81117024:	02c08004 	movi	r11,512
81117028:	01bf7fc4 	movi	r6,-513
8111702c:	023fdfc4 	movi	r8,-129
81117030:	20bff544 	addi	r2,r4,-43
81117034:	10803fcc 	andi	r2,r2,255
81117038:	a8807236 	bltu	r21,r2,81117204 <__svfscanf_r+0x122c>
8111703c:	100490ba 	slli	r2,r2,2
81117040:	01604474 	movhi	r5,33041
81117044:	295c1504 	addi	r5,r5,28756
81117048:	1145883a 	add	r2,r2,r5
8111704c:	10800017 	ldw	r2,0(r2)
81117050:	1000683a 	jmp	r2
81117054:	81117288 	cmpgei	r4,r16,17866
81117058:	81117204 	addi	r4,r16,17864
8111705c:	81117288 	cmpgei	r4,r16,17866
81117060:	81117204 	addi	r4,r16,17864
81117064:	81117204 	addi	r4,r16,17864
81117068:	81117260 	cmpeqi	r4,r16,17865
8111706c:	81117240 	call	88111724 <__reset+0x20f1724>
81117070:	81117240 	call	88111724 <__reset+0x20f1724>
81117074:	81117240 	call	88111724 <__reset+0x20f1724>
81117078:	81117240 	call	88111724 <__reset+0x20f1724>
8111707c:	81117240 	call	88111724 <__reset+0x20f1724>
81117080:	81117240 	call	88111724 <__reset+0x20f1724>
81117084:	81117240 	call	88111724 <__reset+0x20f1724>
81117088:	811171e8 	cmpgeui	r4,r16,17863
8111708c:	811171e8 	cmpgeui	r4,r16,17863
81117090:	81117204 	addi	r4,r16,17864
81117094:	81117204 	addi	r4,r16,17864
81117098:	81117204 	addi	r4,r16,17864
8111709c:	81117204 	addi	r4,r16,17864
811170a0:	81117204 	addi	r4,r16,17864
811170a4:	81117204 	addi	r4,r16,17864
811170a8:	81117204 	addi	r4,r16,17864
811170ac:	811171d4 	ori	r4,r16,17863
811170b0:	811171d4 	ori	r4,r16,17863
811170b4:	811171d4 	ori	r4,r16,17863
811170b8:	811171d4 	ori	r4,r16,17863
811170bc:	811171d4 	ori	r4,r16,17863
811170c0:	811171d4 	ori	r4,r16,17863
811170c4:	81117204 	addi	r4,r16,17864
811170c8:	81117204 	addi	r4,r16,17864
811170cc:	81117204 	addi	r4,r16,17864
811170d0:	81117204 	addi	r4,r16,17864
811170d4:	81117204 	addi	r4,r16,17864
811170d8:	81117204 	addi	r4,r16,17864
811170dc:	81117204 	addi	r4,r16,17864
811170e0:	81117204 	addi	r4,r16,17864
811170e4:	81117204 	addi	r4,r16,17864
811170e8:	81117204 	addi	r4,r16,17864
811170ec:	81117204 	addi	r4,r16,17864
811170f0:	81117204 	addi	r4,r16,17864
811170f4:	81117204 	addi	r4,r16,17864
811170f8:	81117204 	addi	r4,r16,17864
811170fc:	81117204 	addi	r4,r16,17864
81117100:	81117204 	addi	r4,r16,17864
81117104:	81117204 	addi	r4,r16,17864
81117108:	8111718c 	andi	r4,r16,17862
8111710c:	81117204 	addi	r4,r16,17864
81117110:	81117204 	addi	r4,r16,17864
81117114:	81117204 	addi	r4,r16,17864
81117118:	81117204 	addi	r4,r16,17864
8111711c:	81117204 	addi	r4,r16,17864
81117120:	81117204 	addi	r4,r16,17864
81117124:	81117204 	addi	r4,r16,17864
81117128:	81117204 	addi	r4,r16,17864
8111712c:	811171d4 	ori	r4,r16,17863
81117130:	811171d4 	ori	r4,r16,17863
81117134:	811171d4 	ori	r4,r16,17863
81117138:	811171d4 	ori	r4,r16,17863
8111713c:	811171d4 	ori	r4,r16,17863
81117140:	811171d4 	ori	r4,r16,17863
81117144:	81117204 	addi	r4,r16,17864
81117148:	81117204 	addi	r4,r16,17864
8111714c:	81117204 	addi	r4,r16,17864
81117150:	81117204 	addi	r4,r16,17864
81117154:	81117204 	addi	r4,r16,17864
81117158:	81117204 	addi	r4,r16,17864
8111715c:	81117204 	addi	r4,r16,17864
81117160:	81117204 	addi	r4,r16,17864
81117164:	81117204 	addi	r4,r16,17864
81117168:	81117204 	addi	r4,r16,17864
8111716c:	81117204 	addi	r4,r16,17864
81117170:	81117204 	addi	r4,r16,17864
81117174:	81117204 	addi	r4,r16,17864
81117178:	81117204 	addi	r4,r16,17864
8111717c:	81117204 	addi	r4,r16,17864
81117180:	81117204 	addi	r4,r16,17864
81117184:	81117204 	addi	r4,r16,17864
81117188:	8111718c 	andi	r4,r16,17862
8111718c:	9081800c 	andi	r2,r18,1536
81117190:	12c01c1e 	bne	r2,r11,81117204 <__svfscanf_r+0x122c>
81117194:	91a4703a 	and	r18,r18,r6
81117198:	94814014 	ori	r18,r18,1280
8111719c:	04400404 	movi	r17,16
811171a0:	81000005 	stb	r4,0(r16)
811171a4:	84000044 	addi	r16,r16,1
811171a8:	e0800117 	ldw	r2,4(fp)
811171ac:	10bfffc4 	addi	r2,r2,-1
811171b0:	e0800115 	stw	r2,4(fp)
811171b4:	0080540e 	bge	zero,r2,81117308 <__svfscanf_r+0x1330>
811171b8:	18c00044 	addi	r3,r3,1
811171bc:	e0c00015 	stw	r3,0(fp)
811171c0:	9cffffc4 	addi	r19,r19,-1
811171c4:	98000f26 	beq	r19,zero,81117204 <__svfscanf_r+0x122c>
811171c8:	e0c00017 	ldw	r3,0(fp)
811171cc:	19000003 	ldbu	r4,0(r3)
811171d0:	003f9706 	br	81117030 <__reset+0xfb0f7030>
811171d4:	00800284 	movi	r2,10
811171d8:	14400a0e 	bge	r2,r17,81117204 <__svfscanf_r+0x122c>
811171dc:	00bd1fc4 	movi	r2,-2945
811171e0:	90a4703a 	and	r18,r18,r2
811171e4:	003fee06 	br	811171a0 <__reset+0xfb0f71a0>
811171e8:	01604534 	movhi	r5,33044
811171ec:	8c63883a 	add	r17,r17,r17
811171f0:	29713f84 	addi	r5,r5,-15106
811171f4:	2c45883a 	add	r2,r5,r17
811171f8:	1440000f 	ldh	r17,0(r2)
811171fc:	00800204 	movi	r2,8
81117200:	147ff616 	blt	r2,r17,811171dc <__reset+0xfb0f71dc>
81117204:	dc409e15 	stw	r17,632(sp)
81117208:	9023883a 	mov	r17,r18
8111720c:	8880400c 	andi	r2,r17,256
81117210:	4825883a 	mov	r18,r9
81117214:	10000426 	beq	r2,zero,81117228 <__svfscanf_r+0x1250>
81117218:	d9800104 	addi	r6,sp,4
8111721c:	3400be36 	bltu	r6,r16,81117518 <__svfscanf_r+0x1540>
81117220:	da000104 	addi	r8,sp,4
81117224:	443bae26 	beq	r8,r16,811160e0 <__reset+0xfb0f60e0>
81117228:	8880040c 	andi	r2,r17,16
8111722c:	10009326 	beq	r2,zero,8111747c <__svfscanf_r+0x14a4>
81117230:	d8800104 	addi	r2,sp,4
81117234:	80a1c83a 	sub	r16,r16,r2
81117238:	8521883a 	add	r16,r16,r20
8111723c:	003d0606 	br	81116658 <__reset+0xfb0f6658>
81117240:	01604534 	movhi	r5,33044
81117244:	8c63883a 	add	r17,r17,r17
81117248:	29713f84 	addi	r5,r5,-15106
8111724c:	2c45883a 	add	r2,r5,r17
81117250:	1440000f 	ldh	r17,0(r2)
81117254:	00bd1fc4 	movi	r2,-2945
81117258:	90a4703a 	and	r18,r18,r2
8111725c:	003fd006 	br	811171a0 <__reset+0xfb0f71a0>
81117260:	9082000c 	andi	r2,r18,2048
81117264:	103fce26 	beq	r2,zero,811171a0 <__reset+0xfb0f71a0>
81117268:	8800021e 	bne	r17,zero,81117274 <__svfscanf_r+0x129c>
8111726c:	94808014 	ori	r18,r18,512
81117270:	04400204 	movi	r17,8
81117274:	9081000c 	andi	r2,r18,1024
81117278:	10009426 	beq	r2,zero,811174cc <__svfscanf_r+0x14f4>
8111727c:	00be9fc4 	movi	r2,-1409
81117280:	90a4703a 	and	r18,r18,r2
81117284:	003fc606 	br	811171a0 <__reset+0xfb0f71a0>
81117288:	9080200c 	andi	r2,r18,128
8111728c:	103fdd26 	beq	r2,zero,81117204 <__reset+0xfb0f7204>
81117290:	9224703a 	and	r18,r18,r8
81117294:	003fc206 	br	811171a0 <__reset+0xfb0f71a0>
81117298:	9800011e 	bne	r19,zero,811172a0 <__svfscanf_r+0x12c8>
8111729c:	04ffffc4 	movi	r19,-1
811172a0:	8900004c 	andi	r4,r17,1
811172a4:	20005b1e 	bne	r4,zero,81117414 <__svfscanf_r+0x143c>
811172a8:	8c40040c 	andi	r17,r17,16
811172ac:	88003026 	beq	r17,zero,81117370 <__svfscanf_r+0x1398>
811172b0:	0021883a 	mov	r16,zero
811172b4:	00000306 	br	811172c4 <__svfscanf_r+0x12ec>
811172b8:	18800003 	ldbu	r2,0(r3)
811172bc:	3885883a 	add	r2,r7,r2
811172c0:	10800043 	ldbu	r2,1(r2)
811172c4:	1080020c 	andi	r2,r2,8
811172c8:	103ce31e 	bne	r2,zero,81116658 <__reset+0xfb0f6658>
811172cc:	e0800117 	ldw	r2,4(fp)
811172d0:	18c00044 	addi	r3,r3,1
811172d4:	84000044 	addi	r16,r16,1
811172d8:	10bfffc4 	addi	r2,r2,-1
811172dc:	e0800115 	stw	r2,4(fp)
811172e0:	e0c00015 	stw	r3,0(fp)
811172e4:	84fcdc26 	beq	r16,r19,81116658 <__reset+0xfb0f6658>
811172e8:	00bff316 	blt	zero,r2,811172b8 <__reset+0xfb0f72b8>
811172ec:	e00b883a 	mov	r5,fp
811172f0:	b009883a 	mov	r4,r22
811172f4:	11112fc0 	call	811112fc <__srefill_r>
811172f8:	103cd71e 	bne	r2,zero,81116658 <__reset+0xfb0f6658>
811172fc:	b9c00017 	ldw	r7,0(r23)
81117300:	e0c00017 	ldw	r3,0(fp)
81117304:	003fec06 	br	811172b8 <__reset+0xfb0f72b8>
81117308:	e00b883a 	mov	r5,fp
8111730c:	b009883a 	mov	r4,r22
81117310:	d980a715 	stw	r6,668(sp)
81117314:	d9c0aa15 	stw	r7,680(sp)
81117318:	da00a815 	stw	r8,672(sp)
8111731c:	da40a915 	stw	r9,676(sp)
81117320:	dac0a615 	stw	r11,664(sp)
81117324:	11112fc0 	call	811112fc <__srefill_r>
81117328:	d980a717 	ldw	r6,668(sp)
8111732c:	d9c0aa17 	ldw	r7,680(sp)
81117330:	da00a817 	ldw	r8,672(sp)
81117334:	da40a917 	ldw	r9,676(sp)
81117338:	dac0a617 	ldw	r11,664(sp)
8111733c:	103fa026 	beq	r2,zero,811171c0 <__reset+0xfb0f71c0>
81117340:	003fb006 	br	81117204 <__reset+0xfb0f7204>
81117344:	8821883a 	mov	r16,r17
81117348:	b019883a 	mov	r12,r22
8111734c:	9823883a 	mov	r17,r19
81117350:	182d883a 	mov	r22,r3
81117354:	00bfbfc4 	movi	r2,-257
81117358:	a0a8703a 	and	r20,r20,r2
8111735c:	003e6706 	br	81116cfc <__reset+0xfb0f6cfc>
81117360:	000f883a 	mov	r7,zero
81117364:	003f2806 	br	81117008 <__reset+0xfb0f7008>
81117368:	d800a215 	stw	zero,648(sp)
8111736c:	003de306 	br	81116afc <__reset+0xfb0f6afc>
81117370:	da009c17 	ldw	r8,624(sp)
81117374:	9abfffc4 	addi	r10,r19,-1
81117378:	44400017 	ldw	r17,0(r8)
8111737c:	44000104 	addi	r16,r8,4
81117380:	880b883a 	mov	r5,r17
81117384:	8aa9883a 	add	r20,r17,r10
81117388:	00000606 	br	811173a4 <__svfscanf_r+0x13cc>
8111738c:	e0c00017 	ldw	r3,0(fp)
81117390:	b9000017 	ldw	r4,0(r23)
81117394:	a80b883a 	mov	r5,r21
81117398:	18800003 	ldbu	r2,0(r3)
8111739c:	2085883a 	add	r2,r4,r2
811173a0:	10800043 	ldbu	r2,1(r2)
811173a4:	1080020c 	andi	r2,r2,8
811173a8:	1000551e 	bne	r2,zero,81117500 <__svfscanf_r+0x1528>
811173ac:	e0800117 	ldw	r2,4(fp)
811173b0:	19000044 	addi	r4,r3,1
811173b4:	e1000015 	stw	r4,0(fp)
811173b8:	10bfffc4 	addi	r2,r2,-1
811173bc:	e0800115 	stw	r2,4(fp)
811173c0:	18800003 	ldbu	r2,0(r3)
811173c4:	2d400044 	addi	r21,r5,1
811173c8:	a827883a 	mov	r19,r21
811173cc:	28800005 	stb	r2,0(r5)
811173d0:	2d000626 	beq	r5,r20,811173ec <__svfscanf_r+0x1414>
811173d4:	e0800117 	ldw	r2,4(fp)
811173d8:	00bfec16 	blt	zero,r2,8111738c <__reset+0xfb0f738c>
811173dc:	e00b883a 	mov	r5,fp
811173e0:	b009883a 	mov	r4,r22
811173e4:	11112fc0 	call	811112fc <__srefill_r>
811173e8:	103fe826 	beq	r2,zero,8111738c <__reset+0xfb0f738c>
811173ec:	da00a017 	ldw	r8,640(sp)
811173f0:	dd009d17 	ldw	r20,628(sp)
811173f4:	9c63c83a 	sub	r17,r19,r17
811173f8:	42000044 	addi	r8,r8,1
811173fc:	98000005 	stb	zero,0(r19)
81117400:	9465883a 	add	r18,r18,r17
81117404:	da00a015 	stw	r8,640(sp)
81117408:	dc009c15 	stw	r16,624(sp)
8111740c:	a00d883a 	mov	r6,r20
81117410:	003b2f06 	br	811160d0 <__reset+0xfb0f60d0>
81117414:	dd409904 	addi	r21,sp,612
81117418:	8c40040c 	andi	r17,r17,16
8111741c:	01800204 	movi	r6,8
81117420:	000b883a 	mov	r5,zero
81117424:	a809883a 	mov	r4,r21
81117428:	1110ff80 	call	81110ff8 <memset>
8111742c:	8800401e 	bne	r17,zero,81117530 <__svfscanf_r+0x1558>
81117430:	da009c17 	ldw	r8,624(sp)
81117434:	45000017 	ldw	r20,0(r8)
81117438:	42000104 	addi	r8,r8,4
8111743c:	da009c15 	stw	r8,624(sp)
81117440:	000d883a 	mov	r6,zero
81117444:	3021883a 	mov	r16,r6
81117448:	dc409f15 	stw	r17,636(sp)
8111744c:	e0800017 	ldw	r2,0(fp)
81117450:	b8c00017 	ldw	r3,0(r23)
81117454:	10800003 	ldbu	r2,0(r2)
81117458:	1885883a 	add	r2,r3,r2
8111745c:	10800043 	ldbu	r2,1(r2)
81117460:	1080020c 	andi	r2,r2,8
81117464:	1000011e 	bne	r2,zero,8111746c <__svfscanf_r+0x1494>
81117468:	9800701e 	bne	r19,zero,8111762c <__svfscanf_r+0x1654>
8111746c:	dc409f17 	ldw	r17,636(sp)
81117470:	883cdd1e 	bne	r17,zero,811167e8 <__reset+0xfb0f67e8>
81117474:	a0000015 	stw	zero,0(r20)
81117478:	003cd806 	br	811167dc <__reset+0xfb0f67dc>
8111747c:	d9c09e17 	ldw	r7,632(sp)
81117480:	da00a117 	ldw	r8,644(sp)
81117484:	000d883a 	mov	r6,zero
81117488:	d9400104 	addi	r5,sp,4
8111748c:	b009883a 	mov	r4,r22
81117490:	80000005 	stb	zero,0(r16)
81117494:	403ee83a 	callr	r8
81117498:	88c0080c 	andi	r3,r17,32
8111749c:	1800121e 	bne	r3,zero,811174e8 <__svfscanf_r+0x1510>
811174a0:	88c0010c 	andi	r3,r17,4
811174a4:	18004d26 	beq	r3,zero,811175dc <__svfscanf_r+0x1604>
811174a8:	da009c17 	ldw	r8,624(sp)
811174ac:	40c00017 	ldw	r3,0(r8)
811174b0:	42000104 	addi	r8,r8,4
811174b4:	da009c15 	stw	r8,624(sp)
811174b8:	1880000d 	sth	r2,0(r3)
811174bc:	da00a017 	ldw	r8,640(sp)
811174c0:	42000044 	addi	r8,r8,1
811174c4:	da00a015 	stw	r8,640(sp)
811174c8:	003f5906 	br	81117230 <__reset+0xfb0f7230>
811174cc:	00bf1fc4 	movi	r2,-897
811174d0:	90a4703a 	and	r18,r18,r2
811174d4:	38000226 	beq	r7,zero,811174e0 <__svfscanf_r+0x1508>
811174d8:	39ffffc4 	addi	r7,r7,-1
811174dc:	9cc00044 	addi	r19,r19,1
811174e0:	a5000044 	addi	r20,r20,1
811174e4:	003f3006 	br	811171a8 <__reset+0xfb0f71a8>
811174e8:	da009c17 	ldw	r8,624(sp)
811174ec:	40c00017 	ldw	r3,0(r8)
811174f0:	42000104 	addi	r8,r8,4
811174f4:	da009c15 	stw	r8,624(sp)
811174f8:	18800015 	stw	r2,0(r3)
811174fc:	003fef06 	br	811174bc <__reset+0xfb0f74bc>
81117500:	2827883a 	mov	r19,r5
81117504:	003fb906 	br	811173ec <__reset+0xfb0f73ec>
81117508:	01be1fc4 	movi	r6,-1921
8111750c:	a1a8703a 	and	r20,r20,r6
81117510:	05400044 	movi	r21,1
81117514:	003de906 	br	81116cbc <__reset+0xfb0f6cbc>
81117518:	817fffc7 	ldb	r5,-1(r16)
8111751c:	e00d883a 	mov	r6,fp
81117520:	b009883a 	mov	r4,r22
81117524:	843fffc4 	addi	r16,r16,-1
81117528:	111fad00 	call	8111fad0 <_ungetc_r>
8111752c:	003f3c06 	br	81117220 <__reset+0xfb0f7220>
81117530:	dd009b04 	addi	r20,sp,620
81117534:	003fc206 	br	81117440 <__reset+0xfb0f7440>
81117538:	00be1fc4 	movi	r2,-1921
8111753c:	a0a8703a 	and	r20,r20,r2
81117540:	05800044 	movi	r22,1
81117544:	003ddd06 	br	81116cbc <__reset+0xfb0f6cbc>
81117548:	d8c09f17 	ldw	r3,636(sp)
8111754c:	88e3c83a 	sub	r17,r17,r3
81117550:	044dc83a 	sub	r6,zero,r17
81117554:	883e2126 	beq	r17,zero,81116ddc <__reset+0xfb0f6ddc>
81117558:	d88055c4 	addi	r2,sp,343
8111755c:	80800136 	bltu	r16,r2,81117564 <__svfscanf_r+0x158c>
81117560:	dc005584 	addi	r16,sp,342
81117564:	01604534 	movhi	r5,33044
81117568:	29713e04 	addi	r5,r5,-15112
8111756c:	8009883a 	mov	r4,r16
81117570:	11116100 	call	81111610 <sprintf>
81117574:	003e1906 	br	81116ddc <__reset+0xfb0f6ddc>
81117578:	d8c0a517 	ldw	r3,660(sp)
8111757c:	000d883a 	mov	r6,zero
81117580:	01c00284 	movi	r7,10
81117584:	19400044 	addi	r5,r3,1
81117588:	b009883a 	mov	r4,r22
8111758c:	11118bc0 	call	811118bc <_strtol_r>
81117590:	da00a417 	ldw	r8,656(sp)
81117594:	dc00a517 	ldw	r16,660(sp)
81117598:	120dc83a 	sub	r6,r2,r8
8111759c:	003fee06 	br	81117558 <__reset+0xfb0f7558>
811175a0:	da009c17 	ldw	r8,624(sp)
811175a4:	180b883a 	mov	r5,r3
811175a8:	8009883a 	mov	r4,r16
811175ac:	45000017 	ldw	r20,0(r8)
811175b0:	44400104 	addi	r17,r8,4
811175b4:	d8c0a615 	stw	r3,664(sp)
811175b8:	111c3ec0 	call	8111c3ec <__fpclassifyd>
811175bc:	d8c0a617 	ldw	r3,664(sp)
811175c0:	10006426 	beq	r2,zero,81117754 <__svfscanf_r+0x177c>
811175c4:	8009883a 	mov	r4,r16
811175c8:	180b883a 	mov	r5,r3
811175cc:	110fb400 	call	8110fb40 <__truncdfsf2>
811175d0:	a0800015 	stw	r2,0(r20)
811175d4:	dc409c15 	stw	r17,624(sp)
811175d8:	003e0f06 	br	81116e18 <__reset+0xfb0f6e18>
811175dc:	88c0004c 	andi	r3,r17,1
811175e0:	183fc11e 	bne	r3,zero,811174e8 <__reset+0xfb0f74e8>
811175e4:	8c40008c 	andi	r17,r17,2
811175e8:	883fbf26 	beq	r17,zero,811174e8 <__reset+0xfb0f74e8>
811175ec:	da00a117 	ldw	r8,644(sp)
811175f0:	00a044b4 	movhi	r2,33042
811175f4:	10b82204 	addi	r2,r2,-8056
811175f8:	d9c09e17 	ldw	r7,632(sp)
811175fc:	000d883a 	mov	r6,zero
81117600:	d9400104 	addi	r5,sp,4
81117604:	b009883a 	mov	r4,r22
81117608:	40806226 	beq	r8,r2,81117794 <__svfscanf_r+0x17bc>
8111760c:	111dda00 	call	8111dda0 <_strtoll_r>
81117610:	da009c17 	ldw	r8,624(sp)
81117614:	41000017 	ldw	r4,0(r8)
81117618:	42000104 	addi	r8,r8,4
8111761c:	da009c15 	stw	r8,624(sp)
81117620:	20800015 	stw	r2,0(r4)
81117624:	20c00115 	stw	r3,4(r4)
81117628:	003fa406 	br	811174bc <__reset+0xfb0f74bc>
8111762c:	111a87c0 	call	8111a87c <__locale_mb_cur_max>
81117630:	80bca726 	beq	r16,r2,811168d0 <__reset+0xfb0f68d0>
81117634:	e0800017 	ldw	r2,0(fp)
81117638:	e1000117 	ldw	r4,4(fp)
8111763c:	d8c00104 	addi	r3,sp,4
81117640:	12000003 	ldbu	r8,0(r2)
81117644:	213fffc4 	addi	r4,r4,-1
81117648:	10800044 	addi	r2,r2,1
8111764c:	e1000115 	stw	r4,4(fp)
81117650:	e0800015 	stw	r2,0(fp)
81117654:	84400044 	addi	r17,r16,1
81117658:	dd400015 	stw	r21,0(sp)
8111765c:	1c21883a 	add	r16,r3,r16
81117660:	b009883a 	mov	r4,r22
81117664:	880f883a 	mov	r7,r17
81117668:	180d883a 	mov	r6,r3
8111766c:	a00b883a 	mov	r5,r20
81117670:	82000005 	stb	r8,0(r16)
81117674:	111a9380 	call	8111a938 <_mbrtowc_r>
81117678:	013fffc4 	movi	r4,-1
8111767c:	113c9426 	beq	r2,r4,811168d0 <__reset+0xfb0f68d0>
81117680:	103c881e 	bne	r2,zero,811168a4 <__reset+0xfb0f68a4>
81117684:	a0000015 	stw	zero,0(r20)
81117688:	0009883a 	mov	r4,zero
8111768c:	111a7bc0 	call	8111a7bc <iswspace>
81117690:	10001a26 	beq	r2,zero,811176fc <__svfscanf_r+0x1724>
81117694:	8821883a 	mov	r16,r17
81117698:	dc409f17 	ldw	r17,636(sp)
8111769c:	803f7426 	beq	r16,zero,81117470 <__reset+0xfb0f7470>
811176a0:	843fffc4 	addi	r16,r16,-1
811176a4:	d9800104 	addi	r6,sp,4
811176a8:	342b883a 	add	r21,r6,r16
811176ac:	00000106 	br	811176b4 <__svfscanf_r+0x16dc>
811176b0:	843fffc4 	addi	r16,r16,-1
811176b4:	a9400003 	ldbu	r5,0(r21)
811176b8:	e00d883a 	mov	r6,fp
811176bc:	b009883a 	mov	r4,r22
811176c0:	111fad00 	call	8111fad0 <_ungetc_r>
811176c4:	ad7fffc4 	addi	r21,r21,-1
811176c8:	803ff91e 	bne	r16,zero,811176b0 <__reset+0xfb0f76b0>
811176cc:	003f6806 	br	81117470 <__reset+0xfb0f7470>
811176d0:	d9800104 	addi	r6,sp,4
811176d4:	802b883a 	mov	r21,r16
811176d8:	343a812e 	bgeu	r6,r16,811160e0 <__reset+0xfb0f60e0>
811176dc:	ad7fffc4 	addi	r21,r21,-1
811176e0:	a9400007 	ldb	r5,0(r21)
811176e4:	e00d883a 	mov	r6,fp
811176e8:	b009883a 	mov	r4,r22
811176ec:	111fad00 	call	8111fad0 <_ungetc_r>
811176f0:	da000104 	addi	r8,sp,4
811176f4:	457ff91e 	bne	r8,r21,811176dc <__reset+0xfb0f76dc>
811176f8:	003a7906 	br	811160e0 <__reset+0xfb0f60e0>
811176fc:	da009f17 	ldw	r8,636(sp)
81117700:	9465883a 	add	r18,r18,r17
81117704:	9cffffc4 	addi	r19,r19,-1
81117708:	4000051e 	bne	r8,zero,81117720 <__svfscanf_r+0x1748>
8111770c:	a5000104 	addi	r20,r20,4
81117710:	0021883a 	mov	r16,zero
81117714:	003c6606 	br	811168b0 <__reset+0xfb0f68b0>
81117718:	a1000017 	ldw	r4,0(r20)
8111771c:	003fdb06 	br	8111768c <__reset+0xfb0f768c>
81117720:	0021883a 	mov	r16,zero
81117724:	003c6206 	br	811168b0 <__reset+0xfb0f68b0>
81117728:	d8800104 	addi	r2,sp,4
8111772c:	802b883a 	mov	r21,r16
81117730:	143a6b2e 	bgeu	r2,r16,811160e0 <__reset+0xfb0f60e0>
81117734:	ad7fffc4 	addi	r21,r21,-1
81117738:	a9400007 	ldb	r5,0(r21)
8111773c:	e00d883a 	mov	r6,fp
81117740:	b009883a 	mov	r4,r22
81117744:	111fad00 	call	8111fad0 <_ungetc_r>
81117748:	d8c00104 	addi	r3,sp,4
8111774c:	1d7ff91e 	bne	r3,r21,81117734 <__reset+0xfb0f7734>
81117750:	003a6306 	br	811160e0 <__reset+0xfb0f60e0>
81117754:	0009883a 	mov	r4,zero
81117758:	111c5300 	call	8111c530 <nanf>
8111775c:	a0800015 	stw	r2,0(r20)
81117760:	dc409c15 	stw	r17,624(sp)
81117764:	003dac06 	br	81116e18 <__reset+0xfb0f6e18>
81117768:	d9000104 	addi	r4,sp,4
8111776c:	802b883a 	mov	r21,r16
81117770:	243a5b2e 	bgeu	r4,r16,811160e0 <__reset+0xfb0f60e0>
81117774:	ad7fffc4 	addi	r21,r21,-1
81117778:	a9400007 	ldb	r5,0(r21)
8111777c:	e00d883a 	mov	r6,fp
81117780:	b009883a 	mov	r4,r22
81117784:	111fad00 	call	8111fad0 <_ungetc_r>
81117788:	d9400104 	addi	r5,sp,4
8111778c:	2d7ff91e 	bne	r5,r21,81117774 <__reset+0xfb0f7774>
81117790:	003a5306 	br	811160e0 <__reset+0xfb0f60e0>
81117794:	111e2f80 	call	8111e2f8 <_strtoull_r>
81117798:	003f9d06 	br	81117610 <__reset+0xfb0f7610>

8111779c <vfscanf>:
8111779c:	00a04534 	movhi	r2,33044
811177a0:	defffb04 	addi	sp,sp,-20
811177a4:	10ba2704 	addi	r2,r2,-5988
811177a8:	de00012e 	bgeu	sp,et,811177b0 <vfscanf+0x14>
811177ac:	003b68fa 	trap	3
811177b0:	dc000215 	stw	r16,8(sp)
811177b4:	14000017 	ldw	r16,0(r2)
811177b8:	dc400315 	stw	r17,12(sp)
811177bc:	dfc00415 	stw	ra,16(sp)
811177c0:	2023883a 	mov	r17,r4
811177c4:	80000826 	beq	r16,zero,811177e8 <vfscanf+0x4c>
811177c8:	80800e17 	ldw	r2,56(r16)
811177cc:	1000061e 	bne	r2,zero,811177e8 <vfscanf+0x4c>
811177d0:	8009883a 	mov	r4,r16
811177d4:	d9400015 	stw	r5,0(sp)
811177d8:	d9800115 	stw	r6,4(sp)
811177dc:	11199540 	call	81119954 <__sinit>
811177e0:	d9800117 	ldw	r6,4(sp)
811177e4:	d9400017 	ldw	r5,0(sp)
811177e8:	300f883a 	mov	r7,r6
811177ec:	8009883a 	mov	r4,r16
811177f0:	280d883a 	mov	r6,r5
811177f4:	880b883a 	mov	r5,r17
811177f8:	dfc00417 	ldw	ra,16(sp)
811177fc:	dc400317 	ldw	r17,12(sp)
81117800:	dc000217 	ldw	r16,8(sp)
81117804:	dec00504 	addi	sp,sp,20
81117808:	1115fd81 	jmpi	81115fd8 <__svfscanf_r>

8111780c <__svfscanf>:
8111780c:	00a04534 	movhi	r2,33044
81117810:	10ba2704 	addi	r2,r2,-5988
81117814:	300f883a 	mov	r7,r6
81117818:	280d883a 	mov	r6,r5
8111781c:	200b883a 	mov	r5,r4
81117820:	11000017 	ldw	r4,0(r2)
81117824:	1115fd81 	jmpi	81115fd8 <__svfscanf_r>

81117828 <_vfscanf_r>:
81117828:	defffb04 	addi	sp,sp,-20
8111782c:	de00012e 	bgeu	sp,et,81117834 <_vfscanf_r+0xc>
81117830:	003b68fa 	trap	3
81117834:	dc000315 	stw	r16,12(sp)
81117838:	dfc00415 	stw	ra,16(sp)
8111783c:	2021883a 	mov	r16,r4
81117840:	20000926 	beq	r4,zero,81117868 <_vfscanf_r+0x40>
81117844:	20800e17 	ldw	r2,56(r4)
81117848:	1000071e 	bne	r2,zero,81117868 <_vfscanf_r+0x40>
8111784c:	d9400015 	stw	r5,0(sp)
81117850:	d9800115 	stw	r6,4(sp)
81117854:	d9c00215 	stw	r7,8(sp)
81117858:	11199540 	call	81119954 <__sinit>
8111785c:	d9c00217 	ldw	r7,8(sp)
81117860:	d9800117 	ldw	r6,4(sp)
81117864:	d9400017 	ldw	r5,0(sp)
81117868:	8009883a 	mov	r4,r16
8111786c:	dfc00417 	ldw	ra,16(sp)
81117870:	dc000317 	ldw	r16,12(sp)
81117874:	dec00504 	addi	sp,sp,20
81117878:	1115fd81 	jmpi	81115fd8 <__svfscanf_r>

8111787c <_write_r>:
8111787c:	defffd04 	addi	sp,sp,-12
81117880:	de00012e 	bgeu	sp,et,81117888 <_write_r+0xc>
81117884:	003b68fa 	trap	3
81117888:	2805883a 	mov	r2,r5
8111788c:	dc000015 	stw	r16,0(sp)
81117890:	04204534 	movhi	r16,33044
81117894:	dc400115 	stw	r17,4(sp)
81117898:	300b883a 	mov	r5,r6
8111789c:	843a8004 	addi	r16,r16,-5632
811178a0:	2023883a 	mov	r17,r4
811178a4:	380d883a 	mov	r6,r7
811178a8:	1009883a 	mov	r4,r2
811178ac:	dfc00215 	stw	ra,8(sp)
811178b0:	80000015 	stw	zero,0(r16)
811178b4:	11264f00 	call	811264f0 <write>
811178b8:	00ffffc4 	movi	r3,-1
811178bc:	10c00526 	beq	r2,r3,811178d4 <_write_r+0x58>
811178c0:	dfc00217 	ldw	ra,8(sp)
811178c4:	dc400117 	ldw	r17,4(sp)
811178c8:	dc000017 	ldw	r16,0(sp)
811178cc:	dec00304 	addi	sp,sp,12
811178d0:	f800283a 	ret
811178d4:	80c00017 	ldw	r3,0(r16)
811178d8:	183ff926 	beq	r3,zero,811178c0 <__reset+0xfb0f78c0>
811178dc:	88c00015 	stw	r3,0(r17)
811178e0:	003ff706 	br	811178c0 <__reset+0xfb0f78c0>

811178e4 <__swsetup_r>:
811178e4:	00a04534 	movhi	r2,33044
811178e8:	defffd04 	addi	sp,sp,-12
811178ec:	10ba2704 	addi	r2,r2,-5988
811178f0:	de00012e 	bgeu	sp,et,811178f8 <__swsetup_r+0x14>
811178f4:	003b68fa 	trap	3
811178f8:	dc400115 	stw	r17,4(sp)
811178fc:	2023883a 	mov	r17,r4
81117900:	11000017 	ldw	r4,0(r2)
81117904:	dc000015 	stw	r16,0(sp)
81117908:	dfc00215 	stw	ra,8(sp)
8111790c:	2821883a 	mov	r16,r5
81117910:	20000226 	beq	r4,zero,8111791c <__swsetup_r+0x38>
81117914:	20800e17 	ldw	r2,56(r4)
81117918:	10003126 	beq	r2,zero,811179e0 <__swsetup_r+0xfc>
8111791c:	8080030b 	ldhu	r2,12(r16)
81117920:	10c0020c 	andi	r3,r2,8
81117924:	1009883a 	mov	r4,r2
81117928:	18000f26 	beq	r3,zero,81117968 <__swsetup_r+0x84>
8111792c:	80c00417 	ldw	r3,16(r16)
81117930:	18001526 	beq	r3,zero,81117988 <__swsetup_r+0xa4>
81117934:	1100004c 	andi	r4,r2,1
81117938:	20001c1e 	bne	r4,zero,811179ac <__swsetup_r+0xc8>
8111793c:	1080008c 	andi	r2,r2,2
81117940:	1000291e 	bne	r2,zero,811179e8 <__swsetup_r+0x104>
81117944:	80800517 	ldw	r2,20(r16)
81117948:	80800215 	stw	r2,8(r16)
8111794c:	18001c26 	beq	r3,zero,811179c0 <__swsetup_r+0xdc>
81117950:	0005883a 	mov	r2,zero
81117954:	dfc00217 	ldw	ra,8(sp)
81117958:	dc400117 	ldw	r17,4(sp)
8111795c:	dc000017 	ldw	r16,0(sp)
81117960:	dec00304 	addi	sp,sp,12
81117964:	f800283a 	ret
81117968:	2080040c 	andi	r2,r4,16
8111796c:	10002e26 	beq	r2,zero,81117a28 <__swsetup_r+0x144>
81117970:	2080010c 	andi	r2,r4,4
81117974:	10001e1e 	bne	r2,zero,811179f0 <__swsetup_r+0x10c>
81117978:	80c00417 	ldw	r3,16(r16)
8111797c:	20800214 	ori	r2,r4,8
81117980:	8080030d 	sth	r2,12(r16)
81117984:	183feb1e 	bne	r3,zero,81117934 <__reset+0xfb0f7934>
81117988:	1100a00c 	andi	r4,r2,640
8111798c:	01408004 	movi	r5,512
81117990:	217fe826 	beq	r4,r5,81117934 <__reset+0xfb0f7934>
81117994:	800b883a 	mov	r5,r16
81117998:	8809883a 	mov	r4,r17
8111799c:	11104d00 	call	811104d0 <__smakebuf_r>
811179a0:	8080030b 	ldhu	r2,12(r16)
811179a4:	80c00417 	ldw	r3,16(r16)
811179a8:	003fe206 	br	81117934 <__reset+0xfb0f7934>
811179ac:	80800517 	ldw	r2,20(r16)
811179b0:	80000215 	stw	zero,8(r16)
811179b4:	0085c83a 	sub	r2,zero,r2
811179b8:	80800615 	stw	r2,24(r16)
811179bc:	183fe41e 	bne	r3,zero,81117950 <__reset+0xfb0f7950>
811179c0:	80c0030b 	ldhu	r3,12(r16)
811179c4:	0005883a 	mov	r2,zero
811179c8:	1900200c 	andi	r4,r3,128
811179cc:	203fe126 	beq	r4,zero,81117954 <__reset+0xfb0f7954>
811179d0:	18c01014 	ori	r3,r3,64
811179d4:	80c0030d 	sth	r3,12(r16)
811179d8:	00bfffc4 	movi	r2,-1
811179dc:	003fdd06 	br	81117954 <__reset+0xfb0f7954>
811179e0:	11199540 	call	81119954 <__sinit>
811179e4:	003fcd06 	br	8111791c <__reset+0xfb0f791c>
811179e8:	0005883a 	mov	r2,zero
811179ec:	003fd606 	br	81117948 <__reset+0xfb0f7948>
811179f0:	81400c17 	ldw	r5,48(r16)
811179f4:	28000626 	beq	r5,zero,81117a10 <__swsetup_r+0x12c>
811179f8:	80801004 	addi	r2,r16,64
811179fc:	28800326 	beq	r5,r2,81117a0c <__swsetup_r+0x128>
81117a00:	8809883a 	mov	r4,r17
81117a04:	1119dec0 	call	81119dec <_free_r>
81117a08:	8100030b 	ldhu	r4,12(r16)
81117a0c:	80000c15 	stw	zero,48(r16)
81117a10:	80c00417 	ldw	r3,16(r16)
81117a14:	00bff6c4 	movi	r2,-37
81117a18:	1108703a 	and	r4,r2,r4
81117a1c:	80000115 	stw	zero,4(r16)
81117a20:	80c00015 	stw	r3,0(r16)
81117a24:	003fd506 	br	8111797c <__reset+0xfb0f797c>
81117a28:	00800244 	movi	r2,9
81117a2c:	88800015 	stw	r2,0(r17)
81117a30:	20801014 	ori	r2,r4,64
81117a34:	8080030d 	sth	r2,12(r16)
81117a38:	00bfffc4 	movi	r2,-1
81117a3c:	003fc506 	br	81117954 <__reset+0xfb0f7954>

81117a40 <_close_r>:
81117a40:	defffd04 	addi	sp,sp,-12
81117a44:	de00012e 	bgeu	sp,et,81117a4c <_close_r+0xc>
81117a48:	003b68fa 	trap	3
81117a4c:	dc000015 	stw	r16,0(sp)
81117a50:	04204534 	movhi	r16,33044
81117a54:	dc400115 	stw	r17,4(sp)
81117a58:	843a8004 	addi	r16,r16,-5632
81117a5c:	2023883a 	mov	r17,r4
81117a60:	2809883a 	mov	r4,r5
81117a64:	dfc00215 	stw	ra,8(sp)
81117a68:	80000015 	stw	zero,0(r16)
81117a6c:	11256140 	call	81125614 <close>
81117a70:	00ffffc4 	movi	r3,-1
81117a74:	10c00526 	beq	r2,r3,81117a8c <_close_r+0x4c>
81117a78:	dfc00217 	ldw	ra,8(sp)
81117a7c:	dc400117 	ldw	r17,4(sp)
81117a80:	dc000017 	ldw	r16,0(sp)
81117a84:	dec00304 	addi	sp,sp,12
81117a88:	f800283a 	ret
81117a8c:	80c00017 	ldw	r3,0(r16)
81117a90:	183ff926 	beq	r3,zero,81117a78 <__reset+0xfb0f7a78>
81117a94:	88c00015 	stw	r3,0(r17)
81117a98:	003ff706 	br	81117a78 <__reset+0xfb0f7a78>

81117a9c <quorem>:
81117a9c:	defff704 	addi	sp,sp,-36
81117aa0:	de00012e 	bgeu	sp,et,81117aa8 <quorem+0xc>
81117aa4:	003b68fa 	trap	3
81117aa8:	dc800215 	stw	r18,8(sp)
81117aac:	20800417 	ldw	r2,16(r4)
81117ab0:	2c800417 	ldw	r18,16(r5)
81117ab4:	dfc00815 	stw	ra,32(sp)
81117ab8:	ddc00715 	stw	r23,28(sp)
81117abc:	dd800615 	stw	r22,24(sp)
81117ac0:	dd400515 	stw	r21,20(sp)
81117ac4:	dd000415 	stw	r20,16(sp)
81117ac8:	dcc00315 	stw	r19,12(sp)
81117acc:	dc400115 	stw	r17,4(sp)
81117ad0:	dc000015 	stw	r16,0(sp)
81117ad4:	14807116 	blt	r2,r18,81117c9c <quorem+0x200>
81117ad8:	94bfffc4 	addi	r18,r18,-1
81117adc:	94ad883a 	add	r22,r18,r18
81117ae0:	b5ad883a 	add	r22,r22,r22
81117ae4:	2c400504 	addi	r17,r5,20
81117ae8:	8da9883a 	add	r20,r17,r22
81117aec:	25400504 	addi	r21,r4,20
81117af0:	282f883a 	mov	r23,r5
81117af4:	adad883a 	add	r22,r21,r22
81117af8:	a1400017 	ldw	r5,0(r20)
81117afc:	2021883a 	mov	r16,r4
81117b00:	b1000017 	ldw	r4,0(r22)
81117b04:	29400044 	addi	r5,r5,1
81117b08:	11232d40 	call	811232d4 <__udivsi3>
81117b0c:	1027883a 	mov	r19,r2
81117b10:	10002c26 	beq	r2,zero,81117bc4 <quorem+0x128>
81117b14:	a813883a 	mov	r9,r21
81117b18:	880b883a 	mov	r5,r17
81117b1c:	0009883a 	mov	r4,zero
81117b20:	000d883a 	mov	r6,zero
81117b24:	2a000017 	ldw	r8,0(r5)
81117b28:	49c00017 	ldw	r7,0(r9)
81117b2c:	29400104 	addi	r5,r5,4
81117b30:	40bfffcc 	andi	r2,r8,65535
81117b34:	14c5383a 	mul	r2,r2,r19
81117b38:	4010d43a 	srli	r8,r8,16
81117b3c:	38ffffcc 	andi	r3,r7,65535
81117b40:	1105883a 	add	r2,r2,r4
81117b44:	1008d43a 	srli	r4,r2,16
81117b48:	44d1383a 	mul	r8,r8,r19
81117b4c:	198d883a 	add	r6,r3,r6
81117b50:	10ffffcc 	andi	r3,r2,65535
81117b54:	30c7c83a 	sub	r3,r6,r3
81117b58:	380ed43a 	srli	r7,r7,16
81117b5c:	4105883a 	add	r2,r8,r4
81117b60:	180dd43a 	srai	r6,r3,16
81117b64:	113fffcc 	andi	r4,r2,65535
81117b68:	390fc83a 	sub	r7,r7,r4
81117b6c:	398d883a 	add	r6,r7,r6
81117b70:	300e943a 	slli	r7,r6,16
81117b74:	18ffffcc 	andi	r3,r3,65535
81117b78:	1008d43a 	srli	r4,r2,16
81117b7c:	38ceb03a 	or	r7,r7,r3
81117b80:	49c00015 	stw	r7,0(r9)
81117b84:	300dd43a 	srai	r6,r6,16
81117b88:	4a400104 	addi	r9,r9,4
81117b8c:	a17fe52e 	bgeu	r20,r5,81117b24 <__reset+0xfb0f7b24>
81117b90:	b0800017 	ldw	r2,0(r22)
81117b94:	10000b1e 	bne	r2,zero,81117bc4 <quorem+0x128>
81117b98:	b0bfff04 	addi	r2,r22,-4
81117b9c:	a880082e 	bgeu	r21,r2,81117bc0 <quorem+0x124>
81117ba0:	b0ffff17 	ldw	r3,-4(r22)
81117ba4:	18000326 	beq	r3,zero,81117bb4 <quorem+0x118>
81117ba8:	00000506 	br	81117bc0 <quorem+0x124>
81117bac:	10c00017 	ldw	r3,0(r2)
81117bb0:	1800031e 	bne	r3,zero,81117bc0 <quorem+0x124>
81117bb4:	10bfff04 	addi	r2,r2,-4
81117bb8:	94bfffc4 	addi	r18,r18,-1
81117bbc:	a8bffb36 	bltu	r21,r2,81117bac <__reset+0xfb0f7bac>
81117bc0:	84800415 	stw	r18,16(r16)
81117bc4:	b80b883a 	mov	r5,r23
81117bc8:	8009883a 	mov	r4,r16
81117bcc:	111b6bc0 	call	8111b6bc <__mcmp>
81117bd0:	10002616 	blt	r2,zero,81117c6c <quorem+0x1d0>
81117bd4:	9cc00044 	addi	r19,r19,1
81117bd8:	a805883a 	mov	r2,r21
81117bdc:	000b883a 	mov	r5,zero
81117be0:	11000017 	ldw	r4,0(r2)
81117be4:	89800017 	ldw	r6,0(r17)
81117be8:	10800104 	addi	r2,r2,4
81117bec:	20ffffcc 	andi	r3,r4,65535
81117bf0:	194b883a 	add	r5,r3,r5
81117bf4:	30ffffcc 	andi	r3,r6,65535
81117bf8:	28c7c83a 	sub	r3,r5,r3
81117bfc:	300cd43a 	srli	r6,r6,16
81117c00:	2008d43a 	srli	r4,r4,16
81117c04:	180bd43a 	srai	r5,r3,16
81117c08:	18ffffcc 	andi	r3,r3,65535
81117c0c:	2189c83a 	sub	r4,r4,r6
81117c10:	2149883a 	add	r4,r4,r5
81117c14:	200c943a 	slli	r6,r4,16
81117c18:	8c400104 	addi	r17,r17,4
81117c1c:	200bd43a 	srai	r5,r4,16
81117c20:	30c6b03a 	or	r3,r6,r3
81117c24:	10ffff15 	stw	r3,-4(r2)
81117c28:	a47fed2e 	bgeu	r20,r17,81117be0 <__reset+0xfb0f7be0>
81117c2c:	9485883a 	add	r2,r18,r18
81117c30:	1085883a 	add	r2,r2,r2
81117c34:	a887883a 	add	r3,r21,r2
81117c38:	18800017 	ldw	r2,0(r3)
81117c3c:	10000b1e 	bne	r2,zero,81117c6c <quorem+0x1d0>
81117c40:	18bfff04 	addi	r2,r3,-4
81117c44:	a880082e 	bgeu	r21,r2,81117c68 <quorem+0x1cc>
81117c48:	18ffff17 	ldw	r3,-4(r3)
81117c4c:	18000326 	beq	r3,zero,81117c5c <quorem+0x1c0>
81117c50:	00000506 	br	81117c68 <quorem+0x1cc>
81117c54:	10c00017 	ldw	r3,0(r2)
81117c58:	1800031e 	bne	r3,zero,81117c68 <quorem+0x1cc>
81117c5c:	10bfff04 	addi	r2,r2,-4
81117c60:	94bfffc4 	addi	r18,r18,-1
81117c64:	a8bffb36 	bltu	r21,r2,81117c54 <__reset+0xfb0f7c54>
81117c68:	84800415 	stw	r18,16(r16)
81117c6c:	9805883a 	mov	r2,r19
81117c70:	dfc00817 	ldw	ra,32(sp)
81117c74:	ddc00717 	ldw	r23,28(sp)
81117c78:	dd800617 	ldw	r22,24(sp)
81117c7c:	dd400517 	ldw	r21,20(sp)
81117c80:	dd000417 	ldw	r20,16(sp)
81117c84:	dcc00317 	ldw	r19,12(sp)
81117c88:	dc800217 	ldw	r18,8(sp)
81117c8c:	dc400117 	ldw	r17,4(sp)
81117c90:	dc000017 	ldw	r16,0(sp)
81117c94:	dec00904 	addi	sp,sp,36
81117c98:	f800283a 	ret
81117c9c:	0005883a 	mov	r2,zero
81117ca0:	003ff306 	br	81117c70 <__reset+0xfb0f7c70>

81117ca4 <_dtoa_r>:
81117ca4:	deffde04 	addi	sp,sp,-136
81117ca8:	de00012e 	bgeu	sp,et,81117cb0 <_dtoa_r+0xc>
81117cac:	003b68fa 	trap	3
81117cb0:	20801017 	ldw	r2,64(r4)
81117cb4:	df002015 	stw	fp,128(sp)
81117cb8:	dcc01b15 	stw	r19,108(sp)
81117cbc:	dc801a15 	stw	r18,104(sp)
81117cc0:	dc401915 	stw	r17,100(sp)
81117cc4:	dc001815 	stw	r16,96(sp)
81117cc8:	dfc02115 	stw	ra,132(sp)
81117ccc:	ddc01f15 	stw	r23,124(sp)
81117cd0:	dd801e15 	stw	r22,120(sp)
81117cd4:	dd401d15 	stw	r21,116(sp)
81117cd8:	dd001c15 	stw	r20,112(sp)
81117cdc:	d9c00315 	stw	r7,12(sp)
81117ce0:	2039883a 	mov	fp,r4
81117ce4:	3023883a 	mov	r17,r6
81117ce8:	2825883a 	mov	r18,r5
81117cec:	dc002417 	ldw	r16,144(sp)
81117cf0:	3027883a 	mov	r19,r6
81117cf4:	10000826 	beq	r2,zero,81117d18 <_dtoa_r+0x74>
81117cf8:	21801117 	ldw	r6,68(r4)
81117cfc:	00c00044 	movi	r3,1
81117d00:	100b883a 	mov	r5,r2
81117d04:	1986983a 	sll	r3,r3,r6
81117d08:	11800115 	stw	r6,4(r2)
81117d0c:	10c00215 	stw	r3,8(r2)
81117d10:	111ae6c0 	call	8111ae6c <_Bfree>
81117d14:	e0001015 	stw	zero,64(fp)
81117d18:	88002e16 	blt	r17,zero,81117dd4 <_dtoa_r+0x130>
81117d1c:	80000015 	stw	zero,0(r16)
81117d20:	889ffc2c 	andhi	r2,r17,32752
81117d24:	00dffc34 	movhi	r3,32752
81117d28:	10c01c26 	beq	r2,r3,81117d9c <_dtoa_r+0xf8>
81117d2c:	000d883a 	mov	r6,zero
81117d30:	000f883a 	mov	r7,zero
81117d34:	9009883a 	mov	r4,r18
81117d38:	980b883a 	mov	r5,r19
81117d3c:	11247300 	call	81124730 <__eqdf2>
81117d40:	10002b1e 	bne	r2,zero,81117df0 <_dtoa_r+0x14c>
81117d44:	d9c02317 	ldw	r7,140(sp)
81117d48:	00800044 	movi	r2,1
81117d4c:	38800015 	stw	r2,0(r7)
81117d50:	d8802517 	ldw	r2,148(sp)
81117d54:	10019e26 	beq	r2,zero,811183d0 <_dtoa_r+0x72c>
81117d58:	d8c02517 	ldw	r3,148(sp)
81117d5c:	00a04534 	movhi	r2,33044
81117d60:	10b12d44 	addi	r2,r2,-15179
81117d64:	18800015 	stw	r2,0(r3)
81117d68:	10bfffc4 	addi	r2,r2,-1
81117d6c:	dfc02117 	ldw	ra,132(sp)
81117d70:	df002017 	ldw	fp,128(sp)
81117d74:	ddc01f17 	ldw	r23,124(sp)
81117d78:	dd801e17 	ldw	r22,120(sp)
81117d7c:	dd401d17 	ldw	r21,116(sp)
81117d80:	dd001c17 	ldw	r20,112(sp)
81117d84:	dcc01b17 	ldw	r19,108(sp)
81117d88:	dc801a17 	ldw	r18,104(sp)
81117d8c:	dc401917 	ldw	r17,100(sp)
81117d90:	dc001817 	ldw	r16,96(sp)
81117d94:	dec02204 	addi	sp,sp,136
81117d98:	f800283a 	ret
81117d9c:	d8c02317 	ldw	r3,140(sp)
81117da0:	0089c3c4 	movi	r2,9999
81117da4:	18800015 	stw	r2,0(r3)
81117da8:	90017726 	beq	r18,zero,81118388 <_dtoa_r+0x6e4>
81117dac:	00a04534 	movhi	r2,33044
81117db0:	10b14b04 	addi	r2,r2,-15060
81117db4:	d9002517 	ldw	r4,148(sp)
81117db8:	203fec26 	beq	r4,zero,81117d6c <__reset+0xfb0f7d6c>
81117dbc:	10c000c7 	ldb	r3,3(r2)
81117dc0:	1801781e 	bne	r3,zero,811183a4 <_dtoa_r+0x700>
81117dc4:	10c000c4 	addi	r3,r2,3
81117dc8:	d9802517 	ldw	r6,148(sp)
81117dcc:	30c00015 	stw	r3,0(r6)
81117dd0:	003fe606 	br	81117d6c <__reset+0xfb0f7d6c>
81117dd4:	04e00034 	movhi	r19,32768
81117dd8:	9cffffc4 	addi	r19,r19,-1
81117ddc:	00800044 	movi	r2,1
81117de0:	8ce6703a 	and	r19,r17,r19
81117de4:	80800015 	stw	r2,0(r16)
81117de8:	9823883a 	mov	r17,r19
81117dec:	003fcc06 	br	81117d20 <__reset+0xfb0f7d20>
81117df0:	d8800204 	addi	r2,sp,8
81117df4:	d8800015 	stw	r2,0(sp)
81117df8:	d9c00104 	addi	r7,sp,4
81117dfc:	900b883a 	mov	r5,r18
81117e00:	980d883a 	mov	r6,r19
81117e04:	e009883a 	mov	r4,fp
81117e08:	8820d53a 	srli	r16,r17,20
81117e0c:	111ba980 	call	8111ba98 <__d2b>
81117e10:	d8800915 	stw	r2,36(sp)
81117e14:	8001651e 	bne	r16,zero,811183ac <_dtoa_r+0x708>
81117e18:	dd800217 	ldw	r22,8(sp)
81117e1c:	dc000117 	ldw	r16,4(sp)
81117e20:	00800804 	movi	r2,32
81117e24:	b421883a 	add	r16,r22,r16
81117e28:	80c10c84 	addi	r3,r16,1074
81117e2c:	10c2d10e 	bge	r2,r3,81118974 <_dtoa_r+0xcd0>
81117e30:	00801004 	movi	r2,64
81117e34:	81010484 	addi	r4,r16,1042
81117e38:	10c7c83a 	sub	r3,r2,r3
81117e3c:	9108d83a 	srl	r4,r18,r4
81117e40:	88e2983a 	sll	r17,r17,r3
81117e44:	2448b03a 	or	r4,r4,r17
81117e48:	11253f00 	call	811253f0 <__floatunsidf>
81117e4c:	017f8434 	movhi	r5,65040
81117e50:	01800044 	movi	r6,1
81117e54:	1009883a 	mov	r4,r2
81117e58:	194b883a 	add	r5,r3,r5
81117e5c:	843fffc4 	addi	r16,r16,-1
81117e60:	d9801115 	stw	r6,68(sp)
81117e64:	000d883a 	mov	r6,zero
81117e68:	01cffe34 	movhi	r7,16376
81117e6c:	11249880 	call	81124988 <__subdf3>
81117e70:	0198dbf4 	movhi	r6,25455
81117e74:	01cff4f4 	movhi	r7,16339
81117e78:	3190d844 	addi	r6,r6,17249
81117e7c:	39e1e9c4 	addi	r7,r7,-30809
81117e80:	1009883a 	mov	r4,r2
81117e84:	180b883a 	mov	r5,r3
81117e88:	110f3080 	call	8110f308 <__muldf3>
81117e8c:	01a2d874 	movhi	r6,35681
81117e90:	01cff1f4 	movhi	r7,16327
81117e94:	31b22cc4 	addi	r6,r6,-14157
81117e98:	39e28a04 	addi	r7,r7,-30168
81117e9c:	180b883a 	mov	r5,r3
81117ea0:	1009883a 	mov	r4,r2
81117ea4:	112358c0 	call	8112358c <__adddf3>
81117ea8:	8009883a 	mov	r4,r16
81117eac:	1029883a 	mov	r20,r2
81117eb0:	1823883a 	mov	r17,r3
81117eb4:	112530c0 	call	8112530c <__floatsidf>
81117eb8:	019427f4 	movhi	r6,20639
81117ebc:	01cff4f4 	movhi	r7,16339
81117ec0:	319e7ec4 	addi	r6,r6,31227
81117ec4:	39d104c4 	addi	r7,r7,17427
81117ec8:	1009883a 	mov	r4,r2
81117ecc:	180b883a 	mov	r5,r3
81117ed0:	110f3080 	call	8110f308 <__muldf3>
81117ed4:	100d883a 	mov	r6,r2
81117ed8:	180f883a 	mov	r7,r3
81117edc:	a009883a 	mov	r4,r20
81117ee0:	880b883a 	mov	r5,r17
81117ee4:	112358c0 	call	8112358c <__adddf3>
81117ee8:	1009883a 	mov	r4,r2
81117eec:	180b883a 	mov	r5,r3
81117ef0:	1029883a 	mov	r20,r2
81117ef4:	1823883a 	mov	r17,r3
81117ef8:	112528c0 	call	8112528c <__fixdfsi>
81117efc:	000d883a 	mov	r6,zero
81117f00:	000f883a 	mov	r7,zero
81117f04:	a009883a 	mov	r4,r20
81117f08:	880b883a 	mov	r5,r17
81117f0c:	d8800515 	stw	r2,20(sp)
81117f10:	11248940 	call	81124894 <__ledf2>
81117f14:	10028716 	blt	r2,zero,81118934 <_dtoa_r+0xc90>
81117f18:	d8c00517 	ldw	r3,20(sp)
81117f1c:	00800584 	movi	r2,22
81117f20:	10c27536 	bltu	r2,r3,811188f8 <_dtoa_r+0xc54>
81117f24:	180490fa 	slli	r2,r3,3
81117f28:	00e04534 	movhi	r3,33044
81117f2c:	18f16604 	addi	r3,r3,-14952
81117f30:	1885883a 	add	r2,r3,r2
81117f34:	11000017 	ldw	r4,0(r2)
81117f38:	11400117 	ldw	r5,4(r2)
81117f3c:	900d883a 	mov	r6,r18
81117f40:	980f883a 	mov	r7,r19
81117f44:	11247b80 	call	811247b8 <__gedf2>
81117f48:	00828d0e 	bge	zero,r2,81118980 <_dtoa_r+0xcdc>
81117f4c:	d9000517 	ldw	r4,20(sp)
81117f50:	d8000e15 	stw	zero,56(sp)
81117f54:	213fffc4 	addi	r4,r4,-1
81117f58:	d9000515 	stw	r4,20(sp)
81117f5c:	b42dc83a 	sub	r22,r22,r16
81117f60:	b5bfffc4 	addi	r22,r22,-1
81117f64:	b0026f16 	blt	r22,zero,81118924 <_dtoa_r+0xc80>
81117f68:	d8000815 	stw	zero,32(sp)
81117f6c:	d9c00517 	ldw	r7,20(sp)
81117f70:	38026416 	blt	r7,zero,81118904 <_dtoa_r+0xc60>
81117f74:	b1ed883a 	add	r22,r22,r7
81117f78:	d9c00d15 	stw	r7,52(sp)
81117f7c:	d8000a15 	stw	zero,40(sp)
81117f80:	d9800317 	ldw	r6,12(sp)
81117f84:	00800244 	movi	r2,9
81117f88:	11811436 	bltu	r2,r6,811183dc <_dtoa_r+0x738>
81117f8c:	00800144 	movi	r2,5
81117f90:	1184e10e 	bge	r2,r6,81119318 <_dtoa_r+0x1674>
81117f94:	31bfff04 	addi	r6,r6,-4
81117f98:	d9800315 	stw	r6,12(sp)
81117f9c:	0023883a 	mov	r17,zero
81117fa0:	d9800317 	ldw	r6,12(sp)
81117fa4:	008000c4 	movi	r2,3
81117fa8:	30836726 	beq	r6,r2,81118d48 <_dtoa_r+0x10a4>
81117fac:	1183410e 	bge	r2,r6,81118cb4 <_dtoa_r+0x1010>
81117fb0:	d9c00317 	ldw	r7,12(sp)
81117fb4:	00800104 	movi	r2,4
81117fb8:	38827c26 	beq	r7,r2,811189ac <_dtoa_r+0xd08>
81117fbc:	00800144 	movi	r2,5
81117fc0:	3884c41e 	bne	r7,r2,811192d4 <_dtoa_r+0x1630>
81117fc4:	00800044 	movi	r2,1
81117fc8:	d8800b15 	stw	r2,44(sp)
81117fcc:	d8c00517 	ldw	r3,20(sp)
81117fd0:	d9002217 	ldw	r4,136(sp)
81117fd4:	1907883a 	add	r3,r3,r4
81117fd8:	19800044 	addi	r6,r3,1
81117fdc:	d8c00c15 	stw	r3,48(sp)
81117fe0:	d9800615 	stw	r6,24(sp)
81117fe4:	0183a40e 	bge	zero,r6,81118e78 <_dtoa_r+0x11d4>
81117fe8:	d9800617 	ldw	r6,24(sp)
81117fec:	3021883a 	mov	r16,r6
81117ff0:	e0001115 	stw	zero,68(fp)
81117ff4:	008005c4 	movi	r2,23
81117ff8:	1184c92e 	bgeu	r2,r6,81119320 <_dtoa_r+0x167c>
81117ffc:	00c00044 	movi	r3,1
81118000:	00800104 	movi	r2,4
81118004:	1085883a 	add	r2,r2,r2
81118008:	11000504 	addi	r4,r2,20
8111800c:	180b883a 	mov	r5,r3
81118010:	18c00044 	addi	r3,r3,1
81118014:	313ffb2e 	bgeu	r6,r4,81118004 <__reset+0xfb0f8004>
81118018:	e1401115 	stw	r5,68(fp)
8111801c:	e009883a 	mov	r4,fp
81118020:	111adbc0 	call	8111adbc <_Balloc>
81118024:	d8800715 	stw	r2,28(sp)
81118028:	e0801015 	stw	r2,64(fp)
8111802c:	00800384 	movi	r2,14
81118030:	1400f736 	bltu	r2,r16,81118410 <_dtoa_r+0x76c>
81118034:	8800f626 	beq	r17,zero,81118410 <_dtoa_r+0x76c>
81118038:	d9c00517 	ldw	r7,20(sp)
8111803c:	01c39a0e 	bge	zero,r7,81118ea8 <_dtoa_r+0x1204>
81118040:	388003cc 	andi	r2,r7,15
81118044:	100490fa 	slli	r2,r2,3
81118048:	382bd13a 	srai	r21,r7,4
8111804c:	00e04534 	movhi	r3,33044
81118050:	18f16604 	addi	r3,r3,-14952
81118054:	1885883a 	add	r2,r3,r2
81118058:	a8c0040c 	andi	r3,r21,16
8111805c:	12400017 	ldw	r9,0(r2)
81118060:	12000117 	ldw	r8,4(r2)
81118064:	18037926 	beq	r3,zero,81118e4c <_dtoa_r+0x11a8>
81118068:	00a04534 	movhi	r2,33044
8111806c:	10b15c04 	addi	r2,r2,-14992
81118070:	11800817 	ldw	r6,32(r2)
81118074:	11c00917 	ldw	r7,36(r2)
81118078:	9009883a 	mov	r4,r18
8111807c:	980b883a 	mov	r5,r19
81118080:	da001715 	stw	r8,92(sp)
81118084:	da401615 	stw	r9,88(sp)
81118088:	1123e400 	call	81123e40 <__divdf3>
8111808c:	da001717 	ldw	r8,92(sp)
81118090:	da401617 	ldw	r9,88(sp)
81118094:	ad4003cc 	andi	r21,r21,15
81118098:	040000c4 	movi	r16,3
8111809c:	1023883a 	mov	r17,r2
811180a0:	1829883a 	mov	r20,r3
811180a4:	a8001126 	beq	r21,zero,811180ec <_dtoa_r+0x448>
811180a8:	05e04534 	movhi	r23,33044
811180ac:	bdf15c04 	addi	r23,r23,-14992
811180b0:	4805883a 	mov	r2,r9
811180b4:	4007883a 	mov	r3,r8
811180b8:	a980004c 	andi	r6,r21,1
811180bc:	1009883a 	mov	r4,r2
811180c0:	a82bd07a 	srai	r21,r21,1
811180c4:	180b883a 	mov	r5,r3
811180c8:	30000426 	beq	r6,zero,811180dc <_dtoa_r+0x438>
811180cc:	b9800017 	ldw	r6,0(r23)
811180d0:	b9c00117 	ldw	r7,4(r23)
811180d4:	84000044 	addi	r16,r16,1
811180d8:	110f3080 	call	8110f308 <__muldf3>
811180dc:	bdc00204 	addi	r23,r23,8
811180e0:	a83ff51e 	bne	r21,zero,811180b8 <__reset+0xfb0f80b8>
811180e4:	1013883a 	mov	r9,r2
811180e8:	1811883a 	mov	r8,r3
811180ec:	480d883a 	mov	r6,r9
811180f0:	400f883a 	mov	r7,r8
811180f4:	8809883a 	mov	r4,r17
811180f8:	a00b883a 	mov	r5,r20
811180fc:	1123e400 	call	81123e40 <__divdf3>
81118100:	d8800f15 	stw	r2,60(sp)
81118104:	d8c01015 	stw	r3,64(sp)
81118108:	d8c00e17 	ldw	r3,56(sp)
8111810c:	18000626 	beq	r3,zero,81118128 <_dtoa_r+0x484>
81118110:	d9000f17 	ldw	r4,60(sp)
81118114:	d9401017 	ldw	r5,64(sp)
81118118:	000d883a 	mov	r6,zero
8111811c:	01cffc34 	movhi	r7,16368
81118120:	11248940 	call	81124894 <__ledf2>
81118124:	10040b16 	blt	r2,zero,81119154 <_dtoa_r+0x14b0>
81118128:	8009883a 	mov	r4,r16
8111812c:	112530c0 	call	8112530c <__floatsidf>
81118130:	d9800f17 	ldw	r6,60(sp)
81118134:	d9c01017 	ldw	r7,64(sp)
81118138:	1009883a 	mov	r4,r2
8111813c:	180b883a 	mov	r5,r3
81118140:	110f3080 	call	8110f308 <__muldf3>
81118144:	000d883a 	mov	r6,zero
81118148:	01d00734 	movhi	r7,16412
8111814c:	1009883a 	mov	r4,r2
81118150:	180b883a 	mov	r5,r3
81118154:	112358c0 	call	8112358c <__adddf3>
81118158:	1021883a 	mov	r16,r2
8111815c:	d8800617 	ldw	r2,24(sp)
81118160:	047f3034 	movhi	r17,64704
81118164:	1c63883a 	add	r17,r3,r17
81118168:	10031826 	beq	r2,zero,81118dcc <_dtoa_r+0x1128>
8111816c:	d8c00517 	ldw	r3,20(sp)
81118170:	db000617 	ldw	r12,24(sp)
81118174:	d8c01315 	stw	r3,76(sp)
81118178:	d9000b17 	ldw	r4,44(sp)
8111817c:	20038f26 	beq	r4,zero,81118fbc <_dtoa_r+0x1318>
81118180:	60bfffc4 	addi	r2,r12,-1
81118184:	100490fa 	slli	r2,r2,3
81118188:	00e04534 	movhi	r3,33044
8111818c:	18f16604 	addi	r3,r3,-14952
81118190:	1885883a 	add	r2,r3,r2
81118194:	11800017 	ldw	r6,0(r2)
81118198:	11c00117 	ldw	r7,4(r2)
8111819c:	d8800717 	ldw	r2,28(sp)
811181a0:	0009883a 	mov	r4,zero
811181a4:	014ff834 	movhi	r5,16352
811181a8:	db001615 	stw	r12,88(sp)
811181ac:	15c00044 	addi	r23,r2,1
811181b0:	1123e400 	call	81123e40 <__divdf3>
811181b4:	800d883a 	mov	r6,r16
811181b8:	880f883a 	mov	r7,r17
811181bc:	1009883a 	mov	r4,r2
811181c0:	180b883a 	mov	r5,r3
811181c4:	11249880 	call	81124988 <__subdf3>
811181c8:	d9401017 	ldw	r5,64(sp)
811181cc:	d9000f17 	ldw	r4,60(sp)
811181d0:	102b883a 	mov	r21,r2
811181d4:	d8c01215 	stw	r3,72(sp)
811181d8:	112528c0 	call	8112528c <__fixdfsi>
811181dc:	1009883a 	mov	r4,r2
811181e0:	1029883a 	mov	r20,r2
811181e4:	112530c0 	call	8112530c <__floatsidf>
811181e8:	d9000f17 	ldw	r4,60(sp)
811181ec:	d9401017 	ldw	r5,64(sp)
811181f0:	100d883a 	mov	r6,r2
811181f4:	180f883a 	mov	r7,r3
811181f8:	11249880 	call	81124988 <__subdf3>
811181fc:	1823883a 	mov	r17,r3
81118200:	d8c00717 	ldw	r3,28(sp)
81118204:	d9401217 	ldw	r5,72(sp)
81118208:	a2000c04 	addi	r8,r20,48
8111820c:	1021883a 	mov	r16,r2
81118210:	1a000005 	stb	r8,0(r3)
81118214:	800d883a 	mov	r6,r16
81118218:	880f883a 	mov	r7,r17
8111821c:	a809883a 	mov	r4,r21
81118220:	4029883a 	mov	r20,r8
81118224:	11247b80 	call	811247b8 <__gedf2>
81118228:	00841d16 	blt	zero,r2,811192a0 <_dtoa_r+0x15fc>
8111822c:	800d883a 	mov	r6,r16
81118230:	880f883a 	mov	r7,r17
81118234:	0009883a 	mov	r4,zero
81118238:	014ffc34 	movhi	r5,16368
8111823c:	11249880 	call	81124988 <__subdf3>
81118240:	d9401217 	ldw	r5,72(sp)
81118244:	100d883a 	mov	r6,r2
81118248:	180f883a 	mov	r7,r3
8111824c:	a809883a 	mov	r4,r21
81118250:	11247b80 	call	811247b8 <__gedf2>
81118254:	db001617 	ldw	r12,88(sp)
81118258:	00840e16 	blt	zero,r2,81119294 <_dtoa_r+0x15f0>
8111825c:	00800044 	movi	r2,1
81118260:	13006b0e 	bge	r2,r12,81118410 <_dtoa_r+0x76c>
81118264:	d9000717 	ldw	r4,28(sp)
81118268:	dd800f15 	stw	r22,60(sp)
8111826c:	dcc01015 	stw	r19,64(sp)
81118270:	2319883a 	add	r12,r4,r12
81118274:	dcc01217 	ldw	r19,72(sp)
81118278:	602d883a 	mov	r22,r12
8111827c:	dc801215 	stw	r18,72(sp)
81118280:	b825883a 	mov	r18,r23
81118284:	00000906 	br	811182ac <_dtoa_r+0x608>
81118288:	11249880 	call	81124988 <__subdf3>
8111828c:	a80d883a 	mov	r6,r21
81118290:	980f883a 	mov	r7,r19
81118294:	1009883a 	mov	r4,r2
81118298:	180b883a 	mov	r5,r3
8111829c:	11248940 	call	81124894 <__ledf2>
811182a0:	1003e816 	blt	r2,zero,81119244 <_dtoa_r+0x15a0>
811182a4:	b825883a 	mov	r18,r23
811182a8:	bd83e926 	beq	r23,r22,81119250 <_dtoa_r+0x15ac>
811182ac:	a809883a 	mov	r4,r21
811182b0:	980b883a 	mov	r5,r19
811182b4:	000d883a 	mov	r6,zero
811182b8:	01d00934 	movhi	r7,16420
811182bc:	110f3080 	call	8110f308 <__muldf3>
811182c0:	000d883a 	mov	r6,zero
811182c4:	01d00934 	movhi	r7,16420
811182c8:	8009883a 	mov	r4,r16
811182cc:	880b883a 	mov	r5,r17
811182d0:	102b883a 	mov	r21,r2
811182d4:	1827883a 	mov	r19,r3
811182d8:	110f3080 	call	8110f308 <__muldf3>
811182dc:	180b883a 	mov	r5,r3
811182e0:	1009883a 	mov	r4,r2
811182e4:	1821883a 	mov	r16,r3
811182e8:	1023883a 	mov	r17,r2
811182ec:	112528c0 	call	8112528c <__fixdfsi>
811182f0:	1009883a 	mov	r4,r2
811182f4:	1029883a 	mov	r20,r2
811182f8:	112530c0 	call	8112530c <__floatsidf>
811182fc:	8809883a 	mov	r4,r17
81118300:	800b883a 	mov	r5,r16
81118304:	100d883a 	mov	r6,r2
81118308:	180f883a 	mov	r7,r3
8111830c:	11249880 	call	81124988 <__subdf3>
81118310:	a5000c04 	addi	r20,r20,48
81118314:	a80d883a 	mov	r6,r21
81118318:	980f883a 	mov	r7,r19
8111831c:	1009883a 	mov	r4,r2
81118320:	180b883a 	mov	r5,r3
81118324:	95000005 	stb	r20,0(r18)
81118328:	1021883a 	mov	r16,r2
8111832c:	1823883a 	mov	r17,r3
81118330:	11248940 	call	81124894 <__ledf2>
81118334:	bdc00044 	addi	r23,r23,1
81118338:	800d883a 	mov	r6,r16
8111833c:	880f883a 	mov	r7,r17
81118340:	0009883a 	mov	r4,zero
81118344:	014ffc34 	movhi	r5,16368
81118348:	103fcf0e 	bge	r2,zero,81118288 <__reset+0xfb0f8288>
8111834c:	d8c01317 	ldw	r3,76(sp)
81118350:	d8c00515 	stw	r3,20(sp)
81118354:	d9400917 	ldw	r5,36(sp)
81118358:	e009883a 	mov	r4,fp
8111835c:	111ae6c0 	call	8111ae6c <_Bfree>
81118360:	d9000517 	ldw	r4,20(sp)
81118364:	d9802317 	ldw	r6,140(sp)
81118368:	d9c02517 	ldw	r7,148(sp)
8111836c:	b8000005 	stb	zero,0(r23)
81118370:	20800044 	addi	r2,r4,1
81118374:	30800015 	stw	r2,0(r6)
81118378:	3802aa26 	beq	r7,zero,81118e24 <_dtoa_r+0x1180>
8111837c:	3dc00015 	stw	r23,0(r7)
81118380:	d8800717 	ldw	r2,28(sp)
81118384:	003e7906 	br	81117d6c <__reset+0xfb0f7d6c>
81118388:	00800434 	movhi	r2,16
8111838c:	10bfffc4 	addi	r2,r2,-1
81118390:	88a2703a 	and	r17,r17,r2
81118394:	883e851e 	bne	r17,zero,81117dac <__reset+0xfb0f7dac>
81118398:	00a04534 	movhi	r2,33044
8111839c:	10b14804 	addi	r2,r2,-15072
811183a0:	003e8406 	br	81117db4 <__reset+0xfb0f7db4>
811183a4:	10c00204 	addi	r3,r2,8
811183a8:	003e8706 	br	81117dc8 <__reset+0xfb0f7dc8>
811183ac:	01400434 	movhi	r5,16
811183b0:	297fffc4 	addi	r5,r5,-1
811183b4:	994a703a 	and	r5,r19,r5
811183b8:	9009883a 	mov	r4,r18
811183bc:	843f0044 	addi	r16,r16,-1023
811183c0:	294ffc34 	orhi	r5,r5,16368
811183c4:	dd800217 	ldw	r22,8(sp)
811183c8:	d8001115 	stw	zero,68(sp)
811183cc:	003ea506 	br	81117e64 <__reset+0xfb0f7e64>
811183d0:	00a04534 	movhi	r2,33044
811183d4:	10b12d04 	addi	r2,r2,-15180
811183d8:	003e6406 	br	81117d6c <__reset+0xfb0f7d6c>
811183dc:	e0001115 	stw	zero,68(fp)
811183e0:	000b883a 	mov	r5,zero
811183e4:	e009883a 	mov	r4,fp
811183e8:	111adbc0 	call	8111adbc <_Balloc>
811183ec:	01bfffc4 	movi	r6,-1
811183f0:	01c00044 	movi	r7,1
811183f4:	d8800715 	stw	r2,28(sp)
811183f8:	d9800c15 	stw	r6,48(sp)
811183fc:	e0801015 	stw	r2,64(fp)
81118400:	d8000315 	stw	zero,12(sp)
81118404:	d9c00b15 	stw	r7,44(sp)
81118408:	d9800615 	stw	r6,24(sp)
8111840c:	d8002215 	stw	zero,136(sp)
81118410:	d8800117 	ldw	r2,4(sp)
81118414:	10008916 	blt	r2,zero,8111863c <_dtoa_r+0x998>
81118418:	d9000517 	ldw	r4,20(sp)
8111841c:	00c00384 	movi	r3,14
81118420:	19008616 	blt	r3,r4,8111863c <_dtoa_r+0x998>
81118424:	200490fa 	slli	r2,r4,3
81118428:	00e04534 	movhi	r3,33044
8111842c:	d9802217 	ldw	r6,136(sp)
81118430:	18f16604 	addi	r3,r3,-14952
81118434:	1885883a 	add	r2,r3,r2
81118438:	14000017 	ldw	r16,0(r2)
8111843c:	14400117 	ldw	r17,4(r2)
81118440:	30016316 	blt	r6,zero,811189d0 <_dtoa_r+0xd2c>
81118444:	800d883a 	mov	r6,r16
81118448:	880f883a 	mov	r7,r17
8111844c:	9009883a 	mov	r4,r18
81118450:	980b883a 	mov	r5,r19
81118454:	1123e400 	call	81123e40 <__divdf3>
81118458:	180b883a 	mov	r5,r3
8111845c:	1009883a 	mov	r4,r2
81118460:	112528c0 	call	8112528c <__fixdfsi>
81118464:	1009883a 	mov	r4,r2
81118468:	102b883a 	mov	r21,r2
8111846c:	112530c0 	call	8112530c <__floatsidf>
81118470:	800d883a 	mov	r6,r16
81118474:	880f883a 	mov	r7,r17
81118478:	1009883a 	mov	r4,r2
8111847c:	180b883a 	mov	r5,r3
81118480:	110f3080 	call	8110f308 <__muldf3>
81118484:	100d883a 	mov	r6,r2
81118488:	180f883a 	mov	r7,r3
8111848c:	9009883a 	mov	r4,r18
81118490:	980b883a 	mov	r5,r19
81118494:	11249880 	call	81124988 <__subdf3>
81118498:	d9c00717 	ldw	r7,28(sp)
8111849c:	1009883a 	mov	r4,r2
811184a0:	a8800c04 	addi	r2,r21,48
811184a4:	38800005 	stb	r2,0(r7)
811184a8:	3dc00044 	addi	r23,r7,1
811184ac:	d9c00617 	ldw	r7,24(sp)
811184b0:	01800044 	movi	r6,1
811184b4:	180b883a 	mov	r5,r3
811184b8:	2005883a 	mov	r2,r4
811184bc:	39803826 	beq	r7,r6,811185a0 <_dtoa_r+0x8fc>
811184c0:	000d883a 	mov	r6,zero
811184c4:	01d00934 	movhi	r7,16420
811184c8:	110f3080 	call	8110f308 <__muldf3>
811184cc:	000d883a 	mov	r6,zero
811184d0:	000f883a 	mov	r7,zero
811184d4:	1009883a 	mov	r4,r2
811184d8:	180b883a 	mov	r5,r3
811184dc:	1025883a 	mov	r18,r2
811184e0:	1827883a 	mov	r19,r3
811184e4:	11247300 	call	81124730 <__eqdf2>
811184e8:	103f9a26 	beq	r2,zero,81118354 <__reset+0xfb0f8354>
811184ec:	d9c00617 	ldw	r7,24(sp)
811184f0:	d8c00717 	ldw	r3,28(sp)
811184f4:	b829883a 	mov	r20,r23
811184f8:	38bfffc4 	addi	r2,r7,-1
811184fc:	18ad883a 	add	r22,r3,r2
81118500:	00000a06 	br	8111852c <_dtoa_r+0x888>
81118504:	110f3080 	call	8110f308 <__muldf3>
81118508:	000d883a 	mov	r6,zero
8111850c:	000f883a 	mov	r7,zero
81118510:	1009883a 	mov	r4,r2
81118514:	180b883a 	mov	r5,r3
81118518:	1025883a 	mov	r18,r2
8111851c:	1827883a 	mov	r19,r3
81118520:	b829883a 	mov	r20,r23
81118524:	11247300 	call	81124730 <__eqdf2>
81118528:	103f8a26 	beq	r2,zero,81118354 <__reset+0xfb0f8354>
8111852c:	800d883a 	mov	r6,r16
81118530:	880f883a 	mov	r7,r17
81118534:	9009883a 	mov	r4,r18
81118538:	980b883a 	mov	r5,r19
8111853c:	1123e400 	call	81123e40 <__divdf3>
81118540:	180b883a 	mov	r5,r3
81118544:	1009883a 	mov	r4,r2
81118548:	112528c0 	call	8112528c <__fixdfsi>
8111854c:	1009883a 	mov	r4,r2
81118550:	102b883a 	mov	r21,r2
81118554:	112530c0 	call	8112530c <__floatsidf>
81118558:	800d883a 	mov	r6,r16
8111855c:	880f883a 	mov	r7,r17
81118560:	1009883a 	mov	r4,r2
81118564:	180b883a 	mov	r5,r3
81118568:	110f3080 	call	8110f308 <__muldf3>
8111856c:	100d883a 	mov	r6,r2
81118570:	180f883a 	mov	r7,r3
81118574:	9009883a 	mov	r4,r18
81118578:	980b883a 	mov	r5,r19
8111857c:	11249880 	call	81124988 <__subdf3>
81118580:	aa000c04 	addi	r8,r21,48
81118584:	a2000005 	stb	r8,0(r20)
81118588:	000d883a 	mov	r6,zero
8111858c:	01d00934 	movhi	r7,16420
81118590:	1009883a 	mov	r4,r2
81118594:	180b883a 	mov	r5,r3
81118598:	a5c00044 	addi	r23,r20,1
8111859c:	b53fd91e 	bne	r22,r20,81118504 <__reset+0xfb0f8504>
811185a0:	100d883a 	mov	r6,r2
811185a4:	180f883a 	mov	r7,r3
811185a8:	1009883a 	mov	r4,r2
811185ac:	180b883a 	mov	r5,r3
811185b0:	112358c0 	call	8112358c <__adddf3>
811185b4:	100d883a 	mov	r6,r2
811185b8:	180f883a 	mov	r7,r3
811185bc:	8009883a 	mov	r4,r16
811185c0:	880b883a 	mov	r5,r17
811185c4:	1027883a 	mov	r19,r2
811185c8:	1825883a 	mov	r18,r3
811185cc:	11248940 	call	81124894 <__ledf2>
811185d0:	10000816 	blt	r2,zero,811185f4 <_dtoa_r+0x950>
811185d4:	980d883a 	mov	r6,r19
811185d8:	900f883a 	mov	r7,r18
811185dc:	8009883a 	mov	r4,r16
811185e0:	880b883a 	mov	r5,r17
811185e4:	11247300 	call	81124730 <__eqdf2>
811185e8:	103f5a1e 	bne	r2,zero,81118354 <__reset+0xfb0f8354>
811185ec:	ad40004c 	andi	r21,r21,1
811185f0:	a83f5826 	beq	r21,zero,81118354 <__reset+0xfb0f8354>
811185f4:	bd3fffc3 	ldbu	r20,-1(r23)
811185f8:	b8bfffc4 	addi	r2,r23,-1
811185fc:	1007883a 	mov	r3,r2
81118600:	01400e44 	movi	r5,57
81118604:	d9800717 	ldw	r6,28(sp)
81118608:	00000506 	br	81118620 <_dtoa_r+0x97c>
8111860c:	18ffffc4 	addi	r3,r3,-1
81118610:	11824726 	beq	r2,r6,81118f30 <_dtoa_r+0x128c>
81118614:	1d000003 	ldbu	r20,0(r3)
81118618:	102f883a 	mov	r23,r2
8111861c:	10bfffc4 	addi	r2,r2,-1
81118620:	a1003fcc 	andi	r4,r20,255
81118624:	2100201c 	xori	r4,r4,128
81118628:	213fe004 	addi	r4,r4,-128
8111862c:	217ff726 	beq	r4,r5,8111860c <__reset+0xfb0f860c>
81118630:	a2000044 	addi	r8,r20,1
81118634:	12000005 	stb	r8,0(r2)
81118638:	003f4606 	br	81118354 <__reset+0xfb0f8354>
8111863c:	d9000b17 	ldw	r4,44(sp)
81118640:	2000c826 	beq	r4,zero,81118964 <_dtoa_r+0xcc0>
81118644:	d9800317 	ldw	r6,12(sp)
81118648:	00c00044 	movi	r3,1
8111864c:	1980f90e 	bge	r3,r6,81118a34 <_dtoa_r+0xd90>
81118650:	d8800617 	ldw	r2,24(sp)
81118654:	d8c00a17 	ldw	r3,40(sp)
81118658:	157fffc4 	addi	r21,r2,-1
8111865c:	1d41f316 	blt	r3,r21,81118e2c <_dtoa_r+0x1188>
81118660:	1d6bc83a 	sub	r21,r3,r21
81118664:	d9c00617 	ldw	r7,24(sp)
81118668:	3802aa16 	blt	r7,zero,81119114 <_dtoa_r+0x1470>
8111866c:	dd000817 	ldw	r20,32(sp)
81118670:	d8800617 	ldw	r2,24(sp)
81118674:	d8c00817 	ldw	r3,32(sp)
81118678:	01400044 	movi	r5,1
8111867c:	e009883a 	mov	r4,fp
81118680:	1887883a 	add	r3,r3,r2
81118684:	d8c00815 	stw	r3,32(sp)
81118688:	b0ad883a 	add	r22,r22,r2
8111868c:	111b1e00 	call	8111b1e0 <__i2b>
81118690:	1023883a 	mov	r17,r2
81118694:	a0000826 	beq	r20,zero,811186b8 <_dtoa_r+0xa14>
81118698:	0580070e 	bge	zero,r22,811186b8 <_dtoa_r+0xa14>
8111869c:	a005883a 	mov	r2,r20
811186a0:	b500b916 	blt	r22,r20,81118988 <_dtoa_r+0xce4>
811186a4:	d9000817 	ldw	r4,32(sp)
811186a8:	a0a9c83a 	sub	r20,r20,r2
811186ac:	b0adc83a 	sub	r22,r22,r2
811186b0:	2089c83a 	sub	r4,r4,r2
811186b4:	d9000815 	stw	r4,32(sp)
811186b8:	d9800a17 	ldw	r6,40(sp)
811186bc:	0181810e 	bge	zero,r6,81118cc4 <_dtoa_r+0x1020>
811186c0:	d9c00b17 	ldw	r7,44(sp)
811186c4:	3800b326 	beq	r7,zero,81118994 <_dtoa_r+0xcf0>
811186c8:	a800b226 	beq	r21,zero,81118994 <_dtoa_r+0xcf0>
811186cc:	880b883a 	mov	r5,r17
811186d0:	a80d883a 	mov	r6,r21
811186d4:	e009883a 	mov	r4,fp
811186d8:	111b4240 	call	8111b424 <__pow5mult>
811186dc:	d9800917 	ldw	r6,36(sp)
811186e0:	100b883a 	mov	r5,r2
811186e4:	e009883a 	mov	r4,fp
811186e8:	1023883a 	mov	r17,r2
811186ec:	111b2240 	call	8111b224 <__multiply>
811186f0:	1021883a 	mov	r16,r2
811186f4:	d8800a17 	ldw	r2,40(sp)
811186f8:	d9400917 	ldw	r5,36(sp)
811186fc:	e009883a 	mov	r4,fp
81118700:	1545c83a 	sub	r2,r2,r21
81118704:	d8800a15 	stw	r2,40(sp)
81118708:	111ae6c0 	call	8111ae6c <_Bfree>
8111870c:	d8c00a17 	ldw	r3,40(sp)
81118710:	18009f1e 	bne	r3,zero,81118990 <_dtoa_r+0xcec>
81118714:	05c00044 	movi	r23,1
81118718:	e009883a 	mov	r4,fp
8111871c:	b80b883a 	mov	r5,r23
81118720:	111b1e00 	call	8111b1e0 <__i2b>
81118724:	d9000d17 	ldw	r4,52(sp)
81118728:	102b883a 	mov	r21,r2
8111872c:	2000ce26 	beq	r4,zero,81118a68 <_dtoa_r+0xdc4>
81118730:	200d883a 	mov	r6,r4
81118734:	100b883a 	mov	r5,r2
81118738:	e009883a 	mov	r4,fp
8111873c:	111b4240 	call	8111b424 <__pow5mult>
81118740:	d9800317 	ldw	r6,12(sp)
81118744:	102b883a 	mov	r21,r2
81118748:	b981810e 	bge	r23,r6,81118d50 <_dtoa_r+0x10ac>
8111874c:	0027883a 	mov	r19,zero
81118750:	a8800417 	ldw	r2,16(r21)
81118754:	05c00804 	movi	r23,32
81118758:	10800104 	addi	r2,r2,4
8111875c:	1085883a 	add	r2,r2,r2
81118760:	1085883a 	add	r2,r2,r2
81118764:	a885883a 	add	r2,r21,r2
81118768:	11000017 	ldw	r4,0(r2)
8111876c:	111b0c80 	call	8111b0c8 <__hi0bits>
81118770:	b885c83a 	sub	r2,r23,r2
81118774:	1585883a 	add	r2,r2,r22
81118778:	108007cc 	andi	r2,r2,31
8111877c:	1000b326 	beq	r2,zero,81118a4c <_dtoa_r+0xda8>
81118780:	00c00804 	movi	r3,32
81118784:	1887c83a 	sub	r3,r3,r2
81118788:	01000104 	movi	r4,4
8111878c:	20c2cd0e 	bge	r4,r3,811192c4 <_dtoa_r+0x1620>
81118790:	00c00704 	movi	r3,28
81118794:	1885c83a 	sub	r2,r3,r2
81118798:	d8c00817 	ldw	r3,32(sp)
8111879c:	a0a9883a 	add	r20,r20,r2
811187a0:	b0ad883a 	add	r22,r22,r2
811187a4:	1887883a 	add	r3,r3,r2
811187a8:	d8c00815 	stw	r3,32(sp)
811187ac:	d9800817 	ldw	r6,32(sp)
811187b0:	0180040e 	bge	zero,r6,811187c4 <_dtoa_r+0xb20>
811187b4:	800b883a 	mov	r5,r16
811187b8:	e009883a 	mov	r4,fp
811187bc:	111b56c0 	call	8111b56c <__lshift>
811187c0:	1021883a 	mov	r16,r2
811187c4:	0580050e 	bge	zero,r22,811187dc <_dtoa_r+0xb38>
811187c8:	a80b883a 	mov	r5,r21
811187cc:	b00d883a 	mov	r6,r22
811187d0:	e009883a 	mov	r4,fp
811187d4:	111b56c0 	call	8111b56c <__lshift>
811187d8:	102b883a 	mov	r21,r2
811187dc:	d9c00e17 	ldw	r7,56(sp)
811187e0:	3801211e 	bne	r7,zero,81118c68 <_dtoa_r+0xfc4>
811187e4:	d9800617 	ldw	r6,24(sp)
811187e8:	0181380e 	bge	zero,r6,81118ccc <_dtoa_r+0x1028>
811187ec:	d8c00b17 	ldw	r3,44(sp)
811187f0:	1800ab1e 	bne	r3,zero,81118aa0 <_dtoa_r+0xdfc>
811187f4:	dc800717 	ldw	r18,28(sp)
811187f8:	dcc00617 	ldw	r19,24(sp)
811187fc:	9029883a 	mov	r20,r18
81118800:	00000206 	br	8111880c <_dtoa_r+0xb68>
81118804:	111ae940 	call	8111ae94 <__multadd>
81118808:	1021883a 	mov	r16,r2
8111880c:	a80b883a 	mov	r5,r21
81118810:	8009883a 	mov	r4,r16
81118814:	1117a9c0 	call	81117a9c <quorem>
81118818:	10800c04 	addi	r2,r2,48
8111881c:	90800005 	stb	r2,0(r18)
81118820:	94800044 	addi	r18,r18,1
81118824:	9507c83a 	sub	r3,r18,r20
81118828:	000f883a 	mov	r7,zero
8111882c:	01800284 	movi	r6,10
81118830:	800b883a 	mov	r5,r16
81118834:	e009883a 	mov	r4,fp
81118838:	1cfff216 	blt	r3,r19,81118804 <__reset+0xfb0f8804>
8111883c:	1011883a 	mov	r8,r2
81118840:	d8800617 	ldw	r2,24(sp)
81118844:	0082370e 	bge	zero,r2,81119124 <_dtoa_r+0x1480>
81118848:	d9000717 	ldw	r4,28(sp)
8111884c:	0025883a 	mov	r18,zero
81118850:	20af883a 	add	r23,r4,r2
81118854:	01800044 	movi	r6,1
81118858:	800b883a 	mov	r5,r16
8111885c:	e009883a 	mov	r4,fp
81118860:	da001715 	stw	r8,92(sp)
81118864:	111b56c0 	call	8111b56c <__lshift>
81118868:	a80b883a 	mov	r5,r21
8111886c:	1009883a 	mov	r4,r2
81118870:	d8800915 	stw	r2,36(sp)
81118874:	111b6bc0 	call	8111b6bc <__mcmp>
81118878:	da001717 	ldw	r8,92(sp)
8111887c:	0081800e 	bge	zero,r2,81118e80 <_dtoa_r+0x11dc>
81118880:	b93fffc3 	ldbu	r4,-1(r23)
81118884:	b8bfffc4 	addi	r2,r23,-1
81118888:	1007883a 	mov	r3,r2
8111888c:	01800e44 	movi	r6,57
81118890:	d9c00717 	ldw	r7,28(sp)
81118894:	00000506 	br	811188ac <_dtoa_r+0xc08>
81118898:	18ffffc4 	addi	r3,r3,-1
8111889c:	11c12326 	beq	r2,r7,81118d2c <_dtoa_r+0x1088>
811188a0:	19000003 	ldbu	r4,0(r3)
811188a4:	102f883a 	mov	r23,r2
811188a8:	10bfffc4 	addi	r2,r2,-1
811188ac:	21403fcc 	andi	r5,r4,255
811188b0:	2940201c 	xori	r5,r5,128
811188b4:	297fe004 	addi	r5,r5,-128
811188b8:	29bff726 	beq	r5,r6,81118898 <__reset+0xfb0f8898>
811188bc:	21000044 	addi	r4,r4,1
811188c0:	11000005 	stb	r4,0(r2)
811188c4:	a80b883a 	mov	r5,r21
811188c8:	e009883a 	mov	r4,fp
811188cc:	111ae6c0 	call	8111ae6c <_Bfree>
811188d0:	883ea026 	beq	r17,zero,81118354 <__reset+0xfb0f8354>
811188d4:	90000426 	beq	r18,zero,811188e8 <_dtoa_r+0xc44>
811188d8:	94400326 	beq	r18,r17,811188e8 <_dtoa_r+0xc44>
811188dc:	900b883a 	mov	r5,r18
811188e0:	e009883a 	mov	r4,fp
811188e4:	111ae6c0 	call	8111ae6c <_Bfree>
811188e8:	880b883a 	mov	r5,r17
811188ec:	e009883a 	mov	r4,fp
811188f0:	111ae6c0 	call	8111ae6c <_Bfree>
811188f4:	003e9706 	br	81118354 <__reset+0xfb0f8354>
811188f8:	01800044 	movi	r6,1
811188fc:	d9800e15 	stw	r6,56(sp)
81118900:	003d9606 	br	81117f5c <__reset+0xfb0f7f5c>
81118904:	d8800817 	ldw	r2,32(sp)
81118908:	d8c00517 	ldw	r3,20(sp)
8111890c:	d8000d15 	stw	zero,52(sp)
81118910:	10c5c83a 	sub	r2,r2,r3
81118914:	00c9c83a 	sub	r4,zero,r3
81118918:	d8800815 	stw	r2,32(sp)
8111891c:	d9000a15 	stw	r4,40(sp)
81118920:	003d9706 	br	81117f80 <__reset+0xfb0f7f80>
81118924:	05adc83a 	sub	r22,zero,r22
81118928:	dd800815 	stw	r22,32(sp)
8111892c:	002d883a 	mov	r22,zero
81118930:	003d8e06 	br	81117f6c <__reset+0xfb0f7f6c>
81118934:	d9000517 	ldw	r4,20(sp)
81118938:	112530c0 	call	8112530c <__floatsidf>
8111893c:	100d883a 	mov	r6,r2
81118940:	180f883a 	mov	r7,r3
81118944:	a009883a 	mov	r4,r20
81118948:	880b883a 	mov	r5,r17
8111894c:	11247300 	call	81124730 <__eqdf2>
81118950:	103d7126 	beq	r2,zero,81117f18 <__reset+0xfb0f7f18>
81118954:	d9c00517 	ldw	r7,20(sp)
81118958:	39ffffc4 	addi	r7,r7,-1
8111895c:	d9c00515 	stw	r7,20(sp)
81118960:	003d6d06 	br	81117f18 <__reset+0xfb0f7f18>
81118964:	dd400a17 	ldw	r21,40(sp)
81118968:	dd000817 	ldw	r20,32(sp)
8111896c:	0023883a 	mov	r17,zero
81118970:	003f4806 	br	81118694 <__reset+0xfb0f8694>
81118974:	10e3c83a 	sub	r17,r2,r3
81118978:	9448983a 	sll	r4,r18,r17
8111897c:	003d3206 	br	81117e48 <__reset+0xfb0f7e48>
81118980:	d8000e15 	stw	zero,56(sp)
81118984:	003d7506 	br	81117f5c <__reset+0xfb0f7f5c>
81118988:	b005883a 	mov	r2,r22
8111898c:	003f4506 	br	811186a4 <__reset+0xfb0f86a4>
81118990:	dc000915 	stw	r16,36(sp)
81118994:	d9800a17 	ldw	r6,40(sp)
81118998:	d9400917 	ldw	r5,36(sp)
8111899c:	e009883a 	mov	r4,fp
811189a0:	111b4240 	call	8111b424 <__pow5mult>
811189a4:	1021883a 	mov	r16,r2
811189a8:	003f5a06 	br	81118714 <__reset+0xfb0f8714>
811189ac:	01c00044 	movi	r7,1
811189b0:	d9c00b15 	stw	r7,44(sp)
811189b4:	d8802217 	ldw	r2,136(sp)
811189b8:	0081280e 	bge	zero,r2,81118e5c <_dtoa_r+0x11b8>
811189bc:	100d883a 	mov	r6,r2
811189c0:	1021883a 	mov	r16,r2
811189c4:	d8800c15 	stw	r2,48(sp)
811189c8:	d8800615 	stw	r2,24(sp)
811189cc:	003d8806 	br	81117ff0 <__reset+0xfb0f7ff0>
811189d0:	d8800617 	ldw	r2,24(sp)
811189d4:	00be9b16 	blt	zero,r2,81118444 <__reset+0xfb0f8444>
811189d8:	10010f1e 	bne	r2,zero,81118e18 <_dtoa_r+0x1174>
811189dc:	880b883a 	mov	r5,r17
811189e0:	000d883a 	mov	r6,zero
811189e4:	01d00534 	movhi	r7,16404
811189e8:	8009883a 	mov	r4,r16
811189ec:	110f3080 	call	8110f308 <__muldf3>
811189f0:	900d883a 	mov	r6,r18
811189f4:	980f883a 	mov	r7,r19
811189f8:	1009883a 	mov	r4,r2
811189fc:	180b883a 	mov	r5,r3
81118a00:	11247b80 	call	811247b8 <__gedf2>
81118a04:	002b883a 	mov	r21,zero
81118a08:	0023883a 	mov	r17,zero
81118a0c:	1000bf16 	blt	r2,zero,81118d0c <_dtoa_r+0x1068>
81118a10:	d9802217 	ldw	r6,136(sp)
81118a14:	ddc00717 	ldw	r23,28(sp)
81118a18:	018c303a 	nor	r6,zero,r6
81118a1c:	d9800515 	stw	r6,20(sp)
81118a20:	a80b883a 	mov	r5,r21
81118a24:	e009883a 	mov	r4,fp
81118a28:	111ae6c0 	call	8111ae6c <_Bfree>
81118a2c:	883e4926 	beq	r17,zero,81118354 <__reset+0xfb0f8354>
81118a30:	003fad06 	br	811188e8 <__reset+0xfb0f88e8>
81118a34:	d9c01117 	ldw	r7,68(sp)
81118a38:	3801bc26 	beq	r7,zero,8111912c <_dtoa_r+0x1488>
81118a3c:	10810cc4 	addi	r2,r2,1075
81118a40:	dd400a17 	ldw	r21,40(sp)
81118a44:	dd000817 	ldw	r20,32(sp)
81118a48:	003f0a06 	br	81118674 <__reset+0xfb0f8674>
81118a4c:	00800704 	movi	r2,28
81118a50:	d9000817 	ldw	r4,32(sp)
81118a54:	a0a9883a 	add	r20,r20,r2
81118a58:	b0ad883a 	add	r22,r22,r2
81118a5c:	2089883a 	add	r4,r4,r2
81118a60:	d9000815 	stw	r4,32(sp)
81118a64:	003f5106 	br	811187ac <__reset+0xfb0f87ac>
81118a68:	d8c00317 	ldw	r3,12(sp)
81118a6c:	b8c1fc0e 	bge	r23,r3,81119260 <_dtoa_r+0x15bc>
81118a70:	0027883a 	mov	r19,zero
81118a74:	b805883a 	mov	r2,r23
81118a78:	003f3e06 	br	81118774 <__reset+0xfb0f8774>
81118a7c:	880b883a 	mov	r5,r17
81118a80:	e009883a 	mov	r4,fp
81118a84:	000f883a 	mov	r7,zero
81118a88:	01800284 	movi	r6,10
81118a8c:	111ae940 	call	8111ae94 <__multadd>
81118a90:	d9000c17 	ldw	r4,48(sp)
81118a94:	1023883a 	mov	r17,r2
81118a98:	0102040e 	bge	zero,r4,811192ac <_dtoa_r+0x1608>
81118a9c:	d9000615 	stw	r4,24(sp)
81118aa0:	0500050e 	bge	zero,r20,81118ab8 <_dtoa_r+0xe14>
81118aa4:	880b883a 	mov	r5,r17
81118aa8:	a00d883a 	mov	r6,r20
81118aac:	e009883a 	mov	r4,fp
81118ab0:	111b56c0 	call	8111b56c <__lshift>
81118ab4:	1023883a 	mov	r17,r2
81118ab8:	9801241e 	bne	r19,zero,81118f4c <_dtoa_r+0x12a8>
81118abc:	8829883a 	mov	r20,r17
81118ac0:	d9000617 	ldw	r4,24(sp)
81118ac4:	dcc00717 	ldw	r19,28(sp)
81118ac8:	9480004c 	andi	r18,r18,1
81118acc:	20bfffc4 	addi	r2,r4,-1
81118ad0:	9885883a 	add	r2,r19,r2
81118ad4:	d8800415 	stw	r2,16(sp)
81118ad8:	dc800615 	stw	r18,24(sp)
81118adc:	a80b883a 	mov	r5,r21
81118ae0:	8009883a 	mov	r4,r16
81118ae4:	1117a9c0 	call	81117a9c <quorem>
81118ae8:	880b883a 	mov	r5,r17
81118aec:	8009883a 	mov	r4,r16
81118af0:	102f883a 	mov	r23,r2
81118af4:	111b6bc0 	call	8111b6bc <__mcmp>
81118af8:	a80b883a 	mov	r5,r21
81118afc:	a00d883a 	mov	r6,r20
81118b00:	e009883a 	mov	r4,fp
81118b04:	102d883a 	mov	r22,r2
81118b08:	111b71c0 	call	8111b71c <__mdiff>
81118b0c:	1007883a 	mov	r3,r2
81118b10:	10800317 	ldw	r2,12(r2)
81118b14:	bc800c04 	addi	r18,r23,48
81118b18:	180b883a 	mov	r5,r3
81118b1c:	10004e1e 	bne	r2,zero,81118c58 <_dtoa_r+0xfb4>
81118b20:	8009883a 	mov	r4,r16
81118b24:	d8c01615 	stw	r3,88(sp)
81118b28:	111b6bc0 	call	8111b6bc <__mcmp>
81118b2c:	d8c01617 	ldw	r3,88(sp)
81118b30:	e009883a 	mov	r4,fp
81118b34:	d8801615 	stw	r2,88(sp)
81118b38:	180b883a 	mov	r5,r3
81118b3c:	111ae6c0 	call	8111ae6c <_Bfree>
81118b40:	d8801617 	ldw	r2,88(sp)
81118b44:	1000041e 	bne	r2,zero,81118b58 <_dtoa_r+0xeb4>
81118b48:	d9800317 	ldw	r6,12(sp)
81118b4c:	3000021e 	bne	r6,zero,81118b58 <_dtoa_r+0xeb4>
81118b50:	d8c00617 	ldw	r3,24(sp)
81118b54:	18003726 	beq	r3,zero,81118c34 <_dtoa_r+0xf90>
81118b58:	b0002016 	blt	r22,zero,81118bdc <_dtoa_r+0xf38>
81118b5c:	b000041e 	bne	r22,zero,81118b70 <_dtoa_r+0xecc>
81118b60:	d9000317 	ldw	r4,12(sp)
81118b64:	2000021e 	bne	r4,zero,81118b70 <_dtoa_r+0xecc>
81118b68:	d8c00617 	ldw	r3,24(sp)
81118b6c:	18001b26 	beq	r3,zero,81118bdc <_dtoa_r+0xf38>
81118b70:	00810716 	blt	zero,r2,81118f90 <_dtoa_r+0x12ec>
81118b74:	d8c00417 	ldw	r3,16(sp)
81118b78:	9d800044 	addi	r22,r19,1
81118b7c:	9c800005 	stb	r18,0(r19)
81118b80:	b02f883a 	mov	r23,r22
81118b84:	98c10626 	beq	r19,r3,81118fa0 <_dtoa_r+0x12fc>
81118b88:	800b883a 	mov	r5,r16
81118b8c:	000f883a 	mov	r7,zero
81118b90:	01800284 	movi	r6,10
81118b94:	e009883a 	mov	r4,fp
81118b98:	111ae940 	call	8111ae94 <__multadd>
81118b9c:	1021883a 	mov	r16,r2
81118ba0:	000f883a 	mov	r7,zero
81118ba4:	01800284 	movi	r6,10
81118ba8:	880b883a 	mov	r5,r17
81118bac:	e009883a 	mov	r4,fp
81118bb0:	8d002526 	beq	r17,r20,81118c48 <_dtoa_r+0xfa4>
81118bb4:	111ae940 	call	8111ae94 <__multadd>
81118bb8:	a00b883a 	mov	r5,r20
81118bbc:	000f883a 	mov	r7,zero
81118bc0:	01800284 	movi	r6,10
81118bc4:	e009883a 	mov	r4,fp
81118bc8:	1023883a 	mov	r17,r2
81118bcc:	111ae940 	call	8111ae94 <__multadd>
81118bd0:	1029883a 	mov	r20,r2
81118bd4:	b027883a 	mov	r19,r22
81118bd8:	003fc006 	br	81118adc <__reset+0xfb0f8adc>
81118bdc:	9011883a 	mov	r8,r18
81118be0:	00800e0e 	bge	zero,r2,81118c1c <_dtoa_r+0xf78>
81118be4:	800b883a 	mov	r5,r16
81118be8:	01800044 	movi	r6,1
81118bec:	e009883a 	mov	r4,fp
81118bf0:	da001715 	stw	r8,92(sp)
81118bf4:	111b56c0 	call	8111b56c <__lshift>
81118bf8:	a80b883a 	mov	r5,r21
81118bfc:	1009883a 	mov	r4,r2
81118c00:	1021883a 	mov	r16,r2
81118c04:	111b6bc0 	call	8111b6bc <__mcmp>
81118c08:	da001717 	ldw	r8,92(sp)
81118c0c:	0081960e 	bge	zero,r2,81119268 <_dtoa_r+0x15c4>
81118c10:	00800e44 	movi	r2,57
81118c14:	40817026 	beq	r8,r2,811191d8 <_dtoa_r+0x1534>
81118c18:	ba000c44 	addi	r8,r23,49
81118c1c:	8825883a 	mov	r18,r17
81118c20:	9dc00044 	addi	r23,r19,1
81118c24:	9a000005 	stb	r8,0(r19)
81118c28:	a023883a 	mov	r17,r20
81118c2c:	dc000915 	stw	r16,36(sp)
81118c30:	003f2406 	br	811188c4 <__reset+0xfb0f88c4>
81118c34:	00800e44 	movi	r2,57
81118c38:	9011883a 	mov	r8,r18
81118c3c:	90816626 	beq	r18,r2,811191d8 <_dtoa_r+0x1534>
81118c40:	05bff516 	blt	zero,r22,81118c18 <__reset+0xfb0f8c18>
81118c44:	003ff506 	br	81118c1c <__reset+0xfb0f8c1c>
81118c48:	111ae940 	call	8111ae94 <__multadd>
81118c4c:	1023883a 	mov	r17,r2
81118c50:	1029883a 	mov	r20,r2
81118c54:	003fdf06 	br	81118bd4 <__reset+0xfb0f8bd4>
81118c58:	e009883a 	mov	r4,fp
81118c5c:	111ae6c0 	call	8111ae6c <_Bfree>
81118c60:	00800044 	movi	r2,1
81118c64:	003fbc06 	br	81118b58 <__reset+0xfb0f8b58>
81118c68:	a80b883a 	mov	r5,r21
81118c6c:	8009883a 	mov	r4,r16
81118c70:	111b6bc0 	call	8111b6bc <__mcmp>
81118c74:	103edb0e 	bge	r2,zero,811187e4 <__reset+0xfb0f87e4>
81118c78:	800b883a 	mov	r5,r16
81118c7c:	000f883a 	mov	r7,zero
81118c80:	01800284 	movi	r6,10
81118c84:	e009883a 	mov	r4,fp
81118c88:	111ae940 	call	8111ae94 <__multadd>
81118c8c:	1021883a 	mov	r16,r2
81118c90:	d8800517 	ldw	r2,20(sp)
81118c94:	d8c00b17 	ldw	r3,44(sp)
81118c98:	10bfffc4 	addi	r2,r2,-1
81118c9c:	d8800515 	stw	r2,20(sp)
81118ca0:	183f761e 	bne	r3,zero,81118a7c <__reset+0xfb0f8a7c>
81118ca4:	d9000c17 	ldw	r4,48(sp)
81118ca8:	0101730e 	bge	zero,r4,81119278 <_dtoa_r+0x15d4>
81118cac:	d9000615 	stw	r4,24(sp)
81118cb0:	003ed006 	br	811187f4 <__reset+0xfb0f87f4>
81118cb4:	00800084 	movi	r2,2
81118cb8:	3081861e 	bne	r6,r2,811192d4 <_dtoa_r+0x1630>
81118cbc:	d8000b15 	stw	zero,44(sp)
81118cc0:	003f3c06 	br	811189b4 <__reset+0xfb0f89b4>
81118cc4:	dc000917 	ldw	r16,36(sp)
81118cc8:	003e9206 	br	81118714 <__reset+0xfb0f8714>
81118ccc:	d9c00317 	ldw	r7,12(sp)
81118cd0:	00800084 	movi	r2,2
81118cd4:	11fec50e 	bge	r2,r7,811187ec <__reset+0xfb0f87ec>
81118cd8:	d9000617 	ldw	r4,24(sp)
81118cdc:	20013c1e 	bne	r4,zero,811191d0 <_dtoa_r+0x152c>
81118ce0:	a80b883a 	mov	r5,r21
81118ce4:	000f883a 	mov	r7,zero
81118ce8:	01800144 	movi	r6,5
81118cec:	e009883a 	mov	r4,fp
81118cf0:	111ae940 	call	8111ae94 <__multadd>
81118cf4:	100b883a 	mov	r5,r2
81118cf8:	8009883a 	mov	r4,r16
81118cfc:	102b883a 	mov	r21,r2
81118d00:	111b6bc0 	call	8111b6bc <__mcmp>
81118d04:	dc000915 	stw	r16,36(sp)
81118d08:	00bf410e 	bge	zero,r2,81118a10 <__reset+0xfb0f8a10>
81118d0c:	d9c00717 	ldw	r7,28(sp)
81118d10:	00800c44 	movi	r2,49
81118d14:	38800005 	stb	r2,0(r7)
81118d18:	d8800517 	ldw	r2,20(sp)
81118d1c:	3dc00044 	addi	r23,r7,1
81118d20:	10800044 	addi	r2,r2,1
81118d24:	d8800515 	stw	r2,20(sp)
81118d28:	003f3d06 	br	81118a20 <__reset+0xfb0f8a20>
81118d2c:	d9800517 	ldw	r6,20(sp)
81118d30:	d9c00717 	ldw	r7,28(sp)
81118d34:	00800c44 	movi	r2,49
81118d38:	31800044 	addi	r6,r6,1
81118d3c:	d9800515 	stw	r6,20(sp)
81118d40:	38800005 	stb	r2,0(r7)
81118d44:	003edf06 	br	811188c4 <__reset+0xfb0f88c4>
81118d48:	d8000b15 	stw	zero,44(sp)
81118d4c:	003c9f06 	br	81117fcc <__reset+0xfb0f7fcc>
81118d50:	903e7e1e 	bne	r18,zero,8111874c <__reset+0xfb0f874c>
81118d54:	00800434 	movhi	r2,16
81118d58:	10bfffc4 	addi	r2,r2,-1
81118d5c:	9884703a 	and	r2,r19,r2
81118d60:	1000ea1e 	bne	r2,zero,8111910c <_dtoa_r+0x1468>
81118d64:	9cdffc2c 	andhi	r19,r19,32752
81118d68:	9800e826 	beq	r19,zero,8111910c <_dtoa_r+0x1468>
81118d6c:	d9c00817 	ldw	r7,32(sp)
81118d70:	b5800044 	addi	r22,r22,1
81118d74:	04c00044 	movi	r19,1
81118d78:	39c00044 	addi	r7,r7,1
81118d7c:	d9c00815 	stw	r7,32(sp)
81118d80:	d8800d17 	ldw	r2,52(sp)
81118d84:	103e721e 	bne	r2,zero,81118750 <__reset+0xfb0f8750>
81118d88:	00800044 	movi	r2,1
81118d8c:	003e7906 	br	81118774 <__reset+0xfb0f8774>
81118d90:	8009883a 	mov	r4,r16
81118d94:	112530c0 	call	8112530c <__floatsidf>
81118d98:	d9800f17 	ldw	r6,60(sp)
81118d9c:	d9c01017 	ldw	r7,64(sp)
81118da0:	1009883a 	mov	r4,r2
81118da4:	180b883a 	mov	r5,r3
81118da8:	110f3080 	call	8110f308 <__muldf3>
81118dac:	000d883a 	mov	r6,zero
81118db0:	01d00734 	movhi	r7,16412
81118db4:	1009883a 	mov	r4,r2
81118db8:	180b883a 	mov	r5,r3
81118dbc:	112358c0 	call	8112358c <__adddf3>
81118dc0:	047f3034 	movhi	r17,64704
81118dc4:	1021883a 	mov	r16,r2
81118dc8:	1c63883a 	add	r17,r3,r17
81118dcc:	d9000f17 	ldw	r4,60(sp)
81118dd0:	d9401017 	ldw	r5,64(sp)
81118dd4:	000d883a 	mov	r6,zero
81118dd8:	01d00534 	movhi	r7,16404
81118ddc:	11249880 	call	81124988 <__subdf3>
81118de0:	800d883a 	mov	r6,r16
81118de4:	880f883a 	mov	r7,r17
81118de8:	1009883a 	mov	r4,r2
81118dec:	180b883a 	mov	r5,r3
81118df0:	102b883a 	mov	r21,r2
81118df4:	1829883a 	mov	r20,r3
81118df8:	11247b80 	call	811247b8 <__gedf2>
81118dfc:	00806c16 	blt	zero,r2,81118fb0 <_dtoa_r+0x130c>
81118e00:	89e0003c 	xorhi	r7,r17,32768
81118e04:	800d883a 	mov	r6,r16
81118e08:	a809883a 	mov	r4,r21
81118e0c:	a00b883a 	mov	r5,r20
81118e10:	11248940 	call	81124894 <__ledf2>
81118e14:	103d7e0e 	bge	r2,zero,81118410 <__reset+0xfb0f8410>
81118e18:	002b883a 	mov	r21,zero
81118e1c:	0023883a 	mov	r17,zero
81118e20:	003efb06 	br	81118a10 <__reset+0xfb0f8a10>
81118e24:	d8800717 	ldw	r2,28(sp)
81118e28:	003bd006 	br	81117d6c <__reset+0xfb0f7d6c>
81118e2c:	d9000a17 	ldw	r4,40(sp)
81118e30:	d9800d17 	ldw	r6,52(sp)
81118e34:	dd400a15 	stw	r21,40(sp)
81118e38:	a905c83a 	sub	r2,r21,r4
81118e3c:	308d883a 	add	r6,r6,r2
81118e40:	d9800d15 	stw	r6,52(sp)
81118e44:	002b883a 	mov	r21,zero
81118e48:	003e0606 	br	81118664 <__reset+0xfb0f8664>
81118e4c:	9023883a 	mov	r17,r18
81118e50:	9829883a 	mov	r20,r19
81118e54:	04000084 	movi	r16,2
81118e58:	003c9206 	br	811180a4 <__reset+0xfb0f80a4>
81118e5c:	04000044 	movi	r16,1
81118e60:	dc000c15 	stw	r16,48(sp)
81118e64:	dc000615 	stw	r16,24(sp)
81118e68:	dc002215 	stw	r16,136(sp)
81118e6c:	e0001115 	stw	zero,68(fp)
81118e70:	000b883a 	mov	r5,zero
81118e74:	003c6906 	br	8111801c <__reset+0xfb0f801c>
81118e78:	3021883a 	mov	r16,r6
81118e7c:	003ffb06 	br	81118e6c <__reset+0xfb0f8e6c>
81118e80:	1000021e 	bne	r2,zero,81118e8c <_dtoa_r+0x11e8>
81118e84:	4200004c 	andi	r8,r8,1
81118e88:	403e7d1e 	bne	r8,zero,81118880 <__reset+0xfb0f8880>
81118e8c:	01000c04 	movi	r4,48
81118e90:	00000106 	br	81118e98 <_dtoa_r+0x11f4>
81118e94:	102f883a 	mov	r23,r2
81118e98:	b8bfffc4 	addi	r2,r23,-1
81118e9c:	10c00007 	ldb	r3,0(r2)
81118ea0:	193ffc26 	beq	r3,r4,81118e94 <__reset+0xfb0f8e94>
81118ea4:	003e8706 	br	811188c4 <__reset+0xfb0f88c4>
81118ea8:	d8800517 	ldw	r2,20(sp)
81118eac:	00a3c83a 	sub	r17,zero,r2
81118eb0:	8800a426 	beq	r17,zero,81119144 <_dtoa_r+0x14a0>
81118eb4:	888003cc 	andi	r2,r17,15
81118eb8:	100490fa 	slli	r2,r2,3
81118ebc:	00e04534 	movhi	r3,33044
81118ec0:	18f16604 	addi	r3,r3,-14952
81118ec4:	1885883a 	add	r2,r3,r2
81118ec8:	11800017 	ldw	r6,0(r2)
81118ecc:	11c00117 	ldw	r7,4(r2)
81118ed0:	9009883a 	mov	r4,r18
81118ed4:	980b883a 	mov	r5,r19
81118ed8:	8823d13a 	srai	r17,r17,4
81118edc:	110f3080 	call	8110f308 <__muldf3>
81118ee0:	d8800f15 	stw	r2,60(sp)
81118ee4:	d8c01015 	stw	r3,64(sp)
81118ee8:	8800e826 	beq	r17,zero,8111928c <_dtoa_r+0x15e8>
81118eec:	05204534 	movhi	r20,33044
81118ef0:	a5315c04 	addi	r20,r20,-14992
81118ef4:	04000084 	movi	r16,2
81118ef8:	8980004c 	andi	r6,r17,1
81118efc:	1009883a 	mov	r4,r2
81118f00:	8823d07a 	srai	r17,r17,1
81118f04:	180b883a 	mov	r5,r3
81118f08:	30000426 	beq	r6,zero,81118f1c <_dtoa_r+0x1278>
81118f0c:	a1800017 	ldw	r6,0(r20)
81118f10:	a1c00117 	ldw	r7,4(r20)
81118f14:	84000044 	addi	r16,r16,1
81118f18:	110f3080 	call	8110f308 <__muldf3>
81118f1c:	a5000204 	addi	r20,r20,8
81118f20:	883ff51e 	bne	r17,zero,81118ef8 <__reset+0xfb0f8ef8>
81118f24:	d8800f15 	stw	r2,60(sp)
81118f28:	d8c01015 	stw	r3,64(sp)
81118f2c:	003c7606 	br	81118108 <__reset+0xfb0f8108>
81118f30:	00c00c04 	movi	r3,48
81118f34:	10c00005 	stb	r3,0(r2)
81118f38:	d8c00517 	ldw	r3,20(sp)
81118f3c:	bd3fffc3 	ldbu	r20,-1(r23)
81118f40:	18c00044 	addi	r3,r3,1
81118f44:	d8c00515 	stw	r3,20(sp)
81118f48:	003db906 	br	81118630 <__reset+0xfb0f8630>
81118f4c:	89400117 	ldw	r5,4(r17)
81118f50:	e009883a 	mov	r4,fp
81118f54:	111adbc0 	call	8111adbc <_Balloc>
81118f58:	89800417 	ldw	r6,16(r17)
81118f5c:	89400304 	addi	r5,r17,12
81118f60:	11000304 	addi	r4,r2,12
81118f64:	31800084 	addi	r6,r6,2
81118f68:	318d883a 	add	r6,r6,r6
81118f6c:	318d883a 	add	r6,r6,r6
81118f70:	1027883a 	mov	r19,r2
81118f74:	1110ea80 	call	81110ea8 <memcpy>
81118f78:	01800044 	movi	r6,1
81118f7c:	980b883a 	mov	r5,r19
81118f80:	e009883a 	mov	r4,fp
81118f84:	111b56c0 	call	8111b56c <__lshift>
81118f88:	1029883a 	mov	r20,r2
81118f8c:	003ecc06 	br	81118ac0 <__reset+0xfb0f8ac0>
81118f90:	00800e44 	movi	r2,57
81118f94:	90809026 	beq	r18,r2,811191d8 <_dtoa_r+0x1534>
81118f98:	92000044 	addi	r8,r18,1
81118f9c:	003f1f06 	br	81118c1c <__reset+0xfb0f8c1c>
81118fa0:	9011883a 	mov	r8,r18
81118fa4:	8825883a 	mov	r18,r17
81118fa8:	a023883a 	mov	r17,r20
81118fac:	003e2906 	br	81118854 <__reset+0xfb0f8854>
81118fb0:	002b883a 	mov	r21,zero
81118fb4:	0023883a 	mov	r17,zero
81118fb8:	003f5406 	br	81118d0c <__reset+0xfb0f8d0c>
81118fbc:	61bfffc4 	addi	r6,r12,-1
81118fc0:	300490fa 	slli	r2,r6,3
81118fc4:	00e04534 	movhi	r3,33044
81118fc8:	18f16604 	addi	r3,r3,-14952
81118fcc:	1885883a 	add	r2,r3,r2
81118fd0:	11000017 	ldw	r4,0(r2)
81118fd4:	11400117 	ldw	r5,4(r2)
81118fd8:	d8800717 	ldw	r2,28(sp)
81118fdc:	880f883a 	mov	r7,r17
81118fe0:	d9801215 	stw	r6,72(sp)
81118fe4:	800d883a 	mov	r6,r16
81118fe8:	db001615 	stw	r12,88(sp)
81118fec:	15c00044 	addi	r23,r2,1
81118ff0:	110f3080 	call	8110f308 <__muldf3>
81118ff4:	d9401017 	ldw	r5,64(sp)
81118ff8:	d9000f17 	ldw	r4,60(sp)
81118ffc:	d8c01515 	stw	r3,84(sp)
81119000:	d8801415 	stw	r2,80(sp)
81119004:	112528c0 	call	8112528c <__fixdfsi>
81119008:	1009883a 	mov	r4,r2
8111900c:	1021883a 	mov	r16,r2
81119010:	112530c0 	call	8112530c <__floatsidf>
81119014:	d9000f17 	ldw	r4,60(sp)
81119018:	d9401017 	ldw	r5,64(sp)
8111901c:	100d883a 	mov	r6,r2
81119020:	180f883a 	mov	r7,r3
81119024:	11249880 	call	81124988 <__subdf3>
81119028:	1829883a 	mov	r20,r3
8111902c:	d8c00717 	ldw	r3,28(sp)
81119030:	84000c04 	addi	r16,r16,48
81119034:	1023883a 	mov	r17,r2
81119038:	1c000005 	stb	r16,0(r3)
8111903c:	db001617 	ldw	r12,88(sp)
81119040:	00800044 	movi	r2,1
81119044:	60802226 	beq	r12,r2,811190d0 <_dtoa_r+0x142c>
81119048:	d9c00717 	ldw	r7,28(sp)
8111904c:	8805883a 	mov	r2,r17
81119050:	b82b883a 	mov	r21,r23
81119054:	3b19883a 	add	r12,r7,r12
81119058:	6023883a 	mov	r17,r12
8111905c:	a007883a 	mov	r3,r20
81119060:	dc800f15 	stw	r18,60(sp)
81119064:	000d883a 	mov	r6,zero
81119068:	01d00934 	movhi	r7,16420
8111906c:	1009883a 	mov	r4,r2
81119070:	180b883a 	mov	r5,r3
81119074:	110f3080 	call	8110f308 <__muldf3>
81119078:	180b883a 	mov	r5,r3
8111907c:	1009883a 	mov	r4,r2
81119080:	1829883a 	mov	r20,r3
81119084:	1025883a 	mov	r18,r2
81119088:	112528c0 	call	8112528c <__fixdfsi>
8111908c:	1009883a 	mov	r4,r2
81119090:	1021883a 	mov	r16,r2
81119094:	112530c0 	call	8112530c <__floatsidf>
81119098:	100d883a 	mov	r6,r2
8111909c:	180f883a 	mov	r7,r3
811190a0:	9009883a 	mov	r4,r18
811190a4:	a00b883a 	mov	r5,r20
811190a8:	84000c04 	addi	r16,r16,48
811190ac:	11249880 	call	81124988 <__subdf3>
811190b0:	ad400044 	addi	r21,r21,1
811190b4:	ac3fffc5 	stb	r16,-1(r21)
811190b8:	ac7fea1e 	bne	r21,r17,81119064 <__reset+0xfb0f9064>
811190bc:	1023883a 	mov	r17,r2
811190c0:	d8801217 	ldw	r2,72(sp)
811190c4:	dc800f17 	ldw	r18,60(sp)
811190c8:	1829883a 	mov	r20,r3
811190cc:	b8af883a 	add	r23,r23,r2
811190d0:	d9001417 	ldw	r4,80(sp)
811190d4:	d9401517 	ldw	r5,84(sp)
811190d8:	000d883a 	mov	r6,zero
811190dc:	01cff834 	movhi	r7,16352
811190e0:	112358c0 	call	8112358c <__adddf3>
811190e4:	880d883a 	mov	r6,r17
811190e8:	a00f883a 	mov	r7,r20
811190ec:	1009883a 	mov	r4,r2
811190f0:	180b883a 	mov	r5,r3
811190f4:	11248940 	call	81124894 <__ledf2>
811190f8:	10003e0e 	bge	r2,zero,811191f4 <_dtoa_r+0x1550>
811190fc:	d9001317 	ldw	r4,76(sp)
81119100:	bd3fffc3 	ldbu	r20,-1(r23)
81119104:	d9000515 	stw	r4,20(sp)
81119108:	003d3b06 	br	811185f8 <__reset+0xfb0f85f8>
8111910c:	0027883a 	mov	r19,zero
81119110:	003f1b06 	br	81118d80 <__reset+0xfb0f8d80>
81119114:	d8800817 	ldw	r2,32(sp)
81119118:	11e9c83a 	sub	r20,r2,r7
8111911c:	0005883a 	mov	r2,zero
81119120:	003d5406 	br	81118674 <__reset+0xfb0f8674>
81119124:	00800044 	movi	r2,1
81119128:	003dc706 	br	81118848 <__reset+0xfb0f8848>
8111912c:	d8c00217 	ldw	r3,8(sp)
81119130:	00800d84 	movi	r2,54
81119134:	dd400a17 	ldw	r21,40(sp)
81119138:	10c5c83a 	sub	r2,r2,r3
8111913c:	dd000817 	ldw	r20,32(sp)
81119140:	003d4c06 	br	81118674 <__reset+0xfb0f8674>
81119144:	dc800f15 	stw	r18,60(sp)
81119148:	dcc01015 	stw	r19,64(sp)
8111914c:	04000084 	movi	r16,2
81119150:	003bed06 	br	81118108 <__reset+0xfb0f8108>
81119154:	d9000617 	ldw	r4,24(sp)
81119158:	203f0d26 	beq	r4,zero,81118d90 <__reset+0xfb0f8d90>
8111915c:	d9800c17 	ldw	r6,48(sp)
81119160:	01bcab0e 	bge	zero,r6,81118410 <__reset+0xfb0f8410>
81119164:	d9401017 	ldw	r5,64(sp)
81119168:	d9000f17 	ldw	r4,60(sp)
8111916c:	000d883a 	mov	r6,zero
81119170:	01d00934 	movhi	r7,16420
81119174:	110f3080 	call	8110f308 <__muldf3>
81119178:	81000044 	addi	r4,r16,1
8111917c:	d8800f15 	stw	r2,60(sp)
81119180:	d8c01015 	stw	r3,64(sp)
81119184:	112530c0 	call	8112530c <__floatsidf>
81119188:	d9800f17 	ldw	r6,60(sp)
8111918c:	d9c01017 	ldw	r7,64(sp)
81119190:	1009883a 	mov	r4,r2
81119194:	180b883a 	mov	r5,r3
81119198:	110f3080 	call	8110f308 <__muldf3>
8111919c:	01d00734 	movhi	r7,16412
811191a0:	000d883a 	mov	r6,zero
811191a4:	1009883a 	mov	r4,r2
811191a8:	180b883a 	mov	r5,r3
811191ac:	112358c0 	call	8112358c <__adddf3>
811191b0:	d9c00517 	ldw	r7,20(sp)
811191b4:	047f3034 	movhi	r17,64704
811191b8:	1021883a 	mov	r16,r2
811191bc:	39ffffc4 	addi	r7,r7,-1
811191c0:	d9c01315 	stw	r7,76(sp)
811191c4:	1c63883a 	add	r17,r3,r17
811191c8:	db000c17 	ldw	r12,48(sp)
811191cc:	003bea06 	br	81118178 <__reset+0xfb0f8178>
811191d0:	dc000915 	stw	r16,36(sp)
811191d4:	003e0e06 	br	81118a10 <__reset+0xfb0f8a10>
811191d8:	01000e44 	movi	r4,57
811191dc:	8825883a 	mov	r18,r17
811191e0:	9dc00044 	addi	r23,r19,1
811191e4:	99000005 	stb	r4,0(r19)
811191e8:	a023883a 	mov	r17,r20
811191ec:	dc000915 	stw	r16,36(sp)
811191f0:	003da406 	br	81118884 <__reset+0xfb0f8884>
811191f4:	d9801417 	ldw	r6,80(sp)
811191f8:	d9c01517 	ldw	r7,84(sp)
811191fc:	0009883a 	mov	r4,zero
81119200:	014ff834 	movhi	r5,16352
81119204:	11249880 	call	81124988 <__subdf3>
81119208:	880d883a 	mov	r6,r17
8111920c:	a00f883a 	mov	r7,r20
81119210:	1009883a 	mov	r4,r2
81119214:	180b883a 	mov	r5,r3
81119218:	11247b80 	call	811247b8 <__gedf2>
8111921c:	00bc7c0e 	bge	zero,r2,81118410 <__reset+0xfb0f8410>
81119220:	01000c04 	movi	r4,48
81119224:	00000106 	br	8111922c <_dtoa_r+0x1588>
81119228:	102f883a 	mov	r23,r2
8111922c:	b8bfffc4 	addi	r2,r23,-1
81119230:	10c00007 	ldb	r3,0(r2)
81119234:	193ffc26 	beq	r3,r4,81119228 <__reset+0xfb0f9228>
81119238:	d9801317 	ldw	r6,76(sp)
8111923c:	d9800515 	stw	r6,20(sp)
81119240:	003c4406 	br	81118354 <__reset+0xfb0f8354>
81119244:	d9801317 	ldw	r6,76(sp)
81119248:	d9800515 	stw	r6,20(sp)
8111924c:	003cea06 	br	811185f8 <__reset+0xfb0f85f8>
81119250:	dd800f17 	ldw	r22,60(sp)
81119254:	dcc01017 	ldw	r19,64(sp)
81119258:	dc801217 	ldw	r18,72(sp)
8111925c:	003c6c06 	br	81118410 <__reset+0xfb0f8410>
81119260:	903e031e 	bne	r18,zero,81118a70 <__reset+0xfb0f8a70>
81119264:	003ebb06 	br	81118d54 <__reset+0xfb0f8d54>
81119268:	103e6c1e 	bne	r2,zero,81118c1c <__reset+0xfb0f8c1c>
8111926c:	4080004c 	andi	r2,r8,1
81119270:	103e6a26 	beq	r2,zero,81118c1c <__reset+0xfb0f8c1c>
81119274:	003e6606 	br	81118c10 <__reset+0xfb0f8c10>
81119278:	d8c00317 	ldw	r3,12(sp)
8111927c:	00800084 	movi	r2,2
81119280:	10c02916 	blt	r2,r3,81119328 <_dtoa_r+0x1684>
81119284:	d9000c17 	ldw	r4,48(sp)
81119288:	003e8806 	br	81118cac <__reset+0xfb0f8cac>
8111928c:	04000084 	movi	r16,2
81119290:	003b9d06 	br	81118108 <__reset+0xfb0f8108>
81119294:	d9001317 	ldw	r4,76(sp)
81119298:	d9000515 	stw	r4,20(sp)
8111929c:	003cd606 	br	811185f8 <__reset+0xfb0f85f8>
811192a0:	d8801317 	ldw	r2,76(sp)
811192a4:	d8800515 	stw	r2,20(sp)
811192a8:	003c2a06 	br	81118354 <__reset+0xfb0f8354>
811192ac:	d9800317 	ldw	r6,12(sp)
811192b0:	00800084 	movi	r2,2
811192b4:	11801516 	blt	r2,r6,8111930c <_dtoa_r+0x1668>
811192b8:	d9c00c17 	ldw	r7,48(sp)
811192bc:	d9c00615 	stw	r7,24(sp)
811192c0:	003df706 	br	81118aa0 <__reset+0xfb0f8aa0>
811192c4:	193d3926 	beq	r3,r4,811187ac <__reset+0xfb0f87ac>
811192c8:	00c00f04 	movi	r3,60
811192cc:	1885c83a 	sub	r2,r3,r2
811192d0:	003ddf06 	br	81118a50 <__reset+0xfb0f8a50>
811192d4:	e009883a 	mov	r4,fp
811192d8:	e0001115 	stw	zero,68(fp)
811192dc:	000b883a 	mov	r5,zero
811192e0:	111adbc0 	call	8111adbc <_Balloc>
811192e4:	d8800715 	stw	r2,28(sp)
811192e8:	d8c00717 	ldw	r3,28(sp)
811192ec:	00bfffc4 	movi	r2,-1
811192f0:	01000044 	movi	r4,1
811192f4:	d8800c15 	stw	r2,48(sp)
811192f8:	e0c01015 	stw	r3,64(fp)
811192fc:	d9000b15 	stw	r4,44(sp)
81119300:	d8800615 	stw	r2,24(sp)
81119304:	d8002215 	stw	zero,136(sp)
81119308:	003c4106 	br	81118410 <__reset+0xfb0f8410>
8111930c:	d8c00c17 	ldw	r3,48(sp)
81119310:	d8c00615 	stw	r3,24(sp)
81119314:	003e7006 	br	81118cd8 <__reset+0xfb0f8cd8>
81119318:	04400044 	movi	r17,1
8111931c:	003b2006 	br	81117fa0 <__reset+0xfb0f7fa0>
81119320:	000b883a 	mov	r5,zero
81119324:	003b3d06 	br	8111801c <__reset+0xfb0f801c>
81119328:	d8800c17 	ldw	r2,48(sp)
8111932c:	d8800615 	stw	r2,24(sp)
81119330:	003e6906 	br	81118cd8 <__reset+0xfb0f8cd8>

81119334 <__sflush_r>:
81119334:	defffb04 	addi	sp,sp,-20
81119338:	de00012e 	bgeu	sp,et,81119340 <__sflush_r+0xc>
8111933c:	003b68fa 	trap	3
81119340:	2880030b 	ldhu	r2,12(r5)
81119344:	dcc00315 	stw	r19,12(sp)
81119348:	dc400115 	stw	r17,4(sp)
8111934c:	dfc00415 	stw	ra,16(sp)
81119350:	dc800215 	stw	r18,8(sp)
81119354:	dc000015 	stw	r16,0(sp)
81119358:	10c0020c 	andi	r3,r2,8
8111935c:	2823883a 	mov	r17,r5
81119360:	2027883a 	mov	r19,r4
81119364:	1800311e 	bne	r3,zero,8111942c <__sflush_r+0xf8>
81119368:	28c00117 	ldw	r3,4(r5)
8111936c:	10820014 	ori	r2,r2,2048
81119370:	2880030d 	sth	r2,12(r5)
81119374:	00c04b0e 	bge	zero,r3,811194a4 <__sflush_r+0x170>
81119378:	8a000a17 	ldw	r8,40(r17)
8111937c:	40002326 	beq	r8,zero,8111940c <__sflush_r+0xd8>
81119380:	9c000017 	ldw	r16,0(r19)
81119384:	10c4000c 	andi	r3,r2,4096
81119388:	98000015 	stw	zero,0(r19)
8111938c:	18004826 	beq	r3,zero,811194b0 <__sflush_r+0x17c>
81119390:	89801417 	ldw	r6,80(r17)
81119394:	10c0010c 	andi	r3,r2,4
81119398:	18000626 	beq	r3,zero,811193b4 <__sflush_r+0x80>
8111939c:	88c00117 	ldw	r3,4(r17)
811193a0:	88800c17 	ldw	r2,48(r17)
811193a4:	30cdc83a 	sub	r6,r6,r3
811193a8:	10000226 	beq	r2,zero,811193b4 <__sflush_r+0x80>
811193ac:	88800f17 	ldw	r2,60(r17)
811193b0:	308dc83a 	sub	r6,r6,r2
811193b4:	89400717 	ldw	r5,28(r17)
811193b8:	000f883a 	mov	r7,zero
811193bc:	9809883a 	mov	r4,r19
811193c0:	403ee83a 	callr	r8
811193c4:	00ffffc4 	movi	r3,-1
811193c8:	10c04426 	beq	r2,r3,811194dc <__sflush_r+0x1a8>
811193cc:	88c0030b 	ldhu	r3,12(r17)
811193d0:	89000417 	ldw	r4,16(r17)
811193d4:	88000115 	stw	zero,4(r17)
811193d8:	197dffcc 	andi	r5,r3,63487
811193dc:	8940030d 	sth	r5,12(r17)
811193e0:	89000015 	stw	r4,0(r17)
811193e4:	18c4000c 	andi	r3,r3,4096
811193e8:	18002c1e 	bne	r3,zero,8111949c <__sflush_r+0x168>
811193ec:	89400c17 	ldw	r5,48(r17)
811193f0:	9c000015 	stw	r16,0(r19)
811193f4:	28000526 	beq	r5,zero,8111940c <__sflush_r+0xd8>
811193f8:	88801004 	addi	r2,r17,64
811193fc:	28800226 	beq	r5,r2,81119408 <__sflush_r+0xd4>
81119400:	9809883a 	mov	r4,r19
81119404:	1119dec0 	call	81119dec <_free_r>
81119408:	88000c15 	stw	zero,48(r17)
8111940c:	0005883a 	mov	r2,zero
81119410:	dfc00417 	ldw	ra,16(sp)
81119414:	dcc00317 	ldw	r19,12(sp)
81119418:	dc800217 	ldw	r18,8(sp)
8111941c:	dc400117 	ldw	r17,4(sp)
81119420:	dc000017 	ldw	r16,0(sp)
81119424:	dec00504 	addi	sp,sp,20
81119428:	f800283a 	ret
8111942c:	2c800417 	ldw	r18,16(r5)
81119430:	903ff626 	beq	r18,zero,8111940c <__reset+0xfb0f940c>
81119434:	2c000017 	ldw	r16,0(r5)
81119438:	108000cc 	andi	r2,r2,3
8111943c:	2c800015 	stw	r18,0(r5)
81119440:	84a1c83a 	sub	r16,r16,r18
81119444:	1000131e 	bne	r2,zero,81119494 <__sflush_r+0x160>
81119448:	28800517 	ldw	r2,20(r5)
8111944c:	88800215 	stw	r2,8(r17)
81119450:	04000316 	blt	zero,r16,81119460 <__sflush_r+0x12c>
81119454:	003fed06 	br	8111940c <__reset+0xfb0f940c>
81119458:	90a5883a 	add	r18,r18,r2
8111945c:	043feb0e 	bge	zero,r16,8111940c <__reset+0xfb0f940c>
81119460:	88800917 	ldw	r2,36(r17)
81119464:	89400717 	ldw	r5,28(r17)
81119468:	800f883a 	mov	r7,r16
8111946c:	900d883a 	mov	r6,r18
81119470:	9809883a 	mov	r4,r19
81119474:	103ee83a 	callr	r2
81119478:	80a1c83a 	sub	r16,r16,r2
8111947c:	00bff616 	blt	zero,r2,81119458 <__reset+0xfb0f9458>
81119480:	88c0030b 	ldhu	r3,12(r17)
81119484:	00bfffc4 	movi	r2,-1
81119488:	18c01014 	ori	r3,r3,64
8111948c:	88c0030d 	sth	r3,12(r17)
81119490:	003fdf06 	br	81119410 <__reset+0xfb0f9410>
81119494:	0005883a 	mov	r2,zero
81119498:	003fec06 	br	8111944c <__reset+0xfb0f944c>
8111949c:	88801415 	stw	r2,80(r17)
811194a0:	003fd206 	br	811193ec <__reset+0xfb0f93ec>
811194a4:	28c00f17 	ldw	r3,60(r5)
811194a8:	00ffb316 	blt	zero,r3,81119378 <__reset+0xfb0f9378>
811194ac:	003fd706 	br	8111940c <__reset+0xfb0f940c>
811194b0:	89400717 	ldw	r5,28(r17)
811194b4:	000d883a 	mov	r6,zero
811194b8:	01c00044 	movi	r7,1
811194bc:	9809883a 	mov	r4,r19
811194c0:	403ee83a 	callr	r8
811194c4:	100d883a 	mov	r6,r2
811194c8:	00bfffc4 	movi	r2,-1
811194cc:	30801426 	beq	r6,r2,81119520 <__sflush_r+0x1ec>
811194d0:	8880030b 	ldhu	r2,12(r17)
811194d4:	8a000a17 	ldw	r8,40(r17)
811194d8:	003fae06 	br	81119394 <__reset+0xfb0f9394>
811194dc:	98c00017 	ldw	r3,0(r19)
811194e0:	183fba26 	beq	r3,zero,811193cc <__reset+0xfb0f93cc>
811194e4:	01000744 	movi	r4,29
811194e8:	19000626 	beq	r3,r4,81119504 <__sflush_r+0x1d0>
811194ec:	01000584 	movi	r4,22
811194f0:	19000426 	beq	r3,r4,81119504 <__sflush_r+0x1d0>
811194f4:	88c0030b 	ldhu	r3,12(r17)
811194f8:	18c01014 	ori	r3,r3,64
811194fc:	88c0030d 	sth	r3,12(r17)
81119500:	003fc306 	br	81119410 <__reset+0xfb0f9410>
81119504:	8880030b 	ldhu	r2,12(r17)
81119508:	88c00417 	ldw	r3,16(r17)
8111950c:	88000115 	stw	zero,4(r17)
81119510:	10bdffcc 	andi	r2,r2,63487
81119514:	8880030d 	sth	r2,12(r17)
81119518:	88c00015 	stw	r3,0(r17)
8111951c:	003fb306 	br	811193ec <__reset+0xfb0f93ec>
81119520:	98800017 	ldw	r2,0(r19)
81119524:	103fea26 	beq	r2,zero,811194d0 <__reset+0xfb0f94d0>
81119528:	00c00744 	movi	r3,29
8111952c:	10c00226 	beq	r2,r3,81119538 <__sflush_r+0x204>
81119530:	00c00584 	movi	r3,22
81119534:	10c0031e 	bne	r2,r3,81119544 <__sflush_r+0x210>
81119538:	9c000015 	stw	r16,0(r19)
8111953c:	0005883a 	mov	r2,zero
81119540:	003fb306 	br	81119410 <__reset+0xfb0f9410>
81119544:	88c0030b 	ldhu	r3,12(r17)
81119548:	3005883a 	mov	r2,r6
8111954c:	18c01014 	ori	r3,r3,64
81119550:	88c0030d 	sth	r3,12(r17)
81119554:	003fae06 	br	81119410 <__reset+0xfb0f9410>

81119558 <_fflush_r>:
81119558:	defffd04 	addi	sp,sp,-12
8111955c:	de00012e 	bgeu	sp,et,81119564 <_fflush_r+0xc>
81119560:	003b68fa 	trap	3
81119564:	dc000115 	stw	r16,4(sp)
81119568:	dfc00215 	stw	ra,8(sp)
8111956c:	2021883a 	mov	r16,r4
81119570:	20000226 	beq	r4,zero,8111957c <_fflush_r+0x24>
81119574:	20800e17 	ldw	r2,56(r4)
81119578:	10000c26 	beq	r2,zero,811195ac <_fflush_r+0x54>
8111957c:	2880030f 	ldh	r2,12(r5)
81119580:	1000051e 	bne	r2,zero,81119598 <_fflush_r+0x40>
81119584:	0005883a 	mov	r2,zero
81119588:	dfc00217 	ldw	ra,8(sp)
8111958c:	dc000117 	ldw	r16,4(sp)
81119590:	dec00304 	addi	sp,sp,12
81119594:	f800283a 	ret
81119598:	8009883a 	mov	r4,r16
8111959c:	dfc00217 	ldw	ra,8(sp)
811195a0:	dc000117 	ldw	r16,4(sp)
811195a4:	dec00304 	addi	sp,sp,12
811195a8:	11193341 	jmpi	81119334 <__sflush_r>
811195ac:	d9400015 	stw	r5,0(sp)
811195b0:	11199540 	call	81119954 <__sinit>
811195b4:	d9400017 	ldw	r5,0(sp)
811195b8:	003ff006 	br	8111957c <__reset+0xfb0f957c>

811195bc <fflush>:
811195bc:	20000526 	beq	r4,zero,811195d4 <fflush+0x18>
811195c0:	00a04534 	movhi	r2,33044
811195c4:	10ba2704 	addi	r2,r2,-5988
811195c8:	200b883a 	mov	r5,r4
811195cc:	11000017 	ldw	r4,0(r2)
811195d0:	11195581 	jmpi	81119558 <_fflush_r>
811195d4:	00a04534 	movhi	r2,33044
811195d8:	10ba2604 	addi	r2,r2,-5992
811195dc:	11000017 	ldw	r4,0(r2)
811195e0:	016044b4 	movhi	r5,33042
811195e4:	29655604 	addi	r5,r5,-27304
811195e8:	111a6941 	jmpi	8111a694 <_fwalk_reent>

811195ec <__fp_unlock>:
811195ec:	0005883a 	mov	r2,zero
811195f0:	f800283a 	ret

811195f4 <_cleanup_r>:
811195f4:	016044b4 	movhi	r5,33042
811195f8:	2944ec04 	addi	r5,r5,5040
811195fc:	111a6941 	jmpi	8111a694 <_fwalk_reent>

81119600 <__sinit.part.1>:
81119600:	defff704 	addi	sp,sp,-36
81119604:	00e044b4 	movhi	r3,33042
81119608:	de00012e 	bgeu	sp,et,81119610 <__sinit.part.1+0x10>
8111960c:	003b68fa 	trap	3
81119610:	18e57d04 	addi	r3,r3,-27148
81119614:	dfc00815 	stw	ra,32(sp)
81119618:	ddc00715 	stw	r23,28(sp)
8111961c:	dd800615 	stw	r22,24(sp)
81119620:	dd400515 	stw	r21,20(sp)
81119624:	dd000415 	stw	r20,16(sp)
81119628:	dcc00315 	stw	r19,12(sp)
8111962c:	dc800215 	stw	r18,8(sp)
81119630:	dc400115 	stw	r17,4(sp)
81119634:	dc000015 	stw	r16,0(sp)
81119638:	24000117 	ldw	r16,4(r4)
8111963c:	20c00f15 	stw	r3,60(r4)
81119640:	2080bb04 	addi	r2,r4,748
81119644:	00c000c4 	movi	r3,3
81119648:	20c0b915 	stw	r3,740(r4)
8111964c:	2080ba15 	stw	r2,744(r4)
81119650:	2000b815 	stw	zero,736(r4)
81119654:	05c00204 	movi	r23,8
81119658:	00800104 	movi	r2,4
8111965c:	2025883a 	mov	r18,r4
81119660:	b80d883a 	mov	r6,r23
81119664:	81001704 	addi	r4,r16,92
81119668:	000b883a 	mov	r5,zero
8111966c:	80000015 	stw	zero,0(r16)
81119670:	80000115 	stw	zero,4(r16)
81119674:	80000215 	stw	zero,8(r16)
81119678:	8080030d 	sth	r2,12(r16)
8111967c:	80001915 	stw	zero,100(r16)
81119680:	8000038d 	sth	zero,14(r16)
81119684:	80000415 	stw	zero,16(r16)
81119688:	80000515 	stw	zero,20(r16)
8111968c:	80000615 	stw	zero,24(r16)
81119690:	1110ff80 	call	81110ff8 <memset>
81119694:	05a04474 	movhi	r22,33041
81119698:	94400217 	ldw	r17,8(r18)
8111969c:	05604474 	movhi	r21,33041
811196a0:	05204474 	movhi	r20,33041
811196a4:	04e04474 	movhi	r19,33041
811196a8:	b585a104 	addi	r22,r22,5764
811196ac:	ad45ba04 	addi	r21,r21,5864
811196b0:	a505db04 	addi	r20,r20,5996
811196b4:	9cc5f404 	addi	r19,r19,6096
811196b8:	85800815 	stw	r22,32(r16)
811196bc:	85400915 	stw	r21,36(r16)
811196c0:	85000a15 	stw	r20,40(r16)
811196c4:	84c00b15 	stw	r19,44(r16)
811196c8:	84000715 	stw	r16,28(r16)
811196cc:	00800284 	movi	r2,10
811196d0:	8880030d 	sth	r2,12(r17)
811196d4:	00800044 	movi	r2,1
811196d8:	b80d883a 	mov	r6,r23
811196dc:	89001704 	addi	r4,r17,92
811196e0:	000b883a 	mov	r5,zero
811196e4:	88000015 	stw	zero,0(r17)
811196e8:	88000115 	stw	zero,4(r17)
811196ec:	88000215 	stw	zero,8(r17)
811196f0:	88001915 	stw	zero,100(r17)
811196f4:	8880038d 	sth	r2,14(r17)
811196f8:	88000415 	stw	zero,16(r17)
811196fc:	88000515 	stw	zero,20(r17)
81119700:	88000615 	stw	zero,24(r17)
81119704:	1110ff80 	call	81110ff8 <memset>
81119708:	94000317 	ldw	r16,12(r18)
8111970c:	00800484 	movi	r2,18
81119710:	8c400715 	stw	r17,28(r17)
81119714:	8d800815 	stw	r22,32(r17)
81119718:	8d400915 	stw	r21,36(r17)
8111971c:	8d000a15 	stw	r20,40(r17)
81119720:	8cc00b15 	stw	r19,44(r17)
81119724:	8080030d 	sth	r2,12(r16)
81119728:	00800084 	movi	r2,2
8111972c:	80000015 	stw	zero,0(r16)
81119730:	80000115 	stw	zero,4(r16)
81119734:	80000215 	stw	zero,8(r16)
81119738:	80001915 	stw	zero,100(r16)
8111973c:	8080038d 	sth	r2,14(r16)
81119740:	80000415 	stw	zero,16(r16)
81119744:	80000515 	stw	zero,20(r16)
81119748:	80000615 	stw	zero,24(r16)
8111974c:	b80d883a 	mov	r6,r23
81119750:	000b883a 	mov	r5,zero
81119754:	81001704 	addi	r4,r16,92
81119758:	1110ff80 	call	81110ff8 <memset>
8111975c:	00800044 	movi	r2,1
81119760:	84000715 	stw	r16,28(r16)
81119764:	85800815 	stw	r22,32(r16)
81119768:	85400915 	stw	r21,36(r16)
8111976c:	85000a15 	stw	r20,40(r16)
81119770:	84c00b15 	stw	r19,44(r16)
81119774:	90800e15 	stw	r2,56(r18)
81119778:	dfc00817 	ldw	ra,32(sp)
8111977c:	ddc00717 	ldw	r23,28(sp)
81119780:	dd800617 	ldw	r22,24(sp)
81119784:	dd400517 	ldw	r21,20(sp)
81119788:	dd000417 	ldw	r20,16(sp)
8111978c:	dcc00317 	ldw	r19,12(sp)
81119790:	dc800217 	ldw	r18,8(sp)
81119794:	dc400117 	ldw	r17,4(sp)
81119798:	dc000017 	ldw	r16,0(sp)
8111979c:	dec00904 	addi	sp,sp,36
811197a0:	f800283a 	ret

811197a4 <__fp_lock>:
811197a4:	0005883a 	mov	r2,zero
811197a8:	f800283a 	ret

811197ac <__sfmoreglue>:
811197ac:	defffc04 	addi	sp,sp,-16
811197b0:	de00012e 	bgeu	sp,et,811197b8 <__sfmoreglue+0xc>
811197b4:	003b68fa 	trap	3
811197b8:	dc400115 	stw	r17,4(sp)
811197bc:	2c7fffc4 	addi	r17,r5,-1
811197c0:	8c401a24 	muli	r17,r17,104
811197c4:	dc800215 	stw	r18,8(sp)
811197c8:	2825883a 	mov	r18,r5
811197cc:	89401d04 	addi	r5,r17,116
811197d0:	dc000015 	stw	r16,0(sp)
811197d4:	dfc00315 	stw	ra,12(sp)
811197d8:	11106940 	call	81110694 <_malloc_r>
811197dc:	1021883a 	mov	r16,r2
811197e0:	10000726 	beq	r2,zero,81119800 <__sfmoreglue+0x54>
811197e4:	11000304 	addi	r4,r2,12
811197e8:	10000015 	stw	zero,0(r2)
811197ec:	14800115 	stw	r18,4(r2)
811197f0:	11000215 	stw	r4,8(r2)
811197f4:	89801a04 	addi	r6,r17,104
811197f8:	000b883a 	mov	r5,zero
811197fc:	1110ff80 	call	81110ff8 <memset>
81119800:	8005883a 	mov	r2,r16
81119804:	dfc00317 	ldw	ra,12(sp)
81119808:	dc800217 	ldw	r18,8(sp)
8111980c:	dc400117 	ldw	r17,4(sp)
81119810:	dc000017 	ldw	r16,0(sp)
81119814:	dec00404 	addi	sp,sp,16
81119818:	f800283a 	ret

8111981c <__sfp>:
8111981c:	defffb04 	addi	sp,sp,-20
81119820:	de00012e 	bgeu	sp,et,81119828 <__sfp+0xc>
81119824:	003b68fa 	trap	3
81119828:	dc000015 	stw	r16,0(sp)
8111982c:	04204534 	movhi	r16,33044
81119830:	843a2604 	addi	r16,r16,-5992
81119834:	dcc00315 	stw	r19,12(sp)
81119838:	2027883a 	mov	r19,r4
8111983c:	81000017 	ldw	r4,0(r16)
81119840:	dfc00415 	stw	ra,16(sp)
81119844:	dc800215 	stw	r18,8(sp)
81119848:	20800e17 	ldw	r2,56(r4)
8111984c:	dc400115 	stw	r17,4(sp)
81119850:	1000021e 	bne	r2,zero,8111985c <__sfp+0x40>
81119854:	11196000 	call	81119600 <__sinit.part.1>
81119858:	81000017 	ldw	r4,0(r16)
8111985c:	2480b804 	addi	r18,r4,736
81119860:	047fffc4 	movi	r17,-1
81119864:	91000117 	ldw	r4,4(r18)
81119868:	94000217 	ldw	r16,8(r18)
8111986c:	213fffc4 	addi	r4,r4,-1
81119870:	20000a16 	blt	r4,zero,8111989c <__sfp+0x80>
81119874:	8080030f 	ldh	r2,12(r16)
81119878:	10000c26 	beq	r2,zero,811198ac <__sfp+0x90>
8111987c:	80c01d04 	addi	r3,r16,116
81119880:	00000206 	br	8111988c <__sfp+0x70>
81119884:	18bfe60f 	ldh	r2,-104(r3)
81119888:	10000826 	beq	r2,zero,811198ac <__sfp+0x90>
8111988c:	213fffc4 	addi	r4,r4,-1
81119890:	1c3ffd04 	addi	r16,r3,-12
81119894:	18c01a04 	addi	r3,r3,104
81119898:	247ffa1e 	bne	r4,r17,81119884 <__reset+0xfb0f9884>
8111989c:	90800017 	ldw	r2,0(r18)
811198a0:	10001d26 	beq	r2,zero,81119918 <__sfp+0xfc>
811198a4:	1025883a 	mov	r18,r2
811198a8:	003fee06 	br	81119864 <__reset+0xfb0f9864>
811198ac:	00bfffc4 	movi	r2,-1
811198b0:	8080038d 	sth	r2,14(r16)
811198b4:	00800044 	movi	r2,1
811198b8:	8080030d 	sth	r2,12(r16)
811198bc:	80001915 	stw	zero,100(r16)
811198c0:	80000015 	stw	zero,0(r16)
811198c4:	80000215 	stw	zero,8(r16)
811198c8:	80000115 	stw	zero,4(r16)
811198cc:	80000415 	stw	zero,16(r16)
811198d0:	80000515 	stw	zero,20(r16)
811198d4:	80000615 	stw	zero,24(r16)
811198d8:	01800204 	movi	r6,8
811198dc:	000b883a 	mov	r5,zero
811198e0:	81001704 	addi	r4,r16,92
811198e4:	1110ff80 	call	81110ff8 <memset>
811198e8:	8005883a 	mov	r2,r16
811198ec:	80000c15 	stw	zero,48(r16)
811198f0:	80000d15 	stw	zero,52(r16)
811198f4:	80001115 	stw	zero,68(r16)
811198f8:	80001215 	stw	zero,72(r16)
811198fc:	dfc00417 	ldw	ra,16(sp)
81119900:	dcc00317 	ldw	r19,12(sp)
81119904:	dc800217 	ldw	r18,8(sp)
81119908:	dc400117 	ldw	r17,4(sp)
8111990c:	dc000017 	ldw	r16,0(sp)
81119910:	dec00504 	addi	sp,sp,20
81119914:	f800283a 	ret
81119918:	01400104 	movi	r5,4
8111991c:	9809883a 	mov	r4,r19
81119920:	11197ac0 	call	811197ac <__sfmoreglue>
81119924:	90800015 	stw	r2,0(r18)
81119928:	103fde1e 	bne	r2,zero,811198a4 <__reset+0xfb0f98a4>
8111992c:	00800304 	movi	r2,12
81119930:	98800015 	stw	r2,0(r19)
81119934:	0005883a 	mov	r2,zero
81119938:	003ff006 	br	811198fc <__reset+0xfb0f98fc>

8111993c <_cleanup>:
8111993c:	00a04534 	movhi	r2,33044
81119940:	10ba2604 	addi	r2,r2,-5992
81119944:	11000017 	ldw	r4,0(r2)
81119948:	016044b4 	movhi	r5,33042
8111994c:	2944ec04 	addi	r5,r5,5040
81119950:	111a6941 	jmpi	8111a694 <_fwalk_reent>

81119954 <__sinit>:
81119954:	20800e17 	ldw	r2,56(r4)
81119958:	10000126 	beq	r2,zero,81119960 <__sinit+0xc>
8111995c:	f800283a 	ret
81119960:	11196001 	jmpi	81119600 <__sinit.part.1>

81119964 <__sfp_lock_acquire>:
81119964:	f800283a 	ret

81119968 <__sfp_lock_release>:
81119968:	f800283a 	ret

8111996c <__sinit_lock_acquire>:
8111996c:	f800283a 	ret

81119970 <__sinit_lock_release>:
81119970:	f800283a 	ret

81119974 <__fp_lock_all>:
81119974:	00a04534 	movhi	r2,33044
81119978:	10ba2704 	addi	r2,r2,-5988
8111997c:	11000017 	ldw	r4,0(r2)
81119980:	016044b4 	movhi	r5,33042
81119984:	2965e904 	addi	r5,r5,-26716
81119988:	111a5c81 	jmpi	8111a5c8 <_fwalk>

8111998c <__fp_unlock_all>:
8111998c:	00a04534 	movhi	r2,33044
81119990:	10ba2704 	addi	r2,r2,-5988
81119994:	11000017 	ldw	r4,0(r2)
81119998:	016044b4 	movhi	r5,33042
8111999c:	29657b04 	addi	r5,r5,-27156
811199a0:	111a5c81 	jmpi	8111a5c8 <_fwalk>

811199a4 <__sflags>:
811199a4:	28800007 	ldb	r2,0(r5)
811199a8:	00c01c84 	movi	r3,114
811199ac:	10c02426 	beq	r2,r3,81119a40 <__sflags+0x9c>
811199b0:	00c01dc4 	movi	r3,119
811199b4:	10c01e26 	beq	r2,r3,81119a30 <__sflags+0x8c>
811199b8:	00c01844 	movi	r3,97
811199bc:	10c00426 	beq	r2,r3,811199d0 <__sflags+0x2c>
811199c0:	00800584 	movi	r2,22
811199c4:	20800015 	stw	r2,0(r4)
811199c8:	0005883a 	mov	r2,zero
811199cc:	f800283a 	ret
811199d0:	02c08204 	movi	r11,520
811199d4:	01000044 	movi	r4,1
811199d8:	00804204 	movi	r2,264
811199dc:	01c00ac4 	movi	r7,43
811199e0:	02bff8c4 	movi	r10,-29
811199e4:	027fff04 	movi	r9,-4
811199e8:	02001e04 	movi	r8,120
811199ec:	29400044 	addi	r5,r5,1
811199f0:	28c00007 	ldb	r3,0(r5)
811199f4:	18000626 	beq	r3,zero,81119a10 <__sflags+0x6c>
811199f8:	19c00826 	beq	r3,r7,81119a1c <__sflags+0x78>
811199fc:	1a3ffb1e 	bne	r3,r8,811199ec <__reset+0xfb0f99ec>
81119a00:	29400044 	addi	r5,r5,1
81119a04:	28c00007 	ldb	r3,0(r5)
81119a08:	21020014 	ori	r4,r4,2048
81119a0c:	183ffa1e 	bne	r3,zero,811199f8 <__reset+0xfb0f99f8>
81119a10:	22c8b03a 	or	r4,r4,r11
81119a14:	31000015 	stw	r4,0(r6)
81119a18:	f800283a 	ret
81119a1c:	1284703a 	and	r2,r2,r10
81119a20:	2248703a 	and	r4,r4,r9
81119a24:	10800414 	ori	r2,r2,16
81119a28:	21000094 	ori	r4,r4,2
81119a2c:	003fef06 	br	811199ec <__reset+0xfb0f99ec>
81119a30:	02c18004 	movi	r11,1536
81119a34:	01000044 	movi	r4,1
81119a38:	00800204 	movi	r2,8
81119a3c:	003fe706 	br	811199dc <__reset+0xfb0f99dc>
81119a40:	0017883a 	mov	r11,zero
81119a44:	0009883a 	mov	r4,zero
81119a48:	00800104 	movi	r2,4
81119a4c:	003fe306 	br	811199dc <__reset+0xfb0f99dc>

81119a50 <_fread_r>:
81119a50:	defff404 	addi	sp,sp,-48
81119a54:	de00012e 	bgeu	sp,et,81119a5c <_fread_r+0xc>
81119a58:	003b68fa 	trap	3
81119a5c:	dd800815 	stw	r22,32(sp)
81119a60:	39ad383a 	mul	r22,r7,r6
81119a64:	dc000215 	stw	r16,8(sp)
81119a68:	dfc00b15 	stw	ra,44(sp)
81119a6c:	df000a15 	stw	fp,40(sp)
81119a70:	ddc00915 	stw	r23,36(sp)
81119a74:	dd400715 	stw	r21,28(sp)
81119a78:	dd000615 	stw	r20,24(sp)
81119a7c:	dcc00515 	stw	r19,20(sp)
81119a80:	dc800415 	stw	r18,16(sp)
81119a84:	dc400315 	stw	r17,12(sp)
81119a88:	dc000c17 	ldw	r16,48(sp)
81119a8c:	b0003b26 	beq	r22,zero,81119b7c <_fread_r+0x12c>
81119a90:	302f883a 	mov	r23,r6
81119a94:	382b883a 	mov	r21,r7
81119a98:	2029883a 	mov	r20,r4
81119a9c:	2827883a 	mov	r19,r5
81119aa0:	20000226 	beq	r4,zero,81119aac <_fread_r+0x5c>
81119aa4:	20800e17 	ldw	r2,56(r4)
81119aa8:	10006e26 	beq	r2,zero,81119c64 <_fread_r+0x214>
81119aac:	8080030b 	ldhu	r2,12(r16)
81119ab0:	10c8000c 	andi	r3,r2,8192
81119ab4:	1800061e 	bne	r3,zero,81119ad0 <_fread_r+0x80>
81119ab8:	81001917 	ldw	r4,100(r16)
81119abc:	00f7ffc4 	movi	r3,-8193
81119ac0:	10880014 	ori	r2,r2,8192
81119ac4:	20c6703a 	and	r3,r4,r3
81119ac8:	8080030d 	sth	r2,12(r16)
81119acc:	80c01915 	stw	r3,100(r16)
81119ad0:	84400117 	ldw	r17,4(r16)
81119ad4:	88005f16 	blt	r17,zero,81119c54 <_fread_r+0x204>
81119ad8:	8809883a 	mov	r4,r17
81119adc:	1080008c 	andi	r2,r2,2
81119ae0:	1000281e 	bne	r2,zero,81119b84 <_fread_r+0x134>
81119ae4:	b025883a 	mov	r18,r22
81119ae8:	00000b06 	br	81119b18 <_fread_r+0xc8>
81119aec:	1110ea80 	call	81110ea8 <memcpy>
81119af0:	80800017 	ldw	r2,0(r16)
81119af4:	9c67883a 	add	r19,r19,r17
81119af8:	9465c83a 	sub	r18,r18,r17
81119afc:	1463883a 	add	r17,r2,r17
81119b00:	800b883a 	mov	r5,r16
81119b04:	a009883a 	mov	r4,r20
81119b08:	84400015 	stw	r17,0(r16)
81119b0c:	11112fc0 	call	811112fc <__srefill_r>
81119b10:	10004c1e 	bne	r2,zero,81119c44 <_fread_r+0x1f4>
81119b14:	84400117 	ldw	r17,4(r16)
81119b18:	880d883a 	mov	r6,r17
81119b1c:	9809883a 	mov	r4,r19
81119b20:	81400017 	ldw	r5,0(r16)
81119b24:	8cbff136 	bltu	r17,r18,81119aec <__reset+0xfb0f9aec>
81119b28:	900d883a 	mov	r6,r18
81119b2c:	1110ea80 	call	81110ea8 <memcpy>
81119b30:	80c00117 	ldw	r3,4(r16)
81119b34:	81000017 	ldw	r4,0(r16)
81119b38:	a805883a 	mov	r2,r21
81119b3c:	1c87c83a 	sub	r3,r3,r18
81119b40:	24a5883a 	add	r18,r4,r18
81119b44:	80c00115 	stw	r3,4(r16)
81119b48:	84800015 	stw	r18,0(r16)
81119b4c:	dfc00b17 	ldw	ra,44(sp)
81119b50:	df000a17 	ldw	fp,40(sp)
81119b54:	ddc00917 	ldw	r23,36(sp)
81119b58:	dd800817 	ldw	r22,32(sp)
81119b5c:	dd400717 	ldw	r21,28(sp)
81119b60:	dd000617 	ldw	r20,24(sp)
81119b64:	dcc00517 	ldw	r19,20(sp)
81119b68:	dc800417 	ldw	r18,16(sp)
81119b6c:	dc400317 	ldw	r17,12(sp)
81119b70:	dc000217 	ldw	r16,8(sp)
81119b74:	dec00c04 	addi	sp,sp,48
81119b78:	f800283a 	ret
81119b7c:	0005883a 	mov	r2,zero
81119b80:	003ff206 	br	81119b4c <__reset+0xfb0f9b4c>
81119b84:	b007883a 	mov	r3,r22
81119b88:	2580012e 	bgeu	r4,r22,81119b90 <_fread_r+0x140>
81119b8c:	2007883a 	mov	r3,r4
81119b90:	81400017 	ldw	r5,0(r16)
81119b94:	180d883a 	mov	r6,r3
81119b98:	9809883a 	mov	r4,r19
81119b9c:	d8c00115 	stw	r3,4(sp)
81119ba0:	1110ea80 	call	81110ea8 <memcpy>
81119ba4:	d8c00117 	ldw	r3,4(sp)
81119ba8:	84400017 	ldw	r17,0(r16)
81119bac:	80800117 	ldw	r2,4(r16)
81119bb0:	81400c17 	ldw	r5,48(r16)
81119bb4:	88e3883a 	add	r17,r17,r3
81119bb8:	10c5c83a 	sub	r2,r2,r3
81119bbc:	84400015 	stw	r17,0(r16)
81119bc0:	80800115 	stw	r2,4(r16)
81119bc4:	b0e5c83a 	sub	r18,r22,r3
81119bc8:	28002b26 	beq	r5,zero,81119c78 <_fread_r+0x228>
81119bcc:	90002b26 	beq	r18,zero,81119c7c <_fread_r+0x22c>
81119bd0:	80801004 	addi	r2,r16,64
81119bd4:	28800526 	beq	r5,r2,81119bec <_fread_r+0x19c>
81119bd8:	a009883a 	mov	r4,r20
81119bdc:	d8c00115 	stw	r3,4(sp)
81119be0:	1119dec0 	call	81119dec <_free_r>
81119be4:	d8c00117 	ldw	r3,4(sp)
81119be8:	84400017 	ldw	r17,0(r16)
81119bec:	80000c15 	stw	zero,48(r16)
81119bf0:	80800517 	ldw	r2,20(r16)
81119bf4:	87000417 	ldw	fp,16(r16)
81119bf8:	98e7883a 	add	r19,r19,r3
81119bfc:	d8800015 	stw	r2,0(sp)
81119c00:	00000106 	br	81119c08 <_fread_r+0x1b8>
81119c04:	90001d26 	beq	r18,zero,81119c7c <_fread_r+0x22c>
81119c08:	84c00415 	stw	r19,16(r16)
81119c0c:	84800515 	stw	r18,20(r16)
81119c10:	84c00015 	stw	r19,0(r16)
81119c14:	a009883a 	mov	r4,r20
81119c18:	800b883a 	mov	r5,r16
81119c1c:	11112fc0 	call	811112fc <__srefill_r>
81119c20:	d9000017 	ldw	r4,0(sp)
81119c24:	80c00117 	ldw	r3,4(r16)
81119c28:	87000415 	stw	fp,16(r16)
81119c2c:	81000515 	stw	r4,20(r16)
81119c30:	84400015 	stw	r17,0(r16)
81119c34:	80000115 	stw	zero,4(r16)
81119c38:	90e5c83a 	sub	r18,r18,r3
81119c3c:	98e7883a 	add	r19,r19,r3
81119c40:	103ff026 	beq	r2,zero,81119c04 <__reset+0xfb0f9c04>
81119c44:	b80b883a 	mov	r5,r23
81119c48:	b489c83a 	sub	r4,r22,r18
81119c4c:	11232d40 	call	811232d4 <__udivsi3>
81119c50:	003fbe06 	br	81119b4c <__reset+0xfb0f9b4c>
81119c54:	80000115 	stw	zero,4(r16)
81119c58:	0009883a 	mov	r4,zero
81119c5c:	0023883a 	mov	r17,zero
81119c60:	003f9e06 	br	81119adc <__reset+0xfb0f9adc>
81119c64:	11199540 	call	81119954 <__sinit>
81119c68:	8080030b 	ldhu	r2,12(r16)
81119c6c:	10c8000c 	andi	r3,r2,8192
81119c70:	183f971e 	bne	r3,zero,81119ad0 <__reset+0xfb0f9ad0>
81119c74:	003f9006 	br	81119ab8 <__reset+0xfb0f9ab8>
81119c78:	903fdd1e 	bne	r18,zero,81119bf0 <__reset+0xfb0f9bf0>
81119c7c:	a805883a 	mov	r2,r21
81119c80:	003fb206 	br	81119b4c <__reset+0xfb0f9b4c>

81119c84 <fread>:
81119c84:	defffe04 	addi	sp,sp,-8
81119c88:	00a04534 	movhi	r2,33044
81119c8c:	de00012e 	bgeu	sp,et,81119c94 <fread+0x10>
81119c90:	003b68fa 	trap	3
81119c94:	10ba2704 	addi	r2,r2,-5988
81119c98:	d9c00015 	stw	r7,0(sp)
81119c9c:	300f883a 	mov	r7,r6
81119ca0:	280d883a 	mov	r6,r5
81119ca4:	200b883a 	mov	r5,r4
81119ca8:	11000017 	ldw	r4,0(r2)
81119cac:	dfc00115 	stw	ra,4(sp)
81119cb0:	1119a500 	call	81119a50 <_fread_r>
81119cb4:	dfc00117 	ldw	ra,4(sp)
81119cb8:	dec00204 	addi	sp,sp,8
81119cbc:	f800283a 	ret

81119cc0 <_malloc_trim_r>:
81119cc0:	defffb04 	addi	sp,sp,-20
81119cc4:	de00012e 	bgeu	sp,et,81119ccc <_malloc_trim_r+0xc>
81119cc8:	003b68fa 	trap	3
81119ccc:	dcc00315 	stw	r19,12(sp)
81119cd0:	04e04534 	movhi	r19,33044
81119cd4:	dc800215 	stw	r18,8(sp)
81119cd8:	dc400115 	stw	r17,4(sp)
81119cdc:	dc000015 	stw	r16,0(sp)
81119ce0:	dfc00415 	stw	ra,16(sp)
81119ce4:	2821883a 	mov	r16,r5
81119ce8:	9cf40c04 	addi	r19,r19,-12240
81119cec:	2025883a 	mov	r18,r4
81119cf0:	11267240 	call	81126724 <__malloc_lock>
81119cf4:	98800217 	ldw	r2,8(r19)
81119cf8:	14400117 	ldw	r17,4(r2)
81119cfc:	00bfff04 	movi	r2,-4
81119d00:	88a2703a 	and	r17,r17,r2
81119d04:	8c21c83a 	sub	r16,r17,r16
81119d08:	8403fbc4 	addi	r16,r16,4079
81119d0c:	8020d33a 	srli	r16,r16,12
81119d10:	0083ffc4 	movi	r2,4095
81119d14:	843fffc4 	addi	r16,r16,-1
81119d18:	8020933a 	slli	r16,r16,12
81119d1c:	1400060e 	bge	r2,r16,81119d38 <_malloc_trim_r+0x78>
81119d20:	000b883a 	mov	r5,zero
81119d24:	9009883a 	mov	r4,r18
81119d28:	11114d80 	call	811114d8 <_sbrk_r>
81119d2c:	98c00217 	ldw	r3,8(r19)
81119d30:	1c47883a 	add	r3,r3,r17
81119d34:	10c00a26 	beq	r2,r3,81119d60 <_malloc_trim_r+0xa0>
81119d38:	9009883a 	mov	r4,r18
81119d3c:	112684c0 	call	8112684c <__malloc_unlock>
81119d40:	0005883a 	mov	r2,zero
81119d44:	dfc00417 	ldw	ra,16(sp)
81119d48:	dcc00317 	ldw	r19,12(sp)
81119d4c:	dc800217 	ldw	r18,8(sp)
81119d50:	dc400117 	ldw	r17,4(sp)
81119d54:	dc000017 	ldw	r16,0(sp)
81119d58:	dec00504 	addi	sp,sp,20
81119d5c:	f800283a 	ret
81119d60:	040bc83a 	sub	r5,zero,r16
81119d64:	9009883a 	mov	r4,r18
81119d68:	11114d80 	call	811114d8 <_sbrk_r>
81119d6c:	00ffffc4 	movi	r3,-1
81119d70:	10c00d26 	beq	r2,r3,81119da8 <_malloc_trim_r+0xe8>
81119d74:	00e04534 	movhi	r3,33044
81119d78:	18fae204 	addi	r3,r3,-5240
81119d7c:	18800017 	ldw	r2,0(r3)
81119d80:	99000217 	ldw	r4,8(r19)
81119d84:	8c23c83a 	sub	r17,r17,r16
81119d88:	8c400054 	ori	r17,r17,1
81119d8c:	1421c83a 	sub	r16,r2,r16
81119d90:	24400115 	stw	r17,4(r4)
81119d94:	9009883a 	mov	r4,r18
81119d98:	1c000015 	stw	r16,0(r3)
81119d9c:	112684c0 	call	8112684c <__malloc_unlock>
81119da0:	00800044 	movi	r2,1
81119da4:	003fe706 	br	81119d44 <__reset+0xfb0f9d44>
81119da8:	000b883a 	mov	r5,zero
81119dac:	9009883a 	mov	r4,r18
81119db0:	11114d80 	call	811114d8 <_sbrk_r>
81119db4:	99000217 	ldw	r4,8(r19)
81119db8:	014003c4 	movi	r5,15
81119dbc:	1107c83a 	sub	r3,r2,r4
81119dc0:	28ffdd0e 	bge	r5,r3,81119d38 <__reset+0xfb0f9d38>
81119dc4:	01604534 	movhi	r5,33044
81119dc8:	297a2804 	addi	r5,r5,-5984
81119dcc:	29400017 	ldw	r5,0(r5)
81119dd0:	18c00054 	ori	r3,r3,1
81119dd4:	20c00115 	stw	r3,4(r4)
81119dd8:	00e04534 	movhi	r3,33044
81119ddc:	1145c83a 	sub	r2,r2,r5
81119de0:	18fae204 	addi	r3,r3,-5240
81119de4:	18800015 	stw	r2,0(r3)
81119de8:	003fd306 	br	81119d38 <__reset+0xfb0f9d38>

81119dec <_free_r>:
81119dec:	28004326 	beq	r5,zero,81119efc <_free_r+0x110>
81119df0:	defffd04 	addi	sp,sp,-12
81119df4:	de00012e 	bgeu	sp,et,81119dfc <_free_r+0x10>
81119df8:	003b68fa 	trap	3
81119dfc:	dc400115 	stw	r17,4(sp)
81119e00:	dc000015 	stw	r16,0(sp)
81119e04:	2023883a 	mov	r17,r4
81119e08:	2821883a 	mov	r16,r5
81119e0c:	dfc00215 	stw	ra,8(sp)
81119e10:	11267240 	call	81126724 <__malloc_lock>
81119e14:	81ffff17 	ldw	r7,-4(r16)
81119e18:	00bfff84 	movi	r2,-2
81119e1c:	01204534 	movhi	r4,33044
81119e20:	81bffe04 	addi	r6,r16,-8
81119e24:	3884703a 	and	r2,r7,r2
81119e28:	21340c04 	addi	r4,r4,-12240
81119e2c:	308b883a 	add	r5,r6,r2
81119e30:	2a400117 	ldw	r9,4(r5)
81119e34:	22000217 	ldw	r8,8(r4)
81119e38:	00ffff04 	movi	r3,-4
81119e3c:	48c6703a 	and	r3,r9,r3
81119e40:	2a005726 	beq	r5,r8,81119fa0 <_free_r+0x1b4>
81119e44:	28c00115 	stw	r3,4(r5)
81119e48:	39c0004c 	andi	r7,r7,1
81119e4c:	3800091e 	bne	r7,zero,81119e74 <_free_r+0x88>
81119e50:	823ffe17 	ldw	r8,-8(r16)
81119e54:	22400204 	addi	r9,r4,8
81119e58:	320dc83a 	sub	r6,r6,r8
81119e5c:	31c00217 	ldw	r7,8(r6)
81119e60:	1205883a 	add	r2,r2,r8
81119e64:	3a406526 	beq	r7,r9,81119ffc <_free_r+0x210>
81119e68:	32000317 	ldw	r8,12(r6)
81119e6c:	3a000315 	stw	r8,12(r7)
81119e70:	41c00215 	stw	r7,8(r8)
81119e74:	28cf883a 	add	r7,r5,r3
81119e78:	39c00117 	ldw	r7,4(r7)
81119e7c:	39c0004c 	andi	r7,r7,1
81119e80:	38003a26 	beq	r7,zero,81119f6c <_free_r+0x180>
81119e84:	10c00054 	ori	r3,r2,1
81119e88:	30c00115 	stw	r3,4(r6)
81119e8c:	3087883a 	add	r3,r6,r2
81119e90:	18800015 	stw	r2,0(r3)
81119e94:	00c07fc4 	movi	r3,511
81119e98:	18801936 	bltu	r3,r2,81119f00 <_free_r+0x114>
81119e9c:	1004d0fa 	srli	r2,r2,3
81119ea0:	01c00044 	movi	r7,1
81119ea4:	21400117 	ldw	r5,4(r4)
81119ea8:	10c00044 	addi	r3,r2,1
81119eac:	18c7883a 	add	r3,r3,r3
81119eb0:	1005d0ba 	srai	r2,r2,2
81119eb4:	18c7883a 	add	r3,r3,r3
81119eb8:	18c7883a 	add	r3,r3,r3
81119ebc:	1907883a 	add	r3,r3,r4
81119ec0:	3884983a 	sll	r2,r7,r2
81119ec4:	19c00017 	ldw	r7,0(r3)
81119ec8:	1a3ffe04 	addi	r8,r3,-8
81119ecc:	1144b03a 	or	r2,r2,r5
81119ed0:	32000315 	stw	r8,12(r6)
81119ed4:	31c00215 	stw	r7,8(r6)
81119ed8:	20800115 	stw	r2,4(r4)
81119edc:	19800015 	stw	r6,0(r3)
81119ee0:	39800315 	stw	r6,12(r7)
81119ee4:	8809883a 	mov	r4,r17
81119ee8:	dfc00217 	ldw	ra,8(sp)
81119eec:	dc400117 	ldw	r17,4(sp)
81119ef0:	dc000017 	ldw	r16,0(sp)
81119ef4:	dec00304 	addi	sp,sp,12
81119ef8:	112684c1 	jmpi	8112684c <__malloc_unlock>
81119efc:	f800283a 	ret
81119f00:	100ad27a 	srli	r5,r2,9
81119f04:	00c00104 	movi	r3,4
81119f08:	19404a36 	bltu	r3,r5,8111a034 <_free_r+0x248>
81119f0c:	100ad1ba 	srli	r5,r2,6
81119f10:	28c00e44 	addi	r3,r5,57
81119f14:	18c7883a 	add	r3,r3,r3
81119f18:	29400e04 	addi	r5,r5,56
81119f1c:	18c7883a 	add	r3,r3,r3
81119f20:	18c7883a 	add	r3,r3,r3
81119f24:	1909883a 	add	r4,r3,r4
81119f28:	20c00017 	ldw	r3,0(r4)
81119f2c:	01e04534 	movhi	r7,33044
81119f30:	213ffe04 	addi	r4,r4,-8
81119f34:	39f40c04 	addi	r7,r7,-12240
81119f38:	20c04426 	beq	r4,r3,8111a04c <_free_r+0x260>
81119f3c:	01ffff04 	movi	r7,-4
81119f40:	19400117 	ldw	r5,4(r3)
81119f44:	29ca703a 	and	r5,r5,r7
81119f48:	1140022e 	bgeu	r2,r5,81119f54 <_free_r+0x168>
81119f4c:	18c00217 	ldw	r3,8(r3)
81119f50:	20fffb1e 	bne	r4,r3,81119f40 <__reset+0xfb0f9f40>
81119f54:	19000317 	ldw	r4,12(r3)
81119f58:	31000315 	stw	r4,12(r6)
81119f5c:	30c00215 	stw	r3,8(r6)
81119f60:	21800215 	stw	r6,8(r4)
81119f64:	19800315 	stw	r6,12(r3)
81119f68:	003fde06 	br	81119ee4 <__reset+0xfb0f9ee4>
81119f6c:	29c00217 	ldw	r7,8(r5)
81119f70:	10c5883a 	add	r2,r2,r3
81119f74:	00e04534 	movhi	r3,33044
81119f78:	18f40e04 	addi	r3,r3,-12232
81119f7c:	38c03b26 	beq	r7,r3,8111a06c <_free_r+0x280>
81119f80:	2a000317 	ldw	r8,12(r5)
81119f84:	11400054 	ori	r5,r2,1
81119f88:	3087883a 	add	r3,r6,r2
81119f8c:	3a000315 	stw	r8,12(r7)
81119f90:	41c00215 	stw	r7,8(r8)
81119f94:	31400115 	stw	r5,4(r6)
81119f98:	18800015 	stw	r2,0(r3)
81119f9c:	003fbd06 	br	81119e94 <__reset+0xfb0f9e94>
81119fa0:	39c0004c 	andi	r7,r7,1
81119fa4:	10c5883a 	add	r2,r2,r3
81119fa8:	3800071e 	bne	r7,zero,81119fc8 <_free_r+0x1dc>
81119fac:	81fffe17 	ldw	r7,-8(r16)
81119fb0:	31cdc83a 	sub	r6,r6,r7
81119fb4:	30c00317 	ldw	r3,12(r6)
81119fb8:	31400217 	ldw	r5,8(r6)
81119fbc:	11c5883a 	add	r2,r2,r7
81119fc0:	28c00315 	stw	r3,12(r5)
81119fc4:	19400215 	stw	r5,8(r3)
81119fc8:	10c00054 	ori	r3,r2,1
81119fcc:	30c00115 	stw	r3,4(r6)
81119fd0:	00e04534 	movhi	r3,33044
81119fd4:	18fa2904 	addi	r3,r3,-5980
81119fd8:	18c00017 	ldw	r3,0(r3)
81119fdc:	21800215 	stw	r6,8(r4)
81119fe0:	10ffc036 	bltu	r2,r3,81119ee4 <__reset+0xfb0f9ee4>
81119fe4:	00a04534 	movhi	r2,33044
81119fe8:	10ba8304 	addi	r2,r2,-5620
81119fec:	11400017 	ldw	r5,0(r2)
81119ff0:	8809883a 	mov	r4,r17
81119ff4:	1119cc00 	call	81119cc0 <_malloc_trim_r>
81119ff8:	003fba06 	br	81119ee4 <__reset+0xfb0f9ee4>
81119ffc:	28c9883a 	add	r4,r5,r3
8111a000:	21000117 	ldw	r4,4(r4)
8111a004:	2100004c 	andi	r4,r4,1
8111a008:	2000391e 	bne	r4,zero,8111a0f0 <_free_r+0x304>
8111a00c:	29c00217 	ldw	r7,8(r5)
8111a010:	29000317 	ldw	r4,12(r5)
8111a014:	1885883a 	add	r2,r3,r2
8111a018:	10c00054 	ori	r3,r2,1
8111a01c:	39000315 	stw	r4,12(r7)
8111a020:	21c00215 	stw	r7,8(r4)
8111a024:	30c00115 	stw	r3,4(r6)
8111a028:	308d883a 	add	r6,r6,r2
8111a02c:	30800015 	stw	r2,0(r6)
8111a030:	003fac06 	br	81119ee4 <__reset+0xfb0f9ee4>
8111a034:	00c00504 	movi	r3,20
8111a038:	19401536 	bltu	r3,r5,8111a090 <_free_r+0x2a4>
8111a03c:	28c01704 	addi	r3,r5,92
8111a040:	18c7883a 	add	r3,r3,r3
8111a044:	294016c4 	addi	r5,r5,91
8111a048:	003fb406 	br	81119f1c <__reset+0xfb0f9f1c>
8111a04c:	280bd0ba 	srai	r5,r5,2
8111a050:	00c00044 	movi	r3,1
8111a054:	38800117 	ldw	r2,4(r7)
8111a058:	194a983a 	sll	r5,r3,r5
8111a05c:	2007883a 	mov	r3,r4
8111a060:	2884b03a 	or	r2,r5,r2
8111a064:	38800115 	stw	r2,4(r7)
8111a068:	003fbb06 	br	81119f58 <__reset+0xfb0f9f58>
8111a06c:	21800515 	stw	r6,20(r4)
8111a070:	21800415 	stw	r6,16(r4)
8111a074:	10c00054 	ori	r3,r2,1
8111a078:	31c00315 	stw	r7,12(r6)
8111a07c:	31c00215 	stw	r7,8(r6)
8111a080:	30c00115 	stw	r3,4(r6)
8111a084:	308d883a 	add	r6,r6,r2
8111a088:	30800015 	stw	r2,0(r6)
8111a08c:	003f9506 	br	81119ee4 <__reset+0xfb0f9ee4>
8111a090:	00c01504 	movi	r3,84
8111a094:	19400536 	bltu	r3,r5,8111a0ac <_free_r+0x2c0>
8111a098:	100ad33a 	srli	r5,r2,12
8111a09c:	28c01bc4 	addi	r3,r5,111
8111a0a0:	18c7883a 	add	r3,r3,r3
8111a0a4:	29401b84 	addi	r5,r5,110
8111a0a8:	003f9c06 	br	81119f1c <__reset+0xfb0f9f1c>
8111a0ac:	00c05504 	movi	r3,340
8111a0b0:	19400536 	bltu	r3,r5,8111a0c8 <_free_r+0x2dc>
8111a0b4:	100ad3fa 	srli	r5,r2,15
8111a0b8:	28c01e04 	addi	r3,r5,120
8111a0bc:	18c7883a 	add	r3,r3,r3
8111a0c0:	29401dc4 	addi	r5,r5,119
8111a0c4:	003f9506 	br	81119f1c <__reset+0xfb0f9f1c>
8111a0c8:	00c15504 	movi	r3,1364
8111a0cc:	19400536 	bltu	r3,r5,8111a0e4 <_free_r+0x2f8>
8111a0d0:	100ad4ba 	srli	r5,r2,18
8111a0d4:	28c01f44 	addi	r3,r5,125
8111a0d8:	18c7883a 	add	r3,r3,r3
8111a0dc:	29401f04 	addi	r5,r5,124
8111a0e0:	003f8e06 	br	81119f1c <__reset+0xfb0f9f1c>
8111a0e4:	00c03f84 	movi	r3,254
8111a0e8:	01401f84 	movi	r5,126
8111a0ec:	003f8b06 	br	81119f1c <__reset+0xfb0f9f1c>
8111a0f0:	10c00054 	ori	r3,r2,1
8111a0f4:	30c00115 	stw	r3,4(r6)
8111a0f8:	308d883a 	add	r6,r6,r2
8111a0fc:	30800015 	stw	r2,0(r6)
8111a100:	003f7806 	br	81119ee4 <__reset+0xfb0f9ee4>

8111a104 <__sfvwrite_r>:
8111a104:	30800217 	ldw	r2,8(r6)
8111a108:	10006926 	beq	r2,zero,8111a2b0 <__sfvwrite_r+0x1ac>
8111a10c:	defff404 	addi	sp,sp,-48
8111a110:	de00012e 	bgeu	sp,et,8111a118 <__sfvwrite_r+0x14>
8111a114:	003b68fa 	trap	3
8111a118:	28c0030b 	ldhu	r3,12(r5)
8111a11c:	dd400715 	stw	r21,28(sp)
8111a120:	dd000615 	stw	r20,24(sp)
8111a124:	dc000215 	stw	r16,8(sp)
8111a128:	dfc00b15 	stw	ra,44(sp)
8111a12c:	df000a15 	stw	fp,40(sp)
8111a130:	ddc00915 	stw	r23,36(sp)
8111a134:	dd800815 	stw	r22,32(sp)
8111a138:	dcc00515 	stw	r19,20(sp)
8111a13c:	dc800415 	stw	r18,16(sp)
8111a140:	dc400315 	stw	r17,12(sp)
8111a144:	1880020c 	andi	r2,r3,8
8111a148:	2821883a 	mov	r16,r5
8111a14c:	202b883a 	mov	r21,r4
8111a150:	3029883a 	mov	r20,r6
8111a154:	10002726 	beq	r2,zero,8111a1f4 <__sfvwrite_r+0xf0>
8111a158:	28800417 	ldw	r2,16(r5)
8111a15c:	10002526 	beq	r2,zero,8111a1f4 <__sfvwrite_r+0xf0>
8111a160:	1880008c 	andi	r2,r3,2
8111a164:	a4400017 	ldw	r17,0(r20)
8111a168:	10002a26 	beq	r2,zero,8111a214 <__sfvwrite_r+0x110>
8111a16c:	05a00034 	movhi	r22,32768
8111a170:	0027883a 	mov	r19,zero
8111a174:	0025883a 	mov	r18,zero
8111a178:	b5bf0004 	addi	r22,r22,-1024
8111a17c:	980d883a 	mov	r6,r19
8111a180:	a809883a 	mov	r4,r21
8111a184:	90004626 	beq	r18,zero,8111a2a0 <__sfvwrite_r+0x19c>
8111a188:	900f883a 	mov	r7,r18
8111a18c:	b480022e 	bgeu	r22,r18,8111a198 <__sfvwrite_r+0x94>
8111a190:	01e00034 	movhi	r7,32768
8111a194:	39ff0004 	addi	r7,r7,-1024
8111a198:	80800917 	ldw	r2,36(r16)
8111a19c:	81400717 	ldw	r5,28(r16)
8111a1a0:	103ee83a 	callr	r2
8111a1a4:	0080570e 	bge	zero,r2,8111a304 <__sfvwrite_r+0x200>
8111a1a8:	a0c00217 	ldw	r3,8(r20)
8111a1ac:	98a7883a 	add	r19,r19,r2
8111a1b0:	90a5c83a 	sub	r18,r18,r2
8111a1b4:	1885c83a 	sub	r2,r3,r2
8111a1b8:	a0800215 	stw	r2,8(r20)
8111a1bc:	103fef1e 	bne	r2,zero,8111a17c <__reset+0xfb0fa17c>
8111a1c0:	0005883a 	mov	r2,zero
8111a1c4:	dfc00b17 	ldw	ra,44(sp)
8111a1c8:	df000a17 	ldw	fp,40(sp)
8111a1cc:	ddc00917 	ldw	r23,36(sp)
8111a1d0:	dd800817 	ldw	r22,32(sp)
8111a1d4:	dd400717 	ldw	r21,28(sp)
8111a1d8:	dd000617 	ldw	r20,24(sp)
8111a1dc:	dcc00517 	ldw	r19,20(sp)
8111a1e0:	dc800417 	ldw	r18,16(sp)
8111a1e4:	dc400317 	ldw	r17,12(sp)
8111a1e8:	dc000217 	ldw	r16,8(sp)
8111a1ec:	dec00c04 	addi	sp,sp,48
8111a1f0:	f800283a 	ret
8111a1f4:	800b883a 	mov	r5,r16
8111a1f8:	a809883a 	mov	r4,r21
8111a1fc:	11178e40 	call	811178e4 <__swsetup_r>
8111a200:	1000eb1e 	bne	r2,zero,8111a5b0 <__sfvwrite_r+0x4ac>
8111a204:	80c0030b 	ldhu	r3,12(r16)
8111a208:	a4400017 	ldw	r17,0(r20)
8111a20c:	1880008c 	andi	r2,r3,2
8111a210:	103fd61e 	bne	r2,zero,8111a16c <__reset+0xfb0fa16c>
8111a214:	1880004c 	andi	r2,r3,1
8111a218:	10003f1e 	bne	r2,zero,8111a318 <__sfvwrite_r+0x214>
8111a21c:	0039883a 	mov	fp,zero
8111a220:	0025883a 	mov	r18,zero
8111a224:	90001a26 	beq	r18,zero,8111a290 <__sfvwrite_r+0x18c>
8111a228:	1880800c 	andi	r2,r3,512
8111a22c:	84c00217 	ldw	r19,8(r16)
8111a230:	10002126 	beq	r2,zero,8111a2b8 <__sfvwrite_r+0x1b4>
8111a234:	982f883a 	mov	r23,r19
8111a238:	94c09336 	bltu	r18,r19,8111a488 <__sfvwrite_r+0x384>
8111a23c:	1881200c 	andi	r2,r3,1152
8111a240:	10009e1e 	bne	r2,zero,8111a4bc <__sfvwrite_r+0x3b8>
8111a244:	81000017 	ldw	r4,0(r16)
8111a248:	b80d883a 	mov	r6,r23
8111a24c:	e00b883a 	mov	r5,fp
8111a250:	111ac600 	call	8111ac60 <memmove>
8111a254:	80c00217 	ldw	r3,8(r16)
8111a258:	81000017 	ldw	r4,0(r16)
8111a25c:	9005883a 	mov	r2,r18
8111a260:	1ce7c83a 	sub	r19,r3,r19
8111a264:	25cf883a 	add	r7,r4,r23
8111a268:	84c00215 	stw	r19,8(r16)
8111a26c:	81c00015 	stw	r7,0(r16)
8111a270:	a0c00217 	ldw	r3,8(r20)
8111a274:	e0b9883a 	add	fp,fp,r2
8111a278:	90a5c83a 	sub	r18,r18,r2
8111a27c:	18a7c83a 	sub	r19,r3,r2
8111a280:	a4c00215 	stw	r19,8(r20)
8111a284:	983fce26 	beq	r19,zero,8111a1c0 <__reset+0xfb0fa1c0>
8111a288:	80c0030b 	ldhu	r3,12(r16)
8111a28c:	903fe61e 	bne	r18,zero,8111a228 <__reset+0xfb0fa228>
8111a290:	8f000017 	ldw	fp,0(r17)
8111a294:	8c800117 	ldw	r18,4(r17)
8111a298:	8c400204 	addi	r17,r17,8
8111a29c:	003fe106 	br	8111a224 <__reset+0xfb0fa224>
8111a2a0:	8cc00017 	ldw	r19,0(r17)
8111a2a4:	8c800117 	ldw	r18,4(r17)
8111a2a8:	8c400204 	addi	r17,r17,8
8111a2ac:	003fb306 	br	8111a17c <__reset+0xfb0fa17c>
8111a2b0:	0005883a 	mov	r2,zero
8111a2b4:	f800283a 	ret
8111a2b8:	81000017 	ldw	r4,0(r16)
8111a2bc:	80800417 	ldw	r2,16(r16)
8111a2c0:	11005736 	bltu	r2,r4,8111a420 <__sfvwrite_r+0x31c>
8111a2c4:	85c00517 	ldw	r23,20(r16)
8111a2c8:	95c05536 	bltu	r18,r23,8111a420 <__sfvwrite_r+0x31c>
8111a2cc:	00a00034 	movhi	r2,32768
8111a2d0:	10bfffc4 	addi	r2,r2,-1
8111a2d4:	9009883a 	mov	r4,r18
8111a2d8:	1480012e 	bgeu	r2,r18,8111a2e0 <__sfvwrite_r+0x1dc>
8111a2dc:	1009883a 	mov	r4,r2
8111a2e0:	b80b883a 	mov	r5,r23
8111a2e4:	11231dc0 	call	811231dc <__divsi3>
8111a2e8:	15cf383a 	mul	r7,r2,r23
8111a2ec:	81400717 	ldw	r5,28(r16)
8111a2f0:	80800917 	ldw	r2,36(r16)
8111a2f4:	e00d883a 	mov	r6,fp
8111a2f8:	a809883a 	mov	r4,r21
8111a2fc:	103ee83a 	callr	r2
8111a300:	00bfdb16 	blt	zero,r2,8111a270 <__reset+0xfb0fa270>
8111a304:	8080030b 	ldhu	r2,12(r16)
8111a308:	10801014 	ori	r2,r2,64
8111a30c:	8080030d 	sth	r2,12(r16)
8111a310:	00bfffc4 	movi	r2,-1
8111a314:	003fab06 	br	8111a1c4 <__reset+0xfb0fa1c4>
8111a318:	0027883a 	mov	r19,zero
8111a31c:	0011883a 	mov	r8,zero
8111a320:	0039883a 	mov	fp,zero
8111a324:	0025883a 	mov	r18,zero
8111a328:	90001f26 	beq	r18,zero,8111a3a8 <__sfvwrite_r+0x2a4>
8111a32c:	40005a26 	beq	r8,zero,8111a498 <__sfvwrite_r+0x394>
8111a330:	982d883a 	mov	r22,r19
8111a334:	94c0012e 	bgeu	r18,r19,8111a33c <__sfvwrite_r+0x238>
8111a338:	902d883a 	mov	r22,r18
8111a33c:	81000017 	ldw	r4,0(r16)
8111a340:	80800417 	ldw	r2,16(r16)
8111a344:	b02f883a 	mov	r23,r22
8111a348:	81c00517 	ldw	r7,20(r16)
8111a34c:	1100032e 	bgeu	r2,r4,8111a35c <__sfvwrite_r+0x258>
8111a350:	80c00217 	ldw	r3,8(r16)
8111a354:	38c7883a 	add	r3,r7,r3
8111a358:	1d801816 	blt	r3,r22,8111a3bc <__sfvwrite_r+0x2b8>
8111a35c:	b1c03e16 	blt	r22,r7,8111a458 <__sfvwrite_r+0x354>
8111a360:	80800917 	ldw	r2,36(r16)
8111a364:	81400717 	ldw	r5,28(r16)
8111a368:	e00d883a 	mov	r6,fp
8111a36c:	da000115 	stw	r8,4(sp)
8111a370:	a809883a 	mov	r4,r21
8111a374:	103ee83a 	callr	r2
8111a378:	102f883a 	mov	r23,r2
8111a37c:	da000117 	ldw	r8,4(sp)
8111a380:	00bfe00e 	bge	zero,r2,8111a304 <__reset+0xfb0fa304>
8111a384:	9de7c83a 	sub	r19,r19,r23
8111a388:	98001f26 	beq	r19,zero,8111a408 <__sfvwrite_r+0x304>
8111a38c:	a0800217 	ldw	r2,8(r20)
8111a390:	e5f9883a 	add	fp,fp,r23
8111a394:	95e5c83a 	sub	r18,r18,r23
8111a398:	15efc83a 	sub	r23,r2,r23
8111a39c:	a5c00215 	stw	r23,8(r20)
8111a3a0:	b83f8726 	beq	r23,zero,8111a1c0 <__reset+0xfb0fa1c0>
8111a3a4:	903fe11e 	bne	r18,zero,8111a32c <__reset+0xfb0fa32c>
8111a3a8:	8f000017 	ldw	fp,0(r17)
8111a3ac:	8c800117 	ldw	r18,4(r17)
8111a3b0:	0011883a 	mov	r8,zero
8111a3b4:	8c400204 	addi	r17,r17,8
8111a3b8:	003fdb06 	br	8111a328 <__reset+0xfb0fa328>
8111a3bc:	180d883a 	mov	r6,r3
8111a3c0:	e00b883a 	mov	r5,fp
8111a3c4:	da000115 	stw	r8,4(sp)
8111a3c8:	d8c00015 	stw	r3,0(sp)
8111a3cc:	111ac600 	call	8111ac60 <memmove>
8111a3d0:	d8c00017 	ldw	r3,0(sp)
8111a3d4:	80800017 	ldw	r2,0(r16)
8111a3d8:	800b883a 	mov	r5,r16
8111a3dc:	a809883a 	mov	r4,r21
8111a3e0:	10c5883a 	add	r2,r2,r3
8111a3e4:	80800015 	stw	r2,0(r16)
8111a3e8:	d8c00015 	stw	r3,0(sp)
8111a3ec:	11195580 	call	81119558 <_fflush_r>
8111a3f0:	d8c00017 	ldw	r3,0(sp)
8111a3f4:	da000117 	ldw	r8,4(sp)
8111a3f8:	103fc21e 	bne	r2,zero,8111a304 <__reset+0xfb0fa304>
8111a3fc:	182f883a 	mov	r23,r3
8111a400:	9de7c83a 	sub	r19,r19,r23
8111a404:	983fe11e 	bne	r19,zero,8111a38c <__reset+0xfb0fa38c>
8111a408:	800b883a 	mov	r5,r16
8111a40c:	a809883a 	mov	r4,r21
8111a410:	11195580 	call	81119558 <_fflush_r>
8111a414:	103fbb1e 	bne	r2,zero,8111a304 <__reset+0xfb0fa304>
8111a418:	0011883a 	mov	r8,zero
8111a41c:	003fdb06 	br	8111a38c <__reset+0xfb0fa38c>
8111a420:	94c0012e 	bgeu	r18,r19,8111a428 <__sfvwrite_r+0x324>
8111a424:	9027883a 	mov	r19,r18
8111a428:	980d883a 	mov	r6,r19
8111a42c:	e00b883a 	mov	r5,fp
8111a430:	111ac600 	call	8111ac60 <memmove>
8111a434:	80800217 	ldw	r2,8(r16)
8111a438:	80c00017 	ldw	r3,0(r16)
8111a43c:	14c5c83a 	sub	r2,r2,r19
8111a440:	1cc7883a 	add	r3,r3,r19
8111a444:	80800215 	stw	r2,8(r16)
8111a448:	80c00015 	stw	r3,0(r16)
8111a44c:	10004326 	beq	r2,zero,8111a55c <__sfvwrite_r+0x458>
8111a450:	9805883a 	mov	r2,r19
8111a454:	003f8606 	br	8111a270 <__reset+0xfb0fa270>
8111a458:	b00d883a 	mov	r6,r22
8111a45c:	e00b883a 	mov	r5,fp
8111a460:	da000115 	stw	r8,4(sp)
8111a464:	111ac600 	call	8111ac60 <memmove>
8111a468:	80800217 	ldw	r2,8(r16)
8111a46c:	80c00017 	ldw	r3,0(r16)
8111a470:	da000117 	ldw	r8,4(sp)
8111a474:	1585c83a 	sub	r2,r2,r22
8111a478:	1dad883a 	add	r22,r3,r22
8111a47c:	80800215 	stw	r2,8(r16)
8111a480:	85800015 	stw	r22,0(r16)
8111a484:	003fbf06 	br	8111a384 <__reset+0xfb0fa384>
8111a488:	81000017 	ldw	r4,0(r16)
8111a48c:	9027883a 	mov	r19,r18
8111a490:	902f883a 	mov	r23,r18
8111a494:	003f6c06 	br	8111a248 <__reset+0xfb0fa248>
8111a498:	900d883a 	mov	r6,r18
8111a49c:	01400284 	movi	r5,10
8111a4a0:	e009883a 	mov	r4,fp
8111a4a4:	111ab7c0 	call	8111ab7c <memchr>
8111a4a8:	10003e26 	beq	r2,zero,8111a5a4 <__sfvwrite_r+0x4a0>
8111a4ac:	10800044 	addi	r2,r2,1
8111a4b0:	1727c83a 	sub	r19,r2,fp
8111a4b4:	02000044 	movi	r8,1
8111a4b8:	003f9d06 	br	8111a330 <__reset+0xfb0fa330>
8111a4bc:	80800517 	ldw	r2,20(r16)
8111a4c0:	81400417 	ldw	r5,16(r16)
8111a4c4:	81c00017 	ldw	r7,0(r16)
8111a4c8:	10a7883a 	add	r19,r2,r2
8111a4cc:	9885883a 	add	r2,r19,r2
8111a4d0:	1026d7fa 	srli	r19,r2,31
8111a4d4:	396dc83a 	sub	r22,r7,r5
8111a4d8:	b1000044 	addi	r4,r22,1
8111a4dc:	9885883a 	add	r2,r19,r2
8111a4e0:	1027d07a 	srai	r19,r2,1
8111a4e4:	2485883a 	add	r2,r4,r18
8111a4e8:	980d883a 	mov	r6,r19
8111a4ec:	9880022e 	bgeu	r19,r2,8111a4f8 <__sfvwrite_r+0x3f4>
8111a4f0:	1027883a 	mov	r19,r2
8111a4f4:	100d883a 	mov	r6,r2
8111a4f8:	18c1000c 	andi	r3,r3,1024
8111a4fc:	18001c26 	beq	r3,zero,8111a570 <__sfvwrite_r+0x46c>
8111a500:	300b883a 	mov	r5,r6
8111a504:	a809883a 	mov	r4,r21
8111a508:	11106940 	call	81110694 <_malloc_r>
8111a50c:	102f883a 	mov	r23,r2
8111a510:	10002926 	beq	r2,zero,8111a5b8 <__sfvwrite_r+0x4b4>
8111a514:	81400417 	ldw	r5,16(r16)
8111a518:	b00d883a 	mov	r6,r22
8111a51c:	1009883a 	mov	r4,r2
8111a520:	1110ea80 	call	81110ea8 <memcpy>
8111a524:	8080030b 	ldhu	r2,12(r16)
8111a528:	00fedfc4 	movi	r3,-1153
8111a52c:	10c4703a 	and	r2,r2,r3
8111a530:	10802014 	ori	r2,r2,128
8111a534:	8080030d 	sth	r2,12(r16)
8111a538:	bd89883a 	add	r4,r23,r22
8111a53c:	9d8fc83a 	sub	r7,r19,r22
8111a540:	85c00415 	stw	r23,16(r16)
8111a544:	84c00515 	stw	r19,20(r16)
8111a548:	81000015 	stw	r4,0(r16)
8111a54c:	9027883a 	mov	r19,r18
8111a550:	81c00215 	stw	r7,8(r16)
8111a554:	902f883a 	mov	r23,r18
8111a558:	003f3b06 	br	8111a248 <__reset+0xfb0fa248>
8111a55c:	800b883a 	mov	r5,r16
8111a560:	a809883a 	mov	r4,r21
8111a564:	11195580 	call	81119558 <_fflush_r>
8111a568:	103fb926 	beq	r2,zero,8111a450 <__reset+0xfb0fa450>
8111a56c:	003f6506 	br	8111a304 <__reset+0xfb0fa304>
8111a570:	a809883a 	mov	r4,r21
8111a574:	111be800 	call	8111be80 <_realloc_r>
8111a578:	102f883a 	mov	r23,r2
8111a57c:	103fee1e 	bne	r2,zero,8111a538 <__reset+0xfb0fa538>
8111a580:	81400417 	ldw	r5,16(r16)
8111a584:	a809883a 	mov	r4,r21
8111a588:	1119dec0 	call	81119dec <_free_r>
8111a58c:	8080030b 	ldhu	r2,12(r16)
8111a590:	00ffdfc4 	movi	r3,-129
8111a594:	1884703a 	and	r2,r3,r2
8111a598:	00c00304 	movi	r3,12
8111a59c:	a8c00015 	stw	r3,0(r21)
8111a5a0:	003f5906 	br	8111a308 <__reset+0xfb0fa308>
8111a5a4:	94c00044 	addi	r19,r18,1
8111a5a8:	02000044 	movi	r8,1
8111a5ac:	003f6006 	br	8111a330 <__reset+0xfb0fa330>
8111a5b0:	00bfffc4 	movi	r2,-1
8111a5b4:	003f0306 	br	8111a1c4 <__reset+0xfb0fa1c4>
8111a5b8:	00800304 	movi	r2,12
8111a5bc:	a8800015 	stw	r2,0(r21)
8111a5c0:	8080030b 	ldhu	r2,12(r16)
8111a5c4:	003f5006 	br	8111a308 <__reset+0xfb0fa308>

8111a5c8 <_fwalk>:
8111a5c8:	defff704 	addi	sp,sp,-36
8111a5cc:	de00012e 	bgeu	sp,et,8111a5d4 <_fwalk+0xc>
8111a5d0:	003b68fa 	trap	3
8111a5d4:	dd000415 	stw	r20,16(sp)
8111a5d8:	dfc00815 	stw	ra,32(sp)
8111a5dc:	ddc00715 	stw	r23,28(sp)
8111a5e0:	dd800615 	stw	r22,24(sp)
8111a5e4:	dd400515 	stw	r21,20(sp)
8111a5e8:	dcc00315 	stw	r19,12(sp)
8111a5ec:	dc800215 	stw	r18,8(sp)
8111a5f0:	dc400115 	stw	r17,4(sp)
8111a5f4:	dc000015 	stw	r16,0(sp)
8111a5f8:	2500b804 	addi	r20,r4,736
8111a5fc:	a0002326 	beq	r20,zero,8111a68c <_fwalk+0xc4>
8111a600:	282b883a 	mov	r21,r5
8111a604:	002f883a 	mov	r23,zero
8111a608:	05800044 	movi	r22,1
8111a60c:	04ffffc4 	movi	r19,-1
8111a610:	a4400117 	ldw	r17,4(r20)
8111a614:	a4800217 	ldw	r18,8(r20)
8111a618:	8c7fffc4 	addi	r17,r17,-1
8111a61c:	88000d16 	blt	r17,zero,8111a654 <_fwalk+0x8c>
8111a620:	94000304 	addi	r16,r18,12
8111a624:	94800384 	addi	r18,r18,14
8111a628:	8080000b 	ldhu	r2,0(r16)
8111a62c:	8c7fffc4 	addi	r17,r17,-1
8111a630:	813ffd04 	addi	r4,r16,-12
8111a634:	b080042e 	bgeu	r22,r2,8111a648 <_fwalk+0x80>
8111a638:	9080000f 	ldh	r2,0(r18)
8111a63c:	14c00226 	beq	r2,r19,8111a648 <_fwalk+0x80>
8111a640:	a83ee83a 	callr	r21
8111a644:	b8aeb03a 	or	r23,r23,r2
8111a648:	84001a04 	addi	r16,r16,104
8111a64c:	94801a04 	addi	r18,r18,104
8111a650:	8cfff51e 	bne	r17,r19,8111a628 <__reset+0xfb0fa628>
8111a654:	a5000017 	ldw	r20,0(r20)
8111a658:	a03fed1e 	bne	r20,zero,8111a610 <__reset+0xfb0fa610>
8111a65c:	b805883a 	mov	r2,r23
8111a660:	dfc00817 	ldw	ra,32(sp)
8111a664:	ddc00717 	ldw	r23,28(sp)
8111a668:	dd800617 	ldw	r22,24(sp)
8111a66c:	dd400517 	ldw	r21,20(sp)
8111a670:	dd000417 	ldw	r20,16(sp)
8111a674:	dcc00317 	ldw	r19,12(sp)
8111a678:	dc800217 	ldw	r18,8(sp)
8111a67c:	dc400117 	ldw	r17,4(sp)
8111a680:	dc000017 	ldw	r16,0(sp)
8111a684:	dec00904 	addi	sp,sp,36
8111a688:	f800283a 	ret
8111a68c:	002f883a 	mov	r23,zero
8111a690:	003ff206 	br	8111a65c <__reset+0xfb0fa65c>

8111a694 <_fwalk_reent>:
8111a694:	defff704 	addi	sp,sp,-36
8111a698:	de00012e 	bgeu	sp,et,8111a6a0 <_fwalk_reent+0xc>
8111a69c:	003b68fa 	trap	3
8111a6a0:	dd000415 	stw	r20,16(sp)
8111a6a4:	dfc00815 	stw	ra,32(sp)
8111a6a8:	ddc00715 	stw	r23,28(sp)
8111a6ac:	dd800615 	stw	r22,24(sp)
8111a6b0:	dd400515 	stw	r21,20(sp)
8111a6b4:	dcc00315 	stw	r19,12(sp)
8111a6b8:	dc800215 	stw	r18,8(sp)
8111a6bc:	dc400115 	stw	r17,4(sp)
8111a6c0:	dc000015 	stw	r16,0(sp)
8111a6c4:	2500b804 	addi	r20,r4,736
8111a6c8:	a0002326 	beq	r20,zero,8111a758 <_fwalk_reent+0xc4>
8111a6cc:	282b883a 	mov	r21,r5
8111a6d0:	2027883a 	mov	r19,r4
8111a6d4:	002f883a 	mov	r23,zero
8111a6d8:	05800044 	movi	r22,1
8111a6dc:	04bfffc4 	movi	r18,-1
8111a6e0:	a4400117 	ldw	r17,4(r20)
8111a6e4:	a4000217 	ldw	r16,8(r20)
8111a6e8:	8c7fffc4 	addi	r17,r17,-1
8111a6ec:	88000c16 	blt	r17,zero,8111a720 <_fwalk_reent+0x8c>
8111a6f0:	84000304 	addi	r16,r16,12
8111a6f4:	8080000b 	ldhu	r2,0(r16)
8111a6f8:	8c7fffc4 	addi	r17,r17,-1
8111a6fc:	817ffd04 	addi	r5,r16,-12
8111a700:	b080052e 	bgeu	r22,r2,8111a718 <_fwalk_reent+0x84>
8111a704:	8080008f 	ldh	r2,2(r16)
8111a708:	9809883a 	mov	r4,r19
8111a70c:	14800226 	beq	r2,r18,8111a718 <_fwalk_reent+0x84>
8111a710:	a83ee83a 	callr	r21
8111a714:	b8aeb03a 	or	r23,r23,r2
8111a718:	84001a04 	addi	r16,r16,104
8111a71c:	8cbff51e 	bne	r17,r18,8111a6f4 <__reset+0xfb0fa6f4>
8111a720:	a5000017 	ldw	r20,0(r20)
8111a724:	a03fee1e 	bne	r20,zero,8111a6e0 <__reset+0xfb0fa6e0>
8111a728:	b805883a 	mov	r2,r23
8111a72c:	dfc00817 	ldw	ra,32(sp)
8111a730:	ddc00717 	ldw	r23,28(sp)
8111a734:	dd800617 	ldw	r22,24(sp)
8111a738:	dd400517 	ldw	r21,20(sp)
8111a73c:	dd000417 	ldw	r20,16(sp)
8111a740:	dcc00317 	ldw	r19,12(sp)
8111a744:	dc800217 	ldw	r18,8(sp)
8111a748:	dc400117 	ldw	r17,4(sp)
8111a74c:	dc000017 	ldw	r16,0(sp)
8111a750:	dec00904 	addi	sp,sp,36
8111a754:	f800283a 	ret
8111a758:	002f883a 	mov	r23,zero
8111a75c:	003ff206 	br	8111a728 <__reset+0xfb0fa728>

8111a760 <_isatty_r>:
8111a760:	defffd04 	addi	sp,sp,-12
8111a764:	de00012e 	bgeu	sp,et,8111a76c <_isatty_r+0xc>
8111a768:	003b68fa 	trap	3
8111a76c:	dc000015 	stw	r16,0(sp)
8111a770:	04204534 	movhi	r16,33044
8111a774:	dc400115 	stw	r17,4(sp)
8111a778:	843a8004 	addi	r16,r16,-5632
8111a77c:	2023883a 	mov	r17,r4
8111a780:	2809883a 	mov	r4,r5
8111a784:	dfc00215 	stw	ra,8(sp)
8111a788:	80000015 	stw	zero,0(r16)
8111a78c:	1125a100 	call	81125a10 <isatty>
8111a790:	00ffffc4 	movi	r3,-1
8111a794:	10c00526 	beq	r2,r3,8111a7ac <_isatty_r+0x4c>
8111a798:	dfc00217 	ldw	ra,8(sp)
8111a79c:	dc400117 	ldw	r17,4(sp)
8111a7a0:	dc000017 	ldw	r16,0(sp)
8111a7a4:	dec00304 	addi	sp,sp,12
8111a7a8:	f800283a 	ret
8111a7ac:	80c00017 	ldw	r3,0(r16)
8111a7b0:	183ff926 	beq	r3,zero,8111a798 <__reset+0xfb0fa798>
8111a7b4:	88c00015 	stw	r3,0(r17)
8111a7b8:	003ff706 	br	8111a798 <__reset+0xfb0fa798>

8111a7bc <iswspace>:
8111a7bc:	00803fc4 	movi	r2,255
8111a7c0:	11000836 	bltu	r2,r4,8111a7e4 <iswspace+0x28>
8111a7c4:	00a04534 	movhi	r2,33044
8111a7c8:	10ba2504 	addi	r2,r2,-5996
8111a7cc:	10800017 	ldw	r2,0(r2)
8111a7d0:	1109883a 	add	r4,r2,r4
8111a7d4:	20800043 	ldbu	r2,1(r4)
8111a7d8:	1080020c 	andi	r2,r2,8
8111a7dc:	10803fcc 	andi	r2,r2,255
8111a7e0:	f800283a 	ret
8111a7e4:	0005883a 	mov	r2,zero
8111a7e8:	f800283a 	ret

8111a7ec <_setlocale_r>:
8111a7ec:	30001d26 	beq	r6,zero,8111a864 <_setlocale_r+0x78>
8111a7f0:	01604534 	movhi	r5,33044
8111a7f4:	defffe04 	addi	sp,sp,-8
8111a7f8:	29714c04 	addi	r5,r5,-15056
8111a7fc:	3009883a 	mov	r4,r6
8111a800:	de00012e 	bgeu	sp,et,8111a808 <_setlocale_r+0x1c>
8111a804:	003b68fa 	trap	3
8111a808:	dc000015 	stw	r16,0(sp)
8111a80c:	dfc00115 	stw	ra,4(sp)
8111a810:	3021883a 	mov	r16,r6
8111a814:	111c5380 	call	8111c538 <strcmp>
8111a818:	1000061e 	bne	r2,zero,8111a834 <_setlocale_r+0x48>
8111a81c:	00a04534 	movhi	r2,33044
8111a820:	10b11b04 	addi	r2,r2,-15252
8111a824:	dfc00117 	ldw	ra,4(sp)
8111a828:	dc000017 	ldw	r16,0(sp)
8111a82c:	dec00204 	addi	sp,sp,8
8111a830:	f800283a 	ret
8111a834:	01604534 	movhi	r5,33044
8111a838:	29711b04 	addi	r5,r5,-15252
8111a83c:	8009883a 	mov	r4,r16
8111a840:	111c5380 	call	8111c538 <strcmp>
8111a844:	103ff526 	beq	r2,zero,8111a81c <__reset+0xfb0fa81c>
8111a848:	01604534 	movhi	r5,33044
8111a84c:	29712504 	addi	r5,r5,-15212
8111a850:	8009883a 	mov	r4,r16
8111a854:	111c5380 	call	8111c538 <strcmp>
8111a858:	103ff026 	beq	r2,zero,8111a81c <__reset+0xfb0fa81c>
8111a85c:	0005883a 	mov	r2,zero
8111a860:	003ff006 	br	8111a824 <__reset+0xfb0fa824>
8111a864:	00a04534 	movhi	r2,33044
8111a868:	10b11b04 	addi	r2,r2,-15252
8111a86c:	f800283a 	ret

8111a870 <__locale_charset>:
8111a870:	00a04534 	movhi	r2,33044
8111a874:	10b51604 	addi	r2,r2,-11176
8111a878:	f800283a 	ret

8111a87c <__locale_mb_cur_max>:
8111a87c:	00a04534 	movhi	r2,33044
8111a880:	10ba2a04 	addi	r2,r2,-5976
8111a884:	10800017 	ldw	r2,0(r2)
8111a888:	f800283a 	ret

8111a88c <__locale_msgcharset>:
8111a88c:	00a04534 	movhi	r2,33044
8111a890:	10b50e04 	addi	r2,r2,-11208
8111a894:	f800283a 	ret

8111a898 <__locale_cjk_lang>:
8111a898:	0005883a 	mov	r2,zero
8111a89c:	f800283a 	ret

8111a8a0 <_localeconv_r>:
8111a8a0:	00a04534 	movhi	r2,33044
8111a8a4:	10b51e04 	addi	r2,r2,-11144
8111a8a8:	f800283a 	ret

8111a8ac <setlocale>:
8111a8ac:	00a04534 	movhi	r2,33044
8111a8b0:	10ba2704 	addi	r2,r2,-5988
8111a8b4:	280d883a 	mov	r6,r5
8111a8b8:	200b883a 	mov	r5,r4
8111a8bc:	11000017 	ldw	r4,0(r2)
8111a8c0:	111a7ec1 	jmpi	8111a7ec <_setlocale_r>

8111a8c4 <localeconv>:
8111a8c4:	00a04534 	movhi	r2,33044
8111a8c8:	10b51e04 	addi	r2,r2,-11144
8111a8cc:	f800283a 	ret

8111a8d0 <_lseek_r>:
8111a8d0:	defffd04 	addi	sp,sp,-12
8111a8d4:	de00012e 	bgeu	sp,et,8111a8dc <_lseek_r+0xc>
8111a8d8:	003b68fa 	trap	3
8111a8dc:	2805883a 	mov	r2,r5
8111a8e0:	dc000015 	stw	r16,0(sp)
8111a8e4:	04204534 	movhi	r16,33044
8111a8e8:	dc400115 	stw	r17,4(sp)
8111a8ec:	300b883a 	mov	r5,r6
8111a8f0:	843a8004 	addi	r16,r16,-5632
8111a8f4:	2023883a 	mov	r17,r4
8111a8f8:	380d883a 	mov	r6,r7
8111a8fc:	1009883a 	mov	r4,r2
8111a900:	dfc00215 	stw	ra,8(sp)
8111a904:	80000015 	stw	zero,0(r16)
8111a908:	1125b000 	call	81125b00 <lseek>
8111a90c:	00ffffc4 	movi	r3,-1
8111a910:	10c00526 	beq	r2,r3,8111a928 <_lseek_r+0x58>
8111a914:	dfc00217 	ldw	ra,8(sp)
8111a918:	dc400117 	ldw	r17,4(sp)
8111a91c:	dc000017 	ldw	r16,0(sp)
8111a920:	dec00304 	addi	sp,sp,12
8111a924:	f800283a 	ret
8111a928:	80c00017 	ldw	r3,0(r16)
8111a92c:	183ff926 	beq	r3,zero,8111a914 <__reset+0xfb0fa914>
8111a930:	88c00015 	stw	r3,0(r17)
8111a934:	003ff706 	br	8111a914 <__reset+0xfb0fa914>

8111a938 <_mbrtowc_r>:
8111a938:	defff704 	addi	sp,sp,-36
8111a93c:	00a04534 	movhi	r2,33044
8111a940:	de00012e 	bgeu	sp,et,8111a948 <_mbrtowc_r+0x10>
8111a944:	003b68fa 	trap	3
8111a948:	10ba2b04 	addi	r2,r2,-5972
8111a94c:	dc800715 	stw	r18,28(sp)
8111a950:	dc400615 	stw	r17,24(sp)
8111a954:	dc000515 	stw	r16,20(sp)
8111a958:	dfc00815 	stw	ra,32(sp)
8111a95c:	2021883a 	mov	r16,r4
8111a960:	dc400917 	ldw	r17,36(sp)
8111a964:	14800017 	ldw	r18,0(r2)
8111a968:	30001626 	beq	r6,zero,8111a9c4 <_mbrtowc_r+0x8c>
8111a96c:	d9400215 	stw	r5,8(sp)
8111a970:	d9800315 	stw	r6,12(sp)
8111a974:	d9c00415 	stw	r7,16(sp)
8111a978:	111a8700 	call	8111a870 <__locale_charset>
8111a97c:	d9c00417 	ldw	r7,16(sp)
8111a980:	d9800317 	ldw	r6,12(sp)
8111a984:	d9400217 	ldw	r5,8(sp)
8111a988:	d8800015 	stw	r2,0(sp)
8111a98c:	dc400115 	stw	r17,4(sp)
8111a990:	8009883a 	mov	r4,r16
8111a994:	903ee83a 	callr	r18
8111a998:	00ffffc4 	movi	r3,-1
8111a99c:	10c0031e 	bne	r2,r3,8111a9ac <_mbrtowc_r+0x74>
8111a9a0:	88000015 	stw	zero,0(r17)
8111a9a4:	00c02284 	movi	r3,138
8111a9a8:	80c00015 	stw	r3,0(r16)
8111a9ac:	dfc00817 	ldw	ra,32(sp)
8111a9b0:	dc800717 	ldw	r18,28(sp)
8111a9b4:	dc400617 	ldw	r17,24(sp)
8111a9b8:	dc000517 	ldw	r16,20(sp)
8111a9bc:	dec00904 	addi	sp,sp,36
8111a9c0:	f800283a 	ret
8111a9c4:	111a8700 	call	8111a870 <__locale_charset>
8111a9c8:	01a04534 	movhi	r6,33044
8111a9cc:	31b12504 	addi	r6,r6,-15212
8111a9d0:	dc400115 	stw	r17,4(sp)
8111a9d4:	d8800015 	stw	r2,0(sp)
8111a9d8:	01c00044 	movi	r7,1
8111a9dc:	000b883a 	mov	r5,zero
8111a9e0:	8009883a 	mov	r4,r16
8111a9e4:	903ee83a 	callr	r18
8111a9e8:	003feb06 	br	8111a998 <__reset+0xfb0fa998>

8111a9ec <mbrtowc>:
8111a9ec:	defff704 	addi	sp,sp,-36
8111a9f0:	00a04534 	movhi	r2,33044
8111a9f4:	de00012e 	bgeu	sp,et,8111a9fc <mbrtowc+0x10>
8111a9f8:	003b68fa 	trap	3
8111a9fc:	10ba2704 	addi	r2,r2,-5988
8111aa00:	dc800415 	stw	r18,16(sp)
8111aa04:	dc400315 	stw	r17,12(sp)
8111aa08:	dfc00815 	stw	ra,32(sp)
8111aa0c:	dd400715 	stw	r21,28(sp)
8111aa10:	dd000615 	stw	r20,24(sp)
8111aa14:	dcc00515 	stw	r19,20(sp)
8111aa18:	dc000215 	stw	r16,8(sp)
8111aa1c:	3825883a 	mov	r18,r7
8111aa20:	14400017 	ldw	r17,0(r2)
8111aa24:	28001c26 	beq	r5,zero,8111aa98 <mbrtowc+0xac>
8111aa28:	00a04534 	movhi	r2,33044
8111aa2c:	10ba2b04 	addi	r2,r2,-5972
8111aa30:	15400017 	ldw	r21,0(r2)
8111aa34:	2821883a 	mov	r16,r5
8111aa38:	2027883a 	mov	r19,r4
8111aa3c:	3029883a 	mov	r20,r6
8111aa40:	111a8700 	call	8111a870 <__locale_charset>
8111aa44:	d8800015 	stw	r2,0(sp)
8111aa48:	dc800115 	stw	r18,4(sp)
8111aa4c:	a00f883a 	mov	r7,r20
8111aa50:	800d883a 	mov	r6,r16
8111aa54:	980b883a 	mov	r5,r19
8111aa58:	8809883a 	mov	r4,r17
8111aa5c:	a83ee83a 	callr	r21
8111aa60:	00ffffc4 	movi	r3,-1
8111aa64:	10c0031e 	bne	r2,r3,8111aa74 <mbrtowc+0x88>
8111aa68:	90000015 	stw	zero,0(r18)
8111aa6c:	00c02284 	movi	r3,138
8111aa70:	88c00015 	stw	r3,0(r17)
8111aa74:	dfc00817 	ldw	ra,32(sp)
8111aa78:	dd400717 	ldw	r21,28(sp)
8111aa7c:	dd000617 	ldw	r20,24(sp)
8111aa80:	dcc00517 	ldw	r19,20(sp)
8111aa84:	dc800417 	ldw	r18,16(sp)
8111aa88:	dc400317 	ldw	r17,12(sp)
8111aa8c:	dc000217 	ldw	r16,8(sp)
8111aa90:	dec00904 	addi	sp,sp,36
8111aa94:	f800283a 	ret
8111aa98:	00a04534 	movhi	r2,33044
8111aa9c:	10ba2b04 	addi	r2,r2,-5972
8111aaa0:	14000017 	ldw	r16,0(r2)
8111aaa4:	111a8700 	call	8111a870 <__locale_charset>
8111aaa8:	01a04534 	movhi	r6,33044
8111aaac:	31b12504 	addi	r6,r6,-15212
8111aab0:	dc800115 	stw	r18,4(sp)
8111aab4:	d8800015 	stw	r2,0(sp)
8111aab8:	01c00044 	movi	r7,1
8111aabc:	000b883a 	mov	r5,zero
8111aac0:	8809883a 	mov	r4,r17
8111aac4:	803ee83a 	callr	r16
8111aac8:	003fe506 	br	8111aa60 <__reset+0xfb0faa60>

8111aacc <__ascii_mbtowc>:
8111aacc:	deffff04 	addi	sp,sp,-4
8111aad0:	de00012e 	bgeu	sp,et,8111aad8 <__ascii_mbtowc+0xc>
8111aad4:	003b68fa 	trap	3
8111aad8:	28000826 	beq	r5,zero,8111aafc <__ascii_mbtowc+0x30>
8111aadc:	30000926 	beq	r6,zero,8111ab04 <__ascii_mbtowc+0x38>
8111aae0:	38000b26 	beq	r7,zero,8111ab10 <__ascii_mbtowc+0x44>
8111aae4:	30800003 	ldbu	r2,0(r6)
8111aae8:	28800015 	stw	r2,0(r5)
8111aaec:	30800003 	ldbu	r2,0(r6)
8111aaf0:	1004c03a 	cmpne	r2,r2,zero
8111aaf4:	dec00104 	addi	sp,sp,4
8111aaf8:	f800283a 	ret
8111aafc:	d80b883a 	mov	r5,sp
8111ab00:	303ff71e 	bne	r6,zero,8111aae0 <__reset+0xfb0faae0>
8111ab04:	0005883a 	mov	r2,zero
8111ab08:	dec00104 	addi	sp,sp,4
8111ab0c:	f800283a 	ret
8111ab10:	00bfff84 	movi	r2,-2
8111ab14:	003ff706 	br	8111aaf4 <__reset+0xfb0faaf4>

8111ab18 <_mbtowc_r>:
8111ab18:	00a04534 	movhi	r2,33044
8111ab1c:	defff804 	addi	sp,sp,-32
8111ab20:	10ba2b04 	addi	r2,r2,-5972
8111ab24:	de00012e 	bgeu	sp,et,8111ab2c <_mbtowc_r+0x14>
8111ab28:	003b68fa 	trap	3
8111ab2c:	dfc00715 	stw	ra,28(sp)
8111ab30:	dc000615 	stw	r16,24(sp)
8111ab34:	14000017 	ldw	r16,0(r2)
8111ab38:	d9000215 	stw	r4,8(sp)
8111ab3c:	d9400315 	stw	r5,12(sp)
8111ab40:	d9800415 	stw	r6,16(sp)
8111ab44:	d9c00515 	stw	r7,20(sp)
8111ab48:	111a8700 	call	8111a870 <__locale_charset>
8111ab4c:	d8800015 	stw	r2,0(sp)
8111ab50:	d8800817 	ldw	r2,32(sp)
8111ab54:	d9c00517 	ldw	r7,20(sp)
8111ab58:	d9800417 	ldw	r6,16(sp)
8111ab5c:	d9400317 	ldw	r5,12(sp)
8111ab60:	d9000217 	ldw	r4,8(sp)
8111ab64:	d8800115 	stw	r2,4(sp)
8111ab68:	803ee83a 	callr	r16
8111ab6c:	dfc00717 	ldw	ra,28(sp)
8111ab70:	dc000617 	ldw	r16,24(sp)
8111ab74:	dec00804 	addi	sp,sp,32
8111ab78:	f800283a 	ret

8111ab7c <memchr>:
8111ab7c:	208000cc 	andi	r2,r4,3
8111ab80:	280f883a 	mov	r7,r5
8111ab84:	10003426 	beq	r2,zero,8111ac58 <memchr+0xdc>
8111ab88:	30bfffc4 	addi	r2,r6,-1
8111ab8c:	30001a26 	beq	r6,zero,8111abf8 <memchr+0x7c>
8111ab90:	20c00003 	ldbu	r3,0(r4)
8111ab94:	29803fcc 	andi	r6,r5,255
8111ab98:	30c0051e 	bne	r6,r3,8111abb0 <memchr+0x34>
8111ab9c:	00001806 	br	8111ac00 <memchr+0x84>
8111aba0:	10001526 	beq	r2,zero,8111abf8 <memchr+0x7c>
8111aba4:	20c00003 	ldbu	r3,0(r4)
8111aba8:	10bfffc4 	addi	r2,r2,-1
8111abac:	30c01426 	beq	r6,r3,8111ac00 <memchr+0x84>
8111abb0:	21000044 	addi	r4,r4,1
8111abb4:	20c000cc 	andi	r3,r4,3
8111abb8:	183ff91e 	bne	r3,zero,8111aba0 <__reset+0xfb0faba0>
8111abbc:	020000c4 	movi	r8,3
8111abc0:	40801136 	bltu	r8,r2,8111ac08 <memchr+0x8c>
8111abc4:	10000c26 	beq	r2,zero,8111abf8 <memchr+0x7c>
8111abc8:	20c00003 	ldbu	r3,0(r4)
8111abcc:	29403fcc 	andi	r5,r5,255
8111abd0:	28c00b26 	beq	r5,r3,8111ac00 <memchr+0x84>
8111abd4:	20c00044 	addi	r3,r4,1
8111abd8:	39803fcc 	andi	r6,r7,255
8111abdc:	2089883a 	add	r4,r4,r2
8111abe0:	00000306 	br	8111abf0 <memchr+0x74>
8111abe4:	18c00044 	addi	r3,r3,1
8111abe8:	197fffc3 	ldbu	r5,-1(r3)
8111abec:	31400526 	beq	r6,r5,8111ac04 <memchr+0x88>
8111abf0:	1805883a 	mov	r2,r3
8111abf4:	20fffb1e 	bne	r4,r3,8111abe4 <__reset+0xfb0fabe4>
8111abf8:	0005883a 	mov	r2,zero
8111abfc:	f800283a 	ret
8111ac00:	2005883a 	mov	r2,r4
8111ac04:	f800283a 	ret
8111ac08:	28c03fcc 	andi	r3,r5,255
8111ac0c:	1812923a 	slli	r9,r3,8
8111ac10:	02ffbff4 	movhi	r11,65279
8111ac14:	02a02074 	movhi	r10,32897
8111ac18:	48d2b03a 	or	r9,r9,r3
8111ac1c:	4806943a 	slli	r3,r9,16
8111ac20:	5affbfc4 	addi	r11,r11,-257
8111ac24:	52a02004 	addi	r10,r10,-32640
8111ac28:	48d2b03a 	or	r9,r9,r3
8111ac2c:	20c00017 	ldw	r3,0(r4)
8111ac30:	48c6f03a 	xor	r3,r9,r3
8111ac34:	1acd883a 	add	r6,r3,r11
8111ac38:	00c6303a 	nor	r3,zero,r3
8111ac3c:	30c6703a 	and	r3,r6,r3
8111ac40:	1a86703a 	and	r3,r3,r10
8111ac44:	183fe01e 	bne	r3,zero,8111abc8 <__reset+0xfb0fabc8>
8111ac48:	10bfff04 	addi	r2,r2,-4
8111ac4c:	21000104 	addi	r4,r4,4
8111ac50:	40bff636 	bltu	r8,r2,8111ac2c <__reset+0xfb0fac2c>
8111ac54:	003fdb06 	br	8111abc4 <__reset+0xfb0fabc4>
8111ac58:	3005883a 	mov	r2,r6
8111ac5c:	003fd706 	br	8111abbc <__reset+0xfb0fabbc>

8111ac60 <memmove>:
8111ac60:	2005883a 	mov	r2,r4
8111ac64:	29000b2e 	bgeu	r5,r4,8111ac94 <memmove+0x34>
8111ac68:	298f883a 	add	r7,r5,r6
8111ac6c:	21c0092e 	bgeu	r4,r7,8111ac94 <memmove+0x34>
8111ac70:	2187883a 	add	r3,r4,r6
8111ac74:	198bc83a 	sub	r5,r3,r6
8111ac78:	30004826 	beq	r6,zero,8111ad9c <memmove+0x13c>
8111ac7c:	39ffffc4 	addi	r7,r7,-1
8111ac80:	39000003 	ldbu	r4,0(r7)
8111ac84:	18ffffc4 	addi	r3,r3,-1
8111ac88:	19000005 	stb	r4,0(r3)
8111ac8c:	28fffb1e 	bne	r5,r3,8111ac7c <__reset+0xfb0fac7c>
8111ac90:	f800283a 	ret
8111ac94:	00c003c4 	movi	r3,15
8111ac98:	1980412e 	bgeu	r3,r6,8111ada0 <memmove+0x140>
8111ac9c:	2886b03a 	or	r3,r5,r2
8111aca0:	18c000cc 	andi	r3,r3,3
8111aca4:	1800401e 	bne	r3,zero,8111ada8 <memmove+0x148>
8111aca8:	33fffc04 	addi	r15,r6,-16
8111acac:	781ed13a 	srli	r15,r15,4
8111acb0:	28c00104 	addi	r3,r5,4
8111acb4:	13400104 	addi	r13,r2,4
8111acb8:	781c913a 	slli	r14,r15,4
8111acbc:	2b000204 	addi	r12,r5,8
8111acc0:	12c00204 	addi	r11,r2,8
8111acc4:	73800504 	addi	r14,r14,20
8111acc8:	2a800304 	addi	r10,r5,12
8111accc:	12400304 	addi	r9,r2,12
8111acd0:	2b9d883a 	add	r14,r5,r14
8111acd4:	2811883a 	mov	r8,r5
8111acd8:	100f883a 	mov	r7,r2
8111acdc:	41000017 	ldw	r4,0(r8)
8111ace0:	39c00404 	addi	r7,r7,16
8111ace4:	18c00404 	addi	r3,r3,16
8111ace8:	393ffc15 	stw	r4,-16(r7)
8111acec:	193ffc17 	ldw	r4,-16(r3)
8111acf0:	6b400404 	addi	r13,r13,16
8111acf4:	5ac00404 	addi	r11,r11,16
8111acf8:	693ffc15 	stw	r4,-16(r13)
8111acfc:	61000017 	ldw	r4,0(r12)
8111ad00:	4a400404 	addi	r9,r9,16
8111ad04:	42000404 	addi	r8,r8,16
8111ad08:	593ffc15 	stw	r4,-16(r11)
8111ad0c:	51000017 	ldw	r4,0(r10)
8111ad10:	63000404 	addi	r12,r12,16
8111ad14:	52800404 	addi	r10,r10,16
8111ad18:	493ffc15 	stw	r4,-16(r9)
8111ad1c:	1bbfef1e 	bne	r3,r14,8111acdc <__reset+0xfb0facdc>
8111ad20:	79000044 	addi	r4,r15,1
8111ad24:	2008913a 	slli	r4,r4,4
8111ad28:	328003cc 	andi	r10,r6,15
8111ad2c:	02c000c4 	movi	r11,3
8111ad30:	1107883a 	add	r3,r2,r4
8111ad34:	290b883a 	add	r5,r5,r4
8111ad38:	5a801e2e 	bgeu	r11,r10,8111adb4 <memmove+0x154>
8111ad3c:	1813883a 	mov	r9,r3
8111ad40:	2811883a 	mov	r8,r5
8111ad44:	500f883a 	mov	r7,r10
8111ad48:	41000017 	ldw	r4,0(r8)
8111ad4c:	4a400104 	addi	r9,r9,4
8111ad50:	39ffff04 	addi	r7,r7,-4
8111ad54:	493fff15 	stw	r4,-4(r9)
8111ad58:	42000104 	addi	r8,r8,4
8111ad5c:	59fffa36 	bltu	r11,r7,8111ad48 <__reset+0xfb0fad48>
8111ad60:	513fff04 	addi	r4,r10,-4
8111ad64:	2008d0ba 	srli	r4,r4,2
8111ad68:	318000cc 	andi	r6,r6,3
8111ad6c:	21000044 	addi	r4,r4,1
8111ad70:	2109883a 	add	r4,r4,r4
8111ad74:	2109883a 	add	r4,r4,r4
8111ad78:	1907883a 	add	r3,r3,r4
8111ad7c:	290b883a 	add	r5,r5,r4
8111ad80:	30000b26 	beq	r6,zero,8111adb0 <memmove+0x150>
8111ad84:	198d883a 	add	r6,r3,r6
8111ad88:	29c00003 	ldbu	r7,0(r5)
8111ad8c:	18c00044 	addi	r3,r3,1
8111ad90:	29400044 	addi	r5,r5,1
8111ad94:	19ffffc5 	stb	r7,-1(r3)
8111ad98:	19bffb1e 	bne	r3,r6,8111ad88 <__reset+0xfb0fad88>
8111ad9c:	f800283a 	ret
8111ada0:	1007883a 	mov	r3,r2
8111ada4:	003ff606 	br	8111ad80 <__reset+0xfb0fad80>
8111ada8:	1007883a 	mov	r3,r2
8111adac:	003ff506 	br	8111ad84 <__reset+0xfb0fad84>
8111adb0:	f800283a 	ret
8111adb4:	500d883a 	mov	r6,r10
8111adb8:	003ff106 	br	8111ad80 <__reset+0xfb0fad80>

8111adbc <_Balloc>:
8111adbc:	defffc04 	addi	sp,sp,-16
8111adc0:	de00012e 	bgeu	sp,et,8111adc8 <_Balloc+0xc>
8111adc4:	003b68fa 	trap	3
8111adc8:	20801317 	ldw	r2,76(r4)
8111adcc:	dc400115 	stw	r17,4(sp)
8111add0:	dc000015 	stw	r16,0(sp)
8111add4:	dfc00315 	stw	ra,12(sp)
8111add8:	dc800215 	stw	r18,8(sp)
8111addc:	2023883a 	mov	r17,r4
8111ade0:	2821883a 	mov	r16,r5
8111ade4:	10000f26 	beq	r2,zero,8111ae24 <_Balloc+0x68>
8111ade8:	8407883a 	add	r3,r16,r16
8111adec:	18c7883a 	add	r3,r3,r3
8111adf0:	10c7883a 	add	r3,r2,r3
8111adf4:	18800017 	ldw	r2,0(r3)
8111adf8:	10001126 	beq	r2,zero,8111ae40 <_Balloc+0x84>
8111adfc:	11000017 	ldw	r4,0(r2)
8111ae00:	19000015 	stw	r4,0(r3)
8111ae04:	10000415 	stw	zero,16(r2)
8111ae08:	10000315 	stw	zero,12(r2)
8111ae0c:	dfc00317 	ldw	ra,12(sp)
8111ae10:	dc800217 	ldw	r18,8(sp)
8111ae14:	dc400117 	ldw	r17,4(sp)
8111ae18:	dc000017 	ldw	r16,0(sp)
8111ae1c:	dec00404 	addi	sp,sp,16
8111ae20:	f800283a 	ret
8111ae24:	01800844 	movi	r6,33
8111ae28:	01400104 	movi	r5,4
8111ae2c:	11212e40 	call	811212e4 <_calloc_r>
8111ae30:	88801315 	stw	r2,76(r17)
8111ae34:	103fec1e 	bne	r2,zero,8111ade8 <__reset+0xfb0fade8>
8111ae38:	0005883a 	mov	r2,zero
8111ae3c:	003ff306 	br	8111ae0c <__reset+0xfb0fae0c>
8111ae40:	01400044 	movi	r5,1
8111ae44:	2c24983a 	sll	r18,r5,r16
8111ae48:	8809883a 	mov	r4,r17
8111ae4c:	91800144 	addi	r6,r18,5
8111ae50:	318d883a 	add	r6,r6,r6
8111ae54:	318d883a 	add	r6,r6,r6
8111ae58:	11212e40 	call	811212e4 <_calloc_r>
8111ae5c:	103ff626 	beq	r2,zero,8111ae38 <__reset+0xfb0fae38>
8111ae60:	14000115 	stw	r16,4(r2)
8111ae64:	14800215 	stw	r18,8(r2)
8111ae68:	003fe606 	br	8111ae04 <__reset+0xfb0fae04>

8111ae6c <_Bfree>:
8111ae6c:	28000826 	beq	r5,zero,8111ae90 <_Bfree+0x24>
8111ae70:	28c00117 	ldw	r3,4(r5)
8111ae74:	20801317 	ldw	r2,76(r4)
8111ae78:	18c7883a 	add	r3,r3,r3
8111ae7c:	18c7883a 	add	r3,r3,r3
8111ae80:	10c5883a 	add	r2,r2,r3
8111ae84:	10c00017 	ldw	r3,0(r2)
8111ae88:	28c00015 	stw	r3,0(r5)
8111ae8c:	11400015 	stw	r5,0(r2)
8111ae90:	f800283a 	ret

8111ae94 <__multadd>:
8111ae94:	defffa04 	addi	sp,sp,-24
8111ae98:	de00012e 	bgeu	sp,et,8111aea0 <__multadd+0xc>
8111ae9c:	003b68fa 	trap	3
8111aea0:	0011883a 	mov	r8,zero
8111aea4:	dc800315 	stw	r18,12(sp)
8111aea8:	dc400215 	stw	r17,8(sp)
8111aeac:	dc000115 	stw	r16,4(sp)
8111aeb0:	2823883a 	mov	r17,r5
8111aeb4:	2c000417 	ldw	r16,16(r5)
8111aeb8:	dfc00515 	stw	ra,20(sp)
8111aebc:	dcc00415 	stw	r19,16(sp)
8111aec0:	2025883a 	mov	r18,r4
8111aec4:	29400504 	addi	r5,r5,20
8111aec8:	28c00017 	ldw	r3,0(r5)
8111aecc:	29400104 	addi	r5,r5,4
8111aed0:	42000044 	addi	r8,r8,1
8111aed4:	18bfffcc 	andi	r2,r3,65535
8111aed8:	1185383a 	mul	r2,r2,r6
8111aedc:	1806d43a 	srli	r3,r3,16
8111aee0:	11cf883a 	add	r7,r2,r7
8111aee4:	3808d43a 	srli	r4,r7,16
8111aee8:	1987383a 	mul	r3,r3,r6
8111aeec:	38bfffcc 	andi	r2,r7,65535
8111aef0:	1907883a 	add	r3,r3,r4
8111aef4:	1808943a 	slli	r4,r3,16
8111aef8:	180ed43a 	srli	r7,r3,16
8111aefc:	2085883a 	add	r2,r4,r2
8111af00:	28bfff15 	stw	r2,-4(r5)
8111af04:	443ff016 	blt	r8,r16,8111aec8 <__reset+0xfb0faec8>
8111af08:	38000926 	beq	r7,zero,8111af30 <__multadd+0x9c>
8111af0c:	88800217 	ldw	r2,8(r17)
8111af10:	80800f0e 	bge	r16,r2,8111af50 <__multadd+0xbc>
8111af14:	80800144 	addi	r2,r16,5
8111af18:	1085883a 	add	r2,r2,r2
8111af1c:	1085883a 	add	r2,r2,r2
8111af20:	8885883a 	add	r2,r17,r2
8111af24:	11c00015 	stw	r7,0(r2)
8111af28:	84000044 	addi	r16,r16,1
8111af2c:	8c000415 	stw	r16,16(r17)
8111af30:	8805883a 	mov	r2,r17
8111af34:	dfc00517 	ldw	ra,20(sp)
8111af38:	dcc00417 	ldw	r19,16(sp)
8111af3c:	dc800317 	ldw	r18,12(sp)
8111af40:	dc400217 	ldw	r17,8(sp)
8111af44:	dc000117 	ldw	r16,4(sp)
8111af48:	dec00604 	addi	sp,sp,24
8111af4c:	f800283a 	ret
8111af50:	89400117 	ldw	r5,4(r17)
8111af54:	9009883a 	mov	r4,r18
8111af58:	d9c00015 	stw	r7,0(sp)
8111af5c:	29400044 	addi	r5,r5,1
8111af60:	111adbc0 	call	8111adbc <_Balloc>
8111af64:	89800417 	ldw	r6,16(r17)
8111af68:	89400304 	addi	r5,r17,12
8111af6c:	11000304 	addi	r4,r2,12
8111af70:	31800084 	addi	r6,r6,2
8111af74:	318d883a 	add	r6,r6,r6
8111af78:	318d883a 	add	r6,r6,r6
8111af7c:	1027883a 	mov	r19,r2
8111af80:	1110ea80 	call	81110ea8 <memcpy>
8111af84:	d9c00017 	ldw	r7,0(sp)
8111af88:	88000a26 	beq	r17,zero,8111afb4 <__multadd+0x120>
8111af8c:	88c00117 	ldw	r3,4(r17)
8111af90:	90801317 	ldw	r2,76(r18)
8111af94:	18c7883a 	add	r3,r3,r3
8111af98:	18c7883a 	add	r3,r3,r3
8111af9c:	10c5883a 	add	r2,r2,r3
8111afa0:	10c00017 	ldw	r3,0(r2)
8111afa4:	88c00015 	stw	r3,0(r17)
8111afa8:	14400015 	stw	r17,0(r2)
8111afac:	9823883a 	mov	r17,r19
8111afb0:	003fd806 	br	8111af14 <__reset+0xfb0faf14>
8111afb4:	9823883a 	mov	r17,r19
8111afb8:	003fd606 	br	8111af14 <__reset+0xfb0faf14>

8111afbc <__s2b>:
8111afbc:	defff904 	addi	sp,sp,-28
8111afc0:	de00012e 	bgeu	sp,et,8111afc8 <__s2b+0xc>
8111afc4:	003b68fa 	trap	3
8111afc8:	dc400115 	stw	r17,4(sp)
8111afcc:	dc000015 	stw	r16,0(sp)
8111afd0:	2023883a 	mov	r17,r4
8111afd4:	2821883a 	mov	r16,r5
8111afd8:	39000204 	addi	r4,r7,8
8111afdc:	01400244 	movi	r5,9
8111afe0:	dcc00315 	stw	r19,12(sp)
8111afe4:	dc800215 	stw	r18,8(sp)
8111afe8:	dfc00615 	stw	ra,24(sp)
8111afec:	dd400515 	stw	r21,20(sp)
8111aff0:	dd000415 	stw	r20,16(sp)
8111aff4:	3825883a 	mov	r18,r7
8111aff8:	3027883a 	mov	r19,r6
8111affc:	11231dc0 	call	811231dc <__divsi3>
8111b000:	00c00044 	movi	r3,1
8111b004:	000b883a 	mov	r5,zero
8111b008:	1880030e 	bge	r3,r2,8111b018 <__s2b+0x5c>
8111b00c:	18c7883a 	add	r3,r3,r3
8111b010:	29400044 	addi	r5,r5,1
8111b014:	18bffd16 	blt	r3,r2,8111b00c <__reset+0xfb0fb00c>
8111b018:	8809883a 	mov	r4,r17
8111b01c:	111adbc0 	call	8111adbc <_Balloc>
8111b020:	d8c00717 	ldw	r3,28(sp)
8111b024:	10c00515 	stw	r3,20(r2)
8111b028:	00c00044 	movi	r3,1
8111b02c:	10c00415 	stw	r3,16(r2)
8111b030:	00c00244 	movi	r3,9
8111b034:	1cc0210e 	bge	r3,r19,8111b0bc <__s2b+0x100>
8111b038:	80eb883a 	add	r21,r16,r3
8111b03c:	a829883a 	mov	r20,r21
8111b040:	84e1883a 	add	r16,r16,r19
8111b044:	a1c00007 	ldb	r7,0(r20)
8111b048:	01800284 	movi	r6,10
8111b04c:	a5000044 	addi	r20,r20,1
8111b050:	100b883a 	mov	r5,r2
8111b054:	39fff404 	addi	r7,r7,-48
8111b058:	8809883a 	mov	r4,r17
8111b05c:	111ae940 	call	8111ae94 <__multadd>
8111b060:	a43ff81e 	bne	r20,r16,8111b044 <__reset+0xfb0fb044>
8111b064:	ace1883a 	add	r16,r21,r19
8111b068:	843ffe04 	addi	r16,r16,-8
8111b06c:	9c800a0e 	bge	r19,r18,8111b098 <__s2b+0xdc>
8111b070:	94e5c83a 	sub	r18,r18,r19
8111b074:	84a5883a 	add	r18,r16,r18
8111b078:	81c00007 	ldb	r7,0(r16)
8111b07c:	01800284 	movi	r6,10
8111b080:	84000044 	addi	r16,r16,1
8111b084:	100b883a 	mov	r5,r2
8111b088:	39fff404 	addi	r7,r7,-48
8111b08c:	8809883a 	mov	r4,r17
8111b090:	111ae940 	call	8111ae94 <__multadd>
8111b094:	84bff81e 	bne	r16,r18,8111b078 <__reset+0xfb0fb078>
8111b098:	dfc00617 	ldw	ra,24(sp)
8111b09c:	dd400517 	ldw	r21,20(sp)
8111b0a0:	dd000417 	ldw	r20,16(sp)
8111b0a4:	dcc00317 	ldw	r19,12(sp)
8111b0a8:	dc800217 	ldw	r18,8(sp)
8111b0ac:	dc400117 	ldw	r17,4(sp)
8111b0b0:	dc000017 	ldw	r16,0(sp)
8111b0b4:	dec00704 	addi	sp,sp,28
8111b0b8:	f800283a 	ret
8111b0bc:	84000284 	addi	r16,r16,10
8111b0c0:	1827883a 	mov	r19,r3
8111b0c4:	003fe906 	br	8111b06c <__reset+0xfb0fb06c>

8111b0c8 <__hi0bits>:
8111b0c8:	20bfffec 	andhi	r2,r4,65535
8111b0cc:	1000141e 	bne	r2,zero,8111b120 <__hi0bits+0x58>
8111b0d0:	2008943a 	slli	r4,r4,16
8111b0d4:	00800404 	movi	r2,16
8111b0d8:	20ffc02c 	andhi	r3,r4,65280
8111b0dc:	1800021e 	bne	r3,zero,8111b0e8 <__hi0bits+0x20>
8111b0e0:	2008923a 	slli	r4,r4,8
8111b0e4:	10800204 	addi	r2,r2,8
8111b0e8:	20fc002c 	andhi	r3,r4,61440
8111b0ec:	1800021e 	bne	r3,zero,8111b0f8 <__hi0bits+0x30>
8111b0f0:	2008913a 	slli	r4,r4,4
8111b0f4:	10800104 	addi	r2,r2,4
8111b0f8:	20f0002c 	andhi	r3,r4,49152
8111b0fc:	1800031e 	bne	r3,zero,8111b10c <__hi0bits+0x44>
8111b100:	2109883a 	add	r4,r4,r4
8111b104:	10800084 	addi	r2,r2,2
8111b108:	2109883a 	add	r4,r4,r4
8111b10c:	20000316 	blt	r4,zero,8111b11c <__hi0bits+0x54>
8111b110:	2110002c 	andhi	r4,r4,16384
8111b114:	2000041e 	bne	r4,zero,8111b128 <__hi0bits+0x60>
8111b118:	00800804 	movi	r2,32
8111b11c:	f800283a 	ret
8111b120:	0005883a 	mov	r2,zero
8111b124:	003fec06 	br	8111b0d8 <__reset+0xfb0fb0d8>
8111b128:	10800044 	addi	r2,r2,1
8111b12c:	f800283a 	ret

8111b130 <__lo0bits>:
8111b130:	20c00017 	ldw	r3,0(r4)
8111b134:	188001cc 	andi	r2,r3,7
8111b138:	10000826 	beq	r2,zero,8111b15c <__lo0bits+0x2c>
8111b13c:	1880004c 	andi	r2,r3,1
8111b140:	1000211e 	bne	r2,zero,8111b1c8 <__lo0bits+0x98>
8111b144:	1880008c 	andi	r2,r3,2
8111b148:	1000211e 	bne	r2,zero,8111b1d0 <__lo0bits+0xa0>
8111b14c:	1806d0ba 	srli	r3,r3,2
8111b150:	00800084 	movi	r2,2
8111b154:	20c00015 	stw	r3,0(r4)
8111b158:	f800283a 	ret
8111b15c:	18bfffcc 	andi	r2,r3,65535
8111b160:	10001326 	beq	r2,zero,8111b1b0 <__lo0bits+0x80>
8111b164:	0005883a 	mov	r2,zero
8111b168:	19403fcc 	andi	r5,r3,255
8111b16c:	2800021e 	bne	r5,zero,8111b178 <__lo0bits+0x48>
8111b170:	1806d23a 	srli	r3,r3,8
8111b174:	10800204 	addi	r2,r2,8
8111b178:	194003cc 	andi	r5,r3,15
8111b17c:	2800021e 	bne	r5,zero,8111b188 <__lo0bits+0x58>
8111b180:	1806d13a 	srli	r3,r3,4
8111b184:	10800104 	addi	r2,r2,4
8111b188:	194000cc 	andi	r5,r3,3
8111b18c:	2800021e 	bne	r5,zero,8111b198 <__lo0bits+0x68>
8111b190:	1806d0ba 	srli	r3,r3,2
8111b194:	10800084 	addi	r2,r2,2
8111b198:	1940004c 	andi	r5,r3,1
8111b19c:	2800081e 	bne	r5,zero,8111b1c0 <__lo0bits+0x90>
8111b1a0:	1806d07a 	srli	r3,r3,1
8111b1a4:	1800051e 	bne	r3,zero,8111b1bc <__lo0bits+0x8c>
8111b1a8:	00800804 	movi	r2,32
8111b1ac:	f800283a 	ret
8111b1b0:	1806d43a 	srli	r3,r3,16
8111b1b4:	00800404 	movi	r2,16
8111b1b8:	003feb06 	br	8111b168 <__reset+0xfb0fb168>
8111b1bc:	10800044 	addi	r2,r2,1
8111b1c0:	20c00015 	stw	r3,0(r4)
8111b1c4:	f800283a 	ret
8111b1c8:	0005883a 	mov	r2,zero
8111b1cc:	f800283a 	ret
8111b1d0:	1806d07a 	srli	r3,r3,1
8111b1d4:	00800044 	movi	r2,1
8111b1d8:	20c00015 	stw	r3,0(r4)
8111b1dc:	f800283a 	ret

8111b1e0 <__i2b>:
8111b1e0:	defffd04 	addi	sp,sp,-12
8111b1e4:	de00012e 	bgeu	sp,et,8111b1ec <__i2b+0xc>
8111b1e8:	003b68fa 	trap	3
8111b1ec:	dc000015 	stw	r16,0(sp)
8111b1f0:	04000044 	movi	r16,1
8111b1f4:	dc400115 	stw	r17,4(sp)
8111b1f8:	2823883a 	mov	r17,r5
8111b1fc:	800b883a 	mov	r5,r16
8111b200:	dfc00215 	stw	ra,8(sp)
8111b204:	111adbc0 	call	8111adbc <_Balloc>
8111b208:	14400515 	stw	r17,20(r2)
8111b20c:	14000415 	stw	r16,16(r2)
8111b210:	dfc00217 	ldw	ra,8(sp)
8111b214:	dc400117 	ldw	r17,4(sp)
8111b218:	dc000017 	ldw	r16,0(sp)
8111b21c:	dec00304 	addi	sp,sp,12
8111b220:	f800283a 	ret

8111b224 <__multiply>:
8111b224:	defffa04 	addi	sp,sp,-24
8111b228:	de00012e 	bgeu	sp,et,8111b230 <__multiply+0xc>
8111b22c:	003b68fa 	trap	3
8111b230:	dcc00315 	stw	r19,12(sp)
8111b234:	dc800215 	stw	r18,8(sp)
8111b238:	34c00417 	ldw	r19,16(r6)
8111b23c:	2c800417 	ldw	r18,16(r5)
8111b240:	dd000415 	stw	r20,16(sp)
8111b244:	dc400115 	stw	r17,4(sp)
8111b248:	dfc00515 	stw	ra,20(sp)
8111b24c:	dc000015 	stw	r16,0(sp)
8111b250:	2829883a 	mov	r20,r5
8111b254:	3023883a 	mov	r17,r6
8111b258:	94c0050e 	bge	r18,r19,8111b270 <__multiply+0x4c>
8111b25c:	9007883a 	mov	r3,r18
8111b260:	3029883a 	mov	r20,r6
8111b264:	9825883a 	mov	r18,r19
8111b268:	2823883a 	mov	r17,r5
8111b26c:	1827883a 	mov	r19,r3
8111b270:	a0800217 	ldw	r2,8(r20)
8111b274:	94e1883a 	add	r16,r18,r19
8111b278:	a1400117 	ldw	r5,4(r20)
8111b27c:	1400010e 	bge	r2,r16,8111b284 <__multiply+0x60>
8111b280:	29400044 	addi	r5,r5,1
8111b284:	111adbc0 	call	8111adbc <_Balloc>
8111b288:	8415883a 	add	r10,r16,r16
8111b28c:	12c00504 	addi	r11,r2,20
8111b290:	5295883a 	add	r10,r10,r10
8111b294:	5a95883a 	add	r10,r11,r10
8111b298:	5807883a 	mov	r3,r11
8111b29c:	5a80032e 	bgeu	r11,r10,8111b2ac <__multiply+0x88>
8111b2a0:	18000015 	stw	zero,0(r3)
8111b2a4:	18c00104 	addi	r3,r3,4
8111b2a8:	1abffd36 	bltu	r3,r10,8111b2a0 <__reset+0xfb0fb2a0>
8111b2ac:	9ce7883a 	add	r19,r19,r19
8111b2b0:	94a5883a 	add	r18,r18,r18
8111b2b4:	89800504 	addi	r6,r17,20
8111b2b8:	9ce7883a 	add	r19,r19,r19
8111b2bc:	a3400504 	addi	r13,r20,20
8111b2c0:	94a5883a 	add	r18,r18,r18
8111b2c4:	34d9883a 	add	r12,r6,r19
8111b2c8:	6c93883a 	add	r9,r13,r18
8111b2cc:	3300422e 	bgeu	r6,r12,8111b3d8 <__multiply+0x1b4>
8111b2d0:	37c00017 	ldw	ra,0(r6)
8111b2d4:	fbffffcc 	andi	r15,ra,65535
8111b2d8:	78001b26 	beq	r15,zero,8111b348 <__multiply+0x124>
8111b2dc:	5811883a 	mov	r8,r11
8111b2e0:	681d883a 	mov	r14,r13
8111b2e4:	000f883a 	mov	r7,zero
8111b2e8:	71000017 	ldw	r4,0(r14)
8111b2ec:	40c00017 	ldw	r3,0(r8)
8111b2f0:	73800104 	addi	r14,r14,4
8111b2f4:	217fffcc 	andi	r5,r4,65535
8111b2f8:	2bcb383a 	mul	r5,r5,r15
8111b2fc:	2008d43a 	srli	r4,r4,16
8111b300:	1c7fffcc 	andi	r17,r3,65535
8111b304:	2c4b883a 	add	r5,r5,r17
8111b308:	29cb883a 	add	r5,r5,r7
8111b30c:	23c9383a 	mul	r4,r4,r15
8111b310:	1806d43a 	srli	r3,r3,16
8111b314:	280ed43a 	srli	r7,r5,16
8111b318:	297fffcc 	andi	r5,r5,65535
8111b31c:	20c7883a 	add	r3,r4,r3
8111b320:	19c7883a 	add	r3,r3,r7
8111b324:	1808943a 	slli	r4,r3,16
8111b328:	4023883a 	mov	r17,r8
8111b32c:	180ed43a 	srli	r7,r3,16
8111b330:	214ab03a 	or	r5,r4,r5
8111b334:	41400015 	stw	r5,0(r8)
8111b338:	42000104 	addi	r8,r8,4
8111b33c:	727fea36 	bltu	r14,r9,8111b2e8 <__reset+0xfb0fb2e8>
8111b340:	89c00115 	stw	r7,4(r17)
8111b344:	37c00017 	ldw	ra,0(r6)
8111b348:	f83ed43a 	srli	ra,ra,16
8111b34c:	f8001f26 	beq	ra,zero,8111b3cc <__multiply+0x1a8>
8111b350:	58c00017 	ldw	r3,0(r11)
8111b354:	681d883a 	mov	r14,r13
8111b358:	581f883a 	mov	r15,r11
8111b35c:	1811883a 	mov	r8,r3
8111b360:	5825883a 	mov	r18,r11
8111b364:	000f883a 	mov	r7,zero
8111b368:	00000106 	br	8111b370 <__multiply+0x14c>
8111b36c:	8825883a 	mov	r18,r17
8111b370:	7140000b 	ldhu	r5,0(r14)
8111b374:	4010d43a 	srli	r8,r8,16
8111b378:	193fffcc 	andi	r4,r3,65535
8111b37c:	2fcb383a 	mul	r5,r5,ra
8111b380:	7bc00104 	addi	r15,r15,4
8111b384:	73800104 	addi	r14,r14,4
8111b388:	2a0b883a 	add	r5,r5,r8
8111b38c:	29cb883a 	add	r5,r5,r7
8111b390:	2806943a 	slli	r3,r5,16
8111b394:	94400104 	addi	r17,r18,4
8111b398:	280ad43a 	srli	r5,r5,16
8111b39c:	1908b03a 	or	r4,r3,r4
8111b3a0:	793fff15 	stw	r4,-4(r15)
8111b3a4:	70ffff17 	ldw	r3,-4(r14)
8111b3a8:	8a000017 	ldw	r8,0(r17)
8111b3ac:	1806d43a 	srli	r3,r3,16
8111b3b0:	413fffcc 	andi	r4,r8,65535
8111b3b4:	1fc7383a 	mul	r3,r3,ra
8111b3b8:	1907883a 	add	r3,r3,r4
8111b3bc:	1947883a 	add	r3,r3,r5
8111b3c0:	180ed43a 	srli	r7,r3,16
8111b3c4:	727fe936 	bltu	r14,r9,8111b36c <__reset+0xfb0fb36c>
8111b3c8:	90c00115 	stw	r3,4(r18)
8111b3cc:	31800104 	addi	r6,r6,4
8111b3d0:	5ac00104 	addi	r11,r11,4
8111b3d4:	333fbe36 	bltu	r6,r12,8111b2d0 <__reset+0xfb0fb2d0>
8111b3d8:	0400090e 	bge	zero,r16,8111b400 <__multiply+0x1dc>
8111b3dc:	50ffff17 	ldw	r3,-4(r10)
8111b3e0:	52bfff04 	addi	r10,r10,-4
8111b3e4:	18000326 	beq	r3,zero,8111b3f4 <__multiply+0x1d0>
8111b3e8:	00000506 	br	8111b400 <__multiply+0x1dc>
8111b3ec:	50c00017 	ldw	r3,0(r10)
8111b3f0:	1800031e 	bne	r3,zero,8111b400 <__multiply+0x1dc>
8111b3f4:	843fffc4 	addi	r16,r16,-1
8111b3f8:	52bfff04 	addi	r10,r10,-4
8111b3fc:	803ffb1e 	bne	r16,zero,8111b3ec <__reset+0xfb0fb3ec>
8111b400:	14000415 	stw	r16,16(r2)
8111b404:	dfc00517 	ldw	ra,20(sp)
8111b408:	dd000417 	ldw	r20,16(sp)
8111b40c:	dcc00317 	ldw	r19,12(sp)
8111b410:	dc800217 	ldw	r18,8(sp)
8111b414:	dc400117 	ldw	r17,4(sp)
8111b418:	dc000017 	ldw	r16,0(sp)
8111b41c:	dec00604 	addi	sp,sp,24
8111b420:	f800283a 	ret

8111b424 <__pow5mult>:
8111b424:	defffa04 	addi	sp,sp,-24
8111b428:	de00012e 	bgeu	sp,et,8111b430 <__pow5mult+0xc>
8111b42c:	003b68fa 	trap	3
8111b430:	308000cc 	andi	r2,r6,3
8111b434:	dcc00315 	stw	r19,12(sp)
8111b438:	dc000015 	stw	r16,0(sp)
8111b43c:	dfc00515 	stw	ra,20(sp)
8111b440:	dd000415 	stw	r20,16(sp)
8111b444:	dc800215 	stw	r18,8(sp)
8111b448:	dc400115 	stw	r17,4(sp)
8111b44c:	3021883a 	mov	r16,r6
8111b450:	2027883a 	mov	r19,r4
8111b454:	10002f1e 	bne	r2,zero,8111b514 <__pow5mult+0xf0>
8111b458:	2825883a 	mov	r18,r5
8111b45c:	8021d0ba 	srai	r16,r16,2
8111b460:	80001a26 	beq	r16,zero,8111b4cc <__pow5mult+0xa8>
8111b464:	9c401217 	ldw	r17,72(r19)
8111b468:	8800061e 	bne	r17,zero,8111b484 <__pow5mult+0x60>
8111b46c:	00003406 	br	8111b540 <__pow5mult+0x11c>
8111b470:	8021d07a 	srai	r16,r16,1
8111b474:	80001526 	beq	r16,zero,8111b4cc <__pow5mult+0xa8>
8111b478:	88800017 	ldw	r2,0(r17)
8111b47c:	10001c26 	beq	r2,zero,8111b4f0 <__pow5mult+0xcc>
8111b480:	1023883a 	mov	r17,r2
8111b484:	8080004c 	andi	r2,r16,1
8111b488:	103ff926 	beq	r2,zero,8111b470 <__reset+0xfb0fb470>
8111b48c:	880d883a 	mov	r6,r17
8111b490:	900b883a 	mov	r5,r18
8111b494:	9809883a 	mov	r4,r19
8111b498:	111b2240 	call	8111b224 <__multiply>
8111b49c:	90001b26 	beq	r18,zero,8111b50c <__pow5mult+0xe8>
8111b4a0:	91000117 	ldw	r4,4(r18)
8111b4a4:	98c01317 	ldw	r3,76(r19)
8111b4a8:	8021d07a 	srai	r16,r16,1
8111b4ac:	2109883a 	add	r4,r4,r4
8111b4b0:	2109883a 	add	r4,r4,r4
8111b4b4:	1907883a 	add	r3,r3,r4
8111b4b8:	19000017 	ldw	r4,0(r3)
8111b4bc:	91000015 	stw	r4,0(r18)
8111b4c0:	1c800015 	stw	r18,0(r3)
8111b4c4:	1025883a 	mov	r18,r2
8111b4c8:	803feb1e 	bne	r16,zero,8111b478 <__reset+0xfb0fb478>
8111b4cc:	9005883a 	mov	r2,r18
8111b4d0:	dfc00517 	ldw	ra,20(sp)
8111b4d4:	dd000417 	ldw	r20,16(sp)
8111b4d8:	dcc00317 	ldw	r19,12(sp)
8111b4dc:	dc800217 	ldw	r18,8(sp)
8111b4e0:	dc400117 	ldw	r17,4(sp)
8111b4e4:	dc000017 	ldw	r16,0(sp)
8111b4e8:	dec00604 	addi	sp,sp,24
8111b4ec:	f800283a 	ret
8111b4f0:	880d883a 	mov	r6,r17
8111b4f4:	880b883a 	mov	r5,r17
8111b4f8:	9809883a 	mov	r4,r19
8111b4fc:	111b2240 	call	8111b224 <__multiply>
8111b500:	88800015 	stw	r2,0(r17)
8111b504:	10000015 	stw	zero,0(r2)
8111b508:	003fdd06 	br	8111b480 <__reset+0xfb0fb480>
8111b50c:	1025883a 	mov	r18,r2
8111b510:	003fd706 	br	8111b470 <__reset+0xfb0fb470>
8111b514:	10bfffc4 	addi	r2,r2,-1
8111b518:	1085883a 	add	r2,r2,r2
8111b51c:	00e04534 	movhi	r3,33044
8111b520:	18f14f04 	addi	r3,r3,-15044
8111b524:	1085883a 	add	r2,r2,r2
8111b528:	1885883a 	add	r2,r3,r2
8111b52c:	11800017 	ldw	r6,0(r2)
8111b530:	000f883a 	mov	r7,zero
8111b534:	111ae940 	call	8111ae94 <__multadd>
8111b538:	1025883a 	mov	r18,r2
8111b53c:	003fc706 	br	8111b45c <__reset+0xfb0fb45c>
8111b540:	05000044 	movi	r20,1
8111b544:	a00b883a 	mov	r5,r20
8111b548:	9809883a 	mov	r4,r19
8111b54c:	111adbc0 	call	8111adbc <_Balloc>
8111b550:	1023883a 	mov	r17,r2
8111b554:	00809c44 	movi	r2,625
8111b558:	88800515 	stw	r2,20(r17)
8111b55c:	8d000415 	stw	r20,16(r17)
8111b560:	9c401215 	stw	r17,72(r19)
8111b564:	88000015 	stw	zero,0(r17)
8111b568:	003fc606 	br	8111b484 <__reset+0xfb0fb484>

8111b56c <__lshift>:
8111b56c:	defff904 	addi	sp,sp,-28
8111b570:	de00012e 	bgeu	sp,et,8111b578 <__lshift+0xc>
8111b574:	003b68fa 	trap	3
8111b578:	dd400515 	stw	r21,20(sp)
8111b57c:	dcc00315 	stw	r19,12(sp)
8111b580:	302bd17a 	srai	r21,r6,5
8111b584:	2cc00417 	ldw	r19,16(r5)
8111b588:	28800217 	ldw	r2,8(r5)
8111b58c:	dd000415 	stw	r20,16(sp)
8111b590:	ace7883a 	add	r19,r21,r19
8111b594:	dc800215 	stw	r18,8(sp)
8111b598:	dc400115 	stw	r17,4(sp)
8111b59c:	dc000015 	stw	r16,0(sp)
8111b5a0:	dfc00615 	stw	ra,24(sp)
8111b5a4:	9c000044 	addi	r16,r19,1
8111b5a8:	2823883a 	mov	r17,r5
8111b5ac:	3029883a 	mov	r20,r6
8111b5b0:	2025883a 	mov	r18,r4
8111b5b4:	29400117 	ldw	r5,4(r5)
8111b5b8:	1400030e 	bge	r2,r16,8111b5c8 <__lshift+0x5c>
8111b5bc:	1085883a 	add	r2,r2,r2
8111b5c0:	29400044 	addi	r5,r5,1
8111b5c4:	143ffd16 	blt	r2,r16,8111b5bc <__reset+0xfb0fb5bc>
8111b5c8:	9009883a 	mov	r4,r18
8111b5cc:	111adbc0 	call	8111adbc <_Balloc>
8111b5d0:	10c00504 	addi	r3,r2,20
8111b5d4:	0540070e 	bge	zero,r21,8111b5f4 <__lshift+0x88>
8111b5d8:	ad6b883a 	add	r21,r21,r21
8111b5dc:	ad6b883a 	add	r21,r21,r21
8111b5e0:	1809883a 	mov	r4,r3
8111b5e4:	1d47883a 	add	r3,r3,r21
8111b5e8:	20000015 	stw	zero,0(r4)
8111b5ec:	21000104 	addi	r4,r4,4
8111b5f0:	193ffd1e 	bne	r3,r4,8111b5e8 <__reset+0xfb0fb5e8>
8111b5f4:	8a000417 	ldw	r8,16(r17)
8111b5f8:	89000504 	addi	r4,r17,20
8111b5fc:	a18007cc 	andi	r6,r20,31
8111b600:	4211883a 	add	r8,r8,r8
8111b604:	4211883a 	add	r8,r8,r8
8111b608:	2211883a 	add	r8,r4,r8
8111b60c:	30002326 	beq	r6,zero,8111b69c <__lshift+0x130>
8111b610:	02400804 	movi	r9,32
8111b614:	4993c83a 	sub	r9,r9,r6
8111b618:	000b883a 	mov	r5,zero
8111b61c:	21c00017 	ldw	r7,0(r4)
8111b620:	1815883a 	mov	r10,r3
8111b624:	18c00104 	addi	r3,r3,4
8111b628:	398e983a 	sll	r7,r7,r6
8111b62c:	21000104 	addi	r4,r4,4
8111b630:	394ab03a 	or	r5,r7,r5
8111b634:	197fff15 	stw	r5,-4(r3)
8111b638:	217fff17 	ldw	r5,-4(r4)
8111b63c:	2a4ad83a 	srl	r5,r5,r9
8111b640:	223ff636 	bltu	r4,r8,8111b61c <__reset+0xfb0fb61c>
8111b644:	51400115 	stw	r5,4(r10)
8111b648:	28001a1e 	bne	r5,zero,8111b6b4 <__lshift+0x148>
8111b64c:	843fffc4 	addi	r16,r16,-1
8111b650:	14000415 	stw	r16,16(r2)
8111b654:	88000826 	beq	r17,zero,8111b678 <__lshift+0x10c>
8111b658:	89000117 	ldw	r4,4(r17)
8111b65c:	90c01317 	ldw	r3,76(r18)
8111b660:	2109883a 	add	r4,r4,r4
8111b664:	2109883a 	add	r4,r4,r4
8111b668:	1907883a 	add	r3,r3,r4
8111b66c:	19000017 	ldw	r4,0(r3)
8111b670:	89000015 	stw	r4,0(r17)
8111b674:	1c400015 	stw	r17,0(r3)
8111b678:	dfc00617 	ldw	ra,24(sp)
8111b67c:	dd400517 	ldw	r21,20(sp)
8111b680:	dd000417 	ldw	r20,16(sp)
8111b684:	dcc00317 	ldw	r19,12(sp)
8111b688:	dc800217 	ldw	r18,8(sp)
8111b68c:	dc400117 	ldw	r17,4(sp)
8111b690:	dc000017 	ldw	r16,0(sp)
8111b694:	dec00704 	addi	sp,sp,28
8111b698:	f800283a 	ret
8111b69c:	21400017 	ldw	r5,0(r4)
8111b6a0:	18c00104 	addi	r3,r3,4
8111b6a4:	21000104 	addi	r4,r4,4
8111b6a8:	197fff15 	stw	r5,-4(r3)
8111b6ac:	223ffb36 	bltu	r4,r8,8111b69c <__reset+0xfb0fb69c>
8111b6b0:	003fe606 	br	8111b64c <__reset+0xfb0fb64c>
8111b6b4:	9c000084 	addi	r16,r19,2
8111b6b8:	003fe406 	br	8111b64c <__reset+0xfb0fb64c>

8111b6bc <__mcmp>:
8111b6bc:	20800417 	ldw	r2,16(r4)
8111b6c0:	28c00417 	ldw	r3,16(r5)
8111b6c4:	10c5c83a 	sub	r2,r2,r3
8111b6c8:	1000111e 	bne	r2,zero,8111b710 <__mcmp+0x54>
8111b6cc:	18c7883a 	add	r3,r3,r3
8111b6d0:	18c7883a 	add	r3,r3,r3
8111b6d4:	21000504 	addi	r4,r4,20
8111b6d8:	29400504 	addi	r5,r5,20
8111b6dc:	20c5883a 	add	r2,r4,r3
8111b6e0:	28cb883a 	add	r5,r5,r3
8111b6e4:	00000106 	br	8111b6ec <__mcmp+0x30>
8111b6e8:	20800a2e 	bgeu	r4,r2,8111b714 <__mcmp+0x58>
8111b6ec:	10bfff04 	addi	r2,r2,-4
8111b6f0:	297fff04 	addi	r5,r5,-4
8111b6f4:	11800017 	ldw	r6,0(r2)
8111b6f8:	28c00017 	ldw	r3,0(r5)
8111b6fc:	30fffa26 	beq	r6,r3,8111b6e8 <__reset+0xfb0fb6e8>
8111b700:	30c00236 	bltu	r6,r3,8111b70c <__mcmp+0x50>
8111b704:	00800044 	movi	r2,1
8111b708:	f800283a 	ret
8111b70c:	00bfffc4 	movi	r2,-1
8111b710:	f800283a 	ret
8111b714:	0005883a 	mov	r2,zero
8111b718:	f800283a 	ret

8111b71c <__mdiff>:
8111b71c:	defffa04 	addi	sp,sp,-24
8111b720:	de00012e 	bgeu	sp,et,8111b728 <__mdiff+0xc>
8111b724:	003b68fa 	trap	3
8111b728:	28c00417 	ldw	r3,16(r5)
8111b72c:	30800417 	ldw	r2,16(r6)
8111b730:	dcc00315 	stw	r19,12(sp)
8111b734:	dc800215 	stw	r18,8(sp)
8111b738:	dfc00515 	stw	ra,20(sp)
8111b73c:	dd000415 	stw	r20,16(sp)
8111b740:	dc400115 	stw	r17,4(sp)
8111b744:	dc000015 	stw	r16,0(sp)
8111b748:	1887c83a 	sub	r3,r3,r2
8111b74c:	2825883a 	mov	r18,r5
8111b750:	3027883a 	mov	r19,r6
8111b754:	1800141e 	bne	r3,zero,8111b7a8 <__mdiff+0x8c>
8111b758:	1085883a 	add	r2,r2,r2
8111b75c:	1085883a 	add	r2,r2,r2
8111b760:	2a000504 	addi	r8,r5,20
8111b764:	34000504 	addi	r16,r6,20
8111b768:	4087883a 	add	r3,r8,r2
8111b76c:	8085883a 	add	r2,r16,r2
8111b770:	00000106 	br	8111b778 <__mdiff+0x5c>
8111b774:	40c0592e 	bgeu	r8,r3,8111b8dc <__mdiff+0x1c0>
8111b778:	18ffff04 	addi	r3,r3,-4
8111b77c:	10bfff04 	addi	r2,r2,-4
8111b780:	19c00017 	ldw	r7,0(r3)
8111b784:	11400017 	ldw	r5,0(r2)
8111b788:	397ffa26 	beq	r7,r5,8111b774 <__reset+0xfb0fb774>
8111b78c:	3940592e 	bgeu	r7,r5,8111b8f4 <__mdiff+0x1d8>
8111b790:	9005883a 	mov	r2,r18
8111b794:	4023883a 	mov	r17,r8
8111b798:	9825883a 	mov	r18,r19
8111b79c:	05000044 	movi	r20,1
8111b7a0:	1027883a 	mov	r19,r2
8111b7a4:	00000406 	br	8111b7b8 <__mdiff+0x9c>
8111b7a8:	18005616 	blt	r3,zero,8111b904 <__mdiff+0x1e8>
8111b7ac:	34400504 	addi	r17,r6,20
8111b7b0:	2c000504 	addi	r16,r5,20
8111b7b4:	0029883a 	mov	r20,zero
8111b7b8:	91400117 	ldw	r5,4(r18)
8111b7bc:	111adbc0 	call	8111adbc <_Balloc>
8111b7c0:	92400417 	ldw	r9,16(r18)
8111b7c4:	9b000417 	ldw	r12,16(r19)
8111b7c8:	12c00504 	addi	r11,r2,20
8111b7cc:	4a51883a 	add	r8,r9,r9
8111b7d0:	6319883a 	add	r12,r12,r12
8111b7d4:	4211883a 	add	r8,r8,r8
8111b7d8:	6319883a 	add	r12,r12,r12
8111b7dc:	15000315 	stw	r20,12(r2)
8111b7e0:	8211883a 	add	r8,r16,r8
8111b7e4:	8b19883a 	add	r12,r17,r12
8111b7e8:	0007883a 	mov	r3,zero
8111b7ec:	81400017 	ldw	r5,0(r16)
8111b7f0:	89c00017 	ldw	r7,0(r17)
8111b7f4:	59800104 	addi	r6,r11,4
8111b7f8:	293fffcc 	andi	r4,r5,65535
8111b7fc:	20c7883a 	add	r3,r4,r3
8111b800:	393fffcc 	andi	r4,r7,65535
8111b804:	1909c83a 	sub	r4,r3,r4
8111b808:	280ad43a 	srli	r5,r5,16
8111b80c:	380ed43a 	srli	r7,r7,16
8111b810:	2007d43a 	srai	r3,r4,16
8111b814:	213fffcc 	andi	r4,r4,65535
8111b818:	29cbc83a 	sub	r5,r5,r7
8111b81c:	28c7883a 	add	r3,r5,r3
8111b820:	180a943a 	slli	r5,r3,16
8111b824:	8c400104 	addi	r17,r17,4
8111b828:	84000104 	addi	r16,r16,4
8111b82c:	2908b03a 	or	r4,r5,r4
8111b830:	59000015 	stw	r4,0(r11)
8111b834:	1807d43a 	srai	r3,r3,16
8111b838:	3015883a 	mov	r10,r6
8111b83c:	3017883a 	mov	r11,r6
8111b840:	8b3fea36 	bltu	r17,r12,8111b7ec <__reset+0xfb0fb7ec>
8111b844:	8200162e 	bgeu	r16,r8,8111b8a0 <__mdiff+0x184>
8111b848:	8017883a 	mov	r11,r16
8111b84c:	59400017 	ldw	r5,0(r11)
8111b850:	31800104 	addi	r6,r6,4
8111b854:	5ac00104 	addi	r11,r11,4
8111b858:	293fffcc 	andi	r4,r5,65535
8111b85c:	20c7883a 	add	r3,r4,r3
8111b860:	280ed43a 	srli	r7,r5,16
8111b864:	180bd43a 	srai	r5,r3,16
8111b868:	193fffcc 	andi	r4,r3,65535
8111b86c:	3947883a 	add	r3,r7,r5
8111b870:	180a943a 	slli	r5,r3,16
8111b874:	1807d43a 	srai	r3,r3,16
8111b878:	2908b03a 	or	r4,r5,r4
8111b87c:	313fff15 	stw	r4,-4(r6)
8111b880:	5a3ff236 	bltu	r11,r8,8111b84c <__reset+0xfb0fb84c>
8111b884:	0406303a 	nor	r3,zero,r16
8111b888:	1a07883a 	add	r3,r3,r8
8111b88c:	1806d0ba 	srli	r3,r3,2
8111b890:	18c00044 	addi	r3,r3,1
8111b894:	18c7883a 	add	r3,r3,r3
8111b898:	18c7883a 	add	r3,r3,r3
8111b89c:	50d5883a 	add	r10,r10,r3
8111b8a0:	50ffff04 	addi	r3,r10,-4
8111b8a4:	2000041e 	bne	r4,zero,8111b8b8 <__mdiff+0x19c>
8111b8a8:	18ffff04 	addi	r3,r3,-4
8111b8ac:	19000017 	ldw	r4,0(r3)
8111b8b0:	4a7fffc4 	addi	r9,r9,-1
8111b8b4:	203ffc26 	beq	r4,zero,8111b8a8 <__reset+0xfb0fb8a8>
8111b8b8:	12400415 	stw	r9,16(r2)
8111b8bc:	dfc00517 	ldw	ra,20(sp)
8111b8c0:	dd000417 	ldw	r20,16(sp)
8111b8c4:	dcc00317 	ldw	r19,12(sp)
8111b8c8:	dc800217 	ldw	r18,8(sp)
8111b8cc:	dc400117 	ldw	r17,4(sp)
8111b8d0:	dc000017 	ldw	r16,0(sp)
8111b8d4:	dec00604 	addi	sp,sp,24
8111b8d8:	f800283a 	ret
8111b8dc:	000b883a 	mov	r5,zero
8111b8e0:	111adbc0 	call	8111adbc <_Balloc>
8111b8e4:	00c00044 	movi	r3,1
8111b8e8:	10c00415 	stw	r3,16(r2)
8111b8ec:	10000515 	stw	zero,20(r2)
8111b8f0:	003ff206 	br	8111b8bc <__reset+0xfb0fb8bc>
8111b8f4:	8023883a 	mov	r17,r16
8111b8f8:	0029883a 	mov	r20,zero
8111b8fc:	4021883a 	mov	r16,r8
8111b900:	003fad06 	br	8111b7b8 <__reset+0xfb0fb7b8>
8111b904:	9005883a 	mov	r2,r18
8111b908:	94400504 	addi	r17,r18,20
8111b90c:	9c000504 	addi	r16,r19,20
8111b910:	9825883a 	mov	r18,r19
8111b914:	05000044 	movi	r20,1
8111b918:	1027883a 	mov	r19,r2
8111b91c:	003fa606 	br	8111b7b8 <__reset+0xfb0fb7b8>

8111b920 <__ulp>:
8111b920:	295ffc2c 	andhi	r5,r5,32752
8111b924:	00bf3034 	movhi	r2,64704
8111b928:	2887883a 	add	r3,r5,r2
8111b92c:	00c0020e 	bge	zero,r3,8111b938 <__ulp+0x18>
8111b930:	0005883a 	mov	r2,zero
8111b934:	f800283a 	ret
8111b938:	00c7c83a 	sub	r3,zero,r3
8111b93c:	1807d53a 	srai	r3,r3,20
8111b940:	008004c4 	movi	r2,19
8111b944:	10c00b0e 	bge	r2,r3,8111b974 <__ulp+0x54>
8111b948:	18bffb04 	addi	r2,r3,-20
8111b94c:	01000784 	movi	r4,30
8111b950:	0007883a 	mov	r3,zero
8111b954:	20800516 	blt	r4,r2,8111b96c <__ulp+0x4c>
8111b958:	010007c4 	movi	r4,31
8111b95c:	2089c83a 	sub	r4,r4,r2
8111b960:	00800044 	movi	r2,1
8111b964:	1104983a 	sll	r2,r2,r4
8111b968:	f800283a 	ret
8111b96c:	00800044 	movi	r2,1
8111b970:	f800283a 	ret
8111b974:	01400234 	movhi	r5,8
8111b978:	28c7d83a 	sra	r3,r5,r3
8111b97c:	0005883a 	mov	r2,zero
8111b980:	f800283a 	ret

8111b984 <__b2d>:
8111b984:	defffa04 	addi	sp,sp,-24
8111b988:	de00012e 	bgeu	sp,et,8111b990 <__b2d+0xc>
8111b98c:	003b68fa 	trap	3
8111b990:	dc000015 	stw	r16,0(sp)
8111b994:	24000417 	ldw	r16,16(r4)
8111b998:	dc400115 	stw	r17,4(sp)
8111b99c:	24400504 	addi	r17,r4,20
8111b9a0:	8421883a 	add	r16,r16,r16
8111b9a4:	8421883a 	add	r16,r16,r16
8111b9a8:	8c21883a 	add	r16,r17,r16
8111b9ac:	dc800215 	stw	r18,8(sp)
8111b9b0:	84bfff17 	ldw	r18,-4(r16)
8111b9b4:	dd000415 	stw	r20,16(sp)
8111b9b8:	dcc00315 	stw	r19,12(sp)
8111b9bc:	9009883a 	mov	r4,r18
8111b9c0:	2829883a 	mov	r20,r5
8111b9c4:	dfc00515 	stw	ra,20(sp)
8111b9c8:	111b0c80 	call	8111b0c8 <__hi0bits>
8111b9cc:	00c00804 	movi	r3,32
8111b9d0:	1889c83a 	sub	r4,r3,r2
8111b9d4:	a1000015 	stw	r4,0(r20)
8111b9d8:	01000284 	movi	r4,10
8111b9dc:	84ffff04 	addi	r19,r16,-4
8111b9e0:	20801216 	blt	r4,r2,8111ba2c <__b2d+0xa8>
8111b9e4:	018002c4 	movi	r6,11
8111b9e8:	308dc83a 	sub	r6,r6,r2
8111b9ec:	9186d83a 	srl	r3,r18,r6
8111b9f0:	18cffc34 	orhi	r3,r3,16368
8111b9f4:	8cc0212e 	bgeu	r17,r19,8111ba7c <__b2d+0xf8>
8111b9f8:	813ffe17 	ldw	r4,-8(r16)
8111b9fc:	218cd83a 	srl	r6,r4,r6
8111ba00:	10800544 	addi	r2,r2,21
8111ba04:	9084983a 	sll	r2,r18,r2
8111ba08:	1184b03a 	or	r2,r2,r6
8111ba0c:	dfc00517 	ldw	ra,20(sp)
8111ba10:	dd000417 	ldw	r20,16(sp)
8111ba14:	dcc00317 	ldw	r19,12(sp)
8111ba18:	dc800217 	ldw	r18,8(sp)
8111ba1c:	dc400117 	ldw	r17,4(sp)
8111ba20:	dc000017 	ldw	r16,0(sp)
8111ba24:	dec00604 	addi	sp,sp,24
8111ba28:	f800283a 	ret
8111ba2c:	8cc00f2e 	bgeu	r17,r19,8111ba6c <__b2d+0xe8>
8111ba30:	117ffd44 	addi	r5,r2,-11
8111ba34:	80bffe17 	ldw	r2,-8(r16)
8111ba38:	28000e26 	beq	r5,zero,8111ba74 <__b2d+0xf0>
8111ba3c:	1949c83a 	sub	r4,r3,r5
8111ba40:	9164983a 	sll	r18,r18,r5
8111ba44:	1106d83a 	srl	r3,r2,r4
8111ba48:	81bffe04 	addi	r6,r16,-8
8111ba4c:	948ffc34 	orhi	r18,r18,16368
8111ba50:	90c6b03a 	or	r3,r18,r3
8111ba54:	89800e2e 	bgeu	r17,r6,8111ba90 <__b2d+0x10c>
8111ba58:	81bffd17 	ldw	r6,-12(r16)
8111ba5c:	1144983a 	sll	r2,r2,r5
8111ba60:	310ad83a 	srl	r5,r6,r4
8111ba64:	2884b03a 	or	r2,r5,r2
8111ba68:	003fe806 	br	8111ba0c <__reset+0xfb0fba0c>
8111ba6c:	10bffd44 	addi	r2,r2,-11
8111ba70:	1000041e 	bne	r2,zero,8111ba84 <__b2d+0x100>
8111ba74:	90cffc34 	orhi	r3,r18,16368
8111ba78:	003fe406 	br	8111ba0c <__reset+0xfb0fba0c>
8111ba7c:	000d883a 	mov	r6,zero
8111ba80:	003fdf06 	br	8111ba00 <__reset+0xfb0fba00>
8111ba84:	90a4983a 	sll	r18,r18,r2
8111ba88:	0005883a 	mov	r2,zero
8111ba8c:	003ff906 	br	8111ba74 <__reset+0xfb0fba74>
8111ba90:	1144983a 	sll	r2,r2,r5
8111ba94:	003fdd06 	br	8111ba0c <__reset+0xfb0fba0c>

8111ba98 <__d2b>:
8111ba98:	defff804 	addi	sp,sp,-32
8111ba9c:	de00012e 	bgeu	sp,et,8111baa4 <__d2b+0xc>
8111baa0:	003b68fa 	trap	3
8111baa4:	dc000215 	stw	r16,8(sp)
8111baa8:	3021883a 	mov	r16,r6
8111baac:	dc400315 	stw	r17,12(sp)
8111bab0:	8022907a 	slli	r17,r16,1
8111bab4:	dd000615 	stw	r20,24(sp)
8111bab8:	2829883a 	mov	r20,r5
8111babc:	01400044 	movi	r5,1
8111bac0:	dcc00515 	stw	r19,20(sp)
8111bac4:	dc800415 	stw	r18,16(sp)
8111bac8:	dfc00715 	stw	ra,28(sp)
8111bacc:	3825883a 	mov	r18,r7
8111bad0:	8822d57a 	srli	r17,r17,21
8111bad4:	111adbc0 	call	8111adbc <_Balloc>
8111bad8:	1027883a 	mov	r19,r2
8111badc:	00800434 	movhi	r2,16
8111bae0:	10bfffc4 	addi	r2,r2,-1
8111bae4:	808c703a 	and	r6,r16,r2
8111bae8:	88000126 	beq	r17,zero,8111baf0 <__d2b+0x58>
8111baec:	31800434 	orhi	r6,r6,16
8111baf0:	d9800015 	stw	r6,0(sp)
8111baf4:	a0002426 	beq	r20,zero,8111bb88 <__d2b+0xf0>
8111baf8:	d9000104 	addi	r4,sp,4
8111bafc:	dd000115 	stw	r20,4(sp)
8111bb00:	111b1300 	call	8111b130 <__lo0bits>
8111bb04:	d8c00017 	ldw	r3,0(sp)
8111bb08:	10002f1e 	bne	r2,zero,8111bbc8 <__d2b+0x130>
8111bb0c:	d9000117 	ldw	r4,4(sp)
8111bb10:	99000515 	stw	r4,20(r19)
8111bb14:	1821003a 	cmpeq	r16,r3,zero
8111bb18:	01000084 	movi	r4,2
8111bb1c:	2421c83a 	sub	r16,r4,r16
8111bb20:	98c00615 	stw	r3,24(r19)
8111bb24:	9c000415 	stw	r16,16(r19)
8111bb28:	88001f1e 	bne	r17,zero,8111bba8 <__d2b+0x110>
8111bb2c:	10bef384 	addi	r2,r2,-1074
8111bb30:	90800015 	stw	r2,0(r18)
8111bb34:	00900034 	movhi	r2,16384
8111bb38:	10bfffc4 	addi	r2,r2,-1
8111bb3c:	8085883a 	add	r2,r16,r2
8111bb40:	1085883a 	add	r2,r2,r2
8111bb44:	1085883a 	add	r2,r2,r2
8111bb48:	9885883a 	add	r2,r19,r2
8111bb4c:	11000517 	ldw	r4,20(r2)
8111bb50:	8020917a 	slli	r16,r16,5
8111bb54:	111b0c80 	call	8111b0c8 <__hi0bits>
8111bb58:	d8c00817 	ldw	r3,32(sp)
8111bb5c:	8085c83a 	sub	r2,r16,r2
8111bb60:	18800015 	stw	r2,0(r3)
8111bb64:	9805883a 	mov	r2,r19
8111bb68:	dfc00717 	ldw	ra,28(sp)
8111bb6c:	dd000617 	ldw	r20,24(sp)
8111bb70:	dcc00517 	ldw	r19,20(sp)
8111bb74:	dc800417 	ldw	r18,16(sp)
8111bb78:	dc400317 	ldw	r17,12(sp)
8111bb7c:	dc000217 	ldw	r16,8(sp)
8111bb80:	dec00804 	addi	sp,sp,32
8111bb84:	f800283a 	ret
8111bb88:	d809883a 	mov	r4,sp
8111bb8c:	111b1300 	call	8111b130 <__lo0bits>
8111bb90:	d8c00017 	ldw	r3,0(sp)
8111bb94:	04000044 	movi	r16,1
8111bb98:	9c000415 	stw	r16,16(r19)
8111bb9c:	98c00515 	stw	r3,20(r19)
8111bba0:	10800804 	addi	r2,r2,32
8111bba4:	883fe126 	beq	r17,zero,8111bb2c <__reset+0xfb0fbb2c>
8111bba8:	00c00d44 	movi	r3,53
8111bbac:	8c7ef344 	addi	r17,r17,-1075
8111bbb0:	88a3883a 	add	r17,r17,r2
8111bbb4:	1885c83a 	sub	r2,r3,r2
8111bbb8:	d8c00817 	ldw	r3,32(sp)
8111bbbc:	94400015 	stw	r17,0(r18)
8111bbc0:	18800015 	stw	r2,0(r3)
8111bbc4:	003fe706 	br	8111bb64 <__reset+0xfb0fbb64>
8111bbc8:	01000804 	movi	r4,32
8111bbcc:	2089c83a 	sub	r4,r4,r2
8111bbd0:	1908983a 	sll	r4,r3,r4
8111bbd4:	d9400117 	ldw	r5,4(sp)
8111bbd8:	1886d83a 	srl	r3,r3,r2
8111bbdc:	2148b03a 	or	r4,r4,r5
8111bbe0:	99000515 	stw	r4,20(r19)
8111bbe4:	d8c00015 	stw	r3,0(sp)
8111bbe8:	003fca06 	br	8111bb14 <__reset+0xfb0fbb14>

8111bbec <__ratio>:
8111bbec:	defff904 	addi	sp,sp,-28
8111bbf0:	de00012e 	bgeu	sp,et,8111bbf8 <__ratio+0xc>
8111bbf4:	003b68fa 	trap	3
8111bbf8:	dc400315 	stw	r17,12(sp)
8111bbfc:	2823883a 	mov	r17,r5
8111bc00:	d9400104 	addi	r5,sp,4
8111bc04:	dfc00615 	stw	ra,24(sp)
8111bc08:	dcc00515 	stw	r19,20(sp)
8111bc0c:	dc800415 	stw	r18,16(sp)
8111bc10:	2027883a 	mov	r19,r4
8111bc14:	dc000215 	stw	r16,8(sp)
8111bc18:	111b9840 	call	8111b984 <__b2d>
8111bc1c:	d80b883a 	mov	r5,sp
8111bc20:	8809883a 	mov	r4,r17
8111bc24:	1025883a 	mov	r18,r2
8111bc28:	1821883a 	mov	r16,r3
8111bc2c:	111b9840 	call	8111b984 <__b2d>
8111bc30:	8a000417 	ldw	r8,16(r17)
8111bc34:	99000417 	ldw	r4,16(r19)
8111bc38:	d9400117 	ldw	r5,4(sp)
8111bc3c:	2209c83a 	sub	r4,r4,r8
8111bc40:	2010917a 	slli	r8,r4,5
8111bc44:	d9000017 	ldw	r4,0(sp)
8111bc48:	2909c83a 	sub	r4,r5,r4
8111bc4c:	4109883a 	add	r4,r8,r4
8111bc50:	01000e0e 	bge	zero,r4,8111bc8c <__ratio+0xa0>
8111bc54:	2008953a 	slli	r4,r4,20
8111bc58:	2421883a 	add	r16,r4,r16
8111bc5c:	100d883a 	mov	r6,r2
8111bc60:	180f883a 	mov	r7,r3
8111bc64:	9009883a 	mov	r4,r18
8111bc68:	800b883a 	mov	r5,r16
8111bc6c:	1123e400 	call	81123e40 <__divdf3>
8111bc70:	dfc00617 	ldw	ra,24(sp)
8111bc74:	dcc00517 	ldw	r19,20(sp)
8111bc78:	dc800417 	ldw	r18,16(sp)
8111bc7c:	dc400317 	ldw	r17,12(sp)
8111bc80:	dc000217 	ldw	r16,8(sp)
8111bc84:	dec00704 	addi	sp,sp,28
8111bc88:	f800283a 	ret
8111bc8c:	2008953a 	slli	r4,r4,20
8111bc90:	1907c83a 	sub	r3,r3,r4
8111bc94:	003ff106 	br	8111bc5c <__reset+0xfb0fbc5c>

8111bc98 <_mprec_log10>:
8111bc98:	defffe04 	addi	sp,sp,-8
8111bc9c:	de00012e 	bgeu	sp,et,8111bca4 <_mprec_log10+0xc>
8111bca0:	003b68fa 	trap	3
8111bca4:	008005c4 	movi	r2,23
8111bca8:	dc000015 	stw	r16,0(sp)
8111bcac:	dfc00115 	stw	ra,4(sp)
8111bcb0:	2021883a 	mov	r16,r4
8111bcb4:	11000d0e 	bge	r2,r4,8111bcec <_mprec_log10+0x54>
8111bcb8:	0005883a 	mov	r2,zero
8111bcbc:	00cffc34 	movhi	r3,16368
8111bcc0:	843fffc4 	addi	r16,r16,-1
8111bcc4:	000d883a 	mov	r6,zero
8111bcc8:	01d00934 	movhi	r7,16420
8111bccc:	1009883a 	mov	r4,r2
8111bcd0:	180b883a 	mov	r5,r3
8111bcd4:	110f3080 	call	8110f308 <__muldf3>
8111bcd8:	803ff91e 	bne	r16,zero,8111bcc0 <__reset+0xfb0fbcc0>
8111bcdc:	dfc00117 	ldw	ra,4(sp)
8111bce0:	dc000017 	ldw	r16,0(sp)
8111bce4:	dec00204 	addi	sp,sp,8
8111bce8:	f800283a 	ret
8111bcec:	202090fa 	slli	r16,r4,3
8111bcf0:	00a04534 	movhi	r2,33044
8111bcf4:	10b16604 	addi	r2,r2,-14952
8111bcf8:	1421883a 	add	r16,r2,r16
8111bcfc:	80800017 	ldw	r2,0(r16)
8111bd00:	80c00117 	ldw	r3,4(r16)
8111bd04:	dfc00117 	ldw	ra,4(sp)
8111bd08:	dc000017 	ldw	r16,0(sp)
8111bd0c:	dec00204 	addi	sp,sp,8
8111bd10:	f800283a 	ret

8111bd14 <__copybits>:
8111bd14:	297fffc4 	addi	r5,r5,-1
8111bd18:	280fd17a 	srai	r7,r5,5
8111bd1c:	30c00417 	ldw	r3,16(r6)
8111bd20:	30800504 	addi	r2,r6,20
8111bd24:	39c00044 	addi	r7,r7,1
8111bd28:	18c7883a 	add	r3,r3,r3
8111bd2c:	39cf883a 	add	r7,r7,r7
8111bd30:	18c7883a 	add	r3,r3,r3
8111bd34:	39cf883a 	add	r7,r7,r7
8111bd38:	10c7883a 	add	r3,r2,r3
8111bd3c:	21cf883a 	add	r7,r4,r7
8111bd40:	10c00d2e 	bgeu	r2,r3,8111bd78 <__copybits+0x64>
8111bd44:	200b883a 	mov	r5,r4
8111bd48:	12000017 	ldw	r8,0(r2)
8111bd4c:	29400104 	addi	r5,r5,4
8111bd50:	10800104 	addi	r2,r2,4
8111bd54:	2a3fff15 	stw	r8,-4(r5)
8111bd58:	10fffb36 	bltu	r2,r3,8111bd48 <__reset+0xfb0fbd48>
8111bd5c:	1985c83a 	sub	r2,r3,r6
8111bd60:	10bffac4 	addi	r2,r2,-21
8111bd64:	1004d0ba 	srli	r2,r2,2
8111bd68:	10800044 	addi	r2,r2,1
8111bd6c:	1085883a 	add	r2,r2,r2
8111bd70:	1085883a 	add	r2,r2,r2
8111bd74:	2089883a 	add	r4,r4,r2
8111bd78:	21c0032e 	bgeu	r4,r7,8111bd88 <__copybits+0x74>
8111bd7c:	20000015 	stw	zero,0(r4)
8111bd80:	21000104 	addi	r4,r4,4
8111bd84:	21fffd36 	bltu	r4,r7,8111bd7c <__reset+0xfb0fbd7c>
8111bd88:	f800283a 	ret

8111bd8c <__any_on>:
8111bd8c:	20c00417 	ldw	r3,16(r4)
8111bd90:	2805d17a 	srai	r2,r5,5
8111bd94:	21000504 	addi	r4,r4,20
8111bd98:	18800d0e 	bge	r3,r2,8111bdd0 <__any_on+0x44>
8111bd9c:	18c7883a 	add	r3,r3,r3
8111bda0:	18c7883a 	add	r3,r3,r3
8111bda4:	20c7883a 	add	r3,r4,r3
8111bda8:	20c0192e 	bgeu	r4,r3,8111be10 <__any_on+0x84>
8111bdac:	18bfff17 	ldw	r2,-4(r3)
8111bdb0:	18ffff04 	addi	r3,r3,-4
8111bdb4:	1000041e 	bne	r2,zero,8111bdc8 <__any_on+0x3c>
8111bdb8:	20c0142e 	bgeu	r4,r3,8111be0c <__any_on+0x80>
8111bdbc:	18ffff04 	addi	r3,r3,-4
8111bdc0:	19400017 	ldw	r5,0(r3)
8111bdc4:	283ffc26 	beq	r5,zero,8111bdb8 <__reset+0xfb0fbdb8>
8111bdc8:	00800044 	movi	r2,1
8111bdcc:	f800283a 	ret
8111bdd0:	10c00a0e 	bge	r2,r3,8111bdfc <__any_on+0x70>
8111bdd4:	1085883a 	add	r2,r2,r2
8111bdd8:	1085883a 	add	r2,r2,r2
8111bddc:	294007cc 	andi	r5,r5,31
8111bde0:	2087883a 	add	r3,r4,r2
8111bde4:	283ff026 	beq	r5,zero,8111bda8 <__reset+0xfb0fbda8>
8111bde8:	19800017 	ldw	r6,0(r3)
8111bdec:	3144d83a 	srl	r2,r6,r5
8111bdf0:	114a983a 	sll	r5,r2,r5
8111bdf4:	317ff41e 	bne	r6,r5,8111bdc8 <__reset+0xfb0fbdc8>
8111bdf8:	003feb06 	br	8111bda8 <__reset+0xfb0fbda8>
8111bdfc:	1085883a 	add	r2,r2,r2
8111be00:	1085883a 	add	r2,r2,r2
8111be04:	2087883a 	add	r3,r4,r2
8111be08:	003fe706 	br	8111bda8 <__reset+0xfb0fbda8>
8111be0c:	f800283a 	ret
8111be10:	0005883a 	mov	r2,zero
8111be14:	f800283a 	ret

8111be18 <_read_r>:
8111be18:	defffd04 	addi	sp,sp,-12
8111be1c:	de00012e 	bgeu	sp,et,8111be24 <_read_r+0xc>
8111be20:	003b68fa 	trap	3
8111be24:	2805883a 	mov	r2,r5
8111be28:	dc000015 	stw	r16,0(sp)
8111be2c:	04204534 	movhi	r16,33044
8111be30:	dc400115 	stw	r17,4(sp)
8111be34:	300b883a 	mov	r5,r6
8111be38:	843a8004 	addi	r16,r16,-5632
8111be3c:	2023883a 	mov	r17,r4
8111be40:	380d883a 	mov	r6,r7
8111be44:	1009883a 	mov	r4,r2
8111be48:	dfc00215 	stw	ra,8(sp)
8111be4c:	80000015 	stw	zero,0(r16)
8111be50:	1125f500 	call	81125f50 <read>
8111be54:	00ffffc4 	movi	r3,-1
8111be58:	10c00526 	beq	r2,r3,8111be70 <_read_r+0x58>
8111be5c:	dfc00217 	ldw	ra,8(sp)
8111be60:	dc400117 	ldw	r17,4(sp)
8111be64:	dc000017 	ldw	r16,0(sp)
8111be68:	dec00304 	addi	sp,sp,12
8111be6c:	f800283a 	ret
8111be70:	80c00017 	ldw	r3,0(r16)
8111be74:	183ff926 	beq	r3,zero,8111be5c <__reset+0xfb0fbe5c>
8111be78:	88c00015 	stw	r3,0(r17)
8111be7c:	003ff706 	br	8111be5c <__reset+0xfb0fbe5c>

8111be80 <_realloc_r>:
8111be80:	defff604 	addi	sp,sp,-40
8111be84:	de00012e 	bgeu	sp,et,8111be8c <_realloc_r+0xc>
8111be88:	003b68fa 	trap	3
8111be8c:	dc800215 	stw	r18,8(sp)
8111be90:	dfc00915 	stw	ra,36(sp)
8111be94:	df000815 	stw	fp,32(sp)
8111be98:	ddc00715 	stw	r23,28(sp)
8111be9c:	dd800615 	stw	r22,24(sp)
8111bea0:	dd400515 	stw	r21,20(sp)
8111bea4:	dd000415 	stw	r20,16(sp)
8111bea8:	dcc00315 	stw	r19,12(sp)
8111beac:	dc400115 	stw	r17,4(sp)
8111beb0:	dc000015 	stw	r16,0(sp)
8111beb4:	3025883a 	mov	r18,r6
8111beb8:	2800b726 	beq	r5,zero,8111c198 <_realloc_r+0x318>
8111bebc:	282b883a 	mov	r21,r5
8111bec0:	2029883a 	mov	r20,r4
8111bec4:	11267240 	call	81126724 <__malloc_lock>
8111bec8:	a8bfff17 	ldw	r2,-4(r21)
8111becc:	043fff04 	movi	r16,-4
8111bed0:	90c002c4 	addi	r3,r18,11
8111bed4:	01000584 	movi	r4,22
8111bed8:	acfffe04 	addi	r19,r21,-8
8111bedc:	1420703a 	and	r16,r2,r16
8111bee0:	20c0332e 	bgeu	r4,r3,8111bfb0 <_realloc_r+0x130>
8111bee4:	047ffe04 	movi	r17,-8
8111bee8:	1c62703a 	and	r17,r3,r17
8111beec:	8807883a 	mov	r3,r17
8111bef0:	88005816 	blt	r17,zero,8111c054 <_realloc_r+0x1d4>
8111bef4:	8c805736 	bltu	r17,r18,8111c054 <_realloc_r+0x1d4>
8111bef8:	80c0300e 	bge	r16,r3,8111bfbc <_realloc_r+0x13c>
8111befc:	07204534 	movhi	fp,33044
8111bf00:	e7340c04 	addi	fp,fp,-12240
8111bf04:	e1c00217 	ldw	r7,8(fp)
8111bf08:	9c09883a 	add	r4,r19,r16
8111bf0c:	22000117 	ldw	r8,4(r4)
8111bf10:	21c06326 	beq	r4,r7,8111c0a0 <_realloc_r+0x220>
8111bf14:	017fff84 	movi	r5,-2
8111bf18:	414a703a 	and	r5,r8,r5
8111bf1c:	214b883a 	add	r5,r4,r5
8111bf20:	29800117 	ldw	r6,4(r5)
8111bf24:	3180004c 	andi	r6,r6,1
8111bf28:	30003f26 	beq	r6,zero,8111c028 <_realloc_r+0x1a8>
8111bf2c:	1080004c 	andi	r2,r2,1
8111bf30:	10008326 	beq	r2,zero,8111c140 <_realloc_r+0x2c0>
8111bf34:	900b883a 	mov	r5,r18
8111bf38:	a009883a 	mov	r4,r20
8111bf3c:	11106940 	call	81110694 <_malloc_r>
8111bf40:	1025883a 	mov	r18,r2
8111bf44:	10011e26 	beq	r2,zero,8111c3c0 <_realloc_r+0x540>
8111bf48:	a93fff17 	ldw	r4,-4(r21)
8111bf4c:	10fffe04 	addi	r3,r2,-8
8111bf50:	00bfff84 	movi	r2,-2
8111bf54:	2084703a 	and	r2,r4,r2
8111bf58:	9885883a 	add	r2,r19,r2
8111bf5c:	1880ee26 	beq	r3,r2,8111c318 <_realloc_r+0x498>
8111bf60:	81bfff04 	addi	r6,r16,-4
8111bf64:	00800904 	movi	r2,36
8111bf68:	1180b836 	bltu	r2,r6,8111c24c <_realloc_r+0x3cc>
8111bf6c:	00c004c4 	movi	r3,19
8111bf70:	19809636 	bltu	r3,r6,8111c1cc <_realloc_r+0x34c>
8111bf74:	9005883a 	mov	r2,r18
8111bf78:	a807883a 	mov	r3,r21
8111bf7c:	19000017 	ldw	r4,0(r3)
8111bf80:	11000015 	stw	r4,0(r2)
8111bf84:	19000117 	ldw	r4,4(r3)
8111bf88:	11000115 	stw	r4,4(r2)
8111bf8c:	18c00217 	ldw	r3,8(r3)
8111bf90:	10c00215 	stw	r3,8(r2)
8111bf94:	a80b883a 	mov	r5,r21
8111bf98:	a009883a 	mov	r4,r20
8111bf9c:	1119dec0 	call	81119dec <_free_r>
8111bfa0:	a009883a 	mov	r4,r20
8111bfa4:	112684c0 	call	8112684c <__malloc_unlock>
8111bfa8:	9005883a 	mov	r2,r18
8111bfac:	00001206 	br	8111bff8 <_realloc_r+0x178>
8111bfb0:	00c00404 	movi	r3,16
8111bfb4:	1823883a 	mov	r17,r3
8111bfb8:	003fce06 	br	8111bef4 <__reset+0xfb0fbef4>
8111bfbc:	a825883a 	mov	r18,r21
8111bfc0:	8445c83a 	sub	r2,r16,r17
8111bfc4:	00c003c4 	movi	r3,15
8111bfc8:	18802636 	bltu	r3,r2,8111c064 <_realloc_r+0x1e4>
8111bfcc:	99800117 	ldw	r6,4(r19)
8111bfd0:	9c07883a 	add	r3,r19,r16
8111bfd4:	3180004c 	andi	r6,r6,1
8111bfd8:	3420b03a 	or	r16,r6,r16
8111bfdc:	9c000115 	stw	r16,4(r19)
8111bfe0:	18800117 	ldw	r2,4(r3)
8111bfe4:	10800054 	ori	r2,r2,1
8111bfe8:	18800115 	stw	r2,4(r3)
8111bfec:	a009883a 	mov	r4,r20
8111bff0:	112684c0 	call	8112684c <__malloc_unlock>
8111bff4:	9005883a 	mov	r2,r18
8111bff8:	dfc00917 	ldw	ra,36(sp)
8111bffc:	df000817 	ldw	fp,32(sp)
8111c000:	ddc00717 	ldw	r23,28(sp)
8111c004:	dd800617 	ldw	r22,24(sp)
8111c008:	dd400517 	ldw	r21,20(sp)
8111c00c:	dd000417 	ldw	r20,16(sp)
8111c010:	dcc00317 	ldw	r19,12(sp)
8111c014:	dc800217 	ldw	r18,8(sp)
8111c018:	dc400117 	ldw	r17,4(sp)
8111c01c:	dc000017 	ldw	r16,0(sp)
8111c020:	dec00a04 	addi	sp,sp,40
8111c024:	f800283a 	ret
8111c028:	017fff04 	movi	r5,-4
8111c02c:	414a703a 	and	r5,r8,r5
8111c030:	814d883a 	add	r6,r16,r5
8111c034:	30c01f16 	blt	r6,r3,8111c0b4 <_realloc_r+0x234>
8111c038:	20800317 	ldw	r2,12(r4)
8111c03c:	20c00217 	ldw	r3,8(r4)
8111c040:	a825883a 	mov	r18,r21
8111c044:	3021883a 	mov	r16,r6
8111c048:	18800315 	stw	r2,12(r3)
8111c04c:	10c00215 	stw	r3,8(r2)
8111c050:	003fdb06 	br	8111bfc0 <__reset+0xfb0fbfc0>
8111c054:	00800304 	movi	r2,12
8111c058:	a0800015 	stw	r2,0(r20)
8111c05c:	0005883a 	mov	r2,zero
8111c060:	003fe506 	br	8111bff8 <__reset+0xfb0fbff8>
8111c064:	98c00117 	ldw	r3,4(r19)
8111c068:	9c4b883a 	add	r5,r19,r17
8111c06c:	11000054 	ori	r4,r2,1
8111c070:	18c0004c 	andi	r3,r3,1
8111c074:	1c62b03a 	or	r17,r3,r17
8111c078:	9c400115 	stw	r17,4(r19)
8111c07c:	29000115 	stw	r4,4(r5)
8111c080:	2885883a 	add	r2,r5,r2
8111c084:	10c00117 	ldw	r3,4(r2)
8111c088:	29400204 	addi	r5,r5,8
8111c08c:	a009883a 	mov	r4,r20
8111c090:	18c00054 	ori	r3,r3,1
8111c094:	10c00115 	stw	r3,4(r2)
8111c098:	1119dec0 	call	81119dec <_free_r>
8111c09c:	003fd306 	br	8111bfec <__reset+0xfb0fbfec>
8111c0a0:	017fff04 	movi	r5,-4
8111c0a4:	414a703a 	and	r5,r8,r5
8111c0a8:	89800404 	addi	r6,r17,16
8111c0ac:	8151883a 	add	r8,r16,r5
8111c0b0:	4180590e 	bge	r8,r6,8111c218 <_realloc_r+0x398>
8111c0b4:	1080004c 	andi	r2,r2,1
8111c0b8:	103f9e1e 	bne	r2,zero,8111bf34 <__reset+0xfb0fbf34>
8111c0bc:	adbffe17 	ldw	r22,-8(r21)
8111c0c0:	00bfff04 	movi	r2,-4
8111c0c4:	9dadc83a 	sub	r22,r19,r22
8111c0c8:	b1800117 	ldw	r6,4(r22)
8111c0cc:	3084703a 	and	r2,r6,r2
8111c0d0:	20002026 	beq	r4,zero,8111c154 <_realloc_r+0x2d4>
8111c0d4:	80af883a 	add	r23,r16,r2
8111c0d8:	b96f883a 	add	r23,r23,r5
8111c0dc:	21c05f26 	beq	r4,r7,8111c25c <_realloc_r+0x3dc>
8111c0e0:	b8c01c16 	blt	r23,r3,8111c154 <_realloc_r+0x2d4>
8111c0e4:	20800317 	ldw	r2,12(r4)
8111c0e8:	20c00217 	ldw	r3,8(r4)
8111c0ec:	81bfff04 	addi	r6,r16,-4
8111c0f0:	01000904 	movi	r4,36
8111c0f4:	18800315 	stw	r2,12(r3)
8111c0f8:	10c00215 	stw	r3,8(r2)
8111c0fc:	b0c00217 	ldw	r3,8(r22)
8111c100:	b0800317 	ldw	r2,12(r22)
8111c104:	b4800204 	addi	r18,r22,8
8111c108:	18800315 	stw	r2,12(r3)
8111c10c:	10c00215 	stw	r3,8(r2)
8111c110:	21801b36 	bltu	r4,r6,8111c180 <_realloc_r+0x300>
8111c114:	008004c4 	movi	r2,19
8111c118:	1180352e 	bgeu	r2,r6,8111c1f0 <_realloc_r+0x370>
8111c11c:	a8800017 	ldw	r2,0(r21)
8111c120:	b0800215 	stw	r2,8(r22)
8111c124:	a8800117 	ldw	r2,4(r21)
8111c128:	b0800315 	stw	r2,12(r22)
8111c12c:	008006c4 	movi	r2,27
8111c130:	11807f36 	bltu	r2,r6,8111c330 <_realloc_r+0x4b0>
8111c134:	b0800404 	addi	r2,r22,16
8111c138:	ad400204 	addi	r21,r21,8
8111c13c:	00002d06 	br	8111c1f4 <_realloc_r+0x374>
8111c140:	adbffe17 	ldw	r22,-8(r21)
8111c144:	00bfff04 	movi	r2,-4
8111c148:	9dadc83a 	sub	r22,r19,r22
8111c14c:	b1000117 	ldw	r4,4(r22)
8111c150:	2084703a 	and	r2,r4,r2
8111c154:	b03f7726 	beq	r22,zero,8111bf34 <__reset+0xfb0fbf34>
8111c158:	80af883a 	add	r23,r16,r2
8111c15c:	b8ff7516 	blt	r23,r3,8111bf34 <__reset+0xfb0fbf34>
8111c160:	b0800317 	ldw	r2,12(r22)
8111c164:	b0c00217 	ldw	r3,8(r22)
8111c168:	81bfff04 	addi	r6,r16,-4
8111c16c:	01000904 	movi	r4,36
8111c170:	18800315 	stw	r2,12(r3)
8111c174:	10c00215 	stw	r3,8(r2)
8111c178:	b4800204 	addi	r18,r22,8
8111c17c:	21bfe52e 	bgeu	r4,r6,8111c114 <__reset+0xfb0fc114>
8111c180:	a80b883a 	mov	r5,r21
8111c184:	9009883a 	mov	r4,r18
8111c188:	111ac600 	call	8111ac60 <memmove>
8111c18c:	b821883a 	mov	r16,r23
8111c190:	b027883a 	mov	r19,r22
8111c194:	003f8a06 	br	8111bfc0 <__reset+0xfb0fbfc0>
8111c198:	300b883a 	mov	r5,r6
8111c19c:	dfc00917 	ldw	ra,36(sp)
8111c1a0:	df000817 	ldw	fp,32(sp)
8111c1a4:	ddc00717 	ldw	r23,28(sp)
8111c1a8:	dd800617 	ldw	r22,24(sp)
8111c1ac:	dd400517 	ldw	r21,20(sp)
8111c1b0:	dd000417 	ldw	r20,16(sp)
8111c1b4:	dcc00317 	ldw	r19,12(sp)
8111c1b8:	dc800217 	ldw	r18,8(sp)
8111c1bc:	dc400117 	ldw	r17,4(sp)
8111c1c0:	dc000017 	ldw	r16,0(sp)
8111c1c4:	dec00a04 	addi	sp,sp,40
8111c1c8:	11106941 	jmpi	81110694 <_malloc_r>
8111c1cc:	a8c00017 	ldw	r3,0(r21)
8111c1d0:	90c00015 	stw	r3,0(r18)
8111c1d4:	a8c00117 	ldw	r3,4(r21)
8111c1d8:	90c00115 	stw	r3,4(r18)
8111c1dc:	00c006c4 	movi	r3,27
8111c1e0:	19804536 	bltu	r3,r6,8111c2f8 <_realloc_r+0x478>
8111c1e4:	90800204 	addi	r2,r18,8
8111c1e8:	a8c00204 	addi	r3,r21,8
8111c1ec:	003f6306 	br	8111bf7c <__reset+0xfb0fbf7c>
8111c1f0:	9005883a 	mov	r2,r18
8111c1f4:	a8c00017 	ldw	r3,0(r21)
8111c1f8:	b821883a 	mov	r16,r23
8111c1fc:	b027883a 	mov	r19,r22
8111c200:	10c00015 	stw	r3,0(r2)
8111c204:	a8c00117 	ldw	r3,4(r21)
8111c208:	10c00115 	stw	r3,4(r2)
8111c20c:	a8c00217 	ldw	r3,8(r21)
8111c210:	10c00215 	stw	r3,8(r2)
8111c214:	003f6a06 	br	8111bfc0 <__reset+0xfb0fbfc0>
8111c218:	9c67883a 	add	r19,r19,r17
8111c21c:	4445c83a 	sub	r2,r8,r17
8111c220:	e4c00215 	stw	r19,8(fp)
8111c224:	10800054 	ori	r2,r2,1
8111c228:	98800115 	stw	r2,4(r19)
8111c22c:	a8bfff17 	ldw	r2,-4(r21)
8111c230:	a009883a 	mov	r4,r20
8111c234:	1080004c 	andi	r2,r2,1
8111c238:	1462b03a 	or	r17,r2,r17
8111c23c:	ac7fff15 	stw	r17,-4(r21)
8111c240:	112684c0 	call	8112684c <__malloc_unlock>
8111c244:	a805883a 	mov	r2,r21
8111c248:	003f6b06 	br	8111bff8 <__reset+0xfb0fbff8>
8111c24c:	a80b883a 	mov	r5,r21
8111c250:	9009883a 	mov	r4,r18
8111c254:	111ac600 	call	8111ac60 <memmove>
8111c258:	003f4e06 	br	8111bf94 <__reset+0xfb0fbf94>
8111c25c:	89000404 	addi	r4,r17,16
8111c260:	b93fbc16 	blt	r23,r4,8111c154 <__reset+0xfb0fc154>
8111c264:	b0800317 	ldw	r2,12(r22)
8111c268:	b0c00217 	ldw	r3,8(r22)
8111c26c:	81bfff04 	addi	r6,r16,-4
8111c270:	01000904 	movi	r4,36
8111c274:	18800315 	stw	r2,12(r3)
8111c278:	10c00215 	stw	r3,8(r2)
8111c27c:	b4800204 	addi	r18,r22,8
8111c280:	21804336 	bltu	r4,r6,8111c390 <_realloc_r+0x510>
8111c284:	008004c4 	movi	r2,19
8111c288:	11803f2e 	bgeu	r2,r6,8111c388 <_realloc_r+0x508>
8111c28c:	a8800017 	ldw	r2,0(r21)
8111c290:	b0800215 	stw	r2,8(r22)
8111c294:	a8800117 	ldw	r2,4(r21)
8111c298:	b0800315 	stw	r2,12(r22)
8111c29c:	008006c4 	movi	r2,27
8111c2a0:	11803f36 	bltu	r2,r6,8111c3a0 <_realloc_r+0x520>
8111c2a4:	b0800404 	addi	r2,r22,16
8111c2a8:	ad400204 	addi	r21,r21,8
8111c2ac:	a8c00017 	ldw	r3,0(r21)
8111c2b0:	10c00015 	stw	r3,0(r2)
8111c2b4:	a8c00117 	ldw	r3,4(r21)
8111c2b8:	10c00115 	stw	r3,4(r2)
8111c2bc:	a8c00217 	ldw	r3,8(r21)
8111c2c0:	10c00215 	stw	r3,8(r2)
8111c2c4:	b447883a 	add	r3,r22,r17
8111c2c8:	bc45c83a 	sub	r2,r23,r17
8111c2cc:	e0c00215 	stw	r3,8(fp)
8111c2d0:	10800054 	ori	r2,r2,1
8111c2d4:	18800115 	stw	r2,4(r3)
8111c2d8:	b0800117 	ldw	r2,4(r22)
8111c2dc:	a009883a 	mov	r4,r20
8111c2e0:	1080004c 	andi	r2,r2,1
8111c2e4:	1462b03a 	or	r17,r2,r17
8111c2e8:	b4400115 	stw	r17,4(r22)
8111c2ec:	112684c0 	call	8112684c <__malloc_unlock>
8111c2f0:	9005883a 	mov	r2,r18
8111c2f4:	003f4006 	br	8111bff8 <__reset+0xfb0fbff8>
8111c2f8:	a8c00217 	ldw	r3,8(r21)
8111c2fc:	90c00215 	stw	r3,8(r18)
8111c300:	a8c00317 	ldw	r3,12(r21)
8111c304:	90c00315 	stw	r3,12(r18)
8111c308:	30801126 	beq	r6,r2,8111c350 <_realloc_r+0x4d0>
8111c30c:	90800404 	addi	r2,r18,16
8111c310:	a8c00404 	addi	r3,r21,16
8111c314:	003f1906 	br	8111bf7c <__reset+0xfb0fbf7c>
8111c318:	90ffff17 	ldw	r3,-4(r18)
8111c31c:	00bfff04 	movi	r2,-4
8111c320:	a825883a 	mov	r18,r21
8111c324:	1884703a 	and	r2,r3,r2
8111c328:	80a1883a 	add	r16,r16,r2
8111c32c:	003f2406 	br	8111bfc0 <__reset+0xfb0fbfc0>
8111c330:	a8800217 	ldw	r2,8(r21)
8111c334:	b0800415 	stw	r2,16(r22)
8111c338:	a8800317 	ldw	r2,12(r21)
8111c33c:	b0800515 	stw	r2,20(r22)
8111c340:	31000a26 	beq	r6,r4,8111c36c <_realloc_r+0x4ec>
8111c344:	b0800604 	addi	r2,r22,24
8111c348:	ad400404 	addi	r21,r21,16
8111c34c:	003fa906 	br	8111c1f4 <__reset+0xfb0fc1f4>
8111c350:	a9000417 	ldw	r4,16(r21)
8111c354:	90800604 	addi	r2,r18,24
8111c358:	a8c00604 	addi	r3,r21,24
8111c35c:	91000415 	stw	r4,16(r18)
8111c360:	a9000517 	ldw	r4,20(r21)
8111c364:	91000515 	stw	r4,20(r18)
8111c368:	003f0406 	br	8111bf7c <__reset+0xfb0fbf7c>
8111c36c:	a8c00417 	ldw	r3,16(r21)
8111c370:	ad400604 	addi	r21,r21,24
8111c374:	b0800804 	addi	r2,r22,32
8111c378:	b0c00615 	stw	r3,24(r22)
8111c37c:	a8ffff17 	ldw	r3,-4(r21)
8111c380:	b0c00715 	stw	r3,28(r22)
8111c384:	003f9b06 	br	8111c1f4 <__reset+0xfb0fc1f4>
8111c388:	9005883a 	mov	r2,r18
8111c38c:	003fc706 	br	8111c2ac <__reset+0xfb0fc2ac>
8111c390:	a80b883a 	mov	r5,r21
8111c394:	9009883a 	mov	r4,r18
8111c398:	111ac600 	call	8111ac60 <memmove>
8111c39c:	003fc906 	br	8111c2c4 <__reset+0xfb0fc2c4>
8111c3a0:	a8800217 	ldw	r2,8(r21)
8111c3a4:	b0800415 	stw	r2,16(r22)
8111c3a8:	a8800317 	ldw	r2,12(r21)
8111c3ac:	b0800515 	stw	r2,20(r22)
8111c3b0:	31000726 	beq	r6,r4,8111c3d0 <_realloc_r+0x550>
8111c3b4:	b0800604 	addi	r2,r22,24
8111c3b8:	ad400404 	addi	r21,r21,16
8111c3bc:	003fbb06 	br	8111c2ac <__reset+0xfb0fc2ac>
8111c3c0:	a009883a 	mov	r4,r20
8111c3c4:	112684c0 	call	8112684c <__malloc_unlock>
8111c3c8:	0005883a 	mov	r2,zero
8111c3cc:	003f0a06 	br	8111bff8 <__reset+0xfb0fbff8>
8111c3d0:	a8c00417 	ldw	r3,16(r21)
8111c3d4:	ad400604 	addi	r21,r21,24
8111c3d8:	b0800804 	addi	r2,r22,32
8111c3dc:	b0c00615 	stw	r3,24(r22)
8111c3e0:	a8ffff17 	ldw	r3,-4(r21)
8111c3e4:	b0c00715 	stw	r3,28(r22)
8111c3e8:	003fb006 	br	8111c2ac <__reset+0xfb0fc2ac>

8111c3ec <__fpclassifyd>:
8111c3ec:	00a00034 	movhi	r2,32768
8111c3f0:	10bfffc4 	addi	r2,r2,-1
8111c3f4:	2884703a 	and	r2,r5,r2
8111c3f8:	10000726 	beq	r2,zero,8111c418 <__fpclassifyd+0x2c>
8111c3fc:	00fffc34 	movhi	r3,65520
8111c400:	019ff834 	movhi	r6,32736
8111c404:	28c7883a 	add	r3,r5,r3
8111c408:	31bfffc4 	addi	r6,r6,-1
8111c40c:	30c00536 	bltu	r6,r3,8111c424 <__fpclassifyd+0x38>
8111c410:	00800104 	movi	r2,4
8111c414:	f800283a 	ret
8111c418:	2000021e 	bne	r4,zero,8111c424 <__fpclassifyd+0x38>
8111c41c:	00800084 	movi	r2,2
8111c420:	f800283a 	ret
8111c424:	00dffc34 	movhi	r3,32752
8111c428:	019ff834 	movhi	r6,32736
8111c42c:	28cb883a 	add	r5,r5,r3
8111c430:	31bfffc4 	addi	r6,r6,-1
8111c434:	317ff62e 	bgeu	r6,r5,8111c410 <__reset+0xfb0fc410>
8111c438:	01400434 	movhi	r5,16
8111c43c:	297fffc4 	addi	r5,r5,-1
8111c440:	28800236 	bltu	r5,r2,8111c44c <__fpclassifyd+0x60>
8111c444:	008000c4 	movi	r2,3
8111c448:	f800283a 	ret
8111c44c:	10c00226 	beq	r2,r3,8111c458 <__fpclassifyd+0x6c>
8111c450:	0005883a 	mov	r2,zero
8111c454:	f800283a 	ret
8111c458:	2005003a 	cmpeq	r2,r4,zero
8111c45c:	f800283a 	ret

8111c460 <__sccl>:
8111c460:	2a000003 	ldbu	r8,0(r5)
8111c464:	00801784 	movi	r2,94
8111c468:	40802a26 	beq	r8,r2,8111c514 <__sccl+0xb4>
8111c46c:	29400044 	addi	r5,r5,1
8111c470:	000f883a 	mov	r7,zero
8111c474:	0013883a 	mov	r9,zero
8111c478:	2007883a 	mov	r3,r4
8111c47c:	21804004 	addi	r6,r4,256
8111c480:	19c00005 	stb	r7,0(r3)
8111c484:	18c00044 	addi	r3,r3,1
8111c488:	19bffd1e 	bne	r3,r6,8111c480 <__reset+0xfb0fc480>
8111c48c:	40001126 	beq	r8,zero,8111c4d4 <__sccl+0x74>
8111c490:	00800044 	movi	r2,1
8111c494:	124fc83a 	sub	r7,r2,r9
8111c498:	02800b44 	movi	r10,45
8111c49c:	02c01744 	movi	r11,93
8111c4a0:	2205883a 	add	r2,r4,r8
8111c4a4:	11c00005 	stb	r7,0(r2)
8111c4a8:	28800044 	addi	r2,r5,1
8111c4ac:	28c00003 	ldbu	r3,0(r5)
8111c4b0:	1a800a26 	beq	r3,r10,8111c4dc <__sccl+0x7c>
8111c4b4:	1ac00426 	beq	r3,r11,8111c4c8 <__sccl+0x68>
8111c4b8:	18000426 	beq	r3,zero,8111c4cc <__sccl+0x6c>
8111c4bc:	1811883a 	mov	r8,r3
8111c4c0:	100b883a 	mov	r5,r2
8111c4c4:	003ff606 	br	8111c4a0 <__reset+0xfb0fc4a0>
8111c4c8:	f800283a 	ret
8111c4cc:	2805883a 	mov	r2,r5
8111c4d0:	f800283a 	ret
8111c4d4:	28bfffc4 	addi	r2,r5,-1
8111c4d8:	f800283a 	ret
8111c4dc:	12400003 	ldbu	r9,0(r2)
8111c4e0:	4ac01126 	beq	r9,r11,8111c528 <__sccl+0xc8>
8111c4e4:	4a001016 	blt	r9,r8,8111c528 <__sccl+0xc8>
8111c4e8:	41800044 	addi	r6,r8,1
8111c4ec:	29400084 	addi	r5,r5,2
8111c4f0:	2187883a 	add	r3,r4,r6
8111c4f4:	00000106 	br	8111c4fc <__sccl+0x9c>
8111c4f8:	31800044 	addi	r6,r6,1
8111c4fc:	19c00005 	stb	r7,0(r3)
8111c500:	3011883a 	mov	r8,r6
8111c504:	18c00044 	addi	r3,r3,1
8111c508:	327ffb16 	blt	r6,r9,8111c4f8 <__reset+0xfb0fc4f8>
8111c50c:	10800084 	addi	r2,r2,2
8111c510:	003fe606 	br	8111c4ac <__reset+0xfb0fc4ac>
8111c514:	2a000043 	ldbu	r8,1(r5)
8111c518:	01c00044 	movi	r7,1
8111c51c:	29400084 	addi	r5,r5,2
8111c520:	02400044 	movi	r9,1
8111c524:	003fd406 	br	8111c478 <__reset+0xfb0fc478>
8111c528:	5011883a 	mov	r8,r10
8111c52c:	003fe406 	br	8111c4c0 <__reset+0xfb0fc4c0>

8111c530 <nanf>:
8111c530:	009ff034 	movhi	r2,32704
8111c534:	f800283a 	ret

8111c538 <strcmp>:
8111c538:	2144b03a 	or	r2,r4,r5
8111c53c:	108000cc 	andi	r2,r2,3
8111c540:	1000171e 	bne	r2,zero,8111c5a0 <strcmp+0x68>
8111c544:	20800017 	ldw	r2,0(r4)
8111c548:	28c00017 	ldw	r3,0(r5)
8111c54c:	10c0141e 	bne	r2,r3,8111c5a0 <strcmp+0x68>
8111c550:	027fbff4 	movhi	r9,65279
8111c554:	4a7fbfc4 	addi	r9,r9,-257
8111c558:	0086303a 	nor	r3,zero,r2
8111c55c:	02202074 	movhi	r8,32897
8111c560:	1245883a 	add	r2,r2,r9
8111c564:	42202004 	addi	r8,r8,-32640
8111c568:	10c4703a 	and	r2,r2,r3
8111c56c:	1204703a 	and	r2,r2,r8
8111c570:	10000226 	beq	r2,zero,8111c57c <strcmp+0x44>
8111c574:	00002306 	br	8111c604 <strcmp+0xcc>
8111c578:	1000221e 	bne	r2,zero,8111c604 <strcmp+0xcc>
8111c57c:	21000104 	addi	r4,r4,4
8111c580:	20c00017 	ldw	r3,0(r4)
8111c584:	29400104 	addi	r5,r5,4
8111c588:	29800017 	ldw	r6,0(r5)
8111c58c:	1a4f883a 	add	r7,r3,r9
8111c590:	00c4303a 	nor	r2,zero,r3
8111c594:	3884703a 	and	r2,r7,r2
8111c598:	1204703a 	and	r2,r2,r8
8111c59c:	19bff626 	beq	r3,r6,8111c578 <__reset+0xfb0fc578>
8111c5a0:	20800003 	ldbu	r2,0(r4)
8111c5a4:	10c03fcc 	andi	r3,r2,255
8111c5a8:	18c0201c 	xori	r3,r3,128
8111c5ac:	18ffe004 	addi	r3,r3,-128
8111c5b0:	18000c26 	beq	r3,zero,8111c5e4 <strcmp+0xac>
8111c5b4:	29800007 	ldb	r6,0(r5)
8111c5b8:	19800326 	beq	r3,r6,8111c5c8 <strcmp+0x90>
8111c5bc:	00001306 	br	8111c60c <strcmp+0xd4>
8111c5c0:	29800007 	ldb	r6,0(r5)
8111c5c4:	11800b1e 	bne	r2,r6,8111c5f4 <strcmp+0xbc>
8111c5c8:	21000044 	addi	r4,r4,1
8111c5cc:	20c00003 	ldbu	r3,0(r4)
8111c5d0:	29400044 	addi	r5,r5,1
8111c5d4:	18803fcc 	andi	r2,r3,255
8111c5d8:	1080201c 	xori	r2,r2,128
8111c5dc:	10bfe004 	addi	r2,r2,-128
8111c5e0:	103ff71e 	bne	r2,zero,8111c5c0 <__reset+0xfb0fc5c0>
8111c5e4:	0007883a 	mov	r3,zero
8111c5e8:	28800003 	ldbu	r2,0(r5)
8111c5ec:	1885c83a 	sub	r2,r3,r2
8111c5f0:	f800283a 	ret
8111c5f4:	28800003 	ldbu	r2,0(r5)
8111c5f8:	18c03fcc 	andi	r3,r3,255
8111c5fc:	1885c83a 	sub	r2,r3,r2
8111c600:	f800283a 	ret
8111c604:	0005883a 	mov	r2,zero
8111c608:	f800283a 	ret
8111c60c:	10c03fcc 	andi	r3,r2,255
8111c610:	003ff506 	br	8111c5e8 <__reset+0xfb0fc5e8>

8111c614 <sulp>:
8111c614:	defffd04 	addi	sp,sp,-12
8111c618:	de00012e 	bgeu	sp,et,8111c620 <sulp+0xc>
8111c61c:	003b68fa 	trap	3
8111c620:	dc400115 	stw	r17,4(sp)
8111c624:	3023883a 	mov	r17,r6
8111c628:	dc000015 	stw	r16,0(sp)
8111c62c:	dfc00215 	stw	ra,8(sp)
8111c630:	2821883a 	mov	r16,r5
8111c634:	111b9200 	call	8111b920 <__ulp>
8111c638:	88000c26 	beq	r17,zero,8111c66c <sulp+0x58>
8111c63c:	841ffc2c 	andhi	r16,r16,32752
8111c640:	8020d53a 	srli	r16,r16,20
8111c644:	01c01ac4 	movi	r7,107
8111c648:	3c21c83a 	sub	r16,r7,r16
8111c64c:	0400070e 	bge	zero,r16,8111c66c <sulp+0x58>
8111c650:	8020953a 	slli	r16,r16,20
8111c654:	01cffc34 	movhi	r7,16368
8111c658:	000d883a 	mov	r6,zero
8111c65c:	81cf883a 	add	r7,r16,r7
8111c660:	1009883a 	mov	r4,r2
8111c664:	180b883a 	mov	r5,r3
8111c668:	110f3080 	call	8110f308 <__muldf3>
8111c66c:	dfc00217 	ldw	ra,8(sp)
8111c670:	dc400117 	ldw	r17,4(sp)
8111c674:	dc000017 	ldw	r16,0(sp)
8111c678:	dec00304 	addi	sp,sp,12
8111c67c:	f800283a 	ret

8111c680 <_strtod_r>:
8111c680:	deffe204 	addi	sp,sp,-120
8111c684:	de00012e 	bgeu	sp,et,8111c68c <_strtod_r+0xc>
8111c688:	003b68fa 	trap	3
8111c68c:	ddc01b15 	stw	r23,108(sp)
8111c690:	dd001815 	stw	r20,96(sp)
8111c694:	dc801615 	stw	r18,88(sp)
8111c698:	dc401515 	stw	r17,84(sp)
8111c69c:	dc001415 	stw	r16,80(sp)
8111c6a0:	d9400615 	stw	r5,24(sp)
8111c6a4:	dfc01d15 	stw	ra,116(sp)
8111c6a8:	df001c15 	stw	fp,112(sp)
8111c6ac:	dd801a15 	stw	r22,104(sp)
8111c6b0:	dd401915 	stw	r21,100(sp)
8111c6b4:	dcc01715 	stw	r19,92(sp)
8111c6b8:	2021883a 	mov	r16,r4
8111c6bc:	d8000515 	stw	zero,20(sp)
8111c6c0:	2809883a 	mov	r4,r5
8111c6c4:	20800003 	ldbu	r2,0(r4)
8111c6c8:	01e044b4 	movhi	r7,33042
8111c6cc:	282f883a 	mov	r23,r5
8111c6d0:	10c03fcc 	andi	r3,r2,255
8111c6d4:	01400b44 	movi	r5,45
8111c6d8:	39f1bf04 	addi	r7,r7,-14596
8111c6dc:	3029883a 	mov	r20,r6
8111c6e0:	0025883a 	mov	r18,zero
8111c6e4:	0023883a 	mov	r17,zero
8111c6e8:	28c0ba36 	bltu	r5,r3,8111c9d4 <_strtod_r+0x354>
8111c6ec:	180690ba 	slli	r3,r3,2
8111c6f0:	19c7883a 	add	r3,r3,r7
8111c6f4:	18c00017 	ldw	r3,0(r3)
8111c6f8:	1800683a 	jmp	r3
8111c6fc:	8111c7bc 	xorhi	r4,r16,18206
8111c700:	8111c9d4 	ori	r4,r16,18215
8111c704:	8111c9d4 	ori	r4,r16,18215
8111c708:	8111c9d4 	ori	r4,r16,18215
8111c70c:	8111c9d4 	ori	r4,r16,18215
8111c710:	8111c9d4 	ori	r4,r16,18215
8111c714:	8111c9d4 	ori	r4,r16,18215
8111c718:	8111c9d4 	ori	r4,r16,18215
8111c71c:	8111c9d4 	ori	r4,r16,18215
8111c720:	8111c9c0 	call	88111c9c <__reset+0x20f1c9c>
8111c724:	8111c9c0 	call	88111c9c <__reset+0x20f1c9c>
8111c728:	8111c9c0 	call	88111c9c <__reset+0x20f1c9c>
8111c72c:	8111c9c0 	call	88111c9c <__reset+0x20f1c9c>
8111c730:	8111c9c0 	call	88111c9c <__reset+0x20f1c9c>
8111c734:	8111c9d4 	ori	r4,r16,18215
8111c738:	8111c9d4 	ori	r4,r16,18215
8111c73c:	8111c9d4 	ori	r4,r16,18215
8111c740:	8111c9d4 	ori	r4,r16,18215
8111c744:	8111c9d4 	ori	r4,r16,18215
8111c748:	8111c9d4 	ori	r4,r16,18215
8111c74c:	8111c9d4 	ori	r4,r16,18215
8111c750:	8111c9d4 	ori	r4,r16,18215
8111c754:	8111c9d4 	ori	r4,r16,18215
8111c758:	8111c9d4 	ori	r4,r16,18215
8111c75c:	8111c9d4 	ori	r4,r16,18215
8111c760:	8111c9d4 	ori	r4,r16,18215
8111c764:	8111c9d4 	ori	r4,r16,18215
8111c768:	8111c9d4 	ori	r4,r16,18215
8111c76c:	8111c9d4 	ori	r4,r16,18215
8111c770:	8111c9d4 	ori	r4,r16,18215
8111c774:	8111c9d4 	ori	r4,r16,18215
8111c778:	8111c9d4 	ori	r4,r16,18215
8111c77c:	8111c9c0 	call	88111c9c <__reset+0x20f1c9c>
8111c780:	8111c9d4 	ori	r4,r16,18215
8111c784:	8111c9d4 	ori	r4,r16,18215
8111c788:	8111c9d4 	ori	r4,r16,18215
8111c78c:	8111c9d4 	ori	r4,r16,18215
8111c790:	8111c9d4 	ori	r4,r16,18215
8111c794:	8111c9d4 	ori	r4,r16,18215
8111c798:	8111c9d4 	ori	r4,r16,18215
8111c79c:	8111c9d4 	ori	r4,r16,18215
8111c7a0:	8111c9d4 	ori	r4,r16,18215
8111c7a4:	8111c9d4 	ori	r4,r16,18215
8111c7a8:	8111c814 	ori	r4,r16,18208
8111c7ac:	8111c9d4 	ori	r4,r16,18215
8111c7b0:	8111c9b4 	orhi	r4,r16,18214
8111c7b4:	00801244 	movi	r2,73
8111c7b8:	88843526 	beq	r17,r2,8111d890 <_strtod_r+0x1210>
8111c7bc:	002b883a 	mov	r21,zero
8111c7c0:	002d883a 	mov	r22,zero
8111c7c4:	a0000526 	beq	r20,zero,8111c7dc <_strtod_r+0x15c>
8111c7c8:	d8000715 	stw	zero,28(sp)
8111c7cc:	a5c00015 	stw	r23,0(r20)
8111c7d0:	d9000717 	ldw	r4,28(sp)
8111c7d4:	20000126 	beq	r4,zero,8111c7dc <_strtod_r+0x15c>
8111c7d8:	b5a0003c 	xorhi	r22,r22,32768
8111c7dc:	a805883a 	mov	r2,r21
8111c7e0:	b007883a 	mov	r3,r22
8111c7e4:	dfc01d17 	ldw	ra,116(sp)
8111c7e8:	df001c17 	ldw	fp,112(sp)
8111c7ec:	ddc01b17 	ldw	r23,108(sp)
8111c7f0:	dd801a17 	ldw	r22,104(sp)
8111c7f4:	dd401917 	ldw	r21,100(sp)
8111c7f8:	dd001817 	ldw	r20,96(sp)
8111c7fc:	dcc01717 	ldw	r19,92(sp)
8111c800:	dc801617 	ldw	r18,88(sp)
8111c804:	dc401517 	ldw	r17,84(sp)
8111c808:	dc001417 	ldw	r16,80(sp)
8111c80c:	dec01e04 	addi	sp,sp,120
8111c810:	f800283a 	ret
8111c814:	d8000715 	stw	zero,28(sp)
8111c818:	24c00044 	addi	r19,r4,1
8111c81c:	dcc00615 	stw	r19,24(sp)
8111c820:	20800043 	ldbu	r2,1(r4)
8111c824:	10c03fcc 	andi	r3,r2,255
8111c828:	18c0201c 	xori	r3,r3,128
8111c82c:	18ffe004 	addi	r3,r3,-128
8111c830:	183fe226 	beq	r3,zero,8111c7bc <__reset+0xfb0fc7bc>
8111c834:	11403fcc 	andi	r5,r2,255
8111c838:	2940201c 	xori	r5,r5,128
8111c83c:	297fe004 	addi	r5,r5,-128
8111c840:	00c00c04 	movi	r3,48
8111c844:	28c0e526 	beq	r5,r3,8111cbdc <_strtod_r+0x55c>
8111c848:	dcc00815 	stw	r19,32(sp)
8111c84c:	0025883a 	mov	r18,zero
8111c850:	10fff404 	addi	r3,r2,-48
8111c854:	18c03fcc 	andi	r3,r3,255
8111c858:	01000244 	movi	r4,9
8111c85c:	20c37536 	bltu	r4,r3,8111d634 <_strtod_r+0xfb4>
8111c860:	dd400817 	ldw	r21,32(sp)
8111c864:	0027883a 	mov	r19,zero
8111c868:	0039883a 	mov	fp,zero
8111c86c:	002d883a 	mov	r22,zero
8111c870:	01400204 	movi	r5,8
8111c874:	2d805a16 	blt	r5,r22,8111c9e0 <_strtod_r+0x360>
8111c878:	e70002a4 	muli	fp,fp,10
8111c87c:	10c03fcc 	andi	r3,r2,255
8111c880:	18c0201c 	xori	r3,r3,128
8111c884:	18ffe004 	addi	r3,r3,-128
8111c888:	e0f9883a 	add	fp,fp,r3
8111c88c:	e73ff404 	addi	fp,fp,-48
8111c890:	ad400044 	addi	r21,r21,1
8111c894:	dd400615 	stw	r21,24(sp)
8111c898:	a8800003 	ldbu	r2,0(r21)
8111c89c:	b5800044 	addi	r22,r22,1
8111c8a0:	10fff404 	addi	r3,r2,-48
8111c8a4:	18c03fcc 	andi	r3,r3,255
8111c8a8:	20fff22e 	bgeu	r4,r3,8111c874 <__reset+0xfb0fc874>
8111c8ac:	14403fcc 	andi	r17,r2,255
8111c8b0:	8c40201c 	xori	r17,r17,128
8111c8b4:	8c7fe004 	addi	r17,r17,-128
8111c8b8:	8009883a 	mov	r4,r16
8111c8bc:	111a8a00 	call	8111a8a0 <_localeconv_r>
8111c8c0:	11400017 	ldw	r5,0(r2)
8111c8c4:	8009883a 	mov	r4,r16
8111c8c8:	d9401315 	stw	r5,76(sp)
8111c8cc:	111a8a00 	call	8111a8a0 <_localeconv_r>
8111c8d0:	11000017 	ldw	r4,0(r2)
8111c8d4:	11118240 	call	81111824 <strlen>
8111c8d8:	d9401317 	ldw	r5,76(sp)
8111c8dc:	100d883a 	mov	r6,r2
8111c8e0:	a809883a 	mov	r4,r21
8111c8e4:	11222700 	call	81122270 <strncmp>
8111c8e8:	1000ce26 	beq	r2,zero,8111cc24 <_strtod_r+0x5a4>
8111c8ec:	b013883a 	mov	r9,r22
8111c8f0:	000b883a 	mov	r5,zero
8111c8f4:	0015883a 	mov	r10,zero
8111c8f8:	0017883a 	mov	r11,zero
8111c8fc:	00801944 	movi	r2,101
8111c900:	88807826 	beq	r17,r2,8111cae4 <_strtod_r+0x464>
8111c904:	00801144 	movi	r2,69
8111c908:	88807626 	beq	r17,r2,8111cae4 <_strtod_r+0x464>
8111c90c:	002b883a 	mov	r21,zero
8111c910:	48003d1e 	bne	r9,zero,8111ca08 <_strtod_r+0x388>
8111c914:	2800391e 	bne	r5,zero,8111c9fc <_strtod_r+0x37c>
8111c918:	9000381e 	bne	r18,zero,8111c9fc <_strtod_r+0x37c>
8111c91c:	583fa71e 	bne	r11,zero,8111c7bc <__reset+0xfb0fc7bc>
8111c920:	00801384 	movi	r2,78
8111c924:	88800526 	beq	r17,r2,8111c93c <_strtod_r+0x2bc>
8111c928:	147fa20e 	bge	r2,r17,8111c7b4 <__reset+0xfb0fc7b4>
8111c92c:	00801a44 	movi	r2,105
8111c930:	8883d726 	beq	r17,r2,8111d890 <_strtod_r+0x1210>
8111c934:	00801b84 	movi	r2,110
8111c938:	88bfa01e 	bne	r17,r2,8111c7bc <__reset+0xfb0fc7bc>
8111c93c:	01604534 	movhi	r5,33044
8111c940:	d9000617 	ldw	r4,24(sp)
8111c944:	29719b04 	addi	r5,r5,-14740
8111c948:	01c00644 	movi	r7,25
8111c94c:	00000b06 	br	8111c97c <_strtod_r+0x2fc>
8111c950:	21000044 	addi	r4,r4,1
8111c954:	20800003 	ldbu	r2,0(r4)
8111c958:	10ffefc4 	addi	r3,r2,-65
8111c95c:	10803fcc 	andi	r2,r2,255
8111c960:	1080201c 	xori	r2,r2,128
8111c964:	18c03fcc 	andi	r3,r3,255
8111c968:	10bfe004 	addi	r2,r2,-128
8111c96c:	38c00136 	bltu	r7,r3,8111c974 <_strtod_r+0x2f4>
8111c970:	10800804 	addi	r2,r2,32
8111c974:	29400044 	addi	r5,r5,1
8111c978:	11bf901e 	bne	r2,r6,8111c7bc <__reset+0xfb0fc7bc>
8111c97c:	29800007 	ldb	r6,0(r5)
8111c980:	303ff31e 	bne	r6,zero,8111c950 <__reset+0xfb0fc950>
8111c984:	20800044 	addi	r2,r4,1
8111c988:	d8800615 	stw	r2,24(sp)
8111c98c:	20c00047 	ldb	r3,1(r4)
8111c990:	00800a04 	movi	r2,40
8111c994:	18849d26 	beq	r3,r2,8111dc0c <_strtod_r+0x158c>
8111c998:	047ffe34 	movhi	r17,65528
8111c99c:	0025883a 	mov	r18,zero
8111c9a0:	902b883a 	mov	r21,r18
8111c9a4:	882d883a 	mov	r22,r17
8111c9a8:	a03f8926 	beq	r20,zero,8111c7d0 <__reset+0xfb0fc7d0>
8111c9ac:	ddc00617 	ldw	r23,24(sp)
8111c9b0:	003f8606 	br	8111c7cc <__reset+0xfb0fc7cc>
8111c9b4:	00800044 	movi	r2,1
8111c9b8:	d8800715 	stw	r2,28(sp)
8111c9bc:	003f9606 	br	8111c818 <__reset+0xfb0fc818>
8111c9c0:	21000044 	addi	r4,r4,1
8111c9c4:	d9000615 	stw	r4,24(sp)
8111c9c8:	20800003 	ldbu	r2,0(r4)
8111c9cc:	10c03fcc 	andi	r3,r2,255
8111c9d0:	28ff462e 	bgeu	r5,r3,8111c6ec <__reset+0xfb0fc6ec>
8111c9d4:	2027883a 	mov	r19,r4
8111c9d8:	d8000715 	stw	zero,28(sp)
8111c9dc:	003f9506 	br	8111c834 <__reset+0xfb0fc834>
8111c9e0:	9cc002a4 	muli	r19,r19,10
8111c9e4:	10803fcc 	andi	r2,r2,255
8111c9e8:	1080201c 	xori	r2,r2,128
8111c9ec:	10bfe004 	addi	r2,r2,-128
8111c9f0:	9885883a 	add	r2,r19,r2
8111c9f4:	14fff404 	addi	r19,r2,-48
8111c9f8:	003fa506 	br	8111c890 <__reset+0xfb0fc890>
8111c9fc:	002b883a 	mov	r21,zero
8111ca00:	002d883a 	mov	r22,zero
8111ca04:	003fe806 	br	8111c9a8 <__reset+0xfb0fc9a8>
8111ca08:	aaabc83a 	sub	r21,r21,r10
8111ca0c:	b000011e 	bne	r22,zero,8111ca14 <_strtod_r+0x394>
8111ca10:	482d883a 	mov	r22,r9
8111ca14:	00800404 	movi	r2,16
8111ca18:	482f883a 	mov	r23,r9
8111ca1c:	1240010e 	bge	r2,r9,8111ca24 <_strtod_r+0x3a4>
8111ca20:	102f883a 	mov	r23,r2
8111ca24:	e009883a 	mov	r4,fp
8111ca28:	da401315 	stw	r9,76(sp)
8111ca2c:	11253f00 	call	811253f0 <__floatunsidf>
8111ca30:	1025883a 	mov	r18,r2
8111ca34:	00800244 	movi	r2,9
8111ca38:	1823883a 	mov	r17,r3
8111ca3c:	da401317 	ldw	r9,76(sp)
8111ca40:	15c0160e 	bge	r2,r23,8111ca9c <_strtod_r+0x41c>
8111ca44:	b8bffdc4 	addi	r2,r23,-9
8111ca48:	100490fa 	slli	r2,r2,3
8111ca4c:	180b883a 	mov	r5,r3
8111ca50:	00e04534 	movhi	r3,33044
8111ca54:	18f16604 	addi	r3,r3,-14952
8111ca58:	1885883a 	add	r2,r3,r2
8111ca5c:	11800017 	ldw	r6,0(r2)
8111ca60:	11c00117 	ldw	r7,4(r2)
8111ca64:	9009883a 	mov	r4,r18
8111ca68:	110f3080 	call	8110f308 <__muldf3>
8111ca6c:	9809883a 	mov	r4,r19
8111ca70:	1025883a 	mov	r18,r2
8111ca74:	1823883a 	mov	r17,r3
8111ca78:	11253f00 	call	811253f0 <__floatunsidf>
8111ca7c:	9009883a 	mov	r4,r18
8111ca80:	880b883a 	mov	r5,r17
8111ca84:	100d883a 	mov	r6,r2
8111ca88:	180f883a 	mov	r7,r3
8111ca8c:	112358c0 	call	8112358c <__adddf3>
8111ca90:	da401317 	ldw	r9,76(sp)
8111ca94:	1025883a 	mov	r18,r2
8111ca98:	1823883a 	mov	r17,r3
8111ca9c:	008003c4 	movi	r2,15
8111caa0:	12407b16 	blt	r2,r9,8111cc90 <_strtod_r+0x610>
8111caa4:	a83fbe26 	beq	r21,zero,8111c9a0 <__reset+0xfb0fc9a0>
8111caa8:	0543670e 	bge	zero,r21,8111d848 <_strtod_r+0x11c8>
8111caac:	00c00584 	movi	r3,22
8111cab0:	1d42e816 	blt	r3,r21,8111d654 <_strtod_r+0xfd4>
8111cab4:	a82a90fa 	slli	r21,r21,3
8111cab8:	00a04534 	movhi	r2,33044
8111cabc:	10b16604 	addi	r2,r2,-14952
8111cac0:	1545883a 	add	r2,r2,r21
8111cac4:	11000017 	ldw	r4,0(r2)
8111cac8:	11400117 	ldw	r5,4(r2)
8111cacc:	900d883a 	mov	r6,r18
8111cad0:	880f883a 	mov	r7,r17
8111cad4:	110f3080 	call	8110f308 <__muldf3>
8111cad8:	102b883a 	mov	r21,r2
8111cadc:	182d883a 	mov	r22,r3
8111cae0:	003fb106 	br	8111c9a8 <__reset+0xfb0fc9a8>
8111cae4:	4801b526 	beq	r9,zero,8111d1bc <_strtod_r+0xb3c>
8111cae8:	ddc00617 	ldw	r23,24(sp)
8111caec:	00c00ac4 	movi	r3,43
8111caf0:	b8800044 	addi	r2,r23,1
8111caf4:	d8800615 	stw	r2,24(sp)
8111caf8:	b8800047 	ldb	r2,1(r23)
8111cafc:	10c1e926 	beq	r2,r3,8111d2a4 <_strtod_r+0xc24>
8111cb00:	00c00b44 	movi	r3,45
8111cb04:	10c1ec26 	beq	r2,r3,8111d2b8 <_strtod_r+0xc38>
8111cb08:	1023883a 	mov	r17,r2
8111cb0c:	0019883a 	mov	r12,zero
8111cb10:	88bff404 	addi	r2,r17,-48
8111cb14:	00c00244 	movi	r3,9
8111cb18:	1881b736 	bltu	r3,r2,8111d1f8 <_strtod_r+0xb78>
8111cb1c:	00800c04 	movi	r2,48
8111cb20:	8880071e 	bne	r17,r2,8111cb40 <_strtod_r+0x4c0>
8111cb24:	d8800617 	ldw	r2,24(sp)
8111cb28:	8807883a 	mov	r3,r17
8111cb2c:	10800044 	addi	r2,r2,1
8111cb30:	d8800615 	stw	r2,24(sp)
8111cb34:	14400007 	ldb	r17,0(r2)
8111cb38:	10800044 	addi	r2,r2,1
8111cb3c:	88fffc26 	beq	r17,r3,8111cb30 <__reset+0xfb0fcb30>
8111cb40:	88bff3c4 	addi	r2,r17,-49
8111cb44:	00c00204 	movi	r3,8
8111cb48:	18bf7036 	bltu	r3,r2,8111c90c <__reset+0xfb0fc90c>
8111cb4c:	db800617 	ldw	r14,24(sp)
8111cb50:	88bff404 	addi	r2,r17,-48
8111cb54:	03400244 	movi	r13,9
8111cb58:	71c00044 	addi	r7,r14,1
8111cb5c:	d9c00615 	stw	r7,24(sp)
8111cb60:	74400043 	ldbu	r17,1(r14)
8111cb64:	88fff404 	addi	r3,r17,-48
8111cb68:	8c403fcc 	andi	r17,r17,255
8111cb6c:	8c40201c 	xori	r17,r17,128
8111cb70:	18c03fcc 	andi	r3,r3,255
8111cb74:	8c7fe004 	addi	r17,r17,-128
8111cb78:	68c00e36 	bltu	r13,r3,8111cbb4 <_strtod_r+0x534>
8111cb7c:	71000084 	addi	r4,r14,2
8111cb80:	d9000615 	stw	r4,24(sp)
8111cb84:	108002a4 	muli	r2,r2,10
8111cb88:	21800003 	ldbu	r6,0(r4)
8111cb8c:	200f883a 	mov	r7,r4
8111cb90:	1463883a 	add	r17,r2,r17
8111cb94:	30fff404 	addi	r3,r6,-48
8111cb98:	88bff404 	addi	r2,r17,-48
8111cb9c:	34403fcc 	andi	r17,r6,255
8111cba0:	8c40201c 	xori	r17,r17,128
8111cba4:	18c03fcc 	andi	r3,r3,255
8111cba8:	8c7fe004 	addi	r17,r17,-128
8111cbac:	21000044 	addi	r4,r4,1
8111cbb0:	68fff32e 	bgeu	r13,r3,8111cb80 <__reset+0xfb0fcb80>
8111cbb4:	3b8fc83a 	sub	r7,r7,r14
8111cbb8:	00c00204 	movi	r3,8
8111cbbc:	19c29716 	blt	r3,r7,8111d61c <_strtod_r+0xf9c>
8111cbc0:	102b883a 	mov	r21,r2
8111cbc4:	009387c4 	movi	r2,19999
8111cbc8:	1540010e 	bge	r2,r21,8111cbd0 <_strtod_r+0x550>
8111cbcc:	102b883a 	mov	r21,r2
8111cbd0:	603f4f26 	beq	r12,zero,8111c910 <__reset+0xfb0fc910>
8111cbd4:	056bc83a 	sub	r21,zero,r21
8111cbd8:	003f4d06 	br	8111c910 <__reset+0xfb0fc910>
8111cbdc:	98800047 	ldb	r2,1(r19)
8111cbe0:	00c01604 	movi	r3,88
8111cbe4:	10c1de26 	beq	r2,r3,8111d360 <_strtod_r+0xce0>
8111cbe8:	00c01e04 	movi	r3,120
8111cbec:	10c1dc26 	beq	r2,r3,8111d360 <_strtod_r+0xce0>
8111cbf0:	98c00044 	addi	r3,r19,1
8111cbf4:	1827883a 	mov	r19,r3
8111cbf8:	d8c00615 	stw	r3,24(sp)
8111cbfc:	18c00044 	addi	r3,r3,1
8111cc00:	18bfffc3 	ldbu	r2,-1(r3)
8111cc04:	11003fcc 	andi	r4,r2,255
8111cc08:	2100201c 	xori	r4,r4,128
8111cc0c:	213fe004 	addi	r4,r4,-128
8111cc10:	217ff826 	beq	r4,r5,8111cbf4 <__reset+0xfb0fcbf4>
8111cc14:	203f7926 	beq	r4,zero,8111c9fc <__reset+0xfb0fc9fc>
8111cc18:	dcc00815 	stw	r19,32(sp)
8111cc1c:	04800044 	movi	r18,1
8111cc20:	003f0b06 	br	8111c850 <__reset+0xfb0fc850>
8111cc24:	8009883a 	mov	r4,r16
8111cc28:	111a8a00 	call	8111a8a0 <_localeconv_r>
8111cc2c:	11000017 	ldw	r4,0(r2)
8111cc30:	11118240 	call	81111824 <strlen>
8111cc34:	d8c00617 	ldw	r3,24(sp)
8111cc38:	1885883a 	add	r2,r3,r2
8111cc3c:	d8800615 	stw	r2,24(sp)
8111cc40:	14400007 	ldb	r17,0(r2)
8111cc44:	b001881e 	bne	r22,zero,8111d268 <_strtod_r+0xbe8>
8111cc48:	00c00c04 	movi	r3,48
8111cc4c:	88c3391e 	bne	r17,r3,8111d934 <_strtod_r+0x12b4>
8111cc50:	10c00044 	addi	r3,r2,1
8111cc54:	8809883a 	mov	r4,r17
8111cc58:	d8c00615 	stw	r3,24(sp)
8111cc5c:	1c400007 	ldb	r17,0(r3)
8111cc60:	188bc83a 	sub	r5,r3,r2
8111cc64:	18c00044 	addi	r3,r3,1
8111cc68:	893ffb26 	beq	r17,r4,8111cc58 <__reset+0xfb0fcc58>
8111cc6c:	88bff3c4 	addi	r2,r17,-49
8111cc70:	00c00204 	movi	r3,8
8111cc74:	1882e72e 	bgeu	r3,r2,8111d814 <_strtod_r+0x1194>
8111cc78:	00801944 	movi	r2,101
8111cc7c:	88814d26 	beq	r17,r2,8111d1b4 <_strtod_r+0xb34>
8111cc80:	0013883a 	mov	r9,zero
8111cc84:	0015883a 	mov	r10,zero
8111cc88:	02c00044 	movi	r11,1
8111cc8c:	003f1d06 	br	8111c904 <__reset+0xfb0fc904>
8111cc90:	4defc83a 	sub	r23,r9,r23
8111cc94:	bd6f883a 	add	r23,r23,r21
8111cc98:	05c21e0e 	bge	zero,r23,8111d514 <_strtod_r+0xe94>
8111cc9c:	b88003cc 	andi	r2,r23,15
8111cca0:	10000d26 	beq	r2,zero,8111ccd8 <_strtod_r+0x658>
8111cca4:	100490fa 	slli	r2,r2,3
8111cca8:	00e04534 	movhi	r3,33044
8111ccac:	18f16604 	addi	r3,r3,-14952
8111ccb0:	1885883a 	add	r2,r3,r2
8111ccb4:	11000017 	ldw	r4,0(r2)
8111ccb8:	11400117 	ldw	r5,4(r2)
8111ccbc:	900d883a 	mov	r6,r18
8111ccc0:	880f883a 	mov	r7,r17
8111ccc4:	da401315 	stw	r9,76(sp)
8111ccc8:	110f3080 	call	8110f308 <__muldf3>
8111cccc:	da401317 	ldw	r9,76(sp)
8111ccd0:	1025883a 	mov	r18,r2
8111ccd4:	1823883a 	mov	r17,r3
8111ccd8:	023ffc04 	movi	r8,-16
8111ccdc:	ba10703a 	and	r8,r23,r8
8111cce0:	40003c26 	beq	r8,zero,8111cdd4 <_strtod_r+0x754>
8111cce4:	00804d04 	movi	r2,308
8111cce8:	1201cd16 	blt	r2,r8,8111d420 <_strtod_r+0xda0>
8111ccec:	4011d13a 	srai	r8,r8,4
8111ccf0:	03000044 	movi	r12,1
8111ccf4:	62037c0e 	bge	r12,r8,8111dae8 <_strtod_r+0x1468>
8111ccf8:	01204534 	movhi	r4,33044
8111ccfc:	21315c04 	addi	r4,r4,-14992
8111cd00:	2015883a 	mov	r10,r4
8111cd04:	0027883a 	mov	r19,zero
8111cd08:	d9000915 	stw	r4,36(sp)
8111cd0c:	9005883a 	mov	r2,r18
8111cd10:	8807883a 	mov	r3,r17
8111cd14:	dc000c15 	stw	r16,48(sp)
8111cd18:	dc800e15 	stw	r18,56(sp)
8111cd1c:	9821883a 	mov	r16,r19
8111cd20:	0009883a 	mov	r4,zero
8111cd24:	8827883a 	mov	r19,r17
8111cd28:	602f883a 	mov	r23,r12
8111cd2c:	da400a15 	stw	r9,40(sp)
8111cd30:	5025883a 	mov	r18,r10
8111cd34:	4023883a 	mov	r17,r8
8111cd38:	8980004c 	andi	r6,r17,1
8111cd3c:	30000626 	beq	r6,zero,8111cd58 <_strtod_r+0x6d8>
8111cd40:	91800017 	ldw	r6,0(r18)
8111cd44:	91c00117 	ldw	r7,4(r18)
8111cd48:	1009883a 	mov	r4,r2
8111cd4c:	180b883a 	mov	r5,r3
8111cd50:	110f3080 	call	8110f308 <__muldf3>
8111cd54:	01000044 	movi	r4,1
8111cd58:	8823d07a 	srai	r17,r17,1
8111cd5c:	84000044 	addi	r16,r16,1
8111cd60:	94800204 	addi	r18,r18,8
8111cd64:	8dfff41e 	bne	r17,r23,8111cd38 <__reset+0xfb0fcd38>
8111cd68:	21003fcc 	andi	r4,r4,255
8111cd6c:	9823883a 	mov	r17,r19
8111cd70:	da400a17 	ldw	r9,40(sp)
8111cd74:	8027883a 	mov	r19,r16
8111cd78:	dc800e17 	ldw	r18,56(sp)
8111cd7c:	dc000c17 	ldw	r16,48(sp)
8111cd80:	2003b11e 	bne	r4,zero,8111dc48 <_strtod_r+0x15c8>
8111cd84:	981690fa 	slli	r11,r19,3
8111cd88:	d8800917 	ldw	r2,36(sp)
8111cd8c:	01ff2c34 	movhi	r7,64688
8111cd90:	900d883a 	mov	r6,r18
8111cd94:	12ef883a 	add	r23,r2,r11
8111cd98:	b9000017 	ldw	r4,0(r23)
8111cd9c:	b9400117 	ldw	r5,4(r23)
8111cda0:	89cf883a 	add	r7,r17,r7
8111cda4:	da401315 	stw	r9,76(sp)
8111cda8:	110f3080 	call	8110f308 <__muldf3>
8111cdac:	1025883a 	mov	r18,r2
8111cdb0:	011f2834 	movhi	r4,31904
8111cdb4:	189ffc2c 	andhi	r2,r3,32752
8111cdb8:	da401317 	ldw	r9,76(sp)
8111cdbc:	20819836 	bltu	r4,r2,8111d420 <_strtod_r+0xda0>
8111cdc0:	011f2434 	movhi	r4,31888
8111cdc4:	2083382e 	bgeu	r4,r2,8111daa8 <_strtod_r+0x1428>
8111cdc8:	045ffc34 	movhi	r17,32752
8111cdcc:	8c7fffc4 	addi	r17,r17,-1
8111cdd0:	04bfffc4 	movi	r18,-1
8111cdd4:	d8000915 	stw	zero,36(sp)
8111cdd8:	d9400817 	ldw	r5,32(sp)
8111cddc:	df000015 	stw	fp,0(sp)
8111cde0:	480f883a 	mov	r7,r9
8111cde4:	b00d883a 	mov	r6,r22
8111cde8:	8009883a 	mov	r4,r16
8111cdec:	111afbc0 	call	8111afbc <__s2b>
8111cdf0:	d8800815 	stw	r2,32(sp)
8111cdf4:	10018a26 	beq	r2,zero,8111d420 <_strtod_r+0xda0>
8111cdf8:	a807d7fa 	srai	r3,r21,31
8111cdfc:	0545c83a 	sub	r2,zero,r21
8111ce00:	dd400a15 	stw	r21,40(sp)
8111ce04:	1886703a 	and	r3,r3,r2
8111ce08:	d8c00c15 	stw	r3,48(sp)
8111ce0c:	a8013516 	blt	r21,zero,8111d2e4 <_strtod_r+0xc64>
8111ce10:	d9400817 	ldw	r5,32(sp)
8111ce14:	0011883a 	mov	r8,zero
8111ce18:	0027883a 	mov	r19,zero
8111ce1c:	29400304 	addi	r5,r5,12
8111ce20:	d9400f15 	stw	r5,60(sp)
8111ce24:	402b883a 	mov	r21,r8
8111ce28:	dd001215 	stw	r20,72(sp)
8111ce2c:	d8800817 	ldw	r2,32(sp)
8111ce30:	8009883a 	mov	r4,r16
8111ce34:	11400117 	ldw	r5,4(r2)
8111ce38:	111adbc0 	call	8111adbc <_Balloc>
8111ce3c:	1029883a 	mov	r20,r2
8111ce40:	10012d26 	beq	r2,zero,8111d2f8 <_strtod_r+0xc78>
8111ce44:	d8c00817 	ldw	r3,32(sp)
8111ce48:	d9400f17 	ldw	r5,60(sp)
8111ce4c:	11000304 	addi	r4,r2,12
8111ce50:	19800417 	ldw	r6,16(r3)
8111ce54:	31800084 	addi	r6,r6,2
8111ce58:	318d883a 	add	r6,r6,r6
8111ce5c:	318d883a 	add	r6,r6,r6
8111ce60:	1110ea80 	call	81110ea8 <memcpy>
8111ce64:	d9000204 	addi	r4,sp,8
8111ce68:	d9000015 	stw	r4,0(sp)
8111ce6c:	d9c00404 	addi	r7,sp,16
8111ce70:	900b883a 	mov	r5,r18
8111ce74:	880d883a 	mov	r6,r17
8111ce78:	8009883a 	mov	r4,r16
8111ce7c:	111ba980 	call	8111ba98 <__d2b>
8111ce80:	d8800515 	stw	r2,20(sp)
8111ce84:	dc801115 	stw	r18,68(sp)
8111ce88:	dc401015 	stw	r17,64(sp)
8111ce8c:	10027c26 	beq	r2,zero,8111d880 <_strtod_r+0x1200>
8111ce90:	01400044 	movi	r5,1
8111ce94:	8009883a 	mov	r4,r16
8111ce98:	111b1e00 	call	8111b1e0 <__i2b>
8111ce9c:	1027883a 	mov	r19,r2
8111cea0:	10011526 	beq	r2,zero,8111d2f8 <_strtod_r+0xc78>
8111cea4:	d8800417 	ldw	r2,16(sp)
8111cea8:	1000c816 	blt	r2,zero,8111d1cc <_strtod_r+0xb4c>
8111ceac:	d9400c17 	ldw	r5,48(sp)
8111ceb0:	d9000a17 	ldw	r4,40(sp)
8111ceb4:	28ad883a 	add	r22,r5,r2
8111ceb8:	d9400917 	ldw	r5,36(sp)
8111cebc:	df000217 	ldw	fp,8(sp)
8111cec0:	05ff0084 	movi	r23,-1022
8111cec4:	1147c83a 	sub	r3,r2,r5
8111cec8:	1f07883a 	add	r3,r3,fp
8111cecc:	00800d84 	movi	r2,54
8111ced0:	18ffffc4 	addi	r3,r3,-1
8111ced4:	1739c83a 	sub	fp,r2,fp
8111ced8:	1dc0a50e 	bge	r3,r23,8111d170 <_strtod_r+0xaf0>
8111cedc:	b8efc83a 	sub	r23,r23,r3
8111cee0:	008007c4 	movi	r2,31
8111cee4:	e5f9c83a 	sub	fp,fp,r23
8111cee8:	15c0bc16 	blt	r2,r23,8111d1dc <_strtod_r+0xb5c>
8111ceec:	00800044 	movi	r2,1
8111cef0:	15c4983a 	sll	r2,r2,r23
8111cef4:	d8000b15 	stw	zero,44(sp)
8111cef8:	d8800d15 	stw	r2,52(sp)
8111cefc:	2707883a 	add	r3,r4,fp
8111cf00:	d9000917 	ldw	r4,36(sp)
8111cf04:	b739883a 	add	fp,r22,fp
8111cf08:	20ef883a 	add	r23,r4,r3
8111cf0c:	b009883a 	mov	r4,r22
8111cf10:	e580010e 	bge	fp,r22,8111cf18 <_strtod_r+0x898>
8111cf14:	e009883a 	mov	r4,fp
8111cf18:	b805883a 	mov	r2,r23
8111cf1c:	25c0010e 	bge	r4,r23,8111cf24 <_strtod_r+0x8a4>
8111cf20:	2005883a 	mov	r2,r4
8111cf24:	0080030e 	bge	zero,r2,8111cf34 <_strtod_r+0x8b4>
8111cf28:	e0b9c83a 	sub	fp,fp,r2
8111cf2c:	b8afc83a 	sub	r23,r23,r2
8111cf30:	b0adc83a 	sub	r22,r22,r2
8111cf34:	d9400c17 	ldw	r5,48(sp)
8111cf38:	28001126 	beq	r5,zero,8111cf80 <_strtod_r+0x900>
8111cf3c:	280d883a 	mov	r6,r5
8111cf40:	8009883a 	mov	r4,r16
8111cf44:	980b883a 	mov	r5,r19
8111cf48:	111b4240 	call	8111b424 <__pow5mult>
8111cf4c:	1027883a 	mov	r19,r2
8111cf50:	1000e926 	beq	r2,zero,8111d2f8 <_strtod_r+0xc78>
8111cf54:	d9800517 	ldw	r6,20(sp)
8111cf58:	100b883a 	mov	r5,r2
8111cf5c:	8009883a 	mov	r4,r16
8111cf60:	111b2240 	call	8111b224 <__multiply>
8111cf64:	1000e426 	beq	r2,zero,8111d2f8 <_strtod_r+0xc78>
8111cf68:	d9400517 	ldw	r5,20(sp)
8111cf6c:	8009883a 	mov	r4,r16
8111cf70:	d8801315 	stw	r2,76(sp)
8111cf74:	111ae6c0 	call	8111ae6c <_Bfree>
8111cf78:	d8801317 	ldw	r2,76(sp)
8111cf7c:	d8800515 	stw	r2,20(sp)
8111cf80:	0700060e 	bge	zero,fp,8111cf9c <_strtod_r+0x91c>
8111cf84:	d9400517 	ldw	r5,20(sp)
8111cf88:	e00d883a 	mov	r6,fp
8111cf8c:	8009883a 	mov	r4,r16
8111cf90:	111b56c0 	call	8111b56c <__lshift>
8111cf94:	d8800515 	stw	r2,20(sp)
8111cf98:	10023926 	beq	r2,zero,8111d880 <_strtod_r+0x1200>
8111cf9c:	d8800a17 	ldw	r2,40(sp)
8111cfa0:	10000626 	beq	r2,zero,8111cfbc <_strtod_r+0x93c>
8111cfa4:	d9800a17 	ldw	r6,40(sp)
8111cfa8:	a00b883a 	mov	r5,r20
8111cfac:	8009883a 	mov	r4,r16
8111cfb0:	111b4240 	call	8111b424 <__pow5mult>
8111cfb4:	1029883a 	mov	r20,r2
8111cfb8:	1000cf26 	beq	r2,zero,8111d2f8 <_strtod_r+0xc78>
8111cfbc:	05c0060e 	bge	zero,r23,8111cfd8 <_strtod_r+0x958>
8111cfc0:	a00b883a 	mov	r5,r20
8111cfc4:	b80d883a 	mov	r6,r23
8111cfc8:	8009883a 	mov	r4,r16
8111cfcc:	111b56c0 	call	8111b56c <__lshift>
8111cfd0:	1029883a 	mov	r20,r2
8111cfd4:	1000c826 	beq	r2,zero,8111d2f8 <_strtod_r+0xc78>
8111cfd8:	0580060e 	bge	zero,r22,8111cff4 <_strtod_r+0x974>
8111cfdc:	980b883a 	mov	r5,r19
8111cfe0:	b00d883a 	mov	r6,r22
8111cfe4:	8009883a 	mov	r4,r16
8111cfe8:	111b56c0 	call	8111b56c <__lshift>
8111cfec:	1027883a 	mov	r19,r2
8111cff0:	1000c126 	beq	r2,zero,8111d2f8 <_strtod_r+0xc78>
8111cff4:	d9400517 	ldw	r5,20(sp)
8111cff8:	a00d883a 	mov	r6,r20
8111cffc:	8009883a 	mov	r4,r16
8111d000:	111b71c0 	call	8111b71c <__mdiff>
8111d004:	102b883a 	mov	r21,r2
8111d008:	1000bb26 	beq	r2,zero,8111d2f8 <_strtod_r+0xc78>
8111d00c:	10c00317 	ldw	r3,12(r2)
8111d010:	980b883a 	mov	r5,r19
8111d014:	10000315 	stw	zero,12(r2)
8111d018:	1009883a 	mov	r4,r2
8111d01c:	d8c00e15 	stw	r3,56(sp)
8111d020:	111b6bc0 	call	8111b6bc <__mcmp>
8111d024:	10027616 	blt	r2,zero,8111da00 <_strtod_r+0x1380>
8111d028:	10024426 	beq	r2,zero,8111d93c <_strtod_r+0x12bc>
8111d02c:	980b883a 	mov	r5,r19
8111d030:	a809883a 	mov	r4,r21
8111d034:	111bbec0 	call	8111bbec <__ratio>
8111d038:	000d883a 	mov	r6,zero
8111d03c:	01d00034 	movhi	r7,16384
8111d040:	1009883a 	mov	r4,r2
8111d044:	180b883a 	mov	r5,r3
8111d048:	102f883a 	mov	r23,r2
8111d04c:	182d883a 	mov	r22,r3
8111d050:	11248940 	call	81124894 <__ledf2>
8111d054:	00804a16 	blt	zero,r2,8111d180 <_strtod_r+0xb00>
8111d058:	d9400e17 	ldw	r5,56(sp)
8111d05c:	28006b26 	beq	r5,zero,8111d20c <_strtod_r+0xb8c>
8111d060:	058ffc34 	movhi	r22,16368
8111d064:	d8000b15 	stw	zero,44(sp)
8111d068:	d8000d15 	stw	zero,52(sp)
8111d06c:	b02f883a 	mov	r23,r22
8111d070:	8f1ffc2c 	andhi	fp,r17,32752
8111d074:	009ff834 	movhi	r2,32736
8111d078:	e080cd26 	beq	fp,r2,8111d3b0 <_strtod_r+0xd30>
8111d07c:	d9400917 	ldw	r5,36(sp)
8111d080:	28001a26 	beq	r5,zero,8111d0ec <_strtod_r+0xa6c>
8111d084:	0081a834 	movhi	r2,1696
8111d088:	17001836 	bltu	r2,fp,8111d0ec <_strtod_r+0xa6c>
8111d08c:	d9000d17 	ldw	r4,52(sp)
8111d090:	01d07834 	movhi	r7,16864
8111d094:	39ffffc4 	addi	r7,r7,-1
8111d098:	01bff034 	movhi	r6,65472
8111d09c:	b80b883a 	mov	r5,r23
8111d0a0:	11248940 	call	81124894 <__ledf2>
8111d0a4:	00800e16 	blt	zero,r2,8111d0e0 <_strtod_r+0xa60>
8111d0a8:	d9000d17 	ldw	r4,52(sp)
8111d0ac:	b80b883a 	mov	r5,r23
8111d0b0:	11226a00 	call	811226a0 <__fixunsdfsi>
8111d0b4:	10018126 	beq	r2,zero,8111d6bc <_strtod_r+0x103c>
8111d0b8:	1009883a 	mov	r4,r2
8111d0bc:	11253f00 	call	811253f0 <__floatunsidf>
8111d0c0:	d8800d15 	stw	r2,52(sp)
8111d0c4:	182f883a 	mov	r23,r3
8111d0c8:	d8800e17 	ldw	r2,56(sp)
8111d0cc:	1001791e 	bne	r2,zero,8111d6b4 <_strtod_r+0x1034>
8111d0d0:	ba20003c 	xorhi	r8,r23,32768
8111d0d4:	d8c00d17 	ldw	r3,52(sp)
8111d0d8:	402d883a 	mov	r22,r8
8111d0dc:	d8c00b15 	stw	r3,44(sp)
8111d0e0:	0081ac34 	movhi	r2,1712
8111d0e4:	b091883a 	add	r8,r22,r2
8111d0e8:	472dc83a 	sub	r22,r8,fp
8111d0ec:	9009883a 	mov	r4,r18
8111d0f0:	880b883a 	mov	r5,r17
8111d0f4:	111b9200 	call	8111b920 <__ulp>
8111d0f8:	d9000b17 	ldw	r4,44(sp)
8111d0fc:	b00b883a 	mov	r5,r22
8111d100:	100d883a 	mov	r6,r2
8111d104:	180f883a 	mov	r7,r3
8111d108:	110f3080 	call	8110f308 <__muldf3>
8111d10c:	900d883a 	mov	r6,r18
8111d110:	880f883a 	mov	r7,r17
8111d114:	1009883a 	mov	r4,r2
8111d118:	180b883a 	mov	r5,r3
8111d11c:	112358c0 	call	8112358c <__adddf3>
8111d120:	1025883a 	mov	r18,r2
8111d124:	1823883a 	mov	r17,r3
8111d128:	182d883a 	mov	r22,r3
8111d12c:	d9000917 	ldw	r4,36(sp)
8111d130:	2000021e 	bne	r4,zero,8111d13c <_strtod_r+0xabc>
8111d134:	b09ffc2c 	andhi	r2,r22,32752
8111d138:	e080be26 	beq	fp,r2,8111d434 <_strtod_r+0xdb4>
8111d13c:	d9400517 	ldw	r5,20(sp)
8111d140:	8009883a 	mov	r4,r16
8111d144:	111ae6c0 	call	8111ae6c <_Bfree>
8111d148:	a00b883a 	mov	r5,r20
8111d14c:	8009883a 	mov	r4,r16
8111d150:	111ae6c0 	call	8111ae6c <_Bfree>
8111d154:	980b883a 	mov	r5,r19
8111d158:	8009883a 	mov	r4,r16
8111d15c:	111ae6c0 	call	8111ae6c <_Bfree>
8111d160:	a80b883a 	mov	r5,r21
8111d164:	8009883a 	mov	r4,r16
8111d168:	111ae6c0 	call	8111ae6c <_Bfree>
8111d16c:	003f2f06 	br	8111ce2c <__reset+0xfb0fce2c>
8111d170:	00c00044 	movi	r3,1
8111d174:	d8000b15 	stw	zero,44(sp)
8111d178:	d8c00d15 	stw	r3,52(sp)
8111d17c:	003f5f06 	br	8111cefc <__reset+0xfb0fcefc>
8111d180:	b809883a 	mov	r4,r23
8111d184:	000d883a 	mov	r6,zero
8111d188:	01cff834 	movhi	r7,16352
8111d18c:	b00b883a 	mov	r5,r22
8111d190:	110f3080 	call	8110f308 <__muldf3>
8111d194:	d9000e17 	ldw	r4,56(sp)
8111d198:	d8800d15 	stw	r2,52(sp)
8111d19c:	182f883a 	mov	r23,r3
8111d1a0:	2000181e 	bne	r4,zero,8111d204 <_strtod_r+0xb84>
8111d1a4:	1a20003c 	xorhi	r8,r3,32768
8111d1a8:	d8800b15 	stw	r2,44(sp)
8111d1ac:	402d883a 	mov	r22,r8
8111d1b0:	003faf06 	br	8111d070 <__reset+0xfb0fd070>
8111d1b4:	0015883a 	mov	r10,zero
8111d1b8:	02c00044 	movi	r11,1
8111d1bc:	2800011e 	bne	r5,zero,8111d1c4 <_strtod_r+0xb44>
8111d1c0:	903d7e26 	beq	r18,zero,8111c7bc <__reset+0xfb0fc7bc>
8111d1c4:	0013883a 	mov	r9,zero
8111d1c8:	003e4706 	br	8111cae8 <__reset+0xfb0fcae8>
8111d1cc:	d8c00a17 	ldw	r3,40(sp)
8111d1d0:	dd800c17 	ldw	r22,48(sp)
8111d1d4:	1889c83a 	sub	r4,r3,r2
8111d1d8:	003f3706 	br	8111ceb8 <__reset+0xfb0fceb8>
8111d1dc:	00bef884 	movi	r2,-1054
8111d1e0:	05c00044 	movi	r23,1
8111d1e4:	10c5c83a 	sub	r2,r2,r3
8111d1e8:	b884983a 	sll	r2,r23,r2
8111d1ec:	ddc00d15 	stw	r23,52(sp)
8111d1f0:	d8800b15 	stw	r2,44(sp)
8111d1f4:	003f4106 	br	8111cefc <__reset+0xfb0fcefc>
8111d1f8:	ddc00615 	stw	r23,24(sp)
8111d1fc:	002b883a 	mov	r21,zero
8111d200:	003dc306 	br	8111c910 <__reset+0xfb0fc910>
8111d204:	1811883a 	mov	r8,r3
8111d208:	003fe706 	br	8111d1a8 <__reset+0xfb0fd1a8>
8111d20c:	90002e1e 	bne	r18,zero,8111d2c8 <_strtod_r+0xc48>
8111d210:	00c00434 	movhi	r3,16
8111d214:	18ffffc4 	addi	r3,r3,-1
8111d218:	88c4703a 	and	r2,r17,r3
8111d21c:	10002c1e 	bne	r2,zero,8111d2d0 <_strtod_r+0xc50>
8111d220:	000d883a 	mov	r6,zero
8111d224:	01cffc34 	movhi	r7,16368
8111d228:	b809883a 	mov	r4,r23
8111d22c:	b00b883a 	mov	r5,r22
8111d230:	11248940 	call	81124894 <__ledf2>
8111d234:	10021716 	blt	r2,zero,8111da94 <_strtod_r+0x1414>
8111d238:	b809883a 	mov	r4,r23
8111d23c:	b00b883a 	mov	r5,r22
8111d240:	000d883a 	mov	r6,zero
8111d244:	01cff834 	movhi	r7,16352
8111d248:	110f3080 	call	8110f308 <__muldf3>
8111d24c:	d8800d15 	stw	r2,52(sp)
8111d250:	182f883a 	mov	r23,r3
8111d254:	102d883a 	mov	r22,r2
8111d258:	1a20003c 	xorhi	r8,r3,32768
8111d25c:	dd800b15 	stw	r22,44(sp)
8111d260:	402d883a 	mov	r22,r8
8111d264:	003f8206 	br	8111d070 <__reset+0xfb0fd070>
8111d268:	b013883a 	mov	r9,r22
8111d26c:	000b883a 	mov	r5,zero
8111d270:	0015883a 	mov	r10,zero
8111d274:	893ff404 	addi	r4,r17,-48
8111d278:	00800244 	movi	r2,9
8111d27c:	11001036 	bltu	r2,r4,8111d2c0 <_strtod_r+0xc40>
8111d280:	28c00044 	addi	r3,r5,1
8111d284:	2023883a 	mov	r17,r4
8111d288:	20014d1e 	bne	r4,zero,8111d7c0 <_strtod_r+0x1140>
8111d28c:	d9800617 	ldw	r6,24(sp)
8111d290:	180b883a 	mov	r5,r3
8111d294:	30800044 	addi	r2,r6,1
8111d298:	d8800615 	stw	r2,24(sp)
8111d29c:	34400047 	ldb	r17,1(r6)
8111d2a0:	003ff406 	br	8111d274 <__reset+0xfb0fd274>
8111d2a4:	0019883a 	mov	r12,zero
8111d2a8:	b8800084 	addi	r2,r23,2
8111d2ac:	d8800615 	stw	r2,24(sp)
8111d2b0:	bc400087 	ldb	r17,2(r23)
8111d2b4:	003e1606 	br	8111cb10 <__reset+0xfb0fcb10>
8111d2b8:	03000044 	movi	r12,1
8111d2bc:	003ffa06 	br	8111d2a8 <__reset+0xfb0fd2a8>
8111d2c0:	02c00044 	movi	r11,1
8111d2c4:	003d8d06 	br	8111c8fc <__reset+0xfb0fc8fc>
8111d2c8:	00800044 	movi	r2,1
8111d2cc:	9080fe26 	beq	r18,r2,8111d6c8 <_strtod_r+0x1048>
8111d2d0:	d8000b15 	stw	zero,44(sp)
8111d2d4:	05affc34 	movhi	r22,49136
8111d2d8:	d8000d15 	stw	zero,52(sp)
8111d2dc:	05cffc34 	movhi	r23,16368
8111d2e0:	003f6306 	br	8111d070 <__reset+0xfb0fd070>
8111d2e4:	d8000a15 	stw	zero,40(sp)
8111d2e8:	003ec906 	br	8111ce10 <__reset+0xfb0fce10>
8111d2ec:	d9001117 	ldw	r4,68(sp)
8111d2f0:	00bfffc4 	movi	r2,-1
8111d2f4:	2080461e 	bne	r4,r2,8111d410 <_strtod_r+0xd90>
8111d2f8:	dd000a15 	stw	r20,40(sp)
8111d2fc:	dd001217 	ldw	r20,72(sp)
8111d300:	a811883a 	mov	r8,r21
8111d304:	d8800517 	ldw	r2,20(sp)
8111d308:	00c00884 	movi	r3,34
8111d30c:	80c00015 	stw	r3,0(r16)
8111d310:	002b883a 	mov	r21,zero
8111d314:	059ffc34 	movhi	r22,32752
8111d318:	100b883a 	mov	r5,r2
8111d31c:	8009883a 	mov	r4,r16
8111d320:	da001315 	stw	r8,76(sp)
8111d324:	111ae6c0 	call	8111ae6c <_Bfree>
8111d328:	d9400a17 	ldw	r5,40(sp)
8111d32c:	8009883a 	mov	r4,r16
8111d330:	111ae6c0 	call	8111ae6c <_Bfree>
8111d334:	980b883a 	mov	r5,r19
8111d338:	8009883a 	mov	r4,r16
8111d33c:	111ae6c0 	call	8111ae6c <_Bfree>
8111d340:	d9400817 	ldw	r5,32(sp)
8111d344:	8009883a 	mov	r4,r16
8111d348:	111ae6c0 	call	8111ae6c <_Bfree>
8111d34c:	da001317 	ldw	r8,76(sp)
8111d350:	8009883a 	mov	r4,r16
8111d354:	400b883a 	mov	r5,r8
8111d358:	111ae6c0 	call	8111ae6c <_Bfree>
8111d35c:	003d9206 	br	8111c9a8 <__reset+0xfb0fc9a8>
8111d360:	d8c00717 	ldw	r3,28(sp)
8111d364:	d8800504 	addi	r2,sp,20
8111d368:	01a04534 	movhi	r6,33044
8111d36c:	31b1a104 	addi	r6,r6,-14716
8111d370:	d8c00115 	stw	r3,4(sp)
8111d374:	d8800015 	stw	r2,0(sp)
8111d378:	d9c00404 	addi	r7,sp,16
8111d37c:	d9400604 	addi	r5,sp,24
8111d380:	8009883a 	mov	r4,r16
8111d384:	11217d40 	call	811217d4 <__gethex>
8111d388:	154001cc 	andi	r21,r2,7
8111d38c:	a83d9b26 	beq	r21,zero,8111c9fc <__reset+0xfb0fc9fc>
8111d390:	00c00184 	movi	r3,6
8111d394:	a8c0d61e 	bne	r21,r3,8111d6f0 <_strtod_r+0x1070>
8111d398:	9cc00044 	addi	r19,r19,1
8111d39c:	dcc00615 	stw	r19,24(sp)
8111d3a0:	002b883a 	mov	r21,zero
8111d3a4:	002d883a 	mov	r22,zero
8111d3a8:	d8000715 	stw	zero,28(sp)
8111d3ac:	003d7e06 	br	8111c9a8 <__reset+0xfb0fc9a8>
8111d3b0:	00bf2c34 	movhi	r2,64688
8111d3b4:	88a3883a 	add	r17,r17,r2
8111d3b8:	9009883a 	mov	r4,r18
8111d3bc:	880b883a 	mov	r5,r17
8111d3c0:	111b9200 	call	8111b920 <__ulp>
8111d3c4:	d9000b17 	ldw	r4,44(sp)
8111d3c8:	100d883a 	mov	r6,r2
8111d3cc:	180f883a 	mov	r7,r3
8111d3d0:	b00b883a 	mov	r5,r22
8111d3d4:	110f3080 	call	8110f308 <__muldf3>
8111d3d8:	900d883a 	mov	r6,r18
8111d3dc:	180b883a 	mov	r5,r3
8111d3e0:	880f883a 	mov	r7,r17
8111d3e4:	1009883a 	mov	r4,r2
8111d3e8:	112358c0 	call	8112358c <__adddf3>
8111d3ec:	015f2834 	movhi	r5,31904
8111d3f0:	1025883a 	mov	r18,r2
8111d3f4:	297fffc4 	addi	r5,r5,-1
8111d3f8:	189ffc2c 	andhi	r2,r3,32752
8111d3fc:	2880892e 	bgeu	r5,r2,8111d624 <_strtod_r+0xfa4>
8111d400:	d8801017 	ldw	r2,64(sp)
8111d404:	00dffc34 	movhi	r3,32752
8111d408:	18ffffc4 	addi	r3,r3,-1
8111d40c:	10ffb726 	beq	r2,r3,8111d2ec <__reset+0xfb0fd2ec>
8111d410:	045ffc34 	movhi	r17,32752
8111d414:	8c7fffc4 	addi	r17,r17,-1
8111d418:	04bfffc4 	movi	r18,-1
8111d41c:	003f4706 	br	8111d13c <__reset+0xfb0fd13c>
8111d420:	00800884 	movi	r2,34
8111d424:	80800015 	stw	r2,0(r16)
8111d428:	002b883a 	mov	r21,zero
8111d42c:	059ffc34 	movhi	r22,32752
8111d430:	003d5d06 	br	8111c9a8 <__reset+0xfb0fc9a8>
8111d434:	d9000d17 	ldw	r4,52(sp)
8111d438:	b80b883a 	mov	r5,r23
8111d43c:	112528c0 	call	8112528c <__fixdfsi>
8111d440:	1009883a 	mov	r4,r2
8111d444:	112530c0 	call	8112530c <__floatsidf>
8111d448:	d9000d17 	ldw	r4,52(sp)
8111d44c:	b80b883a 	mov	r5,r23
8111d450:	100d883a 	mov	r6,r2
8111d454:	180f883a 	mov	r7,r3
8111d458:	11249880 	call	81124988 <__subdf3>
8111d45c:	d9400e17 	ldw	r5,56(sp)
8111d460:	1039883a 	mov	fp,r2
8111d464:	182f883a 	mov	r23,r3
8111d468:	2800141e 	bne	r5,zero,8111d4bc <_strtod_r+0xe3c>
8111d46c:	9000131e 	bne	r18,zero,8111d4bc <_strtod_r+0xe3c>
8111d470:	00800434 	movhi	r2,16
8111d474:	10bfffc4 	addi	r2,r2,-1
8111d478:	b0ac703a 	and	r22,r22,r2
8111d47c:	b0000f1e 	bne	r22,zero,8111d4bc <_strtod_r+0xe3c>
8111d480:	01a52834 	movhi	r6,38048
8111d484:	01cff434 	movhi	r7,16336
8111d488:	318d6544 	addi	r6,r6,13717
8111d48c:	39ffffc4 	addi	r7,r7,-1
8111d490:	e009883a 	mov	r4,fp
8111d494:	180b883a 	mov	r5,r3
8111d498:	11248940 	call	81124894 <__ledf2>
8111d49c:	103f270e 	bge	r2,zero,8111d13c <__reset+0xfb0fd13c>
8111d4a0:	dd000a15 	stw	r20,40(sp)
8111d4a4:	a811883a 	mov	r8,r21
8111d4a8:	dd001217 	ldw	r20,72(sp)
8111d4ac:	d8800517 	ldw	r2,20(sp)
8111d4b0:	002b883a 	mov	r21,zero
8111d4b4:	882d883a 	mov	r22,r17
8111d4b8:	003f9706 	br	8111d318 <__reset+0xfb0fd318>
8111d4bc:	01a52834 	movhi	r6,38048
8111d4c0:	01cff834 	movhi	r7,16352
8111d4c4:	318d6544 	addi	r6,r6,13717
8111d4c8:	39ffffc4 	addi	r7,r7,-1
8111d4cc:	e009883a 	mov	r4,fp
8111d4d0:	b80b883a 	mov	r5,r23
8111d4d4:	11248940 	call	81124894 <__ledf2>
8111d4d8:	10000716 	blt	r2,zero,8111d4f8 <_strtod_r+0xe78>
8111d4dc:	018d6c34 	movhi	r6,13744
8111d4e0:	31b94d44 	addi	r6,r6,-6859
8111d4e4:	01cff834 	movhi	r7,16352
8111d4e8:	e009883a 	mov	r4,fp
8111d4ec:	b80b883a 	mov	r5,r23
8111d4f0:	11247b80 	call	811247b8 <__gedf2>
8111d4f4:	00bf110e 	bge	zero,r2,8111d13c <__reset+0xfb0fd13c>
8111d4f8:	dd000a15 	stw	r20,40(sp)
8111d4fc:	a811883a 	mov	r8,r21
8111d500:	dd001217 	ldw	r20,72(sp)
8111d504:	d8800517 	ldw	r2,20(sp)
8111d508:	902b883a 	mov	r21,r18
8111d50c:	882d883a 	mov	r22,r17
8111d510:	003f8106 	br	8111d318 <__reset+0xfb0fd318>
8111d514:	b83e2f26 	beq	r23,zero,8111cdd4 <__reset+0xfb0fcdd4>
8111d518:	05efc83a 	sub	r23,zero,r23
8111d51c:	b88003cc 	andi	r2,r23,15
8111d520:	10000d26 	beq	r2,zero,8111d558 <_strtod_r+0xed8>
8111d524:	100490fa 	slli	r2,r2,3
8111d528:	00e04534 	movhi	r3,33044
8111d52c:	18f16604 	addi	r3,r3,-14952
8111d530:	1885883a 	add	r2,r3,r2
8111d534:	11800017 	ldw	r6,0(r2)
8111d538:	11c00117 	ldw	r7,4(r2)
8111d53c:	9009883a 	mov	r4,r18
8111d540:	880b883a 	mov	r5,r17
8111d544:	da401315 	stw	r9,76(sp)
8111d548:	1123e400 	call	81123e40 <__divdf3>
8111d54c:	da401317 	ldw	r9,76(sp)
8111d550:	1025883a 	mov	r18,r2
8111d554:	1823883a 	mov	r17,r3
8111d558:	b82fd13a 	srai	r23,r23,4
8111d55c:	b83e1d26 	beq	r23,zero,8111cdd4 <__reset+0xfb0fcdd4>
8111d560:	008007c4 	movi	r2,31
8111d564:	15c02816 	blt	r2,r23,8111d608 <_strtod_r+0xf88>
8111d568:	b880040c 	andi	r2,r23,16
8111d56c:	10019726 	beq	r2,zero,8111dbcc <_strtod_r+0x154c>
8111d570:	05c1880e 	bge	zero,r23,8111db94 <_strtod_r+0x1514>
8111d574:	00c01a84 	movi	r3,106
8111d578:	d8c00915 	stw	r3,36(sp)
8111d57c:	04e04534 	movhi	r19,33044
8111d580:	9cf1a604 	addi	r19,r19,-14696
8111d584:	8807883a 	mov	r3,r17
8111d588:	9005883a 	mov	r2,r18
8111d58c:	8023883a 	mov	r17,r16
8111d590:	0009883a 	mov	r4,zero
8111d594:	9821883a 	mov	r16,r19
8111d598:	da400a15 	stw	r9,40(sp)
8111d59c:	1827883a 	mov	r19,r3
8111d5a0:	b980004c 	andi	r6,r23,1
8111d5a4:	30000626 	beq	r6,zero,8111d5c0 <_strtod_r+0xf40>
8111d5a8:	81800017 	ldw	r6,0(r16)
8111d5ac:	81c00117 	ldw	r7,4(r16)
8111d5b0:	1009883a 	mov	r4,r2
8111d5b4:	180b883a 	mov	r5,r3
8111d5b8:	110f3080 	call	8110f308 <__muldf3>
8111d5bc:	01000044 	movi	r4,1
8111d5c0:	b82fd07a 	srai	r23,r23,1
8111d5c4:	84000204 	addi	r16,r16,8
8111d5c8:	b83ff51e 	bne	r23,zero,8111d5a0 <__reset+0xfb0fd5a0>
8111d5cc:	21003fcc 	andi	r4,r4,255
8111d5d0:	8821883a 	mov	r16,r17
8111d5d4:	da400a17 	ldw	r9,40(sp)
8111d5d8:	9823883a 	mov	r17,r19
8111d5dc:	2001a51e 	bne	r4,zero,8111dc74 <_strtod_r+0x15f4>
8111d5e0:	d9000917 	ldw	r4,36(sp)
8111d5e4:	20016d1e 	bne	r4,zero,8111db9c <_strtod_r+0x151c>
8111d5e8:	000d883a 	mov	r6,zero
8111d5ec:	000f883a 	mov	r7,zero
8111d5f0:	9009883a 	mov	r4,r18
8111d5f4:	880b883a 	mov	r5,r17
8111d5f8:	da401315 	stw	r9,76(sp)
8111d5fc:	11247300 	call	81124730 <__eqdf2>
8111d600:	da401317 	ldw	r9,76(sp)
8111d604:	103df41e 	bne	r2,zero,8111cdd8 <__reset+0xfb0fcdd8>
8111d608:	00800884 	movi	r2,34
8111d60c:	80800015 	stw	r2,0(r16)
8111d610:	002b883a 	mov	r21,zero
8111d614:	002d883a 	mov	r22,zero
8111d618:	003ce306 	br	8111c9a8 <__reset+0xfb0fc9a8>
8111d61c:	055387c4 	movi	r21,19999
8111d620:	003d6b06 	br	8111cbd0 <__reset+0xfb0fcbd0>
8111d624:	0440d434 	movhi	r17,848
8111d628:	1c63883a 	add	r17,r3,r17
8111d62c:	882d883a 	mov	r22,r17
8111d630:	003ebe06 	br	8111d12c <__reset+0xfb0fd12c>
8111d634:	14403fcc 	andi	r17,r2,255
8111d638:	8c40201c 	xori	r17,r17,128
8111d63c:	8c7fe004 	addi	r17,r17,-128
8111d640:	dd400817 	ldw	r21,32(sp)
8111d644:	0027883a 	mov	r19,zero
8111d648:	0039883a 	mov	fp,zero
8111d64c:	002d883a 	mov	r22,zero
8111d650:	003c9906 	br	8111c8b8 <__reset+0xfb0fc8b8>
8111d654:	00c00944 	movi	r3,37
8111d658:	1a47c83a 	sub	r3,r3,r9
8111d65c:	1d7d8c16 	blt	r3,r21,8111cc90 <__reset+0xfb0fcc90>
8111d660:	1261c83a 	sub	r16,r2,r9
8111d664:	800490fa 	slli	r2,r16,3
8111d668:	04e04534 	movhi	r19,33044
8111d66c:	9cf16604 	addi	r19,r19,-14952
8111d670:	9885883a 	add	r2,r19,r2
8111d674:	11000017 	ldw	r4,0(r2)
8111d678:	11400117 	ldw	r5,4(r2)
8111d67c:	900d883a 	mov	r6,r18
8111d680:	880f883a 	mov	r7,r17
8111d684:	110f3080 	call	8110f308 <__muldf3>
8111d688:	ac0dc83a 	sub	r6,r21,r16
8111d68c:	300c90fa 	slli	r6,r6,3
8111d690:	1009883a 	mov	r4,r2
8111d694:	180b883a 	mov	r5,r3
8111d698:	9985883a 	add	r2,r19,r6
8111d69c:	11800017 	ldw	r6,0(r2)
8111d6a0:	11c00117 	ldw	r7,4(r2)
8111d6a4:	110f3080 	call	8110f308 <__muldf3>
8111d6a8:	102b883a 	mov	r21,r2
8111d6ac:	182d883a 	mov	r22,r3
8111d6b0:	003cbd06 	br	8111c9a8 <__reset+0xfb0fc9a8>
8111d6b4:	b811883a 	mov	r8,r23
8111d6b8:	003e8606 	br	8111d0d4 <__reset+0xfb0fd0d4>
8111d6bc:	d8000d15 	stw	zero,52(sp)
8111d6c0:	05cffc34 	movhi	r23,16368
8111d6c4:	003e8006 	br	8111d0c8 <__reset+0xfb0fd0c8>
8111d6c8:	883f011e 	bne	r17,zero,8111d2d0 <__reset+0xfb0fd2d0>
8111d6cc:	dd000a15 	stw	r20,40(sp)
8111d6d0:	dd001217 	ldw	r20,72(sp)
8111d6d4:	a811883a 	mov	r8,r21
8111d6d8:	00800884 	movi	r2,34
8111d6dc:	80800015 	stw	r2,0(r16)
8111d6e0:	002b883a 	mov	r21,zero
8111d6e4:	d8800517 	ldw	r2,20(sp)
8111d6e8:	002d883a 	mov	r22,zero
8111d6ec:	003f0a06 	br	8111d318 <__reset+0xfb0fd318>
8111d6f0:	d9800517 	ldw	r6,20(sp)
8111d6f4:	30000826 	beq	r6,zero,8111d718 <_strtod_r+0x1098>
8111d6f8:	01400d44 	movi	r5,53
8111d6fc:	d9000204 	addi	r4,sp,8
8111d700:	d8801315 	stw	r2,76(sp)
8111d704:	111bd140 	call	8111bd14 <__copybits>
8111d708:	d9400517 	ldw	r5,20(sp)
8111d70c:	8009883a 	mov	r4,r16
8111d710:	111ae6c0 	call	8111ae6c <_Bfree>
8111d714:	d8801317 	ldw	r2,76(sp)
8111d718:	00c00184 	movi	r3,6
8111d71c:	1d400f36 	bltu	r3,r21,8111d75c <_strtod_r+0x10dc>
8111d720:	a82a90ba 	slli	r21,r21,2
8111d724:	00e044b4 	movhi	r3,33042
8111d728:	18f5ce04 	addi	r3,r3,-10440
8111d72c:	a8eb883a 	add	r21,r21,r3
8111d730:	a8c00017 	ldw	r3,0(r21)
8111d734:	1800683a 	jmp	r3
8111d738:	8111d7b4 	orhi	r4,r16,18270
8111d73c:	8111d78c 	andi	r4,r16,18270
8111d740:	8111d770 	cmpltui	r4,r16,18269
8111d744:	8111d754 	ori	r4,r16,18269
8111d748:	8111d77c 	xorhi	r4,r16,18269
8111d74c:	8111d78c 	andi	r4,r16,18270
8111d750:	8111d7b4 	orhi	r4,r16,18270
8111d754:	045ffc34 	movhi	r17,32752
8111d758:	0025883a 	mov	r18,zero
8111d75c:	1080020c 	andi	r2,r2,8
8111d760:	902b883a 	mov	r21,r18
8111d764:	103c8f26 	beq	r2,zero,8111c9a4 <__reset+0xfb0fc9a4>
8111d768:	8da00034 	orhi	r22,r17,32768
8111d76c:	003c8e06 	br	8111c9a8 <__reset+0xfb0fc9a8>
8111d770:	dc800217 	ldw	r18,8(sp)
8111d774:	dc400317 	ldw	r17,12(sp)
8111d778:	003ff806 	br	8111d75c <__reset+0xfb0fd75c>
8111d77c:	04600034 	movhi	r17,32768
8111d780:	8c7fffc4 	addi	r17,r17,-1
8111d784:	04bfffc4 	movi	r18,-1
8111d788:	003ff406 	br	8111d75c <__reset+0xfb0fd75c>
8111d78c:	d8c00417 	ldw	r3,16(sp)
8111d790:	dc400317 	ldw	r17,12(sp)
8111d794:	013ffc34 	movhi	r4,65520
8111d798:	18c10cc4 	addi	r3,r3,1075
8111d79c:	1806953a 	slli	r3,r3,20
8111d7a0:	213fffc4 	addi	r4,r4,-1
8111d7a4:	8922703a 	and	r17,r17,r4
8111d7a8:	dc800217 	ldw	r18,8(sp)
8111d7ac:	88e2b03a 	or	r17,r17,r3
8111d7b0:	003fea06 	br	8111d75c <__reset+0xfb0fd75c>
8111d7b4:	0023883a 	mov	r17,zero
8111d7b8:	0025883a 	mov	r18,zero
8111d7bc:	003fe706 	br	8111d75c <__reset+0xfb0fd75c>
8111d7c0:	01800044 	movi	r6,1
8111d7c4:	50d5883a 	add	r10,r10,r3
8111d7c8:	2a4b883a 	add	r5,r5,r9
8111d7cc:	19811a26 	beq	r3,r6,8111dc38 <_strtod_r+0x15b8>
8111d7d0:	01800204 	movi	r6,8
8111d7d4:	01c00404 	movi	r7,16
8111d7d8:	4a400044 	addi	r9,r9,1
8111d7dc:	48bfffc4 	addi	r2,r9,-1
8111d7e0:	30801616 	blt	r6,r2,8111d83c <_strtod_r+0x11bc>
8111d7e4:	e70002a4 	muli	fp,fp,10
8111d7e8:	497ffb1e 	bne	r9,r5,8111d7d8 <__reset+0xfb0fd7d8>
8111d7ec:	d9800617 	ldw	r6,24(sp)
8111d7f0:	4a400044 	addi	r9,r9,1
8111d7f4:	00c00204 	movi	r3,8
8111d7f8:	19400c0e 	bge	r3,r5,8111d82c <_strtod_r+0x11ac>
8111d7fc:	00800404 	movi	r2,16
8111d800:	000b883a 	mov	r5,zero
8111d804:	127ea316 	blt	r2,r9,8111d294 <__reset+0xfb0fd294>
8111d808:	988002a4 	muli	r2,r19,10
8111d80c:	20a7883a 	add	r19,r4,r2
8111d810:	003ea006 	br	8111d294 <__reset+0xfb0fd294>
8111d814:	d8800617 	ldw	r2,24(sp)
8111d818:	8c7ff404 	addi	r17,r17,-48
8111d81c:	2a800044 	addi	r10,r5,1
8111d820:	d8800815 	stw	r2,32(sp)
8111d824:	100d883a 	mov	r6,r2
8111d828:	02400044 	movi	r9,1
8111d82c:	e08002a4 	muli	r2,fp,10
8111d830:	000b883a 	mov	r5,zero
8111d834:	88b9883a 	add	fp,r17,r2
8111d838:	003e9606 	br	8111d294 <__reset+0xfb0fd294>
8111d83c:	3a7fea16 	blt	r7,r9,8111d7e8 <__reset+0xfb0fd7e8>
8111d840:	9cc002a4 	muli	r19,r19,10
8111d844:	003fe806 	br	8111d7e8 <__reset+0xfb0fd7e8>
8111d848:	00bffa84 	movi	r2,-22
8111d84c:	a8bd1016 	blt	r21,r2,8111cc90 <__reset+0xfb0fcc90>
8111d850:	a82a90fa 	slli	r21,r21,3
8111d854:	00a04534 	movhi	r2,33044
8111d858:	10b16604 	addi	r2,r2,-14952
8111d85c:	1545c83a 	sub	r2,r2,r21
8111d860:	11800017 	ldw	r6,0(r2)
8111d864:	11c00117 	ldw	r7,4(r2)
8111d868:	9009883a 	mov	r4,r18
8111d86c:	880b883a 	mov	r5,r17
8111d870:	1123e400 	call	81123e40 <__divdf3>
8111d874:	102b883a 	mov	r21,r2
8111d878:	182d883a 	mov	r22,r3
8111d87c:	003c4a06 	br	8111c9a8 <__reset+0xfb0fc9a8>
8111d880:	dd000a15 	stw	r20,40(sp)
8111d884:	a811883a 	mov	r8,r21
8111d888:	dd001217 	ldw	r20,72(sp)
8111d88c:	003e9e06 	br	8111d308 <__reset+0xfb0fd308>
8111d890:	01604534 	movhi	r5,33044
8111d894:	d9000617 	ldw	r4,24(sp)
8111d898:	29719804 	addi	r5,r5,-14752
8111d89c:	01c00644 	movi	r7,25
8111d8a0:	00000b06 	br	8111d8d0 <_strtod_r+0x1250>
8111d8a4:	21000044 	addi	r4,r4,1
8111d8a8:	20800003 	ldbu	r2,0(r4)
8111d8ac:	10ffefc4 	addi	r3,r2,-65
8111d8b0:	10803fcc 	andi	r2,r2,255
8111d8b4:	1080201c 	xori	r2,r2,128
8111d8b8:	18c03fcc 	andi	r3,r3,255
8111d8bc:	10bfe004 	addi	r2,r2,-128
8111d8c0:	38c00136 	bltu	r7,r3,8111d8c8 <_strtod_r+0x1248>
8111d8c4:	10800804 	addi	r2,r2,32
8111d8c8:	29400044 	addi	r5,r5,1
8111d8cc:	11bbbb1e 	bne	r2,r6,8111c7bc <__reset+0xfb0fc7bc>
8111d8d0:	29800007 	ldb	r6,0(r5)
8111d8d4:	303ff31e 	bne	r6,zero,8111d8a4 <__reset+0xfb0fd8a4>
8111d8d8:	01a04534 	movhi	r6,33044
8111d8dc:	d9000615 	stw	r4,24(sp)
8111d8e0:	31b19904 	addi	r6,r6,-14748
8111d8e4:	200b883a 	mov	r5,r4
8111d8e8:	02000644 	movi	r8,25
8111d8ec:	00000a06 	br	8111d918 <_strtod_r+0x1298>
8111d8f0:	28800003 	ldbu	r2,0(r5)
8111d8f4:	10ffefc4 	addi	r3,r2,-65
8111d8f8:	10803fcc 	andi	r2,r2,255
8111d8fc:	1080201c 	xori	r2,r2,128
8111d900:	18c03fcc 	andi	r3,r3,255
8111d904:	10bfe004 	addi	r2,r2,-128
8111d908:	40c00136 	bltu	r8,r3,8111d910 <_strtod_r+0x1290>
8111d90c:	10800804 	addi	r2,r2,32
8111d910:	31800044 	addi	r6,r6,1
8111d914:	11c0711e 	bne	r2,r7,8111dadc <_strtod_r+0x145c>
8111d918:	31c00007 	ldb	r7,0(r6)
8111d91c:	29400044 	addi	r5,r5,1
8111d920:	383ff31e 	bne	r7,zero,8111d8f0 <__reset+0xfb0fd8f0>
8111d924:	d9400615 	stw	r5,24(sp)
8111d928:	045ffc34 	movhi	r17,32752
8111d92c:	0025883a 	mov	r18,zero
8111d930:	003c1b06 	br	8111c9a0 <__reset+0xfb0fc9a0>
8111d934:	000b883a 	mov	r5,zero
8111d938:	003ccc06 	br	8111cc6c <__reset+0xfb0fcc6c>
8111d93c:	d9400e17 	ldw	r5,56(sp)
8111d940:	dd000a15 	stw	r20,40(sp)
8111d944:	00800434 	movhi	r2,16
8111d948:	a811883a 	mov	r8,r21
8111d94c:	dd001217 	ldw	r20,72(sp)
8111d950:	dd401117 	ldw	r21,68(sp)
8111d954:	dd801017 	ldw	r22,64(sp)
8111d958:	10bfffc4 	addi	r2,r2,-1
8111d95c:	28005626 	beq	r5,zero,8111dab8 <_strtod_r+0x1438>
8111d960:	8886703a 	and	r3,r17,r2
8111d964:	18807826 	beq	r3,r2,8111db48 <_strtod_r+0x14c8>
8111d968:	d8c00b17 	ldw	r3,44(sp)
8111d96c:	18005726 	beq	r3,zero,8111dacc <_strtod_r+0x144c>
8111d970:	1c44703a 	and	r2,r3,r17
8111d974:	10000f26 	beq	r2,zero,8111d9b4 <_strtod_r+0x1334>
8111d978:	d9000e17 	ldw	r4,56(sp)
8111d97c:	d9800917 	ldw	r6,36(sp)
8111d980:	20005e26 	beq	r4,zero,8111dafc <_strtod_r+0x147c>
8111d984:	9009883a 	mov	r4,r18
8111d988:	880b883a 	mov	r5,r17
8111d98c:	da001315 	stw	r8,76(sp)
8111d990:	111c6140 	call	8111c614 <sulp>
8111d994:	100d883a 	mov	r6,r2
8111d998:	180f883a 	mov	r7,r3
8111d99c:	9009883a 	mov	r4,r18
8111d9a0:	880b883a 	mov	r5,r17
8111d9a4:	112358c0 	call	8112358c <__adddf3>
8111d9a8:	da001317 	ldw	r8,76(sp)
8111d9ac:	102b883a 	mov	r21,r2
8111d9b0:	182d883a 	mov	r22,r3
8111d9b4:	d8c00917 	ldw	r3,36(sp)
8111d9b8:	18000f26 	beq	r3,zero,8111d9f8 <_strtod_r+0x1378>
8111d9bc:	a809883a 	mov	r4,r21
8111d9c0:	b00b883a 	mov	r5,r22
8111d9c4:	000d883a 	mov	r6,zero
8111d9c8:	01ce5434 	movhi	r7,14672
8111d9cc:	da001315 	stw	r8,76(sp)
8111d9d0:	110f3080 	call	8110f308 <__muldf3>
8111d9d4:	102b883a 	mov	r21,r2
8111d9d8:	182d883a 	mov	r22,r3
8111d9dc:	da001317 	ldw	r8,76(sp)
8111d9e0:	1800051e 	bne	r3,zero,8111d9f8 <_strtod_r+0x1378>
8111d9e4:	d8800517 	ldw	r2,20(sp)
8111d9e8:	a83e4b1e 	bne	r21,zero,8111d318 <__reset+0xfb0fd318>
8111d9ec:	00c00884 	movi	r3,34
8111d9f0:	80c00015 	stw	r3,0(r16)
8111d9f4:	003e4806 	br	8111d318 <__reset+0xfb0fd318>
8111d9f8:	d8800517 	ldw	r2,20(sp)
8111d9fc:	003e4606 	br	8111d318 <__reset+0xfb0fd318>
8111da00:	d9000e17 	ldw	r4,56(sp)
8111da04:	dd000a15 	stw	r20,40(sp)
8111da08:	a811883a 	mov	r8,r21
8111da0c:	dd001217 	ldw	r20,72(sp)
8111da10:	dd401117 	ldw	r21,68(sp)
8111da14:	dd801017 	ldw	r22,64(sp)
8111da18:	203fe61e 	bne	r4,zero,8111d9b4 <__reset+0xfb0fd9b4>
8111da1c:	903fe51e 	bne	r18,zero,8111d9b4 <__reset+0xfb0fd9b4>
8111da20:	00800434 	movhi	r2,16
8111da24:	10bfffc4 	addi	r2,r2,-1
8111da28:	8884703a 	and	r2,r17,r2
8111da2c:	103fe11e 	bne	r2,zero,8111d9b4 <__reset+0xfb0fd9b4>
8111da30:	8ddffc2c 	andhi	r23,r17,32752
8111da34:	0081ac34 	movhi	r2,1712
8111da38:	15ffde2e 	bgeu	r2,r23,8111d9b4 <__reset+0xfb0fd9b4>
8111da3c:	40800517 	ldw	r2,20(r8)
8111da40:	1000031e 	bne	r2,zero,8111da50 <_strtod_r+0x13d0>
8111da44:	40800417 	ldw	r2,16(r8)
8111da48:	00c00044 	movi	r3,1
8111da4c:	18bfd90e 	bge	r3,r2,8111d9b4 <__reset+0xfb0fd9b4>
8111da50:	400b883a 	mov	r5,r8
8111da54:	01800044 	movi	r6,1
8111da58:	8009883a 	mov	r4,r16
8111da5c:	111b56c0 	call	8111b56c <__lshift>
8111da60:	980b883a 	mov	r5,r19
8111da64:	1009883a 	mov	r4,r2
8111da68:	d8801315 	stw	r2,76(sp)
8111da6c:	111b6bc0 	call	8111b6bc <__mcmp>
8111da70:	da001317 	ldw	r8,76(sp)
8111da74:	00bfcf0e 	bge	zero,r2,8111d9b4 <__reset+0xfb0fd9b4>
8111da78:	d8c00917 	ldw	r3,36(sp)
8111da7c:	18005c26 	beq	r3,zero,8111dbf0 <_strtod_r+0x1570>
8111da80:	0081ac34 	movhi	r2,1712
8111da84:	15c05a16 	blt	r2,r23,8111dbf0 <_strtod_r+0x1570>
8111da88:	0080dc34 	movhi	r2,880
8111da8c:	15ffcb16 	blt	r2,r23,8111d9bc <__reset+0xfb0fd9bc>
8111da90:	003f1106 	br	8111d6d8 <__reset+0xfb0fd6d8>
8111da94:	002d883a 	mov	r22,zero
8111da98:	022ff834 	movhi	r8,49120
8111da9c:	d8000d15 	stw	zero,52(sp)
8111daa0:	05cff834 	movhi	r23,16352
8111daa4:	003ded06 	br	8111d25c <__reset+0xfb0fd25c>
8111daa8:	0440d434 	movhi	r17,848
8111daac:	1c63883a 	add	r17,r3,r17
8111dab0:	d8000915 	stw	zero,36(sp)
8111dab4:	003cc806 	br	8111cdd8 <__reset+0xfb0fcdd8>
8111dab8:	8884703a 	and	r2,r17,r2
8111dabc:	103faa1e 	bne	r2,zero,8111d968 <__reset+0xfb0fd968>
8111dac0:	903fa91e 	bne	r18,zero,8111d968 <__reset+0xfb0fd968>
8111dac4:	8ddffc2c 	andhi	r23,r17,32752
8111dac8:	003feb06 	br	8111da78 <__reset+0xfb0fda78>
8111dacc:	d8c00d17 	ldw	r3,52(sp)
8111dad0:	1cae703a 	and	r23,r3,r18
8111dad4:	b83fb726 	beq	r23,zero,8111d9b4 <__reset+0xfb0fd9b4>
8111dad8:	003fa706 	br	8111d978 <__reset+0xfb0fd978>
8111dadc:	21000044 	addi	r4,r4,1
8111dae0:	d9000615 	stw	r4,24(sp)
8111dae4:	003f9006 	br	8111d928 <__reset+0xfb0fd928>
8111dae8:	01604534 	movhi	r5,33044
8111daec:	29715c04 	addi	r5,r5,-14992
8111daf0:	d9400915 	stw	r5,36(sp)
8111daf4:	0027883a 	mov	r19,zero
8111daf8:	003ca206 	br	8111cd84 <__reset+0xfb0fcd84>
8111dafc:	9009883a 	mov	r4,r18
8111db00:	880b883a 	mov	r5,r17
8111db04:	da001315 	stw	r8,76(sp)
8111db08:	111c6140 	call	8111c614 <sulp>
8111db0c:	100d883a 	mov	r6,r2
8111db10:	180f883a 	mov	r7,r3
8111db14:	9009883a 	mov	r4,r18
8111db18:	880b883a 	mov	r5,r17
8111db1c:	11249880 	call	81124988 <__subdf3>
8111db20:	000d883a 	mov	r6,zero
8111db24:	000f883a 	mov	r7,zero
8111db28:	1009883a 	mov	r4,r2
8111db2c:	180b883a 	mov	r5,r3
8111db30:	102b883a 	mov	r21,r2
8111db34:	182d883a 	mov	r22,r3
8111db38:	11247300 	call	81124730 <__eqdf2>
8111db3c:	da001317 	ldw	r8,76(sp)
8111db40:	103ee526 	beq	r2,zero,8111d6d8 <__reset+0xfb0fd6d8>
8111db44:	003f9b06 	br	8111d9b4 <__reset+0xfb0fd9b4>
8111db48:	d8800917 	ldw	r2,36(sp)
8111db4c:	10002226 	beq	r2,zero,8111dbd8 <_strtod_r+0x1558>
8111db50:	889ffc2c 	andhi	r2,r17,32752
8111db54:	00c1a834 	movhi	r3,1696
8111db58:	18801f36 	bltu	r3,r2,8111dbd8 <_strtod_r+0x1558>
8111db5c:	1004d53a 	srli	r2,r2,20
8111db60:	00c01ac4 	movi	r3,107
8111db64:	1887c83a 	sub	r3,r3,r2
8111db68:	00bfffc4 	movi	r2,-1
8111db6c:	10c4983a 	sll	r2,r2,r3
8111db70:	14bf7d1e 	bne	r2,r18,8111d968 <__reset+0xfb0fd968>
8111db74:	00dffc34 	movhi	r3,32752
8111db78:	18ffffc4 	addi	r3,r3,-1
8111db7c:	88c03526 	beq	r17,r3,8111dc54 <_strtod_r+0x15d4>
8111db80:	8c5ffc2c 	andhi	r17,r17,32752
8111db84:	00800434 	movhi	r2,16
8111db88:	002b883a 	mov	r21,zero
8111db8c:	88ad883a 	add	r22,r17,r2
8111db90:	003f8806 	br	8111d9b4 <__reset+0xfb0fd9b4>
8111db94:	01401a84 	movi	r5,106
8111db98:	d9400915 	stw	r5,36(sp)
8111db9c:	8ddffc2c 	andhi	r23,r17,32752
8111dba0:	b82ed53a 	srli	r23,r23,20
8111dba4:	00801ac4 	movi	r2,107
8111dba8:	15c5c83a 	sub	r2,r2,r23
8111dbac:	00be8e0e 	bge	zero,r2,8111d5e8 <__reset+0xfb0fd5e8>
8111dbb0:	00c007c4 	movi	r3,31
8111dbb4:	18800a0e 	bge	r3,r2,8111dbe0 <_strtod_r+0x1560>
8111dbb8:	00c00d04 	movi	r3,52
8111dbbc:	0025883a 	mov	r18,zero
8111dbc0:	1880270e 	bge	r3,r2,8111dc60 <_strtod_r+0x15e0>
8111dbc4:	0440dc34 	movhi	r17,880
8111dbc8:	003e8706 	br	8111d5e8 <__reset+0xfb0fd5e8>
8111dbcc:	d8000915 	stw	zero,36(sp)
8111dbd0:	05fe6a16 	blt	zero,r23,8111d57c <__reset+0xfb0fd57c>
8111dbd4:	003e8406 	br	8111d5e8 <__reset+0xfb0fd5e8>
8111dbd8:	00bfffc4 	movi	r2,-1
8111dbdc:	003fe406 	br	8111db70 <__reset+0xfb0fdb70>
8111dbe0:	00ffffc4 	movi	r3,-1
8111dbe4:	1884983a 	sll	r2,r3,r2
8111dbe8:	14a4703a 	and	r18,r2,r18
8111dbec:	003e7e06 	br	8111d5e8 <__reset+0xfb0fd5e8>
8111dbf0:	00bffc34 	movhi	r2,65520
8111dbf4:	b8af883a 	add	r23,r23,r2
8111dbf8:	057fffc4 	movi	r21,-1
8111dbfc:	00800434 	movhi	r2,16
8111dc00:	1545883a 	add	r2,r2,r21
8111dc04:	b8acb03a 	or	r22,r23,r2
8111dc08:	003f6a06 	br	8111d9b4 <__reset+0xfb0fd9b4>
8111dc0c:	01604534 	movhi	r5,33044
8111dc10:	29719c04 	addi	r5,r5,-14736
8111dc14:	d9800204 	addi	r6,sp,8
8111dc18:	d9000604 	addi	r4,sp,24
8111dc1c:	112200c0 	call	8112200c <__hexnan>
8111dc20:	00c00144 	movi	r3,5
8111dc24:	10fb5c1e 	bne	r2,r3,8111c998 <__reset+0xfb0fc998>
8111dc28:	dc400317 	ldw	r17,12(sp)
8111dc2c:	dc800217 	ldw	r18,8(sp)
8111dc30:	8c5ffc34 	orhi	r17,r17,32752
8111dc34:	003b5a06 	br	8111c9a0 <__reset+0xfb0fc9a0>
8111dc38:	480b883a 	mov	r5,r9
8111dc3c:	d9800617 	ldw	r6,24(sp)
8111dc40:	4a400044 	addi	r9,r9,1
8111dc44:	003eeb06 	br	8111d7f4 <__reset+0xfb0fd7f4>
8111dc48:	1025883a 	mov	r18,r2
8111dc4c:	1823883a 	mov	r17,r3
8111dc50:	003c4c06 	br	8111cd84 <__reset+0xfb0fcd84>
8111dc54:	00ffffc4 	movi	r3,-1
8111dc58:	10ffc91e 	bne	r2,r3,8111db80 <__reset+0xfb0fdb80>
8111dc5c:	003da906 	br	8111d304 <__reset+0xfb0fd304>
8111dc60:	10bff804 	addi	r2,r2,-32
8111dc64:	00ffffc4 	movi	r3,-1
8111dc68:	1884983a 	sll	r2,r3,r2
8111dc6c:	1462703a 	and	r17,r2,r17
8111dc70:	003e5d06 	br	8111d5e8 <__reset+0xfb0fd5e8>
8111dc74:	1025883a 	mov	r18,r2
8111dc78:	1823883a 	mov	r17,r3
8111dc7c:	003e5806 	br	8111d5e0 <__reset+0xfb0fd5e0>

8111dc80 <strtod>:
8111dc80:	00a04534 	movhi	r2,33044
8111dc84:	10ba2704 	addi	r2,r2,-5988
8111dc88:	280d883a 	mov	r6,r5
8111dc8c:	200b883a 	mov	r5,r4
8111dc90:	11000017 	ldw	r4,0(r2)
8111dc94:	111c6801 	jmpi	8111c680 <_strtod_r>

8111dc98 <strtof>:
8111dc98:	defffb04 	addi	sp,sp,-20
8111dc9c:	de00012e 	bgeu	sp,et,8111dca4 <strtof+0xc>
8111dca0:	003b68fa 	trap	3
8111dca4:	dcc00315 	stw	r19,12(sp)
8111dca8:	04e04534 	movhi	r19,33044
8111dcac:	9cfa2704 	addi	r19,r19,-5988
8111dcb0:	280d883a 	mov	r6,r5
8111dcb4:	200b883a 	mov	r5,r4
8111dcb8:	99000017 	ldw	r4,0(r19)
8111dcbc:	dfc00415 	stw	ra,16(sp)
8111dcc0:	dc800215 	stw	r18,8(sp)
8111dcc4:	dc400115 	stw	r17,4(sp)
8111dcc8:	dc000015 	stw	r16,0(sp)
8111dccc:	111c6800 	call	8111c680 <_strtod_r>
8111dcd0:	1009883a 	mov	r4,r2
8111dcd4:	180b883a 	mov	r5,r3
8111dcd8:	1025883a 	mov	r18,r2
8111dcdc:	1823883a 	mov	r17,r3
8111dce0:	110fb400 	call	8110fb40 <__truncdfsf2>
8111dce4:	000b883a 	mov	r5,zero
8111dce8:	1009883a 	mov	r4,r2
8111dcec:	1021883a 	mov	r16,r2
8111dcf0:	11233900 	call	81123390 <__eqsf2>
8111dcf4:	1000111e 	bne	r2,zero,8111dd3c <strtof+0xa4>
8111dcf8:	000d883a 	mov	r6,zero
8111dcfc:	000f883a 	mov	r7,zero
8111dd00:	9009883a 	mov	r4,r18
8111dd04:	880b883a 	mov	r5,r17
8111dd08:	11247300 	call	81124730 <__eqdf2>
8111dd0c:	10000b26 	beq	r2,zero,8111dd3c <strtof+0xa4>
8111dd10:	98800017 	ldw	r2,0(r19)
8111dd14:	00c00884 	movi	r3,34
8111dd18:	10c00015 	stw	r3,0(r2)
8111dd1c:	8005883a 	mov	r2,r16
8111dd20:	dfc00417 	ldw	ra,16(sp)
8111dd24:	dcc00317 	ldw	r19,12(sp)
8111dd28:	dc800217 	ldw	r18,8(sp)
8111dd2c:	dc400117 	ldw	r17,4(sp)
8111dd30:	dc000017 	ldw	r16,0(sp)
8111dd34:	dec00504 	addi	sp,sp,20
8111dd38:	f800283a 	ret
8111dd3c:	015fe034 	movhi	r5,32640
8111dd40:	297fffc4 	addi	r5,r5,-1
8111dd44:	8009883a 	mov	r4,r16
8111dd48:	11234080 	call	81123408 <__gesf2>
8111dd4c:	0080070e 	bge	zero,r2,8111dd6c <strtof+0xd4>
8111dd50:	01dffc34 	movhi	r7,32752
8111dd54:	39ffffc4 	addi	r7,r7,-1
8111dd58:	01bfffc4 	movi	r6,-1
8111dd5c:	9009883a 	mov	r4,r18
8111dd60:	880b883a 	mov	r5,r17
8111dd64:	11247b80 	call	811247b8 <__gedf2>
8111dd68:	00bfe90e 	bge	zero,r2,8111dd10 <__reset+0xfb0fdd10>
8111dd6c:	017fe034 	movhi	r5,65408
8111dd70:	297fffc4 	addi	r5,r5,-1
8111dd74:	8009883a 	mov	r4,r16
8111dd78:	11234c40 	call	811234c4 <__lesf2>
8111dd7c:	103fe70e 	bge	r2,zero,8111dd1c <__reset+0xfb0fdd1c>
8111dd80:	01fffc34 	movhi	r7,65520
8111dd84:	39ffffc4 	addi	r7,r7,-1
8111dd88:	01bfffc4 	movi	r6,-1
8111dd8c:	9009883a 	mov	r4,r18
8111dd90:	880b883a 	mov	r5,r17
8111dd94:	11248940 	call	81124894 <__ledf2>
8111dd98:	103fdd0e 	bge	r2,zero,8111dd10 <__reset+0xfb0fdd10>
8111dd9c:	003fdf06 	br	8111dd1c <__reset+0xfb0fdd1c>

8111dda0 <_strtoll_r>:
8111dda0:	00a04534 	movhi	r2,33044
8111dda4:	defff304 	addi	sp,sp,-52
8111dda8:	10ba2504 	addi	r2,r2,-5996
8111ddac:	de00012e 	bgeu	sp,et,8111ddb4 <_strtoll_r+0x14>
8111ddb0:	003b68fa 	trap	3
8111ddb4:	dc800515 	stw	r18,20(sp)
8111ddb8:	14800017 	ldw	r18,0(r2)
8111ddbc:	dd800915 	stw	r22,36(sp)
8111ddc0:	dd400815 	stw	r21,32(sp)
8111ddc4:	dcc00615 	stw	r19,24(sp)
8111ddc8:	d9000015 	stw	r4,0(sp)
8111ddcc:	dfc00c15 	stw	ra,48(sp)
8111ddd0:	df000b15 	stw	fp,44(sp)
8111ddd4:	ddc00a15 	stw	r23,40(sp)
8111ddd8:	dd000715 	stw	r20,28(sp)
8111dddc:	dc400415 	stw	r17,16(sp)
8111dde0:	dc000315 	stw	r16,12(sp)
8111dde4:	282d883a 	mov	r22,r5
8111dde8:	302b883a 	mov	r21,r6
8111ddec:	3827883a 	mov	r19,r7
8111ddf0:	2809883a 	mov	r4,r5
8111ddf4:	24000003 	ldbu	r16,0(r4)
8111ddf8:	24400044 	addi	r17,r4,1
8111ddfc:	2007883a 	mov	r3,r4
8111de00:	9405883a 	add	r2,r18,r16
8111de04:	10800043 	ldbu	r2,1(r2)
8111de08:	8809883a 	mov	r4,r17
8111de0c:	1080020c 	andi	r2,r2,8
8111de10:	103ff81e 	bne	r2,zero,8111ddf4 <__reset+0xfb0fddf4>
8111de14:	00800b44 	movi	r2,45
8111de18:	80807826 	beq	r16,r2,8111dffc <_strtoll_r+0x25c>
8111de1c:	00800ac4 	movi	r2,43
8111de20:	80807a26 	beq	r16,r2,8111e00c <_strtoll_r+0x26c>
8111de24:	0039883a 	mov	fp,zero
8111de28:	98004e26 	beq	r19,zero,8111df64 <_strtoll_r+0x1c4>
8111de2c:	00800404 	movi	r2,16
8111de30:	98808226 	beq	r19,r2,8111e03c <_strtoll_r+0x29c>
8111de34:	982fd7fa 	srai	r23,r19,31
8111de38:	9829883a 	mov	r20,r19
8111de3c:	e0004f26 	beq	fp,zero,8111df7c <_strtoll_r+0x1dc>
8111de40:	0017883a 	mov	r11,zero
8111de44:	02a00034 	movhi	r10,32768
8111de48:	5809883a 	mov	r4,r11
8111de4c:	500b883a 	mov	r5,r10
8111de50:	a00d883a 	mov	r6,r20
8111de54:	b80f883a 	mov	r7,r23
8111de58:	da800215 	stw	r10,8(sp)
8111de5c:	dac00115 	stw	r11,4(sp)
8111de60:	1122c9c0 	call	81122c9c <__umoddi3>
8111de64:	dac00117 	ldw	r11,4(sp)
8111de68:	da800217 	ldw	r10,8(sp)
8111de6c:	a00d883a 	mov	r6,r20
8111de70:	5809883a 	mov	r4,r11
8111de74:	500b883a 	mov	r5,r10
8111de78:	b80f883a 	mov	r7,r23
8111de7c:	d8800115 	stw	r2,4(sp)
8111de80:	112271c0 	call	8112271c <__udivdi3>
8111de84:	9409883a 	add	r4,r18,r16
8111de88:	21000043 	ldbu	r4,1(r4)
8111de8c:	1019883a 	mov	r12,r2
8111de90:	880b883a 	mov	r5,r17
8111de94:	2240010c 	andi	r9,r4,4
8111de98:	0015883a 	mov	r10,zero
8111de9c:	000d883a 	mov	r6,zero
8111dea0:	000f883a 	mov	r7,zero
8111dea4:	03400044 	movi	r13,1
8111dea8:	02ffffc4 	movi	r11,-1
8111deac:	da000117 	ldw	r8,4(sp)
8111deb0:	48000d26 	beq	r9,zero,8111dee8 <_strtoll_r+0x148>
8111deb4:	843ff404 	addi	r16,r16,-48
8111deb8:	84c0110e 	bge	r16,r19,8111df00 <_strtoll_r+0x160>
8111debc:	52c00426 	beq	r10,r11,8111ded0 <_strtoll_r+0x130>
8111dec0:	19c00236 	bltu	r3,r7,8111decc <_strtoll_r+0x12c>
8111dec4:	38c0311e 	bne	r7,r3,8111df8c <_strtoll_r+0x1ec>
8111dec8:	6180302e 	bgeu	r12,r6,8111df8c <_strtoll_r+0x1ec>
8111decc:	02bfffc4 	movi	r10,-1
8111ded0:	2c000003 	ldbu	r16,0(r5)
8111ded4:	29400044 	addi	r5,r5,1
8111ded8:	9409883a 	add	r4,r18,r16
8111dedc:	21000043 	ldbu	r4,1(r4)
8111dee0:	2240010c 	andi	r9,r4,4
8111dee4:	483ff31e 	bne	r9,zero,8111deb4 <__reset+0xfb0fdeb4>
8111dee8:	210000cc 	andi	r4,r4,3
8111deec:	20000426 	beq	r4,zero,8111df00 <_strtoll_r+0x160>
8111def0:	23403426 	beq	r4,r13,8111dfc4 <_strtoll_r+0x224>
8111def4:	008015c4 	movi	r2,87
8111def8:	80a1c83a 	sub	r16,r16,r2
8111defc:	84ffef16 	blt	r16,r19,8111debc <__reset+0xfb0fdebc>
8111df00:	00bfffc4 	movi	r2,-1
8111df04:	50803426 	beq	r10,r2,8111dfd8 <_strtoll_r+0x238>
8111df08:	e0000426 	beq	fp,zero,8111df1c <_strtoll_r+0x17c>
8111df0c:	018dc83a 	sub	r6,zero,r6
8111df10:	3004c03a 	cmpne	r2,r6,zero
8111df14:	01e1c83a 	sub	r16,zero,r7
8111df18:	808fc83a 	sub	r7,r16,r2
8111df1c:	3005883a 	mov	r2,r6
8111df20:	3807883a 	mov	r3,r7
8111df24:	a8000326 	beq	r21,zero,8111df34 <_strtoll_r+0x194>
8111df28:	5000321e 	bne	r10,zero,8111dff4 <_strtoll_r+0x254>
8111df2c:	b00b883a 	mov	r5,r22
8111df30:	a9400015 	stw	r5,0(r21)
8111df34:	dfc00c17 	ldw	ra,48(sp)
8111df38:	df000b17 	ldw	fp,44(sp)
8111df3c:	ddc00a17 	ldw	r23,40(sp)
8111df40:	dd800917 	ldw	r22,36(sp)
8111df44:	dd400817 	ldw	r21,32(sp)
8111df48:	dd000717 	ldw	r20,28(sp)
8111df4c:	dcc00617 	ldw	r19,24(sp)
8111df50:	dc800517 	ldw	r18,20(sp)
8111df54:	dc400417 	ldw	r17,16(sp)
8111df58:	dc000317 	ldw	r16,12(sp)
8111df5c:	dec00d04 	addi	sp,sp,52
8111df60:	f800283a 	ret
8111df64:	00800c04 	movi	r2,48
8111df68:	80802c26 	beq	r16,r2,8111e01c <_strtoll_r+0x27c>
8111df6c:	05000284 	movi	r20,10
8111df70:	002f883a 	mov	r23,zero
8111df74:	a027883a 	mov	r19,r20
8111df78:	e03fb11e 	bne	fp,zero,8111de40 <__reset+0xfb0fde40>
8111df7c:	02a00034 	movhi	r10,32768
8111df80:	52bfffc4 	addi	r10,r10,-1
8111df84:	02ffffc4 	movi	r11,-1
8111df88:	003faf06 	br	8111de48 <__reset+0xfb0fde48>
8111df8c:	33000f26 	beq	r6,r12,8111dfcc <_strtoll_r+0x22c>
8111df90:	b985383a 	mul	r2,r23,r6
8111df94:	3d0f383a 	mul	r7,r7,r20
8111df98:	3508383a 	mulxuu	r4,r6,r20
8111df9c:	350d383a 	mul	r6,r6,r20
8111dfa0:	8013d7fa 	srai	r9,r16,31
8111dfa4:	388f883a 	add	r7,r7,r2
8111dfa8:	818d883a 	add	r6,r16,r6
8111dfac:	390f883a 	add	r7,r7,r4
8111dfb0:	3421803a 	cmpltu	r16,r6,r16
8111dfb4:	49cf883a 	add	r7,r9,r7
8111dfb8:	81cf883a 	add	r7,r16,r7
8111dfbc:	02800044 	movi	r10,1
8111dfc0:	003fc306 	br	8111ded0 <__reset+0xfb0fded0>
8111dfc4:	00800dc4 	movi	r2,55
8111dfc8:	003fcb06 	br	8111def8 <__reset+0xfb0fdef8>
8111dfcc:	38fff01e 	bne	r7,r3,8111df90 <__reset+0xfb0fdf90>
8111dfd0:	443fbe16 	blt	r8,r16,8111decc <__reset+0xfb0fdecc>
8111dfd4:	003fee06 	br	8111df90 <__reset+0xfb0fdf90>
8111dfd8:	e0002426 	beq	fp,zero,8111e06c <_strtoll_r+0x2cc>
8111dfdc:	0005883a 	mov	r2,zero
8111dfe0:	00e00034 	movhi	r3,32768
8111dfe4:	d9800017 	ldw	r6,0(sp)
8111dfe8:	01000884 	movi	r4,34
8111dfec:	31000015 	stw	r4,0(r6)
8111dff0:	a83fd026 	beq	r21,zero,8111df34 <__reset+0xfb0fdf34>
8111dff4:	297fffc4 	addi	r5,r5,-1
8111dff8:	003fcd06 	br	8111df30 <__reset+0xfb0fdf30>
8111dffc:	1c400084 	addi	r17,r3,2
8111e000:	1c000043 	ldbu	r16,1(r3)
8111e004:	07000044 	movi	fp,1
8111e008:	003f8706 	br	8111de28 <__reset+0xfb0fde28>
8111e00c:	1c400084 	addi	r17,r3,2
8111e010:	1c000043 	ldbu	r16,1(r3)
8111e014:	0039883a 	mov	fp,zero
8111e018:	003f8306 	br	8111de28 <__reset+0xfb0fde28>
8111e01c:	88800003 	ldbu	r2,0(r17)
8111e020:	00c01604 	movi	r3,88
8111e024:	108037cc 	andi	r2,r2,223
8111e028:	10c00a26 	beq	r2,r3,8111e054 <_strtoll_r+0x2b4>
8111e02c:	05000204 	movi	r20,8
8111e030:	002f883a 	mov	r23,zero
8111e034:	a027883a 	mov	r19,r20
8111e038:	003f8006 	br	8111de3c <__reset+0xfb0fde3c>
8111e03c:	00800c04 	movi	r2,48
8111e040:	80800e1e 	bne	r16,r2,8111e07c <_strtoll_r+0x2dc>
8111e044:	88800003 	ldbu	r2,0(r17)
8111e048:	00c01604 	movi	r3,88
8111e04c:	108037cc 	andi	r2,r2,223
8111e050:	10c00a1e 	bne	r2,r3,8111e07c <_strtoll_r+0x2dc>
8111e054:	05000404 	movi	r20,16
8111e058:	8c000043 	ldbu	r16,1(r17)
8111e05c:	002f883a 	mov	r23,zero
8111e060:	8c400084 	addi	r17,r17,2
8111e064:	a027883a 	mov	r19,r20
8111e068:	003f7406 	br	8111de3c <__reset+0xfb0fde3c>
8111e06c:	00e00034 	movhi	r3,32768
8111e070:	18ffffc4 	addi	r3,r3,-1
8111e074:	5005883a 	mov	r2,r10
8111e078:	003fda06 	br	8111dfe4 <__reset+0xfb0fdfe4>
8111e07c:	9829883a 	mov	r20,r19
8111e080:	002f883a 	mov	r23,zero
8111e084:	003f6d06 	br	8111de3c <__reset+0xfb0fde3c>

8111e088 <_strtoul_r>:
8111e088:	00a04534 	movhi	r2,33044
8111e08c:	defff604 	addi	sp,sp,-40
8111e090:	10ba2504 	addi	r2,r2,-5996
8111e094:	de00012e 	bgeu	sp,et,8111e09c <_strtoul_r+0x14>
8111e098:	003b68fa 	trap	3
8111e09c:	dc800315 	stw	r18,12(sp)
8111e0a0:	14800017 	ldw	r18,0(r2)
8111e0a4:	dd400615 	stw	r21,24(sp)
8111e0a8:	dd000515 	stw	r20,20(sp)
8111e0ac:	dcc00415 	stw	r19,16(sp)
8111e0b0:	2029883a 	mov	r20,r4
8111e0b4:	dfc00915 	stw	ra,36(sp)
8111e0b8:	ddc00815 	stw	r23,32(sp)
8111e0bc:	dd800715 	stw	r22,28(sp)
8111e0c0:	dc400215 	stw	r17,8(sp)
8111e0c4:	dc000115 	stw	r16,4(sp)
8111e0c8:	2827883a 	mov	r19,r5
8111e0cc:	382b883a 	mov	r21,r7
8111e0d0:	2809883a 	mov	r4,r5
8111e0d4:	24000003 	ldbu	r16,0(r4)
8111e0d8:	24400044 	addi	r17,r4,1
8111e0dc:	2007883a 	mov	r3,r4
8111e0e0:	9405883a 	add	r2,r18,r16
8111e0e4:	10800043 	ldbu	r2,1(r2)
8111e0e8:	8809883a 	mov	r4,r17
8111e0ec:	1080020c 	andi	r2,r2,8
8111e0f0:	103ff81e 	bne	r2,zero,8111e0d4 <__reset+0xfb0fe0d4>
8111e0f4:	00800b44 	movi	r2,45
8111e0f8:	80805326 	beq	r16,r2,8111e248 <_strtoul_r+0x1c0>
8111e0fc:	00800ac4 	movi	r2,43
8111e100:	80805526 	beq	r16,r2,8111e258 <_strtoul_r+0x1d0>
8111e104:	002f883a 	mov	r23,zero
8111e108:	a8000f26 	beq	r21,zero,8111e148 <_strtoul_r+0xc0>
8111e10c:	00800404 	movi	r2,16
8111e110:	a8805f26 	beq	r21,r2,8111e290 <_strtoul_r+0x208>
8111e114:	013fffc4 	movi	r4,-1
8111e118:	a80b883a 	mov	r5,r21
8111e11c:	d9800015 	stw	r6,0(sp)
8111e120:	11232d40 	call	811232d4 <__udivsi3>
8111e124:	a80b883a 	mov	r5,r21
8111e128:	013fffc4 	movi	r4,-1
8111e12c:	102d883a 	mov	r22,r2
8111e130:	11233380 	call	81123338 <__umodsi3>
8111e134:	d9800017 	ldw	r6,0(sp)
8111e138:	1019883a 	mov	r12,r2
8111e13c:	a817883a 	mov	r11,r21
8111e140:	b00f883a 	mov	r7,r22
8111e144:	00000706 	br	8111e164 <_strtoul_r+0xdc>
8111e148:	00800c04 	movi	r2,48
8111e14c:	80804626 	beq	r16,r2,8111e268 <_strtoul_r+0x1e0>
8111e150:	05400284 	movi	r21,10
8111e154:	01c666b4 	movhi	r7,6554
8111e158:	03000144 	movi	r12,5
8111e15c:	39e66644 	addi	r7,r7,-26215
8111e160:	a817883a 	mov	r11,r21
8111e164:	9407883a 	add	r3,r18,r16
8111e168:	18c00043 	ldbu	r3,1(r3)
8111e16c:	8809883a 	mov	r4,r17
8111e170:	0011883a 	mov	r8,zero
8111e174:	1940010c 	andi	r5,r3,4
8111e178:	0005883a 	mov	r2,zero
8111e17c:	02800044 	movi	r10,1
8111e180:	027fffc4 	movi	r9,-1
8111e184:	28000e26 	beq	r5,zero,8111e1c0 <_strtoul_r+0x138>
8111e188:	843ff404 	addi	r16,r16,-48
8111e18c:	8540120e 	bge	r16,r21,8111e1d8 <_strtoul_r+0x150>
8111e190:	42400526 	beq	r8,r9,8111e1a8 <_strtoul_r+0x120>
8111e194:	38802236 	bltu	r7,r2,8111e220 <_strtoul_r+0x198>
8111e198:	11c02026 	beq	r2,r7,8111e21c <_strtoul_r+0x194>
8111e19c:	12c5383a 	mul	r2,r2,r11
8111e1a0:	02000044 	movi	r8,1
8111e1a4:	8085883a 	add	r2,r16,r2
8111e1a8:	24000003 	ldbu	r16,0(r4)
8111e1ac:	21000044 	addi	r4,r4,1
8111e1b0:	9407883a 	add	r3,r18,r16
8111e1b4:	18c00043 	ldbu	r3,1(r3)
8111e1b8:	1940010c 	andi	r5,r3,4
8111e1bc:	283ff21e 	bne	r5,zero,8111e188 <__reset+0xfb0fe188>
8111e1c0:	18c000cc 	andi	r3,r3,3
8111e1c4:	18000426 	beq	r3,zero,8111e1d8 <_strtoul_r+0x150>
8111e1c8:	1a801726 	beq	r3,r10,8111e228 <_strtoul_r+0x1a0>
8111e1cc:	00c015c4 	movi	r3,87
8111e1d0:	80e1c83a 	sub	r16,r16,r3
8111e1d4:	857fee16 	blt	r16,r21,8111e190 <__reset+0xfb0fe190>
8111e1d8:	40001516 	blt	r8,zero,8111e230 <_strtoul_r+0x1a8>
8111e1dc:	b8000126 	beq	r23,zero,8111e1e4 <_strtoul_r+0x15c>
8111e1e0:	0085c83a 	sub	r2,zero,r2
8111e1e4:	30000226 	beq	r6,zero,8111e1f0 <_strtoul_r+0x168>
8111e1e8:	4000151e 	bne	r8,zero,8111e240 <_strtoul_r+0x1b8>
8111e1ec:	34c00015 	stw	r19,0(r6)
8111e1f0:	dfc00917 	ldw	ra,36(sp)
8111e1f4:	ddc00817 	ldw	r23,32(sp)
8111e1f8:	dd800717 	ldw	r22,28(sp)
8111e1fc:	dd400617 	ldw	r21,24(sp)
8111e200:	dd000517 	ldw	r20,20(sp)
8111e204:	dcc00417 	ldw	r19,16(sp)
8111e208:	dc800317 	ldw	r18,12(sp)
8111e20c:	dc400217 	ldw	r17,8(sp)
8111e210:	dc000117 	ldw	r16,4(sp)
8111e214:	dec00a04 	addi	sp,sp,40
8111e218:	f800283a 	ret
8111e21c:	643fdf0e 	bge	r12,r16,8111e19c <__reset+0xfb0fe19c>
8111e220:	023fffc4 	movi	r8,-1
8111e224:	003fe006 	br	8111e1a8 <__reset+0xfb0fe1a8>
8111e228:	00c00dc4 	movi	r3,55
8111e22c:	003fe806 	br	8111e1d0 <__reset+0xfb0fe1d0>
8111e230:	00800884 	movi	r2,34
8111e234:	a0800015 	stw	r2,0(r20)
8111e238:	00bfffc4 	movi	r2,-1
8111e23c:	303fec26 	beq	r6,zero,8111e1f0 <__reset+0xfb0fe1f0>
8111e240:	24ffffc4 	addi	r19,r4,-1
8111e244:	003fe906 	br	8111e1ec <__reset+0xfb0fe1ec>
8111e248:	1c400084 	addi	r17,r3,2
8111e24c:	1c000043 	ldbu	r16,1(r3)
8111e250:	05c00044 	movi	r23,1
8111e254:	003fac06 	br	8111e108 <__reset+0xfb0fe108>
8111e258:	1c400084 	addi	r17,r3,2
8111e25c:	1c000043 	ldbu	r16,1(r3)
8111e260:	002f883a 	mov	r23,zero
8111e264:	003fa806 	br	8111e108 <__reset+0xfb0fe108>
8111e268:	88800003 	ldbu	r2,0(r17)
8111e26c:	00c01604 	movi	r3,88
8111e270:	108037cc 	andi	r2,r2,223
8111e274:	10c00c26 	beq	r2,r3,8111e2a8 <_strtoul_r+0x220>
8111e278:	05400204 	movi	r21,8
8111e27c:	01c80034 	movhi	r7,8192
8111e280:	030001c4 	movi	r12,7
8111e284:	39ffffc4 	addi	r7,r7,-1
8111e288:	a817883a 	mov	r11,r21
8111e28c:	003fb506 	br	8111e164 <__reset+0xfb0fe164>
8111e290:	00800c04 	movi	r2,48
8111e294:	80800c1e 	bne	r16,r2,8111e2c8 <_strtoul_r+0x240>
8111e298:	88800003 	ldbu	r2,0(r17)
8111e29c:	00c01604 	movi	r3,88
8111e2a0:	108037cc 	andi	r2,r2,223
8111e2a4:	10c0081e 	bne	r2,r3,8111e2c8 <_strtoul_r+0x240>
8111e2a8:	02c00404 	movi	r11,16
8111e2ac:	05840034 	movhi	r22,4096
8111e2b0:	8c000043 	ldbu	r16,1(r17)
8111e2b4:	030003c4 	movi	r12,15
8111e2b8:	8c400084 	addi	r17,r17,2
8111e2bc:	b5bfffc4 	addi	r22,r22,-1
8111e2c0:	582b883a 	mov	r21,r11
8111e2c4:	003f9e06 	br	8111e140 <__reset+0xfb0fe140>
8111e2c8:	01c40034 	movhi	r7,4096
8111e2cc:	030003c4 	movi	r12,15
8111e2d0:	39ffffc4 	addi	r7,r7,-1
8111e2d4:	a817883a 	mov	r11,r21
8111e2d8:	003fa206 	br	8111e164 <__reset+0xfb0fe164>

8111e2dc <strtoul>:
8111e2dc:	00a04534 	movhi	r2,33044
8111e2e0:	10ba2704 	addi	r2,r2,-5988
8111e2e4:	300f883a 	mov	r7,r6
8111e2e8:	280d883a 	mov	r6,r5
8111e2ec:	200b883a 	mov	r5,r4
8111e2f0:	11000017 	ldw	r4,0(r2)
8111e2f4:	111e0881 	jmpi	8111e088 <_strtoul_r>

8111e2f8 <_strtoull_r>:
8111e2f8:	00a04534 	movhi	r2,33044
8111e2fc:	defff404 	addi	sp,sp,-48
8111e300:	10ba2504 	addi	r2,r2,-5996
8111e304:	de00012e 	bgeu	sp,et,8111e30c <_strtoull_r+0x14>
8111e308:	003b68fa 	trap	3
8111e30c:	dc400315 	stw	r17,12(sp)
8111e310:	14400017 	ldw	r17,0(r2)
8111e314:	dd400715 	stw	r21,28(sp)
8111e318:	dd000615 	stw	r20,24(sp)
8111e31c:	dcc00515 	stw	r19,20(sp)
8111e320:	dc800415 	stw	r18,16(sp)
8111e324:	dfc00b15 	stw	ra,44(sp)
8111e328:	df000a15 	stw	fp,40(sp)
8111e32c:	ddc00915 	stw	r23,36(sp)
8111e330:	dd800815 	stw	r22,32(sp)
8111e334:	dc000215 	stw	r16,8(sp)
8111e338:	2827883a 	mov	r19,r5
8111e33c:	202b883a 	mov	r21,r4
8111e340:	3029883a 	mov	r20,r6
8111e344:	3825883a 	mov	r18,r7
8111e348:	2807883a 	mov	r3,r5
8111e34c:	1c000003 	ldbu	r16,0(r3)
8111e350:	1f000044 	addi	fp,r3,1
8111e354:	1809883a 	mov	r4,r3
8111e358:	8c05883a 	add	r2,r17,r16
8111e35c:	10800043 	ldbu	r2,1(r2)
8111e360:	e007883a 	mov	r3,fp
8111e364:	1080020c 	andi	r2,r2,8
8111e368:	103ff81e 	bne	r2,zero,8111e34c <__reset+0xfb0fe34c>
8111e36c:	00800b44 	movi	r2,45
8111e370:	80806e26 	beq	r16,r2,8111e52c <_strtoull_r+0x234>
8111e374:	00800ac4 	movi	r2,43
8111e378:	80807026 	beq	r16,r2,8111e53c <_strtoull_r+0x244>
8111e37c:	002f883a 	mov	r23,zero
8111e380:	90001426 	beq	r18,zero,8111e3d4 <_strtoull_r+0xdc>
8111e384:	00800404 	movi	r2,16
8111e388:	90807c26 	beq	r18,r2,8111e57c <_strtoull_r+0x284>
8111e38c:	902dd7fa 	srai	r22,r18,31
8111e390:	013fffc4 	movi	r4,-1
8111e394:	200b883a 	mov	r5,r4
8111e398:	900d883a 	mov	r6,r18
8111e39c:	b00f883a 	mov	r7,r22
8111e3a0:	112271c0 	call	8112271c <__udivdi3>
8111e3a4:	013fffc4 	movi	r4,-1
8111e3a8:	900d883a 	mov	r6,r18
8111e3ac:	b00f883a 	mov	r7,r22
8111e3b0:	200b883a 	mov	r5,r4
8111e3b4:	d8c00115 	stw	r3,4(sp)
8111e3b8:	d8800015 	stw	r2,0(sp)
8111e3bc:	1122c9c0 	call	81122c9c <__umoddi3>
8111e3c0:	101b883a 	mov	r13,r2
8111e3c4:	9015883a 	mov	r10,r18
8111e3c8:	dac00017 	ldw	r11,0(sp)
8111e3cc:	da000117 	ldw	r8,4(sp)
8111e3d0:	00000a06 	br	8111e3fc <_strtoull_r+0x104>
8111e3d4:	00800c04 	movi	r2,48
8111e3d8:	80805c26 	beq	r16,r2,8111e54c <_strtoull_r+0x254>
8111e3dc:	02800284 	movi	r10,10
8111e3e0:	02e666b4 	movhi	r11,39322
8111e3e4:	020666b4 	movhi	r8,6554
8111e3e8:	03400144 	movi	r13,5
8111e3ec:	5ae66644 	addi	r11,r11,-26215
8111e3f0:	42266644 	addi	r8,r8,-26215
8111e3f4:	002d883a 	mov	r22,zero
8111e3f8:	5025883a 	mov	r18,r10
8111e3fc:	8c0b883a 	add	r5,r17,r16
8111e400:	29400043 	ldbu	r5,1(r5)
8111e404:	e009883a 	mov	r4,fp
8111e408:	000f883a 	mov	r7,zero
8111e40c:	2980010c 	andi	r6,r5,4
8111e410:	0005883a 	mov	r2,zero
8111e414:	0007883a 	mov	r3,zero
8111e418:	03000044 	movi	r12,1
8111e41c:	027fffc4 	movi	r9,-1
8111e420:	30000d26 	beq	r6,zero,8111e458 <_strtoull_r+0x160>
8111e424:	843ff404 	addi	r16,r16,-48
8111e428:	8480110e 	bge	r16,r18,8111e470 <_strtoull_r+0x178>
8111e42c:	3a400426 	beq	r7,r9,8111e440 <_strtoull_r+0x148>
8111e430:	40c00236 	bltu	r8,r3,8111e43c <_strtoull_r+0x144>
8111e434:	1a00231e 	bne	r3,r8,8111e4c4 <_strtoull_r+0x1cc>
8111e438:	5880222e 	bgeu	r11,r2,8111e4c4 <_strtoull_r+0x1cc>
8111e43c:	01ffffc4 	movi	r7,-1
8111e440:	24000003 	ldbu	r16,0(r4)
8111e444:	21000044 	addi	r4,r4,1
8111e448:	8c0b883a 	add	r5,r17,r16
8111e44c:	29400043 	ldbu	r5,1(r5)
8111e450:	2980010c 	andi	r6,r5,4
8111e454:	303ff31e 	bne	r6,zero,8111e424 <__reset+0xfb0fe424>
8111e458:	294000cc 	andi	r5,r5,3
8111e45c:	28000426 	beq	r5,zero,8111e470 <_strtoull_r+0x178>
8111e460:	2b002626 	beq	r5,r12,8111e4fc <_strtoull_r+0x204>
8111e464:	014015c4 	movi	r5,87
8111e468:	8161c83a 	sub	r16,r16,r5
8111e46c:	84bfef16 	blt	r16,r18,8111e42c <__reset+0xfb0fe42c>
8111e470:	38002716 	blt	r7,zero,8111e510 <_strtoull_r+0x218>
8111e474:	b8000426 	beq	r23,zero,8111e488 <_strtoull_r+0x190>
8111e478:	0085c83a 	sub	r2,zero,r2
8111e47c:	100ac03a 	cmpne	r5,r2,zero
8111e480:	00e1c83a 	sub	r16,zero,r3
8111e484:	8147c83a 	sub	r3,r16,r5
8111e488:	a0000226 	beq	r20,zero,8111e494 <_strtoull_r+0x19c>
8111e48c:	3800251e 	bne	r7,zero,8111e524 <_strtoull_r+0x22c>
8111e490:	a4c00015 	stw	r19,0(r20)
8111e494:	dfc00b17 	ldw	ra,44(sp)
8111e498:	df000a17 	ldw	fp,40(sp)
8111e49c:	ddc00917 	ldw	r23,36(sp)
8111e4a0:	dd800817 	ldw	r22,32(sp)
8111e4a4:	dd400717 	ldw	r21,28(sp)
8111e4a8:	dd000617 	ldw	r20,24(sp)
8111e4ac:	dcc00517 	ldw	r19,20(sp)
8111e4b0:	dc800417 	ldw	r18,16(sp)
8111e4b4:	dc400317 	ldw	r17,12(sp)
8111e4b8:	dc000217 	ldw	r16,8(sp)
8111e4bc:	dec00c04 	addi	sp,sp,48
8111e4c0:	f800283a 	ret
8111e4c4:	12c00f26 	beq	r2,r11,8111e504 <_strtoull_r+0x20c>
8111e4c8:	b08d383a 	mul	r6,r22,r2
8111e4cc:	1a87383a 	mul	r3,r3,r10
8111e4d0:	128a383a 	mulxuu	r5,r2,r10
8111e4d4:	1285383a 	mul	r2,r2,r10
8111e4d8:	800fd7fa 	srai	r7,r16,31
8111e4dc:	1987883a 	add	r3,r3,r6
8111e4e0:	8085883a 	add	r2,r16,r2
8111e4e4:	1947883a 	add	r3,r3,r5
8111e4e8:	38c7883a 	add	r3,r7,r3
8111e4ec:	1421803a 	cmpltu	r16,r2,r16
8111e4f0:	80c7883a 	add	r3,r16,r3
8111e4f4:	01c00044 	movi	r7,1
8111e4f8:	003fd106 	br	8111e440 <__reset+0xfb0fe440>
8111e4fc:	01400dc4 	movi	r5,55
8111e500:	003fd906 	br	8111e468 <__reset+0xfb0fe468>
8111e504:	1a3ff01e 	bne	r3,r8,8111e4c8 <__reset+0xfb0fe4c8>
8111e508:	6c3fcc16 	blt	r13,r16,8111e43c <__reset+0xfb0fe43c>
8111e50c:	003fee06 	br	8111e4c8 <__reset+0xfb0fe4c8>
8111e510:	00800884 	movi	r2,34
8111e514:	a8800015 	stw	r2,0(r21)
8111e518:	00bfffc4 	movi	r2,-1
8111e51c:	1007883a 	mov	r3,r2
8111e520:	a03fdc26 	beq	r20,zero,8111e494 <__reset+0xfb0fe494>
8111e524:	24ffffc4 	addi	r19,r4,-1
8111e528:	003fd906 	br	8111e490 <__reset+0xfb0fe490>
8111e52c:	27000084 	addi	fp,r4,2
8111e530:	24000043 	ldbu	r16,1(r4)
8111e534:	05c00044 	movi	r23,1
8111e538:	003f9106 	br	8111e380 <__reset+0xfb0fe380>
8111e53c:	27000084 	addi	fp,r4,2
8111e540:	24000043 	ldbu	r16,1(r4)
8111e544:	002f883a 	mov	r23,zero
8111e548:	003f8d06 	br	8111e380 <__reset+0xfb0fe380>
8111e54c:	e0800003 	ldbu	r2,0(fp)
8111e550:	00c01604 	movi	r3,88
8111e554:	108037cc 	andi	r2,r2,223
8111e558:	10c00e26 	beq	r2,r3,8111e594 <_strtoull_r+0x29c>
8111e55c:	02800204 	movi	r10,8
8111e560:	02ffffc4 	movi	r11,-1
8111e564:	02080034 	movhi	r8,8192
8111e568:	034001c4 	movi	r13,7
8111e56c:	42d1883a 	add	r8,r8,r11
8111e570:	002d883a 	mov	r22,zero
8111e574:	5025883a 	mov	r18,r10
8111e578:	003fa006 	br	8111e3fc <__reset+0xfb0fe3fc>
8111e57c:	00800c04 	movi	r2,48
8111e580:	80800e1e 	bne	r16,r2,8111e5bc <_strtoull_r+0x2c4>
8111e584:	e0800003 	ldbu	r2,0(fp)
8111e588:	00c01604 	movi	r3,88
8111e58c:	108037cc 	andi	r2,r2,223
8111e590:	10c00a1e 	bne	r2,r3,8111e5bc <_strtoull_r+0x2c4>
8111e594:	02800404 	movi	r10,16
8111e598:	02ffffc4 	movi	r11,-1
8111e59c:	02040034 	movhi	r8,4096
8111e5a0:	e4000043 	ldbu	r16,1(fp)
8111e5a4:	034003c4 	movi	r13,15
8111e5a8:	e7000084 	addi	fp,fp,2
8111e5ac:	42d1883a 	add	r8,r8,r11
8111e5b0:	002d883a 	mov	r22,zero
8111e5b4:	5025883a 	mov	r18,r10
8111e5b8:	003f9006 	br	8111e3fc <__reset+0xfb0fe3fc>
8111e5bc:	02ffffc4 	movi	r11,-1
8111e5c0:	02040034 	movhi	r8,4096
8111e5c4:	034003c4 	movi	r13,15
8111e5c8:	42d1883a 	add	r8,r8,r11
8111e5cc:	9015883a 	mov	r10,r18
8111e5d0:	002d883a 	mov	r22,zero
8111e5d4:	003f8906 	br	8111e3fc <__reset+0xfb0fe3fc>

8111e5d8 <__ssprint_r>:
8111e5d8:	defff604 	addi	sp,sp,-40
8111e5dc:	de00012e 	bgeu	sp,et,8111e5e4 <__ssprint_r+0xc>
8111e5e0:	003b68fa 	trap	3
8111e5e4:	30800217 	ldw	r2,8(r6)
8111e5e8:	dc800215 	stw	r18,8(sp)
8111e5ec:	dfc00915 	stw	ra,36(sp)
8111e5f0:	df000815 	stw	fp,32(sp)
8111e5f4:	ddc00715 	stw	r23,28(sp)
8111e5f8:	dd800615 	stw	r22,24(sp)
8111e5fc:	dd400515 	stw	r21,20(sp)
8111e600:	dd000415 	stw	r20,16(sp)
8111e604:	dcc00315 	stw	r19,12(sp)
8111e608:	dc400115 	stw	r17,4(sp)
8111e60c:	dc000015 	stw	r16,0(sp)
8111e610:	3025883a 	mov	r18,r6
8111e614:	10005826 	beq	r2,zero,8111e778 <__ssprint_r+0x1a0>
8111e618:	2027883a 	mov	r19,r4
8111e61c:	35c00017 	ldw	r23,0(r6)
8111e620:	29000017 	ldw	r4,0(r5)
8111e624:	28800217 	ldw	r2,8(r5)
8111e628:	2823883a 	mov	r17,r5
8111e62c:	0039883a 	mov	fp,zero
8111e630:	0021883a 	mov	r16,zero
8111e634:	80003926 	beq	r16,zero,8111e71c <__ssprint_r+0x144>
8111e638:	102b883a 	mov	r21,r2
8111e63c:	102d883a 	mov	r22,r2
8111e640:	80803a36 	bltu	r16,r2,8111e72c <__ssprint_r+0x154>
8111e644:	88c0030b 	ldhu	r3,12(r17)
8111e648:	1881200c 	andi	r2,r3,1152
8111e64c:	10002626 	beq	r2,zero,8111e6e8 <__ssprint_r+0x110>
8111e650:	88800517 	ldw	r2,20(r17)
8111e654:	89400417 	ldw	r5,16(r17)
8111e658:	81800044 	addi	r6,r16,1
8111e65c:	108f883a 	add	r7,r2,r2
8111e660:	3885883a 	add	r2,r7,r2
8111e664:	100ed7fa 	srli	r7,r2,31
8111e668:	216dc83a 	sub	r22,r4,r5
8111e66c:	3589883a 	add	r4,r6,r22
8111e670:	3885883a 	add	r2,r7,r2
8111e674:	102bd07a 	srai	r21,r2,1
8111e678:	a80d883a 	mov	r6,r21
8111e67c:	a900022e 	bgeu	r21,r4,8111e688 <__ssprint_r+0xb0>
8111e680:	202b883a 	mov	r21,r4
8111e684:	200d883a 	mov	r6,r4
8111e688:	18c1000c 	andi	r3,r3,1024
8111e68c:	18002a26 	beq	r3,zero,8111e738 <__ssprint_r+0x160>
8111e690:	300b883a 	mov	r5,r6
8111e694:	9809883a 	mov	r4,r19
8111e698:	11106940 	call	81110694 <_malloc_r>
8111e69c:	1029883a 	mov	r20,r2
8111e6a0:	10002c26 	beq	r2,zero,8111e754 <__ssprint_r+0x17c>
8111e6a4:	89400417 	ldw	r5,16(r17)
8111e6a8:	b00d883a 	mov	r6,r22
8111e6ac:	1009883a 	mov	r4,r2
8111e6b0:	1110ea80 	call	81110ea8 <memcpy>
8111e6b4:	8880030b 	ldhu	r2,12(r17)
8111e6b8:	00fedfc4 	movi	r3,-1153
8111e6bc:	10c4703a 	and	r2,r2,r3
8111e6c0:	10802014 	ori	r2,r2,128
8111e6c4:	8880030d 	sth	r2,12(r17)
8111e6c8:	a589883a 	add	r4,r20,r22
8111e6cc:	adadc83a 	sub	r22,r21,r22
8111e6d0:	8d400515 	stw	r21,20(r17)
8111e6d4:	8d800215 	stw	r22,8(r17)
8111e6d8:	8d000415 	stw	r20,16(r17)
8111e6dc:	89000015 	stw	r4,0(r17)
8111e6e0:	802b883a 	mov	r21,r16
8111e6e4:	802d883a 	mov	r22,r16
8111e6e8:	b00d883a 	mov	r6,r22
8111e6ec:	e00b883a 	mov	r5,fp
8111e6f0:	111ac600 	call	8111ac60 <memmove>
8111e6f4:	88800217 	ldw	r2,8(r17)
8111e6f8:	89000017 	ldw	r4,0(r17)
8111e6fc:	90c00217 	ldw	r3,8(r18)
8111e700:	1545c83a 	sub	r2,r2,r21
8111e704:	2589883a 	add	r4,r4,r22
8111e708:	88800215 	stw	r2,8(r17)
8111e70c:	89000015 	stw	r4,0(r17)
8111e710:	1c21c83a 	sub	r16,r3,r16
8111e714:	94000215 	stw	r16,8(r18)
8111e718:	80001726 	beq	r16,zero,8111e778 <__ssprint_r+0x1a0>
8111e71c:	bf000017 	ldw	fp,0(r23)
8111e720:	bc000117 	ldw	r16,4(r23)
8111e724:	bdc00204 	addi	r23,r23,8
8111e728:	003fc206 	br	8111e634 <__reset+0xfb0fe634>
8111e72c:	802b883a 	mov	r21,r16
8111e730:	802d883a 	mov	r22,r16
8111e734:	003fec06 	br	8111e6e8 <__reset+0xfb0fe6e8>
8111e738:	9809883a 	mov	r4,r19
8111e73c:	111be800 	call	8111be80 <_realloc_r>
8111e740:	1029883a 	mov	r20,r2
8111e744:	103fe01e 	bne	r2,zero,8111e6c8 <__reset+0xfb0fe6c8>
8111e748:	89400417 	ldw	r5,16(r17)
8111e74c:	9809883a 	mov	r4,r19
8111e750:	1119dec0 	call	81119dec <_free_r>
8111e754:	88c0030b 	ldhu	r3,12(r17)
8111e758:	00800304 	movi	r2,12
8111e75c:	98800015 	stw	r2,0(r19)
8111e760:	18c01014 	ori	r3,r3,64
8111e764:	88c0030d 	sth	r3,12(r17)
8111e768:	00bfffc4 	movi	r2,-1
8111e76c:	90000215 	stw	zero,8(r18)
8111e770:	90000115 	stw	zero,4(r18)
8111e774:	00000206 	br	8111e780 <__ssprint_r+0x1a8>
8111e778:	90000115 	stw	zero,4(r18)
8111e77c:	0005883a 	mov	r2,zero
8111e780:	dfc00917 	ldw	ra,36(sp)
8111e784:	df000817 	ldw	fp,32(sp)
8111e788:	ddc00717 	ldw	r23,28(sp)
8111e78c:	dd800617 	ldw	r22,24(sp)
8111e790:	dd400517 	ldw	r21,20(sp)
8111e794:	dd000417 	ldw	r20,16(sp)
8111e798:	dcc00317 	ldw	r19,12(sp)
8111e79c:	dc800217 	ldw	r18,8(sp)
8111e7a0:	dc400117 	ldw	r17,4(sp)
8111e7a4:	dc000017 	ldw	r16,0(sp)
8111e7a8:	dec00a04 	addi	sp,sp,40
8111e7ac:	f800283a 	ret

8111e7b0 <___svfiprintf_internal_r>:
8111e7b0:	deffc804 	addi	sp,sp,-224
8111e7b4:	de00012e 	bgeu	sp,et,8111e7bc <___svfiprintf_internal_r+0xc>
8111e7b8:	003b68fa 	trap	3
8111e7bc:	2880030b 	ldhu	r2,12(r5)
8111e7c0:	dcc03115 	stw	r19,196(sp)
8111e7c4:	dfc03715 	stw	ra,220(sp)
8111e7c8:	df003615 	stw	fp,216(sp)
8111e7cc:	ddc03515 	stw	r23,212(sp)
8111e7d0:	dd803415 	stw	r22,208(sp)
8111e7d4:	dd403315 	stw	r21,204(sp)
8111e7d8:	dd003215 	stw	r20,200(sp)
8111e7dc:	dc803015 	stw	r18,192(sp)
8111e7e0:	dc402f15 	stw	r17,188(sp)
8111e7e4:	dc002e15 	stw	r16,184(sp)
8111e7e8:	d9402715 	stw	r5,156(sp)
8111e7ec:	d9002a15 	stw	r4,168(sp)
8111e7f0:	1080200c 	andi	r2,r2,128
8111e7f4:	d9c02315 	stw	r7,140(sp)
8111e7f8:	3027883a 	mov	r19,r6
8111e7fc:	10000226 	beq	r2,zero,8111e808 <___svfiprintf_internal_r+0x58>
8111e800:	28800417 	ldw	r2,16(r5)
8111e804:	10041d26 	beq	r2,zero,8111f87c <___svfiprintf_internal_r+0x10cc>
8111e808:	dac01a04 	addi	r11,sp,104
8111e80c:	dac01e15 	stw	r11,120(sp)
8111e810:	d8801e17 	ldw	r2,120(sp)
8111e814:	dac019c4 	addi	r11,sp,103
8111e818:	dd402a17 	ldw	r21,168(sp)
8111e81c:	ddc02717 	ldw	r23,156(sp)
8111e820:	05a04534 	movhi	r22,33044
8111e824:	05204534 	movhi	r20,33044
8111e828:	dac01f15 	stw	r11,124(sp)
8111e82c:	12d7c83a 	sub	r11,r2,r11
8111e830:	b5b1b404 	addi	r22,r22,-14640
8111e834:	a531b004 	addi	r20,r20,-14656
8111e838:	dec01a15 	stw	sp,104(sp)
8111e83c:	d8001c15 	stw	zero,112(sp)
8111e840:	d8001b15 	stw	zero,108(sp)
8111e844:	d811883a 	mov	r8,sp
8111e848:	d8002915 	stw	zero,164(sp)
8111e84c:	d8002515 	stw	zero,148(sp)
8111e850:	dac02b15 	stw	r11,172(sp)
8111e854:	98800007 	ldb	r2,0(r19)
8111e858:	1002dd26 	beq	r2,zero,8111f3d0 <___svfiprintf_internal_r+0xc20>
8111e85c:	00c00944 	movi	r3,37
8111e860:	9823883a 	mov	r17,r19
8111e864:	10c0021e 	bne	r2,r3,8111e870 <___svfiprintf_internal_r+0xc0>
8111e868:	00001406 	br	8111e8bc <___svfiprintf_internal_r+0x10c>
8111e86c:	10c00326 	beq	r2,r3,8111e87c <___svfiprintf_internal_r+0xcc>
8111e870:	8c400044 	addi	r17,r17,1
8111e874:	88800007 	ldb	r2,0(r17)
8111e878:	103ffc1e 	bne	r2,zero,8111e86c <__reset+0xfb0fe86c>
8111e87c:	8ce1c83a 	sub	r16,r17,r19
8111e880:	80000e26 	beq	r16,zero,8111e8bc <___svfiprintf_internal_r+0x10c>
8111e884:	d8c01c17 	ldw	r3,112(sp)
8111e888:	d8801b17 	ldw	r2,108(sp)
8111e88c:	44c00015 	stw	r19,0(r8)
8111e890:	1c07883a 	add	r3,r3,r16
8111e894:	10800044 	addi	r2,r2,1
8111e898:	d8c01c15 	stw	r3,112(sp)
8111e89c:	44000115 	stw	r16,4(r8)
8111e8a0:	d8801b15 	stw	r2,108(sp)
8111e8a4:	00c001c4 	movi	r3,7
8111e8a8:	18831e16 	blt	r3,r2,8111f524 <___svfiprintf_internal_r+0xd74>
8111e8ac:	42000204 	addi	r8,r8,8
8111e8b0:	dac02517 	ldw	r11,148(sp)
8111e8b4:	5c17883a 	add	r11,r11,r16
8111e8b8:	dac02515 	stw	r11,148(sp)
8111e8bc:	88800007 	ldb	r2,0(r17)
8111e8c0:	1002c526 	beq	r2,zero,8111f3d8 <___svfiprintf_internal_r+0xc28>
8111e8c4:	88c00047 	ldb	r3,1(r17)
8111e8c8:	8cc00044 	addi	r19,r17,1
8111e8cc:	d8001d85 	stb	zero,118(sp)
8111e8d0:	0009883a 	mov	r4,zero
8111e8d4:	000f883a 	mov	r7,zero
8111e8d8:	043fffc4 	movi	r16,-1
8111e8dc:	d8002415 	stw	zero,144(sp)
8111e8e0:	0025883a 	mov	r18,zero
8111e8e4:	01401604 	movi	r5,88
8111e8e8:	01800244 	movi	r6,9
8111e8ec:	02800a84 	movi	r10,42
8111e8f0:	02401b04 	movi	r9,108
8111e8f4:	9cc00044 	addi	r19,r19,1
8111e8f8:	18bff804 	addi	r2,r3,-32
8111e8fc:	2881dd36 	bltu	r5,r2,8111f074 <___svfiprintf_internal_r+0x8c4>
8111e900:	100490ba 	slli	r2,r2,2
8111e904:	02e044b4 	movhi	r11,33042
8111e908:	5afa4604 	addi	r11,r11,-5864
8111e90c:	12c5883a 	add	r2,r2,r11
8111e910:	10800017 	ldw	r2,0(r2)
8111e914:	1000683a 	jmp	r2
8111e918:	8111eb14 	ori	r4,r16,18348
8111e91c:	8111f074 	orhi	r4,r16,18369
8111e920:	8111f074 	orhi	r4,r16,18369
8111e924:	8111eb08 	cmpgei	r4,r16,18348
8111e928:	8111f074 	orhi	r4,r16,18369
8111e92c:	8111f074 	orhi	r4,r16,18369
8111e930:	8111f074 	orhi	r4,r16,18369
8111e934:	8111f074 	orhi	r4,r16,18369
8111e938:	8111f074 	orhi	r4,r16,18369
8111e93c:	8111f074 	orhi	r4,r16,18369
8111e940:	8111ea7c 	xorhi	r4,r16,18345
8111e944:	8111ec58 	cmpnei	r4,r16,18353
8111e948:	8111f074 	orhi	r4,r16,18369
8111e94c:	8111eaa8 	cmpgeui	r4,r16,18346
8111e950:	8111f0a8 	cmpgeui	r4,r16,18370
8111e954:	8111f074 	orhi	r4,r16,18369
8111e958:	8111f09c 	xori	r4,r16,18370
8111e95c:	8111f03c 	xorhi	r4,r16,18368
8111e960:	8111f03c 	xorhi	r4,r16,18368
8111e964:	8111f03c 	xorhi	r4,r16,18368
8111e968:	8111f03c 	xorhi	r4,r16,18368
8111e96c:	8111f03c 	xorhi	r4,r16,18368
8111e970:	8111f03c 	xorhi	r4,r16,18368
8111e974:	8111f03c 	xorhi	r4,r16,18368
8111e978:	8111f03c 	xorhi	r4,r16,18368
8111e97c:	8111f03c 	xorhi	r4,r16,18368
8111e980:	8111f074 	orhi	r4,r16,18369
8111e984:	8111f074 	orhi	r4,r16,18369
8111e988:	8111f074 	orhi	r4,r16,18369
8111e98c:	8111f074 	orhi	r4,r16,18369
8111e990:	8111f074 	orhi	r4,r16,18369
8111e994:	8111f074 	orhi	r4,r16,18369
8111e998:	8111f074 	orhi	r4,r16,18369
8111e99c:	8111f074 	orhi	r4,r16,18369
8111e9a0:	8111f074 	orhi	r4,r16,18369
8111e9a4:	8111f074 	orhi	r4,r16,18369
8111e9a8:	8111efd8 	cmpnei	r4,r16,18367
8111e9ac:	8111f074 	orhi	r4,r16,18369
8111e9b0:	8111f074 	orhi	r4,r16,18369
8111e9b4:	8111f074 	orhi	r4,r16,18369
8111e9b8:	8111f074 	orhi	r4,r16,18369
8111e9bc:	8111f074 	orhi	r4,r16,18369
8111e9c0:	8111f074 	orhi	r4,r16,18369
8111e9c4:	8111f074 	orhi	r4,r16,18369
8111e9c8:	8111f074 	orhi	r4,r16,18369
8111e9cc:	8111f074 	orhi	r4,r16,18369
8111e9d0:	8111f074 	orhi	r4,r16,18369
8111e9d4:	8111f150 	cmplti	r4,r16,18373
8111e9d8:	8111f074 	orhi	r4,r16,18369
8111e9dc:	8111f074 	orhi	r4,r16,18369
8111e9e0:	8111f074 	orhi	r4,r16,18369
8111e9e4:	8111f074 	orhi	r4,r16,18369
8111e9e8:	8111f074 	orhi	r4,r16,18369
8111e9ec:	8111f0e8 	cmpgeui	r4,r16,18371
8111e9f0:	8111f074 	orhi	r4,r16,18369
8111e9f4:	8111f074 	orhi	r4,r16,18369
8111e9f8:	8111ee1c 	xori	r4,r16,18360
8111e9fc:	8111f074 	orhi	r4,r16,18369
8111ea00:	8111f074 	orhi	r4,r16,18369
8111ea04:	8111f074 	orhi	r4,r16,18369
8111ea08:	8111f074 	orhi	r4,r16,18369
8111ea0c:	8111f074 	orhi	r4,r16,18369
8111ea10:	8111f074 	orhi	r4,r16,18369
8111ea14:	8111f074 	orhi	r4,r16,18369
8111ea18:	8111f074 	orhi	r4,r16,18369
8111ea1c:	8111f074 	orhi	r4,r16,18369
8111ea20:	8111f074 	orhi	r4,r16,18369
8111ea24:	8111ed0c 	andi	r4,r16,18356
8111ea28:	8111eeb8 	rdprs	r4,r16,18362
8111ea2c:	8111f074 	orhi	r4,r16,18369
8111ea30:	8111f074 	orhi	r4,r16,18369
8111ea34:	8111f074 	orhi	r4,r16,18369
8111ea38:	8111eeac 	andhi	r4,r16,18362
8111ea3c:	8111eeb8 	rdprs	r4,r16,18362
8111ea40:	8111f074 	orhi	r4,r16,18369
8111ea44:	8111f074 	orhi	r4,r16,18369
8111ea48:	8111ee9c 	xori	r4,r16,18362
8111ea4c:	8111f074 	orhi	r4,r16,18369
8111ea50:	8111ee60 	cmpeqi	r4,r16,18361
8111ea54:	8111ec68 	cmpgeui	r4,r16,18353
8111ea58:	8111eab4 	orhi	r4,r16,18346
8111ea5c:	8111efcc 	andi	r4,r16,18367
8111ea60:	8111f074 	orhi	r4,r16,18369
8111ea64:	8111ef80 	call	88111ef8 <__reset+0x20f1ef8>
8111ea68:	8111f074 	orhi	r4,r16,18369
8111ea6c:	8111ebd8 	cmpnei	r4,r16,18351
8111ea70:	8111f074 	orhi	r4,r16,18369
8111ea74:	8111f074 	orhi	r4,r16,18369
8111ea78:	8111eb34 	orhi	r4,r16,18348
8111ea7c:	dac02317 	ldw	r11,140(sp)
8111ea80:	5ac00017 	ldw	r11,0(r11)
8111ea84:	dac02415 	stw	r11,144(sp)
8111ea88:	dac02317 	ldw	r11,140(sp)
8111ea8c:	58800104 	addi	r2,r11,4
8111ea90:	dac02417 	ldw	r11,144(sp)
8111ea94:	5802e90e 	bge	r11,zero,8111f63c <___svfiprintf_internal_r+0xe8c>
8111ea98:	dac02417 	ldw	r11,144(sp)
8111ea9c:	d8802315 	stw	r2,140(sp)
8111eaa0:	02d7c83a 	sub	r11,zero,r11
8111eaa4:	dac02415 	stw	r11,144(sp)
8111eaa8:	94800114 	ori	r18,r18,4
8111eaac:	98c00007 	ldb	r3,0(r19)
8111eab0:	003f9006 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111eab4:	00800c04 	movi	r2,48
8111eab8:	dac02317 	ldw	r11,140(sp)
8111eabc:	d8801d05 	stb	r2,116(sp)
8111eac0:	00801e04 	movi	r2,120
8111eac4:	d8801d45 	stb	r2,117(sp)
8111eac8:	d8001d85 	stb	zero,118(sp)
8111eacc:	58c00104 	addi	r3,r11,4
8111ead0:	5f000017 	ldw	fp,0(r11)
8111ead4:	0013883a 	mov	r9,zero
8111ead8:	90800094 	ori	r2,r18,2
8111eadc:	80032b16 	blt	r16,zero,8111f78c <___svfiprintf_internal_r+0xfdc>
8111eae0:	00bfdfc4 	movi	r2,-129
8111eae4:	90a4703a 	and	r18,r18,r2
8111eae8:	d8c02315 	stw	r3,140(sp)
8111eaec:	94800094 	ori	r18,r18,2
8111eaf0:	e002dc26 	beq	fp,zero,8111f664 <___svfiprintf_internal_r+0xeb4>
8111eaf4:	01204534 	movhi	r4,33044
8111eaf8:	21312604 	addi	r4,r4,-15208
8111eafc:	0015883a 	mov	r10,zero
8111eb00:	d9002915 	stw	r4,164(sp)
8111eb04:	00002306 	br	8111eb94 <___svfiprintf_internal_r+0x3e4>
8111eb08:	94800054 	ori	r18,r18,1
8111eb0c:	98c00007 	ldb	r3,0(r19)
8111eb10:	003f7806 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111eb14:	38803fcc 	andi	r2,r7,255
8111eb18:	1080201c 	xori	r2,r2,128
8111eb1c:	10bfe004 	addi	r2,r2,-128
8111eb20:	1002f31e 	bne	r2,zero,8111f6f0 <___svfiprintf_internal_r+0xf40>
8111eb24:	01000044 	movi	r4,1
8111eb28:	01c00804 	movi	r7,32
8111eb2c:	98c00007 	ldb	r3,0(r19)
8111eb30:	003f7006 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111eb34:	21003fcc 	andi	r4,r4,255
8111eb38:	2003aa1e 	bne	r4,zero,8111f9e4 <___svfiprintf_internal_r+0x1234>
8111eb3c:	00a04534 	movhi	r2,33044
8111eb40:	10b12604 	addi	r2,r2,-15208
8111eb44:	d8802915 	stw	r2,164(sp)
8111eb48:	9080080c 	andi	r2,r18,32
8111eb4c:	1000ba26 	beq	r2,zero,8111ee38 <___svfiprintf_internal_r+0x688>
8111eb50:	dac02317 	ldw	r11,140(sp)
8111eb54:	5f000017 	ldw	fp,0(r11)
8111eb58:	5a400117 	ldw	r9,4(r11)
8111eb5c:	5ac00204 	addi	r11,r11,8
8111eb60:	dac02315 	stw	r11,140(sp)
8111eb64:	9080004c 	andi	r2,r18,1
8111eb68:	10029026 	beq	r2,zero,8111f5ac <___svfiprintf_internal_r+0xdfc>
8111eb6c:	e244b03a 	or	r2,fp,r9
8111eb70:	1002d41e 	bne	r2,zero,8111f6c4 <___svfiprintf_internal_r+0xf14>
8111eb74:	d8001d85 	stb	zero,118(sp)
8111eb78:	80030b16 	blt	r16,zero,8111f7a8 <___svfiprintf_internal_r+0xff8>
8111eb7c:	00bfdfc4 	movi	r2,-129
8111eb80:	90a4703a 	and	r18,r18,r2
8111eb84:	0015883a 	mov	r10,zero
8111eb88:	80002426 	beq	r16,zero,8111ec1c <___svfiprintf_internal_r+0x46c>
8111eb8c:	0039883a 	mov	fp,zero
8111eb90:	0013883a 	mov	r9,zero
8111eb94:	d9002917 	ldw	r4,164(sp)
8111eb98:	dc401a04 	addi	r17,sp,104
8111eb9c:	e08003cc 	andi	r2,fp,15
8111eba0:	4806973a 	slli	r3,r9,28
8111eba4:	2085883a 	add	r2,r4,r2
8111eba8:	e038d13a 	srli	fp,fp,4
8111ebac:	10800003 	ldbu	r2,0(r2)
8111ebb0:	4812d13a 	srli	r9,r9,4
8111ebb4:	8c7fffc4 	addi	r17,r17,-1
8111ebb8:	1f38b03a 	or	fp,r3,fp
8111ebbc:	88800005 	stb	r2,0(r17)
8111ebc0:	e244b03a 	or	r2,fp,r9
8111ebc4:	103ff51e 	bne	r2,zero,8111eb9c <__reset+0xfb0feb9c>
8111ebc8:	dac01e17 	ldw	r11,120(sp)
8111ebcc:	5c57c83a 	sub	r11,r11,r17
8111ebd0:	dac02115 	stw	r11,132(sp)
8111ebd4:	00001406 	br	8111ec28 <___svfiprintf_internal_r+0x478>
8111ebd8:	21003fcc 	andi	r4,r4,255
8111ebdc:	2003741e 	bne	r4,zero,8111f9b0 <___svfiprintf_internal_r+0x1200>
8111ebe0:	9080080c 	andi	r2,r18,32
8111ebe4:	10014526 	beq	r2,zero,8111f0fc <___svfiprintf_internal_r+0x94c>
8111ebe8:	dac02317 	ldw	r11,140(sp)
8111ebec:	d8001d85 	stb	zero,118(sp)
8111ebf0:	58c00204 	addi	r3,r11,8
8111ebf4:	5f000017 	ldw	fp,0(r11)
8111ebf8:	5a400117 	ldw	r9,4(r11)
8111ebfc:	8002d916 	blt	r16,zero,8111f764 <___svfiprintf_internal_r+0xfb4>
8111ec00:	013fdfc4 	movi	r4,-129
8111ec04:	e244b03a 	or	r2,fp,r9
8111ec08:	d8c02315 	stw	r3,140(sp)
8111ec0c:	9124703a 	and	r18,r18,r4
8111ec10:	0015883a 	mov	r10,zero
8111ec14:	1000b91e 	bne	r2,zero,8111eefc <___svfiprintf_internal_r+0x74c>
8111ec18:	8002e61e 	bne	r16,zero,8111f7b4 <___svfiprintf_internal_r+0x1004>
8111ec1c:	0021883a 	mov	r16,zero
8111ec20:	d8002115 	stw	zero,132(sp)
8111ec24:	dc401a04 	addi	r17,sp,104
8111ec28:	d8c02117 	ldw	r3,132(sp)
8111ec2c:	dc002015 	stw	r16,128(sp)
8111ec30:	80c0010e 	bge	r16,r3,8111ec38 <___svfiprintf_internal_r+0x488>
8111ec34:	d8c02015 	stw	r3,128(sp)
8111ec38:	52803fcc 	andi	r10,r10,255
8111ec3c:	5280201c 	xori	r10,r10,128
8111ec40:	52bfe004 	addi	r10,r10,-128
8111ec44:	50003c26 	beq	r10,zero,8111ed38 <___svfiprintf_internal_r+0x588>
8111ec48:	dac02017 	ldw	r11,128(sp)
8111ec4c:	5ac00044 	addi	r11,r11,1
8111ec50:	dac02015 	stw	r11,128(sp)
8111ec54:	00003806 	br	8111ed38 <___svfiprintf_internal_r+0x588>
8111ec58:	01000044 	movi	r4,1
8111ec5c:	01c00ac4 	movi	r7,43
8111ec60:	98c00007 	ldb	r3,0(r19)
8111ec64:	003f2306 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111ec68:	21003fcc 	andi	r4,r4,255
8111ec6c:	2003481e 	bne	r4,zero,8111f990 <___svfiprintf_internal_r+0x11e0>
8111ec70:	9080080c 	andi	r2,r18,32
8111ec74:	10013b26 	beq	r2,zero,8111f164 <___svfiprintf_internal_r+0x9b4>
8111ec78:	dac02317 	ldw	r11,140(sp)
8111ec7c:	d8001d85 	stb	zero,118(sp)
8111ec80:	58800204 	addi	r2,r11,8
8111ec84:	5f000017 	ldw	fp,0(r11)
8111ec88:	5a400117 	ldw	r9,4(r11)
8111ec8c:	8002a816 	blt	r16,zero,8111f730 <___svfiprintf_internal_r+0xf80>
8111ec90:	013fdfc4 	movi	r4,-129
8111ec94:	e246b03a 	or	r3,fp,r9
8111ec98:	d8802315 	stw	r2,140(sp)
8111ec9c:	9124703a 	and	r18,r18,r4
8111eca0:	18013c26 	beq	r3,zero,8111f194 <___svfiprintf_internal_r+0x9e4>
8111eca4:	0015883a 	mov	r10,zero
8111eca8:	dc401a04 	addi	r17,sp,104
8111ecac:	e006d0fa 	srli	r3,fp,3
8111ecb0:	4808977a 	slli	r4,r9,29
8111ecb4:	4812d0fa 	srli	r9,r9,3
8111ecb8:	e70001cc 	andi	fp,fp,7
8111ecbc:	e0800c04 	addi	r2,fp,48
8111ecc0:	8c7fffc4 	addi	r17,r17,-1
8111ecc4:	20f8b03a 	or	fp,r4,r3
8111ecc8:	88800005 	stb	r2,0(r17)
8111eccc:	e246b03a 	or	r3,fp,r9
8111ecd0:	183ff61e 	bne	r3,zero,8111ecac <__reset+0xfb0fecac>
8111ecd4:	90c0004c 	andi	r3,r18,1
8111ecd8:	1800a526 	beq	r3,zero,8111ef70 <___svfiprintf_internal_r+0x7c0>
8111ecdc:	10803fcc 	andi	r2,r2,255
8111ece0:	1080201c 	xori	r2,r2,128
8111ece4:	10bfe004 	addi	r2,r2,-128
8111ece8:	00c00c04 	movi	r3,48
8111ecec:	10ffb626 	beq	r2,r3,8111ebc8 <__reset+0xfb0febc8>
8111ecf0:	88ffffc5 	stb	r3,-1(r17)
8111ecf4:	d8c01e17 	ldw	r3,120(sp)
8111ecf8:	88bfffc4 	addi	r2,r17,-1
8111ecfc:	1023883a 	mov	r17,r2
8111ed00:	1887c83a 	sub	r3,r3,r2
8111ed04:	d8c02115 	stw	r3,132(sp)
8111ed08:	003fc706 	br	8111ec28 <__reset+0xfb0fec28>
8111ed0c:	dac02317 	ldw	r11,140(sp)
8111ed10:	00c00044 	movi	r3,1
8111ed14:	d8c02015 	stw	r3,128(sp)
8111ed18:	58800017 	ldw	r2,0(r11)
8111ed1c:	5ac00104 	addi	r11,r11,4
8111ed20:	d8001d85 	stb	zero,118(sp)
8111ed24:	d8801005 	stb	r2,64(sp)
8111ed28:	dac02315 	stw	r11,140(sp)
8111ed2c:	d8c02115 	stw	r3,132(sp)
8111ed30:	dc401004 	addi	r17,sp,64
8111ed34:	0021883a 	mov	r16,zero
8111ed38:	90c0008c 	andi	r3,r18,2
8111ed3c:	d8c02215 	stw	r3,136(sp)
8111ed40:	18000326 	beq	r3,zero,8111ed50 <___svfiprintf_internal_r+0x5a0>
8111ed44:	dac02017 	ldw	r11,128(sp)
8111ed48:	5ac00084 	addi	r11,r11,2
8111ed4c:	dac02015 	stw	r11,128(sp)
8111ed50:	90c0210c 	andi	r3,r18,132
8111ed54:	d8c02615 	stw	r3,152(sp)
8111ed58:	1801131e 	bne	r3,zero,8111f1a8 <___svfiprintf_internal_r+0x9f8>
8111ed5c:	dac02417 	ldw	r11,144(sp)
8111ed60:	d8c02017 	ldw	r3,128(sp)
8111ed64:	58f9c83a 	sub	fp,r11,r3
8111ed68:	07010f0e 	bge	zero,fp,8111f1a8 <___svfiprintf_internal_r+0x9f8>
8111ed6c:	02400404 	movi	r9,16
8111ed70:	d8c01c17 	ldw	r3,112(sp)
8111ed74:	d8801b17 	ldw	r2,108(sp)
8111ed78:	4f02d60e 	bge	r9,fp,8111f8d4 <___svfiprintf_internal_r+0x1124>
8111ed7c:	01604534 	movhi	r5,33044
8111ed80:	2971b404 	addi	r5,r5,-14640
8111ed84:	d9402815 	stw	r5,160(sp)
8111ed88:	028001c4 	movi	r10,7
8111ed8c:	00000306 	br	8111ed9c <___svfiprintf_internal_r+0x5ec>
8111ed90:	e73ffc04 	addi	fp,fp,-16
8111ed94:	42000204 	addi	r8,r8,8
8111ed98:	4f00150e 	bge	r9,fp,8111edf0 <___svfiprintf_internal_r+0x640>
8111ed9c:	18c00404 	addi	r3,r3,16
8111eda0:	10800044 	addi	r2,r2,1
8111eda4:	45800015 	stw	r22,0(r8)
8111eda8:	42400115 	stw	r9,4(r8)
8111edac:	d8c01c15 	stw	r3,112(sp)
8111edb0:	d8801b15 	stw	r2,108(sp)
8111edb4:	50bff60e 	bge	r10,r2,8111ed90 <__reset+0xfb0fed90>
8111edb8:	d9801a04 	addi	r6,sp,104
8111edbc:	b80b883a 	mov	r5,r23
8111edc0:	a809883a 	mov	r4,r21
8111edc4:	da402c15 	stw	r9,176(sp)
8111edc8:	da802d15 	stw	r10,180(sp)
8111edcc:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111edd0:	da402c17 	ldw	r9,176(sp)
8111edd4:	da802d17 	ldw	r10,180(sp)
8111edd8:	1001851e 	bne	r2,zero,8111f3f0 <___svfiprintf_internal_r+0xc40>
8111eddc:	e73ffc04 	addi	fp,fp,-16
8111ede0:	d8c01c17 	ldw	r3,112(sp)
8111ede4:	d8801b17 	ldw	r2,108(sp)
8111ede8:	d811883a 	mov	r8,sp
8111edec:	4f3feb16 	blt	r9,fp,8111ed9c <__reset+0xfb0fed9c>
8111edf0:	dac02817 	ldw	r11,160(sp)
8111edf4:	e0c7883a 	add	r3,fp,r3
8111edf8:	10800044 	addi	r2,r2,1
8111edfc:	42c00015 	stw	r11,0(r8)
8111ee00:	47000115 	stw	fp,4(r8)
8111ee04:	d8c01c15 	stw	r3,112(sp)
8111ee08:	d8801b15 	stw	r2,108(sp)
8111ee0c:	010001c4 	movi	r4,7
8111ee10:	2081ee16 	blt	r4,r2,8111f5cc <___svfiprintf_internal_r+0xe1c>
8111ee14:	42000204 	addi	r8,r8,8
8111ee18:	0000e506 	br	8111f1b0 <___svfiprintf_internal_r+0xa00>
8111ee1c:	21003fcc 	andi	r4,r4,255
8111ee20:	2002dd1e 	bne	r4,zero,8111f998 <___svfiprintf_internal_r+0x11e8>
8111ee24:	00a04534 	movhi	r2,33044
8111ee28:	10b12104 	addi	r2,r2,-15228
8111ee2c:	d8802915 	stw	r2,164(sp)
8111ee30:	9080080c 	andi	r2,r18,32
8111ee34:	103f461e 	bne	r2,zero,8111eb50 <__reset+0xfb0feb50>
8111ee38:	9080040c 	andi	r2,r18,16
8111ee3c:	10022e1e 	bne	r2,zero,8111f6f8 <___svfiprintf_internal_r+0xf48>
8111ee40:	9080100c 	andi	r2,r18,64
8111ee44:	dac02317 	ldw	r11,140(sp)
8111ee48:	10027326 	beq	r2,zero,8111f818 <___svfiprintf_internal_r+0x1068>
8111ee4c:	5f00000b 	ldhu	fp,0(r11)
8111ee50:	5ac00104 	addi	r11,r11,4
8111ee54:	0013883a 	mov	r9,zero
8111ee58:	dac02315 	stw	r11,140(sp)
8111ee5c:	003f4106 	br	8111eb64 <__reset+0xfb0feb64>
8111ee60:	21003fcc 	andi	r4,r4,255
8111ee64:	2002e11e 	bne	r4,zero,8111f9ec <___svfiprintf_internal_r+0x123c>
8111ee68:	9080080c 	andi	r2,r18,32
8111ee6c:	1002011e 	bne	r2,zero,8111f674 <___svfiprintf_internal_r+0xec4>
8111ee70:	9080040c 	andi	r2,r18,16
8111ee74:	10023e1e 	bne	r2,zero,8111f770 <___svfiprintf_internal_r+0xfc0>
8111ee78:	9480100c 	andi	r18,r18,64
8111ee7c:	90023c26 	beq	r18,zero,8111f770 <___svfiprintf_internal_r+0xfc0>
8111ee80:	dac02317 	ldw	r11,140(sp)
8111ee84:	58800017 	ldw	r2,0(r11)
8111ee88:	5ac00104 	addi	r11,r11,4
8111ee8c:	dac02315 	stw	r11,140(sp)
8111ee90:	dac02517 	ldw	r11,148(sp)
8111ee94:	12c0000d 	sth	r11,0(r2)
8111ee98:	003e6e06 	br	8111e854 <__reset+0xfb0fe854>
8111ee9c:	98c00007 	ldb	r3,0(r19)
8111eea0:	1a422926 	beq	r3,r9,8111f748 <___svfiprintf_internal_r+0xf98>
8111eea4:	94800414 	ori	r18,r18,16
8111eea8:	003e9206 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111eeac:	94801014 	ori	r18,r18,64
8111eeb0:	98c00007 	ldb	r3,0(r19)
8111eeb4:	003e8f06 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111eeb8:	21003fcc 	andi	r4,r4,255
8111eebc:	2002c71e 	bne	r4,zero,8111f9dc <___svfiprintf_internal_r+0x122c>
8111eec0:	9080080c 	andi	r2,r18,32
8111eec4:	10004926 	beq	r2,zero,8111efec <___svfiprintf_internal_r+0x83c>
8111eec8:	dac02317 	ldw	r11,140(sp)
8111eecc:	58800117 	ldw	r2,4(r11)
8111eed0:	5f000017 	ldw	fp,0(r11)
8111eed4:	5ac00204 	addi	r11,r11,8
8111eed8:	dac02315 	stw	r11,140(sp)
8111eedc:	1013883a 	mov	r9,r2
8111eee0:	10004b16 	blt	r2,zero,8111f010 <___svfiprintf_internal_r+0x860>
8111eee4:	da801d83 	ldbu	r10,118(sp)
8111eee8:	8001cb16 	blt	r16,zero,8111f618 <___svfiprintf_internal_r+0xe68>
8111eeec:	00ffdfc4 	movi	r3,-129
8111eef0:	e244b03a 	or	r2,fp,r9
8111eef4:	90e4703a 	and	r18,r18,r3
8111eef8:	103f4726 	beq	r2,zero,8111ec18 <__reset+0xfb0fec18>
8111eefc:	48008c26 	beq	r9,zero,8111f130 <___svfiprintf_internal_r+0x980>
8111ef00:	dc802015 	stw	r18,128(sp)
8111ef04:	dc002115 	stw	r16,132(sp)
8111ef08:	dc401a04 	addi	r17,sp,104
8111ef0c:	e021883a 	mov	r16,fp
8111ef10:	da002215 	stw	r8,136(sp)
8111ef14:	5039883a 	mov	fp,r10
8111ef18:	4825883a 	mov	r18,r9
8111ef1c:	8009883a 	mov	r4,r16
8111ef20:	900b883a 	mov	r5,r18
8111ef24:	01800284 	movi	r6,10
8111ef28:	000f883a 	mov	r7,zero
8111ef2c:	1122c9c0 	call	81122c9c <__umoddi3>
8111ef30:	10800c04 	addi	r2,r2,48
8111ef34:	8c7fffc4 	addi	r17,r17,-1
8111ef38:	8009883a 	mov	r4,r16
8111ef3c:	900b883a 	mov	r5,r18
8111ef40:	88800005 	stb	r2,0(r17)
8111ef44:	01800284 	movi	r6,10
8111ef48:	000f883a 	mov	r7,zero
8111ef4c:	112271c0 	call	8112271c <__udivdi3>
8111ef50:	1021883a 	mov	r16,r2
8111ef54:	10c4b03a 	or	r2,r2,r3
8111ef58:	1825883a 	mov	r18,r3
8111ef5c:	103fef1e 	bne	r2,zero,8111ef1c <__reset+0xfb0fef1c>
8111ef60:	dc802017 	ldw	r18,128(sp)
8111ef64:	dc002117 	ldw	r16,132(sp)
8111ef68:	da002217 	ldw	r8,136(sp)
8111ef6c:	e015883a 	mov	r10,fp
8111ef70:	d8c01e17 	ldw	r3,120(sp)
8111ef74:	1c47c83a 	sub	r3,r3,r17
8111ef78:	d8c02115 	stw	r3,132(sp)
8111ef7c:	003f2a06 	br	8111ec28 <__reset+0xfb0fec28>
8111ef80:	dac02317 	ldw	r11,140(sp)
8111ef84:	d8001d85 	stb	zero,118(sp)
8111ef88:	5c400017 	ldw	r17,0(r11)
8111ef8c:	5f000104 	addi	fp,r11,4
8111ef90:	88022f26 	beq	r17,zero,8111f850 <___svfiprintf_internal_r+0x10a0>
8111ef94:	80022516 	blt	r16,zero,8111f82c <___svfiprintf_internal_r+0x107c>
8111ef98:	800d883a 	mov	r6,r16
8111ef9c:	000b883a 	mov	r5,zero
8111efa0:	8809883a 	mov	r4,r17
8111efa4:	da002c15 	stw	r8,176(sp)
8111efa8:	111ab7c0 	call	8111ab7c <memchr>
8111efac:	da002c17 	ldw	r8,176(sp)
8111efb0:	10026426 	beq	r2,zero,8111f944 <___svfiprintf_internal_r+0x1194>
8111efb4:	1445c83a 	sub	r2,r2,r17
8111efb8:	d8802115 	stw	r2,132(sp)
8111efbc:	da801d83 	ldbu	r10,118(sp)
8111efc0:	df002315 	stw	fp,140(sp)
8111efc4:	0021883a 	mov	r16,zero
8111efc8:	003f1706 	br	8111ec28 <__reset+0xfb0fec28>
8111efcc:	94800814 	ori	r18,r18,32
8111efd0:	98c00007 	ldb	r3,0(r19)
8111efd4:	003e4706 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111efd8:	21003fcc 	andi	r4,r4,255
8111efdc:	2002701e 	bne	r4,zero,8111f9a0 <___svfiprintf_internal_r+0x11f0>
8111efe0:	94800414 	ori	r18,r18,16
8111efe4:	9080080c 	andi	r2,r18,32
8111efe8:	103fb71e 	bne	r2,zero,8111eec8 <__reset+0xfb0feec8>
8111efec:	9080040c 	andi	r2,r18,16
8111eff0:	1001ab26 	beq	r2,zero,8111f6a0 <___svfiprintf_internal_r+0xef0>
8111eff4:	dac02317 	ldw	r11,140(sp)
8111eff8:	5f000017 	ldw	fp,0(r11)
8111effc:	5ac00104 	addi	r11,r11,4
8111f000:	dac02315 	stw	r11,140(sp)
8111f004:	e013d7fa 	srai	r9,fp,31
8111f008:	4805883a 	mov	r2,r9
8111f00c:	103fb50e 	bge	r2,zero,8111eee4 <__reset+0xfb0feee4>
8111f010:	0739c83a 	sub	fp,zero,fp
8111f014:	02800b44 	movi	r10,45
8111f018:	e004c03a 	cmpne	r2,fp,zero
8111f01c:	0253c83a 	sub	r9,zero,r9
8111f020:	da801d85 	stb	r10,118(sp)
8111f024:	4893c83a 	sub	r9,r9,r2
8111f028:	80023016 	blt	r16,zero,8111f8ec <___svfiprintf_internal_r+0x113c>
8111f02c:	00bfdfc4 	movi	r2,-129
8111f030:	90a4703a 	and	r18,r18,r2
8111f034:	483fb21e 	bne	r9,zero,8111ef00 <__reset+0xfb0fef00>
8111f038:	00003d06 	br	8111f130 <___svfiprintf_internal_r+0x980>
8111f03c:	9817883a 	mov	r11,r19
8111f040:	d8002415 	stw	zero,144(sp)
8111f044:	18bff404 	addi	r2,r3,-48
8111f048:	0019883a 	mov	r12,zero
8111f04c:	58c00007 	ldb	r3,0(r11)
8111f050:	630002a4 	muli	r12,r12,10
8111f054:	9cc00044 	addi	r19,r19,1
8111f058:	9817883a 	mov	r11,r19
8111f05c:	1319883a 	add	r12,r2,r12
8111f060:	18bff404 	addi	r2,r3,-48
8111f064:	30bff92e 	bgeu	r6,r2,8111f04c <__reset+0xfb0ff04c>
8111f068:	db002415 	stw	r12,144(sp)
8111f06c:	18bff804 	addi	r2,r3,-32
8111f070:	28be232e 	bgeu	r5,r2,8111e900 <__reset+0xfb0fe900>
8111f074:	21003fcc 	andi	r4,r4,255
8111f078:	20024b1e 	bne	r4,zero,8111f9a8 <___svfiprintf_internal_r+0x11f8>
8111f07c:	1800d626 	beq	r3,zero,8111f3d8 <___svfiprintf_internal_r+0xc28>
8111f080:	02c00044 	movi	r11,1
8111f084:	dac02015 	stw	r11,128(sp)
8111f088:	d8c01005 	stb	r3,64(sp)
8111f08c:	d8001d85 	stb	zero,118(sp)
8111f090:	dac02115 	stw	r11,132(sp)
8111f094:	dc401004 	addi	r17,sp,64
8111f098:	003f2606 	br	8111ed34 <__reset+0xfb0fed34>
8111f09c:	94802014 	ori	r18,r18,128
8111f0a0:	98c00007 	ldb	r3,0(r19)
8111f0a4:	003e1306 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111f0a8:	98c00007 	ldb	r3,0(r19)
8111f0ac:	9ac00044 	addi	r11,r19,1
8111f0b0:	1a822b26 	beq	r3,r10,8111f960 <___svfiprintf_internal_r+0x11b0>
8111f0b4:	18bff404 	addi	r2,r3,-48
8111f0b8:	0021883a 	mov	r16,zero
8111f0bc:	30821e36 	bltu	r6,r2,8111f938 <___svfiprintf_internal_r+0x1188>
8111f0c0:	58c00007 	ldb	r3,0(r11)
8111f0c4:	840002a4 	muli	r16,r16,10
8111f0c8:	5cc00044 	addi	r19,r11,1
8111f0cc:	9817883a 	mov	r11,r19
8111f0d0:	80a1883a 	add	r16,r16,r2
8111f0d4:	18bff404 	addi	r2,r3,-48
8111f0d8:	30bff92e 	bgeu	r6,r2,8111f0c0 <__reset+0xfb0ff0c0>
8111f0dc:	803e060e 	bge	r16,zero,8111e8f8 <__reset+0xfb0fe8f8>
8111f0e0:	043fffc4 	movi	r16,-1
8111f0e4:	003e0406 	br	8111e8f8 <__reset+0xfb0fe8f8>
8111f0e8:	21003fcc 	andi	r4,r4,255
8111f0ec:	2002371e 	bne	r4,zero,8111f9cc <___svfiprintf_internal_r+0x121c>
8111f0f0:	94800414 	ori	r18,r18,16
8111f0f4:	9080080c 	andi	r2,r18,32
8111f0f8:	103ebb1e 	bne	r2,zero,8111ebe8 <__reset+0xfb0febe8>
8111f0fc:	9080040c 	andi	r2,r18,16
8111f100:	10013b26 	beq	r2,zero,8111f5f0 <___svfiprintf_internal_r+0xe40>
8111f104:	dac02317 	ldw	r11,140(sp)
8111f108:	d8001d85 	stb	zero,118(sp)
8111f10c:	0013883a 	mov	r9,zero
8111f110:	58800104 	addi	r2,r11,4
8111f114:	5f000017 	ldw	fp,0(r11)
8111f118:	80013d16 	blt	r16,zero,8111f610 <___svfiprintf_internal_r+0xe60>
8111f11c:	00ffdfc4 	movi	r3,-129
8111f120:	d8802315 	stw	r2,140(sp)
8111f124:	90e4703a 	and	r18,r18,r3
8111f128:	0015883a 	mov	r10,zero
8111f12c:	e03eba26 	beq	fp,zero,8111ec18 <__reset+0xfb0fec18>
8111f130:	00800244 	movi	r2,9
8111f134:	173f7236 	bltu	r2,fp,8111ef00 <__reset+0xfb0fef00>
8111f138:	dac02b17 	ldw	r11,172(sp)
8111f13c:	e7000c04 	addi	fp,fp,48
8111f140:	df0019c5 	stb	fp,103(sp)
8111f144:	dac02115 	stw	r11,132(sp)
8111f148:	dc4019c4 	addi	r17,sp,103
8111f14c:	003eb606 	br	8111ec28 <__reset+0xfb0fec28>
8111f150:	21003fcc 	andi	r4,r4,255
8111f154:	20021f1e 	bne	r4,zero,8111f9d4 <___svfiprintf_internal_r+0x1224>
8111f158:	94800414 	ori	r18,r18,16
8111f15c:	9080080c 	andi	r2,r18,32
8111f160:	103ec51e 	bne	r2,zero,8111ec78 <__reset+0xfb0fec78>
8111f164:	9080040c 	andi	r2,r18,16
8111f168:	10016926 	beq	r2,zero,8111f710 <___svfiprintf_internal_r+0xf60>
8111f16c:	dac02317 	ldw	r11,140(sp)
8111f170:	d8001d85 	stb	zero,118(sp)
8111f174:	0013883a 	mov	r9,zero
8111f178:	58800104 	addi	r2,r11,4
8111f17c:	5f000017 	ldw	fp,0(r11)
8111f180:	80016b16 	blt	r16,zero,8111f730 <___svfiprintf_internal_r+0xf80>
8111f184:	00ffdfc4 	movi	r3,-129
8111f188:	d8802315 	stw	r2,140(sp)
8111f18c:	90e4703a 	and	r18,r18,r3
8111f190:	e03ec41e 	bne	fp,zero,8111eca4 <__reset+0xfb0feca4>
8111f194:	0015883a 	mov	r10,zero
8111f198:	8001c226 	beq	r16,zero,8111f8a4 <___svfiprintf_internal_r+0x10f4>
8111f19c:	0039883a 	mov	fp,zero
8111f1a0:	0013883a 	mov	r9,zero
8111f1a4:	003ec006 	br	8111eca8 <__reset+0xfb0feca8>
8111f1a8:	d8c01c17 	ldw	r3,112(sp)
8111f1ac:	d8801b17 	ldw	r2,108(sp)
8111f1b0:	d9001d87 	ldb	r4,118(sp)
8111f1b4:	20000b26 	beq	r4,zero,8111f1e4 <___svfiprintf_internal_r+0xa34>
8111f1b8:	d9001d84 	addi	r4,sp,118
8111f1bc:	18c00044 	addi	r3,r3,1
8111f1c0:	10800044 	addi	r2,r2,1
8111f1c4:	41000015 	stw	r4,0(r8)
8111f1c8:	01000044 	movi	r4,1
8111f1cc:	41000115 	stw	r4,4(r8)
8111f1d0:	d8c01c15 	stw	r3,112(sp)
8111f1d4:	d8801b15 	stw	r2,108(sp)
8111f1d8:	010001c4 	movi	r4,7
8111f1dc:	2080e116 	blt	r4,r2,8111f564 <___svfiprintf_internal_r+0xdb4>
8111f1e0:	42000204 	addi	r8,r8,8
8111f1e4:	dac02217 	ldw	r11,136(sp)
8111f1e8:	58000b26 	beq	r11,zero,8111f218 <___svfiprintf_internal_r+0xa68>
8111f1ec:	d9001d04 	addi	r4,sp,116
8111f1f0:	18c00084 	addi	r3,r3,2
8111f1f4:	10800044 	addi	r2,r2,1
8111f1f8:	41000015 	stw	r4,0(r8)
8111f1fc:	01000084 	movi	r4,2
8111f200:	41000115 	stw	r4,4(r8)
8111f204:	d8c01c15 	stw	r3,112(sp)
8111f208:	d8801b15 	stw	r2,108(sp)
8111f20c:	010001c4 	movi	r4,7
8111f210:	2080dd16 	blt	r4,r2,8111f588 <___svfiprintf_internal_r+0xdd8>
8111f214:	42000204 	addi	r8,r8,8
8111f218:	dac02617 	ldw	r11,152(sp)
8111f21c:	01002004 	movi	r4,128
8111f220:	59008426 	beq	r11,r4,8111f434 <___svfiprintf_internal_r+0xc84>
8111f224:	dac02117 	ldw	r11,132(sp)
8111f228:	82e1c83a 	sub	r16,r16,r11
8111f22c:	0400270e 	bge	zero,r16,8111f2cc <___svfiprintf_internal_r+0xb1c>
8111f230:	01c00404 	movi	r7,16
8111f234:	3c016a0e 	bge	r7,r16,8111f7e0 <___svfiprintf_internal_r+0x1030>
8111f238:	01604534 	movhi	r5,33044
8111f23c:	2971b004 	addi	r5,r5,-14656
8111f240:	d9402215 	stw	r5,136(sp)
8111f244:	070001c4 	movi	fp,7
8111f248:	00000306 	br	8111f258 <___svfiprintf_internal_r+0xaa8>
8111f24c:	843ffc04 	addi	r16,r16,-16
8111f250:	42000204 	addi	r8,r8,8
8111f254:	3c00130e 	bge	r7,r16,8111f2a4 <___svfiprintf_internal_r+0xaf4>
8111f258:	18c00404 	addi	r3,r3,16
8111f25c:	10800044 	addi	r2,r2,1
8111f260:	45000015 	stw	r20,0(r8)
8111f264:	41c00115 	stw	r7,4(r8)
8111f268:	d8c01c15 	stw	r3,112(sp)
8111f26c:	d8801b15 	stw	r2,108(sp)
8111f270:	e0bff60e 	bge	fp,r2,8111f24c <__reset+0xfb0ff24c>
8111f274:	d9801a04 	addi	r6,sp,104
8111f278:	b80b883a 	mov	r5,r23
8111f27c:	a809883a 	mov	r4,r21
8111f280:	d9c02c15 	stw	r7,176(sp)
8111f284:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f288:	d9c02c17 	ldw	r7,176(sp)
8111f28c:	1000581e 	bne	r2,zero,8111f3f0 <___svfiprintf_internal_r+0xc40>
8111f290:	843ffc04 	addi	r16,r16,-16
8111f294:	d8c01c17 	ldw	r3,112(sp)
8111f298:	d8801b17 	ldw	r2,108(sp)
8111f29c:	d811883a 	mov	r8,sp
8111f2a0:	3c3fed16 	blt	r7,r16,8111f258 <__reset+0xfb0ff258>
8111f2a4:	dac02217 	ldw	r11,136(sp)
8111f2a8:	1c07883a 	add	r3,r3,r16
8111f2ac:	10800044 	addi	r2,r2,1
8111f2b0:	42c00015 	stw	r11,0(r8)
8111f2b4:	44000115 	stw	r16,4(r8)
8111f2b8:	d8c01c15 	stw	r3,112(sp)
8111f2bc:	d8801b15 	stw	r2,108(sp)
8111f2c0:	010001c4 	movi	r4,7
8111f2c4:	20809e16 	blt	r4,r2,8111f540 <___svfiprintf_internal_r+0xd90>
8111f2c8:	42000204 	addi	r8,r8,8
8111f2cc:	dac02117 	ldw	r11,132(sp)
8111f2d0:	10800044 	addi	r2,r2,1
8111f2d4:	44400015 	stw	r17,0(r8)
8111f2d8:	58c7883a 	add	r3,r11,r3
8111f2dc:	42c00115 	stw	r11,4(r8)
8111f2e0:	d8c01c15 	stw	r3,112(sp)
8111f2e4:	d8801b15 	stw	r2,108(sp)
8111f2e8:	010001c4 	movi	r4,7
8111f2ec:	20807f16 	blt	r4,r2,8111f4ec <___svfiprintf_internal_r+0xd3c>
8111f2f0:	42000204 	addi	r8,r8,8
8111f2f4:	9480010c 	andi	r18,r18,4
8111f2f8:	90002926 	beq	r18,zero,8111f3a0 <___svfiprintf_internal_r+0xbf0>
8111f2fc:	dac02417 	ldw	r11,144(sp)
8111f300:	d8802017 	ldw	r2,128(sp)
8111f304:	58a1c83a 	sub	r16,r11,r2
8111f308:	0400250e 	bge	zero,r16,8111f3a0 <___svfiprintf_internal_r+0xbf0>
8111f30c:	04400404 	movi	r17,16
8111f310:	d8801b17 	ldw	r2,108(sp)
8111f314:	8c017c0e 	bge	r17,r16,8111f908 <___svfiprintf_internal_r+0x1158>
8111f318:	01604534 	movhi	r5,33044
8111f31c:	2971b404 	addi	r5,r5,-14640
8111f320:	d9402815 	stw	r5,160(sp)
8111f324:	048001c4 	movi	r18,7
8111f328:	00000306 	br	8111f338 <___svfiprintf_internal_r+0xb88>
8111f32c:	843ffc04 	addi	r16,r16,-16
8111f330:	42000204 	addi	r8,r8,8
8111f334:	8c00110e 	bge	r17,r16,8111f37c <___svfiprintf_internal_r+0xbcc>
8111f338:	18c00404 	addi	r3,r3,16
8111f33c:	10800044 	addi	r2,r2,1
8111f340:	45800015 	stw	r22,0(r8)
8111f344:	44400115 	stw	r17,4(r8)
8111f348:	d8c01c15 	stw	r3,112(sp)
8111f34c:	d8801b15 	stw	r2,108(sp)
8111f350:	90bff60e 	bge	r18,r2,8111f32c <__reset+0xfb0ff32c>
8111f354:	d9801a04 	addi	r6,sp,104
8111f358:	b80b883a 	mov	r5,r23
8111f35c:	a809883a 	mov	r4,r21
8111f360:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f364:	1000221e 	bne	r2,zero,8111f3f0 <___svfiprintf_internal_r+0xc40>
8111f368:	843ffc04 	addi	r16,r16,-16
8111f36c:	d8c01c17 	ldw	r3,112(sp)
8111f370:	d8801b17 	ldw	r2,108(sp)
8111f374:	d811883a 	mov	r8,sp
8111f378:	8c3fef16 	blt	r17,r16,8111f338 <__reset+0xfb0ff338>
8111f37c:	dac02817 	ldw	r11,160(sp)
8111f380:	1c07883a 	add	r3,r3,r16
8111f384:	10800044 	addi	r2,r2,1
8111f388:	42c00015 	stw	r11,0(r8)
8111f38c:	44000115 	stw	r16,4(r8)
8111f390:	d8c01c15 	stw	r3,112(sp)
8111f394:	d8801b15 	stw	r2,108(sp)
8111f398:	010001c4 	movi	r4,7
8111f39c:	2080aa16 	blt	r4,r2,8111f648 <___svfiprintf_internal_r+0xe98>
8111f3a0:	d8802417 	ldw	r2,144(sp)
8111f3a4:	dac02017 	ldw	r11,128(sp)
8111f3a8:	12c0010e 	bge	r2,r11,8111f3b0 <___svfiprintf_internal_r+0xc00>
8111f3ac:	5805883a 	mov	r2,r11
8111f3b0:	dac02517 	ldw	r11,148(sp)
8111f3b4:	5897883a 	add	r11,r11,r2
8111f3b8:	dac02515 	stw	r11,148(sp)
8111f3bc:	1800531e 	bne	r3,zero,8111f50c <___svfiprintf_internal_r+0xd5c>
8111f3c0:	98800007 	ldb	r2,0(r19)
8111f3c4:	d8001b15 	stw	zero,108(sp)
8111f3c8:	d811883a 	mov	r8,sp
8111f3cc:	103d231e 	bne	r2,zero,8111e85c <__reset+0xfb0fe85c>
8111f3d0:	9823883a 	mov	r17,r19
8111f3d4:	003d3906 	br	8111e8bc <__reset+0xfb0fe8bc>
8111f3d8:	d8801c17 	ldw	r2,112(sp)
8111f3dc:	10000426 	beq	r2,zero,8111f3f0 <___svfiprintf_internal_r+0xc40>
8111f3e0:	d9402717 	ldw	r5,156(sp)
8111f3e4:	d9002a17 	ldw	r4,168(sp)
8111f3e8:	d9801a04 	addi	r6,sp,104
8111f3ec:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f3f0:	dac02717 	ldw	r11,156(sp)
8111f3f4:	d8802517 	ldw	r2,148(sp)
8111f3f8:	58c0030b 	ldhu	r3,12(r11)
8111f3fc:	18c0100c 	andi	r3,r3,64
8111f400:	1801381e 	bne	r3,zero,8111f8e4 <___svfiprintf_internal_r+0x1134>
8111f404:	dfc03717 	ldw	ra,220(sp)
8111f408:	df003617 	ldw	fp,216(sp)
8111f40c:	ddc03517 	ldw	r23,212(sp)
8111f410:	dd803417 	ldw	r22,208(sp)
8111f414:	dd403317 	ldw	r21,204(sp)
8111f418:	dd003217 	ldw	r20,200(sp)
8111f41c:	dcc03117 	ldw	r19,196(sp)
8111f420:	dc803017 	ldw	r18,192(sp)
8111f424:	dc402f17 	ldw	r17,188(sp)
8111f428:	dc002e17 	ldw	r16,184(sp)
8111f42c:	dec03804 	addi	sp,sp,224
8111f430:	f800283a 	ret
8111f434:	dac02417 	ldw	r11,144(sp)
8111f438:	d9002017 	ldw	r4,128(sp)
8111f43c:	5939c83a 	sub	fp,r11,r4
8111f440:	073f780e 	bge	zero,fp,8111f224 <__reset+0xfb0ff224>
8111f444:	02400404 	movi	r9,16
8111f448:	4f01370e 	bge	r9,fp,8111f928 <___svfiprintf_internal_r+0x1178>
8111f44c:	02e04534 	movhi	r11,33044
8111f450:	5af1b004 	addi	r11,r11,-14656
8111f454:	dac02215 	stw	r11,136(sp)
8111f458:	028001c4 	movi	r10,7
8111f45c:	00000306 	br	8111f46c <___svfiprintf_internal_r+0xcbc>
8111f460:	e73ffc04 	addi	fp,fp,-16
8111f464:	42000204 	addi	r8,r8,8
8111f468:	4f00150e 	bge	r9,fp,8111f4c0 <___svfiprintf_internal_r+0xd10>
8111f46c:	18c00404 	addi	r3,r3,16
8111f470:	10800044 	addi	r2,r2,1
8111f474:	45000015 	stw	r20,0(r8)
8111f478:	42400115 	stw	r9,4(r8)
8111f47c:	d8c01c15 	stw	r3,112(sp)
8111f480:	d8801b15 	stw	r2,108(sp)
8111f484:	50bff60e 	bge	r10,r2,8111f460 <__reset+0xfb0ff460>
8111f488:	d9801a04 	addi	r6,sp,104
8111f48c:	b80b883a 	mov	r5,r23
8111f490:	a809883a 	mov	r4,r21
8111f494:	da402c15 	stw	r9,176(sp)
8111f498:	da802d15 	stw	r10,180(sp)
8111f49c:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f4a0:	da402c17 	ldw	r9,176(sp)
8111f4a4:	da802d17 	ldw	r10,180(sp)
8111f4a8:	103fd11e 	bne	r2,zero,8111f3f0 <__reset+0xfb0ff3f0>
8111f4ac:	e73ffc04 	addi	fp,fp,-16
8111f4b0:	d8c01c17 	ldw	r3,112(sp)
8111f4b4:	d8801b17 	ldw	r2,108(sp)
8111f4b8:	d811883a 	mov	r8,sp
8111f4bc:	4f3feb16 	blt	r9,fp,8111f46c <__reset+0xfb0ff46c>
8111f4c0:	dac02217 	ldw	r11,136(sp)
8111f4c4:	1f07883a 	add	r3,r3,fp
8111f4c8:	10800044 	addi	r2,r2,1
8111f4cc:	42c00015 	stw	r11,0(r8)
8111f4d0:	47000115 	stw	fp,4(r8)
8111f4d4:	d8c01c15 	stw	r3,112(sp)
8111f4d8:	d8801b15 	stw	r2,108(sp)
8111f4dc:	010001c4 	movi	r4,7
8111f4e0:	2080b616 	blt	r4,r2,8111f7bc <___svfiprintf_internal_r+0x100c>
8111f4e4:	42000204 	addi	r8,r8,8
8111f4e8:	003f4e06 	br	8111f224 <__reset+0xfb0ff224>
8111f4ec:	d9801a04 	addi	r6,sp,104
8111f4f0:	b80b883a 	mov	r5,r23
8111f4f4:	a809883a 	mov	r4,r21
8111f4f8:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f4fc:	103fbc1e 	bne	r2,zero,8111f3f0 <__reset+0xfb0ff3f0>
8111f500:	d8c01c17 	ldw	r3,112(sp)
8111f504:	d811883a 	mov	r8,sp
8111f508:	003f7a06 	br	8111f2f4 <__reset+0xfb0ff2f4>
8111f50c:	d9801a04 	addi	r6,sp,104
8111f510:	b80b883a 	mov	r5,r23
8111f514:	a809883a 	mov	r4,r21
8111f518:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f51c:	103fa826 	beq	r2,zero,8111f3c0 <__reset+0xfb0ff3c0>
8111f520:	003fb306 	br	8111f3f0 <__reset+0xfb0ff3f0>
8111f524:	d9801a04 	addi	r6,sp,104
8111f528:	b80b883a 	mov	r5,r23
8111f52c:	a809883a 	mov	r4,r21
8111f530:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f534:	103fae1e 	bne	r2,zero,8111f3f0 <__reset+0xfb0ff3f0>
8111f538:	d811883a 	mov	r8,sp
8111f53c:	003cdc06 	br	8111e8b0 <__reset+0xfb0fe8b0>
8111f540:	d9801a04 	addi	r6,sp,104
8111f544:	b80b883a 	mov	r5,r23
8111f548:	a809883a 	mov	r4,r21
8111f54c:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f550:	103fa71e 	bne	r2,zero,8111f3f0 <__reset+0xfb0ff3f0>
8111f554:	d8c01c17 	ldw	r3,112(sp)
8111f558:	d8801b17 	ldw	r2,108(sp)
8111f55c:	d811883a 	mov	r8,sp
8111f560:	003f5a06 	br	8111f2cc <__reset+0xfb0ff2cc>
8111f564:	d9801a04 	addi	r6,sp,104
8111f568:	b80b883a 	mov	r5,r23
8111f56c:	a809883a 	mov	r4,r21
8111f570:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f574:	103f9e1e 	bne	r2,zero,8111f3f0 <__reset+0xfb0ff3f0>
8111f578:	d8c01c17 	ldw	r3,112(sp)
8111f57c:	d8801b17 	ldw	r2,108(sp)
8111f580:	d811883a 	mov	r8,sp
8111f584:	003f1706 	br	8111f1e4 <__reset+0xfb0ff1e4>
8111f588:	d9801a04 	addi	r6,sp,104
8111f58c:	b80b883a 	mov	r5,r23
8111f590:	a809883a 	mov	r4,r21
8111f594:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f598:	103f951e 	bne	r2,zero,8111f3f0 <__reset+0xfb0ff3f0>
8111f59c:	d8c01c17 	ldw	r3,112(sp)
8111f5a0:	d8801b17 	ldw	r2,108(sp)
8111f5a4:	d811883a 	mov	r8,sp
8111f5a8:	003f1b06 	br	8111f218 <__reset+0xfb0ff218>
8111f5ac:	d8001d85 	stb	zero,118(sp)
8111f5b0:	80007b16 	blt	r16,zero,8111f7a0 <___svfiprintf_internal_r+0xff0>
8111f5b4:	00ffdfc4 	movi	r3,-129
8111f5b8:	e244b03a 	or	r2,fp,r9
8111f5bc:	90e4703a 	and	r18,r18,r3
8111f5c0:	103d7026 	beq	r2,zero,8111eb84 <__reset+0xfb0feb84>
8111f5c4:	0015883a 	mov	r10,zero
8111f5c8:	003d7206 	br	8111eb94 <__reset+0xfb0feb94>
8111f5cc:	d9801a04 	addi	r6,sp,104
8111f5d0:	b80b883a 	mov	r5,r23
8111f5d4:	a809883a 	mov	r4,r21
8111f5d8:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f5dc:	103f841e 	bne	r2,zero,8111f3f0 <__reset+0xfb0ff3f0>
8111f5e0:	d8c01c17 	ldw	r3,112(sp)
8111f5e4:	d8801b17 	ldw	r2,108(sp)
8111f5e8:	d811883a 	mov	r8,sp
8111f5ec:	003ef006 	br	8111f1b0 <__reset+0xfb0ff1b0>
8111f5f0:	9080100c 	andi	r2,r18,64
8111f5f4:	d8001d85 	stb	zero,118(sp)
8111f5f8:	dac02317 	ldw	r11,140(sp)
8111f5fc:	10008126 	beq	r2,zero,8111f804 <___svfiprintf_internal_r+0x1054>
8111f600:	58800104 	addi	r2,r11,4
8111f604:	5f00000b 	ldhu	fp,0(r11)
8111f608:	0013883a 	mov	r9,zero
8111f60c:	803ec30e 	bge	r16,zero,8111f11c <__reset+0xfb0ff11c>
8111f610:	d8802315 	stw	r2,140(sp)
8111f614:	0015883a 	mov	r10,zero
8111f618:	e244b03a 	or	r2,fp,r9
8111f61c:	103e371e 	bne	r2,zero,8111eefc <__reset+0xfb0feefc>
8111f620:	00800044 	movi	r2,1
8111f624:	10803fcc 	andi	r2,r2,255
8111f628:	00c00044 	movi	r3,1
8111f62c:	10c06126 	beq	r2,r3,8111f7b4 <___svfiprintf_internal_r+0x1004>
8111f630:	00c00084 	movi	r3,2
8111f634:	10fd5526 	beq	r2,r3,8111eb8c <__reset+0xfb0feb8c>
8111f638:	003ed806 	br	8111f19c <__reset+0xfb0ff19c>
8111f63c:	d8802315 	stw	r2,140(sp)
8111f640:	98c00007 	ldb	r3,0(r19)
8111f644:	003cab06 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111f648:	d9801a04 	addi	r6,sp,104
8111f64c:	b80b883a 	mov	r5,r23
8111f650:	a809883a 	mov	r4,r21
8111f654:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f658:	103f651e 	bne	r2,zero,8111f3f0 <__reset+0xfb0ff3f0>
8111f65c:	d8c01c17 	ldw	r3,112(sp)
8111f660:	003f4f06 	br	8111f3a0 <__reset+0xfb0ff3a0>
8111f664:	00a04534 	movhi	r2,33044
8111f668:	10b12604 	addi	r2,r2,-15208
8111f66c:	d8802915 	stw	r2,164(sp)
8111f670:	003d4406 	br	8111eb84 <__reset+0xfb0feb84>
8111f674:	dac02317 	ldw	r11,140(sp)
8111f678:	58800017 	ldw	r2,0(r11)
8111f67c:	dac02517 	ldw	r11,148(sp)
8111f680:	5807d7fa 	srai	r3,r11,31
8111f684:	dac02317 	ldw	r11,140(sp)
8111f688:	10c00115 	stw	r3,4(r2)
8111f68c:	5ac00104 	addi	r11,r11,4
8111f690:	dac02315 	stw	r11,140(sp)
8111f694:	dac02517 	ldw	r11,148(sp)
8111f698:	12c00015 	stw	r11,0(r2)
8111f69c:	003c6d06 	br	8111e854 <__reset+0xfb0fe854>
8111f6a0:	9080100c 	andi	r2,r18,64
8111f6a4:	dac02317 	ldw	r11,140(sp)
8111f6a8:	103e5326 	beq	r2,zero,8111eff8 <__reset+0xfb0feff8>
8111f6ac:	5f00000f 	ldh	fp,0(r11)
8111f6b0:	5ac00104 	addi	r11,r11,4
8111f6b4:	dac02315 	stw	r11,140(sp)
8111f6b8:	e013d7fa 	srai	r9,fp,31
8111f6bc:	4805883a 	mov	r2,r9
8111f6c0:	003e0706 	br	8111eee0 <__reset+0xfb0feee0>
8111f6c4:	00800c04 	movi	r2,48
8111f6c8:	d8801d05 	stb	r2,116(sp)
8111f6cc:	d8c01d45 	stb	r3,117(sp)
8111f6d0:	d8001d85 	stb	zero,118(sp)
8111f6d4:	90800094 	ori	r2,r18,2
8111f6d8:	80008f16 	blt	r16,zero,8111f918 <___svfiprintf_internal_r+0x1168>
8111f6dc:	00bfdfc4 	movi	r2,-129
8111f6e0:	90a4703a 	and	r18,r18,r2
8111f6e4:	94800094 	ori	r18,r18,2
8111f6e8:	0015883a 	mov	r10,zero
8111f6ec:	003d2906 	br	8111eb94 <__reset+0xfb0feb94>
8111f6f0:	98c00007 	ldb	r3,0(r19)
8111f6f4:	003c7f06 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111f6f8:	dac02317 	ldw	r11,140(sp)
8111f6fc:	0013883a 	mov	r9,zero
8111f700:	5f000017 	ldw	fp,0(r11)
8111f704:	5ac00104 	addi	r11,r11,4
8111f708:	dac02315 	stw	r11,140(sp)
8111f70c:	003d1506 	br	8111eb64 <__reset+0xfb0feb64>
8111f710:	9080100c 	andi	r2,r18,64
8111f714:	d8001d85 	stb	zero,118(sp)
8111f718:	dac02317 	ldw	r11,140(sp)
8111f71c:	10003426 	beq	r2,zero,8111f7f0 <___svfiprintf_internal_r+0x1040>
8111f720:	58800104 	addi	r2,r11,4
8111f724:	5f00000b 	ldhu	fp,0(r11)
8111f728:	0013883a 	mov	r9,zero
8111f72c:	803e950e 	bge	r16,zero,8111f184 <__reset+0xfb0ff184>
8111f730:	e246b03a 	or	r3,fp,r9
8111f734:	d8802315 	stw	r2,140(sp)
8111f738:	183d5a1e 	bne	r3,zero,8111eca4 <__reset+0xfb0feca4>
8111f73c:	0015883a 	mov	r10,zero
8111f740:	0005883a 	mov	r2,zero
8111f744:	003fb706 	br	8111f624 <__reset+0xfb0ff624>
8111f748:	98c00043 	ldbu	r3,1(r19)
8111f74c:	94800814 	ori	r18,r18,32
8111f750:	9cc00044 	addi	r19,r19,1
8111f754:	18c03fcc 	andi	r3,r3,255
8111f758:	18c0201c 	xori	r3,r3,128
8111f75c:	18ffe004 	addi	r3,r3,-128
8111f760:	003c6406 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111f764:	d8c02315 	stw	r3,140(sp)
8111f768:	0015883a 	mov	r10,zero
8111f76c:	003faa06 	br	8111f618 <__reset+0xfb0ff618>
8111f770:	dac02317 	ldw	r11,140(sp)
8111f774:	58800017 	ldw	r2,0(r11)
8111f778:	5ac00104 	addi	r11,r11,4
8111f77c:	dac02315 	stw	r11,140(sp)
8111f780:	dac02517 	ldw	r11,148(sp)
8111f784:	12c00015 	stw	r11,0(r2)
8111f788:	003c3206 	br	8111e854 <__reset+0xfb0fe854>
8111f78c:	01204534 	movhi	r4,33044
8111f790:	21312604 	addi	r4,r4,-15208
8111f794:	d9002915 	stw	r4,164(sp)
8111f798:	d8c02315 	stw	r3,140(sp)
8111f79c:	1025883a 	mov	r18,r2
8111f7a0:	e244b03a 	or	r2,fp,r9
8111f7a4:	103f871e 	bne	r2,zero,8111f5c4 <__reset+0xfb0ff5c4>
8111f7a8:	0015883a 	mov	r10,zero
8111f7ac:	00800084 	movi	r2,2
8111f7b0:	003f9c06 	br	8111f624 <__reset+0xfb0ff624>
8111f7b4:	0039883a 	mov	fp,zero
8111f7b8:	003e5f06 	br	8111f138 <__reset+0xfb0ff138>
8111f7bc:	d9801a04 	addi	r6,sp,104
8111f7c0:	b80b883a 	mov	r5,r23
8111f7c4:	a809883a 	mov	r4,r21
8111f7c8:	111e5d80 	call	8111e5d8 <__ssprint_r>
8111f7cc:	103f081e 	bne	r2,zero,8111f3f0 <__reset+0xfb0ff3f0>
8111f7d0:	d8c01c17 	ldw	r3,112(sp)
8111f7d4:	d8801b17 	ldw	r2,108(sp)
8111f7d8:	d811883a 	mov	r8,sp
8111f7dc:	003e9106 	br	8111f224 <__reset+0xfb0ff224>
8111f7e0:	01204534 	movhi	r4,33044
8111f7e4:	2131b004 	addi	r4,r4,-14656
8111f7e8:	d9002215 	stw	r4,136(sp)
8111f7ec:	003ead06 	br	8111f2a4 <__reset+0xfb0ff2a4>
8111f7f0:	58800104 	addi	r2,r11,4
8111f7f4:	5f000017 	ldw	fp,0(r11)
8111f7f8:	0013883a 	mov	r9,zero
8111f7fc:	803e610e 	bge	r16,zero,8111f184 <__reset+0xfb0ff184>
8111f800:	003fcb06 	br	8111f730 <__reset+0xfb0ff730>
8111f804:	58800104 	addi	r2,r11,4
8111f808:	5f000017 	ldw	fp,0(r11)
8111f80c:	0013883a 	mov	r9,zero
8111f810:	803e420e 	bge	r16,zero,8111f11c <__reset+0xfb0ff11c>
8111f814:	003f7e06 	br	8111f610 <__reset+0xfb0ff610>
8111f818:	5f000017 	ldw	fp,0(r11)
8111f81c:	5ac00104 	addi	r11,r11,4
8111f820:	0013883a 	mov	r9,zero
8111f824:	dac02315 	stw	r11,140(sp)
8111f828:	003cce06 	br	8111eb64 <__reset+0xfb0feb64>
8111f82c:	8809883a 	mov	r4,r17
8111f830:	da002c15 	stw	r8,176(sp)
8111f834:	11118240 	call	81111824 <strlen>
8111f838:	d8802115 	stw	r2,132(sp)
8111f83c:	da801d83 	ldbu	r10,118(sp)
8111f840:	df002315 	stw	fp,140(sp)
8111f844:	0021883a 	mov	r16,zero
8111f848:	da002c17 	ldw	r8,176(sp)
8111f84c:	003cf606 	br	8111ec28 <__reset+0xfb0fec28>
8111f850:	00800184 	movi	r2,6
8111f854:	1400012e 	bgeu	r2,r16,8111f85c <___svfiprintf_internal_r+0x10ac>
8111f858:	1021883a 	mov	r16,r2
8111f85c:	dc002115 	stw	r16,132(sp)
8111f860:	8005883a 	mov	r2,r16
8111f864:	80003c16 	blt	r16,zero,8111f958 <___svfiprintf_internal_r+0x11a8>
8111f868:	04604534 	movhi	r17,33044
8111f86c:	d8802015 	stw	r2,128(sp)
8111f870:	df002315 	stw	fp,140(sp)
8111f874:	8c712b04 	addi	r17,r17,-15188
8111f878:	003d2e06 	br	8111ed34 <__reset+0xfb0fed34>
8111f87c:	04001004 	movi	r16,64
8111f880:	800b883a 	mov	r5,r16
8111f884:	11106940 	call	81110694 <_malloc_r>
8111f888:	dac02717 	ldw	r11,156(sp)
8111f88c:	58800015 	stw	r2,0(r11)
8111f890:	58800415 	stw	r2,16(r11)
8111f894:	10004826 	beq	r2,zero,8111f9b8 <___svfiprintf_internal_r+0x1208>
8111f898:	dac02717 	ldw	r11,156(sp)
8111f89c:	5c000515 	stw	r16,20(r11)
8111f8a0:	003bd906 	br	8111e808 <__reset+0xfb0fe808>
8111f8a4:	9080004c 	andi	r2,r18,1
8111f8a8:	0015883a 	mov	r10,zero
8111f8ac:	10000626 	beq	r2,zero,8111f8c8 <___svfiprintf_internal_r+0x1118>
8111f8b0:	dac02b17 	ldw	r11,172(sp)
8111f8b4:	00800c04 	movi	r2,48
8111f8b8:	d88019c5 	stb	r2,103(sp)
8111f8bc:	dac02115 	stw	r11,132(sp)
8111f8c0:	dc4019c4 	addi	r17,sp,103
8111f8c4:	003cd806 	br	8111ec28 <__reset+0xfb0fec28>
8111f8c8:	d8002115 	stw	zero,132(sp)
8111f8cc:	dc401a04 	addi	r17,sp,104
8111f8d0:	003cd506 	br	8111ec28 <__reset+0xfb0fec28>
8111f8d4:	01204534 	movhi	r4,33044
8111f8d8:	2131b404 	addi	r4,r4,-14640
8111f8dc:	d9002815 	stw	r4,160(sp)
8111f8e0:	003d4306 	br	8111edf0 <__reset+0xfb0fedf0>
8111f8e4:	00bfffc4 	movi	r2,-1
8111f8e8:	003ec606 	br	8111f404 <__reset+0xfb0ff404>
8111f8ec:	00800044 	movi	r2,1
8111f8f0:	10803fcc 	andi	r2,r2,255
8111f8f4:	00c00044 	movi	r3,1
8111f8f8:	10fd8026 	beq	r2,r3,8111eefc <__reset+0xfb0feefc>
8111f8fc:	00c00084 	movi	r3,2
8111f900:	10fca426 	beq	r2,r3,8111eb94 <__reset+0xfb0feb94>
8111f904:	003ce806 	br	8111eca8 <__reset+0xfb0feca8>
8111f908:	01204534 	movhi	r4,33044
8111f90c:	2131b404 	addi	r4,r4,-14640
8111f910:	d9002815 	stw	r4,160(sp)
8111f914:	003e9906 	br	8111f37c <__reset+0xfb0ff37c>
8111f918:	1025883a 	mov	r18,r2
8111f91c:	0015883a 	mov	r10,zero
8111f920:	00800084 	movi	r2,2
8111f924:	003ff206 	br	8111f8f0 <__reset+0xfb0ff8f0>
8111f928:	01604534 	movhi	r5,33044
8111f92c:	2971b004 	addi	r5,r5,-14656
8111f930:	d9402215 	stw	r5,136(sp)
8111f934:	003ee206 	br	8111f4c0 <__reset+0xfb0ff4c0>
8111f938:	5827883a 	mov	r19,r11
8111f93c:	0021883a 	mov	r16,zero
8111f940:	003bed06 	br	8111e8f8 <__reset+0xfb0fe8f8>
8111f944:	dc002115 	stw	r16,132(sp)
8111f948:	da801d83 	ldbu	r10,118(sp)
8111f94c:	df002315 	stw	fp,140(sp)
8111f950:	0021883a 	mov	r16,zero
8111f954:	003cb406 	br	8111ec28 <__reset+0xfb0fec28>
8111f958:	0005883a 	mov	r2,zero
8111f95c:	003fc206 	br	8111f868 <__reset+0xfb0ff868>
8111f960:	d8802317 	ldw	r2,140(sp)
8111f964:	98c00043 	ldbu	r3,1(r19)
8111f968:	5827883a 	mov	r19,r11
8111f96c:	14000017 	ldw	r16,0(r2)
8111f970:	10800104 	addi	r2,r2,4
8111f974:	d8802315 	stw	r2,140(sp)
8111f978:	803f760e 	bge	r16,zero,8111f754 <__reset+0xfb0ff754>
8111f97c:	18c03fcc 	andi	r3,r3,255
8111f980:	18c0201c 	xori	r3,r3,128
8111f984:	043fffc4 	movi	r16,-1
8111f988:	18ffe004 	addi	r3,r3,-128
8111f98c:	003bd906 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111f990:	d9c01d85 	stb	r7,118(sp)
8111f994:	003cb606 	br	8111ec70 <__reset+0xfb0fec70>
8111f998:	d9c01d85 	stb	r7,118(sp)
8111f99c:	003d2106 	br	8111ee24 <__reset+0xfb0fee24>
8111f9a0:	d9c01d85 	stb	r7,118(sp)
8111f9a4:	003d8e06 	br	8111efe0 <__reset+0xfb0fefe0>
8111f9a8:	d9c01d85 	stb	r7,118(sp)
8111f9ac:	003db306 	br	8111f07c <__reset+0xfb0ff07c>
8111f9b0:	d9c01d85 	stb	r7,118(sp)
8111f9b4:	003c8a06 	br	8111ebe0 <__reset+0xfb0febe0>
8111f9b8:	dac02a17 	ldw	r11,168(sp)
8111f9bc:	00800304 	movi	r2,12
8111f9c0:	58800015 	stw	r2,0(r11)
8111f9c4:	00bfffc4 	movi	r2,-1
8111f9c8:	003e8e06 	br	8111f404 <__reset+0xfb0ff404>
8111f9cc:	d9c01d85 	stb	r7,118(sp)
8111f9d0:	003dc706 	br	8111f0f0 <__reset+0xfb0ff0f0>
8111f9d4:	d9c01d85 	stb	r7,118(sp)
8111f9d8:	003ddf06 	br	8111f158 <__reset+0xfb0ff158>
8111f9dc:	d9c01d85 	stb	r7,118(sp)
8111f9e0:	003d3706 	br	8111eec0 <__reset+0xfb0feec0>
8111f9e4:	d9c01d85 	stb	r7,118(sp)
8111f9e8:	003c5406 	br	8111eb3c <__reset+0xfb0feb3c>
8111f9ec:	d9c01d85 	stb	r7,118(sp)
8111f9f0:	003d1d06 	br	8111ee68 <__reset+0xfb0fee68>

8111f9f4 <__submore>:
8111f9f4:	defffa04 	addi	sp,sp,-24
8111f9f8:	de00012e 	bgeu	sp,et,8111fa00 <__submore+0xc>
8111f9fc:	003b68fa 	trap	3
8111fa00:	dc000015 	stw	r16,0(sp)
8111fa04:	2821883a 	mov	r16,r5
8111fa08:	29400c17 	ldw	r5,48(r5)
8111fa0c:	dfc00515 	stw	ra,20(sp)
8111fa10:	dd000415 	stw	r20,16(sp)
8111fa14:	dcc00315 	stw	r19,12(sp)
8111fa18:	dc800215 	stw	r18,8(sp)
8111fa1c:	dc400115 	stw	r17,4(sp)
8111fa20:	80801004 	addi	r2,r16,64
8111fa24:	28801726 	beq	r5,r2,8111fa84 <__submore+0x90>
8111fa28:	84400d17 	ldw	r17,52(r16)
8111fa2c:	8c67883a 	add	r19,r17,r17
8111fa30:	980d883a 	mov	r6,r19
8111fa34:	111be800 	call	8111be80 <_realloc_r>
8111fa38:	1025883a 	mov	r18,r2
8111fa3c:	10002226 	beq	r2,zero,8111fac8 <__submore+0xd4>
8111fa40:	1469883a 	add	r20,r2,r17
8111fa44:	880d883a 	mov	r6,r17
8111fa48:	100b883a 	mov	r5,r2
8111fa4c:	a009883a 	mov	r4,r20
8111fa50:	1110ea80 	call	81110ea8 <memcpy>
8111fa54:	0005883a 	mov	r2,zero
8111fa58:	85000015 	stw	r20,0(r16)
8111fa5c:	84800c15 	stw	r18,48(r16)
8111fa60:	84c00d15 	stw	r19,52(r16)
8111fa64:	dfc00517 	ldw	ra,20(sp)
8111fa68:	dd000417 	ldw	r20,16(sp)
8111fa6c:	dcc00317 	ldw	r19,12(sp)
8111fa70:	dc800217 	ldw	r18,8(sp)
8111fa74:	dc400117 	ldw	r17,4(sp)
8111fa78:	dc000017 	ldw	r16,0(sp)
8111fa7c:	dec00604 	addi	sp,sp,24
8111fa80:	f800283a 	ret
8111fa84:	04410004 	movi	r17,1024
8111fa88:	880b883a 	mov	r5,r17
8111fa8c:	11106940 	call	81110694 <_malloc_r>
8111fa90:	1007883a 	mov	r3,r2
8111fa94:	10000c26 	beq	r2,zero,8111fac8 <__submore+0xd4>
8111fa98:	80801083 	ldbu	r2,66(r16)
8111fa9c:	80c00c15 	stw	r3,48(r16)
8111faa0:	84400d15 	stw	r17,52(r16)
8111faa4:	1880ffc5 	stb	r2,1023(r3)
8111faa8:	81401043 	ldbu	r5,65(r16)
8111faac:	1900ff44 	addi	r4,r3,1021
8111fab0:	0005883a 	mov	r2,zero
8111fab4:	1940ff85 	stb	r5,1022(r3)
8111fab8:	81401003 	ldbu	r5,64(r16)
8111fabc:	1940ff45 	stb	r5,1021(r3)
8111fac0:	81000015 	stw	r4,0(r16)
8111fac4:	003fe706 	br	8111fa64 <__reset+0xfb0ffa64>
8111fac8:	00bfffc4 	movi	r2,-1
8111facc:	003fe506 	br	8111fa64 <__reset+0xfb0ffa64>

8111fad0 <_ungetc_r>:
8111fad0:	00bfffc4 	movi	r2,-1
8111fad4:	28806326 	beq	r5,r2,8111fc64 <_ungetc_r+0x194>
8111fad8:	defffb04 	addi	sp,sp,-20
8111fadc:	de00012e 	bgeu	sp,et,8111fae4 <_ungetc_r+0x14>
8111fae0:	003b68fa 	trap	3
8111fae4:	dcc00315 	stw	r19,12(sp)
8111fae8:	dc400115 	stw	r17,4(sp)
8111faec:	dc000015 	stw	r16,0(sp)
8111faf0:	dfc00415 	stw	ra,16(sp)
8111faf4:	dc800215 	stw	r18,8(sp)
8111faf8:	2023883a 	mov	r17,r4
8111fafc:	3021883a 	mov	r16,r6
8111fb00:	2827883a 	mov	r19,r5
8111fb04:	20000226 	beq	r4,zero,8111fb10 <_ungetc_r+0x40>
8111fb08:	20800e17 	ldw	r2,56(r4)
8111fb0c:	10002e26 	beq	r2,zero,8111fbc8 <_ungetc_r+0xf8>
8111fb10:	80c0030b 	ldhu	r3,12(r16)
8111fb14:	1888000c 	andi	r2,r3,8192
8111fb18:	1000051e 	bne	r2,zero,8111fb30 <_ungetc_r+0x60>
8111fb1c:	81001917 	ldw	r4,100(r16)
8111fb20:	00b7ffc4 	movi	r2,-8193
8111fb24:	18c80014 	ori	r3,r3,8192
8111fb28:	2084703a 	and	r2,r4,r2
8111fb2c:	80801915 	stw	r2,100(r16)
8111fb30:	00bff7c4 	movi	r2,-33
8111fb34:	1884703a 	and	r2,r3,r2
8111fb38:	8080030d 	sth	r2,12(r16)
8111fb3c:	1900010c 	andi	r4,r3,4
8111fb40:	2000061e 	bne	r4,zero,8111fb5c <_ungetc_r+0x8c>
8111fb44:	1900040c 	andi	r4,r3,16
8111fb48:	20001d26 	beq	r4,zero,8111fbc0 <_ungetc_r+0xf0>
8111fb4c:	18c0020c 	andi	r3,r3,8
8111fb50:	1800331e 	bne	r3,zero,8111fc20 <_ungetc_r+0x150>
8111fb54:	10800114 	ori	r2,r2,4
8111fb58:	8080030d 	sth	r2,12(r16)
8111fb5c:	80800c17 	ldw	r2,48(r16)
8111fb60:	9c803fcc 	andi	r18,r19,255
8111fb64:	10001a26 	beq	r2,zero,8111fbd0 <_ungetc_r+0x100>
8111fb68:	80c00117 	ldw	r3,4(r16)
8111fb6c:	80800d17 	ldw	r2,52(r16)
8111fb70:	18800f0e 	bge	r3,r2,8111fbb0 <_ungetc_r+0xe0>
8111fb74:	80c00017 	ldw	r3,0(r16)
8111fb78:	9005883a 	mov	r2,r18
8111fb7c:	193fffc4 	addi	r4,r3,-1
8111fb80:	81000015 	stw	r4,0(r16)
8111fb84:	1cffffc5 	stb	r19,-1(r3)
8111fb88:	80c00117 	ldw	r3,4(r16)
8111fb8c:	18c00044 	addi	r3,r3,1
8111fb90:	80c00115 	stw	r3,4(r16)
8111fb94:	dfc00417 	ldw	ra,16(sp)
8111fb98:	dcc00317 	ldw	r19,12(sp)
8111fb9c:	dc800217 	ldw	r18,8(sp)
8111fba0:	dc400117 	ldw	r17,4(sp)
8111fba4:	dc000017 	ldw	r16,0(sp)
8111fba8:	dec00504 	addi	sp,sp,20
8111fbac:	f800283a 	ret
8111fbb0:	800b883a 	mov	r5,r16
8111fbb4:	8809883a 	mov	r4,r17
8111fbb8:	111f9f40 	call	8111f9f4 <__submore>
8111fbbc:	103fed26 	beq	r2,zero,8111fb74 <__reset+0xfb0ffb74>
8111fbc0:	00bfffc4 	movi	r2,-1
8111fbc4:	003ff306 	br	8111fb94 <__reset+0xfb0ffb94>
8111fbc8:	11199540 	call	81119954 <__sinit>
8111fbcc:	003fd006 	br	8111fb10 <__reset+0xfb0ffb10>
8111fbd0:	80c00417 	ldw	r3,16(r16)
8111fbd4:	80800017 	ldw	r2,0(r16)
8111fbd8:	18000326 	beq	r3,zero,8111fbe8 <_ungetc_r+0x118>
8111fbdc:	1880022e 	bgeu	r3,r2,8111fbe8 <_ungetc_r+0x118>
8111fbe0:	10ffffc3 	ldbu	r3,-1(r2)
8111fbe4:	90c01826 	beq	r18,r3,8111fc48 <_ungetc_r+0x178>
8111fbe8:	81400117 	ldw	r5,4(r16)
8111fbec:	80800e15 	stw	r2,56(r16)
8111fbf0:	008000c4 	movi	r2,3
8111fbf4:	81001004 	addi	r4,r16,64
8111fbf8:	80c01084 	addi	r3,r16,66
8111fbfc:	80800d15 	stw	r2,52(r16)
8111fc00:	00800044 	movi	r2,1
8111fc04:	80800115 	stw	r2,4(r16)
8111fc08:	81400f15 	stw	r5,60(r16)
8111fc0c:	81000c15 	stw	r4,48(r16)
8111fc10:	84c01085 	stb	r19,66(r16)
8111fc14:	80c00015 	stw	r3,0(r16)
8111fc18:	9005883a 	mov	r2,r18
8111fc1c:	003fdd06 	br	8111fb94 <__reset+0xfb0ffb94>
8111fc20:	800b883a 	mov	r5,r16
8111fc24:	8809883a 	mov	r4,r17
8111fc28:	11195580 	call	81119558 <_fflush_r>
8111fc2c:	103fe41e 	bne	r2,zero,8111fbc0 <__reset+0xfb0ffbc0>
8111fc30:	8080030b 	ldhu	r2,12(r16)
8111fc34:	00fffdc4 	movi	r3,-9
8111fc38:	80000215 	stw	zero,8(r16)
8111fc3c:	1884703a 	and	r2,r3,r2
8111fc40:	80000615 	stw	zero,24(r16)
8111fc44:	003fc306 	br	8111fb54 <__reset+0xfb0ffb54>
8111fc48:	80c00117 	ldw	r3,4(r16)
8111fc4c:	10bfffc4 	addi	r2,r2,-1
8111fc50:	80800015 	stw	r2,0(r16)
8111fc54:	18800044 	addi	r2,r3,1
8111fc58:	80800115 	stw	r2,4(r16)
8111fc5c:	9005883a 	mov	r2,r18
8111fc60:	003fcc06 	br	8111fb94 <__reset+0xfb0ffb94>
8111fc64:	00bfffc4 	movi	r2,-1
8111fc68:	f800283a 	ret

8111fc6c <ungetc>:
8111fc6c:	00a04534 	movhi	r2,33044
8111fc70:	10ba2704 	addi	r2,r2,-5988
8111fc74:	280d883a 	mov	r6,r5
8111fc78:	200b883a 	mov	r5,r4
8111fc7c:	11000017 	ldw	r4,0(r2)
8111fc80:	111fad01 	jmpi	8111fad0 <_ungetc_r>

8111fc84 <__sprint_r.part.0>:
8111fc84:	defff604 	addi	sp,sp,-40
8111fc88:	de00012e 	bgeu	sp,et,8111fc90 <__sprint_r.part.0+0xc>
8111fc8c:	003b68fa 	trap	3
8111fc90:	28801917 	ldw	r2,100(r5)
8111fc94:	dd400515 	stw	r21,20(sp)
8111fc98:	dfc00915 	stw	ra,36(sp)
8111fc9c:	df000815 	stw	fp,32(sp)
8111fca0:	ddc00715 	stw	r23,28(sp)
8111fca4:	dd800615 	stw	r22,24(sp)
8111fca8:	dd000415 	stw	r20,16(sp)
8111fcac:	dcc00315 	stw	r19,12(sp)
8111fcb0:	dc800215 	stw	r18,8(sp)
8111fcb4:	dc400115 	stw	r17,4(sp)
8111fcb8:	dc000015 	stw	r16,0(sp)
8111fcbc:	1088000c 	andi	r2,r2,8192
8111fcc0:	302b883a 	mov	r21,r6
8111fcc4:	10002e26 	beq	r2,zero,8111fd80 <__sprint_r.part.0+0xfc>
8111fcc8:	30800217 	ldw	r2,8(r6)
8111fccc:	35800017 	ldw	r22,0(r6)
8111fcd0:	10002926 	beq	r2,zero,8111fd78 <__sprint_r.part.0+0xf4>
8111fcd4:	2827883a 	mov	r19,r5
8111fcd8:	2029883a 	mov	r20,r4
8111fcdc:	b5c00104 	addi	r23,r22,4
8111fce0:	04bfffc4 	movi	r18,-1
8111fce4:	bc400017 	ldw	r17,0(r23)
8111fce8:	b4000017 	ldw	r16,0(r22)
8111fcec:	0039883a 	mov	fp,zero
8111fcf0:	8822d0ba 	srli	r17,r17,2
8111fcf4:	8800031e 	bne	r17,zero,8111fd04 <__sprint_r.part.0+0x80>
8111fcf8:	00001806 	br	8111fd5c <__sprint_r.part.0+0xd8>
8111fcfc:	84000104 	addi	r16,r16,4
8111fd00:	8f001526 	beq	r17,fp,8111fd58 <__sprint_r.part.0+0xd4>
8111fd04:	81400017 	ldw	r5,0(r16)
8111fd08:	980d883a 	mov	r6,r19
8111fd0c:	a009883a 	mov	r4,r20
8111fd10:	11216280 	call	81121628 <_fputwc_r>
8111fd14:	e7000044 	addi	fp,fp,1
8111fd18:	14bff81e 	bne	r2,r18,8111fcfc <__reset+0xfb0ffcfc>
8111fd1c:	9005883a 	mov	r2,r18
8111fd20:	a8000215 	stw	zero,8(r21)
8111fd24:	a8000115 	stw	zero,4(r21)
8111fd28:	dfc00917 	ldw	ra,36(sp)
8111fd2c:	df000817 	ldw	fp,32(sp)
8111fd30:	ddc00717 	ldw	r23,28(sp)
8111fd34:	dd800617 	ldw	r22,24(sp)
8111fd38:	dd400517 	ldw	r21,20(sp)
8111fd3c:	dd000417 	ldw	r20,16(sp)
8111fd40:	dcc00317 	ldw	r19,12(sp)
8111fd44:	dc800217 	ldw	r18,8(sp)
8111fd48:	dc400117 	ldw	r17,4(sp)
8111fd4c:	dc000017 	ldw	r16,0(sp)
8111fd50:	dec00a04 	addi	sp,sp,40
8111fd54:	f800283a 	ret
8111fd58:	a8800217 	ldw	r2,8(r21)
8111fd5c:	8c63883a 	add	r17,r17,r17
8111fd60:	8c63883a 	add	r17,r17,r17
8111fd64:	1445c83a 	sub	r2,r2,r17
8111fd68:	a8800215 	stw	r2,8(r21)
8111fd6c:	b5800204 	addi	r22,r22,8
8111fd70:	bdc00204 	addi	r23,r23,8
8111fd74:	103fdb1e 	bne	r2,zero,8111fce4 <__reset+0xfb0ffce4>
8111fd78:	0005883a 	mov	r2,zero
8111fd7c:	003fe806 	br	8111fd20 <__reset+0xfb0ffd20>
8111fd80:	111a1040 	call	8111a104 <__sfvwrite_r>
8111fd84:	003fe606 	br	8111fd20 <__reset+0xfb0ffd20>

8111fd88 <__sprint_r>:
8111fd88:	30c00217 	ldw	r3,8(r6)
8111fd8c:	18000126 	beq	r3,zero,8111fd94 <__sprint_r+0xc>
8111fd90:	111fc841 	jmpi	8111fc84 <__sprint_r.part.0>
8111fd94:	30000115 	stw	zero,4(r6)
8111fd98:	0005883a 	mov	r2,zero
8111fd9c:	f800283a 	ret

8111fda0 <___vfiprintf_internal_r>:
8111fda0:	deffc904 	addi	sp,sp,-220
8111fda4:	de00012e 	bgeu	sp,et,8111fdac <___vfiprintf_internal_r+0xc>
8111fda8:	003b68fa 	trap	3
8111fdac:	df003515 	stw	fp,212(sp)
8111fdb0:	dd003115 	stw	r20,196(sp)
8111fdb4:	dfc03615 	stw	ra,216(sp)
8111fdb8:	ddc03415 	stw	r23,208(sp)
8111fdbc:	dd803315 	stw	r22,204(sp)
8111fdc0:	dd403215 	stw	r21,200(sp)
8111fdc4:	dcc03015 	stw	r19,192(sp)
8111fdc8:	dc802f15 	stw	r18,188(sp)
8111fdcc:	dc402e15 	stw	r17,184(sp)
8111fdd0:	dc002d15 	stw	r16,180(sp)
8111fdd4:	d9002015 	stw	r4,128(sp)
8111fdd8:	d9c02215 	stw	r7,136(sp)
8111fddc:	2829883a 	mov	r20,r5
8111fde0:	3039883a 	mov	fp,r6
8111fde4:	20000226 	beq	r4,zero,8111fdf0 <___vfiprintf_internal_r+0x50>
8111fde8:	20800e17 	ldw	r2,56(r4)
8111fdec:	1000cf26 	beq	r2,zero,8112012c <___vfiprintf_internal_r+0x38c>
8111fdf0:	a080030b 	ldhu	r2,12(r20)
8111fdf4:	10c8000c 	andi	r3,r2,8192
8111fdf8:	1800061e 	bne	r3,zero,8111fe14 <___vfiprintf_internal_r+0x74>
8111fdfc:	a1001917 	ldw	r4,100(r20)
8111fe00:	00f7ffc4 	movi	r3,-8193
8111fe04:	10880014 	ori	r2,r2,8192
8111fe08:	20c6703a 	and	r3,r4,r3
8111fe0c:	a080030d 	sth	r2,12(r20)
8111fe10:	a0c01915 	stw	r3,100(r20)
8111fe14:	10c0020c 	andi	r3,r2,8
8111fe18:	1800a926 	beq	r3,zero,811200c0 <___vfiprintf_internal_r+0x320>
8111fe1c:	a0c00417 	ldw	r3,16(r20)
8111fe20:	1800a726 	beq	r3,zero,811200c0 <___vfiprintf_internal_r+0x320>
8111fe24:	1080068c 	andi	r2,r2,26
8111fe28:	00c00284 	movi	r3,10
8111fe2c:	10c0ac26 	beq	r2,r3,811200e0 <___vfiprintf_internal_r+0x340>
8111fe30:	da801a04 	addi	r10,sp,104
8111fe34:	da801e15 	stw	r10,120(sp)
8111fe38:	d8801e17 	ldw	r2,120(sp)
8111fe3c:	da8019c4 	addi	r10,sp,103
8111fe40:	05a04534 	movhi	r22,33044
8111fe44:	05e04534 	movhi	r23,33044
8111fe48:	da801f15 	stw	r10,124(sp)
8111fe4c:	1295c83a 	sub	r10,r2,r10
8111fe50:	b5b1bc04 	addi	r22,r22,-14608
8111fe54:	bdf1b804 	addi	r23,r23,-14624
8111fe58:	dec01a15 	stw	sp,104(sp)
8111fe5c:	d8001c15 	stw	zero,112(sp)
8111fe60:	d8001b15 	stw	zero,108(sp)
8111fe64:	d8002615 	stw	zero,152(sp)
8111fe68:	d8002315 	stw	zero,140(sp)
8111fe6c:	da802715 	stw	r10,156(sp)
8111fe70:	d811883a 	mov	r8,sp
8111fe74:	dd002115 	stw	r20,132(sp)
8111fe78:	e021883a 	mov	r16,fp
8111fe7c:	80800007 	ldb	r2,0(r16)
8111fe80:	1003ea26 	beq	r2,zero,81120e2c <___vfiprintf_internal_r+0x108c>
8111fe84:	00c00944 	movi	r3,37
8111fe88:	8025883a 	mov	r18,r16
8111fe8c:	10c0021e 	bne	r2,r3,8111fe98 <___vfiprintf_internal_r+0xf8>
8111fe90:	00001606 	br	8111feec <___vfiprintf_internal_r+0x14c>
8111fe94:	10c00326 	beq	r2,r3,8111fea4 <___vfiprintf_internal_r+0x104>
8111fe98:	94800044 	addi	r18,r18,1
8111fe9c:	90800007 	ldb	r2,0(r18)
8111fea0:	103ffc1e 	bne	r2,zero,8111fe94 <__reset+0xfb0ffe94>
8111fea4:	9423c83a 	sub	r17,r18,r16
8111fea8:	88001026 	beq	r17,zero,8111feec <___vfiprintf_internal_r+0x14c>
8111feac:	d8c01c17 	ldw	r3,112(sp)
8111feb0:	d8801b17 	ldw	r2,108(sp)
8111feb4:	44000015 	stw	r16,0(r8)
8111feb8:	88c7883a 	add	r3,r17,r3
8111febc:	10800044 	addi	r2,r2,1
8111fec0:	44400115 	stw	r17,4(r8)
8111fec4:	d8c01c15 	stw	r3,112(sp)
8111fec8:	d8801b15 	stw	r2,108(sp)
8111fecc:	010001c4 	movi	r4,7
8111fed0:	2080760e 	bge	r4,r2,811200ac <___vfiprintf_internal_r+0x30c>
8111fed4:	1803821e 	bne	r3,zero,81120ce0 <___vfiprintf_internal_r+0xf40>
8111fed8:	da802317 	ldw	r10,140(sp)
8111fedc:	d8001b15 	stw	zero,108(sp)
8111fee0:	d811883a 	mov	r8,sp
8111fee4:	5455883a 	add	r10,r10,r17
8111fee8:	da802315 	stw	r10,140(sp)
8111feec:	90800007 	ldb	r2,0(r18)
8111fef0:	10044626 	beq	r2,zero,8112100c <___vfiprintf_internal_r+0x126c>
8111fef4:	90c00047 	ldb	r3,1(r18)
8111fef8:	94000044 	addi	r16,r18,1
8111fefc:	d8001d85 	stb	zero,118(sp)
8111ff00:	0009883a 	mov	r4,zero
8111ff04:	000f883a 	mov	r7,zero
8111ff08:	027fffc4 	movi	r9,-1
8111ff0c:	0023883a 	mov	r17,zero
8111ff10:	0029883a 	mov	r20,zero
8111ff14:	01401604 	movi	r5,88
8111ff18:	01800244 	movi	r6,9
8111ff1c:	03400a84 	movi	r13,42
8111ff20:	03001b04 	movi	r12,108
8111ff24:	84000044 	addi	r16,r16,1
8111ff28:	18bff804 	addi	r2,r3,-32
8111ff2c:	28827336 	bltu	r5,r2,811208fc <___vfiprintf_internal_r+0xb5c>
8111ff30:	100490ba 	slli	r2,r2,2
8111ff34:	02a044b4 	movhi	r10,33042
8111ff38:	52bfd204 	addi	r10,r10,-184
8111ff3c:	1285883a 	add	r2,r2,r10
8111ff40:	10800017 	ldw	r2,0(r2)
8111ff44:	1000683a 	jmp	r2
8111ff48:	81120630 	cmpltui	r4,r16,18456
8111ff4c:	811208fc 	xorhi	r4,r16,18467
8111ff50:	811208fc 	xorhi	r4,r16,18467
8111ff54:	81120650 	cmplti	r4,r16,18457
8111ff58:	811208fc 	xorhi	r4,r16,18467
8111ff5c:	811208fc 	xorhi	r4,r16,18467
8111ff60:	811208fc 	xorhi	r4,r16,18467
8111ff64:	811208fc 	xorhi	r4,r16,18467
8111ff68:	811208fc 	xorhi	r4,r16,18467
8111ff6c:	811208fc 	xorhi	r4,r16,18467
8111ff70:	81120838 	rdprs	r4,r16,18464
8111ff74:	81120854 	ori	r4,r16,18465
8111ff78:	811208fc 	xorhi	r4,r16,18467
8111ff7c:	8112013c 	xorhi	r4,r16,18436
8111ff80:	81120864 	muli	r4,r16,18465
8111ff84:	811208fc 	xorhi	r4,r16,18467
8111ff88:	8112065c 	xori	r4,r16,18457
8111ff8c:	81120668 	cmpgeui	r4,r16,18457
8111ff90:	81120668 	cmpgeui	r4,r16,18457
8111ff94:	81120668 	cmpgeui	r4,r16,18457
8111ff98:	81120668 	cmpgeui	r4,r16,18457
8111ff9c:	81120668 	cmpgeui	r4,r16,18457
8111ffa0:	81120668 	cmpgeui	r4,r16,18457
8111ffa4:	81120668 	cmpgeui	r4,r16,18457
8111ffa8:	81120668 	cmpgeui	r4,r16,18457
8111ffac:	81120668 	cmpgeui	r4,r16,18457
8111ffb0:	811208fc 	xorhi	r4,r16,18467
8111ffb4:	811208fc 	xorhi	r4,r16,18467
8111ffb8:	811208fc 	xorhi	r4,r16,18467
8111ffbc:	811208fc 	xorhi	r4,r16,18467
8111ffc0:	811208fc 	xorhi	r4,r16,18467
8111ffc4:	811208fc 	xorhi	r4,r16,18467
8111ffc8:	811208fc 	xorhi	r4,r16,18467
8111ffcc:	811208fc 	xorhi	r4,r16,18467
8111ffd0:	811208fc 	xorhi	r4,r16,18467
8111ffd4:	811208fc 	xorhi	r4,r16,18467
8111ffd8:	81120694 	ori	r4,r16,18458
8111ffdc:	811208fc 	xorhi	r4,r16,18467
8111ffe0:	811208fc 	xorhi	r4,r16,18467
8111ffe4:	811208fc 	xorhi	r4,r16,18467
8111ffe8:	811208fc 	xorhi	r4,r16,18467
8111ffec:	811208fc 	xorhi	r4,r16,18467
8111fff0:	811208fc 	xorhi	r4,r16,18467
8111fff4:	811208fc 	xorhi	r4,r16,18467
8111fff8:	811208fc 	xorhi	r4,r16,18467
8111fffc:	811208fc 	xorhi	r4,r16,18467
81120000:	811208fc 	xorhi	r4,r16,18467
81120004:	811206cc 	andi	r4,r16,18459
81120008:	811208fc 	xorhi	r4,r16,18467
8112000c:	811208fc 	xorhi	r4,r16,18467
81120010:	811208fc 	xorhi	r4,r16,18467
81120014:	811208fc 	xorhi	r4,r16,18467
81120018:	811208fc 	xorhi	r4,r16,18467
8112001c:	81120724 	muli	r4,r16,18460
81120020:	811208fc 	xorhi	r4,r16,18467
81120024:	811208fc 	xorhi	r4,r16,18467
81120028:	81120794 	ori	r4,r16,18462
8112002c:	811208fc 	xorhi	r4,r16,18467
81120030:	811208fc 	xorhi	r4,r16,18467
81120034:	811208fc 	xorhi	r4,r16,18467
81120038:	811208fc 	xorhi	r4,r16,18467
8112003c:	811208fc 	xorhi	r4,r16,18467
81120040:	811208fc 	xorhi	r4,r16,18467
81120044:	811208fc 	xorhi	r4,r16,18467
81120048:	811208fc 	xorhi	r4,r16,18467
8112004c:	811208fc 	xorhi	r4,r16,18467
81120050:	811208fc 	xorhi	r4,r16,18467
81120054:	81120540 	call	88112054 <__reset+0x20f2054>
81120058:	8112056c 	andhi	r4,r16,18453
8112005c:	811208fc 	xorhi	r4,r16,18467
81120060:	811208fc 	xorhi	r4,r16,18467
81120064:	811208fc 	xorhi	r4,r16,18467
81120068:	811208a4 	muli	r4,r16,18466
8112006c:	8112056c 	andhi	r4,r16,18453
81120070:	811208fc 	xorhi	r4,r16,18467
81120074:	811208fc 	xorhi	r4,r16,18467
81120078:	81120400 	call	88112040 <__reset+0x20f2040>
8112007c:	811208fc 	xorhi	r4,r16,18467
81120080:	81120410 	cmplti	r4,r16,18448
81120084:	8112044c 	andi	r4,r16,18449
81120088:	81120148 	cmpgei	r4,r16,18437
8112008c:	811203f4 	orhi	r4,r16,18447
81120090:	811208fc 	xorhi	r4,r16,18467
81120094:	811207d0 	cmplti	r4,r16,18463
81120098:	811208fc 	xorhi	r4,r16,18467
8112009c:	81120828 	cmpgeui	r4,r16,18464
811200a0:	811208fc 	xorhi	r4,r16,18467
811200a4:	811208fc 	xorhi	r4,r16,18467
811200a8:	811204ec 	andhi	r4,r16,18451
811200ac:	42000204 	addi	r8,r8,8
811200b0:	da802317 	ldw	r10,140(sp)
811200b4:	5455883a 	add	r10,r10,r17
811200b8:	da802315 	stw	r10,140(sp)
811200bc:	003f8b06 	br	8111feec <__reset+0xfb0ffeec>
811200c0:	d9002017 	ldw	r4,128(sp)
811200c4:	a00b883a 	mov	r5,r20
811200c8:	11178e40 	call	811178e4 <__swsetup_r>
811200cc:	1003b11e 	bne	r2,zero,81120f94 <___vfiprintf_internal_r+0x11f4>
811200d0:	a080030b 	ldhu	r2,12(r20)
811200d4:	00c00284 	movi	r3,10
811200d8:	1080068c 	andi	r2,r2,26
811200dc:	10ff541e 	bne	r2,r3,8111fe30 <__reset+0xfb0ffe30>
811200e0:	a080038f 	ldh	r2,14(r20)
811200e4:	103f5216 	blt	r2,zero,8111fe30 <__reset+0xfb0ffe30>
811200e8:	d9c02217 	ldw	r7,136(sp)
811200ec:	d9002017 	ldw	r4,128(sp)
811200f0:	e00d883a 	mov	r6,fp
811200f4:	a00b883a 	mov	r5,r20
811200f8:	11212200 	call	81121220 <__sbprintf>
811200fc:	dfc03617 	ldw	ra,216(sp)
81120100:	df003517 	ldw	fp,212(sp)
81120104:	ddc03417 	ldw	r23,208(sp)
81120108:	dd803317 	ldw	r22,204(sp)
8112010c:	dd403217 	ldw	r21,200(sp)
81120110:	dd003117 	ldw	r20,196(sp)
81120114:	dcc03017 	ldw	r19,192(sp)
81120118:	dc802f17 	ldw	r18,188(sp)
8112011c:	dc402e17 	ldw	r17,184(sp)
81120120:	dc002d17 	ldw	r16,180(sp)
81120124:	dec03704 	addi	sp,sp,220
81120128:	f800283a 	ret
8112012c:	11199540 	call	81119954 <__sinit>
81120130:	003f2f06 	br	8111fdf0 <__reset+0xfb0ffdf0>
81120134:	0463c83a 	sub	r17,zero,r17
81120138:	d8802215 	stw	r2,136(sp)
8112013c:	a5000114 	ori	r20,r20,4
81120140:	80c00007 	ldb	r3,0(r16)
81120144:	003f7706 	br	8111ff24 <__reset+0xfb0fff24>
81120148:	00800c04 	movi	r2,48
8112014c:	da802217 	ldw	r10,136(sp)
81120150:	d8801d05 	stb	r2,116(sp)
81120154:	00801e04 	movi	r2,120
81120158:	d8801d45 	stb	r2,117(sp)
8112015c:	d8001d85 	stb	zero,118(sp)
81120160:	50c00104 	addi	r3,r10,4
81120164:	54800017 	ldw	r18,0(r10)
81120168:	0027883a 	mov	r19,zero
8112016c:	a0800094 	ori	r2,r20,2
81120170:	48030b16 	blt	r9,zero,81120da0 <___vfiprintf_internal_r+0x1000>
81120174:	00bfdfc4 	movi	r2,-129
81120178:	a096703a 	and	r11,r20,r2
8112017c:	d8c02215 	stw	r3,136(sp)
81120180:	5d000094 	ori	r20,r11,2
81120184:	90032b1e 	bne	r18,zero,81120e34 <___vfiprintf_internal_r+0x1094>
81120188:	00a04534 	movhi	r2,33044
8112018c:	10b12604 	addi	r2,r2,-15208
81120190:	d8802615 	stw	r2,152(sp)
81120194:	0039883a 	mov	fp,zero
81120198:	48017b1e 	bne	r9,zero,81120788 <___vfiprintf_internal_r+0x9e8>
8112019c:	0013883a 	mov	r9,zero
811201a0:	0027883a 	mov	r19,zero
811201a4:	dd401a04 	addi	r21,sp,104
811201a8:	4825883a 	mov	r18,r9
811201ac:	4cc0010e 	bge	r9,r19,811201b4 <___vfiprintf_internal_r+0x414>
811201b0:	9825883a 	mov	r18,r19
811201b4:	e7003fcc 	andi	fp,fp,255
811201b8:	e700201c 	xori	fp,fp,128
811201bc:	e73fe004 	addi	fp,fp,-128
811201c0:	e0000126 	beq	fp,zero,811201c8 <___vfiprintf_internal_r+0x428>
811201c4:	94800044 	addi	r18,r18,1
811201c8:	a380008c 	andi	r14,r20,2
811201cc:	70000126 	beq	r14,zero,811201d4 <___vfiprintf_internal_r+0x434>
811201d0:	94800084 	addi	r18,r18,2
811201d4:	a700210c 	andi	fp,r20,132
811201d8:	e001df1e 	bne	fp,zero,81120958 <___vfiprintf_internal_r+0xbb8>
811201dc:	8c87c83a 	sub	r3,r17,r18
811201e0:	00c1dd0e 	bge	zero,r3,81120958 <___vfiprintf_internal_r+0xbb8>
811201e4:	01c00404 	movi	r7,16
811201e8:	d8801c17 	ldw	r2,112(sp)
811201ec:	38c3ad0e 	bge	r7,r3,811210a4 <___vfiprintf_internal_r+0x1304>
811201f0:	02a04534 	movhi	r10,33044
811201f4:	52b1bc04 	addi	r10,r10,-14608
811201f8:	dc002915 	stw	r16,164(sp)
811201fc:	d9801b17 	ldw	r6,108(sp)
81120200:	da802415 	stw	r10,144(sp)
81120204:	03c001c4 	movi	r15,7
81120208:	da402515 	stw	r9,148(sp)
8112020c:	db802815 	stw	r14,160(sp)
81120210:	1821883a 	mov	r16,r3
81120214:	00000506 	br	8112022c <___vfiprintf_internal_r+0x48c>
81120218:	31400084 	addi	r5,r6,2
8112021c:	42000204 	addi	r8,r8,8
81120220:	200d883a 	mov	r6,r4
81120224:	843ffc04 	addi	r16,r16,-16
81120228:	3c000d0e 	bge	r7,r16,81120260 <___vfiprintf_internal_r+0x4c0>
8112022c:	10800404 	addi	r2,r2,16
81120230:	31000044 	addi	r4,r6,1
81120234:	45800015 	stw	r22,0(r8)
81120238:	41c00115 	stw	r7,4(r8)
8112023c:	d8801c15 	stw	r2,112(sp)
81120240:	d9001b15 	stw	r4,108(sp)
81120244:	793ff40e 	bge	r15,r4,81120218 <__reset+0xfb100218>
81120248:	1001b51e 	bne	r2,zero,81120920 <___vfiprintf_internal_r+0xb80>
8112024c:	843ffc04 	addi	r16,r16,-16
81120250:	000d883a 	mov	r6,zero
81120254:	01400044 	movi	r5,1
81120258:	d811883a 	mov	r8,sp
8112025c:	3c3ff316 	blt	r7,r16,8112022c <__reset+0xfb10022c>
81120260:	8007883a 	mov	r3,r16
81120264:	da402517 	ldw	r9,148(sp)
81120268:	db802817 	ldw	r14,160(sp)
8112026c:	dc002917 	ldw	r16,164(sp)
81120270:	da802417 	ldw	r10,144(sp)
81120274:	1885883a 	add	r2,r3,r2
81120278:	40c00115 	stw	r3,4(r8)
8112027c:	42800015 	stw	r10,0(r8)
81120280:	d8801c15 	stw	r2,112(sp)
81120284:	d9401b15 	stw	r5,108(sp)
81120288:	00c001c4 	movi	r3,7
8112028c:	19426016 	blt	r3,r5,81120c10 <___vfiprintf_internal_r+0xe70>
81120290:	d8c01d87 	ldb	r3,118(sp)
81120294:	42000204 	addi	r8,r8,8
81120298:	29000044 	addi	r4,r5,1
8112029c:	1801b31e 	bne	r3,zero,8112096c <___vfiprintf_internal_r+0xbcc>
811202a0:	7001c026 	beq	r14,zero,811209a4 <___vfiprintf_internal_r+0xc04>
811202a4:	d8c01d04 	addi	r3,sp,116
811202a8:	10800084 	addi	r2,r2,2
811202ac:	40c00015 	stw	r3,0(r8)
811202b0:	00c00084 	movi	r3,2
811202b4:	40c00115 	stw	r3,4(r8)
811202b8:	d8801c15 	stw	r2,112(sp)
811202bc:	d9001b15 	stw	r4,108(sp)
811202c0:	00c001c4 	movi	r3,7
811202c4:	1902650e 	bge	r3,r4,81120c5c <___vfiprintf_internal_r+0xebc>
811202c8:	10029a1e 	bne	r2,zero,81120d34 <___vfiprintf_internal_r+0xf94>
811202cc:	00c02004 	movi	r3,128
811202d0:	01000044 	movi	r4,1
811202d4:	000b883a 	mov	r5,zero
811202d8:	d811883a 	mov	r8,sp
811202dc:	e0c1b31e 	bne	fp,r3,811209ac <___vfiprintf_internal_r+0xc0c>
811202e0:	8cb9c83a 	sub	fp,r17,r18
811202e4:	0701b10e 	bge	zero,fp,811209ac <___vfiprintf_internal_r+0xc0c>
811202e8:	01c00404 	movi	r7,16
811202ec:	3f03890e 	bge	r7,fp,81121114 <___vfiprintf_internal_r+0x1374>
811202f0:	00e04534 	movhi	r3,33044
811202f4:	18f1b804 	addi	r3,r3,-14624
811202f8:	d8c02415 	stw	r3,144(sp)
811202fc:	8007883a 	mov	r3,r16
81120300:	034001c4 	movi	r13,7
81120304:	e021883a 	mov	r16,fp
81120308:	da402515 	stw	r9,148(sp)
8112030c:	1839883a 	mov	fp,r3
81120310:	00000506 	br	81120328 <___vfiprintf_internal_r+0x588>
81120314:	29800084 	addi	r6,r5,2
81120318:	42000204 	addi	r8,r8,8
8112031c:	180b883a 	mov	r5,r3
81120320:	843ffc04 	addi	r16,r16,-16
81120324:	3c000d0e 	bge	r7,r16,8112035c <___vfiprintf_internal_r+0x5bc>
81120328:	10800404 	addi	r2,r2,16
8112032c:	28c00044 	addi	r3,r5,1
81120330:	45c00015 	stw	r23,0(r8)
81120334:	41c00115 	stw	r7,4(r8)
81120338:	d8801c15 	stw	r2,112(sp)
8112033c:	d8c01b15 	stw	r3,108(sp)
81120340:	68fff40e 	bge	r13,r3,81120314 <__reset+0xfb100314>
81120344:	1002241e 	bne	r2,zero,81120bd8 <___vfiprintf_internal_r+0xe38>
81120348:	843ffc04 	addi	r16,r16,-16
8112034c:	01800044 	movi	r6,1
81120350:	000b883a 	mov	r5,zero
81120354:	d811883a 	mov	r8,sp
81120358:	3c3ff316 	blt	r7,r16,81120328 <__reset+0xfb100328>
8112035c:	da402517 	ldw	r9,148(sp)
81120360:	e007883a 	mov	r3,fp
81120364:	8039883a 	mov	fp,r16
81120368:	1821883a 	mov	r16,r3
8112036c:	d8c02417 	ldw	r3,144(sp)
81120370:	1705883a 	add	r2,r2,fp
81120374:	47000115 	stw	fp,4(r8)
81120378:	40c00015 	stw	r3,0(r8)
8112037c:	d8801c15 	stw	r2,112(sp)
81120380:	d9801b15 	stw	r6,108(sp)
81120384:	00c001c4 	movi	r3,7
81120388:	19827616 	blt	r3,r6,81120d64 <___vfiprintf_internal_r+0xfc4>
8112038c:	4cf9c83a 	sub	fp,r9,r19
81120390:	42000204 	addi	r8,r8,8
81120394:	31000044 	addi	r4,r6,1
81120398:	300b883a 	mov	r5,r6
8112039c:	07018516 	blt	zero,fp,811209b4 <___vfiprintf_internal_r+0xc14>
811203a0:	9885883a 	add	r2,r19,r2
811203a4:	45400015 	stw	r21,0(r8)
811203a8:	44c00115 	stw	r19,4(r8)
811203ac:	d8801c15 	stw	r2,112(sp)
811203b0:	d9001b15 	stw	r4,108(sp)
811203b4:	00c001c4 	movi	r3,7
811203b8:	1901dd0e 	bge	r3,r4,81120b30 <___vfiprintf_internal_r+0xd90>
811203bc:	1002401e 	bne	r2,zero,81120cc0 <___vfiprintf_internal_r+0xf20>
811203c0:	d8001b15 	stw	zero,108(sp)
811203c4:	a2c0010c 	andi	r11,r20,4
811203c8:	58000226 	beq	r11,zero,811203d4 <___vfiprintf_internal_r+0x634>
811203cc:	8ca7c83a 	sub	r19,r17,r18
811203d0:	04c2f216 	blt	zero,r19,81120f9c <___vfiprintf_internal_r+0x11fc>
811203d4:	8c80010e 	bge	r17,r18,811203dc <___vfiprintf_internal_r+0x63c>
811203d8:	9023883a 	mov	r17,r18
811203dc:	da802317 	ldw	r10,140(sp)
811203e0:	5455883a 	add	r10,r10,r17
811203e4:	da802315 	stw	r10,140(sp)
811203e8:	d8001b15 	stw	zero,108(sp)
811203ec:	d811883a 	mov	r8,sp
811203f0:	003ea206 	br	8111fe7c <__reset+0xfb0ffe7c>
811203f4:	a5000814 	ori	r20,r20,32
811203f8:	80c00007 	ldb	r3,0(r16)
811203fc:	003ec906 	br	8111ff24 <__reset+0xfb0fff24>
81120400:	80c00007 	ldb	r3,0(r16)
81120404:	1b030926 	beq	r3,r12,8112102c <___vfiprintf_internal_r+0x128c>
81120408:	a5000414 	ori	r20,r20,16
8112040c:	003ec506 	br	8111ff24 <__reset+0xfb0fff24>
81120410:	21003fcc 	andi	r4,r4,255
81120414:	20035e1e 	bne	r4,zero,81121190 <___vfiprintf_internal_r+0x13f0>
81120418:	a080080c 	andi	r2,r20,32
8112041c:	1002a526 	beq	r2,zero,81120eb4 <___vfiprintf_internal_r+0x1114>
81120420:	da802217 	ldw	r10,136(sp)
81120424:	50800017 	ldw	r2,0(r10)
81120428:	da802317 	ldw	r10,140(sp)
8112042c:	5007d7fa 	srai	r3,r10,31
81120430:	da802217 	ldw	r10,136(sp)
81120434:	10c00115 	stw	r3,4(r2)
81120438:	52800104 	addi	r10,r10,4
8112043c:	da802215 	stw	r10,136(sp)
81120440:	da802317 	ldw	r10,140(sp)
81120444:	12800015 	stw	r10,0(r2)
81120448:	003e8c06 	br	8111fe7c <__reset+0xfb0ffe7c>
8112044c:	21003fcc 	andi	r4,r4,255
81120450:	2003511e 	bne	r4,zero,81121198 <___vfiprintf_internal_r+0x13f8>
81120454:	a080080c 	andi	r2,r20,32
81120458:	1000a126 	beq	r2,zero,811206e0 <___vfiprintf_internal_r+0x940>
8112045c:	da802217 	ldw	r10,136(sp)
81120460:	d8001d85 	stb	zero,118(sp)
81120464:	50800204 	addi	r2,r10,8
81120468:	54800017 	ldw	r18,0(r10)
8112046c:	54c00117 	ldw	r19,4(r10)
81120470:	4802b416 	blt	r9,zero,81120f44 <___vfiprintf_internal_r+0x11a4>
81120474:	013fdfc4 	movi	r4,-129
81120478:	94c6b03a 	or	r3,r18,r19
8112047c:	d8802215 	stw	r2,136(sp)
81120480:	a128703a 	and	r20,r20,r4
81120484:	1800a226 	beq	r3,zero,81120710 <___vfiprintf_internal_r+0x970>
81120488:	0039883a 	mov	fp,zero
8112048c:	dd401a04 	addi	r21,sp,104
81120490:	9006d0fa 	srli	r3,r18,3
81120494:	9808977a 	slli	r4,r19,29
81120498:	9826d0fa 	srli	r19,r19,3
8112049c:	948001cc 	andi	r18,r18,7
811204a0:	90800c04 	addi	r2,r18,48
811204a4:	ad7fffc4 	addi	r21,r21,-1
811204a8:	20e4b03a 	or	r18,r4,r3
811204ac:	a8800005 	stb	r2,0(r21)
811204b0:	94c6b03a 	or	r3,r18,r19
811204b4:	183ff61e 	bne	r3,zero,81120490 <__reset+0xfb100490>
811204b8:	a0c0004c 	andi	r3,r20,1
811204bc:	18005926 	beq	r3,zero,81120624 <___vfiprintf_internal_r+0x884>
811204c0:	10803fcc 	andi	r2,r2,255
811204c4:	1080201c 	xori	r2,r2,128
811204c8:	10bfe004 	addi	r2,r2,-128
811204cc:	00c00c04 	movi	r3,48
811204d0:	10c05426 	beq	r2,r3,81120624 <___vfiprintf_internal_r+0x884>
811204d4:	da801e17 	ldw	r10,120(sp)
811204d8:	a8bfffc4 	addi	r2,r21,-1
811204dc:	a8ffffc5 	stb	r3,-1(r21)
811204e0:	50a7c83a 	sub	r19,r10,r2
811204e4:	102b883a 	mov	r21,r2
811204e8:	003f2f06 	br	811201a8 <__reset+0xfb1001a8>
811204ec:	21003fcc 	andi	r4,r4,255
811204f0:	2003421e 	bne	r4,zero,811211fc <___vfiprintf_internal_r+0x145c>
811204f4:	00a04534 	movhi	r2,33044
811204f8:	10b12604 	addi	r2,r2,-15208
811204fc:	d8802615 	stw	r2,152(sp)
81120500:	a080080c 	andi	r2,r20,32
81120504:	1000aa26 	beq	r2,zero,811207b0 <___vfiprintf_internal_r+0xa10>
81120508:	da802217 	ldw	r10,136(sp)
8112050c:	54800017 	ldw	r18,0(r10)
81120510:	54c00117 	ldw	r19,4(r10)
81120514:	52800204 	addi	r10,r10,8
81120518:	da802215 	stw	r10,136(sp)
8112051c:	a080004c 	andi	r2,r20,1
81120520:	1001d226 	beq	r2,zero,81120c6c <___vfiprintf_internal_r+0xecc>
81120524:	94c4b03a 	or	r2,r18,r19
81120528:	1002351e 	bne	r2,zero,81120e00 <___vfiprintf_internal_r+0x1060>
8112052c:	d8001d85 	stb	zero,118(sp)
81120530:	48022216 	blt	r9,zero,81120dbc <___vfiprintf_internal_r+0x101c>
81120534:	00bfdfc4 	movi	r2,-129
81120538:	a0a8703a 	and	r20,r20,r2
8112053c:	003f1506 	br	81120194 <__reset+0xfb100194>
81120540:	da802217 	ldw	r10,136(sp)
81120544:	04800044 	movi	r18,1
81120548:	d8001d85 	stb	zero,118(sp)
8112054c:	50800017 	ldw	r2,0(r10)
81120550:	52800104 	addi	r10,r10,4
81120554:	da802215 	stw	r10,136(sp)
81120558:	d8801005 	stb	r2,64(sp)
8112055c:	9027883a 	mov	r19,r18
81120560:	dd401004 	addi	r21,sp,64
81120564:	0013883a 	mov	r9,zero
81120568:	003f1706 	br	811201c8 <__reset+0xfb1001c8>
8112056c:	21003fcc 	andi	r4,r4,255
81120570:	2003201e 	bne	r4,zero,811211f4 <___vfiprintf_internal_r+0x1454>
81120574:	a080080c 	andi	r2,r20,32
81120578:	10004b26 	beq	r2,zero,811206a8 <___vfiprintf_internal_r+0x908>
8112057c:	da802217 	ldw	r10,136(sp)
81120580:	50800117 	ldw	r2,4(r10)
81120584:	54800017 	ldw	r18,0(r10)
81120588:	52800204 	addi	r10,r10,8
8112058c:	da802215 	stw	r10,136(sp)
81120590:	1027883a 	mov	r19,r2
81120594:	10022c16 	blt	r2,zero,81120e48 <___vfiprintf_internal_r+0x10a8>
81120598:	df001d83 	ldbu	fp,118(sp)
8112059c:	48007216 	blt	r9,zero,81120768 <___vfiprintf_internal_r+0x9c8>
811205a0:	00ffdfc4 	movi	r3,-129
811205a4:	94c4b03a 	or	r2,r18,r19
811205a8:	a0e8703a 	and	r20,r20,r3
811205ac:	1000cc26 	beq	r2,zero,811208e0 <___vfiprintf_internal_r+0xb40>
811205b0:	98021026 	beq	r19,zero,81120df4 <___vfiprintf_internal_r+0x1054>
811205b4:	dc402415 	stw	r17,144(sp)
811205b8:	dc002515 	stw	r16,148(sp)
811205bc:	9823883a 	mov	r17,r19
811205c0:	9021883a 	mov	r16,r18
811205c4:	dd401a04 	addi	r21,sp,104
811205c8:	4825883a 	mov	r18,r9
811205cc:	4027883a 	mov	r19,r8
811205d0:	8009883a 	mov	r4,r16
811205d4:	880b883a 	mov	r5,r17
811205d8:	01800284 	movi	r6,10
811205dc:	000f883a 	mov	r7,zero
811205e0:	1122c9c0 	call	81122c9c <__umoddi3>
811205e4:	10800c04 	addi	r2,r2,48
811205e8:	ad7fffc4 	addi	r21,r21,-1
811205ec:	8009883a 	mov	r4,r16
811205f0:	880b883a 	mov	r5,r17
811205f4:	a8800005 	stb	r2,0(r21)
811205f8:	01800284 	movi	r6,10
811205fc:	000f883a 	mov	r7,zero
81120600:	112271c0 	call	8112271c <__udivdi3>
81120604:	1021883a 	mov	r16,r2
81120608:	10c4b03a 	or	r2,r2,r3
8112060c:	1823883a 	mov	r17,r3
81120610:	103fef1e 	bne	r2,zero,811205d0 <__reset+0xfb1005d0>
81120614:	dc402417 	ldw	r17,144(sp)
81120618:	dc002517 	ldw	r16,148(sp)
8112061c:	9013883a 	mov	r9,r18
81120620:	9811883a 	mov	r8,r19
81120624:	da801e17 	ldw	r10,120(sp)
81120628:	5567c83a 	sub	r19,r10,r21
8112062c:	003ede06 	br	811201a8 <__reset+0xfb1001a8>
81120630:	38803fcc 	andi	r2,r7,255
81120634:	1080201c 	xori	r2,r2,128
81120638:	10bfe004 	addi	r2,r2,-128
8112063c:	1002371e 	bne	r2,zero,81120f1c <___vfiprintf_internal_r+0x117c>
81120640:	01000044 	movi	r4,1
81120644:	01c00804 	movi	r7,32
81120648:	80c00007 	ldb	r3,0(r16)
8112064c:	003e3506 	br	8111ff24 <__reset+0xfb0fff24>
81120650:	a5000054 	ori	r20,r20,1
81120654:	80c00007 	ldb	r3,0(r16)
81120658:	003e3206 	br	8111ff24 <__reset+0xfb0fff24>
8112065c:	a5002014 	ori	r20,r20,128
81120660:	80c00007 	ldb	r3,0(r16)
81120664:	003e2f06 	br	8111ff24 <__reset+0xfb0fff24>
81120668:	8015883a 	mov	r10,r16
8112066c:	0023883a 	mov	r17,zero
81120670:	18bff404 	addi	r2,r3,-48
81120674:	50c00007 	ldb	r3,0(r10)
81120678:	8c4002a4 	muli	r17,r17,10
8112067c:	84000044 	addi	r16,r16,1
81120680:	8015883a 	mov	r10,r16
81120684:	1463883a 	add	r17,r2,r17
81120688:	18bff404 	addi	r2,r3,-48
8112068c:	30bff92e 	bgeu	r6,r2,81120674 <__reset+0xfb100674>
81120690:	003e2506 	br	8111ff28 <__reset+0xfb0fff28>
81120694:	21003fcc 	andi	r4,r4,255
81120698:	2002d41e 	bne	r4,zero,811211ec <___vfiprintf_internal_r+0x144c>
8112069c:	a5000414 	ori	r20,r20,16
811206a0:	a080080c 	andi	r2,r20,32
811206a4:	103fb51e 	bne	r2,zero,8112057c <__reset+0xfb10057c>
811206a8:	a080040c 	andi	r2,r20,16
811206ac:	1001f826 	beq	r2,zero,81120e90 <___vfiprintf_internal_r+0x10f0>
811206b0:	da802217 	ldw	r10,136(sp)
811206b4:	54800017 	ldw	r18,0(r10)
811206b8:	52800104 	addi	r10,r10,4
811206bc:	da802215 	stw	r10,136(sp)
811206c0:	9027d7fa 	srai	r19,r18,31
811206c4:	9805883a 	mov	r2,r19
811206c8:	003fb206 	br	81120594 <__reset+0xfb100594>
811206cc:	21003fcc 	andi	r4,r4,255
811206d0:	2002c41e 	bne	r4,zero,811211e4 <___vfiprintf_internal_r+0x1444>
811206d4:	a5000414 	ori	r20,r20,16
811206d8:	a080080c 	andi	r2,r20,32
811206dc:	103f5f1e 	bne	r2,zero,8112045c <__reset+0xfb10045c>
811206e0:	a080040c 	andi	r2,r20,16
811206e4:	10020f26 	beq	r2,zero,81120f24 <___vfiprintf_internal_r+0x1184>
811206e8:	da802217 	ldw	r10,136(sp)
811206ec:	d8001d85 	stb	zero,118(sp)
811206f0:	0027883a 	mov	r19,zero
811206f4:	50800104 	addi	r2,r10,4
811206f8:	54800017 	ldw	r18,0(r10)
811206fc:	48021116 	blt	r9,zero,81120f44 <___vfiprintf_internal_r+0x11a4>
81120700:	00ffdfc4 	movi	r3,-129
81120704:	d8802215 	stw	r2,136(sp)
81120708:	a0e8703a 	and	r20,r20,r3
8112070c:	903f5e1e 	bne	r18,zero,81120488 <__reset+0xfb100488>
81120710:	0039883a 	mov	fp,zero
81120714:	4802a626 	beq	r9,zero,811211b0 <___vfiprintf_internal_r+0x1410>
81120718:	0025883a 	mov	r18,zero
8112071c:	0027883a 	mov	r19,zero
81120720:	003f5a06 	br	8112048c <__reset+0xfb10048c>
81120724:	21003fcc 	andi	r4,r4,255
81120728:	20029f1e 	bne	r4,zero,811211a8 <___vfiprintf_internal_r+0x1408>
8112072c:	a5000414 	ori	r20,r20,16
81120730:	a080080c 	andi	r2,r20,32
81120734:	10005e1e 	bne	r2,zero,811208b0 <___vfiprintf_internal_r+0xb10>
81120738:	a080040c 	andi	r2,r20,16
8112073c:	1001a21e 	bne	r2,zero,81120dc8 <___vfiprintf_internal_r+0x1028>
81120740:	a080100c 	andi	r2,r20,64
81120744:	d8001d85 	stb	zero,118(sp)
81120748:	da802217 	ldw	r10,136(sp)
8112074c:	1002231e 	bne	r2,zero,81120fdc <___vfiprintf_internal_r+0x123c>
81120750:	50800104 	addi	r2,r10,4
81120754:	54800017 	ldw	r18,0(r10)
81120758:	0027883a 	mov	r19,zero
8112075c:	4801a00e 	bge	r9,zero,81120de0 <___vfiprintf_internal_r+0x1040>
81120760:	d8802215 	stw	r2,136(sp)
81120764:	0039883a 	mov	fp,zero
81120768:	94c4b03a 	or	r2,r18,r19
8112076c:	103f901e 	bne	r2,zero,811205b0 <__reset+0xfb1005b0>
81120770:	00800044 	movi	r2,1
81120774:	10803fcc 	andi	r2,r2,255
81120778:	00c00044 	movi	r3,1
8112077c:	10c05926 	beq	r2,r3,811208e4 <___vfiprintf_internal_r+0xb44>
81120780:	00c00084 	movi	r3,2
81120784:	10ffe41e 	bne	r2,r3,81120718 <__reset+0xfb100718>
81120788:	0025883a 	mov	r18,zero
8112078c:	0027883a 	mov	r19,zero
81120790:	00013d06 	br	81120c88 <___vfiprintf_internal_r+0xee8>
81120794:	21003fcc 	andi	r4,r4,255
81120798:	2002811e 	bne	r4,zero,811211a0 <___vfiprintf_internal_r+0x1400>
8112079c:	00a04534 	movhi	r2,33044
811207a0:	10b12104 	addi	r2,r2,-15228
811207a4:	d8802615 	stw	r2,152(sp)
811207a8:	a080080c 	andi	r2,r20,32
811207ac:	103f561e 	bne	r2,zero,81120508 <__reset+0xfb100508>
811207b0:	a080040c 	andi	r2,r20,16
811207b4:	1001d126 	beq	r2,zero,81120efc <___vfiprintf_internal_r+0x115c>
811207b8:	da802217 	ldw	r10,136(sp)
811207bc:	0027883a 	mov	r19,zero
811207c0:	54800017 	ldw	r18,0(r10)
811207c4:	52800104 	addi	r10,r10,4
811207c8:	da802215 	stw	r10,136(sp)
811207cc:	003f5306 	br	8112051c <__reset+0xfb10051c>
811207d0:	da802217 	ldw	r10,136(sp)
811207d4:	d8001d85 	stb	zero,118(sp)
811207d8:	55400017 	ldw	r21,0(r10)
811207dc:	50c00104 	addi	r3,r10,4
811207e0:	a8024226 	beq	r21,zero,811210ec <___vfiprintf_internal_r+0x134c>
811207e4:	48021816 	blt	r9,zero,81121048 <___vfiprintf_internal_r+0x12a8>
811207e8:	480d883a 	mov	r6,r9
811207ec:	000b883a 	mov	r5,zero
811207f0:	a809883a 	mov	r4,r21
811207f4:	d8c02a15 	stw	r3,168(sp)
811207f8:	da002b15 	stw	r8,172(sp)
811207fc:	da402c15 	stw	r9,176(sp)
81120800:	111ab7c0 	call	8111ab7c <memchr>
81120804:	d8c02a17 	ldw	r3,168(sp)
81120808:	da002b17 	ldw	r8,172(sp)
8112080c:	da402c17 	ldw	r9,176(sp)
81120810:	10024826 	beq	r2,zero,81121134 <___vfiprintf_internal_r+0x1394>
81120814:	1567c83a 	sub	r19,r2,r21
81120818:	df001d83 	ldbu	fp,118(sp)
8112081c:	d8c02215 	stw	r3,136(sp)
81120820:	0013883a 	mov	r9,zero
81120824:	003e6006 	br	811201a8 <__reset+0xfb1001a8>
81120828:	21003fcc 	andi	r4,r4,255
8112082c:	203fc026 	beq	r4,zero,81120730 <__reset+0xfb100730>
81120830:	d9c01d85 	stb	r7,118(sp)
81120834:	003fbe06 	br	81120730 <__reset+0xfb100730>
81120838:	da802217 	ldw	r10,136(sp)
8112083c:	54400017 	ldw	r17,0(r10)
81120840:	50800104 	addi	r2,r10,4
81120844:	883e3b16 	blt	r17,zero,81120134 <__reset+0xfb100134>
81120848:	d8802215 	stw	r2,136(sp)
8112084c:	80c00007 	ldb	r3,0(r16)
81120850:	003db406 	br	8111ff24 <__reset+0xfb0fff24>
81120854:	01000044 	movi	r4,1
81120858:	01c00ac4 	movi	r7,43
8112085c:	80c00007 	ldb	r3,0(r16)
81120860:	003db006 	br	8111ff24 <__reset+0xfb0fff24>
81120864:	80c00007 	ldb	r3,0(r16)
81120868:	82800044 	addi	r10,r16,1
8112086c:	1b423c26 	beq	r3,r13,81121160 <___vfiprintf_internal_r+0x13c0>
81120870:	18bff404 	addi	r2,r3,-48
81120874:	0013883a 	mov	r9,zero
81120878:	30822b36 	bltu	r6,r2,81121128 <___vfiprintf_internal_r+0x1388>
8112087c:	50c00007 	ldb	r3,0(r10)
81120880:	4a4002a4 	muli	r9,r9,10
81120884:	54000044 	addi	r16,r10,1
81120888:	8015883a 	mov	r10,r16
8112088c:	4893883a 	add	r9,r9,r2
81120890:	18bff404 	addi	r2,r3,-48
81120894:	30bff92e 	bgeu	r6,r2,8112087c <__reset+0xfb10087c>
81120898:	483da30e 	bge	r9,zero,8111ff28 <__reset+0xfb0fff28>
8112089c:	027fffc4 	movi	r9,-1
811208a0:	003da106 	br	8111ff28 <__reset+0xfb0fff28>
811208a4:	a5001014 	ori	r20,r20,64
811208a8:	80c00007 	ldb	r3,0(r16)
811208ac:	003d9d06 	br	8111ff24 <__reset+0xfb0fff24>
811208b0:	da802217 	ldw	r10,136(sp)
811208b4:	d8001d85 	stb	zero,118(sp)
811208b8:	50c00204 	addi	r3,r10,8
811208bc:	54800017 	ldw	r18,0(r10)
811208c0:	54c00117 	ldw	r19,4(r10)
811208c4:	4801ca16 	blt	r9,zero,81120ff0 <___vfiprintf_internal_r+0x1250>
811208c8:	013fdfc4 	movi	r4,-129
811208cc:	94c4b03a 	or	r2,r18,r19
811208d0:	d8c02215 	stw	r3,136(sp)
811208d4:	a128703a 	and	r20,r20,r4
811208d8:	0039883a 	mov	fp,zero
811208dc:	103f341e 	bne	r2,zero,811205b0 <__reset+0xfb1005b0>
811208e0:	483e2e26 	beq	r9,zero,8112019c <__reset+0xfb10019c>
811208e4:	0025883a 	mov	r18,zero
811208e8:	94800c04 	addi	r18,r18,48
811208ec:	dc8019c5 	stb	r18,103(sp)
811208f0:	dcc02717 	ldw	r19,156(sp)
811208f4:	dd4019c4 	addi	r21,sp,103
811208f8:	003e2b06 	br	811201a8 <__reset+0xfb1001a8>
811208fc:	21003fcc 	andi	r4,r4,255
81120900:	2002361e 	bne	r4,zero,811211dc <___vfiprintf_internal_r+0x143c>
81120904:	1801c126 	beq	r3,zero,8112100c <___vfiprintf_internal_r+0x126c>
81120908:	04800044 	movi	r18,1
8112090c:	d8c01005 	stb	r3,64(sp)
81120910:	d8001d85 	stb	zero,118(sp)
81120914:	9027883a 	mov	r19,r18
81120918:	dd401004 	addi	r21,sp,64
8112091c:	003f1106 	br	81120564 <__reset+0xfb100564>
81120920:	d9402117 	ldw	r5,132(sp)
81120924:	d9002017 	ldw	r4,128(sp)
81120928:	d9801a04 	addi	r6,sp,104
8112092c:	d9c02b15 	stw	r7,172(sp)
81120930:	dbc02a15 	stw	r15,168(sp)
81120934:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120938:	d9c02b17 	ldw	r7,172(sp)
8112093c:	dbc02a17 	ldw	r15,168(sp)
81120940:	10006d1e 	bne	r2,zero,81120af8 <___vfiprintf_internal_r+0xd58>
81120944:	d9801b17 	ldw	r6,108(sp)
81120948:	d8801c17 	ldw	r2,112(sp)
8112094c:	d811883a 	mov	r8,sp
81120950:	31400044 	addi	r5,r6,1
81120954:	003e3306 	br	81120224 <__reset+0xfb100224>
81120958:	d9401b17 	ldw	r5,108(sp)
8112095c:	d8801c17 	ldw	r2,112(sp)
81120960:	29000044 	addi	r4,r5,1
81120964:	d8c01d87 	ldb	r3,118(sp)
81120968:	183e4d26 	beq	r3,zero,811202a0 <__reset+0xfb1002a0>
8112096c:	00c00044 	movi	r3,1
81120970:	d9401d84 	addi	r5,sp,118
81120974:	10c5883a 	add	r2,r2,r3
81120978:	41400015 	stw	r5,0(r8)
8112097c:	40c00115 	stw	r3,4(r8)
81120980:	d8801c15 	stw	r2,112(sp)
81120984:	d9001b15 	stw	r4,108(sp)
81120988:	014001c4 	movi	r5,7
8112098c:	2900a90e 	bge	r5,r4,81120c34 <___vfiprintf_internal_r+0xe94>
81120990:	1000da1e 	bne	r2,zero,81120cfc <___vfiprintf_internal_r+0xf5c>
81120994:	7000ab1e 	bne	r14,zero,81120c44 <___vfiprintf_internal_r+0xea4>
81120998:	000b883a 	mov	r5,zero
8112099c:	1809883a 	mov	r4,r3
811209a0:	d811883a 	mov	r8,sp
811209a4:	00c02004 	movi	r3,128
811209a8:	e0fe4d26 	beq	fp,r3,811202e0 <__reset+0xfb1002e0>
811209ac:	4cf9c83a 	sub	fp,r9,r19
811209b0:	073e7b0e 	bge	zero,fp,811203a0 <__reset+0xfb1003a0>
811209b4:	01c00404 	movi	r7,16
811209b8:	3f01900e 	bge	r7,fp,81120ffc <___vfiprintf_internal_r+0x125c>
811209bc:	00e04534 	movhi	r3,33044
811209c0:	18f1b804 	addi	r3,r3,-14624
811209c4:	d8c02415 	stw	r3,144(sp)
811209c8:	034001c4 	movi	r13,7
811209cc:	00000506 	br	811209e4 <___vfiprintf_internal_r+0xc44>
811209d0:	29000084 	addi	r4,r5,2
811209d4:	42000204 	addi	r8,r8,8
811209d8:	180b883a 	mov	r5,r3
811209dc:	e73ffc04 	addi	fp,fp,-16
811209e0:	3f000d0e 	bge	r7,fp,81120a18 <___vfiprintf_internal_r+0xc78>
811209e4:	10800404 	addi	r2,r2,16
811209e8:	28c00044 	addi	r3,r5,1
811209ec:	45c00015 	stw	r23,0(r8)
811209f0:	41c00115 	stw	r7,4(r8)
811209f4:	d8801c15 	stw	r2,112(sp)
811209f8:	d8c01b15 	stw	r3,108(sp)
811209fc:	68fff40e 	bge	r13,r3,811209d0 <__reset+0xfb1009d0>
81120a00:	1000101e 	bne	r2,zero,81120a44 <___vfiprintf_internal_r+0xca4>
81120a04:	e73ffc04 	addi	fp,fp,-16
81120a08:	01000044 	movi	r4,1
81120a0c:	000b883a 	mov	r5,zero
81120a10:	d811883a 	mov	r8,sp
81120a14:	3f3ff316 	blt	r7,fp,811209e4 <__reset+0xfb1009e4>
81120a18:	da802417 	ldw	r10,144(sp)
81120a1c:	1705883a 	add	r2,r2,fp
81120a20:	47000115 	stw	fp,4(r8)
81120a24:	42800015 	stw	r10,0(r8)
81120a28:	d8801c15 	stw	r2,112(sp)
81120a2c:	d9001b15 	stw	r4,108(sp)
81120a30:	00c001c4 	movi	r3,7
81120a34:	19003616 	blt	r3,r4,81120b10 <___vfiprintf_internal_r+0xd70>
81120a38:	42000204 	addi	r8,r8,8
81120a3c:	21000044 	addi	r4,r4,1
81120a40:	003e5706 	br	811203a0 <__reset+0xfb1003a0>
81120a44:	d9402117 	ldw	r5,132(sp)
81120a48:	d9002017 	ldw	r4,128(sp)
81120a4c:	d9801a04 	addi	r6,sp,104
81120a50:	d9c02b15 	stw	r7,172(sp)
81120a54:	db402a15 	stw	r13,168(sp)
81120a58:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120a5c:	d9c02b17 	ldw	r7,172(sp)
81120a60:	db402a17 	ldw	r13,168(sp)
81120a64:	1000241e 	bne	r2,zero,81120af8 <___vfiprintf_internal_r+0xd58>
81120a68:	d9401b17 	ldw	r5,108(sp)
81120a6c:	d8801c17 	ldw	r2,112(sp)
81120a70:	d811883a 	mov	r8,sp
81120a74:	29000044 	addi	r4,r5,1
81120a78:	003fd806 	br	811209dc <__reset+0xfb1009dc>
81120a7c:	d9401b17 	ldw	r5,108(sp)
81120a80:	00e04534 	movhi	r3,33044
81120a84:	18f1bc04 	addi	r3,r3,-14608
81120a88:	d8c02415 	stw	r3,144(sp)
81120a8c:	29400044 	addi	r5,r5,1
81120a90:	d8c02417 	ldw	r3,144(sp)
81120a94:	14c5883a 	add	r2,r2,r19
81120a98:	44c00115 	stw	r19,4(r8)
81120a9c:	40c00015 	stw	r3,0(r8)
81120aa0:	d8801c15 	stw	r2,112(sp)
81120aa4:	d9401b15 	stw	r5,108(sp)
81120aa8:	00c001c4 	movi	r3,7
81120aac:	1940070e 	bge	r3,r5,81120acc <___vfiprintf_internal_r+0xd2c>
81120ab0:	103e4826 	beq	r2,zero,811203d4 <__reset+0xfb1003d4>
81120ab4:	d9402117 	ldw	r5,132(sp)
81120ab8:	d9002017 	ldw	r4,128(sp)
81120abc:	d9801a04 	addi	r6,sp,104
81120ac0:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120ac4:	10000c1e 	bne	r2,zero,81120af8 <___vfiprintf_internal_r+0xd58>
81120ac8:	d8801c17 	ldw	r2,112(sp)
81120acc:	8c80010e 	bge	r17,r18,81120ad4 <___vfiprintf_internal_r+0xd34>
81120ad0:	9023883a 	mov	r17,r18
81120ad4:	da802317 	ldw	r10,140(sp)
81120ad8:	5455883a 	add	r10,r10,r17
81120adc:	da802315 	stw	r10,140(sp)
81120ae0:	103e4126 	beq	r2,zero,811203e8 <__reset+0xfb1003e8>
81120ae4:	d9402117 	ldw	r5,132(sp)
81120ae8:	d9002017 	ldw	r4,128(sp)
81120aec:	d9801a04 	addi	r6,sp,104
81120af0:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120af4:	103e3c26 	beq	r2,zero,811203e8 <__reset+0xfb1003e8>
81120af8:	dd002117 	ldw	r20,132(sp)
81120afc:	a080030b 	ldhu	r2,12(r20)
81120b00:	1080100c 	andi	r2,r2,64
81120b04:	1001231e 	bne	r2,zero,81120f94 <___vfiprintf_internal_r+0x11f4>
81120b08:	d8802317 	ldw	r2,140(sp)
81120b0c:	003d7b06 	br	811200fc <__reset+0xfb1000fc>
81120b10:	1000991e 	bne	r2,zero,81120d78 <___vfiprintf_internal_r+0xfd8>
81120b14:	00c00044 	movi	r3,1
81120b18:	9805883a 	mov	r2,r19
81120b1c:	dd400015 	stw	r21,0(sp)
81120b20:	dcc00115 	stw	r19,4(sp)
81120b24:	dcc01c15 	stw	r19,112(sp)
81120b28:	d8c01b15 	stw	r3,108(sp)
81120b2c:	d811883a 	mov	r8,sp
81120b30:	42000204 	addi	r8,r8,8
81120b34:	a2c0010c 	andi	r11,r20,4
81120b38:	583fe426 	beq	r11,zero,81120acc <__reset+0xfb100acc>
81120b3c:	8ca7c83a 	sub	r19,r17,r18
81120b40:	04ffe20e 	bge	zero,r19,81120acc <__reset+0xfb100acc>
81120b44:	01c00404 	movi	r7,16
81120b48:	3cffcc0e 	bge	r7,r19,81120a7c <__reset+0xfb100a7c>
81120b4c:	02a04534 	movhi	r10,33044
81120b50:	52b1bc04 	addi	r10,r10,-14608
81120b54:	d9001b17 	ldw	r4,108(sp)
81120b58:	da802415 	stw	r10,144(sp)
81120b5c:	382b883a 	mov	r21,r7
81120b60:	050001c4 	movi	r20,7
81120b64:	df002017 	ldw	fp,128(sp)
81120b68:	00000506 	br	81120b80 <___vfiprintf_internal_r+0xde0>
81120b6c:	21400084 	addi	r5,r4,2
81120b70:	42000204 	addi	r8,r8,8
81120b74:	1809883a 	mov	r4,r3
81120b78:	9cfffc04 	addi	r19,r19,-16
81120b7c:	acffc40e 	bge	r21,r19,81120a90 <__reset+0xfb100a90>
81120b80:	10800404 	addi	r2,r2,16
81120b84:	20c00044 	addi	r3,r4,1
81120b88:	45800015 	stw	r22,0(r8)
81120b8c:	45400115 	stw	r21,4(r8)
81120b90:	d8801c15 	stw	r2,112(sp)
81120b94:	d8c01b15 	stw	r3,108(sp)
81120b98:	a0fff40e 	bge	r20,r3,81120b6c <__reset+0xfb100b6c>
81120b9c:	1000041e 	bne	r2,zero,81120bb0 <___vfiprintf_internal_r+0xe10>
81120ba0:	01400044 	movi	r5,1
81120ba4:	0009883a 	mov	r4,zero
81120ba8:	d811883a 	mov	r8,sp
81120bac:	003ff206 	br	81120b78 <__reset+0xfb100b78>
81120bb0:	d9402117 	ldw	r5,132(sp)
81120bb4:	d9801a04 	addi	r6,sp,104
81120bb8:	e009883a 	mov	r4,fp
81120bbc:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120bc0:	103fcd1e 	bne	r2,zero,81120af8 <__reset+0xfb100af8>
81120bc4:	d9001b17 	ldw	r4,108(sp)
81120bc8:	d8801c17 	ldw	r2,112(sp)
81120bcc:	d811883a 	mov	r8,sp
81120bd0:	21400044 	addi	r5,r4,1
81120bd4:	003fe806 	br	81120b78 <__reset+0xfb100b78>
81120bd8:	d9402117 	ldw	r5,132(sp)
81120bdc:	d9002017 	ldw	r4,128(sp)
81120be0:	d9801a04 	addi	r6,sp,104
81120be4:	d9c02b15 	stw	r7,172(sp)
81120be8:	db402a15 	stw	r13,168(sp)
81120bec:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120bf0:	d9c02b17 	ldw	r7,172(sp)
81120bf4:	db402a17 	ldw	r13,168(sp)
81120bf8:	103fbf1e 	bne	r2,zero,81120af8 <__reset+0xfb100af8>
81120bfc:	d9401b17 	ldw	r5,108(sp)
81120c00:	d8801c17 	ldw	r2,112(sp)
81120c04:	d811883a 	mov	r8,sp
81120c08:	29800044 	addi	r6,r5,1
81120c0c:	003dc406 	br	81120320 <__reset+0xfb100320>
81120c10:	1000d21e 	bne	r2,zero,81120f5c <___vfiprintf_internal_r+0x11bc>
81120c14:	d8c01d87 	ldb	r3,118(sp)
81120c18:	18009526 	beq	r3,zero,81120e70 <___vfiprintf_internal_r+0x10d0>
81120c1c:	00800044 	movi	r2,1
81120c20:	d8c01d84 	addi	r3,sp,118
81120c24:	1009883a 	mov	r4,r2
81120c28:	d8c00015 	stw	r3,0(sp)
81120c2c:	d8800115 	stw	r2,4(sp)
81120c30:	d811883a 	mov	r8,sp
81120c34:	200b883a 	mov	r5,r4
81120c38:	42000204 	addi	r8,r8,8
81120c3c:	21000044 	addi	r4,r4,1
81120c40:	003d9706 	br	811202a0 <__reset+0xfb1002a0>
81120c44:	d9001d04 	addi	r4,sp,116
81120c48:	00800084 	movi	r2,2
81120c4c:	d9000015 	stw	r4,0(sp)
81120c50:	d8800115 	stw	r2,4(sp)
81120c54:	1809883a 	mov	r4,r3
81120c58:	d811883a 	mov	r8,sp
81120c5c:	200b883a 	mov	r5,r4
81120c60:	42000204 	addi	r8,r8,8
81120c64:	21000044 	addi	r4,r4,1
81120c68:	003f4e06 	br	811209a4 <__reset+0xfb1009a4>
81120c6c:	d8001d85 	stb	zero,118(sp)
81120c70:	48005016 	blt	r9,zero,81120db4 <___vfiprintf_internal_r+0x1014>
81120c74:	00ffdfc4 	movi	r3,-129
81120c78:	94c4b03a 	or	r2,r18,r19
81120c7c:	a0e8703a 	and	r20,r20,r3
81120c80:	103d4426 	beq	r2,zero,81120194 <__reset+0xfb100194>
81120c84:	0039883a 	mov	fp,zero
81120c88:	d9002617 	ldw	r4,152(sp)
81120c8c:	dd401a04 	addi	r21,sp,104
81120c90:	908003cc 	andi	r2,r18,15
81120c94:	9806973a 	slli	r3,r19,28
81120c98:	2085883a 	add	r2,r4,r2
81120c9c:	9024d13a 	srli	r18,r18,4
81120ca0:	10800003 	ldbu	r2,0(r2)
81120ca4:	9826d13a 	srli	r19,r19,4
81120ca8:	ad7fffc4 	addi	r21,r21,-1
81120cac:	1ca4b03a 	or	r18,r3,r18
81120cb0:	a8800005 	stb	r2,0(r21)
81120cb4:	94c4b03a 	or	r2,r18,r19
81120cb8:	103ff51e 	bne	r2,zero,81120c90 <__reset+0xfb100c90>
81120cbc:	003e5906 	br	81120624 <__reset+0xfb100624>
81120cc0:	d9402117 	ldw	r5,132(sp)
81120cc4:	d9002017 	ldw	r4,128(sp)
81120cc8:	d9801a04 	addi	r6,sp,104
81120ccc:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120cd0:	103f891e 	bne	r2,zero,81120af8 <__reset+0xfb100af8>
81120cd4:	d8801c17 	ldw	r2,112(sp)
81120cd8:	d811883a 	mov	r8,sp
81120cdc:	003f9506 	br	81120b34 <__reset+0xfb100b34>
81120ce0:	d9402117 	ldw	r5,132(sp)
81120ce4:	d9002017 	ldw	r4,128(sp)
81120ce8:	d9801a04 	addi	r6,sp,104
81120cec:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120cf0:	103f811e 	bne	r2,zero,81120af8 <__reset+0xfb100af8>
81120cf4:	d811883a 	mov	r8,sp
81120cf8:	003ced06 	br	811200b0 <__reset+0xfb1000b0>
81120cfc:	d9402117 	ldw	r5,132(sp)
81120d00:	d9002017 	ldw	r4,128(sp)
81120d04:	d9801a04 	addi	r6,sp,104
81120d08:	da402c15 	stw	r9,176(sp)
81120d0c:	db802a15 	stw	r14,168(sp)
81120d10:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120d14:	da402c17 	ldw	r9,176(sp)
81120d18:	db802a17 	ldw	r14,168(sp)
81120d1c:	103f761e 	bne	r2,zero,81120af8 <__reset+0xfb100af8>
81120d20:	d9401b17 	ldw	r5,108(sp)
81120d24:	d8801c17 	ldw	r2,112(sp)
81120d28:	d811883a 	mov	r8,sp
81120d2c:	29000044 	addi	r4,r5,1
81120d30:	003d5b06 	br	811202a0 <__reset+0xfb1002a0>
81120d34:	d9402117 	ldw	r5,132(sp)
81120d38:	d9002017 	ldw	r4,128(sp)
81120d3c:	d9801a04 	addi	r6,sp,104
81120d40:	da402c15 	stw	r9,176(sp)
81120d44:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120d48:	da402c17 	ldw	r9,176(sp)
81120d4c:	103f6a1e 	bne	r2,zero,81120af8 <__reset+0xfb100af8>
81120d50:	d9401b17 	ldw	r5,108(sp)
81120d54:	d8801c17 	ldw	r2,112(sp)
81120d58:	d811883a 	mov	r8,sp
81120d5c:	29000044 	addi	r4,r5,1
81120d60:	003f1006 	br	811209a4 <__reset+0xfb1009a4>
81120d64:	1000c31e 	bne	r2,zero,81121074 <___vfiprintf_internal_r+0x12d4>
81120d68:	01000044 	movi	r4,1
81120d6c:	000b883a 	mov	r5,zero
81120d70:	d811883a 	mov	r8,sp
81120d74:	003f0d06 	br	811209ac <__reset+0xfb1009ac>
81120d78:	d9402117 	ldw	r5,132(sp)
81120d7c:	d9002017 	ldw	r4,128(sp)
81120d80:	d9801a04 	addi	r6,sp,104
81120d84:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120d88:	103f5b1e 	bne	r2,zero,81120af8 <__reset+0xfb100af8>
81120d8c:	d9001b17 	ldw	r4,108(sp)
81120d90:	d8801c17 	ldw	r2,112(sp)
81120d94:	d811883a 	mov	r8,sp
81120d98:	21000044 	addi	r4,r4,1
81120d9c:	003d8006 	br	811203a0 <__reset+0xfb1003a0>
81120da0:	01204534 	movhi	r4,33044
81120da4:	21312604 	addi	r4,r4,-15208
81120da8:	d9002615 	stw	r4,152(sp)
81120dac:	d8c02215 	stw	r3,136(sp)
81120db0:	1029883a 	mov	r20,r2
81120db4:	94c4b03a 	or	r2,r18,r19
81120db8:	103fb21e 	bne	r2,zero,81120c84 <__reset+0xfb100c84>
81120dbc:	0039883a 	mov	fp,zero
81120dc0:	00800084 	movi	r2,2
81120dc4:	003e6b06 	br	81120774 <__reset+0xfb100774>
81120dc8:	da802217 	ldw	r10,136(sp)
81120dcc:	d8001d85 	stb	zero,118(sp)
81120dd0:	0027883a 	mov	r19,zero
81120dd4:	50800104 	addi	r2,r10,4
81120dd8:	54800017 	ldw	r18,0(r10)
81120ddc:	483e6016 	blt	r9,zero,81120760 <__reset+0xfb100760>
81120de0:	00ffdfc4 	movi	r3,-129
81120de4:	d8802215 	stw	r2,136(sp)
81120de8:	a0e8703a 	and	r20,r20,r3
81120dec:	0039883a 	mov	fp,zero
81120df0:	903ebb26 	beq	r18,zero,811208e0 <__reset+0xfb1008e0>
81120df4:	00800244 	movi	r2,9
81120df8:	14bdee36 	bltu	r2,r18,811205b4 <__reset+0xfb1005b4>
81120dfc:	003eba06 	br	811208e8 <__reset+0xfb1008e8>
81120e00:	00800c04 	movi	r2,48
81120e04:	d8c01d45 	stb	r3,117(sp)
81120e08:	d8801d05 	stb	r2,116(sp)
81120e0c:	d8001d85 	stb	zero,118(sp)
81120e10:	a0c00094 	ori	r3,r20,2
81120e14:	4800a916 	blt	r9,zero,811210bc <___vfiprintf_internal_r+0x131c>
81120e18:	00bfdfc4 	movi	r2,-129
81120e1c:	a096703a 	and	r11,r20,r2
81120e20:	5d000094 	ori	r20,r11,2
81120e24:	0039883a 	mov	fp,zero
81120e28:	003f9706 	br	81120c88 <__reset+0xfb100c88>
81120e2c:	8025883a 	mov	r18,r16
81120e30:	003c2e06 	br	8111feec <__reset+0xfb0ffeec>
81120e34:	00a04534 	movhi	r2,33044
81120e38:	10b12604 	addi	r2,r2,-15208
81120e3c:	0039883a 	mov	fp,zero
81120e40:	d8802615 	stw	r2,152(sp)
81120e44:	003f9006 	br	81120c88 <__reset+0xfb100c88>
81120e48:	04a5c83a 	sub	r18,zero,r18
81120e4c:	07000b44 	movi	fp,45
81120e50:	9004c03a 	cmpne	r2,r18,zero
81120e54:	04e7c83a 	sub	r19,zero,r19
81120e58:	df001d85 	stb	fp,118(sp)
81120e5c:	98a7c83a 	sub	r19,r19,r2
81120e60:	48009f16 	blt	r9,zero,811210e0 <___vfiprintf_internal_r+0x1340>
81120e64:	00bfdfc4 	movi	r2,-129
81120e68:	a0a8703a 	and	r20,r20,r2
81120e6c:	003dd006 	br	811205b0 <__reset+0xfb1005b0>
81120e70:	70004c26 	beq	r14,zero,81120fa4 <___vfiprintf_internal_r+0x1204>
81120e74:	00800084 	movi	r2,2
81120e78:	d8c01d04 	addi	r3,sp,116
81120e7c:	d8c00015 	stw	r3,0(sp)
81120e80:	d8800115 	stw	r2,4(sp)
81120e84:	01000044 	movi	r4,1
81120e88:	d811883a 	mov	r8,sp
81120e8c:	003f7306 	br	81120c5c <__reset+0xfb100c5c>
81120e90:	a080100c 	andi	r2,r20,64
81120e94:	da802217 	ldw	r10,136(sp)
81120e98:	103e0626 	beq	r2,zero,811206b4 <__reset+0xfb1006b4>
81120e9c:	5480000f 	ldh	r18,0(r10)
81120ea0:	52800104 	addi	r10,r10,4
81120ea4:	da802215 	stw	r10,136(sp)
81120ea8:	9027d7fa 	srai	r19,r18,31
81120eac:	9805883a 	mov	r2,r19
81120eb0:	003db806 	br	81120594 <__reset+0xfb100594>
81120eb4:	a080040c 	andi	r2,r20,16
81120eb8:	1000091e 	bne	r2,zero,81120ee0 <___vfiprintf_internal_r+0x1140>
81120ebc:	a2c0100c 	andi	r11,r20,64
81120ec0:	58000726 	beq	r11,zero,81120ee0 <___vfiprintf_internal_r+0x1140>
81120ec4:	da802217 	ldw	r10,136(sp)
81120ec8:	50800017 	ldw	r2,0(r10)
81120ecc:	52800104 	addi	r10,r10,4
81120ed0:	da802215 	stw	r10,136(sp)
81120ed4:	da802317 	ldw	r10,140(sp)
81120ed8:	1280000d 	sth	r10,0(r2)
81120edc:	003be706 	br	8111fe7c <__reset+0xfb0ffe7c>
81120ee0:	da802217 	ldw	r10,136(sp)
81120ee4:	50800017 	ldw	r2,0(r10)
81120ee8:	52800104 	addi	r10,r10,4
81120eec:	da802215 	stw	r10,136(sp)
81120ef0:	da802317 	ldw	r10,140(sp)
81120ef4:	12800015 	stw	r10,0(r2)
81120ef8:	003be006 	br	8111fe7c <__reset+0xfb0ffe7c>
81120efc:	a080100c 	andi	r2,r20,64
81120f00:	da802217 	ldw	r10,136(sp)
81120f04:	10003026 	beq	r2,zero,81120fc8 <___vfiprintf_internal_r+0x1228>
81120f08:	5480000b 	ldhu	r18,0(r10)
81120f0c:	52800104 	addi	r10,r10,4
81120f10:	0027883a 	mov	r19,zero
81120f14:	da802215 	stw	r10,136(sp)
81120f18:	003d8006 	br	8112051c <__reset+0xfb10051c>
81120f1c:	80c00007 	ldb	r3,0(r16)
81120f20:	003c0006 	br	8111ff24 <__reset+0xfb0fff24>
81120f24:	a080100c 	andi	r2,r20,64
81120f28:	d8001d85 	stb	zero,118(sp)
81120f2c:	da802217 	ldw	r10,136(sp)
81120f30:	1000201e 	bne	r2,zero,81120fb4 <___vfiprintf_internal_r+0x1214>
81120f34:	50800104 	addi	r2,r10,4
81120f38:	54800017 	ldw	r18,0(r10)
81120f3c:	0027883a 	mov	r19,zero
81120f40:	483def0e 	bge	r9,zero,81120700 <__reset+0xfb100700>
81120f44:	94c6b03a 	or	r3,r18,r19
81120f48:	d8802215 	stw	r2,136(sp)
81120f4c:	183d4e1e 	bne	r3,zero,81120488 <__reset+0xfb100488>
81120f50:	0039883a 	mov	fp,zero
81120f54:	0005883a 	mov	r2,zero
81120f58:	003e0606 	br	81120774 <__reset+0xfb100774>
81120f5c:	d9402117 	ldw	r5,132(sp)
81120f60:	d9002017 	ldw	r4,128(sp)
81120f64:	d9801a04 	addi	r6,sp,104
81120f68:	da402c15 	stw	r9,176(sp)
81120f6c:	db802a15 	stw	r14,168(sp)
81120f70:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81120f74:	da402c17 	ldw	r9,176(sp)
81120f78:	db802a17 	ldw	r14,168(sp)
81120f7c:	103ede1e 	bne	r2,zero,81120af8 <__reset+0xfb100af8>
81120f80:	d9401b17 	ldw	r5,108(sp)
81120f84:	d8801c17 	ldw	r2,112(sp)
81120f88:	d811883a 	mov	r8,sp
81120f8c:	29000044 	addi	r4,r5,1
81120f90:	003e7406 	br	81120964 <__reset+0xfb100964>
81120f94:	00bfffc4 	movi	r2,-1
81120f98:	003c5806 	br	811200fc <__reset+0xfb1000fc>
81120f9c:	d811883a 	mov	r8,sp
81120fa0:	003ee806 	br	81120b44 <__reset+0xfb100b44>
81120fa4:	000b883a 	mov	r5,zero
81120fa8:	01000044 	movi	r4,1
81120fac:	d811883a 	mov	r8,sp
81120fb0:	003e7c06 	br	811209a4 <__reset+0xfb1009a4>
81120fb4:	50800104 	addi	r2,r10,4
81120fb8:	5480000b 	ldhu	r18,0(r10)
81120fbc:	0027883a 	mov	r19,zero
81120fc0:	483dcf0e 	bge	r9,zero,81120700 <__reset+0xfb100700>
81120fc4:	003fdf06 	br	81120f44 <__reset+0xfb100f44>
81120fc8:	54800017 	ldw	r18,0(r10)
81120fcc:	52800104 	addi	r10,r10,4
81120fd0:	0027883a 	mov	r19,zero
81120fd4:	da802215 	stw	r10,136(sp)
81120fd8:	003d5006 	br	8112051c <__reset+0xfb10051c>
81120fdc:	50800104 	addi	r2,r10,4
81120fe0:	5480000b 	ldhu	r18,0(r10)
81120fe4:	0027883a 	mov	r19,zero
81120fe8:	483f7d0e 	bge	r9,zero,81120de0 <__reset+0xfb100de0>
81120fec:	003ddc06 	br	81120760 <__reset+0xfb100760>
81120ff0:	d8c02215 	stw	r3,136(sp)
81120ff4:	0039883a 	mov	fp,zero
81120ff8:	003ddb06 	br	81120768 <__reset+0xfb100768>
81120ffc:	02a04534 	movhi	r10,33044
81121000:	52b1b804 	addi	r10,r10,-14624
81121004:	da802415 	stw	r10,144(sp)
81121008:	003e8306 	br	81120a18 <__reset+0xfb100a18>
8112100c:	d8801c17 	ldw	r2,112(sp)
81121010:	dd002117 	ldw	r20,132(sp)
81121014:	103eb926 	beq	r2,zero,81120afc <__reset+0xfb100afc>
81121018:	d9002017 	ldw	r4,128(sp)
8112101c:	d9801a04 	addi	r6,sp,104
81121020:	a00b883a 	mov	r5,r20
81121024:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81121028:	003eb406 	br	81120afc <__reset+0xfb100afc>
8112102c:	80c00043 	ldbu	r3,1(r16)
81121030:	a5000814 	ori	r20,r20,32
81121034:	84000044 	addi	r16,r16,1
81121038:	18c03fcc 	andi	r3,r3,255
8112103c:	18c0201c 	xori	r3,r3,128
81121040:	18ffe004 	addi	r3,r3,-128
81121044:	003bb706 	br	8111ff24 <__reset+0xfb0fff24>
81121048:	a809883a 	mov	r4,r21
8112104c:	d8c02a15 	stw	r3,168(sp)
81121050:	da002b15 	stw	r8,172(sp)
81121054:	11118240 	call	81111824 <strlen>
81121058:	d8c02a17 	ldw	r3,168(sp)
8112105c:	1027883a 	mov	r19,r2
81121060:	df001d83 	ldbu	fp,118(sp)
81121064:	d8c02215 	stw	r3,136(sp)
81121068:	0013883a 	mov	r9,zero
8112106c:	da002b17 	ldw	r8,172(sp)
81121070:	003c4d06 	br	811201a8 <__reset+0xfb1001a8>
81121074:	d9402117 	ldw	r5,132(sp)
81121078:	d9002017 	ldw	r4,128(sp)
8112107c:	d9801a04 	addi	r6,sp,104
81121080:	da402c15 	stw	r9,176(sp)
81121084:	111fc840 	call	8111fc84 <__sprint_r.part.0>
81121088:	da402c17 	ldw	r9,176(sp)
8112108c:	103e9a1e 	bne	r2,zero,81120af8 <__reset+0xfb100af8>
81121090:	d9401b17 	ldw	r5,108(sp)
81121094:	d8801c17 	ldw	r2,112(sp)
81121098:	d811883a 	mov	r8,sp
8112109c:	29000044 	addi	r4,r5,1
811210a0:	003e4206 	br	811209ac <__reset+0xfb1009ac>
811210a4:	d9401b17 	ldw	r5,108(sp)
811210a8:	01204534 	movhi	r4,33044
811210ac:	2131bc04 	addi	r4,r4,-14608
811210b0:	d9002415 	stw	r4,144(sp)
811210b4:	29400044 	addi	r5,r5,1
811210b8:	003c6d06 	br	81120270 <__reset+0xfb100270>
811210bc:	0039883a 	mov	fp,zero
811210c0:	00800084 	movi	r2,2
811210c4:	10803fcc 	andi	r2,r2,255
811210c8:	01000044 	movi	r4,1
811210cc:	11001e26 	beq	r2,r4,81121148 <___vfiprintf_internal_r+0x13a8>
811210d0:	01000084 	movi	r4,2
811210d4:	11001e1e 	bne	r2,r4,81121150 <___vfiprintf_internal_r+0x13b0>
811210d8:	1829883a 	mov	r20,r3
811210dc:	003eea06 	br	81120c88 <__reset+0xfb100c88>
811210e0:	a007883a 	mov	r3,r20
811210e4:	00800044 	movi	r2,1
811210e8:	003ff606 	br	811210c4 <__reset+0xfb1010c4>
811210ec:	00800184 	movi	r2,6
811210f0:	1240012e 	bgeu	r2,r9,811210f8 <___vfiprintf_internal_r+0x1358>
811210f4:	1013883a 	mov	r9,r2
811210f8:	4827883a 	mov	r19,r9
811210fc:	4825883a 	mov	r18,r9
81121100:	48001516 	blt	r9,zero,81121158 <___vfiprintf_internal_r+0x13b8>
81121104:	05604534 	movhi	r21,33044
81121108:	d8c02215 	stw	r3,136(sp)
8112110c:	ad712b04 	addi	r21,r21,-15188
81121110:	003d1406 	br	81120564 <__reset+0xfb100564>
81121114:	02a04534 	movhi	r10,33044
81121118:	52b1b804 	addi	r10,r10,-14624
8112111c:	da802415 	stw	r10,144(sp)
81121120:	200d883a 	mov	r6,r4
81121124:	003c9106 	br	8112036c <__reset+0xfb10036c>
81121128:	5021883a 	mov	r16,r10
8112112c:	0013883a 	mov	r9,zero
81121130:	003b7d06 	br	8111ff28 <__reset+0xfb0fff28>
81121134:	4827883a 	mov	r19,r9
81121138:	df001d83 	ldbu	fp,118(sp)
8112113c:	d8c02215 	stw	r3,136(sp)
81121140:	0013883a 	mov	r9,zero
81121144:	003c1806 	br	811201a8 <__reset+0xfb1001a8>
81121148:	1829883a 	mov	r20,r3
8112114c:	003d1806 	br	811205b0 <__reset+0xfb1005b0>
81121150:	1829883a 	mov	r20,r3
81121154:	003ccd06 	br	8112048c <__reset+0xfb10048c>
81121158:	0025883a 	mov	r18,zero
8112115c:	003fe906 	br	81121104 <__reset+0xfb101104>
81121160:	d8802217 	ldw	r2,136(sp)
81121164:	80c00043 	ldbu	r3,1(r16)
81121168:	5021883a 	mov	r16,r10
8112116c:	12400017 	ldw	r9,0(r2)
81121170:	10800104 	addi	r2,r2,4
81121174:	d8802215 	stw	r2,136(sp)
81121178:	483faf0e 	bge	r9,zero,81121038 <__reset+0xfb101038>
8112117c:	18c03fcc 	andi	r3,r3,255
81121180:	18c0201c 	xori	r3,r3,128
81121184:	027fffc4 	movi	r9,-1
81121188:	18ffe004 	addi	r3,r3,-128
8112118c:	003b6506 	br	8111ff24 <__reset+0xfb0fff24>
81121190:	d9c01d85 	stb	r7,118(sp)
81121194:	003ca006 	br	81120418 <__reset+0xfb100418>
81121198:	d9c01d85 	stb	r7,118(sp)
8112119c:	003cad06 	br	81120454 <__reset+0xfb100454>
811211a0:	d9c01d85 	stb	r7,118(sp)
811211a4:	003d7d06 	br	8112079c <__reset+0xfb10079c>
811211a8:	d9c01d85 	stb	r7,118(sp)
811211ac:	003d5f06 	br	8112072c <__reset+0xfb10072c>
811211b0:	a080004c 	andi	r2,r20,1
811211b4:	0039883a 	mov	fp,zero
811211b8:	10000526 	beq	r2,zero,811211d0 <___vfiprintf_internal_r+0x1430>
811211bc:	00800c04 	movi	r2,48
811211c0:	d88019c5 	stb	r2,103(sp)
811211c4:	dcc02717 	ldw	r19,156(sp)
811211c8:	dd4019c4 	addi	r21,sp,103
811211cc:	003bf606 	br	811201a8 <__reset+0xfb1001a8>
811211d0:	0027883a 	mov	r19,zero
811211d4:	dd401a04 	addi	r21,sp,104
811211d8:	003bf306 	br	811201a8 <__reset+0xfb1001a8>
811211dc:	d9c01d85 	stb	r7,118(sp)
811211e0:	003dc806 	br	81120904 <__reset+0xfb100904>
811211e4:	d9c01d85 	stb	r7,118(sp)
811211e8:	003d3a06 	br	811206d4 <__reset+0xfb1006d4>
811211ec:	d9c01d85 	stb	r7,118(sp)
811211f0:	003d2a06 	br	8112069c <__reset+0xfb10069c>
811211f4:	d9c01d85 	stb	r7,118(sp)
811211f8:	003cde06 	br	81120574 <__reset+0xfb100574>
811211fc:	d9c01d85 	stb	r7,118(sp)
81121200:	003cbc06 	br	811204f4 <__reset+0xfb1004f4>

81121204 <__vfiprintf_internal>:
81121204:	00a04534 	movhi	r2,33044
81121208:	10ba2704 	addi	r2,r2,-5988
8112120c:	300f883a 	mov	r7,r6
81121210:	280d883a 	mov	r6,r5
81121214:	200b883a 	mov	r5,r4
81121218:	11000017 	ldw	r4,0(r2)
8112121c:	111fda01 	jmpi	8111fda0 <___vfiprintf_internal_r>

81121220 <__sbprintf>:
81121220:	defee204 	addi	sp,sp,-1144
81121224:	de00012e 	bgeu	sp,et,8112122c <__sbprintf+0xc>
81121228:	003b68fa 	trap	3
8112122c:	2880030b 	ldhu	r2,12(r5)
81121230:	2ac01917 	ldw	r11,100(r5)
81121234:	2a80038b 	ldhu	r10,14(r5)
81121238:	2a400717 	ldw	r9,28(r5)
8112123c:	2a000917 	ldw	r8,36(r5)
81121240:	00c10004 	movi	r3,1024
81121244:	dc011a15 	stw	r16,1128(sp)
81121248:	10bfff4c 	andi	r2,r2,65533
8112124c:	2821883a 	mov	r16,r5
81121250:	d8cb883a 	add	r5,sp,r3
81121254:	dc811c15 	stw	r18,1136(sp)
81121258:	dc411b15 	stw	r17,1132(sp)
8112125c:	dfc11d15 	stw	ra,1140(sp)
81121260:	2025883a 	mov	r18,r4
81121264:	d881030d 	sth	r2,1036(sp)
81121268:	dac11915 	stw	r11,1124(sp)
8112126c:	da81038d 	sth	r10,1038(sp)
81121270:	da410715 	stw	r9,1052(sp)
81121274:	da010915 	stw	r8,1060(sp)
81121278:	dec10015 	stw	sp,1024(sp)
8112127c:	dec10415 	stw	sp,1040(sp)
81121280:	d8c10215 	stw	r3,1032(sp)
81121284:	d8c10515 	stw	r3,1044(sp)
81121288:	d8010615 	stw	zero,1048(sp)
8112128c:	111fda00 	call	8111fda0 <___vfiprintf_internal_r>
81121290:	1023883a 	mov	r17,r2
81121294:	10000416 	blt	r2,zero,811212a8 <__sbprintf+0x88>
81121298:	d9410004 	addi	r5,sp,1024
8112129c:	9009883a 	mov	r4,r18
811212a0:	11195580 	call	81119558 <_fflush_r>
811212a4:	10000d1e 	bne	r2,zero,811212dc <__sbprintf+0xbc>
811212a8:	d881030b 	ldhu	r2,1036(sp)
811212ac:	1080100c 	andi	r2,r2,64
811212b0:	10000326 	beq	r2,zero,811212c0 <__sbprintf+0xa0>
811212b4:	8080030b 	ldhu	r2,12(r16)
811212b8:	10801014 	ori	r2,r2,64
811212bc:	8080030d 	sth	r2,12(r16)
811212c0:	8805883a 	mov	r2,r17
811212c4:	dfc11d17 	ldw	ra,1140(sp)
811212c8:	dc811c17 	ldw	r18,1136(sp)
811212cc:	dc411b17 	ldw	r17,1132(sp)
811212d0:	dc011a17 	ldw	r16,1128(sp)
811212d4:	dec11e04 	addi	sp,sp,1144
811212d8:	f800283a 	ret
811212dc:	047fffc4 	movi	r17,-1
811212e0:	003ff106 	br	811212a8 <__reset+0xfb1012a8>

811212e4 <_calloc_r>:
811212e4:	298b383a 	mul	r5,r5,r6
811212e8:	defffe04 	addi	sp,sp,-8
811212ec:	de00012e 	bgeu	sp,et,811212f4 <_calloc_r+0x10>
811212f0:	003b68fa 	trap	3
811212f4:	dfc00115 	stw	ra,4(sp)
811212f8:	dc000015 	stw	r16,0(sp)
811212fc:	11106940 	call	81110694 <_malloc_r>
81121300:	10002926 	beq	r2,zero,811213a8 <_calloc_r+0xc4>
81121304:	11bfff17 	ldw	r6,-4(r2)
81121308:	1021883a 	mov	r16,r2
8112130c:	00bfff04 	movi	r2,-4
81121310:	308c703a 	and	r6,r6,r2
81121314:	00c00904 	movi	r3,36
81121318:	308d883a 	add	r6,r6,r2
8112131c:	19801636 	bltu	r3,r6,81121378 <_calloc_r+0x94>
81121320:	008004c4 	movi	r2,19
81121324:	11800b2e 	bgeu	r2,r6,81121354 <_calloc_r+0x70>
81121328:	80000015 	stw	zero,0(r16)
8112132c:	80000115 	stw	zero,4(r16)
81121330:	008006c4 	movi	r2,27
81121334:	11801a2e 	bgeu	r2,r6,811213a0 <_calloc_r+0xbc>
81121338:	80000215 	stw	zero,8(r16)
8112133c:	80000315 	stw	zero,12(r16)
81121340:	30c0151e 	bne	r6,r3,81121398 <_calloc_r+0xb4>
81121344:	80000415 	stw	zero,16(r16)
81121348:	80800604 	addi	r2,r16,24
8112134c:	80000515 	stw	zero,20(r16)
81121350:	00000106 	br	81121358 <_calloc_r+0x74>
81121354:	8005883a 	mov	r2,r16
81121358:	10000015 	stw	zero,0(r2)
8112135c:	10000115 	stw	zero,4(r2)
81121360:	10000215 	stw	zero,8(r2)
81121364:	8005883a 	mov	r2,r16
81121368:	dfc00117 	ldw	ra,4(sp)
8112136c:	dc000017 	ldw	r16,0(sp)
81121370:	dec00204 	addi	sp,sp,8
81121374:	f800283a 	ret
81121378:	000b883a 	mov	r5,zero
8112137c:	8009883a 	mov	r4,r16
81121380:	1110ff80 	call	81110ff8 <memset>
81121384:	8005883a 	mov	r2,r16
81121388:	dfc00117 	ldw	ra,4(sp)
8112138c:	dc000017 	ldw	r16,0(sp)
81121390:	dec00204 	addi	sp,sp,8
81121394:	f800283a 	ret
81121398:	80800404 	addi	r2,r16,16
8112139c:	003fee06 	br	81121358 <__reset+0xfb101358>
811213a0:	80800204 	addi	r2,r16,8
811213a4:	003fec06 	br	81121358 <__reset+0xfb101358>
811213a8:	0005883a 	mov	r2,zero
811213ac:	003fee06 	br	81121368 <__reset+0xfb101368>

811213b0 <_fclose_r>:
811213b0:	28003b26 	beq	r5,zero,811214a0 <_fclose_r+0xf0>
811213b4:	defffc04 	addi	sp,sp,-16
811213b8:	de00012e 	bgeu	sp,et,811213c0 <_fclose_r+0x10>
811213bc:	003b68fa 	trap	3
811213c0:	dc400115 	stw	r17,4(sp)
811213c4:	dc000015 	stw	r16,0(sp)
811213c8:	dfc00315 	stw	ra,12(sp)
811213cc:	dc800215 	stw	r18,8(sp)
811213d0:	2023883a 	mov	r17,r4
811213d4:	2821883a 	mov	r16,r5
811213d8:	20000226 	beq	r4,zero,811213e4 <_fclose_r+0x34>
811213dc:	20800e17 	ldw	r2,56(r4)
811213e0:	10002726 	beq	r2,zero,81121480 <_fclose_r+0xd0>
811213e4:	8080030f 	ldh	r2,12(r16)
811213e8:	1000071e 	bne	r2,zero,81121408 <_fclose_r+0x58>
811213ec:	0005883a 	mov	r2,zero
811213f0:	dfc00317 	ldw	ra,12(sp)
811213f4:	dc800217 	ldw	r18,8(sp)
811213f8:	dc400117 	ldw	r17,4(sp)
811213fc:	dc000017 	ldw	r16,0(sp)
81121400:	dec00404 	addi	sp,sp,16
81121404:	f800283a 	ret
81121408:	800b883a 	mov	r5,r16
8112140c:	8809883a 	mov	r4,r17
81121410:	11193340 	call	81119334 <__sflush_r>
81121414:	1025883a 	mov	r18,r2
81121418:	80800b17 	ldw	r2,44(r16)
8112141c:	10000426 	beq	r2,zero,81121430 <_fclose_r+0x80>
81121420:	81400717 	ldw	r5,28(r16)
81121424:	8809883a 	mov	r4,r17
81121428:	103ee83a 	callr	r2
8112142c:	10001616 	blt	r2,zero,81121488 <_fclose_r+0xd8>
81121430:	8080030b 	ldhu	r2,12(r16)
81121434:	1080200c 	andi	r2,r2,128
81121438:	1000151e 	bne	r2,zero,81121490 <_fclose_r+0xe0>
8112143c:	81400c17 	ldw	r5,48(r16)
81121440:	28000526 	beq	r5,zero,81121458 <_fclose_r+0xa8>
81121444:	80801004 	addi	r2,r16,64
81121448:	28800226 	beq	r5,r2,81121454 <_fclose_r+0xa4>
8112144c:	8809883a 	mov	r4,r17
81121450:	1119dec0 	call	81119dec <_free_r>
81121454:	80000c15 	stw	zero,48(r16)
81121458:	81401117 	ldw	r5,68(r16)
8112145c:	28000326 	beq	r5,zero,8112146c <_fclose_r+0xbc>
81121460:	8809883a 	mov	r4,r17
81121464:	1119dec0 	call	81119dec <_free_r>
81121468:	80001115 	stw	zero,68(r16)
8112146c:	11199640 	call	81119964 <__sfp_lock_acquire>
81121470:	8000030d 	sth	zero,12(r16)
81121474:	11199680 	call	81119968 <__sfp_lock_release>
81121478:	9005883a 	mov	r2,r18
8112147c:	003fdc06 	br	811213f0 <__reset+0xfb1013f0>
81121480:	11199540 	call	81119954 <__sinit>
81121484:	003fd706 	br	811213e4 <__reset+0xfb1013e4>
81121488:	04bfffc4 	movi	r18,-1
8112148c:	003fe806 	br	81121430 <__reset+0xfb101430>
81121490:	81400417 	ldw	r5,16(r16)
81121494:	8809883a 	mov	r4,r17
81121498:	1119dec0 	call	81119dec <_free_r>
8112149c:	003fe706 	br	8112143c <__reset+0xfb10143c>
811214a0:	0005883a 	mov	r2,zero
811214a4:	f800283a 	ret

811214a8 <fclose>:
811214a8:	00a04534 	movhi	r2,33044
811214ac:	10ba2704 	addi	r2,r2,-5988
811214b0:	200b883a 	mov	r5,r4
811214b4:	11000017 	ldw	r4,0(r2)
811214b8:	11213b01 	jmpi	811213b0 <_fclose_r>

811214bc <__fputwc>:
811214bc:	defff804 	addi	sp,sp,-32
811214c0:	de00012e 	bgeu	sp,et,811214c8 <__fputwc+0xc>
811214c4:	003b68fa 	trap	3
811214c8:	dcc00415 	stw	r19,16(sp)
811214cc:	dc800315 	stw	r18,12(sp)
811214d0:	dc000115 	stw	r16,4(sp)
811214d4:	dfc00715 	stw	ra,28(sp)
811214d8:	dd400615 	stw	r21,24(sp)
811214dc:	dd000515 	stw	r20,20(sp)
811214e0:	dc400215 	stw	r17,8(sp)
811214e4:	2027883a 	mov	r19,r4
811214e8:	2825883a 	mov	r18,r5
811214ec:	3021883a 	mov	r16,r6
811214f0:	111a87c0 	call	8111a87c <__locale_mb_cur_max>
811214f4:	00c00044 	movi	r3,1
811214f8:	10c03e26 	beq	r2,r3,811215f4 <__fputwc+0x138>
811214fc:	81c01704 	addi	r7,r16,92
81121500:	900d883a 	mov	r6,r18
81121504:	d80b883a 	mov	r5,sp
81121508:	9809883a 	mov	r4,r19
8112150c:	11224a00 	call	811224a0 <_wcrtomb_r>
81121510:	1029883a 	mov	r20,r2
81121514:	00bfffc4 	movi	r2,-1
81121518:	a0802026 	beq	r20,r2,8112159c <__fputwc+0xe0>
8112151c:	d9400003 	ldbu	r5,0(sp)
81121520:	a0001c26 	beq	r20,zero,81121594 <__fputwc+0xd8>
81121524:	0023883a 	mov	r17,zero
81121528:	05400284 	movi	r21,10
8112152c:	00000906 	br	81121554 <__fputwc+0x98>
81121530:	80800017 	ldw	r2,0(r16)
81121534:	11400005 	stb	r5,0(r2)
81121538:	80c00017 	ldw	r3,0(r16)
8112153c:	18c00044 	addi	r3,r3,1
81121540:	80c00015 	stw	r3,0(r16)
81121544:	8c400044 	addi	r17,r17,1
81121548:	dc45883a 	add	r2,sp,r17
8112154c:	8d00112e 	bgeu	r17,r20,81121594 <__fputwc+0xd8>
81121550:	11400003 	ldbu	r5,0(r2)
81121554:	80c00217 	ldw	r3,8(r16)
81121558:	18ffffc4 	addi	r3,r3,-1
8112155c:	80c00215 	stw	r3,8(r16)
81121560:	183ff30e 	bge	r3,zero,81121530 <__reset+0xfb101530>
81121564:	80800617 	ldw	r2,24(r16)
81121568:	18801916 	blt	r3,r2,811215d0 <__fputwc+0x114>
8112156c:	80800017 	ldw	r2,0(r16)
81121570:	11400005 	stb	r5,0(r2)
81121574:	80800017 	ldw	r2,0(r16)
81121578:	10c00003 	ldbu	r3,0(r2)
8112157c:	10800044 	addi	r2,r2,1
81121580:	1d402326 	beq	r3,r21,81121610 <__fputwc+0x154>
81121584:	80800015 	stw	r2,0(r16)
81121588:	8c400044 	addi	r17,r17,1
8112158c:	dc45883a 	add	r2,sp,r17
81121590:	8d3fef36 	bltu	r17,r20,81121550 <__reset+0xfb101550>
81121594:	9005883a 	mov	r2,r18
81121598:	00000406 	br	811215ac <__fputwc+0xf0>
8112159c:	80c0030b 	ldhu	r3,12(r16)
811215a0:	a005883a 	mov	r2,r20
811215a4:	18c01014 	ori	r3,r3,64
811215a8:	80c0030d 	sth	r3,12(r16)
811215ac:	dfc00717 	ldw	ra,28(sp)
811215b0:	dd400617 	ldw	r21,24(sp)
811215b4:	dd000517 	ldw	r20,20(sp)
811215b8:	dcc00417 	ldw	r19,16(sp)
811215bc:	dc800317 	ldw	r18,12(sp)
811215c0:	dc400217 	ldw	r17,8(sp)
811215c4:	dc000117 	ldw	r16,4(sp)
811215c8:	dec00804 	addi	sp,sp,32
811215cc:	f800283a 	ret
811215d0:	800d883a 	mov	r6,r16
811215d4:	29403fcc 	andi	r5,r5,255
811215d8:	9809883a 	mov	r4,r19
811215dc:	11223400 	call	81122340 <__swbuf_r>
811215e0:	10bfffe0 	cmpeqi	r2,r2,-1
811215e4:	10803fcc 	andi	r2,r2,255
811215e8:	103fd626 	beq	r2,zero,81121544 <__reset+0xfb101544>
811215ec:	00bfffc4 	movi	r2,-1
811215f0:	003fee06 	br	811215ac <__reset+0xfb1015ac>
811215f4:	90ffffc4 	addi	r3,r18,-1
811215f8:	01003f84 	movi	r4,254
811215fc:	20ffbf36 	bltu	r4,r3,811214fc <__reset+0xfb1014fc>
81121600:	900b883a 	mov	r5,r18
81121604:	dc800005 	stb	r18,0(sp)
81121608:	1029883a 	mov	r20,r2
8112160c:	003fc506 	br	81121524 <__reset+0xfb101524>
81121610:	800d883a 	mov	r6,r16
81121614:	a80b883a 	mov	r5,r21
81121618:	9809883a 	mov	r4,r19
8112161c:	11223400 	call	81122340 <__swbuf_r>
81121620:	10bfffe0 	cmpeqi	r2,r2,-1
81121624:	003fef06 	br	811215e4 <__reset+0xfb1015e4>

81121628 <_fputwc_r>:
81121628:	3080030b 	ldhu	r2,12(r6)
8112162c:	10c8000c 	andi	r3,r2,8192
81121630:	1800051e 	bne	r3,zero,81121648 <_fputwc_r+0x20>
81121634:	30c01917 	ldw	r3,100(r6)
81121638:	10880014 	ori	r2,r2,8192
8112163c:	3080030d 	sth	r2,12(r6)
81121640:	18880014 	ori	r2,r3,8192
81121644:	30801915 	stw	r2,100(r6)
81121648:	11214bc1 	jmpi	811214bc <__fputwc>

8112164c <fputwc>:
8112164c:	00a04534 	movhi	r2,33044
81121650:	defffc04 	addi	sp,sp,-16
81121654:	10ba2704 	addi	r2,r2,-5988
81121658:	de00012e 	bgeu	sp,et,81121660 <fputwc+0x14>
8112165c:	003b68fa 	trap	3
81121660:	dc000115 	stw	r16,4(sp)
81121664:	14000017 	ldw	r16,0(r2)
81121668:	dc400215 	stw	r17,8(sp)
8112166c:	dfc00315 	stw	ra,12(sp)
81121670:	2023883a 	mov	r17,r4
81121674:	80000226 	beq	r16,zero,81121680 <fputwc+0x34>
81121678:	80800e17 	ldw	r2,56(r16)
8112167c:	10001026 	beq	r2,zero,811216c0 <fputwc+0x74>
81121680:	2880030b 	ldhu	r2,12(r5)
81121684:	10c8000c 	andi	r3,r2,8192
81121688:	1800051e 	bne	r3,zero,811216a0 <fputwc+0x54>
8112168c:	28c01917 	ldw	r3,100(r5)
81121690:	10880014 	ori	r2,r2,8192
81121694:	2880030d 	sth	r2,12(r5)
81121698:	18880014 	ori	r2,r3,8192
8112169c:	28801915 	stw	r2,100(r5)
811216a0:	280d883a 	mov	r6,r5
811216a4:	8009883a 	mov	r4,r16
811216a8:	880b883a 	mov	r5,r17
811216ac:	dfc00317 	ldw	ra,12(sp)
811216b0:	dc400217 	ldw	r17,8(sp)
811216b4:	dc000117 	ldw	r16,4(sp)
811216b8:	dec00404 	addi	sp,sp,16
811216bc:	11214bc1 	jmpi	811214bc <__fputwc>
811216c0:	8009883a 	mov	r4,r16
811216c4:	d9400015 	stw	r5,0(sp)
811216c8:	11199540 	call	81119954 <__sinit>
811216cc:	d9400017 	ldw	r5,0(sp)
811216d0:	003feb06 	br	81121680 <__reset+0xfb101680>

811216d4 <rshift>:
811216d4:	2807d17a 	srai	r3,r5,5
811216d8:	20800417 	ldw	r2,16(r4)
811216dc:	22000504 	addi	r8,r4,20
811216e0:	1880250e 	bge	r3,r2,81121778 <rshift+0xa4>
811216e4:	1085883a 	add	r2,r2,r2
811216e8:	18c7883a 	add	r3,r3,r3
811216ec:	1085883a 	add	r2,r2,r2
811216f0:	18c7883a 	add	r3,r3,r3
811216f4:	294007cc 	andi	r5,r5,31
811216f8:	4085883a 	add	r2,r8,r2
811216fc:	40c7883a 	add	r3,r8,r3
81121700:	28002026 	beq	r5,zero,81121784 <rshift+0xb0>
81121704:	19800017 	ldw	r6,0(r3)
81121708:	02c00804 	movi	r11,32
8112170c:	19c00104 	addi	r7,r3,4
81121710:	5957c83a 	sub	r11,r11,r5
81121714:	314cd83a 	srl	r6,r6,r5
81121718:	38802c2e 	bgeu	r7,r2,811217cc <rshift+0xf8>
8112171c:	4015883a 	mov	r10,r8
81121720:	3a400017 	ldw	r9,0(r7)
81121724:	52800104 	addi	r10,r10,4
81121728:	39c00104 	addi	r7,r7,4
8112172c:	4ad2983a 	sll	r9,r9,r11
81121730:	498cb03a 	or	r6,r9,r6
81121734:	51bfff15 	stw	r6,-4(r10)
81121738:	39bfff17 	ldw	r6,-4(r7)
8112173c:	314cd83a 	srl	r6,r6,r5
81121740:	38bff736 	bltu	r7,r2,81121720 <__reset+0xfb101720>
81121744:	10c7c83a 	sub	r3,r2,r3
81121748:	18fffec4 	addi	r3,r3,-5
8112174c:	1806d0ba 	srli	r3,r3,2
81121750:	18c00044 	addi	r3,r3,1
81121754:	18c7883a 	add	r3,r3,r3
81121758:	18c7883a 	add	r3,r3,r3
8112175c:	40c7883a 	add	r3,r8,r3
81121760:	19800015 	stw	r6,0(r3)
81121764:	30000126 	beq	r6,zero,8112176c <rshift+0x98>
81121768:	18c00104 	addi	r3,r3,4
8112176c:	1a05c83a 	sub	r2,r3,r8
81121770:	1005d0ba 	srai	r2,r2,2
81121774:	00001206 	br	811217c0 <rshift+0xec>
81121778:	20000415 	stw	zero,16(r4)
8112177c:	20000515 	stw	zero,20(r4)
81121780:	f800283a 	ret
81121784:	18bffc2e 	bgeu	r3,r2,81121778 <__reset+0xfb101778>
81121788:	180d883a 	mov	r6,r3
8112178c:	400b883a 	mov	r5,r8
81121790:	31c00017 	ldw	r7,0(r6)
81121794:	29400104 	addi	r5,r5,4
81121798:	31800104 	addi	r6,r6,4
8112179c:	29ffff15 	stw	r7,-4(r5)
811217a0:	30bffb36 	bltu	r6,r2,81121790 <__reset+0xfb101790>
811217a4:	00c6303a 	nor	r3,zero,r3
811217a8:	1885883a 	add	r2,r3,r2
811217ac:	1004d0ba 	srli	r2,r2,2
811217b0:	10800044 	addi	r2,r2,1
811217b4:	1085883a 	add	r2,r2,r2
811217b8:	1085883a 	add	r2,r2,r2
811217bc:	1005d0ba 	srai	r2,r2,2
811217c0:	20800415 	stw	r2,16(r4)
811217c4:	103fed26 	beq	r2,zero,8112177c <__reset+0xfb10177c>
811217c8:	f800283a 	ret
811217cc:	4007883a 	mov	r3,r8
811217d0:	003fe306 	br	81121760 <__reset+0xfb101760>

811217d4 <__gethex>:
811217d4:	deffeb04 	addi	sp,sp,-84
811217d8:	de00012e 	bgeu	sp,et,811217e0 <__gethex+0xc>
811217dc:	003b68fa 	trap	3
811217e0:	dfc01415 	stw	ra,80(sp)
811217e4:	dd801115 	stw	r22,68(sp)
811217e8:	dcc00e15 	stw	r19,56(sp)
811217ec:	dc800d15 	stw	r18,52(sp)
811217f0:	2827883a 	mov	r19,r5
811217f4:	d9000115 	stw	r4,4(sp)
811217f8:	d9800015 	stw	r6,0(sp)
811217fc:	d9c00415 	stw	r7,16(sp)
81121800:	df001315 	stw	fp,76(sp)
81121804:	ddc01215 	stw	r23,72(sp)
81121808:	dd401015 	stw	r21,64(sp)
8112180c:	dd000f15 	stw	r20,60(sp)
81121810:	dc400c15 	stw	r17,48(sp)
81121814:	dc000b15 	stw	r16,44(sp)
81121818:	111a8a00 	call	8111a8a0 <_localeconv_r>
8112181c:	14800017 	ldw	r18,0(r2)
81121820:	9009883a 	mov	r4,r18
81121824:	11118240 	call	81111824 <strlen>
81121828:	98c00017 	ldw	r3,0(r19)
8112182c:	102d883a 	mov	r22,r2
81121830:	9085883a 	add	r2,r18,r2
81121834:	10bfffc3 	ldbu	r2,-1(r2)
81121838:	19000083 	ldbu	r4,2(r3)
8112183c:	d8800305 	stb	r2,12(sp)
81121840:	00800c04 	movi	r2,48
81121844:	2081521e 	bne	r4,r2,81121d90 <__gethex+0x5bc>
81121848:	017fff84 	movi	r5,-2
8112184c:	188000c4 	addi	r2,r3,3
81121850:	28cbc83a 	sub	r5,r5,r3
81121854:	200d883a 	mov	r6,r4
81121858:	28a3883a 	add	r17,r5,r2
8112185c:	102b883a 	mov	r21,r2
81121860:	10800044 	addi	r2,r2,1
81121864:	113fffc3 	ldbu	r4,-1(r2)
81121868:	21bffb26 	beq	r4,r6,81121858 <__reset+0xfb101858>
8112186c:	05204534 	movhi	r20,33044
81121870:	a531c004 	addi	r20,r20,-14592
81121874:	a109883a 	add	r4,r20,r4
81121878:	20800003 	ldbu	r2,0(r4)
8112187c:	10008826 	beq	r2,zero,81121aa0 <__gethex+0x2cc>
81121880:	a8800003 	ldbu	r2,0(r21)
81121884:	0015883a 	mov	r10,zero
81121888:	002f883a 	mov	r23,zero
8112188c:	a085883a 	add	r2,r20,r2
81121890:	10800003 	ldbu	r2,0(r2)
81121894:	a821883a 	mov	r16,r21
81121898:	10000526 	beq	r2,zero,811218b0 <__gethex+0xdc>
8112189c:	84000044 	addi	r16,r16,1
811218a0:	80800003 	ldbu	r2,0(r16)
811218a4:	a085883a 	add	r2,r20,r2
811218a8:	10800003 	ldbu	r2,0(r2)
811218ac:	103ffb1e 	bne	r2,zero,8112189c <__reset+0xfb10189c>
811218b0:	b00d883a 	mov	r6,r22
811218b4:	900b883a 	mov	r5,r18
811218b8:	8009883a 	mov	r4,r16
811218bc:	da800a15 	stw	r10,40(sp)
811218c0:	11222700 	call	81122270 <strncmp>
811218c4:	da800a17 	ldw	r10,40(sp)
811218c8:	1000031e 	bne	r2,zero,811218d8 <__gethex+0x104>
811218cc:	b8015226 	beq	r23,zero,81121e18 <__gethex+0x644>
811218d0:	80800003 	ldbu	r2,0(r16)
811218d4:	00000206 	br	811218e0 <__gethex+0x10c>
811218d8:	80800003 	ldbu	r2,0(r16)
811218dc:	b8011f26 	beq	r23,zero,81121d5c <__gethex+0x588>
811218e0:	85efc83a 	sub	r23,r16,r23
811218e4:	bdef883a 	add	r23,r23,r23
811218e8:	bdef883a 	add	r23,r23,r23
811218ec:	05efc83a 	sub	r23,zero,r23
811218f0:	10803fcc 	andi	r2,r2,255
811218f4:	01001404 	movi	r4,80
811218f8:	11008626 	beq	r2,r4,81121b14 <__gethex+0x340>
811218fc:	01001c04 	movi	r4,112
81121900:	11008426 	beq	r2,r4,81121b14 <__gethex+0x340>
81121904:	8039883a 	mov	fp,r16
81121908:	9c000015 	stw	r16,0(r19)
8112190c:	5000711e 	bne	r10,zero,81121ad4 <__gethex+0x300>
81121910:	e545c83a 	sub	r2,fp,r21
81121914:	10bfffc4 	addi	r2,r2,-1
81121918:	010001c4 	movi	r4,7
8112191c:	000b883a 	mov	r5,zero
81121920:	2080030e 	bge	r4,r2,81121930 <__gethex+0x15c>
81121924:	1005d07a 	srai	r2,r2,1
81121928:	29400044 	addi	r5,r5,1
8112192c:	20bffd16 	blt	r4,r2,81121924 <__reset+0xfb101924>
81121930:	d9000117 	ldw	r4,4(sp)
81121934:	111adbc0 	call	8111adbc <_Balloc>
81121938:	10c00504 	addi	r3,r2,20
8112193c:	d8c00215 	stw	r3,8(sp)
81121940:	1021883a 	mov	r16,r2
81121944:	af01732e 	bgeu	r21,fp,81121f14 <__gethex+0x740>
81121948:	dc400303 	ldbu	r17,12(sp)
8112194c:	03400044 	movi	r13,1
81121950:	1815883a 	mov	r10,r3
81121954:	0013883a 	mov	r9,zero
81121958:	0027883a 	mov	r19,zero
8112195c:	6d9bc83a 	sub	r13,r13,r22
81121960:	02c00804 	movi	r11,32
81121964:	e0bfffc3 	ldbu	r2,-1(fp)
81121968:	e3bfffc4 	addi	r14,fp,-1
8112196c:	88803026 	beq	r17,r2,81121a30 <__gethex+0x25c>
81121970:	9ac04526 	beq	r19,r11,81121a88 <__gethex+0x2b4>
81121974:	980b883a 	mov	r5,r19
81121978:	9cc00104 	addi	r19,r19,4
8112197c:	e13fffc3 	ldbu	r4,-1(fp)
81121980:	7039883a 	mov	fp,r14
81121984:	a109883a 	add	r4,r20,r4
81121988:	20800003 	ldbu	r2,0(r4)
8112198c:	108003cc 	andi	r2,r2,15
81121990:	1144983a 	sll	r2,r2,r5
81121994:	4892b03a 	or	r9,r9,r2
81121998:	af3ff236 	bltu	r21,fp,81121964 <__reset+0xfb101964>
8112199c:	d8c00217 	ldw	r3,8(sp)
811219a0:	50800104 	addi	r2,r10,4
811219a4:	52400015 	stw	r9,0(r10)
811219a8:	10c5c83a 	sub	r2,r2,r3
811219ac:	1005d0ba 	srai	r2,r2,2
811219b0:	4809883a 	mov	r4,r9
811219b4:	80800415 	stw	r2,16(r16)
811219b8:	1022917a 	slli	r17,r2,5
811219bc:	111b0c80 	call	8111b0c8 <__hi0bits>
811219c0:	d8c00017 	ldw	r3,0(sp)
811219c4:	8885c83a 	sub	r2,r17,r2
811219c8:	1c800017 	ldw	r18,0(r3)
811219cc:	9080c716 	blt	r18,r2,81121cec <__gethex+0x518>
811219d0:	1480e416 	blt	r2,r18,81121d64 <__gethex+0x590>
811219d4:	0027883a 	mov	r19,zero
811219d8:	d8c00017 	ldw	r3,0(sp)
811219dc:	18800217 	ldw	r2,8(r3)
811219e0:	15c08d16 	blt	r2,r23,81121c18 <__gethex+0x444>
811219e4:	d8c00017 	ldw	r3,0(sp)
811219e8:	18800117 	ldw	r2,4(r3)
811219ec:	b880aa0e 	bge	r23,r2,81121c98 <__gethex+0x4c4>
811219f0:	15efc83a 	sub	r23,r2,r23
811219f4:	bc80ed16 	blt	r23,r18,81121dac <__gethex+0x5d8>
811219f8:	18c00317 	ldw	r3,12(r3)
811219fc:	01000084 	movi	r4,2
81121a00:	19014926 	beq	r3,r4,81121f28 <__gethex+0x754>
81121a04:	010000c4 	movi	r4,3
81121a08:	19012e26 	beq	r3,r4,81121ec4 <__gethex+0x6f0>
81121a0c:	01000044 	movi	r4,1
81121a10:	19014826 	beq	r3,r4,81121f34 <__gethex+0x760>
81121a14:	d9000117 	ldw	r4,4(sp)
81121a18:	800b883a 	mov	r5,r16
81121a1c:	111ae6c0 	call	8111ae6c <_Bfree>
81121a20:	d8801517 	ldw	r2,84(sp)
81121a24:	10000015 	stw	zero,0(r2)
81121a28:	00801404 	movi	r2,80
81121a2c:	00002b06 	br	81121adc <__gethex+0x308>
81121a30:	735f883a 	add	r15,r14,r13
81121a34:	7d7fce36 	bltu	r15,r21,81121970 <__reset+0xfb101970>
81121a38:	7809883a 	mov	r4,r15
81121a3c:	b00d883a 	mov	r6,r22
81121a40:	900b883a 	mov	r5,r18
81121a44:	da400515 	stw	r9,20(sp)
81121a48:	da800a15 	stw	r10,40(sp)
81121a4c:	dac00915 	stw	r11,36(sp)
81121a50:	db400815 	stw	r13,32(sp)
81121a54:	db800615 	stw	r14,24(sp)
81121a58:	dbc00715 	stw	r15,28(sp)
81121a5c:	11222700 	call	81122270 <strncmp>
81121a60:	da400517 	ldw	r9,20(sp)
81121a64:	da800a17 	ldw	r10,40(sp)
81121a68:	dac00917 	ldw	r11,36(sp)
81121a6c:	db400817 	ldw	r13,32(sp)
81121a70:	db800617 	ldw	r14,24(sp)
81121a74:	dbc00717 	ldw	r15,28(sp)
81121a78:	103fbd1e 	bne	r2,zero,81121970 <__reset+0xfb101970>
81121a7c:	7839883a 	mov	fp,r15
81121a80:	af3fb836 	bltu	r21,fp,81121964 <__reset+0xfb101964>
81121a84:	003fc506 	br	8112199c <__reset+0xfb10199c>
81121a88:	04c00104 	movi	r19,4
81121a8c:	52400015 	stw	r9,0(r10)
81121a90:	000b883a 	mov	r5,zero
81121a94:	54d5883a 	add	r10,r10,r19
81121a98:	0013883a 	mov	r9,zero
81121a9c:	003fb706 	br	8112197c <__reset+0xfb10197c>
81121aa0:	b00d883a 	mov	r6,r22
81121aa4:	900b883a 	mov	r5,r18
81121aa8:	a809883a 	mov	r4,r21
81121aac:	11222700 	call	81122270 <strncmp>
81121ab0:	10006426 	beq	r2,zero,81121c44 <__gethex+0x470>
81121ab4:	a8800003 	ldbu	r2,0(r21)
81121ab8:	a821883a 	mov	r16,r21
81121abc:	10803fcc 	andi	r2,r2,255
81121ac0:	01001404 	movi	r4,80
81121ac4:	11001126 	beq	r2,r4,81121b0c <__gethex+0x338>
81121ac8:	01001c04 	movi	r4,112
81121acc:	11000f26 	beq	r2,r4,81121b0c <__gethex+0x338>
81121ad0:	9c000015 	stw	r16,0(r19)
81121ad4:	8800831e 	bne	r17,zero,81121ce4 <__gethex+0x510>
81121ad8:	00800184 	movi	r2,6
81121adc:	dfc01417 	ldw	ra,80(sp)
81121ae0:	df001317 	ldw	fp,76(sp)
81121ae4:	ddc01217 	ldw	r23,72(sp)
81121ae8:	dd801117 	ldw	r22,68(sp)
81121aec:	dd401017 	ldw	r21,64(sp)
81121af0:	dd000f17 	ldw	r20,60(sp)
81121af4:	dcc00e17 	ldw	r19,56(sp)
81121af8:	dc800d17 	ldw	r18,52(sp)
81121afc:	dc400c17 	ldw	r17,48(sp)
81121b00:	dc000b17 	ldw	r16,44(sp)
81121b04:	dec01504 	addi	sp,sp,84
81121b08:	f800283a 	ret
81121b0c:	002f883a 	mov	r23,zero
81121b10:	02800044 	movi	r10,1
81121b14:	80800043 	ldbu	r2,1(r16)
81121b18:	01400ac4 	movi	r5,43
81121b1c:	11003fcc 	andi	r4,r2,255
81121b20:	21406e26 	beq	r4,r5,81121cdc <__gethex+0x508>
81121b24:	01400b44 	movi	r5,45
81121b28:	21404226 	beq	r4,r5,81121c34 <__gethex+0x460>
81121b2c:	81400044 	addi	r5,r16,1
81121b30:	000d883a 	mov	r6,zero
81121b34:	10803fcc 	andi	r2,r2,255
81121b38:	a085883a 	add	r2,r20,r2
81121b3c:	11000003 	ldbu	r4,0(r2)
81121b40:	03000604 	movi	r12,24
81121b44:	20bfffc4 	addi	r2,r4,-1
81121b48:	10803fcc 	andi	r2,r2,255
81121b4c:	60bf6d36 	bltu	r12,r2,81121904 <__reset+0xfb101904>
81121b50:	2ac00043 	ldbu	r11,1(r5)
81121b54:	20803fcc 	andi	r2,r4,255
81121b58:	01204534 	movhi	r4,33044
81121b5c:	2131c004 	addi	r4,r4,-14592
81121b60:	22c9883a 	add	r4,r4,r11
81121b64:	23400003 	ldbu	r13,0(r4)
81121b68:	10bffc04 	addi	r2,r2,-16
81121b6c:	29400044 	addi	r5,r5,1
81121b70:	693fffc4 	addi	r4,r13,-1
81121b74:	21003fcc 	andi	r4,r4,255
81121b78:	6b403fcc 	andi	r13,r13,255
81121b7c:	61000b36 	bltu	r12,r4,81121bac <__gethex+0x3d8>
81121b80:	29400044 	addi	r5,r5,1
81121b84:	29000003 	ldbu	r4,0(r5)
81121b88:	108002a4 	muli	r2,r2,10
81121b8c:	a109883a 	add	r4,r20,r4
81121b90:	22c00003 	ldbu	r11,0(r4)
81121b94:	1345883a 	add	r2,r2,r13
81121b98:	10bffc04 	addi	r2,r2,-16
81121b9c:	593fffc4 	addi	r4,r11,-1
81121ba0:	21003fcc 	andi	r4,r4,255
81121ba4:	5b403fcc 	andi	r13,r11,255
81121ba8:	613ff52e 	bgeu	r12,r4,81121b80 <__reset+0xfb101b80>
81121bac:	30000126 	beq	r6,zero,81121bb4 <__gethex+0x3e0>
81121bb0:	0085c83a 	sub	r2,zero,r2
81121bb4:	8039883a 	mov	fp,r16
81121bb8:	b8af883a 	add	r23,r23,r2
81121bbc:	2821883a 	mov	r16,r5
81121bc0:	003f5106 	br	81121908 <__reset+0xfb101908>
81121bc4:	80800217 	ldw	r2,8(r16)
81121bc8:	e080f00e 	bge	fp,r2,81121f8c <__gethex+0x7b8>
81121bcc:	e007883a 	mov	r3,fp
81121bd0:	18800144 	addi	r2,r3,5
81121bd4:	1085883a 	add	r2,r2,r2
81121bd8:	18c00044 	addi	r3,r3,1
81121bdc:	1085883a 	add	r2,r2,r2
81121be0:	8085883a 	add	r2,r16,r2
81121be4:	80c00415 	stw	r3,16(r16)
81121be8:	01000044 	movi	r4,1
81121bec:	11000015 	stw	r4,0(r2)
81121bf0:	00800084 	movi	r2,2
81121bf4:	8880d826 	beq	r17,r2,81121f58 <__gethex+0x784>
81121bf8:	e0c0ac0e 	bge	fp,r3,81121eac <__gethex+0x6d8>
81121bfc:	01400044 	movi	r5,1
81121c00:	8009883a 	mov	r4,r16
81121c04:	11216d40 	call	811216d4 <rshift>
81121c08:	d8c00017 	ldw	r3,0(sp)
81121c0c:	bdc00044 	addi	r23,r23,1
81121c10:	18800217 	ldw	r2,8(r3)
81121c14:	15c0a70e 	bge	r2,r23,81121eb4 <__gethex+0x6e0>
81121c18:	d9000117 	ldw	r4,4(sp)
81121c1c:	800b883a 	mov	r5,r16
81121c20:	111ae6c0 	call	8111ae6c <_Bfree>
81121c24:	d9001517 	ldw	r4,84(sp)
81121c28:	008028c4 	movi	r2,163
81121c2c:	20000015 	stw	zero,0(r4)
81121c30:	003faa06 	br	81121adc <__reset+0xfb101adc>
81121c34:	01800044 	movi	r6,1
81121c38:	80800083 	ldbu	r2,2(r16)
81121c3c:	81400084 	addi	r5,r16,2
81121c40:	003fbc06 	br	81121b34 <__reset+0xfb101b34>
81121c44:	ada1883a 	add	r16,r21,r22
81121c48:	81000003 	ldbu	r4,0(r16)
81121c4c:	21403fcc 	andi	r5,r4,255
81121c50:	a145883a 	add	r2,r20,r5
81121c54:	10800003 	ldbu	r2,0(r2)
81121c58:	11803fcc 	andi	r6,r2,255
81121c5c:	30004f26 	beq	r6,zero,81121d9c <__gethex+0x5c8>
81121c60:	00c00c04 	movi	r3,48
81121c64:	802b883a 	mov	r21,r16
81121c68:	28c0061e 	bne	r5,r3,81121c84 <__gethex+0x4b0>
81121c6c:	2809883a 	mov	r4,r5
81121c70:	ad400044 	addi	r21,r21,1
81121c74:	a8800003 	ldbu	r2,0(r21)
81121c78:	113ffd26 	beq	r2,r4,81121c70 <__reset+0xfb101c70>
81121c7c:	a085883a 	add	r2,r20,r2
81121c80:	10800003 	ldbu	r2,0(r2)
81121c84:	10803fcc 	andi	r2,r2,255
81121c88:	1015003a 	cmpeq	r10,r2,zero
81121c8c:	802f883a 	mov	r23,r16
81121c90:	04400044 	movi	r17,1
81121c94:	003eff06 	br	81121894 <__reset+0xfb101894>
81121c98:	04400044 	movi	r17,1
81121c9c:	98000926 	beq	r19,zero,81121cc4 <__gethex+0x4f0>
81121ca0:	d8c00017 	ldw	r3,0(sp)
81121ca4:	18800317 	ldw	r2,12(r3)
81121ca8:	00c00084 	movi	r3,2
81121cac:	10c06826 	beq	r2,r3,81121e50 <__gethex+0x67c>
81121cb0:	00c000c4 	movi	r3,3
81121cb4:	10c06a26 	beq	r2,r3,81121e60 <__gethex+0x68c>
81121cb8:	00c00044 	movi	r3,1
81121cbc:	10c08d26 	beq	r2,r3,81121ef4 <__gethex+0x720>
81121cc0:	8c400414 	ori	r17,r17,16
81121cc4:	d9001517 	ldw	r4,84(sp)
81121cc8:	d8c00417 	ldw	r3,16(sp)
81121ccc:	8805883a 	mov	r2,r17
81121cd0:	24000015 	stw	r16,0(r4)
81121cd4:	1dc00015 	stw	r23,0(r3)
81121cd8:	003f8006 	br	81121adc <__reset+0xfb101adc>
81121cdc:	000d883a 	mov	r6,zero
81121ce0:	003fd506 	br	81121c38 <__reset+0xfb101c38>
81121ce4:	0005883a 	mov	r2,zero
81121ce8:	003f7c06 	br	81121adc <__reset+0xfb101adc>
81121cec:	14a3c83a 	sub	r17,r2,r18
81121cf0:	880b883a 	mov	r5,r17
81121cf4:	8009883a 	mov	r4,r16
81121cf8:	111bd8c0 	call	8111bd8c <__any_on>
81121cfc:	10002926 	beq	r2,zero,81121da4 <__gethex+0x5d0>
81121d00:	897fffc4 	addi	r5,r17,-1
81121d04:	2807d17a 	srai	r3,r5,5
81121d08:	d8800217 	ldw	r2,8(sp)
81121d0c:	290007cc 	andi	r4,r5,31
81121d10:	18c7883a 	add	r3,r3,r3
81121d14:	18c7883a 	add	r3,r3,r3
81121d18:	04c00044 	movi	r19,1
81121d1c:	10c7883a 	add	r3,r2,r3
81121d20:	9908983a 	sll	r4,r19,r4
81121d24:	18c00017 	ldw	r3,0(r3)
81121d28:	20c6703a 	and	r3,r4,r3
81121d2c:	18000626 	beq	r3,zero,81121d48 <__gethex+0x574>
81121d30:	99407b0e 	bge	r19,r5,81121f20 <__gethex+0x74c>
81121d34:	897fff84 	addi	r5,r17,-2
81121d38:	8009883a 	mov	r4,r16
81121d3c:	111bd8c0 	call	8111bd8c <__any_on>
81121d40:	10007726 	beq	r2,zero,81121f20 <__gethex+0x74c>
81121d44:	04c000c4 	movi	r19,3
81121d48:	880b883a 	mov	r5,r17
81121d4c:	8009883a 	mov	r4,r16
81121d50:	11216d40 	call	811216d4 <rshift>
81121d54:	bc6f883a 	add	r23,r23,r17
81121d58:	003f1f06 	br	811219d8 <__reset+0xfb1019d8>
81121d5c:	002f883a 	mov	r23,zero
81121d60:	003ee306 	br	811218f0 <__reset+0xfb1018f0>
81121d64:	d9000117 	ldw	r4,4(sp)
81121d68:	90a3c83a 	sub	r17,r18,r2
81121d6c:	800b883a 	mov	r5,r16
81121d70:	880d883a 	mov	r6,r17
81121d74:	111b56c0 	call	8111b56c <__lshift>
81121d78:	10c00504 	addi	r3,r2,20
81121d7c:	1021883a 	mov	r16,r2
81121d80:	bc6fc83a 	sub	r23,r23,r17
81121d84:	d8c00215 	stw	r3,8(sp)
81121d88:	0027883a 	mov	r19,zero
81121d8c:	003f1206 	br	811219d8 <__reset+0xfb1019d8>
81121d90:	1d400084 	addi	r21,r3,2
81121d94:	0023883a 	mov	r17,zero
81121d98:	003eb406 	br	8112186c <__reset+0xfb10186c>
81121d9c:	2005883a 	mov	r2,r4
81121da0:	003f4606 	br	81121abc <__reset+0xfb101abc>
81121da4:	0027883a 	mov	r19,zero
81121da8:	003fe706 	br	81121d48 <__reset+0xfb101d48>
81121dac:	bc7fffc4 	addi	r17,r23,-1
81121db0:	9800421e 	bne	r19,zero,81121ebc <__gethex+0x6e8>
81121db4:	88000426 	beq	r17,zero,81121dc8 <__gethex+0x5f4>
81121db8:	880b883a 	mov	r5,r17
81121dbc:	8009883a 	mov	r4,r16
81121dc0:	111bd8c0 	call	8111bd8c <__any_on>
81121dc4:	1027883a 	mov	r19,r2
81121dc8:	8805d17a 	srai	r2,r17,5
81121dcc:	d8c00217 	ldw	r3,8(sp)
81121dd0:	8c4007cc 	andi	r17,r17,31
81121dd4:	1085883a 	add	r2,r2,r2
81121dd8:	1085883a 	add	r2,r2,r2
81121ddc:	1885883a 	add	r2,r3,r2
81121de0:	00c00044 	movi	r3,1
81121de4:	1c62983a 	sll	r17,r3,r17
81121de8:	10800017 	ldw	r2,0(r2)
81121dec:	8884703a 	and	r2,r17,r2
81121df0:	10000126 	beq	r2,zero,81121df8 <__gethex+0x624>
81121df4:	9cc00094 	ori	r19,r19,2
81121df8:	b80b883a 	mov	r5,r23
81121dfc:	8009883a 	mov	r4,r16
81121e00:	11216d40 	call	811216d4 <rshift>
81121e04:	d8c00017 	ldw	r3,0(sp)
81121e08:	95e5c83a 	sub	r18,r18,r23
81121e0c:	04400084 	movi	r17,2
81121e10:	1dc00117 	ldw	r23,4(r3)
81121e14:	003fa106 	br	81121c9c <__reset+0xfb101c9c>
81121e18:	85af883a 	add	r23,r16,r22
81121e1c:	b8800003 	ldbu	r2,0(r23)
81121e20:	b821883a 	mov	r16,r23
81121e24:	11003fcc 	andi	r4,r2,255
81121e28:	a109883a 	add	r4,r20,r4
81121e2c:	21000003 	ldbu	r4,0(r4)
81121e30:	203eaa26 	beq	r4,zero,811218dc <__reset+0xfb1018dc>
81121e34:	84000044 	addi	r16,r16,1
81121e38:	80800003 	ldbu	r2,0(r16)
81121e3c:	11003fcc 	andi	r4,r2,255
81121e40:	a109883a 	add	r4,r20,r4
81121e44:	21000003 	ldbu	r4,0(r4)
81121e48:	203ffa1e 	bne	r4,zero,81121e34 <__reset+0xfb101e34>
81121e4c:	003ea306 	br	811218dc <__reset+0xfb1018dc>
81121e50:	d9001617 	ldw	r4,88(sp)
81121e54:	00800044 	movi	r2,1
81121e58:	1109c83a 	sub	r4,r2,r4
81121e5c:	d9001615 	stw	r4,88(sp)
81121e60:	d8801617 	ldw	r2,88(sp)
81121e64:	103f9626 	beq	r2,zero,81121cc0 <__reset+0xfb101cc0>
81121e68:	87000417 	ldw	fp,16(r16)
81121e6c:	d9800217 	ldw	r6,8(sp)
81121e70:	013fffc4 	movi	r4,-1
81121e74:	e727883a 	add	r19,fp,fp
81121e78:	9ce7883a 	add	r19,r19,r19
81121e7c:	3005883a 	mov	r2,r6
81121e80:	34cb883a 	add	r5,r6,r19
81121e84:	00000306 	br	81121e94 <__gethex+0x6c0>
81121e88:	10000015 	stw	zero,0(r2)
81121e8c:	10800104 	addi	r2,r2,4
81121e90:	117f4c2e 	bgeu	r2,r5,81121bc4 <__reset+0xfb101bc4>
81121e94:	10c00017 	ldw	r3,0(r2)
81121e98:	193ffb26 	beq	r3,r4,81121e88 <__reset+0xfb101e88>
81121e9c:	18c00044 	addi	r3,r3,1
81121ea0:	10c00015 	stw	r3,0(r2)
81121ea4:	00800084 	movi	r2,2
81121ea8:	88802b26 	beq	r17,r2,81121f58 <__gethex+0x784>
81121eac:	948007cc 	andi	r18,r18,31
81121eb0:	90002f1e 	bne	r18,zero,81121f70 <__gethex+0x79c>
81121eb4:	04400844 	movi	r17,33
81121eb8:	003f8206 	br	81121cc4 <__reset+0xfb101cc4>
81121ebc:	04c00044 	movi	r19,1
81121ec0:	003fc106 	br	81121dc8 <__reset+0xfb101dc8>
81121ec4:	d8c01617 	ldw	r3,88(sp)
81121ec8:	183ed226 	beq	r3,zero,81121a14 <__reset+0xfb101a14>
81121ecc:	d8c00417 	ldw	r3,16(sp)
81121ed0:	d9001517 	ldw	r4,84(sp)
81121ed4:	18800015 	stw	r2,0(r3)
81121ed8:	d8c00217 	ldw	r3,8(sp)
81121edc:	00800044 	movi	r2,1
81121ee0:	80800415 	stw	r2,16(r16)
81121ee4:	18800015 	stw	r2,0(r3)
81121ee8:	24000015 	stw	r16,0(r4)
81121eec:	00801884 	movi	r2,98
81121ef0:	003efa06 	br	81121adc <__reset+0xfb101adc>
81121ef4:	9880008c 	andi	r2,r19,2
81121ef8:	103f7126 	beq	r2,zero,81121cc0 <__reset+0xfb101cc0>
81121efc:	d8c00217 	ldw	r3,8(sp)
81121f00:	18800017 	ldw	r2,0(r3)
81121f04:	9884b03a 	or	r2,r19,r2
81121f08:	1080004c 	andi	r2,r2,1
81121f0c:	103fd61e 	bne	r2,zero,81121e68 <__reset+0xfb101e68>
81121f10:	003f6b06 	br	81121cc0 <__reset+0xfb101cc0>
81121f14:	da800217 	ldw	r10,8(sp)
81121f18:	0013883a 	mov	r9,zero
81121f1c:	003e9f06 	br	8112199c <__reset+0xfb10199c>
81121f20:	04c00084 	movi	r19,2
81121f24:	003f8806 	br	81121d48 <__reset+0xfb101d48>
81121f28:	d9001617 	ldw	r4,88(sp)
81121f2c:	203fe726 	beq	r4,zero,81121ecc <__reset+0xfb101ecc>
81121f30:	003eb806 	br	81121a14 <__reset+0xfb101a14>
81121f34:	95feb71e 	bne	r18,r23,81121a14 <__reset+0xfb101a14>
81121f38:	1cbfe40e 	bge	r3,r18,81121ecc <__reset+0xfb101ecc>
81121f3c:	917fffc4 	addi	r5,r18,-1
81121f40:	8009883a 	mov	r4,r16
81121f44:	111bd8c0 	call	8111bd8c <__any_on>
81121f48:	103eb226 	beq	r2,zero,81121a14 <__reset+0xfb101a14>
81121f4c:	d8c00017 	ldw	r3,0(sp)
81121f50:	18800117 	ldw	r2,4(r3)
81121f54:	003fdd06 	br	81121ecc <__reset+0xfb101ecc>
81121f58:	d8c00017 	ldw	r3,0(sp)
81121f5c:	18800017 	ldw	r2,0(r3)
81121f60:	10bfffc4 	addi	r2,r2,-1
81121f64:	90801c26 	beq	r18,r2,81121fd8 <__gethex+0x804>
81121f68:	04400884 	movi	r17,34
81121f6c:	003f5506 	br	81121cc4 <__reset+0xfb101cc4>
81121f70:	34c5883a 	add	r2,r6,r19
81121f74:	113fff17 	ldw	r4,-4(r2)
81121f78:	111b0c80 	call	8111b0c8 <__hi0bits>
81121f7c:	00c00804 	movi	r3,32
81121f80:	1ca5c83a 	sub	r18,r3,r18
81121f84:	14bfcb0e 	bge	r2,r18,81121eb4 <__reset+0xfb101eb4>
81121f88:	003f1c06 	br	81121bfc <__reset+0xfb101bfc>
81121f8c:	81400117 	ldw	r5,4(r16)
81121f90:	d9000117 	ldw	r4,4(sp)
81121f94:	29400044 	addi	r5,r5,1
81121f98:	111adbc0 	call	8111adbc <_Balloc>
81121f9c:	81800417 	ldw	r6,16(r16)
81121fa0:	81400304 	addi	r5,r16,12
81121fa4:	11000304 	addi	r4,r2,12
81121fa8:	31800084 	addi	r6,r6,2
81121fac:	318d883a 	add	r6,r6,r6
81121fb0:	318d883a 	add	r6,r6,r6
81121fb4:	1029883a 	mov	r20,r2
81121fb8:	1110ea80 	call	81110ea8 <memcpy>
81121fbc:	d9000117 	ldw	r4,4(sp)
81121fc0:	800b883a 	mov	r5,r16
81121fc4:	a021883a 	mov	r16,r20
81121fc8:	111ae6c0 	call	8111ae6c <_Bfree>
81121fcc:	a0c00417 	ldw	r3,16(r20)
81121fd0:	a1800504 	addi	r6,r20,20
81121fd4:	003efe06 	br	81121bd0 <__reset+0xfb101bd0>
81121fd8:	9005d17a 	srai	r2,r18,5
81121fdc:	944007cc 	andi	r17,r18,31
81121fe0:	1085883a 	add	r2,r2,r2
81121fe4:	1085883a 	add	r2,r2,r2
81121fe8:	3087883a 	add	r3,r6,r2
81121fec:	00800044 	movi	r2,1
81121ff0:	1462983a 	sll	r17,r2,r17
81121ff4:	18800017 	ldw	r2,0(r3)
81121ff8:	8884703a 	and	r2,r17,r2
81121ffc:	1022c03a 	cmpne	r17,r2,zero
81122000:	00800884 	movi	r2,34
81122004:	1463c83a 	sub	r17,r2,r17
81122008:	003f2e06 	br	81121cc4 <__reset+0xfb101cc4>

8112200c <__hexnan>:
8112200c:	defff904 	addi	sp,sp,-28
81122010:	de00012e 	bgeu	sp,et,81122018 <__hexnan+0xc>
81122014:	003b68fa 	trap	3
81122018:	dc800215 	stw	r18,8(sp)
8112201c:	2c800017 	ldw	r18,0(r5)
81122020:	dfc00615 	stw	ra,24(sp)
81122024:	dd400515 	stw	r21,20(sp)
81122028:	901fd17a 	srai	r15,r18,5
8112202c:	dd000415 	stw	r20,16(sp)
81122030:	dcc00315 	stw	r19,12(sp)
81122034:	7bdf883a 	add	r15,r15,r15
81122038:	7bdf883a 	add	r15,r15,r15
8112203c:	dc400115 	stw	r17,4(sp)
81122040:	dc000015 	stw	r16,0(sp)
81122044:	948007cc 	andi	r18,r18,31
81122048:	33df883a 	add	r15,r6,r15
8112204c:	90000126 	beq	r18,zero,81122054 <__hexnan+0x48>
81122050:	7bc00104 	addi	r15,r15,4
81122054:	22000017 	ldw	r8,0(r4)
81122058:	7affff04 	addi	r11,r15,-4
8112205c:	03a04534 	movhi	r14,33044
81122060:	783fff15 	stw	zero,-4(r15)
81122064:	581b883a 	mov	r13,r11
81122068:	580b883a 	mov	r5,r11
8112206c:	000f883a 	mov	r7,zero
81122070:	003f883a 	mov	ra,zero
81122074:	0019883a 	mov	r12,zero
81122078:	73b1c004 	addi	r14,r14,-14592
8112207c:	04400204 	movi	r17,8
81122080:	04000804 	movi	r16,32
81122084:	04c001c4 	movi	r19,7
81122088:	42000044 	addi	r8,r8,1
8112208c:	40c00003 	ldbu	r3,0(r8)
81122090:	18001d26 	beq	r3,zero,81122108 <__hexnan+0xfc>
81122094:	70c5883a 	add	r2,r14,r3
81122098:	10800003 	ldbu	r2,0(r2)
8112209c:	12403fcc 	andi	r9,r2,255
811220a0:	4800301e 	bne	r9,zero,81122164 <__hexnan+0x158>
811220a4:	80c04236 	bltu	r16,r3,811221b0 <__hexnan+0x1a4>
811220a8:	fb3ff70e 	bge	ra,r12,81122088 <__reset+0xfb102088>
811220ac:	2b40112e 	bgeu	r5,r13,811220f4 <__hexnan+0xe8>
811220b0:	99c01016 	blt	r19,r7,811220f4 <__hexnan+0xe8>
811220b4:	89e9c83a 	sub	r20,r17,r7
811220b8:	a529883a 	add	r20,r20,r20
811220bc:	2a800017 	ldw	r10,0(r5)
811220c0:	a529883a 	add	r20,r20,r20
811220c4:	852bc83a 	sub	r21,r16,r20
811220c8:	28c00104 	addi	r3,r5,4
811220cc:	2805883a 	mov	r2,r5
811220d0:	19c00017 	ldw	r7,0(r3)
811220d4:	10800104 	addi	r2,r2,4
811220d8:	18c00104 	addi	r3,r3,4
811220dc:	3d52983a 	sll	r9,r7,r21
811220e0:	4a92b03a 	or	r9,r9,r10
811220e4:	3d14d83a 	srl	r10,r7,r20
811220e8:	127fff15 	stw	r9,-4(r2)
811220ec:	1abfff15 	stw	r10,-4(r3)
811220f0:	137ff736 	bltu	r2,r13,811220d0 <__reset+0xfb1020d0>
811220f4:	31402836 	bltu	r6,r5,81122198 <__hexnan+0x18c>
811220f8:	42000044 	addi	r8,r8,1
811220fc:	40c00003 	ldbu	r3,0(r8)
81122100:	01c00204 	movi	r7,8
81122104:	183fe31e 	bne	r3,zero,81122094 <__reset+0xfb102094>
81122108:	60002b26 	beq	r12,zero,811221b8 <__hexnan+0x1ac>
8112210c:	2b40022e 	bgeu	r5,r13,81122118 <__hexnan+0x10c>
81122110:	008001c4 	movi	r2,7
81122114:	11c0430e 	bge	r2,r7,81122224 <__hexnan+0x218>
81122118:	3140312e 	bgeu	r6,r5,811221e0 <__hexnan+0x1d4>
8112211c:	3007883a 	mov	r3,r6
81122120:	29000017 	ldw	r4,0(r5)
81122124:	18800104 	addi	r2,r3,4
81122128:	29400104 	addi	r5,r5,4
8112212c:	19000015 	stw	r4,0(r3)
81122130:	1007883a 	mov	r3,r2
81122134:	597ffa2e 	bgeu	r11,r5,81122120 <__reset+0xfb102120>
81122138:	10000015 	stw	zero,0(r2)
8112213c:	10800104 	addi	r2,r2,4
81122140:	58bffd2e 	bgeu	r11,r2,81122138 <__reset+0xfb102138>
81122144:	78bfff17 	ldw	r2,-4(r15)
81122148:	1000041e 	bne	r2,zero,8112215c <__hexnan+0x150>
8112214c:	32c02d26 	beq	r6,r11,81122204 <__hexnan+0x1f8>
81122150:	5affff04 	addi	r11,r11,-4
81122154:	58800017 	ldw	r2,0(r11)
81122158:	103ffc26 	beq	r2,zero,8112214c <__reset+0xfb10214c>
8112215c:	00800144 	movi	r2,5
81122160:	00001606 	br	811221bc <__hexnan+0x1b0>
81122164:	39c00044 	addi	r7,r7,1
81122168:	63000044 	addi	r12,r12,1
8112216c:	89c0040e 	bge	r17,r7,81122180 <__hexnan+0x174>
81122170:	317fc52e 	bgeu	r6,r5,81122088 <__reset+0xfb102088>
81122174:	283fff15 	stw	zero,-4(r5)
81122178:	01c00044 	movi	r7,1
8112217c:	297fff04 	addi	r5,r5,-4
81122180:	28c00017 	ldw	r3,0(r5)
81122184:	108003cc 	andi	r2,r2,15
81122188:	1806913a 	slli	r3,r3,4
8112218c:	1884b03a 	or	r2,r3,r2
81122190:	28800015 	stw	r2,0(r5)
81122194:	003fbc06 	br	81122088 <__reset+0xfb102088>
81122198:	2b7fff04 	addi	r13,r5,-4
8112219c:	283fff15 	stw	zero,-4(r5)
811221a0:	603f883a 	mov	ra,r12
811221a4:	680b883a 	mov	r5,r13
811221a8:	000f883a 	mov	r7,zero
811221ac:	003fb606 	br	81122088 <__reset+0xfb102088>
811221b0:	00800a44 	movi	r2,41
811221b4:	18801726 	beq	r3,r2,81122214 <__hexnan+0x208>
811221b8:	00800104 	movi	r2,4
811221bc:	dfc00617 	ldw	ra,24(sp)
811221c0:	dd400517 	ldw	r21,20(sp)
811221c4:	dd000417 	ldw	r20,16(sp)
811221c8:	dcc00317 	ldw	r19,12(sp)
811221cc:	dc800217 	ldw	r18,8(sp)
811221d0:	dc400117 	ldw	r17,4(sp)
811221d4:	dc000017 	ldw	r16,0(sp)
811221d8:	dec00704 	addi	sp,sp,28
811221dc:	f800283a 	ret
811221e0:	903fd826 	beq	r18,zero,81122144 <__reset+0xfb102144>
811221e4:	00c00804 	movi	r3,32
811221e8:	1ca5c83a 	sub	r18,r3,r18
811221ec:	00ffffc4 	movi	r3,-1
811221f0:	78bfff17 	ldw	r2,-4(r15)
811221f4:	1c86d83a 	srl	r3,r3,r18
811221f8:	1884703a 	and	r2,r3,r2
811221fc:	78bfff15 	stw	r2,-4(r15)
81122200:	003fd106 	br	81122148 <__reset+0xfb102148>
81122204:	00800044 	movi	r2,1
81122208:	58800015 	stw	r2,0(r11)
8112220c:	00800144 	movi	r2,5
81122210:	003fea06 	br	811221bc <__reset+0xfb1021bc>
81122214:	42000044 	addi	r8,r8,1
81122218:	22000015 	stw	r8,0(r4)
8112221c:	603fbb1e 	bne	r12,zero,8112210c <__reset+0xfb10210c>
81122220:	003fe506 	br	811221b8 <__reset+0xfb1021b8>
81122224:	02400204 	movi	r9,8
81122228:	49d3c83a 	sub	r9,r9,r7
8112222c:	4a53883a 	add	r9,r9,r9
81122230:	2a000017 	ldw	r8,0(r5)
81122234:	4a53883a 	add	r9,r9,r9
81122238:	02800804 	movi	r10,32
8112223c:	5255c83a 	sub	r10,r10,r9
81122240:	28c00104 	addi	r3,r5,4
81122244:	2805883a 	mov	r2,r5
81122248:	19c00017 	ldw	r7,0(r3)
8112224c:	10800104 	addi	r2,r2,4
81122250:	18c00104 	addi	r3,r3,4
81122254:	3a88983a 	sll	r4,r7,r10
81122258:	2208b03a 	or	r4,r4,r8
8112225c:	3a50d83a 	srl	r8,r7,r9
81122260:	113fff15 	stw	r4,-4(r2)
81122264:	1a3fff15 	stw	r8,-4(r3)
81122268:	137ff736 	bltu	r2,r13,81122248 <__reset+0xfb102248>
8112226c:	003faa06 	br	81122118 <__reset+0xfb102118>

81122270 <strncmp>:
81122270:	30003126 	beq	r6,zero,81122338 <strncmp+0xc8>
81122274:	2144b03a 	or	r2,r4,r5
81122278:	108000cc 	andi	r2,r2,3
8112227c:	10001e1e 	bne	r2,zero,811222f8 <strncmp+0x88>
81122280:	024000c4 	movi	r9,3
81122284:	49801c2e 	bgeu	r9,r6,811222f8 <strncmp+0x88>
81122288:	20800017 	ldw	r2,0(r4)
8112228c:	28c00017 	ldw	r3,0(r5)
81122290:	10c0191e 	bne	r2,r3,811222f8 <strncmp+0x88>
81122294:	31bfff04 	addi	r6,r6,-4
81122298:	30002726 	beq	r6,zero,81122338 <strncmp+0xc8>
8112229c:	02ffbff4 	movhi	r11,65279
811222a0:	5affbfc4 	addi	r11,r11,-257
811222a4:	0086303a 	nor	r3,zero,r2
811222a8:	02a02074 	movhi	r10,32897
811222ac:	12c5883a 	add	r2,r2,r11
811222b0:	52a02004 	addi	r10,r10,-32640
811222b4:	10c4703a 	and	r2,r2,r3
811222b8:	1284703a 	and	r2,r2,r10
811222bc:	10000b26 	beq	r2,zero,811222ec <strncmp+0x7c>
811222c0:	00001d06 	br	81122338 <strncmp+0xc8>
811222c4:	20c00017 	ldw	r3,0(r4)
811222c8:	29c00017 	ldw	r7,0(r5)
811222cc:	1ad1883a 	add	r8,r3,r11
811222d0:	00c4303a 	nor	r2,zero,r3
811222d4:	4084703a 	and	r2,r8,r2
811222d8:	1284703a 	and	r2,r2,r10
811222dc:	19c0061e 	bne	r3,r7,811222f8 <strncmp+0x88>
811222e0:	31bfff04 	addi	r6,r6,-4
811222e4:	30001426 	beq	r6,zero,81122338 <strncmp+0xc8>
811222e8:	1000131e 	bne	r2,zero,81122338 <strncmp+0xc8>
811222ec:	21000104 	addi	r4,r4,4
811222f0:	29400104 	addi	r5,r5,4
811222f4:	49bff336 	bltu	r9,r6,811222c4 <__reset+0xfb1022c4>
811222f8:	28800007 	ldb	r2,0(r5)
811222fc:	20c00007 	ldb	r3,0(r4)
81122300:	31bfffc4 	addi	r6,r6,-1
81122304:	10c0081e 	bne	r2,r3,81122328 <strncmp+0xb8>
81122308:	30000b26 	beq	r6,zero,81122338 <strncmp+0xc8>
8112230c:	10000a26 	beq	r2,zero,81122338 <strncmp+0xc8>
81122310:	21000044 	addi	r4,r4,1
81122314:	29400044 	addi	r5,r5,1
81122318:	20800007 	ldb	r2,0(r4)
8112231c:	28c00007 	ldb	r3,0(r5)
81122320:	31bfffc4 	addi	r6,r6,-1
81122324:	10fff826 	beq	r2,r3,81122308 <__reset+0xfb102308>
81122328:	20800003 	ldbu	r2,0(r4)
8112232c:	28c00003 	ldbu	r3,0(r5)
81122330:	10c5c83a 	sub	r2,r2,r3
81122334:	f800283a 	ret
81122338:	0005883a 	mov	r2,zero
8112233c:	f800283a 	ret

81122340 <__swbuf_r>:
81122340:	defffb04 	addi	sp,sp,-20
81122344:	de00012e 	bgeu	sp,et,8112234c <__swbuf_r+0xc>
81122348:	003b68fa 	trap	3
8112234c:	dcc00315 	stw	r19,12(sp)
81122350:	dc800215 	stw	r18,8(sp)
81122354:	dc000015 	stw	r16,0(sp)
81122358:	dfc00415 	stw	ra,16(sp)
8112235c:	dc400115 	stw	r17,4(sp)
81122360:	2025883a 	mov	r18,r4
81122364:	2827883a 	mov	r19,r5
81122368:	3021883a 	mov	r16,r6
8112236c:	20000226 	beq	r4,zero,81122378 <__swbuf_r+0x38>
81122370:	20800e17 	ldw	r2,56(r4)
81122374:	10004226 	beq	r2,zero,81122480 <__swbuf_r+0x140>
81122378:	80800617 	ldw	r2,24(r16)
8112237c:	8100030b 	ldhu	r4,12(r16)
81122380:	80800215 	stw	r2,8(r16)
81122384:	2080020c 	andi	r2,r4,8
81122388:	10003626 	beq	r2,zero,81122464 <__swbuf_r+0x124>
8112238c:	80c00417 	ldw	r3,16(r16)
81122390:	18003426 	beq	r3,zero,81122464 <__swbuf_r+0x124>
81122394:	2088000c 	andi	r2,r4,8192
81122398:	9c403fcc 	andi	r17,r19,255
8112239c:	10001a26 	beq	r2,zero,81122408 <__swbuf_r+0xc8>
811223a0:	80800017 	ldw	r2,0(r16)
811223a4:	81000517 	ldw	r4,20(r16)
811223a8:	10c7c83a 	sub	r3,r2,r3
811223ac:	1900200e 	bge	r3,r4,81122430 <__swbuf_r+0xf0>
811223b0:	18c00044 	addi	r3,r3,1
811223b4:	81000217 	ldw	r4,8(r16)
811223b8:	11400044 	addi	r5,r2,1
811223bc:	81400015 	stw	r5,0(r16)
811223c0:	213fffc4 	addi	r4,r4,-1
811223c4:	81000215 	stw	r4,8(r16)
811223c8:	14c00005 	stb	r19,0(r2)
811223cc:	80800517 	ldw	r2,20(r16)
811223d0:	10c01e26 	beq	r2,r3,8112244c <__swbuf_r+0x10c>
811223d4:	8080030b 	ldhu	r2,12(r16)
811223d8:	1080004c 	andi	r2,r2,1
811223dc:	10000226 	beq	r2,zero,811223e8 <__swbuf_r+0xa8>
811223e0:	00800284 	movi	r2,10
811223e4:	88801926 	beq	r17,r2,8112244c <__swbuf_r+0x10c>
811223e8:	8805883a 	mov	r2,r17
811223ec:	dfc00417 	ldw	ra,16(sp)
811223f0:	dcc00317 	ldw	r19,12(sp)
811223f4:	dc800217 	ldw	r18,8(sp)
811223f8:	dc400117 	ldw	r17,4(sp)
811223fc:	dc000017 	ldw	r16,0(sp)
81122400:	dec00504 	addi	sp,sp,20
81122404:	f800283a 	ret
81122408:	81401917 	ldw	r5,100(r16)
8112240c:	00b7ffc4 	movi	r2,-8193
81122410:	21080014 	ori	r4,r4,8192
81122414:	2884703a 	and	r2,r5,r2
81122418:	80801915 	stw	r2,100(r16)
8112241c:	80800017 	ldw	r2,0(r16)
81122420:	8100030d 	sth	r4,12(r16)
81122424:	81000517 	ldw	r4,20(r16)
81122428:	10c7c83a 	sub	r3,r2,r3
8112242c:	193fe016 	blt	r3,r4,811223b0 <__reset+0xfb1023b0>
81122430:	800b883a 	mov	r5,r16
81122434:	9009883a 	mov	r4,r18
81122438:	11195580 	call	81119558 <_fflush_r>
8112243c:	1000071e 	bne	r2,zero,8112245c <__swbuf_r+0x11c>
81122440:	80800017 	ldw	r2,0(r16)
81122444:	00c00044 	movi	r3,1
81122448:	003fda06 	br	811223b4 <__reset+0xfb1023b4>
8112244c:	800b883a 	mov	r5,r16
81122450:	9009883a 	mov	r4,r18
81122454:	11195580 	call	81119558 <_fflush_r>
81122458:	103fe326 	beq	r2,zero,811223e8 <__reset+0xfb1023e8>
8112245c:	00bfffc4 	movi	r2,-1
81122460:	003fe206 	br	811223ec <__reset+0xfb1023ec>
81122464:	800b883a 	mov	r5,r16
81122468:	9009883a 	mov	r4,r18
8112246c:	11178e40 	call	811178e4 <__swsetup_r>
81122470:	103ffa1e 	bne	r2,zero,8112245c <__reset+0xfb10245c>
81122474:	8100030b 	ldhu	r4,12(r16)
81122478:	80c00417 	ldw	r3,16(r16)
8112247c:	003fc506 	br	81122394 <__reset+0xfb102394>
81122480:	11199540 	call	81119954 <__sinit>
81122484:	003fbc06 	br	81122378 <__reset+0xfb102378>

81122488 <__swbuf>:
81122488:	00a04534 	movhi	r2,33044
8112248c:	10ba2704 	addi	r2,r2,-5988
81122490:	280d883a 	mov	r6,r5
81122494:	200b883a 	mov	r5,r4
81122498:	11000017 	ldw	r4,0(r2)
8112249c:	11223401 	jmpi	81122340 <__swbuf_r>

811224a0 <_wcrtomb_r>:
811224a0:	defff604 	addi	sp,sp,-40
811224a4:	00a04534 	movhi	r2,33044
811224a8:	de00012e 	bgeu	sp,et,811224b0 <_wcrtomb_r+0x10>
811224ac:	003b68fa 	trap	3
811224b0:	10ba2c04 	addi	r2,r2,-5968
811224b4:	dc800815 	stw	r18,32(sp)
811224b8:	dc400715 	stw	r17,28(sp)
811224bc:	dc000615 	stw	r16,24(sp)
811224c0:	dfc00915 	stw	ra,36(sp)
811224c4:	2021883a 	mov	r16,r4
811224c8:	3823883a 	mov	r17,r7
811224cc:	14800017 	ldw	r18,0(r2)
811224d0:	28001426 	beq	r5,zero,81122524 <_wcrtomb_r+0x84>
811224d4:	d9400415 	stw	r5,16(sp)
811224d8:	d9800515 	stw	r6,20(sp)
811224dc:	111a8700 	call	8111a870 <__locale_charset>
811224e0:	d9800517 	ldw	r6,20(sp)
811224e4:	d9400417 	ldw	r5,16(sp)
811224e8:	100f883a 	mov	r7,r2
811224ec:	dc400015 	stw	r17,0(sp)
811224f0:	8009883a 	mov	r4,r16
811224f4:	903ee83a 	callr	r18
811224f8:	00ffffc4 	movi	r3,-1
811224fc:	10c0031e 	bne	r2,r3,8112250c <_wcrtomb_r+0x6c>
81122500:	88000015 	stw	zero,0(r17)
81122504:	00c02284 	movi	r3,138
81122508:	80c00015 	stw	r3,0(r16)
8112250c:	dfc00917 	ldw	ra,36(sp)
81122510:	dc800817 	ldw	r18,32(sp)
81122514:	dc400717 	ldw	r17,28(sp)
81122518:	dc000617 	ldw	r16,24(sp)
8112251c:	dec00a04 	addi	sp,sp,40
81122520:	f800283a 	ret
81122524:	111a8700 	call	8111a870 <__locale_charset>
81122528:	100f883a 	mov	r7,r2
8112252c:	dc400015 	stw	r17,0(sp)
81122530:	000d883a 	mov	r6,zero
81122534:	d9400104 	addi	r5,sp,4
81122538:	8009883a 	mov	r4,r16
8112253c:	903ee83a 	callr	r18
81122540:	003fed06 	br	811224f8 <__reset+0xfb1024f8>

81122544 <wcrtomb>:
81122544:	defff604 	addi	sp,sp,-40
81122548:	00a04534 	movhi	r2,33044
8112254c:	de00012e 	bgeu	sp,et,81122554 <wcrtomb+0x10>
81122550:	003b68fa 	trap	3
81122554:	10ba2704 	addi	r2,r2,-5988
81122558:	dc800615 	stw	r18,24(sp)
8112255c:	dc400515 	stw	r17,20(sp)
81122560:	dfc00915 	stw	ra,36(sp)
81122564:	dd000815 	stw	r20,32(sp)
81122568:	dcc00715 	stw	r19,28(sp)
8112256c:	dc000415 	stw	r16,16(sp)
81122570:	3025883a 	mov	r18,r6
81122574:	14400017 	ldw	r17,0(r2)
81122578:	20001926 	beq	r4,zero,811225e0 <wcrtomb+0x9c>
8112257c:	00a04534 	movhi	r2,33044
81122580:	10ba2c04 	addi	r2,r2,-5968
81122584:	15000017 	ldw	r20,0(r2)
81122588:	2021883a 	mov	r16,r4
8112258c:	2827883a 	mov	r19,r5
81122590:	111a8700 	call	8111a870 <__locale_charset>
81122594:	100f883a 	mov	r7,r2
81122598:	dc800015 	stw	r18,0(sp)
8112259c:	980d883a 	mov	r6,r19
811225a0:	800b883a 	mov	r5,r16
811225a4:	8809883a 	mov	r4,r17
811225a8:	a03ee83a 	callr	r20
811225ac:	00ffffc4 	movi	r3,-1
811225b0:	10c0031e 	bne	r2,r3,811225c0 <wcrtomb+0x7c>
811225b4:	90000015 	stw	zero,0(r18)
811225b8:	00c02284 	movi	r3,138
811225bc:	88c00015 	stw	r3,0(r17)
811225c0:	dfc00917 	ldw	ra,36(sp)
811225c4:	dd000817 	ldw	r20,32(sp)
811225c8:	dcc00717 	ldw	r19,28(sp)
811225cc:	dc800617 	ldw	r18,24(sp)
811225d0:	dc400517 	ldw	r17,20(sp)
811225d4:	dc000417 	ldw	r16,16(sp)
811225d8:	dec00a04 	addi	sp,sp,40
811225dc:	f800283a 	ret
811225e0:	00a04534 	movhi	r2,33044
811225e4:	10ba2c04 	addi	r2,r2,-5968
811225e8:	14000017 	ldw	r16,0(r2)
811225ec:	111a8700 	call	8111a870 <__locale_charset>
811225f0:	100f883a 	mov	r7,r2
811225f4:	dc800015 	stw	r18,0(sp)
811225f8:	000d883a 	mov	r6,zero
811225fc:	d9400104 	addi	r5,sp,4
81122600:	8809883a 	mov	r4,r17
81122604:	803ee83a 	callr	r16
81122608:	003fe806 	br	811225ac <__reset+0xfb1025ac>

8112260c <__ascii_wctomb>:
8112260c:	28000526 	beq	r5,zero,81122624 <__ascii_wctomb+0x18>
81122610:	00803fc4 	movi	r2,255
81122614:	11800536 	bltu	r2,r6,8112262c <__ascii_wctomb+0x20>
81122618:	29800005 	stb	r6,0(r5)
8112261c:	00800044 	movi	r2,1
81122620:	f800283a 	ret
81122624:	0005883a 	mov	r2,zero
81122628:	f800283a 	ret
8112262c:	00802284 	movi	r2,138
81122630:	20800015 	stw	r2,0(r4)
81122634:	00bfffc4 	movi	r2,-1
81122638:	f800283a 	ret

8112263c <_wctomb_r>:
8112263c:	00a04534 	movhi	r2,33044
81122640:	defff904 	addi	sp,sp,-28
81122644:	10ba2c04 	addi	r2,r2,-5968
81122648:	de00012e 	bgeu	sp,et,81122650 <_wctomb_r+0x14>
8112264c:	003b68fa 	trap	3
81122650:	dfc00615 	stw	ra,24(sp)
81122654:	dc400515 	stw	r17,20(sp)
81122658:	dc000415 	stw	r16,16(sp)
8112265c:	3823883a 	mov	r17,r7
81122660:	14000017 	ldw	r16,0(r2)
81122664:	d9000115 	stw	r4,4(sp)
81122668:	d9400215 	stw	r5,8(sp)
8112266c:	d9800315 	stw	r6,12(sp)
81122670:	111a8700 	call	8111a870 <__locale_charset>
81122674:	d9800317 	ldw	r6,12(sp)
81122678:	d9400217 	ldw	r5,8(sp)
8112267c:	d9000117 	ldw	r4,4(sp)
81122680:	100f883a 	mov	r7,r2
81122684:	dc400015 	stw	r17,0(sp)
81122688:	803ee83a 	callr	r16
8112268c:	dfc00617 	ldw	ra,24(sp)
81122690:	dc400517 	ldw	r17,20(sp)
81122694:	dc000417 	ldw	r16,16(sp)
81122698:	dec00704 	addi	sp,sp,28
8112269c:	f800283a 	ret

811226a0 <__fixunsdfsi>:
811226a0:	defffd04 	addi	sp,sp,-12
811226a4:	000d883a 	mov	r6,zero
811226a8:	01d07834 	movhi	r7,16864
811226ac:	de00012e 	bgeu	sp,et,811226b4 <__fixunsdfsi+0x14>
811226b0:	003b68fa 	trap	3
811226b4:	dc400115 	stw	r17,4(sp)
811226b8:	dc000015 	stw	r16,0(sp)
811226bc:	dfc00215 	stw	ra,8(sp)
811226c0:	2023883a 	mov	r17,r4
811226c4:	2821883a 	mov	r16,r5
811226c8:	11247b80 	call	811247b8 <__gedf2>
811226cc:	1000080e 	bge	r2,zero,811226f0 <__fixunsdfsi+0x50>
811226d0:	8809883a 	mov	r4,r17
811226d4:	800b883a 	mov	r5,r16
811226d8:	112528c0 	call	8112528c <__fixdfsi>
811226dc:	dfc00217 	ldw	ra,8(sp)
811226e0:	dc400117 	ldw	r17,4(sp)
811226e4:	dc000017 	ldw	r16,0(sp)
811226e8:	dec00304 	addi	sp,sp,12
811226ec:	f800283a 	ret
811226f0:	000d883a 	mov	r6,zero
811226f4:	01d07834 	movhi	r7,16864
811226f8:	8809883a 	mov	r4,r17
811226fc:	800b883a 	mov	r5,r16
81122700:	11249880 	call	81124988 <__subdf3>
81122704:	180b883a 	mov	r5,r3
81122708:	1009883a 	mov	r4,r2
8112270c:	112528c0 	call	8112528c <__fixdfsi>
81122710:	00e00034 	movhi	r3,32768
81122714:	10c5883a 	add	r2,r2,r3
81122718:	003ff006 	br	811226dc <__reset+0xfb1026dc>

8112271c <__udivdi3>:
8112271c:	defff504 	addi	sp,sp,-44
81122720:	de00012e 	bgeu	sp,et,81122728 <__udivdi3+0xc>
81122724:	003b68fa 	trap	3
81122728:	dcc00415 	stw	r19,16(sp)
8112272c:	dc000115 	stw	r16,4(sp)
81122730:	dfc00a15 	stw	ra,40(sp)
81122734:	df000915 	stw	fp,36(sp)
81122738:	ddc00815 	stw	r23,32(sp)
8112273c:	dd800715 	stw	r22,28(sp)
81122740:	dd400615 	stw	r21,24(sp)
81122744:	dd000515 	stw	r20,20(sp)
81122748:	dc800315 	stw	r18,12(sp)
8112274c:	dc400215 	stw	r17,8(sp)
81122750:	2027883a 	mov	r19,r4
81122754:	2821883a 	mov	r16,r5
81122758:	3800411e 	bne	r7,zero,81122860 <__udivdi3+0x144>
8112275c:	3023883a 	mov	r17,r6
81122760:	2025883a 	mov	r18,r4
81122764:	2980522e 	bgeu	r5,r6,811228b0 <__udivdi3+0x194>
81122768:	00bfffd4 	movui	r2,65535
8112276c:	282d883a 	mov	r22,r5
81122770:	1180a836 	bltu	r2,r6,81122a14 <__udivdi3+0x2f8>
81122774:	00803fc4 	movi	r2,255
81122778:	1185803a 	cmpltu	r2,r2,r6
8112277c:	100490fa 	slli	r2,r2,3
81122780:	3086d83a 	srl	r3,r6,r2
81122784:	01204534 	movhi	r4,33044
81122788:	21303a04 	addi	r4,r4,-16152
8112278c:	20c7883a 	add	r3,r4,r3
81122790:	18c00003 	ldbu	r3,0(r3)
81122794:	1885883a 	add	r2,r3,r2
81122798:	00c00804 	movi	r3,32
8112279c:	1887c83a 	sub	r3,r3,r2
811227a0:	18000526 	beq	r3,zero,811227b8 <__udivdi3+0x9c>
811227a4:	80e0983a 	sll	r16,r16,r3
811227a8:	9884d83a 	srl	r2,r19,r2
811227ac:	30e2983a 	sll	r17,r6,r3
811227b0:	98e4983a 	sll	r18,r19,r3
811227b4:	142cb03a 	or	r22,r2,r16
811227b8:	882ad43a 	srli	r21,r17,16
811227bc:	b009883a 	mov	r4,r22
811227c0:	8d3fffcc 	andi	r20,r17,65535
811227c4:	a80b883a 	mov	r5,r21
811227c8:	11233380 	call	81123338 <__umodsi3>
811227cc:	b009883a 	mov	r4,r22
811227d0:	a80b883a 	mov	r5,r21
811227d4:	1027883a 	mov	r19,r2
811227d8:	11232d40 	call	811232d4 <__udivsi3>
811227dc:	102d883a 	mov	r22,r2
811227e0:	9826943a 	slli	r19,r19,16
811227e4:	9004d43a 	srli	r2,r18,16
811227e8:	a5a1383a 	mul	r16,r20,r22
811227ec:	14c4b03a 	or	r2,r2,r19
811227f0:	1400052e 	bgeu	r2,r16,81122808 <__udivdi3+0xec>
811227f4:	1445883a 	add	r2,r2,r17
811227f8:	b0ffffc4 	addi	r3,r22,-1
811227fc:	14400136 	bltu	r2,r17,81122804 <__udivdi3+0xe8>
81122800:	14012336 	bltu	r2,r16,81122c90 <__udivdi3+0x574>
81122804:	182d883a 	mov	r22,r3
81122808:	1421c83a 	sub	r16,r2,r16
8112280c:	a80b883a 	mov	r5,r21
81122810:	8009883a 	mov	r4,r16
81122814:	11233380 	call	81123338 <__umodsi3>
81122818:	1027883a 	mov	r19,r2
8112281c:	a80b883a 	mov	r5,r21
81122820:	8009883a 	mov	r4,r16
81122824:	11232d40 	call	811232d4 <__udivsi3>
81122828:	9826943a 	slli	r19,r19,16
8112282c:	a0a9383a 	mul	r20,r20,r2
81122830:	94bfffcc 	andi	r18,r18,65535
81122834:	94e4b03a 	or	r18,r18,r19
81122838:	9500052e 	bgeu	r18,r20,81122850 <__udivdi3+0x134>
8112283c:	8ca5883a 	add	r18,r17,r18
81122840:	10ffffc4 	addi	r3,r2,-1
81122844:	9440f136 	bltu	r18,r17,81122c0c <__udivdi3+0x4f0>
81122848:	9500f02e 	bgeu	r18,r20,81122c0c <__udivdi3+0x4f0>
8112284c:	10bfff84 	addi	r2,r2,-2
81122850:	b00c943a 	slli	r6,r22,16
81122854:	0007883a 	mov	r3,zero
81122858:	3084b03a 	or	r2,r6,r2
8112285c:	00005906 	br	811229c4 <__udivdi3+0x2a8>
81122860:	29c05636 	bltu	r5,r7,811229bc <__udivdi3+0x2a0>
81122864:	00bfffd4 	movui	r2,65535
81122868:	11c0622e 	bgeu	r2,r7,811229f4 <__udivdi3+0x2d8>
8112286c:	00804034 	movhi	r2,256
81122870:	10bfffc4 	addi	r2,r2,-1
81122874:	11c0ee36 	bltu	r2,r7,81122c30 <__udivdi3+0x514>
81122878:	00800404 	movi	r2,16
8112287c:	3886d83a 	srl	r3,r7,r2
81122880:	01204534 	movhi	r4,33044
81122884:	21303a04 	addi	r4,r4,-16152
81122888:	20c7883a 	add	r3,r4,r3
8112288c:	18c00003 	ldbu	r3,0(r3)
81122890:	05400804 	movi	r21,32
81122894:	1885883a 	add	r2,r3,r2
81122898:	a8abc83a 	sub	r21,r21,r2
8112289c:	a800621e 	bne	r21,zero,81122a28 <__udivdi3+0x30c>
811228a0:	3c00e936 	bltu	r7,r16,81122c48 <__udivdi3+0x52c>
811228a4:	9985403a 	cmpgeu	r2,r19,r6
811228a8:	0007883a 	mov	r3,zero
811228ac:	00004506 	br	811229c4 <__udivdi3+0x2a8>
811228b0:	3000041e 	bne	r6,zero,811228c4 <__udivdi3+0x1a8>
811228b4:	000b883a 	mov	r5,zero
811228b8:	01000044 	movi	r4,1
811228bc:	11232d40 	call	811232d4 <__udivsi3>
811228c0:	1023883a 	mov	r17,r2
811228c4:	00bfffd4 	movui	r2,65535
811228c8:	14404e2e 	bgeu	r2,r17,81122a04 <__udivdi3+0x2e8>
811228cc:	00804034 	movhi	r2,256
811228d0:	10bfffc4 	addi	r2,r2,-1
811228d4:	1440d836 	bltu	r2,r17,81122c38 <__udivdi3+0x51c>
811228d8:	00800404 	movi	r2,16
811228dc:	8886d83a 	srl	r3,r17,r2
811228e0:	01204534 	movhi	r4,33044
811228e4:	21303a04 	addi	r4,r4,-16152
811228e8:	20c7883a 	add	r3,r4,r3
811228ec:	18c00003 	ldbu	r3,0(r3)
811228f0:	1885883a 	add	r2,r3,r2
811228f4:	00c00804 	movi	r3,32
811228f8:	1887c83a 	sub	r3,r3,r2
811228fc:	18008f1e 	bne	r3,zero,81122b3c <__udivdi3+0x420>
81122900:	882ad43a 	srli	r21,r17,16
81122904:	8461c83a 	sub	r16,r16,r17
81122908:	8d3fffcc 	andi	r20,r17,65535
8112290c:	00c00044 	movi	r3,1
81122910:	8009883a 	mov	r4,r16
81122914:	a80b883a 	mov	r5,r21
81122918:	d8c00015 	stw	r3,0(sp)
8112291c:	11233380 	call	81123338 <__umodsi3>
81122920:	8009883a 	mov	r4,r16
81122924:	a80b883a 	mov	r5,r21
81122928:	1027883a 	mov	r19,r2
8112292c:	11232d40 	call	811232d4 <__udivsi3>
81122930:	9826943a 	slli	r19,r19,16
81122934:	9008d43a 	srli	r4,r18,16
81122938:	1521383a 	mul	r16,r2,r20
8112293c:	102d883a 	mov	r22,r2
81122940:	24c8b03a 	or	r4,r4,r19
81122944:	d8c00017 	ldw	r3,0(sp)
81122948:	2400052e 	bgeu	r4,r16,81122960 <__udivdi3+0x244>
8112294c:	2449883a 	add	r4,r4,r17
81122950:	b0bfffc4 	addi	r2,r22,-1
81122954:	24400136 	bltu	r4,r17,8112295c <__udivdi3+0x240>
81122958:	2400ca36 	bltu	r4,r16,81122c84 <__udivdi3+0x568>
8112295c:	102d883a 	mov	r22,r2
81122960:	2421c83a 	sub	r16,r4,r16
81122964:	a80b883a 	mov	r5,r21
81122968:	8009883a 	mov	r4,r16
8112296c:	d8c00015 	stw	r3,0(sp)
81122970:	11233380 	call	81123338 <__umodsi3>
81122974:	1027883a 	mov	r19,r2
81122978:	a80b883a 	mov	r5,r21
8112297c:	8009883a 	mov	r4,r16
81122980:	11232d40 	call	811232d4 <__udivsi3>
81122984:	9826943a 	slli	r19,r19,16
81122988:	1529383a 	mul	r20,r2,r20
8112298c:	94bfffcc 	andi	r18,r18,65535
81122990:	94e4b03a 	or	r18,r18,r19
81122994:	d8c00017 	ldw	r3,0(sp)
81122998:	9500052e 	bgeu	r18,r20,811229b0 <__udivdi3+0x294>
8112299c:	8ca5883a 	add	r18,r17,r18
811229a0:	113fffc4 	addi	r4,r2,-1
811229a4:	94409736 	bltu	r18,r17,81122c04 <__udivdi3+0x4e8>
811229a8:	9500962e 	bgeu	r18,r20,81122c04 <__udivdi3+0x4e8>
811229ac:	10bfff84 	addi	r2,r2,-2
811229b0:	b00c943a 	slli	r6,r22,16
811229b4:	3084b03a 	or	r2,r6,r2
811229b8:	00000206 	br	811229c4 <__udivdi3+0x2a8>
811229bc:	0007883a 	mov	r3,zero
811229c0:	0005883a 	mov	r2,zero
811229c4:	dfc00a17 	ldw	ra,40(sp)
811229c8:	df000917 	ldw	fp,36(sp)
811229cc:	ddc00817 	ldw	r23,32(sp)
811229d0:	dd800717 	ldw	r22,28(sp)
811229d4:	dd400617 	ldw	r21,24(sp)
811229d8:	dd000517 	ldw	r20,20(sp)
811229dc:	dcc00417 	ldw	r19,16(sp)
811229e0:	dc800317 	ldw	r18,12(sp)
811229e4:	dc400217 	ldw	r17,8(sp)
811229e8:	dc000117 	ldw	r16,4(sp)
811229ec:	dec00b04 	addi	sp,sp,44
811229f0:	f800283a 	ret
811229f4:	00803fc4 	movi	r2,255
811229f8:	11c5803a 	cmpltu	r2,r2,r7
811229fc:	100490fa 	slli	r2,r2,3
81122a00:	003f9e06 	br	8112287c <__reset+0xfb10287c>
81122a04:	00803fc4 	movi	r2,255
81122a08:	1445803a 	cmpltu	r2,r2,r17
81122a0c:	100490fa 	slli	r2,r2,3
81122a10:	003fb206 	br	811228dc <__reset+0xfb1028dc>
81122a14:	00804034 	movhi	r2,256
81122a18:	10bfffc4 	addi	r2,r2,-1
81122a1c:	11808836 	bltu	r2,r6,81122c40 <__udivdi3+0x524>
81122a20:	00800404 	movi	r2,16
81122a24:	003f5606 	br	81122780 <__reset+0xfb102780>
81122a28:	30aed83a 	srl	r23,r6,r2
81122a2c:	3d4e983a 	sll	r7,r7,r21
81122a30:	80acd83a 	srl	r22,r16,r2
81122a34:	9884d83a 	srl	r2,r19,r2
81122a38:	3deeb03a 	or	r23,r7,r23
81122a3c:	b824d43a 	srli	r18,r23,16
81122a40:	8560983a 	sll	r16,r16,r21
81122a44:	b009883a 	mov	r4,r22
81122a48:	900b883a 	mov	r5,r18
81122a4c:	3568983a 	sll	r20,r6,r21
81122a50:	1420b03a 	or	r16,r2,r16
81122a54:	11233380 	call	81123338 <__umodsi3>
81122a58:	b009883a 	mov	r4,r22
81122a5c:	900b883a 	mov	r5,r18
81122a60:	1023883a 	mov	r17,r2
81122a64:	11232d40 	call	811232d4 <__udivsi3>
81122a68:	8808943a 	slli	r4,r17,16
81122a6c:	bf3fffcc 	andi	fp,r23,65535
81122a70:	8006d43a 	srli	r3,r16,16
81122a74:	e0a3383a 	mul	r17,fp,r2
81122a78:	100d883a 	mov	r6,r2
81122a7c:	1906b03a 	or	r3,r3,r4
81122a80:	1c40042e 	bgeu	r3,r17,81122a94 <__udivdi3+0x378>
81122a84:	1dc7883a 	add	r3,r3,r23
81122a88:	10bfffc4 	addi	r2,r2,-1
81122a8c:	1dc0752e 	bgeu	r3,r23,81122c64 <__udivdi3+0x548>
81122a90:	100d883a 	mov	r6,r2
81122a94:	1c63c83a 	sub	r17,r3,r17
81122a98:	900b883a 	mov	r5,r18
81122a9c:	8809883a 	mov	r4,r17
81122aa0:	d9800015 	stw	r6,0(sp)
81122aa4:	11233380 	call	81123338 <__umodsi3>
81122aa8:	102d883a 	mov	r22,r2
81122aac:	8809883a 	mov	r4,r17
81122ab0:	900b883a 	mov	r5,r18
81122ab4:	11232d40 	call	811232d4 <__udivsi3>
81122ab8:	b02c943a 	slli	r22,r22,16
81122abc:	e089383a 	mul	r4,fp,r2
81122ac0:	843fffcc 	andi	r16,r16,65535
81122ac4:	85a0b03a 	or	r16,r16,r22
81122ac8:	d9800017 	ldw	r6,0(sp)
81122acc:	8100042e 	bgeu	r16,r4,81122ae0 <__udivdi3+0x3c4>
81122ad0:	85e1883a 	add	r16,r16,r23
81122ad4:	10ffffc4 	addi	r3,r2,-1
81122ad8:	85c05e2e 	bgeu	r16,r23,81122c54 <__udivdi3+0x538>
81122adc:	1805883a 	mov	r2,r3
81122ae0:	300c943a 	slli	r6,r6,16
81122ae4:	a17fffcc 	andi	r5,r20,65535
81122ae8:	a028d43a 	srli	r20,r20,16
81122aec:	3084b03a 	or	r2,r6,r2
81122af0:	10ffffcc 	andi	r3,r2,65535
81122af4:	100cd43a 	srli	r6,r2,16
81122af8:	194f383a 	mul	r7,r3,r5
81122afc:	1d07383a 	mul	r3,r3,r20
81122b00:	314b383a 	mul	r5,r6,r5
81122b04:	3810d43a 	srli	r8,r7,16
81122b08:	8121c83a 	sub	r16,r16,r4
81122b0c:	1947883a 	add	r3,r3,r5
81122b10:	40c7883a 	add	r3,r8,r3
81122b14:	350d383a 	mul	r6,r6,r20
81122b18:	1940022e 	bgeu	r3,r5,81122b24 <__udivdi3+0x408>
81122b1c:	01000074 	movhi	r4,1
81122b20:	310d883a 	add	r6,r6,r4
81122b24:	1828d43a 	srli	r20,r3,16
81122b28:	a18d883a 	add	r6,r20,r6
81122b2c:	81803e36 	bltu	r16,r6,81122c28 <__udivdi3+0x50c>
81122b30:	81803826 	beq	r16,r6,81122c14 <__udivdi3+0x4f8>
81122b34:	0007883a 	mov	r3,zero
81122b38:	003fa206 	br	811229c4 <__reset+0xfb1029c4>
81122b3c:	88e2983a 	sll	r17,r17,r3
81122b40:	80a8d83a 	srl	r20,r16,r2
81122b44:	80e0983a 	sll	r16,r16,r3
81122b48:	882ad43a 	srli	r21,r17,16
81122b4c:	9884d83a 	srl	r2,r19,r2
81122b50:	a009883a 	mov	r4,r20
81122b54:	a80b883a 	mov	r5,r21
81122b58:	142eb03a 	or	r23,r2,r16
81122b5c:	98e4983a 	sll	r18,r19,r3
81122b60:	11233380 	call	81123338 <__umodsi3>
81122b64:	a009883a 	mov	r4,r20
81122b68:	a80b883a 	mov	r5,r21
81122b6c:	1021883a 	mov	r16,r2
81122b70:	11232d40 	call	811232d4 <__udivsi3>
81122b74:	1039883a 	mov	fp,r2
81122b78:	8d3fffcc 	andi	r20,r17,65535
81122b7c:	8020943a 	slli	r16,r16,16
81122b80:	b804d43a 	srli	r2,r23,16
81122b84:	a72d383a 	mul	r22,r20,fp
81122b88:	1404b03a 	or	r2,r2,r16
81122b8c:	1580062e 	bgeu	r2,r22,81122ba8 <__udivdi3+0x48c>
81122b90:	1445883a 	add	r2,r2,r17
81122b94:	e0ffffc4 	addi	r3,fp,-1
81122b98:	14403836 	bltu	r2,r17,81122c7c <__udivdi3+0x560>
81122b9c:	1580372e 	bgeu	r2,r22,81122c7c <__udivdi3+0x560>
81122ba0:	e73fff84 	addi	fp,fp,-2
81122ba4:	1445883a 	add	r2,r2,r17
81122ba8:	15adc83a 	sub	r22,r2,r22
81122bac:	a80b883a 	mov	r5,r21
81122bb0:	b009883a 	mov	r4,r22
81122bb4:	11233380 	call	81123338 <__umodsi3>
81122bb8:	1027883a 	mov	r19,r2
81122bbc:	b009883a 	mov	r4,r22
81122bc0:	a80b883a 	mov	r5,r21
81122bc4:	11232d40 	call	811232d4 <__udivsi3>
81122bc8:	9826943a 	slli	r19,r19,16
81122bcc:	a0a1383a 	mul	r16,r20,r2
81122bd0:	b93fffcc 	andi	r4,r23,65535
81122bd4:	24c8b03a 	or	r4,r4,r19
81122bd8:	2400062e 	bgeu	r4,r16,81122bf4 <__udivdi3+0x4d8>
81122bdc:	2449883a 	add	r4,r4,r17
81122be0:	10ffffc4 	addi	r3,r2,-1
81122be4:	24402336 	bltu	r4,r17,81122c74 <__udivdi3+0x558>
81122be8:	2400222e 	bgeu	r4,r16,81122c74 <__udivdi3+0x558>
81122bec:	10bfff84 	addi	r2,r2,-2
81122bf0:	2449883a 	add	r4,r4,r17
81122bf4:	e038943a 	slli	fp,fp,16
81122bf8:	2421c83a 	sub	r16,r4,r16
81122bfc:	e086b03a 	or	r3,fp,r2
81122c00:	003f4306 	br	81122910 <__reset+0xfb102910>
81122c04:	2005883a 	mov	r2,r4
81122c08:	003f6906 	br	811229b0 <__reset+0xfb1029b0>
81122c0c:	1805883a 	mov	r2,r3
81122c10:	003f0f06 	br	81122850 <__reset+0xfb102850>
81122c14:	1806943a 	slli	r3,r3,16
81122c18:	9d66983a 	sll	r19,r19,r21
81122c1c:	39ffffcc 	andi	r7,r7,65535
81122c20:	19c7883a 	add	r3,r3,r7
81122c24:	98ffc32e 	bgeu	r19,r3,81122b34 <__reset+0xfb102b34>
81122c28:	10bfffc4 	addi	r2,r2,-1
81122c2c:	003fc106 	br	81122b34 <__reset+0xfb102b34>
81122c30:	00800604 	movi	r2,24
81122c34:	003f1106 	br	8112287c <__reset+0xfb10287c>
81122c38:	00800604 	movi	r2,24
81122c3c:	003f2706 	br	811228dc <__reset+0xfb1028dc>
81122c40:	00800604 	movi	r2,24
81122c44:	003ece06 	br	81122780 <__reset+0xfb102780>
81122c48:	0007883a 	mov	r3,zero
81122c4c:	00800044 	movi	r2,1
81122c50:	003f5c06 	br	811229c4 <__reset+0xfb1029c4>
81122c54:	813fa12e 	bgeu	r16,r4,81122adc <__reset+0xfb102adc>
81122c58:	10bfff84 	addi	r2,r2,-2
81122c5c:	85e1883a 	add	r16,r16,r23
81122c60:	003f9f06 	br	81122ae0 <__reset+0xfb102ae0>
81122c64:	1c7f8a2e 	bgeu	r3,r17,81122a90 <__reset+0xfb102a90>
81122c68:	31bfff84 	addi	r6,r6,-2
81122c6c:	1dc7883a 	add	r3,r3,r23
81122c70:	003f8806 	br	81122a94 <__reset+0xfb102a94>
81122c74:	1805883a 	mov	r2,r3
81122c78:	003fde06 	br	81122bf4 <__reset+0xfb102bf4>
81122c7c:	1839883a 	mov	fp,r3
81122c80:	003fc906 	br	81122ba8 <__reset+0xfb102ba8>
81122c84:	b5bfff84 	addi	r22,r22,-2
81122c88:	2449883a 	add	r4,r4,r17
81122c8c:	003f3406 	br	81122960 <__reset+0xfb102960>
81122c90:	b5bfff84 	addi	r22,r22,-2
81122c94:	1445883a 	add	r2,r2,r17
81122c98:	003edb06 	br	81122808 <__reset+0xfb102808>

81122c9c <__umoddi3>:
81122c9c:	defff404 	addi	sp,sp,-48
81122ca0:	de00012e 	bgeu	sp,et,81122ca8 <__umoddi3+0xc>
81122ca4:	003b68fa 	trap	3
81122ca8:	df000a15 	stw	fp,40(sp)
81122cac:	dc400315 	stw	r17,12(sp)
81122cb0:	dc000215 	stw	r16,8(sp)
81122cb4:	dfc00b15 	stw	ra,44(sp)
81122cb8:	ddc00915 	stw	r23,36(sp)
81122cbc:	dd800815 	stw	r22,32(sp)
81122cc0:	dd400715 	stw	r21,28(sp)
81122cc4:	dd000615 	stw	r20,24(sp)
81122cc8:	dcc00515 	stw	r19,20(sp)
81122ccc:	dc800415 	stw	r18,16(sp)
81122cd0:	2021883a 	mov	r16,r4
81122cd4:	2823883a 	mov	r17,r5
81122cd8:	2839883a 	mov	fp,r5
81122cdc:	38003c1e 	bne	r7,zero,81122dd0 <__umoddi3+0x134>
81122ce0:	3027883a 	mov	r19,r6
81122ce4:	2029883a 	mov	r20,r4
81122ce8:	2980512e 	bgeu	r5,r6,81122e30 <__umoddi3+0x194>
81122cec:	00bfffd4 	movui	r2,65535
81122cf0:	11809a36 	bltu	r2,r6,81122f5c <__umoddi3+0x2c0>
81122cf4:	01003fc4 	movi	r4,255
81122cf8:	2189803a 	cmpltu	r4,r4,r6
81122cfc:	200890fa 	slli	r4,r4,3
81122d00:	3104d83a 	srl	r2,r6,r4
81122d04:	00e04534 	movhi	r3,33044
81122d08:	18f03a04 	addi	r3,r3,-16152
81122d0c:	1885883a 	add	r2,r3,r2
81122d10:	10c00003 	ldbu	r3,0(r2)
81122d14:	00800804 	movi	r2,32
81122d18:	1909883a 	add	r4,r3,r4
81122d1c:	1125c83a 	sub	r18,r2,r4
81122d20:	90000526 	beq	r18,zero,81122d38 <__umoddi3+0x9c>
81122d24:	8ca2983a 	sll	r17,r17,r18
81122d28:	8108d83a 	srl	r4,r16,r4
81122d2c:	34a6983a 	sll	r19,r6,r18
81122d30:	84a8983a 	sll	r20,r16,r18
81122d34:	2478b03a 	or	fp,r4,r17
81122d38:	982ed43a 	srli	r23,r19,16
81122d3c:	e009883a 	mov	r4,fp
81122d40:	9dbfffcc 	andi	r22,r19,65535
81122d44:	b80b883a 	mov	r5,r23
81122d48:	11233380 	call	81123338 <__umodsi3>
81122d4c:	e009883a 	mov	r4,fp
81122d50:	b80b883a 	mov	r5,r23
81122d54:	102b883a 	mov	r21,r2
81122d58:	11232d40 	call	811232d4 <__udivsi3>
81122d5c:	a806943a 	slli	r3,r21,16
81122d60:	a008d43a 	srli	r4,r20,16
81122d64:	b085383a 	mul	r2,r22,r2
81122d68:	20c8b03a 	or	r4,r4,r3
81122d6c:	2080032e 	bgeu	r4,r2,81122d7c <__umoddi3+0xe0>
81122d70:	24c9883a 	add	r4,r4,r19
81122d74:	24c00136 	bltu	r4,r19,81122d7c <__umoddi3+0xe0>
81122d78:	20811036 	bltu	r4,r2,811231bc <__umoddi3+0x520>
81122d7c:	20abc83a 	sub	r21,r4,r2
81122d80:	b80b883a 	mov	r5,r23
81122d84:	a809883a 	mov	r4,r21
81122d88:	11233380 	call	81123338 <__umodsi3>
81122d8c:	1023883a 	mov	r17,r2
81122d90:	b80b883a 	mov	r5,r23
81122d94:	a809883a 	mov	r4,r21
81122d98:	11232d40 	call	811232d4 <__udivsi3>
81122d9c:	8822943a 	slli	r17,r17,16
81122da0:	b085383a 	mul	r2,r22,r2
81122da4:	a0ffffcc 	andi	r3,r20,65535
81122da8:	1c46b03a 	or	r3,r3,r17
81122dac:	1880042e 	bgeu	r3,r2,81122dc0 <__umoddi3+0x124>
81122db0:	1cc7883a 	add	r3,r3,r19
81122db4:	1cc00236 	bltu	r3,r19,81122dc0 <__umoddi3+0x124>
81122db8:	1880012e 	bgeu	r3,r2,81122dc0 <__umoddi3+0x124>
81122dbc:	1cc7883a 	add	r3,r3,r19
81122dc0:	1885c83a 	sub	r2,r3,r2
81122dc4:	1484d83a 	srl	r2,r2,r18
81122dc8:	0007883a 	mov	r3,zero
81122dcc:	00004f06 	br	81122f0c <__umoddi3+0x270>
81122dd0:	29c04c36 	bltu	r5,r7,81122f04 <__umoddi3+0x268>
81122dd4:	00bfffd4 	movui	r2,65535
81122dd8:	11c0582e 	bgeu	r2,r7,81122f3c <__umoddi3+0x2a0>
81122ddc:	00804034 	movhi	r2,256
81122de0:	10bfffc4 	addi	r2,r2,-1
81122de4:	11c0e736 	bltu	r2,r7,81123184 <__umoddi3+0x4e8>
81122de8:	01000404 	movi	r4,16
81122dec:	3904d83a 	srl	r2,r7,r4
81122df0:	00e04534 	movhi	r3,33044
81122df4:	18f03a04 	addi	r3,r3,-16152
81122df8:	1885883a 	add	r2,r3,r2
81122dfc:	14c00003 	ldbu	r19,0(r2)
81122e00:	00c00804 	movi	r3,32
81122e04:	9927883a 	add	r19,r19,r4
81122e08:	1ce9c83a 	sub	r20,r3,r19
81122e0c:	a000581e 	bne	r20,zero,81122f70 <__umoddi3+0x2d4>
81122e10:	3c400136 	bltu	r7,r17,81122e18 <__umoddi3+0x17c>
81122e14:	8180eb36 	bltu	r16,r6,811231c4 <__umoddi3+0x528>
81122e18:	8185c83a 	sub	r2,r16,r6
81122e1c:	89e3c83a 	sub	r17,r17,r7
81122e20:	8089803a 	cmpltu	r4,r16,r2
81122e24:	8939c83a 	sub	fp,r17,r4
81122e28:	e007883a 	mov	r3,fp
81122e2c:	00003706 	br	81122f0c <__umoddi3+0x270>
81122e30:	3000041e 	bne	r6,zero,81122e44 <__umoddi3+0x1a8>
81122e34:	000b883a 	mov	r5,zero
81122e38:	01000044 	movi	r4,1
81122e3c:	11232d40 	call	811232d4 <__udivsi3>
81122e40:	1027883a 	mov	r19,r2
81122e44:	00bfffd4 	movui	r2,65535
81122e48:	14c0402e 	bgeu	r2,r19,81122f4c <__umoddi3+0x2b0>
81122e4c:	00804034 	movhi	r2,256
81122e50:	10bfffc4 	addi	r2,r2,-1
81122e54:	14c0cd36 	bltu	r2,r19,8112318c <__umoddi3+0x4f0>
81122e58:	00800404 	movi	r2,16
81122e5c:	9886d83a 	srl	r3,r19,r2
81122e60:	01204534 	movhi	r4,33044
81122e64:	21303a04 	addi	r4,r4,-16152
81122e68:	20c7883a 	add	r3,r4,r3
81122e6c:	18c00003 	ldbu	r3,0(r3)
81122e70:	1887883a 	add	r3,r3,r2
81122e74:	00800804 	movi	r2,32
81122e78:	10e5c83a 	sub	r18,r2,r3
81122e7c:	9000901e 	bne	r18,zero,811230c0 <__umoddi3+0x424>
81122e80:	982cd43a 	srli	r22,r19,16
81122e84:	8ce3c83a 	sub	r17,r17,r19
81122e88:	9d7fffcc 	andi	r21,r19,65535
81122e8c:	b00b883a 	mov	r5,r22
81122e90:	8809883a 	mov	r4,r17
81122e94:	11233380 	call	81123338 <__umodsi3>
81122e98:	8809883a 	mov	r4,r17
81122e9c:	b00b883a 	mov	r5,r22
81122ea0:	1021883a 	mov	r16,r2
81122ea4:	11232d40 	call	811232d4 <__udivsi3>
81122ea8:	8006943a 	slli	r3,r16,16
81122eac:	a008d43a 	srli	r4,r20,16
81122eb0:	1545383a 	mul	r2,r2,r21
81122eb4:	20c8b03a 	or	r4,r4,r3
81122eb8:	2080042e 	bgeu	r4,r2,81122ecc <__umoddi3+0x230>
81122ebc:	24c9883a 	add	r4,r4,r19
81122ec0:	24c00236 	bltu	r4,r19,81122ecc <__umoddi3+0x230>
81122ec4:	2080012e 	bgeu	r4,r2,81122ecc <__umoddi3+0x230>
81122ec8:	24c9883a 	add	r4,r4,r19
81122ecc:	20a1c83a 	sub	r16,r4,r2
81122ed0:	b00b883a 	mov	r5,r22
81122ed4:	8009883a 	mov	r4,r16
81122ed8:	11233380 	call	81123338 <__umodsi3>
81122edc:	1023883a 	mov	r17,r2
81122ee0:	b00b883a 	mov	r5,r22
81122ee4:	8009883a 	mov	r4,r16
81122ee8:	11232d40 	call	811232d4 <__udivsi3>
81122eec:	8822943a 	slli	r17,r17,16
81122ef0:	1545383a 	mul	r2,r2,r21
81122ef4:	a53fffcc 	andi	r20,r20,65535
81122ef8:	a446b03a 	or	r3,r20,r17
81122efc:	18bfb02e 	bgeu	r3,r2,81122dc0 <__reset+0xfb102dc0>
81122f00:	003fab06 	br	81122db0 <__reset+0xfb102db0>
81122f04:	2005883a 	mov	r2,r4
81122f08:	2807883a 	mov	r3,r5
81122f0c:	dfc00b17 	ldw	ra,44(sp)
81122f10:	df000a17 	ldw	fp,40(sp)
81122f14:	ddc00917 	ldw	r23,36(sp)
81122f18:	dd800817 	ldw	r22,32(sp)
81122f1c:	dd400717 	ldw	r21,28(sp)
81122f20:	dd000617 	ldw	r20,24(sp)
81122f24:	dcc00517 	ldw	r19,20(sp)
81122f28:	dc800417 	ldw	r18,16(sp)
81122f2c:	dc400317 	ldw	r17,12(sp)
81122f30:	dc000217 	ldw	r16,8(sp)
81122f34:	dec00c04 	addi	sp,sp,48
81122f38:	f800283a 	ret
81122f3c:	04c03fc4 	movi	r19,255
81122f40:	99c9803a 	cmpltu	r4,r19,r7
81122f44:	200890fa 	slli	r4,r4,3
81122f48:	003fa806 	br	81122dec <__reset+0xfb102dec>
81122f4c:	00803fc4 	movi	r2,255
81122f50:	14c5803a 	cmpltu	r2,r2,r19
81122f54:	100490fa 	slli	r2,r2,3
81122f58:	003fc006 	br	81122e5c <__reset+0xfb102e5c>
81122f5c:	00804034 	movhi	r2,256
81122f60:	10bfffc4 	addi	r2,r2,-1
81122f64:	11808b36 	bltu	r2,r6,81123194 <__umoddi3+0x4f8>
81122f68:	01000404 	movi	r4,16
81122f6c:	003f6406 	br	81122d00 <__reset+0xfb102d00>
81122f70:	34c4d83a 	srl	r2,r6,r19
81122f74:	3d0e983a 	sll	r7,r7,r20
81122f78:	8cf8d83a 	srl	fp,r17,r19
81122f7c:	8d10983a 	sll	r8,r17,r20
81122f80:	38aab03a 	or	r21,r7,r2
81122f84:	a82cd43a 	srli	r22,r21,16
81122f88:	84e2d83a 	srl	r17,r16,r19
81122f8c:	e009883a 	mov	r4,fp
81122f90:	b00b883a 	mov	r5,r22
81122f94:	8a22b03a 	or	r17,r17,r8
81122f98:	3524983a 	sll	r18,r6,r20
81122f9c:	11233380 	call	81123338 <__umodsi3>
81122fa0:	e009883a 	mov	r4,fp
81122fa4:	b00b883a 	mov	r5,r22
81122fa8:	102f883a 	mov	r23,r2
81122fac:	11232d40 	call	811232d4 <__udivsi3>
81122fb0:	100d883a 	mov	r6,r2
81122fb4:	b808943a 	slli	r4,r23,16
81122fb8:	aa3fffcc 	andi	r8,r21,65535
81122fbc:	8804d43a 	srli	r2,r17,16
81122fc0:	41af383a 	mul	r23,r8,r6
81122fc4:	8520983a 	sll	r16,r16,r20
81122fc8:	1104b03a 	or	r2,r2,r4
81122fcc:	15c0042e 	bgeu	r2,r23,81122fe0 <__umoddi3+0x344>
81122fd0:	1545883a 	add	r2,r2,r21
81122fd4:	30ffffc4 	addi	r3,r6,-1
81122fd8:	1540742e 	bgeu	r2,r21,811231ac <__umoddi3+0x510>
81122fdc:	180d883a 	mov	r6,r3
81122fe0:	15efc83a 	sub	r23,r2,r23
81122fe4:	b00b883a 	mov	r5,r22
81122fe8:	b809883a 	mov	r4,r23
81122fec:	d9800115 	stw	r6,4(sp)
81122ff0:	da000015 	stw	r8,0(sp)
81122ff4:	11233380 	call	81123338 <__umodsi3>
81122ff8:	b00b883a 	mov	r5,r22
81122ffc:	b809883a 	mov	r4,r23
81123000:	1039883a 	mov	fp,r2
81123004:	11232d40 	call	811232d4 <__udivsi3>
81123008:	da000017 	ldw	r8,0(sp)
8112300c:	e038943a 	slli	fp,fp,16
81123010:	100b883a 	mov	r5,r2
81123014:	4089383a 	mul	r4,r8,r2
81123018:	8a3fffcc 	andi	r8,r17,65535
8112301c:	4710b03a 	or	r8,r8,fp
81123020:	d9800117 	ldw	r6,4(sp)
81123024:	4100042e 	bgeu	r8,r4,81123038 <__umoddi3+0x39c>
81123028:	4551883a 	add	r8,r8,r21
8112302c:	10bfffc4 	addi	r2,r2,-1
81123030:	45405a2e 	bgeu	r8,r21,8112319c <__umoddi3+0x500>
81123034:	100b883a 	mov	r5,r2
81123038:	300c943a 	slli	r6,r6,16
8112303c:	91ffffcc 	andi	r7,r18,65535
81123040:	9004d43a 	srli	r2,r18,16
81123044:	314cb03a 	or	r6,r6,r5
81123048:	317fffcc 	andi	r5,r6,65535
8112304c:	300cd43a 	srli	r6,r6,16
81123050:	29d3383a 	mul	r9,r5,r7
81123054:	288b383a 	mul	r5,r5,r2
81123058:	31cf383a 	mul	r7,r6,r7
8112305c:	4806d43a 	srli	r3,r9,16
81123060:	4111c83a 	sub	r8,r8,r4
81123064:	29cb883a 	add	r5,r5,r7
81123068:	194b883a 	add	r5,r3,r5
8112306c:	3085383a 	mul	r2,r6,r2
81123070:	29c0022e 	bgeu	r5,r7,8112307c <__umoddi3+0x3e0>
81123074:	00c00074 	movhi	r3,1
81123078:	10c5883a 	add	r2,r2,r3
8112307c:	2808d43a 	srli	r4,r5,16
81123080:	280a943a 	slli	r5,r5,16
81123084:	4a7fffcc 	andi	r9,r9,65535
81123088:	2085883a 	add	r2,r4,r2
8112308c:	2a4b883a 	add	r5,r5,r9
81123090:	40803636 	bltu	r8,r2,8112316c <__umoddi3+0x4d0>
81123094:	40804d26 	beq	r8,r2,811231cc <__umoddi3+0x530>
81123098:	4089c83a 	sub	r4,r8,r2
8112309c:	280f883a 	mov	r7,r5
811230a0:	81cfc83a 	sub	r7,r16,r7
811230a4:	81c7803a 	cmpltu	r3,r16,r7
811230a8:	20c7c83a 	sub	r3,r4,r3
811230ac:	1cc4983a 	sll	r2,r3,r19
811230b0:	3d0ed83a 	srl	r7,r7,r20
811230b4:	1d06d83a 	srl	r3,r3,r20
811230b8:	11c4b03a 	or	r2,r2,r7
811230bc:	003f9306 	br	81122f0c <__reset+0xfb102f0c>
811230c0:	9ca6983a 	sll	r19,r19,r18
811230c4:	88e8d83a 	srl	r20,r17,r3
811230c8:	80c4d83a 	srl	r2,r16,r3
811230cc:	982cd43a 	srli	r22,r19,16
811230d0:	8ca2983a 	sll	r17,r17,r18
811230d4:	a009883a 	mov	r4,r20
811230d8:	b00b883a 	mov	r5,r22
811230dc:	1478b03a 	or	fp,r2,r17
811230e0:	11233380 	call	81123338 <__umodsi3>
811230e4:	a009883a 	mov	r4,r20
811230e8:	b00b883a 	mov	r5,r22
811230ec:	1023883a 	mov	r17,r2
811230f0:	11232d40 	call	811232d4 <__udivsi3>
811230f4:	9d7fffcc 	andi	r21,r19,65535
811230f8:	880a943a 	slli	r5,r17,16
811230fc:	e008d43a 	srli	r4,fp,16
81123100:	a885383a 	mul	r2,r21,r2
81123104:	84a8983a 	sll	r20,r16,r18
81123108:	2148b03a 	or	r4,r4,r5
8112310c:	2080042e 	bgeu	r4,r2,81123120 <__umoddi3+0x484>
81123110:	24c9883a 	add	r4,r4,r19
81123114:	24c00236 	bltu	r4,r19,81123120 <__umoddi3+0x484>
81123118:	2080012e 	bgeu	r4,r2,81123120 <__umoddi3+0x484>
8112311c:	24c9883a 	add	r4,r4,r19
81123120:	20a3c83a 	sub	r17,r4,r2
81123124:	b00b883a 	mov	r5,r22
81123128:	8809883a 	mov	r4,r17
8112312c:	11233380 	call	81123338 <__umodsi3>
81123130:	102f883a 	mov	r23,r2
81123134:	8809883a 	mov	r4,r17
81123138:	b00b883a 	mov	r5,r22
8112313c:	11232d40 	call	811232d4 <__udivsi3>
81123140:	b82e943a 	slli	r23,r23,16
81123144:	a885383a 	mul	r2,r21,r2
81123148:	e13fffcc 	andi	r4,fp,65535
8112314c:	25c8b03a 	or	r4,r4,r23
81123150:	2080042e 	bgeu	r4,r2,81123164 <__umoddi3+0x4c8>
81123154:	24c9883a 	add	r4,r4,r19
81123158:	24c00236 	bltu	r4,r19,81123164 <__umoddi3+0x4c8>
8112315c:	2080012e 	bgeu	r4,r2,81123164 <__umoddi3+0x4c8>
81123160:	24c9883a 	add	r4,r4,r19
81123164:	20a3c83a 	sub	r17,r4,r2
81123168:	003f4806 	br	81122e8c <__reset+0xfb102e8c>
8112316c:	2c8fc83a 	sub	r7,r5,r18
81123170:	1545c83a 	sub	r2,r2,r21
81123174:	29cb803a 	cmpltu	r5,r5,r7
81123178:	1145c83a 	sub	r2,r2,r5
8112317c:	4089c83a 	sub	r4,r8,r2
81123180:	003fc706 	br	811230a0 <__reset+0xfb1030a0>
81123184:	01000604 	movi	r4,24
81123188:	003f1806 	br	81122dec <__reset+0xfb102dec>
8112318c:	00800604 	movi	r2,24
81123190:	003f3206 	br	81122e5c <__reset+0xfb102e5c>
81123194:	01000604 	movi	r4,24
81123198:	003ed906 	br	81122d00 <__reset+0xfb102d00>
8112319c:	413fa52e 	bgeu	r8,r4,81123034 <__reset+0xfb103034>
811231a0:	297fff84 	addi	r5,r5,-2
811231a4:	4551883a 	add	r8,r8,r21
811231a8:	003fa306 	br	81123038 <__reset+0xfb103038>
811231ac:	15ff8b2e 	bgeu	r2,r23,81122fdc <__reset+0xfb102fdc>
811231b0:	31bfff84 	addi	r6,r6,-2
811231b4:	1545883a 	add	r2,r2,r21
811231b8:	003f8906 	br	81122fe0 <__reset+0xfb102fe0>
811231bc:	24c9883a 	add	r4,r4,r19
811231c0:	003eee06 	br	81122d7c <__reset+0xfb102d7c>
811231c4:	8005883a 	mov	r2,r16
811231c8:	003f1706 	br	81122e28 <__reset+0xfb102e28>
811231cc:	817fe736 	bltu	r16,r5,8112316c <__reset+0xfb10316c>
811231d0:	280f883a 	mov	r7,r5
811231d4:	0009883a 	mov	r4,zero
811231d8:	003fb106 	br	811230a0 <__reset+0xfb1030a0>

811231dc <__divsi3>:
811231dc:	20001b16 	blt	r4,zero,8112324c <__divsi3+0x70>
811231e0:	000f883a 	mov	r7,zero
811231e4:	28001616 	blt	r5,zero,81123240 <__divsi3+0x64>
811231e8:	200d883a 	mov	r6,r4
811231ec:	29001a2e 	bgeu	r5,r4,81123258 <__divsi3+0x7c>
811231f0:	00800804 	movi	r2,32
811231f4:	00c00044 	movi	r3,1
811231f8:	00000106 	br	81123200 <__divsi3+0x24>
811231fc:	10000d26 	beq	r2,zero,81123234 <__divsi3+0x58>
81123200:	294b883a 	add	r5,r5,r5
81123204:	10bfffc4 	addi	r2,r2,-1
81123208:	18c7883a 	add	r3,r3,r3
8112320c:	293ffb36 	bltu	r5,r4,811231fc <__reset+0xfb1031fc>
81123210:	0005883a 	mov	r2,zero
81123214:	18000726 	beq	r3,zero,81123234 <__divsi3+0x58>
81123218:	0005883a 	mov	r2,zero
8112321c:	31400236 	bltu	r6,r5,81123228 <__divsi3+0x4c>
81123220:	314dc83a 	sub	r6,r6,r5
81123224:	10c4b03a 	or	r2,r2,r3
81123228:	1806d07a 	srli	r3,r3,1
8112322c:	280ad07a 	srli	r5,r5,1
81123230:	183ffa1e 	bne	r3,zero,8112321c <__reset+0xfb10321c>
81123234:	38000126 	beq	r7,zero,8112323c <__divsi3+0x60>
81123238:	0085c83a 	sub	r2,zero,r2
8112323c:	f800283a 	ret
81123240:	014bc83a 	sub	r5,zero,r5
81123244:	39c0005c 	xori	r7,r7,1
81123248:	003fe706 	br	811231e8 <__reset+0xfb1031e8>
8112324c:	0109c83a 	sub	r4,zero,r4
81123250:	01c00044 	movi	r7,1
81123254:	003fe306 	br	811231e4 <__reset+0xfb1031e4>
81123258:	00c00044 	movi	r3,1
8112325c:	003fee06 	br	81123218 <__reset+0xfb103218>

81123260 <__modsi3>:
81123260:	20001716 	blt	r4,zero,811232c0 <__modsi3+0x60>
81123264:	000f883a 	mov	r7,zero
81123268:	2005883a 	mov	r2,r4
8112326c:	28001216 	blt	r5,zero,811232b8 <__modsi3+0x58>
81123270:	2900162e 	bgeu	r5,r4,811232cc <__modsi3+0x6c>
81123274:	01800804 	movi	r6,32
81123278:	00c00044 	movi	r3,1
8112327c:	00000106 	br	81123284 <__modsi3+0x24>
81123280:	30000a26 	beq	r6,zero,811232ac <__modsi3+0x4c>
81123284:	294b883a 	add	r5,r5,r5
81123288:	31bfffc4 	addi	r6,r6,-1
8112328c:	18c7883a 	add	r3,r3,r3
81123290:	293ffb36 	bltu	r5,r4,81123280 <__reset+0xfb103280>
81123294:	18000526 	beq	r3,zero,811232ac <__modsi3+0x4c>
81123298:	1806d07a 	srli	r3,r3,1
8112329c:	11400136 	bltu	r2,r5,811232a4 <__modsi3+0x44>
811232a0:	1145c83a 	sub	r2,r2,r5
811232a4:	280ad07a 	srli	r5,r5,1
811232a8:	183ffb1e 	bne	r3,zero,81123298 <__reset+0xfb103298>
811232ac:	38000126 	beq	r7,zero,811232b4 <__modsi3+0x54>
811232b0:	0085c83a 	sub	r2,zero,r2
811232b4:	f800283a 	ret
811232b8:	014bc83a 	sub	r5,zero,r5
811232bc:	003fec06 	br	81123270 <__reset+0xfb103270>
811232c0:	0109c83a 	sub	r4,zero,r4
811232c4:	01c00044 	movi	r7,1
811232c8:	003fe706 	br	81123268 <__reset+0xfb103268>
811232cc:	00c00044 	movi	r3,1
811232d0:	003ff106 	br	81123298 <__reset+0xfb103298>

811232d4 <__udivsi3>:
811232d4:	200d883a 	mov	r6,r4
811232d8:	2900152e 	bgeu	r5,r4,81123330 <__udivsi3+0x5c>
811232dc:	28001416 	blt	r5,zero,81123330 <__udivsi3+0x5c>
811232e0:	00800804 	movi	r2,32
811232e4:	00c00044 	movi	r3,1
811232e8:	00000206 	br	811232f4 <__udivsi3+0x20>
811232ec:	10000e26 	beq	r2,zero,81123328 <__udivsi3+0x54>
811232f0:	28000516 	blt	r5,zero,81123308 <__udivsi3+0x34>
811232f4:	294b883a 	add	r5,r5,r5
811232f8:	10bfffc4 	addi	r2,r2,-1
811232fc:	18c7883a 	add	r3,r3,r3
81123300:	293ffa36 	bltu	r5,r4,811232ec <__reset+0xfb1032ec>
81123304:	18000826 	beq	r3,zero,81123328 <__udivsi3+0x54>
81123308:	0005883a 	mov	r2,zero
8112330c:	31400236 	bltu	r6,r5,81123318 <__udivsi3+0x44>
81123310:	314dc83a 	sub	r6,r6,r5
81123314:	10c4b03a 	or	r2,r2,r3
81123318:	1806d07a 	srli	r3,r3,1
8112331c:	280ad07a 	srli	r5,r5,1
81123320:	183ffa1e 	bne	r3,zero,8112330c <__reset+0xfb10330c>
81123324:	f800283a 	ret
81123328:	0005883a 	mov	r2,zero
8112332c:	f800283a 	ret
81123330:	00c00044 	movi	r3,1
81123334:	003ff406 	br	81123308 <__reset+0xfb103308>

81123338 <__umodsi3>:
81123338:	2005883a 	mov	r2,r4
8112333c:	2900122e 	bgeu	r5,r4,81123388 <__umodsi3+0x50>
81123340:	28001116 	blt	r5,zero,81123388 <__umodsi3+0x50>
81123344:	01800804 	movi	r6,32
81123348:	00c00044 	movi	r3,1
8112334c:	00000206 	br	81123358 <__umodsi3+0x20>
81123350:	30000c26 	beq	r6,zero,81123384 <__umodsi3+0x4c>
81123354:	28000516 	blt	r5,zero,8112336c <__umodsi3+0x34>
81123358:	294b883a 	add	r5,r5,r5
8112335c:	31bfffc4 	addi	r6,r6,-1
81123360:	18c7883a 	add	r3,r3,r3
81123364:	293ffa36 	bltu	r5,r4,81123350 <__reset+0xfb103350>
81123368:	18000626 	beq	r3,zero,81123384 <__umodsi3+0x4c>
8112336c:	1806d07a 	srli	r3,r3,1
81123370:	11400136 	bltu	r2,r5,81123378 <__umodsi3+0x40>
81123374:	1145c83a 	sub	r2,r2,r5
81123378:	280ad07a 	srli	r5,r5,1
8112337c:	183ffb1e 	bne	r3,zero,8112336c <__reset+0xfb10336c>
81123380:	f800283a 	ret
81123384:	f800283a 	ret
81123388:	00c00044 	movi	r3,1
8112338c:	003ff706 	br	8112336c <__reset+0xfb10336c>

81123390 <__eqsf2>:
81123390:	2006d5fa 	srli	r3,r4,23
81123394:	280cd5fa 	srli	r6,r5,23
81123398:	01c02034 	movhi	r7,128
8112339c:	39ffffc4 	addi	r7,r7,-1
811233a0:	18c03fcc 	andi	r3,r3,255
811233a4:	02003fc4 	movi	r8,255
811233a8:	3904703a 	and	r2,r7,r4
811233ac:	31803fcc 	andi	r6,r6,255
811233b0:	394e703a 	and	r7,r7,r5
811233b4:	2008d7fa 	srli	r4,r4,31
811233b8:	280ad7fa 	srli	r5,r5,31
811233bc:	1a000d26 	beq	r3,r8,811233f4 <__eqsf2+0x64>
811233c0:	02003fc4 	movi	r8,255
811233c4:	32000826 	beq	r6,r8,811233e8 <__eqsf2+0x58>
811233c8:	19800226 	beq	r3,r6,811233d4 <__eqsf2+0x44>
811233cc:	00800044 	movi	r2,1
811233d0:	f800283a 	ret
811233d4:	11fffd1e 	bne	r2,r7,811233cc <__reset+0xfb1033cc>
811233d8:	21400926 	beq	r4,r5,81123400 <__eqsf2+0x70>
811233dc:	183ffb1e 	bne	r3,zero,811233cc <__reset+0xfb1033cc>
811233e0:	1004c03a 	cmpne	r2,r2,zero
811233e4:	f800283a 	ret
811233e8:	383ff726 	beq	r7,zero,811233c8 <__reset+0xfb1033c8>
811233ec:	00800044 	movi	r2,1
811233f0:	f800283a 	ret
811233f4:	103ff226 	beq	r2,zero,811233c0 <__reset+0xfb1033c0>
811233f8:	00800044 	movi	r2,1
811233fc:	f800283a 	ret
81123400:	0005883a 	mov	r2,zero
81123404:	f800283a 	ret

81123408 <__gesf2>:
81123408:	2004d5fa 	srli	r2,r4,23
8112340c:	2806d5fa 	srli	r3,r5,23
81123410:	01802034 	movhi	r6,128
81123414:	31bfffc4 	addi	r6,r6,-1
81123418:	10803fcc 	andi	r2,r2,255
8112341c:	01c03fc4 	movi	r7,255
81123420:	3110703a 	and	r8,r6,r4
81123424:	18c03fcc 	andi	r3,r3,255
81123428:	314c703a 	and	r6,r6,r5
8112342c:	2008d7fa 	srli	r4,r4,31
81123430:	280ad7fa 	srli	r5,r5,31
81123434:	11c01926 	beq	r2,r7,8112349c <__gesf2+0x94>
81123438:	01c03fc4 	movi	r7,255
8112343c:	19c00f26 	beq	r3,r7,8112347c <__gesf2+0x74>
81123440:	1000061e 	bne	r2,zero,8112345c <__gesf2+0x54>
81123444:	400f003a 	cmpeq	r7,r8,zero
81123448:	1800071e 	bne	r3,zero,81123468 <__gesf2+0x60>
8112344c:	3000061e 	bne	r6,zero,81123468 <__gesf2+0x60>
81123450:	0005883a 	mov	r2,zero
81123454:	40000e1e 	bne	r8,zero,81123490 <__gesf2+0x88>
81123458:	f800283a 	ret
8112345c:	18000a1e 	bne	r3,zero,81123488 <__gesf2+0x80>
81123460:	30000b26 	beq	r6,zero,81123490 <__gesf2+0x88>
81123464:	000f883a 	mov	r7,zero
81123468:	29403fcc 	andi	r5,r5,255
8112346c:	38000726 	beq	r7,zero,8112348c <__gesf2+0x84>
81123470:	28000826 	beq	r5,zero,81123494 <__gesf2+0x8c>
81123474:	00800044 	movi	r2,1
81123478:	f800283a 	ret
8112347c:	303ff026 	beq	r6,zero,81123440 <__reset+0xfb103440>
81123480:	00bfff84 	movi	r2,-2
81123484:	f800283a 	ret
81123488:	29403fcc 	andi	r5,r5,255
8112348c:	21400526 	beq	r4,r5,811234a4 <__gesf2+0x9c>
81123490:	203ff826 	beq	r4,zero,81123474 <__reset+0xfb103474>
81123494:	00bfffc4 	movi	r2,-1
81123498:	f800283a 	ret
8112349c:	403fe626 	beq	r8,zero,81123438 <__reset+0xfb103438>
811234a0:	003ff706 	br	81123480 <__reset+0xfb103480>
811234a4:	18bffa16 	blt	r3,r2,81123490 <__reset+0xfb103490>
811234a8:	10c00216 	blt	r2,r3,811234b4 <__gesf2+0xac>
811234ac:	323ff836 	bltu	r6,r8,81123490 <__reset+0xfb103490>
811234b0:	4180022e 	bgeu	r8,r6,811234bc <__gesf2+0xb4>
811234b4:	203fef1e 	bne	r4,zero,81123474 <__reset+0xfb103474>
811234b8:	003ff606 	br	81123494 <__reset+0xfb103494>
811234bc:	0005883a 	mov	r2,zero
811234c0:	f800283a 	ret

811234c4 <__lesf2>:
811234c4:	2004d5fa 	srli	r2,r4,23
811234c8:	280cd5fa 	srli	r6,r5,23
811234cc:	00c02034 	movhi	r3,128
811234d0:	18ffffc4 	addi	r3,r3,-1
811234d4:	10803fcc 	andi	r2,r2,255
811234d8:	01c03fc4 	movi	r7,255
811234dc:	1910703a 	and	r8,r3,r4
811234e0:	31803fcc 	andi	r6,r6,255
811234e4:	1946703a 	and	r3,r3,r5
811234e8:	2008d7fa 	srli	r4,r4,31
811234ec:	280ad7fa 	srli	r5,r5,31
811234f0:	11c01b26 	beq	r2,r7,81123560 <__lesf2+0x9c>
811234f4:	01c03fc4 	movi	r7,255
811234f8:	31c01126 	beq	r6,r7,81123540 <__lesf2+0x7c>
811234fc:	1000071e 	bne	r2,zero,8112351c <__lesf2+0x58>
81123500:	400f003a 	cmpeq	r7,r8,zero
81123504:	21003fcc 	andi	r4,r4,255
81123508:	3000081e 	bne	r6,zero,8112352c <__lesf2+0x68>
8112350c:	1800071e 	bne	r3,zero,8112352c <__lesf2+0x68>
81123510:	0005883a 	mov	r2,zero
81123514:	40000f1e 	bne	r8,zero,81123554 <__lesf2+0x90>
81123518:	f800283a 	ret
8112351c:	21003fcc 	andi	r4,r4,255
81123520:	30000a1e 	bne	r6,zero,8112354c <__lesf2+0x88>
81123524:	18000b26 	beq	r3,zero,81123554 <__lesf2+0x90>
81123528:	000f883a 	mov	r7,zero
8112352c:	29403fcc 	andi	r5,r5,255
81123530:	38000726 	beq	r7,zero,81123550 <__lesf2+0x8c>
81123534:	28000826 	beq	r5,zero,81123558 <__lesf2+0x94>
81123538:	00800044 	movi	r2,1
8112353c:	f800283a 	ret
81123540:	183fee26 	beq	r3,zero,811234fc <__reset+0xfb1034fc>
81123544:	00800084 	movi	r2,2
81123548:	f800283a 	ret
8112354c:	29403fcc 	andi	r5,r5,255
81123550:	21400626 	beq	r4,r5,8112356c <__lesf2+0xa8>
81123554:	203ff826 	beq	r4,zero,81123538 <__reset+0xfb103538>
81123558:	00bfffc4 	movi	r2,-1
8112355c:	f800283a 	ret
81123560:	403fe426 	beq	r8,zero,811234f4 <__reset+0xfb1034f4>
81123564:	00800084 	movi	r2,2
81123568:	f800283a 	ret
8112356c:	30bff916 	blt	r6,r2,81123554 <__reset+0xfb103554>
81123570:	11800216 	blt	r2,r6,8112357c <__lesf2+0xb8>
81123574:	1a3ff736 	bltu	r3,r8,81123554 <__reset+0xfb103554>
81123578:	40c0022e 	bgeu	r8,r3,81123584 <__lesf2+0xc0>
8112357c:	203fee1e 	bne	r4,zero,81123538 <__reset+0xfb103538>
81123580:	003ff506 	br	81123558 <__reset+0xfb103558>
81123584:	0005883a 	mov	r2,zero
81123588:	f800283a 	ret

8112358c <__adddf3>:
8112358c:	02c00434 	movhi	r11,16
81123590:	5affffc4 	addi	r11,r11,-1
81123594:	2806d7fa 	srli	r3,r5,31
81123598:	2ad4703a 	and	r10,r5,r11
8112359c:	3ad2703a 	and	r9,r7,r11
811235a0:	3804d53a 	srli	r2,r7,20
811235a4:	3018d77a 	srli	r12,r6,29
811235a8:	280ad53a 	srli	r5,r5,20
811235ac:	501490fa 	slli	r10,r10,3
811235b0:	2010d77a 	srli	r8,r4,29
811235b4:	481290fa 	slli	r9,r9,3
811235b8:	380ed7fa 	srli	r7,r7,31
811235bc:	defffb04 	addi	sp,sp,-20
811235c0:	de00012e 	bgeu	sp,et,811235c8 <__adddf3+0x3c>
811235c4:	003b68fa 	trap	3
811235c8:	dc800215 	stw	r18,8(sp)
811235cc:	dc400115 	stw	r17,4(sp)
811235d0:	dc000015 	stw	r16,0(sp)
811235d4:	dfc00415 	stw	ra,16(sp)
811235d8:	dcc00315 	stw	r19,12(sp)
811235dc:	1c803fcc 	andi	r18,r3,255
811235e0:	2c01ffcc 	andi	r16,r5,2047
811235e4:	5210b03a 	or	r8,r10,r8
811235e8:	202290fa 	slli	r17,r4,3
811235ec:	1081ffcc 	andi	r2,r2,2047
811235f0:	4b12b03a 	or	r9,r9,r12
811235f4:	300c90fa 	slli	r6,r6,3
811235f8:	91c07526 	beq	r18,r7,811237d0 <__adddf3+0x244>
811235fc:	8087c83a 	sub	r3,r16,r2
81123600:	00c0ab0e 	bge	zero,r3,811238b0 <__adddf3+0x324>
81123604:	10002a1e 	bne	r2,zero,811236b0 <__adddf3+0x124>
81123608:	4984b03a 	or	r2,r9,r6
8112360c:	1000961e 	bne	r2,zero,81123868 <__adddf3+0x2dc>
81123610:	888001cc 	andi	r2,r17,7
81123614:	10000726 	beq	r2,zero,81123634 <__adddf3+0xa8>
81123618:	888003cc 	andi	r2,r17,15
8112361c:	00c00104 	movi	r3,4
81123620:	10c00426 	beq	r2,r3,81123634 <__adddf3+0xa8>
81123624:	88c7883a 	add	r3,r17,r3
81123628:	1c63803a 	cmpltu	r17,r3,r17
8112362c:	4451883a 	add	r8,r8,r17
81123630:	1823883a 	mov	r17,r3
81123634:	4080202c 	andhi	r2,r8,128
81123638:	10005926 	beq	r2,zero,811237a0 <__adddf3+0x214>
8112363c:	84000044 	addi	r16,r16,1
81123640:	0081ffc4 	movi	r2,2047
81123644:	8080ba26 	beq	r16,r2,81123930 <__adddf3+0x3a4>
81123648:	00bfe034 	movhi	r2,65408
8112364c:	10bfffc4 	addi	r2,r2,-1
81123650:	4090703a 	and	r8,r8,r2
81123654:	4004977a 	slli	r2,r8,29
81123658:	4010927a 	slli	r8,r8,9
8112365c:	8822d0fa 	srli	r17,r17,3
81123660:	8401ffcc 	andi	r16,r16,2047
81123664:	4010d33a 	srli	r8,r8,12
81123668:	9007883a 	mov	r3,r18
8112366c:	1444b03a 	or	r2,r2,r17
81123670:	8401ffcc 	andi	r16,r16,2047
81123674:	8020953a 	slli	r16,r16,20
81123678:	18c03fcc 	andi	r3,r3,255
8112367c:	01000434 	movhi	r4,16
81123680:	213fffc4 	addi	r4,r4,-1
81123684:	180697fa 	slli	r3,r3,31
81123688:	4110703a 	and	r8,r8,r4
8112368c:	4410b03a 	or	r8,r8,r16
81123690:	40c6b03a 	or	r3,r8,r3
81123694:	dfc00417 	ldw	ra,16(sp)
81123698:	dcc00317 	ldw	r19,12(sp)
8112369c:	dc800217 	ldw	r18,8(sp)
811236a0:	dc400117 	ldw	r17,4(sp)
811236a4:	dc000017 	ldw	r16,0(sp)
811236a8:	dec00504 	addi	sp,sp,20
811236ac:	f800283a 	ret
811236b0:	0081ffc4 	movi	r2,2047
811236b4:	80bfd626 	beq	r16,r2,81123610 <__reset+0xfb103610>
811236b8:	4a402034 	orhi	r9,r9,128
811236bc:	00800e04 	movi	r2,56
811236c0:	10c09f16 	blt	r2,r3,81123940 <__adddf3+0x3b4>
811236c4:	008007c4 	movi	r2,31
811236c8:	10c0c216 	blt	r2,r3,811239d4 <__adddf3+0x448>
811236cc:	00800804 	movi	r2,32
811236d0:	10c5c83a 	sub	r2,r2,r3
811236d4:	488a983a 	sll	r5,r9,r2
811236d8:	30c8d83a 	srl	r4,r6,r3
811236dc:	3084983a 	sll	r2,r6,r2
811236e0:	48c6d83a 	srl	r3,r9,r3
811236e4:	290cb03a 	or	r6,r5,r4
811236e8:	1004c03a 	cmpne	r2,r2,zero
811236ec:	308cb03a 	or	r6,r6,r2
811236f0:	898dc83a 	sub	r6,r17,r6
811236f4:	89a3803a 	cmpltu	r17,r17,r6
811236f8:	40d1c83a 	sub	r8,r8,r3
811236fc:	4451c83a 	sub	r8,r8,r17
81123700:	3023883a 	mov	r17,r6
81123704:	4080202c 	andhi	r2,r8,128
81123708:	10002326 	beq	r2,zero,81123798 <__adddf3+0x20c>
8112370c:	04c02034 	movhi	r19,128
81123710:	9cffffc4 	addi	r19,r19,-1
81123714:	44e6703a 	and	r19,r8,r19
81123718:	98007626 	beq	r19,zero,811238f4 <__adddf3+0x368>
8112371c:	9809883a 	mov	r4,r19
81123720:	110fce80 	call	8110fce8 <__clzsi2>
81123724:	10fffe04 	addi	r3,r2,-8
81123728:	010007c4 	movi	r4,31
8112372c:	20c07716 	blt	r4,r3,8112390c <__adddf3+0x380>
81123730:	00800804 	movi	r2,32
81123734:	10c5c83a 	sub	r2,r2,r3
81123738:	8884d83a 	srl	r2,r17,r2
8112373c:	98d0983a 	sll	r8,r19,r3
81123740:	88e2983a 	sll	r17,r17,r3
81123744:	1204b03a 	or	r2,r2,r8
81123748:	1c007416 	blt	r3,r16,8112391c <__adddf3+0x390>
8112374c:	1c21c83a 	sub	r16,r3,r16
81123750:	82000044 	addi	r8,r16,1
81123754:	00c007c4 	movi	r3,31
81123758:	1a009116 	blt	r3,r8,811239a0 <__adddf3+0x414>
8112375c:	00c00804 	movi	r3,32
81123760:	1a07c83a 	sub	r3,r3,r8
81123764:	8a08d83a 	srl	r4,r17,r8
81123768:	88e2983a 	sll	r17,r17,r3
8112376c:	10c6983a 	sll	r3,r2,r3
81123770:	1210d83a 	srl	r8,r2,r8
81123774:	8804c03a 	cmpne	r2,r17,zero
81123778:	1906b03a 	or	r3,r3,r4
8112377c:	18a2b03a 	or	r17,r3,r2
81123780:	0021883a 	mov	r16,zero
81123784:	003fa206 	br	81123610 <__reset+0xfb103610>
81123788:	1890b03a 	or	r8,r3,r2
8112378c:	40017d26 	beq	r8,zero,81123d84 <__adddf3+0x7f8>
81123790:	1011883a 	mov	r8,r2
81123794:	1823883a 	mov	r17,r3
81123798:	888001cc 	andi	r2,r17,7
8112379c:	103f9e1e 	bne	r2,zero,81123618 <__reset+0xfb103618>
811237a0:	4004977a 	slli	r2,r8,29
811237a4:	8822d0fa 	srli	r17,r17,3
811237a8:	4010d0fa 	srli	r8,r8,3
811237ac:	9007883a 	mov	r3,r18
811237b0:	1444b03a 	or	r2,r2,r17
811237b4:	0101ffc4 	movi	r4,2047
811237b8:	81002426 	beq	r16,r4,8112384c <__adddf3+0x2c0>
811237bc:	8120703a 	and	r16,r16,r4
811237c0:	01000434 	movhi	r4,16
811237c4:	213fffc4 	addi	r4,r4,-1
811237c8:	4110703a 	and	r8,r8,r4
811237cc:	003fa806 	br	81123670 <__reset+0xfb103670>
811237d0:	8089c83a 	sub	r4,r16,r2
811237d4:	01005e0e 	bge	zero,r4,81123950 <__adddf3+0x3c4>
811237d8:	10002b26 	beq	r2,zero,81123888 <__adddf3+0x2fc>
811237dc:	0081ffc4 	movi	r2,2047
811237e0:	80bf8b26 	beq	r16,r2,81123610 <__reset+0xfb103610>
811237e4:	4a402034 	orhi	r9,r9,128
811237e8:	00800e04 	movi	r2,56
811237ec:	1100a40e 	bge	r2,r4,81123a80 <__adddf3+0x4f4>
811237f0:	498cb03a 	or	r6,r9,r6
811237f4:	300ac03a 	cmpne	r5,r6,zero
811237f8:	0013883a 	mov	r9,zero
811237fc:	2c4b883a 	add	r5,r5,r17
81123800:	2c63803a 	cmpltu	r17,r5,r17
81123804:	4a11883a 	add	r8,r9,r8
81123808:	8a11883a 	add	r8,r17,r8
8112380c:	2823883a 	mov	r17,r5
81123810:	4080202c 	andhi	r2,r8,128
81123814:	103fe026 	beq	r2,zero,81123798 <__reset+0xfb103798>
81123818:	84000044 	addi	r16,r16,1
8112381c:	0081ffc4 	movi	r2,2047
81123820:	8080d226 	beq	r16,r2,81123b6c <__adddf3+0x5e0>
81123824:	00bfe034 	movhi	r2,65408
81123828:	10bfffc4 	addi	r2,r2,-1
8112382c:	4090703a 	and	r8,r8,r2
81123830:	880ad07a 	srli	r5,r17,1
81123834:	400897fa 	slli	r4,r8,31
81123838:	88c0004c 	andi	r3,r17,1
8112383c:	28e2b03a 	or	r17,r5,r3
81123840:	4010d07a 	srli	r8,r8,1
81123844:	2462b03a 	or	r17,r4,r17
81123848:	003f7106 	br	81123610 <__reset+0xfb103610>
8112384c:	4088b03a 	or	r4,r8,r2
81123850:	20014526 	beq	r4,zero,81123d68 <__adddf3+0x7dc>
81123854:	01000434 	movhi	r4,16
81123858:	42000234 	orhi	r8,r8,8
8112385c:	213fffc4 	addi	r4,r4,-1
81123860:	4110703a 	and	r8,r8,r4
81123864:	003f8206 	br	81123670 <__reset+0xfb103670>
81123868:	18ffffc4 	addi	r3,r3,-1
8112386c:	1800491e 	bne	r3,zero,81123994 <__adddf3+0x408>
81123870:	898bc83a 	sub	r5,r17,r6
81123874:	8963803a 	cmpltu	r17,r17,r5
81123878:	4251c83a 	sub	r8,r8,r9
8112387c:	4451c83a 	sub	r8,r8,r17
81123880:	2823883a 	mov	r17,r5
81123884:	003f9f06 	br	81123704 <__reset+0xfb103704>
81123888:	4984b03a 	or	r2,r9,r6
8112388c:	103f6026 	beq	r2,zero,81123610 <__reset+0xfb103610>
81123890:	213fffc4 	addi	r4,r4,-1
81123894:	2000931e 	bne	r4,zero,81123ae4 <__adddf3+0x558>
81123898:	898d883a 	add	r6,r17,r6
8112389c:	3463803a 	cmpltu	r17,r6,r17
811238a0:	4251883a 	add	r8,r8,r9
811238a4:	8a11883a 	add	r8,r17,r8
811238a8:	3023883a 	mov	r17,r6
811238ac:	003fd806 	br	81123810 <__reset+0xfb103810>
811238b0:	1800541e 	bne	r3,zero,81123a04 <__adddf3+0x478>
811238b4:	80800044 	addi	r2,r16,1
811238b8:	1081ffcc 	andi	r2,r2,2047
811238bc:	00c00044 	movi	r3,1
811238c0:	1880a00e 	bge	r3,r2,81123b44 <__adddf3+0x5b8>
811238c4:	8989c83a 	sub	r4,r17,r6
811238c8:	8905803a 	cmpltu	r2,r17,r4
811238cc:	4267c83a 	sub	r19,r8,r9
811238d0:	98a7c83a 	sub	r19,r19,r2
811238d4:	9880202c 	andhi	r2,r19,128
811238d8:	10006326 	beq	r2,zero,81123a68 <__adddf3+0x4dc>
811238dc:	3463c83a 	sub	r17,r6,r17
811238e0:	4a07c83a 	sub	r3,r9,r8
811238e4:	344d803a 	cmpltu	r6,r6,r17
811238e8:	19a7c83a 	sub	r19,r3,r6
811238ec:	3825883a 	mov	r18,r7
811238f0:	983f8a1e 	bne	r19,zero,8112371c <__reset+0xfb10371c>
811238f4:	8809883a 	mov	r4,r17
811238f8:	110fce80 	call	8110fce8 <__clzsi2>
811238fc:	10800804 	addi	r2,r2,32
81123900:	10fffe04 	addi	r3,r2,-8
81123904:	010007c4 	movi	r4,31
81123908:	20ff890e 	bge	r4,r3,81123730 <__reset+0xfb103730>
8112390c:	10bff604 	addi	r2,r2,-40
81123910:	8884983a 	sll	r2,r17,r2
81123914:	0023883a 	mov	r17,zero
81123918:	1c3f8c0e 	bge	r3,r16,8112374c <__reset+0xfb10374c>
8112391c:	023fe034 	movhi	r8,65408
81123920:	423fffc4 	addi	r8,r8,-1
81123924:	80e1c83a 	sub	r16,r16,r3
81123928:	1210703a 	and	r8,r2,r8
8112392c:	003f3806 	br	81123610 <__reset+0xfb103610>
81123930:	9007883a 	mov	r3,r18
81123934:	0011883a 	mov	r8,zero
81123938:	0005883a 	mov	r2,zero
8112393c:	003f4c06 	br	81123670 <__reset+0xfb103670>
81123940:	498cb03a 	or	r6,r9,r6
81123944:	300cc03a 	cmpne	r6,r6,zero
81123948:	0007883a 	mov	r3,zero
8112394c:	003f6806 	br	811236f0 <__reset+0xfb1036f0>
81123950:	20009c1e 	bne	r4,zero,81123bc4 <__adddf3+0x638>
81123954:	80800044 	addi	r2,r16,1
81123958:	1141ffcc 	andi	r5,r2,2047
8112395c:	01000044 	movi	r4,1
81123960:	2140670e 	bge	r4,r5,81123b00 <__adddf3+0x574>
81123964:	0101ffc4 	movi	r4,2047
81123968:	11007f26 	beq	r2,r4,81123b68 <__adddf3+0x5dc>
8112396c:	898d883a 	add	r6,r17,r6
81123970:	4247883a 	add	r3,r8,r9
81123974:	3451803a 	cmpltu	r8,r6,r17
81123978:	40d1883a 	add	r8,r8,r3
8112397c:	402297fa 	slli	r17,r8,31
81123980:	300cd07a 	srli	r6,r6,1
81123984:	4010d07a 	srli	r8,r8,1
81123988:	1021883a 	mov	r16,r2
8112398c:	89a2b03a 	or	r17,r17,r6
81123990:	003f1f06 	br	81123610 <__reset+0xfb103610>
81123994:	0081ffc4 	movi	r2,2047
81123998:	80bf481e 	bne	r16,r2,811236bc <__reset+0xfb1036bc>
8112399c:	003f1c06 	br	81123610 <__reset+0xfb103610>
811239a0:	843ff844 	addi	r16,r16,-31
811239a4:	01000804 	movi	r4,32
811239a8:	1406d83a 	srl	r3,r2,r16
811239ac:	41005026 	beq	r8,r4,81123af0 <__adddf3+0x564>
811239b0:	01001004 	movi	r4,64
811239b4:	2211c83a 	sub	r8,r4,r8
811239b8:	1204983a 	sll	r2,r2,r8
811239bc:	88a2b03a 	or	r17,r17,r2
811239c0:	8822c03a 	cmpne	r17,r17,zero
811239c4:	1c62b03a 	or	r17,r3,r17
811239c8:	0011883a 	mov	r8,zero
811239cc:	0021883a 	mov	r16,zero
811239d0:	003f7106 	br	81123798 <__reset+0xfb103798>
811239d4:	193ff804 	addi	r4,r3,-32
811239d8:	00800804 	movi	r2,32
811239dc:	4908d83a 	srl	r4,r9,r4
811239e0:	18804526 	beq	r3,r2,81123af8 <__adddf3+0x56c>
811239e4:	00801004 	movi	r2,64
811239e8:	10c5c83a 	sub	r2,r2,r3
811239ec:	4886983a 	sll	r3,r9,r2
811239f0:	198cb03a 	or	r6,r3,r6
811239f4:	300cc03a 	cmpne	r6,r6,zero
811239f8:	218cb03a 	or	r6,r4,r6
811239fc:	0007883a 	mov	r3,zero
81123a00:	003f3b06 	br	811236f0 <__reset+0xfb1036f0>
81123a04:	80002a26 	beq	r16,zero,81123ab0 <__adddf3+0x524>
81123a08:	0101ffc4 	movi	r4,2047
81123a0c:	11006826 	beq	r2,r4,81123bb0 <__adddf3+0x624>
81123a10:	00c7c83a 	sub	r3,zero,r3
81123a14:	42002034 	orhi	r8,r8,128
81123a18:	01000e04 	movi	r4,56
81123a1c:	20c07c16 	blt	r4,r3,81123c10 <__adddf3+0x684>
81123a20:	010007c4 	movi	r4,31
81123a24:	20c0da16 	blt	r4,r3,81123d90 <__adddf3+0x804>
81123a28:	01000804 	movi	r4,32
81123a2c:	20c9c83a 	sub	r4,r4,r3
81123a30:	4114983a 	sll	r10,r8,r4
81123a34:	88cad83a 	srl	r5,r17,r3
81123a38:	8908983a 	sll	r4,r17,r4
81123a3c:	40c6d83a 	srl	r3,r8,r3
81123a40:	5162b03a 	or	r17,r10,r5
81123a44:	2008c03a 	cmpne	r4,r4,zero
81123a48:	8922b03a 	or	r17,r17,r4
81123a4c:	3463c83a 	sub	r17,r6,r17
81123a50:	48c7c83a 	sub	r3,r9,r3
81123a54:	344d803a 	cmpltu	r6,r6,r17
81123a58:	1991c83a 	sub	r8,r3,r6
81123a5c:	1021883a 	mov	r16,r2
81123a60:	3825883a 	mov	r18,r7
81123a64:	003f2706 	br	81123704 <__reset+0xfb103704>
81123a68:	24d0b03a 	or	r8,r4,r19
81123a6c:	40001b1e 	bne	r8,zero,81123adc <__adddf3+0x550>
81123a70:	0005883a 	mov	r2,zero
81123a74:	0007883a 	mov	r3,zero
81123a78:	0021883a 	mov	r16,zero
81123a7c:	003f4d06 	br	811237b4 <__reset+0xfb1037b4>
81123a80:	008007c4 	movi	r2,31
81123a84:	11003c16 	blt	r2,r4,81123b78 <__adddf3+0x5ec>
81123a88:	00800804 	movi	r2,32
81123a8c:	1105c83a 	sub	r2,r2,r4
81123a90:	488e983a 	sll	r7,r9,r2
81123a94:	310ad83a 	srl	r5,r6,r4
81123a98:	3084983a 	sll	r2,r6,r2
81123a9c:	4912d83a 	srl	r9,r9,r4
81123aa0:	394ab03a 	or	r5,r7,r5
81123aa4:	1004c03a 	cmpne	r2,r2,zero
81123aa8:	288ab03a 	or	r5,r5,r2
81123aac:	003f5306 	br	811237fc <__reset+0xfb1037fc>
81123ab0:	4448b03a 	or	r4,r8,r17
81123ab4:	20003e26 	beq	r4,zero,81123bb0 <__adddf3+0x624>
81123ab8:	00c6303a 	nor	r3,zero,r3
81123abc:	18003a1e 	bne	r3,zero,81123ba8 <__adddf3+0x61c>
81123ac0:	3463c83a 	sub	r17,r6,r17
81123ac4:	4a07c83a 	sub	r3,r9,r8
81123ac8:	344d803a 	cmpltu	r6,r6,r17
81123acc:	1991c83a 	sub	r8,r3,r6
81123ad0:	1021883a 	mov	r16,r2
81123ad4:	3825883a 	mov	r18,r7
81123ad8:	003f0a06 	br	81123704 <__reset+0xfb103704>
81123adc:	2023883a 	mov	r17,r4
81123ae0:	003f0d06 	br	81123718 <__reset+0xfb103718>
81123ae4:	0081ffc4 	movi	r2,2047
81123ae8:	80bf3f1e 	bne	r16,r2,811237e8 <__reset+0xfb1037e8>
81123aec:	003ec806 	br	81123610 <__reset+0xfb103610>
81123af0:	0005883a 	mov	r2,zero
81123af4:	003fb106 	br	811239bc <__reset+0xfb1039bc>
81123af8:	0007883a 	mov	r3,zero
81123afc:	003fbc06 	br	811239f0 <__reset+0xfb1039f0>
81123b00:	4444b03a 	or	r2,r8,r17
81123b04:	8000871e 	bne	r16,zero,81123d24 <__adddf3+0x798>
81123b08:	1000ba26 	beq	r2,zero,81123df4 <__adddf3+0x868>
81123b0c:	4984b03a 	or	r2,r9,r6
81123b10:	103ebf26 	beq	r2,zero,81123610 <__reset+0xfb103610>
81123b14:	8985883a 	add	r2,r17,r6
81123b18:	4247883a 	add	r3,r8,r9
81123b1c:	1451803a 	cmpltu	r8,r2,r17
81123b20:	40d1883a 	add	r8,r8,r3
81123b24:	40c0202c 	andhi	r3,r8,128
81123b28:	1023883a 	mov	r17,r2
81123b2c:	183f1a26 	beq	r3,zero,81123798 <__reset+0xfb103798>
81123b30:	00bfe034 	movhi	r2,65408
81123b34:	10bfffc4 	addi	r2,r2,-1
81123b38:	2021883a 	mov	r16,r4
81123b3c:	4090703a 	and	r8,r8,r2
81123b40:	003eb306 	br	81123610 <__reset+0xfb103610>
81123b44:	4444b03a 	or	r2,r8,r17
81123b48:	8000291e 	bne	r16,zero,81123bf0 <__adddf3+0x664>
81123b4c:	10004b1e 	bne	r2,zero,81123c7c <__adddf3+0x6f0>
81123b50:	4990b03a 	or	r8,r9,r6
81123b54:	40008b26 	beq	r8,zero,81123d84 <__adddf3+0x7f8>
81123b58:	4811883a 	mov	r8,r9
81123b5c:	3023883a 	mov	r17,r6
81123b60:	3825883a 	mov	r18,r7
81123b64:	003eaa06 	br	81123610 <__reset+0xfb103610>
81123b68:	1021883a 	mov	r16,r2
81123b6c:	0011883a 	mov	r8,zero
81123b70:	0005883a 	mov	r2,zero
81123b74:	003f0f06 	br	811237b4 <__reset+0xfb1037b4>
81123b78:	217ff804 	addi	r5,r4,-32
81123b7c:	00800804 	movi	r2,32
81123b80:	494ad83a 	srl	r5,r9,r5
81123b84:	20807d26 	beq	r4,r2,81123d7c <__adddf3+0x7f0>
81123b88:	00801004 	movi	r2,64
81123b8c:	1109c83a 	sub	r4,r2,r4
81123b90:	4912983a 	sll	r9,r9,r4
81123b94:	498cb03a 	or	r6,r9,r6
81123b98:	300cc03a 	cmpne	r6,r6,zero
81123b9c:	298ab03a 	or	r5,r5,r6
81123ba0:	0013883a 	mov	r9,zero
81123ba4:	003f1506 	br	811237fc <__reset+0xfb1037fc>
81123ba8:	0101ffc4 	movi	r4,2047
81123bac:	113f9a1e 	bne	r2,r4,81123a18 <__reset+0xfb103a18>
81123bb0:	4811883a 	mov	r8,r9
81123bb4:	3023883a 	mov	r17,r6
81123bb8:	1021883a 	mov	r16,r2
81123bbc:	3825883a 	mov	r18,r7
81123bc0:	003e9306 	br	81123610 <__reset+0xfb103610>
81123bc4:	8000161e 	bne	r16,zero,81123c20 <__adddf3+0x694>
81123bc8:	444ab03a 	or	r5,r8,r17
81123bcc:	28005126 	beq	r5,zero,81123d14 <__adddf3+0x788>
81123bd0:	0108303a 	nor	r4,zero,r4
81123bd4:	20004d1e 	bne	r4,zero,81123d0c <__adddf3+0x780>
81123bd8:	89a3883a 	add	r17,r17,r6
81123bdc:	4253883a 	add	r9,r8,r9
81123be0:	898d803a 	cmpltu	r6,r17,r6
81123be4:	3251883a 	add	r8,r6,r9
81123be8:	1021883a 	mov	r16,r2
81123bec:	003f0806 	br	81123810 <__reset+0xfb103810>
81123bf0:	1000301e 	bne	r2,zero,81123cb4 <__adddf3+0x728>
81123bf4:	4984b03a 	or	r2,r9,r6
81123bf8:	10007126 	beq	r2,zero,81123dc0 <__adddf3+0x834>
81123bfc:	4811883a 	mov	r8,r9
81123c00:	3023883a 	mov	r17,r6
81123c04:	3825883a 	mov	r18,r7
81123c08:	0401ffc4 	movi	r16,2047
81123c0c:	003e8006 	br	81123610 <__reset+0xfb103610>
81123c10:	4462b03a 	or	r17,r8,r17
81123c14:	8822c03a 	cmpne	r17,r17,zero
81123c18:	0007883a 	mov	r3,zero
81123c1c:	003f8b06 	br	81123a4c <__reset+0xfb103a4c>
81123c20:	0141ffc4 	movi	r5,2047
81123c24:	11403b26 	beq	r2,r5,81123d14 <__adddf3+0x788>
81123c28:	0109c83a 	sub	r4,zero,r4
81123c2c:	42002034 	orhi	r8,r8,128
81123c30:	01400e04 	movi	r5,56
81123c34:	29006716 	blt	r5,r4,81123dd4 <__adddf3+0x848>
81123c38:	014007c4 	movi	r5,31
81123c3c:	29007016 	blt	r5,r4,81123e00 <__adddf3+0x874>
81123c40:	01400804 	movi	r5,32
81123c44:	290bc83a 	sub	r5,r5,r4
81123c48:	4154983a 	sll	r10,r8,r5
81123c4c:	890ed83a 	srl	r7,r17,r4
81123c50:	894a983a 	sll	r5,r17,r5
81123c54:	4108d83a 	srl	r4,r8,r4
81123c58:	51e2b03a 	or	r17,r10,r7
81123c5c:	280ac03a 	cmpne	r5,r5,zero
81123c60:	8962b03a 	or	r17,r17,r5
81123c64:	89a3883a 	add	r17,r17,r6
81123c68:	2253883a 	add	r9,r4,r9
81123c6c:	898d803a 	cmpltu	r6,r17,r6
81123c70:	3251883a 	add	r8,r6,r9
81123c74:	1021883a 	mov	r16,r2
81123c78:	003ee506 	br	81123810 <__reset+0xfb103810>
81123c7c:	4984b03a 	or	r2,r9,r6
81123c80:	103e6326 	beq	r2,zero,81123610 <__reset+0xfb103610>
81123c84:	8987c83a 	sub	r3,r17,r6
81123c88:	88c9803a 	cmpltu	r4,r17,r3
81123c8c:	4245c83a 	sub	r2,r8,r9
81123c90:	1105c83a 	sub	r2,r2,r4
81123c94:	1100202c 	andhi	r4,r2,128
81123c98:	203ebb26 	beq	r4,zero,81123788 <__reset+0xfb103788>
81123c9c:	3463c83a 	sub	r17,r6,r17
81123ca0:	4a07c83a 	sub	r3,r9,r8
81123ca4:	344d803a 	cmpltu	r6,r6,r17
81123ca8:	1991c83a 	sub	r8,r3,r6
81123cac:	3825883a 	mov	r18,r7
81123cb0:	003e5706 	br	81123610 <__reset+0xfb103610>
81123cb4:	4984b03a 	or	r2,r9,r6
81123cb8:	10002e26 	beq	r2,zero,81123d74 <__adddf3+0x7e8>
81123cbc:	4004d0fa 	srli	r2,r8,3
81123cc0:	8822d0fa 	srli	r17,r17,3
81123cc4:	4010977a 	slli	r8,r8,29
81123cc8:	10c0022c 	andhi	r3,r2,8
81123ccc:	4462b03a 	or	r17,r8,r17
81123cd0:	18000826 	beq	r3,zero,81123cf4 <__adddf3+0x768>
81123cd4:	4808d0fa 	srli	r4,r9,3
81123cd8:	20c0022c 	andhi	r3,r4,8
81123cdc:	1800051e 	bne	r3,zero,81123cf4 <__adddf3+0x768>
81123ce0:	300cd0fa 	srli	r6,r6,3
81123ce4:	4806977a 	slli	r3,r9,29
81123ce8:	2005883a 	mov	r2,r4
81123cec:	3825883a 	mov	r18,r7
81123cf0:	19a2b03a 	or	r17,r3,r6
81123cf4:	8810d77a 	srli	r8,r17,29
81123cf8:	100490fa 	slli	r2,r2,3
81123cfc:	882290fa 	slli	r17,r17,3
81123d00:	0401ffc4 	movi	r16,2047
81123d04:	4090b03a 	or	r8,r8,r2
81123d08:	003e4106 	br	81123610 <__reset+0xfb103610>
81123d0c:	0141ffc4 	movi	r5,2047
81123d10:	117fc71e 	bne	r2,r5,81123c30 <__reset+0xfb103c30>
81123d14:	4811883a 	mov	r8,r9
81123d18:	3023883a 	mov	r17,r6
81123d1c:	1021883a 	mov	r16,r2
81123d20:	003e3b06 	br	81123610 <__reset+0xfb103610>
81123d24:	10002f26 	beq	r2,zero,81123de4 <__adddf3+0x858>
81123d28:	4984b03a 	or	r2,r9,r6
81123d2c:	10001126 	beq	r2,zero,81123d74 <__adddf3+0x7e8>
81123d30:	4004d0fa 	srli	r2,r8,3
81123d34:	8822d0fa 	srli	r17,r17,3
81123d38:	4010977a 	slli	r8,r8,29
81123d3c:	10c0022c 	andhi	r3,r2,8
81123d40:	4462b03a 	or	r17,r8,r17
81123d44:	183feb26 	beq	r3,zero,81123cf4 <__reset+0xfb103cf4>
81123d48:	4808d0fa 	srli	r4,r9,3
81123d4c:	20c0022c 	andhi	r3,r4,8
81123d50:	183fe81e 	bne	r3,zero,81123cf4 <__reset+0xfb103cf4>
81123d54:	300cd0fa 	srli	r6,r6,3
81123d58:	4806977a 	slli	r3,r9,29
81123d5c:	2005883a 	mov	r2,r4
81123d60:	19a2b03a 	or	r17,r3,r6
81123d64:	003fe306 	br	81123cf4 <__reset+0xfb103cf4>
81123d68:	0011883a 	mov	r8,zero
81123d6c:	0005883a 	mov	r2,zero
81123d70:	003e3f06 	br	81123670 <__reset+0xfb103670>
81123d74:	0401ffc4 	movi	r16,2047
81123d78:	003e2506 	br	81123610 <__reset+0xfb103610>
81123d7c:	0013883a 	mov	r9,zero
81123d80:	003f8406 	br	81123b94 <__reset+0xfb103b94>
81123d84:	0005883a 	mov	r2,zero
81123d88:	0007883a 	mov	r3,zero
81123d8c:	003e8906 	br	811237b4 <__reset+0xfb1037b4>
81123d90:	197ff804 	addi	r5,r3,-32
81123d94:	01000804 	movi	r4,32
81123d98:	414ad83a 	srl	r5,r8,r5
81123d9c:	19002426 	beq	r3,r4,81123e30 <__adddf3+0x8a4>
81123da0:	01001004 	movi	r4,64
81123da4:	20c7c83a 	sub	r3,r4,r3
81123da8:	40c6983a 	sll	r3,r8,r3
81123dac:	1c46b03a 	or	r3,r3,r17
81123db0:	1806c03a 	cmpne	r3,r3,zero
81123db4:	28e2b03a 	or	r17,r5,r3
81123db8:	0007883a 	mov	r3,zero
81123dbc:	003f2306 	br	81123a4c <__reset+0xfb103a4c>
81123dc0:	0007883a 	mov	r3,zero
81123dc4:	5811883a 	mov	r8,r11
81123dc8:	00bfffc4 	movi	r2,-1
81123dcc:	0401ffc4 	movi	r16,2047
81123dd0:	003e7806 	br	811237b4 <__reset+0xfb1037b4>
81123dd4:	4462b03a 	or	r17,r8,r17
81123dd8:	8822c03a 	cmpne	r17,r17,zero
81123ddc:	0009883a 	mov	r4,zero
81123de0:	003fa006 	br	81123c64 <__reset+0xfb103c64>
81123de4:	4811883a 	mov	r8,r9
81123de8:	3023883a 	mov	r17,r6
81123dec:	0401ffc4 	movi	r16,2047
81123df0:	003e0706 	br	81123610 <__reset+0xfb103610>
81123df4:	4811883a 	mov	r8,r9
81123df8:	3023883a 	mov	r17,r6
81123dfc:	003e0406 	br	81123610 <__reset+0xfb103610>
81123e00:	21fff804 	addi	r7,r4,-32
81123e04:	01400804 	movi	r5,32
81123e08:	41ced83a 	srl	r7,r8,r7
81123e0c:	21400a26 	beq	r4,r5,81123e38 <__adddf3+0x8ac>
81123e10:	01401004 	movi	r5,64
81123e14:	2909c83a 	sub	r4,r5,r4
81123e18:	4108983a 	sll	r4,r8,r4
81123e1c:	2448b03a 	or	r4,r4,r17
81123e20:	2008c03a 	cmpne	r4,r4,zero
81123e24:	3922b03a 	or	r17,r7,r4
81123e28:	0009883a 	mov	r4,zero
81123e2c:	003f8d06 	br	81123c64 <__reset+0xfb103c64>
81123e30:	0007883a 	mov	r3,zero
81123e34:	003fdd06 	br	81123dac <__reset+0xfb103dac>
81123e38:	0009883a 	mov	r4,zero
81123e3c:	003ff706 	br	81123e1c <__reset+0xfb103e1c>

81123e40 <__divdf3>:
81123e40:	defff204 	addi	sp,sp,-56
81123e44:	de00012e 	bgeu	sp,et,81123e4c <__divdf3+0xc>
81123e48:	003b68fa 	trap	3
81123e4c:	dd400915 	stw	r21,36(sp)
81123e50:	282ad53a 	srli	r21,r5,20
81123e54:	dd000815 	stw	r20,32(sp)
81123e58:	2828d7fa 	srli	r20,r5,31
81123e5c:	dc000415 	stw	r16,16(sp)
81123e60:	04000434 	movhi	r16,16
81123e64:	df000c15 	stw	fp,48(sp)
81123e68:	843fffc4 	addi	r16,r16,-1
81123e6c:	dfc00d15 	stw	ra,52(sp)
81123e70:	ddc00b15 	stw	r23,44(sp)
81123e74:	dd800a15 	stw	r22,40(sp)
81123e78:	dcc00715 	stw	r19,28(sp)
81123e7c:	dc800615 	stw	r18,24(sp)
81123e80:	dc400515 	stw	r17,20(sp)
81123e84:	ad41ffcc 	andi	r21,r21,2047
81123e88:	2c20703a 	and	r16,r5,r16
81123e8c:	a7003fcc 	andi	fp,r20,255
81123e90:	a8006126 	beq	r21,zero,81124018 <__divdf3+0x1d8>
81123e94:	0081ffc4 	movi	r2,2047
81123e98:	2025883a 	mov	r18,r4
81123e9c:	a8803726 	beq	r21,r2,81123f7c <__divdf3+0x13c>
81123ea0:	80800434 	orhi	r2,r16,16
81123ea4:	100490fa 	slli	r2,r2,3
81123ea8:	2020d77a 	srli	r16,r4,29
81123eac:	202490fa 	slli	r18,r4,3
81123eb0:	ad7f0044 	addi	r21,r21,-1023
81123eb4:	80a0b03a 	or	r16,r16,r2
81123eb8:	0027883a 	mov	r19,zero
81123ebc:	0013883a 	mov	r9,zero
81123ec0:	3804d53a 	srli	r2,r7,20
81123ec4:	382cd7fa 	srli	r22,r7,31
81123ec8:	04400434 	movhi	r17,16
81123ecc:	8c7fffc4 	addi	r17,r17,-1
81123ed0:	1081ffcc 	andi	r2,r2,2047
81123ed4:	3011883a 	mov	r8,r6
81123ed8:	3c62703a 	and	r17,r7,r17
81123edc:	b5c03fcc 	andi	r23,r22,255
81123ee0:	10006c26 	beq	r2,zero,81124094 <__divdf3+0x254>
81123ee4:	00c1ffc4 	movi	r3,2047
81123ee8:	10c06426 	beq	r2,r3,8112407c <__divdf3+0x23c>
81123eec:	88c00434 	orhi	r3,r17,16
81123ef0:	180690fa 	slli	r3,r3,3
81123ef4:	3022d77a 	srli	r17,r6,29
81123ef8:	301090fa 	slli	r8,r6,3
81123efc:	10bf0044 	addi	r2,r2,-1023
81123f00:	88e2b03a 	or	r17,r17,r3
81123f04:	000f883a 	mov	r7,zero
81123f08:	a58cf03a 	xor	r6,r20,r22
81123f0c:	3cc8b03a 	or	r4,r7,r19
81123f10:	a8abc83a 	sub	r21,r21,r2
81123f14:	008003c4 	movi	r2,15
81123f18:	3007883a 	mov	r3,r6
81123f1c:	34c03fcc 	andi	r19,r6,255
81123f20:	11009036 	bltu	r2,r4,81124164 <__divdf3+0x324>
81123f24:	200890ba 	slli	r4,r4,2
81123f28:	00a044b4 	movhi	r2,33042
81123f2c:	108fcf04 	addi	r2,r2,16188
81123f30:	2089883a 	add	r4,r4,r2
81123f34:	20800017 	ldw	r2,0(r4)
81123f38:	1000683a 	jmp	r2
81123f3c:	81124164 	muli	r4,r16,18693
81123f40:	81123fb4 	orhi	r4,r16,18686
81123f44:	81124154 	ori	r4,r16,18693
81123f48:	81123fa8 	cmpgeui	r4,r16,18686
81123f4c:	81124154 	ori	r4,r16,18693
81123f50:	81124128 	cmpgeui	r4,r16,18692
81123f54:	81124154 	ori	r4,r16,18693
81123f58:	81123fa8 	cmpgeui	r4,r16,18686
81123f5c:	81123fb4 	orhi	r4,r16,18686
81123f60:	81123fb4 	orhi	r4,r16,18686
81123f64:	81124128 	cmpgeui	r4,r16,18692
81123f68:	81123fa8 	cmpgeui	r4,r16,18686
81123f6c:	81123f98 	cmpnei	r4,r16,18686
81123f70:	81123f98 	cmpnei	r4,r16,18686
81123f74:	81123f98 	cmpnei	r4,r16,18686
81123f78:	81124448 	cmpgei	r4,r16,18705
81123f7c:	2404b03a 	or	r2,r4,r16
81123f80:	1000661e 	bne	r2,zero,8112411c <__divdf3+0x2dc>
81123f84:	04c00204 	movi	r19,8
81123f88:	0021883a 	mov	r16,zero
81123f8c:	0025883a 	mov	r18,zero
81123f90:	02400084 	movi	r9,2
81123f94:	003fca06 	br	81123ec0 <__reset+0xfb103ec0>
81123f98:	8023883a 	mov	r17,r16
81123f9c:	9011883a 	mov	r8,r18
81123fa0:	e02f883a 	mov	r23,fp
81123fa4:	480f883a 	mov	r7,r9
81123fa8:	00800084 	movi	r2,2
81123fac:	3881311e 	bne	r7,r2,81124474 <__divdf3+0x634>
81123fb0:	b827883a 	mov	r19,r23
81123fb4:	98c0004c 	andi	r3,r19,1
81123fb8:	0081ffc4 	movi	r2,2047
81123fbc:	000b883a 	mov	r5,zero
81123fc0:	0025883a 	mov	r18,zero
81123fc4:	1004953a 	slli	r2,r2,20
81123fc8:	18c03fcc 	andi	r3,r3,255
81123fcc:	04400434 	movhi	r17,16
81123fd0:	8c7fffc4 	addi	r17,r17,-1
81123fd4:	180697fa 	slli	r3,r3,31
81123fd8:	2c4a703a 	and	r5,r5,r17
81123fdc:	288ab03a 	or	r5,r5,r2
81123fe0:	28c6b03a 	or	r3,r5,r3
81123fe4:	9005883a 	mov	r2,r18
81123fe8:	dfc00d17 	ldw	ra,52(sp)
81123fec:	df000c17 	ldw	fp,48(sp)
81123ff0:	ddc00b17 	ldw	r23,44(sp)
81123ff4:	dd800a17 	ldw	r22,40(sp)
81123ff8:	dd400917 	ldw	r21,36(sp)
81123ffc:	dd000817 	ldw	r20,32(sp)
81124000:	dcc00717 	ldw	r19,28(sp)
81124004:	dc800617 	ldw	r18,24(sp)
81124008:	dc400517 	ldw	r17,20(sp)
8112400c:	dc000417 	ldw	r16,16(sp)
81124010:	dec00e04 	addi	sp,sp,56
81124014:	f800283a 	ret
81124018:	2404b03a 	or	r2,r4,r16
8112401c:	2027883a 	mov	r19,r4
81124020:	10003926 	beq	r2,zero,81124108 <__divdf3+0x2c8>
81124024:	80012e26 	beq	r16,zero,811244e0 <__divdf3+0x6a0>
81124028:	8009883a 	mov	r4,r16
8112402c:	d9800315 	stw	r6,12(sp)
81124030:	d9c00215 	stw	r7,8(sp)
81124034:	110fce80 	call	8110fce8 <__clzsi2>
81124038:	d9800317 	ldw	r6,12(sp)
8112403c:	d9c00217 	ldw	r7,8(sp)
81124040:	113ffd44 	addi	r4,r2,-11
81124044:	00c00704 	movi	r3,28
81124048:	19012116 	blt	r3,r4,811244d0 <__divdf3+0x690>
8112404c:	00c00744 	movi	r3,29
81124050:	147ffe04 	addi	r17,r2,-8
81124054:	1907c83a 	sub	r3,r3,r4
81124058:	8460983a 	sll	r16,r16,r17
8112405c:	98c6d83a 	srl	r3,r19,r3
81124060:	9c64983a 	sll	r18,r19,r17
81124064:	1c20b03a 	or	r16,r3,r16
81124068:	1080fcc4 	addi	r2,r2,1011
8112406c:	00abc83a 	sub	r21,zero,r2
81124070:	0027883a 	mov	r19,zero
81124074:	0013883a 	mov	r9,zero
81124078:	003f9106 	br	81123ec0 <__reset+0xfb103ec0>
8112407c:	3446b03a 	or	r3,r6,r17
81124080:	18001f1e 	bne	r3,zero,81124100 <__divdf3+0x2c0>
81124084:	0023883a 	mov	r17,zero
81124088:	0011883a 	mov	r8,zero
8112408c:	01c00084 	movi	r7,2
81124090:	003f9d06 	br	81123f08 <__reset+0xfb103f08>
81124094:	3446b03a 	or	r3,r6,r17
81124098:	18001526 	beq	r3,zero,811240f0 <__divdf3+0x2b0>
8112409c:	88011b26 	beq	r17,zero,8112450c <__divdf3+0x6cc>
811240a0:	8809883a 	mov	r4,r17
811240a4:	d9800315 	stw	r6,12(sp)
811240a8:	da400115 	stw	r9,4(sp)
811240ac:	110fce80 	call	8110fce8 <__clzsi2>
811240b0:	d9800317 	ldw	r6,12(sp)
811240b4:	da400117 	ldw	r9,4(sp)
811240b8:	113ffd44 	addi	r4,r2,-11
811240bc:	00c00704 	movi	r3,28
811240c0:	19010e16 	blt	r3,r4,811244fc <__divdf3+0x6bc>
811240c4:	00c00744 	movi	r3,29
811240c8:	123ffe04 	addi	r8,r2,-8
811240cc:	1907c83a 	sub	r3,r3,r4
811240d0:	8a22983a 	sll	r17,r17,r8
811240d4:	30c6d83a 	srl	r3,r6,r3
811240d8:	3210983a 	sll	r8,r6,r8
811240dc:	1c62b03a 	or	r17,r3,r17
811240e0:	1080fcc4 	addi	r2,r2,1011
811240e4:	0085c83a 	sub	r2,zero,r2
811240e8:	000f883a 	mov	r7,zero
811240ec:	003f8606 	br	81123f08 <__reset+0xfb103f08>
811240f0:	0023883a 	mov	r17,zero
811240f4:	0011883a 	mov	r8,zero
811240f8:	01c00044 	movi	r7,1
811240fc:	003f8206 	br	81123f08 <__reset+0xfb103f08>
81124100:	01c000c4 	movi	r7,3
81124104:	003f8006 	br	81123f08 <__reset+0xfb103f08>
81124108:	04c00104 	movi	r19,4
8112410c:	0021883a 	mov	r16,zero
81124110:	0025883a 	mov	r18,zero
81124114:	02400044 	movi	r9,1
81124118:	003f6906 	br	81123ec0 <__reset+0xfb103ec0>
8112411c:	04c00304 	movi	r19,12
81124120:	024000c4 	movi	r9,3
81124124:	003f6606 	br	81123ec0 <__reset+0xfb103ec0>
81124128:	01400434 	movhi	r5,16
8112412c:	0007883a 	mov	r3,zero
81124130:	297fffc4 	addi	r5,r5,-1
81124134:	04bfffc4 	movi	r18,-1
81124138:	0081ffc4 	movi	r2,2047
8112413c:	003fa106 	br	81123fc4 <__reset+0xfb103fc4>
81124140:	00c00044 	movi	r3,1
81124144:	1887c83a 	sub	r3,r3,r2
81124148:	01000e04 	movi	r4,56
8112414c:	20c1210e 	bge	r4,r3,811245d4 <__divdf3+0x794>
81124150:	98c0004c 	andi	r3,r19,1
81124154:	0005883a 	mov	r2,zero
81124158:	000b883a 	mov	r5,zero
8112415c:	0025883a 	mov	r18,zero
81124160:	003f9806 	br	81123fc4 <__reset+0xfb103fc4>
81124164:	8c00fd36 	bltu	r17,r16,8112455c <__divdf3+0x71c>
81124168:	8440fb26 	beq	r16,r17,81124558 <__divdf3+0x718>
8112416c:	8007883a 	mov	r3,r16
81124170:	ad7fffc4 	addi	r21,r21,-1
81124174:	0021883a 	mov	r16,zero
81124178:	4004d63a 	srli	r2,r8,24
8112417c:	8822923a 	slli	r17,r17,8
81124180:	1809883a 	mov	r4,r3
81124184:	402c923a 	slli	r22,r8,8
81124188:	88b8b03a 	or	fp,r17,r2
8112418c:	e028d43a 	srli	r20,fp,16
81124190:	d8c00015 	stw	r3,0(sp)
81124194:	e5ffffcc 	andi	r23,fp,65535
81124198:	a00b883a 	mov	r5,r20
8112419c:	11232d40 	call	811232d4 <__udivsi3>
811241a0:	d8c00017 	ldw	r3,0(sp)
811241a4:	a00b883a 	mov	r5,r20
811241a8:	d8800315 	stw	r2,12(sp)
811241ac:	1809883a 	mov	r4,r3
811241b0:	11233380 	call	81123338 <__umodsi3>
811241b4:	d9800317 	ldw	r6,12(sp)
811241b8:	1006943a 	slli	r3,r2,16
811241bc:	9004d43a 	srli	r2,r18,16
811241c0:	b9a3383a 	mul	r17,r23,r6
811241c4:	10c4b03a 	or	r2,r2,r3
811241c8:	1440062e 	bgeu	r2,r17,811241e4 <__divdf3+0x3a4>
811241cc:	1705883a 	add	r2,r2,fp
811241d0:	30ffffc4 	addi	r3,r6,-1
811241d4:	1700ee36 	bltu	r2,fp,81124590 <__divdf3+0x750>
811241d8:	1440ed2e 	bgeu	r2,r17,81124590 <__divdf3+0x750>
811241dc:	31bfff84 	addi	r6,r6,-2
811241e0:	1705883a 	add	r2,r2,fp
811241e4:	1463c83a 	sub	r17,r2,r17
811241e8:	a00b883a 	mov	r5,r20
811241ec:	8809883a 	mov	r4,r17
811241f0:	d9800315 	stw	r6,12(sp)
811241f4:	11232d40 	call	811232d4 <__udivsi3>
811241f8:	a00b883a 	mov	r5,r20
811241fc:	8809883a 	mov	r4,r17
81124200:	d8800215 	stw	r2,8(sp)
81124204:	11233380 	call	81123338 <__umodsi3>
81124208:	d9c00217 	ldw	r7,8(sp)
8112420c:	1004943a 	slli	r2,r2,16
81124210:	94bfffcc 	andi	r18,r18,65535
81124214:	b9d1383a 	mul	r8,r23,r7
81124218:	90a4b03a 	or	r18,r18,r2
8112421c:	d9800317 	ldw	r6,12(sp)
81124220:	9200062e 	bgeu	r18,r8,8112423c <__divdf3+0x3fc>
81124224:	9725883a 	add	r18,r18,fp
81124228:	38bfffc4 	addi	r2,r7,-1
8112422c:	9700d636 	bltu	r18,fp,81124588 <__divdf3+0x748>
81124230:	9200d52e 	bgeu	r18,r8,81124588 <__divdf3+0x748>
81124234:	39ffff84 	addi	r7,r7,-2
81124238:	9725883a 	add	r18,r18,fp
8112423c:	3004943a 	slli	r2,r6,16
81124240:	b012d43a 	srli	r9,r22,16
81124244:	b1bfffcc 	andi	r6,r22,65535
81124248:	11e2b03a 	or	r17,r2,r7
8112424c:	8806d43a 	srli	r3,r17,16
81124250:	893fffcc 	andi	r4,r17,65535
81124254:	218b383a 	mul	r5,r4,r6
81124258:	30c5383a 	mul	r2,r6,r3
8112425c:	2249383a 	mul	r4,r4,r9
81124260:	280ed43a 	srli	r7,r5,16
81124264:	9225c83a 	sub	r18,r18,r8
81124268:	2089883a 	add	r4,r4,r2
8112426c:	3909883a 	add	r4,r7,r4
81124270:	1a47383a 	mul	r3,r3,r9
81124274:	2080022e 	bgeu	r4,r2,81124280 <__divdf3+0x440>
81124278:	00800074 	movhi	r2,1
8112427c:	1887883a 	add	r3,r3,r2
81124280:	2004d43a 	srli	r2,r4,16
81124284:	2008943a 	slli	r4,r4,16
81124288:	297fffcc 	andi	r5,r5,65535
8112428c:	10c7883a 	add	r3,r2,r3
81124290:	2149883a 	add	r4,r4,r5
81124294:	90c0a536 	bltu	r18,r3,8112452c <__divdf3+0x6ec>
81124298:	90c0bf26 	beq	r18,r3,81124598 <__divdf3+0x758>
8112429c:	90c7c83a 	sub	r3,r18,r3
811242a0:	810fc83a 	sub	r7,r16,r4
811242a4:	81e5803a 	cmpltu	r18,r16,r7
811242a8:	1ca5c83a 	sub	r18,r3,r18
811242ac:	e480c126 	beq	fp,r18,811245b4 <__divdf3+0x774>
811242b0:	a00b883a 	mov	r5,r20
811242b4:	9009883a 	mov	r4,r18
811242b8:	d9800315 	stw	r6,12(sp)
811242bc:	d9c00215 	stw	r7,8(sp)
811242c0:	da400115 	stw	r9,4(sp)
811242c4:	11232d40 	call	811232d4 <__udivsi3>
811242c8:	a00b883a 	mov	r5,r20
811242cc:	9009883a 	mov	r4,r18
811242d0:	d8800015 	stw	r2,0(sp)
811242d4:	11233380 	call	81123338 <__umodsi3>
811242d8:	d9c00217 	ldw	r7,8(sp)
811242dc:	da000017 	ldw	r8,0(sp)
811242e0:	1006943a 	slli	r3,r2,16
811242e4:	3804d43a 	srli	r2,r7,16
811242e8:	ba21383a 	mul	r16,r23,r8
811242ec:	d9800317 	ldw	r6,12(sp)
811242f0:	10c4b03a 	or	r2,r2,r3
811242f4:	da400117 	ldw	r9,4(sp)
811242f8:	1400062e 	bgeu	r2,r16,81124314 <__divdf3+0x4d4>
811242fc:	1705883a 	add	r2,r2,fp
81124300:	40ffffc4 	addi	r3,r8,-1
81124304:	1700ad36 	bltu	r2,fp,811245bc <__divdf3+0x77c>
81124308:	1400ac2e 	bgeu	r2,r16,811245bc <__divdf3+0x77c>
8112430c:	423fff84 	addi	r8,r8,-2
81124310:	1705883a 	add	r2,r2,fp
81124314:	1421c83a 	sub	r16,r2,r16
81124318:	a00b883a 	mov	r5,r20
8112431c:	8009883a 	mov	r4,r16
81124320:	d9800315 	stw	r6,12(sp)
81124324:	d9c00215 	stw	r7,8(sp)
81124328:	da000015 	stw	r8,0(sp)
8112432c:	da400115 	stw	r9,4(sp)
81124330:	11232d40 	call	811232d4 <__udivsi3>
81124334:	8009883a 	mov	r4,r16
81124338:	a00b883a 	mov	r5,r20
8112433c:	1025883a 	mov	r18,r2
81124340:	11233380 	call	81123338 <__umodsi3>
81124344:	d9c00217 	ldw	r7,8(sp)
81124348:	1004943a 	slli	r2,r2,16
8112434c:	bcaf383a 	mul	r23,r23,r18
81124350:	393fffcc 	andi	r4,r7,65535
81124354:	2088b03a 	or	r4,r4,r2
81124358:	d9800317 	ldw	r6,12(sp)
8112435c:	da000017 	ldw	r8,0(sp)
81124360:	da400117 	ldw	r9,4(sp)
81124364:	25c0062e 	bgeu	r4,r23,81124380 <__divdf3+0x540>
81124368:	2709883a 	add	r4,r4,fp
8112436c:	90bfffc4 	addi	r2,r18,-1
81124370:	27009436 	bltu	r4,fp,811245c4 <__divdf3+0x784>
81124374:	25c0932e 	bgeu	r4,r23,811245c4 <__divdf3+0x784>
81124378:	94bfff84 	addi	r18,r18,-2
8112437c:	2709883a 	add	r4,r4,fp
81124380:	4004943a 	slli	r2,r8,16
81124384:	25efc83a 	sub	r23,r4,r23
81124388:	1490b03a 	or	r8,r2,r18
8112438c:	4008d43a 	srli	r4,r8,16
81124390:	40ffffcc 	andi	r3,r8,65535
81124394:	30c5383a 	mul	r2,r6,r3
81124398:	1a47383a 	mul	r3,r3,r9
8112439c:	310d383a 	mul	r6,r6,r4
811243a0:	100ad43a 	srli	r5,r2,16
811243a4:	4913383a 	mul	r9,r9,r4
811243a8:	1987883a 	add	r3,r3,r6
811243ac:	28c7883a 	add	r3,r5,r3
811243b0:	1980022e 	bgeu	r3,r6,811243bc <__divdf3+0x57c>
811243b4:	01000074 	movhi	r4,1
811243b8:	4913883a 	add	r9,r9,r4
811243bc:	1808d43a 	srli	r4,r3,16
811243c0:	1806943a 	slli	r3,r3,16
811243c4:	10bfffcc 	andi	r2,r2,65535
811243c8:	2253883a 	add	r9,r4,r9
811243cc:	1887883a 	add	r3,r3,r2
811243d0:	ba403836 	bltu	r23,r9,811244b4 <__divdf3+0x674>
811243d4:	ba403626 	beq	r23,r9,811244b0 <__divdf3+0x670>
811243d8:	42000054 	ori	r8,r8,1
811243dc:	a880ffc4 	addi	r2,r21,1023
811243e0:	00bf570e 	bge	zero,r2,81124140 <__reset+0xfb104140>
811243e4:	40c001cc 	andi	r3,r8,7
811243e8:	18000726 	beq	r3,zero,81124408 <__divdf3+0x5c8>
811243ec:	40c003cc 	andi	r3,r8,15
811243f0:	01000104 	movi	r4,4
811243f4:	19000426 	beq	r3,r4,81124408 <__divdf3+0x5c8>
811243f8:	4107883a 	add	r3,r8,r4
811243fc:	1a11803a 	cmpltu	r8,r3,r8
81124400:	8a23883a 	add	r17,r17,r8
81124404:	1811883a 	mov	r8,r3
81124408:	88c0402c 	andhi	r3,r17,256
8112440c:	18000426 	beq	r3,zero,81124420 <__divdf3+0x5e0>
81124410:	00ffc034 	movhi	r3,65280
81124414:	18ffffc4 	addi	r3,r3,-1
81124418:	a8810004 	addi	r2,r21,1024
8112441c:	88e2703a 	and	r17,r17,r3
81124420:	00c1ff84 	movi	r3,2046
81124424:	18bee316 	blt	r3,r2,81123fb4 <__reset+0xfb103fb4>
81124428:	8824977a 	slli	r18,r17,29
8112442c:	4010d0fa 	srli	r8,r8,3
81124430:	8822927a 	slli	r17,r17,9
81124434:	1081ffcc 	andi	r2,r2,2047
81124438:	9224b03a 	or	r18,r18,r8
8112443c:	880ad33a 	srli	r5,r17,12
81124440:	98c0004c 	andi	r3,r19,1
81124444:	003edf06 	br	81123fc4 <__reset+0xfb103fc4>
81124448:	8080022c 	andhi	r2,r16,8
8112444c:	10001226 	beq	r2,zero,81124498 <__divdf3+0x658>
81124450:	8880022c 	andhi	r2,r17,8
81124454:	1000101e 	bne	r2,zero,81124498 <__divdf3+0x658>
81124458:	00800434 	movhi	r2,16
8112445c:	89400234 	orhi	r5,r17,8
81124460:	10bfffc4 	addi	r2,r2,-1
81124464:	b007883a 	mov	r3,r22
81124468:	288a703a 	and	r5,r5,r2
8112446c:	4025883a 	mov	r18,r8
81124470:	003f3106 	br	81124138 <__reset+0xfb104138>
81124474:	008000c4 	movi	r2,3
81124478:	3880a626 	beq	r7,r2,81124714 <__divdf3+0x8d4>
8112447c:	00800044 	movi	r2,1
81124480:	3880521e 	bne	r7,r2,811245cc <__divdf3+0x78c>
81124484:	b807883a 	mov	r3,r23
81124488:	0005883a 	mov	r2,zero
8112448c:	000b883a 	mov	r5,zero
81124490:	0025883a 	mov	r18,zero
81124494:	003ecb06 	br	81123fc4 <__reset+0xfb103fc4>
81124498:	00800434 	movhi	r2,16
8112449c:	81400234 	orhi	r5,r16,8
811244a0:	10bfffc4 	addi	r2,r2,-1
811244a4:	a007883a 	mov	r3,r20
811244a8:	288a703a 	and	r5,r5,r2
811244ac:	003f2206 	br	81124138 <__reset+0xfb104138>
811244b0:	183fca26 	beq	r3,zero,811243dc <__reset+0xfb1043dc>
811244b4:	e5ef883a 	add	r23,fp,r23
811244b8:	40bfffc4 	addi	r2,r8,-1
811244bc:	bf00392e 	bgeu	r23,fp,811245a4 <__divdf3+0x764>
811244c0:	1011883a 	mov	r8,r2
811244c4:	ba7fc41e 	bne	r23,r9,811243d8 <__reset+0xfb1043d8>
811244c8:	b0ffc31e 	bne	r22,r3,811243d8 <__reset+0xfb1043d8>
811244cc:	003fc306 	br	811243dc <__reset+0xfb1043dc>
811244d0:	143ff604 	addi	r16,r2,-40
811244d4:	9c20983a 	sll	r16,r19,r16
811244d8:	0025883a 	mov	r18,zero
811244dc:	003ee206 	br	81124068 <__reset+0xfb104068>
811244e0:	d9800315 	stw	r6,12(sp)
811244e4:	d9c00215 	stw	r7,8(sp)
811244e8:	110fce80 	call	8110fce8 <__clzsi2>
811244ec:	10800804 	addi	r2,r2,32
811244f0:	d9c00217 	ldw	r7,8(sp)
811244f4:	d9800317 	ldw	r6,12(sp)
811244f8:	003ed106 	br	81124040 <__reset+0xfb104040>
811244fc:	147ff604 	addi	r17,r2,-40
81124500:	3462983a 	sll	r17,r6,r17
81124504:	0011883a 	mov	r8,zero
81124508:	003ef506 	br	811240e0 <__reset+0xfb1040e0>
8112450c:	3009883a 	mov	r4,r6
81124510:	d9800315 	stw	r6,12(sp)
81124514:	da400115 	stw	r9,4(sp)
81124518:	110fce80 	call	8110fce8 <__clzsi2>
8112451c:	10800804 	addi	r2,r2,32
81124520:	da400117 	ldw	r9,4(sp)
81124524:	d9800317 	ldw	r6,12(sp)
81124528:	003ee306 	br	811240b8 <__reset+0xfb1040b8>
8112452c:	85a1883a 	add	r16,r16,r22
81124530:	8585803a 	cmpltu	r2,r16,r22
81124534:	1705883a 	add	r2,r2,fp
81124538:	14a5883a 	add	r18,r2,r18
8112453c:	88bfffc4 	addi	r2,r17,-1
81124540:	e4800c2e 	bgeu	fp,r18,81124574 <__divdf3+0x734>
81124544:	90c03e36 	bltu	r18,r3,81124640 <__divdf3+0x800>
81124548:	1c806926 	beq	r3,r18,811246f0 <__divdf3+0x8b0>
8112454c:	90c7c83a 	sub	r3,r18,r3
81124550:	1023883a 	mov	r17,r2
81124554:	003f5206 	br	811242a0 <__reset+0xfb1042a0>
81124558:	923f0436 	bltu	r18,r8,8112416c <__reset+0xfb10416c>
8112455c:	800897fa 	slli	r4,r16,31
81124560:	9004d07a 	srli	r2,r18,1
81124564:	8006d07a 	srli	r3,r16,1
81124568:	902097fa 	slli	r16,r18,31
8112456c:	20a4b03a 	or	r18,r4,r2
81124570:	003f0106 	br	81124178 <__reset+0xfb104178>
81124574:	e4bff51e 	bne	fp,r18,8112454c <__reset+0xfb10454c>
81124578:	85bff22e 	bgeu	r16,r22,81124544 <__reset+0xfb104544>
8112457c:	e0c7c83a 	sub	r3,fp,r3
81124580:	1023883a 	mov	r17,r2
81124584:	003f4606 	br	811242a0 <__reset+0xfb1042a0>
81124588:	100f883a 	mov	r7,r2
8112458c:	003f2b06 	br	8112423c <__reset+0xfb10423c>
81124590:	180d883a 	mov	r6,r3
81124594:	003f1306 	br	811241e4 <__reset+0xfb1041e4>
81124598:	813fe436 	bltu	r16,r4,8112452c <__reset+0xfb10452c>
8112459c:	0007883a 	mov	r3,zero
811245a0:	003f3f06 	br	811242a0 <__reset+0xfb1042a0>
811245a4:	ba402c36 	bltu	r23,r9,81124658 <__divdf3+0x818>
811245a8:	4dc05426 	beq	r9,r23,811246fc <__divdf3+0x8bc>
811245ac:	1011883a 	mov	r8,r2
811245b0:	003f8906 	br	811243d8 <__reset+0xfb1043d8>
811245b4:	023fffc4 	movi	r8,-1
811245b8:	003f8806 	br	811243dc <__reset+0xfb1043dc>
811245bc:	1811883a 	mov	r8,r3
811245c0:	003f5406 	br	81124314 <__reset+0xfb104314>
811245c4:	1025883a 	mov	r18,r2
811245c8:	003f6d06 	br	81124380 <__reset+0xfb104380>
811245cc:	b827883a 	mov	r19,r23
811245d0:	003f8206 	br	811243dc <__reset+0xfb1043dc>
811245d4:	010007c4 	movi	r4,31
811245d8:	20c02616 	blt	r4,r3,81124674 <__divdf3+0x834>
811245dc:	00800804 	movi	r2,32
811245e0:	10c5c83a 	sub	r2,r2,r3
811245e4:	888a983a 	sll	r5,r17,r2
811245e8:	40c8d83a 	srl	r4,r8,r3
811245ec:	4084983a 	sll	r2,r8,r2
811245f0:	88e2d83a 	srl	r17,r17,r3
811245f4:	2906b03a 	or	r3,r5,r4
811245f8:	1004c03a 	cmpne	r2,r2,zero
811245fc:	1886b03a 	or	r3,r3,r2
81124600:	188001cc 	andi	r2,r3,7
81124604:	10000726 	beq	r2,zero,81124624 <__divdf3+0x7e4>
81124608:	188003cc 	andi	r2,r3,15
8112460c:	01000104 	movi	r4,4
81124610:	11000426 	beq	r2,r4,81124624 <__divdf3+0x7e4>
81124614:	1805883a 	mov	r2,r3
81124618:	10c00104 	addi	r3,r2,4
8112461c:	1885803a 	cmpltu	r2,r3,r2
81124620:	88a3883a 	add	r17,r17,r2
81124624:	8880202c 	andhi	r2,r17,128
81124628:	10002726 	beq	r2,zero,811246c8 <__divdf3+0x888>
8112462c:	98c0004c 	andi	r3,r19,1
81124630:	00800044 	movi	r2,1
81124634:	000b883a 	mov	r5,zero
81124638:	0025883a 	mov	r18,zero
8112463c:	003e6106 	br	81123fc4 <__reset+0xfb103fc4>
81124640:	85a1883a 	add	r16,r16,r22
81124644:	8585803a 	cmpltu	r2,r16,r22
81124648:	1705883a 	add	r2,r2,fp
8112464c:	14a5883a 	add	r18,r2,r18
81124650:	8c7fff84 	addi	r17,r17,-2
81124654:	003f1106 	br	8112429c <__reset+0xfb10429c>
81124658:	b589883a 	add	r4,r22,r22
8112465c:	25ad803a 	cmpltu	r22,r4,r22
81124660:	b739883a 	add	fp,r22,fp
81124664:	40bfff84 	addi	r2,r8,-2
81124668:	bf2f883a 	add	r23,r23,fp
8112466c:	202d883a 	mov	r22,r4
81124670:	003f9306 	br	811244c0 <__reset+0xfb1044c0>
81124674:	013ff844 	movi	r4,-31
81124678:	2085c83a 	sub	r2,r4,r2
8112467c:	8888d83a 	srl	r4,r17,r2
81124680:	00800804 	movi	r2,32
81124684:	18802126 	beq	r3,r2,8112470c <__divdf3+0x8cc>
81124688:	00801004 	movi	r2,64
8112468c:	10c5c83a 	sub	r2,r2,r3
81124690:	8884983a 	sll	r2,r17,r2
81124694:	1204b03a 	or	r2,r2,r8
81124698:	1004c03a 	cmpne	r2,r2,zero
8112469c:	2084b03a 	or	r2,r4,r2
811246a0:	144001cc 	andi	r17,r2,7
811246a4:	88000d1e 	bne	r17,zero,811246dc <__divdf3+0x89c>
811246a8:	000b883a 	mov	r5,zero
811246ac:	1024d0fa 	srli	r18,r2,3
811246b0:	98c0004c 	andi	r3,r19,1
811246b4:	0005883a 	mov	r2,zero
811246b8:	9464b03a 	or	r18,r18,r17
811246bc:	003e4106 	br	81123fc4 <__reset+0xfb103fc4>
811246c0:	1007883a 	mov	r3,r2
811246c4:	0023883a 	mov	r17,zero
811246c8:	880a927a 	slli	r5,r17,9
811246cc:	1805883a 	mov	r2,r3
811246d0:	8822977a 	slli	r17,r17,29
811246d4:	280ad33a 	srli	r5,r5,12
811246d8:	003ff406 	br	811246ac <__reset+0xfb1046ac>
811246dc:	10c003cc 	andi	r3,r2,15
811246e0:	01000104 	movi	r4,4
811246e4:	193ff626 	beq	r3,r4,811246c0 <__reset+0xfb1046c0>
811246e8:	0023883a 	mov	r17,zero
811246ec:	003fca06 	br	81124618 <__reset+0xfb104618>
811246f0:	813fd336 	bltu	r16,r4,81124640 <__reset+0xfb104640>
811246f4:	1023883a 	mov	r17,r2
811246f8:	003fa806 	br	8112459c <__reset+0xfb10459c>
811246fc:	b0ffd636 	bltu	r22,r3,81124658 <__reset+0xfb104658>
81124700:	1011883a 	mov	r8,r2
81124704:	b0ff341e 	bne	r22,r3,811243d8 <__reset+0xfb1043d8>
81124708:	003f3406 	br	811243dc <__reset+0xfb1043dc>
8112470c:	0005883a 	mov	r2,zero
81124710:	003fe006 	br	81124694 <__reset+0xfb104694>
81124714:	00800434 	movhi	r2,16
81124718:	89400234 	orhi	r5,r17,8
8112471c:	10bfffc4 	addi	r2,r2,-1
81124720:	b807883a 	mov	r3,r23
81124724:	288a703a 	and	r5,r5,r2
81124728:	4025883a 	mov	r18,r8
8112472c:	003e8206 	br	81124138 <__reset+0xfb104138>

81124730 <__eqdf2>:
81124730:	2804d53a 	srli	r2,r5,20
81124734:	3806d53a 	srli	r3,r7,20
81124738:	02000434 	movhi	r8,16
8112473c:	423fffc4 	addi	r8,r8,-1
81124740:	1081ffcc 	andi	r2,r2,2047
81124744:	0281ffc4 	movi	r10,2047
81124748:	2a12703a 	and	r9,r5,r8
8112474c:	18c1ffcc 	andi	r3,r3,2047
81124750:	3a10703a 	and	r8,r7,r8
81124754:	280ad7fa 	srli	r5,r5,31
81124758:	380ed7fa 	srli	r7,r7,31
8112475c:	12801026 	beq	r2,r10,811247a0 <__eqdf2+0x70>
81124760:	0281ffc4 	movi	r10,2047
81124764:	1a800a26 	beq	r3,r10,81124790 <__eqdf2+0x60>
81124768:	10c00226 	beq	r2,r3,81124774 <__eqdf2+0x44>
8112476c:	00800044 	movi	r2,1
81124770:	f800283a 	ret
81124774:	4a3ffd1e 	bne	r9,r8,8112476c <__reset+0xfb10476c>
81124778:	21bffc1e 	bne	r4,r6,8112476c <__reset+0xfb10476c>
8112477c:	29c00c26 	beq	r5,r7,811247b0 <__eqdf2+0x80>
81124780:	103ffa1e 	bne	r2,zero,8112476c <__reset+0xfb10476c>
81124784:	2244b03a 	or	r2,r4,r9
81124788:	1004c03a 	cmpne	r2,r2,zero
8112478c:	f800283a 	ret
81124790:	3214b03a 	or	r10,r6,r8
81124794:	503ff426 	beq	r10,zero,81124768 <__reset+0xfb104768>
81124798:	00800044 	movi	r2,1
8112479c:	f800283a 	ret
811247a0:	2254b03a 	or	r10,r4,r9
811247a4:	503fee26 	beq	r10,zero,81124760 <__reset+0xfb104760>
811247a8:	00800044 	movi	r2,1
811247ac:	f800283a 	ret
811247b0:	0005883a 	mov	r2,zero
811247b4:	f800283a 	ret

811247b8 <__gedf2>:
811247b8:	2804d53a 	srli	r2,r5,20
811247bc:	3806d53a 	srli	r3,r7,20
811247c0:	02000434 	movhi	r8,16
811247c4:	423fffc4 	addi	r8,r8,-1
811247c8:	1081ffcc 	andi	r2,r2,2047
811247cc:	0241ffc4 	movi	r9,2047
811247d0:	2a14703a 	and	r10,r5,r8
811247d4:	18c1ffcc 	andi	r3,r3,2047
811247d8:	3a10703a 	and	r8,r7,r8
811247dc:	280ad7fa 	srli	r5,r5,31
811247e0:	380ed7fa 	srli	r7,r7,31
811247e4:	12401d26 	beq	r2,r9,8112485c <__gedf2+0xa4>
811247e8:	0241ffc4 	movi	r9,2047
811247ec:	1a401226 	beq	r3,r9,81124838 <__gedf2+0x80>
811247f0:	1000081e 	bne	r2,zero,81124814 <__gedf2+0x5c>
811247f4:	2296b03a 	or	r11,r4,r10
811247f8:	5813003a 	cmpeq	r9,r11,zero
811247fc:	1800091e 	bne	r3,zero,81124824 <__gedf2+0x6c>
81124800:	3218b03a 	or	r12,r6,r8
81124804:	6000071e 	bne	r12,zero,81124824 <__gedf2+0x6c>
81124808:	0005883a 	mov	r2,zero
8112480c:	5800101e 	bne	r11,zero,81124850 <__gedf2+0x98>
81124810:	f800283a 	ret
81124814:	18000c1e 	bne	r3,zero,81124848 <__gedf2+0x90>
81124818:	3212b03a 	or	r9,r6,r8
8112481c:	48000c26 	beq	r9,zero,81124850 <__gedf2+0x98>
81124820:	0013883a 	mov	r9,zero
81124824:	39c03fcc 	andi	r7,r7,255
81124828:	48000826 	beq	r9,zero,8112484c <__gedf2+0x94>
8112482c:	38000926 	beq	r7,zero,81124854 <__gedf2+0x9c>
81124830:	00800044 	movi	r2,1
81124834:	f800283a 	ret
81124838:	3212b03a 	or	r9,r6,r8
8112483c:	483fec26 	beq	r9,zero,811247f0 <__reset+0xfb1047f0>
81124840:	00bfff84 	movi	r2,-2
81124844:	f800283a 	ret
81124848:	39c03fcc 	andi	r7,r7,255
8112484c:	29c00626 	beq	r5,r7,81124868 <__gedf2+0xb0>
81124850:	283ff726 	beq	r5,zero,81124830 <__reset+0xfb104830>
81124854:	00bfffc4 	movi	r2,-1
81124858:	f800283a 	ret
8112485c:	2292b03a 	or	r9,r4,r10
81124860:	483fe126 	beq	r9,zero,811247e8 <__reset+0xfb1047e8>
81124864:	003ff606 	br	81124840 <__reset+0xfb104840>
81124868:	18bff916 	blt	r3,r2,81124850 <__reset+0xfb104850>
8112486c:	10c00316 	blt	r2,r3,8112487c <__gedf2+0xc4>
81124870:	42bff736 	bltu	r8,r10,81124850 <__reset+0xfb104850>
81124874:	52000326 	beq	r10,r8,81124884 <__gedf2+0xcc>
81124878:	5200042e 	bgeu	r10,r8,8112488c <__gedf2+0xd4>
8112487c:	283fec1e 	bne	r5,zero,81124830 <__reset+0xfb104830>
81124880:	003ff406 	br	81124854 <__reset+0xfb104854>
81124884:	313ff236 	bltu	r6,r4,81124850 <__reset+0xfb104850>
81124888:	21bffc36 	bltu	r4,r6,8112487c <__reset+0xfb10487c>
8112488c:	0005883a 	mov	r2,zero
81124890:	f800283a 	ret

81124894 <__ledf2>:
81124894:	2804d53a 	srli	r2,r5,20
81124898:	3810d53a 	srli	r8,r7,20
8112489c:	00c00434 	movhi	r3,16
811248a0:	18ffffc4 	addi	r3,r3,-1
811248a4:	1081ffcc 	andi	r2,r2,2047
811248a8:	0241ffc4 	movi	r9,2047
811248ac:	28d4703a 	and	r10,r5,r3
811248b0:	4201ffcc 	andi	r8,r8,2047
811248b4:	38c6703a 	and	r3,r7,r3
811248b8:	280ad7fa 	srli	r5,r5,31
811248bc:	380ed7fa 	srli	r7,r7,31
811248c0:	12401f26 	beq	r2,r9,81124940 <__ledf2+0xac>
811248c4:	0241ffc4 	movi	r9,2047
811248c8:	42401426 	beq	r8,r9,8112491c <__ledf2+0x88>
811248cc:	1000091e 	bne	r2,zero,811248f4 <__ledf2+0x60>
811248d0:	2296b03a 	or	r11,r4,r10
811248d4:	5813003a 	cmpeq	r9,r11,zero
811248d8:	29403fcc 	andi	r5,r5,255
811248dc:	40000a1e 	bne	r8,zero,81124908 <__ledf2+0x74>
811248e0:	30d8b03a 	or	r12,r6,r3
811248e4:	6000081e 	bne	r12,zero,81124908 <__ledf2+0x74>
811248e8:	0005883a 	mov	r2,zero
811248ec:	5800111e 	bne	r11,zero,81124934 <__ledf2+0xa0>
811248f0:	f800283a 	ret
811248f4:	29403fcc 	andi	r5,r5,255
811248f8:	40000c1e 	bne	r8,zero,8112492c <__ledf2+0x98>
811248fc:	30d2b03a 	or	r9,r6,r3
81124900:	48000c26 	beq	r9,zero,81124934 <__ledf2+0xa0>
81124904:	0013883a 	mov	r9,zero
81124908:	39c03fcc 	andi	r7,r7,255
8112490c:	48000826 	beq	r9,zero,81124930 <__ledf2+0x9c>
81124910:	38001126 	beq	r7,zero,81124958 <__ledf2+0xc4>
81124914:	00800044 	movi	r2,1
81124918:	f800283a 	ret
8112491c:	30d2b03a 	or	r9,r6,r3
81124920:	483fea26 	beq	r9,zero,811248cc <__reset+0xfb1048cc>
81124924:	00800084 	movi	r2,2
81124928:	f800283a 	ret
8112492c:	39c03fcc 	andi	r7,r7,255
81124930:	39400726 	beq	r7,r5,81124950 <__ledf2+0xbc>
81124934:	2800081e 	bne	r5,zero,81124958 <__ledf2+0xc4>
81124938:	00800044 	movi	r2,1
8112493c:	f800283a 	ret
81124940:	2292b03a 	or	r9,r4,r10
81124944:	483fdf26 	beq	r9,zero,811248c4 <__reset+0xfb1048c4>
81124948:	00800084 	movi	r2,2
8112494c:	f800283a 	ret
81124950:	4080030e 	bge	r8,r2,81124960 <__ledf2+0xcc>
81124954:	383fef26 	beq	r7,zero,81124914 <__reset+0xfb104914>
81124958:	00bfffc4 	movi	r2,-1
8112495c:	f800283a 	ret
81124960:	123feb16 	blt	r2,r8,81124910 <__reset+0xfb104910>
81124964:	1abff336 	bltu	r3,r10,81124934 <__reset+0xfb104934>
81124968:	50c00326 	beq	r10,r3,81124978 <__ledf2+0xe4>
8112496c:	50c0042e 	bgeu	r10,r3,81124980 <__ledf2+0xec>
81124970:	283fe81e 	bne	r5,zero,81124914 <__reset+0xfb104914>
81124974:	003ff806 	br	81124958 <__reset+0xfb104958>
81124978:	313fee36 	bltu	r6,r4,81124934 <__reset+0xfb104934>
8112497c:	21bffc36 	bltu	r4,r6,81124970 <__reset+0xfb104970>
81124980:	0005883a 	mov	r2,zero
81124984:	f800283a 	ret

81124988 <__subdf3>:
81124988:	02000434 	movhi	r8,16
8112498c:	423fffc4 	addi	r8,r8,-1
81124990:	defffb04 	addi	sp,sp,-20
81124994:	2a14703a 	and	r10,r5,r8
81124998:	3812d53a 	srli	r9,r7,20
8112499c:	3a10703a 	and	r8,r7,r8
811249a0:	de00012e 	bgeu	sp,et,811249a8 <__subdf3+0x20>
811249a4:	003b68fa 	trap	3
811249a8:	2006d77a 	srli	r3,r4,29
811249ac:	3004d77a 	srli	r2,r6,29
811249b0:	dc000015 	stw	r16,0(sp)
811249b4:	501490fa 	slli	r10,r10,3
811249b8:	2820d53a 	srli	r16,r5,20
811249bc:	401090fa 	slli	r8,r8,3
811249c0:	dc800215 	stw	r18,8(sp)
811249c4:	dc400115 	stw	r17,4(sp)
811249c8:	dfc00415 	stw	ra,16(sp)
811249cc:	202290fa 	slli	r17,r4,3
811249d0:	dcc00315 	stw	r19,12(sp)
811249d4:	4a41ffcc 	andi	r9,r9,2047
811249d8:	0101ffc4 	movi	r4,2047
811249dc:	2824d7fa 	srli	r18,r5,31
811249e0:	8401ffcc 	andi	r16,r16,2047
811249e4:	50c6b03a 	or	r3,r10,r3
811249e8:	380ed7fa 	srli	r7,r7,31
811249ec:	408ab03a 	or	r5,r8,r2
811249f0:	300c90fa 	slli	r6,r6,3
811249f4:	49009626 	beq	r9,r4,81124c50 <__subdf3+0x2c8>
811249f8:	39c0005c 	xori	r7,r7,1
811249fc:	8245c83a 	sub	r2,r16,r9
81124a00:	3c807426 	beq	r7,r18,81124bd4 <__subdf3+0x24c>
81124a04:	0080af0e 	bge	zero,r2,81124cc4 <__subdf3+0x33c>
81124a08:	48002a1e 	bne	r9,zero,81124ab4 <__subdf3+0x12c>
81124a0c:	2988b03a 	or	r4,r5,r6
81124a10:	20009a1e 	bne	r4,zero,81124c7c <__subdf3+0x2f4>
81124a14:	888001cc 	andi	r2,r17,7
81124a18:	10000726 	beq	r2,zero,81124a38 <__subdf3+0xb0>
81124a1c:	888003cc 	andi	r2,r17,15
81124a20:	01000104 	movi	r4,4
81124a24:	11000426 	beq	r2,r4,81124a38 <__subdf3+0xb0>
81124a28:	890b883a 	add	r5,r17,r4
81124a2c:	2c63803a 	cmpltu	r17,r5,r17
81124a30:	1c47883a 	add	r3,r3,r17
81124a34:	2823883a 	mov	r17,r5
81124a38:	1880202c 	andhi	r2,r3,128
81124a3c:	10005926 	beq	r2,zero,81124ba4 <__subdf3+0x21c>
81124a40:	84000044 	addi	r16,r16,1
81124a44:	0081ffc4 	movi	r2,2047
81124a48:	8080be26 	beq	r16,r2,81124d44 <__subdf3+0x3bc>
81124a4c:	017fe034 	movhi	r5,65408
81124a50:	297fffc4 	addi	r5,r5,-1
81124a54:	1946703a 	and	r3,r3,r5
81124a58:	1804977a 	slli	r2,r3,29
81124a5c:	1806927a 	slli	r3,r3,9
81124a60:	8822d0fa 	srli	r17,r17,3
81124a64:	8401ffcc 	andi	r16,r16,2047
81124a68:	180ad33a 	srli	r5,r3,12
81124a6c:	9100004c 	andi	r4,r18,1
81124a70:	1444b03a 	or	r2,r2,r17
81124a74:	80c1ffcc 	andi	r3,r16,2047
81124a78:	1820953a 	slli	r16,r3,20
81124a7c:	20c03fcc 	andi	r3,r4,255
81124a80:	180897fa 	slli	r4,r3,31
81124a84:	00c00434 	movhi	r3,16
81124a88:	18ffffc4 	addi	r3,r3,-1
81124a8c:	28c6703a 	and	r3,r5,r3
81124a90:	1c06b03a 	or	r3,r3,r16
81124a94:	1906b03a 	or	r3,r3,r4
81124a98:	dfc00417 	ldw	ra,16(sp)
81124a9c:	dcc00317 	ldw	r19,12(sp)
81124aa0:	dc800217 	ldw	r18,8(sp)
81124aa4:	dc400117 	ldw	r17,4(sp)
81124aa8:	dc000017 	ldw	r16,0(sp)
81124aac:	dec00504 	addi	sp,sp,20
81124ab0:	f800283a 	ret
81124ab4:	0101ffc4 	movi	r4,2047
81124ab8:	813fd626 	beq	r16,r4,81124a14 <__reset+0xfb104a14>
81124abc:	29402034 	orhi	r5,r5,128
81124ac0:	01000e04 	movi	r4,56
81124ac4:	2080a316 	blt	r4,r2,81124d54 <__subdf3+0x3cc>
81124ac8:	010007c4 	movi	r4,31
81124acc:	2080c616 	blt	r4,r2,81124de8 <__subdf3+0x460>
81124ad0:	01000804 	movi	r4,32
81124ad4:	2089c83a 	sub	r4,r4,r2
81124ad8:	2910983a 	sll	r8,r5,r4
81124adc:	308ed83a 	srl	r7,r6,r2
81124ae0:	3108983a 	sll	r4,r6,r4
81124ae4:	2884d83a 	srl	r2,r5,r2
81124ae8:	41ccb03a 	or	r6,r8,r7
81124aec:	2008c03a 	cmpne	r4,r4,zero
81124af0:	310cb03a 	or	r6,r6,r4
81124af4:	898dc83a 	sub	r6,r17,r6
81124af8:	89a3803a 	cmpltu	r17,r17,r6
81124afc:	1887c83a 	sub	r3,r3,r2
81124b00:	1c47c83a 	sub	r3,r3,r17
81124b04:	3023883a 	mov	r17,r6
81124b08:	1880202c 	andhi	r2,r3,128
81124b0c:	10002326 	beq	r2,zero,81124b9c <__subdf3+0x214>
81124b10:	04c02034 	movhi	r19,128
81124b14:	9cffffc4 	addi	r19,r19,-1
81124b18:	1ce6703a 	and	r19,r3,r19
81124b1c:	98007a26 	beq	r19,zero,81124d08 <__subdf3+0x380>
81124b20:	9809883a 	mov	r4,r19
81124b24:	110fce80 	call	8110fce8 <__clzsi2>
81124b28:	113ffe04 	addi	r4,r2,-8
81124b2c:	00c007c4 	movi	r3,31
81124b30:	19007b16 	blt	r3,r4,81124d20 <__subdf3+0x398>
81124b34:	00800804 	movi	r2,32
81124b38:	1105c83a 	sub	r2,r2,r4
81124b3c:	8884d83a 	srl	r2,r17,r2
81124b40:	9906983a 	sll	r3,r19,r4
81124b44:	8922983a 	sll	r17,r17,r4
81124b48:	10c4b03a 	or	r2,r2,r3
81124b4c:	24007816 	blt	r4,r16,81124d30 <__subdf3+0x3a8>
81124b50:	2421c83a 	sub	r16,r4,r16
81124b54:	80c00044 	addi	r3,r16,1
81124b58:	010007c4 	movi	r4,31
81124b5c:	20c09516 	blt	r4,r3,81124db4 <__subdf3+0x42c>
81124b60:	01400804 	movi	r5,32
81124b64:	28cbc83a 	sub	r5,r5,r3
81124b68:	88c8d83a 	srl	r4,r17,r3
81124b6c:	8962983a 	sll	r17,r17,r5
81124b70:	114a983a 	sll	r5,r2,r5
81124b74:	10c6d83a 	srl	r3,r2,r3
81124b78:	8804c03a 	cmpne	r2,r17,zero
81124b7c:	290ab03a 	or	r5,r5,r4
81124b80:	28a2b03a 	or	r17,r5,r2
81124b84:	0021883a 	mov	r16,zero
81124b88:	003fa206 	br	81124a14 <__reset+0xfb104a14>
81124b8c:	2090b03a 	or	r8,r4,r2
81124b90:	40018e26 	beq	r8,zero,811251cc <__subdf3+0x844>
81124b94:	1007883a 	mov	r3,r2
81124b98:	2023883a 	mov	r17,r4
81124b9c:	888001cc 	andi	r2,r17,7
81124ba0:	103f9e1e 	bne	r2,zero,81124a1c <__reset+0xfb104a1c>
81124ba4:	1804977a 	slli	r2,r3,29
81124ba8:	8822d0fa 	srli	r17,r17,3
81124bac:	1810d0fa 	srli	r8,r3,3
81124bb0:	9100004c 	andi	r4,r18,1
81124bb4:	1444b03a 	or	r2,r2,r17
81124bb8:	00c1ffc4 	movi	r3,2047
81124bbc:	80c02826 	beq	r16,r3,81124c60 <__subdf3+0x2d8>
81124bc0:	01400434 	movhi	r5,16
81124bc4:	297fffc4 	addi	r5,r5,-1
81124bc8:	80e0703a 	and	r16,r16,r3
81124bcc:	414a703a 	and	r5,r8,r5
81124bd0:	003fa806 	br	81124a74 <__reset+0xfb104a74>
81124bd4:	0080630e 	bge	zero,r2,81124d64 <__subdf3+0x3dc>
81124bd8:	48003026 	beq	r9,zero,81124c9c <__subdf3+0x314>
81124bdc:	0101ffc4 	movi	r4,2047
81124be0:	813f8c26 	beq	r16,r4,81124a14 <__reset+0xfb104a14>
81124be4:	29402034 	orhi	r5,r5,128
81124be8:	01000e04 	movi	r4,56
81124bec:	2080a90e 	bge	r4,r2,81124e94 <__subdf3+0x50c>
81124bf0:	298cb03a 	or	r6,r5,r6
81124bf4:	3012c03a 	cmpne	r9,r6,zero
81124bf8:	0005883a 	mov	r2,zero
81124bfc:	4c53883a 	add	r9,r9,r17
81124c00:	4c63803a 	cmpltu	r17,r9,r17
81124c04:	10c7883a 	add	r3,r2,r3
81124c08:	88c7883a 	add	r3,r17,r3
81124c0c:	4823883a 	mov	r17,r9
81124c10:	1880202c 	andhi	r2,r3,128
81124c14:	1000d026 	beq	r2,zero,81124f58 <__subdf3+0x5d0>
81124c18:	84000044 	addi	r16,r16,1
81124c1c:	0081ffc4 	movi	r2,2047
81124c20:	8080fe26 	beq	r16,r2,8112501c <__subdf3+0x694>
81124c24:	00bfe034 	movhi	r2,65408
81124c28:	10bfffc4 	addi	r2,r2,-1
81124c2c:	1886703a 	and	r3,r3,r2
81124c30:	880ad07a 	srli	r5,r17,1
81124c34:	180497fa 	slli	r2,r3,31
81124c38:	8900004c 	andi	r4,r17,1
81124c3c:	2922b03a 	or	r17,r5,r4
81124c40:	1806d07a 	srli	r3,r3,1
81124c44:	1462b03a 	or	r17,r2,r17
81124c48:	3825883a 	mov	r18,r7
81124c4c:	003f7106 	br	81124a14 <__reset+0xfb104a14>
81124c50:	2984b03a 	or	r2,r5,r6
81124c54:	103f6826 	beq	r2,zero,811249f8 <__reset+0xfb1049f8>
81124c58:	39c03fcc 	andi	r7,r7,255
81124c5c:	003f6706 	br	811249fc <__reset+0xfb1049fc>
81124c60:	4086b03a 	or	r3,r8,r2
81124c64:	18015226 	beq	r3,zero,811251b0 <__subdf3+0x828>
81124c68:	00c00434 	movhi	r3,16
81124c6c:	41400234 	orhi	r5,r8,8
81124c70:	18ffffc4 	addi	r3,r3,-1
81124c74:	28ca703a 	and	r5,r5,r3
81124c78:	003f7e06 	br	81124a74 <__reset+0xfb104a74>
81124c7c:	10bfffc4 	addi	r2,r2,-1
81124c80:	1000491e 	bne	r2,zero,81124da8 <__subdf3+0x420>
81124c84:	898fc83a 	sub	r7,r17,r6
81124c88:	89e3803a 	cmpltu	r17,r17,r7
81124c8c:	1947c83a 	sub	r3,r3,r5
81124c90:	1c47c83a 	sub	r3,r3,r17
81124c94:	3823883a 	mov	r17,r7
81124c98:	003f9b06 	br	81124b08 <__reset+0xfb104b08>
81124c9c:	2988b03a 	or	r4,r5,r6
81124ca0:	203f5c26 	beq	r4,zero,81124a14 <__reset+0xfb104a14>
81124ca4:	10bfffc4 	addi	r2,r2,-1
81124ca8:	1000931e 	bne	r2,zero,81124ef8 <__subdf3+0x570>
81124cac:	898d883a 	add	r6,r17,r6
81124cb0:	3463803a 	cmpltu	r17,r6,r17
81124cb4:	1947883a 	add	r3,r3,r5
81124cb8:	88c7883a 	add	r3,r17,r3
81124cbc:	3023883a 	mov	r17,r6
81124cc0:	003fd306 	br	81124c10 <__reset+0xfb104c10>
81124cc4:	1000541e 	bne	r2,zero,81124e18 <__subdf3+0x490>
81124cc8:	80800044 	addi	r2,r16,1
81124ccc:	1081ffcc 	andi	r2,r2,2047
81124cd0:	01000044 	movi	r4,1
81124cd4:	2080a20e 	bge	r4,r2,81124f60 <__subdf3+0x5d8>
81124cd8:	8989c83a 	sub	r4,r17,r6
81124cdc:	8905803a 	cmpltu	r2,r17,r4
81124ce0:	1967c83a 	sub	r19,r3,r5
81124ce4:	98a7c83a 	sub	r19,r19,r2
81124ce8:	9880202c 	andhi	r2,r19,128
81124cec:	10006326 	beq	r2,zero,81124e7c <__subdf3+0x4f4>
81124cf0:	3463c83a 	sub	r17,r6,r17
81124cf4:	28c7c83a 	sub	r3,r5,r3
81124cf8:	344d803a 	cmpltu	r6,r6,r17
81124cfc:	19a7c83a 	sub	r19,r3,r6
81124d00:	3825883a 	mov	r18,r7
81124d04:	983f861e 	bne	r19,zero,81124b20 <__reset+0xfb104b20>
81124d08:	8809883a 	mov	r4,r17
81124d0c:	110fce80 	call	8110fce8 <__clzsi2>
81124d10:	10800804 	addi	r2,r2,32
81124d14:	113ffe04 	addi	r4,r2,-8
81124d18:	00c007c4 	movi	r3,31
81124d1c:	193f850e 	bge	r3,r4,81124b34 <__reset+0xfb104b34>
81124d20:	10bff604 	addi	r2,r2,-40
81124d24:	8884983a 	sll	r2,r17,r2
81124d28:	0023883a 	mov	r17,zero
81124d2c:	243f880e 	bge	r4,r16,81124b50 <__reset+0xfb104b50>
81124d30:	00ffe034 	movhi	r3,65408
81124d34:	18ffffc4 	addi	r3,r3,-1
81124d38:	8121c83a 	sub	r16,r16,r4
81124d3c:	10c6703a 	and	r3,r2,r3
81124d40:	003f3406 	br	81124a14 <__reset+0xfb104a14>
81124d44:	9100004c 	andi	r4,r18,1
81124d48:	000b883a 	mov	r5,zero
81124d4c:	0005883a 	mov	r2,zero
81124d50:	003f4806 	br	81124a74 <__reset+0xfb104a74>
81124d54:	298cb03a 	or	r6,r5,r6
81124d58:	300cc03a 	cmpne	r6,r6,zero
81124d5c:	0005883a 	mov	r2,zero
81124d60:	003f6406 	br	81124af4 <__reset+0xfb104af4>
81124d64:	10009a1e 	bne	r2,zero,81124fd0 <__subdf3+0x648>
81124d68:	82400044 	addi	r9,r16,1
81124d6c:	4881ffcc 	andi	r2,r9,2047
81124d70:	02800044 	movi	r10,1
81124d74:	5080670e 	bge	r10,r2,81124f14 <__subdf3+0x58c>
81124d78:	0081ffc4 	movi	r2,2047
81124d7c:	4880af26 	beq	r9,r2,8112503c <__subdf3+0x6b4>
81124d80:	898d883a 	add	r6,r17,r6
81124d84:	1945883a 	add	r2,r3,r5
81124d88:	3447803a 	cmpltu	r3,r6,r17
81124d8c:	1887883a 	add	r3,r3,r2
81124d90:	182297fa 	slli	r17,r3,31
81124d94:	300cd07a 	srli	r6,r6,1
81124d98:	1806d07a 	srli	r3,r3,1
81124d9c:	4821883a 	mov	r16,r9
81124da0:	89a2b03a 	or	r17,r17,r6
81124da4:	003f1b06 	br	81124a14 <__reset+0xfb104a14>
81124da8:	0101ffc4 	movi	r4,2047
81124dac:	813f441e 	bne	r16,r4,81124ac0 <__reset+0xfb104ac0>
81124db0:	003f1806 	br	81124a14 <__reset+0xfb104a14>
81124db4:	843ff844 	addi	r16,r16,-31
81124db8:	01400804 	movi	r5,32
81124dbc:	1408d83a 	srl	r4,r2,r16
81124dc0:	19405026 	beq	r3,r5,81124f04 <__subdf3+0x57c>
81124dc4:	01401004 	movi	r5,64
81124dc8:	28c7c83a 	sub	r3,r5,r3
81124dcc:	10c4983a 	sll	r2,r2,r3
81124dd0:	88a2b03a 	or	r17,r17,r2
81124dd4:	8822c03a 	cmpne	r17,r17,zero
81124dd8:	2462b03a 	or	r17,r4,r17
81124ddc:	0007883a 	mov	r3,zero
81124de0:	0021883a 	mov	r16,zero
81124de4:	003f6d06 	br	81124b9c <__reset+0xfb104b9c>
81124de8:	11fff804 	addi	r7,r2,-32
81124dec:	01000804 	movi	r4,32
81124df0:	29ced83a 	srl	r7,r5,r7
81124df4:	11004526 	beq	r2,r4,81124f0c <__subdf3+0x584>
81124df8:	01001004 	movi	r4,64
81124dfc:	2089c83a 	sub	r4,r4,r2
81124e00:	2904983a 	sll	r2,r5,r4
81124e04:	118cb03a 	or	r6,r2,r6
81124e08:	300cc03a 	cmpne	r6,r6,zero
81124e0c:	398cb03a 	or	r6,r7,r6
81124e10:	0005883a 	mov	r2,zero
81124e14:	003f3706 	br	81124af4 <__reset+0xfb104af4>
81124e18:	80002a26 	beq	r16,zero,81124ec4 <__subdf3+0x53c>
81124e1c:	0101ffc4 	movi	r4,2047
81124e20:	49006626 	beq	r9,r4,81124fbc <__subdf3+0x634>
81124e24:	0085c83a 	sub	r2,zero,r2
81124e28:	18c02034 	orhi	r3,r3,128
81124e2c:	01000e04 	movi	r4,56
81124e30:	20807e16 	blt	r4,r2,8112502c <__subdf3+0x6a4>
81124e34:	010007c4 	movi	r4,31
81124e38:	2080e716 	blt	r4,r2,811251d8 <__subdf3+0x850>
81124e3c:	01000804 	movi	r4,32
81124e40:	2089c83a 	sub	r4,r4,r2
81124e44:	1914983a 	sll	r10,r3,r4
81124e48:	8890d83a 	srl	r8,r17,r2
81124e4c:	8908983a 	sll	r4,r17,r4
81124e50:	1884d83a 	srl	r2,r3,r2
81124e54:	5222b03a 	or	r17,r10,r8
81124e58:	2006c03a 	cmpne	r3,r4,zero
81124e5c:	88e2b03a 	or	r17,r17,r3
81124e60:	3463c83a 	sub	r17,r6,r17
81124e64:	2885c83a 	sub	r2,r5,r2
81124e68:	344d803a 	cmpltu	r6,r6,r17
81124e6c:	1187c83a 	sub	r3,r2,r6
81124e70:	4821883a 	mov	r16,r9
81124e74:	3825883a 	mov	r18,r7
81124e78:	003f2306 	br	81124b08 <__reset+0xfb104b08>
81124e7c:	24d0b03a 	or	r8,r4,r19
81124e80:	40001b1e 	bne	r8,zero,81124ef0 <__subdf3+0x568>
81124e84:	0005883a 	mov	r2,zero
81124e88:	0009883a 	mov	r4,zero
81124e8c:	0021883a 	mov	r16,zero
81124e90:	003f4906 	br	81124bb8 <__reset+0xfb104bb8>
81124e94:	010007c4 	movi	r4,31
81124e98:	20803a16 	blt	r4,r2,81124f84 <__subdf3+0x5fc>
81124e9c:	01000804 	movi	r4,32
81124ea0:	2089c83a 	sub	r4,r4,r2
81124ea4:	2912983a 	sll	r9,r5,r4
81124ea8:	3090d83a 	srl	r8,r6,r2
81124eac:	3108983a 	sll	r4,r6,r4
81124eb0:	2884d83a 	srl	r2,r5,r2
81124eb4:	4a12b03a 	or	r9,r9,r8
81124eb8:	2008c03a 	cmpne	r4,r4,zero
81124ebc:	4912b03a 	or	r9,r9,r4
81124ec0:	003f4e06 	br	81124bfc <__reset+0xfb104bfc>
81124ec4:	1c48b03a 	or	r4,r3,r17
81124ec8:	20003c26 	beq	r4,zero,81124fbc <__subdf3+0x634>
81124ecc:	0084303a 	nor	r2,zero,r2
81124ed0:	1000381e 	bne	r2,zero,81124fb4 <__subdf3+0x62c>
81124ed4:	3463c83a 	sub	r17,r6,r17
81124ed8:	28c5c83a 	sub	r2,r5,r3
81124edc:	344d803a 	cmpltu	r6,r6,r17
81124ee0:	1187c83a 	sub	r3,r2,r6
81124ee4:	4821883a 	mov	r16,r9
81124ee8:	3825883a 	mov	r18,r7
81124eec:	003f0606 	br	81124b08 <__reset+0xfb104b08>
81124ef0:	2023883a 	mov	r17,r4
81124ef4:	003f0906 	br	81124b1c <__reset+0xfb104b1c>
81124ef8:	0101ffc4 	movi	r4,2047
81124efc:	813f3a1e 	bne	r16,r4,81124be8 <__reset+0xfb104be8>
81124f00:	003ec406 	br	81124a14 <__reset+0xfb104a14>
81124f04:	0005883a 	mov	r2,zero
81124f08:	003fb106 	br	81124dd0 <__reset+0xfb104dd0>
81124f0c:	0005883a 	mov	r2,zero
81124f10:	003fbc06 	br	81124e04 <__reset+0xfb104e04>
81124f14:	1c44b03a 	or	r2,r3,r17
81124f18:	80008e1e 	bne	r16,zero,81125154 <__subdf3+0x7cc>
81124f1c:	1000c826 	beq	r2,zero,81125240 <__subdf3+0x8b8>
81124f20:	2984b03a 	or	r2,r5,r6
81124f24:	103ebb26 	beq	r2,zero,81124a14 <__reset+0xfb104a14>
81124f28:	8989883a 	add	r4,r17,r6
81124f2c:	1945883a 	add	r2,r3,r5
81124f30:	2447803a 	cmpltu	r3,r4,r17
81124f34:	1887883a 	add	r3,r3,r2
81124f38:	1880202c 	andhi	r2,r3,128
81124f3c:	2023883a 	mov	r17,r4
81124f40:	103f1626 	beq	r2,zero,81124b9c <__reset+0xfb104b9c>
81124f44:	00bfe034 	movhi	r2,65408
81124f48:	10bfffc4 	addi	r2,r2,-1
81124f4c:	5021883a 	mov	r16,r10
81124f50:	1886703a 	and	r3,r3,r2
81124f54:	003eaf06 	br	81124a14 <__reset+0xfb104a14>
81124f58:	3825883a 	mov	r18,r7
81124f5c:	003f0f06 	br	81124b9c <__reset+0xfb104b9c>
81124f60:	1c44b03a 	or	r2,r3,r17
81124f64:	8000251e 	bne	r16,zero,81124ffc <__subdf3+0x674>
81124f68:	1000661e 	bne	r2,zero,81125104 <__subdf3+0x77c>
81124f6c:	2990b03a 	or	r8,r5,r6
81124f70:	40009626 	beq	r8,zero,811251cc <__subdf3+0x844>
81124f74:	2807883a 	mov	r3,r5
81124f78:	3023883a 	mov	r17,r6
81124f7c:	3825883a 	mov	r18,r7
81124f80:	003ea406 	br	81124a14 <__reset+0xfb104a14>
81124f84:	127ff804 	addi	r9,r2,-32
81124f88:	01000804 	movi	r4,32
81124f8c:	2a52d83a 	srl	r9,r5,r9
81124f90:	11008c26 	beq	r2,r4,811251c4 <__subdf3+0x83c>
81124f94:	01001004 	movi	r4,64
81124f98:	2085c83a 	sub	r2,r4,r2
81124f9c:	2884983a 	sll	r2,r5,r2
81124fa0:	118cb03a 	or	r6,r2,r6
81124fa4:	300cc03a 	cmpne	r6,r6,zero
81124fa8:	4992b03a 	or	r9,r9,r6
81124fac:	0005883a 	mov	r2,zero
81124fb0:	003f1206 	br	81124bfc <__reset+0xfb104bfc>
81124fb4:	0101ffc4 	movi	r4,2047
81124fb8:	493f9c1e 	bne	r9,r4,81124e2c <__reset+0xfb104e2c>
81124fbc:	2807883a 	mov	r3,r5
81124fc0:	3023883a 	mov	r17,r6
81124fc4:	4821883a 	mov	r16,r9
81124fc8:	3825883a 	mov	r18,r7
81124fcc:	003e9106 	br	81124a14 <__reset+0xfb104a14>
81124fd0:	80001f1e 	bne	r16,zero,81125050 <__subdf3+0x6c8>
81124fd4:	1c48b03a 	or	r4,r3,r17
81124fd8:	20005a26 	beq	r4,zero,81125144 <__subdf3+0x7bc>
81124fdc:	0084303a 	nor	r2,zero,r2
81124fe0:	1000561e 	bne	r2,zero,8112513c <__subdf3+0x7b4>
81124fe4:	89a3883a 	add	r17,r17,r6
81124fe8:	1945883a 	add	r2,r3,r5
81124fec:	898d803a 	cmpltu	r6,r17,r6
81124ff0:	3087883a 	add	r3,r6,r2
81124ff4:	4821883a 	mov	r16,r9
81124ff8:	003f0506 	br	81124c10 <__reset+0xfb104c10>
81124ffc:	10002b1e 	bne	r2,zero,811250ac <__subdf3+0x724>
81125000:	2984b03a 	or	r2,r5,r6
81125004:	10008026 	beq	r2,zero,81125208 <__subdf3+0x880>
81125008:	2807883a 	mov	r3,r5
8112500c:	3023883a 	mov	r17,r6
81125010:	3825883a 	mov	r18,r7
81125014:	0401ffc4 	movi	r16,2047
81125018:	003e7e06 	br	81124a14 <__reset+0xfb104a14>
8112501c:	3809883a 	mov	r4,r7
81125020:	0011883a 	mov	r8,zero
81125024:	0005883a 	mov	r2,zero
81125028:	003ee306 	br	81124bb8 <__reset+0xfb104bb8>
8112502c:	1c62b03a 	or	r17,r3,r17
81125030:	8822c03a 	cmpne	r17,r17,zero
81125034:	0005883a 	mov	r2,zero
81125038:	003f8906 	br	81124e60 <__reset+0xfb104e60>
8112503c:	3809883a 	mov	r4,r7
81125040:	4821883a 	mov	r16,r9
81125044:	0011883a 	mov	r8,zero
81125048:	0005883a 	mov	r2,zero
8112504c:	003eda06 	br	81124bb8 <__reset+0xfb104bb8>
81125050:	0101ffc4 	movi	r4,2047
81125054:	49003b26 	beq	r9,r4,81125144 <__subdf3+0x7bc>
81125058:	0085c83a 	sub	r2,zero,r2
8112505c:	18c02034 	orhi	r3,r3,128
81125060:	01000e04 	movi	r4,56
81125064:	20806e16 	blt	r4,r2,81125220 <__subdf3+0x898>
81125068:	010007c4 	movi	r4,31
8112506c:	20807716 	blt	r4,r2,8112524c <__subdf3+0x8c4>
81125070:	01000804 	movi	r4,32
81125074:	2089c83a 	sub	r4,r4,r2
81125078:	1914983a 	sll	r10,r3,r4
8112507c:	8890d83a 	srl	r8,r17,r2
81125080:	8908983a 	sll	r4,r17,r4
81125084:	1884d83a 	srl	r2,r3,r2
81125088:	5222b03a 	or	r17,r10,r8
8112508c:	2006c03a 	cmpne	r3,r4,zero
81125090:	88e2b03a 	or	r17,r17,r3
81125094:	89a3883a 	add	r17,r17,r6
81125098:	1145883a 	add	r2,r2,r5
8112509c:	898d803a 	cmpltu	r6,r17,r6
811250a0:	3087883a 	add	r3,r6,r2
811250a4:	4821883a 	mov	r16,r9
811250a8:	003ed906 	br	81124c10 <__reset+0xfb104c10>
811250ac:	2984b03a 	or	r2,r5,r6
811250b0:	10004226 	beq	r2,zero,811251bc <__subdf3+0x834>
811250b4:	1808d0fa 	srli	r4,r3,3
811250b8:	8822d0fa 	srli	r17,r17,3
811250bc:	1806977a 	slli	r3,r3,29
811250c0:	2080022c 	andhi	r2,r4,8
811250c4:	1c62b03a 	or	r17,r3,r17
811250c8:	10000826 	beq	r2,zero,811250ec <__subdf3+0x764>
811250cc:	2812d0fa 	srli	r9,r5,3
811250d0:	4880022c 	andhi	r2,r9,8
811250d4:	1000051e 	bne	r2,zero,811250ec <__subdf3+0x764>
811250d8:	300cd0fa 	srli	r6,r6,3
811250dc:	2804977a 	slli	r2,r5,29
811250e0:	4809883a 	mov	r4,r9
811250e4:	3825883a 	mov	r18,r7
811250e8:	11a2b03a 	or	r17,r2,r6
811250ec:	8806d77a 	srli	r3,r17,29
811250f0:	200890fa 	slli	r4,r4,3
811250f4:	882290fa 	slli	r17,r17,3
811250f8:	0401ffc4 	movi	r16,2047
811250fc:	1906b03a 	or	r3,r3,r4
81125100:	003e4406 	br	81124a14 <__reset+0xfb104a14>
81125104:	2984b03a 	or	r2,r5,r6
81125108:	103e4226 	beq	r2,zero,81124a14 <__reset+0xfb104a14>
8112510c:	8989c83a 	sub	r4,r17,r6
81125110:	8911803a 	cmpltu	r8,r17,r4
81125114:	1945c83a 	sub	r2,r3,r5
81125118:	1205c83a 	sub	r2,r2,r8
8112511c:	1200202c 	andhi	r8,r2,128
81125120:	403e9a26 	beq	r8,zero,81124b8c <__reset+0xfb104b8c>
81125124:	3463c83a 	sub	r17,r6,r17
81125128:	28c5c83a 	sub	r2,r5,r3
8112512c:	344d803a 	cmpltu	r6,r6,r17
81125130:	1187c83a 	sub	r3,r2,r6
81125134:	3825883a 	mov	r18,r7
81125138:	003e3606 	br	81124a14 <__reset+0xfb104a14>
8112513c:	0101ffc4 	movi	r4,2047
81125140:	493fc71e 	bne	r9,r4,81125060 <__reset+0xfb105060>
81125144:	2807883a 	mov	r3,r5
81125148:	3023883a 	mov	r17,r6
8112514c:	4821883a 	mov	r16,r9
81125150:	003e3006 	br	81124a14 <__reset+0xfb104a14>
81125154:	10003626 	beq	r2,zero,81125230 <__subdf3+0x8a8>
81125158:	2984b03a 	or	r2,r5,r6
8112515c:	10001726 	beq	r2,zero,811251bc <__subdf3+0x834>
81125160:	1808d0fa 	srli	r4,r3,3
81125164:	8822d0fa 	srli	r17,r17,3
81125168:	1806977a 	slli	r3,r3,29
8112516c:	2080022c 	andhi	r2,r4,8
81125170:	1c62b03a 	or	r17,r3,r17
81125174:	10000726 	beq	r2,zero,81125194 <__subdf3+0x80c>
81125178:	2812d0fa 	srli	r9,r5,3
8112517c:	4880022c 	andhi	r2,r9,8
81125180:	1000041e 	bne	r2,zero,81125194 <__subdf3+0x80c>
81125184:	300cd0fa 	srli	r6,r6,3
81125188:	2804977a 	slli	r2,r5,29
8112518c:	4809883a 	mov	r4,r9
81125190:	11a2b03a 	or	r17,r2,r6
81125194:	8806d77a 	srli	r3,r17,29
81125198:	200890fa 	slli	r4,r4,3
8112519c:	882290fa 	slli	r17,r17,3
811251a0:	3825883a 	mov	r18,r7
811251a4:	1906b03a 	or	r3,r3,r4
811251a8:	0401ffc4 	movi	r16,2047
811251ac:	003e1906 	br	81124a14 <__reset+0xfb104a14>
811251b0:	000b883a 	mov	r5,zero
811251b4:	0005883a 	mov	r2,zero
811251b8:	003e2e06 	br	81124a74 <__reset+0xfb104a74>
811251bc:	0401ffc4 	movi	r16,2047
811251c0:	003e1406 	br	81124a14 <__reset+0xfb104a14>
811251c4:	0005883a 	mov	r2,zero
811251c8:	003f7506 	br	81124fa0 <__reset+0xfb104fa0>
811251cc:	0005883a 	mov	r2,zero
811251d0:	0009883a 	mov	r4,zero
811251d4:	003e7806 	br	81124bb8 <__reset+0xfb104bb8>
811251d8:	123ff804 	addi	r8,r2,-32
811251dc:	01000804 	movi	r4,32
811251e0:	1a10d83a 	srl	r8,r3,r8
811251e4:	11002526 	beq	r2,r4,8112527c <__subdf3+0x8f4>
811251e8:	01001004 	movi	r4,64
811251ec:	2085c83a 	sub	r2,r4,r2
811251f0:	1884983a 	sll	r2,r3,r2
811251f4:	1444b03a 	or	r2,r2,r17
811251f8:	1004c03a 	cmpne	r2,r2,zero
811251fc:	40a2b03a 	or	r17,r8,r2
81125200:	0005883a 	mov	r2,zero
81125204:	003f1606 	br	81124e60 <__reset+0xfb104e60>
81125208:	02000434 	movhi	r8,16
8112520c:	0009883a 	mov	r4,zero
81125210:	423fffc4 	addi	r8,r8,-1
81125214:	00bfffc4 	movi	r2,-1
81125218:	0401ffc4 	movi	r16,2047
8112521c:	003e6606 	br	81124bb8 <__reset+0xfb104bb8>
81125220:	1c62b03a 	or	r17,r3,r17
81125224:	8822c03a 	cmpne	r17,r17,zero
81125228:	0005883a 	mov	r2,zero
8112522c:	003f9906 	br	81125094 <__reset+0xfb105094>
81125230:	2807883a 	mov	r3,r5
81125234:	3023883a 	mov	r17,r6
81125238:	0401ffc4 	movi	r16,2047
8112523c:	003df506 	br	81124a14 <__reset+0xfb104a14>
81125240:	2807883a 	mov	r3,r5
81125244:	3023883a 	mov	r17,r6
81125248:	003df206 	br	81124a14 <__reset+0xfb104a14>
8112524c:	123ff804 	addi	r8,r2,-32
81125250:	01000804 	movi	r4,32
81125254:	1a10d83a 	srl	r8,r3,r8
81125258:	11000a26 	beq	r2,r4,81125284 <__subdf3+0x8fc>
8112525c:	01001004 	movi	r4,64
81125260:	2085c83a 	sub	r2,r4,r2
81125264:	1884983a 	sll	r2,r3,r2
81125268:	1444b03a 	or	r2,r2,r17
8112526c:	1004c03a 	cmpne	r2,r2,zero
81125270:	40a2b03a 	or	r17,r8,r2
81125274:	0005883a 	mov	r2,zero
81125278:	003f8606 	br	81125094 <__reset+0xfb105094>
8112527c:	0005883a 	mov	r2,zero
81125280:	003fdc06 	br	811251f4 <__reset+0xfb1051f4>
81125284:	0005883a 	mov	r2,zero
81125288:	003ff706 	br	81125268 <__reset+0xfb105268>

8112528c <__fixdfsi>:
8112528c:	280cd53a 	srli	r6,r5,20
81125290:	00c00434 	movhi	r3,16
81125294:	18ffffc4 	addi	r3,r3,-1
81125298:	3181ffcc 	andi	r6,r6,2047
8112529c:	01c0ff84 	movi	r7,1022
811252a0:	28c6703a 	and	r3,r5,r3
811252a4:	280ad7fa 	srli	r5,r5,31
811252a8:	3980120e 	bge	r7,r6,811252f4 <__fixdfsi+0x68>
811252ac:	00810744 	movi	r2,1053
811252b0:	11800c16 	blt	r2,r6,811252e4 <__fixdfsi+0x58>
811252b4:	00810cc4 	movi	r2,1075
811252b8:	1185c83a 	sub	r2,r2,r6
811252bc:	01c007c4 	movi	r7,31
811252c0:	18c00434 	orhi	r3,r3,16
811252c4:	38800d16 	blt	r7,r2,811252fc <__fixdfsi+0x70>
811252c8:	31befb44 	addi	r6,r6,-1043
811252cc:	2084d83a 	srl	r2,r4,r2
811252d0:	1986983a 	sll	r3,r3,r6
811252d4:	1884b03a 	or	r2,r3,r2
811252d8:	28000726 	beq	r5,zero,811252f8 <__fixdfsi+0x6c>
811252dc:	0085c83a 	sub	r2,zero,r2
811252e0:	f800283a 	ret
811252e4:	00a00034 	movhi	r2,32768
811252e8:	10bfffc4 	addi	r2,r2,-1
811252ec:	2885883a 	add	r2,r5,r2
811252f0:	f800283a 	ret
811252f4:	0005883a 	mov	r2,zero
811252f8:	f800283a 	ret
811252fc:	008104c4 	movi	r2,1043
81125300:	1185c83a 	sub	r2,r2,r6
81125304:	1884d83a 	srl	r2,r3,r2
81125308:	003ff306 	br	811252d8 <__reset+0xfb1052d8>

8112530c <__floatsidf>:
8112530c:	defffd04 	addi	sp,sp,-12
81125310:	de00012e 	bgeu	sp,et,81125318 <__floatsidf+0xc>
81125314:	003b68fa 	trap	3
81125318:	dfc00215 	stw	ra,8(sp)
8112531c:	dc400115 	stw	r17,4(sp)
81125320:	dc000015 	stw	r16,0(sp)
81125324:	20002b26 	beq	r4,zero,811253d4 <__floatsidf+0xc8>
81125328:	2023883a 	mov	r17,r4
8112532c:	2020d7fa 	srli	r16,r4,31
81125330:	20002d16 	blt	r4,zero,811253e8 <__floatsidf+0xdc>
81125334:	8809883a 	mov	r4,r17
81125338:	110fce80 	call	8110fce8 <__clzsi2>
8112533c:	01410784 	movi	r5,1054
81125340:	288bc83a 	sub	r5,r5,r2
81125344:	01010cc4 	movi	r4,1075
81125348:	2149c83a 	sub	r4,r4,r5
8112534c:	00c007c4 	movi	r3,31
81125350:	1900160e 	bge	r3,r4,811253ac <__floatsidf+0xa0>
81125354:	00c104c4 	movi	r3,1043
81125358:	1947c83a 	sub	r3,r3,r5
8112535c:	88c6983a 	sll	r3,r17,r3
81125360:	00800434 	movhi	r2,16
81125364:	10bfffc4 	addi	r2,r2,-1
81125368:	1886703a 	and	r3,r3,r2
8112536c:	2941ffcc 	andi	r5,r5,2047
81125370:	800d883a 	mov	r6,r16
81125374:	0005883a 	mov	r2,zero
81125378:	280a953a 	slli	r5,r5,20
8112537c:	31803fcc 	andi	r6,r6,255
81125380:	01000434 	movhi	r4,16
81125384:	300c97fa 	slli	r6,r6,31
81125388:	213fffc4 	addi	r4,r4,-1
8112538c:	1906703a 	and	r3,r3,r4
81125390:	1946b03a 	or	r3,r3,r5
81125394:	1986b03a 	or	r3,r3,r6
81125398:	dfc00217 	ldw	ra,8(sp)
8112539c:	dc400117 	ldw	r17,4(sp)
811253a0:	dc000017 	ldw	r16,0(sp)
811253a4:	dec00304 	addi	sp,sp,12
811253a8:	f800283a 	ret
811253ac:	00c002c4 	movi	r3,11
811253b0:	1887c83a 	sub	r3,r3,r2
811253b4:	88c6d83a 	srl	r3,r17,r3
811253b8:	8904983a 	sll	r2,r17,r4
811253bc:	01000434 	movhi	r4,16
811253c0:	213fffc4 	addi	r4,r4,-1
811253c4:	2941ffcc 	andi	r5,r5,2047
811253c8:	1906703a 	and	r3,r3,r4
811253cc:	800d883a 	mov	r6,r16
811253d0:	003fe906 	br	81125378 <__reset+0xfb105378>
811253d4:	000d883a 	mov	r6,zero
811253d8:	000b883a 	mov	r5,zero
811253dc:	0007883a 	mov	r3,zero
811253e0:	0005883a 	mov	r2,zero
811253e4:	003fe406 	br	81125378 <__reset+0xfb105378>
811253e8:	0123c83a 	sub	r17,zero,r4
811253ec:	003fd106 	br	81125334 <__reset+0xfb105334>

811253f0 <__floatunsidf>:
811253f0:	defffe04 	addi	sp,sp,-8
811253f4:	de00012e 	bgeu	sp,et,811253fc <__floatunsidf+0xc>
811253f8:	003b68fa 	trap	3
811253fc:	dc000015 	stw	r16,0(sp)
81125400:	dfc00115 	stw	ra,4(sp)
81125404:	2021883a 	mov	r16,r4
81125408:	20002226 	beq	r4,zero,81125494 <__floatunsidf+0xa4>
8112540c:	110fce80 	call	8110fce8 <__clzsi2>
81125410:	01010784 	movi	r4,1054
81125414:	2089c83a 	sub	r4,r4,r2
81125418:	01810cc4 	movi	r6,1075
8112541c:	310dc83a 	sub	r6,r6,r4
81125420:	00c007c4 	movi	r3,31
81125424:	1980120e 	bge	r3,r6,81125470 <__floatunsidf+0x80>
81125428:	00c104c4 	movi	r3,1043
8112542c:	1907c83a 	sub	r3,r3,r4
81125430:	80ca983a 	sll	r5,r16,r3
81125434:	00800434 	movhi	r2,16
81125438:	10bfffc4 	addi	r2,r2,-1
8112543c:	2101ffcc 	andi	r4,r4,2047
81125440:	0021883a 	mov	r16,zero
81125444:	288a703a 	and	r5,r5,r2
81125448:	2008953a 	slli	r4,r4,20
8112544c:	00c00434 	movhi	r3,16
81125450:	18ffffc4 	addi	r3,r3,-1
81125454:	28c6703a 	and	r3,r5,r3
81125458:	8005883a 	mov	r2,r16
8112545c:	1906b03a 	or	r3,r3,r4
81125460:	dfc00117 	ldw	ra,4(sp)
81125464:	dc000017 	ldw	r16,0(sp)
81125468:	dec00204 	addi	sp,sp,8
8112546c:	f800283a 	ret
81125470:	00c002c4 	movi	r3,11
81125474:	188bc83a 	sub	r5,r3,r2
81125478:	814ad83a 	srl	r5,r16,r5
8112547c:	00c00434 	movhi	r3,16
81125480:	18ffffc4 	addi	r3,r3,-1
81125484:	81a0983a 	sll	r16,r16,r6
81125488:	2101ffcc 	andi	r4,r4,2047
8112548c:	28ca703a 	and	r5,r5,r3
81125490:	003fed06 	br	81125448 <__reset+0xfb105448>
81125494:	0009883a 	mov	r4,zero
81125498:	000b883a 	mov	r5,zero
8112549c:	003fea06 	br	81125448 <__reset+0xfb105448>

811254a0 <alt_busy_sleep>:
811254a0:	defffb04 	addi	sp,sp,-20
811254a4:	de00012e 	bgeu	sp,et,811254ac <alt_busy_sleep+0xc>
811254a8:	003b68fa 	trap	3
811254ac:	df000415 	stw	fp,16(sp)
811254b0:	df000404 	addi	fp,sp,16
811254b4:	e13fff15 	stw	r4,-4(fp)
811254b8:	008000c4 	movi	r2,3
811254bc:	e0bffd15 	stw	r2,-12(fp)
811254c0:	e0fffd17 	ldw	r3,-12(fp)
811254c4:	008003f4 	movhi	r2,15
811254c8:	10909004 	addi	r2,r2,16960
811254cc:	1887383a 	mul	r3,r3,r2
811254d0:	00817db4 	movhi	r2,1526
811254d4:	10b84004 	addi	r2,r2,-7936
811254d8:	10c7203a 	divu	r3,r2,r3
811254dc:	00a00034 	movhi	r2,32768
811254e0:	10bfffc4 	addi	r2,r2,-1
811254e4:	10c5203a 	divu	r2,r2,r3
811254e8:	e0ffff17 	ldw	r3,-4(fp)
811254ec:	1885203a 	divu	r2,r3,r2
811254f0:	e0bffe15 	stw	r2,-8(fp)
811254f4:	e0bffe17 	ldw	r2,-8(fp)
811254f8:	10002526 	beq	r2,zero,81125590 <alt_busy_sleep+0xf0>
811254fc:	e03ffc15 	stw	zero,-16(fp)
81125500:	00001406 	br	81125554 <alt_busy_sleep+0xb4>
81125504:	00a00034 	movhi	r2,32768
81125508:	10bfffc4 	addi	r2,r2,-1
8112550c:	10bfffc4 	addi	r2,r2,-1
81125510:	103ffe1e 	bne	r2,zero,8112550c <__reset+0xfb10550c>
81125514:	e0fffd17 	ldw	r3,-12(fp)
81125518:	008003f4 	movhi	r2,15
8112551c:	10909004 	addi	r2,r2,16960
81125520:	1887383a 	mul	r3,r3,r2
81125524:	00817db4 	movhi	r2,1526
81125528:	10b84004 	addi	r2,r2,-7936
8112552c:	10c7203a 	divu	r3,r2,r3
81125530:	00a00034 	movhi	r2,32768
81125534:	10bfffc4 	addi	r2,r2,-1
81125538:	10c5203a 	divu	r2,r2,r3
8112553c:	e0ffff17 	ldw	r3,-4(fp)
81125540:	1885c83a 	sub	r2,r3,r2
81125544:	e0bfff15 	stw	r2,-4(fp)
81125548:	e0bffc17 	ldw	r2,-16(fp)
8112554c:	10800044 	addi	r2,r2,1
81125550:	e0bffc15 	stw	r2,-16(fp)
81125554:	e0fffc17 	ldw	r3,-16(fp)
81125558:	e0bffe17 	ldw	r2,-8(fp)
8112555c:	18bfe916 	blt	r3,r2,81125504 <__reset+0xfb105504>
81125560:	e0fffd17 	ldw	r3,-12(fp)
81125564:	008003f4 	movhi	r2,15
81125568:	10909004 	addi	r2,r2,16960
8112556c:	1887383a 	mul	r3,r3,r2
81125570:	00817db4 	movhi	r2,1526
81125574:	10b84004 	addi	r2,r2,-7936
81125578:	10c7203a 	divu	r3,r2,r3
8112557c:	e0bfff17 	ldw	r2,-4(fp)
81125580:	1885383a 	mul	r2,r3,r2
81125584:	10bfffc4 	addi	r2,r2,-1
81125588:	103ffe1e 	bne	r2,zero,81125584 <__reset+0xfb105584>
8112558c:	00000b06 	br	811255bc <alt_busy_sleep+0x11c>
81125590:	e0fffd17 	ldw	r3,-12(fp)
81125594:	008003f4 	movhi	r2,15
81125598:	10909004 	addi	r2,r2,16960
8112559c:	1887383a 	mul	r3,r3,r2
811255a0:	00817db4 	movhi	r2,1526
811255a4:	10b84004 	addi	r2,r2,-7936
811255a8:	10c7203a 	divu	r3,r2,r3
811255ac:	e0bfff17 	ldw	r2,-4(fp)
811255b0:	1885383a 	mul	r2,r3,r2
811255b4:	10bfffc4 	addi	r2,r2,-1
811255b8:	00bffe16 	blt	zero,r2,811255b4 <__reset+0xfb1055b4>
811255bc:	0005883a 	mov	r2,zero
811255c0:	e037883a 	mov	sp,fp
811255c4:	df000017 	ldw	fp,0(sp)
811255c8:	dec00104 	addi	sp,sp,4
811255cc:	f800283a 	ret

811255d0 <alt_get_errno>:
811255d0:	defffe04 	addi	sp,sp,-8
811255d4:	de00012e 	bgeu	sp,et,811255dc <alt_get_errno+0xc>
811255d8:	003b68fa 	trap	3
811255dc:	dfc00115 	stw	ra,4(sp)
811255e0:	df000015 	stw	fp,0(sp)
811255e4:	d839883a 	mov	fp,sp
811255e8:	d0a01017 	ldw	r2,-32704(gp)
811255ec:	10000326 	beq	r2,zero,811255fc <alt_get_errno+0x2c>
811255f0:	d0a01017 	ldw	r2,-32704(gp)
811255f4:	103ee83a 	callr	r2
811255f8:	00000106 	br	81125600 <alt_get_errno+0x30>
811255fc:	d0a05e04 	addi	r2,gp,-32392
81125600:	e037883a 	mov	sp,fp
81125604:	dfc00117 	ldw	ra,4(sp)
81125608:	df000017 	ldw	fp,0(sp)
8112560c:	dec00204 	addi	sp,sp,8
81125610:	f800283a 	ret

81125614 <close>:
81125614:	defffb04 	addi	sp,sp,-20
81125618:	de00012e 	bgeu	sp,et,81125620 <close+0xc>
8112561c:	003b68fa 	trap	3
81125620:	dfc00415 	stw	ra,16(sp)
81125624:	df000315 	stw	fp,12(sp)
81125628:	df000304 	addi	fp,sp,12
8112562c:	e13fff15 	stw	r4,-4(fp)
81125630:	e0bfff17 	ldw	r2,-4(fp)
81125634:	10000616 	blt	r2,zero,81125650 <close+0x3c>
81125638:	e0bfff17 	ldw	r2,-4(fp)
8112563c:	10c00324 	muli	r3,r2,12
81125640:	00a04534 	movhi	r2,33044
81125644:	10b53604 	addi	r2,r2,-11048
81125648:	1885883a 	add	r2,r3,r2
8112564c:	00000106 	br	81125654 <close+0x40>
81125650:	0005883a 	mov	r2,zero
81125654:	e0bffd15 	stw	r2,-12(fp)
81125658:	e0bffd17 	ldw	r2,-12(fp)
8112565c:	10001926 	beq	r2,zero,811256c4 <close+0xb0>
81125660:	e0bffd17 	ldw	r2,-12(fp)
81125664:	10800017 	ldw	r2,0(r2)
81125668:	10800417 	ldw	r2,16(r2)
8112566c:	10000626 	beq	r2,zero,81125688 <close+0x74>
81125670:	e0bffd17 	ldw	r2,-12(fp)
81125674:	10800017 	ldw	r2,0(r2)
81125678:	10800417 	ldw	r2,16(r2)
8112567c:	e13ffd17 	ldw	r4,-12(fp)
81125680:	103ee83a 	callr	r2
81125684:	00000106 	br	8112568c <close+0x78>
81125688:	0005883a 	mov	r2,zero
8112568c:	e0bffe15 	stw	r2,-8(fp)
81125690:	e13fff17 	ldw	r4,-4(fp)
81125694:	11260540 	call	81126054 <alt_release_fd>
81125698:	e0bffe17 	ldw	r2,-8(fp)
8112569c:	1000070e 	bge	r2,zero,811256bc <close+0xa8>
811256a0:	11255d00 	call	811255d0 <alt_get_errno>
811256a4:	1007883a 	mov	r3,r2
811256a8:	e0bffe17 	ldw	r2,-8(fp)
811256ac:	0085c83a 	sub	r2,zero,r2
811256b0:	18800015 	stw	r2,0(r3)
811256b4:	00bfffc4 	movi	r2,-1
811256b8:	00000706 	br	811256d8 <close+0xc4>
811256bc:	0005883a 	mov	r2,zero
811256c0:	00000506 	br	811256d8 <close+0xc4>
811256c4:	11255d00 	call	811255d0 <alt_get_errno>
811256c8:	1007883a 	mov	r3,r2
811256cc:	00801444 	movi	r2,81
811256d0:	18800015 	stw	r2,0(r3)
811256d4:	00bfffc4 	movi	r2,-1
811256d8:	e037883a 	mov	sp,fp
811256dc:	dfc00117 	ldw	ra,4(sp)
811256e0:	df000017 	ldw	fp,0(sp)
811256e4:	dec00204 	addi	sp,sp,8
811256e8:	f800283a 	ret

811256ec <alt_dcache_flush_all>:
811256ec:	deffff04 	addi	sp,sp,-4
811256f0:	de00012e 	bgeu	sp,et,811256f8 <alt_dcache_flush_all+0xc>
811256f4:	003b68fa 	trap	3
811256f8:	df000015 	stw	fp,0(sp)
811256fc:	d839883a 	mov	fp,sp
81125700:	0001883a 	nop
81125704:	e037883a 	mov	sp,fp
81125708:	df000017 	ldw	fp,0(sp)
8112570c:	dec00104 	addi	sp,sp,4
81125710:	f800283a 	ret

81125714 <alt_dev_null_write>:
81125714:	defffc04 	addi	sp,sp,-16
81125718:	de00012e 	bgeu	sp,et,81125720 <alt_dev_null_write+0xc>
8112571c:	003b68fa 	trap	3
81125720:	df000315 	stw	fp,12(sp)
81125724:	df000304 	addi	fp,sp,12
81125728:	e13ffd15 	stw	r4,-12(fp)
8112572c:	e17ffe15 	stw	r5,-8(fp)
81125730:	e1bfff15 	stw	r6,-4(fp)
81125734:	e0bfff17 	ldw	r2,-4(fp)
81125738:	e037883a 	mov	sp,fp
8112573c:	df000017 	ldw	fp,0(sp)
81125740:	dec00104 	addi	sp,sp,4
81125744:	f800283a 	ret

81125748 <alt_get_errno>:
81125748:	defffe04 	addi	sp,sp,-8
8112574c:	de00012e 	bgeu	sp,et,81125754 <alt_get_errno+0xc>
81125750:	003b68fa 	trap	3
81125754:	dfc00115 	stw	ra,4(sp)
81125758:	df000015 	stw	fp,0(sp)
8112575c:	d839883a 	mov	fp,sp
81125760:	d0a01017 	ldw	r2,-32704(gp)
81125764:	10000326 	beq	r2,zero,81125774 <alt_get_errno+0x2c>
81125768:	d0a01017 	ldw	r2,-32704(gp)
8112576c:	103ee83a 	callr	r2
81125770:	00000106 	br	81125778 <alt_get_errno+0x30>
81125774:	d0a05e04 	addi	r2,gp,-32392
81125778:	e037883a 	mov	sp,fp
8112577c:	dfc00117 	ldw	ra,4(sp)
81125780:	df000017 	ldw	fp,0(sp)
81125784:	dec00204 	addi	sp,sp,8
81125788:	f800283a 	ret

8112578c <fstat>:
8112578c:	defffb04 	addi	sp,sp,-20
81125790:	de00012e 	bgeu	sp,et,81125798 <fstat+0xc>
81125794:	003b68fa 	trap	3
81125798:	dfc00415 	stw	ra,16(sp)
8112579c:	df000315 	stw	fp,12(sp)
811257a0:	df000304 	addi	fp,sp,12
811257a4:	e13ffe15 	stw	r4,-8(fp)
811257a8:	e17fff15 	stw	r5,-4(fp)
811257ac:	e0bffe17 	ldw	r2,-8(fp)
811257b0:	10000616 	blt	r2,zero,811257cc <fstat+0x40>
811257b4:	e0bffe17 	ldw	r2,-8(fp)
811257b8:	10c00324 	muli	r3,r2,12
811257bc:	00a04534 	movhi	r2,33044
811257c0:	10b53604 	addi	r2,r2,-11048
811257c4:	1885883a 	add	r2,r3,r2
811257c8:	00000106 	br	811257d0 <fstat+0x44>
811257cc:	0005883a 	mov	r2,zero
811257d0:	e0bffd15 	stw	r2,-12(fp)
811257d4:	e0bffd17 	ldw	r2,-12(fp)
811257d8:	10001026 	beq	r2,zero,8112581c <fstat+0x90>
811257dc:	e0bffd17 	ldw	r2,-12(fp)
811257e0:	10800017 	ldw	r2,0(r2)
811257e4:	10800817 	ldw	r2,32(r2)
811257e8:	10000726 	beq	r2,zero,81125808 <fstat+0x7c>
811257ec:	e0bffd17 	ldw	r2,-12(fp)
811257f0:	10800017 	ldw	r2,0(r2)
811257f4:	10800817 	ldw	r2,32(r2)
811257f8:	e17fff17 	ldw	r5,-4(fp)
811257fc:	e13ffd17 	ldw	r4,-12(fp)
81125800:	103ee83a 	callr	r2
81125804:	00000a06 	br	81125830 <fstat+0xa4>
81125808:	e0bfff17 	ldw	r2,-4(fp)
8112580c:	00c80004 	movi	r3,8192
81125810:	10c00115 	stw	r3,4(r2)
81125814:	0005883a 	mov	r2,zero
81125818:	00000506 	br	81125830 <fstat+0xa4>
8112581c:	11257480 	call	81125748 <alt_get_errno>
81125820:	1007883a 	mov	r3,r2
81125824:	00801444 	movi	r2,81
81125828:	18800015 	stw	r2,0(r3)
8112582c:	00bfffc4 	movi	r2,-1
81125830:	e037883a 	mov	sp,fp
81125834:	dfc00117 	ldw	ra,4(sp)
81125838:	df000017 	ldw	fp,0(sp)
8112583c:	dec00204 	addi	sp,sp,8
81125840:	f800283a 	ret

81125844 <alt_irq_register>:
81125844:	defff004 	addi	sp,sp,-64
81125848:	de00012e 	bgeu	sp,et,81125850 <alt_irq_register+0xc>
8112584c:	003b68fa 	trap	3
81125850:	df000f15 	stw	fp,60(sp)
81125854:	df000f04 	addi	fp,sp,60
81125858:	e13ffd15 	stw	r4,-12(fp)
8112585c:	e17ffe15 	stw	r5,-8(fp)
81125860:	e1bfff15 	stw	r6,-4(fp)
81125864:	00bffa84 	movi	r2,-22
81125868:	e0bff115 	stw	r2,-60(fp)
8112586c:	e0bffd17 	ldw	r2,-12(fp)
81125870:	10800828 	cmpgeui	r2,r2,32
81125874:	1000501e 	bne	r2,zero,811259b8 <alt_irq_register+0x174>
81125878:	0005303a 	rdctl	r2,status
8112587c:	e0bff615 	stw	r2,-40(fp)
81125880:	e0fff617 	ldw	r3,-40(fp)
81125884:	00bfff84 	movi	r2,-2
81125888:	1884703a 	and	r2,r3,r2
8112588c:	1001703a 	wrctl	status,r2
81125890:	e0bff617 	ldw	r2,-40(fp)
81125894:	e0bff315 	stw	r2,-52(fp)
81125898:	00a04574 	movhi	r2,33045
8112589c:	10896404 	addi	r2,r2,9616
811258a0:	e0fffd17 	ldw	r3,-12(fp)
811258a4:	180690fa 	slli	r3,r3,3
811258a8:	10c5883a 	add	r2,r2,r3
811258ac:	e0ffff17 	ldw	r3,-4(fp)
811258b0:	10c00015 	stw	r3,0(r2)
811258b4:	00a04574 	movhi	r2,33045
811258b8:	10896404 	addi	r2,r2,9616
811258bc:	e0fffd17 	ldw	r3,-12(fp)
811258c0:	180690fa 	slli	r3,r3,3
811258c4:	10c5883a 	add	r2,r2,r3
811258c8:	10800104 	addi	r2,r2,4
811258cc:	e0fffe17 	ldw	r3,-8(fp)
811258d0:	10c00015 	stw	r3,0(r2)
811258d4:	e0bfff17 	ldw	r2,-4(fp)
811258d8:	10001926 	beq	r2,zero,81125940 <alt_irq_register+0xfc>
811258dc:	e0bffd17 	ldw	r2,-12(fp)
811258e0:	e0bff215 	stw	r2,-56(fp)
811258e4:	0005303a 	rdctl	r2,status
811258e8:	e0bff715 	stw	r2,-36(fp)
811258ec:	e0fff717 	ldw	r3,-36(fp)
811258f0:	00bfff84 	movi	r2,-2
811258f4:	1884703a 	and	r2,r3,r2
811258f8:	1001703a 	wrctl	status,r2
811258fc:	e0bff717 	ldw	r2,-36(fp)
81125900:	e0bff815 	stw	r2,-32(fp)
81125904:	00c00044 	movi	r3,1
81125908:	e0bff217 	ldw	r2,-56(fp)
8112590c:	1884983a 	sll	r2,r3,r2
81125910:	1007883a 	mov	r3,r2
81125914:	d0a06617 	ldw	r2,-32360(gp)
81125918:	1884b03a 	or	r2,r3,r2
8112591c:	d0a06615 	stw	r2,-32360(gp)
81125920:	d0a06617 	ldw	r2,-32360(gp)
81125924:	100170fa 	wrctl	ienable,r2
81125928:	e0bff817 	ldw	r2,-32(fp)
8112592c:	e0bff915 	stw	r2,-28(fp)
81125930:	e0bff917 	ldw	r2,-28(fp)
81125934:	1001703a 	wrctl	status,r2
81125938:	0005883a 	mov	r2,zero
8112593c:	00001906 	br	811259a4 <alt_irq_register+0x160>
81125940:	e0bffd17 	ldw	r2,-12(fp)
81125944:	e0bff415 	stw	r2,-48(fp)
81125948:	0005303a 	rdctl	r2,status
8112594c:	e0bffa15 	stw	r2,-24(fp)
81125950:	e0fffa17 	ldw	r3,-24(fp)
81125954:	00bfff84 	movi	r2,-2
81125958:	1884703a 	and	r2,r3,r2
8112595c:	1001703a 	wrctl	status,r2
81125960:	e0bffa17 	ldw	r2,-24(fp)
81125964:	e0bffb15 	stw	r2,-20(fp)
81125968:	00c00044 	movi	r3,1
8112596c:	e0bff417 	ldw	r2,-48(fp)
81125970:	1884983a 	sll	r2,r3,r2
81125974:	0084303a 	nor	r2,zero,r2
81125978:	1007883a 	mov	r3,r2
8112597c:	d0a06617 	ldw	r2,-32360(gp)
81125980:	1884703a 	and	r2,r3,r2
81125984:	d0a06615 	stw	r2,-32360(gp)
81125988:	d0a06617 	ldw	r2,-32360(gp)
8112598c:	100170fa 	wrctl	ienable,r2
81125990:	e0bffb17 	ldw	r2,-20(fp)
81125994:	e0bffc15 	stw	r2,-16(fp)
81125998:	e0bffc17 	ldw	r2,-16(fp)
8112599c:	1001703a 	wrctl	status,r2
811259a0:	0005883a 	mov	r2,zero
811259a4:	e0bff115 	stw	r2,-60(fp)
811259a8:	e0bff317 	ldw	r2,-52(fp)
811259ac:	e0bff515 	stw	r2,-44(fp)
811259b0:	e0bff517 	ldw	r2,-44(fp)
811259b4:	1001703a 	wrctl	status,r2
811259b8:	e0bff117 	ldw	r2,-60(fp)
811259bc:	e037883a 	mov	sp,fp
811259c0:	df000017 	ldw	fp,0(sp)
811259c4:	dec00104 	addi	sp,sp,4
811259c8:	f800283a 	ret

811259cc <alt_get_errno>:
811259cc:	defffe04 	addi	sp,sp,-8
811259d0:	de00012e 	bgeu	sp,et,811259d8 <alt_get_errno+0xc>
811259d4:	003b68fa 	trap	3
811259d8:	dfc00115 	stw	ra,4(sp)
811259dc:	df000015 	stw	fp,0(sp)
811259e0:	d839883a 	mov	fp,sp
811259e4:	d0a01017 	ldw	r2,-32704(gp)
811259e8:	10000326 	beq	r2,zero,811259f8 <alt_get_errno+0x2c>
811259ec:	d0a01017 	ldw	r2,-32704(gp)
811259f0:	103ee83a 	callr	r2
811259f4:	00000106 	br	811259fc <alt_get_errno+0x30>
811259f8:	d0a05e04 	addi	r2,gp,-32392
811259fc:	e037883a 	mov	sp,fp
81125a00:	dfc00117 	ldw	ra,4(sp)
81125a04:	df000017 	ldw	fp,0(sp)
81125a08:	dec00204 	addi	sp,sp,8
81125a0c:	f800283a 	ret

81125a10 <isatty>:
81125a10:	deffed04 	addi	sp,sp,-76
81125a14:	de00012e 	bgeu	sp,et,81125a1c <isatty+0xc>
81125a18:	003b68fa 	trap	3
81125a1c:	dfc01215 	stw	ra,72(sp)
81125a20:	df001115 	stw	fp,68(sp)
81125a24:	df001104 	addi	fp,sp,68
81125a28:	e13fff15 	stw	r4,-4(fp)
81125a2c:	e0bfff17 	ldw	r2,-4(fp)
81125a30:	10000616 	blt	r2,zero,81125a4c <isatty+0x3c>
81125a34:	e0bfff17 	ldw	r2,-4(fp)
81125a38:	10c00324 	muli	r3,r2,12
81125a3c:	00a04534 	movhi	r2,33044
81125a40:	10b53604 	addi	r2,r2,-11048
81125a44:	1885883a 	add	r2,r3,r2
81125a48:	00000106 	br	81125a50 <isatty+0x40>
81125a4c:	0005883a 	mov	r2,zero
81125a50:	e0bfef15 	stw	r2,-68(fp)
81125a54:	e0bfef17 	ldw	r2,-68(fp)
81125a58:	10000e26 	beq	r2,zero,81125a94 <isatty+0x84>
81125a5c:	e0bfef17 	ldw	r2,-68(fp)
81125a60:	10800017 	ldw	r2,0(r2)
81125a64:	10800817 	ldw	r2,32(r2)
81125a68:	1000021e 	bne	r2,zero,81125a74 <isatty+0x64>
81125a6c:	00800044 	movi	r2,1
81125a70:	00000d06 	br	81125aa8 <isatty+0x98>
81125a74:	e0bff004 	addi	r2,fp,-64
81125a78:	100b883a 	mov	r5,r2
81125a7c:	e13fff17 	ldw	r4,-4(fp)
81125a80:	112578c0 	call	8112578c <fstat>
81125a84:	e0bff117 	ldw	r2,-60(fp)
81125a88:	10880020 	cmpeqi	r2,r2,8192
81125a8c:	10803fcc 	andi	r2,r2,255
81125a90:	00000506 	br	81125aa8 <isatty+0x98>
81125a94:	11259cc0 	call	811259cc <alt_get_errno>
81125a98:	1007883a 	mov	r3,r2
81125a9c:	00801444 	movi	r2,81
81125aa0:	18800015 	stw	r2,0(r3)
81125aa4:	0005883a 	mov	r2,zero
81125aa8:	e037883a 	mov	sp,fp
81125aac:	dfc00117 	ldw	ra,4(sp)
81125ab0:	df000017 	ldw	fp,0(sp)
81125ab4:	dec00204 	addi	sp,sp,8
81125ab8:	f800283a 	ret

81125abc <alt_get_errno>:
81125abc:	defffe04 	addi	sp,sp,-8
81125ac0:	de00012e 	bgeu	sp,et,81125ac8 <alt_get_errno+0xc>
81125ac4:	003b68fa 	trap	3
81125ac8:	dfc00115 	stw	ra,4(sp)
81125acc:	df000015 	stw	fp,0(sp)
81125ad0:	d839883a 	mov	fp,sp
81125ad4:	d0a01017 	ldw	r2,-32704(gp)
81125ad8:	10000326 	beq	r2,zero,81125ae8 <alt_get_errno+0x2c>
81125adc:	d0a01017 	ldw	r2,-32704(gp)
81125ae0:	103ee83a 	callr	r2
81125ae4:	00000106 	br	81125aec <alt_get_errno+0x30>
81125ae8:	d0a05e04 	addi	r2,gp,-32392
81125aec:	e037883a 	mov	sp,fp
81125af0:	dfc00117 	ldw	ra,4(sp)
81125af4:	df000017 	ldw	fp,0(sp)
81125af8:	dec00204 	addi	sp,sp,8
81125afc:	f800283a 	ret

81125b00 <lseek>:
81125b00:	defff904 	addi	sp,sp,-28
81125b04:	de00012e 	bgeu	sp,et,81125b0c <lseek+0xc>
81125b08:	003b68fa 	trap	3
81125b0c:	dfc00615 	stw	ra,24(sp)
81125b10:	df000515 	stw	fp,20(sp)
81125b14:	df000504 	addi	fp,sp,20
81125b18:	e13ffd15 	stw	r4,-12(fp)
81125b1c:	e17ffe15 	stw	r5,-8(fp)
81125b20:	e1bfff15 	stw	r6,-4(fp)
81125b24:	e03ffb15 	stw	zero,-20(fp)
81125b28:	e0bffd17 	ldw	r2,-12(fp)
81125b2c:	10000616 	blt	r2,zero,81125b48 <lseek+0x48>
81125b30:	e0bffd17 	ldw	r2,-12(fp)
81125b34:	10c00324 	muli	r3,r2,12
81125b38:	00a04534 	movhi	r2,33044
81125b3c:	10b53604 	addi	r2,r2,-11048
81125b40:	1885883a 	add	r2,r3,r2
81125b44:	00000106 	br	81125b4c <lseek+0x4c>
81125b48:	0005883a 	mov	r2,zero
81125b4c:	e0bffc15 	stw	r2,-16(fp)
81125b50:	e0bffc17 	ldw	r2,-16(fp)
81125b54:	10001026 	beq	r2,zero,81125b98 <lseek+0x98>
81125b58:	e0bffc17 	ldw	r2,-16(fp)
81125b5c:	10800017 	ldw	r2,0(r2)
81125b60:	10800717 	ldw	r2,28(r2)
81125b64:	10000926 	beq	r2,zero,81125b8c <lseek+0x8c>
81125b68:	e0bffc17 	ldw	r2,-16(fp)
81125b6c:	10800017 	ldw	r2,0(r2)
81125b70:	10800717 	ldw	r2,28(r2)
81125b74:	e1bfff17 	ldw	r6,-4(fp)
81125b78:	e17ffe17 	ldw	r5,-8(fp)
81125b7c:	e13ffc17 	ldw	r4,-16(fp)
81125b80:	103ee83a 	callr	r2
81125b84:	e0bffb15 	stw	r2,-20(fp)
81125b88:	00000506 	br	81125ba0 <lseek+0xa0>
81125b8c:	00bfde84 	movi	r2,-134
81125b90:	e0bffb15 	stw	r2,-20(fp)
81125b94:	00000206 	br	81125ba0 <lseek+0xa0>
81125b98:	00bfebc4 	movi	r2,-81
81125b9c:	e0bffb15 	stw	r2,-20(fp)
81125ba0:	e0bffb17 	ldw	r2,-20(fp)
81125ba4:	1000070e 	bge	r2,zero,81125bc4 <lseek+0xc4>
81125ba8:	1125abc0 	call	81125abc <alt_get_errno>
81125bac:	1007883a 	mov	r3,r2
81125bb0:	e0bffb17 	ldw	r2,-20(fp)
81125bb4:	0085c83a 	sub	r2,zero,r2
81125bb8:	18800015 	stw	r2,0(r3)
81125bbc:	00bfffc4 	movi	r2,-1
81125bc0:	e0bffb15 	stw	r2,-20(fp)
81125bc4:	e0bffb17 	ldw	r2,-20(fp)
81125bc8:	e037883a 	mov	sp,fp
81125bcc:	dfc00117 	ldw	ra,4(sp)
81125bd0:	df000017 	ldw	fp,0(sp)
81125bd4:	dec00204 	addi	sp,sp,8
81125bd8:	f800283a 	ret

81125bdc <alt_main>:
81125bdc:	defff904 	addi	sp,sp,-28
81125be0:	de00012e 	bgeu	sp,et,81125be8 <alt_main+0xc>
81125be4:	003b68fa 	trap	3
81125be8:	dfc00615 	stw	ra,24(sp)
81125bec:	df000515 	stw	fp,20(sp)
81125bf0:	df000504 	addi	fp,sp,20
81125bf4:	0009883a 	mov	r4,zero
81125bf8:	11307140 	call	81130714 <alt_irq_init>
81125bfc:	11271a80 	call	811271a8 <OSInit>
81125c00:	01000044 	movi	r4,1
81125c04:	112cec40 	call	8112cec4 <OSSemCreate>
81125c08:	d0a06d15 	stw	r2,-32332(gp)
81125c0c:	01000044 	movi	r4,1
81125c10:	112cec40 	call	8112cec4 <OSSemCreate>
81125c14:	d0a06f15 	stw	r2,-32324(gp)
81125c18:	d0a06504 	addi	r2,gp,-32364
81125c1c:	e0bffc15 	stw	r2,-16(fp)
81125c20:	00800044 	movi	r2,1
81125c24:	e0bffd0d 	sth	r2,-12(fp)
81125c28:	e0bffd0b 	ldhu	r2,-12(fp)
81125c2c:	1009883a 	mov	r4,r2
81125c30:	112cec40 	call	8112cec4 <OSSemCreate>
81125c34:	1007883a 	mov	r3,r2
81125c38:	e0bffc17 	ldw	r2,-16(fp)
81125c3c:	10c00015 	stw	r3,0(r2)
81125c40:	11307540 	call	81130754 <alt_sys_init>
81125c44:	01a04534 	movhi	r6,33044
81125c48:	31b20304 	addi	r6,r6,-14324
81125c4c:	01604534 	movhi	r5,33044
81125c50:	29720804 	addi	r5,r5,-14304
81125c54:	01204534 	movhi	r4,33044
81125c58:	21320804 	addi	r4,r4,-14304
81125c5c:	11390800 	call	81139080 <alt_io_redirect>
81125c60:	11389900 	call	81138990 <_do_ctors>
81125c64:	01204534 	movhi	r4,33044
81125c68:	21227e04 	addi	r4,r4,-30216
81125c6c:	11398340 	call	81139834 <atexit>
81125c70:	d0a06717 	ldw	r2,-32356(gp)
81125c74:	d0e06817 	ldw	r3,-32352(gp)
81125c78:	d1206917 	ldw	r4,-32348(gp)
81125c7c:	200d883a 	mov	r6,r4
81125c80:	180b883a 	mov	r5,r3
81125c84:	1009883a 	mov	r4,r2
81125c88:	110ae640 	call	8110ae64 <main>
81125c8c:	e0bffb15 	stw	r2,-20(fp)
81125c90:	01000044 	movi	r4,1
81125c94:	11256140 	call	81125614 <close>
81125c98:	e13ffb17 	ldw	r4,-20(fp)
81125c9c:	11398480 	call	81139848 <exit>

81125ca0 <alt_get_errno>:
81125ca0:	defffe04 	addi	sp,sp,-8
81125ca4:	de00012e 	bgeu	sp,et,81125cac <alt_get_errno+0xc>
81125ca8:	003b68fa 	trap	3
81125cac:	dfc00115 	stw	ra,4(sp)
81125cb0:	df000015 	stw	fp,0(sp)
81125cb4:	d839883a 	mov	fp,sp
81125cb8:	d0a01017 	ldw	r2,-32704(gp)
81125cbc:	10000326 	beq	r2,zero,81125ccc <alt_get_errno+0x2c>
81125cc0:	d0a01017 	ldw	r2,-32704(gp)
81125cc4:	103ee83a 	callr	r2
81125cc8:	00000106 	br	81125cd0 <alt_get_errno+0x30>
81125ccc:	d0a05e04 	addi	r2,gp,-32392
81125cd0:	e037883a 	mov	sp,fp
81125cd4:	dfc00117 	ldw	ra,4(sp)
81125cd8:	df000017 	ldw	fp,0(sp)
81125cdc:	dec00204 	addi	sp,sp,8
81125ce0:	f800283a 	ret

81125ce4 <alt_file_locked>:
81125ce4:	defffd04 	addi	sp,sp,-12
81125ce8:	de00012e 	bgeu	sp,et,81125cf0 <alt_file_locked+0xc>
81125cec:	003b68fa 	trap	3
81125cf0:	df000215 	stw	fp,8(sp)
81125cf4:	df000204 	addi	fp,sp,8
81125cf8:	e13fff15 	stw	r4,-4(fp)
81125cfc:	e0bfff17 	ldw	r2,-4(fp)
81125d00:	10800217 	ldw	r2,8(r2)
81125d04:	10d00034 	orhi	r3,r2,16384
81125d08:	e0bfff17 	ldw	r2,-4(fp)
81125d0c:	10c00215 	stw	r3,8(r2)
81125d10:	e03ffe15 	stw	zero,-8(fp)
81125d14:	00001d06 	br	81125d8c <alt_file_locked+0xa8>
81125d18:	00a04534 	movhi	r2,33044
81125d1c:	10b53604 	addi	r2,r2,-11048
81125d20:	e0fffe17 	ldw	r3,-8(fp)
81125d24:	18c00324 	muli	r3,r3,12
81125d28:	10c5883a 	add	r2,r2,r3
81125d2c:	10c00017 	ldw	r3,0(r2)
81125d30:	e0bfff17 	ldw	r2,-4(fp)
81125d34:	10800017 	ldw	r2,0(r2)
81125d38:	1880111e 	bne	r3,r2,81125d80 <alt_file_locked+0x9c>
81125d3c:	00a04534 	movhi	r2,33044
81125d40:	10b53604 	addi	r2,r2,-11048
81125d44:	e0fffe17 	ldw	r3,-8(fp)
81125d48:	18c00324 	muli	r3,r3,12
81125d4c:	10c5883a 	add	r2,r2,r3
81125d50:	10800204 	addi	r2,r2,8
81125d54:	10800017 	ldw	r2,0(r2)
81125d58:	1000090e 	bge	r2,zero,81125d80 <alt_file_locked+0x9c>
81125d5c:	e0bffe17 	ldw	r2,-8(fp)
81125d60:	10c00324 	muli	r3,r2,12
81125d64:	00a04534 	movhi	r2,33044
81125d68:	10b53604 	addi	r2,r2,-11048
81125d6c:	1887883a 	add	r3,r3,r2
81125d70:	e0bfff17 	ldw	r2,-4(fp)
81125d74:	18800226 	beq	r3,r2,81125d80 <alt_file_locked+0x9c>
81125d78:	00bffcc4 	movi	r2,-13
81125d7c:	00000806 	br	81125da0 <alt_file_locked+0xbc>
81125d80:	e0bffe17 	ldw	r2,-8(fp)
81125d84:	10800044 	addi	r2,r2,1
81125d88:	e0bffe15 	stw	r2,-8(fp)
81125d8c:	d0a00f17 	ldw	r2,-32708(gp)
81125d90:	1007883a 	mov	r3,r2
81125d94:	e0bffe17 	ldw	r2,-8(fp)
81125d98:	18bfdf2e 	bgeu	r3,r2,81125d18 <__reset+0xfb105d18>
81125d9c:	0005883a 	mov	r2,zero
81125da0:	e037883a 	mov	sp,fp
81125da4:	df000017 	ldw	fp,0(sp)
81125da8:	dec00104 	addi	sp,sp,4
81125dac:	f800283a 	ret

81125db0 <open>:
81125db0:	defff604 	addi	sp,sp,-40
81125db4:	de00012e 	bgeu	sp,et,81125dbc <open+0xc>
81125db8:	003b68fa 	trap	3
81125dbc:	dfc00915 	stw	ra,36(sp)
81125dc0:	df000815 	stw	fp,32(sp)
81125dc4:	df000804 	addi	fp,sp,32
81125dc8:	e13ffd15 	stw	r4,-12(fp)
81125dcc:	e17ffe15 	stw	r5,-8(fp)
81125dd0:	e1bfff15 	stw	r6,-4(fp)
81125dd4:	00bfffc4 	movi	r2,-1
81125dd8:	e0bff915 	stw	r2,-28(fp)
81125ddc:	00bffb44 	movi	r2,-19
81125de0:	e0bffa15 	stw	r2,-24(fp)
81125de4:	e03ffb15 	stw	zero,-20(fp)
81125de8:	d1600d04 	addi	r5,gp,-32716
81125dec:	e13ffd17 	ldw	r4,-12(fp)
81125df0:	1138a600 	call	81138a60 <alt_find_dev>
81125df4:	e0bff815 	stw	r2,-32(fp)
81125df8:	e0bff817 	ldw	r2,-32(fp)
81125dfc:	1000051e 	bne	r2,zero,81125e14 <open+0x64>
81125e00:	e13ffd17 	ldw	r4,-12(fp)
81125e04:	1138af80 	call	81138af8 <alt_find_file>
81125e08:	e0bff815 	stw	r2,-32(fp)
81125e0c:	00800044 	movi	r2,1
81125e10:	e0bffb15 	stw	r2,-20(fp)
81125e14:	e0bff817 	ldw	r2,-32(fp)
81125e18:	10002926 	beq	r2,zero,81125ec0 <open+0x110>
81125e1c:	e13ff817 	ldw	r4,-32(fp)
81125e20:	1138c080 	call	81138c08 <alt_get_fd>
81125e24:	e0bff915 	stw	r2,-28(fp)
81125e28:	e0bff917 	ldw	r2,-28(fp)
81125e2c:	1000030e 	bge	r2,zero,81125e3c <open+0x8c>
81125e30:	e0bff917 	ldw	r2,-28(fp)
81125e34:	e0bffa15 	stw	r2,-24(fp)
81125e38:	00002306 	br	81125ec8 <open+0x118>
81125e3c:	e0bff917 	ldw	r2,-28(fp)
81125e40:	10c00324 	muli	r3,r2,12
81125e44:	00a04534 	movhi	r2,33044
81125e48:	10b53604 	addi	r2,r2,-11048
81125e4c:	1885883a 	add	r2,r3,r2
81125e50:	e0bffc15 	stw	r2,-16(fp)
81125e54:	e0fffe17 	ldw	r3,-8(fp)
81125e58:	00900034 	movhi	r2,16384
81125e5c:	10bfffc4 	addi	r2,r2,-1
81125e60:	1886703a 	and	r3,r3,r2
81125e64:	e0bffc17 	ldw	r2,-16(fp)
81125e68:	10c00215 	stw	r3,8(r2)
81125e6c:	e0bffb17 	ldw	r2,-20(fp)
81125e70:	1000051e 	bne	r2,zero,81125e88 <open+0xd8>
81125e74:	e13ffc17 	ldw	r4,-16(fp)
81125e78:	1125ce40 	call	81125ce4 <alt_file_locked>
81125e7c:	e0bffa15 	stw	r2,-24(fp)
81125e80:	e0bffa17 	ldw	r2,-24(fp)
81125e84:	10001016 	blt	r2,zero,81125ec8 <open+0x118>
81125e88:	e0bff817 	ldw	r2,-32(fp)
81125e8c:	10800317 	ldw	r2,12(r2)
81125e90:	10000826 	beq	r2,zero,81125eb4 <open+0x104>
81125e94:	e0bff817 	ldw	r2,-32(fp)
81125e98:	10800317 	ldw	r2,12(r2)
81125e9c:	e1ffff17 	ldw	r7,-4(fp)
81125ea0:	e1bffe17 	ldw	r6,-8(fp)
81125ea4:	e17ffd17 	ldw	r5,-12(fp)
81125ea8:	e13ffc17 	ldw	r4,-16(fp)
81125eac:	103ee83a 	callr	r2
81125eb0:	00000106 	br	81125eb8 <open+0x108>
81125eb4:	0005883a 	mov	r2,zero
81125eb8:	e0bffa15 	stw	r2,-24(fp)
81125ebc:	00000206 	br	81125ec8 <open+0x118>
81125ec0:	00bffb44 	movi	r2,-19
81125ec4:	e0bffa15 	stw	r2,-24(fp)
81125ec8:	e0bffa17 	ldw	r2,-24(fp)
81125ecc:	1000090e 	bge	r2,zero,81125ef4 <open+0x144>
81125ed0:	e13ff917 	ldw	r4,-28(fp)
81125ed4:	11260540 	call	81126054 <alt_release_fd>
81125ed8:	1125ca00 	call	81125ca0 <alt_get_errno>
81125edc:	1007883a 	mov	r3,r2
81125ee0:	e0bffa17 	ldw	r2,-24(fp)
81125ee4:	0085c83a 	sub	r2,zero,r2
81125ee8:	18800015 	stw	r2,0(r3)
81125eec:	00bfffc4 	movi	r2,-1
81125ef0:	00000106 	br	81125ef8 <open+0x148>
81125ef4:	e0bff917 	ldw	r2,-28(fp)
81125ef8:	e037883a 	mov	sp,fp
81125efc:	dfc00117 	ldw	ra,4(sp)
81125f00:	df000017 	ldw	fp,0(sp)
81125f04:	dec00204 	addi	sp,sp,8
81125f08:	f800283a 	ret

81125f0c <alt_get_errno>:
81125f0c:	defffe04 	addi	sp,sp,-8
81125f10:	de00012e 	bgeu	sp,et,81125f18 <alt_get_errno+0xc>
81125f14:	003b68fa 	trap	3
81125f18:	dfc00115 	stw	ra,4(sp)
81125f1c:	df000015 	stw	fp,0(sp)
81125f20:	d839883a 	mov	fp,sp
81125f24:	d0a01017 	ldw	r2,-32704(gp)
81125f28:	10000326 	beq	r2,zero,81125f38 <alt_get_errno+0x2c>
81125f2c:	d0a01017 	ldw	r2,-32704(gp)
81125f30:	103ee83a 	callr	r2
81125f34:	00000106 	br	81125f3c <alt_get_errno+0x30>
81125f38:	d0a05e04 	addi	r2,gp,-32392
81125f3c:	e037883a 	mov	sp,fp
81125f40:	dfc00117 	ldw	ra,4(sp)
81125f44:	df000017 	ldw	fp,0(sp)
81125f48:	dec00204 	addi	sp,sp,8
81125f4c:	f800283a 	ret

81125f50 <read>:
81125f50:	defff904 	addi	sp,sp,-28
81125f54:	de00012e 	bgeu	sp,et,81125f5c <read+0xc>
81125f58:	003b68fa 	trap	3
81125f5c:	dfc00615 	stw	ra,24(sp)
81125f60:	df000515 	stw	fp,20(sp)
81125f64:	df000504 	addi	fp,sp,20
81125f68:	e13ffd15 	stw	r4,-12(fp)
81125f6c:	e17ffe15 	stw	r5,-8(fp)
81125f70:	e1bfff15 	stw	r6,-4(fp)
81125f74:	e0bffd17 	ldw	r2,-12(fp)
81125f78:	10000616 	blt	r2,zero,81125f94 <read+0x44>
81125f7c:	e0bffd17 	ldw	r2,-12(fp)
81125f80:	10c00324 	muli	r3,r2,12
81125f84:	00a04534 	movhi	r2,33044
81125f88:	10b53604 	addi	r2,r2,-11048
81125f8c:	1885883a 	add	r2,r3,r2
81125f90:	00000106 	br	81125f98 <read+0x48>
81125f94:	0005883a 	mov	r2,zero
81125f98:	e0bffb15 	stw	r2,-20(fp)
81125f9c:	e0bffb17 	ldw	r2,-20(fp)
81125fa0:	10002226 	beq	r2,zero,8112602c <read+0xdc>
81125fa4:	e0bffb17 	ldw	r2,-20(fp)
81125fa8:	10800217 	ldw	r2,8(r2)
81125fac:	108000cc 	andi	r2,r2,3
81125fb0:	10800060 	cmpeqi	r2,r2,1
81125fb4:	1000181e 	bne	r2,zero,81126018 <read+0xc8>
81125fb8:	e0bffb17 	ldw	r2,-20(fp)
81125fbc:	10800017 	ldw	r2,0(r2)
81125fc0:	10800517 	ldw	r2,20(r2)
81125fc4:	10001426 	beq	r2,zero,81126018 <read+0xc8>
81125fc8:	e0bffb17 	ldw	r2,-20(fp)
81125fcc:	10800017 	ldw	r2,0(r2)
81125fd0:	10800517 	ldw	r2,20(r2)
81125fd4:	e0ffff17 	ldw	r3,-4(fp)
81125fd8:	180d883a 	mov	r6,r3
81125fdc:	e17ffe17 	ldw	r5,-8(fp)
81125fe0:	e13ffb17 	ldw	r4,-20(fp)
81125fe4:	103ee83a 	callr	r2
81125fe8:	e0bffc15 	stw	r2,-16(fp)
81125fec:	e0bffc17 	ldw	r2,-16(fp)
81125ff0:	1000070e 	bge	r2,zero,81126010 <read+0xc0>
81125ff4:	1125f0c0 	call	81125f0c <alt_get_errno>
81125ff8:	1007883a 	mov	r3,r2
81125ffc:	e0bffc17 	ldw	r2,-16(fp)
81126000:	0085c83a 	sub	r2,zero,r2
81126004:	18800015 	stw	r2,0(r3)
81126008:	00bfffc4 	movi	r2,-1
8112600c:	00000c06 	br	81126040 <read+0xf0>
81126010:	e0bffc17 	ldw	r2,-16(fp)
81126014:	00000a06 	br	81126040 <read+0xf0>
81126018:	1125f0c0 	call	81125f0c <alt_get_errno>
8112601c:	1007883a 	mov	r3,r2
81126020:	00800344 	movi	r2,13
81126024:	18800015 	stw	r2,0(r3)
81126028:	00000406 	br	8112603c <read+0xec>
8112602c:	1125f0c0 	call	81125f0c <alt_get_errno>
81126030:	1007883a 	mov	r3,r2
81126034:	00801444 	movi	r2,81
81126038:	18800015 	stw	r2,0(r3)
8112603c:	00bfffc4 	movi	r2,-1
81126040:	e037883a 	mov	sp,fp
81126044:	dfc00117 	ldw	ra,4(sp)
81126048:	df000017 	ldw	fp,0(sp)
8112604c:	dec00204 	addi	sp,sp,8
81126050:	f800283a 	ret

81126054 <alt_release_fd>:
81126054:	defffe04 	addi	sp,sp,-8
81126058:	de00012e 	bgeu	sp,et,81126060 <alt_release_fd+0xc>
8112605c:	003b68fa 	trap	3
81126060:	df000115 	stw	fp,4(sp)
81126064:	df000104 	addi	fp,sp,4
81126068:	e13fff15 	stw	r4,-4(fp)
8112606c:	e0bfff17 	ldw	r2,-4(fp)
81126070:	108000d0 	cmplti	r2,r2,3
81126074:	10000d1e 	bne	r2,zero,811260ac <alt_release_fd+0x58>
81126078:	00a04534 	movhi	r2,33044
8112607c:	10b53604 	addi	r2,r2,-11048
81126080:	e0ffff17 	ldw	r3,-4(fp)
81126084:	18c00324 	muli	r3,r3,12
81126088:	10c5883a 	add	r2,r2,r3
8112608c:	10800204 	addi	r2,r2,8
81126090:	10000015 	stw	zero,0(r2)
81126094:	00a04534 	movhi	r2,33044
81126098:	10b53604 	addi	r2,r2,-11048
8112609c:	e0ffff17 	ldw	r3,-4(fp)
811260a0:	18c00324 	muli	r3,r3,12
811260a4:	10c5883a 	add	r2,r2,r3
811260a8:	10000015 	stw	zero,0(r2)
811260ac:	0001883a 	nop
811260b0:	e037883a 	mov	sp,fp
811260b4:	df000017 	ldw	fp,0(sp)
811260b8:	dec00104 	addi	sp,sp,4
811260bc:	f800283a 	ret

811260c0 <sbrk>:
811260c0:	defff604 	addi	sp,sp,-40
811260c4:	de00012e 	bgeu	sp,et,811260cc <sbrk+0xc>
811260c8:	003b68fa 	trap	3
811260cc:	df000915 	stw	fp,36(sp)
811260d0:	df000904 	addi	fp,sp,36
811260d4:	e13fff15 	stw	r4,-4(fp)
811260d8:	0005303a 	rdctl	r2,status
811260dc:	e0bffe15 	stw	r2,-8(fp)
811260e0:	e0fffe17 	ldw	r3,-8(fp)
811260e4:	00bfff84 	movi	r2,-2
811260e8:	1884703a 	and	r2,r3,r2
811260ec:	1001703a 	wrctl	status,r2
811260f0:	e0bffe17 	ldw	r2,-8(fp)
811260f4:	e0bff815 	stw	r2,-32(fp)
811260f8:	d0a01217 	ldw	r2,-32696(gp)
811260fc:	10c000c4 	addi	r3,r2,3
81126100:	00bfff04 	movi	r2,-4
81126104:	1884703a 	and	r2,r3,r2
81126108:	d0a01215 	stw	r2,-32696(gp)
8112610c:	d0e01217 	ldw	r3,-32696(gp)
81126110:	e0bfff17 	ldw	r2,-4(fp)
81126114:	1887883a 	add	r3,r3,r2
81126118:	00a04834 	movhi	r2,33056
8112611c:	10a80004 	addi	r2,r2,-24576
81126120:	10c0062e 	bgeu	r2,r3,8112613c <sbrk+0x7c>
81126124:	e0bff817 	ldw	r2,-32(fp)
81126128:	e0bff715 	stw	r2,-36(fp)
8112612c:	e0bff717 	ldw	r2,-36(fp)
81126130:	1001703a 	wrctl	status,r2
81126134:	00bfffc4 	movi	r2,-1
81126138:	00001c06 	br	811261ac <sbrk+0xec>
8112613c:	d0a01217 	ldw	r2,-32696(gp)
81126140:	e0bffa15 	stw	r2,-24(fp)
81126144:	d0e01217 	ldw	r3,-32696(gp)
81126148:	e0bfff17 	ldw	r2,-4(fp)
8112614c:	1885883a 	add	r2,r3,r2
81126150:	d0a01215 	stw	r2,-32696(gp)
81126154:	c005883a 	mov	r2,et
81126158:	e0bff915 	stw	r2,-28(fp)
8112615c:	e0fff917 	ldw	r3,-28(fp)
81126160:	e0bffa17 	ldw	r2,-24(fp)
81126164:	18800c1e 	bne	r3,r2,81126198 <sbrk+0xd8>
81126168:	d805883a 	mov	r2,sp
8112616c:	e0bffb15 	stw	r2,-20(fp)
81126170:	e0bffb17 	ldw	r2,-20(fp)
81126174:	d0e01217 	ldw	r3,-32696(gp)
81126178:	18800136 	bltu	r3,r2,81126180 <sbrk+0xc0>
8112617c:	003da0fa 	break	3
81126180:	d0a01217 	ldw	r2,-32696(gp)
81126184:	e0bffc15 	stw	r2,-16(fp)
81126188:	e0bffc17 	ldw	r2,-16(fp)
8112618c:	d0a00015 	stw	r2,-32768(gp)
81126190:	e0bffc17 	ldw	r2,-16(fp)
81126194:	1031883a 	mov	et,r2
81126198:	e0bff817 	ldw	r2,-32(fp)
8112619c:	e0bffd15 	stw	r2,-12(fp)
811261a0:	e0bffd17 	ldw	r2,-12(fp)
811261a4:	1001703a 	wrctl	status,r2
811261a8:	e0bffa17 	ldw	r2,-24(fp)
811261ac:	e037883a 	mov	sp,fp
811261b0:	df000017 	ldw	fp,0(sp)
811261b4:	dec00104 	addi	sp,sp,4
811261b8:	f800283a 	ret

811261bc <alt_alarm_stop>:
811261bc:	defffa04 	addi	sp,sp,-24
811261c0:	de00012e 	bgeu	sp,et,811261c8 <alt_alarm_stop+0xc>
811261c4:	003b68fa 	trap	3
811261c8:	df000515 	stw	fp,20(sp)
811261cc:	df000504 	addi	fp,sp,20
811261d0:	e13fff15 	stw	r4,-4(fp)
811261d4:	0005303a 	rdctl	r2,status
811261d8:	e0bffc15 	stw	r2,-16(fp)
811261dc:	e0fffc17 	ldw	r3,-16(fp)
811261e0:	00bfff84 	movi	r2,-2
811261e4:	1884703a 	and	r2,r3,r2
811261e8:	1001703a 	wrctl	status,r2
811261ec:	e0bffc17 	ldw	r2,-16(fp)
811261f0:	e0bffb15 	stw	r2,-20(fp)
811261f4:	e0bfff17 	ldw	r2,-4(fp)
811261f8:	e0bffd15 	stw	r2,-12(fp)
811261fc:	e0bffd17 	ldw	r2,-12(fp)
81126200:	10800017 	ldw	r2,0(r2)
81126204:	e0fffd17 	ldw	r3,-12(fp)
81126208:	18c00117 	ldw	r3,4(r3)
8112620c:	10c00115 	stw	r3,4(r2)
81126210:	e0bffd17 	ldw	r2,-12(fp)
81126214:	10800117 	ldw	r2,4(r2)
81126218:	e0fffd17 	ldw	r3,-12(fp)
8112621c:	18c00017 	ldw	r3,0(r3)
81126220:	10c00015 	stw	r3,0(r2)
81126224:	e0bffd17 	ldw	r2,-12(fp)
81126228:	e0fffd17 	ldw	r3,-12(fp)
8112622c:	10c00115 	stw	r3,4(r2)
81126230:	e0bffd17 	ldw	r2,-12(fp)
81126234:	e0fffd17 	ldw	r3,-12(fp)
81126238:	10c00015 	stw	r3,0(r2)
8112623c:	e0bffb17 	ldw	r2,-20(fp)
81126240:	e0bffe15 	stw	r2,-8(fp)
81126244:	e0bffe17 	ldw	r2,-8(fp)
81126248:	1001703a 	wrctl	status,r2
8112624c:	0001883a 	nop
81126250:	e037883a 	mov	sp,fp
81126254:	df000017 	ldw	fp,0(sp)
81126258:	dec00104 	addi	sp,sp,4
8112625c:	f800283a 	ret

81126260 <alt_tick>:
81126260:	defffb04 	addi	sp,sp,-20
81126264:	de00012e 	bgeu	sp,et,8112626c <alt_tick+0xc>
81126268:	003b68fa 	trap	3
8112626c:	dfc00415 	stw	ra,16(sp)
81126270:	df000315 	stw	fp,12(sp)
81126274:	df000304 	addi	fp,sp,12
81126278:	d0a01317 	ldw	r2,-32692(gp)
8112627c:	e0bffd15 	stw	r2,-12(fp)
81126280:	d0a06b17 	ldw	r2,-32340(gp)
81126284:	10800044 	addi	r2,r2,1
81126288:	d0a06b15 	stw	r2,-32340(gp)
8112628c:	00002e06 	br	81126348 <alt_tick+0xe8>
81126290:	e0bffd17 	ldw	r2,-12(fp)
81126294:	10800017 	ldw	r2,0(r2)
81126298:	e0bffe15 	stw	r2,-8(fp)
8112629c:	e0bffd17 	ldw	r2,-12(fp)
811262a0:	10800403 	ldbu	r2,16(r2)
811262a4:	10803fcc 	andi	r2,r2,255
811262a8:	10000426 	beq	r2,zero,811262bc <alt_tick+0x5c>
811262ac:	d0a06b17 	ldw	r2,-32340(gp)
811262b0:	1000021e 	bne	r2,zero,811262bc <alt_tick+0x5c>
811262b4:	e0bffd17 	ldw	r2,-12(fp)
811262b8:	10000405 	stb	zero,16(r2)
811262bc:	e0bffd17 	ldw	r2,-12(fp)
811262c0:	10800217 	ldw	r2,8(r2)
811262c4:	d0e06b17 	ldw	r3,-32340(gp)
811262c8:	18801d36 	bltu	r3,r2,81126340 <alt_tick+0xe0>
811262cc:	e0bffd17 	ldw	r2,-12(fp)
811262d0:	10800403 	ldbu	r2,16(r2)
811262d4:	10803fcc 	andi	r2,r2,255
811262d8:	1000191e 	bne	r2,zero,81126340 <alt_tick+0xe0>
811262dc:	e0bffd17 	ldw	r2,-12(fp)
811262e0:	10800317 	ldw	r2,12(r2)
811262e4:	e0fffd17 	ldw	r3,-12(fp)
811262e8:	18c00517 	ldw	r3,20(r3)
811262ec:	1809883a 	mov	r4,r3
811262f0:	103ee83a 	callr	r2
811262f4:	e0bfff15 	stw	r2,-4(fp)
811262f8:	e0bfff17 	ldw	r2,-4(fp)
811262fc:	1000031e 	bne	r2,zero,8112630c <alt_tick+0xac>
81126300:	e13ffd17 	ldw	r4,-12(fp)
81126304:	11261bc0 	call	811261bc <alt_alarm_stop>
81126308:	00000d06 	br	81126340 <alt_tick+0xe0>
8112630c:	e0bffd17 	ldw	r2,-12(fp)
81126310:	10c00217 	ldw	r3,8(r2)
81126314:	e0bfff17 	ldw	r2,-4(fp)
81126318:	1887883a 	add	r3,r3,r2
8112631c:	e0bffd17 	ldw	r2,-12(fp)
81126320:	10c00215 	stw	r3,8(r2)
81126324:	e0bffd17 	ldw	r2,-12(fp)
81126328:	10c00217 	ldw	r3,8(r2)
8112632c:	d0a06b17 	ldw	r2,-32340(gp)
81126330:	1880032e 	bgeu	r3,r2,81126340 <alt_tick+0xe0>
81126334:	e0bffd17 	ldw	r2,-12(fp)
81126338:	00c00044 	movi	r3,1
8112633c:	10c00405 	stb	r3,16(r2)
81126340:	e0bffe17 	ldw	r2,-8(fp)
81126344:	e0bffd15 	stw	r2,-12(fp)
81126348:	e0fffd17 	ldw	r3,-12(fp)
8112634c:	d0a01304 	addi	r2,gp,-32692
81126350:	18bfcf1e 	bne	r3,r2,81126290 <__reset+0xfb106290>
81126354:	11276080 	call	81127608 <OSTimeTick>
81126358:	0001883a 	nop
8112635c:	e037883a 	mov	sp,fp
81126360:	dfc00117 	ldw	ra,4(sp)
81126364:	df000017 	ldw	fp,0(sp)
81126368:	dec00204 	addi	sp,sp,8
8112636c:	f800283a 	ret

81126370 <usleep>:
81126370:	defffb04 	addi	sp,sp,-20
81126374:	de00012e 	bgeu	sp,et,8112637c <usleep+0xc>
81126378:	003b68fa 	trap	3
8112637c:	dfc00415 	stw	ra,16(sp)
81126380:	df000315 	stw	fp,12(sp)
81126384:	df000304 	addi	fp,sp,12
81126388:	e13fff15 	stw	r4,-4(fp)
8112638c:	d0a07303 	ldbu	r2,-32308(gp)
81126390:	10803fcc 	andi	r2,r2,255
81126394:	1000031e 	bne	r2,zero,811263a4 <usleep+0x34>
81126398:	e13fff17 	ldw	r4,-4(fp)
8112639c:	11254a00 	call	811254a0 <alt_busy_sleep>
811263a0:	00003d06 	br	81126498 <usleep+0x128>
811263a4:	d0a06a17 	ldw	r2,-32344(gp)
811263a8:	e0bffe15 	stw	r2,-8(fp)
811263ac:	e0ffff17 	ldw	r3,-4(fp)
811263b0:	0090c734 	movhi	r2,17180
811263b4:	10b7a0c4 	addi	r2,r2,-8573
811263b8:	1888383a 	mulxuu	r4,r3,r2
811263bc:	1885383a 	mul	r2,r3,r2
811263c0:	1013883a 	mov	r9,r2
811263c4:	2015883a 	mov	r10,r4
811263c8:	5006d4ba 	srli	r3,r10,18
811263cc:	e0bffe17 	ldw	r2,-8(fp)
811263d0:	1893383a 	mul	r9,r3,r2
811263d4:	e0ffff17 	ldw	r3,-4(fp)
811263d8:	0090c734 	movhi	r2,17180
811263dc:	10b7a0c4 	addi	r2,r2,-8573
811263e0:	1888383a 	mulxuu	r4,r3,r2
811263e4:	1885383a 	mul	r2,r3,r2
811263e8:	100f883a 	mov	r7,r2
811263ec:	2011883a 	mov	r8,r4
811263f0:	4004d4ba 	srli	r2,r8,18
811263f4:	010003f4 	movhi	r4,15
811263f8:	21109004 	addi	r4,r4,16960
811263fc:	1105383a 	mul	r2,r2,r4
81126400:	1885c83a 	sub	r2,r3,r2
81126404:	e0fffe17 	ldw	r3,-8(fp)
81126408:	10c7383a 	mul	r3,r2,r3
8112640c:	0090c734 	movhi	r2,17180
81126410:	10b7a0c4 	addi	r2,r2,-8573
81126414:	1888383a 	mulxuu	r4,r3,r2
81126418:	1885383a 	mul	r2,r3,r2
8112641c:	100b883a 	mov	r5,r2
81126420:	200d883a 	mov	r6,r4
81126424:	3004d4ba 	srli	r2,r6,18
81126428:	4885883a 	add	r2,r9,r2
8112642c:	e0bffd15 	stw	r2,-12(fp)
81126430:	00000706 	br	81126450 <usleep+0xe0>
81126434:	013fffd4 	movui	r4,65535
81126438:	112f0780 	call	8112f078 <OSTimeDly>
8112643c:	e0fffd17 	ldw	r3,-12(fp)
81126440:	00bffff4 	movhi	r2,65535
81126444:	10800044 	addi	r2,r2,1
81126448:	1885883a 	add	r2,r3,r2
8112644c:	e0bffd15 	stw	r2,-12(fp)
81126450:	e0bffd17 	ldw	r2,-12(fp)
81126454:	00ffffd4 	movui	r3,65535
81126458:	18bff636 	bltu	r3,r2,81126434 <__reset+0xfb106434>
8112645c:	e0bffd17 	ldw	r2,-12(fp)
81126460:	10bfffcc 	andi	r2,r2,65535
81126464:	1009883a 	mov	r4,r2
81126468:	112f0780 	call	8112f078 <OSTimeDly>
8112646c:	008003f4 	movhi	r2,15
81126470:	10909004 	addi	r2,r2,16960
81126474:	e0fffe17 	ldw	r3,-8(fp)
81126478:	10c7203a 	divu	r3,r2,r3
8112647c:	e0bfff17 	ldw	r2,-4(fp)
81126480:	10c9203a 	divu	r4,r2,r3
81126484:	20c7383a 	mul	r3,r4,r3
81126488:	10c5c83a 	sub	r2,r2,r3
8112648c:	1009883a 	mov	r4,r2
81126490:	11254a00 	call	811254a0 <alt_busy_sleep>
81126494:	0005883a 	mov	r2,zero
81126498:	e037883a 	mov	sp,fp
8112649c:	dfc00117 	ldw	ra,4(sp)
811264a0:	df000017 	ldw	fp,0(sp)
811264a4:	dec00204 	addi	sp,sp,8
811264a8:	f800283a 	ret

811264ac <alt_get_errno>:
811264ac:	defffe04 	addi	sp,sp,-8
811264b0:	de00012e 	bgeu	sp,et,811264b8 <alt_get_errno+0xc>
811264b4:	003b68fa 	trap	3
811264b8:	dfc00115 	stw	ra,4(sp)
811264bc:	df000015 	stw	fp,0(sp)
811264c0:	d839883a 	mov	fp,sp
811264c4:	d0a01017 	ldw	r2,-32704(gp)
811264c8:	10000326 	beq	r2,zero,811264d8 <alt_get_errno+0x2c>
811264cc:	d0a01017 	ldw	r2,-32704(gp)
811264d0:	103ee83a 	callr	r2
811264d4:	00000106 	br	811264dc <alt_get_errno+0x30>
811264d8:	d0a05e04 	addi	r2,gp,-32392
811264dc:	e037883a 	mov	sp,fp
811264e0:	dfc00117 	ldw	ra,4(sp)
811264e4:	df000017 	ldw	fp,0(sp)
811264e8:	dec00204 	addi	sp,sp,8
811264ec:	f800283a 	ret

811264f0 <write>:
811264f0:	defff904 	addi	sp,sp,-28
811264f4:	de00012e 	bgeu	sp,et,811264fc <write+0xc>
811264f8:	003b68fa 	trap	3
811264fc:	dfc00615 	stw	ra,24(sp)
81126500:	df000515 	stw	fp,20(sp)
81126504:	df000504 	addi	fp,sp,20
81126508:	e13ffd15 	stw	r4,-12(fp)
8112650c:	e17ffe15 	stw	r5,-8(fp)
81126510:	e1bfff15 	stw	r6,-4(fp)
81126514:	e0bffd17 	ldw	r2,-12(fp)
81126518:	10000616 	blt	r2,zero,81126534 <write+0x44>
8112651c:	e0bffd17 	ldw	r2,-12(fp)
81126520:	10c00324 	muli	r3,r2,12
81126524:	00a04534 	movhi	r2,33044
81126528:	10b53604 	addi	r2,r2,-11048
8112652c:	1885883a 	add	r2,r3,r2
81126530:	00000106 	br	81126538 <write+0x48>
81126534:	0005883a 	mov	r2,zero
81126538:	e0bffb15 	stw	r2,-20(fp)
8112653c:	e0bffb17 	ldw	r2,-20(fp)
81126540:	10002126 	beq	r2,zero,811265c8 <write+0xd8>
81126544:	e0bffb17 	ldw	r2,-20(fp)
81126548:	10800217 	ldw	r2,8(r2)
8112654c:	108000cc 	andi	r2,r2,3
81126550:	10001826 	beq	r2,zero,811265b4 <write+0xc4>
81126554:	e0bffb17 	ldw	r2,-20(fp)
81126558:	10800017 	ldw	r2,0(r2)
8112655c:	10800617 	ldw	r2,24(r2)
81126560:	10001426 	beq	r2,zero,811265b4 <write+0xc4>
81126564:	e0bffb17 	ldw	r2,-20(fp)
81126568:	10800017 	ldw	r2,0(r2)
8112656c:	10800617 	ldw	r2,24(r2)
81126570:	e0ffff17 	ldw	r3,-4(fp)
81126574:	180d883a 	mov	r6,r3
81126578:	e17ffe17 	ldw	r5,-8(fp)
8112657c:	e13ffb17 	ldw	r4,-20(fp)
81126580:	103ee83a 	callr	r2
81126584:	e0bffc15 	stw	r2,-16(fp)
81126588:	e0bffc17 	ldw	r2,-16(fp)
8112658c:	1000070e 	bge	r2,zero,811265ac <write+0xbc>
81126590:	11264ac0 	call	811264ac <alt_get_errno>
81126594:	1007883a 	mov	r3,r2
81126598:	e0bffc17 	ldw	r2,-16(fp)
8112659c:	0085c83a 	sub	r2,zero,r2
811265a0:	18800015 	stw	r2,0(r3)
811265a4:	00bfffc4 	movi	r2,-1
811265a8:	00000c06 	br	811265dc <write+0xec>
811265ac:	e0bffc17 	ldw	r2,-16(fp)
811265b0:	00000a06 	br	811265dc <write+0xec>
811265b4:	11264ac0 	call	811264ac <alt_get_errno>
811265b8:	1007883a 	mov	r3,r2
811265bc:	00800344 	movi	r2,13
811265c0:	18800015 	stw	r2,0(r3)
811265c4:	00000406 	br	811265d8 <write+0xe8>
811265c8:	11264ac0 	call	811264ac <alt_get_errno>
811265cc:	1007883a 	mov	r3,r2
811265d0:	00801444 	movi	r2,81
811265d4:	18800015 	stw	r2,0(r3)
811265d8:	00bfffc4 	movi	r2,-1
811265dc:	e037883a 	mov	sp,fp
811265e0:	dfc00117 	ldw	ra,4(sp)
811265e4:	df000017 	ldw	fp,0(sp)
811265e8:	dec00204 	addi	sp,sp,8
811265ec:	f800283a 	ret

811265f0 <__env_lock>:
811265f0:	deffde04 	addi	sp,sp,-136
811265f4:	de00012e 	bgeu	sp,et,811265fc <__env_lock+0xc>
811265f8:	003b68fa 	trap	3
811265fc:	dfc02115 	stw	ra,132(sp)
81126600:	df002015 	stw	fp,128(sp)
81126604:	df002004 	addi	fp,sp,128
81126608:	e13fff15 	stw	r4,-4(fp)
8112660c:	e0bfe104 	addi	r2,fp,-124
81126610:	100b883a 	mov	r5,r2
81126614:	01003fc4 	movi	r4,255
81126618:	112eed40 	call	8112eed4 <OSTaskQuery>
8112661c:	e0bffe85 	stb	r2,-6(fp)
81126620:	e0bffe83 	ldbu	r2,-6(fp)
81126624:	10803fcc 	andi	r2,r2,255
81126628:	10001e1e 	bne	r2,zero,811266a4 <__env_lock+0xb4>
8112662c:	e0bfed83 	ldbu	r2,-74(fp)
81126630:	10803fcc 	andi	r2,r2,255
81126634:	e0bfe015 	stw	r2,-128(fp)
81126638:	d0a06d17 	ldw	r2,-32332(gp)
8112663c:	e0fffc04 	addi	r3,fp,-16
81126640:	180b883a 	mov	r5,r3
81126644:	1009883a 	mov	r4,r2
81126648:	112d68c0 	call	8112d68c <OSSemQuery>
8112664c:	e0bffe03 	ldbu	r2,-8(fp)
81126650:	10803fcc 	andi	r2,r2,255
81126654:	10000726 	beq	r2,zero,81126674 <__env_lock+0x84>
81126658:	d0a01517 	ldw	r2,-32684(gp)
8112665c:	e0ffe017 	ldw	r3,-128(fp)
81126660:	1880041e 	bne	r3,r2,81126674 <__env_lock+0x84>
81126664:	d0a06c17 	ldw	r2,-32336(gp)
81126668:	10800044 	addi	r2,r2,1
8112666c:	d0a06c15 	stw	r2,-32336(gp)
81126670:	00000a06 	br	8112669c <__env_lock+0xac>
81126674:	d0a06d17 	ldw	r2,-32332(gp)
81126678:	e0fffe84 	addi	r3,fp,-6
8112667c:	180d883a 	mov	r6,r3
81126680:	000b883a 	mov	r5,zero
81126684:	1009883a 	mov	r4,r2
81126688:	112d1ec0 	call	8112d1ec <OSSemPend>
8112668c:	00800044 	movi	r2,1
81126690:	d0a06c15 	stw	r2,-32336(gp)
81126694:	e0bfe017 	ldw	r2,-128(fp)
81126698:	d0a01515 	stw	r2,-32684(gp)
8112669c:	0001883a 	nop
811266a0:	00000106 	br	811266a8 <__env_lock+0xb8>
811266a4:	0001883a 	nop
811266a8:	e037883a 	mov	sp,fp
811266ac:	dfc00117 	ldw	ra,4(sp)
811266b0:	df000017 	ldw	fp,0(sp)
811266b4:	dec00204 	addi	sp,sp,8
811266b8:	f800283a 	ret

811266bc <__env_unlock>:
811266bc:	defffd04 	addi	sp,sp,-12
811266c0:	de00012e 	bgeu	sp,et,811266c8 <__env_unlock+0xc>
811266c4:	003b68fa 	trap	3
811266c8:	dfc00215 	stw	ra,8(sp)
811266cc:	df000115 	stw	fp,4(sp)
811266d0:	df000104 	addi	fp,sp,4
811266d4:	e13fff15 	stw	r4,-4(fp)
811266d8:	d0a06c17 	ldw	r2,-32336(gp)
811266dc:	10000b26 	beq	r2,zero,8112670c <__env_unlock+0x50>
811266e0:	d0a06c17 	ldw	r2,-32336(gp)
811266e4:	10bfffc4 	addi	r2,r2,-1
811266e8:	d0a06c15 	stw	r2,-32336(gp)
811266ec:	d0a06c17 	ldw	r2,-32336(gp)
811266f0:	1000071e 	bne	r2,zero,81126710 <__env_unlock+0x54>
811266f4:	00bfffc4 	movi	r2,-1
811266f8:	d0a01515 	stw	r2,-32684(gp)
811266fc:	d0a06d17 	ldw	r2,-32332(gp)
81126700:	1009883a 	mov	r4,r2
81126704:	112d5740 	call	8112d574 <OSSemPost>
81126708:	00000106 	br	81126710 <__env_unlock+0x54>
8112670c:	0001883a 	nop
81126710:	e037883a 	mov	sp,fp
81126714:	dfc00117 	ldw	ra,4(sp)
81126718:	df000017 	ldw	fp,0(sp)
8112671c:	dec00204 	addi	sp,sp,8
81126720:	f800283a 	ret

81126724 <__malloc_lock>:
81126724:	deffda04 	addi	sp,sp,-152
81126728:	de00012e 	bgeu	sp,et,81126730 <__malloc_lock+0xc>
8112672c:	003b68fa 	trap	3
81126730:	dfc02515 	stw	ra,148(sp)
81126734:	df002415 	stw	fp,144(sp)
81126738:	df002404 	addi	fp,sp,144
8112673c:	e13fff15 	stw	r4,-4(fp)
81126740:	e03fdc15 	stw	zero,-144(fp)
81126744:	d0a07303 	ldbu	r2,-32308(gp)
81126748:	10803fcc 	andi	r2,r2,255
8112674c:	10800060 	cmpeqi	r2,r2,1
81126750:	10003626 	beq	r2,zero,8112682c <__malloc_lock+0x108>
81126754:	e0bfe104 	addi	r2,fp,-124
81126758:	100b883a 	mov	r5,r2
8112675c:	01003fc4 	movi	r4,255
81126760:	112eed40 	call	8112eed4 <OSTaskQuery>
81126764:	e0bffe85 	stb	r2,-6(fp)
81126768:	e0bffe83 	ldbu	r2,-6(fp)
8112676c:	10803fcc 	andi	r2,r2,255
81126770:	1000301e 	bne	r2,zero,81126834 <__malloc_lock+0x110>
81126774:	e0bfed83 	ldbu	r2,-74(fp)
81126778:	10803fcc 	andi	r2,r2,255
8112677c:	e0bfdd15 	stw	r2,-140(fp)
81126780:	d0a06f17 	ldw	r2,-32324(gp)
81126784:	e0fffc04 	addi	r3,fp,-16
81126788:	180b883a 	mov	r5,r3
8112678c:	1009883a 	mov	r4,r2
81126790:	112d68c0 	call	8112d68c <OSSemQuery>
81126794:	0005303a 	rdctl	r2,status
81126798:	e0bfe015 	stw	r2,-128(fp)
8112679c:	e0ffe017 	ldw	r3,-128(fp)
811267a0:	00bfff84 	movi	r2,-2
811267a4:	1884703a 	and	r2,r3,r2
811267a8:	1001703a 	wrctl	status,r2
811267ac:	e0bfe017 	ldw	r2,-128(fp)
811267b0:	e0bfdc15 	stw	r2,-144(fp)
811267b4:	e0bffc0b 	ldhu	r2,-16(fp)
811267b8:	10bfffcc 	andi	r2,r2,65535
811267bc:	10000b1e 	bne	r2,zero,811267ec <__malloc_lock+0xc8>
811267c0:	d0a01617 	ldw	r2,-32680(gp)
811267c4:	e0ffdd17 	ldw	r3,-140(fp)
811267c8:	1880081e 	bne	r3,r2,811267ec <__malloc_lock+0xc8>
811267cc:	d0a06e17 	ldw	r2,-32328(gp)
811267d0:	10800044 	addi	r2,r2,1
811267d4:	d0a06e15 	stw	r2,-32328(gp)
811267d8:	e0bfdc17 	ldw	r2,-144(fp)
811267dc:	e0bfde15 	stw	r2,-136(fp)
811267e0:	e0bfde17 	ldw	r2,-136(fp)
811267e4:	1001703a 	wrctl	status,r2
811267e8:	00000e06 	br	81126824 <__malloc_lock+0x100>
811267ec:	e0bfdc17 	ldw	r2,-144(fp)
811267f0:	e0bfdf15 	stw	r2,-132(fp)
811267f4:	e0bfdf17 	ldw	r2,-132(fp)
811267f8:	1001703a 	wrctl	status,r2
811267fc:	d0a06f17 	ldw	r2,-32324(gp)
81126800:	e0fffe84 	addi	r3,fp,-6
81126804:	180d883a 	mov	r6,r3
81126808:	000b883a 	mov	r5,zero
8112680c:	1009883a 	mov	r4,r2
81126810:	112d1ec0 	call	8112d1ec <OSSemPend>
81126814:	00800044 	movi	r2,1
81126818:	d0a06e15 	stw	r2,-32328(gp)
8112681c:	e0bfdd17 	ldw	r2,-140(fp)
81126820:	d0a01615 	stw	r2,-32680(gp)
81126824:	0001883a 	nop
81126828:	00000306 	br	81126838 <__malloc_lock+0x114>
8112682c:	0001883a 	nop
81126830:	00000106 	br	81126838 <__malloc_lock+0x114>
81126834:	0001883a 	nop
81126838:	e037883a 	mov	sp,fp
8112683c:	dfc00117 	ldw	ra,4(sp)
81126840:	df000017 	ldw	fp,0(sp)
81126844:	dec00204 	addi	sp,sp,8
81126848:	f800283a 	ret

8112684c <__malloc_unlock>:
8112684c:	defff804 	addi	sp,sp,-32
81126850:	de00012e 	bgeu	sp,et,81126858 <__malloc_unlock+0xc>
81126854:	003b68fa 	trap	3
81126858:	dfc00715 	stw	ra,28(sp)
8112685c:	df000615 	stw	fp,24(sp)
81126860:	df000604 	addi	fp,sp,24
81126864:	e13fff15 	stw	r4,-4(fp)
81126868:	e03ffa15 	stw	zero,-24(fp)
8112686c:	d0a07303 	ldbu	r2,-32308(gp)
81126870:	10803fcc 	andi	r2,r2,255
81126874:	10800060 	cmpeqi	r2,r2,1
81126878:	10002326 	beq	r2,zero,81126908 <__malloc_unlock+0xbc>
8112687c:	0005303a 	rdctl	r2,status
81126880:	e0bffe15 	stw	r2,-8(fp)
81126884:	e0fffe17 	ldw	r3,-8(fp)
81126888:	00bfff84 	movi	r2,-2
8112688c:	1884703a 	and	r2,r3,r2
81126890:	1001703a 	wrctl	status,r2
81126894:	e0bffe17 	ldw	r2,-8(fp)
81126898:	e0bffa15 	stw	r2,-24(fp)
8112689c:	d0a06e17 	ldw	r2,-32328(gp)
811268a0:	1000051e 	bne	r2,zero,811268b8 <__malloc_unlock+0x6c>
811268a4:	e0bffa17 	ldw	r2,-24(fp)
811268a8:	e0bffb15 	stw	r2,-20(fp)
811268ac:	e0bffb17 	ldw	r2,-20(fp)
811268b0:	1001703a 	wrctl	status,r2
811268b4:	00001506 	br	8112690c <__malloc_unlock+0xc0>
811268b8:	d0a06e17 	ldw	r2,-32328(gp)
811268bc:	10bfffc4 	addi	r2,r2,-1
811268c0:	d0a06e15 	stw	r2,-32328(gp)
811268c4:	d0a06e17 	ldw	r2,-32328(gp)
811268c8:	10000a1e 	bne	r2,zero,811268f4 <__malloc_unlock+0xa8>
811268cc:	00bfffc4 	movi	r2,-1
811268d0:	d0a01615 	stw	r2,-32680(gp)
811268d4:	e0bffa17 	ldw	r2,-24(fp)
811268d8:	e0bffc15 	stw	r2,-16(fp)
811268dc:	e0bffc17 	ldw	r2,-16(fp)
811268e0:	1001703a 	wrctl	status,r2
811268e4:	d0a06f17 	ldw	r2,-32324(gp)
811268e8:	1009883a 	mov	r4,r2
811268ec:	112d5740 	call	8112d574 <OSSemPost>
811268f0:	00000606 	br	8112690c <__malloc_unlock+0xc0>
811268f4:	e0bffa17 	ldw	r2,-24(fp)
811268f8:	e0bffd15 	stw	r2,-12(fp)
811268fc:	e0bffd17 	ldw	r2,-12(fp)
81126900:	1001703a 	wrctl	status,r2
81126904:	00000106 	br	8112690c <__malloc_unlock+0xc0>
81126908:	0001883a 	nop
8112690c:	e037883a 	mov	sp,fp
81126910:	dfc00117 	ldw	ra,4(sp)
81126914:	df000017 	ldw	fp,0(sp)
81126918:	dec00204 	addi	sp,sp,8
8112691c:	f800283a 	ret

81126920 <OSEventNameGet>:
81126920:	defff704 	addi	sp,sp,-36
81126924:	de00012e 	bgeu	sp,et,8112692c <OSEventNameGet+0xc>
81126928:	003b68fa 	trap	3
8112692c:	dfc00815 	stw	ra,32(sp)
81126930:	df000715 	stw	fp,28(sp)
81126934:	df000704 	addi	fp,sp,28
81126938:	e13ffd15 	stw	r4,-12(fp)
8112693c:	e17ffe15 	stw	r5,-8(fp)
81126940:	e1bfff15 	stw	r6,-4(fp)
81126944:	e03ff915 	stw	zero,-28(fp)
81126948:	e0bfff17 	ldw	r2,-4(fp)
8112694c:	1000021e 	bne	r2,zero,81126958 <OSEventNameGet+0x38>
81126950:	0005883a 	mov	r2,zero
81126954:	00003706 	br	81126a34 <OSEventNameGet+0x114>
81126958:	e0bffd17 	ldw	r2,-12(fp)
8112695c:	1000051e 	bne	r2,zero,81126974 <OSEventNameGet+0x54>
81126960:	e0bfff17 	ldw	r2,-4(fp)
81126964:	00c00104 	movi	r3,4
81126968:	10c00005 	stb	r3,0(r2)
8112696c:	0005883a 	mov	r2,zero
81126970:	00003006 	br	81126a34 <OSEventNameGet+0x114>
81126974:	e0bffe17 	ldw	r2,-8(fp)
81126978:	1000051e 	bne	r2,zero,81126990 <OSEventNameGet+0x70>
8112697c:	e0bfff17 	ldw	r2,-4(fp)
81126980:	00c00304 	movi	r3,12
81126984:	10c00005 	stb	r3,0(r2)
81126988:	0005883a 	mov	r2,zero
8112698c:	00002906 	br	81126a34 <OSEventNameGet+0x114>
81126990:	d0a08303 	ldbu	r2,-32244(gp)
81126994:	10803fcc 	andi	r2,r2,255
81126998:	10000526 	beq	r2,zero,811269b0 <OSEventNameGet+0x90>
8112699c:	e0bfff17 	ldw	r2,-4(fp)
811269a0:	00c00444 	movi	r3,17
811269a4:	10c00005 	stb	r3,0(r2)
811269a8:	0005883a 	mov	r2,zero
811269ac:	00002106 	br	81126a34 <OSEventNameGet+0x114>
811269b0:	e0bffd17 	ldw	r2,-12(fp)
811269b4:	10800003 	ldbu	r2,0(r2)
811269b8:	10803fcc 	andi	r2,r2,255
811269bc:	10bfffc4 	addi	r2,r2,-1
811269c0:	10800128 	cmpgeui	r2,r2,4
811269c4:	10000526 	beq	r2,zero,811269dc <OSEventNameGet+0xbc>
811269c8:	e0bfff17 	ldw	r2,-4(fp)
811269cc:	00c00044 	movi	r3,1
811269d0:	10c00005 	stb	r3,0(r2)
811269d4:	0005883a 	mov	r2,zero
811269d8:	00001606 	br	81126a34 <OSEventNameGet+0x114>
811269dc:	0001883a 	nop
811269e0:	0005303a 	rdctl	r2,status
811269e4:	e0bffb15 	stw	r2,-20(fp)
811269e8:	e0fffb17 	ldw	r3,-20(fp)
811269ec:	00bfff84 	movi	r2,-2
811269f0:	1884703a 	and	r2,r3,r2
811269f4:	1001703a 	wrctl	status,r2
811269f8:	e0bffb17 	ldw	r2,-20(fp)
811269fc:	e0bff915 	stw	r2,-28(fp)
81126a00:	e0bffd17 	ldw	r2,-12(fp)
81126a04:	10800444 	addi	r2,r2,17
81126a08:	100b883a 	mov	r5,r2
81126a0c:	e13ffe17 	ldw	r4,-8(fp)
81126a10:	11284900 	call	81128490 <OS_StrCopy>
81126a14:	e0bffa05 	stb	r2,-24(fp)
81126a18:	e0bff917 	ldw	r2,-28(fp)
81126a1c:	e0bffc15 	stw	r2,-16(fp)
81126a20:	e0bffc17 	ldw	r2,-16(fp)
81126a24:	1001703a 	wrctl	status,r2
81126a28:	e0bfff17 	ldw	r2,-4(fp)
81126a2c:	10000005 	stb	zero,0(r2)
81126a30:	e0bffa03 	ldbu	r2,-24(fp)
81126a34:	e037883a 	mov	sp,fp
81126a38:	dfc00117 	ldw	ra,4(sp)
81126a3c:	df000017 	ldw	fp,0(sp)
81126a40:	dec00204 	addi	sp,sp,8
81126a44:	f800283a 	ret

81126a48 <OSEventNameSet>:
81126a48:	defff604 	addi	sp,sp,-40
81126a4c:	de00012e 	bgeu	sp,et,81126a54 <OSEventNameSet+0xc>
81126a50:	003b68fa 	trap	3
81126a54:	dfc00915 	stw	ra,36(sp)
81126a58:	df000815 	stw	fp,32(sp)
81126a5c:	df000804 	addi	fp,sp,32
81126a60:	e13ffd15 	stw	r4,-12(fp)
81126a64:	e17ffe15 	stw	r5,-8(fp)
81126a68:	e1bfff15 	stw	r6,-4(fp)
81126a6c:	e03ff815 	stw	zero,-32(fp)
81126a70:	e0bfff17 	ldw	r2,-4(fp)
81126a74:	10004026 	beq	r2,zero,81126b78 <OSEventNameSet+0x130>
81126a78:	e0bffd17 	ldw	r2,-12(fp)
81126a7c:	1000041e 	bne	r2,zero,81126a90 <OSEventNameSet+0x48>
81126a80:	e0bfff17 	ldw	r2,-4(fp)
81126a84:	00c00104 	movi	r3,4
81126a88:	10c00005 	stb	r3,0(r2)
81126a8c:	00003b06 	br	81126b7c <OSEventNameSet+0x134>
81126a90:	e0bffe17 	ldw	r2,-8(fp)
81126a94:	1000041e 	bne	r2,zero,81126aa8 <OSEventNameSet+0x60>
81126a98:	e0bfff17 	ldw	r2,-4(fp)
81126a9c:	00c00304 	movi	r3,12
81126aa0:	10c00005 	stb	r3,0(r2)
81126aa4:	00003506 	br	81126b7c <OSEventNameSet+0x134>
81126aa8:	d0a08303 	ldbu	r2,-32244(gp)
81126aac:	10803fcc 	andi	r2,r2,255
81126ab0:	10000426 	beq	r2,zero,81126ac4 <OSEventNameSet+0x7c>
81126ab4:	e0bfff17 	ldw	r2,-4(fp)
81126ab8:	00c00484 	movi	r3,18
81126abc:	10c00005 	stb	r3,0(r2)
81126ac0:	00002e06 	br	81126b7c <OSEventNameSet+0x134>
81126ac4:	e0bffd17 	ldw	r2,-12(fp)
81126ac8:	10800003 	ldbu	r2,0(r2)
81126acc:	10803fcc 	andi	r2,r2,255
81126ad0:	10bfffc4 	addi	r2,r2,-1
81126ad4:	10800128 	cmpgeui	r2,r2,4
81126ad8:	10000426 	beq	r2,zero,81126aec <OSEventNameSet+0xa4>
81126adc:	e0bfff17 	ldw	r2,-4(fp)
81126ae0:	00c00044 	movi	r3,1
81126ae4:	10c00005 	stb	r3,0(r2)
81126ae8:	00002406 	br	81126b7c <OSEventNameSet+0x134>
81126aec:	0001883a 	nop
81126af0:	0005303a 	rdctl	r2,status
81126af4:	e0bffc15 	stw	r2,-16(fp)
81126af8:	e0fffc17 	ldw	r3,-16(fp)
81126afc:	00bfff84 	movi	r2,-2
81126b00:	1884703a 	and	r2,r3,r2
81126b04:	1001703a 	wrctl	status,r2
81126b08:	e0bffc17 	ldw	r2,-16(fp)
81126b0c:	e0bff815 	stw	r2,-32(fp)
81126b10:	e13ffe17 	ldw	r4,-8(fp)
81126b14:	112850c0 	call	8112850c <OS_StrLen>
81126b18:	e0bffa05 	stb	r2,-24(fp)
81126b1c:	e0bffa03 	ldbu	r2,-24(fp)
81126b20:	10800830 	cmpltui	r2,r2,32
81126b24:	1000081e 	bne	r2,zero,81126b48 <OSEventNameSet+0x100>
81126b28:	e0bff817 	ldw	r2,-32(fp)
81126b2c:	e0bff915 	stw	r2,-28(fp)
81126b30:	e0bff917 	ldw	r2,-28(fp)
81126b34:	1001703a 	wrctl	status,r2
81126b38:	e0bfff17 	ldw	r2,-4(fp)
81126b3c:	00c002c4 	movi	r3,11
81126b40:	10c00005 	stb	r3,0(r2)
81126b44:	00000d06 	br	81126b7c <OSEventNameSet+0x134>
81126b48:	e0bffd17 	ldw	r2,-12(fp)
81126b4c:	10800444 	addi	r2,r2,17
81126b50:	e17ffe17 	ldw	r5,-8(fp)
81126b54:	1009883a 	mov	r4,r2
81126b58:	11284900 	call	81128490 <OS_StrCopy>
81126b5c:	e0bff817 	ldw	r2,-32(fp)
81126b60:	e0bffb15 	stw	r2,-20(fp)
81126b64:	e0bffb17 	ldw	r2,-20(fp)
81126b68:	1001703a 	wrctl	status,r2
81126b6c:	e0bfff17 	ldw	r2,-4(fp)
81126b70:	10000005 	stb	zero,0(r2)
81126b74:	00000106 	br	81126b7c <OSEventNameSet+0x134>
81126b78:	0001883a 	nop
81126b7c:	e037883a 	mov	sp,fp
81126b80:	dfc00117 	ldw	ra,4(sp)
81126b84:	df000017 	ldw	fp,0(sp)
81126b88:	dec00204 	addi	sp,sp,8
81126b8c:	f800283a 	ret

81126b90 <OSEventPendMulti>:
81126b90:	deffed04 	addi	sp,sp,-76
81126b94:	de00012e 	bgeu	sp,et,81126b9c <OSEventPendMulti+0xc>
81126b98:	003b68fa 	trap	3
81126b9c:	dfc01215 	stw	ra,72(sp)
81126ba0:	df001115 	stw	fp,68(sp)
81126ba4:	df001104 	addi	fp,sp,68
81126ba8:	e13ffc15 	stw	r4,-16(fp)
81126bac:	e17ffd15 	stw	r5,-12(fp)
81126bb0:	e1bffe15 	stw	r6,-8(fp)
81126bb4:	3805883a 	mov	r2,r7
81126bb8:	e0bfff0d 	sth	r2,-4(fp)
81126bbc:	e03ff315 	stw	zero,-52(fp)
81126bc0:	e0800217 	ldw	r2,8(fp)
81126bc4:	1000021e 	bne	r2,zero,81126bd0 <OSEventPendMulti+0x40>
81126bc8:	0005883a 	mov	r2,zero
81126bcc:	00017106 	br	81127194 <OSEventPendMulti+0x604>
81126bd0:	e0bffc17 	ldw	r2,-16(fp)
81126bd4:	1000051e 	bne	r2,zero,81126bec <OSEventPendMulti+0x5c>
81126bd8:	e0800217 	ldw	r2,8(fp)
81126bdc:	00c00104 	movi	r3,4
81126be0:	10c00005 	stb	r3,0(r2)
81126be4:	0005883a 	mov	r2,zero
81126be8:	00016a06 	br	81127194 <OSEventPendMulti+0x604>
81126bec:	e0bffd17 	ldw	r2,-12(fp)
81126bf0:	1000051e 	bne	r2,zero,81126c08 <OSEventPendMulti+0x78>
81126bf4:	e0800217 	ldw	r2,8(fp)
81126bf8:	00c00104 	movi	r3,4
81126bfc:	10c00005 	stb	r3,0(r2)
81126c00:	0005883a 	mov	r2,zero
81126c04:	00016306 	br	81127194 <OSEventPendMulti+0x604>
81126c08:	e0bffe17 	ldw	r2,-8(fp)
81126c0c:	1000051e 	bne	r2,zero,81126c24 <OSEventPendMulti+0x94>
81126c10:	e0800217 	ldw	r2,8(fp)
81126c14:	00c00104 	movi	r3,4
81126c18:	10c00005 	stb	r3,0(r2)
81126c1c:	0005883a 	mov	r2,zero
81126c20:	00015c06 	br	81127194 <OSEventPendMulti+0x604>
81126c24:	e0bffd17 	ldw	r2,-12(fp)
81126c28:	10000015 	stw	zero,0(r2)
81126c2c:	e0bffc17 	ldw	r2,-16(fp)
81126c30:	e0bfef15 	stw	r2,-68(fp)
81126c34:	e0bfef17 	ldw	r2,-68(fp)
81126c38:	10800017 	ldw	r2,0(r2)
81126c3c:	e0bff015 	stw	r2,-64(fp)
81126c40:	00001906 	br	81126ca8 <OSEventPendMulti+0x118>
81126c44:	e0bff017 	ldw	r2,-64(fp)
81126c48:	10800003 	ldbu	r2,0(r2)
81126c4c:	10803fcc 	andi	r2,r2,255
81126c50:	10c000a0 	cmpeqi	r3,r2,2
81126c54:	1800091e 	bne	r3,zero,81126c7c <OSEventPendMulti+0xec>
81126c58:	10c000e0 	cmpeqi	r3,r2,3
81126c5c:	1800091e 	bne	r3,zero,81126c84 <OSEventPendMulti+0xf4>
81126c60:	10800060 	cmpeqi	r2,r2,1
81126c64:	1000091e 	bne	r2,zero,81126c8c <OSEventPendMulti+0xfc>
81126c68:	e0800217 	ldw	r2,8(fp)
81126c6c:	00c00044 	movi	r3,1
81126c70:	10c00005 	stb	r3,0(r2)
81126c74:	0005883a 	mov	r2,zero
81126c78:	00014606 	br	81127194 <OSEventPendMulti+0x604>
81126c7c:	0001883a 	nop
81126c80:	00000306 	br	81126c90 <OSEventPendMulti+0x100>
81126c84:	0001883a 	nop
81126c88:	00000106 	br	81126c90 <OSEventPendMulti+0x100>
81126c8c:	0001883a 	nop
81126c90:	e0bfef17 	ldw	r2,-68(fp)
81126c94:	10800104 	addi	r2,r2,4
81126c98:	e0bfef15 	stw	r2,-68(fp)
81126c9c:	e0bfef17 	ldw	r2,-68(fp)
81126ca0:	10800017 	ldw	r2,0(r2)
81126ca4:	e0bff015 	stw	r2,-64(fp)
81126ca8:	e0bff017 	ldw	r2,-64(fp)
81126cac:	103fe51e 	bne	r2,zero,81126c44 <__reset+0xfb106c44>
81126cb0:	d0a08303 	ldbu	r2,-32244(gp)
81126cb4:	10803fcc 	andi	r2,r2,255
81126cb8:	10000526 	beq	r2,zero,81126cd0 <OSEventPendMulti+0x140>
81126cbc:	e0800217 	ldw	r2,8(fp)
81126cc0:	00c00084 	movi	r3,2
81126cc4:	10c00005 	stb	r3,0(r2)
81126cc8:	0005883a 	mov	r2,zero
81126ccc:	00013106 	br	81127194 <OSEventPendMulti+0x604>
81126cd0:	d0a07103 	ldbu	r2,-32316(gp)
81126cd4:	10803fcc 	andi	r2,r2,255
81126cd8:	10000526 	beq	r2,zero,81126cf0 <OSEventPendMulti+0x160>
81126cdc:	e0800217 	ldw	r2,8(fp)
81126ce0:	00c00344 	movi	r3,13
81126ce4:	10c00005 	stb	r3,0(r2)
81126ce8:	0005883a 	mov	r2,zero
81126cec:	00012906 	br	81127194 <OSEventPendMulti+0x604>
81126cf0:	0005303a 	rdctl	r2,status
81126cf4:	e0bffb15 	stw	r2,-20(fp)
81126cf8:	e0fffb17 	ldw	r3,-20(fp)
81126cfc:	00bfff84 	movi	r2,-2
81126d00:	1884703a 	and	r2,r3,r2
81126d04:	1001703a 	wrctl	status,r2
81126d08:	e0bffb17 	ldw	r2,-20(fp)
81126d0c:	e0bff315 	stw	r2,-52(fp)
81126d10:	e03ff105 	stb	zero,-60(fp)
81126d14:	e03ff18d 	sth	zero,-58(fp)
81126d18:	e03ff205 	stb	zero,-56(fp)
81126d1c:	e0bffc17 	ldw	r2,-16(fp)
81126d20:	e0bfef15 	stw	r2,-68(fp)
81126d24:	e0bfef17 	ldw	r2,-68(fp)
81126d28:	10800017 	ldw	r2,0(r2)
81126d2c:	e0bff015 	stw	r2,-64(fp)
81126d30:	00008106 	br	81126f38 <OSEventPendMulti+0x3a8>
81126d34:	e0bff017 	ldw	r2,-64(fp)
81126d38:	10800003 	ldbu	r2,0(r2)
81126d3c:	10803fcc 	andi	r2,r2,255
81126d40:	10c000a0 	cmpeqi	r3,r2,2
81126d44:	18003c1e 	bne	r3,zero,81126e38 <OSEventPendMulti+0x2a8>
81126d48:	10c000e0 	cmpeqi	r3,r2,3
81126d4c:	1800031e 	bne	r3,zero,81126d5c <OSEventPendMulti+0x1cc>
81126d50:	10800060 	cmpeqi	r2,r2,1
81126d54:	10001e1e 	bne	r2,zero,81126dd0 <OSEventPendMulti+0x240>
81126d58:	00006606 	br	81126ef4 <OSEventPendMulti+0x364>
81126d5c:	e0bff017 	ldw	r2,-64(fp)
81126d60:	1080020b 	ldhu	r2,8(r2)
81126d64:	10bfffcc 	andi	r2,r2,65535
81126d68:	10001526 	beq	r2,zero,81126dc0 <OSEventPendMulti+0x230>
81126d6c:	e0bff017 	ldw	r2,-64(fp)
81126d70:	1080020b 	ldhu	r2,8(r2)
81126d74:	10bfffc4 	addi	r2,r2,-1
81126d78:	1007883a 	mov	r3,r2
81126d7c:	e0bff017 	ldw	r2,-64(fp)
81126d80:	10c0020d 	sth	r3,8(r2)
81126d84:	e0bffd17 	ldw	r2,-12(fp)
81126d88:	10c00104 	addi	r3,r2,4
81126d8c:	e0fffd15 	stw	r3,-12(fp)
81126d90:	e0fff017 	ldw	r3,-64(fp)
81126d94:	10c00015 	stw	r3,0(r2)
81126d98:	00800044 	movi	r2,1
81126d9c:	e0bff105 	stb	r2,-60(fp)
81126da0:	e0bffe17 	ldw	r2,-8(fp)
81126da4:	10c00104 	addi	r3,r2,4
81126da8:	e0fffe15 	stw	r3,-8(fp)
81126dac:	10000015 	stw	zero,0(r2)
81126db0:	e0bff18b 	ldhu	r2,-58(fp)
81126db4:	10800044 	addi	r2,r2,1
81126db8:	e0bff18d 	sth	r2,-58(fp)
81126dbc:	00005806 	br	81126f20 <OSEventPendMulti+0x390>
81126dc0:	e0bff203 	ldbu	r2,-56(fp)
81126dc4:	10800054 	ori	r2,r2,1
81126dc8:	e0bff205 	stb	r2,-56(fp)
81126dcc:	00005406 	br	81126f20 <OSEventPendMulti+0x390>
81126dd0:	e0bff017 	ldw	r2,-64(fp)
81126dd4:	10800117 	ldw	r2,4(r2)
81126dd8:	10001326 	beq	r2,zero,81126e28 <OSEventPendMulti+0x298>
81126ddc:	e0bffe17 	ldw	r2,-8(fp)
81126de0:	10c00104 	addi	r3,r2,4
81126de4:	e0fffe15 	stw	r3,-8(fp)
81126de8:	e0fff017 	ldw	r3,-64(fp)
81126dec:	18c00117 	ldw	r3,4(r3)
81126df0:	10c00015 	stw	r3,0(r2)
81126df4:	e0bff017 	ldw	r2,-64(fp)
81126df8:	10000115 	stw	zero,4(r2)
81126dfc:	e0bffd17 	ldw	r2,-12(fp)
81126e00:	10c00104 	addi	r3,r2,4
81126e04:	e0fffd15 	stw	r3,-12(fp)
81126e08:	e0fff017 	ldw	r3,-64(fp)
81126e0c:	10c00015 	stw	r3,0(r2)
81126e10:	00800044 	movi	r2,1
81126e14:	e0bff105 	stb	r2,-60(fp)
81126e18:	e0bff18b 	ldhu	r2,-58(fp)
81126e1c:	10800044 	addi	r2,r2,1
81126e20:	e0bff18d 	sth	r2,-58(fp)
81126e24:	00003e06 	br	81126f20 <OSEventPendMulti+0x390>
81126e28:	e0bff203 	ldbu	r2,-56(fp)
81126e2c:	10800094 	ori	r2,r2,2
81126e30:	e0bff205 	stb	r2,-56(fp)
81126e34:	00003a06 	br	81126f20 <OSEventPendMulti+0x390>
81126e38:	e0bff017 	ldw	r2,-64(fp)
81126e3c:	10800117 	ldw	r2,4(r2)
81126e40:	e0bff515 	stw	r2,-44(fp)
81126e44:	e0bff517 	ldw	r2,-44(fp)
81126e48:	1080058b 	ldhu	r2,22(r2)
81126e4c:	10bfffcc 	andi	r2,r2,65535
81126e50:	10002426 	beq	r2,zero,81126ee4 <OSEventPendMulti+0x354>
81126e54:	e0bffe17 	ldw	r2,-8(fp)
81126e58:	10c00104 	addi	r3,r2,4
81126e5c:	e0fffe15 	stw	r3,-8(fp)
81126e60:	e0fff517 	ldw	r3,-44(fp)
81126e64:	18c00417 	ldw	r3,16(r3)
81126e68:	19400104 	addi	r5,r3,4
81126e6c:	e13ff517 	ldw	r4,-44(fp)
81126e70:	21400415 	stw	r5,16(r4)
81126e74:	18c00017 	ldw	r3,0(r3)
81126e78:	10c00015 	stw	r3,0(r2)
81126e7c:	e0bff517 	ldw	r2,-44(fp)
81126e80:	10c00417 	ldw	r3,16(r2)
81126e84:	e0bff517 	ldw	r2,-44(fp)
81126e88:	10800217 	ldw	r2,8(r2)
81126e8c:	1880041e 	bne	r3,r2,81126ea0 <OSEventPendMulti+0x310>
81126e90:	e0bff517 	ldw	r2,-44(fp)
81126e94:	10c00117 	ldw	r3,4(r2)
81126e98:	e0bff517 	ldw	r2,-44(fp)
81126e9c:	10c00415 	stw	r3,16(r2)
81126ea0:	e0bff517 	ldw	r2,-44(fp)
81126ea4:	1080058b 	ldhu	r2,22(r2)
81126ea8:	10bfffc4 	addi	r2,r2,-1
81126eac:	1007883a 	mov	r3,r2
81126eb0:	e0bff517 	ldw	r2,-44(fp)
81126eb4:	10c0058d 	sth	r3,22(r2)
81126eb8:	e0bffd17 	ldw	r2,-12(fp)
81126ebc:	10c00104 	addi	r3,r2,4
81126ec0:	e0fffd15 	stw	r3,-12(fp)
81126ec4:	e0fff017 	ldw	r3,-64(fp)
81126ec8:	10c00015 	stw	r3,0(r2)
81126ecc:	00800044 	movi	r2,1
81126ed0:	e0bff105 	stb	r2,-60(fp)
81126ed4:	e0bff18b 	ldhu	r2,-58(fp)
81126ed8:	10800044 	addi	r2,r2,1
81126edc:	e0bff18d 	sth	r2,-58(fp)
81126ee0:	00000f06 	br	81126f20 <OSEventPendMulti+0x390>
81126ee4:	e0bff203 	ldbu	r2,-56(fp)
81126ee8:	10800114 	ori	r2,r2,4
81126eec:	e0bff205 	stb	r2,-56(fp)
81126ef0:	00000b06 	br	81126f20 <OSEventPendMulti+0x390>
81126ef4:	e0bff317 	ldw	r2,-52(fp)
81126ef8:	e0bff415 	stw	r2,-48(fp)
81126efc:	e0bff417 	ldw	r2,-48(fp)
81126f00:	1001703a 	wrctl	status,r2
81126f04:	e0bffd17 	ldw	r2,-12(fp)
81126f08:	10000015 	stw	zero,0(r2)
81126f0c:	e0800217 	ldw	r2,8(fp)
81126f10:	00c00044 	movi	r3,1
81126f14:	10c00005 	stb	r3,0(r2)
81126f18:	e0bff18b 	ldhu	r2,-58(fp)
81126f1c:	00009d06 	br	81127194 <OSEventPendMulti+0x604>
81126f20:	e0bfef17 	ldw	r2,-68(fp)
81126f24:	10800104 	addi	r2,r2,4
81126f28:	e0bfef15 	stw	r2,-68(fp)
81126f2c:	e0bfef17 	ldw	r2,-68(fp)
81126f30:	10800017 	ldw	r2,0(r2)
81126f34:	e0bff015 	stw	r2,-64(fp)
81126f38:	e0bff017 	ldw	r2,-64(fp)
81126f3c:	103f7d1e 	bne	r2,zero,81126d34 <__reset+0xfb106d34>
81126f40:	e0bff103 	ldbu	r2,-60(fp)
81126f44:	10800058 	cmpnei	r2,r2,1
81126f48:	10000a1e 	bne	r2,zero,81126f74 <OSEventPendMulti+0x3e4>
81126f4c:	e0bffd17 	ldw	r2,-12(fp)
81126f50:	10000015 	stw	zero,0(r2)
81126f54:	e0bff317 	ldw	r2,-52(fp)
81126f58:	e0bff615 	stw	r2,-40(fp)
81126f5c:	e0bff617 	ldw	r2,-40(fp)
81126f60:	1001703a 	wrctl	status,r2
81126f64:	e0800217 	ldw	r2,8(fp)
81126f68:	10000005 	stb	zero,0(r2)
81126f6c:	e0bff18b 	ldhu	r2,-58(fp)
81126f70:	00008806 	br	81127194 <OSEventPendMulti+0x604>
81126f74:	d0a08417 	ldw	r2,-32240(gp)
81126f78:	d0e08417 	ldw	r3,-32240(gp)
81126f7c:	19000c03 	ldbu	r4,48(r3)
81126f80:	e0fff203 	ldbu	r3,-56(fp)
81126f84:	20c6b03a 	or	r3,r4,r3
81126f88:	1809883a 	mov	r4,r3
81126f8c:	00ffe004 	movi	r3,-128
81126f90:	20c6b03a 	or	r3,r4,r3
81126f94:	10c00c05 	stb	r3,48(r2)
81126f98:	d0a08417 	ldw	r2,-32240(gp)
81126f9c:	10000c45 	stb	zero,49(r2)
81126fa0:	d0a08417 	ldw	r2,-32240(gp)
81126fa4:	e0ffff0b 	ldhu	r3,-4(fp)
81126fa8:	10c00b8d 	sth	r3,46(r2)
81126fac:	e13ffc17 	ldw	r4,-16(fp)
81126fb0:	1127b380 	call	81127b38 <OS_EventTaskWaitMulti>
81126fb4:	e0bff317 	ldw	r2,-52(fp)
81126fb8:	e0bff915 	stw	r2,-28(fp)
81126fbc:	e0bff917 	ldw	r2,-28(fp)
81126fc0:	1001703a 	wrctl	status,r2
81126fc4:	112833c0 	call	8112833c <OS_Sched>
81126fc8:	0005303a 	rdctl	r2,status
81126fcc:	e0bff715 	stw	r2,-36(fp)
81126fd0:	e0fff717 	ldw	r3,-36(fp)
81126fd4:	00bfff84 	movi	r2,-2
81126fd8:	1884703a 	and	r2,r3,r2
81126fdc:	1001703a 	wrctl	status,r2
81126fe0:	e0bff717 	ldw	r2,-36(fp)
81126fe4:	e0bff315 	stw	r2,-52(fp)
81126fe8:	d0a08417 	ldw	r2,-32240(gp)
81126fec:	10800c43 	ldbu	r2,49(r2)
81126ff0:	10803fcc 	andi	r2,r2,255
81126ff4:	10000226 	beq	r2,zero,81127000 <OSEventPendMulti+0x470>
81126ff8:	108000a0 	cmpeqi	r2,r2,2
81126ffc:	10001826 	beq	r2,zero,81127060 <OSEventPendMulti+0x4d0>
81127000:	d0a08417 	ldw	r2,-32240(gp)
81127004:	10800717 	ldw	r2,28(r2)
81127008:	e0bff015 	stw	r2,-64(fp)
8112700c:	e0bff017 	ldw	r2,-64(fp)
81127010:	10000b26 	beq	r2,zero,81127040 <OSEventPendMulti+0x4b0>
81127014:	e0bffd17 	ldw	r2,-12(fp)
81127018:	10c00104 	addi	r3,r2,4
8112701c:	e0fffd15 	stw	r3,-12(fp)
81127020:	e0fff017 	ldw	r3,-64(fp)
81127024:	10c00015 	stw	r3,0(r2)
81127028:	e0bffd17 	ldw	r2,-12(fp)
8112702c:	10000015 	stw	zero,0(r2)
81127030:	e0bff18b 	ldhu	r2,-58(fp)
81127034:	10800044 	addi	r2,r2,1
81127038:	e0bff18d 	sth	r2,-58(fp)
8112703c:	00000d06 	br	81127074 <OSEventPendMulti+0x4e4>
81127040:	d0a08417 	ldw	r2,-32240(gp)
81127044:	00c00044 	movi	r3,1
81127048:	10c00c45 	stb	r3,49(r2)
8112704c:	d0a08417 	ldw	r2,-32240(gp)
81127050:	e17ffc17 	ldw	r5,-16(fp)
81127054:	1009883a 	mov	r4,r2
81127058:	1127d500 	call	81127d50 <OS_EventTaskRemoveMulti>
8112705c:	00000506 	br	81127074 <OSEventPendMulti+0x4e4>
81127060:	d0a08417 	ldw	r2,-32240(gp)
81127064:	e17ffc17 	ldw	r5,-16(fp)
81127068:	1009883a 	mov	r4,r2
8112706c:	1127d500 	call	81127d50 <OS_EventTaskRemoveMulti>
81127070:	0001883a 	nop
81127074:	d0a08417 	ldw	r2,-32240(gp)
81127078:	10800c43 	ldbu	r2,49(r2)
8112707c:	10803fcc 	andi	r2,r2,255
81127080:	10000326 	beq	r2,zero,81127090 <OSEventPendMulti+0x500>
81127084:	108000a0 	cmpeqi	r2,r2,2
81127088:	1000231e 	bne	r2,zero,81127118 <OSEventPendMulti+0x588>
8112708c:	00002a06 	br	81127138 <OSEventPendMulti+0x5a8>
81127090:	e0bff017 	ldw	r2,-64(fp)
81127094:	10800003 	ldbu	r2,0(r2)
81127098:	10803fcc 	andi	r2,r2,255
8112709c:	0080100e 	bge	zero,r2,811270e0 <OSEventPendMulti+0x550>
811270a0:	10c000d0 	cmplti	r3,r2,3
811270a4:	1800071e 	bne	r3,zero,811270c4 <OSEventPendMulti+0x534>
811270a8:	108000e0 	cmpeqi	r2,r2,3
811270ac:	10000c26 	beq	r2,zero,811270e0 <OSEventPendMulti+0x550>
811270b0:	e0bffe17 	ldw	r2,-8(fp)
811270b4:	10c00104 	addi	r3,r2,4
811270b8:	e0fffe15 	stw	r3,-8(fp)
811270bc:	10000015 	stw	zero,0(r2)
811270c0:	00001206 	br	8112710c <OSEventPendMulti+0x57c>
811270c4:	e0bffe17 	ldw	r2,-8(fp)
811270c8:	10c00104 	addi	r3,r2,4
811270cc:	e0fffe15 	stw	r3,-8(fp)
811270d0:	d0e08417 	ldw	r3,-32240(gp)
811270d4:	18c00917 	ldw	r3,36(r3)
811270d8:	10c00015 	stw	r3,0(r2)
811270dc:	00000b06 	br	8112710c <OSEventPendMulti+0x57c>
811270e0:	e0bff317 	ldw	r2,-52(fp)
811270e4:	e0bff815 	stw	r2,-32(fp)
811270e8:	e0bff817 	ldw	r2,-32(fp)
811270ec:	1001703a 	wrctl	status,r2
811270f0:	e0bffd17 	ldw	r2,-12(fp)
811270f4:	10000015 	stw	zero,0(r2)
811270f8:	e0800217 	ldw	r2,8(fp)
811270fc:	00c00044 	movi	r3,1
81127100:	10c00005 	stb	r3,0(r2)
81127104:	e0bff18b 	ldhu	r2,-58(fp)
81127108:	00002206 	br	81127194 <OSEventPendMulti+0x604>
8112710c:	e0800217 	ldw	r2,8(fp)
81127110:	10000005 	stb	zero,0(r2)
81127114:	00001006 	br	81127158 <OSEventPendMulti+0x5c8>
81127118:	e0bffe17 	ldw	r2,-8(fp)
8112711c:	10c00104 	addi	r3,r2,4
81127120:	e0fffe15 	stw	r3,-8(fp)
81127124:	10000015 	stw	zero,0(r2)
81127128:	e0800217 	ldw	r2,8(fp)
8112712c:	00c00384 	movi	r3,14
81127130:	10c00005 	stb	r3,0(r2)
81127134:	00000806 	br	81127158 <OSEventPendMulti+0x5c8>
81127138:	e0bffe17 	ldw	r2,-8(fp)
8112713c:	10c00104 	addi	r3,r2,4
81127140:	e0fffe15 	stw	r3,-8(fp)
81127144:	10000015 	stw	zero,0(r2)
81127148:	e0800217 	ldw	r2,8(fp)
8112714c:	00c00284 	movi	r3,10
81127150:	10c00005 	stb	r3,0(r2)
81127154:	0001883a 	nop
81127158:	d0a08417 	ldw	r2,-32240(gp)
8112715c:	10000c05 	stb	zero,48(r2)
81127160:	d0a08417 	ldw	r2,-32240(gp)
81127164:	10000c45 	stb	zero,49(r2)
81127168:	d0a08417 	ldw	r2,-32240(gp)
8112716c:	10000715 	stw	zero,28(r2)
81127170:	d0a08417 	ldw	r2,-32240(gp)
81127174:	10000815 	stw	zero,32(r2)
81127178:	d0a08417 	ldw	r2,-32240(gp)
8112717c:	10000915 	stw	zero,36(r2)
81127180:	e0bff317 	ldw	r2,-52(fp)
81127184:	e0bffa15 	stw	r2,-24(fp)
81127188:	e0bffa17 	ldw	r2,-24(fp)
8112718c:	1001703a 	wrctl	status,r2
81127190:	e0bff18b 	ldhu	r2,-58(fp)
81127194:	e037883a 	mov	sp,fp
81127198:	dfc00117 	ldw	ra,4(sp)
8112719c:	df000017 	ldw	fp,0(sp)
811271a0:	dec00204 	addi	sp,sp,8
811271a4:	f800283a 	ret

811271a8 <OSInit>:
811271a8:	defffe04 	addi	sp,sp,-8
811271ac:	de00012e 	bgeu	sp,et,811271b4 <OSInit+0xc>
811271b0:	003b68fa 	trap	3
811271b4:	dfc00115 	stw	ra,4(sp)
811271b8:	df000015 	stw	fp,0(sp)
811271bc:	d839883a 	mov	fp,sp
811271c0:	11396e80 	call	811396e8 <OSInitHookBegin>
811271c4:	1127fb00 	call	81127fb0 <OS_InitMisc>
811271c8:	11280000 	call	81128000 <OS_InitRdyList>
811271cc:	11281840 	call	81128184 <OS_InitTCBList>
811271d0:	1127ec80 	call	81127ec8 <OS_InitEventList>
811271d4:	112a1440 	call	8112a144 <OS_FlagInit>
811271d8:	112aa8c0 	call	8112aa8c <OS_MemInit>
811271dc:	112cd5c0 	call	8112cd5c <OS_QInit>
811271e0:	11280740 	call	81128074 <OS_InitTaskIdle>
811271e4:	11280fc0 	call	811280fc <OS_InitTaskStat>
811271e8:	11301000 	call	81130100 <OSTmr_Init>
811271ec:	11397140 	call	81139714 <OSInitHookEnd>
811271f0:	1128a600 	call	81128a60 <OSDebugInit>
811271f4:	0001883a 	nop
811271f8:	e037883a 	mov	sp,fp
811271fc:	dfc00117 	ldw	ra,4(sp)
81127200:	df000017 	ldw	fp,0(sp)
81127204:	dec00204 	addi	sp,sp,8
81127208:	f800283a 	ret

8112720c <OSIntEnter>:
8112720c:	deffff04 	addi	sp,sp,-4
81127210:	de00012e 	bgeu	sp,et,81127218 <OSIntEnter+0xc>
81127214:	003b68fa 	trap	3
81127218:	df000015 	stw	fp,0(sp)
8112721c:	d839883a 	mov	fp,sp
81127220:	d0a07303 	ldbu	r2,-32308(gp)
81127224:	10803fcc 	andi	r2,r2,255
81127228:	10800058 	cmpnei	r2,r2,1
8112722c:	1000071e 	bne	r2,zero,8112724c <OSIntEnter+0x40>
81127230:	d0a08303 	ldbu	r2,-32244(gp)
81127234:	10803fcc 	andi	r2,r2,255
81127238:	10803fe0 	cmpeqi	r2,r2,255
8112723c:	1000031e 	bne	r2,zero,8112724c <OSIntEnter+0x40>
81127240:	d0a08303 	ldbu	r2,-32244(gp)
81127244:	10800044 	addi	r2,r2,1
81127248:	d0a08305 	stb	r2,-32244(gp)
8112724c:	0001883a 	nop
81127250:	e037883a 	mov	sp,fp
81127254:	df000017 	ldw	fp,0(sp)
81127258:	dec00104 	addi	sp,sp,4
8112725c:	f800283a 	ret

81127260 <OSIntExit>:
81127260:	defffb04 	addi	sp,sp,-20
81127264:	de00012e 	bgeu	sp,et,8112726c <OSIntExit+0xc>
81127268:	003b68fa 	trap	3
8112726c:	dfc00415 	stw	ra,16(sp)
81127270:	df000315 	stw	fp,12(sp)
81127274:	df000304 	addi	fp,sp,12
81127278:	e03ffd15 	stw	zero,-12(fp)
8112727c:	d0a07303 	ldbu	r2,-32308(gp)
81127280:	10803fcc 	andi	r2,r2,255
81127284:	10800058 	cmpnei	r2,r2,1
81127288:	10002f1e 	bne	r2,zero,81127348 <OSIntExit+0xe8>
8112728c:	0005303a 	rdctl	r2,status
81127290:	e0bfff15 	stw	r2,-4(fp)
81127294:	e0ffff17 	ldw	r3,-4(fp)
81127298:	00bfff84 	movi	r2,-2
8112729c:	1884703a 	and	r2,r3,r2
811272a0:	1001703a 	wrctl	status,r2
811272a4:	e0bfff17 	ldw	r2,-4(fp)
811272a8:	e0bffd15 	stw	r2,-12(fp)
811272ac:	d0a08303 	ldbu	r2,-32244(gp)
811272b0:	10803fcc 	andi	r2,r2,255
811272b4:	10000326 	beq	r2,zero,811272c4 <OSIntExit+0x64>
811272b8:	d0a08303 	ldbu	r2,-32244(gp)
811272bc:	10bfffc4 	addi	r2,r2,-1
811272c0:	d0a08305 	stb	r2,-32244(gp)
811272c4:	d0a08303 	ldbu	r2,-32244(gp)
811272c8:	10803fcc 	andi	r2,r2,255
811272cc:	10001a1e 	bne	r2,zero,81127338 <OSIntExit+0xd8>
811272d0:	d0a07103 	ldbu	r2,-32316(gp)
811272d4:	10803fcc 	andi	r2,r2,255
811272d8:	1000171e 	bne	r2,zero,81127338 <OSIntExit+0xd8>
811272dc:	11284140 	call	81128414 <OS_SchedNew>
811272e0:	d0e07583 	ldbu	r3,-32298(gp)
811272e4:	d0a075c3 	ldbu	r2,-32297(gp)
811272e8:	18c03fcc 	andi	r3,r3,255
811272ec:	10803fcc 	andi	r2,r2,255
811272f0:	18801126 	beq	r3,r2,81127338 <OSIntExit+0xd8>
811272f4:	d0a07583 	ldbu	r2,-32298(gp)
811272f8:	10c03fcc 	andi	r3,r2,255
811272fc:	00a04574 	movhi	r2,33045
81127300:	1087e104 	addi	r2,r2,8068
81127304:	18c7883a 	add	r3,r3,r3
81127308:	18c7883a 	add	r3,r3,r3
8112730c:	10c5883a 	add	r2,r2,r3
81127310:	10800017 	ldw	r2,0(r2)
81127314:	d0a07e15 	stw	r2,-32264(gp)
81127318:	d0a07e17 	ldw	r2,-32264(gp)
8112731c:	10c00e17 	ldw	r3,56(r2)
81127320:	18c00044 	addi	r3,r3,1
81127324:	10c00e15 	stw	r3,56(r2)
81127328:	d0a07817 	ldw	r2,-32288(gp)
8112732c:	10800044 	addi	r2,r2,1
81127330:	d0a07815 	stw	r2,-32288(gp)
81127334:	11393a80 	call	811393a8 <OSCtxSw>
81127338:	e0bffd17 	ldw	r2,-12(fp)
8112733c:	e0bffe15 	stw	r2,-8(fp)
81127340:	e0bffe17 	ldw	r2,-8(fp)
81127344:	1001703a 	wrctl	status,r2
81127348:	0001883a 	nop
8112734c:	e037883a 	mov	sp,fp
81127350:	dfc00117 	ldw	ra,4(sp)
81127354:	df000017 	ldw	fp,0(sp)
81127358:	dec00204 	addi	sp,sp,8
8112735c:	f800283a 	ret

81127360 <OSSchedLock>:
81127360:	defffc04 	addi	sp,sp,-16
81127364:	de00012e 	bgeu	sp,et,8112736c <OSSchedLock+0xc>
81127368:	003b68fa 	trap	3
8112736c:	df000315 	stw	fp,12(sp)
81127370:	df000304 	addi	fp,sp,12
81127374:	e03ffd15 	stw	zero,-12(fp)
81127378:	d0a07303 	ldbu	r2,-32308(gp)
8112737c:	10803fcc 	andi	r2,r2,255
81127380:	10800058 	cmpnei	r2,r2,1
81127384:	1000161e 	bne	r2,zero,811273e0 <OSSchedLock+0x80>
81127388:	0005303a 	rdctl	r2,status
8112738c:	e0bfff15 	stw	r2,-4(fp)
81127390:	e0ffff17 	ldw	r3,-4(fp)
81127394:	00bfff84 	movi	r2,-2
81127398:	1884703a 	and	r2,r3,r2
8112739c:	1001703a 	wrctl	status,r2
811273a0:	e0bfff17 	ldw	r2,-4(fp)
811273a4:	e0bffd15 	stw	r2,-12(fp)
811273a8:	d0a08303 	ldbu	r2,-32244(gp)
811273ac:	10803fcc 	andi	r2,r2,255
811273b0:	1000071e 	bne	r2,zero,811273d0 <OSSchedLock+0x70>
811273b4:	d0a07103 	ldbu	r2,-32316(gp)
811273b8:	10803fcc 	andi	r2,r2,255
811273bc:	10803fe0 	cmpeqi	r2,r2,255
811273c0:	1000031e 	bne	r2,zero,811273d0 <OSSchedLock+0x70>
811273c4:	d0a07103 	ldbu	r2,-32316(gp)
811273c8:	10800044 	addi	r2,r2,1
811273cc:	d0a07105 	stb	r2,-32316(gp)
811273d0:	e0bffd17 	ldw	r2,-12(fp)
811273d4:	e0bffe15 	stw	r2,-8(fp)
811273d8:	e0bffe17 	ldw	r2,-8(fp)
811273dc:	1001703a 	wrctl	status,r2
811273e0:	0001883a 	nop
811273e4:	e037883a 	mov	sp,fp
811273e8:	df000017 	ldw	fp,0(sp)
811273ec:	dec00104 	addi	sp,sp,4
811273f0:	f800283a 	ret

811273f4 <OSSchedUnlock>:
811273f4:	defff804 	addi	sp,sp,-32
811273f8:	de00012e 	bgeu	sp,et,81127400 <OSSchedUnlock+0xc>
811273fc:	003b68fa 	trap	3
81127400:	dfc00715 	stw	ra,28(sp)
81127404:	df000615 	stw	fp,24(sp)
81127408:	df000604 	addi	fp,sp,24
8112740c:	e03ffa15 	stw	zero,-24(fp)
81127410:	d0a07303 	ldbu	r2,-32308(gp)
81127414:	10803fcc 	andi	r2,r2,255
81127418:	10800058 	cmpnei	r2,r2,1
8112741c:	1000281e 	bne	r2,zero,811274c0 <OSSchedUnlock+0xcc>
81127420:	0005303a 	rdctl	r2,status
81127424:	e0bfff15 	stw	r2,-4(fp)
81127428:	e0ffff17 	ldw	r3,-4(fp)
8112742c:	00bfff84 	movi	r2,-2
81127430:	1884703a 	and	r2,r3,r2
81127434:	1001703a 	wrctl	status,r2
81127438:	e0bfff17 	ldw	r2,-4(fp)
8112743c:	e0bffa15 	stw	r2,-24(fp)
81127440:	d0a07103 	ldbu	r2,-32316(gp)
81127444:	10803fcc 	andi	r2,r2,255
81127448:	10001926 	beq	r2,zero,811274b0 <OSSchedUnlock+0xbc>
8112744c:	d0a07103 	ldbu	r2,-32316(gp)
81127450:	10bfffc4 	addi	r2,r2,-1
81127454:	d0a07105 	stb	r2,-32316(gp)
81127458:	d0a07103 	ldbu	r2,-32316(gp)
8112745c:	10803fcc 	andi	r2,r2,255
81127460:	10000e1e 	bne	r2,zero,8112749c <OSSchedUnlock+0xa8>
81127464:	d0a08303 	ldbu	r2,-32244(gp)
81127468:	10803fcc 	andi	r2,r2,255
8112746c:	1000061e 	bne	r2,zero,81127488 <OSSchedUnlock+0x94>
81127470:	e0bffa17 	ldw	r2,-24(fp)
81127474:	e0bffb15 	stw	r2,-20(fp)
81127478:	e0bffb17 	ldw	r2,-20(fp)
8112747c:	1001703a 	wrctl	status,r2
81127480:	112833c0 	call	8112833c <OS_Sched>
81127484:	00000e06 	br	811274c0 <OSSchedUnlock+0xcc>
81127488:	e0bffa17 	ldw	r2,-24(fp)
8112748c:	e0bffc15 	stw	r2,-16(fp)
81127490:	e0bffc17 	ldw	r2,-16(fp)
81127494:	1001703a 	wrctl	status,r2
81127498:	00000906 	br	811274c0 <OSSchedUnlock+0xcc>
8112749c:	e0bffa17 	ldw	r2,-24(fp)
811274a0:	e0bffd15 	stw	r2,-12(fp)
811274a4:	e0bffd17 	ldw	r2,-12(fp)
811274a8:	1001703a 	wrctl	status,r2
811274ac:	00000406 	br	811274c0 <OSSchedUnlock+0xcc>
811274b0:	e0bffa17 	ldw	r2,-24(fp)
811274b4:	e0bffe15 	stw	r2,-8(fp)
811274b8:	e0bffe17 	ldw	r2,-8(fp)
811274bc:	1001703a 	wrctl	status,r2
811274c0:	0001883a 	nop
811274c4:	e037883a 	mov	sp,fp
811274c8:	dfc00117 	ldw	ra,4(sp)
811274cc:	df000017 	ldw	fp,0(sp)
811274d0:	dec00204 	addi	sp,sp,8
811274d4:	f800283a 	ret

811274d8 <OSStart>:
811274d8:	defffe04 	addi	sp,sp,-8
811274dc:	de00012e 	bgeu	sp,et,811274e4 <OSStart+0xc>
811274e0:	003b68fa 	trap	3
811274e4:	dfc00115 	stw	ra,4(sp)
811274e8:	df000015 	stw	fp,0(sp)
811274ec:	d839883a 	mov	fp,sp
811274f0:	d0a07303 	ldbu	r2,-32308(gp)
811274f4:	10803fcc 	andi	r2,r2,255
811274f8:	10000f1e 	bne	r2,zero,81127538 <OSStart+0x60>
811274fc:	11284140 	call	81128414 <OS_SchedNew>
81127500:	d0a07583 	ldbu	r2,-32298(gp)
81127504:	d0a075c5 	stb	r2,-32297(gp)
81127508:	d0a07583 	ldbu	r2,-32298(gp)
8112750c:	10c03fcc 	andi	r3,r2,255
81127510:	00a04574 	movhi	r2,33045
81127514:	1087e104 	addi	r2,r2,8068
81127518:	18c7883a 	add	r3,r3,r3
8112751c:	18c7883a 	add	r3,r3,r3
81127520:	10c5883a 	add	r2,r2,r3
81127524:	10800017 	ldw	r2,0(r2)
81127528:	d0a07e15 	stw	r2,-32264(gp)
8112752c:	d0a07e17 	ldw	r2,-32264(gp)
81127530:	d0a08415 	stw	r2,-32240(gp)
81127534:	11394440 	call	81139444 <OSStartHighRdy>
81127538:	0001883a 	nop
8112753c:	e037883a 	mov	sp,fp
81127540:	dfc00117 	ldw	ra,4(sp)
81127544:	df000017 	ldw	fp,0(sp)
81127548:	dec00204 	addi	sp,sp,8
8112754c:	f800283a 	ret

81127550 <OSStatInit>:
81127550:	defff904 	addi	sp,sp,-28
81127554:	de00012e 	bgeu	sp,et,8112755c <OSStatInit+0xc>
81127558:	003b68fa 	trap	3
8112755c:	dfc00615 	stw	ra,24(sp)
81127560:	df000515 	stw	fp,20(sp)
81127564:	df000504 	addi	fp,sp,20
81127568:	e03ffb15 	stw	zero,-20(fp)
8112756c:	01000084 	movi	r4,2
81127570:	112f0780 	call	8112f078 <OSTimeDly>
81127574:	0005303a 	rdctl	r2,status
81127578:	e0bffc15 	stw	r2,-16(fp)
8112757c:	e0fffc17 	ldw	r3,-16(fp)
81127580:	00bfff84 	movi	r2,-2
81127584:	1884703a 	and	r2,r3,r2
81127588:	1001703a 	wrctl	status,r2
8112758c:	e0bffc17 	ldw	r2,-16(fp)
81127590:	e0bffb15 	stw	r2,-20(fp)
81127594:	d0207415 	stw	zero,-32304(gp)
81127598:	e0bffb17 	ldw	r2,-20(fp)
8112759c:	e0bffd15 	stw	r2,-12(fp)
811275a0:	e0bffd17 	ldw	r2,-12(fp)
811275a4:	1001703a 	wrctl	status,r2
811275a8:	01001904 	movi	r4,100
811275ac:	112f0780 	call	8112f078 <OSTimeDly>
811275b0:	0005303a 	rdctl	r2,status
811275b4:	e0bffe15 	stw	r2,-8(fp)
811275b8:	e0fffe17 	ldw	r3,-8(fp)
811275bc:	00bfff84 	movi	r2,-2
811275c0:	1884703a 	and	r2,r3,r2
811275c4:	1001703a 	wrctl	status,r2
811275c8:	e0bffe17 	ldw	r2,-8(fp)
811275cc:	e0bffb15 	stw	r2,-20(fp)
811275d0:	d0a07417 	ldw	r2,-32304(gp)
811275d4:	d0a07a15 	stw	r2,-32280(gp)
811275d8:	00800044 	movi	r2,1
811275dc:	d0a08905 	stb	r2,-32220(gp)
811275e0:	e0bffb17 	ldw	r2,-20(fp)
811275e4:	e0bfff15 	stw	r2,-4(fp)
811275e8:	e0bfff17 	ldw	r2,-4(fp)
811275ec:	1001703a 	wrctl	status,r2
811275f0:	0001883a 	nop
811275f4:	e037883a 	mov	sp,fp
811275f8:	dfc00117 	ldw	ra,4(sp)
811275fc:	df000017 	ldw	fp,0(sp)
81127600:	dec00204 	addi	sp,sp,8
81127604:	f800283a 	ret

81127608 <OSTimeTick>:
81127608:	defff704 	addi	sp,sp,-36
8112760c:	de00012e 	bgeu	sp,et,81127614 <OSTimeTick+0xc>
81127610:	003b68fa 	trap	3
81127614:	dfc00815 	stw	ra,32(sp)
81127618:	df000715 	stw	fp,28(sp)
8112761c:	df000704 	addi	fp,sp,28
81127620:	e03ffb15 	stw	zero,-20(fp)
81127624:	11396940 	call	81139694 <OSTimeTickHook>
81127628:	0005303a 	rdctl	r2,status
8112762c:	e0bffd15 	stw	r2,-12(fp)
81127630:	e0fffd17 	ldw	r3,-12(fp)
81127634:	00bfff84 	movi	r2,-2
81127638:	1884703a 	and	r2,r3,r2
8112763c:	1001703a 	wrctl	status,r2
81127640:	e0bffd17 	ldw	r2,-12(fp)
81127644:	e0bffb15 	stw	r2,-20(fp)
81127648:	d0a08617 	ldw	r2,-32232(gp)
8112764c:	10800044 	addi	r2,r2,1
81127650:	d0a08615 	stw	r2,-32232(gp)
81127654:	e0bffb17 	ldw	r2,-20(fp)
81127658:	e0bfff15 	stw	r2,-4(fp)
8112765c:	e0bfff17 	ldw	r2,-4(fp)
81127660:	1001703a 	wrctl	status,r2
81127664:	d0a07303 	ldbu	r2,-32308(gp)
81127668:	10803fcc 	andi	r2,r2,255
8112766c:	10800058 	cmpnei	r2,r2,1
81127670:	10006a1e 	bne	r2,zero,8112781c <OSTimeTick+0x214>
81127674:	d0a07703 	ldbu	r2,-32292(gp)
81127678:	10803fcc 	andi	r2,r2,255
8112767c:	10c00060 	cmpeqi	r3,r2,1
81127680:	1800061e 	bne	r3,zero,8112769c <OSTimeTick+0x94>
81127684:	10c000a0 	cmpeqi	r3,r2,2
81127688:	1800061e 	bne	r3,zero,811276a4 <OSTimeTick+0x9c>
8112768c:	10000a1e 	bne	r2,zero,811276b8 <OSTimeTick+0xb0>
81127690:	00800044 	movi	r2,1
81127694:	e0bffa05 	stb	r2,-24(fp)
81127698:	00000b06 	br	811276c8 <OSTimeTick+0xc0>
8112769c:	e03ffa05 	stb	zero,-24(fp)
811276a0:	00000906 	br	811276c8 <OSTimeTick+0xc0>
811276a4:	00800044 	movi	r2,1
811276a8:	e0bffa05 	stb	r2,-24(fp)
811276ac:	00800044 	movi	r2,1
811276b0:	d0a07705 	stb	r2,-32292(gp)
811276b4:	00000406 	br	811276c8 <OSTimeTick+0xc0>
811276b8:	00800044 	movi	r2,1
811276bc:	e0bffa05 	stb	r2,-24(fp)
811276c0:	d0207705 	stb	zero,-32292(gp)
811276c4:	0001883a 	nop
811276c8:	e0bffa03 	ldbu	r2,-24(fp)
811276cc:	10005226 	beq	r2,zero,81127818 <OSTimeTick+0x210>
811276d0:	d0a07617 	ldw	r2,-32296(gp)
811276d4:	e0bff915 	stw	r2,-28(fp)
811276d8:	00004906 	br	81127800 <OSTimeTick+0x1f8>
811276dc:	0005303a 	rdctl	r2,status
811276e0:	e0bffc15 	stw	r2,-16(fp)
811276e4:	e0fffc17 	ldw	r3,-16(fp)
811276e8:	00bfff84 	movi	r2,-2
811276ec:	1884703a 	and	r2,r3,r2
811276f0:	1001703a 	wrctl	status,r2
811276f4:	e0bffc17 	ldw	r2,-16(fp)
811276f8:	e0bffb15 	stw	r2,-20(fp)
811276fc:	e0bff917 	ldw	r2,-28(fp)
81127700:	10800b8b 	ldhu	r2,46(r2)
81127704:	10bfffcc 	andi	r2,r2,65535
81127708:	10003626 	beq	r2,zero,811277e4 <OSTimeTick+0x1dc>
8112770c:	e0bff917 	ldw	r2,-28(fp)
81127710:	10800b8b 	ldhu	r2,46(r2)
81127714:	10bfffc4 	addi	r2,r2,-1
81127718:	1007883a 	mov	r3,r2
8112771c:	e0bff917 	ldw	r2,-28(fp)
81127720:	10c00b8d 	sth	r3,46(r2)
81127724:	e0bff917 	ldw	r2,-28(fp)
81127728:	10800b8b 	ldhu	r2,46(r2)
8112772c:	10bfffcc 	andi	r2,r2,65535
81127730:	10002c1e 	bne	r2,zero,811277e4 <OSTimeTick+0x1dc>
81127734:	e0bff917 	ldw	r2,-28(fp)
81127738:	10800c03 	ldbu	r2,48(r2)
8112773c:	10803fcc 	andi	r2,r2,255
81127740:	10800dcc 	andi	r2,r2,55
81127744:	10000b26 	beq	r2,zero,81127774 <OSTimeTick+0x16c>
81127748:	e0bff917 	ldw	r2,-28(fp)
8112774c:	10c00c03 	ldbu	r3,48(r2)
81127750:	00bff204 	movi	r2,-56
81127754:	1884703a 	and	r2,r3,r2
81127758:	1007883a 	mov	r3,r2
8112775c:	e0bff917 	ldw	r2,-28(fp)
81127760:	10c00c05 	stb	r3,48(r2)
81127764:	e0bff917 	ldw	r2,-28(fp)
81127768:	00c00044 	movi	r3,1
8112776c:	10c00c45 	stb	r3,49(r2)
81127770:	00000206 	br	8112777c <OSTimeTick+0x174>
81127774:	e0bff917 	ldw	r2,-28(fp)
81127778:	10000c45 	stb	zero,49(r2)
8112777c:	e0bff917 	ldw	r2,-28(fp)
81127780:	10800c03 	ldbu	r2,48(r2)
81127784:	10803fcc 	andi	r2,r2,255
81127788:	1080020c 	andi	r2,r2,8
8112778c:	1000151e 	bne	r2,zero,811277e4 <OSTimeTick+0x1dc>
81127790:	e0bff917 	ldw	r2,-28(fp)
81127794:	10c00d83 	ldbu	r3,54(r2)
81127798:	d0a08003 	ldbu	r2,-32256(gp)
8112779c:	1884b03a 	or	r2,r3,r2
811277a0:	d0a08005 	stb	r2,-32256(gp)
811277a4:	e0bff917 	ldw	r2,-28(fp)
811277a8:	10800d03 	ldbu	r2,52(r2)
811277ac:	10c03fcc 	andi	r3,r2,255
811277b0:	e0bff917 	ldw	r2,-28(fp)
811277b4:	10800d03 	ldbu	r2,52(r2)
811277b8:	11003fcc 	andi	r4,r2,255
811277bc:	d0a08044 	addi	r2,gp,-32255
811277c0:	2085883a 	add	r2,r4,r2
811277c4:	11000003 	ldbu	r4,0(r2)
811277c8:	e0bff917 	ldw	r2,-28(fp)
811277cc:	10800d43 	ldbu	r2,53(r2)
811277d0:	2084b03a 	or	r2,r4,r2
811277d4:	1009883a 	mov	r4,r2
811277d8:	d0a08044 	addi	r2,gp,-32255
811277dc:	1885883a 	add	r2,r3,r2
811277e0:	11000005 	stb	r4,0(r2)
811277e4:	e0bff917 	ldw	r2,-28(fp)
811277e8:	10800517 	ldw	r2,20(r2)
811277ec:	e0bff915 	stw	r2,-28(fp)
811277f0:	e0bffb17 	ldw	r2,-20(fp)
811277f4:	e0bffe15 	stw	r2,-8(fp)
811277f8:	e0bffe17 	ldw	r2,-8(fp)
811277fc:	1001703a 	wrctl	status,r2
81127800:	e0bff917 	ldw	r2,-28(fp)
81127804:	10800c83 	ldbu	r2,50(r2)
81127808:	10803fcc 	andi	r2,r2,255
8112780c:	10800a18 	cmpnei	r2,r2,40
81127810:	103fb21e 	bne	r2,zero,811276dc <__reset+0xfb1076dc>
81127814:	00000106 	br	8112781c <OSTimeTick+0x214>
81127818:	0001883a 	nop
8112781c:	e037883a 	mov	sp,fp
81127820:	dfc00117 	ldw	ra,4(sp)
81127824:	df000017 	ldw	fp,0(sp)
81127828:	dec00204 	addi	sp,sp,8
8112782c:	f800283a 	ret

81127830 <OSVersion>:
81127830:	deffff04 	addi	sp,sp,-4
81127834:	de00012e 	bgeu	sp,et,8112783c <OSVersion+0xc>
81127838:	003b68fa 	trap	3
8112783c:	df000015 	stw	fp,0(sp)
81127840:	d839883a 	mov	fp,sp
81127844:	00804784 	movi	r2,286
81127848:	e037883a 	mov	sp,fp
8112784c:	df000017 	ldw	fp,0(sp)
81127850:	dec00104 	addi	sp,sp,4
81127854:	f800283a 	ret

81127858 <OS_Dummy>:
81127858:	deffff04 	addi	sp,sp,-4
8112785c:	de00012e 	bgeu	sp,et,81127864 <OS_Dummy+0xc>
81127860:	003b68fa 	trap	3
81127864:	df000015 	stw	fp,0(sp)
81127868:	d839883a 	mov	fp,sp
8112786c:	0001883a 	nop
81127870:	e037883a 	mov	sp,fp
81127874:	df000017 	ldw	fp,0(sp)
81127878:	dec00104 	addi	sp,sp,4
8112787c:	f800283a 	ret

81127880 <OS_EventTaskRdy>:
81127880:	defff804 	addi	sp,sp,-32
81127884:	de00012e 	bgeu	sp,et,8112788c <OS_EventTaskRdy+0xc>
81127888:	003b68fa 	trap	3
8112788c:	dfc00715 	stw	ra,28(sp)
81127890:	df000615 	stw	fp,24(sp)
81127894:	df000604 	addi	fp,sp,24
81127898:	e13ffc15 	stw	r4,-16(fp)
8112789c:	e17ffd15 	stw	r5,-12(fp)
811278a0:	3007883a 	mov	r3,r6
811278a4:	3805883a 	mov	r2,r7
811278a8:	e0fffe05 	stb	r3,-8(fp)
811278ac:	e0bfff05 	stb	r2,-4(fp)
811278b0:	e0bffc17 	ldw	r2,-16(fp)
811278b4:	10800283 	ldbu	r2,10(r2)
811278b8:	10c03fcc 	andi	r3,r2,255
811278bc:	00a04534 	movhi	r2,33044
811278c0:	10b20c04 	addi	r2,r2,-14288
811278c4:	10c5883a 	add	r2,r2,r3
811278c8:	10800003 	ldbu	r2,0(r2)
811278cc:	e0bffa05 	stb	r2,-24(fp)
811278d0:	e0bffa03 	ldbu	r2,-24(fp)
811278d4:	e0fffc17 	ldw	r3,-16(fp)
811278d8:	1885883a 	add	r2,r3,r2
811278dc:	108002c4 	addi	r2,r2,11
811278e0:	10800003 	ldbu	r2,0(r2)
811278e4:	10c03fcc 	andi	r3,r2,255
811278e8:	00a04534 	movhi	r2,33044
811278ec:	10b20c04 	addi	r2,r2,-14288
811278f0:	10c5883a 	add	r2,r2,r3
811278f4:	10800003 	ldbu	r2,0(r2)
811278f8:	e0bffa45 	stb	r2,-23(fp)
811278fc:	e0bffa03 	ldbu	r2,-24(fp)
81127900:	100490fa 	slli	r2,r2,3
81127904:	1007883a 	mov	r3,r2
81127908:	e0bffa43 	ldbu	r2,-23(fp)
8112790c:	1885883a 	add	r2,r3,r2
81127910:	e0bffa85 	stb	r2,-22(fp)
81127914:	e0fffa83 	ldbu	r3,-22(fp)
81127918:	00a04574 	movhi	r2,33045
8112791c:	1087e104 	addi	r2,r2,8068
81127920:	18c7883a 	add	r3,r3,r3
81127924:	18c7883a 	add	r3,r3,r3
81127928:	10c5883a 	add	r2,r2,r3
8112792c:	10800017 	ldw	r2,0(r2)
81127930:	e0bffb15 	stw	r2,-20(fp)
81127934:	e0bffb17 	ldw	r2,-20(fp)
81127938:	10000b8d 	sth	zero,46(r2)
8112793c:	e0bffb17 	ldw	r2,-20(fp)
81127940:	e0fffd17 	ldw	r3,-12(fp)
81127944:	10c00915 	stw	r3,36(r2)
81127948:	e0bffb17 	ldw	r2,-20(fp)
8112794c:	10800c03 	ldbu	r2,48(r2)
81127950:	1007883a 	mov	r3,r2
81127954:	e0bffe03 	ldbu	r2,-8(fp)
81127958:	0084303a 	nor	r2,zero,r2
8112795c:	1884703a 	and	r2,r3,r2
81127960:	1007883a 	mov	r3,r2
81127964:	e0bffb17 	ldw	r2,-20(fp)
81127968:	10c00c05 	stb	r3,48(r2)
8112796c:	e0bffb17 	ldw	r2,-20(fp)
81127970:	e0ffff03 	ldbu	r3,-4(fp)
81127974:	10c00c45 	stb	r3,49(r2)
81127978:	e0bffb17 	ldw	r2,-20(fp)
8112797c:	10800c03 	ldbu	r2,48(r2)
81127980:	10803fcc 	andi	r2,r2,255
81127984:	1080020c 	andi	r2,r2,8
81127988:	1000111e 	bne	r2,zero,811279d0 <OS_EventTaskRdy+0x150>
8112798c:	e0bffb17 	ldw	r2,-20(fp)
81127990:	10c00d83 	ldbu	r3,54(r2)
81127994:	d0a08003 	ldbu	r2,-32256(gp)
81127998:	1884b03a 	or	r2,r3,r2
8112799c:	d0a08005 	stb	r2,-32256(gp)
811279a0:	e0fffa03 	ldbu	r3,-24(fp)
811279a4:	e13ffa03 	ldbu	r4,-24(fp)
811279a8:	d0a08044 	addi	r2,gp,-32255
811279ac:	2085883a 	add	r2,r4,r2
811279b0:	11000003 	ldbu	r4,0(r2)
811279b4:	e0bffb17 	ldw	r2,-20(fp)
811279b8:	10800d43 	ldbu	r2,53(r2)
811279bc:	2084b03a 	or	r2,r4,r2
811279c0:	1009883a 	mov	r4,r2
811279c4:	d0a08044 	addi	r2,gp,-32255
811279c8:	1885883a 	add	r2,r3,r2
811279cc:	11000005 	stb	r4,0(r2)
811279d0:	e17ffc17 	ldw	r5,-16(fp)
811279d4:	e13ffb17 	ldw	r4,-20(fp)
811279d8:	1127c900 	call	81127c90 <OS_EventTaskRemove>
811279dc:	e0bffb17 	ldw	r2,-20(fp)
811279e0:	10800817 	ldw	r2,32(r2)
811279e4:	10000826 	beq	r2,zero,81127a08 <OS_EventTaskRdy+0x188>
811279e8:	e0bffb17 	ldw	r2,-20(fp)
811279ec:	10800817 	ldw	r2,32(r2)
811279f0:	100b883a 	mov	r5,r2
811279f4:	e13ffb17 	ldw	r4,-20(fp)
811279f8:	1127d500 	call	81127d50 <OS_EventTaskRemoveMulti>
811279fc:	e0bffb17 	ldw	r2,-20(fp)
81127a00:	e0fffc17 	ldw	r3,-16(fp)
81127a04:	10c00715 	stw	r3,28(r2)
81127a08:	e0bffa83 	ldbu	r2,-22(fp)
81127a0c:	e037883a 	mov	sp,fp
81127a10:	dfc00117 	ldw	ra,4(sp)
81127a14:	df000017 	ldw	fp,0(sp)
81127a18:	dec00204 	addi	sp,sp,8
81127a1c:	f800283a 	ret

81127a20 <OS_EventTaskWait>:
81127a20:	defffd04 	addi	sp,sp,-12
81127a24:	de00012e 	bgeu	sp,et,81127a2c <OS_EventTaskWait+0xc>
81127a28:	003b68fa 	trap	3
81127a2c:	df000215 	stw	fp,8(sp)
81127a30:	df000204 	addi	fp,sp,8
81127a34:	e13fff15 	stw	r4,-4(fp)
81127a38:	d0a08417 	ldw	r2,-32240(gp)
81127a3c:	e0ffff17 	ldw	r3,-4(fp)
81127a40:	10c00715 	stw	r3,28(r2)
81127a44:	d0a08417 	ldw	r2,-32240(gp)
81127a48:	10800d03 	ldbu	r2,52(r2)
81127a4c:	10803fcc 	andi	r2,r2,255
81127a50:	d0e08417 	ldw	r3,-32240(gp)
81127a54:	18c00d03 	ldbu	r3,52(r3)
81127a58:	18c03fcc 	andi	r3,r3,255
81127a5c:	e13fff17 	ldw	r4,-4(fp)
81127a60:	20c7883a 	add	r3,r4,r3
81127a64:	18c002c4 	addi	r3,r3,11
81127a68:	19000003 	ldbu	r4,0(r3)
81127a6c:	d0e08417 	ldw	r3,-32240(gp)
81127a70:	18c00d43 	ldbu	r3,53(r3)
81127a74:	20c6b03a 	or	r3,r4,r3
81127a78:	1809883a 	mov	r4,r3
81127a7c:	e0ffff17 	ldw	r3,-4(fp)
81127a80:	1885883a 	add	r2,r3,r2
81127a84:	108002c4 	addi	r2,r2,11
81127a88:	11000005 	stb	r4,0(r2)
81127a8c:	e0bfff17 	ldw	r2,-4(fp)
81127a90:	10c00283 	ldbu	r3,10(r2)
81127a94:	d0a08417 	ldw	r2,-32240(gp)
81127a98:	10800d83 	ldbu	r2,54(r2)
81127a9c:	1884b03a 	or	r2,r3,r2
81127aa0:	1007883a 	mov	r3,r2
81127aa4:	e0bfff17 	ldw	r2,-4(fp)
81127aa8:	10c00285 	stb	r3,10(r2)
81127aac:	d0a08417 	ldw	r2,-32240(gp)
81127ab0:	10800d03 	ldbu	r2,52(r2)
81127ab4:	e0bffe05 	stb	r2,-8(fp)
81127ab8:	e0fffe03 	ldbu	r3,-8(fp)
81127abc:	e13ffe03 	ldbu	r4,-8(fp)
81127ac0:	d0a08044 	addi	r2,gp,-32255
81127ac4:	2085883a 	add	r2,r4,r2
81127ac8:	10800003 	ldbu	r2,0(r2)
81127acc:	1009883a 	mov	r4,r2
81127ad0:	d0a08417 	ldw	r2,-32240(gp)
81127ad4:	10800d43 	ldbu	r2,53(r2)
81127ad8:	0084303a 	nor	r2,zero,r2
81127adc:	2084703a 	and	r2,r4,r2
81127ae0:	1009883a 	mov	r4,r2
81127ae4:	d0a08044 	addi	r2,gp,-32255
81127ae8:	1885883a 	add	r2,r3,r2
81127aec:	11000005 	stb	r4,0(r2)
81127af0:	e0fffe03 	ldbu	r3,-8(fp)
81127af4:	d0a08044 	addi	r2,gp,-32255
81127af8:	1885883a 	add	r2,r3,r2
81127afc:	10800003 	ldbu	r2,0(r2)
81127b00:	10803fcc 	andi	r2,r2,255
81127b04:	1000071e 	bne	r2,zero,81127b24 <OS_EventTaskWait+0x104>
81127b08:	d0a08417 	ldw	r2,-32240(gp)
81127b0c:	10800d83 	ldbu	r2,54(r2)
81127b10:	0084303a 	nor	r2,zero,r2
81127b14:	1007883a 	mov	r3,r2
81127b18:	d0a08003 	ldbu	r2,-32256(gp)
81127b1c:	1884703a 	and	r2,r3,r2
81127b20:	d0a08005 	stb	r2,-32256(gp)
81127b24:	0001883a 	nop
81127b28:	e037883a 	mov	sp,fp
81127b2c:	df000017 	ldw	fp,0(sp)
81127b30:	dec00104 	addi	sp,sp,4
81127b34:	f800283a 	ret

81127b38 <OS_EventTaskWaitMulti>:
81127b38:	defffb04 	addi	sp,sp,-20
81127b3c:	de00012e 	bgeu	sp,et,81127b44 <OS_EventTaskWaitMulti+0xc>
81127b40:	003b68fa 	trap	3
81127b44:	df000415 	stw	fp,16(sp)
81127b48:	df000404 	addi	fp,sp,16
81127b4c:	e13fff15 	stw	r4,-4(fp)
81127b50:	d0a08417 	ldw	r2,-32240(gp)
81127b54:	10000715 	stw	zero,28(r2)
81127b58:	d0a08417 	ldw	r2,-32240(gp)
81127b5c:	e0ffff17 	ldw	r3,-4(fp)
81127b60:	10c00815 	stw	r3,32(r2)
81127b64:	e0bfff17 	ldw	r2,-4(fp)
81127b68:	e0bffc15 	stw	r2,-16(fp)
81127b6c:	e0bffc17 	ldw	r2,-16(fp)
81127b70:	10800017 	ldw	r2,0(r2)
81127b74:	e0bffd15 	stw	r2,-12(fp)
81127b78:	00002006 	br	81127bfc <OS_EventTaskWaitMulti+0xc4>
81127b7c:	d0a08417 	ldw	r2,-32240(gp)
81127b80:	10800d03 	ldbu	r2,52(r2)
81127b84:	10803fcc 	andi	r2,r2,255
81127b88:	d0e08417 	ldw	r3,-32240(gp)
81127b8c:	18c00d03 	ldbu	r3,52(r3)
81127b90:	18c03fcc 	andi	r3,r3,255
81127b94:	e13ffd17 	ldw	r4,-12(fp)
81127b98:	20c7883a 	add	r3,r4,r3
81127b9c:	18c002c4 	addi	r3,r3,11
81127ba0:	19000003 	ldbu	r4,0(r3)
81127ba4:	d0e08417 	ldw	r3,-32240(gp)
81127ba8:	18c00d43 	ldbu	r3,53(r3)
81127bac:	20c6b03a 	or	r3,r4,r3
81127bb0:	1809883a 	mov	r4,r3
81127bb4:	e0fffd17 	ldw	r3,-12(fp)
81127bb8:	1885883a 	add	r2,r3,r2
81127bbc:	108002c4 	addi	r2,r2,11
81127bc0:	11000005 	stb	r4,0(r2)
81127bc4:	e0bffd17 	ldw	r2,-12(fp)
81127bc8:	10c00283 	ldbu	r3,10(r2)
81127bcc:	d0a08417 	ldw	r2,-32240(gp)
81127bd0:	10800d83 	ldbu	r2,54(r2)
81127bd4:	1884b03a 	or	r2,r3,r2
81127bd8:	1007883a 	mov	r3,r2
81127bdc:	e0bffd17 	ldw	r2,-12(fp)
81127be0:	10c00285 	stb	r3,10(r2)
81127be4:	e0bffc17 	ldw	r2,-16(fp)
81127be8:	10800104 	addi	r2,r2,4
81127bec:	e0bffc15 	stw	r2,-16(fp)
81127bf0:	e0bffc17 	ldw	r2,-16(fp)
81127bf4:	10800017 	ldw	r2,0(r2)
81127bf8:	e0bffd15 	stw	r2,-12(fp)
81127bfc:	e0bffd17 	ldw	r2,-12(fp)
81127c00:	103fde1e 	bne	r2,zero,81127b7c <__reset+0xfb107b7c>
81127c04:	d0a08417 	ldw	r2,-32240(gp)
81127c08:	10800d03 	ldbu	r2,52(r2)
81127c0c:	e0bffe05 	stb	r2,-8(fp)
81127c10:	e0fffe03 	ldbu	r3,-8(fp)
81127c14:	e13ffe03 	ldbu	r4,-8(fp)
81127c18:	d0a08044 	addi	r2,gp,-32255
81127c1c:	2085883a 	add	r2,r4,r2
81127c20:	10800003 	ldbu	r2,0(r2)
81127c24:	1009883a 	mov	r4,r2
81127c28:	d0a08417 	ldw	r2,-32240(gp)
81127c2c:	10800d43 	ldbu	r2,53(r2)
81127c30:	0084303a 	nor	r2,zero,r2
81127c34:	2084703a 	and	r2,r4,r2
81127c38:	1009883a 	mov	r4,r2
81127c3c:	d0a08044 	addi	r2,gp,-32255
81127c40:	1885883a 	add	r2,r3,r2
81127c44:	11000005 	stb	r4,0(r2)
81127c48:	e0fffe03 	ldbu	r3,-8(fp)
81127c4c:	d0a08044 	addi	r2,gp,-32255
81127c50:	1885883a 	add	r2,r3,r2
81127c54:	10800003 	ldbu	r2,0(r2)
81127c58:	10803fcc 	andi	r2,r2,255
81127c5c:	1000071e 	bne	r2,zero,81127c7c <OS_EventTaskWaitMulti+0x144>
81127c60:	d0a08417 	ldw	r2,-32240(gp)
81127c64:	10800d83 	ldbu	r2,54(r2)
81127c68:	0084303a 	nor	r2,zero,r2
81127c6c:	1007883a 	mov	r3,r2
81127c70:	d0a08003 	ldbu	r2,-32256(gp)
81127c74:	1884703a 	and	r2,r3,r2
81127c78:	d0a08005 	stb	r2,-32256(gp)
81127c7c:	0001883a 	nop
81127c80:	e037883a 	mov	sp,fp
81127c84:	df000017 	ldw	fp,0(sp)
81127c88:	dec00104 	addi	sp,sp,4
81127c8c:	f800283a 	ret

81127c90 <OS_EventTaskRemove>:
81127c90:	defffc04 	addi	sp,sp,-16
81127c94:	de00012e 	bgeu	sp,et,81127c9c <OS_EventTaskRemove+0xc>
81127c98:	003b68fa 	trap	3
81127c9c:	df000315 	stw	fp,12(sp)
81127ca0:	df000304 	addi	fp,sp,12
81127ca4:	e13ffe15 	stw	r4,-8(fp)
81127ca8:	e17fff15 	stw	r5,-4(fp)
81127cac:	e0bffe17 	ldw	r2,-8(fp)
81127cb0:	10800d03 	ldbu	r2,52(r2)
81127cb4:	e0bffd05 	stb	r2,-12(fp)
81127cb8:	e0bffd03 	ldbu	r2,-12(fp)
81127cbc:	e0fffd03 	ldbu	r3,-12(fp)
81127cc0:	e13fff17 	ldw	r4,-4(fp)
81127cc4:	20c7883a 	add	r3,r4,r3
81127cc8:	18c002c4 	addi	r3,r3,11
81127ccc:	18c00003 	ldbu	r3,0(r3)
81127cd0:	1809883a 	mov	r4,r3
81127cd4:	e0fffe17 	ldw	r3,-8(fp)
81127cd8:	18c00d43 	ldbu	r3,53(r3)
81127cdc:	00c6303a 	nor	r3,zero,r3
81127ce0:	20c6703a 	and	r3,r4,r3
81127ce4:	1809883a 	mov	r4,r3
81127ce8:	e0ffff17 	ldw	r3,-4(fp)
81127cec:	1885883a 	add	r2,r3,r2
81127cf0:	108002c4 	addi	r2,r2,11
81127cf4:	11000005 	stb	r4,0(r2)
81127cf8:	e0bffd03 	ldbu	r2,-12(fp)
81127cfc:	e0ffff17 	ldw	r3,-4(fp)
81127d00:	1885883a 	add	r2,r3,r2
81127d04:	108002c4 	addi	r2,r2,11
81127d08:	10800003 	ldbu	r2,0(r2)
81127d0c:	10803fcc 	andi	r2,r2,255
81127d10:	10000a1e 	bne	r2,zero,81127d3c <OS_EventTaskRemove+0xac>
81127d14:	e0bfff17 	ldw	r2,-4(fp)
81127d18:	10800283 	ldbu	r2,10(r2)
81127d1c:	1007883a 	mov	r3,r2
81127d20:	e0bffe17 	ldw	r2,-8(fp)
81127d24:	10800d83 	ldbu	r2,54(r2)
81127d28:	0084303a 	nor	r2,zero,r2
81127d2c:	1884703a 	and	r2,r3,r2
81127d30:	1007883a 	mov	r3,r2
81127d34:	e0bfff17 	ldw	r2,-4(fp)
81127d38:	10c00285 	stb	r3,10(r2)
81127d3c:	0001883a 	nop
81127d40:	e037883a 	mov	sp,fp
81127d44:	df000017 	ldw	fp,0(sp)
81127d48:	dec00104 	addi	sp,sp,4
81127d4c:	f800283a 	ret

81127d50 <OS_EventTaskRemoveMulti>:
81127d50:	defffa04 	addi	sp,sp,-24
81127d54:	de00012e 	bgeu	sp,et,81127d5c <OS_EventTaskRemoveMulti+0xc>
81127d58:	003b68fa 	trap	3
81127d5c:	df000515 	stw	fp,20(sp)
81127d60:	df000504 	addi	fp,sp,20
81127d64:	e13ffe15 	stw	r4,-8(fp)
81127d68:	e17fff15 	stw	r5,-4(fp)
81127d6c:	e0bffe17 	ldw	r2,-8(fp)
81127d70:	10800d03 	ldbu	r2,52(r2)
81127d74:	e0bffd05 	stb	r2,-12(fp)
81127d78:	e0bffe17 	ldw	r2,-8(fp)
81127d7c:	10800d83 	ldbu	r2,54(r2)
81127d80:	e0bffd45 	stb	r2,-11(fp)
81127d84:	e0bffe17 	ldw	r2,-8(fp)
81127d88:	10800d43 	ldbu	r2,53(r2)
81127d8c:	e0bffd85 	stb	r2,-10(fp)
81127d90:	e0bfff17 	ldw	r2,-4(fp)
81127d94:	e0bffb15 	stw	r2,-20(fp)
81127d98:	e0bffb17 	ldw	r2,-20(fp)
81127d9c:	10800017 	ldw	r2,0(r2)
81127da0:	e0bffc15 	stw	r2,-16(fp)
81127da4:	00002506 	br	81127e3c <OS_EventTaskRemoveMulti+0xec>
81127da8:	e0bffd03 	ldbu	r2,-12(fp)
81127dac:	e0fffd03 	ldbu	r3,-12(fp)
81127db0:	e13ffc17 	ldw	r4,-16(fp)
81127db4:	20c7883a 	add	r3,r4,r3
81127db8:	18c002c4 	addi	r3,r3,11
81127dbc:	18c00003 	ldbu	r3,0(r3)
81127dc0:	1809883a 	mov	r4,r3
81127dc4:	e0fffd83 	ldbu	r3,-10(fp)
81127dc8:	00c6303a 	nor	r3,zero,r3
81127dcc:	20c6703a 	and	r3,r4,r3
81127dd0:	1809883a 	mov	r4,r3
81127dd4:	e0fffc17 	ldw	r3,-16(fp)
81127dd8:	1885883a 	add	r2,r3,r2
81127ddc:	108002c4 	addi	r2,r2,11
81127de0:	11000005 	stb	r4,0(r2)
81127de4:	e0bffd03 	ldbu	r2,-12(fp)
81127de8:	e0fffc17 	ldw	r3,-16(fp)
81127dec:	1885883a 	add	r2,r3,r2
81127df0:	108002c4 	addi	r2,r2,11
81127df4:	10800003 	ldbu	r2,0(r2)
81127df8:	10803fcc 	andi	r2,r2,255
81127dfc:	1000091e 	bne	r2,zero,81127e24 <OS_EventTaskRemoveMulti+0xd4>
81127e00:	e0bffc17 	ldw	r2,-16(fp)
81127e04:	10800283 	ldbu	r2,10(r2)
81127e08:	1007883a 	mov	r3,r2
81127e0c:	e0bffd43 	ldbu	r2,-11(fp)
81127e10:	0084303a 	nor	r2,zero,r2
81127e14:	1884703a 	and	r2,r3,r2
81127e18:	1007883a 	mov	r3,r2
81127e1c:	e0bffc17 	ldw	r2,-16(fp)
81127e20:	10c00285 	stb	r3,10(r2)
81127e24:	e0bffb17 	ldw	r2,-20(fp)
81127e28:	10800104 	addi	r2,r2,4
81127e2c:	e0bffb15 	stw	r2,-20(fp)
81127e30:	e0bffb17 	ldw	r2,-20(fp)
81127e34:	10800017 	ldw	r2,0(r2)
81127e38:	e0bffc15 	stw	r2,-16(fp)
81127e3c:	e0bffc17 	ldw	r2,-16(fp)
81127e40:	103fd91e 	bne	r2,zero,81127da8 <__reset+0xfb107da8>
81127e44:	0001883a 	nop
81127e48:	e037883a 	mov	sp,fp
81127e4c:	df000017 	ldw	fp,0(sp)
81127e50:	dec00104 	addi	sp,sp,4
81127e54:	f800283a 	ret

81127e58 <OS_EventWaitListInit>:
81127e58:	defffc04 	addi	sp,sp,-16
81127e5c:	de00012e 	bgeu	sp,et,81127e64 <OS_EventWaitListInit+0xc>
81127e60:	003b68fa 	trap	3
81127e64:	df000315 	stw	fp,12(sp)
81127e68:	df000304 	addi	fp,sp,12
81127e6c:	e13fff15 	stw	r4,-4(fp)
81127e70:	e0bfff17 	ldw	r2,-4(fp)
81127e74:	10000285 	stb	zero,10(r2)
81127e78:	e0bfff17 	ldw	r2,-4(fp)
81127e7c:	108002c4 	addi	r2,r2,11
81127e80:	e0bffd15 	stw	r2,-12(fp)
81127e84:	e03ffe05 	stb	zero,-8(fp)
81127e88:	00000706 	br	81127ea8 <OS_EventWaitListInit+0x50>
81127e8c:	e0bffd17 	ldw	r2,-12(fp)
81127e90:	10c00044 	addi	r3,r2,1
81127e94:	e0fffd15 	stw	r3,-12(fp)
81127e98:	10000005 	stb	zero,0(r2)
81127e9c:	e0bffe03 	ldbu	r2,-8(fp)
81127ea0:	10800044 	addi	r2,r2,1
81127ea4:	e0bffe05 	stb	r2,-8(fp)
81127ea8:	e0bffe03 	ldbu	r2,-8(fp)
81127eac:	108001b0 	cmpltui	r2,r2,6
81127eb0:	103ff61e 	bne	r2,zero,81127e8c <__reset+0xfb107e8c>
81127eb4:	0001883a 	nop
81127eb8:	e037883a 	mov	sp,fp
81127ebc:	df000017 	ldw	fp,0(sp)
81127ec0:	dec00104 	addi	sp,sp,4
81127ec4:	f800283a 	ret

81127ec8 <OS_InitEventList>:
81127ec8:	defffb04 	addi	sp,sp,-20
81127ecc:	de00012e 	bgeu	sp,et,81127ed4 <OS_InitEventList+0xc>
81127ed0:	003b68fa 	trap	3
81127ed4:	dfc00415 	stw	ra,16(sp)
81127ed8:	df000315 	stw	fp,12(sp)
81127edc:	df000304 	addi	fp,sp,12
81127ee0:	01430c04 	movi	r5,3120
81127ee4:	01204574 	movhi	r4,33045
81127ee8:	21013f04 	addi	r4,r4,1276
81127eec:	11282700 	call	81128270 <OS_MemClr>
81127ef0:	00a04574 	movhi	r2,33045
81127ef4:	10813f04 	addi	r2,r2,1276
81127ef8:	e0bffe15 	stw	r2,-8(fp)
81127efc:	00a04574 	movhi	r2,33045
81127f00:	10814c04 	addi	r2,r2,1328
81127f04:	e0bfff15 	stw	r2,-4(fp)
81127f08:	e03ffd0d 	sth	zero,-12(fp)
81127f0c:	00001306 	br	81127f5c <OS_InitEventList+0x94>
81127f10:	e0bffe17 	ldw	r2,-8(fp)
81127f14:	10000005 	stb	zero,0(r2)
81127f18:	e0bffe17 	ldw	r2,-8(fp)
81127f1c:	e0ffff17 	ldw	r3,-4(fp)
81127f20:	10c00115 	stw	r3,4(r2)
81127f24:	e0bffe17 	ldw	r2,-8(fp)
81127f28:	00c00fc4 	movi	r3,63
81127f2c:	10c00445 	stb	r3,17(r2)
81127f30:	e0bffe17 	ldw	r2,-8(fp)
81127f34:	10000485 	stb	zero,18(r2)
81127f38:	e0bffe17 	ldw	r2,-8(fp)
81127f3c:	10800d04 	addi	r2,r2,52
81127f40:	e0bffe15 	stw	r2,-8(fp)
81127f44:	e0bfff17 	ldw	r2,-4(fp)
81127f48:	10800d04 	addi	r2,r2,52
81127f4c:	e0bfff15 	stw	r2,-4(fp)
81127f50:	e0bffd0b 	ldhu	r2,-12(fp)
81127f54:	10800044 	addi	r2,r2,1
81127f58:	e0bffd0d 	sth	r2,-12(fp)
81127f5c:	e0bffd0b 	ldhu	r2,-12(fp)
81127f60:	10800ef0 	cmpltui	r2,r2,59
81127f64:	103fea1e 	bne	r2,zero,81127f10 <__reset+0xfb107f10>
81127f68:	e0bffe17 	ldw	r2,-8(fp)
81127f6c:	10000005 	stb	zero,0(r2)
81127f70:	e0bffe17 	ldw	r2,-8(fp)
81127f74:	10000115 	stw	zero,4(r2)
81127f78:	e0bffe17 	ldw	r2,-8(fp)
81127f7c:	00c00fc4 	movi	r3,63
81127f80:	10c00445 	stb	r3,17(r2)
81127f84:	e0bffe17 	ldw	r2,-8(fp)
81127f88:	10000485 	stb	zero,18(r2)
81127f8c:	00a04574 	movhi	r2,33045
81127f90:	10813f04 	addi	r2,r2,1276
81127f94:	d0a08215 	stw	r2,-32248(gp)
81127f98:	0001883a 	nop
81127f9c:	e037883a 	mov	sp,fp
81127fa0:	dfc00117 	ldw	ra,4(sp)
81127fa4:	df000017 	ldw	fp,0(sp)
81127fa8:	dec00204 	addi	sp,sp,8
81127fac:	f800283a 	ret

81127fb0 <OS_InitMisc>:
81127fb0:	deffff04 	addi	sp,sp,-4
81127fb4:	de00012e 	bgeu	sp,et,81127fbc <OS_InitMisc+0xc>
81127fb8:	003b68fa 	trap	3
81127fbc:	df000015 	stw	fp,0(sp)
81127fc0:	d839883a 	mov	fp,sp
81127fc4:	d0208615 	stw	zero,-32232(gp)
81127fc8:	d0208305 	stb	zero,-32244(gp)
81127fcc:	d0207105 	stb	zero,-32316(gp)
81127fd0:	d0207c45 	stb	zero,-32271(gp)
81127fd4:	d0207305 	stb	zero,-32308(gp)
81127fd8:	d0207815 	stw	zero,-32288(gp)
81127fdc:	d0207415 	stw	zero,-32304(gp)
81127fe0:	d0208a15 	stw	zero,-32216(gp)
81127fe4:	d0207a15 	stw	zero,-32280(gp)
81127fe8:	d0208905 	stb	zero,-32220(gp)
81127fec:	0001883a 	nop
81127ff0:	e037883a 	mov	sp,fp
81127ff4:	df000017 	ldw	fp,0(sp)
81127ff8:	dec00104 	addi	sp,sp,4
81127ffc:	f800283a 	ret

81128000 <OS_InitRdyList>:
81128000:	defffd04 	addi	sp,sp,-12
81128004:	de00012e 	bgeu	sp,et,8112800c <OS_InitRdyList+0xc>
81128008:	003b68fa 	trap	3
8112800c:	df000215 	stw	fp,8(sp)
81128010:	df000204 	addi	fp,sp,8
81128014:	d0208005 	stb	zero,-32256(gp)
81128018:	d0a08044 	addi	r2,gp,-32255
8112801c:	e0bfff15 	stw	r2,-4(fp)
81128020:	e03ffe05 	stb	zero,-8(fp)
81128024:	00000706 	br	81128044 <OS_InitRdyList+0x44>
81128028:	e0bfff17 	ldw	r2,-4(fp)
8112802c:	10c00044 	addi	r3,r2,1
81128030:	e0ffff15 	stw	r3,-4(fp)
81128034:	10000005 	stb	zero,0(r2)
81128038:	e0bffe03 	ldbu	r2,-8(fp)
8112803c:	10800044 	addi	r2,r2,1
81128040:	e0bffe05 	stb	r2,-8(fp)
81128044:	e0bffe03 	ldbu	r2,-8(fp)
81128048:	108001b0 	cmpltui	r2,r2,6
8112804c:	103ff61e 	bne	r2,zero,81128028 <__reset+0xfb108028>
81128050:	d02075c5 	stb	zero,-32297(gp)
81128054:	d0207585 	stb	zero,-32298(gp)
81128058:	d0207e15 	stw	zero,-32264(gp)
8112805c:	d0208415 	stw	zero,-32240(gp)
81128060:	0001883a 	nop
81128064:	e037883a 	mov	sp,fp
81128068:	df000017 	ldw	fp,0(sp)
8112806c:	dec00104 	addi	sp,sp,4
81128070:	f800283a 	ret

81128074 <OS_InitTaskIdle>:
81128074:	defff804 	addi	sp,sp,-32
81128078:	de00012e 	bgeu	sp,et,81128080 <OS_InitTaskIdle+0xc>
8112807c:	003b68fa 	trap	3
81128080:	dfc00715 	stw	ra,28(sp)
81128084:	df000615 	stw	fp,24(sp)
81128088:	df000604 	addi	fp,sp,24
8112808c:	008000c4 	movi	r2,3
81128090:	d8800415 	stw	r2,16(sp)
81128094:	d8000315 	stw	zero,12(sp)
81128098:	00808004 	movi	r2,512
8112809c:	d8800215 	stw	r2,8(sp)
811280a0:	00a04574 	movhi	r2,33045
811280a4:	10bf3f04 	addi	r2,r2,-772
811280a8:	d8800115 	stw	r2,4(sp)
811280ac:	00bfffd4 	movui	r2,65535
811280b0:	d8800015 	stw	r2,0(sp)
811280b4:	01c00a04 	movi	r7,40
811280b8:	01a04574 	movhi	r6,33045
811280bc:	31813e04 	addi	r6,r6,1272
811280c0:	000b883a 	mov	r5,zero
811280c4:	012044f4 	movhi	r4,33043
811280c8:	21215a04 	addi	r4,r4,-31384
811280cc:	112df580 	call	8112df58 <OSTaskCreateExt>
811280d0:	e1bfff04 	addi	r6,fp,-4
811280d4:	01604534 	movhi	r5,33044
811280d8:	29724c04 	addi	r5,r5,-14032
811280dc:	01000a04 	movi	r4,40
811280e0:	112e7880 	call	8112e788 <OSTaskNameSet>
811280e4:	0001883a 	nop
811280e8:	e037883a 	mov	sp,fp
811280ec:	dfc00117 	ldw	ra,4(sp)
811280f0:	df000017 	ldw	fp,0(sp)
811280f4:	dec00204 	addi	sp,sp,8
811280f8:	f800283a 	ret

811280fc <OS_InitTaskStat>:
811280fc:	defff804 	addi	sp,sp,-32
81128100:	de00012e 	bgeu	sp,et,81128108 <OS_InitTaskStat+0xc>
81128104:	003b68fa 	trap	3
81128108:	dfc00715 	stw	ra,28(sp)
8112810c:	df000615 	stw	fp,24(sp)
81128110:	df000604 	addi	fp,sp,24
81128114:	008000c4 	movi	r2,3
81128118:	d8800415 	stw	r2,16(sp)
8112811c:	d8000315 	stw	zero,12(sp)
81128120:	00808004 	movi	r2,512
81128124:	d8800215 	stw	r2,8(sp)
81128128:	00a04574 	movhi	r2,33045
8112812c:	10bac704 	addi	r2,r2,-5348
81128130:	d8800115 	stw	r2,4(sp)
81128134:	00bfff94 	movui	r2,65534
81128138:	d8800015 	stw	r2,0(sp)
8112813c:	01c009c4 	movi	r7,39
81128140:	01a04574 	movhi	r6,33045
81128144:	31bcc604 	addi	r6,r6,-3304
81128148:	000b883a 	mov	r5,zero
8112814c:	012044f4 	movhi	r4,33043
81128150:	21217304 	addi	r4,r4,-31284
81128154:	112df580 	call	8112df58 <OSTaskCreateExt>
81128158:	e1bfff04 	addi	r6,fp,-4
8112815c:	01604534 	movhi	r5,33044
81128160:	29725004 	addi	r5,r5,-14016
81128164:	010009c4 	movi	r4,39
81128168:	112e7880 	call	8112e788 <OSTaskNameSet>
8112816c:	0001883a 	nop
81128170:	e037883a 	mov	sp,fp
81128174:	dfc00117 	ldw	ra,4(sp)
81128178:	df000017 	ldw	fp,0(sp)
8112817c:	dec00204 	addi	sp,sp,8
81128180:	f800283a 	ret

81128184 <OS_InitTCBList>:
81128184:	defffb04 	addi	sp,sp,-20
81128188:	de00012e 	bgeu	sp,et,81128190 <OS_InitTCBList+0xc>
8112818c:	003b68fa 	trap	3
81128190:	dfc00415 	stw	ra,16(sp)
81128194:	df000315 	stw	fp,12(sp)
81128198:	df000304 	addi	fp,sp,12
8112819c:	01439604 	movi	r5,3672
811281a0:	01204574 	movhi	r4,33045
811281a4:	21044b04 	addi	r4,r4,4396
811281a8:	11282700 	call	81128270 <OS_MemClr>
811281ac:	01402904 	movi	r5,164
811281b0:	01204574 	movhi	r4,33045
811281b4:	2107e104 	addi	r4,r4,8068
811281b8:	11282700 	call	81128270 <OS_MemClr>
811281bc:	00a04574 	movhi	r2,33045
811281c0:	10844b04 	addi	r2,r2,4396
811281c4:	e0bffe15 	stw	r2,-8(fp)
811281c8:	00a04574 	movhi	r2,33045
811281cc:	10846604 	addi	r2,r2,4504
811281d0:	e0bfff15 	stw	r2,-4(fp)
811281d4:	e03ffd05 	stb	zero,-12(fp)
811281d8:	00001106 	br	81128220 <OS_InitTCBList+0x9c>
811281dc:	e0bffe17 	ldw	r2,-8(fp)
811281e0:	e0ffff17 	ldw	r3,-4(fp)
811281e4:	10c00515 	stw	r3,20(r2)
811281e8:	e0bffe17 	ldw	r2,-8(fp)
811281ec:	00c00fc4 	movi	r3,63
811281f0:	10c01305 	stb	r3,76(r2)
811281f4:	e0bffe17 	ldw	r2,-8(fp)
811281f8:	10001345 	stb	zero,77(r2)
811281fc:	e0bffe17 	ldw	r2,-8(fp)
81128200:	10801b04 	addi	r2,r2,108
81128204:	e0bffe15 	stw	r2,-8(fp)
81128208:	e0bfff17 	ldw	r2,-4(fp)
8112820c:	10801b04 	addi	r2,r2,108
81128210:	e0bfff15 	stw	r2,-4(fp)
81128214:	e0bffd03 	ldbu	r2,-12(fp)
81128218:	10800044 	addi	r2,r2,1
8112821c:	e0bffd05 	stb	r2,-12(fp)
81128220:	e0bffd03 	ldbu	r2,-12(fp)
81128224:	10800870 	cmpltui	r2,r2,33
81128228:	103fec1e 	bne	r2,zero,811281dc <__reset+0xfb1081dc>
8112822c:	e0bffe17 	ldw	r2,-8(fp)
81128230:	10000515 	stw	zero,20(r2)
81128234:	e0bffe17 	ldw	r2,-8(fp)
81128238:	00c00fc4 	movi	r3,63
8112823c:	10c01305 	stb	r3,76(r2)
81128240:	e0bffe17 	ldw	r2,-8(fp)
81128244:	10001345 	stb	zero,77(r2)
81128248:	d0207615 	stw	zero,-32296(gp)
8112824c:	00a04574 	movhi	r2,33045
81128250:	10844b04 	addi	r2,r2,4396
81128254:	d0a07b15 	stw	r2,-32276(gp)
81128258:	0001883a 	nop
8112825c:	e037883a 	mov	sp,fp
81128260:	dfc00117 	ldw	ra,4(sp)
81128264:	df000017 	ldw	fp,0(sp)
81128268:	dec00204 	addi	sp,sp,8
8112826c:	f800283a 	ret

81128270 <OS_MemClr>:
81128270:	defffd04 	addi	sp,sp,-12
81128274:	de00012e 	bgeu	sp,et,8112827c <OS_MemClr+0xc>
81128278:	003b68fa 	trap	3
8112827c:	df000215 	stw	fp,8(sp)
81128280:	df000204 	addi	fp,sp,8
81128284:	e13ffe15 	stw	r4,-8(fp)
81128288:	2805883a 	mov	r2,r5
8112828c:	e0bfff0d 	sth	r2,-4(fp)
81128290:	00000706 	br	811282b0 <OS_MemClr+0x40>
81128294:	e0bffe17 	ldw	r2,-8(fp)
81128298:	10c00044 	addi	r3,r2,1
8112829c:	e0fffe15 	stw	r3,-8(fp)
811282a0:	10000005 	stb	zero,0(r2)
811282a4:	e0bfff0b 	ldhu	r2,-4(fp)
811282a8:	10bfffc4 	addi	r2,r2,-1
811282ac:	e0bfff0d 	sth	r2,-4(fp)
811282b0:	e0bfff0b 	ldhu	r2,-4(fp)
811282b4:	103ff71e 	bne	r2,zero,81128294 <__reset+0xfb108294>
811282b8:	0001883a 	nop
811282bc:	e037883a 	mov	sp,fp
811282c0:	df000017 	ldw	fp,0(sp)
811282c4:	dec00104 	addi	sp,sp,4
811282c8:	f800283a 	ret

811282cc <OS_MemCopy>:
811282cc:	defffc04 	addi	sp,sp,-16
811282d0:	de00012e 	bgeu	sp,et,811282d8 <OS_MemCopy+0xc>
811282d4:	003b68fa 	trap	3
811282d8:	df000315 	stw	fp,12(sp)
811282dc:	df000304 	addi	fp,sp,12
811282e0:	e13ffd15 	stw	r4,-12(fp)
811282e4:	e17ffe15 	stw	r5,-8(fp)
811282e8:	3005883a 	mov	r2,r6
811282ec:	e0bfff0d 	sth	r2,-4(fp)
811282f0:	00000b06 	br	81128320 <OS_MemCopy+0x54>
811282f4:	e0bffd17 	ldw	r2,-12(fp)
811282f8:	10c00044 	addi	r3,r2,1
811282fc:	e0fffd15 	stw	r3,-12(fp)
81128300:	e0fffe17 	ldw	r3,-8(fp)
81128304:	19000044 	addi	r4,r3,1
81128308:	e13ffe15 	stw	r4,-8(fp)
8112830c:	18c00003 	ldbu	r3,0(r3)
81128310:	10c00005 	stb	r3,0(r2)
81128314:	e0bfff0b 	ldhu	r2,-4(fp)
81128318:	10bfffc4 	addi	r2,r2,-1
8112831c:	e0bfff0d 	sth	r2,-4(fp)
81128320:	e0bfff0b 	ldhu	r2,-4(fp)
81128324:	103ff31e 	bne	r2,zero,811282f4 <__reset+0xfb1082f4>
81128328:	0001883a 	nop
8112832c:	e037883a 	mov	sp,fp
81128330:	df000017 	ldw	fp,0(sp)
81128334:	dec00104 	addi	sp,sp,4
81128338:	f800283a 	ret

8112833c <OS_Sched>:
8112833c:	defffb04 	addi	sp,sp,-20
81128340:	de00012e 	bgeu	sp,et,81128348 <OS_Sched+0xc>
81128344:	003b68fa 	trap	3
81128348:	dfc00415 	stw	ra,16(sp)
8112834c:	df000315 	stw	fp,12(sp)
81128350:	df000304 	addi	fp,sp,12
81128354:	e03ffd15 	stw	zero,-12(fp)
81128358:	0005303a 	rdctl	r2,status
8112835c:	e0bfff15 	stw	r2,-4(fp)
81128360:	e0ffff17 	ldw	r3,-4(fp)
81128364:	00bfff84 	movi	r2,-2
81128368:	1884703a 	and	r2,r3,r2
8112836c:	1001703a 	wrctl	status,r2
81128370:	e0bfff17 	ldw	r2,-4(fp)
81128374:	e0bffd15 	stw	r2,-12(fp)
81128378:	d0a08303 	ldbu	r2,-32244(gp)
8112837c:	10803fcc 	andi	r2,r2,255
81128380:	10001a1e 	bne	r2,zero,811283ec <OS_Sched+0xb0>
81128384:	d0a07103 	ldbu	r2,-32316(gp)
81128388:	10803fcc 	andi	r2,r2,255
8112838c:	1000171e 	bne	r2,zero,811283ec <OS_Sched+0xb0>
81128390:	11284140 	call	81128414 <OS_SchedNew>
81128394:	d0e07583 	ldbu	r3,-32298(gp)
81128398:	d0a075c3 	ldbu	r2,-32297(gp)
8112839c:	18c03fcc 	andi	r3,r3,255
811283a0:	10803fcc 	andi	r2,r2,255
811283a4:	18801126 	beq	r3,r2,811283ec <OS_Sched+0xb0>
811283a8:	d0a07583 	ldbu	r2,-32298(gp)
811283ac:	10c03fcc 	andi	r3,r2,255
811283b0:	00a04574 	movhi	r2,33045
811283b4:	1087e104 	addi	r2,r2,8068
811283b8:	18c7883a 	add	r3,r3,r3
811283bc:	18c7883a 	add	r3,r3,r3
811283c0:	10c5883a 	add	r2,r2,r3
811283c4:	10800017 	ldw	r2,0(r2)
811283c8:	d0a07e15 	stw	r2,-32264(gp)
811283cc:	d0a07e17 	ldw	r2,-32264(gp)
811283d0:	10c00e17 	ldw	r3,56(r2)
811283d4:	18c00044 	addi	r3,r3,1
811283d8:	10c00e15 	stw	r3,56(r2)
811283dc:	d0a07817 	ldw	r2,-32288(gp)
811283e0:	10800044 	addi	r2,r2,1
811283e4:	d0a07815 	stw	r2,-32288(gp)
811283e8:	11393a80 	call	811393a8 <OSCtxSw>
811283ec:	e0bffd17 	ldw	r2,-12(fp)
811283f0:	e0bffe15 	stw	r2,-8(fp)
811283f4:	e0bffe17 	ldw	r2,-8(fp)
811283f8:	1001703a 	wrctl	status,r2
811283fc:	0001883a 	nop
81128400:	e037883a 	mov	sp,fp
81128404:	dfc00117 	ldw	ra,4(sp)
81128408:	df000017 	ldw	fp,0(sp)
8112840c:	dec00204 	addi	sp,sp,8
81128410:	f800283a 	ret

81128414 <OS_SchedNew>:
81128414:	defffe04 	addi	sp,sp,-8
81128418:	de00012e 	bgeu	sp,et,81128420 <OS_SchedNew+0xc>
8112841c:	003b68fa 	trap	3
81128420:	df000115 	stw	fp,4(sp)
81128424:	df000104 	addi	fp,sp,4
81128428:	d0a08003 	ldbu	r2,-32256(gp)
8112842c:	10c03fcc 	andi	r3,r2,255
81128430:	00a04534 	movhi	r2,33044
81128434:	10b20c04 	addi	r2,r2,-14288
81128438:	10c5883a 	add	r2,r2,r3
8112843c:	10800003 	ldbu	r2,0(r2)
81128440:	e0bfff05 	stb	r2,-4(fp)
81128444:	e0bfff03 	ldbu	r2,-4(fp)
81128448:	100490fa 	slli	r2,r2,3
8112844c:	1009883a 	mov	r4,r2
81128450:	e0ffff03 	ldbu	r3,-4(fp)
81128454:	d0a08044 	addi	r2,gp,-32255
81128458:	1885883a 	add	r2,r3,r2
8112845c:	10800003 	ldbu	r2,0(r2)
81128460:	10c03fcc 	andi	r3,r2,255
81128464:	00a04534 	movhi	r2,33044
81128468:	10b20c04 	addi	r2,r2,-14288
8112846c:	10c5883a 	add	r2,r2,r3
81128470:	10800003 	ldbu	r2,0(r2)
81128474:	2085883a 	add	r2,r4,r2
81128478:	d0a07585 	stb	r2,-32298(gp)
8112847c:	0001883a 	nop
81128480:	e037883a 	mov	sp,fp
81128484:	df000017 	ldw	fp,0(sp)
81128488:	dec00104 	addi	sp,sp,4
8112848c:	f800283a 	ret

81128490 <OS_StrCopy>:
81128490:	defffc04 	addi	sp,sp,-16
81128494:	de00012e 	bgeu	sp,et,8112849c <OS_StrCopy+0xc>
81128498:	003b68fa 	trap	3
8112849c:	df000315 	stw	fp,12(sp)
811284a0:	df000304 	addi	fp,sp,12
811284a4:	e13ffe15 	stw	r4,-8(fp)
811284a8:	e17fff15 	stw	r5,-4(fp)
811284ac:	e03ffd05 	stb	zero,-12(fp)
811284b0:	00000b06 	br	811284e0 <OS_StrCopy+0x50>
811284b4:	e0bffe17 	ldw	r2,-8(fp)
811284b8:	10c00044 	addi	r3,r2,1
811284bc:	e0fffe15 	stw	r3,-8(fp)
811284c0:	e0ffff17 	ldw	r3,-4(fp)
811284c4:	19000044 	addi	r4,r3,1
811284c8:	e13fff15 	stw	r4,-4(fp)
811284cc:	18c00003 	ldbu	r3,0(r3)
811284d0:	10c00005 	stb	r3,0(r2)
811284d4:	e0bffd03 	ldbu	r2,-12(fp)
811284d8:	10800044 	addi	r2,r2,1
811284dc:	e0bffd05 	stb	r2,-12(fp)
811284e0:	e0bfff17 	ldw	r2,-4(fp)
811284e4:	10800003 	ldbu	r2,0(r2)
811284e8:	10803fcc 	andi	r2,r2,255
811284ec:	103ff11e 	bne	r2,zero,811284b4 <__reset+0xfb1084b4>
811284f0:	e0bffe17 	ldw	r2,-8(fp)
811284f4:	10000005 	stb	zero,0(r2)
811284f8:	e0bffd03 	ldbu	r2,-12(fp)
811284fc:	e037883a 	mov	sp,fp
81128500:	df000017 	ldw	fp,0(sp)
81128504:	dec00104 	addi	sp,sp,4
81128508:	f800283a 	ret

8112850c <OS_StrLen>:
8112850c:	defffd04 	addi	sp,sp,-12
81128510:	de00012e 	bgeu	sp,et,81128518 <OS_StrLen+0xc>
81128514:	003b68fa 	trap	3
81128518:	df000215 	stw	fp,8(sp)
8112851c:	df000204 	addi	fp,sp,8
81128520:	e13fff15 	stw	r4,-4(fp)
81128524:	e03ffe05 	stb	zero,-8(fp)
81128528:	00000606 	br	81128544 <OS_StrLen+0x38>
8112852c:	e0bfff17 	ldw	r2,-4(fp)
81128530:	10800044 	addi	r2,r2,1
81128534:	e0bfff15 	stw	r2,-4(fp)
81128538:	e0bffe03 	ldbu	r2,-8(fp)
8112853c:	10800044 	addi	r2,r2,1
81128540:	e0bffe05 	stb	r2,-8(fp)
81128544:	e0bfff17 	ldw	r2,-4(fp)
81128548:	10800003 	ldbu	r2,0(r2)
8112854c:	10803fcc 	andi	r2,r2,255
81128550:	103ff61e 	bne	r2,zero,8112852c <__reset+0xfb10852c>
81128554:	e0bffe03 	ldbu	r2,-8(fp)
81128558:	e037883a 	mov	sp,fp
8112855c:	df000017 	ldw	fp,0(sp)
81128560:	dec00104 	addi	sp,sp,4
81128564:	f800283a 	ret

81128568 <OS_TaskIdle>:
81128568:	defffa04 	addi	sp,sp,-24
8112856c:	de00012e 	bgeu	sp,et,81128574 <OS_TaskIdle+0xc>
81128570:	003b68fa 	trap	3
81128574:	dfc00515 	stw	ra,20(sp)
81128578:	df000415 	stw	fp,16(sp)
8112857c:	df000404 	addi	fp,sp,16
81128580:	e13fff15 	stw	r4,-4(fp)
81128584:	e03ffc15 	stw	zero,-16(fp)
81128588:	0005303a 	rdctl	r2,status
8112858c:	e0bffd15 	stw	r2,-12(fp)
81128590:	e0fffd17 	ldw	r3,-12(fp)
81128594:	00bfff84 	movi	r2,-2
81128598:	1884703a 	and	r2,r3,r2
8112859c:	1001703a 	wrctl	status,r2
811285a0:	e0bffd17 	ldw	r2,-12(fp)
811285a4:	e0bffc15 	stw	r2,-16(fp)
811285a8:	d0a07417 	ldw	r2,-32304(gp)
811285ac:	10800044 	addi	r2,r2,1
811285b0:	d0a07415 	stw	r2,-32304(gp)
811285b4:	e0bffc17 	ldw	r2,-16(fp)
811285b8:	e0bffe15 	stw	r2,-8(fp)
811285bc:	e0bffe17 	ldw	r2,-8(fp)
811285c0:	1001703a 	wrctl	status,r2
811285c4:	113973c0 	call	8113973c <OSTaskIdleHook>
811285c8:	003fef06 	br	81128588 <__reset+0xfb108588>

811285cc <OS_TaskStat>:
811285cc:	defff804 	addi	sp,sp,-32
811285d0:	de00012e 	bgeu	sp,et,811285d8 <OS_TaskStat+0xc>
811285d4:	003b68fa 	trap	3
811285d8:	dfc00715 	stw	ra,28(sp)
811285dc:	df000615 	stw	fp,24(sp)
811285e0:	dc400515 	stw	r17,20(sp)
811285e4:	dc000415 	stw	r16,16(sp)
811285e8:	df000604 	addi	fp,sp,24
811285ec:	e13ffd15 	stw	r4,-12(fp)
811285f0:	e03ffa15 	stw	zero,-24(fp)
811285f4:	00000206 	br	81128600 <OS_TaskStat+0x34>
811285f8:	01003204 	movi	r4,200
811285fc:	112f0780 	call	8112f078 <OSTimeDly>
81128600:	d0a08903 	ldbu	r2,-32220(gp)
81128604:	10803fcc 	andi	r2,r2,255
81128608:	103ffb26 	beq	r2,zero,811285f8 <__reset+0xfb1085f8>
8112860c:	d0e07a17 	ldw	r3,-32280(gp)
81128610:	00947b34 	movhi	r2,20972
81128614:	10a147c4 	addi	r2,r2,-31457
81128618:	1888383a 	mulxuu	r4,r3,r2
8112861c:	1885383a 	mul	r2,r3,r2
81128620:	1021883a 	mov	r16,r2
81128624:	2023883a 	mov	r17,r4
81128628:	8804d17a 	srli	r2,r17,5
8112862c:	d0a07a15 	stw	r2,-32280(gp)
81128630:	d0a07a17 	ldw	r2,-32280(gp)
81128634:	1000031e 	bne	r2,zero,81128644 <OS_TaskStat+0x78>
81128638:	d0207c05 	stb	zero,-32272(gp)
8112863c:	01003fc4 	movi	r4,255
81128640:	112ece80 	call	8112ece8 <OSTaskSuspend>
81128644:	0005303a 	rdctl	r2,status
81128648:	e0bffb15 	stw	r2,-20(fp)
8112864c:	e0fffb17 	ldw	r3,-20(fp)
81128650:	00bfff84 	movi	r2,-2
81128654:	1884703a 	and	r2,r3,r2
81128658:	1001703a 	wrctl	status,r2
8112865c:	e0bffb17 	ldw	r2,-20(fp)
81128660:	e0bffa15 	stw	r2,-24(fp)
81128664:	d0a07417 	ldw	r2,-32304(gp)
81128668:	d0a08a15 	stw	r2,-32216(gp)
8112866c:	d0207415 	stw	zero,-32304(gp)
81128670:	e0bffa17 	ldw	r2,-24(fp)
81128674:	e0bffc15 	stw	r2,-16(fp)
81128678:	e0bffc17 	ldw	r2,-16(fp)
8112867c:	1001703a 	wrctl	status,r2
81128680:	d0e08a17 	ldw	r3,-32216(gp)
81128684:	d0a07a17 	ldw	r2,-32280(gp)
81128688:	1885203a 	divu	r2,r3,r2
8112868c:	1007883a 	mov	r3,r2
81128690:	00801904 	movi	r2,100
81128694:	10c5c83a 	sub	r2,r2,r3
81128698:	d0a07c05 	stb	r2,-32272(gp)
8112869c:	113966c0 	call	8113966c <OSTaskStatHook>
811286a0:	11286b00 	call	811286b0 <OS_TaskStatStkChk>
811286a4:	01001904 	movi	r4,100
811286a8:	112f0780 	call	8112f078 <OSTimeDly>
811286ac:	003fe506 	br	81128644 <__reset+0xfb108644>

811286b0 <OS_TaskStatStkChk>:
811286b0:	defffa04 	addi	sp,sp,-24
811286b4:	de00012e 	bgeu	sp,et,811286bc <OS_TaskStatStkChk+0xc>
811286b8:	003b68fa 	trap	3
811286bc:	dfc00515 	stw	ra,20(sp)
811286c0:	df000415 	stw	fp,16(sp)
811286c4:	df000404 	addi	fp,sp,16
811286c8:	e03ffc05 	stb	zero,-16(fp)
811286cc:	00002406 	br	81128760 <OS_TaskStatStkChk+0xb0>
811286d0:	e0bffc03 	ldbu	r2,-16(fp)
811286d4:	e0fffe04 	addi	r3,fp,-8
811286d8:	180b883a 	mov	r5,r3
811286dc:	1009883a 	mov	r4,r2
811286e0:	112eb200 	call	8112eb20 <OSTaskStkChk>
811286e4:	e0bffc45 	stb	r2,-15(fp)
811286e8:	e0bffc43 	ldbu	r2,-15(fp)
811286ec:	1000191e 	bne	r2,zero,81128754 <OS_TaskStatStkChk+0xa4>
811286f0:	e0fffc03 	ldbu	r3,-16(fp)
811286f4:	00a04574 	movhi	r2,33045
811286f8:	1087e104 	addi	r2,r2,8068
811286fc:	18c7883a 	add	r3,r3,r3
81128700:	18c7883a 	add	r3,r3,r3
81128704:	10c5883a 	add	r2,r2,r3
81128708:	10800017 	ldw	r2,0(r2)
8112870c:	e0bffd15 	stw	r2,-12(fp)
81128710:	e0bffd17 	ldw	r2,-12(fp)
81128714:	10000f26 	beq	r2,zero,81128754 <OS_TaskStatStkChk+0xa4>
81128718:	e0bffd17 	ldw	r2,-12(fp)
8112871c:	10800060 	cmpeqi	r2,r2,1
81128720:	10000c1e 	bne	r2,zero,81128754 <OS_TaskStatStkChk+0xa4>
81128724:	e0bffd17 	ldw	r2,-12(fp)
81128728:	10c00217 	ldw	r3,8(r2)
8112872c:	e0bffd17 	ldw	r2,-12(fp)
81128730:	10800317 	ldw	r2,12(r2)
81128734:	1085883a 	add	r2,r2,r2
81128738:	1085883a 	add	r2,r2,r2
8112873c:	1887883a 	add	r3,r3,r2
81128740:	e0bffd17 	ldw	r2,-12(fp)
81128744:	10c01115 	stw	r3,68(r2)
81128748:	e0ffff17 	ldw	r3,-4(fp)
8112874c:	e0bffd17 	ldw	r2,-12(fp)
81128750:	10c01215 	stw	r3,72(r2)
81128754:	e0bffc03 	ldbu	r2,-16(fp)
81128758:	10800044 	addi	r2,r2,1
8112875c:	e0bffc05 	stb	r2,-16(fp)
81128760:	e0bffc03 	ldbu	r2,-16(fp)
81128764:	10800a70 	cmpltui	r2,r2,41
81128768:	103fd91e 	bne	r2,zero,811286d0 <__reset+0xfb1086d0>
8112876c:	0001883a 	nop
81128770:	e037883a 	mov	sp,fp
81128774:	dfc00117 	ldw	ra,4(sp)
81128778:	df000017 	ldw	fp,0(sp)
8112877c:	dec00204 	addi	sp,sp,8
81128780:	f800283a 	ret

81128784 <OS_TCBInit>:
81128784:	defff204 	addi	sp,sp,-56
81128788:	de00012e 	bgeu	sp,et,81128790 <OS_TCBInit+0xc>
8112878c:	003b68fa 	trap	3
81128790:	dfc00d15 	stw	ra,52(sp)
81128794:	df000c15 	stw	fp,48(sp)
81128798:	df000c04 	addi	fp,sp,48
8112879c:	e17ffc15 	stw	r5,-16(fp)
811287a0:	e1bffd15 	stw	r6,-12(fp)
811287a4:	3807883a 	mov	r3,r7
811287a8:	e0800417 	ldw	r2,16(fp)
811287ac:	e13ffb05 	stb	r4,-20(fp)
811287b0:	e0fffe0d 	sth	r3,-8(fp)
811287b4:	e0bfff0d 	sth	r2,-4(fp)
811287b8:	e03ff415 	stw	zero,-48(fp)
811287bc:	0005303a 	rdctl	r2,status
811287c0:	e0bffa15 	stw	r2,-24(fp)
811287c4:	e0fffa17 	ldw	r3,-24(fp)
811287c8:	00bfff84 	movi	r2,-2
811287cc:	1884703a 	and	r2,r3,r2
811287d0:	1001703a 	wrctl	status,r2
811287d4:	e0bffa17 	ldw	r2,-24(fp)
811287d8:	e0bff415 	stw	r2,-48(fp)
811287dc:	d0a07b17 	ldw	r2,-32276(gp)
811287e0:	e0bff615 	stw	r2,-40(fp)
811287e4:	e0bff617 	ldw	r2,-40(fp)
811287e8:	10009326 	beq	r2,zero,81128a38 <OS_TCBInit+0x2b4>
811287ec:	e0bff617 	ldw	r2,-40(fp)
811287f0:	10800517 	ldw	r2,20(r2)
811287f4:	d0a07b15 	stw	r2,-32276(gp)
811287f8:	e0bff417 	ldw	r2,-48(fp)
811287fc:	e0bff815 	stw	r2,-32(fp)
81128800:	e0bff817 	ldw	r2,-32(fp)
81128804:	1001703a 	wrctl	status,r2
81128808:	e0bff617 	ldw	r2,-40(fp)
8112880c:	e0fffc17 	ldw	r3,-16(fp)
81128810:	10c00015 	stw	r3,0(r2)
81128814:	e0bff617 	ldw	r2,-40(fp)
81128818:	e0fffb03 	ldbu	r3,-20(fp)
8112881c:	10c00c85 	stb	r3,50(r2)
81128820:	e0bff617 	ldw	r2,-40(fp)
81128824:	10000c05 	stb	zero,48(r2)
81128828:	e0bff617 	ldw	r2,-40(fp)
8112882c:	10000c45 	stb	zero,49(r2)
81128830:	e0bff617 	ldw	r2,-40(fp)
81128834:	10000b8d 	sth	zero,46(r2)
81128838:	e0bff617 	ldw	r2,-40(fp)
8112883c:	e0c00317 	ldw	r3,12(fp)
81128840:	10c00115 	stw	r3,4(r2)
81128844:	e0bff617 	ldw	r2,-40(fp)
81128848:	e0c00217 	ldw	r3,8(fp)
8112884c:	10c00315 	stw	r3,12(r2)
81128850:	e0bff617 	ldw	r2,-40(fp)
81128854:	e0fffd17 	ldw	r3,-12(fp)
81128858:	10c00215 	stw	r3,8(r2)
8112885c:	e0bff617 	ldw	r2,-40(fp)
81128860:	e0ffff0b 	ldhu	r3,-4(fp)
81128864:	10c0040d 	sth	r3,16(r2)
81128868:	e0bff617 	ldw	r2,-40(fp)
8112886c:	e0fffe0b 	ldhu	r3,-8(fp)
81128870:	10c0048d 	sth	r3,18(r2)
81128874:	e0bff617 	ldw	r2,-40(fp)
81128878:	10000dc5 	stb	zero,55(r2)
8112887c:	e0bffb03 	ldbu	r2,-20(fp)
81128880:	1004d0fa 	srli	r2,r2,3
81128884:	1007883a 	mov	r3,r2
81128888:	e0bff617 	ldw	r2,-40(fp)
8112888c:	10c00d05 	stb	r3,52(r2)
81128890:	e0bffb03 	ldbu	r2,-20(fp)
81128894:	108001cc 	andi	r2,r2,7
81128898:	1007883a 	mov	r3,r2
8112889c:	e0bff617 	ldw	r2,-40(fp)
811288a0:	10c00cc5 	stb	r3,51(r2)
811288a4:	e0bff617 	ldw	r2,-40(fp)
811288a8:	10800d03 	ldbu	r2,52(r2)
811288ac:	10803fcc 	andi	r2,r2,255
811288b0:	00c00044 	movi	r3,1
811288b4:	1884983a 	sll	r2,r3,r2
811288b8:	1007883a 	mov	r3,r2
811288bc:	e0bff617 	ldw	r2,-40(fp)
811288c0:	10c00d85 	stb	r3,54(r2)
811288c4:	e0bff617 	ldw	r2,-40(fp)
811288c8:	10800cc3 	ldbu	r2,51(r2)
811288cc:	10803fcc 	andi	r2,r2,255
811288d0:	00c00044 	movi	r3,1
811288d4:	1884983a 	sll	r2,r3,r2
811288d8:	1007883a 	mov	r3,r2
811288dc:	e0bff617 	ldw	r2,-40(fp)
811288e0:	10c00d45 	stb	r3,53(r2)
811288e4:	e0bff617 	ldw	r2,-40(fp)
811288e8:	10000715 	stw	zero,28(r2)
811288ec:	e0bff617 	ldw	r2,-40(fp)
811288f0:	10000815 	stw	zero,32(r2)
811288f4:	e0bff617 	ldw	r2,-40(fp)
811288f8:	10000a15 	stw	zero,40(r2)
811288fc:	e0bff617 	ldw	r2,-40(fp)
81128900:	10000915 	stw	zero,36(r2)
81128904:	e0bff617 	ldw	r2,-40(fp)
81128908:	10000e15 	stw	zero,56(r2)
8112890c:	e0bff617 	ldw	r2,-40(fp)
81128910:	10001015 	stw	zero,64(r2)
81128914:	e0bff617 	ldw	r2,-40(fp)
81128918:	10000f15 	stw	zero,60(r2)
8112891c:	e0bff617 	ldw	r2,-40(fp)
81128920:	10001115 	stw	zero,68(r2)
81128924:	e0bff617 	ldw	r2,-40(fp)
81128928:	10001215 	stw	zero,72(r2)
8112892c:	e0bff617 	ldw	r2,-40(fp)
81128930:	00c00fc4 	movi	r3,63
81128934:	10c01305 	stb	r3,76(r2)
81128938:	e0bff617 	ldw	r2,-40(fp)
8112893c:	10001345 	stb	zero,77(r2)
81128940:	e13ff617 	ldw	r4,-40(fp)
81128944:	11397640 	call	81139764 <OSTCBInitHook>
81128948:	e13ff617 	ldw	r4,-40(fp)
8112894c:	11395ec0 	call	811395ec <OSTaskCreateHook>
81128950:	0005303a 	rdctl	r2,status
81128954:	e0bff515 	stw	r2,-44(fp)
81128958:	e0fff517 	ldw	r3,-44(fp)
8112895c:	00bfff84 	movi	r2,-2
81128960:	1884703a 	and	r2,r3,r2
81128964:	1001703a 	wrctl	status,r2
81128968:	e0bff517 	ldw	r2,-44(fp)
8112896c:	e0bff415 	stw	r2,-48(fp)
81128970:	e0fffb03 	ldbu	r3,-20(fp)
81128974:	00a04574 	movhi	r2,33045
81128978:	1087e104 	addi	r2,r2,8068
8112897c:	18c7883a 	add	r3,r3,r3
81128980:	18c7883a 	add	r3,r3,r3
81128984:	10c5883a 	add	r2,r2,r3
81128988:	e0fff617 	ldw	r3,-40(fp)
8112898c:	10c00015 	stw	r3,0(r2)
81128990:	d0e07617 	ldw	r3,-32296(gp)
81128994:	e0bff617 	ldw	r2,-40(fp)
81128998:	10c00515 	stw	r3,20(r2)
8112899c:	e0bff617 	ldw	r2,-40(fp)
811289a0:	10000615 	stw	zero,24(r2)
811289a4:	d0a07617 	ldw	r2,-32296(gp)
811289a8:	10000326 	beq	r2,zero,811289b8 <OS_TCBInit+0x234>
811289ac:	d0a07617 	ldw	r2,-32296(gp)
811289b0:	e0fff617 	ldw	r3,-40(fp)
811289b4:	10c00615 	stw	r3,24(r2)
811289b8:	e0bff617 	ldw	r2,-40(fp)
811289bc:	d0a07615 	stw	r2,-32296(gp)
811289c0:	e0bff617 	ldw	r2,-40(fp)
811289c4:	10c00d83 	ldbu	r3,54(r2)
811289c8:	d0a08003 	ldbu	r2,-32256(gp)
811289cc:	1884b03a 	or	r2,r3,r2
811289d0:	d0a08005 	stb	r2,-32256(gp)
811289d4:	e0bff617 	ldw	r2,-40(fp)
811289d8:	10800d03 	ldbu	r2,52(r2)
811289dc:	10c03fcc 	andi	r3,r2,255
811289e0:	e0bff617 	ldw	r2,-40(fp)
811289e4:	10800d03 	ldbu	r2,52(r2)
811289e8:	11003fcc 	andi	r4,r2,255
811289ec:	d0a08044 	addi	r2,gp,-32255
811289f0:	2085883a 	add	r2,r4,r2
811289f4:	11000003 	ldbu	r4,0(r2)
811289f8:	e0bff617 	ldw	r2,-40(fp)
811289fc:	10800d43 	ldbu	r2,53(r2)
81128a00:	2084b03a 	or	r2,r4,r2
81128a04:	1009883a 	mov	r4,r2
81128a08:	d0a08044 	addi	r2,gp,-32255
81128a0c:	1885883a 	add	r2,r3,r2
81128a10:	11000005 	stb	r4,0(r2)
81128a14:	d0a07c43 	ldbu	r2,-32271(gp)
81128a18:	10800044 	addi	r2,r2,1
81128a1c:	d0a07c45 	stb	r2,-32271(gp)
81128a20:	e0bff417 	ldw	r2,-48(fp)
81128a24:	e0bff715 	stw	r2,-36(fp)
81128a28:	e0bff717 	ldw	r2,-36(fp)
81128a2c:	1001703a 	wrctl	status,r2
81128a30:	0005883a 	mov	r2,zero
81128a34:	00000506 	br	81128a4c <OS_TCBInit+0x2c8>
81128a38:	e0bff417 	ldw	r2,-48(fp)
81128a3c:	e0bff915 	stw	r2,-28(fp)
81128a40:	e0bff917 	ldw	r2,-28(fp)
81128a44:	1001703a 	wrctl	status,r2
81128a48:	00801084 	movi	r2,66
81128a4c:	e037883a 	mov	sp,fp
81128a50:	dfc00117 	ldw	ra,4(sp)
81128a54:	df000017 	ldw	fp,0(sp)
81128a58:	dec00204 	addi	sp,sp,8
81128a5c:	f800283a 	ret

81128a60 <OSDebugInit>:
81128a60:	defffe04 	addi	sp,sp,-8
81128a64:	de00012e 	bgeu	sp,et,81128a6c <OSDebugInit+0xc>
81128a68:	003b68fa 	trap	3
81128a6c:	df000115 	stw	fp,4(sp)
81128a70:	df000104 	addi	fp,sp,4
81128a74:	d0a01704 	addi	r2,gp,-32676
81128a78:	e0bfff15 	stw	r2,-4(fp)
81128a7c:	d0a01804 	addi	r2,gp,-32672
81128a80:	e0bfff15 	stw	r2,-4(fp)
81128a84:	d0a01984 	addi	r2,gp,-32666
81128a88:	e0bfff15 	stw	r2,-4(fp)
81128a8c:	d0a01a04 	addi	r2,gp,-32664
81128a90:	e0bfff15 	stw	r2,-4(fp)
81128a94:	d0a01904 	addi	r2,gp,-32668
81128a98:	e0bfff15 	stw	r2,-4(fp)
81128a9c:	d0a01a84 	addi	r2,gp,-32662
81128aa0:	e0bfff15 	stw	r2,-4(fp)
81128aa4:	d0a01b04 	addi	r2,gp,-32660
81128aa8:	e0bfff15 	stw	r2,-4(fp)
81128aac:	d0a01b84 	addi	r2,gp,-32658
81128ab0:	e0bfff15 	stw	r2,-4(fp)
81128ab4:	d0a01c04 	addi	r2,gp,-32656
81128ab8:	e0bfff15 	stw	r2,-4(fp)
81128abc:	d0a01c84 	addi	r2,gp,-32654
81128ac0:	e0bfff15 	stw	r2,-4(fp)
81128ac4:	d0a01d04 	addi	r2,gp,-32652
81128ac8:	e0bfff15 	stw	r2,-4(fp)
81128acc:	d0a01d84 	addi	r2,gp,-32650
81128ad0:	e0bfff15 	stw	r2,-4(fp)
81128ad4:	d0a01e04 	addi	r2,gp,-32648
81128ad8:	e0bfff15 	stw	r2,-4(fp)
81128adc:	d0a01e84 	addi	r2,gp,-32646
81128ae0:	e0bfff15 	stw	r2,-4(fp)
81128ae4:	d0a01f04 	addi	r2,gp,-32644
81128ae8:	e0bfff15 	stw	r2,-4(fp)
81128aec:	d0a01f84 	addi	r2,gp,-32642
81128af0:	e0bfff15 	stw	r2,-4(fp)
81128af4:	d0a02004 	addi	r2,gp,-32640
81128af8:	e0bfff15 	stw	r2,-4(fp)
81128afc:	d0a02084 	addi	r2,gp,-32638
81128b00:	e0bfff15 	stw	r2,-4(fp)
81128b04:	d0a02104 	addi	r2,gp,-32636
81128b08:	e0bfff15 	stw	r2,-4(fp)
81128b0c:	d0a02184 	addi	r2,gp,-32634
81128b10:	e0bfff15 	stw	r2,-4(fp)
81128b14:	d0a02204 	addi	r2,gp,-32632
81128b18:	e0bfff15 	stw	r2,-4(fp)
81128b1c:	d0a02284 	addi	r2,gp,-32630
81128b20:	e0bfff15 	stw	r2,-4(fp)
81128b24:	d0a02304 	addi	r2,gp,-32628
81128b28:	e0bfff15 	stw	r2,-4(fp)
81128b2c:	d0a02384 	addi	r2,gp,-32626
81128b30:	e0bfff15 	stw	r2,-4(fp)
81128b34:	d0a02404 	addi	r2,gp,-32624
81128b38:	e0bfff15 	stw	r2,-4(fp)
81128b3c:	d0a02484 	addi	r2,gp,-32622
81128b40:	e0bfff15 	stw	r2,-4(fp)
81128b44:	d0a02504 	addi	r2,gp,-32620
81128b48:	e0bfff15 	stw	r2,-4(fp)
81128b4c:	d0a02584 	addi	r2,gp,-32618
81128b50:	e0bfff15 	stw	r2,-4(fp)
81128b54:	d0a02604 	addi	r2,gp,-32616
81128b58:	e0bfff15 	stw	r2,-4(fp)
81128b5c:	d0a02684 	addi	r2,gp,-32614
81128b60:	e0bfff15 	stw	r2,-4(fp)
81128b64:	d0a02704 	addi	r2,gp,-32612
81128b68:	e0bfff15 	stw	r2,-4(fp)
81128b6c:	d0a02784 	addi	r2,gp,-32610
81128b70:	e0bfff15 	stw	r2,-4(fp)
81128b74:	d0a02804 	addi	r2,gp,-32608
81128b78:	e0bfff15 	stw	r2,-4(fp)
81128b7c:	d0a02884 	addi	r2,gp,-32606
81128b80:	e0bfff15 	stw	r2,-4(fp)
81128b84:	d0a02904 	addi	r2,gp,-32604
81128b88:	e0bfff15 	stw	r2,-4(fp)
81128b8c:	d0a02984 	addi	r2,gp,-32602
81128b90:	e0bfff15 	stw	r2,-4(fp)
81128b94:	d0a02a04 	addi	r2,gp,-32600
81128b98:	e0bfff15 	stw	r2,-4(fp)
81128b9c:	d0a02a84 	addi	r2,gp,-32598
81128ba0:	e0bfff15 	stw	r2,-4(fp)
81128ba4:	d0a02b04 	addi	r2,gp,-32596
81128ba8:	e0bfff15 	stw	r2,-4(fp)
81128bac:	d0a02b84 	addi	r2,gp,-32594
81128bb0:	e0bfff15 	stw	r2,-4(fp)
81128bb4:	d0a02c04 	addi	r2,gp,-32592
81128bb8:	e0bfff15 	stw	r2,-4(fp)
81128bbc:	d0a02c84 	addi	r2,gp,-32590
81128bc0:	e0bfff15 	stw	r2,-4(fp)
81128bc4:	d0a02d04 	addi	r2,gp,-32588
81128bc8:	e0bfff15 	stw	r2,-4(fp)
81128bcc:	d0a02d84 	addi	r2,gp,-32586
81128bd0:	e0bfff15 	stw	r2,-4(fp)
81128bd4:	00a04574 	movhi	r2,33045
81128bd8:	10b75304 	addi	r2,r2,-8884
81128bdc:	e0bfff15 	stw	r2,-4(fp)
81128be0:	00a04574 	movhi	r2,33045
81128be4:	10b67304 	addi	r2,r2,-9780
81128be8:	e0bfff15 	stw	r2,-4(fp)
81128bec:	d0a02e84 	addi	r2,gp,-32582
81128bf0:	e0bfff15 	stw	r2,-4(fp)
81128bf4:	d0a02f04 	addi	r2,gp,-32580
81128bf8:	e0bfff15 	stw	r2,-4(fp)
81128bfc:	d0a02f84 	addi	r2,gp,-32578
81128c00:	e0bfff15 	stw	r2,-4(fp)
81128c04:	d0a03004 	addi	r2,gp,-32576
81128c08:	e0bfff15 	stw	r2,-4(fp)
81128c0c:	d0a03084 	addi	r2,gp,-32574
81128c10:	e0bfff15 	stw	r2,-4(fp)
81128c14:	d0a03104 	addi	r2,gp,-32572
81128c18:	e0bfff15 	stw	r2,-4(fp)
81128c1c:	d0a03184 	addi	r2,gp,-32570
81128c20:	e0bfff15 	stw	r2,-4(fp)
81128c24:	d0a03204 	addi	r2,gp,-32568
81128c28:	e0bfff15 	stw	r2,-4(fp)
81128c2c:	d0a03284 	addi	r2,gp,-32566
81128c30:	e0bfff15 	stw	r2,-4(fp)
81128c34:	d0a02e04 	addi	r2,gp,-32584
81128c38:	e0bfff15 	stw	r2,-4(fp)
81128c3c:	d0a03304 	addi	r2,gp,-32564
81128c40:	e0bfff15 	stw	r2,-4(fp)
81128c44:	0001883a 	nop
81128c48:	e037883a 	mov	sp,fp
81128c4c:	df000017 	ldw	fp,0(sp)
81128c50:	dec00104 	addi	sp,sp,4
81128c54:	f800283a 	ret

81128c58 <OSFlagAccept>:
81128c58:	defff204 	addi	sp,sp,-56
81128c5c:	de00012e 	bgeu	sp,et,81128c64 <OSFlagAccept+0xc>
81128c60:	003b68fa 	trap	3
81128c64:	df000d15 	stw	fp,52(sp)
81128c68:	df000d04 	addi	fp,sp,52
81128c6c:	e13ffc15 	stw	r4,-16(fp)
81128c70:	2807883a 	mov	r3,r5
81128c74:	3005883a 	mov	r2,r6
81128c78:	e1ffff15 	stw	r7,-4(fp)
81128c7c:	e0fffd0d 	sth	r3,-12(fp)
81128c80:	e0bffe05 	stb	r2,-8(fp)
81128c84:	e03ff415 	stw	zero,-48(fp)
81128c88:	e0bfff17 	ldw	r2,-4(fp)
81128c8c:	1000021e 	bne	r2,zero,81128c98 <OSFlagAccept+0x40>
81128c90:	0005883a 	mov	r2,zero
81128c94:	0000b006 	br	81128f58 <OSFlagAccept+0x300>
81128c98:	e0bffc17 	ldw	r2,-16(fp)
81128c9c:	1000051e 	bne	r2,zero,81128cb4 <OSFlagAccept+0x5c>
81128ca0:	e0bfff17 	ldw	r2,-4(fp)
81128ca4:	00c01b84 	movi	r3,110
81128ca8:	10c00005 	stb	r3,0(r2)
81128cac:	0005883a 	mov	r2,zero
81128cb0:	0000a906 	br	81128f58 <OSFlagAccept+0x300>
81128cb4:	e0bffc17 	ldw	r2,-16(fp)
81128cb8:	10800003 	ldbu	r2,0(r2)
81128cbc:	10803fcc 	andi	r2,r2,255
81128cc0:	10800160 	cmpeqi	r2,r2,5
81128cc4:	1000051e 	bne	r2,zero,81128cdc <OSFlagAccept+0x84>
81128cc8:	e0bfff17 	ldw	r2,-4(fp)
81128ccc:	00c00044 	movi	r3,1
81128cd0:	10c00005 	stb	r3,0(r2)
81128cd4:	0005883a 	mov	r2,zero
81128cd8:	00009f06 	br	81128f58 <OSFlagAccept+0x300>
81128cdc:	e0fffe03 	ldbu	r3,-8(fp)
81128ce0:	00bfe004 	movi	r2,-128
81128ce4:	1884703a 	and	r2,r3,r2
81128ce8:	e0bff505 	stb	r2,-44(fp)
81128cec:	e0bff503 	ldbu	r2,-44(fp)
81128cf0:	10000626 	beq	r2,zero,81128d0c <OSFlagAccept+0xb4>
81128cf4:	e0bffe03 	ldbu	r2,-8(fp)
81128cf8:	10801fcc 	andi	r2,r2,127
81128cfc:	e0bffe05 	stb	r2,-8(fp)
81128d00:	00800044 	movi	r2,1
81128d04:	e0bff385 	stb	r2,-50(fp)
81128d08:	00000106 	br	81128d10 <OSFlagAccept+0xb8>
81128d0c:	e03ff385 	stb	zero,-50(fp)
81128d10:	e0bfff17 	ldw	r2,-4(fp)
81128d14:	10000005 	stb	zero,0(r2)
81128d18:	0005303a 	rdctl	r2,status
81128d1c:	e0bffb15 	stw	r2,-20(fp)
81128d20:	e0fffb17 	ldw	r3,-20(fp)
81128d24:	00bfff84 	movi	r2,-2
81128d28:	1884703a 	and	r2,r3,r2
81128d2c:	1001703a 	wrctl	status,r2
81128d30:	e0bffb17 	ldw	r2,-20(fp)
81128d34:	e0bff415 	stw	r2,-48(fp)
81128d38:	e0bffe03 	ldbu	r2,-8(fp)
81128d3c:	10c00060 	cmpeqi	r3,r2,1
81128d40:	18005f1e 	bne	r3,zero,81128ec0 <OSFlagAccept+0x268>
81128d44:	10c00088 	cmpgei	r3,r2,2
81128d48:	1800021e 	bne	r3,zero,81128d54 <OSFlagAccept+0xfc>
81128d4c:	10003f26 	beq	r2,zero,81128e4c <OSFlagAccept+0x1f4>
81128d50:	00007706 	br	81128f30 <OSFlagAccept+0x2d8>
81128d54:	10c000a0 	cmpeqi	r3,r2,2
81128d58:	1800031e 	bne	r3,zero,81128d68 <OSFlagAccept+0x110>
81128d5c:	108000e0 	cmpeqi	r2,r2,3
81128d60:	10001e1e 	bne	r2,zero,81128ddc <OSFlagAccept+0x184>
81128d64:	00007206 	br	81128f30 <OSFlagAccept+0x2d8>
81128d68:	e0bffc17 	ldw	r2,-16(fp)
81128d6c:	10c0020b 	ldhu	r3,8(r2)
81128d70:	e0bffd0b 	ldhu	r2,-12(fp)
81128d74:	1884703a 	and	r2,r3,r2
81128d78:	e0bff30d 	sth	r2,-52(fp)
81128d7c:	e0fff30b 	ldhu	r3,-52(fp)
81128d80:	e0bffd0b 	ldhu	r2,-12(fp)
81128d84:	18800d1e 	bne	r3,r2,81128dbc <OSFlagAccept+0x164>
81128d88:	e0bff383 	ldbu	r2,-50(fp)
81128d8c:	10800058 	cmpnei	r2,r2,1
81128d90:	10000d1e 	bne	r2,zero,81128dc8 <OSFlagAccept+0x170>
81128d94:	e0bffc17 	ldw	r2,-16(fp)
81128d98:	1080020b 	ldhu	r2,8(r2)
81128d9c:	1007883a 	mov	r3,r2
81128da0:	e0bff30b 	ldhu	r2,-52(fp)
81128da4:	0084303a 	nor	r2,zero,r2
81128da8:	1884703a 	and	r2,r3,r2
81128dac:	1007883a 	mov	r3,r2
81128db0:	e0bffc17 	ldw	r2,-16(fp)
81128db4:	10c0020d 	sth	r3,8(r2)
81128db8:	00000306 	br	81128dc8 <OSFlagAccept+0x170>
81128dbc:	e0bfff17 	ldw	r2,-4(fp)
81128dc0:	00c01c04 	movi	r3,112
81128dc4:	10c00005 	stb	r3,0(r2)
81128dc8:	e0bff417 	ldw	r2,-48(fp)
81128dcc:	e0bff615 	stw	r2,-40(fp)
81128dd0:	e0bff617 	ldw	r2,-40(fp)
81128dd4:	1001703a 	wrctl	status,r2
81128dd8:	00005e06 	br	81128f54 <OSFlagAccept+0x2fc>
81128ddc:	e0bffc17 	ldw	r2,-16(fp)
81128de0:	10c0020b 	ldhu	r3,8(r2)
81128de4:	e0bffd0b 	ldhu	r2,-12(fp)
81128de8:	1884703a 	and	r2,r3,r2
81128dec:	e0bff30d 	sth	r2,-52(fp)
81128df0:	e0bff30b 	ldhu	r2,-52(fp)
81128df4:	10000d26 	beq	r2,zero,81128e2c <OSFlagAccept+0x1d4>
81128df8:	e0bff383 	ldbu	r2,-50(fp)
81128dfc:	10800058 	cmpnei	r2,r2,1
81128e00:	10000d1e 	bne	r2,zero,81128e38 <OSFlagAccept+0x1e0>
81128e04:	e0bffc17 	ldw	r2,-16(fp)
81128e08:	1080020b 	ldhu	r2,8(r2)
81128e0c:	1007883a 	mov	r3,r2
81128e10:	e0bff30b 	ldhu	r2,-52(fp)
81128e14:	0084303a 	nor	r2,zero,r2
81128e18:	1884703a 	and	r2,r3,r2
81128e1c:	1007883a 	mov	r3,r2
81128e20:	e0bffc17 	ldw	r2,-16(fp)
81128e24:	10c0020d 	sth	r3,8(r2)
81128e28:	00000306 	br	81128e38 <OSFlagAccept+0x1e0>
81128e2c:	e0bfff17 	ldw	r2,-4(fp)
81128e30:	00c01c04 	movi	r3,112
81128e34:	10c00005 	stb	r3,0(r2)
81128e38:	e0bff417 	ldw	r2,-48(fp)
81128e3c:	e0bff715 	stw	r2,-36(fp)
81128e40:	e0bff717 	ldw	r2,-36(fp)
81128e44:	1001703a 	wrctl	status,r2
81128e48:	00004206 	br	81128f54 <OSFlagAccept+0x2fc>
81128e4c:	e0bffc17 	ldw	r2,-16(fp)
81128e50:	1080020b 	ldhu	r2,8(r2)
81128e54:	0084303a 	nor	r2,zero,r2
81128e58:	1007883a 	mov	r3,r2
81128e5c:	e0bffd0b 	ldhu	r2,-12(fp)
81128e60:	1884703a 	and	r2,r3,r2
81128e64:	e0bff30d 	sth	r2,-52(fp)
81128e68:	e0fff30b 	ldhu	r3,-52(fp)
81128e6c:	e0bffd0b 	ldhu	r2,-12(fp)
81128e70:	18800b1e 	bne	r3,r2,81128ea0 <OSFlagAccept+0x248>
81128e74:	e0bff383 	ldbu	r2,-50(fp)
81128e78:	10800058 	cmpnei	r2,r2,1
81128e7c:	10000b1e 	bne	r2,zero,81128eac <OSFlagAccept+0x254>
81128e80:	e0bffc17 	ldw	r2,-16(fp)
81128e84:	10c0020b 	ldhu	r3,8(r2)
81128e88:	e0bff30b 	ldhu	r2,-52(fp)
81128e8c:	1884b03a 	or	r2,r3,r2
81128e90:	1007883a 	mov	r3,r2
81128e94:	e0bffc17 	ldw	r2,-16(fp)
81128e98:	10c0020d 	sth	r3,8(r2)
81128e9c:	00000306 	br	81128eac <OSFlagAccept+0x254>
81128ea0:	e0bfff17 	ldw	r2,-4(fp)
81128ea4:	00c01c04 	movi	r3,112
81128ea8:	10c00005 	stb	r3,0(r2)
81128eac:	e0bff417 	ldw	r2,-48(fp)
81128eb0:	e0bff815 	stw	r2,-32(fp)
81128eb4:	e0bff817 	ldw	r2,-32(fp)
81128eb8:	1001703a 	wrctl	status,r2
81128ebc:	00002506 	br	81128f54 <OSFlagAccept+0x2fc>
81128ec0:	e0bffc17 	ldw	r2,-16(fp)
81128ec4:	1080020b 	ldhu	r2,8(r2)
81128ec8:	0084303a 	nor	r2,zero,r2
81128ecc:	1007883a 	mov	r3,r2
81128ed0:	e0bffd0b 	ldhu	r2,-12(fp)
81128ed4:	1884703a 	and	r2,r3,r2
81128ed8:	e0bff30d 	sth	r2,-52(fp)
81128edc:	e0bff30b 	ldhu	r2,-52(fp)
81128ee0:	10000b26 	beq	r2,zero,81128f10 <OSFlagAccept+0x2b8>
81128ee4:	e0bff383 	ldbu	r2,-50(fp)
81128ee8:	10800058 	cmpnei	r2,r2,1
81128eec:	10000b1e 	bne	r2,zero,81128f1c <OSFlagAccept+0x2c4>
81128ef0:	e0bffc17 	ldw	r2,-16(fp)
81128ef4:	10c0020b 	ldhu	r3,8(r2)
81128ef8:	e0bff30b 	ldhu	r2,-52(fp)
81128efc:	1884b03a 	or	r2,r3,r2
81128f00:	1007883a 	mov	r3,r2
81128f04:	e0bffc17 	ldw	r2,-16(fp)
81128f08:	10c0020d 	sth	r3,8(r2)
81128f0c:	00000306 	br	81128f1c <OSFlagAccept+0x2c4>
81128f10:	e0bfff17 	ldw	r2,-4(fp)
81128f14:	00c01c04 	movi	r3,112
81128f18:	10c00005 	stb	r3,0(r2)
81128f1c:	e0bff417 	ldw	r2,-48(fp)
81128f20:	e0bff915 	stw	r2,-28(fp)
81128f24:	e0bff917 	ldw	r2,-28(fp)
81128f28:	1001703a 	wrctl	status,r2
81128f2c:	00000906 	br	81128f54 <OSFlagAccept+0x2fc>
81128f30:	e0bff417 	ldw	r2,-48(fp)
81128f34:	e0bffa15 	stw	r2,-24(fp)
81128f38:	e0bffa17 	ldw	r2,-24(fp)
81128f3c:	1001703a 	wrctl	status,r2
81128f40:	e03ff30d 	sth	zero,-52(fp)
81128f44:	e0bfff17 	ldw	r2,-4(fp)
81128f48:	00c01bc4 	movi	r3,111
81128f4c:	10c00005 	stb	r3,0(r2)
81128f50:	0001883a 	nop
81128f54:	e0bff30b 	ldhu	r2,-52(fp)
81128f58:	e037883a 	mov	sp,fp
81128f5c:	df000017 	ldw	fp,0(sp)
81128f60:	dec00104 	addi	sp,sp,4
81128f64:	f800283a 	ret

81128f68 <OSFlagCreate>:
81128f68:	defff804 	addi	sp,sp,-32
81128f6c:	de00012e 	bgeu	sp,et,81128f74 <OSFlagCreate+0xc>
81128f70:	003b68fa 	trap	3
81128f74:	df000715 	stw	fp,28(sp)
81128f78:	df000704 	addi	fp,sp,28
81128f7c:	2005883a 	mov	r2,r4
81128f80:	e17fff15 	stw	r5,-4(fp)
81128f84:	e0bffe0d 	sth	r2,-8(fp)
81128f88:	e03ff915 	stw	zero,-28(fp)
81128f8c:	e0bfff17 	ldw	r2,-4(fp)
81128f90:	1000021e 	bne	r2,zero,81128f9c <OSFlagCreate+0x34>
81128f94:	0005883a 	mov	r2,zero
81128f98:	00003306 	br	81129068 <OSFlagCreate+0x100>
81128f9c:	d0a08303 	ldbu	r2,-32244(gp)
81128fa0:	10803fcc 	andi	r2,r2,255
81128fa4:	10000526 	beq	r2,zero,81128fbc <OSFlagCreate+0x54>
81128fa8:	e0bfff17 	ldw	r2,-4(fp)
81128fac:	00c00404 	movi	r3,16
81128fb0:	10c00005 	stb	r3,0(r2)
81128fb4:	0005883a 	mov	r2,zero
81128fb8:	00002b06 	br	81129068 <OSFlagCreate+0x100>
81128fbc:	0005303a 	rdctl	r2,status
81128fc0:	e0bffd15 	stw	r2,-12(fp)
81128fc4:	e0fffd17 	ldw	r3,-12(fp)
81128fc8:	00bfff84 	movi	r2,-2
81128fcc:	1884703a 	and	r2,r3,r2
81128fd0:	1001703a 	wrctl	status,r2
81128fd4:	e0bffd17 	ldw	r2,-12(fp)
81128fd8:	e0bff915 	stw	r2,-28(fp)
81128fdc:	d0a08817 	ldw	r2,-32224(gp)
81128fe0:	e0bffb15 	stw	r2,-20(fp)
81128fe4:	e0bffb17 	ldw	r2,-20(fp)
81128fe8:	10001726 	beq	r2,zero,81129048 <OSFlagCreate+0xe0>
81128fec:	d0a08817 	ldw	r2,-32224(gp)
81128ff0:	10800117 	ldw	r2,4(r2)
81128ff4:	d0a08815 	stw	r2,-32224(gp)
81128ff8:	e0bffb17 	ldw	r2,-20(fp)
81128ffc:	00c00144 	movi	r3,5
81129000:	10c00005 	stb	r3,0(r2)
81129004:	e0bffb17 	ldw	r2,-20(fp)
81129008:	e0fffe0b 	ldhu	r3,-8(fp)
8112900c:	10c0020d 	sth	r3,8(r2)
81129010:	e0bffb17 	ldw	r2,-20(fp)
81129014:	10000115 	stw	zero,4(r2)
81129018:	e0bffb17 	ldw	r2,-20(fp)
8112901c:	00c00fc4 	movi	r3,63
81129020:	10c00285 	stb	r3,10(r2)
81129024:	e0bffb17 	ldw	r2,-20(fp)
81129028:	100002c5 	stb	zero,11(r2)
8112902c:	e0bff917 	ldw	r2,-28(fp)
81129030:	e0bffa15 	stw	r2,-24(fp)
81129034:	e0bffa17 	ldw	r2,-24(fp)
81129038:	1001703a 	wrctl	status,r2
8112903c:	e0bfff17 	ldw	r2,-4(fp)
81129040:	10000005 	stb	zero,0(r2)
81129044:	00000706 	br	81129064 <OSFlagCreate+0xfc>
81129048:	e0bff917 	ldw	r2,-28(fp)
8112904c:	e0bffc15 	stw	r2,-16(fp)
81129050:	e0bffc17 	ldw	r2,-16(fp)
81129054:	1001703a 	wrctl	status,r2
81129058:	e0bfff17 	ldw	r2,-4(fp)
8112905c:	00c01c84 	movi	r3,114
81129060:	10c00005 	stb	r3,0(r2)
81129064:	e0bffb17 	ldw	r2,-20(fp)
81129068:	e037883a 	mov	sp,fp
8112906c:	df000017 	ldw	fp,0(sp)
81129070:	dec00104 	addi	sp,sp,4
81129074:	f800283a 	ret

81129078 <OSFlagDel>:
81129078:	defff204 	addi	sp,sp,-56
8112907c:	de00012e 	bgeu	sp,et,81129084 <OSFlagDel+0xc>
81129080:	003b68fa 	trap	3
81129084:	dfc00d15 	stw	ra,52(sp)
81129088:	df000c15 	stw	fp,48(sp)
8112908c:	df000c04 	addi	fp,sp,48
81129090:	e13ffd15 	stw	r4,-12(fp)
81129094:	2805883a 	mov	r2,r5
81129098:	e1bfff15 	stw	r6,-4(fp)
8112909c:	e0bffe05 	stb	r2,-8(fp)
811290a0:	e03ff715 	stw	zero,-36(fp)
811290a4:	e0bfff17 	ldw	r2,-4(fp)
811290a8:	1000021e 	bne	r2,zero,811290b4 <OSFlagDel+0x3c>
811290ac:	e0bffd17 	ldw	r2,-12(fp)
811290b0:	00008006 	br	811292b4 <OSFlagDel+0x23c>
811290b4:	e0bffd17 	ldw	r2,-12(fp)
811290b8:	1000051e 	bne	r2,zero,811290d0 <OSFlagDel+0x58>
811290bc:	e0bfff17 	ldw	r2,-4(fp)
811290c0:	00c01b84 	movi	r3,110
811290c4:	10c00005 	stb	r3,0(r2)
811290c8:	e0bffd17 	ldw	r2,-12(fp)
811290cc:	00007906 	br	811292b4 <OSFlagDel+0x23c>
811290d0:	d0a08303 	ldbu	r2,-32244(gp)
811290d4:	10803fcc 	andi	r2,r2,255
811290d8:	10000526 	beq	r2,zero,811290f0 <OSFlagDel+0x78>
811290dc:	e0bfff17 	ldw	r2,-4(fp)
811290e0:	00c003c4 	movi	r3,15
811290e4:	10c00005 	stb	r3,0(r2)
811290e8:	e0bffd17 	ldw	r2,-12(fp)
811290ec:	00007106 	br	811292b4 <OSFlagDel+0x23c>
811290f0:	e0bffd17 	ldw	r2,-12(fp)
811290f4:	10800003 	ldbu	r2,0(r2)
811290f8:	10803fcc 	andi	r2,r2,255
811290fc:	10800160 	cmpeqi	r2,r2,5
81129100:	1000051e 	bne	r2,zero,81129118 <OSFlagDel+0xa0>
81129104:	e0bfff17 	ldw	r2,-4(fp)
81129108:	00c00044 	movi	r3,1
8112910c:	10c00005 	stb	r3,0(r2)
81129110:	e0bffd17 	ldw	r2,-12(fp)
81129114:	00006706 	br	811292b4 <OSFlagDel+0x23c>
81129118:	0005303a 	rdctl	r2,status
8112911c:	e0bffc15 	stw	r2,-16(fp)
81129120:	e0fffc17 	ldw	r3,-16(fp)
81129124:	00bfff84 	movi	r2,-2
81129128:	1884703a 	and	r2,r3,r2
8112912c:	1001703a 	wrctl	status,r2
81129130:	e0bffc17 	ldw	r2,-16(fp)
81129134:	e0bff715 	stw	r2,-36(fp)
81129138:	e0bffd17 	ldw	r2,-12(fp)
8112913c:	10800117 	ldw	r2,4(r2)
81129140:	10000326 	beq	r2,zero,81129150 <OSFlagDel+0xd8>
81129144:	00800044 	movi	r2,1
81129148:	e0bff405 	stb	r2,-48(fp)
8112914c:	00000106 	br	81129154 <OSFlagDel+0xdc>
81129150:	e03ff405 	stb	zero,-48(fp)
81129154:	e0bffe03 	ldbu	r2,-8(fp)
81129158:	10000326 	beq	r2,zero,81129168 <OSFlagDel+0xf0>
8112915c:	10800060 	cmpeqi	r2,r2,1
81129160:	1000231e 	bne	r2,zero,811291f0 <OSFlagDel+0x178>
81129164:	00004806 	br	81129288 <OSFlagDel+0x210>
81129168:	e0bff403 	ldbu	r2,-48(fp)
8112916c:	1000161e 	bne	r2,zero,811291c8 <OSFlagDel+0x150>
81129170:	e0bffd17 	ldw	r2,-12(fp)
81129174:	00c00fc4 	movi	r3,63
81129178:	10c00285 	stb	r3,10(r2)
8112917c:	e0bffd17 	ldw	r2,-12(fp)
81129180:	100002c5 	stb	zero,11(r2)
81129184:	e0bffd17 	ldw	r2,-12(fp)
81129188:	10000005 	stb	zero,0(r2)
8112918c:	d0e08817 	ldw	r3,-32224(gp)
81129190:	e0bffd17 	ldw	r2,-12(fp)
81129194:	10c00115 	stw	r3,4(r2)
81129198:	e0bffd17 	ldw	r2,-12(fp)
8112919c:	1000020d 	sth	zero,8(r2)
811291a0:	e0bffd17 	ldw	r2,-12(fp)
811291a4:	d0a08815 	stw	r2,-32224(gp)
811291a8:	e0bff717 	ldw	r2,-36(fp)
811291ac:	e0bff815 	stw	r2,-32(fp)
811291b0:	e0bff817 	ldw	r2,-32(fp)
811291b4:	1001703a 	wrctl	status,r2
811291b8:	e0bfff17 	ldw	r2,-4(fp)
811291bc:	10000005 	stb	zero,0(r2)
811291c0:	e03ff615 	stw	zero,-40(fp)
811291c4:	00003a06 	br	811292b0 <OSFlagDel+0x238>
811291c8:	e0bff717 	ldw	r2,-36(fp)
811291cc:	e0bff915 	stw	r2,-28(fp)
811291d0:	e0bff917 	ldw	r2,-28(fp)
811291d4:	1001703a 	wrctl	status,r2
811291d8:	e0bfff17 	ldw	r2,-4(fp)
811291dc:	00c01244 	movi	r3,73
811291e0:	10c00005 	stb	r3,0(r2)
811291e4:	e0bffd17 	ldw	r2,-12(fp)
811291e8:	e0bff615 	stw	r2,-40(fp)
811291ec:	00003006 	br	811292b0 <OSFlagDel+0x238>
811291f0:	e0bffd17 	ldw	r2,-12(fp)
811291f4:	10800117 	ldw	r2,4(r2)
811291f8:	e0bff515 	stw	r2,-44(fp)
811291fc:	00000606 	br	81129218 <OSFlagDel+0x1a0>
81129200:	000b883a 	mov	r5,zero
81129204:	e13ff517 	ldw	r4,-44(fp)
81129208:	112a22c0 	call	8112a22c <OS_FlagTaskRdy>
8112920c:	e0bff517 	ldw	r2,-44(fp)
81129210:	10800017 	ldw	r2,0(r2)
81129214:	e0bff515 	stw	r2,-44(fp)
81129218:	e0bff517 	ldw	r2,-44(fp)
8112921c:	103ff81e 	bne	r2,zero,81129200 <__reset+0xfb109200>
81129220:	e0bffd17 	ldw	r2,-12(fp)
81129224:	00c00fc4 	movi	r3,63
81129228:	10c00285 	stb	r3,10(r2)
8112922c:	e0bffd17 	ldw	r2,-12(fp)
81129230:	100002c5 	stb	zero,11(r2)
81129234:	e0bffd17 	ldw	r2,-12(fp)
81129238:	10000005 	stb	zero,0(r2)
8112923c:	d0e08817 	ldw	r3,-32224(gp)
81129240:	e0bffd17 	ldw	r2,-12(fp)
81129244:	10c00115 	stw	r3,4(r2)
81129248:	e0bffd17 	ldw	r2,-12(fp)
8112924c:	1000020d 	sth	zero,8(r2)
81129250:	e0bffd17 	ldw	r2,-12(fp)
81129254:	d0a08815 	stw	r2,-32224(gp)
81129258:	e0bff717 	ldw	r2,-36(fp)
8112925c:	e0bffa15 	stw	r2,-24(fp)
81129260:	e0bffa17 	ldw	r2,-24(fp)
81129264:	1001703a 	wrctl	status,r2
81129268:	e0bff403 	ldbu	r2,-48(fp)
8112926c:	10800058 	cmpnei	r2,r2,1
81129270:	1000011e 	bne	r2,zero,81129278 <OSFlagDel+0x200>
81129274:	112833c0 	call	8112833c <OS_Sched>
81129278:	e0bfff17 	ldw	r2,-4(fp)
8112927c:	10000005 	stb	zero,0(r2)
81129280:	e03ff615 	stw	zero,-40(fp)
81129284:	00000a06 	br	811292b0 <OSFlagDel+0x238>
81129288:	e0bff717 	ldw	r2,-36(fp)
8112928c:	e0bffb15 	stw	r2,-20(fp)
81129290:	e0bffb17 	ldw	r2,-20(fp)
81129294:	1001703a 	wrctl	status,r2
81129298:	e0bfff17 	ldw	r2,-4(fp)
8112929c:	00c001c4 	movi	r3,7
811292a0:	10c00005 	stb	r3,0(r2)
811292a4:	e0bffd17 	ldw	r2,-12(fp)
811292a8:	e0bff615 	stw	r2,-40(fp)
811292ac:	0001883a 	nop
811292b0:	e0bff617 	ldw	r2,-40(fp)
811292b4:	e037883a 	mov	sp,fp
811292b8:	dfc00117 	ldw	ra,4(sp)
811292bc:	df000017 	ldw	fp,0(sp)
811292c0:	dec00204 	addi	sp,sp,8
811292c4:	f800283a 	ret

811292c8 <OSFlagNameGet>:
811292c8:	defff604 	addi	sp,sp,-40
811292cc:	de00012e 	bgeu	sp,et,811292d4 <OSFlagNameGet+0xc>
811292d0:	003b68fa 	trap	3
811292d4:	dfc00915 	stw	ra,36(sp)
811292d8:	df000815 	stw	fp,32(sp)
811292dc:	df000804 	addi	fp,sp,32
811292e0:	e13ffd15 	stw	r4,-12(fp)
811292e4:	e17ffe15 	stw	r5,-8(fp)
811292e8:	e1bfff15 	stw	r6,-4(fp)
811292ec:	e03ff815 	stw	zero,-32(fp)
811292f0:	e0bfff17 	ldw	r2,-4(fp)
811292f4:	1000021e 	bne	r2,zero,81129300 <OSFlagNameGet+0x38>
811292f8:	0005883a 	mov	r2,zero
811292fc:	00003906 	br	811293e4 <OSFlagNameGet+0x11c>
81129300:	e0bffd17 	ldw	r2,-12(fp)
81129304:	1000051e 	bne	r2,zero,8112931c <OSFlagNameGet+0x54>
81129308:	e0bfff17 	ldw	r2,-4(fp)
8112930c:	00c01b84 	movi	r3,110
81129310:	10c00005 	stb	r3,0(r2)
81129314:	0005883a 	mov	r2,zero
81129318:	00003206 	br	811293e4 <OSFlagNameGet+0x11c>
8112931c:	e0bffe17 	ldw	r2,-8(fp)
81129320:	1000051e 	bne	r2,zero,81129338 <OSFlagNameGet+0x70>
81129324:	e0bfff17 	ldw	r2,-4(fp)
81129328:	00c00304 	movi	r3,12
8112932c:	10c00005 	stb	r3,0(r2)
81129330:	0005883a 	mov	r2,zero
81129334:	00002b06 	br	811293e4 <OSFlagNameGet+0x11c>
81129338:	d0a08303 	ldbu	r2,-32244(gp)
8112933c:	10803fcc 	andi	r2,r2,255
81129340:	10000526 	beq	r2,zero,81129358 <OSFlagNameGet+0x90>
81129344:	e0bfff17 	ldw	r2,-4(fp)
81129348:	00c00444 	movi	r3,17
8112934c:	10c00005 	stb	r3,0(r2)
81129350:	0005883a 	mov	r2,zero
81129354:	00002306 	br	811293e4 <OSFlagNameGet+0x11c>
81129358:	0005303a 	rdctl	r2,status
8112935c:	e0bffc15 	stw	r2,-16(fp)
81129360:	e0fffc17 	ldw	r3,-16(fp)
81129364:	00bfff84 	movi	r2,-2
81129368:	1884703a 	and	r2,r3,r2
8112936c:	1001703a 	wrctl	status,r2
81129370:	e0bffc17 	ldw	r2,-16(fp)
81129374:	e0bff815 	stw	r2,-32(fp)
81129378:	e0bffd17 	ldw	r2,-12(fp)
8112937c:	10800003 	ldbu	r2,0(r2)
81129380:	10803fcc 	andi	r2,r2,255
81129384:	10800160 	cmpeqi	r2,r2,5
81129388:	1000091e 	bne	r2,zero,811293b0 <OSFlagNameGet+0xe8>
8112938c:	e0bff817 	ldw	r2,-32(fp)
81129390:	e0bff915 	stw	r2,-28(fp)
81129394:	e0bff917 	ldw	r2,-28(fp)
81129398:	1001703a 	wrctl	status,r2
8112939c:	e0bfff17 	ldw	r2,-4(fp)
811293a0:	00c00044 	movi	r3,1
811293a4:	10c00005 	stb	r3,0(r2)
811293a8:	0005883a 	mov	r2,zero
811293ac:	00000d06 	br	811293e4 <OSFlagNameGet+0x11c>
811293b0:	e0bffd17 	ldw	r2,-12(fp)
811293b4:	10800284 	addi	r2,r2,10
811293b8:	100b883a 	mov	r5,r2
811293bc:	e13ffe17 	ldw	r4,-8(fp)
811293c0:	11284900 	call	81128490 <OS_StrCopy>
811293c4:	e0bffb05 	stb	r2,-20(fp)
811293c8:	e0bff817 	ldw	r2,-32(fp)
811293cc:	e0bffa15 	stw	r2,-24(fp)
811293d0:	e0bffa17 	ldw	r2,-24(fp)
811293d4:	1001703a 	wrctl	status,r2
811293d8:	e0bfff17 	ldw	r2,-4(fp)
811293dc:	10000005 	stb	zero,0(r2)
811293e0:	e0bffb03 	ldbu	r2,-20(fp)
811293e4:	e037883a 	mov	sp,fp
811293e8:	dfc00117 	ldw	ra,4(sp)
811293ec:	df000017 	ldw	fp,0(sp)
811293f0:	dec00204 	addi	sp,sp,8
811293f4:	f800283a 	ret

811293f8 <OSFlagNameSet>:
811293f8:	defff504 	addi	sp,sp,-44
811293fc:	de00012e 	bgeu	sp,et,81129404 <OSFlagNameSet+0xc>
81129400:	003b68fa 	trap	3
81129404:	dfc00a15 	stw	ra,40(sp)
81129408:	df000915 	stw	fp,36(sp)
8112940c:	df000904 	addi	fp,sp,36
81129410:	e13ffd15 	stw	r4,-12(fp)
81129414:	e17ffe15 	stw	r5,-8(fp)
81129418:	e1bfff15 	stw	r6,-4(fp)
8112941c:	e03ff715 	stw	zero,-36(fp)
81129420:	e0bfff17 	ldw	r2,-4(fp)
81129424:	10004326 	beq	r2,zero,81129534 <OSFlagNameSet+0x13c>
81129428:	e0bffd17 	ldw	r2,-12(fp)
8112942c:	1000041e 	bne	r2,zero,81129440 <OSFlagNameSet+0x48>
81129430:	e0bfff17 	ldw	r2,-4(fp)
81129434:	00c01b84 	movi	r3,110
81129438:	10c00005 	stb	r3,0(r2)
8112943c:	00003e06 	br	81129538 <OSFlagNameSet+0x140>
81129440:	e0bffe17 	ldw	r2,-8(fp)
81129444:	1000041e 	bne	r2,zero,81129458 <OSFlagNameSet+0x60>
81129448:	e0bfff17 	ldw	r2,-4(fp)
8112944c:	00c00304 	movi	r3,12
81129450:	10c00005 	stb	r3,0(r2)
81129454:	00003806 	br	81129538 <OSFlagNameSet+0x140>
81129458:	d0a08303 	ldbu	r2,-32244(gp)
8112945c:	10803fcc 	andi	r2,r2,255
81129460:	10000426 	beq	r2,zero,81129474 <OSFlagNameSet+0x7c>
81129464:	e0bfff17 	ldw	r2,-4(fp)
81129468:	00c00484 	movi	r3,18
8112946c:	10c00005 	stb	r3,0(r2)
81129470:	00003106 	br	81129538 <OSFlagNameSet+0x140>
81129474:	0005303a 	rdctl	r2,status
81129478:	e0bffc15 	stw	r2,-16(fp)
8112947c:	e0fffc17 	ldw	r3,-16(fp)
81129480:	00bfff84 	movi	r2,-2
81129484:	1884703a 	and	r2,r3,r2
81129488:	1001703a 	wrctl	status,r2
8112948c:	e0bffc17 	ldw	r2,-16(fp)
81129490:	e0bff715 	stw	r2,-36(fp)
81129494:	e0bffd17 	ldw	r2,-12(fp)
81129498:	10800003 	ldbu	r2,0(r2)
8112949c:	10803fcc 	andi	r2,r2,255
811294a0:	10800160 	cmpeqi	r2,r2,5
811294a4:	1000081e 	bne	r2,zero,811294c8 <OSFlagNameSet+0xd0>
811294a8:	e0bff717 	ldw	r2,-36(fp)
811294ac:	e0bff815 	stw	r2,-32(fp)
811294b0:	e0bff817 	ldw	r2,-32(fp)
811294b4:	1001703a 	wrctl	status,r2
811294b8:	e0bfff17 	ldw	r2,-4(fp)
811294bc:	00c00044 	movi	r3,1
811294c0:	10c00005 	stb	r3,0(r2)
811294c4:	00001c06 	br	81129538 <OSFlagNameSet+0x140>
811294c8:	e13ffe17 	ldw	r4,-8(fp)
811294cc:	112850c0 	call	8112850c <OS_StrLen>
811294d0:	e0bffa05 	stb	r2,-24(fp)
811294d4:	e0bffa03 	ldbu	r2,-24(fp)
811294d8:	10800830 	cmpltui	r2,r2,32
811294dc:	1000081e 	bne	r2,zero,81129500 <OSFlagNameSet+0x108>
811294e0:	e0bff717 	ldw	r2,-36(fp)
811294e4:	e0bff915 	stw	r2,-28(fp)
811294e8:	e0bff917 	ldw	r2,-28(fp)
811294ec:	1001703a 	wrctl	status,r2
811294f0:	e0bfff17 	ldw	r2,-4(fp)
811294f4:	00c01cc4 	movi	r3,115
811294f8:	10c00005 	stb	r3,0(r2)
811294fc:	00000e06 	br	81129538 <OSFlagNameSet+0x140>
81129500:	e0bffd17 	ldw	r2,-12(fp)
81129504:	10800284 	addi	r2,r2,10
81129508:	e17ffe17 	ldw	r5,-8(fp)
8112950c:	1009883a 	mov	r4,r2
81129510:	11284900 	call	81128490 <OS_StrCopy>
81129514:	e0bff717 	ldw	r2,-36(fp)
81129518:	e0bffb15 	stw	r2,-20(fp)
8112951c:	e0bffb17 	ldw	r2,-20(fp)
81129520:	1001703a 	wrctl	status,r2
81129524:	e0bfff17 	ldw	r2,-4(fp)
81129528:	10000005 	stb	zero,0(r2)
8112952c:	0001883a 	nop
81129530:	00000106 	br	81129538 <OSFlagNameSet+0x140>
81129534:	0001883a 	nop
81129538:	e037883a 	mov	sp,fp
8112953c:	dfc00117 	ldw	ra,4(sp)
81129540:	df000017 	ldw	fp,0(sp)
81129544:	dec00204 	addi	sp,sp,8
81129548:	f800283a 	ret

8112954c <OSFlagPend>:
8112954c:	deffe104 	addi	sp,sp,-124
81129550:	de00012e 	bgeu	sp,et,81129558 <OSFlagPend+0xc>
81129554:	003b68fa 	trap	3
81129558:	dfc01e15 	stw	ra,120(sp)
8112955c:	df001d15 	stw	fp,116(sp)
81129560:	df001d04 	addi	fp,sp,116
81129564:	e13ffc15 	stw	r4,-16(fp)
81129568:	2809883a 	mov	r4,r5
8112956c:	3007883a 	mov	r3,r6
81129570:	3805883a 	mov	r2,r7
81129574:	e13ffd0d 	sth	r4,-12(fp)
81129578:	e0fffe05 	stb	r3,-8(fp)
8112957c:	e0bfff0d 	sth	r2,-4(fp)
81129580:	e03fe515 	stw	zero,-108(fp)
81129584:	e0800217 	ldw	r2,8(fp)
81129588:	1000021e 	bne	r2,zero,81129594 <OSFlagPend+0x48>
8112958c:	0005883a 	mov	r2,zero
81129590:	00015906 	br	81129af8 <OSFlagPend+0x5ac>
81129594:	e0bffc17 	ldw	r2,-16(fp)
81129598:	1000051e 	bne	r2,zero,811295b0 <OSFlagPend+0x64>
8112959c:	e0800217 	ldw	r2,8(fp)
811295a0:	00c01b84 	movi	r3,110
811295a4:	10c00005 	stb	r3,0(r2)
811295a8:	0005883a 	mov	r2,zero
811295ac:	00015206 	br	81129af8 <OSFlagPend+0x5ac>
811295b0:	d0a08303 	ldbu	r2,-32244(gp)
811295b4:	10803fcc 	andi	r2,r2,255
811295b8:	10000526 	beq	r2,zero,811295d0 <OSFlagPend+0x84>
811295bc:	e0800217 	ldw	r2,8(fp)
811295c0:	00c00084 	movi	r3,2
811295c4:	10c00005 	stb	r3,0(r2)
811295c8:	0005883a 	mov	r2,zero
811295cc:	00014a06 	br	81129af8 <OSFlagPend+0x5ac>
811295d0:	d0a07103 	ldbu	r2,-32316(gp)
811295d4:	10803fcc 	andi	r2,r2,255
811295d8:	10000526 	beq	r2,zero,811295f0 <OSFlagPend+0xa4>
811295dc:	e0800217 	ldw	r2,8(fp)
811295e0:	00c00344 	movi	r3,13
811295e4:	10c00005 	stb	r3,0(r2)
811295e8:	0005883a 	mov	r2,zero
811295ec:	00014206 	br	81129af8 <OSFlagPend+0x5ac>
811295f0:	e0bffc17 	ldw	r2,-16(fp)
811295f4:	10800003 	ldbu	r2,0(r2)
811295f8:	10803fcc 	andi	r2,r2,255
811295fc:	10800160 	cmpeqi	r2,r2,5
81129600:	1000051e 	bne	r2,zero,81129618 <OSFlagPend+0xcc>
81129604:	e0800217 	ldw	r2,8(fp)
81129608:	00c00044 	movi	r3,1
8112960c:	10c00005 	stb	r3,0(r2)
81129610:	0005883a 	mov	r2,zero
81129614:	00013806 	br	81129af8 <OSFlagPend+0x5ac>
81129618:	e0fffe03 	ldbu	r3,-8(fp)
8112961c:	00bfe004 	movi	r2,-128
81129620:	1884703a 	and	r2,r3,r2
81129624:	e0bfe605 	stb	r2,-104(fp)
81129628:	e0bfe603 	ldbu	r2,-104(fp)
8112962c:	10000626 	beq	r2,zero,81129648 <OSFlagPend+0xfc>
81129630:	e0bffe03 	ldbu	r2,-8(fp)
81129634:	10801fcc 	andi	r2,r2,127
81129638:	e0bffe05 	stb	r2,-8(fp)
8112963c:	00800044 	movi	r2,1
81129640:	e0bfe405 	stb	r2,-112(fp)
81129644:	00000106 	br	8112964c <OSFlagPend+0x100>
81129648:	e03fe405 	stb	zero,-112(fp)
8112964c:	0005303a 	rdctl	r2,status
81129650:	e0bff615 	stw	r2,-40(fp)
81129654:	e0fff617 	ldw	r3,-40(fp)
81129658:	00bfff84 	movi	r2,-2
8112965c:	1884703a 	and	r2,r3,r2
81129660:	1001703a 	wrctl	status,r2
81129664:	e0bff617 	ldw	r2,-40(fp)
81129668:	e0bfe515 	stw	r2,-108(fp)
8112966c:	e0bffe03 	ldbu	r2,-8(fp)
81129670:	10c00060 	cmpeqi	r3,r2,1
81129674:	1800921e 	bne	r3,zero,811298c0 <OSFlagPend+0x374>
81129678:	10c00088 	cmpgei	r3,r2,2
8112967c:	1800021e 	bne	r3,zero,81129688 <OSFlagPend+0x13c>
81129680:	10006126 	beq	r2,zero,81129808 <OSFlagPend+0x2bc>
81129684:	0000bb06 	br	81129974 <OSFlagPend+0x428>
81129688:	10c000a0 	cmpeqi	r3,r2,2
8112968c:	1800031e 	bne	r3,zero,8112969c <OSFlagPend+0x150>
81129690:	108000e0 	cmpeqi	r2,r2,3
81129694:	10002f1e 	bne	r2,zero,81129754 <OSFlagPend+0x208>
81129698:	0000b606 	br	81129974 <OSFlagPend+0x428>
8112969c:	e0bffc17 	ldw	r2,-16(fp)
811296a0:	10c0020b 	ldhu	r3,8(r2)
811296a4:	e0bffd0b 	ldhu	r2,-12(fp)
811296a8:	1884703a 	and	r2,r3,r2
811296ac:	e0bfe80d 	sth	r2,-96(fp)
811296b0:	e0ffe80b 	ldhu	r3,-96(fp)
811296b4:	e0bffd0b 	ldhu	r2,-12(fp)
811296b8:	1880171e 	bne	r3,r2,81129718 <OSFlagPend+0x1cc>
811296bc:	e0bfe403 	ldbu	r2,-112(fp)
811296c0:	10800058 	cmpnei	r2,r2,1
811296c4:	1000091e 	bne	r2,zero,811296ec <OSFlagPend+0x1a0>
811296c8:	e0bffc17 	ldw	r2,-16(fp)
811296cc:	1080020b 	ldhu	r2,8(r2)
811296d0:	1007883a 	mov	r3,r2
811296d4:	e0bfe80b 	ldhu	r2,-96(fp)
811296d8:	0084303a 	nor	r2,zero,r2
811296dc:	1884703a 	and	r2,r3,r2
811296e0:	1007883a 	mov	r3,r2
811296e4:	e0bffc17 	ldw	r2,-16(fp)
811296e8:	10c0020d 	sth	r3,8(r2)
811296ec:	d0a08417 	ldw	r2,-32240(gp)
811296f0:	e0ffe80b 	ldhu	r3,-96(fp)
811296f4:	10c00b0d 	sth	r3,44(r2)
811296f8:	e0bfe517 	ldw	r2,-108(fp)
811296fc:	e0bfe715 	stw	r2,-100(fp)
81129700:	e0bfe717 	ldw	r2,-100(fp)
81129704:	1001703a 	wrctl	status,r2
81129708:	e0800217 	ldw	r2,8(fp)
8112970c:	10000005 	stb	zero,0(r2)
81129710:	e0bfe80b 	ldhu	r2,-96(fp)
81129714:	0000f806 	br	81129af8 <OSFlagPend+0x5ac>
81129718:	e13ffd0b 	ldhu	r4,-12(fp)
8112971c:	e17ffe03 	ldbu	r5,-8(fp)
81129720:	e0bfff0b 	ldhu	r2,-4(fp)
81129724:	e0fff704 	addi	r3,fp,-36
81129728:	d8800015 	stw	r2,0(sp)
8112972c:	280f883a 	mov	r7,r5
81129730:	200d883a 	mov	r6,r4
81129734:	180b883a 	mov	r5,r3
81129738:	e13ffc17 	ldw	r4,-16(fp)
8112973c:	1129fdc0 	call	81129fdc <OS_FlagBlock>
81129740:	e0bfe517 	ldw	r2,-108(fp)
81129744:	e0bfe915 	stw	r2,-92(fp)
81129748:	e0bfe917 	ldw	r2,-92(fp)
8112974c:	1001703a 	wrctl	status,r2
81129750:	00009206 	br	8112999c <OSFlagPend+0x450>
81129754:	e0bffc17 	ldw	r2,-16(fp)
81129758:	10c0020b 	ldhu	r3,8(r2)
8112975c:	e0bffd0b 	ldhu	r2,-12(fp)
81129760:	1884703a 	and	r2,r3,r2
81129764:	e0bfe80d 	sth	r2,-96(fp)
81129768:	e0bfe80b 	ldhu	r2,-96(fp)
8112976c:	10001726 	beq	r2,zero,811297cc <OSFlagPend+0x280>
81129770:	e0bfe403 	ldbu	r2,-112(fp)
81129774:	10800058 	cmpnei	r2,r2,1
81129778:	1000091e 	bne	r2,zero,811297a0 <OSFlagPend+0x254>
8112977c:	e0bffc17 	ldw	r2,-16(fp)
81129780:	1080020b 	ldhu	r2,8(r2)
81129784:	1007883a 	mov	r3,r2
81129788:	e0bfe80b 	ldhu	r2,-96(fp)
8112978c:	0084303a 	nor	r2,zero,r2
81129790:	1884703a 	and	r2,r3,r2
81129794:	1007883a 	mov	r3,r2
81129798:	e0bffc17 	ldw	r2,-16(fp)
8112979c:	10c0020d 	sth	r3,8(r2)
811297a0:	d0a08417 	ldw	r2,-32240(gp)
811297a4:	e0ffe80b 	ldhu	r3,-96(fp)
811297a8:	10c00b0d 	sth	r3,44(r2)
811297ac:	e0bfe517 	ldw	r2,-108(fp)
811297b0:	e0bfea15 	stw	r2,-88(fp)
811297b4:	e0bfea17 	ldw	r2,-88(fp)
811297b8:	1001703a 	wrctl	status,r2
811297bc:	e0800217 	ldw	r2,8(fp)
811297c0:	10000005 	stb	zero,0(r2)
811297c4:	e0bfe80b 	ldhu	r2,-96(fp)
811297c8:	0000cb06 	br	81129af8 <OSFlagPend+0x5ac>
811297cc:	e13ffd0b 	ldhu	r4,-12(fp)
811297d0:	e17ffe03 	ldbu	r5,-8(fp)
811297d4:	e0bfff0b 	ldhu	r2,-4(fp)
811297d8:	e0fff704 	addi	r3,fp,-36
811297dc:	d8800015 	stw	r2,0(sp)
811297e0:	280f883a 	mov	r7,r5
811297e4:	200d883a 	mov	r6,r4
811297e8:	180b883a 	mov	r5,r3
811297ec:	e13ffc17 	ldw	r4,-16(fp)
811297f0:	1129fdc0 	call	81129fdc <OS_FlagBlock>
811297f4:	e0bfe517 	ldw	r2,-108(fp)
811297f8:	e0bfeb15 	stw	r2,-84(fp)
811297fc:	e0bfeb17 	ldw	r2,-84(fp)
81129800:	1001703a 	wrctl	status,r2
81129804:	00006506 	br	8112999c <OSFlagPend+0x450>
81129808:	e0bffc17 	ldw	r2,-16(fp)
8112980c:	1080020b 	ldhu	r2,8(r2)
81129810:	0084303a 	nor	r2,zero,r2
81129814:	1007883a 	mov	r3,r2
81129818:	e0bffd0b 	ldhu	r2,-12(fp)
8112981c:	1884703a 	and	r2,r3,r2
81129820:	e0bfe80d 	sth	r2,-96(fp)
81129824:	e0ffe80b 	ldhu	r3,-96(fp)
81129828:	e0bffd0b 	ldhu	r2,-12(fp)
8112982c:	1880151e 	bne	r3,r2,81129884 <OSFlagPend+0x338>
81129830:	e0bfe403 	ldbu	r2,-112(fp)
81129834:	10800058 	cmpnei	r2,r2,1
81129838:	1000071e 	bne	r2,zero,81129858 <OSFlagPend+0x30c>
8112983c:	e0bffc17 	ldw	r2,-16(fp)
81129840:	10c0020b 	ldhu	r3,8(r2)
81129844:	e0bfe80b 	ldhu	r2,-96(fp)
81129848:	1884b03a 	or	r2,r3,r2
8112984c:	1007883a 	mov	r3,r2
81129850:	e0bffc17 	ldw	r2,-16(fp)
81129854:	10c0020d 	sth	r3,8(r2)
81129858:	d0a08417 	ldw	r2,-32240(gp)
8112985c:	e0ffe80b 	ldhu	r3,-96(fp)
81129860:	10c00b0d 	sth	r3,44(r2)
81129864:	e0bfe517 	ldw	r2,-108(fp)
81129868:	e0bfec15 	stw	r2,-80(fp)
8112986c:	e0bfec17 	ldw	r2,-80(fp)
81129870:	1001703a 	wrctl	status,r2
81129874:	e0800217 	ldw	r2,8(fp)
81129878:	10000005 	stb	zero,0(r2)
8112987c:	e0bfe80b 	ldhu	r2,-96(fp)
81129880:	00009d06 	br	81129af8 <OSFlagPend+0x5ac>
81129884:	e13ffd0b 	ldhu	r4,-12(fp)
81129888:	e17ffe03 	ldbu	r5,-8(fp)
8112988c:	e0bfff0b 	ldhu	r2,-4(fp)
81129890:	e0fff704 	addi	r3,fp,-36
81129894:	d8800015 	stw	r2,0(sp)
81129898:	280f883a 	mov	r7,r5
8112989c:	200d883a 	mov	r6,r4
811298a0:	180b883a 	mov	r5,r3
811298a4:	e13ffc17 	ldw	r4,-16(fp)
811298a8:	1129fdc0 	call	81129fdc <OS_FlagBlock>
811298ac:	e0bfe517 	ldw	r2,-108(fp)
811298b0:	e0bfed15 	stw	r2,-76(fp)
811298b4:	e0bfed17 	ldw	r2,-76(fp)
811298b8:	1001703a 	wrctl	status,r2
811298bc:	00003706 	br	8112999c <OSFlagPend+0x450>
811298c0:	e0bffc17 	ldw	r2,-16(fp)
811298c4:	1080020b 	ldhu	r2,8(r2)
811298c8:	0084303a 	nor	r2,zero,r2
811298cc:	1007883a 	mov	r3,r2
811298d0:	e0bffd0b 	ldhu	r2,-12(fp)
811298d4:	1884703a 	and	r2,r3,r2
811298d8:	e0bfe80d 	sth	r2,-96(fp)
811298dc:	e0bfe80b 	ldhu	r2,-96(fp)
811298e0:	10001526 	beq	r2,zero,81129938 <OSFlagPend+0x3ec>
811298e4:	e0bfe403 	ldbu	r2,-112(fp)
811298e8:	10800058 	cmpnei	r2,r2,1
811298ec:	1000071e 	bne	r2,zero,8112990c <OSFlagPend+0x3c0>
811298f0:	e0bffc17 	ldw	r2,-16(fp)
811298f4:	10c0020b 	ldhu	r3,8(r2)
811298f8:	e0bfe80b 	ldhu	r2,-96(fp)
811298fc:	1884b03a 	or	r2,r3,r2
81129900:	1007883a 	mov	r3,r2
81129904:	e0bffc17 	ldw	r2,-16(fp)
81129908:	10c0020d 	sth	r3,8(r2)
8112990c:	d0a08417 	ldw	r2,-32240(gp)
81129910:	e0ffe80b 	ldhu	r3,-96(fp)
81129914:	10c00b0d 	sth	r3,44(r2)
81129918:	e0bfe517 	ldw	r2,-108(fp)
8112991c:	e0bfee15 	stw	r2,-72(fp)
81129920:	e0bfee17 	ldw	r2,-72(fp)
81129924:	1001703a 	wrctl	status,r2
81129928:	e0800217 	ldw	r2,8(fp)
8112992c:	10000005 	stb	zero,0(r2)
81129930:	e0bfe80b 	ldhu	r2,-96(fp)
81129934:	00007006 	br	81129af8 <OSFlagPend+0x5ac>
81129938:	e13ffd0b 	ldhu	r4,-12(fp)
8112993c:	e17ffe03 	ldbu	r5,-8(fp)
81129940:	e0bfff0b 	ldhu	r2,-4(fp)
81129944:	e0fff704 	addi	r3,fp,-36
81129948:	d8800015 	stw	r2,0(sp)
8112994c:	280f883a 	mov	r7,r5
81129950:	200d883a 	mov	r6,r4
81129954:	180b883a 	mov	r5,r3
81129958:	e13ffc17 	ldw	r4,-16(fp)
8112995c:	1129fdc0 	call	81129fdc <OS_FlagBlock>
81129960:	e0bfe517 	ldw	r2,-108(fp)
81129964:	e0bfef15 	stw	r2,-68(fp)
81129968:	e0bfef17 	ldw	r2,-68(fp)
8112996c:	1001703a 	wrctl	status,r2
81129970:	00000a06 	br	8112999c <OSFlagPend+0x450>
81129974:	e0bfe517 	ldw	r2,-108(fp)
81129978:	e0bff015 	stw	r2,-64(fp)
8112997c:	e0bff017 	ldw	r2,-64(fp)
81129980:	1001703a 	wrctl	status,r2
81129984:	e03fe80d 	sth	zero,-96(fp)
81129988:	e0800217 	ldw	r2,8(fp)
8112998c:	00c01bc4 	movi	r3,111
81129990:	10c00005 	stb	r3,0(r2)
81129994:	e0bfe80b 	ldhu	r2,-96(fp)
81129998:	00005706 	br	81129af8 <OSFlagPend+0x5ac>
8112999c:	112833c0 	call	8112833c <OS_Sched>
811299a0:	0005303a 	rdctl	r2,status
811299a4:	e0bff115 	stw	r2,-60(fp)
811299a8:	e0fff117 	ldw	r3,-60(fp)
811299ac:	00bfff84 	movi	r2,-2
811299b0:	1884703a 	and	r2,r3,r2
811299b4:	1001703a 	wrctl	status,r2
811299b8:	e0bff117 	ldw	r2,-60(fp)
811299bc:	e0bfe515 	stw	r2,-108(fp)
811299c0:	d0a08417 	ldw	r2,-32240(gp)
811299c4:	10800c43 	ldbu	r2,49(r2)
811299c8:	10803fcc 	andi	r2,r2,255
811299cc:	10001c26 	beq	r2,zero,81129a40 <OSFlagPend+0x4f4>
811299d0:	d0a08417 	ldw	r2,-32240(gp)
811299d4:	10800c43 	ldbu	r2,49(r2)
811299d8:	e0bff305 	stb	r2,-52(fp)
811299dc:	d0a08417 	ldw	r2,-32240(gp)
811299e0:	10000c45 	stb	zero,49(r2)
811299e4:	e0bff704 	addi	r2,fp,-36
811299e8:	1009883a 	mov	r4,r2
811299ec:	112a3280 	call	8112a328 <OS_FlagUnlink>
811299f0:	d0a08417 	ldw	r2,-32240(gp)
811299f4:	10000c05 	stb	zero,48(r2)
811299f8:	e0bfe517 	ldw	r2,-108(fp)
811299fc:	e0bff215 	stw	r2,-56(fp)
81129a00:	e0bff217 	ldw	r2,-56(fp)
81129a04:	1001703a 	wrctl	status,r2
81129a08:	e03fe80d 	sth	zero,-96(fp)
81129a0c:	e0bff303 	ldbu	r2,-52(fp)
81129a10:	108000a0 	cmpeqi	r2,r2,2
81129a14:	10000426 	beq	r2,zero,81129a28 <OSFlagPend+0x4dc>
81129a18:	e0800217 	ldw	r2,8(fp)
81129a1c:	00c00384 	movi	r3,14
81129a20:	10c00005 	stb	r3,0(r2)
81129a24:	00000406 	br	81129a38 <OSFlagPend+0x4ec>
81129a28:	e0800217 	ldw	r2,8(fp)
81129a2c:	00c00284 	movi	r3,10
81129a30:	10c00005 	stb	r3,0(r2)
81129a34:	0001883a 	nop
81129a38:	e0bfe80b 	ldhu	r2,-96(fp)
81129a3c:	00002e06 	br	81129af8 <OSFlagPend+0x5ac>
81129a40:	d0a08417 	ldw	r2,-32240(gp)
81129a44:	10800b0b 	ldhu	r2,44(r2)
81129a48:	e0bfe80d 	sth	r2,-96(fp)
81129a4c:	e0bfe403 	ldbu	r2,-112(fp)
81129a50:	10800058 	cmpnei	r2,r2,1
81129a54:	1000211e 	bne	r2,zero,81129adc <OSFlagPend+0x590>
81129a58:	e0bffe03 	ldbu	r2,-8(fp)
81129a5c:	10001616 	blt	r2,zero,81129ab8 <OSFlagPend+0x56c>
81129a60:	10c00090 	cmplti	r3,r2,2
81129a64:	18000c1e 	bne	r3,zero,81129a98 <OSFlagPend+0x54c>
81129a68:	10800108 	cmpgei	r2,r2,4
81129a6c:	1000121e 	bne	r2,zero,81129ab8 <OSFlagPend+0x56c>
81129a70:	e0bffc17 	ldw	r2,-16(fp)
81129a74:	1080020b 	ldhu	r2,8(r2)
81129a78:	1007883a 	mov	r3,r2
81129a7c:	e0bfe80b 	ldhu	r2,-96(fp)
81129a80:	0084303a 	nor	r2,zero,r2
81129a84:	1884703a 	and	r2,r3,r2
81129a88:	1007883a 	mov	r3,r2
81129a8c:	e0bffc17 	ldw	r2,-16(fp)
81129a90:	10c0020d 	sth	r3,8(r2)
81129a94:	00001106 	br	81129adc <OSFlagPend+0x590>
81129a98:	e0bffc17 	ldw	r2,-16(fp)
81129a9c:	10c0020b 	ldhu	r3,8(r2)
81129aa0:	e0bfe80b 	ldhu	r2,-96(fp)
81129aa4:	1884b03a 	or	r2,r3,r2
81129aa8:	1007883a 	mov	r3,r2
81129aac:	e0bffc17 	ldw	r2,-16(fp)
81129ab0:	10c0020d 	sth	r3,8(r2)
81129ab4:	00000906 	br	81129adc <OSFlagPend+0x590>
81129ab8:	e0bfe517 	ldw	r2,-108(fp)
81129abc:	e0bff415 	stw	r2,-48(fp)
81129ac0:	e0bff417 	ldw	r2,-48(fp)
81129ac4:	1001703a 	wrctl	status,r2
81129ac8:	e0800217 	ldw	r2,8(fp)
81129acc:	00c01bc4 	movi	r3,111
81129ad0:	10c00005 	stb	r3,0(r2)
81129ad4:	0005883a 	mov	r2,zero
81129ad8:	00000706 	br	81129af8 <OSFlagPend+0x5ac>
81129adc:	e0bfe517 	ldw	r2,-108(fp)
81129ae0:	e0bff515 	stw	r2,-44(fp)
81129ae4:	e0bff517 	ldw	r2,-44(fp)
81129ae8:	1001703a 	wrctl	status,r2
81129aec:	e0800217 	ldw	r2,8(fp)
81129af0:	10000005 	stb	zero,0(r2)
81129af4:	e0bfe80b 	ldhu	r2,-96(fp)
81129af8:	e037883a 	mov	sp,fp
81129afc:	dfc00117 	ldw	ra,4(sp)
81129b00:	df000017 	ldw	fp,0(sp)
81129b04:	dec00204 	addi	sp,sp,8
81129b08:	f800283a 	ret

81129b0c <OSFlagPendGetFlagsRdy>:
81129b0c:	defffb04 	addi	sp,sp,-20
81129b10:	de00012e 	bgeu	sp,et,81129b18 <OSFlagPendGetFlagsRdy+0xc>
81129b14:	003b68fa 	trap	3
81129b18:	df000415 	stw	fp,16(sp)
81129b1c:	df000404 	addi	fp,sp,16
81129b20:	e03ffc15 	stw	zero,-16(fp)
81129b24:	0005303a 	rdctl	r2,status
81129b28:	e0bffe15 	stw	r2,-8(fp)
81129b2c:	e0fffe17 	ldw	r3,-8(fp)
81129b30:	00bfff84 	movi	r2,-2
81129b34:	1884703a 	and	r2,r3,r2
81129b38:	1001703a 	wrctl	status,r2
81129b3c:	e0bffe17 	ldw	r2,-8(fp)
81129b40:	e0bffc15 	stw	r2,-16(fp)
81129b44:	d0a08417 	ldw	r2,-32240(gp)
81129b48:	10800b0b 	ldhu	r2,44(r2)
81129b4c:	e0bffd0d 	sth	r2,-12(fp)
81129b50:	e0bffc17 	ldw	r2,-16(fp)
81129b54:	e0bfff15 	stw	r2,-4(fp)
81129b58:	e0bfff17 	ldw	r2,-4(fp)
81129b5c:	1001703a 	wrctl	status,r2
81129b60:	e0bffd0b 	ldhu	r2,-12(fp)
81129b64:	e037883a 	mov	sp,fp
81129b68:	df000017 	ldw	fp,0(sp)
81129b6c:	dec00104 	addi	sp,sp,4
81129b70:	f800283a 	ret

81129b74 <OSFlagPost>:
81129b74:	deffef04 	addi	sp,sp,-68
81129b78:	de00012e 	bgeu	sp,et,81129b80 <OSFlagPost+0xc>
81129b7c:	003b68fa 	trap	3
81129b80:	dfc01015 	stw	ra,64(sp)
81129b84:	df000f15 	stw	fp,60(sp)
81129b88:	df000f04 	addi	fp,sp,60
81129b8c:	e13ffc15 	stw	r4,-16(fp)
81129b90:	2807883a 	mov	r3,r5
81129b94:	3005883a 	mov	r2,r6
81129b98:	e1ffff15 	stw	r7,-4(fp)
81129b9c:	e0fffd0d 	sth	r3,-12(fp)
81129ba0:	e0bffe05 	stb	r2,-8(fp)
81129ba4:	e03ff315 	stw	zero,-52(fp)
81129ba8:	e0bfff17 	ldw	r2,-4(fp)
81129bac:	1000021e 	bne	r2,zero,81129bb8 <OSFlagPost+0x44>
81129bb0:	0005883a 	mov	r2,zero
81129bb4:	0000d106 	br	81129efc <OSFlagPost+0x388>
81129bb8:	e0bffc17 	ldw	r2,-16(fp)
81129bbc:	1000051e 	bne	r2,zero,81129bd4 <OSFlagPost+0x60>
81129bc0:	e0bfff17 	ldw	r2,-4(fp)
81129bc4:	00c01b84 	movi	r3,110
81129bc8:	10c00005 	stb	r3,0(r2)
81129bcc:	0005883a 	mov	r2,zero
81129bd0:	0000ca06 	br	81129efc <OSFlagPost+0x388>
81129bd4:	e0bffc17 	ldw	r2,-16(fp)
81129bd8:	10800003 	ldbu	r2,0(r2)
81129bdc:	10803fcc 	andi	r2,r2,255
81129be0:	10800160 	cmpeqi	r2,r2,5
81129be4:	1000051e 	bne	r2,zero,81129bfc <OSFlagPost+0x88>
81129be8:	e0bfff17 	ldw	r2,-4(fp)
81129bec:	00c00044 	movi	r3,1
81129bf0:	10c00005 	stb	r3,0(r2)
81129bf4:	0005883a 	mov	r2,zero
81129bf8:	0000c006 	br	81129efc <OSFlagPost+0x388>
81129bfc:	0005303a 	rdctl	r2,status
81129c00:	e0bffb15 	stw	r2,-20(fp)
81129c04:	e0fffb17 	ldw	r3,-20(fp)
81129c08:	00bfff84 	movi	r2,-2
81129c0c:	1884703a 	and	r2,r3,r2
81129c10:	1001703a 	wrctl	status,r2
81129c14:	e0bffb17 	ldw	r2,-20(fp)
81129c18:	e0bff315 	stw	r2,-52(fp)
81129c1c:	e0bffe03 	ldbu	r2,-8(fp)
81129c20:	10000326 	beq	r2,zero,81129c30 <OSFlagPost+0xbc>
81129c24:	10800060 	cmpeqi	r2,r2,1
81129c28:	10000b1e 	bne	r2,zero,81129c58 <OSFlagPost+0xe4>
81129c2c:	00001206 	br	81129c78 <OSFlagPost+0x104>
81129c30:	e0bffc17 	ldw	r2,-16(fp)
81129c34:	1080020b 	ldhu	r2,8(r2)
81129c38:	1007883a 	mov	r3,r2
81129c3c:	e0bffd0b 	ldhu	r2,-12(fp)
81129c40:	0084303a 	nor	r2,zero,r2
81129c44:	1884703a 	and	r2,r3,r2
81129c48:	1007883a 	mov	r3,r2
81129c4c:	e0bffc17 	ldw	r2,-16(fp)
81129c50:	10c0020d 	sth	r3,8(r2)
81129c54:	00001106 	br	81129c9c <OSFlagPost+0x128>
81129c58:	e0bffc17 	ldw	r2,-16(fp)
81129c5c:	10c0020b 	ldhu	r3,8(r2)
81129c60:	e0bffd0b 	ldhu	r2,-12(fp)
81129c64:	1884b03a 	or	r2,r3,r2
81129c68:	1007883a 	mov	r3,r2
81129c6c:	e0bffc17 	ldw	r2,-16(fp)
81129c70:	10c0020d 	sth	r3,8(r2)
81129c74:	00000906 	br	81129c9c <OSFlagPost+0x128>
81129c78:	e0bff317 	ldw	r2,-52(fp)
81129c7c:	e0bff415 	stw	r2,-48(fp)
81129c80:	e0bff417 	ldw	r2,-48(fp)
81129c84:	1001703a 	wrctl	status,r2
81129c88:	e0bfff17 	ldw	r2,-4(fp)
81129c8c:	00c01c44 	movi	r3,113
81129c90:	10c00005 	stb	r3,0(r2)
81129c94:	0005883a 	mov	r2,zero
81129c98:	00009806 	br	81129efc <OSFlagPost+0x388>
81129c9c:	e03ff205 	stb	zero,-56(fp)
81129ca0:	e0bffc17 	ldw	r2,-16(fp)
81129ca4:	10800117 	ldw	r2,4(r2)
81129ca8:	e0bff115 	stw	r2,-60(fp)
81129cac:	00007706 	br	81129e8c <OSFlagPost+0x318>
81129cb0:	e0bff117 	ldw	r2,-60(fp)
81129cb4:	10800483 	ldbu	r2,18(r2)
81129cb8:	10803fcc 	andi	r2,r2,255
81129cbc:	10c00060 	cmpeqi	r3,r2,1
81129cc0:	18004a1e 	bne	r3,zero,81129dec <OSFlagPost+0x278>
81129cc4:	10c00088 	cmpgei	r3,r2,2
81129cc8:	1800021e 	bne	r3,zero,81129cd4 <OSFlagPost+0x160>
81129ccc:	10002f26 	beq	r2,zero,81129d8c <OSFlagPost+0x218>
81129cd0:	00005b06 	br	81129e40 <OSFlagPost+0x2cc>
81129cd4:	10c000a0 	cmpeqi	r3,r2,2
81129cd8:	1800031e 	bne	r3,zero,81129ce8 <OSFlagPost+0x174>
81129cdc:	108000e0 	cmpeqi	r2,r2,3
81129ce0:	1000171e 	bne	r2,zero,81129d40 <OSFlagPost+0x1cc>
81129ce4:	00005606 	br	81129e40 <OSFlagPost+0x2cc>
81129ce8:	e0bffc17 	ldw	r2,-16(fp)
81129cec:	10c0020b 	ldhu	r3,8(r2)
81129cf0:	e0bff117 	ldw	r2,-60(fp)
81129cf4:	1080040b 	ldhu	r2,16(r2)
81129cf8:	1884703a 	and	r2,r3,r2
81129cfc:	e0bff60d 	sth	r2,-40(fp)
81129d00:	e0bff117 	ldw	r2,-60(fp)
81129d04:	1080040b 	ldhu	r2,16(r2)
81129d08:	10ffffcc 	andi	r3,r2,65535
81129d0c:	e0bff60b 	ldhu	r2,-40(fp)
81129d10:	1880541e 	bne	r3,r2,81129e64 <OSFlagPost+0x2f0>
81129d14:	e0bff60b 	ldhu	r2,-40(fp)
81129d18:	100b883a 	mov	r5,r2
81129d1c:	e13ff117 	ldw	r4,-60(fp)
81129d20:	112a22c0 	call	8112a22c <OS_FlagTaskRdy>
81129d24:	e0bff685 	stb	r2,-38(fp)
81129d28:	e0bff683 	ldbu	r2,-38(fp)
81129d2c:	10800058 	cmpnei	r2,r2,1
81129d30:	10004c1e 	bne	r2,zero,81129e64 <OSFlagPost+0x2f0>
81129d34:	00800044 	movi	r2,1
81129d38:	e0bff205 	stb	r2,-56(fp)
81129d3c:	00004906 	br	81129e64 <OSFlagPost+0x2f0>
81129d40:	e0bffc17 	ldw	r2,-16(fp)
81129d44:	10c0020b 	ldhu	r3,8(r2)
81129d48:	e0bff117 	ldw	r2,-60(fp)
81129d4c:	1080040b 	ldhu	r2,16(r2)
81129d50:	1884703a 	and	r2,r3,r2
81129d54:	e0bff60d 	sth	r2,-40(fp)
81129d58:	e0bff60b 	ldhu	r2,-40(fp)
81129d5c:	10004326 	beq	r2,zero,81129e6c <OSFlagPost+0x2f8>
81129d60:	e0bff60b 	ldhu	r2,-40(fp)
81129d64:	100b883a 	mov	r5,r2
81129d68:	e13ff117 	ldw	r4,-60(fp)
81129d6c:	112a22c0 	call	8112a22c <OS_FlagTaskRdy>
81129d70:	e0bff685 	stb	r2,-38(fp)
81129d74:	e0bff683 	ldbu	r2,-38(fp)
81129d78:	10800058 	cmpnei	r2,r2,1
81129d7c:	10003b1e 	bne	r2,zero,81129e6c <OSFlagPost+0x2f8>
81129d80:	00800044 	movi	r2,1
81129d84:	e0bff205 	stb	r2,-56(fp)
81129d88:	00003806 	br	81129e6c <OSFlagPost+0x2f8>
81129d8c:	e0bffc17 	ldw	r2,-16(fp)
81129d90:	1080020b 	ldhu	r2,8(r2)
81129d94:	0084303a 	nor	r2,zero,r2
81129d98:	1007883a 	mov	r3,r2
81129d9c:	e0bff117 	ldw	r2,-60(fp)
81129da0:	1080040b 	ldhu	r2,16(r2)
81129da4:	1884703a 	and	r2,r3,r2
81129da8:	e0bff60d 	sth	r2,-40(fp)
81129dac:	e0bff117 	ldw	r2,-60(fp)
81129db0:	1080040b 	ldhu	r2,16(r2)
81129db4:	10ffffcc 	andi	r3,r2,65535
81129db8:	e0bff60b 	ldhu	r2,-40(fp)
81129dbc:	18802d1e 	bne	r3,r2,81129e74 <OSFlagPost+0x300>
81129dc0:	e0bff60b 	ldhu	r2,-40(fp)
81129dc4:	100b883a 	mov	r5,r2
81129dc8:	e13ff117 	ldw	r4,-60(fp)
81129dcc:	112a22c0 	call	8112a22c <OS_FlagTaskRdy>
81129dd0:	e0bff685 	stb	r2,-38(fp)
81129dd4:	e0bff683 	ldbu	r2,-38(fp)
81129dd8:	10800058 	cmpnei	r2,r2,1
81129ddc:	1000251e 	bne	r2,zero,81129e74 <OSFlagPost+0x300>
81129de0:	00800044 	movi	r2,1
81129de4:	e0bff205 	stb	r2,-56(fp)
81129de8:	00002206 	br	81129e74 <OSFlagPost+0x300>
81129dec:	e0bffc17 	ldw	r2,-16(fp)
81129df0:	1080020b 	ldhu	r2,8(r2)
81129df4:	0084303a 	nor	r2,zero,r2
81129df8:	1007883a 	mov	r3,r2
81129dfc:	e0bff117 	ldw	r2,-60(fp)
81129e00:	1080040b 	ldhu	r2,16(r2)
81129e04:	1884703a 	and	r2,r3,r2
81129e08:	e0bff60d 	sth	r2,-40(fp)
81129e0c:	e0bff60b 	ldhu	r2,-40(fp)
81129e10:	10001a26 	beq	r2,zero,81129e7c <OSFlagPost+0x308>
81129e14:	e0bff60b 	ldhu	r2,-40(fp)
81129e18:	100b883a 	mov	r5,r2
81129e1c:	e13ff117 	ldw	r4,-60(fp)
81129e20:	112a22c0 	call	8112a22c <OS_FlagTaskRdy>
81129e24:	e0bff685 	stb	r2,-38(fp)
81129e28:	e0bff683 	ldbu	r2,-38(fp)
81129e2c:	10800058 	cmpnei	r2,r2,1
81129e30:	1000121e 	bne	r2,zero,81129e7c <OSFlagPost+0x308>
81129e34:	00800044 	movi	r2,1
81129e38:	e0bff205 	stb	r2,-56(fp)
81129e3c:	00000f06 	br	81129e7c <OSFlagPost+0x308>
81129e40:	e0bff317 	ldw	r2,-52(fp)
81129e44:	e0bff515 	stw	r2,-44(fp)
81129e48:	e0bff517 	ldw	r2,-44(fp)
81129e4c:	1001703a 	wrctl	status,r2
81129e50:	e0bfff17 	ldw	r2,-4(fp)
81129e54:	00c01bc4 	movi	r3,111
81129e58:	10c00005 	stb	r3,0(r2)
81129e5c:	0005883a 	mov	r2,zero
81129e60:	00002606 	br	81129efc <OSFlagPost+0x388>
81129e64:	0001883a 	nop
81129e68:	00000506 	br	81129e80 <OSFlagPost+0x30c>
81129e6c:	0001883a 	nop
81129e70:	00000306 	br	81129e80 <OSFlagPost+0x30c>
81129e74:	0001883a 	nop
81129e78:	00000106 	br	81129e80 <OSFlagPost+0x30c>
81129e7c:	0001883a 	nop
81129e80:	e0bff117 	ldw	r2,-60(fp)
81129e84:	10800017 	ldw	r2,0(r2)
81129e88:	e0bff115 	stw	r2,-60(fp)
81129e8c:	e0bff117 	ldw	r2,-60(fp)
81129e90:	103f871e 	bne	r2,zero,81129cb0 <__reset+0xfb109cb0>
81129e94:	e0bff317 	ldw	r2,-52(fp)
81129e98:	e0bff715 	stw	r2,-36(fp)
81129e9c:	e0bff717 	ldw	r2,-36(fp)
81129ea0:	1001703a 	wrctl	status,r2
81129ea4:	e0bff203 	ldbu	r2,-56(fp)
81129ea8:	10800058 	cmpnei	r2,r2,1
81129eac:	1000011e 	bne	r2,zero,81129eb4 <OSFlagPost+0x340>
81129eb0:	112833c0 	call	8112833c <OS_Sched>
81129eb4:	0005303a 	rdctl	r2,status
81129eb8:	e0bffa15 	stw	r2,-24(fp)
81129ebc:	e0fffa17 	ldw	r3,-24(fp)
81129ec0:	00bfff84 	movi	r2,-2
81129ec4:	1884703a 	and	r2,r3,r2
81129ec8:	1001703a 	wrctl	status,r2
81129ecc:	e0bffa17 	ldw	r2,-24(fp)
81129ed0:	e0bff315 	stw	r2,-52(fp)
81129ed4:	e0bffc17 	ldw	r2,-16(fp)
81129ed8:	1080020b 	ldhu	r2,8(r2)
81129edc:	e0bff90d 	sth	r2,-28(fp)
81129ee0:	e0bff317 	ldw	r2,-52(fp)
81129ee4:	e0bff815 	stw	r2,-32(fp)
81129ee8:	e0bff817 	ldw	r2,-32(fp)
81129eec:	1001703a 	wrctl	status,r2
81129ef0:	e0bfff17 	ldw	r2,-4(fp)
81129ef4:	10000005 	stb	zero,0(r2)
81129ef8:	e0bff90b 	ldhu	r2,-28(fp)
81129efc:	e037883a 	mov	sp,fp
81129f00:	dfc00117 	ldw	ra,4(sp)
81129f04:	df000017 	ldw	fp,0(sp)
81129f08:	dec00204 	addi	sp,sp,8
81129f0c:	f800283a 	ret

81129f10 <OSFlagQuery>:
81129f10:	defff904 	addi	sp,sp,-28
81129f14:	de00012e 	bgeu	sp,et,81129f1c <OSFlagQuery+0xc>
81129f18:	003b68fa 	trap	3
81129f1c:	df000615 	stw	fp,24(sp)
81129f20:	df000604 	addi	fp,sp,24
81129f24:	e13ffe15 	stw	r4,-8(fp)
81129f28:	e17fff15 	stw	r5,-4(fp)
81129f2c:	e03ffa15 	stw	zero,-24(fp)
81129f30:	e0bfff17 	ldw	r2,-4(fp)
81129f34:	1000021e 	bne	r2,zero,81129f40 <OSFlagQuery+0x30>
81129f38:	0005883a 	mov	r2,zero
81129f3c:	00002306 	br	81129fcc <OSFlagQuery+0xbc>
81129f40:	e0bffe17 	ldw	r2,-8(fp)
81129f44:	1000051e 	bne	r2,zero,81129f5c <OSFlagQuery+0x4c>
81129f48:	e0bfff17 	ldw	r2,-4(fp)
81129f4c:	00c01b84 	movi	r3,110
81129f50:	10c00005 	stb	r3,0(r2)
81129f54:	0005883a 	mov	r2,zero
81129f58:	00001c06 	br	81129fcc <OSFlagQuery+0xbc>
81129f5c:	e0bffe17 	ldw	r2,-8(fp)
81129f60:	10800003 	ldbu	r2,0(r2)
81129f64:	10803fcc 	andi	r2,r2,255
81129f68:	10800160 	cmpeqi	r2,r2,5
81129f6c:	1000051e 	bne	r2,zero,81129f84 <OSFlagQuery+0x74>
81129f70:	e0bfff17 	ldw	r2,-4(fp)
81129f74:	00c00044 	movi	r3,1
81129f78:	10c00005 	stb	r3,0(r2)
81129f7c:	0005883a 	mov	r2,zero
81129f80:	00001206 	br	81129fcc <OSFlagQuery+0xbc>
81129f84:	0005303a 	rdctl	r2,status
81129f88:	e0bffc15 	stw	r2,-16(fp)
81129f8c:	e0fffc17 	ldw	r3,-16(fp)
81129f90:	00bfff84 	movi	r2,-2
81129f94:	1884703a 	and	r2,r3,r2
81129f98:	1001703a 	wrctl	status,r2
81129f9c:	e0bffc17 	ldw	r2,-16(fp)
81129fa0:	e0bffa15 	stw	r2,-24(fp)
81129fa4:	e0bffe17 	ldw	r2,-8(fp)
81129fa8:	1080020b 	ldhu	r2,8(r2)
81129fac:	e0bffb0d 	sth	r2,-20(fp)
81129fb0:	e0bffa17 	ldw	r2,-24(fp)
81129fb4:	e0bffd15 	stw	r2,-12(fp)
81129fb8:	e0bffd17 	ldw	r2,-12(fp)
81129fbc:	1001703a 	wrctl	status,r2
81129fc0:	e0bfff17 	ldw	r2,-4(fp)
81129fc4:	10000005 	stb	zero,0(r2)
81129fc8:	e0bffb0b 	ldhu	r2,-20(fp)
81129fcc:	e037883a 	mov	sp,fp
81129fd0:	df000017 	ldw	fp,0(sp)
81129fd4:	dec00104 	addi	sp,sp,4
81129fd8:	f800283a 	ret

81129fdc <OS_FlagBlock>:
81129fdc:	defff804 	addi	sp,sp,-32
81129fe0:	de00012e 	bgeu	sp,et,81129fe8 <OS_FlagBlock+0xc>
81129fe4:	003b68fa 	trap	3
81129fe8:	df000715 	stw	fp,28(sp)
81129fec:	df000704 	addi	fp,sp,28
81129ff0:	e13ffb15 	stw	r4,-20(fp)
81129ff4:	e17ffc15 	stw	r5,-16(fp)
81129ff8:	3009883a 	mov	r4,r6
81129ffc:	3807883a 	mov	r3,r7
8112a000:	e0800117 	ldw	r2,4(fp)
8112a004:	e13ffd0d 	sth	r4,-12(fp)
8112a008:	e0fffe05 	stb	r3,-8(fp)
8112a00c:	e0bfff0d 	sth	r2,-4(fp)
8112a010:	d0a08417 	ldw	r2,-32240(gp)
8112a014:	d0e08417 	ldw	r3,-32240(gp)
8112a018:	18c00c03 	ldbu	r3,48(r3)
8112a01c:	18c00814 	ori	r3,r3,32
8112a020:	10c00c05 	stb	r3,48(r2)
8112a024:	d0a08417 	ldw	r2,-32240(gp)
8112a028:	10000c45 	stb	zero,49(r2)
8112a02c:	d0a08417 	ldw	r2,-32240(gp)
8112a030:	e0ffff0b 	ldhu	r3,-4(fp)
8112a034:	10c00b8d 	sth	r3,46(r2)
8112a038:	d0a08417 	ldw	r2,-32240(gp)
8112a03c:	e0fffc17 	ldw	r3,-16(fp)
8112a040:	10c00a15 	stw	r3,40(r2)
8112a044:	e0bffc17 	ldw	r2,-16(fp)
8112a048:	e0fffd0b 	ldhu	r3,-12(fp)
8112a04c:	10c0040d 	sth	r3,16(r2)
8112a050:	e0bffc17 	ldw	r2,-16(fp)
8112a054:	e0fffe03 	ldbu	r3,-8(fp)
8112a058:	10c00485 	stb	r3,18(r2)
8112a05c:	d0e08417 	ldw	r3,-32240(gp)
8112a060:	e0bffc17 	ldw	r2,-16(fp)
8112a064:	10c00215 	stw	r3,8(r2)
8112a068:	e0bffb17 	ldw	r2,-20(fp)
8112a06c:	10c00117 	ldw	r3,4(r2)
8112a070:	e0bffc17 	ldw	r2,-16(fp)
8112a074:	10c00015 	stw	r3,0(r2)
8112a078:	e0bffc17 	ldw	r2,-16(fp)
8112a07c:	10000115 	stw	zero,4(r2)
8112a080:	e0bffc17 	ldw	r2,-16(fp)
8112a084:	e0fffb17 	ldw	r3,-20(fp)
8112a088:	10c00315 	stw	r3,12(r2)
8112a08c:	e0bffb17 	ldw	r2,-20(fp)
8112a090:	10800117 	ldw	r2,4(r2)
8112a094:	e0bff915 	stw	r2,-28(fp)
8112a098:	e0bff917 	ldw	r2,-28(fp)
8112a09c:	10000326 	beq	r2,zero,8112a0ac <OS_FlagBlock+0xd0>
8112a0a0:	e0bff917 	ldw	r2,-28(fp)
8112a0a4:	e0fffc17 	ldw	r3,-16(fp)
8112a0a8:	10c00115 	stw	r3,4(r2)
8112a0ac:	e0bffb17 	ldw	r2,-20(fp)
8112a0b0:	e0fffc17 	ldw	r3,-16(fp)
8112a0b4:	10c00115 	stw	r3,4(r2)
8112a0b8:	d0a08417 	ldw	r2,-32240(gp)
8112a0bc:	10800d03 	ldbu	r2,52(r2)
8112a0c0:	e0bffa05 	stb	r2,-24(fp)
8112a0c4:	e0fffa03 	ldbu	r3,-24(fp)
8112a0c8:	e13ffa03 	ldbu	r4,-24(fp)
8112a0cc:	d0a08044 	addi	r2,gp,-32255
8112a0d0:	2085883a 	add	r2,r4,r2
8112a0d4:	10800003 	ldbu	r2,0(r2)
8112a0d8:	1009883a 	mov	r4,r2
8112a0dc:	d0a08417 	ldw	r2,-32240(gp)
8112a0e0:	10800d43 	ldbu	r2,53(r2)
8112a0e4:	0084303a 	nor	r2,zero,r2
8112a0e8:	2084703a 	and	r2,r4,r2
8112a0ec:	1009883a 	mov	r4,r2
8112a0f0:	d0a08044 	addi	r2,gp,-32255
8112a0f4:	1885883a 	add	r2,r3,r2
8112a0f8:	11000005 	stb	r4,0(r2)
8112a0fc:	e0fffa03 	ldbu	r3,-24(fp)
8112a100:	d0a08044 	addi	r2,gp,-32255
8112a104:	1885883a 	add	r2,r3,r2
8112a108:	10800003 	ldbu	r2,0(r2)
8112a10c:	10803fcc 	andi	r2,r2,255
8112a110:	1000071e 	bne	r2,zero,8112a130 <OS_FlagBlock+0x154>
8112a114:	d0a08417 	ldw	r2,-32240(gp)
8112a118:	10800d83 	ldbu	r2,54(r2)
8112a11c:	0084303a 	nor	r2,zero,r2
8112a120:	1007883a 	mov	r3,r2
8112a124:	d0a08003 	ldbu	r2,-32256(gp)
8112a128:	1884703a 	and	r2,r3,r2
8112a12c:	d0a08005 	stb	r2,-32256(gp)
8112a130:	0001883a 	nop
8112a134:	e037883a 	mov	sp,fp
8112a138:	df000017 	ldw	fp,0(sp)
8112a13c:	dec00104 	addi	sp,sp,4
8112a140:	f800283a 	ret

8112a144 <OS_FlagInit>:
8112a144:	defffb04 	addi	sp,sp,-20
8112a148:	de00012e 	bgeu	sp,et,8112a150 <OS_FlagInit+0xc>
8112a14c:	003b68fa 	trap	3
8112a150:	dfc00415 	stw	ra,16(sp)
8112a154:	df000315 	stw	fp,12(sp)
8112a158:	df000304 	addi	fp,sp,12
8112a15c:	0140dc04 	movi	r5,880
8112a160:	01204574 	movhi	r4,33045
8112a164:	21367704 	addi	r4,r4,-9764
8112a168:	11282700 	call	81128270 <OS_MemClr>
8112a16c:	00a04574 	movhi	r2,33045
8112a170:	10b67704 	addi	r2,r2,-9764
8112a174:	e0bffe15 	stw	r2,-8(fp)
8112a178:	00a04574 	movhi	r2,33045
8112a17c:	10b68204 	addi	r2,r2,-9720
8112a180:	e0bfff15 	stw	r2,-4(fp)
8112a184:	e03ffd0d 	sth	zero,-12(fp)
8112a188:	00001306 	br	8112a1d8 <OS_FlagInit+0x94>
8112a18c:	e0bffe17 	ldw	r2,-8(fp)
8112a190:	10000005 	stb	zero,0(r2)
8112a194:	e0bffe17 	ldw	r2,-8(fp)
8112a198:	e0ffff17 	ldw	r3,-4(fp)
8112a19c:	10c00115 	stw	r3,4(r2)
8112a1a0:	e0bffe17 	ldw	r2,-8(fp)
8112a1a4:	00c00fc4 	movi	r3,63
8112a1a8:	10c00285 	stb	r3,10(r2)
8112a1ac:	e0bffe17 	ldw	r2,-8(fp)
8112a1b0:	100002c5 	stb	zero,11(r2)
8112a1b4:	e0bffe17 	ldw	r2,-8(fp)
8112a1b8:	10800b04 	addi	r2,r2,44
8112a1bc:	e0bffe15 	stw	r2,-8(fp)
8112a1c0:	e0bfff17 	ldw	r2,-4(fp)
8112a1c4:	10800b04 	addi	r2,r2,44
8112a1c8:	e0bfff15 	stw	r2,-4(fp)
8112a1cc:	e0bffd0b 	ldhu	r2,-12(fp)
8112a1d0:	10800044 	addi	r2,r2,1
8112a1d4:	e0bffd0d 	sth	r2,-12(fp)
8112a1d8:	e0bffd0b 	ldhu	r2,-12(fp)
8112a1dc:	108004f0 	cmpltui	r2,r2,19
8112a1e0:	103fea1e 	bne	r2,zero,8112a18c <__reset+0xfb10a18c>
8112a1e4:	e0bffe17 	ldw	r2,-8(fp)
8112a1e8:	10000005 	stb	zero,0(r2)
8112a1ec:	e0bffe17 	ldw	r2,-8(fp)
8112a1f0:	10000115 	stw	zero,4(r2)
8112a1f4:	e0bffe17 	ldw	r2,-8(fp)
8112a1f8:	00c00fc4 	movi	r3,63
8112a1fc:	10c00285 	stb	r3,10(r2)
8112a200:	e0bffe17 	ldw	r2,-8(fp)
8112a204:	100002c5 	stb	zero,11(r2)
8112a208:	00a04574 	movhi	r2,33045
8112a20c:	10b67704 	addi	r2,r2,-9764
8112a210:	d0a08815 	stw	r2,-32224(gp)
8112a214:	0001883a 	nop
8112a218:	e037883a 	mov	sp,fp
8112a21c:	dfc00117 	ldw	ra,4(sp)
8112a220:	df000017 	ldw	fp,0(sp)
8112a224:	dec00204 	addi	sp,sp,8
8112a228:	f800283a 	ret

8112a22c <OS_FlagTaskRdy>:
8112a22c:	defffa04 	addi	sp,sp,-24
8112a230:	de00012e 	bgeu	sp,et,8112a238 <OS_FlagTaskRdy+0xc>
8112a234:	003b68fa 	trap	3
8112a238:	dfc00515 	stw	ra,20(sp)
8112a23c:	df000415 	stw	fp,16(sp)
8112a240:	df000404 	addi	fp,sp,16
8112a244:	e13ffe15 	stw	r4,-8(fp)
8112a248:	2805883a 	mov	r2,r5
8112a24c:	e0bfff0d 	sth	r2,-4(fp)
8112a250:	e0bffe17 	ldw	r2,-8(fp)
8112a254:	10800217 	ldw	r2,8(r2)
8112a258:	e0bffd15 	stw	r2,-12(fp)
8112a25c:	e0bffd17 	ldw	r2,-12(fp)
8112a260:	10000b8d 	sth	zero,46(r2)
8112a264:	e0bffd17 	ldw	r2,-12(fp)
8112a268:	e0ffff0b 	ldhu	r3,-4(fp)
8112a26c:	10c00b0d 	sth	r3,44(r2)
8112a270:	e0bffd17 	ldw	r2,-12(fp)
8112a274:	10c00c03 	ldbu	r3,48(r2)
8112a278:	00bff7c4 	movi	r2,-33
8112a27c:	1884703a 	and	r2,r3,r2
8112a280:	1007883a 	mov	r3,r2
8112a284:	e0bffd17 	ldw	r2,-12(fp)
8112a288:	10c00c05 	stb	r3,48(r2)
8112a28c:	e0bffd17 	ldw	r2,-12(fp)
8112a290:	10000c45 	stb	zero,49(r2)
8112a294:	e0bffd17 	ldw	r2,-12(fp)
8112a298:	10800c03 	ldbu	r2,48(r2)
8112a29c:	10803fcc 	andi	r2,r2,255
8112a2a0:	1000181e 	bne	r2,zero,8112a304 <OS_FlagTaskRdy+0xd8>
8112a2a4:	e0bffd17 	ldw	r2,-12(fp)
8112a2a8:	10c00d83 	ldbu	r3,54(r2)
8112a2ac:	d0a08003 	ldbu	r2,-32256(gp)
8112a2b0:	1884b03a 	or	r2,r3,r2
8112a2b4:	d0a08005 	stb	r2,-32256(gp)
8112a2b8:	e0bffd17 	ldw	r2,-12(fp)
8112a2bc:	10800d03 	ldbu	r2,52(r2)
8112a2c0:	10c03fcc 	andi	r3,r2,255
8112a2c4:	e0bffd17 	ldw	r2,-12(fp)
8112a2c8:	10800d03 	ldbu	r2,52(r2)
8112a2cc:	11003fcc 	andi	r4,r2,255
8112a2d0:	d0a08044 	addi	r2,gp,-32255
8112a2d4:	2085883a 	add	r2,r4,r2
8112a2d8:	11000003 	ldbu	r4,0(r2)
8112a2dc:	e0bffd17 	ldw	r2,-12(fp)
8112a2e0:	10800d43 	ldbu	r2,53(r2)
8112a2e4:	2084b03a 	or	r2,r4,r2
8112a2e8:	1009883a 	mov	r4,r2
8112a2ec:	d0a08044 	addi	r2,gp,-32255
8112a2f0:	1885883a 	add	r2,r3,r2
8112a2f4:	11000005 	stb	r4,0(r2)
8112a2f8:	00800044 	movi	r2,1
8112a2fc:	e0bffc05 	stb	r2,-16(fp)
8112a300:	00000106 	br	8112a308 <OS_FlagTaskRdy+0xdc>
8112a304:	e03ffc05 	stb	zero,-16(fp)
8112a308:	e13ffe17 	ldw	r4,-8(fp)
8112a30c:	112a3280 	call	8112a328 <OS_FlagUnlink>
8112a310:	e0bffc03 	ldbu	r2,-16(fp)
8112a314:	e037883a 	mov	sp,fp
8112a318:	dfc00117 	ldw	ra,4(sp)
8112a31c:	df000017 	ldw	fp,0(sp)
8112a320:	dec00204 	addi	sp,sp,8
8112a324:	f800283a 	ret

8112a328 <OS_FlagUnlink>:
8112a328:	defffa04 	addi	sp,sp,-24
8112a32c:	de00012e 	bgeu	sp,et,8112a334 <OS_FlagUnlink+0xc>
8112a330:	003b68fa 	trap	3
8112a334:	df000515 	stw	fp,20(sp)
8112a338:	df000504 	addi	fp,sp,20
8112a33c:	e13fff15 	stw	r4,-4(fp)
8112a340:	e0bfff17 	ldw	r2,-4(fp)
8112a344:	10800117 	ldw	r2,4(r2)
8112a348:	e0bffb15 	stw	r2,-20(fp)
8112a34c:	e0bfff17 	ldw	r2,-4(fp)
8112a350:	10800017 	ldw	r2,0(r2)
8112a354:	e0bffc15 	stw	r2,-16(fp)
8112a358:	e0bffb17 	ldw	r2,-20(fp)
8112a35c:	10000b1e 	bne	r2,zero,8112a38c <OS_FlagUnlink+0x64>
8112a360:	e0bfff17 	ldw	r2,-4(fp)
8112a364:	10800317 	ldw	r2,12(r2)
8112a368:	e0bffd15 	stw	r2,-12(fp)
8112a36c:	e0bffd17 	ldw	r2,-12(fp)
8112a370:	e0fffc17 	ldw	r3,-16(fp)
8112a374:	10c00115 	stw	r3,4(r2)
8112a378:	e0bffc17 	ldw	r2,-16(fp)
8112a37c:	10000b26 	beq	r2,zero,8112a3ac <OS_FlagUnlink+0x84>
8112a380:	e0bffc17 	ldw	r2,-16(fp)
8112a384:	10000115 	stw	zero,4(r2)
8112a388:	00000806 	br	8112a3ac <OS_FlagUnlink+0x84>
8112a38c:	e0bffb17 	ldw	r2,-20(fp)
8112a390:	e0fffc17 	ldw	r3,-16(fp)
8112a394:	10c00015 	stw	r3,0(r2)
8112a398:	e0bffc17 	ldw	r2,-16(fp)
8112a39c:	10000326 	beq	r2,zero,8112a3ac <OS_FlagUnlink+0x84>
8112a3a0:	e0bffc17 	ldw	r2,-16(fp)
8112a3a4:	e0fffb17 	ldw	r3,-20(fp)
8112a3a8:	10c00115 	stw	r3,4(r2)
8112a3ac:	e0bfff17 	ldw	r2,-4(fp)
8112a3b0:	10800217 	ldw	r2,8(r2)
8112a3b4:	e0bffe15 	stw	r2,-8(fp)
8112a3b8:	e0bffe17 	ldw	r2,-8(fp)
8112a3bc:	10000a15 	stw	zero,40(r2)
8112a3c0:	0001883a 	nop
8112a3c4:	e037883a 	mov	sp,fp
8112a3c8:	df000017 	ldw	fp,0(sp)
8112a3cc:	dec00104 	addi	sp,sp,4
8112a3d0:	f800283a 	ret

8112a3d4 <OSMemCreate>:
8112a3d4:	defff404 	addi	sp,sp,-48
8112a3d8:	de00012e 	bgeu	sp,et,8112a3e0 <OSMemCreate+0xc>
8112a3dc:	003b68fa 	trap	3
8112a3e0:	df000b15 	stw	fp,44(sp)
8112a3e4:	df000b04 	addi	fp,sp,44
8112a3e8:	e13ffc15 	stw	r4,-16(fp)
8112a3ec:	e17ffd15 	stw	r5,-12(fp)
8112a3f0:	e1bffe15 	stw	r6,-8(fp)
8112a3f4:	e1ffff15 	stw	r7,-4(fp)
8112a3f8:	e03ff815 	stw	zero,-32(fp)
8112a3fc:	e0bfff17 	ldw	r2,-4(fp)
8112a400:	1000021e 	bne	r2,zero,8112a40c <OSMemCreate+0x38>
8112a404:	0005883a 	mov	r2,zero
8112a408:	00006506 	br	8112a5a0 <OSMemCreate+0x1cc>
8112a40c:	e0bffc17 	ldw	r2,-16(fp)
8112a410:	1000051e 	bne	r2,zero,8112a428 <OSMemCreate+0x54>
8112a414:	e0bfff17 	ldw	r2,-4(fp)
8112a418:	00c01884 	movi	r3,98
8112a41c:	10c00005 	stb	r3,0(r2)
8112a420:	0005883a 	mov	r2,zero
8112a424:	00005e06 	br	8112a5a0 <OSMemCreate+0x1cc>
8112a428:	e0bffc17 	ldw	r2,-16(fp)
8112a42c:	108000cc 	andi	r2,r2,3
8112a430:	10000526 	beq	r2,zero,8112a448 <OSMemCreate+0x74>
8112a434:	e0bfff17 	ldw	r2,-4(fp)
8112a438:	00c01884 	movi	r3,98
8112a43c:	10c00005 	stb	r3,0(r2)
8112a440:	0005883a 	mov	r2,zero
8112a444:	00005606 	br	8112a5a0 <OSMemCreate+0x1cc>
8112a448:	e0bffd17 	ldw	r2,-12(fp)
8112a44c:	108000a8 	cmpgeui	r2,r2,2
8112a450:	1000051e 	bne	r2,zero,8112a468 <OSMemCreate+0x94>
8112a454:	e0bfff17 	ldw	r2,-4(fp)
8112a458:	00c016c4 	movi	r3,91
8112a45c:	10c00005 	stb	r3,0(r2)
8112a460:	0005883a 	mov	r2,zero
8112a464:	00004e06 	br	8112a5a0 <OSMemCreate+0x1cc>
8112a468:	e0bffe17 	ldw	r2,-8(fp)
8112a46c:	10800128 	cmpgeui	r2,r2,4
8112a470:	1000051e 	bne	r2,zero,8112a488 <OSMemCreate+0xb4>
8112a474:	e0bfff17 	ldw	r2,-4(fp)
8112a478:	00c01704 	movi	r3,92
8112a47c:	10c00005 	stb	r3,0(r2)
8112a480:	0005883a 	mov	r2,zero
8112a484:	00004606 	br	8112a5a0 <OSMemCreate+0x1cc>
8112a488:	0005303a 	rdctl	r2,status
8112a48c:	e0bffb15 	stw	r2,-20(fp)
8112a490:	e0fffb17 	ldw	r3,-20(fp)
8112a494:	00bfff84 	movi	r2,-2
8112a498:	1884703a 	and	r2,r3,r2
8112a49c:	1001703a 	wrctl	status,r2
8112a4a0:	e0bffb17 	ldw	r2,-20(fp)
8112a4a4:	e0bff815 	stw	r2,-32(fp)
8112a4a8:	d0a07d17 	ldw	r2,-32268(gp)
8112a4ac:	e0bffa15 	stw	r2,-24(fp)
8112a4b0:	d0a07d17 	ldw	r2,-32268(gp)
8112a4b4:	10000326 	beq	r2,zero,8112a4c4 <OSMemCreate+0xf0>
8112a4b8:	d0a07d17 	ldw	r2,-32268(gp)
8112a4bc:	10800117 	ldw	r2,4(r2)
8112a4c0:	d0a07d15 	stw	r2,-32268(gp)
8112a4c4:	e0bff817 	ldw	r2,-32(fp)
8112a4c8:	e0bff915 	stw	r2,-28(fp)
8112a4cc:	e0bff917 	ldw	r2,-28(fp)
8112a4d0:	1001703a 	wrctl	status,r2
8112a4d4:	e0bffa17 	ldw	r2,-24(fp)
8112a4d8:	1000051e 	bne	r2,zero,8112a4f0 <OSMemCreate+0x11c>
8112a4dc:	e0bfff17 	ldw	r2,-4(fp)
8112a4e0:	00c01684 	movi	r3,90
8112a4e4:	10c00005 	stb	r3,0(r2)
8112a4e8:	0005883a 	mov	r2,zero
8112a4ec:	00002c06 	br	8112a5a0 <OSMemCreate+0x1cc>
8112a4f0:	e0bffc17 	ldw	r2,-16(fp)
8112a4f4:	e0bff615 	stw	r2,-40(fp)
8112a4f8:	e0fffc17 	ldw	r3,-16(fp)
8112a4fc:	e0bffe17 	ldw	r2,-8(fp)
8112a500:	1885883a 	add	r2,r3,r2
8112a504:	e0bff515 	stw	r2,-44(fp)
8112a508:	e03ff715 	stw	zero,-36(fp)
8112a50c:	00000c06 	br	8112a540 <OSMemCreate+0x16c>
8112a510:	e0bff617 	ldw	r2,-40(fp)
8112a514:	e0fff517 	ldw	r3,-44(fp)
8112a518:	10c00015 	stw	r3,0(r2)
8112a51c:	e0bff517 	ldw	r2,-44(fp)
8112a520:	e0bff615 	stw	r2,-40(fp)
8112a524:	e0fff517 	ldw	r3,-44(fp)
8112a528:	e0bffe17 	ldw	r2,-8(fp)
8112a52c:	1885883a 	add	r2,r3,r2
8112a530:	e0bff515 	stw	r2,-44(fp)
8112a534:	e0bff717 	ldw	r2,-36(fp)
8112a538:	10800044 	addi	r2,r2,1
8112a53c:	e0bff715 	stw	r2,-36(fp)
8112a540:	e0bffd17 	ldw	r2,-12(fp)
8112a544:	10bfffc4 	addi	r2,r2,-1
8112a548:	e0fff717 	ldw	r3,-36(fp)
8112a54c:	18bff036 	bltu	r3,r2,8112a510 <__reset+0xfb10a510>
8112a550:	e0bff617 	ldw	r2,-40(fp)
8112a554:	10000015 	stw	zero,0(r2)
8112a558:	e0bffa17 	ldw	r2,-24(fp)
8112a55c:	e0fffc17 	ldw	r3,-16(fp)
8112a560:	10c00015 	stw	r3,0(r2)
8112a564:	e0bffa17 	ldw	r2,-24(fp)
8112a568:	e0fffc17 	ldw	r3,-16(fp)
8112a56c:	10c00115 	stw	r3,4(r2)
8112a570:	e0bffa17 	ldw	r2,-24(fp)
8112a574:	e0fffd17 	ldw	r3,-12(fp)
8112a578:	10c00415 	stw	r3,16(r2)
8112a57c:	e0bffa17 	ldw	r2,-24(fp)
8112a580:	e0fffd17 	ldw	r3,-12(fp)
8112a584:	10c00315 	stw	r3,12(r2)
8112a588:	e0bffa17 	ldw	r2,-24(fp)
8112a58c:	e0fffe17 	ldw	r3,-8(fp)
8112a590:	10c00215 	stw	r3,8(r2)
8112a594:	e0bfff17 	ldw	r2,-4(fp)
8112a598:	10000005 	stb	zero,0(r2)
8112a59c:	e0bffa17 	ldw	r2,-24(fp)
8112a5a0:	e037883a 	mov	sp,fp
8112a5a4:	df000017 	ldw	fp,0(sp)
8112a5a8:	dec00104 	addi	sp,sp,4
8112a5ac:	f800283a 	ret

8112a5b0 <OSMemGet>:
8112a5b0:	defff804 	addi	sp,sp,-32
8112a5b4:	de00012e 	bgeu	sp,et,8112a5bc <OSMemGet+0xc>
8112a5b8:	003b68fa 	trap	3
8112a5bc:	df000715 	stw	fp,28(sp)
8112a5c0:	df000704 	addi	fp,sp,28
8112a5c4:	e13ffe15 	stw	r4,-8(fp)
8112a5c8:	e17fff15 	stw	r5,-4(fp)
8112a5cc:	e03ff915 	stw	zero,-28(fp)
8112a5d0:	e0bfff17 	ldw	r2,-4(fp)
8112a5d4:	1000021e 	bne	r2,zero,8112a5e0 <OSMemGet+0x30>
8112a5d8:	0005883a 	mov	r2,zero
8112a5dc:	00002e06 	br	8112a698 <OSMemGet+0xe8>
8112a5e0:	e0bffe17 	ldw	r2,-8(fp)
8112a5e4:	1000051e 	bne	r2,zero,8112a5fc <OSMemGet+0x4c>
8112a5e8:	e0bfff17 	ldw	r2,-4(fp)
8112a5ec:	00c01804 	movi	r3,96
8112a5f0:	10c00005 	stb	r3,0(r2)
8112a5f4:	0005883a 	mov	r2,zero
8112a5f8:	00002706 	br	8112a698 <OSMemGet+0xe8>
8112a5fc:	0005303a 	rdctl	r2,status
8112a600:	e0bffd15 	stw	r2,-12(fp)
8112a604:	e0fffd17 	ldw	r3,-12(fp)
8112a608:	00bfff84 	movi	r2,-2
8112a60c:	1884703a 	and	r2,r3,r2
8112a610:	1001703a 	wrctl	status,r2
8112a614:	e0bffd17 	ldw	r2,-12(fp)
8112a618:	e0bff915 	stw	r2,-28(fp)
8112a61c:	e0bffe17 	ldw	r2,-8(fp)
8112a620:	10800417 	ldw	r2,16(r2)
8112a624:	10001426 	beq	r2,zero,8112a678 <OSMemGet+0xc8>
8112a628:	e0bffe17 	ldw	r2,-8(fp)
8112a62c:	10800117 	ldw	r2,4(r2)
8112a630:	e0bffb15 	stw	r2,-20(fp)
8112a634:	e0bffb17 	ldw	r2,-20(fp)
8112a638:	10c00017 	ldw	r3,0(r2)
8112a63c:	e0bffe17 	ldw	r2,-8(fp)
8112a640:	10c00115 	stw	r3,4(r2)
8112a644:	e0bffe17 	ldw	r2,-8(fp)
8112a648:	10800417 	ldw	r2,16(r2)
8112a64c:	10ffffc4 	addi	r3,r2,-1
8112a650:	e0bffe17 	ldw	r2,-8(fp)
8112a654:	10c00415 	stw	r3,16(r2)
8112a658:	e0bff917 	ldw	r2,-28(fp)
8112a65c:	e0bffa15 	stw	r2,-24(fp)
8112a660:	e0bffa17 	ldw	r2,-24(fp)
8112a664:	1001703a 	wrctl	status,r2
8112a668:	e0bfff17 	ldw	r2,-4(fp)
8112a66c:	10000005 	stb	zero,0(r2)
8112a670:	e0bffb17 	ldw	r2,-20(fp)
8112a674:	00000806 	br	8112a698 <OSMemGet+0xe8>
8112a678:	e0bff917 	ldw	r2,-28(fp)
8112a67c:	e0bffc15 	stw	r2,-16(fp)
8112a680:	e0bffc17 	ldw	r2,-16(fp)
8112a684:	1001703a 	wrctl	status,r2
8112a688:	e0bfff17 	ldw	r2,-4(fp)
8112a68c:	00c01744 	movi	r3,93
8112a690:	10c00005 	stb	r3,0(r2)
8112a694:	0005883a 	mov	r2,zero
8112a698:	e037883a 	mov	sp,fp
8112a69c:	df000017 	ldw	fp,0(sp)
8112a6a0:	dec00104 	addi	sp,sp,4
8112a6a4:	f800283a 	ret

8112a6a8 <OSMemNameGet>:
8112a6a8:	defff704 	addi	sp,sp,-36
8112a6ac:	de00012e 	bgeu	sp,et,8112a6b4 <OSMemNameGet+0xc>
8112a6b0:	003b68fa 	trap	3
8112a6b4:	dfc00815 	stw	ra,32(sp)
8112a6b8:	df000715 	stw	fp,28(sp)
8112a6bc:	df000704 	addi	fp,sp,28
8112a6c0:	e13ffd15 	stw	r4,-12(fp)
8112a6c4:	e17ffe15 	stw	r5,-8(fp)
8112a6c8:	e1bfff15 	stw	r6,-4(fp)
8112a6cc:	e03ff915 	stw	zero,-28(fp)
8112a6d0:	e0bfff17 	ldw	r2,-4(fp)
8112a6d4:	1000021e 	bne	r2,zero,8112a6e0 <OSMemNameGet+0x38>
8112a6d8:	0005883a 	mov	r2,zero
8112a6dc:	00002b06 	br	8112a78c <OSMemNameGet+0xe4>
8112a6e0:	e0bffd17 	ldw	r2,-12(fp)
8112a6e4:	1000051e 	bne	r2,zero,8112a6fc <OSMemNameGet+0x54>
8112a6e8:	e0bfff17 	ldw	r2,-4(fp)
8112a6ec:	00c01804 	movi	r3,96
8112a6f0:	10c00005 	stb	r3,0(r2)
8112a6f4:	0005883a 	mov	r2,zero
8112a6f8:	00002406 	br	8112a78c <OSMemNameGet+0xe4>
8112a6fc:	e0bffe17 	ldw	r2,-8(fp)
8112a700:	1000051e 	bne	r2,zero,8112a718 <OSMemNameGet+0x70>
8112a704:	e0bfff17 	ldw	r2,-4(fp)
8112a708:	00c00304 	movi	r3,12
8112a70c:	10c00005 	stb	r3,0(r2)
8112a710:	0005883a 	mov	r2,zero
8112a714:	00001d06 	br	8112a78c <OSMemNameGet+0xe4>
8112a718:	d0a08303 	ldbu	r2,-32244(gp)
8112a71c:	10803fcc 	andi	r2,r2,255
8112a720:	10000526 	beq	r2,zero,8112a738 <OSMemNameGet+0x90>
8112a724:	e0bfff17 	ldw	r2,-4(fp)
8112a728:	00c00444 	movi	r3,17
8112a72c:	10c00005 	stb	r3,0(r2)
8112a730:	0005883a 	mov	r2,zero
8112a734:	00001506 	br	8112a78c <OSMemNameGet+0xe4>
8112a738:	0005303a 	rdctl	r2,status
8112a73c:	e0bffb15 	stw	r2,-20(fp)
8112a740:	e0fffb17 	ldw	r3,-20(fp)
8112a744:	00bfff84 	movi	r2,-2
8112a748:	1884703a 	and	r2,r3,r2
8112a74c:	1001703a 	wrctl	status,r2
8112a750:	e0bffb17 	ldw	r2,-20(fp)
8112a754:	e0bff915 	stw	r2,-28(fp)
8112a758:	e0bffd17 	ldw	r2,-12(fp)
8112a75c:	10800504 	addi	r2,r2,20
8112a760:	100b883a 	mov	r5,r2
8112a764:	e13ffe17 	ldw	r4,-8(fp)
8112a768:	11284900 	call	81128490 <OS_StrCopy>
8112a76c:	e0bffa05 	stb	r2,-24(fp)
8112a770:	e0bff917 	ldw	r2,-28(fp)
8112a774:	e0bffc15 	stw	r2,-16(fp)
8112a778:	e0bffc17 	ldw	r2,-16(fp)
8112a77c:	1001703a 	wrctl	status,r2
8112a780:	e0bfff17 	ldw	r2,-4(fp)
8112a784:	10000005 	stb	zero,0(r2)
8112a788:	e0bffa03 	ldbu	r2,-24(fp)
8112a78c:	e037883a 	mov	sp,fp
8112a790:	dfc00117 	ldw	ra,4(sp)
8112a794:	df000017 	ldw	fp,0(sp)
8112a798:	dec00204 	addi	sp,sp,8
8112a79c:	f800283a 	ret

8112a7a0 <OSMemNameSet>:
8112a7a0:	defff604 	addi	sp,sp,-40
8112a7a4:	de00012e 	bgeu	sp,et,8112a7ac <OSMemNameSet+0xc>
8112a7a8:	003b68fa 	trap	3
8112a7ac:	dfc00915 	stw	ra,36(sp)
8112a7b0:	df000815 	stw	fp,32(sp)
8112a7b4:	df000804 	addi	fp,sp,32
8112a7b8:	e13ffd15 	stw	r4,-12(fp)
8112a7bc:	e17ffe15 	stw	r5,-8(fp)
8112a7c0:	e1bfff15 	stw	r6,-4(fp)
8112a7c4:	e03ff815 	stw	zero,-32(fp)
8112a7c8:	e0bfff17 	ldw	r2,-4(fp)
8112a7cc:	10003526 	beq	r2,zero,8112a8a4 <OSMemNameSet+0x104>
8112a7d0:	e0bffd17 	ldw	r2,-12(fp)
8112a7d4:	1000041e 	bne	r2,zero,8112a7e8 <OSMemNameSet+0x48>
8112a7d8:	e0bfff17 	ldw	r2,-4(fp)
8112a7dc:	00c01804 	movi	r3,96
8112a7e0:	10c00005 	stb	r3,0(r2)
8112a7e4:	00003006 	br	8112a8a8 <OSMemNameSet+0x108>
8112a7e8:	e0bffe17 	ldw	r2,-8(fp)
8112a7ec:	1000041e 	bne	r2,zero,8112a800 <OSMemNameSet+0x60>
8112a7f0:	e0bfff17 	ldw	r2,-4(fp)
8112a7f4:	00c00304 	movi	r3,12
8112a7f8:	10c00005 	stb	r3,0(r2)
8112a7fc:	00002a06 	br	8112a8a8 <OSMemNameSet+0x108>
8112a800:	d0a08303 	ldbu	r2,-32244(gp)
8112a804:	10803fcc 	andi	r2,r2,255
8112a808:	10000426 	beq	r2,zero,8112a81c <OSMemNameSet+0x7c>
8112a80c:	e0bfff17 	ldw	r2,-4(fp)
8112a810:	00c00484 	movi	r3,18
8112a814:	10c00005 	stb	r3,0(r2)
8112a818:	00002306 	br	8112a8a8 <OSMemNameSet+0x108>
8112a81c:	0005303a 	rdctl	r2,status
8112a820:	e0bffc15 	stw	r2,-16(fp)
8112a824:	e0fffc17 	ldw	r3,-16(fp)
8112a828:	00bfff84 	movi	r2,-2
8112a82c:	1884703a 	and	r2,r3,r2
8112a830:	1001703a 	wrctl	status,r2
8112a834:	e0bffc17 	ldw	r2,-16(fp)
8112a838:	e0bff815 	stw	r2,-32(fp)
8112a83c:	e13ffe17 	ldw	r4,-8(fp)
8112a840:	112850c0 	call	8112850c <OS_StrLen>
8112a844:	e0bffa05 	stb	r2,-24(fp)
8112a848:	e0bffa03 	ldbu	r2,-24(fp)
8112a84c:	10800830 	cmpltui	r2,r2,32
8112a850:	1000081e 	bne	r2,zero,8112a874 <OSMemNameSet+0xd4>
8112a854:	e0bff817 	ldw	r2,-32(fp)
8112a858:	e0bff915 	stw	r2,-28(fp)
8112a85c:	e0bff917 	ldw	r2,-28(fp)
8112a860:	1001703a 	wrctl	status,r2
8112a864:	e0bfff17 	ldw	r2,-4(fp)
8112a868:	00c018c4 	movi	r3,99
8112a86c:	10c00005 	stb	r3,0(r2)
8112a870:	00000d06 	br	8112a8a8 <OSMemNameSet+0x108>
8112a874:	e0bffd17 	ldw	r2,-12(fp)
8112a878:	10800504 	addi	r2,r2,20
8112a87c:	e17ffe17 	ldw	r5,-8(fp)
8112a880:	1009883a 	mov	r4,r2
8112a884:	11284900 	call	81128490 <OS_StrCopy>
8112a888:	e0bff817 	ldw	r2,-32(fp)
8112a88c:	e0bffb15 	stw	r2,-20(fp)
8112a890:	e0bffb17 	ldw	r2,-20(fp)
8112a894:	1001703a 	wrctl	status,r2
8112a898:	e0bfff17 	ldw	r2,-4(fp)
8112a89c:	10000005 	stb	zero,0(r2)
8112a8a0:	00000106 	br	8112a8a8 <OSMemNameSet+0x108>
8112a8a4:	0001883a 	nop
8112a8a8:	e037883a 	mov	sp,fp
8112a8ac:	dfc00117 	ldw	ra,4(sp)
8112a8b0:	df000017 	ldw	fp,0(sp)
8112a8b4:	dec00204 	addi	sp,sp,8
8112a8b8:	f800283a 	ret

8112a8bc <OSMemPut>:
8112a8bc:	defff904 	addi	sp,sp,-28
8112a8c0:	de00012e 	bgeu	sp,et,8112a8c8 <OSMemPut+0xc>
8112a8c4:	003b68fa 	trap	3
8112a8c8:	df000615 	stw	fp,24(sp)
8112a8cc:	df000604 	addi	fp,sp,24
8112a8d0:	e13ffe15 	stw	r4,-8(fp)
8112a8d4:	e17fff15 	stw	r5,-4(fp)
8112a8d8:	e03ffa15 	stw	zero,-24(fp)
8112a8dc:	e0bffe17 	ldw	r2,-8(fp)
8112a8e0:	1000021e 	bne	r2,zero,8112a8ec <OSMemPut+0x30>
8112a8e4:	00801804 	movi	r2,96
8112a8e8:	00002806 	br	8112a98c <OSMemPut+0xd0>
8112a8ec:	e0bfff17 	ldw	r2,-4(fp)
8112a8f0:	1000021e 	bne	r2,zero,8112a8fc <OSMemPut+0x40>
8112a8f4:	008017c4 	movi	r2,95
8112a8f8:	00002406 	br	8112a98c <OSMemPut+0xd0>
8112a8fc:	0005303a 	rdctl	r2,status
8112a900:	e0bffd15 	stw	r2,-12(fp)
8112a904:	e0fffd17 	ldw	r3,-12(fp)
8112a908:	00bfff84 	movi	r2,-2
8112a90c:	1884703a 	and	r2,r3,r2
8112a910:	1001703a 	wrctl	status,r2
8112a914:	e0bffd17 	ldw	r2,-12(fp)
8112a918:	e0bffa15 	stw	r2,-24(fp)
8112a91c:	e0bffe17 	ldw	r2,-8(fp)
8112a920:	10c00417 	ldw	r3,16(r2)
8112a924:	e0bffe17 	ldw	r2,-8(fp)
8112a928:	10800317 	ldw	r2,12(r2)
8112a92c:	18800636 	bltu	r3,r2,8112a948 <OSMemPut+0x8c>
8112a930:	e0bffa17 	ldw	r2,-24(fp)
8112a934:	e0bffb15 	stw	r2,-20(fp)
8112a938:	e0bffb17 	ldw	r2,-20(fp)
8112a93c:	1001703a 	wrctl	status,r2
8112a940:	00801784 	movi	r2,94
8112a944:	00001106 	br	8112a98c <OSMemPut+0xd0>
8112a948:	e0bffe17 	ldw	r2,-8(fp)
8112a94c:	10c00117 	ldw	r3,4(r2)
8112a950:	e0bfff17 	ldw	r2,-4(fp)
8112a954:	10c00015 	stw	r3,0(r2)
8112a958:	e0bffe17 	ldw	r2,-8(fp)
8112a95c:	e0ffff17 	ldw	r3,-4(fp)
8112a960:	10c00115 	stw	r3,4(r2)
8112a964:	e0bffe17 	ldw	r2,-8(fp)
8112a968:	10800417 	ldw	r2,16(r2)
8112a96c:	10c00044 	addi	r3,r2,1
8112a970:	e0bffe17 	ldw	r2,-8(fp)
8112a974:	10c00415 	stw	r3,16(r2)
8112a978:	e0bffa17 	ldw	r2,-24(fp)
8112a97c:	e0bffc15 	stw	r2,-16(fp)
8112a980:	e0bffc17 	ldw	r2,-16(fp)
8112a984:	1001703a 	wrctl	status,r2
8112a988:	0005883a 	mov	r2,zero
8112a98c:	e037883a 	mov	sp,fp
8112a990:	df000017 	ldw	fp,0(sp)
8112a994:	dec00104 	addi	sp,sp,4
8112a998:	f800283a 	ret

8112a99c <OSMemQuery>:
8112a99c:	defffa04 	addi	sp,sp,-24
8112a9a0:	de00012e 	bgeu	sp,et,8112a9a8 <OSMemQuery+0xc>
8112a9a4:	003b68fa 	trap	3
8112a9a8:	df000515 	stw	fp,20(sp)
8112a9ac:	df000504 	addi	fp,sp,20
8112a9b0:	e13ffe15 	stw	r4,-8(fp)
8112a9b4:	e17fff15 	stw	r5,-4(fp)
8112a9b8:	e03ffb15 	stw	zero,-20(fp)
8112a9bc:	e0bffe17 	ldw	r2,-8(fp)
8112a9c0:	1000021e 	bne	r2,zero,8112a9cc <OSMemQuery+0x30>
8112a9c4:	00801804 	movi	r2,96
8112a9c8:	00002c06 	br	8112aa7c <OSMemQuery+0xe0>
8112a9cc:	e0bfff17 	ldw	r2,-4(fp)
8112a9d0:	1000021e 	bne	r2,zero,8112a9dc <OSMemQuery+0x40>
8112a9d4:	00801844 	movi	r2,97
8112a9d8:	00002806 	br	8112aa7c <OSMemQuery+0xe0>
8112a9dc:	0005303a 	rdctl	r2,status
8112a9e0:	e0bffc15 	stw	r2,-16(fp)
8112a9e4:	e0fffc17 	ldw	r3,-16(fp)
8112a9e8:	00bfff84 	movi	r2,-2
8112a9ec:	1884703a 	and	r2,r3,r2
8112a9f0:	1001703a 	wrctl	status,r2
8112a9f4:	e0bffc17 	ldw	r2,-16(fp)
8112a9f8:	e0bffb15 	stw	r2,-20(fp)
8112a9fc:	e0bffe17 	ldw	r2,-8(fp)
8112aa00:	10c00017 	ldw	r3,0(r2)
8112aa04:	e0bfff17 	ldw	r2,-4(fp)
8112aa08:	10c00015 	stw	r3,0(r2)
8112aa0c:	e0bffe17 	ldw	r2,-8(fp)
8112aa10:	10c00117 	ldw	r3,4(r2)
8112aa14:	e0bfff17 	ldw	r2,-4(fp)
8112aa18:	10c00115 	stw	r3,4(r2)
8112aa1c:	e0bffe17 	ldw	r2,-8(fp)
8112aa20:	10c00217 	ldw	r3,8(r2)
8112aa24:	e0bfff17 	ldw	r2,-4(fp)
8112aa28:	10c00215 	stw	r3,8(r2)
8112aa2c:	e0bffe17 	ldw	r2,-8(fp)
8112aa30:	10c00317 	ldw	r3,12(r2)
8112aa34:	e0bfff17 	ldw	r2,-4(fp)
8112aa38:	10c00315 	stw	r3,12(r2)
8112aa3c:	e0bffe17 	ldw	r2,-8(fp)
8112aa40:	10c00417 	ldw	r3,16(r2)
8112aa44:	e0bfff17 	ldw	r2,-4(fp)
8112aa48:	10c00415 	stw	r3,16(r2)
8112aa4c:	e0bffb17 	ldw	r2,-20(fp)
8112aa50:	e0bffd15 	stw	r2,-12(fp)
8112aa54:	e0bffd17 	ldw	r2,-12(fp)
8112aa58:	1001703a 	wrctl	status,r2
8112aa5c:	e0bfff17 	ldw	r2,-4(fp)
8112aa60:	10c00317 	ldw	r3,12(r2)
8112aa64:	e0bfff17 	ldw	r2,-4(fp)
8112aa68:	10800417 	ldw	r2,16(r2)
8112aa6c:	1887c83a 	sub	r3,r3,r2
8112aa70:	e0bfff17 	ldw	r2,-4(fp)
8112aa74:	10c00515 	stw	r3,20(r2)
8112aa78:	0005883a 	mov	r2,zero
8112aa7c:	e037883a 	mov	sp,fp
8112aa80:	df000017 	ldw	fp,0(sp)
8112aa84:	dec00104 	addi	sp,sp,4
8112aa88:	f800283a 	ret

8112aa8c <OS_MemInit>:
8112aa8c:	defffc04 	addi	sp,sp,-16
8112aa90:	de00012e 	bgeu	sp,et,8112aa98 <OS_MemInit+0xc>
8112aa94:	003b68fa 	trap	3
8112aa98:	dfc00315 	stw	ra,12(sp)
8112aa9c:	df000215 	stw	fp,8(sp)
8112aaa0:	df000204 	addi	fp,sp,8
8112aaa4:	01430c04 	movi	r5,3120
8112aaa8:	01204574 	movhi	r4,33045
8112aaac:	2137bb04 	addi	r4,r4,-8468
8112aab0:	11282700 	call	81128270 <OS_MemClr>
8112aab4:	00a04574 	movhi	r2,33045
8112aab8:	10b7bb04 	addi	r2,r2,-8468
8112aabc:	e0bffe15 	stw	r2,-8(fp)
8112aac0:	e03fff0d 	sth	zero,-4(fp)
8112aac4:	00001306 	br	8112ab14 <OS_MemInit+0x88>
8112aac8:	e0bfff0b 	ldhu	r2,-4(fp)
8112aacc:	10800044 	addi	r2,r2,1
8112aad0:	10c00d24 	muli	r3,r2,52
8112aad4:	00a04574 	movhi	r2,33045
8112aad8:	10b7bb04 	addi	r2,r2,-8468
8112aadc:	1887883a 	add	r3,r3,r2
8112aae0:	e0bffe17 	ldw	r2,-8(fp)
8112aae4:	10c00115 	stw	r3,4(r2)
8112aae8:	e0bffe17 	ldw	r2,-8(fp)
8112aaec:	00c00fc4 	movi	r3,63
8112aaf0:	10c00505 	stb	r3,20(r2)
8112aaf4:	e0bffe17 	ldw	r2,-8(fp)
8112aaf8:	10000545 	stb	zero,21(r2)
8112aafc:	e0bffe17 	ldw	r2,-8(fp)
8112ab00:	10800d04 	addi	r2,r2,52
8112ab04:	e0bffe15 	stw	r2,-8(fp)
8112ab08:	e0bfff0b 	ldhu	r2,-4(fp)
8112ab0c:	10800044 	addi	r2,r2,1
8112ab10:	e0bfff0d 	sth	r2,-4(fp)
8112ab14:	e0bfff0b 	ldhu	r2,-4(fp)
8112ab18:	10800ef0 	cmpltui	r2,r2,59
8112ab1c:	103fea1e 	bne	r2,zero,8112aac8 <__reset+0xfb10aac8>
8112ab20:	e0bffe17 	ldw	r2,-8(fp)
8112ab24:	10000115 	stw	zero,4(r2)
8112ab28:	e0bffe17 	ldw	r2,-8(fp)
8112ab2c:	00c00fc4 	movi	r3,63
8112ab30:	10c00505 	stb	r3,20(r2)
8112ab34:	e0bffe17 	ldw	r2,-8(fp)
8112ab38:	10000545 	stb	zero,21(r2)
8112ab3c:	00a04574 	movhi	r2,33045
8112ab40:	10b7bb04 	addi	r2,r2,-8468
8112ab44:	d0a07d15 	stw	r2,-32268(gp)
8112ab48:	0001883a 	nop
8112ab4c:	e037883a 	mov	sp,fp
8112ab50:	dfc00117 	ldw	ra,4(sp)
8112ab54:	df000017 	ldw	fp,0(sp)
8112ab58:	dec00204 	addi	sp,sp,8
8112ab5c:	f800283a 	ret

8112ab60 <OSMutexAccept>:
8112ab60:	defff704 	addi	sp,sp,-36
8112ab64:	de00012e 	bgeu	sp,et,8112ab6c <OSMutexAccept+0xc>
8112ab68:	003b68fa 	trap	3
8112ab6c:	df000815 	stw	fp,32(sp)
8112ab70:	df000804 	addi	fp,sp,32
8112ab74:	e13ffe15 	stw	r4,-8(fp)
8112ab78:	e17fff15 	stw	r5,-4(fp)
8112ab7c:	e03ff815 	stw	zero,-32(fp)
8112ab80:	e0bfff17 	ldw	r2,-4(fp)
8112ab84:	1000021e 	bne	r2,zero,8112ab90 <OSMutexAccept+0x30>
8112ab88:	0005883a 	mov	r2,zero
8112ab8c:	00005b06 	br	8112acfc <OSMutexAccept+0x19c>
8112ab90:	e0bffe17 	ldw	r2,-8(fp)
8112ab94:	1000051e 	bne	r2,zero,8112abac <OSMutexAccept+0x4c>
8112ab98:	e0bfff17 	ldw	r2,-4(fp)
8112ab9c:	00c00104 	movi	r3,4
8112aba0:	10c00005 	stb	r3,0(r2)
8112aba4:	0005883a 	mov	r2,zero
8112aba8:	00005406 	br	8112acfc <OSMutexAccept+0x19c>
8112abac:	e0bffe17 	ldw	r2,-8(fp)
8112abb0:	10800003 	ldbu	r2,0(r2)
8112abb4:	10803fcc 	andi	r2,r2,255
8112abb8:	10800120 	cmpeqi	r2,r2,4
8112abbc:	1000051e 	bne	r2,zero,8112abd4 <OSMutexAccept+0x74>
8112abc0:	e0bfff17 	ldw	r2,-4(fp)
8112abc4:	00c00044 	movi	r3,1
8112abc8:	10c00005 	stb	r3,0(r2)
8112abcc:	0005883a 	mov	r2,zero
8112abd0:	00004a06 	br	8112acfc <OSMutexAccept+0x19c>
8112abd4:	d0a08303 	ldbu	r2,-32244(gp)
8112abd8:	10803fcc 	andi	r2,r2,255
8112abdc:	10000526 	beq	r2,zero,8112abf4 <OSMutexAccept+0x94>
8112abe0:	e0bfff17 	ldw	r2,-4(fp)
8112abe4:	00c00084 	movi	r3,2
8112abe8:	10c00005 	stb	r3,0(r2)
8112abec:	0005883a 	mov	r2,zero
8112abf0:	00004206 	br	8112acfc <OSMutexAccept+0x19c>
8112abf4:	0005303a 	rdctl	r2,status
8112abf8:	e0bffd15 	stw	r2,-12(fp)
8112abfc:	e0fffd17 	ldw	r3,-12(fp)
8112ac00:	00bfff84 	movi	r2,-2
8112ac04:	1884703a 	and	r2,r3,r2
8112ac08:	1001703a 	wrctl	status,r2
8112ac0c:	e0bffd17 	ldw	r2,-12(fp)
8112ac10:	e0bff815 	stw	r2,-32(fp)
8112ac14:	e0bffe17 	ldw	r2,-8(fp)
8112ac18:	1080020b 	ldhu	r2,8(r2)
8112ac1c:	10bfffcc 	andi	r2,r2,65535
8112ac20:	1004d23a 	srli	r2,r2,8
8112ac24:	e0bffa05 	stb	r2,-24(fp)
8112ac28:	e0bffe17 	ldw	r2,-8(fp)
8112ac2c:	1080020b 	ldhu	r2,8(r2)
8112ac30:	10bfffcc 	andi	r2,r2,65535
8112ac34:	10803fcc 	andi	r2,r2,255
8112ac38:	10803fd8 	cmpnei	r2,r2,255
8112ac3c:	1000281e 	bne	r2,zero,8112ace0 <OSMutexAccept+0x180>
8112ac40:	e0bffe17 	ldw	r2,-8(fp)
8112ac44:	10c0020b 	ldhu	r3,8(r2)
8112ac48:	00bfc004 	movi	r2,-256
8112ac4c:	1884703a 	and	r2,r3,r2
8112ac50:	1007883a 	mov	r3,r2
8112ac54:	e0bffe17 	ldw	r2,-8(fp)
8112ac58:	10c0020d 	sth	r3,8(r2)
8112ac5c:	e0bffe17 	ldw	r2,-8(fp)
8112ac60:	10c0020b 	ldhu	r3,8(r2)
8112ac64:	d0a08417 	ldw	r2,-32240(gp)
8112ac68:	10800c83 	ldbu	r2,50(r2)
8112ac6c:	10803fcc 	andi	r2,r2,255
8112ac70:	1884b03a 	or	r2,r3,r2
8112ac74:	1007883a 	mov	r3,r2
8112ac78:	e0bffe17 	ldw	r2,-8(fp)
8112ac7c:	10c0020d 	sth	r3,8(r2)
8112ac80:	d0e08417 	ldw	r3,-32240(gp)
8112ac84:	e0bffe17 	ldw	r2,-8(fp)
8112ac88:	10c00115 	stw	r3,4(r2)
8112ac8c:	d0a08417 	ldw	r2,-32240(gp)
8112ac90:	10800c83 	ldbu	r2,50(r2)
8112ac94:	10803fcc 	andi	r2,r2,255
8112ac98:	e0fffa03 	ldbu	r3,-24(fp)
8112ac9c:	18800836 	bltu	r3,r2,8112acc0 <OSMutexAccept+0x160>
8112aca0:	e0bff817 	ldw	r2,-32(fp)
8112aca4:	e0bff915 	stw	r2,-28(fp)
8112aca8:	e0bff917 	ldw	r2,-28(fp)
8112acac:	1001703a 	wrctl	status,r2
8112acb0:	e0bfff17 	ldw	r2,-4(fp)
8112acb4:	00c01e04 	movi	r3,120
8112acb8:	10c00005 	stb	r3,0(r2)
8112acbc:	00000606 	br	8112acd8 <OSMutexAccept+0x178>
8112acc0:	e0bff817 	ldw	r2,-32(fp)
8112acc4:	e0bffb15 	stw	r2,-20(fp)
8112acc8:	e0bffb17 	ldw	r2,-20(fp)
8112accc:	1001703a 	wrctl	status,r2
8112acd0:	e0bfff17 	ldw	r2,-4(fp)
8112acd4:	10000005 	stb	zero,0(r2)
8112acd8:	00800044 	movi	r2,1
8112acdc:	00000706 	br	8112acfc <OSMutexAccept+0x19c>
8112ace0:	e0bff817 	ldw	r2,-32(fp)
8112ace4:	e0bffc15 	stw	r2,-16(fp)
8112ace8:	e0bffc17 	ldw	r2,-16(fp)
8112acec:	1001703a 	wrctl	status,r2
8112acf0:	e0bfff17 	ldw	r2,-4(fp)
8112acf4:	10000005 	stb	zero,0(r2)
8112acf8:	0005883a 	mov	r2,zero
8112acfc:	e037883a 	mov	sp,fp
8112ad00:	df000017 	ldw	fp,0(sp)
8112ad04:	dec00104 	addi	sp,sp,4
8112ad08:	f800283a 	ret

8112ad0c <OSMutexCreate>:
8112ad0c:	defff604 	addi	sp,sp,-40
8112ad10:	de00012e 	bgeu	sp,et,8112ad18 <OSMutexCreate+0xc>
8112ad14:	003b68fa 	trap	3
8112ad18:	dfc00915 	stw	ra,36(sp)
8112ad1c:	df000815 	stw	fp,32(sp)
8112ad20:	df000804 	addi	fp,sp,32
8112ad24:	2005883a 	mov	r2,r4
8112ad28:	e17fff15 	stw	r5,-4(fp)
8112ad2c:	e0bffe05 	stb	r2,-8(fp)
8112ad30:	e03ff815 	stw	zero,-32(fp)
8112ad34:	e0bfff17 	ldw	r2,-4(fp)
8112ad38:	1000021e 	bne	r2,zero,8112ad44 <OSMutexCreate+0x38>
8112ad3c:	0005883a 	mov	r2,zero
8112ad40:	00006106 	br	8112aec8 <OSMutexCreate+0x1bc>
8112ad44:	e0bffe03 	ldbu	r2,-8(fp)
8112ad48:	10800a30 	cmpltui	r2,r2,40
8112ad4c:	1000051e 	bne	r2,zero,8112ad64 <OSMutexCreate+0x58>
8112ad50:	e0bfff17 	ldw	r2,-4(fp)
8112ad54:	00c00a84 	movi	r3,42
8112ad58:	10c00005 	stb	r3,0(r2)
8112ad5c:	0005883a 	mov	r2,zero
8112ad60:	00005906 	br	8112aec8 <OSMutexCreate+0x1bc>
8112ad64:	d0a08303 	ldbu	r2,-32244(gp)
8112ad68:	10803fcc 	andi	r2,r2,255
8112ad6c:	10000526 	beq	r2,zero,8112ad84 <OSMutexCreate+0x78>
8112ad70:	e0bfff17 	ldw	r2,-4(fp)
8112ad74:	00c00404 	movi	r3,16
8112ad78:	10c00005 	stb	r3,0(r2)
8112ad7c:	0005883a 	mov	r2,zero
8112ad80:	00005106 	br	8112aec8 <OSMutexCreate+0x1bc>
8112ad84:	0005303a 	rdctl	r2,status
8112ad88:	e0bffd15 	stw	r2,-12(fp)
8112ad8c:	e0fffd17 	ldw	r3,-12(fp)
8112ad90:	00bfff84 	movi	r2,-2
8112ad94:	1884703a 	and	r2,r3,r2
8112ad98:	1001703a 	wrctl	status,r2
8112ad9c:	e0bffd17 	ldw	r2,-12(fp)
8112ada0:	e0bff815 	stw	r2,-32(fp)
8112ada4:	e0fffe03 	ldbu	r3,-8(fp)
8112ada8:	00a04574 	movhi	r2,33045
8112adac:	1087e104 	addi	r2,r2,8068
8112adb0:	18c7883a 	add	r3,r3,r3
8112adb4:	18c7883a 	add	r3,r3,r3
8112adb8:	10c5883a 	add	r2,r2,r3
8112adbc:	10800017 	ldw	r2,0(r2)
8112adc0:	10000926 	beq	r2,zero,8112ade8 <OSMutexCreate+0xdc>
8112adc4:	e0bff817 	ldw	r2,-32(fp)
8112adc8:	e0bff915 	stw	r2,-28(fp)
8112adcc:	e0bff917 	ldw	r2,-28(fp)
8112add0:	1001703a 	wrctl	status,r2
8112add4:	e0bfff17 	ldw	r2,-4(fp)
8112add8:	00c00a04 	movi	r3,40
8112addc:	10c00005 	stb	r3,0(r2)
8112ade0:	0005883a 	mov	r2,zero
8112ade4:	00003806 	br	8112aec8 <OSMutexCreate+0x1bc>
8112ade8:	e0fffe03 	ldbu	r3,-8(fp)
8112adec:	00a04574 	movhi	r2,33045
8112adf0:	1087e104 	addi	r2,r2,8068
8112adf4:	18c7883a 	add	r3,r3,r3
8112adf8:	18c7883a 	add	r3,r3,r3
8112adfc:	10c5883a 	add	r2,r2,r3
8112ae00:	00c00044 	movi	r3,1
8112ae04:	10c00015 	stw	r3,0(r2)
8112ae08:	d0a08217 	ldw	r2,-32248(gp)
8112ae0c:	e0bffb15 	stw	r2,-20(fp)
8112ae10:	e0bffb17 	ldw	r2,-20(fp)
8112ae14:	1000101e 	bne	r2,zero,8112ae58 <OSMutexCreate+0x14c>
8112ae18:	e0fffe03 	ldbu	r3,-8(fp)
8112ae1c:	00a04574 	movhi	r2,33045
8112ae20:	1087e104 	addi	r2,r2,8068
8112ae24:	18c7883a 	add	r3,r3,r3
8112ae28:	18c7883a 	add	r3,r3,r3
8112ae2c:	10c5883a 	add	r2,r2,r3
8112ae30:	10000015 	stw	zero,0(r2)
8112ae34:	e0bff817 	ldw	r2,-32(fp)
8112ae38:	e0bffa15 	stw	r2,-24(fp)
8112ae3c:	e0bffa17 	ldw	r2,-24(fp)
8112ae40:	1001703a 	wrctl	status,r2
8112ae44:	e0bfff17 	ldw	r2,-4(fp)
8112ae48:	00c00104 	movi	r3,4
8112ae4c:	10c00005 	stb	r3,0(r2)
8112ae50:	e0bffb17 	ldw	r2,-20(fp)
8112ae54:	00001c06 	br	8112aec8 <OSMutexCreate+0x1bc>
8112ae58:	d0a08217 	ldw	r2,-32248(gp)
8112ae5c:	10800117 	ldw	r2,4(r2)
8112ae60:	d0a08215 	stw	r2,-32248(gp)
8112ae64:	e0bff817 	ldw	r2,-32(fp)
8112ae68:	e0bffc15 	stw	r2,-16(fp)
8112ae6c:	e0bffc17 	ldw	r2,-16(fp)
8112ae70:	1001703a 	wrctl	status,r2
8112ae74:	e0bffb17 	ldw	r2,-20(fp)
8112ae78:	00c00104 	movi	r3,4
8112ae7c:	10c00005 	stb	r3,0(r2)
8112ae80:	e0bffe03 	ldbu	r2,-8(fp)
8112ae84:	1004923a 	slli	r2,r2,8
8112ae88:	10803fd4 	ori	r2,r2,255
8112ae8c:	1007883a 	mov	r3,r2
8112ae90:	e0bffb17 	ldw	r2,-20(fp)
8112ae94:	10c0020d 	sth	r3,8(r2)
8112ae98:	e0bffb17 	ldw	r2,-20(fp)
8112ae9c:	10000115 	stw	zero,4(r2)
8112aea0:	e0bffb17 	ldw	r2,-20(fp)
8112aea4:	00c00fc4 	movi	r3,63
8112aea8:	10c00445 	stb	r3,17(r2)
8112aeac:	e0bffb17 	ldw	r2,-20(fp)
8112aeb0:	10000485 	stb	zero,18(r2)
8112aeb4:	e13ffb17 	ldw	r4,-20(fp)
8112aeb8:	1127e580 	call	81127e58 <OS_EventWaitListInit>
8112aebc:	e0bfff17 	ldw	r2,-4(fp)
8112aec0:	10000005 	stb	zero,0(r2)
8112aec4:	e0bffb17 	ldw	r2,-20(fp)
8112aec8:	e037883a 	mov	sp,fp
8112aecc:	dfc00117 	ldw	ra,4(sp)
8112aed0:	df000017 	ldw	fp,0(sp)
8112aed4:	dec00204 	addi	sp,sp,8
8112aed8:	f800283a 	ret

8112aedc <OSMutexDel>:
8112aedc:	defff004 	addi	sp,sp,-64
8112aee0:	de00012e 	bgeu	sp,et,8112aee8 <OSMutexDel+0xc>
8112aee4:	003b68fa 	trap	3
8112aee8:	dfc00f15 	stw	ra,60(sp)
8112aeec:	df000e15 	stw	fp,56(sp)
8112aef0:	df000e04 	addi	fp,sp,56
8112aef4:	e13ffd15 	stw	r4,-12(fp)
8112aef8:	2805883a 	mov	r2,r5
8112aefc:	e1bfff15 	stw	r6,-4(fp)
8112af00:	e0bffe05 	stb	r2,-8(fp)
8112af04:	e03ff415 	stw	zero,-48(fp)
8112af08:	e0bfff17 	ldw	r2,-4(fp)
8112af0c:	1000021e 	bne	r2,zero,8112af18 <OSMutexDel+0x3c>
8112af10:	e0bffd17 	ldw	r2,-12(fp)
8112af14:	0000ad06 	br	8112b1cc <OSMutexDel+0x2f0>
8112af18:	e0bffd17 	ldw	r2,-12(fp)
8112af1c:	1000051e 	bne	r2,zero,8112af34 <OSMutexDel+0x58>
8112af20:	e0bfff17 	ldw	r2,-4(fp)
8112af24:	00c00104 	movi	r3,4
8112af28:	10c00005 	stb	r3,0(r2)
8112af2c:	e0bffd17 	ldw	r2,-12(fp)
8112af30:	0000a606 	br	8112b1cc <OSMutexDel+0x2f0>
8112af34:	e0bffd17 	ldw	r2,-12(fp)
8112af38:	10800003 	ldbu	r2,0(r2)
8112af3c:	10803fcc 	andi	r2,r2,255
8112af40:	10800120 	cmpeqi	r2,r2,4
8112af44:	1000051e 	bne	r2,zero,8112af5c <OSMutexDel+0x80>
8112af48:	e0bfff17 	ldw	r2,-4(fp)
8112af4c:	00c00044 	movi	r3,1
8112af50:	10c00005 	stb	r3,0(r2)
8112af54:	e0bffd17 	ldw	r2,-12(fp)
8112af58:	00009c06 	br	8112b1cc <OSMutexDel+0x2f0>
8112af5c:	d0a08303 	ldbu	r2,-32244(gp)
8112af60:	10803fcc 	andi	r2,r2,255
8112af64:	10000526 	beq	r2,zero,8112af7c <OSMutexDel+0xa0>
8112af68:	e0bfff17 	ldw	r2,-4(fp)
8112af6c:	00c003c4 	movi	r3,15
8112af70:	10c00005 	stb	r3,0(r2)
8112af74:	e0bffd17 	ldw	r2,-12(fp)
8112af78:	00009406 	br	8112b1cc <OSMutexDel+0x2f0>
8112af7c:	0005303a 	rdctl	r2,status
8112af80:	e0bffc15 	stw	r2,-16(fp)
8112af84:	e0fffc17 	ldw	r3,-16(fp)
8112af88:	00bfff84 	movi	r2,-2
8112af8c:	1884703a 	and	r2,r3,r2
8112af90:	1001703a 	wrctl	status,r2
8112af94:	e0bffc17 	ldw	r2,-16(fp)
8112af98:	e0bff415 	stw	r2,-48(fp)
8112af9c:	e0bffd17 	ldw	r2,-12(fp)
8112afa0:	10800283 	ldbu	r2,10(r2)
8112afa4:	10803fcc 	andi	r2,r2,255
8112afa8:	10000326 	beq	r2,zero,8112afb8 <OSMutexDel+0xdc>
8112afac:	00800044 	movi	r2,1
8112afb0:	e0bff205 	stb	r2,-56(fp)
8112afb4:	00000106 	br	8112afbc <OSMutexDel+0xe0>
8112afb8:	e03ff205 	stb	zero,-56(fp)
8112afbc:	e0bffe03 	ldbu	r2,-8(fp)
8112afc0:	10000326 	beq	r2,zero,8112afd0 <OSMutexDel+0xf4>
8112afc4:	10800060 	cmpeqi	r2,r2,1
8112afc8:	10002f1e 	bne	r2,zero,8112b088 <OSMutexDel+0x1ac>
8112afcc:	00007406 	br	8112b1a0 <OSMutexDel+0x2c4>
8112afd0:	e0bff203 	ldbu	r2,-56(fp)
8112afd4:	1000221e 	bne	r2,zero,8112b060 <OSMutexDel+0x184>
8112afd8:	e0bffd17 	ldw	r2,-12(fp)
8112afdc:	00c00fc4 	movi	r3,63
8112afe0:	10c00445 	stb	r3,17(r2)
8112afe4:	e0bffd17 	ldw	r2,-12(fp)
8112afe8:	10000485 	stb	zero,18(r2)
8112afec:	e0bffd17 	ldw	r2,-12(fp)
8112aff0:	1080020b 	ldhu	r2,8(r2)
8112aff4:	10bfffcc 	andi	r2,r2,65535
8112aff8:	1004d23a 	srli	r2,r2,8
8112affc:	e0bff605 	stb	r2,-40(fp)
8112b000:	e0fff603 	ldbu	r3,-40(fp)
8112b004:	00a04574 	movhi	r2,33045
8112b008:	1087e104 	addi	r2,r2,8068
8112b00c:	18c7883a 	add	r3,r3,r3
8112b010:	18c7883a 	add	r3,r3,r3
8112b014:	10c5883a 	add	r2,r2,r3
8112b018:	10000015 	stw	zero,0(r2)
8112b01c:	e0bffd17 	ldw	r2,-12(fp)
8112b020:	10000005 	stb	zero,0(r2)
8112b024:	d0e08217 	ldw	r3,-32248(gp)
8112b028:	e0bffd17 	ldw	r2,-12(fp)
8112b02c:	10c00115 	stw	r3,4(r2)
8112b030:	e0bffd17 	ldw	r2,-12(fp)
8112b034:	1000020d 	sth	zero,8(r2)
8112b038:	e0bffd17 	ldw	r2,-12(fp)
8112b03c:	d0a08215 	stw	r2,-32248(gp)
8112b040:	e0bff417 	ldw	r2,-48(fp)
8112b044:	e0bff515 	stw	r2,-44(fp)
8112b048:	e0bff517 	ldw	r2,-44(fp)
8112b04c:	1001703a 	wrctl	status,r2
8112b050:	e0bfff17 	ldw	r2,-4(fp)
8112b054:	10000005 	stb	zero,0(r2)
8112b058:	e03ff315 	stw	zero,-52(fp)
8112b05c:	00005a06 	br	8112b1c8 <OSMutexDel+0x2ec>
8112b060:	e0bff417 	ldw	r2,-48(fp)
8112b064:	e0bff715 	stw	r2,-36(fp)
8112b068:	e0bff717 	ldw	r2,-36(fp)
8112b06c:	1001703a 	wrctl	status,r2
8112b070:	e0bfff17 	ldw	r2,-4(fp)
8112b074:	00c01244 	movi	r3,73
8112b078:	10c00005 	stb	r3,0(r2)
8112b07c:	e0bffd17 	ldw	r2,-12(fp)
8112b080:	e0bff315 	stw	r2,-52(fp)
8112b084:	00005006 	br	8112b1c8 <OSMutexDel+0x2ec>
8112b088:	e0bffd17 	ldw	r2,-12(fp)
8112b08c:	1080020b 	ldhu	r2,8(r2)
8112b090:	10bfffcc 	andi	r2,r2,65535
8112b094:	1004d23a 	srli	r2,r2,8
8112b098:	e0bff605 	stb	r2,-40(fp)
8112b09c:	e0bffd17 	ldw	r2,-12(fp)
8112b0a0:	1080020b 	ldhu	r2,8(r2)
8112b0a4:	e0bff905 	stb	r2,-28(fp)
8112b0a8:	e0bffd17 	ldw	r2,-12(fp)
8112b0ac:	10800117 	ldw	r2,4(r2)
8112b0b0:	e0bffa15 	stw	r2,-24(fp)
8112b0b4:	e0bffa17 	ldw	r2,-24(fp)
8112b0b8:	10000f26 	beq	r2,zero,8112b0f8 <OSMutexDel+0x21c>
8112b0bc:	e0bffa17 	ldw	r2,-24(fp)
8112b0c0:	10800c83 	ldbu	r2,50(r2)
8112b0c4:	10c03fcc 	andi	r3,r2,255
8112b0c8:	e0bff603 	ldbu	r2,-40(fp)
8112b0cc:	18800a1e 	bne	r3,r2,8112b0f8 <OSMutexDel+0x21c>
8112b0d0:	e0bff903 	ldbu	r2,-28(fp)
8112b0d4:	100b883a 	mov	r5,r2
8112b0d8:	e13ffa17 	ldw	r4,-24(fp)
8112b0dc:	112bb180 	call	8112bb18 <OSMutex_RdyAtPrio>
8112b0e0:	00000506 	br	8112b0f8 <OSMutexDel+0x21c>
8112b0e4:	000f883a 	mov	r7,zero
8112b0e8:	01800404 	movi	r6,16
8112b0ec:	000b883a 	mov	r5,zero
8112b0f0:	e13ffd17 	ldw	r4,-12(fp)
8112b0f4:	11278800 	call	81127880 <OS_EventTaskRdy>
8112b0f8:	e0bffd17 	ldw	r2,-12(fp)
8112b0fc:	10800283 	ldbu	r2,10(r2)
8112b100:	10803fcc 	andi	r2,r2,255
8112b104:	103ff71e 	bne	r2,zero,8112b0e4 <__reset+0xfb10b0e4>
8112b108:	e0bffd17 	ldw	r2,-12(fp)
8112b10c:	00c00fc4 	movi	r3,63
8112b110:	10c00445 	stb	r3,17(r2)
8112b114:	e0bffd17 	ldw	r2,-12(fp)
8112b118:	10000485 	stb	zero,18(r2)
8112b11c:	e0bffd17 	ldw	r2,-12(fp)
8112b120:	1080020b 	ldhu	r2,8(r2)
8112b124:	10bfffcc 	andi	r2,r2,65535
8112b128:	1004d23a 	srli	r2,r2,8
8112b12c:	e0bff605 	stb	r2,-40(fp)
8112b130:	e0fff603 	ldbu	r3,-40(fp)
8112b134:	00a04574 	movhi	r2,33045
8112b138:	1087e104 	addi	r2,r2,8068
8112b13c:	18c7883a 	add	r3,r3,r3
8112b140:	18c7883a 	add	r3,r3,r3
8112b144:	10c5883a 	add	r2,r2,r3
8112b148:	10000015 	stw	zero,0(r2)
8112b14c:	e0bffd17 	ldw	r2,-12(fp)
8112b150:	10000005 	stb	zero,0(r2)
8112b154:	d0e08217 	ldw	r3,-32248(gp)
8112b158:	e0bffd17 	ldw	r2,-12(fp)
8112b15c:	10c00115 	stw	r3,4(r2)
8112b160:	e0bffd17 	ldw	r2,-12(fp)
8112b164:	1000020d 	sth	zero,8(r2)
8112b168:	e0bffd17 	ldw	r2,-12(fp)
8112b16c:	d0a08215 	stw	r2,-32248(gp)
8112b170:	e0bff417 	ldw	r2,-48(fp)
8112b174:	e0bff815 	stw	r2,-32(fp)
8112b178:	e0bff817 	ldw	r2,-32(fp)
8112b17c:	1001703a 	wrctl	status,r2
8112b180:	e0bff203 	ldbu	r2,-56(fp)
8112b184:	10800058 	cmpnei	r2,r2,1
8112b188:	1000011e 	bne	r2,zero,8112b190 <OSMutexDel+0x2b4>
8112b18c:	112833c0 	call	8112833c <OS_Sched>
8112b190:	e0bfff17 	ldw	r2,-4(fp)
8112b194:	10000005 	stb	zero,0(r2)
8112b198:	e03ff315 	stw	zero,-52(fp)
8112b19c:	00000a06 	br	8112b1c8 <OSMutexDel+0x2ec>
8112b1a0:	e0bff417 	ldw	r2,-48(fp)
8112b1a4:	e0bffb15 	stw	r2,-20(fp)
8112b1a8:	e0bffb17 	ldw	r2,-20(fp)
8112b1ac:	1001703a 	wrctl	status,r2
8112b1b0:	e0bfff17 	ldw	r2,-4(fp)
8112b1b4:	00c001c4 	movi	r3,7
8112b1b8:	10c00005 	stb	r3,0(r2)
8112b1bc:	e0bffd17 	ldw	r2,-12(fp)
8112b1c0:	e0bff315 	stw	r2,-52(fp)
8112b1c4:	0001883a 	nop
8112b1c8:	e0bff317 	ldw	r2,-52(fp)
8112b1cc:	e037883a 	mov	sp,fp
8112b1d0:	dfc00117 	ldw	ra,4(sp)
8112b1d4:	df000017 	ldw	fp,0(sp)
8112b1d8:	dec00204 	addi	sp,sp,8
8112b1dc:	f800283a 	ret

8112b1e0 <OSMutexPend>:
8112b1e0:	deffee04 	addi	sp,sp,-72
8112b1e4:	de00012e 	bgeu	sp,et,8112b1ec <OSMutexPend+0xc>
8112b1e8:	003b68fa 	trap	3
8112b1ec:	dfc01115 	stw	ra,68(sp)
8112b1f0:	df001015 	stw	fp,64(sp)
8112b1f4:	df001004 	addi	fp,sp,64
8112b1f8:	e13ffd15 	stw	r4,-12(fp)
8112b1fc:	2805883a 	mov	r2,r5
8112b200:	e1bfff15 	stw	r6,-4(fp)
8112b204:	e0bffe0d 	sth	r2,-8(fp)
8112b208:	e03ff115 	stw	zero,-60(fp)
8112b20c:	e0bfff17 	ldw	r2,-4(fp)
8112b210:	10015626 	beq	r2,zero,8112b76c <OSMutexPend+0x58c>
8112b214:	e0bffd17 	ldw	r2,-12(fp)
8112b218:	1000041e 	bne	r2,zero,8112b22c <OSMutexPend+0x4c>
8112b21c:	e0bfff17 	ldw	r2,-4(fp)
8112b220:	00c00104 	movi	r3,4
8112b224:	10c00005 	stb	r3,0(r2)
8112b228:	00015106 	br	8112b770 <OSMutexPend+0x590>
8112b22c:	e0bffd17 	ldw	r2,-12(fp)
8112b230:	10800003 	ldbu	r2,0(r2)
8112b234:	10803fcc 	andi	r2,r2,255
8112b238:	10800120 	cmpeqi	r2,r2,4
8112b23c:	1000041e 	bne	r2,zero,8112b250 <OSMutexPend+0x70>
8112b240:	e0bfff17 	ldw	r2,-4(fp)
8112b244:	00c00044 	movi	r3,1
8112b248:	10c00005 	stb	r3,0(r2)
8112b24c:	00014806 	br	8112b770 <OSMutexPend+0x590>
8112b250:	d0a08303 	ldbu	r2,-32244(gp)
8112b254:	10803fcc 	andi	r2,r2,255
8112b258:	10000426 	beq	r2,zero,8112b26c <OSMutexPend+0x8c>
8112b25c:	e0bfff17 	ldw	r2,-4(fp)
8112b260:	00c00084 	movi	r3,2
8112b264:	10c00005 	stb	r3,0(r2)
8112b268:	00014106 	br	8112b770 <OSMutexPend+0x590>
8112b26c:	d0a07103 	ldbu	r2,-32316(gp)
8112b270:	10803fcc 	andi	r2,r2,255
8112b274:	10000426 	beq	r2,zero,8112b288 <OSMutexPend+0xa8>
8112b278:	e0bfff17 	ldw	r2,-4(fp)
8112b27c:	00c00344 	movi	r3,13
8112b280:	10c00005 	stb	r3,0(r2)
8112b284:	00013a06 	br	8112b770 <OSMutexPend+0x590>
8112b288:	0005303a 	rdctl	r2,status
8112b28c:	e0bffc15 	stw	r2,-16(fp)
8112b290:	e0fffc17 	ldw	r3,-16(fp)
8112b294:	00bfff84 	movi	r2,-2
8112b298:	1884703a 	and	r2,r3,r2
8112b29c:	1001703a 	wrctl	status,r2
8112b2a0:	e0bffc17 	ldw	r2,-16(fp)
8112b2a4:	e0bff115 	stw	r2,-60(fp)
8112b2a8:	e0bffd17 	ldw	r2,-12(fp)
8112b2ac:	1080020b 	ldhu	r2,8(r2)
8112b2b0:	10bfffcc 	andi	r2,r2,65535
8112b2b4:	1004d23a 	srli	r2,r2,8
8112b2b8:	e0bff305 	stb	r2,-52(fp)
8112b2bc:	e0bffd17 	ldw	r2,-12(fp)
8112b2c0:	1080020b 	ldhu	r2,8(r2)
8112b2c4:	10803fcc 	andi	r2,r2,255
8112b2c8:	10803fd8 	cmpnei	r2,r2,255
8112b2cc:	1000271e 	bne	r2,zero,8112b36c <OSMutexPend+0x18c>
8112b2d0:	e0bffd17 	ldw	r2,-12(fp)
8112b2d4:	10c0020b 	ldhu	r3,8(r2)
8112b2d8:	00bfc004 	movi	r2,-256
8112b2dc:	1884703a 	and	r2,r3,r2
8112b2e0:	1007883a 	mov	r3,r2
8112b2e4:	e0bffd17 	ldw	r2,-12(fp)
8112b2e8:	10c0020d 	sth	r3,8(r2)
8112b2ec:	e0bffd17 	ldw	r2,-12(fp)
8112b2f0:	10c0020b 	ldhu	r3,8(r2)
8112b2f4:	d0a08417 	ldw	r2,-32240(gp)
8112b2f8:	10800c83 	ldbu	r2,50(r2)
8112b2fc:	10803fcc 	andi	r2,r2,255
8112b300:	1884b03a 	or	r2,r3,r2
8112b304:	1007883a 	mov	r3,r2
8112b308:	e0bffd17 	ldw	r2,-12(fp)
8112b30c:	10c0020d 	sth	r3,8(r2)
8112b310:	d0e08417 	ldw	r3,-32240(gp)
8112b314:	e0bffd17 	ldw	r2,-12(fp)
8112b318:	10c00115 	stw	r3,4(r2)
8112b31c:	d0a08417 	ldw	r2,-32240(gp)
8112b320:	10800c83 	ldbu	r2,50(r2)
8112b324:	10803fcc 	andi	r2,r2,255
8112b328:	e0fff303 	ldbu	r3,-52(fp)
8112b32c:	18800836 	bltu	r3,r2,8112b350 <OSMutexPend+0x170>
8112b330:	e0bff117 	ldw	r2,-60(fp)
8112b334:	e0bff215 	stw	r2,-56(fp)
8112b338:	e0bff217 	ldw	r2,-56(fp)
8112b33c:	1001703a 	wrctl	status,r2
8112b340:	e0bfff17 	ldw	r2,-4(fp)
8112b344:	00c01e04 	movi	r3,120
8112b348:	10c00005 	stb	r3,0(r2)
8112b34c:	00010806 	br	8112b770 <OSMutexPend+0x590>
8112b350:	e0bff117 	ldw	r2,-60(fp)
8112b354:	e0bff415 	stw	r2,-48(fp)
8112b358:	e0bff417 	ldw	r2,-48(fp)
8112b35c:	1001703a 	wrctl	status,r2
8112b360:	e0bfff17 	ldw	r2,-4(fp)
8112b364:	10000005 	stb	zero,0(r2)
8112b368:	00010106 	br	8112b770 <OSMutexPend+0x590>
8112b36c:	e0bffd17 	ldw	r2,-12(fp)
8112b370:	1080020b 	ldhu	r2,8(r2)
8112b374:	e0bff605 	stb	r2,-40(fp)
8112b378:	e0bffd17 	ldw	r2,-12(fp)
8112b37c:	10800117 	ldw	r2,4(r2)
8112b380:	e0bff715 	stw	r2,-36(fp)
8112b384:	e0bff717 	ldw	r2,-36(fp)
8112b388:	10800c83 	ldbu	r2,50(r2)
8112b38c:	10803fcc 	andi	r2,r2,255
8112b390:	e0fff303 	ldbu	r3,-52(fp)
8112b394:	1880b92e 	bgeu	r3,r2,8112b67c <OSMutexPend+0x49c>
8112b398:	d0a08417 	ldw	r2,-32240(gp)
8112b39c:	10800c83 	ldbu	r2,50(r2)
8112b3a0:	10c03fcc 	andi	r3,r2,255
8112b3a4:	e0bff603 	ldbu	r2,-40(fp)
8112b3a8:	1880b42e 	bgeu	r3,r2,8112b67c <OSMutexPend+0x49c>
8112b3ac:	e0bff717 	ldw	r2,-36(fp)
8112b3b0:	10800d03 	ldbu	r2,52(r2)
8112b3b4:	e0bff805 	stb	r2,-32(fp)
8112b3b8:	e0fff803 	ldbu	r3,-32(fp)
8112b3bc:	d0a08044 	addi	r2,gp,-32255
8112b3c0:	1885883a 	add	r2,r3,r2
8112b3c4:	10c00003 	ldbu	r3,0(r2)
8112b3c8:	e0bff717 	ldw	r2,-36(fp)
8112b3cc:	10800d43 	ldbu	r2,53(r2)
8112b3d0:	1884703a 	and	r2,r3,r2
8112b3d4:	10803fcc 	andi	r2,r2,255
8112b3d8:	10001e26 	beq	r2,zero,8112b454 <OSMutexPend+0x274>
8112b3dc:	e0fff803 	ldbu	r3,-32(fp)
8112b3e0:	e13ff803 	ldbu	r4,-32(fp)
8112b3e4:	d0a08044 	addi	r2,gp,-32255
8112b3e8:	2085883a 	add	r2,r4,r2
8112b3ec:	10800003 	ldbu	r2,0(r2)
8112b3f0:	1009883a 	mov	r4,r2
8112b3f4:	e0bff717 	ldw	r2,-36(fp)
8112b3f8:	10800d43 	ldbu	r2,53(r2)
8112b3fc:	0084303a 	nor	r2,zero,r2
8112b400:	2084703a 	and	r2,r4,r2
8112b404:	1009883a 	mov	r4,r2
8112b408:	d0a08044 	addi	r2,gp,-32255
8112b40c:	1885883a 	add	r2,r3,r2
8112b410:	11000005 	stb	r4,0(r2)
8112b414:	e0fff803 	ldbu	r3,-32(fp)
8112b418:	d0a08044 	addi	r2,gp,-32255
8112b41c:	1885883a 	add	r2,r3,r2
8112b420:	10800003 	ldbu	r2,0(r2)
8112b424:	10803fcc 	andi	r2,r2,255
8112b428:	1000071e 	bne	r2,zero,8112b448 <OSMutexPend+0x268>
8112b42c:	e0bff717 	ldw	r2,-36(fp)
8112b430:	10800d83 	ldbu	r2,54(r2)
8112b434:	0084303a 	nor	r2,zero,r2
8112b438:	1007883a 	mov	r3,r2
8112b43c:	d0a08003 	ldbu	r2,-32256(gp)
8112b440:	1884703a 	and	r2,r3,r2
8112b444:	d0a08005 	stb	r2,-32256(gp)
8112b448:	00800044 	movi	r2,1
8112b44c:	e0bff005 	stb	r2,-64(fp)
8112b450:	00002a06 	br	8112b4fc <OSMutexPend+0x31c>
8112b454:	e0bff717 	ldw	r2,-36(fp)
8112b458:	10800717 	ldw	r2,28(r2)
8112b45c:	e0bff915 	stw	r2,-28(fp)
8112b460:	e0bff917 	ldw	r2,-28(fp)
8112b464:	10002426 	beq	r2,zero,8112b4f8 <OSMutexPend+0x318>
8112b468:	e0bff717 	ldw	r2,-36(fp)
8112b46c:	10800d03 	ldbu	r2,52(r2)
8112b470:	10803fcc 	andi	r2,r2,255
8112b474:	e0fff717 	ldw	r3,-36(fp)
8112b478:	18c00d03 	ldbu	r3,52(r3)
8112b47c:	18c03fcc 	andi	r3,r3,255
8112b480:	e13ff917 	ldw	r4,-28(fp)
8112b484:	20c7883a 	add	r3,r4,r3
8112b488:	18c002c4 	addi	r3,r3,11
8112b48c:	18c00003 	ldbu	r3,0(r3)
8112b490:	1809883a 	mov	r4,r3
8112b494:	e0fff717 	ldw	r3,-36(fp)
8112b498:	18c00d43 	ldbu	r3,53(r3)
8112b49c:	00c6303a 	nor	r3,zero,r3
8112b4a0:	20c6703a 	and	r3,r4,r3
8112b4a4:	1809883a 	mov	r4,r3
8112b4a8:	e0fff917 	ldw	r3,-28(fp)
8112b4ac:	1887883a 	add	r3,r3,r2
8112b4b0:	18c002c4 	addi	r3,r3,11
8112b4b4:	19000005 	stb	r4,0(r3)
8112b4b8:	e0fff917 	ldw	r3,-28(fp)
8112b4bc:	1885883a 	add	r2,r3,r2
8112b4c0:	108002c4 	addi	r2,r2,11
8112b4c4:	10800003 	ldbu	r2,0(r2)
8112b4c8:	10803fcc 	andi	r2,r2,255
8112b4cc:	10000a1e 	bne	r2,zero,8112b4f8 <OSMutexPend+0x318>
8112b4d0:	e0bff917 	ldw	r2,-28(fp)
8112b4d4:	10800283 	ldbu	r2,10(r2)
8112b4d8:	1007883a 	mov	r3,r2
8112b4dc:	e0bff717 	ldw	r2,-36(fp)
8112b4e0:	10800d83 	ldbu	r2,54(r2)
8112b4e4:	0084303a 	nor	r2,zero,r2
8112b4e8:	1884703a 	and	r2,r3,r2
8112b4ec:	1007883a 	mov	r3,r2
8112b4f0:	e0bff917 	ldw	r2,-28(fp)
8112b4f4:	10c00285 	stb	r3,10(r2)
8112b4f8:	e03ff005 	stb	zero,-64(fp)
8112b4fc:	e0bff717 	ldw	r2,-36(fp)
8112b500:	e0fff303 	ldbu	r3,-52(fp)
8112b504:	10c00c85 	stb	r3,50(r2)
8112b508:	e0bff717 	ldw	r2,-36(fp)
8112b50c:	10800c83 	ldbu	r2,50(r2)
8112b510:	10803fcc 	andi	r2,r2,255
8112b514:	1004d0fa 	srli	r2,r2,3
8112b518:	1007883a 	mov	r3,r2
8112b51c:	e0bff717 	ldw	r2,-36(fp)
8112b520:	10c00d05 	stb	r3,52(r2)
8112b524:	e0bff717 	ldw	r2,-36(fp)
8112b528:	10800c83 	ldbu	r2,50(r2)
8112b52c:	108001cc 	andi	r2,r2,7
8112b530:	1007883a 	mov	r3,r2
8112b534:	e0bff717 	ldw	r2,-36(fp)
8112b538:	10c00cc5 	stb	r3,51(r2)
8112b53c:	e0bff717 	ldw	r2,-36(fp)
8112b540:	10800d03 	ldbu	r2,52(r2)
8112b544:	10803fcc 	andi	r2,r2,255
8112b548:	00c00044 	movi	r3,1
8112b54c:	1884983a 	sll	r2,r3,r2
8112b550:	1007883a 	mov	r3,r2
8112b554:	e0bff717 	ldw	r2,-36(fp)
8112b558:	10c00d85 	stb	r3,54(r2)
8112b55c:	e0bff717 	ldw	r2,-36(fp)
8112b560:	10800cc3 	ldbu	r2,51(r2)
8112b564:	10803fcc 	andi	r2,r2,255
8112b568:	00c00044 	movi	r3,1
8112b56c:	1884983a 	sll	r2,r3,r2
8112b570:	1007883a 	mov	r3,r2
8112b574:	e0bff717 	ldw	r2,-36(fp)
8112b578:	10c00d45 	stb	r3,53(r2)
8112b57c:	e0bff003 	ldbu	r2,-64(fp)
8112b580:	10800058 	cmpnei	r2,r2,1
8112b584:	1000161e 	bne	r2,zero,8112b5e0 <OSMutexPend+0x400>
8112b588:	e0bff717 	ldw	r2,-36(fp)
8112b58c:	10c00d83 	ldbu	r3,54(r2)
8112b590:	d0a08003 	ldbu	r2,-32256(gp)
8112b594:	1884b03a 	or	r2,r3,r2
8112b598:	d0a08005 	stb	r2,-32256(gp)
8112b59c:	e0bff717 	ldw	r2,-36(fp)
8112b5a0:	10800d03 	ldbu	r2,52(r2)
8112b5a4:	10c03fcc 	andi	r3,r2,255
8112b5a8:	e0bff717 	ldw	r2,-36(fp)
8112b5ac:	10800d03 	ldbu	r2,52(r2)
8112b5b0:	11003fcc 	andi	r4,r2,255
8112b5b4:	d0a08044 	addi	r2,gp,-32255
8112b5b8:	2085883a 	add	r2,r4,r2
8112b5bc:	11000003 	ldbu	r4,0(r2)
8112b5c0:	e0bff717 	ldw	r2,-36(fp)
8112b5c4:	10800d43 	ldbu	r2,53(r2)
8112b5c8:	2084b03a 	or	r2,r4,r2
8112b5cc:	1009883a 	mov	r4,r2
8112b5d0:	d0a08044 	addi	r2,gp,-32255
8112b5d4:	1885883a 	add	r2,r3,r2
8112b5d8:	11000005 	stb	r4,0(r2)
8112b5dc:	00001f06 	br	8112b65c <OSMutexPend+0x47c>
8112b5e0:	e0bff717 	ldw	r2,-36(fp)
8112b5e4:	10800717 	ldw	r2,28(r2)
8112b5e8:	e0bff915 	stw	r2,-28(fp)
8112b5ec:	e0bff917 	ldw	r2,-28(fp)
8112b5f0:	10001a26 	beq	r2,zero,8112b65c <OSMutexPend+0x47c>
8112b5f4:	e0bff917 	ldw	r2,-28(fp)
8112b5f8:	10c00283 	ldbu	r3,10(r2)
8112b5fc:	e0bff717 	ldw	r2,-36(fp)
8112b600:	10800d83 	ldbu	r2,54(r2)
8112b604:	1884b03a 	or	r2,r3,r2
8112b608:	1007883a 	mov	r3,r2
8112b60c:	e0bff917 	ldw	r2,-28(fp)
8112b610:	10c00285 	stb	r3,10(r2)
8112b614:	e0bff717 	ldw	r2,-36(fp)
8112b618:	10800d03 	ldbu	r2,52(r2)
8112b61c:	10803fcc 	andi	r2,r2,255
8112b620:	e0fff717 	ldw	r3,-36(fp)
8112b624:	18c00d03 	ldbu	r3,52(r3)
8112b628:	18c03fcc 	andi	r3,r3,255
8112b62c:	e13ff917 	ldw	r4,-28(fp)
8112b630:	20c7883a 	add	r3,r4,r3
8112b634:	18c002c4 	addi	r3,r3,11
8112b638:	19000003 	ldbu	r4,0(r3)
8112b63c:	e0fff717 	ldw	r3,-36(fp)
8112b640:	18c00d43 	ldbu	r3,53(r3)
8112b644:	20c6b03a 	or	r3,r4,r3
8112b648:	1809883a 	mov	r4,r3
8112b64c:	e0fff917 	ldw	r3,-28(fp)
8112b650:	1885883a 	add	r2,r3,r2
8112b654:	108002c4 	addi	r2,r2,11
8112b658:	11000005 	stb	r4,0(r2)
8112b65c:	e0fff303 	ldbu	r3,-52(fp)
8112b660:	00a04574 	movhi	r2,33045
8112b664:	1087e104 	addi	r2,r2,8068
8112b668:	18c7883a 	add	r3,r3,r3
8112b66c:	18c7883a 	add	r3,r3,r3
8112b670:	10c5883a 	add	r2,r2,r3
8112b674:	e0fff717 	ldw	r3,-36(fp)
8112b678:	10c00015 	stw	r3,0(r2)
8112b67c:	d0a08417 	ldw	r2,-32240(gp)
8112b680:	d0e08417 	ldw	r3,-32240(gp)
8112b684:	18c00c03 	ldbu	r3,48(r3)
8112b688:	18c00414 	ori	r3,r3,16
8112b68c:	10c00c05 	stb	r3,48(r2)
8112b690:	d0a08417 	ldw	r2,-32240(gp)
8112b694:	10000c45 	stb	zero,49(r2)
8112b698:	d0a08417 	ldw	r2,-32240(gp)
8112b69c:	e0fffe0b 	ldhu	r3,-8(fp)
8112b6a0:	10c00b8d 	sth	r3,46(r2)
8112b6a4:	e13ffd17 	ldw	r4,-12(fp)
8112b6a8:	1127a200 	call	81127a20 <OS_EventTaskWait>
8112b6ac:	e0bff117 	ldw	r2,-60(fp)
8112b6b0:	e0bffb15 	stw	r2,-20(fp)
8112b6b4:	e0bffb17 	ldw	r2,-20(fp)
8112b6b8:	1001703a 	wrctl	status,r2
8112b6bc:	112833c0 	call	8112833c <OS_Sched>
8112b6c0:	0005303a 	rdctl	r2,status
8112b6c4:	e0bff515 	stw	r2,-44(fp)
8112b6c8:	e0fff517 	ldw	r3,-44(fp)
8112b6cc:	00bfff84 	movi	r2,-2
8112b6d0:	1884703a 	and	r2,r3,r2
8112b6d4:	1001703a 	wrctl	status,r2
8112b6d8:	e0bff517 	ldw	r2,-44(fp)
8112b6dc:	e0bff115 	stw	r2,-60(fp)
8112b6e0:	d0a08417 	ldw	r2,-32240(gp)
8112b6e4:	10800c43 	ldbu	r2,49(r2)
8112b6e8:	10803fcc 	andi	r2,r2,255
8112b6ec:	10000326 	beq	r2,zero,8112b6fc <OSMutexPend+0x51c>
8112b6f0:	108000a0 	cmpeqi	r2,r2,2
8112b6f4:	1000041e 	bne	r2,zero,8112b708 <OSMutexPend+0x528>
8112b6f8:	00000706 	br	8112b718 <OSMutexPend+0x538>
8112b6fc:	e0bfff17 	ldw	r2,-4(fp)
8112b700:	10000005 	stb	zero,0(r2)
8112b704:	00000c06 	br	8112b738 <OSMutexPend+0x558>
8112b708:	e0bfff17 	ldw	r2,-4(fp)
8112b70c:	00c00384 	movi	r3,14
8112b710:	10c00005 	stb	r3,0(r2)
8112b714:	00000806 	br	8112b738 <OSMutexPend+0x558>
8112b718:	d0a08417 	ldw	r2,-32240(gp)
8112b71c:	e17ffd17 	ldw	r5,-12(fp)
8112b720:	1009883a 	mov	r4,r2
8112b724:	1127c900 	call	81127c90 <OS_EventTaskRemove>
8112b728:	e0bfff17 	ldw	r2,-4(fp)
8112b72c:	00c00284 	movi	r3,10
8112b730:	10c00005 	stb	r3,0(r2)
8112b734:	0001883a 	nop
8112b738:	d0a08417 	ldw	r2,-32240(gp)
8112b73c:	10000c05 	stb	zero,48(r2)
8112b740:	d0a08417 	ldw	r2,-32240(gp)
8112b744:	10000c45 	stb	zero,49(r2)
8112b748:	d0a08417 	ldw	r2,-32240(gp)
8112b74c:	10000715 	stw	zero,28(r2)
8112b750:	d0a08417 	ldw	r2,-32240(gp)
8112b754:	10000815 	stw	zero,32(r2)
8112b758:	e0bff117 	ldw	r2,-60(fp)
8112b75c:	e0bffa15 	stw	r2,-24(fp)
8112b760:	e0bffa17 	ldw	r2,-24(fp)
8112b764:	1001703a 	wrctl	status,r2
8112b768:	00000106 	br	8112b770 <OSMutexPend+0x590>
8112b76c:	0001883a 	nop
8112b770:	e037883a 	mov	sp,fp
8112b774:	dfc00117 	ldw	ra,4(sp)
8112b778:	df000017 	ldw	fp,0(sp)
8112b77c:	dec00204 	addi	sp,sp,8
8112b780:	f800283a 	ret

8112b784 <OSMutexPost>:
8112b784:	defff604 	addi	sp,sp,-40
8112b788:	de00012e 	bgeu	sp,et,8112b790 <OSMutexPost+0xc>
8112b78c:	003b68fa 	trap	3
8112b790:	dfc00915 	stw	ra,36(sp)
8112b794:	df000815 	stw	fp,32(sp)
8112b798:	df000804 	addi	fp,sp,32
8112b79c:	e13fff15 	stw	r4,-4(fp)
8112b7a0:	e03ff815 	stw	zero,-32(fp)
8112b7a4:	d0a08303 	ldbu	r2,-32244(gp)
8112b7a8:	10803fcc 	andi	r2,r2,255
8112b7ac:	10000226 	beq	r2,zero,8112b7b8 <OSMutexPost+0x34>
8112b7b0:	00800144 	movi	r2,5
8112b7b4:	00007606 	br	8112b990 <OSMutexPost+0x20c>
8112b7b8:	e0bfff17 	ldw	r2,-4(fp)
8112b7bc:	1000021e 	bne	r2,zero,8112b7c8 <OSMutexPost+0x44>
8112b7c0:	00800104 	movi	r2,4
8112b7c4:	00007206 	br	8112b990 <OSMutexPost+0x20c>
8112b7c8:	e0bfff17 	ldw	r2,-4(fp)
8112b7cc:	10800003 	ldbu	r2,0(r2)
8112b7d0:	10803fcc 	andi	r2,r2,255
8112b7d4:	10800120 	cmpeqi	r2,r2,4
8112b7d8:	1000021e 	bne	r2,zero,8112b7e4 <OSMutexPost+0x60>
8112b7dc:	00800044 	movi	r2,1
8112b7e0:	00006b06 	br	8112b990 <OSMutexPost+0x20c>
8112b7e4:	0005303a 	rdctl	r2,status
8112b7e8:	e0bffe15 	stw	r2,-8(fp)
8112b7ec:	e0fffe17 	ldw	r3,-8(fp)
8112b7f0:	00bfff84 	movi	r2,-2
8112b7f4:	1884703a 	and	r2,r3,r2
8112b7f8:	1001703a 	wrctl	status,r2
8112b7fc:	e0bffe17 	ldw	r2,-8(fp)
8112b800:	e0bff815 	stw	r2,-32(fp)
8112b804:	e0bfff17 	ldw	r2,-4(fp)
8112b808:	1080020b 	ldhu	r2,8(r2)
8112b80c:	10bfffcc 	andi	r2,r2,65535
8112b810:	1004d23a 	srli	r2,r2,8
8112b814:	e0bffa05 	stb	r2,-24(fp)
8112b818:	e0bfff17 	ldw	r2,-4(fp)
8112b81c:	1080020b 	ldhu	r2,8(r2)
8112b820:	e0bffa45 	stb	r2,-23(fp)
8112b824:	e0bfff17 	ldw	r2,-4(fp)
8112b828:	10c00117 	ldw	r3,4(r2)
8112b82c:	d0a08417 	ldw	r2,-32240(gp)
8112b830:	18800626 	beq	r3,r2,8112b84c <OSMutexPost+0xc8>
8112b834:	e0bff817 	ldw	r2,-32(fp)
8112b838:	e0bff915 	stw	r2,-28(fp)
8112b83c:	e0bff917 	ldw	r2,-28(fp)
8112b840:	1001703a 	wrctl	status,r2
8112b844:	00801904 	movi	r2,100
8112b848:	00005106 	br	8112b990 <OSMutexPost+0x20c>
8112b84c:	d0a08417 	ldw	r2,-32240(gp)
8112b850:	10800c83 	ldbu	r2,50(r2)
8112b854:	10c03fcc 	andi	r3,r2,255
8112b858:	e0bffa03 	ldbu	r2,-24(fp)
8112b85c:	1880051e 	bne	r3,r2,8112b874 <OSMutexPost+0xf0>
8112b860:	d0a08417 	ldw	r2,-32240(gp)
8112b864:	e0fffa43 	ldbu	r3,-23(fp)
8112b868:	180b883a 	mov	r5,r3
8112b86c:	1009883a 	mov	r4,r2
8112b870:	112bb180 	call	8112bb18 <OSMutex_RdyAtPrio>
8112b874:	e0fffa03 	ldbu	r3,-24(fp)
8112b878:	00a04574 	movhi	r2,33045
8112b87c:	1087e104 	addi	r2,r2,8068
8112b880:	18c7883a 	add	r3,r3,r3
8112b884:	18c7883a 	add	r3,r3,r3
8112b888:	10c5883a 	add	r2,r2,r3
8112b88c:	00c00044 	movi	r3,1
8112b890:	10c00015 	stw	r3,0(r2)
8112b894:	e0bfff17 	ldw	r2,-4(fp)
8112b898:	10800283 	ldbu	r2,10(r2)
8112b89c:	10803fcc 	andi	r2,r2,255
8112b8a0:	10002e26 	beq	r2,zero,8112b95c <OSMutexPost+0x1d8>
8112b8a4:	000f883a 	mov	r7,zero
8112b8a8:	01800404 	movi	r6,16
8112b8ac:	000b883a 	mov	r5,zero
8112b8b0:	e13fff17 	ldw	r4,-4(fp)
8112b8b4:	11278800 	call	81127880 <OS_EventTaskRdy>
8112b8b8:	e0bffa45 	stb	r2,-23(fp)
8112b8bc:	e0bfff17 	ldw	r2,-4(fp)
8112b8c0:	10c0020b 	ldhu	r3,8(r2)
8112b8c4:	00bfc004 	movi	r2,-256
8112b8c8:	1884703a 	and	r2,r3,r2
8112b8cc:	1007883a 	mov	r3,r2
8112b8d0:	e0bfff17 	ldw	r2,-4(fp)
8112b8d4:	10c0020d 	sth	r3,8(r2)
8112b8d8:	e0bfff17 	ldw	r2,-4(fp)
8112b8dc:	10c0020b 	ldhu	r3,8(r2)
8112b8e0:	e0bffa43 	ldbu	r2,-23(fp)
8112b8e4:	1884b03a 	or	r2,r3,r2
8112b8e8:	1007883a 	mov	r3,r2
8112b8ec:	e0bfff17 	ldw	r2,-4(fp)
8112b8f0:	10c0020d 	sth	r3,8(r2)
8112b8f4:	e0fffa43 	ldbu	r3,-23(fp)
8112b8f8:	00a04574 	movhi	r2,33045
8112b8fc:	1087e104 	addi	r2,r2,8068
8112b900:	18c7883a 	add	r3,r3,r3
8112b904:	18c7883a 	add	r3,r3,r3
8112b908:	10c5883a 	add	r2,r2,r3
8112b90c:	10c00017 	ldw	r3,0(r2)
8112b910:	e0bfff17 	ldw	r2,-4(fp)
8112b914:	10c00115 	stw	r3,4(r2)
8112b918:	e0bffa43 	ldbu	r2,-23(fp)
8112b91c:	e0fffa03 	ldbu	r3,-24(fp)
8112b920:	18800736 	bltu	r3,r2,8112b940 <OSMutexPost+0x1bc>
8112b924:	e0bff817 	ldw	r2,-32(fp)
8112b928:	e0bffb15 	stw	r2,-20(fp)
8112b92c:	e0bffb17 	ldw	r2,-20(fp)
8112b930:	1001703a 	wrctl	status,r2
8112b934:	112833c0 	call	8112833c <OS_Sched>
8112b938:	00801e04 	movi	r2,120
8112b93c:	00001406 	br	8112b990 <OSMutexPost+0x20c>
8112b940:	e0bff817 	ldw	r2,-32(fp)
8112b944:	e0bffc15 	stw	r2,-16(fp)
8112b948:	e0bffc17 	ldw	r2,-16(fp)
8112b94c:	1001703a 	wrctl	status,r2
8112b950:	112833c0 	call	8112833c <OS_Sched>
8112b954:	0005883a 	mov	r2,zero
8112b958:	00000d06 	br	8112b990 <OSMutexPost+0x20c>
8112b95c:	e0bfff17 	ldw	r2,-4(fp)
8112b960:	1080020b 	ldhu	r2,8(r2)
8112b964:	10803fd4 	ori	r2,r2,255
8112b968:	1007883a 	mov	r3,r2
8112b96c:	e0bfff17 	ldw	r2,-4(fp)
8112b970:	10c0020d 	sth	r3,8(r2)
8112b974:	e0bfff17 	ldw	r2,-4(fp)
8112b978:	10000115 	stw	zero,4(r2)
8112b97c:	e0bff817 	ldw	r2,-32(fp)
8112b980:	e0bffd15 	stw	r2,-12(fp)
8112b984:	e0bffd17 	ldw	r2,-12(fp)
8112b988:	1001703a 	wrctl	status,r2
8112b98c:	0005883a 	mov	r2,zero
8112b990:	e037883a 	mov	sp,fp
8112b994:	dfc00117 	ldw	ra,4(sp)
8112b998:	df000017 	ldw	fp,0(sp)
8112b99c:	dec00204 	addi	sp,sp,8
8112b9a0:	f800283a 	ret

8112b9a4 <OSMutexQuery>:
8112b9a4:	defff704 	addi	sp,sp,-36
8112b9a8:	de00012e 	bgeu	sp,et,8112b9b0 <OSMutexQuery+0xc>
8112b9ac:	003b68fa 	trap	3
8112b9b0:	df000815 	stw	fp,32(sp)
8112b9b4:	df000804 	addi	fp,sp,32
8112b9b8:	e13ffe15 	stw	r4,-8(fp)
8112b9bc:	e17fff15 	stw	r5,-4(fp)
8112b9c0:	e03ffb15 	stw	zero,-20(fp)
8112b9c4:	d0a08303 	ldbu	r2,-32244(gp)
8112b9c8:	10803fcc 	andi	r2,r2,255
8112b9cc:	10000226 	beq	r2,zero,8112b9d8 <OSMutexQuery+0x34>
8112b9d0:	00800184 	movi	r2,6
8112b9d4:	00004c06 	br	8112bb08 <OSMutexQuery+0x164>
8112b9d8:	e0bffe17 	ldw	r2,-8(fp)
8112b9dc:	1000021e 	bne	r2,zero,8112b9e8 <OSMutexQuery+0x44>
8112b9e0:	00800104 	movi	r2,4
8112b9e4:	00004806 	br	8112bb08 <OSMutexQuery+0x164>
8112b9e8:	e0bfff17 	ldw	r2,-4(fp)
8112b9ec:	1000021e 	bne	r2,zero,8112b9f8 <OSMutexQuery+0x54>
8112b9f0:	00800244 	movi	r2,9
8112b9f4:	00004406 	br	8112bb08 <OSMutexQuery+0x164>
8112b9f8:	e0bffe17 	ldw	r2,-8(fp)
8112b9fc:	10800003 	ldbu	r2,0(r2)
8112ba00:	10803fcc 	andi	r2,r2,255
8112ba04:	10800120 	cmpeqi	r2,r2,4
8112ba08:	1000021e 	bne	r2,zero,8112ba14 <OSMutexQuery+0x70>
8112ba0c:	00800044 	movi	r2,1
8112ba10:	00003d06 	br	8112bb08 <OSMutexQuery+0x164>
8112ba14:	0005303a 	rdctl	r2,status
8112ba18:	e0bffd15 	stw	r2,-12(fp)
8112ba1c:	e0fffd17 	ldw	r3,-12(fp)
8112ba20:	00bfff84 	movi	r2,-2
8112ba24:	1884703a 	and	r2,r3,r2
8112ba28:	1001703a 	wrctl	status,r2
8112ba2c:	e0bffd17 	ldw	r2,-12(fp)
8112ba30:	e0bffb15 	stw	r2,-20(fp)
8112ba34:	e0bffe17 	ldw	r2,-8(fp)
8112ba38:	1080020b 	ldhu	r2,8(r2)
8112ba3c:	10bfffcc 	andi	r2,r2,65535
8112ba40:	1004d23a 	srli	r2,r2,8
8112ba44:	1007883a 	mov	r3,r2
8112ba48:	e0bfff17 	ldw	r2,-4(fp)
8112ba4c:	10c00245 	stb	r3,9(r2)
8112ba50:	e0bffe17 	ldw	r2,-8(fp)
8112ba54:	1080020b 	ldhu	r2,8(r2)
8112ba58:	1007883a 	mov	r3,r2
8112ba5c:	e0bfff17 	ldw	r2,-4(fp)
8112ba60:	10c00205 	stb	r3,8(r2)
8112ba64:	e0bfff17 	ldw	r2,-4(fp)
8112ba68:	10800203 	ldbu	r2,8(r2)
8112ba6c:	10803fcc 	andi	r2,r2,255
8112ba70:	10803fd8 	cmpnei	r2,r2,255
8112ba74:	1000041e 	bne	r2,zero,8112ba88 <OSMutexQuery+0xe4>
8112ba78:	e0bfff17 	ldw	r2,-4(fp)
8112ba7c:	00c00044 	movi	r3,1
8112ba80:	10c001c5 	stb	r3,7(r2)
8112ba84:	00000206 	br	8112ba90 <OSMutexQuery+0xec>
8112ba88:	e0bfff17 	ldw	r2,-4(fp)
8112ba8c:	100001c5 	stb	zero,7(r2)
8112ba90:	e0bffe17 	ldw	r2,-8(fp)
8112ba94:	10c00283 	ldbu	r3,10(r2)
8112ba98:	e0bfff17 	ldw	r2,-4(fp)
8112ba9c:	10c00185 	stb	r3,6(r2)
8112baa0:	e0bffe17 	ldw	r2,-8(fp)
8112baa4:	108002c4 	addi	r2,r2,11
8112baa8:	e0bff915 	stw	r2,-28(fp)
8112baac:	e0bfff17 	ldw	r2,-4(fp)
8112bab0:	e0bffa15 	stw	r2,-24(fp)
8112bab4:	e03ff805 	stb	zero,-32(fp)
8112bab8:	00000b06 	br	8112bae8 <OSMutexQuery+0x144>
8112babc:	e0bffa17 	ldw	r2,-24(fp)
8112bac0:	10c00044 	addi	r3,r2,1
8112bac4:	e0fffa15 	stw	r3,-24(fp)
8112bac8:	e0fff917 	ldw	r3,-28(fp)
8112bacc:	19000044 	addi	r4,r3,1
8112bad0:	e13ff915 	stw	r4,-28(fp)
8112bad4:	18c00003 	ldbu	r3,0(r3)
8112bad8:	10c00005 	stb	r3,0(r2)
8112badc:	e0bff803 	ldbu	r2,-32(fp)
8112bae0:	10800044 	addi	r2,r2,1
8112bae4:	e0bff805 	stb	r2,-32(fp)
8112bae8:	e0bff803 	ldbu	r2,-32(fp)
8112baec:	108001b0 	cmpltui	r2,r2,6
8112baf0:	103ff21e 	bne	r2,zero,8112babc <__reset+0xfb10babc>
8112baf4:	e0bffb17 	ldw	r2,-20(fp)
8112baf8:	e0bffc15 	stw	r2,-16(fp)
8112bafc:	e0bffc17 	ldw	r2,-16(fp)
8112bb00:	1001703a 	wrctl	status,r2
8112bb04:	0005883a 	mov	r2,zero
8112bb08:	e037883a 	mov	sp,fp
8112bb0c:	df000017 	ldw	fp,0(sp)
8112bb10:	dec00104 	addi	sp,sp,4
8112bb14:	f800283a 	ret

8112bb18 <OSMutex_RdyAtPrio>:
8112bb18:	defffc04 	addi	sp,sp,-16
8112bb1c:	de00012e 	bgeu	sp,et,8112bb24 <OSMutex_RdyAtPrio+0xc>
8112bb20:	003b68fa 	trap	3
8112bb24:	df000315 	stw	fp,12(sp)
8112bb28:	df000304 	addi	fp,sp,12
8112bb2c:	e13ffe15 	stw	r4,-8(fp)
8112bb30:	2805883a 	mov	r2,r5
8112bb34:	e0bfff05 	stb	r2,-4(fp)
8112bb38:	e0bffe17 	ldw	r2,-8(fp)
8112bb3c:	10800d03 	ldbu	r2,52(r2)
8112bb40:	e0bffd05 	stb	r2,-12(fp)
8112bb44:	e0fffd03 	ldbu	r3,-12(fp)
8112bb48:	e13ffd03 	ldbu	r4,-12(fp)
8112bb4c:	d0a08044 	addi	r2,gp,-32255
8112bb50:	2085883a 	add	r2,r4,r2
8112bb54:	10800003 	ldbu	r2,0(r2)
8112bb58:	1009883a 	mov	r4,r2
8112bb5c:	e0bffe17 	ldw	r2,-8(fp)
8112bb60:	10800d43 	ldbu	r2,53(r2)
8112bb64:	0084303a 	nor	r2,zero,r2
8112bb68:	2084703a 	and	r2,r4,r2
8112bb6c:	1009883a 	mov	r4,r2
8112bb70:	d0a08044 	addi	r2,gp,-32255
8112bb74:	1885883a 	add	r2,r3,r2
8112bb78:	11000005 	stb	r4,0(r2)
8112bb7c:	e0fffd03 	ldbu	r3,-12(fp)
8112bb80:	d0a08044 	addi	r2,gp,-32255
8112bb84:	1885883a 	add	r2,r3,r2
8112bb88:	10800003 	ldbu	r2,0(r2)
8112bb8c:	10803fcc 	andi	r2,r2,255
8112bb90:	1000071e 	bne	r2,zero,8112bbb0 <OSMutex_RdyAtPrio+0x98>
8112bb94:	e0bffe17 	ldw	r2,-8(fp)
8112bb98:	10800d83 	ldbu	r2,54(r2)
8112bb9c:	0084303a 	nor	r2,zero,r2
8112bba0:	1007883a 	mov	r3,r2
8112bba4:	d0a08003 	ldbu	r2,-32256(gp)
8112bba8:	1884703a 	and	r2,r3,r2
8112bbac:	d0a08005 	stb	r2,-32256(gp)
8112bbb0:	e0bffe17 	ldw	r2,-8(fp)
8112bbb4:	e0ffff03 	ldbu	r3,-4(fp)
8112bbb8:	10c00c85 	stb	r3,50(r2)
8112bbbc:	e0bfff03 	ldbu	r2,-4(fp)
8112bbc0:	1004d0fa 	srli	r2,r2,3
8112bbc4:	108001cc 	andi	r2,r2,7
8112bbc8:	1007883a 	mov	r3,r2
8112bbcc:	e0bffe17 	ldw	r2,-8(fp)
8112bbd0:	10c00d05 	stb	r3,52(r2)
8112bbd4:	e0bfff03 	ldbu	r2,-4(fp)
8112bbd8:	108001cc 	andi	r2,r2,7
8112bbdc:	1007883a 	mov	r3,r2
8112bbe0:	e0bffe17 	ldw	r2,-8(fp)
8112bbe4:	10c00cc5 	stb	r3,51(r2)
8112bbe8:	e0bffe17 	ldw	r2,-8(fp)
8112bbec:	10800d03 	ldbu	r2,52(r2)
8112bbf0:	10803fcc 	andi	r2,r2,255
8112bbf4:	00c00044 	movi	r3,1
8112bbf8:	1884983a 	sll	r2,r3,r2
8112bbfc:	1007883a 	mov	r3,r2
8112bc00:	e0bffe17 	ldw	r2,-8(fp)
8112bc04:	10c00d85 	stb	r3,54(r2)
8112bc08:	e0bffe17 	ldw	r2,-8(fp)
8112bc0c:	10800cc3 	ldbu	r2,51(r2)
8112bc10:	10803fcc 	andi	r2,r2,255
8112bc14:	00c00044 	movi	r3,1
8112bc18:	1884983a 	sll	r2,r3,r2
8112bc1c:	1007883a 	mov	r3,r2
8112bc20:	e0bffe17 	ldw	r2,-8(fp)
8112bc24:	10c00d45 	stb	r3,53(r2)
8112bc28:	e0bffe17 	ldw	r2,-8(fp)
8112bc2c:	10c00d83 	ldbu	r3,54(r2)
8112bc30:	d0a08003 	ldbu	r2,-32256(gp)
8112bc34:	1884b03a 	or	r2,r3,r2
8112bc38:	d0a08005 	stb	r2,-32256(gp)
8112bc3c:	e0bffe17 	ldw	r2,-8(fp)
8112bc40:	10800d03 	ldbu	r2,52(r2)
8112bc44:	10c03fcc 	andi	r3,r2,255
8112bc48:	e0bffe17 	ldw	r2,-8(fp)
8112bc4c:	10800d03 	ldbu	r2,52(r2)
8112bc50:	11003fcc 	andi	r4,r2,255
8112bc54:	d0a08044 	addi	r2,gp,-32255
8112bc58:	2085883a 	add	r2,r4,r2
8112bc5c:	11000003 	ldbu	r4,0(r2)
8112bc60:	e0bffe17 	ldw	r2,-8(fp)
8112bc64:	10800d43 	ldbu	r2,53(r2)
8112bc68:	2084b03a 	or	r2,r4,r2
8112bc6c:	1009883a 	mov	r4,r2
8112bc70:	d0a08044 	addi	r2,gp,-32255
8112bc74:	1885883a 	add	r2,r3,r2
8112bc78:	11000005 	stb	r4,0(r2)
8112bc7c:	e0ffff03 	ldbu	r3,-4(fp)
8112bc80:	00a04574 	movhi	r2,33045
8112bc84:	1087e104 	addi	r2,r2,8068
8112bc88:	18c7883a 	add	r3,r3,r3
8112bc8c:	18c7883a 	add	r3,r3,r3
8112bc90:	10c5883a 	add	r2,r2,r3
8112bc94:	e0fffe17 	ldw	r3,-8(fp)
8112bc98:	10c00015 	stw	r3,0(r2)
8112bc9c:	0001883a 	nop
8112bca0:	e037883a 	mov	sp,fp
8112bca4:	df000017 	ldw	fp,0(sp)
8112bca8:	dec00104 	addi	sp,sp,4
8112bcac:	f800283a 	ret

8112bcb0 <OSQAccept>:
8112bcb0:	defff804 	addi	sp,sp,-32
8112bcb4:	de00012e 	bgeu	sp,et,8112bcbc <OSQAccept+0xc>
8112bcb8:	003b68fa 	trap	3
8112bcbc:	df000715 	stw	fp,28(sp)
8112bcc0:	df000704 	addi	fp,sp,28
8112bcc4:	e13ffe15 	stw	r4,-8(fp)
8112bcc8:	e17fff15 	stw	r5,-4(fp)
8112bccc:	e03ffa15 	stw	zero,-24(fp)
8112bcd0:	e0bfff17 	ldw	r2,-4(fp)
8112bcd4:	1000021e 	bne	r2,zero,8112bce0 <OSQAccept+0x30>
8112bcd8:	0005883a 	mov	r2,zero
8112bcdc:	00004206 	br	8112bde8 <OSQAccept+0x138>
8112bce0:	e0bffe17 	ldw	r2,-8(fp)
8112bce4:	1000051e 	bne	r2,zero,8112bcfc <OSQAccept+0x4c>
8112bce8:	e0bfff17 	ldw	r2,-4(fp)
8112bcec:	00c00104 	movi	r3,4
8112bcf0:	10c00005 	stb	r3,0(r2)
8112bcf4:	0005883a 	mov	r2,zero
8112bcf8:	00003b06 	br	8112bde8 <OSQAccept+0x138>
8112bcfc:	e0bffe17 	ldw	r2,-8(fp)
8112bd00:	10800003 	ldbu	r2,0(r2)
8112bd04:	10803fcc 	andi	r2,r2,255
8112bd08:	108000a0 	cmpeqi	r2,r2,2
8112bd0c:	1000051e 	bne	r2,zero,8112bd24 <OSQAccept+0x74>
8112bd10:	e0bfff17 	ldw	r2,-4(fp)
8112bd14:	00c00044 	movi	r3,1
8112bd18:	10c00005 	stb	r3,0(r2)
8112bd1c:	0005883a 	mov	r2,zero
8112bd20:	00003106 	br	8112bde8 <OSQAccept+0x138>
8112bd24:	0005303a 	rdctl	r2,status
8112bd28:	e0bffd15 	stw	r2,-12(fp)
8112bd2c:	e0fffd17 	ldw	r3,-12(fp)
8112bd30:	00bfff84 	movi	r2,-2
8112bd34:	1884703a 	and	r2,r3,r2
8112bd38:	1001703a 	wrctl	status,r2
8112bd3c:	e0bffd17 	ldw	r2,-12(fp)
8112bd40:	e0bffa15 	stw	r2,-24(fp)
8112bd44:	e0bffe17 	ldw	r2,-8(fp)
8112bd48:	10800117 	ldw	r2,4(r2)
8112bd4c:	e0bffc15 	stw	r2,-16(fp)
8112bd50:	e0bffc17 	ldw	r2,-16(fp)
8112bd54:	1080058b 	ldhu	r2,22(r2)
8112bd58:	10bfffcc 	andi	r2,r2,65535
8112bd5c:	10001926 	beq	r2,zero,8112bdc4 <OSQAccept+0x114>
8112bd60:	e0bffc17 	ldw	r2,-16(fp)
8112bd64:	10800417 	ldw	r2,16(r2)
8112bd68:	11000104 	addi	r4,r2,4
8112bd6c:	e0fffc17 	ldw	r3,-16(fp)
8112bd70:	19000415 	stw	r4,16(r3)
8112bd74:	10800017 	ldw	r2,0(r2)
8112bd78:	e0bff915 	stw	r2,-28(fp)
8112bd7c:	e0bffc17 	ldw	r2,-16(fp)
8112bd80:	1080058b 	ldhu	r2,22(r2)
8112bd84:	10bfffc4 	addi	r2,r2,-1
8112bd88:	1007883a 	mov	r3,r2
8112bd8c:	e0bffc17 	ldw	r2,-16(fp)
8112bd90:	10c0058d 	sth	r3,22(r2)
8112bd94:	e0bffc17 	ldw	r2,-16(fp)
8112bd98:	10c00417 	ldw	r3,16(r2)
8112bd9c:	e0bffc17 	ldw	r2,-16(fp)
8112bda0:	10800217 	ldw	r2,8(r2)
8112bda4:	1880041e 	bne	r3,r2,8112bdb8 <OSQAccept+0x108>
8112bda8:	e0bffc17 	ldw	r2,-16(fp)
8112bdac:	10c00117 	ldw	r3,4(r2)
8112bdb0:	e0bffc17 	ldw	r2,-16(fp)
8112bdb4:	10c00415 	stw	r3,16(r2)
8112bdb8:	e0bfff17 	ldw	r2,-4(fp)
8112bdbc:	10000005 	stb	zero,0(r2)
8112bdc0:	00000406 	br	8112bdd4 <OSQAccept+0x124>
8112bdc4:	e0bfff17 	ldw	r2,-4(fp)
8112bdc8:	00c007c4 	movi	r3,31
8112bdcc:	10c00005 	stb	r3,0(r2)
8112bdd0:	e03ff915 	stw	zero,-28(fp)
8112bdd4:	e0bffa17 	ldw	r2,-24(fp)
8112bdd8:	e0bffb15 	stw	r2,-20(fp)
8112bddc:	e0bffb17 	ldw	r2,-20(fp)
8112bde0:	1001703a 	wrctl	status,r2
8112bde4:	e0bff917 	ldw	r2,-28(fp)
8112bde8:	e037883a 	mov	sp,fp
8112bdec:	df000017 	ldw	fp,0(sp)
8112bdf0:	dec00104 	addi	sp,sp,4
8112bdf4:	f800283a 	ret

8112bdf8 <OSQCreate>:
8112bdf8:	defff404 	addi	sp,sp,-48
8112bdfc:	de00012e 	bgeu	sp,et,8112be04 <OSQCreate+0xc>
8112be00:	003b68fa 	trap	3
8112be04:	dfc00b15 	stw	ra,44(sp)
8112be08:	df000a15 	stw	fp,40(sp)
8112be0c:	df000a04 	addi	fp,sp,40
8112be10:	e13ffe15 	stw	r4,-8(fp)
8112be14:	2805883a 	mov	r2,r5
8112be18:	e0bfff0d 	sth	r2,-4(fp)
8112be1c:	e03ff715 	stw	zero,-36(fp)
8112be20:	d0a08303 	ldbu	r2,-32244(gp)
8112be24:	10803fcc 	andi	r2,r2,255
8112be28:	10000226 	beq	r2,zero,8112be34 <OSQCreate+0x3c>
8112be2c:	0005883a 	mov	r2,zero
8112be30:	00005906 	br	8112bf98 <OSQCreate+0x1a0>
8112be34:	0005303a 	rdctl	r2,status
8112be38:	e0bffd15 	stw	r2,-12(fp)
8112be3c:	e0fffd17 	ldw	r3,-12(fp)
8112be40:	00bfff84 	movi	r2,-2
8112be44:	1884703a 	and	r2,r3,r2
8112be48:	1001703a 	wrctl	status,r2
8112be4c:	e0bffd17 	ldw	r2,-12(fp)
8112be50:	e0bff715 	stw	r2,-36(fp)
8112be54:	d0a08217 	ldw	r2,-32248(gp)
8112be58:	e0bff615 	stw	r2,-40(fp)
8112be5c:	d0a08217 	ldw	r2,-32248(gp)
8112be60:	10000326 	beq	r2,zero,8112be70 <OSQCreate+0x78>
8112be64:	d0a08217 	ldw	r2,-32248(gp)
8112be68:	10800117 	ldw	r2,4(r2)
8112be6c:	d0a08215 	stw	r2,-32248(gp)
8112be70:	e0bff717 	ldw	r2,-36(fp)
8112be74:	e0bff815 	stw	r2,-32(fp)
8112be78:	e0bff817 	ldw	r2,-32(fp)
8112be7c:	1001703a 	wrctl	status,r2
8112be80:	e0bff617 	ldw	r2,-40(fp)
8112be84:	10004326 	beq	r2,zero,8112bf94 <OSQCreate+0x19c>
8112be88:	0005303a 	rdctl	r2,status
8112be8c:	e0bff915 	stw	r2,-28(fp)
8112be90:	e0fff917 	ldw	r3,-28(fp)
8112be94:	00bfff84 	movi	r2,-2
8112be98:	1884703a 	and	r2,r3,r2
8112be9c:	1001703a 	wrctl	status,r2
8112bea0:	e0bff917 	ldw	r2,-28(fp)
8112bea4:	e0bff715 	stw	r2,-36(fp)
8112bea8:	d0a07f17 	ldw	r2,-32260(gp)
8112beac:	e0bffb15 	stw	r2,-20(fp)
8112beb0:	e0bffb17 	ldw	r2,-20(fp)
8112beb4:	10002d26 	beq	r2,zero,8112bf6c <OSQCreate+0x174>
8112beb8:	d0a07f17 	ldw	r2,-32260(gp)
8112bebc:	10800017 	ldw	r2,0(r2)
8112bec0:	d0a07f15 	stw	r2,-32260(gp)
8112bec4:	e0bff717 	ldw	r2,-36(fp)
8112bec8:	e0bffa15 	stw	r2,-24(fp)
8112becc:	e0bffa17 	ldw	r2,-24(fp)
8112bed0:	1001703a 	wrctl	status,r2
8112bed4:	e0bffb17 	ldw	r2,-20(fp)
8112bed8:	e0fffe17 	ldw	r3,-8(fp)
8112bedc:	10c00115 	stw	r3,4(r2)
8112bee0:	e0bfff0b 	ldhu	r2,-4(fp)
8112bee4:	1085883a 	add	r2,r2,r2
8112bee8:	1085883a 	add	r2,r2,r2
8112beec:	1007883a 	mov	r3,r2
8112bef0:	e0bffe17 	ldw	r2,-8(fp)
8112bef4:	10c7883a 	add	r3,r2,r3
8112bef8:	e0bffb17 	ldw	r2,-20(fp)
8112befc:	10c00215 	stw	r3,8(r2)
8112bf00:	e0bffb17 	ldw	r2,-20(fp)
8112bf04:	e0fffe17 	ldw	r3,-8(fp)
8112bf08:	10c00315 	stw	r3,12(r2)
8112bf0c:	e0bffb17 	ldw	r2,-20(fp)
8112bf10:	e0fffe17 	ldw	r3,-8(fp)
8112bf14:	10c00415 	stw	r3,16(r2)
8112bf18:	e0bffb17 	ldw	r2,-20(fp)
8112bf1c:	e0ffff0b 	ldhu	r3,-4(fp)
8112bf20:	10c0050d 	sth	r3,20(r2)
8112bf24:	e0bffb17 	ldw	r2,-20(fp)
8112bf28:	1000058d 	sth	zero,22(r2)
8112bf2c:	e0bff617 	ldw	r2,-40(fp)
8112bf30:	00c00084 	movi	r3,2
8112bf34:	10c00005 	stb	r3,0(r2)
8112bf38:	e0bff617 	ldw	r2,-40(fp)
8112bf3c:	1000020d 	sth	zero,8(r2)
8112bf40:	e0bff617 	ldw	r2,-40(fp)
8112bf44:	e0fffb17 	ldw	r3,-20(fp)
8112bf48:	10c00115 	stw	r3,4(r2)
8112bf4c:	e0bff617 	ldw	r2,-40(fp)
8112bf50:	00c00fc4 	movi	r3,63
8112bf54:	10c00445 	stb	r3,17(r2)
8112bf58:	e0bff617 	ldw	r2,-40(fp)
8112bf5c:	10000485 	stb	zero,18(r2)
8112bf60:	e13ff617 	ldw	r4,-40(fp)
8112bf64:	1127e580 	call	81127e58 <OS_EventWaitListInit>
8112bf68:	00000a06 	br	8112bf94 <OSQCreate+0x19c>
8112bf6c:	d0e08217 	ldw	r3,-32248(gp)
8112bf70:	e0bff617 	ldw	r2,-40(fp)
8112bf74:	10c00115 	stw	r3,4(r2)
8112bf78:	e0bff617 	ldw	r2,-40(fp)
8112bf7c:	d0a08215 	stw	r2,-32248(gp)
8112bf80:	e0bff717 	ldw	r2,-36(fp)
8112bf84:	e0bffc15 	stw	r2,-16(fp)
8112bf88:	e0bffc17 	ldw	r2,-16(fp)
8112bf8c:	1001703a 	wrctl	status,r2
8112bf90:	e03ff615 	stw	zero,-40(fp)
8112bf94:	e0bff617 	ldw	r2,-40(fp)
8112bf98:	e037883a 	mov	sp,fp
8112bf9c:	dfc00117 	ldw	ra,4(sp)
8112bfa0:	df000017 	ldw	fp,0(sp)
8112bfa4:	dec00204 	addi	sp,sp,8
8112bfa8:	f800283a 	ret

8112bfac <OSQDel>:
8112bfac:	defff204 	addi	sp,sp,-56
8112bfb0:	de00012e 	bgeu	sp,et,8112bfb8 <OSQDel+0xc>
8112bfb4:	003b68fa 	trap	3
8112bfb8:	dfc00d15 	stw	ra,52(sp)
8112bfbc:	df000c15 	stw	fp,48(sp)
8112bfc0:	df000c04 	addi	fp,sp,48
8112bfc4:	e13ffd15 	stw	r4,-12(fp)
8112bfc8:	2805883a 	mov	r2,r5
8112bfcc:	e1bfff15 	stw	r6,-4(fp)
8112bfd0:	e0bffe05 	stb	r2,-8(fp)
8112bfd4:	e03ff615 	stw	zero,-40(fp)
8112bfd8:	e0bfff17 	ldw	r2,-4(fp)
8112bfdc:	1000021e 	bne	r2,zero,8112bfe8 <OSQDel+0x3c>
8112bfe0:	e0bffd17 	ldw	r2,-12(fp)
8112bfe4:	00008e06 	br	8112c220 <OSQDel+0x274>
8112bfe8:	e0bffd17 	ldw	r2,-12(fp)
8112bfec:	1000051e 	bne	r2,zero,8112c004 <OSQDel+0x58>
8112bff0:	e0bfff17 	ldw	r2,-4(fp)
8112bff4:	00c00104 	movi	r3,4
8112bff8:	10c00005 	stb	r3,0(r2)
8112bffc:	e0bffd17 	ldw	r2,-12(fp)
8112c000:	00008706 	br	8112c220 <OSQDel+0x274>
8112c004:	e0bffd17 	ldw	r2,-12(fp)
8112c008:	10800003 	ldbu	r2,0(r2)
8112c00c:	10803fcc 	andi	r2,r2,255
8112c010:	108000a0 	cmpeqi	r2,r2,2
8112c014:	1000051e 	bne	r2,zero,8112c02c <OSQDel+0x80>
8112c018:	e0bfff17 	ldw	r2,-4(fp)
8112c01c:	00c00044 	movi	r3,1
8112c020:	10c00005 	stb	r3,0(r2)
8112c024:	e0bffd17 	ldw	r2,-12(fp)
8112c028:	00007d06 	br	8112c220 <OSQDel+0x274>
8112c02c:	d0a08303 	ldbu	r2,-32244(gp)
8112c030:	10803fcc 	andi	r2,r2,255
8112c034:	10000526 	beq	r2,zero,8112c04c <OSQDel+0xa0>
8112c038:	e0bfff17 	ldw	r2,-4(fp)
8112c03c:	00c003c4 	movi	r3,15
8112c040:	10c00005 	stb	r3,0(r2)
8112c044:	e0bffd17 	ldw	r2,-12(fp)
8112c048:	00007506 	br	8112c220 <OSQDel+0x274>
8112c04c:	0005303a 	rdctl	r2,status
8112c050:	e0bffc15 	stw	r2,-16(fp)
8112c054:	e0fffc17 	ldw	r3,-16(fp)
8112c058:	00bfff84 	movi	r2,-2
8112c05c:	1884703a 	and	r2,r3,r2
8112c060:	1001703a 	wrctl	status,r2
8112c064:	e0bffc17 	ldw	r2,-16(fp)
8112c068:	e0bff615 	stw	r2,-40(fp)
8112c06c:	e0bffd17 	ldw	r2,-12(fp)
8112c070:	10800283 	ldbu	r2,10(r2)
8112c074:	10803fcc 	andi	r2,r2,255
8112c078:	10000326 	beq	r2,zero,8112c088 <OSQDel+0xdc>
8112c07c:	00800044 	movi	r2,1
8112c080:	e0bff405 	stb	r2,-48(fp)
8112c084:	00000106 	br	8112c08c <OSQDel+0xe0>
8112c088:	e03ff405 	stb	zero,-48(fp)
8112c08c:	e0bffe03 	ldbu	r2,-8(fp)
8112c090:	10000326 	beq	r2,zero,8112c0a0 <OSQDel+0xf4>
8112c094:	10800060 	cmpeqi	r2,r2,1
8112c098:	1000301e 	bne	r2,zero,8112c15c <OSQDel+0x1b0>
8112c09c:	00005506 	br	8112c1f4 <OSQDel+0x248>
8112c0a0:	e0bff403 	ldbu	r2,-48(fp)
8112c0a4:	10001e1e 	bne	r2,zero,8112c120 <OSQDel+0x174>
8112c0a8:	e0bffd17 	ldw	r2,-12(fp)
8112c0ac:	00c00fc4 	movi	r3,63
8112c0b0:	10c00445 	stb	r3,17(r2)
8112c0b4:	e0bffd17 	ldw	r2,-12(fp)
8112c0b8:	10000485 	stb	zero,18(r2)
8112c0bc:	e0bffd17 	ldw	r2,-12(fp)
8112c0c0:	10800117 	ldw	r2,4(r2)
8112c0c4:	e0bff815 	stw	r2,-32(fp)
8112c0c8:	d0e07f17 	ldw	r3,-32260(gp)
8112c0cc:	e0bff817 	ldw	r2,-32(fp)
8112c0d0:	10c00015 	stw	r3,0(r2)
8112c0d4:	e0bff817 	ldw	r2,-32(fp)
8112c0d8:	d0a07f15 	stw	r2,-32260(gp)
8112c0dc:	e0bffd17 	ldw	r2,-12(fp)
8112c0e0:	10000005 	stb	zero,0(r2)
8112c0e4:	d0e08217 	ldw	r3,-32248(gp)
8112c0e8:	e0bffd17 	ldw	r2,-12(fp)
8112c0ec:	10c00115 	stw	r3,4(r2)
8112c0f0:	e0bffd17 	ldw	r2,-12(fp)
8112c0f4:	1000020d 	sth	zero,8(r2)
8112c0f8:	e0bffd17 	ldw	r2,-12(fp)
8112c0fc:	d0a08215 	stw	r2,-32248(gp)
8112c100:	e0bff617 	ldw	r2,-40(fp)
8112c104:	e0bff715 	stw	r2,-36(fp)
8112c108:	e0bff717 	ldw	r2,-36(fp)
8112c10c:	1001703a 	wrctl	status,r2
8112c110:	e0bfff17 	ldw	r2,-4(fp)
8112c114:	10000005 	stb	zero,0(r2)
8112c118:	e03ff515 	stw	zero,-44(fp)
8112c11c:	00003f06 	br	8112c21c <OSQDel+0x270>
8112c120:	e0bff617 	ldw	r2,-40(fp)
8112c124:	e0bff915 	stw	r2,-28(fp)
8112c128:	e0bff917 	ldw	r2,-28(fp)
8112c12c:	1001703a 	wrctl	status,r2
8112c130:	e0bfff17 	ldw	r2,-4(fp)
8112c134:	00c01244 	movi	r3,73
8112c138:	10c00005 	stb	r3,0(r2)
8112c13c:	e0bffd17 	ldw	r2,-12(fp)
8112c140:	e0bff515 	stw	r2,-44(fp)
8112c144:	00003506 	br	8112c21c <OSQDel+0x270>
8112c148:	000f883a 	mov	r7,zero
8112c14c:	01800104 	movi	r6,4
8112c150:	000b883a 	mov	r5,zero
8112c154:	e13ffd17 	ldw	r4,-12(fp)
8112c158:	11278800 	call	81127880 <OS_EventTaskRdy>
8112c15c:	e0bffd17 	ldw	r2,-12(fp)
8112c160:	10800283 	ldbu	r2,10(r2)
8112c164:	10803fcc 	andi	r2,r2,255
8112c168:	103ff71e 	bne	r2,zero,8112c148 <__reset+0xfb10c148>
8112c16c:	e0bffd17 	ldw	r2,-12(fp)
8112c170:	00c00fc4 	movi	r3,63
8112c174:	10c00445 	stb	r3,17(r2)
8112c178:	e0bffd17 	ldw	r2,-12(fp)
8112c17c:	10000485 	stb	zero,18(r2)
8112c180:	e0bffd17 	ldw	r2,-12(fp)
8112c184:	10800117 	ldw	r2,4(r2)
8112c188:	e0bff815 	stw	r2,-32(fp)
8112c18c:	d0e07f17 	ldw	r3,-32260(gp)
8112c190:	e0bff817 	ldw	r2,-32(fp)
8112c194:	10c00015 	stw	r3,0(r2)
8112c198:	e0bff817 	ldw	r2,-32(fp)
8112c19c:	d0a07f15 	stw	r2,-32260(gp)
8112c1a0:	e0bffd17 	ldw	r2,-12(fp)
8112c1a4:	10000005 	stb	zero,0(r2)
8112c1a8:	d0e08217 	ldw	r3,-32248(gp)
8112c1ac:	e0bffd17 	ldw	r2,-12(fp)
8112c1b0:	10c00115 	stw	r3,4(r2)
8112c1b4:	e0bffd17 	ldw	r2,-12(fp)
8112c1b8:	1000020d 	sth	zero,8(r2)
8112c1bc:	e0bffd17 	ldw	r2,-12(fp)
8112c1c0:	d0a08215 	stw	r2,-32248(gp)
8112c1c4:	e0bff617 	ldw	r2,-40(fp)
8112c1c8:	e0bffa15 	stw	r2,-24(fp)
8112c1cc:	e0bffa17 	ldw	r2,-24(fp)
8112c1d0:	1001703a 	wrctl	status,r2
8112c1d4:	e0bff403 	ldbu	r2,-48(fp)
8112c1d8:	10800058 	cmpnei	r2,r2,1
8112c1dc:	1000011e 	bne	r2,zero,8112c1e4 <OSQDel+0x238>
8112c1e0:	112833c0 	call	8112833c <OS_Sched>
8112c1e4:	e0bfff17 	ldw	r2,-4(fp)
8112c1e8:	10000005 	stb	zero,0(r2)
8112c1ec:	e03ff515 	stw	zero,-44(fp)
8112c1f0:	00000a06 	br	8112c21c <OSQDel+0x270>
8112c1f4:	e0bff617 	ldw	r2,-40(fp)
8112c1f8:	e0bffb15 	stw	r2,-20(fp)
8112c1fc:	e0bffb17 	ldw	r2,-20(fp)
8112c200:	1001703a 	wrctl	status,r2
8112c204:	e0bfff17 	ldw	r2,-4(fp)
8112c208:	00c001c4 	movi	r3,7
8112c20c:	10c00005 	stb	r3,0(r2)
8112c210:	e0bffd17 	ldw	r2,-12(fp)
8112c214:	e0bff515 	stw	r2,-44(fp)
8112c218:	0001883a 	nop
8112c21c:	e0bff517 	ldw	r2,-44(fp)
8112c220:	e037883a 	mov	sp,fp
8112c224:	dfc00117 	ldw	ra,4(sp)
8112c228:	df000017 	ldw	fp,0(sp)
8112c22c:	dec00204 	addi	sp,sp,8
8112c230:	f800283a 	ret

8112c234 <OSQFlush>:
8112c234:	defffa04 	addi	sp,sp,-24
8112c238:	de00012e 	bgeu	sp,et,8112c240 <OSQFlush+0xc>
8112c23c:	003b68fa 	trap	3
8112c240:	df000515 	stw	fp,20(sp)
8112c244:	df000504 	addi	fp,sp,20
8112c248:	e13fff15 	stw	r4,-4(fp)
8112c24c:	e03ffb15 	stw	zero,-20(fp)
8112c250:	e0bfff17 	ldw	r2,-4(fp)
8112c254:	1000021e 	bne	r2,zero,8112c260 <OSQFlush+0x2c>
8112c258:	00800104 	movi	r2,4
8112c25c:	00002106 	br	8112c2e4 <OSQFlush+0xb0>
8112c260:	e0bfff17 	ldw	r2,-4(fp)
8112c264:	10800003 	ldbu	r2,0(r2)
8112c268:	10803fcc 	andi	r2,r2,255
8112c26c:	108000a0 	cmpeqi	r2,r2,2
8112c270:	1000021e 	bne	r2,zero,8112c27c <OSQFlush+0x48>
8112c274:	00800044 	movi	r2,1
8112c278:	00001a06 	br	8112c2e4 <OSQFlush+0xb0>
8112c27c:	0005303a 	rdctl	r2,status
8112c280:	e0bffd15 	stw	r2,-12(fp)
8112c284:	e0fffd17 	ldw	r3,-12(fp)
8112c288:	00bfff84 	movi	r2,-2
8112c28c:	1884703a 	and	r2,r3,r2
8112c290:	1001703a 	wrctl	status,r2
8112c294:	e0bffd17 	ldw	r2,-12(fp)
8112c298:	e0bffb15 	stw	r2,-20(fp)
8112c29c:	e0bfff17 	ldw	r2,-4(fp)
8112c2a0:	10800117 	ldw	r2,4(r2)
8112c2a4:	e0bffc15 	stw	r2,-16(fp)
8112c2a8:	e0bffc17 	ldw	r2,-16(fp)
8112c2ac:	10c00117 	ldw	r3,4(r2)
8112c2b0:	e0bffc17 	ldw	r2,-16(fp)
8112c2b4:	10c00315 	stw	r3,12(r2)
8112c2b8:	e0bffc17 	ldw	r2,-16(fp)
8112c2bc:	10c00117 	ldw	r3,4(r2)
8112c2c0:	e0bffc17 	ldw	r2,-16(fp)
8112c2c4:	10c00415 	stw	r3,16(r2)
8112c2c8:	e0bffc17 	ldw	r2,-16(fp)
8112c2cc:	1000058d 	sth	zero,22(r2)
8112c2d0:	e0bffb17 	ldw	r2,-20(fp)
8112c2d4:	e0bffe15 	stw	r2,-8(fp)
8112c2d8:	e0bffe17 	ldw	r2,-8(fp)
8112c2dc:	1001703a 	wrctl	status,r2
8112c2e0:	0005883a 	mov	r2,zero
8112c2e4:	e037883a 	mov	sp,fp
8112c2e8:	df000017 	ldw	fp,0(sp)
8112c2ec:	dec00104 	addi	sp,sp,4
8112c2f0:	f800283a 	ret

8112c2f4 <OSQPend>:
8112c2f4:	defff304 	addi	sp,sp,-52
8112c2f8:	de00012e 	bgeu	sp,et,8112c300 <OSQPend+0xc>
8112c2fc:	003b68fa 	trap	3
8112c300:	dfc00c15 	stw	ra,48(sp)
8112c304:	df000b15 	stw	fp,44(sp)
8112c308:	df000b04 	addi	fp,sp,44
8112c30c:	e13ffd15 	stw	r4,-12(fp)
8112c310:	2805883a 	mov	r2,r5
8112c314:	e1bfff15 	stw	r6,-4(fp)
8112c318:	e0bffe0d 	sth	r2,-8(fp)
8112c31c:	e03ff615 	stw	zero,-40(fp)
8112c320:	e0bfff17 	ldw	r2,-4(fp)
8112c324:	1000021e 	bne	r2,zero,8112c330 <OSQPend+0x3c>
8112c328:	0005883a 	mov	r2,zero
8112c32c:	00009106 	br	8112c574 <OSQPend+0x280>
8112c330:	e0bffd17 	ldw	r2,-12(fp)
8112c334:	1000051e 	bne	r2,zero,8112c34c <OSQPend+0x58>
8112c338:	e0bfff17 	ldw	r2,-4(fp)
8112c33c:	00c00104 	movi	r3,4
8112c340:	10c00005 	stb	r3,0(r2)
8112c344:	0005883a 	mov	r2,zero
8112c348:	00008a06 	br	8112c574 <OSQPend+0x280>
8112c34c:	e0bffd17 	ldw	r2,-12(fp)
8112c350:	10800003 	ldbu	r2,0(r2)
8112c354:	10803fcc 	andi	r2,r2,255
8112c358:	108000a0 	cmpeqi	r2,r2,2
8112c35c:	1000051e 	bne	r2,zero,8112c374 <OSQPend+0x80>
8112c360:	e0bfff17 	ldw	r2,-4(fp)
8112c364:	00c00044 	movi	r3,1
8112c368:	10c00005 	stb	r3,0(r2)
8112c36c:	0005883a 	mov	r2,zero
8112c370:	00008006 	br	8112c574 <OSQPend+0x280>
8112c374:	d0a08303 	ldbu	r2,-32244(gp)
8112c378:	10803fcc 	andi	r2,r2,255
8112c37c:	10000526 	beq	r2,zero,8112c394 <OSQPend+0xa0>
8112c380:	e0bfff17 	ldw	r2,-4(fp)
8112c384:	00c00084 	movi	r3,2
8112c388:	10c00005 	stb	r3,0(r2)
8112c38c:	0005883a 	mov	r2,zero
8112c390:	00007806 	br	8112c574 <OSQPend+0x280>
8112c394:	d0a07103 	ldbu	r2,-32316(gp)
8112c398:	10803fcc 	andi	r2,r2,255
8112c39c:	10000526 	beq	r2,zero,8112c3b4 <OSQPend+0xc0>
8112c3a0:	e0bfff17 	ldw	r2,-4(fp)
8112c3a4:	00c00344 	movi	r3,13
8112c3a8:	10c00005 	stb	r3,0(r2)
8112c3ac:	0005883a 	mov	r2,zero
8112c3b0:	00007006 	br	8112c574 <OSQPend+0x280>
8112c3b4:	0005303a 	rdctl	r2,status
8112c3b8:	e0bffc15 	stw	r2,-16(fp)
8112c3bc:	e0fffc17 	ldw	r3,-16(fp)
8112c3c0:	00bfff84 	movi	r2,-2
8112c3c4:	1884703a 	and	r2,r3,r2
8112c3c8:	1001703a 	wrctl	status,r2
8112c3cc:	e0bffc17 	ldw	r2,-16(fp)
8112c3d0:	e0bff615 	stw	r2,-40(fp)
8112c3d4:	e0bffd17 	ldw	r2,-12(fp)
8112c3d8:	10800117 	ldw	r2,4(r2)
8112c3dc:	e0bff815 	stw	r2,-32(fp)
8112c3e0:	e0bff817 	ldw	r2,-32(fp)
8112c3e4:	1080058b 	ldhu	r2,22(r2)
8112c3e8:	10bfffcc 	andi	r2,r2,65535
8112c3ec:	10001e26 	beq	r2,zero,8112c468 <OSQPend+0x174>
8112c3f0:	e0bff817 	ldw	r2,-32(fp)
8112c3f4:	10800417 	ldw	r2,16(r2)
8112c3f8:	11000104 	addi	r4,r2,4
8112c3fc:	e0fff817 	ldw	r3,-32(fp)
8112c400:	19000415 	stw	r4,16(r3)
8112c404:	10800017 	ldw	r2,0(r2)
8112c408:	e0bff515 	stw	r2,-44(fp)
8112c40c:	e0bff817 	ldw	r2,-32(fp)
8112c410:	1080058b 	ldhu	r2,22(r2)
8112c414:	10bfffc4 	addi	r2,r2,-1
8112c418:	1007883a 	mov	r3,r2
8112c41c:	e0bff817 	ldw	r2,-32(fp)
8112c420:	10c0058d 	sth	r3,22(r2)
8112c424:	e0bff817 	ldw	r2,-32(fp)
8112c428:	10c00417 	ldw	r3,16(r2)
8112c42c:	e0bff817 	ldw	r2,-32(fp)
8112c430:	10800217 	ldw	r2,8(r2)
8112c434:	1880041e 	bne	r3,r2,8112c448 <OSQPend+0x154>
8112c438:	e0bff817 	ldw	r2,-32(fp)
8112c43c:	10c00117 	ldw	r3,4(r2)
8112c440:	e0bff817 	ldw	r2,-32(fp)
8112c444:	10c00415 	stw	r3,16(r2)
8112c448:	e0bff617 	ldw	r2,-40(fp)
8112c44c:	e0bff715 	stw	r2,-36(fp)
8112c450:	e0bff717 	ldw	r2,-36(fp)
8112c454:	1001703a 	wrctl	status,r2
8112c458:	e0bfff17 	ldw	r2,-4(fp)
8112c45c:	10000005 	stb	zero,0(r2)
8112c460:	e0bff517 	ldw	r2,-44(fp)
8112c464:	00004306 	br	8112c574 <OSQPend+0x280>
8112c468:	d0a08417 	ldw	r2,-32240(gp)
8112c46c:	d0e08417 	ldw	r3,-32240(gp)
8112c470:	18c00c03 	ldbu	r3,48(r3)
8112c474:	18c00114 	ori	r3,r3,4
8112c478:	10c00c05 	stb	r3,48(r2)
8112c47c:	d0a08417 	ldw	r2,-32240(gp)
8112c480:	10000c45 	stb	zero,49(r2)
8112c484:	d0a08417 	ldw	r2,-32240(gp)
8112c488:	e0fffe0b 	ldhu	r3,-8(fp)
8112c48c:	10c00b8d 	sth	r3,46(r2)
8112c490:	e13ffd17 	ldw	r4,-12(fp)
8112c494:	1127a200 	call	81127a20 <OS_EventTaskWait>
8112c498:	e0bff617 	ldw	r2,-40(fp)
8112c49c:	e0bffb15 	stw	r2,-20(fp)
8112c4a0:	e0bffb17 	ldw	r2,-20(fp)
8112c4a4:	1001703a 	wrctl	status,r2
8112c4a8:	112833c0 	call	8112833c <OS_Sched>
8112c4ac:	0005303a 	rdctl	r2,status
8112c4b0:	e0bff915 	stw	r2,-28(fp)
8112c4b4:	e0fff917 	ldw	r3,-28(fp)
8112c4b8:	00bfff84 	movi	r2,-2
8112c4bc:	1884703a 	and	r2,r3,r2
8112c4c0:	1001703a 	wrctl	status,r2
8112c4c4:	e0bff917 	ldw	r2,-28(fp)
8112c4c8:	e0bff615 	stw	r2,-40(fp)
8112c4cc:	d0a08417 	ldw	r2,-32240(gp)
8112c4d0:	10800c43 	ldbu	r2,49(r2)
8112c4d4:	10803fcc 	andi	r2,r2,255
8112c4d8:	10000326 	beq	r2,zero,8112c4e8 <OSQPend+0x1f4>
8112c4dc:	108000a0 	cmpeqi	r2,r2,2
8112c4e0:	1000071e 	bne	r2,zero,8112c500 <OSQPend+0x20c>
8112c4e4:	00000b06 	br	8112c514 <OSQPend+0x220>
8112c4e8:	d0a08417 	ldw	r2,-32240(gp)
8112c4ec:	10800917 	ldw	r2,36(r2)
8112c4f0:	e0bff515 	stw	r2,-44(fp)
8112c4f4:	e0bfff17 	ldw	r2,-4(fp)
8112c4f8:	10000005 	stb	zero,0(r2)
8112c4fc:	00000e06 	br	8112c538 <OSQPend+0x244>
8112c500:	e03ff515 	stw	zero,-44(fp)
8112c504:	e0bfff17 	ldw	r2,-4(fp)
8112c508:	00c00384 	movi	r3,14
8112c50c:	10c00005 	stb	r3,0(r2)
8112c510:	00000906 	br	8112c538 <OSQPend+0x244>
8112c514:	d0a08417 	ldw	r2,-32240(gp)
8112c518:	e17ffd17 	ldw	r5,-12(fp)
8112c51c:	1009883a 	mov	r4,r2
8112c520:	1127c900 	call	81127c90 <OS_EventTaskRemove>
8112c524:	e03ff515 	stw	zero,-44(fp)
8112c528:	e0bfff17 	ldw	r2,-4(fp)
8112c52c:	00c00284 	movi	r3,10
8112c530:	10c00005 	stb	r3,0(r2)
8112c534:	0001883a 	nop
8112c538:	d0a08417 	ldw	r2,-32240(gp)
8112c53c:	10000c05 	stb	zero,48(r2)
8112c540:	d0a08417 	ldw	r2,-32240(gp)
8112c544:	10000c45 	stb	zero,49(r2)
8112c548:	d0a08417 	ldw	r2,-32240(gp)
8112c54c:	10000715 	stw	zero,28(r2)
8112c550:	d0a08417 	ldw	r2,-32240(gp)
8112c554:	10000815 	stw	zero,32(r2)
8112c558:	d0a08417 	ldw	r2,-32240(gp)
8112c55c:	10000915 	stw	zero,36(r2)
8112c560:	e0bff617 	ldw	r2,-40(fp)
8112c564:	e0bffa15 	stw	r2,-24(fp)
8112c568:	e0bffa17 	ldw	r2,-24(fp)
8112c56c:	1001703a 	wrctl	status,r2
8112c570:	e0bff517 	ldw	r2,-44(fp)
8112c574:	e037883a 	mov	sp,fp
8112c578:	dfc00117 	ldw	ra,4(sp)
8112c57c:	df000017 	ldw	fp,0(sp)
8112c580:	dec00204 	addi	sp,sp,8
8112c584:	f800283a 	ret

8112c588 <OSQPendAbort>:
8112c588:	defff604 	addi	sp,sp,-40
8112c58c:	de00012e 	bgeu	sp,et,8112c594 <OSQPendAbort+0xc>
8112c590:	003b68fa 	trap	3
8112c594:	dfc00915 	stw	ra,36(sp)
8112c598:	df000815 	stw	fp,32(sp)
8112c59c:	df000804 	addi	fp,sp,32
8112c5a0:	e13ffd15 	stw	r4,-12(fp)
8112c5a4:	2805883a 	mov	r2,r5
8112c5a8:	e1bfff15 	stw	r6,-4(fp)
8112c5ac:	e0bffe05 	stb	r2,-8(fp)
8112c5b0:	e03ff915 	stw	zero,-28(fp)
8112c5b4:	e0bfff17 	ldw	r2,-4(fp)
8112c5b8:	1000021e 	bne	r2,zero,8112c5c4 <OSQPendAbort+0x3c>
8112c5bc:	0005883a 	mov	r2,zero
8112c5c0:	00004906 	br	8112c6e8 <OSQPendAbort+0x160>
8112c5c4:	e0bffd17 	ldw	r2,-12(fp)
8112c5c8:	1000051e 	bne	r2,zero,8112c5e0 <OSQPendAbort+0x58>
8112c5cc:	e0bfff17 	ldw	r2,-4(fp)
8112c5d0:	00c00104 	movi	r3,4
8112c5d4:	10c00005 	stb	r3,0(r2)
8112c5d8:	0005883a 	mov	r2,zero
8112c5dc:	00004206 	br	8112c6e8 <OSQPendAbort+0x160>
8112c5e0:	e0bffd17 	ldw	r2,-12(fp)
8112c5e4:	10800003 	ldbu	r2,0(r2)
8112c5e8:	10803fcc 	andi	r2,r2,255
8112c5ec:	108000a0 	cmpeqi	r2,r2,2
8112c5f0:	1000051e 	bne	r2,zero,8112c608 <OSQPendAbort+0x80>
8112c5f4:	e0bfff17 	ldw	r2,-4(fp)
8112c5f8:	00c00044 	movi	r3,1
8112c5fc:	10c00005 	stb	r3,0(r2)
8112c600:	0005883a 	mov	r2,zero
8112c604:	00003806 	br	8112c6e8 <OSQPendAbort+0x160>
8112c608:	0005303a 	rdctl	r2,status
8112c60c:	e0bffc15 	stw	r2,-16(fp)
8112c610:	e0fffc17 	ldw	r3,-16(fp)
8112c614:	00bfff84 	movi	r2,-2
8112c618:	1884703a 	and	r2,r3,r2
8112c61c:	1001703a 	wrctl	status,r2
8112c620:	e0bffc17 	ldw	r2,-16(fp)
8112c624:	e0bff915 	stw	r2,-28(fp)
8112c628:	e0bffd17 	ldw	r2,-12(fp)
8112c62c:	10800283 	ldbu	r2,10(r2)
8112c630:	10803fcc 	andi	r2,r2,255
8112c634:	10002526 	beq	r2,zero,8112c6cc <OSQPendAbort+0x144>
8112c638:	e03ff805 	stb	zero,-32(fp)
8112c63c:	e0bffe03 	ldbu	r2,-8(fp)
8112c640:	10800060 	cmpeqi	r2,r2,1
8112c644:	10000e26 	beq	r2,zero,8112c680 <OSQPendAbort+0xf8>
8112c648:	00000806 	br	8112c66c <OSQPendAbort+0xe4>
8112c64c:	01c00084 	movi	r7,2
8112c650:	01800104 	movi	r6,4
8112c654:	000b883a 	mov	r5,zero
8112c658:	e13ffd17 	ldw	r4,-12(fp)
8112c65c:	11278800 	call	81127880 <OS_EventTaskRdy>
8112c660:	e0bff803 	ldbu	r2,-32(fp)
8112c664:	10800044 	addi	r2,r2,1
8112c668:	e0bff805 	stb	r2,-32(fp)
8112c66c:	e0bffd17 	ldw	r2,-12(fp)
8112c670:	10800283 	ldbu	r2,10(r2)
8112c674:	10803fcc 	andi	r2,r2,255
8112c678:	103ff41e 	bne	r2,zero,8112c64c <__reset+0xfb10c64c>
8112c67c:	00000906 	br	8112c6a4 <OSQPendAbort+0x11c>
8112c680:	01c00084 	movi	r7,2
8112c684:	01800104 	movi	r6,4
8112c688:	000b883a 	mov	r5,zero
8112c68c:	e13ffd17 	ldw	r4,-12(fp)
8112c690:	11278800 	call	81127880 <OS_EventTaskRdy>
8112c694:	e0bff803 	ldbu	r2,-32(fp)
8112c698:	10800044 	addi	r2,r2,1
8112c69c:	e0bff805 	stb	r2,-32(fp)
8112c6a0:	0001883a 	nop
8112c6a4:	e0bff917 	ldw	r2,-28(fp)
8112c6a8:	e0bffa15 	stw	r2,-24(fp)
8112c6ac:	e0bffa17 	ldw	r2,-24(fp)
8112c6b0:	1001703a 	wrctl	status,r2
8112c6b4:	112833c0 	call	8112833c <OS_Sched>
8112c6b8:	e0bfff17 	ldw	r2,-4(fp)
8112c6bc:	00c00384 	movi	r3,14
8112c6c0:	10c00005 	stb	r3,0(r2)
8112c6c4:	e0bff803 	ldbu	r2,-32(fp)
8112c6c8:	00000706 	br	8112c6e8 <OSQPendAbort+0x160>
8112c6cc:	e0bff917 	ldw	r2,-28(fp)
8112c6d0:	e0bffb15 	stw	r2,-20(fp)
8112c6d4:	e0bffb17 	ldw	r2,-20(fp)
8112c6d8:	1001703a 	wrctl	status,r2
8112c6dc:	e0bfff17 	ldw	r2,-4(fp)
8112c6e0:	10000005 	stb	zero,0(r2)
8112c6e4:	0005883a 	mov	r2,zero
8112c6e8:	e037883a 	mov	sp,fp
8112c6ec:	dfc00117 	ldw	ra,4(sp)
8112c6f0:	df000017 	ldw	fp,0(sp)
8112c6f4:	dec00204 	addi	sp,sp,8
8112c6f8:	f800283a 	ret

8112c6fc <OSQPost>:
8112c6fc:	defff604 	addi	sp,sp,-40
8112c700:	de00012e 	bgeu	sp,et,8112c708 <OSQPost+0xc>
8112c704:	003b68fa 	trap	3
8112c708:	dfc00915 	stw	ra,36(sp)
8112c70c:	df000815 	stw	fp,32(sp)
8112c710:	df000804 	addi	fp,sp,32
8112c714:	e13ffe15 	stw	r4,-8(fp)
8112c718:	e17fff15 	stw	r5,-4(fp)
8112c71c:	e03ff815 	stw	zero,-32(fp)
8112c720:	e0bffe17 	ldw	r2,-8(fp)
8112c724:	1000021e 	bne	r2,zero,8112c730 <OSQPost+0x34>
8112c728:	00800104 	movi	r2,4
8112c72c:	00004a06 	br	8112c858 <OSQPost+0x15c>
8112c730:	e0bffe17 	ldw	r2,-8(fp)
8112c734:	10800003 	ldbu	r2,0(r2)
8112c738:	10803fcc 	andi	r2,r2,255
8112c73c:	108000a0 	cmpeqi	r2,r2,2
8112c740:	1000021e 	bne	r2,zero,8112c74c <OSQPost+0x50>
8112c744:	00800044 	movi	r2,1
8112c748:	00004306 	br	8112c858 <OSQPost+0x15c>
8112c74c:	0005303a 	rdctl	r2,status
8112c750:	e0bffd15 	stw	r2,-12(fp)
8112c754:	e0fffd17 	ldw	r3,-12(fp)
8112c758:	00bfff84 	movi	r2,-2
8112c75c:	1884703a 	and	r2,r3,r2
8112c760:	1001703a 	wrctl	status,r2
8112c764:	e0bffd17 	ldw	r2,-12(fp)
8112c768:	e0bff815 	stw	r2,-32(fp)
8112c76c:	e0bffe17 	ldw	r2,-8(fp)
8112c770:	10800283 	ldbu	r2,10(r2)
8112c774:	10803fcc 	andi	r2,r2,255
8112c778:	10000c26 	beq	r2,zero,8112c7ac <OSQPost+0xb0>
8112c77c:	000f883a 	mov	r7,zero
8112c780:	01800104 	movi	r6,4
8112c784:	e17fff17 	ldw	r5,-4(fp)
8112c788:	e13ffe17 	ldw	r4,-8(fp)
8112c78c:	11278800 	call	81127880 <OS_EventTaskRdy>
8112c790:	e0bff817 	ldw	r2,-32(fp)
8112c794:	e0bff915 	stw	r2,-28(fp)
8112c798:	e0bff917 	ldw	r2,-28(fp)
8112c79c:	1001703a 	wrctl	status,r2
8112c7a0:	112833c0 	call	8112833c <OS_Sched>
8112c7a4:	0005883a 	mov	r2,zero
8112c7a8:	00002b06 	br	8112c858 <OSQPost+0x15c>
8112c7ac:	e0bffe17 	ldw	r2,-8(fp)
8112c7b0:	10800117 	ldw	r2,4(r2)
8112c7b4:	e0bffb15 	stw	r2,-20(fp)
8112c7b8:	e0bffb17 	ldw	r2,-20(fp)
8112c7bc:	10c0058b 	ldhu	r3,22(r2)
8112c7c0:	e0bffb17 	ldw	r2,-20(fp)
8112c7c4:	1080050b 	ldhu	r2,20(r2)
8112c7c8:	18ffffcc 	andi	r3,r3,65535
8112c7cc:	10bfffcc 	andi	r2,r2,65535
8112c7d0:	18800636 	bltu	r3,r2,8112c7ec <OSQPost+0xf0>
8112c7d4:	e0bff817 	ldw	r2,-32(fp)
8112c7d8:	e0bffa15 	stw	r2,-24(fp)
8112c7dc:	e0bffa17 	ldw	r2,-24(fp)
8112c7e0:	1001703a 	wrctl	status,r2
8112c7e4:	00800784 	movi	r2,30
8112c7e8:	00001b06 	br	8112c858 <OSQPost+0x15c>
8112c7ec:	e0bffb17 	ldw	r2,-20(fp)
8112c7f0:	10800317 	ldw	r2,12(r2)
8112c7f4:	11000104 	addi	r4,r2,4
8112c7f8:	e0fffb17 	ldw	r3,-20(fp)
8112c7fc:	19000315 	stw	r4,12(r3)
8112c800:	e0ffff17 	ldw	r3,-4(fp)
8112c804:	10c00015 	stw	r3,0(r2)
8112c808:	e0bffb17 	ldw	r2,-20(fp)
8112c80c:	1080058b 	ldhu	r2,22(r2)
8112c810:	10800044 	addi	r2,r2,1
8112c814:	1007883a 	mov	r3,r2
8112c818:	e0bffb17 	ldw	r2,-20(fp)
8112c81c:	10c0058d 	sth	r3,22(r2)
8112c820:	e0bffb17 	ldw	r2,-20(fp)
8112c824:	10c00317 	ldw	r3,12(r2)
8112c828:	e0bffb17 	ldw	r2,-20(fp)
8112c82c:	10800217 	ldw	r2,8(r2)
8112c830:	1880041e 	bne	r3,r2,8112c844 <OSQPost+0x148>
8112c834:	e0bffb17 	ldw	r2,-20(fp)
8112c838:	10c00117 	ldw	r3,4(r2)
8112c83c:	e0bffb17 	ldw	r2,-20(fp)
8112c840:	10c00315 	stw	r3,12(r2)
8112c844:	e0bff817 	ldw	r2,-32(fp)
8112c848:	e0bffc15 	stw	r2,-16(fp)
8112c84c:	e0bffc17 	ldw	r2,-16(fp)
8112c850:	1001703a 	wrctl	status,r2
8112c854:	0005883a 	mov	r2,zero
8112c858:	e037883a 	mov	sp,fp
8112c85c:	dfc00117 	ldw	ra,4(sp)
8112c860:	df000017 	ldw	fp,0(sp)
8112c864:	dec00204 	addi	sp,sp,8
8112c868:	f800283a 	ret

8112c86c <OSQPostFront>:
8112c86c:	defff604 	addi	sp,sp,-40
8112c870:	de00012e 	bgeu	sp,et,8112c878 <OSQPostFront+0xc>
8112c874:	003b68fa 	trap	3
8112c878:	dfc00915 	stw	ra,36(sp)
8112c87c:	df000815 	stw	fp,32(sp)
8112c880:	df000804 	addi	fp,sp,32
8112c884:	e13ffe15 	stw	r4,-8(fp)
8112c888:	e17fff15 	stw	r5,-4(fp)
8112c88c:	e03ff815 	stw	zero,-32(fp)
8112c890:	e0bffe17 	ldw	r2,-8(fp)
8112c894:	1000021e 	bne	r2,zero,8112c8a0 <OSQPostFront+0x34>
8112c898:	00800104 	movi	r2,4
8112c89c:	00004c06 	br	8112c9d0 <OSQPostFront+0x164>
8112c8a0:	e0bffe17 	ldw	r2,-8(fp)
8112c8a4:	10800003 	ldbu	r2,0(r2)
8112c8a8:	10803fcc 	andi	r2,r2,255
8112c8ac:	108000a0 	cmpeqi	r2,r2,2
8112c8b0:	1000021e 	bne	r2,zero,8112c8bc <OSQPostFront+0x50>
8112c8b4:	00800044 	movi	r2,1
8112c8b8:	00004506 	br	8112c9d0 <OSQPostFront+0x164>
8112c8bc:	0005303a 	rdctl	r2,status
8112c8c0:	e0bffd15 	stw	r2,-12(fp)
8112c8c4:	e0fffd17 	ldw	r3,-12(fp)
8112c8c8:	00bfff84 	movi	r2,-2
8112c8cc:	1884703a 	and	r2,r3,r2
8112c8d0:	1001703a 	wrctl	status,r2
8112c8d4:	e0bffd17 	ldw	r2,-12(fp)
8112c8d8:	e0bff815 	stw	r2,-32(fp)
8112c8dc:	e0bffe17 	ldw	r2,-8(fp)
8112c8e0:	10800283 	ldbu	r2,10(r2)
8112c8e4:	10803fcc 	andi	r2,r2,255
8112c8e8:	10000c26 	beq	r2,zero,8112c91c <OSQPostFront+0xb0>
8112c8ec:	000f883a 	mov	r7,zero
8112c8f0:	01800104 	movi	r6,4
8112c8f4:	e17fff17 	ldw	r5,-4(fp)
8112c8f8:	e13ffe17 	ldw	r4,-8(fp)
8112c8fc:	11278800 	call	81127880 <OS_EventTaskRdy>
8112c900:	e0bff817 	ldw	r2,-32(fp)
8112c904:	e0bff915 	stw	r2,-28(fp)
8112c908:	e0bff917 	ldw	r2,-28(fp)
8112c90c:	1001703a 	wrctl	status,r2
8112c910:	112833c0 	call	8112833c <OS_Sched>
8112c914:	0005883a 	mov	r2,zero
8112c918:	00002d06 	br	8112c9d0 <OSQPostFront+0x164>
8112c91c:	e0bffe17 	ldw	r2,-8(fp)
8112c920:	10800117 	ldw	r2,4(r2)
8112c924:	e0bffb15 	stw	r2,-20(fp)
8112c928:	e0bffb17 	ldw	r2,-20(fp)
8112c92c:	10c0058b 	ldhu	r3,22(r2)
8112c930:	e0bffb17 	ldw	r2,-20(fp)
8112c934:	1080050b 	ldhu	r2,20(r2)
8112c938:	18ffffcc 	andi	r3,r3,65535
8112c93c:	10bfffcc 	andi	r2,r2,65535
8112c940:	18800636 	bltu	r3,r2,8112c95c <OSQPostFront+0xf0>
8112c944:	e0bff817 	ldw	r2,-32(fp)
8112c948:	e0bffa15 	stw	r2,-24(fp)
8112c94c:	e0bffa17 	ldw	r2,-24(fp)
8112c950:	1001703a 	wrctl	status,r2
8112c954:	00800784 	movi	r2,30
8112c958:	00001d06 	br	8112c9d0 <OSQPostFront+0x164>
8112c95c:	e0bffb17 	ldw	r2,-20(fp)
8112c960:	10c00417 	ldw	r3,16(r2)
8112c964:	e0bffb17 	ldw	r2,-20(fp)
8112c968:	10800117 	ldw	r2,4(r2)
8112c96c:	1880041e 	bne	r3,r2,8112c980 <OSQPostFront+0x114>
8112c970:	e0bffb17 	ldw	r2,-20(fp)
8112c974:	10c00217 	ldw	r3,8(r2)
8112c978:	e0bffb17 	ldw	r2,-20(fp)
8112c97c:	10c00415 	stw	r3,16(r2)
8112c980:	e0bffb17 	ldw	r2,-20(fp)
8112c984:	10800417 	ldw	r2,16(r2)
8112c988:	10ffff04 	addi	r3,r2,-4
8112c98c:	e0bffb17 	ldw	r2,-20(fp)
8112c990:	10c00415 	stw	r3,16(r2)
8112c994:	e0bffb17 	ldw	r2,-20(fp)
8112c998:	10800417 	ldw	r2,16(r2)
8112c99c:	e0ffff17 	ldw	r3,-4(fp)
8112c9a0:	10c00015 	stw	r3,0(r2)
8112c9a4:	e0bffb17 	ldw	r2,-20(fp)
8112c9a8:	1080058b 	ldhu	r2,22(r2)
8112c9ac:	10800044 	addi	r2,r2,1
8112c9b0:	1007883a 	mov	r3,r2
8112c9b4:	e0bffb17 	ldw	r2,-20(fp)
8112c9b8:	10c0058d 	sth	r3,22(r2)
8112c9bc:	e0bff817 	ldw	r2,-32(fp)
8112c9c0:	e0bffc15 	stw	r2,-16(fp)
8112c9c4:	e0bffc17 	ldw	r2,-16(fp)
8112c9c8:	1001703a 	wrctl	status,r2
8112c9cc:	0005883a 	mov	r2,zero
8112c9d0:	e037883a 	mov	sp,fp
8112c9d4:	dfc00117 	ldw	ra,4(sp)
8112c9d8:	df000017 	ldw	fp,0(sp)
8112c9dc:	dec00204 	addi	sp,sp,8
8112c9e0:	f800283a 	ret

8112c9e4 <OSQPostOpt>:
8112c9e4:	defff504 	addi	sp,sp,-44
8112c9e8:	de00012e 	bgeu	sp,et,8112c9f0 <OSQPostOpt+0xc>
8112c9ec:	003b68fa 	trap	3
8112c9f0:	dfc00a15 	stw	ra,40(sp)
8112c9f4:	df000915 	stw	fp,36(sp)
8112c9f8:	df000904 	addi	fp,sp,36
8112c9fc:	e13ffd15 	stw	r4,-12(fp)
8112ca00:	e17ffe15 	stw	r5,-8(fp)
8112ca04:	3005883a 	mov	r2,r6
8112ca08:	e0bfff05 	stb	r2,-4(fp)
8112ca0c:	e03ff715 	stw	zero,-36(fp)
8112ca10:	e0bffd17 	ldw	r2,-12(fp)
8112ca14:	1000021e 	bne	r2,zero,8112ca20 <OSQPostOpt+0x3c>
8112ca18:	00800104 	movi	r2,4
8112ca1c:	00007106 	br	8112cbe4 <OSQPostOpt+0x200>
8112ca20:	e0bffd17 	ldw	r2,-12(fp)
8112ca24:	10800003 	ldbu	r2,0(r2)
8112ca28:	10803fcc 	andi	r2,r2,255
8112ca2c:	108000a0 	cmpeqi	r2,r2,2
8112ca30:	1000021e 	bne	r2,zero,8112ca3c <OSQPostOpt+0x58>
8112ca34:	00800044 	movi	r2,1
8112ca38:	00006a06 	br	8112cbe4 <OSQPostOpt+0x200>
8112ca3c:	0005303a 	rdctl	r2,status
8112ca40:	e0bffc15 	stw	r2,-16(fp)
8112ca44:	e0fffc17 	ldw	r3,-16(fp)
8112ca48:	00bfff84 	movi	r2,-2
8112ca4c:	1884703a 	and	r2,r3,r2
8112ca50:	1001703a 	wrctl	status,r2
8112ca54:	e0bffc17 	ldw	r2,-16(fp)
8112ca58:	e0bff715 	stw	r2,-36(fp)
8112ca5c:	e0bffd17 	ldw	r2,-12(fp)
8112ca60:	10800283 	ldbu	r2,10(r2)
8112ca64:	10803fcc 	andi	r2,r2,255
8112ca68:	10001d26 	beq	r2,zero,8112cae0 <OSQPostOpt+0xfc>
8112ca6c:	e0bfff03 	ldbu	r2,-4(fp)
8112ca70:	1080004c 	andi	r2,r2,1
8112ca74:	10000b26 	beq	r2,zero,8112caa4 <OSQPostOpt+0xc0>
8112ca78:	00000506 	br	8112ca90 <OSQPostOpt+0xac>
8112ca7c:	000f883a 	mov	r7,zero
8112ca80:	01800104 	movi	r6,4
8112ca84:	e17ffe17 	ldw	r5,-8(fp)
8112ca88:	e13ffd17 	ldw	r4,-12(fp)
8112ca8c:	11278800 	call	81127880 <OS_EventTaskRdy>
8112ca90:	e0bffd17 	ldw	r2,-12(fp)
8112ca94:	10800283 	ldbu	r2,10(r2)
8112ca98:	10803fcc 	andi	r2,r2,255
8112ca9c:	103ff71e 	bne	r2,zero,8112ca7c <__reset+0xfb10ca7c>
8112caa0:	00000506 	br	8112cab8 <OSQPostOpt+0xd4>
8112caa4:	000f883a 	mov	r7,zero
8112caa8:	01800104 	movi	r6,4
8112caac:	e17ffe17 	ldw	r5,-8(fp)
8112cab0:	e13ffd17 	ldw	r4,-12(fp)
8112cab4:	11278800 	call	81127880 <OS_EventTaskRdy>
8112cab8:	e0bff717 	ldw	r2,-36(fp)
8112cabc:	e0bff815 	stw	r2,-32(fp)
8112cac0:	e0bff817 	ldw	r2,-32(fp)
8112cac4:	1001703a 	wrctl	status,r2
8112cac8:	e0bfff03 	ldbu	r2,-4(fp)
8112cacc:	1080010c 	andi	r2,r2,4
8112cad0:	1000011e 	bne	r2,zero,8112cad8 <OSQPostOpt+0xf4>
8112cad4:	112833c0 	call	8112833c <OS_Sched>
8112cad8:	0005883a 	mov	r2,zero
8112cadc:	00004106 	br	8112cbe4 <OSQPostOpt+0x200>
8112cae0:	e0bffd17 	ldw	r2,-12(fp)
8112cae4:	10800117 	ldw	r2,4(r2)
8112cae8:	e0bffa15 	stw	r2,-24(fp)
8112caec:	e0bffa17 	ldw	r2,-24(fp)
8112caf0:	10c0058b 	ldhu	r3,22(r2)
8112caf4:	e0bffa17 	ldw	r2,-24(fp)
8112caf8:	1080050b 	ldhu	r2,20(r2)
8112cafc:	18ffffcc 	andi	r3,r3,65535
8112cb00:	10bfffcc 	andi	r2,r2,65535
8112cb04:	18800636 	bltu	r3,r2,8112cb20 <OSQPostOpt+0x13c>
8112cb08:	e0bff717 	ldw	r2,-36(fp)
8112cb0c:	e0bff915 	stw	r2,-28(fp)
8112cb10:	e0bff917 	ldw	r2,-28(fp)
8112cb14:	1001703a 	wrctl	status,r2
8112cb18:	00800784 	movi	r2,30
8112cb1c:	00003106 	br	8112cbe4 <OSQPostOpt+0x200>
8112cb20:	e0bfff03 	ldbu	r2,-4(fp)
8112cb24:	1080008c 	andi	r2,r2,2
8112cb28:	10001326 	beq	r2,zero,8112cb78 <OSQPostOpt+0x194>
8112cb2c:	e0bffa17 	ldw	r2,-24(fp)
8112cb30:	10c00417 	ldw	r3,16(r2)
8112cb34:	e0bffa17 	ldw	r2,-24(fp)
8112cb38:	10800117 	ldw	r2,4(r2)
8112cb3c:	1880041e 	bne	r3,r2,8112cb50 <OSQPostOpt+0x16c>
8112cb40:	e0bffa17 	ldw	r2,-24(fp)
8112cb44:	10c00217 	ldw	r3,8(r2)
8112cb48:	e0bffa17 	ldw	r2,-24(fp)
8112cb4c:	10c00415 	stw	r3,16(r2)
8112cb50:	e0bffa17 	ldw	r2,-24(fp)
8112cb54:	10800417 	ldw	r2,16(r2)
8112cb58:	10ffff04 	addi	r3,r2,-4
8112cb5c:	e0bffa17 	ldw	r2,-24(fp)
8112cb60:	10c00415 	stw	r3,16(r2)
8112cb64:	e0bffa17 	ldw	r2,-24(fp)
8112cb68:	10800417 	ldw	r2,16(r2)
8112cb6c:	e0fffe17 	ldw	r3,-8(fp)
8112cb70:	10c00015 	stw	r3,0(r2)
8112cb74:	00001006 	br	8112cbb8 <OSQPostOpt+0x1d4>
8112cb78:	e0bffa17 	ldw	r2,-24(fp)
8112cb7c:	10800317 	ldw	r2,12(r2)
8112cb80:	11000104 	addi	r4,r2,4
8112cb84:	e0fffa17 	ldw	r3,-24(fp)
8112cb88:	19000315 	stw	r4,12(r3)
8112cb8c:	e0fffe17 	ldw	r3,-8(fp)
8112cb90:	10c00015 	stw	r3,0(r2)
8112cb94:	e0bffa17 	ldw	r2,-24(fp)
8112cb98:	10c00317 	ldw	r3,12(r2)
8112cb9c:	e0bffa17 	ldw	r2,-24(fp)
8112cba0:	10800217 	ldw	r2,8(r2)
8112cba4:	1880041e 	bne	r3,r2,8112cbb8 <OSQPostOpt+0x1d4>
8112cba8:	e0bffa17 	ldw	r2,-24(fp)
8112cbac:	10c00117 	ldw	r3,4(r2)
8112cbb0:	e0bffa17 	ldw	r2,-24(fp)
8112cbb4:	10c00315 	stw	r3,12(r2)
8112cbb8:	e0bffa17 	ldw	r2,-24(fp)
8112cbbc:	1080058b 	ldhu	r2,22(r2)
8112cbc0:	10800044 	addi	r2,r2,1
8112cbc4:	1007883a 	mov	r3,r2
8112cbc8:	e0bffa17 	ldw	r2,-24(fp)
8112cbcc:	10c0058d 	sth	r3,22(r2)
8112cbd0:	e0bff717 	ldw	r2,-36(fp)
8112cbd4:	e0bffb15 	stw	r2,-20(fp)
8112cbd8:	e0bffb17 	ldw	r2,-20(fp)
8112cbdc:	1001703a 	wrctl	status,r2
8112cbe0:	0005883a 	mov	r2,zero
8112cbe4:	e037883a 	mov	sp,fp
8112cbe8:	dfc00117 	ldw	ra,4(sp)
8112cbec:	df000017 	ldw	fp,0(sp)
8112cbf0:	dec00204 	addi	sp,sp,8
8112cbf4:	f800283a 	ret

8112cbf8 <OSQQuery>:
8112cbf8:	defff604 	addi	sp,sp,-40
8112cbfc:	de00012e 	bgeu	sp,et,8112cc04 <OSQQuery+0xc>
8112cc00:	003b68fa 	trap	3
8112cc04:	df000915 	stw	fp,36(sp)
8112cc08:	df000904 	addi	fp,sp,36
8112cc0c:	e13ffe15 	stw	r4,-8(fp)
8112cc10:	e17fff15 	stw	r5,-4(fp)
8112cc14:	e03ffa15 	stw	zero,-24(fp)
8112cc18:	e0bffe17 	ldw	r2,-8(fp)
8112cc1c:	1000021e 	bne	r2,zero,8112cc28 <OSQQuery+0x30>
8112cc20:	00800104 	movi	r2,4
8112cc24:	00004906 	br	8112cd4c <OSQQuery+0x154>
8112cc28:	e0bfff17 	ldw	r2,-4(fp)
8112cc2c:	1000021e 	bne	r2,zero,8112cc38 <OSQQuery+0x40>
8112cc30:	00800244 	movi	r2,9
8112cc34:	00004506 	br	8112cd4c <OSQQuery+0x154>
8112cc38:	e0bffe17 	ldw	r2,-8(fp)
8112cc3c:	10800003 	ldbu	r2,0(r2)
8112cc40:	10803fcc 	andi	r2,r2,255
8112cc44:	108000a0 	cmpeqi	r2,r2,2
8112cc48:	1000021e 	bne	r2,zero,8112cc54 <OSQQuery+0x5c>
8112cc4c:	00800044 	movi	r2,1
8112cc50:	00003e06 	br	8112cd4c <OSQQuery+0x154>
8112cc54:	0005303a 	rdctl	r2,status
8112cc58:	e0bffd15 	stw	r2,-12(fp)
8112cc5c:	e0fffd17 	ldw	r3,-12(fp)
8112cc60:	00bfff84 	movi	r2,-2
8112cc64:	1884703a 	and	r2,r3,r2
8112cc68:	1001703a 	wrctl	status,r2
8112cc6c:	e0bffd17 	ldw	r2,-12(fp)
8112cc70:	e0bffa15 	stw	r2,-24(fp)
8112cc74:	e0bffe17 	ldw	r2,-8(fp)
8112cc78:	10c00283 	ldbu	r3,10(r2)
8112cc7c:	e0bfff17 	ldw	r2,-4(fp)
8112cc80:	10c00385 	stb	r3,14(r2)
8112cc84:	e0bffe17 	ldw	r2,-8(fp)
8112cc88:	108002c4 	addi	r2,r2,11
8112cc8c:	e0bff815 	stw	r2,-32(fp)
8112cc90:	e0bfff17 	ldw	r2,-4(fp)
8112cc94:	10800204 	addi	r2,r2,8
8112cc98:	e0bff915 	stw	r2,-28(fp)
8112cc9c:	e03ff705 	stb	zero,-36(fp)
8112cca0:	00000b06 	br	8112ccd0 <OSQQuery+0xd8>
8112cca4:	e0bff917 	ldw	r2,-28(fp)
8112cca8:	10c00044 	addi	r3,r2,1
8112ccac:	e0fff915 	stw	r3,-28(fp)
8112ccb0:	e0fff817 	ldw	r3,-32(fp)
8112ccb4:	19000044 	addi	r4,r3,1
8112ccb8:	e13ff815 	stw	r4,-32(fp)
8112ccbc:	18c00003 	ldbu	r3,0(r3)
8112ccc0:	10c00005 	stb	r3,0(r2)
8112ccc4:	e0bff703 	ldbu	r2,-36(fp)
8112ccc8:	10800044 	addi	r2,r2,1
8112cccc:	e0bff705 	stb	r2,-36(fp)
8112ccd0:	e0bff703 	ldbu	r2,-36(fp)
8112ccd4:	108001b0 	cmpltui	r2,r2,6
8112ccd8:	103ff21e 	bne	r2,zero,8112cca4 <__reset+0xfb10cca4>
8112ccdc:	e0bffe17 	ldw	r2,-8(fp)
8112cce0:	10800117 	ldw	r2,4(r2)
8112cce4:	e0bffc15 	stw	r2,-16(fp)
8112cce8:	e0bffc17 	ldw	r2,-16(fp)
8112ccec:	1080058b 	ldhu	r2,22(r2)
8112ccf0:	10bfffcc 	andi	r2,r2,65535
8112ccf4:	10000626 	beq	r2,zero,8112cd10 <OSQQuery+0x118>
8112ccf8:	e0bffc17 	ldw	r2,-16(fp)
8112ccfc:	10800417 	ldw	r2,16(r2)
8112cd00:	10c00017 	ldw	r3,0(r2)
8112cd04:	e0bfff17 	ldw	r2,-4(fp)
8112cd08:	10c00015 	stw	r3,0(r2)
8112cd0c:	00000206 	br	8112cd18 <OSQQuery+0x120>
8112cd10:	e0bfff17 	ldw	r2,-4(fp)
8112cd14:	10000015 	stw	zero,0(r2)
8112cd18:	e0bffc17 	ldw	r2,-16(fp)
8112cd1c:	10c0058b 	ldhu	r3,22(r2)
8112cd20:	e0bfff17 	ldw	r2,-4(fp)
8112cd24:	10c0010d 	sth	r3,4(r2)
8112cd28:	e0bffc17 	ldw	r2,-16(fp)
8112cd2c:	10c0050b 	ldhu	r3,20(r2)
8112cd30:	e0bfff17 	ldw	r2,-4(fp)
8112cd34:	10c0018d 	sth	r3,6(r2)
8112cd38:	e0bffa17 	ldw	r2,-24(fp)
8112cd3c:	e0bffb15 	stw	r2,-20(fp)
8112cd40:	e0bffb17 	ldw	r2,-20(fp)
8112cd44:	1001703a 	wrctl	status,r2
8112cd48:	0005883a 	mov	r2,zero
8112cd4c:	e037883a 	mov	sp,fp
8112cd50:	df000017 	ldw	fp,0(sp)
8112cd54:	dec00104 	addi	sp,sp,4
8112cd58:	f800283a 	ret

8112cd5c <OS_QInit>:
8112cd5c:	defffb04 	addi	sp,sp,-20
8112cd60:	de00012e 	bgeu	sp,et,8112cd68 <OS_QInit+0xc>
8112cd64:	003b68fa 	trap	3
8112cd68:	dfc00415 	stw	ra,16(sp)
8112cd6c:	df000315 	stw	fp,12(sp)
8112cd70:	df000304 	addi	fp,sp,12
8112cd74:	01407804 	movi	r5,480
8112cd78:	01204574 	movhi	r4,33045
8112cd7c:	213cc704 	addi	r4,r4,-3300
8112cd80:	11282700 	call	81128270 <OS_MemClr>
8112cd84:	00a04574 	movhi	r2,33045
8112cd88:	10bcc704 	addi	r2,r2,-3300
8112cd8c:	e0bffe15 	stw	r2,-8(fp)
8112cd90:	00a04574 	movhi	r2,33045
8112cd94:	10bccd04 	addi	r2,r2,-3276
8112cd98:	e0bfff15 	stw	r2,-4(fp)
8112cd9c:	e03ffd0d 	sth	zero,-12(fp)
8112cda0:	00000c06 	br	8112cdd4 <OS_QInit+0x78>
8112cda4:	e0bffe17 	ldw	r2,-8(fp)
8112cda8:	e0ffff17 	ldw	r3,-4(fp)
8112cdac:	10c00015 	stw	r3,0(r2)
8112cdb0:	e0bffe17 	ldw	r2,-8(fp)
8112cdb4:	10800604 	addi	r2,r2,24
8112cdb8:	e0bffe15 	stw	r2,-8(fp)
8112cdbc:	e0bfff17 	ldw	r2,-4(fp)
8112cdc0:	10800604 	addi	r2,r2,24
8112cdc4:	e0bfff15 	stw	r2,-4(fp)
8112cdc8:	e0bffd0b 	ldhu	r2,-12(fp)
8112cdcc:	10800044 	addi	r2,r2,1
8112cdd0:	e0bffd0d 	sth	r2,-12(fp)
8112cdd4:	e0bffd0b 	ldhu	r2,-12(fp)
8112cdd8:	108004f0 	cmpltui	r2,r2,19
8112cddc:	103ff11e 	bne	r2,zero,8112cda4 <__reset+0xfb10cda4>
8112cde0:	e0bffe17 	ldw	r2,-8(fp)
8112cde4:	10000015 	stw	zero,0(r2)
8112cde8:	00a04574 	movhi	r2,33045
8112cdec:	10bcc704 	addi	r2,r2,-3300
8112cdf0:	d0a07f15 	stw	r2,-32260(gp)
8112cdf4:	0001883a 	nop
8112cdf8:	e037883a 	mov	sp,fp
8112cdfc:	dfc00117 	ldw	ra,4(sp)
8112ce00:	df000017 	ldw	fp,0(sp)
8112ce04:	dec00204 	addi	sp,sp,8
8112ce08:	f800283a 	ret

8112ce0c <OSSemAccept>:
8112ce0c:	defffa04 	addi	sp,sp,-24
8112ce10:	de00012e 	bgeu	sp,et,8112ce18 <OSSemAccept+0xc>
8112ce14:	003b68fa 	trap	3
8112ce18:	df000515 	stw	fp,20(sp)
8112ce1c:	df000504 	addi	fp,sp,20
8112ce20:	e13fff15 	stw	r4,-4(fp)
8112ce24:	e03ffb15 	stw	zero,-20(fp)
8112ce28:	e0bfff17 	ldw	r2,-4(fp)
8112ce2c:	1000021e 	bne	r2,zero,8112ce38 <OSSemAccept+0x2c>
8112ce30:	0005883a 	mov	r2,zero
8112ce34:	00001f06 	br	8112ceb4 <OSSemAccept+0xa8>
8112ce38:	e0bfff17 	ldw	r2,-4(fp)
8112ce3c:	10800003 	ldbu	r2,0(r2)
8112ce40:	10803fcc 	andi	r2,r2,255
8112ce44:	108000e0 	cmpeqi	r2,r2,3
8112ce48:	1000021e 	bne	r2,zero,8112ce54 <OSSemAccept+0x48>
8112ce4c:	0005883a 	mov	r2,zero
8112ce50:	00001806 	br	8112ceb4 <OSSemAccept+0xa8>
8112ce54:	0005303a 	rdctl	r2,status
8112ce58:	e0bffe15 	stw	r2,-8(fp)
8112ce5c:	e0fffe17 	ldw	r3,-8(fp)
8112ce60:	00bfff84 	movi	r2,-2
8112ce64:	1884703a 	and	r2,r3,r2
8112ce68:	1001703a 	wrctl	status,r2
8112ce6c:	e0bffe17 	ldw	r2,-8(fp)
8112ce70:	e0bffb15 	stw	r2,-20(fp)
8112ce74:	e0bfff17 	ldw	r2,-4(fp)
8112ce78:	1080020b 	ldhu	r2,8(r2)
8112ce7c:	e0bffd0d 	sth	r2,-12(fp)
8112ce80:	e0bffd0b 	ldhu	r2,-12(fp)
8112ce84:	10000626 	beq	r2,zero,8112cea0 <OSSemAccept+0x94>
8112ce88:	e0bfff17 	ldw	r2,-4(fp)
8112ce8c:	1080020b 	ldhu	r2,8(r2)
8112ce90:	10bfffc4 	addi	r2,r2,-1
8112ce94:	1007883a 	mov	r3,r2
8112ce98:	e0bfff17 	ldw	r2,-4(fp)
8112ce9c:	10c0020d 	sth	r3,8(r2)
8112cea0:	e0bffb17 	ldw	r2,-20(fp)
8112cea4:	e0bffc15 	stw	r2,-16(fp)
8112cea8:	e0bffc17 	ldw	r2,-16(fp)
8112ceac:	1001703a 	wrctl	status,r2
8112ceb0:	e0bffd0b 	ldhu	r2,-12(fp)
8112ceb4:	e037883a 	mov	sp,fp
8112ceb8:	df000017 	ldw	fp,0(sp)
8112cebc:	dec00104 	addi	sp,sp,4
8112cec0:	f800283a 	ret

8112cec4 <OSSemCreate>:
8112cec4:	defff904 	addi	sp,sp,-28
8112cec8:	de00012e 	bgeu	sp,et,8112ced0 <OSSemCreate+0xc>
8112cecc:	003b68fa 	trap	3
8112ced0:	dfc00615 	stw	ra,24(sp)
8112ced4:	df000515 	stw	fp,20(sp)
8112ced8:	df000504 	addi	fp,sp,20
8112cedc:	2005883a 	mov	r2,r4
8112cee0:	e0bfff0d 	sth	r2,-4(fp)
8112cee4:	e03ffb15 	stw	zero,-20(fp)
8112cee8:	d0a08303 	ldbu	r2,-32244(gp)
8112ceec:	10803fcc 	andi	r2,r2,255
8112cef0:	10000226 	beq	r2,zero,8112cefc <OSSemCreate+0x38>
8112cef4:	0005883a 	mov	r2,zero
8112cef8:	00002506 	br	8112cf90 <OSSemCreate+0xcc>
8112cefc:	0005303a 	rdctl	r2,status
8112cf00:	e0bffe15 	stw	r2,-8(fp)
8112cf04:	e0fffe17 	ldw	r3,-8(fp)
8112cf08:	00bfff84 	movi	r2,-2
8112cf0c:	1884703a 	and	r2,r3,r2
8112cf10:	1001703a 	wrctl	status,r2
8112cf14:	e0bffe17 	ldw	r2,-8(fp)
8112cf18:	e0bffb15 	stw	r2,-20(fp)
8112cf1c:	d0a08217 	ldw	r2,-32248(gp)
8112cf20:	e0bffd15 	stw	r2,-12(fp)
8112cf24:	d0a08217 	ldw	r2,-32248(gp)
8112cf28:	10000326 	beq	r2,zero,8112cf38 <OSSemCreate+0x74>
8112cf2c:	d0a08217 	ldw	r2,-32248(gp)
8112cf30:	10800117 	ldw	r2,4(r2)
8112cf34:	d0a08215 	stw	r2,-32248(gp)
8112cf38:	e0bffb17 	ldw	r2,-20(fp)
8112cf3c:	e0bffc15 	stw	r2,-16(fp)
8112cf40:	e0bffc17 	ldw	r2,-16(fp)
8112cf44:	1001703a 	wrctl	status,r2
8112cf48:	e0bffd17 	ldw	r2,-12(fp)
8112cf4c:	10000f26 	beq	r2,zero,8112cf8c <OSSemCreate+0xc8>
8112cf50:	e0bffd17 	ldw	r2,-12(fp)
8112cf54:	00c000c4 	movi	r3,3
8112cf58:	10c00005 	stb	r3,0(r2)
8112cf5c:	e0bffd17 	ldw	r2,-12(fp)
8112cf60:	e0ffff0b 	ldhu	r3,-4(fp)
8112cf64:	10c0020d 	sth	r3,8(r2)
8112cf68:	e0bffd17 	ldw	r2,-12(fp)
8112cf6c:	10000115 	stw	zero,4(r2)
8112cf70:	e0bffd17 	ldw	r2,-12(fp)
8112cf74:	00c00fc4 	movi	r3,63
8112cf78:	10c00445 	stb	r3,17(r2)
8112cf7c:	e0bffd17 	ldw	r2,-12(fp)
8112cf80:	10000485 	stb	zero,18(r2)
8112cf84:	e13ffd17 	ldw	r4,-12(fp)
8112cf88:	1127e580 	call	81127e58 <OS_EventWaitListInit>
8112cf8c:	e0bffd17 	ldw	r2,-12(fp)
8112cf90:	e037883a 	mov	sp,fp
8112cf94:	dfc00117 	ldw	ra,4(sp)
8112cf98:	df000017 	ldw	fp,0(sp)
8112cf9c:	dec00204 	addi	sp,sp,8
8112cfa0:	f800283a 	ret

8112cfa4 <OSSemDel>:
8112cfa4:	defff304 	addi	sp,sp,-52
8112cfa8:	de00012e 	bgeu	sp,et,8112cfb0 <OSSemDel+0xc>
8112cfac:	003b68fa 	trap	3
8112cfb0:	dfc00c15 	stw	ra,48(sp)
8112cfb4:	df000b15 	stw	fp,44(sp)
8112cfb8:	df000b04 	addi	fp,sp,44
8112cfbc:	e13ffd15 	stw	r4,-12(fp)
8112cfc0:	2805883a 	mov	r2,r5
8112cfc4:	e1bfff15 	stw	r6,-4(fp)
8112cfc8:	e0bffe05 	stb	r2,-8(fp)
8112cfcc:	e03ff715 	stw	zero,-36(fp)
8112cfd0:	e0bfff17 	ldw	r2,-4(fp)
8112cfd4:	1000021e 	bne	r2,zero,8112cfe0 <OSSemDel+0x3c>
8112cfd8:	e0bffd17 	ldw	r2,-12(fp)
8112cfdc:	00007e06 	br	8112d1d8 <OSSemDel+0x234>
8112cfe0:	e0bffd17 	ldw	r2,-12(fp)
8112cfe4:	1000051e 	bne	r2,zero,8112cffc <OSSemDel+0x58>
8112cfe8:	e0bfff17 	ldw	r2,-4(fp)
8112cfec:	00c00104 	movi	r3,4
8112cff0:	10c00005 	stb	r3,0(r2)
8112cff4:	e0bffd17 	ldw	r2,-12(fp)
8112cff8:	00007706 	br	8112d1d8 <OSSemDel+0x234>
8112cffc:	e0bffd17 	ldw	r2,-12(fp)
8112d000:	10800003 	ldbu	r2,0(r2)
8112d004:	10803fcc 	andi	r2,r2,255
8112d008:	108000e0 	cmpeqi	r2,r2,3
8112d00c:	1000051e 	bne	r2,zero,8112d024 <OSSemDel+0x80>
8112d010:	e0bfff17 	ldw	r2,-4(fp)
8112d014:	00c00044 	movi	r3,1
8112d018:	10c00005 	stb	r3,0(r2)
8112d01c:	e0bffd17 	ldw	r2,-12(fp)
8112d020:	00006d06 	br	8112d1d8 <OSSemDel+0x234>
8112d024:	d0a08303 	ldbu	r2,-32244(gp)
8112d028:	10803fcc 	andi	r2,r2,255
8112d02c:	10000526 	beq	r2,zero,8112d044 <OSSemDel+0xa0>
8112d030:	e0bfff17 	ldw	r2,-4(fp)
8112d034:	00c003c4 	movi	r3,15
8112d038:	10c00005 	stb	r3,0(r2)
8112d03c:	e0bffd17 	ldw	r2,-12(fp)
8112d040:	00006506 	br	8112d1d8 <OSSemDel+0x234>
8112d044:	0005303a 	rdctl	r2,status
8112d048:	e0bffc15 	stw	r2,-16(fp)
8112d04c:	e0fffc17 	ldw	r3,-16(fp)
8112d050:	00bfff84 	movi	r2,-2
8112d054:	1884703a 	and	r2,r3,r2
8112d058:	1001703a 	wrctl	status,r2
8112d05c:	e0bffc17 	ldw	r2,-16(fp)
8112d060:	e0bff715 	stw	r2,-36(fp)
8112d064:	e0bffd17 	ldw	r2,-12(fp)
8112d068:	10800283 	ldbu	r2,10(r2)
8112d06c:	10803fcc 	andi	r2,r2,255
8112d070:	10000326 	beq	r2,zero,8112d080 <OSSemDel+0xdc>
8112d074:	00800044 	movi	r2,1
8112d078:	e0bff505 	stb	r2,-44(fp)
8112d07c:	00000106 	br	8112d084 <OSSemDel+0xe0>
8112d080:	e03ff505 	stb	zero,-44(fp)
8112d084:	e0bffe03 	ldbu	r2,-8(fp)
8112d088:	10000326 	beq	r2,zero,8112d098 <OSSemDel+0xf4>
8112d08c:	10800060 	cmpeqi	r2,r2,1
8112d090:	1000281e 	bne	r2,zero,8112d134 <OSSemDel+0x190>
8112d094:	00004506 	br	8112d1ac <OSSemDel+0x208>
8112d098:	e0bff503 	ldbu	r2,-44(fp)
8112d09c:	1000161e 	bne	r2,zero,8112d0f8 <OSSemDel+0x154>
8112d0a0:	e0bffd17 	ldw	r2,-12(fp)
8112d0a4:	00c00fc4 	movi	r3,63
8112d0a8:	10c00445 	stb	r3,17(r2)
8112d0ac:	e0bffd17 	ldw	r2,-12(fp)
8112d0b0:	10000485 	stb	zero,18(r2)
8112d0b4:	e0bffd17 	ldw	r2,-12(fp)
8112d0b8:	10000005 	stb	zero,0(r2)
8112d0bc:	d0e08217 	ldw	r3,-32248(gp)
8112d0c0:	e0bffd17 	ldw	r2,-12(fp)
8112d0c4:	10c00115 	stw	r3,4(r2)
8112d0c8:	e0bffd17 	ldw	r2,-12(fp)
8112d0cc:	1000020d 	sth	zero,8(r2)
8112d0d0:	e0bffd17 	ldw	r2,-12(fp)
8112d0d4:	d0a08215 	stw	r2,-32248(gp)
8112d0d8:	e0bff717 	ldw	r2,-36(fp)
8112d0dc:	e0bff815 	stw	r2,-32(fp)
8112d0e0:	e0bff817 	ldw	r2,-32(fp)
8112d0e4:	1001703a 	wrctl	status,r2
8112d0e8:	e0bfff17 	ldw	r2,-4(fp)
8112d0ec:	10000005 	stb	zero,0(r2)
8112d0f0:	e03ff615 	stw	zero,-40(fp)
8112d0f4:	00003706 	br	8112d1d4 <OSSemDel+0x230>
8112d0f8:	e0bff717 	ldw	r2,-36(fp)
8112d0fc:	e0bff915 	stw	r2,-28(fp)
8112d100:	e0bff917 	ldw	r2,-28(fp)
8112d104:	1001703a 	wrctl	status,r2
8112d108:	e0bfff17 	ldw	r2,-4(fp)
8112d10c:	00c01244 	movi	r3,73
8112d110:	10c00005 	stb	r3,0(r2)
8112d114:	e0bffd17 	ldw	r2,-12(fp)
8112d118:	e0bff615 	stw	r2,-40(fp)
8112d11c:	00002d06 	br	8112d1d4 <OSSemDel+0x230>
8112d120:	000f883a 	mov	r7,zero
8112d124:	01800044 	movi	r6,1
8112d128:	000b883a 	mov	r5,zero
8112d12c:	e13ffd17 	ldw	r4,-12(fp)
8112d130:	11278800 	call	81127880 <OS_EventTaskRdy>
8112d134:	e0bffd17 	ldw	r2,-12(fp)
8112d138:	10800283 	ldbu	r2,10(r2)
8112d13c:	10803fcc 	andi	r2,r2,255
8112d140:	103ff71e 	bne	r2,zero,8112d120 <__reset+0xfb10d120>
8112d144:	e0bffd17 	ldw	r2,-12(fp)
8112d148:	00c00fc4 	movi	r3,63
8112d14c:	10c00445 	stb	r3,17(r2)
8112d150:	e0bffd17 	ldw	r2,-12(fp)
8112d154:	10000485 	stb	zero,18(r2)
8112d158:	e0bffd17 	ldw	r2,-12(fp)
8112d15c:	10000005 	stb	zero,0(r2)
8112d160:	d0e08217 	ldw	r3,-32248(gp)
8112d164:	e0bffd17 	ldw	r2,-12(fp)
8112d168:	10c00115 	stw	r3,4(r2)
8112d16c:	e0bffd17 	ldw	r2,-12(fp)
8112d170:	1000020d 	sth	zero,8(r2)
8112d174:	e0bffd17 	ldw	r2,-12(fp)
8112d178:	d0a08215 	stw	r2,-32248(gp)
8112d17c:	e0bff717 	ldw	r2,-36(fp)
8112d180:	e0bffa15 	stw	r2,-24(fp)
8112d184:	e0bffa17 	ldw	r2,-24(fp)
8112d188:	1001703a 	wrctl	status,r2
8112d18c:	e0bff503 	ldbu	r2,-44(fp)
8112d190:	10800058 	cmpnei	r2,r2,1
8112d194:	1000011e 	bne	r2,zero,8112d19c <OSSemDel+0x1f8>
8112d198:	112833c0 	call	8112833c <OS_Sched>
8112d19c:	e0bfff17 	ldw	r2,-4(fp)
8112d1a0:	10000005 	stb	zero,0(r2)
8112d1a4:	e03ff615 	stw	zero,-40(fp)
8112d1a8:	00000a06 	br	8112d1d4 <OSSemDel+0x230>
8112d1ac:	e0bff717 	ldw	r2,-36(fp)
8112d1b0:	e0bffb15 	stw	r2,-20(fp)
8112d1b4:	e0bffb17 	ldw	r2,-20(fp)
8112d1b8:	1001703a 	wrctl	status,r2
8112d1bc:	e0bfff17 	ldw	r2,-4(fp)
8112d1c0:	00c001c4 	movi	r3,7
8112d1c4:	10c00005 	stb	r3,0(r2)
8112d1c8:	e0bffd17 	ldw	r2,-12(fp)
8112d1cc:	e0bff615 	stw	r2,-40(fp)
8112d1d0:	0001883a 	nop
8112d1d4:	e0bff617 	ldw	r2,-40(fp)
8112d1d8:	e037883a 	mov	sp,fp
8112d1dc:	dfc00117 	ldw	ra,4(sp)
8112d1e0:	df000017 	ldw	fp,0(sp)
8112d1e4:	dec00204 	addi	sp,sp,8
8112d1e8:	f800283a 	ret

8112d1ec <OSSemPend>:
8112d1ec:	defff504 	addi	sp,sp,-44
8112d1f0:	de00012e 	bgeu	sp,et,8112d1f8 <OSSemPend+0xc>
8112d1f4:	003b68fa 	trap	3
8112d1f8:	dfc00a15 	stw	ra,40(sp)
8112d1fc:	df000915 	stw	fp,36(sp)
8112d200:	df000904 	addi	fp,sp,36
8112d204:	e13ffd15 	stw	r4,-12(fp)
8112d208:	2805883a 	mov	r2,r5
8112d20c:	e1bfff15 	stw	r6,-4(fp)
8112d210:	e0bffe0d 	sth	r2,-8(fp)
8112d214:	e03ff715 	stw	zero,-36(fp)
8112d218:	e0bfff17 	ldw	r2,-4(fp)
8112d21c:	10007226 	beq	r2,zero,8112d3e8 <OSSemPend+0x1fc>
8112d220:	e0bffd17 	ldw	r2,-12(fp)
8112d224:	1000041e 	bne	r2,zero,8112d238 <OSSemPend+0x4c>
8112d228:	e0bfff17 	ldw	r2,-4(fp)
8112d22c:	00c00104 	movi	r3,4
8112d230:	10c00005 	stb	r3,0(r2)
8112d234:	00006d06 	br	8112d3ec <OSSemPend+0x200>
8112d238:	e0bffd17 	ldw	r2,-12(fp)
8112d23c:	10800003 	ldbu	r2,0(r2)
8112d240:	10803fcc 	andi	r2,r2,255
8112d244:	108000e0 	cmpeqi	r2,r2,3
8112d248:	1000041e 	bne	r2,zero,8112d25c <OSSemPend+0x70>
8112d24c:	e0bfff17 	ldw	r2,-4(fp)
8112d250:	00c00044 	movi	r3,1
8112d254:	10c00005 	stb	r3,0(r2)
8112d258:	00006406 	br	8112d3ec <OSSemPend+0x200>
8112d25c:	d0a08303 	ldbu	r2,-32244(gp)
8112d260:	10803fcc 	andi	r2,r2,255
8112d264:	10000426 	beq	r2,zero,8112d278 <OSSemPend+0x8c>
8112d268:	e0bfff17 	ldw	r2,-4(fp)
8112d26c:	00c00084 	movi	r3,2
8112d270:	10c00005 	stb	r3,0(r2)
8112d274:	00005d06 	br	8112d3ec <OSSemPend+0x200>
8112d278:	d0a07103 	ldbu	r2,-32316(gp)
8112d27c:	10803fcc 	andi	r2,r2,255
8112d280:	10000426 	beq	r2,zero,8112d294 <OSSemPend+0xa8>
8112d284:	e0bfff17 	ldw	r2,-4(fp)
8112d288:	00c00344 	movi	r3,13
8112d28c:	10c00005 	stb	r3,0(r2)
8112d290:	00005606 	br	8112d3ec <OSSemPend+0x200>
8112d294:	0005303a 	rdctl	r2,status
8112d298:	e0bffc15 	stw	r2,-16(fp)
8112d29c:	e0fffc17 	ldw	r3,-16(fp)
8112d2a0:	00bfff84 	movi	r2,-2
8112d2a4:	1884703a 	and	r2,r3,r2
8112d2a8:	1001703a 	wrctl	status,r2
8112d2ac:	e0bffc17 	ldw	r2,-16(fp)
8112d2b0:	e0bff715 	stw	r2,-36(fp)
8112d2b4:	e0bffd17 	ldw	r2,-12(fp)
8112d2b8:	1080020b 	ldhu	r2,8(r2)
8112d2bc:	10bfffcc 	andi	r2,r2,65535
8112d2c0:	10000d26 	beq	r2,zero,8112d2f8 <OSSemPend+0x10c>
8112d2c4:	e0bffd17 	ldw	r2,-12(fp)
8112d2c8:	1080020b 	ldhu	r2,8(r2)
8112d2cc:	10bfffc4 	addi	r2,r2,-1
8112d2d0:	1007883a 	mov	r3,r2
8112d2d4:	e0bffd17 	ldw	r2,-12(fp)
8112d2d8:	10c0020d 	sth	r3,8(r2)
8112d2dc:	e0bff717 	ldw	r2,-36(fp)
8112d2e0:	e0bff815 	stw	r2,-32(fp)
8112d2e4:	e0bff817 	ldw	r2,-32(fp)
8112d2e8:	1001703a 	wrctl	status,r2
8112d2ec:	e0bfff17 	ldw	r2,-4(fp)
8112d2f0:	10000005 	stb	zero,0(r2)
8112d2f4:	00003d06 	br	8112d3ec <OSSemPend+0x200>
8112d2f8:	d0a08417 	ldw	r2,-32240(gp)
8112d2fc:	d0e08417 	ldw	r3,-32240(gp)
8112d300:	18c00c03 	ldbu	r3,48(r3)
8112d304:	18c00054 	ori	r3,r3,1
8112d308:	10c00c05 	stb	r3,48(r2)
8112d30c:	d0a08417 	ldw	r2,-32240(gp)
8112d310:	10000c45 	stb	zero,49(r2)
8112d314:	d0a08417 	ldw	r2,-32240(gp)
8112d318:	e0fffe0b 	ldhu	r3,-8(fp)
8112d31c:	10c00b8d 	sth	r3,46(r2)
8112d320:	e13ffd17 	ldw	r4,-12(fp)
8112d324:	1127a200 	call	81127a20 <OS_EventTaskWait>
8112d328:	e0bff717 	ldw	r2,-36(fp)
8112d32c:	e0bffb15 	stw	r2,-20(fp)
8112d330:	e0bffb17 	ldw	r2,-20(fp)
8112d334:	1001703a 	wrctl	status,r2
8112d338:	112833c0 	call	8112833c <OS_Sched>
8112d33c:	0005303a 	rdctl	r2,status
8112d340:	e0bff915 	stw	r2,-28(fp)
8112d344:	e0fff917 	ldw	r3,-28(fp)
8112d348:	00bfff84 	movi	r2,-2
8112d34c:	1884703a 	and	r2,r3,r2
8112d350:	1001703a 	wrctl	status,r2
8112d354:	e0bff917 	ldw	r2,-28(fp)
8112d358:	e0bff715 	stw	r2,-36(fp)
8112d35c:	d0a08417 	ldw	r2,-32240(gp)
8112d360:	10800c43 	ldbu	r2,49(r2)
8112d364:	10803fcc 	andi	r2,r2,255
8112d368:	10000326 	beq	r2,zero,8112d378 <OSSemPend+0x18c>
8112d36c:	108000a0 	cmpeqi	r2,r2,2
8112d370:	1000041e 	bne	r2,zero,8112d384 <OSSemPend+0x198>
8112d374:	00000706 	br	8112d394 <OSSemPend+0x1a8>
8112d378:	e0bfff17 	ldw	r2,-4(fp)
8112d37c:	10000005 	stb	zero,0(r2)
8112d380:	00000c06 	br	8112d3b4 <OSSemPend+0x1c8>
8112d384:	e0bfff17 	ldw	r2,-4(fp)
8112d388:	00c00384 	movi	r3,14
8112d38c:	10c00005 	stb	r3,0(r2)
8112d390:	00000806 	br	8112d3b4 <OSSemPend+0x1c8>
8112d394:	d0a08417 	ldw	r2,-32240(gp)
8112d398:	e17ffd17 	ldw	r5,-12(fp)
8112d39c:	1009883a 	mov	r4,r2
8112d3a0:	1127c900 	call	81127c90 <OS_EventTaskRemove>
8112d3a4:	e0bfff17 	ldw	r2,-4(fp)
8112d3a8:	00c00284 	movi	r3,10
8112d3ac:	10c00005 	stb	r3,0(r2)
8112d3b0:	0001883a 	nop
8112d3b4:	d0a08417 	ldw	r2,-32240(gp)
8112d3b8:	10000c05 	stb	zero,48(r2)
8112d3bc:	d0a08417 	ldw	r2,-32240(gp)
8112d3c0:	10000c45 	stb	zero,49(r2)
8112d3c4:	d0a08417 	ldw	r2,-32240(gp)
8112d3c8:	10000715 	stw	zero,28(r2)
8112d3cc:	d0a08417 	ldw	r2,-32240(gp)
8112d3d0:	10000815 	stw	zero,32(r2)
8112d3d4:	e0bff717 	ldw	r2,-36(fp)
8112d3d8:	e0bffa15 	stw	r2,-24(fp)
8112d3dc:	e0bffa17 	ldw	r2,-24(fp)
8112d3e0:	1001703a 	wrctl	status,r2
8112d3e4:	00000106 	br	8112d3ec <OSSemPend+0x200>
8112d3e8:	0001883a 	nop
8112d3ec:	e037883a 	mov	sp,fp
8112d3f0:	dfc00117 	ldw	ra,4(sp)
8112d3f4:	df000017 	ldw	fp,0(sp)
8112d3f8:	dec00204 	addi	sp,sp,8
8112d3fc:	f800283a 	ret

8112d400 <OSSemPendAbort>:
8112d400:	defff604 	addi	sp,sp,-40
8112d404:	de00012e 	bgeu	sp,et,8112d40c <OSSemPendAbort+0xc>
8112d408:	003b68fa 	trap	3
8112d40c:	dfc00915 	stw	ra,36(sp)
8112d410:	df000815 	stw	fp,32(sp)
8112d414:	df000804 	addi	fp,sp,32
8112d418:	e13ffd15 	stw	r4,-12(fp)
8112d41c:	2805883a 	mov	r2,r5
8112d420:	e1bfff15 	stw	r6,-4(fp)
8112d424:	e0bffe05 	stb	r2,-8(fp)
8112d428:	e03ff915 	stw	zero,-28(fp)
8112d42c:	e0bfff17 	ldw	r2,-4(fp)
8112d430:	1000021e 	bne	r2,zero,8112d43c <OSSemPendAbort+0x3c>
8112d434:	0005883a 	mov	r2,zero
8112d438:	00004906 	br	8112d560 <OSSemPendAbort+0x160>
8112d43c:	e0bffd17 	ldw	r2,-12(fp)
8112d440:	1000051e 	bne	r2,zero,8112d458 <OSSemPendAbort+0x58>
8112d444:	e0bfff17 	ldw	r2,-4(fp)
8112d448:	00c00104 	movi	r3,4
8112d44c:	10c00005 	stb	r3,0(r2)
8112d450:	0005883a 	mov	r2,zero
8112d454:	00004206 	br	8112d560 <OSSemPendAbort+0x160>
8112d458:	e0bffd17 	ldw	r2,-12(fp)
8112d45c:	10800003 	ldbu	r2,0(r2)
8112d460:	10803fcc 	andi	r2,r2,255
8112d464:	108000e0 	cmpeqi	r2,r2,3
8112d468:	1000051e 	bne	r2,zero,8112d480 <OSSemPendAbort+0x80>
8112d46c:	e0bfff17 	ldw	r2,-4(fp)
8112d470:	00c00044 	movi	r3,1
8112d474:	10c00005 	stb	r3,0(r2)
8112d478:	0005883a 	mov	r2,zero
8112d47c:	00003806 	br	8112d560 <OSSemPendAbort+0x160>
8112d480:	0005303a 	rdctl	r2,status
8112d484:	e0bffc15 	stw	r2,-16(fp)
8112d488:	e0fffc17 	ldw	r3,-16(fp)
8112d48c:	00bfff84 	movi	r2,-2
8112d490:	1884703a 	and	r2,r3,r2
8112d494:	1001703a 	wrctl	status,r2
8112d498:	e0bffc17 	ldw	r2,-16(fp)
8112d49c:	e0bff915 	stw	r2,-28(fp)
8112d4a0:	e0bffd17 	ldw	r2,-12(fp)
8112d4a4:	10800283 	ldbu	r2,10(r2)
8112d4a8:	10803fcc 	andi	r2,r2,255
8112d4ac:	10002526 	beq	r2,zero,8112d544 <OSSemPendAbort+0x144>
8112d4b0:	e03ff805 	stb	zero,-32(fp)
8112d4b4:	e0bffe03 	ldbu	r2,-8(fp)
8112d4b8:	10800060 	cmpeqi	r2,r2,1
8112d4bc:	10000e26 	beq	r2,zero,8112d4f8 <OSSemPendAbort+0xf8>
8112d4c0:	00000806 	br	8112d4e4 <OSSemPendAbort+0xe4>
8112d4c4:	01c00084 	movi	r7,2
8112d4c8:	01800044 	movi	r6,1
8112d4cc:	000b883a 	mov	r5,zero
8112d4d0:	e13ffd17 	ldw	r4,-12(fp)
8112d4d4:	11278800 	call	81127880 <OS_EventTaskRdy>
8112d4d8:	e0bff803 	ldbu	r2,-32(fp)
8112d4dc:	10800044 	addi	r2,r2,1
8112d4e0:	e0bff805 	stb	r2,-32(fp)
8112d4e4:	e0bffd17 	ldw	r2,-12(fp)
8112d4e8:	10800283 	ldbu	r2,10(r2)
8112d4ec:	10803fcc 	andi	r2,r2,255
8112d4f0:	103ff41e 	bne	r2,zero,8112d4c4 <__reset+0xfb10d4c4>
8112d4f4:	00000906 	br	8112d51c <OSSemPendAbort+0x11c>
8112d4f8:	01c00084 	movi	r7,2
8112d4fc:	01800044 	movi	r6,1
8112d500:	000b883a 	mov	r5,zero
8112d504:	e13ffd17 	ldw	r4,-12(fp)
8112d508:	11278800 	call	81127880 <OS_EventTaskRdy>
8112d50c:	e0bff803 	ldbu	r2,-32(fp)
8112d510:	10800044 	addi	r2,r2,1
8112d514:	e0bff805 	stb	r2,-32(fp)
8112d518:	0001883a 	nop
8112d51c:	e0bff917 	ldw	r2,-28(fp)
8112d520:	e0bffa15 	stw	r2,-24(fp)
8112d524:	e0bffa17 	ldw	r2,-24(fp)
8112d528:	1001703a 	wrctl	status,r2
8112d52c:	112833c0 	call	8112833c <OS_Sched>
8112d530:	e0bfff17 	ldw	r2,-4(fp)
8112d534:	00c00384 	movi	r3,14
8112d538:	10c00005 	stb	r3,0(r2)
8112d53c:	e0bff803 	ldbu	r2,-32(fp)
8112d540:	00000706 	br	8112d560 <OSSemPendAbort+0x160>
8112d544:	e0bff917 	ldw	r2,-28(fp)
8112d548:	e0bffb15 	stw	r2,-20(fp)
8112d54c:	e0bffb17 	ldw	r2,-20(fp)
8112d550:	1001703a 	wrctl	status,r2
8112d554:	e0bfff17 	ldw	r2,-4(fp)
8112d558:	10000005 	stb	zero,0(r2)
8112d55c:	0005883a 	mov	r2,zero
8112d560:	e037883a 	mov	sp,fp
8112d564:	dfc00117 	ldw	ra,4(sp)
8112d568:	df000017 	ldw	fp,0(sp)
8112d56c:	dec00204 	addi	sp,sp,8
8112d570:	f800283a 	ret

8112d574 <OSSemPost>:
8112d574:	defff804 	addi	sp,sp,-32
8112d578:	de00012e 	bgeu	sp,et,8112d580 <OSSemPost+0xc>
8112d57c:	003b68fa 	trap	3
8112d580:	dfc00715 	stw	ra,28(sp)
8112d584:	df000615 	stw	fp,24(sp)
8112d588:	df000604 	addi	fp,sp,24
8112d58c:	e13fff15 	stw	r4,-4(fp)
8112d590:	e03ffa15 	stw	zero,-24(fp)
8112d594:	e0bfff17 	ldw	r2,-4(fp)
8112d598:	1000021e 	bne	r2,zero,8112d5a4 <OSSemPost+0x30>
8112d59c:	00800104 	movi	r2,4
8112d5a0:	00003506 	br	8112d678 <OSSemPost+0x104>
8112d5a4:	e0bfff17 	ldw	r2,-4(fp)
8112d5a8:	10800003 	ldbu	r2,0(r2)
8112d5ac:	10803fcc 	andi	r2,r2,255
8112d5b0:	108000e0 	cmpeqi	r2,r2,3
8112d5b4:	1000021e 	bne	r2,zero,8112d5c0 <OSSemPost+0x4c>
8112d5b8:	00800044 	movi	r2,1
8112d5bc:	00002e06 	br	8112d678 <OSSemPost+0x104>
8112d5c0:	0005303a 	rdctl	r2,status
8112d5c4:	e0bffe15 	stw	r2,-8(fp)
8112d5c8:	e0fffe17 	ldw	r3,-8(fp)
8112d5cc:	00bfff84 	movi	r2,-2
8112d5d0:	1884703a 	and	r2,r3,r2
8112d5d4:	1001703a 	wrctl	status,r2
8112d5d8:	e0bffe17 	ldw	r2,-8(fp)
8112d5dc:	e0bffa15 	stw	r2,-24(fp)
8112d5e0:	e0bfff17 	ldw	r2,-4(fp)
8112d5e4:	10800283 	ldbu	r2,10(r2)
8112d5e8:	10803fcc 	andi	r2,r2,255
8112d5ec:	10000c26 	beq	r2,zero,8112d620 <OSSemPost+0xac>
8112d5f0:	000f883a 	mov	r7,zero
8112d5f4:	01800044 	movi	r6,1
8112d5f8:	000b883a 	mov	r5,zero
8112d5fc:	e13fff17 	ldw	r4,-4(fp)
8112d600:	11278800 	call	81127880 <OS_EventTaskRdy>
8112d604:	e0bffa17 	ldw	r2,-24(fp)
8112d608:	e0bffb15 	stw	r2,-20(fp)
8112d60c:	e0bffb17 	ldw	r2,-20(fp)
8112d610:	1001703a 	wrctl	status,r2
8112d614:	112833c0 	call	8112833c <OS_Sched>
8112d618:	0005883a 	mov	r2,zero
8112d61c:	00001606 	br	8112d678 <OSSemPost+0x104>
8112d620:	e0bfff17 	ldw	r2,-4(fp)
8112d624:	1080020b 	ldhu	r2,8(r2)
8112d628:	10ffffcc 	andi	r3,r2,65535
8112d62c:	00bfffd4 	movui	r2,65535
8112d630:	18800c26 	beq	r3,r2,8112d664 <OSSemPost+0xf0>
8112d634:	e0bfff17 	ldw	r2,-4(fp)
8112d638:	1080020b 	ldhu	r2,8(r2)
8112d63c:	10800044 	addi	r2,r2,1
8112d640:	1007883a 	mov	r3,r2
8112d644:	e0bfff17 	ldw	r2,-4(fp)
8112d648:	10c0020d 	sth	r3,8(r2)
8112d64c:	e0bffa17 	ldw	r2,-24(fp)
8112d650:	e0bffc15 	stw	r2,-16(fp)
8112d654:	e0bffc17 	ldw	r2,-16(fp)
8112d658:	1001703a 	wrctl	status,r2
8112d65c:	0005883a 	mov	r2,zero
8112d660:	00000506 	br	8112d678 <OSSemPost+0x104>
8112d664:	e0bffa17 	ldw	r2,-24(fp)
8112d668:	e0bffd15 	stw	r2,-12(fp)
8112d66c:	e0bffd17 	ldw	r2,-12(fp)
8112d670:	1001703a 	wrctl	status,r2
8112d674:	00800c84 	movi	r2,50
8112d678:	e037883a 	mov	sp,fp
8112d67c:	dfc00117 	ldw	ra,4(sp)
8112d680:	df000017 	ldw	fp,0(sp)
8112d684:	dec00204 	addi	sp,sp,8
8112d688:	f800283a 	ret

8112d68c <OSSemQuery>:
8112d68c:	defff704 	addi	sp,sp,-36
8112d690:	de00012e 	bgeu	sp,et,8112d698 <OSSemQuery+0xc>
8112d694:	003b68fa 	trap	3
8112d698:	df000815 	stw	fp,32(sp)
8112d69c:	df000804 	addi	fp,sp,32
8112d6a0:	e13ffe15 	stw	r4,-8(fp)
8112d6a4:	e17fff15 	stw	r5,-4(fp)
8112d6a8:	e03ffb15 	stw	zero,-20(fp)
8112d6ac:	e0bffe17 	ldw	r2,-8(fp)
8112d6b0:	1000021e 	bne	r2,zero,8112d6bc <OSSemQuery+0x30>
8112d6b4:	00800104 	movi	r2,4
8112d6b8:	00003606 	br	8112d794 <OSSemQuery+0x108>
8112d6bc:	e0bfff17 	ldw	r2,-4(fp)
8112d6c0:	1000021e 	bne	r2,zero,8112d6cc <OSSemQuery+0x40>
8112d6c4:	00800244 	movi	r2,9
8112d6c8:	00003206 	br	8112d794 <OSSemQuery+0x108>
8112d6cc:	e0bffe17 	ldw	r2,-8(fp)
8112d6d0:	10800003 	ldbu	r2,0(r2)
8112d6d4:	10803fcc 	andi	r2,r2,255
8112d6d8:	108000e0 	cmpeqi	r2,r2,3
8112d6dc:	1000021e 	bne	r2,zero,8112d6e8 <OSSemQuery+0x5c>
8112d6e0:	00800044 	movi	r2,1
8112d6e4:	00002b06 	br	8112d794 <OSSemQuery+0x108>
8112d6e8:	0005303a 	rdctl	r2,status
8112d6ec:	e0bffd15 	stw	r2,-12(fp)
8112d6f0:	e0fffd17 	ldw	r3,-12(fp)
8112d6f4:	00bfff84 	movi	r2,-2
8112d6f8:	1884703a 	and	r2,r3,r2
8112d6fc:	1001703a 	wrctl	status,r2
8112d700:	e0bffd17 	ldw	r2,-12(fp)
8112d704:	e0bffb15 	stw	r2,-20(fp)
8112d708:	e0bffe17 	ldw	r2,-8(fp)
8112d70c:	10c00283 	ldbu	r3,10(r2)
8112d710:	e0bfff17 	ldw	r2,-4(fp)
8112d714:	10c00205 	stb	r3,8(r2)
8112d718:	e0bffe17 	ldw	r2,-8(fp)
8112d71c:	108002c4 	addi	r2,r2,11
8112d720:	e0bff815 	stw	r2,-32(fp)
8112d724:	e0bfff17 	ldw	r2,-4(fp)
8112d728:	10800084 	addi	r2,r2,2
8112d72c:	e0bff915 	stw	r2,-28(fp)
8112d730:	e03ffa05 	stb	zero,-24(fp)
8112d734:	00000b06 	br	8112d764 <OSSemQuery+0xd8>
8112d738:	e0bff917 	ldw	r2,-28(fp)
8112d73c:	10c00044 	addi	r3,r2,1
8112d740:	e0fff915 	stw	r3,-28(fp)
8112d744:	e0fff817 	ldw	r3,-32(fp)
8112d748:	19000044 	addi	r4,r3,1
8112d74c:	e13ff815 	stw	r4,-32(fp)
8112d750:	18c00003 	ldbu	r3,0(r3)
8112d754:	10c00005 	stb	r3,0(r2)
8112d758:	e0bffa03 	ldbu	r2,-24(fp)
8112d75c:	10800044 	addi	r2,r2,1
8112d760:	e0bffa05 	stb	r2,-24(fp)
8112d764:	e0bffa03 	ldbu	r2,-24(fp)
8112d768:	108001b0 	cmpltui	r2,r2,6
8112d76c:	103ff21e 	bne	r2,zero,8112d738 <__reset+0xfb10d738>
8112d770:	e0bffe17 	ldw	r2,-8(fp)
8112d774:	10c0020b 	ldhu	r3,8(r2)
8112d778:	e0bfff17 	ldw	r2,-4(fp)
8112d77c:	10c0000d 	sth	r3,0(r2)
8112d780:	e0bffb17 	ldw	r2,-20(fp)
8112d784:	e0bffc15 	stw	r2,-16(fp)
8112d788:	e0bffc17 	ldw	r2,-16(fp)
8112d78c:	1001703a 	wrctl	status,r2
8112d790:	0005883a 	mov	r2,zero
8112d794:	e037883a 	mov	sp,fp
8112d798:	df000017 	ldw	fp,0(sp)
8112d79c:	dec00104 	addi	sp,sp,4
8112d7a0:	f800283a 	ret

8112d7a4 <OSSemSet>:
8112d7a4:	defff904 	addi	sp,sp,-28
8112d7a8:	de00012e 	bgeu	sp,et,8112d7b0 <OSSemSet+0xc>
8112d7ac:	003b68fa 	trap	3
8112d7b0:	df000615 	stw	fp,24(sp)
8112d7b4:	df000604 	addi	fp,sp,24
8112d7b8:	e13ffd15 	stw	r4,-12(fp)
8112d7bc:	2805883a 	mov	r2,r5
8112d7c0:	e1bfff15 	stw	r6,-4(fp)
8112d7c4:	e0bffe0d 	sth	r2,-8(fp)
8112d7c8:	e03ffa15 	stw	zero,-24(fp)
8112d7cc:	e0bfff17 	ldw	r2,-4(fp)
8112d7d0:	10003126 	beq	r2,zero,8112d898 <OSSemSet+0xf4>
8112d7d4:	e0bffd17 	ldw	r2,-12(fp)
8112d7d8:	1000041e 	bne	r2,zero,8112d7ec <OSSemSet+0x48>
8112d7dc:	e0bfff17 	ldw	r2,-4(fp)
8112d7e0:	00c00104 	movi	r3,4
8112d7e4:	10c00005 	stb	r3,0(r2)
8112d7e8:	00002c06 	br	8112d89c <OSSemSet+0xf8>
8112d7ec:	e0bffd17 	ldw	r2,-12(fp)
8112d7f0:	10800003 	ldbu	r2,0(r2)
8112d7f4:	10803fcc 	andi	r2,r2,255
8112d7f8:	108000e0 	cmpeqi	r2,r2,3
8112d7fc:	1000041e 	bne	r2,zero,8112d810 <OSSemSet+0x6c>
8112d800:	e0bfff17 	ldw	r2,-4(fp)
8112d804:	00c00044 	movi	r3,1
8112d808:	10c00005 	stb	r3,0(r2)
8112d80c:	00002306 	br	8112d89c <OSSemSet+0xf8>
8112d810:	0005303a 	rdctl	r2,status
8112d814:	e0bffc15 	stw	r2,-16(fp)
8112d818:	e0fffc17 	ldw	r3,-16(fp)
8112d81c:	00bfff84 	movi	r2,-2
8112d820:	1884703a 	and	r2,r3,r2
8112d824:	1001703a 	wrctl	status,r2
8112d828:	e0bffc17 	ldw	r2,-16(fp)
8112d82c:	e0bffa15 	stw	r2,-24(fp)
8112d830:	e0bfff17 	ldw	r2,-4(fp)
8112d834:	10000005 	stb	zero,0(r2)
8112d838:	e0bffd17 	ldw	r2,-12(fp)
8112d83c:	1080020b 	ldhu	r2,8(r2)
8112d840:	10bfffcc 	andi	r2,r2,65535
8112d844:	10000426 	beq	r2,zero,8112d858 <OSSemSet+0xb4>
8112d848:	e0bffd17 	ldw	r2,-12(fp)
8112d84c:	e0fffe0b 	ldhu	r3,-8(fp)
8112d850:	10c0020d 	sth	r3,8(r2)
8112d854:	00000b06 	br	8112d884 <OSSemSet+0xe0>
8112d858:	e0bffd17 	ldw	r2,-12(fp)
8112d85c:	10800283 	ldbu	r2,10(r2)
8112d860:	10803fcc 	andi	r2,r2,255
8112d864:	1000041e 	bne	r2,zero,8112d878 <OSSemSet+0xd4>
8112d868:	e0bffd17 	ldw	r2,-12(fp)
8112d86c:	e0fffe0b 	ldhu	r3,-8(fp)
8112d870:	10c0020d 	sth	r3,8(r2)
8112d874:	00000306 	br	8112d884 <OSSemSet+0xe0>
8112d878:	e0bfff17 	ldw	r2,-4(fp)
8112d87c:	00c01244 	movi	r3,73
8112d880:	10c00005 	stb	r3,0(r2)
8112d884:	e0bffa17 	ldw	r2,-24(fp)
8112d888:	e0bffb15 	stw	r2,-20(fp)
8112d88c:	e0bffb17 	ldw	r2,-20(fp)
8112d890:	1001703a 	wrctl	status,r2
8112d894:	00000106 	br	8112d89c <OSSemSet+0xf8>
8112d898:	0001883a 	nop
8112d89c:	e037883a 	mov	sp,fp
8112d8a0:	df000017 	ldw	fp,0(sp)
8112d8a4:	dec00104 	addi	sp,sp,4
8112d8a8:	f800283a 	ret

8112d8ac <OSTaskChangePrio>:
8112d8ac:	defff104 	addi	sp,sp,-60
8112d8b0:	de00012e 	bgeu	sp,et,8112d8b8 <OSTaskChangePrio+0xc>
8112d8b4:	003b68fa 	trap	3
8112d8b8:	dfc00e15 	stw	ra,56(sp)
8112d8bc:	df000d15 	stw	fp,52(sp)
8112d8c0:	df000d04 	addi	fp,sp,52
8112d8c4:	2007883a 	mov	r3,r4
8112d8c8:	2805883a 	mov	r2,r5
8112d8cc:	e0fffe05 	stb	r3,-8(fp)
8112d8d0:	e0bfff05 	stb	r2,-4(fp)
8112d8d4:	e03ff515 	stw	zero,-44(fp)
8112d8d8:	e0bffe03 	ldbu	r2,-8(fp)
8112d8dc:	10800a30 	cmpltui	r2,r2,40
8112d8e0:	1000051e 	bne	r2,zero,8112d8f8 <OSTaskChangePrio+0x4c>
8112d8e4:	e0bffe03 	ldbu	r2,-8(fp)
8112d8e8:	10803fe0 	cmpeqi	r2,r2,255
8112d8ec:	1000021e 	bne	r2,zero,8112d8f8 <OSTaskChangePrio+0x4c>
8112d8f0:	00800a84 	movi	r2,42
8112d8f4:	00012606 	br	8112dd90 <OSTaskChangePrio+0x4e4>
8112d8f8:	e0bfff03 	ldbu	r2,-4(fp)
8112d8fc:	10800a30 	cmpltui	r2,r2,40
8112d900:	1000021e 	bne	r2,zero,8112d90c <OSTaskChangePrio+0x60>
8112d904:	00800a84 	movi	r2,42
8112d908:	00012106 	br	8112dd90 <OSTaskChangePrio+0x4e4>
8112d90c:	0005303a 	rdctl	r2,status
8112d910:	e0bffd15 	stw	r2,-12(fp)
8112d914:	e0fffd17 	ldw	r3,-12(fp)
8112d918:	00bfff84 	movi	r2,-2
8112d91c:	1884703a 	and	r2,r3,r2
8112d920:	1001703a 	wrctl	status,r2
8112d924:	e0bffd17 	ldw	r2,-12(fp)
8112d928:	e0bff515 	stw	r2,-44(fp)
8112d92c:	e0ffff03 	ldbu	r3,-4(fp)
8112d930:	00a04574 	movhi	r2,33045
8112d934:	1087e104 	addi	r2,r2,8068
8112d938:	18c7883a 	add	r3,r3,r3
8112d93c:	18c7883a 	add	r3,r3,r3
8112d940:	10c5883a 	add	r2,r2,r3
8112d944:	10800017 	ldw	r2,0(r2)
8112d948:	10000626 	beq	r2,zero,8112d964 <OSTaskChangePrio+0xb8>
8112d94c:	e0bff517 	ldw	r2,-44(fp)
8112d950:	e0bff615 	stw	r2,-40(fp)
8112d954:	e0bff617 	ldw	r2,-40(fp)
8112d958:	1001703a 	wrctl	status,r2
8112d95c:	00800a04 	movi	r2,40
8112d960:	00010b06 	br	8112dd90 <OSTaskChangePrio+0x4e4>
8112d964:	e0bffe03 	ldbu	r2,-8(fp)
8112d968:	10803fd8 	cmpnei	r2,r2,255
8112d96c:	1000031e 	bne	r2,zero,8112d97c <OSTaskChangePrio+0xd0>
8112d970:	d0a08417 	ldw	r2,-32240(gp)
8112d974:	10800c83 	ldbu	r2,50(r2)
8112d978:	e0bffe05 	stb	r2,-8(fp)
8112d97c:	e0fffe03 	ldbu	r3,-8(fp)
8112d980:	00a04574 	movhi	r2,33045
8112d984:	1087e104 	addi	r2,r2,8068
8112d988:	18c7883a 	add	r3,r3,r3
8112d98c:	18c7883a 	add	r3,r3,r3
8112d990:	10c5883a 	add	r2,r2,r3
8112d994:	10800017 	ldw	r2,0(r2)
8112d998:	e0bff815 	stw	r2,-32(fp)
8112d99c:	e0bff817 	ldw	r2,-32(fp)
8112d9a0:	1000061e 	bne	r2,zero,8112d9bc <OSTaskChangePrio+0x110>
8112d9a4:	e0bff517 	ldw	r2,-44(fp)
8112d9a8:	e0bff715 	stw	r2,-36(fp)
8112d9ac:	e0bff717 	ldw	r2,-36(fp)
8112d9b0:	1001703a 	wrctl	status,r2
8112d9b4:	00800a44 	movi	r2,41
8112d9b8:	0000f506 	br	8112dd90 <OSTaskChangePrio+0x4e4>
8112d9bc:	e0bff817 	ldw	r2,-32(fp)
8112d9c0:	10800058 	cmpnei	r2,r2,1
8112d9c4:	1000061e 	bne	r2,zero,8112d9e0 <OSTaskChangePrio+0x134>
8112d9c8:	e0bff517 	ldw	r2,-44(fp)
8112d9cc:	e0bff915 	stw	r2,-28(fp)
8112d9d0:	e0bff917 	ldw	r2,-28(fp)
8112d9d4:	1001703a 	wrctl	status,r2
8112d9d8:	008010c4 	movi	r2,67
8112d9dc:	0000ec06 	br	8112dd90 <OSTaskChangePrio+0x4e4>
8112d9e0:	e0bfff03 	ldbu	r2,-4(fp)
8112d9e4:	1004d0fa 	srli	r2,r2,3
8112d9e8:	e0bffb05 	stb	r2,-20(fp)
8112d9ec:	e0bfff03 	ldbu	r2,-4(fp)
8112d9f0:	108001cc 	andi	r2,r2,7
8112d9f4:	e0bffb45 	stb	r2,-19(fp)
8112d9f8:	e0bffb03 	ldbu	r2,-20(fp)
8112d9fc:	00c00044 	movi	r3,1
8112da00:	1884983a 	sll	r2,r3,r2
8112da04:	e0bffb85 	stb	r2,-18(fp)
8112da08:	e0bffb43 	ldbu	r2,-19(fp)
8112da0c:	00c00044 	movi	r3,1
8112da10:	1884983a 	sll	r2,r3,r2
8112da14:	e0bffbc5 	stb	r2,-17(fp)
8112da18:	e0fffe03 	ldbu	r3,-8(fp)
8112da1c:	00a04574 	movhi	r2,33045
8112da20:	1087e104 	addi	r2,r2,8068
8112da24:	18c7883a 	add	r3,r3,r3
8112da28:	18c7883a 	add	r3,r3,r3
8112da2c:	10c5883a 	add	r2,r2,r3
8112da30:	10000015 	stw	zero,0(r2)
8112da34:	e0ffff03 	ldbu	r3,-4(fp)
8112da38:	00a04574 	movhi	r2,33045
8112da3c:	1087e104 	addi	r2,r2,8068
8112da40:	18c7883a 	add	r3,r3,r3
8112da44:	18c7883a 	add	r3,r3,r3
8112da48:	10c5883a 	add	r2,r2,r3
8112da4c:	e0fff817 	ldw	r3,-32(fp)
8112da50:	10c00015 	stw	r3,0(r2)
8112da54:	e0bff817 	ldw	r2,-32(fp)
8112da58:	10800d03 	ldbu	r2,52(r2)
8112da5c:	e0bffc05 	stb	r2,-16(fp)
8112da60:	e0bff817 	ldw	r2,-32(fp)
8112da64:	10800d83 	ldbu	r2,54(r2)
8112da68:	e0bffc45 	stb	r2,-15(fp)
8112da6c:	e0bff817 	ldw	r2,-32(fp)
8112da70:	10800d43 	ldbu	r2,53(r2)
8112da74:	e0bffc85 	stb	r2,-14(fp)
8112da78:	e0fffc03 	ldbu	r3,-16(fp)
8112da7c:	d0a08044 	addi	r2,gp,-32255
8112da80:	1885883a 	add	r2,r3,r2
8112da84:	10c00003 	ldbu	r3,0(r2)
8112da88:	e0bffc83 	ldbu	r2,-14(fp)
8112da8c:	1884703a 	and	r2,r3,r2
8112da90:	10803fcc 	andi	r2,r2,255
8112da94:	10002826 	beq	r2,zero,8112db38 <OSTaskChangePrio+0x28c>
8112da98:	e0fffc03 	ldbu	r3,-16(fp)
8112da9c:	e13ffc03 	ldbu	r4,-16(fp)
8112daa0:	d0a08044 	addi	r2,gp,-32255
8112daa4:	2085883a 	add	r2,r4,r2
8112daa8:	10800003 	ldbu	r2,0(r2)
8112daac:	1009883a 	mov	r4,r2
8112dab0:	e0bffc83 	ldbu	r2,-14(fp)
8112dab4:	0084303a 	nor	r2,zero,r2
8112dab8:	2084703a 	and	r2,r4,r2
8112dabc:	1009883a 	mov	r4,r2
8112dac0:	d0a08044 	addi	r2,gp,-32255
8112dac4:	1885883a 	add	r2,r3,r2
8112dac8:	11000005 	stb	r4,0(r2)
8112dacc:	e0fffc03 	ldbu	r3,-16(fp)
8112dad0:	d0a08044 	addi	r2,gp,-32255
8112dad4:	1885883a 	add	r2,r3,r2
8112dad8:	10800003 	ldbu	r2,0(r2)
8112dadc:	10803fcc 	andi	r2,r2,255
8112dae0:	1000061e 	bne	r2,zero,8112dafc <OSTaskChangePrio+0x250>
8112dae4:	e0bffc43 	ldbu	r2,-15(fp)
8112dae8:	0084303a 	nor	r2,zero,r2
8112daec:	1007883a 	mov	r3,r2
8112daf0:	d0a08003 	ldbu	r2,-32256(gp)
8112daf4:	1884703a 	and	r2,r3,r2
8112daf8:	d0a08005 	stb	r2,-32256(gp)
8112dafc:	d0e08003 	ldbu	r3,-32256(gp)
8112db00:	e0bffb83 	ldbu	r2,-18(fp)
8112db04:	1884b03a 	or	r2,r3,r2
8112db08:	d0a08005 	stb	r2,-32256(gp)
8112db0c:	e0fffb03 	ldbu	r3,-20(fp)
8112db10:	e13ffb03 	ldbu	r4,-20(fp)
8112db14:	d0a08044 	addi	r2,gp,-32255
8112db18:	2085883a 	add	r2,r4,r2
8112db1c:	11000003 	ldbu	r4,0(r2)
8112db20:	e0bffbc3 	ldbu	r2,-17(fp)
8112db24:	2084b03a 	or	r2,r4,r2
8112db28:	1009883a 	mov	r4,r2
8112db2c:	d0a08044 	addi	r2,gp,-32255
8112db30:	1885883a 	add	r2,r3,r2
8112db34:	11000005 	stb	r4,0(r2)
8112db38:	e0bff817 	ldw	r2,-32(fp)
8112db3c:	10800717 	ldw	r2,28(r2)
8112db40:	e0bff315 	stw	r2,-52(fp)
8112db44:	e0bff317 	ldw	r2,-52(fp)
8112db48:	10003326 	beq	r2,zero,8112dc18 <OSTaskChangePrio+0x36c>
8112db4c:	e0bffc03 	ldbu	r2,-16(fp)
8112db50:	e0fffc03 	ldbu	r3,-16(fp)
8112db54:	e13ff317 	ldw	r4,-52(fp)
8112db58:	20c7883a 	add	r3,r4,r3
8112db5c:	18c002c4 	addi	r3,r3,11
8112db60:	18c00003 	ldbu	r3,0(r3)
8112db64:	1809883a 	mov	r4,r3
8112db68:	e0fffc83 	ldbu	r3,-14(fp)
8112db6c:	00c6303a 	nor	r3,zero,r3
8112db70:	20c6703a 	and	r3,r4,r3
8112db74:	1809883a 	mov	r4,r3
8112db78:	e0fff317 	ldw	r3,-52(fp)
8112db7c:	1885883a 	add	r2,r3,r2
8112db80:	108002c4 	addi	r2,r2,11
8112db84:	11000005 	stb	r4,0(r2)
8112db88:	e0bffc03 	ldbu	r2,-16(fp)
8112db8c:	e0fff317 	ldw	r3,-52(fp)
8112db90:	1885883a 	add	r2,r3,r2
8112db94:	108002c4 	addi	r2,r2,11
8112db98:	10800003 	ldbu	r2,0(r2)
8112db9c:	10803fcc 	andi	r2,r2,255
8112dba0:	1000091e 	bne	r2,zero,8112dbc8 <OSTaskChangePrio+0x31c>
8112dba4:	e0bff317 	ldw	r2,-52(fp)
8112dba8:	10800283 	ldbu	r2,10(r2)
8112dbac:	1007883a 	mov	r3,r2
8112dbb0:	e0bffc43 	ldbu	r2,-15(fp)
8112dbb4:	0084303a 	nor	r2,zero,r2
8112dbb8:	1884703a 	and	r2,r3,r2
8112dbbc:	1007883a 	mov	r3,r2
8112dbc0:	e0bff317 	ldw	r2,-52(fp)
8112dbc4:	10c00285 	stb	r3,10(r2)
8112dbc8:	e0bff317 	ldw	r2,-52(fp)
8112dbcc:	10c00283 	ldbu	r3,10(r2)
8112dbd0:	e0bffb83 	ldbu	r2,-18(fp)
8112dbd4:	1884b03a 	or	r2,r3,r2
8112dbd8:	1007883a 	mov	r3,r2
8112dbdc:	e0bff317 	ldw	r2,-52(fp)
8112dbe0:	10c00285 	stb	r3,10(r2)
8112dbe4:	e0bffb03 	ldbu	r2,-20(fp)
8112dbe8:	e0fffb03 	ldbu	r3,-20(fp)
8112dbec:	e13ff317 	ldw	r4,-52(fp)
8112dbf0:	20c7883a 	add	r3,r4,r3
8112dbf4:	18c002c4 	addi	r3,r3,11
8112dbf8:	19000003 	ldbu	r4,0(r3)
8112dbfc:	e0fffbc3 	ldbu	r3,-17(fp)
8112dc00:	20c6b03a 	or	r3,r4,r3
8112dc04:	1809883a 	mov	r4,r3
8112dc08:	e0fff317 	ldw	r3,-52(fp)
8112dc0c:	1885883a 	add	r2,r3,r2
8112dc10:	108002c4 	addi	r2,r2,11
8112dc14:	11000005 	stb	r4,0(r2)
8112dc18:	e0bff817 	ldw	r2,-32(fp)
8112dc1c:	10800817 	ldw	r2,32(r2)
8112dc20:	10004226 	beq	r2,zero,8112dd2c <OSTaskChangePrio+0x480>
8112dc24:	e0bff817 	ldw	r2,-32(fp)
8112dc28:	10800817 	ldw	r2,32(r2)
8112dc2c:	e0bff415 	stw	r2,-48(fp)
8112dc30:	e0bff417 	ldw	r2,-48(fp)
8112dc34:	10800017 	ldw	r2,0(r2)
8112dc38:	e0bff315 	stw	r2,-52(fp)
8112dc3c:	00003906 	br	8112dd24 <OSTaskChangePrio+0x478>
8112dc40:	e0bffc03 	ldbu	r2,-16(fp)
8112dc44:	e0fffc03 	ldbu	r3,-16(fp)
8112dc48:	e13ff317 	ldw	r4,-52(fp)
8112dc4c:	20c7883a 	add	r3,r4,r3
8112dc50:	18c002c4 	addi	r3,r3,11
8112dc54:	18c00003 	ldbu	r3,0(r3)
8112dc58:	1809883a 	mov	r4,r3
8112dc5c:	e0fffc83 	ldbu	r3,-14(fp)
8112dc60:	00c6303a 	nor	r3,zero,r3
8112dc64:	20c6703a 	and	r3,r4,r3
8112dc68:	1809883a 	mov	r4,r3
8112dc6c:	e0fff317 	ldw	r3,-52(fp)
8112dc70:	1885883a 	add	r2,r3,r2
8112dc74:	108002c4 	addi	r2,r2,11
8112dc78:	11000005 	stb	r4,0(r2)
8112dc7c:	e0bffc03 	ldbu	r2,-16(fp)
8112dc80:	e0fff317 	ldw	r3,-52(fp)
8112dc84:	1885883a 	add	r2,r3,r2
8112dc88:	108002c4 	addi	r2,r2,11
8112dc8c:	10800003 	ldbu	r2,0(r2)
8112dc90:	10803fcc 	andi	r2,r2,255
8112dc94:	1000091e 	bne	r2,zero,8112dcbc <OSTaskChangePrio+0x410>
8112dc98:	e0bff317 	ldw	r2,-52(fp)
8112dc9c:	10800283 	ldbu	r2,10(r2)
8112dca0:	1007883a 	mov	r3,r2
8112dca4:	e0bffc43 	ldbu	r2,-15(fp)
8112dca8:	0084303a 	nor	r2,zero,r2
8112dcac:	1884703a 	and	r2,r3,r2
8112dcb0:	1007883a 	mov	r3,r2
8112dcb4:	e0bff317 	ldw	r2,-52(fp)
8112dcb8:	10c00285 	stb	r3,10(r2)
8112dcbc:	e0bff317 	ldw	r2,-52(fp)
8112dcc0:	10c00283 	ldbu	r3,10(r2)
8112dcc4:	e0bffb83 	ldbu	r2,-18(fp)
8112dcc8:	1884b03a 	or	r2,r3,r2
8112dccc:	1007883a 	mov	r3,r2
8112dcd0:	e0bff317 	ldw	r2,-52(fp)
8112dcd4:	10c00285 	stb	r3,10(r2)
8112dcd8:	e0bffb03 	ldbu	r2,-20(fp)
8112dcdc:	e0fffb03 	ldbu	r3,-20(fp)
8112dce0:	e13ff317 	ldw	r4,-52(fp)
8112dce4:	20c7883a 	add	r3,r4,r3
8112dce8:	18c002c4 	addi	r3,r3,11
8112dcec:	19000003 	ldbu	r4,0(r3)
8112dcf0:	e0fffbc3 	ldbu	r3,-17(fp)
8112dcf4:	20c6b03a 	or	r3,r4,r3
8112dcf8:	1809883a 	mov	r4,r3
8112dcfc:	e0fff317 	ldw	r3,-52(fp)
8112dd00:	1885883a 	add	r2,r3,r2
8112dd04:	108002c4 	addi	r2,r2,11
8112dd08:	11000005 	stb	r4,0(r2)
8112dd0c:	e0bff417 	ldw	r2,-48(fp)
8112dd10:	10800104 	addi	r2,r2,4
8112dd14:	e0bff415 	stw	r2,-48(fp)
8112dd18:	e0bff417 	ldw	r2,-48(fp)
8112dd1c:	10800017 	ldw	r2,0(r2)
8112dd20:	e0bff315 	stw	r2,-52(fp)
8112dd24:	e0bff317 	ldw	r2,-52(fp)
8112dd28:	103fc51e 	bne	r2,zero,8112dc40 <__reset+0xfb10dc40>
8112dd2c:	e0bff817 	ldw	r2,-32(fp)
8112dd30:	e0ffff03 	ldbu	r3,-4(fp)
8112dd34:	10c00c85 	stb	r3,50(r2)
8112dd38:	e0bff817 	ldw	r2,-32(fp)
8112dd3c:	e0fffb03 	ldbu	r3,-20(fp)
8112dd40:	10c00d05 	stb	r3,52(r2)
8112dd44:	e0bff817 	ldw	r2,-32(fp)
8112dd48:	e0fffb43 	ldbu	r3,-19(fp)
8112dd4c:	10c00cc5 	stb	r3,51(r2)
8112dd50:	e0bff817 	ldw	r2,-32(fp)
8112dd54:	e0fffb83 	ldbu	r3,-18(fp)
8112dd58:	10c00d85 	stb	r3,54(r2)
8112dd5c:	e0bff817 	ldw	r2,-32(fp)
8112dd60:	e0fffbc3 	ldbu	r3,-17(fp)
8112dd64:	10c00d45 	stb	r3,53(r2)
8112dd68:	e0bff517 	ldw	r2,-44(fp)
8112dd6c:	e0bffa15 	stw	r2,-24(fp)
8112dd70:	e0bffa17 	ldw	r2,-24(fp)
8112dd74:	1001703a 	wrctl	status,r2
8112dd78:	d0a07303 	ldbu	r2,-32308(gp)
8112dd7c:	10803fcc 	andi	r2,r2,255
8112dd80:	10800058 	cmpnei	r2,r2,1
8112dd84:	1000011e 	bne	r2,zero,8112dd8c <OSTaskChangePrio+0x4e0>
8112dd88:	112833c0 	call	8112833c <OS_Sched>
8112dd8c:	0005883a 	mov	r2,zero
8112dd90:	e037883a 	mov	sp,fp
8112dd94:	dfc00117 	ldw	ra,4(sp)
8112dd98:	df000017 	ldw	fp,0(sp)
8112dd9c:	dec00204 	addi	sp,sp,8
8112dda0:	f800283a 	ret

8112dda4 <OSTaskCreate>:
8112dda4:	deffee04 	addi	sp,sp,-72
8112dda8:	de00012e 	bgeu	sp,et,8112ddb0 <OSTaskCreate+0xc>
8112ddac:	003b68fa 	trap	3
8112ddb0:	dfc01115 	stw	ra,68(sp)
8112ddb4:	df001015 	stw	fp,64(sp)
8112ddb8:	df001004 	addi	fp,sp,64
8112ddbc:	e13ffc15 	stw	r4,-16(fp)
8112ddc0:	e17ffd15 	stw	r5,-12(fp)
8112ddc4:	e1bffe15 	stw	r6,-8(fp)
8112ddc8:	3805883a 	mov	r2,r7
8112ddcc:	e0bfff05 	stb	r2,-4(fp)
8112ddd0:	e03ff315 	stw	zero,-52(fp)
8112ddd4:	e0bfff03 	ldbu	r2,-4(fp)
8112ddd8:	10800a70 	cmpltui	r2,r2,41
8112dddc:	1000021e 	bne	r2,zero,8112dde8 <OSTaskCreate+0x44>
8112dde0:	00800a84 	movi	r2,42
8112dde4:	00005706 	br	8112df44 <OSTaskCreate+0x1a0>
8112dde8:	0005303a 	rdctl	r2,status
8112ddec:	e0bffb15 	stw	r2,-20(fp)
8112ddf0:	e0fffb17 	ldw	r3,-20(fp)
8112ddf4:	00bfff84 	movi	r2,-2
8112ddf8:	1884703a 	and	r2,r3,r2
8112ddfc:	1001703a 	wrctl	status,r2
8112de00:	e0bffb17 	ldw	r2,-20(fp)
8112de04:	e0bff315 	stw	r2,-52(fp)
8112de08:	d0a08303 	ldbu	r2,-32244(gp)
8112de0c:	10803fcc 	andi	r2,r2,255
8112de10:	10000626 	beq	r2,zero,8112de2c <OSTaskCreate+0x88>
8112de14:	e0bff317 	ldw	r2,-52(fp)
8112de18:	e0bff415 	stw	r2,-48(fp)
8112de1c:	e0bff417 	ldw	r2,-48(fp)
8112de20:	1001703a 	wrctl	status,r2
8112de24:	00800f04 	movi	r2,60
8112de28:	00004606 	br	8112df44 <OSTaskCreate+0x1a0>
8112de2c:	e0ffff03 	ldbu	r3,-4(fp)
8112de30:	00a04574 	movhi	r2,33045
8112de34:	1087e104 	addi	r2,r2,8068
8112de38:	18c7883a 	add	r3,r3,r3
8112de3c:	18c7883a 	add	r3,r3,r3
8112de40:	10c5883a 	add	r2,r2,r3
8112de44:	10800017 	ldw	r2,0(r2)
8112de48:	1000391e 	bne	r2,zero,8112df30 <OSTaskCreate+0x18c>
8112de4c:	e0ffff03 	ldbu	r3,-4(fp)
8112de50:	00a04574 	movhi	r2,33045
8112de54:	1087e104 	addi	r2,r2,8068
8112de58:	18c7883a 	add	r3,r3,r3
8112de5c:	18c7883a 	add	r3,r3,r3
8112de60:	10c5883a 	add	r2,r2,r3
8112de64:	00c00044 	movi	r3,1
8112de68:	10c00015 	stw	r3,0(r2)
8112de6c:	e0bff317 	ldw	r2,-52(fp)
8112de70:	e0bff515 	stw	r2,-44(fp)
8112de74:	e0bff517 	ldw	r2,-44(fp)
8112de78:	1001703a 	wrctl	status,r2
8112de7c:	000f883a 	mov	r7,zero
8112de80:	e1bffe17 	ldw	r6,-8(fp)
8112de84:	e17ffd17 	ldw	r5,-12(fp)
8112de88:	e13ffc17 	ldw	r4,-16(fp)
8112de8c:	11394880 	call	81139488 <OSTaskStkInit>
8112de90:	e0bff715 	stw	r2,-36(fp)
8112de94:	e0bfff03 	ldbu	r2,-4(fp)
8112de98:	d8000215 	stw	zero,8(sp)
8112de9c:	d8000115 	stw	zero,4(sp)
8112dea0:	d8000015 	stw	zero,0(sp)
8112dea4:	000f883a 	mov	r7,zero
8112dea8:	000d883a 	mov	r6,zero
8112deac:	e17ff717 	ldw	r5,-36(fp)
8112deb0:	1009883a 	mov	r4,r2
8112deb4:	11287840 	call	81128784 <OS_TCBInit>
8112deb8:	e0bff805 	stb	r2,-32(fp)
8112debc:	e0bff803 	ldbu	r2,-32(fp)
8112dec0:	1000061e 	bne	r2,zero,8112dedc <OSTaskCreate+0x138>
8112dec4:	d0a07303 	ldbu	r2,-32308(gp)
8112dec8:	10803fcc 	andi	r2,r2,255
8112decc:	10800058 	cmpnei	r2,r2,1
8112ded0:	1000151e 	bne	r2,zero,8112df28 <OSTaskCreate+0x184>
8112ded4:	112833c0 	call	8112833c <OS_Sched>
8112ded8:	00001306 	br	8112df28 <OSTaskCreate+0x184>
8112dedc:	0005303a 	rdctl	r2,status
8112dee0:	e0bffa15 	stw	r2,-24(fp)
8112dee4:	e0fffa17 	ldw	r3,-24(fp)
8112dee8:	00bfff84 	movi	r2,-2
8112deec:	1884703a 	and	r2,r3,r2
8112def0:	1001703a 	wrctl	status,r2
8112def4:	e0bffa17 	ldw	r2,-24(fp)
8112def8:	e0bff315 	stw	r2,-52(fp)
8112defc:	e0ffff03 	ldbu	r3,-4(fp)
8112df00:	00a04574 	movhi	r2,33045
8112df04:	1087e104 	addi	r2,r2,8068
8112df08:	18c7883a 	add	r3,r3,r3
8112df0c:	18c7883a 	add	r3,r3,r3
8112df10:	10c5883a 	add	r2,r2,r3
8112df14:	10000015 	stw	zero,0(r2)
8112df18:	e0bff317 	ldw	r2,-52(fp)
8112df1c:	e0bff615 	stw	r2,-40(fp)
8112df20:	e0bff617 	ldw	r2,-40(fp)
8112df24:	1001703a 	wrctl	status,r2
8112df28:	e0bff803 	ldbu	r2,-32(fp)
8112df2c:	00000506 	br	8112df44 <OSTaskCreate+0x1a0>
8112df30:	e0bff317 	ldw	r2,-52(fp)
8112df34:	e0bff915 	stw	r2,-28(fp)
8112df38:	e0bff917 	ldw	r2,-28(fp)
8112df3c:	1001703a 	wrctl	status,r2
8112df40:	00800a04 	movi	r2,40
8112df44:	e037883a 	mov	sp,fp
8112df48:	dfc00117 	ldw	ra,4(sp)
8112df4c:	df000017 	ldw	fp,0(sp)
8112df50:	dec00204 	addi	sp,sp,8
8112df54:	f800283a 	ret

8112df58 <OSTaskCreateExt>:
8112df58:	deffec04 	addi	sp,sp,-80
8112df5c:	de00012e 	bgeu	sp,et,8112df64 <OSTaskCreateExt+0xc>
8112df60:	003b68fa 	trap	3
8112df64:	dfc01315 	stw	ra,76(sp)
8112df68:	df001215 	stw	fp,72(sp)
8112df6c:	df001204 	addi	fp,sp,72
8112df70:	e13ffa15 	stw	r4,-24(fp)
8112df74:	e17ffb15 	stw	r5,-20(fp)
8112df78:	e1bffc15 	stw	r6,-16(fp)
8112df7c:	3809883a 	mov	r4,r7
8112df80:	e0c00217 	ldw	r3,8(fp)
8112df84:	e0800617 	ldw	r2,24(fp)
8112df88:	e13ffd05 	stb	r4,-12(fp)
8112df8c:	e0fffe0d 	sth	r3,-8(fp)
8112df90:	e0bfff0d 	sth	r2,-4(fp)
8112df94:	e03ff115 	stw	zero,-60(fp)
8112df98:	e0bffd03 	ldbu	r2,-12(fp)
8112df9c:	10800a70 	cmpltui	r2,r2,41
8112dfa0:	1000021e 	bne	r2,zero,8112dfac <OSTaskCreateExt+0x54>
8112dfa4:	00800a84 	movi	r2,42
8112dfa8:	00006106 	br	8112e130 <OSTaskCreateExt+0x1d8>
8112dfac:	0005303a 	rdctl	r2,status
8112dfb0:	e0bff915 	stw	r2,-28(fp)
8112dfb4:	e0fff917 	ldw	r3,-28(fp)
8112dfb8:	00bfff84 	movi	r2,-2
8112dfbc:	1884703a 	and	r2,r3,r2
8112dfc0:	1001703a 	wrctl	status,r2
8112dfc4:	e0bff917 	ldw	r2,-28(fp)
8112dfc8:	e0bff115 	stw	r2,-60(fp)
8112dfcc:	d0a08303 	ldbu	r2,-32244(gp)
8112dfd0:	10803fcc 	andi	r2,r2,255
8112dfd4:	10000626 	beq	r2,zero,8112dff0 <OSTaskCreateExt+0x98>
8112dfd8:	e0bff117 	ldw	r2,-60(fp)
8112dfdc:	e0bff215 	stw	r2,-56(fp)
8112dfe0:	e0bff217 	ldw	r2,-56(fp)
8112dfe4:	1001703a 	wrctl	status,r2
8112dfe8:	00800f04 	movi	r2,60
8112dfec:	00005006 	br	8112e130 <OSTaskCreateExt+0x1d8>
8112dff0:	e0fffd03 	ldbu	r3,-12(fp)
8112dff4:	00a04574 	movhi	r2,33045
8112dff8:	1087e104 	addi	r2,r2,8068
8112dffc:	18c7883a 	add	r3,r3,r3
8112e000:	18c7883a 	add	r3,r3,r3
8112e004:	10c5883a 	add	r2,r2,r3
8112e008:	10800017 	ldw	r2,0(r2)
8112e00c:	1000431e 	bne	r2,zero,8112e11c <OSTaskCreateExt+0x1c4>
8112e010:	e0fffd03 	ldbu	r3,-12(fp)
8112e014:	00a04574 	movhi	r2,33045
8112e018:	1087e104 	addi	r2,r2,8068
8112e01c:	18c7883a 	add	r3,r3,r3
8112e020:	18c7883a 	add	r3,r3,r3
8112e024:	10c5883a 	add	r2,r2,r3
8112e028:	00c00044 	movi	r3,1
8112e02c:	10c00015 	stw	r3,0(r2)
8112e030:	e0bff117 	ldw	r2,-60(fp)
8112e034:	e0bff315 	stw	r2,-52(fp)
8112e038:	e0bff317 	ldw	r2,-52(fp)
8112e03c:	1001703a 	wrctl	status,r2
8112e040:	e0bfff0b 	ldhu	r2,-4(fp)
8112e044:	100d883a 	mov	r6,r2
8112e048:	e1400417 	ldw	r5,16(fp)
8112e04c:	e1000317 	ldw	r4,12(fp)
8112e050:	112f0000 	call	8112f000 <OS_TaskStkClr>
8112e054:	e0bfff0b 	ldhu	r2,-4(fp)
8112e058:	100f883a 	mov	r7,r2
8112e05c:	e1bffc17 	ldw	r6,-16(fp)
8112e060:	e17ffb17 	ldw	r5,-20(fp)
8112e064:	e13ffa17 	ldw	r4,-24(fp)
8112e068:	11394880 	call	81139488 <OSTaskStkInit>
8112e06c:	e0bff515 	stw	r2,-44(fp)
8112e070:	e0fffd03 	ldbu	r3,-12(fp)
8112e074:	e13ffe0b 	ldhu	r4,-8(fp)
8112e078:	e0bfff0b 	ldhu	r2,-4(fp)
8112e07c:	d8800215 	stw	r2,8(sp)
8112e080:	e0800517 	ldw	r2,20(fp)
8112e084:	d8800115 	stw	r2,4(sp)
8112e088:	e0800417 	ldw	r2,16(fp)
8112e08c:	d8800015 	stw	r2,0(sp)
8112e090:	200f883a 	mov	r7,r4
8112e094:	e1800317 	ldw	r6,12(fp)
8112e098:	e17ff517 	ldw	r5,-44(fp)
8112e09c:	1809883a 	mov	r4,r3
8112e0a0:	11287840 	call	81128784 <OS_TCBInit>
8112e0a4:	e0bff605 	stb	r2,-40(fp)
8112e0a8:	e0bff603 	ldbu	r2,-40(fp)
8112e0ac:	1000061e 	bne	r2,zero,8112e0c8 <OSTaskCreateExt+0x170>
8112e0b0:	d0a07303 	ldbu	r2,-32308(gp)
8112e0b4:	10803fcc 	andi	r2,r2,255
8112e0b8:	10800058 	cmpnei	r2,r2,1
8112e0bc:	1000151e 	bne	r2,zero,8112e114 <OSTaskCreateExt+0x1bc>
8112e0c0:	112833c0 	call	8112833c <OS_Sched>
8112e0c4:	00001306 	br	8112e114 <OSTaskCreateExt+0x1bc>
8112e0c8:	0005303a 	rdctl	r2,status
8112e0cc:	e0bff815 	stw	r2,-32(fp)
8112e0d0:	e0fff817 	ldw	r3,-32(fp)
8112e0d4:	00bfff84 	movi	r2,-2
8112e0d8:	1884703a 	and	r2,r3,r2
8112e0dc:	1001703a 	wrctl	status,r2
8112e0e0:	e0bff817 	ldw	r2,-32(fp)
8112e0e4:	e0bff115 	stw	r2,-60(fp)
8112e0e8:	e0fffd03 	ldbu	r3,-12(fp)
8112e0ec:	00a04574 	movhi	r2,33045
8112e0f0:	1087e104 	addi	r2,r2,8068
8112e0f4:	18c7883a 	add	r3,r3,r3
8112e0f8:	18c7883a 	add	r3,r3,r3
8112e0fc:	10c5883a 	add	r2,r2,r3
8112e100:	10000015 	stw	zero,0(r2)
8112e104:	e0bff117 	ldw	r2,-60(fp)
8112e108:	e0bff415 	stw	r2,-48(fp)
8112e10c:	e0bff417 	ldw	r2,-48(fp)
8112e110:	1001703a 	wrctl	status,r2
8112e114:	e0bff603 	ldbu	r2,-40(fp)
8112e118:	00000506 	br	8112e130 <OSTaskCreateExt+0x1d8>
8112e11c:	e0bff117 	ldw	r2,-60(fp)
8112e120:	e0bff715 	stw	r2,-36(fp)
8112e124:	e0bff717 	ldw	r2,-36(fp)
8112e128:	1001703a 	wrctl	status,r2
8112e12c:	00800a04 	movi	r2,40
8112e130:	e037883a 	mov	sp,fp
8112e134:	dfc00117 	ldw	ra,4(sp)
8112e138:	df000017 	ldw	fp,0(sp)
8112e13c:	dec00204 	addi	sp,sp,8
8112e140:	f800283a 	ret

8112e144 <OSTaskDel>:
8112e144:	defff404 	addi	sp,sp,-48
8112e148:	de00012e 	bgeu	sp,et,8112e150 <OSTaskDel+0xc>
8112e14c:	003b68fa 	trap	3
8112e150:	dfc00b15 	stw	ra,44(sp)
8112e154:	df000a15 	stw	fp,40(sp)
8112e158:	df000a04 	addi	fp,sp,40
8112e15c:	2005883a 	mov	r2,r4
8112e160:	e0bfff05 	stb	r2,-4(fp)
8112e164:	e03ff615 	stw	zero,-40(fp)
8112e168:	d0a08303 	ldbu	r2,-32244(gp)
8112e16c:	10803fcc 	andi	r2,r2,255
8112e170:	10000226 	beq	r2,zero,8112e17c <OSTaskDel+0x38>
8112e174:	00801004 	movi	r2,64
8112e178:	0000c006 	br	8112e47c <OSTaskDel+0x338>
8112e17c:	e0bfff03 	ldbu	r2,-4(fp)
8112e180:	10800a18 	cmpnei	r2,r2,40
8112e184:	1000021e 	bne	r2,zero,8112e190 <OSTaskDel+0x4c>
8112e188:	00800f84 	movi	r2,62
8112e18c:	0000bb06 	br	8112e47c <OSTaskDel+0x338>
8112e190:	e0bfff03 	ldbu	r2,-4(fp)
8112e194:	10800a30 	cmpltui	r2,r2,40
8112e198:	1000051e 	bne	r2,zero,8112e1b0 <OSTaskDel+0x6c>
8112e19c:	e0bfff03 	ldbu	r2,-4(fp)
8112e1a0:	10803fe0 	cmpeqi	r2,r2,255
8112e1a4:	1000021e 	bne	r2,zero,8112e1b0 <OSTaskDel+0x6c>
8112e1a8:	00800a84 	movi	r2,42
8112e1ac:	0000b306 	br	8112e47c <OSTaskDel+0x338>
8112e1b0:	0005303a 	rdctl	r2,status
8112e1b4:	e0bffe15 	stw	r2,-8(fp)
8112e1b8:	e0fffe17 	ldw	r3,-8(fp)
8112e1bc:	00bfff84 	movi	r2,-2
8112e1c0:	1884703a 	and	r2,r3,r2
8112e1c4:	1001703a 	wrctl	status,r2
8112e1c8:	e0bffe17 	ldw	r2,-8(fp)
8112e1cc:	e0bff615 	stw	r2,-40(fp)
8112e1d0:	e0bfff03 	ldbu	r2,-4(fp)
8112e1d4:	10803fd8 	cmpnei	r2,r2,255
8112e1d8:	1000031e 	bne	r2,zero,8112e1e8 <OSTaskDel+0xa4>
8112e1dc:	d0a08417 	ldw	r2,-32240(gp)
8112e1e0:	10800c83 	ldbu	r2,50(r2)
8112e1e4:	e0bfff05 	stb	r2,-4(fp)
8112e1e8:	e0ffff03 	ldbu	r3,-4(fp)
8112e1ec:	00a04574 	movhi	r2,33045
8112e1f0:	1087e104 	addi	r2,r2,8068
8112e1f4:	18c7883a 	add	r3,r3,r3
8112e1f8:	18c7883a 	add	r3,r3,r3
8112e1fc:	10c5883a 	add	r2,r2,r3
8112e200:	10800017 	ldw	r2,0(r2)
8112e204:	e0bff815 	stw	r2,-32(fp)
8112e208:	e0bff817 	ldw	r2,-32(fp)
8112e20c:	1000061e 	bne	r2,zero,8112e228 <OSTaskDel+0xe4>
8112e210:	e0bff617 	ldw	r2,-40(fp)
8112e214:	e0bff715 	stw	r2,-36(fp)
8112e218:	e0bff717 	ldw	r2,-36(fp)
8112e21c:	1001703a 	wrctl	status,r2
8112e220:	008010c4 	movi	r2,67
8112e224:	00009506 	br	8112e47c <OSTaskDel+0x338>
8112e228:	e0bff817 	ldw	r2,-32(fp)
8112e22c:	10800058 	cmpnei	r2,r2,1
8112e230:	1000061e 	bne	r2,zero,8112e24c <OSTaskDel+0x108>
8112e234:	e0bff617 	ldw	r2,-40(fp)
8112e238:	e0bff915 	stw	r2,-28(fp)
8112e23c:	e0bff917 	ldw	r2,-28(fp)
8112e240:	1001703a 	wrctl	status,r2
8112e244:	00800f44 	movi	r2,61
8112e248:	00008c06 	br	8112e47c <OSTaskDel+0x338>
8112e24c:	e0bff817 	ldw	r2,-32(fp)
8112e250:	10800d03 	ldbu	r2,52(r2)
8112e254:	10c03fcc 	andi	r3,r2,255
8112e258:	e0bff817 	ldw	r2,-32(fp)
8112e25c:	10800d03 	ldbu	r2,52(r2)
8112e260:	11003fcc 	andi	r4,r2,255
8112e264:	d0a08044 	addi	r2,gp,-32255
8112e268:	2085883a 	add	r2,r4,r2
8112e26c:	10800003 	ldbu	r2,0(r2)
8112e270:	1009883a 	mov	r4,r2
8112e274:	e0bff817 	ldw	r2,-32(fp)
8112e278:	10800d43 	ldbu	r2,53(r2)
8112e27c:	0084303a 	nor	r2,zero,r2
8112e280:	2084703a 	and	r2,r4,r2
8112e284:	1009883a 	mov	r4,r2
8112e288:	d0a08044 	addi	r2,gp,-32255
8112e28c:	1885883a 	add	r2,r3,r2
8112e290:	11000005 	stb	r4,0(r2)
8112e294:	e0bff817 	ldw	r2,-32(fp)
8112e298:	10800d03 	ldbu	r2,52(r2)
8112e29c:	10c03fcc 	andi	r3,r2,255
8112e2a0:	d0a08044 	addi	r2,gp,-32255
8112e2a4:	1885883a 	add	r2,r3,r2
8112e2a8:	10800003 	ldbu	r2,0(r2)
8112e2ac:	10803fcc 	andi	r2,r2,255
8112e2b0:	1000071e 	bne	r2,zero,8112e2d0 <OSTaskDel+0x18c>
8112e2b4:	e0bff817 	ldw	r2,-32(fp)
8112e2b8:	10800d83 	ldbu	r2,54(r2)
8112e2bc:	0084303a 	nor	r2,zero,r2
8112e2c0:	1007883a 	mov	r3,r2
8112e2c4:	d0a08003 	ldbu	r2,-32256(gp)
8112e2c8:	1884703a 	and	r2,r3,r2
8112e2cc:	d0a08005 	stb	r2,-32256(gp)
8112e2d0:	e0bff817 	ldw	r2,-32(fp)
8112e2d4:	10800717 	ldw	r2,28(r2)
8112e2d8:	10000526 	beq	r2,zero,8112e2f0 <OSTaskDel+0x1ac>
8112e2dc:	e0bff817 	ldw	r2,-32(fp)
8112e2e0:	10800717 	ldw	r2,28(r2)
8112e2e4:	100b883a 	mov	r5,r2
8112e2e8:	e13ff817 	ldw	r4,-32(fp)
8112e2ec:	1127c900 	call	81127c90 <OS_EventTaskRemove>
8112e2f0:	e0bff817 	ldw	r2,-32(fp)
8112e2f4:	10800817 	ldw	r2,32(r2)
8112e2f8:	10000526 	beq	r2,zero,8112e310 <OSTaskDel+0x1cc>
8112e2fc:	e0bff817 	ldw	r2,-32(fp)
8112e300:	10800817 	ldw	r2,32(r2)
8112e304:	100b883a 	mov	r5,r2
8112e308:	e13ff817 	ldw	r4,-32(fp)
8112e30c:	1127d500 	call	81127d50 <OS_EventTaskRemoveMulti>
8112e310:	e0bff817 	ldw	r2,-32(fp)
8112e314:	10800a17 	ldw	r2,40(r2)
8112e318:	e0bffb15 	stw	r2,-20(fp)
8112e31c:	e0bffb17 	ldw	r2,-20(fp)
8112e320:	10000226 	beq	r2,zero,8112e32c <OSTaskDel+0x1e8>
8112e324:	e13ffb17 	ldw	r4,-20(fp)
8112e328:	112a3280 	call	8112a328 <OS_FlagUnlink>
8112e32c:	e0bff817 	ldw	r2,-32(fp)
8112e330:	10000b8d 	sth	zero,46(r2)
8112e334:	e0bff817 	ldw	r2,-32(fp)
8112e338:	10000c05 	stb	zero,48(r2)
8112e33c:	e0bff817 	ldw	r2,-32(fp)
8112e340:	10000c45 	stb	zero,49(r2)
8112e344:	d0a07103 	ldbu	r2,-32316(gp)
8112e348:	10803fcc 	andi	r2,r2,255
8112e34c:	10803fe0 	cmpeqi	r2,r2,255
8112e350:	1000031e 	bne	r2,zero,8112e360 <OSTaskDel+0x21c>
8112e354:	d0a07103 	ldbu	r2,-32316(gp)
8112e358:	10800044 	addi	r2,r2,1
8112e35c:	d0a07105 	stb	r2,-32316(gp)
8112e360:	e0bff617 	ldw	r2,-40(fp)
8112e364:	e0bffd15 	stw	r2,-12(fp)
8112e368:	e0bffd17 	ldw	r2,-12(fp)
8112e36c:	1001703a 	wrctl	status,r2
8112e370:	11278580 	call	81127858 <OS_Dummy>
8112e374:	0005303a 	rdctl	r2,status
8112e378:	e0bffa15 	stw	r2,-24(fp)
8112e37c:	e0fffa17 	ldw	r3,-24(fp)
8112e380:	00bfff84 	movi	r2,-2
8112e384:	1884703a 	and	r2,r3,r2
8112e388:	1001703a 	wrctl	status,r2
8112e38c:	e0bffa17 	ldw	r2,-24(fp)
8112e390:	e0bff615 	stw	r2,-40(fp)
8112e394:	d0a07103 	ldbu	r2,-32316(gp)
8112e398:	10803fcc 	andi	r2,r2,255
8112e39c:	10000326 	beq	r2,zero,8112e3ac <OSTaskDel+0x268>
8112e3a0:	d0a07103 	ldbu	r2,-32316(gp)
8112e3a4:	10bfffc4 	addi	r2,r2,-1
8112e3a8:	d0a07105 	stb	r2,-32316(gp)
8112e3ac:	e13ff817 	ldw	r4,-32(fp)
8112e3b0:	11396180 	call	81139618 <OSTaskDelHook>
8112e3b4:	d0a07c43 	ldbu	r2,-32271(gp)
8112e3b8:	10bfffc4 	addi	r2,r2,-1
8112e3bc:	d0a07c45 	stb	r2,-32271(gp)
8112e3c0:	e0ffff03 	ldbu	r3,-4(fp)
8112e3c4:	00a04574 	movhi	r2,33045
8112e3c8:	1087e104 	addi	r2,r2,8068
8112e3cc:	18c7883a 	add	r3,r3,r3
8112e3d0:	18c7883a 	add	r3,r3,r3
8112e3d4:	10c5883a 	add	r2,r2,r3
8112e3d8:	10000015 	stw	zero,0(r2)
8112e3dc:	e0bff817 	ldw	r2,-32(fp)
8112e3e0:	10800617 	ldw	r2,24(r2)
8112e3e4:	1000071e 	bne	r2,zero,8112e404 <OSTaskDel+0x2c0>
8112e3e8:	e0bff817 	ldw	r2,-32(fp)
8112e3ec:	10800517 	ldw	r2,20(r2)
8112e3f0:	10000615 	stw	zero,24(r2)
8112e3f4:	e0bff817 	ldw	r2,-32(fp)
8112e3f8:	10800517 	ldw	r2,20(r2)
8112e3fc:	d0a07615 	stw	r2,-32296(gp)
8112e400:	00000a06 	br	8112e42c <OSTaskDel+0x2e8>
8112e404:	e0bff817 	ldw	r2,-32(fp)
8112e408:	10800617 	ldw	r2,24(r2)
8112e40c:	e0fff817 	ldw	r3,-32(fp)
8112e410:	18c00517 	ldw	r3,20(r3)
8112e414:	10c00515 	stw	r3,20(r2)
8112e418:	e0bff817 	ldw	r2,-32(fp)
8112e41c:	10800517 	ldw	r2,20(r2)
8112e420:	e0fff817 	ldw	r3,-32(fp)
8112e424:	18c00617 	ldw	r3,24(r3)
8112e428:	10c00615 	stw	r3,24(r2)
8112e42c:	d0e07b17 	ldw	r3,-32276(gp)
8112e430:	e0bff817 	ldw	r2,-32(fp)
8112e434:	10c00515 	stw	r3,20(r2)
8112e438:	e0bff817 	ldw	r2,-32(fp)
8112e43c:	d0a07b15 	stw	r2,-32276(gp)
8112e440:	e0bff817 	ldw	r2,-32(fp)
8112e444:	00c00fc4 	movi	r3,63
8112e448:	10c01305 	stb	r3,76(r2)
8112e44c:	e0bff817 	ldw	r2,-32(fp)
8112e450:	10001345 	stb	zero,77(r2)
8112e454:	e0bff617 	ldw	r2,-40(fp)
8112e458:	e0bffc15 	stw	r2,-16(fp)
8112e45c:	e0bffc17 	ldw	r2,-16(fp)
8112e460:	1001703a 	wrctl	status,r2
8112e464:	d0a07303 	ldbu	r2,-32308(gp)
8112e468:	10803fcc 	andi	r2,r2,255
8112e46c:	10800058 	cmpnei	r2,r2,1
8112e470:	1000011e 	bne	r2,zero,8112e478 <OSTaskDel+0x334>
8112e474:	112833c0 	call	8112833c <OS_Sched>
8112e478:	0005883a 	mov	r2,zero
8112e47c:	e037883a 	mov	sp,fp
8112e480:	dfc00117 	ldw	ra,4(sp)
8112e484:	df000017 	ldw	fp,0(sp)
8112e488:	dec00204 	addi	sp,sp,8
8112e48c:	f800283a 	ret

8112e490 <OSTaskDelReq>:
8112e490:	defff504 	addi	sp,sp,-44
8112e494:	de00012e 	bgeu	sp,et,8112e49c <OSTaskDelReq+0xc>
8112e498:	003b68fa 	trap	3
8112e49c:	df000a15 	stw	fp,40(sp)
8112e4a0:	df000a04 	addi	fp,sp,40
8112e4a4:	2005883a 	mov	r2,r4
8112e4a8:	e0bfff05 	stb	r2,-4(fp)
8112e4ac:	e03ff615 	stw	zero,-40(fp)
8112e4b0:	e0bfff03 	ldbu	r2,-4(fp)
8112e4b4:	10800a18 	cmpnei	r2,r2,40
8112e4b8:	1000021e 	bne	r2,zero,8112e4c4 <OSTaskDelReq+0x34>
8112e4bc:	00800f84 	movi	r2,62
8112e4c0:	00004506 	br	8112e5d8 <OSTaskDelReq+0x148>
8112e4c4:	e0bfff03 	ldbu	r2,-4(fp)
8112e4c8:	10800a30 	cmpltui	r2,r2,40
8112e4cc:	1000051e 	bne	r2,zero,8112e4e4 <OSTaskDelReq+0x54>
8112e4d0:	e0bfff03 	ldbu	r2,-4(fp)
8112e4d4:	10803fe0 	cmpeqi	r2,r2,255
8112e4d8:	1000021e 	bne	r2,zero,8112e4e4 <OSTaskDelReq+0x54>
8112e4dc:	00800a84 	movi	r2,42
8112e4e0:	00003d06 	br	8112e5d8 <OSTaskDelReq+0x148>
8112e4e4:	e0bfff03 	ldbu	r2,-4(fp)
8112e4e8:	10803fd8 	cmpnei	r2,r2,255
8112e4ec:	1000111e 	bne	r2,zero,8112e534 <OSTaskDelReq+0xa4>
8112e4f0:	0005303a 	rdctl	r2,status
8112e4f4:	e0bff915 	stw	r2,-28(fp)
8112e4f8:	e0fff917 	ldw	r3,-28(fp)
8112e4fc:	00bfff84 	movi	r2,-2
8112e500:	1884703a 	and	r2,r3,r2
8112e504:	1001703a 	wrctl	status,r2
8112e508:	e0bff917 	ldw	r2,-28(fp)
8112e50c:	e0bff615 	stw	r2,-40(fp)
8112e510:	d0a08417 	ldw	r2,-32240(gp)
8112e514:	10800dc3 	ldbu	r2,55(r2)
8112e518:	e0bff805 	stb	r2,-32(fp)
8112e51c:	e0bff617 	ldw	r2,-40(fp)
8112e520:	e0bffe15 	stw	r2,-8(fp)
8112e524:	e0bffe17 	ldw	r2,-8(fp)
8112e528:	1001703a 	wrctl	status,r2
8112e52c:	e0bff803 	ldbu	r2,-32(fp)
8112e530:	00002906 	br	8112e5d8 <OSTaskDelReq+0x148>
8112e534:	0005303a 	rdctl	r2,status
8112e538:	e0bff715 	stw	r2,-36(fp)
8112e53c:	e0fff717 	ldw	r3,-36(fp)
8112e540:	00bfff84 	movi	r2,-2
8112e544:	1884703a 	and	r2,r3,r2
8112e548:	1001703a 	wrctl	status,r2
8112e54c:	e0bff717 	ldw	r2,-36(fp)
8112e550:	e0bff615 	stw	r2,-40(fp)
8112e554:	e0ffff03 	ldbu	r3,-4(fp)
8112e558:	00a04574 	movhi	r2,33045
8112e55c:	1087e104 	addi	r2,r2,8068
8112e560:	18c7883a 	add	r3,r3,r3
8112e564:	18c7883a 	add	r3,r3,r3
8112e568:	10c5883a 	add	r2,r2,r3
8112e56c:	10800017 	ldw	r2,0(r2)
8112e570:	e0bffb15 	stw	r2,-20(fp)
8112e574:	e0bffb17 	ldw	r2,-20(fp)
8112e578:	1000061e 	bne	r2,zero,8112e594 <OSTaskDelReq+0x104>
8112e57c:	e0bff617 	ldw	r2,-40(fp)
8112e580:	e0bffa15 	stw	r2,-24(fp)
8112e584:	e0bffa17 	ldw	r2,-24(fp)
8112e588:	1001703a 	wrctl	status,r2
8112e58c:	008010c4 	movi	r2,67
8112e590:	00001106 	br	8112e5d8 <OSTaskDelReq+0x148>
8112e594:	e0bffb17 	ldw	r2,-20(fp)
8112e598:	10800058 	cmpnei	r2,r2,1
8112e59c:	1000061e 	bne	r2,zero,8112e5b8 <OSTaskDelReq+0x128>
8112e5a0:	e0bff617 	ldw	r2,-40(fp)
8112e5a4:	e0bffc15 	stw	r2,-16(fp)
8112e5a8:	e0bffc17 	ldw	r2,-16(fp)
8112e5ac:	1001703a 	wrctl	status,r2
8112e5b0:	00800f44 	movi	r2,61
8112e5b4:	00000806 	br	8112e5d8 <OSTaskDelReq+0x148>
8112e5b8:	e0bffb17 	ldw	r2,-20(fp)
8112e5bc:	00c00fc4 	movi	r3,63
8112e5c0:	10c00dc5 	stb	r3,55(r2)
8112e5c4:	e0bff617 	ldw	r2,-40(fp)
8112e5c8:	e0bffd15 	stw	r2,-12(fp)
8112e5cc:	e0bffd17 	ldw	r2,-12(fp)
8112e5d0:	1001703a 	wrctl	status,r2
8112e5d4:	0005883a 	mov	r2,zero
8112e5d8:	e037883a 	mov	sp,fp
8112e5dc:	df000017 	ldw	fp,0(sp)
8112e5e0:	dec00104 	addi	sp,sp,4
8112e5e4:	f800283a 	ret

8112e5e8 <OSTaskNameGet>:
8112e5e8:	defff404 	addi	sp,sp,-48
8112e5ec:	de00012e 	bgeu	sp,et,8112e5f4 <OSTaskNameGet+0xc>
8112e5f0:	003b68fa 	trap	3
8112e5f4:	dfc00b15 	stw	ra,44(sp)
8112e5f8:	df000a15 	stw	fp,40(sp)
8112e5fc:	df000a04 	addi	fp,sp,40
8112e600:	2005883a 	mov	r2,r4
8112e604:	e17ffe15 	stw	r5,-8(fp)
8112e608:	e1bfff15 	stw	r6,-4(fp)
8112e60c:	e0bffd05 	stb	r2,-12(fp)
8112e610:	e03ff615 	stw	zero,-40(fp)
8112e614:	e0bfff17 	ldw	r2,-4(fp)
8112e618:	1000021e 	bne	r2,zero,8112e624 <OSTaskNameGet+0x3c>
8112e61c:	0005883a 	mov	r2,zero
8112e620:	00005406 	br	8112e774 <OSTaskNameGet+0x18c>
8112e624:	e0bffd03 	ldbu	r2,-12(fp)
8112e628:	10800a70 	cmpltui	r2,r2,41
8112e62c:	1000081e 	bne	r2,zero,8112e650 <OSTaskNameGet+0x68>
8112e630:	e0bffd03 	ldbu	r2,-12(fp)
8112e634:	10803fe0 	cmpeqi	r2,r2,255
8112e638:	1000051e 	bne	r2,zero,8112e650 <OSTaskNameGet+0x68>
8112e63c:	e0bfff17 	ldw	r2,-4(fp)
8112e640:	00c00a84 	movi	r3,42
8112e644:	10c00005 	stb	r3,0(r2)
8112e648:	0005883a 	mov	r2,zero
8112e64c:	00004906 	br	8112e774 <OSTaskNameGet+0x18c>
8112e650:	e0bffe17 	ldw	r2,-8(fp)
8112e654:	1000051e 	bne	r2,zero,8112e66c <OSTaskNameGet+0x84>
8112e658:	e0bfff17 	ldw	r2,-4(fp)
8112e65c:	00c00304 	movi	r3,12
8112e660:	10c00005 	stb	r3,0(r2)
8112e664:	0005883a 	mov	r2,zero
8112e668:	00004206 	br	8112e774 <OSTaskNameGet+0x18c>
8112e66c:	d0a08303 	ldbu	r2,-32244(gp)
8112e670:	10803fcc 	andi	r2,r2,255
8112e674:	10000526 	beq	r2,zero,8112e68c <OSTaskNameGet+0xa4>
8112e678:	e0bfff17 	ldw	r2,-4(fp)
8112e67c:	00c00444 	movi	r3,17
8112e680:	10c00005 	stb	r3,0(r2)
8112e684:	0005883a 	mov	r2,zero
8112e688:	00003a06 	br	8112e774 <OSTaskNameGet+0x18c>
8112e68c:	0005303a 	rdctl	r2,status
8112e690:	e0bffc15 	stw	r2,-16(fp)
8112e694:	e0fffc17 	ldw	r3,-16(fp)
8112e698:	00bfff84 	movi	r2,-2
8112e69c:	1884703a 	and	r2,r3,r2
8112e6a0:	1001703a 	wrctl	status,r2
8112e6a4:	e0bffc17 	ldw	r2,-16(fp)
8112e6a8:	e0bff615 	stw	r2,-40(fp)
8112e6ac:	e0bffd03 	ldbu	r2,-12(fp)
8112e6b0:	10803fd8 	cmpnei	r2,r2,255
8112e6b4:	1000031e 	bne	r2,zero,8112e6c4 <OSTaskNameGet+0xdc>
8112e6b8:	d0a08417 	ldw	r2,-32240(gp)
8112e6bc:	10800c83 	ldbu	r2,50(r2)
8112e6c0:	e0bffd05 	stb	r2,-12(fp)
8112e6c4:	e0fffd03 	ldbu	r3,-12(fp)
8112e6c8:	00a04574 	movhi	r2,33045
8112e6cc:	1087e104 	addi	r2,r2,8068
8112e6d0:	18c7883a 	add	r3,r3,r3
8112e6d4:	18c7883a 	add	r3,r3,r3
8112e6d8:	10c5883a 	add	r2,r2,r3
8112e6dc:	10800017 	ldw	r2,0(r2)
8112e6e0:	e0bff815 	stw	r2,-32(fp)
8112e6e4:	e0bff817 	ldw	r2,-32(fp)
8112e6e8:	1000091e 	bne	r2,zero,8112e710 <OSTaskNameGet+0x128>
8112e6ec:	e0bff617 	ldw	r2,-40(fp)
8112e6f0:	e0bff715 	stw	r2,-36(fp)
8112e6f4:	e0bff717 	ldw	r2,-36(fp)
8112e6f8:	1001703a 	wrctl	status,r2
8112e6fc:	e0bfff17 	ldw	r2,-4(fp)
8112e700:	00c010c4 	movi	r3,67
8112e704:	10c00005 	stb	r3,0(r2)
8112e708:	0005883a 	mov	r2,zero
8112e70c:	00001906 	br	8112e774 <OSTaskNameGet+0x18c>
8112e710:	e0bff817 	ldw	r2,-32(fp)
8112e714:	10800058 	cmpnei	r2,r2,1
8112e718:	1000091e 	bne	r2,zero,8112e740 <OSTaskNameGet+0x158>
8112e71c:	e0bff617 	ldw	r2,-40(fp)
8112e720:	e0bff915 	stw	r2,-28(fp)
8112e724:	e0bff917 	ldw	r2,-28(fp)
8112e728:	1001703a 	wrctl	status,r2
8112e72c:	e0bfff17 	ldw	r2,-4(fp)
8112e730:	00c010c4 	movi	r3,67
8112e734:	10c00005 	stb	r3,0(r2)
8112e738:	0005883a 	mov	r2,zero
8112e73c:	00000d06 	br	8112e774 <OSTaskNameGet+0x18c>
8112e740:	e0bff817 	ldw	r2,-32(fp)
8112e744:	10801304 	addi	r2,r2,76
8112e748:	100b883a 	mov	r5,r2
8112e74c:	e13ffe17 	ldw	r4,-8(fp)
8112e750:	11284900 	call	81128490 <OS_StrCopy>
8112e754:	e0bffb05 	stb	r2,-20(fp)
8112e758:	e0bff617 	ldw	r2,-40(fp)
8112e75c:	e0bffa15 	stw	r2,-24(fp)
8112e760:	e0bffa17 	ldw	r2,-24(fp)
8112e764:	1001703a 	wrctl	status,r2
8112e768:	e0bfff17 	ldw	r2,-4(fp)
8112e76c:	10000005 	stb	zero,0(r2)
8112e770:	e0bffb03 	ldbu	r2,-20(fp)
8112e774:	e037883a 	mov	sp,fp
8112e778:	dfc00117 	ldw	ra,4(sp)
8112e77c:	df000017 	ldw	fp,0(sp)
8112e780:	dec00204 	addi	sp,sp,8
8112e784:	f800283a 	ret

8112e788 <OSTaskNameSet>:
8112e788:	defff304 	addi	sp,sp,-52
8112e78c:	de00012e 	bgeu	sp,et,8112e794 <OSTaskNameSet+0xc>
8112e790:	003b68fa 	trap	3
8112e794:	dfc00c15 	stw	ra,48(sp)
8112e798:	df000b15 	stw	fp,44(sp)
8112e79c:	df000b04 	addi	fp,sp,44
8112e7a0:	2005883a 	mov	r2,r4
8112e7a4:	e17ffe15 	stw	r5,-8(fp)
8112e7a8:	e1bfff15 	stw	r6,-4(fp)
8112e7ac:	e0bffd05 	stb	r2,-12(fp)
8112e7b0:	e03ff515 	stw	zero,-44(fp)
8112e7b4:	e0bfff17 	ldw	r2,-4(fp)
8112e7b8:	10005c26 	beq	r2,zero,8112e92c <OSTaskNameSet+0x1a4>
8112e7bc:	e0bffd03 	ldbu	r2,-12(fp)
8112e7c0:	10800a70 	cmpltui	r2,r2,41
8112e7c4:	1000071e 	bne	r2,zero,8112e7e4 <OSTaskNameSet+0x5c>
8112e7c8:	e0bffd03 	ldbu	r2,-12(fp)
8112e7cc:	10803fe0 	cmpeqi	r2,r2,255
8112e7d0:	1000041e 	bne	r2,zero,8112e7e4 <OSTaskNameSet+0x5c>
8112e7d4:	e0bfff17 	ldw	r2,-4(fp)
8112e7d8:	00c00a84 	movi	r3,42
8112e7dc:	10c00005 	stb	r3,0(r2)
8112e7e0:	00005306 	br	8112e930 <OSTaskNameSet+0x1a8>
8112e7e4:	e0bffe17 	ldw	r2,-8(fp)
8112e7e8:	1000041e 	bne	r2,zero,8112e7fc <OSTaskNameSet+0x74>
8112e7ec:	e0bfff17 	ldw	r2,-4(fp)
8112e7f0:	00c00304 	movi	r3,12
8112e7f4:	10c00005 	stb	r3,0(r2)
8112e7f8:	00004d06 	br	8112e930 <OSTaskNameSet+0x1a8>
8112e7fc:	d0a08303 	ldbu	r2,-32244(gp)
8112e800:	10803fcc 	andi	r2,r2,255
8112e804:	10000426 	beq	r2,zero,8112e818 <OSTaskNameSet+0x90>
8112e808:	e0bfff17 	ldw	r2,-4(fp)
8112e80c:	00c00484 	movi	r3,18
8112e810:	10c00005 	stb	r3,0(r2)
8112e814:	00004606 	br	8112e930 <OSTaskNameSet+0x1a8>
8112e818:	0005303a 	rdctl	r2,status
8112e81c:	e0bffc15 	stw	r2,-16(fp)
8112e820:	e0fffc17 	ldw	r3,-16(fp)
8112e824:	00bfff84 	movi	r2,-2
8112e828:	1884703a 	and	r2,r3,r2
8112e82c:	1001703a 	wrctl	status,r2
8112e830:	e0bffc17 	ldw	r2,-16(fp)
8112e834:	e0bff515 	stw	r2,-44(fp)
8112e838:	e0bffd03 	ldbu	r2,-12(fp)
8112e83c:	10803fd8 	cmpnei	r2,r2,255
8112e840:	1000031e 	bne	r2,zero,8112e850 <OSTaskNameSet+0xc8>
8112e844:	d0a08417 	ldw	r2,-32240(gp)
8112e848:	10800c83 	ldbu	r2,50(r2)
8112e84c:	e0bffd05 	stb	r2,-12(fp)
8112e850:	e0fffd03 	ldbu	r3,-12(fp)
8112e854:	00a04574 	movhi	r2,33045
8112e858:	1087e104 	addi	r2,r2,8068
8112e85c:	18c7883a 	add	r3,r3,r3
8112e860:	18c7883a 	add	r3,r3,r3
8112e864:	10c5883a 	add	r2,r2,r3
8112e868:	10800017 	ldw	r2,0(r2)
8112e86c:	e0bff715 	stw	r2,-36(fp)
8112e870:	e0bff717 	ldw	r2,-36(fp)
8112e874:	1000081e 	bne	r2,zero,8112e898 <OSTaskNameSet+0x110>
8112e878:	e0bff517 	ldw	r2,-44(fp)
8112e87c:	e0bff615 	stw	r2,-40(fp)
8112e880:	e0bff617 	ldw	r2,-40(fp)
8112e884:	1001703a 	wrctl	status,r2
8112e888:	e0bfff17 	ldw	r2,-4(fp)
8112e88c:	00c010c4 	movi	r3,67
8112e890:	10c00005 	stb	r3,0(r2)
8112e894:	00002606 	br	8112e930 <OSTaskNameSet+0x1a8>
8112e898:	e0bff717 	ldw	r2,-36(fp)
8112e89c:	10800058 	cmpnei	r2,r2,1
8112e8a0:	1000081e 	bne	r2,zero,8112e8c4 <OSTaskNameSet+0x13c>
8112e8a4:	e0bff517 	ldw	r2,-44(fp)
8112e8a8:	e0bff815 	stw	r2,-32(fp)
8112e8ac:	e0bff817 	ldw	r2,-32(fp)
8112e8b0:	1001703a 	wrctl	status,r2
8112e8b4:	e0bfff17 	ldw	r2,-4(fp)
8112e8b8:	00c010c4 	movi	r3,67
8112e8bc:	10c00005 	stb	r3,0(r2)
8112e8c0:	00001b06 	br	8112e930 <OSTaskNameSet+0x1a8>
8112e8c4:	e13ffe17 	ldw	r4,-8(fp)
8112e8c8:	112850c0 	call	8112850c <OS_StrLen>
8112e8cc:	e0bffa05 	stb	r2,-24(fp)
8112e8d0:	e0bffa03 	ldbu	r2,-24(fp)
8112e8d4:	10800830 	cmpltui	r2,r2,32
8112e8d8:	1000081e 	bne	r2,zero,8112e8fc <OSTaskNameSet+0x174>
8112e8dc:	e0bff517 	ldw	r2,-44(fp)
8112e8e0:	e0bff915 	stw	r2,-28(fp)
8112e8e4:	e0bff917 	ldw	r2,-28(fp)
8112e8e8:	1001703a 	wrctl	status,r2
8112e8ec:	e0bfff17 	ldw	r2,-4(fp)
8112e8f0:	00c01044 	movi	r3,65
8112e8f4:	10c00005 	stb	r3,0(r2)
8112e8f8:	00000d06 	br	8112e930 <OSTaskNameSet+0x1a8>
8112e8fc:	e0bff717 	ldw	r2,-36(fp)
8112e900:	10801304 	addi	r2,r2,76
8112e904:	e17ffe17 	ldw	r5,-8(fp)
8112e908:	1009883a 	mov	r4,r2
8112e90c:	11284900 	call	81128490 <OS_StrCopy>
8112e910:	e0bff517 	ldw	r2,-44(fp)
8112e914:	e0bffb15 	stw	r2,-20(fp)
8112e918:	e0bffb17 	ldw	r2,-20(fp)
8112e91c:	1001703a 	wrctl	status,r2
8112e920:	e0bfff17 	ldw	r2,-4(fp)
8112e924:	10000005 	stb	zero,0(r2)
8112e928:	00000106 	br	8112e930 <OSTaskNameSet+0x1a8>
8112e92c:	0001883a 	nop
8112e930:	e037883a 	mov	sp,fp
8112e934:	dfc00117 	ldw	ra,4(sp)
8112e938:	df000017 	ldw	fp,0(sp)
8112e93c:	dec00204 	addi	sp,sp,8
8112e940:	f800283a 	ret

8112e944 <OSTaskResume>:
8112e944:	defff404 	addi	sp,sp,-48
8112e948:	de00012e 	bgeu	sp,et,8112e950 <OSTaskResume+0xc>
8112e94c:	003b68fa 	trap	3
8112e950:	dfc00b15 	stw	ra,44(sp)
8112e954:	df000a15 	stw	fp,40(sp)
8112e958:	df000a04 	addi	fp,sp,40
8112e95c:	2005883a 	mov	r2,r4
8112e960:	e0bfff05 	stb	r2,-4(fp)
8112e964:	e03ff615 	stw	zero,-40(fp)
8112e968:	e0bfff03 	ldbu	r2,-4(fp)
8112e96c:	10800a30 	cmpltui	r2,r2,40
8112e970:	1000021e 	bne	r2,zero,8112e97c <OSTaskResume+0x38>
8112e974:	00800a84 	movi	r2,42
8112e978:	00006406 	br	8112eb0c <OSTaskResume+0x1c8>
8112e97c:	0005303a 	rdctl	r2,status
8112e980:	e0bffe15 	stw	r2,-8(fp)
8112e984:	e0fffe17 	ldw	r3,-8(fp)
8112e988:	00bfff84 	movi	r2,-2
8112e98c:	1884703a 	and	r2,r3,r2
8112e990:	1001703a 	wrctl	status,r2
8112e994:	e0bffe17 	ldw	r2,-8(fp)
8112e998:	e0bff615 	stw	r2,-40(fp)
8112e99c:	e0ffff03 	ldbu	r3,-4(fp)
8112e9a0:	00a04574 	movhi	r2,33045
8112e9a4:	1087e104 	addi	r2,r2,8068
8112e9a8:	18c7883a 	add	r3,r3,r3
8112e9ac:	18c7883a 	add	r3,r3,r3
8112e9b0:	10c5883a 	add	r2,r2,r3
8112e9b4:	10800017 	ldw	r2,0(r2)
8112e9b8:	e0bff815 	stw	r2,-32(fp)
8112e9bc:	e0bff817 	ldw	r2,-32(fp)
8112e9c0:	1000061e 	bne	r2,zero,8112e9dc <OSTaskResume+0x98>
8112e9c4:	e0bff617 	ldw	r2,-40(fp)
8112e9c8:	e0bff715 	stw	r2,-36(fp)
8112e9cc:	e0bff717 	ldw	r2,-36(fp)
8112e9d0:	1001703a 	wrctl	status,r2
8112e9d4:	00801184 	movi	r2,70
8112e9d8:	00004c06 	br	8112eb0c <OSTaskResume+0x1c8>
8112e9dc:	e0bff817 	ldw	r2,-32(fp)
8112e9e0:	10800058 	cmpnei	r2,r2,1
8112e9e4:	1000061e 	bne	r2,zero,8112ea00 <OSTaskResume+0xbc>
8112e9e8:	e0bff617 	ldw	r2,-40(fp)
8112e9ec:	e0bff915 	stw	r2,-28(fp)
8112e9f0:	e0bff917 	ldw	r2,-28(fp)
8112e9f4:	1001703a 	wrctl	status,r2
8112e9f8:	008010c4 	movi	r2,67
8112e9fc:	00004306 	br	8112eb0c <OSTaskResume+0x1c8>
8112ea00:	e0bff817 	ldw	r2,-32(fp)
8112ea04:	10800c03 	ldbu	r2,48(r2)
8112ea08:	10803fcc 	andi	r2,r2,255
8112ea0c:	1080020c 	andi	r2,r2,8
8112ea10:	10003926 	beq	r2,zero,8112eaf8 <OSTaskResume+0x1b4>
8112ea14:	e0bff817 	ldw	r2,-32(fp)
8112ea18:	10c00c03 	ldbu	r3,48(r2)
8112ea1c:	00bffdc4 	movi	r2,-9
8112ea20:	1884703a 	and	r2,r3,r2
8112ea24:	1007883a 	mov	r3,r2
8112ea28:	e0bff817 	ldw	r2,-32(fp)
8112ea2c:	10c00c05 	stb	r3,48(r2)
8112ea30:	e0bff817 	ldw	r2,-32(fp)
8112ea34:	10800c03 	ldbu	r2,48(r2)
8112ea38:	10803fcc 	andi	r2,r2,255
8112ea3c:	1000281e 	bne	r2,zero,8112eae0 <OSTaskResume+0x19c>
8112ea40:	e0bff817 	ldw	r2,-32(fp)
8112ea44:	10800b8b 	ldhu	r2,46(r2)
8112ea48:	10bfffcc 	andi	r2,r2,65535
8112ea4c:	10001f1e 	bne	r2,zero,8112eacc <OSTaskResume+0x188>
8112ea50:	e0bff817 	ldw	r2,-32(fp)
8112ea54:	10c00d83 	ldbu	r3,54(r2)
8112ea58:	d0a08003 	ldbu	r2,-32256(gp)
8112ea5c:	1884b03a 	or	r2,r3,r2
8112ea60:	d0a08005 	stb	r2,-32256(gp)
8112ea64:	e0bff817 	ldw	r2,-32(fp)
8112ea68:	10800d03 	ldbu	r2,52(r2)
8112ea6c:	10c03fcc 	andi	r3,r2,255
8112ea70:	e0bff817 	ldw	r2,-32(fp)
8112ea74:	10800d03 	ldbu	r2,52(r2)
8112ea78:	11003fcc 	andi	r4,r2,255
8112ea7c:	d0a08044 	addi	r2,gp,-32255
8112ea80:	2085883a 	add	r2,r4,r2
8112ea84:	11000003 	ldbu	r4,0(r2)
8112ea88:	e0bff817 	ldw	r2,-32(fp)
8112ea8c:	10800d43 	ldbu	r2,53(r2)
8112ea90:	2084b03a 	or	r2,r4,r2
8112ea94:	1009883a 	mov	r4,r2
8112ea98:	d0a08044 	addi	r2,gp,-32255
8112ea9c:	1885883a 	add	r2,r3,r2
8112eaa0:	11000005 	stb	r4,0(r2)
8112eaa4:	e0bff617 	ldw	r2,-40(fp)
8112eaa8:	e0bffa15 	stw	r2,-24(fp)
8112eaac:	e0bffa17 	ldw	r2,-24(fp)
8112eab0:	1001703a 	wrctl	status,r2
8112eab4:	d0a07303 	ldbu	r2,-32308(gp)
8112eab8:	10803fcc 	andi	r2,r2,255
8112eabc:	10800058 	cmpnei	r2,r2,1
8112eac0:	10000b1e 	bne	r2,zero,8112eaf0 <OSTaskResume+0x1ac>
8112eac4:	112833c0 	call	8112833c <OS_Sched>
8112eac8:	00000906 	br	8112eaf0 <OSTaskResume+0x1ac>
8112eacc:	e0bff617 	ldw	r2,-40(fp)
8112ead0:	e0bffb15 	stw	r2,-20(fp)
8112ead4:	e0bffb17 	ldw	r2,-20(fp)
8112ead8:	1001703a 	wrctl	status,r2
8112eadc:	00000406 	br	8112eaf0 <OSTaskResume+0x1ac>
8112eae0:	e0bff617 	ldw	r2,-40(fp)
8112eae4:	e0bffc15 	stw	r2,-16(fp)
8112eae8:	e0bffc17 	ldw	r2,-16(fp)
8112eaec:	1001703a 	wrctl	status,r2
8112eaf0:	0005883a 	mov	r2,zero
8112eaf4:	00000506 	br	8112eb0c <OSTaskResume+0x1c8>
8112eaf8:	e0bff617 	ldw	r2,-40(fp)
8112eafc:	e0bffd15 	stw	r2,-12(fp)
8112eb00:	e0bffd17 	ldw	r2,-12(fp)
8112eb04:	1001703a 	wrctl	status,r2
8112eb08:	00801104 	movi	r2,68
8112eb0c:	e037883a 	mov	sp,fp
8112eb10:	dfc00117 	ldw	ra,4(sp)
8112eb14:	df000017 	ldw	fp,0(sp)
8112eb18:	dec00204 	addi	sp,sp,8
8112eb1c:	f800283a 	ret

8112eb20 <OSTaskStkChk>:
8112eb20:	defff304 	addi	sp,sp,-52
8112eb24:	de00012e 	bgeu	sp,et,8112eb2c <OSTaskStkChk+0xc>
8112eb28:	003b68fa 	trap	3
8112eb2c:	df000c15 	stw	fp,48(sp)
8112eb30:	df000c04 	addi	fp,sp,48
8112eb34:	2005883a 	mov	r2,r4
8112eb38:	e17fff15 	stw	r5,-4(fp)
8112eb3c:	e0bffe05 	stb	r2,-8(fp)
8112eb40:	e03ff615 	stw	zero,-40(fp)
8112eb44:	e0bffe03 	ldbu	r2,-8(fp)
8112eb48:	10800a70 	cmpltui	r2,r2,41
8112eb4c:	1000051e 	bne	r2,zero,8112eb64 <OSTaskStkChk+0x44>
8112eb50:	e0bffe03 	ldbu	r2,-8(fp)
8112eb54:	10803fe0 	cmpeqi	r2,r2,255
8112eb58:	1000021e 	bne	r2,zero,8112eb64 <OSTaskStkChk+0x44>
8112eb5c:	00800a84 	movi	r2,42
8112eb60:	00005d06 	br	8112ecd8 <OSTaskStkChk+0x1b8>
8112eb64:	e0bfff17 	ldw	r2,-4(fp)
8112eb68:	1000021e 	bne	r2,zero,8112eb74 <OSTaskStkChk+0x54>
8112eb6c:	00800244 	movi	r2,9
8112eb70:	00005906 	br	8112ecd8 <OSTaskStkChk+0x1b8>
8112eb74:	e0bfff17 	ldw	r2,-4(fp)
8112eb78:	10000015 	stw	zero,0(r2)
8112eb7c:	e0bfff17 	ldw	r2,-4(fp)
8112eb80:	10000115 	stw	zero,4(r2)
8112eb84:	0005303a 	rdctl	r2,status
8112eb88:	e0bffd15 	stw	r2,-12(fp)
8112eb8c:	e0fffd17 	ldw	r3,-12(fp)
8112eb90:	00bfff84 	movi	r2,-2
8112eb94:	1884703a 	and	r2,r3,r2
8112eb98:	1001703a 	wrctl	status,r2
8112eb9c:	e0bffd17 	ldw	r2,-12(fp)
8112eba0:	e0bff615 	stw	r2,-40(fp)
8112eba4:	e0bffe03 	ldbu	r2,-8(fp)
8112eba8:	10803fd8 	cmpnei	r2,r2,255
8112ebac:	1000031e 	bne	r2,zero,8112ebbc <OSTaskStkChk+0x9c>
8112ebb0:	d0a08417 	ldw	r2,-32240(gp)
8112ebb4:	10800c83 	ldbu	r2,50(r2)
8112ebb8:	e0bffe05 	stb	r2,-8(fp)
8112ebbc:	e0fffe03 	ldbu	r3,-8(fp)
8112ebc0:	00a04574 	movhi	r2,33045
8112ebc4:	1087e104 	addi	r2,r2,8068
8112ebc8:	18c7883a 	add	r3,r3,r3
8112ebcc:	18c7883a 	add	r3,r3,r3
8112ebd0:	10c5883a 	add	r2,r2,r3
8112ebd4:	10800017 	ldw	r2,0(r2)
8112ebd8:	e0bff815 	stw	r2,-32(fp)
8112ebdc:	e0bff817 	ldw	r2,-32(fp)
8112ebe0:	1000061e 	bne	r2,zero,8112ebfc <OSTaskStkChk+0xdc>
8112ebe4:	e0bff617 	ldw	r2,-40(fp)
8112ebe8:	e0bff715 	stw	r2,-36(fp)
8112ebec:	e0bff717 	ldw	r2,-36(fp)
8112ebf0:	1001703a 	wrctl	status,r2
8112ebf4:	008010c4 	movi	r2,67
8112ebf8:	00003706 	br	8112ecd8 <OSTaskStkChk+0x1b8>
8112ebfc:	e0bff817 	ldw	r2,-32(fp)
8112ec00:	10800058 	cmpnei	r2,r2,1
8112ec04:	1000061e 	bne	r2,zero,8112ec20 <OSTaskStkChk+0x100>
8112ec08:	e0bff617 	ldw	r2,-40(fp)
8112ec0c:	e0bff915 	stw	r2,-28(fp)
8112ec10:	e0bff917 	ldw	r2,-28(fp)
8112ec14:	1001703a 	wrctl	status,r2
8112ec18:	008010c4 	movi	r2,67
8112ec1c:	00002e06 	br	8112ecd8 <OSTaskStkChk+0x1b8>
8112ec20:	e0bff817 	ldw	r2,-32(fp)
8112ec24:	1080040b 	ldhu	r2,16(r2)
8112ec28:	10bfffcc 	andi	r2,r2,65535
8112ec2c:	1080004c 	andi	r2,r2,1
8112ec30:	1000061e 	bne	r2,zero,8112ec4c <OSTaskStkChk+0x12c>
8112ec34:	e0bff617 	ldw	r2,-40(fp)
8112ec38:	e0bffa15 	stw	r2,-24(fp)
8112ec3c:	e0bffa17 	ldw	r2,-24(fp)
8112ec40:	1001703a 	wrctl	status,r2
8112ec44:	00801144 	movi	r2,69
8112ec48:	00002306 	br	8112ecd8 <OSTaskStkChk+0x1b8>
8112ec4c:	e03ff515 	stw	zero,-44(fp)
8112ec50:	e0bff817 	ldw	r2,-32(fp)
8112ec54:	10800317 	ldw	r2,12(r2)
8112ec58:	e0bffc15 	stw	r2,-16(fp)
8112ec5c:	e0bff817 	ldw	r2,-32(fp)
8112ec60:	10800217 	ldw	r2,8(r2)
8112ec64:	e0bff415 	stw	r2,-48(fp)
8112ec68:	e0bff617 	ldw	r2,-40(fp)
8112ec6c:	e0bffb15 	stw	r2,-20(fp)
8112ec70:	e0bffb17 	ldw	r2,-20(fp)
8112ec74:	1001703a 	wrctl	status,r2
8112ec78:	00000306 	br	8112ec88 <OSTaskStkChk+0x168>
8112ec7c:	e0bff517 	ldw	r2,-44(fp)
8112ec80:	10800044 	addi	r2,r2,1
8112ec84:	e0bff515 	stw	r2,-44(fp)
8112ec88:	e0bff417 	ldw	r2,-48(fp)
8112ec8c:	10c00104 	addi	r3,r2,4
8112ec90:	e0fff415 	stw	r3,-48(fp)
8112ec94:	10800017 	ldw	r2,0(r2)
8112ec98:	103ff826 	beq	r2,zero,8112ec7c <__reset+0xfb10ec7c>
8112ec9c:	e0bff517 	ldw	r2,-44(fp)
8112eca0:	1085883a 	add	r2,r2,r2
8112eca4:	1085883a 	add	r2,r2,r2
8112eca8:	1007883a 	mov	r3,r2
8112ecac:	e0bfff17 	ldw	r2,-4(fp)
8112ecb0:	10c00015 	stw	r3,0(r2)
8112ecb4:	e0fffc17 	ldw	r3,-16(fp)
8112ecb8:	e0bff517 	ldw	r2,-44(fp)
8112ecbc:	1885c83a 	sub	r2,r3,r2
8112ecc0:	1085883a 	add	r2,r2,r2
8112ecc4:	1085883a 	add	r2,r2,r2
8112ecc8:	1007883a 	mov	r3,r2
8112eccc:	e0bfff17 	ldw	r2,-4(fp)
8112ecd0:	10c00115 	stw	r3,4(r2)
8112ecd4:	0005883a 	mov	r2,zero
8112ecd8:	e037883a 	mov	sp,fp
8112ecdc:	df000017 	ldw	fp,0(sp)
8112ece0:	dec00104 	addi	sp,sp,4
8112ece4:	f800283a 	ret

8112ece8 <OSTaskSuspend>:
8112ece8:	defff504 	addi	sp,sp,-44
8112ecec:	de00012e 	bgeu	sp,et,8112ecf4 <OSTaskSuspend+0xc>
8112ecf0:	003b68fa 	trap	3
8112ecf4:	dfc00a15 	stw	ra,40(sp)
8112ecf8:	df000915 	stw	fp,36(sp)
8112ecfc:	df000904 	addi	fp,sp,36
8112ed00:	2005883a 	mov	r2,r4
8112ed04:	e0bfff05 	stb	r2,-4(fp)
8112ed08:	e03ff815 	stw	zero,-32(fp)
8112ed0c:	e0bfff03 	ldbu	r2,-4(fp)
8112ed10:	10800a18 	cmpnei	r2,r2,40
8112ed14:	1000021e 	bne	r2,zero,8112ed20 <OSTaskSuspend+0x38>
8112ed18:	008011c4 	movi	r2,71
8112ed1c:	00006806 	br	8112eec0 <OSTaskSuspend+0x1d8>
8112ed20:	e0bfff03 	ldbu	r2,-4(fp)
8112ed24:	10800a30 	cmpltui	r2,r2,40
8112ed28:	1000051e 	bne	r2,zero,8112ed40 <OSTaskSuspend+0x58>
8112ed2c:	e0bfff03 	ldbu	r2,-4(fp)
8112ed30:	10803fe0 	cmpeqi	r2,r2,255
8112ed34:	1000021e 	bne	r2,zero,8112ed40 <OSTaskSuspend+0x58>
8112ed38:	00800a84 	movi	r2,42
8112ed3c:	00006006 	br	8112eec0 <OSTaskSuspend+0x1d8>
8112ed40:	0005303a 	rdctl	r2,status
8112ed44:	e0bffe15 	stw	r2,-8(fp)
8112ed48:	e0fffe17 	ldw	r3,-8(fp)
8112ed4c:	00bfff84 	movi	r2,-2
8112ed50:	1884703a 	and	r2,r3,r2
8112ed54:	1001703a 	wrctl	status,r2
8112ed58:	e0bffe17 	ldw	r2,-8(fp)
8112ed5c:	e0bff815 	stw	r2,-32(fp)
8112ed60:	e0bfff03 	ldbu	r2,-4(fp)
8112ed64:	10803fd8 	cmpnei	r2,r2,255
8112ed68:	1000061e 	bne	r2,zero,8112ed84 <OSTaskSuspend+0x9c>
8112ed6c:	d0a08417 	ldw	r2,-32240(gp)
8112ed70:	10800c83 	ldbu	r2,50(r2)
8112ed74:	e0bfff05 	stb	r2,-4(fp)
8112ed78:	00800044 	movi	r2,1
8112ed7c:	e0bff705 	stb	r2,-36(fp)
8112ed80:	00000906 	br	8112eda8 <OSTaskSuspend+0xc0>
8112ed84:	d0a08417 	ldw	r2,-32240(gp)
8112ed88:	10800c83 	ldbu	r2,50(r2)
8112ed8c:	10c03fcc 	andi	r3,r2,255
8112ed90:	e0bfff03 	ldbu	r2,-4(fp)
8112ed94:	1880031e 	bne	r3,r2,8112eda4 <OSTaskSuspend+0xbc>
8112ed98:	00800044 	movi	r2,1
8112ed9c:	e0bff705 	stb	r2,-36(fp)
8112eda0:	00000106 	br	8112eda8 <OSTaskSuspend+0xc0>
8112eda4:	e03ff705 	stb	zero,-36(fp)
8112eda8:	e0ffff03 	ldbu	r3,-4(fp)
8112edac:	00a04574 	movhi	r2,33045
8112edb0:	1087e104 	addi	r2,r2,8068
8112edb4:	18c7883a 	add	r3,r3,r3
8112edb8:	18c7883a 	add	r3,r3,r3
8112edbc:	10c5883a 	add	r2,r2,r3
8112edc0:	10800017 	ldw	r2,0(r2)
8112edc4:	e0bffa15 	stw	r2,-24(fp)
8112edc8:	e0bffa17 	ldw	r2,-24(fp)
8112edcc:	1000061e 	bne	r2,zero,8112ede8 <OSTaskSuspend+0x100>
8112edd0:	e0bff817 	ldw	r2,-32(fp)
8112edd4:	e0bff915 	stw	r2,-28(fp)
8112edd8:	e0bff917 	ldw	r2,-28(fp)
8112eddc:	1001703a 	wrctl	status,r2
8112ede0:	00801204 	movi	r2,72
8112ede4:	00003606 	br	8112eec0 <OSTaskSuspend+0x1d8>
8112ede8:	e0bffa17 	ldw	r2,-24(fp)
8112edec:	10800058 	cmpnei	r2,r2,1
8112edf0:	1000061e 	bne	r2,zero,8112ee0c <OSTaskSuspend+0x124>
8112edf4:	e0bff817 	ldw	r2,-32(fp)
8112edf8:	e0bffb15 	stw	r2,-20(fp)
8112edfc:	e0bffb17 	ldw	r2,-20(fp)
8112ee00:	1001703a 	wrctl	status,r2
8112ee04:	008010c4 	movi	r2,67
8112ee08:	00002d06 	br	8112eec0 <OSTaskSuspend+0x1d8>
8112ee0c:	e0bffa17 	ldw	r2,-24(fp)
8112ee10:	10800d03 	ldbu	r2,52(r2)
8112ee14:	e0bffd05 	stb	r2,-12(fp)
8112ee18:	e0fffd03 	ldbu	r3,-12(fp)
8112ee1c:	e13ffd03 	ldbu	r4,-12(fp)
8112ee20:	d0a08044 	addi	r2,gp,-32255
8112ee24:	2085883a 	add	r2,r4,r2
8112ee28:	10800003 	ldbu	r2,0(r2)
8112ee2c:	1009883a 	mov	r4,r2
8112ee30:	e0bffa17 	ldw	r2,-24(fp)
8112ee34:	10800d43 	ldbu	r2,53(r2)
8112ee38:	0084303a 	nor	r2,zero,r2
8112ee3c:	2084703a 	and	r2,r4,r2
8112ee40:	1009883a 	mov	r4,r2
8112ee44:	d0a08044 	addi	r2,gp,-32255
8112ee48:	1885883a 	add	r2,r3,r2
8112ee4c:	11000005 	stb	r4,0(r2)
8112ee50:	e0fffd03 	ldbu	r3,-12(fp)
8112ee54:	d0a08044 	addi	r2,gp,-32255
8112ee58:	1885883a 	add	r2,r3,r2
8112ee5c:	10800003 	ldbu	r2,0(r2)
8112ee60:	10803fcc 	andi	r2,r2,255
8112ee64:	1000071e 	bne	r2,zero,8112ee84 <OSTaskSuspend+0x19c>
8112ee68:	e0bffa17 	ldw	r2,-24(fp)
8112ee6c:	10800d83 	ldbu	r2,54(r2)
8112ee70:	0084303a 	nor	r2,zero,r2
8112ee74:	1007883a 	mov	r3,r2
8112ee78:	d0a08003 	ldbu	r2,-32256(gp)
8112ee7c:	1884703a 	and	r2,r3,r2
8112ee80:	d0a08005 	stb	r2,-32256(gp)
8112ee84:	e0bffa17 	ldw	r2,-24(fp)
8112ee88:	10800c03 	ldbu	r2,48(r2)
8112ee8c:	10800214 	ori	r2,r2,8
8112ee90:	1007883a 	mov	r3,r2
8112ee94:	e0bffa17 	ldw	r2,-24(fp)
8112ee98:	10c00c05 	stb	r3,48(r2)
8112ee9c:	e0bff817 	ldw	r2,-32(fp)
8112eea0:	e0bffc15 	stw	r2,-16(fp)
8112eea4:	e0bffc17 	ldw	r2,-16(fp)
8112eea8:	1001703a 	wrctl	status,r2
8112eeac:	e0bff703 	ldbu	r2,-36(fp)
8112eeb0:	10800058 	cmpnei	r2,r2,1
8112eeb4:	1000011e 	bne	r2,zero,8112eebc <OSTaskSuspend+0x1d4>
8112eeb8:	112833c0 	call	8112833c <OS_Sched>
8112eebc:	0005883a 	mov	r2,zero
8112eec0:	e037883a 	mov	sp,fp
8112eec4:	dfc00117 	ldw	ra,4(sp)
8112eec8:	df000017 	ldw	fp,0(sp)
8112eecc:	dec00204 	addi	sp,sp,8
8112eed0:	f800283a 	ret

8112eed4 <OSTaskQuery>:
8112eed4:	defff604 	addi	sp,sp,-40
8112eed8:	de00012e 	bgeu	sp,et,8112eee0 <OSTaskQuery+0xc>
8112eedc:	003b68fa 	trap	3
8112eee0:	dfc00915 	stw	ra,36(sp)
8112eee4:	df000815 	stw	fp,32(sp)
8112eee8:	df000804 	addi	fp,sp,32
8112eeec:	2005883a 	mov	r2,r4
8112eef0:	e17fff15 	stw	r5,-4(fp)
8112eef4:	e0bffe05 	stb	r2,-8(fp)
8112eef8:	e03ff815 	stw	zero,-32(fp)
8112eefc:	e0bffe03 	ldbu	r2,-8(fp)
8112ef00:	10800a70 	cmpltui	r2,r2,41
8112ef04:	1000051e 	bne	r2,zero,8112ef1c <OSTaskQuery+0x48>
8112ef08:	e0bffe03 	ldbu	r2,-8(fp)
8112ef0c:	10803fe0 	cmpeqi	r2,r2,255
8112ef10:	1000021e 	bne	r2,zero,8112ef1c <OSTaskQuery+0x48>
8112ef14:	00800a84 	movi	r2,42
8112ef18:	00003406 	br	8112efec <OSTaskQuery+0x118>
8112ef1c:	e0bfff17 	ldw	r2,-4(fp)
8112ef20:	1000021e 	bne	r2,zero,8112ef2c <OSTaskQuery+0x58>
8112ef24:	00800244 	movi	r2,9
8112ef28:	00003006 	br	8112efec <OSTaskQuery+0x118>
8112ef2c:	0005303a 	rdctl	r2,status
8112ef30:	e0bffd15 	stw	r2,-12(fp)
8112ef34:	e0fffd17 	ldw	r3,-12(fp)
8112ef38:	00bfff84 	movi	r2,-2
8112ef3c:	1884703a 	and	r2,r3,r2
8112ef40:	1001703a 	wrctl	status,r2
8112ef44:	e0bffd17 	ldw	r2,-12(fp)
8112ef48:	e0bff815 	stw	r2,-32(fp)
8112ef4c:	e0bffe03 	ldbu	r2,-8(fp)
8112ef50:	10803fd8 	cmpnei	r2,r2,255
8112ef54:	1000031e 	bne	r2,zero,8112ef64 <OSTaskQuery+0x90>
8112ef58:	d0a08417 	ldw	r2,-32240(gp)
8112ef5c:	10800c83 	ldbu	r2,50(r2)
8112ef60:	e0bffe05 	stb	r2,-8(fp)
8112ef64:	e0fffe03 	ldbu	r3,-8(fp)
8112ef68:	00a04574 	movhi	r2,33045
8112ef6c:	1087e104 	addi	r2,r2,8068
8112ef70:	18c7883a 	add	r3,r3,r3
8112ef74:	18c7883a 	add	r3,r3,r3
8112ef78:	10c5883a 	add	r2,r2,r3
8112ef7c:	10800017 	ldw	r2,0(r2)
8112ef80:	e0bffa15 	stw	r2,-24(fp)
8112ef84:	e0bffa17 	ldw	r2,-24(fp)
8112ef88:	1000061e 	bne	r2,zero,8112efa4 <OSTaskQuery+0xd0>
8112ef8c:	e0bff817 	ldw	r2,-32(fp)
8112ef90:	e0bff915 	stw	r2,-28(fp)
8112ef94:	e0bff917 	ldw	r2,-28(fp)
8112ef98:	1001703a 	wrctl	status,r2
8112ef9c:	00800a44 	movi	r2,41
8112efa0:	00001206 	br	8112efec <OSTaskQuery+0x118>
8112efa4:	e0bffa17 	ldw	r2,-24(fp)
8112efa8:	10800058 	cmpnei	r2,r2,1
8112efac:	1000061e 	bne	r2,zero,8112efc8 <OSTaskQuery+0xf4>
8112efb0:	e0bff817 	ldw	r2,-32(fp)
8112efb4:	e0bffb15 	stw	r2,-20(fp)
8112efb8:	e0bffb17 	ldw	r2,-20(fp)
8112efbc:	1001703a 	wrctl	status,r2
8112efc0:	008010c4 	movi	r2,67
8112efc4:	00000906 	br	8112efec <OSTaskQuery+0x118>
8112efc8:	01801b04 	movi	r6,108
8112efcc:	e17ffa17 	ldw	r5,-24(fp)
8112efd0:	e13fff17 	ldw	r4,-4(fp)
8112efd4:	11282cc0 	call	811282cc <OS_MemCopy>
8112efd8:	e0bff817 	ldw	r2,-32(fp)
8112efdc:	e0bffc15 	stw	r2,-16(fp)
8112efe0:	e0bffc17 	ldw	r2,-16(fp)
8112efe4:	1001703a 	wrctl	status,r2
8112efe8:	0005883a 	mov	r2,zero
8112efec:	e037883a 	mov	sp,fp
8112eff0:	dfc00117 	ldw	ra,4(sp)
8112eff4:	df000017 	ldw	fp,0(sp)
8112eff8:	dec00204 	addi	sp,sp,8
8112effc:	f800283a 	ret

8112f000 <OS_TaskStkClr>:
8112f000:	defffc04 	addi	sp,sp,-16
8112f004:	de00012e 	bgeu	sp,et,8112f00c <OS_TaskStkClr+0xc>
8112f008:	003b68fa 	trap	3
8112f00c:	df000315 	stw	fp,12(sp)
8112f010:	df000304 	addi	fp,sp,12
8112f014:	e13ffd15 	stw	r4,-12(fp)
8112f018:	e17ffe15 	stw	r5,-8(fp)
8112f01c:	3005883a 	mov	r2,r6
8112f020:	e0bfff0d 	sth	r2,-4(fp)
8112f024:	e0bfff0b 	ldhu	r2,-4(fp)
8112f028:	1080004c 	andi	r2,r2,1
8112f02c:	10000d26 	beq	r2,zero,8112f064 <OS_TaskStkClr+0x64>
8112f030:	e0bfff0b 	ldhu	r2,-4(fp)
8112f034:	1080008c 	andi	r2,r2,2
8112f038:	10000a26 	beq	r2,zero,8112f064 <OS_TaskStkClr+0x64>
8112f03c:	00000706 	br	8112f05c <OS_TaskStkClr+0x5c>
8112f040:	e0bffe17 	ldw	r2,-8(fp)
8112f044:	10bfffc4 	addi	r2,r2,-1
8112f048:	e0bffe15 	stw	r2,-8(fp)
8112f04c:	e0bffd17 	ldw	r2,-12(fp)
8112f050:	10c00104 	addi	r3,r2,4
8112f054:	e0fffd15 	stw	r3,-12(fp)
8112f058:	10000015 	stw	zero,0(r2)
8112f05c:	e0bffe17 	ldw	r2,-8(fp)
8112f060:	103ff71e 	bne	r2,zero,8112f040 <__reset+0xfb10f040>
8112f064:	0001883a 	nop
8112f068:	e037883a 	mov	sp,fp
8112f06c:	df000017 	ldw	fp,0(sp)
8112f070:	dec00104 	addi	sp,sp,4
8112f074:	f800283a 	ret

8112f078 <OSTimeDly>:
8112f078:	defff904 	addi	sp,sp,-28
8112f07c:	de00012e 	bgeu	sp,et,8112f084 <OSTimeDly+0xc>
8112f080:	003b68fa 	trap	3
8112f084:	dfc00615 	stw	ra,24(sp)
8112f088:	df000515 	stw	fp,20(sp)
8112f08c:	df000504 	addi	fp,sp,20
8112f090:	2005883a 	mov	r2,r4
8112f094:	e0bfff0d 	sth	r2,-4(fp)
8112f098:	e03ffb15 	stw	zero,-20(fp)
8112f09c:	d0a08303 	ldbu	r2,-32244(gp)
8112f0a0:	10803fcc 	andi	r2,r2,255
8112f0a4:	1000311e 	bne	r2,zero,8112f16c <OSTimeDly+0xf4>
8112f0a8:	e0bfff0b 	ldhu	r2,-4(fp)
8112f0ac:	10003026 	beq	r2,zero,8112f170 <OSTimeDly+0xf8>
8112f0b0:	0005303a 	rdctl	r2,status
8112f0b4:	e0bffe15 	stw	r2,-8(fp)
8112f0b8:	e0fffe17 	ldw	r3,-8(fp)
8112f0bc:	00bfff84 	movi	r2,-2
8112f0c0:	1884703a 	and	r2,r3,r2
8112f0c4:	1001703a 	wrctl	status,r2
8112f0c8:	e0bffe17 	ldw	r2,-8(fp)
8112f0cc:	e0bffb15 	stw	r2,-20(fp)
8112f0d0:	d0a08417 	ldw	r2,-32240(gp)
8112f0d4:	10800d03 	ldbu	r2,52(r2)
8112f0d8:	e0bffd05 	stb	r2,-12(fp)
8112f0dc:	e0fffd03 	ldbu	r3,-12(fp)
8112f0e0:	e13ffd03 	ldbu	r4,-12(fp)
8112f0e4:	d0a08044 	addi	r2,gp,-32255
8112f0e8:	2085883a 	add	r2,r4,r2
8112f0ec:	10800003 	ldbu	r2,0(r2)
8112f0f0:	1009883a 	mov	r4,r2
8112f0f4:	d0a08417 	ldw	r2,-32240(gp)
8112f0f8:	10800d43 	ldbu	r2,53(r2)
8112f0fc:	0084303a 	nor	r2,zero,r2
8112f100:	2084703a 	and	r2,r4,r2
8112f104:	1009883a 	mov	r4,r2
8112f108:	d0a08044 	addi	r2,gp,-32255
8112f10c:	1885883a 	add	r2,r3,r2
8112f110:	11000005 	stb	r4,0(r2)
8112f114:	e0fffd03 	ldbu	r3,-12(fp)
8112f118:	d0a08044 	addi	r2,gp,-32255
8112f11c:	1885883a 	add	r2,r3,r2
8112f120:	10800003 	ldbu	r2,0(r2)
8112f124:	10803fcc 	andi	r2,r2,255
8112f128:	1000071e 	bne	r2,zero,8112f148 <OSTimeDly+0xd0>
8112f12c:	d0a08417 	ldw	r2,-32240(gp)
8112f130:	10800d83 	ldbu	r2,54(r2)
8112f134:	0084303a 	nor	r2,zero,r2
8112f138:	1007883a 	mov	r3,r2
8112f13c:	d0a08003 	ldbu	r2,-32256(gp)
8112f140:	1884703a 	and	r2,r3,r2
8112f144:	d0a08005 	stb	r2,-32256(gp)
8112f148:	d0a08417 	ldw	r2,-32240(gp)
8112f14c:	e0ffff0b 	ldhu	r3,-4(fp)
8112f150:	10c00b8d 	sth	r3,46(r2)
8112f154:	e0bffb17 	ldw	r2,-20(fp)
8112f158:	e0bffc15 	stw	r2,-16(fp)
8112f15c:	e0bffc17 	ldw	r2,-16(fp)
8112f160:	1001703a 	wrctl	status,r2
8112f164:	112833c0 	call	8112833c <OS_Sched>
8112f168:	00000106 	br	8112f170 <OSTimeDly+0xf8>
8112f16c:	0001883a 	nop
8112f170:	e037883a 	mov	sp,fp
8112f174:	dfc00117 	ldw	ra,4(sp)
8112f178:	df000017 	ldw	fp,0(sp)
8112f17c:	dec00204 	addi	sp,sp,8
8112f180:	f800283a 	ret

8112f184 <OSTimeDlyHMSM>:
8112f184:	defff804 	addi	sp,sp,-32
8112f188:	de00012e 	bgeu	sp,et,8112f190 <OSTimeDlyHMSM+0xc>
8112f18c:	003b68fa 	trap	3
8112f190:	dfc00715 	stw	ra,28(sp)
8112f194:	df000615 	stw	fp,24(sp)
8112f198:	df000604 	addi	fp,sp,24
8112f19c:	2015883a 	mov	r10,r4
8112f1a0:	2809883a 	mov	r4,r5
8112f1a4:	3007883a 	mov	r3,r6
8112f1a8:	3805883a 	mov	r2,r7
8112f1ac:	e2bffc05 	stb	r10,-16(fp)
8112f1b0:	e13ffd05 	stb	r4,-12(fp)
8112f1b4:	e0fffe05 	stb	r3,-8(fp)
8112f1b8:	e0bfff0d 	sth	r2,-4(fp)
8112f1bc:	d0a08303 	ldbu	r2,-32244(gp)
8112f1c0:	10803fcc 	andi	r2,r2,255
8112f1c4:	10000226 	beq	r2,zero,8112f1d0 <OSTimeDlyHMSM+0x4c>
8112f1c8:	00801544 	movi	r2,85
8112f1cc:	00004106 	br	8112f2d4 <OSTimeDlyHMSM+0x150>
8112f1d0:	e0bffc03 	ldbu	r2,-16(fp)
8112f1d4:	1000081e 	bne	r2,zero,8112f1f8 <OSTimeDlyHMSM+0x74>
8112f1d8:	e0bffd03 	ldbu	r2,-12(fp)
8112f1dc:	1000061e 	bne	r2,zero,8112f1f8 <OSTimeDlyHMSM+0x74>
8112f1e0:	e0bffe03 	ldbu	r2,-8(fp)
8112f1e4:	1000041e 	bne	r2,zero,8112f1f8 <OSTimeDlyHMSM+0x74>
8112f1e8:	e0bfff0b 	ldhu	r2,-4(fp)
8112f1ec:	1000021e 	bne	r2,zero,8112f1f8 <OSTimeDlyHMSM+0x74>
8112f1f0:	00801504 	movi	r2,84
8112f1f4:	00003706 	br	8112f2d4 <OSTimeDlyHMSM+0x150>
8112f1f8:	e0bffd03 	ldbu	r2,-12(fp)
8112f1fc:	10800f30 	cmpltui	r2,r2,60
8112f200:	1000021e 	bne	r2,zero,8112f20c <OSTimeDlyHMSM+0x88>
8112f204:	00801444 	movi	r2,81
8112f208:	00003206 	br	8112f2d4 <OSTimeDlyHMSM+0x150>
8112f20c:	e0bffe03 	ldbu	r2,-8(fp)
8112f210:	10800f30 	cmpltui	r2,r2,60
8112f214:	1000021e 	bne	r2,zero,8112f220 <OSTimeDlyHMSM+0x9c>
8112f218:	00801484 	movi	r2,82
8112f21c:	00002d06 	br	8112f2d4 <OSTimeDlyHMSM+0x150>
8112f220:	e0bfff0b 	ldhu	r2,-4(fp)
8112f224:	1080fa30 	cmpltui	r2,r2,1000
8112f228:	1000021e 	bne	r2,zero,8112f234 <OSTimeDlyHMSM+0xb0>
8112f22c:	008014c4 	movi	r2,83
8112f230:	00002806 	br	8112f2d4 <OSTimeDlyHMSM+0x150>
8112f234:	e0bffc03 	ldbu	r2,-16(fp)
8112f238:	10c38424 	muli	r3,r2,3600
8112f23c:	e0bffd03 	ldbu	r2,-12(fp)
8112f240:	10800f24 	muli	r2,r2,60
8112f244:	1887883a 	add	r3,r3,r2
8112f248:	e0bffe03 	ldbu	r2,-8(fp)
8112f24c:	1885883a 	add	r2,r3,r2
8112f250:	1100fa24 	muli	r4,r2,1000
8112f254:	e0bfff0b 	ldhu	r2,-4(fp)
8112f258:	10c0fa24 	muli	r3,r2,1000
8112f25c:	008418b4 	movhi	r2,4194
8112f260:	109374c4 	addi	r2,r2,19923
8112f264:	188a383a 	mulxuu	r5,r3,r2
8112f268:	1885383a 	mul	r2,r3,r2
8112f26c:	1011883a 	mov	r8,r2
8112f270:	2813883a 	mov	r9,r5
8112f274:	4804d1ba 	srli	r2,r9,6
8112f278:	2085883a 	add	r2,r4,r2
8112f27c:	e0bffb15 	stw	r2,-20(fp)
8112f280:	e0bffb17 	ldw	r2,-20(fp)
8112f284:	1004d43a 	srli	r2,r2,16
8112f288:	e0bffa0d 	sth	r2,-24(fp)
8112f28c:	e0bffb17 	ldw	r2,-20(fp)
8112f290:	10bfffcc 	andi	r2,r2,65535
8112f294:	e0bffb15 	stw	r2,-20(fp)
8112f298:	e0bffb17 	ldw	r2,-20(fp)
8112f29c:	10bfffcc 	andi	r2,r2,65535
8112f2a0:	1009883a 	mov	r4,r2
8112f2a4:	112f0780 	call	8112f078 <OSTimeDly>
8112f2a8:	00000706 	br	8112f2c8 <OSTimeDlyHMSM+0x144>
8112f2ac:	01200014 	movui	r4,32768
8112f2b0:	112f0780 	call	8112f078 <OSTimeDly>
8112f2b4:	01200014 	movui	r4,32768
8112f2b8:	112f0780 	call	8112f078 <OSTimeDly>
8112f2bc:	e0bffa0b 	ldhu	r2,-24(fp)
8112f2c0:	10bfffc4 	addi	r2,r2,-1
8112f2c4:	e0bffa0d 	sth	r2,-24(fp)
8112f2c8:	e0bffa0b 	ldhu	r2,-24(fp)
8112f2cc:	103ff71e 	bne	r2,zero,8112f2ac <__reset+0xfb10f2ac>
8112f2d0:	0005883a 	mov	r2,zero
8112f2d4:	e037883a 	mov	sp,fp
8112f2d8:	dfc00117 	ldw	ra,4(sp)
8112f2dc:	df000017 	ldw	fp,0(sp)
8112f2e0:	dec00204 	addi	sp,sp,8
8112f2e4:	f800283a 	ret

8112f2e8 <OSTimeDlyResume>:
8112f2e8:	defff504 	addi	sp,sp,-44
8112f2ec:	de00012e 	bgeu	sp,et,8112f2f4 <OSTimeDlyResume+0xc>
8112f2f0:	003b68fa 	trap	3
8112f2f4:	dfc00a15 	stw	ra,40(sp)
8112f2f8:	df000915 	stw	fp,36(sp)
8112f2fc:	df000904 	addi	fp,sp,36
8112f300:	2005883a 	mov	r2,r4
8112f304:	e0bfff05 	stb	r2,-4(fp)
8112f308:	e03ff715 	stw	zero,-36(fp)
8112f30c:	e0bfff03 	ldbu	r2,-4(fp)
8112f310:	10800a30 	cmpltui	r2,r2,40
8112f314:	1000021e 	bne	r2,zero,8112f320 <OSTimeDlyResume+0x38>
8112f318:	00800a84 	movi	r2,42
8112f31c:	00006406 	br	8112f4b0 <OSTimeDlyResume+0x1c8>
8112f320:	0005303a 	rdctl	r2,status
8112f324:	e0bffe15 	stw	r2,-8(fp)
8112f328:	e0fffe17 	ldw	r3,-8(fp)
8112f32c:	00bfff84 	movi	r2,-2
8112f330:	1884703a 	and	r2,r3,r2
8112f334:	1001703a 	wrctl	status,r2
8112f338:	e0bffe17 	ldw	r2,-8(fp)
8112f33c:	e0bff715 	stw	r2,-36(fp)
8112f340:	e0ffff03 	ldbu	r3,-4(fp)
8112f344:	00a04574 	movhi	r2,33045
8112f348:	1087e104 	addi	r2,r2,8068
8112f34c:	18c7883a 	add	r3,r3,r3
8112f350:	18c7883a 	add	r3,r3,r3
8112f354:	10c5883a 	add	r2,r2,r3
8112f358:	10800017 	ldw	r2,0(r2)
8112f35c:	e0bff915 	stw	r2,-28(fp)
8112f360:	e0bff917 	ldw	r2,-28(fp)
8112f364:	1000061e 	bne	r2,zero,8112f380 <OSTimeDlyResume+0x98>
8112f368:	e0bff717 	ldw	r2,-36(fp)
8112f36c:	e0bff815 	stw	r2,-32(fp)
8112f370:	e0bff817 	ldw	r2,-32(fp)
8112f374:	1001703a 	wrctl	status,r2
8112f378:	008010c4 	movi	r2,67
8112f37c:	00004c06 	br	8112f4b0 <OSTimeDlyResume+0x1c8>
8112f380:	e0bff917 	ldw	r2,-28(fp)
8112f384:	10800058 	cmpnei	r2,r2,1
8112f388:	1000061e 	bne	r2,zero,8112f3a4 <OSTimeDlyResume+0xbc>
8112f38c:	e0bff717 	ldw	r2,-36(fp)
8112f390:	e0bffa15 	stw	r2,-24(fp)
8112f394:	e0bffa17 	ldw	r2,-24(fp)
8112f398:	1001703a 	wrctl	status,r2
8112f39c:	008010c4 	movi	r2,67
8112f3a0:	00004306 	br	8112f4b0 <OSTimeDlyResume+0x1c8>
8112f3a4:	e0bff917 	ldw	r2,-28(fp)
8112f3a8:	10800b8b 	ldhu	r2,46(r2)
8112f3ac:	10bfffcc 	andi	r2,r2,65535
8112f3b0:	1000061e 	bne	r2,zero,8112f3cc <OSTimeDlyResume+0xe4>
8112f3b4:	e0bff717 	ldw	r2,-36(fp)
8112f3b8:	e0bffb15 	stw	r2,-20(fp)
8112f3bc:	e0bffb17 	ldw	r2,-20(fp)
8112f3c0:	1001703a 	wrctl	status,r2
8112f3c4:	00801404 	movi	r2,80
8112f3c8:	00003906 	br	8112f4b0 <OSTimeDlyResume+0x1c8>
8112f3cc:	e0bff917 	ldw	r2,-28(fp)
8112f3d0:	10000b8d 	sth	zero,46(r2)
8112f3d4:	e0bff917 	ldw	r2,-28(fp)
8112f3d8:	10800c03 	ldbu	r2,48(r2)
8112f3dc:	10803fcc 	andi	r2,r2,255
8112f3e0:	10800dcc 	andi	r2,r2,55
8112f3e4:	10000b26 	beq	r2,zero,8112f414 <OSTimeDlyResume+0x12c>
8112f3e8:	e0bff917 	ldw	r2,-28(fp)
8112f3ec:	10c00c03 	ldbu	r3,48(r2)
8112f3f0:	00bff204 	movi	r2,-56
8112f3f4:	1884703a 	and	r2,r3,r2
8112f3f8:	1007883a 	mov	r3,r2
8112f3fc:	e0bff917 	ldw	r2,-28(fp)
8112f400:	10c00c05 	stb	r3,48(r2)
8112f404:	e0bff917 	ldw	r2,-28(fp)
8112f408:	00c00044 	movi	r3,1
8112f40c:	10c00c45 	stb	r3,49(r2)
8112f410:	00000206 	br	8112f41c <OSTimeDlyResume+0x134>
8112f414:	e0bff917 	ldw	r2,-28(fp)
8112f418:	10000c45 	stb	zero,49(r2)
8112f41c:	e0bff917 	ldw	r2,-28(fp)
8112f420:	10800c03 	ldbu	r2,48(r2)
8112f424:	10803fcc 	andi	r2,r2,255
8112f428:	1080020c 	andi	r2,r2,8
8112f42c:	10001b1e 	bne	r2,zero,8112f49c <OSTimeDlyResume+0x1b4>
8112f430:	e0bff917 	ldw	r2,-28(fp)
8112f434:	10c00d83 	ldbu	r3,54(r2)
8112f438:	d0a08003 	ldbu	r2,-32256(gp)
8112f43c:	1884b03a 	or	r2,r3,r2
8112f440:	d0a08005 	stb	r2,-32256(gp)
8112f444:	e0bff917 	ldw	r2,-28(fp)
8112f448:	10800d03 	ldbu	r2,52(r2)
8112f44c:	10c03fcc 	andi	r3,r2,255
8112f450:	e0bff917 	ldw	r2,-28(fp)
8112f454:	10800d03 	ldbu	r2,52(r2)
8112f458:	11003fcc 	andi	r4,r2,255
8112f45c:	d0a08044 	addi	r2,gp,-32255
8112f460:	2085883a 	add	r2,r4,r2
8112f464:	11000003 	ldbu	r4,0(r2)
8112f468:	e0bff917 	ldw	r2,-28(fp)
8112f46c:	10800d43 	ldbu	r2,53(r2)
8112f470:	2084b03a 	or	r2,r4,r2
8112f474:	1009883a 	mov	r4,r2
8112f478:	d0a08044 	addi	r2,gp,-32255
8112f47c:	1885883a 	add	r2,r3,r2
8112f480:	11000005 	stb	r4,0(r2)
8112f484:	e0bff717 	ldw	r2,-36(fp)
8112f488:	e0bffc15 	stw	r2,-16(fp)
8112f48c:	e0bffc17 	ldw	r2,-16(fp)
8112f490:	1001703a 	wrctl	status,r2
8112f494:	112833c0 	call	8112833c <OS_Sched>
8112f498:	00000406 	br	8112f4ac <OSTimeDlyResume+0x1c4>
8112f49c:	e0bff717 	ldw	r2,-36(fp)
8112f4a0:	e0bffd15 	stw	r2,-12(fp)
8112f4a4:	e0bffd17 	ldw	r2,-12(fp)
8112f4a8:	1001703a 	wrctl	status,r2
8112f4ac:	0005883a 	mov	r2,zero
8112f4b0:	e037883a 	mov	sp,fp
8112f4b4:	dfc00117 	ldw	ra,4(sp)
8112f4b8:	df000017 	ldw	fp,0(sp)
8112f4bc:	dec00204 	addi	sp,sp,8
8112f4c0:	f800283a 	ret

8112f4c4 <OSTimeGet>:
8112f4c4:	defffb04 	addi	sp,sp,-20
8112f4c8:	de00012e 	bgeu	sp,et,8112f4d0 <OSTimeGet+0xc>
8112f4cc:	003b68fa 	trap	3
8112f4d0:	df000415 	stw	fp,16(sp)
8112f4d4:	df000404 	addi	fp,sp,16
8112f4d8:	e03ffc15 	stw	zero,-16(fp)
8112f4dc:	0005303a 	rdctl	r2,status
8112f4e0:	e0bffe15 	stw	r2,-8(fp)
8112f4e4:	e0fffe17 	ldw	r3,-8(fp)
8112f4e8:	00bfff84 	movi	r2,-2
8112f4ec:	1884703a 	and	r2,r3,r2
8112f4f0:	1001703a 	wrctl	status,r2
8112f4f4:	e0bffe17 	ldw	r2,-8(fp)
8112f4f8:	e0bffc15 	stw	r2,-16(fp)
8112f4fc:	d0a08617 	ldw	r2,-32232(gp)
8112f500:	e0bffd15 	stw	r2,-12(fp)
8112f504:	e0bffc17 	ldw	r2,-16(fp)
8112f508:	e0bfff15 	stw	r2,-4(fp)
8112f50c:	e0bfff17 	ldw	r2,-4(fp)
8112f510:	1001703a 	wrctl	status,r2
8112f514:	e0bffd17 	ldw	r2,-12(fp)
8112f518:	e037883a 	mov	sp,fp
8112f51c:	df000017 	ldw	fp,0(sp)
8112f520:	dec00104 	addi	sp,sp,4
8112f524:	f800283a 	ret

8112f528 <OSTimeSet>:
8112f528:	defffb04 	addi	sp,sp,-20
8112f52c:	de00012e 	bgeu	sp,et,8112f534 <OSTimeSet+0xc>
8112f530:	003b68fa 	trap	3
8112f534:	df000415 	stw	fp,16(sp)
8112f538:	df000404 	addi	fp,sp,16
8112f53c:	e13fff15 	stw	r4,-4(fp)
8112f540:	e03ffc15 	stw	zero,-16(fp)
8112f544:	0005303a 	rdctl	r2,status
8112f548:	e0bffd15 	stw	r2,-12(fp)
8112f54c:	e0fffd17 	ldw	r3,-12(fp)
8112f550:	00bfff84 	movi	r2,-2
8112f554:	1884703a 	and	r2,r3,r2
8112f558:	1001703a 	wrctl	status,r2
8112f55c:	e0bffd17 	ldw	r2,-12(fp)
8112f560:	e0bffc15 	stw	r2,-16(fp)
8112f564:	e0bfff17 	ldw	r2,-4(fp)
8112f568:	d0a08615 	stw	r2,-32232(gp)
8112f56c:	e0bffc17 	ldw	r2,-16(fp)
8112f570:	e0bffe15 	stw	r2,-8(fp)
8112f574:	e0bffe17 	ldw	r2,-8(fp)
8112f578:	1001703a 	wrctl	status,r2
8112f57c:	0001883a 	nop
8112f580:	e037883a 	mov	sp,fp
8112f584:	df000017 	ldw	fp,0(sp)
8112f588:	dec00104 	addi	sp,sp,4
8112f58c:	f800283a 	ret

8112f590 <OSTmrCreate>:
8112f590:	defff804 	addi	sp,sp,-32
8112f594:	de00012e 	bgeu	sp,et,8112f59c <OSTmrCreate+0xc>
8112f598:	003b68fa 	trap	3
8112f59c:	dfc00715 	stw	ra,28(sp)
8112f5a0:	df000615 	stw	fp,24(sp)
8112f5a4:	df000604 	addi	fp,sp,24
8112f5a8:	e13ffc15 	stw	r4,-16(fp)
8112f5ac:	e17ffd15 	stw	r5,-12(fp)
8112f5b0:	3005883a 	mov	r2,r6
8112f5b4:	e1ffff15 	stw	r7,-4(fp)
8112f5b8:	e0bffe05 	stb	r2,-8(fp)
8112f5bc:	e0800417 	ldw	r2,16(fp)
8112f5c0:	1000021e 	bne	r2,zero,8112f5cc <OSTmrCreate+0x3c>
8112f5c4:	0005883a 	mov	r2,zero
8112f5c8:	00005d06 	br	8112f740 <OSTmrCreate+0x1b0>
8112f5cc:	e0bffe03 	ldbu	r2,-8(fp)
8112f5d0:	10c00060 	cmpeqi	r3,r2,1
8112f5d4:	1800091e 	bne	r3,zero,8112f5fc <OSTmrCreate+0x6c>
8112f5d8:	108000a0 	cmpeqi	r2,r2,2
8112f5dc:	10000e26 	beq	r2,zero,8112f618 <OSTmrCreate+0x88>
8112f5e0:	e0bffd17 	ldw	r2,-12(fp)
8112f5e4:	1000111e 	bne	r2,zero,8112f62c <OSTmrCreate+0x9c>
8112f5e8:	e0800417 	ldw	r2,16(fp)
8112f5ec:	00ffe0c4 	movi	r3,-125
8112f5f0:	10c00005 	stb	r3,0(r2)
8112f5f4:	0005883a 	mov	r2,zero
8112f5f8:	00005106 	br	8112f740 <OSTmrCreate+0x1b0>
8112f5fc:	e0bffc17 	ldw	r2,-16(fp)
8112f600:	10000c1e 	bne	r2,zero,8112f634 <OSTmrCreate+0xa4>
8112f604:	e0800417 	ldw	r2,16(fp)
8112f608:	00ffe084 	movi	r3,-126
8112f60c:	10c00005 	stb	r3,0(r2)
8112f610:	0005883a 	mov	r2,zero
8112f614:	00004a06 	br	8112f740 <OSTmrCreate+0x1b0>
8112f618:	e0800417 	ldw	r2,16(fp)
8112f61c:	00ffe104 	movi	r3,-124
8112f620:	10c00005 	stb	r3,0(r2)
8112f624:	0005883a 	mov	r2,zero
8112f628:	00004506 	br	8112f740 <OSTmrCreate+0x1b0>
8112f62c:	0001883a 	nop
8112f630:	00000106 	br	8112f638 <OSTmrCreate+0xa8>
8112f634:	0001883a 	nop
8112f638:	d0a08303 	ldbu	r2,-32244(gp)
8112f63c:	10803fcc 	andi	r2,r2,255
8112f640:	10000526 	beq	r2,zero,8112f658 <OSTmrCreate+0xc8>
8112f644:	e0800417 	ldw	r2,16(fp)
8112f648:	00ffe2c4 	movi	r3,-117
8112f64c:	10c00005 	stb	r3,0(r2)
8112f650:	0005883a 	mov	r2,zero
8112f654:	00003a06 	br	8112f740 <OSTmrCreate+0x1b0>
8112f658:	11305480 	call	81130548 <OSTmr_Lock>
8112f65c:	112ffe80 	call	8112ffe8 <OSTmr_Alloc>
8112f660:	e0bffa15 	stw	r2,-24(fp)
8112f664:	e0bffa17 	ldw	r2,-24(fp)
8112f668:	1000061e 	bne	r2,zero,8112f684 <OSTmrCreate+0xf4>
8112f66c:	113058c0 	call	8113058c <OSTmr_Unlock>
8112f670:	e0800417 	ldw	r2,16(fp)
8112f674:	00ffe184 	movi	r3,-122
8112f678:	10c00005 	stb	r3,0(r2)
8112f67c:	0005883a 	mov	r2,zero
8112f680:	00002f06 	br	8112f740 <OSTmrCreate+0x1b0>
8112f684:	e0bffa17 	ldw	r2,-24(fp)
8112f688:	00c00044 	movi	r3,1
8112f68c:	10c00c45 	stb	r3,49(r2)
8112f690:	e0bffa17 	ldw	r2,-24(fp)
8112f694:	e0fffc17 	ldw	r3,-16(fp)
8112f698:	10c00615 	stw	r3,24(r2)
8112f69c:	e0bffa17 	ldw	r2,-24(fp)
8112f6a0:	e0fffd17 	ldw	r3,-12(fp)
8112f6a4:	10c00715 	stw	r3,28(r2)
8112f6a8:	e0bffa17 	ldw	r2,-24(fp)
8112f6ac:	e0fffe03 	ldbu	r3,-8(fp)
8112f6b0:	10c00c05 	stb	r3,48(r2)
8112f6b4:	e0bffa17 	ldw	r2,-24(fp)
8112f6b8:	e0ffff17 	ldw	r3,-4(fp)
8112f6bc:	10c00115 	stw	r3,4(r2)
8112f6c0:	e0bffa17 	ldw	r2,-24(fp)
8112f6c4:	e0c00217 	ldw	r3,8(fp)
8112f6c8:	10c00215 	stw	r3,8(r2)
8112f6cc:	e0800317 	ldw	r2,12(fp)
8112f6d0:	10001726 	beq	r2,zero,8112f730 <OSTmrCreate+0x1a0>
8112f6d4:	e1000317 	ldw	r4,12(fp)
8112f6d8:	112850c0 	call	8112850c <OS_StrLen>
8112f6dc:	e0bffb05 	stb	r2,-20(fp)
8112f6e0:	e0bffb03 	ldbu	r2,-20(fp)
8112f6e4:	10800428 	cmpgeui	r2,r2,16
8112f6e8:	1000061e 	bne	r2,zero,8112f704 <OSTmrCreate+0x174>
8112f6ec:	e0bffa17 	ldw	r2,-24(fp)
8112f6f0:	10800804 	addi	r2,r2,32
8112f6f4:	e1400317 	ldw	r5,12(fp)
8112f6f8:	1009883a 	mov	r4,r2
8112f6fc:	11284900 	call	81128490 <OS_StrCopy>
8112f700:	00000b06 	br	8112f730 <OSTmrCreate+0x1a0>
8112f704:	e0bffa17 	ldw	r2,-24(fp)
8112f708:	00c008c4 	movi	r3,35
8112f70c:	10c00805 	stb	r3,32(r2)
8112f710:	e0bffa17 	ldw	r2,-24(fp)
8112f714:	10000845 	stb	zero,33(r2)
8112f718:	e0800417 	ldw	r2,16(fp)
8112f71c:	00ffe304 	movi	r3,-116
8112f720:	10c00005 	stb	r3,0(r2)
8112f724:	113058c0 	call	8113058c <OSTmr_Unlock>
8112f728:	e0bffa17 	ldw	r2,-24(fp)
8112f72c:	00000406 	br	8112f740 <OSTmrCreate+0x1b0>
8112f730:	113058c0 	call	8113058c <OSTmr_Unlock>
8112f734:	e0800417 	ldw	r2,16(fp)
8112f738:	10000005 	stb	zero,0(r2)
8112f73c:	e0bffa17 	ldw	r2,-24(fp)
8112f740:	e037883a 	mov	sp,fp
8112f744:	dfc00117 	ldw	ra,4(sp)
8112f748:	df000017 	ldw	fp,0(sp)
8112f74c:	dec00204 	addi	sp,sp,8
8112f750:	f800283a 	ret

8112f754 <OSTmrDel>:
8112f754:	defffc04 	addi	sp,sp,-16
8112f758:	de00012e 	bgeu	sp,et,8112f760 <OSTmrDel+0xc>
8112f75c:	003b68fa 	trap	3
8112f760:	dfc00315 	stw	ra,12(sp)
8112f764:	df000215 	stw	fp,8(sp)
8112f768:	df000204 	addi	fp,sp,8
8112f76c:	e13ffe15 	stw	r4,-8(fp)
8112f770:	e17fff15 	stw	r5,-4(fp)
8112f774:	e0bfff17 	ldw	r2,-4(fp)
8112f778:	1000021e 	bne	r2,zero,8112f784 <OSTmrDel+0x30>
8112f77c:	0005883a 	mov	r2,zero
8112f780:	00003f06 	br	8112f880 <OSTmrDel+0x12c>
8112f784:	e0bffe17 	ldw	r2,-8(fp)
8112f788:	1000051e 	bne	r2,zero,8112f7a0 <OSTmrDel+0x4c>
8112f78c:	e0bfff17 	ldw	r2,-4(fp)
8112f790:	00ffe284 	movi	r3,-118
8112f794:	10c00005 	stb	r3,0(r2)
8112f798:	0005883a 	mov	r2,zero
8112f79c:	00003806 	br	8112f880 <OSTmrDel+0x12c>
8112f7a0:	e0bffe17 	ldw	r2,-8(fp)
8112f7a4:	10800003 	ldbu	r2,0(r2)
8112f7a8:	10803fcc 	andi	r2,r2,255
8112f7ac:	10801920 	cmpeqi	r2,r2,100
8112f7b0:	1000051e 	bne	r2,zero,8112f7c8 <OSTmrDel+0x74>
8112f7b4:	e0bfff17 	ldw	r2,-4(fp)
8112f7b8:	00ffe244 	movi	r3,-119
8112f7bc:	10c00005 	stb	r3,0(r2)
8112f7c0:	0005883a 	mov	r2,zero
8112f7c4:	00002e06 	br	8112f880 <OSTmrDel+0x12c>
8112f7c8:	d0a08303 	ldbu	r2,-32244(gp)
8112f7cc:	10803fcc 	andi	r2,r2,255
8112f7d0:	10000526 	beq	r2,zero,8112f7e8 <OSTmrDel+0x94>
8112f7d4:	e0bfff17 	ldw	r2,-4(fp)
8112f7d8:	00ffe2c4 	movi	r3,-117
8112f7dc:	10c00005 	stb	r3,0(r2)
8112f7e0:	0005883a 	mov	r2,zero
8112f7e4:	00002606 	br	8112f880 <OSTmrDel+0x12c>
8112f7e8:	11305480 	call	81130548 <OSTmr_Lock>
8112f7ec:	e0bffe17 	ldw	r2,-8(fp)
8112f7f0:	10800c43 	ldbu	r2,49(r2)
8112f7f4:	10803fcc 	andi	r2,r2,255
8112f7f8:	10c000c8 	cmpgei	r3,r2,3
8112f7fc:	1800031e 	bne	r3,zero,8112f80c <OSTmrDel+0xb8>
8112f800:	00800d16 	blt	zero,r2,8112f838 <OSTmrDel+0xe4>
8112f804:	10001326 	beq	r2,zero,8112f854 <OSTmrDel+0x100>
8112f808:	00001806 	br	8112f86c <OSTmrDel+0x118>
8112f80c:	108000e0 	cmpeqi	r2,r2,3
8112f810:	10001626 	beq	r2,zero,8112f86c <OSTmrDel+0x118>
8112f814:	e13ffe17 	ldw	r4,-8(fp)
8112f818:	113044c0 	call	8113044c <OSTmr_Unlink>
8112f81c:	e13ffe17 	ldw	r4,-8(fp)
8112f820:	113005c0 	call	8113005c <OSTmr_Free>
8112f824:	113058c0 	call	8113058c <OSTmr_Unlock>
8112f828:	e0bfff17 	ldw	r2,-4(fp)
8112f82c:	10000005 	stb	zero,0(r2)
8112f830:	00800044 	movi	r2,1
8112f834:	00001206 	br	8112f880 <OSTmrDel+0x12c>
8112f838:	e13ffe17 	ldw	r4,-8(fp)
8112f83c:	113005c0 	call	8113005c <OSTmr_Free>
8112f840:	113058c0 	call	8113058c <OSTmr_Unlock>
8112f844:	e0bfff17 	ldw	r2,-4(fp)
8112f848:	10000005 	stb	zero,0(r2)
8112f84c:	00800044 	movi	r2,1
8112f850:	00000b06 	br	8112f880 <OSTmrDel+0x12c>
8112f854:	113058c0 	call	8113058c <OSTmr_Unlock>
8112f858:	e0bfff17 	ldw	r2,-4(fp)
8112f85c:	00ffe1c4 	movi	r3,-121
8112f860:	10c00005 	stb	r3,0(r2)
8112f864:	0005883a 	mov	r2,zero
8112f868:	00000506 	br	8112f880 <OSTmrDel+0x12c>
8112f86c:	113058c0 	call	8113058c <OSTmr_Unlock>
8112f870:	e0bfff17 	ldw	r2,-4(fp)
8112f874:	00ffe344 	movi	r3,-115
8112f878:	10c00005 	stb	r3,0(r2)
8112f87c:	0005883a 	mov	r2,zero
8112f880:	e037883a 	mov	sp,fp
8112f884:	dfc00117 	ldw	ra,4(sp)
8112f888:	df000017 	ldw	fp,0(sp)
8112f88c:	dec00204 	addi	sp,sp,8
8112f890:	f800283a 	ret

8112f894 <OSTmrNameGet>:
8112f894:	defffa04 	addi	sp,sp,-24
8112f898:	de00012e 	bgeu	sp,et,8112f8a0 <OSTmrNameGet+0xc>
8112f89c:	003b68fa 	trap	3
8112f8a0:	dfc00515 	stw	ra,20(sp)
8112f8a4:	df000415 	stw	fp,16(sp)
8112f8a8:	df000404 	addi	fp,sp,16
8112f8ac:	e13ffd15 	stw	r4,-12(fp)
8112f8b0:	e17ffe15 	stw	r5,-8(fp)
8112f8b4:	e1bfff15 	stw	r6,-4(fp)
8112f8b8:	e0bfff17 	ldw	r2,-4(fp)
8112f8bc:	1000021e 	bne	r2,zero,8112f8c8 <OSTmrNameGet+0x34>
8112f8c0:	0005883a 	mov	r2,zero
8112f8c4:	00003e06 	br	8112f9c0 <OSTmrNameGet+0x12c>
8112f8c8:	e0bffe17 	ldw	r2,-8(fp)
8112f8cc:	1000051e 	bne	r2,zero,8112f8e4 <OSTmrNameGet+0x50>
8112f8d0:	e0bfff17 	ldw	r2,-4(fp)
8112f8d4:	00ffe204 	movi	r3,-120
8112f8d8:	10c00005 	stb	r3,0(r2)
8112f8dc:	0005883a 	mov	r2,zero
8112f8e0:	00003706 	br	8112f9c0 <OSTmrNameGet+0x12c>
8112f8e4:	e0bffd17 	ldw	r2,-12(fp)
8112f8e8:	1000051e 	bne	r2,zero,8112f900 <OSTmrNameGet+0x6c>
8112f8ec:	e0bfff17 	ldw	r2,-4(fp)
8112f8f0:	00ffe284 	movi	r3,-118
8112f8f4:	10c00005 	stb	r3,0(r2)
8112f8f8:	0005883a 	mov	r2,zero
8112f8fc:	00003006 	br	8112f9c0 <OSTmrNameGet+0x12c>
8112f900:	e0bffd17 	ldw	r2,-12(fp)
8112f904:	10800003 	ldbu	r2,0(r2)
8112f908:	10803fcc 	andi	r2,r2,255
8112f90c:	10801920 	cmpeqi	r2,r2,100
8112f910:	1000051e 	bne	r2,zero,8112f928 <OSTmrNameGet+0x94>
8112f914:	e0bfff17 	ldw	r2,-4(fp)
8112f918:	00ffe244 	movi	r3,-119
8112f91c:	10c00005 	stb	r3,0(r2)
8112f920:	0005883a 	mov	r2,zero
8112f924:	00002606 	br	8112f9c0 <OSTmrNameGet+0x12c>
8112f928:	d0a08303 	ldbu	r2,-32244(gp)
8112f92c:	10803fcc 	andi	r2,r2,255
8112f930:	10000526 	beq	r2,zero,8112f948 <OSTmrNameGet+0xb4>
8112f934:	e0bfff17 	ldw	r2,-4(fp)
8112f938:	00c00444 	movi	r3,17
8112f93c:	10c00005 	stb	r3,0(r2)
8112f940:	0005883a 	mov	r2,zero
8112f944:	00001e06 	br	8112f9c0 <OSTmrNameGet+0x12c>
8112f948:	11305480 	call	81130548 <OSTmr_Lock>
8112f94c:	e0bffd17 	ldw	r2,-12(fp)
8112f950:	10800c43 	ldbu	r2,49(r2)
8112f954:	10803fcc 	andi	r2,r2,255
8112f958:	10000e26 	beq	r2,zero,8112f994 <OSTmrNameGet+0x100>
8112f95c:	10001316 	blt	r2,zero,8112f9ac <OSTmrNameGet+0x118>
8112f960:	10800108 	cmpgei	r2,r2,4
8112f964:	1000111e 	bne	r2,zero,8112f9ac <OSTmrNameGet+0x118>
8112f968:	e0bffd17 	ldw	r2,-12(fp)
8112f96c:	10800804 	addi	r2,r2,32
8112f970:	100b883a 	mov	r5,r2
8112f974:	e13ffe17 	ldw	r4,-8(fp)
8112f978:	11284900 	call	81128490 <OS_StrCopy>
8112f97c:	e0bffc05 	stb	r2,-16(fp)
8112f980:	113058c0 	call	8113058c <OSTmr_Unlock>
8112f984:	e0bfff17 	ldw	r2,-4(fp)
8112f988:	10000005 	stb	zero,0(r2)
8112f98c:	e0bffc03 	ldbu	r2,-16(fp)
8112f990:	00000b06 	br	8112f9c0 <OSTmrNameGet+0x12c>
8112f994:	113058c0 	call	8113058c <OSTmr_Unlock>
8112f998:	e0bfff17 	ldw	r2,-4(fp)
8112f99c:	00ffe1c4 	movi	r3,-121
8112f9a0:	10c00005 	stb	r3,0(r2)
8112f9a4:	0005883a 	mov	r2,zero
8112f9a8:	00000506 	br	8112f9c0 <OSTmrNameGet+0x12c>
8112f9ac:	113058c0 	call	8113058c <OSTmr_Unlock>
8112f9b0:	e0bfff17 	ldw	r2,-4(fp)
8112f9b4:	00ffe344 	movi	r3,-115
8112f9b8:	10c00005 	stb	r3,0(r2)
8112f9bc:	0005883a 	mov	r2,zero
8112f9c0:	e037883a 	mov	sp,fp
8112f9c4:	dfc00117 	ldw	ra,4(sp)
8112f9c8:	df000017 	ldw	fp,0(sp)
8112f9cc:	dec00204 	addi	sp,sp,8
8112f9d0:	f800283a 	ret

8112f9d4 <OSTmrRemainGet>:
8112f9d4:	defffb04 	addi	sp,sp,-20
8112f9d8:	de00012e 	bgeu	sp,et,8112f9e0 <OSTmrRemainGet+0xc>
8112f9dc:	003b68fa 	trap	3
8112f9e0:	dfc00415 	stw	ra,16(sp)
8112f9e4:	df000315 	stw	fp,12(sp)
8112f9e8:	df000304 	addi	fp,sp,12
8112f9ec:	e13ffe15 	stw	r4,-8(fp)
8112f9f0:	e17fff15 	stw	r5,-4(fp)
8112f9f4:	e0bfff17 	ldw	r2,-4(fp)
8112f9f8:	1000021e 	bne	r2,zero,8112fa04 <OSTmrRemainGet+0x30>
8112f9fc:	0005883a 	mov	r2,zero
8112fa00:	00005d06 	br	8112fb78 <OSTmrRemainGet+0x1a4>
8112fa04:	e0bffe17 	ldw	r2,-8(fp)
8112fa08:	1000051e 	bne	r2,zero,8112fa20 <OSTmrRemainGet+0x4c>
8112fa0c:	e0bfff17 	ldw	r2,-4(fp)
8112fa10:	00ffe284 	movi	r3,-118
8112fa14:	10c00005 	stb	r3,0(r2)
8112fa18:	0005883a 	mov	r2,zero
8112fa1c:	00005606 	br	8112fb78 <OSTmrRemainGet+0x1a4>
8112fa20:	e0bffe17 	ldw	r2,-8(fp)
8112fa24:	10800003 	ldbu	r2,0(r2)
8112fa28:	10803fcc 	andi	r2,r2,255
8112fa2c:	10801920 	cmpeqi	r2,r2,100
8112fa30:	1000051e 	bne	r2,zero,8112fa48 <OSTmrRemainGet+0x74>
8112fa34:	e0bfff17 	ldw	r2,-4(fp)
8112fa38:	00ffe244 	movi	r3,-119
8112fa3c:	10c00005 	stb	r3,0(r2)
8112fa40:	0005883a 	mov	r2,zero
8112fa44:	00004c06 	br	8112fb78 <OSTmrRemainGet+0x1a4>
8112fa48:	d0a08303 	ldbu	r2,-32244(gp)
8112fa4c:	10803fcc 	andi	r2,r2,255
8112fa50:	10000526 	beq	r2,zero,8112fa68 <OSTmrRemainGet+0x94>
8112fa54:	e0bfff17 	ldw	r2,-4(fp)
8112fa58:	00ffe2c4 	movi	r3,-117
8112fa5c:	10c00005 	stb	r3,0(r2)
8112fa60:	0005883a 	mov	r2,zero
8112fa64:	00004406 	br	8112fb78 <OSTmrRemainGet+0x1a4>
8112fa68:	11305480 	call	81130548 <OSTmr_Lock>
8112fa6c:	e0bffe17 	ldw	r2,-8(fp)
8112fa70:	10800c43 	ldbu	r2,49(r2)
8112fa74:	10803fcc 	andi	r2,r2,255
8112fa78:	10c00060 	cmpeqi	r3,r2,1
8112fa7c:	1800121e 	bne	r3,zero,8112fac8 <OSTmrRemainGet+0xf4>
8112fa80:	10c00088 	cmpgei	r3,r2,2
8112fa84:	1800021e 	bne	r3,zero,8112fa90 <OSTmrRemainGet+0xbc>
8112fa88:	10003026 	beq	r2,zero,8112fb4c <OSTmrRemainGet+0x178>
8112fa8c:	00003506 	br	8112fb64 <OSTmrRemainGet+0x190>
8112fa90:	10c000a0 	cmpeqi	r3,r2,2
8112fa94:	1800281e 	bne	r3,zero,8112fb38 <OSTmrRemainGet+0x164>
8112fa98:	108000e0 	cmpeqi	r2,r2,3
8112fa9c:	10003126 	beq	r2,zero,8112fb64 <OSTmrRemainGet+0x190>
8112faa0:	e0bffe17 	ldw	r2,-8(fp)
8112faa4:	10c00517 	ldw	r3,20(r2)
8112faa8:	d0a08517 	ldw	r2,-32236(gp)
8112faac:	1885c83a 	sub	r2,r3,r2
8112fab0:	e0bffd15 	stw	r2,-12(fp)
8112fab4:	113058c0 	call	8113058c <OSTmr_Unlock>
8112fab8:	e0bfff17 	ldw	r2,-4(fp)
8112fabc:	10000005 	stb	zero,0(r2)
8112fac0:	e0bffd17 	ldw	r2,-12(fp)
8112fac4:	00002c06 	br	8112fb78 <OSTmrRemainGet+0x1a4>
8112fac8:	e0bffe17 	ldw	r2,-8(fp)
8112facc:	10800c03 	ldbu	r2,48(r2)
8112fad0:	10803fcc 	andi	r2,r2,255
8112fad4:	108000a0 	cmpeqi	r2,r2,2
8112fad8:	10000e26 	beq	r2,zero,8112fb14 <OSTmrRemainGet+0x140>
8112fadc:	e0bffe17 	ldw	r2,-8(fp)
8112fae0:	10800617 	ldw	r2,24(r2)
8112fae4:	1000041e 	bne	r2,zero,8112faf8 <OSTmrRemainGet+0x124>
8112fae8:	e0bffe17 	ldw	r2,-8(fp)
8112faec:	10800717 	ldw	r2,28(r2)
8112faf0:	e0bffd15 	stw	r2,-12(fp)
8112faf4:	00000306 	br	8112fb04 <OSTmrRemainGet+0x130>
8112faf8:	e0bffe17 	ldw	r2,-8(fp)
8112fafc:	10800617 	ldw	r2,24(r2)
8112fb00:	e0bffd15 	stw	r2,-12(fp)
8112fb04:	113058c0 	call	8113058c <OSTmr_Unlock>
8112fb08:	e0bfff17 	ldw	r2,-4(fp)
8112fb0c:	10000005 	stb	zero,0(r2)
8112fb10:	00000706 	br	8112fb30 <OSTmrRemainGet+0x15c>
8112fb14:	e0bffe17 	ldw	r2,-8(fp)
8112fb18:	10800617 	ldw	r2,24(r2)
8112fb1c:	e0bffd15 	stw	r2,-12(fp)
8112fb20:	113058c0 	call	8113058c <OSTmr_Unlock>
8112fb24:	e0bfff17 	ldw	r2,-4(fp)
8112fb28:	10000005 	stb	zero,0(r2)
8112fb2c:	0001883a 	nop
8112fb30:	e0bffd17 	ldw	r2,-12(fp)
8112fb34:	00001006 	br	8112fb78 <OSTmrRemainGet+0x1a4>
8112fb38:	113058c0 	call	8113058c <OSTmr_Unlock>
8112fb3c:	e0bfff17 	ldw	r2,-4(fp)
8112fb40:	10000005 	stb	zero,0(r2)
8112fb44:	0005883a 	mov	r2,zero
8112fb48:	00000b06 	br	8112fb78 <OSTmrRemainGet+0x1a4>
8112fb4c:	113058c0 	call	8113058c <OSTmr_Unlock>
8112fb50:	e0bfff17 	ldw	r2,-4(fp)
8112fb54:	00ffe1c4 	movi	r3,-121
8112fb58:	10c00005 	stb	r3,0(r2)
8112fb5c:	0005883a 	mov	r2,zero
8112fb60:	00000506 	br	8112fb78 <OSTmrRemainGet+0x1a4>
8112fb64:	113058c0 	call	8113058c <OSTmr_Unlock>
8112fb68:	e0bfff17 	ldw	r2,-4(fp)
8112fb6c:	00ffe344 	movi	r3,-115
8112fb70:	10c00005 	stb	r3,0(r2)
8112fb74:	0005883a 	mov	r2,zero
8112fb78:	e037883a 	mov	sp,fp
8112fb7c:	dfc00117 	ldw	ra,4(sp)
8112fb80:	df000017 	ldw	fp,0(sp)
8112fb84:	dec00204 	addi	sp,sp,8
8112fb88:	f800283a 	ret

8112fb8c <OSTmrStateGet>:
8112fb8c:	defffb04 	addi	sp,sp,-20
8112fb90:	de00012e 	bgeu	sp,et,8112fb98 <OSTmrStateGet+0xc>
8112fb94:	003b68fa 	trap	3
8112fb98:	dfc00415 	stw	ra,16(sp)
8112fb9c:	df000315 	stw	fp,12(sp)
8112fba0:	df000304 	addi	fp,sp,12
8112fba4:	e13ffe15 	stw	r4,-8(fp)
8112fba8:	e17fff15 	stw	r5,-4(fp)
8112fbac:	e0bfff17 	ldw	r2,-4(fp)
8112fbb0:	1000021e 	bne	r2,zero,8112fbbc <OSTmrStateGet+0x30>
8112fbb4:	0005883a 	mov	r2,zero
8112fbb8:	00002a06 	br	8112fc64 <OSTmrStateGet+0xd8>
8112fbbc:	e0bffe17 	ldw	r2,-8(fp)
8112fbc0:	1000051e 	bne	r2,zero,8112fbd8 <OSTmrStateGet+0x4c>
8112fbc4:	e0bfff17 	ldw	r2,-4(fp)
8112fbc8:	00ffe284 	movi	r3,-118
8112fbcc:	10c00005 	stb	r3,0(r2)
8112fbd0:	0005883a 	mov	r2,zero
8112fbd4:	00002306 	br	8112fc64 <OSTmrStateGet+0xd8>
8112fbd8:	e0bffe17 	ldw	r2,-8(fp)
8112fbdc:	10800003 	ldbu	r2,0(r2)
8112fbe0:	10803fcc 	andi	r2,r2,255
8112fbe4:	10801920 	cmpeqi	r2,r2,100
8112fbe8:	1000051e 	bne	r2,zero,8112fc00 <OSTmrStateGet+0x74>
8112fbec:	e0bfff17 	ldw	r2,-4(fp)
8112fbf0:	00ffe244 	movi	r3,-119
8112fbf4:	10c00005 	stb	r3,0(r2)
8112fbf8:	0005883a 	mov	r2,zero
8112fbfc:	00001906 	br	8112fc64 <OSTmrStateGet+0xd8>
8112fc00:	d0a08303 	ldbu	r2,-32244(gp)
8112fc04:	10803fcc 	andi	r2,r2,255
8112fc08:	10000526 	beq	r2,zero,8112fc20 <OSTmrStateGet+0x94>
8112fc0c:	e0bfff17 	ldw	r2,-4(fp)
8112fc10:	00ffe2c4 	movi	r3,-117
8112fc14:	10c00005 	stb	r3,0(r2)
8112fc18:	0005883a 	mov	r2,zero
8112fc1c:	00001106 	br	8112fc64 <OSTmrStateGet+0xd8>
8112fc20:	11305480 	call	81130548 <OSTmr_Lock>
8112fc24:	e0bffe17 	ldw	r2,-8(fp)
8112fc28:	10800c43 	ldbu	r2,49(r2)
8112fc2c:	e0bffd05 	stb	r2,-12(fp)
8112fc30:	e0bffd03 	ldbu	r2,-12(fp)
8112fc34:	1005883a 	mov	r2,r2
8112fc38:	10800128 	cmpgeui	r2,r2,4
8112fc3c:	1000031e 	bne	r2,zero,8112fc4c <OSTmrStateGet+0xc0>
8112fc40:	e0bfff17 	ldw	r2,-4(fp)
8112fc44:	10000005 	stb	zero,0(r2)
8112fc48:	00000406 	br	8112fc5c <OSTmrStateGet+0xd0>
8112fc4c:	e0bfff17 	ldw	r2,-4(fp)
8112fc50:	00ffe344 	movi	r3,-115
8112fc54:	10c00005 	stb	r3,0(r2)
8112fc58:	0001883a 	nop
8112fc5c:	113058c0 	call	8113058c <OSTmr_Unlock>
8112fc60:	e0bffd03 	ldbu	r2,-12(fp)
8112fc64:	e037883a 	mov	sp,fp
8112fc68:	dfc00117 	ldw	ra,4(sp)
8112fc6c:	df000017 	ldw	fp,0(sp)
8112fc70:	dec00204 	addi	sp,sp,8
8112fc74:	f800283a 	ret

8112fc78 <OSTmrStart>:
8112fc78:	defffc04 	addi	sp,sp,-16
8112fc7c:	de00012e 	bgeu	sp,et,8112fc84 <OSTmrStart+0xc>
8112fc80:	003b68fa 	trap	3
8112fc84:	dfc00315 	stw	ra,12(sp)
8112fc88:	df000215 	stw	fp,8(sp)
8112fc8c:	df000204 	addi	fp,sp,8
8112fc90:	e13ffe15 	stw	r4,-8(fp)
8112fc94:	e17fff15 	stw	r5,-4(fp)
8112fc98:	e0bfff17 	ldw	r2,-4(fp)
8112fc9c:	1000021e 	bne	r2,zero,8112fca8 <OSTmrStart+0x30>
8112fca0:	0005883a 	mov	r2,zero
8112fca4:	00004106 	br	8112fdac <OSTmrStart+0x134>
8112fca8:	e0bffe17 	ldw	r2,-8(fp)
8112fcac:	1000051e 	bne	r2,zero,8112fcc4 <OSTmrStart+0x4c>
8112fcb0:	e0bfff17 	ldw	r2,-4(fp)
8112fcb4:	00ffe284 	movi	r3,-118
8112fcb8:	10c00005 	stb	r3,0(r2)
8112fcbc:	0005883a 	mov	r2,zero
8112fcc0:	00003a06 	br	8112fdac <OSTmrStart+0x134>
8112fcc4:	e0bffe17 	ldw	r2,-8(fp)
8112fcc8:	10800003 	ldbu	r2,0(r2)
8112fccc:	10803fcc 	andi	r2,r2,255
8112fcd0:	10801920 	cmpeqi	r2,r2,100
8112fcd4:	1000051e 	bne	r2,zero,8112fcec <OSTmrStart+0x74>
8112fcd8:	e0bfff17 	ldw	r2,-4(fp)
8112fcdc:	00ffe244 	movi	r3,-119
8112fce0:	10c00005 	stb	r3,0(r2)
8112fce4:	0005883a 	mov	r2,zero
8112fce8:	00003006 	br	8112fdac <OSTmrStart+0x134>
8112fcec:	d0a08303 	ldbu	r2,-32244(gp)
8112fcf0:	10803fcc 	andi	r2,r2,255
8112fcf4:	10000526 	beq	r2,zero,8112fd0c <OSTmrStart+0x94>
8112fcf8:	e0bfff17 	ldw	r2,-4(fp)
8112fcfc:	00ffe2c4 	movi	r3,-117
8112fd00:	10c00005 	stb	r3,0(r2)
8112fd04:	0005883a 	mov	r2,zero
8112fd08:	00002806 	br	8112fdac <OSTmrStart+0x134>
8112fd0c:	11305480 	call	81130548 <OSTmr_Lock>
8112fd10:	e0bffe17 	ldw	r2,-8(fp)
8112fd14:	10800c43 	ldbu	r2,49(r2)
8112fd18:	10803fcc 	andi	r2,r2,255
8112fd1c:	10c000c8 	cmpgei	r3,r2,3
8112fd20:	1800031e 	bne	r3,zero,8112fd30 <OSTmrStart+0xb8>
8112fd24:	00800e16 	blt	zero,r2,8112fd60 <OSTmrStart+0xe8>
8112fd28:	10001526 	beq	r2,zero,8112fd80 <OSTmrStart+0x108>
8112fd2c:	00001a06 	br	8112fd98 <OSTmrStart+0x120>
8112fd30:	108000e0 	cmpeqi	r2,r2,3
8112fd34:	10001826 	beq	r2,zero,8112fd98 <OSTmrStart+0x120>
8112fd38:	e13ffe17 	ldw	r4,-8(fp)
8112fd3c:	113044c0 	call	8113044c <OSTmr_Unlink>
8112fd40:	000b883a 	mov	r5,zero
8112fd44:	e13ffe17 	ldw	r4,-8(fp)
8112fd48:	11302fc0 	call	811302fc <OSTmr_Link>
8112fd4c:	113058c0 	call	8113058c <OSTmr_Unlock>
8112fd50:	e0bfff17 	ldw	r2,-4(fp)
8112fd54:	10000005 	stb	zero,0(r2)
8112fd58:	00800044 	movi	r2,1
8112fd5c:	00001306 	br	8112fdac <OSTmrStart+0x134>
8112fd60:	000b883a 	mov	r5,zero
8112fd64:	e13ffe17 	ldw	r4,-8(fp)
8112fd68:	11302fc0 	call	811302fc <OSTmr_Link>
8112fd6c:	113058c0 	call	8113058c <OSTmr_Unlock>
8112fd70:	e0bfff17 	ldw	r2,-4(fp)
8112fd74:	10000005 	stb	zero,0(r2)
8112fd78:	00800044 	movi	r2,1
8112fd7c:	00000b06 	br	8112fdac <OSTmrStart+0x134>
8112fd80:	113058c0 	call	8113058c <OSTmr_Unlock>
8112fd84:	e0bfff17 	ldw	r2,-4(fp)
8112fd88:	00ffe1c4 	movi	r3,-121
8112fd8c:	10c00005 	stb	r3,0(r2)
8112fd90:	0005883a 	mov	r2,zero
8112fd94:	00000506 	br	8112fdac <OSTmrStart+0x134>
8112fd98:	113058c0 	call	8113058c <OSTmr_Unlock>
8112fd9c:	e0bfff17 	ldw	r2,-4(fp)
8112fda0:	00ffe344 	movi	r3,-115
8112fda4:	10c00005 	stb	r3,0(r2)
8112fda8:	0005883a 	mov	r2,zero
8112fdac:	e037883a 	mov	sp,fp
8112fdb0:	dfc00117 	ldw	ra,4(sp)
8112fdb4:	df000017 	ldw	fp,0(sp)
8112fdb8:	dec00204 	addi	sp,sp,8
8112fdbc:	f800283a 	ret

8112fdc0 <OSTmrStop>:
8112fdc0:	defff904 	addi	sp,sp,-28
8112fdc4:	de00012e 	bgeu	sp,et,8112fdcc <OSTmrStop+0xc>
8112fdc8:	003b68fa 	trap	3
8112fdcc:	dfc00615 	stw	ra,24(sp)
8112fdd0:	df000515 	stw	fp,20(sp)
8112fdd4:	df000504 	addi	fp,sp,20
8112fdd8:	e13ffc15 	stw	r4,-16(fp)
8112fddc:	2805883a 	mov	r2,r5
8112fde0:	e1bffe15 	stw	r6,-8(fp)
8112fde4:	e1ffff15 	stw	r7,-4(fp)
8112fde8:	e0bffd05 	stb	r2,-12(fp)
8112fdec:	e0bfff17 	ldw	r2,-4(fp)
8112fdf0:	1000021e 	bne	r2,zero,8112fdfc <OSTmrStop+0x3c>
8112fdf4:	0005883a 	mov	r2,zero
8112fdf8:	00006606 	br	8112ff94 <OSTmrStop+0x1d4>
8112fdfc:	e0bffc17 	ldw	r2,-16(fp)
8112fe00:	1000051e 	bne	r2,zero,8112fe18 <OSTmrStop+0x58>
8112fe04:	e0bfff17 	ldw	r2,-4(fp)
8112fe08:	00ffe284 	movi	r3,-118
8112fe0c:	10c00005 	stb	r3,0(r2)
8112fe10:	0005883a 	mov	r2,zero
8112fe14:	00005f06 	br	8112ff94 <OSTmrStop+0x1d4>
8112fe18:	e0bffc17 	ldw	r2,-16(fp)
8112fe1c:	10800003 	ldbu	r2,0(r2)
8112fe20:	10803fcc 	andi	r2,r2,255
8112fe24:	10801920 	cmpeqi	r2,r2,100
8112fe28:	1000051e 	bne	r2,zero,8112fe40 <OSTmrStop+0x80>
8112fe2c:	e0bfff17 	ldw	r2,-4(fp)
8112fe30:	00ffe244 	movi	r3,-119
8112fe34:	10c00005 	stb	r3,0(r2)
8112fe38:	0005883a 	mov	r2,zero
8112fe3c:	00005506 	br	8112ff94 <OSTmrStop+0x1d4>
8112fe40:	d0a08303 	ldbu	r2,-32244(gp)
8112fe44:	10803fcc 	andi	r2,r2,255
8112fe48:	10000526 	beq	r2,zero,8112fe60 <OSTmrStop+0xa0>
8112fe4c:	e0bfff17 	ldw	r2,-4(fp)
8112fe50:	00ffe2c4 	movi	r3,-117
8112fe54:	10c00005 	stb	r3,0(r2)
8112fe58:	0005883a 	mov	r2,zero
8112fe5c:	00004d06 	br	8112ff94 <OSTmrStop+0x1d4>
8112fe60:	11305480 	call	81130548 <OSTmr_Lock>
8112fe64:	e0bffc17 	ldw	r2,-16(fp)
8112fe68:	10800c43 	ldbu	r2,49(r2)
8112fe6c:	10803fcc 	andi	r2,r2,255
8112fe70:	10c000c8 	cmpgei	r3,r2,3
8112fe74:	1800031e 	bne	r3,zero,8112fe84 <OSTmrStop+0xc4>
8112fe78:	00803516 	blt	zero,r2,8112ff50 <OSTmrStop+0x190>
8112fe7c:	10003a26 	beq	r2,zero,8112ff68 <OSTmrStop+0x1a8>
8112fe80:	00003f06 	br	8112ff80 <OSTmrStop+0x1c0>
8112fe84:	108000e0 	cmpeqi	r2,r2,3
8112fe88:	10003d26 	beq	r2,zero,8112ff80 <OSTmrStop+0x1c0>
8112fe8c:	e13ffc17 	ldw	r4,-16(fp)
8112fe90:	113044c0 	call	8113044c <OSTmr_Unlink>
8112fe94:	e0bfff17 	ldw	r2,-4(fp)
8112fe98:	10000005 	stb	zero,0(r2)
8112fe9c:	e0bffd03 	ldbu	r2,-12(fp)
8112fea0:	10c000e0 	cmpeqi	r3,r2,3
8112fea4:	1800041e 	bne	r3,zero,8112feb8 <OSTmrStop+0xf8>
8112fea8:	10c00120 	cmpeqi	r3,r2,4
8112feac:	1800121e 	bne	r3,zero,8112fef8 <OSTmrStop+0x138>
8112feb0:	10002326 	beq	r2,zero,8112ff40 <OSTmrStop+0x180>
8112feb4:	00001e06 	br	8112ff30 <OSTmrStop+0x170>
8112feb8:	e0bffc17 	ldw	r2,-16(fp)
8112febc:	10800117 	ldw	r2,4(r2)
8112fec0:	e0bffb15 	stw	r2,-20(fp)
8112fec4:	e0bffb17 	ldw	r2,-20(fp)
8112fec8:	10000726 	beq	r2,zero,8112fee8 <OSTmrStop+0x128>
8112fecc:	e0bffc17 	ldw	r2,-16(fp)
8112fed0:	10c00217 	ldw	r3,8(r2)
8112fed4:	e0bffb17 	ldw	r2,-20(fp)
8112fed8:	180b883a 	mov	r5,r3
8112fedc:	e13ffc17 	ldw	r4,-16(fp)
8112fee0:	103ee83a 	callr	r2
8112fee4:	00001706 	br	8112ff44 <OSTmrStop+0x184>
8112fee8:	e0bfff17 	ldw	r2,-4(fp)
8112feec:	00ffe3c4 	movi	r3,-113
8112fef0:	10c00005 	stb	r3,0(r2)
8112fef4:	00001306 	br	8112ff44 <OSTmrStop+0x184>
8112fef8:	e0bffc17 	ldw	r2,-16(fp)
8112fefc:	10800117 	ldw	r2,4(r2)
8112ff00:	e0bffb15 	stw	r2,-20(fp)
8112ff04:	e0bffb17 	ldw	r2,-20(fp)
8112ff08:	10000526 	beq	r2,zero,8112ff20 <OSTmrStop+0x160>
8112ff0c:	e0bffb17 	ldw	r2,-20(fp)
8112ff10:	e17ffe17 	ldw	r5,-8(fp)
8112ff14:	e13ffc17 	ldw	r4,-16(fp)
8112ff18:	103ee83a 	callr	r2
8112ff1c:	00000906 	br	8112ff44 <OSTmrStop+0x184>
8112ff20:	e0bfff17 	ldw	r2,-4(fp)
8112ff24:	00ffe3c4 	movi	r3,-113
8112ff28:	10c00005 	stb	r3,0(r2)
8112ff2c:	00000506 	br	8112ff44 <OSTmrStop+0x184>
8112ff30:	e0bfff17 	ldw	r2,-4(fp)
8112ff34:	00ffe104 	movi	r3,-124
8112ff38:	10c00005 	stb	r3,0(r2)
8112ff3c:	00000106 	br	8112ff44 <OSTmrStop+0x184>
8112ff40:	0001883a 	nop
8112ff44:	113058c0 	call	8113058c <OSTmr_Unlock>
8112ff48:	00800044 	movi	r2,1
8112ff4c:	00001106 	br	8112ff94 <OSTmrStop+0x1d4>
8112ff50:	113058c0 	call	8113058c <OSTmr_Unlock>
8112ff54:	e0bfff17 	ldw	r2,-4(fp)
8112ff58:	00ffe384 	movi	r3,-114
8112ff5c:	10c00005 	stb	r3,0(r2)
8112ff60:	00800044 	movi	r2,1
8112ff64:	00000b06 	br	8112ff94 <OSTmrStop+0x1d4>
8112ff68:	113058c0 	call	8113058c <OSTmr_Unlock>
8112ff6c:	e0bfff17 	ldw	r2,-4(fp)
8112ff70:	00ffe1c4 	movi	r3,-121
8112ff74:	10c00005 	stb	r3,0(r2)
8112ff78:	0005883a 	mov	r2,zero
8112ff7c:	00000506 	br	8112ff94 <OSTmrStop+0x1d4>
8112ff80:	113058c0 	call	8113058c <OSTmr_Unlock>
8112ff84:	e0bfff17 	ldw	r2,-4(fp)
8112ff88:	00ffe344 	movi	r3,-115
8112ff8c:	10c00005 	stb	r3,0(r2)
8112ff90:	0005883a 	mov	r2,zero
8112ff94:	e037883a 	mov	sp,fp
8112ff98:	dfc00117 	ldw	ra,4(sp)
8112ff9c:	df000017 	ldw	fp,0(sp)
8112ffa0:	dec00204 	addi	sp,sp,8
8112ffa4:	f800283a 	ret

8112ffa8 <OSTmrSignal>:
8112ffa8:	defffd04 	addi	sp,sp,-12
8112ffac:	de00012e 	bgeu	sp,et,8112ffb4 <OSTmrSignal+0xc>
8112ffb0:	003b68fa 	trap	3
8112ffb4:	dfc00215 	stw	ra,8(sp)
8112ffb8:	df000115 	stw	fp,4(sp)
8112ffbc:	df000104 	addi	fp,sp,4
8112ffc0:	d0a07217 	ldw	r2,-32312(gp)
8112ffc4:	1009883a 	mov	r4,r2
8112ffc8:	112d5740 	call	8112d574 <OSSemPost>
8112ffcc:	e0bfff05 	stb	r2,-4(fp)
8112ffd0:	e0bfff03 	ldbu	r2,-4(fp)
8112ffd4:	e037883a 	mov	sp,fp
8112ffd8:	dfc00117 	ldw	ra,4(sp)
8112ffdc:	df000017 	ldw	fp,0(sp)
8112ffe0:	dec00204 	addi	sp,sp,8
8112ffe4:	f800283a 	ret

8112ffe8 <OSTmr_Alloc>:
8112ffe8:	defffe04 	addi	sp,sp,-8
8112ffec:	de00012e 	bgeu	sp,et,8112fff4 <OSTmr_Alloc+0xc>
8112fff0:	003b68fa 	trap	3
8112fff4:	df000115 	stw	fp,4(sp)
8112fff8:	df000104 	addi	fp,sp,4
8112fffc:	d0a07017 	ldw	r2,-32320(gp)
81130000:	1000021e 	bne	r2,zero,8113000c <OSTmr_Alloc+0x24>
81130004:	0005883a 	mov	r2,zero
81130008:	00001006 	br	8113004c <OSTmr_Alloc+0x64>
8113000c:	d0a07017 	ldw	r2,-32320(gp)
81130010:	e0bfff15 	stw	r2,-4(fp)
81130014:	e0bfff17 	ldw	r2,-4(fp)
81130018:	10800317 	ldw	r2,12(r2)
8113001c:	d0a07015 	stw	r2,-32320(gp)
81130020:	e0bfff17 	ldw	r2,-4(fp)
81130024:	10000315 	stw	zero,12(r2)
81130028:	e0bfff17 	ldw	r2,-4(fp)
8113002c:	10000415 	stw	zero,16(r2)
81130030:	d0a0750b 	ldhu	r2,-32300(gp)
81130034:	10800044 	addi	r2,r2,1
81130038:	d0a0750d 	sth	r2,-32300(gp)
8113003c:	d0a0790b 	ldhu	r2,-32284(gp)
81130040:	10bfffc4 	addi	r2,r2,-1
81130044:	d0a0790d 	sth	r2,-32284(gp)
81130048:	e0bfff17 	ldw	r2,-4(fp)
8113004c:	e037883a 	mov	sp,fp
81130050:	df000017 	ldw	fp,0(sp)
81130054:	dec00104 	addi	sp,sp,4
81130058:	f800283a 	ret

8113005c <OSTmr_Free>:
8113005c:	defffe04 	addi	sp,sp,-8
81130060:	de00012e 	bgeu	sp,et,81130068 <OSTmr_Free+0xc>
81130064:	003b68fa 	trap	3
81130068:	df000115 	stw	fp,4(sp)
8113006c:	df000104 	addi	fp,sp,4
81130070:	e13fff15 	stw	r4,-4(fp)
81130074:	e0bfff17 	ldw	r2,-4(fp)
81130078:	10000c45 	stb	zero,49(r2)
8113007c:	e0bfff17 	ldw	r2,-4(fp)
81130080:	10000c05 	stb	zero,48(r2)
81130084:	e0bfff17 	ldw	r2,-4(fp)
81130088:	10000715 	stw	zero,28(r2)
8113008c:	e0bfff17 	ldw	r2,-4(fp)
81130090:	10000515 	stw	zero,20(r2)
81130094:	e0bfff17 	ldw	r2,-4(fp)
81130098:	10000115 	stw	zero,4(r2)
8113009c:	e0bfff17 	ldw	r2,-4(fp)
811300a0:	10000215 	stw	zero,8(r2)
811300a4:	e0bfff17 	ldw	r2,-4(fp)
811300a8:	00c00fc4 	movi	r3,63
811300ac:	10c00805 	stb	r3,32(r2)
811300b0:	e0bfff17 	ldw	r2,-4(fp)
811300b4:	10000845 	stb	zero,33(r2)
811300b8:	e0bfff17 	ldw	r2,-4(fp)
811300bc:	10000415 	stw	zero,16(r2)
811300c0:	d0e07017 	ldw	r3,-32320(gp)
811300c4:	e0bfff17 	ldw	r2,-4(fp)
811300c8:	10c00315 	stw	r3,12(r2)
811300cc:	e0bfff17 	ldw	r2,-4(fp)
811300d0:	d0a07015 	stw	r2,-32320(gp)
811300d4:	d0a0750b 	ldhu	r2,-32300(gp)
811300d8:	10bfffc4 	addi	r2,r2,-1
811300dc:	d0a0750d 	sth	r2,-32300(gp)
811300e0:	d0a0790b 	ldhu	r2,-32284(gp)
811300e4:	10800044 	addi	r2,r2,1
811300e8:	d0a0790d 	sth	r2,-32284(gp)
811300ec:	0001883a 	nop
811300f0:	e037883a 	mov	sp,fp
811300f4:	df000017 	ldw	fp,0(sp)
811300f8:	dec00104 	addi	sp,sp,4
811300fc:	f800283a 	ret

81130100 <OSTmr_Init>:
81130100:	defffa04 	addi	sp,sp,-24
81130104:	de00012e 	bgeu	sp,et,8113010c <OSTmr_Init+0xc>
81130108:	003b68fa 	trap	3
8113010c:	dfc00515 	stw	ra,20(sp)
81130110:	df000415 	stw	fp,16(sp)
81130114:	df000404 	addi	fp,sp,16
81130118:	01406804 	movi	r5,416
8113011c:	01204574 	movhi	r4,33045
81130120:	21375304 	addi	r4,r4,-8884
81130124:	11282700 	call	81128270 <OS_MemClr>
81130128:	01400404 	movi	r5,16
8113012c:	01204574 	movhi	r4,33045
81130130:	21367304 	addi	r4,r4,-9780
81130134:	11282700 	call	81128270 <OS_MemClr>
81130138:	00a04574 	movhi	r2,33045
8113013c:	10b75304 	addi	r2,r2,-8884
81130140:	e0bffd15 	stw	r2,-12(fp)
81130144:	00a04574 	movhi	r2,33045
81130148:	10b76004 	addi	r2,r2,-8832
8113014c:	e0bffe15 	stw	r2,-8(fp)
81130150:	e03ffc0d 	sth	zero,-16(fp)
81130154:	00001606 	br	811301b0 <OSTmr_Init+0xb0>
81130158:	e0bffd17 	ldw	r2,-12(fp)
8113015c:	00c01904 	movi	r3,100
81130160:	10c00005 	stb	r3,0(r2)
81130164:	e0bffd17 	ldw	r2,-12(fp)
81130168:	10000c45 	stb	zero,49(r2)
8113016c:	e0bffd17 	ldw	r2,-12(fp)
81130170:	e0fffe17 	ldw	r3,-8(fp)
81130174:	10c00315 	stw	r3,12(r2)
81130178:	e0bffd17 	ldw	r2,-12(fp)
8113017c:	00c00fc4 	movi	r3,63
81130180:	10c00805 	stb	r3,32(r2)
81130184:	e0bffd17 	ldw	r2,-12(fp)
81130188:	10000845 	stb	zero,33(r2)
8113018c:	e0bffd17 	ldw	r2,-12(fp)
81130190:	10800d04 	addi	r2,r2,52
81130194:	e0bffd15 	stw	r2,-12(fp)
81130198:	e0bffe17 	ldw	r2,-8(fp)
8113019c:	10800d04 	addi	r2,r2,52
811301a0:	e0bffe15 	stw	r2,-8(fp)
811301a4:	e0bffc0b 	ldhu	r2,-16(fp)
811301a8:	10800044 	addi	r2,r2,1
811301ac:	e0bffc0d 	sth	r2,-16(fp)
811301b0:	e0bffc0b 	ldhu	r2,-16(fp)
811301b4:	108001f0 	cmpltui	r2,r2,7
811301b8:	103fe71e 	bne	r2,zero,81130158 <__reset+0xfb110158>
811301bc:	e0bffd17 	ldw	r2,-12(fp)
811301c0:	00c01904 	movi	r3,100
811301c4:	10c00005 	stb	r3,0(r2)
811301c8:	e0bffd17 	ldw	r2,-12(fp)
811301cc:	10000c45 	stb	zero,49(r2)
811301d0:	e0bffd17 	ldw	r2,-12(fp)
811301d4:	10000315 	stw	zero,12(r2)
811301d8:	e0bffd17 	ldw	r2,-12(fp)
811301dc:	00c00fc4 	movi	r3,63
811301e0:	10c00805 	stb	r3,32(r2)
811301e4:	e0bffd17 	ldw	r2,-12(fp)
811301e8:	10000845 	stb	zero,33(r2)
811301ec:	d0208515 	stw	zero,-32236(gp)
811301f0:	d020750d 	sth	zero,-32300(gp)
811301f4:	00800204 	movi	r2,8
811301f8:	d0a0790d 	sth	r2,-32284(gp)
811301fc:	00a04574 	movhi	r2,33045
81130200:	10b75304 	addi	r2,r2,-8884
81130204:	d0a07015 	stw	r2,-32320(gp)
81130208:	01000044 	movi	r4,1
8113020c:	112cec40 	call	8112cec4 <OSSemCreate>
81130210:	d0a08715 	stw	r2,-32228(gp)
81130214:	0009883a 	mov	r4,zero
81130218:	112cec40 	call	8112cec4 <OSSemCreate>
8113021c:	d0a07215 	stw	r2,-32312(gp)
81130220:	d0a08717 	ldw	r2,-32228(gp)
81130224:	e0ffff04 	addi	r3,fp,-4
81130228:	180d883a 	mov	r6,r3
8113022c:	01604534 	movhi	r5,33044
81130230:	29725404 	addi	r5,r5,-14000
81130234:	1009883a 	mov	r4,r2
81130238:	1126a480 	call	81126a48 <OSEventNameSet>
8113023c:	d0a07217 	ldw	r2,-32312(gp)
81130240:	e0ffff04 	addi	r3,fp,-4
81130244:	180d883a 	mov	r6,r3
81130248:	01604534 	movhi	r5,33044
8113024c:	29725904 	addi	r5,r5,-13980
81130250:	1009883a 	mov	r4,r2
81130254:	1126a480 	call	81126a48 <OSEventNameSet>
81130258:	11302740 	call	81130274 <OSTmr_InitTask>
8113025c:	0001883a 	nop
81130260:	e037883a 	mov	sp,fp
81130264:	dfc00117 	ldw	ra,4(sp)
81130268:	df000017 	ldw	fp,0(sp)
8113026c:	dec00204 	addi	sp,sp,8
81130270:	f800283a 	ret

81130274 <OSTmr_InitTask>:
81130274:	defff804 	addi	sp,sp,-32
81130278:	de00012e 	bgeu	sp,et,81130280 <OSTmr_InitTask+0xc>
8113027c:	003b68fa 	trap	3
81130280:	dfc00715 	stw	ra,28(sp)
81130284:	df000615 	stw	fp,24(sp)
81130288:	df000604 	addi	fp,sp,24
8113028c:	008000c4 	movi	r2,3
81130290:	d8800415 	stw	r2,16(sp)
81130294:	d8000315 	stw	zero,12(sp)
81130298:	00808004 	movi	r2,512
8113029c:	d8800215 	stw	r2,8(sp)
811302a0:	00a04574 	movhi	r2,33045
811302a4:	10bd3f04 	addi	r2,r2,-2820
811302a8:	d8800115 	stw	r2,4(sp)
811302ac:	00bfff54 	movui	r2,65533
811302b0:	d8800015 	stw	r2,0(sp)
811302b4:	01c00484 	movi	r7,18
811302b8:	01a04574 	movhi	r6,33045
811302bc:	31bf3e04 	addi	r6,r6,-776
811302c0:	000b883a 	mov	r5,zero
811302c4:	012044f4 	movhi	r4,33043
811302c8:	21017204 	addi	r4,r4,1480
811302cc:	112df580 	call	8112df58 <OSTaskCreateExt>
811302d0:	e1bfff04 	addi	r6,fp,-4
811302d4:	01604534 	movhi	r5,33044
811302d8:	29725e04 	addi	r5,r5,-13960
811302dc:	01000484 	movi	r4,18
811302e0:	112e7880 	call	8112e788 <OSTaskNameSet>
811302e4:	0001883a 	nop
811302e8:	e037883a 	mov	sp,fp
811302ec:	dfc00117 	ldw	ra,4(sp)
811302f0:	df000017 	ldw	fp,0(sp)
811302f4:	dec00204 	addi	sp,sp,8
811302f8:	f800283a 	ret

811302fc <OSTmr_Link>:
811302fc:	defffa04 	addi	sp,sp,-24
81130300:	de00012e 	bgeu	sp,et,81130308 <OSTmr_Link+0xc>
81130304:	003b68fa 	trap	3
81130308:	df000515 	stw	fp,20(sp)
8113030c:	df000504 	addi	fp,sp,20
81130310:	e13ffe15 	stw	r4,-8(fp)
81130314:	2805883a 	mov	r2,r5
81130318:	e0bfff05 	stb	r2,-4(fp)
8113031c:	e0bffe17 	ldw	r2,-8(fp)
81130320:	00c000c4 	movi	r3,3
81130324:	10c00c45 	stb	r3,49(r2)
81130328:	e0bfff03 	ldbu	r2,-4(fp)
8113032c:	10800058 	cmpnei	r2,r2,1
81130330:	1000071e 	bne	r2,zero,81130350 <OSTmr_Link+0x54>
81130334:	e0bffe17 	ldw	r2,-8(fp)
81130338:	10c00717 	ldw	r3,28(r2)
8113033c:	d0a08517 	ldw	r2,-32236(gp)
81130340:	1887883a 	add	r3,r3,r2
81130344:	e0bffe17 	ldw	r2,-8(fp)
81130348:	10c00515 	stw	r3,20(r2)
8113034c:	00001006 	br	81130390 <OSTmr_Link+0x94>
81130350:	e0bffe17 	ldw	r2,-8(fp)
81130354:	10800617 	ldw	r2,24(r2)
81130358:	1000071e 	bne	r2,zero,81130378 <OSTmr_Link+0x7c>
8113035c:	e0bffe17 	ldw	r2,-8(fp)
81130360:	10c00717 	ldw	r3,28(r2)
81130364:	d0a08517 	ldw	r2,-32236(gp)
81130368:	1887883a 	add	r3,r3,r2
8113036c:	e0bffe17 	ldw	r2,-8(fp)
81130370:	10c00515 	stw	r3,20(r2)
81130374:	00000606 	br	81130390 <OSTmr_Link+0x94>
81130378:	e0bffe17 	ldw	r2,-8(fp)
8113037c:	10c00617 	ldw	r3,24(r2)
81130380:	d0a08517 	ldw	r2,-32236(gp)
81130384:	1887883a 	add	r3,r3,r2
81130388:	e0bffe17 	ldw	r2,-8(fp)
8113038c:	10c00515 	stw	r3,20(r2)
81130390:	e0bffe17 	ldw	r2,-8(fp)
81130394:	10800517 	ldw	r2,20(r2)
81130398:	1080004c 	andi	r2,r2,1
8113039c:	e0bffb0d 	sth	r2,-20(fp)
811303a0:	e0bffb0b 	ldhu	r2,-20(fp)
811303a4:	100690fa 	slli	r3,r2,3
811303a8:	00a04574 	movhi	r2,33045
811303ac:	10b67304 	addi	r2,r2,-9780
811303b0:	1885883a 	add	r2,r3,r2
811303b4:	e0bffc15 	stw	r2,-16(fp)
811303b8:	e0bffc17 	ldw	r2,-16(fp)
811303bc:	10800017 	ldw	r2,0(r2)
811303c0:	1000091e 	bne	r2,zero,811303e8 <OSTmr_Link+0xec>
811303c4:	e0bffc17 	ldw	r2,-16(fp)
811303c8:	e0fffe17 	ldw	r3,-8(fp)
811303cc:	10c00015 	stw	r3,0(r2)
811303d0:	e0bffe17 	ldw	r2,-8(fp)
811303d4:	10000315 	stw	zero,12(r2)
811303d8:	e0bffc17 	ldw	r2,-16(fp)
811303dc:	00c00044 	movi	r3,1
811303e0:	10c0010d 	sth	r3,4(r2)
811303e4:	00001206 	br	81130430 <OSTmr_Link+0x134>
811303e8:	e0bffc17 	ldw	r2,-16(fp)
811303ec:	10800017 	ldw	r2,0(r2)
811303f0:	e0bffd15 	stw	r2,-12(fp)
811303f4:	e0bffc17 	ldw	r2,-16(fp)
811303f8:	e0fffe17 	ldw	r3,-8(fp)
811303fc:	10c00015 	stw	r3,0(r2)
81130400:	e0bffe17 	ldw	r2,-8(fp)
81130404:	e0fffd17 	ldw	r3,-12(fp)
81130408:	10c00315 	stw	r3,12(r2)
8113040c:	e0bffd17 	ldw	r2,-12(fp)
81130410:	e0fffe17 	ldw	r3,-8(fp)
81130414:	10c00415 	stw	r3,16(r2)
81130418:	e0bffc17 	ldw	r2,-16(fp)
8113041c:	1080010b 	ldhu	r2,4(r2)
81130420:	10800044 	addi	r2,r2,1
81130424:	1007883a 	mov	r3,r2
81130428:	e0bffc17 	ldw	r2,-16(fp)
8113042c:	10c0010d 	sth	r3,4(r2)
81130430:	e0bffe17 	ldw	r2,-8(fp)
81130434:	10000415 	stw	zero,16(r2)
81130438:	0001883a 	nop
8113043c:	e037883a 	mov	sp,fp
81130440:	df000017 	ldw	fp,0(sp)
81130444:	dec00104 	addi	sp,sp,4
81130448:	f800283a 	ret

8113044c <OSTmr_Unlink>:
8113044c:	defffa04 	addi	sp,sp,-24
81130450:	de00012e 	bgeu	sp,et,81130458 <OSTmr_Unlink+0xc>
81130454:	003b68fa 	trap	3
81130458:	df000515 	stw	fp,20(sp)
8113045c:	df000504 	addi	fp,sp,20
81130460:	e13fff15 	stw	r4,-4(fp)
81130464:	e0bfff17 	ldw	r2,-4(fp)
81130468:	10800517 	ldw	r2,20(r2)
8113046c:	1080004c 	andi	r2,r2,1
81130470:	e0bffb0d 	sth	r2,-20(fp)
81130474:	e0bffb0b 	ldhu	r2,-20(fp)
81130478:	100690fa 	slli	r3,r2,3
8113047c:	00a04574 	movhi	r2,33045
81130480:	10b67304 	addi	r2,r2,-9780
81130484:	1885883a 	add	r2,r3,r2
81130488:	e0bffc15 	stw	r2,-16(fp)
8113048c:	e0bffc17 	ldw	r2,-16(fp)
81130490:	10c00017 	ldw	r3,0(r2)
81130494:	e0bfff17 	ldw	r2,-4(fp)
81130498:	18800b1e 	bne	r3,r2,811304c8 <OSTmr_Unlink+0x7c>
8113049c:	e0bfff17 	ldw	r2,-4(fp)
811304a0:	10800317 	ldw	r2,12(r2)
811304a4:	e0bffd15 	stw	r2,-12(fp)
811304a8:	e0bffc17 	ldw	r2,-16(fp)
811304ac:	e0fffd17 	ldw	r3,-12(fp)
811304b0:	10c00015 	stw	r3,0(r2)
811304b4:	e0bffd17 	ldw	r2,-12(fp)
811304b8:	10001126 	beq	r2,zero,81130500 <OSTmr_Unlink+0xb4>
811304bc:	e0bffd17 	ldw	r2,-12(fp)
811304c0:	10000415 	stw	zero,16(r2)
811304c4:	00000e06 	br	81130500 <OSTmr_Unlink+0xb4>
811304c8:	e0bfff17 	ldw	r2,-4(fp)
811304cc:	10800417 	ldw	r2,16(r2)
811304d0:	e0bffd15 	stw	r2,-12(fp)
811304d4:	e0bfff17 	ldw	r2,-4(fp)
811304d8:	10800317 	ldw	r2,12(r2)
811304dc:	e0bffe15 	stw	r2,-8(fp)
811304e0:	e0bffd17 	ldw	r2,-12(fp)
811304e4:	e0fffe17 	ldw	r3,-8(fp)
811304e8:	10c00315 	stw	r3,12(r2)
811304ec:	e0bffe17 	ldw	r2,-8(fp)
811304f0:	10000326 	beq	r2,zero,81130500 <OSTmr_Unlink+0xb4>
811304f4:	e0bffe17 	ldw	r2,-8(fp)
811304f8:	e0fffd17 	ldw	r3,-12(fp)
811304fc:	10c00415 	stw	r3,16(r2)
81130500:	e0bfff17 	ldw	r2,-4(fp)
81130504:	00c00044 	movi	r3,1
81130508:	10c00c45 	stb	r3,49(r2)
8113050c:	e0bfff17 	ldw	r2,-4(fp)
81130510:	10000315 	stw	zero,12(r2)
81130514:	e0bfff17 	ldw	r2,-4(fp)
81130518:	10000415 	stw	zero,16(r2)
8113051c:	e0bffc17 	ldw	r2,-16(fp)
81130520:	1080010b 	ldhu	r2,4(r2)
81130524:	10bfffc4 	addi	r2,r2,-1
81130528:	1007883a 	mov	r3,r2
8113052c:	e0bffc17 	ldw	r2,-16(fp)
81130530:	10c0010d 	sth	r3,4(r2)
81130534:	0001883a 	nop
81130538:	e037883a 	mov	sp,fp
8113053c:	df000017 	ldw	fp,0(sp)
81130540:	dec00104 	addi	sp,sp,4
81130544:	f800283a 	ret

81130548 <OSTmr_Lock>:
81130548:	defffd04 	addi	sp,sp,-12
8113054c:	de00012e 	bgeu	sp,et,81130554 <OSTmr_Lock+0xc>
81130550:	003b68fa 	trap	3
81130554:	dfc00215 	stw	ra,8(sp)
81130558:	df000115 	stw	fp,4(sp)
8113055c:	df000104 	addi	fp,sp,4
81130560:	d0a08717 	ldw	r2,-32228(gp)
81130564:	e1bfff04 	addi	r6,fp,-4
81130568:	000b883a 	mov	r5,zero
8113056c:	1009883a 	mov	r4,r2
81130570:	112d1ec0 	call	8112d1ec <OSSemPend>
81130574:	0001883a 	nop
81130578:	e037883a 	mov	sp,fp
8113057c:	dfc00117 	ldw	ra,4(sp)
81130580:	df000017 	ldw	fp,0(sp)
81130584:	dec00204 	addi	sp,sp,8
81130588:	f800283a 	ret

8113058c <OSTmr_Unlock>:
8113058c:	defffe04 	addi	sp,sp,-8
81130590:	de00012e 	bgeu	sp,et,81130598 <OSTmr_Unlock+0xc>
81130594:	003b68fa 	trap	3
81130598:	dfc00115 	stw	ra,4(sp)
8113059c:	df000015 	stw	fp,0(sp)
811305a0:	d839883a 	mov	fp,sp
811305a4:	d0a08717 	ldw	r2,-32228(gp)
811305a8:	1009883a 	mov	r4,r2
811305ac:	112d5740 	call	8112d574 <OSSemPost>
811305b0:	0001883a 	nop
811305b4:	e037883a 	mov	sp,fp
811305b8:	dfc00117 	ldw	ra,4(sp)
811305bc:	df000017 	ldw	fp,0(sp)
811305c0:	dec00204 	addi	sp,sp,8
811305c4:	f800283a 	ret

811305c8 <OSTmr_Task>:
811305c8:	defff704 	addi	sp,sp,-36
811305cc:	de00012e 	bgeu	sp,et,811305d4 <OSTmr_Task+0xc>
811305d0:	003b68fa 	trap	3
811305d4:	dfc00815 	stw	ra,32(sp)
811305d8:	df000715 	stw	fp,28(sp)
811305dc:	df000704 	addi	fp,sp,28
811305e0:	e13fff15 	stw	r4,-4(fp)
811305e4:	d0a07217 	ldw	r2,-32312(gp)
811305e8:	e0fffe04 	addi	r3,fp,-8
811305ec:	180d883a 	mov	r6,r3
811305f0:	000b883a 	mov	r5,zero
811305f4:	1009883a 	mov	r4,r2
811305f8:	112d1ec0 	call	8112d1ec <OSSemPend>
811305fc:	11305480 	call	81130548 <OSTmr_Lock>
81130600:	d0a08517 	ldw	r2,-32236(gp)
81130604:	10800044 	addi	r2,r2,1
81130608:	d0a08515 	stw	r2,-32236(gp)
8113060c:	d0a08517 	ldw	r2,-32236(gp)
81130610:	1080004c 	andi	r2,r2,1
81130614:	e0bffa0d 	sth	r2,-24(fp)
81130618:	e0bffa0b 	ldhu	r2,-24(fp)
8113061c:	100690fa 	slli	r3,r2,3
81130620:	00a04574 	movhi	r2,33045
81130624:	10b67304 	addi	r2,r2,-9780
81130628:	1885883a 	add	r2,r3,r2
8113062c:	e0bffb15 	stw	r2,-20(fp)
81130630:	e0bffb17 	ldw	r2,-20(fp)
81130634:	10800017 	ldw	r2,0(r2)
81130638:	e0bff915 	stw	r2,-28(fp)
8113063c:	00002206 	br	811306c8 <OSTmr_Task+0x100>
81130640:	e0bff917 	ldw	r2,-28(fp)
81130644:	10800317 	ldw	r2,12(r2)
81130648:	e0bffc15 	stw	r2,-16(fp)
8113064c:	e0bff917 	ldw	r2,-28(fp)
81130650:	10c00517 	ldw	r3,20(r2)
81130654:	d0a08517 	ldw	r2,-32236(gp)
81130658:	1880191e 	bne	r3,r2,811306c0 <OSTmr_Task+0xf8>
8113065c:	e0bff917 	ldw	r2,-28(fp)
81130660:	10800117 	ldw	r2,4(r2)
81130664:	e0bffd15 	stw	r2,-12(fp)
81130668:	e0bffd17 	ldw	r2,-12(fp)
8113066c:	10000626 	beq	r2,zero,81130688 <OSTmr_Task+0xc0>
81130670:	e0bff917 	ldw	r2,-28(fp)
81130674:	10c00217 	ldw	r3,8(r2)
81130678:	e0bffd17 	ldw	r2,-12(fp)
8113067c:	180b883a 	mov	r5,r3
81130680:	e13ff917 	ldw	r4,-28(fp)
81130684:	103ee83a 	callr	r2
81130688:	e13ff917 	ldw	r4,-28(fp)
8113068c:	113044c0 	call	8113044c <OSTmr_Unlink>
81130690:	e0bff917 	ldw	r2,-28(fp)
81130694:	10800c03 	ldbu	r2,48(r2)
81130698:	10803fcc 	andi	r2,r2,255
8113069c:	10800098 	cmpnei	r2,r2,2
811306a0:	1000041e 	bne	r2,zero,811306b4 <OSTmr_Task+0xec>
811306a4:	01400044 	movi	r5,1
811306a8:	e13ff917 	ldw	r4,-28(fp)
811306ac:	11302fc0 	call	811302fc <OSTmr_Link>
811306b0:	00000306 	br	811306c0 <OSTmr_Task+0xf8>
811306b4:	e0bff917 	ldw	r2,-28(fp)
811306b8:	00c00084 	movi	r3,2
811306bc:	10c00c45 	stb	r3,49(r2)
811306c0:	e0bffc17 	ldw	r2,-16(fp)
811306c4:	e0bff915 	stw	r2,-28(fp)
811306c8:	e0bff917 	ldw	r2,-28(fp)
811306cc:	103fdc1e 	bne	r2,zero,81130640 <__reset+0xfb110640>
811306d0:	113058c0 	call	8113058c <OSTmr_Unlock>
811306d4:	003fc306 	br	811305e4 <__reset+0xfb1105e4>

811306d8 <alt_dev_reg>:
811306d8:	defffd04 	addi	sp,sp,-12
811306dc:	de00012e 	bgeu	sp,et,811306e4 <alt_dev_reg+0xc>
811306e0:	003b68fa 	trap	3
811306e4:	dfc00215 	stw	ra,8(sp)
811306e8:	df000115 	stw	fp,4(sp)
811306ec:	df000104 	addi	fp,sp,4
811306f0:	e13fff15 	stw	r4,-4(fp)
811306f4:	d1600d04 	addi	r5,gp,-32716
811306f8:	e13fff17 	ldw	r4,-4(fp)
811306fc:	11388e40 	call	811388e4 <alt_dev_llist_insert>
81130700:	e037883a 	mov	sp,fp
81130704:	dfc00117 	ldw	ra,4(sp)
81130708:	df000017 	ldw	fp,0(sp)
8113070c:	dec00204 	addi	sp,sp,8
81130710:	f800283a 	ret

81130714 <alt_irq_init>:
81130714:	defffd04 	addi	sp,sp,-12
81130718:	de00012e 	bgeu	sp,et,81130720 <alt_irq_init+0xc>
8113071c:	003b68fa 	trap	3
81130720:	dfc00215 	stw	ra,8(sp)
81130724:	df000115 	stw	fp,4(sp)
81130728:	df000104 	addi	fp,sp,4
8113072c:	e13fff15 	stw	r4,-4(fp)
81130730:	113937c0 	call	8113937c <altera_nios2_gen2_irq_init>
81130734:	00800044 	movi	r2,1
81130738:	1001703a 	wrctl	status,r2
8113073c:	0001883a 	nop
81130740:	e037883a 	mov	sp,fp
81130744:	dfc00117 	ldw	ra,4(sp)
81130748:	df000017 	ldw	fp,0(sp)
8113074c:	dec00204 	addi	sp,sp,8
81130750:	f800283a 	ret

81130754 <alt_sys_init>:
81130754:	defffe04 	addi	sp,sp,-8
81130758:	de00012e 	bgeu	sp,et,81130760 <alt_sys_init+0xc>
8113075c:	003b68fa 	trap	3
81130760:	dfc00115 	stw	ra,4(sp)
81130764:	df000015 	stw	fp,0(sp)
81130768:	d839883a 	mov	fp,sp
8113076c:	01c0fa04 	movi	r7,1000
81130770:	01800304 	movi	r6,12
81130774:	000b883a 	mov	r5,zero
81130778:	01200034 	movhi	r4,32768
8113077c:	21022004 	addi	r4,r4,2176
81130780:	1135a180 	call	81135a18 <alt_avalon_timer_sc_init>
81130784:	018002c4 	movi	r6,11
81130788:	000b883a 	mov	r5,zero
8113078c:	01204534 	movhi	r4,33044
81130790:	2135a004 	addi	r4,r4,-10624
81130794:	1134d980 	call	81134d98 <altera_avalon_jtag_uart_init>
81130798:	01204534 	movhi	r4,33044
8113079c:	21359604 	addi	r4,r4,-10664
811307a0:	11306d80 	call	811306d8 <alt_dev_reg>
811307a4:	0001883a 	nop
811307a8:	018003c4 	movi	r6,15
811307ac:	000b883a 	mov	r5,zero
811307b0:	01204534 	movhi	r4,33044
811307b4:	2139bb04 	addi	r4,r4,-6420
811307b8:	1135bc40 	call	81135bc4 <altera_avalon_uart_init>
811307bc:	01204534 	movhi	r4,33044
811307c0:	2139b104 	addi	r4,r4,-6460
811307c4:	11306d80 	call	811306d8 <alt_dev_reg>
811307c8:	00a04534 	movhi	r2,33044
811307cc:	10b9e504 	addi	r2,r2,-6252
811307d0:	10c00717 	ldw	r3,28(r2)
811307d4:	00a04534 	movhi	r2,33044
811307d8:	10b9e504 	addi	r2,r2,-6252
811307dc:	10800817 	ldw	r2,32(r2)
811307e0:	100d883a 	mov	r6,r2
811307e4:	180b883a 	mov	r5,r3
811307e8:	01204534 	movhi	r4,33044
811307ec:	2139e504 	addi	r4,r4,-6252
811307f0:	113844c0 	call	8113844c <alt_msgdma_init>
811307f4:	00a04534 	movhi	r2,33044
811307f8:	10b9fe04 	addi	r2,r2,-6152
811307fc:	10c00717 	ldw	r3,28(r2)
81130800:	00a04534 	movhi	r2,33044
81130804:	10b9fe04 	addi	r2,r2,-6152
81130808:	10800817 	ldw	r2,32(r2)
8113080c:	100d883a 	mov	r6,r2
81130810:	180b883a 	mov	r5,r3
81130814:	01204534 	movhi	r4,33044
81130818:	2139fe04 	addi	r4,r4,-6152
8113081c:	113844c0 	call	8113844c <alt_msgdma_init>
81130820:	01204534 	movhi	r4,33044
81130824:	213a1704 	addi	r4,r4,-6052
81130828:	11306d80 	call	811306d8 <alt_dev_reg>
8113082c:	0001883a 	nop
81130830:	e037883a 	mov	sp,fp
81130834:	dfc00117 	ldw	ra,4(sp)
81130838:	df000017 	ldw	fp,0(sp)
8113083c:	dec00204 	addi	sp,sp,8
81130840:	f800283a 	ret

81130844 <Write_Sector_Data>:
81130844:	defffa04 	addi	sp,sp,-24
81130848:	de00012e 	bgeu	sp,et,81130850 <Write_Sector_Data+0xc>
8113084c:	003b68fa 	trap	3
81130850:	dfc00515 	stw	ra,20(sp)
81130854:	df000415 	stw	fp,16(sp)
81130858:	df000404 	addi	fp,sp,16
8113085c:	e13ffe15 	stw	r4,-8(fp)
81130860:	e17fff15 	stw	r5,-4(fp)
81130864:	e03ffc15 	stw	zero,-16(fp)
81130868:	113362c0 	call	8113362c <alt_up_sd_card_is_Present>
8113086c:	10001e26 	beq	r2,zero,811308e8 <Write_Sector_Data+0xa4>
81130870:	00803fc4 	movi	r2,255
81130874:	e0bffd0d 	sth	r2,-12(fp)
81130878:	d0a09117 	ldw	r2,-32188(gp)
8113087c:	e13ffe17 	ldw	r4,-8(fp)
81130880:	e0ffff17 	ldw	r3,-4(fp)
81130884:	20c7883a 	add	r3,r4,r3
81130888:	1806927a 	slli	r3,r3,9
8113088c:	10c00035 	stwio	r3,0(r2)
81130890:	d0a09017 	ldw	r2,-32192(gp)
81130894:	00c00604 	movi	r3,24
81130898:	10c0002d 	sthio	r3,0(r2)
8113089c:	d0a08d17 	ldw	r2,-32204(gp)
811308a0:	1080002b 	ldhuio	r2,0(r2)
811308a4:	10bfffcc 	andi	r2,r2,65535
811308a8:	e0bffd0d 	sth	r2,-12(fp)
811308ac:	e0bffd0b 	ldhu	r2,-12(fp)
811308b0:	10bfffcc 	andi	r2,r2,65535
811308b4:	1080010c 	andi	r2,r2,4
811308b8:	103ff81e 	bne	r2,zero,8113089c <__reset+0xfb11089c>
811308bc:	e0bffd0b 	ldhu	r2,-12(fp)
811308c0:	10bfffcc 	andi	r2,r2,65535
811308c4:	1080040c 	andi	r2,r2,16
811308c8:	1000071e 	bne	r2,zero,811308e8 <Write_Sector_Data+0xa4>
811308cc:	00800044 	movi	r2,1
811308d0:	e0bffc15 	stw	r2,-16(fp)
811308d4:	d0209615 	stw	zero,-32168(gp)
811308d8:	e0fffe17 	ldw	r3,-8(fp)
811308dc:	e0bfff17 	ldw	r2,-4(fp)
811308e0:	1885883a 	add	r2,r3,r2
811308e4:	d0a09715 	stw	r2,-32164(gp)
811308e8:	e0bffc17 	ldw	r2,-16(fp)
811308ec:	e037883a 	mov	sp,fp
811308f0:	dfc00117 	ldw	ra,4(sp)
811308f4:	df000017 	ldw	fp,0(sp)
811308f8:	dec00204 	addi	sp,sp,8
811308fc:	f800283a 	ret

81130900 <Save_Modified_Sector>:
81130900:	defffd04 	addi	sp,sp,-12
81130904:	de00012e 	bgeu	sp,et,8113090c <Save_Modified_Sector+0xc>
81130908:	003b68fa 	trap	3
8113090c:	dfc00215 	stw	ra,8(sp)
81130910:	df000115 	stw	fp,4(sp)
81130914:	df000104 	addi	fp,sp,4
81130918:	00800044 	movi	r2,1
8113091c:	e0bfff15 	stw	r2,-4(fp)
81130920:	d0a09617 	ldw	r2,-32168(gp)
81130924:	10000526 	beq	r2,zero,8113093c <Save_Modified_Sector+0x3c>
81130928:	d0a09717 	ldw	r2,-32164(gp)
8113092c:	000b883a 	mov	r5,zero
81130930:	1009883a 	mov	r4,r2
81130934:	11308440 	call	81130844 <Write_Sector_Data>
81130938:	e0bfff15 	stw	r2,-4(fp)
8113093c:	e0bfff17 	ldw	r2,-4(fp)
81130940:	e037883a 	mov	sp,fp
81130944:	dfc00117 	ldw	ra,4(sp)
81130948:	df000017 	ldw	fp,0(sp)
8113094c:	dec00204 	addi	sp,sp,8
81130950:	f800283a 	ret

81130954 <Read_Sector_Data>:
81130954:	defffa04 	addi	sp,sp,-24
81130958:	de00012e 	bgeu	sp,et,81130960 <Read_Sector_Data+0xc>
8113095c:	003b68fa 	trap	3
81130960:	dfc00515 	stw	ra,20(sp)
81130964:	df000415 	stw	fp,16(sp)
81130968:	df000404 	addi	fp,sp,16
8113096c:	e13ffe15 	stw	r4,-8(fp)
81130970:	e17fff15 	stw	r5,-4(fp)
81130974:	e03ffc15 	stw	zero,-16(fp)
81130978:	113362c0 	call	8113362c <alt_up_sd_card_is_Present>
8113097c:	10002726 	beq	r2,zero,81130a1c <Read_Sector_Data+0xc8>
81130980:	00803fc4 	movi	r2,255
81130984:	e0bffd0d 	sth	r2,-12(fp)
81130988:	d0a09617 	ldw	r2,-32168(gp)
8113098c:	10000726 	beq	r2,zero,811309ac <Read_Sector_Data+0x58>
81130990:	d0a09717 	ldw	r2,-32164(gp)
81130994:	000b883a 	mov	r5,zero
81130998:	1009883a 	mov	r4,r2
8113099c:	11308440 	call	81130844 <Write_Sector_Data>
811309a0:	1000021e 	bne	r2,zero,811309ac <Read_Sector_Data+0x58>
811309a4:	0005883a 	mov	r2,zero
811309a8:	00001d06 	br	81130a20 <Read_Sector_Data+0xcc>
811309ac:	d0a09117 	ldw	r2,-32188(gp)
811309b0:	e13ffe17 	ldw	r4,-8(fp)
811309b4:	e0ffff17 	ldw	r3,-4(fp)
811309b8:	20c7883a 	add	r3,r4,r3
811309bc:	1806927a 	slli	r3,r3,9
811309c0:	10c00035 	stwio	r3,0(r2)
811309c4:	d0a09017 	ldw	r2,-32192(gp)
811309c8:	00c00444 	movi	r3,17
811309cc:	10c0002d 	sthio	r3,0(r2)
811309d0:	d0a08d17 	ldw	r2,-32204(gp)
811309d4:	1080002b 	ldhuio	r2,0(r2)
811309d8:	10bfffcc 	andi	r2,r2,65535
811309dc:	e0bffd0d 	sth	r2,-12(fp)
811309e0:	e0bffd0b 	ldhu	r2,-12(fp)
811309e4:	10bfffcc 	andi	r2,r2,65535
811309e8:	1080010c 	andi	r2,r2,4
811309ec:	103ff81e 	bne	r2,zero,811309d0 <__reset+0xfb1109d0>
811309f0:	e0bffd0b 	ldhu	r2,-12(fp)
811309f4:	10bfffcc 	andi	r2,r2,65535
811309f8:	1080040c 	andi	r2,r2,16
811309fc:	1000071e 	bne	r2,zero,81130a1c <Read_Sector_Data+0xc8>
81130a00:	00800044 	movi	r2,1
81130a04:	e0bffc15 	stw	r2,-16(fp)
81130a08:	d0209615 	stw	zero,-32168(gp)
81130a0c:	e0fffe17 	ldw	r3,-8(fp)
81130a10:	e0bfff17 	ldw	r2,-4(fp)
81130a14:	1885883a 	add	r2,r3,r2
81130a18:	d0a09715 	stw	r2,-32164(gp)
81130a1c:	e0bffc17 	ldw	r2,-16(fp)
81130a20:	e037883a 	mov	sp,fp
81130a24:	dfc00117 	ldw	ra,4(sp)
81130a28:	df000017 	ldw	fp,0(sp)
81130a2c:	dec00204 	addi	sp,sp,8
81130a30:	f800283a 	ret

81130a34 <get_cluster_flag>:
81130a34:	defffb04 	addi	sp,sp,-20
81130a38:	de00012e 	bgeu	sp,et,81130a40 <get_cluster_flag+0xc>
81130a3c:	003b68fa 	trap	3
81130a40:	dfc00415 	stw	ra,16(sp)
81130a44:	df000315 	stw	fp,12(sp)
81130a48:	df000304 	addi	fp,sp,12
81130a4c:	e13ffe15 	stw	r4,-8(fp)
81130a50:	e17fff15 	stw	r5,-4(fp)
81130a54:	e0bffe17 	ldw	r2,-8(fp)
81130a58:	1004d23a 	srli	r2,r2,8
81130a5c:	d0e09317 	ldw	r3,-32180(gp)
81130a60:	10c5883a 	add	r2,r2,r3
81130a64:	e0bffd15 	stw	r2,-12(fp)
81130a68:	00a04574 	movhi	r2,33045
81130a6c:	10880f04 	addi	r2,r2,8252
81130a70:	10801117 	ldw	r2,68(r2)
81130a74:	e0fffd17 	ldw	r3,-12(fp)
81130a78:	1885883a 	add	r2,r3,r2
81130a7c:	e0bffd15 	stw	r2,-12(fp)
81130a80:	d0a09717 	ldw	r2,-32164(gp)
81130a84:	e0fffd17 	ldw	r3,-12(fp)
81130a88:	18800726 	beq	r3,r2,81130aa8 <get_cluster_flag+0x74>
81130a8c:	e0bffd17 	ldw	r2,-12(fp)
81130a90:	000b883a 	mov	r5,zero
81130a94:	1009883a 	mov	r4,r2
81130a98:	11309540 	call	81130954 <Read_Sector_Data>
81130a9c:	1000021e 	bne	r2,zero,81130aa8 <get_cluster_flag+0x74>
81130aa0:	0005883a 	mov	r2,zero
81130aa4:	00000d06 	br	81130adc <get_cluster_flag+0xa8>
81130aa8:	e0bffe17 	ldw	r2,-8(fp)
81130aac:	10803fcc 	andi	r2,r2,255
81130ab0:	1085883a 	add	r2,r2,r2
81130ab4:	1007883a 	mov	r3,r2
81130ab8:	d0a09517 	ldw	r2,-32172(gp)
81130abc:	10800a17 	ldw	r2,40(r2)
81130ac0:	1885883a 	add	r2,r3,r2
81130ac4:	1080002b 	ldhuio	r2,0(r2)
81130ac8:	10bfffcc 	andi	r2,r2,65535
81130acc:	1007883a 	mov	r3,r2
81130ad0:	e0bfff17 	ldw	r2,-4(fp)
81130ad4:	10c0000d 	sth	r3,0(r2)
81130ad8:	00800044 	movi	r2,1
81130adc:	e037883a 	mov	sp,fp
81130ae0:	dfc00117 	ldw	ra,4(sp)
81130ae4:	df000017 	ldw	fp,0(sp)
81130ae8:	dec00204 	addi	sp,sp,8
81130aec:	f800283a 	ret

81130af0 <mark_cluster>:
81130af0:	defffa04 	addi	sp,sp,-24
81130af4:	de00012e 	bgeu	sp,et,81130afc <mark_cluster+0xc>
81130af8:	003b68fa 	trap	3
81130afc:	dfc00515 	stw	ra,20(sp)
81130b00:	df000415 	stw	fp,16(sp)
81130b04:	df000404 	addi	fp,sp,16
81130b08:	e13ffd15 	stw	r4,-12(fp)
81130b0c:	2805883a 	mov	r2,r5
81130b10:	e1bfff15 	stw	r6,-4(fp)
81130b14:	e0bffe0d 	sth	r2,-8(fp)
81130b18:	e0bffd17 	ldw	r2,-12(fp)
81130b1c:	1004d23a 	srli	r2,r2,8
81130b20:	d0e09317 	ldw	r3,-32180(gp)
81130b24:	10c5883a 	add	r2,r2,r3
81130b28:	e0bffc15 	stw	r2,-16(fp)
81130b2c:	e0bfff17 	ldw	r2,-4(fp)
81130b30:	10000726 	beq	r2,zero,81130b50 <mark_cluster+0x60>
81130b34:	00a04574 	movhi	r2,33045
81130b38:	10880f04 	addi	r2,r2,8252
81130b3c:	10801117 	ldw	r2,68(r2)
81130b40:	e0fffc17 	ldw	r3,-16(fp)
81130b44:	1885883a 	add	r2,r3,r2
81130b48:	e0bffc15 	stw	r2,-16(fp)
81130b4c:	00000606 	br	81130b68 <mark_cluster+0x78>
81130b50:	00a04574 	movhi	r2,33045
81130b54:	10880f04 	addi	r2,r2,8252
81130b58:	10801217 	ldw	r2,72(r2)
81130b5c:	e0fffc17 	ldw	r3,-16(fp)
81130b60:	1885883a 	add	r2,r3,r2
81130b64:	e0bffc15 	stw	r2,-16(fp)
81130b68:	d0a09717 	ldw	r2,-32164(gp)
81130b6c:	e0fffc17 	ldw	r3,-16(fp)
81130b70:	18800726 	beq	r3,r2,81130b90 <mark_cluster+0xa0>
81130b74:	e0bffc17 	ldw	r2,-16(fp)
81130b78:	000b883a 	mov	r5,zero
81130b7c:	1009883a 	mov	r4,r2
81130b80:	11309540 	call	81130954 <Read_Sector_Data>
81130b84:	1000021e 	bne	r2,zero,81130b90 <mark_cluster+0xa0>
81130b88:	0005883a 	mov	r2,zero
81130b8c:	00000d06 	br	81130bc4 <mark_cluster+0xd4>
81130b90:	e0bffd17 	ldw	r2,-12(fp)
81130b94:	10803fcc 	andi	r2,r2,255
81130b98:	1085883a 	add	r2,r2,r2
81130b9c:	1007883a 	mov	r3,r2
81130ba0:	d0a09517 	ldw	r2,-32172(gp)
81130ba4:	10800a17 	ldw	r2,40(r2)
81130ba8:	1885883a 	add	r2,r3,r2
81130bac:	1007883a 	mov	r3,r2
81130bb0:	e0bffe0f 	ldh	r2,-8(fp)
81130bb4:	1880002d 	sthio	r2,0(r3)
81130bb8:	00800044 	movi	r2,1
81130bbc:	d0a09615 	stw	r2,-32168(gp)
81130bc0:	00800044 	movi	r2,1
81130bc4:	e037883a 	mov	sp,fp
81130bc8:	dfc00117 	ldw	ra,4(sp)
81130bcc:	df000017 	ldw	fp,0(sp)
81130bd0:	dec00204 	addi	sp,sp,8
81130bd4:	f800283a 	ret

81130bd8 <Check_for_Master_Boot_Record>:
81130bd8:	defff704 	addi	sp,sp,-36
81130bdc:	de00012e 	bgeu	sp,et,81130be4 <Check_for_Master_Boot_Record+0xc>
81130be0:	003b68fa 	trap	3
81130be4:	dfc00815 	stw	ra,32(sp)
81130be8:	df000715 	stw	fp,28(sp)
81130bec:	df000704 	addi	fp,sp,28
81130bf0:	e03ff915 	stw	zero,-28(fp)
81130bf4:	000b883a 	mov	r5,zero
81130bf8:	0009883a 	mov	r4,zero
81130bfc:	11309540 	call	81130954 <Read_Sector_Data>
81130c00:	10005a26 	beq	r2,zero,81130d6c <Check_for_Master_Boot_Record+0x194>
81130c04:	d0a09517 	ldw	r2,-32172(gp)
81130c08:	10800a17 	ldw	r2,40(r2)
81130c0c:	10807f84 	addi	r2,r2,510
81130c10:	1080002b 	ldhuio	r2,0(r2)
81130c14:	10bfffcc 	andi	r2,r2,65535
81130c18:	10bfffcc 	andi	r2,r2,65535
81130c1c:	10a0001c 	xori	r2,r2,32768
81130c20:	10a00004 	addi	r2,r2,-32768
81130c24:	e0bffb15 	stw	r2,-20(fp)
81130c28:	e0bffb17 	ldw	r2,-20(fp)
81130c2c:	10ffffcc 	andi	r3,r2,65535
81130c30:	00aa9554 	movui	r2,43605
81130c34:	18804d1e 	bne	r3,r2,81130d6c <Check_for_Master_Boot_Record+0x194>
81130c38:	e03ffa15 	stw	zero,-24(fp)
81130c3c:	00004806 	br	81130d60 <Check_for_Master_Boot_Record+0x188>
81130c40:	e0bffa17 	ldw	r2,-24(fp)
81130c44:	1004913a 	slli	r2,r2,4
81130c48:	10806f84 	addi	r2,r2,446
81130c4c:	e0bffc15 	stw	r2,-16(fp)
81130c50:	d0a09517 	ldw	r2,-32172(gp)
81130c54:	10c00a17 	ldw	r3,40(r2)
81130c58:	e0bffc17 	ldw	r2,-16(fp)
81130c5c:	1885883a 	add	r2,r3,r2
81130c60:	10800104 	addi	r2,r2,4
81130c64:	10800023 	ldbuio	r2,0(r2)
81130c68:	10803fcc 	andi	r2,r2,255
81130c6c:	e0bffd05 	stb	r2,-12(fp)
81130c70:	e0bffd07 	ldb	r2,-12(fp)
81130c74:	10800060 	cmpeqi	r2,r2,1
81130c78:	1000091e 	bne	r2,zero,81130ca0 <Check_for_Master_Boot_Record+0xc8>
81130c7c:	e0bffd07 	ldb	r2,-12(fp)
81130c80:	10800120 	cmpeqi	r2,r2,4
81130c84:	1000061e 	bne	r2,zero,81130ca0 <Check_for_Master_Boot_Record+0xc8>
81130c88:	e0bffd07 	ldb	r2,-12(fp)
81130c8c:	108001a0 	cmpeqi	r2,r2,6
81130c90:	1000031e 	bne	r2,zero,81130ca0 <Check_for_Master_Boot_Record+0xc8>
81130c94:	e0bffd07 	ldb	r2,-12(fp)
81130c98:	10800398 	cmpnei	r2,r2,14
81130c9c:	10002d1e 	bne	r2,zero,81130d54 <Check_for_Master_Boot_Record+0x17c>
81130ca0:	d0a09517 	ldw	r2,-32172(gp)
81130ca4:	10c00a17 	ldw	r3,40(r2)
81130ca8:	e0bffc17 	ldw	r2,-16(fp)
81130cac:	1885883a 	add	r2,r3,r2
81130cb0:	10800284 	addi	r2,r2,10
81130cb4:	1080002b 	ldhuio	r2,0(r2)
81130cb8:	10bfffcc 	andi	r2,r2,65535
81130cbc:	1006943a 	slli	r3,r2,16
81130cc0:	d0a09517 	ldw	r2,-32172(gp)
81130cc4:	11000a17 	ldw	r4,40(r2)
81130cc8:	e0bffc17 	ldw	r2,-16(fp)
81130ccc:	2085883a 	add	r2,r4,r2
81130cd0:	10800204 	addi	r2,r2,8
81130cd4:	1080002b 	ldhuio	r2,0(r2)
81130cd8:	10bfffcc 	andi	r2,r2,65535
81130cdc:	10bfffcc 	andi	r2,r2,65535
81130ce0:	1884b03a 	or	r2,r3,r2
81130ce4:	e0bffe15 	stw	r2,-8(fp)
81130ce8:	d0a09517 	ldw	r2,-32172(gp)
81130cec:	10c00a17 	ldw	r3,40(r2)
81130cf0:	e0bffc17 	ldw	r2,-16(fp)
81130cf4:	1885883a 	add	r2,r3,r2
81130cf8:	10800384 	addi	r2,r2,14
81130cfc:	1080002b 	ldhuio	r2,0(r2)
81130d00:	10bfffcc 	andi	r2,r2,65535
81130d04:	1006943a 	slli	r3,r2,16
81130d08:	d0a09517 	ldw	r2,-32172(gp)
81130d0c:	11000a17 	ldw	r4,40(r2)
81130d10:	e0bffc17 	ldw	r2,-16(fp)
81130d14:	2085883a 	add	r2,r4,r2
81130d18:	10800304 	addi	r2,r2,12
81130d1c:	1080002b 	ldhuio	r2,0(r2)
81130d20:	10bfffcc 	andi	r2,r2,65535
81130d24:	10bfffcc 	andi	r2,r2,65535
81130d28:	1884b03a 	or	r2,r3,r2
81130d2c:	e0bfff15 	stw	r2,-4(fp)
81130d30:	e0bfff17 	ldw	r2,-4(fp)
81130d34:	0080070e 	bge	zero,r2,81130d54 <Check_for_Master_Boot_Record+0x17c>
81130d38:	00800044 	movi	r2,1
81130d3c:	e0bff915 	stw	r2,-28(fp)
81130d40:	e0bfff17 	ldw	r2,-4(fp)
81130d44:	d0a09415 	stw	r2,-32176(gp)
81130d48:	e0bffe17 	ldw	r2,-8(fp)
81130d4c:	d0a09315 	stw	r2,-32180(gp)
81130d50:	00000606 	br	81130d6c <Check_for_Master_Boot_Record+0x194>
81130d54:	e0bffa17 	ldw	r2,-24(fp)
81130d58:	10800044 	addi	r2,r2,1
81130d5c:	e0bffa15 	stw	r2,-24(fp)
81130d60:	e0bffa17 	ldw	r2,-24(fp)
81130d64:	10800110 	cmplti	r2,r2,4
81130d68:	103fb51e 	bne	r2,zero,81130c40 <__reset+0xfb110c40>
81130d6c:	e0bff917 	ldw	r2,-28(fp)
81130d70:	e037883a 	mov	sp,fp
81130d74:	dfc00117 	ldw	ra,4(sp)
81130d78:	df000017 	ldw	fp,0(sp)
81130d7c:	dec00204 	addi	sp,sp,8
81130d80:	f800283a 	ret

81130d84 <Read_File_Record_At_Offset>:
81130d84:	defff804 	addi	sp,sp,-32
81130d88:	de00012e 	bgeu	sp,et,81130d90 <Read_File_Record_At_Offset+0xc>
81130d8c:	003b68fa 	trap	3
81130d90:	dfc00715 	stw	ra,28(sp)
81130d94:	df000615 	stw	fp,24(sp)
81130d98:	df000604 	addi	fp,sp,24
81130d9c:	e13ffc15 	stw	r4,-16(fp)
81130da0:	e17ffd15 	stw	r5,-12(fp)
81130da4:	e1bffe15 	stw	r6,-8(fp)
81130da8:	e1ffff15 	stw	r7,-4(fp)
81130dac:	e03ffa15 	stw	zero,-24(fp)
81130db0:	e0bffc17 	ldw	r2,-16(fp)
81130db4:	108007cc 	andi	r2,r2,31
81130db8:	10008d1e 	bne	r2,zero,81130ff0 <Read_File_Record_At_Offset+0x26c>
81130dbc:	113362c0 	call	8113362c <alt_up_sd_card_is_Present>
81130dc0:	10008b26 	beq	r2,zero,81130ff0 <Read_File_Record_At_Offset+0x26c>
81130dc4:	d0a08c17 	ldw	r2,-32208(gp)
81130dc8:	10008926 	beq	r2,zero,81130ff0 <Read_File_Record_At_Offset+0x26c>
81130dcc:	e03ffb15 	stw	zero,-20(fp)
81130dd0:	00001106 	br	81130e18 <Read_File_Record_At_Offset+0x94>
81130dd4:	e0fffc17 	ldw	r3,-16(fp)
81130dd8:	e0bffb17 	ldw	r2,-20(fp)
81130ddc:	1885883a 	add	r2,r3,r2
81130de0:	1007883a 	mov	r3,r2
81130de4:	d0a09517 	ldw	r2,-32172(gp)
81130de8:	10800a17 	ldw	r2,40(r2)
81130dec:	1885883a 	add	r2,r3,r2
81130df0:	10800023 	ldbuio	r2,0(r2)
81130df4:	10803fcc 	andi	r2,r2,255
81130df8:	1009883a 	mov	r4,r2
81130dfc:	e0fffd17 	ldw	r3,-12(fp)
81130e00:	e0bffb17 	ldw	r2,-20(fp)
81130e04:	1885883a 	add	r2,r3,r2
81130e08:	11000005 	stb	r4,0(r2)
81130e0c:	e0bffb17 	ldw	r2,-20(fp)
81130e10:	10800044 	addi	r2,r2,1
81130e14:	e0bffb15 	stw	r2,-20(fp)
81130e18:	e0bffb17 	ldw	r2,-20(fp)
81130e1c:	10800210 	cmplti	r2,r2,8
81130e20:	103fec1e 	bne	r2,zero,81130dd4 <__reset+0xfb110dd4>
81130e24:	e03ffb15 	stw	zero,-20(fp)
81130e28:	00001306 	br	81130e78 <Read_File_Record_At_Offset+0xf4>
81130e2c:	e0fffc17 	ldw	r3,-16(fp)
81130e30:	e0bffb17 	ldw	r2,-20(fp)
81130e34:	1885883a 	add	r2,r3,r2
81130e38:	1007883a 	mov	r3,r2
81130e3c:	d0a09517 	ldw	r2,-32172(gp)
81130e40:	10800a17 	ldw	r2,40(r2)
81130e44:	1885883a 	add	r2,r3,r2
81130e48:	10800204 	addi	r2,r2,8
81130e4c:	10800023 	ldbuio	r2,0(r2)
81130e50:	10803fcc 	andi	r2,r2,255
81130e54:	1009883a 	mov	r4,r2
81130e58:	e0fffd17 	ldw	r3,-12(fp)
81130e5c:	e0bffb17 	ldw	r2,-20(fp)
81130e60:	1885883a 	add	r2,r3,r2
81130e64:	10800204 	addi	r2,r2,8
81130e68:	11000005 	stb	r4,0(r2)
81130e6c:	e0bffb17 	ldw	r2,-20(fp)
81130e70:	10800044 	addi	r2,r2,1
81130e74:	e0bffb15 	stw	r2,-20(fp)
81130e78:	e0bffb17 	ldw	r2,-20(fp)
81130e7c:	108000d0 	cmplti	r2,r2,3
81130e80:	103fea1e 	bne	r2,zero,81130e2c <__reset+0xfb110e2c>
81130e84:	d0a09517 	ldw	r2,-32172(gp)
81130e88:	10c00a17 	ldw	r3,40(r2)
81130e8c:	e0bffc17 	ldw	r2,-16(fp)
81130e90:	1885883a 	add	r2,r3,r2
81130e94:	108002c4 	addi	r2,r2,11
81130e98:	10800023 	ldbuio	r2,0(r2)
81130e9c:	10803fcc 	andi	r2,r2,255
81130ea0:	1007883a 	mov	r3,r2
81130ea4:	e0bffd17 	ldw	r2,-12(fp)
81130ea8:	10c002c5 	stb	r3,11(r2)
81130eac:	d0a09517 	ldw	r2,-32172(gp)
81130eb0:	10c00a17 	ldw	r3,40(r2)
81130eb4:	e0bffc17 	ldw	r2,-16(fp)
81130eb8:	1885883a 	add	r2,r3,r2
81130ebc:	10800384 	addi	r2,r2,14
81130ec0:	1080002b 	ldhuio	r2,0(r2)
81130ec4:	10bfffcc 	andi	r2,r2,65535
81130ec8:	1007883a 	mov	r3,r2
81130ecc:	e0bffd17 	ldw	r2,-12(fp)
81130ed0:	10c0030d 	sth	r3,12(r2)
81130ed4:	d0a09517 	ldw	r2,-32172(gp)
81130ed8:	10c00a17 	ldw	r3,40(r2)
81130edc:	e0bffc17 	ldw	r2,-16(fp)
81130ee0:	1885883a 	add	r2,r3,r2
81130ee4:	10800404 	addi	r2,r2,16
81130ee8:	1080002b 	ldhuio	r2,0(r2)
81130eec:	10bfffcc 	andi	r2,r2,65535
81130ef0:	1007883a 	mov	r3,r2
81130ef4:	e0bffd17 	ldw	r2,-12(fp)
81130ef8:	10c0038d 	sth	r3,14(r2)
81130efc:	d0a09517 	ldw	r2,-32172(gp)
81130f00:	10c00a17 	ldw	r3,40(r2)
81130f04:	e0bffc17 	ldw	r2,-16(fp)
81130f08:	1885883a 	add	r2,r3,r2
81130f0c:	10800484 	addi	r2,r2,18
81130f10:	1080002b 	ldhuio	r2,0(r2)
81130f14:	10bfffcc 	andi	r2,r2,65535
81130f18:	1007883a 	mov	r3,r2
81130f1c:	e0bffd17 	ldw	r2,-12(fp)
81130f20:	10c0040d 	sth	r3,16(r2)
81130f24:	d0a09517 	ldw	r2,-32172(gp)
81130f28:	10c00a17 	ldw	r3,40(r2)
81130f2c:	e0bffc17 	ldw	r2,-16(fp)
81130f30:	1885883a 	add	r2,r3,r2
81130f34:	10800584 	addi	r2,r2,22
81130f38:	1080002b 	ldhuio	r2,0(r2)
81130f3c:	10bfffcc 	andi	r2,r2,65535
81130f40:	1007883a 	mov	r3,r2
81130f44:	e0bffd17 	ldw	r2,-12(fp)
81130f48:	10c0048d 	sth	r3,18(r2)
81130f4c:	d0a09517 	ldw	r2,-32172(gp)
81130f50:	10c00a17 	ldw	r3,40(r2)
81130f54:	e0bffc17 	ldw	r2,-16(fp)
81130f58:	1885883a 	add	r2,r3,r2
81130f5c:	10800604 	addi	r2,r2,24
81130f60:	1080002b 	ldhuio	r2,0(r2)
81130f64:	10bfffcc 	andi	r2,r2,65535
81130f68:	1007883a 	mov	r3,r2
81130f6c:	e0bffd17 	ldw	r2,-12(fp)
81130f70:	10c0050d 	sth	r3,20(r2)
81130f74:	d0a09517 	ldw	r2,-32172(gp)
81130f78:	10c00a17 	ldw	r3,40(r2)
81130f7c:	e0bffc17 	ldw	r2,-16(fp)
81130f80:	1885883a 	add	r2,r3,r2
81130f84:	10800684 	addi	r2,r2,26
81130f88:	1080002b 	ldhuio	r2,0(r2)
81130f8c:	10bfffcc 	andi	r2,r2,65535
81130f90:	1007883a 	mov	r3,r2
81130f94:	e0bffd17 	ldw	r2,-12(fp)
81130f98:	10c0058d 	sth	r3,22(r2)
81130f9c:	d0a09517 	ldw	r2,-32172(gp)
81130fa0:	10c00a17 	ldw	r3,40(r2)
81130fa4:	e0bffc17 	ldw	r2,-16(fp)
81130fa8:	1885883a 	add	r2,r3,r2
81130fac:	10800704 	addi	r2,r2,28
81130fb0:	10800037 	ldwio	r2,0(r2)
81130fb4:	1007883a 	mov	r3,r2
81130fb8:	e0bffd17 	ldw	r2,-12(fp)
81130fbc:	10c00615 	stw	r3,24(r2)
81130fc0:	e0bffd17 	ldw	r2,-12(fp)
81130fc4:	e0fffe17 	ldw	r3,-8(fp)
81130fc8:	10c00a15 	stw	r3,40(r2)
81130fcc:	e0bffd17 	ldw	r2,-12(fp)
81130fd0:	e0ffff17 	ldw	r3,-4(fp)
81130fd4:	10c00b15 	stw	r3,44(r2)
81130fd8:	e0bffc17 	ldw	r2,-16(fp)
81130fdc:	1007883a 	mov	r3,r2
81130fe0:	e0bffd17 	ldw	r2,-12(fp)
81130fe4:	10c00c0d 	sth	r3,48(r2)
81130fe8:	00800044 	movi	r2,1
81130fec:	e0bffa15 	stw	r2,-24(fp)
81130ff0:	e0bffa17 	ldw	r2,-24(fp)
81130ff4:	e037883a 	mov	sp,fp
81130ff8:	dfc00117 	ldw	ra,4(sp)
81130ffc:	df000017 	ldw	fp,0(sp)
81131000:	dec00204 	addi	sp,sp,8
81131004:	f800283a 	ret

81131008 <Write_File_Record_At_Offset>:
81131008:	defff904 	addi	sp,sp,-28
8113100c:	de00012e 	bgeu	sp,et,81131014 <Write_File_Record_At_Offset+0xc>
81131010:	003b68fa 	trap	3
81131014:	dfc00615 	stw	ra,24(sp)
81131018:	df000515 	stw	fp,20(sp)
8113101c:	df000504 	addi	fp,sp,20
81131020:	e13ffe15 	stw	r4,-8(fp)
81131024:	e17fff15 	stw	r5,-4(fp)
81131028:	e03ffb15 	stw	zero,-20(fp)
8113102c:	e0bffe17 	ldw	r2,-8(fp)
81131030:	108007cc 	andi	r2,r2,31
81131034:	1000931e 	bne	r2,zero,81131284 <Write_File_Record_At_Offset+0x27c>
81131038:	113362c0 	call	8113362c <alt_up_sd_card_is_Present>
8113103c:	10009126 	beq	r2,zero,81131284 <Write_File_Record_At_Offset+0x27c>
81131040:	d0a08c17 	ldw	r2,-32208(gp)
81131044:	10008f26 	beq	r2,zero,81131284 <Write_File_Record_At_Offset+0x27c>
81131048:	e03ffc15 	stw	zero,-16(fp)
8113104c:	00001f06 	br	811310cc <Write_File_Record_At_Offset+0xc4>
81131050:	e0bffc17 	ldw	r2,-16(fp)
81131054:	10800044 	addi	r2,r2,1
81131058:	e0ffff17 	ldw	r3,-4(fp)
8113105c:	1885883a 	add	r2,r3,r2
81131060:	10800003 	ldbu	r2,0(r2)
81131064:	10803fcc 	andi	r2,r2,255
81131068:	e0bffd0d 	sth	r2,-12(fp)
8113106c:	e0bffd0f 	ldh	r2,-12(fp)
81131070:	1004923a 	slli	r2,r2,8
81131074:	e0bffd0d 	sth	r2,-12(fp)
81131078:	e0ffff17 	ldw	r3,-4(fp)
8113107c:	e0bffc17 	ldw	r2,-16(fp)
81131080:	1885883a 	add	r2,r3,r2
81131084:	10800003 	ldbu	r2,0(r2)
81131088:	10c03fcc 	andi	r3,r2,255
8113108c:	e0bffd0b 	ldhu	r2,-12(fp)
81131090:	1884b03a 	or	r2,r3,r2
81131094:	e0bffd0d 	sth	r2,-12(fp)
81131098:	e0fffe17 	ldw	r3,-8(fp)
8113109c:	e0bffc17 	ldw	r2,-16(fp)
811310a0:	1885883a 	add	r2,r3,r2
811310a4:	1007883a 	mov	r3,r2
811310a8:	d0a09517 	ldw	r2,-32172(gp)
811310ac:	10800a17 	ldw	r2,40(r2)
811310b0:	1885883a 	add	r2,r3,r2
811310b4:	1007883a 	mov	r3,r2
811310b8:	e0bffd0f 	ldh	r2,-12(fp)
811310bc:	1880002d 	sthio	r2,0(r3)
811310c0:	e0bffc17 	ldw	r2,-16(fp)
811310c4:	10800084 	addi	r2,r2,2
811310c8:	e0bffc15 	stw	r2,-16(fp)
811310cc:	e0bffc17 	ldw	r2,-16(fp)
811310d0:	10800210 	cmplti	r2,r2,8
811310d4:	103fde1e 	bne	r2,zero,81131050 <__reset+0xfb111050>
811310d8:	e03ffc15 	stw	zero,-16(fp)
811310dc:	00001306 	br	8113112c <Write_File_Record_At_Offset+0x124>
811310e0:	e0fffe17 	ldw	r3,-8(fp)
811310e4:	e0bffc17 	ldw	r2,-16(fp)
811310e8:	1885883a 	add	r2,r3,r2
811310ec:	1007883a 	mov	r3,r2
811310f0:	d0a09517 	ldw	r2,-32172(gp)
811310f4:	10800a17 	ldw	r2,40(r2)
811310f8:	1885883a 	add	r2,r3,r2
811310fc:	10800204 	addi	r2,r2,8
81131100:	1009883a 	mov	r4,r2
81131104:	e0ffff17 	ldw	r3,-4(fp)
81131108:	e0bffc17 	ldw	r2,-16(fp)
8113110c:	1885883a 	add	r2,r3,r2
81131110:	10800204 	addi	r2,r2,8
81131114:	10800003 	ldbu	r2,0(r2)
81131118:	10803fcc 	andi	r2,r2,255
8113111c:	20800025 	stbio	r2,0(r4)
81131120:	e0bffc17 	ldw	r2,-16(fp)
81131124:	10800044 	addi	r2,r2,1
81131128:	e0bffc15 	stw	r2,-16(fp)
8113112c:	e0bffc17 	ldw	r2,-16(fp)
81131130:	108000d0 	cmplti	r2,r2,3
81131134:	103fea1e 	bne	r2,zero,811310e0 <__reset+0xfb1110e0>
81131138:	d0a09517 	ldw	r2,-32172(gp)
8113113c:	10c00a17 	ldw	r3,40(r2)
81131140:	e0bffe17 	ldw	r2,-8(fp)
81131144:	1885883a 	add	r2,r3,r2
81131148:	108002c4 	addi	r2,r2,11
8113114c:	1007883a 	mov	r3,r2
81131150:	e0bfff17 	ldw	r2,-4(fp)
81131154:	108002c3 	ldbu	r2,11(r2)
81131158:	10803fcc 	andi	r2,r2,255
8113115c:	18800025 	stbio	r2,0(r3)
81131160:	d0a09517 	ldw	r2,-32172(gp)
81131164:	10c00a17 	ldw	r3,40(r2)
81131168:	e0bffe17 	ldw	r2,-8(fp)
8113116c:	1885883a 	add	r2,r3,r2
81131170:	10800384 	addi	r2,r2,14
81131174:	1007883a 	mov	r3,r2
81131178:	e0bfff17 	ldw	r2,-4(fp)
8113117c:	1080030b 	ldhu	r2,12(r2)
81131180:	10bfffcc 	andi	r2,r2,65535
81131184:	1880002d 	sthio	r2,0(r3)
81131188:	d0a09517 	ldw	r2,-32172(gp)
8113118c:	10c00a17 	ldw	r3,40(r2)
81131190:	e0bffe17 	ldw	r2,-8(fp)
81131194:	1885883a 	add	r2,r3,r2
81131198:	10800404 	addi	r2,r2,16
8113119c:	1007883a 	mov	r3,r2
811311a0:	e0bfff17 	ldw	r2,-4(fp)
811311a4:	1080038b 	ldhu	r2,14(r2)
811311a8:	10bfffcc 	andi	r2,r2,65535
811311ac:	1880002d 	sthio	r2,0(r3)
811311b0:	d0a09517 	ldw	r2,-32172(gp)
811311b4:	10c00a17 	ldw	r3,40(r2)
811311b8:	e0bffe17 	ldw	r2,-8(fp)
811311bc:	1885883a 	add	r2,r3,r2
811311c0:	10800484 	addi	r2,r2,18
811311c4:	1007883a 	mov	r3,r2
811311c8:	e0bfff17 	ldw	r2,-4(fp)
811311cc:	1080040b 	ldhu	r2,16(r2)
811311d0:	10bfffcc 	andi	r2,r2,65535
811311d4:	1880002d 	sthio	r2,0(r3)
811311d8:	d0a09517 	ldw	r2,-32172(gp)
811311dc:	10c00a17 	ldw	r3,40(r2)
811311e0:	e0bffe17 	ldw	r2,-8(fp)
811311e4:	1885883a 	add	r2,r3,r2
811311e8:	10800584 	addi	r2,r2,22
811311ec:	1007883a 	mov	r3,r2
811311f0:	e0bfff17 	ldw	r2,-4(fp)
811311f4:	1080048b 	ldhu	r2,18(r2)
811311f8:	10bfffcc 	andi	r2,r2,65535
811311fc:	1880002d 	sthio	r2,0(r3)
81131200:	d0a09517 	ldw	r2,-32172(gp)
81131204:	10c00a17 	ldw	r3,40(r2)
81131208:	e0bffe17 	ldw	r2,-8(fp)
8113120c:	1885883a 	add	r2,r3,r2
81131210:	10800604 	addi	r2,r2,24
81131214:	1007883a 	mov	r3,r2
81131218:	e0bfff17 	ldw	r2,-4(fp)
8113121c:	1080050b 	ldhu	r2,20(r2)
81131220:	10bfffcc 	andi	r2,r2,65535
81131224:	1880002d 	sthio	r2,0(r3)
81131228:	d0a09517 	ldw	r2,-32172(gp)
8113122c:	10c00a17 	ldw	r3,40(r2)
81131230:	e0bffe17 	ldw	r2,-8(fp)
81131234:	1885883a 	add	r2,r3,r2
81131238:	10800684 	addi	r2,r2,26
8113123c:	1007883a 	mov	r3,r2
81131240:	e0bfff17 	ldw	r2,-4(fp)
81131244:	1080058b 	ldhu	r2,22(r2)
81131248:	10bfffcc 	andi	r2,r2,65535
8113124c:	1880002d 	sthio	r2,0(r3)
81131250:	d0a09517 	ldw	r2,-32172(gp)
81131254:	10c00a17 	ldw	r3,40(r2)
81131258:	e0bffe17 	ldw	r2,-8(fp)
8113125c:	1885883a 	add	r2,r3,r2
81131260:	10800704 	addi	r2,r2,28
81131264:	1007883a 	mov	r3,r2
81131268:	e0bfff17 	ldw	r2,-4(fp)
8113126c:	10800617 	ldw	r2,24(r2)
81131270:	18800035 	stwio	r2,0(r3)
81131274:	00800044 	movi	r2,1
81131278:	d0a09615 	stw	r2,-32168(gp)
8113127c:	00800044 	movi	r2,1
81131280:	e0bffb15 	stw	r2,-20(fp)
81131284:	e0bffb17 	ldw	r2,-20(fp)
81131288:	e037883a 	mov	sp,fp
8113128c:	dfc00117 	ldw	ra,4(sp)
81131290:	df000017 	ldw	fp,0(sp)
81131294:	dec00204 	addi	sp,sp,8
81131298:	f800283a 	ret

8113129c <Check_for_DOS_FAT>:
8113129c:	defff904 	addi	sp,sp,-28
811312a0:	de00012e 	bgeu	sp,et,811312a8 <Check_for_DOS_FAT+0xc>
811312a4:	003b68fa 	trap	3
811312a8:	dfc00615 	stw	ra,24(sp)
811312ac:	df000515 	stw	fp,20(sp)
811312b0:	df000504 	addi	fp,sp,20
811312b4:	e13fff15 	stw	r4,-4(fp)
811312b8:	e03ffb15 	stw	zero,-20(fp)
811312bc:	e03ffc15 	stw	zero,-16(fp)
811312c0:	e17fff17 	ldw	r5,-4(fp)
811312c4:	0009883a 	mov	r4,zero
811312c8:	11309540 	call	81130954 <Read_Sector_Data>
811312cc:	e0bffb15 	stw	r2,-20(fp)
811312d0:	d0a09517 	ldw	r2,-32172(gp)
811312d4:	10800a17 	ldw	r2,40(r2)
811312d8:	10807f84 	addi	r2,r2,510
811312dc:	1080002b 	ldhuio	r2,0(r2)
811312e0:	10bfffcc 	andi	r2,r2,65535
811312e4:	e0bffe0d 	sth	r2,-8(fp)
811312e8:	e0bffe0f 	ldh	r2,-8(fp)
811312ec:	10ffffcc 	andi	r3,r2,65535
811312f0:	00aa9554 	movui	r2,43605
811312f4:	1881841e 	bne	r3,r2,81131908 <Check_for_DOS_FAT+0x66c>
811312f8:	e0bffb17 	ldw	r2,-20(fp)
811312fc:	10018226 	beq	r2,zero,81131908 <Check_for_DOS_FAT+0x66c>
81131300:	e03ffd15 	stw	zero,-12(fp)
81131304:	d0a09517 	ldw	r2,-32172(gp)
81131308:	10800a17 	ldw	r2,40(r2)
8113130c:	10800023 	ldbuio	r2,0(r2)
81131310:	10803fcc 	andi	r2,r2,255
81131314:	1007883a 	mov	r3,r2
81131318:	00a04574 	movhi	r2,33045
8113131c:	10880f04 	addi	r2,r2,8252
81131320:	10c00005 	stb	r3,0(r2)
81131324:	d0a09517 	ldw	r2,-32172(gp)
81131328:	10800a17 	ldw	r2,40(r2)
8113132c:	10800044 	addi	r2,r2,1
81131330:	10800023 	ldbuio	r2,0(r2)
81131334:	10803fcc 	andi	r2,r2,255
81131338:	1007883a 	mov	r3,r2
8113133c:	00a04574 	movhi	r2,33045
81131340:	10880f04 	addi	r2,r2,8252
81131344:	10c00045 	stb	r3,1(r2)
81131348:	d0a09517 	ldw	r2,-32172(gp)
8113134c:	10800a17 	ldw	r2,40(r2)
81131350:	10800084 	addi	r2,r2,2
81131354:	10800023 	ldbuio	r2,0(r2)
81131358:	10803fcc 	andi	r2,r2,255
8113135c:	1007883a 	mov	r3,r2
81131360:	00a04574 	movhi	r2,33045
81131364:	10880f04 	addi	r2,r2,8252
81131368:	10c00085 	stb	r3,2(r2)
8113136c:	e03ffc15 	stw	zero,-16(fp)
81131370:	00001106 	br	811313b8 <Check_for_DOS_FAT+0x11c>
81131374:	d0a09517 	ldw	r2,-32172(gp)
81131378:	10c00a17 	ldw	r3,40(r2)
8113137c:	e0bffc17 	ldw	r2,-16(fp)
81131380:	1885883a 	add	r2,r3,r2
81131384:	108000c4 	addi	r2,r2,3
81131388:	10800023 	ldbuio	r2,0(r2)
8113138c:	10803fcc 	andi	r2,r2,255
81131390:	1009883a 	mov	r4,r2
81131394:	00a04574 	movhi	r2,33045
81131398:	10880f04 	addi	r2,r2,8252
8113139c:	e0fffc17 	ldw	r3,-16(fp)
811313a0:	10c5883a 	add	r2,r2,r3
811313a4:	108000c4 	addi	r2,r2,3
811313a8:	11000005 	stb	r4,0(r2)
811313ac:	e0bffc17 	ldw	r2,-16(fp)
811313b0:	10800044 	addi	r2,r2,1
811313b4:	e0bffc15 	stw	r2,-16(fp)
811313b8:	e0bffc17 	ldw	r2,-16(fp)
811313bc:	10800210 	cmplti	r2,r2,8
811313c0:	103fec1e 	bne	r2,zero,81131374 <__reset+0xfb111374>
811313c4:	d0a09517 	ldw	r2,-32172(gp)
811313c8:	10800a17 	ldw	r2,40(r2)
811313cc:	10800304 	addi	r2,r2,12
811313d0:	10800023 	ldbuio	r2,0(r2)
811313d4:	10803fcc 	andi	r2,r2,255
811313d8:	1004923a 	slli	r2,r2,8
811313dc:	1007883a 	mov	r3,r2
811313e0:	d0a09517 	ldw	r2,-32172(gp)
811313e4:	10800a17 	ldw	r2,40(r2)
811313e8:	108002c4 	addi	r2,r2,11
811313ec:	10800023 	ldbuio	r2,0(r2)
811313f0:	10803fcc 	andi	r2,r2,255
811313f4:	10803fcc 	andi	r2,r2,255
811313f8:	1080201c 	xori	r2,r2,128
811313fc:	10bfe004 	addi	r2,r2,-128
81131400:	1884b03a 	or	r2,r3,r2
81131404:	1007883a 	mov	r3,r2
81131408:	00a04574 	movhi	r2,33045
8113140c:	10880f04 	addi	r2,r2,8252
81131410:	10c0030d 	sth	r3,12(r2)
81131414:	d0a09517 	ldw	r2,-32172(gp)
81131418:	10800a17 	ldw	r2,40(r2)
8113141c:	10800344 	addi	r2,r2,13
81131420:	10800023 	ldbuio	r2,0(r2)
81131424:	10803fcc 	andi	r2,r2,255
81131428:	1007883a 	mov	r3,r2
8113142c:	00a04574 	movhi	r2,33045
81131430:	10880f04 	addi	r2,r2,8252
81131434:	10c00385 	stb	r3,14(r2)
81131438:	d0a09517 	ldw	r2,-32172(gp)
8113143c:	10800a17 	ldw	r2,40(r2)
81131440:	10800384 	addi	r2,r2,14
81131444:	1080002b 	ldhuio	r2,0(r2)
81131448:	10bfffcc 	andi	r2,r2,65535
8113144c:	1007883a 	mov	r3,r2
81131450:	00a04574 	movhi	r2,33045
81131454:	10880f04 	addi	r2,r2,8252
81131458:	10c0040d 	sth	r3,16(r2)
8113145c:	d0a09517 	ldw	r2,-32172(gp)
81131460:	10800a17 	ldw	r2,40(r2)
81131464:	10800404 	addi	r2,r2,16
81131468:	10800023 	ldbuio	r2,0(r2)
8113146c:	10803fcc 	andi	r2,r2,255
81131470:	1007883a 	mov	r3,r2
81131474:	00a04574 	movhi	r2,33045
81131478:	10880f04 	addi	r2,r2,8252
8113147c:	10c00485 	stb	r3,18(r2)
81131480:	d0a09517 	ldw	r2,-32172(gp)
81131484:	10800a17 	ldw	r2,40(r2)
81131488:	10800484 	addi	r2,r2,18
8113148c:	10800023 	ldbuio	r2,0(r2)
81131490:	10803fcc 	andi	r2,r2,255
81131494:	1004923a 	slli	r2,r2,8
81131498:	1007883a 	mov	r3,r2
8113149c:	d0a09517 	ldw	r2,-32172(gp)
811314a0:	10800a17 	ldw	r2,40(r2)
811314a4:	10800444 	addi	r2,r2,17
811314a8:	10800023 	ldbuio	r2,0(r2)
811314ac:	10803fcc 	andi	r2,r2,255
811314b0:	10803fcc 	andi	r2,r2,255
811314b4:	1884b03a 	or	r2,r3,r2
811314b8:	1007883a 	mov	r3,r2
811314bc:	00a04574 	movhi	r2,33045
811314c0:	10880f04 	addi	r2,r2,8252
811314c4:	10c0050d 	sth	r3,20(r2)
811314c8:	d0a09517 	ldw	r2,-32172(gp)
811314cc:	10800a17 	ldw	r2,40(r2)
811314d0:	10800504 	addi	r2,r2,20
811314d4:	10800023 	ldbuio	r2,0(r2)
811314d8:	10803fcc 	andi	r2,r2,255
811314dc:	1004923a 	slli	r2,r2,8
811314e0:	1007883a 	mov	r3,r2
811314e4:	d0a09517 	ldw	r2,-32172(gp)
811314e8:	10800a17 	ldw	r2,40(r2)
811314ec:	108004c4 	addi	r2,r2,19
811314f0:	10800023 	ldbuio	r2,0(r2)
811314f4:	10803fcc 	andi	r2,r2,255
811314f8:	10803fcc 	andi	r2,r2,255
811314fc:	1884b03a 	or	r2,r3,r2
81131500:	1007883a 	mov	r3,r2
81131504:	00a04574 	movhi	r2,33045
81131508:	10880f04 	addi	r2,r2,8252
8113150c:	10c0058d 	sth	r3,22(r2)
81131510:	d0a09517 	ldw	r2,-32172(gp)
81131514:	10800a17 	ldw	r2,40(r2)
81131518:	10800544 	addi	r2,r2,21
8113151c:	10800023 	ldbuio	r2,0(r2)
81131520:	10803fcc 	andi	r2,r2,255
81131524:	1007883a 	mov	r3,r2
81131528:	00a04574 	movhi	r2,33045
8113152c:	10880f04 	addi	r2,r2,8252
81131530:	10c00605 	stb	r3,24(r2)
81131534:	d0a09517 	ldw	r2,-32172(gp)
81131538:	10800a17 	ldw	r2,40(r2)
8113153c:	10800584 	addi	r2,r2,22
81131540:	1080002b 	ldhuio	r2,0(r2)
81131544:	10bfffcc 	andi	r2,r2,65535
81131548:	1007883a 	mov	r3,r2
8113154c:	00a04574 	movhi	r2,33045
81131550:	10880f04 	addi	r2,r2,8252
81131554:	10c0068d 	sth	r3,26(r2)
81131558:	d0a09517 	ldw	r2,-32172(gp)
8113155c:	10800a17 	ldw	r2,40(r2)
81131560:	10800604 	addi	r2,r2,24
81131564:	1080002b 	ldhuio	r2,0(r2)
81131568:	10bfffcc 	andi	r2,r2,65535
8113156c:	1007883a 	mov	r3,r2
81131570:	00a04574 	movhi	r2,33045
81131574:	10880f04 	addi	r2,r2,8252
81131578:	10c0070d 	sth	r3,28(r2)
8113157c:	d0a09517 	ldw	r2,-32172(gp)
81131580:	10800a17 	ldw	r2,40(r2)
81131584:	10800684 	addi	r2,r2,26
81131588:	1080002b 	ldhuio	r2,0(r2)
8113158c:	10bfffcc 	andi	r2,r2,65535
81131590:	1007883a 	mov	r3,r2
81131594:	00a04574 	movhi	r2,33045
81131598:	10880f04 	addi	r2,r2,8252
8113159c:	10c0078d 	sth	r3,30(r2)
811315a0:	d0a09517 	ldw	r2,-32172(gp)
811315a4:	10800a17 	ldw	r2,40(r2)
811315a8:	10800704 	addi	r2,r2,28
811315ac:	10800037 	ldwio	r2,0(r2)
811315b0:	1007883a 	mov	r3,r2
811315b4:	00a04574 	movhi	r2,33045
811315b8:	10880f04 	addi	r2,r2,8252
811315bc:	10c00815 	stw	r3,32(r2)
811315c0:	d0a09517 	ldw	r2,-32172(gp)
811315c4:	10800a17 	ldw	r2,40(r2)
811315c8:	10800804 	addi	r2,r2,32
811315cc:	10800037 	ldwio	r2,0(r2)
811315d0:	1007883a 	mov	r3,r2
811315d4:	00a04574 	movhi	r2,33045
811315d8:	10880f04 	addi	r2,r2,8252
811315dc:	10c00915 	stw	r3,36(r2)
811315e0:	d0a09517 	ldw	r2,-32172(gp)
811315e4:	10800a17 	ldw	r2,40(r2)
811315e8:	10800904 	addi	r2,r2,36
811315ec:	10800023 	ldbuio	r2,0(r2)
811315f0:	10803fcc 	andi	r2,r2,255
811315f4:	1007883a 	mov	r3,r2
811315f8:	00a04574 	movhi	r2,33045
811315fc:	10880f04 	addi	r2,r2,8252
81131600:	10c00a05 	stb	r3,40(r2)
81131604:	d0a09517 	ldw	r2,-32172(gp)
81131608:	10800a17 	ldw	r2,40(r2)
8113160c:	10800944 	addi	r2,r2,37
81131610:	10800023 	ldbuio	r2,0(r2)
81131614:	10803fcc 	andi	r2,r2,255
81131618:	1007883a 	mov	r3,r2
8113161c:	00a04574 	movhi	r2,33045
81131620:	10880f04 	addi	r2,r2,8252
81131624:	10c00a45 	stb	r3,41(r2)
81131628:	d0a09517 	ldw	r2,-32172(gp)
8113162c:	10800a17 	ldw	r2,40(r2)
81131630:	10800984 	addi	r2,r2,38
81131634:	10800023 	ldbuio	r2,0(r2)
81131638:	10803fcc 	andi	r2,r2,255
8113163c:	1007883a 	mov	r3,r2
81131640:	00a04574 	movhi	r2,33045
81131644:	10880f04 	addi	r2,r2,8252
81131648:	10c00a85 	stb	r3,42(r2)
8113164c:	00a04574 	movhi	r2,33045
81131650:	10880f04 	addi	r2,r2,8252
81131654:	1080040b 	ldhu	r2,16(r2)
81131658:	10ffffcc 	andi	r3,r2,65535
8113165c:	00a04574 	movhi	r2,33045
81131660:	10880f04 	addi	r2,r2,8252
81131664:	10c01115 	stw	r3,68(r2)
81131668:	00a04574 	movhi	r2,33045
8113166c:	10880f04 	addi	r2,r2,8252
81131670:	10c01117 	ldw	r3,68(r2)
81131674:	00a04574 	movhi	r2,33045
81131678:	10880f04 	addi	r2,r2,8252
8113167c:	1080068b 	ldhu	r2,26(r2)
81131680:	10bfffcc 	andi	r2,r2,65535
81131684:	1887883a 	add	r3,r3,r2
81131688:	00a04574 	movhi	r2,33045
8113168c:	10880f04 	addi	r2,r2,8252
81131690:	10c01215 	stw	r3,72(r2)
81131694:	00a04574 	movhi	r2,33045
81131698:	10880f04 	addi	r2,r2,8252
8113169c:	10c01217 	ldw	r3,72(r2)
811316a0:	00a04574 	movhi	r2,33045
811316a4:	10880f04 	addi	r2,r2,8252
811316a8:	1080068b 	ldhu	r2,26(r2)
811316ac:	10bfffcc 	andi	r2,r2,65535
811316b0:	1887883a 	add	r3,r3,r2
811316b4:	00a04574 	movhi	r2,33045
811316b8:	10880f04 	addi	r2,r2,8252
811316bc:	10c01315 	stw	r3,76(r2)
811316c0:	00a04574 	movhi	r2,33045
811316c4:	10880f04 	addi	r2,r2,8252
811316c8:	10c01317 	ldw	r3,76(r2)
811316cc:	00a04574 	movhi	r2,33045
811316d0:	10880f04 	addi	r2,r2,8252
811316d4:	1080050b 	ldhu	r2,20(r2)
811316d8:	10bfffcc 	andi	r2,r2,65535
811316dc:	1008917a 	slli	r4,r2,5
811316e0:	00a04574 	movhi	r2,33045
811316e4:	10880f04 	addi	r2,r2,8252
811316e8:	1080030b 	ldhu	r2,12(r2)
811316ec:	10bfffcc 	andi	r2,r2,65535
811316f0:	2085283a 	div	r2,r4,r2
811316f4:	1887883a 	add	r3,r3,r2
811316f8:	00a04574 	movhi	r2,33045
811316fc:	10880f04 	addi	r2,r2,8252
81131700:	10c01415 	stw	r3,80(r2)
81131704:	00a04574 	movhi	r2,33045
81131708:	10880f04 	addi	r2,r2,8252
8113170c:	1080058b 	ldhu	r2,22(r2)
81131710:	10bfffcc 	andi	r2,r2,65535
81131714:	10000b26 	beq	r2,zero,81131744 <Check_for_DOS_FAT+0x4a8>
81131718:	00a04574 	movhi	r2,33045
8113171c:	10880f04 	addi	r2,r2,8252
81131720:	1080058b 	ldhu	r2,22(r2)
81131724:	10ffffcc 	andi	r3,r2,65535
81131728:	00a04574 	movhi	r2,33045
8113172c:	10880f04 	addi	r2,r2,8252
81131730:	10800383 	ldbu	r2,14(r2)
81131734:	10803fcc 	andi	r2,r2,255
81131738:	1885283a 	div	r2,r3,r2
8113173c:	e0bffd15 	stw	r2,-12(fp)
81131740:	00000906 	br	81131768 <Check_for_DOS_FAT+0x4cc>
81131744:	00a04574 	movhi	r2,33045
81131748:	10880f04 	addi	r2,r2,8252
8113174c:	10c00917 	ldw	r3,36(r2)
81131750:	00a04574 	movhi	r2,33045
81131754:	10880f04 	addi	r2,r2,8252
81131758:	10800383 	ldbu	r2,14(r2)
8113175c:	10803fcc 	andi	r2,r2,255
81131760:	1885203a 	divu	r2,r3,r2
81131764:	e0bffd15 	stw	r2,-12(fp)
81131768:	e0bffd17 	ldw	r2,-12(fp)
8113176c:	1083fdc8 	cmpgei	r2,r2,4087
81131770:	1000051e 	bne	r2,zero,81131788 <Check_for_DOS_FAT+0x4ec>
81131774:	00a04574 	movhi	r2,33045
81131778:	10880f04 	addi	r2,r2,8252
8113177c:	00c00304 	movi	r3,12
81131780:	10c01085 	stb	r3,66(r2)
81131784:	00000c06 	br	811317b8 <Check_for_DOS_FAT+0x51c>
81131788:	e0bffd17 	ldw	r2,-12(fp)
8113178c:	00fffb54 	movui	r3,65517
81131790:	18800516 	blt	r3,r2,811317a8 <Check_for_DOS_FAT+0x50c>
81131794:	00a04574 	movhi	r2,33045
81131798:	10880f04 	addi	r2,r2,8252
8113179c:	00c00404 	movi	r3,16
811317a0:	10c01085 	stb	r3,66(r2)
811317a4:	00000406 	br	811317b8 <Check_for_DOS_FAT+0x51c>
811317a8:	00a04574 	movhi	r2,33045
811317ac:	10880f04 	addi	r2,r2,8252
811317b0:	00c00804 	movi	r3,32
811317b4:	10c01085 	stb	r3,66(r2)
811317b8:	e03ffc15 	stw	zero,-16(fp)
811317bc:	00001106 	br	81131804 <Check_for_DOS_FAT+0x568>
811317c0:	d0a09517 	ldw	r2,-32172(gp)
811317c4:	10c00a17 	ldw	r3,40(r2)
811317c8:	e0bffc17 	ldw	r2,-16(fp)
811317cc:	1885883a 	add	r2,r3,r2
811317d0:	108009c4 	addi	r2,r2,39
811317d4:	10800023 	ldbuio	r2,0(r2)
811317d8:	10803fcc 	andi	r2,r2,255
811317dc:	1009883a 	mov	r4,r2
811317e0:	00a04574 	movhi	r2,33045
811317e4:	10880f04 	addi	r2,r2,8252
811317e8:	e0fffc17 	ldw	r3,-16(fp)
811317ec:	10c5883a 	add	r2,r2,r3
811317f0:	10800ac4 	addi	r2,r2,43
811317f4:	11000005 	stb	r4,0(r2)
811317f8:	e0bffc17 	ldw	r2,-16(fp)
811317fc:	10800044 	addi	r2,r2,1
81131800:	e0bffc15 	stw	r2,-16(fp)
81131804:	e0bffc17 	ldw	r2,-16(fp)
81131808:	10800110 	cmplti	r2,r2,4
8113180c:	103fec1e 	bne	r2,zero,811317c0 <__reset+0xfb1117c0>
81131810:	e03ffc15 	stw	zero,-16(fp)
81131814:	00001106 	br	8113185c <Check_for_DOS_FAT+0x5c0>
81131818:	d0a09517 	ldw	r2,-32172(gp)
8113181c:	10c00a17 	ldw	r3,40(r2)
81131820:	e0bffc17 	ldw	r2,-16(fp)
81131824:	1885883a 	add	r2,r3,r2
81131828:	10800ac4 	addi	r2,r2,43
8113182c:	10800023 	ldbuio	r2,0(r2)
81131830:	10803fcc 	andi	r2,r2,255
81131834:	1009883a 	mov	r4,r2
81131838:	00a04574 	movhi	r2,33045
8113183c:	10880f04 	addi	r2,r2,8252
81131840:	e0fffc17 	ldw	r3,-16(fp)
81131844:	10c5883a 	add	r2,r2,r3
81131848:	10800bc4 	addi	r2,r2,47
8113184c:	11000005 	stb	r4,0(r2)
81131850:	e0bffc17 	ldw	r2,-16(fp)
81131854:	10800044 	addi	r2,r2,1
81131858:	e0bffc15 	stw	r2,-16(fp)
8113185c:	e0bffc17 	ldw	r2,-16(fp)
81131860:	108002d0 	cmplti	r2,r2,11
81131864:	103fec1e 	bne	r2,zero,81131818 <__reset+0xfb111818>
81131868:	e03ffc15 	stw	zero,-16(fp)
8113186c:	00001106 	br	811318b4 <Check_for_DOS_FAT+0x618>
81131870:	d0a09517 	ldw	r2,-32172(gp)
81131874:	10c00a17 	ldw	r3,40(r2)
81131878:	e0bffc17 	ldw	r2,-16(fp)
8113187c:	1885883a 	add	r2,r3,r2
81131880:	10800d84 	addi	r2,r2,54
81131884:	10800023 	ldbuio	r2,0(r2)
81131888:	10803fcc 	andi	r2,r2,255
8113188c:	1009883a 	mov	r4,r2
81131890:	00a04574 	movhi	r2,33045
81131894:	10880f04 	addi	r2,r2,8252
81131898:	e0fffc17 	ldw	r3,-16(fp)
8113189c:	10c5883a 	add	r2,r2,r3
811318a0:	10800e84 	addi	r2,r2,58
811318a4:	11000005 	stb	r4,0(r2)
811318a8:	e0bffc17 	ldw	r2,-16(fp)
811318ac:	10800044 	addi	r2,r2,1
811318b0:	e0bffc15 	stw	r2,-16(fp)
811318b4:	e0bffc17 	ldw	r2,-16(fp)
811318b8:	10800210 	cmplti	r2,r2,8
811318bc:	103fec1e 	bne	r2,zero,81131870 <__reset+0xfb111870>
811318c0:	e03ffc15 	stw	zero,-16(fp)
811318c4:	00000a06 	br	811318f0 <Check_for_DOS_FAT+0x654>
811318c8:	00a04574 	movhi	r2,33045
811318cc:	10882404 	addi	r2,r2,8336
811318d0:	e0fffc17 	ldw	r3,-16(fp)
811318d4:	180691ba 	slli	r3,r3,6
811318d8:	10c5883a 	add	r2,r2,r3
811318dc:	10800f04 	addi	r2,r2,60
811318e0:	10000015 	stw	zero,0(r2)
811318e4:	e0bffc17 	ldw	r2,-16(fp)
811318e8:	10800044 	addi	r2,r2,1
811318ec:	e0bffc15 	stw	r2,-16(fp)
811318f0:	e0bffc17 	ldw	r2,-16(fp)
811318f4:	10800510 	cmplti	r2,r2,20
811318f8:	103ff31e 	bne	r2,zero,811318c8 <__reset+0xfb1118c8>
811318fc:	00800044 	movi	r2,1
81131900:	e0bffb15 	stw	r2,-20(fp)
81131904:	00000106 	br	8113190c <Check_for_DOS_FAT+0x670>
81131908:	e03ffb15 	stw	zero,-20(fp)
8113190c:	e0bffb17 	ldw	r2,-20(fp)
81131910:	e037883a 	mov	sp,fp
81131914:	dfc00117 	ldw	ra,4(sp)
81131918:	df000017 	ldw	fp,0(sp)
8113191c:	dec00204 	addi	sp,sp,8
81131920:	f800283a 	ret

81131924 <Look_for_FAT16>:
81131924:	defffc04 	addi	sp,sp,-16
81131928:	de00012e 	bgeu	sp,et,81131930 <Look_for_FAT16+0xc>
8113192c:	003b68fa 	trap	3
81131930:	dfc00315 	stw	ra,12(sp)
81131934:	df000215 	stw	fp,8(sp)
81131938:	df000204 	addi	fp,sp,8
8113193c:	e03ffe15 	stw	zero,-8(fp)
81131940:	113362c0 	call	8113362c <alt_up_sd_card_is_Present>
81131944:	10002e26 	beq	r2,zero,81131a00 <Look_for_FAT16+0xdc>
81131948:	d0a08f17 	ldw	r2,-32196(gp)
8113194c:	1080000b 	ldhu	r2,0(r2)
81131950:	e0bfff0d 	sth	r2,-4(fp)
81131954:	d0209315 	stw	zero,-32180(gp)
81131958:	d0209415 	stw	zero,-32176(gp)
8113195c:	e0bfff0f 	ldh	r2,-4(fp)
81131960:	10002716 	blt	r2,zero,81131a00 <Look_for_FAT16+0xdc>
81131964:	e0bfff0b 	ldhu	r2,-4(fp)
81131968:	10bfffcc 	andi	r2,r2,65535
8113196c:	1083000c 	andi	r2,r2,3072
81131970:	10830020 	cmpeqi	r2,r2,3072
81131974:	1000221e 	bne	r2,zero,81131a00 <Look_for_FAT16+0xdc>
81131978:	e0bfff0b 	ldhu	r2,-4(fp)
8113197c:	10bfffcc 	andi	r2,r2,65535
81131980:	1083000c 	andi	r2,r2,3072
81131984:	10810018 	cmpnei	r2,r2,1024
81131988:	1000031e 	bne	r2,zero,81131998 <Look_for_FAT16+0x74>
8113198c:	0009883a 	mov	r4,zero
81131990:	113129c0 	call	8113129c <Check_for_DOS_FAT>
81131994:	e0bffe15 	stw	r2,-8(fp)
81131998:	e0bfff0b 	ldhu	r2,-4(fp)
8113199c:	10bfffcc 	andi	r2,r2,65535
811319a0:	1083000c 	andi	r2,r2,3072
811319a4:	1000061e 	bne	r2,zero,811319c0 <Look_for_FAT16+0x9c>
811319a8:	1130bd80 	call	81130bd8 <Check_for_Master_Boot_Record>
811319ac:	10000426 	beq	r2,zero,811319c0 <Look_for_FAT16+0x9c>
811319b0:	d0a09317 	ldw	r2,-32180(gp)
811319b4:	1009883a 	mov	r4,r2
811319b8:	113129c0 	call	8113129c <Check_for_DOS_FAT>
811319bc:	e0bffe15 	stw	r2,-8(fp)
811319c0:	e0bffe17 	ldw	r2,-8(fp)
811319c4:	10800058 	cmpnei	r2,r2,1
811319c8:	10000d1e 	bne	r2,zero,81131a00 <Look_for_FAT16+0xdc>
811319cc:	00a04574 	movhi	r2,33045
811319d0:	10880f04 	addi	r2,r2,8252
811319d4:	10801083 	ldbu	r2,66(r2)
811319d8:	10803fcc 	andi	r2,r2,255
811319dc:	10800420 	cmpeqi	r2,r2,16
811319e0:	1000021e 	bne	r2,zero,811319ec <Look_for_FAT16+0xc8>
811319e4:	e03ffe15 	stw	zero,-8(fp)
811319e8:	00000506 	br	81131a00 <Look_for_FAT16+0xdc>
811319ec:	00a04574 	movhi	r2,33045
811319f0:	10880f04 	addi	r2,r2,8252
811319f4:	1080058b 	ldhu	r2,22(r2)
811319f8:	10bfffcc 	andi	r2,r2,65535
811319fc:	d0a09415 	stw	r2,-32176(gp)
81131a00:	e0bffe17 	ldw	r2,-8(fp)
81131a04:	e037883a 	mov	sp,fp
81131a08:	dfc00117 	ldw	ra,4(sp)
81131a0c:	df000017 	ldw	fp,0(sp)
81131a10:	dec00204 	addi	sp,sp,8
81131a14:	f800283a 	ret

81131a18 <filename_to_upper_case>:
81131a18:	defffb04 	addi	sp,sp,-20
81131a1c:	de00012e 	bgeu	sp,et,81131a24 <filename_to_upper_case+0xc>
81131a20:	003b68fa 	trap	3
81131a24:	dfc00415 	stw	ra,16(sp)
81131a28:	df000315 	stw	fp,12(sp)
81131a2c:	df000304 	addi	fp,sp,12
81131a30:	e13fff15 	stw	r4,-4(fp)
81131a34:	e13fff17 	ldw	r4,-4(fp)
81131a38:	11118240 	call	81111824 <strlen>
81131a3c:	e0bffe15 	stw	r2,-8(fp)
81131a40:	e03ffd15 	stw	zero,-12(fp)
81131a44:	00001e06 	br	81131ac0 <filename_to_upper_case+0xa8>
81131a48:	e0bffd17 	ldw	r2,-12(fp)
81131a4c:	e0ffff17 	ldw	r3,-4(fp)
81131a50:	1885883a 	add	r2,r3,r2
81131a54:	10800003 	ldbu	r2,0(r2)
81131a58:	10803fcc 	andi	r2,r2,255
81131a5c:	1080201c 	xori	r2,r2,128
81131a60:	10bfe004 	addi	r2,r2,-128
81131a64:	10801850 	cmplti	r2,r2,97
81131a68:	1000121e 	bne	r2,zero,81131ab4 <filename_to_upper_case+0x9c>
81131a6c:	e0bffd17 	ldw	r2,-12(fp)
81131a70:	e0ffff17 	ldw	r3,-4(fp)
81131a74:	1885883a 	add	r2,r3,r2
81131a78:	10800003 	ldbu	r2,0(r2)
81131a7c:	10803fcc 	andi	r2,r2,255
81131a80:	1080201c 	xori	r2,r2,128
81131a84:	10bfe004 	addi	r2,r2,-128
81131a88:	10801ec8 	cmpgei	r2,r2,123
81131a8c:	1000091e 	bne	r2,zero,81131ab4 <filename_to_upper_case+0x9c>
81131a90:	e0bffd17 	ldw	r2,-12(fp)
81131a94:	e0ffff17 	ldw	r3,-4(fp)
81131a98:	1885883a 	add	r2,r3,r2
81131a9c:	e0fffd17 	ldw	r3,-12(fp)
81131aa0:	e13fff17 	ldw	r4,-4(fp)
81131aa4:	20c7883a 	add	r3,r4,r3
81131aa8:	18c00003 	ldbu	r3,0(r3)
81131aac:	18fff804 	addi	r3,r3,-32
81131ab0:	10c00005 	stb	r3,0(r2)
81131ab4:	e0bffd17 	ldw	r2,-12(fp)
81131ab8:	10800044 	addi	r2,r2,1
81131abc:	e0bffd15 	stw	r2,-12(fp)
81131ac0:	e0fffd17 	ldw	r3,-12(fp)
81131ac4:	e0bffe17 	ldw	r2,-8(fp)
81131ac8:	18bfdf16 	blt	r3,r2,81131a48 <__reset+0xfb111a48>
81131acc:	0001883a 	nop
81131ad0:	e037883a 	mov	sp,fp
81131ad4:	dfc00117 	ldw	ra,4(sp)
81131ad8:	df000017 	ldw	fp,0(sp)
81131adc:	dec00204 	addi	sp,sp,8
81131ae0:	f800283a 	ret

81131ae4 <check_file_name_for_FAT16_compliance>:
81131ae4:	defff804 	addi	sp,sp,-32
81131ae8:	de00012e 	bgeu	sp,et,81131af0 <check_file_name_for_FAT16_compliance+0xc>
81131aec:	003b68fa 	trap	3
81131af0:	dfc00715 	stw	ra,28(sp)
81131af4:	df000615 	stw	fp,24(sp)
81131af8:	df000604 	addi	fp,sp,24
81131afc:	e13fff15 	stw	r4,-4(fp)
81131b00:	e13fff17 	ldw	r4,-4(fp)
81131b04:	11118240 	call	81111824 <strlen>
81131b08:	e0bffe15 	stw	r2,-8(fp)
81131b0c:	00bfffc4 	movi	r2,-1
81131b10:	e0bffb15 	stw	r2,-20(fp)
81131b14:	00bfffc4 	movi	r2,-1
81131b18:	e0bffc15 	stw	r2,-16(fp)
81131b1c:	00800044 	movi	r2,1
81131b20:	e0bffd15 	stw	r2,-12(fp)
81131b24:	e03ffa15 	stw	zero,-24(fp)
81131b28:	00006d06 	br	81131ce0 <check_file_name_for_FAT16_compliance+0x1fc>
81131b2c:	e0bffa17 	ldw	r2,-24(fp)
81131b30:	e0ffff17 	ldw	r3,-4(fp)
81131b34:	1885883a 	add	r2,r3,r2
81131b38:	10800003 	ldbu	r2,0(r2)
81131b3c:	10803fcc 	andi	r2,r2,255
81131b40:	1080201c 	xori	r2,r2,128
81131b44:	10bfe004 	addi	r2,r2,-128
81131b48:	10800820 	cmpeqi	r2,r2,32
81131b4c:	10003e1e 	bne	r2,zero,81131c48 <check_file_name_for_FAT16_compliance+0x164>
81131b50:	e0bffa17 	ldw	r2,-24(fp)
81131b54:	10ffffc4 	addi	r3,r2,-1
81131b58:	e0bffb17 	ldw	r2,-20(fp)
81131b5c:	1880121e 	bne	r3,r2,81131ba8 <check_file_name_for_FAT16_compliance+0xc4>
81131b60:	e0bffa17 	ldw	r2,-24(fp)
81131b64:	e0ffff17 	ldw	r3,-4(fp)
81131b68:	1885883a 	add	r2,r3,r2
81131b6c:	10800003 	ldbu	r2,0(r2)
81131b70:	10803fcc 	andi	r2,r2,255
81131b74:	1080201c 	xori	r2,r2,128
81131b78:	10bfe004 	addi	r2,r2,-128
81131b7c:	10801720 	cmpeqi	r2,r2,92
81131b80:	1000311e 	bne	r2,zero,81131c48 <check_file_name_for_FAT16_compliance+0x164>
81131b84:	e0bffa17 	ldw	r2,-24(fp)
81131b88:	e0ffff17 	ldw	r3,-4(fp)
81131b8c:	1885883a 	add	r2,r3,r2
81131b90:	10800003 	ldbu	r2,0(r2)
81131b94:	10803fcc 	andi	r2,r2,255
81131b98:	1080201c 	xori	r2,r2,128
81131b9c:	10bfe004 	addi	r2,r2,-128
81131ba0:	10800be0 	cmpeqi	r2,r2,47
81131ba4:	1000281e 	bne	r2,zero,81131c48 <check_file_name_for_FAT16_compliance+0x164>
81131ba8:	e0fffa17 	ldw	r3,-24(fp)
81131bac:	e0bffc17 	ldw	r2,-16(fp)
81131bb0:	1885c83a 	sub	r2,r3,r2
81131bb4:	10800258 	cmpnei	r2,r2,9
81131bb8:	1000091e 	bne	r2,zero,81131be0 <check_file_name_for_FAT16_compliance+0xfc>
81131bbc:	e0bffa17 	ldw	r2,-24(fp)
81131bc0:	e0ffff17 	ldw	r3,-4(fp)
81131bc4:	1885883a 	add	r2,r3,r2
81131bc8:	10800003 	ldbu	r2,0(r2)
81131bcc:	10803fcc 	andi	r2,r2,255
81131bd0:	1080201c 	xori	r2,r2,128
81131bd4:	10bfe004 	addi	r2,r2,-128
81131bd8:	10800b98 	cmpnei	r2,r2,46
81131bdc:	10001a1e 	bne	r2,zero,81131c48 <check_file_name_for_FAT16_compliance+0x164>
81131be0:	e0fffb17 	ldw	r3,-20(fp)
81131be4:	e0bffc17 	ldw	r2,-16(fp)
81131be8:	18801926 	beq	r3,r2,81131c50 <check_file_name_for_FAT16_compliance+0x16c>
81131bec:	e0fffa17 	ldw	r3,-24(fp)
81131bf0:	e0bffc17 	ldw	r2,-16(fp)
81131bf4:	1885c83a 	sub	r2,r3,r2
81131bf8:	10800110 	cmplti	r2,r2,4
81131bfc:	1000141e 	bne	r2,zero,81131c50 <check_file_name_for_FAT16_compliance+0x16c>
81131c00:	e0bffa17 	ldw	r2,-24(fp)
81131c04:	e0ffff17 	ldw	r3,-4(fp)
81131c08:	1885883a 	add	r2,r3,r2
81131c0c:	10800003 	ldbu	r2,0(r2)
81131c10:	10803fcc 	andi	r2,r2,255
81131c14:	1080201c 	xori	r2,r2,128
81131c18:	10bfe004 	addi	r2,r2,-128
81131c1c:	10801720 	cmpeqi	r2,r2,92
81131c20:	10000b1e 	bne	r2,zero,81131c50 <check_file_name_for_FAT16_compliance+0x16c>
81131c24:	e0bffa17 	ldw	r2,-24(fp)
81131c28:	e0ffff17 	ldw	r3,-4(fp)
81131c2c:	1885883a 	add	r2,r3,r2
81131c30:	10800003 	ldbu	r2,0(r2)
81131c34:	10803fcc 	andi	r2,r2,255
81131c38:	1080201c 	xori	r2,r2,128
81131c3c:	10bfe004 	addi	r2,r2,-128
81131c40:	10800be0 	cmpeqi	r2,r2,47
81131c44:	1000021e 	bne	r2,zero,81131c50 <check_file_name_for_FAT16_compliance+0x16c>
81131c48:	e03ffd15 	stw	zero,-12(fp)
81131c4c:	00002706 	br	81131cec <check_file_name_for_FAT16_compliance+0x208>
81131c50:	e0bffa17 	ldw	r2,-24(fp)
81131c54:	e0ffff17 	ldw	r3,-4(fp)
81131c58:	1885883a 	add	r2,r3,r2
81131c5c:	10800003 	ldbu	r2,0(r2)
81131c60:	10803fcc 	andi	r2,r2,255
81131c64:	1080201c 	xori	r2,r2,128
81131c68:	10bfe004 	addi	r2,r2,-128
81131c6c:	10801720 	cmpeqi	r2,r2,92
81131c70:	1000091e 	bne	r2,zero,81131c98 <check_file_name_for_FAT16_compliance+0x1b4>
81131c74:	e0bffa17 	ldw	r2,-24(fp)
81131c78:	e0ffff17 	ldw	r3,-4(fp)
81131c7c:	1885883a 	add	r2,r3,r2
81131c80:	10800003 	ldbu	r2,0(r2)
81131c84:	10803fcc 	andi	r2,r2,255
81131c88:	1080201c 	xori	r2,r2,128
81131c8c:	10bfe004 	addi	r2,r2,-128
81131c90:	10800bd8 	cmpnei	r2,r2,47
81131c94:	1000041e 	bne	r2,zero,81131ca8 <check_file_name_for_FAT16_compliance+0x1c4>
81131c98:	e0bffa17 	ldw	r2,-24(fp)
81131c9c:	e0bffc15 	stw	r2,-16(fp)
81131ca0:	e0bffa17 	ldw	r2,-24(fp)
81131ca4:	e0bffb15 	stw	r2,-20(fp)
81131ca8:	e0bffa17 	ldw	r2,-24(fp)
81131cac:	e0ffff17 	ldw	r3,-4(fp)
81131cb0:	1885883a 	add	r2,r3,r2
81131cb4:	10800003 	ldbu	r2,0(r2)
81131cb8:	10803fcc 	andi	r2,r2,255
81131cbc:	1080201c 	xori	r2,r2,128
81131cc0:	10bfe004 	addi	r2,r2,-128
81131cc4:	10800b98 	cmpnei	r2,r2,46
81131cc8:	1000021e 	bne	r2,zero,81131cd4 <check_file_name_for_FAT16_compliance+0x1f0>
81131ccc:	e0bffa17 	ldw	r2,-24(fp)
81131cd0:	e0bffc15 	stw	r2,-16(fp)
81131cd4:	e0bffa17 	ldw	r2,-24(fp)
81131cd8:	10800044 	addi	r2,r2,1
81131cdc:	e0bffa15 	stw	r2,-24(fp)
81131ce0:	e0fffa17 	ldw	r3,-24(fp)
81131ce4:	e0bffe17 	ldw	r2,-8(fp)
81131ce8:	18bf9016 	blt	r3,r2,81131b2c <__reset+0xfb111b2c>
81131cec:	e0bffe17 	ldw	r2,-8(fp)
81131cf0:	10bfffc4 	addi	r2,r2,-1
81131cf4:	e0ffff17 	ldw	r3,-4(fp)
81131cf8:	1885883a 	add	r2,r3,r2
81131cfc:	10800003 	ldbu	r2,0(r2)
81131d00:	10803fcc 	andi	r2,r2,255
81131d04:	1080201c 	xori	r2,r2,128
81131d08:	10bfe004 	addi	r2,r2,-128
81131d0c:	10801720 	cmpeqi	r2,r2,92
81131d10:	10000a1e 	bne	r2,zero,81131d3c <check_file_name_for_FAT16_compliance+0x258>
81131d14:	e0bffe17 	ldw	r2,-8(fp)
81131d18:	10bfffc4 	addi	r2,r2,-1
81131d1c:	e0ffff17 	ldw	r3,-4(fp)
81131d20:	1885883a 	add	r2,r3,r2
81131d24:	10800003 	ldbu	r2,0(r2)
81131d28:	10803fcc 	andi	r2,r2,255
81131d2c:	1080201c 	xori	r2,r2,128
81131d30:	10bfe004 	addi	r2,r2,-128
81131d34:	10800bd8 	cmpnei	r2,r2,47
81131d38:	1000011e 	bne	r2,zero,81131d40 <check_file_name_for_FAT16_compliance+0x25c>
81131d3c:	e03ffd15 	stw	zero,-12(fp)
81131d40:	e0bffd17 	ldw	r2,-12(fp)
81131d44:	e037883a 	mov	sp,fp
81131d48:	dfc00117 	ldw	ra,4(sp)
81131d4c:	df000017 	ldw	fp,0(sp)
81131d50:	dec00204 	addi	sp,sp,8
81131d54:	f800283a 	ret

81131d58 <get_dir_divider_location>:
81131d58:	defffb04 	addi	sp,sp,-20
81131d5c:	de00012e 	bgeu	sp,et,81131d64 <get_dir_divider_location+0xc>
81131d60:	003b68fa 	trap	3
81131d64:	dfc00415 	stw	ra,16(sp)
81131d68:	df000315 	stw	fp,12(sp)
81131d6c:	df000304 	addi	fp,sp,12
81131d70:	e13fff15 	stw	r4,-4(fp)
81131d74:	e03ffd15 	stw	zero,-12(fp)
81131d78:	e13fff17 	ldw	r4,-4(fp)
81131d7c:	11118240 	call	81111824 <strlen>
81131d80:	e0bffe15 	stw	r2,-8(fp)
81131d84:	e03ffd15 	stw	zero,-12(fp)
81131d88:	00001506 	br	81131de0 <get_dir_divider_location+0x88>
81131d8c:	e0bffd17 	ldw	r2,-12(fp)
81131d90:	e0ffff17 	ldw	r3,-4(fp)
81131d94:	1885883a 	add	r2,r3,r2
81131d98:	10800003 	ldbu	r2,0(r2)
81131d9c:	10803fcc 	andi	r2,r2,255
81131da0:	1080201c 	xori	r2,r2,128
81131da4:	10bfe004 	addi	r2,r2,-128
81131da8:	10801720 	cmpeqi	r2,r2,92
81131dac:	10000f1e 	bne	r2,zero,81131dec <get_dir_divider_location+0x94>
81131db0:	e0bffd17 	ldw	r2,-12(fp)
81131db4:	e0ffff17 	ldw	r3,-4(fp)
81131db8:	1885883a 	add	r2,r3,r2
81131dbc:	10800003 	ldbu	r2,0(r2)
81131dc0:	10803fcc 	andi	r2,r2,255
81131dc4:	1080201c 	xori	r2,r2,128
81131dc8:	10bfe004 	addi	r2,r2,-128
81131dcc:	10800be0 	cmpeqi	r2,r2,47
81131dd0:	1000061e 	bne	r2,zero,81131dec <get_dir_divider_location+0x94>
81131dd4:	e0bffd17 	ldw	r2,-12(fp)
81131dd8:	10800044 	addi	r2,r2,1
81131ddc:	e0bffd15 	stw	r2,-12(fp)
81131de0:	e0fffd17 	ldw	r3,-12(fp)
81131de4:	e0bffe17 	ldw	r2,-8(fp)
81131de8:	18bfe816 	blt	r3,r2,81131d8c <__reset+0xfb111d8c>
81131dec:	e0fffd17 	ldw	r3,-12(fp)
81131df0:	e0bffe17 	ldw	r2,-8(fp)
81131df4:	1880021e 	bne	r3,r2,81131e00 <get_dir_divider_location+0xa8>
81131df8:	00bfffc4 	movi	r2,-1
81131dfc:	e0bffd15 	stw	r2,-12(fp)
81131e00:	e0bffd17 	ldw	r2,-12(fp)
81131e04:	e037883a 	mov	sp,fp
81131e08:	dfc00117 	ldw	ra,4(sp)
81131e0c:	df000017 	ldw	fp,0(sp)
81131e10:	dec00204 	addi	sp,sp,8
81131e14:	f800283a 	ret

81131e18 <match_file_record_to_name_ext>:
81131e18:	defffa04 	addi	sp,sp,-24
81131e1c:	de00012e 	bgeu	sp,et,81131e24 <match_file_record_to_name_ext+0xc>
81131e20:	003b68fa 	trap	3
81131e24:	df000515 	stw	fp,20(sp)
81131e28:	df000504 	addi	fp,sp,20
81131e2c:	e13ffd15 	stw	r4,-12(fp)
81131e30:	e17ffe15 	stw	r5,-8(fp)
81131e34:	e1bfff15 	stw	r6,-4(fp)
81131e38:	00800044 	movi	r2,1
81131e3c:	e0bffb15 	stw	r2,-20(fp)
81131e40:	e03ffc15 	stw	zero,-16(fp)
81131e44:	00004606 	br	81131f60 <match_file_record_to_name_ext+0x148>
81131e48:	e0fffd17 	ldw	r3,-12(fp)
81131e4c:	e0bffc17 	ldw	r2,-16(fp)
81131e50:	1885883a 	add	r2,r3,r2
81131e54:	10800003 	ldbu	r2,0(r2)
81131e58:	10803fcc 	andi	r2,r2,255
81131e5c:	10801870 	cmpltui	r2,r2,97
81131e60:	1000101e 	bne	r2,zero,81131ea4 <match_file_record_to_name_ext+0x8c>
81131e64:	e0fffd17 	ldw	r3,-12(fp)
81131e68:	e0bffc17 	ldw	r2,-16(fp)
81131e6c:	1885883a 	add	r2,r3,r2
81131e70:	10800003 	ldbu	r2,0(r2)
81131e74:	10803fcc 	andi	r2,r2,255
81131e78:	10801ee8 	cmpgeui	r2,r2,123
81131e7c:	1000091e 	bne	r2,zero,81131ea4 <match_file_record_to_name_ext+0x8c>
81131e80:	e0fffd17 	ldw	r3,-12(fp)
81131e84:	e0bffc17 	ldw	r2,-16(fp)
81131e88:	1885883a 	add	r2,r3,r2
81131e8c:	10800003 	ldbu	r2,0(r2)
81131e90:	10bff804 	addi	r2,r2,-32
81131e94:	10c03fcc 	andi	r3,r2,255
81131e98:	18c0201c 	xori	r3,r3,128
81131e9c:	18ffe004 	addi	r3,r3,-128
81131ea0:	00000706 	br	81131ec0 <match_file_record_to_name_ext+0xa8>
81131ea4:	e0fffd17 	ldw	r3,-12(fp)
81131ea8:	e0bffc17 	ldw	r2,-16(fp)
81131eac:	1885883a 	add	r2,r3,r2
81131eb0:	10800003 	ldbu	r2,0(r2)
81131eb4:	10c03fcc 	andi	r3,r2,255
81131eb8:	18c0201c 	xori	r3,r3,128
81131ebc:	18ffe004 	addi	r3,r3,-128
81131ec0:	e0bffc17 	ldw	r2,-16(fp)
81131ec4:	e13ffe17 	ldw	r4,-8(fp)
81131ec8:	2085883a 	add	r2,r4,r2
81131ecc:	10800003 	ldbu	r2,0(r2)
81131ed0:	10803fcc 	andi	r2,r2,255
81131ed4:	1080201c 	xori	r2,r2,128
81131ed8:	10bfe004 	addi	r2,r2,-128
81131edc:	10801850 	cmplti	r2,r2,97
81131ee0:	1000121e 	bne	r2,zero,81131f2c <match_file_record_to_name_ext+0x114>
81131ee4:	e0bffc17 	ldw	r2,-16(fp)
81131ee8:	e13ffe17 	ldw	r4,-8(fp)
81131eec:	2085883a 	add	r2,r4,r2
81131ef0:	10800003 	ldbu	r2,0(r2)
81131ef4:	10803fcc 	andi	r2,r2,255
81131ef8:	1080201c 	xori	r2,r2,128
81131efc:	10bfe004 	addi	r2,r2,-128
81131f00:	10801ec8 	cmpgei	r2,r2,123
81131f04:	1000091e 	bne	r2,zero,81131f2c <match_file_record_to_name_ext+0x114>
81131f08:	e0bffc17 	ldw	r2,-16(fp)
81131f0c:	e13ffe17 	ldw	r4,-8(fp)
81131f10:	2085883a 	add	r2,r4,r2
81131f14:	10800003 	ldbu	r2,0(r2)
81131f18:	10bff804 	addi	r2,r2,-32
81131f1c:	10803fcc 	andi	r2,r2,255
81131f20:	1080201c 	xori	r2,r2,128
81131f24:	10bfe004 	addi	r2,r2,-128
81131f28:	00000706 	br	81131f48 <match_file_record_to_name_ext+0x130>
81131f2c:	e0bffc17 	ldw	r2,-16(fp)
81131f30:	e13ffe17 	ldw	r4,-8(fp)
81131f34:	2085883a 	add	r2,r4,r2
81131f38:	10800003 	ldbu	r2,0(r2)
81131f3c:	10803fcc 	andi	r2,r2,255
81131f40:	1080201c 	xori	r2,r2,128
81131f44:	10bfe004 	addi	r2,r2,-128
81131f48:	18800226 	beq	r3,r2,81131f54 <match_file_record_to_name_ext+0x13c>
81131f4c:	e03ffb15 	stw	zero,-20(fp)
81131f50:	00000606 	br	81131f6c <match_file_record_to_name_ext+0x154>
81131f54:	e0bffc17 	ldw	r2,-16(fp)
81131f58:	10800044 	addi	r2,r2,1
81131f5c:	e0bffc15 	stw	r2,-16(fp)
81131f60:	e0bffc17 	ldw	r2,-16(fp)
81131f64:	10800210 	cmplti	r2,r2,8
81131f68:	103fb71e 	bne	r2,zero,81131e48 <__reset+0xfb111e48>
81131f6c:	e03ffc15 	stw	zero,-16(fp)
81131f70:	00004a06 	br	8113209c <match_file_record_to_name_ext+0x284>
81131f74:	e0fffd17 	ldw	r3,-12(fp)
81131f78:	e0bffc17 	ldw	r2,-16(fp)
81131f7c:	1885883a 	add	r2,r3,r2
81131f80:	10800204 	addi	r2,r2,8
81131f84:	10800003 	ldbu	r2,0(r2)
81131f88:	10803fcc 	andi	r2,r2,255
81131f8c:	10801870 	cmpltui	r2,r2,97
81131f90:	1000121e 	bne	r2,zero,81131fdc <match_file_record_to_name_ext+0x1c4>
81131f94:	e0fffd17 	ldw	r3,-12(fp)
81131f98:	e0bffc17 	ldw	r2,-16(fp)
81131f9c:	1885883a 	add	r2,r3,r2
81131fa0:	10800204 	addi	r2,r2,8
81131fa4:	10800003 	ldbu	r2,0(r2)
81131fa8:	10803fcc 	andi	r2,r2,255
81131fac:	10801ee8 	cmpgeui	r2,r2,123
81131fb0:	10000a1e 	bne	r2,zero,81131fdc <match_file_record_to_name_ext+0x1c4>
81131fb4:	e0fffd17 	ldw	r3,-12(fp)
81131fb8:	e0bffc17 	ldw	r2,-16(fp)
81131fbc:	1885883a 	add	r2,r3,r2
81131fc0:	10800204 	addi	r2,r2,8
81131fc4:	10800003 	ldbu	r2,0(r2)
81131fc8:	10bff804 	addi	r2,r2,-32
81131fcc:	10c03fcc 	andi	r3,r2,255
81131fd0:	18c0201c 	xori	r3,r3,128
81131fd4:	18ffe004 	addi	r3,r3,-128
81131fd8:	00000806 	br	81131ffc <match_file_record_to_name_ext+0x1e4>
81131fdc:	e0fffd17 	ldw	r3,-12(fp)
81131fe0:	e0bffc17 	ldw	r2,-16(fp)
81131fe4:	1885883a 	add	r2,r3,r2
81131fe8:	10800204 	addi	r2,r2,8
81131fec:	10800003 	ldbu	r2,0(r2)
81131ff0:	10c03fcc 	andi	r3,r2,255
81131ff4:	18c0201c 	xori	r3,r3,128
81131ff8:	18ffe004 	addi	r3,r3,-128
81131ffc:	e0bffc17 	ldw	r2,-16(fp)
81132000:	e13fff17 	ldw	r4,-4(fp)
81132004:	2085883a 	add	r2,r4,r2
81132008:	10800003 	ldbu	r2,0(r2)
8113200c:	10803fcc 	andi	r2,r2,255
81132010:	1080201c 	xori	r2,r2,128
81132014:	10bfe004 	addi	r2,r2,-128
81132018:	10801850 	cmplti	r2,r2,97
8113201c:	1000121e 	bne	r2,zero,81132068 <match_file_record_to_name_ext+0x250>
81132020:	e0bffc17 	ldw	r2,-16(fp)
81132024:	e13fff17 	ldw	r4,-4(fp)
81132028:	2085883a 	add	r2,r4,r2
8113202c:	10800003 	ldbu	r2,0(r2)
81132030:	10803fcc 	andi	r2,r2,255
81132034:	1080201c 	xori	r2,r2,128
81132038:	10bfe004 	addi	r2,r2,-128
8113203c:	10801ec8 	cmpgei	r2,r2,123
81132040:	1000091e 	bne	r2,zero,81132068 <match_file_record_to_name_ext+0x250>
81132044:	e0bffc17 	ldw	r2,-16(fp)
81132048:	e13fff17 	ldw	r4,-4(fp)
8113204c:	2085883a 	add	r2,r4,r2
81132050:	10800003 	ldbu	r2,0(r2)
81132054:	10bff804 	addi	r2,r2,-32
81132058:	10803fcc 	andi	r2,r2,255
8113205c:	1080201c 	xori	r2,r2,128
81132060:	10bfe004 	addi	r2,r2,-128
81132064:	00000706 	br	81132084 <match_file_record_to_name_ext+0x26c>
81132068:	e0bffc17 	ldw	r2,-16(fp)
8113206c:	e13fff17 	ldw	r4,-4(fp)
81132070:	2085883a 	add	r2,r4,r2
81132074:	10800003 	ldbu	r2,0(r2)
81132078:	10803fcc 	andi	r2,r2,255
8113207c:	1080201c 	xori	r2,r2,128
81132080:	10bfe004 	addi	r2,r2,-128
81132084:	18800226 	beq	r3,r2,81132090 <match_file_record_to_name_ext+0x278>
81132088:	e03ffb15 	stw	zero,-20(fp)
8113208c:	00000606 	br	811320a8 <match_file_record_to_name_ext+0x290>
81132090:	e0bffc17 	ldw	r2,-16(fp)
81132094:	10800044 	addi	r2,r2,1
81132098:	e0bffc15 	stw	r2,-16(fp)
8113209c:	e0bffc17 	ldw	r2,-16(fp)
811320a0:	108000d0 	cmplti	r2,r2,3
811320a4:	103fb31e 	bne	r2,zero,81131f74 <__reset+0xfb111f74>
811320a8:	e0bffb17 	ldw	r2,-20(fp)
811320ac:	e037883a 	mov	sp,fp
811320b0:	df000017 	ldw	fp,0(sp)
811320b4:	dec00104 	addi	sp,sp,4
811320b8:	f800283a 	ret

811320bc <get_home_directory_cluster_for_file>:
811320bc:	deffe704 	addi	sp,sp,-100
811320c0:	de00012e 	bgeu	sp,et,811320c8 <get_home_directory_cluster_for_file+0xc>
811320c4:	003b68fa 	trap	3
811320c8:	dfc01815 	stw	ra,96(sp)
811320cc:	df001715 	stw	fp,92(sp)
811320d0:	df001704 	addi	fp,sp,92
811320d4:	e13ffd15 	stw	r4,-12(fp)
811320d8:	e17ffe15 	stw	r5,-8(fp)
811320dc:	e1bfff15 	stw	r6,-4(fp)
811320e0:	e03fe915 	stw	zero,-92(fp)
811320e4:	e03fea15 	stw	zero,-88(fp)
811320e8:	e03fed15 	stw	zero,-76(fp)
811320ec:	e13ffd17 	ldw	r4,-12(fp)
811320f0:	1131d580 	call	81131d58 <get_dir_divider_location>
811320f4:	e0bfeb15 	stw	r2,-84(fp)
811320f8:	00012f06 	br	811325b8 <get_home_directory_cluster_for_file+0x4fc>
811320fc:	00800804 	movi	r2,32
81132100:	e0bff905 	stb	r2,-28(fp)
81132104:	00800804 	movi	r2,32
81132108:	e0bff945 	stb	r2,-27(fp)
8113210c:	00800804 	movi	r2,32
81132110:	e0bff985 	stb	r2,-26(fp)
81132114:	00800804 	movi	r2,32
81132118:	e0bff9c5 	stb	r2,-25(fp)
8113211c:	00800804 	movi	r2,32
81132120:	e0bffa05 	stb	r2,-24(fp)
81132124:	00800804 	movi	r2,32
81132128:	e0bffa45 	stb	r2,-23(fp)
8113212c:	00800804 	movi	r2,32
81132130:	e0bffa85 	stb	r2,-22(fp)
81132134:	00800804 	movi	r2,32
81132138:	e0bffac5 	stb	r2,-21(fp)
8113213c:	00800804 	movi	r2,32
81132140:	e0bffb05 	stb	r2,-20(fp)
81132144:	00800804 	movi	r2,32
81132148:	e0bffb45 	stb	r2,-19(fp)
8113214c:	00800804 	movi	r2,32
81132150:	e0bffb85 	stb	r2,-18(fp)
81132154:	00bfffc4 	movi	r2,-1
81132158:	e0bfee15 	stw	r2,-72(fp)
8113215c:	e0bfea17 	ldw	r2,-88(fp)
81132160:	e0bfef15 	stw	r2,-68(fp)
81132164:	e03fec15 	stw	zero,-80(fp)
81132168:	00002d06 	br	81132220 <get_home_directory_cluster_for_file+0x164>
8113216c:	e0ffec17 	ldw	r3,-80(fp)
81132170:	e0bfed17 	ldw	r2,-76(fp)
81132174:	1885883a 	add	r2,r3,r2
81132178:	1007883a 	mov	r3,r2
8113217c:	e0bffd17 	ldw	r2,-12(fp)
81132180:	10c5883a 	add	r2,r2,r3
81132184:	10800003 	ldbu	r2,0(r2)
81132188:	10803fcc 	andi	r2,r2,255
8113218c:	1080201c 	xori	r2,r2,128
81132190:	10bfe004 	addi	r2,r2,-128
81132194:	10800b98 	cmpnei	r2,r2,46
81132198:	1000031e 	bne	r2,zero,811321a8 <get_home_directory_cluster_for_file+0xec>
8113219c:	e0bfec17 	ldw	r2,-80(fp)
811321a0:	e0bfee15 	stw	r2,-72(fp)
811321a4:	00001b06 	br	81132214 <get_home_directory_cluster_for_file+0x158>
811321a8:	e0bfee17 	ldw	r2,-72(fp)
811321ac:	10000c0e 	bge	r2,zero,811321e0 <get_home_directory_cluster_for_file+0x124>
811321b0:	e0ffec17 	ldw	r3,-80(fp)
811321b4:	e0bfed17 	ldw	r2,-76(fp)
811321b8:	1885883a 	add	r2,r3,r2
811321bc:	1007883a 	mov	r3,r2
811321c0:	e0bffd17 	ldw	r2,-12(fp)
811321c4:	10c5883a 	add	r2,r2,r3
811321c8:	10c00003 	ldbu	r3,0(r2)
811321cc:	e13ff904 	addi	r4,fp,-28
811321d0:	e0bfec17 	ldw	r2,-80(fp)
811321d4:	2085883a 	add	r2,r4,r2
811321d8:	10c00005 	stb	r3,0(r2)
811321dc:	00000d06 	br	81132214 <get_home_directory_cluster_for_file+0x158>
811321e0:	e0ffec17 	ldw	r3,-80(fp)
811321e4:	e0bfee17 	ldw	r2,-72(fp)
811321e8:	1885c83a 	sub	r2,r3,r2
811321ec:	e13fec17 	ldw	r4,-80(fp)
811321f0:	e0ffed17 	ldw	r3,-76(fp)
811321f4:	20c7883a 	add	r3,r4,r3
811321f8:	1809883a 	mov	r4,r3
811321fc:	e0fffd17 	ldw	r3,-12(fp)
81132200:	1907883a 	add	r3,r3,r4
81132204:	18c00003 	ldbu	r3,0(r3)
81132208:	e13ffb04 	addi	r4,fp,-20
8113220c:	2085883a 	add	r2,r4,r2
81132210:	10c00005 	stb	r3,0(r2)
81132214:	e0bfec17 	ldw	r2,-80(fp)
81132218:	10800044 	addi	r2,r2,1
8113221c:	e0bfec15 	stw	r2,-80(fp)
81132220:	e0ffec17 	ldw	r3,-80(fp)
81132224:	e0bfeb17 	ldw	r2,-84(fp)
81132228:	18bfd016 	blt	r3,r2,8113216c <__reset+0xfb11216c>
8113222c:	e0bfea17 	ldw	r2,-88(fp)
81132230:	10005c1e 	bne	r2,zero,811323a4 <get_home_directory_cluster_for_file+0x2e8>
81132234:	00a04574 	movhi	r2,33045
81132238:	10880f04 	addi	r2,r2,8252
8113223c:	1080050b 	ldhu	r2,20(r2)
81132240:	10bfffcc 	andi	r2,r2,65535
81132244:	1006917a 	slli	r3,r2,5
81132248:	00a04574 	movhi	r2,33045
8113224c:	10880f04 	addi	r2,r2,8252
81132250:	1080030b 	ldhu	r2,12(r2)
81132254:	10bfffcc 	andi	r2,r2,65535
81132258:	1885283a 	div	r2,r3,r2
8113225c:	e0bff715 	stw	r2,-36(fp)
81132260:	e03ff015 	stw	zero,-64(fp)
81132264:	00003b06 	br	81132354 <get_home_directory_cluster_for_file+0x298>
81132268:	00a04574 	movhi	r2,33045
8113226c:	10880f04 	addi	r2,r2,8252
81132270:	10c01317 	ldw	r3,76(r2)
81132274:	e0bff017 	ldw	r2,-64(fp)
81132278:	1885883a 	add	r2,r3,r2
8113227c:	1007883a 	mov	r3,r2
81132280:	d0a09317 	ldw	r2,-32180(gp)
81132284:	100b883a 	mov	r5,r2
81132288:	1809883a 	mov	r4,r3
8113228c:	11309540 	call	81130954 <Read_Sector_Data>
81132290:	10003426 	beq	r2,zero,81132364 <get_home_directory_cluster_for_file+0x2a8>
81132294:	e03ff115 	stw	zero,-60(fp)
81132298:	00002506 	br	81132330 <get_home_directory_cluster_for_file+0x274>
8113229c:	e0bff117 	ldw	r2,-60(fp)
811322a0:	1004917a 	slli	r2,r2,5
811322a4:	e0fff017 	ldw	r3,-64(fp)
811322a8:	180f883a 	mov	r7,r3
811322ac:	000d883a 	mov	r6,zero
811322b0:	e17fff17 	ldw	r5,-4(fp)
811322b4:	1009883a 	mov	r4,r2
811322b8:	1130d840 	call	81130d84 <Read_File_Record_At_Offset>
811322bc:	e0bfff17 	ldw	r2,-4(fp)
811322c0:	10800003 	ldbu	r2,0(r2)
811322c4:	10803fcc 	andi	r2,r2,255
811322c8:	10803960 	cmpeqi	r2,r2,229
811322cc:	1000151e 	bne	r2,zero,81132324 <get_home_directory_cluster_for_file+0x268>
811322d0:	e0bfff17 	ldw	r2,-4(fp)
811322d4:	10800003 	ldbu	r2,0(r2)
811322d8:	10803fcc 	andi	r2,r2,255
811322dc:	10001126 	beq	r2,zero,81132324 <get_home_directory_cluster_for_file+0x268>
811322e0:	e0fffb04 	addi	r3,fp,-20
811322e4:	e0bff904 	addi	r2,fp,-28
811322e8:	180d883a 	mov	r6,r3
811322ec:	100b883a 	mov	r5,r2
811322f0:	e13fff17 	ldw	r4,-4(fp)
811322f4:	1131e180 	call	81131e18 <match_file_record_to_name_ext>
811322f8:	e0bff815 	stw	r2,-32(fp)
811322fc:	e0bff817 	ldw	r2,-32(fp)
81132300:	10000826 	beq	r2,zero,81132324 <get_home_directory_cluster_for_file+0x268>
81132304:	e0bfff17 	ldw	r2,-4(fp)
81132308:	1080058b 	ldhu	r2,22(r2)
8113230c:	10bfffcc 	andi	r2,r2,65535
81132310:	e0bfef15 	stw	r2,-68(fp)
81132314:	e0bfff17 	ldw	r2,-4(fp)
81132318:	00c00044 	movi	r3,1
8113231c:	10c00a15 	stw	r3,40(r2)
81132320:	00000606 	br	8113233c <get_home_directory_cluster_for_file+0x280>
81132324:	e0bff117 	ldw	r2,-60(fp)
81132328:	10800044 	addi	r2,r2,1
8113232c:	e0bff115 	stw	r2,-60(fp)
81132330:	e0bff117 	ldw	r2,-60(fp)
81132334:	10800410 	cmplti	r2,r2,16
81132338:	103fd81e 	bne	r2,zero,8113229c <__reset+0xfb11229c>
8113233c:	e0ffef17 	ldw	r3,-68(fp)
81132340:	e0bfea17 	ldw	r2,-88(fp)
81132344:	1880091e 	bne	r3,r2,8113236c <get_home_directory_cluster_for_file+0x2b0>
81132348:	e0bff017 	ldw	r2,-64(fp)
8113234c:	10800044 	addi	r2,r2,1
81132350:	e0bff015 	stw	r2,-64(fp)
81132354:	e0fff017 	ldw	r3,-64(fp)
81132358:	e0bff717 	ldw	r2,-36(fp)
8113235c:	18bfc216 	blt	r3,r2,81132268 <__reset+0xfb112268>
81132360:	00000306 	br	81132370 <get_home_directory_cluster_for_file+0x2b4>
81132364:	0001883a 	nop
81132368:	00000106 	br	81132370 <get_home_directory_cluster_for_file+0x2b4>
8113236c:	0001883a 	nop
81132370:	e0ffef17 	ldw	r3,-68(fp)
81132374:	e0bfea17 	ldw	r2,-88(fp)
81132378:	18800826 	beq	r3,r2,8113239c <get_home_directory_cluster_for_file+0x2e0>
8113237c:	e0bfef17 	ldw	r2,-68(fp)
81132380:	e0bfea15 	stw	r2,-88(fp)
81132384:	e0ffed17 	ldw	r3,-76(fp)
81132388:	e0bfeb17 	ldw	r2,-84(fp)
8113238c:	1885883a 	add	r2,r3,r2
81132390:	10800044 	addi	r2,r2,1
81132394:	e0bfed15 	stw	r2,-76(fp)
81132398:	00007d06 	br	81132590 <get_home_directory_cluster_for_file+0x4d4>
8113239c:	0005883a 	mov	r2,zero
811323a0:	00009106 	br	811325e8 <get_home_directory_cluster_for_file+0x52c>
811323a4:	e0bfea17 	ldw	r2,-88(fp)
811323a8:	e0bff415 	stw	r2,-48(fp)
811323ac:	e0bff417 	ldw	r2,-48(fp)
811323b0:	10ffff84 	addi	r3,r2,-2
811323b4:	00a04574 	movhi	r2,33045
811323b8:	10880f04 	addi	r2,r2,8252
811323bc:	10800383 	ldbu	r2,14(r2)
811323c0:	10803fcc 	andi	r2,r2,255
811323c4:	1885383a 	mul	r2,r3,r2
811323c8:	1007883a 	mov	r3,r2
811323cc:	00a04574 	movhi	r2,33045
811323d0:	10880f04 	addi	r2,r2,8252
811323d4:	10801417 	ldw	r2,80(r2)
811323d8:	1885883a 	add	r2,r3,r2
811323dc:	e0bff515 	stw	r2,-44(fp)
811323e0:	e03ff215 	stw	zero,-56(fp)
811323e4:	00003606 	br	811324c0 <get_home_directory_cluster_for_file+0x404>
811323e8:	e0fff217 	ldw	r3,-56(fp)
811323ec:	e0bff517 	ldw	r2,-44(fp)
811323f0:	1885883a 	add	r2,r3,r2
811323f4:	d0e09317 	ldw	r3,-32180(gp)
811323f8:	180b883a 	mov	r5,r3
811323fc:	1009883a 	mov	r4,r2
81132400:	11309540 	call	81130954 <Read_Sector_Data>
81132404:	10003526 	beq	r2,zero,811324dc <get_home_directory_cluster_for_file+0x420>
81132408:	e03ff315 	stw	zero,-52(fp)
8113240c:	00002306 	br	8113249c <get_home_directory_cluster_for_file+0x3e0>
81132410:	e0bff317 	ldw	r2,-52(fp)
81132414:	1004917a 	slli	r2,r2,5
81132418:	e0fff417 	ldw	r3,-48(fp)
8113241c:	e13ff217 	ldw	r4,-56(fp)
81132420:	200f883a 	mov	r7,r4
81132424:	180d883a 	mov	r6,r3
81132428:	e17fff17 	ldw	r5,-4(fp)
8113242c:	1009883a 	mov	r4,r2
81132430:	1130d840 	call	81130d84 <Read_File_Record_At_Offset>
81132434:	e0bfff17 	ldw	r2,-4(fp)
81132438:	10800003 	ldbu	r2,0(r2)
8113243c:	10803fcc 	andi	r2,r2,255
81132440:	10803960 	cmpeqi	r2,r2,229
81132444:	1000121e 	bne	r2,zero,81132490 <get_home_directory_cluster_for_file+0x3d4>
81132448:	e0bfff17 	ldw	r2,-4(fp)
8113244c:	10800003 	ldbu	r2,0(r2)
81132450:	10803fcc 	andi	r2,r2,255
81132454:	10000e26 	beq	r2,zero,81132490 <get_home_directory_cluster_for_file+0x3d4>
81132458:	e0fffb04 	addi	r3,fp,-20
8113245c:	e0bff904 	addi	r2,fp,-28
81132460:	180d883a 	mov	r6,r3
81132464:	100b883a 	mov	r5,r2
81132468:	e13fff17 	ldw	r4,-4(fp)
8113246c:	1131e180 	call	81131e18 <match_file_record_to_name_ext>
81132470:	e0bff615 	stw	r2,-40(fp)
81132474:	e0bff617 	ldw	r2,-40(fp)
81132478:	10000526 	beq	r2,zero,81132490 <get_home_directory_cluster_for_file+0x3d4>
8113247c:	e0bfff17 	ldw	r2,-4(fp)
81132480:	1080058b 	ldhu	r2,22(r2)
81132484:	10bfffcc 	andi	r2,r2,65535
81132488:	e0bfef15 	stw	r2,-68(fp)
8113248c:	00000606 	br	811324a8 <get_home_directory_cluster_for_file+0x3ec>
81132490:	e0bff317 	ldw	r2,-52(fp)
81132494:	10800044 	addi	r2,r2,1
81132498:	e0bff315 	stw	r2,-52(fp)
8113249c:	e0bff317 	ldw	r2,-52(fp)
811324a0:	10800410 	cmplti	r2,r2,16
811324a4:	103fda1e 	bne	r2,zero,81132410 <__reset+0xfb112410>
811324a8:	e0ffef17 	ldw	r3,-68(fp)
811324ac:	e0bfea17 	ldw	r2,-88(fp)
811324b0:	18800c1e 	bne	r3,r2,811324e4 <get_home_directory_cluster_for_file+0x428>
811324b4:	e0bff217 	ldw	r2,-56(fp)
811324b8:	10800044 	addi	r2,r2,1
811324bc:	e0bff215 	stw	r2,-56(fp)
811324c0:	00a04574 	movhi	r2,33045
811324c4:	10880f04 	addi	r2,r2,8252
811324c8:	10800383 	ldbu	r2,14(r2)
811324cc:	10803fcc 	andi	r2,r2,255
811324d0:	e0fff217 	ldw	r3,-56(fp)
811324d4:	18bfc416 	blt	r3,r2,811323e8 <__reset+0xfb1123e8>
811324d8:	00000306 	br	811324e8 <get_home_directory_cluster_for_file+0x42c>
811324dc:	0001883a 	nop
811324e0:	00000106 	br	811324e8 <get_home_directory_cluster_for_file+0x42c>
811324e4:	0001883a 	nop
811324e8:	e0ffef17 	ldw	r3,-68(fp)
811324ec:	e0bfea17 	ldw	r2,-88(fp)
811324f0:	1880141e 	bne	r3,r2,81132544 <get_home_directory_cluster_for_file+0x488>
811324f4:	e0bfef17 	ldw	r2,-68(fp)
811324f8:	e0fffc04 	addi	r3,fp,-16
811324fc:	180b883a 	mov	r5,r3
81132500:	1009883a 	mov	r4,r2
81132504:	1130a340 	call	81130a34 <get_cluster_flag>
81132508:	10000c26 	beq	r2,zero,8113253c <get_home_directory_cluster_for_file+0x480>
8113250c:	e0bffc0b 	ldhu	r2,-16(fp)
81132510:	10bfffcc 	andi	r2,r2,65535
81132514:	10fffe0c 	andi	r3,r2,65528
81132518:	00bffe14 	movui	r2,65528
8113251c:	1880021e 	bne	r3,r2,81132528 <get_home_directory_cluster_for_file+0x46c>
81132520:	0005883a 	mov	r2,zero
81132524:	00003006 	br	811325e8 <get_home_directory_cluster_for_file+0x52c>
81132528:	e0bffc0b 	ldhu	r2,-16(fp)
8113252c:	10bfffcc 	andi	r2,r2,65535
81132530:	10bffe0c 	andi	r2,r2,65528
81132534:	e0bfef15 	stw	r2,-68(fp)
81132538:	00000206 	br	81132544 <get_home_directory_cluster_for_file+0x488>
8113253c:	0005883a 	mov	r2,zero
81132540:	00002906 	br	811325e8 <get_home_directory_cluster_for_file+0x52c>
81132544:	e0bff417 	ldw	r2,-48(fp)
81132548:	00fffdd4 	movui	r3,65527
8113254c:	18800316 	blt	r3,r2,8113255c <get_home_directory_cluster_for_file+0x4a0>
81132550:	e0ffef17 	ldw	r3,-68(fp)
81132554:	e0bfea17 	ldw	r2,-88(fp)
81132558:	18bf9426 	beq	r3,r2,811323ac <__reset+0xfb1123ac>
8113255c:	e0ffef17 	ldw	r3,-68(fp)
81132560:	e0bfea17 	ldw	r2,-88(fp)
81132564:	18800826 	beq	r3,r2,81132588 <get_home_directory_cluster_for_file+0x4cc>
81132568:	e0bfef17 	ldw	r2,-68(fp)
8113256c:	e0bfea15 	stw	r2,-88(fp)
81132570:	e0ffed17 	ldw	r3,-76(fp)
81132574:	e0bfeb17 	ldw	r2,-84(fp)
81132578:	1885883a 	add	r2,r3,r2
8113257c:	10800044 	addi	r2,r2,1
81132580:	e0bfed15 	stw	r2,-76(fp)
81132584:	00000206 	br	81132590 <get_home_directory_cluster_for_file+0x4d4>
81132588:	0005883a 	mov	r2,zero
8113258c:	00001606 	br	811325e8 <get_home_directory_cluster_for_file+0x52c>
81132590:	e0bfed17 	ldw	r2,-76(fp)
81132594:	e0fffd17 	ldw	r3,-12(fp)
81132598:	1885883a 	add	r2,r3,r2
8113259c:	1009883a 	mov	r4,r2
811325a0:	1131d580 	call	81131d58 <get_dir_divider_location>
811325a4:	e0bfeb15 	stw	r2,-84(fp)
811325a8:	e0bfeb17 	ldw	r2,-84(fp)
811325ac:	1000020e 	bge	r2,zero,811325b8 <get_home_directory_cluster_for_file+0x4fc>
811325b0:	00800044 	movi	r2,1
811325b4:	e0bfe915 	stw	r2,-92(fp)
811325b8:	e0bfeb17 	ldw	r2,-84(fp)
811325bc:	00becf16 	blt	zero,r2,811320fc <__reset+0xfb1120fc>
811325c0:	e0bffe17 	ldw	r2,-8(fp)
811325c4:	e0ffea17 	ldw	r3,-88(fp)
811325c8:	10c00015 	stw	r3,0(r2)
811325cc:	e0bfea17 	ldw	r2,-88(fp)
811325d0:	1000041e 	bne	r2,zero,811325e4 <get_home_directory_cluster_for_file+0x528>
811325d4:	e0bfff17 	ldw	r2,-4(fp)
811325d8:	10000a15 	stw	zero,40(r2)
811325dc:	00800044 	movi	r2,1
811325e0:	e0bfe915 	stw	r2,-92(fp)
811325e4:	e0bfe917 	ldw	r2,-92(fp)
811325e8:	e037883a 	mov	sp,fp
811325ec:	dfc00117 	ldw	ra,4(sp)
811325f0:	df000017 	ldw	fp,0(sp)
811325f4:	dec00204 	addi	sp,sp,8
811325f8:	f800283a 	ret

811325fc <find_file_in_directory>:
811325fc:	deffe804 	addi	sp,sp,-96
81132600:	de00012e 	bgeu	sp,et,81132608 <find_file_in_directory+0xc>
81132604:	003b68fa 	trap	3
81132608:	dfc01715 	stw	ra,92(sp)
8113260c:	df001615 	stw	fp,88(sp)
81132610:	df001604 	addi	fp,sp,88
81132614:	e13ffd15 	stw	r4,-12(fp)
81132618:	e17ffe15 	stw	r5,-8(fp)
8113261c:	e1bfff15 	stw	r6,-4(fp)
81132620:	e13ffe17 	ldw	r4,-8(fp)
81132624:	1131d580 	call	81131d58 <get_dir_divider_location>
81132628:	e0bfea15 	stw	r2,-88(fp)
8113262c:	e03feb15 	stw	zero,-84(fp)
81132630:	00800804 	movi	r2,32
81132634:	e0bff905 	stb	r2,-28(fp)
81132638:	00800804 	movi	r2,32
8113263c:	e0bff945 	stb	r2,-27(fp)
81132640:	00800804 	movi	r2,32
81132644:	e0bff985 	stb	r2,-26(fp)
81132648:	00800804 	movi	r2,32
8113264c:	e0bff9c5 	stb	r2,-25(fp)
81132650:	00800804 	movi	r2,32
81132654:	e0bffa05 	stb	r2,-24(fp)
81132658:	00800804 	movi	r2,32
8113265c:	e0bffa45 	stb	r2,-23(fp)
81132660:	00800804 	movi	r2,32
81132664:	e0bffa85 	stb	r2,-22(fp)
81132668:	00800804 	movi	r2,32
8113266c:	e0bffac5 	stb	r2,-21(fp)
81132670:	00800804 	movi	r2,32
81132674:	e0bffb05 	stb	r2,-20(fp)
81132678:	00800804 	movi	r2,32
8113267c:	e0bffb45 	stb	r2,-19(fp)
81132680:	00800804 	movi	r2,32
81132684:	e0bffb85 	stb	r2,-18(fp)
81132688:	00bfffc4 	movi	r2,-1
8113268c:	e0bfec15 	stw	r2,-80(fp)
81132690:	e0bffd17 	ldw	r2,-12(fp)
81132694:	e0bfed15 	stw	r2,-76(fp)
81132698:	e13ffe17 	ldw	r4,-8(fp)
8113269c:	11118240 	call	81111824 <strlen>
811326a0:	e0bff415 	stw	r2,-48(fp)
811326a4:	e03fef15 	stw	zero,-68(fp)
811326a8:	00000b06 	br	811326d8 <find_file_in_directory+0xdc>
811326ac:	e0ffeb17 	ldw	r3,-84(fp)
811326b0:	e0bfea17 	ldw	r2,-88(fp)
811326b4:	1885883a 	add	r2,r3,r2
811326b8:	10800044 	addi	r2,r2,1
811326bc:	e0bfeb15 	stw	r2,-84(fp)
811326c0:	e0bfeb17 	ldw	r2,-84(fp)
811326c4:	e0fffe17 	ldw	r3,-8(fp)
811326c8:	1885883a 	add	r2,r3,r2
811326cc:	1009883a 	mov	r4,r2
811326d0:	1131d580 	call	81131d58 <get_dir_divider_location>
811326d4:	e0bfea15 	stw	r2,-88(fp)
811326d8:	e0bfea17 	ldw	r2,-88(fp)
811326dc:	00bff316 	blt	zero,r2,811326ac <__reset+0xfb1126ac>
811326e0:	e0bfeb17 	ldw	r2,-84(fp)
811326e4:	e0bfee15 	stw	r2,-72(fp)
811326e8:	00002706 	br	81132788 <find_file_in_directory+0x18c>
811326ec:	e0bfee17 	ldw	r2,-72(fp)
811326f0:	e0fffe17 	ldw	r3,-8(fp)
811326f4:	1885883a 	add	r2,r3,r2
811326f8:	10800003 	ldbu	r2,0(r2)
811326fc:	10803fcc 	andi	r2,r2,255
81132700:	1080201c 	xori	r2,r2,128
81132704:	10bfe004 	addi	r2,r2,-128
81132708:	10800b98 	cmpnei	r2,r2,46
8113270c:	1000031e 	bne	r2,zero,8113271c <find_file_in_directory+0x120>
81132710:	e0bfee17 	ldw	r2,-72(fp)
81132714:	e0bfec15 	stw	r2,-80(fp)
81132718:	00001806 	br	8113277c <find_file_in_directory+0x180>
8113271c:	e0bfec17 	ldw	r2,-80(fp)
81132720:	10000b0e 	bge	r2,zero,81132750 <find_file_in_directory+0x154>
81132724:	e0ffee17 	ldw	r3,-72(fp)
81132728:	e0bfeb17 	ldw	r2,-84(fp)
8113272c:	1885c83a 	sub	r2,r3,r2
81132730:	e0ffee17 	ldw	r3,-72(fp)
81132734:	e13ffe17 	ldw	r4,-8(fp)
81132738:	20c7883a 	add	r3,r4,r3
8113273c:	18c00003 	ldbu	r3,0(r3)
81132740:	e13ff904 	addi	r4,fp,-28
81132744:	2085883a 	add	r2,r4,r2
81132748:	10c00005 	stb	r3,0(r2)
8113274c:	00000b06 	br	8113277c <find_file_in_directory+0x180>
81132750:	e0ffee17 	ldw	r3,-72(fp)
81132754:	e0bfec17 	ldw	r2,-80(fp)
81132758:	1885c83a 	sub	r2,r3,r2
8113275c:	10bfffc4 	addi	r2,r2,-1
81132760:	e0ffee17 	ldw	r3,-72(fp)
81132764:	e13ffe17 	ldw	r4,-8(fp)
81132768:	20c7883a 	add	r3,r4,r3
8113276c:	18c00003 	ldbu	r3,0(r3)
81132770:	e13ffb04 	addi	r4,fp,-20
81132774:	2085883a 	add	r2,r4,r2
81132778:	10c00005 	stb	r3,0(r2)
8113277c:	e0bfee17 	ldw	r2,-72(fp)
81132780:	10800044 	addi	r2,r2,1
81132784:	e0bfee15 	stw	r2,-72(fp)
81132788:	e0ffee17 	ldw	r3,-72(fp)
8113278c:	e0bff417 	ldw	r2,-48(fp)
81132790:	18bfd616 	blt	r3,r2,811326ec <__reset+0xfb1126ec>
81132794:	e0bffd17 	ldw	r2,-12(fp)
81132798:	1000461e 	bne	r2,zero,811328b4 <find_file_in_directory+0x2b8>
8113279c:	00a04574 	movhi	r2,33045
811327a0:	10880f04 	addi	r2,r2,8252
811327a4:	1080050b 	ldhu	r2,20(r2)
811327a8:	10bfffcc 	andi	r2,r2,65535
811327ac:	1006917a 	slli	r3,r2,5
811327b0:	00a04574 	movhi	r2,33045
811327b4:	10880f04 	addi	r2,r2,8252
811327b8:	1080030b 	ldhu	r2,12(r2)
811327bc:	10bfffcc 	andi	r2,r2,65535
811327c0:	1885283a 	div	r2,r3,r2
811327c4:	e0bff715 	stw	r2,-36(fp)
811327c8:	e03ff015 	stw	zero,-64(fp)
811327cc:	00003506 	br	811328a4 <find_file_in_directory+0x2a8>
811327d0:	00a04574 	movhi	r2,33045
811327d4:	10880f04 	addi	r2,r2,8252
811327d8:	10c01317 	ldw	r3,76(r2)
811327dc:	e0bff017 	ldw	r2,-64(fp)
811327e0:	1885883a 	add	r2,r3,r2
811327e4:	1007883a 	mov	r3,r2
811327e8:	d0a09317 	ldw	r2,-32180(gp)
811327ec:	100b883a 	mov	r5,r2
811327f0:	1809883a 	mov	r4,r3
811327f4:	11309540 	call	81130954 <Read_Sector_Data>
811327f8:	10009626 	beq	r2,zero,81132a54 <find_file_in_directory+0x458>
811327fc:	e03ff115 	stw	zero,-60(fp)
81132800:	00002006 	br	81132884 <find_file_in_directory+0x288>
81132804:	e0bff117 	ldw	r2,-60(fp)
81132808:	1004917a 	slli	r2,r2,5
8113280c:	e0fff017 	ldw	r3,-64(fp)
81132810:	180f883a 	mov	r7,r3
81132814:	000d883a 	mov	r6,zero
81132818:	e17fff17 	ldw	r5,-4(fp)
8113281c:	1009883a 	mov	r4,r2
81132820:	1130d840 	call	81130d84 <Read_File_Record_At_Offset>
81132824:	e0bfff17 	ldw	r2,-4(fp)
81132828:	10800003 	ldbu	r2,0(r2)
8113282c:	10803fcc 	andi	r2,r2,255
81132830:	10803960 	cmpeqi	r2,r2,229
81132834:	1000101e 	bne	r2,zero,81132878 <find_file_in_directory+0x27c>
81132838:	e0bfff17 	ldw	r2,-4(fp)
8113283c:	10800003 	ldbu	r2,0(r2)
81132840:	10803fcc 	andi	r2,r2,255
81132844:	10000c26 	beq	r2,zero,81132878 <find_file_in_directory+0x27c>
81132848:	e0fffb04 	addi	r3,fp,-20
8113284c:	e0bff904 	addi	r2,fp,-28
81132850:	180d883a 	mov	r6,r3
81132854:	100b883a 	mov	r5,r2
81132858:	e13fff17 	ldw	r4,-4(fp)
8113285c:	1131e180 	call	81131e18 <match_file_record_to_name_ext>
81132860:	e0bff815 	stw	r2,-32(fp)
81132864:	e0bff817 	ldw	r2,-32(fp)
81132868:	10000326 	beq	r2,zero,81132878 <find_file_in_directory+0x27c>
8113286c:	00800044 	movi	r2,1
81132870:	e0bfef15 	stw	r2,-68(fp)
81132874:	00000606 	br	81132890 <find_file_in_directory+0x294>
81132878:	e0bff117 	ldw	r2,-60(fp)
8113287c:	10800044 	addi	r2,r2,1
81132880:	e0bff115 	stw	r2,-60(fp)
81132884:	e0bff117 	ldw	r2,-60(fp)
81132888:	10800410 	cmplti	r2,r2,16
8113288c:	103fdd1e 	bne	r2,zero,81132804 <__reset+0xfb112804>
81132890:	e0bfef17 	ldw	r2,-68(fp)
81132894:	1000711e 	bne	r2,zero,81132a5c <find_file_in_directory+0x460>
81132898:	e0bff017 	ldw	r2,-64(fp)
8113289c:	10800044 	addi	r2,r2,1
811328a0:	e0bff015 	stw	r2,-64(fp)
811328a4:	e0fff017 	ldw	r3,-64(fp)
811328a8:	e0bff717 	ldw	r2,-36(fp)
811328ac:	18bfc816 	blt	r3,r2,811327d0 <__reset+0xfb1127d0>
811328b0:	00006b06 	br	81132a60 <find_file_in_directory+0x464>
811328b4:	e0bfed17 	ldw	r2,-76(fp)
811328b8:	10ffff84 	addi	r3,r2,-2
811328bc:	00a04574 	movhi	r2,33045
811328c0:	10880f04 	addi	r2,r2,8252
811328c4:	10800383 	ldbu	r2,14(r2)
811328c8:	10803fcc 	andi	r2,r2,255
811328cc:	1885383a 	mul	r2,r3,r2
811328d0:	1007883a 	mov	r3,r2
811328d4:	00a04574 	movhi	r2,33045
811328d8:	10880f04 	addi	r2,r2,8252
811328dc:	10801417 	ldw	r2,80(r2)
811328e0:	1885883a 	add	r2,r3,r2
811328e4:	e0bff515 	stw	r2,-44(fp)
811328e8:	e03ff215 	stw	zero,-56(fp)
811328ec:	00003306 	br	811329bc <find_file_in_directory+0x3c0>
811328f0:	e0fff217 	ldw	r3,-56(fp)
811328f4:	e0bff517 	ldw	r2,-44(fp)
811328f8:	1885883a 	add	r2,r3,r2
811328fc:	d0e09317 	ldw	r3,-32180(gp)
81132900:	180b883a 	mov	r5,r3
81132904:	1009883a 	mov	r4,r2
81132908:	11309540 	call	81130954 <Read_Sector_Data>
8113290c:	10003226 	beq	r2,zero,811329d8 <find_file_in_directory+0x3dc>
81132910:	e03ff315 	stw	zero,-52(fp)
81132914:	00002106 	br	8113299c <find_file_in_directory+0x3a0>
81132918:	e0bff317 	ldw	r2,-52(fp)
8113291c:	1004917a 	slli	r2,r2,5
81132920:	e0ffed17 	ldw	r3,-76(fp)
81132924:	e13ff217 	ldw	r4,-56(fp)
81132928:	200f883a 	mov	r7,r4
8113292c:	180d883a 	mov	r6,r3
81132930:	e17fff17 	ldw	r5,-4(fp)
81132934:	1009883a 	mov	r4,r2
81132938:	1130d840 	call	81130d84 <Read_File_Record_At_Offset>
8113293c:	e0bfff17 	ldw	r2,-4(fp)
81132940:	10800003 	ldbu	r2,0(r2)
81132944:	10803fcc 	andi	r2,r2,255
81132948:	10803960 	cmpeqi	r2,r2,229
8113294c:	1000101e 	bne	r2,zero,81132990 <find_file_in_directory+0x394>
81132950:	e0bfff17 	ldw	r2,-4(fp)
81132954:	10800003 	ldbu	r2,0(r2)
81132958:	10803fcc 	andi	r2,r2,255
8113295c:	10000c26 	beq	r2,zero,81132990 <find_file_in_directory+0x394>
81132960:	e0fffb04 	addi	r3,fp,-20
81132964:	e0bff904 	addi	r2,fp,-28
81132968:	180d883a 	mov	r6,r3
8113296c:	100b883a 	mov	r5,r2
81132970:	e13fff17 	ldw	r4,-4(fp)
81132974:	1131e180 	call	81131e18 <match_file_record_to_name_ext>
81132978:	e0bff615 	stw	r2,-40(fp)
8113297c:	e0bff617 	ldw	r2,-40(fp)
81132980:	10000326 	beq	r2,zero,81132990 <find_file_in_directory+0x394>
81132984:	00800044 	movi	r2,1
81132988:	e0bfef15 	stw	r2,-68(fp)
8113298c:	00000606 	br	811329a8 <find_file_in_directory+0x3ac>
81132990:	e0bff317 	ldw	r2,-52(fp)
81132994:	10800044 	addi	r2,r2,1
81132998:	e0bff315 	stw	r2,-52(fp)
8113299c:	e0bff317 	ldw	r2,-52(fp)
811329a0:	10800410 	cmplti	r2,r2,16
811329a4:	103fdc1e 	bne	r2,zero,81132918 <__reset+0xfb112918>
811329a8:	e0bfef17 	ldw	r2,-68(fp)
811329ac:	10000c1e 	bne	r2,zero,811329e0 <find_file_in_directory+0x3e4>
811329b0:	e0bff217 	ldw	r2,-56(fp)
811329b4:	10800044 	addi	r2,r2,1
811329b8:	e0bff215 	stw	r2,-56(fp)
811329bc:	00a04574 	movhi	r2,33045
811329c0:	10880f04 	addi	r2,r2,8252
811329c4:	10800383 	ldbu	r2,14(r2)
811329c8:	10803fcc 	andi	r2,r2,255
811329cc:	e0fff217 	ldw	r3,-56(fp)
811329d0:	18bfc716 	blt	r3,r2,811328f0 <__reset+0xfb1128f0>
811329d4:	00000306 	br	811329e4 <find_file_in_directory+0x3e8>
811329d8:	0001883a 	nop
811329dc:	00000106 	br	811329e4 <find_file_in_directory+0x3e8>
811329e0:	0001883a 	nop
811329e4:	e0bfef17 	ldw	r2,-68(fp)
811329e8:	1000141e 	bne	r2,zero,81132a3c <find_file_in_directory+0x440>
811329ec:	e0bfed17 	ldw	r2,-76(fp)
811329f0:	e0fffc04 	addi	r3,fp,-16
811329f4:	180b883a 	mov	r5,r3
811329f8:	1009883a 	mov	r4,r2
811329fc:	1130a340 	call	81130a34 <get_cluster_flag>
81132a00:	10000c26 	beq	r2,zero,81132a34 <find_file_in_directory+0x438>
81132a04:	e0bffc0b 	ldhu	r2,-16(fp)
81132a08:	10bfffcc 	andi	r2,r2,65535
81132a0c:	10fffe0c 	andi	r3,r2,65528
81132a10:	00bffe14 	movui	r2,65528
81132a14:	1880021e 	bne	r3,r2,81132a20 <find_file_in_directory+0x424>
81132a18:	0005883a 	mov	r2,zero
81132a1c:	00001106 	br	81132a64 <find_file_in_directory+0x468>
81132a20:	e0bffc0b 	ldhu	r2,-16(fp)
81132a24:	10bfffcc 	andi	r2,r2,65535
81132a28:	10bffe0c 	andi	r2,r2,65528
81132a2c:	e0bfed15 	stw	r2,-76(fp)
81132a30:	00000206 	br	81132a3c <find_file_in_directory+0x440>
81132a34:	0005883a 	mov	r2,zero
81132a38:	00000a06 	br	81132a64 <find_file_in_directory+0x468>
81132a3c:	e0bfed17 	ldw	r2,-76(fp)
81132a40:	00fffdd4 	movui	r3,65527
81132a44:	18800616 	blt	r3,r2,81132a60 <find_file_in_directory+0x464>
81132a48:	e0bfef17 	ldw	r2,-68(fp)
81132a4c:	103f9926 	beq	r2,zero,811328b4 <__reset+0xfb1128b4>
81132a50:	00000306 	br	81132a60 <find_file_in_directory+0x464>
81132a54:	0001883a 	nop
81132a58:	00000106 	br	81132a60 <find_file_in_directory+0x464>
81132a5c:	0001883a 	nop
81132a60:	e0bfef17 	ldw	r2,-68(fp)
81132a64:	e037883a 	mov	sp,fp
81132a68:	dfc00117 	ldw	ra,4(sp)
81132a6c:	df000017 	ldw	fp,0(sp)
81132a70:	dec00204 	addi	sp,sp,8
81132a74:	f800283a 	ret

81132a78 <find_first_empty_cluster>:
81132a78:	defff504 	addi	sp,sp,-44
81132a7c:	de00012e 	bgeu	sp,et,81132a84 <find_first_empty_cluster+0xc>
81132a80:	003b68fa 	trap	3
81132a84:	dfc00a15 	stw	ra,40(sp)
81132a88:	df000915 	stw	fp,36(sp)
81132a8c:	df000904 	addi	fp,sp,36
81132a90:	e13fff15 	stw	r4,-4(fp)
81132a94:	00a04574 	movhi	r2,33045
81132a98:	10880f04 	addi	r2,r2,8252
81132a9c:	10801117 	ldw	r2,68(r2)
81132aa0:	e0bff715 	stw	r2,-36(fp)
81132aa4:	00800084 	movi	r2,2
81132aa8:	e0bff815 	stw	r2,-32(fp)
81132aac:	00bfffc4 	movi	r2,-1
81132ab0:	e0bff90d 	sth	r2,-28(fp)
81132ab4:	e03ffa15 	stw	zero,-24(fp)
81132ab8:	e03ffb15 	stw	zero,-20(fp)
81132abc:	00a04574 	movhi	r2,33045
81132ac0:	10880f04 	addi	r2,r2,8252
81132ac4:	10801417 	ldw	r2,80(r2)
81132ac8:	e0bffc15 	stw	r2,-16(fp)
81132acc:	00a04574 	movhi	r2,33045
81132ad0:	10880f04 	addi	r2,r2,8252
81132ad4:	1080058b 	ldhu	r2,22(r2)
81132ad8:	10bfffcc 	andi	r2,r2,65535
81132adc:	e0bffd15 	stw	r2,-12(fp)
81132ae0:	00a04574 	movhi	r2,33045
81132ae4:	10880f04 	addi	r2,r2,8252
81132ae8:	10800917 	ldw	r2,36(r2)
81132aec:	e0bffe15 	stw	r2,-8(fp)
81132af0:	e0bffd17 	ldw	r2,-12(fp)
81132af4:	e0fffe17 	ldw	r3,-8(fp)
81132af8:	18800b2e 	bgeu	r3,r2,81132b28 <find_first_empty_cluster+0xb0>
81132afc:	e0fffd17 	ldw	r3,-12(fp)
81132b00:	e0bffc17 	ldw	r2,-16(fp)
81132b04:	1887c83a 	sub	r3,r3,r2
81132b08:	00a04574 	movhi	r2,33045
81132b0c:	10880f04 	addi	r2,r2,8252
81132b10:	10800383 	ldbu	r2,14(r2)
81132b14:	10803fcc 	andi	r2,r2,255
81132b18:	1885203a 	divu	r2,r3,r2
81132b1c:	10800044 	addi	r2,r2,1
81132b20:	e0bffb15 	stw	r2,-20(fp)
81132b24:	00002a06 	br	81132bd0 <find_first_empty_cluster+0x158>
81132b28:	e0fffe17 	ldw	r3,-8(fp)
81132b2c:	e0bffc17 	ldw	r2,-16(fp)
81132b30:	1887c83a 	sub	r3,r3,r2
81132b34:	00a04574 	movhi	r2,33045
81132b38:	10880f04 	addi	r2,r2,8252
81132b3c:	10800383 	ldbu	r2,14(r2)
81132b40:	10803fcc 	andi	r2,r2,255
81132b44:	1885203a 	divu	r2,r3,r2
81132b48:	10800044 	addi	r2,r2,1
81132b4c:	e0bffb15 	stw	r2,-20(fp)
81132b50:	00001f06 	br	81132bd0 <find_first_empty_cluster+0x158>
81132b54:	e0bff717 	ldw	r2,-36(fp)
81132b58:	d0e09317 	ldw	r3,-32180(gp)
81132b5c:	180b883a 	mov	r5,r3
81132b60:	1009883a 	mov	r4,r2
81132b64:	11309540 	call	81130954 <Read_Sector_Data>
81132b68:	10001426 	beq	r2,zero,81132bbc <find_first_empty_cluster+0x144>
81132b6c:	e0bff817 	ldw	r2,-32(fp)
81132b70:	10803fcc 	andi	r2,r2,255
81132b74:	1085883a 	add	r2,r2,r2
81132b78:	1007883a 	mov	r3,r2
81132b7c:	d0a09517 	ldw	r2,-32172(gp)
81132b80:	10800a17 	ldw	r2,40(r2)
81132b84:	1885883a 	add	r2,r3,r2
81132b88:	1080002b 	ldhuio	r2,0(r2)
81132b8c:	10bfffcc 	andi	r2,r2,65535
81132b90:	e0bff90d 	sth	r2,-28(fp)
81132b94:	e0bff90f 	ldh	r2,-28(fp)
81132b98:	10000726 	beq	r2,zero,81132bb8 <find_first_empty_cluster+0x140>
81132b9c:	e0bff817 	ldw	r2,-32(fp)
81132ba0:	10800044 	addi	r2,r2,1
81132ba4:	e0bff815 	stw	r2,-32(fp)
81132ba8:	e0bff817 	ldw	r2,-32(fp)
81132bac:	10803fcc 	andi	r2,r2,255
81132bb0:	103fee1e 	bne	r2,zero,81132b6c <__reset+0xfb112b6c>
81132bb4:	00000106 	br	81132bbc <find_first_empty_cluster+0x144>
81132bb8:	0001883a 	nop
81132bbc:	e0bff90f 	ldh	r2,-28(fp)
81132bc0:	10000926 	beq	r2,zero,81132be8 <find_first_empty_cluster+0x170>
81132bc4:	e0bff717 	ldw	r2,-36(fp)
81132bc8:	10800044 	addi	r2,r2,1
81132bcc:	e0bff715 	stw	r2,-36(fp)
81132bd0:	00a04574 	movhi	r2,33045
81132bd4:	10880f04 	addi	r2,r2,8252
81132bd8:	10c01217 	ldw	r3,72(r2)
81132bdc:	e0bff717 	ldw	r2,-36(fp)
81132be0:	18bfdc1e 	bne	r3,r2,81132b54 <__reset+0xfb112b54>
81132be4:	00000106 	br	81132bec <find_first_empty_cluster+0x174>
81132be8:	0001883a 	nop
81132bec:	e0bff90f 	ldh	r2,-28(fp)
81132bf0:	1000081e 	bne	r2,zero,81132c14 <find_first_empty_cluster+0x19c>
81132bf4:	e0bff90f 	ldh	r2,-28(fp)
81132bf8:	e0fffb17 	ldw	r3,-20(fp)
81132bfc:	18800536 	bltu	r3,r2,81132c14 <find_first_empty_cluster+0x19c>
81132c00:	e0bfff17 	ldw	r2,-4(fp)
81132c04:	e0fff817 	ldw	r3,-32(fp)
81132c08:	10c00015 	stw	r3,0(r2)
81132c0c:	00800044 	movi	r2,1
81132c10:	e0bffa15 	stw	r2,-24(fp)
81132c14:	e0bffa17 	ldw	r2,-24(fp)
81132c18:	e037883a 	mov	sp,fp
81132c1c:	dfc00117 	ldw	ra,4(sp)
81132c20:	df000017 	ldw	fp,0(sp)
81132c24:	dec00204 	addi	sp,sp,8
81132c28:	f800283a 	ret

81132c2c <find_first_empty_record_in_a_subdirectory>:
81132c2c:	defff604 	addi	sp,sp,-40
81132c30:	de00012e 	bgeu	sp,et,81132c38 <find_first_empty_record_in_a_subdirectory+0xc>
81132c34:	003b68fa 	trap	3
81132c38:	dfc00915 	stw	ra,36(sp)
81132c3c:	df000815 	stw	fp,32(sp)
81132c40:	df000804 	addi	fp,sp,32
81132c44:	e13fff15 	stw	r4,-4(fp)
81132c48:	00bfffc4 	movi	r2,-1
81132c4c:	e0bff815 	stw	r2,-32(fp)
81132c50:	e0bfff17 	ldw	r2,-4(fp)
81132c54:	e0bff915 	stw	r2,-28(fp)
81132c58:	e0bff917 	ldw	r2,-28(fp)
81132c5c:	10ffff84 	addi	r3,r2,-2
81132c60:	00a04574 	movhi	r2,33045
81132c64:	10880f04 	addi	r2,r2,8252
81132c68:	10800383 	ldbu	r2,14(r2)
81132c6c:	10803fcc 	andi	r2,r2,255
81132c70:	1885383a 	mul	r2,r3,r2
81132c74:	1007883a 	mov	r3,r2
81132c78:	00a04574 	movhi	r2,33045
81132c7c:	10880f04 	addi	r2,r2,8252
81132c80:	10801417 	ldw	r2,80(r2)
81132c84:	1885883a 	add	r2,r3,r2
81132c88:	e0bffc15 	stw	r2,-16(fp)
81132c8c:	e03ffa15 	stw	zero,-24(fp)
81132c90:	00002c06 	br	81132d44 <find_first_empty_record_in_a_subdirectory+0x118>
81132c94:	e0fffa17 	ldw	r3,-24(fp)
81132c98:	e0bffc17 	ldw	r2,-16(fp)
81132c9c:	1885883a 	add	r2,r3,r2
81132ca0:	d0e09317 	ldw	r3,-32180(gp)
81132ca4:	180b883a 	mov	r5,r3
81132ca8:	1009883a 	mov	r4,r2
81132cac:	11309540 	call	81130954 <Read_Sector_Data>
81132cb0:	10002b26 	beq	r2,zero,81132d60 <find_first_empty_record_in_a_subdirectory+0x134>
81132cb4:	e03ffb15 	stw	zero,-20(fp)
81132cb8:	00001c06 	br	81132d2c <find_first_empty_record_in_a_subdirectory+0x100>
81132cbc:	e0bffb17 	ldw	r2,-20(fp)
81132cc0:	1004917a 	slli	r2,r2,5
81132cc4:	1007883a 	mov	r3,r2
81132cc8:	d0a09517 	ldw	r2,-32172(gp)
81132ccc:	10800a17 	ldw	r2,40(r2)
81132cd0:	1885883a 	add	r2,r3,r2
81132cd4:	10800023 	ldbuio	r2,0(r2)
81132cd8:	10803fcc 	andi	r2,r2,255
81132cdc:	10803fcc 	andi	r2,r2,255
81132ce0:	e0bffd0d 	sth	r2,-12(fp)
81132ce4:	e0bffd0b 	ldhu	r2,-12(fp)
81132ce8:	10803960 	cmpeqi	r2,r2,229
81132cec:	1000021e 	bne	r2,zero,81132cf8 <find_first_empty_record_in_a_subdirectory+0xcc>
81132cf0:	e0bffd0b 	ldhu	r2,-12(fp)
81132cf4:	10000a1e 	bne	r2,zero,81132d20 <find_first_empty_record_in_a_subdirectory+0xf4>
81132cf8:	e0bffa17 	ldw	r2,-24(fp)
81132cfc:	1006913a 	slli	r3,r2,4
81132d00:	e0bffb17 	ldw	r2,-20(fp)
81132d04:	1885883a 	add	r2,r3,r2
81132d08:	1006943a 	slli	r3,r2,16
81132d0c:	e0bff917 	ldw	r2,-28(fp)
81132d10:	1884b03a 	or	r2,r3,r2
81132d14:	e0bff815 	stw	r2,-32(fp)
81132d18:	e0bff817 	ldw	r2,-32(fp)
81132d1c:	00005306 	br	81132e6c <find_first_empty_record_in_a_subdirectory+0x240>
81132d20:	e0bffb17 	ldw	r2,-20(fp)
81132d24:	10800044 	addi	r2,r2,1
81132d28:	e0bffb15 	stw	r2,-20(fp)
81132d2c:	e0bffb17 	ldw	r2,-20(fp)
81132d30:	10800410 	cmplti	r2,r2,16
81132d34:	103fe11e 	bne	r2,zero,81132cbc <__reset+0xfb112cbc>
81132d38:	e0bffa17 	ldw	r2,-24(fp)
81132d3c:	10800044 	addi	r2,r2,1
81132d40:	e0bffa15 	stw	r2,-24(fp)
81132d44:	00a04574 	movhi	r2,33045
81132d48:	10880f04 	addi	r2,r2,8252
81132d4c:	10800383 	ldbu	r2,14(r2)
81132d50:	10803fcc 	andi	r2,r2,255
81132d54:	e0fffa17 	ldw	r3,-24(fp)
81132d58:	18bfce16 	blt	r3,r2,81132c94 <__reset+0xfb112c94>
81132d5c:	00000106 	br	81132d64 <find_first_empty_record_in_a_subdirectory+0x138>
81132d60:	0001883a 	nop
81132d64:	e0bff817 	ldw	r2,-32(fp)
81132d68:	1000390e 	bge	r2,zero,81132e50 <find_first_empty_record_in_a_subdirectory+0x224>
81132d6c:	e0bff917 	ldw	r2,-28(fp)
81132d70:	e0fffd84 	addi	r3,fp,-10
81132d74:	180b883a 	mov	r5,r3
81132d78:	1009883a 	mov	r4,r2
81132d7c:	1130a340 	call	81130a34 <get_cluster_flag>
81132d80:	10003126 	beq	r2,zero,81132e48 <find_first_empty_record_in_a_subdirectory+0x21c>
81132d84:	e0bffd8b 	ldhu	r2,-10(fp)
81132d88:	10bfffcc 	andi	r2,r2,65535
81132d8c:	10fffe0c 	andi	r3,r2,65528
81132d90:	00bffe14 	movui	r2,65528
81132d94:	18802e1e 	bne	r3,r2,81132e50 <find_first_empty_record_in_a_subdirectory+0x224>
81132d98:	e0bffe04 	addi	r2,fp,-8
81132d9c:	1009883a 	mov	r4,r2
81132da0:	1132a780 	call	81132a78 <find_first_empty_cluster>
81132da4:	10002326 	beq	r2,zero,81132e34 <find_first_empty_record_in_a_subdirectory+0x208>
81132da8:	e0bff917 	ldw	r2,-28(fp)
81132dac:	e0fffe17 	ldw	r3,-8(fp)
81132db0:	18ffffcc 	andi	r3,r3,65535
81132db4:	18e0001c 	xori	r3,r3,32768
81132db8:	18e00004 	addi	r3,r3,-32768
81132dbc:	01800044 	movi	r6,1
81132dc0:	180b883a 	mov	r5,r3
81132dc4:	1009883a 	mov	r4,r2
81132dc8:	1130af00 	call	81130af0 <mark_cluster>
81132dcc:	10001926 	beq	r2,zero,81132e34 <find_first_empty_record_in_a_subdirectory+0x208>
81132dd0:	e0bffe17 	ldw	r2,-8(fp)
81132dd4:	01800044 	movi	r6,1
81132dd8:	017fffc4 	movi	r5,-1
81132ddc:	1009883a 	mov	r4,r2
81132de0:	1130af00 	call	81130af0 <mark_cluster>
81132de4:	10001326 	beq	r2,zero,81132e34 <find_first_empty_record_in_a_subdirectory+0x208>
81132de8:	e0bff917 	ldw	r2,-28(fp)
81132dec:	e0fffe17 	ldw	r3,-8(fp)
81132df0:	18ffffcc 	andi	r3,r3,65535
81132df4:	18e0001c 	xori	r3,r3,32768
81132df8:	18e00004 	addi	r3,r3,-32768
81132dfc:	000d883a 	mov	r6,zero
81132e00:	180b883a 	mov	r5,r3
81132e04:	1009883a 	mov	r4,r2
81132e08:	1130af00 	call	81130af0 <mark_cluster>
81132e0c:	10000926 	beq	r2,zero,81132e34 <find_first_empty_record_in_a_subdirectory+0x208>
81132e10:	e0bffe17 	ldw	r2,-8(fp)
81132e14:	000d883a 	mov	r6,zero
81132e18:	017fffc4 	movi	r5,-1
81132e1c:	1009883a 	mov	r4,r2
81132e20:	1130af00 	call	81130af0 <mark_cluster>
81132e24:	10000326 	beq	r2,zero,81132e34 <find_first_empty_record_in_a_subdirectory+0x208>
81132e28:	11309000 	call	81130900 <Save_Modified_Sector>
81132e2c:	e0bffe17 	ldw	r2,-8(fp)
81132e30:	e0bff815 	stw	r2,-32(fp)
81132e34:	e0bffd8b 	ldhu	r2,-10(fp)
81132e38:	10bfffcc 	andi	r2,r2,65535
81132e3c:	10bffe0c 	andi	r2,r2,65528
81132e40:	e0bff915 	stw	r2,-28(fp)
81132e44:	00000206 	br	81132e50 <find_first_empty_record_in_a_subdirectory+0x224>
81132e48:	00bfffc4 	movi	r2,-1
81132e4c:	e0bff815 	stw	r2,-32(fp)
81132e50:	e0bff917 	ldw	r2,-28(fp)
81132e54:	00fffdd4 	movui	r3,65527
81132e58:	18800316 	blt	r3,r2,81132e68 <find_first_empty_record_in_a_subdirectory+0x23c>
81132e5c:	e0bff817 	ldw	r2,-32(fp)
81132e60:	10bfffe0 	cmpeqi	r2,r2,-1
81132e64:	103f7c1e 	bne	r2,zero,81132c58 <__reset+0xfb112c58>
81132e68:	e0bff817 	ldw	r2,-32(fp)
81132e6c:	e037883a 	mov	sp,fp
81132e70:	dfc00117 	ldw	ra,4(sp)
81132e74:	df000017 	ldw	fp,0(sp)
81132e78:	dec00204 	addi	sp,sp,8
81132e7c:	f800283a 	ret

81132e80 <find_first_empty_record_in_root_directory>:
81132e80:	defff904 	addi	sp,sp,-28
81132e84:	de00012e 	bgeu	sp,et,81132e8c <find_first_empty_record_in_root_directory+0xc>
81132e88:	003b68fa 	trap	3
81132e8c:	dfc00615 	stw	ra,24(sp)
81132e90:	df000515 	stw	fp,20(sp)
81132e94:	df000504 	addi	fp,sp,20
81132e98:	00a04574 	movhi	r2,33045
81132e9c:	10880f04 	addi	r2,r2,8252
81132ea0:	1080050b 	ldhu	r2,20(r2)
81132ea4:	10bfffcc 	andi	r2,r2,65535
81132ea8:	1006917a 	slli	r3,r2,5
81132eac:	00a04574 	movhi	r2,33045
81132eb0:	10880f04 	addi	r2,r2,8252
81132eb4:	1080030b 	ldhu	r2,12(r2)
81132eb8:	10bfffcc 	andi	r2,r2,65535
81132ebc:	1885283a 	div	r2,r3,r2
81132ec0:	e0bffd15 	stw	r2,-12(fp)
81132ec4:	00bfffc4 	movi	r2,-1
81132ec8:	e0bffe15 	stw	r2,-8(fp)
81132ecc:	e03ffb15 	stw	zero,-20(fp)
81132ed0:	00002d06 	br	81132f88 <find_first_empty_record_in_root_directory+0x108>
81132ed4:	00a04574 	movhi	r2,33045
81132ed8:	10880f04 	addi	r2,r2,8252
81132edc:	10c01317 	ldw	r3,76(r2)
81132ee0:	e0bffb17 	ldw	r2,-20(fp)
81132ee4:	1885883a 	add	r2,r3,r2
81132ee8:	1007883a 	mov	r3,r2
81132eec:	d0a09317 	ldw	r2,-32180(gp)
81132ef0:	100b883a 	mov	r5,r2
81132ef4:	1809883a 	mov	r4,r3
81132ef8:	11309540 	call	81130954 <Read_Sector_Data>
81132efc:	10002626 	beq	r2,zero,81132f98 <find_first_empty_record_in_root_directory+0x118>
81132f00:	e03ffc15 	stw	zero,-16(fp)
81132f04:	00001a06 	br	81132f70 <find_first_empty_record_in_root_directory+0xf0>
81132f08:	e0bffc17 	ldw	r2,-16(fp)
81132f0c:	1004917a 	slli	r2,r2,5
81132f10:	1007883a 	mov	r3,r2
81132f14:	d0a09517 	ldw	r2,-32172(gp)
81132f18:	10800a17 	ldw	r2,40(r2)
81132f1c:	1885883a 	add	r2,r3,r2
81132f20:	10800023 	ldbuio	r2,0(r2)
81132f24:	10803fcc 	andi	r2,r2,255
81132f28:	10803fcc 	andi	r2,r2,255
81132f2c:	e0bfff0d 	sth	r2,-4(fp)
81132f30:	e0bfff0b 	ldhu	r2,-4(fp)
81132f34:	10803960 	cmpeqi	r2,r2,229
81132f38:	1000021e 	bne	r2,zero,81132f44 <find_first_empty_record_in_root_directory+0xc4>
81132f3c:	e0bfff0b 	ldhu	r2,-4(fp)
81132f40:	1000081e 	bne	r2,zero,81132f64 <find_first_empty_record_in_root_directory+0xe4>
81132f44:	e0bffb17 	ldw	r2,-20(fp)
81132f48:	1006913a 	slli	r3,r2,4
81132f4c:	e0bffc17 	ldw	r2,-16(fp)
81132f50:	1885883a 	add	r2,r3,r2
81132f54:	1004943a 	slli	r2,r2,16
81132f58:	e0bffe15 	stw	r2,-8(fp)
81132f5c:	e0bffe17 	ldw	r2,-8(fp)
81132f60:	00000f06 	br	81132fa0 <find_first_empty_record_in_root_directory+0x120>
81132f64:	e0bffc17 	ldw	r2,-16(fp)
81132f68:	10800044 	addi	r2,r2,1
81132f6c:	e0bffc15 	stw	r2,-16(fp)
81132f70:	e0bffc17 	ldw	r2,-16(fp)
81132f74:	10800410 	cmplti	r2,r2,16
81132f78:	103fe31e 	bne	r2,zero,81132f08 <__reset+0xfb112f08>
81132f7c:	e0bffb17 	ldw	r2,-20(fp)
81132f80:	10800044 	addi	r2,r2,1
81132f84:	e0bffb15 	stw	r2,-20(fp)
81132f88:	e0fffb17 	ldw	r3,-20(fp)
81132f8c:	e0bffd17 	ldw	r2,-12(fp)
81132f90:	18bfd016 	blt	r3,r2,81132ed4 <__reset+0xfb112ed4>
81132f94:	00000106 	br	81132f9c <find_first_empty_record_in_root_directory+0x11c>
81132f98:	0001883a 	nop
81132f9c:	e0bffe17 	ldw	r2,-8(fp)
81132fa0:	e037883a 	mov	sp,fp
81132fa4:	dfc00117 	ldw	ra,4(sp)
81132fa8:	df000017 	ldw	fp,0(sp)
81132fac:	dec00204 	addi	sp,sp,8
81132fb0:	f800283a 	ret

81132fb4 <convert_filename_to_name_extension>:
81132fb4:	defffa04 	addi	sp,sp,-24
81132fb8:	de00012e 	bgeu	sp,et,81132fc0 <convert_filename_to_name_extension+0xc>
81132fbc:	003b68fa 	trap	3
81132fc0:	df000515 	stw	fp,20(sp)
81132fc4:	df000504 	addi	fp,sp,20
81132fc8:	e13ffd15 	stw	r4,-12(fp)
81132fcc:	e17ffe15 	stw	r5,-8(fp)
81132fd0:	e1bfff15 	stw	r6,-4(fp)
81132fd4:	e03ffc15 	stw	zero,-16(fp)
81132fd8:	e03ffb15 	stw	zero,-20(fp)
81132fdc:	00002506 	br	81133074 <convert_filename_to_name_extension+0xc0>
81132fe0:	e0bffc17 	ldw	r2,-16(fp)
81132fe4:	e0fffd17 	ldw	r3,-12(fp)
81132fe8:	1885883a 	add	r2,r3,r2
81132fec:	10800003 	ldbu	r2,0(r2)
81132ff0:	10803fcc 	andi	r2,r2,255
81132ff4:	1080201c 	xori	r2,r2,128
81132ff8:	10bfe004 	addi	r2,r2,-128
81132ffc:	10800ba0 	cmpeqi	r2,r2,46
81133000:	1000141e 	bne	r2,zero,81133054 <convert_filename_to_name_extension+0xa0>
81133004:	e0bffb17 	ldw	r2,-20(fp)
81133008:	e0fffe17 	ldw	r3,-8(fp)
8113300c:	1885883a 	add	r2,r3,r2
81133010:	e0fffc17 	ldw	r3,-16(fp)
81133014:	e13ffd17 	ldw	r4,-12(fp)
81133018:	20c7883a 	add	r3,r4,r3
8113301c:	18c00003 	ldbu	r3,0(r3)
81133020:	10c00005 	stb	r3,0(r2)
81133024:	e0bffc17 	ldw	r2,-16(fp)
81133028:	e0fffd17 	ldw	r3,-12(fp)
8113302c:	1885883a 	add	r2,r3,r2
81133030:	10800003 	ldbu	r2,0(r2)
81133034:	10803fcc 	andi	r2,r2,255
81133038:	1080201c 	xori	r2,r2,128
8113303c:	10bfe004 	addi	r2,r2,-128
81133040:	10000926 	beq	r2,zero,81133068 <convert_filename_to_name_extension+0xb4>
81133044:	e0bffc17 	ldw	r2,-16(fp)
81133048:	10800044 	addi	r2,r2,1
8113304c:	e0bffc15 	stw	r2,-16(fp)
81133050:	00000506 	br	81133068 <convert_filename_to_name_extension+0xb4>
81133054:	e0bffb17 	ldw	r2,-20(fp)
81133058:	e0fffe17 	ldw	r3,-8(fp)
8113305c:	1885883a 	add	r2,r3,r2
81133060:	00c00804 	movi	r3,32
81133064:	10c00005 	stb	r3,0(r2)
81133068:	e0bffb17 	ldw	r2,-20(fp)
8113306c:	10800044 	addi	r2,r2,1
81133070:	e0bffb15 	stw	r2,-20(fp)
81133074:	e0bffb17 	ldw	r2,-20(fp)
81133078:	10800210 	cmplti	r2,r2,8
8113307c:	103fd81e 	bne	r2,zero,81132fe0 <__reset+0xfb112fe0>
81133080:	e0bffc17 	ldw	r2,-16(fp)
81133084:	e0fffd17 	ldw	r3,-12(fp)
81133088:	1885883a 	add	r2,r3,r2
8113308c:	10800003 	ldbu	r2,0(r2)
81133090:	10803fcc 	andi	r2,r2,255
81133094:	1080201c 	xori	r2,r2,128
81133098:	10bfe004 	addi	r2,r2,-128
8113309c:	10800b98 	cmpnei	r2,r2,46
811330a0:	1000031e 	bne	r2,zero,811330b0 <convert_filename_to_name_extension+0xfc>
811330a4:	e0bffc17 	ldw	r2,-16(fp)
811330a8:	10800044 	addi	r2,r2,1
811330ac:	e0bffc15 	stw	r2,-16(fp)
811330b0:	e03ffb15 	stw	zero,-20(fp)
811330b4:	00001c06 	br	81133128 <convert_filename_to_name_extension+0x174>
811330b8:	e0bffc17 	ldw	r2,-16(fp)
811330bc:	e0fffd17 	ldw	r3,-12(fp)
811330c0:	1885883a 	add	r2,r3,r2
811330c4:	10800003 	ldbu	r2,0(r2)
811330c8:	10803fcc 	andi	r2,r2,255
811330cc:	1080201c 	xori	r2,r2,128
811330d0:	10bfe004 	addi	r2,r2,-128
811330d4:	10000c26 	beq	r2,zero,81133108 <convert_filename_to_name_extension+0x154>
811330d8:	e0bffb17 	ldw	r2,-20(fp)
811330dc:	e0ffff17 	ldw	r3,-4(fp)
811330e0:	1885883a 	add	r2,r3,r2
811330e4:	e0fffc17 	ldw	r3,-16(fp)
811330e8:	e13ffd17 	ldw	r4,-12(fp)
811330ec:	20c7883a 	add	r3,r4,r3
811330f0:	18c00003 	ldbu	r3,0(r3)
811330f4:	10c00005 	stb	r3,0(r2)
811330f8:	e0bffc17 	ldw	r2,-16(fp)
811330fc:	10800044 	addi	r2,r2,1
81133100:	e0bffc15 	stw	r2,-16(fp)
81133104:	00000506 	br	8113311c <convert_filename_to_name_extension+0x168>
81133108:	e0bffb17 	ldw	r2,-20(fp)
8113310c:	e0ffff17 	ldw	r3,-4(fp)
81133110:	1885883a 	add	r2,r3,r2
81133114:	00c00804 	movi	r3,32
81133118:	10c00005 	stb	r3,0(r2)
8113311c:	e0bffb17 	ldw	r2,-20(fp)
81133120:	10800044 	addi	r2,r2,1
81133124:	e0bffb15 	stw	r2,-20(fp)
81133128:	e0bffb17 	ldw	r2,-20(fp)
8113312c:	108000d0 	cmplti	r2,r2,3
81133130:	103fe11e 	bne	r2,zero,811330b8 <__reset+0xfb1130b8>
81133134:	0001883a 	nop
81133138:	e037883a 	mov	sp,fp
8113313c:	df000017 	ldw	fp,0(sp)
81133140:	dec00104 	addi	sp,sp,4
81133144:	f800283a 	ret

81133148 <create_file>:
81133148:	defff504 	addi	sp,sp,-44
8113314c:	de00012e 	bgeu	sp,et,81133154 <create_file+0xc>
81133150:	003b68fa 	trap	3
81133154:	dfc00a15 	stw	ra,40(sp)
81133158:	df000915 	stw	fp,36(sp)
8113315c:	df000904 	addi	fp,sp,36
81133160:	e13ffd15 	stw	r4,-12(fp)
81133164:	e17ffe15 	stw	r5,-8(fp)
81133168:	e1bfff15 	stw	r6,-4(fp)
8113316c:	e03ff715 	stw	zero,-36(fp)
81133170:	e0bffc04 	addi	r2,fp,-16
81133174:	1009883a 	mov	r4,r2
81133178:	1132a780 	call	81132a78 <find_first_empty_cluster>
8113317c:	1000a026 	beq	r2,zero,81133400 <create_file+0x2b8>
81133180:	e0bfff17 	ldw	r2,-4(fp)
81133184:	10800a17 	ldw	r2,40(r2)
81133188:	1000031e 	bne	r2,zero,81133198 <create_file+0x50>
8113318c:	1132e800 	call	81132e80 <find_first_empty_record_in_root_directory>
81133190:	e0bff815 	stw	r2,-32(fp)
81133194:	00000606 	br	811331b0 <create_file+0x68>
81133198:	e0bfff17 	ldw	r2,-4(fp)
8113319c:	1080058b 	ldhu	r2,22(r2)
811331a0:	10bfffcc 	andi	r2,r2,65535
811331a4:	1009883a 	mov	r4,r2
811331a8:	1132c2c0 	call	81132c2c <find_first_empty_record_in_a_subdirectory>
811331ac:	e0bff815 	stw	r2,-32(fp)
811331b0:	e0bff817 	ldw	r2,-32(fp)
811331b4:	10009216 	blt	r2,zero,81133400 <create_file+0x2b8>
811331b8:	e13ffd17 	ldw	r4,-12(fp)
811331bc:	1131d580 	call	81131d58 <get_dir_divider_location>
811331c0:	e0bff915 	stw	r2,-28(fp)
811331c4:	e03ffa15 	stw	zero,-24(fp)
811331c8:	00000b06 	br	811331f8 <create_file+0xb0>
811331cc:	e0fffa17 	ldw	r3,-24(fp)
811331d0:	e0bff917 	ldw	r2,-28(fp)
811331d4:	1885883a 	add	r2,r3,r2
811331d8:	10800044 	addi	r2,r2,1
811331dc:	e0bffa15 	stw	r2,-24(fp)
811331e0:	e0bffa17 	ldw	r2,-24(fp)
811331e4:	e0fffd17 	ldw	r3,-12(fp)
811331e8:	1885883a 	add	r2,r3,r2
811331ec:	1009883a 	mov	r4,r2
811331f0:	1131d580 	call	81131d58 <get_dir_divider_location>
811331f4:	e0bff915 	stw	r2,-28(fp)
811331f8:	e0bff917 	ldw	r2,-28(fp)
811331fc:	00bff316 	blt	zero,r2,811331cc <__reset+0xfb1131cc>
81133200:	e0bffa17 	ldw	r2,-24(fp)
81133204:	e0fffd17 	ldw	r3,-12(fp)
81133208:	1887883a 	add	r3,r3,r2
8113320c:	e13ffe17 	ldw	r4,-8(fp)
81133210:	e0bffe17 	ldw	r2,-8(fp)
81133214:	10800204 	addi	r2,r2,8
81133218:	100d883a 	mov	r6,r2
8113321c:	200b883a 	mov	r5,r4
81133220:	1809883a 	mov	r4,r3
81133224:	1132fb40 	call	81132fb4 <convert_filename_to_name_extension>
81133228:	e0bffe17 	ldw	r2,-8(fp)
8113322c:	100002c5 	stb	zero,11(r2)
81133230:	e0bffe17 	ldw	r2,-8(fp)
81133234:	1000030d 	sth	zero,12(r2)
81133238:	e0bffe17 	ldw	r2,-8(fp)
8113323c:	1000038d 	sth	zero,14(r2)
81133240:	e0bffe17 	ldw	r2,-8(fp)
81133244:	1000040d 	sth	zero,16(r2)
81133248:	e0bffe17 	ldw	r2,-8(fp)
8113324c:	1000048d 	sth	zero,18(r2)
81133250:	e0bffe17 	ldw	r2,-8(fp)
81133254:	1000050d 	sth	zero,20(r2)
81133258:	e0bffc17 	ldw	r2,-16(fp)
8113325c:	1007883a 	mov	r3,r2
81133260:	e0bffe17 	ldw	r2,-8(fp)
81133264:	10c0058d 	sth	r3,22(r2)
81133268:	e0bffe17 	ldw	r2,-8(fp)
8113326c:	10000615 	stw	zero,24(r2)
81133270:	e0fffc17 	ldw	r3,-16(fp)
81133274:	e0bffe17 	ldw	r2,-8(fp)
81133278:	10c00715 	stw	r3,28(r2)
8113327c:	e0bffe17 	ldw	r2,-8(fp)
81133280:	10000815 	stw	zero,32(r2)
81133284:	e0bffe17 	ldw	r2,-8(fp)
81133288:	10000915 	stw	zero,36(r2)
8113328c:	e0bff817 	ldw	r2,-32(fp)
81133290:	10ffffcc 	andi	r3,r2,65535
81133294:	e0bffe17 	ldw	r2,-8(fp)
81133298:	10c00a15 	stw	r3,40(r2)
8113329c:	e0bff817 	ldw	r2,-32(fp)
811332a0:	1004d43a 	srli	r2,r2,16
811332a4:	1000010e 	bge	r2,zero,811332ac <create_file+0x164>
811332a8:	108003c4 	addi	r2,r2,15
811332ac:	1005d13a 	srai	r2,r2,4
811332b0:	1007883a 	mov	r3,r2
811332b4:	e0bffe17 	ldw	r2,-8(fp)
811332b8:	10c00b15 	stw	r3,44(r2)
811332bc:	e0bff817 	ldw	r2,-32(fp)
811332c0:	1004d43a 	srli	r2,r2,16
811332c4:	1007883a 	mov	r3,r2
811332c8:	00a00034 	movhi	r2,32768
811332cc:	108003c4 	addi	r2,r2,15
811332d0:	1884703a 	and	r2,r3,r2
811332d4:	1000040e 	bge	r2,zero,811332e8 <create_file+0x1a0>
811332d8:	10bfffc4 	addi	r2,r2,-1
811332dc:	00fffc04 	movi	r3,-16
811332e0:	10c4b03a 	or	r2,r2,r3
811332e4:	10800044 	addi	r2,r2,1
811332e8:	1004917a 	slli	r2,r2,5
811332ec:	1007883a 	mov	r3,r2
811332f0:	e0bffe17 	ldw	r2,-8(fp)
811332f4:	10c00c0d 	sth	r3,48(r2)
811332f8:	e0bfff17 	ldw	r2,-4(fp)
811332fc:	1080058b 	ldhu	r2,22(r2)
81133300:	10ffffcc 	andi	r3,r2,65535
81133304:	e0bffe17 	ldw	r2,-8(fp)
81133308:	10c00d15 	stw	r3,52(r2)
8113330c:	e0bffe17 	ldw	r2,-8(fp)
81133310:	00c00044 	movi	r3,1
81133314:	10c00f15 	stw	r3,60(r2)
81133318:	e0bffe17 	ldw	r2,-8(fp)
8113331c:	00c00044 	movi	r3,1
81133320:	10c00e15 	stw	r3,56(r2)
81133324:	e0bffe17 	ldw	r2,-8(fp)
81133328:	10800a17 	ldw	r2,40(r2)
8113332c:	1000071e 	bne	r2,zero,8113334c <create_file+0x204>
81133330:	00a04574 	movhi	r2,33045
81133334:	10880f04 	addi	r2,r2,8252
81133338:	10c01317 	ldw	r3,76(r2)
8113333c:	e0bffe17 	ldw	r2,-8(fp)
81133340:	10800b17 	ldw	r2,44(r2)
81133344:	1885883a 	add	r2,r3,r2
81133348:	00000f06 	br	81133388 <create_file+0x240>
8113334c:	00a04574 	movhi	r2,33045
81133350:	10880f04 	addi	r2,r2,8252
81133354:	10c01417 	ldw	r3,80(r2)
81133358:	e0bffe17 	ldw	r2,-8(fp)
8113335c:	10800a17 	ldw	r2,40(r2)
81133360:	113fff84 	addi	r4,r2,-2
81133364:	00a04574 	movhi	r2,33045
81133368:	10880f04 	addi	r2,r2,8252
8113336c:	10800383 	ldbu	r2,14(r2)
81133370:	10803fcc 	andi	r2,r2,255
81133374:	2085383a 	mul	r2,r4,r2
81133378:	1887883a 	add	r3,r3,r2
8113337c:	e0bffe17 	ldw	r2,-8(fp)
81133380:	10800b17 	ldw	r2,44(r2)
81133384:	1885883a 	add	r2,r3,r2
81133388:	e0bffb15 	stw	r2,-20(fp)
8113338c:	e0bffb17 	ldw	r2,-20(fp)
81133390:	d0e09317 	ldw	r3,-32180(gp)
81133394:	180b883a 	mov	r5,r3
81133398:	1009883a 	mov	r4,r2
8113339c:	11309540 	call	81130954 <Read_Sector_Data>
811333a0:	10001726 	beq	r2,zero,81133400 <create_file+0x2b8>
811333a4:	e0bffe17 	ldw	r2,-8(fp)
811333a8:	10800c0b 	ldhu	r2,48(r2)
811333ac:	10bfffcc 	andi	r2,r2,65535
811333b0:	10a0001c 	xori	r2,r2,32768
811333b4:	10a00004 	addi	r2,r2,-32768
811333b8:	e17ffe17 	ldw	r5,-8(fp)
811333bc:	1009883a 	mov	r4,r2
811333c0:	11310080 	call	81131008 <Write_File_Record_At_Offset>
811333c4:	10000e26 	beq	r2,zero,81133400 <create_file+0x2b8>
811333c8:	11309000 	call	81130900 <Save_Modified_Sector>
811333cc:	e0bffc17 	ldw	r2,-16(fp)
811333d0:	01800044 	movi	r6,1
811333d4:	017fffc4 	movi	r5,-1
811333d8:	1009883a 	mov	r4,r2
811333dc:	1130af00 	call	81130af0 <mark_cluster>
811333e0:	e0bffc17 	ldw	r2,-16(fp)
811333e4:	000d883a 	mov	r6,zero
811333e8:	017fffc4 	movi	r5,-1
811333ec:	1009883a 	mov	r4,r2
811333f0:	1130af00 	call	81130af0 <mark_cluster>
811333f4:	10000226 	beq	r2,zero,81133400 <create_file+0x2b8>
811333f8:	00800044 	movi	r2,1
811333fc:	e0bff715 	stw	r2,-36(fp)
81133400:	e0bff717 	ldw	r2,-36(fp)
81133404:	e037883a 	mov	sp,fp
81133408:	dfc00117 	ldw	ra,4(sp)
8113340c:	df000017 	ldw	fp,0(sp)
81133410:	dec00204 	addi	sp,sp,8
81133414:	f800283a 	ret

81133418 <copy_file_record_name_to_string>:
81133418:	defffb04 	addi	sp,sp,-20
8113341c:	de00012e 	bgeu	sp,et,81133424 <copy_file_record_name_to_string+0xc>
81133420:	003b68fa 	trap	3
81133424:	df000415 	stw	fp,16(sp)
81133428:	df000404 	addi	fp,sp,16
8113342c:	e13ffe15 	stw	r4,-8(fp)
81133430:	e17fff15 	stw	r5,-4(fp)
81133434:	e03ffd15 	stw	zero,-12(fp)
81133438:	e03ffc15 	stw	zero,-16(fp)
8113343c:	00001506 	br	81133494 <copy_file_record_name_to_string+0x7c>
81133440:	e0fffe17 	ldw	r3,-8(fp)
81133444:	e0bffc17 	ldw	r2,-16(fp)
81133448:	1885883a 	add	r2,r3,r2
8113344c:	10800003 	ldbu	r2,0(r2)
81133450:	10803fcc 	andi	r2,r2,255
81133454:	10800820 	cmpeqi	r2,r2,32
81133458:	10000b1e 	bne	r2,zero,81133488 <copy_file_record_name_to_string+0x70>
8113345c:	e0bffd17 	ldw	r2,-12(fp)
81133460:	e0ffff17 	ldw	r3,-4(fp)
81133464:	1885883a 	add	r2,r3,r2
81133468:	e13ffe17 	ldw	r4,-8(fp)
8113346c:	e0fffc17 	ldw	r3,-16(fp)
81133470:	20c7883a 	add	r3,r4,r3
81133474:	18c00003 	ldbu	r3,0(r3)
81133478:	10c00005 	stb	r3,0(r2)
8113347c:	e0bffd17 	ldw	r2,-12(fp)
81133480:	10800044 	addi	r2,r2,1
81133484:	e0bffd15 	stw	r2,-12(fp)
81133488:	e0bffc17 	ldw	r2,-16(fp)
8113348c:	10800044 	addi	r2,r2,1
81133490:	e0bffc15 	stw	r2,-16(fp)
81133494:	e0bffc17 	ldw	r2,-16(fp)
81133498:	10800210 	cmplti	r2,r2,8
8113349c:	103fe81e 	bne	r2,zero,81133440 <__reset+0xfb113440>
811334a0:	e0bffe17 	ldw	r2,-8(fp)
811334a4:	10800203 	ldbu	r2,8(r2)
811334a8:	10803fcc 	andi	r2,r2,255
811334ac:	10800820 	cmpeqi	r2,r2,32
811334b0:	1000241e 	bne	r2,zero,81133544 <copy_file_record_name_to_string+0x12c>
811334b4:	e0bffd17 	ldw	r2,-12(fp)
811334b8:	e0ffff17 	ldw	r3,-4(fp)
811334bc:	1885883a 	add	r2,r3,r2
811334c0:	00c00b84 	movi	r3,46
811334c4:	10c00005 	stb	r3,0(r2)
811334c8:	e0bffd17 	ldw	r2,-12(fp)
811334cc:	10800044 	addi	r2,r2,1
811334d0:	e0bffd15 	stw	r2,-12(fp)
811334d4:	e03ffc15 	stw	zero,-16(fp)
811334d8:	00001706 	br	81133538 <copy_file_record_name_to_string+0x120>
811334dc:	e0fffe17 	ldw	r3,-8(fp)
811334e0:	e0bffc17 	ldw	r2,-16(fp)
811334e4:	1885883a 	add	r2,r3,r2
811334e8:	10800204 	addi	r2,r2,8
811334ec:	10800003 	ldbu	r2,0(r2)
811334f0:	10803fcc 	andi	r2,r2,255
811334f4:	10800820 	cmpeqi	r2,r2,32
811334f8:	10000c1e 	bne	r2,zero,8113352c <copy_file_record_name_to_string+0x114>
811334fc:	e0bffd17 	ldw	r2,-12(fp)
81133500:	e0ffff17 	ldw	r3,-4(fp)
81133504:	1885883a 	add	r2,r3,r2
81133508:	e13ffe17 	ldw	r4,-8(fp)
8113350c:	e0fffc17 	ldw	r3,-16(fp)
81133510:	20c7883a 	add	r3,r4,r3
81133514:	18c00204 	addi	r3,r3,8
81133518:	18c00003 	ldbu	r3,0(r3)
8113351c:	10c00005 	stb	r3,0(r2)
81133520:	e0bffd17 	ldw	r2,-12(fp)
81133524:	10800044 	addi	r2,r2,1
81133528:	e0bffd15 	stw	r2,-12(fp)
8113352c:	e0bffc17 	ldw	r2,-16(fp)
81133530:	10800044 	addi	r2,r2,1
81133534:	e0bffc15 	stw	r2,-16(fp)
81133538:	e0bffc17 	ldw	r2,-16(fp)
8113353c:	108000d0 	cmplti	r2,r2,3
81133540:	103fe61e 	bne	r2,zero,811334dc <__reset+0xfb1134dc>
81133544:	e0bffd17 	ldw	r2,-12(fp)
81133548:	e0ffff17 	ldw	r3,-4(fp)
8113354c:	1885883a 	add	r2,r3,r2
81133550:	10000005 	stb	zero,0(r2)
81133554:	0001883a 	nop
81133558:	e037883a 	mov	sp,fp
8113355c:	df000017 	ldw	fp,0(sp)
81133560:	dec00104 	addi	sp,sp,4
81133564:	f800283a 	ret

81133568 <alt_up_sd_card_open_dev>:
81133568:	defffc04 	addi	sp,sp,-16
8113356c:	de00012e 	bgeu	sp,et,81133574 <alt_up_sd_card_open_dev+0xc>
81133570:	003b68fa 	trap	3
81133574:	dfc00315 	stw	ra,12(sp)
81133578:	df000215 	stw	fp,8(sp)
8113357c:	df000204 	addi	fp,sp,8
81133580:	e13fff15 	stw	r4,-4(fp)
81133584:	d1600d04 	addi	r5,gp,-32716
81133588:	e13fff17 	ldw	r4,-4(fp)
8113358c:	1138a600 	call	81138a60 <alt_find_dev>
81133590:	e0bffe15 	stw	r2,-8(fp)
81133594:	e0bffe17 	ldw	r2,-8(fp)
81133598:	10001e26 	beq	r2,zero,81133614 <alt_up_sd_card_open_dev+0xac>
8113359c:	e0bffe17 	ldw	r2,-8(fp)
811335a0:	10800a17 	ldw	r2,40(r2)
811335a4:	10808d04 	addi	r2,r2,564
811335a8:	d0a08d15 	stw	r2,-32204(gp)
811335ac:	e0bffe17 	ldw	r2,-8(fp)
811335b0:	10800a17 	ldw	r2,40(r2)
811335b4:	10808904 	addi	r2,r2,548
811335b8:	d0a08e15 	stw	r2,-32200(gp)
811335bc:	e0bffe17 	ldw	r2,-8(fp)
811335c0:	10800a17 	ldw	r2,40(r2)
811335c4:	10808404 	addi	r2,r2,528
811335c8:	d0a08f15 	stw	r2,-32196(gp)
811335cc:	e0bffe17 	ldw	r2,-8(fp)
811335d0:	10800a17 	ldw	r2,40(r2)
811335d4:	10808c04 	addi	r2,r2,560
811335d8:	d0a09015 	stw	r2,-32192(gp)
811335dc:	e0bffe17 	ldw	r2,-8(fp)
811335e0:	10800a17 	ldw	r2,40(r2)
811335e4:	10808b04 	addi	r2,r2,556
811335e8:	d0a09115 	stw	r2,-32188(gp)
811335ec:	e0bffe17 	ldw	r2,-8(fp)
811335f0:	10800a17 	ldw	r2,40(r2)
811335f4:	d0a09215 	stw	r2,-32184(gp)
811335f8:	e0bffe17 	ldw	r2,-8(fp)
811335fc:	d0a09515 	stw	r2,-32172(gp)
81133600:	d0208b15 	stw	zero,-32212(gp)
81133604:	d0208c15 	stw	zero,-32208(gp)
81133608:	00a04574 	movhi	r2,33045
8113360c:	10880a04 	addi	r2,r2,8232
81133610:	10000415 	stw	zero,16(r2)
81133614:	e0bffe17 	ldw	r2,-8(fp)
81133618:	e037883a 	mov	sp,fp
8113361c:	dfc00117 	ldw	ra,4(sp)
81133620:	df000017 	ldw	fp,0(sp)
81133624:	dec00204 	addi	sp,sp,8
81133628:	f800283a 	ret

8113362c <alt_up_sd_card_is_Present>:
8113362c:	defffd04 	addi	sp,sp,-12
81133630:	de00012e 	bgeu	sp,et,81133638 <alt_up_sd_card_is_Present+0xc>
81133634:	003b68fa 	trap	3
81133638:	df000215 	stw	fp,8(sp)
8113363c:	df000204 	addi	fp,sp,8
81133640:	e03ffe15 	stw	zero,-8(fp)
81133644:	d0a09517 	ldw	r2,-32172(gp)
81133648:	10000826 	beq	r2,zero,8113366c <alt_up_sd_card_is_Present+0x40>
8113364c:	d0a08d17 	ldw	r2,-32204(gp)
81133650:	1080002b 	ldhuio	r2,0(r2)
81133654:	10bfffcc 	andi	r2,r2,65535
81133658:	1080008c 	andi	r2,r2,2
8113365c:	10000326 	beq	r2,zero,8113366c <alt_up_sd_card_is_Present+0x40>
81133660:	00800044 	movi	r2,1
81133664:	e0bffe15 	stw	r2,-8(fp)
81133668:	00001e06 	br	811336e4 <alt_up_sd_card_is_Present+0xb8>
8113366c:	d0a08b17 	ldw	r2,-32212(gp)
81133670:	10800058 	cmpnei	r2,r2,1
81133674:	10001b1e 	bne	r2,zero,811336e4 <alt_up_sd_card_is_Present+0xb8>
81133678:	d0208b15 	stw	zero,-32212(gp)
8113367c:	00a04574 	movhi	r2,33045
81133680:	10880a04 	addi	r2,r2,8232
81133684:	10000415 	stw	zero,16(r2)
81133688:	d0208c15 	stw	zero,-32208(gp)
8113368c:	e03fff15 	stw	zero,-4(fp)
81133690:	00001106 	br	811336d8 <alt_up_sd_card_is_Present+0xac>
81133694:	00a04574 	movhi	r2,33045
81133698:	10882404 	addi	r2,r2,8336
8113369c:	e0ffff17 	ldw	r3,-4(fp)
811336a0:	180691ba 	slli	r3,r3,6
811336a4:	10c5883a 	add	r2,r2,r3
811336a8:	10800f04 	addi	r2,r2,60
811336ac:	10000015 	stw	zero,0(r2)
811336b0:	00a04574 	movhi	r2,33045
811336b4:	10882404 	addi	r2,r2,8336
811336b8:	e0ffff17 	ldw	r3,-4(fp)
811336bc:	180691ba 	slli	r3,r3,6
811336c0:	10c5883a 	add	r2,r2,r3
811336c4:	10800e04 	addi	r2,r2,56
811336c8:	10000015 	stw	zero,0(r2)
811336cc:	e0bfff17 	ldw	r2,-4(fp)
811336d0:	10800044 	addi	r2,r2,1
811336d4:	e0bfff15 	stw	r2,-4(fp)
811336d8:	e0bfff17 	ldw	r2,-4(fp)
811336dc:	10800510 	cmplti	r2,r2,20
811336e0:	103fec1e 	bne	r2,zero,81133694 <__reset+0xfb113694>
811336e4:	e0bffe17 	ldw	r2,-8(fp)
811336e8:	e037883a 	mov	sp,fp
811336ec:	df000017 	ldw	fp,0(sp)
811336f0:	dec00104 	addi	sp,sp,4
811336f4:	f800283a 	ret

811336f8 <alt_up_sd_card_is_FAT16>:
811336f8:	defffd04 	addi	sp,sp,-12
811336fc:	de00012e 	bgeu	sp,et,81133704 <alt_up_sd_card_is_FAT16+0xc>
81133700:	003b68fa 	trap	3
81133704:	dfc00215 	stw	ra,8(sp)
81133708:	df000115 	stw	fp,4(sp)
8113370c:	df000104 	addi	fp,sp,4
81133710:	e03fff15 	stw	zero,-4(fp)
81133714:	113362c0 	call	8113362c <alt_up_sd_card_is_Present>
81133718:	10000c26 	beq	r2,zero,8113374c <alt_up_sd_card_is_FAT16+0x54>
8113371c:	d0a08b17 	ldw	r2,-32212(gp)
81133720:	1000071e 	bne	r2,zero,81133740 <alt_up_sd_card_is_FAT16+0x48>
81133724:	11319240 	call	81131924 <Look_for_FAT16>
81133728:	d0a08c15 	stw	r2,-32208(gp)
8113372c:	d0a08c17 	ldw	r2,-32208(gp)
81133730:	d0a08b15 	stw	r2,-32212(gp)
81133734:	00a04574 	movhi	r2,33045
81133738:	10880a04 	addi	r2,r2,8232
8113373c:	10000415 	stw	zero,16(r2)
81133740:	d0a08c17 	ldw	r2,-32208(gp)
81133744:	e0bfff15 	stw	r2,-4(fp)
81133748:	00000206 	br	81133754 <alt_up_sd_card_is_FAT16+0x5c>
8113374c:	d0208b15 	stw	zero,-32212(gp)
81133750:	d0208c15 	stw	zero,-32208(gp)
81133754:	e0bfff17 	ldw	r2,-4(fp)
81133758:	e037883a 	mov	sp,fp
8113375c:	dfc00117 	ldw	ra,4(sp)
81133760:	df000017 	ldw	fp,0(sp)
81133764:	dec00204 	addi	sp,sp,8
81133768:	f800283a 	ret

8113376c <alt_up_sd_card_find_first>:
8113376c:	deffea04 	addi	sp,sp,-88
81133770:	de00012e 	bgeu	sp,et,81133778 <alt_up_sd_card_find_first+0xc>
81133774:	003b68fa 	trap	3
81133778:	dfc01515 	stw	ra,84(sp)
8113377c:	df001415 	stw	fp,80(sp)
81133780:	df001404 	addi	fp,sp,80
81133784:	e13ffe15 	stw	r4,-8(fp)
81133788:	e17fff15 	stw	r5,-4(fp)
8113378c:	00800084 	movi	r2,2
81133790:	e0bfec0d 	sth	r2,-80(fp)
81133794:	113362c0 	call	8113362c <alt_up_sd_card_is_Present>
81133798:	10002426 	beq	r2,zero,8113382c <alt_up_sd_card_find_first+0xc0>
8113379c:	d0a08c17 	ldw	r2,-32208(gp)
811337a0:	10002226 	beq	r2,zero,8113382c <alt_up_sd_card_find_first+0xc0>
811337a4:	e0ffee04 	addi	r3,fp,-72
811337a8:	e0bfed04 	addi	r2,fp,-76
811337ac:	180d883a 	mov	r6,r3
811337b0:	100b883a 	mov	r5,r2
811337b4:	e13ffe17 	ldw	r4,-8(fp)
811337b8:	11320bc0 	call	811320bc <get_home_directory_cluster_for_file>
811337bc:	10001926 	beq	r2,zero,81133824 <alt_up_sd_card_find_first+0xb8>
811337c0:	e0bfed17 	ldw	r2,-76(fp)
811337c4:	1007883a 	mov	r3,r2
811337c8:	00a04574 	movhi	r2,33045
811337cc:	10880a04 	addi	r2,r2,8232
811337d0:	10c00015 	stw	r3,0(r2)
811337d4:	e0bfed17 	ldw	r2,-76(fp)
811337d8:	1007883a 	mov	r3,r2
811337dc:	00a04574 	movhi	r2,33045
811337e0:	10880a04 	addi	r2,r2,8232
811337e4:	10c00115 	stw	r3,4(r2)
811337e8:	00a04574 	movhi	r2,33045
811337ec:	10880a04 	addi	r2,r2,8232
811337f0:	10000215 	stw	zero,8(r2)
811337f4:	00a04574 	movhi	r2,33045
811337f8:	10880a04 	addi	r2,r2,8232
811337fc:	00ffffc4 	movi	r3,-1
81133800:	10c0030d 	sth	r3,12(r2)
81133804:	00a04574 	movhi	r2,33045
81133808:	10880a04 	addi	r2,r2,8232
8113380c:	00c00044 	movi	r3,1
81133810:	10c00415 	stw	r3,16(r2)
81133814:	e13fff17 	ldw	r4,-4(fp)
81133818:	11338440 	call	81133844 <alt_up_sd_card_find_next>
8113381c:	e0bfec0d 	sth	r2,-80(fp)
81133820:	00000206 	br	8113382c <alt_up_sd_card_find_first+0xc0>
81133824:	00800044 	movi	r2,1
81133828:	e0bfec0d 	sth	r2,-80(fp)
8113382c:	e0bfec0b 	ldhu	r2,-80(fp)
81133830:	e037883a 	mov	sp,fp
81133834:	dfc00117 	ldw	ra,4(sp)
81133838:	df000017 	ldw	fp,0(sp)
8113383c:	dec00204 	addi	sp,sp,8
81133840:	f800283a 	ret

81133844 <alt_up_sd_card_find_next>:
81133844:	deffe404 	addi	sp,sp,-112
81133848:	de00012e 	bgeu	sp,et,81133850 <alt_up_sd_card_find_next+0xc>
8113384c:	003b68fa 	trap	3
81133850:	dfc01b15 	stw	ra,108(sp)
81133854:	df001a15 	stw	fp,104(sp)
81133858:	df001a04 	addi	fp,sp,104
8113385c:	e13fff15 	stw	r4,-4(fp)
81133860:	00800084 	movi	r2,2
81133864:	e0bfe60d 	sth	r2,-104(fp)
81133868:	113362c0 	call	8113362c <alt_up_sd_card_is_Present>
8113386c:	1000df26 	beq	r2,zero,81133bec <alt_up_sd_card_find_next+0x3a8>
81133870:	d0a08c17 	ldw	r2,-32208(gp)
81133874:	1000dd26 	beq	r2,zero,81133bec <alt_up_sd_card_find_next+0x3a8>
81133878:	00a04574 	movhi	r2,33045
8113387c:	10880a04 	addi	r2,r2,8232
81133880:	10800417 	ldw	r2,16(r2)
81133884:	1000d726 	beq	r2,zero,81133be4 <alt_up_sd_card_find_next+0x3a0>
81133888:	00a04574 	movhi	r2,33045
8113388c:	10880a04 	addi	r2,r2,8232
81133890:	10800117 	ldw	r2,4(r2)
81133894:	e0bfe715 	stw	r2,-100(fp)
81133898:	e0bfe717 	ldw	r2,-100(fp)
8113389c:	1000561e 	bne	r2,zero,811339f8 <alt_up_sd_card_find_next+0x1b4>
811338a0:	00a04574 	movhi	r2,33045
811338a4:	10880f04 	addi	r2,r2,8252
811338a8:	1080050b 	ldhu	r2,20(r2)
811338ac:	10bfffcc 	andi	r2,r2,65535
811338b0:	1006917a 	slli	r3,r2,5
811338b4:	00a04574 	movhi	r2,33045
811338b8:	10880f04 	addi	r2,r2,8252
811338bc:	1080030b 	ldhu	r2,12(r2)
811338c0:	10bfffcc 	andi	r2,r2,65535
811338c4:	1885283a 	div	r2,r3,r2
811338c8:	e0bfec15 	stw	r2,-80(fp)
811338cc:	00a04574 	movhi	r2,33045
811338d0:	10880a04 	addi	r2,r2,8232
811338d4:	10800217 	ldw	r2,8(r2)
811338d8:	e0bfe815 	stw	r2,-96(fp)
811338dc:	00a04574 	movhi	r2,33045
811338e0:	10880a04 	addi	r2,r2,8232
811338e4:	1080030b 	ldhu	r2,12(r2)
811338e8:	10bfffcc 	andi	r2,r2,65535
811338ec:	10a0001c 	xori	r2,r2,32768
811338f0:	10a00004 	addi	r2,r2,-32768
811338f4:	10800044 	addi	r2,r2,1
811338f8:	e0bfe915 	stw	r2,-92(fp)
811338fc:	00003606 	br	811339d8 <alt_up_sd_card_find_next+0x194>
81133900:	00a04574 	movhi	r2,33045
81133904:	10880f04 	addi	r2,r2,8252
81133908:	10c01317 	ldw	r3,76(r2)
8113390c:	e0bfe817 	ldw	r2,-96(fp)
81133910:	1885883a 	add	r2,r3,r2
81133914:	1007883a 	mov	r3,r2
81133918:	d0a09317 	ldw	r2,-32180(gp)
8113391c:	100b883a 	mov	r5,r2
81133920:	1809883a 	mov	r4,r3
81133924:	11309540 	call	81130954 <Read_Sector_Data>
81133928:	10002f26 	beq	r2,zero,811339e8 <alt_up_sd_card_find_next+0x1a4>
8113392c:	00002306 	br	811339bc <alt_up_sd_card_find_next+0x178>
81133930:	e0bfe917 	ldw	r2,-92(fp)
81133934:	1004917a 	slli	r2,r2,5
81133938:	e13fe817 	ldw	r4,-96(fp)
8113393c:	e0ffef04 	addi	r3,fp,-68
81133940:	200f883a 	mov	r7,r4
81133944:	000d883a 	mov	r6,zero
81133948:	180b883a 	mov	r5,r3
8113394c:	1009883a 	mov	r4,r2
81133950:	1130d840 	call	81130d84 <Read_File_Record_At_Offset>
81133954:	10001626 	beq	r2,zero,811339b0 <alt_up_sd_card_find_next+0x16c>
81133958:	e0bfef03 	ldbu	r2,-68(fp)
8113395c:	10803fcc 	andi	r2,r2,255
81133960:	10001326 	beq	r2,zero,811339b0 <alt_up_sd_card_find_next+0x16c>
81133964:	e0bfef03 	ldbu	r2,-68(fp)
81133968:	10803fcc 	andi	r2,r2,255
8113396c:	10803960 	cmpeqi	r2,r2,229
81133970:	10000f1e 	bne	r2,zero,811339b0 <alt_up_sd_card_find_next+0x16c>
81133974:	e0bfe917 	ldw	r2,-92(fp)
81133978:	1007883a 	mov	r3,r2
8113397c:	00a04574 	movhi	r2,33045
81133980:	10880a04 	addi	r2,r2,8232
81133984:	10c0030d 	sth	r3,12(r2)
81133988:	e0ffe817 	ldw	r3,-96(fp)
8113398c:	00a04574 	movhi	r2,33045
81133990:	10880a04 	addi	r2,r2,8232
81133994:	10c00215 	stw	r3,8(r2)
81133998:	e0bfef04 	addi	r2,fp,-68
8113399c:	e17fff17 	ldw	r5,-4(fp)
811339a0:	1009883a 	mov	r4,r2
811339a4:	11334180 	call	81133418 <copy_file_record_name_to_string>
811339a8:	0005883a 	mov	r2,zero
811339ac:	00009006 	br	81133bf0 <alt_up_sd_card_find_next+0x3ac>
811339b0:	e0bfe917 	ldw	r2,-92(fp)
811339b4:	10800044 	addi	r2,r2,1
811339b8:	e0bfe915 	stw	r2,-92(fp)
811339bc:	e0bfe917 	ldw	r2,-92(fp)
811339c0:	10800410 	cmplti	r2,r2,16
811339c4:	103fda1e 	bne	r2,zero,81133930 <__reset+0xfb113930>
811339c8:	e03fe915 	stw	zero,-92(fp)
811339cc:	e0bfe817 	ldw	r2,-96(fp)
811339d0:	10800044 	addi	r2,r2,1
811339d4:	e0bfe815 	stw	r2,-96(fp)
811339d8:	e0ffe817 	ldw	r3,-96(fp)
811339dc:	e0bfec17 	ldw	r2,-80(fp)
811339e0:	18bfc716 	blt	r3,r2,81133900 <__reset+0xfb113900>
811339e4:	00000106 	br	811339ec <alt_up_sd_card_find_next+0x1a8>
811339e8:	0001883a 	nop
811339ec:	00bfffc4 	movi	r2,-1
811339f0:	e0bfe60d 	sth	r2,-104(fp)
811339f4:	00007d06 	br	81133bec <alt_up_sd_card_find_next+0x3a8>
811339f8:	00a04574 	movhi	r2,33045
811339fc:	10880a04 	addi	r2,r2,8232
81133a00:	1080030b 	ldhu	r2,12(r2)
81133a04:	10bfffcc 	andi	r2,r2,65535
81133a08:	10a0001c 	xori	r2,r2,32768
81133a0c:	10a00004 	addi	r2,r2,-32768
81133a10:	10800044 	addi	r2,r2,1
81133a14:	e0bfea15 	stw	r2,-88(fp)
81133a18:	e0bfe717 	ldw	r2,-100(fp)
81133a1c:	10ffff84 	addi	r3,r2,-2
81133a20:	00a04574 	movhi	r2,33045
81133a24:	10880f04 	addi	r2,r2,8252
81133a28:	10800383 	ldbu	r2,14(r2)
81133a2c:	10803fcc 	andi	r2,r2,255
81133a30:	1885383a 	mul	r2,r3,r2
81133a34:	1007883a 	mov	r3,r2
81133a38:	00a04574 	movhi	r2,33045
81133a3c:	10880f04 	addi	r2,r2,8252
81133a40:	10801417 	ldw	r2,80(r2)
81133a44:	1885883a 	add	r2,r3,r2
81133a48:	e0bfed15 	stw	r2,-76(fp)
81133a4c:	00a04574 	movhi	r2,33045
81133a50:	10880a04 	addi	r2,r2,8232
81133a54:	10800217 	ldw	r2,8(r2)
81133a58:	e0bfeb15 	stw	r2,-84(fp)
81133a5c:	00003806 	br	81133b40 <alt_up_sd_card_find_next+0x2fc>
81133a60:	e0ffeb17 	ldw	r3,-84(fp)
81133a64:	e0bfed17 	ldw	r2,-76(fp)
81133a68:	1885883a 	add	r2,r3,r2
81133a6c:	d0e09317 	ldw	r3,-32180(gp)
81133a70:	180b883a 	mov	r5,r3
81133a74:	1009883a 	mov	r4,r2
81133a78:	11309540 	call	81130954 <Read_Sector_Data>
81133a7c:	10003726 	beq	r2,zero,81133b5c <alt_up_sd_card_find_next+0x318>
81133a80:	00002806 	br	81133b24 <alt_up_sd_card_find_next+0x2e0>
81133a84:	e0bfea17 	ldw	r2,-88(fp)
81133a88:	1004917a 	slli	r2,r2,5
81133a8c:	e13fe717 	ldw	r4,-100(fp)
81133a90:	e17feb17 	ldw	r5,-84(fp)
81133a94:	e0ffef04 	addi	r3,fp,-68
81133a98:	280f883a 	mov	r7,r5
81133a9c:	200d883a 	mov	r6,r4
81133aa0:	180b883a 	mov	r5,r3
81133aa4:	1009883a 	mov	r4,r2
81133aa8:	1130d840 	call	81130d84 <Read_File_Record_At_Offset>
81133aac:	10001a26 	beq	r2,zero,81133b18 <alt_up_sd_card_find_next+0x2d4>
81133ab0:	e0bfef03 	ldbu	r2,-68(fp)
81133ab4:	10803fcc 	andi	r2,r2,255
81133ab8:	10001726 	beq	r2,zero,81133b18 <alt_up_sd_card_find_next+0x2d4>
81133abc:	e0bfef03 	ldbu	r2,-68(fp)
81133ac0:	10803fcc 	andi	r2,r2,255
81133ac4:	10803960 	cmpeqi	r2,r2,229
81133ac8:	1000131e 	bne	r2,zero,81133b18 <alt_up_sd_card_find_next+0x2d4>
81133acc:	e0ffe717 	ldw	r3,-100(fp)
81133ad0:	00a04574 	movhi	r2,33045
81133ad4:	10880a04 	addi	r2,r2,8232
81133ad8:	10c00115 	stw	r3,4(r2)
81133adc:	e0bfea17 	ldw	r2,-88(fp)
81133ae0:	1007883a 	mov	r3,r2
81133ae4:	00a04574 	movhi	r2,33045
81133ae8:	10880a04 	addi	r2,r2,8232
81133aec:	10c0030d 	sth	r3,12(r2)
81133af0:	e0ffeb17 	ldw	r3,-84(fp)
81133af4:	00a04574 	movhi	r2,33045
81133af8:	10880a04 	addi	r2,r2,8232
81133afc:	10c00215 	stw	r3,8(r2)
81133b00:	e0bfef04 	addi	r2,fp,-68
81133b04:	e17fff17 	ldw	r5,-4(fp)
81133b08:	1009883a 	mov	r4,r2
81133b0c:	11334180 	call	81133418 <copy_file_record_name_to_string>
81133b10:	0005883a 	mov	r2,zero
81133b14:	00003606 	br	81133bf0 <alt_up_sd_card_find_next+0x3ac>
81133b18:	e0bfea17 	ldw	r2,-88(fp)
81133b1c:	10800044 	addi	r2,r2,1
81133b20:	e0bfea15 	stw	r2,-88(fp)
81133b24:	e0bfea17 	ldw	r2,-88(fp)
81133b28:	10800410 	cmplti	r2,r2,16
81133b2c:	103fd51e 	bne	r2,zero,81133a84 <__reset+0xfb113a84>
81133b30:	e03fea15 	stw	zero,-88(fp)
81133b34:	e0bfeb17 	ldw	r2,-84(fp)
81133b38:	10800044 	addi	r2,r2,1
81133b3c:	e0bfeb15 	stw	r2,-84(fp)
81133b40:	00a04574 	movhi	r2,33045
81133b44:	10880f04 	addi	r2,r2,8252
81133b48:	10800383 	ldbu	r2,14(r2)
81133b4c:	10803fcc 	andi	r2,r2,255
81133b50:	e0ffeb17 	ldw	r3,-84(fp)
81133b54:	18bfc216 	blt	r3,r2,81133a60 <__reset+0xfb113a60>
81133b58:	00000106 	br	81133b60 <alt_up_sd_card_find_next+0x31c>
81133b5c:	0001883a 	nop
81133b60:	00a04574 	movhi	r2,33045
81133b64:	10880f04 	addi	r2,r2,8252
81133b68:	10800383 	ldbu	r2,14(r2)
81133b6c:	10803fcc 	andi	r2,r2,255
81133b70:	e0ffeb17 	ldw	r3,-84(fp)
81133b74:	18801716 	blt	r3,r2,81133bd4 <alt_up_sd_card_find_next+0x390>
81133b78:	e0bfe717 	ldw	r2,-100(fp)
81133b7c:	e0ffee04 	addi	r3,fp,-72
81133b80:	180b883a 	mov	r5,r3
81133b84:	1009883a 	mov	r4,r2
81133b88:	1130a340 	call	81130a34 <get_cluster_flag>
81133b8c:	10000f26 	beq	r2,zero,81133bcc <alt_up_sd_card_find_next+0x388>
81133b90:	e0bfee0b 	ldhu	r2,-72(fp)
81133b94:	10bfffcc 	andi	r2,r2,65535
81133b98:	10fffe0c 	andi	r3,r2,65528
81133b9c:	00bffe14 	movui	r2,65528
81133ba0:	1880051e 	bne	r3,r2,81133bb8 <alt_up_sd_card_find_next+0x374>
81133ba4:	00bfffc4 	movi	r2,-1
81133ba8:	e0bfe60d 	sth	r2,-104(fp)
81133bac:	00a04574 	movhi	r2,33045
81133bb0:	10880a04 	addi	r2,r2,8232
81133bb4:	10000415 	stw	zero,16(r2)
81133bb8:	e0bfee0b 	ldhu	r2,-72(fp)
81133bbc:	10bfffcc 	andi	r2,r2,65535
81133bc0:	10bffe0c 	andi	r2,r2,65528
81133bc4:	e0bfe715 	stw	r2,-100(fp)
81133bc8:	00000206 	br	81133bd4 <alt_up_sd_card_find_next+0x390>
81133bcc:	00bfffc4 	movi	r2,-1
81133bd0:	e0bfe60d 	sth	r2,-104(fp)
81133bd4:	e0bfe717 	ldw	r2,-100(fp)
81133bd8:	00fffdd4 	movui	r3,65527
81133bdc:	18bf8e0e 	bge	r3,r2,81133a18 <__reset+0xfb113a18>
81133be0:	00000206 	br	81133bec <alt_up_sd_card_find_next+0x3a8>
81133be4:	008000c4 	movi	r2,3
81133be8:	e0bfe60d 	sth	r2,-104(fp)
81133bec:	e0bfe60b 	ldhu	r2,-104(fp)
81133bf0:	e037883a 	mov	sp,fp
81133bf4:	dfc00117 	ldw	ra,4(sp)
81133bf8:	df000017 	ldw	fp,0(sp)
81133bfc:	dec00204 	addi	sp,sp,8
81133c00:	f800283a 	ret

81133c04 <alt_up_sd_card_fopen>:
81133c04:	deffe904 	addi	sp,sp,-92
81133c08:	de00012e 	bgeu	sp,et,81133c10 <alt_up_sd_card_fopen+0xc>
81133c0c:	003b68fa 	trap	3
81133c10:	dfc01615 	stw	ra,88(sp)
81133c14:	df001515 	stw	fp,84(sp)
81133c18:	df001504 	addi	fp,sp,84
81133c1c:	e13ffe15 	stw	r4,-8(fp)
81133c20:	e17fff15 	stw	r5,-4(fp)
81133c24:	00bfffc4 	movi	r2,-1
81133c28:	e0bfeb0d 	sth	r2,-84(fp)
81133c2c:	113362c0 	call	8113362c <alt_up_sd_card_is_Present>
81133c30:	1000cf26 	beq	r2,zero,81133f70 <alt_up_sd_card_fopen+0x36c>
81133c34:	d0a08c17 	ldw	r2,-32208(gp)
81133c38:	1000cd26 	beq	r2,zero,81133f70 <alt_up_sd_card_fopen+0x36c>
81133c3c:	e03fed15 	stw	zero,-76(fp)
81133c40:	e13ffe17 	ldw	r4,-8(fp)
81133c44:	1131a180 	call	81131a18 <filename_to_upper_case>
81133c48:	e13ffe17 	ldw	r4,-8(fp)
81133c4c:	1131ae40 	call	81131ae4 <check_file_name_for_FAT16_compliance>
81133c50:	1000c726 	beq	r2,zero,81133f70 <alt_up_sd_card_fopen+0x36c>
81133c54:	e0ffee04 	addi	r3,fp,-72
81133c58:	e0bfed04 	addi	r2,fp,-76
81133c5c:	180d883a 	mov	r6,r3
81133c60:	100b883a 	mov	r5,r2
81133c64:	e13ffe17 	ldw	r4,-8(fp)
81133c68:	11320bc0 	call	811320bc <get_home_directory_cluster_for_file>
81133c6c:	1000021e 	bne	r2,zero,81133c78 <alt_up_sd_card_fopen+0x74>
81133c70:	e0bfeb0b 	ldhu	r2,-84(fp)
81133c74:	0000bf06 	br	81133f74 <alt_up_sd_card_fopen+0x370>
81133c78:	e03fec15 	stw	zero,-80(fp)
81133c7c:	00000e06 	br	81133cb8 <alt_up_sd_card_fopen+0xb4>
81133c80:	00a04574 	movhi	r2,33045
81133c84:	10882404 	addi	r2,r2,8336
81133c88:	e0ffec17 	ldw	r3,-80(fp)
81133c8c:	180691ba 	slli	r3,r3,6
81133c90:	10c5883a 	add	r2,r2,r3
81133c94:	10800f04 	addi	r2,r2,60
81133c98:	10800017 	ldw	r2,0(r2)
81133c9c:	1000031e 	bne	r2,zero,81133cac <alt_up_sd_card_fopen+0xa8>
81133ca0:	e0bfec17 	ldw	r2,-80(fp)
81133ca4:	e0bfeb0d 	sth	r2,-84(fp)
81133ca8:	00000606 	br	81133cc4 <alt_up_sd_card_fopen+0xc0>
81133cac:	e0bfec17 	ldw	r2,-80(fp)
81133cb0:	10800044 	addi	r2,r2,1
81133cb4:	e0bfec15 	stw	r2,-80(fp)
81133cb8:	e0bfec17 	ldw	r2,-80(fp)
81133cbc:	10800510 	cmplti	r2,r2,20
81133cc0:	103fef1e 	bne	r2,zero,81133c80 <__reset+0xfb113c80>
81133cc4:	e0bfeb0f 	ldh	r2,-84(fp)
81133cc8:	1000a916 	blt	r2,zero,81133f70 <alt_up_sd_card_fopen+0x36c>
81133ccc:	e0bfed17 	ldw	r2,-76(fp)
81133cd0:	1009883a 	mov	r4,r2
81133cd4:	e0bfeb0f 	ldh	r2,-84(fp)
81133cd8:	100691ba 	slli	r3,r2,6
81133cdc:	00a04574 	movhi	r2,33045
81133ce0:	10882404 	addi	r2,r2,8336
81133ce4:	1885883a 	add	r2,r3,r2
81133ce8:	100d883a 	mov	r6,r2
81133cec:	e17ffe17 	ldw	r5,-8(fp)
81133cf0:	11325fc0 	call	811325fc <find_file_in_directory>
81133cf4:	10007b26 	beq	r2,zero,81133ee4 <alt_up_sd_card_fopen+0x2e0>
81133cf8:	e0bfff17 	ldw	r2,-4(fp)
81133cfc:	10000226 	beq	r2,zero,81133d08 <alt_up_sd_card_fopen+0x104>
81133d00:	00bfffc4 	movi	r2,-1
81133d04:	00009b06 	br	81133f74 <alt_up_sd_card_fopen+0x370>
81133d08:	e13feb0f 	ldh	r4,-84(fp)
81133d0c:	e0ffeb0f 	ldh	r3,-84(fp)
81133d10:	00a04574 	movhi	r2,33045
81133d14:	10882404 	addi	r2,r2,8336
81133d18:	180691ba 	slli	r3,r3,6
81133d1c:	10c5883a 	add	r2,r2,r3
81133d20:	10800584 	addi	r2,r2,22
81133d24:	1080000b 	ldhu	r2,0(r2)
81133d28:	10ffffcc 	andi	r3,r2,65535
81133d2c:	00a04574 	movhi	r2,33045
81133d30:	10882404 	addi	r2,r2,8336
81133d34:	200891ba 	slli	r4,r4,6
81133d38:	1105883a 	add	r2,r2,r4
81133d3c:	10800704 	addi	r2,r2,28
81133d40:	10c00015 	stw	r3,0(r2)
81133d44:	e0ffeb0f 	ldh	r3,-84(fp)
81133d48:	00a04574 	movhi	r2,33045
81133d4c:	10882404 	addi	r2,r2,8336
81133d50:	180691ba 	slli	r3,r3,6
81133d54:	10c5883a 	add	r2,r2,r3
81133d58:	10800804 	addi	r2,r2,32
81133d5c:	10000015 	stw	zero,0(r2)
81133d60:	e0ffeb0f 	ldh	r3,-84(fp)
81133d64:	00a04574 	movhi	r2,33045
81133d68:	10882404 	addi	r2,r2,8336
81133d6c:	180691ba 	slli	r3,r3,6
81133d70:	10c5883a 	add	r2,r2,r3
81133d74:	10800904 	addi	r2,r2,36
81133d78:	10000015 	stw	zero,0(r2)
81133d7c:	e0ffeb0f 	ldh	r3,-84(fp)
81133d80:	00a04574 	movhi	r2,33045
81133d84:	10882404 	addi	r2,r2,8336
81133d88:	180691ba 	slli	r3,r3,6
81133d8c:	10c5883a 	add	r2,r2,r3
81133d90:	10800f04 	addi	r2,r2,60
81133d94:	00c00044 	movi	r3,1
81133d98:	10c00015 	stw	r3,0(r2)
81133d9c:	e0ffeb0f 	ldh	r3,-84(fp)
81133da0:	00a04574 	movhi	r2,33045
81133da4:	10882404 	addi	r2,r2,8336
81133da8:	180691ba 	slli	r3,r3,6
81133dac:	10c5883a 	add	r2,r2,r3
81133db0:	10800e04 	addi	r2,r2,56
81133db4:	10000015 	stw	zero,0(r2)
81133db8:	e03fec15 	stw	zero,-80(fp)
81133dbc:	00004506 	br	81133ed4 <alt_up_sd_card_fopen+0x2d0>
81133dc0:	e0ffeb0f 	ldh	r3,-84(fp)
81133dc4:	e0bfec17 	ldw	r2,-80(fp)
81133dc8:	18803f26 	beq	r3,r2,81133ec8 <alt_up_sd_card_fopen+0x2c4>
81133dcc:	00a04574 	movhi	r2,33045
81133dd0:	10882404 	addi	r2,r2,8336
81133dd4:	e0ffec17 	ldw	r3,-80(fp)
81133dd8:	180691ba 	slli	r3,r3,6
81133ddc:	10c5883a 	add	r2,r2,r3
81133de0:	10800f04 	addi	r2,r2,60
81133de4:	10800017 	ldw	r2,0(r2)
81133de8:	10800058 	cmpnei	r2,r2,1
81133dec:	1000361e 	bne	r2,zero,81133ec8 <alt_up_sd_card_fopen+0x2c4>
81133df0:	e0ffeb0f 	ldh	r3,-84(fp)
81133df4:	00a04574 	movhi	r2,33045
81133df8:	10882404 	addi	r2,r2,8336
81133dfc:	180691ba 	slli	r3,r3,6
81133e00:	10c5883a 	add	r2,r2,r3
81133e04:	10800a04 	addi	r2,r2,40
81133e08:	10c00017 	ldw	r3,0(r2)
81133e0c:	00a04574 	movhi	r2,33045
81133e10:	10882404 	addi	r2,r2,8336
81133e14:	e13fec17 	ldw	r4,-80(fp)
81133e18:	200891ba 	slli	r4,r4,6
81133e1c:	1105883a 	add	r2,r2,r4
81133e20:	10800a04 	addi	r2,r2,40
81133e24:	10800017 	ldw	r2,0(r2)
81133e28:	1880271e 	bne	r3,r2,81133ec8 <alt_up_sd_card_fopen+0x2c4>
81133e2c:	e0ffeb0f 	ldh	r3,-84(fp)
81133e30:	00a04574 	movhi	r2,33045
81133e34:	10882404 	addi	r2,r2,8336
81133e38:	180691ba 	slli	r3,r3,6
81133e3c:	10c5883a 	add	r2,r2,r3
81133e40:	10800b04 	addi	r2,r2,44
81133e44:	10c00017 	ldw	r3,0(r2)
81133e48:	00a04574 	movhi	r2,33045
81133e4c:	10882404 	addi	r2,r2,8336
81133e50:	e13fec17 	ldw	r4,-80(fp)
81133e54:	200891ba 	slli	r4,r4,6
81133e58:	1105883a 	add	r2,r2,r4
81133e5c:	10800b04 	addi	r2,r2,44
81133e60:	10800017 	ldw	r2,0(r2)
81133e64:	1880181e 	bne	r3,r2,81133ec8 <alt_up_sd_card_fopen+0x2c4>
81133e68:	e0ffeb0f 	ldh	r3,-84(fp)
81133e6c:	00a04574 	movhi	r2,33045
81133e70:	10882404 	addi	r2,r2,8336
81133e74:	180691ba 	slli	r3,r3,6
81133e78:	10c5883a 	add	r2,r2,r3
81133e7c:	10800c04 	addi	r2,r2,48
81133e80:	1100000b 	ldhu	r4,0(r2)
81133e84:	00a04574 	movhi	r2,33045
81133e88:	10882404 	addi	r2,r2,8336
81133e8c:	e0ffec17 	ldw	r3,-80(fp)
81133e90:	180691ba 	slli	r3,r3,6
81133e94:	10c5883a 	add	r2,r2,r3
81133e98:	10800c04 	addi	r2,r2,48
81133e9c:	1080000b 	ldhu	r2,0(r2)
81133ea0:	20ffffcc 	andi	r3,r4,65535
81133ea4:	18e0001c 	xori	r3,r3,32768
81133ea8:	18e00004 	addi	r3,r3,-32768
81133eac:	10bfffcc 	andi	r2,r2,65535
81133eb0:	10a0001c 	xori	r2,r2,32768
81133eb4:	10a00004 	addi	r2,r2,-32768
81133eb8:	1880031e 	bne	r3,r2,81133ec8 <alt_up_sd_card_fopen+0x2c4>
81133ebc:	00bfff84 	movi	r2,-2
81133ec0:	e0bfeb0d 	sth	r2,-84(fp)
81133ec4:	00002a06 	br	81133f70 <alt_up_sd_card_fopen+0x36c>
81133ec8:	e0bfec17 	ldw	r2,-80(fp)
81133ecc:	10800044 	addi	r2,r2,1
81133ed0:	e0bfec15 	stw	r2,-80(fp)
81133ed4:	e0bfec17 	ldw	r2,-80(fp)
81133ed8:	10800510 	cmplti	r2,r2,20
81133edc:	103fb81e 	bne	r2,zero,81133dc0 <__reset+0xfb113dc0>
81133ee0:	00002306 	br	81133f70 <alt_up_sd_card_fopen+0x36c>
81133ee4:	e0bfff17 	ldw	r2,-4(fp)
81133ee8:	10001f26 	beq	r2,zero,81133f68 <alt_up_sd_card_fopen+0x364>
81133eec:	e0bfeb0f 	ldh	r2,-84(fp)
81133ef0:	100691ba 	slli	r3,r2,6
81133ef4:	00a04574 	movhi	r2,33045
81133ef8:	10882404 	addi	r2,r2,8336
81133efc:	1885883a 	add	r2,r3,r2
81133f00:	e0ffee04 	addi	r3,fp,-72
81133f04:	180d883a 	mov	r6,r3
81133f08:	100b883a 	mov	r5,r2
81133f0c:	e13ffe17 	ldw	r4,-8(fp)
81133f10:	11331480 	call	81133148 <create_file>
81133f14:	10001126 	beq	r2,zero,81133f5c <alt_up_sd_card_fopen+0x358>
81133f18:	e0ffeb0f 	ldh	r3,-84(fp)
81133f1c:	00a04574 	movhi	r2,33045
81133f20:	10882404 	addi	r2,r2,8336
81133f24:	180691ba 	slli	r3,r3,6
81133f28:	10c5883a 	add	r2,r2,r3
81133f2c:	10800f04 	addi	r2,r2,60
81133f30:	00c00044 	movi	r3,1
81133f34:	10c00015 	stw	r3,0(r2)
81133f38:	e0ffeb0f 	ldh	r3,-84(fp)
81133f3c:	00a04574 	movhi	r2,33045
81133f40:	10882404 	addi	r2,r2,8336
81133f44:	180691ba 	slli	r3,r3,6
81133f48:	10c5883a 	add	r2,r2,r3
81133f4c:	10800e04 	addi	r2,r2,56
81133f50:	00c00044 	movi	r3,1
81133f54:	10c00015 	stw	r3,0(r2)
81133f58:	00000506 	br	81133f70 <alt_up_sd_card_fopen+0x36c>
81133f5c:	00bfffc4 	movi	r2,-1
81133f60:	e0bfeb0d 	sth	r2,-84(fp)
81133f64:	00000206 	br	81133f70 <alt_up_sd_card_fopen+0x36c>
81133f68:	00bfffc4 	movi	r2,-1
81133f6c:	e0bfeb0d 	sth	r2,-84(fp)
81133f70:	e0bfeb0b 	ldhu	r2,-84(fp)
81133f74:	e037883a 	mov	sp,fp
81133f78:	dfc00117 	ldw	ra,4(sp)
81133f7c:	df000017 	ldw	fp,0(sp)
81133f80:	dec00204 	addi	sp,sp,8
81133f84:	f800283a 	ret

81133f88 <alt_up_sd_card_set_attributes>:
81133f88:	defffd04 	addi	sp,sp,-12
81133f8c:	de00012e 	bgeu	sp,et,81133f94 <alt_up_sd_card_set_attributes+0xc>
81133f90:	003b68fa 	trap	3
81133f94:	df000215 	stw	fp,8(sp)
81133f98:	df000204 	addi	fp,sp,8
81133f9c:	2007883a 	mov	r3,r4
81133fa0:	2805883a 	mov	r2,r5
81133fa4:	e0fffe0d 	sth	r3,-8(fp)
81133fa8:	e0bfff0d 	sth	r2,-4(fp)
81133fac:	e0bffe0f 	ldh	r2,-8(fp)
81133fb0:	10001416 	blt	r2,zero,81134004 <alt_up_sd_card_set_attributes+0x7c>
81133fb4:	e0bffe0f 	ldh	r2,-8(fp)
81133fb8:	10800508 	cmpgei	r2,r2,20
81133fbc:	1000111e 	bne	r2,zero,81134004 <alt_up_sd_card_set_attributes+0x7c>
81133fc0:	e0fffe0f 	ldh	r3,-8(fp)
81133fc4:	00a04574 	movhi	r2,33045
81133fc8:	10882404 	addi	r2,r2,8336
81133fcc:	180691ba 	slli	r3,r3,6
81133fd0:	10c5883a 	add	r2,r2,r3
81133fd4:	10800f04 	addi	r2,r2,60
81133fd8:	10800017 	ldw	r2,0(r2)
81133fdc:	10000926 	beq	r2,zero,81134004 <alt_up_sd_card_set_attributes+0x7c>
81133fe0:	e0fffe0f 	ldh	r3,-8(fp)
81133fe4:	e0bfff0b 	ldhu	r2,-4(fp)
81133fe8:	1009883a 	mov	r4,r2
81133fec:	00a04574 	movhi	r2,33045
81133ff0:	10882404 	addi	r2,r2,8336
81133ff4:	180691ba 	slli	r3,r3,6
81133ff8:	10c5883a 	add	r2,r2,r3
81133ffc:	108002c4 	addi	r2,r2,11
81134000:	11000005 	stb	r4,0(r2)
81134004:	0001883a 	nop
81134008:	e037883a 	mov	sp,fp
8113400c:	df000017 	ldw	fp,0(sp)
81134010:	dec00104 	addi	sp,sp,4
81134014:	f800283a 	ret

81134018 <alt_up_sd_card_get_attributes>:
81134018:	defffd04 	addi	sp,sp,-12
8113401c:	de00012e 	bgeu	sp,et,81134024 <alt_up_sd_card_get_attributes+0xc>
81134020:	003b68fa 	trap	3
81134024:	df000215 	stw	fp,8(sp)
81134028:	df000204 	addi	fp,sp,8
8113402c:	2005883a 	mov	r2,r4
81134030:	e0bfff0d 	sth	r2,-4(fp)
81134034:	00bfffc4 	movi	r2,-1
81134038:	e0bffe0d 	sth	r2,-8(fp)
8113403c:	e0bfff0f 	ldh	r2,-4(fp)
81134040:	10001416 	blt	r2,zero,81134094 <alt_up_sd_card_get_attributes+0x7c>
81134044:	e0bfff0f 	ldh	r2,-4(fp)
81134048:	10800508 	cmpgei	r2,r2,20
8113404c:	1000111e 	bne	r2,zero,81134094 <alt_up_sd_card_get_attributes+0x7c>
81134050:	e0ffff0f 	ldh	r3,-4(fp)
81134054:	00a04574 	movhi	r2,33045
81134058:	10882404 	addi	r2,r2,8336
8113405c:	180691ba 	slli	r3,r3,6
81134060:	10c5883a 	add	r2,r2,r3
81134064:	10800f04 	addi	r2,r2,60
81134068:	10800017 	ldw	r2,0(r2)
8113406c:	10000926 	beq	r2,zero,81134094 <alt_up_sd_card_get_attributes+0x7c>
81134070:	e0ffff0f 	ldh	r3,-4(fp)
81134074:	00a04574 	movhi	r2,33045
81134078:	10882404 	addi	r2,r2,8336
8113407c:	180691ba 	slli	r3,r3,6
81134080:	10c5883a 	add	r2,r2,r3
81134084:	108002c4 	addi	r2,r2,11
81134088:	10800003 	ldbu	r2,0(r2)
8113408c:	10803fcc 	andi	r2,r2,255
81134090:	e0bffe0d 	sth	r2,-8(fp)
81134094:	e0bffe0b 	ldhu	r2,-8(fp)
81134098:	e037883a 	mov	sp,fp
8113409c:	df000017 	ldw	fp,0(sp)
811340a0:	dec00104 	addi	sp,sp,4
811340a4:	f800283a 	ret

811340a8 <alt_up_sd_card_read>:
811340a8:	defffa04 	addi	sp,sp,-24
811340ac:	de00012e 	bgeu	sp,et,811340b4 <alt_up_sd_card_read+0xc>
811340b0:	003b68fa 	trap	3
811340b4:	dfc00515 	stw	ra,20(sp)
811340b8:	df000415 	stw	fp,16(sp)
811340bc:	df000404 	addi	fp,sp,16
811340c0:	2005883a 	mov	r2,r4
811340c4:	e0bfff0d 	sth	r2,-4(fp)
811340c8:	00bfffc4 	movi	r2,-1
811340cc:	e0bffc0d 	sth	r2,-16(fp)
811340d0:	e0bfff0f 	ldh	r2,-4(fp)
811340d4:	1000ce16 	blt	r2,zero,81134410 <alt_up_sd_card_read+0x368>
811340d8:	e0bfff0f 	ldh	r2,-4(fp)
811340dc:	10800508 	cmpgei	r2,r2,20
811340e0:	1000cb1e 	bne	r2,zero,81134410 <alt_up_sd_card_read+0x368>
811340e4:	e0ffff0f 	ldh	r3,-4(fp)
811340e8:	00a04574 	movhi	r2,33045
811340ec:	10882404 	addi	r2,r2,8336
811340f0:	180691ba 	slli	r3,r3,6
811340f4:	10c5883a 	add	r2,r2,r3
811340f8:	10800f04 	addi	r2,r2,60
811340fc:	10800017 	ldw	r2,0(r2)
81134100:	1000c326 	beq	r2,zero,81134410 <alt_up_sd_card_read+0x368>
81134104:	e0ffff0f 	ldh	r3,-4(fp)
81134108:	00a04574 	movhi	r2,33045
8113410c:	10882404 	addi	r2,r2,8336
81134110:	180691ba 	slli	r3,r3,6
81134114:	10c5883a 	add	r2,r2,r3
81134118:	10800904 	addi	r2,r2,36
8113411c:	10c00017 	ldw	r3,0(r2)
81134120:	e13fff0f 	ldh	r4,-4(fp)
81134124:	00a04574 	movhi	r2,33045
81134128:	10882404 	addi	r2,r2,8336
8113412c:	200891ba 	slli	r4,r4,6
81134130:	1105883a 	add	r2,r2,r4
81134134:	10800604 	addi	r2,r2,24
81134138:	10800017 	ldw	r2,0(r2)
8113413c:	1880b42e 	bgeu	r3,r2,81134410 <alt_up_sd_card_read+0x368>
81134140:	00a04574 	movhi	r2,33045
81134144:	10880f04 	addi	r2,r2,8252
81134148:	10c01417 	ldw	r3,80(r2)
8113414c:	e13fff0f 	ldh	r4,-4(fp)
81134150:	00a04574 	movhi	r2,33045
81134154:	10882404 	addi	r2,r2,8336
81134158:	200891ba 	slli	r4,r4,6
8113415c:	1105883a 	add	r2,r2,r4
81134160:	10800704 	addi	r2,r2,28
81134164:	10800017 	ldw	r2,0(r2)
81134168:	113fff84 	addi	r4,r2,-2
8113416c:	00a04574 	movhi	r2,33045
81134170:	10880f04 	addi	r2,r2,8252
81134174:	10800383 	ldbu	r2,14(r2)
81134178:	10803fcc 	andi	r2,r2,255
8113417c:	2085383a 	mul	r2,r4,r2
81134180:	1887883a 	add	r3,r3,r2
81134184:	e13fff0f 	ldh	r4,-4(fp)
81134188:	00a04574 	movhi	r2,33045
8113418c:	10882404 	addi	r2,r2,8336
81134190:	200891ba 	slli	r4,r4,6
81134194:	1105883a 	add	r2,r2,r4
81134198:	10800804 	addi	r2,r2,32
8113419c:	10800017 	ldw	r2,0(r2)
811341a0:	1885883a 	add	r2,r3,r2
811341a4:	e0bffd15 	stw	r2,-12(fp)
811341a8:	e0ffff0f 	ldh	r3,-4(fp)
811341ac:	00a04574 	movhi	r2,33045
811341b0:	10882404 	addi	r2,r2,8336
811341b4:	180691ba 	slli	r3,r3,6
811341b8:	10c5883a 	add	r2,r2,r3
811341bc:	10800904 	addi	r2,r2,36
811341c0:	10800017 	ldw	r2,0(r2)
811341c4:	10006826 	beq	r2,zero,81134368 <alt_up_sd_card_read+0x2c0>
811341c8:	e0ffff0f 	ldh	r3,-4(fp)
811341cc:	00a04574 	movhi	r2,33045
811341d0:	10882404 	addi	r2,r2,8336
811341d4:	180691ba 	slli	r3,r3,6
811341d8:	10c5883a 	add	r2,r2,r3
811341dc:	10800904 	addi	r2,r2,36
811341e0:	10800017 	ldw	r2,0(r2)
811341e4:	10807fcc 	andi	r2,r2,511
811341e8:	10005f1e 	bne	r2,zero,81134368 <alt_up_sd_card_read+0x2c0>
811341ec:	e0ffff0f 	ldh	r3,-4(fp)
811341f0:	00a04574 	movhi	r2,33045
811341f4:	10882404 	addi	r2,r2,8336
811341f8:	180691ba 	slli	r3,r3,6
811341fc:	10c5883a 	add	r2,r2,r3
81134200:	10800804 	addi	r2,r2,32
81134204:	10c00017 	ldw	r3,0(r2)
81134208:	00a04574 	movhi	r2,33045
8113420c:	10880f04 	addi	r2,r2,8252
81134210:	10800383 	ldbu	r2,14(r2)
81134214:	10803fcc 	andi	r2,r2,255
81134218:	10bfffc4 	addi	r2,r2,-1
8113421c:	1880401e 	bne	r3,r2,81134320 <alt_up_sd_card_read+0x278>
81134220:	e0ffff0f 	ldh	r3,-4(fp)
81134224:	00a04574 	movhi	r2,33045
81134228:	10882404 	addi	r2,r2,8336
8113422c:	180691ba 	slli	r3,r3,6
81134230:	10c5883a 	add	r2,r2,r3
81134234:	10800704 	addi	r2,r2,28
81134238:	10800017 	ldw	r2,0(r2)
8113423c:	e0fffe04 	addi	r3,fp,-8
81134240:	180b883a 	mov	r5,r3
81134244:	1009883a 	mov	r4,r2
81134248:	1130a340 	call	81130a34 <get_cluster_flag>
8113424c:	10003226 	beq	r2,zero,81134318 <alt_up_sd_card_read+0x270>
81134250:	e0bffe0b 	ldhu	r2,-8(fp)
81134254:	10bfffcc 	andi	r2,r2,65535
81134258:	10fffe0c 	andi	r3,r2,65528
8113425c:	00bffe14 	movui	r2,65528
81134260:	1880021e 	bne	r3,r2,8113426c <alt_up_sd_card_read+0x1c4>
81134264:	00bfffc4 	movi	r2,-1
81134268:	00006a06 	br	81134414 <alt_up_sd_card_read+0x36c>
8113426c:	e13fff0f 	ldh	r4,-4(fp)
81134270:	e0bffe0b 	ldhu	r2,-8(fp)
81134274:	10ffffcc 	andi	r3,r2,65535
81134278:	00a04574 	movhi	r2,33045
8113427c:	10882404 	addi	r2,r2,8336
81134280:	200891ba 	slli	r4,r4,6
81134284:	1105883a 	add	r2,r2,r4
81134288:	10800704 	addi	r2,r2,28
8113428c:	10c00015 	stw	r3,0(r2)
81134290:	e0ffff0f 	ldh	r3,-4(fp)
81134294:	00a04574 	movhi	r2,33045
81134298:	10882404 	addi	r2,r2,8336
8113429c:	180691ba 	slli	r3,r3,6
811342a0:	10c5883a 	add	r2,r2,r3
811342a4:	10800804 	addi	r2,r2,32
811342a8:	10000015 	stw	zero,0(r2)
811342ac:	00a04574 	movhi	r2,33045
811342b0:	10880f04 	addi	r2,r2,8252
811342b4:	10c01417 	ldw	r3,80(r2)
811342b8:	e13fff0f 	ldh	r4,-4(fp)
811342bc:	00a04574 	movhi	r2,33045
811342c0:	10882404 	addi	r2,r2,8336
811342c4:	200891ba 	slli	r4,r4,6
811342c8:	1105883a 	add	r2,r2,r4
811342cc:	10800704 	addi	r2,r2,28
811342d0:	10800017 	ldw	r2,0(r2)
811342d4:	113fff84 	addi	r4,r2,-2
811342d8:	00a04574 	movhi	r2,33045
811342dc:	10880f04 	addi	r2,r2,8252
811342e0:	10800383 	ldbu	r2,14(r2)
811342e4:	10803fcc 	andi	r2,r2,255
811342e8:	2085383a 	mul	r2,r4,r2
811342ec:	1887883a 	add	r3,r3,r2
811342f0:	e13fff0f 	ldh	r4,-4(fp)
811342f4:	00a04574 	movhi	r2,33045
811342f8:	10882404 	addi	r2,r2,8336
811342fc:	200891ba 	slli	r4,r4,6
81134300:	1105883a 	add	r2,r2,r4
81134304:	10800804 	addi	r2,r2,32
81134308:	10800017 	ldw	r2,0(r2)
8113430c:	1885883a 	add	r2,r3,r2
81134310:	e0bffd15 	stw	r2,-12(fp)
81134314:	00001406 	br	81134368 <alt_up_sd_card_read+0x2c0>
81134318:	00bfff84 	movi	r2,-2
8113431c:	00003d06 	br	81134414 <alt_up_sd_card_read+0x36c>
81134320:	e13fff0f 	ldh	r4,-4(fp)
81134324:	e0ffff0f 	ldh	r3,-4(fp)
81134328:	00a04574 	movhi	r2,33045
8113432c:	10882404 	addi	r2,r2,8336
81134330:	180691ba 	slli	r3,r3,6
81134334:	10c5883a 	add	r2,r2,r3
81134338:	10800804 	addi	r2,r2,32
8113433c:	10800017 	ldw	r2,0(r2)
81134340:	10c00044 	addi	r3,r2,1
81134344:	00a04574 	movhi	r2,33045
81134348:	10882404 	addi	r2,r2,8336
8113434c:	200891ba 	slli	r4,r4,6
81134350:	1105883a 	add	r2,r2,r4
81134354:	10800804 	addi	r2,r2,32
81134358:	10c00015 	stw	r3,0(r2)
8113435c:	e0bffd17 	ldw	r2,-12(fp)
81134360:	10800044 	addi	r2,r2,1
81134364:	e0bffd15 	stw	r2,-12(fp)
81134368:	d0e09317 	ldw	r3,-32180(gp)
8113436c:	e0bffd17 	ldw	r2,-12(fp)
81134370:	1885883a 	add	r2,r3,r2
81134374:	1007883a 	mov	r3,r2
81134378:	d0a09717 	ldw	r2,-32164(gp)
8113437c:	18800726 	beq	r3,r2,8113439c <alt_up_sd_card_read+0x2f4>
81134380:	d0a09317 	ldw	r2,-32180(gp)
81134384:	100b883a 	mov	r5,r2
81134388:	e13ffd17 	ldw	r4,-12(fp)
8113438c:	11309540 	call	81130954 <Read_Sector_Data>
81134390:	1000021e 	bne	r2,zero,8113439c <alt_up_sd_card_read+0x2f4>
81134394:	00bfff84 	movi	r2,-2
81134398:	00001e06 	br	81134414 <alt_up_sd_card_read+0x36c>
8113439c:	d0e09217 	ldw	r3,-32184(gp)
811343a0:	e13fff0f 	ldh	r4,-4(fp)
811343a4:	00a04574 	movhi	r2,33045
811343a8:	10882404 	addi	r2,r2,8336
811343ac:	200891ba 	slli	r4,r4,6
811343b0:	1105883a 	add	r2,r2,r4
811343b4:	10800904 	addi	r2,r2,36
811343b8:	10800017 	ldw	r2,0(r2)
811343bc:	10807fcc 	andi	r2,r2,511
811343c0:	1885883a 	add	r2,r3,r2
811343c4:	10800023 	ldbuio	r2,0(r2)
811343c8:	10803fcc 	andi	r2,r2,255
811343cc:	10803fcc 	andi	r2,r2,255
811343d0:	e0bffc0d 	sth	r2,-16(fp)
811343d4:	e13fff0f 	ldh	r4,-4(fp)
811343d8:	e0ffff0f 	ldh	r3,-4(fp)
811343dc:	00a04574 	movhi	r2,33045
811343e0:	10882404 	addi	r2,r2,8336
811343e4:	180691ba 	slli	r3,r3,6
811343e8:	10c5883a 	add	r2,r2,r3
811343ec:	10800904 	addi	r2,r2,36
811343f0:	10800017 	ldw	r2,0(r2)
811343f4:	10c00044 	addi	r3,r2,1
811343f8:	00a04574 	movhi	r2,33045
811343fc:	10882404 	addi	r2,r2,8336
81134400:	200891ba 	slli	r4,r4,6
81134404:	1105883a 	add	r2,r2,r4
81134408:	10800904 	addi	r2,r2,36
8113440c:	10c00015 	stw	r3,0(r2)
81134410:	e0bffc0b 	ldhu	r2,-16(fp)
81134414:	e037883a 	mov	sp,fp
81134418:	dfc00117 	ldw	ra,4(sp)
8113441c:	df000017 	ldw	fp,0(sp)
81134420:	dec00204 	addi	sp,sp,8
81134424:	f800283a 	ret

81134428 <alt_up_sd_card_write>:
81134428:	defff804 	addi	sp,sp,-32
8113442c:	de00012e 	bgeu	sp,et,81134434 <alt_up_sd_card_write+0xc>
81134430:	003b68fa 	trap	3
81134434:	dfc00715 	stw	ra,28(sp)
81134438:	df000615 	stw	fp,24(sp)
8113443c:	df000604 	addi	fp,sp,24
81134440:	2007883a 	mov	r3,r4
81134444:	2805883a 	mov	r2,r5
81134448:	e0fffe0d 	sth	r3,-8(fp)
8113444c:	e0bfff05 	stb	r2,-4(fp)
81134450:	e03ffa15 	stw	zero,-24(fp)
81134454:	e0bffe0f 	ldh	r2,-8(fp)
81134458:	10017716 	blt	r2,zero,81134a38 <alt_up_sd_card_write+0x610>
8113445c:	e0bffe0f 	ldh	r2,-8(fp)
81134460:	10800508 	cmpgei	r2,r2,20
81134464:	1001741e 	bne	r2,zero,81134a38 <alt_up_sd_card_write+0x610>
81134468:	e0fffe0f 	ldh	r3,-8(fp)
8113446c:	00a04574 	movhi	r2,33045
81134470:	10882404 	addi	r2,r2,8336
81134474:	180691ba 	slli	r3,r3,6
81134478:	10c5883a 	add	r2,r2,r3
8113447c:	10800f04 	addi	r2,r2,60
81134480:	10800017 	ldw	r2,0(r2)
81134484:	10016c26 	beq	r2,zero,81134a38 <alt_up_sd_card_write+0x610>
81134488:	00a04574 	movhi	r2,33045
8113448c:	10880f04 	addi	r2,r2,8252
81134490:	10c01417 	ldw	r3,80(r2)
81134494:	e13ffe0f 	ldh	r4,-8(fp)
81134498:	00a04574 	movhi	r2,33045
8113449c:	10882404 	addi	r2,r2,8336
811344a0:	200891ba 	slli	r4,r4,6
811344a4:	1105883a 	add	r2,r2,r4
811344a8:	10800704 	addi	r2,r2,28
811344ac:	10800017 	ldw	r2,0(r2)
811344b0:	113fff84 	addi	r4,r2,-2
811344b4:	00a04574 	movhi	r2,33045
811344b8:	10880f04 	addi	r2,r2,8252
811344bc:	10800383 	ldbu	r2,14(r2)
811344c0:	10803fcc 	andi	r2,r2,255
811344c4:	2085383a 	mul	r2,r4,r2
811344c8:	1887883a 	add	r3,r3,r2
811344cc:	e13ffe0f 	ldh	r4,-8(fp)
811344d0:	00a04574 	movhi	r2,33045
811344d4:	10882404 	addi	r2,r2,8336
811344d8:	200891ba 	slli	r4,r4,6
811344dc:	1105883a 	add	r2,r2,r4
811344e0:	10800804 	addi	r2,r2,32
811344e4:	10800017 	ldw	r2,0(r2)
811344e8:	1885883a 	add	r2,r3,r2
811344ec:	e0bffb15 	stw	r2,-20(fp)
811344f0:	e0fffe0f 	ldh	r3,-8(fp)
811344f4:	00a04574 	movhi	r2,33045
811344f8:	10882404 	addi	r2,r2,8336
811344fc:	180691ba 	slli	r3,r3,6
81134500:	10c5883a 	add	r2,r2,r3
81134504:	10800904 	addi	r2,r2,36
81134508:	10c00017 	ldw	r3,0(r2)
8113450c:	00a04574 	movhi	r2,33045
81134510:	10880f04 	addi	r2,r2,8252
81134514:	1080030b 	ldhu	r2,12(r2)
81134518:	10bfffcc 	andi	r2,r2,65535
8113451c:	1889203a 	divu	r4,r3,r2
81134520:	2085383a 	mul	r2,r4,r2
81134524:	1885c83a 	sub	r2,r3,r2
81134528:	e0bffc0d 	sth	r2,-16(fp)
8113452c:	e0fffe0f 	ldh	r3,-8(fp)
81134530:	00a04574 	movhi	r2,33045
81134534:	10882404 	addi	r2,r2,8336
81134538:	180691ba 	slli	r3,r3,6
8113453c:	10c5883a 	add	r2,r2,r3
81134540:	10800904 	addi	r2,r2,36
81134544:	10c00017 	ldw	r3,0(r2)
81134548:	e13ffe0f 	ldh	r4,-8(fp)
8113454c:	00a04574 	movhi	r2,33045
81134550:	10882404 	addi	r2,r2,8336
81134554:	200891ba 	slli	r4,r4,6
81134558:	1105883a 	add	r2,r2,r4
8113455c:	10800604 	addi	r2,r2,24
81134560:	10800017 	ldw	r2,0(r2)
81134564:	1880672e 	bgeu	r3,r2,81134704 <alt_up_sd_card_write+0x2dc>
81134568:	e0fffe0f 	ldh	r3,-8(fp)
8113456c:	00a04574 	movhi	r2,33045
81134570:	10882404 	addi	r2,r2,8336
81134574:	180691ba 	slli	r3,r3,6
81134578:	10c5883a 	add	r2,r2,r3
8113457c:	10800904 	addi	r2,r2,36
81134580:	10800017 	ldw	r2,0(r2)
81134584:	1000e126 	beq	r2,zero,8113490c <alt_up_sd_card_write+0x4e4>
81134588:	e0bffc0f 	ldh	r2,-16(fp)
8113458c:	1000df1e 	bne	r2,zero,8113490c <alt_up_sd_card_write+0x4e4>
81134590:	e0fffe0f 	ldh	r3,-8(fp)
81134594:	00a04574 	movhi	r2,33045
81134598:	10882404 	addi	r2,r2,8336
8113459c:	180691ba 	slli	r3,r3,6
811345a0:	10c5883a 	add	r2,r2,r3
811345a4:	10800804 	addi	r2,r2,32
811345a8:	10c00017 	ldw	r3,0(r2)
811345ac:	00a04574 	movhi	r2,33045
811345b0:	10880f04 	addi	r2,r2,8252
811345b4:	10800383 	ldbu	r2,14(r2)
811345b8:	10803fcc 	andi	r2,r2,255
811345bc:	10bfffc4 	addi	r2,r2,-1
811345c0:	18803d1e 	bne	r3,r2,811346b8 <alt_up_sd_card_write+0x290>
811345c4:	e0fffe0f 	ldh	r3,-8(fp)
811345c8:	00a04574 	movhi	r2,33045
811345cc:	10882404 	addi	r2,r2,8336
811345d0:	180691ba 	slli	r3,r3,6
811345d4:	10c5883a 	add	r2,r2,r3
811345d8:	10800704 	addi	r2,r2,28
811345dc:	10800017 	ldw	r2,0(r2)
811345e0:	e0fffc84 	addi	r3,fp,-14
811345e4:	180b883a 	mov	r5,r3
811345e8:	1009883a 	mov	r4,r2
811345ec:	1130a340 	call	81130a34 <get_cluster_flag>
811345f0:	10002f26 	beq	r2,zero,811346b0 <alt_up_sd_card_write+0x288>
811345f4:	e0bffc8b 	ldhu	r2,-14(fp)
811345f8:	10bfffcc 	andi	r2,r2,65535
811345fc:	10bffe28 	cmpgeui	r2,r2,65528
81134600:	1000c21e 	bne	r2,zero,8113490c <alt_up_sd_card_write+0x4e4>
81134604:	e13ffe0f 	ldh	r4,-8(fp)
81134608:	e0bffc8b 	ldhu	r2,-14(fp)
8113460c:	10ffffcc 	andi	r3,r2,65535
81134610:	00a04574 	movhi	r2,33045
81134614:	10882404 	addi	r2,r2,8336
81134618:	200891ba 	slli	r4,r4,6
8113461c:	1105883a 	add	r2,r2,r4
81134620:	10800704 	addi	r2,r2,28
81134624:	10c00015 	stw	r3,0(r2)
81134628:	e0fffe0f 	ldh	r3,-8(fp)
8113462c:	00a04574 	movhi	r2,33045
81134630:	10882404 	addi	r2,r2,8336
81134634:	180691ba 	slli	r3,r3,6
81134638:	10c5883a 	add	r2,r2,r3
8113463c:	10800804 	addi	r2,r2,32
81134640:	10000015 	stw	zero,0(r2)
81134644:	00a04574 	movhi	r2,33045
81134648:	10880f04 	addi	r2,r2,8252
8113464c:	10c01417 	ldw	r3,80(r2)
81134650:	e13ffe0f 	ldh	r4,-8(fp)
81134654:	00a04574 	movhi	r2,33045
81134658:	10882404 	addi	r2,r2,8336
8113465c:	200891ba 	slli	r4,r4,6
81134660:	1105883a 	add	r2,r2,r4
81134664:	10800704 	addi	r2,r2,28
81134668:	10800017 	ldw	r2,0(r2)
8113466c:	113fff84 	addi	r4,r2,-2
81134670:	00a04574 	movhi	r2,33045
81134674:	10880f04 	addi	r2,r2,8252
81134678:	10800383 	ldbu	r2,14(r2)
8113467c:	10803fcc 	andi	r2,r2,255
81134680:	2085383a 	mul	r2,r4,r2
81134684:	1887883a 	add	r3,r3,r2
81134688:	e13ffe0f 	ldh	r4,-8(fp)
8113468c:	00a04574 	movhi	r2,33045
81134690:	10882404 	addi	r2,r2,8336
81134694:	200891ba 	slli	r4,r4,6
81134698:	1105883a 	add	r2,r2,r4
8113469c:	10800804 	addi	r2,r2,32
811346a0:	10800017 	ldw	r2,0(r2)
811346a4:	1885883a 	add	r2,r3,r2
811346a8:	e0bffb15 	stw	r2,-20(fp)
811346ac:	00009706 	br	8113490c <alt_up_sd_card_write+0x4e4>
811346b0:	0005883a 	mov	r2,zero
811346b4:	0000e106 	br	81134a3c <alt_up_sd_card_write+0x614>
811346b8:	e13ffe0f 	ldh	r4,-8(fp)
811346bc:	e0fffe0f 	ldh	r3,-8(fp)
811346c0:	00a04574 	movhi	r2,33045
811346c4:	10882404 	addi	r2,r2,8336
811346c8:	180691ba 	slli	r3,r3,6
811346cc:	10c5883a 	add	r2,r2,r3
811346d0:	10800804 	addi	r2,r2,32
811346d4:	10800017 	ldw	r2,0(r2)
811346d8:	10c00044 	addi	r3,r2,1
811346dc:	00a04574 	movhi	r2,33045
811346e0:	10882404 	addi	r2,r2,8336
811346e4:	200891ba 	slli	r4,r4,6
811346e8:	1105883a 	add	r2,r2,r4
811346ec:	10800804 	addi	r2,r2,32
811346f0:	10c00015 	stw	r3,0(r2)
811346f4:	e0bffb17 	ldw	r2,-20(fp)
811346f8:	10800044 	addi	r2,r2,1
811346fc:	e0bffb15 	stw	r2,-20(fp)
81134700:	00008206 	br	8113490c <alt_up_sd_card_write+0x4e4>
81134704:	e0fffe0f 	ldh	r3,-8(fp)
81134708:	00a04574 	movhi	r2,33045
8113470c:	10882404 	addi	r2,r2,8336
81134710:	180691ba 	slli	r3,r3,6
81134714:	10c5883a 	add	r2,r2,r3
81134718:	10800904 	addi	r2,r2,36
8113471c:	10800017 	ldw	r2,0(r2)
81134720:	10007a26 	beq	r2,zero,8113490c <alt_up_sd_card_write+0x4e4>
81134724:	e0bffc0f 	ldh	r2,-16(fp)
81134728:	1000781e 	bne	r2,zero,8113490c <alt_up_sd_card_write+0x4e4>
8113472c:	e0fffe0f 	ldh	r3,-8(fp)
81134730:	00a04574 	movhi	r2,33045
81134734:	10882404 	addi	r2,r2,8336
81134738:	180691ba 	slli	r3,r3,6
8113473c:	10c5883a 	add	r2,r2,r3
81134740:	10800804 	addi	r2,r2,32
81134744:	10c00017 	ldw	r3,0(r2)
81134748:	00a04574 	movhi	r2,33045
8113474c:	10880f04 	addi	r2,r2,8252
81134750:	10800383 	ldbu	r2,14(r2)
81134754:	10803fcc 	andi	r2,r2,255
81134758:	10bfffc4 	addi	r2,r2,-1
8113475c:	18803e1e 	bne	r3,r2,81134858 <alt_up_sd_card_write+0x430>
81134760:	e0bffd04 	addi	r2,fp,-12
81134764:	1009883a 	mov	r4,r2
81134768:	1132a780 	call	81132a78 <find_first_empty_cluster>
8113476c:	10003826 	beq	r2,zero,81134850 <alt_up_sd_card_write+0x428>
81134770:	e0fffe0f 	ldh	r3,-8(fp)
81134774:	00a04574 	movhi	r2,33045
81134778:	10882404 	addi	r2,r2,8336
8113477c:	180691ba 	slli	r3,r3,6
81134780:	10c5883a 	add	r2,r2,r3
81134784:	10800704 	addi	r2,r2,28
81134788:	10800017 	ldw	r2,0(r2)
8113478c:	e0fffd17 	ldw	r3,-12(fp)
81134790:	18ffffcc 	andi	r3,r3,65535
81134794:	18e0001c 	xori	r3,r3,32768
81134798:	18e00004 	addi	r3,r3,-32768
8113479c:	01800044 	movi	r6,1
811347a0:	180b883a 	mov	r5,r3
811347a4:	1009883a 	mov	r4,r2
811347a8:	1130af00 	call	81130af0 <mark_cluster>
811347ac:	e0bffd17 	ldw	r2,-12(fp)
811347b0:	01800044 	movi	r6,1
811347b4:	017fffc4 	movi	r5,-1
811347b8:	1009883a 	mov	r4,r2
811347bc:	1130af00 	call	81130af0 <mark_cluster>
811347c0:	e0fffe0f 	ldh	r3,-8(fp)
811347c4:	00a04574 	movhi	r2,33045
811347c8:	10882404 	addi	r2,r2,8336
811347cc:	180691ba 	slli	r3,r3,6
811347d0:	10c5883a 	add	r2,r2,r3
811347d4:	10800704 	addi	r2,r2,28
811347d8:	10800017 	ldw	r2,0(r2)
811347dc:	e0fffd17 	ldw	r3,-12(fp)
811347e0:	18ffffcc 	andi	r3,r3,65535
811347e4:	18e0001c 	xori	r3,r3,32768
811347e8:	18e00004 	addi	r3,r3,-32768
811347ec:	000d883a 	mov	r6,zero
811347f0:	180b883a 	mov	r5,r3
811347f4:	1009883a 	mov	r4,r2
811347f8:	1130af00 	call	81130af0 <mark_cluster>
811347fc:	e0bffd17 	ldw	r2,-12(fp)
81134800:	000d883a 	mov	r6,zero
81134804:	017fffc4 	movi	r5,-1
81134808:	1009883a 	mov	r4,r2
8113480c:	1130af00 	call	81130af0 <mark_cluster>
81134810:	e13ffe0f 	ldh	r4,-8(fp)
81134814:	e0fffd17 	ldw	r3,-12(fp)
81134818:	00a04574 	movhi	r2,33045
8113481c:	10882404 	addi	r2,r2,8336
81134820:	200891ba 	slli	r4,r4,6
81134824:	1105883a 	add	r2,r2,r4
81134828:	10800704 	addi	r2,r2,28
8113482c:	10c00015 	stw	r3,0(r2)
81134830:	e0fffe0f 	ldh	r3,-8(fp)
81134834:	00a04574 	movhi	r2,33045
81134838:	10882404 	addi	r2,r2,8336
8113483c:	180691ba 	slli	r3,r3,6
81134840:	10c5883a 	add	r2,r2,r3
81134844:	10800804 	addi	r2,r2,32
81134848:	10000015 	stw	zero,0(r2)
8113484c:	00001506 	br	811348a4 <alt_up_sd_card_write+0x47c>
81134850:	0005883a 	mov	r2,zero
81134854:	00007906 	br	81134a3c <alt_up_sd_card_write+0x614>
81134858:	e13ffe0f 	ldh	r4,-8(fp)
8113485c:	e0fffe0f 	ldh	r3,-8(fp)
81134860:	00a04574 	movhi	r2,33045
81134864:	10882404 	addi	r2,r2,8336
81134868:	180691ba 	slli	r3,r3,6
8113486c:	10c5883a 	add	r2,r2,r3
81134870:	10800904 	addi	r2,r2,36
81134874:	10c00017 	ldw	r3,0(r2)
81134878:	00a04574 	movhi	r2,33045
8113487c:	10880f04 	addi	r2,r2,8252
81134880:	1080030b 	ldhu	r2,12(r2)
81134884:	10bfffcc 	andi	r2,r2,65535
81134888:	1887203a 	divu	r3,r3,r2
8113488c:	00a04574 	movhi	r2,33045
81134890:	10882404 	addi	r2,r2,8336
81134894:	200891ba 	slli	r4,r4,6
81134898:	1105883a 	add	r2,r2,r4
8113489c:	10800804 	addi	r2,r2,32
811348a0:	10c00015 	stw	r3,0(r2)
811348a4:	00a04574 	movhi	r2,33045
811348a8:	10880f04 	addi	r2,r2,8252
811348ac:	10c01417 	ldw	r3,80(r2)
811348b0:	e13ffe0f 	ldh	r4,-8(fp)
811348b4:	00a04574 	movhi	r2,33045
811348b8:	10882404 	addi	r2,r2,8336
811348bc:	200891ba 	slli	r4,r4,6
811348c0:	1105883a 	add	r2,r2,r4
811348c4:	10800704 	addi	r2,r2,28
811348c8:	10800017 	ldw	r2,0(r2)
811348cc:	113fff84 	addi	r4,r2,-2
811348d0:	00a04574 	movhi	r2,33045
811348d4:	10880f04 	addi	r2,r2,8252
811348d8:	10800383 	ldbu	r2,14(r2)
811348dc:	10803fcc 	andi	r2,r2,255
811348e0:	2085383a 	mul	r2,r4,r2
811348e4:	1887883a 	add	r3,r3,r2
811348e8:	e13ffe0f 	ldh	r4,-8(fp)
811348ec:	00a04574 	movhi	r2,33045
811348f0:	10882404 	addi	r2,r2,8336
811348f4:	200891ba 	slli	r4,r4,6
811348f8:	1105883a 	add	r2,r2,r4
811348fc:	10800804 	addi	r2,r2,32
81134900:	10800017 	ldw	r2,0(r2)
81134904:	1885883a 	add	r2,r3,r2
81134908:	e0bffb15 	stw	r2,-20(fp)
8113490c:	d0e09317 	ldw	r3,-32180(gp)
81134910:	e0bffb17 	ldw	r2,-20(fp)
81134914:	1885883a 	add	r2,r3,r2
81134918:	1007883a 	mov	r3,r2
8113491c:	d0a09717 	ldw	r2,-32164(gp)
81134920:	18800726 	beq	r3,r2,81134940 <alt_up_sd_card_write+0x518>
81134924:	d0a09317 	ldw	r2,-32180(gp)
81134928:	100b883a 	mov	r5,r2
8113492c:	e13ffb17 	ldw	r4,-20(fp)
81134930:	11309540 	call	81130954 <Read_Sector_Data>
81134934:	1000021e 	bne	r2,zero,81134940 <alt_up_sd_card_write+0x518>
81134938:	0005883a 	mov	r2,zero
8113493c:	00003f06 	br	81134a3c <alt_up_sd_card_write+0x614>
81134940:	d0e09217 	ldw	r3,-32184(gp)
81134944:	e0bffc0f 	ldh	r2,-16(fp)
81134948:	1885883a 	add	r2,r3,r2
8113494c:	e0ffff07 	ldb	r3,-4(fp)
81134950:	10c00025 	stbio	r3,0(r2)
81134954:	e13ffe0f 	ldh	r4,-8(fp)
81134958:	e0fffe0f 	ldh	r3,-8(fp)
8113495c:	00a04574 	movhi	r2,33045
81134960:	10882404 	addi	r2,r2,8336
81134964:	180691ba 	slli	r3,r3,6
81134968:	10c5883a 	add	r2,r2,r3
8113496c:	10800904 	addi	r2,r2,36
81134970:	10800017 	ldw	r2,0(r2)
81134974:	10c00044 	addi	r3,r2,1
81134978:	00a04574 	movhi	r2,33045
8113497c:	10882404 	addi	r2,r2,8336
81134980:	200891ba 	slli	r4,r4,6
81134984:	1105883a 	add	r2,r2,r4
81134988:	10800904 	addi	r2,r2,36
8113498c:	10c00015 	stw	r3,0(r2)
81134990:	e0fffe0f 	ldh	r3,-8(fp)
81134994:	00a04574 	movhi	r2,33045
81134998:	10882404 	addi	r2,r2,8336
8113499c:	180691ba 	slli	r3,r3,6
811349a0:	10c5883a 	add	r2,r2,r3
811349a4:	10800904 	addi	r2,r2,36
811349a8:	10c00017 	ldw	r3,0(r2)
811349ac:	e13ffe0f 	ldh	r4,-8(fp)
811349b0:	00a04574 	movhi	r2,33045
811349b4:	10882404 	addi	r2,r2,8336
811349b8:	200891ba 	slli	r4,r4,6
811349bc:	1105883a 	add	r2,r2,r4
811349c0:	10800604 	addi	r2,r2,24
811349c4:	10800017 	ldw	r2,0(r2)
811349c8:	18801736 	bltu	r3,r2,81134a28 <alt_up_sd_card_write+0x600>
811349cc:	e13ffe0f 	ldh	r4,-8(fp)
811349d0:	e0fffe0f 	ldh	r3,-8(fp)
811349d4:	00a04574 	movhi	r2,33045
811349d8:	10882404 	addi	r2,r2,8336
811349dc:	180691ba 	slli	r3,r3,6
811349e0:	10c5883a 	add	r2,r2,r3
811349e4:	10800604 	addi	r2,r2,24
811349e8:	10800017 	ldw	r2,0(r2)
811349ec:	10c00044 	addi	r3,r2,1
811349f0:	00a04574 	movhi	r2,33045
811349f4:	10882404 	addi	r2,r2,8336
811349f8:	200891ba 	slli	r4,r4,6
811349fc:	1105883a 	add	r2,r2,r4
81134a00:	10800604 	addi	r2,r2,24
81134a04:	10c00015 	stw	r3,0(r2)
81134a08:	e0fffe0f 	ldh	r3,-8(fp)
81134a0c:	00a04574 	movhi	r2,33045
81134a10:	10882404 	addi	r2,r2,8336
81134a14:	180691ba 	slli	r3,r3,6
81134a18:	10c5883a 	add	r2,r2,r3
81134a1c:	10800e04 	addi	r2,r2,56
81134a20:	00c00044 	movi	r3,1
81134a24:	10c00015 	stw	r3,0(r2)
81134a28:	00800044 	movi	r2,1
81134a2c:	d0a09615 	stw	r2,-32168(gp)
81134a30:	00800044 	movi	r2,1
81134a34:	e0bffa15 	stw	r2,-24(fp)
81134a38:	e0bffa17 	ldw	r2,-24(fp)
81134a3c:	e037883a 	mov	sp,fp
81134a40:	dfc00117 	ldw	ra,4(sp)
81134a44:	df000017 	ldw	fp,0(sp)
81134a48:	dec00204 	addi	sp,sp,8
81134a4c:	f800283a 	ret

81134a50 <alt_up_sd_card_fclose>:
81134a50:	defffb04 	addi	sp,sp,-20
81134a54:	de00012e 	bgeu	sp,et,81134a5c <alt_up_sd_card_fclose+0xc>
81134a58:	003b68fa 	trap	3
81134a5c:	dfc00415 	stw	ra,16(sp)
81134a60:	df000315 	stw	fp,12(sp)
81134a64:	df000304 	addi	fp,sp,12
81134a68:	2005883a 	mov	r2,r4
81134a6c:	e0bfff0d 	sth	r2,-4(fp)
81134a70:	e03ffd15 	stw	zero,-12(fp)
81134a74:	113362c0 	call	8113362c <alt_up_sd_card_is_Present>
81134a78:	10006026 	beq	r2,zero,81134bfc <alt_up_sd_card_fclose+0x1ac>
81134a7c:	d0a08c17 	ldw	r2,-32208(gp)
81134a80:	10005e26 	beq	r2,zero,81134bfc <alt_up_sd_card_fclose+0x1ac>
81134a84:	e0ffff0f 	ldh	r3,-4(fp)
81134a88:	00a04574 	movhi	r2,33045
81134a8c:	10882404 	addi	r2,r2,8336
81134a90:	180691ba 	slli	r3,r3,6
81134a94:	10c5883a 	add	r2,r2,r3
81134a98:	10800f04 	addi	r2,r2,60
81134a9c:	10800017 	ldw	r2,0(r2)
81134aa0:	10005626 	beq	r2,zero,81134bfc <alt_up_sd_card_fclose+0x1ac>
81134aa4:	e0ffff0f 	ldh	r3,-4(fp)
81134aa8:	00a04574 	movhi	r2,33045
81134aac:	10882404 	addi	r2,r2,8336
81134ab0:	180691ba 	slli	r3,r3,6
81134ab4:	10c5883a 	add	r2,r2,r3
81134ab8:	10800e04 	addi	r2,r2,56
81134abc:	10800017 	ldw	r2,0(r2)
81134ac0:	10004526 	beq	r2,zero,81134bd8 <alt_up_sd_card_fclose+0x188>
81134ac4:	e0ffff0f 	ldh	r3,-4(fp)
81134ac8:	00a04574 	movhi	r2,33045
81134acc:	10882404 	addi	r2,r2,8336
81134ad0:	180691ba 	slli	r3,r3,6
81134ad4:	10c5883a 	add	r2,r2,r3
81134ad8:	10800b04 	addi	r2,r2,44
81134adc:	10800017 	ldw	r2,0(r2)
81134ae0:	e0bffe15 	stw	r2,-8(fp)
81134ae4:	e0ffff0f 	ldh	r3,-4(fp)
81134ae8:	00a04574 	movhi	r2,33045
81134aec:	10882404 	addi	r2,r2,8336
81134af0:	180691ba 	slli	r3,r3,6
81134af4:	10c5883a 	add	r2,r2,r3
81134af8:	10800a04 	addi	r2,r2,40
81134afc:	10800017 	ldw	r2,0(r2)
81134b00:	1000071e 	bne	r2,zero,81134b20 <alt_up_sd_card_fclose+0xd0>
81134b04:	00a04574 	movhi	r2,33045
81134b08:	10880f04 	addi	r2,r2,8252
81134b0c:	10801317 	ldw	r2,76(r2)
81134b10:	e0fffe17 	ldw	r3,-8(fp)
81134b14:	1885883a 	add	r2,r3,r2
81134b18:	e0bffe15 	stw	r2,-8(fp)
81134b1c:	00001406 	br	81134b70 <alt_up_sd_card_fclose+0x120>
81134b20:	00a04574 	movhi	r2,33045
81134b24:	10880f04 	addi	r2,r2,8252
81134b28:	10c01417 	ldw	r3,80(r2)
81134b2c:	e0bffe17 	ldw	r2,-8(fp)
81134b30:	1887883a 	add	r3,r3,r2
81134b34:	e13fff0f 	ldh	r4,-4(fp)
81134b38:	00a04574 	movhi	r2,33045
81134b3c:	10882404 	addi	r2,r2,8336
81134b40:	200891ba 	slli	r4,r4,6
81134b44:	1105883a 	add	r2,r2,r4
81134b48:	10800a04 	addi	r2,r2,40
81134b4c:	10800017 	ldw	r2,0(r2)
81134b50:	113fff84 	addi	r4,r2,-2
81134b54:	00a04574 	movhi	r2,33045
81134b58:	10880f04 	addi	r2,r2,8252
81134b5c:	10800383 	ldbu	r2,14(r2)
81134b60:	10803fcc 	andi	r2,r2,255
81134b64:	2085383a 	mul	r2,r4,r2
81134b68:	1885883a 	add	r2,r3,r2
81134b6c:	e0bffe15 	stw	r2,-8(fp)
81134b70:	e0bffe17 	ldw	r2,-8(fp)
81134b74:	d0e09317 	ldw	r3,-32180(gp)
81134b78:	180b883a 	mov	r5,r3
81134b7c:	1009883a 	mov	r4,r2
81134b80:	11309540 	call	81130954 <Read_Sector_Data>
81134b84:	10001426 	beq	r2,zero,81134bd8 <alt_up_sd_card_fclose+0x188>
81134b88:	e0ffff0f 	ldh	r3,-4(fp)
81134b8c:	00a04574 	movhi	r2,33045
81134b90:	10882404 	addi	r2,r2,8336
81134b94:	180691ba 	slli	r3,r3,6
81134b98:	10c5883a 	add	r2,r2,r3
81134b9c:	10800c04 	addi	r2,r2,48
81134ba0:	1080000b 	ldhu	r2,0(r2)
81134ba4:	113fffcc 	andi	r4,r2,65535
81134ba8:	2120001c 	xori	r4,r4,32768
81134bac:	21200004 	addi	r4,r4,-32768
81134bb0:	e0bfff0f 	ldh	r2,-4(fp)
81134bb4:	100691ba 	slli	r3,r2,6
81134bb8:	00a04574 	movhi	r2,33045
81134bbc:	10882404 	addi	r2,r2,8336
81134bc0:	1885883a 	add	r2,r3,r2
81134bc4:	100b883a 	mov	r5,r2
81134bc8:	11310080 	call	81131008 <Write_File_Record_At_Offset>
81134bcc:	10000226 	beq	r2,zero,81134bd8 <alt_up_sd_card_fclose+0x188>
81134bd0:	11309000 	call	81130900 <Save_Modified_Sector>
81134bd4:	e0bffd15 	stw	r2,-12(fp)
81134bd8:	e0ffff0f 	ldh	r3,-4(fp)
81134bdc:	00a04574 	movhi	r2,33045
81134be0:	10882404 	addi	r2,r2,8336
81134be4:	180691ba 	slli	r3,r3,6
81134be8:	10c5883a 	add	r2,r2,r3
81134bec:	10800f04 	addi	r2,r2,60
81134bf0:	10000015 	stw	zero,0(r2)
81134bf4:	00800044 	movi	r2,1
81134bf8:	e0bffd15 	stw	r2,-12(fp)
81134bfc:	e0bffd17 	ldw	r2,-12(fp)
81134c00:	e037883a 	mov	sp,fp
81134c04:	dfc00117 	ldw	ra,4(sp)
81134c08:	df000017 	ldw	fp,0(sp)
81134c0c:	dec00204 	addi	sp,sp,8
81134c10:	f800283a 	ret

81134c14 <altera_avalon_jtag_uart_read_fd>:
81134c14:	defffa04 	addi	sp,sp,-24
81134c18:	de00012e 	bgeu	sp,et,81134c20 <altera_avalon_jtag_uart_read_fd+0xc>
81134c1c:	003b68fa 	trap	3
81134c20:	dfc00515 	stw	ra,20(sp)
81134c24:	df000415 	stw	fp,16(sp)
81134c28:	df000404 	addi	fp,sp,16
81134c2c:	e13ffd15 	stw	r4,-12(fp)
81134c30:	e17ffe15 	stw	r5,-8(fp)
81134c34:	e1bfff15 	stw	r6,-4(fp)
81134c38:	e0bffd17 	ldw	r2,-12(fp)
81134c3c:	10800017 	ldw	r2,0(r2)
81134c40:	e0bffc15 	stw	r2,-16(fp)
81134c44:	e0bffc17 	ldw	r2,-16(fp)
81134c48:	10c00a04 	addi	r3,r2,40
81134c4c:	e0bffd17 	ldw	r2,-12(fp)
81134c50:	10800217 	ldw	r2,8(r2)
81134c54:	100f883a 	mov	r7,r2
81134c58:	e1bfff17 	ldw	r6,-4(fp)
81134c5c:	e17ffe17 	ldw	r5,-8(fp)
81134c60:	1809883a 	mov	r4,r3
81134c64:	11354080 	call	81135408 <altera_avalon_jtag_uart_read>
81134c68:	e037883a 	mov	sp,fp
81134c6c:	dfc00117 	ldw	ra,4(sp)
81134c70:	df000017 	ldw	fp,0(sp)
81134c74:	dec00204 	addi	sp,sp,8
81134c78:	f800283a 	ret

81134c7c <altera_avalon_jtag_uart_write_fd>:
81134c7c:	defffa04 	addi	sp,sp,-24
81134c80:	de00012e 	bgeu	sp,et,81134c88 <altera_avalon_jtag_uart_write_fd+0xc>
81134c84:	003b68fa 	trap	3
81134c88:	dfc00515 	stw	ra,20(sp)
81134c8c:	df000415 	stw	fp,16(sp)
81134c90:	df000404 	addi	fp,sp,16
81134c94:	e13ffd15 	stw	r4,-12(fp)
81134c98:	e17ffe15 	stw	r5,-8(fp)
81134c9c:	e1bfff15 	stw	r6,-4(fp)
81134ca0:	e0bffd17 	ldw	r2,-12(fp)
81134ca4:	10800017 	ldw	r2,0(r2)
81134ca8:	e0bffc15 	stw	r2,-16(fp)
81134cac:	e0bffc17 	ldw	r2,-16(fp)
81134cb0:	10c00a04 	addi	r3,r2,40
81134cb4:	e0bffd17 	ldw	r2,-12(fp)
81134cb8:	10800217 	ldw	r2,8(r2)
81134cbc:	100f883a 	mov	r7,r2
81134cc0:	e1bfff17 	ldw	r6,-4(fp)
81134cc4:	e17ffe17 	ldw	r5,-8(fp)
81134cc8:	1809883a 	mov	r4,r3
81134ccc:	11356cc0 	call	811356cc <altera_avalon_jtag_uart_write>
81134cd0:	e037883a 	mov	sp,fp
81134cd4:	dfc00117 	ldw	ra,4(sp)
81134cd8:	df000017 	ldw	fp,0(sp)
81134cdc:	dec00204 	addi	sp,sp,8
81134ce0:	f800283a 	ret

81134ce4 <altera_avalon_jtag_uart_close_fd>:
81134ce4:	defffc04 	addi	sp,sp,-16
81134ce8:	de00012e 	bgeu	sp,et,81134cf0 <altera_avalon_jtag_uart_close_fd+0xc>
81134cec:	003b68fa 	trap	3
81134cf0:	dfc00315 	stw	ra,12(sp)
81134cf4:	df000215 	stw	fp,8(sp)
81134cf8:	df000204 	addi	fp,sp,8
81134cfc:	e13fff15 	stw	r4,-4(fp)
81134d00:	e0bfff17 	ldw	r2,-4(fp)
81134d04:	10800017 	ldw	r2,0(r2)
81134d08:	e0bffe15 	stw	r2,-8(fp)
81134d0c:	e0bffe17 	ldw	r2,-8(fp)
81134d10:	10c00a04 	addi	r3,r2,40
81134d14:	e0bfff17 	ldw	r2,-4(fp)
81134d18:	10800217 	ldw	r2,8(r2)
81134d1c:	100b883a 	mov	r5,r2
81134d20:	1809883a 	mov	r4,r3
81134d24:	11352a00 	call	811352a0 <altera_avalon_jtag_uart_close>
81134d28:	e037883a 	mov	sp,fp
81134d2c:	dfc00117 	ldw	ra,4(sp)
81134d30:	df000017 	ldw	fp,0(sp)
81134d34:	dec00204 	addi	sp,sp,8
81134d38:	f800283a 	ret

81134d3c <altera_avalon_jtag_uart_ioctl_fd>:
81134d3c:	defffa04 	addi	sp,sp,-24
81134d40:	de00012e 	bgeu	sp,et,81134d48 <altera_avalon_jtag_uart_ioctl_fd+0xc>
81134d44:	003b68fa 	trap	3
81134d48:	dfc00515 	stw	ra,20(sp)
81134d4c:	df000415 	stw	fp,16(sp)
81134d50:	df000404 	addi	fp,sp,16
81134d54:	e13ffd15 	stw	r4,-12(fp)
81134d58:	e17ffe15 	stw	r5,-8(fp)
81134d5c:	e1bfff15 	stw	r6,-4(fp)
81134d60:	e0bffd17 	ldw	r2,-12(fp)
81134d64:	10800017 	ldw	r2,0(r2)
81134d68:	e0bffc15 	stw	r2,-16(fp)
81134d6c:	e0bffc17 	ldw	r2,-16(fp)
81134d70:	10800a04 	addi	r2,r2,40
81134d74:	e1bfff17 	ldw	r6,-4(fp)
81134d78:	e17ffe17 	ldw	r5,-8(fp)
81134d7c:	1009883a 	mov	r4,r2
81134d80:	11353100 	call	81135310 <altera_avalon_jtag_uart_ioctl>
81134d84:	e037883a 	mov	sp,fp
81134d88:	dfc00117 	ldw	ra,4(sp)
81134d8c:	df000017 	ldw	fp,0(sp)
81134d90:	dec00204 	addi	sp,sp,8
81134d94:	f800283a 	ret

81134d98 <altera_avalon_jtag_uart_init>:
81134d98:	defff104 	addi	sp,sp,-60
81134d9c:	de00012e 	bgeu	sp,et,81134da4 <altera_avalon_jtag_uart_init+0xc>
81134da0:	003b68fa 	trap	3
81134da4:	dfc00e15 	stw	ra,56(sp)
81134da8:	df000d15 	stw	fp,52(sp)
81134dac:	df000d04 	addi	fp,sp,52
81134db0:	e13ff915 	stw	r4,-28(fp)
81134db4:	e17ffa15 	stw	r5,-24(fp)
81134db8:	e1bffb15 	stw	r6,-20(fp)
81134dbc:	e0bff917 	ldw	r2,-28(fp)
81134dc0:	10800c04 	addi	r2,r2,48
81134dc4:	e0bff415 	stw	r2,-48(fp)
81134dc8:	e03ff80d 	sth	zero,-32(fp)
81134dcc:	e0bff80b 	ldhu	r2,-32(fp)
81134dd0:	e0fff884 	addi	r3,fp,-30
81134dd4:	180b883a 	mov	r5,r3
81134dd8:	1009883a 	mov	r4,r2
81134ddc:	1128f680 	call	81128f68 <OSFlagCreate>
81134de0:	1007883a 	mov	r3,r2
81134de4:	e0bff417 	ldw	r2,-48(fp)
81134de8:	10c00015 	stw	r3,0(r2)
81134dec:	e0bff917 	ldw	r2,-28(fp)
81134df0:	10800a04 	addi	r2,r2,40
81134df4:	e0bff515 	stw	r2,-44(fp)
81134df8:	00800044 	movi	r2,1
81134dfc:	e0bff78d 	sth	r2,-34(fp)
81134e00:	e0bff78b 	ldhu	r2,-34(fp)
81134e04:	1009883a 	mov	r4,r2
81134e08:	112cec40 	call	8112cec4 <OSSemCreate>
81134e0c:	1007883a 	mov	r3,r2
81134e10:	e0bff517 	ldw	r2,-44(fp)
81134e14:	10c00015 	stw	r3,0(r2)
81134e18:	e0bff917 	ldw	r2,-28(fp)
81134e1c:	10800b04 	addi	r2,r2,44
81134e20:	e0bff615 	stw	r2,-40(fp)
81134e24:	00800044 	movi	r2,1
81134e28:	e0bff70d 	sth	r2,-36(fp)
81134e2c:	e0bff70b 	ldhu	r2,-36(fp)
81134e30:	1009883a 	mov	r4,r2
81134e34:	112cec40 	call	8112cec4 <OSSemCreate>
81134e38:	1007883a 	mov	r3,r2
81134e3c:	e0bff617 	ldw	r2,-40(fp)
81134e40:	10c00015 	stw	r3,0(r2)
81134e44:	e0bff917 	ldw	r2,-28(fp)
81134e48:	00c00044 	movi	r3,1
81134e4c:	10c00815 	stw	r3,32(r2)
81134e50:	e0bff917 	ldw	r2,-28(fp)
81134e54:	10800017 	ldw	r2,0(r2)
81134e58:	10800104 	addi	r2,r2,4
81134e5c:	1007883a 	mov	r3,r2
81134e60:	e0bff917 	ldw	r2,-28(fp)
81134e64:	10800817 	ldw	r2,32(r2)
81134e68:	18800035 	stwio	r2,0(r3)
81134e6c:	e0bffa17 	ldw	r2,-24(fp)
81134e70:	e0fffb17 	ldw	r3,-20(fp)
81134e74:	d8000015 	stw	zero,0(sp)
81134e78:	e1fff917 	ldw	r7,-28(fp)
81134e7c:	01a044f4 	movhi	r6,33043
81134e80:	3193ba04 	addi	r6,r6,20200
81134e84:	180b883a 	mov	r5,r3
81134e88:	1009883a 	mov	r4,r2
81134e8c:	1138cec0 	call	81138cec <alt_ic_isr_register>
81134e90:	e0bff917 	ldw	r2,-28(fp)
81134e94:	10000915 	stw	zero,36(r2)
81134e98:	e0bff917 	ldw	r2,-28(fp)
81134e9c:	10800204 	addi	r2,r2,8
81134ea0:	d0e06a17 	ldw	r3,-32344(gp)
81134ea4:	e1fff917 	ldw	r7,-28(fp)
81134ea8:	01a044f4 	movhi	r6,33043
81134eac:	31946504 	addi	r6,r6,20884
81134eb0:	180b883a 	mov	r5,r3
81134eb4:	1009883a 	mov	r4,r2
81134eb8:	113876c0 	call	8113876c <alt_alarm_start>
81134ebc:	1000040e 	bge	r2,zero,81134ed0 <altera_avalon_jtag_uart_init+0x138>
81134ec0:	e0fff917 	ldw	r3,-28(fp)
81134ec4:	00a00034 	movhi	r2,32768
81134ec8:	10bfffc4 	addi	r2,r2,-1
81134ecc:	18800115 	stw	r2,4(r3)
81134ed0:	0001883a 	nop
81134ed4:	e037883a 	mov	sp,fp
81134ed8:	dfc00117 	ldw	ra,4(sp)
81134edc:	df000017 	ldw	fp,0(sp)
81134ee0:	dec00204 	addi	sp,sp,8
81134ee4:	f800283a 	ret

81134ee8 <altera_avalon_jtag_uart_irq>:
81134ee8:	defff204 	addi	sp,sp,-56
81134eec:	de00012e 	bgeu	sp,et,81134ef4 <altera_avalon_jtag_uart_irq+0xc>
81134ef0:	003b68fa 	trap	3
81134ef4:	dfc00d15 	stw	ra,52(sp)
81134ef8:	df000c15 	stw	fp,48(sp)
81134efc:	df000c04 	addi	fp,sp,48
81134f00:	e13fff15 	stw	r4,-4(fp)
81134f04:	e0bfff17 	ldw	r2,-4(fp)
81134f08:	e0bff615 	stw	r2,-40(fp)
81134f0c:	e0bff617 	ldw	r2,-40(fp)
81134f10:	10800017 	ldw	r2,0(r2)
81134f14:	e0bff715 	stw	r2,-36(fp)
81134f18:	e0bff717 	ldw	r2,-36(fp)
81134f1c:	10800104 	addi	r2,r2,4
81134f20:	10800037 	ldwio	r2,0(r2)
81134f24:	e0bff815 	stw	r2,-32(fp)
81134f28:	e0bff817 	ldw	r2,-32(fp)
81134f2c:	1080c00c 	andi	r2,r2,768
81134f30:	10009126 	beq	r2,zero,81135178 <altera_avalon_jtag_uart_irq+0x290>
81134f34:	e0bff817 	ldw	r2,-32(fp)
81134f38:	1080400c 	andi	r2,r2,256
81134f3c:	10004726 	beq	r2,zero,8113505c <altera_avalon_jtag_uart_irq+0x174>
81134f40:	00800074 	movhi	r2,1
81134f44:	e0bff415 	stw	r2,-48(fp)
81134f48:	e0bff617 	ldw	r2,-40(fp)
81134f4c:	10800d17 	ldw	r2,52(r2)
81134f50:	10800044 	addi	r2,r2,1
81134f54:	1081ffcc 	andi	r2,r2,2047
81134f58:	e0bff915 	stw	r2,-28(fp)
81134f5c:	e0bff617 	ldw	r2,-40(fp)
81134f60:	10c00e17 	ldw	r3,56(r2)
81134f64:	e0bff917 	ldw	r2,-28(fp)
81134f68:	18802726 	beq	r3,r2,81135008 <altera_avalon_jtag_uart_irq+0x120>
81134f6c:	e0bff717 	ldw	r2,-36(fp)
81134f70:	10800037 	ldwio	r2,0(r2)
81134f74:	e0bff415 	stw	r2,-48(fp)
81134f78:	e0bff417 	ldw	r2,-48(fp)
81134f7c:	10a0000c 	andi	r2,r2,32768
81134f80:	10002326 	beq	r2,zero,81135010 <altera_avalon_jtag_uart_irq+0x128>
81134f84:	e0bff617 	ldw	r2,-40(fp)
81134f88:	10800d17 	ldw	r2,52(r2)
81134f8c:	e0fff417 	ldw	r3,-48(fp)
81134f90:	1809883a 	mov	r4,r3
81134f94:	e0fff617 	ldw	r3,-40(fp)
81134f98:	1885883a 	add	r2,r3,r2
81134f9c:	10801104 	addi	r2,r2,68
81134fa0:	11000005 	stb	r4,0(r2)
81134fa4:	e0bff617 	ldw	r2,-40(fp)
81134fa8:	10800d17 	ldw	r2,52(r2)
81134fac:	10800044 	addi	r2,r2,1
81134fb0:	10c1ffcc 	andi	r3,r2,2047
81134fb4:	e0bff617 	ldw	r2,-40(fp)
81134fb8:	10c00d15 	stw	r3,52(r2)
81134fbc:	e0bff617 	ldw	r2,-40(fp)
81134fc0:	10800c17 	ldw	r2,48(r2)
81134fc4:	e0bffb15 	stw	r2,-20(fp)
81134fc8:	00800044 	movi	r2,1
81134fcc:	e0bffc0d 	sth	r2,-16(fp)
81134fd0:	00800044 	movi	r2,1
81134fd4:	e0bffc85 	stb	r2,-14(fp)
81134fd8:	d0a07303 	ldbu	r2,-32308(gp)
81134fdc:	10803fcc 	andi	r2,r2,255
81134fe0:	103fd926 	beq	r2,zero,81134f48 <__reset+0xfb114f48>
81134fe4:	e0bffc0b 	ldhu	r2,-16(fp)
81134fe8:	e0fffc83 	ldbu	r3,-14(fp)
81134fec:	e13ffdc4 	addi	r4,fp,-9
81134ff0:	200f883a 	mov	r7,r4
81134ff4:	180d883a 	mov	r6,r3
81134ff8:	100b883a 	mov	r5,r2
81134ffc:	e13ffb17 	ldw	r4,-20(fp)
81135000:	1129b740 	call	81129b74 <OSFlagPost>
81135004:	003fd006 	br	81134f48 <__reset+0xfb114f48>
81135008:	0001883a 	nop
8113500c:	00000106 	br	81135014 <altera_avalon_jtag_uart_irq+0x12c>
81135010:	0001883a 	nop
81135014:	e0bff417 	ldw	r2,-48(fp)
81135018:	10bfffec 	andhi	r2,r2,65535
8113501c:	10000f26 	beq	r2,zero,8113505c <altera_avalon_jtag_uart_irq+0x174>
81135020:	e0bff617 	ldw	r2,-40(fp)
81135024:	10c00817 	ldw	r3,32(r2)
81135028:	00bfff84 	movi	r2,-2
8113502c:	1886703a 	and	r3,r3,r2
81135030:	e0bff617 	ldw	r2,-40(fp)
81135034:	10c00815 	stw	r3,32(r2)
81135038:	e0bff717 	ldw	r2,-36(fp)
8113503c:	10800104 	addi	r2,r2,4
81135040:	1007883a 	mov	r3,r2
81135044:	e0bff617 	ldw	r2,-40(fp)
81135048:	10800817 	ldw	r2,32(r2)
8113504c:	18800035 	stwio	r2,0(r3)
81135050:	e0bff717 	ldw	r2,-36(fp)
81135054:	10800104 	addi	r2,r2,4
81135058:	10800037 	ldwio	r2,0(r2)
8113505c:	e0bff817 	ldw	r2,-32(fp)
81135060:	1080800c 	andi	r2,r2,512
81135064:	103fac26 	beq	r2,zero,81134f18 <__reset+0xfb114f18>
81135068:	e0bff817 	ldw	r2,-32(fp)
8113506c:	1004d43a 	srli	r2,r2,16
81135070:	e0bff515 	stw	r2,-44(fp)
81135074:	00002606 	br	81135110 <altera_avalon_jtag_uart_irq+0x228>
81135078:	e0bff717 	ldw	r2,-36(fp)
8113507c:	e0fff617 	ldw	r3,-40(fp)
81135080:	18c01017 	ldw	r3,64(r3)
81135084:	e13ff617 	ldw	r4,-40(fp)
81135088:	20c7883a 	add	r3,r4,r3
8113508c:	18c21104 	addi	r3,r3,2116
81135090:	18c00003 	ldbu	r3,0(r3)
81135094:	18c03fcc 	andi	r3,r3,255
81135098:	18c0201c 	xori	r3,r3,128
8113509c:	18ffe004 	addi	r3,r3,-128
811350a0:	10c00035 	stwio	r3,0(r2)
811350a4:	e0bff617 	ldw	r2,-40(fp)
811350a8:	10801017 	ldw	r2,64(r2)
811350ac:	10800044 	addi	r2,r2,1
811350b0:	10c1ffcc 	andi	r3,r2,2047
811350b4:	e0bff617 	ldw	r2,-40(fp)
811350b8:	10c01015 	stw	r3,64(r2)
811350bc:	e0bff617 	ldw	r2,-40(fp)
811350c0:	10800c17 	ldw	r2,48(r2)
811350c4:	e0bffa15 	stw	r2,-24(fp)
811350c8:	00800084 	movi	r2,2
811350cc:	e0bffd0d 	sth	r2,-12(fp)
811350d0:	00800044 	movi	r2,1
811350d4:	e0bffd85 	stb	r2,-10(fp)
811350d8:	d0a07303 	ldbu	r2,-32308(gp)
811350dc:	10803fcc 	andi	r2,r2,255
811350e0:	10000826 	beq	r2,zero,81135104 <altera_avalon_jtag_uart_irq+0x21c>
811350e4:	e0bffd0b 	ldhu	r2,-12(fp)
811350e8:	e0fffd83 	ldbu	r3,-10(fp)
811350ec:	e13ffe04 	addi	r4,fp,-8
811350f0:	200f883a 	mov	r7,r4
811350f4:	180d883a 	mov	r6,r3
811350f8:	100b883a 	mov	r5,r2
811350fc:	e13ffa17 	ldw	r4,-24(fp)
81135100:	1129b740 	call	81129b74 <OSFlagPost>
81135104:	e0bff517 	ldw	r2,-44(fp)
81135108:	10bfffc4 	addi	r2,r2,-1
8113510c:	e0bff515 	stw	r2,-44(fp)
81135110:	e0bff517 	ldw	r2,-44(fp)
81135114:	10000526 	beq	r2,zero,8113512c <altera_avalon_jtag_uart_irq+0x244>
81135118:	e0bff617 	ldw	r2,-40(fp)
8113511c:	10c01017 	ldw	r3,64(r2)
81135120:	e0bff617 	ldw	r2,-40(fp)
81135124:	10800f17 	ldw	r2,60(r2)
81135128:	18bfd31e 	bne	r3,r2,81135078 <__reset+0xfb115078>
8113512c:	e0bff517 	ldw	r2,-44(fp)
81135130:	103f7926 	beq	r2,zero,81134f18 <__reset+0xfb114f18>
81135134:	e0bff617 	ldw	r2,-40(fp)
81135138:	10c00817 	ldw	r3,32(r2)
8113513c:	00bfff44 	movi	r2,-3
81135140:	1886703a 	and	r3,r3,r2
81135144:	e0bff617 	ldw	r2,-40(fp)
81135148:	10c00815 	stw	r3,32(r2)
8113514c:	e0bff617 	ldw	r2,-40(fp)
81135150:	10800017 	ldw	r2,0(r2)
81135154:	10800104 	addi	r2,r2,4
81135158:	1007883a 	mov	r3,r2
8113515c:	e0bff617 	ldw	r2,-40(fp)
81135160:	10800817 	ldw	r2,32(r2)
81135164:	18800035 	stwio	r2,0(r3)
81135168:	e0bff717 	ldw	r2,-36(fp)
8113516c:	10800104 	addi	r2,r2,4
81135170:	10800037 	ldwio	r2,0(r2)
81135174:	003f6806 	br	81134f18 <__reset+0xfb114f18>
81135178:	0001883a 	nop
8113517c:	0001883a 	nop
81135180:	e037883a 	mov	sp,fp
81135184:	dfc00117 	ldw	ra,4(sp)
81135188:	df000017 	ldw	fp,0(sp)
8113518c:	dec00204 	addi	sp,sp,8
81135190:	f800283a 	ret

81135194 <altera_avalon_jtag_uart_timeout>:
81135194:	defff904 	addi	sp,sp,-28
81135198:	de00012e 	bgeu	sp,et,811351a0 <altera_avalon_jtag_uart_timeout+0xc>
8113519c:	003b68fa 	trap	3
811351a0:	dfc00615 	stw	ra,24(sp)
811351a4:	df000515 	stw	fp,20(sp)
811351a8:	df000504 	addi	fp,sp,20
811351ac:	e13fff15 	stw	r4,-4(fp)
811351b0:	e0bfff17 	ldw	r2,-4(fp)
811351b4:	e0bffb15 	stw	r2,-20(fp)
811351b8:	e0bffb17 	ldw	r2,-20(fp)
811351bc:	10800017 	ldw	r2,0(r2)
811351c0:	10800104 	addi	r2,r2,4
811351c4:	10800037 	ldwio	r2,0(r2)
811351c8:	e0bffc15 	stw	r2,-16(fp)
811351cc:	e0bffc17 	ldw	r2,-16(fp)
811351d0:	1081000c 	andi	r2,r2,1024
811351d4:	10000b26 	beq	r2,zero,81135204 <altera_avalon_jtag_uart_timeout+0x70>
811351d8:	e0bffb17 	ldw	r2,-20(fp)
811351dc:	10800017 	ldw	r2,0(r2)
811351e0:	10800104 	addi	r2,r2,4
811351e4:	1007883a 	mov	r3,r2
811351e8:	e0bffb17 	ldw	r2,-20(fp)
811351ec:	10800817 	ldw	r2,32(r2)
811351f0:	10810014 	ori	r2,r2,1024
811351f4:	18800035 	stwio	r2,0(r3)
811351f8:	e0bffb17 	ldw	r2,-20(fp)
811351fc:	10000915 	stw	zero,36(r2)
81135200:	00002106 	br	81135288 <altera_avalon_jtag_uart_timeout+0xf4>
81135204:	e0bffb17 	ldw	r2,-20(fp)
81135208:	10c00917 	ldw	r3,36(r2)
8113520c:	00a00034 	movhi	r2,32768
81135210:	10bfff04 	addi	r2,r2,-4
81135214:	10c01c36 	bltu	r2,r3,81135288 <altera_avalon_jtag_uart_timeout+0xf4>
81135218:	e0bffb17 	ldw	r2,-20(fp)
8113521c:	10800917 	ldw	r2,36(r2)
81135220:	10c00044 	addi	r3,r2,1
81135224:	e0bffb17 	ldw	r2,-20(fp)
81135228:	10c00915 	stw	r3,36(r2)
8113522c:	e0bffb17 	ldw	r2,-20(fp)
81135230:	10c00917 	ldw	r3,36(r2)
81135234:	e0bffb17 	ldw	r2,-20(fp)
81135238:	10800117 	ldw	r2,4(r2)
8113523c:	18801236 	bltu	r3,r2,81135288 <altera_avalon_jtag_uart_timeout+0xf4>
81135240:	e0bffb17 	ldw	r2,-20(fp)
81135244:	10800c17 	ldw	r2,48(r2)
81135248:	e0bffd15 	stw	r2,-12(fp)
8113524c:	00800104 	movi	r2,4
81135250:	e0bffe0d 	sth	r2,-8(fp)
81135254:	00800044 	movi	r2,1
81135258:	e0bffe85 	stb	r2,-6(fp)
8113525c:	d0a07303 	ldbu	r2,-32308(gp)
81135260:	10803fcc 	andi	r2,r2,255
81135264:	10000826 	beq	r2,zero,81135288 <altera_avalon_jtag_uart_timeout+0xf4>
81135268:	e0bffe0b 	ldhu	r2,-8(fp)
8113526c:	e0fffe83 	ldbu	r3,-6(fp)
81135270:	e13ffec4 	addi	r4,fp,-5
81135274:	200f883a 	mov	r7,r4
81135278:	180d883a 	mov	r6,r3
8113527c:	100b883a 	mov	r5,r2
81135280:	e13ffd17 	ldw	r4,-12(fp)
81135284:	1129b740 	call	81129b74 <OSFlagPost>
81135288:	d0a06a17 	ldw	r2,-32344(gp)
8113528c:	e037883a 	mov	sp,fp
81135290:	dfc00117 	ldw	ra,4(sp)
81135294:	df000017 	ldw	fp,0(sp)
81135298:	dec00204 	addi	sp,sp,8
8113529c:	f800283a 	ret

811352a0 <altera_avalon_jtag_uart_close>:
811352a0:	defffd04 	addi	sp,sp,-12
811352a4:	de00012e 	bgeu	sp,et,811352ac <altera_avalon_jtag_uart_close+0xc>
811352a8:	003b68fa 	trap	3
811352ac:	df000215 	stw	fp,8(sp)
811352b0:	df000204 	addi	fp,sp,8
811352b4:	e13ffe15 	stw	r4,-8(fp)
811352b8:	e17fff15 	stw	r5,-4(fp)
811352bc:	00000506 	br	811352d4 <altera_avalon_jtag_uart_close+0x34>
811352c0:	e0bfff17 	ldw	r2,-4(fp)
811352c4:	1090000c 	andi	r2,r2,16384
811352c8:	10000226 	beq	r2,zero,811352d4 <altera_avalon_jtag_uart_close+0x34>
811352cc:	00bffd44 	movi	r2,-11
811352d0:	00000b06 	br	81135300 <altera_avalon_jtag_uart_close+0x60>
811352d4:	e0bffe17 	ldw	r2,-8(fp)
811352d8:	10c01017 	ldw	r3,64(r2)
811352dc:	e0bffe17 	ldw	r2,-8(fp)
811352e0:	10800f17 	ldw	r2,60(r2)
811352e4:	18800526 	beq	r3,r2,811352fc <altera_avalon_jtag_uart_close+0x5c>
811352e8:	e0bffe17 	ldw	r2,-8(fp)
811352ec:	10c00917 	ldw	r3,36(r2)
811352f0:	e0bffe17 	ldw	r2,-8(fp)
811352f4:	10800117 	ldw	r2,4(r2)
811352f8:	18bff136 	bltu	r3,r2,811352c0 <__reset+0xfb1152c0>
811352fc:	0005883a 	mov	r2,zero
81135300:	e037883a 	mov	sp,fp
81135304:	df000017 	ldw	fp,0(sp)
81135308:	dec00104 	addi	sp,sp,4
8113530c:	f800283a 	ret

81135310 <altera_avalon_jtag_uart_ioctl>:
81135310:	defffa04 	addi	sp,sp,-24
81135314:	de00012e 	bgeu	sp,et,8113531c <altera_avalon_jtag_uart_ioctl+0xc>
81135318:	003b68fa 	trap	3
8113531c:	df000515 	stw	fp,20(sp)
81135320:	df000504 	addi	fp,sp,20
81135324:	e13ffd15 	stw	r4,-12(fp)
81135328:	e17ffe15 	stw	r5,-8(fp)
8113532c:	e1bfff15 	stw	r6,-4(fp)
81135330:	00bff9c4 	movi	r2,-25
81135334:	e0bffb15 	stw	r2,-20(fp)
81135338:	e0bffe17 	ldw	r2,-8(fp)
8113533c:	10da8060 	cmpeqi	r3,r2,27137
81135340:	1800031e 	bne	r3,zero,81135350 <altera_avalon_jtag_uart_ioctl+0x40>
81135344:	109a80a0 	cmpeqi	r2,r2,27138
81135348:	1000181e 	bne	r2,zero,811353ac <altera_avalon_jtag_uart_ioctl+0x9c>
8113534c:	00002906 	br	811353f4 <altera_avalon_jtag_uart_ioctl+0xe4>
81135350:	e0bffd17 	ldw	r2,-12(fp)
81135354:	10c00117 	ldw	r3,4(r2)
81135358:	00a00034 	movhi	r2,32768
8113535c:	10bfffc4 	addi	r2,r2,-1
81135360:	18802126 	beq	r3,r2,811353e8 <altera_avalon_jtag_uart_ioctl+0xd8>
81135364:	e0bfff17 	ldw	r2,-4(fp)
81135368:	10800017 	ldw	r2,0(r2)
8113536c:	e0bffc15 	stw	r2,-16(fp)
81135370:	e0bffc17 	ldw	r2,-16(fp)
81135374:	10800090 	cmplti	r2,r2,2
81135378:	1000061e 	bne	r2,zero,81135394 <altera_avalon_jtag_uart_ioctl+0x84>
8113537c:	e0fffc17 	ldw	r3,-16(fp)
81135380:	00a00034 	movhi	r2,32768
81135384:	10bfffc4 	addi	r2,r2,-1
81135388:	18800226 	beq	r3,r2,81135394 <altera_avalon_jtag_uart_ioctl+0x84>
8113538c:	e0bffc17 	ldw	r2,-16(fp)
81135390:	00000206 	br	8113539c <altera_avalon_jtag_uart_ioctl+0x8c>
81135394:	00a00034 	movhi	r2,32768
81135398:	10bfff84 	addi	r2,r2,-2
8113539c:	e0fffd17 	ldw	r3,-12(fp)
811353a0:	18800115 	stw	r2,4(r3)
811353a4:	e03ffb15 	stw	zero,-20(fp)
811353a8:	00000f06 	br	811353e8 <altera_avalon_jtag_uart_ioctl+0xd8>
811353ac:	e0bffd17 	ldw	r2,-12(fp)
811353b0:	10c00117 	ldw	r3,4(r2)
811353b4:	00a00034 	movhi	r2,32768
811353b8:	10bfffc4 	addi	r2,r2,-1
811353bc:	18800c26 	beq	r3,r2,811353f0 <altera_avalon_jtag_uart_ioctl+0xe0>
811353c0:	e0bffd17 	ldw	r2,-12(fp)
811353c4:	10c00917 	ldw	r3,36(r2)
811353c8:	e0bffd17 	ldw	r2,-12(fp)
811353cc:	10800117 	ldw	r2,4(r2)
811353d0:	1885803a 	cmpltu	r2,r3,r2
811353d4:	10c03fcc 	andi	r3,r2,255
811353d8:	e0bfff17 	ldw	r2,-4(fp)
811353dc:	10c00015 	stw	r3,0(r2)
811353e0:	e03ffb15 	stw	zero,-20(fp)
811353e4:	00000206 	br	811353f0 <altera_avalon_jtag_uart_ioctl+0xe0>
811353e8:	0001883a 	nop
811353ec:	00000106 	br	811353f4 <altera_avalon_jtag_uart_ioctl+0xe4>
811353f0:	0001883a 	nop
811353f4:	e0bffb17 	ldw	r2,-20(fp)
811353f8:	e037883a 	mov	sp,fp
811353fc:	df000017 	ldw	fp,0(sp)
81135400:	dec00104 	addi	sp,sp,4
81135404:	f800283a 	ret

81135408 <altera_avalon_jtag_uart_read>:
81135408:	deffed04 	addi	sp,sp,-76
8113540c:	de00012e 	bgeu	sp,et,81135414 <altera_avalon_jtag_uart_read+0xc>
81135410:	003b68fa 	trap	3
81135414:	dfc01215 	stw	ra,72(sp)
81135418:	df001115 	stw	fp,68(sp)
8113541c:	df001104 	addi	fp,sp,68
81135420:	e13ffc15 	stw	r4,-16(fp)
81135424:	e17ffd15 	stw	r5,-12(fp)
81135428:	e1bffe15 	stw	r6,-8(fp)
8113542c:	e1ffff15 	stw	r7,-4(fp)
81135430:	e0bffd17 	ldw	r2,-12(fp)
81135434:	e0bff015 	stw	r2,-64(fp)
81135438:	e0bffc17 	ldw	r2,-16(fp)
8113543c:	10800a17 	ldw	r2,40(r2)
81135440:	e0bff815 	stw	r2,-32(fp)
81135444:	e03ff90d 	sth	zero,-28(fp)
81135448:	e0bff90b 	ldhu	r2,-28(fp)
8113544c:	e0fffb04 	addi	r3,fp,-20
81135450:	180d883a 	mov	r6,r3
81135454:	100b883a 	mov	r5,r2
81135458:	e13ff817 	ldw	r4,-32(fp)
8113545c:	112d1ec0 	call	8112d1ec <OSSemPend>
81135460:	00006106 	br	811355e8 <altera_avalon_jtag_uart_read+0x1e0>
81135464:	e0bffc17 	ldw	r2,-16(fp)
81135468:	10800d17 	ldw	r2,52(r2)
8113546c:	e0bff315 	stw	r2,-52(fp)
81135470:	e0bffc17 	ldw	r2,-16(fp)
81135474:	10800e17 	ldw	r2,56(r2)
81135478:	e0bff415 	stw	r2,-48(fp)
8113547c:	e0fff317 	ldw	r3,-52(fp)
81135480:	e0bff417 	ldw	r2,-48(fp)
81135484:	18800536 	bltu	r3,r2,8113549c <altera_avalon_jtag_uart_read+0x94>
81135488:	e0fff317 	ldw	r3,-52(fp)
8113548c:	e0bff417 	ldw	r2,-48(fp)
81135490:	1885c83a 	sub	r2,r3,r2
81135494:	e0bff115 	stw	r2,-60(fp)
81135498:	00000406 	br	811354ac <altera_avalon_jtag_uart_read+0xa4>
8113549c:	00c20004 	movi	r3,2048
811354a0:	e0bff417 	ldw	r2,-48(fp)
811354a4:	1885c83a 	sub	r2,r3,r2
811354a8:	e0bff115 	stw	r2,-60(fp)
811354ac:	e0bff117 	ldw	r2,-60(fp)
811354b0:	10001e26 	beq	r2,zero,8113552c <altera_avalon_jtag_uart_read+0x124>
811354b4:	e0fffe17 	ldw	r3,-8(fp)
811354b8:	e0bff117 	ldw	r2,-60(fp)
811354bc:	1880022e 	bgeu	r3,r2,811354c8 <altera_avalon_jtag_uart_read+0xc0>
811354c0:	e0bffe17 	ldw	r2,-8(fp)
811354c4:	e0bff115 	stw	r2,-60(fp)
811354c8:	e0bffc17 	ldw	r2,-16(fp)
811354cc:	10c01104 	addi	r3,r2,68
811354d0:	e0bff417 	ldw	r2,-48(fp)
811354d4:	1885883a 	add	r2,r3,r2
811354d8:	e1bff117 	ldw	r6,-60(fp)
811354dc:	100b883a 	mov	r5,r2
811354e0:	e13ff017 	ldw	r4,-64(fp)
811354e4:	1110ea80 	call	81110ea8 <memcpy>
811354e8:	e0fff017 	ldw	r3,-64(fp)
811354ec:	e0bff117 	ldw	r2,-60(fp)
811354f0:	1885883a 	add	r2,r3,r2
811354f4:	e0bff015 	stw	r2,-64(fp)
811354f8:	e0fffe17 	ldw	r3,-8(fp)
811354fc:	e0bff117 	ldw	r2,-60(fp)
81135500:	1885c83a 	sub	r2,r3,r2
81135504:	e0bffe15 	stw	r2,-8(fp)
81135508:	e0fff417 	ldw	r3,-48(fp)
8113550c:	e0bff117 	ldw	r2,-60(fp)
81135510:	1885883a 	add	r2,r3,r2
81135514:	10c1ffcc 	andi	r3,r2,2047
81135518:	e0bffc17 	ldw	r2,-16(fp)
8113551c:	10c00e15 	stw	r3,56(r2)
81135520:	e0bffe17 	ldw	r2,-8(fp)
81135524:	00bfcf16 	blt	zero,r2,81135464 <__reset+0xfb115464>
81135528:	00000106 	br	81135530 <altera_avalon_jtag_uart_read+0x128>
8113552c:	0001883a 	nop
81135530:	e0fff017 	ldw	r3,-64(fp)
81135534:	e0bffd17 	ldw	r2,-12(fp)
81135538:	18802e1e 	bne	r3,r2,811355f4 <altera_avalon_jtag_uart_read+0x1ec>
8113553c:	e0bfff17 	ldw	r2,-4(fp)
81135540:	1090000c 	andi	r2,r2,16384
81135544:	10002d1e 	bne	r2,zero,811355fc <altera_avalon_jtag_uart_read+0x1f4>
81135548:	d0a07303 	ldbu	r2,-32308(gp)
8113554c:	10803fcc 	andi	r2,r2,255
81135550:	10800058 	cmpnei	r2,r2,1
81135554:	1000161e 	bne	r2,zero,811355b0 <altera_avalon_jtag_uart_read+0x1a8>
81135558:	e0bffc17 	ldw	r2,-16(fp)
8113555c:	10800c17 	ldw	r2,48(r2)
81135560:	e0bff215 	stw	r2,-56(fp)
81135564:	00800144 	movi	r2,5
81135568:	e0bff98d 	sth	r2,-26(fp)
8113556c:	00bfe0c4 	movi	r2,-125
81135570:	e0bffa05 	stb	r2,-24(fp)
81135574:	e03ffa8d 	sth	zero,-22(fp)
81135578:	d0a07303 	ldbu	r2,-32308(gp)
8113557c:	10803fcc 	andi	r2,r2,255
81135580:	10001526 	beq	r2,zero,811355d8 <altera_avalon_jtag_uart_read+0x1d0>
81135584:	e0fff98b 	ldhu	r3,-26(fp)
81135588:	e13ffa03 	ldbu	r4,-24(fp)
8113558c:	e17ffa8b 	ldhu	r5,-22(fp)
81135590:	e0bffb44 	addi	r2,fp,-19
81135594:	d8800015 	stw	r2,0(sp)
81135598:	280f883a 	mov	r7,r5
8113559c:	200d883a 	mov	r6,r4
811355a0:	180b883a 	mov	r5,r3
811355a4:	e13ff217 	ldw	r4,-56(fp)
811355a8:	112954c0 	call	8112954c <OSFlagPend>
811355ac:	00000a06 	br	811355d8 <altera_avalon_jtag_uart_read+0x1d0>
811355b0:	0001883a 	nop
811355b4:	e0bffc17 	ldw	r2,-16(fp)
811355b8:	10c00d17 	ldw	r3,52(r2)
811355bc:	e0bff317 	ldw	r2,-52(fp)
811355c0:	1880051e 	bne	r3,r2,811355d8 <altera_avalon_jtag_uart_read+0x1d0>
811355c4:	e0bffc17 	ldw	r2,-16(fp)
811355c8:	10c00917 	ldw	r3,36(r2)
811355cc:	e0bffc17 	ldw	r2,-16(fp)
811355d0:	10800117 	ldw	r2,4(r2)
811355d4:	18bff736 	bltu	r3,r2,811355b4 <__reset+0xfb1155b4>
811355d8:	e0bffc17 	ldw	r2,-16(fp)
811355dc:	10c00d17 	ldw	r3,52(r2)
811355e0:	e0bff317 	ldw	r2,-52(fp)
811355e4:	18800726 	beq	r3,r2,81135604 <altera_avalon_jtag_uart_read+0x1fc>
811355e8:	e0bffe17 	ldw	r2,-8(fp)
811355ec:	00bf9d16 	blt	zero,r2,81135464 <__reset+0xfb115464>
811355f0:	00000506 	br	81135608 <altera_avalon_jtag_uart_read+0x200>
811355f4:	0001883a 	nop
811355f8:	00000306 	br	81135608 <altera_avalon_jtag_uart_read+0x200>
811355fc:	0001883a 	nop
81135600:	00000106 	br	81135608 <altera_avalon_jtag_uart_read+0x200>
81135604:	0001883a 	nop
81135608:	e0bffc17 	ldw	r2,-16(fp)
8113560c:	10800a17 	ldw	r2,40(r2)
81135610:	1009883a 	mov	r4,r2
81135614:	112d5740 	call	8112d574 <OSSemPost>
81135618:	e0fff017 	ldw	r3,-64(fp)
8113561c:	e0bffd17 	ldw	r2,-12(fp)
81135620:	18801826 	beq	r3,r2,81135684 <altera_avalon_jtag_uart_read+0x27c>
81135624:	0005303a 	rdctl	r2,status
81135628:	e0bff715 	stw	r2,-36(fp)
8113562c:	e0fff717 	ldw	r3,-36(fp)
81135630:	00bfff84 	movi	r2,-2
81135634:	1884703a 	and	r2,r3,r2
81135638:	1001703a 	wrctl	status,r2
8113563c:	e0bff717 	ldw	r2,-36(fp)
81135640:	e0bff615 	stw	r2,-40(fp)
81135644:	e0bffc17 	ldw	r2,-16(fp)
81135648:	10800817 	ldw	r2,32(r2)
8113564c:	10c00054 	ori	r3,r2,1
81135650:	e0bffc17 	ldw	r2,-16(fp)
81135654:	10c00815 	stw	r3,32(r2)
81135658:	e0bffc17 	ldw	r2,-16(fp)
8113565c:	10800017 	ldw	r2,0(r2)
81135660:	10800104 	addi	r2,r2,4
81135664:	1007883a 	mov	r3,r2
81135668:	e0bffc17 	ldw	r2,-16(fp)
8113566c:	10800817 	ldw	r2,32(r2)
81135670:	18800035 	stwio	r2,0(r3)
81135674:	e0bff617 	ldw	r2,-40(fp)
81135678:	e0bff515 	stw	r2,-44(fp)
8113567c:	e0bff517 	ldw	r2,-44(fp)
81135680:	1001703a 	wrctl	status,r2
81135684:	e0fff017 	ldw	r3,-64(fp)
81135688:	e0bffd17 	ldw	r2,-12(fp)
8113568c:	18800426 	beq	r3,r2,811356a0 <altera_avalon_jtag_uart_read+0x298>
81135690:	e0fff017 	ldw	r3,-64(fp)
81135694:	e0bffd17 	ldw	r2,-12(fp)
81135698:	1885c83a 	sub	r2,r3,r2
8113569c:	00000606 	br	811356b8 <altera_avalon_jtag_uart_read+0x2b0>
811356a0:	e0bfff17 	ldw	r2,-4(fp)
811356a4:	1090000c 	andi	r2,r2,16384
811356a8:	10000226 	beq	r2,zero,811356b4 <altera_avalon_jtag_uart_read+0x2ac>
811356ac:	00bffd44 	movi	r2,-11
811356b0:	00000106 	br	811356b8 <altera_avalon_jtag_uart_read+0x2b0>
811356b4:	00bffec4 	movi	r2,-5
811356b8:	e037883a 	mov	sp,fp
811356bc:	dfc00117 	ldw	ra,4(sp)
811356c0:	df000017 	ldw	fp,0(sp)
811356c4:	dec00204 	addi	sp,sp,8
811356c8:	f800283a 	ret

811356cc <altera_avalon_jtag_uart_write>:
811356cc:	deffed04 	addi	sp,sp,-76
811356d0:	de00012e 	bgeu	sp,et,811356d8 <altera_avalon_jtag_uart_write+0xc>
811356d4:	003b68fa 	trap	3
811356d8:	dfc01215 	stw	ra,72(sp)
811356dc:	df001115 	stw	fp,68(sp)
811356e0:	df001104 	addi	fp,sp,68
811356e4:	e13ffc15 	stw	r4,-16(fp)
811356e8:	e17ffd15 	stw	r5,-12(fp)
811356ec:	e1bffe15 	stw	r6,-8(fp)
811356f0:	e1ffff15 	stw	r7,-4(fp)
811356f4:	e03ff015 	stw	zero,-64(fp)
811356f8:	e0bffd17 	ldw	r2,-12(fp)
811356fc:	e0bff215 	stw	r2,-56(fp)
81135700:	e0bffc17 	ldw	r2,-16(fp)
81135704:	10800b17 	ldw	r2,44(r2)
81135708:	e0bff815 	stw	r2,-32(fp)
8113570c:	e03ff90d 	sth	zero,-28(fp)
81135710:	e0bff90b 	ldhu	r2,-28(fp)
81135714:	e0fffb44 	addi	r3,fp,-19
81135718:	180d883a 	mov	r6,r3
8113571c:	100b883a 	mov	r5,r2
81135720:	e13ff817 	ldw	r4,-32(fp)
81135724:	112d1ec0 	call	8112d1ec <OSSemPend>
81135728:	00003706 	br	81135808 <altera_avalon_jtag_uart_write+0x13c>
8113572c:	e0bffc17 	ldw	r2,-16(fp)
81135730:	10800f17 	ldw	r2,60(r2)
81135734:	e0bff415 	stw	r2,-48(fp)
81135738:	e0bffc17 	ldw	r2,-16(fp)
8113573c:	10801017 	ldw	r2,64(r2)
81135740:	e0bff015 	stw	r2,-64(fp)
81135744:	e0fff417 	ldw	r3,-48(fp)
81135748:	e0bff017 	ldw	r2,-64(fp)
8113574c:	1880062e 	bgeu	r3,r2,81135768 <altera_avalon_jtag_uart_write+0x9c>
81135750:	e0fff017 	ldw	r3,-64(fp)
81135754:	e0bff417 	ldw	r2,-48(fp)
81135758:	1885c83a 	sub	r2,r3,r2
8113575c:	10bfffc4 	addi	r2,r2,-1
81135760:	e0bff115 	stw	r2,-60(fp)
81135764:	00000b06 	br	81135794 <altera_avalon_jtag_uart_write+0xc8>
81135768:	e0bff017 	ldw	r2,-64(fp)
8113576c:	10000526 	beq	r2,zero,81135784 <altera_avalon_jtag_uart_write+0xb8>
81135770:	00c20004 	movi	r3,2048
81135774:	e0bff417 	ldw	r2,-48(fp)
81135778:	1885c83a 	sub	r2,r3,r2
8113577c:	e0bff115 	stw	r2,-60(fp)
81135780:	00000406 	br	81135794 <altera_avalon_jtag_uart_write+0xc8>
81135784:	00c1ffc4 	movi	r3,2047
81135788:	e0bff417 	ldw	r2,-48(fp)
8113578c:	1885c83a 	sub	r2,r3,r2
81135790:	e0bff115 	stw	r2,-60(fp)
81135794:	e0bff117 	ldw	r2,-60(fp)
81135798:	10001e26 	beq	r2,zero,81135814 <altera_avalon_jtag_uart_write+0x148>
8113579c:	e0fffe17 	ldw	r3,-8(fp)
811357a0:	e0bff117 	ldw	r2,-60(fp)
811357a4:	1880022e 	bgeu	r3,r2,811357b0 <altera_avalon_jtag_uart_write+0xe4>
811357a8:	e0bffe17 	ldw	r2,-8(fp)
811357ac:	e0bff115 	stw	r2,-60(fp)
811357b0:	e0bffc17 	ldw	r2,-16(fp)
811357b4:	10c21104 	addi	r3,r2,2116
811357b8:	e0bff417 	ldw	r2,-48(fp)
811357bc:	1885883a 	add	r2,r3,r2
811357c0:	e1bff117 	ldw	r6,-60(fp)
811357c4:	e17ffd17 	ldw	r5,-12(fp)
811357c8:	1009883a 	mov	r4,r2
811357cc:	1110ea80 	call	81110ea8 <memcpy>
811357d0:	e0fffd17 	ldw	r3,-12(fp)
811357d4:	e0bff117 	ldw	r2,-60(fp)
811357d8:	1885883a 	add	r2,r3,r2
811357dc:	e0bffd15 	stw	r2,-12(fp)
811357e0:	e0fffe17 	ldw	r3,-8(fp)
811357e4:	e0bff117 	ldw	r2,-60(fp)
811357e8:	1885c83a 	sub	r2,r3,r2
811357ec:	e0bffe15 	stw	r2,-8(fp)
811357f0:	e0fff417 	ldw	r3,-48(fp)
811357f4:	e0bff117 	ldw	r2,-60(fp)
811357f8:	1885883a 	add	r2,r3,r2
811357fc:	10c1ffcc 	andi	r3,r2,2047
81135800:	e0bffc17 	ldw	r2,-16(fp)
81135804:	10c00f15 	stw	r3,60(r2)
81135808:	e0bffe17 	ldw	r2,-8(fp)
8113580c:	00bfc716 	blt	zero,r2,8113572c <__reset+0xfb11572c>
81135810:	00000106 	br	81135818 <altera_avalon_jtag_uart_write+0x14c>
81135814:	0001883a 	nop
81135818:	0005303a 	rdctl	r2,status
8113581c:	e0bff715 	stw	r2,-36(fp)
81135820:	e0fff717 	ldw	r3,-36(fp)
81135824:	00bfff84 	movi	r2,-2
81135828:	1884703a 	and	r2,r3,r2
8113582c:	1001703a 	wrctl	status,r2
81135830:	e0bff717 	ldw	r2,-36(fp)
81135834:	e0bff615 	stw	r2,-40(fp)
81135838:	e0bffc17 	ldw	r2,-16(fp)
8113583c:	10800817 	ldw	r2,32(r2)
81135840:	10c00094 	ori	r3,r2,2
81135844:	e0bffc17 	ldw	r2,-16(fp)
81135848:	10c00815 	stw	r3,32(r2)
8113584c:	e0bffc17 	ldw	r2,-16(fp)
81135850:	10800017 	ldw	r2,0(r2)
81135854:	10800104 	addi	r2,r2,4
81135858:	1007883a 	mov	r3,r2
8113585c:	e0bffc17 	ldw	r2,-16(fp)
81135860:	10800817 	ldw	r2,32(r2)
81135864:	18800035 	stwio	r2,0(r3)
81135868:	e0bff617 	ldw	r2,-40(fp)
8113586c:	e0bff315 	stw	r2,-52(fp)
81135870:	e0bff317 	ldw	r2,-52(fp)
81135874:	1001703a 	wrctl	status,r2
81135878:	e0bffe17 	ldw	r2,-8(fp)
8113587c:	00802a0e 	bge	zero,r2,81135928 <altera_avalon_jtag_uart_write+0x25c>
81135880:	e0bfff17 	ldw	r2,-4(fp)
81135884:	1090000c 	andi	r2,r2,16384
81135888:	10002a1e 	bne	r2,zero,81135934 <altera_avalon_jtag_uart_write+0x268>
8113588c:	d0a07303 	ldbu	r2,-32308(gp)
81135890:	10803fcc 	andi	r2,r2,255
81135894:	10800058 	cmpnei	r2,r2,1
81135898:	1000161e 	bne	r2,zero,811358f4 <altera_avalon_jtag_uart_write+0x228>
8113589c:	e0bffc17 	ldw	r2,-16(fp)
811358a0:	10800c17 	ldw	r2,48(r2)
811358a4:	e0bff515 	stw	r2,-44(fp)
811358a8:	00800184 	movi	r2,6
811358ac:	e0bff98d 	sth	r2,-26(fp)
811358b0:	00bfe0c4 	movi	r2,-125
811358b4:	e0bffa05 	stb	r2,-24(fp)
811358b8:	e03ffa8d 	sth	zero,-22(fp)
811358bc:	d0a07303 	ldbu	r2,-32308(gp)
811358c0:	10803fcc 	andi	r2,r2,255
811358c4:	10001526 	beq	r2,zero,8113591c <altera_avalon_jtag_uart_write+0x250>
811358c8:	e0fff98b 	ldhu	r3,-26(fp)
811358cc:	e13ffa03 	ldbu	r4,-24(fp)
811358d0:	e17ffa8b 	ldhu	r5,-22(fp)
811358d4:	e0bffb04 	addi	r2,fp,-20
811358d8:	d8800015 	stw	r2,0(sp)
811358dc:	280f883a 	mov	r7,r5
811358e0:	200d883a 	mov	r6,r4
811358e4:	180b883a 	mov	r5,r3
811358e8:	e13ff517 	ldw	r4,-44(fp)
811358ec:	112954c0 	call	8112954c <OSFlagPend>
811358f0:	00000a06 	br	8113591c <altera_avalon_jtag_uart_write+0x250>
811358f4:	0001883a 	nop
811358f8:	e0bffc17 	ldw	r2,-16(fp)
811358fc:	10c01017 	ldw	r3,64(r2)
81135900:	e0bff017 	ldw	r2,-64(fp)
81135904:	1880051e 	bne	r3,r2,8113591c <altera_avalon_jtag_uart_write+0x250>
81135908:	e0bffc17 	ldw	r2,-16(fp)
8113590c:	10c00917 	ldw	r3,36(r2)
81135910:	e0bffc17 	ldw	r2,-16(fp)
81135914:	10800117 	ldw	r2,4(r2)
81135918:	18bff736 	bltu	r3,r2,811358f8 <__reset+0xfb1158f8>
8113591c:	e0bffc17 	ldw	r2,-16(fp)
81135920:	10800917 	ldw	r2,36(r2)
81135924:	1000051e 	bne	r2,zero,8113593c <altera_avalon_jtag_uart_write+0x270>
81135928:	e0bffe17 	ldw	r2,-8(fp)
8113592c:	00bfb616 	blt	zero,r2,81135808 <__reset+0xfb115808>
81135930:	00000306 	br	81135940 <altera_avalon_jtag_uart_write+0x274>
81135934:	0001883a 	nop
81135938:	00000106 	br	81135940 <altera_avalon_jtag_uart_write+0x274>
8113593c:	0001883a 	nop
81135940:	e0bffc17 	ldw	r2,-16(fp)
81135944:	10800b17 	ldw	r2,44(r2)
81135948:	1009883a 	mov	r4,r2
8113594c:	112d5740 	call	8112d574 <OSSemPost>
81135950:	e0fffd17 	ldw	r3,-12(fp)
81135954:	e0bff217 	ldw	r2,-56(fp)
81135958:	18800426 	beq	r3,r2,8113596c <altera_avalon_jtag_uart_write+0x2a0>
8113595c:	e0fffd17 	ldw	r3,-12(fp)
81135960:	e0bff217 	ldw	r2,-56(fp)
81135964:	1885c83a 	sub	r2,r3,r2
81135968:	00000606 	br	81135984 <altera_avalon_jtag_uart_write+0x2b8>
8113596c:	e0bfff17 	ldw	r2,-4(fp)
81135970:	1090000c 	andi	r2,r2,16384
81135974:	10000226 	beq	r2,zero,81135980 <altera_avalon_jtag_uart_write+0x2b4>
81135978:	00bffd44 	movi	r2,-11
8113597c:	00000106 	br	81135984 <altera_avalon_jtag_uart_write+0x2b8>
81135980:	00bffec4 	movi	r2,-5
81135984:	e037883a 	mov	sp,fp
81135988:	dfc00117 	ldw	ra,4(sp)
8113598c:	df000017 	ldw	fp,0(sp)
81135990:	dec00204 	addi	sp,sp,8
81135994:	f800283a 	ret

81135998 <alt_avalon_timer_sc_irq>:
81135998:	defffa04 	addi	sp,sp,-24
8113599c:	de00012e 	bgeu	sp,et,811359a4 <alt_avalon_timer_sc_irq+0xc>
811359a0:	003b68fa 	trap	3
811359a4:	dfc00515 	stw	ra,20(sp)
811359a8:	df000415 	stw	fp,16(sp)
811359ac:	df000404 	addi	fp,sp,16
811359b0:	e13fff15 	stw	r4,-4(fp)
811359b4:	0007883a 	mov	r3,zero
811359b8:	e0bfff17 	ldw	r2,-4(fp)
811359bc:	10c00035 	stwio	r3,0(r2)
811359c0:	e0bfff17 	ldw	r2,-4(fp)
811359c4:	10800104 	addi	r2,r2,4
811359c8:	10800037 	ldwio	r2,0(r2)
811359cc:	0005303a 	rdctl	r2,status
811359d0:	e0bffd15 	stw	r2,-12(fp)
811359d4:	e0fffd17 	ldw	r3,-12(fp)
811359d8:	00bfff84 	movi	r2,-2
811359dc:	1884703a 	and	r2,r3,r2
811359e0:	1001703a 	wrctl	status,r2
811359e4:	e0bffd17 	ldw	r2,-12(fp)
811359e8:	e0bffc15 	stw	r2,-16(fp)
811359ec:	11262600 	call	81126260 <alt_tick>
811359f0:	e0bffc17 	ldw	r2,-16(fp)
811359f4:	e0bffe15 	stw	r2,-8(fp)
811359f8:	e0bffe17 	ldw	r2,-8(fp)
811359fc:	1001703a 	wrctl	status,r2
81135a00:	0001883a 	nop
81135a04:	e037883a 	mov	sp,fp
81135a08:	dfc00117 	ldw	ra,4(sp)
81135a0c:	df000017 	ldw	fp,0(sp)
81135a10:	dec00204 	addi	sp,sp,8
81135a14:	f800283a 	ret

81135a18 <alt_avalon_timer_sc_init>:
81135a18:	defff804 	addi	sp,sp,-32
81135a1c:	de00012e 	bgeu	sp,et,81135a24 <alt_avalon_timer_sc_init+0xc>
81135a20:	003b68fa 	trap	3
81135a24:	dfc00715 	stw	ra,28(sp)
81135a28:	df000615 	stw	fp,24(sp)
81135a2c:	df000604 	addi	fp,sp,24
81135a30:	e13ffc15 	stw	r4,-16(fp)
81135a34:	e17ffd15 	stw	r5,-12(fp)
81135a38:	e1bffe15 	stw	r6,-8(fp)
81135a3c:	e1ffff15 	stw	r7,-4(fp)
81135a40:	e0bfff17 	ldw	r2,-4(fp)
81135a44:	e0bffb15 	stw	r2,-20(fp)
81135a48:	d0a06a17 	ldw	r2,-32344(gp)
81135a4c:	1000021e 	bne	r2,zero,81135a58 <alt_avalon_timer_sc_init+0x40>
81135a50:	e0bffb17 	ldw	r2,-20(fp)
81135a54:	d0a06a15 	stw	r2,-32344(gp)
81135a58:	e0bffc17 	ldw	r2,-16(fp)
81135a5c:	10800104 	addi	r2,r2,4
81135a60:	00c001c4 	movi	r3,7
81135a64:	10c00035 	stwio	r3,0(r2)
81135a68:	d8000015 	stw	zero,0(sp)
81135a6c:	e1fffc17 	ldw	r7,-16(fp)
81135a70:	01a044f4 	movhi	r6,33043
81135a74:	31966604 	addi	r6,r6,22936
81135a78:	e17ffe17 	ldw	r5,-8(fp)
81135a7c:	e13ffd17 	ldw	r4,-12(fp)
81135a80:	1138cec0 	call	81138cec <alt_ic_isr_register>
81135a84:	0001883a 	nop
81135a88:	e037883a 	mov	sp,fp
81135a8c:	dfc00117 	ldw	ra,4(sp)
81135a90:	df000017 	ldw	fp,0(sp)
81135a94:	dec00204 	addi	sp,sp,8
81135a98:	f800283a 	ret

81135a9c <altera_avalon_uart_read_fd>:
81135a9c:	defffa04 	addi	sp,sp,-24
81135aa0:	de00012e 	bgeu	sp,et,81135aa8 <altera_avalon_uart_read_fd+0xc>
81135aa4:	003b68fa 	trap	3
81135aa8:	dfc00515 	stw	ra,20(sp)
81135aac:	df000415 	stw	fp,16(sp)
81135ab0:	df000404 	addi	fp,sp,16
81135ab4:	e13ffd15 	stw	r4,-12(fp)
81135ab8:	e17ffe15 	stw	r5,-8(fp)
81135abc:	e1bfff15 	stw	r6,-4(fp)
81135ac0:	e0bffd17 	ldw	r2,-12(fp)
81135ac4:	10800017 	ldw	r2,0(r2)
81135ac8:	e0bffc15 	stw	r2,-16(fp)
81135acc:	e0bffc17 	ldw	r2,-16(fp)
81135ad0:	10c00a04 	addi	r3,r2,40
81135ad4:	e0bffd17 	ldw	r2,-12(fp)
81135ad8:	10800217 	ldw	r2,8(r2)
81135adc:	100f883a 	mov	r7,r2
81135ae0:	e1bfff17 	ldw	r6,-4(fp)
81135ae4:	e17ffe17 	ldw	r5,-8(fp)
81135ae8:	1809883a 	mov	r4,r3
81135aec:	113615c0 	call	8113615c <altera_avalon_uart_read>
81135af0:	e037883a 	mov	sp,fp
81135af4:	dfc00117 	ldw	ra,4(sp)
81135af8:	df000017 	ldw	fp,0(sp)
81135afc:	dec00204 	addi	sp,sp,8
81135b00:	f800283a 	ret

81135b04 <altera_avalon_uart_write_fd>:
81135b04:	defffa04 	addi	sp,sp,-24
81135b08:	de00012e 	bgeu	sp,et,81135b10 <altera_avalon_uart_write_fd+0xc>
81135b0c:	003b68fa 	trap	3
81135b10:	dfc00515 	stw	ra,20(sp)
81135b14:	df000415 	stw	fp,16(sp)
81135b18:	df000404 	addi	fp,sp,16
81135b1c:	e13ffd15 	stw	r4,-12(fp)
81135b20:	e17ffe15 	stw	r5,-8(fp)
81135b24:	e1bfff15 	stw	r6,-4(fp)
81135b28:	e0bffd17 	ldw	r2,-12(fp)
81135b2c:	10800017 	ldw	r2,0(r2)
81135b30:	e0bffc15 	stw	r2,-16(fp)
81135b34:	e0bffc17 	ldw	r2,-16(fp)
81135b38:	10c00a04 	addi	r3,r2,40
81135b3c:	e0bffd17 	ldw	r2,-12(fp)
81135b40:	10800217 	ldw	r2,8(r2)
81135b44:	100f883a 	mov	r7,r2
81135b48:	e1bfff17 	ldw	r6,-4(fp)
81135b4c:	e17ffe17 	ldw	r5,-8(fp)
81135b50:	1809883a 	mov	r4,r3
81135b54:	11364100 	call	81136410 <altera_avalon_uart_write>
81135b58:	e037883a 	mov	sp,fp
81135b5c:	dfc00117 	ldw	ra,4(sp)
81135b60:	df000017 	ldw	fp,0(sp)
81135b64:	dec00204 	addi	sp,sp,8
81135b68:	f800283a 	ret

81135b6c <altera_avalon_uart_close_fd>:
81135b6c:	defffc04 	addi	sp,sp,-16
81135b70:	de00012e 	bgeu	sp,et,81135b78 <altera_avalon_uart_close_fd+0xc>
81135b74:	003b68fa 	trap	3
81135b78:	dfc00315 	stw	ra,12(sp)
81135b7c:	df000215 	stw	fp,8(sp)
81135b80:	df000204 	addi	fp,sp,8
81135b84:	e13fff15 	stw	r4,-4(fp)
81135b88:	e0bfff17 	ldw	r2,-4(fp)
81135b8c:	10800017 	ldw	r2,0(r2)
81135b90:	e0bffe15 	stw	r2,-8(fp)
81135b94:	e0bffe17 	ldw	r2,-8(fp)
81135b98:	10c00a04 	addi	r3,r2,40
81135b9c:	e0bfff17 	ldw	r2,-4(fp)
81135ba0:	10800217 	ldw	r2,8(r2)
81135ba4:	100b883a 	mov	r5,r2
81135ba8:	1809883a 	mov	r4,r3
81135bac:	11360bc0 	call	811360bc <altera_avalon_uart_close>
81135bb0:	e037883a 	mov	sp,fp
81135bb4:	dfc00117 	ldw	ra,4(sp)
81135bb8:	df000017 	ldw	fp,0(sp)
81135bbc:	dec00204 	addi	sp,sp,8
81135bc0:	f800283a 	ret

81135bc4 <altera_avalon_uart_init>:
81135bc4:	defff304 	addi	sp,sp,-52
81135bc8:	de00012e 	bgeu	sp,et,81135bd0 <altera_avalon_uart_init+0xc>
81135bcc:	003b68fa 	trap	3
81135bd0:	dfc00c15 	stw	ra,48(sp)
81135bd4:	df000b15 	stw	fp,44(sp)
81135bd8:	df000b04 	addi	fp,sp,44
81135bdc:	e13ffd15 	stw	r4,-12(fp)
81135be0:	e17ffe15 	stw	r5,-8(fp)
81135be4:	e1bfff15 	stw	r6,-4(fp)
81135be8:	e0bffd17 	ldw	r2,-12(fp)
81135bec:	10800017 	ldw	r2,0(r2)
81135bf0:	e0bff615 	stw	r2,-40(fp)
81135bf4:	e0bffd17 	ldw	r2,-12(fp)
81135bf8:	10800704 	addi	r2,r2,28
81135bfc:	e0bffa15 	stw	r2,-24(fp)
81135c00:	e03ffb0d 	sth	zero,-20(fp)
81135c04:	e0bffb0b 	ldhu	r2,-20(fp)
81135c08:	e0fffc84 	addi	r3,fp,-14
81135c0c:	180b883a 	mov	r5,r3
81135c10:	1009883a 	mov	r4,r2
81135c14:	1128f680 	call	81128f68 <OSFlagCreate>
81135c18:	1007883a 	mov	r3,r2
81135c1c:	e0bffa17 	ldw	r2,-24(fp)
81135c20:	10c00015 	stw	r3,0(r2)
81135c24:	e0bffc83 	ldbu	r2,-14(fp)
81135c28:	10803fcc 	andi	r2,r2,255
81135c2c:	1000241e 	bne	r2,zero,81135cc0 <altera_avalon_uart_init+0xfc>
81135c30:	e0bffd17 	ldw	r2,-12(fp)
81135c34:	10800804 	addi	r2,r2,32
81135c38:	e0bff715 	stw	r2,-36(fp)
81135c3c:	00800044 	movi	r2,1
81135c40:	e0bffb8d 	sth	r2,-18(fp)
81135c44:	e0bffb8b 	ldhu	r2,-18(fp)
81135c48:	1009883a 	mov	r4,r2
81135c4c:	112cec40 	call	8112cec4 <OSSemCreate>
81135c50:	1007883a 	mov	r3,r2
81135c54:	e0bff717 	ldw	r2,-36(fp)
81135c58:	10c00015 	stw	r3,0(r2)
81135c5c:	e0bff717 	ldw	r2,-36(fp)
81135c60:	10800017 	ldw	r2,0(r2)
81135c64:	10000226 	beq	r2,zero,81135c70 <altera_avalon_uart_init+0xac>
81135c68:	0005883a 	mov	r2,zero
81135c6c:	00000106 	br	81135c74 <altera_avalon_uart_init+0xb0>
81135c70:	00bfffc4 	movi	r2,-1
81135c74:	1000121e 	bne	r2,zero,81135cc0 <altera_avalon_uart_init+0xfc>
81135c78:	e0bffd17 	ldw	r2,-12(fp)
81135c7c:	10800904 	addi	r2,r2,36
81135c80:	e0bff815 	stw	r2,-32(fp)
81135c84:	00800044 	movi	r2,1
81135c88:	e0bffc0d 	sth	r2,-16(fp)
81135c8c:	e0bffc0b 	ldhu	r2,-16(fp)
81135c90:	1009883a 	mov	r4,r2
81135c94:	112cec40 	call	8112cec4 <OSSemCreate>
81135c98:	1007883a 	mov	r3,r2
81135c9c:	e0bff817 	ldw	r2,-32(fp)
81135ca0:	10c00015 	stw	r3,0(r2)
81135ca4:	e0bff817 	ldw	r2,-32(fp)
81135ca8:	10800017 	ldw	r2,0(r2)
81135cac:	10000226 	beq	r2,zero,81135cb8 <altera_avalon_uart_init+0xf4>
81135cb0:	0005883a 	mov	r2,zero
81135cb4:	00000106 	br	81135cbc <altera_avalon_uart_init+0xf8>
81135cb8:	00bfffc4 	movi	r2,-1
81135cbc:	10000226 	beq	r2,zero,81135cc8 <altera_avalon_uart_init+0x104>
81135cc0:	00800044 	movi	r2,1
81135cc4:	00000106 	br	81135ccc <altera_avalon_uart_init+0x108>
81135cc8:	0005883a 	mov	r2,zero
81135ccc:	e0bff915 	stw	r2,-28(fp)
81135cd0:	e0bff917 	ldw	r2,-28(fp)
81135cd4:	10000f1e 	bne	r2,zero,81135d14 <altera_avalon_uart_init+0x150>
81135cd8:	e0bffd17 	ldw	r2,-12(fp)
81135cdc:	00c32004 	movi	r3,3200
81135ce0:	10c00115 	stw	r3,4(r2)
81135ce4:	e0bff617 	ldw	r2,-40(fp)
81135ce8:	10800304 	addi	r2,r2,12
81135cec:	e0fffd17 	ldw	r3,-12(fp)
81135cf0:	18c00117 	ldw	r3,4(r3)
81135cf4:	10c00035 	stwio	r3,0(r2)
81135cf8:	d8000015 	stw	zero,0(sp)
81135cfc:	e1fffd17 	ldw	r7,-12(fp)
81135d00:	01a044f4 	movhi	r6,33043
81135d04:	31974b04 	addi	r6,r6,23852
81135d08:	e17fff17 	ldw	r5,-4(fp)
81135d0c:	e13ffe17 	ldw	r4,-8(fp)
81135d10:	1138cec0 	call	81138cec <alt_ic_isr_register>
81135d14:	0001883a 	nop
81135d18:	e037883a 	mov	sp,fp
81135d1c:	dfc00117 	ldw	ra,4(sp)
81135d20:	df000017 	ldw	fp,0(sp)
81135d24:	dec00204 	addi	sp,sp,8
81135d28:	f800283a 	ret

81135d2c <altera_avalon_uart_irq>:
81135d2c:	defffa04 	addi	sp,sp,-24
81135d30:	de00012e 	bgeu	sp,et,81135d38 <altera_avalon_uart_irq+0xc>
81135d34:	003b68fa 	trap	3
81135d38:	dfc00515 	stw	ra,20(sp)
81135d3c:	df000415 	stw	fp,16(sp)
81135d40:	df000404 	addi	fp,sp,16
81135d44:	e13fff15 	stw	r4,-4(fp)
81135d48:	e0bfff17 	ldw	r2,-4(fp)
81135d4c:	e0bffc15 	stw	r2,-16(fp)
81135d50:	e0bffc17 	ldw	r2,-16(fp)
81135d54:	10800017 	ldw	r2,0(r2)
81135d58:	e0bffd15 	stw	r2,-12(fp)
81135d5c:	e0bffd17 	ldw	r2,-12(fp)
81135d60:	10800204 	addi	r2,r2,8
81135d64:	10800037 	ldwio	r2,0(r2)
81135d68:	e0bffe15 	stw	r2,-8(fp)
81135d6c:	e0bffd17 	ldw	r2,-12(fp)
81135d70:	10800204 	addi	r2,r2,8
81135d74:	0007883a 	mov	r3,zero
81135d78:	10c00035 	stwio	r3,0(r2)
81135d7c:	e0bffd17 	ldw	r2,-12(fp)
81135d80:	10800204 	addi	r2,r2,8
81135d84:	10800037 	ldwio	r2,0(r2)
81135d88:	e0bffe17 	ldw	r2,-8(fp)
81135d8c:	1080200c 	andi	r2,r2,128
81135d90:	10000326 	beq	r2,zero,81135da0 <altera_avalon_uart_irq+0x74>
81135d94:	e17ffe17 	ldw	r5,-8(fp)
81135d98:	e13ffc17 	ldw	r4,-16(fp)
81135d9c:	1135dd00 	call	81135dd0 <altera_avalon_uart_rxirq>
81135da0:	e0bffe17 	ldw	r2,-8(fp)
81135da4:	1081100c 	andi	r2,r2,1088
81135da8:	10000326 	beq	r2,zero,81135db8 <altera_avalon_uart_irq+0x8c>
81135dac:	e17ffe17 	ldw	r5,-8(fp)
81135db0:	e13ffc17 	ldw	r4,-16(fp)
81135db4:	1135f100 	call	81135f10 <altera_avalon_uart_txirq>
81135db8:	0001883a 	nop
81135dbc:	e037883a 	mov	sp,fp
81135dc0:	dfc00117 	ldw	ra,4(sp)
81135dc4:	df000017 	ldw	fp,0(sp)
81135dc8:	dec00204 	addi	sp,sp,8
81135dcc:	f800283a 	ret

81135dd0 <altera_avalon_uart_rxirq>:
81135dd0:	defff904 	addi	sp,sp,-28
81135dd4:	de00012e 	bgeu	sp,et,81135ddc <altera_avalon_uart_rxirq+0xc>
81135dd8:	003b68fa 	trap	3
81135ddc:	dfc00615 	stw	ra,24(sp)
81135de0:	df000515 	stw	fp,20(sp)
81135de4:	df000504 	addi	fp,sp,20
81135de8:	e13ffe15 	stw	r4,-8(fp)
81135dec:	e17fff15 	stw	r5,-4(fp)
81135df0:	e0bfff17 	ldw	r2,-4(fp)
81135df4:	108000cc 	andi	r2,r2,3
81135df8:	10003f1e 	bne	r2,zero,81135ef8 <altera_avalon_uart_rxirq+0x128>
81135dfc:	e0bffe17 	ldw	r2,-8(fp)
81135e00:	10c00317 	ldw	r3,12(r2)
81135e04:	e0bffe17 	ldw	r2,-8(fp)
81135e08:	10800217 	ldw	r2,8(r2)
81135e0c:	1880121e 	bne	r3,r2,81135e58 <altera_avalon_uart_rxirq+0x88>
81135e10:	e0bffe17 	ldw	r2,-8(fp)
81135e14:	10800717 	ldw	r2,28(r2)
81135e18:	e0bffc15 	stw	r2,-16(fp)
81135e1c:	00800044 	movi	r2,1
81135e20:	e0bffd0d 	sth	r2,-12(fp)
81135e24:	00800044 	movi	r2,1
81135e28:	e0bffd85 	stb	r2,-10(fp)
81135e2c:	d0a07303 	ldbu	r2,-32308(gp)
81135e30:	10803fcc 	andi	r2,r2,255
81135e34:	10000826 	beq	r2,zero,81135e58 <altera_avalon_uart_rxirq+0x88>
81135e38:	e0bffd0b 	ldhu	r2,-12(fp)
81135e3c:	e0fffd83 	ldbu	r3,-10(fp)
81135e40:	e13ffdc4 	addi	r4,fp,-9
81135e44:	200f883a 	mov	r7,r4
81135e48:	180d883a 	mov	r6,r3
81135e4c:	100b883a 	mov	r5,r2
81135e50:	e13ffc17 	ldw	r4,-16(fp)
81135e54:	1129b740 	call	81129b74 <OSFlagPost>
81135e58:	e0bffe17 	ldw	r2,-8(fp)
81135e5c:	10800317 	ldw	r2,12(r2)
81135e60:	10800044 	addi	r2,r2,1
81135e64:	10800fcc 	andi	r2,r2,63
81135e68:	e0bffb15 	stw	r2,-20(fp)
81135e6c:	e0bffe17 	ldw	r2,-8(fp)
81135e70:	10800317 	ldw	r2,12(r2)
81135e74:	e0fffe17 	ldw	r3,-8(fp)
81135e78:	18c00017 	ldw	r3,0(r3)
81135e7c:	18c00037 	ldwio	r3,0(r3)
81135e80:	1809883a 	mov	r4,r3
81135e84:	e0fffe17 	ldw	r3,-8(fp)
81135e88:	1885883a 	add	r2,r3,r2
81135e8c:	10800a04 	addi	r2,r2,40
81135e90:	11000005 	stb	r4,0(r2)
81135e94:	e0bffe17 	ldw	r2,-8(fp)
81135e98:	e0fffb17 	ldw	r3,-20(fp)
81135e9c:	10c00315 	stw	r3,12(r2)
81135ea0:	e0bffe17 	ldw	r2,-8(fp)
81135ea4:	10800317 	ldw	r2,12(r2)
81135ea8:	10800044 	addi	r2,r2,1
81135eac:	10800fcc 	andi	r2,r2,63
81135eb0:	e0bffb15 	stw	r2,-20(fp)
81135eb4:	e0bffe17 	ldw	r2,-8(fp)
81135eb8:	10c00217 	ldw	r3,8(r2)
81135ebc:	e0bffb17 	ldw	r2,-20(fp)
81135ec0:	18800e1e 	bne	r3,r2,81135efc <altera_avalon_uart_rxirq+0x12c>
81135ec4:	e0bffe17 	ldw	r2,-8(fp)
81135ec8:	10c00117 	ldw	r3,4(r2)
81135ecc:	00bfdfc4 	movi	r2,-129
81135ed0:	1886703a 	and	r3,r3,r2
81135ed4:	e0bffe17 	ldw	r2,-8(fp)
81135ed8:	10c00115 	stw	r3,4(r2)
81135edc:	e0bffe17 	ldw	r2,-8(fp)
81135ee0:	10800017 	ldw	r2,0(r2)
81135ee4:	10800304 	addi	r2,r2,12
81135ee8:	e0fffe17 	ldw	r3,-8(fp)
81135eec:	18c00117 	ldw	r3,4(r3)
81135ef0:	10c00035 	stwio	r3,0(r2)
81135ef4:	00000106 	br	81135efc <altera_avalon_uart_rxirq+0x12c>
81135ef8:	0001883a 	nop
81135efc:	e037883a 	mov	sp,fp
81135f00:	dfc00117 	ldw	ra,4(sp)
81135f04:	df000017 	ldw	fp,0(sp)
81135f08:	dec00204 	addi	sp,sp,8
81135f0c:	f800283a 	ret

81135f10 <altera_avalon_uart_txirq>:
81135f10:	defffa04 	addi	sp,sp,-24
81135f14:	de00012e 	bgeu	sp,et,81135f1c <altera_avalon_uart_txirq+0xc>
81135f18:	003b68fa 	trap	3
81135f1c:	dfc00515 	stw	ra,20(sp)
81135f20:	df000415 	stw	fp,16(sp)
81135f24:	df000404 	addi	fp,sp,16
81135f28:	e13ffe15 	stw	r4,-8(fp)
81135f2c:	e17fff15 	stw	r5,-4(fp)
81135f30:	e0bffe17 	ldw	r2,-8(fp)
81135f34:	10c00417 	ldw	r3,16(r2)
81135f38:	e0bffe17 	ldw	r2,-8(fp)
81135f3c:	10800517 	ldw	r2,20(r2)
81135f40:	18804726 	beq	r3,r2,81136060 <altera_avalon_uart_txirq+0x150>
81135f44:	e0bffe17 	ldw	r2,-8(fp)
81135f48:	10800617 	ldw	r2,24(r2)
81135f4c:	1080008c 	andi	r2,r2,2
81135f50:	10000326 	beq	r2,zero,81135f60 <altera_avalon_uart_txirq+0x50>
81135f54:	e0bfff17 	ldw	r2,-4(fp)
81135f58:	1082000c 	andi	r2,r2,2048
81135f5c:	10003226 	beq	r2,zero,81136028 <altera_avalon_uart_txirq+0x118>
81135f60:	e0bffe17 	ldw	r2,-8(fp)
81135f64:	10c00417 	ldw	r3,16(r2)
81135f68:	e0bffe17 	ldw	r2,-8(fp)
81135f6c:	10800517 	ldw	r2,20(r2)
81135f70:	10800044 	addi	r2,r2,1
81135f74:	10800fcc 	andi	r2,r2,63
81135f78:	1880121e 	bne	r3,r2,81135fc4 <altera_avalon_uart_txirq+0xb4>
81135f7c:	e0bffe17 	ldw	r2,-8(fp)
81135f80:	10800717 	ldw	r2,28(r2)
81135f84:	e0bffc15 	stw	r2,-16(fp)
81135f88:	00800084 	movi	r2,2
81135f8c:	e0bffd0d 	sth	r2,-12(fp)
81135f90:	00800044 	movi	r2,1
81135f94:	e0bffd85 	stb	r2,-10(fp)
81135f98:	d0a07303 	ldbu	r2,-32308(gp)
81135f9c:	10803fcc 	andi	r2,r2,255
81135fa0:	10000826 	beq	r2,zero,81135fc4 <altera_avalon_uart_txirq+0xb4>
81135fa4:	e0bffd0b 	ldhu	r2,-12(fp)
81135fa8:	e0fffd83 	ldbu	r3,-10(fp)
81135fac:	e13ffdc4 	addi	r4,fp,-9
81135fb0:	200f883a 	mov	r7,r4
81135fb4:	180d883a 	mov	r6,r3
81135fb8:	100b883a 	mov	r5,r2
81135fbc:	e13ffc17 	ldw	r4,-16(fp)
81135fc0:	1129b740 	call	81129b74 <OSFlagPost>
81135fc4:	e0bffe17 	ldw	r2,-8(fp)
81135fc8:	10800017 	ldw	r2,0(r2)
81135fcc:	10800104 	addi	r2,r2,4
81135fd0:	e0fffe17 	ldw	r3,-8(fp)
81135fd4:	18c00417 	ldw	r3,16(r3)
81135fd8:	e13ffe17 	ldw	r4,-8(fp)
81135fdc:	20c7883a 	add	r3,r4,r3
81135fe0:	18c01a04 	addi	r3,r3,104
81135fe4:	18c00003 	ldbu	r3,0(r3)
81135fe8:	18c03fcc 	andi	r3,r3,255
81135fec:	10c00035 	stwio	r3,0(r2)
81135ff0:	e0bffe17 	ldw	r2,-8(fp)
81135ff4:	10800417 	ldw	r2,16(r2)
81135ff8:	10800044 	addi	r2,r2,1
81135ffc:	e0fffe17 	ldw	r3,-8(fp)
81136000:	18800415 	stw	r2,16(r3)
81136004:	10c00fcc 	andi	r3,r2,63
81136008:	e0bffe17 	ldw	r2,-8(fp)
8113600c:	10c00415 	stw	r3,16(r2)
81136010:	e0bffe17 	ldw	r2,-8(fp)
81136014:	10800117 	ldw	r2,4(r2)
81136018:	10c01014 	ori	r3,r2,64
8113601c:	e0bffe17 	ldw	r2,-8(fp)
81136020:	10c00115 	stw	r3,4(r2)
81136024:	00000e06 	br	81136060 <altera_avalon_uart_txirq+0x150>
81136028:	e0bffe17 	ldw	r2,-8(fp)
8113602c:	10800017 	ldw	r2,0(r2)
81136030:	10800204 	addi	r2,r2,8
81136034:	10800037 	ldwio	r2,0(r2)
81136038:	e0bfff15 	stw	r2,-4(fp)
8113603c:	e0bfff17 	ldw	r2,-4(fp)
81136040:	1082000c 	andi	r2,r2,2048
81136044:	1000061e 	bne	r2,zero,81136060 <altera_avalon_uart_txirq+0x150>
81136048:	e0bffe17 	ldw	r2,-8(fp)
8113604c:	10c00117 	ldw	r3,4(r2)
81136050:	00bfefc4 	movi	r2,-65
81136054:	1886703a 	and	r3,r3,r2
81136058:	e0bffe17 	ldw	r2,-8(fp)
8113605c:	10c00115 	stw	r3,4(r2)
81136060:	e0bffe17 	ldw	r2,-8(fp)
81136064:	10c00417 	ldw	r3,16(r2)
81136068:	e0bffe17 	ldw	r2,-8(fp)
8113606c:	10800517 	ldw	r2,20(r2)
81136070:	1880061e 	bne	r3,r2,8113608c <altera_avalon_uart_txirq+0x17c>
81136074:	e0bffe17 	ldw	r2,-8(fp)
81136078:	10c00117 	ldw	r3,4(r2)
8113607c:	00beefc4 	movi	r2,-1089
81136080:	1886703a 	and	r3,r3,r2
81136084:	e0bffe17 	ldw	r2,-8(fp)
81136088:	10c00115 	stw	r3,4(r2)
8113608c:	e0bffe17 	ldw	r2,-8(fp)
81136090:	10800017 	ldw	r2,0(r2)
81136094:	10800304 	addi	r2,r2,12
81136098:	e0fffe17 	ldw	r3,-8(fp)
8113609c:	18c00117 	ldw	r3,4(r3)
811360a0:	10c00035 	stwio	r3,0(r2)
811360a4:	0001883a 	nop
811360a8:	e037883a 	mov	sp,fp
811360ac:	dfc00117 	ldw	ra,4(sp)
811360b0:	df000017 	ldw	fp,0(sp)
811360b4:	dec00204 	addi	sp,sp,8
811360b8:	f800283a 	ret

811360bc <altera_avalon_uart_close>:
811360bc:	defffd04 	addi	sp,sp,-12
811360c0:	de00012e 	bgeu	sp,et,811360c8 <altera_avalon_uart_close+0xc>
811360c4:	003b68fa 	trap	3
811360c8:	df000215 	stw	fp,8(sp)
811360cc:	df000204 	addi	fp,sp,8
811360d0:	e13ffe15 	stw	r4,-8(fp)
811360d4:	e17fff15 	stw	r5,-4(fp)
811360d8:	00000506 	br	811360f0 <altera_avalon_uart_close+0x34>
811360dc:	e0bfff17 	ldw	r2,-4(fp)
811360e0:	1090000c 	andi	r2,r2,16384
811360e4:	10000226 	beq	r2,zero,811360f0 <altera_avalon_uart_close+0x34>
811360e8:	00bffd44 	movi	r2,-11
811360ec:	00000606 	br	81136108 <altera_avalon_uart_close+0x4c>
811360f0:	e0bffe17 	ldw	r2,-8(fp)
811360f4:	10c00417 	ldw	r3,16(r2)
811360f8:	e0bffe17 	ldw	r2,-8(fp)
811360fc:	10800517 	ldw	r2,20(r2)
81136100:	18bff61e 	bne	r3,r2,811360dc <__reset+0xfb1160dc>
81136104:	0005883a 	mov	r2,zero
81136108:	e037883a 	mov	sp,fp
8113610c:	df000017 	ldw	fp,0(sp)
81136110:	dec00104 	addi	sp,sp,4
81136114:	f800283a 	ret

81136118 <alt_get_errno>:
81136118:	defffe04 	addi	sp,sp,-8
8113611c:	de00012e 	bgeu	sp,et,81136124 <alt_get_errno+0xc>
81136120:	003b68fa 	trap	3
81136124:	dfc00115 	stw	ra,4(sp)
81136128:	df000015 	stw	fp,0(sp)
8113612c:	d839883a 	mov	fp,sp
81136130:	d0a01017 	ldw	r2,-32704(gp)
81136134:	10000326 	beq	r2,zero,81136144 <alt_get_errno+0x2c>
81136138:	d0a01017 	ldw	r2,-32704(gp)
8113613c:	103ee83a 	callr	r2
81136140:	00000106 	br	81136148 <alt_get_errno+0x30>
81136144:	d0a05e04 	addi	r2,gp,-32392
81136148:	e037883a 	mov	sp,fp
8113614c:	dfc00117 	ldw	ra,4(sp)
81136150:	df000017 	ldw	fp,0(sp)
81136154:	dec00204 	addi	sp,sp,8
81136158:	f800283a 	ret

8113615c <altera_avalon_uart_read>:
8113615c:	deffec04 	addi	sp,sp,-80
81136160:	de00012e 	bgeu	sp,et,81136168 <altera_avalon_uart_read+0xc>
81136164:	003b68fa 	trap	3
81136168:	dfc01315 	stw	ra,76(sp)
8113616c:	df001215 	stw	fp,72(sp)
81136170:	df001204 	addi	fp,sp,72
81136174:	e13ffc15 	stw	r4,-16(fp)
81136178:	e17ffd15 	stw	r5,-12(fp)
8113617c:	e1bffe15 	stw	r6,-8(fp)
81136180:	e1ffff15 	stw	r7,-4(fp)
81136184:	e03fef05 	stb	zero,-68(fp)
81136188:	e03ff015 	stw	zero,-64(fp)
8113618c:	e0bfff17 	ldw	r2,-4(fp)
81136190:	1090000c 	andi	r2,r2,16384
81136194:	1005003a 	cmpeq	r2,r2,zero
81136198:	10803fcc 	andi	r2,r2,255
8113619c:	e0bff115 	stw	r2,-60(fp)
811361a0:	e0bffc17 	ldw	r2,-16(fp)
811361a4:	10800817 	ldw	r2,32(r2)
811361a8:	e0bff815 	stw	r2,-32(fp)
811361ac:	e03ff90d 	sth	zero,-28(fp)
811361b0:	e0bff90b 	ldhu	r2,-28(fp)
811361b4:	e0fffb44 	addi	r3,fp,-19
811361b8:	180d883a 	mov	r6,r3
811361bc:	100b883a 	mov	r5,r2
811361c0:	e13ff817 	ldw	r4,-32(fp)
811361c4:	112d1ec0 	call	8112d1ec <OSSemPend>
811361c8:	00001306 	br	81136218 <altera_avalon_uart_read+0xbc>
811361cc:	e0bff017 	ldw	r2,-64(fp)
811361d0:	10800044 	addi	r2,r2,1
811361d4:	e0bff015 	stw	r2,-64(fp)
811361d8:	e0bffd17 	ldw	r2,-12(fp)
811361dc:	10c00044 	addi	r3,r2,1
811361e0:	e0fffd15 	stw	r3,-12(fp)
811361e4:	e0fffc17 	ldw	r3,-16(fp)
811361e8:	18c00217 	ldw	r3,8(r3)
811361ec:	e13ffc17 	ldw	r4,-16(fp)
811361f0:	20c7883a 	add	r3,r4,r3
811361f4:	18c00a04 	addi	r3,r3,40
811361f8:	18c00003 	ldbu	r3,0(r3)
811361fc:	10c00005 	stb	r3,0(r2)
81136200:	e0bffc17 	ldw	r2,-16(fp)
81136204:	10800217 	ldw	r2,8(r2)
81136208:	10800044 	addi	r2,r2,1
8113620c:	10c00fcc 	andi	r3,r2,63
81136210:	e0bffc17 	ldw	r2,-16(fp)
81136214:	10c00215 	stw	r3,8(r2)
81136218:	e0fff017 	ldw	r3,-64(fp)
8113621c:	e0bffe17 	ldw	r2,-8(fp)
81136220:	1880050e 	bge	r3,r2,81136238 <altera_avalon_uart_read+0xdc>
81136224:	e0bffc17 	ldw	r2,-16(fp)
81136228:	10c00217 	ldw	r3,8(r2)
8113622c:	e0bffc17 	ldw	r2,-16(fp)
81136230:	10800317 	ldw	r2,12(r2)
81136234:	18bfe51e 	bne	r3,r2,811361cc <__reset+0xfb1161cc>
81136238:	e0bff017 	ldw	r2,-64(fp)
8113623c:	10003a1e 	bne	r2,zero,81136328 <altera_avalon_uart_read+0x1cc>
81136240:	e0bffc17 	ldw	r2,-16(fp)
81136244:	10c00217 	ldw	r3,8(r2)
81136248:	e0bffc17 	ldw	r2,-16(fp)
8113624c:	10800317 	ldw	r2,12(r2)
81136250:	1880351e 	bne	r3,r2,81136328 <altera_avalon_uart_read+0x1cc>
81136254:	e0bff117 	ldw	r2,-60(fp)
81136258:	1000071e 	bne	r2,zero,81136278 <altera_avalon_uart_read+0x11c>
8113625c:	11361180 	call	81136118 <alt_get_errno>
81136260:	1007883a 	mov	r3,r2
81136264:	008002c4 	movi	r2,11
81136268:	18800015 	stw	r2,0(r3)
8113626c:	00800044 	movi	r2,1
81136270:	e0bfef05 	stb	r2,-68(fp)
81136274:	00003006 	br	81136338 <altera_avalon_uart_read+0x1dc>
81136278:	0005303a 	rdctl	r2,status
8113627c:	e0bff515 	stw	r2,-44(fp)
81136280:	e0fff517 	ldw	r3,-44(fp)
81136284:	00bfff84 	movi	r2,-2
81136288:	1884703a 	and	r2,r3,r2
8113628c:	1001703a 	wrctl	status,r2
81136290:	e0bff517 	ldw	r2,-44(fp)
81136294:	e0bff415 	stw	r2,-48(fp)
81136298:	e0bffc17 	ldw	r2,-16(fp)
8113629c:	10800117 	ldw	r2,4(r2)
811362a0:	10c02014 	ori	r3,r2,128
811362a4:	e0bffc17 	ldw	r2,-16(fp)
811362a8:	10c00115 	stw	r3,4(r2)
811362ac:	e0bffc17 	ldw	r2,-16(fp)
811362b0:	10800017 	ldw	r2,0(r2)
811362b4:	10800304 	addi	r2,r2,12
811362b8:	e0fffc17 	ldw	r3,-16(fp)
811362bc:	18c00117 	ldw	r3,4(r3)
811362c0:	10c00035 	stwio	r3,0(r2)
811362c4:	e0bff417 	ldw	r2,-48(fp)
811362c8:	e0bff615 	stw	r2,-40(fp)
811362cc:	e0bff617 	ldw	r2,-40(fp)
811362d0:	1001703a 	wrctl	status,r2
811362d4:	e0bffc17 	ldw	r2,-16(fp)
811362d8:	10800717 	ldw	r2,28(r2)
811362dc:	e0bff215 	stw	r2,-56(fp)
811362e0:	00800044 	movi	r2,1
811362e4:	e0bff98d 	sth	r2,-26(fp)
811362e8:	00bfe0c4 	movi	r2,-125
811362ec:	e0bffa05 	stb	r2,-24(fp)
811362f0:	e03ffa8d 	sth	zero,-22(fp)
811362f4:	d0a07303 	ldbu	r2,-32308(gp)
811362f8:	10803fcc 	andi	r2,r2,255
811362fc:	10000a26 	beq	r2,zero,81136328 <altera_avalon_uart_read+0x1cc>
81136300:	e0fff98b 	ldhu	r3,-26(fp)
81136304:	e13ffa03 	ldbu	r4,-24(fp)
81136308:	e17ffa8b 	ldhu	r5,-22(fp)
8113630c:	e0bffb04 	addi	r2,fp,-20
81136310:	d8800015 	stw	r2,0(sp)
81136314:	280f883a 	mov	r7,r5
81136318:	200d883a 	mov	r6,r4
8113631c:	180b883a 	mov	r5,r3
81136320:	e13ff217 	ldw	r4,-56(fp)
81136324:	112954c0 	call	8112954c <OSFlagPend>
81136328:	e0bff017 	ldw	r2,-64(fp)
8113632c:	1000021e 	bne	r2,zero,81136338 <altera_avalon_uart_read+0x1dc>
81136330:	e0bffe17 	ldw	r2,-8(fp)
81136334:	103fb81e 	bne	r2,zero,81136218 <__reset+0xfb116218>
81136338:	e0bffc17 	ldw	r2,-16(fp)
8113633c:	10800817 	ldw	r2,32(r2)
81136340:	1009883a 	mov	r4,r2
81136344:	112d5740 	call	8112d574 <OSSemPost>
81136348:	0005303a 	rdctl	r2,status
8113634c:	e0bff715 	stw	r2,-36(fp)
81136350:	e0fff717 	ldw	r3,-36(fp)
81136354:	00bfff84 	movi	r2,-2
81136358:	1884703a 	and	r2,r3,r2
8113635c:	1001703a 	wrctl	status,r2
81136360:	e0bff717 	ldw	r2,-36(fp)
81136364:	e0bff415 	stw	r2,-48(fp)
81136368:	e0bffc17 	ldw	r2,-16(fp)
8113636c:	10800117 	ldw	r2,4(r2)
81136370:	10c02014 	ori	r3,r2,128
81136374:	e0bffc17 	ldw	r2,-16(fp)
81136378:	10c00115 	stw	r3,4(r2)
8113637c:	e0bffc17 	ldw	r2,-16(fp)
81136380:	10800017 	ldw	r2,0(r2)
81136384:	10800304 	addi	r2,r2,12
81136388:	e0fffc17 	ldw	r3,-16(fp)
8113638c:	18c00117 	ldw	r3,4(r3)
81136390:	10c00035 	stwio	r3,0(r2)
81136394:	e0bff417 	ldw	r2,-48(fp)
81136398:	e0bff315 	stw	r2,-52(fp)
8113639c:	e0bff317 	ldw	r2,-52(fp)
811363a0:	1001703a 	wrctl	status,r2
811363a4:	e0bfef03 	ldbu	r2,-68(fp)
811363a8:	10000226 	beq	r2,zero,811363b4 <altera_avalon_uart_read+0x258>
811363ac:	00bffd44 	movi	r2,-11
811363b0:	00000106 	br	811363b8 <altera_avalon_uart_read+0x25c>
811363b4:	e0bff017 	ldw	r2,-64(fp)
811363b8:	e037883a 	mov	sp,fp
811363bc:	dfc00117 	ldw	ra,4(sp)
811363c0:	df000017 	ldw	fp,0(sp)
811363c4:	dec00204 	addi	sp,sp,8
811363c8:	f800283a 	ret

811363cc <alt_get_errno>:
811363cc:	defffe04 	addi	sp,sp,-8
811363d0:	de00012e 	bgeu	sp,et,811363d8 <alt_get_errno+0xc>
811363d4:	003b68fa 	trap	3
811363d8:	dfc00115 	stw	ra,4(sp)
811363dc:	df000015 	stw	fp,0(sp)
811363e0:	d839883a 	mov	fp,sp
811363e4:	d0a01017 	ldw	r2,-32704(gp)
811363e8:	10000326 	beq	r2,zero,811363f8 <alt_get_errno+0x2c>
811363ec:	d0a01017 	ldw	r2,-32704(gp)
811363f0:	103ee83a 	callr	r2
811363f4:	00000106 	br	811363fc <alt_get_errno+0x30>
811363f8:	d0a05e04 	addi	r2,gp,-32392
811363fc:	e037883a 	mov	sp,fp
81136400:	dfc00117 	ldw	ra,4(sp)
81136404:	df000017 	ldw	fp,0(sp)
81136408:	dec00204 	addi	sp,sp,8
8113640c:	f800283a 	ret

81136410 <altera_avalon_uart_write>:
81136410:	deffec04 	addi	sp,sp,-80
81136414:	de00012e 	bgeu	sp,et,8113641c <altera_avalon_uart_write+0xc>
81136418:	003b68fa 	trap	3
8113641c:	dfc01315 	stw	ra,76(sp)
81136420:	df001215 	stw	fp,72(sp)
81136424:	df001204 	addi	fp,sp,72
81136428:	e13ffc15 	stw	r4,-16(fp)
8113642c:	e17ffd15 	stw	r5,-12(fp)
81136430:	e1bffe15 	stw	r6,-8(fp)
81136434:	e1ffff15 	stw	r7,-4(fp)
81136438:	e0bffe17 	ldw	r2,-8(fp)
8113643c:	e0bfef15 	stw	r2,-68(fp)
81136440:	e0bfff17 	ldw	r2,-4(fp)
81136444:	1090000c 	andi	r2,r2,16384
81136448:	e0bff015 	stw	r2,-64(fp)
8113644c:	e0bffc17 	ldw	r2,-16(fp)
81136450:	10800917 	ldw	r2,36(r2)
81136454:	e0bff815 	stw	r2,-32(fp)
81136458:	e03ff90d 	sth	zero,-28(fp)
8113645c:	e0bff90b 	ldhu	r2,-28(fp)
81136460:	e0fffb44 	addi	r3,fp,-19
81136464:	180d883a 	mov	r6,r3
81136468:	100b883a 	mov	r5,r2
8113646c:	e13ff817 	ldw	r4,-32(fp)
81136470:	112d1ec0 	call	8112d1ec <OSSemPend>
81136474:	00005106 	br	811365bc <altera_avalon_uart_write+0x1ac>
81136478:	e0bffc17 	ldw	r2,-16(fp)
8113647c:	10800517 	ldw	r2,20(r2)
81136480:	10800044 	addi	r2,r2,1
81136484:	10800fcc 	andi	r2,r2,63
81136488:	e0bff215 	stw	r2,-56(fp)
8113648c:	e0bffc17 	ldw	r2,-16(fp)
81136490:	10c00417 	ldw	r3,16(r2)
81136494:	e0bff217 	ldw	r2,-56(fp)
81136498:	1880371e 	bne	r3,r2,81136578 <altera_avalon_uart_write+0x168>
8113649c:	e0bff017 	ldw	r2,-64(fp)
811364a0:	10000526 	beq	r2,zero,811364b8 <altera_avalon_uart_write+0xa8>
811364a4:	11363cc0 	call	811363cc <alt_get_errno>
811364a8:	1007883a 	mov	r3,r2
811364ac:	008002c4 	movi	r2,11
811364b0:	18800015 	stw	r2,0(r3)
811364b4:	00004306 	br	811365c4 <altera_avalon_uart_write+0x1b4>
811364b8:	0005303a 	rdctl	r2,status
811364bc:	e0bff515 	stw	r2,-44(fp)
811364c0:	e0fff517 	ldw	r3,-44(fp)
811364c4:	00bfff84 	movi	r2,-2
811364c8:	1884703a 	and	r2,r3,r2
811364cc:	1001703a 	wrctl	status,r2
811364d0:	e0bff517 	ldw	r2,-44(fp)
811364d4:	e0bff415 	stw	r2,-48(fp)
811364d8:	e0bffc17 	ldw	r2,-16(fp)
811364dc:	10800117 	ldw	r2,4(r2)
811364e0:	10c11014 	ori	r3,r2,1088
811364e4:	e0bffc17 	ldw	r2,-16(fp)
811364e8:	10c00115 	stw	r3,4(r2)
811364ec:	e0bffc17 	ldw	r2,-16(fp)
811364f0:	10800017 	ldw	r2,0(r2)
811364f4:	10800304 	addi	r2,r2,12
811364f8:	e0fffc17 	ldw	r3,-16(fp)
811364fc:	18c00117 	ldw	r3,4(r3)
81136500:	10c00035 	stwio	r3,0(r2)
81136504:	e0bff417 	ldw	r2,-48(fp)
81136508:	e0bff115 	stw	r2,-60(fp)
8113650c:	e0bff117 	ldw	r2,-60(fp)
81136510:	1001703a 	wrctl	status,r2
81136514:	e0bffc17 	ldw	r2,-16(fp)
81136518:	10800717 	ldw	r2,28(r2)
8113651c:	e0bff315 	stw	r2,-52(fp)
81136520:	00800084 	movi	r2,2
81136524:	e0bff98d 	sth	r2,-26(fp)
81136528:	00bfe0c4 	movi	r2,-125
8113652c:	e0bffa05 	stb	r2,-24(fp)
81136530:	e03ffa8d 	sth	zero,-22(fp)
81136534:	d0a07303 	ldbu	r2,-32308(gp)
81136538:	10803fcc 	andi	r2,r2,255
8113653c:	10000a26 	beq	r2,zero,81136568 <altera_avalon_uart_write+0x158>
81136540:	e0fff98b 	ldhu	r3,-26(fp)
81136544:	e13ffa03 	ldbu	r4,-24(fp)
81136548:	e17ffa8b 	ldhu	r5,-22(fp)
8113654c:	e0bffb04 	addi	r2,fp,-20
81136550:	d8800015 	stw	r2,0(sp)
81136554:	280f883a 	mov	r7,r5
81136558:	200d883a 	mov	r6,r4
8113655c:	180b883a 	mov	r5,r3
81136560:	e13ff317 	ldw	r4,-52(fp)
81136564:	112954c0 	call	8112954c <OSFlagPend>
81136568:	e0bffc17 	ldw	r2,-16(fp)
8113656c:	10c00417 	ldw	r3,16(r2)
81136570:	e0bff217 	ldw	r2,-56(fp)
81136574:	18bfe726 	beq	r3,r2,81136514 <__reset+0xfb116514>
81136578:	e0bfef17 	ldw	r2,-68(fp)
8113657c:	10bfffc4 	addi	r2,r2,-1
81136580:	e0bfef15 	stw	r2,-68(fp)
81136584:	e0bffc17 	ldw	r2,-16(fp)
81136588:	10c00517 	ldw	r3,20(r2)
8113658c:	e0bffd17 	ldw	r2,-12(fp)
81136590:	11000044 	addi	r4,r2,1
81136594:	e13ffd15 	stw	r4,-12(fp)
81136598:	10800003 	ldbu	r2,0(r2)
8113659c:	1009883a 	mov	r4,r2
811365a0:	e0bffc17 	ldw	r2,-16(fp)
811365a4:	10c5883a 	add	r2,r2,r3
811365a8:	10801a04 	addi	r2,r2,104
811365ac:	11000005 	stb	r4,0(r2)
811365b0:	e0bffc17 	ldw	r2,-16(fp)
811365b4:	e0fff217 	ldw	r3,-56(fp)
811365b8:	10c00515 	stw	r3,20(r2)
811365bc:	e0bfef17 	ldw	r2,-68(fp)
811365c0:	103fad1e 	bne	r2,zero,81136478 <__reset+0xfb116478>
811365c4:	e0bffc17 	ldw	r2,-16(fp)
811365c8:	10800917 	ldw	r2,36(r2)
811365cc:	1009883a 	mov	r4,r2
811365d0:	112d5740 	call	8112d574 <OSSemPost>
811365d4:	0005303a 	rdctl	r2,status
811365d8:	e0bff715 	stw	r2,-36(fp)
811365dc:	e0fff717 	ldw	r3,-36(fp)
811365e0:	00bfff84 	movi	r2,-2
811365e4:	1884703a 	and	r2,r3,r2
811365e8:	1001703a 	wrctl	status,r2
811365ec:	e0bff717 	ldw	r2,-36(fp)
811365f0:	e0bff415 	stw	r2,-48(fp)
811365f4:	e0bffc17 	ldw	r2,-16(fp)
811365f8:	10800117 	ldw	r2,4(r2)
811365fc:	10c11014 	ori	r3,r2,1088
81136600:	e0bffc17 	ldw	r2,-16(fp)
81136604:	10c00115 	stw	r3,4(r2)
81136608:	e0bffc17 	ldw	r2,-16(fp)
8113660c:	10800017 	ldw	r2,0(r2)
81136610:	10800304 	addi	r2,r2,12
81136614:	e0fffc17 	ldw	r3,-16(fp)
81136618:	18c00117 	ldw	r3,4(r3)
8113661c:	10c00035 	stwio	r3,0(r2)
81136620:	e0bff417 	ldw	r2,-48(fp)
81136624:	e0bff615 	stw	r2,-40(fp)
81136628:	e0bff617 	ldw	r2,-40(fp)
8113662c:	1001703a 	wrctl	status,r2
81136630:	e0fffe17 	ldw	r3,-8(fp)
81136634:	e0bfef17 	ldw	r2,-68(fp)
81136638:	1885c83a 	sub	r2,r3,r2
8113663c:	e037883a 	mov	sp,fp
81136640:	dfc00117 	ldw	ra,4(sp)
81136644:	df000017 	ldw	fp,0(sp)
81136648:	dec00204 	addi	sp,sp,8
8113664c:	f800283a 	ret

81136650 <alt_get_errno>:
81136650:	defffe04 	addi	sp,sp,-8
81136654:	de00012e 	bgeu	sp,et,8113665c <alt_get_errno+0xc>
81136658:	003b68fa 	trap	3
8113665c:	dfc00115 	stw	ra,4(sp)
81136660:	df000015 	stw	fp,0(sp)
81136664:	d839883a 	mov	fp,sp
81136668:	d0a01017 	ldw	r2,-32704(gp)
8113666c:	10000326 	beq	r2,zero,8113667c <alt_get_errno+0x2c>
81136670:	d0a01017 	ldw	r2,-32704(gp)
81136674:	103ee83a 	callr	r2
81136678:	00000106 	br	81136680 <alt_get_errno+0x30>
8113667c:	d0a05e04 	addi	r2,gp,-32392
81136680:	e037883a 	mov	sp,fp
81136684:	dfc00117 	ldw	ra,4(sp)
81136688:	df000017 	ldw	fp,0(sp)
8113668c:	dec00204 	addi	sp,sp,8
81136690:	f800283a 	ret

81136694 <alt_msgdma_write_standard_descriptor>:
81136694:	defffc04 	addi	sp,sp,-16
81136698:	de00012e 	bgeu	sp,et,811366a0 <alt_msgdma_write_standard_descriptor+0xc>
8113669c:	003b68fa 	trap	3
811366a0:	df000315 	stw	fp,12(sp)
811366a4:	df000304 	addi	fp,sp,12
811366a8:	e13ffd15 	stw	r4,-12(fp)
811366ac:	e17ffe15 	stw	r5,-8(fp)
811366b0:	e1bfff15 	stw	r6,-4(fp)
811366b4:	e0bffd17 	ldw	r2,-12(fp)
811366b8:	10800037 	ldwio	r2,0(r2)
811366bc:	1080010c 	andi	r2,r2,4
811366c0:	10000226 	beq	r2,zero,811366cc <alt_msgdma_write_standard_descriptor+0x38>
811366c4:	00bff904 	movi	r2,-28
811366c8:	00001506 	br	81136720 <alt_msgdma_write_standard_descriptor+0x8c>
811366cc:	e0bfff17 	ldw	r2,-4(fp)
811366d0:	10800017 	ldw	r2,0(r2)
811366d4:	1007883a 	mov	r3,r2
811366d8:	e0bffe17 	ldw	r2,-8(fp)
811366dc:	10c00035 	stwio	r3,0(r2)
811366e0:	e0bffe17 	ldw	r2,-8(fp)
811366e4:	10800104 	addi	r2,r2,4
811366e8:	e0ffff17 	ldw	r3,-4(fp)
811366ec:	18c00117 	ldw	r3,4(r3)
811366f0:	10c00035 	stwio	r3,0(r2)
811366f4:	e0bffe17 	ldw	r2,-8(fp)
811366f8:	10800204 	addi	r2,r2,8
811366fc:	e0ffff17 	ldw	r3,-4(fp)
81136700:	18c00217 	ldw	r3,8(r3)
81136704:	10c00035 	stwio	r3,0(r2)
81136708:	e0bffe17 	ldw	r2,-8(fp)
8113670c:	10800304 	addi	r2,r2,12
81136710:	e0ffff17 	ldw	r3,-4(fp)
81136714:	18c00317 	ldw	r3,12(r3)
81136718:	10c00035 	stwio	r3,0(r2)
8113671c:	0005883a 	mov	r2,zero
81136720:	e037883a 	mov	sp,fp
81136724:	df000017 	ldw	fp,0(sp)
81136728:	dec00104 	addi	sp,sp,4
8113672c:	f800283a 	ret

81136730 <alt_msgdma_write_extended_descriptor>:
81136730:	defffc04 	addi	sp,sp,-16
81136734:	de00012e 	bgeu	sp,et,8113673c <alt_msgdma_write_extended_descriptor+0xc>
81136738:	003b68fa 	trap	3
8113673c:	df000315 	stw	fp,12(sp)
81136740:	df000304 	addi	fp,sp,12
81136744:	e13ffd15 	stw	r4,-12(fp)
81136748:	e17ffe15 	stw	r5,-8(fp)
8113674c:	e1bfff15 	stw	r6,-4(fp)
81136750:	e0bffd17 	ldw	r2,-12(fp)
81136754:	10800037 	ldwio	r2,0(r2)
81136758:	1080010c 	andi	r2,r2,4
8113675c:	10000226 	beq	r2,zero,81136768 <alt_msgdma_write_extended_descriptor+0x38>
81136760:	00bff904 	movi	r2,-28
81136764:	00003b06 	br	81136854 <alt_msgdma_write_extended_descriptor+0x124>
81136768:	e0bfff17 	ldw	r2,-4(fp)
8113676c:	10800017 	ldw	r2,0(r2)
81136770:	1007883a 	mov	r3,r2
81136774:	e0bffe17 	ldw	r2,-8(fp)
81136778:	10c00035 	stwio	r3,0(r2)
8113677c:	e0bffe17 	ldw	r2,-8(fp)
81136780:	10800104 	addi	r2,r2,4
81136784:	e0ffff17 	ldw	r3,-4(fp)
81136788:	18c00117 	ldw	r3,4(r3)
8113678c:	10c00035 	stwio	r3,0(r2)
81136790:	e0bffe17 	ldw	r2,-8(fp)
81136794:	10800204 	addi	r2,r2,8
81136798:	e0ffff17 	ldw	r3,-4(fp)
8113679c:	18c00217 	ldw	r3,8(r3)
811367a0:	10c00035 	stwio	r3,0(r2)
811367a4:	e0bffe17 	ldw	r2,-8(fp)
811367a8:	10800304 	addi	r2,r2,12
811367ac:	e0ffff17 	ldw	r3,-4(fp)
811367b0:	18c0030b 	ldhu	r3,12(r3)
811367b4:	18ffffcc 	andi	r3,r3,65535
811367b8:	10c0002d 	sthio	r3,0(r2)
811367bc:	e0bffe17 	ldw	r2,-8(fp)
811367c0:	10800384 	addi	r2,r2,14
811367c4:	e0ffff17 	ldw	r3,-4(fp)
811367c8:	18c00383 	ldbu	r3,14(r3)
811367cc:	18c03fcc 	andi	r3,r3,255
811367d0:	10c00025 	stbio	r3,0(r2)
811367d4:	e0bffe17 	ldw	r2,-8(fp)
811367d8:	108003c4 	addi	r2,r2,15
811367dc:	e0ffff17 	ldw	r3,-4(fp)
811367e0:	18c003c3 	ldbu	r3,15(r3)
811367e4:	18c03fcc 	andi	r3,r3,255
811367e8:	10c00025 	stbio	r3,0(r2)
811367ec:	e0bffe17 	ldw	r2,-8(fp)
811367f0:	10800404 	addi	r2,r2,16
811367f4:	e0ffff17 	ldw	r3,-4(fp)
811367f8:	18c0040b 	ldhu	r3,16(r3)
811367fc:	18ffffcc 	andi	r3,r3,65535
81136800:	10c0002d 	sthio	r3,0(r2)
81136804:	e0bffe17 	ldw	r2,-8(fp)
81136808:	10800484 	addi	r2,r2,18
8113680c:	e0ffff17 	ldw	r3,-4(fp)
81136810:	18c0048b 	ldhu	r3,18(r3)
81136814:	18ffffcc 	andi	r3,r3,65535
81136818:	10c0002d 	sthio	r3,0(r2)
8113681c:	e0bffe17 	ldw	r2,-8(fp)
81136820:	10800504 	addi	r2,r2,20
81136824:	0007883a 	mov	r3,zero
81136828:	10c00035 	stwio	r3,0(r2)
8113682c:	e0bffe17 	ldw	r2,-8(fp)
81136830:	10800604 	addi	r2,r2,24
81136834:	0007883a 	mov	r3,zero
81136838:	10c00035 	stwio	r3,0(r2)
8113683c:	e0bffe17 	ldw	r2,-8(fp)
81136840:	10800704 	addi	r2,r2,28
81136844:	e0ffff17 	ldw	r3,-4(fp)
81136848:	18c00717 	ldw	r3,28(r3)
8113684c:	10c00035 	stwio	r3,0(r2)
81136850:	0005883a 	mov	r2,zero
81136854:	e037883a 	mov	sp,fp
81136858:	df000017 	ldw	fp,0(sp)
8113685c:	dec00104 	addi	sp,sp,4
81136860:	f800283a 	ret

81136864 <alt_msgdma_irq>:
81136864:	defff804 	addi	sp,sp,-32
81136868:	de00012e 	bgeu	sp,et,81136870 <alt_msgdma_irq+0xc>
8113686c:	003b68fa 	trap	3
81136870:	dfc00715 	stw	ra,28(sp)
81136874:	df000615 	stw	fp,24(sp)
81136878:	df000604 	addi	fp,sp,24
8113687c:	e13fff15 	stw	r4,-4(fp)
81136880:	e0bfff17 	ldw	r2,-4(fp)
81136884:	e0bffa15 	stw	r2,-24(fp)
81136888:	e0bffa17 	ldw	r2,-24(fp)
8113688c:	10801783 	ldbu	r2,94(r2)
81136890:	10803fcc 	andi	r2,r2,255
81136894:	10001126 	beq	r2,zero,811368dc <alt_msgdma_irq+0x78>
81136898:	e0bffa17 	ldw	r2,-24(fp)
8113689c:	10800617 	ldw	r2,24(r2)
811368a0:	10800037 	ldwio	r2,0(r2)
811368a4:	1007883a 	mov	r3,r2
811368a8:	00bffdc4 	movi	r2,-9
811368ac:	1884703a 	and	r2,r3,r2
811368b0:	e0bffb15 	stw	r2,-20(fp)
811368b4:	e0bffa17 	ldw	r2,-24(fp)
811368b8:	10800617 	ldw	r2,24(r2)
811368bc:	e0fffb17 	ldw	r3,-20(fp)
811368c0:	10c00035 	stwio	r3,0(r2)
811368c4:	e0bffa17 	ldw	r2,-24(fp)
811368c8:	10800617 	ldw	r2,24(r2)
811368cc:	10800404 	addi	r2,r2,16
811368d0:	00c00044 	movi	r3,1
811368d4:	10c00035 	stwio	r3,0(r2)
811368d8:	00001106 	br	81136920 <alt_msgdma_irq+0xbc>
811368dc:	e0bffa17 	ldw	r2,-24(fp)
811368e0:	10800317 	ldw	r2,12(r2)
811368e4:	10800104 	addi	r2,r2,4
811368e8:	10800037 	ldwio	r2,0(r2)
811368ec:	1007883a 	mov	r3,r2
811368f0:	00bffbc4 	movi	r2,-17
811368f4:	1884703a 	and	r2,r3,r2
811368f8:	e0bffb15 	stw	r2,-20(fp)
811368fc:	e0bffa17 	ldw	r2,-24(fp)
81136900:	10800317 	ldw	r2,12(r2)
81136904:	10800104 	addi	r2,r2,4
81136908:	e0fffb17 	ldw	r3,-20(fp)
8113690c:	10c00035 	stwio	r3,0(r2)
81136910:	e0bffa17 	ldw	r2,-24(fp)
81136914:	10800317 	ldw	r2,12(r2)
81136918:	00c08004 	movi	r3,512
8113691c:	10c00035 	stwio	r3,0(r2)
81136920:	e0bffa17 	ldw	r2,-24(fp)
81136924:	10800b17 	ldw	r2,44(r2)
81136928:	10001226 	beq	r2,zero,81136974 <alt_msgdma_irq+0x110>
8113692c:	0005303a 	rdctl	r2,status
81136930:	e0bffd15 	stw	r2,-12(fp)
81136934:	e0fffd17 	ldw	r3,-12(fp)
81136938:	00bfff84 	movi	r2,-2
8113693c:	1884703a 	and	r2,r3,r2
81136940:	1001703a 	wrctl	status,r2
81136944:	e0bffd17 	ldw	r2,-12(fp)
81136948:	e0bffc15 	stw	r2,-16(fp)
8113694c:	e0bffa17 	ldw	r2,-24(fp)
81136950:	10800b17 	ldw	r2,44(r2)
81136954:	e0fffa17 	ldw	r3,-24(fp)
81136958:	18c00c17 	ldw	r3,48(r3)
8113695c:	1809883a 	mov	r4,r3
81136960:	103ee83a 	callr	r2
81136964:	e0bffc17 	ldw	r2,-16(fp)
81136968:	e0bffe15 	stw	r2,-8(fp)
8113696c:	e0bffe17 	ldw	r2,-8(fp)
81136970:	1001703a 	wrctl	status,r2
81136974:	e0bffa17 	ldw	r2,-24(fp)
81136978:	10801783 	ldbu	r2,94(r2)
8113697c:	10803fcc 	andi	r2,r2,255
81136980:	10000a26 	beq	r2,zero,811369ac <alt_msgdma_irq+0x148>
81136984:	e0bffa17 	ldw	r2,-24(fp)
81136988:	10800617 	ldw	r2,24(r2)
8113698c:	10800037 	ldwio	r2,0(r2)
81136990:	10800214 	ori	r2,r2,8
81136994:	e0bffb15 	stw	r2,-20(fp)
81136998:	e0bffa17 	ldw	r2,-24(fp)
8113699c:	10800617 	ldw	r2,24(r2)
811369a0:	e0fffb17 	ldw	r3,-20(fp)
811369a4:	10c00035 	stwio	r3,0(r2)
811369a8:	00000c06 	br	811369dc <alt_msgdma_irq+0x178>
811369ac:	e0bffa17 	ldw	r2,-24(fp)
811369b0:	10800317 	ldw	r2,12(r2)
811369b4:	10800104 	addi	r2,r2,4
811369b8:	10800037 	ldwio	r2,0(r2)
811369bc:	10800414 	ori	r2,r2,16
811369c0:	e0bffb15 	stw	r2,-20(fp)
811369c4:	e0bffa17 	ldw	r2,-24(fp)
811369c8:	10800317 	ldw	r2,12(r2)
811369cc:	10800104 	addi	r2,r2,4
811369d0:	e0fffb17 	ldw	r3,-20(fp)
811369d4:	10c00035 	stwio	r3,0(r2)
811369d8:	0001883a 	nop
811369dc:	e037883a 	mov	sp,fp
811369e0:	dfc00117 	ldw	ra,4(sp)
811369e4:	df000017 	ldw	fp,0(sp)
811369e8:	dec00204 	addi	sp,sp,8
811369ec:	f800283a 	ret

811369f0 <alt_msgdma_construct_standard_descriptor>:
811369f0:	defffb04 	addi	sp,sp,-20
811369f4:	de00012e 	bgeu	sp,et,811369fc <alt_msgdma_construct_standard_descriptor+0xc>
811369f8:	003b68fa 	trap	3
811369fc:	df000415 	stw	fp,16(sp)
81136a00:	df000404 	addi	fp,sp,16
81136a04:	e13ffc15 	stw	r4,-16(fp)
81136a08:	e17ffd15 	stw	r5,-12(fp)
81136a0c:	e1bffe15 	stw	r6,-8(fp)
81136a10:	e1ffff15 	stw	r7,-4(fp)
81136a14:	e0bffc17 	ldw	r2,-16(fp)
81136a18:	10c01217 	ldw	r3,72(r2)
81136a1c:	e0800117 	ldw	r2,4(fp)
81136a20:	18800436 	bltu	r3,r2,81136a34 <alt_msgdma_construct_standard_descriptor+0x44>
81136a24:	e0bffc17 	ldw	r2,-16(fp)
81136a28:	10801703 	ldbu	r2,92(r2)
81136a2c:	10803fcc 	andi	r2,r2,255
81136a30:	10000226 	beq	r2,zero,81136a3c <alt_msgdma_construct_standard_descriptor+0x4c>
81136a34:	00bffa84 	movi	r2,-22
81136a38:	00000e06 	br	81136a74 <alt_msgdma_construct_standard_descriptor+0x84>
81136a3c:	e0bffd17 	ldw	r2,-12(fp)
81136a40:	e0fffe17 	ldw	r3,-8(fp)
81136a44:	10c00015 	stw	r3,0(r2)
81136a48:	e0bffd17 	ldw	r2,-12(fp)
81136a4c:	e0ffff17 	ldw	r3,-4(fp)
81136a50:	10c00115 	stw	r3,4(r2)
81136a54:	e0bffd17 	ldw	r2,-12(fp)
81136a58:	e0c00117 	ldw	r3,4(fp)
81136a5c:	10c00215 	stw	r3,8(r2)
81136a60:	e0800217 	ldw	r2,8(fp)
81136a64:	10e00034 	orhi	r3,r2,32768
81136a68:	e0bffd17 	ldw	r2,-12(fp)
81136a6c:	10c00315 	stw	r3,12(r2)
81136a70:	0005883a 	mov	r2,zero
81136a74:	e037883a 	mov	sp,fp
81136a78:	df000017 	ldw	fp,0(sp)
81136a7c:	dec00104 	addi	sp,sp,4
81136a80:	f800283a 	ret

81136a84 <alt_msgdma_construct_extended_descriptor>:
81136a84:	defff604 	addi	sp,sp,-40
81136a88:	de00012e 	bgeu	sp,et,81136a90 <alt_msgdma_construct_extended_descriptor+0xc>
81136a8c:	003b68fa 	trap	3
81136a90:	df000915 	stw	fp,36(sp)
81136a94:	df000904 	addi	fp,sp,36
81136a98:	e13ff715 	stw	r4,-36(fp)
81136a9c:	e17ff815 	stw	r5,-32(fp)
81136aa0:	e1bff915 	stw	r6,-28(fp)
81136aa4:	e1fffa15 	stw	r7,-24(fp)
81136aa8:	e1800317 	ldw	r6,12(fp)
81136aac:	e1400417 	ldw	r5,16(fp)
81136ab0:	e1000517 	ldw	r4,20(fp)
81136ab4:	e0c00617 	ldw	r3,24(fp)
81136ab8:	e0800717 	ldw	r2,28(fp)
81136abc:	e1bffb0d 	sth	r6,-20(fp)
81136ac0:	e17ffc05 	stb	r5,-16(fp)
81136ac4:	e13ffd05 	stb	r4,-12(fp)
81136ac8:	e0fffe0d 	sth	r3,-8(fp)
81136acc:	e0bfff0d 	sth	r2,-4(fp)
81136ad0:	e0bff717 	ldw	r2,-36(fp)
81136ad4:	10c01217 	ldw	r3,72(r2)
81136ad8:	e0800117 	ldw	r2,4(fp)
81136adc:	18801936 	bltu	r3,r2,81136b44 <alt_msgdma_construct_extended_descriptor+0xc0>
81136ae0:	e13ff717 	ldw	r4,-36(fp)
81136ae4:	20801317 	ldw	r2,76(r4)
81136ae8:	20c01417 	ldw	r3,80(r4)
81136aec:	e13ffe0b 	ldhu	r4,-8(fp)
81136af0:	213fffcc 	andi	r4,r4,65535
81136af4:	2015883a 	mov	r10,r4
81136af8:	0017883a 	mov	r11,zero
81136afc:	1ac01136 	bltu	r3,r11,81136b44 <alt_msgdma_construct_extended_descriptor+0xc0>
81136b00:	58c0011e 	bne	r11,r3,81136b08 <alt_msgdma_construct_extended_descriptor+0x84>
81136b04:	12800f36 	bltu	r2,r10,81136b44 <alt_msgdma_construct_extended_descriptor+0xc0>
81136b08:	e13ff717 	ldw	r4,-36(fp)
81136b0c:	20801317 	ldw	r2,76(r4)
81136b10:	20c01417 	ldw	r3,80(r4)
81136b14:	e13fff0b 	ldhu	r4,-4(fp)
81136b18:	213fffcc 	andi	r4,r4,65535
81136b1c:	2011883a 	mov	r8,r4
81136b20:	0013883a 	mov	r9,zero
81136b24:	1a400736 	bltu	r3,r9,81136b44 <alt_msgdma_construct_extended_descriptor+0xc0>
81136b28:	48c0011e 	bne	r9,r3,81136b30 <alt_msgdma_construct_extended_descriptor+0xac>
81136b2c:	12000536 	bltu	r2,r8,81136b44 <alt_msgdma_construct_extended_descriptor+0xc0>
81136b30:	e0bff717 	ldw	r2,-36(fp)
81136b34:	10801703 	ldbu	r2,92(r2)
81136b38:	10803fcc 	andi	r2,r2,255
81136b3c:	10800060 	cmpeqi	r2,r2,1
81136b40:	1000021e 	bne	r2,zero,81136b4c <alt_msgdma_construct_extended_descriptor+0xc8>
81136b44:	00bffa84 	movi	r2,-22
81136b48:	00002106 	br	81136bd0 <alt_msgdma_construct_extended_descriptor+0x14c>
81136b4c:	e0bff817 	ldw	r2,-32(fp)
81136b50:	e0fff917 	ldw	r3,-28(fp)
81136b54:	10c00015 	stw	r3,0(r2)
81136b58:	e0bff817 	ldw	r2,-32(fp)
81136b5c:	e0fffa17 	ldw	r3,-24(fp)
81136b60:	10c00115 	stw	r3,4(r2)
81136b64:	e0bff817 	ldw	r2,-32(fp)
81136b68:	e0c00117 	ldw	r3,4(fp)
81136b6c:	10c00215 	stw	r3,8(r2)
81136b70:	e0bff817 	ldw	r2,-32(fp)
81136b74:	e0fffb0b 	ldhu	r3,-20(fp)
81136b78:	10c0030d 	sth	r3,12(r2)
81136b7c:	e0bff817 	ldw	r2,-32(fp)
81136b80:	e0fffc03 	ldbu	r3,-16(fp)
81136b84:	10c00385 	stb	r3,14(r2)
81136b88:	e0bff817 	ldw	r2,-32(fp)
81136b8c:	e0fffd03 	ldbu	r3,-12(fp)
81136b90:	10c003c5 	stb	r3,15(r2)
81136b94:	e0bff817 	ldw	r2,-32(fp)
81136b98:	e0fffe0b 	ldhu	r3,-8(fp)
81136b9c:	10c0040d 	sth	r3,16(r2)
81136ba0:	e0bff817 	ldw	r2,-32(fp)
81136ba4:	e0ffff0b 	ldhu	r3,-4(fp)
81136ba8:	10c0048d 	sth	r3,18(r2)
81136bac:	e0bff817 	ldw	r2,-32(fp)
81136bb0:	10000515 	stw	zero,20(r2)
81136bb4:	e0bff817 	ldw	r2,-32(fp)
81136bb8:	10000615 	stw	zero,24(r2)
81136bbc:	e0800217 	ldw	r2,8(fp)
81136bc0:	10e00034 	orhi	r3,r2,32768
81136bc4:	e0bff817 	ldw	r2,-32(fp)
81136bc8:	10c00715 	stw	r3,28(r2)
81136bcc:	0005883a 	mov	r2,zero
81136bd0:	e037883a 	mov	sp,fp
81136bd4:	df000017 	ldw	fp,0(sp)
81136bd8:	dec00104 	addi	sp,sp,4
81136bdc:	f800283a 	ret

81136be0 <alt_msgdma_descriptor_async_transfer>:
81136be0:	deffee04 	addi	sp,sp,-72
81136be4:	de00012e 	bgeu	sp,et,81136bec <alt_msgdma_descriptor_async_transfer+0xc>
81136be8:	003b68fa 	trap	3
81136bec:	dfc01115 	stw	ra,68(sp)
81136bf0:	df001015 	stw	fp,64(sp)
81136bf4:	df001004 	addi	fp,sp,64
81136bf8:	e13ffd15 	stw	r4,-12(fp)
81136bfc:	e17ffe15 	stw	r5,-8(fp)
81136c00:	e1bfff15 	stw	r6,-4(fp)
81136c04:	e03ff115 	stw	zero,-60(fp)
81136c08:	e03ff215 	stw	zero,-56(fp)
81136c0c:	e03ff00d 	sth	zero,-64(fp)
81136c10:	e0bffd17 	ldw	r2,-12(fp)
81136c14:	10800317 	ldw	r2,12(r2)
81136c18:	10800204 	addi	r2,r2,8
81136c1c:	10800037 	ldwio	r2,0(r2)
81136c20:	10bfffcc 	andi	r2,r2,65535
81136c24:	e0bff315 	stw	r2,-52(fp)
81136c28:	e0bffd17 	ldw	r2,-12(fp)
81136c2c:	10800317 	ldw	r2,12(r2)
81136c30:	10800204 	addi	r2,r2,8
81136c34:	10800037 	ldwio	r2,0(r2)
81136c38:	1004d43a 	srli	r2,r2,16
81136c3c:	e0bff415 	stw	r2,-48(fp)
81136c40:	e0bffd17 	ldw	r2,-12(fp)
81136c44:	10800917 	ldw	r2,36(r2)
81136c48:	e0fff417 	ldw	r3,-48(fp)
81136c4c:	1880042e 	bgeu	r3,r2,81136c60 <alt_msgdma_descriptor_async_transfer+0x80>
81136c50:	e0bffd17 	ldw	r2,-12(fp)
81136c54:	10800917 	ldw	r2,36(r2)
81136c58:	e0fff317 	ldw	r3,-52(fp)
81136c5c:	18800236 	bltu	r3,r2,81136c68 <alt_msgdma_descriptor_async_transfer+0x88>
81136c60:	00bff904 	movi	r2,-28
81136c64:	0000a906 	br	81136f0c <alt_msgdma_descriptor_async_transfer+0x32c>
81136c68:	e0bffd17 	ldw	r2,-12(fp)
81136c6c:	10801817 	ldw	r2,96(r2)
81136c70:	e0bff615 	stw	r2,-40(fp)
81136c74:	e03ffc0d 	sth	zero,-16(fp)
81136c78:	e0bffc0b 	ldhu	r2,-16(fp)
81136c7c:	e0fffc84 	addi	r3,fp,-14
81136c80:	180d883a 	mov	r6,r3
81136c84:	100b883a 	mov	r5,r2
81136c88:	e13ff617 	ldw	r4,-40(fp)
81136c8c:	112d1ec0 	call	8112d1ec <OSSemPend>
81136c90:	00800804 	movi	r2,32
81136c94:	e0bff115 	stw	r2,-60(fp)
81136c98:	0005303a 	rdctl	r2,status
81136c9c:	e0bff715 	stw	r2,-36(fp)
81136ca0:	e0fff717 	ldw	r3,-36(fp)
81136ca4:	00bfff84 	movi	r2,-2
81136ca8:	1884703a 	and	r2,r3,r2
81136cac:	1001703a 	wrctl	status,r2
81136cb0:	e0bff717 	ldw	r2,-36(fp)
81136cb4:	e0bff215 	stw	r2,-56(fp)
81136cb8:	e0bffd17 	ldw	r2,-12(fp)
81136cbc:	10800317 	ldw	r2,12(r2)
81136cc0:	10800104 	addi	r2,r2,4
81136cc4:	e0fff117 	ldw	r3,-60(fp)
81136cc8:	10c00035 	stwio	r3,0(r2)
81136ccc:	e0bffd17 	ldw	r2,-12(fp)
81136cd0:	10800317 	ldw	r2,12(r2)
81136cd4:	e0fffd17 	ldw	r3,-12(fp)
81136cd8:	18c00317 	ldw	r3,12(r3)
81136cdc:	18c00037 	ldwio	r3,0(r3)
81136ce0:	10c00035 	stwio	r3,0(r2)
81136ce4:	e0bff217 	ldw	r2,-56(fp)
81136ce8:	e0bffb15 	stw	r2,-20(fp)
81136cec:	e0bffb17 	ldw	r2,-20(fp)
81136cf0:	1001703a 	wrctl	status,r2
81136cf4:	e0bffe17 	ldw	r2,-8(fp)
81136cf8:	10001e26 	beq	r2,zero,81136d74 <alt_msgdma_descriptor_async_transfer+0x194>
81136cfc:	e0bfff17 	ldw	r2,-4(fp)
81136d00:	10001c1e 	bne	r2,zero,81136d74 <alt_msgdma_descriptor_async_transfer+0x194>
81136d04:	00001106 	br	81136d4c <alt_msgdma_descriptor_async_transfer+0x16c>
81136d08:	01000044 	movi	r4,1
81136d0c:	11254a00 	call	811254a0 <alt_busy_sleep>
81136d10:	e0bff00b 	ldhu	r2,-64(fp)
81136d14:	1084e230 	cmpltui	r2,r2,5000
81136d18:	1000091e 	bne	r2,zero,81136d40 <alt_msgdma_descriptor_async_transfer+0x160>
81136d1c:	01204534 	movhi	r4,33044
81136d20:	21328604 	addi	r4,r4,-13800
81136d24:	11391040 	call	81139104 <alt_printf>
81136d28:	e0bffd17 	ldw	r2,-12(fp)
81136d2c:	10801817 	ldw	r2,96(r2)
81136d30:	1009883a 	mov	r4,r2
81136d34:	112d5740 	call	8112d574 <OSSemPost>
81136d38:	00bff084 	movi	r2,-62
81136d3c:	00007306 	br	81136f0c <alt_msgdma_descriptor_async_transfer+0x32c>
81136d40:	e0bff00b 	ldhu	r2,-64(fp)
81136d44:	10800044 	addi	r2,r2,1
81136d48:	e0bff00d 	sth	r2,-64(fp)
81136d4c:	e0bffd17 	ldw	r2,-12(fp)
81136d50:	10c00317 	ldw	r3,12(r2)
81136d54:	e0bffd17 	ldw	r2,-12(fp)
81136d58:	10800417 	ldw	r2,16(r2)
81136d5c:	e1bffe17 	ldw	r6,-8(fp)
81136d60:	100b883a 	mov	r5,r2
81136d64:	1809883a 	mov	r4,r3
81136d68:	11366940 	call	81136694 <alt_msgdma_write_standard_descriptor>
81136d6c:	103fe61e 	bne	r2,zero,81136d08 <__reset+0xfb116d08>
81136d70:	00002706 	br	81136e10 <alt_msgdma_descriptor_async_transfer+0x230>
81136d74:	e0bffe17 	ldw	r2,-8(fp)
81136d78:	10001f1e 	bne	r2,zero,81136df8 <alt_msgdma_descriptor_async_transfer+0x218>
81136d7c:	e0bfff17 	ldw	r2,-4(fp)
81136d80:	10001d26 	beq	r2,zero,81136df8 <alt_msgdma_descriptor_async_transfer+0x218>
81136d84:	e03ff00d 	sth	zero,-64(fp)
81136d88:	00001106 	br	81136dd0 <alt_msgdma_descriptor_async_transfer+0x1f0>
81136d8c:	01000044 	movi	r4,1
81136d90:	11254a00 	call	811254a0 <alt_busy_sleep>
81136d94:	e0bff00b 	ldhu	r2,-64(fp)
81136d98:	1084e230 	cmpltui	r2,r2,5000
81136d9c:	1000091e 	bne	r2,zero,81136dc4 <alt_msgdma_descriptor_async_transfer+0x1e4>
81136da0:	01204534 	movhi	r4,33044
81136da4:	21329c04 	addi	r4,r4,-13712
81136da8:	11391040 	call	81139104 <alt_printf>
81136dac:	e0bffd17 	ldw	r2,-12(fp)
81136db0:	10801817 	ldw	r2,96(r2)
81136db4:	1009883a 	mov	r4,r2
81136db8:	112d5740 	call	8112d574 <OSSemPost>
81136dbc:	00bff084 	movi	r2,-62
81136dc0:	00005206 	br	81136f0c <alt_msgdma_descriptor_async_transfer+0x32c>
81136dc4:	e0bff00b 	ldhu	r2,-64(fp)
81136dc8:	10800044 	addi	r2,r2,1
81136dcc:	e0bff00d 	sth	r2,-64(fp)
81136dd0:	e0bffd17 	ldw	r2,-12(fp)
81136dd4:	10c00317 	ldw	r3,12(r2)
81136dd8:	e0bffd17 	ldw	r2,-12(fp)
81136ddc:	10800417 	ldw	r2,16(r2)
81136de0:	e1bfff17 	ldw	r6,-4(fp)
81136de4:	100b883a 	mov	r5,r2
81136de8:	1809883a 	mov	r4,r3
81136dec:	11367300 	call	81136730 <alt_msgdma_write_extended_descriptor>
81136df0:	103fe61e 	bne	r2,zero,81136d8c <__reset+0xfb116d8c>
81136df4:	00000606 	br	81136e10 <alt_msgdma_descriptor_async_transfer+0x230>
81136df8:	e0bffd17 	ldw	r2,-12(fp)
81136dfc:	10801817 	ldw	r2,96(r2)
81136e00:	1009883a 	mov	r4,r2
81136e04:	112d5740 	call	8112d574 <OSSemPost>
81136e08:	00bfffc4 	movi	r2,-1
81136e0c:	00003f06 	br	81136f0c <alt_msgdma_descriptor_async_transfer+0x32c>
81136e10:	e0bffd17 	ldw	r2,-12(fp)
81136e14:	10800b17 	ldw	r2,44(r2)
81136e18:	10001c26 	beq	r2,zero,81136e8c <alt_msgdma_descriptor_async_transfer+0x2ac>
81136e1c:	e0bffd17 	ldw	r2,-12(fp)
81136e20:	10c00d17 	ldw	r3,52(r2)
81136e24:	e0bff117 	ldw	r2,-60(fp)
81136e28:	1884b03a 	or	r2,r3,r2
81136e2c:	10800514 	ori	r2,r2,20
81136e30:	e0bff115 	stw	r2,-60(fp)
81136e34:	e0fff117 	ldw	r3,-60(fp)
81136e38:	00bff7c4 	movi	r2,-33
81136e3c:	1884703a 	and	r2,r3,r2
81136e40:	e0bff115 	stw	r2,-60(fp)
81136e44:	0005303a 	rdctl	r2,status
81136e48:	e0bff915 	stw	r2,-28(fp)
81136e4c:	e0fff917 	ldw	r3,-28(fp)
81136e50:	00bfff84 	movi	r2,-2
81136e54:	1884703a 	and	r2,r3,r2
81136e58:	1001703a 	wrctl	status,r2
81136e5c:	e0bff917 	ldw	r2,-28(fp)
81136e60:	e0bff215 	stw	r2,-56(fp)
81136e64:	e0bffd17 	ldw	r2,-12(fp)
81136e68:	10800317 	ldw	r2,12(r2)
81136e6c:	10800104 	addi	r2,r2,4
81136e70:	e0fff117 	ldw	r3,-60(fp)
81136e74:	10c00035 	stwio	r3,0(r2)
81136e78:	e0bff217 	ldw	r2,-56(fp)
81136e7c:	e0bff515 	stw	r2,-44(fp)
81136e80:	e0bff517 	ldw	r2,-44(fp)
81136e84:	1001703a 	wrctl	status,r2
81136e88:	00001b06 	br	81136ef8 <alt_msgdma_descriptor_async_transfer+0x318>
81136e8c:	e0bffd17 	ldw	r2,-12(fp)
81136e90:	10c00d17 	ldw	r3,52(r2)
81136e94:	e0bff117 	ldw	r2,-60(fp)
81136e98:	1884b03a 	or	r2,r3,r2
81136e9c:	10800114 	ori	r2,r2,4
81136ea0:	e0bff115 	stw	r2,-60(fp)
81136ea4:	e0fff117 	ldw	r3,-60(fp)
81136ea8:	00bff3c4 	movi	r2,-49
81136eac:	1884703a 	and	r2,r3,r2
81136eb0:	e0bff115 	stw	r2,-60(fp)
81136eb4:	0005303a 	rdctl	r2,status
81136eb8:	e0bffa15 	stw	r2,-24(fp)
81136ebc:	e0fffa17 	ldw	r3,-24(fp)
81136ec0:	00bfff84 	movi	r2,-2
81136ec4:	1884703a 	and	r2,r3,r2
81136ec8:	1001703a 	wrctl	status,r2
81136ecc:	e0bffa17 	ldw	r2,-24(fp)
81136ed0:	e0bff215 	stw	r2,-56(fp)
81136ed4:	e0bffd17 	ldw	r2,-12(fp)
81136ed8:	10800317 	ldw	r2,12(r2)
81136edc:	10800104 	addi	r2,r2,4
81136ee0:	e0fff117 	ldw	r3,-60(fp)
81136ee4:	10c00035 	stwio	r3,0(r2)
81136ee8:	e0bff217 	ldw	r2,-56(fp)
81136eec:	e0bff815 	stw	r2,-32(fp)
81136ef0:	e0bff817 	ldw	r2,-32(fp)
81136ef4:	1001703a 	wrctl	status,r2
81136ef8:	e0bffd17 	ldw	r2,-12(fp)
81136efc:	10801817 	ldw	r2,96(r2)
81136f00:	1009883a 	mov	r4,r2
81136f04:	112d5740 	call	8112d574 <OSSemPost>
81136f08:	0005883a 	mov	r2,zero
81136f0c:	e037883a 	mov	sp,fp
81136f10:	dfc00117 	ldw	ra,4(sp)
81136f14:	df000017 	ldw	fp,0(sp)
81136f18:	dec00204 	addi	sp,sp,8
81136f1c:	f800283a 	ret

81136f20 <alt_msgdma_descriptor_sync_transfer>:
81136f20:	deffee04 	addi	sp,sp,-72
81136f24:	de00012e 	bgeu	sp,et,81136f2c <alt_msgdma_descriptor_sync_transfer+0xc>
81136f28:	003b68fa 	trap	3
81136f2c:	dfc01115 	stw	ra,68(sp)
81136f30:	df001015 	stw	fp,64(sp)
81136f34:	df001004 	addi	fp,sp,64
81136f38:	e13ffd15 	stw	r4,-12(fp)
81136f3c:	e17ffe15 	stw	r5,-8(fp)
81136f40:	e1bfff15 	stw	r6,-4(fp)
81136f44:	e03ff415 	stw	zero,-48(fp)
81136f48:	e03ff515 	stw	zero,-44(fp)
81136f4c:	e03ff015 	stw	zero,-64(fp)
81136f50:	e03ff10d 	sth	zero,-60(fp)
81136f54:	e0bffd17 	ldw	r2,-12(fp)
81136f58:	10800317 	ldw	r2,12(r2)
81136f5c:	10800204 	addi	r2,r2,8
81136f60:	10800037 	ldwio	r2,0(r2)
81136f64:	10bfffcc 	andi	r2,r2,65535
81136f68:	e0bff215 	stw	r2,-56(fp)
81136f6c:	e0bffd17 	ldw	r2,-12(fp)
81136f70:	10800317 	ldw	r2,12(r2)
81136f74:	10800204 	addi	r2,r2,8
81136f78:	10800037 	ldwio	r2,0(r2)
81136f7c:	1004d43a 	srli	r2,r2,16
81136f80:	e0bff315 	stw	r2,-52(fp)
81136f84:	00807804 	movi	r2,480
81136f88:	e0bff615 	stw	r2,-40(fp)
81136f8c:	00001906 	br	81136ff4 <alt_msgdma_descriptor_sync_transfer+0xd4>
81136f90:	01000044 	movi	r4,1
81136f94:	11254a00 	call	811254a0 <alt_busy_sleep>
81136f98:	e0bff10b 	ldhu	r2,-60(fp)
81136f9c:	1084e230 	cmpltui	r2,r2,5000
81136fa0:	1000051e 	bne	r2,zero,81136fb8 <alt_msgdma_descriptor_sync_transfer+0x98>
81136fa4:	01204534 	movhi	r4,33044
81136fa8:	2132b204 	addi	r4,r4,-13624
81136fac:	11391040 	call	81139104 <alt_printf>
81136fb0:	00bff084 	movi	r2,-62
81136fb4:	0000d706 	br	81137314 <alt_msgdma_descriptor_sync_transfer+0x3f4>
81136fb8:	e0bff10b 	ldhu	r2,-60(fp)
81136fbc:	10800044 	addi	r2,r2,1
81136fc0:	e0bff10d 	sth	r2,-60(fp)
81136fc4:	e0bffd17 	ldw	r2,-12(fp)
81136fc8:	10800317 	ldw	r2,12(r2)
81136fcc:	10800204 	addi	r2,r2,8
81136fd0:	10800037 	ldwio	r2,0(r2)
81136fd4:	10bfffcc 	andi	r2,r2,65535
81136fd8:	e0bff215 	stw	r2,-56(fp)
81136fdc:	e0bffd17 	ldw	r2,-12(fp)
81136fe0:	10800317 	ldw	r2,12(r2)
81136fe4:	10800204 	addi	r2,r2,8
81136fe8:	10800037 	ldwio	r2,0(r2)
81136fec:	1004d43a 	srli	r2,r2,16
81136ff0:	e0bff315 	stw	r2,-52(fp)
81136ff4:	e0bffd17 	ldw	r2,-12(fp)
81136ff8:	10800917 	ldw	r2,36(r2)
81136ffc:	e0fff317 	ldw	r3,-52(fp)
81137000:	18bfe32e 	bgeu	r3,r2,81136f90 <__reset+0xfb116f90>
81137004:	e0bffd17 	ldw	r2,-12(fp)
81137008:	10800917 	ldw	r2,36(r2)
8113700c:	e0fff217 	ldw	r3,-56(fp)
81137010:	18bfdf2e 	bgeu	r3,r2,81136f90 <__reset+0xfb116f90>
81137014:	e0bffd17 	ldw	r2,-12(fp)
81137018:	10801817 	ldw	r2,96(r2)
8113701c:	e0bff815 	stw	r2,-32(fp)
81137020:	e03ffc0d 	sth	zero,-16(fp)
81137024:	e0bffc0b 	ldhu	r2,-16(fp)
81137028:	e0fffc84 	addi	r3,fp,-14
8113702c:	180d883a 	mov	r6,r3
81137030:	100b883a 	mov	r5,r2
81137034:	e13ff817 	ldw	r4,-32(fp)
81137038:	112d1ec0 	call	8112d1ec <OSSemPend>
8113703c:	0005303a 	rdctl	r2,status
81137040:	e0bffb15 	stw	r2,-20(fp)
81137044:	e0fffb17 	ldw	r3,-20(fp)
81137048:	00bfff84 	movi	r2,-2
8113704c:	1884703a 	and	r2,r3,r2
81137050:	1001703a 	wrctl	status,r2
81137054:	e0bffb17 	ldw	r2,-20(fp)
81137058:	e0bff515 	stw	r2,-44(fp)
8113705c:	e0bffd17 	ldw	r2,-12(fp)
81137060:	10800317 	ldw	r2,12(r2)
81137064:	10800104 	addi	r2,r2,4
81137068:	00c00804 	movi	r3,32
8113706c:	10c00035 	stwio	r3,0(r2)
81137070:	e0bffd17 	ldw	r2,-12(fp)
81137074:	10800317 	ldw	r2,12(r2)
81137078:	e0fffd17 	ldw	r3,-12(fp)
8113707c:	18c00317 	ldw	r3,12(r3)
81137080:	18c00037 	ldwio	r3,0(r3)
81137084:	10c00035 	stwio	r3,0(r2)
81137088:	e0bffe17 	ldw	r2,-8(fp)
8113708c:	10001f26 	beq	r2,zero,8113710c <alt_msgdma_descriptor_sync_transfer+0x1ec>
81137090:	e0bfff17 	ldw	r2,-4(fp)
81137094:	10001d1e 	bne	r2,zero,8113710c <alt_msgdma_descriptor_sync_transfer+0x1ec>
81137098:	e03ff10d 	sth	zero,-60(fp)
8113709c:	00001106 	br	811370e4 <alt_msgdma_descriptor_sync_transfer+0x1c4>
811370a0:	01000044 	movi	r4,1
811370a4:	11254a00 	call	811254a0 <alt_busy_sleep>
811370a8:	e0bff10b 	ldhu	r2,-60(fp)
811370ac:	1084e230 	cmpltui	r2,r2,5000
811370b0:	1000091e 	bne	r2,zero,811370d8 <alt_msgdma_descriptor_sync_transfer+0x1b8>
811370b4:	01204534 	movhi	r4,33044
811370b8:	2132c604 	addi	r4,r4,-13544
811370bc:	11391040 	call	81139104 <alt_printf>
811370c0:	e0bffd17 	ldw	r2,-12(fp)
811370c4:	10801817 	ldw	r2,96(r2)
811370c8:	1009883a 	mov	r4,r2
811370cc:	112d5740 	call	8112d574 <OSSemPost>
811370d0:	00bff084 	movi	r2,-62
811370d4:	00008f06 	br	81137314 <alt_msgdma_descriptor_sync_transfer+0x3f4>
811370d8:	e0bff10b 	ldhu	r2,-60(fp)
811370dc:	10800044 	addi	r2,r2,1
811370e0:	e0bff10d 	sth	r2,-60(fp)
811370e4:	e0bffd17 	ldw	r2,-12(fp)
811370e8:	10c00317 	ldw	r3,12(r2)
811370ec:	e0bffd17 	ldw	r2,-12(fp)
811370f0:	10800417 	ldw	r2,16(r2)
811370f4:	e1bffe17 	ldw	r6,-8(fp)
811370f8:	100b883a 	mov	r5,r2
811370fc:	1809883a 	mov	r4,r3
81137100:	11366940 	call	81136694 <alt_msgdma_write_standard_descriptor>
81137104:	103fe61e 	bne	r2,zero,811370a0 <__reset+0xfb1170a0>
81137108:	00002706 	br	811371a8 <alt_msgdma_descriptor_sync_transfer+0x288>
8113710c:	e0bffe17 	ldw	r2,-8(fp)
81137110:	10001f1e 	bne	r2,zero,81137190 <alt_msgdma_descriptor_sync_transfer+0x270>
81137114:	e0bfff17 	ldw	r2,-4(fp)
81137118:	10001d26 	beq	r2,zero,81137190 <alt_msgdma_descriptor_sync_transfer+0x270>
8113711c:	e03ff10d 	sth	zero,-60(fp)
81137120:	00001106 	br	81137168 <alt_msgdma_descriptor_sync_transfer+0x248>
81137124:	01000044 	movi	r4,1
81137128:	11254a00 	call	811254a0 <alt_busy_sleep>
8113712c:	e0bff10b 	ldhu	r2,-60(fp)
81137130:	1084e230 	cmpltui	r2,r2,5000
81137134:	1000091e 	bne	r2,zero,8113715c <alt_msgdma_descriptor_sync_transfer+0x23c>
81137138:	01204534 	movhi	r4,33044
8113713c:	2132d704 	addi	r4,r4,-13476
81137140:	11391040 	call	81139104 <alt_printf>
81137144:	e0bffd17 	ldw	r2,-12(fp)
81137148:	10801817 	ldw	r2,96(r2)
8113714c:	1009883a 	mov	r4,r2
81137150:	112d5740 	call	8112d574 <OSSemPost>
81137154:	00bff084 	movi	r2,-62
81137158:	00006e06 	br	81137314 <alt_msgdma_descriptor_sync_transfer+0x3f4>
8113715c:	e0bff10b 	ldhu	r2,-60(fp)
81137160:	10800044 	addi	r2,r2,1
81137164:	e0bff10d 	sth	r2,-60(fp)
81137168:	e0bffd17 	ldw	r2,-12(fp)
8113716c:	10c00317 	ldw	r3,12(r2)
81137170:	e0bffd17 	ldw	r2,-12(fp)
81137174:	10800417 	ldw	r2,16(r2)
81137178:	e1bfff17 	ldw	r6,-4(fp)
8113717c:	100b883a 	mov	r5,r2
81137180:	1809883a 	mov	r4,r3
81137184:	11367300 	call	81136730 <alt_msgdma_write_extended_descriptor>
81137188:	103fe61e 	bne	r2,zero,81137124 <__reset+0xfb117124>
8113718c:	00000606 	br	811371a8 <alt_msgdma_descriptor_sync_transfer+0x288>
81137190:	e0bffd17 	ldw	r2,-12(fp)
81137194:	10801817 	ldw	r2,96(r2)
81137198:	1009883a 	mov	r4,r2
8113719c:	112d5740 	call	8112d574 <OSSemPost>
811371a0:	00bfffc4 	movi	r2,-1
811371a4:	00005b06 	br	81137314 <alt_msgdma_descriptor_sync_transfer+0x3f4>
811371a8:	e0bffd17 	ldw	r2,-12(fp)
811371ac:	10800317 	ldw	r2,12(r2)
811371b0:	10800104 	addi	r2,r2,4
811371b4:	e0fffd17 	ldw	r3,-12(fp)
811371b8:	19000d17 	ldw	r4,52(r3)
811371bc:	00fff2c4 	movi	r3,-53
811371c0:	20c6703a 	and	r3,r4,r3
811371c4:	18c00114 	ori	r3,r3,4
811371c8:	10c00035 	stwio	r3,0(r2)
811371cc:	e0bff517 	ldw	r2,-44(fp)
811371d0:	e0bff715 	stw	r2,-36(fp)
811371d4:	e0bff717 	ldw	r2,-36(fp)
811371d8:	1001703a 	wrctl	status,r2
811371dc:	e03ff10d 	sth	zero,-60(fp)
811371e0:	e0bffd17 	ldw	r2,-12(fp)
811371e4:	10800317 	ldw	r2,12(r2)
811371e8:	10800037 	ldwio	r2,0(r2)
811371ec:	e0bff015 	stw	r2,-64(fp)
811371f0:	00001506 	br	81137248 <alt_msgdma_descriptor_sync_transfer+0x328>
811371f4:	01000044 	movi	r4,1
811371f8:	11254a00 	call	811254a0 <alt_busy_sleep>
811371fc:	e0bff10b 	ldhu	r2,-60(fp)
81137200:	1084e230 	cmpltui	r2,r2,5000
81137204:	1000091e 	bne	r2,zero,8113722c <alt_msgdma_descriptor_sync_transfer+0x30c>
81137208:	01204534 	movhi	r4,33044
8113720c:	2132e804 	addi	r4,r4,-13408
81137210:	11391040 	call	81139104 <alt_printf>
81137214:	e0bffd17 	ldw	r2,-12(fp)
81137218:	10801817 	ldw	r2,96(r2)
8113721c:	1009883a 	mov	r4,r2
81137220:	112d5740 	call	8112d574 <OSSemPost>
81137224:	00bff084 	movi	r2,-62
81137228:	00003a06 	br	81137314 <alt_msgdma_descriptor_sync_transfer+0x3f4>
8113722c:	e0bff10b 	ldhu	r2,-60(fp)
81137230:	10800044 	addi	r2,r2,1
81137234:	e0bff10d 	sth	r2,-60(fp)
81137238:	e0bffd17 	ldw	r2,-12(fp)
8113723c:	10800317 	ldw	r2,12(r2)
81137240:	10800037 	ldwio	r2,0(r2)
81137244:	e0bff015 	stw	r2,-64(fp)
81137248:	e0fff017 	ldw	r3,-64(fp)
8113724c:	e0bff617 	ldw	r2,-40(fp)
81137250:	1884703a 	and	r2,r3,r2
81137254:	1000031e 	bne	r2,zero,81137264 <alt_msgdma_descriptor_sync_transfer+0x344>
81137258:	e0bff017 	ldw	r2,-64(fp)
8113725c:	1080004c 	andi	r2,r2,1
81137260:	103fe41e 	bne	r2,zero,811371f4 <__reset+0xfb1171f4>
81137264:	e0fff017 	ldw	r3,-64(fp)
81137268:	e0bff617 	ldw	r2,-40(fp)
8113726c:	1884703a 	and	r2,r3,r2
81137270:	10000626 	beq	r2,zero,8113728c <alt_msgdma_descriptor_sync_transfer+0x36c>
81137274:	e0bffd17 	ldw	r2,-12(fp)
81137278:	10801817 	ldw	r2,96(r2)
8113727c:	1009883a 	mov	r4,r2
81137280:	112d5740 	call	8112d574 <OSSemPost>
81137284:	e0bff617 	ldw	r2,-40(fp)
81137288:	00002206 	br	81137314 <alt_msgdma_descriptor_sync_transfer+0x3f4>
8113728c:	e0bffd17 	ldw	r2,-12(fp)
81137290:	10800317 	ldw	r2,12(r2)
81137294:	10800104 	addi	r2,r2,4
81137298:	10800037 	ldwio	r2,0(r2)
8113729c:	10800814 	ori	r2,r2,32
811372a0:	e0bff415 	stw	r2,-48(fp)
811372a4:	0005303a 	rdctl	r2,status
811372a8:	e0bffa15 	stw	r2,-24(fp)
811372ac:	e0fffa17 	ldw	r3,-24(fp)
811372b0:	00bfff84 	movi	r2,-2
811372b4:	1884703a 	and	r2,r3,r2
811372b8:	1001703a 	wrctl	status,r2
811372bc:	e0bffa17 	ldw	r2,-24(fp)
811372c0:	e0bff515 	stw	r2,-44(fp)
811372c4:	e0bffd17 	ldw	r2,-12(fp)
811372c8:	10800317 	ldw	r2,12(r2)
811372cc:	10800104 	addi	r2,r2,4
811372d0:	e0fff417 	ldw	r3,-48(fp)
811372d4:	10c00035 	stwio	r3,0(r2)
811372d8:	e0bffd17 	ldw	r2,-12(fp)
811372dc:	10800317 	ldw	r2,12(r2)
811372e0:	e0fffd17 	ldw	r3,-12(fp)
811372e4:	18c00317 	ldw	r3,12(r3)
811372e8:	18c00037 	ldwio	r3,0(r3)
811372ec:	10c00035 	stwio	r3,0(r2)
811372f0:	e0bff517 	ldw	r2,-44(fp)
811372f4:	e0bff915 	stw	r2,-28(fp)
811372f8:	e0bff917 	ldw	r2,-28(fp)
811372fc:	1001703a 	wrctl	status,r2
81137300:	e0bffd17 	ldw	r2,-12(fp)
81137304:	10801817 	ldw	r2,96(r2)
81137308:	1009883a 	mov	r4,r2
8113730c:	112d5740 	call	8112d574 <OSSemPost>
81137310:	0005883a 	mov	r2,zero
81137314:	e037883a 	mov	sp,fp
81137318:	dfc00117 	ldw	ra,4(sp)
8113731c:	df000017 	ldw	fp,0(sp)
81137320:	dec00204 	addi	sp,sp,8
81137324:	f800283a 	ret

81137328 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
81137328:	defff804 	addi	sp,sp,-32
8113732c:	de00012e 	bgeu	sp,et,81137334 <alt_msgdma_construct_standard_st_to_mm_descriptor+0xc>
81137330:	003b68fa 	trap	3
81137334:	dfc00715 	stw	ra,28(sp)
81137338:	df000615 	stw	fp,24(sp)
8113733c:	df000604 	addi	fp,sp,24
81137340:	e13ffc15 	stw	r4,-16(fp)
81137344:	e17ffd15 	stw	r5,-12(fp)
81137348:	e1bffe15 	stw	r6,-8(fp)
8113734c:	e1ffff15 	stw	r7,-4(fp)
81137350:	e0800217 	ldw	r2,8(fp)
81137354:	d8800115 	stw	r2,4(sp)
81137358:	e0bfff17 	ldw	r2,-4(fp)
8113735c:	d8800015 	stw	r2,0(sp)
81137360:	e1fffe17 	ldw	r7,-8(fp)
81137364:	000d883a 	mov	r6,zero
81137368:	e17ffd17 	ldw	r5,-12(fp)
8113736c:	e13ffc17 	ldw	r4,-16(fp)
81137370:	11369f00 	call	811369f0 <alt_msgdma_construct_standard_descriptor>
81137374:	e037883a 	mov	sp,fp
81137378:	dfc00117 	ldw	ra,4(sp)
8113737c:	df000017 	ldw	fp,0(sp)
81137380:	dec00204 	addi	sp,sp,8
81137384:	f800283a 	ret

81137388 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
81137388:	defff804 	addi	sp,sp,-32
8113738c:	de00012e 	bgeu	sp,et,81137394 <alt_msgdma_construct_standard_mm_to_st_descriptor+0xc>
81137390:	003b68fa 	trap	3
81137394:	dfc00715 	stw	ra,28(sp)
81137398:	df000615 	stw	fp,24(sp)
8113739c:	df000604 	addi	fp,sp,24
811373a0:	e13ffc15 	stw	r4,-16(fp)
811373a4:	e17ffd15 	stw	r5,-12(fp)
811373a8:	e1bffe15 	stw	r6,-8(fp)
811373ac:	e1ffff15 	stw	r7,-4(fp)
811373b0:	e0800217 	ldw	r2,8(fp)
811373b4:	d8800115 	stw	r2,4(sp)
811373b8:	e0bfff17 	ldw	r2,-4(fp)
811373bc:	d8800015 	stw	r2,0(sp)
811373c0:	000f883a 	mov	r7,zero
811373c4:	e1bffe17 	ldw	r6,-8(fp)
811373c8:	e17ffd17 	ldw	r5,-12(fp)
811373cc:	e13ffc17 	ldw	r4,-16(fp)
811373d0:	11369f00 	call	811369f0 <alt_msgdma_construct_standard_descriptor>
811373d4:	e037883a 	mov	sp,fp
811373d8:	dfc00117 	ldw	ra,4(sp)
811373dc:	df000017 	ldw	fp,0(sp)
811373e0:	dec00204 	addi	sp,sp,8
811373e4:	f800283a 	ret

811373e8 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
811373e8:	defff804 	addi	sp,sp,-32
811373ec:	de00012e 	bgeu	sp,et,811373f4 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0xc>
811373f0:	003b68fa 	trap	3
811373f4:	dfc00715 	stw	ra,28(sp)
811373f8:	df000615 	stw	fp,24(sp)
811373fc:	df000604 	addi	fp,sp,24
81137400:	e13ffc15 	stw	r4,-16(fp)
81137404:	e17ffd15 	stw	r5,-12(fp)
81137408:	e1bffe15 	stw	r6,-8(fp)
8113740c:	e1ffff15 	stw	r7,-4(fp)
81137410:	e0800317 	ldw	r2,12(fp)
81137414:	d8800115 	stw	r2,4(sp)
81137418:	e0800217 	ldw	r2,8(fp)
8113741c:	d8800015 	stw	r2,0(sp)
81137420:	e1ffff17 	ldw	r7,-4(fp)
81137424:	e1bffe17 	ldw	r6,-8(fp)
81137428:	e17ffd17 	ldw	r5,-12(fp)
8113742c:	e13ffc17 	ldw	r4,-16(fp)
81137430:	11369f00 	call	811369f0 <alt_msgdma_construct_standard_descriptor>
81137434:	e037883a 	mov	sp,fp
81137438:	dfc00117 	ldw	ra,4(sp)
8113743c:	df000017 	ldw	fp,0(sp)
81137440:	dec00204 	addi	sp,sp,8
81137444:	f800283a 	ret

81137448 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
81137448:	defff004 	addi	sp,sp,-64
8113744c:	de00012e 	bgeu	sp,et,81137454 <alt_msgdma_construct_extended_st_to_mm_descriptor+0xc>
81137450:	003b68fa 	trap	3
81137454:	dfc00f15 	stw	ra,60(sp)
81137458:	df000e15 	stw	fp,56(sp)
8113745c:	df000e04 	addi	fp,sp,56
81137460:	e13ff915 	stw	r4,-28(fp)
81137464:	e17ffa15 	stw	r5,-24(fp)
81137468:	e1bffb15 	stw	r6,-20(fp)
8113746c:	e1fffc15 	stw	r7,-16(fp)
81137470:	e1000317 	ldw	r4,12(fp)
81137474:	e0c00417 	ldw	r3,16(fp)
81137478:	e0800517 	ldw	r2,20(fp)
8113747c:	e13ffd0d 	sth	r4,-12(fp)
81137480:	e0fffe05 	stb	r3,-8(fp)
81137484:	e0bfff0d 	sth	r2,-4(fp)
81137488:	e0bffd0b 	ldhu	r2,-12(fp)
8113748c:	e0fffe03 	ldbu	r3,-8(fp)
81137490:	e13fff0b 	ldhu	r4,-4(fp)
81137494:	d9000615 	stw	r4,24(sp)
81137498:	d8000515 	stw	zero,20(sp)
8113749c:	d8c00415 	stw	r3,16(sp)
811374a0:	d8000315 	stw	zero,12(sp)
811374a4:	d8800215 	stw	r2,8(sp)
811374a8:	e0800217 	ldw	r2,8(fp)
811374ac:	d8800115 	stw	r2,4(sp)
811374b0:	e0bffc17 	ldw	r2,-16(fp)
811374b4:	d8800015 	stw	r2,0(sp)
811374b8:	e1fffb17 	ldw	r7,-20(fp)
811374bc:	000d883a 	mov	r6,zero
811374c0:	e17ffa17 	ldw	r5,-24(fp)
811374c4:	e13ff917 	ldw	r4,-28(fp)
811374c8:	1136a840 	call	81136a84 <alt_msgdma_construct_extended_descriptor>
811374cc:	e037883a 	mov	sp,fp
811374d0:	dfc00117 	ldw	ra,4(sp)
811374d4:	df000017 	ldw	fp,0(sp)
811374d8:	dec00204 	addi	sp,sp,8
811374dc:	f800283a 	ret

811374e0 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
811374e0:	defff004 	addi	sp,sp,-64
811374e4:	de00012e 	bgeu	sp,et,811374ec <alt_msgdma_construct_extended_mm_to_st_descriptor+0xc>
811374e8:	003b68fa 	trap	3
811374ec:	dfc00f15 	stw	ra,60(sp)
811374f0:	df000e15 	stw	fp,56(sp)
811374f4:	df000e04 	addi	fp,sp,56
811374f8:	e13ff915 	stw	r4,-28(fp)
811374fc:	e17ffa15 	stw	r5,-24(fp)
81137500:	e1bffb15 	stw	r6,-20(fp)
81137504:	e1fffc15 	stw	r7,-16(fp)
81137508:	e1000317 	ldw	r4,12(fp)
8113750c:	e0c00417 	ldw	r3,16(fp)
81137510:	e0800517 	ldw	r2,20(fp)
81137514:	e13ffd0d 	sth	r4,-12(fp)
81137518:	e0fffe05 	stb	r3,-8(fp)
8113751c:	e0bfff0d 	sth	r2,-4(fp)
81137520:	e0bffd0b 	ldhu	r2,-12(fp)
81137524:	e0fffe03 	ldbu	r3,-8(fp)
81137528:	e13fff0b 	ldhu	r4,-4(fp)
8113752c:	d8000615 	stw	zero,24(sp)
81137530:	d9000515 	stw	r4,20(sp)
81137534:	d8000415 	stw	zero,16(sp)
81137538:	d8c00315 	stw	r3,12(sp)
8113753c:	d8800215 	stw	r2,8(sp)
81137540:	e0800217 	ldw	r2,8(fp)
81137544:	d8800115 	stw	r2,4(sp)
81137548:	e0bffc17 	ldw	r2,-16(fp)
8113754c:	d8800015 	stw	r2,0(sp)
81137550:	000f883a 	mov	r7,zero
81137554:	e1bffb17 	ldw	r6,-20(fp)
81137558:	e17ffa17 	ldw	r5,-24(fp)
8113755c:	e13ff917 	ldw	r4,-28(fp)
81137560:	1136a840 	call	81136a84 <alt_msgdma_construct_extended_descriptor>
81137564:	e037883a 	mov	sp,fp
81137568:	dfc00117 	ldw	ra,4(sp)
8113756c:	df000017 	ldw	fp,0(sp)
81137570:	dec00204 	addi	sp,sp,8
81137574:	f800283a 	ret

81137578 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
81137578:	deffee04 	addi	sp,sp,-72
8113757c:	de00012e 	bgeu	sp,et,81137584 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0xc>
81137580:	003b68fa 	trap	3
81137584:	dfc01115 	stw	ra,68(sp)
81137588:	df001015 	stw	fp,64(sp)
8113758c:	df001004 	addi	fp,sp,64
81137590:	e13ff715 	stw	r4,-36(fp)
81137594:	e17ff815 	stw	r5,-32(fp)
81137598:	e1bff915 	stw	r6,-28(fp)
8113759c:	e1fffa15 	stw	r7,-24(fp)
811375a0:	e1800417 	ldw	r6,16(fp)
811375a4:	e1400517 	ldw	r5,20(fp)
811375a8:	e1000617 	ldw	r4,24(fp)
811375ac:	e0c00717 	ldw	r3,28(fp)
811375b0:	e0800817 	ldw	r2,32(fp)
811375b4:	e1bffb0d 	sth	r6,-20(fp)
811375b8:	e17ffc05 	stb	r5,-16(fp)
811375bc:	e13ffd05 	stb	r4,-12(fp)
811375c0:	e0fffe0d 	sth	r3,-8(fp)
811375c4:	e0bfff0d 	sth	r2,-4(fp)
811375c8:	e0bffb0b 	ldhu	r2,-20(fp)
811375cc:	e0fffc03 	ldbu	r3,-16(fp)
811375d0:	e13ffd03 	ldbu	r4,-12(fp)
811375d4:	e17ffe0b 	ldhu	r5,-8(fp)
811375d8:	e1bfff0b 	ldhu	r6,-4(fp)
811375dc:	d9800615 	stw	r6,24(sp)
811375e0:	d9400515 	stw	r5,20(sp)
811375e4:	d9000415 	stw	r4,16(sp)
811375e8:	d8c00315 	stw	r3,12(sp)
811375ec:	d8800215 	stw	r2,8(sp)
811375f0:	e0800317 	ldw	r2,12(fp)
811375f4:	d8800115 	stw	r2,4(sp)
811375f8:	e0800217 	ldw	r2,8(fp)
811375fc:	d8800015 	stw	r2,0(sp)
81137600:	e1fffa17 	ldw	r7,-24(fp)
81137604:	e1bff917 	ldw	r6,-28(fp)
81137608:	e17ff817 	ldw	r5,-32(fp)
8113760c:	e13ff717 	ldw	r4,-36(fp)
81137610:	1136a840 	call	81136a84 <alt_msgdma_construct_extended_descriptor>
81137614:	e037883a 	mov	sp,fp
81137618:	dfc00117 	ldw	ra,4(sp)
8113761c:	df000017 	ldw	fp,0(sp)
81137620:	dec00204 	addi	sp,sp,8
81137624:	f800283a 	ret

81137628 <alt_msgdma_construct_prefetcher_standard_descriptor>:
81137628:	defffb04 	addi	sp,sp,-20
8113762c:	de00012e 	bgeu	sp,et,81137634 <alt_msgdma_construct_prefetcher_standard_descriptor+0xc>
81137630:	003b68fa 	trap	3
81137634:	df000415 	stw	fp,16(sp)
81137638:	df000404 	addi	fp,sp,16
8113763c:	e13ffc15 	stw	r4,-16(fp)
81137640:	e17ffd15 	stw	r5,-12(fp)
81137644:	e1bffe15 	stw	r6,-8(fp)
81137648:	e1ffff15 	stw	r7,-4(fp)
8113764c:	e0bffc17 	ldw	r2,-16(fp)
81137650:	10c01217 	ldw	r3,72(r2)
81137654:	e0800117 	ldw	r2,4(fp)
81137658:	18800436 	bltu	r3,r2,8113766c <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
8113765c:	e0bffc17 	ldw	r2,-16(fp)
81137660:	10801703 	ldbu	r2,92(r2)
81137664:	10803fcc 	andi	r2,r2,255
81137668:	10000226 	beq	r2,zero,81137674 <alt_msgdma_construct_prefetcher_standard_descriptor+0x4c>
8113766c:	00bffa84 	movi	r2,-22
81137670:	00001406 	br	811376c4 <alt_msgdma_construct_prefetcher_standard_descriptor+0x9c>
81137674:	e0bffd17 	ldw	r2,-12(fp)
81137678:	e0fffe17 	ldw	r3,-8(fp)
8113767c:	10c00015 	stw	r3,0(r2)
81137680:	e0bffd17 	ldw	r2,-12(fp)
81137684:	e0ffff17 	ldw	r3,-4(fp)
81137688:	10c00115 	stw	r3,4(r2)
8113768c:	e0bffd17 	ldw	r2,-12(fp)
81137690:	e0c00117 	ldw	r3,4(fp)
81137694:	10c00215 	stw	r3,8(r2)
81137698:	e0fffd17 	ldw	r3,-12(fp)
8113769c:	e0bffd17 	ldw	r2,-12(fp)
811376a0:	10c00315 	stw	r3,12(r2)
811376a4:	e0c00217 	ldw	r3,8(fp)
811376a8:	00900034 	movhi	r2,16384
811376ac:	10bfffc4 	addi	r2,r2,-1
811376b0:	1884703a 	and	r2,r3,r2
811376b4:	10e00034 	orhi	r3,r2,32768
811376b8:	e0bffd17 	ldw	r2,-12(fp)
811376bc:	10c00715 	stw	r3,28(r2)
811376c0:	0005883a 	mov	r2,zero
811376c4:	e037883a 	mov	sp,fp
811376c8:	df000017 	ldw	fp,0(sp)
811376cc:	dec00104 	addi	sp,sp,4
811376d0:	f800283a 	ret

811376d4 <alt_msgdma_construct_prefetcher_extended_descriptor>:
811376d4:	defff404 	addi	sp,sp,-48
811376d8:	de00012e 	bgeu	sp,et,811376e0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc>
811376dc:	003b68fa 	trap	3
811376e0:	df000b15 	stw	fp,44(sp)
811376e4:	df000b04 	addi	fp,sp,44
811376e8:	e13ff715 	stw	r4,-36(fp)
811376ec:	e17ff815 	stw	r5,-32(fp)
811376f0:	e1bff915 	stw	r6,-28(fp)
811376f4:	e1fffa15 	stw	r7,-24(fp)
811376f8:	e1800517 	ldw	r6,20(fp)
811376fc:	e1400617 	ldw	r5,24(fp)
81137700:	e1000717 	ldw	r4,28(fp)
81137704:	e0c00817 	ldw	r3,32(fp)
81137708:	e0800917 	ldw	r2,36(fp)
8113770c:	e1bffb0d 	sth	r6,-20(fp)
81137710:	e17ffc05 	stb	r5,-16(fp)
81137714:	e13ffd05 	stb	r4,-12(fp)
81137718:	e0fffe0d 	sth	r3,-8(fp)
8113771c:	e0bfff0d 	sth	r2,-4(fp)
81137720:	e0bff717 	ldw	r2,-36(fp)
81137724:	10c01217 	ldw	r3,72(r2)
81137728:	e0800317 	ldw	r2,12(fp)
8113772c:	18801936 	bltu	r3,r2,81137794 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81137730:	e13ff717 	ldw	r4,-36(fp)
81137734:	20801317 	ldw	r2,76(r4)
81137738:	20c01417 	ldw	r3,80(r4)
8113773c:	e13ffe0b 	ldhu	r4,-8(fp)
81137740:	213fffcc 	andi	r4,r4,65535
81137744:	2015883a 	mov	r10,r4
81137748:	0017883a 	mov	r11,zero
8113774c:	1ac01136 	bltu	r3,r11,81137794 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81137750:	58c0011e 	bne	r11,r3,81137758 <alt_msgdma_construct_prefetcher_extended_descriptor+0x84>
81137754:	12800f36 	bltu	r2,r10,81137794 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81137758:	e13ff717 	ldw	r4,-36(fp)
8113775c:	20801317 	ldw	r2,76(r4)
81137760:	20c01417 	ldw	r3,80(r4)
81137764:	e13fff0b 	ldhu	r4,-4(fp)
81137768:	213fffcc 	andi	r4,r4,65535
8113776c:	2011883a 	mov	r8,r4
81137770:	0013883a 	mov	r9,zero
81137774:	1a400736 	bltu	r3,r9,81137794 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81137778:	48c0011e 	bne	r9,r3,81137780 <alt_msgdma_construct_prefetcher_extended_descriptor+0xac>
8113777c:	12000536 	bltu	r2,r8,81137794 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81137780:	e0bff717 	ldw	r2,-36(fp)
81137784:	10801703 	ldbu	r2,92(r2)
81137788:	10803fcc 	andi	r2,r2,255
8113778c:	10800060 	cmpeqi	r2,r2,1
81137790:	1000021e 	bne	r2,zero,8113779c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc8>
81137794:	00bffa84 	movi	r2,-22
81137798:	00003106 	br	81137860 <alt_msgdma_construct_prefetcher_extended_descriptor+0x18c>
8113779c:	e0bff817 	ldw	r2,-32(fp)
811377a0:	e0fff917 	ldw	r3,-28(fp)
811377a4:	10c00915 	stw	r3,36(r2)
811377a8:	e0bff817 	ldw	r2,-32(fp)
811377ac:	e0fffa17 	ldw	r3,-24(fp)
811377b0:	10c00015 	stw	r3,0(r2)
811377b4:	e0bff817 	ldw	r2,-32(fp)
811377b8:	e0c00117 	ldw	r3,4(fp)
811377bc:	10c00a15 	stw	r3,40(r2)
811377c0:	e0bff817 	ldw	r2,-32(fp)
811377c4:	e0c00217 	ldw	r3,8(fp)
811377c8:	10c00115 	stw	r3,4(r2)
811377cc:	e0bff817 	ldw	r2,-32(fp)
811377d0:	e0c00317 	ldw	r3,12(fp)
811377d4:	10c00215 	stw	r3,8(r2)
811377d8:	e0bff817 	ldw	r2,-32(fp)
811377dc:	e0fffb0b 	ldhu	r3,-20(fp)
811377e0:	10c0070d 	sth	r3,28(r2)
811377e4:	e0bff817 	ldw	r2,-32(fp)
811377e8:	e0fffc03 	ldbu	r3,-16(fp)
811377ec:	10c00785 	stb	r3,30(r2)
811377f0:	e0bff817 	ldw	r2,-32(fp)
811377f4:	e0fffd03 	ldbu	r3,-12(fp)
811377f8:	10c007c5 	stb	r3,31(r2)
811377fc:	e0bff817 	ldw	r2,-32(fp)
81137800:	e0fffe0b 	ldhu	r3,-8(fp)
81137804:	10c0080d 	sth	r3,32(r2)
81137808:	e0bff817 	ldw	r2,-32(fp)
8113780c:	e0ffff0b 	ldhu	r3,-4(fp)
81137810:	10c0088d 	sth	r3,34(r2)
81137814:	e0bff817 	ldw	r2,-32(fp)
81137818:	1019883a 	mov	r12,r2
8113781c:	001b883a 	mov	r13,zero
81137820:	e33ff515 	stw	r12,-44(fp)
81137824:	e37ff615 	stw	r13,-40(fp)
81137828:	e0fff517 	ldw	r3,-44(fp)
8113782c:	e0bff817 	ldw	r2,-32(fp)
81137830:	10c00315 	stw	r3,12(r2)
81137834:	e0fff617 	ldw	r3,-40(fp)
81137838:	e0bff817 	ldw	r2,-32(fp)
8113783c:	10c00b15 	stw	r3,44(r2)
81137840:	e0c00417 	ldw	r3,16(fp)
81137844:	00900034 	movhi	r2,16384
81137848:	10bfffc4 	addi	r2,r2,-1
8113784c:	1884703a 	and	r2,r3,r2
81137850:	10e00034 	orhi	r3,r2,32768
81137854:	e0bff817 	ldw	r2,-32(fp)
81137858:	10c00f15 	stw	r3,60(r2)
8113785c:	0005883a 	mov	r2,zero
81137860:	e037883a 	mov	sp,fp
81137864:	df000017 	ldw	fp,0(sp)
81137868:	dec00104 	addi	sp,sp,4
8113786c:	f800283a 	ret

81137870 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
81137870:	defff804 	addi	sp,sp,-32
81137874:	de00012e 	bgeu	sp,et,8113787c <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0xc>
81137878:	003b68fa 	trap	3
8113787c:	dfc00715 	stw	ra,28(sp)
81137880:	df000615 	stw	fp,24(sp)
81137884:	df000604 	addi	fp,sp,24
81137888:	e13ffc15 	stw	r4,-16(fp)
8113788c:	e17ffd15 	stw	r5,-12(fp)
81137890:	e1bffe15 	stw	r6,-8(fp)
81137894:	e1ffff15 	stw	r7,-4(fp)
81137898:	e0800317 	ldw	r2,12(fp)
8113789c:	d8800115 	stw	r2,4(sp)
811378a0:	e0800217 	ldw	r2,8(fp)
811378a4:	d8800015 	stw	r2,0(sp)
811378a8:	e1ffff17 	ldw	r7,-4(fp)
811378ac:	e1bffe17 	ldw	r6,-8(fp)
811378b0:	e17ffd17 	ldw	r5,-12(fp)
811378b4:	e13ffc17 	ldw	r4,-16(fp)
811378b8:	11376280 	call	81137628 <alt_msgdma_construct_prefetcher_standard_descriptor>
811378bc:	e037883a 	mov	sp,fp
811378c0:	dfc00117 	ldw	ra,4(sp)
811378c4:	df000017 	ldw	fp,0(sp)
811378c8:	dec00204 	addi	sp,sp,8
811378cc:	f800283a 	ret

811378d0 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
811378d0:	defff804 	addi	sp,sp,-32
811378d4:	de00012e 	bgeu	sp,et,811378dc <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0xc>
811378d8:	003b68fa 	trap	3
811378dc:	dfc00715 	stw	ra,28(sp)
811378e0:	df000615 	stw	fp,24(sp)
811378e4:	df000604 	addi	fp,sp,24
811378e8:	e13ffc15 	stw	r4,-16(fp)
811378ec:	e17ffd15 	stw	r5,-12(fp)
811378f0:	e1bffe15 	stw	r6,-8(fp)
811378f4:	e1ffff15 	stw	r7,-4(fp)
811378f8:	e0800217 	ldw	r2,8(fp)
811378fc:	d8800115 	stw	r2,4(sp)
81137900:	e0bfff17 	ldw	r2,-4(fp)
81137904:	d8800015 	stw	r2,0(sp)
81137908:	e1fffe17 	ldw	r7,-8(fp)
8113790c:	000d883a 	mov	r6,zero
81137910:	e17ffd17 	ldw	r5,-12(fp)
81137914:	e13ffc17 	ldw	r4,-16(fp)
81137918:	11376280 	call	81137628 <alt_msgdma_construct_prefetcher_standard_descriptor>
8113791c:	e037883a 	mov	sp,fp
81137920:	dfc00117 	ldw	ra,4(sp)
81137924:	df000017 	ldw	fp,0(sp)
81137928:	dec00204 	addi	sp,sp,8
8113792c:	f800283a 	ret

81137930 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
81137930:	defff804 	addi	sp,sp,-32
81137934:	de00012e 	bgeu	sp,et,8113793c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0xc>
81137938:	003b68fa 	trap	3
8113793c:	dfc00715 	stw	ra,28(sp)
81137940:	df000615 	stw	fp,24(sp)
81137944:	df000604 	addi	fp,sp,24
81137948:	e13ffc15 	stw	r4,-16(fp)
8113794c:	e17ffd15 	stw	r5,-12(fp)
81137950:	e1bffe15 	stw	r6,-8(fp)
81137954:	e1ffff15 	stw	r7,-4(fp)
81137958:	e0800217 	ldw	r2,8(fp)
8113795c:	d8800115 	stw	r2,4(sp)
81137960:	e0bfff17 	ldw	r2,-4(fp)
81137964:	d8800015 	stw	r2,0(sp)
81137968:	000f883a 	mov	r7,zero
8113796c:	e1bffe17 	ldw	r6,-8(fp)
81137970:	e17ffd17 	ldw	r5,-12(fp)
81137974:	e13ffc17 	ldw	r4,-16(fp)
81137978:	11376280 	call	81137628 <alt_msgdma_construct_prefetcher_standard_descriptor>
8113797c:	e037883a 	mov	sp,fp
81137980:	dfc00117 	ldw	ra,4(sp)
81137984:	df000017 	ldw	fp,0(sp)
81137988:	dec00204 	addi	sp,sp,8
8113798c:	f800283a 	ret

81137990 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
81137990:	deffee04 	addi	sp,sp,-72
81137994:	de00012e 	bgeu	sp,et,8113799c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0xc>
81137998:	003b68fa 	trap	3
8113799c:	dfc01115 	stw	ra,68(sp)
811379a0:	df001015 	stw	fp,64(sp)
811379a4:	df001004 	addi	fp,sp,64
811379a8:	e13ff915 	stw	r4,-28(fp)
811379ac:	e17ffa15 	stw	r5,-24(fp)
811379b0:	e1bffb15 	stw	r6,-20(fp)
811379b4:	e1fffc15 	stw	r7,-16(fp)
811379b8:	e1000417 	ldw	r4,16(fp)
811379bc:	e0c00517 	ldw	r3,20(fp)
811379c0:	e0800617 	ldw	r2,24(fp)
811379c4:	e13ffd0d 	sth	r4,-12(fp)
811379c8:	e0fffe05 	stb	r3,-8(fp)
811379cc:	e0bfff0d 	sth	r2,-4(fp)
811379d0:	e0bffd0b 	ldhu	r2,-12(fp)
811379d4:	e0fffe03 	ldbu	r3,-8(fp)
811379d8:	e13fff0b 	ldhu	r4,-4(fp)
811379dc:	d9000815 	stw	r4,32(sp)
811379e0:	d8000715 	stw	zero,28(sp)
811379e4:	d8c00615 	stw	r3,24(sp)
811379e8:	d8000515 	stw	zero,20(sp)
811379ec:	d8800415 	stw	r2,16(sp)
811379f0:	e0800317 	ldw	r2,12(fp)
811379f4:	d8800315 	stw	r2,12(sp)
811379f8:	e0800217 	ldw	r2,8(fp)
811379fc:	d8800215 	stw	r2,8(sp)
81137a00:	e0bffc17 	ldw	r2,-16(fp)
81137a04:	d8800115 	stw	r2,4(sp)
81137a08:	e0bffb17 	ldw	r2,-20(fp)
81137a0c:	d8800015 	stw	r2,0(sp)
81137a10:	000f883a 	mov	r7,zero
81137a14:	000d883a 	mov	r6,zero
81137a18:	e17ffa17 	ldw	r5,-24(fp)
81137a1c:	e13ff917 	ldw	r4,-28(fp)
81137a20:	11376d40 	call	811376d4 <alt_msgdma_construct_prefetcher_extended_descriptor>
81137a24:	e037883a 	mov	sp,fp
81137a28:	dfc00117 	ldw	ra,4(sp)
81137a2c:	df000017 	ldw	fp,0(sp)
81137a30:	dec00204 	addi	sp,sp,8
81137a34:	f800283a 	ret

81137a38 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
81137a38:	deffee04 	addi	sp,sp,-72
81137a3c:	de00012e 	bgeu	sp,et,81137a44 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0xc>
81137a40:	003b68fa 	trap	3
81137a44:	dfc01115 	stw	ra,68(sp)
81137a48:	df001015 	stw	fp,64(sp)
81137a4c:	df001004 	addi	fp,sp,64
81137a50:	e13ff915 	stw	r4,-28(fp)
81137a54:	e17ffa15 	stw	r5,-24(fp)
81137a58:	e1bffb15 	stw	r6,-20(fp)
81137a5c:	e1fffc15 	stw	r7,-16(fp)
81137a60:	e1000417 	ldw	r4,16(fp)
81137a64:	e0c00517 	ldw	r3,20(fp)
81137a68:	e0800617 	ldw	r2,24(fp)
81137a6c:	e13ffd0d 	sth	r4,-12(fp)
81137a70:	e0fffe05 	stb	r3,-8(fp)
81137a74:	e0bfff0d 	sth	r2,-4(fp)
81137a78:	e0bffd0b 	ldhu	r2,-12(fp)
81137a7c:	e0fffe03 	ldbu	r3,-8(fp)
81137a80:	e13fff0b 	ldhu	r4,-4(fp)
81137a84:	d8000815 	stw	zero,32(sp)
81137a88:	d9000715 	stw	r4,28(sp)
81137a8c:	d8000615 	stw	zero,24(sp)
81137a90:	d8c00515 	stw	r3,20(sp)
81137a94:	d8800415 	stw	r2,16(sp)
81137a98:	e0800317 	ldw	r2,12(fp)
81137a9c:	d8800315 	stw	r2,12(sp)
81137aa0:	e0800217 	ldw	r2,8(fp)
81137aa4:	d8800215 	stw	r2,8(sp)
81137aa8:	d8000115 	stw	zero,4(sp)
81137aac:	d8000015 	stw	zero,0(sp)
81137ab0:	e1fffc17 	ldw	r7,-16(fp)
81137ab4:	e1bffb17 	ldw	r6,-20(fp)
81137ab8:	e17ffa17 	ldw	r5,-24(fp)
81137abc:	e13ff917 	ldw	r4,-28(fp)
81137ac0:	11376d40 	call	811376d4 <alt_msgdma_construct_prefetcher_extended_descriptor>
81137ac4:	e037883a 	mov	sp,fp
81137ac8:	dfc00117 	ldw	ra,4(sp)
81137acc:	df000017 	ldw	fp,0(sp)
81137ad0:	dec00204 	addi	sp,sp,8
81137ad4:	f800283a 	ret

81137ad8 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
81137ad8:	deffec04 	addi	sp,sp,-80
81137adc:	de00012e 	bgeu	sp,et,81137ae4 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xc>
81137ae0:	003b68fa 	trap	3
81137ae4:	dfc01315 	stw	ra,76(sp)
81137ae8:	df001215 	stw	fp,72(sp)
81137aec:	df001204 	addi	fp,sp,72
81137af0:	e13ff715 	stw	r4,-36(fp)
81137af4:	e17ff815 	stw	r5,-32(fp)
81137af8:	e1bff915 	stw	r6,-28(fp)
81137afc:	e1fffa15 	stw	r7,-24(fp)
81137b00:	e1800617 	ldw	r6,24(fp)
81137b04:	e1400717 	ldw	r5,28(fp)
81137b08:	e1000817 	ldw	r4,32(fp)
81137b0c:	e0c00917 	ldw	r3,36(fp)
81137b10:	e0800a17 	ldw	r2,40(fp)
81137b14:	e1bffb0d 	sth	r6,-20(fp)
81137b18:	e17ffc05 	stb	r5,-16(fp)
81137b1c:	e13ffd05 	stb	r4,-12(fp)
81137b20:	e0fffe0d 	sth	r3,-8(fp)
81137b24:	e0bfff0d 	sth	r2,-4(fp)
81137b28:	e0bffb0b 	ldhu	r2,-20(fp)
81137b2c:	e0fffc03 	ldbu	r3,-16(fp)
81137b30:	e13ffd03 	ldbu	r4,-12(fp)
81137b34:	e17ffe0b 	ldhu	r5,-8(fp)
81137b38:	e1bfff0b 	ldhu	r6,-4(fp)
81137b3c:	d9800815 	stw	r6,32(sp)
81137b40:	d9400715 	stw	r5,28(sp)
81137b44:	d9000615 	stw	r4,24(sp)
81137b48:	d8c00515 	stw	r3,20(sp)
81137b4c:	d8800415 	stw	r2,16(sp)
81137b50:	e0800517 	ldw	r2,20(fp)
81137b54:	d8800315 	stw	r2,12(sp)
81137b58:	e0800417 	ldw	r2,16(fp)
81137b5c:	d8800215 	stw	r2,8(sp)
81137b60:	e0800317 	ldw	r2,12(fp)
81137b64:	d8800115 	stw	r2,4(sp)
81137b68:	e0800217 	ldw	r2,8(fp)
81137b6c:	d8800015 	stw	r2,0(sp)
81137b70:	e1fffa17 	ldw	r7,-24(fp)
81137b74:	e1bff917 	ldw	r6,-28(fp)
81137b78:	e17ff817 	ldw	r5,-32(fp)
81137b7c:	e13ff717 	ldw	r4,-36(fp)
81137b80:	11376d40 	call	811376d4 <alt_msgdma_construct_prefetcher_extended_descriptor>
81137b84:	e037883a 	mov	sp,fp
81137b88:	dfc00117 	ldw	ra,4(sp)
81137b8c:	df000017 	ldw	fp,0(sp)
81137b90:	dec00204 	addi	sp,sp,8
81137b94:	f800283a 	ret

81137b98 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
81137b98:	defffc04 	addi	sp,sp,-16
81137b9c:	de00012e 	bgeu	sp,et,81137ba4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xc>
81137ba0:	003b68fa 	trap	3
81137ba4:	df000315 	stw	fp,12(sp)
81137ba8:	df000304 	addi	fp,sp,12
81137bac:	e13ffe15 	stw	r4,-8(fp)
81137bb0:	e17fff15 	stw	r5,-4(fp)
81137bb4:	e0bfff17 	ldw	r2,-4(fp)
81137bb8:	1000021e 	bne	r2,zero,81137bc4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
81137bbc:	00bffa84 	movi	r2,-22
81137bc0:	00002f06 	br	81137c80 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
81137bc4:	e0bfff17 	ldw	r2,-4(fp)
81137bc8:	10c00317 	ldw	r3,12(r2)
81137bcc:	e0bfff17 	ldw	r2,-4(fp)
81137bd0:	18800226 	beq	r3,r2,81137bdc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x44>
81137bd4:	00bffa84 	movi	r2,-22
81137bd8:	00002906 	br	81137c80 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
81137bdc:	e0bffe17 	ldw	r2,-8(fp)
81137be0:	10800017 	ldw	r2,0(r2)
81137be4:	1000051e 	bne	r2,zero,81137bfc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x64>
81137be8:	e0bffe17 	ldw	r2,-8(fp)
81137bec:	e0ffff17 	ldw	r3,-4(fp)
81137bf0:	10c00015 	stw	r3,0(r2)
81137bf4:	0005883a 	mov	r2,zero
81137bf8:	00002106 	br	81137c80 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
81137bfc:	e0bffe17 	ldw	r2,-8(fp)
81137c00:	10c00017 	ldw	r3,0(r2)
81137c04:	e0bfff17 	ldw	r2,-4(fp)
81137c08:	1880021e 	bne	r3,r2,81137c14 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x7c>
81137c0c:	00bffa84 	movi	r2,-22
81137c10:	00001b06 	br	81137c80 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
81137c14:	e0bffe17 	ldw	r2,-8(fp)
81137c18:	10800017 	ldw	r2,0(r2)
81137c1c:	e0bffd15 	stw	r2,-12(fp)
81137c20:	00000906 	br	81137c48 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xb0>
81137c24:	e0bffd17 	ldw	r2,-12(fp)
81137c28:	10c00317 	ldw	r3,12(r2)
81137c2c:	e0bfff17 	ldw	r2,-4(fp)
81137c30:	1880021e 	bne	r3,r2,81137c3c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa4>
81137c34:	00bffa84 	movi	r2,-22
81137c38:	00001106 	br	81137c80 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
81137c3c:	e0bffd17 	ldw	r2,-12(fp)
81137c40:	10800317 	ldw	r2,12(r2)
81137c44:	e0bffd15 	stw	r2,-12(fp)
81137c48:	e0bffd17 	ldw	r2,-12(fp)
81137c4c:	10800317 	ldw	r2,12(r2)
81137c50:	e0fffe17 	ldw	r3,-8(fp)
81137c54:	18c00017 	ldw	r3,0(r3)
81137c58:	10fff21e 	bne	r2,r3,81137c24 <__reset+0xfb117c24>
81137c5c:	e0ffff17 	ldw	r3,-4(fp)
81137c60:	e0bffd17 	ldw	r2,-12(fp)
81137c64:	10c00315 	stw	r3,12(r2)
81137c68:	e0bffe17 	ldw	r2,-8(fp)
81137c6c:	10800017 	ldw	r2,0(r2)
81137c70:	1007883a 	mov	r3,r2
81137c74:	e0bfff17 	ldw	r2,-4(fp)
81137c78:	10c00315 	stw	r3,12(r2)
81137c7c:	0005883a 	mov	r2,zero
81137c80:	e037883a 	mov	sp,fp
81137c84:	df000017 	ldw	fp,0(sp)
81137c88:	dec00104 	addi	sp,sp,4
81137c8c:	f800283a 	ret

81137c90 <alt_msgdma_prefetcher_add_extended_desc_to_list>:
81137c90:	defff804 	addi	sp,sp,-32
81137c94:	de00012e 	bgeu	sp,et,81137c9c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
81137c98:	003b68fa 	trap	3
81137c9c:	df000715 	stw	fp,28(sp)
81137ca0:	df000704 	addi	fp,sp,28
81137ca4:	e13ffe15 	stw	r4,-8(fp)
81137ca8:	e17fff15 	stw	r5,-4(fp)
81137cac:	e13fff17 	ldw	r4,-4(fp)
81137cb0:	2000021e 	bne	r4,zero,81137cbc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x2c>
81137cb4:	00bffa84 	movi	r2,-22
81137cb8:	00005906 	br	81137e20 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
81137cbc:	e13fff17 	ldw	r4,-4(fp)
81137cc0:	2015883a 	mov	r10,r4
81137cc4:	0017883a 	mov	r11,zero
81137cc8:	e2bffc15 	stw	r10,-16(fp)
81137ccc:	e2fffd15 	stw	r11,-12(fp)
81137cd0:	e13fff17 	ldw	r4,-4(fp)
81137cd4:	21400317 	ldw	r5,12(r4)
81137cd8:	e13ffc17 	ldw	r4,-16(fp)
81137cdc:	29000626 	beq	r5,r4,81137cf8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
81137ce0:	e13fff17 	ldw	r4,-4(fp)
81137ce4:	21400b17 	ldw	r5,44(r4)
81137ce8:	e13ffd17 	ldw	r4,-12(fp)
81137cec:	29000226 	beq	r5,r4,81137cf8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
81137cf0:	00bffa84 	movi	r2,-22
81137cf4:	00004a06 	br	81137e20 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
81137cf8:	e13ffe17 	ldw	r4,-8(fp)
81137cfc:	21000017 	ldw	r4,0(r4)
81137d00:	2000051e 	bne	r4,zero,81137d18 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x88>
81137d04:	e0bffe17 	ldw	r2,-8(fp)
81137d08:	e0ffff17 	ldw	r3,-4(fp)
81137d0c:	10c00015 	stw	r3,0(r2)
81137d10:	0005883a 	mov	r2,zero
81137d14:	00004206 	br	81137e20 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
81137d18:	e13ffe17 	ldw	r4,-8(fp)
81137d1c:	21400017 	ldw	r5,0(r4)
81137d20:	e13fff17 	ldw	r4,-4(fp)
81137d24:	2900021e 	bne	r5,r4,81137d30 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xa0>
81137d28:	00bffa84 	movi	r2,-22
81137d2c:	00003c06 	br	81137e20 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
81137d30:	e13ffe17 	ldw	r4,-8(fp)
81137d34:	21000017 	ldw	r4,0(r4)
81137d38:	e13ff915 	stw	r4,-28(fp)
81137d3c:	e13ffe17 	ldw	r4,-8(fp)
81137d40:	21000017 	ldw	r4,0(r4)
81137d44:	2011883a 	mov	r8,r4
81137d48:	0013883a 	mov	r9,zero
81137d4c:	e23ffa15 	stw	r8,-24(fp)
81137d50:	e27ffb15 	stw	r9,-20(fp)
81137d54:	00001806 	br	81137db8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x128>
81137d58:	e13fff17 	ldw	r4,-4(fp)
81137d5c:	200d883a 	mov	r6,r4
81137d60:	000f883a 	mov	r7,zero
81137d64:	e1bffc15 	stw	r6,-16(fp)
81137d68:	e1fffd15 	stw	r7,-12(fp)
81137d6c:	e13ff917 	ldw	r4,-28(fp)
81137d70:	21400317 	ldw	r5,12(r4)
81137d74:	e13ffc17 	ldw	r4,-16(fp)
81137d78:	2900061e 	bne	r5,r4,81137d94 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
81137d7c:	e13ff917 	ldw	r4,-28(fp)
81137d80:	21400b17 	ldw	r5,44(r4)
81137d84:	e13ffd17 	ldw	r4,-12(fp)
81137d88:	2900021e 	bne	r5,r4,81137d94 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
81137d8c:	00bffa84 	movi	r2,-22
81137d90:	00002306 	br	81137e20 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
81137d94:	e13ff917 	ldw	r4,-28(fp)
81137d98:	21000317 	ldw	r4,12(r4)
81137d9c:	e13ffc15 	stw	r4,-16(fp)
81137da0:	e13ff917 	ldw	r4,-28(fp)
81137da4:	21000b17 	ldw	r4,44(r4)
81137da8:	e13ffd15 	stw	r4,-12(fp)
81137dac:	e13ffc17 	ldw	r4,-16(fp)
81137db0:	e17ffd17 	ldw	r5,-12(fp)
81137db4:	e13ff915 	stw	r4,-28(fp)
81137db8:	e13ff917 	ldw	r4,-28(fp)
81137dbc:	21400317 	ldw	r5,12(r4)
81137dc0:	e13ffa17 	ldw	r4,-24(fp)
81137dc4:	29000426 	beq	r5,r4,81137dd8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x148>
81137dc8:	e13ff917 	ldw	r4,-28(fp)
81137dcc:	21400b17 	ldw	r5,44(r4)
81137dd0:	e13ffb17 	ldw	r4,-20(fp)
81137dd4:	293fe01e 	bne	r5,r4,81137d58 <__reset+0xfb117d58>
81137dd8:	e13fff17 	ldw	r4,-4(fp)
81137ddc:	2005883a 	mov	r2,r4
81137de0:	0007883a 	mov	r3,zero
81137de4:	e0bffc15 	stw	r2,-16(fp)
81137de8:	e0fffd15 	stw	r3,-12(fp)
81137dec:	e0fffc17 	ldw	r3,-16(fp)
81137df0:	e0bff917 	ldw	r2,-28(fp)
81137df4:	10c00315 	stw	r3,12(r2)
81137df8:	e0fffd17 	ldw	r3,-12(fp)
81137dfc:	e0bff917 	ldw	r2,-28(fp)
81137e00:	10c00b15 	stw	r3,44(r2)
81137e04:	e0fffa17 	ldw	r3,-24(fp)
81137e08:	e0bfff17 	ldw	r2,-4(fp)
81137e0c:	10c00315 	stw	r3,12(r2)
81137e10:	e0fffb17 	ldw	r3,-20(fp)
81137e14:	e0bfff17 	ldw	r2,-4(fp)
81137e18:	10c00b15 	stw	r3,44(r2)
81137e1c:	0005883a 	mov	r2,zero
81137e20:	e037883a 	mov	sp,fp
81137e24:	df000017 	ldw	fp,0(sp)
81137e28:	dec00104 	addi	sp,sp,4
81137e2c:	f800283a 	ret

81137e30 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
81137e30:	defffc04 	addi	sp,sp,-16
81137e34:	de00012e 	bgeu	sp,et,81137e3c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
81137e38:	003b68fa 	trap	3
81137e3c:	df000315 	stw	fp,12(sp)
81137e40:	df000304 	addi	fp,sp,12
81137e44:	e13fff15 	stw	r4,-4(fp)
81137e48:	e03ffe15 	stw	zero,-8(fp)
81137e4c:	e0bfff17 	ldw	r2,-4(fp)
81137e50:	1000021e 	bne	r2,zero,81137e5c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x2c>
81137e54:	00bffa84 	movi	r2,-22
81137e58:	00001906 	br	81137ec0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x90>
81137e5c:	e0bfff17 	ldw	r2,-4(fp)
81137e60:	e0bffd15 	stw	r2,-12(fp)
81137e64:	00000a06 	br	81137e90 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x60>
81137e68:	e0bffd17 	ldw	r2,-12(fp)
81137e6c:	10800717 	ldw	r2,28(r2)
81137e70:	e0bffe15 	stw	r2,-8(fp)
81137e74:	e0bffe17 	ldw	r2,-8(fp)
81137e78:	10d00034 	orhi	r3,r2,16384
81137e7c:	e0bffd17 	ldw	r2,-12(fp)
81137e80:	10c00715 	stw	r3,28(r2)
81137e84:	e0bffd17 	ldw	r2,-12(fp)
81137e88:	10800317 	ldw	r2,12(r2)
81137e8c:	e0bffd15 	stw	r2,-12(fp)
81137e90:	e0bffd17 	ldw	r2,-12(fp)
81137e94:	10c00317 	ldw	r3,12(r2)
81137e98:	e0bfff17 	ldw	r2,-4(fp)
81137e9c:	18bff21e 	bne	r3,r2,81137e68 <__reset+0xfb117e68>
81137ea0:	e0bffd17 	ldw	r2,-12(fp)
81137ea4:	10800717 	ldw	r2,28(r2)
81137ea8:	e0bffe15 	stw	r2,-8(fp)
81137eac:	e0bffe17 	ldw	r2,-8(fp)
81137eb0:	10d00034 	orhi	r3,r2,16384
81137eb4:	e0bffd17 	ldw	r2,-12(fp)
81137eb8:	10c00715 	stw	r3,28(r2)
81137ebc:	0005883a 	mov	r2,zero
81137ec0:	e037883a 	mov	sp,fp
81137ec4:	df000017 	ldw	fp,0(sp)
81137ec8:	dec00104 	addi	sp,sp,4
81137ecc:	f800283a 	ret

81137ed0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
81137ed0:	defff804 	addi	sp,sp,-32
81137ed4:	de00012e 	bgeu	sp,et,81137edc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
81137ed8:	003b68fa 	trap	3
81137edc:	df000715 	stw	fp,28(sp)
81137ee0:	df000704 	addi	fp,sp,28
81137ee4:	e13fff15 	stw	r4,-4(fp)
81137ee8:	e03ffa15 	stw	zero,-24(fp)
81137eec:	e13fff17 	ldw	r4,-4(fp)
81137ef0:	2000021e 	bne	r4,zero,81137efc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x2c>
81137ef4:	00bffa84 	movi	r2,-22
81137ef8:	00002806 	br	81137f9c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xcc>
81137efc:	e13fff17 	ldw	r4,-4(fp)
81137f00:	e13ff915 	stw	r4,-28(fp)
81137f04:	e13fff17 	ldw	r4,-4(fp)
81137f08:	2005883a 	mov	r2,r4
81137f0c:	0007883a 	mov	r3,zero
81137f10:	e0bffb15 	stw	r2,-20(fp)
81137f14:	e0fffc15 	stw	r3,-16(fp)
81137f18:	00001006 	br	81137f5c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
81137f1c:	e0bff917 	ldw	r2,-28(fp)
81137f20:	10800f17 	ldw	r2,60(r2)
81137f24:	e0bffa15 	stw	r2,-24(fp)
81137f28:	e0bffa17 	ldw	r2,-24(fp)
81137f2c:	10d00034 	orhi	r3,r2,16384
81137f30:	e0bff917 	ldw	r2,-28(fp)
81137f34:	10c00f15 	stw	r3,60(r2)
81137f38:	e0bff917 	ldw	r2,-28(fp)
81137f3c:	10800317 	ldw	r2,12(r2)
81137f40:	e0bffd15 	stw	r2,-12(fp)
81137f44:	e0bff917 	ldw	r2,-28(fp)
81137f48:	10800b17 	ldw	r2,44(r2)
81137f4c:	e0bffe15 	stw	r2,-8(fp)
81137f50:	e0bffd17 	ldw	r2,-12(fp)
81137f54:	e0fffe17 	ldw	r3,-8(fp)
81137f58:	e0bff915 	stw	r2,-28(fp)
81137f5c:	e0bff917 	ldw	r2,-28(fp)
81137f60:	10c00317 	ldw	r3,12(r2)
81137f64:	e0bffb17 	ldw	r2,-20(fp)
81137f68:	18800426 	beq	r3,r2,81137f7c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
81137f6c:	e0bff917 	ldw	r2,-28(fp)
81137f70:	10c00b17 	ldw	r3,44(r2)
81137f74:	e0bffc17 	ldw	r2,-16(fp)
81137f78:	18bfe81e 	bne	r3,r2,81137f1c <__reset+0xfb117f1c>
81137f7c:	e0bff917 	ldw	r2,-28(fp)
81137f80:	10800f17 	ldw	r2,60(r2)
81137f84:	e0bffa15 	stw	r2,-24(fp)
81137f88:	e0bffa17 	ldw	r2,-24(fp)
81137f8c:	10d00034 	orhi	r3,r2,16384
81137f90:	e0bff917 	ldw	r2,-28(fp)
81137f94:	10c00f15 	stw	r3,60(r2)
81137f98:	0005883a 	mov	r2,zero
81137f9c:	e037883a 	mov	sp,fp
81137fa0:	df000017 	ldw	fp,0(sp)
81137fa4:	dec00104 	addi	sp,sp,4
81137fa8:	f800283a 	ret

81137fac <alt_msgdma_start_prefetcher_with_list_addr>:
81137fac:	deffeb04 	addi	sp,sp,-84
81137fb0:	de00012e 	bgeu	sp,et,81137fb8 <alt_msgdma_start_prefetcher_with_list_addr+0xc>
81137fb4:	003b68fa 	trap	3
81137fb8:	dfc01415 	stw	ra,80(sp)
81137fbc:	df001315 	stw	fp,76(sp)
81137fc0:	df001304 	addi	fp,sp,76
81137fc4:	e13ffb15 	stw	r4,-20(fp)
81137fc8:	e17ffc15 	stw	r5,-16(fp)
81137fcc:	e1bffd15 	stw	r6,-12(fp)
81137fd0:	3807883a 	mov	r3,r7
81137fd4:	e0800217 	ldw	r2,8(fp)
81137fd8:	e0fffe05 	stb	r3,-8(fp)
81137fdc:	e0bfff05 	stb	r2,-4(fp)
81137fe0:	e03fed15 	stw	zero,-76(fp)
81137fe4:	e03fee15 	stw	zero,-72(fp)
81137fe8:	e03fef15 	stw	zero,-68(fp)
81137fec:	e0bffc17 	ldw	r2,-16(fp)
81137ff0:	e0bff815 	stw	r2,-32(fp)
81137ff4:	e0bffd17 	ldw	r2,-12(fp)
81137ff8:	e0bff915 	stw	r2,-28(fp)
81137ffc:	e0bffb17 	ldw	r2,-20(fp)
81138000:	10801817 	ldw	r2,96(r2)
81138004:	e0bff615 	stw	r2,-40(fp)
81138008:	e03ff70d 	sth	zero,-36(fp)
8113800c:	e0bff70b 	ldhu	r2,-36(fp)
81138010:	e0fffa04 	addi	r3,fp,-24
81138014:	180d883a 	mov	r6,r3
81138018:	100b883a 	mov	r5,r2
8113801c:	e13ff617 	ldw	r4,-40(fp)
81138020:	112d1ec0 	call	8112d1ec <OSSemPend>
81138024:	e0bffb17 	ldw	r2,-20(fp)
81138028:	10800617 	ldw	r2,24(r2)
8113802c:	10800037 	ldwio	r2,0(r2)
81138030:	e0bfed15 	stw	r2,-76(fp)
81138034:	e0bfed17 	ldw	r2,-76(fp)
81138038:	1080004c 	andi	r2,r2,1
8113803c:	10000626 	beq	r2,zero,81138058 <alt_msgdma_start_prefetcher_with_list_addr+0xac>
81138040:	e0bffb17 	ldw	r2,-20(fp)
81138044:	10801817 	ldw	r2,96(r2)
81138048:	1009883a 	mov	r4,r2
8113804c:	112d5740 	call	8112d574 <OSSemPost>
81138050:	00bffc04 	movi	r2,-16
81138054:	00009606 	br	811382b0 <alt_msgdma_start_prefetcher_with_list_addr+0x304>
81138058:	00800804 	movi	r2,32
8113805c:	e0bfee15 	stw	r2,-72(fp)
81138060:	0005303a 	rdctl	r2,status
81138064:	e0bff215 	stw	r2,-56(fp)
81138068:	e0fff217 	ldw	r3,-56(fp)
8113806c:	00bfff84 	movi	r2,-2
81138070:	1884703a 	and	r2,r3,r2
81138074:	1001703a 	wrctl	status,r2
81138078:	e0bff217 	ldw	r2,-56(fp)
8113807c:	e0bfef15 	stw	r2,-68(fp)
81138080:	e0bffb17 	ldw	r2,-20(fp)
81138084:	10800317 	ldw	r2,12(r2)
81138088:	10800104 	addi	r2,r2,4
8113808c:	e0ffee17 	ldw	r3,-72(fp)
81138090:	10c00035 	stwio	r3,0(r2)
81138094:	e0bffb17 	ldw	r2,-20(fp)
81138098:	10800317 	ldw	r2,12(r2)
8113809c:	e0fffb17 	ldw	r3,-20(fp)
811380a0:	18c00317 	ldw	r3,12(r3)
811380a4:	18c00037 	ldwio	r3,0(r3)
811380a8:	10c00035 	stwio	r3,0(r2)
811380ac:	e0bfef17 	ldw	r2,-68(fp)
811380b0:	e0bff015 	stw	r2,-64(fp)
811380b4:	e0bff017 	ldw	r2,-64(fp)
811380b8:	1001703a 	wrctl	status,r2
811380bc:	e0bffb17 	ldw	r2,-20(fp)
811380c0:	10800b17 	ldw	r2,44(r2)
811380c4:	10002326 	beq	r2,zero,81138154 <alt_msgdma_start_prefetcher_with_list_addr+0x1a8>
811380c8:	e0bffb17 	ldw	r2,-20(fp)
811380cc:	10c00d17 	ldw	r3,52(r2)
811380d0:	e0bfee17 	ldw	r2,-72(fp)
811380d4:	1884b03a 	or	r2,r3,r2
811380d8:	10800514 	ori	r2,r2,20
811380dc:	e0bfee15 	stw	r2,-72(fp)
811380e0:	e0ffee17 	ldw	r3,-72(fp)
811380e4:	00bff7c4 	movi	r2,-33
811380e8:	1884703a 	and	r2,r3,r2
811380ec:	e0bfee15 	stw	r2,-72(fp)
811380f0:	e0bfed17 	ldw	r2,-76(fp)
811380f4:	10800214 	ori	r2,r2,8
811380f8:	e0bfed15 	stw	r2,-76(fp)
811380fc:	0005303a 	rdctl	r2,status
81138100:	e0bff415 	stw	r2,-48(fp)
81138104:	e0fff417 	ldw	r3,-48(fp)
81138108:	00bfff84 	movi	r2,-2
8113810c:	1884703a 	and	r2,r3,r2
81138110:	1001703a 	wrctl	status,r2
81138114:	e0bff417 	ldw	r2,-48(fp)
81138118:	e0bfef15 	stw	r2,-68(fp)
8113811c:	e0bffb17 	ldw	r2,-20(fp)
81138120:	10800317 	ldw	r2,12(r2)
81138124:	10800104 	addi	r2,r2,4
81138128:	e0ffee17 	ldw	r3,-72(fp)
8113812c:	10c00035 	stwio	r3,0(r2)
81138130:	e0bffb17 	ldw	r2,-20(fp)
81138134:	10800617 	ldw	r2,24(r2)
81138138:	e0ffed17 	ldw	r3,-76(fp)
8113813c:	10c00035 	stwio	r3,0(r2)
81138140:	e0bfef17 	ldw	r2,-68(fp)
81138144:	e0bff115 	stw	r2,-60(fp)
81138148:	e0bff117 	ldw	r2,-60(fp)
8113814c:	1001703a 	wrctl	status,r2
81138150:	00002306 	br	811381e0 <alt_msgdma_start_prefetcher_with_list_addr+0x234>
81138154:	e0bffb17 	ldw	r2,-20(fp)
81138158:	10c00d17 	ldw	r3,52(r2)
8113815c:	e0bfee17 	ldw	r2,-72(fp)
81138160:	1884b03a 	or	r2,r3,r2
81138164:	10800114 	ori	r2,r2,4
81138168:	e0bfee15 	stw	r2,-72(fp)
8113816c:	e0ffee17 	ldw	r3,-72(fp)
81138170:	00bff3c4 	movi	r2,-49
81138174:	1884703a 	and	r2,r3,r2
81138178:	e0bfee15 	stw	r2,-72(fp)
8113817c:	e0ffed17 	ldw	r3,-76(fp)
81138180:	00bffdc4 	movi	r2,-9
81138184:	1884703a 	and	r2,r3,r2
81138188:	e0bfed15 	stw	r2,-76(fp)
8113818c:	0005303a 	rdctl	r2,status
81138190:	e0bff515 	stw	r2,-44(fp)
81138194:	e0fff517 	ldw	r3,-44(fp)
81138198:	00bfff84 	movi	r2,-2
8113819c:	1884703a 	and	r2,r3,r2
811381a0:	1001703a 	wrctl	status,r2
811381a4:	e0bff517 	ldw	r2,-44(fp)
811381a8:	e0bfef15 	stw	r2,-68(fp)
811381ac:	e0bffb17 	ldw	r2,-20(fp)
811381b0:	10800317 	ldw	r2,12(r2)
811381b4:	10800104 	addi	r2,r2,4
811381b8:	e0ffee17 	ldw	r3,-72(fp)
811381bc:	10c00035 	stwio	r3,0(r2)
811381c0:	e0bffb17 	ldw	r2,-20(fp)
811381c4:	10800617 	ldw	r2,24(r2)
811381c8:	e0ffed17 	ldw	r3,-76(fp)
811381cc:	10c00035 	stwio	r3,0(r2)
811381d0:	e0bfef17 	ldw	r2,-68(fp)
811381d4:	e0bff315 	stw	r2,-52(fp)
811381d8:	e0bff317 	ldw	r2,-52(fp)
811381dc:	1001703a 	wrctl	status,r2
811381e0:	e0bffb17 	ldw	r2,-20(fp)
811381e4:	10800617 	ldw	r2,24(r2)
811381e8:	10800104 	addi	r2,r2,4
811381ec:	e0fff817 	ldw	r3,-32(fp)
811381f0:	10c00035 	stwio	r3,0(r2)
811381f4:	e0bffb17 	ldw	r2,-20(fp)
811381f8:	10800617 	ldw	r2,24(r2)
811381fc:	10800204 	addi	r2,r2,8
81138200:	e0fff917 	ldw	r3,-28(fp)
81138204:	10c00035 	stwio	r3,0(r2)
81138208:	e0bffe03 	ldbu	r2,-8(fp)
8113820c:	10000426 	beq	r2,zero,81138220 <alt_msgdma_start_prefetcher_with_list_addr+0x274>
81138210:	e0bfed17 	ldw	r2,-76(fp)
81138214:	10800414 	ori	r2,r2,16
81138218:	e0bfed15 	stw	r2,-76(fp)
8113821c:	00000406 	br	81138230 <alt_msgdma_start_prefetcher_with_list_addr+0x284>
81138220:	e0ffed17 	ldw	r3,-76(fp)
81138224:	00bffbc4 	movi	r2,-17
81138228:	1884703a 	and	r2,r3,r2
8113822c:	e0bfed15 	stw	r2,-76(fp)
81138230:	e0bfff03 	ldbu	r2,-4(fp)
81138234:	10000e26 	beq	r2,zero,81138270 <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
81138238:	e0bfed17 	ldw	r2,-76(fp)
8113823c:	10800094 	ori	r2,r2,2
81138240:	e0bfed15 	stw	r2,-76(fp)
81138244:	e0bffb17 	ldw	r2,-20(fp)
81138248:	10800617 	ldw	r2,24(r2)
8113824c:	10800304 	addi	r2,r2,12
81138250:	10800037 	ldwio	r2,0(r2)
81138254:	10000a1e 	bne	r2,zero,81138280 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
81138258:	e0bffb17 	ldw	r2,-20(fp)
8113825c:	10800617 	ldw	r2,24(r2)
81138260:	10800304 	addi	r2,r2,12
81138264:	00c03fc4 	movi	r3,255
81138268:	10c00035 	stwio	r3,0(r2)
8113826c:	00000406 	br	81138280 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
81138270:	e0ffed17 	ldw	r3,-76(fp)
81138274:	00bfff44 	movi	r2,-3
81138278:	1884703a 	and	r2,r3,r2
8113827c:	e0bfed15 	stw	r2,-76(fp)
81138280:	e0bfed17 	ldw	r2,-76(fp)
81138284:	10800054 	ori	r2,r2,1
81138288:	e0bfed15 	stw	r2,-76(fp)
8113828c:	e0bffb17 	ldw	r2,-20(fp)
81138290:	10800617 	ldw	r2,24(r2)
81138294:	e0ffed17 	ldw	r3,-76(fp)
81138298:	10c00035 	stwio	r3,0(r2)
8113829c:	e0bffb17 	ldw	r2,-20(fp)
811382a0:	10801817 	ldw	r2,96(r2)
811382a4:	1009883a 	mov	r4,r2
811382a8:	112d5740 	call	8112d574 <OSSemPost>
811382ac:	0005883a 	mov	r2,zero
811382b0:	e037883a 	mov	sp,fp
811382b4:	dfc00117 	ldw	ra,4(sp)
811382b8:	df000017 	ldw	fp,0(sp)
811382bc:	dec00204 	addi	sp,sp,8
811382c0:	f800283a 	ret

811382c4 <alt_msgdma_start_prefetcher_with_std_desc_list>:
811382c4:	defff704 	addi	sp,sp,-36
811382c8:	de00012e 	bgeu	sp,et,811382d0 <alt_msgdma_start_prefetcher_with_std_desc_list+0xc>
811382cc:	003b68fa 	trap	3
811382d0:	dfc00815 	stw	ra,32(sp)
811382d4:	df000715 	stw	fp,28(sp)
811382d8:	dc400615 	stw	r17,24(sp)
811382dc:	dc000515 	stw	r16,20(sp)
811382e0:	df000704 	addi	fp,sp,28
811382e4:	e13ffa15 	stw	r4,-24(fp)
811382e8:	e17ffb15 	stw	r5,-20(fp)
811382ec:	3007883a 	mov	r3,r6
811382f0:	3805883a 	mov	r2,r7
811382f4:	e0fffc05 	stb	r3,-16(fp)
811382f8:	e0bffd05 	stb	r2,-12(fp)
811382fc:	e13ffb17 	ldw	r4,-20(fp)
81138300:	1137e300 	call	81137e30 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
81138304:	10000226 	beq	r2,zero,81138310 <alt_msgdma_start_prefetcher_with_std_desc_list+0x4c>
81138308:	00bffa84 	movi	r2,-22
8113830c:	00000b06 	br	8113833c <alt_msgdma_start_prefetcher_with_std_desc_list+0x78>
81138310:	e0bffb17 	ldw	r2,-20(fp)
81138314:	1021883a 	mov	r16,r2
81138318:	0023883a 	mov	r17,zero
8113831c:	e0fffc03 	ldbu	r3,-16(fp)
81138320:	e0bffd03 	ldbu	r2,-12(fp)
81138324:	d8800015 	stw	r2,0(sp)
81138328:	180f883a 	mov	r7,r3
8113832c:	800b883a 	mov	r5,r16
81138330:	880d883a 	mov	r6,r17
81138334:	e13ffa17 	ldw	r4,-24(fp)
81138338:	1137fac0 	call	81137fac <alt_msgdma_start_prefetcher_with_list_addr>
8113833c:	e6fffe04 	addi	sp,fp,-8
81138340:	dfc00317 	ldw	ra,12(sp)
81138344:	df000217 	ldw	fp,8(sp)
81138348:	dc400117 	ldw	r17,4(sp)
8113834c:	dc000017 	ldw	r16,0(sp)
81138350:	dec00404 	addi	sp,sp,16
81138354:	f800283a 	ret

81138358 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
81138358:	defff704 	addi	sp,sp,-36
8113835c:	de00012e 	bgeu	sp,et,81138364 <alt_msgdma_start_prefetcher_with_extd_desc_list+0xc>
81138360:	003b68fa 	trap	3
81138364:	dfc00815 	stw	ra,32(sp)
81138368:	df000715 	stw	fp,28(sp)
8113836c:	dc400615 	stw	r17,24(sp)
81138370:	dc000515 	stw	r16,20(sp)
81138374:	df000704 	addi	fp,sp,28
81138378:	e13ffa15 	stw	r4,-24(fp)
8113837c:	e17ffb15 	stw	r5,-20(fp)
81138380:	3007883a 	mov	r3,r6
81138384:	3805883a 	mov	r2,r7
81138388:	e0fffc05 	stb	r3,-16(fp)
8113838c:	e0bffd05 	stb	r2,-12(fp)
81138390:	e13ffb17 	ldw	r4,-20(fp)
81138394:	1137ed00 	call	81137ed0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
81138398:	10000226 	beq	r2,zero,811383a4 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
8113839c:	00bffa84 	movi	r2,-22
811383a0:	00000b06 	br	811383d0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x78>
811383a4:	e0bffb17 	ldw	r2,-20(fp)
811383a8:	1021883a 	mov	r16,r2
811383ac:	0023883a 	mov	r17,zero
811383b0:	e0fffc03 	ldbu	r3,-16(fp)
811383b4:	e0bffd03 	ldbu	r2,-12(fp)
811383b8:	d8800015 	stw	r2,0(sp)
811383bc:	180f883a 	mov	r7,r3
811383c0:	800b883a 	mov	r5,r16
811383c4:	880d883a 	mov	r6,r17
811383c8:	e13ffa17 	ldw	r4,-24(fp)
811383cc:	1137fac0 	call	81137fac <alt_msgdma_start_prefetcher_with_list_addr>
811383d0:	e6fffe04 	addi	sp,fp,-8
811383d4:	dfc00317 	ldw	ra,12(sp)
811383d8:	df000217 	ldw	fp,8(sp)
811383dc:	dc400117 	ldw	r17,4(sp)
811383e0:	dc000017 	ldw	r16,0(sp)
811383e4:	dec00404 	addi	sp,sp,16
811383e8:	f800283a 	ret

811383ec <alt_msgdma_open>:
811383ec:	defffc04 	addi	sp,sp,-16
811383f0:	de00012e 	bgeu	sp,et,811383f8 <alt_msgdma_open+0xc>
811383f4:	003b68fa 	trap	3
811383f8:	dfc00315 	stw	ra,12(sp)
811383fc:	df000215 	stw	fp,8(sp)
81138400:	df000204 	addi	fp,sp,8
81138404:	e13fff15 	stw	r4,-4(fp)
81138408:	e03ffe15 	stw	zero,-8(fp)
8113840c:	d1603404 	addi	r5,gp,-32560
81138410:	e13fff17 	ldw	r4,-4(fp)
81138414:	1138a600 	call	81138a60 <alt_find_dev>
81138418:	e0bffe15 	stw	r2,-8(fp)
8113841c:	e0bffe17 	ldw	r2,-8(fp)
81138420:	1000041e 	bne	r2,zero,81138434 <alt_msgdma_open+0x48>
81138424:	11366500 	call	81136650 <alt_get_errno>
81138428:	1007883a 	mov	r3,r2
8113842c:	008004c4 	movi	r2,19
81138430:	18800015 	stw	r2,0(r3)
81138434:	e0bffe17 	ldw	r2,-8(fp)
81138438:	e037883a 	mov	sp,fp
8113843c:	dfc00117 	ldw	ra,4(sp)
81138440:	df000017 	ldw	fp,0(sp)
81138444:	dec00204 	addi	sp,sp,8
81138448:	f800283a 	ret

8113844c <alt_msgdma_init>:
8113844c:	defff604 	addi	sp,sp,-40
81138450:	de00012e 	bgeu	sp,et,81138458 <alt_msgdma_init+0xc>
81138454:	003b68fa 	trap	3
81138458:	dfc00915 	stw	ra,36(sp)
8113845c:	df000815 	stw	fp,32(sp)
81138460:	df000804 	addi	fp,sp,32
81138464:	e13ffd15 	stw	r4,-12(fp)
81138468:	e17ffe15 	stw	r5,-8(fp)
8113846c:	e1bfff15 	stw	r6,-4(fp)
81138470:	e0bffd17 	ldw	r2,-12(fp)
81138474:	10801783 	ldbu	r2,94(r2)
81138478:	10803fcc 	andi	r2,r2,255
8113847c:	10000b26 	beq	r2,zero,811384ac <alt_msgdma_init+0x60>
81138480:	e0bffd17 	ldw	r2,-12(fp)
81138484:	10800617 	ldw	r2,24(r2)
81138488:	00c00104 	movi	r3,4
8113848c:	10c00035 	stwio	r3,0(r2)
81138490:	0001883a 	nop
81138494:	e0bffd17 	ldw	r2,-12(fp)
81138498:	10800617 	ldw	r2,24(r2)
8113849c:	10800037 	ldwio	r2,0(r2)
811384a0:	1080010c 	andi	r2,r2,4
811384a4:	1005d0ba 	srai	r2,r2,2
811384a8:	103ffa1e 	bne	r2,zero,81138494 <__reset+0xfb118494>
811384ac:	e0bffd17 	ldw	r2,-12(fp)
811384b0:	10800317 	ldw	r2,12(r2)
811384b4:	10800104 	addi	r2,r2,4
811384b8:	00c00084 	movi	r3,2
811384bc:	10c00035 	stwio	r3,0(r2)
811384c0:	0001883a 	nop
811384c4:	e0bffd17 	ldw	r2,-12(fp)
811384c8:	10800317 	ldw	r2,12(r2)
811384cc:	10800037 	ldwio	r2,0(r2)
811384d0:	1080100c 	andi	r2,r2,64
811384d4:	103ffb1e 	bne	r2,zero,811384c4 <__reset+0xfb1184c4>
811384d8:	e0bffd17 	ldw	r2,-12(fp)
811384dc:	10800317 	ldw	r2,12(r2)
811384e0:	10800104 	addi	r2,r2,4
811384e4:	10800037 	ldwio	r2,0(r2)
811384e8:	1007883a 	mov	r3,r2
811384ec:	00bffbc4 	movi	r2,-17
811384f0:	1884703a 	and	r2,r3,r2
811384f4:	e0bff915 	stw	r2,-28(fp)
811384f8:	e0bff917 	ldw	r2,-28(fp)
811384fc:	10800814 	ori	r2,r2,32
81138500:	e0bff915 	stw	r2,-28(fp)
81138504:	e0bffd17 	ldw	r2,-12(fp)
81138508:	10800317 	ldw	r2,12(r2)
8113850c:	10800104 	addi	r2,r2,4
81138510:	e0fff917 	ldw	r3,-28(fp)
81138514:	10c00035 	stwio	r3,0(r2)
81138518:	e0bffd17 	ldw	r2,-12(fp)
8113851c:	10800317 	ldw	r2,12(r2)
81138520:	e0fffd17 	ldw	r3,-12(fp)
81138524:	18c00317 	ldw	r3,12(r3)
81138528:	18c00037 	ldwio	r3,0(r3)
8113852c:	10c00035 	stwio	r3,0(r2)
81138530:	e0bffd17 	ldw	r2,-12(fp)
81138534:	10801783 	ldbu	r2,94(r2)
81138538:	10803fcc 	andi	r2,r2,255
8113853c:	10000826 	beq	r2,zero,81138560 <alt_msgdma_init+0x114>
81138540:	e0bffd17 	ldw	r2,-12(fp)
81138544:	10800617 	ldw	r2,24(r2)
81138548:	10800404 	addi	r2,r2,16
8113854c:	e0fffd17 	ldw	r3,-12(fp)
81138550:	18c00617 	ldw	r3,24(r3)
81138554:	18c00404 	addi	r3,r3,16
81138558:	18c00037 	ldwio	r3,0(r3)
8113855c:	10c00035 	stwio	r3,0(r2)
81138560:	d1603404 	addi	r5,gp,-32560
81138564:	e13ffd17 	ldw	r4,-12(fp)
81138568:	11388e40 	call	811388e4 <alt_dev_llist_insert>
8113856c:	e0bffd17 	ldw	r2,-12(fp)
81138570:	10801804 	addi	r2,r2,96
81138574:	e0bffb15 	stw	r2,-20(fp)
81138578:	00800044 	movi	r2,1
8113857c:	e0bffc0d 	sth	r2,-16(fp)
81138580:	e0bffc0b 	ldhu	r2,-16(fp)
81138584:	1009883a 	mov	r4,r2
81138588:	112cec40 	call	8112cec4 <OSSemCreate>
8113858c:	1007883a 	mov	r3,r2
81138590:	e0bffb17 	ldw	r2,-20(fp)
81138594:	10c00015 	stw	r3,0(r2)
81138598:	e0bffb17 	ldw	r2,-20(fp)
8113859c:	10800017 	ldw	r2,0(r2)
811385a0:	10000226 	beq	r2,zero,811385ac <alt_msgdma_init+0x160>
811385a4:	0005883a 	mov	r2,zero
811385a8:	00000106 	br	811385b0 <alt_msgdma_init+0x164>
811385ac:	00bfffc4 	movi	r2,-1
811385b0:	e0bffa15 	stw	r2,-24(fp)
811385b4:	e0bffa17 	ldw	r2,-24(fp)
811385b8:	1000081e 	bne	r2,zero,811385dc <alt_msgdma_init+0x190>
811385bc:	d8000015 	stw	zero,0(sp)
811385c0:	e1fffd17 	ldw	r7,-12(fp)
811385c4:	01a044f4 	movhi	r6,33043
811385c8:	319a1904 	addi	r6,r6,26724
811385cc:	e17fff17 	ldw	r5,-4(fp)
811385d0:	e13ffe17 	ldw	r4,-8(fp)
811385d4:	1138cec0 	call	81138cec <alt_ic_isr_register>
811385d8:	00000406 	br	811385ec <alt_msgdma_init+0x1a0>
811385dc:	01204534 	movhi	r4,33044
811385e0:	2132fa04 	addi	r4,r4,-13336
811385e4:	11391040 	call	81139104 <alt_printf>
811385e8:	0001883a 	nop
811385ec:	e037883a 	mov	sp,fp
811385f0:	dfc00117 	ldw	ra,4(sp)
811385f4:	df000017 	ldw	fp,0(sp)
811385f8:	dec00204 	addi	sp,sp,8
811385fc:	f800283a 	ret

81138600 <alt_msgdma_register_callback>:
81138600:	defffb04 	addi	sp,sp,-20
81138604:	de00012e 	bgeu	sp,et,8113860c <alt_msgdma_register_callback+0xc>
81138608:	003b68fa 	trap	3
8113860c:	df000415 	stw	fp,16(sp)
81138610:	df000404 	addi	fp,sp,16
81138614:	e13ffc15 	stw	r4,-16(fp)
81138618:	e17ffd15 	stw	r5,-12(fp)
8113861c:	e1bffe15 	stw	r6,-8(fp)
81138620:	e1ffff15 	stw	r7,-4(fp)
81138624:	e0bffc17 	ldw	r2,-16(fp)
81138628:	e0fffd17 	ldw	r3,-12(fp)
8113862c:	10c00b15 	stw	r3,44(r2)
81138630:	e0bffc17 	ldw	r2,-16(fp)
81138634:	e0ffff17 	ldw	r3,-4(fp)
81138638:	10c00c15 	stw	r3,48(r2)
8113863c:	e0bffc17 	ldw	r2,-16(fp)
81138640:	e0fffe17 	ldw	r3,-8(fp)
81138644:	10c00d15 	stw	r3,52(r2)
81138648:	0001883a 	nop
8113864c:	e037883a 	mov	sp,fp
81138650:	df000017 	ldw	fp,0(sp)
81138654:	dec00104 	addi	sp,sp,4
81138658:	f800283a 	ret

8113865c <alt_msgdma_standard_descriptor_async_transfer>:
8113865c:	defffc04 	addi	sp,sp,-16
81138660:	de00012e 	bgeu	sp,et,81138668 <alt_msgdma_standard_descriptor_async_transfer+0xc>
81138664:	003b68fa 	trap	3
81138668:	dfc00315 	stw	ra,12(sp)
8113866c:	df000215 	stw	fp,8(sp)
81138670:	df000204 	addi	fp,sp,8
81138674:	e13ffe15 	stw	r4,-8(fp)
81138678:	e17fff15 	stw	r5,-4(fp)
8113867c:	000d883a 	mov	r6,zero
81138680:	e17fff17 	ldw	r5,-4(fp)
81138684:	e13ffe17 	ldw	r4,-8(fp)
81138688:	1136be00 	call	81136be0 <alt_msgdma_descriptor_async_transfer>
8113868c:	e037883a 	mov	sp,fp
81138690:	dfc00117 	ldw	ra,4(sp)
81138694:	df000017 	ldw	fp,0(sp)
81138698:	dec00204 	addi	sp,sp,8
8113869c:	f800283a 	ret

811386a0 <alt_msgdma_extended_descriptor_async_transfer>:
811386a0:	defffc04 	addi	sp,sp,-16
811386a4:	de00012e 	bgeu	sp,et,811386ac <alt_msgdma_extended_descriptor_async_transfer+0xc>
811386a8:	003b68fa 	trap	3
811386ac:	dfc00315 	stw	ra,12(sp)
811386b0:	df000215 	stw	fp,8(sp)
811386b4:	df000204 	addi	fp,sp,8
811386b8:	e13ffe15 	stw	r4,-8(fp)
811386bc:	e17fff15 	stw	r5,-4(fp)
811386c0:	e1bfff17 	ldw	r6,-4(fp)
811386c4:	000b883a 	mov	r5,zero
811386c8:	e13ffe17 	ldw	r4,-8(fp)
811386cc:	1136be00 	call	81136be0 <alt_msgdma_descriptor_async_transfer>
811386d0:	e037883a 	mov	sp,fp
811386d4:	dfc00117 	ldw	ra,4(sp)
811386d8:	df000017 	ldw	fp,0(sp)
811386dc:	dec00204 	addi	sp,sp,8
811386e0:	f800283a 	ret

811386e4 <alt_msgdma_standard_descriptor_sync_transfer>:
811386e4:	defffc04 	addi	sp,sp,-16
811386e8:	de00012e 	bgeu	sp,et,811386f0 <alt_msgdma_standard_descriptor_sync_transfer+0xc>
811386ec:	003b68fa 	trap	3
811386f0:	dfc00315 	stw	ra,12(sp)
811386f4:	df000215 	stw	fp,8(sp)
811386f8:	df000204 	addi	fp,sp,8
811386fc:	e13ffe15 	stw	r4,-8(fp)
81138700:	e17fff15 	stw	r5,-4(fp)
81138704:	000d883a 	mov	r6,zero
81138708:	e17fff17 	ldw	r5,-4(fp)
8113870c:	e13ffe17 	ldw	r4,-8(fp)
81138710:	1136f200 	call	81136f20 <alt_msgdma_descriptor_sync_transfer>
81138714:	e037883a 	mov	sp,fp
81138718:	dfc00117 	ldw	ra,4(sp)
8113871c:	df000017 	ldw	fp,0(sp)
81138720:	dec00204 	addi	sp,sp,8
81138724:	f800283a 	ret

81138728 <alt_msgdma_extended_descriptor_sync_transfer>:
81138728:	defffc04 	addi	sp,sp,-16
8113872c:	de00012e 	bgeu	sp,et,81138734 <alt_msgdma_extended_descriptor_sync_transfer+0xc>
81138730:	003b68fa 	trap	3
81138734:	dfc00315 	stw	ra,12(sp)
81138738:	df000215 	stw	fp,8(sp)
8113873c:	df000204 	addi	fp,sp,8
81138740:	e13ffe15 	stw	r4,-8(fp)
81138744:	e17fff15 	stw	r5,-4(fp)
81138748:	e1bfff17 	ldw	r6,-4(fp)
8113874c:	000b883a 	mov	r5,zero
81138750:	e13ffe17 	ldw	r4,-8(fp)
81138754:	1136f200 	call	81136f20 <alt_msgdma_descriptor_sync_transfer>
81138758:	e037883a 	mov	sp,fp
8113875c:	dfc00117 	ldw	ra,4(sp)
81138760:	df000017 	ldw	fp,0(sp)
81138764:	dec00204 	addi	sp,sp,8
81138768:	f800283a 	ret

8113876c <alt_alarm_start>:
8113876c:	defff504 	addi	sp,sp,-44
81138770:	de00012e 	bgeu	sp,et,81138778 <alt_alarm_start+0xc>
81138774:	003b68fa 	trap	3
81138778:	df000a15 	stw	fp,40(sp)
8113877c:	df000a04 	addi	fp,sp,40
81138780:	e13ffc15 	stw	r4,-16(fp)
81138784:	e17ffd15 	stw	r5,-12(fp)
81138788:	e1bffe15 	stw	r6,-8(fp)
8113878c:	e1ffff15 	stw	r7,-4(fp)
81138790:	e03ff615 	stw	zero,-40(fp)
81138794:	d0a06a17 	ldw	r2,-32344(gp)
81138798:	10003c26 	beq	r2,zero,8113888c <alt_alarm_start+0x120>
8113879c:	e0bffc17 	ldw	r2,-16(fp)
811387a0:	10003826 	beq	r2,zero,81138884 <alt_alarm_start+0x118>
811387a4:	e0bffc17 	ldw	r2,-16(fp)
811387a8:	e0fffe17 	ldw	r3,-8(fp)
811387ac:	10c00315 	stw	r3,12(r2)
811387b0:	e0bffc17 	ldw	r2,-16(fp)
811387b4:	e0ffff17 	ldw	r3,-4(fp)
811387b8:	10c00515 	stw	r3,20(r2)
811387bc:	0005303a 	rdctl	r2,status
811387c0:	e0bff915 	stw	r2,-28(fp)
811387c4:	e0fff917 	ldw	r3,-28(fp)
811387c8:	00bfff84 	movi	r2,-2
811387cc:	1884703a 	and	r2,r3,r2
811387d0:	1001703a 	wrctl	status,r2
811387d4:	e0bff917 	ldw	r2,-28(fp)
811387d8:	e0bff815 	stw	r2,-32(fp)
811387dc:	d0a06b17 	ldw	r2,-32340(gp)
811387e0:	e0bff615 	stw	r2,-40(fp)
811387e4:	e0fffd17 	ldw	r3,-12(fp)
811387e8:	e0bff617 	ldw	r2,-40(fp)
811387ec:	1885883a 	add	r2,r3,r2
811387f0:	10c00044 	addi	r3,r2,1
811387f4:	e0bffc17 	ldw	r2,-16(fp)
811387f8:	10c00215 	stw	r3,8(r2)
811387fc:	e0bffc17 	ldw	r2,-16(fp)
81138800:	10c00217 	ldw	r3,8(r2)
81138804:	e0bff617 	ldw	r2,-40(fp)
81138808:	1880042e 	bgeu	r3,r2,8113881c <alt_alarm_start+0xb0>
8113880c:	e0bffc17 	ldw	r2,-16(fp)
81138810:	00c00044 	movi	r3,1
81138814:	10c00405 	stb	r3,16(r2)
81138818:	00000206 	br	81138824 <alt_alarm_start+0xb8>
8113881c:	e0bffc17 	ldw	r2,-16(fp)
81138820:	10000405 	stb	zero,16(r2)
81138824:	e0bffc17 	ldw	r2,-16(fp)
81138828:	d0e01304 	addi	r3,gp,-32692
8113882c:	e0fffa15 	stw	r3,-24(fp)
81138830:	e0bffb15 	stw	r2,-20(fp)
81138834:	e0bffb17 	ldw	r2,-20(fp)
81138838:	e0fffa17 	ldw	r3,-24(fp)
8113883c:	10c00115 	stw	r3,4(r2)
81138840:	e0bffa17 	ldw	r2,-24(fp)
81138844:	10c00017 	ldw	r3,0(r2)
81138848:	e0bffb17 	ldw	r2,-20(fp)
8113884c:	10c00015 	stw	r3,0(r2)
81138850:	e0bffa17 	ldw	r2,-24(fp)
81138854:	10800017 	ldw	r2,0(r2)
81138858:	e0fffb17 	ldw	r3,-20(fp)
8113885c:	10c00115 	stw	r3,4(r2)
81138860:	e0bffa17 	ldw	r2,-24(fp)
81138864:	e0fffb17 	ldw	r3,-20(fp)
81138868:	10c00015 	stw	r3,0(r2)
8113886c:	e0bff817 	ldw	r2,-32(fp)
81138870:	e0bff715 	stw	r2,-36(fp)
81138874:	e0bff717 	ldw	r2,-36(fp)
81138878:	1001703a 	wrctl	status,r2
8113887c:	0005883a 	mov	r2,zero
81138880:	00000306 	br	81138890 <alt_alarm_start+0x124>
81138884:	00bffa84 	movi	r2,-22
81138888:	00000106 	br	81138890 <alt_alarm_start+0x124>
8113888c:	00bfde84 	movi	r2,-134
81138890:	e037883a 	mov	sp,fp
81138894:	df000017 	ldw	fp,0(sp)
81138898:	dec00104 	addi	sp,sp,4
8113889c:	f800283a 	ret

811388a0 <alt_get_errno>:
811388a0:	defffe04 	addi	sp,sp,-8
811388a4:	de00012e 	bgeu	sp,et,811388ac <alt_get_errno+0xc>
811388a8:	003b68fa 	trap	3
811388ac:	dfc00115 	stw	ra,4(sp)
811388b0:	df000015 	stw	fp,0(sp)
811388b4:	d839883a 	mov	fp,sp
811388b8:	d0a01017 	ldw	r2,-32704(gp)
811388bc:	10000326 	beq	r2,zero,811388cc <alt_get_errno+0x2c>
811388c0:	d0a01017 	ldw	r2,-32704(gp)
811388c4:	103ee83a 	callr	r2
811388c8:	00000106 	br	811388d0 <alt_get_errno+0x30>
811388cc:	d0a05e04 	addi	r2,gp,-32392
811388d0:	e037883a 	mov	sp,fp
811388d4:	dfc00117 	ldw	ra,4(sp)
811388d8:	df000017 	ldw	fp,0(sp)
811388dc:	dec00204 	addi	sp,sp,8
811388e0:	f800283a 	ret

811388e4 <alt_dev_llist_insert>:
811388e4:	defffa04 	addi	sp,sp,-24
811388e8:	de00012e 	bgeu	sp,et,811388f0 <alt_dev_llist_insert+0xc>
811388ec:	003b68fa 	trap	3
811388f0:	dfc00515 	stw	ra,20(sp)
811388f4:	df000415 	stw	fp,16(sp)
811388f8:	df000404 	addi	fp,sp,16
811388fc:	e13ffe15 	stw	r4,-8(fp)
81138900:	e17fff15 	stw	r5,-4(fp)
81138904:	e0bffe17 	ldw	r2,-8(fp)
81138908:	10000326 	beq	r2,zero,81138918 <alt_dev_llist_insert+0x34>
8113890c:	e0bffe17 	ldw	r2,-8(fp)
81138910:	10800217 	ldw	r2,8(r2)
81138914:	1000061e 	bne	r2,zero,81138930 <alt_dev_llist_insert+0x4c>
81138918:	11388a00 	call	811388a0 <alt_get_errno>
8113891c:	1007883a 	mov	r3,r2
81138920:	00800584 	movi	r2,22
81138924:	18800015 	stw	r2,0(r3)
81138928:	00bffa84 	movi	r2,-22
8113892c:	00001306 	br	8113897c <alt_dev_llist_insert+0x98>
81138930:	e0bffe17 	ldw	r2,-8(fp)
81138934:	e0ffff17 	ldw	r3,-4(fp)
81138938:	e0fffc15 	stw	r3,-16(fp)
8113893c:	e0bffd15 	stw	r2,-12(fp)
81138940:	e0bffd17 	ldw	r2,-12(fp)
81138944:	e0fffc17 	ldw	r3,-16(fp)
81138948:	10c00115 	stw	r3,4(r2)
8113894c:	e0bffc17 	ldw	r2,-16(fp)
81138950:	10c00017 	ldw	r3,0(r2)
81138954:	e0bffd17 	ldw	r2,-12(fp)
81138958:	10c00015 	stw	r3,0(r2)
8113895c:	e0bffc17 	ldw	r2,-16(fp)
81138960:	10800017 	ldw	r2,0(r2)
81138964:	e0fffd17 	ldw	r3,-12(fp)
81138968:	10c00115 	stw	r3,4(r2)
8113896c:	e0bffc17 	ldw	r2,-16(fp)
81138970:	e0fffd17 	ldw	r3,-12(fp)
81138974:	10c00015 	stw	r3,0(r2)
81138978:	0005883a 	mov	r2,zero
8113897c:	e037883a 	mov	sp,fp
81138980:	dfc00117 	ldw	ra,4(sp)
81138984:	df000017 	ldw	fp,0(sp)
81138988:	dec00204 	addi	sp,sp,8
8113898c:	f800283a 	ret

81138990 <_do_ctors>:
81138990:	defffd04 	addi	sp,sp,-12
81138994:	de00012e 	bgeu	sp,et,8113899c <_do_ctors+0xc>
81138998:	003b68fa 	trap	3
8113899c:	dfc00215 	stw	ra,8(sp)
811389a0:	df000115 	stw	fp,4(sp)
811389a4:	df000104 	addi	fp,sp,4
811389a8:	00a04534 	movhi	r2,33044
811389ac:	10a75704 	addi	r2,r2,-25252
811389b0:	e0bfff15 	stw	r2,-4(fp)
811389b4:	00000606 	br	811389d0 <_do_ctors+0x40>
811389b8:	e0bfff17 	ldw	r2,-4(fp)
811389bc:	10800017 	ldw	r2,0(r2)
811389c0:	103ee83a 	callr	r2
811389c4:	e0bfff17 	ldw	r2,-4(fp)
811389c8:	10bfff04 	addi	r2,r2,-4
811389cc:	e0bfff15 	stw	r2,-4(fp)
811389d0:	e0ffff17 	ldw	r3,-4(fp)
811389d4:	00a04534 	movhi	r2,33044
811389d8:	10a75804 	addi	r2,r2,-25248
811389dc:	18bff62e 	bgeu	r3,r2,811389b8 <__reset+0xfb1189b8>
811389e0:	0001883a 	nop
811389e4:	e037883a 	mov	sp,fp
811389e8:	dfc00117 	ldw	ra,4(sp)
811389ec:	df000017 	ldw	fp,0(sp)
811389f0:	dec00204 	addi	sp,sp,8
811389f4:	f800283a 	ret

811389f8 <_do_dtors>:
811389f8:	defffd04 	addi	sp,sp,-12
811389fc:	de00012e 	bgeu	sp,et,81138a04 <_do_dtors+0xc>
81138a00:	003b68fa 	trap	3
81138a04:	dfc00215 	stw	ra,8(sp)
81138a08:	df000115 	stw	fp,4(sp)
81138a0c:	df000104 	addi	fp,sp,4
81138a10:	00a04534 	movhi	r2,33044
81138a14:	10a75704 	addi	r2,r2,-25252
81138a18:	e0bfff15 	stw	r2,-4(fp)
81138a1c:	00000606 	br	81138a38 <_do_dtors+0x40>
81138a20:	e0bfff17 	ldw	r2,-4(fp)
81138a24:	10800017 	ldw	r2,0(r2)
81138a28:	103ee83a 	callr	r2
81138a2c:	e0bfff17 	ldw	r2,-4(fp)
81138a30:	10bfff04 	addi	r2,r2,-4
81138a34:	e0bfff15 	stw	r2,-4(fp)
81138a38:	e0ffff17 	ldw	r3,-4(fp)
81138a3c:	00a04534 	movhi	r2,33044
81138a40:	10a75804 	addi	r2,r2,-25248
81138a44:	18bff62e 	bgeu	r3,r2,81138a20 <__reset+0xfb118a20>
81138a48:	0001883a 	nop
81138a4c:	e037883a 	mov	sp,fp
81138a50:	dfc00117 	ldw	ra,4(sp)
81138a54:	df000017 	ldw	fp,0(sp)
81138a58:	dec00204 	addi	sp,sp,8
81138a5c:	f800283a 	ret

81138a60 <alt_find_dev>:
81138a60:	defffa04 	addi	sp,sp,-24
81138a64:	de00012e 	bgeu	sp,et,81138a6c <alt_find_dev+0xc>
81138a68:	003b68fa 	trap	3
81138a6c:	dfc00515 	stw	ra,20(sp)
81138a70:	df000415 	stw	fp,16(sp)
81138a74:	df000404 	addi	fp,sp,16
81138a78:	e13ffe15 	stw	r4,-8(fp)
81138a7c:	e17fff15 	stw	r5,-4(fp)
81138a80:	e0bfff17 	ldw	r2,-4(fp)
81138a84:	10800017 	ldw	r2,0(r2)
81138a88:	e0bffc15 	stw	r2,-16(fp)
81138a8c:	e13ffe17 	ldw	r4,-8(fp)
81138a90:	11118240 	call	81111824 <strlen>
81138a94:	10800044 	addi	r2,r2,1
81138a98:	e0bffd15 	stw	r2,-12(fp)
81138a9c:	00000d06 	br	81138ad4 <alt_find_dev+0x74>
81138aa0:	e0bffc17 	ldw	r2,-16(fp)
81138aa4:	10800217 	ldw	r2,8(r2)
81138aa8:	e0fffd17 	ldw	r3,-12(fp)
81138aac:	180d883a 	mov	r6,r3
81138ab0:	e17ffe17 	ldw	r5,-8(fp)
81138ab4:	1009883a 	mov	r4,r2
81138ab8:	11398880 	call	81139888 <memcmp>
81138abc:	1000021e 	bne	r2,zero,81138ac8 <alt_find_dev+0x68>
81138ac0:	e0bffc17 	ldw	r2,-16(fp)
81138ac4:	00000706 	br	81138ae4 <alt_find_dev+0x84>
81138ac8:	e0bffc17 	ldw	r2,-16(fp)
81138acc:	10800017 	ldw	r2,0(r2)
81138ad0:	e0bffc15 	stw	r2,-16(fp)
81138ad4:	e0fffc17 	ldw	r3,-16(fp)
81138ad8:	e0bfff17 	ldw	r2,-4(fp)
81138adc:	18bff01e 	bne	r3,r2,81138aa0 <__reset+0xfb118aa0>
81138ae0:	0005883a 	mov	r2,zero
81138ae4:	e037883a 	mov	sp,fp
81138ae8:	dfc00117 	ldw	ra,4(sp)
81138aec:	df000017 	ldw	fp,0(sp)
81138af0:	dec00204 	addi	sp,sp,8
81138af4:	f800283a 	ret

81138af8 <alt_find_file>:
81138af8:	defffb04 	addi	sp,sp,-20
81138afc:	de00012e 	bgeu	sp,et,81138b04 <alt_find_file+0xc>
81138b00:	003b68fa 	trap	3
81138b04:	dfc00415 	stw	ra,16(sp)
81138b08:	df000315 	stw	fp,12(sp)
81138b0c:	df000304 	addi	fp,sp,12
81138b10:	e13fff15 	stw	r4,-4(fp)
81138b14:	d0a00b17 	ldw	r2,-32724(gp)
81138b18:	e0bffd15 	stw	r2,-12(fp)
81138b1c:	00003106 	br	81138be4 <alt_find_file+0xec>
81138b20:	e0bffd17 	ldw	r2,-12(fp)
81138b24:	10800217 	ldw	r2,8(r2)
81138b28:	1009883a 	mov	r4,r2
81138b2c:	11118240 	call	81111824 <strlen>
81138b30:	e0bffe15 	stw	r2,-8(fp)
81138b34:	e0bffd17 	ldw	r2,-12(fp)
81138b38:	10c00217 	ldw	r3,8(r2)
81138b3c:	e0bffe17 	ldw	r2,-8(fp)
81138b40:	10bfffc4 	addi	r2,r2,-1
81138b44:	1885883a 	add	r2,r3,r2
81138b48:	10800003 	ldbu	r2,0(r2)
81138b4c:	10803fcc 	andi	r2,r2,255
81138b50:	1080201c 	xori	r2,r2,128
81138b54:	10bfe004 	addi	r2,r2,-128
81138b58:	10800bd8 	cmpnei	r2,r2,47
81138b5c:	1000031e 	bne	r2,zero,81138b6c <alt_find_file+0x74>
81138b60:	e0bffe17 	ldw	r2,-8(fp)
81138b64:	10bfffc4 	addi	r2,r2,-1
81138b68:	e0bffe15 	stw	r2,-8(fp)
81138b6c:	e0bffe17 	ldw	r2,-8(fp)
81138b70:	e0ffff17 	ldw	r3,-4(fp)
81138b74:	1885883a 	add	r2,r3,r2
81138b78:	10800003 	ldbu	r2,0(r2)
81138b7c:	10803fcc 	andi	r2,r2,255
81138b80:	1080201c 	xori	r2,r2,128
81138b84:	10bfe004 	addi	r2,r2,-128
81138b88:	10800be0 	cmpeqi	r2,r2,47
81138b8c:	1000081e 	bne	r2,zero,81138bb0 <alt_find_file+0xb8>
81138b90:	e0bffe17 	ldw	r2,-8(fp)
81138b94:	e0ffff17 	ldw	r3,-4(fp)
81138b98:	1885883a 	add	r2,r3,r2
81138b9c:	10800003 	ldbu	r2,0(r2)
81138ba0:	10803fcc 	andi	r2,r2,255
81138ba4:	1080201c 	xori	r2,r2,128
81138ba8:	10bfe004 	addi	r2,r2,-128
81138bac:	10000a1e 	bne	r2,zero,81138bd8 <alt_find_file+0xe0>
81138bb0:	e0bffd17 	ldw	r2,-12(fp)
81138bb4:	10800217 	ldw	r2,8(r2)
81138bb8:	e0fffe17 	ldw	r3,-8(fp)
81138bbc:	180d883a 	mov	r6,r3
81138bc0:	e17fff17 	ldw	r5,-4(fp)
81138bc4:	1009883a 	mov	r4,r2
81138bc8:	11398880 	call	81139888 <memcmp>
81138bcc:	1000021e 	bne	r2,zero,81138bd8 <alt_find_file+0xe0>
81138bd0:	e0bffd17 	ldw	r2,-12(fp)
81138bd4:	00000706 	br	81138bf4 <alt_find_file+0xfc>
81138bd8:	e0bffd17 	ldw	r2,-12(fp)
81138bdc:	10800017 	ldw	r2,0(r2)
81138be0:	e0bffd15 	stw	r2,-12(fp)
81138be4:	e0fffd17 	ldw	r3,-12(fp)
81138be8:	d0a00b04 	addi	r2,gp,-32724
81138bec:	18bfcc1e 	bne	r3,r2,81138b20 <__reset+0xfb118b20>
81138bf0:	0005883a 	mov	r2,zero
81138bf4:	e037883a 	mov	sp,fp
81138bf8:	dfc00117 	ldw	ra,4(sp)
81138bfc:	df000017 	ldw	fp,0(sp)
81138c00:	dec00204 	addi	sp,sp,8
81138c04:	f800283a 	ret

81138c08 <alt_get_fd>:
81138c08:	defff904 	addi	sp,sp,-28
81138c0c:	de00012e 	bgeu	sp,et,81138c14 <alt_get_fd+0xc>
81138c10:	003b68fa 	trap	3
81138c14:	dfc00615 	stw	ra,24(sp)
81138c18:	df000515 	stw	fp,20(sp)
81138c1c:	df000504 	addi	fp,sp,20
81138c20:	e13fff15 	stw	r4,-4(fp)
81138c24:	00bffa04 	movi	r2,-24
81138c28:	e0bffc15 	stw	r2,-16(fp)
81138c2c:	d0a06517 	ldw	r2,-32364(gp)
81138c30:	e0bffd15 	stw	r2,-12(fp)
81138c34:	e03ffe0d 	sth	zero,-8(fp)
81138c38:	e0bffe0b 	ldhu	r2,-8(fp)
81138c3c:	e0fffe84 	addi	r3,fp,-6
81138c40:	180d883a 	mov	r6,r3
81138c44:	100b883a 	mov	r5,r2
81138c48:	e13ffd17 	ldw	r4,-12(fp)
81138c4c:	112d1ec0 	call	8112d1ec <OSSemPend>
81138c50:	e03ffb15 	stw	zero,-20(fp)
81138c54:	00001906 	br	81138cbc <alt_get_fd+0xb4>
81138c58:	00a04534 	movhi	r2,33044
81138c5c:	10b53604 	addi	r2,r2,-11048
81138c60:	e0fffb17 	ldw	r3,-20(fp)
81138c64:	18c00324 	muli	r3,r3,12
81138c68:	10c5883a 	add	r2,r2,r3
81138c6c:	10800017 	ldw	r2,0(r2)
81138c70:	10000f1e 	bne	r2,zero,81138cb0 <alt_get_fd+0xa8>
81138c74:	00a04534 	movhi	r2,33044
81138c78:	10b53604 	addi	r2,r2,-11048
81138c7c:	e0fffb17 	ldw	r3,-20(fp)
81138c80:	18c00324 	muli	r3,r3,12
81138c84:	10c5883a 	add	r2,r2,r3
81138c88:	e0ffff17 	ldw	r3,-4(fp)
81138c8c:	10c00015 	stw	r3,0(r2)
81138c90:	d0e00f17 	ldw	r3,-32708(gp)
81138c94:	e0bffb17 	ldw	r2,-20(fp)
81138c98:	1880020e 	bge	r3,r2,81138ca4 <alt_get_fd+0x9c>
81138c9c:	e0bffb17 	ldw	r2,-20(fp)
81138ca0:	d0a00f15 	stw	r2,-32708(gp)
81138ca4:	e0bffb17 	ldw	r2,-20(fp)
81138ca8:	e0bffc15 	stw	r2,-16(fp)
81138cac:	00000606 	br	81138cc8 <alt_get_fd+0xc0>
81138cb0:	e0bffb17 	ldw	r2,-20(fp)
81138cb4:	10800044 	addi	r2,r2,1
81138cb8:	e0bffb15 	stw	r2,-20(fp)
81138cbc:	e0bffb17 	ldw	r2,-20(fp)
81138cc0:	10800810 	cmplti	r2,r2,32
81138cc4:	103fe41e 	bne	r2,zero,81138c58 <__reset+0xfb118c58>
81138cc8:	d0a06517 	ldw	r2,-32364(gp)
81138ccc:	1009883a 	mov	r4,r2
81138cd0:	112d5740 	call	8112d574 <OSSemPost>
81138cd4:	e0bffc17 	ldw	r2,-16(fp)
81138cd8:	e037883a 	mov	sp,fp
81138cdc:	dfc00117 	ldw	ra,4(sp)
81138ce0:	df000017 	ldw	fp,0(sp)
81138ce4:	dec00204 	addi	sp,sp,8
81138ce8:	f800283a 	ret

81138cec <alt_ic_isr_register>:
81138cec:	defff904 	addi	sp,sp,-28
81138cf0:	de00012e 	bgeu	sp,et,81138cf8 <alt_ic_isr_register+0xc>
81138cf4:	003b68fa 	trap	3
81138cf8:	dfc00615 	stw	ra,24(sp)
81138cfc:	df000515 	stw	fp,20(sp)
81138d00:	df000504 	addi	fp,sp,20
81138d04:	e13ffc15 	stw	r4,-16(fp)
81138d08:	e17ffd15 	stw	r5,-12(fp)
81138d0c:	e1bffe15 	stw	r6,-8(fp)
81138d10:	e1ffff15 	stw	r7,-4(fp)
81138d14:	e0800217 	ldw	r2,8(fp)
81138d18:	d8800015 	stw	r2,0(sp)
81138d1c:	e1ffff17 	ldw	r7,-4(fp)
81138d20:	e1bffe17 	ldw	r6,-8(fp)
81138d24:	e17ffd17 	ldw	r5,-12(fp)
81138d28:	e13ffc17 	ldw	r4,-16(fp)
81138d2c:	1138ebc0 	call	81138ebc <alt_iic_isr_register>
81138d30:	e037883a 	mov	sp,fp
81138d34:	dfc00117 	ldw	ra,4(sp)
81138d38:	df000017 	ldw	fp,0(sp)
81138d3c:	dec00204 	addi	sp,sp,8
81138d40:	f800283a 	ret

81138d44 <alt_ic_irq_enable>:
81138d44:	defff904 	addi	sp,sp,-28
81138d48:	de00012e 	bgeu	sp,et,81138d50 <alt_ic_irq_enable+0xc>
81138d4c:	003b68fa 	trap	3
81138d50:	df000615 	stw	fp,24(sp)
81138d54:	df000604 	addi	fp,sp,24
81138d58:	e13ffe15 	stw	r4,-8(fp)
81138d5c:	e17fff15 	stw	r5,-4(fp)
81138d60:	e0bfff17 	ldw	r2,-4(fp)
81138d64:	e0bffa15 	stw	r2,-24(fp)
81138d68:	0005303a 	rdctl	r2,status
81138d6c:	e0bffb15 	stw	r2,-20(fp)
81138d70:	e0fffb17 	ldw	r3,-20(fp)
81138d74:	00bfff84 	movi	r2,-2
81138d78:	1884703a 	and	r2,r3,r2
81138d7c:	1001703a 	wrctl	status,r2
81138d80:	e0bffb17 	ldw	r2,-20(fp)
81138d84:	e0bffc15 	stw	r2,-16(fp)
81138d88:	00c00044 	movi	r3,1
81138d8c:	e0bffa17 	ldw	r2,-24(fp)
81138d90:	1884983a 	sll	r2,r3,r2
81138d94:	1007883a 	mov	r3,r2
81138d98:	d0a06617 	ldw	r2,-32360(gp)
81138d9c:	1884b03a 	or	r2,r3,r2
81138da0:	d0a06615 	stw	r2,-32360(gp)
81138da4:	d0a06617 	ldw	r2,-32360(gp)
81138da8:	100170fa 	wrctl	ienable,r2
81138dac:	e0bffc17 	ldw	r2,-16(fp)
81138db0:	e0bffd15 	stw	r2,-12(fp)
81138db4:	e0bffd17 	ldw	r2,-12(fp)
81138db8:	1001703a 	wrctl	status,r2
81138dbc:	0005883a 	mov	r2,zero
81138dc0:	0001883a 	nop
81138dc4:	e037883a 	mov	sp,fp
81138dc8:	df000017 	ldw	fp,0(sp)
81138dcc:	dec00104 	addi	sp,sp,4
81138dd0:	f800283a 	ret

81138dd4 <alt_ic_irq_disable>:
81138dd4:	defff904 	addi	sp,sp,-28
81138dd8:	de00012e 	bgeu	sp,et,81138de0 <alt_ic_irq_disable+0xc>
81138ddc:	003b68fa 	trap	3
81138de0:	df000615 	stw	fp,24(sp)
81138de4:	df000604 	addi	fp,sp,24
81138de8:	e13ffe15 	stw	r4,-8(fp)
81138dec:	e17fff15 	stw	r5,-4(fp)
81138df0:	e0bfff17 	ldw	r2,-4(fp)
81138df4:	e0bffa15 	stw	r2,-24(fp)
81138df8:	0005303a 	rdctl	r2,status
81138dfc:	e0bffb15 	stw	r2,-20(fp)
81138e00:	e0fffb17 	ldw	r3,-20(fp)
81138e04:	00bfff84 	movi	r2,-2
81138e08:	1884703a 	and	r2,r3,r2
81138e0c:	1001703a 	wrctl	status,r2
81138e10:	e0bffb17 	ldw	r2,-20(fp)
81138e14:	e0bffc15 	stw	r2,-16(fp)
81138e18:	00c00044 	movi	r3,1
81138e1c:	e0bffa17 	ldw	r2,-24(fp)
81138e20:	1884983a 	sll	r2,r3,r2
81138e24:	0084303a 	nor	r2,zero,r2
81138e28:	1007883a 	mov	r3,r2
81138e2c:	d0a06617 	ldw	r2,-32360(gp)
81138e30:	1884703a 	and	r2,r3,r2
81138e34:	d0a06615 	stw	r2,-32360(gp)
81138e38:	d0a06617 	ldw	r2,-32360(gp)
81138e3c:	100170fa 	wrctl	ienable,r2
81138e40:	e0bffc17 	ldw	r2,-16(fp)
81138e44:	e0bffd15 	stw	r2,-12(fp)
81138e48:	e0bffd17 	ldw	r2,-12(fp)
81138e4c:	1001703a 	wrctl	status,r2
81138e50:	0005883a 	mov	r2,zero
81138e54:	0001883a 	nop
81138e58:	e037883a 	mov	sp,fp
81138e5c:	df000017 	ldw	fp,0(sp)
81138e60:	dec00104 	addi	sp,sp,4
81138e64:	f800283a 	ret

81138e68 <alt_ic_irq_enabled>:
81138e68:	defffc04 	addi	sp,sp,-16
81138e6c:	de00012e 	bgeu	sp,et,81138e74 <alt_ic_irq_enabled+0xc>
81138e70:	003b68fa 	trap	3
81138e74:	df000315 	stw	fp,12(sp)
81138e78:	df000304 	addi	fp,sp,12
81138e7c:	e13ffe15 	stw	r4,-8(fp)
81138e80:	e17fff15 	stw	r5,-4(fp)
81138e84:	000530fa 	rdctl	r2,ienable
81138e88:	e0bffd15 	stw	r2,-12(fp)
81138e8c:	00c00044 	movi	r3,1
81138e90:	e0bfff17 	ldw	r2,-4(fp)
81138e94:	1884983a 	sll	r2,r3,r2
81138e98:	1007883a 	mov	r3,r2
81138e9c:	e0bffd17 	ldw	r2,-12(fp)
81138ea0:	1884703a 	and	r2,r3,r2
81138ea4:	1004c03a 	cmpne	r2,r2,zero
81138ea8:	10803fcc 	andi	r2,r2,255
81138eac:	e037883a 	mov	sp,fp
81138eb0:	df000017 	ldw	fp,0(sp)
81138eb4:	dec00104 	addi	sp,sp,4
81138eb8:	f800283a 	ret

81138ebc <alt_iic_isr_register>:
81138ebc:	defff504 	addi	sp,sp,-44
81138ec0:	de00012e 	bgeu	sp,et,81138ec8 <alt_iic_isr_register+0xc>
81138ec4:	003b68fa 	trap	3
81138ec8:	dfc00a15 	stw	ra,40(sp)
81138ecc:	df000915 	stw	fp,36(sp)
81138ed0:	df000904 	addi	fp,sp,36
81138ed4:	e13ffc15 	stw	r4,-16(fp)
81138ed8:	e17ffd15 	stw	r5,-12(fp)
81138edc:	e1bffe15 	stw	r6,-8(fp)
81138ee0:	e1ffff15 	stw	r7,-4(fp)
81138ee4:	00bffa84 	movi	r2,-22
81138ee8:	e0bff715 	stw	r2,-36(fp)
81138eec:	e0bffd17 	ldw	r2,-12(fp)
81138ef0:	e0bff815 	stw	r2,-32(fp)
81138ef4:	e0bff817 	ldw	r2,-32(fp)
81138ef8:	10800808 	cmpgei	r2,r2,32
81138efc:	1000271e 	bne	r2,zero,81138f9c <alt_iic_isr_register+0xe0>
81138f00:	0005303a 	rdctl	r2,status
81138f04:	e0bffb15 	stw	r2,-20(fp)
81138f08:	e0fffb17 	ldw	r3,-20(fp)
81138f0c:	00bfff84 	movi	r2,-2
81138f10:	1884703a 	and	r2,r3,r2
81138f14:	1001703a 	wrctl	status,r2
81138f18:	e0bffb17 	ldw	r2,-20(fp)
81138f1c:	e0bffa15 	stw	r2,-24(fp)
81138f20:	00a04574 	movhi	r2,33045
81138f24:	10896404 	addi	r2,r2,9616
81138f28:	e0fff817 	ldw	r3,-32(fp)
81138f2c:	180690fa 	slli	r3,r3,3
81138f30:	10c5883a 	add	r2,r2,r3
81138f34:	e0fffe17 	ldw	r3,-8(fp)
81138f38:	10c00015 	stw	r3,0(r2)
81138f3c:	00a04574 	movhi	r2,33045
81138f40:	10896404 	addi	r2,r2,9616
81138f44:	e0fff817 	ldw	r3,-32(fp)
81138f48:	180690fa 	slli	r3,r3,3
81138f4c:	10c5883a 	add	r2,r2,r3
81138f50:	10800104 	addi	r2,r2,4
81138f54:	e0ffff17 	ldw	r3,-4(fp)
81138f58:	10c00015 	stw	r3,0(r2)
81138f5c:	e0bffe17 	ldw	r2,-8(fp)
81138f60:	10000526 	beq	r2,zero,81138f78 <alt_iic_isr_register+0xbc>
81138f64:	e0bff817 	ldw	r2,-32(fp)
81138f68:	100b883a 	mov	r5,r2
81138f6c:	e13ffc17 	ldw	r4,-16(fp)
81138f70:	1138d440 	call	81138d44 <alt_ic_irq_enable>
81138f74:	00000406 	br	81138f88 <alt_iic_isr_register+0xcc>
81138f78:	e0bff817 	ldw	r2,-32(fp)
81138f7c:	100b883a 	mov	r5,r2
81138f80:	e13ffc17 	ldw	r4,-16(fp)
81138f84:	1138dd40 	call	81138dd4 <alt_ic_irq_disable>
81138f88:	e0bff715 	stw	r2,-36(fp)
81138f8c:	e0bffa17 	ldw	r2,-24(fp)
81138f90:	e0bff915 	stw	r2,-28(fp)
81138f94:	e0bff917 	ldw	r2,-28(fp)
81138f98:	1001703a 	wrctl	status,r2
81138f9c:	e0bff717 	ldw	r2,-36(fp)
81138fa0:	e037883a 	mov	sp,fp
81138fa4:	dfc00117 	ldw	ra,4(sp)
81138fa8:	df000017 	ldw	fp,0(sp)
81138fac:	dec00204 	addi	sp,sp,8
81138fb0:	f800283a 	ret

81138fb4 <alt_open_fd>:
81138fb4:	defff904 	addi	sp,sp,-28
81138fb8:	de00012e 	bgeu	sp,et,81138fc0 <alt_open_fd+0xc>
81138fbc:	003b68fa 	trap	3
81138fc0:	dfc00615 	stw	ra,24(sp)
81138fc4:	df000515 	stw	fp,20(sp)
81138fc8:	df000504 	addi	fp,sp,20
81138fcc:	e13ffc15 	stw	r4,-16(fp)
81138fd0:	e17ffd15 	stw	r5,-12(fp)
81138fd4:	e1bffe15 	stw	r6,-8(fp)
81138fd8:	e1ffff15 	stw	r7,-4(fp)
81138fdc:	e1bfff17 	ldw	r6,-4(fp)
81138fe0:	e17ffe17 	ldw	r5,-8(fp)
81138fe4:	e13ffd17 	ldw	r4,-12(fp)
81138fe8:	1125db00 	call	81125db0 <open>
81138fec:	e0bffb15 	stw	r2,-20(fp)
81138ff0:	e0bffb17 	ldw	r2,-20(fp)
81138ff4:	10001c16 	blt	r2,zero,81139068 <alt_open_fd+0xb4>
81138ff8:	00a04534 	movhi	r2,33044
81138ffc:	10b53604 	addi	r2,r2,-11048
81139000:	e0fffb17 	ldw	r3,-20(fp)
81139004:	18c00324 	muli	r3,r3,12
81139008:	10c5883a 	add	r2,r2,r3
8113900c:	10c00017 	ldw	r3,0(r2)
81139010:	e0bffc17 	ldw	r2,-16(fp)
81139014:	10c00015 	stw	r3,0(r2)
81139018:	00a04534 	movhi	r2,33044
8113901c:	10b53604 	addi	r2,r2,-11048
81139020:	e0fffb17 	ldw	r3,-20(fp)
81139024:	18c00324 	muli	r3,r3,12
81139028:	10c5883a 	add	r2,r2,r3
8113902c:	10800104 	addi	r2,r2,4
81139030:	10c00017 	ldw	r3,0(r2)
81139034:	e0bffc17 	ldw	r2,-16(fp)
81139038:	10c00115 	stw	r3,4(r2)
8113903c:	00a04534 	movhi	r2,33044
81139040:	10b53604 	addi	r2,r2,-11048
81139044:	e0fffb17 	ldw	r3,-20(fp)
81139048:	18c00324 	muli	r3,r3,12
8113904c:	10c5883a 	add	r2,r2,r3
81139050:	10800204 	addi	r2,r2,8
81139054:	10c00017 	ldw	r3,0(r2)
81139058:	e0bffc17 	ldw	r2,-16(fp)
8113905c:	10c00215 	stw	r3,8(r2)
81139060:	e13ffb17 	ldw	r4,-20(fp)
81139064:	11260540 	call	81126054 <alt_release_fd>
81139068:	0001883a 	nop
8113906c:	e037883a 	mov	sp,fp
81139070:	dfc00117 	ldw	ra,4(sp)
81139074:	df000017 	ldw	fp,0(sp)
81139078:	dec00204 	addi	sp,sp,8
8113907c:	f800283a 	ret

81139080 <alt_io_redirect>:
81139080:	defffb04 	addi	sp,sp,-20
81139084:	de00012e 	bgeu	sp,et,8113908c <alt_io_redirect+0xc>
81139088:	003b68fa 	trap	3
8113908c:	dfc00415 	stw	ra,16(sp)
81139090:	df000315 	stw	fp,12(sp)
81139094:	df000304 	addi	fp,sp,12
81139098:	e13ffd15 	stw	r4,-12(fp)
8113909c:	e17ffe15 	stw	r5,-8(fp)
811390a0:	e1bfff15 	stw	r6,-4(fp)
811390a4:	01c07fc4 	movi	r7,511
811390a8:	01800044 	movi	r6,1
811390ac:	e17ffd17 	ldw	r5,-12(fp)
811390b0:	01204534 	movhi	r4,33044
811390b4:	21353904 	addi	r4,r4,-11036
811390b8:	1138fb40 	call	81138fb4 <alt_open_fd>
811390bc:	01c07fc4 	movi	r7,511
811390c0:	000d883a 	mov	r6,zero
811390c4:	e17ffe17 	ldw	r5,-8(fp)
811390c8:	01204534 	movhi	r4,33044
811390cc:	21353604 	addi	r4,r4,-11048
811390d0:	1138fb40 	call	81138fb4 <alt_open_fd>
811390d4:	01c07fc4 	movi	r7,511
811390d8:	01800044 	movi	r6,1
811390dc:	e17fff17 	ldw	r5,-4(fp)
811390e0:	01204534 	movhi	r4,33044
811390e4:	21353c04 	addi	r4,r4,-11024
811390e8:	1138fb40 	call	81138fb4 <alt_open_fd>
811390ec:	0001883a 	nop
811390f0:	e037883a 	mov	sp,fp
811390f4:	dfc00117 	ldw	ra,4(sp)
811390f8:	df000017 	ldw	fp,0(sp)
811390fc:	dec00204 	addi	sp,sp,8
81139100:	f800283a 	ret

81139104 <alt_printf>:
81139104:	defff204 	addi	sp,sp,-56
81139108:	de00012e 	bgeu	sp,et,81139110 <alt_printf+0xc>
8113910c:	003b68fa 	trap	3
81139110:	dfc00a15 	stw	ra,40(sp)
81139114:	df000915 	stw	fp,36(sp)
81139118:	df000904 	addi	fp,sp,36
8113911c:	e13fff15 	stw	r4,-4(fp)
81139120:	e1400215 	stw	r5,8(fp)
81139124:	e1800315 	stw	r6,12(fp)
81139128:	e1c00415 	stw	r7,16(fp)
8113912c:	e0800204 	addi	r2,fp,8
81139130:	e0bffe15 	stw	r2,-8(fp)
81139134:	e0bfff17 	ldw	r2,-4(fp)
81139138:	e0bff715 	stw	r2,-36(fp)
8113913c:	00006f06 	br	811392fc <alt_printf+0x1f8>
81139140:	e0bff807 	ldb	r2,-32(fp)
81139144:	10800960 	cmpeqi	r2,r2,37
81139148:	1000041e 	bne	r2,zero,8113915c <alt_printf+0x58>
8113914c:	e0bff807 	ldb	r2,-32(fp)
81139150:	1009883a 	mov	r4,r2
81139154:	11393380 	call	81139338 <alt_putchar>
81139158:	00006806 	br	811392fc <alt_printf+0x1f8>
8113915c:	e0bff717 	ldw	r2,-36(fp)
81139160:	10c00044 	addi	r3,r2,1
81139164:	e0fff715 	stw	r3,-36(fp)
81139168:	10800003 	ldbu	r2,0(r2)
8113916c:	e0bff805 	stb	r2,-32(fp)
81139170:	e0bff807 	ldb	r2,-32(fp)
81139174:	10006926 	beq	r2,zero,8113931c <alt_printf+0x218>
81139178:	e0bff807 	ldb	r2,-32(fp)
8113917c:	10800958 	cmpnei	r2,r2,37
81139180:	1000041e 	bne	r2,zero,81139194 <alt_printf+0x90>
81139184:	e0bff807 	ldb	r2,-32(fp)
81139188:	1009883a 	mov	r4,r2
8113918c:	11393380 	call	81139338 <alt_putchar>
81139190:	00005a06 	br	811392fc <alt_printf+0x1f8>
81139194:	e0bff807 	ldb	r2,-32(fp)
81139198:	108018d8 	cmpnei	r2,r2,99
8113919c:	1000081e 	bne	r2,zero,811391c0 <alt_printf+0xbc>
811391a0:	e0bffe17 	ldw	r2,-8(fp)
811391a4:	10c00104 	addi	r3,r2,4
811391a8:	e0fffe15 	stw	r3,-8(fp)
811391ac:	10800017 	ldw	r2,0(r2)
811391b0:	e0bffd15 	stw	r2,-12(fp)
811391b4:	e13ffd17 	ldw	r4,-12(fp)
811391b8:	11393380 	call	81139338 <alt_putchar>
811391bc:	00004f06 	br	811392fc <alt_printf+0x1f8>
811391c0:	e0bff807 	ldb	r2,-32(fp)
811391c4:	10801e18 	cmpnei	r2,r2,120
811391c8:	1000341e 	bne	r2,zero,8113929c <alt_printf+0x198>
811391cc:	e0bffe17 	ldw	r2,-8(fp)
811391d0:	10c00104 	addi	r3,r2,4
811391d4:	e0fffe15 	stw	r3,-8(fp)
811391d8:	10800017 	ldw	r2,0(r2)
811391dc:	e0bffb15 	stw	r2,-20(fp)
811391e0:	e0bffb17 	ldw	r2,-20(fp)
811391e4:	1000031e 	bne	r2,zero,811391f4 <alt_printf+0xf0>
811391e8:	01000c04 	movi	r4,48
811391ec:	11393380 	call	81139338 <alt_putchar>
811391f0:	00004206 	br	811392fc <alt_printf+0x1f8>
811391f4:	00800704 	movi	r2,28
811391f8:	e0bff915 	stw	r2,-28(fp)
811391fc:	00000306 	br	8113920c <alt_printf+0x108>
81139200:	e0bff917 	ldw	r2,-28(fp)
81139204:	10bfff04 	addi	r2,r2,-4
81139208:	e0bff915 	stw	r2,-28(fp)
8113920c:	00c003c4 	movi	r3,15
81139210:	e0bff917 	ldw	r2,-28(fp)
81139214:	1884983a 	sll	r2,r3,r2
81139218:	1007883a 	mov	r3,r2
8113921c:	e0bffb17 	ldw	r2,-20(fp)
81139220:	1884703a 	and	r2,r3,r2
81139224:	103ff626 	beq	r2,zero,81139200 <__reset+0xfb119200>
81139228:	00001906 	br	81139290 <alt_printf+0x18c>
8113922c:	00c003c4 	movi	r3,15
81139230:	e0bff917 	ldw	r2,-28(fp)
81139234:	1884983a 	sll	r2,r3,r2
81139238:	1007883a 	mov	r3,r2
8113923c:	e0bffb17 	ldw	r2,-20(fp)
81139240:	1886703a 	and	r3,r3,r2
81139244:	e0bff917 	ldw	r2,-28(fp)
81139248:	1884d83a 	srl	r2,r3,r2
8113924c:	e0bffc15 	stw	r2,-16(fp)
81139250:	e0bffc17 	ldw	r2,-16(fp)
81139254:	108002a8 	cmpgeui	r2,r2,10
81139258:	1000041e 	bne	r2,zero,8113926c <alt_printf+0x168>
8113925c:	e0bffc17 	ldw	r2,-16(fp)
81139260:	10800c04 	addi	r2,r2,48
81139264:	e0bff805 	stb	r2,-32(fp)
81139268:	00000306 	br	81139278 <alt_printf+0x174>
8113926c:	e0bffc17 	ldw	r2,-16(fp)
81139270:	108015c4 	addi	r2,r2,87
81139274:	e0bff805 	stb	r2,-32(fp)
81139278:	e0bff807 	ldb	r2,-32(fp)
8113927c:	1009883a 	mov	r4,r2
81139280:	11393380 	call	81139338 <alt_putchar>
81139284:	e0bff917 	ldw	r2,-28(fp)
81139288:	10bfff04 	addi	r2,r2,-4
8113928c:	e0bff915 	stw	r2,-28(fp)
81139290:	e0bff917 	ldw	r2,-28(fp)
81139294:	103fe50e 	bge	r2,zero,8113922c <__reset+0xfb11922c>
81139298:	00001806 	br	811392fc <alt_printf+0x1f8>
8113929c:	e0bff807 	ldb	r2,-32(fp)
811392a0:	10801cd8 	cmpnei	r2,r2,115
811392a4:	1000151e 	bne	r2,zero,811392fc <alt_printf+0x1f8>
811392a8:	e0bffe17 	ldw	r2,-8(fp)
811392ac:	10c00104 	addi	r3,r2,4
811392b0:	e0fffe15 	stw	r3,-8(fp)
811392b4:	10800017 	ldw	r2,0(r2)
811392b8:	e0bffa15 	stw	r2,-24(fp)
811392bc:	00000906 	br	811392e4 <alt_printf+0x1e0>
811392c0:	e0bffa17 	ldw	r2,-24(fp)
811392c4:	10c00044 	addi	r3,r2,1
811392c8:	e0fffa15 	stw	r3,-24(fp)
811392cc:	10800003 	ldbu	r2,0(r2)
811392d0:	10803fcc 	andi	r2,r2,255
811392d4:	1080201c 	xori	r2,r2,128
811392d8:	10bfe004 	addi	r2,r2,-128
811392dc:	1009883a 	mov	r4,r2
811392e0:	11393380 	call	81139338 <alt_putchar>
811392e4:	e0bffa17 	ldw	r2,-24(fp)
811392e8:	10800003 	ldbu	r2,0(r2)
811392ec:	10803fcc 	andi	r2,r2,255
811392f0:	1080201c 	xori	r2,r2,128
811392f4:	10bfe004 	addi	r2,r2,-128
811392f8:	103ff11e 	bne	r2,zero,811392c0 <__reset+0xfb1192c0>
811392fc:	e0bff717 	ldw	r2,-36(fp)
81139300:	10c00044 	addi	r3,r2,1
81139304:	e0fff715 	stw	r3,-36(fp)
81139308:	10800003 	ldbu	r2,0(r2)
8113930c:	e0bff805 	stb	r2,-32(fp)
81139310:	e0bff807 	ldb	r2,-32(fp)
81139314:	103f8a1e 	bne	r2,zero,81139140 <__reset+0xfb119140>
81139318:	00000106 	br	81139320 <alt_printf+0x21c>
8113931c:	0001883a 	nop
81139320:	0001883a 	nop
81139324:	e037883a 	mov	sp,fp
81139328:	dfc00117 	ldw	ra,4(sp)
8113932c:	df000017 	ldw	fp,0(sp)
81139330:	dec00504 	addi	sp,sp,20
81139334:	f800283a 	ret

81139338 <alt_putchar>:
81139338:	defffd04 	addi	sp,sp,-12
8113933c:	de00012e 	bgeu	sp,et,81139344 <alt_putchar+0xc>
81139340:	003b68fa 	trap	3
81139344:	dfc00215 	stw	ra,8(sp)
81139348:	df000115 	stw	fp,4(sp)
8113934c:	df000104 	addi	fp,sp,4
81139350:	e13fff15 	stw	r4,-4(fp)
81139354:	d0a00517 	ldw	r2,-32748(gp)
81139358:	10800217 	ldw	r2,8(r2)
8113935c:	100b883a 	mov	r5,r2
81139360:	e13fff17 	ldw	r4,-4(fp)
81139364:	11399ac0 	call	811399ac <putc>
81139368:	e037883a 	mov	sp,fp
8113936c:	dfc00117 	ldw	ra,4(sp)
81139370:	df000017 	ldw	fp,0(sp)
81139374:	dec00204 	addi	sp,sp,8
81139378:	f800283a 	ret

8113937c <altera_nios2_gen2_irq_init>:
8113937c:	deffff04 	addi	sp,sp,-4
81139380:	de00012e 	bgeu	sp,et,81139388 <altera_nios2_gen2_irq_init+0xc>
81139384:	003b68fa 	trap	3
81139388:	df000015 	stw	fp,0(sp)
8113938c:	d839883a 	mov	fp,sp
81139390:	000170fa 	wrctl	ienable,zero
81139394:	0001883a 	nop
81139398:	e037883a 	mov	sp,fp
8113939c:	df000017 	ldw	fp,0(sp)
811393a0:	dec00104 	addi	sp,sp,4
811393a4:	f800283a 	ret

811393a8 <OSCtxSw>:
811393a8:	defff504 	addi	sp,sp,-44
811393ac:	de002436 	bltu	sp,et,81139440 <OSCtxSw+0x98>
811393b0:	d0e00517 	ldw	r3,-32748(gp)
811393b4:	d1208417 	ldw	r4,-32240(gp)
811393b8:	dfc00015 	stw	ra,0(sp)
811393bc:	df000115 	stw	fp,4(sp)
811393c0:	ddc00215 	stw	r23,8(sp)
811393c4:	dd800315 	stw	r22,12(sp)
811393c8:	dd400415 	stw	r21,16(sp)
811393cc:	dd000515 	stw	r20,20(sp)
811393d0:	dcc00615 	stw	r19,24(sp)
811393d4:	dc800715 	stw	r18,28(sp)
811393d8:	dc400815 	stw	r17,32(sp)
811393dc:	dc000915 	stw	r16,36(sp)
811393e0:	d8c00a15 	stw	r3,40(sp)
811393e4:	26c00015 	stw	sp,0(r4)
811393e8:	11396440 	call	81139644 <OSTaskSwHook>
811393ec:	d1207e17 	ldw	r4,-32264(gp)
811393f0:	d1607587 	ldb	r5,-32298(gp)
811393f4:	d1208415 	stw	r4,-32240(gp)
811393f8:	d16075c5 	stb	r5,-32297(gp)
811393fc:	26c00017 	ldw	sp,0(r4)
81139400:	26000217 	ldw	et,8(r4)
81139404:	d8c00a17 	ldw	r3,40(sp)
81139408:	dfc00017 	ldw	ra,0(sp)
8113940c:	df000117 	ldw	fp,4(sp)
81139410:	ddc00217 	ldw	r23,8(sp)
81139414:	dd800317 	ldw	r22,12(sp)
81139418:	dd400417 	ldw	r21,16(sp)
8113941c:	dd000517 	ldw	r20,20(sp)
81139420:	dcc00617 	ldw	r19,24(sp)
81139424:	dc800717 	ldw	r18,28(sp)
81139428:	dc400817 	ldw	r17,32(sp)
8113942c:	dc000917 	ldw	r16,36(sp)
81139430:	d0e00515 	stw	r3,-32748(gp)
81139434:	d6200015 	stw	et,-32768(gp)
81139438:	dec00b04 	addi	sp,sp,44
8113943c:	f800283a 	ret
81139440:	003da0fa 	break	3

81139444 <OSStartHighRdy>:
81139444:	0025303a 	rdctl	r18,status
81139448:	047fff84 	movi	r17,-2
8113944c:	9464703a 	and	r18,r18,r17
81139450:	9001703a 	wrctl	status,r18
81139454:	11396440 	call	81139644 <OSTaskSwHook>
81139458:	04800044 	movi	r18,1
8113945c:	d4a07305 	stb	r18,-32308(gp)
81139460:	003fe206 	br	811393ec <__reset+0xfb1193ec>

81139464 <OSStartTsk>:
81139464:	06c00004 	movi	sp,0
81139468:	0005303a 	rdctl	r2,status
8113946c:	10800054 	ori	r2,r2,1
81139470:	1001703a 	wrctl	status,r2
81139474:	d8800117 	ldw	r2,4(sp)
81139478:	d9000017 	ldw	r4,0(sp)
8113947c:	dec00204 	addi	sp,sp,8
81139480:	103ee83a 	callr	r2
81139484:	0001883a 	nop

81139488 <OSTaskStkInit>:
81139488:	defff704 	addi	sp,sp,-36
8113948c:	de00012e 	bgeu	sp,et,81139494 <OSTaskStkInit+0xc>
81139490:	003b68fa 	trap	3
81139494:	dfc00815 	stw	ra,32(sp)
81139498:	df000715 	stw	fp,28(sp)
8113949c:	df000704 	addi	fp,sp,28
811394a0:	e13ffc15 	stw	r4,-16(fp)
811394a4:	e17ffd15 	stw	r5,-12(fp)
811394a8:	e1bffe15 	stw	r6,-8(fp)
811394ac:	3805883a 	mov	r2,r7
811394b0:	e0bfff0d 	sth	r2,-4(fp)
811394b4:	e0fffe17 	ldw	r3,-8(fp)
811394b8:	00bfff04 	movi	r2,-4
811394bc:	1884703a 	and	r2,r3,r2
811394c0:	10bef704 	addi	r2,r2,-1060
811394c4:	e0bff915 	stw	r2,-28(fp)
811394c8:	01810904 	movi	r6,1060
811394cc:	000b883a 	mov	r5,zero
811394d0:	e13ff917 	ldw	r4,-28(fp)
811394d4:	1110ff80 	call	81110ff8 <memset>
811394d8:	e0bff917 	ldw	r2,-28(fp)
811394dc:	10c0bb04 	addi	r3,r2,748
811394e0:	e0bff917 	ldw	r2,-28(fp)
811394e4:	10c00115 	stw	r3,4(r2)
811394e8:	e0bff917 	ldw	r2,-28(fp)
811394ec:	10c0d504 	addi	r3,r2,852
811394f0:	e0bff917 	ldw	r2,-28(fp)
811394f4:	10c00215 	stw	r3,8(r2)
811394f8:	e0bff917 	ldw	r2,-28(fp)
811394fc:	10c0ef04 	addi	r3,r2,956
81139500:	e0bff917 	ldw	r2,-28(fp)
81139504:	10c00315 	stw	r3,12(r2)
81139508:	e0fff917 	ldw	r3,-28(fp)
8113950c:	00a04534 	movhi	r2,33044
81139510:	10b30204 	addi	r2,r2,-13304
81139514:	18800d15 	stw	r2,52(r3)
81139518:	e0bff917 	ldw	r2,-28(fp)
8113951c:	00c00044 	movi	r3,1
81139520:	10c02915 	stw	r3,164(r2)
81139524:	10002a15 	stw	zero,168(r2)
81139528:	e0bff917 	ldw	r2,-28(fp)
8113952c:	00ccc384 	movi	r3,13070
81139530:	10c02b0d 	sth	r3,172(r2)
81139534:	e0bff917 	ldw	r2,-28(fp)
81139538:	00eaf344 	movi	r3,-21555
8113953c:	10c02b8d 	sth	r3,174(r2)
81139540:	e0bff917 	ldw	r2,-28(fp)
81139544:	00c48d04 	movi	r3,4660
81139548:	10c02c0d 	sth	r3,176(r2)
8113954c:	e0bff917 	ldw	r2,-28(fp)
81139550:	00f99b44 	movi	r3,-6547
81139554:	10c02c8d 	sth	r3,178(r2)
81139558:	e0bff917 	ldw	r2,-28(fp)
8113955c:	00f7bb04 	movi	r3,-8468
81139560:	10c02d0d 	sth	r3,180(r2)
81139564:	e0bff917 	ldw	r2,-28(fp)
81139568:	00c00144 	movi	r3,5
8113956c:	10c02d8d 	sth	r3,182(r2)
81139570:	e0bff917 	ldw	r2,-28(fp)
81139574:	00c002c4 	movi	r3,11
81139578:	10c02e0d 	sth	r3,184(r2)
8113957c:	e0bff917 	ldw	r2,-28(fp)
81139580:	e0bffa15 	stw	r2,-24(fp)
81139584:	e0bffa17 	ldw	r2,-24(fp)
81139588:	10bff304 	addi	r2,r2,-52
8113958c:	e0bffb15 	stw	r2,-20(fp)
81139590:	e0bffb17 	ldw	r2,-20(fp)
81139594:	10800c04 	addi	r2,r2,48
81139598:	e0fffc17 	ldw	r3,-16(fp)
8113959c:	10c00015 	stw	r3,0(r2)
811395a0:	e0bffb17 	ldw	r2,-20(fp)
811395a4:	10800b04 	addi	r2,r2,44
811395a8:	e0fffd17 	ldw	r3,-12(fp)
811395ac:	10c00015 	stw	r3,0(r2)
811395b0:	e0bffb17 	ldw	r2,-20(fp)
811395b4:	10800a04 	addi	r2,r2,40
811395b8:	e0fff917 	ldw	r3,-28(fp)
811395bc:	10c00015 	stw	r3,0(r2)
811395c0:	00a04534 	movhi	r2,33044
811395c4:	10a51904 	addi	r2,r2,-27548
811395c8:	10c00104 	addi	r3,r2,4
811395cc:	e0bffb17 	ldw	r2,-20(fp)
811395d0:	10c00015 	stw	r3,0(r2)
811395d4:	e0bffb17 	ldw	r2,-20(fp)
811395d8:	e037883a 	mov	sp,fp
811395dc:	dfc00117 	ldw	ra,4(sp)
811395e0:	df000017 	ldw	fp,0(sp)
811395e4:	dec00204 	addi	sp,sp,8
811395e8:	f800283a 	ret

811395ec <OSTaskCreateHook>:
811395ec:	defffe04 	addi	sp,sp,-8
811395f0:	de00012e 	bgeu	sp,et,811395f8 <OSTaskCreateHook+0xc>
811395f4:	003b68fa 	trap	3
811395f8:	df000115 	stw	fp,4(sp)
811395fc:	df000104 	addi	fp,sp,4
81139600:	e13fff15 	stw	r4,-4(fp)
81139604:	0001883a 	nop
81139608:	e037883a 	mov	sp,fp
8113960c:	df000017 	ldw	fp,0(sp)
81139610:	dec00104 	addi	sp,sp,4
81139614:	f800283a 	ret

81139618 <OSTaskDelHook>:
81139618:	defffe04 	addi	sp,sp,-8
8113961c:	de00012e 	bgeu	sp,et,81139624 <OSTaskDelHook+0xc>
81139620:	003b68fa 	trap	3
81139624:	df000115 	stw	fp,4(sp)
81139628:	df000104 	addi	fp,sp,4
8113962c:	e13fff15 	stw	r4,-4(fp)
81139630:	0001883a 	nop
81139634:	e037883a 	mov	sp,fp
81139638:	df000017 	ldw	fp,0(sp)
8113963c:	dec00104 	addi	sp,sp,4
81139640:	f800283a 	ret

81139644 <OSTaskSwHook>:
81139644:	deffff04 	addi	sp,sp,-4
81139648:	de00012e 	bgeu	sp,et,81139650 <OSTaskSwHook+0xc>
8113964c:	003b68fa 	trap	3
81139650:	df000015 	stw	fp,0(sp)
81139654:	d839883a 	mov	fp,sp
81139658:	0001883a 	nop
8113965c:	e037883a 	mov	sp,fp
81139660:	df000017 	ldw	fp,0(sp)
81139664:	dec00104 	addi	sp,sp,4
81139668:	f800283a 	ret

8113966c <OSTaskStatHook>:
8113966c:	deffff04 	addi	sp,sp,-4
81139670:	de00012e 	bgeu	sp,et,81139678 <OSTaskStatHook+0xc>
81139674:	003b68fa 	trap	3
81139678:	df000015 	stw	fp,0(sp)
8113967c:	d839883a 	mov	fp,sp
81139680:	0001883a 	nop
81139684:	e037883a 	mov	sp,fp
81139688:	df000017 	ldw	fp,0(sp)
8113968c:	dec00104 	addi	sp,sp,4
81139690:	f800283a 	ret

81139694 <OSTimeTickHook>:
81139694:	defffe04 	addi	sp,sp,-8
81139698:	de00012e 	bgeu	sp,et,811396a0 <OSTimeTickHook+0xc>
8113969c:	003b68fa 	trap	3
811396a0:	dfc00115 	stw	ra,4(sp)
811396a4:	df000015 	stw	fp,0(sp)
811396a8:	d839883a 	mov	fp,sp
811396ac:	d0a0980b 	ldhu	r2,-32160(gp)
811396b0:	10800044 	addi	r2,r2,1
811396b4:	d0a0980d 	sth	r2,-32160(gp)
811396b8:	d0a0980b 	ldhu	r2,-32160(gp)
811396bc:	10bfffcc 	andi	r2,r2,65535
811396c0:	10803230 	cmpltui	r2,r2,200
811396c4:	1000021e 	bne	r2,zero,811396d0 <OSTimeTickHook+0x3c>
811396c8:	d020980d 	sth	zero,-32160(gp)
811396cc:	112ffa80 	call	8112ffa8 <OSTmrSignal>
811396d0:	0001883a 	nop
811396d4:	e037883a 	mov	sp,fp
811396d8:	dfc00117 	ldw	ra,4(sp)
811396dc:	df000017 	ldw	fp,0(sp)
811396e0:	dec00204 	addi	sp,sp,8
811396e4:	f800283a 	ret

811396e8 <OSInitHookBegin>:
811396e8:	deffff04 	addi	sp,sp,-4
811396ec:	de00012e 	bgeu	sp,et,811396f4 <OSInitHookBegin+0xc>
811396f0:	003b68fa 	trap	3
811396f4:	df000015 	stw	fp,0(sp)
811396f8:	d839883a 	mov	fp,sp
811396fc:	d020980d 	sth	zero,-32160(gp)
81139700:	0001883a 	nop
81139704:	e037883a 	mov	sp,fp
81139708:	df000017 	ldw	fp,0(sp)
8113970c:	dec00104 	addi	sp,sp,4
81139710:	f800283a 	ret

81139714 <OSInitHookEnd>:
81139714:	deffff04 	addi	sp,sp,-4
81139718:	de00012e 	bgeu	sp,et,81139720 <OSInitHookEnd+0xc>
8113971c:	003b68fa 	trap	3
81139720:	df000015 	stw	fp,0(sp)
81139724:	d839883a 	mov	fp,sp
81139728:	0001883a 	nop
8113972c:	e037883a 	mov	sp,fp
81139730:	df000017 	ldw	fp,0(sp)
81139734:	dec00104 	addi	sp,sp,4
81139738:	f800283a 	ret

8113973c <OSTaskIdleHook>:
8113973c:	deffff04 	addi	sp,sp,-4
81139740:	de00012e 	bgeu	sp,et,81139748 <OSTaskIdleHook+0xc>
81139744:	003b68fa 	trap	3
81139748:	df000015 	stw	fp,0(sp)
8113974c:	d839883a 	mov	fp,sp
81139750:	0001883a 	nop
81139754:	e037883a 	mov	sp,fp
81139758:	df000017 	ldw	fp,0(sp)
8113975c:	dec00104 	addi	sp,sp,4
81139760:	f800283a 	ret

81139764 <OSTCBInitHook>:
81139764:	defffe04 	addi	sp,sp,-8
81139768:	de00012e 	bgeu	sp,et,81139770 <OSTCBInitHook+0xc>
8113976c:	003b68fa 	trap	3
81139770:	df000115 	stw	fp,4(sp)
81139774:	df000104 	addi	fp,sp,4
81139778:	e13fff15 	stw	r4,-4(fp)
8113977c:	0001883a 	nop
81139780:	e037883a 	mov	sp,fp
81139784:	df000017 	ldw	fp,0(sp)
81139788:	dec00104 	addi	sp,sp,4
8113978c:	f800283a 	ret

81139790 <alt_exception_cause_generated_bad_addr>:
81139790:	defffe04 	addi	sp,sp,-8
81139794:	de00012e 	bgeu	sp,et,8113979c <alt_exception_cause_generated_bad_addr+0xc>
81139798:	003b68fa 	trap	3
8113979c:	df000115 	stw	fp,4(sp)
811397a0:	df000104 	addi	fp,sp,4
811397a4:	e13fff15 	stw	r4,-4(fp)
811397a8:	e0bfff17 	ldw	r2,-4(fp)
811397ac:	10bffe84 	addi	r2,r2,-6
811397b0:	10c00428 	cmpgeui	r3,r2,16
811397b4:	18001a1e 	bne	r3,zero,81139820 <alt_exception_cause_generated_bad_addr+0x90>
811397b8:	100690ba 	slli	r3,r2,2
811397bc:	00a04534 	movhi	r2,33044
811397c0:	10a5f404 	addi	r2,r2,-26672
811397c4:	1885883a 	add	r2,r3,r2
811397c8:	10800017 	ldw	r2,0(r2)
811397cc:	1000683a 	jmp	r2
811397d0:	81139810 	cmplti	r4,r16,20064
811397d4:	81139810 	cmplti	r4,r16,20064
811397d8:	81139820 	cmpeqi	r4,r16,20064
811397dc:	81139820 	cmpeqi	r4,r16,20064
811397e0:	81139820 	cmpeqi	r4,r16,20064
811397e4:	81139810 	cmplti	r4,r16,20064
811397e8:	81139818 	cmpnei	r4,r16,20064
811397ec:	81139820 	cmpeqi	r4,r16,20064
811397f0:	81139810 	cmplti	r4,r16,20064
811397f4:	81139810 	cmplti	r4,r16,20064
811397f8:	81139820 	cmpeqi	r4,r16,20064
811397fc:	81139810 	cmplti	r4,r16,20064
81139800:	81139818 	cmpnei	r4,r16,20064
81139804:	81139820 	cmpeqi	r4,r16,20064
81139808:	81139820 	cmpeqi	r4,r16,20064
8113980c:	81139810 	cmplti	r4,r16,20064
81139810:	00800044 	movi	r2,1
81139814:	00000306 	br	81139824 <alt_exception_cause_generated_bad_addr+0x94>
81139818:	0005883a 	mov	r2,zero
8113981c:	00000106 	br	81139824 <alt_exception_cause_generated_bad_addr+0x94>
81139820:	0005883a 	mov	r2,zero
81139824:	e037883a 	mov	sp,fp
81139828:	df000017 	ldw	fp,0(sp)
8113982c:	dec00104 	addi	sp,sp,4
81139830:	f800283a 	ret

81139834 <atexit>:
81139834:	200b883a 	mov	r5,r4
81139838:	000f883a 	mov	r7,zero
8113983c:	000d883a 	mov	r6,zero
81139840:	0009883a 	mov	r4,zero
81139844:	1139a7c1 	jmpi	81139a7c <__register_exitproc>

81139848 <exit>:
81139848:	defffe04 	addi	sp,sp,-8
8113984c:	000b883a 	mov	r5,zero
81139850:	de00012e 	bgeu	sp,et,81139858 <exit+0x10>
81139854:	003b68fa 	trap	3
81139858:	dc000015 	stw	r16,0(sp)
8113985c:	dfc00115 	stw	ra,4(sp)
81139860:	2021883a 	mov	r16,r4
81139864:	1139b9c0 	call	81139b9c <__call_exitprocs>
81139868:	00a04534 	movhi	r2,33044
8113986c:	10ba2604 	addi	r2,r2,-5992
81139870:	11000017 	ldw	r4,0(r2)
81139874:	20800f17 	ldw	r2,60(r4)
81139878:	10000126 	beq	r2,zero,81139880 <exit+0x38>
8113987c:	103ee83a 	callr	r2
81139880:	8009883a 	mov	r4,r16
81139884:	1139d240 	call	81139d24 <_exit>

81139888 <memcmp>:
81139888:	01c000c4 	movi	r7,3
8113988c:	3980192e 	bgeu	r7,r6,811398f4 <memcmp+0x6c>
81139890:	2144b03a 	or	r2,r4,r5
81139894:	11c4703a 	and	r2,r2,r7
81139898:	10000f26 	beq	r2,zero,811398d8 <memcmp+0x50>
8113989c:	20800003 	ldbu	r2,0(r4)
811398a0:	28c00003 	ldbu	r3,0(r5)
811398a4:	10c0151e 	bne	r2,r3,811398fc <memcmp+0x74>
811398a8:	31bfff84 	addi	r6,r6,-2
811398ac:	01ffffc4 	movi	r7,-1
811398b0:	00000406 	br	811398c4 <memcmp+0x3c>
811398b4:	20800003 	ldbu	r2,0(r4)
811398b8:	28c00003 	ldbu	r3,0(r5)
811398bc:	31bfffc4 	addi	r6,r6,-1
811398c0:	10c00e1e 	bne	r2,r3,811398fc <memcmp+0x74>
811398c4:	21000044 	addi	r4,r4,1
811398c8:	29400044 	addi	r5,r5,1
811398cc:	31fff91e 	bne	r6,r7,811398b4 <__reset+0xfb1198b4>
811398d0:	0005883a 	mov	r2,zero
811398d4:	f800283a 	ret
811398d8:	20c00017 	ldw	r3,0(r4)
811398dc:	28800017 	ldw	r2,0(r5)
811398e0:	18bfee1e 	bne	r3,r2,8113989c <__reset+0xfb11989c>
811398e4:	31bfff04 	addi	r6,r6,-4
811398e8:	21000104 	addi	r4,r4,4
811398ec:	29400104 	addi	r5,r5,4
811398f0:	39bff936 	bltu	r7,r6,811398d8 <__reset+0xfb1198d8>
811398f4:	303fe91e 	bne	r6,zero,8113989c <__reset+0xfb11989c>
811398f8:	003ff506 	br	811398d0 <__reset+0xfb1198d0>
811398fc:	10c5c83a 	sub	r2,r2,r3
81139900:	f800283a 	ret

81139904 <_putc_r>:
81139904:	defffc04 	addi	sp,sp,-16
81139908:	de00012e 	bgeu	sp,et,81139910 <_putc_r+0xc>
8113990c:	003b68fa 	trap	3
81139910:	dc000215 	stw	r16,8(sp)
81139914:	dfc00315 	stw	ra,12(sp)
81139918:	2021883a 	mov	r16,r4
8113991c:	20000226 	beq	r4,zero,81139928 <_putc_r+0x24>
81139920:	20800e17 	ldw	r2,56(r4)
81139924:	10001b26 	beq	r2,zero,81139994 <_putc_r+0x90>
81139928:	30800217 	ldw	r2,8(r6)
8113992c:	10bfffc4 	addi	r2,r2,-1
81139930:	30800215 	stw	r2,8(r6)
81139934:	10000a16 	blt	r2,zero,81139960 <_putc_r+0x5c>
81139938:	30800017 	ldw	r2,0(r6)
8113993c:	11400005 	stb	r5,0(r2)
81139940:	30800017 	ldw	r2,0(r6)
81139944:	10c00044 	addi	r3,r2,1
81139948:	30c00015 	stw	r3,0(r6)
8113994c:	10800003 	ldbu	r2,0(r2)
81139950:	dfc00317 	ldw	ra,12(sp)
81139954:	dc000217 	ldw	r16,8(sp)
81139958:	dec00404 	addi	sp,sp,16
8113995c:	f800283a 	ret
81139960:	30c00617 	ldw	r3,24(r6)
81139964:	10c00616 	blt	r2,r3,81139980 <_putc_r+0x7c>
81139968:	30800017 	ldw	r2,0(r6)
8113996c:	00c00284 	movi	r3,10
81139970:	11400005 	stb	r5,0(r2)
81139974:	30800017 	ldw	r2,0(r6)
81139978:	11400003 	ldbu	r5,0(r2)
8113997c:	28fff11e 	bne	r5,r3,81139944 <__reset+0xfb119944>
81139980:	8009883a 	mov	r4,r16
81139984:	dfc00317 	ldw	ra,12(sp)
81139988:	dc000217 	ldw	r16,8(sp)
8113998c:	dec00404 	addi	sp,sp,16
81139990:	11223401 	jmpi	81122340 <__swbuf_r>
81139994:	d9400015 	stw	r5,0(sp)
81139998:	d9800115 	stw	r6,4(sp)
8113999c:	11199540 	call	81119954 <__sinit>
811399a0:	d9800117 	ldw	r6,4(sp)
811399a4:	d9400017 	ldw	r5,0(sp)
811399a8:	003fdf06 	br	81139928 <__reset+0xfb119928>

811399ac <putc>:
811399ac:	00a04534 	movhi	r2,33044
811399b0:	defffc04 	addi	sp,sp,-16
811399b4:	10ba2704 	addi	r2,r2,-5988
811399b8:	de00012e 	bgeu	sp,et,811399c0 <putc+0x14>
811399bc:	003b68fa 	trap	3
811399c0:	dc000115 	stw	r16,4(sp)
811399c4:	14000017 	ldw	r16,0(r2)
811399c8:	dc400215 	stw	r17,8(sp)
811399cc:	dfc00315 	stw	ra,12(sp)
811399d0:	2023883a 	mov	r17,r4
811399d4:	80000226 	beq	r16,zero,811399e0 <putc+0x34>
811399d8:	80800e17 	ldw	r2,56(r16)
811399dc:	10001a26 	beq	r2,zero,81139a48 <putc+0x9c>
811399e0:	28800217 	ldw	r2,8(r5)
811399e4:	10bfffc4 	addi	r2,r2,-1
811399e8:	28800215 	stw	r2,8(r5)
811399ec:	10000b16 	blt	r2,zero,81139a1c <putc+0x70>
811399f0:	28800017 	ldw	r2,0(r5)
811399f4:	14400005 	stb	r17,0(r2)
811399f8:	28800017 	ldw	r2,0(r5)
811399fc:	10c00044 	addi	r3,r2,1
81139a00:	28c00015 	stw	r3,0(r5)
81139a04:	10800003 	ldbu	r2,0(r2)
81139a08:	dfc00317 	ldw	ra,12(sp)
81139a0c:	dc400217 	ldw	r17,8(sp)
81139a10:	dc000117 	ldw	r16,4(sp)
81139a14:	dec00404 	addi	sp,sp,16
81139a18:	f800283a 	ret
81139a1c:	28c00617 	ldw	r3,24(r5)
81139a20:	10c00e16 	blt	r2,r3,81139a5c <putc+0xb0>
81139a24:	28800017 	ldw	r2,0(r5)
81139a28:	01000284 	movi	r4,10
81139a2c:	14400005 	stb	r17,0(r2)
81139a30:	28800017 	ldw	r2,0(r5)
81139a34:	10c00003 	ldbu	r3,0(r2)
81139a38:	193ff01e 	bne	r3,r4,811399fc <__reset+0xfb1199fc>
81139a3c:	280d883a 	mov	r6,r5
81139a40:	180b883a 	mov	r5,r3
81139a44:	00000706 	br	81139a64 <putc+0xb8>
81139a48:	8009883a 	mov	r4,r16
81139a4c:	d9400015 	stw	r5,0(sp)
81139a50:	11199540 	call	81119954 <__sinit>
81139a54:	d9400017 	ldw	r5,0(sp)
81139a58:	003fe106 	br	811399e0 <__reset+0xfb1199e0>
81139a5c:	280d883a 	mov	r6,r5
81139a60:	880b883a 	mov	r5,r17
81139a64:	8009883a 	mov	r4,r16
81139a68:	dfc00317 	ldw	ra,12(sp)
81139a6c:	dc400217 	ldw	r17,8(sp)
81139a70:	dc000117 	ldw	r16,4(sp)
81139a74:	dec00404 	addi	sp,sp,16
81139a78:	11223401 	jmpi	81122340 <__swbuf_r>

81139a7c <__register_exitproc>:
81139a7c:	defffa04 	addi	sp,sp,-24
81139a80:	de00012e 	bgeu	sp,et,81139a88 <__register_exitproc+0xc>
81139a84:	003b68fa 	trap	3
81139a88:	dc000315 	stw	r16,12(sp)
81139a8c:	04204534 	movhi	r16,33044
81139a90:	843a2604 	addi	r16,r16,-5992
81139a94:	80c00017 	ldw	r3,0(r16)
81139a98:	dc400415 	stw	r17,16(sp)
81139a9c:	dfc00515 	stw	ra,20(sp)
81139aa0:	18805217 	ldw	r2,328(r3)
81139aa4:	2023883a 	mov	r17,r4
81139aa8:	10003726 	beq	r2,zero,81139b88 <__register_exitproc+0x10c>
81139aac:	10c00117 	ldw	r3,4(r2)
81139ab0:	010007c4 	movi	r4,31
81139ab4:	20c00e16 	blt	r4,r3,81139af0 <__register_exitproc+0x74>
81139ab8:	1a000044 	addi	r8,r3,1
81139abc:	8800221e 	bne	r17,zero,81139b48 <__register_exitproc+0xcc>
81139ac0:	18c00084 	addi	r3,r3,2
81139ac4:	18c7883a 	add	r3,r3,r3
81139ac8:	18c7883a 	add	r3,r3,r3
81139acc:	12000115 	stw	r8,4(r2)
81139ad0:	10c7883a 	add	r3,r2,r3
81139ad4:	19400015 	stw	r5,0(r3)
81139ad8:	0005883a 	mov	r2,zero
81139adc:	dfc00517 	ldw	ra,20(sp)
81139ae0:	dc400417 	ldw	r17,16(sp)
81139ae4:	dc000317 	ldw	r16,12(sp)
81139ae8:	dec00604 	addi	sp,sp,24
81139aec:	f800283a 	ret
81139af0:	00800034 	movhi	r2,0
81139af4:	10800004 	addi	r2,r2,0
81139af8:	10002626 	beq	r2,zero,81139b94 <__register_exitproc+0x118>
81139afc:	01006404 	movi	r4,400
81139b00:	d9400015 	stw	r5,0(sp)
81139b04:	d9800115 	stw	r6,4(sp)
81139b08:	d9c00215 	stw	r7,8(sp)
81139b0c:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
81139b10:	d9400017 	ldw	r5,0(sp)
81139b14:	d9800117 	ldw	r6,4(sp)
81139b18:	d9c00217 	ldw	r7,8(sp)
81139b1c:	10001d26 	beq	r2,zero,81139b94 <__register_exitproc+0x118>
81139b20:	81000017 	ldw	r4,0(r16)
81139b24:	10000115 	stw	zero,4(r2)
81139b28:	02000044 	movi	r8,1
81139b2c:	22405217 	ldw	r9,328(r4)
81139b30:	0007883a 	mov	r3,zero
81139b34:	12400015 	stw	r9,0(r2)
81139b38:	20805215 	stw	r2,328(r4)
81139b3c:	10006215 	stw	zero,392(r2)
81139b40:	10006315 	stw	zero,396(r2)
81139b44:	883fde26 	beq	r17,zero,81139ac0 <__reset+0xfb119ac0>
81139b48:	18c9883a 	add	r4,r3,r3
81139b4c:	2109883a 	add	r4,r4,r4
81139b50:	1109883a 	add	r4,r2,r4
81139b54:	21802215 	stw	r6,136(r4)
81139b58:	01800044 	movi	r6,1
81139b5c:	12406217 	ldw	r9,392(r2)
81139b60:	30cc983a 	sll	r6,r6,r3
81139b64:	4992b03a 	or	r9,r9,r6
81139b68:	12406215 	stw	r9,392(r2)
81139b6c:	21c04215 	stw	r7,264(r4)
81139b70:	01000084 	movi	r4,2
81139b74:	893fd21e 	bne	r17,r4,81139ac0 <__reset+0xfb119ac0>
81139b78:	11006317 	ldw	r4,396(r2)
81139b7c:	218cb03a 	or	r6,r4,r6
81139b80:	11806315 	stw	r6,396(r2)
81139b84:	003fce06 	br	81139ac0 <__reset+0xfb119ac0>
81139b88:	18805304 	addi	r2,r3,332
81139b8c:	18805215 	stw	r2,328(r3)
81139b90:	003fc606 	br	81139aac <__reset+0xfb119aac>
81139b94:	00bfffc4 	movi	r2,-1
81139b98:	003fd006 	br	81139adc <__reset+0xfb119adc>

81139b9c <__call_exitprocs>:
81139b9c:	defff504 	addi	sp,sp,-44
81139ba0:	de00012e 	bgeu	sp,et,81139ba8 <__call_exitprocs+0xc>
81139ba4:	003b68fa 	trap	3
81139ba8:	df000915 	stw	fp,36(sp)
81139bac:	dd400615 	stw	r21,24(sp)
81139bb0:	dc800315 	stw	r18,12(sp)
81139bb4:	dfc00a15 	stw	ra,40(sp)
81139bb8:	ddc00815 	stw	r23,32(sp)
81139bbc:	dd800715 	stw	r22,28(sp)
81139bc0:	dd000515 	stw	r20,20(sp)
81139bc4:	dcc00415 	stw	r19,16(sp)
81139bc8:	dc400215 	stw	r17,8(sp)
81139bcc:	dc000115 	stw	r16,4(sp)
81139bd0:	d9000015 	stw	r4,0(sp)
81139bd4:	2839883a 	mov	fp,r5
81139bd8:	04800044 	movi	r18,1
81139bdc:	057fffc4 	movi	r21,-1
81139be0:	00a04534 	movhi	r2,33044
81139be4:	10ba2604 	addi	r2,r2,-5992
81139be8:	12000017 	ldw	r8,0(r2)
81139bec:	45005217 	ldw	r20,328(r8)
81139bf0:	44c05204 	addi	r19,r8,328
81139bf4:	a0001c26 	beq	r20,zero,81139c68 <__call_exitprocs+0xcc>
81139bf8:	a0800117 	ldw	r2,4(r20)
81139bfc:	15ffffc4 	addi	r23,r2,-1
81139c00:	b8000d16 	blt	r23,zero,81139c38 <__call_exitprocs+0x9c>
81139c04:	14000044 	addi	r16,r2,1
81139c08:	8421883a 	add	r16,r16,r16
81139c0c:	8421883a 	add	r16,r16,r16
81139c10:	84402004 	addi	r17,r16,128
81139c14:	a463883a 	add	r17,r20,r17
81139c18:	a421883a 	add	r16,r20,r16
81139c1c:	e0001e26 	beq	fp,zero,81139c98 <__call_exitprocs+0xfc>
81139c20:	80804017 	ldw	r2,256(r16)
81139c24:	e0801c26 	beq	fp,r2,81139c98 <__call_exitprocs+0xfc>
81139c28:	bdffffc4 	addi	r23,r23,-1
81139c2c:	843fff04 	addi	r16,r16,-4
81139c30:	8c7fff04 	addi	r17,r17,-4
81139c34:	bd7ff91e 	bne	r23,r21,81139c1c <__reset+0xfb119c1c>
81139c38:	00800034 	movhi	r2,0
81139c3c:	10800004 	addi	r2,r2,0
81139c40:	10000926 	beq	r2,zero,81139c68 <__call_exitprocs+0xcc>
81139c44:	a0800117 	ldw	r2,4(r20)
81139c48:	1000301e 	bne	r2,zero,81139d0c <__call_exitprocs+0x170>
81139c4c:	a0800017 	ldw	r2,0(r20)
81139c50:	10003226 	beq	r2,zero,81139d1c <__call_exitprocs+0x180>
81139c54:	a009883a 	mov	r4,r20
81139c58:	98800015 	stw	r2,0(r19)
81139c5c:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
81139c60:	9d000017 	ldw	r20,0(r19)
81139c64:	a03fe41e 	bne	r20,zero,81139bf8 <__reset+0xfb119bf8>
81139c68:	dfc00a17 	ldw	ra,40(sp)
81139c6c:	df000917 	ldw	fp,36(sp)
81139c70:	ddc00817 	ldw	r23,32(sp)
81139c74:	dd800717 	ldw	r22,28(sp)
81139c78:	dd400617 	ldw	r21,24(sp)
81139c7c:	dd000517 	ldw	r20,20(sp)
81139c80:	dcc00417 	ldw	r19,16(sp)
81139c84:	dc800317 	ldw	r18,12(sp)
81139c88:	dc400217 	ldw	r17,8(sp)
81139c8c:	dc000117 	ldw	r16,4(sp)
81139c90:	dec00b04 	addi	sp,sp,44
81139c94:	f800283a 	ret
81139c98:	a0800117 	ldw	r2,4(r20)
81139c9c:	80c00017 	ldw	r3,0(r16)
81139ca0:	10bfffc4 	addi	r2,r2,-1
81139ca4:	15c01426 	beq	r2,r23,81139cf8 <__call_exitprocs+0x15c>
81139ca8:	80000015 	stw	zero,0(r16)
81139cac:	183fde26 	beq	r3,zero,81139c28 <__reset+0xfb119c28>
81139cb0:	95c8983a 	sll	r4,r18,r23
81139cb4:	a0806217 	ldw	r2,392(r20)
81139cb8:	a5800117 	ldw	r22,4(r20)
81139cbc:	2084703a 	and	r2,r4,r2
81139cc0:	10000b26 	beq	r2,zero,81139cf0 <__call_exitprocs+0x154>
81139cc4:	a0806317 	ldw	r2,396(r20)
81139cc8:	2088703a 	and	r4,r4,r2
81139ccc:	20000c1e 	bne	r4,zero,81139d00 <__call_exitprocs+0x164>
81139cd0:	89400017 	ldw	r5,0(r17)
81139cd4:	d9000017 	ldw	r4,0(sp)
81139cd8:	183ee83a 	callr	r3
81139cdc:	a0800117 	ldw	r2,4(r20)
81139ce0:	15bfbf1e 	bne	r2,r22,81139be0 <__reset+0xfb119be0>
81139ce4:	98800017 	ldw	r2,0(r19)
81139ce8:	153fcf26 	beq	r2,r20,81139c28 <__reset+0xfb119c28>
81139cec:	003fbc06 	br	81139be0 <__reset+0xfb119be0>
81139cf0:	183ee83a 	callr	r3
81139cf4:	003ff906 	br	81139cdc <__reset+0xfb119cdc>
81139cf8:	a5c00115 	stw	r23,4(r20)
81139cfc:	003feb06 	br	81139cac <__reset+0xfb119cac>
81139d00:	89000017 	ldw	r4,0(r17)
81139d04:	183ee83a 	callr	r3
81139d08:	003ff406 	br	81139cdc <__reset+0xfb119cdc>
81139d0c:	a0800017 	ldw	r2,0(r20)
81139d10:	a027883a 	mov	r19,r20
81139d14:	1029883a 	mov	r20,r2
81139d18:	003fb606 	br	81139bf4 <__reset+0xfb119bf4>
81139d1c:	0005883a 	mov	r2,zero
81139d20:	003ffb06 	br	81139d10 <__reset+0xfb119d10>

81139d24 <_exit>:
81139d24:	defffd04 	addi	sp,sp,-12
81139d28:	de00012e 	bgeu	sp,et,81139d30 <_exit+0xc>
81139d2c:	003b68fa 	trap	3
81139d30:	df000215 	stw	fp,8(sp)
81139d34:	df000204 	addi	fp,sp,8
81139d38:	e13fff15 	stw	r4,-4(fp)
81139d3c:	d0207305 	stb	zero,-32308(gp)
81139d40:	e0bfff17 	ldw	r2,-4(fp)
81139d44:	e0bffe15 	stw	r2,-8(fp)
81139d48:	e0bffe17 	ldw	r2,-8(fp)
81139d4c:	10000226 	beq	r2,zero,81139d58 <_exit+0x34>
81139d50:	002af070 	cmpltui	zero,zero,43969
81139d54:	00000106 	br	81139d5c <_exit+0x38>
81139d58:	002af0b0 	cmpltui	zero,zero,43970
81139d5c:	003fff06 	br	81139d5c <__reset+0xfb119d5c>
