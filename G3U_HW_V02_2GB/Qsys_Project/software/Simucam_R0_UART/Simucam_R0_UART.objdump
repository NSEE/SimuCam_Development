
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81100244

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x00035e40 memsz 0x000562cc flags rwx
    LOAD off    0x00037000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00037000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00031d04  81100244  81100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000021ac  81131f48  81131f48  00032f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d6c  811340f4  811340f4  000350f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0002048c  81135e60  81135e60  00036e60  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  811562ec  811562ec  00037000  2**0
                  CONTENTS
  7 .descriptor_memory 00000000  81200800  81200800  00037000  2**0
                  CONTENTS
  8 .ext_flash    00000000  86020020  86020020  00037000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00037000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001a58  00000000  00000000  00037028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000506d2  00000000  00000000  00038a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00012c46  00000000  00000000  00089152  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a1c0  00000000  00000000  0009bd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006470  00000000  00000000  000b5f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00009600  00000000  00000000  000bc3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00026d73  00000000  00000000  000c59c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000040  00000000  00000000  000ec73c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002390  00000000  00000000  000ec780  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  000f7981  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  000f7987  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000f7993  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000f7994  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000f7995  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000f7999  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000f799d  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  000f79a1  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000a  00000000  00000000  000f79ac  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000a  00000000  00000000  000f79b6  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000011  00000000  00000000  000f79c0  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003f  00000000  00000000  000f79d1  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00277c09  00000000  00000000  000f7a10  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
81100244 l    d  .text	00000000 .text
81131f48 l    d  .rodata	00000000 .rodata
811340f4 l    d  .rwdata	00000000 .rwdata
81135e60 l    d  .bss	00000000 .bss
811562ec l    d  .onchip_memory	00000000 .onchip_memory
81200800 l    d  .descriptor_memory	00000000 .descriptor_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 spwc.c
00000000 l    df *ABS*	00000000 tran.c
00000000 l    df *ABS*	00000000 eth.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 pgen.c
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 receiver_com_task.c
00000000 l    df *ABS*	00000000 rtos_tasks.c
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
81133353 l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
811340f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
8110b69c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113374a l     O .rodata	00000010 zeroes.4389
8113375a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8113376a l     O .rodata	00000010 zeroes.4404
8111034c l     F .text	000000bc __sbprintf
8113377a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
81133792 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
811338b5 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
81111e9c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
811139cc l     F .text	00000008 __fp_unlock
811139e0 l     F .text	0000019c __sinit.part.1
81113b7c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
81134940 l     O .rwdata	00000020 lc_ctype_charset
81134920 l     O .rwdata	00000020 lc_message_charset
81134960 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
81133a54 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtod.c
81116988 l     F .text	00000064 sulp
81133b9c l     O .rodata	00000014 fpi.2737
81133bb0 l     O .rodata	00000028 tinytens
81133b88 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
81133be8 l     O .rodata	00000010 blanks.4332
81133bd8 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
81119fa8 l     F .text	000000fc __sprint_r.part.0
81133c08 l     O .rodata	00000010 blanks.4348
81133bf8 l     O .rodata	00000010 zeroes.4349
8111b534 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
8111bb18 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
8111f71c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
8111f848 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
8111f874 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
8111f960 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
8111fa40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
8111fc0c l     F .text	0000003c alt_get_errno
8111fc48 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
8111fe60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
81135dc4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81120384 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
81135dd0 l     O .rwdata	00000004 lockid
81135f00 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
81135dd4 l     O .rwdata	00000004 lockid
81135f08 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
81121db4 l     F .text	00000048 OS_InitMisc
81121dfc l     F .text	0000006c OS_InitRdyList
81121f68 l     F .text	000000e4 OS_InitTCBList
81121cd4 l     F .text	000000e0 OS_InitEventList
81121e68 l     F .text	00000080 OS_InitTaskIdle
81121ee8 l     F .text	00000080 OS_InitTaskStat
811221d8 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
81123ef8 l     F .text	000000f4 OS_FlagTaskRdy
81123cb8 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
81127fa4 l     F .text	00000034 alt_dev_reg
81134b40 l     O .rwdata	0000106c jtag_uart_0
81135bac l     O .rwdata	00000030 sgdma_rx
81135bdc l     O .rwdata	00000030 sgdma_tx
81135c0c l     O .rwdata	000000d0 rs232_uart
81135cdc l     O .rwdata	00000064 dma_DDR_M
81135d40 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
8112c66c l     F .text	000002a4 altera_avalon_jtag_uart_irq
8112c910 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
8112d0ec l     F .text	0000003c alt_get_errno
8112dd1c l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
8112de80 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
8112e1e4 l     F .text	0000009c altera_avalon_uart_irq
8112e280 l     F .text	00000138 altera_avalon_uart_rxirq
8112e3b8 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
8112e5b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
8112e854 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8112eac8 l     F .text	0000003c alt_get_errno
8112eb04 l     F .text	00000094 alt_msgdma_write_standard_descriptor
8112eb98 l     F .text	0000012c alt_msgdma_write_extended_descriptor
8112ecc4 l     F .text	00000184 alt_msgdma_irq
8112ee48 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
8112eed4 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
8112f028 l     F .text	00000338 alt_msgdma_descriptor_async_transfer
8112f360 l     F .text	00000400 alt_msgdma_descriptor_sync_transfer
8112fa30 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
8112fad4 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
81130d40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
811313f4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81135f9c g     O .bss	00000004 alt_instruction_exception_handler
811086b8 g     F .text	00000044 vFailDeleteInitialization
81135f6c g     O .bss	00000004 aux_status_register
811309d4 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8110b5b0 g     F .text	00000018 putchar
81102880 g     F .text	00000128 SPWC_WRITE_REG32
81115f98 g     F .text	00000074 _mprec_log10
81103f0c g     F .text	00000128 TRAN_READ_REG32
81105128 g     F .text	00000100 I2C_Read
81135e22 g     O .rwdata	00000002 OSTaskNameSize
81116084 g     F .text	0000008c __any_on
81114af0 g     F .text	00000054 _isatty_r
81133a60 g     O .rodata	00000028 __mprec_tinytens
8111fb50 g     F .text	000000bc alt_main
81135eb8 g     O .bss	00000004 DMADev
8110b5c8 g     F .text	000000c0 _puts_r
81135d74 g     O .rwdata	00000004 ul_spwc_c_spacewire_link_control_status_register_value
811561ec g     O .bss	00000100 alt_irq
81135e94 g     O .bss	00000004 ul_tran_d_interface_control_status_register_value
81114c50 g     F .text	00000060 _lseek_r
81124718 g     F .text	000000cc OS_MemInit
811077d4 g     F .text	00000914 vLoadDefaultETHConf
81127f44 g     F .text	00000060 OSTimeSet
81135d80 g     O .rwdata	00000004 ul_spwc_f_spacewire_link_control_status_register_value
81113d6c g     F .text	000000ac __sflags
8111e9c4 g     F .text	00000088 .hidden __eqdf2
811019a0 g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_FULL
81100efc g     F .text	00000398 DDR2_MEMORY_READ_TEST
81128464 g     F .text	000001a4 Check_for_Master_Boot_Record
8112f810 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
81135e68 g     O .bss	00000004 ul_spwc_a_interface_control_status_register_value
81120a28 g     F .text	00000610 OSEventPendMulti
811562ec g       *ABS*	00000000 __alt_heap_start
811319ec g     F .text	00000024 OSTaskCreateHook
8112c204 g     F .text	000001bc alt_up_sd_card_fclose
81135eb0 g     O .bss	00000001 SspdConfigControl
8110b56c g     F .text	0000003c printf
81135dfa g     O .rwdata	00000002 OSMboxEn
8112d24c g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
81108bc0 g     F .text	0000009c aatoh
81121090 g     F .text	0000004c OSIntEnter
8111c774 g     F .text	0000009c _wcrtomb_r
81108630 g     F .text	00000044 vFailReceiverCreate
8110bae8 g     F .text	0000005c __sseek
81113d1c g     F .text	00000010 __sinit
8111b5f0 g     F .text	00000140 __swbuf_r
81135e0a g     O .rwdata	00000002 OSQEn
81114b74 g     F .text	0000007c _setlocale_r
81135eac g     O .bss	00000004 LedsPainelControl
81113b84 g     F .text	00000068 __sfmoreglue
81119f90 g     F .text	00000018 ungetc
811206fc g     F .text	000000cc __malloc_unlock
81101c68 g     F .text	00000208 DMA_MULTIPLE_TRANSFER
81131a54 g     F .text	00000020 OSTaskStatHook
81135f10 g     O .bss	00000001 OSLockNesting
81135ebc g     O .bss	00000004 xSemCommInit
811169ec g     F .text	000015f8 _strtod_r
81108cd4 g     F .text	00000440 .hidden __divsf3
81104100 g     F .text	000001f4 v_Transparent_Interface_Enable_Control
81135f90 g     O .bss	00000004 current_sector_modified
81135e48 g     O .rwdata	00000002 OSDataSize
81135f11 g     O .bss	00000001 OSRunning
81104cbc g     F .text	000002a8 ui_Transparent_Interface_Get_SpaceWire_Data
81135e90 g     O .bss	00000004 ul_tran_c_interface_control_status_register_value
8114a3c8 g     O .bss	00002000 senderTask_stk
8112d964 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
811033ac g     F .text	00000058 ul_SpaceWire_Interface_Interrupts_Flags_Read
81135ec0 g     O .bss	00000004 fp
811363c8 g     O .bss	00002000 SPWHTaskStk
81114fb8 g     F .text	0000015c memmove
81131a94 g     F .text	00000020 OSInitHookBegin
81103de4 g     F .text	00000128 TRAN_WRITE_REG32
81135e40 g     O .rwdata	00000002 OSTmrSize
81113d04 g     F .text	00000018 _cleanup
81108920 g     F .text	00000038 siCloseFile
81115114 g     F .text	000000a8 _Balloc
8112ae28 g     F .text	000000c4 alt_up_sd_card_is_Present
8112f760 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
8110735c g     F .text	00000198 Set_SpW_Led
811383c8 g     O .bss	00002000 SPWFTaskStk
81101a28 g     F .text	0000009c DMA_DISPATCHER_STOP
811281ac g     F .text	0000004c Save_Modified_Sector
81135f14 g     O .bss	00000004 OSIdleCtr
8111ea4c g     F .text	000000dc .hidden __gtdf2
8113179c g     F .text	00000024 altera_nios2_gen2_irq_init
8113186c g       .text	00000000 OSStartTsk
81122518 g     F .text	000002d4 OS_TCBInit
811086fc g     F .text	00000064 vInitSimucamBasicHW
81105484 g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
81135f88 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
811020ac g     F .text	000000f0 TEMP_Read
81106be4 g     F .text	000000ec tErrorHandlerFunc
81135e46 g     O .rwdata	00000002 OSTmrWheelTblSize
8112d4b4 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
81135de6 g     O .rwdata	00000002 OSEventSize
81135f18 g     O .bss	00000001 OSPrioHighRdy
8110a748 g     F .text	0000005c _fstat_r
81131a10 g     F .text	00000024 OSTaskDelHook
81135ecc g     O .bss	00000004 errno
81111c2c g     F .text	0000001c __svfscanf
8110ba64 g     F .text	00000008 __seofread
8113184c g       .text	00000000 OSStartHighRdy
811269e4 g     F .text	000001e4 OSTaskCreateExt
81118aec g     F .text	0000123c ___svfiprintf_internal_r
81123800 g     F .text	00000060 OSFlagPendGetFlagsRdy
81135e26 g     O .rwdata	00000002 OSTaskStatStkSize
811038cc g     F .text	00000070 uc_SpaceWire_Interface_Get_TimeCode
8112297c g     F .text	00000308 OSFlagAccept
81124d50 g     F .text	000000b8 OSQFlush
811247e4 g     F .text	00000140 OSQAccept
81135ef0 g     O .bss	00000004 alt_argv
8113dd6c g       *ABS*	00000000 _gp
81120250 g     F .text	00000134 usleep
8112b3e0 g     F .text	0000037c alt_up_sd_card_fopen
811087ac g     F .text	00000028 bSDcardIsPresent
81107294 g     F .text	000000c8 Configure_SpW_Autostart
811074f4 g     F .text	00000164 vSenderComTask
8112af58 g     F .text	000000d0 alt_up_sd_card_find_first
8110381c g     F .text	0000005c v_SpaceWire_Interface_Send_TimeCode
81126838 g     F .text	000001ac OSTaskCreate
81135f7c g     O .bss	00000004 command_argument_register
81126348 g     F .text	000004f0 OSTaskChangePrio
81135f0c g     O .bss	00000004 alt_heapsem
8110376c g     F .text	00000058 ul_SpaceWire_Interface_Link_Error_Read
8110570c g     F .text	00000078 bSetBoardLeds
811227ec g     F .text	00000190 OSDebugInit
81126bc8 g     F .text	00000344 OSTaskDel
81106df0 g     F .text	0000004c SPWDTask
81130280 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
81106544 g     F .text	0000033c vReceiverComTask
811349c0 g     O .rwdata	00000180 alt_fd_list
811523e4 g     O .bss	00000370 OSFlagTbl
8110b5a8 g     F .text	00000008 _putchar_r
81121ab4 g     F .text	000000b8 OS_EventTaskRemove
8112a6a4 g     F .text	0000012c find_first_empty_record_in_root_directory
81130ee0 g     F .text	00000090 alt_find_dev
8110b26c g     F .text	00000148 memcpy
8111c448 g     F .text	0000025c __hexnan
811037c4 g     F .text	00000058 ul_SpaceWire_Interface_Link_Status_Read
81135e10 g     O .rwdata	00000002 OSRdyTblSize
811139d4 g     F .text	0000000c _cleanup_r
8111f598 g     F .text	000000dc .hidden __floatsidf
81135ea0 g     O .bss	00000004 ul_tran_g_interface_control_status_register_value
811314b8 g     F .text	0000007c alt_io_redirect
8111eb28 g     F .text	000000f4 .hidden __ltdf2
81131f48 g       *ABS*	00000000 __DTOR_END__
811306f0 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
81130a10 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
81130980 g     F .text	00000054 alt_msgdma_register_callback
811080e8 g     F .text	00000328 vShowEthConfig
81135e84 g     O .bss	00000004 ul_spwc_h_interface_control_status_register_value
81108760 g     F .text	00000028 bLogWriteSDCard
8110b688 g     F .text	00000014 puts
81131b18 g     F .text	0000009c alt_exception_cause_generated_bad_addr
811207c8 g     F .text	00000120 OSEventNameGet
81135df4 g     O .rwdata	00000002 OSFlagMax
81114d5c g     F .text	000000d8 mbrtowc
8112a2ac g     F .text	000001ac find_first_empty_cluster
8111683c g     F .text	00000074 __fpclassifyd
81111c48 g     F .text	0000004c _vfscanf_r
81135d88 g     O .rwdata	00000004 ul_spwc_h_spacewire_link_control_status_register_value
81115ef4 g     F .text	000000a4 __ratio
8112ad6c g     F .text	000000bc alt_up_sd_card_open_dev
81103404 g     F .text	00000174 v_SpaceWire_Interface_Interrupts_Flags_Clear
811210dc g     F .text	000000f8 OSIntExit
8111b518 g     F .text	0000001c __vfiprintf_internal
81135e2e g     O .rwdata	00000002 OSTCBSize
8112d5ac g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
81135f19 g     O .bss	00000001 OSPrioCur
8112cb6c g     F .text	000002bc altera_avalon_jtag_uart_read
81108788 g     F .text	00000024 bLogWriteETH
8112ff60 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
8110b53c g     F .text	00000030 _printf_r
8111d578 g     F .text	00000064 .hidden __udivsi3
8111f99c g     F .text	000000a4 isatty
81135ea8 g     O .bss	00000001 LedsBoardControl
81135e14 g     O .rwdata	00000002 OSStkWidth
81114b44 g     F .text	00000030 iswspace
811048e4 g     F .text	00000054 b_Transparent_Interface_TX_FIFO_Status_Full
81133ab0 g     O .rodata	000000c8 __mprec_tens
81135e08 g     O .rwdata	00000002 OSPtrSize
81135e80 g     O .bss	00000004 ul_spwc_g_interface_control_status_register_value
81135e78 g     O .bss	00000004 ul_spwc_e_interface_control_status_register_value
81114bf0 g     F .text	0000000c __locale_charset
8111d768 g     F .text	000000c8 .hidden __lesf2
81135de8 g     O .rwdata	00000002 OSEventTblSize
81105950 g     F .text	00000034 v_Pattern_Generator_Start
8111c95c g     F .text	00000074 .hidden __fixunsdfsi
811317c0 g       .text	00000000 OSCtxSw
81105228 g     F .text	00000158 I2C_MultipleRead
81135ed8 g     O .bss	00000004 __malloc_top_pad
81135f1c g     O .bss	00000004 OSTCBList
81135ee8 g     O .bss	00000004 alt_fd_list_lock
81118628 g     F .text	0000001c strtoul
81135da0 g     O .rwdata	00000004 __mb_cur_max
81114c20 g     F .text	0000000c _localeconv_r
81118644 g     F .text	000002d8 _strtoull_r
81103578 g     F .text	000001f4 v_SpaceWire_Interface_Link_Control
81115520 g     F .text	0000003c __i2b
811144ac g     F .text	000004bc __sfvwrite_r
8112d6e4 g     F .text	0000005c alt_avalon_sgdma_stop
811295ac g     F .text	000000b8 get_dir_divider_location
81152754 g     O .bss	00000c30 OSMemTbl
81135f20 g     O .bss	00000001 OSTickStepState
8110b88c g     F .text	00000054 _sbrk_r
8112927c g     F .text	000000c4 filename_to_upper_case
81135e0c g     O .rwdata	00000002 OSQMax
8112b75c g     F .text	00000088 alt_up_sd_card_set_attributes
81153384 g     O .bss	00000800 OSTaskStatStk
811087d4 g     F .text	00000028 bSDcardFAT16Check
81124354 g     F .text	000000f0 OSMemNameGet
81128608 g     F .text	0000027c Read_File_Record_At_Offset
81106cd0 g     F .text	0000003c MemDMATask
81135dec g     O .rwdata	00000002 OSFlagEn
81116278 g     F .text	00000060 _read_r
81135e32 g     O .rwdata	00000002 OSTimeTickHookEn
81130d18 g     F .text	00000028 alt_dcache_flush
81125200 g     F .text	00000168 OSQPost
81123fec g     F .text	000000a4 OS_FlagUnlink
81135dbc g     O .rwdata	00000004 alt_max_fd
811220a0 g     F .text	00000068 OS_MemCopy
81122108 g     F .text	000000d0 OS_Sched
81129e38 g     F .text	00000474 find_file_in_directory
8111b80c g     F .text	000000f0 _fclose_r
81124264 g     F .text	000000f0 OSMemGet
811271f4 g     F .text	000001b4 OSTaskNameSet
8111399c g     F .text	00000030 fflush
81135ed4 g     O .bss	00000004 __malloc_max_sbrked_mem
81135f24 g     O .bss	00000004 OSCtxSwCtr
81131a74 g     F .text	00000020 OSTimeTickHook
81135df6 g     O .rwdata	00000002 OSFlagNameSize
81106ed4 g     F .text	0000004c SPWGTask
81109e3c g     F .text	00000110 .hidden __extendsfdf2
81121b6c g     F .text	00000100 OS_EventTaskRemoveMulti
8112aeec g     F .text	0000006c alt_up_sd_card_is_FAT16
81104fd0 g     F .text	00000080 I2C_TestAdress
8111d830 g     F .text	000008ac .hidden __adddf3
8111d634 g     F .text	00000078 .hidden __nesf2
81121964 g     F .text	00000150 OS_EventTaskWaitMulti
81115c9c g     F .text	0000010c __b2d
8112fcc0 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
81135e0e g     O .rwdata	00000002 OSQSize
8111cf48 g     F .text	00000538 .hidden __umoddi3
8111fa7c g     F .text	000000d4 lseek
81125cb0 g     F .text	0000020c OSSemPend
81135d8c g     O .rwdata	00000004 _global_impure_ptr
811063d8 g     F .text	00000044 bSSDisplayUpdate
81129900 g     F .text	00000538 get_home_directory_cluster_for_file
81104938 g     F .text	00000054 b_Transparent_Interface_TX_FIFO_Status_Empty
811162d8 g     F .text	00000564 _realloc_r
81135df8 g     O .rwdata	00000002 OSLowestPrio
811562ec g       *ABS*	00000000 __bss_end
81131304 g     F .text	000000f0 alt_iic_isr_register
8112d128 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
81131af4 g     F .text	00000024 OSTCBInitHook
81135e3e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
811030b8 g     F .text	00000100 v_SpaceWire_Interface_Force_Reset
81120148 g     F .text	00000108 alt_tick
81133c18 g     O .rodata	00000100 __hexdig
811307d4 g     F .text	000001ac alt_msgdma_init
8111c9d0 g     F .text	00000578 .hidden __udivdi3
8111ba74 g     F .text	00000024 _fputwc_r
81135de0 g     O .rwdata	00000002 OSEventEn
81133a88 g     O .rodata	00000028 __mprec_bigtens
81115304 g     F .text	00000104 __s2b
81135e3a g     O .rwdata	00000002 OSTmrCfgNameSize
8111f674 g     F .text	000000a8 .hidden __floatunsidf
811159dc g     F .text	00000060 __mcmp
81135f94 g     O .bss	00000004 current_sector_index
8112e084 g     F .text	00000160 altera_avalon_uart_init
81130a88 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
81113d3c g     F .text	00000018 __fp_lock_all
811312b8 g     F .text	0000004c alt_ic_irq_enabled
81105050 g     F .text	000000d8 I2C_Write
8110399c g     F .text	000001b0 b_SpaceWire_Interface_Set_TX_Div
81105900 g     F .text	00000050 ul_Pattern_Generator_Read_Register
81123e18 g     F .text	000000e0 OS_FlagInit
811200ac g     F .text	0000009c alt_alarm_stop
8110bf44 g     F .text	0000001c strtol
81128384 g     F .text	000000e0 mark_cluster
81200800 g       *ABS*	00000000 __alt_mem_descriptor_memory
81135e1c g     O .rwdata	00000002 OSTaskIdleStkSize
81135f98 g     O .bss	00000004 alt_irq_active
811258e8 g     F .text	000000b0 OSSemAccept
8110a2e8 g     F .text	00000444 _fseeko_r
811049dc g     F .text	00000198 b_Transparent_Interface_Switch_Channel
81124558 g     F .text	000000d8 OSMemPut
81124090 g     F .text	000001d4 OSMemCreate
81135f28 g     O .bss	00000004 OSIdleCtrMax
811000fc g     F .exceptions	000000d4 alt_irq_handler
81134998 g     O .rwdata	00000028 alt_dev_null
8112f8f8 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
81135e30 g     O .rwdata	00000002 OSTicksPerSec
8112a7d0 g     F .text	0000018c convert_filename_to_name_extension
81135eb5 g     O .bss	00000001 tempFPGA
8112d740 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
81103c90 g     F .text	000000ac b_SpaceWire_Interface_Read_RX_Data
81105380 g     F .text	0000008c i2c_start
811317c0 g       .text	00000000 OSIntCtxSw
811047a4 g     F .text	00000054 b_Transparent_Interface_RX_FIFO_Status_Full
81130664 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
81103d3c g     F .text	000000a8 ui_SpaceWire_Interface_Get_SpaceWire_Data
8111f828 g     F .text	00000020 alt_dcache_flush_all
81115408 g     F .text	00000068 __hi0bits
81135f68 g     O .bss	00000004 is_sd_card_formated_as_FAT16
8111f518 g     F .text	00000080 .hidden __fixdfsi
8114c3c8 g     O .bss	00002000 vInitialTask_stk
8112a458 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
81106880 g     F .text	0000031c bPreParser
81117fe4 g     F .text	00000018 strtod
81135f2c g     O .bss	00000004 OSTCBFreeList
81125ebc g     F .text	0000016c OSSemPendAbort
811085a8 g     F .text	00000044 vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
81135db4 g     O .rwdata	00000008 alt_dev_list
811203c0 g     F .text	000000f8 write
8112d884 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
81116110 g     F .text	000000a0 _putc_r
81135f8c g     O .bss	00000004 device_pointer
81135e34 g     O .rwdata	00000002 OSVersionNbr
8111d6ac g     F .text	000000bc .hidden __gtsf2
8111f8b0 g     F .text	000000b0 fstat
8110a2a4 g     F .text	00000024 fprintf
81101b60 g     F .text	00000108 DMA_SINGLE_TRANSFER
811089b0 g     F .text	00000050 _reg_write
8111eb28 g     F .text	000000f4 .hidden __ledf2
811040a0 g     F .text	00000060 ul_Transparent_Interface_Read_Register
81135ddc g     O .rwdata	00000004 OSEndiannessTest
81105fa0 g     F .text	00000050 v_spi_start
81115754 g     F .text	00000140 __pow5mult
8111a0bc g     F .text	0000145c ___vfiprintf_internal_r
81135ee4 g     O .bss	00000004 __nlocale_changed
8111d5dc g     F .text	00000058 .hidden __umodsi3
811087fc g     F .text	000000f0 bInitializeSDCard
81100ad8 g     F .text	00000424 DDR2_MEMORY_WRITE_TEST
8110b91c g     F .text	00000030 _scanf_r
8112d52c g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
81135dee g     O .rwdata	00000002 OSFlagGrpSize
8112fd18 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
8112d638 g     F .text	00000054 alt_avalon_sgdma_register_callback
811562ec g       *ABS*	00000000 end
8110a72c g     F .text	0000001c fseeko
81104f64 g     F .text	00000034 vEthHoldReset
8110a164 g     F .text	0000000c _atoi_r
8112e890 g     F .text	00000238 altera_avalon_uart_write
811031b8 g     F .text	000001f4 v_SpaceWire_Interface_Interrupts_Enable_Control
8110a2cc g     F .text	0000001c fseek
8112c524 g     F .text	00000148 altera_avalon_jtag_uart_init
81122370 g     F .text	000000dc OS_TaskStat
81135e8c g     O .bss	00000004 ul_tran_b_interface_control_status_register_value
811001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
81108564 g     F .text	00000044 vFailTestCriticasParts
81131f48 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
8112d904 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
81104848 g     F .text	00000044 v_Transparent_Interface_TX_FIFO_Reset
8112def8 g     F .text	0000007c alt_avalon_timer_sc_init
8112dfd4 g     F .text	00000060 altera_avalon_uart_write_fd
8110a0f4 g     F .text	00000064 .hidden __clzsi2
81105984 g     F .text	00000034 v_Pattern_Generator_Stop
81135e70 g     O .bss	00000004 ul_spwc_c_interface_control_status_register_value
8112e034 g     F .text	00000050 altera_avalon_uart_close_fd
8112ce28 g     F .text	000002c4 altera_avalon_jtag_uart_write
8112d35c g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
811044e8 g     F .text	00000058 ul_Transparent_Interface_Interrupts_Flags_Read
81113d2c g     F .text	00000004 __sfp_lock_acquire
8110219c g     F .text	00000040 sense_log_temp
81114ed4 g     F .text	000000e4 memchr
8112204c g     F .text	00000054 OS_MemClr
8110e138 g     F .text	000021f8 ___vfprintf_internal_r
81131890 g     F .text	0000015c OSTaskStkInit
8110b94c g     F .text	00000058 _sprintf_r
8110488c g     F .text	00000058 ul_Transparent_Interface_TX_FIFO_Status_Read
8112d454 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
8111419c g     F .text	00000310 _free_r
81131534 g     F .text	0000022c alt_printf
81108a50 g     F .text	00000104 _print_codec_status
81135d6c g     O .rwdata	00000004 ul_spwc_a_spacewire_link_control_status_register_value
81114bfc g     F .text	00000010 __locale_mb_cur_max
811216bc g     F .text	00000198 OS_EventTaskRdy
81101ac4 g     F .text	0000009c DMA_DISPATCHER_RESET
81131d94 g     F .text	00000180 __call_exitprocs
81135f30 g     O .bss	00000001 OSCPUUsage
8110027c g     F .text	000002a4 DDR2_EEPROM_TEST
81100a50 g     F .text	00000088 DDR2_SWITCH_MEMORY
81135ee0 g     O .bss	00000004 __mlocale_changed
81135d94 g     O .rwdata	00000004 __malloc_sbrk_base
81100244 g     F .text	00000038 _start
81135ef8 g     O .bss	00000004 _alt_tick_rate
81124e08 g     F .text	0000028c OSQPend
811180fc g     F .text	000002e0 _strtoll_r
8112d7a4 g     F .text	00000054 alt_avalon_sgdma_open
81127ab4 g     F .text	00000104 OSTimeDly
81115894 g     F .text	00000148 __lshift
81135eb6 g     O .bss	00000001 tempBoard
8112f7b8 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
81135efc g     O .bss	00000004 _alt_nticks
8111fe9c g     F .text	000000fc read
81128010 g     F .text	000000e8 alt_sys_init
811059ec g     F .text	00000048 Pattern_Generator_Status
81109510 g     F .text	00000124 .hidden __floatsisf
8111891c g     F .text	000001d0 __ssprint_r
8110b4dc g     F .text	00000060 _open_r
81108990 g     F .text	00000020 bTestSimucamCriticalHW
81108410 g     F .text	0000009c ucCrc8
81102b3c g     F .text	00000060 ul_SpaceWire_Interface_Read_Register
81131c7c g     F .text	00000118 __register_exitproc
81135f31 g     O .bss	00000001 OSTaskCtr
81106f20 g     F .text	0000004c SPWHTask
8113a3c8 g     O .bss	00002000 SPWETaskStk
81106b9c g     F .text	00000048 siPosStr
8111c6a4 g     F .text	000000d0 strncmp
811058a4 g     F .text	0000005c b_Pattern_Generator_Write_Register
81127bb8 g     F .text	0000015c OSTimeDlyHMSM
8111555c g     F .text	000001f8 __multiply
8112ca14 g     F .text	00000068 altera_avalon_jtag_uart_close
81106158 g     F .text	00000050 v_spi_end
81108958 g     F .text	00000038 cGetNextChar
81106d58 g     F .text	0000004c SPWBTask
81135fa0 g     O .bss	00000028 __malloc_current_mallinfo
81135de2 g     O .rwdata	00000002 OSEventMax
81104f98 g     F .text	00000038 vEthReleaseReset
8111d634 g     F .text	00000078 .hidden __eqsf2
81115da8 g     F .text	0000014c __d2b
81126028 g     F .text	00000110 OSSemPost
81135f64 g     O .bss	00000004 initialized
81121260 g     F .text	000000dc OSSchedUnlock
811061a8 g     F .text	00000168 RTCC_SPI_R_MAC
8112c3c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
811183dc g     F .text	0000024c _strtoul_r
81131078 g     F .text	000000dc alt_get_fd
81135f34 g     O .bss	00000004 OSMemFreeList
811213ac g     F .text	000000b0 OSStatInit
811018bc g     F .text	0000005c DMA_OPEN_DEVICE
81155c84 g     O .bss	00000014 search_data
81130bf0 g     F .text	00000128 alt_busy_sleep
81123bf4 g     F .text	000000c4 OSFlagQuery
81135e74 g     O .bss	00000004 ul_spwc_d_interface_control_status_register_value
81135e18 g     O .rwdata	00000002 OSTaskCreateExtEn
81108b54 g     F .text	0000006c _split_codec_status
81111e48 g     F .text	00000054 _close_r
81101294 g     F .text	000002e0 DDR2_MEMORY_RANDOM_WRITE_TEST
81135e6c g     O .bss	00000004 ul_spwc_b_interface_control_status_register_value
8110641c g     F .text	00000128 vInitialTask
8112fc68 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
81131c00 g     F .text	0000007c memcmp
8112169c g     F .text	00000020 OS_Dummy
8112c480 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
811562ec g       *ABS*	00000000 __alt_stack_base
8112c4d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
8110a7a4 g     F .text	000000cc _fwrite_r
8112fd70 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81111cf4 g     F .text	00000154 __swsetup_r
81107658 g     F .text	00000034 vResourcesInitRTOS
81153b84 g     O .bss	000001e0 OSQTbl
811523c8 g     O .bss	0000001c xConfEth
8111e0dc g     F .text	000008e8 .hidden __divdf3
81135e9c g     O .bss	00000004 ul_tran_f_interface_control_status_register_value
81113bec g     F .text	00000118 __sfp
81155c98 g     O .bss	00000054 boot_sector_data
811019e4 g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_EMPTY
8111600c g     F .text	00000078 __copybits
81134518 g     O .rwdata	00000408 __malloc_av_
81113d38 g     F .text	00000004 __sinit_lock_release
8110540c g     F .text	00000078 i2c_stop
81108c5c g     F .text	0000004c Verif_Error
81108ca8 g     F .text	0000002c toInt
81135f38 g     O .bss	00000004 OSTCBHighRdy
81109724 g     F .text	00000718 .hidden __muldf3
8110ba10 g     F .text	00000054 __sread
8114e3c8 g     O .bss	00002000 receiverTask_stk
81114044 g     F .text	00000034 fread
81135f3c g     O .bss	00000004 OSQFreeList
81130f70 g     F .text	00000108 alt_find_file
81130d7c g     F .text	000000a4 alt_dev_llist_insert
811205dc g     F .text	00000120 __malloc_lock
8110a27c g     F .text	00000028 _fprintf_r
8111fffc g     F .text	000000b0 sbrk
8110bf60 g     F .text	000021d8 ___svfprintf_internal_r
8112d68c g     F .text	00000058 alt_avalon_sgdma_start
811208e8 g     F .text	00000140 OSEventNameSet
81113940 g     F .text	0000005c _fflush_r
8111b748 g     F .text	000000c4 _calloc_r
81106fc4 g     F .text	000002d0 Init_Simucam_Tasks
81135f40 g     O .bss	00000001 OSRdyGrp
8110a264 g     F .text	00000018 fopen
81101918 g     F .text	00000044 DMA_CONFIG
81135e60 g       *ABS*	00000000 __bss_start
8110584c g     F .text	00000058 PGEN_READ_REG32
8110b3b4 g     F .text	00000128 memset
811046f8 g     F .text	00000058 ul_Transparent_Interface_RX_FIFO_Status_Read
8113c3c8 g     O .bss	00002000 SPWDTaskStk
8113077c g     F .text	00000058 alt_msgdma_open
81100520 g     F .text	00000530 DDR2_EEPROM_DUMP
8110768c g     F .text	00000148 main
81135ef4 g     O .bss	00000004 alt_envp
8113e3c8 g     O .bss	00002000 SPWATaskStk
81135ed0 g     O .bss	00000004 __malloc_max_total_mem
81130050 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
811059b8 g     F .text	00000034 v_Pattern_Generator_Reset
811084ac g     F .text	00000054 ucCrc8wInit
8112c420 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
81101e70 g     F .text	0000023c POWER_Read
811055b4 g     F .text	00000158 i2c_read
8111b730 g     F .text	00000018 __swbuf
81133d48 g     O .rodata	00000100 OSUnMapTbl
8111d768 g     F .text	000000c8 .hidden __ltsf2
8112b7e4 g     F .text	00000088 alt_up_sd_card_get_attributes
81113e18 g     F .text	0000022c _fread_r
81135e4c g     O .rwdata	00000008 alt_sgdma_list
81135e12 g     O .rwdata	00000002 OSSemEn
811280f8 g     F .text	000000b4 Write_Sector_Data
8112bbe4 g     F .text	00000620 alt_up_sd_card_write
81123860 g     F .text	00000394 OSFlagPost
8110bb44 g     F .text	00000008 __sclose
811fa000 g       *ABS*	00000000 __alt_heap_limit
8111b8fc g     F .text	00000014 fclose
81121854 g     F .text	00000110 OS_EventTaskWait
811503c8 g     O .bss	00002000 task2_stk
8110bd0c g     F .text	00000238 _strtol_r
81109f4c g     F .text	000001a8 .hidden __truncdfsf2
81135d78 g     O .rwdata	00000004 ul_spwc_d_spacewire_link_control_status_register_value
8112244c g     F .text	000000cc OS_TaskStatStkChk
81126f0c g     F .text	00000150 OSTaskDelReq
8111209c g     F .text	00001688 _dtoa_r
81130354 g     F .text	00000310 alt_msgdma_start_prefetcher_with_list_addr
8110aa60 g     F .text	0000080c _malloc_r
8111c8d0 g     F .text	00000030 __ascii_wctomb
81135dc0 g     O .rwdata	00000004 alt_errno
8112fea8 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
8112133c g     F .text	00000070 OSStart
811403c8 g     O .bss	00002000 LogTaskStk
81105ac0 g     F .text	000004e0 POWER_SPI_RW
81119d28 g     F .text	000000d4 __submore
8112057c g     F .text	00000060 __env_unlock
81114968 g     F .text	000000c4 _fwalk
81135e60 g     O .bss	00000004 InitialState
811273a8 g     F .text	000001d4 OSTaskResume
81124630 g     F .text	000000e8 OSMemQuery
811029a8 g     F .text	00000128 SPWC_READ_REG32
81135e24 g     O .rwdata	00000002 OSTaskStatEn
81114e78 g     F .text	0000005c _mbtowc_r
81135dfe g     O .rwdata	00000002 OSMemMax
81125368 g     F .text	00000170 OSQPostFront
811161b0 g     F .text	000000c8 putc
8111d480 g     F .text	00000084 .hidden __divsi3
81135f41 g     O .bss	00000004 OSRdyTbl
81135dd8 g     O .rwdata	00000002 OSDebugEn
81114078 g     F .text	00000124 _malloc_trim_r
81131f48 g       *ABS*	00000000 __CTOR_END__
81135ec4 g     O .bss	00000008 xSdHandle
81109114 g     F .text	000003fc .hidden __mulsf3
81135df0 g     O .rwdata	00000002 OSFlagNodeSize
81135e64 g     O .bss	00000004 pnt_memory
81135f70 g     O .bss	00000004 status_register
81135e38 g     O .rwdata	00000002 OSTmrCfgMax
8110bb4c g     F .text	000000dc strcmp
81135f78 g     O .bss	00000004 command_register
81124924 g     F .text	000001ac OSQCreate
8112705c g     F .text	00000198 OSTaskNameGet
811254d8 g     F .text	0000020c OSQPostOpt
8112145c g     F .text	00000220 OSTimeTick
81135e20 g     O .rwdata	00000002 OSTaskMax
81131f48 g       *ABS*	00000000 __DTOR_LIST__
81125998 g     F .text	000000d8 OSSemCreate
81135e44 g     O .rwdata	00000002 OSTmrWheelSize
81108a00 g     F .text	00000050 _reg_read
8111e9c4 g     F .text	00000088 .hidden __nedf2
81135e1a g     O .rwdata	00000002 OSTaskDelEn
81126138 g     F .text	00000110 OSSemQuery
81124ad0 g     F .text	00000280 OSQDel
81125094 g     F .text	0000016c OSQPendAbort
81127fd8 g     F .text	00000038 alt_irq_init
8111ff98 g     F .text	00000064 alt_release_fd
811282d0 g     F .text	000000b4 get_cluster_flag
81130a4c g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8110b9a4 g     F .text	0000006c sprintf
81133600 g     O .rodata	00000100 .hidden __clz_tab
81106da4 g     F .text	0000004c SPWCTask
81128884 g     F .text	0000028c Write_File_Record_At_Offset
81135edc g     O .bss	00000004 _PathLocale
81117ffc g     F .text	00000100 strtof
81131bb4 g     F .text	00000014 atexit
8111d6ac g     F .text	000000bc .hidden __gesf2
8110bc28 g     F .text	0000004c strcspn
81111c94 g     F .text	00000060 _write_r
811211d4 g     F .text	0000008c OSSchedLock
81114c2c g     F .text	00000018 setlocale
8112fe10 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8110b8e0 g     F .text	0000003c scanf
81122c84 g     F .text	00000108 OSFlagCreate
81128b10 g     F .text	00000680 Check_for_DOS_FAT
8112a95c g     F .text	000002c8 create_file
81116980 g     F .text	00000008 nanf
81135d90 g     O .rwdata	00000004 _impure_ptr
81135f74 g     O .bss	00000004 CSD_register_w0
81135d7c g     O .rwdata	00000004 ul_spwc_e_spacewire_link_control_status_register_value
81135eec g     O .bss	00000004 alt_argc
81106e3c g     F .text	0000004c SPWETask
811423c8 g     O .bss	00002000 SPWBTaskStk
81113724 g     F .text	0000021c __sflush_r
81114cb0 g     F .text	000000ac _mbrtowc_r
81135fc8 g     O .bss	00000400 szData
81130e80 g     F .text	00000060 _do_dtors
81114c18 g     F .text	00000008 __locale_cjk_lang
811021dc g     F .text	000006a4 sense_log
81135dea g     O .rwdata	00000002 OSEventMultiEn
8110a2c8 g     F .text	00000004 _fseek_r
81108500 g     F .text	00000064 printErrorTask
811443c8 g     O .bss	00002000 SPWGTaskStk
8110b6b8 g     F .text	000001d4 __srefill_r
81122d8c g     F .text	00000248 OSFlagDel
81135f48 g     O .bss	00000004 OSEventFreeList
81100020 g       .exceptions	00000000 alt_irq_entry
81114e34 g     F .text	00000044 __ascii_mbtowc
81115c38 g     F .text	00000064 __ulp
81123248 g     F .text	000005b8 OSFlagPend
81135e36 g     O .rwdata	00000002 OSTmrEn
81113d54 g     F .text	00000018 __fp_unlock_all
81135dac g     O .rwdata	00000008 alt_fs_list
81135ea4 g     O .bss	00000004 ul_tran_h_interface_control_status_register_value
81129340 g     F .text	0000026c check_file_name_for_FAT16_compliance
8112224c g     F .text	00000074 OS_StrCopy
81135f80 g     O .bss	00000004 buffer_memory
81135e88 g     O .bss	00000004 ul_tran_a_interface_control_status_register_value
81102d90 g     F .text	00000328 b_SpaceWire_Interface_Mode_Control
81104750 g     F .text	00000054 b_Transparent_Interface_RX_FIFO_Status_Empty
81135e00 g     O .rwdata	00000002 OSMemNameSize
811046b4 g     F .text	00000044 v_Transparent_Interface_RX_FIFO_Reset
81131ab4 g     F .text	00000020 OSInitHookEnd
81135e2c g     O .rwdata	00000002 OSTCBPrioTblMax
81114c44 g     F .text	0000000c localeconv
81135e28 g     O .rwdata	00000002 OSTaskStatStkChkEn
811463c8 g     O .bss	00002000 MemDMATaskStk
81131154 g     F .text	00000050 alt_ic_isr_register
81135dfc g     O .rwdata	00000002 OSMemEn
81135e98 g     O .bss	00000004 ul_tran_e_interface_control_status_register_value
8110a870 g     F .text	00000034 fwrite
81135f84 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
81135e06 g     O .rwdata	00000002 OSMutexEn
81135d70 g     O .rwdata	00000004 ul_spwc_b_spacewire_link_control_status_register_value
81106d0c g     F .text	0000004c SPWATask
81135e60 g       *ABS*	00000000 _edata
81101574 g     F .text	000002d0 DDR2_MEMORY_RANDOM_READ_TEST
8112df74 g     F .text	00000060 altera_avalon_uart_read_fd
811562ec g       *ABS*	00000000 _end
81155cec g     O .bss	00000500 active_files
81135f4c g     O .bss	00000001 OSIntNesting
811085ec g     F .text	00000044 vFailInitialization
8110498c g     F .text	00000050 uc_Transparent_Interface_TX_FIFO_Status_Used
8111b910 g     F .text	00000164 __fputwc
81111bc4 g     F .text	00000068 vfscanf
8112ac24 g     F .text	00000148 copy_file_record_name_to_string
8112ca7c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
81102b9c g     F .text	000001f4 b_SpaceWire_Interface_Enable_Control
81127d14 g     F .text	000001d4 OSTimeDlyResume
81129190 g     F .text	000000ec Look_for_FAT16
811230fc g     F .text	0000014c OSFlagNameSet
81105a34 g     F .text	0000008c Pattern_Generator_Configure_Initial_State
8112757c g     F .text	000001c0 OSTaskStkChk
8113122c g     F .text	0000008c alt_ic_irq_disable
81135e02 g     O .rwdata	00000002 OSMemSize
8112d7f8 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
8110ba6c g     F .text	0000007c __swrite
81135d98 g     O .rwdata	00000004 __malloc_trim_threshold
81114c0c g     F .text	0000000c __locale_msgcharset
81135f50 g     O .bss	00000004 OSTCBCur
81131bc8 g     F .text	00000038 exit
8112b028 g     F .text	000003b8 alt_up_sd_card_find_next
81135e04 g     O .rwdata	00000002 OSMemTblSize
81114a2c g     F .text	000000c4 _fwalk_reent
811301e8 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
81109634 g     F .text	000000f0 .hidden __floatunsisf
81115a3c g     F .text	000001fc __mdiff
81108674 g     F .text	00000044 vFailSenderCreate
8111d504 g     F .text	00000074 .hidden __modsi3
81135d9c g     O .rwdata	00000004 __ctype_ptr__
811281f8 g     F .text	000000d8 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
81113d30 g     F .text	00000004 __sfp_lock_release
81121038 g     F .text	00000058 OSInit
81105784 g     F .text	00000070 bSetPainelLeds
8112f988 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
81106f6c g     F .text	00000058 LogTask
81103878 g     F .text	00000054 b_SpaceWire_Interface_TimeCode_Arrived
81127920 g     F .text	00000124 OSTaskQuery
81125840 g     F .text	000000a8 OS_QInit
811168b0 g     F .text	000000d0 __sccl
8110a158 g     F .text	0000000c atoi
811222c0 g     F .text	00000054 OS_StrLen
81124444 g     F .text	00000114 OSMemNameSet
811337b4 g     O .rodata	00000101 _ctype_
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
81103bd4 g     F .text	000000bc b_SpaceWire_Interface_Send_SpaceWire_Data
81135e1e g     O .rwdata	00000002 OSTaskProfileEn
8112f868 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
81135f54 g     O .bss	00000004 OSTime
81135da4 g     O .rwdata	00000004 __mbtowc
8112e55c g     F .text	00000054 altera_avalon_uart_close
81153d64 g     O .bss	00000800 OSTaskIdleStk
8110a170 g     F .text	000000f4 _fopen_r
81104034 g     F .text	0000006c b_Transparent_Interface_Write_Register
81131f14 g     F .text	00000034 _exit
81130ac4 g     F .text	0000012c alt_alarm_start
81122fd4 g     F .text	00000128 OSFlagNameGet
81127ee8 g     F .text	0000005c OSTimeGet
81135eb4 g     O .bss	00000001 error_code
8112b86c g     F .text	00000378 alt_up_sd_card_read
8110a8a4 g     F .text	000001bc __smakebuf_r
81104b74 g     F .text	00000148 b_Transparent_Interface_Send_SpaceWire_Data
81135e54 g     O .rwdata	00000008 alt_msgdma_list
8110bc74 g     F .text	00000098 strlen
811060ac g     F .text	000000ac uc_spi_get_byte
811047f8 g     F .text	00000050 uc_Transparent_Interface_RX_FIFO_Status_Used
81131a34 g     F .text	00000020 OSTaskSwHook
8111fd0c g     F .text	00000154 open
81154564 g     O .bss	00000b40 OSEventTbl
8111ea4c g     F .text	000000dc .hidden __gedf2
81135e7c g     O .bss	00000004 ul_spwc_f_interface_control_status_register_value
81131760 g     F .text	0000003c alt_putchar
811550a4 g     O .bss	00000b64 OSTCBTbl
8111bc18 g     F .text	00000830 __gethex
81126248 g     F .text	00000100 OSSemSet
81135da8 g     O .rwdata	00000004 __wctomb
8111a0a4 g     F .text	00000018 __sprint_r
8110393c g     F .text	00000060 uc_SpaceWire_Interface_Get_TX_Div
81135d84 g     O .rwdata	00000004 ul_spwc_g_spacewire_link_control_status_register_value
81102ad0 g     F .text	0000006c b_SpaceWire_Interface_Write_Register
81135e5c g     O .rwdata	00000004 alt_priority_mask
81125a70 g     F .text	00000240 OSSemDel
81135f58 g     O .bss	00000004 OSFlagFreeList
81105ff0 g     F .text	000000bc v_spi_send_byte
81106310 g     F .text	000000c8 bSSDisplayConfig
811311a4 g     F .text	00000088 alt_ic_irq_enable
81135de4 g     O .rwdata	00000002 OSEventNameSize
81110330 g     F .text	0000001c __vfprintf_internal
811057f4 g     F .text	00000058 PGEN_WRITE_REG32
81135f5c g     O .bss	00000001 OSStatRdy
81155c08 g     O .bss	0000007c OSTCBPrioTbl
8112e5ec g     F .text	00000268 altera_avalon_uart_read
8111c900 g     F .text	0000005c _wctomb_r
811204b8 g     F .text	000000c4 __env_lock
81135e2a g     O .rwdata	00000002 OSTaskSwHookEn
8112d3d0 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
81104540 g     F .text	00000174 v_Transparent_Interface_Interrupts_Flags_Clear
811483c8 g     O .bss	00002000 SPWCTaskStk
8111ec1c g     F .text	000008fc .hidden __subdf3
81115470 g     F .text	000000b0 __lo0bits
81110408 g     F .text	000017bc __svfscanf_r
81135dc8 g     O .rwdata	00000008 alt_alarm_list
81119dfc g     F .text	00000194 _ungetc_r
81135df2 g     O .rwdata	00000002 OSFlagWidth
81130e20 g     F .text	00000060 _do_ctors
8110195c g     F .text	00000044 DMA_BUSY
8111c810 g     F .text	000000c0 wcrtomb
8111f758 g     F .text	000000d0 close
811042f4 g     F .text	000001f4 v_Transparent_Interface_Interrupts_Enable_Control
81135f04 g     O .bss	00000004 alt_envsem
81103b4c g     F .text	00000088 b_SpaceWire_Interface_Write_TX_Data
81135f60 g     O .bss	00000004 OSIdleCtrRun
81106e88 g     F .text	0000004c SPWFTask
8112167c g     F .text	00000020 OSVersion
81135e3c g     O .rwdata	00000002 OSTmrCfgWheelSize
81101844 g     F .text	00000078 xorshift32
81127a44 g     F .text	00000070 OS_TaskStkClr
811088ec g     F .text	00000034 siOpenFile
81135e16 g     O .rwdata	00000002 OSTaskCreateEn
81129664 g     F .text	0000029c match_file_record_to_name_ext
81121c6c g     F .text	00000068 OS_EventWaitListInit
8112ddd8 g     F .text	000000a8 alt_avalon_sgdma_init
8111ba98 g     F .text	00000080 fputwc
81131ad4 g     F .text	00000020 OSTaskIdleHook
81113d34 g     F .text	00000004 __sinit_lock_acquire
811151e4 g     F .text	00000120 __multadd
8112773c g     F .text	000001e4 OSTaskSuspend
811151bc g     F .text	00000028 _Bfree
81122314 g     F .text	0000005c OS_TaskIdle
81135e42 g     O .rwdata	00000002 OSTmrTblSize
811256e4 g     F .text	0000015c OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
81100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
81100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
81100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
81100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
81100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
81100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8110007c:	10000326 	beq	r2,zero,8110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
81100080:	20000226 	beq	r4,zero,8110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100084:	11000fc0 	call	811000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
81100088:	00000706 	br	811000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
81100098:	11001d00 	call	811001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8110009c:	1000021e 	bne	r2,zero,811000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000f8:	ef80083a 	eret

811000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
811000fc:	defff904 	addi	sp,sp,-28
81100100:	dfc00615 	stw	ra,24(sp)
81100104:	df000515 	stw	fp,20(sp)
81100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110010c:	11210900 	call	81121090 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100110:	0005313a 	rdctl	r2,ipending
81100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100124:	00800044 	movi	r2,1
81100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110012c:	e0fffb17 	ldw	r3,-20(fp)
81100130:	e0bffc17 	ldw	r2,-16(fp)
81100134:	1884703a 	and	r2,r3,r2
81100138:	10001426 	beq	r2,zero,8110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110013c:	00a04574 	movhi	r2,33045
81100140:	10987b04 	addi	r2,r2,25068
81100144:	e0fffd17 	ldw	r3,-12(fp)
81100148:	180690fa 	slli	r3,r3,3
8110014c:	10c5883a 	add	r2,r2,r3
81100150:	10c00017 	ldw	r3,0(r2)
81100154:	00a04574 	movhi	r2,33045
81100158:	10987b04 	addi	r2,r2,25068
8110015c:	e13ffd17 	ldw	r4,-12(fp)
81100160:	200890fa 	slli	r4,r4,3
81100164:	1105883a 	add	r2,r2,r4
81100168:	10800104 	addi	r2,r2,4
8110016c:	10800017 	ldw	r2,0(r2)
81100170:	1009883a 	mov	r4,r2
81100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110017c:	0005313a 	rdctl	r2,ipending
81100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100184:	e0bfff17 	ldw	r2,-4(fp)
81100188:	00000706 	br	811001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8110018c:	e0bffc17 	ldw	r2,-16(fp)
81100190:	1085883a 	add	r2,r2,r2
81100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
81100198:	e0bffd17 	ldw	r2,-12(fp)
8110019c:	10800044 	addi	r2,r2,1
811001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001a4:	003fe106 	br	8110012c <__reset+0xfb0e012c>

    active = alt_irq_pending ();
811001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001ac:	e0bffb17 	ldw	r2,-20(fp)
811001b0:	103fdb1e 	bne	r2,zero,81100120 <__reset+0xfb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001b4:	11210dc0 	call	811210dc <OSIntExit>
}
811001b8:	0001883a 	nop
811001bc:	e037883a 	mov	sp,fp
811001c0:	dfc00117 	ldw	ra,4(sp)
811001c4:	df000017 	ldw	fp,0(sp)
811001c8:	dec00204 	addi	sp,sp,8
811001cc:	f800283a 	ret

811001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001d0:	defffb04 	addi	sp,sp,-20
811001d4:	dfc00415 	stw	ra,16(sp)
811001d8:	df000315 	stw	fp,12(sp)
811001dc:	df000304 	addi	fp,sp,12
811001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001e4:	000531fa 	rdctl	r2,exception
811001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
811001ec:	e0bffd17 	ldw	r2,-12(fp)
811001f0:	10801f0c 	andi	r2,r2,124
811001f4:	1004d0ba 	srli	r2,r2,2
811001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
811001fc:	0005333a 	rdctl	r2,badaddr
81100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
81100204:	d0a08c17 	ldw	r2,-32208(gp)
81100208:	10000726 	beq	r2,zero,81100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8110020c:	d0a08c17 	ldw	r2,-32208(gp)
81100210:	e0fffd17 	ldw	r3,-12(fp)
81100214:	e1bffe17 	ldw	r6,-8(fp)
81100218:	e17fff17 	ldw	r5,-4(fp)
8110021c:	1809883a 	mov	r4,r3
81100220:	103ee83a 	callr	r2
81100224:	00000206 	br	81100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8110022c:	0005883a 	mov	r2,zero
}
81100230:	e037883a 	mov	sp,fp
81100234:	dfc00117 	ldw	ra,4(sp)
81100238:	df000017 	ldw	fp,0(sp)
8110023c:	dec00204 	addi	sp,sp,8
81100240:	f800283a 	ret

Disassembly of section .text:

81100244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100244:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110024c:	06a044f4 	movhi	gp,33043
    ori gp, gp, %lo(_gp)
81100250:	d6b75b14 	ori	gp,gp,56684
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
81100254:	00a044f4 	movhi	r2,33043
    ori r2, r2, %lo(__bss_start)
81100258:	10979814 	ori	r2,r2,24160

    movhi r3, %hi(__bss_end)
8110025c:	00e04574 	movhi	r3,33045
    ori r3, r3, %lo(__bss_end)
81100260:	18d8bb14 	ori	r3,r3,25324

    beq r2, r3, 1f
81100264:	10c00326 	beq	r2,r3,81100274 <_start+0x30>

0:
    stw zero, (r2)
81100268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8110026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100270:	10fffd36 	bltu	r2,r3,81100268 <__reset+0xfb0e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100274:	111fb500 	call	8111fb50 <alt_main>

81100278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100278:	003fff06 	br	81100278 <__reset+0xfb0e0278>

8110027c <DDR2_EEPROM_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_TEST(alt_u8 MemoryId){
8110027c:	defff604 	addi	sp,sp,-40
81100280:	dfc00915 	stw	ra,36(sp)
81100284:	df000815 	stw	fp,32(sp)
81100288:	df000804 	addi	fp,sp,32
8110028c:	2005883a 	mov	r2,r4
81100290:	e0bfff05 	stb	r2,-4(fp)

  printf("===== DE4 DDR2 EEPROM Test =====\n");
81100294:	012044f4 	movhi	r4,33043
81100298:	2107d204 	addi	r4,r4,8008
8110029c:	110b6880 	call	8110b688 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811002a0:	00bfe804 	movi	r2,-96
811002a4:	e0bffd05 	stb	r2,-12(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
811002a8:	00800044 	movi	r2,1
811002ac:	e0bff915 	stw	r2,-28(fp)
  switch (MemoryId) {
811002b0:	e0bfff03 	ldbu	r2,-4(fp)
811002b4:	10c00060 	cmpeqi	r3,r2,1
811002b8:	1800031e 	bne	r3,zero,811002c8 <DDR2_EEPROM_TEST+0x4c>
811002bc:	108000a0 	cmpeqi	r2,r2,2
811002c0:	1000081e 	bne	r2,zero,811002e4 <DDR2_EEPROM_TEST+0x68>
811002c4:	00000e06 	br	81100300 <DDR2_EEPROM_TEST+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811002c8:	00a00034 	movhi	r2,32768
811002cc:	10817404 	addi	r2,r2,1488
811002d0:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811002d4:	00a00034 	movhi	r2,32768
811002d8:	10817804 	addi	r2,r2,1504
811002dc:	e0bffb15 	stw	r2,-20(fp)
    break;
811002e0:	00000d06 	br	81100318 <DDR2_EEPROM_TEST+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811002e4:	00a00034 	movhi	r2,32768
811002e8:	10815004 	addi	r2,r2,1344
811002ec:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
811002f0:	00a00034 	movhi	r2,32768
811002f4:	10815404 	addi	r2,r2,1360
811002f8:	e0bffb15 	stw	r2,-20(fp)
    break;
811002fc:	00000606 	br	81100318 <DDR2_EEPROM_TEST+0x9c>
    default:
      bSuccess = FALSE;
81100300:	e03ff915 	stw	zero,-28(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100304:	012044f4 	movhi	r4,33043
81100308:	2107db04 	addi	r4,r4,8044
8110030c:	110b6880 	call	8110b688 <puts>
      return bSuccess;
81100310:	e0bff917 	ldw	r2,-28(fp)
81100314:	00007d06 	br	8110050c <DDR2_EEPROM_TEST+0x290>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
81100318:	012044f4 	movhi	r4,33043
8110031c:	2107e704 	addi	r4,r4,8092
81100320:	110b6880 	call	8110b688 <puts>
  usleep(20*1000);
81100324:	01138804 	movi	r4,20000
81100328:	11202500 	call	81120250 <usleep>
  for(i = 0; i < 256 && bSuccess; i++){
8110032c:	e03ffc15 	stw	zero,-16(fp)
81100330:	00002006 	br	811003b4 <DDR2_EEPROM_TEST+0x138>
    ControlAddr = i;
81100334:	e0bffc17 	ldw	r2,-16(fp)
81100338:	e0bffd45 	stb	r2,-11(fp)
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, ControlAddr, &Value);
8110033c:	e0bffd03 	ldbu	r2,-12(fp)
81100340:	10c03fcc 	andi	r3,r2,255
81100344:	18c0201c 	xori	r3,r3,128
81100348:	18ffe004 	addi	r3,r3,-128
8110034c:	e13ffd43 	ldbu	r4,-11(fp)
81100350:	e0bffe04 	addi	r2,fp,-8
81100354:	d8800015 	stw	r2,0(sp)
81100358:	200f883a 	mov	r7,r4
8110035c:	180d883a 	mov	r6,r3
81100360:	e17ffb17 	ldw	r5,-20(fp)
81100364:	e13ffa17 	ldw	r4,-24(fp)
81100368:	11051280 	call	81105128 <I2C_Read>
8110036c:	e0bff915 	stw	r2,-28(fp)
    if (bSuccess){
81100370:	e0bff917 	ldw	r2,-28(fp)
81100374:	10000926 	beq	r2,zero,8110039c <DDR2_EEPROM_TEST+0x120>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
81100378:	e0bffd43 	ldbu	r2,-11(fp)
8110037c:	e0fffe03 	ldbu	r3,-8(fp)
81100380:	18c03fcc 	andi	r3,r3,255
81100384:	180d883a 	mov	r6,r3
81100388:	100b883a 	mov	r5,r2
8110038c:	012044f4 	movhi	r4,33043
81100390:	2107ed04 	addi	r4,r4,8116
81100394:	110b56c0 	call	8110b56c <printf>
81100398:	00000306 	br	811003a8 <DDR2_EEPROM_TEST+0x12c>
    }else{
      printf("Failed to read EEPROM\n");
8110039c:	012044f4 	movhi	r4,33043
811003a0:	2107f204 	addi	r4,r4,8136
811003a4:	110b6880 	call	8110b688 <puts>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
  usleep(20*1000);
  for(i = 0; i < 256 && bSuccess; i++){
811003a8:	e0bffc17 	ldw	r2,-16(fp)
811003ac:	10800044 	addi	r2,r2,1
811003b0:	e0bffc15 	stw	r2,-16(fp)
811003b4:	e0bffc17 	ldw	r2,-16(fp)
811003b8:	10804008 	cmpgei	r2,r2,256
811003bc:	1000021e 	bne	r2,zero,811003c8 <DDR2_EEPROM_TEST+0x14c>
811003c0:	e0bff917 	ldw	r2,-28(fp)
811003c4:	103fdb1e 	bne	r2,zero,81100334 <__reset+0xfb0e0334>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
    }else{
      printf("Failed to read EEPROM\n");
    }
  }
  if (bSuccess){
811003c8:	e0bff917 	ldw	r2,-28(fp)
811003cc:	10000426 	beq	r2,zero,811003e0 <DDR2_EEPROM_TEST+0x164>
    printf("DDR2 EEPROM Read Test Completed\n\n");
811003d0:	012044f4 	movhi	r4,33043
811003d4:	2107f804 	addi	r4,r4,8160
811003d8:	110b6880 	call	8110b688 <puts>
811003dc:	00000306 	br	811003ec <DDR2_EEPROM_TEST+0x170>
  } else {
    printf("DDR2 EEPROM Read Test Failed\n\n");
811003e0:	012044f4 	movhi	r4,33043
811003e4:	21080104 	addi	r4,r4,8196
811003e8:	110b6880 	call	8110b688 <puts>
  }
  
  printf("DDR2 EEPROM Write Test\n");
811003ec:	012044f4 	movhi	r4,33043
811003f0:	21080904 	addi	r4,r4,8228
811003f4:	110b6880 	call	8110b688 <puts>
  alt_u8 WriteData = 0x12, TestAddr = 128;
811003f8:	00800484 	movi	r2,18
811003fc:	e0bffd85 	stb	r2,-10(fp)
81100400:	00bfe004 	movi	r2,-128
81100404:	e0bffdc5 	stb	r2,-9(fp)
  alt_u8 ReadData;
  usleep(20*1000);
81100408:	01138804 	movi	r4,20000
8110040c:	11202500 	call	81120250 <usleep>
  bSuccess = I2C_Write(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, WriteData);
81100410:	e0bffd03 	ldbu	r2,-12(fp)
81100414:	10c03fcc 	andi	r3,r2,255
81100418:	18c0201c 	xori	r3,r3,128
8110041c:	18ffe004 	addi	r3,r3,-128
81100420:	e13ffdc3 	ldbu	r4,-9(fp)
81100424:	e0bffd83 	ldbu	r2,-10(fp)
81100428:	d8800015 	stw	r2,0(sp)
8110042c:	200f883a 	mov	r7,r4
81100430:	180d883a 	mov	r6,r3
81100434:	e17ffb17 	ldw	r5,-20(fp)
81100438:	e13ffa17 	ldw	r4,-24(fp)
8110043c:	11050500 	call	81105050 <I2C_Write>
81100440:	e0bff915 	stw	r2,-28(fp)
  if (!bSuccess){
81100444:	e0bff917 	ldw	r2,-28(fp)
81100448:	1000041e 	bne	r2,zero,8110045c <DDR2_EEPROM_TEST+0x1e0>
    printf("Failed to write EEPROM\n");            
8110044c:	012044f4 	movhi	r4,33043
81100450:	21080f04 	addi	r4,r4,8252
81100454:	110b6880 	call	8110b688 <puts>
81100458:	00002006 	br	811004dc <DDR2_EEPROM_TEST+0x260>
  } else {
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, &ReadData);
8110045c:	e0bffd03 	ldbu	r2,-12(fp)
81100460:	10c03fcc 	andi	r3,r2,255
81100464:	18c0201c 	xori	r3,r3,128
81100468:	18ffe004 	addi	r3,r3,-128
8110046c:	e13ffdc3 	ldbu	r4,-9(fp)
81100470:	e0bffe44 	addi	r2,fp,-7
81100474:	d8800015 	stw	r2,0(sp)
81100478:	200f883a 	mov	r7,r4
8110047c:	180d883a 	mov	r6,r3
81100480:	e17ffb17 	ldw	r5,-20(fp)
81100484:	e13ffa17 	ldw	r4,-24(fp)
81100488:	11051280 	call	81105128 <I2C_Read>
8110048c:	e0bff915 	stw	r2,-28(fp)
    if (!bSuccess){
81100490:	e0bff917 	ldw	r2,-28(fp)
81100494:	1000041e 	bne	r2,zero,811004a8 <DDR2_EEPROM_TEST+0x22c>
      printf("Failed to read EEPROM for verify\n");            
81100498:	012044f4 	movhi	r4,33043
8110049c:	21081504 	addi	r4,r4,8276
811004a0:	110b6880 	call	8110b688 <puts>
811004a4:	00000d06 	br	811004dc <DDR2_EEPROM_TEST+0x260>
    } else {
      if (ReadData != WriteData){
811004a8:	e0bffe43 	ldbu	r2,-7(fp)
811004ac:	10c03fcc 	andi	r3,r2,255
811004b0:	e0bffd83 	ldbu	r2,-10(fp)
811004b4:	18800926 	beq	r3,r2,811004dc <DDR2_EEPROM_TEST+0x260>
        bSuccess = FALSE;
811004b8:	e03ff915 	stw	zero,-28(fp)
        printf("Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n", ReadData, WriteData);
811004bc:	e0bffe43 	ldbu	r2,-7(fp)
811004c0:	10803fcc 	andi	r2,r2,255
811004c4:	e0fffd83 	ldbu	r3,-10(fp)
811004c8:	180d883a 	mov	r6,r3
811004cc:	100b883a 	mov	r5,r2
811004d0:	012044f4 	movhi	r4,33043
811004d4:	21081e04 	addi	r4,r4,8312
811004d8:	110b56c0 	call	8110b56c <printf>
      }
    }
  }
  if (bSuccess){
811004dc:	e0bff917 	ldw	r2,-28(fp)
811004e0:	10000426 	beq	r2,zero,811004f4 <DDR2_EEPROM_TEST+0x278>
    printf("DDR2 EEPROM Write Test Completed\n\n");
811004e4:	012044f4 	movhi	r4,33043
811004e8:	21082d04 	addi	r4,r4,8372
811004ec:	110b6880 	call	8110b688 <puts>
811004f0:	00000306 	br	81100500 <DDR2_EEPROM_TEST+0x284>
  } else {
    printf("DDR2 EEPROM Write Test Failed\n\n");
811004f4:	012044f4 	movhi	r4,33043
811004f8:	21083604 	addi	r4,r4,8408
811004fc:	110b6880 	call	8110b688 <puts>
  }
  printf("\n");
81100500:	01000284 	movi	r4,10
81100504:	110b5b00 	call	8110b5b0 <putchar>

  return bSuccess;
81100508:	e0bff917 	ldw	r2,-28(fp)
}
8110050c:	e037883a 	mov	sp,fp
81100510:	dfc00117 	ldw	ra,4(sp)
81100514:	df000017 	ldw	fp,0(sp)
81100518:	dec00204 	addi	sp,sp,8
8110051c:	f800283a 	ret

81100520 <DDR2_EEPROM_DUMP>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_DUMP(alt_u8 MemoryId){
81100520:	deffb704 	addi	sp,sp,-292
81100524:	dfc04815 	stw	ra,288(sp)
81100528:	df004715 	stw	fp,284(sp)
8110052c:	df004704 	addi	fp,sp,284
81100530:	2005883a 	mov	r2,r4
81100534:	e0bfff05 	stb	r2,-4(fp)
 
  printf("===== DE4 DDR2 EEPROM Dump =====\n");
81100538:	012044f4 	movhi	r4,33043
8110053c:	21083e04 	addi	r4,r4,8440
81100540:	110b6880 	call	8110b688 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100544:	00bfe804 	movi	r2,-96
81100548:	e0bfbd05 	stb	r2,-268(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
8110054c:	00800044 	movi	r2,1
81100550:	e0bfbe15 	stw	r2,-264(fp)
  switch (MemoryId) {
81100554:	e0bfff03 	ldbu	r2,-4(fp)
81100558:	10c00060 	cmpeqi	r3,r2,1
8110055c:	1800031e 	bne	r3,zero,8110056c <DDR2_EEPROM_DUMP+0x4c>
81100560:	108000a0 	cmpeqi	r2,r2,2
81100564:	1000081e 	bne	r2,zero,81100588 <DDR2_EEPROM_DUMP+0x68>
81100568:	00000e06 	br	811005a4 <DDR2_EEPROM_DUMP+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8110056c:	00a00034 	movhi	r2,32768
81100570:	10817404 	addi	r2,r2,1488
81100574:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100578:	00a00034 	movhi	r2,32768
8110057c:	10817804 	addi	r2,r2,1504
81100580:	e0bfbb15 	stw	r2,-276(fp)
    break;
81100584:	00000d06 	br	811005bc <DDR2_EEPROM_DUMP+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100588:	00a00034 	movhi	r2,32768
8110058c:	10815004 	addi	r2,r2,1344
81100590:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
81100594:	00a00034 	movhi	r2,32768
81100598:	10815404 	addi	r2,r2,1360
8110059c:	e0bfbb15 	stw	r2,-276(fp)
    break;
811005a0:	00000606 	br	811005bc <DDR2_EEPROM_DUMP+0x9c>
    default:
      bSuccess = FALSE;
811005a4:	e03fbe15 	stw	zero,-264(fp)
	  printf("DR2 Memory ID not identified!! Aborting Dump \n");
811005a8:	012044f4 	movhi	r4,33043
811005ac:	21084704 	addi	r4,r4,8476
811005b0:	110b6880 	call	8110b688 <puts>
      return bSuccess;
811005b4:	e0bfbe17 	ldw	r2,-264(fp)
811005b8:	00012006 	br	81100a3c <DDR2_EEPROM_DUMP+0x51c>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
811005bc:	e0bfbd03 	ldbu	r2,-268(fp)
811005c0:	10c03fcc 	andi	r3,r2,255
811005c4:	18c0201c 	xori	r3,r3,128
811005c8:	18ffe004 	addi	r3,r3,-128
811005cc:	e13fbf04 	addi	r4,fp,-260
811005d0:	00804004 	movi	r2,256
811005d4:	d8800015 	stw	r2,0(sp)
811005d8:	200f883a 	mov	r7,r4
811005dc:	180d883a 	mov	r6,r3
811005e0:	e17fbb17 	ldw	r5,-276(fp)
811005e4:	e13fba17 	ldw	r4,-280(fp)
811005e8:	11052280 	call	81105228 <I2C_MultipleRead>
811005ec:	e0bfbe15 	stw	r2,-264(fp)
  if (bSuccess){
811005f0:	e0bfbe17 	ldw	r2,-264(fp)
811005f4:	10010b26 	beq	r2,zero,81100a24 <DDR2_EEPROM_DUMP+0x504>
    for(i = 0; i < 256 && bSuccess; i++){
811005f8:	e03fbc15 	stw	zero,-272(fp)
811005fc:	00010306 	br	81100a0c <DDR2_EEPROM_DUMP+0x4ec>
      printf("EEPROM[%03d]=%02Xh ", i, szData[i]);
81100600:	e0ffbf04 	addi	r3,fp,-260
81100604:	e0bfbc17 	ldw	r2,-272(fp)
81100608:	1885883a 	add	r2,r3,r2
8110060c:	10800003 	ldbu	r2,0(r2)
81100610:	10803fcc 	andi	r2,r2,255
81100614:	100d883a 	mov	r6,r2
81100618:	e17fbc17 	ldw	r5,-272(fp)
8110061c:	012044f4 	movhi	r4,33043
81100620:	21085304 	addi	r4,r4,8524
81100624:	110b56c0 	call	8110b56c <printf>
      if (i == 0)
81100628:	e0bfbc17 	ldw	r2,-272(fp)
8110062c:	1000041e 	bne	r2,zero,81100640 <DDR2_EEPROM_DUMP+0x120>
        printf("(Number of SPD Bytes Used)\n");
81100630:	012044f4 	movhi	r4,33043
81100634:	21085804 	addi	r4,r4,8544
81100638:	110b6880 	call	8110b688 <puts>
8110063c:	0000f006 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 1)
81100640:	e0bfbc17 	ldw	r2,-272(fp)
81100644:	10800058 	cmpnei	r2,r2,1
81100648:	1000041e 	bne	r2,zero,8110065c <DDR2_EEPROM_DUMP+0x13c>
        printf("(Total Number of Bytes in SPD Device, Log2(N))\n");
8110064c:	012044f4 	movhi	r4,33043
81100650:	21085f04 	addi	r4,r4,8572
81100654:	110b6880 	call	8110b688 <puts>
81100658:	0000e906 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 2)
8110065c:	e0bfbc17 	ldw	r2,-272(fp)
81100660:	10800098 	cmpnei	r2,r2,2
81100664:	1000041e 	bne	r2,zero,81100678 <DDR2_EEPROM_DUMP+0x158>
        printf("(Basic Memory Type[08h:DDR2])\n");
81100668:	012044f4 	movhi	r4,33043
8110066c:	21086b04 	addi	r4,r4,8620
81100670:	110b6880 	call	8110b688 <puts>
81100674:	0000e206 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 3)
81100678:	e0bfbc17 	ldw	r2,-272(fp)
8110067c:	108000d8 	cmpnei	r2,r2,3
81100680:	1000041e 	bne	r2,zero,81100694 <DDR2_EEPROM_DUMP+0x174>
        printf("(Number of Row Addresses on Assembly)\n");
81100684:	012044f4 	movhi	r4,33043
81100688:	21087304 	addi	r4,r4,8652
8110068c:	110b6880 	call	8110b688 <puts>
81100690:	0000db06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 4)
81100694:	e0bfbc17 	ldw	r2,-272(fp)
81100698:	10800118 	cmpnei	r2,r2,4
8110069c:	1000041e 	bne	r2,zero,811006b0 <DDR2_EEPROM_DUMP+0x190>
        printf("(Number of Column Addresses on Assembly)\n");
811006a0:	012044f4 	movhi	r4,33043
811006a4:	21087d04 	addi	r4,r4,8692
811006a8:	110b6880 	call	8110b688 <puts>
811006ac:	0000d406 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 5)
811006b0:	e0bfbc17 	ldw	r2,-272(fp)
811006b4:	10800158 	cmpnei	r2,r2,5
811006b8:	1000041e 	bne	r2,zero,811006cc <DDR2_EEPROM_DUMP+0x1ac>
        printf("(DIMM Height and Module Rank Number[b2b1b0+1])\n");
811006bc:	012044f4 	movhi	r4,33043
811006c0:	21088804 	addi	r4,r4,8736
811006c4:	110b6880 	call	8110b688 <puts>
811006c8:	0000cd06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 6)
811006cc:	e0bfbc17 	ldw	r2,-272(fp)
811006d0:	10800198 	cmpnei	r2,r2,6
811006d4:	1000041e 	bne	r2,zero,811006e8 <DDR2_EEPROM_DUMP+0x1c8>
        printf("(Module Data Width)\n");
811006d8:	012044f4 	movhi	r4,33043
811006dc:	21089404 	addi	r4,r4,8784
811006e0:	110b6880 	call	8110b688 <puts>
811006e4:	0000c606 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 7)
811006e8:	e0bfbc17 	ldw	r2,-272(fp)
811006ec:	108001d8 	cmpnei	r2,r2,7
811006f0:	1000041e 	bne	r2,zero,81100704 <DDR2_EEPROM_DUMP+0x1e4>
        printf("(Module Data Width, Continued)\n");
811006f4:	012044f4 	movhi	r4,33043
811006f8:	21089904 	addi	r4,r4,8804
811006fc:	110b6880 	call	8110b688 <puts>
81100700:	0000bf06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 16)
81100704:	e0bfbc17 	ldw	r2,-272(fp)
81100708:	10800418 	cmpnei	r2,r2,16
8110070c:	1000041e 	bne	r2,zero,81100720 <DDR2_EEPROM_DUMP+0x200>
        printf("(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
81100710:	012044f4 	movhi	r4,33043
81100714:	2108a104 	addi	r4,r4,8836
81100718:	110b6880 	call	8110b688 <puts>
8110071c:	0000b806 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 13)
81100720:	e0bfbc17 	ldw	r2,-272(fp)
81100724:	10800358 	cmpnei	r2,r2,13
81100728:	1000041e 	bne	r2,zero,8110073c <DDR2_EEPROM_DUMP+0x21c>
        printf("(Primary SDRAM width)\n");
8110072c:	012044f4 	movhi	r4,33043
81100730:	2108ae04 	addi	r4,r4,8888
81100734:	110b6880 	call	8110b688 <puts>
81100738:	0000b106 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 14)
8110073c:	e0bfbc17 	ldw	r2,-272(fp)
81100740:	10800398 	cmpnei	r2,r2,14
81100744:	1000041e 	bne	r2,zero,81100758 <DDR2_EEPROM_DUMP+0x238>
        printf("(ECC SDRAM width)\n");
81100748:	012044f4 	movhi	r4,33043
8110074c:	2108b404 	addi	r4,r4,8912
81100750:	110b6880 	call	8110b688 <puts>
81100754:	0000aa06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 17)
81100758:	e0bfbc17 	ldw	r2,-272(fp)
8110075c:	10800458 	cmpnei	r2,r2,17
81100760:	1000041e 	bne	r2,zero,81100774 <DDR2_EEPROM_DUMP+0x254>
        printf("(Banks per SDRAM device)\n");
81100764:	012044f4 	movhi	r4,33043
81100768:	2108b904 	addi	r4,r4,8932
8110076c:	110b6880 	call	8110b688 <puts>
81100770:	0000a306 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 18)
81100774:	e0bfbc17 	ldw	r2,-272(fp)
81100778:	10800498 	cmpnei	r2,r2,18
8110077c:	1000041e 	bne	r2,zero,81100790 <DDR2_EEPROM_DUMP+0x270>
        printf("(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
81100780:	012044f4 	movhi	r4,33043
81100784:	2108c004 	addi	r4,r4,8960
81100788:	110b6880 	call	8110b688 <puts>
8110078c:	00009c06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 20)
81100790:	e0bfbc17 	ldw	r2,-272(fp)
81100794:	10800518 	cmpnei	r2,r2,20
81100798:	1000041e 	bne	r2,zero,811007ac <DDR2_EEPROM_DUMP+0x28c>
        printf("(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
8110079c:	012044f4 	movhi	r4,33043
811007a0:	2108cd04 	addi	r4,r4,9012
811007a4:	110b6880 	call	8110b688 <puts>
811007a8:	00009506 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 22)
811007ac:	e0bfbc17 	ldw	r2,-272(fp)
811007b0:	10800598 	cmpnei	r2,r2,22
811007b4:	1000041e 	bne	r2,zero,811007c8 <DDR2_EEPROM_DUMP+0x2a8>
        printf("(Memory Chip feature bitmap)\n");
811007b8:	012044f4 	movhi	r4,33043
811007bc:	2108df04 	addi	r4,r4,9084
811007c0:	110b6880 	call	8110b688 <puts>
811007c4:	00008e06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 27)
811007c8:	e0bfbc17 	ldw	r2,-272(fp)
811007cc:	108006d8 	cmpnei	r2,r2,27
811007d0:	1000041e 	bne	r2,zero,811007e4 <DDR2_EEPROM_DUMP+0x2c4>
        printf("(Minimun row precharge time[tRP;nsx4])\n");
811007d4:	012044f4 	movhi	r4,33043
811007d8:	2108e704 	addi	r4,r4,9116
811007dc:	110b6880 	call	8110b688 <puts>
811007e0:	00008706 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 28)
811007e4:	e0bfbc17 	ldw	r2,-272(fp)
811007e8:	10800718 	cmpnei	r2,r2,28
811007ec:	1000041e 	bne	r2,zero,81100800 <DDR2_EEPROM_DUMP+0x2e0>
        printf("(Minimun row active-row activce delay[tRRD;nsx4])\n");
811007f0:	012044f4 	movhi	r4,33043
811007f4:	2108f104 	addi	r4,r4,9156
811007f8:	110b6880 	call	8110b688 <puts>
811007fc:	00008006 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 29)
81100800:	e0bfbc17 	ldw	r2,-272(fp)
81100804:	10800758 	cmpnei	r2,r2,29
81100808:	1000041e 	bne	r2,zero,8110081c <DDR2_EEPROM_DUMP+0x2fc>
        printf("(Minimun RAS to CAS delay[tRCD;nsx4])\n");
8110080c:	012044f4 	movhi	r4,33043
81100810:	2108fe04 	addi	r4,r4,9208
81100814:	110b6880 	call	8110b688 <puts>
81100818:	00007906 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 30)
8110081c:	e0bfbc17 	ldw	r2,-272(fp)
81100820:	10800798 	cmpnei	r2,r2,30
81100824:	1000041e 	bne	r2,zero,81100838 <DDR2_EEPROM_DUMP+0x318>
        printf("(Minimun acive to precharge time[tRAS;ns])\n");
81100828:	012044f4 	movhi	r4,33043
8110082c:	21090804 	addi	r4,r4,9248
81100830:	110b6880 	call	8110b688 <puts>
81100834:	00007206 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 31)
81100838:	e0bfbc17 	ldw	r2,-272(fp)
8110083c:	108007d8 	cmpnei	r2,r2,31
81100840:	1000041e 	bne	r2,zero,81100854 <DDR2_EEPROM_DUMP+0x334>
        printf("(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
81100844:	012044f4 	movhi	r4,33043
81100848:	21091304 	addi	r4,r4,9292
8110084c:	110b6880 	call	8110b688 <puts>
81100850:	00006b06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 36)
81100854:	e0bfbc17 	ldw	r2,-272(fp)
81100858:	10800918 	cmpnei	r2,r2,36
8110085c:	1000041e 	bne	r2,zero,81100870 <DDR2_EEPROM_DUMP+0x350>
        printf("(Minimun write receovery time[tWR;nsx4])\n");
81100860:	012044f4 	movhi	r4,33043
81100864:	21092404 	addi	r4,r4,9360
81100868:	110b6880 	call	8110b688 <puts>
8110086c:	00006406 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 37)
81100870:	e0bfbc17 	ldw	r2,-272(fp)
81100874:	10800958 	cmpnei	r2,r2,37
81100878:	1000041e 	bne	r2,zero,8110088c <DDR2_EEPROM_DUMP+0x36c>
        printf("(Internal write to read command delay[tWTR;nsx4])\n");
8110087c:	012044f4 	movhi	r4,33043
81100880:	21092f04 	addi	r4,r4,9404
81100884:	110b6880 	call	8110b688 <puts>
81100888:	00005d06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 38)
8110088c:	e0bfbc17 	ldw	r2,-272(fp)
81100890:	10800998 	cmpnei	r2,r2,38
81100894:	1000041e 	bne	r2,zero,811008a8 <DDR2_EEPROM_DUMP+0x388>
        printf("(Internal read to precharge command delay[tRTP;nsx4])\n");
81100898:	012044f4 	movhi	r4,33043
8110089c:	21093c04 	addi	r4,r4,9456
811008a0:	110b6880 	call	8110b688 <puts>
811008a4:	00005606 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 41)
811008a8:	e0bfbc17 	ldw	r2,-272(fp)
811008ac:	10800a58 	cmpnei	r2,r2,41
811008b0:	1000041e 	bne	r2,zero,811008c4 <DDR2_EEPROM_DUMP+0x3a4>
        printf("(Minimun activce to active/refresh time[tRC;ns])\n");
811008b4:	012044f4 	movhi	r4,33043
811008b8:	21094a04 	addi	r4,r4,9512
811008bc:	110b6880 	call	8110b688 <puts>
811008c0:	00004f06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 42)
811008c4:	e0bfbc17 	ldw	r2,-272(fp)
811008c8:	10800a98 	cmpnei	r2,r2,42
811008cc:	1000041e 	bne	r2,zero,811008e0 <DDR2_EEPROM_DUMP+0x3c0>
        printf("(Minimun refresh to active/refresh time[tRFC;ns])\n");
811008d0:	012044f4 	movhi	r4,33043
811008d4:	21095704 	addi	r4,r4,9564
811008d8:	110b6880 	call	8110b688 <puts>
811008dc:	00004806 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 62)
811008e0:	e0bfbc17 	ldw	r2,-272(fp)
811008e4:	10800f98 	cmpnei	r2,r2,62
811008e8:	1000041e 	bne	r2,zero,811008fc <DDR2_EEPROM_DUMP+0x3dc>
        printf("(SPD Revision)\n");
811008ec:	012044f4 	movhi	r4,33043
811008f0:	21096404 	addi	r4,r4,9616
811008f4:	110b6880 	call	8110b688 <puts>
811008f8:	00004106 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 63)
811008fc:	e0bfbc17 	ldw	r2,-272(fp)
81100900:	10800fd8 	cmpnei	r2,r2,63
81100904:	1000041e 	bne	r2,zero,81100918 <DDR2_EEPROM_DUMP+0x3f8>
        printf("(Checksum)\n");
81100908:	012044f4 	movhi	r4,33043
8110090c:	21096804 	addi	r4,r4,9632
81100910:	110b6880 	call	8110b688 <puts>
81100914:	00003a06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 64)
81100918:	e0bfbc17 	ldw	r2,-272(fp)
8110091c:	10801018 	cmpnei	r2,r2,64
81100920:	1000041e 	bne	r2,zero,81100934 <DDR2_EEPROM_DUMP+0x414>
        printf("(64~71: Manufacturer JEDEC ID)\n");
81100924:	012044f4 	movhi	r4,33043
81100928:	21096b04 	addi	r4,r4,9644
8110092c:	110b6880 	call	8110b688 <puts>
81100930:	00003306 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 72)
81100934:	e0bfbc17 	ldw	r2,-272(fp)
81100938:	10801218 	cmpnei	r2,r2,72
8110093c:	1000041e 	bne	r2,zero,81100950 <DDR2_EEPROM_DUMP+0x430>
        printf("(Module manufacturing location[Vendor-specific code])\n");
81100940:	012044f4 	movhi	r4,33043
81100944:	21097304 	addi	r4,r4,9676
81100948:	110b6880 	call	8110b688 <puts>
8110094c:	00002c06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 73)
81100950:	e0bfbc17 	ldw	r2,-272(fp)
81100954:	10801258 	cmpnei	r2,r2,73
81100958:	1000041e 	bne	r2,zero,8110096c <DDR2_EEPROM_DUMP+0x44c>
        printf("(73~90: Moduloe part number)\n");
8110095c:	012044f4 	movhi	r4,33043
81100960:	21098104 	addi	r4,r4,9732
81100964:	110b6880 	call	8110b688 <puts>
81100968:	00002506 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 91)
8110096c:	e0bfbc17 	ldw	r2,-272(fp)
81100970:	108016d8 	cmpnei	r2,r2,91
81100974:	1000041e 	bne	r2,zero,81100988 <DDR2_EEPROM_DUMP+0x468>
        printf("(91~92: Moduloe revision code)\n");
81100978:	012044f4 	movhi	r4,33043
8110097c:	21098904 	addi	r4,r4,9764
81100980:	110b6880 	call	8110b688 <puts>
81100984:	00001e06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 93)
81100988:	e0bfbc17 	ldw	r2,-272(fp)
8110098c:	10801758 	cmpnei	r2,r2,93
81100990:	1000041e 	bne	r2,zero,811009a4 <DDR2_EEPROM_DUMP+0x484>
        printf("(Manufacture Years since 2000[0-255])\n");
81100994:	012044f4 	movhi	r4,33043
81100998:	21099104 	addi	r4,r4,9796
8110099c:	110b6880 	call	8110b688 <puts>
811009a0:	00001706 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 94)
811009a4:	e0bfbc17 	ldw	r2,-272(fp)
811009a8:	10801798 	cmpnei	r2,r2,94
811009ac:	1000041e 	bne	r2,zero,811009c0 <DDR2_EEPROM_DUMP+0x4a0>
        printf("(Manufacture Weeks[1-52])\n");
811009b0:	012044f4 	movhi	r4,33043
811009b4:	21099b04 	addi	r4,r4,9836
811009b8:	110b6880 	call	8110b688 <puts>
811009bc:	00001006 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 95)
811009c0:	e0bfbc17 	ldw	r2,-272(fp)
811009c4:	108017d8 	cmpnei	r2,r2,95
811009c8:	1000041e 	bne	r2,zero,811009dc <DDR2_EEPROM_DUMP+0x4bc>
        printf("(95~98[4-bytes]: Module serial number)\n");
811009cc:	012044f4 	movhi	r4,33043
811009d0:	2109a204 	addi	r4,r4,9864
811009d4:	110b6880 	call	8110b688 <puts>
811009d8:	00000906 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 99)
811009dc:	e0bfbc17 	ldw	r2,-272(fp)
811009e0:	108018d8 	cmpnei	r2,r2,99
811009e4:	1000041e 	bne	r2,zero,811009f8 <DDR2_EEPROM_DUMP+0x4d8>
        printf("(99~128: Manufacturer-specific data)\n");
811009e8:	012044f4 	movhi	r4,33043
811009ec:	2109ac04 	addi	r4,r4,9904
811009f0:	110b6880 	call	8110b688 <puts>
811009f4:	00000206 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else
        printf("\n");
811009f8:	01000284 	movi	r4,10
811009fc:	110b5b00 	call	8110b5b0 <putchar>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
  if (bSuccess){
    for(i = 0; i < 256 && bSuccess; i++){
81100a00:	e0bfbc17 	ldw	r2,-272(fp)
81100a04:	10800044 	addi	r2,r2,1
81100a08:	e0bfbc15 	stw	r2,-272(fp)
81100a0c:	e0bfbc17 	ldw	r2,-272(fp)
81100a10:	10804008 	cmpgei	r2,r2,256
81100a14:	1000061e 	bne	r2,zero,81100a30 <DDR2_EEPROM_DUMP+0x510>
81100a18:	e0bfbe17 	ldw	r2,-264(fp)
81100a1c:	103ef81e 	bne	r2,zero,81100600 <__reset+0xfb0e0600>
81100a20:	00000306 	br	81100a30 <DDR2_EEPROM_DUMP+0x510>
        printf("(99~128: Manufacturer-specific data)\n");
      else
        printf("\n");
    }
  } else {
    printf("Failed to dump EEPROM\n"); 
81100a24:	012044f4 	movhi	r4,33043
81100a28:	2109b604 	addi	r4,r4,9944
81100a2c:	110b6880 	call	8110b688 <puts>
  }
  printf("\n");
81100a30:	01000284 	movi	r4,10
81100a34:	110b5b00 	call	8110b5b0 <putchar>

  return bSuccess;  
81100a38:	e0bfbe17 	ldw	r2,-264(fp)
}
81100a3c:	e037883a 	mov	sp,fp
81100a40:	dfc00117 	ldw	ra,4(sp)
81100a44:	df000017 	ldw	fp,0(sp)
81100a48:	dec00204 	addi	sp,sp,8
81100a4c:	f800283a 	ret

81100a50 <DDR2_SWITCH_MEMORY>:

bool DDR2_SWITCH_MEMORY(alt_u8 MemoryId){
81100a50:	defffb04 	addi	sp,sp,-20
81100a54:	dfc00415 	stw	ra,16(sp)
81100a58:	df000315 	stw	fp,12(sp)
81100a5c:	df000304 	addi	fp,sp,12
81100a60:	2005883a 	mov	r2,r4
81100a64:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *pDdr2MemAddr = DDR2_EXTENDED_ADDRESS_CONTROL_BASE;
81100a68:	00a04834 	movhi	r2,33056
81100a6c:	10903204 	addi	r2,r2,16584
81100a70:	e0bffe15 	stw	r2,-8(fp)

	  bSuccess = TRUE;
81100a74:	00800044 	movi	r2,1
81100a78:	e0bffd15 	stw	r2,-12(fp)
	  switch (MemoryId) {
81100a7c:	e0bfff03 	ldbu	r2,-4(fp)
81100a80:	10c00060 	cmpeqi	r3,r2,1
81100a84:	1800031e 	bne	r3,zero,81100a94 <DDR2_SWITCH_MEMORY+0x44>
81100a88:	108000a0 	cmpeqi	r2,r2,2
81100a8c:	1000041e 	bne	r2,zero,81100aa0 <DDR2_SWITCH_MEMORY+0x50>
81100a90:	00000706 	br	81100ab0 <DDR2_SWITCH_MEMORY+0x60>
	    case DDR2_M1_ID:
	  	  *(pDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
81100a94:	e0bffe17 	ldw	r2,-8(fp)
81100a98:	10000015 	stw	zero,0(r2)
	    break;
81100a9c:	00000806 	br	81100ac0 <DDR2_SWITCH_MEMORY+0x70>
	    case DDR2_M2_ID:
		  *(pDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81100aa0:	e0bffe17 	ldw	r2,-8(fp)
81100aa4:	00e00034 	movhi	r3,32768
81100aa8:	10c00015 	stw	r3,0(r2)
	    break;
81100aac:	00000406 	br	81100ac0 <DDR2_SWITCH_MEMORY+0x70>
	    default:
	      bSuccess = FALSE;
81100ab0:	e03ffd15 	stw	zero,-12(fp)
		  printf("DR2 Memory ID not identified!! Error switching memories!! \n");
81100ab4:	012044f4 	movhi	r4,33043
81100ab8:	2109bc04 	addi	r4,r4,9968
81100abc:	110b6880 	call	8110b688 <puts>
	  }

	  return bSuccess;
81100ac0:	e0bffd17 	ldw	r2,-12(fp)
}
81100ac4:	e037883a 	mov	sp,fp
81100ac8:	dfc00117 	ldw	ra,4(sp)
81100acc:	df000017 	ldw	fp,0(sp)
81100ad0:	dec00204 	addi	sp,sp,8
81100ad4:	f800283a 	ret

81100ad8 <DDR2_MEMORY_WRITE_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_WRITE_TEST(alt_u8 MemoryId){
81100ad8:	deffe304 	addi	sp,sp,-116
81100adc:	dfc01c15 	stw	ra,112(sp)
81100ae0:	df001b15 	stw	fp,108(sp)
81100ae4:	dc401a15 	stw	r17,104(sp)
81100ae8:	dc001915 	stw	r16,100(sp)
81100aec:	df001b04 	addi	fp,sp,108
81100af0:	2005883a 	mov	r2,r4
81100af4:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Write Test =====\n");
81100af8:	012044f4 	movhi	r4,33043
81100afc:	2109cb04 	addi	r4,r4,10028
81100b00:	110b6880 	call	8110b688 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81100b04:	00800044 	movi	r2,1
81100b08:	e0bfed15 	stw	r2,-76(fp)
  switch (MemoryId) {
81100b0c:	e0bffd03 	ldbu	r2,-12(fp)
81100b10:	10c00060 	cmpeqi	r3,r2,1
81100b14:	1800031e 	bne	r3,zero,81100b24 <DDR2_MEMORY_WRITE_TEST+0x4c>
81100b18:	108000a0 	cmpeqi	r2,r2,2
81100b1c:	1000081e 	bne	r2,zero,81100b40 <DDR2_MEMORY_WRITE_TEST+0x68>
81100b20:	00000e06 	br	81100b5c <DDR2_MEMORY_WRITE_TEST+0x84>
    case DDR2_M1_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
81100b24:	e0bffd03 	ldbu	r2,-12(fp)
81100b28:	1009883a 	mov	r4,r2
81100b2c:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100b30:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M1_MEMORY_SIZE;
81100b34:	00a00034 	movhi	r2,32768
81100b38:	e0bfe615 	stw	r2,-104(fp)
    break;
81100b3c:	00000d06 	br	81100b74 <DDR2_MEMORY_WRITE_TEST+0x9c>
    case DDR2_M2_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
81100b40:	e0bffd03 	ldbu	r2,-12(fp)
81100b44:	1009883a 	mov	r4,r2
81100b48:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100b4c:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M2_MEMORY_SIZE;
81100b50:	00a00034 	movhi	r2,32768
81100b54:	e0bfe615 	stw	r2,-104(fp)
    break;
81100b58:	00000606 	br	81100b74 <DDR2_MEMORY_WRITE_TEST+0x9c>
    default:
      bSuccess = FALSE;
81100b5c:	e03fed15 	stw	zero,-76(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100b60:	012044f4 	movhi	r4,33043
81100b64:	2107db04 	addi	r4,r4,8044
81100b68:	110b6880 	call	8110b688 <puts>
      return bSuccess;
81100b6c:	e0bfed17 	ldw	r2,-76(fp)
81100b70:	0000db06 	br	81100ee0 <DDR2_MEMORY_WRITE_TEST+0x408>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81100b74:	e0bfe617 	ldw	r2,-104(fp)
81100b78:	1004d53a 	srli	r2,r2,20
81100b7c:	100b883a 	mov	r5,r2
81100b80:	012044f4 	movhi	r4,33043
81100b84:	2109d504 	addi	r4,r4,10068
81100b88:	110b56c0 	call	8110b56c <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes;
  
  int nItemNum, nPos;
  const int my_data_size = sizeof(my_data);
81100b8c:	00800104 	movi	r2,4
81100b90:	e0bfee15 	stw	r2,-72(fp)
  int nProgressIndex = 0;
81100b94:	e03fec15 	stw	zero,-80(fp)
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81100b98:	e03fef15 	stw	zero,-68(fp)
  
  for(i = 0; i < 10; i++){
81100b9c:	e03fe715 	stw	zero,-100(fp)
81100ba0:	00001506 	br	81100bf8 <DDR2_MEMORY_WRITE_TEST+0x120>
    szProgress[i] = ByteLen/10*(i+1);
81100ba4:	e0ffe617 	ldw	r3,-104(fp)
81100ba8:	00b33374 	movhi	r2,52429
81100bac:	10b33344 	addi	r2,r2,-13107
81100bb0:	1888383a 	mulxuu	r4,r3,r2
81100bb4:	1885383a 	mul	r2,r3,r2
81100bb8:	1021883a 	mov	r16,r2
81100bbc:	2023883a 	mov	r17,r4
81100bc0:	8804d0fa 	srli	r2,r17,3
81100bc4:	e0ffe717 	ldw	r3,-100(fp)
81100bc8:	18c00044 	addi	r3,r3,1
81100bcc:	10c7383a 	mul	r3,r2,r3
81100bd0:	e0bfe717 	ldw	r2,-100(fp)
81100bd4:	1085883a 	add	r2,r2,r2
81100bd8:	1085883a 	add	r2,r2,r2
81100bdc:	e13fe504 	addi	r4,fp,-108
81100be0:	2085883a 	add	r2,r4,r2
81100be4:	10800e04 	addi	r2,r2,56
81100be8:	10c00015 	stw	r3,0(r2)
  int nProgressIndex = 0;
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
  
  for(i = 0; i < 10; i++){
81100bec:	e0bfe717 	ldw	r2,-100(fp)
81100bf0:	10800044 	addi	r2,r2,1
81100bf4:	e0bfe715 	stw	r2,-100(fp)
81100bf8:	e0bfe717 	ldw	r2,-100(fp)
81100bfc:	10800290 	cmplti	r2,r2,10
81100c00:	103fe81e 	bne	r2,zero,81100ba4 <__reset+0xfb0e0ba4>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81100c04:	d0a06417 	ldw	r2,-32368(gp)
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
81100c08:	e0bff015 	stw	r2,-64(fp)
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81100c0c:	00804004 	movi	r2,256
81100c10:	e0bfea15 	stw	r2,-88(fp)
  for(i = 0; i < nItemNum; i++){
81100c14:	e03fe715 	stw	zero,-100(fp)
81100c18:	00001e06 	br	81100c94 <DDR2_MEMORY_WRITE_TEST+0x1bc>
    if (i == 0) {
81100c1c:	e0bfe717 	ldw	r2,-100(fp)
81100c20:	1000091e 	bne	r2,zero,81100c48 <DDR2_MEMORY_WRITE_TEST+0x170>
      szData[i] = InitValue;
81100c24:	00a044f4 	movhi	r2,33043
81100c28:	1097f204 	addi	r2,r2,24520
81100c2c:	e0ffe717 	ldw	r3,-100(fp)
81100c30:	18c7883a 	add	r3,r3,r3
81100c34:	18c7883a 	add	r3,r3,r3
81100c38:	10c5883a 	add	r2,r2,r3
81100c3c:	e0fff017 	ldw	r3,-64(fp)
81100c40:	10c00015 	stw	r3,0(r2)
81100c44:	00001006 	br	81100c88 <DDR2_MEMORY_WRITE_TEST+0x1b0>
    } else {
      szData[i] = szData[i-1] * 13;
81100c48:	e0bfe717 	ldw	r2,-100(fp)
81100c4c:	10ffffc4 	addi	r3,r2,-1
81100c50:	00a044f4 	movhi	r2,33043
81100c54:	1097f204 	addi	r2,r2,24520
81100c58:	18c7883a 	add	r3,r3,r3
81100c5c:	18c7883a 	add	r3,r3,r3
81100c60:	10c5883a 	add	r2,r2,r3
81100c64:	10800017 	ldw	r2,0(r2)
81100c68:	11000364 	muli	r4,r2,13
81100c6c:	00a044f4 	movhi	r2,33043
81100c70:	1097f204 	addi	r2,r2,24520
81100c74:	e0ffe717 	ldw	r3,-100(fp)
81100c78:	18c7883a 	add	r3,r3,r3
81100c7c:	18c7883a 	add	r3,r3,r3
81100c80:	10c5883a 	add	r2,r2,r3
81100c84:	11000015 	stw	r4,0(r2)
  for(i = 0; i < 10; i++){
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
  nItemNum = sizeof(szData)/sizeof(szData[0]);
  for(i = 0; i < nItemNum; i++){
81100c88:	e0bfe717 	ldw	r2,-100(fp)
81100c8c:	10800044 	addi	r2,r2,1
81100c90:	e0bfe715 	stw	r2,-100(fp)
81100c94:	e0ffe717 	ldw	r3,-100(fp)
81100c98:	e0bfea17 	ldw	r2,-88(fp)
81100c9c:	18bfdf16 	blt	r3,r2,81100c1c <__reset+0xfb0e0c1c>
      szData[i] = InitValue;
    } else {
      szData[i] = szData[i-1] * 13;
    }
  }
  szData[nItemNum-1] = 0xAAAAAAAA;
81100ca0:	e0bfea17 	ldw	r2,-88(fp)
81100ca4:	10ffffc4 	addi	r3,r2,-1
81100ca8:	00a044f4 	movhi	r2,33043
81100cac:	1097f204 	addi	r2,r2,24520
81100cb0:	18c7883a 	add	r3,r3,r3
81100cb4:	18c7883a 	add	r3,r3,r3
81100cb8:	10c7883a 	add	r3,r2,r3
81100cbc:	00aaaaf4 	movhi	r2,43691
81100cc0:	10aaaa84 	addi	r2,r2,-21846
81100cc4:	18800015 	stw	r2,0(r3)
  szData[nItemNum-2] = 0x55555555;
81100cc8:	e0bfea17 	ldw	r2,-88(fp)
81100ccc:	10ffff84 	addi	r3,r2,-2
81100cd0:	00a044f4 	movhi	r2,33043
81100cd4:	1097f204 	addi	r2,r2,24520
81100cd8:	18c7883a 	add	r3,r3,r3
81100cdc:	18c7883a 	add	r3,r3,r3
81100ce0:	10c7883a 	add	r3,r2,r3
81100ce4:	00955574 	movhi	r2,21845
81100ce8:	10955544 	addi	r2,r2,21845
81100cec:	18800015 	stw	r2,0(r3)
  szData[nItemNum-3] = 0x00000000;
81100cf0:	e0bfea17 	ldw	r2,-88(fp)
81100cf4:	10ffff44 	addi	r3,r2,-3
81100cf8:	00a044f4 	movhi	r2,33043
81100cfc:	1097f204 	addi	r2,r2,24520
81100d00:	18c7883a 	add	r3,r3,r3
81100d04:	18c7883a 	add	r3,r3,r3
81100d08:	10c5883a 	add	r2,r2,r3
81100d0c:	10000015 	stw	zero,0(r2)
  szData[nItemNum-4] = 0xFFFFFFFF;
81100d10:	e0bfea17 	ldw	r2,-88(fp)
81100d14:	10ffff04 	addi	r3,r2,-4
81100d18:	00a044f4 	movhi	r2,33043
81100d1c:	1097f204 	addi	r2,r2,24520
81100d20:	18c7883a 	add	r3,r3,r3
81100d24:	18c7883a 	add	r3,r3,r3
81100d28:	10c5883a 	add	r2,r2,r3
81100d2c:	00ffffc4 	movi	r3,-1
81100d30:	10c00015 	stw	r3,0(r2)

  printf("Writing data...\n");
81100d34:	012044f4 	movhi	r4,33043
81100d38:	2109db04 	addi	r4,r4,10092
81100d3c:	110b6880 	call	8110b688 <puts>
81100d40:	d0a06417 	ldw	r2,-32368(gp)
  TimeStart = alt_nticks();
81100d44:	e0bff115 	stw	r2,-60(fp)
  pDes = (my_data *)Ddr2Base;
81100d48:	e0bfe517 	ldw	r2,-108(fp)
81100d4c:	e0bfe915 	stw	r2,-92(fp)
  nAccessLen = sizeof(szData);
81100d50:	00810004 	movi	r2,1024
81100d54:	e0bfe815 	stw	r2,-96(fp)
  nItemNum = nAccessLen / my_data_size;
81100d58:	e0ffe817 	ldw	r3,-96(fp)
81100d5c:	e0bfee17 	ldw	r2,-72(fp)
81100d60:	1885283a 	div	r2,r3,r2
81100d64:	e0bfea15 	stw	r2,-88(fp)
  nPos = 0;
81100d68:	e03feb15 	stw	zero,-84(fp)
  while(nPos < ByteLen){
81100d6c:	00003306 	br	81100e3c <DDR2_MEMORY_WRITE_TEST+0x364>
    nRemainedLen = ByteLen - nPos;
81100d70:	e0bfeb17 	ldw	r2,-84(fp)
81100d74:	e0ffe617 	ldw	r3,-104(fp)
81100d78:	1885c83a 	sub	r2,r3,r2
81100d7c:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
81100d80:	e0bfe817 	ldw	r2,-96(fp)
81100d84:	e0fff217 	ldw	r3,-56(fp)
81100d88:	1880060e 	bge	r3,r2,81100da4 <DDR2_MEMORY_WRITE_TEST+0x2cc>
      nAccessLen = nRemainedLen;
81100d8c:	e0bff217 	ldw	r2,-56(fp)
81100d90:	e0bfe815 	stw	r2,-96(fp)
      nItemNum = nAccessLen / my_data_size;
81100d94:	e0ffe817 	ldw	r3,-96(fp)
81100d98:	e0bfee17 	ldw	r2,-72(fp)
81100d9c:	1885283a 	div	r2,r3,r2
81100da0:	e0bfea15 	stw	r2,-88(fp)
    }
    memcpy(pDes, szData, nAccessLen);
81100da4:	e0bfe817 	ldw	r2,-96(fp)
81100da8:	100d883a 	mov	r6,r2
81100dac:	016044f4 	movhi	r5,33043
81100db0:	2957f204 	addi	r5,r5,24520
81100db4:	e13fe917 	ldw	r4,-92(fp)
81100db8:	110b26c0 	call	8110b26c <memcpy>
    pDes += nItemNum;
81100dbc:	e0bfea17 	ldw	r2,-88(fp)
81100dc0:	1085883a 	add	r2,r2,r2
81100dc4:	1085883a 	add	r2,r2,r2
81100dc8:	1007883a 	mov	r3,r2
81100dcc:	e0bfe917 	ldw	r2,-92(fp)
81100dd0:	10c5883a 	add	r2,r2,r3
81100dd4:	e0bfe915 	stw	r2,-92(fp)
    nPos += nAccessLen;
81100dd8:	e0ffeb17 	ldw	r3,-84(fp)
81100ddc:	e0bfe817 	ldw	r2,-96(fp)
81100de0:	1885883a 	add	r2,r3,r2
81100de4:	e0bfeb15 	stw	r2,-84(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
81100de8:	e0bfec17 	ldw	r2,-80(fp)
81100dec:	10800288 	cmpgei	r2,r2,10
81100df0:	1000121e 	bne	r2,zero,81100e3c <DDR2_MEMORY_WRITE_TEST+0x364>
81100df4:	e0bfec17 	ldw	r2,-80(fp)
81100df8:	1085883a 	add	r2,r2,r2
81100dfc:	1085883a 	add	r2,r2,r2
81100e00:	e0ffe504 	addi	r3,fp,-108
81100e04:	1885883a 	add	r2,r3,r2
81100e08:	10800e04 	addi	r2,r2,56
81100e0c:	10800017 	ldw	r2,0(r2)
81100e10:	e0ffeb17 	ldw	r3,-84(fp)
81100e14:	18800936 	bltu	r3,r2,81100e3c <DDR2_MEMORY_WRITE_TEST+0x364>
      nProgressIndex++;
81100e18:	e0bfec17 	ldw	r2,-80(fp)
81100e1c:	10800044 	addi	r2,r2,1
81100e20:	e0bfec15 	stw	r2,-80(fp)
      printf("%02d%% ", nProgressIndex*10);
81100e24:	e0bfec17 	ldw	r2,-80(fp)
81100e28:	108002a4 	muli	r2,r2,10
81100e2c:	100b883a 	mov	r5,r2
81100e30:	012044f4 	movhi	r4,33043
81100e34:	2109df04 	addi	r4,r4,10108
81100e38:	110b56c0 	call	8110b56c <printf>
  TimeStart = alt_nticks();
  pDes = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(nPos < ByteLen){
81100e3c:	e0ffeb17 	ldw	r3,-84(fp)
81100e40:	e0bfe617 	ldw	r2,-104(fp)
81100e44:	18bfca36 	bltu	r3,r2,81100d70 <__reset+0xfb0e0d70>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  alt_dcache_flush_all();
81100e48:	111f8280 	call	8111f828 <alt_dcache_flush_all>
  printf("\n");
81100e4c:	01000284 	movi	r4,10
81100e50:	110b5b00 	call	8110b5b0 <putchar>
81100e54:	d0e06417 	ldw	r3,-32368(gp)

  TimeElapsed = alt_nticks() - TimeStart;
81100e58:	e0bff117 	ldw	r2,-60(fp)
81100e5c:	1885c83a 	sub	r2,r3,r2
81100e60:	e0bfef15 	stw	r2,-68(fp)
  if (bSuccess){
81100e64:	e0bfed17 	ldw	r2,-76(fp)
81100e68:	10001726 	beq	r2,zero,81100ec8 <DDR2_MEMORY_WRITE_TEST+0x3f0>
    printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81100e6c:	e13fef17 	ldw	r4,-68(fp)
81100e70:	11095100 	call	81109510 <__floatsisf>
81100e74:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81100e78:	d0a06317 	ldw	r2,-32372(gp)
81100e7c:	1009883a 	mov	r4,r2
81100e80:	11096340 	call	81109634 <__floatunsisf>
81100e84:	1007883a 	mov	r3,r2
81100e88:	180b883a 	mov	r5,r3
81100e8c:	8009883a 	mov	r4,r16
81100e90:	1108cd40 	call	81108cd4 <__divsf3>
81100e94:	1007883a 	mov	r3,r2
81100e98:	1805883a 	mov	r2,r3
81100e9c:	1009883a 	mov	r4,r2
81100ea0:	1109e3c0 	call	81109e3c <__extendsfdf2>
81100ea4:	1009883a 	mov	r4,r2
81100ea8:	180b883a 	mov	r5,r3
81100eac:	200d883a 	mov	r6,r4
81100eb0:	280f883a 	mov	r7,r5
81100eb4:	e17fe617 	ldw	r5,-104(fp)
81100eb8:	012044f4 	movhi	r4,33043
81100ebc:	2109e104 	addi	r4,r4,10116
81100ec0:	110b56c0 	call	8110b56c <printf>
81100ec4:	00000306 	br	81100ed4 <DDR2_MEMORY_WRITE_TEST+0x3fc>
  } else {
    printf("DDR2 write test fail\n");
81100ec8:	012044f4 	movhi	r4,33043
81100ecc:	2109ed04 	addi	r4,r4,10164
81100ed0:	110b6880 	call	8110b688 <puts>
  }
  printf("\n");
81100ed4:	01000284 	movi	r4,10
81100ed8:	110b5b00 	call	8110b5b0 <putchar>

  return bSuccess;
81100edc:	e0bfed17 	ldw	r2,-76(fp)
}
81100ee0:	e6fffe04 	addi	sp,fp,-8
81100ee4:	dfc00317 	ldw	ra,12(sp)
81100ee8:	df000217 	ldw	fp,8(sp)
81100eec:	dc400117 	ldw	r17,4(sp)
81100ef0:	dc000017 	ldw	r16,0(sp)
81100ef4:	dec00404 	addi	sp,sp,16
81100ef8:	f800283a 	ret

81100efc <DDR2_MEMORY_READ_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_READ_TEST(alt_u8 MemoryId){
81100efc:	deffe304 	addi	sp,sp,-116
81100f00:	dfc01c15 	stw	ra,112(sp)
81100f04:	df001b15 	stw	fp,108(sp)
81100f08:	dc401a15 	stw	r17,104(sp)
81100f0c:	dc001915 	stw	r16,100(sp)
81100f10:	df001b04 	addi	fp,sp,108
81100f14:	2005883a 	mov	r2,r4
81100f18:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Read Test =====\n");
81100f1c:	012044f4 	movhi	r4,33043
81100f20:	2109f304 	addi	r4,r4,10188
81100f24:	110b6880 	call	8110b688 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81100f28:	00800044 	movi	r2,1
81100f2c:	e0bfe515 	stw	r2,-108(fp)
  switch (MemoryId) {
81100f30:	e0bffd03 	ldbu	r2,-12(fp)
81100f34:	10c00060 	cmpeqi	r3,r2,1
81100f38:	1800031e 	bne	r3,zero,81100f48 <DDR2_MEMORY_READ_TEST+0x4c>
81100f3c:	108000a0 	cmpeqi	r2,r2,2
81100f40:	1000081e 	bne	r2,zero,81100f64 <DDR2_MEMORY_READ_TEST+0x68>
81100f44:	00000e06 	br	81100f80 <DDR2_MEMORY_READ_TEST+0x84>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81100f48:	e0bffd03 	ldbu	r2,-12(fp)
81100f4c:	1009883a 	mov	r4,r2
81100f50:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100f54:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
81100f58:	00a00034 	movhi	r2,32768
81100f5c:	e0bfe715 	stw	r2,-100(fp)
    break;
81100f60:	00000d06 	br	81100f98 <DDR2_MEMORY_READ_TEST+0x9c>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81100f64:	e0bffd03 	ldbu	r2,-12(fp)
81100f68:	1009883a 	mov	r4,r2
81100f6c:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100f70:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
81100f74:	00a00034 	movhi	r2,32768
81100f78:	e0bfe715 	stw	r2,-100(fp)
    break;
81100f7c:	00000606 	br	81100f98 <DDR2_MEMORY_READ_TEST+0x9c>
    default:
      bSuccess = FALSE;
81100f80:	e03fe515 	stw	zero,-108(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100f84:	012044f4 	movhi	r4,33043
81100f88:	2107db04 	addi	r4,r4,8044
81100f8c:	110b6880 	call	8110b688 <puts>
      return bSuccess;
81100f90:	e0bfe517 	ldw	r2,-108(fp)
81100f94:	0000b806 	br	81101278 <DDR2_MEMORY_READ_TEST+0x37c>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81100f98:	e0bfe717 	ldw	r2,-100(fp)
81100f9c:	1004d53a 	srli	r2,r2,20
81100fa0:	100b883a 	mov	r5,r2
81100fa4:	012044f4 	movhi	r4,33043
81100fa8:	2109d504 	addi	r4,r4,10068
81100fac:	110b56c0 	call	8110b56c <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes, *pSrc;
  int nItemNum, nPos;
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81100fb0:	00804004 	movi	r2,256
81100fb4:	e0bfec15 	stw	r2,-80(fp)
  const int my_data_size = sizeof(my_data);
81100fb8:	00800104 	movi	r2,4
81100fbc:	e0bfef15 	stw	r2,-68(fp)
  nAccessLen = nItemNum * my_data_size;
81100fc0:	e0ffec17 	ldw	r3,-80(fp)
81100fc4:	e0bfef17 	ldw	r2,-68(fp)
81100fc8:	1885383a 	mul	r2,r3,r2
81100fcc:	e0bfe915 	stw	r2,-92(fp)
  int nProgressIndex = 0;
81100fd0:	e03fee15 	stw	zero,-72(fp)
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81100fd4:	e03ff015 	stw	zero,-64(fp)

  for(i=0;i<10;i++){
81100fd8:	e03fe815 	stw	zero,-96(fp)
81100fdc:	00001506 	br	81101034 <DDR2_MEMORY_READ_TEST+0x138>
    szProgress[i] = ByteLen/10*(i+1);
81100fe0:	e0ffe717 	ldw	r3,-100(fp)
81100fe4:	00b33374 	movhi	r2,52429
81100fe8:	10b33344 	addi	r2,r2,-13107
81100fec:	1888383a 	mulxuu	r4,r3,r2
81100ff0:	1885383a 	mul	r2,r3,r2
81100ff4:	1021883a 	mov	r16,r2
81100ff8:	2023883a 	mov	r17,r4
81100ffc:	8804d0fa 	srli	r2,r17,3
81101000:	e0ffe817 	ldw	r3,-96(fp)
81101004:	18c00044 	addi	r3,r3,1
81101008:	10c7383a 	mul	r3,r2,r3
8110100c:	e0bfe817 	ldw	r2,-96(fp)
81101010:	1085883a 	add	r2,r2,r2
81101014:	1085883a 	add	r2,r2,r2
81101018:	e13fe504 	addi	r4,fp,-108
8110101c:	2085883a 	add	r2,r4,r2
81101020:	10800e04 	addi	r2,r2,56
81101024:	10c00015 	stw	r3,0(r2)
  nAccessLen = nItemNum * my_data_size;
  int nProgressIndex = 0;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;

  for(i=0;i<10;i++){
81101028:	e0bfe817 	ldw	r2,-96(fp)
8110102c:	10800044 	addi	r2,r2,1
81101030:	e0bfe815 	stw	r2,-96(fp)
81101034:	e0bfe817 	ldw	r2,-96(fp)
81101038:	10800290 	cmplti	r2,r2,10
8110103c:	103fe81e 	bne	r2,zero,81100fe0 <__reset+0xfb0e0fe0>
    szProgress[i] = ByteLen/10*(i+1);
  }

  nProgressIndex = 0;
81101040:	e03fee15 	stw	zero,-72(fp)
  printf("Reading/Verifying Data...\n");
81101044:	012044f4 	movhi	r4,33043
81101048:	2109fd04 	addi	r4,r4,10228
8110104c:	110b6880 	call	8110b688 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101050:	d0a06417 	ldw	r2,-32368(gp)
  TimeStart = alt_nticks();
81101054:	e0bff115 	stw	r2,-60(fp)

  pSrc = (my_data *)Ddr2Base;
81101058:	e0bfe617 	ldw	r2,-104(fp)
8110105c:	e0bfeb15 	stw	r2,-84(fp)
  nAccessLen = sizeof(szData);
81101060:	00810004 	movi	r2,1024
81101064:	e0bfe915 	stw	r2,-92(fp)
  nItemNum = nAccessLen / my_data_size;
81101068:	e0ffe917 	ldw	r3,-92(fp)
8110106c:	e0bfef17 	ldw	r2,-68(fp)
81101070:	1885283a 	div	r2,r3,r2
81101074:	e0bfec15 	stw	r2,-80(fp)
  nPos = 0;
81101078:	e03fed15 	stw	zero,-76(fp)
  while(bSuccess && nPos < ByteLen){
8110107c:	00005406 	br	811011d0 <DDR2_MEMORY_READ_TEST+0x2d4>
    nRemainedLen = ByteLen - nPos;
81101080:	e0bfed17 	ldw	r2,-76(fp)
81101084:	e0ffe717 	ldw	r3,-100(fp)
81101088:	1885c83a 	sub	r2,r3,r2
8110108c:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
81101090:	e0bfe917 	ldw	r2,-92(fp)
81101094:	e0fff217 	ldw	r3,-56(fp)
81101098:	1880060e 	bge	r3,r2,811010b4 <DDR2_MEMORY_READ_TEST+0x1b8>
      nAccessLen = nRemainedLen;
8110109c:	e0bff217 	ldw	r2,-56(fp)
811010a0:	e0bfe915 	stw	r2,-92(fp)
      nItemNum = nAccessLen / my_data_size;
811010a4:	e0ffe917 	ldw	r3,-92(fp)
811010a8:	e0bfef17 	ldw	r2,-68(fp)
811010ac:	1885283a 	div	r2,r3,r2
811010b0:	e0bfec15 	stw	r2,-80(fp)
    }
    pDes = szData;
811010b4:	00a044f4 	movhi	r2,33043
811010b8:	1097f204 	addi	r2,r2,24520
811010bc:	e0bfea15 	stw	r2,-88(fp)
    for(i=0 ; i < nItemNum && bSuccess; i++){
811010c0:	e03fe815 	stw	zero,-96(fp)
811010c4:	00002406 	br	81101158 <DDR2_MEMORY_READ_TEST+0x25c>
      if (*pSrc++ != *pDes++){
811010c8:	e0bfeb17 	ldw	r2,-84(fp)
811010cc:	10c00104 	addi	r3,r2,4
811010d0:	e0ffeb15 	stw	r3,-84(fp)
811010d4:	10c00017 	ldw	r3,0(r2)
811010d8:	e0bfea17 	ldw	r2,-88(fp)
811010dc:	11000104 	addi	r4,r2,4
811010e0:	e13fea15 	stw	r4,-88(fp)
811010e4:	10800017 	ldw	r2,0(r2)
811010e8:	18801826 	beq	r3,r2,8110114c <DDR2_MEMORY_READ_TEST+0x250>
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
811010ec:	e0bfeb17 	ldw	r2,-84(fp)
811010f0:	10bfff04 	addi	r2,r2,-4
811010f4:	10800017 	ldw	r2,0(r2)
811010f8:	1009883a 	mov	r4,r2
811010fc:	00a044f4 	movhi	r2,33043
81101100:	1097f204 	addi	r2,r2,24520
81101104:	e0ffe817 	ldw	r3,-96(fp)
81101108:	18c7883a 	add	r3,r3,r3
8110110c:	18c7883a 	add	r3,r3,r3
81101110:	10c5883a 	add	r2,r2,r3
81101114:	10800017 	ldw	r2,0(r2)
81101118:	100b883a 	mov	r5,r2
8110111c:	e0ffed17 	ldw	r3,-76(fp)
81101120:	e0bfef17 	ldw	r2,-68(fp)
81101124:	1887283a 	div	r3,r3,r2
81101128:	e0bfe817 	ldw	r2,-96(fp)
8110112c:	1885883a 	add	r2,r3,r2
81101130:	100f883a 	mov	r7,r2
81101134:	280d883a 	mov	r6,r5
81101138:	200b883a 	mov	r5,r4
8110113c:	012044f4 	movhi	r4,33043
81101140:	210a0404 	addi	r4,r4,10256
81101144:	110b56c0 	call	8110b56c <printf>
        bSuccess = FALSE;
81101148:	e03fe515 	stw	zero,-108(fp)
    if (nAccessLen > nRemainedLen){
      nAccessLen = nRemainedLen;
      nItemNum = nAccessLen / my_data_size;
    }
    pDes = szData;
    for(i=0 ; i < nItemNum && bSuccess; i++){
8110114c:	e0bfe817 	ldw	r2,-96(fp)
81101150:	10800044 	addi	r2,r2,1
81101154:	e0bfe815 	stw	r2,-96(fp)
81101158:	e0ffe817 	ldw	r3,-96(fp)
8110115c:	e0bfec17 	ldw	r2,-80(fp)
81101160:	1880020e 	bge	r3,r2,8110116c <DDR2_MEMORY_READ_TEST+0x270>
81101164:	e0bfe517 	ldw	r2,-108(fp)
81101168:	103fd71e 	bne	r2,zero,811010c8 <__reset+0xfb0e10c8>
      if (*pSrc++ != *pDes++){
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
        bSuccess = FALSE;
      }
    }
    nPos += nAccessLen;
8110116c:	e0ffed17 	ldw	r3,-76(fp)
81101170:	e0bfe917 	ldw	r2,-92(fp)
81101174:	1885883a 	add	r2,r3,r2
81101178:	e0bfed15 	stw	r2,-76(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
8110117c:	e0bfee17 	ldw	r2,-72(fp)
81101180:	10800288 	cmpgei	r2,r2,10
81101184:	1000121e 	bne	r2,zero,811011d0 <DDR2_MEMORY_READ_TEST+0x2d4>
81101188:	e0bfee17 	ldw	r2,-72(fp)
8110118c:	1085883a 	add	r2,r2,r2
81101190:	1085883a 	add	r2,r2,r2
81101194:	e0ffe504 	addi	r3,fp,-108
81101198:	1885883a 	add	r2,r3,r2
8110119c:	10800e04 	addi	r2,r2,56
811011a0:	10800017 	ldw	r2,0(r2)
811011a4:	e0ffed17 	ldw	r3,-76(fp)
811011a8:	18800936 	bltu	r3,r2,811011d0 <DDR2_MEMORY_READ_TEST+0x2d4>
      nProgressIndex++;
811011ac:	e0bfee17 	ldw	r2,-72(fp)
811011b0:	10800044 	addi	r2,r2,1
811011b4:	e0bfee15 	stw	r2,-72(fp)
      printf("%02d%% ", nProgressIndex*10);
811011b8:	e0bfee17 	ldw	r2,-72(fp)
811011bc:	108002a4 	muli	r2,r2,10
811011c0:	100b883a 	mov	r5,r2
811011c4:	012044f4 	movhi	r4,33043
811011c8:	2109df04 	addi	r4,r4,10108
811011cc:	110b56c0 	call	8110b56c <printf>

  pSrc = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(bSuccess && nPos < ByteLen){
811011d0:	e0bfe517 	ldw	r2,-108(fp)
811011d4:	10000326 	beq	r2,zero,811011e4 <DDR2_MEMORY_READ_TEST+0x2e8>
811011d8:	e0ffed17 	ldw	r3,-76(fp)
811011dc:	e0bfe717 	ldw	r2,-100(fp)
811011e0:	18bfa736 	bltu	r3,r2,81101080 <__reset+0xfb0e1080>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  printf("\n");
811011e4:	01000284 	movi	r4,10
811011e8:	110b5b00 	call	8110b5b0 <putchar>
811011ec:	d0e06417 	ldw	r3,-32368(gp)

  TimeElapsed = alt_nticks() - TimeStart;
811011f0:	e0bff117 	ldw	r2,-60(fp)
811011f4:	1885c83a 	sub	r2,r3,r2
811011f8:	e0bff015 	stw	r2,-64(fp)
  if (bSuccess){
811011fc:	e0bfe517 	ldw	r2,-108(fp)
81101200:	10001726 	beq	r2,zero,81101260 <DDR2_MEMORY_READ_TEST+0x364>
    printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81101204:	e13ff017 	ldw	r4,-64(fp)
81101208:	11095100 	call	81109510 <__floatsisf>
8110120c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101210:	d0a06317 	ldw	r2,-32372(gp)
81101214:	1009883a 	mov	r4,r2
81101218:	11096340 	call	81109634 <__floatunsisf>
8110121c:	1007883a 	mov	r3,r2
81101220:	180b883a 	mov	r5,r3
81101224:	8009883a 	mov	r4,r16
81101228:	1108cd40 	call	81108cd4 <__divsf3>
8110122c:	1007883a 	mov	r3,r2
81101230:	1805883a 	mov	r2,r3
81101234:	1009883a 	mov	r4,r2
81101238:	1109e3c0 	call	81109e3c <__extendsfdf2>
8110123c:	1009883a 	mov	r4,r2
81101240:	180b883a 	mov	r5,r3
81101244:	200d883a 	mov	r6,r4
81101248:	280f883a 	mov	r7,r5
8110124c:	e17fe717 	ldw	r5,-100(fp)
81101250:	012044f4 	movhi	r4,33043
81101254:	210a1204 	addi	r4,r4,10312
81101258:	110b56c0 	call	8110b56c <printf>
8110125c:	00000306 	br	8110126c <DDR2_MEMORY_READ_TEST+0x370>
  } else {
    printf("DDR2 read test fail\n");
81101260:	012044f4 	movhi	r4,33043
81101264:	210a1e04 	addi	r4,r4,10360
81101268:	110b6880 	call	8110b688 <puts>
  }
  printf("\n");
8110126c:	01000284 	movi	r4,10
81101270:	110b5b00 	call	8110b5b0 <putchar>

  return bSuccess;
81101274:	e0bfe517 	ldw	r2,-108(fp)
}
81101278:	e6fffe04 	addi	sp,fp,-8
8110127c:	dfc00317 	ldw	ra,12(sp)
81101280:	df000217 	ldw	fp,8(sp)
81101284:	dc400117 	ldw	r17,4(sp)
81101288:	dc000017 	ldw	r16,0(sp)
8110128c:	dec00404 	addi	sp,sp,16
81101290:	f800283a 	ret

81101294 <DDR2_MEMORY_RANDOM_WRITE_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_WRITE_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
81101294:	deffed04 	addi	sp,sp,-76
81101298:	dfc01215 	stw	ra,72(sp)
8110129c:	df001115 	stw	fp,68(sp)
811012a0:	dcc01015 	stw	r19,64(sp)
811012a4:	dc800f15 	stw	r18,60(sp)
811012a8:	dc400e15 	stw	r17,56(sp)
811012ac:	dc000d15 	stw	r16,52(sp)
811012b0:	df001104 	addi	fp,sp,68
811012b4:	2005883a 	mov	r2,r4
811012b8:	e17ffa15 	stw	r5,-24(fp)
811012bc:	e1bffb15 	stw	r6,-20(fp)
811012c0:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Write Test =====\n");
811012c4:	012044f4 	movhi	r4,33043
811012c8:	210a2304 	addi	r4,r4,10380
811012cc:	110b6880 	call	8110b688 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
811012d0:	00800044 	movi	r2,1
811012d4:	e0bff415 	stw	r2,-48(fp)
  switch (MemoryId) {
811012d8:	e0bff903 	ldbu	r2,-28(fp)
811012dc:	10c00060 	cmpeqi	r3,r2,1
811012e0:	1800031e 	bne	r3,zero,811012f0 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x5c>
811012e4:	108000a0 	cmpeqi	r2,r2,2
811012e8:	1000081e 	bne	r2,zero,8110130c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x78>
811012ec:	00000e06 	br	81101328 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x94>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
811012f0:	e0bff903 	ldbu	r2,-28(fp)
811012f4:	1009883a 	mov	r4,r2
811012f8:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
811012fc:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
81101300:	00a00034 	movhi	r2,32768
81101304:	e0bff015 	stw	r2,-64(fp)
    break;
81101308:	00000d06 	br	81101340 <DDR2_MEMORY_RANDOM_WRITE_TEST+0xac>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
8110130c:	e0bff903 	ldbu	r2,-28(fp)
81101310:	1009883a 	mov	r4,r2
81101314:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81101318:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
8110131c:	00a00034 	movhi	r2,32768
81101320:	e0bff015 	stw	r2,-64(fp)
    break;
81101324:	00000606 	br	81101340 <DDR2_MEMORY_RANDOM_WRITE_TEST+0xac>
    default:
      bSuccess = FALSE;
81101328:	e03ff415 	stw	zero,-48(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
8110132c:	012044f4 	movhi	r4,33043
81101330:	2107db04 	addi	r4,r4,8044
81101334:	110b6880 	call	8110b688 <puts>
      return bSuccess;
81101338:	e0bff417 	ldw	r2,-48(fp)
8110133c:	00008406 	br	81101550 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2bc>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81101340:	e0bff017 	ldw	r2,-64(fp)
81101344:	1004d53a 	srli	r2,r2,20
81101348:	100b883a 	mov	r5,r2
8110134c:	012044f4 	movhi	r4,33043
81101350:	2109d504 	addi	r4,r4,10068
81101354:	110b56c0 	call	8110b56c <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101358:	d0a06417 	ldw	r2,-32368(gp)
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  InitialState = alt_nticks();
8110135c:	d0a03d15 	stw	r2,-32524(gp)
  CurrentState = InitialState;
81101360:	d0a03d17 	ldw	r2,-32524(gp)
81101364:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
81101368:	e0ffef17 	ldw	r3,-68(fp)
8110136c:	e0bff017 	ldw	r2,-64(fp)
81101370:	1885883a 	add	r2,r3,r2
81101374:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
81101378:	e0fff017 	ldw	r3,-64(fp)
8110137c:	00b33374 	movhi	r2,52429
81101380:	10b33344 	addi	r2,r2,-13107
81101384:	1888383a 	mulxuu	r4,r3,r2
81101388:	1885383a 	mul	r2,r3,r2
8110138c:	1025883a 	mov	r18,r2
81101390:	2027883a 	mov	r19,r4
81101394:	9806d13a 	srli	r3,r19,4
81101398:	e0bfef17 	ldw	r2,-68(fp)
8110139c:	1885883a 	add	r2,r3,r2
811013a0:	e0bff215 	stw	r2,-56(fp)
  Percentage = 5;
811013a4:	00800144 	movi	r2,5
811013a8:	e0bff305 	stb	r2,-52(fp)
  printf("Writing to memory...\n");
811013ac:	012044f4 	movhi	r4,33043
811013b0:	210a2f04 	addi	r4,r4,10428
811013b4:	110b6880 	call	8110b688 <puts>
  if (bVerbose == DDR2_VERBOSE) {
811013b8:	e0bffa17 	ldw	r2,-24(fp)
811013bc:	10800058 	cmpnei	r2,r2,1
811013c0:	1000031e 	bne	r2,zero,811013d0 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x13c>
    printf("00%%..");
811013c4:	012044f4 	movhi	r4,33043
811013c8:	210a3504 	addi	r4,r4,10452
811013cc:	110b56c0 	call	8110b56c <printf>
  }
  int TimeStart, TimeElapsed = 0;
811013d0:	e03ff615 	stw	zero,-40(fp)
811013d4:	d0a06417 	ldw	r2,-32368(gp)

  TimeStart = alt_nticks();
811013d8:	e0bff715 	stw	r2,-36(fp)
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
811013dc:	e0bfef17 	ldw	r2,-68(fp)
811013e0:	e0bff115 	stw	r2,-60(fp)
811013e4:	00002506 	br	8110147c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1e8>
    *pDestination = xorshift32(&CurrentState);
811013e8:	e0bff804 	addi	r2,fp,-32
811013ec:	1009883a 	mov	r4,r2
811013f0:	11018440 	call	81101844 <xorshift32>
811013f4:	1007883a 	mov	r3,r2
811013f8:	e0bff117 	ldw	r2,-60(fp)
811013fc:	10c00015 	stw	r3,0(r2)
    if ((bVerbose == DDR2_VERBOSE) & ((alt_u32)pDestination > NextMilestone)){
81101400:	e0bffa17 	ldw	r2,-24(fp)
81101404:	10800060 	cmpeqi	r2,r2,1
81101408:	1009883a 	mov	r4,r2
8110140c:	e0bff117 	ldw	r2,-60(fp)
81101410:	e0fff217 	ldw	r3,-56(fp)
81101414:	1885803a 	cmpltu	r2,r3,r2
81101418:	2084703a 	and	r2,r4,r2
8110141c:	10803fcc 	andi	r2,r2,255
81101420:	10001326 	beq	r2,zero,81101470 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1dc>
      printf("..%02d%%..",Percentage);
81101424:	e0bff303 	ldbu	r2,-52(fp)
81101428:	100b883a 	mov	r5,r2
8110142c:	012044f4 	movhi	r4,33043
81101430:	210a3704 	addi	r4,r4,10460
81101434:	110b56c0 	call	8110b56c <printf>
	  NextMilestone += ByteLen/20;
81101438:	e0fff017 	ldw	r3,-64(fp)
8110143c:	00b33374 	movhi	r2,52429
81101440:	10b33344 	addi	r2,r2,-13107
81101444:	1888383a 	mulxuu	r4,r3,r2
81101448:	1885383a 	mul	r2,r3,r2
8110144c:	1021883a 	mov	r16,r2
81101450:	2023883a 	mov	r17,r4
81101454:	8804d13a 	srli	r2,r17,4
81101458:	e0fff217 	ldw	r3,-56(fp)
8110145c:	1885883a 	add	r2,r3,r2
81101460:	e0bff215 	stw	r2,-56(fp)
	  Percentage += 5;
81101464:	e0bff303 	ldbu	r2,-52(fp)
81101468:	10800144 	addi	r2,r2,5
8110146c:	e0bff305 	stb	r2,-52(fp)
    printf("00%%..");
  }
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
81101470:	e0bff117 	ldw	r2,-60(fp)
81101474:	10800104 	addi	r2,r2,4
81101478:	e0bff115 	stw	r2,-60(fp)
8110147c:	e0fff117 	ldw	r3,-60(fp)
81101480:	e0bff517 	ldw	r2,-44(fp)
81101484:	18bfd836 	bltu	r3,r2,811013e8 <__reset+0xfb0e13e8>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  alt_dcache_flush_all();
81101488:	111f8280 	call	8111f828 <alt_dcache_flush_all>
  if (bVerbose == DDR2_VERBOSE) {
8110148c:	e0bffa17 	ldw	r2,-24(fp)
81101490:	10800058 	cmpnei	r2,r2,1
81101494:	1000031e 	bne	r2,zero,811014a4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x210>
    printf("..100%%\n");
81101498:	012044f4 	movhi	r4,33043
8110149c:	210a3a04 	addi	r4,r4,10472
811014a0:	110b56c0 	call	8110b56c <printf>
  }

  if (bSuccess){
811014a4:	e0bff417 	ldw	r2,-48(fp)
811014a8:	10002326 	beq	r2,zero,81101538 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2a4>
    if (bTime == TRUE){
811014ac:	e0bffb17 	ldw	r2,-20(fp)
811014b0:	10800058 	cmpnei	r2,r2,1
811014b4:	10001b1e 	bne	r2,zero,81101524 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x290>
811014b8:	d0e06417 	ldw	r3,-32368(gp)
      TimeElapsed = alt_nticks() - TimeStart;
811014bc:	e0bff717 	ldw	r2,-36(fp)
811014c0:	1885c83a 	sub	r2,r3,r2
811014c4:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
811014c8:	e13ff617 	ldw	r4,-40(fp)
811014cc:	11095100 	call	81109510 <__floatsisf>
811014d0:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811014d4:	d0a06317 	ldw	r2,-32372(gp)
811014d8:	1009883a 	mov	r4,r2
811014dc:	11096340 	call	81109634 <__floatunsisf>
811014e0:	1007883a 	mov	r3,r2
811014e4:	180b883a 	mov	r5,r3
811014e8:	8009883a 	mov	r4,r16
811014ec:	1108cd40 	call	81108cd4 <__divsf3>
811014f0:	1007883a 	mov	r3,r2
811014f4:	1805883a 	mov	r2,r3
811014f8:	1009883a 	mov	r4,r2
811014fc:	1109e3c0 	call	81109e3c <__extendsfdf2>
81101500:	1009883a 	mov	r4,r2
81101504:	180b883a 	mov	r5,r3
81101508:	200d883a 	mov	r6,r4
8110150c:	280f883a 	mov	r7,r5
81101510:	e17ff017 	ldw	r5,-64(fp)
81101514:	012044f4 	movhi	r4,33043
81101518:	2109e104 	addi	r4,r4,10116
8110151c:	110b56c0 	call	8110b56c <printf>
81101520:	00000806 	br	81101544 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b0>
    } else {
      printf("DDR2 write test pass, size=%d bytes\n", ByteLen);
81101524:	e17ff017 	ldw	r5,-64(fp)
81101528:	012044f4 	movhi	r4,33043
8110152c:	210a3d04 	addi	r4,r4,10484
81101530:	110b56c0 	call	8110b56c <printf>
81101534:	00000306 	br	81101544 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b0>
    }
  } else {
    printf("DDR2 write test fail\n");
81101538:	012044f4 	movhi	r4,33043
8110153c:	2109ed04 	addi	r4,r4,10164
81101540:	110b6880 	call	8110b688 <puts>
  }
  printf("\n");
81101544:	01000284 	movi	r4,10
81101548:	110b5b00 	call	8110b5b0 <putchar>

  return bSuccess;
8110154c:	e0bff417 	ldw	r2,-48(fp)
}
81101550:	e6fffc04 	addi	sp,fp,-16
81101554:	dfc00517 	ldw	ra,20(sp)
81101558:	df000417 	ldw	fp,16(sp)
8110155c:	dcc00317 	ldw	r19,12(sp)
81101560:	dc800217 	ldw	r18,8(sp)
81101564:	dc400117 	ldw	r17,4(sp)
81101568:	dc000017 	ldw	r16,0(sp)
8110156c:	dec00604 	addi	sp,sp,24
81101570:	f800283a 	ret

81101574 <DDR2_MEMORY_RANDOM_READ_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_READ_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
81101574:	deffed04 	addi	sp,sp,-76
81101578:	dfc01215 	stw	ra,72(sp)
8110157c:	df001115 	stw	fp,68(sp)
81101580:	dcc01015 	stw	r19,64(sp)
81101584:	dc800f15 	stw	r18,60(sp)
81101588:	dc400e15 	stw	r17,56(sp)
8110158c:	dc000d15 	stw	r16,52(sp)
81101590:	df001104 	addi	fp,sp,68
81101594:	2005883a 	mov	r2,r4
81101598:	e17ffa15 	stw	r5,-24(fp)
8110159c:	e1bffb15 	stw	r6,-20(fp)
811015a0:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Read Test =====\n");
811015a4:	012044f4 	movhi	r4,33043
811015a8:	210a4704 	addi	r4,r4,10524
811015ac:	110b6880 	call	8110b688 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
811015b0:	00800044 	movi	r2,1
811015b4:	e0bfef15 	stw	r2,-68(fp)
  switch (MemoryId) {
811015b8:	e0bff903 	ldbu	r2,-28(fp)
811015bc:	10c00060 	cmpeqi	r3,r2,1
811015c0:	1800031e 	bne	r3,zero,811015d0 <DDR2_MEMORY_RANDOM_READ_TEST+0x5c>
811015c4:	108000a0 	cmpeqi	r2,r2,2
811015c8:	1000081e 	bne	r2,zero,811015ec <DDR2_MEMORY_RANDOM_READ_TEST+0x78>
811015cc:	00000e06 	br	81101608 <DDR2_MEMORY_RANDOM_READ_TEST+0x94>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
811015d0:	e0bff903 	ldbu	r2,-28(fp)
811015d4:	1009883a 	mov	r4,r2
811015d8:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
811015dc:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
811015e0:	00a00034 	movhi	r2,32768
811015e4:	e0bff115 	stw	r2,-60(fp)
    break;
811015e8:	00000d06 	br	81101620 <DDR2_MEMORY_RANDOM_READ_TEST+0xac>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
811015ec:	e0bff903 	ldbu	r2,-28(fp)
811015f0:	1009883a 	mov	r4,r2
811015f4:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
811015f8:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
811015fc:	00a00034 	movhi	r2,32768
81101600:	e0bff115 	stw	r2,-60(fp)
    break;
81101604:	00000606 	br	81101620 <DDR2_MEMORY_RANDOM_READ_TEST+0xac>
    default:
      bSuccess = FALSE;
81101608:	e03fef15 	stw	zero,-68(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
8110160c:	012044f4 	movhi	r4,33043
81101610:	2107db04 	addi	r4,r4,8044
81101614:	110b6880 	call	8110b688 <puts>
      return bSuccess;
81101618:	e0bfef17 	ldw	r2,-68(fp)
8110161c:	00008006 	br	81101820 <DDR2_MEMORY_RANDOM_READ_TEST+0x2ac>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81101620:	e0bff117 	ldw	r2,-60(fp)
81101624:	1004d53a 	srli	r2,r2,20
81101628:	100b883a 	mov	r5,r2
8110162c:	012044f4 	movhi	r4,33043
81101630:	2109d504 	addi	r4,r4,10068
81101634:	110b56c0 	call	8110b56c <printf>
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  CurrentState = InitialState;
81101638:	d0a03d17 	ldw	r2,-32524(gp)
8110163c:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
81101640:	e0fff017 	ldw	r3,-64(fp)
81101644:	e0bff117 	ldw	r2,-60(fp)
81101648:	1885883a 	add	r2,r3,r2
8110164c:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
81101650:	e0fff117 	ldw	r3,-60(fp)
81101654:	00b33374 	movhi	r2,52429
81101658:	10b33344 	addi	r2,r2,-13107
8110165c:	1888383a 	mulxuu	r4,r3,r2
81101660:	1885383a 	mul	r2,r3,r2
81101664:	1025883a 	mov	r18,r2
81101668:	2027883a 	mov	r19,r4
8110166c:	9806d13a 	srli	r3,r19,4
81101670:	e0bff017 	ldw	r2,-64(fp)
81101674:	1885883a 	add	r2,r3,r2
81101678:	e0bff315 	stw	r2,-52(fp)
  Percentage = 5;
8110167c:	00800144 	movi	r2,5
81101680:	e0bff405 	stb	r2,-48(fp)
  printf("Reading from memory...\n");
81101684:	012044f4 	movhi	r4,33043
81101688:	210a5304 	addi	r4,r4,10572
8110168c:	110b6880 	call	8110b688 <puts>
  if (bVerbose == DDR2_VERBOSE) {
81101690:	e0bffa17 	ldw	r2,-24(fp)
81101694:	10800058 	cmpnei	r2,r2,1
81101698:	1000031e 	bne	r2,zero,811016a8 <DDR2_MEMORY_RANDOM_READ_TEST+0x134>
    printf("00%%..");
8110169c:	012044f4 	movhi	r4,33043
811016a0:	210a3504 	addi	r4,r4,10452
811016a4:	110b56c0 	call	8110b56c <printf>
  }
  
  int TimeStart, TimeElapsed = 0;
811016a8:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811016ac:	d0a06417 	ldw	r2,-32368(gp)

  TimeStart = alt_nticks();
811016b0:	e0bff715 	stw	r2,-36(fp)
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
811016b4:	e0bff017 	ldw	r2,-64(fp)
811016b8:	e0bff215 	stw	r2,-56(fp)
811016bc:	00002406 	br	81101750 <DDR2_MEMORY_RANDOM_READ_TEST+0x1dc>
    if (xorshift32(&CurrentState) != *pSource){
811016c0:	e0bff804 	addi	r2,fp,-32
811016c4:	1009883a 	mov	r4,r2
811016c8:	11018440 	call	81101844 <xorshift32>
811016cc:	1007883a 	mov	r3,r2
811016d0:	e0bff217 	ldw	r2,-56(fp)
811016d4:	10800017 	ldw	r2,0(r2)
811016d8:	18800126 	beq	r3,r2,811016e0 <DDR2_MEMORY_RANDOM_READ_TEST+0x16c>
      bSuccess = FALSE;
811016dc:	e03fef15 	stw	zero,-68(fp)
	  if (bVerbose == DDR2_VERBOSE) {
        //printf("Failed to read adress 0x%08X\n", pSource);
      }
    }
    if ((bVerbose == DDR2_VERBOSE) && ((alt_u32)pSource > NextMilestone)){
811016e0:	e0bffa17 	ldw	r2,-24(fp)
811016e4:	10800058 	cmpnei	r2,r2,1
811016e8:	1000161e 	bne	r2,zero,81101744 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d0>
811016ec:	e0bff217 	ldw	r2,-56(fp)
811016f0:	e0fff317 	ldw	r3,-52(fp)
811016f4:	1880132e 	bgeu	r3,r2,81101744 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d0>
      printf("..%02d%%..",Percentage);
811016f8:	e0bff403 	ldbu	r2,-48(fp)
811016fc:	100b883a 	mov	r5,r2
81101700:	012044f4 	movhi	r4,33043
81101704:	210a3704 	addi	r4,r4,10460
81101708:	110b56c0 	call	8110b56c <printf>
	  NextMilestone += ByteLen/20;
8110170c:	e0fff117 	ldw	r3,-60(fp)
81101710:	00b33374 	movhi	r2,52429
81101714:	10b33344 	addi	r2,r2,-13107
81101718:	1888383a 	mulxuu	r4,r3,r2
8110171c:	1885383a 	mul	r2,r3,r2
81101720:	1021883a 	mov	r16,r2
81101724:	2023883a 	mov	r17,r4
81101728:	8804d13a 	srli	r2,r17,4
8110172c:	e0fff317 	ldw	r3,-52(fp)
81101730:	1885883a 	add	r2,r3,r2
81101734:	e0bff315 	stw	r2,-52(fp)
	  Percentage += 5;
81101738:	e0bff403 	ldbu	r2,-48(fp)
8110173c:	10800144 	addi	r2,r2,5
81101740:	e0bff405 	stb	r2,-48(fp)
  }
  
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
81101744:	e0bff217 	ldw	r2,-56(fp)
81101748:	10800104 	addi	r2,r2,4
8110174c:	e0bff215 	stw	r2,-56(fp)
81101750:	e0fff217 	ldw	r3,-56(fp)
81101754:	e0bff517 	ldw	r2,-44(fp)
81101758:	18bfd936 	bltu	r3,r2,811016c0 <__reset+0xfb0e16c0>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  if (bVerbose == DDR2_VERBOSE) {
8110175c:	e0bffa17 	ldw	r2,-24(fp)
81101760:	10800058 	cmpnei	r2,r2,1
81101764:	1000031e 	bne	r2,zero,81101774 <DDR2_MEMORY_RANDOM_READ_TEST+0x200>
    printf("..100%%\n");
81101768:	012044f4 	movhi	r4,33043
8110176c:	210a3a04 	addi	r4,r4,10472
81101770:	110b56c0 	call	8110b56c <printf>
  }

  if (bSuccess){
81101774:	e0bfef17 	ldw	r2,-68(fp)
81101778:	10002326 	beq	r2,zero,81101808 <DDR2_MEMORY_RANDOM_READ_TEST+0x294>
    if (bTime == TRUE){
8110177c:	e0bffb17 	ldw	r2,-20(fp)
81101780:	10800058 	cmpnei	r2,r2,1
81101784:	10001b1e 	bne	r2,zero,811017f4 <DDR2_MEMORY_RANDOM_READ_TEST+0x280>
81101788:	d0e06417 	ldw	r3,-32368(gp)
      TimeElapsed = alt_nticks() - TimeStart;
8110178c:	e0bff717 	ldw	r2,-36(fp)
81101790:	1885c83a 	sub	r2,r3,r2
81101794:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81101798:	e13ff617 	ldw	r4,-40(fp)
8110179c:	11095100 	call	81109510 <__floatsisf>
811017a0:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811017a4:	d0a06317 	ldw	r2,-32372(gp)
811017a8:	1009883a 	mov	r4,r2
811017ac:	11096340 	call	81109634 <__floatunsisf>
811017b0:	1007883a 	mov	r3,r2
811017b4:	180b883a 	mov	r5,r3
811017b8:	8009883a 	mov	r4,r16
811017bc:	1108cd40 	call	81108cd4 <__divsf3>
811017c0:	1007883a 	mov	r3,r2
811017c4:	1805883a 	mov	r2,r3
811017c8:	1009883a 	mov	r4,r2
811017cc:	1109e3c0 	call	81109e3c <__extendsfdf2>
811017d0:	1009883a 	mov	r4,r2
811017d4:	180b883a 	mov	r5,r3
811017d8:	200d883a 	mov	r6,r4
811017dc:	280f883a 	mov	r7,r5
811017e0:	e17ff117 	ldw	r5,-60(fp)
811017e4:	012044f4 	movhi	r4,33043
811017e8:	210a1204 	addi	r4,r4,10312
811017ec:	110b56c0 	call	8110b56c <printf>
811017f0:	00000806 	br	81101814 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a0>
    } else {
      printf("DDR2 read test pass, size=%d bytes\n", ByteLen);
811017f4:	e17ff117 	ldw	r5,-60(fp)
811017f8:	012044f4 	movhi	r4,33043
811017fc:	210a5904 	addi	r4,r4,10596
81101800:	110b56c0 	call	8110b56c <printf>
81101804:	00000306 	br	81101814 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a0>
    }
  } else {
    printf("DDR2 read test fail\n");
81101808:	012044f4 	movhi	r4,33043
8110180c:	210a1e04 	addi	r4,r4,10360
81101810:	110b6880 	call	8110b688 <puts>
  }
  printf("\n");
81101814:	01000284 	movi	r4,10
81101818:	110b5b00 	call	8110b5b0 <putchar>

  return bSuccess;
8110181c:	e0bfef17 	ldw	r2,-68(fp)
}
81101820:	e6fffc04 	addi	sp,fp,-16
81101824:	dfc00517 	ldw	ra,20(sp)
81101828:	df000417 	ldw	fp,16(sp)
8110182c:	dcc00317 	ldw	r19,12(sp)
81101830:	dc800217 	ldw	r18,8(sp)
81101834:	dc400117 	ldw	r17,4(sp)
81101838:	dc000017 	ldw	r16,0(sp)
8110183c:	dec00604 	addi	sp,sp,24
81101840:	f800283a 	ret

81101844 <xorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
  *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 xorshift32(alt_u32 *State){
81101844:	defffd04 	addi	sp,sp,-12
81101848:	df000215 	stw	fp,8(sp)
8110184c:	df000204 	addi	fp,sp,8
81101850:	e13fff15 	stw	r4,-4(fp)

  alt_u32 x = *State;
81101854:	e0bfff17 	ldw	r2,-4(fp)
81101858:	10800017 	ldw	r2,0(r2)
8110185c:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 13;
81101860:	e0bffe17 	ldw	r2,-8(fp)
81101864:	1004937a 	slli	r2,r2,13
81101868:	e0fffe17 	ldw	r3,-8(fp)
8110186c:	1884f03a 	xor	r2,r3,r2
81101870:	e0bffe15 	stw	r2,-8(fp)
  x ^= x >> 17;
81101874:	e0bffe17 	ldw	r2,-8(fp)
81101878:	1004d47a 	srli	r2,r2,17
8110187c:	e0fffe17 	ldw	r3,-8(fp)
81101880:	1884f03a 	xor	r2,r3,r2
81101884:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 5;
81101888:	e0bffe17 	ldw	r2,-8(fp)
8110188c:	1004917a 	slli	r2,r2,5
81101890:	e0fffe17 	ldw	r3,-8(fp)
81101894:	1884f03a 	xor	r2,r3,r2
81101898:	e0bffe15 	stw	r2,-8(fp)
  *State = x;
8110189c:	e0bfff17 	ldw	r2,-4(fp)
811018a0:	e0fffe17 	ldw	r3,-8(fp)
811018a4:	10c00015 	stw	r3,0(r2)

  return x;
811018a8:	e0bffe17 	ldw	r2,-8(fp)
}
811018ac:	e037883a 	mov	sp,fp
811018b0:	df000017 	ldw	fp,0(sp)
811018b4:	dec00104 	addi	sp,sp,4
811018b8:	f800283a 	ret

811018bc <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
811018bc:	defffb04 	addi	sp,sp,-20
811018c0:	dfc00415 	stw	ra,16(sp)
811018c4:	df000315 	stw	fp,12(sp)
811018c8:	df000304 	addi	fp,sp,12
811018cc:	e13ffe15 	stw	r4,-8(fp)
811018d0:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
811018d4:	00800044 	movi	r2,1
811018d8:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
811018dc:	e13fff17 	ldw	r4,-4(fp)
811018e0:	113077c0 	call	8113077c <alt_msgdma_open>
811018e4:	1007883a 	mov	r3,r2
811018e8:	e0bffe17 	ldw	r2,-8(fp)
811018ec:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
811018f0:	e0bffe17 	ldw	r2,-8(fp)
811018f4:	10800017 	ldw	r2,0(r2)
811018f8:	1000011e 	bne	r2,zero,81101900 <DMA_OPEN_DEVICE+0x44>
    bSuccess = FALSE;
811018fc:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
81101900:	e0bffd17 	ldw	r2,-12(fp)
}
81101904:	e037883a 	mov	sp,fp
81101908:	dfc00117 	ldw	ra,4(sp)
8110190c:	df000017 	ldw	fp,0(sp)
81101910:	dec00204 	addi	sp,sp,8
81101914:	f800283a 	ret

81101918 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
81101918:	defffc04 	addi	sp,sp,-16
8110191c:	df000315 	stw	fp,12(sp)
81101920:	df000304 	addi	fp,sp,12
81101924:	e13ffe15 	stw	r4,-8(fp)
81101928:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
8110192c:	00800044 	movi	r2,1
81101930:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
81101934:	e0bffe17 	ldw	r2,-8(fp)
81101938:	10800317 	ldw	r2,12(r2)
8110193c:	10800104 	addi	r2,r2,4
81101940:	e0ffff17 	ldw	r3,-4(fp)
81101944:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
81101948:	e0bffd17 	ldw	r2,-12(fp)
}
8110194c:	e037883a 	mov	sp,fp
81101950:	df000017 	ldw	fp,0(sp)
81101954:	dec00104 	addi	sp,sp,4
81101958:	f800283a 	ret

8110195c <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
8110195c:	defffd04 	addi	sp,sp,-12
81101960:	df000215 	stw	fp,8(sp)
81101964:	df000204 	addi	fp,sp,8
81101968:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
8110196c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81101970:	e0bfff17 	ldw	r2,-4(fp)
81101974:	10800317 	ldw	r2,12(r2)
81101978:	10800037 	ldwio	r2,0(r2)
8110197c:	1080004c 	andi	r2,r2,1
81101980:	10000226 	beq	r2,zero,8110198c <DMA_BUSY+0x30>
    bBusy = TRUE;
81101984:	00800044 	movi	r2,1
81101988:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
8110198c:	e0bffe17 	ldw	r2,-8(fp)
}
81101990:	e037883a 	mov	sp,fp
81101994:	df000017 	ldw	fp,0(sp)
81101998:	dec00104 	addi	sp,sp,4
8110199c:	f800283a 	ret

811019a0 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
811019a0:	defffd04 	addi	sp,sp,-12
811019a4:	df000215 	stw	fp,8(sp)
811019a8:	df000204 	addi	fp,sp,8
811019ac:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
811019b0:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
811019b4:	e0bfff17 	ldw	r2,-4(fp)
811019b8:	10800317 	ldw	r2,12(r2)
811019bc:	10800037 	ldwio	r2,0(r2)
811019c0:	1080010c 	andi	r2,r2,4
811019c4:	10000226 	beq	r2,zero,811019d0 <DMA_DESCRIPTOR_BUFFER_FULL+0x30>
    bFull = TRUE;
811019c8:	00800044 	movi	r2,1
811019cc:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
811019d0:	e0bffe17 	ldw	r2,-8(fp)
}
811019d4:	e037883a 	mov	sp,fp
811019d8:	df000017 	ldw	fp,0(sp)
811019dc:	dec00104 	addi	sp,sp,4
811019e0:	f800283a 	ret

811019e4 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
811019e4:	defffd04 	addi	sp,sp,-12
811019e8:	df000215 	stw	fp,8(sp)
811019ec:	df000204 	addi	fp,sp,8
811019f0:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
811019f4:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
811019f8:	e0bfff17 	ldw	r2,-4(fp)
811019fc:	10800317 	ldw	r2,12(r2)
81101a00:	10800037 	ldwio	r2,0(r2)
81101a04:	1080008c 	andi	r2,r2,2
81101a08:	10000226 	beq	r2,zero,81101a14 <DMA_DESCRIPTOR_BUFFER_EMPTY+0x30>
    bEmpty = TRUE;
81101a0c:	00800044 	movi	r2,1
81101a10:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81101a14:	e0bffe17 	ldw	r2,-8(fp)
}
81101a18:	e037883a 	mov	sp,fp
81101a1c:	df000017 	ldw	fp,0(sp)
81101a20:	dec00104 	addi	sp,sp,4
81101a24:	f800283a 	ret

81101a28 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81101a28:	defffa04 	addi	sp,sp,-24
81101a2c:	dfc00515 	stw	ra,20(sp)
81101a30:	df000415 	stw	fp,16(sp)
81101a34:	df000404 	addi	fp,sp,16
81101a38:	e13ffd15 	stw	r4,-12(fp)
81101a3c:	e17ffe15 	stw	r5,-8(fp)
81101a40:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81101a44:	00800044 	movi	r2,1
81101a48:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81101a4c:	e0bffd17 	ldw	r2,-12(fp)
81101a50:	10800317 	ldw	r2,12(r2)
81101a54:	10800104 	addi	r2,r2,4
81101a58:	00c00044 	movi	r3,1
81101a5c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81101a60:	e0bffe17 	ldw	r2,-8(fp)
81101a64:	10800058 	cmpnei	r2,r2,1
81101a68:	10000e1e 	bne	r2,zero,81101aa4 <DMA_DISPATCHER_STOP+0x7c>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81101a6c:	00000706 	br	81101a8c <DMA_DISPATCHER_STOP+0x64>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101a70:	e0bfff17 	ldw	r2,-4(fp)
81101a74:	1000031e 	bne	r2,zero,81101a84 <DMA_DISPATCHER_STOP+0x5c>
        usleep(1);
81101a78:	01000044 	movi	r4,1
81101a7c:	11202500 	call	81120250 <usleep>
81101a80:	00000206 	br	81101a8c <DMA_DISPATCHER_STOP+0x64>
      } else {
        usleep(WaitPeriodUs);
81101a84:	e13fff17 	ldw	r4,-4(fp)
81101a88:	11202500 	call	81120250 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81101a8c:	e0bffd17 	ldw	r2,-12(fp)
81101a90:	10800317 	ldw	r2,12(r2)
81101a94:	10800037 	ldwio	r2,0(r2)
81101a98:	1080080c 	andi	r2,r2,32
81101a9c:	103ff41e 	bne	r2,zero,81101a70 <__reset+0xfb0e1a70>
81101aa0:	00000206 	br	81101aac <DMA_DISPATCHER_STOP+0x84>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81101aa4:	e0bffc17 	ldw	r2,-16(fp)
81101aa8:	00000106 	br	81101ab0 <DMA_DISPATCHER_STOP+0x88>
  }
  
  return bSuccess;
81101aac:	e0bffc17 	ldw	r2,-16(fp)
}
81101ab0:	e037883a 	mov	sp,fp
81101ab4:	dfc00117 	ldw	ra,4(sp)
81101ab8:	df000017 	ldw	fp,0(sp)
81101abc:	dec00204 	addi	sp,sp,8
81101ac0:	f800283a 	ret

81101ac4 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81101ac4:	defffa04 	addi	sp,sp,-24
81101ac8:	dfc00515 	stw	ra,20(sp)
81101acc:	df000415 	stw	fp,16(sp)
81101ad0:	df000404 	addi	fp,sp,16
81101ad4:	e13ffd15 	stw	r4,-12(fp)
81101ad8:	e17ffe15 	stw	r5,-8(fp)
81101adc:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81101ae0:	00800044 	movi	r2,1
81101ae4:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81101ae8:	e0bffd17 	ldw	r2,-12(fp)
81101aec:	10800317 	ldw	r2,12(r2)
81101af0:	10800104 	addi	r2,r2,4
81101af4:	00c00084 	movi	r3,2
81101af8:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81101afc:	e0bffe17 	ldw	r2,-8(fp)
81101b00:	10800058 	cmpnei	r2,r2,1
81101b04:	10000e1e 	bne	r2,zero,81101b40 <DMA_DISPATCHER_RESET+0x7c>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81101b08:	00000706 	br	81101b28 <DMA_DISPATCHER_RESET+0x64>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101b0c:	e0bfff17 	ldw	r2,-4(fp)
81101b10:	1000031e 	bne	r2,zero,81101b20 <DMA_DISPATCHER_RESET+0x5c>
        usleep(1);
81101b14:	01000044 	movi	r4,1
81101b18:	11202500 	call	81120250 <usleep>
81101b1c:	00000206 	br	81101b28 <DMA_DISPATCHER_RESET+0x64>
      } else {
        usleep(WaitPeriodUs);
81101b20:	e13fff17 	ldw	r4,-4(fp)
81101b24:	11202500 	call	81120250 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81101b28:	e0bffd17 	ldw	r2,-12(fp)
81101b2c:	10800317 	ldw	r2,12(r2)
81101b30:	10800037 	ldwio	r2,0(r2)
81101b34:	1080100c 	andi	r2,r2,64
81101b38:	103ff41e 	bne	r2,zero,81101b0c <__reset+0xfb0e1b0c>
81101b3c:	00000206 	br	81101b48 <DMA_DISPATCHER_RESET+0x84>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81101b40:	e0bffc17 	ldw	r2,-16(fp)
81101b44:	00000106 	br	81101b4c <DMA_DISPATCHER_RESET+0x88>
  }
  
  return bSuccess;
81101b48:	e0bffc17 	ldw	r2,-16(fp)
}
81101b4c:	e037883a 	mov	sp,fp
81101b50:	dfc00117 	ldw	ra,4(sp)
81101b54:	df000017 	ldw	fp,0(sp)
81101b58:	dec00204 	addi	sp,sp,8
81101b5c:	f800283a 	ret

81101b60 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81101b60:	defff604 	addi	sp,sp,-40
81101b64:	dfc00915 	stw	ra,36(sp)
81101b68:	df000815 	stw	fp,32(sp)
81101b6c:	dc000715 	stw	r16,28(sp)
81101b70:	df000804 	addi	fp,sp,32
81101b74:	e13ffb15 	stw	r4,-20(fp)
81101b78:	e17ffc15 	stw	r5,-16(fp)
81101b7c:	e1bffd15 	stw	r6,-12(fp)
81101b80:	e1fffe15 	stw	r7,-8(fp)
81101b84:	defff804 	addi	sp,sp,-32
81101b88:	d8800204 	addi	r2,sp,8
81101b8c:	108003c4 	addi	r2,r2,15
81101b90:	1004d13a 	srli	r2,r2,4
81101b94:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81101b98:	00800044 	movi	r2,1
81101b9c:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81101ba0:	e0fffc17 	ldw	r3,-16(fp)
81101ba4:	e13ffd17 	ldw	r4,-12(fp)
81101ba8:	e0800217 	ldw	r2,8(fp)
81101bac:	d8800115 	stw	r2,4(sp)
81101bb0:	e0bffe17 	ldw	r2,-8(fp)
81101bb4:	d8800015 	stw	r2,0(sp)
81101bb8:	200f883a 	mov	r7,r4
81101bbc:	180d883a 	mov	r6,r3
81101bc0:	800b883a 	mov	r5,r16
81101bc4:	e13ffb17 	ldw	r4,-20(fp)
81101bc8:	112f8100 	call	8112f810 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101bcc:	10000326 	beq	r2,zero,81101bdc <DMA_SINGLE_TRANSFER+0x7c>
    bSuccess = FALSE;
81101bd0:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81101bd4:	e0bffa17 	ldw	r2,-24(fp)
81101bd8:	00001d06 	br	81101c50 <DMA_SINGLE_TRANSFER+0xf0>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101bdc:	800b883a 	mov	r5,r16
81101be0:	e13ffb17 	ldw	r4,-20(fp)
81101be4:	11309d40 	call	811309d4 <alt_msgdma_standard_descriptor_async_transfer>
81101be8:	10000326 	beq	r2,zero,81101bf8 <DMA_SINGLE_TRANSFER+0x98>
      bSuccess = FALSE;
81101bec:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81101bf0:	e0bffa17 	ldw	r2,-24(fp)
81101bf4:	00001606 	br	81101c50 <DMA_SINGLE_TRANSFER+0xf0>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81101bf8:	e0bffa17 	ldw	r2,-24(fp)
81101bfc:	10800060 	cmpeqi	r2,r2,1
81101c00:	1007883a 	mov	r3,r2
81101c04:	e0800317 	ldw	r2,12(fp)
81101c08:	10800060 	cmpeqi	r2,r2,1
81101c0c:	1884703a 	and	r2,r3,r2
81101c10:	10803fcc 	andi	r2,r2,255
81101c14:	10000d26 	beq	r2,zero,81101c4c <DMA_SINGLE_TRANSFER+0xec>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101c18:	00000706 	br	81101c38 <DMA_SINGLE_TRANSFER+0xd8>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101c1c:	e0800417 	ldw	r2,16(fp)
81101c20:	1000031e 	bne	r2,zero,81101c30 <DMA_SINGLE_TRANSFER+0xd0>
        usleep(1000);
81101c24:	0100fa04 	movi	r4,1000
81101c28:	11202500 	call	81120250 <usleep>
81101c2c:	00000206 	br	81101c38 <DMA_SINGLE_TRANSFER+0xd8>
      } else {
        usleep(WaitPeriodUs);
81101c30:	e1000417 	ldw	r4,16(fp)
81101c34:	11202500 	call	81120250 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101c38:	e0bffb17 	ldw	r2,-20(fp)
81101c3c:	10800317 	ldw	r2,12(r2)
81101c40:	10800037 	ldwio	r2,0(r2)
81101c44:	1080004c 	andi	r2,r2,1
81101c48:	103ff41e 	bne	r2,zero,81101c1c <__reset+0xfb0e1c1c>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81101c4c:	e0bffa17 	ldw	r2,-24(fp)
}
81101c50:	e6ffff04 	addi	sp,fp,-4
81101c54:	dfc00217 	ldw	ra,8(sp)
81101c58:	df000117 	ldw	fp,4(sp)
81101c5c:	dc000017 	ldw	r16,0(sp)
81101c60:	dec00304 	addi	sp,sp,12
81101c64:	f800283a 	ret

81101c68 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81101c68:	defff504 	addi	sp,sp,-44
81101c6c:	dfc00a15 	stw	ra,40(sp)
81101c70:	df000915 	stw	fp,36(sp)
81101c74:	dc000815 	stw	r16,32(sp)
81101c78:	df000904 	addi	fp,sp,36
81101c7c:	e13ffb15 	stw	r4,-20(fp)
81101c80:	e17ffc15 	stw	r5,-16(fp)
81101c84:	e1bffd15 	stw	r6,-12(fp)
81101c88:	3805883a 	mov	r2,r7
81101c8c:	e0bffe05 	stb	r2,-8(fp)
81101c90:	defff804 	addi	sp,sp,-32
81101c94:	d8800204 	addi	r2,sp,8
81101c98:	108003c4 	addi	r2,r2,15
81101c9c:	1004d13a 	srli	r2,r2,4
81101ca0:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81101ca4:	00800044 	movi	r2,1
81101ca8:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81101cac:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81101cb0:	00002506 	br	81101d48 <DMA_MULTIPLE_TRANSFER+0xe0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81101cb4:	e0bffa03 	ldbu	r2,-24(fp)
81101cb8:	1085883a 	add	r2,r2,r2
81101cbc:	1085883a 	add	r2,r2,r2
81101cc0:	1007883a 	mov	r3,r2
81101cc4:	e0bffc17 	ldw	r2,-16(fp)
81101cc8:	10c5883a 	add	r2,r2,r3
81101ccc:	10800017 	ldw	r2,0(r2)
81101cd0:	1009883a 	mov	r4,r2
81101cd4:	e0bffa03 	ldbu	r2,-24(fp)
81101cd8:	1085883a 	add	r2,r2,r2
81101cdc:	1085883a 	add	r2,r2,r2
81101ce0:	1007883a 	mov	r3,r2
81101ce4:	e0bffd17 	ldw	r2,-12(fp)
81101ce8:	10c5883a 	add	r2,r2,r3
81101cec:	10800017 	ldw	r2,0(r2)
81101cf0:	1007883a 	mov	r3,r2
81101cf4:	e0800317 	ldw	r2,12(fp)
81101cf8:	10804034 	orhi	r2,r2,256
81101cfc:	d8800115 	stw	r2,4(sp)
81101d00:	e0800217 	ldw	r2,8(fp)
81101d04:	d8800015 	stw	r2,0(sp)
81101d08:	180f883a 	mov	r7,r3
81101d0c:	200d883a 	mov	r6,r4
81101d10:	800b883a 	mov	r5,r16
81101d14:	e13ffb17 	ldw	r4,-20(fp)
81101d18:	112f8100 	call	8112f810 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101d1c:	10000226 	beq	r2,zero,81101d28 <DMA_MULTIPLE_TRANSFER+0xc0>
      bSuccess = FALSE;
81101d20:	e03ff915 	stw	zero,-28(fp)
81101d24:	00000506 	br	81101d3c <DMA_MULTIPLE_TRANSFER+0xd4>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101d28:	800b883a 	mov	r5,r16
81101d2c:	e13ffb17 	ldw	r4,-20(fp)
81101d30:	11309d40 	call	811309d4 <alt_msgdma_standard_descriptor_async_transfer>
81101d34:	10000126 	beq	r2,zero,81101d3c <DMA_MULTIPLE_TRANSFER+0xd4>
        bSuccess = FALSE;
81101d38:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81101d3c:	e0bffa03 	ldbu	r2,-24(fp)
81101d40:	10800044 	addi	r2,r2,1
81101d44:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81101d48:	e0bff917 	ldw	r2,-28(fp)
81101d4c:	10800060 	cmpeqi	r2,r2,1
81101d50:	1009883a 	mov	r4,r2
81101d54:	e0fffa03 	ldbu	r3,-24(fp)
81101d58:	e0bffe03 	ldbu	r2,-8(fp)
81101d5c:	10bfffc4 	addi	r2,r2,-1
81101d60:	1884803a 	cmplt	r2,r3,r2
81101d64:	2084703a 	and	r2,r4,r2
81101d68:	10803fcc 	andi	r2,r2,255
81101d6c:	103fd11e 	bne	r2,zero,81101cb4 <__reset+0xfb0e1cb4>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81101d70:	e0bff917 	ldw	r2,-28(fp)
81101d74:	10800058 	cmpnei	r2,r2,1
81101d78:	1000211e 	bne	r2,zero,81101e00 <DMA_MULTIPLE_TRANSFER+0x198>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81101d7c:	e0bffa03 	ldbu	r2,-24(fp)
81101d80:	1085883a 	add	r2,r2,r2
81101d84:	1085883a 	add	r2,r2,r2
81101d88:	1007883a 	mov	r3,r2
81101d8c:	e0bffc17 	ldw	r2,-16(fp)
81101d90:	10c5883a 	add	r2,r2,r3
81101d94:	10800017 	ldw	r2,0(r2)
81101d98:	1009883a 	mov	r4,r2
81101d9c:	e0bffa03 	ldbu	r2,-24(fp)
81101da0:	1085883a 	add	r2,r2,r2
81101da4:	1085883a 	add	r2,r2,r2
81101da8:	1007883a 	mov	r3,r2
81101dac:	e0bffd17 	ldw	r2,-12(fp)
81101db0:	10c5883a 	add	r2,r2,r3
81101db4:	10800017 	ldw	r2,0(r2)
81101db8:	1007883a 	mov	r3,r2
81101dbc:	e0800317 	ldw	r2,12(fp)
81101dc0:	d8800115 	stw	r2,4(sp)
81101dc4:	e0800217 	ldw	r2,8(fp)
81101dc8:	d8800015 	stw	r2,0(sp)
81101dcc:	180f883a 	mov	r7,r3
81101dd0:	200d883a 	mov	r6,r4
81101dd4:	800b883a 	mov	r5,r16
81101dd8:	e13ffb17 	ldw	r4,-20(fp)
81101ddc:	112f8100 	call	8112f810 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101de0:	10000226 	beq	r2,zero,81101dec <DMA_MULTIPLE_TRANSFER+0x184>
      bSuccess = FALSE;
81101de4:	e03ff915 	stw	zero,-28(fp)
81101de8:	00000506 	br	81101e00 <DMA_MULTIPLE_TRANSFER+0x198>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101dec:	800b883a 	mov	r5,r16
81101df0:	e13ffb17 	ldw	r4,-20(fp)
81101df4:	11309d40 	call	811309d4 <alt_msgdma_standard_descriptor_async_transfer>
81101df8:	10000126 	beq	r2,zero,81101e00 <DMA_MULTIPLE_TRANSFER+0x198>
        bSuccess = FALSE;
81101dfc:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81101e00:	e0bff917 	ldw	r2,-28(fp)
81101e04:	10800060 	cmpeqi	r2,r2,1
81101e08:	1007883a 	mov	r3,r2
81101e0c:	e0800417 	ldw	r2,16(fp)
81101e10:	10800060 	cmpeqi	r2,r2,1
81101e14:	1884703a 	and	r2,r3,r2
81101e18:	10803fcc 	andi	r2,r2,255
81101e1c:	10000d26 	beq	r2,zero,81101e54 <DMA_MULTIPLE_TRANSFER+0x1ec>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101e20:	00000706 	br	81101e40 <DMA_MULTIPLE_TRANSFER+0x1d8>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101e24:	e0800517 	ldw	r2,20(fp)
81101e28:	1000031e 	bne	r2,zero,81101e38 <DMA_MULTIPLE_TRANSFER+0x1d0>
    	usleep(1000);
81101e2c:	0100fa04 	movi	r4,1000
81101e30:	11202500 	call	81120250 <usleep>
81101e34:	00000206 	br	81101e40 <DMA_MULTIPLE_TRANSFER+0x1d8>
      } else {
    	usleep(WaitPeriodUs);
81101e38:	e1000517 	ldw	r4,20(fp)
81101e3c:	11202500 	call	81120250 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101e40:	e0bffb17 	ldw	r2,-20(fp)
81101e44:	10800317 	ldw	r2,12(r2)
81101e48:	10800037 	ldwio	r2,0(r2)
81101e4c:	1080004c 	andi	r2,r2,1
81101e50:	103ff41e 	bne	r2,zero,81101e24 <__reset+0xfb0e1e24>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81101e54:	e0bff917 	ldw	r2,-28(fp)
}
81101e58:	e6ffff04 	addi	sp,fp,-4
81101e5c:	dfc00217 	ldw	ra,8(sp)
81101e60:	df000117 	ldw	fp,4(sp)
81101e64:	dc000017 	ldw	r16,0(sp)
81101e68:	dec00304 	addi	sp,sp,12
81101e6c:	f800283a 	ret

81101e70 <POWER_Read>:
#include "sense.h"

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]){
81101e70:	deffef04 	addi	sp,sp,-68
81101e74:	dfc01015 	stw	ra,64(sp)
81101e78:	df000f15 	stw	fp,60(sp)
81101e7c:	df000f04 	addi	fp,sp,60
81101e80:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
81101e84:	00800044 	movi	r2,1
81101e88:	e0bff315 	stw	r2,-52(fp)
    int i,c, nPortIndex=0;
81101e8c:	e03ff615 	stw	zero,-40(fp)
    int szPortNum[] = {POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM};
81101e90:	00800204 	movi	r2,8
81101e94:	e0bffc15 	stw	r2,-16(fp)
81101e98:	00800104 	movi	r2,4
81101e9c:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
81101ea0:	00800044 	movi	r2,1
81101ea4:	e0bff715 	stw	r2,-36(fp)
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
81101ea8:	00800044 	movi	r2,1
81101eac:	e0bff815 	stw	r2,-32(fp)
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
81101eb0:	e03ff915 	stw	zero,-28(fp)
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81101eb4:	e03ff515 	stw	zero,-44(fp)
81101eb8:	00007106 	br	81102080 <POWER_Read+0x210>
        NextChannel = 0;
81101ebc:	e03ffa05 	stb	zero,-24(fp)
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81101ec0:	e0bff517 	ldw	r2,-44(fp)
81101ec4:	10c03fcc 	andi	r3,r2,255
81101ec8:	e13ffa03 	ldbu	r4,-24(fp)
81101ecc:	e0bfff17 	ldw	r2,-4(fp)
81101ed0:	d8800115 	stw	r2,4(sp)
81101ed4:	e0bff917 	ldw	r2,-28(fp)
81101ed8:	d8800015 	stw	r2,0(sp)
81101edc:	e1fff817 	ldw	r7,-32(fp)
81101ee0:	e1bff717 	ldw	r6,-36(fp)
81101ee4:	200b883a 	mov	r5,r4
81101ee8:	1809883a 	mov	r4,r3
81101eec:	1105ac00 	call	81105ac0 <POWER_SPI_RW>
81101ef0:	e0bff315 	stw	r2,-52(fp)
        for(i=0;i<szPortNum[c] && bSuccess;i++){
81101ef4:	e03ff415 	stw	zero,-48(fp)
81101ef8:	00005306 	br	81102048 <POWER_Read+0x1d8>
            NextChannel = i + 1;
81101efc:	e0bff417 	ldw	r2,-48(fp)
81101f00:	10800044 	addi	r2,r2,1
81101f04:	e0bffa05 	stb	r2,-24(fp)
            bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81101f08:	e0bff517 	ldw	r2,-44(fp)
81101f0c:	10c03fcc 	andi	r3,r2,255
81101f10:	e13ffa03 	ldbu	r4,-24(fp)
81101f14:	e0bffe04 	addi	r2,fp,-8
81101f18:	d8800115 	stw	r2,4(sp)
81101f1c:	e0bff917 	ldw	r2,-28(fp)
81101f20:	d8800015 	stw	r2,0(sp)
81101f24:	e1fff817 	ldw	r7,-32(fp)
81101f28:	e1bff717 	ldw	r6,-36(fp)
81101f2c:	200b883a 	mov	r5,r4
81101f30:	1809883a 	mov	r4,r3
81101f34:	1105ac00 	call	81105ac0 <POWER_SPI_RW>
81101f38:	e0bff315 	stw	r2,-52(fp)
            if (bSuccess){
81101f3c:	e0bff317 	ldw	r2,-52(fp)
81101f40:	10003b26 	beq	r2,zero,81102030 <POWER_Read+0x1c0>
                HEAD = (Value32 >> 30) & 0x03;
81101f44:	e0bffe17 	ldw	r2,-8(fp)
81101f48:	1004d7ba 	srli	r2,r2,30
81101f4c:	e0bffa45 	stb	r2,-23(fp)
                Channel = (Value32 >> 1) & 0x07;
81101f50:	e0bffe17 	ldw	r2,-8(fp)
81101f54:	1004d07a 	srli	r2,r2,1
81101f58:	108001cc 	andi	r2,r2,7
81101f5c:	e0bffa85 	stb	r2,-22(fp)
                SIGN = (Value32 >> 4 ) & 0x01;
81101f60:	e0bffe17 	ldw	r2,-8(fp)
81101f64:	1004d13a 	srli	r2,r2,4
81101f68:	1080004c 	andi	r2,r2,1
81101f6c:	e0bffac5 	stb	r2,-21(fp)
                SGL = (Value32 >> 5 ) & 0x01;
81101f70:	e0bffe17 	ldw	r2,-8(fp)
81101f74:	1004d17a 	srli	r2,r2,5
81101f78:	1080004c 	andi	r2,r2,1
81101f7c:	e0bffb05 	stb	r2,-20(fp)
                PARITY = Value32 & 0x01;
81101f80:	e0bffe17 	ldw	r2,-8(fp)
81101f84:	1080004c 	andi	r2,r2,1
81101f88:	e0bffb45 	stb	r2,-19(fp)
                if (HEAD != 0){
81101f8c:	e0bffa43 	ldbu	r2,-23(fp)
81101f90:	10000626 	beq	r2,zero,81101fac <POWER_Read+0x13c>
                    printf("[%d]Unexpected HEAD\r\n",i);
81101f94:	e17ff417 	ldw	r5,-48(fp)
81101f98:	012044f4 	movhi	r4,33043
81101f9c:	210a6204 	addi	r4,r4,10632
81101fa0:	110b56c0 	call	8110b56c <printf>
                    bSuccess = FALSE;
81101fa4:	e03ff315 	stw	zero,-52(fp)
81101fa8:	00001406 	br	81101ffc <POWER_Read+0x18c>
                }else if (Channel != i){
81101fac:	e0fffa83 	ldbu	r3,-22(fp)
81101fb0:	e0bff417 	ldw	r2,-48(fp)
81101fb4:	18800926 	beq	r3,r2,81101fdc <POWER_Read+0x16c>
                    printf("[%d]Unexpected Channel. Expected:%d, Read:%d\r\n", i, i, Channel);
81101fb8:	e0bffa83 	ldbu	r2,-22(fp)
81101fbc:	100f883a 	mov	r7,r2
81101fc0:	e1bff417 	ldw	r6,-48(fp)
81101fc4:	e17ff417 	ldw	r5,-48(fp)
81101fc8:	012044f4 	movhi	r4,33043
81101fcc:	210a6804 	addi	r4,r4,10656
81101fd0:	110b56c0 	call	8110b56c <printf>
                    bSuccess = FALSE;
81101fd4:	e03ff315 	stw	zero,-52(fp)
81101fd8:	00000806 	br	81101ffc <POWER_Read+0x18c>
                }else if (SIGN ^ bSIGN){
81101fdc:	e0fffac3 	ldbu	r3,-21(fp)
81101fe0:	e0bff817 	ldw	r2,-32(fp)
81101fe4:	18800526 	beq	r3,r2,81101ffc <POWER_Read+0x18c>
                    printf("[%d]Unexpected SIGN\r\n",i);
81101fe8:	e17ff417 	ldw	r5,-48(fp)
81101fec:	012044f4 	movhi	r4,33043
81101ff0:	210a7404 	addi	r4,r4,10704
81101ff4:	110b56c0 	call	8110b56c <printf>
                    bSuccess = FALSE;
81101ff8:	e03ff315 	stw	zero,-52(fp)
                }else if (SGL ^ SGL){
                    printf("[%d]Unexpected SGL\r\n",i);
                    bSuccess = FALSE;
                }
                if (bSuccess)
81101ffc:	e0bff317 	ldw	r2,-52(fp)
81102000:	10000e26 	beq	r2,zero,8110203c <POWER_Read+0x1cc>
                    szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81102004:	e0bff617 	ldw	r2,-40(fp)
81102008:	10c00044 	addi	r3,r2,1
8110200c:	e0fff615 	stw	r3,-40(fp)
81102010:	1085883a 	add	r2,r2,r2
81102014:	1085883a 	add	r2,r2,r2
81102018:	1007883a 	mov	r3,r2
8110201c:	e0bfff17 	ldw	r2,-4(fp)
81102020:	10c5883a 	add	r2,r2,r3
81102024:	e0fffe17 	ldw	r3,-8(fp)
81102028:	10c00015 	stw	r3,0(r2)
8110202c:	00000306 	br	8110203c <POWER_Read+0x1cc>
            }else{
                printf("SPI Read Error\r\n");
81102030:	012044f4 	movhi	r4,33043
81102034:	210a7a04 	addi	r4,r4,10728
81102038:	110b6880 	call	8110b688 <puts>
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
        NextChannel = 0;
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
        for(i=0;i<szPortNum[c] && bSuccess;i++){
8110203c:	e0bff417 	ldw	r2,-48(fp)
81102040:	10800044 	addi	r2,r2,1
81102044:	e0bff415 	stw	r2,-48(fp)
81102048:	e0bff517 	ldw	r2,-44(fp)
8110204c:	1085883a 	add	r2,r2,r2
81102050:	1085883a 	add	r2,r2,r2
81102054:	e0fff304 	addi	r3,fp,-52
81102058:	1885883a 	add	r2,r3,r2
8110205c:	10800904 	addi	r2,r2,36
81102060:	10800017 	ldw	r2,0(r2)
81102064:	e0fff417 	ldw	r3,-48(fp)
81102068:	1880020e 	bge	r3,r2,81102074 <POWER_Read+0x204>
8110206c:	e0bff317 	ldw	r2,-52(fp)
81102070:	103fa21e 	bne	r2,zero,81101efc <__reset+0xfb0e1efc>
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81102074:	e0bff517 	ldw	r2,-44(fp)
81102078:	10800044 	addi	r2,r2,1
8110207c:	e0bff515 	stw	r2,-44(fp)
81102080:	e0bff517 	ldw	r2,-44(fp)
81102084:	10800088 	cmpgei	r2,r2,2
81102088:	1000021e 	bne	r2,zero,81102094 <POWER_Read+0x224>
8110208c:	e0bff317 	ldw	r2,-52(fp)
81102090:	103f8a1e 	bne	r2,zero,81101ebc <__reset+0xfb0e1ebc>
            }else{
                printf("SPI Read Error\r\n");
            }
        } // for i
    } // for c
    return bSuccess;
81102094:	e0bff317 	ldw	r2,-52(fp)
 }
81102098:	e037883a 	mov	sp,fp
8110209c:	dfc00117 	ldw	ra,4(sp)
811020a0:	df000017 	ldw	fp,0(sp)
811020a4:	dec00204 	addi	sp,sp,8
811020a8:	f800283a 	ret

811020ac <TEMP_Read>:

 bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp){
811020ac:	defff904 	addi	sp,sp,-28
811020b0:	dfc00615 	stw	ra,24(sp)
811020b4:	df000515 	stw	fp,20(sp)
811020b8:	df000504 	addi	fp,sp,20
811020bc:	e13ffe15 	stw	r4,-8(fp)
811020c0:	e17fff15 	stw	r5,-4(fp)
        bool bSuccess;
        const alt_u8 DeviceAddr = 0x30;
811020c4:	00800c04 	movi	r2,48
811020c8:	e0bffd85 	stb	r2,-10(fp)
        alt_8 FpgaTemp, BoardTemp;
        char Data;

        // read local temp
        bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00, &Data);
811020cc:	e0bffd83 	ldbu	r2,-10(fp)
811020d0:	10c03fcc 	andi	r3,r2,255
811020d4:	18c0201c 	xori	r3,r3,128
811020d8:	18ffe004 	addi	r3,r3,-128
811020dc:	e0bffdc4 	addi	r2,fp,-9
811020e0:	d8800015 	stw	r2,0(sp)
811020e4:	000f883a 	mov	r7,zero
811020e8:	180d883a 	mov	r6,r3
811020ec:	01600034 	movhi	r5,32768
811020f0:	29415804 	addi	r5,r5,1376
811020f4:	01200034 	movhi	r4,32768
811020f8:	21015c04 	addi	r4,r4,1392
811020fc:	11051280 	call	81105128 <I2C_Read>
81102100:	e0bffc15 	stw	r2,-16(fp)
        if (bSuccess)
81102104:	e0bffc17 	ldw	r2,-16(fp)
81102108:	10000226 	beq	r2,zero,81102114 <TEMP_Read+0x68>
            BoardTemp = Data;
8110210c:	e0bffdc3 	ldbu	r2,-9(fp)
81102110:	e0bffd45 	stb	r2,-11(fp)

        // read remote temp
        if (bSuccess){
81102114:	e0bffc17 	ldw	r2,-16(fp)
81102118:	10001226 	beq	r2,zero,81102164 <TEMP_Read+0xb8>
            bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01, &Data);
8110211c:	e0bffd83 	ldbu	r2,-10(fp)
81102120:	10c03fcc 	andi	r3,r2,255
81102124:	18c0201c 	xori	r3,r3,128
81102128:	18ffe004 	addi	r3,r3,-128
8110212c:	e0bffdc4 	addi	r2,fp,-9
81102130:	d8800015 	stw	r2,0(sp)
81102134:	01c00044 	movi	r7,1
81102138:	180d883a 	mov	r6,r3
8110213c:	01600034 	movhi	r5,32768
81102140:	29415804 	addi	r5,r5,1376
81102144:	01200034 	movhi	r4,32768
81102148:	21015c04 	addi	r4,r4,1392
8110214c:	11051280 	call	81105128 <I2C_Read>
81102150:	e0bffc15 	stw	r2,-16(fp)
            if (bSuccess)
81102154:	e0bffc17 	ldw	r2,-16(fp)
81102158:	10000226 	beq	r2,zero,81102164 <TEMP_Read+0xb8>
                FpgaTemp = Data;
8110215c:	e0bffdc3 	ldbu	r2,-9(fp)
81102160:	e0bffd05 	stb	r2,-12(fp)
        }
        //
        if (bSuccess){
81102164:	e0bffc17 	ldw	r2,-16(fp)
81102168:	10000626 	beq	r2,zero,81102184 <TEMP_Read+0xd8>
           *pFpgaTemp = FpgaTemp;
8110216c:	e0bffe17 	ldw	r2,-8(fp)
81102170:	e0fffd03 	ldbu	r3,-12(fp)
81102174:	10c00005 	stb	r3,0(r2)
           *pBoardTemp = BoardTemp;
81102178:	e0bfff17 	ldw	r2,-4(fp)
8110217c:	e0fffd43 	ldbu	r3,-11(fp)
81102180:	10c00005 	stb	r3,0(r2)
        }

        return bSuccess;
81102184:	e0bffc17 	ldw	r2,-16(fp)
 }
81102188:	e037883a 	mov	sp,fp
8110218c:	dfc00117 	ldw	ra,4(sp)
81102190:	df000017 	ldw	fp,0(sp)
81102194:	dec00204 	addi	sp,sp,8
81102198:	f800283a 	ret

8110219c <sense_log_temp>:


 bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp){
8110219c:	defffb04 	addi	sp,sp,-20
811021a0:	dfc00415 	stw	ra,16(sp)
811021a4:	df000315 	stw	fp,12(sp)
811021a8:	df000304 	addi	fp,sp,12
811021ac:	e13ffe15 	stw	r4,-8(fp)
811021b0:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	 // show temp
	 bSuccess = TEMP_Read(FpgaTemp, BoardTemp);
811021b4:	e17fff17 	ldw	r5,-4(fp)
811021b8:	e13ffe17 	ldw	r4,-8(fp)
811021bc:	11020ac0 	call	811020ac <TEMP_Read>
811021c0:	e0bffd15 	stw	r2,-12(fp)

	 return(bSuccess);
811021c4:	e0bffd17 	ldw	r2,-12(fp)
 }
811021c8:	e037883a 	mov	sp,fp
811021cc:	dfc00117 	ldw	ra,4(sp)
811021d0:	df000017 	ldw	fp,0(sp)
811021d4:	dec00204 	addi	sp,sp,8
811021d8:	f800283a 	ret

811021dc <sense_log>:


 void sense_log(void){
811021dc:	deff0504 	addi	sp,sp,-1004
811021e0:	dfc0fa15 	stw	ra,1000(sp)
811021e4:	df00f915 	stw	fp,996(sp)
811021e8:	dd40f815 	stw	r21,992(sp)
811021ec:	dd00f715 	stw	r20,988(sp)
811021f0:	dcc0f615 	stw	r19,984(sp)
811021f4:	dc80f515 	stw	r18,980(sp)
811021f8:	dc40f415 	stw	r17,976(sp)
811021fc:	dc00f315 	stw	r16,972(sp)
81102200:	df00f904 	addi	fp,sp,996
 	  bool bSuccess;
 	    int i;
 	    const float fRef = 5.0; // 5.0V
81102204:	00902834 	movhi	r2,16544
81102208:	e0bf0e15 	stw	r2,-968(fp)
 	    float fVolDrop, fCurrent, fPower, fVol;
 	    alt_u32 szVol[POWER_PORT_NUM];
 	    alt_u32 SIG, MSB, RESULT;
 	    float szRes[] = {0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003};
8110220c:	008ed174 	movhi	r2,15173
81102210:	10a6e984 	addi	r2,r2,-25690
81102214:	e0bf2215 	stw	r2,-888(fp)
81102218:	008ea0f4 	movhi	r2,14979
8110221c:	10849bc4 	addi	r2,r2,4719
81102220:	e0bf2315 	stw	r2,-884(fp)
81102224:	008ed174 	movhi	r2,15173
81102228:	10a6e984 	addi	r2,r2,-25690
8110222c:	e0bf2415 	stw	r2,-880(fp)
81102230:	008ed174 	movhi	r2,15173
81102234:	10a6e984 	addi	r2,r2,-25690
81102238:	e0bf2515 	stw	r2,-876(fp)
8110223c:	008ed174 	movhi	r2,15173
81102240:	10a6e984 	addi	r2,r2,-25690
81102244:	e0bf2615 	stw	r2,-872(fp)
81102248:	008ed174 	movhi	r2,15173
8110224c:	10a6e984 	addi	r2,r2,-25690
81102250:	e0bf2715 	stw	r2,-868(fp)
81102254:	008ed174 	movhi	r2,15173
81102258:	10a6e984 	addi	r2,r2,-25690
8110225c:	e0bf2815 	stw	r2,-864(fp)
81102260:	008ed174 	movhi	r2,15173
81102264:	10a6e984 	addi	r2,r2,-25690
81102268:	e0bf2915 	stw	r2,-860(fp)
8110226c:	008ed174 	movhi	r2,15173
81102270:	10a6e984 	addi	r2,r2,-25690
81102274:	e0bf2a15 	stw	r2,-856(fp)
81102278:	008ed174 	movhi	r2,15173
8110227c:	10a6e984 	addi	r2,r2,-25690
81102280:	e0bf2b15 	stw	r2,-852(fp)
81102284:	008ed174 	movhi	r2,15173
81102288:	10a6e984 	addi	r2,r2,-25690
8110228c:	e0bf2c15 	stw	r2,-848(fp)
81102290:	008ed174 	movhi	r2,15173
81102294:	10a6e984 	addi	r2,r2,-25690
81102298:	e0bf2d15 	stw	r2,-844(fp)
 	    float szRefVol[] = {0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3, 2.5};
8110229c:	008fd9b4 	movhi	r2,16230
811022a0:	10999984 	addi	r2,r2,26214
811022a4:	e0bf2e15 	stw	r2,-840(fp)
811022a8:	008fd9b4 	movhi	r2,16230
811022ac:	10999984 	addi	r2,r2,26214
811022b0:	e0bf2f15 	stw	r2,-836(fp)
811022b4:	00901034 	movhi	r2,16448
811022b8:	e0bf3015 	stw	r2,-832(fp)
811022bc:	008fd9b4 	movhi	r2,16230
811022c0:	10999984 	addi	r2,r2,26214
811022c4:	e0bf3115 	stw	r2,-828(fp)
811022c8:	008ff9b4 	movhi	r2,16358
811022cc:	10999984 	addi	r2,r2,26214
811022d0:	e0bf3215 	stw	r2,-824(fp)
811022d4:	00900834 	movhi	r2,16416
811022d8:	e0bf3315 	stw	r2,-820(fp)
811022dc:	008ff9b4 	movhi	r2,16358
811022e0:	10999984 	addi	r2,r2,26214
811022e4:	e0bf3415 	stw	r2,-816(fp)
811022e8:	00900834 	movhi	r2,16416
811022ec:	e0bf3515 	stw	r2,-812(fp)
811022f0:	008fe374 	movhi	r2,16269
811022f4:	10b33344 	addi	r2,r2,-13107
811022f8:	e0bf3615 	stw	r2,-808(fp)
811022fc:	008fecf4 	movhi	r2,16307
81102300:	108cccc4 	addi	r2,r2,13107
81102304:	e0bf3715 	stw	r2,-804(fp)
81102308:	009014f4 	movhi	r2,16467
8110230c:	108cccc4 	addi	r2,r2,13107
81102310:	e0bf3815 	stw	r2,-800(fp)
81102314:	00900834 	movhi	r2,16416
81102318:	e0bf3915 	stw	r2,-796(fp)
 	    char szName[][64] = {
8110231c:	00a044f4 	movhi	r2,33043
81102320:	108ab2c4 	addi	r2,r2,10955
81102324:	e0ff3a04 	addi	r3,fp,-792
81102328:	1009883a 	mov	r4,r2
8110232c:	0080c004 	movi	r2,768
81102330:	100d883a 	mov	r6,r2
81102334:	200b883a 	mov	r5,r4
81102338:	1809883a 	mov	r4,r3
8110233c:	110b26c0 	call	8110b26c <memcpy>
 	        "VCC3P3_HSMC",
 	        "HSMB_VCCIO",
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
81102340:	e0bf1604 	addi	r2,fp,-936
81102344:	1009883a 	mov	r4,r2
81102348:	1101e700 	call	81101e70 <POWER_Read>
8110234c:	e0bf0f15 	stw	r2,-964(fp)
 	        if (bSuccess){
81102350:	e0bf0f17 	ldw	r2,-964(fp)
81102354:	10013b26 	beq	r2,zero,81102844 <sense_log+0x668>
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
81102358:	e03f0c15 	stw	zero,-976(fp)
8110235c:	00013006 	br	81102820 <sense_log+0x644>
 	                SIG = (szVol[i] >> 29) & 0x01;
81102360:	e0bf0c17 	ldw	r2,-976(fp)
81102364:	1085883a 	add	r2,r2,r2
81102368:	1085883a 	add	r2,r2,r2
8110236c:	e0ff0c04 	addi	r3,fp,-976
81102370:	1885883a 	add	r2,r3,r2
81102374:	10800a04 	addi	r2,r2,40
81102378:	10800017 	ldw	r2,0(r2)
8110237c:	1004d77a 	srli	r2,r2,29
81102380:	1080004c 	andi	r2,r2,1
81102384:	e0bf1015 	stw	r2,-960(fp)
 	                MSB = (szVol[i] >> 28) & 0x01;
81102388:	e0bf0c17 	ldw	r2,-976(fp)
8110238c:	1085883a 	add	r2,r2,r2
81102390:	1085883a 	add	r2,r2,r2
81102394:	e0ff0c04 	addi	r3,fp,-976
81102398:	1885883a 	add	r2,r3,r2
8110239c:	10800a04 	addi	r2,r2,40
811023a0:	10800017 	ldw	r2,0(r2)
811023a4:	1004d73a 	srli	r2,r2,28
811023a8:	1080004c 	andi	r2,r2,1
811023ac:	e0bf1115 	stw	r2,-956(fp)
 	                RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
811023b0:	e0bf0c17 	ldw	r2,-976(fp)
811023b4:	1085883a 	add	r2,r2,r2
811023b8:	1085883a 	add	r2,r2,r2
811023bc:	e0ff0c04 	addi	r3,fp,-976
811023c0:	1885883a 	add	r2,r3,r2
811023c4:	10800a04 	addi	r2,r2,40
811023c8:	10800017 	ldw	r2,0(r2)
811023cc:	1006d1ba 	srli	r3,r2,6
811023d0:	00801034 	movhi	r2,64
811023d4:	10bfffc4 	addi	r2,r2,-1
811023d8:	1884703a 	and	r2,r3,r2
811023dc:	e0bf1215 	stw	r2,-952(fp)
 	                if (MSB == 0)
811023e0:	e0bf1117 	ldw	r2,-956(fp)
811023e4:	1000091e 	bne	r2,zero,8110240c <sense_log+0x230>
 	                    fVolDrop = (float)(RESULT)/(float)0x400000;
811023e8:	e13f1217 	ldw	r4,-952(fp)
811023ec:	11096340 	call	81109634 <__floatunsisf>
811023f0:	1007883a 	mov	r3,r2
811023f4:	0152a034 	movhi	r5,19072
811023f8:	1809883a 	mov	r4,r3
811023fc:	1108cd40 	call	81108cd4 <__divsf3>
81102400:	1007883a 	mov	r3,r2
81102404:	e0ff0d15 	stw	r3,-972(fp)
81102408:	00000106 	br	81102410 <sense_log+0x234>
 	                else
 	                    fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
8110240c:	e03f0d15 	stw	zero,-972(fp)
 	                if (SIG && MSB){
81102410:	e0bf1017 	ldw	r2,-960(fp)
81102414:	10001f26 	beq	r2,zero,81102494 <sense_log+0x2b8>
81102418:	e0bf1117 	ldw	r2,-956(fp)
8110241c:	10001d26 	beq	r2,zero,81102494 <sense_log+0x2b8>
 	                    fVol = fRef*0.5;
81102420:	014fc034 	movhi	r5,16128
81102424:	e13f0e17 	ldw	r4,-968(fp)
81102428:	11091140 	call	81109114 <__mulsf3>
8110242c:	1007883a 	mov	r3,r2
81102430:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
81102434:	e0ff3a04 	addi	r3,fp,-792
81102438:	e0bf0c17 	ldw	r2,-976(fp)
8110243c:	100491ba 	slli	r2,r2,6
81102440:	18a1883a 	add	r16,r3,r2
81102444:	e0bf0c17 	ldw	r2,-976(fp)
81102448:	1085883a 	add	r2,r2,r2
8110244c:	1085883a 	add	r2,r2,r2
81102450:	e0ff0c04 	addi	r3,fp,-976
81102454:	1885883a 	add	r2,r3,r2
81102458:	10800a04 	addi	r2,r2,40
8110245c:	10800017 	ldw	r2,0(r2)
81102460:	1023883a 	mov	r17,r2
81102464:	e13f1317 	ldw	r4,-948(fp)
81102468:	1109e3c0 	call	81109e3c <__extendsfdf2>
8110246c:	1009883a 	mov	r4,r2
81102470:	180b883a 	mov	r5,r3
81102474:	d9400015 	stw	r5,0(sp)
81102478:	200f883a 	mov	r7,r4
8110247c:	880d883a 	mov	r6,r17
81102480:	800b883a 	mov	r5,r16
81102484:	012044f4 	movhi	r4,33043
81102488:	210a7e04 	addi	r4,r4,10744
8110248c:	110b56c0 	call	8110b56c <printf>
81102490:	0000e006 	br	81102814 <sense_log+0x638>
 	                }else if (SIG && !MSB){
81102494:	e0bf1017 	ldw	r2,-960(fp)
81102498:	10005d26 	beq	r2,zero,81102610 <sense_log+0x434>
8110249c:	e0bf1117 	ldw	r2,-956(fp)
811024a0:	10005b1e 	bne	r2,zero,81102610 <sense_log+0x434>
 	                    fVol = fRef*0.5*fVolDrop;
811024a4:	e13f0e17 	ldw	r4,-968(fp)
811024a8:	1109e3c0 	call	81109e3c <__extendsfdf2>
811024ac:	1011883a 	mov	r8,r2
811024b0:	1813883a 	mov	r9,r3
811024b4:	000d883a 	mov	r6,zero
811024b8:	01cff834 	movhi	r7,16352
811024bc:	4009883a 	mov	r4,r8
811024c0:	480b883a 	mov	r5,r9
811024c4:	11097240 	call	81109724 <__muldf3>
811024c8:	1009883a 	mov	r4,r2
811024cc:	180b883a 	mov	r5,r3
811024d0:	2021883a 	mov	r16,r4
811024d4:	2823883a 	mov	r17,r5
811024d8:	e13f0d17 	ldw	r4,-972(fp)
811024dc:	1109e3c0 	call	81109e3c <__extendsfdf2>
811024e0:	1009883a 	mov	r4,r2
811024e4:	180b883a 	mov	r5,r3
811024e8:	200d883a 	mov	r6,r4
811024ec:	280f883a 	mov	r7,r5
811024f0:	8009883a 	mov	r4,r16
811024f4:	880b883a 	mov	r5,r17
811024f8:	11097240 	call	81109724 <__muldf3>
811024fc:	1009883a 	mov	r4,r2
81102500:	180b883a 	mov	r5,r3
81102504:	2005883a 	mov	r2,r4
81102508:	2807883a 	mov	r3,r5
8110250c:	1009883a 	mov	r4,r2
81102510:	180b883a 	mov	r5,r3
81102514:	1109f4c0 	call	81109f4c <__truncdfsf2>
81102518:	1007883a 	mov	r3,r2
8110251c:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
81102520:	e0bf0c17 	ldw	r2,-976(fp)
81102524:	1085883a 	add	r2,r2,r2
81102528:	1085883a 	add	r2,r2,r2
8110252c:	e0ff0c04 	addi	r3,fp,-976
81102530:	1885883a 	add	r2,r3,r2
81102534:	10801604 	addi	r2,r2,88
81102538:	10c00017 	ldw	r3,0(r2)
8110253c:	180b883a 	mov	r5,r3
81102540:	e13f0d17 	ldw	r4,-972(fp)
81102544:	1108cd40 	call	81108cd4 <__divsf3>
81102548:	1007883a 	mov	r3,r2
8110254c:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
81102550:	e0bf0c17 	ldw	r2,-976(fp)
81102554:	1085883a 	add	r2,r2,r2
81102558:	1085883a 	add	r2,r2,r2
8110255c:	e0ff0c04 	addi	r3,fp,-976
81102560:	1885883a 	add	r2,r3,r2
81102564:	10802204 	addi	r2,r2,136
81102568:	10c00017 	ldw	r3,0(r2)
8110256c:	e17f1417 	ldw	r5,-944(fp)
81102570:	1809883a 	mov	r4,r3
81102574:	11091140 	call	81109114 <__mulsf3>
81102578:	1007883a 	mov	r3,r2
8110257c:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
81102580:	e0ff3a04 	addi	r3,fp,-792
81102584:	e0bf0c17 	ldw	r2,-976(fp)
81102588:	100491ba 	slli	r2,r2,6
8110258c:	18a9883a 	add	r20,r3,r2
81102590:	e0bf0c17 	ldw	r2,-976(fp)
81102594:	1085883a 	add	r2,r2,r2
81102598:	1085883a 	add	r2,r2,r2
8110259c:	e0ff0c04 	addi	r3,fp,-976
811025a0:	1885883a 	add	r2,r3,r2
811025a4:	10800a04 	addi	r2,r2,40
811025a8:	10800017 	ldw	r2,0(r2)
811025ac:	102b883a 	mov	r21,r2
811025b0:	e13f0d17 	ldw	r4,-972(fp)
811025b4:	1109e3c0 	call	81109e3c <__extendsfdf2>
811025b8:	1025883a 	mov	r18,r2
811025bc:	1827883a 	mov	r19,r3
811025c0:	e13f1417 	ldw	r4,-944(fp)
811025c4:	1109e3c0 	call	81109e3c <__extendsfdf2>
811025c8:	1021883a 	mov	r16,r2
811025cc:	1823883a 	mov	r17,r3
811025d0:	e13f1517 	ldw	r4,-940(fp)
811025d4:	1109e3c0 	call	81109e3c <__extendsfdf2>
811025d8:	1009883a 	mov	r4,r2
811025dc:	180b883a 	mov	r5,r3
811025e0:	d9000315 	stw	r4,12(sp)
811025e4:	d9400415 	stw	r5,16(sp)
811025e8:	dc000115 	stw	r16,4(sp)
811025ec:	dc400215 	stw	r17,8(sp)
811025f0:	dcc00015 	stw	r19,0(sp)
811025f4:	900f883a 	mov	r7,r18
811025f8:	a80d883a 	mov	r6,r21
811025fc:	a00b883a 	mov	r5,r20
81102600:	012044f4 	movhi	r4,33043
81102604:	210a8704 	addi	r4,r4,10780
81102608:	110b56c0 	call	8110b56c <printf>
8110260c:	00008106 	br	81102814 <sense_log+0x638>
 	                }else if (!SIG && MSB){
81102610:	e0bf1017 	ldw	r2,-960(fp)
81102614:	10005d1e 	bne	r2,zero,8110278c <sense_log+0x5b0>
81102618:	e0bf1117 	ldw	r2,-956(fp)
8110261c:	10005b26 	beq	r2,zero,8110278c <sense_log+0x5b0>
 	                    fVol = fRef*0.5*fVolDrop;
81102620:	e13f0e17 	ldw	r4,-968(fp)
81102624:	1109e3c0 	call	81109e3c <__extendsfdf2>
81102628:	1011883a 	mov	r8,r2
8110262c:	1813883a 	mov	r9,r3
81102630:	000d883a 	mov	r6,zero
81102634:	01cff834 	movhi	r7,16352
81102638:	4009883a 	mov	r4,r8
8110263c:	480b883a 	mov	r5,r9
81102640:	11097240 	call	81109724 <__muldf3>
81102644:	1009883a 	mov	r4,r2
81102648:	180b883a 	mov	r5,r3
8110264c:	2021883a 	mov	r16,r4
81102650:	2823883a 	mov	r17,r5
81102654:	e13f0d17 	ldw	r4,-972(fp)
81102658:	1109e3c0 	call	81109e3c <__extendsfdf2>
8110265c:	1009883a 	mov	r4,r2
81102660:	180b883a 	mov	r5,r3
81102664:	200d883a 	mov	r6,r4
81102668:	280f883a 	mov	r7,r5
8110266c:	8009883a 	mov	r4,r16
81102670:	880b883a 	mov	r5,r17
81102674:	11097240 	call	81109724 <__muldf3>
81102678:	1009883a 	mov	r4,r2
8110267c:	180b883a 	mov	r5,r3
81102680:	2005883a 	mov	r2,r4
81102684:	2807883a 	mov	r3,r5
81102688:	1009883a 	mov	r4,r2
8110268c:	180b883a 	mov	r5,r3
81102690:	1109f4c0 	call	81109f4c <__truncdfsf2>
81102694:	1007883a 	mov	r3,r2
81102698:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
8110269c:	e0bf0c17 	ldw	r2,-976(fp)
811026a0:	1085883a 	add	r2,r2,r2
811026a4:	1085883a 	add	r2,r2,r2
811026a8:	e0ff0c04 	addi	r3,fp,-976
811026ac:	1885883a 	add	r2,r3,r2
811026b0:	10801604 	addi	r2,r2,88
811026b4:	10c00017 	ldw	r3,0(r2)
811026b8:	180b883a 	mov	r5,r3
811026bc:	e13f0d17 	ldw	r4,-972(fp)
811026c0:	1108cd40 	call	81108cd4 <__divsf3>
811026c4:	1007883a 	mov	r3,r2
811026c8:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
811026cc:	e0bf0c17 	ldw	r2,-976(fp)
811026d0:	1085883a 	add	r2,r2,r2
811026d4:	1085883a 	add	r2,r2,r2
811026d8:	e0ff0c04 	addi	r3,fp,-976
811026dc:	1885883a 	add	r2,r3,r2
811026e0:	10802204 	addi	r2,r2,136
811026e4:	10c00017 	ldw	r3,0(r2)
811026e8:	e17f1417 	ldw	r5,-944(fp)
811026ec:	1809883a 	mov	r4,r3
811026f0:	11091140 	call	81109114 <__mulsf3>
811026f4:	1007883a 	mov	r3,r2
811026f8:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
811026fc:	e0ff3a04 	addi	r3,fp,-792
81102700:	e0bf0c17 	ldw	r2,-976(fp)
81102704:	100491ba 	slli	r2,r2,6
81102708:	18a9883a 	add	r20,r3,r2
8110270c:	e0bf0c17 	ldw	r2,-976(fp)
81102710:	1085883a 	add	r2,r2,r2
81102714:	1085883a 	add	r2,r2,r2
81102718:	e0ff0c04 	addi	r3,fp,-976
8110271c:	1885883a 	add	r2,r3,r2
81102720:	10800a04 	addi	r2,r2,40
81102724:	10800017 	ldw	r2,0(r2)
81102728:	102b883a 	mov	r21,r2
8110272c:	e13f0d17 	ldw	r4,-972(fp)
81102730:	1109e3c0 	call	81109e3c <__extendsfdf2>
81102734:	1025883a 	mov	r18,r2
81102738:	1827883a 	mov	r19,r3
8110273c:	e13f1417 	ldw	r4,-944(fp)
81102740:	1109e3c0 	call	81109e3c <__extendsfdf2>
81102744:	1021883a 	mov	r16,r2
81102748:	1823883a 	mov	r17,r3
8110274c:	e13f1517 	ldw	r4,-940(fp)
81102750:	1109e3c0 	call	81109e3c <__extendsfdf2>
81102754:	1009883a 	mov	r4,r2
81102758:	180b883a 	mov	r5,r3
8110275c:	d9000315 	stw	r4,12(sp)
81102760:	d9400415 	stw	r5,16(sp)
81102764:	dc000115 	stw	r16,4(sp)
81102768:	dc400215 	stw	r17,8(sp)
8110276c:	dcc00015 	stw	r19,0(sp)
81102770:	900f883a 	mov	r7,r18
81102774:	a80d883a 	mov	r6,r21
81102778:	a00b883a 	mov	r5,r20
8110277c:	012044f4 	movhi	r4,33043
81102780:	210a9704 	addi	r4,r4,10844
81102784:	110b56c0 	call	8110b56c <printf>
81102788:	00002206 	br	81102814 <sense_log+0x638>
 	                }else if (!SIG && !MSB){
8110278c:	e0bf1017 	ldw	r2,-960(fp)
81102790:	1000201e 	bne	r2,zero,81102814 <sense_log+0x638>
81102794:	e0bf1117 	ldw	r2,-956(fp)
81102798:	10001e1e 	bne	r2,zero,81102814 <sense_log+0x638>
 	                    fVol = -fRef*0.5;
8110279c:	e0bf0e17 	ldw	r2,-968(fp)
811027a0:	10a0003c 	xorhi	r2,r2,32768
811027a4:	014fc034 	movhi	r5,16128
811027a8:	1009883a 	mov	r4,r2
811027ac:	11091140 	call	81109114 <__mulsf3>
811027b0:	1007883a 	mov	r3,r2
811027b4:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
811027b8:	e0ff3a04 	addi	r3,fp,-792
811027bc:	e0bf0c17 	ldw	r2,-976(fp)
811027c0:	100491ba 	slli	r2,r2,6
811027c4:	18a1883a 	add	r16,r3,r2
811027c8:	e0bf0c17 	ldw	r2,-976(fp)
811027cc:	1085883a 	add	r2,r2,r2
811027d0:	1085883a 	add	r2,r2,r2
811027d4:	e0ff0c04 	addi	r3,fp,-976
811027d8:	1885883a 	add	r2,r3,r2
811027dc:	10800a04 	addi	r2,r2,40
811027e0:	10800017 	ldw	r2,0(r2)
811027e4:	1023883a 	mov	r17,r2
811027e8:	e13f1317 	ldw	r4,-948(fp)
811027ec:	1109e3c0 	call	81109e3c <__extendsfdf2>
811027f0:	1009883a 	mov	r4,r2
811027f4:	180b883a 	mov	r5,r3
811027f8:	d9400015 	stw	r5,0(sp)
811027fc:	200f883a 	mov	r7,r4
81102800:	880d883a 	mov	r6,r17
81102804:	800b883a 	mov	r5,r16
81102808:	012044f4 	movhi	r4,33043
8110280c:	210aa704 	addi	r4,r4,10908
81102810:	110b56c0 	call	8110b56c <printf>
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
 	        if (bSuccess){
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
81102814:	e0bf0c17 	ldw	r2,-976(fp)
81102818:	10800044 	addi	r2,r2,1
8110281c:	e0bf0c15 	stw	r2,-976(fp)
81102820:	e0bf0c17 	ldw	r2,-976(fp)
81102824:	10800308 	cmpgei	r2,r2,12
81102828:	1000021e 	bne	r2,zero,81102834 <sense_log+0x658>
8110282c:	e0bf0f17 	ldw	r2,-964(fp)
81102830:	103ecb1e 	bne	r2,zero,81102360 <__reset+0xfb0e2360>
 	                }else if (!SIG && !MSB){
 	                    fVol = -fRef*0.5;
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
81102834:	012044f4 	movhi	r4,33043
81102838:	210ab004 	addi	r4,r4,10944
8110283c:	110b6880 	call	8110b688 <puts>
 	        }else{
 	            printf("Error\r\n");
 	        }
 }
81102840:	00000306 	br	81102850 <sense_log+0x674>
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
 	        }else{
 	            printf("Error\r\n");
81102844:	012044f4 	movhi	r4,33043
81102848:	210ab104 	addi	r4,r4,10948
8110284c:	110b6880 	call	8110b688 <puts>
 	        }
 }
81102850:	0001883a 	nop
81102854:	e6fffa04 	addi	sp,fp,-24
81102858:	dfc00717 	ldw	ra,28(sp)
8110285c:	df000617 	ldw	fp,24(sp)
81102860:	dd400517 	ldw	r21,20(sp)
81102864:	dd000417 	ldw	r20,16(sp)
81102868:	dcc00317 	ldw	r19,12(sp)
8110286c:	dc800217 	ldw	r18,8(sp)
81102870:	dc400117 	ldw	r17,4(sp)
81102874:	dc000017 	ldw	r16,0(sp)
81102878:	dec00804 	addi	sp,sp,32
8110287c:	f800283a 	ret

81102880 <SPWC_WRITE_REG32>:
	alt_u32 ul_spwc_g_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_g_spacewire_link_control_status_register_value = 0x00000400;
	alt_u32 ul_spwc_h_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_h_spacewire_link_control_status_register_value = 0x00000400;

	void SPWC_WRITE_REG32(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81102880:	defffb04 	addi	sp,sp,-20
81102884:	df000415 	stw	fp,16(sp)
81102888:	df000404 	addi	fp,sp,16
8110288c:	2007883a 	mov	r3,r4
81102890:	2805883a 	mov	r2,r5
81102894:	e1bfff15 	stw	r6,-4(fp)
81102898:	e0fffd05 	stb	r3,-12(fp)
8110289c:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
811028a0:	00a04834 	movhi	r2,33056
811028a4:	108e0004 	addi	r2,r2,14336
811028a8:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
811028ac:	e0bffd07 	ldb	r2,-12(fp)
811028b0:	10bfefc4 	addi	r2,r2,-65
811028b4:	10c00228 	cmpgeui	r3,r2,8
811028b8:	18002e1e 	bne	r3,zero,81102974 <SPWC_WRITE_REG32+0xf4>
811028bc:	100690ba 	slli	r3,r2,2
811028c0:	00a04434 	movhi	r2,33040
811028c4:	108a3504 	addi	r2,r2,10452
811028c8:	1885883a 	add	r2,r3,r2
811028cc:	10800017 	ldw	r2,0(r2)
811028d0:	1000683a 	jmp	r2
811028d4:	811028f4 	orhi	r4,r16,16547
811028d8:	81102904 	addi	r4,r16,16548
811028dc:	81102914 	ori	r4,r16,16548
811028e0:	81102924 	muli	r4,r16,16548
811028e4:	81102934 	orhi	r4,r16,16548
811028e8:	81102944 	addi	r4,r16,16549
811028ec:	81102954 	ori	r4,r16,16549
811028f0:	81102964 	muli	r4,r16,16549
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
811028f4:	00a04834 	movhi	r2,33056
811028f8:	108e0004 	addi	r2,r2,14336
811028fc:	e0bffc15 	stw	r2,-16(fp)
			break;
81102900:	00001c06 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
81102904:	00a04834 	movhi	r2,33056
81102908:	108d0004 	addi	r2,r2,13312
8110290c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102910:	00001806 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
81102914:	00a04834 	movhi	r2,33056
81102918:	108c0004 	addi	r2,r2,12288
8110291c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102920:	00001406 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
81102924:	00a04834 	movhi	r2,33056
81102928:	108b0004 	addi	r2,r2,11264
8110292c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102930:	00001006 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81102934:	00a04834 	movhi	r2,33056
81102938:	108a0004 	addi	r2,r2,10240
8110293c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102940:	00000c06 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81102944:	00a04834 	movhi	r2,33056
81102948:	10890004 	addi	r2,r2,9216
8110294c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102950:	00000806 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81102954:	00a04834 	movhi	r2,33056
81102958:	10880004 	addi	r2,r2,8192
8110295c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102960:	00000406 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81102964:	00a04834 	movhi	r2,33056
81102968:	10870004 	addi	r2,r2,7168
8110296c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102970:	0001883a 	nop
		}
		*(pSpwcAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
81102974:	e0bffe03 	ldbu	r2,-8(fp)
81102978:	1085883a 	add	r2,r2,r2
8110297c:	1085883a 	add	r2,r2,r2
81102980:	1007883a 	mov	r3,r2
81102984:	e0bffc17 	ldw	r2,-16(fp)
81102988:	10c5883a 	add	r2,r2,r3
8110298c:	e0ffff17 	ldw	r3,-4(fp)
81102990:	10c00015 	stw	r3,0(r2)
	}
81102994:	0001883a 	nop
81102998:	e037883a 	mov	sp,fp
8110299c:	df000017 	ldw	fp,0(sp)
811029a0:	dec00104 	addi	sp,sp,4
811029a4:	f800283a 	ret

811029a8 <SPWC_READ_REG32>:

	alt_u32 SPWC_READ_REG32(char c_SpwID, alt_u8 uc_RegisterAddress){
811029a8:	defffb04 	addi	sp,sp,-20
811029ac:	df000415 	stw	fp,16(sp)
811029b0:	df000404 	addi	fp,sp,16
811029b4:	2007883a 	mov	r3,r4
811029b8:	2805883a 	mov	r2,r5
811029bc:	e0fffe05 	stb	r3,-8(fp)
811029c0:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
811029c4:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
811029c8:	00a04834 	movhi	r2,33056
811029cc:	108e0004 	addi	r2,r2,14336
811029d0:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
811029d4:	e0bffe07 	ldb	r2,-8(fp)
811029d8:	10bfefc4 	addi	r2,r2,-65
811029dc:	10c00228 	cmpgeui	r3,r2,8
811029e0:	18002e1e 	bne	r3,zero,81102a9c <SPWC_READ_REG32+0xf4>
811029e4:	100690ba 	slli	r3,r2,2
811029e8:	00a04434 	movhi	r2,33040
811029ec:	108a7f04 	addi	r2,r2,10748
811029f0:	1885883a 	add	r2,r3,r2
811029f4:	10800017 	ldw	r2,0(r2)
811029f8:	1000683a 	jmp	r2
811029fc:	81102a1c 	xori	r4,r16,16552
81102a00:	81102a2c 	andhi	r4,r16,16552
81102a04:	81102a3c 	xorhi	r4,r16,16552
81102a08:	81102a4c 	andi	r4,r16,16553
81102a0c:	81102a5c 	xori	r4,r16,16553
81102a10:	81102a6c 	andhi	r4,r16,16553
81102a14:	81102a7c 	xorhi	r4,r16,16553
81102a18:	81102a8c 	andi	r4,r16,16554
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81102a1c:	00a04834 	movhi	r2,33056
81102a20:	108e0004 	addi	r2,r2,14336
81102a24:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a28:	00001c06 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
81102a2c:	00a04834 	movhi	r2,33056
81102a30:	108d0004 	addi	r2,r2,13312
81102a34:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a38:	00001806 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
81102a3c:	00a04834 	movhi	r2,33056
81102a40:	108c0004 	addi	r2,r2,12288
81102a44:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a48:	00001406 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
81102a4c:	00a04834 	movhi	r2,33056
81102a50:	108b0004 	addi	r2,r2,11264
81102a54:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a58:	00001006 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81102a5c:	00a04834 	movhi	r2,33056
81102a60:	108a0004 	addi	r2,r2,10240
81102a64:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a68:	00000c06 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81102a6c:	00a04834 	movhi	r2,33056
81102a70:	10890004 	addi	r2,r2,9216
81102a74:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a78:	00000806 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81102a7c:	00a04834 	movhi	r2,33056
81102a80:	10880004 	addi	r2,r2,8192
81102a84:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a88:	00000406 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81102a8c:	00a04834 	movhi	r2,33056
81102a90:	10870004 	addi	r2,r2,7168
81102a94:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a98:	0001883a 	nop
		}
		RegisterValue = *(pSpwcAddr + (alt_u32)uc_RegisterAddress);
81102a9c:	e0bfff03 	ldbu	r2,-4(fp)
81102aa0:	1085883a 	add	r2,r2,r2
81102aa4:	1085883a 	add	r2,r2,r2
81102aa8:	1007883a 	mov	r3,r2
81102aac:	e0bffc17 	ldw	r2,-16(fp)
81102ab0:	10c5883a 	add	r2,r2,r3
81102ab4:	10800017 	ldw	r2,0(r2)
81102ab8:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81102abc:	e0bffd17 	ldw	r2,-12(fp)
	}
81102ac0:	e037883a 	mov	sp,fp
81102ac4:	df000017 	ldw	fp,0(sp)
81102ac8:	dec00104 	addi	sp,sp,4
81102acc:	f800283a 	ret

81102ad0 <b_SpaceWire_Interface_Write_Register>:

	bool b_SpaceWire_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81102ad0:	defffa04 	addi	sp,sp,-24
81102ad4:	dfc00515 	stw	ra,20(sp)
81102ad8:	df000415 	stw	fp,16(sp)
81102adc:	df000404 	addi	fp,sp,16
81102ae0:	2007883a 	mov	r3,r4
81102ae4:	2805883a 	mov	r2,r5
81102ae8:	e1bfff15 	stw	r6,-4(fp)
81102aec:	e0fffd05 	stb	r3,-12(fp)
81102af0:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81102af4:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
81102af8:	e0bffe03 	ldbu	r2,-8(fp)
81102afc:	108000e8 	cmpgeui	r2,r2,3
81102b00:	1000081e 	bne	r2,zero,81102b24 <b_SpaceWire_Interface_Write_Register+0x54>
			SPWC_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
81102b04:	e0bffd07 	ldb	r2,-12(fp)
81102b08:	e0fffe03 	ldbu	r3,-8(fp)
81102b0c:	e1bfff17 	ldw	r6,-4(fp)
81102b10:	180b883a 	mov	r5,r3
81102b14:	1009883a 	mov	r4,r2
81102b18:	11028800 	call	81102880 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
81102b1c:	00800044 	movi	r2,1
81102b20:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81102b24:	e0bffc17 	ldw	r2,-16(fp)
	}
81102b28:	e037883a 	mov	sp,fp
81102b2c:	dfc00117 	ldw	ra,4(sp)
81102b30:	df000017 	ldw	fp,0(sp)
81102b34:	dec00204 	addi	sp,sp,8
81102b38:	f800283a 	ret

81102b3c <ul_SpaceWire_Interface_Read_Register>:

	alt_u32 ul_SpaceWire_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
81102b3c:	defffb04 	addi	sp,sp,-20
81102b40:	dfc00415 	stw	ra,16(sp)
81102b44:	df000315 	stw	fp,12(sp)
81102b48:	df000304 	addi	fp,sp,12
81102b4c:	2007883a 	mov	r3,r4
81102b50:	2805883a 	mov	r2,r5
81102b54:	e0fffe05 	stb	r3,-8(fp)
81102b58:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81102b5c:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
81102b60:	e0bfff03 	ldbu	r2,-4(fp)
81102b64:	108000e8 	cmpgeui	r2,r2,3
81102b68:	1000061e 	bne	r2,zero,81102b84 <ul_SpaceWire_Interface_Read_Register+0x48>
			ul_RegisterValue = SPWC_READ_REG32(c_SpwID, uc_RegisterAddress);
81102b6c:	e0bffe07 	ldb	r2,-8(fp)
81102b70:	e0ffff03 	ldbu	r3,-4(fp)
81102b74:	180b883a 	mov	r5,r3
81102b78:	1009883a 	mov	r4,r2
81102b7c:	11029a80 	call	811029a8 <SPWC_READ_REG32>
81102b80:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
81102b84:	e0bffd17 	ldw	r2,-12(fp)
	}
81102b88:	e037883a 	mov	sp,fp
81102b8c:	dfc00117 	ldw	ra,4(sp)
81102b90:	df000017 	ldw	fp,0(sp)
81102b94:	dec00204 	addi	sp,sp,8
81102b98:	f800283a 	ret

81102b9c <b_SpaceWire_Interface_Enable_Control>:

	bool b_SpaceWire_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
81102b9c:	defff804 	addi	sp,sp,-32
81102ba0:	dfc00715 	stw	ra,28(sp)
81102ba4:	df000615 	stw	fp,24(sp)
81102ba8:	df000604 	addi	fp,sp,24
81102bac:	2007883a 	mov	r3,r4
81102bb0:	2805883a 	mov	r2,r5
81102bb4:	e1bfff15 	stw	r6,-4(fp)
81102bb8:	e0fffd05 	stb	r3,-12(fp)
81102bbc:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81102bc0:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_CODEC_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_RX_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_TX_ENABLE_CONTROL_BIT_MASK;
81102bc4:	0081c004 	movi	r2,1792
81102bc8:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102bcc:	d0a03f04 	addi	r2,gp,-32516
81102bd0:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81102bd4:	e0bffd07 	ldb	r2,-12(fp)
81102bd8:	10bfefc4 	addi	r2,r2,-65
81102bdc:	10c00228 	cmpgeui	r3,r2,8
81102be0:	1800361e 	bne	r3,zero,81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
81102be4:	100690ba 	slli	r3,r2,2
81102be8:	00a04434 	movhi	r2,33040
81102bec:	108aff04 	addi	r2,r2,11260
81102bf0:	1885883a 	add	r2,r3,r2
81102bf4:	10800017 	ldw	r2,0(r2)
81102bf8:	1000683a 	jmp	r2
81102bfc:	81102c1c 	xori	r4,r16,16560
81102c00:	81102c30 	cmpltui	r4,r16,16560
81102c04:	81102c44 	addi	r4,r16,16561
81102c08:	81102c58 	cmpnei	r4,r16,16561
81102c0c:	81102c6c 	andhi	r4,r16,16561
81102c10:	81102c80 	call	881102c8 <__reset+0x20f02c8>
81102c14:	81102c94 	ori	r4,r16,16562
81102c18:	81102ca8 	cmpgeui	r4,r16,16562
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102c1c:	d0a03f04 	addi	r2,gp,-32516
81102c20:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c24:	00800044 	movi	r2,1
81102c28:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c2c:	00002306 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81102c30:	d0a04004 	addi	r2,gp,-32512
81102c34:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c38:	00800044 	movi	r2,1
81102c3c:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c40:	00001e06 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81102c44:	d0a04104 	addi	r2,gp,-32508
81102c48:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c4c:	00800044 	movi	r2,1
81102c50:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c54:	00001906 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81102c58:	d0a04204 	addi	r2,gp,-32504
81102c5c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c60:	00800044 	movi	r2,1
81102c64:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c68:	00001406 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81102c6c:	d0a04304 	addi	r2,gp,-32500
81102c70:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c74:	00800044 	movi	r2,1
81102c78:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c7c:	00000f06 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81102c80:	d0a04404 	addi	r2,gp,-32496
81102c84:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c88:	00800044 	movi	r2,1
81102c8c:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c90:	00000a06 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81102c94:	d0a04504 	addi	r2,gp,-32492
81102c98:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c9c:	00800044 	movi	r2,1
81102ca0:	e0bffa15 	stw	r2,-24(fp)
			break;
81102ca4:	00000506 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81102ca8:	d0a04604 	addi	r2,gp,-32488
81102cac:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102cb0:	00800044 	movi	r2,1
81102cb4:	e0bffa15 	stw	r2,-24(fp)
			break;
81102cb8:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
81102cbc:	e0bffa17 	ldw	r2,-24(fp)
81102cc0:	10800058 	cmpnei	r2,r2,1
81102cc4:	10002b1e 	bne	r2,zero,81102d74 <b_SpaceWire_Interface_Enable_Control+0x1d8>
81102cc8:	e0ffff17 	ldw	r3,-4(fp)
81102ccc:	e0bffc17 	ldw	r2,-16(fp)
81102cd0:	1884703a 	and	r2,r3,r2
81102cd4:	10002726 	beq	r2,zero,81102d74 <b_SpaceWire_Interface_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
81102cd8:	e0bffe03 	ldbu	r2,-8(fp)
81102cdc:	10000326 	beq	r2,zero,81102cec <b_SpaceWire_Interface_Enable_Control+0x150>
81102ce0:	10800060 	cmpeqi	r2,r2,1
81102ce4:	1000121e 	bne	r2,zero,81102d30 <b_SpaceWire_Interface_Enable_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81102ce8:	00002306 	br	81102d78 <b_SpaceWire_Interface_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_EnableMask;
81102cec:	e0bffb17 	ldw	r2,-20(fp)
81102cf0:	10c00017 	ldw	r3,0(r2)
81102cf4:	e0bfff17 	ldw	r2,-4(fp)
81102cf8:	0084303a 	nor	r2,zero,r2
81102cfc:	1886703a 	and	r3,r3,r2
81102d00:	e0bffb17 	ldw	r2,-20(fp)
81102d04:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102d08:	e0fffd07 	ldb	r3,-12(fp)
81102d0c:	e0bffb17 	ldw	r2,-20(fp)
81102d10:	10800017 	ldw	r2,0(r2)
81102d14:	100d883a 	mov	r6,r2
81102d18:	000b883a 	mov	r5,zero
81102d1c:	1809883a 	mov	r4,r3
81102d20:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102d24:	00800044 	movi	r2,1
81102d28:	e0bffa15 	stw	r2,-24(fp)
				break;
81102d2c:	00001006 	br	81102d70 <b_SpaceWire_Interface_Enable_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_EnableMask;
81102d30:	e0bffb17 	ldw	r2,-20(fp)
81102d34:	10c00017 	ldw	r3,0(r2)
81102d38:	e0bfff17 	ldw	r2,-4(fp)
81102d3c:	1886b03a 	or	r3,r3,r2
81102d40:	e0bffb17 	ldw	r2,-20(fp)
81102d44:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102d48:	e0fffd07 	ldb	r3,-12(fp)
81102d4c:	e0bffb17 	ldw	r2,-20(fp)
81102d50:	10800017 	ldw	r2,0(r2)
81102d54:	100d883a 	mov	r6,r2
81102d58:	000b883a 	mov	r5,zero
81102d5c:	1809883a 	mov	r4,r3
81102d60:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102d64:	00800044 	movi	r2,1
81102d68:	e0bffa15 	stw	r2,-24(fp)
				break;
81102d6c:	0001883a 	nop

			}
		} else {
81102d70:	00000106 	br	81102d78 <b_SpaceWire_Interface_Enable_Control+0x1dc>
			bSuccess = FALSE;
81102d74:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81102d78:	e0bffa17 	ldw	r2,-24(fp)
	}
81102d7c:	e037883a 	mov	sp,fp
81102d80:	dfc00117 	ldw	ra,4(sp)
81102d84:	df000017 	ldw	fp,0(sp)
81102d88:	dec00204 	addi	sp,sp,8
81102d8c:	f800283a 	ret

81102d90 <b_SpaceWire_Interface_Mode_Control>:

	bool b_SpaceWire_Interface_Mode_Control(char c_SpwID, alt_u8 uc_InterfaceMode){
81102d90:	defffa04 	addi	sp,sp,-24
81102d94:	dfc00515 	stw	ra,20(sp)
81102d98:	df000415 	stw	fp,16(sp)
81102d9c:	df000404 	addi	fp,sp,16
81102da0:	2007883a 	mov	r3,r4
81102da4:	2805883a 	mov	r2,r5
81102da8:	e0fffe05 	stb	r3,-8(fp)
81102dac:	e0bfff05 	stb	r2,-4(fp)
		bool bSuccess = FALSE;
81102db0:	e03ffc15 	stw	zero,-16(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102db4:	d0a03f04 	addi	r2,gp,-32516
81102db8:	e0bffd15 	stw	r2,-12(fp)
		switch (c_SpwID) {
81102dbc:	e0bffe07 	ldb	r2,-8(fp)
81102dc0:	10bfefc4 	addi	r2,r2,-65
81102dc4:	10c00228 	cmpgeui	r3,r2,8
81102dc8:	1800361e 	bne	r3,zero,81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
81102dcc:	100690ba 	slli	r3,r2,2
81102dd0:	00a04434 	movhi	r2,33040
81102dd4:	108b7904 	addi	r2,r2,11748
81102dd8:	1885883a 	add	r2,r3,r2
81102ddc:	10800017 	ldw	r2,0(r2)
81102de0:	1000683a 	jmp	r2
81102de4:	81102e04 	addi	r4,r16,16568
81102de8:	81102e18 	cmpnei	r4,r16,16568
81102dec:	81102e2c 	andhi	r4,r16,16568
81102df0:	81102e40 	call	881102e4 <__reset+0x20f02e4>
81102df4:	81102e54 	ori	r4,r16,16569
81102df8:	81102e68 	cmpgeui	r4,r16,16569
81102dfc:	81102e7c 	xorhi	r4,r16,16569
81102e00:	81102e90 	cmplti	r4,r16,16570
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102e04:	d0a03f04 	addi	r2,gp,-32516
81102e08:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e0c:	00800044 	movi	r2,1
81102e10:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e14:	00002306 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81102e18:	d0a04004 	addi	r2,gp,-32512
81102e1c:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e20:	00800044 	movi	r2,1
81102e24:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e28:	00001e06 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81102e2c:	d0a04104 	addi	r2,gp,-32508
81102e30:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e34:	00800044 	movi	r2,1
81102e38:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e3c:	00001906 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81102e40:	d0a04204 	addi	r2,gp,-32504
81102e44:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e48:	00800044 	movi	r2,1
81102e4c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e50:	00001406 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81102e54:	d0a04304 	addi	r2,gp,-32500
81102e58:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e5c:	00800044 	movi	r2,1
81102e60:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e64:	00000f06 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81102e68:	d0a04404 	addi	r2,gp,-32496
81102e6c:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e70:	00800044 	movi	r2,1
81102e74:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e78:	00000a06 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81102e7c:	d0a04504 	addi	r2,gp,-32492
81102e80:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e84:	00800044 	movi	r2,1
81102e88:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e8c:	00000506 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81102e90:	d0a04604 	addi	r2,gp,-32488
81102e94:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e98:	00800044 	movi	r2,1
81102e9c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102ea0:	0001883a 	nop
		}
		if (bSuccess == TRUE){
81102ea4:	e0bffc17 	ldw	r2,-16(fp)
81102ea8:	10800058 	cmpnei	r2,r2,1
81102eac:	10007b1e 	bne	r2,zero,8110309c <b_SpaceWire_Interface_Mode_Control+0x30c>
			switch (uc_InterfaceMode){
81102eb0:	e0bfff03 	ldbu	r2,-4(fp)
81102eb4:	10c00060 	cmpeqi	r3,r2,1
81102eb8:	1800241e 	bne	r3,zero,81102f4c <b_SpaceWire_Interface_Mode_Control+0x1bc>
81102ebc:	10c00088 	cmpgei	r3,r2,2
81102ec0:	1800021e 	bne	r3,zero,81102ecc <b_SpaceWire_Interface_Mode_Control+0x13c>
81102ec4:	10000626 	beq	r2,zero,81102ee0 <b_SpaceWire_Interface_Mode_Control+0x150>
81102ec8:	00007206 	br	81103094 <b_SpaceWire_Interface_Mode_Control+0x304>
81102ecc:	10c000a0 	cmpeqi	r3,r2,2
81102ed0:	1800391e 	bne	r3,zero,81102fb8 <b_SpaceWire_Interface_Mode_Control+0x228>
81102ed4:	108000e0 	cmpeqi	r2,r2,3
81102ed8:	1000521e 	bne	r2,zero,81103024 <b_SpaceWire_Interface_Mode_Control+0x294>
81102edc:	00006d06 	br	81103094 <b_SpaceWire_Interface_Mode_Control+0x304>

				case SPWC_INTERFACE_BACKDOOR_MODE:
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK;
81102ee0:	e0bffd17 	ldw	r2,-12(fp)
81102ee4:	10800017 	ldw	r2,0(r2)
81102ee8:	10c40014 	ori	r3,r2,4096
81102eec:	e0bffd17 	ldw	r2,-12(fp)
81102ef0:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81102ef4:	e0bffd17 	ldw	r2,-12(fp)
81102ef8:	10c00017 	ldw	r3,0(r2)
81102efc:	00bdffc4 	movi	r2,-2049
81102f00:	1886703a 	and	r3,r3,r2
81102f04:	e0bffd17 	ldw	r2,-12(fp)
81102f08:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81102f0c:	e0bffd17 	ldw	r2,-12(fp)
81102f10:	10c00017 	ldw	r3,0(r2)
81102f14:	00bfdfc4 	movi	r2,-129
81102f18:	1886703a 	and	r3,r3,r2
81102f1c:	e0bffd17 	ldw	r2,-12(fp)
81102f20:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102f24:	e0fffe07 	ldb	r3,-8(fp)
81102f28:	e0bffd17 	ldw	r2,-12(fp)
81102f2c:	10800017 	ldw	r2,0(r2)
81102f30:	100d883a 	mov	r6,r2
81102f34:	000b883a 	mov	r5,zero
81102f38:	1809883a 	mov	r4,r3
81102f3c:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102f40:	00800044 	movi	r2,1
81102f44:	e0bffc15 	stw	r2,-16(fp)
				break;
81102f48:	00005506 	br	811030a0 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_EXTERNAL_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81102f4c:	e0bffd17 	ldw	r2,-12(fp)
81102f50:	10c00017 	ldw	r3,0(r2)
81102f54:	00bbffc4 	movi	r2,-4097
81102f58:	1886703a 	and	r3,r3,r2
81102f5c:	e0bffd17 	ldw	r2,-12(fp)
81102f60:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK;
81102f64:	e0bffd17 	ldw	r2,-12(fp)
81102f68:	10800017 	ldw	r2,0(r2)
81102f6c:	10c20014 	ori	r3,r2,2048
81102f70:	e0bffd17 	ldw	r2,-12(fp)
81102f74:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81102f78:	e0bffd17 	ldw	r2,-12(fp)
81102f7c:	10c00017 	ldw	r3,0(r2)
81102f80:	00bfdfc4 	movi	r2,-129
81102f84:	1886703a 	and	r3,r3,r2
81102f88:	e0bffd17 	ldw	r2,-12(fp)
81102f8c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102f90:	e0fffe07 	ldb	r3,-8(fp)
81102f94:	e0bffd17 	ldw	r2,-12(fp)
81102f98:	10800017 	ldw	r2,0(r2)
81102f9c:	100d883a 	mov	r6,r2
81102fa0:	000b883a 	mov	r5,zero
81102fa4:	1809883a 	mov	r4,r3
81102fa8:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102fac:	00800044 	movi	r2,1
81102fb0:	e0bffc15 	stw	r2,-16(fp)
				break;
81102fb4:	00003a06 	br	811030a0 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81102fb8:	e0bffd17 	ldw	r2,-12(fp)
81102fbc:	10c00017 	ldw	r3,0(r2)
81102fc0:	00bbffc4 	movi	r2,-4097
81102fc4:	1886703a 	and	r3,r3,r2
81102fc8:	e0bffd17 	ldw	r2,-12(fp)
81102fcc:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81102fd0:	e0bffd17 	ldw	r2,-12(fp)
81102fd4:	10c00017 	ldw	r3,0(r2)
81102fd8:	00bdffc4 	movi	r2,-2049
81102fdc:	1886703a 	and	r3,r3,r2
81102fe0:	e0bffd17 	ldw	r2,-12(fp)
81102fe4:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK;
81102fe8:	e0bffd17 	ldw	r2,-12(fp)
81102fec:	10800017 	ldw	r2,0(r2)
81102ff0:	10c02014 	ori	r3,r2,128
81102ff4:	e0bffd17 	ldw	r2,-12(fp)
81102ff8:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102ffc:	e0fffe07 	ldb	r3,-8(fp)
81103000:	e0bffd17 	ldw	r2,-12(fp)
81103004:	10800017 	ldw	r2,0(r2)
81103008:	100d883a 	mov	r6,r2
8110300c:	000b883a 	mov	r5,zero
81103010:	1809883a 	mov	r4,r3
81103014:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103018:	00800044 	movi	r2,1
8110301c:	e0bffc15 	stw	r2,-16(fp)
				break;
81103020:	00001f06 	br	811030a0 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_NORMAL_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81103024:	e0bffd17 	ldw	r2,-12(fp)
81103028:	10c00017 	ldw	r3,0(r2)
8110302c:	00bbffc4 	movi	r2,-4097
81103030:	1886703a 	and	r3,r3,r2
81103034:	e0bffd17 	ldw	r2,-12(fp)
81103038:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
8110303c:	e0bffd17 	ldw	r2,-12(fp)
81103040:	10c00017 	ldw	r3,0(r2)
81103044:	00bdffc4 	movi	r2,-2049
81103048:	1886703a 	and	r3,r3,r2
8110304c:	e0bffd17 	ldw	r2,-12(fp)
81103050:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103054:	e0bffd17 	ldw	r2,-12(fp)
81103058:	10c00017 	ldw	r3,0(r2)
8110305c:	00bfdfc4 	movi	r2,-129
81103060:	1886703a 	and	r3,r3,r2
81103064:	e0bffd17 	ldw	r2,-12(fp)
81103068:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
8110306c:	e0fffe07 	ldb	r3,-8(fp)
81103070:	e0bffd17 	ldw	r2,-12(fp)
81103074:	10800017 	ldw	r2,0(r2)
81103078:	100d883a 	mov	r6,r2
8110307c:	000b883a 	mov	r5,zero
81103080:	1809883a 	mov	r4,r3
81103084:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103088:	00800044 	movi	r2,1
8110308c:	e0bffc15 	stw	r2,-16(fp)
				break;
81103090:	00000306 	br	811030a0 <b_SpaceWire_Interface_Mode_Control+0x310>
				
				default:
					bSuccess = FALSE;
81103094:	e03ffc15 	stw	zero,-16(fp)
81103098:	00000106 	br	811030a0 <b_SpaceWire_Interface_Mode_Control+0x310>
	
			}
		} else {
			bSuccess = FALSE;
8110309c:	e03ffc15 	stw	zero,-16(fp)
		}

		return bSuccess;
811030a0:	e0bffc17 	ldw	r2,-16(fp)
	}
811030a4:	e037883a 	mov	sp,fp
811030a8:	dfc00117 	ldw	ra,4(sp)
811030ac:	df000017 	ldw	fp,0(sp)
811030b0:	dec00204 	addi	sp,sp,8
811030b4:	f800283a 	ret

811030b8 <v_SpaceWire_Interface_Force_Reset>:

	void v_SpaceWire_Interface_Force_Reset(char c_SpwID){
811030b8:	defffc04 	addi	sp,sp,-16
811030bc:	dfc00315 	stw	ra,12(sp)
811030c0:	df000215 	stw	fp,8(sp)
811030c4:	df000204 	addi	fp,sp,8
811030c8:	2005883a 	mov	r2,r4
811030cc:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
811030d0:	d0a03f04 	addi	r2,gp,-32516
811030d4:	e0bffe15 	stw	r2,-8(fp)
		switch (c_SpwID) {
811030d8:	e0bfff07 	ldb	r2,-4(fp)
811030dc:	10bfefc4 	addi	r2,r2,-65
811030e0:	10c00228 	cmpgeui	r3,r2,8
811030e4:	1800261e 	bne	r3,zero,81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
811030e8:	100690ba 	slli	r3,r2,2
811030ec:	00a04434 	movhi	r2,33040
811030f0:	108c4004 	addi	r2,r2,12544
811030f4:	1885883a 	add	r2,r3,r2
811030f8:	10800017 	ldw	r2,0(r2)
811030fc:	1000683a 	jmp	r2
81103100:	81103120 	cmpeqi	r4,r16,16580
81103104:	8110312c 	andhi	r4,r16,16580
81103108:	81103138 	rdprs	r4,r16,16580
8110310c:	81103144 	addi	r4,r16,16581
81103110:	81103150 	cmplti	r4,r16,16581
81103114:	8110315c 	xori	r4,r16,16581
81103118:	81103168 	cmpgeui	r4,r16,16581
8110311c:	81103174 	orhi	r4,r16,16581
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103120:	d0a03f04 	addi	r2,gp,-32516
81103124:	e0bffe15 	stw	r2,-8(fp)
			break;
81103128:	00001506 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
8110312c:	d0a04004 	addi	r2,gp,-32512
81103130:	e0bffe15 	stw	r2,-8(fp)
			break;
81103134:	00001206 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81103138:	d0a04104 	addi	r2,gp,-32508
8110313c:	e0bffe15 	stw	r2,-8(fp)
			break;
81103140:	00000f06 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81103144:	d0a04204 	addi	r2,gp,-32504
81103148:	e0bffe15 	stw	r2,-8(fp)
			break;
8110314c:	00000c06 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81103150:	d0a04304 	addi	r2,gp,-32500
81103154:	e0bffe15 	stw	r2,-8(fp)
			break;
81103158:	00000906 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
8110315c:	d0a04404 	addi	r2,gp,-32496
81103160:	e0bffe15 	stw	r2,-8(fp)
			break;
81103164:	00000606 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81103168:	d0a04504 	addi	r2,gp,-32492
8110316c:	e0bffe15 	stw	r2,-8(fp)
			break;
81103170:	00000306 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81103174:	d0a04604 	addi	r2,gp,-32488
81103178:	e0bffe15 	stw	r2,-8(fp)
			break;
8110317c:	0001883a 	nop
		}
		SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value | SPWC_CODEC_FORCE_RESET_CONTROL_BIT_MASK);
81103180:	e0ffff07 	ldb	r3,-4(fp)
81103184:	e0bffe17 	ldw	r2,-8(fp)
81103188:	10800017 	ldw	r2,0(r2)
8110318c:	10801014 	ori	r2,r2,64
81103190:	100d883a 	mov	r6,r2
81103194:	000b883a 	mov	r5,zero
81103198:	1809883a 	mov	r4,r3
8110319c:	11028800 	call	81102880 <SPWC_WRITE_REG32>

	}
811031a0:	0001883a 	nop
811031a4:	e037883a 	mov	sp,fp
811031a8:	dfc00117 	ldw	ra,4(sp)
811031ac:	df000017 	ldw	fp,0(sp)
811031b0:	dec00204 	addi	sp,sp,8
811031b4:	f800283a 	ret

811031b8 <v_SpaceWire_Interface_Interrupts_Enable_Control>:

	bool v_SpaceWire_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
811031b8:	defff804 	addi	sp,sp,-32
811031bc:	dfc00715 	stw	ra,28(sp)
811031c0:	df000615 	stw	fp,24(sp)
811031c4:	df000604 	addi	fp,sp,24
811031c8:	2007883a 	mov	r3,r4
811031cc:	2805883a 	mov	r2,r5
811031d0:	e1bfff15 	stw	r6,-4(fp)
811031d4:	e0fffd05 	stb	r3,-12(fp)
811031d8:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811031dc:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_ENABLE_BIT_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | SPWC_LINK_RUNNING_INTERRUPT_ENABLE_BIT_MASK;
811031e0:	00800e04 	movi	r2,56
811031e4:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
811031e8:	d0a03f04 	addi	r2,gp,-32516
811031ec:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811031f0:	e0bffd07 	ldb	r2,-12(fp)
811031f4:	10bfefc4 	addi	r2,r2,-65
811031f8:	10c00228 	cmpgeui	r3,r2,8
811031fc:	1800361e 	bne	r3,zero,811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
81103200:	100690ba 	slli	r3,r2,2
81103204:	00a04434 	movhi	r2,33040
81103208:	108c8604 	addi	r2,r2,12824
8110320c:	1885883a 	add	r2,r3,r2
81103210:	10800017 	ldw	r2,0(r2)
81103214:	1000683a 	jmp	r2
81103218:	81103238 	rdprs	r4,r16,16584
8110321c:	8110324c 	andi	r4,r16,16585
81103220:	81103260 	cmpeqi	r4,r16,16585
81103224:	81103274 	orhi	r4,r16,16585
81103228:	81103288 	cmpgei	r4,r16,16586
8110322c:	8110329c 	xori	r4,r16,16586
81103230:	811032b0 	cmpltui	r4,r16,16586
81103234:	811032c4 	addi	r4,r16,16587
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103238:	d0a03f04 	addi	r2,gp,-32516
8110323c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103240:	00800044 	movi	r2,1
81103244:	e0bffa15 	stw	r2,-24(fp)
			break;
81103248:	00002306 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
8110324c:	d0a04004 	addi	r2,gp,-32512
81103250:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103254:	00800044 	movi	r2,1
81103258:	e0bffa15 	stw	r2,-24(fp)
			break;
8110325c:	00001e06 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81103260:	d0a04104 	addi	r2,gp,-32508
81103264:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103268:	00800044 	movi	r2,1
8110326c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103270:	00001906 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81103274:	d0a04204 	addi	r2,gp,-32504
81103278:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110327c:	00800044 	movi	r2,1
81103280:	e0bffa15 	stw	r2,-24(fp)
			break;
81103284:	00001406 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81103288:	d0a04304 	addi	r2,gp,-32500
8110328c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103290:	00800044 	movi	r2,1
81103294:	e0bffa15 	stw	r2,-24(fp)
			break;
81103298:	00000f06 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
8110329c:	d0a04404 	addi	r2,gp,-32496
811032a0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811032a4:	00800044 	movi	r2,1
811032a8:	e0bffa15 	stw	r2,-24(fp)
			break;
811032ac:	00000a06 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
811032b0:	d0a04504 	addi	r2,gp,-32492
811032b4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811032b8:	00800044 	movi	r2,1
811032bc:	e0bffa15 	stw	r2,-24(fp)
			break;
811032c0:	00000506 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
811032c4:	d0a04604 	addi	r2,gp,-32488
811032c8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811032cc:	00800044 	movi	r2,1
811032d0:	e0bffa15 	stw	r2,-24(fp)
			break;
811032d4:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
811032d8:	e0bffa17 	ldw	r2,-24(fp)
811032dc:	10800058 	cmpnei	r2,r2,1
811032e0:	10002b1e 	bne	r2,zero,81103390 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d8>
811032e4:	e0ffff17 	ldw	r3,-4(fp)
811032e8:	e0bffc17 	ldw	r2,-16(fp)
811032ec:	1884703a 	and	r2,r3,r2
811032f0:	10002726 	beq	r2,zero,81103390 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
811032f4:	e0bffe03 	ldbu	r2,-8(fp)
811032f8:	10000326 	beq	r2,zero,81103308 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x150>
811032fc:	10800060 	cmpeqi	r2,r2,1
81103300:	1000121e 	bne	r2,zero,8110334c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81103304:	00002306 	br	81103394 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_InterruptMask;
81103308:	e0bffb17 	ldw	r2,-20(fp)
8110330c:	10c00017 	ldw	r3,0(r2)
81103310:	e0bfff17 	ldw	r2,-4(fp)
81103314:	0084303a 	nor	r2,zero,r2
81103318:	1886703a 	and	r3,r3,r2
8110331c:	e0bffb17 	ldw	r2,-20(fp)
81103320:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103324:	e0fffd07 	ldb	r3,-12(fp)
81103328:	e0bffb17 	ldw	r2,-20(fp)
8110332c:	10800017 	ldw	r2,0(r2)
81103330:	100d883a 	mov	r6,r2
81103334:	000b883a 	mov	r5,zero
81103338:	1809883a 	mov	r4,r3
8110333c:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103340:	00800044 	movi	r2,1
81103344:	e0bffa15 	stw	r2,-24(fp)
				break;
81103348:	00001006 	br	8110338c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_InterruptMask;
8110334c:	e0bffb17 	ldw	r2,-20(fp)
81103350:	10c00017 	ldw	r3,0(r2)
81103354:	e0bfff17 	ldw	r2,-4(fp)
81103358:	1886b03a 	or	r3,r3,r2
8110335c:	e0bffb17 	ldw	r2,-20(fp)
81103360:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103364:	e0fffd07 	ldb	r3,-12(fp)
81103368:	e0bffb17 	ldw	r2,-20(fp)
8110336c:	10800017 	ldw	r2,0(r2)
81103370:	100d883a 	mov	r6,r2
81103374:	000b883a 	mov	r5,zero
81103378:	1809883a 	mov	r4,r3
8110337c:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103380:	00800044 	movi	r2,1
81103384:	e0bffa15 	stw	r2,-24(fp)
				break;
81103388:	0001883a 	nop

			}
		} else {
8110338c:	00000106 	br	81103394 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>
			bSuccess = FALSE;
81103390:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103394:	e0bffa17 	ldw	r2,-24(fp)
	}
81103398:	e037883a 	mov	sp,fp
8110339c:	dfc00117 	ldw	ra,4(sp)
811033a0:	df000017 	ldw	fp,0(sp)
811033a4:	dec00204 	addi	sp,sp,8
811033a8:	f800283a 	ret

811033ac <ul_SpaceWire_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_SpaceWire_Interface_Interrupts_Flags_Read(char c_SpwID){
811033ac:	defffb04 	addi	sp,sp,-20
811033b0:	dfc00415 	stw	ra,16(sp)
811033b4:	df000315 	stw	fp,12(sp)
811033b8:	df000304 	addi	fp,sp,12
811033bc:	2005883a 	mov	r2,r4
811033c0:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
811033c4:	008001c4 	movi	r2,7
811033c8:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_interrupts_flags_value = SPWC_READ_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
811033cc:	e0bfff07 	ldb	r2,-4(fp)
811033d0:	000b883a 	mov	r5,zero
811033d4:	1009883a 	mov	r4,r2
811033d8:	11029a80 	call	811029a8 <SPWC_READ_REG32>
811033dc:	1007883a 	mov	r3,r2
811033e0:	e0bffd17 	ldw	r2,-12(fp)
811033e4:	1884703a 	and	r2,r3,r2
811033e8:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_interrupts_flags_value;
811033ec:	e0bffe17 	ldw	r2,-8(fp)
	}
811033f0:	e037883a 	mov	sp,fp
811033f4:	dfc00117 	ldw	ra,4(sp)
811033f8:	df000017 	ldw	fp,0(sp)
811033fc:	dec00204 	addi	sp,sp,8
81103400:	f800283a 	ret

81103404 <v_SpaceWire_Interface_Interrupts_Flags_Clear>:

	void v_SpaceWire_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
81103404:	defff904 	addi	sp,sp,-28
81103408:	dfc00615 	stw	ra,24(sp)
8110340c:	df000515 	stw	fp,20(sp)
81103410:	df000504 	addi	fp,sp,20
81103414:	2005883a 	mov	r2,r4
81103418:	e17fff15 	stw	r5,-4(fp)
8110341c:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
81103420:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
81103424:	008001c4 	movi	r2,7
81103428:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
8110342c:	d0a03f04 	addi	r2,gp,-32516
81103430:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81103434:	e0bffe07 	ldb	r2,-8(fp)
81103438:	10bfefc4 	addi	r2,r2,-65
8110343c:	10c00228 	cmpgeui	r3,r2,8
81103440:	1800361e 	bne	r3,zero,8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
81103444:	100690ba 	slli	r3,r2,2
81103448:	00a04434 	movhi	r2,33040
8110344c:	108d1704 	addi	r2,r2,13404
81103450:	1885883a 	add	r2,r3,r2
81103454:	10800017 	ldw	r2,0(r2)
81103458:	1000683a 	jmp	r2
8110345c:	8110347c 	xorhi	r4,r16,16593
81103460:	81103490 	cmplti	r4,r16,16594
81103464:	811034a4 	muli	r4,r16,16594
81103468:	811034b8 	rdprs	r4,r16,16594
8110346c:	811034cc 	andi	r4,r16,16595
81103470:	811034e0 	cmpeqi	r4,r16,16595
81103474:	811034f4 	orhi	r4,r16,16595
81103478:	81103508 	cmpgei	r4,r16,16596
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
8110347c:	d0a03f04 	addi	r2,gp,-32516
81103480:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103484:	00800044 	movi	r2,1
81103488:	e0bffb15 	stw	r2,-20(fp)
			break;
8110348c:	00002306 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81103490:	d0a04004 	addi	r2,gp,-32512
81103494:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103498:	00800044 	movi	r2,1
8110349c:	e0bffb15 	stw	r2,-20(fp)
			break;
811034a0:	00001e06 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
811034a4:	d0a04104 	addi	r2,gp,-32508
811034a8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811034ac:	00800044 	movi	r2,1
811034b0:	e0bffb15 	stw	r2,-20(fp)
			break;
811034b4:	00001906 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
811034b8:	d0a04204 	addi	r2,gp,-32504
811034bc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811034c0:	00800044 	movi	r2,1
811034c4:	e0bffb15 	stw	r2,-20(fp)
			break;
811034c8:	00001406 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
811034cc:	d0a04304 	addi	r2,gp,-32500
811034d0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811034d4:	00800044 	movi	r2,1
811034d8:	e0bffb15 	stw	r2,-20(fp)
			break;
811034dc:	00000f06 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
811034e0:	d0a04404 	addi	r2,gp,-32496
811034e4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811034e8:	00800044 	movi	r2,1
811034ec:	e0bffb15 	stw	r2,-20(fp)
			break;
811034f0:	00000a06 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
811034f4:	d0a04504 	addi	r2,gp,-32492
811034f8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811034fc:	00800044 	movi	r2,1
81103500:	e0bffb15 	stw	r2,-20(fp)
			break;
81103504:	00000506 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81103508:	d0a04604 	addi	r2,gp,-32488
8110350c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103510:	00800044 	movi	r2,1
81103514:	e0bffb15 	stw	r2,-20(fp)
			break;
81103518:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
8110351c:	e0bffb17 	ldw	r2,-20(fp)
81103520:	10800058 	cmpnei	r2,r2,1
81103524:	10000d1e 	bne	r2,zero,8110355c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x158>
81103528:	e0ffff17 	ldw	r3,-4(fp)
8110352c:	e0bffd17 	ldw	r2,-12(fp)
81103530:	1884703a 	and	r2,r3,r2
81103534:	10000926 	beq	r2,zero,8110355c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x158>
			SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_spwc_interface_control_status_register_value | ul_spwc_mask));
81103538:	e13ffe07 	ldb	r4,-8(fp)
8110353c:	e0bffc17 	ldw	r2,-16(fp)
81103540:	10c00017 	ldw	r3,0(r2)
81103544:	e0bffd17 	ldw	r2,-12(fp)
81103548:	1884b03a 	or	r2,r3,r2
8110354c:	100d883a 	mov	r6,r2
81103550:	000b883a 	mov	r5,zero
81103554:	11028800 	call	81102880 <SPWC_WRITE_REG32>
81103558:	00000106 	br	81103560 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x15c>
		} else {
			bSuccess = FALSE;
8110355c:	e03ffb15 	stw	zero,-20(fp)
		}
	}
81103560:	0001883a 	nop
81103564:	e037883a 	mov	sp,fp
81103568:	dfc00117 	ldw	ra,4(sp)
8110356c:	df000017 	ldw	fp,0(sp)
81103570:	dec00204 	addi	sp,sp,8
81103574:	f800283a 	ret

81103578 <v_SpaceWire_Interface_Link_Control>:

	bool v_SpaceWire_Interface_Link_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_ControlMask){
81103578:	defff804 	addi	sp,sp,-32
8110357c:	dfc00715 	stw	ra,28(sp)
81103580:	df000615 	stw	fp,24(sp)
81103584:	df000604 	addi	fp,sp,24
81103588:	2007883a 	mov	r3,r4
8110358c:	2805883a 	mov	r2,r5
81103590:	e1bfff15 	stw	r6,-4(fp)
81103594:	e0fffd05 	stb	r3,-12(fp)
81103598:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
8110359c:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_AUTOSTART_CONTROL_BIT_MASK | SPWC_LINK_START_CONTROL_BIT_MASK | SPWC_LINK_DISCONNECT_CONTROL_BIT_MASK;
811035a0:	0080e004 	movi	r2,896
811035a4:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
811035a8:	d0a00004 	addi	r2,gp,-32768
811035ac:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811035b0:	e0bffd07 	ldb	r2,-12(fp)
811035b4:	10bfefc4 	addi	r2,r2,-65
811035b8:	10c00228 	cmpgeui	r3,r2,8
811035bc:	1800361e 	bne	r3,zero,81103698 <v_SpaceWire_Interface_Link_Control+0x120>
811035c0:	100690ba 	slli	r3,r2,2
811035c4:	00a04434 	movhi	r2,33040
811035c8:	108d7604 	addi	r2,r2,13784
811035cc:	1885883a 	add	r2,r3,r2
811035d0:	10800017 	ldw	r2,0(r2)
811035d4:	1000683a 	jmp	r2
811035d8:	811035f8 	rdprs	r4,r16,16599
811035dc:	8110360c 	andi	r4,r16,16600
811035e0:	81103620 	cmpeqi	r4,r16,16600
811035e4:	81103634 	orhi	r4,r16,16600
811035e8:	81103648 	cmpgei	r4,r16,16601
811035ec:	8110365c 	xori	r4,r16,16601
811035f0:	81103670 	cmpltui	r4,r16,16601
811035f4:	81103684 	addi	r4,r16,16602
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
811035f8:	d0a00004 	addi	r2,gp,-32768
811035fc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103600:	00800044 	movi	r2,1
81103604:	e0bffa15 	stw	r2,-24(fp)
			break;
81103608:	00002306 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
8110360c:	d0a00104 	addi	r2,gp,-32764
81103610:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103614:	00800044 	movi	r2,1
81103618:	e0bffa15 	stw	r2,-24(fp)
			break;
8110361c:	00001e06 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
81103620:	d0a00204 	addi	r2,gp,-32760
81103624:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103628:	00800044 	movi	r2,1
8110362c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103630:	00001906 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81103634:	d0a00304 	addi	r2,gp,-32756
81103638:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110363c:	00800044 	movi	r2,1
81103640:	e0bffa15 	stw	r2,-24(fp)
			break;
81103644:	00001406 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
81103648:	d0a00404 	addi	r2,gp,-32752
8110364c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103650:	00800044 	movi	r2,1
81103654:	e0bffa15 	stw	r2,-24(fp)
			break;
81103658:	00000f06 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
8110365c:	d0a00504 	addi	r2,gp,-32748
81103660:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103664:	00800044 	movi	r2,1
81103668:	e0bffa15 	stw	r2,-24(fp)
			break;
8110366c:	00000a06 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
81103670:	d0a00604 	addi	r2,gp,-32744
81103674:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103678:	00800044 	movi	r2,1
8110367c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103680:	00000506 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
81103684:	d0a00704 	addi	r2,gp,-32740
81103688:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110368c:	00800044 	movi	r2,1
81103690:	e0bffa15 	stw	r2,-24(fp)
			break;
81103694:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
81103698:	e0bffa17 	ldw	r2,-24(fp)
8110369c:	10800058 	cmpnei	r2,r2,1
811036a0:	10002b1e 	bne	r2,zero,81103750 <v_SpaceWire_Interface_Link_Control+0x1d8>
811036a4:	e0ffff17 	ldw	r3,-4(fp)
811036a8:	e0bffc17 	ldw	r2,-16(fp)
811036ac:	1884703a 	and	r2,r3,r2
811036b0:	10002726 	beq	r2,zero,81103750 <v_SpaceWire_Interface_Link_Control+0x1d8>
			switch (uc_RegisterOperation){
811036b4:	e0bffe03 	ldbu	r2,-8(fp)
811036b8:	10000326 	beq	r2,zero,811036c8 <v_SpaceWire_Interface_Link_Control+0x150>
811036bc:	10800060 	cmpeqi	r2,r2,1
811036c0:	1000121e 	bne	r2,zero,8110370c <v_SpaceWire_Interface_Link_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
811036c4:	00002306 	br	81103754 <v_SpaceWire_Interface_Link_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_spacewire_link_control_status_register_value &= ~ul_ControlMask;
811036c8:	e0bffb17 	ldw	r2,-20(fp)
811036cc:	10c00017 	ldw	r3,0(r2)
811036d0:	e0bfff17 	ldw	r2,-4(fp)
811036d4:	0084303a 	nor	r2,zero,r2
811036d8:	1886703a 	and	r3,r3,r2
811036dc:	e0bffb17 	ldw	r2,-20(fp)
811036e0:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
811036e4:	e0fffd07 	ldb	r3,-12(fp)
811036e8:	e0bffb17 	ldw	r2,-20(fp)
811036ec:	10800017 	ldw	r2,0(r2)
811036f0:	100d883a 	mov	r6,r2
811036f4:	01400044 	movi	r5,1
811036f8:	1809883a 	mov	r4,r3
811036fc:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103700:	00800044 	movi	r2,1
81103704:	e0bffa15 	stw	r2,-24(fp)
				break;
81103708:	00001006 	br	8110374c <v_SpaceWire_Interface_Link_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_spacewire_link_control_status_register_value |= ul_ControlMask;
8110370c:	e0bffb17 	ldw	r2,-20(fp)
81103710:	10c00017 	ldw	r3,0(r2)
81103714:	e0bfff17 	ldw	r2,-4(fp)
81103718:	1886b03a 	or	r3,r3,r2
8110371c:	e0bffb17 	ldw	r2,-20(fp)
81103720:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81103724:	e0fffd07 	ldb	r3,-12(fp)
81103728:	e0bffb17 	ldw	r2,-20(fp)
8110372c:	10800017 	ldw	r2,0(r2)
81103730:	100d883a 	mov	r6,r2
81103734:	01400044 	movi	r5,1
81103738:	1809883a 	mov	r4,r3
8110373c:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103740:	00800044 	movi	r2,1
81103744:	e0bffa15 	stw	r2,-24(fp)
				break;
81103748:	0001883a 	nop

			}
		} else {
8110374c:	00000106 	br	81103754 <v_SpaceWire_Interface_Link_Control+0x1dc>
			bSuccess = FALSE;
81103750:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103754:	e0bffa17 	ldw	r2,-24(fp)
	}
81103758:	e037883a 	mov	sp,fp
8110375c:	dfc00117 	ldw	ra,4(sp)
81103760:	df000017 	ldw	fp,0(sp)
81103764:	dec00204 	addi	sp,sp,8
81103768:	f800283a 	ret

8110376c <ul_SpaceWire_Interface_Link_Error_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Error_Read(char c_SpwID){
8110376c:	defffb04 	addi	sp,sp,-20
81103770:	dfc00415 	stw	ra,16(sp)
81103774:	df000315 	stw	fp,12(sp)
81103778:	df000304 	addi	fp,sp,12
8110377c:	2005883a 	mov	r2,r4
81103780:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_DISCONNECT_ERROR_BIT_MASK | SPWC_LINK_PARITY_ERROR_BIT_MASK | SPWC_LINK_ESCAPE_ERROR_BIT_MASK | SPWC_LINK_CREDIT_ERROR_BIT_MASK;
81103784:	00801e04 	movi	r2,120
81103788:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_error_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
8110378c:	e0bfff07 	ldb	r2,-4(fp)
81103790:	01400044 	movi	r5,1
81103794:	1009883a 	mov	r4,r2
81103798:	11029a80 	call	811029a8 <SPWC_READ_REG32>
8110379c:	1007883a 	mov	r3,r2
811037a0:	e0bffd17 	ldw	r2,-12(fp)
811037a4:	1884703a 	and	r2,r3,r2
811037a8:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_error_value;
811037ac:	e0bffe17 	ldw	r2,-8(fp)
	}
811037b0:	e037883a 	mov	sp,fp
811037b4:	dfc00117 	ldw	ra,4(sp)
811037b8:	df000017 	ldw	fp,0(sp)
811037bc:	dec00204 	addi	sp,sp,8
811037c0:	f800283a 	ret

811037c4 <ul_SpaceWire_Interface_Link_Status_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Status_Read(char c_SpwID){
811037c4:	defffb04 	addi	sp,sp,-20
811037c8:	dfc00415 	stw	ra,16(sp)
811037cc:	df000315 	stw	fp,12(sp)
811037d0:	df000304 	addi	fp,sp,12
811037d4:	2005883a 	mov	r2,r4
811037d8:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_STARTED_STATUS_BIT_MASK | SPWC_LINK_CONNECTING_STATUS_BIT_MASK | SPWC_LINK_RUNNING_STATUS_BIT_MASK;
811037dc:	008001c4 	movi	r2,7
811037e0:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_status_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
811037e4:	e0bfff07 	ldb	r2,-4(fp)
811037e8:	01400044 	movi	r5,1
811037ec:	1009883a 	mov	r4,r2
811037f0:	11029a80 	call	811029a8 <SPWC_READ_REG32>
811037f4:	1007883a 	mov	r3,r2
811037f8:	e0bffd17 	ldw	r2,-12(fp)
811037fc:	1884703a 	and	r2,r3,r2
81103800:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_status_value;
81103804:	e0bffe17 	ldw	r2,-8(fp)
	}
81103808:	e037883a 	mov	sp,fp
8110380c:	dfc00117 	ldw	ra,4(sp)
81103810:	df000017 	ldw	fp,0(sp)
81103814:	dec00204 	addi	sp,sp,8
81103818:	f800283a 	ret

8110381c <v_SpaceWire_Interface_Send_TimeCode>:

	void v_SpaceWire_Interface_Send_TimeCode(char c_SpwID, alt_u8 TimeCode){
8110381c:	defffb04 	addi	sp,sp,-20
81103820:	dfc00415 	stw	ra,16(sp)
81103824:	df000315 	stw	fp,12(sp)
81103828:	df000304 	addi	fp,sp,12
8110382c:	2007883a 	mov	r3,r4
81103830:	2805883a 	mov	r2,r5
81103834:	e0fffe05 	stb	r3,-8(fp)
81103838:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = (((alt_u32)TimeCode) << 1) | SPWC_TX_TIMECODE_CONTROL_BIT_MASK;
8110383c:	e0bfff03 	ldbu	r2,-4(fp)
81103840:	1085883a 	add	r2,r2,r2
81103844:	10800054 	ori	r2,r2,1
81103848:	e0bffd15 	stw	r2,-12(fp)
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, ul_spwc_mask);
8110384c:	e0bffe07 	ldb	r2,-8(fp)
81103850:	e1bffd17 	ldw	r6,-12(fp)
81103854:	01400084 	movi	r5,2
81103858:	1009883a 	mov	r4,r2
8110385c:	11028800 	call	81102880 <SPWC_WRITE_REG32>

	}
81103860:	0001883a 	nop
81103864:	e037883a 	mov	sp,fp
81103868:	dfc00117 	ldw	ra,4(sp)
8110386c:	df000017 	ldw	fp,0(sp)
81103870:	dec00204 	addi	sp,sp,8
81103874:	f800283a 	ret

81103878 <b_SpaceWire_Interface_TimeCode_Arrived>:

	bool b_SpaceWire_Interface_TimeCode_Arrived(char c_SpwID){
81103878:	defffc04 	addi	sp,sp,-16
8110387c:	dfc00315 	stw	ra,12(sp)
81103880:	df000215 	stw	fp,8(sp)
81103884:	df000204 	addi	fp,sp,8
81103888:	2005883a 	mov	r2,r4
8110388c:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_timecode_arrived = FALSE;
81103890:	e03ffe15 	stw	zero,-8(fp)
		
		if (SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS) & SPWC_RX_TIMECODE_STATUS_BIT_MASK) {
81103894:	e0bfff07 	ldb	r2,-4(fp)
81103898:	01400084 	movi	r5,2
8110389c:	1009883a 	mov	r4,r2
811038a0:	11029a80 	call	811029a8 <SPWC_READ_REG32>
811038a4:	1080006c 	andhi	r2,r2,1
811038a8:	10000226 	beq	r2,zero,811038b4 <b_SpaceWire_Interface_TimeCode_Arrived+0x3c>
			b_timecode_arrived = TRUE;
811038ac:	00800044 	movi	r2,1
811038b0:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_timecode_arrived;
811038b4:	e0bffe17 	ldw	r2,-8(fp)
	}
811038b8:	e037883a 	mov	sp,fp
811038bc:	dfc00117 	ldw	ra,4(sp)
811038c0:	df000017 	ldw	fp,0(sp)
811038c4:	dec00204 	addi	sp,sp,8
811038c8:	f800283a 	ret

811038cc <uc_SpaceWire_Interface_Get_TimeCode>:
	
	alt_u8 uc_SpaceWire_Interface_Get_TimeCode(char c_SpwID){
811038cc:	defffb04 	addi	sp,sp,-20
811038d0:	dfc00415 	stw	ra,16(sp)
811038d4:	df000315 	stw	fp,12(sp)
811038d8:	df000304 	addi	fp,sp,12
811038dc:	2005883a 	mov	r2,r4
811038e0:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_timecode_register = SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS);
811038e4:	e0bfff07 	ldb	r2,-4(fp)
811038e8:	01400084 	movi	r5,2
811038ec:	1009883a 	mov	r4,r2
811038f0:	11029a80 	call	811029a8 <SPWC_READ_REG32>
811038f4:	e0bffd15 	stw	r2,-12(fp)
		
		alt_u8 uc_timecode_value = (alt_u8)((ul_timecode_register & (SPWC_RX_TIMECODE_CONTROL_BITS_MASK | SPWC_RX_TIMECODE_COUNTER_VALUE_MASK)) >> 17);
811038f8:	e0bffd17 	ldw	r2,-12(fp)
811038fc:	10807fac 	andhi	r2,r2,510
81103900:	1004d47a 	srli	r2,r2,17
81103904:	e0bffe05 	stb	r2,-8(fp)
	
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, (ul_timecode_register | SPWC_RX_TIMECODE_STATUS_BIT_MASK));
81103908:	e0ffff07 	ldb	r3,-4(fp)
8110390c:	e0bffd17 	ldw	r2,-12(fp)
81103910:	10800074 	orhi	r2,r2,1
81103914:	100d883a 	mov	r6,r2
81103918:	01400084 	movi	r5,2
8110391c:	1809883a 	mov	r4,r3
81103920:	11028800 	call	81102880 <SPWC_WRITE_REG32>

		return uc_timecode_value;
81103924:	e0bffe03 	ldbu	r2,-8(fp)
	}
81103928:	e037883a 	mov	sp,fp
8110392c:	dfc00117 	ldw	ra,4(sp)
81103930:	df000017 	ldw	fp,0(sp)
81103934:	dec00204 	addi	sp,sp,8
81103938:	f800283a 	ret

8110393c <uc_SpaceWire_Interface_Get_TX_Div>:

	alt_u8 uc_SpaceWire_Interface_Get_TX_Div(char c_SpwID){
8110393c:	defffb04 	addi	sp,sp,-20
81103940:	dfc00415 	stw	ra,16(sp)
81103944:	df000315 	stw	fp,12(sp)
81103948:	df000304 	addi	fp,sp,12
8110394c:	2005883a 	mov	r2,r4
81103950:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
81103954:	00800134 	movhi	r2,4
81103958:	10bf0004 	addi	r2,r2,-1024
8110395c:	e0bffd15 	stw	r2,-12(fp)
		alt_u8 uc_txdiv_value = (alt_u8)((SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask) >> 10);
81103960:	e0bfff07 	ldb	r2,-4(fp)
81103964:	01400044 	movi	r5,1
81103968:	1009883a 	mov	r4,r2
8110396c:	11029a80 	call	811029a8 <SPWC_READ_REG32>
81103970:	1007883a 	mov	r3,r2
81103974:	e0bffd17 	ldw	r2,-12(fp)
81103978:	1884703a 	and	r2,r3,r2
8110397c:	1004d2ba 	srli	r2,r2,10
81103980:	e0bffe05 	stb	r2,-8(fp)

		return uc_txdiv_value;
81103984:	e0bffe03 	ldbu	r2,-8(fp)
	}
81103988:	e037883a 	mov	sp,fp
8110398c:	dfc00117 	ldw	ra,4(sp)
81103990:	df000017 	ldw	fp,0(sp)
81103994:	dec00204 	addi	sp,sp,8
81103998:	f800283a 	ret

8110399c <b_SpaceWire_Interface_Set_TX_Div>:

	bool b_SpaceWire_Interface_Set_TX_Div(char c_SpwID, alt_u8 uc_TxDiv){
8110399c:	defff804 	addi	sp,sp,-32
811039a0:	dfc00715 	stw	ra,28(sp)
811039a4:	df000615 	stw	fp,24(sp)
811039a8:	df000604 	addi	fp,sp,24
811039ac:	2007883a 	mov	r3,r4
811039b0:	2805883a 	mov	r2,r5
811039b4:	e0fffe05 	stb	r3,-8(fp)
811039b8:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
811039bc:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
811039c0:	00800134 	movhi	r2,4
811039c4:	10bf0004 	addi	r2,r2,-1024
811039c8:	e0bffc15 	stw	r2,-16(fp)
		const alt_u32 ul_txdiv_mask = (alt_u32)(uc_TxDiv << 10);
811039cc:	e0bfff03 	ldbu	r2,-4(fp)
811039d0:	100492ba 	slli	r2,r2,10
811039d4:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
811039d8:	d0a00004 	addi	r2,gp,-32768
811039dc:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811039e0:	e0bffe07 	ldb	r2,-8(fp)
811039e4:	10bfefc4 	addi	r2,r2,-65
811039e8:	10c00228 	cmpgeui	r3,r2,8
811039ec:	1800361e 	bne	r3,zero,81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
811039f0:	100690ba 	slli	r3,r2,2
811039f4:	00a04434 	movhi	r2,33040
811039f8:	108e8204 	addi	r2,r2,14856
811039fc:	1885883a 	add	r2,r3,r2
81103a00:	10800017 	ldw	r2,0(r2)
81103a04:	1000683a 	jmp	r2
81103a08:	81103a28 	cmpgeui	r4,r16,16616
81103a0c:	81103a3c 	xorhi	r4,r16,16616
81103a10:	81103a50 	cmplti	r4,r16,16617
81103a14:	81103a64 	muli	r4,r16,16617
81103a18:	81103a78 	rdprs	r4,r16,16617
81103a1c:	81103a8c 	andi	r4,r16,16618
81103a20:	81103aa0 	cmpeqi	r4,r16,16618
81103a24:	81103ab4 	orhi	r4,r16,16618
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81103a28:	d0a00004 	addi	r2,gp,-32768
81103a2c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a30:	00800044 	movi	r2,1
81103a34:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a38:	00002306 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
81103a3c:	d0a00104 	addi	r2,gp,-32764
81103a40:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a44:	00800044 	movi	r2,1
81103a48:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a4c:	00001e06 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
81103a50:	d0a00204 	addi	r2,gp,-32760
81103a54:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a58:	00800044 	movi	r2,1
81103a5c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a60:	00001906 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81103a64:	d0a00304 	addi	r2,gp,-32756
81103a68:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a6c:	00800044 	movi	r2,1
81103a70:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a74:	00001406 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
81103a78:	d0a00404 	addi	r2,gp,-32752
81103a7c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a80:	00800044 	movi	r2,1
81103a84:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a88:	00000f06 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
81103a8c:	d0a00504 	addi	r2,gp,-32748
81103a90:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a94:	00800044 	movi	r2,1
81103a98:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a9c:	00000a06 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
81103aa0:	d0a00604 	addi	r2,gp,-32744
81103aa4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103aa8:	00800044 	movi	r2,1
81103aac:	e0bffa15 	stw	r2,-24(fp)
			break;
81103ab0:	00000506 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
81103ab4:	d0a00704 	addi	r2,gp,-32740
81103ab8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103abc:	00800044 	movi	r2,1
81103ac0:	e0bffa15 	stw	r2,-24(fp)
			break;
81103ac4:	0001883a 	nop
		}
		if (bSuccess == TRUE){
81103ac8:	e0bffa17 	ldw	r2,-24(fp)
81103acc:	10800058 	cmpnei	r2,r2,1
81103ad0:	1000171e 	bne	r2,zero,81103b30 <b_SpaceWire_Interface_Set_TX_Div+0x194>
			*ul_spwc_spacewire_link_control_status_register_value &= ~(ul_spwc_mask);
81103ad4:	e0bffb17 	ldw	r2,-20(fp)
81103ad8:	10c00017 	ldw	r3,0(r2)
81103adc:	e0bffc17 	ldw	r2,-16(fp)
81103ae0:	0084303a 	nor	r2,zero,r2
81103ae4:	1886703a 	and	r3,r3,r2
81103ae8:	e0bffb17 	ldw	r2,-20(fp)
81103aec:	10c00015 	stw	r3,0(r2)
			*ul_spwc_spacewire_link_control_status_register_value |= ul_txdiv_mask;
81103af0:	e0bffb17 	ldw	r2,-20(fp)
81103af4:	10c00017 	ldw	r3,0(r2)
81103af8:	e0bffd17 	ldw	r2,-12(fp)
81103afc:	1886b03a 	or	r3,r3,r2
81103b00:	e0bffb17 	ldw	r2,-20(fp)
81103b04:	10c00015 	stw	r3,0(r2)
			SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81103b08:	e0fffe07 	ldb	r3,-8(fp)
81103b0c:	e0bffb17 	ldw	r2,-20(fp)
81103b10:	10800017 	ldw	r2,0(r2)
81103b14:	100d883a 	mov	r6,r2
81103b18:	01400044 	movi	r5,1
81103b1c:	1809883a 	mov	r4,r3
81103b20:	11028800 	call	81102880 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
81103b24:	00800044 	movi	r2,1
81103b28:	e0bffa15 	stw	r2,-24(fp)
81103b2c:	00000106 	br	81103b34 <b_SpaceWire_Interface_Set_TX_Div+0x198>
		} else {
			bSuccess = FALSE;
81103b30:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103b34:	e0bffa17 	ldw	r2,-24(fp)
	}
81103b38:	e037883a 	mov	sp,fp
81103b3c:	dfc00117 	ldw	ra,4(sp)
81103b40:	df000017 	ldw	fp,0(sp)
81103b44:	dec00204 	addi	sp,sp,8
81103b48:	f800283a 	ret

81103b4c <b_SpaceWire_Interface_Write_TX_Data>:

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){
81103b4c:	defffa04 	addi	sp,sp,-24
81103b50:	dfc00515 	stw	ra,20(sp)
81103b54:	df000415 	stw	fp,16(sp)
81103b58:	df000404 	addi	fp,sp,16
81103b5c:	2807883a 	mov	r3,r5
81103b60:	3005883a 	mov	r2,r6
81103b64:	e13ffd05 	stb	r4,-12(fp)
81103b68:	e0fffe05 	stb	r3,-8(fp)
81103b6c:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81103b70:	e03ffc15 	stw	zero,-16(fp)
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
81103b74:	e0bffd07 	ldb	r2,-12(fp)
81103b78:	014000c4 	movi	r5,3
81103b7c:	1009883a 	mov	r4,r2
81103b80:	11029a80 	call	811029a8 <SPWC_READ_REG32>
81103b84:	1081000c 	andi	r2,r2,1024
81103b88:	10000c26 	beq	r2,zero,81103bbc <b_SpaceWire_Interface_Write_TX_Data+0x70>
			SPWC_WRITE_REG32(c_SpwID,
81103b8c:	e13ffd07 	ldb	r4,-12(fp)
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
81103b90:	e0bffe03 	ldbu	r2,-8(fp)
81103b94:	1080004c 	andi	r2,r2,1
81103b98:	1004923a 	slli	r2,r2,8
81103b9c:	10c08014 	ori	r3,r2,512
81103ba0:	e0bfff03 	ldbu	r2,-4(fp)
81103ba4:	1884b03a 	or	r2,r3,r2

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){

		bool bSuccess = FALSE;
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
			SPWC_WRITE_REG32(c_SpwID,
81103ba8:	100d883a 	mov	r6,r2
81103bac:	014000c4 	movi	r5,3
81103bb0:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
			bSuccess = TRUE;
81103bb4:	00800044 	movi	r2,1
81103bb8:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81103bbc:	e0bffc17 	ldw	r2,-16(fp)
	}
81103bc0:	e037883a 	mov	sp,fp
81103bc4:	dfc00117 	ldw	ra,4(sp)
81103bc8:	df000017 	ldw	fp,0(sp)
81103bcc:	dec00204 	addi	sp,sp,8
81103bd0:	f800283a 	ret

81103bd4 <b_SpaceWire_Interface_Send_SpaceWire_Data>:

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
81103bd4:	defff904 	addi	sp,sp,-28
81103bd8:	dfc00615 	stw	ra,24(sp)
81103bdc:	df000515 	stw	fp,20(sp)
81103be0:	df000504 	addi	fp,sp,20
81103be4:	2007883a 	mov	r3,r4
81103be8:	e17ffe15 	stw	r5,-8(fp)
81103bec:	3005883a 	mov	r2,r6
81103bf0:	e0fffd05 	stb	r3,-12(fp)
81103bf4:	e0bfff0d 	sth	r2,-4(fp)
		bool bSuccess = FALSE;
81103bf8:	e03ffb15 	stw	zero,-20(fp)

		alt_u16 cnt = 0;
81103bfc:	e03ffc0d 	sth	zero,-16(fp)
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
81103c00:	00000306 	br	81103c10 <b_SpaceWire_Interface_Send_SpaceWire_Data+0x3c>
			cnt++;
81103c04:	e0bffc0b 	ldhu	r2,-16(fp)
81103c08:	10800044 	addi	r2,r2,1
81103c0c:	e0bffc0d 	sth	r2,-16(fp)

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
		bool bSuccess = FALSE;

		alt_u16 cnt = 0;
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
81103c10:	e13ffd07 	ldb	r4,-12(fp)
81103c14:	e0bffc0b 	ldhu	r2,-16(fp)
81103c18:	e0fffe17 	ldw	r3,-8(fp)
81103c1c:	1885883a 	add	r2,r3,r2
81103c20:	10800003 	ldbu	r2,0(r2)
81103c24:	10803fcc 	andi	r2,r2,255
81103c28:	100d883a 	mov	r6,r2
81103c2c:	000b883a 	mov	r5,zero
81103c30:	1103b4c0 	call	81103b4c <b_SpaceWire_Interface_Write_TX_Data>
81103c34:	10000426 	beq	r2,zero,81103c48 <b_SpaceWire_Interface_Send_SpaceWire_Data+0x74>
81103c38:	e0fffc0b 	ldhu	r3,-16(fp)
81103c3c:	e0bfff0b 	ldhu	r2,-4(fp)
81103c40:	10bfffc4 	addi	r2,r2,-1
81103c44:	18bfef16 	blt	r3,r2,81103c04 <__reset+0xfb0e3c04>
			cnt++;
		}
		if (cnt == (data_size - 1)) {
81103c48:	e0fffc0b 	ldhu	r3,-16(fp)
81103c4c:	e0bfff0b 	ldhu	r2,-4(fp)
81103c50:	10bfffc4 	addi	r2,r2,-1
81103c54:	1880081e 	bne	r3,r2,81103c78 <b_SpaceWire_Interface_Send_SpaceWire_Data+0xa4>
			if (b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 1, 0)){
81103c58:	e0bffd07 	ldb	r2,-12(fp)
81103c5c:	000d883a 	mov	r6,zero
81103c60:	01400044 	movi	r5,1
81103c64:	1009883a 	mov	r4,r2
81103c68:	1103b4c0 	call	81103b4c <b_SpaceWire_Interface_Write_TX_Data>
81103c6c:	10000226 	beq	r2,zero,81103c78 <b_SpaceWire_Interface_Send_SpaceWire_Data+0xa4>
				bSuccess = TRUE;
81103c70:	00800044 	movi	r2,1
81103c74:	e0bffb15 	stw	r2,-20(fp)
			}
		}

		return bSuccess;
81103c78:	e0bffb17 	ldw	r2,-20(fp)
	}
81103c7c:	e037883a 	mov	sp,fp
81103c80:	dfc00117 	ldw	ra,4(sp)
81103c84:	df000017 	ldw	fp,0(sp)
81103c88:	dec00204 	addi	sp,sp,8
81103c8c:	f800283a 	ret

81103c90 <b_SpaceWire_Interface_Read_RX_Data>:

	bool b_SpaceWire_Interface_Read_RX_Data(char c_SpwID, alt_u8 *uc_RxFlag, alt_u8 *uc_RxData){
81103c90:	defff904 	addi	sp,sp,-28
81103c94:	dfc00615 	stw	ra,24(sp)
81103c98:	df000515 	stw	fp,20(sp)
81103c9c:	df000504 	addi	fp,sp,20
81103ca0:	2005883a 	mov	r2,r4
81103ca4:	e17ffe15 	stw	r5,-8(fp)
81103ca8:	e1bfff15 	stw	r6,-4(fp)
81103cac:	e0bffd05 	stb	r2,-12(fp)

		bool bSuccess = FALSE;
81103cb0:	e03ffb15 	stw	zero,-20(fp)
		alt_u32 backdoor_register = 0;
81103cb4:	e03ffc15 	stw	zero,-16(fp)

		backdoor_register = SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS);
81103cb8:	e0bffd07 	ldb	r2,-12(fp)
81103cbc:	014000c4 	movi	r5,3
81103cc0:	1009883a 	mov	r4,r2
81103cc4:	11029a80 	call	811029a8 <SPWC_READ_REG32>
81103cc8:	e0bffc15 	stw	r2,-16(fp)
		if (backdoor_register & SPWC_RX_CODEC_RX_DATAVALID_STATUS_BIT_MASK) {
81103ccc:	e0bffc17 	ldw	r2,-16(fp)
81103cd0:	1081002c 	andhi	r2,r2,1024
81103cd4:	10001326 	beq	r2,zero,81103d24 <b_SpaceWire_Interface_Read_RX_Data+0x94>

			*uc_RxFlag = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_FLAG_VALUE_MASK) >> 24);
81103cd8:	e0bffc17 	ldw	r2,-16(fp)
81103cdc:	1080402c 	andhi	r2,r2,256
81103ce0:	1004d63a 	srli	r2,r2,24
81103ce4:	1007883a 	mov	r3,r2
81103ce8:	e0bffe17 	ldw	r2,-8(fp)
81103cec:	10c00005 	stb	r3,0(r2)
			*uc_RxData = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_DATA_VALUE_MASK) >> 16);
81103cf0:	e0bffc17 	ldw	r2,-16(fp)
81103cf4:	10803fec 	andhi	r2,r2,255
81103cf8:	1004d43a 	srli	r2,r2,16
81103cfc:	1007883a 	mov	r3,r2
81103d00:	e0bfff17 	ldw	r2,-4(fp)
81103d04:	10c00005 	stb	r3,0(r2)

			SPWC_WRITE_REG32(c_SpwID,
81103d08:	e0bffd07 	ldb	r2,-12(fp)
81103d0c:	01808034 	movhi	r6,512
81103d10:	014000c4 	movi	r5,3
81103d14:	1009883a 	mov	r4,r2
81103d18:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_RX_CODEC_RX_READ_CONTROL_BIT_MASK));
			bSuccess = TRUE;
81103d1c:	00800044 	movi	r2,1
81103d20:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81103d24:	e0bffb17 	ldw	r2,-20(fp)
	}
81103d28:	e037883a 	mov	sp,fp
81103d2c:	dfc00117 	ldw	ra,4(sp)
81103d30:	df000017 	ldw	fp,0(sp)
81103d34:	dec00204 	addi	sp,sp,8
81103d38:	f800283a 	ret

81103d3c <ui_SpaceWire_Interface_Get_SpaceWire_Data>:

	alt_u16 ui_SpaceWire_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 buffer_size){
81103d3c:	defffa04 	addi	sp,sp,-24
81103d40:	dfc00515 	stw	ra,20(sp)
81103d44:	df000415 	stw	fp,16(sp)
81103d48:	df000404 	addi	fp,sp,16
81103d4c:	2007883a 	mov	r3,r4
81103d50:	e17ffe15 	stw	r5,-8(fp)
81103d54:	3005883a 	mov	r2,r6
81103d58:	e0fffd05 	stb	r3,-12(fp)
81103d5c:	e0bfff0d 	sth	r2,-4(fp)

		alt_u16 ui_rx_data_size = 0;
81103d60:	e03ffc0d 	sth	zero,-16(fp)

		alt_u8 spw_flag = 0;
81103d64:	e03ffc85 	stb	zero,-14(fp)
		alt_u8 spw_data = 0;
81103d68:	e03ffcc5 	stb	zero,-13(fp)

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
81103d6c:	00000b06 	br	81103d9c <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x60>
			if (spw_flag == 0) {
81103d70:	e0bffc83 	ldbu	r2,-14(fp)
81103d74:	10803fcc 	andi	r2,r2,255
81103d78:	1000081e 	bne	r2,zero,81103d9c <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x60>
				data_buffer[ui_rx_data_size] = spw_data;
81103d7c:	e0bffc0b 	ldhu	r2,-16(fp)
81103d80:	e0fffe17 	ldw	r3,-8(fp)
81103d84:	1885883a 	add	r2,r3,r2
81103d88:	e0fffcc3 	ldbu	r3,-13(fp)
81103d8c:	10c00005 	stb	r3,0(r2)
				ui_rx_data_size++;
81103d90:	e0bffc0b 	ldhu	r2,-16(fp)
81103d94:	10800044 	addi	r2,r2,1
81103d98:	e0bffc0d 	sth	r2,-16(fp)
		alt_u16 ui_rx_data_size = 0;

		alt_u8 spw_flag = 0;
		alt_u8 spw_data = 0;

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
81103d9c:	e0bffd07 	ldb	r2,-12(fp)
81103da0:	e13ffcc4 	addi	r4,fp,-13
81103da4:	e0fffc84 	addi	r3,fp,-14
81103da8:	200d883a 	mov	r6,r4
81103dac:	180b883a 	mov	r5,r3
81103db0:	1009883a 	mov	r4,r2
81103db4:	1103c900 	call	81103c90 <b_SpaceWire_Interface_Read_RX_Data>
81103db8:	10000426 	beq	r2,zero,81103dcc <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x90>
81103dbc:	e0fffc0b 	ldhu	r3,-16(fp)
81103dc0:	e0bfff0b 	ldhu	r2,-4(fp)
81103dc4:	10bfffc4 	addi	r2,r2,-1
81103dc8:	18bfe916 	blt	r3,r2,81103d70 <__reset+0xfb0e3d70>
				data_buffer[ui_rx_data_size] = spw_data;
				ui_rx_data_size++;
			}
		}

		return ui_rx_data_size;
81103dcc:	e0bffc0b 	ldhu	r2,-16(fp)
	}
81103dd0:	e037883a 	mov	sp,fp
81103dd4:	dfc00117 	ldw	ra,4(sp)
81103dd8:	df000017 	ldw	fp,0(sp)
81103ddc:	dec00204 	addi	sp,sp,8
81103de0:	f800283a 	ret

81103de4 <TRAN_WRITE_REG32>:
	alt_u32 ul_tran_e_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_f_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_g_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_h_interface_control_status_register_value = 0x00000000;

	void TRAN_WRITE_REG32(char c_SpwID, alt_u8 RegisterOffset, alt_u32 RegisterValue){
81103de4:	defffb04 	addi	sp,sp,-20
81103de8:	df000415 	stw	fp,16(sp)
81103dec:	df000404 	addi	fp,sp,16
81103df0:	2007883a 	mov	r3,r4
81103df4:	2805883a 	mov	r2,r5
81103df8:	e1bfff15 	stw	r6,-4(fp)
81103dfc:	e0fffd05 	stb	r3,-12(fp)
81103e00:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103e04:	00a04834 	movhi	r2,33056
81103e08:	108e0004 	addi	r2,r2,14336
81103e0c:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81103e10:	e0bffd07 	ldb	r2,-12(fp)
81103e14:	10bfefc4 	addi	r2,r2,-65
81103e18:	10c00228 	cmpgeui	r3,r2,8
81103e1c:	18002e1e 	bne	r3,zero,81103ed8 <TRAN_WRITE_REG32+0xf4>
81103e20:	100690ba 	slli	r3,r2,2
81103e24:	00a04434 	movhi	r2,33040
81103e28:	108f8e04 	addi	r2,r2,15928
81103e2c:	1885883a 	add	r2,r3,r2
81103e30:	10800017 	ldw	r2,0(r2)
81103e34:	1000683a 	jmp	r2
81103e38:	81103e58 	cmpnei	r4,r16,16633
81103e3c:	81103e68 	cmpgeui	r4,r16,16633
81103e40:	81103e78 	rdprs	r4,r16,16633
81103e44:	81103e88 	cmpgei	r4,r16,16634
81103e48:	81103e98 	cmpnei	r4,r16,16634
81103e4c:	81103ea8 	cmpgeui	r4,r16,16634
81103e50:	81103eb8 	rdprs	r4,r16,16634
81103e54:	81103ec8 	cmpgei	r4,r16,16635
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103e58:	00a04834 	movhi	r2,33056
81103e5c:	108e0004 	addi	r2,r2,14336
81103e60:	e0bffc15 	stw	r2,-16(fp)
			break;
81103e64:	00001c06 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
81103e68:	00a04834 	movhi	r2,33056
81103e6c:	108d0004 	addi	r2,r2,13312
81103e70:	e0bffc15 	stw	r2,-16(fp)
			break;
81103e74:	00001806 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
81103e78:	00a04834 	movhi	r2,33056
81103e7c:	108c0004 	addi	r2,r2,12288
81103e80:	e0bffc15 	stw	r2,-16(fp)
			break;
81103e84:	00001406 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
81103e88:	00a04834 	movhi	r2,33056
81103e8c:	108b0004 	addi	r2,r2,11264
81103e90:	e0bffc15 	stw	r2,-16(fp)
			break;
81103e94:	00001006 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
81103e98:	00a04834 	movhi	r2,33056
81103e9c:	108a0004 	addi	r2,r2,10240
81103ea0:	e0bffc15 	stw	r2,-16(fp)
			break;
81103ea4:	00000c06 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
81103ea8:	00a04834 	movhi	r2,33056
81103eac:	10890004 	addi	r2,r2,9216
81103eb0:	e0bffc15 	stw	r2,-16(fp)
			break;
81103eb4:	00000806 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
81103eb8:	00a04834 	movhi	r2,33056
81103ebc:	10880004 	addi	r2,r2,8192
81103ec0:	e0bffc15 	stw	r2,-16(fp)
			break;
81103ec4:	00000406 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
81103ec8:	00a04834 	movhi	r2,33056
81103ecc:	10870004 	addi	r2,r2,7168
81103ed0:	e0bffc15 	stw	r2,-16(fp)
			break;
81103ed4:	0001883a 	nop
		}
		*(pTranAddr + (alt_u32)RegisterOffset) = (alt_u32) RegisterValue;
81103ed8:	e0bffe03 	ldbu	r2,-8(fp)
81103edc:	1085883a 	add	r2,r2,r2
81103ee0:	1085883a 	add	r2,r2,r2
81103ee4:	1007883a 	mov	r3,r2
81103ee8:	e0bffc17 	ldw	r2,-16(fp)
81103eec:	10c5883a 	add	r2,r2,r3
81103ef0:	e0ffff17 	ldw	r3,-4(fp)
81103ef4:	10c00015 	stw	r3,0(r2)
	}
81103ef8:	0001883a 	nop
81103efc:	e037883a 	mov	sp,fp
81103f00:	df000017 	ldw	fp,0(sp)
81103f04:	dec00104 	addi	sp,sp,4
81103f08:	f800283a 	ret

81103f0c <TRAN_READ_REG32>:

	alt_u32 TRAN_READ_REG32(char c_SpwID, alt_u8 RegisterOffset){
81103f0c:	defffb04 	addi	sp,sp,-20
81103f10:	df000415 	stw	fp,16(sp)
81103f14:	df000404 	addi	fp,sp,16
81103f18:	2007883a 	mov	r3,r4
81103f1c:	2805883a 	mov	r2,r5
81103f20:	e0fffe05 	stb	r3,-8(fp)
81103f24:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81103f28:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103f2c:	00a04834 	movhi	r2,33056
81103f30:	108e0004 	addi	r2,r2,14336
81103f34:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81103f38:	e0bffe07 	ldb	r2,-8(fp)
81103f3c:	10bfefc4 	addi	r2,r2,-65
81103f40:	10c00228 	cmpgeui	r3,r2,8
81103f44:	18002e1e 	bne	r3,zero,81104000 <TRAN_READ_REG32+0xf4>
81103f48:	100690ba 	slli	r3,r2,2
81103f4c:	00a04434 	movhi	r2,33040
81103f50:	108fd804 	addi	r2,r2,16224
81103f54:	1885883a 	add	r2,r3,r2
81103f58:	10800017 	ldw	r2,0(r2)
81103f5c:	1000683a 	jmp	r2
81103f60:	81103f80 	call	881103f8 <__reset+0x20f03f8>
81103f64:	81103f90 	cmplti	r4,r16,16638
81103f68:	81103fa0 	cmpeqi	r4,r16,16638
81103f6c:	81103fb0 	cmpltui	r4,r16,16638
81103f70:	81103fc0 	call	881103fc <__reset+0x20f03fc>
81103f74:	81103fd0 	cmplti	r4,r16,16639
81103f78:	81103fe0 	cmpeqi	r4,r16,16639
81103f7c:	81103ff0 	cmpltui	r4,r16,16639
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103f80:	00a04834 	movhi	r2,33056
81103f84:	108e0004 	addi	r2,r2,14336
81103f88:	e0bffc15 	stw	r2,-16(fp)
			break;
81103f8c:	00001c06 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
81103f90:	00a04834 	movhi	r2,33056
81103f94:	108d0004 	addi	r2,r2,13312
81103f98:	e0bffc15 	stw	r2,-16(fp)
			break;
81103f9c:	00001806 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
81103fa0:	00a04834 	movhi	r2,33056
81103fa4:	108c0004 	addi	r2,r2,12288
81103fa8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fac:	00001406 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
81103fb0:	00a04834 	movhi	r2,33056
81103fb4:	108b0004 	addi	r2,r2,11264
81103fb8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fbc:	00001006 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
81103fc0:	00a04834 	movhi	r2,33056
81103fc4:	108a0004 	addi	r2,r2,10240
81103fc8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fcc:	00000c06 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
81103fd0:	00a04834 	movhi	r2,33056
81103fd4:	10890004 	addi	r2,r2,9216
81103fd8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fdc:	00000806 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
81103fe0:	00a04834 	movhi	r2,33056
81103fe4:	10880004 	addi	r2,r2,8192
81103fe8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fec:	00000406 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
81103ff0:	00a04834 	movhi	r2,33056
81103ff4:	10870004 	addi	r2,r2,7168
81103ff8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103ffc:	0001883a 	nop
		}
		RegisterValue = *(pTranAddr + (alt_u32)RegisterOffset);
81104000:	e0bfff03 	ldbu	r2,-4(fp)
81104004:	1085883a 	add	r2,r2,r2
81104008:	1085883a 	add	r2,r2,r2
8110400c:	1007883a 	mov	r3,r2
81104010:	e0bffc17 	ldw	r2,-16(fp)
81104014:	10c5883a 	add	r2,r2,r3
81104018:	10800017 	ldw	r2,0(r2)
8110401c:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81104020:	e0bffd17 	ldw	r2,-12(fp)
	}
81104024:	e037883a 	mov	sp,fp
81104028:	df000017 	ldw	fp,0(sp)
8110402c:	dec00104 	addi	sp,sp,4
81104030:	f800283a 	ret

81104034 <b_Transparent_Interface_Write_Register>:

	bool b_Transparent_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81104034:	defffa04 	addi	sp,sp,-24
81104038:	dfc00515 	stw	ra,20(sp)
8110403c:	df000415 	stw	fp,16(sp)
81104040:	df000404 	addi	fp,sp,16
81104044:	2007883a 	mov	r3,r4
81104048:	2805883a 	mov	r2,r5
8110404c:	e1bfff15 	stw	r6,-4(fp)
81104050:	e0fffd05 	stb	r3,-12(fp)
81104054:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104058:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
8110405c:	e0bffe03 	ldbu	r2,-8(fp)
81104060:	108000e8 	cmpgeui	r2,r2,3
81104064:	1000081e 	bne	r2,zero,81104088 <b_Transparent_Interface_Write_Register+0x54>
			TRAN_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
81104068:	e0bffd07 	ldb	r2,-12(fp)
8110406c:	e0fffe03 	ldbu	r3,-8(fp)
81104070:	e1bfff17 	ldw	r6,-4(fp)
81104074:	180b883a 	mov	r5,r3
81104078:	1009883a 	mov	r4,r2
8110407c:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
			bSuccess = TRUE;
81104080:	00800044 	movi	r2,1
81104084:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81104088:	e0bffc17 	ldw	r2,-16(fp)
	}
8110408c:	e037883a 	mov	sp,fp
81104090:	dfc00117 	ldw	ra,4(sp)
81104094:	df000017 	ldw	fp,0(sp)
81104098:	dec00204 	addi	sp,sp,8
8110409c:	f800283a 	ret

811040a0 <ul_Transparent_Interface_Read_Register>:

	alt_u32 ul_Transparent_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
811040a0:	defffb04 	addi	sp,sp,-20
811040a4:	dfc00415 	stw	ra,16(sp)
811040a8:	df000315 	stw	fp,12(sp)
811040ac:	df000304 	addi	fp,sp,12
811040b0:	2007883a 	mov	r3,r4
811040b4:	2805883a 	mov	r2,r5
811040b8:	e0fffe05 	stb	r3,-8(fp)
811040bc:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
811040c0:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
811040c4:	e0bfff03 	ldbu	r2,-4(fp)
811040c8:	108000e8 	cmpgeui	r2,r2,3
811040cc:	1000061e 	bne	r2,zero,811040e8 <ul_Transparent_Interface_Read_Register+0x48>
			ul_RegisterValue = TRAN_READ_REG32(c_SpwID, uc_RegisterAddress);
811040d0:	e0bffe07 	ldb	r2,-8(fp)
811040d4:	e0ffff03 	ldbu	r3,-4(fp)
811040d8:	180b883a 	mov	r5,r3
811040dc:	1009883a 	mov	r4,r2
811040e0:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
811040e4:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
811040e8:	e0bffd17 	ldw	r2,-12(fp)
	}
811040ec:	e037883a 	mov	sp,fp
811040f0:	dfc00117 	ldw	ra,4(sp)
811040f4:	df000017 	ldw	fp,0(sp)
811040f8:	dec00204 	addi	sp,sp,8
811040fc:	f800283a 	ret

81104100 <v_Transparent_Interface_Enable_Control>:

	bool v_Transparent_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
81104100:	defff804 	addi	sp,sp,-32
81104104:	dfc00715 	stw	ra,28(sp)
81104108:	df000615 	stw	fp,24(sp)
8110410c:	df000604 	addi	fp,sp,24
81104110:	2007883a 	mov	r3,r4
81104114:	2805883a 	mov	r2,r5
81104118:	e1bfff15 	stw	r6,-4(fp)
8110411c:	e0fffd05 	stb	r3,-12(fp)
81104120:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104124:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_RX_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_TX_ENABLE_CONTROL_BIT_MASK;
81104128:	0081c004 	movi	r2,1792
8110412c:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104130:	d0a04704 	addi	r2,gp,-32484
81104134:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81104138:	e0bffd07 	ldb	r2,-12(fp)
8110413c:	10bfefc4 	addi	r2,r2,-65
81104140:	10c00228 	cmpgeui	r3,r2,8
81104144:	1800361e 	bne	r3,zero,81104220 <v_Transparent_Interface_Enable_Control+0x120>
81104148:	100690ba 	slli	r3,r2,2
8110414c:	00a04434 	movhi	r2,33040
81104150:	10905804 	addi	r2,r2,16736
81104154:	1885883a 	add	r2,r3,r2
81104158:	10800017 	ldw	r2,0(r2)
8110415c:	1000683a 	jmp	r2
81104160:	81104180 	call	88110418 <__reset+0x20f0418>
81104164:	81104194 	ori	r4,r16,16646
81104168:	811041a8 	cmpgeui	r4,r16,16646
8110416c:	811041bc 	xorhi	r4,r16,16646
81104170:	811041d0 	cmplti	r4,r16,16647
81104174:	811041e4 	muli	r4,r16,16647
81104178:	811041f8 	rdprs	r4,r16,16647
8110417c:	8110420c 	andi	r4,r16,16648
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104180:	d0a04704 	addi	r2,gp,-32484
81104184:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104188:	00800044 	movi	r2,1
8110418c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104190:	00002306 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81104194:	d0a04804 	addi	r2,gp,-32480
81104198:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110419c:	00800044 	movi	r2,1
811041a0:	e0bffa15 	stw	r2,-24(fp)
			break;
811041a4:	00001e06 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
811041a8:	d0a04904 	addi	r2,gp,-32476
811041ac:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041b0:	00800044 	movi	r2,1
811041b4:	e0bffa15 	stw	r2,-24(fp)
			break;
811041b8:	00001906 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
811041bc:	d0a04a04 	addi	r2,gp,-32472
811041c0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041c4:	00800044 	movi	r2,1
811041c8:	e0bffa15 	stw	r2,-24(fp)
			break;
811041cc:	00001406 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
811041d0:	d0a04b04 	addi	r2,gp,-32468
811041d4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041d8:	00800044 	movi	r2,1
811041dc:	e0bffa15 	stw	r2,-24(fp)
			break;
811041e0:	00000f06 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
811041e4:	d0a04c04 	addi	r2,gp,-32464
811041e8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041ec:	00800044 	movi	r2,1
811041f0:	e0bffa15 	stw	r2,-24(fp)
			break;
811041f4:	00000a06 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
811041f8:	d0a04d04 	addi	r2,gp,-32460
811041fc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104200:	00800044 	movi	r2,1
81104204:	e0bffa15 	stw	r2,-24(fp)
			break;
81104208:	00000506 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
8110420c:	d0a04e04 	addi	r2,gp,-32456
81104210:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104214:	00800044 	movi	r2,1
81104218:	e0bffa15 	stw	r2,-24(fp)
			break;
8110421c:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
81104220:	e0bffa17 	ldw	r2,-24(fp)
81104224:	10800058 	cmpnei	r2,r2,1
81104228:	10002b1e 	bne	r2,zero,811042d8 <v_Transparent_Interface_Enable_Control+0x1d8>
8110422c:	e0ffff17 	ldw	r3,-4(fp)
81104230:	e0bffc17 	ldw	r2,-16(fp)
81104234:	1884703a 	and	r2,r3,r2
81104238:	10002726 	beq	r2,zero,811042d8 <v_Transparent_Interface_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
8110423c:	e0bffe03 	ldbu	r2,-8(fp)
81104240:	10000326 	beq	r2,zero,81104250 <v_Transparent_Interface_Enable_Control+0x150>
81104244:	10800060 	cmpeqi	r2,r2,1
81104248:	1000121e 	bne	r2,zero,81104294 <v_Transparent_Interface_Enable_Control+0x194>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
8110424c:	00002306 	br	811042dc <v_Transparent_Interface_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){
			
				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_EnableMask;
81104250:	e0bffb17 	ldw	r2,-20(fp)
81104254:	10c00017 	ldw	r3,0(r2)
81104258:	e0bfff17 	ldw	r2,-4(fp)
8110425c:	0084303a 	nor	r2,zero,r2
81104260:	1886703a 	and	r3,r3,r2
81104264:	e0bffb17 	ldw	r2,-20(fp)
81104268:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
8110426c:	e0fffd07 	ldb	r3,-12(fp)
81104270:	e0bffb17 	ldw	r2,-20(fp)
81104274:	10800017 	ldw	r2,0(r2)
81104278:	100d883a 	mov	r6,r2
8110427c:	01400804 	movi	r5,32
81104280:	1809883a 	mov	r4,r3
81104284:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81104288:	00800044 	movi	r2,1
8110428c:	e0bffa15 	stw	r2,-24(fp)
				break;
81104290:	00001006 	br	811042d4 <v_Transparent_Interface_Enable_Control+0x1d4>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_EnableMask;
81104294:	e0bffb17 	ldw	r2,-20(fp)
81104298:	10c00017 	ldw	r3,0(r2)
8110429c:	e0bfff17 	ldw	r2,-4(fp)
811042a0:	1886b03a 	or	r3,r3,r2
811042a4:	e0bffb17 	ldw	r2,-20(fp)
811042a8:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
811042ac:	e0fffd07 	ldb	r3,-12(fp)
811042b0:	e0bffb17 	ldw	r2,-20(fp)
811042b4:	10800017 	ldw	r2,0(r2)
811042b8:	100d883a 	mov	r6,r2
811042bc:	01400804 	movi	r5,32
811042c0:	1809883a 	mov	r4,r3
811042c4:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
811042c8:	00800044 	movi	r2,1
811042cc:	e0bffa15 	stw	r2,-24(fp)
				break;
811042d0:	0001883a 	nop

			}
		} else {
811042d4:	00000106 	br	811042dc <v_Transparent_Interface_Enable_Control+0x1dc>
			bSuccess = FALSE;
811042d8:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
811042dc:	e0bffa17 	ldw	r2,-24(fp)
	}
811042e0:	e037883a 	mov	sp,fp
811042e4:	dfc00117 	ldw	ra,4(sp)
811042e8:	df000017 	ldw	fp,0(sp)
811042ec:	dec00204 	addi	sp,sp,8
811042f0:	f800283a 	ret

811042f4 <v_Transparent_Interface_Interrupts_Enable_Control>:

	bool v_Transparent_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
811042f4:	defff804 	addi	sp,sp,-32
811042f8:	dfc00715 	stw	ra,28(sp)
811042fc:	df000615 	stw	fp,24(sp)
81104300:	df000604 	addi	fp,sp,24
81104304:	2007883a 	mov	r3,r4
81104308:	2805883a 	mov	r2,r5
8110430c:	e1bfff15 	stw	r6,-4(fp)
81104310:	e0fffd05 	stb	r3,-12(fp)
81104314:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104318:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_ENABLE_BIT_MASK | TRAN_DATA_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_ENABLE_BIT_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_ENABLE_BIT_MASK;
8110431c:	00803c04 	movi	r2,240
81104320:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104324:	d0a04704 	addi	r2,gp,-32484
81104328:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
8110432c:	e0bffd07 	ldb	r2,-12(fp)
81104330:	10bfefc4 	addi	r2,r2,-65
81104334:	10c00228 	cmpgeui	r3,r2,8
81104338:	1800361e 	bne	r3,zero,81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
8110433c:	100690ba 	slli	r3,r2,2
81104340:	00a04434 	movhi	r2,33040
81104344:	1090d504 	addi	r2,r2,17236
81104348:	1885883a 	add	r2,r3,r2
8110434c:	10800017 	ldw	r2,0(r2)
81104350:	1000683a 	jmp	r2
81104354:	81104374 	orhi	r4,r16,16653
81104358:	81104388 	cmpgei	r4,r16,16654
8110435c:	8110439c 	xori	r4,r16,16654
81104360:	811043b0 	cmpltui	r4,r16,16654
81104364:	811043c4 	addi	r4,r16,16655
81104368:	811043d8 	cmpnei	r4,r16,16655
8110436c:	811043ec 	andhi	r4,r16,16655
81104370:	81104400 	call	88110440 <__reset+0x20f0440>
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104374:	d0a04704 	addi	r2,gp,-32484
81104378:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110437c:	00800044 	movi	r2,1
81104380:	e0bffa15 	stw	r2,-24(fp)
			break;
81104384:	00002306 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81104388:	d0a04804 	addi	r2,gp,-32480
8110438c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104390:	00800044 	movi	r2,1
81104394:	e0bffa15 	stw	r2,-24(fp)
			break;
81104398:	00001e06 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
8110439c:	d0a04904 	addi	r2,gp,-32476
811043a0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043a4:	00800044 	movi	r2,1
811043a8:	e0bffa15 	stw	r2,-24(fp)
			break;
811043ac:	00001906 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
811043b0:	d0a04a04 	addi	r2,gp,-32472
811043b4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043b8:	00800044 	movi	r2,1
811043bc:	e0bffa15 	stw	r2,-24(fp)
			break;
811043c0:	00001406 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
811043c4:	d0a04b04 	addi	r2,gp,-32468
811043c8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043cc:	00800044 	movi	r2,1
811043d0:	e0bffa15 	stw	r2,-24(fp)
			break;
811043d4:	00000f06 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
811043d8:	d0a04c04 	addi	r2,gp,-32464
811043dc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043e0:	00800044 	movi	r2,1
811043e4:	e0bffa15 	stw	r2,-24(fp)
			break;
811043e8:	00000a06 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
811043ec:	d0a04d04 	addi	r2,gp,-32460
811043f0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043f4:	00800044 	movi	r2,1
811043f8:	e0bffa15 	stw	r2,-24(fp)
			break;
811043fc:	00000506 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
81104400:	d0a04e04 	addi	r2,gp,-32456
81104404:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104408:	00800044 	movi	r2,1
8110440c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104410:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
81104414:	e0bffa17 	ldw	r2,-24(fp)
81104418:	10800058 	cmpnei	r2,r2,1
8110441c:	10002b1e 	bne	r2,zero,811044cc <v_Transparent_Interface_Interrupts_Enable_Control+0x1d8>
81104420:	e0ffff17 	ldw	r3,-4(fp)
81104424:	e0bffc17 	ldw	r2,-16(fp)
81104428:	1884703a 	and	r2,r3,r2
8110442c:	10002726 	beq	r2,zero,811044cc <v_Transparent_Interface_Interrupts_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
81104430:	e0bffe03 	ldbu	r2,-8(fp)
81104434:	10000326 	beq	r2,zero,81104444 <v_Transparent_Interface_Interrupts_Enable_Control+0x150>
81104438:	10800060 	cmpeqi	r2,r2,1
8110443c:	1000121e 	bne	r2,zero,81104488 <v_Transparent_Interface_Interrupts_Enable_Control+0x194>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81104440:	00002306 	br	811044d0 <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){

				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_InterruptMask;
81104444:	e0bffb17 	ldw	r2,-20(fp)
81104448:	10c00017 	ldw	r3,0(r2)
8110444c:	e0bfff17 	ldw	r2,-4(fp)
81104450:	0084303a 	nor	r2,zero,r2
81104454:	1886703a 	and	r3,r3,r2
81104458:	e0bffb17 	ldw	r2,-20(fp)
8110445c:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104460:	e0fffd07 	ldb	r3,-12(fp)
81104464:	e0bffb17 	ldw	r2,-20(fp)
81104468:	10800017 	ldw	r2,0(r2)
8110446c:	100d883a 	mov	r6,r2
81104470:	01400804 	movi	r5,32
81104474:	1809883a 	mov	r4,r3
81104478:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
8110447c:	00800044 	movi	r2,1
81104480:	e0bffa15 	stw	r2,-24(fp)
				break;
81104484:	00001006 	br	811044c8 <v_Transparent_Interface_Interrupts_Enable_Control+0x1d4>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_InterruptMask;
81104488:	e0bffb17 	ldw	r2,-20(fp)
8110448c:	10c00017 	ldw	r3,0(r2)
81104490:	e0bfff17 	ldw	r2,-4(fp)
81104494:	1886b03a 	or	r3,r3,r2
81104498:	e0bffb17 	ldw	r2,-20(fp)
8110449c:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
811044a0:	e0fffd07 	ldb	r3,-12(fp)
811044a4:	e0bffb17 	ldw	r2,-20(fp)
811044a8:	10800017 	ldw	r2,0(r2)
811044ac:	100d883a 	mov	r6,r2
811044b0:	01400804 	movi	r5,32
811044b4:	1809883a 	mov	r4,r3
811044b8:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
811044bc:	00800044 	movi	r2,1
811044c0:	e0bffa15 	stw	r2,-24(fp)
				break;
811044c4:	0001883a 	nop

			}
		} else {
811044c8:	00000106 	br	811044d0 <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>
			bSuccess = FALSE;
811044cc:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
811044d0:	e0bffa17 	ldw	r2,-24(fp)
	}
811044d4:	e037883a 	mov	sp,fp
811044d8:	dfc00117 	ldw	ra,4(sp)
811044dc:	df000017 	ldw	fp,0(sp)
811044e0:	dec00204 	addi	sp,sp,8
811044e4:	f800283a 	ret

811044e8 <ul_Transparent_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_Transparent_Interface_Interrupts_Flags_Read(char c_SpwID){
811044e8:	defffb04 	addi	sp,sp,-20
811044ec:	dfc00415 	stw	ra,16(sp)
811044f0:	df000315 	stw	fp,12(sp)
811044f4:	df000304 	addi	fp,sp,12
811044f8:	2005883a 	mov	r2,r4
811044fc:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
81104500:	008003c4 	movi	r2,15
81104504:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_interrupts_flags_value = TRAN_READ_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_tran_mask;
81104508:	e0bfff07 	ldb	r2,-4(fp)
8110450c:	01400804 	movi	r5,32
81104510:	1009883a 	mov	r4,r2
81104514:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
81104518:	1007883a 	mov	r3,r2
8110451c:	e0bffd17 	ldw	r2,-12(fp)
81104520:	1884703a 	and	r2,r3,r2
81104524:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_interrupts_flags_value;
81104528:	e0bffe17 	ldw	r2,-8(fp)
	}
8110452c:	e037883a 	mov	sp,fp
81104530:	dfc00117 	ldw	ra,4(sp)
81104534:	df000017 	ldw	fp,0(sp)
81104538:	dec00204 	addi	sp,sp,8
8110453c:	f800283a 	ret

81104540 <v_Transparent_Interface_Interrupts_Flags_Clear>:

	void v_Transparent_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
81104540:	defff904 	addi	sp,sp,-28
81104544:	dfc00615 	stw	ra,24(sp)
81104548:	df000515 	stw	fp,20(sp)
8110454c:	df000504 	addi	fp,sp,20
81104550:	2005883a 	mov	r2,r4
81104554:	e17fff15 	stw	r5,-4(fp)
81104558:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
8110455c:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
81104560:	008003c4 	movi	r2,15
81104564:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104568:	d0a04704 	addi	r2,gp,-32484
8110456c:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81104570:	e0bffe07 	ldb	r2,-8(fp)
81104574:	10bfefc4 	addi	r2,r2,-65
81104578:	10c00228 	cmpgeui	r3,r2,8
8110457c:	1800361e 	bne	r3,zero,81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
81104580:	100690ba 	slli	r3,r2,2
81104584:	00a04434 	movhi	r2,33040
81104588:	10916604 	addi	r2,r2,17816
8110458c:	1885883a 	add	r2,r3,r2
81104590:	10800017 	ldw	r2,0(r2)
81104594:	1000683a 	jmp	r2
81104598:	811045b8 	rdprs	r4,r16,16662
8110459c:	811045cc 	andi	r4,r16,16663
811045a0:	811045e0 	cmpeqi	r4,r16,16663
811045a4:	811045f4 	orhi	r4,r16,16663
811045a8:	81104608 	cmpgei	r4,r16,16664
811045ac:	8110461c 	xori	r4,r16,16664
811045b0:	81104630 	cmpltui	r4,r16,16664
811045b4:	81104644 	addi	r4,r16,16665
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
811045b8:	d0a04704 	addi	r2,gp,-32484
811045bc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811045c0:	00800044 	movi	r2,1
811045c4:	e0bffb15 	stw	r2,-20(fp)
			break;
811045c8:	00002306 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
811045cc:	d0a04804 	addi	r2,gp,-32480
811045d0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811045d4:	00800044 	movi	r2,1
811045d8:	e0bffb15 	stw	r2,-20(fp)
			break;
811045dc:	00001e06 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
811045e0:	d0a04904 	addi	r2,gp,-32476
811045e4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811045e8:	00800044 	movi	r2,1
811045ec:	e0bffb15 	stw	r2,-20(fp)
			break;
811045f0:	00001906 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
811045f4:	d0a04a04 	addi	r2,gp,-32472
811045f8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811045fc:	00800044 	movi	r2,1
81104600:	e0bffb15 	stw	r2,-20(fp)
			break;
81104604:	00001406 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
81104608:	d0a04b04 	addi	r2,gp,-32468
8110460c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104610:	00800044 	movi	r2,1
81104614:	e0bffb15 	stw	r2,-20(fp)
			break;
81104618:	00000f06 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
8110461c:	d0a04c04 	addi	r2,gp,-32464
81104620:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104624:	00800044 	movi	r2,1
81104628:	e0bffb15 	stw	r2,-20(fp)
			break;
8110462c:	00000a06 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
81104630:	d0a04d04 	addi	r2,gp,-32460
81104634:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104638:	00800044 	movi	r2,1
8110463c:	e0bffb15 	stw	r2,-20(fp)
			break;
81104640:	00000506 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
81104644:	d0a04e04 	addi	r2,gp,-32456
81104648:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
8110464c:	00800044 	movi	r2,1
81104650:	e0bffb15 	stw	r2,-20(fp)
			break;
81104654:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
81104658:	e0bffb17 	ldw	r2,-20(fp)
8110465c:	10800058 	cmpnei	r2,r2,1
81104660:	10000d1e 	bne	r2,zero,81104698 <v_Transparent_Interface_Interrupts_Flags_Clear+0x158>
81104664:	e0ffff17 	ldw	r3,-4(fp)
81104668:	e0bffd17 	ldw	r2,-12(fp)
8110466c:	1884703a 	and	r2,r3,r2
81104670:	10000926 	beq	r2,zero,81104698 <v_Transparent_Interface_Interrupts_Flags_Clear+0x158>
			TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_tran_interface_control_status_register_value | ul_InterruptMask));
81104674:	e13ffe07 	ldb	r4,-8(fp)
81104678:	e0bffc17 	ldw	r2,-16(fp)
8110467c:	10c00017 	ldw	r3,0(r2)
81104680:	e0bfff17 	ldw	r2,-4(fp)
81104684:	1884b03a 	or	r2,r3,r2
81104688:	100d883a 	mov	r6,r2
8110468c:	01400804 	movi	r5,32
81104690:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
81104694:	00000106 	br	8110469c <v_Transparent_Interface_Interrupts_Flags_Clear+0x15c>
		} else {
			bSuccess = FALSE;
81104698:	e03ffb15 	stw	zero,-20(fp)
		}
	}
8110469c:	0001883a 	nop
811046a0:	e037883a 	mov	sp,fp
811046a4:	dfc00117 	ldw	ra,4(sp)
811046a8:	df000017 	ldw	fp,0(sp)
811046ac:	dec00204 	addi	sp,sp,8
811046b0:	f800283a 	ret

811046b4 <v_Transparent_Interface_RX_FIFO_Reset>:

	void v_Transparent_Interface_RX_FIFO_Reset(char c_SpwID){
811046b4:	defffd04 	addi	sp,sp,-12
811046b8:	dfc00215 	stw	ra,8(sp)
811046bc:	df000115 	stw	fp,4(sp)
811046c0:	df000104 	addi	fp,sp,4
811046c4:	2005883a 	mov	r2,r4
811046c8:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_RX_FIFO_RESET_CONTROL_BIT_MASK);
811046cc:	e0bfff07 	ldb	r2,-4(fp)
811046d0:	01800104 	movi	r6,4
811046d4:	01400844 	movi	r5,33
811046d8:	1009883a 	mov	r4,r2
811046dc:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>

	}
811046e0:	0001883a 	nop
811046e4:	e037883a 	mov	sp,fp
811046e8:	dfc00117 	ldw	ra,4(sp)
811046ec:	df000017 	ldw	fp,0(sp)
811046f0:	dec00204 	addi	sp,sp,8
811046f4:	f800283a 	ret

811046f8 <ul_Transparent_Interface_RX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_RX_FIFO_Status_Read(char c_SpwID){
811046f8:	defffb04 	addi	sp,sp,-20
811046fc:	dfc00415 	stw	ra,16(sp)
81104700:	df000315 	stw	fp,12(sp)
81104704:	df000304 	addi	fp,sp,12
81104708:	2005883a 	mov	r2,r4
8110470c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_RX_FIFO_USED_SPACE_VALUE_MASK | TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_RX_FIFO_FULL_STATUS_BIT_MASK;
81104710:	0081fec4 	movi	r2,2043
81104714:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_rx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
81104718:	e0bfff07 	ldb	r2,-4(fp)
8110471c:	01400844 	movi	r5,33
81104720:	1009883a 	mov	r4,r2
81104724:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
81104728:	1007883a 	mov	r3,r2
8110472c:	e0bffd17 	ldw	r2,-12(fp)
81104730:	1884703a 	and	r2,r3,r2
81104734:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_rx_fifo_status_value;
81104738:	e0bffe17 	ldw	r2,-8(fp)
	}
8110473c:	e037883a 	mov	sp,fp
81104740:	dfc00117 	ldw	ra,4(sp)
81104744:	df000017 	ldw	fp,0(sp)
81104748:	dec00204 	addi	sp,sp,8
8110474c:	f800283a 	ret

81104750 <b_Transparent_Interface_RX_FIFO_Status_Empty>:

	bool b_Transparent_Interface_RX_FIFO_Status_Empty(char c_SpwID){
81104750:	defffc04 	addi	sp,sp,-16
81104754:	dfc00315 	stw	ra,12(sp)
81104758:	df000215 	stw	fp,8(sp)
8110475c:	df000204 	addi	fp,sp,8
81104760:	2005883a 	mov	r2,r4
81104764:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_empty = FALSE;
81104768:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK) {
8110476c:	e0bfff07 	ldb	r2,-4(fp)
81104770:	01400844 	movi	r5,33
81104774:	1009883a 	mov	r4,r2
81104778:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
8110477c:	1080008c 	andi	r2,r2,2
81104780:	10000226 	beq	r2,zero,8110478c <b_Transparent_Interface_RX_FIFO_Status_Empty+0x3c>
			b_rx_fifo_empty = TRUE;
81104784:	00800044 	movi	r2,1
81104788:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_empty;		
8110478c:	e0bffe17 	ldw	r2,-8(fp)
	}
81104790:	e037883a 	mov	sp,fp
81104794:	dfc00117 	ldw	ra,4(sp)
81104798:	df000017 	ldw	fp,0(sp)
8110479c:	dec00204 	addi	sp,sp,8
811047a0:	f800283a 	ret

811047a4 <b_Transparent_Interface_RX_FIFO_Status_Full>:
	
	bool b_Transparent_Interface_RX_FIFO_Status_Full(char c_SpwID){
811047a4:	defffc04 	addi	sp,sp,-16
811047a8:	dfc00315 	stw	ra,12(sp)
811047ac:	df000215 	stw	fp,8(sp)
811047b0:	df000204 	addi	fp,sp,8
811047b4:	2005883a 	mov	r2,r4
811047b8:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_full = FALSE;
811047bc:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_FULL_STATUS_BIT_MASK) {
811047c0:	e0bfff07 	ldb	r2,-4(fp)
811047c4:	01400844 	movi	r5,33
811047c8:	1009883a 	mov	r4,r2
811047cc:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
811047d0:	1080004c 	andi	r2,r2,1
811047d4:	10000226 	beq	r2,zero,811047e0 <b_Transparent_Interface_RX_FIFO_Status_Full+0x3c>
			b_rx_fifo_full = TRUE;
811047d8:	00800044 	movi	r2,1
811047dc:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_full;
811047e0:	e0bffe17 	ldw	r2,-8(fp)
	}
811047e4:	e037883a 	mov	sp,fp
811047e8:	dfc00117 	ldw	ra,4(sp)
811047ec:	df000017 	ldw	fp,0(sp)
811047f0:	dec00204 	addi	sp,sp,8
811047f4:	f800283a 	ret

811047f8 <uc_Transparent_Interface_RX_FIFO_Status_Used>:

	alt_u8 uc_Transparent_Interface_RX_FIFO_Status_Used(char c_SpwID){
811047f8:	defffc04 	addi	sp,sp,-16
811047fc:	dfc00315 	stw	ra,12(sp)
81104800:	df000215 	stw	fp,8(sp)
81104804:	df000204 	addi	fp,sp,8
81104808:	2005883a 	mov	r2,r4
8110480c:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_rx_fifo_used = 0;
81104810:	e03ffe05 	stb	zero,-8(fp)
		
		uc_rx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
81104814:	e0bfff07 	ldb	r2,-4(fp)
81104818:	01400844 	movi	r5,33
8110481c:	1009883a 	mov	r4,r2
81104820:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
81104824:	1081fe0c 	andi	r2,r2,2040
81104828:	1004d0fa 	srli	r2,r2,3
8110482c:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_rx_fifo_used;
81104830:	e0bffe03 	ldbu	r2,-8(fp)
	}
81104834:	e037883a 	mov	sp,fp
81104838:	dfc00117 	ldw	ra,4(sp)
8110483c:	df000017 	ldw	fp,0(sp)
81104840:	dec00204 	addi	sp,sp,8
81104844:	f800283a 	ret

81104848 <v_Transparent_Interface_TX_FIFO_Reset>:
	
	
	void v_Transparent_Interface_TX_FIFO_Reset(char c_SpwID){
81104848:	defffd04 	addi	sp,sp,-12
8110484c:	dfc00215 	stw	ra,8(sp)
81104850:	df000115 	stw	fp,4(sp)
81104854:	df000104 	addi	fp,sp,4
81104858:	2005883a 	mov	r2,r4
8110485c:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_TX_FIFO_RESET_CONTROL_BIT_MASK);
81104860:	e0bfff07 	ldb	r2,-4(fp)
81104864:	01800104 	movi	r6,4
81104868:	01400884 	movi	r5,34
8110486c:	1009883a 	mov	r4,r2
81104870:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>

	}
81104874:	0001883a 	nop
81104878:	e037883a 	mov	sp,fp
8110487c:	dfc00117 	ldw	ra,4(sp)
81104880:	df000017 	ldw	fp,0(sp)
81104884:	dec00204 	addi	sp,sp,8
81104888:	f800283a 	ret

8110488c <ul_Transparent_Interface_TX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_TX_FIFO_Status_Read(char c_SpwID){
8110488c:	defffb04 	addi	sp,sp,-20
81104890:	dfc00415 	stw	ra,16(sp)
81104894:	df000315 	stw	fp,12(sp)
81104898:	df000304 	addi	fp,sp,12
8110489c:	2005883a 	mov	r2,r4
811048a0:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_TX_FIFO_USED_SPACE_VALUE_MASK | TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_TX_FIFO_FULL_STATUS_BIT_MASK;
811048a4:	0081fec4 	movi	r2,2043
811048a8:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_tx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
811048ac:	e0bfff07 	ldb	r2,-4(fp)
811048b0:	01400884 	movi	r5,34
811048b4:	1009883a 	mov	r4,r2
811048b8:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
811048bc:	1007883a 	mov	r3,r2
811048c0:	e0bffd17 	ldw	r2,-12(fp)
811048c4:	1884703a 	and	r2,r3,r2
811048c8:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_tx_fifo_status_value;
811048cc:	e0bffe17 	ldw	r2,-8(fp)
	}
811048d0:	e037883a 	mov	sp,fp
811048d4:	dfc00117 	ldw	ra,4(sp)
811048d8:	df000017 	ldw	fp,0(sp)
811048dc:	dec00204 	addi	sp,sp,8
811048e0:	f800283a 	ret

811048e4 <b_Transparent_Interface_TX_FIFO_Status_Full>:

	bool b_Transparent_Interface_TX_FIFO_Status_Full(char c_SpwID){
811048e4:	defffc04 	addi	sp,sp,-16
811048e8:	dfc00315 	stw	ra,12(sp)
811048ec:	df000215 	stw	fp,8(sp)
811048f0:	df000204 	addi	fp,sp,8
811048f4:	2005883a 	mov	r2,r4
811048f8:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_empty = FALSE;
811048fc:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK) {
81104900:	e0bfff07 	ldb	r2,-4(fp)
81104904:	01400884 	movi	r5,34
81104908:	1009883a 	mov	r4,r2
8110490c:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
81104910:	1080008c 	andi	r2,r2,2
81104914:	10000226 	beq	r2,zero,81104920 <b_Transparent_Interface_TX_FIFO_Status_Full+0x3c>
			b_tx_fifo_empty = TRUE;
81104918:	00800044 	movi	r2,1
8110491c:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_empty;		
81104920:	e0bffe17 	ldw	r2,-8(fp)
	}
81104924:	e037883a 	mov	sp,fp
81104928:	dfc00117 	ldw	ra,4(sp)
8110492c:	df000017 	ldw	fp,0(sp)
81104930:	dec00204 	addi	sp,sp,8
81104934:	f800283a 	ret

81104938 <b_Transparent_Interface_TX_FIFO_Status_Empty>:
	
	bool b_Transparent_Interface_TX_FIFO_Status_Empty(char c_SpwID){
81104938:	defffc04 	addi	sp,sp,-16
8110493c:	dfc00315 	stw	ra,12(sp)
81104940:	df000215 	stw	fp,8(sp)
81104944:	df000204 	addi	fp,sp,8
81104948:	2005883a 	mov	r2,r4
8110494c:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_full = FALSE;
81104950:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_FULL_STATUS_BIT_MASK) {
81104954:	e0bfff07 	ldb	r2,-4(fp)
81104958:	01400884 	movi	r5,34
8110495c:	1009883a 	mov	r4,r2
81104960:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
81104964:	1080004c 	andi	r2,r2,1
81104968:	10000226 	beq	r2,zero,81104974 <b_Transparent_Interface_TX_FIFO_Status_Empty+0x3c>
			b_tx_fifo_full = TRUE;
8110496c:	00800044 	movi	r2,1
81104970:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_full;
81104974:	e0bffe17 	ldw	r2,-8(fp)
	}
81104978:	e037883a 	mov	sp,fp
8110497c:	dfc00117 	ldw	ra,4(sp)
81104980:	df000017 	ldw	fp,0(sp)
81104984:	dec00204 	addi	sp,sp,8
81104988:	f800283a 	ret

8110498c <uc_Transparent_Interface_TX_FIFO_Status_Used>:
	
	alt_u8 uc_Transparent_Interface_TX_FIFO_Status_Used(char c_SpwID){
8110498c:	defffc04 	addi	sp,sp,-16
81104990:	dfc00315 	stw	ra,12(sp)
81104994:	df000215 	stw	fp,8(sp)
81104998:	df000204 	addi	fp,sp,8
8110499c:	2005883a 	mov	r2,r4
811049a0:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_tx_fifo_used = 0;
811049a4:	e03ffe05 	stb	zero,-8(fp)
		
		uc_tx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
811049a8:	e0bfff07 	ldb	r2,-4(fp)
811049ac:	01400884 	movi	r5,34
811049b0:	1009883a 	mov	r4,r2
811049b4:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
811049b8:	1081fe0c 	andi	r2,r2,2040
811049bc:	1004d0fa 	srli	r2,r2,3
811049c0:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_tx_fifo_used;
811049c4:	e0bffe03 	ldbu	r2,-8(fp)
	}
811049c8:	e037883a 	mov	sp,fp
811049cc:	dfc00117 	ldw	ra,4(sp)
811049d0:	df000017 	ldw	fp,0(sp)
811049d4:	dec00204 	addi	sp,sp,8
811049d8:	f800283a 	ret

811049dc <b_Transparent_Interface_Switch_Channel>:
	
	bool b_Transparent_Interface_Switch_Channel(char c_SpwID){
811049dc:	defffb04 	addi	sp,sp,-20
811049e0:	dfc00415 	stw	ra,16(sp)
811049e4:	df000315 	stw	fp,12(sp)
811049e8:	df000304 	addi	fp,sp,12
811049ec:	2005883a 	mov	r2,r4
811049f0:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess;
		alt_u32 *pTranAddr = DDR2_ADDRESS_SPAN_EXTENDER_CNTL_BASE;
811049f4:	00a04834 	movhi	r2,33056
811049f8:	10903204 	addi	r2,r2,16584
811049fc:	e0bffe15 	stw	r2,-8(fp)

		  bSuccess = TRUE;
81104a00:	00800044 	movi	r2,1
81104a04:	e0bffd15 	stw	r2,-12(fp)
		  switch (c_SpwID) {
81104a08:	e0bfff07 	ldb	r2,-4(fp)
81104a0c:	10bfefc4 	addi	r2,r2,-65
81104a10:	10c00228 	cmpgeui	r3,r2,8
81104a14:	18004d1e 	bne	r3,zero,81104b4c <b_Transparent_Interface_Switch_Channel+0x170>
81104a18:	100690ba 	slli	r3,r2,2
81104a1c:	00a04434 	movhi	r2,33040
81104a20:	10928c04 	addi	r2,r2,18992
81104a24:	1885883a 	add	r2,r3,r2
81104a28:	10800017 	ldw	r2,0(r2)
81104a2c:	1000683a 	jmp	r2
81104a30:	81104a50 	cmplti	r4,r16,16681
81104a34:	81104a70 	cmpltui	r4,r16,16681
81104a38:	81104a90 	cmplti	r4,r16,16682
81104a3c:	81104ab0 	cmpltui	r4,r16,16682
81104a40:	81104ad0 	cmplti	r4,r16,16683
81104a44:	81104af0 	cmpltui	r4,r16,16683
81104a48:	81104b10 	cmplti	r4,r16,16684
81104a4c:	81104b30 	cmpltui	r4,r16,16684
			  case 'A':
				*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_A_CHANNEL_WINDOWED_OFFSET);
81104a50:	e0bffe17 	ldw	r2,-8(fp)
81104a54:	00f80034 	movhi	r3,57344
81104a58:	10c00015 	stw	r3,0(r2)
				*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_A_CHANNEL_WINDOWED_OFFSET) >> 32);
81104a5c:	e0bffe17 	ldw	r2,-8(fp)
81104a60:	10800104 	addi	r2,r2,4
81104a64:	00c00044 	movi	r3,1
81104a68:	10c00015 	stw	r3,0(r2)
			  break;
81104a6c:	00003b06 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'B':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_B_CHANNEL_WINDOWED_OFFSET);
81104a70:	e0bffe17 	ldw	r2,-8(fp)
81104a74:	00f00034 	movhi	r3,49152
81104a78:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_B_CHANNEL_WINDOWED_OFFSET) >> 32);
81104a7c:	e0bffe17 	ldw	r2,-8(fp)
81104a80:	10800104 	addi	r2,r2,4
81104a84:	00c00044 	movi	r3,1
81104a88:	10c00015 	stw	r3,0(r2)
				  break;
81104a8c:	00003306 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'C':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_C_CHANNEL_WINDOWED_OFFSET);
81104a90:	e0bffe17 	ldw	r2,-8(fp)
81104a94:	00e80034 	movhi	r3,40960
81104a98:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_C_CHANNEL_WINDOWED_OFFSET) >> 32);
81104a9c:	e0bffe17 	ldw	r2,-8(fp)
81104aa0:	10800104 	addi	r2,r2,4
81104aa4:	00c00044 	movi	r3,1
81104aa8:	10c00015 	stw	r3,0(r2)
				  break;
81104aac:	00002b06 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'D':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_E_CHANNEL_WINDOWED_OFFSET);
81104ab0:	e0bffe17 	ldw	r2,-8(fp)
81104ab4:	00d80034 	movhi	r3,24576
81104ab8:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_E_CHANNEL_WINDOWED_OFFSET) >> 32);
81104abc:	e0bffe17 	ldw	r2,-8(fp)
81104ac0:	10800104 	addi	r2,r2,4
81104ac4:	00c00044 	movi	r3,1
81104ac8:	10c00015 	stw	r3,0(r2)
				  break;
81104acc:	00002306 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'E':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_D_CHANNEL_WINDOWED_OFFSET);
81104ad0:	e0bffe17 	ldw	r2,-8(fp)
81104ad4:	00e00034 	movhi	r3,32768
81104ad8:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_D_CHANNEL_WINDOWED_OFFSET) >> 32);
81104adc:	e0bffe17 	ldw	r2,-8(fp)
81104ae0:	10800104 	addi	r2,r2,4
81104ae4:	00c00044 	movi	r3,1
81104ae8:	10c00015 	stw	r3,0(r2)
				  break;
81104aec:	00001b06 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'F':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_F_CHANNEL_WINDOWED_OFFSET);
81104af0:	e0bffe17 	ldw	r2,-8(fp)
81104af4:	00d00034 	movhi	r3,16384
81104af8:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_F_CHANNEL_WINDOWED_OFFSET) >> 32);
81104afc:	e0bffe17 	ldw	r2,-8(fp)
81104b00:	10800104 	addi	r2,r2,4
81104b04:	00c00044 	movi	r3,1
81104b08:	10c00015 	stw	r3,0(r2)
				  break;
81104b0c:	00001306 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'G':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_G_CHANNEL_WINDOWED_OFFSET);
81104b10:	e0bffe17 	ldw	r2,-8(fp)
81104b14:	00c80034 	movhi	r3,8192
81104b18:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_G_CHANNEL_WINDOWED_OFFSET) >> 32);
81104b1c:	e0bffe17 	ldw	r2,-8(fp)
81104b20:	10800104 	addi	r2,r2,4
81104b24:	00c00044 	movi	r3,1
81104b28:	10c00015 	stw	r3,0(r2)
				  break;
81104b2c:	00000b06 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'H':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_H_CHANNEL_WINDOWED_OFFSET);
81104b30:	e0bffe17 	ldw	r2,-8(fp)
81104b34:	10000015 	stw	zero,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_H_CHANNEL_WINDOWED_OFFSET) >> 32);
81104b38:	e0bffe17 	ldw	r2,-8(fp)
81104b3c:	10800104 	addi	r2,r2,4
81104b40:	00c00044 	movi	r3,1
81104b44:	10c00015 	stw	r3,0(r2)
				  break;
81104b48:	00000406 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  default:
				  bSuccess = FALSE;
81104b4c:	e03ffd15 	stw	zero,-12(fp)
				  printf("SpW Channel not identified!! Error switching channels!! \n");
81104b50:	012044f4 	movhi	r4,33043
81104b54:	210b7304 	addi	r4,r4,11724
81104b58:	110b6880 	call	8110b688 <puts>
		  }

		  return bSuccess;
81104b5c:	e0bffd17 	ldw	r2,-12(fp)
	}
81104b60:	e037883a 	mov	sp,fp
81104b64:	dfc00117 	ldw	ra,4(sp)
81104b68:	df000017 	ldw	fp,0(sp)
81104b6c:	dec00204 	addi	sp,sp,8
81104b70:	f800283a 	ret

81104b74 <b_Transparent_Interface_Send_SpaceWire_Data>:


	bool b_Transparent_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
81104b74:	defff704 	addi	sp,sp,-36
81104b78:	dfc00815 	stw	ra,32(sp)
81104b7c:	df000715 	stw	fp,28(sp)
81104b80:	df000704 	addi	fp,sp,28
81104b84:	2007883a 	mov	r3,r4
81104b88:	e17ffe15 	stw	r5,-8(fp)
81104b8c:	3005883a 	mov	r2,r6
81104b90:	e0fffd05 	stb	r3,-12(fp)
81104b94:	e0bfff0d 	sth	r2,-4(fp)
		
		bool bSuccess = FALSE;
81104b98:	e03ff915 	stw	zero,-28(fp)
		
		alt_u32 *memory_location = DDR2_ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_BASE;
81104b9c:	e03ffb15 	stw	zero,-20(fp)
		printf("memory_location = %u \n", memory_location);
81104ba0:	e17ffb17 	ldw	r5,-20(fp)
81104ba4:	012044f4 	movhi	r4,33043
81104ba8:	210b8204 	addi	r4,r4,11784
81104bac:	110b56c0 	call	8110b56c <printf>
		memory_location += (TRAN_BURST_REGISTERS_OFFSET + TRAN_TX_REGISTER_OFFSET)*2;
81104bb0:	e0bffb17 	ldw	r2,-20(fp)
81104bb4:	10804204 	addi	r2,r2,264
81104bb8:	e0bffb15 	stw	r2,-20(fp)
		printf("memory_location = %u \n", memory_location);
81104bbc:	e17ffb17 	ldw	r5,-20(fp)
81104bc0:	012044f4 	movhi	r4,33043
81104bc4:	210b8204 	addi	r4,r4,11784
81104bc8:	110b56c0 	call	8110b56c <printf>

		alt_u16 cnt = 0;
81104bcc:	e03ffa0d 	sth	zero,-24(fp)
		alt_u8 resto = 0;
81104bd0:	e03ffc05 	stb	zero,-16(fp)
		
		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
81104bd4:	e0bffd07 	ldb	r2,-12(fp)
81104bd8:	10801050 	cmplti	r2,r2,65
81104bdc:	1000081e 	bne	r2,zero,81104c00 <b_Transparent_Interface_Send_SpaceWire_Data+0x8c>
81104be0:	e0bffd07 	ldb	r2,-12(fp)
81104be4:	10801248 	cmpgei	r2,r2,73
81104be8:	1000051e 	bne	r2,zero,81104c00 <b_Transparent_Interface_Send_SpaceWire_Data+0x8c>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
81104bec:	e0bffd07 	ldb	r2,-12(fp)
81104bf0:	1009883a 	mov	r4,r2
81104bf4:	11049dc0 	call	811049dc <b_Transparent_Interface_Switch_Channel>
			bSuccess          = TRUE;
81104bf8:	00800044 	movi	r2,1
81104bfc:	e0bff915 	stw	r2,-28(fp)
		}

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
81104c00:	e0bff917 	ldw	r2,-28(fp)
81104c04:	10002626 	beq	r2,zero,81104ca0 <b_Transparent_Interface_Send_SpaceWire_Data+0x12c>
81104c08:	e0bffd07 	ldb	r2,-12(fp)
81104c0c:	1009883a 	mov	r4,r2
81104c10:	110498c0 	call	8110498c <uc_Transparent_Interface_TX_FIFO_Status_Used>
81104c14:	10803fcc 	andi	r2,r2,255
81104c18:	00c04004 	movi	r3,256
81104c1c:	1887c83a 	sub	r3,r3,r2
81104c20:	e0bfff0b 	ldhu	r2,-4(fp)
81104c24:	1004d0ba 	srli	r2,r2,2
81104c28:	10bfffcc 	andi	r2,r2,65535
81104c2c:	10800044 	addi	r2,r2,1
81104c30:	18801b16 	blt	r3,r2,81104ca0 <b_Transparent_Interface_Send_SpaceWire_Data+0x12c>
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
81104c34:	e03ffa0d 	sth	zero,-24(fp)
81104c38:	00000b06 	br	81104c68 <b_Transparent_Interface_Send_SpaceWire_Data+0xf4>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
81104c3c:	e0bffa0b 	ldhu	r2,-24(fp)
81104c40:	e0fffe17 	ldw	r3,-8(fp)
81104c44:	1885883a 	add	r2,r3,r2
81104c48:	10800003 	ldbu	r2,0(r2)
81104c4c:	10803fcc 	andi	r2,r2,255
81104c50:	10fffff4 	orhi	r3,r2,65535
81104c54:	e0bffb17 	ldw	r2,-20(fp)
81104c58:	10c00015 	stw	r3,0(r2)

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
81104c5c:	e0bffa0b 	ldhu	r2,-24(fp)
81104c60:	10800044 	addi	r2,r2,1
81104c64:	e0bffa0d 	sth	r2,-24(fp)
81104c68:	e0fffa0b 	ldhu	r3,-24(fp)
81104c6c:	e0bfff0b 	ldhu	r2,-4(fp)
81104c70:	18bff236 	bltu	r3,r2,81104c3c <__reset+0xfb0e4c3c>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
			}
			/* Append an EOP to the end of the data in the Channel Memory Location */
			*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | 0x0100 | (alt_u16)data_buffer[data_size]);
81104c74:	e0bfff0b 	ldhu	r2,-4(fp)
81104c78:	e0fffe17 	ldw	r3,-8(fp)
81104c7c:	1885883a 	add	r2,r3,r2
81104c80:	10800003 	ldbu	r2,0(r2)
81104c84:	10c03fcc 	andi	r3,r2,255
81104c88:	00bffff4 	movhi	r2,65535
81104c8c:	10804004 	addi	r2,r2,256
81104c90:	1886b03a 	or	r3,r3,r2
81104c94:	e0bffb17 	ldw	r2,-20(fp)
81104c98:	10c00015 	stw	r3,0(r2)
81104c9c:	00000106 	br	81104ca4 <b_Transparent_Interface_Send_SpaceWire_Data+0x130>
			
		} else {
			bSuccess = FALSE;
81104ca0:	e03ff915 	stw	zero,-28(fp)
		}
		
		return bSuccess;
81104ca4:	e0bff917 	ldw	r2,-28(fp)
	}
81104ca8:	e037883a 	mov	sp,fp
81104cac:	dfc00117 	ldw	ra,4(sp)
81104cb0:	df000017 	ldw	fp,0(sp)
81104cb4:	dec00204 	addi	sp,sp,8
81104cb8:	f800283a 	ret

81104cbc <ui_Transparent_Interface_Get_SpaceWire_Data>:
	
	alt_u16 ui_Transparent_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer){
81104cbc:	deffeb04 	addi	sp,sp,-84
81104cc0:	dfc01415 	stw	ra,80(sp)
81104cc4:	df001315 	stw	fp,76(sp)
81104cc8:	ddc01215 	stw	r23,72(sp)
81104ccc:	dd801115 	stw	r22,68(sp)
81104cd0:	dd401015 	stw	r21,64(sp)
81104cd4:	dd000f15 	stw	r20,60(sp)
81104cd8:	dcc00e15 	stw	r19,56(sp)
81104cdc:	dc800d15 	stw	r18,52(sp)
81104ce0:	dc400c15 	stw	r17,48(sp)
81104ce4:	dc000b15 	stw	r16,44(sp)
81104ce8:	df001304 	addi	fp,sp,76
81104cec:	2005883a 	mov	r2,r4
81104cf0:	e17ff515 	stw	r5,-44(fp)
81104cf4:	e0bff405 	stb	r2,-48(fp)
		
		alt_u16 ui_rx_data_size = 0;
81104cf8:	e03fed0d 	sth	zero,-76(fp)
		
		alt_u64 *memory_location = 0;
81104cfc:	e03fef15 	stw	zero,-68(fp)
		memory_location += TRAN_BURST_REGISTERS_OFFSET + TRAN_RX_REGISTER_OFFSET;
81104d00:	e0bfef17 	ldw	r2,-68(fp)
81104d04:	10804004 	addi	r2,r2,256
81104d08:	e0bfef15 	stw	r2,-68(fp)

		alt_u16 cnt = 0;
81104d0c:	e03fed8d 	sth	zero,-74(fp)
		alt_u16 rx_buffer_data_size = 0;
81104d10:	e03fee0d 	sth	zero,-72(fp)
		alt_u64 rx_data = 0;
81104d14:	e03ff015 	stw	zero,-64(fp)
81104d18:	e03ff115 	stw	zero,-60(fp)
		alt_u16 rx_data_buffer[4] = {0,0,0,0};
81104d1c:	e03ff20d 	sth	zero,-56(fp)
81104d20:	e03ff28d 	sth	zero,-54(fp)
81104d24:	e03ff30d 	sth	zero,-52(fp)
81104d28:	e03ff38d 	sth	zero,-50(fp)

		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
81104d2c:	e0bff407 	ldb	r2,-48(fp)
81104d30:	10801050 	cmplti	r2,r2,65
81104d34:	1000081e 	bne	r2,zero,81104d58 <ui_Transparent_Interface_Get_SpaceWire_Data+0x9c>
81104d38:	e0bff407 	ldb	r2,-48(fp)
81104d3c:	10801248 	cmpgei	r2,r2,73
81104d40:	1000051e 	bne	r2,zero,81104d58 <ui_Transparent_Interface_Get_SpaceWire_Data+0x9c>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
81104d44:	e0bff407 	ldb	r2,-48(fp)
81104d48:	1009883a 	mov	r4,r2
81104d4c:	11049dc0 	call	811049dc <b_Transparent_Interface_Switch_Channel>
			rx_buffer_data_size = 0xFFFF;
81104d50:	00bfffc4 	movi	r2,-1
81104d54:	e0bfee0d 	sth	r2,-72(fp)
		}
		
		if (0xFFFF == rx_buffer_data_size) {
81104d58:	e0ffee0b 	ldhu	r3,-72(fp)
81104d5c:	00bfffd4 	movui	r2,65535
81104d60:	1880711e 	bne	r3,r2,81104f28 <ui_Transparent_Interface_Get_SpaceWire_Data+0x26c>
			/* Check the amount of data in the RX Buffer*/
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
81104d64:	e0bff407 	ldb	r2,-48(fp)
81104d68:	1009883a 	mov	r4,r2
81104d6c:	110498c0 	call	8110498c <uc_Transparent_Interface_TX_FIFO_Status_Used>
81104d70:	10803fcc 	andi	r2,r2,255
81104d74:	e0bfee0d 	sth	r2,-72(fp)
			if (rx_buffer_data_size > 0) {
81104d78:	e0bfee0b 	ldhu	r2,-72(fp)
81104d7c:	10006826 	beq	r2,zero,81104f20 <ui_Transparent_Interface_Get_SpaceWire_Data+0x264>
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
81104d80:	e03fed8d 	sth	zero,-74(fp)
81104d84:	00006206 	br	81104f10 <ui_Transparent_Interface_Get_SpaceWire_Data+0x254>

					rx_data = *memory_location;
81104d88:	e0bfef17 	ldw	r2,-68(fp)
81104d8c:	10c00017 	ldw	r3,0(r2)
81104d90:	e0fff015 	stw	r3,-64(fp)
81104d94:	10800117 	ldw	r2,4(r2)
81104d98:	e0bff115 	stw	r2,-60(fp)

					rx_data_buffer[0] = (alt_u16)(0x000000000000FFFF & rx_data);
81104d9c:	e0bff017 	ldw	r2,-64(fp)
81104da0:	e0bff20d 	sth	r2,-56(fp)
					rx_data_buffer[1] = (alt_u16)((0x00000000FFFF0000 & rx_data) >> 16);
81104da4:	e0bff017 	ldw	r2,-64(fp)
81104da8:	143fffec 	andhi	r16,r2,65535
81104dac:	e0bff117 	ldw	r2,-60(fp)
81104db0:	1022703a 	and	r17,r2,zero
81104db4:	8804943a 	slli	r2,r17,16
81104db8:	8024d43a 	srli	r18,r16,16
81104dbc:	14a4b03a 	or	r18,r2,r18
81104dc0:	8826d43a 	srli	r19,r17,16
81104dc4:	9005883a 	mov	r2,r18
81104dc8:	e0bff28d 	sth	r2,-54(fp)
					rx_data_buffer[2] = (alt_u16)((0x0000FFFF00000000 & rx_data) >> 32);
81104dcc:	e0bff017 	ldw	r2,-64(fp)
81104dd0:	1028703a 	and	r20,r2,zero
81104dd4:	e0bff117 	ldw	r2,-60(fp)
81104dd8:	157fffcc 	andi	r21,r2,65535
81104ddc:	a82cd83a 	srl	r22,r21,zero
81104de0:	002f883a 	mov	r23,zero
81104de4:	b005883a 	mov	r2,r22
81104de8:	e0bff30d 	sth	r2,-52(fp)
					rx_data_buffer[3] = (alt_u16)((0xFFFF000000000000 & rx_data) >> 48);
81104dec:	e0bff117 	ldw	r2,-60(fp)
81104df0:	1004d43a 	srli	r2,r2,16
81104df4:	e0bff615 	stw	r2,-40(fp)
81104df8:	e03ff715 	stw	zero,-36(fp)
81104dfc:	e0bff60b 	ldhu	r2,-40(fp)
81104e00:	e0bff38d 	sth	r2,-50(fp)

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[0] & 0x0100) || (rx_data_buffer[0] == 0xFFFF))) {
81104e04:	e0bff20b 	ldhu	r2,-56(fp)
81104e08:	10bfffcc 	andi	r2,r2,65535
81104e0c:	1080400c 	andi	r2,r2,256
81104e10:	10000c1e 	bne	r2,zero,81104e44 <ui_Transparent_Interface_Get_SpaceWire_Data+0x188>
81104e14:	e0bff20b 	ldhu	r2,-56(fp)
81104e18:	10ffffcc 	andi	r3,r2,65535
81104e1c:	00bfffd4 	movui	r2,65535
81104e20:	18800826 	beq	r3,r2,81104e44 <ui_Transparent_Interface_Get_SpaceWire_Data+0x188>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[0]);
81104e24:	e0bfed0b 	ldhu	r2,-76(fp)
81104e28:	e0fff517 	ldw	r3,-44(fp)
81104e2c:	1885883a 	add	r2,r3,r2
81104e30:	e0fff20b 	ldhu	r3,-56(fp)
81104e34:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81104e38:	e0bfed0b 	ldhu	r2,-76(fp)
81104e3c:	10800044 	addi	r2,r2,1
81104e40:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[1] & 0x0100) || (rx_data_buffer[1] == 0xFFFF))) {
81104e44:	e0bff28b 	ldhu	r2,-54(fp)
81104e48:	10bfffcc 	andi	r2,r2,65535
81104e4c:	1080400c 	andi	r2,r2,256
81104e50:	10000c1e 	bne	r2,zero,81104e84 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1c8>
81104e54:	e0bff28b 	ldhu	r2,-54(fp)
81104e58:	10ffffcc 	andi	r3,r2,65535
81104e5c:	00bfffd4 	movui	r2,65535
81104e60:	18800826 	beq	r3,r2,81104e84 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1c8>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[1]);
81104e64:	e0bfed0b 	ldhu	r2,-76(fp)
81104e68:	e0fff517 	ldw	r3,-44(fp)
81104e6c:	1885883a 	add	r2,r3,r2
81104e70:	e0fff28b 	ldhu	r3,-54(fp)
81104e74:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81104e78:	e0bfed0b 	ldhu	r2,-76(fp)
81104e7c:	10800044 	addi	r2,r2,1
81104e80:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[2] & 0x0100) || (rx_data_buffer[2] == 0xFFFF))) {
81104e84:	e0bff30b 	ldhu	r2,-52(fp)
81104e88:	10bfffcc 	andi	r2,r2,65535
81104e8c:	1080400c 	andi	r2,r2,256
81104e90:	10000c1e 	bne	r2,zero,81104ec4 <ui_Transparent_Interface_Get_SpaceWire_Data+0x208>
81104e94:	e0bff30b 	ldhu	r2,-52(fp)
81104e98:	10ffffcc 	andi	r3,r2,65535
81104e9c:	00bfffd4 	movui	r2,65535
81104ea0:	18800826 	beq	r3,r2,81104ec4 <ui_Transparent_Interface_Get_SpaceWire_Data+0x208>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[2]);
81104ea4:	e0bfed0b 	ldhu	r2,-76(fp)
81104ea8:	e0fff517 	ldw	r3,-44(fp)
81104eac:	1885883a 	add	r2,r3,r2
81104eb0:	e0fff30b 	ldhu	r3,-52(fp)
81104eb4:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81104eb8:	e0bfed0b 	ldhu	r2,-76(fp)
81104ebc:	10800044 	addi	r2,r2,1
81104ec0:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[3] & 0x0100) || (rx_data_buffer[3] == 0xFFFF))) {
81104ec4:	e0bff38b 	ldhu	r2,-50(fp)
81104ec8:	10bfffcc 	andi	r2,r2,65535
81104ecc:	1080400c 	andi	r2,r2,256
81104ed0:	10000c1e 	bne	r2,zero,81104f04 <ui_Transparent_Interface_Get_SpaceWire_Data+0x248>
81104ed4:	e0bff38b 	ldhu	r2,-50(fp)
81104ed8:	10ffffcc 	andi	r3,r2,65535
81104edc:	00bfffd4 	movui	r2,65535
81104ee0:	18800826 	beq	r3,r2,81104f04 <ui_Transparent_Interface_Get_SpaceWire_Data+0x248>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[3]);
81104ee4:	e0bfed0b 	ldhu	r2,-76(fp)
81104ee8:	e0fff517 	ldw	r3,-44(fp)
81104eec:	1885883a 	add	r2,r3,r2
81104ef0:	e0fff38b 	ldhu	r3,-50(fp)
81104ef4:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81104ef8:	e0bfed0b 	ldhu	r2,-76(fp)
81104efc:	10800044 	addi	r2,r2,1
81104f00:	e0bfed0d 	sth	r2,-76(fp)
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
			if (rx_buffer_data_size > 0) {
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
81104f04:	e0bfed8b 	ldhu	r2,-74(fp)
81104f08:	10800044 	addi	r2,r2,1
81104f0c:	e0bfed8d 	sth	r2,-74(fp)
81104f10:	e0ffed8b 	ldhu	r3,-74(fp)
81104f14:	e0bfee0b 	ldhu	r2,-72(fp)
81104f18:	18bf9b36 	bltu	r3,r2,81104d88 <__reset+0xfb0e4d88>
81104f1c:	00000306 	br	81104f2c <ui_Transparent_Interface_Get_SpaceWire_Data+0x270>
						ui_rx_data_size++;
					}

				}
			} else {
				ui_rx_data_size = 0;
81104f20:	e03fed0d 	sth	zero,-76(fp)
81104f24:	00000106 	br	81104f2c <ui_Transparent_Interface_Get_SpaceWire_Data+0x270>
			}
		} else {
			ui_rx_data_size = 0;
81104f28:	e03fed0d 	sth	zero,-76(fp)
		}
	
		return ui_rx_data_size;
81104f2c:	e0bfed0b 	ldhu	r2,-76(fp)
	}
81104f30:	e6fff804 	addi	sp,fp,-32
81104f34:	dfc00917 	ldw	ra,36(sp)
81104f38:	df000817 	ldw	fp,32(sp)
81104f3c:	ddc00717 	ldw	r23,28(sp)
81104f40:	dd800617 	ldw	r22,24(sp)
81104f44:	dd400517 	ldw	r21,20(sp)
81104f48:	dd000417 	ldw	r20,16(sp)
81104f4c:	dcc00317 	ldw	r19,12(sp)
81104f50:	dc800217 	ldw	r18,8(sp)
81104f54:	dc400117 	ldw	r17,4(sp)
81104f58:	dc000017 	ldw	r16,0(sp)
81104f5c:	dec00a04 	addi	sp,sp,40
81104f60:	f800283a 	ret

81104f64 <vEthHoldReset>:
 */

#include "eth.h"

void vEthHoldReset(void)
{
81104f64:	defffe04 	addi	sp,sp,-8
81104f68:	df000115 	stw	fp,4(sp)
81104f6c:	df000104 	addi	fp,sp,4
	alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
81104f70:	00a00034 	movhi	r2,32768
81104f74:	10813404 	addi	r2,r2,1232
81104f78:	e0bfff15 	stw	r2,-4(fp)
	*pEthAddr = (alt_u32) 0x00000000;
81104f7c:	e0bfff17 	ldw	r2,-4(fp)
81104f80:	10000015 	stw	zero,0(r2)
}
81104f84:	0001883a 	nop
81104f88:	e037883a 	mov	sp,fp
81104f8c:	df000017 	ldw	fp,0(sp)
81104f90:	dec00104 	addi	sp,sp,4
81104f94:	f800283a 	ret

81104f98 <vEthReleaseReset>:

void vEthReleaseReset(void)
{
81104f98:	defffe04 	addi	sp,sp,-8
81104f9c:	df000115 	stw	fp,4(sp)
81104fa0:	df000104 	addi	fp,sp,4
	alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
81104fa4:	00a00034 	movhi	r2,32768
81104fa8:	10813404 	addi	r2,r2,1232
81104fac:	e0bfff15 	stw	r2,-4(fp)
	*pEthAddr = (alt_u32) 0x00000001;
81104fb0:	e0bfff17 	ldw	r2,-4(fp)
81104fb4:	00c00044 	movi	r3,1
81104fb8:	10c00015 	stw	r3,0(r2)
}
81104fbc:	0001883a 	nop
81104fc0:	e037883a 	mov	sp,fp
81104fc4:	df000017 	ldw	fp,0(sp)
81104fc8:	dec00104 	addi	sp,sp,4
81104fcc:	f800283a 	ret

81104fd0 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
81104fd0:	defffa04 	addi	sp,sp,-24
81104fd4:	dfc00515 	stw	ra,20(sp)
81104fd8:	df000415 	stw	fp,16(sp)
81104fdc:	df000404 	addi	fp,sp,16
81104fe0:	e13ffd15 	stw	r4,-12(fp)
81104fe4:	e17ffe15 	stw	r5,-8(fp)
81104fe8:	3005883a 	mov	r2,r6
81104fec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81104ff0:	00800044 	movi	r2,1
81104ff4:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81104ff8:	e17ffe17 	ldw	r5,-8(fp)
81104ffc:	e13ffd17 	ldw	r4,-12(fp)
81105000:	11053800 	call	81105380 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105004:	e0bfff03 	ldbu	r2,-4(fp)
81105008:	10803fcc 	andi	r2,r2,255
8110500c:	100d883a 	mov	r6,r2
81105010:	e17ffe17 	ldw	r5,-8(fp)
81105014:	e13ffd17 	ldw	r4,-12(fp)
81105018:	11054840 	call	81105484 <i2c_write>
8110501c:	1000011e 	bne	r2,zero,81105024 <I2C_TestAdress+0x54>
        bSuccess = FALSE;
81105020:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105024:	e17ffe17 	ldw	r5,-8(fp)
81105028:	e13ffd17 	ldw	r4,-12(fp)
8110502c:	110540c0 	call	8110540c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105030:	0106d604 	movi	r4,7000
81105034:	11202500 	call	81120250 <usleep>
    
    return bSuccess;
81105038:	e0bffc17 	ldw	r2,-16(fp)

}
8110503c:	e037883a 	mov	sp,fp
81105040:	dfc00117 	ldw	ra,4(sp)
81105044:	df000017 	ldw	fp,0(sp)
81105048:	dec00204 	addi	sp,sp,8
8110504c:	f800283a 	ret

81105050 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
81105050:	defff804 	addi	sp,sp,-32
81105054:	dfc00715 	stw	ra,28(sp)
81105058:	df000615 	stw	fp,24(sp)
8110505c:	df000604 	addi	fp,sp,24
81105060:	e13ffb15 	stw	r4,-20(fp)
81105064:	e17ffc15 	stw	r5,-16(fp)
81105068:	3009883a 	mov	r4,r6
8110506c:	3807883a 	mov	r3,r7
81105070:	e0800217 	ldw	r2,8(fp)
81105074:	e13ffd05 	stb	r4,-12(fp)
81105078:	e0fffe05 	stb	r3,-8(fp)
8110507c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105080:	00800044 	movi	r2,1
81105084:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105088:	e17ffc17 	ldw	r5,-16(fp)
8110508c:	e13ffb17 	ldw	r4,-20(fp)
81105090:	11053800 	call	81105380 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105094:	e0bffd03 	ldbu	r2,-12(fp)
81105098:	10803fcc 	andi	r2,r2,255
8110509c:	100d883a 	mov	r6,r2
811050a0:	e17ffc17 	ldw	r5,-16(fp)
811050a4:	e13ffb17 	ldw	r4,-20(fp)
811050a8:	11054840 	call	81105484 <i2c_write>
811050ac:	1000011e 	bne	r2,zero,811050b4 <I2C_Write+0x64>
        bSuccess = FALSE;
811050b0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
811050b4:	e0bffa17 	ldw	r2,-24(fp)
811050b8:	10000726 	beq	r2,zero,811050d8 <I2C_Write+0x88>
811050bc:	e0bffe03 	ldbu	r2,-8(fp)
811050c0:	100d883a 	mov	r6,r2
811050c4:	e17ffc17 	ldw	r5,-16(fp)
811050c8:	e13ffb17 	ldw	r4,-20(fp)
811050cc:	11054840 	call	81105484 <i2c_write>
811050d0:	1000011e 	bne	r2,zero,811050d8 <I2C_Write+0x88>
        bSuccess = FALSE;
811050d4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
811050d8:	e0bffa17 	ldw	r2,-24(fp)
811050dc:	10000726 	beq	r2,zero,811050fc <I2C_Write+0xac>
811050e0:	e0bfff03 	ldbu	r2,-4(fp)
811050e4:	100d883a 	mov	r6,r2
811050e8:	e17ffc17 	ldw	r5,-16(fp)
811050ec:	e13ffb17 	ldw	r4,-20(fp)
811050f0:	11054840 	call	81105484 <i2c_write>
811050f4:	1000011e 	bne	r2,zero,811050fc <I2C_Write+0xac>
        bSuccess = FALSE;
811050f8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811050fc:	e17ffc17 	ldw	r5,-16(fp)
81105100:	e13ffb17 	ldw	r4,-20(fp)
81105104:	110540c0 	call	8110540c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105108:	0106d604 	movi	r4,7000
8110510c:	11202500 	call	81120250 <usleep>
    
    return bSuccess;
81105110:	e0bffa17 	ldw	r2,-24(fp)

}
81105114:	e037883a 	mov	sp,fp
81105118:	dfc00117 	ldw	ra,4(sp)
8110511c:	df000017 	ldw	fp,0(sp)
81105120:	dec00204 	addi	sp,sp,8
81105124:	f800283a 	ret

81105128 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105128:	defff904 	addi	sp,sp,-28
8110512c:	dfc00615 	stw	ra,24(sp)
81105130:	df000515 	stw	fp,20(sp)
81105134:	df000504 	addi	fp,sp,20
81105138:	e13ffc15 	stw	r4,-16(fp)
8110513c:	e17ffd15 	stw	r5,-12(fp)
81105140:	3007883a 	mov	r3,r6
81105144:	3805883a 	mov	r2,r7
81105148:	e0fffe05 	stb	r3,-8(fp)
8110514c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105150:	00800044 	movi	r2,1
81105154:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105158:	e17ffd17 	ldw	r5,-12(fp)
8110515c:	e13ffc17 	ldw	r4,-16(fp)
81105160:	11053800 	call	81105380 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105164:	e0bffe03 	ldbu	r2,-8(fp)
81105168:	10803fcc 	andi	r2,r2,255
8110516c:	100d883a 	mov	r6,r2
81105170:	e17ffd17 	ldw	r5,-12(fp)
81105174:	e13ffc17 	ldw	r4,-16(fp)
81105178:	11054840 	call	81105484 <i2c_write>
8110517c:	1000011e 	bne	r2,zero,81105184 <I2C_Read+0x5c>
        bSuccess = FALSE;
81105180:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105184:	e0bffb17 	ldw	r2,-20(fp)
81105188:	10000726 	beq	r2,zero,811051a8 <I2C_Read+0x80>
8110518c:	e0bfff03 	ldbu	r2,-4(fp)
81105190:	100d883a 	mov	r6,r2
81105194:	e17ffd17 	ldw	r5,-12(fp)
81105198:	e13ffc17 	ldw	r4,-16(fp)
8110519c:	11054840 	call	81105484 <i2c_write>
811051a0:	1000011e 	bne	r2,zero,811051a8 <I2C_Read+0x80>
        bSuccess = FALSE;
811051a4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
811051a8:	e17ffd17 	ldw	r5,-12(fp)
811051ac:	e13ffc17 	ldw	r4,-16(fp)
811051b0:	11053800 	call	81105380 <i2c_start>
    DeviceAddr |= 1; // Read
811051b4:	e0bffe03 	ldbu	r2,-8(fp)
811051b8:	10800054 	ori	r2,r2,1
811051bc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
811051c0:	e0bffb17 	ldw	r2,-20(fp)
811051c4:	10000826 	beq	r2,zero,811051e8 <I2C_Read+0xc0>
811051c8:	e0bffe03 	ldbu	r2,-8(fp)
811051cc:	10803fcc 	andi	r2,r2,255
811051d0:	100d883a 	mov	r6,r2
811051d4:	e17ffd17 	ldw	r5,-12(fp)
811051d8:	e13ffc17 	ldw	r4,-16(fp)
811051dc:	11054840 	call	81105484 <i2c_write>
811051e0:	1000011e 	bne	r2,zero,811051e8 <I2C_Read+0xc0>
        bSuccess = FALSE;
811051e4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
811051e8:	e0bffb17 	ldw	r2,-20(fp)
811051ec:	10000526 	beq	r2,zero,81105204 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
811051f0:	000f883a 	mov	r7,zero
811051f4:	e1800217 	ldw	r6,8(fp)
811051f8:	e17ffd17 	ldw	r5,-12(fp)
811051fc:	e13ffc17 	ldw	r4,-16(fp)
81105200:	11055b40 	call	811055b4 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105204:	e17ffd17 	ldw	r5,-12(fp)
81105208:	e13ffc17 	ldw	r4,-16(fp)
8110520c:	110540c0 	call	8110540c <i2c_stop>
    
    return bSuccess;
81105210:	e0bffb17 	ldw	r2,-20(fp)
}
81105214:	e037883a 	mov	sp,fp
81105218:	dfc00117 	ldw	ra,4(sp)
8110521c:	df000017 	ldw	fp,0(sp)
81105220:	dec00204 	addi	sp,sp,8
81105224:	f800283a 	ret

81105228 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81105228:	defff604 	addi	sp,sp,-40
8110522c:	dfc00915 	stw	ra,36(sp)
81105230:	df000815 	stw	fp,32(sp)
81105234:	df000804 	addi	fp,sp,32
81105238:	e13ffb15 	stw	r4,-20(fp)
8110523c:	e17ffc15 	stw	r5,-16(fp)
81105240:	3007883a 	mov	r3,r6
81105244:	e1fffe15 	stw	r7,-8(fp)
81105248:	e0800217 	ldw	r2,8(fp)
8110524c:	e0fffd05 	stb	r3,-12(fp)
81105250:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81105254:	00800044 	movi	r2,1
81105258:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
8110525c:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105260:	e17ffc17 	ldw	r5,-16(fp)
81105264:	e13ffb17 	ldw	r4,-20(fp)
81105268:	11053800 	call	81105380 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
8110526c:	e0bffd03 	ldbu	r2,-12(fp)
81105270:	10803fcc 	andi	r2,r2,255
81105274:	100d883a 	mov	r6,r2
81105278:	e17ffc17 	ldw	r5,-16(fp)
8110527c:	e13ffb17 	ldw	r4,-20(fp)
81105280:	11054840 	call	81105484 <i2c_write>
81105284:	1000011e 	bne	r2,zero,8110528c <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
81105288:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
8110528c:	e0bff917 	ldw	r2,-28(fp)
81105290:	10000726 	beq	r2,zero,811052b0 <I2C_MultipleRead+0x88>
81105294:	e0bffa03 	ldbu	r2,-24(fp)
81105298:	100d883a 	mov	r6,r2
8110529c:	e17ffc17 	ldw	r5,-16(fp)
811052a0:	e13ffb17 	ldw	r4,-20(fp)
811052a4:	11054840 	call	81105484 <i2c_write>
811052a8:	1000011e 	bne	r2,zero,811052b0 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
811052ac:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
811052b0:	e0bff917 	ldw	r2,-28(fp)
811052b4:	10000326 	beq	r2,zero,811052c4 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
811052b8:	e17ffc17 	ldw	r5,-16(fp)
811052bc:	e13ffb17 	ldw	r4,-20(fp)
811052c0:	11053800 	call	81105380 <i2c_start>
    DeviceAddr |= 1; // Read
811052c4:	e0bffd03 	ldbu	r2,-12(fp)
811052c8:	10800054 	ori	r2,r2,1
811052cc:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
811052d0:	e0bff917 	ldw	r2,-28(fp)
811052d4:	10000826 	beq	r2,zero,811052f8 <I2C_MultipleRead+0xd0>
811052d8:	e0bffd03 	ldbu	r2,-12(fp)
811052dc:	10803fcc 	andi	r2,r2,255
811052e0:	100d883a 	mov	r6,r2
811052e4:	e17ffc17 	ldw	r5,-16(fp)
811052e8:	e13ffb17 	ldw	r4,-20(fp)
811052ec:	11054840 	call	81105484 <i2c_write>
811052f0:	1000011e 	bne	r2,zero,811052f8 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
811052f4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
811052f8:	e0bff917 	ldw	r2,-28(fp)
811052fc:	10001726 	beq	r2,zero,8110535c <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
81105300:	e03ff815 	stw	zero,-32(fp)
81105304:	00001006 	br	81105348 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105308:	e0bff817 	ldw	r2,-32(fp)
8110530c:	e0fffe17 	ldw	r3,-8(fp)
81105310:	1889883a 	add	r4,r3,r2
81105314:	e0bfff0b 	ldhu	r2,-4(fp)
81105318:	10ffffc4 	addi	r3,r2,-1
8110531c:	e0bff817 	ldw	r2,-32(fp)
81105320:	1884c03a 	cmpne	r2,r3,r2
81105324:	10803fcc 	andi	r2,r2,255
81105328:	100f883a 	mov	r7,r2
8110532c:	200d883a 	mov	r6,r4
81105330:	e17ffc17 	ldw	r5,-16(fp)
81105334:	e13ffb17 	ldw	r4,-20(fp)
81105338:	11055b40 	call	811055b4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
8110533c:	e0bff817 	ldw	r2,-32(fp)
81105340:	10800044 	addi	r2,r2,1
81105344:	e0bff815 	stw	r2,-32(fp)
81105348:	e0bfff0b 	ldhu	r2,-4(fp)
8110534c:	e0fff817 	ldw	r3,-32(fp)
81105350:	1880020e 	bge	r3,r2,8110535c <I2C_MultipleRead+0x134>
81105354:	e0bff917 	ldw	r2,-28(fp)
81105358:	103feb1e 	bne	r2,zero,81105308 <__reset+0xfb0e5308>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
8110535c:	e17ffc17 	ldw	r5,-16(fp)
81105360:	e13ffb17 	ldw	r4,-20(fp)
81105364:	110540c0 	call	8110540c <i2c_stop>
    
    return bSuccess;    
81105368:	e0bff917 	ldw	r2,-28(fp)
    
}
8110536c:	e037883a 	mov	sp,fp
81105370:	dfc00117 	ldw	ra,4(sp)
81105374:	df000017 	ldw	fp,0(sp)
81105378:	dec00204 	addi	sp,sp,8
8110537c:	f800283a 	ret

81105380 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105380:	defffc04 	addi	sp,sp,-16
81105384:	dfc00315 	stw	ra,12(sp)
81105388:	df000215 	stw	fp,8(sp)
8110538c:	df000204 	addi	fp,sp,8
81105390:	e13ffe15 	stw	r4,-8(fp)
81105394:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105398:	e0bfff17 	ldw	r2,-4(fp)
8110539c:	10800104 	addi	r2,r2,4
811053a0:	1007883a 	mov	r3,r2
811053a4:	00800044 	movi	r2,1
811053a8:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
811053ac:	e0bfff17 	ldw	r2,-4(fp)
811053b0:	00c00044 	movi	r3,1
811053b4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
811053b8:	e0bffe17 	ldw	r2,-8(fp)
811053bc:	00c00044 	movi	r3,1
811053c0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
811053c4:	01000044 	movi	r4,1
811053c8:	11202500 	call	81120250 <usleep>
     
    SDA_LOW(data_base); // data low
811053cc:	e0bfff17 	ldw	r2,-4(fp)
811053d0:	0007883a 	mov	r3,zero
811053d4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
811053d8:	01000044 	movi	r4,1
811053dc:	11202500 	call	81120250 <usleep>
    SCL_LOW(clk_base); // clock low
811053e0:	e0bffe17 	ldw	r2,-8(fp)
811053e4:	0007883a 	mov	r3,zero
811053e8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
811053ec:	01000044 	movi	r4,1
811053f0:	11202500 	call	81120250 <usleep>
}
811053f4:	0001883a 	nop
811053f8:	e037883a 	mov	sp,fp
811053fc:	dfc00117 	ldw	ra,4(sp)
81105400:	df000017 	ldw	fp,0(sp)
81105404:	dec00204 	addi	sp,sp,8
81105408:	f800283a 	ret

8110540c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
8110540c:	defffc04 	addi	sp,sp,-16
81105410:	dfc00315 	stw	ra,12(sp)
81105414:	df000215 	stw	fp,8(sp)
81105418:	df000204 	addi	fp,sp,8
8110541c:	e13ffe15 	stw	r4,-8(fp)
81105420:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105424:	e0bfff17 	ldw	r2,-4(fp)
81105428:	10800104 	addi	r2,r2,4
8110542c:	1007883a 	mov	r3,r2
81105430:	00800044 	movi	r2,1
81105434:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105438:	e0bfff17 	ldw	r2,-4(fp)
8110543c:	0007883a 	mov	r3,zero
81105440:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81105444:	e0bffe17 	ldw	r2,-8(fp)
81105448:	00c00044 	movi	r3,1
8110544c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81105450:	01000044 	movi	r4,1
81105454:	11202500 	call	81120250 <usleep>
    SDA_HIGH(data_base); // data high
81105458:	e0bfff17 	ldw	r2,-4(fp)
8110545c:	00c00044 	movi	r3,1
81105460:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81105464:	01000044 	movi	r4,1
81105468:	11202500 	call	81120250 <usleep>
    

    
}
8110546c:	0001883a 	nop
81105470:	e037883a 	mov	sp,fp
81105474:	dfc00117 	ldw	ra,4(sp)
81105478:	df000017 	ldw	fp,0(sp)
8110547c:	dec00204 	addi	sp,sp,8
81105480:	f800283a 	ret

81105484 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105484:	defff804 	addi	sp,sp,-32
81105488:	dfc00715 	stw	ra,28(sp)
8110548c:	df000615 	stw	fp,24(sp)
81105490:	df000604 	addi	fp,sp,24
81105494:	e13ffd15 	stw	r4,-12(fp)
81105498:	e17ffe15 	stw	r5,-8(fp)
8110549c:	3005883a 	mov	r2,r6
811054a0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
811054a4:	00bfe004 	movi	r2,-128
811054a8:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
811054ac:	e0bffe17 	ldw	r2,-8(fp)
811054b0:	10800104 	addi	r2,r2,4
811054b4:	1007883a 	mov	r3,r2
811054b8:	00800044 	movi	r2,1
811054bc:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
811054c0:	e03ffb15 	stw	zero,-20(fp)
811054c4:	00001f06 	br	81105544 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
811054c8:	e0bffd17 	ldw	r2,-12(fp)
811054cc:	0007883a 	mov	r3,zero
811054d0:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
811054d4:	e0ffff03 	ldbu	r3,-4(fp)
811054d8:	e0bffa03 	ldbu	r2,-24(fp)
811054dc:	1884703a 	and	r2,r3,r2
811054e0:	10803fcc 	andi	r2,r2,255
811054e4:	10000426 	beq	r2,zero,811054f8 <i2c_write+0x74>
            SDA_HIGH(data_base);
811054e8:	e0bffe17 	ldw	r2,-8(fp)
811054ec:	00c00044 	movi	r3,1
811054f0:	10c00035 	stwio	r3,0(r2)
811054f4:	00000306 	br	81105504 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
811054f8:	e0bffe17 	ldw	r2,-8(fp)
811054fc:	0007883a 	mov	r3,zero
81105500:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105504:	e0bffa03 	ldbu	r2,-24(fp)
81105508:	1004d07a 	srli	r2,r2,1
8110550c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105510:	e0bffd17 	ldw	r2,-12(fp)
81105514:	00c00044 	movi	r3,1
81105518:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8110551c:	01000044 	movi	r4,1
81105520:	11202500 	call	81120250 <usleep>
        SCL_LOW(clk_base);
81105524:	e0bffd17 	ldw	r2,-12(fp)
81105528:	0007883a 	mov	r3,zero
8110552c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105530:	01000044 	movi	r4,1
81105534:	11202500 	call	81120250 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81105538:	e0bffb17 	ldw	r2,-20(fp)
8110553c:	10800044 	addi	r2,r2,1
81105540:	e0bffb15 	stw	r2,-20(fp)
81105544:	e0bffb17 	ldw	r2,-20(fp)
81105548:	10800210 	cmplti	r2,r2,8
8110554c:	103fde1e 	bne	r2,zero,811054c8 <__reset+0xfb0e54c8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81105550:	e0bffe17 	ldw	r2,-8(fp)
81105554:	10800104 	addi	r2,r2,4
81105558:	0007883a 	mov	r3,zero
8110555c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81105560:	e0bffd17 	ldw	r2,-12(fp)
81105564:	00c00044 	movi	r3,1
81105568:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
8110556c:	01000044 	movi	r4,1
81105570:	11202500 	call	81120250 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81105574:	e0bffe17 	ldw	r2,-8(fp)
81105578:	10800037 	ldwio	r2,0(r2)
8110557c:	1005003a 	cmpeq	r2,r2,zero
81105580:	10803fcc 	andi	r2,r2,255
81105584:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105588:	e0bffd17 	ldw	r2,-12(fp)
8110558c:	0007883a 	mov	r3,zero
81105590:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105594:	01000044 	movi	r4,1
81105598:	11202500 	call	81120250 <usleep>
    return bAck;
8110559c:	e0bffc17 	ldw	r2,-16(fp)
}    
811055a0:	e037883a 	mov	sp,fp
811055a4:	dfc00117 	ldw	ra,4(sp)
811055a8:	df000017 	ldw	fp,0(sp)
811055ac:	dec00204 	addi	sp,sp,8
811055b0:	f800283a 	ret

811055b4 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
811055b4:	defff804 	addi	sp,sp,-32
811055b8:	dfc00715 	stw	ra,28(sp)
811055bc:	df000615 	stw	fp,24(sp)
811055c0:	df000604 	addi	fp,sp,24
811055c4:	e13ffc15 	stw	r4,-16(fp)
811055c8:	e17ffd15 	stw	r5,-12(fp)
811055cc:	e1bffe15 	stw	r6,-8(fp)
811055d0:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
811055d4:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
811055d8:	e0bffd17 	ldw	r2,-12(fp)
811055dc:	10800104 	addi	r2,r2,4
811055e0:	0007883a 	mov	r3,zero
811055e4:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
811055e8:	e0bffc17 	ldw	r2,-16(fp)
811055ec:	0007883a 	mov	r3,zero
811055f0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811055f4:	01000044 	movi	r4,1
811055f8:	11202500 	call	81120250 <usleep>

    for(i=0;i<8;i++){
811055fc:	e03ffb15 	stw	zero,-20(fp)
81105600:	00001606 	br	8110565c <i2c_read+0xa8>
        Data <<= 1;
81105604:	e0bffa03 	ldbu	r2,-24(fp)
81105608:	1085883a 	add	r2,r2,r2
8110560c:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81105610:	e0bffc17 	ldw	r2,-16(fp)
81105614:	00c00044 	movi	r3,1
81105618:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8110561c:	01000044 	movi	r4,1
81105620:	11202500 	call	81120250 <usleep>
        if (SDA_READ(data_base))  // read data   
81105624:	e0bffd17 	ldw	r2,-12(fp)
81105628:	10800037 	ldwio	r2,0(r2)
8110562c:	10000326 	beq	r2,zero,8110563c <i2c_read+0x88>
            Data |= 0x01;
81105630:	e0bffa03 	ldbu	r2,-24(fp)
81105634:	10800054 	ori	r2,r2,1
81105638:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
8110563c:	e0bffc17 	ldw	r2,-16(fp)
81105640:	0007883a 	mov	r3,zero
81105644:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105648:	01000044 	movi	r4,1
8110564c:	11202500 	call	81120250 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81105650:	e0bffb17 	ldw	r2,-20(fp)
81105654:	10800044 	addi	r2,r2,1
81105658:	e0bffb15 	stw	r2,-20(fp)
8110565c:	e0bffb17 	ldw	r2,-20(fp)
81105660:	10800210 	cmplti	r2,r2,8
81105664:	103fe71e 	bne	r2,zero,81105604 <__reset+0xfb0e5604>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
81105668:	e0bffc17 	ldw	r2,-16(fp)
8110566c:	0007883a 	mov	r3,zero
81105670:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
81105674:	e0bffd17 	ldw	r2,-12(fp)
81105678:	10800104 	addi	r2,r2,4
8110567c:	1007883a 	mov	r3,r2
81105680:	00800044 	movi	r2,1
81105684:	18800035 	stwio	r2,0(r3)
    if (bAck)
81105688:	e0bfff17 	ldw	r2,-4(fp)
8110568c:	10000426 	beq	r2,zero,811056a0 <i2c_read+0xec>
        SDA_LOW(data_base);
81105690:	e0bffd17 	ldw	r2,-12(fp)
81105694:	0007883a 	mov	r3,zero
81105698:	10c00035 	stwio	r3,0(r2)
8110569c:	00000306 	br	811056ac <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
811056a0:	e0bffd17 	ldw	r2,-12(fp)
811056a4:	00c00044 	movi	r3,1
811056a8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
811056ac:	e0bffc17 	ldw	r2,-16(fp)
811056b0:	00c00044 	movi	r3,1
811056b4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
811056b8:	01000044 	movi	r4,1
811056bc:	11202500 	call	81120250 <usleep>
    SCL_LOW(clk_base); // clock low
811056c0:	e0bffc17 	ldw	r2,-16(fp)
811056c4:	0007883a 	mov	r3,zero
811056c8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811056cc:	01000044 	movi	r4,1
811056d0:	11202500 	call	81120250 <usleep>
    SDA_LOW(data_base);  // data low
811056d4:	e0bffd17 	ldw	r2,-12(fp)
811056d8:	0007883a 	mov	r3,zero
811056dc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
811056e0:	01000044 	movi	r4,1
811056e4:	11202500 	call	81120250 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
811056e8:	e0bffe17 	ldw	r2,-8(fp)
811056ec:	e0fffa03 	ldbu	r3,-24(fp)
811056f0:	10c00005 	stb	r3,0(r2)
}
811056f4:	0001883a 	nop
811056f8:	e037883a 	mov	sp,fp
811056fc:	dfc00117 	ldw	ra,4(sp)
81105700:	df000017 	ldw	fp,0(sp)
81105704:	dec00204 	addi	sp,sp,8
81105708:	f800283a 	ret

8110570c <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
8110570c:	defffd04 	addi	sp,sp,-12
81105710:	df000215 	stw	fp,8(sp)
81105714:	df000204 	addi	fp,sp,8
81105718:	e13ffe15 	stw	r4,-8(fp)
8110571c:	2805883a 	mov	r2,r5
81105720:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
81105724:	e0bffe17 	ldw	r2,-8(fp)
81105728:	10800058 	cmpnei	r2,r2,1
8110572c:	1000071e 	bne	r2,zero,8110574c <bSetBoardLeds+0x40>
	  LedsBoardControl &= (~LedsMask);
81105730:	e0bfff03 	ldbu	r2,-4(fp)
81105734:	0084303a 	nor	r2,zero,r2
81105738:	1007883a 	mov	r3,r2
8110573c:	d0a04f03 	ldbu	r2,-32452(gp)
81105740:	1884703a 	and	r2,r3,r2
81105744:	d0a04f05 	stb	r2,-32452(gp)
81105748:	00000406 	br	8110575c <bSetBoardLeds+0x50>
  } else {
	  LedsBoardControl |= LedsMask;
8110574c:	d0e04f03 	ldbu	r3,-32452(gp)
81105750:	e0bfff03 	ldbu	r2,-4(fp)
81105754:	1884b03a 	or	r2,r3,r2
81105758:	d0a04f05 	stb	r2,-32452(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110575c:	d0a04f03 	ldbu	r2,-32452(gp)
81105760:	10c03fcc 	andi	r3,r2,255
81105764:	00a00034 	movhi	r2,32768
81105768:	10816c04 	addi	r2,r2,1456
8110576c:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81105770:	00800044 	movi	r2,1
}
81105774:	e037883a 	mov	sp,fp
81105778:	df000017 	ldw	fp,0(sp)
8110577c:	dec00104 	addi	sp,sp,4
81105780:	f800283a 	ret

81105784 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
81105784:	defffd04 	addi	sp,sp,-12
81105788:	df000215 	stw	fp,8(sp)
8110578c:	df000204 	addi	fp,sp,8
81105790:	e13ffe15 	stw	r4,-8(fp)
81105794:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
81105798:	e0bffe17 	ldw	r2,-8(fp)
8110579c:	10800058 	cmpnei	r2,r2,1
811057a0:	1000051e 	bne	r2,zero,811057b8 <bSetPainelLeds+0x34>
	  LedsPainelControl |= LedsMask;
811057a4:	d0e05017 	ldw	r3,-32448(gp)
811057a8:	e0bfff17 	ldw	r2,-4(fp)
811057ac:	1884b03a 	or	r2,r3,r2
811057b0:	d0a05015 	stw	r2,-32448(gp)
811057b4:	00000506 	br	811057cc <bSetPainelLeds+0x48>
  } else {
	  LedsPainelControl &= (~LedsMask);
811057b8:	e0bfff17 	ldw	r2,-4(fp)
811057bc:	0086303a 	nor	r3,zero,r2
811057c0:	d0a05017 	ldw	r2,-32448(gp)
811057c4:	1884703a 	and	r2,r3,r2
811057c8:	d0a05015 	stw	r2,-32448(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
811057cc:	d0a05017 	ldw	r2,-32448(gp)
811057d0:	1007883a 	mov	r3,r2
811057d4:	00a00034 	movhi	r2,32768
811057d8:	10813804 	addi	r2,r2,1248
811057dc:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811057e0:	00800044 	movi	r2,1
}
811057e4:	e037883a 	mov	sp,fp
811057e8:	df000017 	ldw	fp,0(sp)
811057ec:	dec00104 	addi	sp,sp,4
811057f0:	f800283a 	ret

811057f4 <PGEN_WRITE_REG32>:
 */

	#include "pgen.h"


	void PGEN_WRITE_REG32(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
811057f4:	defffc04 	addi	sp,sp,-16
811057f8:	df000315 	stw	fp,12(sp)
811057fc:	df000304 	addi	fp,sp,12
81105800:	2005883a 	mov	r2,r4
81105804:	e17fff15 	stw	r5,-4(fp)
81105808:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
8110580c:	00a04834 	movhi	r2,33056
81105810:	108f0004 	addi	r2,r2,15360
81105814:	e0bffd15 	stw	r2,-12(fp)
		*(pPgenAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
81105818:	e0bffe03 	ldbu	r2,-8(fp)
8110581c:	1085883a 	add	r2,r2,r2
81105820:	1085883a 	add	r2,r2,r2
81105824:	1007883a 	mov	r3,r2
81105828:	e0bffd17 	ldw	r2,-12(fp)
8110582c:	10c5883a 	add	r2,r2,r3
81105830:	e0ffff17 	ldw	r3,-4(fp)
81105834:	10c00015 	stw	r3,0(r2)
	}
81105838:	0001883a 	nop
8110583c:	e037883a 	mov	sp,fp
81105840:	df000017 	ldw	fp,0(sp)
81105844:	dec00104 	addi	sp,sp,4
81105848:	f800283a 	ret

8110584c <PGEN_READ_REG32>:

	alt_u32 PGEN_READ_REG32(alt_u8 uc_RegisterAddress){
8110584c:	defffc04 	addi	sp,sp,-16
81105850:	df000315 	stw	fp,12(sp)
81105854:	df000304 	addi	fp,sp,12
81105858:	2005883a 	mov	r2,r4
8110585c:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81105860:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
81105864:	00a04834 	movhi	r2,33056
81105868:	108f0004 	addi	r2,r2,15360
8110586c:	e0bffe15 	stw	r2,-8(fp)
		RegisterValue = *(pPgenAddr + (alt_u32)uc_RegisterAddress);
81105870:	e0bfff03 	ldbu	r2,-4(fp)
81105874:	1085883a 	add	r2,r2,r2
81105878:	1085883a 	add	r2,r2,r2
8110587c:	1007883a 	mov	r3,r2
81105880:	e0bffe17 	ldw	r2,-8(fp)
81105884:	10c5883a 	add	r2,r2,r3
81105888:	10800017 	ldw	r2,0(r2)
8110588c:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81105890:	e0bffd17 	ldw	r2,-12(fp)
	}
81105894:	e037883a 	mov	sp,fp
81105898:	df000017 	ldw	fp,0(sp)
8110589c:	dec00104 	addi	sp,sp,4
811058a0:	f800283a 	ret

811058a4 <b_Pattern_Generator_Write_Register>:

	bool b_Pattern_Generator_Write_Register(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
811058a4:	defffb04 	addi	sp,sp,-20
811058a8:	dfc00415 	stw	ra,16(sp)
811058ac:	df000315 	stw	fp,12(sp)
811058b0:	df000304 	addi	fp,sp,12
811058b4:	2005883a 	mov	r2,r4
811058b8:	e17fff15 	stw	r5,-4(fp)
811058bc:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811058c0:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x01) {
811058c4:	e0bffe03 	ldbu	r2,-8(fp)
811058c8:	108000a8 	cmpgeui	r2,r2,2
811058cc:	1000061e 	bne	r2,zero,811058e8 <b_Pattern_Generator_Write_Register+0x44>
			PGEN_WRITE_REG32(uc_RegisterAddress, ul_RegisterValue);
811058d0:	e0bffe03 	ldbu	r2,-8(fp)
811058d4:	e17fff17 	ldw	r5,-4(fp)
811058d8:	1009883a 	mov	r4,r2
811058dc:	11057f40 	call	811057f4 <PGEN_WRITE_REG32>
			bSuccess = TRUE;
811058e0:	00800044 	movi	r2,1
811058e4:	e0bffd15 	stw	r2,-12(fp)
		}

		return bSuccess;
811058e8:	e0bffd17 	ldw	r2,-12(fp)
	}
811058ec:	e037883a 	mov	sp,fp
811058f0:	dfc00117 	ldw	ra,4(sp)
811058f4:	df000017 	ldw	fp,0(sp)
811058f8:	dec00204 	addi	sp,sp,8
811058fc:	f800283a 	ret

81105900 <ul_Pattern_Generator_Read_Register>:

	alt_u32 ul_Pattern_Generator_Read_Register(alt_u8 uc_RegisterAddress){
81105900:	defffc04 	addi	sp,sp,-16
81105904:	dfc00315 	stw	ra,12(sp)
81105908:	df000215 	stw	fp,8(sp)
8110590c:	df000204 	addi	fp,sp,8
81105910:	2005883a 	mov	r2,r4
81105914:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81105918:	e03ffe15 	stw	zero,-8(fp)

		if (uc_RegisterAddress <= 0x01) {
8110591c:	e0bfff03 	ldbu	r2,-4(fp)
81105920:	108000a8 	cmpgeui	r2,r2,2
81105924:	1000041e 	bne	r2,zero,81105938 <ul_Pattern_Generator_Read_Register+0x38>
			ul_RegisterValue = PGEN_READ_REG32(uc_RegisterAddress);
81105928:	e0bfff03 	ldbu	r2,-4(fp)
8110592c:	1009883a 	mov	r4,r2
81105930:	110584c0 	call	8110584c <PGEN_READ_REG32>
81105934:	e0bffe15 	stw	r2,-8(fp)
		}

		return ul_RegisterValue;
81105938:	e0bffe17 	ldw	r2,-8(fp)
	}
8110593c:	e037883a 	mov	sp,fp
81105940:	dfc00117 	ldw	ra,4(sp)
81105944:	df000017 	ldw	fp,0(sp)
81105948:	dec00204 	addi	sp,sp,8
8110594c:	f800283a 	ret

81105950 <v_Pattern_Generator_Start>:

	void v_Pattern_Generator_Start(void){
81105950:	defffe04 	addi	sp,sp,-8
81105954:	dfc00115 	stw	ra,4(sp)
81105958:	df000015 	stw	fp,0(sp)
8110595c:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_START_CONTROL_BIT_MASK);
81105960:	01400404 	movi	r5,16
81105964:	0009883a 	mov	r4,zero
81105968:	11057f40 	call	811057f4 <PGEN_WRITE_REG32>

	}
8110596c:	0001883a 	nop
81105970:	e037883a 	mov	sp,fp
81105974:	dfc00117 	ldw	ra,4(sp)
81105978:	df000017 	ldw	fp,0(sp)
8110597c:	dec00204 	addi	sp,sp,8
81105980:	f800283a 	ret

81105984 <v_Pattern_Generator_Stop>:

	void v_Pattern_Generator_Stop(void){
81105984:	defffe04 	addi	sp,sp,-8
81105988:	dfc00115 	stw	ra,4(sp)
8110598c:	df000015 	stw	fp,0(sp)
81105990:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_STOP_CONTROL_BIT_MASK);
81105994:	01400204 	movi	r5,8
81105998:	0009883a 	mov	r4,zero
8110599c:	11057f40 	call	811057f4 <PGEN_WRITE_REG32>

	}
811059a0:	0001883a 	nop
811059a4:	e037883a 	mov	sp,fp
811059a8:	dfc00117 	ldw	ra,4(sp)
811059ac:	df000017 	ldw	fp,0(sp)
811059b0:	dec00204 	addi	sp,sp,8
811059b4:	f800283a 	ret

811059b8 <v_Pattern_Generator_Reset>:

	void v_Pattern_Generator_Reset(void){
811059b8:	defffe04 	addi	sp,sp,-8
811059bc:	dfc00115 	stw	ra,4(sp)
811059c0:	df000015 	stw	fp,0(sp)
811059c4:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_RESET_CONTROL_BIT_MASK);
811059c8:	01400104 	movi	r5,4
811059cc:	0009883a 	mov	r4,zero
811059d0:	11057f40 	call	811057f4 <PGEN_WRITE_REG32>

	}
811059d4:	0001883a 	nop
811059d8:	e037883a 	mov	sp,fp
811059dc:	dfc00117 	ldw	ra,4(sp)
811059e0:	df000017 	ldw	fp,0(sp)
811059e4:	dec00204 	addi	sp,sp,8
811059e8:	f800283a 	ret

811059ec <Pattern_Generator_Status>:

	alt_u32 Pattern_Generator_Status(void){
811059ec:	defffc04 	addi	sp,sp,-16
811059f0:	dfc00315 	stw	ra,12(sp)
811059f4:	df000215 	stw	fp,8(sp)
811059f8:	df000204 	addi	fp,sp,8

		const alt_u32 ul_pgen_mask = PGEN_RESETED_STATUS_BIT_MASK | PGEN_STOPPED_STATUS_BIT_MASK;
811059fc:	008000c4 	movi	r2,3
81105a00:	e0bffe15 	stw	r2,-8(fp)
		alt_u32 ul_pgen_status_value = PGEN_READ_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS) & ul_pgen_mask;
81105a04:	0009883a 	mov	r4,zero
81105a08:	110584c0 	call	8110584c <PGEN_READ_REG32>
81105a0c:	1007883a 	mov	r3,r2
81105a10:	e0bffe17 	ldw	r2,-8(fp)
81105a14:	1884703a 	and	r2,r3,r2
81105a18:	e0bfff15 	stw	r2,-4(fp)

		return ul_pgen_status_value;
81105a1c:	e0bfff17 	ldw	r2,-4(fp)
	}
81105a20:	e037883a 	mov	sp,fp
81105a24:	dfc00117 	ldw	ra,4(sp)
81105a28:	df000017 	ldw	fp,0(sp)
81105a2c:	dec00204 	addi	sp,sp,8
81105a30:	f800283a 	ret

81105a34 <Pattern_Generator_Configure_Initial_State>:

	bool Pattern_Generator_Configure_Initial_State(alt_u8 uc_Initial_CCD_ID, alt_u8 uc_Initial_CCD_SIDE, alt_u8 uc_Initial_TimeCode){
81105a34:	defff904 	addi	sp,sp,-28
81105a38:	dfc00615 	stw	ra,24(sp)
81105a3c:	df000515 	stw	fp,20(sp)
81105a40:	df000504 	addi	fp,sp,20
81105a44:	2807883a 	mov	r3,r5
81105a48:	3005883a 	mov	r2,r6
81105a4c:	e13ffd05 	stb	r4,-12(fp)
81105a50:	e0fffe05 	stb	r3,-8(fp)
81105a54:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81105a58:	e03ffb15 	stw	zero,-20(fp)

		alt_u32 initial_state_config_value;
		if ((uc_Initial_CCD_ID < 4) && (uc_Initial_CCD_SIDE < 2)) {
81105a5c:	e0bffd03 	ldbu	r2,-12(fp)
81105a60:	10800128 	cmpgeui	r2,r2,4
81105a64:	1000101e 	bne	r2,zero,81105aa8 <Pattern_Generator_Configure_Initial_State+0x74>
81105a68:	e0bffe03 	ldbu	r2,-8(fp)
81105a6c:	108000a8 	cmpgeui	r2,r2,2
81105a70:	10000d1e 	bne	r2,zero,81105aa8 <Pattern_Generator_Configure_Initial_State+0x74>
			initial_state_config_value = (((alt_u32)uc_Initial_CCD_ID) << 9) | (((alt_u32)uc_Initial_CCD_SIDE) << 8) | ((alt_u32)uc_Initial_TimeCode);
81105a74:	e0bffd03 	ldbu	r2,-12(fp)
81105a78:	1006927a 	slli	r3,r2,9
81105a7c:	e0bffe03 	ldbu	r2,-8(fp)
81105a80:	1004923a 	slli	r2,r2,8
81105a84:	1886b03a 	or	r3,r3,r2
81105a88:	e0bfff03 	ldbu	r2,-4(fp)
81105a8c:	1884b03a 	or	r2,r3,r2
81105a90:	e0bffc15 	stw	r2,-16(fp)
			PGEN_WRITE_REG32(PGEN_INITIAL_TRANSMISSION_STATE_REGISTER_ADDRESS, initial_state_config_value);
81105a94:	e17ffc17 	ldw	r5,-16(fp)
81105a98:	01000044 	movi	r4,1
81105a9c:	11057f40 	call	811057f4 <PGEN_WRITE_REG32>
			bSuccess = TRUE;
81105aa0:	00800044 	movi	r2,1
81105aa4:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81105aa8:	e0bffb17 	ldw	r2,-20(fp)
	}
81105aac:	e037883a 	mov	sp,fp
81105ab0:	dfc00117 	ldw	ra,4(sp)
81105ab4:	df000017 	ldw	fp,0(sp)
81105ab8:	dec00204 	addi	sp,sp,8
81105abc:	f800283a 	ret

81105ac0 <POWER_SPI_RW>:
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock


// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN, bool bSGL, alt_u32 *pValue)
{
81105ac0:	defff204 	addi	sp,sp,-56
81105ac4:	dfc00d15 	stw	ra,52(sp)
81105ac8:	df000c15 	stw	fp,48(sp)
81105acc:	df000c04 	addi	fp,sp,48
81105ad0:	2007883a 	mov	r3,r4
81105ad4:	2805883a 	mov	r2,r5
81105ad8:	e1bffe15 	stw	r6,-8(fp)
81105adc:	e1ffff15 	stw	r7,-4(fp)
81105ae0:	e0fffc05 	stb	r3,-16(fp)
81105ae4:	e0bffd05 	stb	r2,-12(fp)
    bool bSuccess;
    alt_u8 Config8;
    alt_u32 Value32=0, Mask32;
81105ae8:	e03ff515 	stw	zero,-44(fp)
    int i, nWait = 0, nZeroCnt;
81105aec:	e03ff815 	stw	zero,-32(fp)
    const int nMaxWait = 1000000;
81105af0:	008003f4 	movhi	r2,15
81105af4:	10909004 	addi	r2,r2,16960
81105af8:	e0bffa15 	stw	r2,-24(fp)
    
    //
    Config8 = 0x80; 
81105afc:	00bfe004 	movi	r2,-128
81105b00:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bEN)?0x20:0x00;
81105b04:	e0bffe17 	ldw	r2,-8(fp)
81105b08:	10000226 	beq	r2,zero,81105b14 <POWER_SPI_RW+0x54>
81105b0c:	00800804 	movi	r2,32
81105b10:	00000106 	br	81105b18 <POWER_SPI_RW+0x58>
81105b14:	0005883a 	mov	r2,zero
81105b18:	e0fff403 	ldbu	r3,-48(fp)
81105b1c:	10c4b03a 	or	r2,r2,r3
81105b20:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSGL)?0x10:0x00;
81105b24:	e0800217 	ldw	r2,8(fp)
81105b28:	10000226 	beq	r2,zero,81105b34 <POWER_SPI_RW+0x74>
81105b2c:	00800404 	movi	r2,16
81105b30:	00000106 	br	81105b38 <POWER_SPI_RW+0x78>
81105b34:	0005883a 	mov	r2,zero
81105b38:	e0fff403 	ldbu	r3,-48(fp)
81105b3c:	10c4b03a 	or	r2,r2,r3
81105b40:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSIGN)?0x08:0x00;
81105b44:	e0bfff17 	ldw	r2,-4(fp)
81105b48:	10000226 	beq	r2,zero,81105b54 <POWER_SPI_RW+0x94>
81105b4c:	00800204 	movi	r2,8
81105b50:	00000106 	br	81105b58 <POWER_SPI_RW+0x98>
81105b54:	0005883a 	mov	r2,zero
81105b58:	e0fff403 	ldbu	r3,-48(fp)
81105b5c:	10c4b03a 	or	r2,r2,r3
81105b60:	e0bff405 	stb	r2,-48(fp)
    Config8 |= NextChannel & 0x07; // channel
81105b64:	e0bffd03 	ldbu	r2,-12(fp)
81105b68:	108001cc 	andi	r2,r2,7
81105b6c:	1007883a 	mov	r3,r2
81105b70:	e0bff403 	ldbu	r2,-48(fp)
81105b74:	1884b03a 	or	r2,r3,r2
81105b78:	e0bff405 	stb	r2,-48(fp)
    
    SPI_FO(0); // use internal conversion clock
81105b7c:	0007883a 	mov	r3,zero
81105b80:	00a00034 	movhi	r2,32768
81105b84:	10813c04 	addi	r2,r2,1264
81105b88:	10c00035 	stwio	r3,0(r2)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
81105b8c:	0007883a 	mov	r3,zero
81105b90:	00a00034 	movhi	r2,32768
81105b94:	10814404 	addi	r2,r2,1296
81105b98:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(IcIndex, 0);  // chip select: active
81105b9c:	e0bffc03 	ldbu	r2,-16(fp)
81105ba0:	1000021e 	bne	r2,zero,81105bac <POWER_SPI_RW+0xec>
81105ba4:	00c00084 	movi	r3,2
81105ba8:	00000106 	br	81105bb0 <POWER_SPI_RW+0xf0>
81105bac:	00c00044 	movi	r3,1
81105bb0:	00a00034 	movhi	r2,32768
81105bb4:	10814004 	addi	r2,r2,1280
81105bb8:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81105bbc:	010003c4 	movi	r4,15
81105bc0:	11202500 	call	81120250 <usleep>
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81105bc4:	00000306 	br	81105bd4 <POWER_SPI_RW+0x114>
        nWait++;
81105bc8:	e0bff817 	ldw	r2,-32(fp)
81105bcc:	10800044 	addi	r2,r2,1
81105bd0:	e0bff815 	stw	r2,-32(fp)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
    SPI_CS_N(IcIndex, 0);  // chip select: active
    SPI_DELAY;
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81105bd4:	00a00034 	movhi	r2,32768
81105bd8:	10814c04 	addi	r2,r2,1328
81105bdc:	10800037 	ldwio	r2,0(r2)
81105be0:	1080004c 	andi	r2,r2,1
81105be4:	10000326 	beq	r2,zero,81105bf4 <POWER_SPI_RW+0x134>
81105be8:	e0fff817 	ldw	r3,-32(fp)
81105bec:	e0bffa17 	ldw	r2,-24(fp)
81105bf0:	18bff516 	blt	r3,r2,81105bc8 <__reset+0xfb0e5bc8>
        nWait++;
    }
    
    if (SPI_SDO){
81105bf4:	00a00034 	movhi	r2,32768
81105bf8:	10814c04 	addi	r2,r2,1328
81105bfc:	10800037 	ldwio	r2,0(r2)
81105c00:	1080004c 	andi	r2,r2,1
81105c04:	10000626 	beq	r2,zero,81105c20 <POWER_SPI_RW+0x160>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
81105c08:	00c000c4 	movi	r3,3
81105c0c:	00a00034 	movhi	r2,32768
81105c10:	10814004 	addi	r2,r2,1280
81105c14:	10c00035 	stwio	r3,0(r2)
//        printf("Timeout \r\n");
        return FALSE;
81105c18:	0005883a 	mov	r2,zero
81105c1c:	0000db06 	br	81105f8c <POWER_SPI_RW+0x4cc>
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81105c20:	e03ff715 	stw	zero,-36(fp)
81105c24:	00002406 	br	81105cb8 <POWER_SPI_RW+0x1f8>
    // ignore EOC/ and DMY bits
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81105c28:	e0bff403 	ldbu	r2,-48(fp)
81105c2c:	10803fcc 	andi	r2,r2,255
81105c30:	1004d1fa 	srli	r2,r2,7
81105c34:	10c03fcc 	andi	r3,r2,255
81105c38:	00a00034 	movhi	r2,32768
81105c3c:	10814804 	addi	r2,r2,1312
81105c40:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81105c44:	e0bff403 	ldbu	r2,-48(fp)
81105c48:	1085883a 	add	r2,r2,r2
81105c4c:	e0bff405 	stb	r2,-48(fp)
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81105c50:	e0bff517 	ldw	r2,-44(fp)
81105c54:	1085883a 	add	r2,r2,r2
81105c58:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
81105c5c:	00a00034 	movhi	r2,32768
81105c60:	10814c04 	addi	r2,r2,1328
81105c64:	10800037 	ldwio	r2,0(r2)
81105c68:	1080004c 	andi	r2,r2,1
81105c6c:	1007883a 	mov	r3,r2
81105c70:	e0bff517 	ldw	r2,-44(fp)
81105c74:	10c4b03a 	or	r2,r2,r3
81105c78:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105c7c:	00c00044 	movi	r3,1
81105c80:	00a00034 	movhi	r2,32768
81105c84:	10814404 	addi	r2,r2,1296
81105c88:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105c8c:	010003c4 	movi	r4,15
81105c90:	11202500 	call	81120250 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105c94:	0007883a 	mov	r3,zero
81105c98:	00a00034 	movhi	r2,32768
81105c9c:	10814404 	addi	r2,r2,1296
81105ca0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105ca4:	010003c4 	movi	r4,15
81105ca8:	11202500 	call	81120250 <usleep>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
//        printf("Timeout \r\n");
        return FALSE;
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81105cac:	e0bff717 	ldw	r2,-36(fp)
81105cb0:	10800044 	addi	r2,r2,1
81105cb4:	e0bff715 	stw	r2,-36(fp)
81105cb8:	e0bff717 	ldw	r2,-36(fp)
81105cbc:	10800090 	cmplti	r2,r2,2
81105cc0:	103fd91e 	bne	r2,zero,81105c28 <__reset+0xfb0e5c28>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
81105cc4:	e03ff715 	stw	zero,-36(fp)
81105cc8:	00002406 	br	81105d5c <POWER_SPI_RW+0x29c>
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81105ccc:	e0bff403 	ldbu	r2,-48(fp)
81105cd0:	10803fcc 	andi	r2,r2,255
81105cd4:	1004d1fa 	srli	r2,r2,7
81105cd8:	10c03fcc 	andi	r3,r2,255
81105cdc:	00a00034 	movhi	r2,32768
81105ce0:	10814804 	addi	r2,r2,1312
81105ce4:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81105ce8:	e0bff403 	ldbu	r2,-48(fp)
81105cec:	1085883a 	add	r2,r2,r2
81105cf0:	e0bff405 	stb	r2,-48(fp)
        
        Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81105cf4:	e0bff517 	ldw	r2,-44(fp)
81105cf8:	1085883a 	add	r2,r2,r2
81105cfc:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81105d00:	00a00034 	movhi	r2,32768
81105d04:	10814c04 	addi	r2,r2,1328
81105d08:	10800037 	ldwio	r2,0(r2)
81105d0c:	1080004c 	andi	r2,r2,1
81105d10:	1007883a 	mov	r3,r2
81105d14:	e0bff517 	ldw	r2,-44(fp)
81105d18:	10c4b03a 	or	r2,r2,r3
81105d1c:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105d20:	00c00044 	movi	r3,1
81105d24:	00a00034 	movhi	r2,32768
81105d28:	10814404 	addi	r2,r2,1296
81105d2c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105d30:	010003c4 	movi	r4,15
81105d34:	11202500 	call	81120250 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105d38:	0007883a 	mov	r3,zero
81105d3c:	00a00034 	movhi	r2,32768
81105d40:	10814404 	addi	r2,r2,1296
81105d44:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105d48:	010003c4 	movi	r4,15
81105d4c:	11202500 	call	81120250 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
81105d50:	e0bff717 	ldw	r2,-36(fp)
81105d54:	10800044 	addi	r2,r2,1
81105d58:	e0bff715 	stw	r2,-36(fp)
81105d5c:	e0bff717 	ldw	r2,-36(fp)
81105d60:	10800210 	cmplti	r2,r2,8
81105d64:	103fd91e 	bne	r2,zero,81105ccc <__reset+0xfb0e5ccc>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81105d68:	e03ff715 	stw	zero,-36(fp)
81105d6c:	00001a06 	br	81105dd8 <POWER_SPI_RW+0x318>
    {
        Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81105d70:	e0bff517 	ldw	r2,-44(fp)
81105d74:	1085883a 	add	r2,r2,r2
81105d78:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81105d7c:	00a00034 	movhi	r2,32768
81105d80:	10814c04 	addi	r2,r2,1328
81105d84:	10800037 	ldwio	r2,0(r2)
81105d88:	1080004c 	andi	r2,r2,1
81105d8c:	1007883a 	mov	r3,r2
81105d90:	e0bff517 	ldw	r2,-44(fp)
81105d94:	10c4b03a 	or	r2,r2,r3
81105d98:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105d9c:	00c00044 	movi	r3,1
81105da0:	00a00034 	movhi	r2,32768
81105da4:	10814404 	addi	r2,r2,1296
81105da8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105dac:	010003c4 	movi	r4,15
81105db0:	11202500 	call	81120250 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105db4:	0007883a 	mov	r3,zero
81105db8:	00a00034 	movhi	r2,32768
81105dbc:	10814404 	addi	r2,r2,1296
81105dc0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105dc4:	010003c4 	movi	r4,15
81105dc8:	11202500 	call	81120250 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81105dcc:	e0bff717 	ldw	r2,-36(fp)
81105dd0:	10800044 	addi	r2,r2,1
81105dd4:	e0bff715 	stw	r2,-36(fp)
81105dd8:	e0bff717 	ldw	r2,-36(fp)
81105ddc:	10800210 	cmplti	r2,r2,8
81105de0:	103fe31e 	bne	r2,zero,81105d70 <__reset+0xfb0e5d70>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
81105de4:	e03ff715 	stw	zero,-36(fp)
81105de8:	00001a06 	br	81105e54 <POWER_SPI_RW+0x394>
    {
        Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
81105dec:	e0bff517 	ldw	r2,-44(fp)
81105df0:	1085883a 	add	r2,r2,r2
81105df4:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_1.0 = sdo; // load lsb
81105df8:	00a00034 	movhi	r2,32768
81105dfc:	10814c04 	addi	r2,r2,1328
81105e00:	10800037 	ldwio	r2,0(r2)
81105e04:	1080004c 	andi	r2,r2,1
81105e08:	1007883a 	mov	r3,r2
81105e0c:	e0bff517 	ldw	r2,-44(fp)
81105e10:	10c4b03a 	or	r2,r2,r3
81105e14:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105e18:	00c00044 	movi	r3,1
81105e1c:	00a00034 	movhi	r2,32768
81105e20:	10814404 	addi	r2,r2,1296
81105e24:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105e28:	010003c4 	movi	r4,15
81105e2c:	11202500 	call	81120250 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105e30:	0007883a 	mov	r3,zero
81105e34:	00a00034 	movhi	r2,32768
81105e38:	10814404 	addi	r2,r2,1296
81105e3c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105e40:	010003c4 	movi	r4,15
81105e44:	11202500 	call	81120250 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
81105e48:	e0bff717 	ldw	r2,-36(fp)
81105e4c:	10800044 	addi	r2,r2,1
81105e50:	e0bff715 	stw	r2,-36(fp)
81105e54:	e0bff717 	ldw	r2,-36(fp)
81105e58:	10800210 	cmplti	r2,r2,8
81105e5c:	103fe31e 	bne	r2,zero,81105dec <__reset+0xfb0e5dec>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
81105e60:	e03ff715 	stw	zero,-36(fp)
81105e64:	00001a06 	br	81105ed0 <POWER_SPI_RW+0x410>
    {
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81105e68:	e0bff517 	ldw	r2,-44(fp)
81105e6c:	1085883a 	add	r2,r2,r2
81105e70:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
81105e74:	00a00034 	movhi	r2,32768
81105e78:	10814c04 	addi	r2,r2,1328
81105e7c:	10800037 	ldwio	r2,0(r2)
81105e80:	1080004c 	andi	r2,r2,1
81105e84:	1007883a 	mov	r3,r2
81105e88:	e0bff517 	ldw	r2,-44(fp)
81105e8c:	10c4b03a 	or	r2,r2,r3
81105e90:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105e94:	00c00044 	movi	r3,1
81105e98:	00a00034 	movhi	r2,32768
81105e9c:	10814404 	addi	r2,r2,1296
81105ea0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105ea4:	010003c4 	movi	r4,15
81105ea8:	11202500 	call	81120250 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105eac:	0007883a 	mov	r3,zero
81105eb0:	00a00034 	movhi	r2,32768
81105eb4:	10814404 	addi	r2,r2,1296
81105eb8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105ebc:	010003c4 	movi	r4,15
81105ec0:	11202500 	call	81120250 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
81105ec4:	e0bff717 	ldw	r2,-36(fp)
81105ec8:	10800044 	addi	r2,r2,1
81105ecc:	e0bff715 	stw	r2,-36(fp)
81105ed0:	e0bff717 	ldw	r2,-36(fp)
81105ed4:	10800190 	cmplti	r2,r2,6
81105ed8:	103fe31e 	bne	r2,zero,81105e68 <__reset+0xfb0e5e68>
        SPI_SCK(1);//sck=1; // clock high
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    SPI_SCK(1);
81105edc:	00c00044 	movi	r3,1
81105ee0:	00a00034 	movhi	r2,32768
81105ee4:	10814404 	addi	r2,r2,1296
81105ee8:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81105eec:	010003c4 	movi	r4,15
81105ef0:	11202500 	call	81120250 <usleep>
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
81105ef4:	00c000c4 	movi	r3,3
81105ef8:	00a00034 	movhi	r2,32768
81105efc:	10814004 	addi	r2,r2,1280
81105f00:	10c00035 	stwio	r3,0(r2)
    
    // check parity
    nZeroCnt = 0;
81105f04:	e03ff915 	stw	zero,-28(fp)
    Mask32 = 0x01;
81105f08:	00800044 	movi	r2,1
81105f0c:	e0bff615 	stw	r2,-40(fp)
    for(i=0;i<32;i++){
81105f10:	e03ff715 	stw	zero,-36(fp)
81105f14:	00000d06 	br	81105f4c <POWER_SPI_RW+0x48c>
        if ((Value32 & Mask32) == 0x00){
81105f18:	e0fff517 	ldw	r3,-44(fp)
81105f1c:	e0bff617 	ldw	r2,-40(fp)
81105f20:	1884703a 	and	r2,r3,r2
81105f24:	1000031e 	bne	r2,zero,81105f34 <POWER_SPI_RW+0x474>
            nZeroCnt++;
81105f28:	e0bff917 	ldw	r2,-28(fp)
81105f2c:	10800044 	addi	r2,r2,1
81105f30:	e0bff915 	stw	r2,-28(fp)
        }
        Mask32 <<= 1;
81105f34:	e0bff617 	ldw	r2,-40(fp)
81105f38:	1085883a 	add	r2,r2,r2
81105f3c:	e0bff615 	stw	r2,-40(fp)
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
    
    // check parity
    nZeroCnt = 0;
    Mask32 = 0x01;
    for(i=0;i<32;i++){
81105f40:	e0bff717 	ldw	r2,-36(fp)
81105f44:	10800044 	addi	r2,r2,1
81105f48:	e0bff715 	stw	r2,-36(fp)
81105f4c:	e0bff717 	ldw	r2,-36(fp)
81105f50:	10800810 	cmplti	r2,r2,32
81105f54:	103ff01e 	bne	r2,zero,81105f18 <__reset+0xfb0e5f18>
        if ((Value32 & Mask32) == 0x00){
            nZeroCnt++;
        }
        Mask32 <<= 1;
    }
    bSuccess = (nZeroCnt&0x01)?FALSE:TRUE;
81105f58:	e0bff917 	ldw	r2,-28(fp)
81105f5c:	1080004c 	andi	r2,r2,1
81105f60:	1005003a 	cmpeq	r2,r2,zero
81105f64:	10803fcc 	andi	r2,r2,255
81105f68:	e0bffb15 	stw	r2,-20(fp)
    if (!bSuccess){
81105f6c:	e0bffb17 	ldw	r2,-20(fp)
81105f70:	1000021e 	bne	r2,zero,81105f7c <POWER_SPI_RW+0x4bc>
//        printf("Parity Check Error \r\n");
        return FALSE;
81105f74:	0005883a 	mov	r2,zero
81105f78:	00000406 	br	81105f8c <POWER_SPI_RW+0x4cc>
    }        
    
    
    *pValue = Value32;
81105f7c:	e0800317 	ldw	r2,12(fp)
81105f80:	e0fff517 	ldw	r3,-44(fp)
81105f84:	10c00015 	stw	r3,0(r2)
    
    return bSuccess;
81105f88:	e0bffb17 	ldw	r2,-20(fp)
}
81105f8c:	e037883a 	mov	sp,fp
81105f90:	dfc00117 	ldw	ra,4(sp)
81105f94:	df000017 	ldw	fp,0(sp)
81105f98:	dec00204 	addi	sp,sp,8
81105f9c:	f800283a 	ret

81105fa0 <v_spi_start>:
#define SPI_CS_N(x) IOWR_ALTERA_AVALON_PIO_DATA(RTCC_CS_N_BASE,x)
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(RTCC_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(RTCC_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(150)  // based on 50MHZ of CPU clock

void v_spi_start(void){
81105fa0:	defffe04 	addi	sp,sp,-8
81105fa4:	dfc00115 	stw	ra,4(sp)
81105fa8:	df000015 	stw	fp,0(sp)
81105fac:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
81105fb0:	0007883a 	mov	r3,zero
81105fb4:	00a00034 	movhi	r2,32768
81105fb8:	10812404 	addi	r2,r2,1168
81105fbc:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
81105fc0:	0007883a 	mov	r3,zero
81105fc4:	00a00034 	movhi	r2,32768
81105fc8:	10812004 	addi	r2,r2,1152
81105fcc:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81105fd0:	01002584 	movi	r4,150
81105fd4:	11202500 	call	81120250 <usleep>
}
81105fd8:	0001883a 	nop
81105fdc:	e037883a 	mov	sp,fp
81105fe0:	dfc00117 	ldw	ra,4(sp)
81105fe4:	df000017 	ldw	fp,0(sp)
81105fe8:	dec00204 	addi	sp,sp,8
81105fec:	f800283a 	ret

81105ff0 <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
81105ff0:	defffc04 	addi	sp,sp,-16
81105ff4:	dfc00315 	stw	ra,12(sp)
81105ff8:	df000215 	stw	fp,8(sp)
81105ffc:	df000204 	addi	fp,sp,8
81106000:	2005883a 	mov	r2,r4
81106004:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
81106008:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
8110600c:	00bfe004 	movi	r2,-128
81106010:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81106014:	e03ffe05 	stb	zero,-8(fp)
81106018:	00001b06 	br	81106088 <v_spi_send_byte+0x98>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
8110601c:	e0ffff03 	ldbu	r3,-4(fp)
81106020:	e0bffe43 	ldbu	r2,-7(fp)
81106024:	1884703a 	and	r2,r3,r2
81106028:	10803fcc 	andi	r2,r2,255
8110602c:	1004c03a 	cmpne	r2,r2,zero
81106030:	10c03fcc 	andi	r3,r2,255
81106034:	00a00034 	movhi	r2,32768
81106038:	10812804 	addi	r2,r2,1184
8110603c:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
81106040:	e0bffe43 	ldbu	r2,-7(fp)
81106044:	1004d07a 	srli	r2,r2,1
81106048:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
8110604c:	00c00044 	movi	r3,1
81106050:	00a00034 	movhi	r2,32768
81106054:	10812404 	addi	r2,r2,1168
81106058:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110605c:	01002584 	movi	r4,150
81106060:	11202500 	call	81120250 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106064:	0007883a 	mov	r3,zero
81106068:	00a00034 	movhi	r2,32768
8110606c:	10812404 	addi	r2,r2,1168
81106070:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106074:	01002584 	movi	r4,150
81106078:	11202500 	call	81120250 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
8110607c:	e0bffe03 	ldbu	r2,-8(fp)
81106080:	10800044 	addi	r2,r2,1
81106084:	e0bffe05 	stb	r2,-8(fp)
81106088:	e0bffe03 	ldbu	r2,-8(fp)
8110608c:	10800230 	cmpltui	r2,r2,8
81106090:	103fe21e 	bne	r2,zero,8110601c <__reset+0xfb0e601c>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
81106094:	0001883a 	nop
81106098:	e037883a 	mov	sp,fp
8110609c:	dfc00117 	ldw	ra,4(sp)
811060a0:	df000017 	ldw	fp,0(sp)
811060a4:	dec00204 	addi	sp,sp,8
811060a8:	f800283a 	ret

811060ac <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
811060ac:	defffd04 	addi	sp,sp,-12
811060b0:	dfc00215 	stw	ra,8(sp)
811060b4:	df000115 	stw	fp,4(sp)
811060b8:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
811060bc:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
811060c0:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
811060c4:	e03fff05 	stb	zero,-4(fp)
811060c8:	00001a06 	br	81106134 <uc_spi_get_byte+0x88>
    {
        uc_data <<= 1;
811060cc:	e0bfff43 	ldbu	r2,-3(fp)
811060d0:	1085883a 	add	r2,r2,r2
811060d4:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
811060d8:	00a00034 	movhi	r2,32768
811060dc:	10812c04 	addi	r2,r2,1200
811060e0:	10800037 	ldwio	r2,0(r2)
811060e4:	1080004c 	andi	r2,r2,1
811060e8:	1007883a 	mov	r3,r2
811060ec:	e0bfff43 	ldbu	r2,-3(fp)
811060f0:	1884b03a 	or	r2,r3,r2
811060f4:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
811060f8:	00c00044 	movi	r3,1
811060fc:	00a00034 	movhi	r2,32768
81106100:	10812404 	addi	r2,r2,1168
81106104:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106108:	01002584 	movi	r4,150
8110610c:	11202500 	call	81120250 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106110:	0007883a 	mov	r3,zero
81106114:	00a00034 	movhi	r2,32768
81106118:	10812404 	addi	r2,r2,1168
8110611c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106120:	01002584 	movi	r4,150
81106124:	11202500 	call	81120250 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
81106128:	e0bfff03 	ldbu	r2,-4(fp)
8110612c:	10800044 	addi	r2,r2,1
81106130:	e0bfff05 	stb	r2,-4(fp)
81106134:	e0bfff03 	ldbu	r2,-4(fp)
81106138:	10800230 	cmpltui	r2,r2,8
8110613c:	103fe31e 	bne	r2,zero,811060cc <__reset+0xfb0e60cc>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
81106140:	e0bfff43 	ldbu	r2,-3(fp)
}
81106144:	e037883a 	mov	sp,fp
81106148:	dfc00117 	ldw	ra,4(sp)
8110614c:	df000017 	ldw	fp,0(sp)
81106150:	dec00204 	addi	sp,sp,8
81106154:	f800283a 	ret

81106158 <v_spi_end>:

void v_spi_end(void){
81106158:	defffe04 	addi	sp,sp,-8
8110615c:	dfc00115 	stw	ra,4(sp)
81106160:	df000015 	stw	fp,0(sp)
81106164:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
81106168:	0007883a 	mov	r3,zero
8110616c:	00a00034 	movhi	r2,32768
81106170:	10812404 	addi	r2,r2,1168
81106174:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81106178:	01002584 	movi	r4,150
8110617c:	11202500 	call	81120250 <usleep>
    SPI_CS_N(1);
81106180:	00c00044 	movi	r3,1
81106184:	00a00034 	movhi	r2,32768
81106188:	10812004 	addi	r2,r2,1152
8110618c:	10c00035 	stwio	r3,0(r2)
}
81106190:	0001883a 	nop
81106194:	e037883a 	mov	sp,fp
81106198:	dfc00117 	ldw	ra,4(sp)
8110619c:	df000017 	ldw	fp,0(sp)
811061a0:	dec00204 	addi	sp,sp,8
811061a4:	f800283a 	ret

811061a8 <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
811061a8:	defff404 	addi	sp,sp,-48
811061ac:	dfc00b15 	stw	ra,44(sp)
811061b0:	df000a15 	stw	fp,40(sp)
811061b4:	df000a04 	addi	fp,sp,40
811061b8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811061bc:	e03ff915 	stw	zero,-28(fp)

    alt_u8 uc_EUI48_B0 = 0;
811061c0:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 uc_EUI48_B1 = 0;
811061c4:	e03ffa45 	stb	zero,-23(fp)
    alt_u8 uc_EUI48_B2 = 0;
811061c8:	e03ffa85 	stb	zero,-22(fp)
    alt_u8 uc_EUI48_B3 = 0;
811061cc:	e03ffac5 	stb	zero,-21(fp)
    alt_u8 uc_EUI48_B4 = 0;
811061d0:	e03ffb05 	stb	zero,-20(fp)
    alt_u8 uc_EUI48_B5 = 0;
811061d4:	e03ffb45 	stb	zero,-19(fp)

    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
811061d8:	00800084 	movi	r2,2
811061dc:	e0bffb85 	stb	r2,-18(fp)
    const alt_u8 uc_EUI48_B1_addr = 0x03;
811061e0:	008000c4 	movi	r2,3
811061e4:	e0bffbc5 	stb	r2,-17(fp)
    const alt_u8 uc_EUI48_B2_addr = 0x04;
811061e8:	00800104 	movi	r2,4
811061ec:	e0bffc05 	stb	r2,-16(fp)
    const alt_u8 uc_EUI48_B3_addr = 0x05;
811061f0:	00800144 	movi	r2,5
811061f4:	e0bffc45 	stb	r2,-15(fp)
    const alt_u8 uc_EUI48_B4_addr = 0x06;
811061f8:	00800184 	movi	r2,6
811061fc:	e0bffc85 	stb	r2,-14(fp)
    const alt_u8 uc_EUI48_B5_addr = 0x07;
81106200:	008001c4 	movi	r2,7
81106204:	e0bffcc5 	stb	r2,-13(fp)

    const alt_u8 uc_IDREAD_cmd = 0x33;
81106208:	00800cc4 	movi	r2,51
8110620c:	e0bffd05 	stb	r2,-12(fp)

    int i = 0;
81106210:	e03ffe15 	stw	zero,-8(fp)
    
    // Start Communication
    v_spi_start();
81106214:	1105fa00 	call	81105fa0 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81106218:	e0bffd03 	ldbu	r2,-12(fp)
8110621c:	1009883a 	mov	r4,r2
81106220:	1105ff00 	call	81105ff0 <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81106224:	e0bffb83 	ldbu	r2,-18(fp)
81106228:	1009883a 	mov	r4,r2
8110622c:	1105ff00 	call	81105ff0 <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
81106230:	11060ac0 	call	811060ac <uc_spi_get_byte>
81106234:	e0bffa05 	stb	r2,-24(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
81106238:	11060ac0 	call	811060ac <uc_spi_get_byte>
8110623c:	e0bffa45 	stb	r2,-23(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81106240:	11060ac0 	call	811060ac <uc_spi_get_byte>
81106244:	e0bffa85 	stb	r2,-22(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
81106248:	11060ac0 	call	811060ac <uc_spi_get_byte>
8110624c:	e0bffac5 	stb	r2,-21(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81106250:	11060ac0 	call	811060ac <uc_spi_get_byte>
81106254:	e0bffb05 	stb	r2,-20(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
81106258:	11060ac0 	call	811060ac <uc_spi_get_byte>
8110625c:	e0bffb45 	stb	r2,-19(fp)

    // End communication
    v_spi_end();
81106260:	11061580 	call	81106158 <v_spi_end>

    bSuccess = TRUE;
81106264:	00800044 	movi	r2,1
81106268:	e0bff915 	stw	r2,-28(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
8110626c:	e0bfff17 	ldw	r2,-4(fp)
81106270:	e0fffa03 	ldbu	r3,-24(fp)
81106274:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
81106278:	e0bfff17 	ldw	r2,-4(fp)
8110627c:	10800044 	addi	r2,r2,1
81106280:	e0fffa43 	ldbu	r3,-23(fp)
81106284:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
81106288:	e0bfff17 	ldw	r2,-4(fp)
8110628c:	10800084 	addi	r2,r2,2
81106290:	e0fffa83 	ldbu	r3,-22(fp)
81106294:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81106298:	e0bfff17 	ldw	r2,-4(fp)
8110629c:	108000c4 	addi	r2,r2,3
811062a0:	e0fffac3 	ldbu	r3,-21(fp)
811062a4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
811062a8:	e0bfff17 	ldw	r2,-4(fp)
811062ac:	10800104 	addi	r2,r2,4
811062b0:	e0fffb03 	ldbu	r3,-20(fp)
811062b4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
811062b8:	e0bfff17 	ldw	r2,-4(fp)
811062bc:	10800144 	addi	r2,r2,5
811062c0:	e0fffb43 	ldbu	r3,-19(fp)
811062c4:	10c00005 	stb	r3,0(r2)

    printf("RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
811062c8:	e17ffa03 	ldbu	r5,-24(fp)
811062cc:	e1bffa43 	ldbu	r6,-23(fp)
811062d0:	e1fffa83 	ldbu	r7,-22(fp)
811062d4:	e0bffac3 	ldbu	r2,-21(fp)
811062d8:	e0fffb03 	ldbu	r3,-20(fp)
811062dc:	e13ffb43 	ldbu	r4,-19(fp)
811062e0:	d9000215 	stw	r4,8(sp)
811062e4:	d8c00115 	stw	r3,4(sp)
811062e8:	d8800015 	stw	r2,0(sp)
811062ec:	012044f4 	movhi	r4,33043
811062f0:	210b8804 	addi	r4,r4,11808
811062f4:	110b56c0 	call	8110b56c <printf>

    return bSuccess;
811062f8:	e0bff917 	ldw	r2,-28(fp)
}
811062fc:	e037883a 	mov	sp,fp
81106300:	dfc00117 	ldw	ra,4(sp)
81106304:	df000017 	ldw	fp,0(sp)
81106308:	dec00204 	addi	sp,sp,8
8110630c:	f800283a 	ret

81106310 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
81106310:	defffd04 	addi	sp,sp,-12
81106314:	df000215 	stw	fp,8(sp)
81106318:	df000204 	addi	fp,sp,8
8110631c:	2005883a 	mov	r2,r4
81106320:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
81106324:	e0bfff03 	ldbu	r2,-4(fp)
81106328:	10c00168 	cmpgeui	r3,r2,5
8110632c:	18001c1e 	bne	r3,zero,811063a0 <bSSDisplayConfig+0x90>
81106330:	100690ba 	slli	r3,r2,2
81106334:	00a04434 	movhi	r2,33040
81106338:	1098d204 	addi	r2,r2,25416
8110633c:	1885883a 	add	r2,r3,r2
81106340:	10800017 	ldw	r2,0(r2)
81106344:	1000683a 	jmp	r2
81106348:	8110635c 	xori	r4,r16,16781
8110634c:	81106368 	cmpgeui	r4,r16,16781
81106350:	81106374 	orhi	r4,r16,16781
81106354:	81106388 	cmpgei	r4,r16,16782
81106358:	81106398 	cmpnei	r4,r16,16782
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
8110635c:	00800cc4 	movi	r2,51
81106360:	d0a05105 	stb	r2,-32444(gp)
	    break;
81106364:	00001006 	br	811063a8 <bSSDisplayConfig+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81106368:	00801544 	movi	r2,85
8110636c:	d0a05105 	stb	r2,-32444(gp)
	    break;
81106370:	00000d06 	br	811063a8 <bSSDisplayConfig+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
81106374:	d0e05103 	ldbu	r3,-32444(gp)
81106378:	00bff744 	movi	r2,-35
8110637c:	1884703a 	and	r2,r3,r2
81106380:	d0a05105 	stb	r2,-32444(gp)
	    break;
81106384:	00000806 	br	811063a8 <bSSDisplayConfig+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81106388:	d0a05103 	ldbu	r2,-32444(gp)
8110638c:	10800894 	ori	r2,r2,34
81106390:	d0a05105 	stb	r2,-32444(gp)
	    break;
81106394:	00000406 	br	811063a8 <bSSDisplayConfig+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81106398:	d0205105 	stb	zero,-32444(gp)
	    break;
8110639c:	00000206 	br	811063a8 <bSSDisplayConfig+0x98>
		
		default:
		    return FALSE;
811063a0:	0005883a 	mov	r2,zero
811063a4:	00000806 	br	811063c8 <bSSDisplayConfig+0xb8>
	}

	alt_u32 *pSsdpAddr = SSDP_BASE;
811063a8:	00a00034 	movhi	r2,32768
811063ac:	10817c04 	addi	r2,r2,1520
811063b0:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
811063b4:	d0a05103 	ldbu	r2,-32444(gp)
811063b8:	10c03fcc 	andi	r3,r2,255
811063bc:	e0bffe17 	ldw	r2,-8(fp)
811063c0:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811063c4:	00800044 	movi	r2,1
}
811063c8:	e037883a 	mov	sp,fp
811063cc:	df000017 	ldw	fp,0(sp)
811063d0:	dec00104 	addi	sp,sp,4
811063d4:	f800283a 	ret

811063d8 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
811063d8:	defffd04 	addi	sp,sp,-12
811063dc:	df000215 	stw	fp,8(sp)
811063e0:	df000204 	addi	fp,sp,8
811063e4:	2005883a 	mov	r2,r4
811063e8:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = SSDP_BASE;
811063ec:	00a00034 	movhi	r2,32768
811063f0:	10817c04 	addi	r2,r2,1520
811063f4:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
811063f8:	e0bffe17 	ldw	r2,-8(fp)
811063fc:	10800104 	addi	r2,r2,4
81106400:	e0ffff03 	ldbu	r3,-4(fp)
81106404:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81106408:	00800044 	movi	r2,1
}
8110640c:	e037883a 	mov	sp,fp
81106410:	df000017 	ldw	fp,0(sp)
81106414:	dec00104 	addi	sp,sp,4
81106418:	f800283a 	ret

8110641c <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
8110641c:	defff704 	addi	sp,sp,-36
81106420:	dfc00815 	stw	ra,32(sp)
81106424:	df000715 	stw	fp,28(sp)
81106428:	df000704 	addi	fp,sp,28
8110642c:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81106430:	e03ffe05 	stb	zero,-8(fp)

	/* READ: Create the task that is responsible to READ UART buffer */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vReceiverComTask,
81106434:	00800104 	movi	r2,4
81106438:	d8800415 	stw	r2,16(sp)
8110643c:	d8000315 	stw	zero,12(sp)
81106440:	00820004 	movi	r2,2048
81106444:	d8800215 	stw	r2,8(sp)
81106448:	00a04574 	movhi	r2,33045
8110644c:	10b8f204 	addi	r2,r2,-7224
81106450:	d8800115 	stw	r2,4(sp)
81106454:	00800404 	movi	r2,16
81106458:	d8800015 	stw	r2,0(sp)
8110645c:	01c00404 	movi	r7,16
81106460:	01a04574 	movhi	r6,33045
81106464:	3180f104 	addi	r6,r6,964
81106468:	000b883a 	mov	r5,zero
8110646c:	01204434 	movhi	r4,33040
81106470:	21195104 	addi	r4,r4,25924
81106474:	11269e40 	call	811269e4 <OSTaskCreateExt>
81106478:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
8110647c:	e0bffe03 	ldbu	r2,-8(fp)
81106480:	10000426 	beq	r2,zero,81106494 <vInitialTask+0x78>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81106484:	e0bffe03 	ldbu	r2,-8(fp)
81106488:	1009883a 	mov	r4,r2
8110648c:	11085000 	call	81108500 <printErrorTask>
		#endif
		vFailReceiverCreate();
81106490:	11086300 	call	81108630 <vFailReceiverCreate>
	}

	/* SEND: Create the task that is responsible to SEND UART packets */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vSenderComTask,
81106494:	00800104 	movi	r2,4
81106498:	d8800415 	stw	r2,16(sp)
8110649c:	d8000315 	stw	zero,12(sp)
811064a0:	00820004 	movi	r2,2048
811064a4:	d8800215 	stw	r2,8(sp)
811064a8:	00a04574 	movhi	r2,33045
811064ac:	10a8f204 	addi	r2,r2,-23608
811064b0:	d8800115 	stw	r2,4(sp)
811064b4:	008003c4 	movi	r2,15
811064b8:	d8800015 	stw	r2,0(sp)
811064bc:	01c003c4 	movi	r7,15
811064c0:	01a04574 	movhi	r6,33045
811064c4:	31b0f104 	addi	r6,r6,-15420
811064c8:	000b883a 	mov	r5,zero
811064cc:	01204434 	movhi	r4,33040
811064d0:	211d3d04 	addi	r4,r4,29940
811064d4:	11269e40 	call	811269e4 <OSTaskCreateExt>
811064d8:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
811064dc:	e0bffe03 	ldbu	r2,-8(fp)
811064e0:	10000426 	beq	r2,zero,811064f4 <vInitialTask+0xd8>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
811064e4:	e0bffe03 	ldbu	r2,-8(fp)
811064e8:	1009883a 	mov	r4,r2
811064ec:	11085000 	call	81108500 <printErrorTask>
		#endif
		vFailSenderCreate();
811064f0:	11086740 	call	81108674 <vFailSenderCreate>
	}


	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
811064f4:	01003fc4 	movi	r4,255
811064f8:	1126bc80 	call	81126bc8 <OSTaskDel>
811064fc:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
81106500:	e0bffe03 	ldbu	r2,-8(fp)
81106504:	10000726 	beq	r2,zero,81106524 <vInitialTask+0x108>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81106508:	e0bffe03 	ldbu	r2,-8(fp)
8110650c:	1009883a 	mov	r4,r2
81106510:	11085000 	call	81108500 <printErrorTask>
		#endif
		vFailDeleteInitialization();
81106514:	11086b80 	call	811086b8 <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
81106518:	01400504 	movi	r5,20
8110651c:	01000044 	movi	r4,1
81106520:	11263480 	call	81126348 <OSTaskChangePrio>
	}

	for(;;) { /* Correct Program Flow should never get here */
		OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
81106524:	01003fc4 	movi	r4,255
81106528:	1126bc80 	call	81126bc8 <OSTaskDel>
		OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
8110652c:	000f883a 	mov	r7,zero
81106530:	01800284 	movi	r6,10
81106534:	000b883a 	mov	r5,zero
81106538:	0009883a 	mov	r4,zero
8110653c:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
	}
81106540:	003ff806 	br	81106524 <__reset+0xfb0e6524>

81106544 <vReceiverComTask>:


/*  This function implements the task that will receive packet via UART
    also need to parse the command in order to send to the MEB task */
void vReceiverComTask(void *task_data)
{
81106544:	deffd704 	addi	sp,sp,-164
81106548:	dfc02815 	stw	ra,160(sp)
8110654c:	df002715 	stw	fp,156(sp)
81106550:	df002704 	addi	fp,sp,156
81106554:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81106558:	e03fda15 	stw	zero,-152(fp)
    INT8U error_code;
    tReceiverStates eReceiverMode;
    char cReceiveBuffer[SIZE_RCV_BUFFER];
    tPreParsed xPreParsedBuffer;
    
    eReceiverMode = sConfiguring;
8110655c:	e03fd915 	stw	zero,-156(fp)

    #ifdef DEBUG_ON
        debug(fp,"vReceiverComTask, enter task.\n");
81106560:	d0a05517 	ldw	r2,-32428(gp)
81106564:	100f883a 	mov	r7,r2
81106568:	01800784 	movi	r6,30
8110656c:	01400044 	movi	r5,1
81106570:	012044f4 	movhi	r4,33043
81106574:	210b9704 	addi	r4,r4,11868
81106578:	110a8700 	call	8110a870 <fwrite>
    #endif

    for(;;) {

        memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
8110657c:	e0bfdb44 	addi	r2,fp,-147
81106580:	01801004 	movi	r6,64
81106584:	000b883a 	mov	r5,zero
81106588:	1009883a 	mov	r4,r2
8110658c:	110b3b40 	call	8110b3b4 <memset>
        switch (eReceiverMode)
81106590:	e0bfd917 	ldw	r2,-156(fp)
81106594:	10800228 	cmpgeui	r2,r2,8
81106598:	1000b11e 	bne	r2,zero,81106860 <vReceiverComTask+0x31c>
8110659c:	e0bfd917 	ldw	r2,-156(fp)
811065a0:	100690ba 	slli	r3,r2,2
811065a4:	00a04434 	movhi	r2,33040
811065a8:	10996e04 	addi	r2,r2,26040
811065ac:	1885883a 	add	r2,r3,r2
811065b0:	10800017 	ldw	r2,0(r2)
811065b4:	1000683a 	jmp	r2
811065b8:	811065d8 	cmpnei	r4,r16,16791
811065bc:	811065e4 	muli	r4,r16,16791
811065c0:	8110664c 	andi	r4,r16,16793
811065c4:	8110674c 	andi	r4,r16,16797
811065c8:	811066b8 	rdprs	r4,r16,16794
811065cc:	811067b8 	rdprs	r4,r16,16798
811065d0:	81106868 	cmpgeui	r4,r16,16801
811065d4:	8110684c 	andi	r4,r16,16801
            case sConfiguring:
                /* Do nothing for now */
                if (BY_PASS)
                    eReceiverMode = sPiping;
                else
                    eReceiverMode = sWaitingConn;
811065d8:	00800084 	movi	r2,2
811065dc:	e0bfd915 	stw	r2,-156(fp)
                break;
811065e0:	0000a606 	br	8110687c <vReceiverComTask+0x338>
            case sPiping:
                /*  This mode is used to send everuthing that is received in UART
                    to the std console of NIOS II output */
                #ifdef DEBUG_ON
                    scanf("%s", cReceiveBuffer);
811065e4:	e0bfdb44 	addi	r2,fp,-147
811065e8:	100b883a 	mov	r5,r2
811065ec:	012044f4 	movhi	r4,33043
811065f0:	210b9f04 	addi	r4,r4,11900
811065f4:	110b8e00 	call	8110b8e0 <scanf>
                    if ( strcmp( cReceiveBuffer , CHANGE_MODE_SEQUENCE ) == 0 ) {
811065f8:	e0bfdb44 	addi	r2,fp,-147
811065fc:	017f7a14 	movui	r5,65000
81106600:	1009883a 	mov	r4,r2
81106604:	110bb4c0 	call	8110bb4c <strcmp>
81106608:	10000a1e 	bne	r2,zero,81106634 <vReceiverComTask+0xf0>
                        debug(fp,"Changing de mode of operation. \n");
8110660c:	d0a05517 	ldw	r2,-32428(gp)
81106610:	100f883a 	mov	r7,r2
81106614:	01800804 	movi	r6,32
81106618:	01400044 	movi	r5,1
8110661c:	012044f4 	movhi	r4,33043
81106620:	210ba004 	addi	r4,r4,11904
81106624:	110a8700 	call	8110a870 <fwrite>
                        eReceiverMode = sWaitingConn;
81106628:	00800084 	movi	r2,2
8110662c:	e0bfd915 	stw	r2,-156(fp)
                    }
                #else
                    eReceiverMode = sReceiving;
                #endif

                break;
81106630:	00009206 	br	8110687c <vReceiverComTask+0x338>
                    scanf("%s", cReceiveBuffer);
                    if ( strcmp( cReceiveBuffer , CHANGE_MODE_SEQUENCE ) == 0 ) {
                        debug(fp,"Changing de mode of operation. \n");
                        eReceiverMode = sWaitingConn;
                    } else {
                        debug(fp,cReceiveBuffer);
81106634:	d0a05517 	ldw	r2,-32428(gp)
81106638:	e0ffdb44 	addi	r3,fp,-147
8110663c:	180b883a 	mov	r5,r3
81106640:	1009883a 	mov	r4,r2
81106644:	110a2a40 	call	8110a2a4 <fprintf>
                    }
                #else
                    eReceiverMode = sReceiving;
                #endif

                break;
81106648:	00008c06 	br	8110687c <vReceiverComTask+0x338>
            case sWaitingConn:
                /*  This mode waits for the NUC send the status, this is how Simucam
                    knows that NUC is up */
            	bSuccess = FALSE;
8110664c:	e03fda15 	stw	zero,-152(fp)

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
81106650:	e0bfdb44 	addi	r2,fp,-147
81106654:	01801004 	movi	r6,64
81106658:	000b883a 	mov	r5,zero
8110665c:	1009883a 	mov	r4,r2
81106660:	110b3b40 	call	8110b3b4 <memset>
                scanf("%s", cReceiveBuffer);
81106664:	e0bfdb44 	addi	r2,fp,-147
81106668:	100b883a 	mov	r5,r2
8110666c:	012044f4 	movhi	r4,33043
81106670:	210b9f04 	addi	r4,r4,11900
81106674:	110b8e00 	call	8110b8e0 <scanf>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedBuffer );
81106678:	e0ffec04 	addi	r3,fp,-80
8110667c:	e0bfdb44 	addi	r2,fp,-147
81106680:	180b883a 	mov	r5,r3
81106684:	1009883a 	mov	r4,r2
81106688:	11068800 	call	81106880 <bPreParser>
8110668c:	e0bfda15 	stw	r2,-152(fp)

                if ( bSuccess ) {
81106690:	e0bfda17 	ldw	r2,-152(fp)
81106694:	10000326 	beq	r2,zero,811066a4 <vReceiverComTask+0x160>
                    eReceiverMode = sInitParsing;
81106698:	00800104 	movi	r2,4
8110669c:	e0bfd915 	stw	r2,-156(fp)
                } else {
                    eReceiverMode = sHandlingError;
                    xPreParsedBuffer.ucErrorFlag = eBadFormatInit;
                }

                break;
811066a0:	00007606 	br	8110687c <vReceiverComTask+0x338>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedBuffer );

                if ( bSuccess ) {
                    eReceiverMode = sInitParsing;
                } else {
                    eReceiverMode = sHandlingError;
811066a4:	008001c4 	movi	r2,7
811066a8:	e0bfd915 	stw	r2,-156(fp)
                    xPreParsedBuffer.ucErrorFlag = eBadFormatInit;
811066ac:	00800044 	movi	r2,1
811066b0:	e0bfec15 	stw	r2,-80(fp)
                }

                break;
811066b4:	00007106 	br	8110687c <vReceiverComTask+0x338>
            case sInitParsing:
                /* Check CRC8 */
                if ( xPreParsedBuffer.ucCalculatedCRC8 == xPreParsedBuffer.ucMessageCRC8 ) {
811066b8:	e0fffe03 	ldbu	r3,-8(fp)
811066bc:	e0bffe43 	ldbu	r2,-7(fp)
811066c0:	18c03fcc 	andi	r3,r3,255
811066c4:	10803fcc 	andi	r2,r2,255
811066c8:	1880141e 	bne	r3,r2,8110671c <vReceiverComTask+0x1d8>
                    eReceiverMode = sReceiving;
811066cc:	008000c4 	movi	r2,3
811066d0:	e0bfd915 	stw	r2,-156(fp)
                    /* Post Semaphore to tell to vSenderComTask to stop sending status packet*/
                    error_code = OSSemPost(xSemCommInit);
811066d4:	d0a05417 	ldw	r2,-32432(gp)
811066d8:	1009883a 	mov	r4,r2
811066dc:	11260280 	call	81126028 <OSSemPost>
811066e0:	e0bfdb05 	stb	r2,-148(fp)

                    if ( error_code != OS_ERR_NONE ) {
811066e4:	e0bfdb03 	ldbu	r2,-148(fp)
811066e8:	10006126 	beq	r2,zero,81106870 <vReceiverComTask+0x32c>
                        eReceiverMode = sHandlingError;
811066ec:	008001c4 	movi	r2,7
811066f0:	e0bfd915 	stw	r2,-156(fp)
                        xPreParsedBuffer.ucErrorFlag = eSemErrorInit;
811066f4:	008000c4 	movi	r2,3
811066f8:	e0bfec15 	stw	r2,-80(fp)
                        #ifdef DEBUG_ON
                            debug(fp,"Can't post semaphore to SenderTask.\n");
811066fc:	d0a05517 	ldw	r2,-32428(gp)
81106700:	100f883a 	mov	r7,r2
81106704:	01800904 	movi	r6,36
81106708:	01400044 	movi	r5,1
8110670c:	012044f4 	movhi	r4,33043
81106710:	210ba904 	addi	r4,r4,11940
81106714:	110a8700 	call	8110a870 <fwrite>
                    #ifdef DEBUG_ON
                        debug(fp,"CRC Fail. sInitParsing.\n");
                    #endif
                }

                break;                
81106718:	00005506 	br	81106870 <vReceiverComTask+0x32c>
                            debug(fp,"Can't post semaphore to SenderTask.\n");
                        #endif
                    }
                    
                } else {
                    eReceiverMode = sHandlingError;
8110671c:	008001c4 	movi	r2,7
81106720:	e0bfd915 	stw	r2,-156(fp)
                    xPreParsedBuffer.ucErrorFlag = eCRCErrorInit;
81106724:	00800084 	movi	r2,2
81106728:	e0bfec15 	stw	r2,-80(fp)
                    #ifdef DEBUG_ON
                        debug(fp,"CRC Fail. sInitParsing.\n");
8110672c:	d0a05517 	ldw	r2,-32428(gp)
81106730:	100f883a 	mov	r7,r2
81106734:	01800604 	movi	r6,24
81106738:	01400044 	movi	r5,1
8110673c:	012044f4 	movhi	r4,33043
81106740:	210bb304 	addi	r4,r4,11980
81106744:	110a8700 	call	8110a870 <fwrite>
                    #endif
                }

                break;                
81106748:	00004906 	br	81106870 <vReceiverComTask+0x32c>
            case sReceiving:

            	bSuccess = FALSE;
8110674c:	e03fda15 	stw	zero,-152(fp)

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
81106750:	e0bfdb44 	addi	r2,fp,-147
81106754:	01801004 	movi	r6,64
81106758:	000b883a 	mov	r5,zero
8110675c:	1009883a 	mov	r4,r2
81106760:	110b3b40 	call	8110b3b4 <memset>
                scanf("%s", cReceiveBuffer);
81106764:	e0bfdb44 	addi	r2,fp,-147
81106768:	100b883a 	mov	r5,r2
8110676c:	012044f4 	movhi	r4,33043
81106770:	210b9f04 	addi	r4,r4,11900
81106774:	110b8e00 	call	8110b8e0 <scanf>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedBuffer );
81106778:	e0ffec04 	addi	r3,fp,-80
8110677c:	e0bfdb44 	addi	r2,fp,-147
81106780:	180b883a 	mov	r5,r3
81106784:	1009883a 	mov	r4,r2
81106788:	11068800 	call	81106880 <bPreParser>
8110678c:	e0bfda15 	stw	r2,-152(fp)

                if ( bSuccess ) {
81106790:	e0bfda17 	ldw	r2,-152(fp)
81106794:	10000326 	beq	r2,zero,811067a4 <vReceiverComTask+0x260>
                    eReceiverMode = sParsing;
81106798:	00800144 	movi	r2,5
8110679c:	e0bfd915 	stw	r2,-156(fp)
                } else {
                    eReceiverMode = sHandlingError;
                    xPreParsedBuffer.ucErrorFlag = eBadFormat;
                } 

                break;
811067a0:	00003606 	br	8110687c <vReceiverComTask+0x338>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedBuffer );

                if ( bSuccess ) {
                    eReceiverMode = sParsing;
                } else {
                    eReceiverMode = sHandlingError;
811067a4:	008001c4 	movi	r2,7
811067a8:	e0bfd915 	stw	r2,-156(fp)
                    xPreParsedBuffer.ucErrorFlag = eBadFormat;
811067ac:	00800104 	movi	r2,4
811067b0:	e0bfec15 	stw	r2,-80(fp)
                } 

                break;
811067b4:	00003106 	br	8110687c <vReceiverComTask+0x338>
            case sParsing:
                /* At this point we have a preparsed command in the variable xPerPaecedBufer */
                /* Check CRC8 */
                if ( xPreParsedBuffer.ucCalculatedCRC8 == xPreParsedBuffer.ucMessageCRC8 ) {
811067b8:	e0fffe03 	ldbu	r3,-8(fp)
811067bc:	e0bffe43 	ldbu	r2,-7(fp)
811067c0:	18c03fcc 	andi	r3,r3,255
811067c4:	10803fcc 	andi	r2,r2,255
811067c8:	1880191e 	bne	r3,r2,81106830 <vReceiverComTask+0x2ec>
                    if ( xPreParsedBuffer.cCommand == 'P') {
811067cc:	e0bfed43 	ldbu	r2,-75(fp)
811067d0:	10803fcc 	andi	r2,r2,255
811067d4:	1080201c 	xori	r2,r2,128
811067d8:	10bfe004 	addi	r2,r2,-128
811067dc:	10801420 	cmpeqi	r2,r2,80
811067e0:	1000251e 	bne	r2,zero,81106878 <vReceiverComTask+0x334>
                        /* This is a PUS command, should handle properly */

                    } else {
                        /* Otherwise this is a internal control command */

                        switch (xPreParsedBuffer.cCommand)
811067e4:	e0bfed43 	ldbu	r2,-75(fp)
811067e8:	10803fcc 	andi	r2,r2,255
811067ec:	1080201c 	xori	r2,r2,128
811067f0:	10bfe004 	addi	r2,r2,-128
811067f4:	10c010e0 	cmpeqi	r3,r2,67
811067f8:	1800121e 	bne	r3,zero,81106844 <vReceiverComTask+0x300>
811067fc:	10801560 	cmpeqi	r2,r2,85
81106800:	1000011e 	bne	r2,zero,81106808 <vReceiverComTask+0x2c4>
                                break;
                            case 'C':
                                /* Send the ethernet configuration */
                                break;
                            default:
                                break;
81106804:	00001006 	br	81106848 <vReceiverComTask+0x304>
                        /* Otherwise this is a internal control command */

                        switch (xPreParsedBuffer.cCommand)
                        {
                            case 'U':
                                if ( xPreParsedBuffer.usiValues[0] == CHANGE_MODE_SEQUENCE ) {
81106808:	e0bfee0b 	ldhu	r2,-72(fp)
8110680c:	10ffffcc 	andi	r3,r2,65535
81106810:	00bf7a14 	movui	r2,65000
81106814:	1880031e 	bne	r3,r2,81106824 <vReceiverComTask+0x2e0>
                                    /* Change to Piping mode */
                                    eReceiverMode = sPiping;
81106818:	00800044 	movi	r2,1
8110681c:	e0bfd915 	stw	r2,-156(fp)
                                } else {
                                    eReceiverMode = sReceiving;
                                }
                                break;
81106820:	00000906 	br	81106848 <vReceiverComTask+0x304>
                            case 'U':
                                if ( xPreParsedBuffer.usiValues[0] == CHANGE_MODE_SEQUENCE ) {
                                    /* Change to Piping mode */
                                    eReceiverMode = sPiping;
                                } else {
                                    eReceiverMode = sReceiving;
81106824:	008000c4 	movi	r2,3
81106828:	e0bfd915 	stw	r2,-156(fp)
                                }
                                break;
8110682c:	00000606 	br	81106848 <vReceiverComTask+0x304>
                            default:
                                break;
                        }
                    }
                } else {
                	eReceiverMode = sHandlingError;
81106830:	008001c4 	movi	r2,7
81106834:	e0bfd915 	stw	r2,-156(fp)
                    xPreParsedBuffer.ucErrorFlag = eCRCError;
81106838:	00800144 	movi	r2,5
8110683c:	e0bfec15 	stw	r2,-80(fp)
                }

                break;
81106840:	00000d06 	br	81106878 <vReceiverComTask+0x334>
                                    eReceiverMode = sReceiving;
                                }
                                break;
                            case 'C':
                                /* Send the ethernet configuration */
                                break;
81106844:	0001883a 	nop
                } else {
                	eReceiverMode = sHandlingError;
                    xPreParsedBuffer.ucErrorFlag = eCRCError;
                }

                break;
81106848:	00000b06 	br	81106878 <vReceiverComTask+0x334>
            case sSendingMEB:
                /* code */
                break;
            case sHandlingError:
                
                eReceiverMode = tErrorHandlerFunc (&xPreParsedBuffer);
8110684c:	e0bfec04 	addi	r2,fp,-80
81106850:	1009883a 	mov	r4,r2
81106854:	1106be40 	call	81106be4 <tErrorHandlerFunc>
81106858:	e0bfd915 	stw	r2,-156(fp)

                break;
8110685c:	00000706 	br	8110687c <vReceiverComTask+0x338>
            default:
                break;
81106860:	0001883a 	nop
81106864:	003f4506 	br	8110657c <__reset+0xfb0e657c>
                }

                break;
            case sSendingMEB:
                /* code */
                break;
81106868:	0001883a 	nop
8110686c:	003f4306 	br	8110657c <__reset+0xfb0e657c>
                    #ifdef DEBUG_ON
                        debug(fp,"CRC Fail. sInitParsing.\n");
                    #endif
                }

                break;                
81106870:	0001883a 	nop
81106874:	003f4106 	br	8110657c <__reset+0xfb0e657c>
                } else {
                	eReceiverMode = sHandlingError;
                    xPreParsedBuffer.ucErrorFlag = eCRCError;
                }

                break;
81106878:	0001883a 	nop

                break;
            default:
                break;
        }
    }
8110687c:	003f3f06 	br	8110657c <__reset+0xfb0e657c>

81106880 <bPreParser>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParser( char *buffer, tPreParsed *xPerParcedBuffer )
{
81106880:	defff304 	addi	sp,sp,-52
81106884:	dfc00c15 	stw	ra,48(sp)
81106888:	df000b15 	stw	fp,44(sp)
8110688c:	dc000a15 	stw	r16,40(sp)
81106890:	df000b04 	addi	fp,sp,44
81106894:	e13ffd15 	stw	r4,-12(fp)
81106898:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
8110689c:	e03ff515 	stw	zero,-44(fp)
    short int siStrLen, siTeminador, siIniReq, siIniResp, siCRC;
	char c, i, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now*/

    siStrLen = strlen(buffer);
811068a0:	e13ffd17 	ldw	r4,-12(fp)
811068a4:	110bc740 	call	8110bc74 <strlen>
811068a8:	e0bff80d 	sth	r2,-32(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
811068ac:	01400ec4 	movi	r5,59
811068b0:	e13ffd17 	ldw	r4,-12(fp)
811068b4:	1106b9c0 	call	81106b9c <siPosStr>
811068b8:	e0bff88d 	sth	r2,-30(fp)
    siIniReq = siPosStr(buffer, START_REQUEST_CHAR);
811068bc:	01400fc4 	movi	r5,63
811068c0:	e13ffd17 	ldw	r4,-12(fp)
811068c4:	1106b9c0 	call	81106b9c <siPosStr>
811068c8:	e0bff90d 	sth	r2,-28(fp)
    siIniResp = siPosStr(buffer, START_REPLY_CHAR);
811068cc:	01400844 	movi	r5,33
811068d0:	e13ffd17 	ldw	r4,-12(fp)
811068d4:	1106b9c0 	call	81106b9c <siPosStr>
811068d8:	e0bff98d 	sth	r2,-26(fp)
    siIniReq = min_sim(siIniReq, siIniResp);
811068dc:	e17ff90b 	ldhu	r5,-28(fp)
811068e0:	e0bff98b 	ldhu	r2,-26(fp)
811068e4:	10ffffcc 	andi	r3,r2,65535
811068e8:	18e0001c 	xori	r3,r3,32768
811068ec:	18e00004 	addi	r3,r3,-32768
811068f0:	293fffcc 	andi	r4,r5,65535
811068f4:	2120001c 	xori	r4,r4,32768
811068f8:	21200004 	addi	r4,r4,-32768
811068fc:	20c0010e 	bge	r4,r3,81106904 <bPreParser+0x84>
81106900:	2805883a 	mov	r2,r5
81106904:	e0bff90d 	sth	r2,-28(fp)
    siCRC = strcspn(buffer, SEPARATOR_CRC);
81106908:	01401f04 	movi	r5,124
8110690c:	e13ffd17 	ldw	r4,-12(fp)
81106910:	110bc280 	call	8110bc28 <strcspn>
81106914:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there is [!|?] , |, ; in the packet*/
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {
81106918:	e0fff88f 	ldh	r3,-30(fp)
8110691c:	e0bff80f 	ldh	r2,-32(fp)
81106920:	10bfffc4 	addi	r2,r2,-1
81106924:	18808f1e 	bne	r3,r2,81106b64 <bPreParser+0x2e4>
81106928:	e0fffa0f 	ldh	r3,-24(fp)
8110692c:	e0bff88f 	ldh	r2,-30(fp)
81106930:	18808c0e 	bge	r3,r2,81106b64 <bPreParser+0x2e4>
81106934:	e0fff90f 	ldh	r3,-28(fp)
81106938:	e0bffa0f 	ldh	r2,-24(fp)
8110693c:	1880890e 	bge	r3,r2,81106b64 <bPreParser+0x2e4>

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
81106940:	e0bff90f 	ldh	r2,-28(fp)
81106944:	e0fffd17 	ldw	r3,-12(fp)
81106948:	1889883a 	add	r4,r3,r2
8110694c:	e0fffa0f 	ldh	r3,-24(fp)
81106950:	e0bff90f 	ldh	r2,-28(fp)
81106954:	1885c83a 	sub	r2,r3,r2
81106958:	100b883a 	mov	r5,r2
8110695c:	11084ac0 	call	811084ac <ucCrc8wInit>
81106960:	1007883a 	mov	r3,r2
81106964:	e0bffe17 	ldw	r2,-8(fp)
81106968:	10c01205 	stb	r3,72(r2)
        xPerParcedBuffer->ucType = buffer[siIniReq];
8110696c:	e0bff90f 	ldh	r2,-28(fp)
81106970:	e0fffd17 	ldw	r3,-12(fp)
81106974:	1885883a 	add	r2,r3,r2
81106978:	10800003 	ldbu	r2,0(r2)
8110697c:	1007883a 	mov	r3,r2
81106980:	e0bffe17 	ldw	r2,-8(fp)
81106984:	10c00105 	stb	r3,4(r2)
        xPerParcedBuffer->cCommand = buffer[siIniReq+1];
81106988:	e0bff90f 	ldh	r2,-28(fp)
8110698c:	10800044 	addi	r2,r2,1
81106990:	e0fffd17 	ldw	r3,-12(fp)
81106994:	1885883a 	add	r2,r3,r2
81106998:	10c00003 	ldbu	r3,0(r2)
8110699c:	e0bffe17 	ldw	r2,-8(fp)
811069a0:	10c00145 	stb	r3,5(r2)
        xPerParcedBuffer->ucNofBytes = 0;
811069a4:	e0bffe17 	ldw	r2,-8(fp)
811069a8:	10000185 	stb	zero,6(r2)
        memset( xPerParcedBuffer->usiValues , 0 , SIZE_UCVALUES);
811069ac:	e0bffe17 	ldw	r2,-8(fp)
811069b0:	10800204 	addi	r2,r2,8
811069b4:	01800804 	movi	r6,32
811069b8:	000b883a 	mov	r5,zero
811069bc:	1009883a 	mov	r4,r2
811069c0:	110b3b40 	call	8110b3b4 <memset>

        i = siIniReq + 3; /* "?C:i..." */
811069c4:	e0bff90b 	ldhu	r2,-28(fp)
811069c8:	108000c4 	addi	r2,r2,3
811069cc:	e0bff605 	stb	r2,-40(fp)
        do {
            p_inteiro = inteiro;
811069d0:	e0bffac4 	addi	r2,fp,-21
811069d4:	e0bff715 	stw	r2,-36(fp)
            memset( &(inteiro) , 0 , sizeof( inteiro ) );
811069d8:	e0bffac4 	addi	r2,fp,-21
811069dc:	01800184 	movi	r6,6
811069e0:	000b883a 	mov	r5,zero
811069e4:	1009883a 	mov	r4,r2
811069e8:	110b3b40 	call	8110b3b4 <memset>
            do {
                c = buffer[i];
811069ec:	e0bff607 	ldb	r2,-40(fp)
811069f0:	e0fffd17 	ldw	r3,-12(fp)
811069f4:	1885883a 	add	r2,r3,r2
811069f8:	10800003 	ldbu	r2,0(r2)
811069fc:	e0bffa85 	stb	r2,-22(fp)
                if ( isdigit( c ) ) {
81106a00:	e0bffa87 	ldb	r2,-22(fp)
81106a04:	10bff404 	addi	r2,r2,-48
81106a08:	108002a8 	cmpgeui	r2,r2,10
81106a0c:	1000061e 	bne	r2,zero,81106a28 <bPreParser+0x1a8>
                    (*p_inteiro) = c;
81106a10:	e0bff717 	ldw	r2,-36(fp)
81106a14:	e0fffa83 	ldbu	r3,-22(fp)
81106a18:	10c00005 	stb	r3,0(r2)
                    p_inteiro++;
81106a1c:	e0bff717 	ldw	r2,-36(fp)
81106a20:	10800044 	addi	r2,r2,1
81106a24:	e0bff715 	stw	r2,-36(fp)
                }
                i++;
81106a28:	e0bff603 	ldbu	r2,-40(fp)
81106a2c:	10800044 	addi	r2,r2,1
81106a30:	e0bff605 	stb	r2,-40(fp)
            } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
81106a34:	e0bff607 	ldb	r2,-40(fp)
81106a38:	10ffffcc 	andi	r3,r2,65535
81106a3c:	18e0001c 	xori	r3,r3,32768
81106a40:	18e00004 	addi	r3,r3,-32768
81106a44:	e0bff80f 	ldh	r2,-32(fp)
81106a48:	1880090e 	bge	r3,r2,81106a70 <bPreParser+0x1f0>
81106a4c:	e0bffa87 	ldb	r2,-22(fp)
81106a50:	10800ea0 	cmpeqi	r2,r2,58
81106a54:	1000061e 	bne	r2,zero,81106a70 <bPreParser+0x1f0>
81106a58:	e0bffa87 	ldb	r2,-22(fp)
81106a5c:	10800ee0 	cmpeqi	r2,r2,59
81106a60:	1000031e 	bne	r2,zero,81106a70 <bPreParser+0x1f0>
81106a64:	e0bffa87 	ldb	r2,-22(fp)
81106a68:	10801f18 	cmpnei	r2,r2,124
81106a6c:	103fdf1e 	bne	r2,zero,811069ec <__reset+0xfb0e69ec>
            (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81106a70:	e0bff717 	ldw	r2,-36(fp)
81106a74:	00c00284 	movi	r3,10
81106a78:	10c00005 	stb	r3,0(r2)

            if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
81106a7c:	e0bffa87 	ldb	r2,-22(fp)
81106a80:	10800ea0 	cmpeqi	r2,r2,58
81106a84:	1000031e 	bne	r2,zero,81106a94 <bPreParser+0x214>
81106a88:	e0bffa87 	ldb	r2,-22(fp)
81106a8c:	10801f18 	cmpnei	r2,r2,124
81106a90:	10001a1e 	bne	r2,zero,81106afc <bPreParser+0x27c>
                xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
81106a94:	e0bffe17 	ldw	r2,-8(fp)
81106a98:	10800183 	ldbu	r2,6(r2)
81106a9c:	10803fcc 	andi	r2,r2,255
81106aa0:	10800828 	cmpgeui	r2,r2,32
81106aa4:	1000041e 	bne	r2,zero,81106ab8 <bPreParser+0x238>
81106aa8:	e0bffe17 	ldw	r2,-8(fp)
81106aac:	10800183 	ldbu	r2,6(r2)
81106ab0:	14003fcc 	andi	r16,r2,255
81106ab4:	00000106 	br	81106abc <bPreParser+0x23c>
81106ab8:	04000804 	movi	r16,32
81106abc:	e0bffac4 	addi	r2,fp,-21
81106ac0:	1009883a 	mov	r4,r2
81106ac4:	110a1580 	call	8110a158 <atoi>
81106ac8:	1009883a 	mov	r4,r2
81106acc:	e0fffe17 	ldw	r3,-8(fp)
81106ad0:	80800104 	addi	r2,r16,4
81106ad4:	1085883a 	add	r2,r2,r2
81106ad8:	1885883a 	add	r2,r3,r2
81106adc:	1100000d 	sth	r4,0(r2)
                xPerParcedBuffer->ucNofBytes++;
81106ae0:	e0bffe17 	ldw	r2,-8(fp)
81106ae4:	10800183 	ldbu	r2,6(r2)
81106ae8:	10800044 	addi	r2,r2,1
81106aec:	1007883a 	mov	r3,r2
81106af0:	e0bffe17 	ldw	r2,-8(fp)
81106af4:	10c00185 	stb	r3,6(r2)
81106af8:	00000906 	br	81106b20 <bPreParser+0x2a0>
            } 
            else if ( c == FINAL_CHAR )
81106afc:	e0bffa87 	ldb	r2,-22(fp)
81106b00:	10800ed8 	cmpnei	r2,r2,59
81106b04:	1000061e 	bne	r2,zero,81106b20 <bPreParser+0x2a0>
            {
                xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
81106b08:	e0bffac4 	addi	r2,fp,-21
81106b0c:	1009883a 	mov	r4,r2
81106b10:	110a1580 	call	8110a158 <atoi>
81106b14:	1007883a 	mov	r3,r2
81106b18:	e0bffe17 	ldw	r2,-8(fp)
81106b1c:	10c01245 	stb	r3,73(r2)
            }
            
        } while ( (c != FINAL_CHAR) && (siStrLen>i) );
81106b20:	e0bffa87 	ldb	r2,-22(fp)
81106b24:	10800ee0 	cmpeqi	r2,r2,59
81106b28:	1000061e 	bne	r2,zero,81106b44 <bPreParser+0x2c4>
81106b2c:	e0bff607 	ldb	r2,-40(fp)
81106b30:	10ffffcc 	andi	r3,r2,65535
81106b34:	18e0001c 	xori	r3,r3,32768
81106b38:	18e00004 	addi	r3,r3,-32768
81106b3c:	e0bff80f 	ldh	r2,-32(fp)
81106b40:	18bfa316 	blt	r3,r2,811069d0 <__reset+0xfb0e69d0>

        if ( c == FINAL_CHAR)
81106b44:	e0bffa87 	ldb	r2,-22(fp)
81106b48:	10800ed8 	cmpnei	r2,r2,59
81106b4c:	1000031e 	bne	r2,zero,81106b5c <bPreParser+0x2dc>
            bSuccess = TRUE;
81106b50:	00800044 	movi	r2,1
81106b54:	e0bff515 	stw	r2,-44(fp)
                xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
            }
            
        } while ( (c != FINAL_CHAR) && (siStrLen>i) );

        if ( c == FINAL_CHAR)
81106b58:	00000306 	br	81106b68 <bPreParser+0x2e8>
            bSuccess = TRUE;
        else
            bSuccess = FALSE; /*Index overflow in the buffer*/
81106b5c:	e03ff515 	stw	zero,-44(fp)
                xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
            }
            
        } while ( (c != FINAL_CHAR) && (siStrLen>i) );

        if ( c == FINAL_CHAR)
81106b60:	00000106 	br	81106b68 <bPreParser+0x2e8>
        else
            bSuccess = FALSE; /*Index overflow in the buffer*/

    } else {
        /*Malformed Packet*/
        bSuccess = FALSE;
81106b64:	e03ff515 	stw	zero,-44(fp)
    }
    memset(buffer,0,strlen(buffer));
81106b68:	e13ffd17 	ldw	r4,-12(fp)
81106b6c:	110bc740 	call	8110bc74 <strlen>
81106b70:	100d883a 	mov	r6,r2
81106b74:	000b883a 	mov	r5,zero
81106b78:	e13ffd17 	ldw	r4,-12(fp)
81106b7c:	110b3b40 	call	8110b3b4 <memset>

    return bSuccess;
81106b80:	e0bff517 	ldw	r2,-44(fp)
}
81106b84:	e6ffff04 	addi	sp,fp,-4
81106b88:	dfc00217 	ldw	ra,8(sp)
81106b8c:	df000117 	ldw	fp,4(sp)
81106b90:	dc000017 	ldw	r16,0(sp)
81106b94:	dec00304 	addi	sp,sp,12
81106b98:	f800283a 	ret

81106b9c <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
81106b9c:	defffb04 	addi	sp,sp,-20
81106ba0:	dfc00415 	stw	ra,16(sp)
81106ba4:	df000315 	stw	fp,12(sp)
81106ba8:	df000304 	addi	fp,sp,12
81106bac:	e13ffe15 	stw	r4,-8(fp)
81106bb0:	2805883a 	mov	r2,r5
81106bb4:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
81106bb8:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
81106bbc:	e0bfff03 	ldbu	r2,-4(fp)
81106bc0:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
81106bc4:	e17ffd04 	addi	r5,fp,-12
81106bc8:	e13ffe17 	ldw	r4,-8(fp)
81106bcc:	110bc280 	call	8110bc28 <strcspn>
}
81106bd0:	e037883a 	mov	sp,fp
81106bd4:	dfc00117 	ldw	ra,4(sp)
81106bd8:	df000017 	ldw	fp,0(sp)
81106bdc:	dec00204 	addi	sp,sp,8
81106be0:	f800283a 	ret

81106be4 <tErrorHandlerFunc>:

inline tReceiverStates tErrorHandlerFunc( tPreParsed *xPerParcedBuffer ) {
81106be4:	defffc04 	addi	sp,sp,-16
81106be8:	dfc00315 	stw	ra,12(sp)
81106bec:	df000215 	stw	fp,8(sp)
81106bf0:	df000204 	addi	fp,sp,8
81106bf4:	e13fff15 	stw	r4,-4(fp)
    tReceiverStates xReturnState;
    
    switch (xPerParcedBuffer->ucErrorFlag)
81106bf8:	e0bfff17 	ldw	r2,-4(fp)
81106bfc:	10800017 	ldw	r2,0(r2)
81106c00:	10c001a8 	cmpgeui	r3,r2,6
81106c04:	1800221e 	bne	r3,zero,81106c90 <tErrorHandlerFunc+0xac>
81106c08:	100690ba 	slli	r3,r2,2
81106c0c:	00a04434 	movhi	r2,33040
81106c10:	109b0804 	addi	r2,r2,27680
81106c14:	1885883a 	add	r2,r3,r2
81106c18:	10800017 	ldw	r2,0(r2)
81106c1c:	1000683a 	jmp	r2
81106c20:	81106c68 	cmpgeui	r4,r16,16817
81106c24:	81106c38 	rdprs	r4,r16,16816
81106c28:	81106c44 	addi	r4,r16,16817
81106c2c:	81106c98 	cmpnei	r4,r16,16818
81106c30:	81106c50 	cmplti	r4,r16,16817
81106c34:	81106c5c 	xori	r4,r16,16817
    {
        case eBadFormatInit:
            /* Enviar error Não entendimento */
            xReturnState = sWaitingConn;
81106c38:	00800084 	movi	r2,2
81106c3c:	e0bffe15 	stw	r2,-8(fp)
            break;
81106c40:	00001606 	br	81106c9c <tErrorHandlerFunc+0xb8>
        case eCRCErrorInit:
            /* Enviar erro de CRC */
            xReturnState = sWaitingConn;
81106c44:	00800084 	movi	r2,2
81106c48:	e0bffe15 	stw	r2,-8(fp)
            break;
81106c4c:	00001306 	br	81106c9c <tErrorHandlerFunc+0xb8>
        case eSemErrorInit:
            /* Não enviar error, tentar resolver internamente, senao erro critico */
            break;
        case eBadFormat:
            /* Enviar error Não entendimento */
            xReturnState = sReceiving;
81106c50:	008000c4 	movi	r2,3
81106c54:	e0bffe15 	stw	r2,-8(fp)
            break;
81106c58:	00001006 	br	81106c9c <tErrorHandlerFunc+0xb8>
        case eCRCError:
            /* Enviar erro de CRC */
            xReturnState = sReceiving;
81106c5c:	008000c4 	movi	r2,3
81106c60:	e0bffe15 	stw	r2,-8(fp)
            break;
81106c64:	00000d06 	br	81106c9c <tErrorHandlerFunc+0xb8>
        case eNoError:
            xReturnState = sReceiving;
81106c68:	008000c4 	movi	r2,3
81106c6c:	e0bffe15 	stw	r2,-8(fp)
            #ifdef DEBUG_ON
                debug(fp,"No error. Why Handling Error?. (tErrorHandlerFunc)\n");
81106c70:	d0a05517 	ldw	r2,-32428(gp)
81106c74:	100f883a 	mov	r7,r2
81106c78:	01800cc4 	movi	r6,51
81106c7c:	01400044 	movi	r5,1
81106c80:	012044f4 	movhi	r4,33043
81106c84:	210bba04 	addi	r4,r4,12008
81106c88:	110a8700 	call	8110a870 <fwrite>
            #endif 
            break;
81106c8c:	00000306 	br	81106c9c <tErrorHandlerFunc+0xb8>
        default:
            break;
81106c90:	0001883a 	nop
81106c94:	00000106 	br	81106c9c <tErrorHandlerFunc+0xb8>
            /* Enviar erro de CRC */
            xReturnState = sWaitingConn;
            break;
        case eSemErrorInit:
            /* Não enviar error, tentar resolver internamente, senao erro critico */
            break;
81106c98:	0001883a 	nop
            break;
        default:
            break;
    }
    #ifdef DEBUG_ON
        debug(fp,"(tErrorHandlerFunc)\n");
81106c9c:	d0a05517 	ldw	r2,-32428(gp)
81106ca0:	100f883a 	mov	r7,r2
81106ca4:	01800504 	movi	r6,20
81106ca8:	01400044 	movi	r5,1
81106cac:	012044f4 	movhi	r4,33043
81106cb0:	210bc704 	addi	r4,r4,12060
81106cb4:	110a8700 	call	8110a870 <fwrite>
    #endif     

    return xReturnState;
81106cb8:	e0bffe17 	ldw	r2,-8(fp)
}
81106cbc:	e037883a 	mov	sp,fp
81106cc0:	dfc00117 	ldw	ra,4(sp)
81106cc4:	df000017 	ldw	fp,0(sp)
81106cc8:	dec00204 	addi	sp,sp,8
81106ccc:	f800283a 	ret

81106cd0 <MemDMATask>:
void Set_SpW_Led(char c_SpwID);

/* OS Tasks */

/* Mem DMA Task, configure and manages the Memories DMA for use of the SpW Transparent Interface*/
void MemDMATask(void *task_data) {
81106cd0:	defffd04 	addi	sp,sp,-12
81106cd4:	dfc00215 	stw	ra,8(sp)
81106cd8:	df000115 	stw	fp,4(sp)
81106cdc:	df000104 	addi	fp,sp,4
81106ce0:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"mem dma\" Task (Prio:%d) \n", MEM_DMA_TASK_PRIORITY);
81106ce4:	014003c4 	movi	r5,15
81106ce8:	012044f4 	movhi	r4,33043
81106cec:	210bcd04 	addi	r4,r4,12084
81106cf0:	110b56c0 	call	8110b56c <printf>
	/* read address - source address (data buffer) */
	/* write address - destination address (transparent interface) */
	/* transfer size bytes - number of bytes to be transfered */

	while (1) {
		OSTimeDlyHMSM(0, 1, 0, 0);
81106cf4:	000f883a 	mov	r7,zero
81106cf8:	000d883a 	mov	r6,zero
81106cfc:	01400044 	movi	r5,1
81106d00:	0009883a 	mov	r4,zero
81106d04:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
	}
81106d08:	003ffa06 	br	81106cf4 <__reset+0xfb0e6cf4>

81106d0c <SPWATask>:
}

/* SPW A Task, configure and monitor the SpW A channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWATask(void *task_data) {
81106d0c:	defffd04 	addi	sp,sp,-12
81106d10:	dfc00215 	stw	ra,8(sp)
81106d14:	df000115 	stw	fp,4(sp)
81106d18:	df000104 	addi	fp,sp,4
81106d1c:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw a\" Task (Prio:%d) \n", SPW_A_TASK_PRIORITY);
81106d20:	01400504 	movi	r5,20
81106d24:	012044f4 	movhi	r4,33043
81106d28:	210bd604 	addi	r4,r4,12120
81106d2c:	110b56c0 	call	8110b56c <printf>

	Configure_SpW_Autostart('A');
81106d30:	01001044 	movi	r4,65
81106d34:	11072940 	call	81107294 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('A');
81106d38:	01001044 	movi	r4,65
81106d3c:	110735c0 	call	8110735c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81106d40:	01c00284 	movi	r7,10
81106d44:	000d883a 	mov	r6,zero
81106d48:	000b883a 	mov	r5,zero
81106d4c:	0009883a 	mov	r4,zero
81106d50:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
	}
81106d54:	003ff806 	br	81106d38 <__reset+0xfb0e6d38>

81106d58 <SPWBTask>:
}

/* SPW B Task, configure and monitor the SpW B channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWBTask(void *task_data) {
81106d58:	defffd04 	addi	sp,sp,-12
81106d5c:	dfc00215 	stw	ra,8(sp)
81106d60:	df000115 	stw	fp,4(sp)
81106d64:	df000104 	addi	fp,sp,4
81106d68:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw b\" Task (Prio:%d) \n", SPW_B_TASK_PRIORITY);
81106d6c:	01400544 	movi	r5,21
81106d70:	012044f4 	movhi	r4,33043
81106d74:	210bdf04 	addi	r4,r4,12156
81106d78:	110b56c0 	call	8110b56c <printf>

	Configure_SpW_Autostart('B');
81106d7c:	01001084 	movi	r4,66
81106d80:	11072940 	call	81107294 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('B');
81106d84:	01001084 	movi	r4,66
81106d88:	110735c0 	call	8110735c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81106d8c:	01c00284 	movi	r7,10
81106d90:	000d883a 	mov	r6,zero
81106d94:	000b883a 	mov	r5,zero
81106d98:	0009883a 	mov	r4,zero
81106d9c:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
	}
81106da0:	003ff806 	br	81106d84 <__reset+0xfb0e6d84>

81106da4 <SPWCTask>:
}

/* SPW C Task, configure and monitor the SpW C channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWCTask(void *task_data) {
81106da4:	defffd04 	addi	sp,sp,-12
81106da8:	dfc00215 	stw	ra,8(sp)
81106dac:	df000115 	stw	fp,4(sp)
81106db0:	df000104 	addi	fp,sp,4
81106db4:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw c\" Task (Prio:%d) \n", SPW_C_TASK_PRIORITY);
81106db8:	01400584 	movi	r5,22
81106dbc:	012044f4 	movhi	r4,33043
81106dc0:	210be804 	addi	r4,r4,12192
81106dc4:	110b56c0 	call	8110b56c <printf>

	Configure_SpW_Autostart('C');
81106dc8:	010010c4 	movi	r4,67
81106dcc:	11072940 	call	81107294 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('C');
81106dd0:	010010c4 	movi	r4,67
81106dd4:	110735c0 	call	8110735c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81106dd8:	01c00284 	movi	r7,10
81106ddc:	000d883a 	mov	r6,zero
81106de0:	000b883a 	mov	r5,zero
81106de4:	0009883a 	mov	r4,zero
81106de8:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
	}
81106dec:	003ff806 	br	81106dd0 <__reset+0xfb0e6dd0>

81106df0 <SPWDTask>:
}

/* SPW D Task, configure and monitor the SpW D channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWDTask(void *task_data) {
81106df0:	defffd04 	addi	sp,sp,-12
81106df4:	dfc00215 	stw	ra,8(sp)
81106df8:	df000115 	stw	fp,4(sp)
81106dfc:	df000104 	addi	fp,sp,4
81106e00:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw d\" Task (Prio:%d) \n", SPW_D_TASK_PRIORITY);
81106e04:	014005c4 	movi	r5,23
81106e08:	012044f4 	movhi	r4,33043
81106e0c:	210bf104 	addi	r4,r4,12228
81106e10:	110b56c0 	call	8110b56c <printf>

	Configure_SpW_Autostart('D');
81106e14:	01001104 	movi	r4,68
81106e18:	11072940 	call	81107294 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('D');
81106e1c:	01001104 	movi	r4,68
81106e20:	110735c0 	call	8110735c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81106e24:	01c00284 	movi	r7,10
81106e28:	000d883a 	mov	r6,zero
81106e2c:	000b883a 	mov	r5,zero
81106e30:	0009883a 	mov	r4,zero
81106e34:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
	}
81106e38:	003ff806 	br	81106e1c <__reset+0xfb0e6e1c>

81106e3c <SPWETask>:
}

/* SPW E Task, configure and monitor the SpW E channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWETask(void *task_data) {
81106e3c:	defffd04 	addi	sp,sp,-12
81106e40:	dfc00215 	stw	ra,8(sp)
81106e44:	df000115 	stw	fp,4(sp)
81106e48:	df000104 	addi	fp,sp,4
81106e4c:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw e\" Task (Prio:%d) \n", SPW_E_TASK_PRIORITY);
81106e50:	01400604 	movi	r5,24
81106e54:	012044f4 	movhi	r4,33043
81106e58:	210bfa04 	addi	r4,r4,12264
81106e5c:	110b56c0 	call	8110b56c <printf>

	Configure_SpW_Autostart('E');
81106e60:	01001144 	movi	r4,69
81106e64:	11072940 	call	81107294 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('E');
81106e68:	01001144 	movi	r4,69
81106e6c:	110735c0 	call	8110735c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81106e70:	01c00284 	movi	r7,10
81106e74:	000d883a 	mov	r6,zero
81106e78:	000b883a 	mov	r5,zero
81106e7c:	0009883a 	mov	r4,zero
81106e80:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
	}
81106e84:	003ff806 	br	81106e68 <__reset+0xfb0e6e68>

81106e88 <SPWFTask>:
}

/* SPW F Task, configure and monitor the SpW F channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWFTask(void *task_data) {
81106e88:	defffd04 	addi	sp,sp,-12
81106e8c:	dfc00215 	stw	ra,8(sp)
81106e90:	df000115 	stw	fp,4(sp)
81106e94:	df000104 	addi	fp,sp,4
81106e98:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw f\" Task (Prio:%d) \n", SPW_F_TASK_PRIORITY);
81106e9c:	01400644 	movi	r5,25
81106ea0:	012044f4 	movhi	r4,33043
81106ea4:	210c0304 	addi	r4,r4,12300
81106ea8:	110b56c0 	call	8110b56c <printf>

	Configure_SpW_Autostart('F');
81106eac:	01001184 	movi	r4,70
81106eb0:	11072940 	call	81107294 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('F');
81106eb4:	01001184 	movi	r4,70
81106eb8:	110735c0 	call	8110735c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81106ebc:	01c00284 	movi	r7,10
81106ec0:	000d883a 	mov	r6,zero
81106ec4:	000b883a 	mov	r5,zero
81106ec8:	0009883a 	mov	r4,zero
81106ecc:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
	}
81106ed0:	003ff806 	br	81106eb4 <__reset+0xfb0e6eb4>

81106ed4 <SPWGTask>:
}

/* SPW G Task, configure and monitor the SpW G channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWGTask(void *task_data) {
81106ed4:	defffd04 	addi	sp,sp,-12
81106ed8:	dfc00215 	stw	ra,8(sp)
81106edc:	df000115 	stw	fp,4(sp)
81106ee0:	df000104 	addi	fp,sp,4
81106ee4:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw g\" Task (Prio:%d) \n", SPW_G_TASK_PRIORITY);
81106ee8:	01400684 	movi	r5,26
81106eec:	012044f4 	movhi	r4,33043
81106ef0:	210c0c04 	addi	r4,r4,12336
81106ef4:	110b56c0 	call	8110b56c <printf>

	Configure_SpW_Autostart('G');
81106ef8:	010011c4 	movi	r4,71
81106efc:	11072940 	call	81107294 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('G');
81106f00:	010011c4 	movi	r4,71
81106f04:	110735c0 	call	8110735c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81106f08:	01c00284 	movi	r7,10
81106f0c:	000d883a 	mov	r6,zero
81106f10:	000b883a 	mov	r5,zero
81106f14:	0009883a 	mov	r4,zero
81106f18:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
	}
81106f1c:	003ff806 	br	81106f00 <__reset+0xfb0e6f00>

81106f20 <SPWHTask>:
}

/* SPW H Task, configure and monitor the SpW H channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWHTask(void *task_data) {
81106f20:	defffd04 	addi	sp,sp,-12
81106f24:	dfc00215 	stw	ra,8(sp)
81106f28:	df000115 	stw	fp,4(sp)
81106f2c:	df000104 	addi	fp,sp,4
81106f30:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw h\" Task (Prio:%d) \n", SPW_H_TASK_PRIORITY);
81106f34:	014006c4 	movi	r5,27
81106f38:	012044f4 	movhi	r4,33043
81106f3c:	210c1504 	addi	r4,r4,12372
81106f40:	110b56c0 	call	8110b56c <printf>

	Configure_SpW_Autostart('H');
81106f44:	01001204 	movi	r4,72
81106f48:	11072940 	call	81107294 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('H');
81106f4c:	01001204 	movi	r4,72
81106f50:	110735c0 	call	8110735c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81106f54:	01c00284 	movi	r7,10
81106f58:	000d883a 	mov	r6,zero
81106f5c:	000b883a 	mov	r5,zero
81106f60:	0009883a 	mov	r4,zero
81106f64:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
	}
81106f68:	003ff806 	br	81106f4c <__reset+0xfb0e6f4c>

81106f6c <LogTask>:
}

/* Log Task, show the FPGA core temperature in the seven segments display, update rate of 1 s */
void LogTask(void *task_data) {
81106f6c:	defffd04 	addi	sp,sp,-12
81106f70:	dfc00215 	stw	ra,8(sp)
81106f74:	df000115 	stw	fp,4(sp)
81106f78:	df000104 	addi	fp,sp,4
81106f7c:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"log\" Task (Prio:%d) \n", LOG_TASK_PRIORITY);
81106f80:	01400704 	movi	r5,28
81106f84:	012044f4 	movhi	r4,33043
81106f88:	210c1e04 	addi	r4,r4,12408
81106f8c:	110b56c0 	call	8110b56c <printf>
	while (1) {
		TEMP_Read(&tempFPGA, &tempBoard);
81106f90:	d1605284 	addi	r5,gp,-32438
81106f94:	d1205244 	addi	r4,gp,-32439
81106f98:	11020ac0 	call	811020ac <TEMP_Read>
		bSSDisplayUpdate(tempFPGA);
81106f9c:	d0a05243 	ldbu	r2,-32439(gp)
81106fa0:	10803fcc 	andi	r2,r2,255
81106fa4:	1009883a 	mov	r4,r2
81106fa8:	11063d80 	call	811063d8 <bSSDisplayUpdate>
		OSTimeDlyHMSM(0, 0, 1, 0);
81106fac:	000f883a 	mov	r7,zero
81106fb0:	01800044 	movi	r6,1
81106fb4:	000b883a 	mov	r5,zero
81106fb8:	0009883a 	mov	r4,zero
81106fbc:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
	}
81106fc0:	003ff306 	br	81106f90 <__reset+0xfb0e6f90>

81106fc4 <Init_Simucam_Tasks>:
}

/* Initialize the SimuCam Tasks */
void Init_Simucam_Tasks(void) {
81106fc4:	defff904 	addi	sp,sp,-28
81106fc8:	dfc00615 	stw	ra,24(sp)
81106fcc:	df000515 	stw	fp,20(sp)
81106fd0:	df000504 	addi	fp,sp,20

	error_code = OSTaskCreateExt(MemDMATask,
81106fd4:	d8000415 	stw	zero,16(sp)
81106fd8:	d8000315 	stw	zero,12(sp)
81106fdc:	00820004 	movi	r2,2048
81106fe0:	d8800215 	stw	r2,8(sp)
81106fe4:	00a04534 	movhi	r2,33044
81106fe8:	1098f204 	addi	r2,r2,25544
81106fec:	d8800115 	stw	r2,4(sp)
81106ff0:	008003c4 	movi	r2,15
81106ff4:	d8800015 	stw	r2,0(sp)
81106ff8:	01c003c4 	movi	r7,15
81106ffc:	01a04574 	movhi	r6,33045
81107000:	31a0f204 	addi	r6,r6,-31800
81107004:	000b883a 	mov	r5,zero
81107008:	01204434 	movhi	r4,33040
8110700c:	211b3404 	addi	r4,r4,27856
81107010:	11269e40 	call	811269e4 <OSTaskCreateExt>
81107014:	d0a05205 	stb	r2,-32440(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWATask,
81107018:	d8000415 	stw	zero,16(sp)
8110701c:	d8000315 	stw	zero,12(sp)
81107020:	00820004 	movi	r2,2048
81107024:	d8800215 	stw	r2,8(sp)
81107028:	00a04534 	movhi	r2,33044
8110702c:	10b8f204 	addi	r2,r2,-7224
81107030:	d8800115 	stw	r2,4(sp)
81107034:	00800504 	movi	r2,20
81107038:	d8800015 	stw	r2,0(sp)
8110703c:	01c00504 	movi	r7,20
81107040:	01a04534 	movhi	r6,33044
81107044:	3180f204 	addi	r6,r6,968
81107048:	000b883a 	mov	r5,zero
8110704c:	01204434 	movhi	r4,33040
81107050:	211b4304 	addi	r4,r4,27916
81107054:	11269e40 	call	811269e4 <OSTaskCreateExt>
81107058:	d0a05205 	stb	r2,-32440(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWBTask,
8110705c:	d8000415 	stw	zero,16(sp)
81107060:	d8000315 	stw	zero,12(sp)
81107064:	00820004 	movi	r2,2048
81107068:	d8800215 	stw	r2,8(sp)
8110706c:	00a04534 	movhi	r2,33044
81107070:	1088f204 	addi	r2,r2,9160
81107074:	d8800115 	stw	r2,4(sp)
81107078:	00800544 	movi	r2,21
8110707c:	d8800015 	stw	r2,0(sp)
81107080:	01c00544 	movi	r7,21
81107084:	01a04534 	movhi	r6,33044
81107088:	3190f204 	addi	r6,r6,17352
8110708c:	000b883a 	mov	r5,zero
81107090:	01204434 	movhi	r4,33040
81107094:	211b5604 	addi	r4,r4,27992
81107098:	11269e40 	call	811269e4 <OSTaskCreateExt>
8110709c:	d0a05205 	stb	r2,-32440(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWCTask,
811070a0:	d8000415 	stw	zero,16(sp)
811070a4:	d8000315 	stw	zero,12(sp)
811070a8:	00820004 	movi	r2,2048
811070ac:	d8800215 	stw	r2,8(sp)
811070b0:	00a04574 	movhi	r2,33045
811070b4:	10a0f204 	addi	r2,r2,-31800
811070b8:	d8800115 	stw	r2,4(sp)
811070bc:	00800584 	movi	r2,22
811070c0:	d8800015 	stw	r2,0(sp)
811070c4:	01c00584 	movi	r7,22
811070c8:	01a04574 	movhi	r6,33045
811070cc:	31a8f204 	addi	r6,r6,-23608
811070d0:	000b883a 	mov	r5,zero
811070d4:	01204434 	movhi	r4,33040
811070d8:	211b6904 	addi	r4,r4,28068
811070dc:	11269e40 	call	811269e4 <OSTaskCreateExt>
811070e0:	d0a05205 	stb	r2,-32440(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWDTask,
811070e4:	d8000415 	stw	zero,16(sp)
811070e8:	d8000315 	stw	zero,12(sp)
811070ec:	00820004 	movi	r2,2048
811070f0:	d8800215 	stw	r2,8(sp)
811070f4:	00a04534 	movhi	r2,33044
811070f8:	10b0f204 	addi	r2,r2,-15416
811070fc:	d8800115 	stw	r2,4(sp)
81107100:	008005c4 	movi	r2,23
81107104:	d8800015 	stw	r2,0(sp)
81107108:	01c005c4 	movi	r7,23
8110710c:	01a04534 	movhi	r6,33044
81107110:	31b8f204 	addi	r6,r6,-7224
81107114:	000b883a 	mov	r5,zero
81107118:	01204434 	movhi	r4,33040
8110711c:	211b7c04 	addi	r4,r4,28144
81107120:	11269e40 	call	811269e4 <OSTaskCreateExt>
81107124:	d0a05205 	stb	r2,-32440(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWETask,
81107128:	d8000415 	stw	zero,16(sp)
8110712c:	d8000315 	stw	zero,12(sp)
81107130:	00820004 	movi	r2,2048
81107134:	d8800215 	stw	r2,8(sp)
81107138:	00a04534 	movhi	r2,33044
8110713c:	10a8f204 	addi	r2,r2,-23608
81107140:	d8800115 	stw	r2,4(sp)
81107144:	00800604 	movi	r2,24
81107148:	d8800015 	stw	r2,0(sp)
8110714c:	01c00604 	movi	r7,24
81107150:	01a04534 	movhi	r6,33044
81107154:	31b0f204 	addi	r6,r6,-15416
81107158:	000b883a 	mov	r5,zero
8110715c:	01204434 	movhi	r4,33040
81107160:	211b8f04 	addi	r4,r4,28220
81107164:	11269e40 	call	811269e4 <OSTaskCreateExt>
81107168:	d0a05205 	stb	r2,-32440(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWFTask,
8110716c:	d8000415 	stw	zero,16(sp)
81107170:	d8000315 	stw	zero,12(sp)
81107174:	00820004 	movi	r2,2048
81107178:	d8800215 	stw	r2,8(sp)
8110717c:	00a04534 	movhi	r2,33044
81107180:	10a0f204 	addi	r2,r2,-31800
81107184:	d8800115 	stw	r2,4(sp)
81107188:	00800644 	movi	r2,25
8110718c:	d8800015 	stw	r2,0(sp)
81107190:	01c00644 	movi	r7,25
81107194:	01a04534 	movhi	r6,33044
81107198:	31a8f204 	addi	r6,r6,-23608
8110719c:	000b883a 	mov	r5,zero
811071a0:	01204434 	movhi	r4,33040
811071a4:	211ba204 	addi	r4,r4,28296
811071a8:	11269e40 	call	811269e4 <OSTaskCreateExt>
811071ac:	d0a05205 	stb	r2,-32440(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWGTask,
811071b0:	d8000415 	stw	zero,16(sp)
811071b4:	d8000315 	stw	zero,12(sp)
811071b8:	00820004 	movi	r2,2048
811071bc:	d8800215 	stw	r2,8(sp)
811071c0:	00a04534 	movhi	r2,33044
811071c4:	1090f204 	addi	r2,r2,17352
811071c8:	d8800115 	stw	r2,4(sp)
811071cc:	00800684 	movi	r2,26
811071d0:	d8800015 	stw	r2,0(sp)
811071d4:	01c00684 	movi	r7,26
811071d8:	01a04534 	movhi	r6,33044
811071dc:	3198f204 	addi	r6,r6,25544
811071e0:	000b883a 	mov	r5,zero
811071e4:	01204434 	movhi	r4,33040
811071e8:	211bb504 	addi	r4,r4,28372
811071ec:	11269e40 	call	811269e4 <OSTaskCreateExt>
811071f0:	d0a05205 	stb	r2,-32440(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWHTask,
811071f4:	d8000415 	stw	zero,16(sp)
811071f8:	d8000315 	stw	zero,12(sp)
811071fc:	00820004 	movi	r2,2048
81107200:	d8800215 	stw	r2,8(sp)
81107204:	00a044f4 	movhi	r2,33043
81107208:	1098f204 	addi	r2,r2,25544
8110720c:	d8800115 	stw	r2,4(sp)
81107210:	008006c4 	movi	r2,27
81107214:	d8800015 	stw	r2,0(sp)
81107218:	01c006c4 	movi	r7,27
8110721c:	01a04534 	movhi	r6,33044
81107220:	31a0f204 	addi	r6,r6,-31800
81107224:	000b883a 	mov	r5,zero
81107228:	01204434 	movhi	r4,33040
8110722c:	211bc804 	addi	r4,r4,28448
81107230:	11269e40 	call	811269e4 <OSTaskCreateExt>
81107234:	d0a05205 	stb	r2,-32440(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);
	

	error_code = OSTaskCreateExt(LogTask,
81107238:	d8000415 	stw	zero,16(sp)
8110723c:	d8000315 	stw	zero,12(sp)
81107240:	00820004 	movi	r2,2048
81107244:	d8800215 	stw	r2,8(sp)
81107248:	00a04534 	movhi	r2,33044
8110724c:	1080f204 	addi	r2,r2,968
81107250:	d8800115 	stw	r2,4(sp)
81107254:	00800704 	movi	r2,28
81107258:	d8800015 	stw	r2,0(sp)
8110725c:	01c00704 	movi	r7,28
81107260:	01a04534 	movhi	r6,33044
81107264:	3188f204 	addi	r6,r6,9160
81107268:	000b883a 	mov	r5,zero
8110726c:	01204434 	movhi	r4,33040
81107270:	211bdb04 	addi	r4,r4,28524
81107274:	11269e40 	call	811269e4 <OSTaskCreateExt>
81107278:	d0a05205 	stb	r2,-32440(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


}
8110727c:	0001883a 	nop
81107280:	e037883a 	mov	sp,fp
81107284:	dfc00117 	ldw	ra,4(sp)
81107288:	df000017 	ldw	fp,0(sp)
8110728c:	dec00204 	addi	sp,sp,8
81107290:	f800283a 	ret

81107294 <Configure_SpW_Autostart>:

void Configure_SpW_Autostart(char c_SpwID) {
81107294:	defffd04 	addi	sp,sp,-12
81107298:	dfc00215 	stw	ra,8(sp)
8110729c:	df000115 	stw	fp,4(sp)
811072a0:	df000104 	addi	fp,sp,4
811072a4:	2005883a 	mov	r2,r4
811072a8:	e0bfff05 	stb	r2,-4(fp)
	// Configura COMM
	// Reseta TX e RX Fifo
	v_Transparent_Interface_RX_FIFO_Reset(c_SpwID);
811072ac:	e0bfff07 	ldb	r2,-4(fp)
811072b0:	1009883a 	mov	r4,r2
811072b4:	11046b40 	call	811046b4 <v_Transparent_Interface_RX_FIFO_Reset>
	v_Transparent_Interface_TX_FIFO_Reset(c_SpwID);
811072b8:	e0bfff07 	ldb	r2,-4(fp)
811072bc:	1009883a 	mov	r4,r2
811072c0:	11048480 	call	81104848 <v_Transparent_Interface_TX_FIFO_Reset>
	// Habilita a Interface Transparente
	v_Transparent_Interface_Enable_Control(c_SpwID, TRAN_REG_SET,
811072c4:	e0bfff07 	ldb	r2,-4(fp)
811072c8:	0181c004 	movi	r6,1792
811072cc:	01400044 	movi	r5,1
811072d0:	1009883a 	mov	r4,r2
811072d4:	11041000 	call	81104100 <v_Transparent_Interface_Enable_Control>
			TRAN_INTERFACE_ENABLE_CONTROL_BIT_MASK
					| TRAN_INTERFACE_TX_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_RX_ENABLE_CONTROL_BIT_MASK);
	// Reseta Codec
	v_SpaceWire_Interface_Force_Reset(c_SpwID);
811072d8:	e0bfff07 	ldb	r2,-4(fp)
811072dc:	1009883a 	mov	r4,r2
811072e0:	11030b80 	call	811030b8 <v_SpaceWire_Interface_Force_Reset>
	// Habilita a Interface SpaceWire
	b_SpaceWire_Interface_Enable_Control(c_SpwID, SPWC_REG_SET,
811072e4:	e0bfff07 	ldb	r2,-4(fp)
811072e8:	0181c004 	movi	r6,1792
811072ec:	01400044 	movi	r5,1
811072f0:	1009883a 	mov	r4,r2
811072f4:	1102b9c0 	call	81102b9c <b_SpaceWire_Interface_Enable_Control>
	SPWC_CODEC_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_TX_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_RX_ENABLE_CONTROL_BIT_MASK);
	// Coloca Codec no modo Normal
//	b_SpaceWire_Interface_Mode_Control(c_SpwID, SPWC_INTERFACE_NORMAL_MODE);
	b_SpaceWire_Interface_Mode_Control(c_SpwID, SPWC_INTERFACE_BACKDOOR_MODE);
811072f8:	e0bfff07 	ldb	r2,-4(fp)
811072fc:	000b883a 	mov	r5,zero
81107300:	1009883a 	mov	r4,r2
81107304:	1102d900 	call	81102d90 <b_SpaceWire_Interface_Mode_Control>
	// Coloca Codec no link Autostart
	v_SpaceWire_Interface_Link_Control(c_SpwID, SPWC_REG_CLEAR,
81107308:	e0bfff07 	ldb	r2,-4(fp)
8110730c:	01806004 	movi	r6,384
81107310:	000b883a 	mov	r5,zero
81107314:	1009883a 	mov	r4,r2
81107318:	11035780 	call	81103578 <v_SpaceWire_Interface_Link_Control>
	SPWC_LINK_DISCONNECT_CONTROL_BIT_MASK | SPWC_LINK_START_CONTROL_BIT_MASK);
	v_SpaceWire_Interface_Link_Control(c_SpwID, SPWC_REG_SET,
8110731c:	e0bfff07 	ldb	r2,-4(fp)
81107320:	01808004 	movi	r6,512
81107324:	01400044 	movi	r5,1
81107328:	1009883a 	mov	r4,r2
8110732c:	11035780 	call	81103578 <v_SpaceWire_Interface_Link_Control>
	SPWC_AUTOSTART_CONTROL_BIT_MASK);
	printf("SpaceWire %c configurado\n", c_SpwID);
81107330:	e0bfff07 	ldb	r2,-4(fp)
81107334:	100b883a 	mov	r5,r2
81107338:	012044f4 	movhi	r4,33043
8110733c:	210c2604 	addi	r4,r4,12440
81107340:	110b56c0 	call	8110b56c <printf>
}
81107344:	0001883a 	nop
81107348:	e037883a 	mov	sp,fp
8110734c:	dfc00117 	ldw	ra,4(sp)
81107350:	df000017 	ldw	fp,0(sp)
81107354:	dec00204 	addi	sp,sp,8
81107358:	f800283a 	ret

8110735c <Set_SpW_Led>:

void Set_SpW_Led(char c_SpwID) {
8110735c:	defffa04 	addi	sp,sp,-24
81107360:	dfc00515 	stw	ra,20(sp)
81107364:	df000415 	stw	fp,16(sp)
81107368:	df000404 	addi	fp,sp,16
8110736c:	2005883a 	mov	r2,r4
81107370:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 ui_leds_mask_r = 0;
81107374:	e03ffc15 	stw	zero,-16(fp)
	alt_u32 ui_leds_mask_g = 0;
81107378:	e03ffd15 	stw	zero,-12(fp)
	switch (c_SpwID) {
8110737c:	e0bfff07 	ldb	r2,-4(fp)
81107380:	10bfefc4 	addi	r2,r2,-65
81107384:	10c00228 	cmpgeui	r3,r2,8
81107388:	1800361e 	bne	r3,zero,81107464 <Set_SpW_Led+0x108>
8110738c:	100690ba 	slli	r3,r2,2
81107390:	00a04434 	movhi	r2,33040
81107394:	109ce904 	addi	r2,r2,29604
81107398:	1885883a 	add	r2,r3,r2
8110739c:	10800017 	ldw	r2,0(r2)
811073a0:	1000683a 	jmp	r2
811073a4:	811073c4 	addi	r4,r16,16847
811073a8:	811073d8 	cmpnei	r4,r16,16847
811073ac:	811073ec 	andhi	r4,r16,16847
811073b0:	81107400 	call	88110740 <__reset+0x20f0740>
811073b4:	81107414 	ori	r4,r16,16848
811073b8:	81107428 	cmpgeui	r4,r16,16848
811073bc:	8110743c 	xorhi	r4,r16,16848
811073c0:	81107450 	cmplti	r4,r16,16849
	case 'A':
		ui_leds_mask_r = LEDS_1R_MASK;
811073c4:	00800084 	movi	r2,2
811073c8:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_1G_MASK;
811073cc:	00800044 	movi	r2,1
811073d0:	e0bffd15 	stw	r2,-12(fp)
		break;
811073d4:	00002306 	br	81107464 <Set_SpW_Led+0x108>
	case 'B':
		ui_leds_mask_r = LEDS_2R_MASK;
811073d8:	00800204 	movi	r2,8
811073dc:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_2G_MASK;
811073e0:	00800104 	movi	r2,4
811073e4:	e0bffd15 	stw	r2,-12(fp)
		break;
811073e8:	00001e06 	br	81107464 <Set_SpW_Led+0x108>
	case 'C':
		ui_leds_mask_r = LEDS_3R_MASK;
811073ec:	00800804 	movi	r2,32
811073f0:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_3G_MASK;
811073f4:	00800404 	movi	r2,16
811073f8:	e0bffd15 	stw	r2,-12(fp)
		break;
811073fc:	00001906 	br	81107464 <Set_SpW_Led+0x108>
	case 'D':
		ui_leds_mask_r = LEDS_4R_MASK;
81107400:	00802004 	movi	r2,128
81107404:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_4G_MASK;
81107408:	00801004 	movi	r2,64
8110740c:	e0bffd15 	stw	r2,-12(fp)
		break;
81107410:	00001406 	br	81107464 <Set_SpW_Led+0x108>
	case 'E':
		ui_leds_mask_r = LEDS_5R_MASK;
81107414:	00808004 	movi	r2,512
81107418:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_5G_MASK;
8110741c:	00804004 	movi	r2,256
81107420:	e0bffd15 	stw	r2,-12(fp)
		break;
81107424:	00000f06 	br	81107464 <Set_SpW_Led+0x108>
	case 'F':
		ui_leds_mask_r = LEDS_6R_MASK;
81107428:	00820004 	movi	r2,2048
8110742c:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_6G_MASK;
81107430:	00810004 	movi	r2,1024
81107434:	e0bffd15 	stw	r2,-12(fp)
		break;
81107438:	00000a06 	br	81107464 <Set_SpW_Led+0x108>
	case 'G':
		ui_leds_mask_r = LEDS_7R_MASK;
8110743c:	00880004 	movi	r2,8192
81107440:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_7G_MASK;
81107444:	00840004 	movi	r2,4096
81107448:	e0bffd15 	stw	r2,-12(fp)
		break;
8110744c:	00000506 	br	81107464 <Set_SpW_Led+0x108>
	case 'H':
		ui_leds_mask_r = LEDS_8R_MASK;
81107450:	00a00014 	movui	r2,32768
81107454:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_8G_MASK;
81107458:	00900004 	movi	r2,16384
8110745c:	e0bffd15 	stw	r2,-12(fp)
		break;
81107460:	0001883a 	nop
	}
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
81107464:	e0bfff07 	ldb	r2,-4(fp)
81107468:	1009883a 	mov	r4,r2
8110746c:	11037c40 	call	811037c4 <ul_SpaceWire_Interface_Link_Status_Read>
81107470:	e0bffe15 	stw	r2,-8(fp)
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
81107474:	e0bffe17 	ldw	r2,-8(fp)
81107478:	1080004c 	andi	r2,r2,1
8110747c:	10000726 	beq	r2,zero,8110749c <Set_SpW_Led+0x140>
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
81107480:	e17ffc17 	ldw	r5,-16(fp)
81107484:	0009883a 	mov	r4,zero
81107488:	11057840 	call	81105784 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
8110748c:	e17ffd17 	ldw	r5,-12(fp)
81107490:	01000044 	movi	r4,1
81107494:	11057840 	call	81105784 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
	}
}
81107498:	00001006 	br	811074dc <Set_SpW_Led+0x180>
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
	} else if (SpW_Link_Status
			& (SPWC_LINK_DISCONNECT_ERROR_BIT_MASK
8110749c:	e0bffe17 	ldw	r2,-8(fp)
811074a0:	10801e0c 	andi	r2,r2,120
	}
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
	} else if (SpW_Link_Status
811074a4:	10000726 	beq	r2,zero,811074c4 <Set_SpW_Led+0x168>
			& (SPWC_LINK_DISCONNECT_ERROR_BIT_MASK
					| SPWC_LINK_PARITY_ERROR_BIT_MASK
					| SPWC_LINK_ESCAPE_ERROR_BIT_MASK
					| SPWC_LINK_CREDIT_ERROR_BIT_MASK)) {
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
811074a8:	e0fffd17 	ldw	r3,-12(fp)
811074ac:	e0bffc17 	ldw	r2,-16(fp)
811074b0:	1884b03a 	or	r2,r3,r2
811074b4:	100b883a 	mov	r5,r2
811074b8:	01000044 	movi	r4,1
811074bc:	11057840 	call	81105784 <bSetPainelLeds>
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
	}
}
811074c0:	00000606 	br	811074dc <Set_SpW_Led+0x180>
					| SPWC_LINK_PARITY_ERROR_BIT_MASK
					| SPWC_LINK_ESCAPE_ERROR_BIT_MASK
					| SPWC_LINK_CREDIT_ERROR_BIT_MASK)) {
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
811074c4:	e17ffd17 	ldw	r5,-12(fp)
811074c8:	0009883a 	mov	r4,zero
811074cc:	11057840 	call	81105784 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
811074d0:	e17ffc17 	ldw	r5,-16(fp)
811074d4:	01000044 	movi	r4,1
811074d8:	11057840 	call	81105784 <bSetPainelLeds>
	}
}
811074dc:	0001883a 	nop
811074e0:	e037883a 	mov	sp,fp
811074e4:	dfc00117 	ldw	ra,4(sp)
811074e8:	df000017 	ldw	fp,0(sp)
811074ec:	dec00204 	addi	sp,sp,8
811074f0:	f800283a 	ret

811074f4 <vSenderComTask>:

#include "sender_com_task.h"


void vSenderComTask(void *task_data)
{
811074f4:	defffa04 	addi	sp,sp,-24
811074f8:	dfc00515 	stw	ra,20(sp)
811074fc:	df000415 	stw	fp,16(sp)
81107500:	df000404 	addi	fp,sp,16
81107504:	e13fff15 	stw	r4,-4(fp)
    bool bSucess = FALSE;
81107508:	e03ffe15 	stw	zero,-8(fp)
    tSenderStates eSenderMode;
    int desligarEm = 0;
8110750c:	e03ffd15 	stw	zero,-12(fp)

    eSenderMode = sConfiguringSender;
81107510:	e03ffc15 	stw	zero,-16(fp)
#ifdef DEBUG_ON
	debug(fp,"vSenderComTask\n");
81107514:	d0a05517 	ldw	r2,-32428(gp)
81107518:	100f883a 	mov	r7,r2
8110751c:	018003c4 	movi	r6,15
81107520:	01400044 	movi	r5,1
81107524:	012044f4 	movhi	r4,33043
81107528:	210c2d04 	addi	r4,r4,12468
8110752c:	110a8700 	call	8110a870 <fwrite>
#endif
    for (;;){
        
        switch (eSenderMode)
81107530:	e0bffc17 	ldw	r2,-16(fp)
81107534:	10c00060 	cmpeqi	r3,r2,1
81107538:	18000e1e 	bne	r3,zero,81107574 <vSenderComTask+0x80>
8110753c:	0080032e 	bgeu	zero,r2,8110754c <vSenderComTask+0x58>
81107540:	108000a0 	cmpeqi	r2,r2,2
81107544:	1000231e 	bne	r2,zero,811075d4 <vSenderComTask+0xe0>
81107548:	00003a06 	br	81107634 <vSenderComTask+0x140>
        {
            case sConfiguringSender:
                /* code */
                eSenderMode = sStartingConnSender;
8110754c:	00800044 	movi	r2,1
81107550:	e0bffc15 	stw	r2,-16(fp)
#ifdef DEBUG_ON
	debug(fp,"sConfiguringSender\n");
81107554:	d0a05517 	ldw	r2,-32428(gp)
81107558:	100f883a 	mov	r7,r2
8110755c:	018004c4 	movi	r6,19
81107560:	01400044 	movi	r5,1
81107564:	012044f4 	movhi	r4,33043
81107568:	210c3104 	addi	r4,r4,12484
8110756c:	110a8700 	call	8110a870 <fwrite>
#endif
                break;
81107570:	00003806 	br	81107654 <vSenderComTask+0x160>
                /* code */

                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
81107574:	d0a05417 	ldw	r2,-32432(gp)
81107578:	1009883a 	mov	r4,r2
8110757c:	11258e80 	call	811258e8 <OSSemAccept>
81107580:	10bfffcc 	andi	r2,r2,65535
81107584:	10000326 	beq	r2,zero,81107594 <vSenderComTask+0xa0>
                    eSenderMode = sDummySender;
81107588:	00800084 	movi	r2,2
8110758c:	e0bffc15 	stw	r2,-16(fp)
81107590:	00000806 	br	811075b4 <vSenderComTask+0xc0>
                } else {
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
81107594:	012044f4 	movhi	r4,33043
81107598:	210c3604 	addi	r4,r4,12504
8110759c:	110b6880 	call	8110b688 <puts>
                    OSTimeDlyHMSM(0, 0, 20, 0); /*Sleeps for 3 second*/
811075a0:	000f883a 	mov	r7,zero
811075a4:	01800504 	movi	r6,20
811075a8:	000b883a 	mov	r5,zero
811075ac:	0009883a 	mov	r4,zero
811075b0:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
                }
#ifdef DEBUG_ON
	debug(fp,"sStartingConnSender\n");
811075b4:	d0a05517 	ldw	r2,-32428(gp)
811075b8:	100f883a 	mov	r7,r2
811075bc:	01800504 	movi	r6,20
811075c0:	01400044 	movi	r5,1
811075c4:	012044f4 	movhi	r4,33043
811075c8:	210c3804 	addi	r4,r4,12512
811075cc:	110a8700 	call	8110a870 <fwrite>
#endif
                break;
811075d0:	00002006 	br	81107654 <vSenderComTask+0x160>
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
811075d4:	00800084 	movi	r2,2
811075d8:	e0bffc15 	stw	r2,-16(fp)

                if (desligarEm <= 3) {
811075dc:	e0bffd17 	ldw	r2,-12(fp)
811075e0:	10800108 	cmpgei	r2,r2,4
811075e4:	1000031e 	bne	r2,zero,811075f4 <vSenderComTask+0x100>
                    puts(TURNOFF_SEQUENCE);
811075e8:	012044f4 	movhi	r4,33043
811075ec:	210c3e04 	addi	r4,r4,12536
811075f0:	110b6880 	call	8110b688 <puts>
                }
                desligarEm++;
811075f4:	e0bffd17 	ldw	r2,-12(fp)
811075f8:	10800044 	addi	r2,r2,1
811075fc:	e0bffd15 	stw	r2,-12(fp)
#ifdef DEBUG_ON
	debug(fp,"sDummySender\n");
81107600:	d0a05517 	ldw	r2,-32428(gp)
81107604:	100f883a 	mov	r7,r2
81107608:	01800344 	movi	r6,13
8110760c:	01400044 	movi	r5,1
81107610:	012044f4 	movhi	r4,33043
81107614:	210c4004 	addi	r4,r4,12544
81107618:	110a8700 	call	8110a870 <fwrite>
#endif
				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
8110761c:	000f883a 	mov	r7,zero
81107620:	01800284 	movi	r6,10
81107624:	000b883a 	mov	r5,zero
81107628:	0009883a 	mov	r4,zero
8110762c:	1127bb80 	call	81127bb8 <OSTimeDlyHMSM>
                break;
81107630:	00000806 	br	81107654 <vSenderComTask+0x160>
            default:
#ifdef DEBUG_ON
	debug(fp,"sender default\n");
81107634:	d0a05517 	ldw	r2,-32428(gp)
81107638:	100f883a 	mov	r7,r2
8110763c:	018003c4 	movi	r6,15
81107640:	01400044 	movi	r5,1
81107644:	012044f4 	movhi	r4,33043
81107648:	210c4404 	addi	r4,r4,12560
8110764c:	110a8700 	call	8110a870 <fwrite>
#endif
                break;
81107650:	0001883a 	nop
        }

    }
81107654:	003fb606 	br	81107530 <__reset+0xfb0e7530>

81107658 <vResourcesInitRTOS>:



/* Instanceatin and Initialization of the resources for the RTOS */
void vResourcesInitRTOS( void )
{
81107658:	defffe04 	addi	sp,sp,-8
8110765c:	dfc00115 	stw	ra,4(sp)
81107660:	df000015 	stw	fp,0(sp)
81107664:	d839883a 	mov	fp,sp
	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
81107668:	0009883a 	mov	r4,zero
8110766c:	11259980 	call	81125998 <OSSemCreate>
81107670:	d0a05415 	stw	r2,-32432(gp)
}
81107674:	0001883a 	nop
81107678:	e037883a 	mov	sp,fp
8110767c:	dfc00117 	ldw	ra,4(sp)
81107680:	df000017 	ldw	fp,0(sp)
81107684:	dec00204 	addi	sp,sp,8
81107688:	f800283a 	ret

8110768c <main>:



/* Entry point */
int main(void)
{
8110768c:	deffde04 	addi	sp,sp,-136
81107690:	dfc02115 	stw	ra,132(sp)
81107694:	df002015 	stw	fp,128(sp)
81107698:	df002004 	addi	fp,sp,128
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
8110769c:	e03fe515 	stw	zero,-108(fp)
	char buffer_temp[100] = "";
811076a0:	e03fe645 	stb	zero,-103(fp)
811076a4:	e03fe685 	stb	zero,-102(fp)
811076a8:	e03fe6c5 	stb	zero,-101(fp)
811076ac:	e03fe705 	stb	zero,-100(fp)
811076b0:	e0bfe744 	addi	r2,fp,-99
811076b4:	00c01804 	movi	r3,96
811076b8:	180d883a 	mov	r6,r3
811076bc:	000b883a 	mov	r5,zero
811076c0:	1009883a 	mov	r4,r2
811076c4:	110b3b40 	call	8110b3b4 <memset>
	
	/* Clear the RTOS timer */
	OSTimeSet(0);
811076c8:	0009883a 	mov	r4,zero
811076cc:	1127f440 	call	81127f44 <OSTimeSet>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
811076d0:	016044f4 	movhi	r5,33043
811076d4:	294c4804 	addi	r5,r5,12576
811076d8:	012044f4 	movhi	r4,33043
811076dc:	210c4904 	addi	r4,r4,12580
811076e0:	110a2640 	call	8110a264 <fopen>
811076e4:	d0a05515 	stw	r2,-32428(gp)
	#endif	
	


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
811076e8:	11086fc0 	call	811086fc <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
811076ec:	11089900 	call	81108990 <bTestSimucamCriticalHW>
811076f0:	e0bfe515 	stw	r2,-108(fp)
	if (bIniSimucamStatus == FALSE) {
811076f4:	e0bfe517 	ldw	r2,-108(fp)
811076f8:	1000031e 	bne	r2,zero,81107708 <main+0x7c>
		vFailTestCriticasParts();
811076fc:	11085640 	call	81108564 <vFailTestCriticasParts>
		return -1;
81107700:	00bfffc4 	movi	r2,-1
81107704:	00002e06 	br	811077c0 <main+0x134>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
81107708:	11087fc0 	call	811087fc <bInitializeSDCard>
8110770c:	e0bfe515 	stw	r2,-108(fp)
	if (bIniSimucamStatus == FALSE) {
81107710:	e0bfe517 	ldw	r2,-108(fp)
81107714:	1000031e 	bne	r2,zero,81107724 <main+0x98>
		vFailTestCriticasParts();
81107718:	11085640 	call	81108564 <vFailTestCriticasParts>
		return -1;
8110771c:	00bfffc4 	movi	r2,-1
81107720:	00002706 	br	811077c0 <main+0x134>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
81107724:	11077d40 	call	811077d4 <vLoadDefaultETHConf>
81107728:	e0bfe515 	stw	r2,-108(fp)
	if (bIniSimucamStatus == FALSE) {
8110772c:	e0bfe517 	ldw	r2,-108(fp)
81107730:	1000091e 	bne	r2,zero,81107758 <main+0xcc>
		/* Default configuration for eth connection loaded */
		debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. \n");
81107734:	d0a05517 	ldw	r2,-32428(gp)
81107738:	100f883a 	mov	r7,r2
8110773c:	01801484 	movi	r6,82
81107740:	01400044 	movi	r5,1
81107744:	012044f4 	movhi	r4,33043
81107748:	210c4e04 	addi	r4,r4,12600
8110774c:	110a8700 	call	8110a870 <fwrite>
		return -1;
81107750:	00bfffc4 	movi	r2,-1
81107754:	00001a06 	br	811077c0 <main+0x134>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
81107758:	11080e80 	call	811080e8 <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	vResourcesInitRTOS();
8110775c:	11076580 	call	81107658 <vResourcesInitRTOS>


	/* Creating the initialization task*/
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInitialTask,
81107760:	00800104 	movi	r2,4
81107764:	d8800415 	stw	r2,16(sp)
81107768:	d8000315 	stw	zero,12(sp)
8110776c:	00820004 	movi	r2,2048
81107770:	d8800215 	stw	r2,8(sp)
81107774:	00a04574 	movhi	r2,33045
81107778:	10b0f204 	addi	r2,r2,-15416
8110777c:	d8800115 	stw	r2,4(sp)
81107780:	00800044 	movi	r2,1
81107784:	d8800015 	stw	r2,0(sp)
81107788:	01c00044 	movi	r7,1
8110778c:	01a04574 	movhi	r6,33045
81107790:	31b8f104 	addi	r6,r6,-7228
81107794:	000b883a 	mov	r5,zero
81107798:	01204434 	movhi	r4,33040
8110779c:	21190704 	addi	r4,r4,25628
811077a0:	11269e40 	call	811269e4 <OSTaskCreateExt>
811077a4:	e0bfe605 	stb	r2,-104(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
811077a8:	e0bfe603 	ldbu	r2,-104(fp)
811077ac:	1000021e 	bne	r2,zero,811077b8 <main+0x12c>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
811077b0:	112133c0 	call	8112133c <OSStart>
811077b4:	00000106 	br	811077bc <main+0x130>
	} else {
		/* Some error ocours in the creation of the Initialization Task */
		vFailInitialization();
811077b8:	11085ec0 	call	811085ec <vFailInitialization>
	}
  
	return 0;
811077bc:	0005883a 	mov	r2,zero
}
811077c0:	e037883a 	mov	sp,fp
811077c4:	dfc00117 	ldw	ra,4(sp)
811077c8:	df000017 	ldw	fp,0(sp)
811077cc:	dec00204 	addi	sp,sp,8
811077d0:	f800283a 	ret

811077d4 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
811077d4:	defff504 	addi	sp,sp,-44
811077d8:	dfc00a15 	stw	ra,40(sp)
811077dc:	df000915 	stw	fp,36(sp)
811077e0:	dc000815 	stw	r16,32(sp)
811077e4:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
811077e8:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
811077ec:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
811077f0:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
811077f4:	d0a05617 	ldw	r2,-32424(gp)
811077f8:	10800058 	cmpnei	r2,r2,1
811077fc:	1001da1e 	bne	r2,zero,81107f68 <vLoadDefaultETHConf+0x794>
81107800:	11087ac0 	call	811087ac <bSDcardIsPresent>
81107804:	1001d826 	beq	r2,zero,81107f68 <vLoadDefaultETHConf+0x794>
81107808:	11087d40 	call	811087d4 <bSDcardFAT16Check>
8110780c:	1001d626 	beq	r2,zero,81107f68 <vLoadDefaultETHConf+0x794>

		siFile = siOpenFile( ETH_FILE_NAME );
81107810:	012044f4 	movhi	r4,33043
81107814:	210c6304 	addi	r4,r4,12684
81107818:	11088ec0 	call	811088ec <siOpenFile>
8110781c:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
81107820:	e0bffc0f 	ldh	r2,-16(fp)
81107824:	1001cc16 	blt	r2,zero,81107f58 <vLoadDefaultETHConf+0x784>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
81107828:	e0bffd04 	addi	r2,fp,-12
8110782c:	01800204 	movi	r6,8
81107830:	01400284 	movi	r5,10
81107834:	1009883a 	mov	r4,r2
81107838:	110b3b40 	call	8110b3b4 <memset>
			p_inteiro = inteiro;
8110783c:	e0bffd04 	addi	r2,fp,-12
81107840:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
81107844:	e0bffc0f 	ldh	r2,-16(fp)
81107848:	1009883a 	mov	r4,r2
8110784c:	11089580 	call	81108958 <cGetNextChar>
81107850:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
81107854:	e0bff947 	ldb	r2,-27(fp)
81107858:	10800084 	addi	r2,r2,2
8110785c:	10c015a8 	cmpgeui	r3,r2,86
81107860:	1801b31e 	bne	r3,zero,81107f30 <vLoadDefaultETHConf+0x75c>
81107864:	100690ba 	slli	r3,r2,2
81107868:	00a04434 	movhi	r2,33040
8110786c:	109e1f04 	addi	r2,r2,30844
81107870:	1885883a 	add	r2,r3,r2
81107874:	10800017 	ldw	r2,0(r2)
81107878:	1000683a 	jmp	r2
8110787c:	81107a14 	ori	r4,r16,16872
81107880:	81107a08 	cmpgei	r4,r16,16872
81107884:	81107f30 	cmpltui	r4,r16,16892
81107888:	81107f30 	cmpltui	r4,r16,16892
8110788c:	81107f30 	cmpltui	r4,r16,16892
81107890:	81107f30 	cmpltui	r4,r16,16892
81107894:	81107f30 	cmpltui	r4,r16,16892
81107898:	81107f30 	cmpltui	r4,r16,16892
8110789c:	81107f30 	cmpltui	r4,r16,16892
811078a0:	81107f30 	cmpltui	r4,r16,16892
811078a4:	81107f30 	cmpltui	r4,r16,16892
811078a8:	81107f30 	cmpltui	r4,r16,16892
811078ac:	81107f48 	cmpgei	r4,r16,16893
811078b0:	81107f30 	cmpltui	r4,r16,16892
811078b4:	81107f30 	cmpltui	r4,r16,16892
811078b8:	81107f48 	cmpgei	r4,r16,16893
811078bc:	81107f30 	cmpltui	r4,r16,16892
811078c0:	81107f30 	cmpltui	r4,r16,16892
811078c4:	81107f30 	cmpltui	r4,r16,16892
811078c8:	81107f30 	cmpltui	r4,r16,16892
811078cc:	81107f30 	cmpltui	r4,r16,16892
811078d0:	81107f30 	cmpltui	r4,r16,16892
811078d4:	81107f30 	cmpltui	r4,r16,16892
811078d8:	81107f30 	cmpltui	r4,r16,16892
811078dc:	81107f30 	cmpltui	r4,r16,16892
811078e0:	81107f30 	cmpltui	r4,r16,16892
811078e4:	81107f30 	cmpltui	r4,r16,16892
811078e8:	81107f30 	cmpltui	r4,r16,16892
811078ec:	81107f30 	cmpltui	r4,r16,16892
811078f0:	81107f30 	cmpltui	r4,r16,16892
811078f4:	81107f30 	cmpltui	r4,r16,16892
811078f8:	81107f30 	cmpltui	r4,r16,16892
811078fc:	81107f30 	cmpltui	r4,r16,16892
81107900:	81107f30 	cmpltui	r4,r16,16892
81107904:	81107f48 	cmpgei	r4,r16,16893
81107908:	81107f30 	cmpltui	r4,r16,16892
8110790c:	81107f30 	cmpltui	r4,r16,16892
81107910:	81107f30 	cmpltui	r4,r16,16892
81107914:	81107f30 	cmpltui	r4,r16,16892
81107918:	81107f30 	cmpltui	r4,r16,16892
8110791c:	81107f30 	cmpltui	r4,r16,16892
81107920:	811079d4 	ori	r4,r16,16871
81107924:	81107f30 	cmpltui	r4,r16,16892
81107928:	81107f30 	cmpltui	r4,r16,16892
8110792c:	81107f30 	cmpltui	r4,r16,16892
81107930:	81107f30 	cmpltui	r4,r16,16892
81107934:	81107f30 	cmpltui	r4,r16,16892
81107938:	81107f30 	cmpltui	r4,r16,16892
8110793c:	81107f30 	cmpltui	r4,r16,16892
81107940:	81107f30 	cmpltui	r4,r16,16892
81107944:	81107f30 	cmpltui	r4,r16,16892
81107948:	81107f30 	cmpltui	r4,r16,16892
8110794c:	81107f30 	cmpltui	r4,r16,16892
81107950:	81107f30 	cmpltui	r4,r16,16892
81107954:	81107f30 	cmpltui	r4,r16,16892
81107958:	81107f30 	cmpltui	r4,r16,16892
8110795c:	81107f30 	cmpltui	r4,r16,16892
81107960:	81107f30 	cmpltui	r4,r16,16892
81107964:	81107f30 	cmpltui	r4,r16,16892
81107968:	81107f30 	cmpltui	r4,r16,16892
8110796c:	81107f30 	cmpltui	r4,r16,16892
81107970:	81107f30 	cmpltui	r4,r16,16892
81107974:	81107ef8 	rdprs	r4,r16,16891
81107978:	81107f30 	cmpltui	r4,r16,16892
8110797c:	81107f30 	cmpltui	r4,r16,16892
81107980:	81107f30 	cmpltui	r4,r16,16892
81107984:	81107f30 	cmpltui	r4,r16,16892
81107988:	81107f30 	cmpltui	r4,r16,16892
8110798c:	81107f30 	cmpltui	r4,r16,16892
81107990:	81107f30 	cmpltui	r4,r16,16892
81107994:	81107d28 	cmpgeui	r4,r16,16884
81107998:	81107f30 	cmpltui	r4,r16,16892
8110799c:	81107f30 	cmpltui	r4,r16,16892
811079a0:	81107ba8 	cmpgeui	r4,r16,16878
811079a4:	81107e60 	cmpeqi	r4,r16,16889
811079a8:	81107aec 	andhi	r4,r16,16875
811079ac:	81107f30 	cmpltui	r4,r16,16892
811079b0:	81107f30 	cmpltui	r4,r16,16892
811079b4:	81107f30 	cmpltui	r4,r16,16892
811079b8:	81107a2c 	andhi	r4,r16,16872
811079bc:	81107f30 	cmpltui	r4,r16,16892
811079c0:	81107f30 	cmpltui	r4,r16,16892
811079c4:	81107de8 	cmpgeui	r4,r16,16887
811079c8:	81107f30 	cmpltui	r4,r16,16892
811079cc:	81107f30 	cmpltui	r4,r16,16892
811079d0:	81107c68 	cmpgeui	r4,r16,16881
					case 39:// single quote '
						c = cGetNextChar(siFile);
811079d4:	e0bffc0f 	ldh	r2,-16(fp)
811079d8:	1009883a 	mov	r4,r2
811079dc:	11089580 	call	81108958 <cGetNextChar>
811079e0:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
811079e4:	00000406 	br	811079f8 <vLoadDefaultETHConf+0x224>
							c = cGetNextChar(siFile);
811079e8:	e0bffc0f 	ldh	r2,-16(fp)
811079ec:	1009883a 	mov	r4,r2
811079f0:	11089580 	call	81108958 <cGetNextChar>
811079f4:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
811079f8:	e0bff947 	ldb	r2,-27(fp)
811079fc:	108009d8 	cmpnei	r2,r2,39
81107a00:	103ff91e 	bne	r2,zero,811079e8 <__reset+0xfb0e79e8>
							c = cGetNextChar(siFile);
						}
						break;
81107a04:	00015106 	br	81107f4c <vLoadDefaultETHConf+0x778>
					case -1: 	//EOF
						bEOF = TRUE;
81107a08:	00800044 	movi	r2,1
81107a0c:	e0bff815 	stw	r2,-32(fp)
						break;
81107a10:	00014e06 	br	81107f4c <vLoadDefaultETHConf+0x778>
					case -2: 	//EOF
						printf("Problem with SDCard");
81107a14:	012044f4 	movhi	r4,33043
81107a18:	210c6504 	addi	r4,r4,12692
81107a1c:	110b56c0 	call	8110b56c <printf>
						bEOF = TRUE;
81107a20:	00800044 	movi	r2,1
81107a24:	e0bff815 	stw	r2,-32(fp)
						break;
81107a28:	00014806 	br	81107f4c <vLoadDefaultETHConf+0x778>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
81107a2c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
81107a30:	e0bffc0f 	ldh	r2,-16(fp)
81107a34:	1009883a 	mov	r4,r2
81107a38:	11089580 	call	81108958 <cGetNextChar>
81107a3c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
81107a40:	e0bff947 	ldb	r2,-27(fp)
81107a44:	10bff404 	addi	r2,r2,-48
81107a48:	108002a8 	cmpgeui	r2,r2,10
81107a4c:	1000061e 	bne	r2,zero,81107a68 <vLoadDefaultETHConf+0x294>
									(*p_inteiro) = c;
81107a50:	e0bffa17 	ldw	r2,-24(fp)
81107a54:	e0fff943 	ldbu	r3,-27(fp)
81107a58:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
81107a5c:	e0bffa17 	ldw	r2,-24(fp)
81107a60:	10800044 	addi	r2,r2,1
81107a64:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
81107a68:	e0bff947 	ldb	r2,-27(fp)
81107a6c:	10800ea0 	cmpeqi	r2,r2,58
81107a70:	1000031e 	bne	r2,zero,81107a80 <vLoadDefaultETHConf+0x2ac>
81107a74:	e0bff947 	ldb	r2,-27(fp)
81107a78:	10800ed8 	cmpnei	r2,r2,59
81107a7c:	103fec1e 	bne	r2,zero,81107a30 <__reset+0xfb0e7a30>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81107a80:	e0bffa17 	ldw	r2,-24(fp)
81107a84:	00c00284 	movi	r3,10
81107a88:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
81107a8c:	e0bff903 	ldbu	r2,-28(fp)
81107a90:	10800168 	cmpgeui	r2,r2,5
81107a94:	1000021e 	bne	r2,zero,81107aa0 <vLoadDefaultETHConf+0x2cc>
81107a98:	e43ff903 	ldbu	r16,-28(fp)
81107a9c:	00000106 	br	81107aa4 <vLoadDefaultETHConf+0x2d0>
81107aa0:	04000144 	movi	r16,5
81107aa4:	e0bffd04 	addi	r2,fp,-12
81107aa8:	1009883a 	mov	r4,r2
81107aac:	110a1580 	call	8110a158 <atoi>
81107ab0:	1007883a 	mov	r3,r2
81107ab4:	00a04574 	movhi	r2,33045
81107ab8:	1088f204 	addi	r2,r2,9160
81107abc:	1405883a 	add	r2,r2,r16
81107ac0:	10800404 	addi	r2,r2,16
81107ac4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
81107ac8:	e0bffd04 	addi	r2,fp,-12
81107acc:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
81107ad0:	e0bff903 	ldbu	r2,-28(fp)
81107ad4:	10800044 	addi	r2,r2,1
81107ad8:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
81107adc:	e0bff947 	ldb	r2,-27(fp)
81107ae0:	10800ed8 	cmpnei	r2,r2,59
81107ae4:	103fd21e 	bne	r2,zero,81107a30 <__reset+0xfb0e7a30>

						break;
81107ae8:	00011806 	br	81107f4c <vLoadDefaultETHConf+0x778>
					case 'I':

						ucParser = 0;
81107aec:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
81107af0:	e0bffc0f 	ldh	r2,-16(fp)
81107af4:	1009883a 	mov	r4,r2
81107af8:	11089580 	call	81108958 <cGetNextChar>
81107afc:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
81107b00:	e0bff947 	ldb	r2,-27(fp)
81107b04:	10bff404 	addi	r2,r2,-48
81107b08:	108002a8 	cmpgeui	r2,r2,10
81107b0c:	1000061e 	bne	r2,zero,81107b28 <vLoadDefaultETHConf+0x354>
									(*p_inteiro) = c;
81107b10:	e0bffa17 	ldw	r2,-24(fp)
81107b14:	e0fff943 	ldbu	r3,-27(fp)
81107b18:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
81107b1c:	e0bffa17 	ldw	r2,-24(fp)
81107b20:	10800044 	addi	r2,r2,1
81107b24:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
81107b28:	e0bff947 	ldb	r2,-27(fp)
81107b2c:	10800ba0 	cmpeqi	r2,r2,46
81107b30:	1000031e 	bne	r2,zero,81107b40 <vLoadDefaultETHConf+0x36c>
81107b34:	e0bff947 	ldb	r2,-27(fp)
81107b38:	10800ed8 	cmpnei	r2,r2,59
81107b3c:	103fec1e 	bne	r2,zero,81107af0 <__reset+0xfb0e7af0>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81107b40:	e0bffa17 	ldw	r2,-24(fp)
81107b44:	00c00284 	movi	r3,10
81107b48:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
81107b4c:	e0bff903 	ldbu	r2,-28(fp)
81107b50:	108000e8 	cmpgeui	r2,r2,3
81107b54:	1000021e 	bne	r2,zero,81107b60 <vLoadDefaultETHConf+0x38c>
81107b58:	e43ff903 	ldbu	r16,-28(fp)
81107b5c:	00000106 	br	81107b64 <vLoadDefaultETHConf+0x390>
81107b60:	040000c4 	movi	r16,3
81107b64:	e0bffd04 	addi	r2,fp,-12
81107b68:	1009883a 	mov	r4,r2
81107b6c:	110a1580 	call	8110a158 <atoi>
81107b70:	1007883a 	mov	r3,r2
81107b74:	00a04574 	movhi	r2,33045
81107b78:	1088f204 	addi	r2,r2,9160
81107b7c:	1405883a 	add	r2,r2,r16
81107b80:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
81107b84:	e0bffd04 	addi	r2,fp,-12
81107b88:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
81107b8c:	e0bff903 	ldbu	r2,-28(fp)
81107b90:	10800044 	addi	r2,r2,1
81107b94:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
81107b98:	e0bff947 	ldb	r2,-27(fp)
81107b9c:	10800ed8 	cmpnei	r2,r2,59
81107ba0:	103fd31e 	bne	r2,zero,81107af0 <__reset+0xfb0e7af0>

						break;
81107ba4:	0000e906 	br	81107f4c <vLoadDefaultETHConf+0x778>
					case 'G':

						ucParser = 0;
81107ba8:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
81107bac:	e0bffc0f 	ldh	r2,-16(fp)
81107bb0:	1009883a 	mov	r4,r2
81107bb4:	11089580 	call	81108958 <cGetNextChar>
81107bb8:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
81107bbc:	e0bff947 	ldb	r2,-27(fp)
81107bc0:	10bff404 	addi	r2,r2,-48
81107bc4:	108002a8 	cmpgeui	r2,r2,10
81107bc8:	1000061e 	bne	r2,zero,81107be4 <vLoadDefaultETHConf+0x410>
									(*p_inteiro) = c;
81107bcc:	e0bffa17 	ldw	r2,-24(fp)
81107bd0:	e0fff943 	ldbu	r3,-27(fp)
81107bd4:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
81107bd8:	e0bffa17 	ldw	r2,-24(fp)
81107bdc:	10800044 	addi	r2,r2,1
81107be0:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
81107be4:	e0bff947 	ldb	r2,-27(fp)
81107be8:	10800ba0 	cmpeqi	r2,r2,46
81107bec:	1000031e 	bne	r2,zero,81107bfc <vLoadDefaultETHConf+0x428>
81107bf0:	e0bff947 	ldb	r2,-27(fp)
81107bf4:	10800ed8 	cmpnei	r2,r2,59
81107bf8:	103fec1e 	bne	r2,zero,81107bac <__reset+0xfb0e7bac>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81107bfc:	e0bffa17 	ldw	r2,-24(fp)
81107c00:	00c00284 	movi	r3,10
81107c04:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
81107c08:	e0bff903 	ldbu	r2,-28(fp)
81107c0c:	108000e8 	cmpgeui	r2,r2,3
81107c10:	1000021e 	bne	r2,zero,81107c1c <vLoadDefaultETHConf+0x448>
81107c14:	e43ff903 	ldbu	r16,-28(fp)
81107c18:	00000106 	br	81107c20 <vLoadDefaultETHConf+0x44c>
81107c1c:	040000c4 	movi	r16,3
81107c20:	e0bffd04 	addi	r2,fp,-12
81107c24:	1009883a 	mov	r4,r2
81107c28:	110a1580 	call	8110a158 <atoi>
81107c2c:	1007883a 	mov	r3,r2
81107c30:	00a04574 	movhi	r2,33045
81107c34:	1088f204 	addi	r2,r2,9160
81107c38:	1405883a 	add	r2,r2,r16
81107c3c:	10800104 	addi	r2,r2,4
81107c40:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
81107c44:	e0bffd04 	addi	r2,fp,-12
81107c48:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
81107c4c:	e0bff903 	ldbu	r2,-28(fp)
81107c50:	10800044 	addi	r2,r2,1
81107c54:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
81107c58:	e0bff947 	ldb	r2,-27(fp)
81107c5c:	10800ed8 	cmpnei	r2,r2,59
81107c60:	103fd21e 	bne	r2,zero,81107bac <__reset+0xfb0e7bac>

						break;
81107c64:	0000b906 	br	81107f4c <vLoadDefaultETHConf+0x778>
					case 'S':

						ucParser = 0;
81107c68:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
81107c6c:	e0bffc0f 	ldh	r2,-16(fp)
81107c70:	1009883a 	mov	r4,r2
81107c74:	11089580 	call	81108958 <cGetNextChar>
81107c78:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
81107c7c:	e0bff947 	ldb	r2,-27(fp)
81107c80:	10bff404 	addi	r2,r2,-48
81107c84:	108002a8 	cmpgeui	r2,r2,10
81107c88:	1000061e 	bne	r2,zero,81107ca4 <vLoadDefaultETHConf+0x4d0>
									(*p_inteiro) = c;
81107c8c:	e0bffa17 	ldw	r2,-24(fp)
81107c90:	e0fff943 	ldbu	r3,-27(fp)
81107c94:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
81107c98:	e0bffa17 	ldw	r2,-24(fp)
81107c9c:	10800044 	addi	r2,r2,1
81107ca0:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
81107ca4:	e0bff947 	ldb	r2,-27(fp)
81107ca8:	10800ba0 	cmpeqi	r2,r2,46
81107cac:	1000031e 	bne	r2,zero,81107cbc <vLoadDefaultETHConf+0x4e8>
81107cb0:	e0bff947 	ldb	r2,-27(fp)
81107cb4:	10800ed8 	cmpnei	r2,r2,59
81107cb8:	103fec1e 	bne	r2,zero,81107c6c <__reset+0xfb0e7c6c>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81107cbc:	e0bffa17 	ldw	r2,-24(fp)
81107cc0:	00c00284 	movi	r3,10
81107cc4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
81107cc8:	e0bff903 	ldbu	r2,-28(fp)
81107ccc:	108000e8 	cmpgeui	r2,r2,3
81107cd0:	1000021e 	bne	r2,zero,81107cdc <vLoadDefaultETHConf+0x508>
81107cd4:	e43ff903 	ldbu	r16,-28(fp)
81107cd8:	00000106 	br	81107ce0 <vLoadDefaultETHConf+0x50c>
81107cdc:	040000c4 	movi	r16,3
81107ce0:	e0bffd04 	addi	r2,fp,-12
81107ce4:	1009883a 	mov	r4,r2
81107ce8:	110a1580 	call	8110a158 <atoi>
81107cec:	1007883a 	mov	r3,r2
81107cf0:	00a04574 	movhi	r2,33045
81107cf4:	1088f204 	addi	r2,r2,9160
81107cf8:	1405883a 	add	r2,r2,r16
81107cfc:	10800204 	addi	r2,r2,8
81107d00:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
81107d04:	e0bffd04 	addi	r2,fp,-12
81107d08:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
81107d0c:	e0bff903 	ldbu	r2,-28(fp)
81107d10:	10800044 	addi	r2,r2,1
81107d14:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
81107d18:	e0bff947 	ldb	r2,-27(fp)
81107d1c:	10800ed8 	cmpnei	r2,r2,59
81107d20:	103fd21e 	bne	r2,zero,81107c6c <__reset+0xfb0e7c6c>

						break;
81107d24:	00008906 	br	81107f4c <vLoadDefaultETHConf+0x778>
					case 'D':

						ucParser = 0;
81107d28:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
81107d2c:	e0bffc0f 	ldh	r2,-16(fp)
81107d30:	1009883a 	mov	r4,r2
81107d34:	11089580 	call	81108958 <cGetNextChar>
81107d38:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
81107d3c:	e0bff947 	ldb	r2,-27(fp)
81107d40:	10bff404 	addi	r2,r2,-48
81107d44:	108002a8 	cmpgeui	r2,r2,10
81107d48:	1000061e 	bne	r2,zero,81107d64 <vLoadDefaultETHConf+0x590>
									(*p_inteiro) = c;
81107d4c:	e0bffa17 	ldw	r2,-24(fp)
81107d50:	e0fff943 	ldbu	r3,-27(fp)
81107d54:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
81107d58:	e0bffa17 	ldw	r2,-24(fp)
81107d5c:	10800044 	addi	r2,r2,1
81107d60:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
81107d64:	e0bff947 	ldb	r2,-27(fp)
81107d68:	10800ba0 	cmpeqi	r2,r2,46
81107d6c:	1000031e 	bne	r2,zero,81107d7c <vLoadDefaultETHConf+0x5a8>
81107d70:	e0bff947 	ldb	r2,-27(fp)
81107d74:	10800ed8 	cmpnei	r2,r2,59
81107d78:	103fec1e 	bne	r2,zero,81107d2c <__reset+0xfb0e7d2c>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81107d7c:	e0bffa17 	ldw	r2,-24(fp)
81107d80:	00c00284 	movi	r3,10
81107d84:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
81107d88:	e0bff903 	ldbu	r2,-28(fp)
81107d8c:	108000e8 	cmpgeui	r2,r2,3
81107d90:	1000021e 	bne	r2,zero,81107d9c <vLoadDefaultETHConf+0x5c8>
81107d94:	e43ff903 	ldbu	r16,-28(fp)
81107d98:	00000106 	br	81107da0 <vLoadDefaultETHConf+0x5cc>
81107d9c:	040000c4 	movi	r16,3
81107da0:	e0bffd04 	addi	r2,fp,-12
81107da4:	1009883a 	mov	r4,r2
81107da8:	110a1580 	call	8110a158 <atoi>
81107dac:	1007883a 	mov	r3,r2
81107db0:	00a04574 	movhi	r2,33045
81107db4:	1088f204 	addi	r2,r2,9160
81107db8:	1405883a 	add	r2,r2,r16
81107dbc:	10800304 	addi	r2,r2,12
81107dc0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
81107dc4:	e0bffd04 	addi	r2,fp,-12
81107dc8:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
81107dcc:	e0bff903 	ldbu	r2,-28(fp)
81107dd0:	10800044 	addi	r2,r2,1
81107dd4:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
81107dd8:	e0bff947 	ldb	r2,-27(fp)
81107ddc:	10800ed8 	cmpnei	r2,r2,59
81107de0:	103fd21e 	bne	r2,zero,81107d2c <__reset+0xfb0e7d2c>

						break;						
81107de4:	00005906 	br	81107f4c <vLoadDefaultETHConf+0x778>
					case 'P':

						do {
							c = cGetNextChar(siFile);
81107de8:	e0bffc0f 	ldh	r2,-16(fp)
81107dec:	1009883a 	mov	r4,r2
81107df0:	11089580 	call	81108958 <cGetNextChar>
81107df4:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
81107df8:	e0bff947 	ldb	r2,-27(fp)
81107dfc:	10bff404 	addi	r2,r2,-48
81107e00:	108002a8 	cmpgeui	r2,r2,10
81107e04:	1000061e 	bne	r2,zero,81107e20 <vLoadDefaultETHConf+0x64c>
								(*p_inteiro) = c;
81107e08:	e0bffa17 	ldw	r2,-24(fp)
81107e0c:	e0fff943 	ldbu	r3,-27(fp)
81107e10:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
81107e14:	e0bffa17 	ldw	r2,-24(fp)
81107e18:	10800044 	addi	r2,r2,1
81107e1c:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
81107e20:	e0bff947 	ldb	r2,-27(fp)
81107e24:	10800ed8 	cmpnei	r2,r2,59
81107e28:	103fef1e 	bne	r2,zero,81107de8 <__reset+0xfb0e7de8>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81107e2c:	e0bffa17 	ldw	r2,-24(fp)
81107e30:	00c00284 	movi	r3,10
81107e34:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
81107e38:	e0bffd04 	addi	r2,fp,-12
81107e3c:	1009883a 	mov	r4,r2
81107e40:	110a1580 	call	8110a158 <atoi>
81107e44:	1007883a 	mov	r3,r2
81107e48:	00a04574 	movhi	r2,33045
81107e4c:	1088f204 	addi	r2,r2,9160
81107e50:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
81107e54:	e0bffd04 	addi	r2,fp,-12
81107e58:	e0bffa15 	stw	r2,-24(fp)

						break;
81107e5c:	00003b06 	br	81107f4c <vLoadDefaultETHConf+0x778>
					case 'H':

						do {
							c = cGetNextChar(siFile);
81107e60:	e0bffc0f 	ldh	r2,-16(fp)
81107e64:	1009883a 	mov	r4,r2
81107e68:	11089580 	call	81108958 <cGetNextChar>
81107e6c:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
81107e70:	e0bff947 	ldb	r2,-27(fp)
81107e74:	10bff404 	addi	r2,r2,-48
81107e78:	108002a8 	cmpgeui	r2,r2,10
81107e7c:	1000061e 	bne	r2,zero,81107e98 <vLoadDefaultETHConf+0x6c4>
								(*p_inteiro) = c;
81107e80:	e0bffa17 	ldw	r2,-24(fp)
81107e84:	e0fff943 	ldbu	r3,-27(fp)
81107e88:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
81107e8c:	e0bffa17 	ldw	r2,-24(fp)
81107e90:	10800044 	addi	r2,r2,1
81107e94:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
81107e98:	e0bff947 	ldb	r2,-27(fp)
81107e9c:	10800ed8 	cmpnei	r2,r2,59
81107ea0:	103fef1e 	bne	r2,zero,81107e60 <__reset+0xfb0e7e60>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81107ea4:	e0bffa17 	ldw	r2,-24(fp)
81107ea8:	00c00284 	movi	r3,10
81107eac:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
81107eb0:	e0bffd04 	addi	r2,fp,-12
81107eb4:	1009883a 	mov	r4,r2
81107eb8:	110a1580 	call	8110a158 <atoi>
81107ebc:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
81107ec0:	e0bffc8f 	ldh	r2,-14(fp)
81107ec4:	10800058 	cmpnei	r2,r2,1
81107ec8:	1000051e 	bne	r2,zero,81107ee0 <vLoadDefaultETHConf+0x70c>
							xConfEth.bDHCP = TRUE;
81107ecc:	00a04574 	movhi	r2,33045
81107ed0:	1088f204 	addi	r2,r2,9160
81107ed4:	00c00044 	movi	r3,1
81107ed8:	10c00615 	stw	r3,24(r2)
81107edc:	00000306 	br	81107eec <vLoadDefaultETHConf+0x718>
						else
							xConfEth.bDHCP = FALSE;
81107ee0:	00a04574 	movhi	r2,33045
81107ee4:	1088f204 	addi	r2,r2,9160
81107ee8:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
81107eec:	e0bffd04 	addi	r2,fp,-12
81107ef0:	e0bffa15 	stw	r2,-24(fp)

						break;
81107ef4:	00001506 	br	81107f4c <vLoadDefaultETHConf+0x778>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
81107ef8:	e0bffc0f 	ldh	r2,-16(fp)
81107efc:	1009883a 	mov	r4,r2
81107f00:	11089200 	call	81108920 <siCloseFile>
81107f04:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
81107f08:	e0bffb17 	ldw	r2,-20(fp)
81107f0c:	1000031e 	bne	r2,zero,81107f1c <vLoadDefaultETHConf+0x748>
							printf("Problema em fechar o arquivo\n");
81107f10:	012044f4 	movhi	r4,33043
81107f14:	210c6a04 	addi	r4,r4,12712
81107f18:	110b6880 	call	8110b688 <puts>

						/* End of Parser File */
						bEOF = TRUE;
81107f1c:	00800044 	movi	r2,1
81107f20:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
81107f24:	00800044 	movi	r2,1
81107f28:	e0bff715 	stw	r2,-36(fp)
						break;
81107f2c:	00000706 	br	81107f4c <vLoadDefaultETHConf+0x778>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
81107f30:	e0bff947 	ldb	r2,-27(fp)
81107f34:	100b883a 	mov	r5,r2
81107f38:	012044f4 	movhi	r4,33043
81107f3c:	210c7204 	addi	r4,r4,12744
81107f40:	110b56c0 	call	8110b56c <printf>
						break;
81107f44:	00000106 	br	81107f4c <vLoadDefaultETHConf+0x778>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
81107f48:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
81107f4c:	e0bff817 	ldw	r2,-32(fp)
81107f50:	103e3c26 	beq	r2,zero,81107844 <__reset+0xfb0e7844>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
81107f54:	00000706 	br	81107f74 <vLoadDefaultETHConf+0x7a0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
81107f58:	012044f4 	movhi	r4,33043
81107f5c:	210c7f04 	addi	r4,r4,12796
81107f60:	110b6880 	call	8110b688 <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
81107f64:	00000306 	br	81107f74 <vLoadDefaultETHConf+0x7a0>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
81107f68:	012044f4 	movhi	r4,33043
81107f6c:	210c8804 	addi	r4,r4,12832
81107f70:	110b6880 	call	8110b688 <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
81107f74:	e0bff717 	ldw	r2,-36(fp)
81107f78:	1000541e 	bne	r2,zero,811080cc <vLoadDefaultETHConf+0x8f8>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
81107f7c:	012044f4 	movhi	r4,33043
81107f80:	210c8b04 	addi	r4,r4,12844
81107f84:	110b6880 	call	8110b688 <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
81107f88:	016044f4 	movhi	r5,33043
81107f8c:	294c6304 	addi	r5,r5,12684
81107f90:	012044f4 	movhi	r4,33043
81107f94:	210c9f04 	addi	r4,r4,12924
81107f98:	110b56c0 	call	8110b56c <printf>


		xConfEth.siPortPUS = 17000;
81107f9c:	00a04574 	movhi	r2,33045
81107fa0:	1088f204 	addi	r2,r2,9160
81107fa4:	00d09a04 	movi	r3,17000
81107fa8:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
81107fac:	00a04574 	movhi	r2,33045
81107fb0:	1088f204 	addi	r2,r2,9160
81107fb4:	00fff004 	movi	r3,-64
81107fb8:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
81107fbc:	00a04574 	movhi	r2,33045
81107fc0:	1088f204 	addi	r2,r2,9160
81107fc4:	00ffea04 	movi	r3,-88
81107fc8:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
81107fcc:	00a04574 	movhi	r2,33045
81107fd0:	1088f204 	addi	r2,r2,9160
81107fd4:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
81107fd8:	00a04574 	movhi	r2,33045
81107fdc:	1088f204 	addi	r2,r2,9160
81107fe0:	00c00144 	movi	r3,5
81107fe4:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
81107fe8:	00a04574 	movhi	r2,33045
81107fec:	1088f204 	addi	r2,r2,9160
81107ff0:	00fff004 	movi	r3,-64
81107ff4:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
81107ff8:	00a04574 	movhi	r2,33045
81107ffc:	1088f204 	addi	r2,r2,9160
81108000:	00ffea04 	movi	r3,-88
81108004:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
81108008:	00a04574 	movhi	r2,33045
8110800c:	1088f204 	addi	r2,r2,9160
81108010:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
81108014:	00a04574 	movhi	r2,33045
81108018:	1088f204 	addi	r2,r2,9160
8110801c:	00c00044 	movi	r3,1
81108020:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
81108024:	00a04574 	movhi	r2,33045
81108028:	1088f204 	addi	r2,r2,9160
8110802c:	00ffffc4 	movi	r3,-1
81108030:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
81108034:	00a04574 	movhi	r2,33045
81108038:	1088f204 	addi	r2,r2,9160
8110803c:	00ffffc4 	movi	r3,-1
81108040:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
81108044:	00a04574 	movhi	r2,33045
81108048:	1088f204 	addi	r2,r2,9160
8110804c:	00ffffc4 	movi	r3,-1
81108050:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
81108054:	00a04574 	movhi	r2,33045
81108058:	1088f204 	addi	r2,r2,9160
8110805c:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
81108060:	00a04574 	movhi	r2,33045
81108064:	1088f204 	addi	r2,r2,9160
81108068:	00ffff04 	movi	r3,-4
8110806c:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
81108070:	00a04574 	movhi	r2,33045
81108074:	1088f204 	addi	r2,r2,9160
81108078:	00fffdc4 	movi	r3,-9
8110807c:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
81108080:	00a04574 	movhi	r2,33045
81108084:	1088f204 	addi	r2,r2,9160
81108088:	00c018c4 	movi	r3,99
8110808c:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
81108090:	00a04574 	movhi	r2,33045
81108094:	1088f204 	addi	r2,r2,9160
81108098:	00c01344 	movi	r3,77
8110809c:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
811080a0:	00a04574 	movhi	r2,33045
811080a4:	1088f204 	addi	r2,r2,9160
811080a8:	00c007c4 	movi	r3,31
811080ac:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
811080b0:	00a04574 	movhi	r2,33045
811080b4:	1088f204 	addi	r2,r2,9160
811080b8:	00c01084 	movi	r3,66
811080bc:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
811080c0:	00a04574 	movhi	r2,33045
811080c4:	1088f204 	addi	r2,r2,9160
811080c8:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
811080cc:	e0bff717 	ldw	r2,-36(fp)
}
811080d0:	e6ffff04 	addi	sp,fp,-4
811080d4:	dfc00217 	ldw	ra,8(sp)
811080d8:	df000117 	ldw	fp,4(sp)
811080dc:	dc000017 	ldw	r16,0(sp)
811080e0:	dec00304 	addi	sp,sp,12
811080e4:	f800283a 	ret

811080e8 <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
811080e8:	defff004 	addi	sp,sp,-64
811080ec:	dfc00f15 	stw	ra,60(sp)
811080f0:	df000e15 	stw	fp,56(sp)
811080f4:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
811080f8:	d0a05517 	ldw	r2,-32428(gp)
811080fc:	100f883a 	mov	r7,r2
81108100:	018007c4 	movi	r6,31
81108104:	01400044 	movi	r5,1
81108108:	012044f4 	movhi	r4,33043
8110810c:	210ca504 	addi	r4,r4,12948
81108110:	110a8700 	call	8110a870 <fwrite>

		memset(buffer,0,40);
81108114:	01800a04 	movi	r6,40
81108118:	000b883a 	mov	r5,zero
8110811c:	e13ff604 	addi	r4,fp,-40
81108120:	110b3b40 	call	8110b3b4 <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
81108124:	00a04574 	movhi	r2,33045
81108128:	1088f204 	addi	r2,r2,9160
8110812c:	10800403 	ldbu	r2,16(r2)
81108130:	11803fcc 	andi	r6,r2,255
81108134:	00a04574 	movhi	r2,33045
81108138:	1088f204 	addi	r2,r2,9160
8110813c:	10800443 	ldbu	r2,17(r2)
81108140:	11c03fcc 	andi	r7,r2,255
81108144:	00a04574 	movhi	r2,33045
81108148:	1088f204 	addi	r2,r2,9160
8110814c:	10800483 	ldbu	r2,18(r2)
81108150:	10c03fcc 	andi	r3,r2,255
81108154:	00a04574 	movhi	r2,33045
81108158:	1088f204 	addi	r2,r2,9160
8110815c:	108004c3 	ldbu	r2,19(r2)
81108160:	11003fcc 	andi	r4,r2,255
81108164:	00a04574 	movhi	r2,33045
81108168:	1088f204 	addi	r2,r2,9160
8110816c:	10800503 	ldbu	r2,20(r2)
81108170:	11403fcc 	andi	r5,r2,255
81108174:	00a04574 	movhi	r2,33045
81108178:	1088f204 	addi	r2,r2,9160
8110817c:	10800543 	ldbu	r2,21(r2)
81108180:	10803fcc 	andi	r2,r2,255
81108184:	d8800315 	stw	r2,12(sp)
81108188:	d9400215 	stw	r5,8(sp)
8110818c:	d9000115 	stw	r4,4(sp)
81108190:	d8c00015 	stw	r3,0(sp)
81108194:	016044f4 	movhi	r5,33043
81108198:	294cad04 	addi	r5,r5,12980
8110819c:	e13ff604 	addi	r4,fp,-40
811081a0:	110b9a40 	call	8110b9a4 <sprintf>
		debug(fp, buffer );
811081a4:	d0a05517 	ldw	r2,-32428(gp)
811081a8:	e17ff604 	addi	r5,fp,-40
811081ac:	1009883a 	mov	r4,r2
811081b0:	110a2a40 	call	8110a2a4 <fprintf>

		memset(buffer,0,40);
811081b4:	01800a04 	movi	r6,40
811081b8:	000b883a 	mov	r5,zero
811081bc:	e13ff604 	addi	r4,fp,-40
811081c0:	110b3b40 	call	8110b3b4 <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
811081c4:	00a04574 	movhi	r2,33045
811081c8:	1088f204 	addi	r2,r2,9160
811081cc:	10800003 	ldbu	r2,0(r2)
811081d0:	11003fcc 	andi	r4,r2,255
811081d4:	00a04574 	movhi	r2,33045
811081d8:	1088f204 	addi	r2,r2,9160
811081dc:	10800043 	ldbu	r2,1(r2)
811081e0:	11403fcc 	andi	r5,r2,255
811081e4:	00a04574 	movhi	r2,33045
811081e8:	1088f204 	addi	r2,r2,9160
811081ec:	10800083 	ldbu	r2,2(r2)
811081f0:	10c03fcc 	andi	r3,r2,255
811081f4:	00a04574 	movhi	r2,33045
811081f8:	1088f204 	addi	r2,r2,9160
811081fc:	108000c3 	ldbu	r2,3(r2)
81108200:	10803fcc 	andi	r2,r2,255
81108204:	d8800115 	stw	r2,4(sp)
81108208:	d8c00015 	stw	r3,0(sp)
8110820c:	280f883a 	mov	r7,r5
81108210:	200d883a 	mov	r6,r4
81108214:	016044f4 	movhi	r5,33043
81108218:	294cb604 	addi	r5,r5,13016
8110821c:	e13ff604 	addi	r4,fp,-40
81108220:	110b9a40 	call	8110b9a4 <sprintf>
		debug(fp, buffer );
81108224:	d0a05517 	ldw	r2,-32428(gp)
81108228:	e17ff604 	addi	r5,fp,-40
8110822c:	1009883a 	mov	r4,r2
81108230:	110a2a40 	call	8110a2a4 <fprintf>

		memset(buffer,0,40);
81108234:	01800a04 	movi	r6,40
81108238:	000b883a 	mov	r5,zero
8110823c:	e13ff604 	addi	r4,fp,-40
81108240:	110b3b40 	call	8110b3b4 <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
81108244:	00a04574 	movhi	r2,33045
81108248:	1088f204 	addi	r2,r2,9160
8110824c:	10800103 	ldbu	r2,4(r2)
81108250:	11003fcc 	andi	r4,r2,255
81108254:	00a04574 	movhi	r2,33045
81108258:	1088f204 	addi	r2,r2,9160
8110825c:	10800143 	ldbu	r2,5(r2)
81108260:	11403fcc 	andi	r5,r2,255
81108264:	00a04574 	movhi	r2,33045
81108268:	1088f204 	addi	r2,r2,9160
8110826c:	10800183 	ldbu	r2,6(r2)
81108270:	10c03fcc 	andi	r3,r2,255
81108274:	00a04574 	movhi	r2,33045
81108278:	1088f204 	addi	r2,r2,9160
8110827c:	108001c3 	ldbu	r2,7(r2)
81108280:	10803fcc 	andi	r2,r2,255
81108284:	d8800115 	stw	r2,4(sp)
81108288:	d8c00015 	stw	r3,0(sp)
8110828c:	280f883a 	mov	r7,r5
81108290:	200d883a 	mov	r6,r4
81108294:	016044f4 	movhi	r5,33043
81108298:	294cbc04 	addi	r5,r5,13040
8110829c:	e13ff604 	addi	r4,fp,-40
811082a0:	110b9a40 	call	8110b9a4 <sprintf>
		debug(fp, buffer );
811082a4:	d0a05517 	ldw	r2,-32428(gp)
811082a8:	e17ff604 	addi	r5,fp,-40
811082ac:	1009883a 	mov	r4,r2
811082b0:	110a2a40 	call	8110a2a4 <fprintf>

		memset(buffer,0,40);
811082b4:	01800a04 	movi	r6,40
811082b8:	000b883a 	mov	r5,zero
811082bc:	e13ff604 	addi	r4,fp,-40
811082c0:	110b3b40 	call	8110b3b4 <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
811082c4:	00a04574 	movhi	r2,33045
811082c8:	1088f204 	addi	r2,r2,9160
811082cc:	10800203 	ldbu	r2,8(r2)
811082d0:	11003fcc 	andi	r4,r2,255
811082d4:	00a04574 	movhi	r2,33045
811082d8:	1088f204 	addi	r2,r2,9160
811082dc:	10800243 	ldbu	r2,9(r2)
811082e0:	11403fcc 	andi	r5,r2,255
811082e4:	00a04574 	movhi	r2,33045
811082e8:	1088f204 	addi	r2,r2,9160
811082ec:	10800283 	ldbu	r2,10(r2)
811082f0:	10c03fcc 	andi	r3,r2,255
811082f4:	00a04574 	movhi	r2,33045
811082f8:	1088f204 	addi	r2,r2,9160
811082fc:	108002c3 	ldbu	r2,11(r2)
81108300:	10803fcc 	andi	r2,r2,255
81108304:	d8800115 	stw	r2,4(sp)
81108308:	d8c00015 	stw	r3,0(sp)
8110830c:	280f883a 	mov	r7,r5
81108310:	200d883a 	mov	r6,r4
81108314:	016044f4 	movhi	r5,33043
81108318:	294cc304 	addi	r5,r5,13068
8110831c:	e13ff604 	addi	r4,fp,-40
81108320:	110b9a40 	call	8110b9a4 <sprintf>
		debug(fp, buffer );
81108324:	d0a05517 	ldw	r2,-32428(gp)
81108328:	e17ff604 	addi	r5,fp,-40
8110832c:	1009883a 	mov	r4,r2
81108330:	110a2a40 	call	8110a2a4 <fprintf>

		memset(buffer,0,40);
81108334:	01800a04 	movi	r6,40
81108338:	000b883a 	mov	r5,zero
8110833c:	e13ff604 	addi	r4,fp,-40
81108340:	110b3b40 	call	8110b3b4 <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
81108344:	00a04574 	movhi	r2,33045
81108348:	1088f204 	addi	r2,r2,9160
8110834c:	10800303 	ldbu	r2,12(r2)
81108350:	11003fcc 	andi	r4,r2,255
81108354:	00a04574 	movhi	r2,33045
81108358:	1088f204 	addi	r2,r2,9160
8110835c:	10800343 	ldbu	r2,13(r2)
81108360:	11403fcc 	andi	r5,r2,255
81108364:	00a04574 	movhi	r2,33045
81108368:	1088f204 	addi	r2,r2,9160
8110836c:	10800383 	ldbu	r2,14(r2)
81108370:	10c03fcc 	andi	r3,r2,255
81108374:	00a04574 	movhi	r2,33045
81108378:	1088f204 	addi	r2,r2,9160
8110837c:	108003c3 	ldbu	r2,15(r2)
81108380:	10803fcc 	andi	r2,r2,255
81108384:	d8800115 	stw	r2,4(sp)
81108388:	d8c00015 	stw	r3,0(sp)
8110838c:	280f883a 	mov	r7,r5
81108390:	200d883a 	mov	r6,r4
81108394:	016044f4 	movhi	r5,33043
81108398:	294cca04 	addi	r5,r5,13096
8110839c:	e13ff604 	addi	r4,fp,-40
811083a0:	110b9a40 	call	8110b9a4 <sprintf>
		debug(fp, buffer );
811083a4:	d0a05517 	ldw	r2,-32428(gp)
811083a8:	e17ff604 	addi	r5,fp,-40
811083ac:	1009883a 	mov	r4,r2
811083b0:	110a2a40 	call	8110a2a4 <fprintf>

		memset(buffer,0,40);
811083b4:	01800a04 	movi	r6,40
811083b8:	000b883a 	mov	r5,zero
811083bc:	e13ff604 	addi	r4,fp,-40
811083c0:	110b3b40 	call	8110b3b4 <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
811083c4:	00a04574 	movhi	r2,33045
811083c8:	1088f204 	addi	r2,r2,9160
811083cc:	1080058b 	ldhu	r2,22(r2)
811083d0:	10bfffcc 	andi	r2,r2,65535
811083d4:	100d883a 	mov	r6,r2
811083d8:	016044f4 	movhi	r5,33043
811083dc:	294cd104 	addi	r5,r5,13124
811083e0:	e13ff604 	addi	r4,fp,-40
811083e4:	110b9a40 	call	8110b9a4 <sprintf>
		debug(fp, buffer );
811083e8:	d0a05517 	ldw	r2,-32428(gp)
811083ec:	e17ff604 	addi	r5,fp,-40
811083f0:	1009883a 	mov	r4,r2
811083f4:	110a2a40 	call	8110a2a4 <fprintf>

	}
811083f8:	0001883a 	nop
811083fc:	e037883a 	mov	sp,fp
81108400:	dfc00117 	ldw	ra,4(sp)
81108404:	df000017 	ldw	fp,0(sp)
81108408:	dec00204 	addi	sp,sp,8
8110840c:	f800283a 	ret

81108410 <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
81108410:	defffb04 	addi	sp,sp,-20
81108414:	df000415 	stw	fp,16(sp)
81108418:	df000404 	addi	fp,sp,16
8110841c:	e13ffd15 	stw	r4,-12(fp)
81108420:	e17ffe15 	stw	r5,-8(fp)
81108424:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
81108428:	e0bffe17 	ldw	r2,-8(fp)
8110842c:	1000021e 	bne	r2,zero,81108438 <ucCrc8+0x28>
        return 0;
81108430:	0005883a 	mov	r2,zero
81108434:	00001906 	br	8110849c <ucCrc8+0x8c>
    crc &= 0xff;
81108438:	e0bffd17 	ldw	r2,-12(fp)
8110843c:	10803fcc 	andi	r2,r2,255
81108440:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
81108444:	e0fffe17 	ldw	r3,-8(fp)
81108448:	e0bfff17 	ldw	r2,-4(fp)
8110844c:	1885883a 	add	r2,r3,r2
81108450:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
81108454:	00000d06 	br	8110848c <ucCrc8+0x7c>
        crc = crc8_table[crc ^ *data++];
81108458:	e0bffe17 	ldw	r2,-8(fp)
8110845c:	10c00044 	addi	r3,r2,1
81108460:	e0fffe15 	stw	r3,-8(fp)
81108464:	10800003 	ldbu	r2,0(r2)
81108468:	10c03fcc 	andi	r3,r2,255
8110846c:	e0bffd17 	ldw	r2,-12(fp)
81108470:	1886f03a 	xor	r3,r3,r2
81108474:	00a044f4 	movhi	r2,33043
81108478:	108cd4c4 	addi	r2,r2,13139
8110847c:	10c5883a 	add	r2,r2,r3
81108480:	10800003 	ldbu	r2,0(r2)
81108484:	10803fcc 	andi	r2,r2,255
81108488:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110848c:	e0fffe17 	ldw	r3,-8(fp)
81108490:	e0bffc17 	ldw	r2,-16(fp)
81108494:	18bff036 	bltu	r3,r2,81108458 <__reset+0xfb0e8458>
        crc = crc8_table[crc ^ *data++];
    return crc;
81108498:	e0bffd17 	ldw	r2,-12(fp)
}
8110849c:	e037883a 	mov	sp,fp
811084a0:	df000017 	ldw	fp,0(sp)
811084a4:	dec00104 	addi	sp,sp,4
811084a8:	f800283a 	ret

811084ac <ucCrc8wInit>:

unsigned char ucCrc8wInit(unsigned char const *data, size_t len)
{
811084ac:	defffb04 	addi	sp,sp,-20
811084b0:	dfc00415 	stw	ra,16(sp)
811084b4:	df000315 	stw	fp,12(sp)
811084b8:	df000304 	addi	fp,sp,12
811084bc:	e13ffe15 	stw	r4,-8(fp)
811084c0:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;
	crc = ucCrc8(0, NULL, 0);
811084c4:	000d883a 	mov	r6,zero
811084c8:	000b883a 	mov	r5,zero
811084cc:	0009883a 	mov	r4,zero
811084d0:	11084100 	call	81108410 <ucCrc8>
811084d4:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, data, len);
811084d8:	e0bffd03 	ldbu	r2,-12(fp)
811084dc:	e1bfff17 	ldw	r6,-4(fp)
811084e0:	e17ffe17 	ldw	r5,-8(fp)
811084e4:	1009883a 	mov	r4,r2
811084e8:	11084100 	call	81108410 <ucCrc8>
}
811084ec:	e037883a 	mov	sp,fp
811084f0:	dfc00117 	ldw	ra,4(sp)
811084f4:	df000017 	ldw	fp,0(sp)
811084f8:	dec00204 	addi	sp,sp,8
811084fc:	f800283a 	ret

81108500 <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
81108500:	defffa04 	addi	sp,sp,-24
81108504:	dfc00515 	stw	ra,20(sp)
81108508:	df000415 	stw	fp,16(sp)
8110850c:	df000404 	addi	fp,sp,16
81108510:	2005883a 	mov	r2,r4
81108514:	e0bfff05 	stb	r2,-4(fp)
		char buffer[9] = "";
81108518:	e03ffc15 	stw	zero,-16(fp)
8110851c:	e03ffd15 	stw	zero,-12(fp)
81108520:	e03ffe05 	stb	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
81108524:	e0bfff03 	ldbu	r2,-4(fp)
81108528:	100d883a 	mov	r6,r2
8110852c:	016044f4 	movhi	r5,33043
81108530:	294d1504 	addi	r5,r5,13396
81108534:	e13ffc04 	addi	r4,fp,-16
81108538:	110b9a40 	call	8110b9a4 <sprintf>
		debug(fp, buffer);
8110853c:	d0a05517 	ldw	r2,-32428(gp)
81108540:	e17ffc04 	addi	r5,fp,-16
81108544:	1009883a 	mov	r4,r2
81108548:	110a2a40 	call	8110a2a4 <fprintf>
	}
8110854c:	0001883a 	nop
81108550:	e037883a 	mov	sp,fp
81108554:	dfc00117 	ldw	ra,4(sp)
81108558:	df000017 	ldw	fp,0(sp)
8110855c:	dec00204 	addi	sp,sp,8
81108560:	f800283a 	ret

81108564 <vFailTestCriticasParts>:
#endif


INT8U vFailTestCriticasParts( void )
{
81108564:	defffe04 	addi	sp,sp,-8
81108568:	dfc00115 	stw	ra,4(sp)
8110856c:	df000015 	stw	fp,0(sp)
81108570:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts");
81108574:	d0a05517 	ldw	r2,-32428(gp)
81108578:	100f883a 	mov	r7,r2
8110857c:	01800584 	movi	r6,22
81108580:	01400044 	movi	r5,1
81108584:	012044f4 	movhi	r4,33043
81108588:	210d1804 	addi	r4,r4,13408
8110858c:	110a8700 	call	8110a870 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
	return -1;
81108590:	00bfffc4 	movi	r2,-1
}
81108594:	e037883a 	mov	sp,fp
81108598:	dfc00117 	ldw	ra,4(sp)
8110859c:	df000017 	ldw	fp,0(sp)
811085a0:	dec00204 	addi	sp,sp,8
811085a4:	f800283a 	ret

811085a8 <vFailGetMacRTC>:


INT8U vFailGetMacRTC( void )
{
811085a8:	defffe04 	addi	sp,sp,-8
811085ac:	dfc00115 	stw	ra,4(sp)
811085b0:	df000015 	stw	fp,0(sp)
811085b4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC");
811085b8:	d0a05517 	ldw	r2,-32428(gp)
811085bc:	100f883a 	mov	r7,r2
811085c0:	01800384 	movi	r6,14
811085c4:	01400044 	movi	r5,1
811085c8:	012044f4 	movhi	r4,33043
811085cc:	210d1e04 	addi	r4,r4,13432
811085d0:	110a8700 	call	8110a870 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
	return -1;
811085d4:	00bfffc4 	movi	r2,-1
}
811085d8:	e037883a 	mov	sp,fp
811085dc:	dfc00117 	ldw	ra,4(sp)
811085e0:	df000017 	ldw	fp,0(sp)
811085e4:	dec00204 	addi	sp,sp,8
811085e8:	f800283a 	ret

811085ec <vFailInitialization>:


INT8U vFailInitialization( void )
{
811085ec:	defffe04 	addi	sp,sp,-8
811085f0:	dfc00115 	stw	ra,4(sp)
811085f4:	df000015 	stw	fp,0(sp)
811085f8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization");
811085fc:	d0a05517 	ldw	r2,-32428(gp)
81108600:	100f883a 	mov	r7,r2
81108604:	018004c4 	movi	r6,19
81108608:	01400044 	movi	r5,1
8110860c:	012044f4 	movhi	r4,33043
81108610:	210d2204 	addi	r4,r4,13448
81108614:	110a8700 	call	8110a870 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
	return -1;
81108618:	00bfffc4 	movi	r2,-1
}
8110861c:	e037883a 	mov	sp,fp
81108620:	dfc00117 	ldw	ra,4(sp)
81108624:	df000017 	ldw	fp,0(sp)
81108628:	dec00204 	addi	sp,sp,8
8110862c:	f800283a 	ret

81108630 <vFailReceiverCreate>:


INT8U vFailReceiverCreate( void )
{
81108630:	defffe04 	addi	sp,sp,-8
81108634:	dfc00115 	stw	ra,4(sp)
81108638:	df000015 	stw	fp,0(sp)
8110863c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailReceiverCreate");
81108640:	d0a05517 	ldw	r2,-32428(gp)
81108644:	100f883a 	mov	r7,r2
81108648:	018004c4 	movi	r6,19
8110864c:	01400044 	movi	r5,1
81108650:	012044f4 	movhi	r4,33043
81108654:	210d2704 	addi	r4,r4,13468
81108658:	110a8700 	call	8110a870 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
	return -1;
8110865c:	00bfffc4 	movi	r2,-1
}
81108660:	e037883a 	mov	sp,fp
81108664:	dfc00117 	ldw	ra,4(sp)
81108668:	df000017 	ldw	fp,0(sp)
8110866c:	dec00204 	addi	sp,sp,8
81108670:	f800283a 	ret

81108674 <vFailSenderCreate>:


INT8U vFailSenderCreate( void )
{
81108674:	defffe04 	addi	sp,sp,-8
81108678:	dfc00115 	stw	ra,4(sp)
8110867c:	df000015 	stw	fp,0(sp)
81108680:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate");
81108684:	d0a05517 	ldw	r2,-32428(gp)
81108688:	100f883a 	mov	r7,r2
8110868c:	01800444 	movi	r6,17
81108690:	01400044 	movi	r5,1
81108694:	012044f4 	movhi	r4,33043
81108698:	210d2c04 	addi	r4,r4,13488
8110869c:	110a8700 	call	8110a870 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
	return -1;
811086a0:	00bfffc4 	movi	r2,-1
}
811086a4:	e037883a 	mov	sp,fp
811086a8:	dfc00117 	ldw	ra,4(sp)
811086ac:	df000017 	ldw	fp,0(sp)
811086b0:	dec00204 	addi	sp,sp,8
811086b4:	f800283a 	ret

811086b8 <vFailDeleteInitialization>:


INT8U vFailDeleteInitialization( void )
{
811086b8:	defffe04 	addi	sp,sp,-8
811086bc:	dfc00115 	stw	ra,4(sp)
811086c0:	df000015 	stw	fp,0(sp)
811086c4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization");
811086c8:	d0a05517 	ldw	r2,-32428(gp)
811086cc:	100f883a 	mov	r7,r2
811086d0:	01800644 	movi	r6,25
811086d4:	01400044 	movi	r5,1
811086d8:	012044f4 	movhi	r4,33043
811086dc:	210d3104 	addi	r4,r4,13508
811086e0:	110a8700 	call	8110a870 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
	return -1;
811086e4:	00bfffc4 	movi	r2,-1
811086e8:	e037883a 	mov	sp,fp
811086ec:	dfc00117 	ldw	ra,4(sp)
811086f0:	df000017 	ldw	fp,0(sp)
811086f4:	dec00204 	addi	sp,sp,8
811086f8:	f800283a 	ret

811086fc <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
811086fc:	defffe04 	addi	sp,sp,-8
81108700:	dfc00115 	stw	ra,4(sp)
81108704:	df000015 	stw	fp,0(sp)
81108708:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110870c:	01403fc4 	movi	r5,255
81108710:	0009883a 	mov	r4,zero
81108714:	110570c0 	call	8110570c <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
81108718:	01400834 	movhi	r5,32
8110871c:	297fffc4 	addi	r5,r5,-1
81108720:	0009883a 	mov	r4,zero
81108724:	11057840 	call	81105784 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
81108728:	01400074 	movhi	r5,1
8110872c:	01000044 	movi	r4,1
81108730:	11057840 	call	81105784 <bSetPainelLeds>

	/* Release ETH Reset */
	vEthReleaseReset();
81108734:	1104f980 	call	81104f98 <vEthReleaseReset>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
81108738:	0009883a 	mov	r4,zero
8110873c:	11063100 	call	81106310 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
81108740:	0009883a 	mov	r4,zero
81108744:	11063d80 	call	811063d8 <bSSDisplayUpdate>

}
81108748:	0001883a 	nop
8110874c:	e037883a 	mov	sp,fp
81108750:	dfc00117 	ldw	ra,4(sp)
81108754:	df000017 	ldw	fp,0(sp)
81108758:	dec00204 	addi	sp,sp,8
8110875c:	f800283a 	ret

81108760 <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
81108760:	defffd04 	addi	sp,sp,-12
81108764:	df000215 	stw	fp,8(sp)
81108768:	df000204 	addi	fp,sp,8
8110876c:	e13ffe15 	stw	r4,-8(fp)
81108770:	e17fff15 	stw	r5,-4(fp)

}
81108774:	0001883a 	nop
81108778:	e037883a 	mov	sp,fp
8110877c:	df000017 	ldw	fp,0(sp)
81108780:	dec00104 	addi	sp,sp,4
81108784:	f800283a 	ret

81108788 <bLogWriteETH>:

bool bLogWriteETH ( const char * cDataIn )
{
81108788:	defffe04 	addi	sp,sp,-8
8110878c:	df000115 	stw	fp,4(sp)
81108790:	df000104 	addi	fp,sp,4
81108794:	e13fff15 	stw	r4,-4(fp)

}
81108798:	0001883a 	nop
8110879c:	e037883a 	mov	sp,fp
811087a0:	df000017 	ldw	fp,0(sp)
811087a4:	dec00104 	addi	sp,sp,4
811087a8:	f800283a 	ret

811087ac <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
811087ac:	defffe04 	addi	sp,sp,-8
811087b0:	dfc00115 	stw	ra,4(sp)
811087b4:	df000015 	stw	fp,0(sp)
811087b8:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
811087bc:	112ae280 	call	8112ae28 <alt_up_sd_card_is_Present>
}
811087c0:	e037883a 	mov	sp,fp
811087c4:	dfc00117 	ldw	ra,4(sp)
811087c8:	df000017 	ldw	fp,0(sp)
811087cc:	dec00204 	addi	sp,sp,8
811087d0:	f800283a 	ret

811087d4 <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
811087d4:	defffe04 	addi	sp,sp,-8
811087d8:	dfc00115 	stw	ra,4(sp)
811087dc:	df000015 	stw	fp,0(sp)
811087e0:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
811087e4:	112aeec0 	call	8112aeec <alt_up_sd_card_is_FAT16>
}
811087e8:	e037883a 	mov	sp,fp
811087ec:	dfc00117 	ldw	ra,4(sp)
811087f0:	df000017 	ldw	fp,0(sp)
811087f4:	dec00204 	addi	sp,sp,8
811087f8:	f800283a 	ret

811087fc <bInitializeSDCard>:

bool bInitializeSDCard( void ){
811087fc:	defffd04 	addi	sp,sp,-12
81108800:	dfc00215 	stw	ra,8(sp)
81108804:	df000115 	stw	fp,4(sp)
81108808:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
8110880c:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
81108810:	d0205715 	stw	zero,-32420(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
81108814:	012044f4 	movhi	r4,33043
81108818:	210d3804 	addi	r4,r4,13536
8110881c:	112ad6c0 	call	8112ad6c <alt_up_sd_card_open_dev>
81108820:	d0a05715 	stw	r2,-32420(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
81108824:	d0a05717 	ldw	r2,-32420(gp)
81108828:	10002226 	beq	r2,zero,811088b4 <bInitializeSDCard+0xb8>

		bSucess = bSDcardIsPresent();
8110882c:	11087ac0 	call	811087ac <bSDcardIsPresent>
81108830:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
81108834:	e0bfff17 	ldw	r2,-4(fp)
81108838:	10001626 	beq	r2,zero,81108894 <bInitializeSDCard+0x98>
			bSucess = bSDcardFAT16Check();
8110883c:	11087d40 	call	811087d4 <bSDcardFAT16Check>
81108840:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
81108844:	e0bfff17 	ldw	r2,-4(fp)
81108848:	10000a26 	beq	r2,zero,81108874 <bInitializeSDCard+0x78>
				xSdHandle.connected = TRUE;
8110884c:	00800044 	movi	r2,1
81108850:	d0a05615 	stw	r2,-32424(gp)
				debug(fp, "SD is up.\r\n");
81108854:	d0a05517 	ldw	r2,-32428(gp)
81108858:	100f883a 	mov	r7,r2
8110885c:	018002c4 	movi	r6,11
81108860:	01400044 	movi	r5,1
81108864:	012044f4 	movhi	r4,33043
81108868:	210d4304 	addi	r4,r4,13580
8110886c:	110a8700 	call	8110a870 <fwrite>
81108870:	00001806 	br	811088d4 <bInitializeSDCard+0xd8>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
81108874:	d0a05517 	ldw	r2,-32428(gp)
81108878:	100f883a 	mov	r7,r2
8110887c:	01800984 	movi	r6,38
81108880:	01400044 	movi	r5,1
81108884:	012044f4 	movhi	r4,33043
81108888:	210d4604 	addi	r4,r4,13592
8110888c:	110a8700 	call	8110a870 <fwrite>
81108890:	00001006 	br	811088d4 <bInitializeSDCard+0xd8>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
81108894:	d0a05517 	ldw	r2,-32428(gp)
81108898:	100f883a 	mov	r7,r2
8110889c:	01800744 	movi	r6,29
811088a0:	01400044 	movi	r5,1
811088a4:	012044f4 	movhi	r4,33043
811088a8:	210d5004 	addi	r4,r4,13632
811088ac:	110a8700 	call	8110a870 <fwrite>
811088b0:	00000806 	br	811088d4 <bInitializeSDCard+0xd8>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
811088b4:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
811088b8:	d0a05517 	ldw	r2,-32428(gp)
811088bc:	100f883a 	mov	r7,r2
811088c0:	018008c4 	movi	r6,35
811088c4:	01400044 	movi	r5,1
811088c8:	012044f4 	movhi	r4,33043
811088cc:	210d5804 	addi	r4,r4,13664
811088d0:	110a8700 	call	8110a870 <fwrite>
	}

	return bSucess;
811088d4:	e0bfff17 	ldw	r2,-4(fp)
}
811088d8:	e037883a 	mov	sp,fp
811088dc:	dfc00117 	ldw	ra,4(sp)
811088e0:	df000017 	ldw	fp,0(sp)
811088e4:	dec00204 	addi	sp,sp,8
811088e8:	f800283a 	ret

811088ec <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
811088ec:	defffd04 	addi	sp,sp,-12
811088f0:	dfc00215 	stw	ra,8(sp)
811088f4:	df000115 	stw	fp,4(sp)
811088f8:	df000104 	addi	fp,sp,4
811088fc:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
81108900:	000b883a 	mov	r5,zero
81108904:	e13fff17 	ldw	r4,-4(fp)
81108908:	112b3e00 	call	8112b3e0 <alt_up_sd_card_fopen>
}
8110890c:	e037883a 	mov	sp,fp
81108910:	dfc00117 	ldw	ra,4(sp)
81108914:	df000017 	ldw	fp,0(sp)
81108918:	dec00204 	addi	sp,sp,8
8110891c:	f800283a 	ret

81108920 <siCloseFile>:

bool siCloseFile( short int file_handle ) {
81108920:	defffd04 	addi	sp,sp,-12
81108924:	dfc00215 	stw	ra,8(sp)
81108928:	df000115 	stw	fp,4(sp)
8110892c:	df000104 	addi	fp,sp,4
81108930:	2005883a 	mov	r2,r4
81108934:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
81108938:	e0bfff0f 	ldh	r2,-4(fp)
8110893c:	1009883a 	mov	r4,r2
81108940:	112c2040 	call	8112c204 <alt_up_sd_card_fclose>
}
81108944:	e037883a 	mov	sp,fp
81108948:	dfc00117 	ldw	ra,4(sp)
8110894c:	df000017 	ldw	fp,0(sp)
81108950:	dec00204 	addi	sp,sp,8
81108954:	f800283a 	ret

81108958 <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
81108958:	defffd04 	addi	sp,sp,-12
8110895c:	dfc00215 	stw	ra,8(sp)
81108960:	df000115 	stw	fp,4(sp)
81108964:	df000104 	addi	fp,sp,4
81108968:	2005883a 	mov	r2,r4
8110896c:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
81108970:	e0bfff0f 	ldh	r2,-4(fp)
81108974:	1009883a 	mov	r4,r2
81108978:	112b86c0 	call	8112b86c <alt_up_sd_card_read>
}
8110897c:	e037883a 	mov	sp,fp
81108980:	dfc00117 	ldw	ra,4(sp)
81108984:	df000017 	ldw	fp,0(sp)
81108988:	dec00204 	addi	sp,sp,8
8110898c:	f800283a 	ret

81108990 <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
81108990:	deffff04 	addi	sp,sp,-4
81108994:	df000015 	stw	fp,0(sp)
81108998:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
8110899c:	00800044 	movi	r2,1
}
811089a0:	e037883a 	mov	sp,fp
811089a4:	df000017 	ldw	fp,0(sp)
811089a8:	dec00104 	addi	sp,sp,4
811089ac:	f800283a 	ret

811089b0 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
811089b0:	defffc04 	addi	sp,sp,-16
811089b4:	df000315 	stw	fp,12(sp)
811089b8:	df000304 	addi	fp,sp,12
811089bc:	e13ffd15 	stw	r4,-12(fp)
811089c0:	e17ffe15 	stw	r5,-8(fp)
811089c4:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
811089c8:	e0bffe17 	ldw	r2,-8(fp)
811089cc:	1085883a 	add	r2,r2,r2
811089d0:	1085883a 	add	r2,r2,r2
811089d4:	1007883a 	mov	r3,r2
811089d8:	e0bffd17 	ldw	r2,-12(fp)
811089dc:	1885883a 	add	r2,r3,r2
811089e0:	1007883a 	mov	r3,r2
811089e4:	e0bfff17 	ldw	r2,-4(fp)
811089e8:	18800035 	stwio	r2,0(r3)
	return 1;
811089ec:	00800044 	movi	r2,1

}
811089f0:	e037883a 	mov	sp,fp
811089f4:	df000017 	ldw	fp,0(sp)
811089f8:	dec00104 	addi	sp,sp,4
811089fc:	f800283a 	ret

81108a00 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
81108a00:	defffc04 	addi	sp,sp,-16
81108a04:	df000315 	stw	fp,12(sp)
81108a08:	df000304 	addi	fp,sp,12
81108a0c:	e13ffd15 	stw	r4,-12(fp)
81108a10:	e17ffe15 	stw	r5,-8(fp)
81108a14:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
81108a18:	e0bffe17 	ldw	r2,-8(fp)
81108a1c:	1085883a 	add	r2,r2,r2
81108a20:	1085883a 	add	r2,r2,r2
81108a24:	1007883a 	mov	r3,r2
81108a28:	e0bffd17 	ldw	r2,-12(fp)
81108a2c:	1885883a 	add	r2,r3,r2
81108a30:	10c00037 	ldwio	r3,0(r2)
81108a34:	e0bfff17 	ldw	r2,-4(fp)
81108a38:	10c00015 	stw	r3,0(r2)
	return 1;
81108a3c:	00800044 	movi	r2,1

}
81108a40:	e037883a 	mov	sp,fp
81108a44:	df000017 	ldw	fp,0(sp)
81108a48:	dec00104 	addi	sp,sp,4
81108a4c:	f800283a 	ret

81108a50 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
81108a50:	defffa04 	addi	sp,sp,-24
81108a54:	dfc00515 	stw	ra,20(sp)
81108a58:	df000415 	stw	fp,16(sp)
81108a5c:	df000404 	addi	fp,sp,16
81108a60:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
81108a64:	e0bfff17 	ldw	r2,-4(fp)
81108a68:	1005d1ba 	srai	r2,r2,6
81108a6c:	1080004c 	andi	r2,r2,1
81108a70:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
81108a74:	e0bfff17 	ldw	r2,-4(fp)
81108a78:	1005d17a 	srai	r2,r2,5
81108a7c:	1080004c 	andi	r2,r2,1
81108a80:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
81108a84:	e0bfff17 	ldw	r2,-4(fp)
81108a88:	1005d13a 	srai	r2,r2,4
81108a8c:	1080004c 	andi	r2,r2,1
81108a90:	e0bffe15 	stw	r2,-8(fp)

	printf("-------- link status \n");
81108a94:	012044f4 	movhi	r4,33043
81108a98:	210d6104 	addi	r4,r4,13700
81108a9c:	110b6880 	call	8110b688 <puts>
	printf("Link started    : %s \n", (started == 1) ? "S" : "N");
81108aa0:	e0bffc17 	ldw	r2,-16(fp)
81108aa4:	10800058 	cmpnei	r2,r2,1
81108aa8:	1000031e 	bne	r2,zero,81108ab8 <_print_codec_status+0x68>
81108aac:	00a044f4 	movhi	r2,33043
81108ab0:	108d6704 	addi	r2,r2,13724
81108ab4:	00000206 	br	81108ac0 <_print_codec_status+0x70>
81108ab8:	00a044f4 	movhi	r2,33043
81108abc:	108d6804 	addi	r2,r2,13728
81108ac0:	100b883a 	mov	r5,r2
81108ac4:	012044f4 	movhi	r4,33043
81108ac8:	210d6904 	addi	r4,r4,13732
81108acc:	110b56c0 	call	8110b56c <printf>
	printf("Link connecting : %s \n", (connecting == 1) ? "S" : "N");
81108ad0:	e0bffd17 	ldw	r2,-12(fp)
81108ad4:	10800058 	cmpnei	r2,r2,1
81108ad8:	1000031e 	bne	r2,zero,81108ae8 <_print_codec_status+0x98>
81108adc:	00a044f4 	movhi	r2,33043
81108ae0:	108d6704 	addi	r2,r2,13724
81108ae4:	00000206 	br	81108af0 <_print_codec_status+0xa0>
81108ae8:	00a044f4 	movhi	r2,33043
81108aec:	108d6804 	addi	r2,r2,13728
81108af0:	100b883a 	mov	r5,r2
81108af4:	012044f4 	movhi	r4,33043
81108af8:	210d6f04 	addi	r4,r4,13756
81108afc:	110b56c0 	call	8110b56c <printf>
	printf("Link running    : %s \n", (running == 1) ? "S" : "N");
81108b00:	e0bffe17 	ldw	r2,-8(fp)
81108b04:	10800058 	cmpnei	r2,r2,1
81108b08:	1000031e 	bne	r2,zero,81108b18 <_print_codec_status+0xc8>
81108b0c:	00a044f4 	movhi	r2,33043
81108b10:	108d6704 	addi	r2,r2,13724
81108b14:	00000206 	br	81108b20 <_print_codec_status+0xd0>
81108b18:	00a044f4 	movhi	r2,33043
81108b1c:	108d6804 	addi	r2,r2,13728
81108b20:	100b883a 	mov	r5,r2
81108b24:	012044f4 	movhi	r4,33043
81108b28:	210d7504 	addi	r4,r4,13780
81108b2c:	110b56c0 	call	8110b56c <printf>
	printf("--------  \n");
81108b30:	012044f4 	movhi	r4,33043
81108b34:	210d7b04 	addi	r4,r4,13804
81108b38:	110b6880 	call	8110b688 <puts>
}
81108b3c:	0001883a 	nop
81108b40:	e037883a 	mov	sp,fp
81108b44:	dfc00117 	ldw	ra,4(sp)
81108b48:	df000017 	ldw	fp,0(sp)
81108b4c:	dec00204 	addi	sp,sp,8
81108b50:	f800283a 	ret

81108b54 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
81108b54:	defffb04 	addi	sp,sp,-20
81108b58:	df000415 	stw	fp,16(sp)
81108b5c:	df000404 	addi	fp,sp,16
81108b60:	e13ffc15 	stw	r4,-16(fp)
81108b64:	e17ffd15 	stw	r5,-12(fp)
81108b68:	e1bffe15 	stw	r6,-8(fp)
81108b6c:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
81108b70:	e0bffc17 	ldw	r2,-16(fp)
81108b74:	1005d1ba 	srai	r2,r2,6
81108b78:	10c0004c 	andi	r3,r2,1
81108b7c:	e0bffd17 	ldw	r2,-12(fp)
81108b80:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
81108b84:	e0bffc17 	ldw	r2,-16(fp)
81108b88:	1005d17a 	srai	r2,r2,5
81108b8c:	10c0004c 	andi	r3,r2,1
81108b90:	e0bffe17 	ldw	r2,-8(fp)
81108b94:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
81108b98:	e0bffc17 	ldw	r2,-16(fp)
81108b9c:	1005d13a 	srai	r2,r2,4
81108ba0:	10c0004c 	andi	r3,r2,1
81108ba4:	e0bfff17 	ldw	r2,-4(fp)
81108ba8:	10c00015 	stw	r3,0(r2)
}
81108bac:	0001883a 	nop
81108bb0:	e037883a 	mov	sp,fp
81108bb4:	df000017 	ldw	fp,0(sp)
81108bb8:	dec00104 	addi	sp,sp,4
81108bbc:	f800283a 	ret

81108bc0 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
INT8U aatoh(INT8U *buffer) {
81108bc0:	defffc04 	addi	sp,sp,-16
81108bc4:	df000315 	stw	fp,12(sp)
81108bc8:	df000304 	addi	fp,sp,12
81108bcc:	e13fff15 	stw	r4,-4(fp)
	INT8U* a;
	INT8U v;
	a = buffer;
81108bd0:	e0bfff17 	ldw	r2,-4(fp)
81108bd4:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
81108bd8:	e0bffd17 	ldw	r2,-12(fp)
81108bdc:	10c00003 	ldbu	r3,0(r2)
81108be0:	e0bffd17 	ldw	r2,-12(fp)
81108be4:	10800003 	ldbu	r2,0(r2)
81108be8:	10803fcc 	andi	r2,r2,255
81108bec:	10800eb0 	cmpltui	r2,r2,58
81108bf0:	1000021e 	bne	r2,zero,81108bfc <aatoh+0x3c>
81108bf4:	00800dc4 	movi	r2,55
81108bf8:	00000106 	br	81108c00 <aatoh+0x40>
81108bfc:	00800c04 	movi	r2,48
81108c00:	1885c83a 	sub	r2,r3,r2
81108c04:	1004913a 	slli	r2,r2,4
81108c08:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
81108c0c:	e0bffd17 	ldw	r2,-12(fp)
81108c10:	10800044 	addi	r2,r2,1
81108c14:	10c00003 	ldbu	r3,0(r2)
81108c18:	e0bffd17 	ldw	r2,-12(fp)
81108c1c:	10800044 	addi	r2,r2,1
81108c20:	10800003 	ldbu	r2,0(r2)
 */
INT8U aatoh(INT8U *buffer) {
	INT8U* a;
	INT8U v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
81108c24:	10803fcc 	andi	r2,r2,255
81108c28:	10800eb0 	cmpltui	r2,r2,58
81108c2c:	1000021e 	bne	r2,zero,81108c38 <aatoh+0x78>
81108c30:	00800dc4 	movi	r2,55
81108c34:	00000106 	br	81108c3c <aatoh+0x7c>
81108c38:	00800c04 	movi	r2,48
81108c3c:	1885c83a 	sub	r2,r3,r2
81108c40:	2085883a 	add	r2,r4,r2
81108c44:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
81108c48:	e0bffe03 	ldbu	r2,-8(fp)
}
81108c4c:	e037883a 	mov	sp,fp
81108c50:	df000017 	ldw	fp,0(sp)
81108c54:	dec00104 	addi	sp,sp,4
81108c58:	f800283a 	ret

81108c5c <Verif_Error>:
 * *
 * @retval int
 *
 */

INT8U Verif_Error(INT8U error_code) {
81108c5c:	defffd04 	addi	sp,sp,-12
81108c60:	dfc00215 	stw	ra,8(sp)
81108c64:	df000115 	stw	fp,4(sp)
81108c68:	df000104 	addi	fp,sp,4
81108c6c:	2005883a 	mov	r2,r4
81108c70:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
81108c74:	e0bfff03 	ldbu	r2,-4(fp)
81108c78:	1000051e 	bne	r2,zero,81108c90 <Verif_Error+0x34>
		printf("ERROR\n\r");
81108c7c:	012044f4 	movhi	r4,33043
81108c80:	210d7e04 	addi	r4,r4,13816
81108c84:	110b56c0 	call	8110b56c <printf>
		return 0;
81108c88:	0005883a 	mov	r2,zero
81108c8c:	00000106 	br	81108c94 <Verif_Error+0x38>
	} else
		return 1;
81108c90:	00800044 	movi	r2,1
}
81108c94:	e037883a 	mov	sp,fp
81108c98:	dfc00117 	ldw	ra,4(sp)
81108c9c:	df000017 	ldw	fp,0(sp)
81108ca0:	dec00204 	addi	sp,sp,8
81108ca4:	f800283a 	ret

81108ca8 <toInt>:
 * *
 * @retval int
 *
 */

INT8U toInt(INT8U ascii) {
81108ca8:	defffe04 	addi	sp,sp,-8
81108cac:	df000115 	stw	fp,4(sp)
81108cb0:	df000104 	addi	fp,sp,4
81108cb4:	2005883a 	mov	r2,r4
81108cb8:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
81108cbc:	e0bfff03 	ldbu	r2,-4(fp)
81108cc0:	10bff404 	addi	r2,r2,-48
81108cc4:	e037883a 	mov	sp,fp
81108cc8:	df000017 	ldw	fp,0(sp)
81108ccc:	dec00104 	addi	sp,sp,4
81108cd0:	f800283a 	ret

81108cd4 <__divsf3>:
81108cd4:	defff504 	addi	sp,sp,-44
81108cd8:	200cd5fa 	srli	r6,r4,23
81108cdc:	dcc00415 	stw	r19,16(sp)
81108ce0:	2026d7fa 	srli	r19,r4,31
81108ce4:	00c02034 	movhi	r3,128
81108ce8:	dd800715 	stw	r22,28(sp)
81108cec:	dd000515 	stw	r20,20(sp)
81108cf0:	dc800315 	stw	r18,12(sp)
81108cf4:	18ffffc4 	addi	r3,r3,-1
81108cf8:	dfc00a15 	stw	ra,40(sp)
81108cfc:	df000915 	stw	fp,36(sp)
81108d00:	ddc00815 	stw	r23,32(sp)
81108d04:	dd400615 	stw	r21,24(sp)
81108d08:	dc400215 	stw	r17,8(sp)
81108d0c:	dc000115 	stw	r16,4(sp)
81108d10:	35003fcc 	andi	r20,r6,255
81108d14:	1924703a 	and	r18,r3,r4
81108d18:	9d803fcc 	andi	r22,r19,255
81108d1c:	a0005226 	beq	r20,zero,81108e68 <__divsf3+0x194>
81108d20:	00803fc4 	movi	r2,255
81108d24:	a0802e26 	beq	r20,r2,81108de0 <__divsf3+0x10c>
81108d28:	91002034 	orhi	r4,r18,128
81108d2c:	202490fa 	slli	r18,r4,3
81108d30:	a53fe044 	addi	r20,r20,-127
81108d34:	0021883a 	mov	r16,zero
81108d38:	002f883a 	mov	r23,zero
81108d3c:	280cd5fa 	srli	r6,r5,23
81108d40:	282ad7fa 	srli	r21,r5,31
81108d44:	00c02034 	movhi	r3,128
81108d48:	18ffffc4 	addi	r3,r3,-1
81108d4c:	31803fcc 	andi	r6,r6,255
81108d50:	1962703a 	and	r17,r3,r5
81108d54:	af003fcc 	andi	fp,r21,255
81108d58:	30004a26 	beq	r6,zero,81108e84 <__divsf3+0x1b0>
81108d5c:	00803fc4 	movi	r2,255
81108d60:	30804526 	beq	r6,r2,81108e78 <__divsf3+0x1a4>
81108d64:	89402034 	orhi	r5,r17,128
81108d68:	282290fa 	slli	r17,r5,3
81108d6c:	31bfe044 	addi	r6,r6,-127
81108d70:	000b883a 	mov	r5,zero
81108d74:	2c20b03a 	or	r16,r5,r16
81108d78:	802090ba 	slli	r16,r16,2
81108d7c:	00a04474 	movhi	r2,33041
81108d80:	10a36804 	addi	r2,r2,-29280
81108d84:	80a1883a 	add	r16,r16,r2
81108d88:	81000017 	ldw	r4,0(r16)
81108d8c:	9d46f03a 	xor	r3,r19,r21
81108d90:	180f883a 	mov	r7,r3
81108d94:	18803fcc 	andi	r2,r3,255
81108d98:	a18dc83a 	sub	r6,r20,r6
81108d9c:	2000683a 	jmp	r4
81108da0:	81108f84 	addi	r4,r16,16958
81108da4:	81108e08 	cmpgei	r4,r16,16952
81108da8:	81108f78 	rdprs	r4,r16,16957
81108dac:	81108df4 	orhi	r4,r16,16951
81108db0:	81108f78 	rdprs	r4,r16,16957
81108db4:	81108f50 	cmplti	r4,r16,16957
81108db8:	81108f78 	rdprs	r4,r16,16957
81108dbc:	81108df4 	orhi	r4,r16,16951
81108dc0:	81108e08 	cmpgei	r4,r16,16952
81108dc4:	81108e08 	cmpgei	r4,r16,16952
81108dc8:	81108f50 	cmplti	r4,r16,16957
81108dcc:	81108df4 	orhi	r4,r16,16951
81108dd0:	81109064 	muli	r4,r16,16961
81108dd4:	81109064 	muli	r4,r16,16961
81108dd8:	81109064 	muli	r4,r16,16961
81108ddc:	81109018 	cmpnei	r4,r16,16960
81108de0:	9000581e 	bne	r18,zero,81108f44 <__divsf3+0x270>
81108de4:	04000204 	movi	r16,8
81108de8:	05c00084 	movi	r23,2
81108dec:	003fd306 	br	81108d3c <__reset+0xfb0e8d3c>
81108df0:	0023883a 	mov	r17,zero
81108df4:	e02d883a 	mov	r22,fp
81108df8:	282f883a 	mov	r23,r5
81108dfc:	00800084 	movi	r2,2
81108e00:	b8808f1e 	bne	r23,r2,81109040 <__divsf3+0x36c>
81108e04:	b005883a 	mov	r2,r22
81108e08:	11c0004c 	andi	r7,r2,1
81108e0c:	013fffc4 	movi	r4,-1
81108e10:	000d883a 	mov	r6,zero
81108e14:	21003fcc 	andi	r4,r4,255
81108e18:	200895fa 	slli	r4,r4,23
81108e1c:	38803fcc 	andi	r2,r7,255
81108e20:	00c02034 	movhi	r3,128
81108e24:	100497fa 	slli	r2,r2,31
81108e28:	18ffffc4 	addi	r3,r3,-1
81108e2c:	30c6703a 	and	r3,r6,r3
81108e30:	1906b03a 	or	r3,r3,r4
81108e34:	1884b03a 	or	r2,r3,r2
81108e38:	dfc00a17 	ldw	ra,40(sp)
81108e3c:	df000917 	ldw	fp,36(sp)
81108e40:	ddc00817 	ldw	r23,32(sp)
81108e44:	dd800717 	ldw	r22,28(sp)
81108e48:	dd400617 	ldw	r21,24(sp)
81108e4c:	dd000517 	ldw	r20,20(sp)
81108e50:	dcc00417 	ldw	r19,16(sp)
81108e54:	dc800317 	ldw	r18,12(sp)
81108e58:	dc400217 	ldw	r17,8(sp)
81108e5c:	dc000117 	ldw	r16,4(sp)
81108e60:	dec00b04 	addi	sp,sp,44
81108e64:	f800283a 	ret
81108e68:	90002b1e 	bne	r18,zero,81108f18 <__divsf3+0x244>
81108e6c:	04000104 	movi	r16,4
81108e70:	05c00044 	movi	r23,1
81108e74:	003fb106 	br	81108d3c <__reset+0xfb0e8d3c>
81108e78:	8800251e 	bne	r17,zero,81108f10 <__divsf3+0x23c>
81108e7c:	01400084 	movi	r5,2
81108e80:	00000206 	br	81108e8c <__divsf3+0x1b8>
81108e84:	88001a1e 	bne	r17,zero,81108ef0 <__divsf3+0x21c>
81108e88:	01400044 	movi	r5,1
81108e8c:	8160b03a 	or	r16,r16,r5
81108e90:	802090ba 	slli	r16,r16,2
81108e94:	00e04474 	movhi	r3,33041
81108e98:	18e3ac04 	addi	r3,r3,-29008
81108e9c:	80e1883a 	add	r16,r16,r3
81108ea0:	80c00017 	ldw	r3,0(r16)
81108ea4:	9d44f03a 	xor	r2,r19,r21
81108ea8:	a18dc83a 	sub	r6,r20,r6
81108eac:	1800683a 	jmp	r3
81108eb0:	81108e08 	cmpgei	r4,r16,16952
81108eb4:	81108e08 	cmpgei	r4,r16,16952
81108eb8:	81109054 	ori	r4,r16,16961
81108ebc:	81108df0 	cmpltui	r4,r16,16951
81108ec0:	81109054 	ori	r4,r16,16961
81108ec4:	81108f50 	cmplti	r4,r16,16957
81108ec8:	81109054 	ori	r4,r16,16961
81108ecc:	81108df0 	cmpltui	r4,r16,16951
81108ed0:	81108e08 	cmpgei	r4,r16,16952
81108ed4:	81108e08 	cmpgei	r4,r16,16952
81108ed8:	81108f50 	cmplti	r4,r16,16957
81108edc:	81108df0 	cmpltui	r4,r16,16951
81108ee0:	81109064 	muli	r4,r16,16961
81108ee4:	81109064 	muli	r4,r16,16961
81108ee8:	81109064 	muli	r4,r16,16961
81108eec:	8110907c 	xorhi	r4,r16,16961
81108ef0:	8809883a 	mov	r4,r17
81108ef4:	110a0f40 	call	8110a0f4 <__clzsi2>
81108ef8:	10fffec4 	addi	r3,r2,-5
81108efc:	10801d84 	addi	r2,r2,118
81108f00:	88e2983a 	sll	r17,r17,r3
81108f04:	008dc83a 	sub	r6,zero,r2
81108f08:	000b883a 	mov	r5,zero
81108f0c:	003f9906 	br	81108d74 <__reset+0xfb0e8d74>
81108f10:	014000c4 	movi	r5,3
81108f14:	003f9706 	br	81108d74 <__reset+0xfb0e8d74>
81108f18:	9009883a 	mov	r4,r18
81108f1c:	d9400015 	stw	r5,0(sp)
81108f20:	110a0f40 	call	8110a0f4 <__clzsi2>
81108f24:	10fffec4 	addi	r3,r2,-5
81108f28:	11801d84 	addi	r6,r2,118
81108f2c:	90e4983a 	sll	r18,r18,r3
81108f30:	01a9c83a 	sub	r20,zero,r6
81108f34:	0021883a 	mov	r16,zero
81108f38:	002f883a 	mov	r23,zero
81108f3c:	d9400017 	ldw	r5,0(sp)
81108f40:	003f7e06 	br	81108d3c <__reset+0xfb0e8d3c>
81108f44:	04000304 	movi	r16,12
81108f48:	05c000c4 	movi	r23,3
81108f4c:	003f7b06 	br	81108d3c <__reset+0xfb0e8d3c>
81108f50:	01802034 	movhi	r6,128
81108f54:	000f883a 	mov	r7,zero
81108f58:	31bfffc4 	addi	r6,r6,-1
81108f5c:	013fffc4 	movi	r4,-1
81108f60:	003fac06 	br	81108e14 <__reset+0xfb0e8e14>
81108f64:	01400044 	movi	r5,1
81108f68:	2909c83a 	sub	r4,r5,r4
81108f6c:	00c006c4 	movi	r3,27
81108f70:	19004b0e 	bge	r3,r4,811090a0 <__divsf3+0x3cc>
81108f74:	114e703a 	and	r7,r2,r5
81108f78:	0009883a 	mov	r4,zero
81108f7c:	000d883a 	mov	r6,zero
81108f80:	003fa406 	br	81108e14 <__reset+0xfb0e8e14>
81108f84:	9006917a 	slli	r3,r18,5
81108f88:	8822917a 	slli	r17,r17,5
81108f8c:	1c40372e 	bgeu	r3,r17,8110906c <__divsf3+0x398>
81108f90:	31bfffc4 	addi	r6,r6,-1
81108f94:	010006c4 	movi	r4,27
81108f98:	000b883a 	mov	r5,zero
81108f9c:	180f883a 	mov	r7,r3
81108fa0:	294b883a 	add	r5,r5,r5
81108fa4:	18c7883a 	add	r3,r3,r3
81108fa8:	38000116 	blt	r7,zero,81108fb0 <__divsf3+0x2dc>
81108fac:	1c400236 	bltu	r3,r17,81108fb8 <__divsf3+0x2e4>
81108fb0:	1c47c83a 	sub	r3,r3,r17
81108fb4:	29400054 	ori	r5,r5,1
81108fb8:	213fffc4 	addi	r4,r4,-1
81108fbc:	203ff71e 	bne	r4,zero,81108f9c <__reset+0xfb0e8f9c>
81108fc0:	1806c03a 	cmpne	r3,r3,zero
81108fc4:	1962b03a 	or	r17,r3,r5
81108fc8:	31001fc4 	addi	r4,r6,127
81108fcc:	013fe50e 	bge	zero,r4,81108f64 <__reset+0xfb0e8f64>
81108fd0:	88c001cc 	andi	r3,r17,7
81108fd4:	18000426 	beq	r3,zero,81108fe8 <__divsf3+0x314>
81108fd8:	88c003cc 	andi	r3,r17,15
81108fdc:	01400104 	movi	r5,4
81108fe0:	19400126 	beq	r3,r5,81108fe8 <__divsf3+0x314>
81108fe4:	8963883a 	add	r17,r17,r5
81108fe8:	88c2002c 	andhi	r3,r17,2048
81108fec:	18000426 	beq	r3,zero,81109000 <__divsf3+0x32c>
81108ff0:	00fe0034 	movhi	r3,63488
81108ff4:	18ffffc4 	addi	r3,r3,-1
81108ff8:	31002004 	addi	r4,r6,128
81108ffc:	88e2703a 	and	r17,r17,r3
81109000:	00c03f84 	movi	r3,254
81109004:	193f8016 	blt	r3,r4,81108e08 <__reset+0xfb0e8e08>
81109008:	880c91ba 	slli	r6,r17,6
8110900c:	11c0004c 	andi	r7,r2,1
81109010:	300cd27a 	srli	r6,r6,9
81109014:	003f7f06 	br	81108e14 <__reset+0xfb0e8e14>
81109018:	9080102c 	andhi	r2,r18,64
8110901c:	10000226 	beq	r2,zero,81109028 <__divsf3+0x354>
81109020:	8880102c 	andhi	r2,r17,64
81109024:	10001826 	beq	r2,zero,81109088 <__divsf3+0x3b4>
81109028:	00802034 	movhi	r2,128
8110902c:	91801034 	orhi	r6,r18,64
81109030:	10bfffc4 	addi	r2,r2,-1
81109034:	980f883a 	mov	r7,r19
81109038:	308c703a 	and	r6,r6,r2
8110903c:	003fc706 	br	81108f5c <__reset+0xfb0e8f5c>
81109040:	008000c4 	movi	r2,3
81109044:	b8802d26 	beq	r23,r2,811090fc <__divsf3+0x428>
81109048:	00c00044 	movi	r3,1
8110904c:	b005883a 	mov	r2,r22
81109050:	b8ffdd1e 	bne	r23,r3,81108fc8 <__reset+0xfb0e8fc8>
81109054:	11c0004c 	andi	r7,r2,1
81109058:	0009883a 	mov	r4,zero
8110905c:	000d883a 	mov	r6,zero
81109060:	003f6c06 	br	81108e14 <__reset+0xfb0e8e14>
81109064:	9023883a 	mov	r17,r18
81109068:	003f6406 	br	81108dfc <__reset+0xfb0e8dfc>
8110906c:	1c47c83a 	sub	r3,r3,r17
81109070:	01000684 	movi	r4,26
81109074:	01400044 	movi	r5,1
81109078:	003fc806 	br	81108f9c <__reset+0xfb0e8f9c>
8110907c:	9080102c 	andhi	r2,r18,64
81109080:	103fe926 	beq	r2,zero,81109028 <__reset+0xfb0e9028>
81109084:	0023883a 	mov	r17,zero
81109088:	00802034 	movhi	r2,128
8110908c:	89801034 	orhi	r6,r17,64
81109090:	10bfffc4 	addi	r2,r2,-1
81109094:	a80f883a 	mov	r7,r21
81109098:	308c703a 	and	r6,r6,r2
8110909c:	003faf06 	br	81108f5c <__reset+0xfb0e8f5c>
811090a0:	01c00804 	movi	r7,32
811090a4:	390fc83a 	sub	r7,r7,r4
811090a8:	89ce983a 	sll	r7,r17,r7
811090ac:	890ad83a 	srl	r5,r17,r4
811090b0:	380ec03a 	cmpne	r7,r7,zero
811090b4:	29cab03a 	or	r5,r5,r7
811090b8:	28c001cc 	andi	r3,r5,7
811090bc:	18000426 	beq	r3,zero,811090d0 <__divsf3+0x3fc>
811090c0:	28c003cc 	andi	r3,r5,15
811090c4:	01000104 	movi	r4,4
811090c8:	19000126 	beq	r3,r4,811090d0 <__divsf3+0x3fc>
811090cc:	290b883a 	add	r5,r5,r4
811090d0:	28c1002c 	andhi	r3,r5,1024
811090d4:	18000426 	beq	r3,zero,811090e8 <__divsf3+0x414>
811090d8:	11c0004c 	andi	r7,r2,1
811090dc:	01000044 	movi	r4,1
811090e0:	000d883a 	mov	r6,zero
811090e4:	003f4b06 	br	81108e14 <__reset+0xfb0e8e14>
811090e8:	280a91ba 	slli	r5,r5,6
811090ec:	11c0004c 	andi	r7,r2,1
811090f0:	0009883a 	mov	r4,zero
811090f4:	280cd27a 	srli	r6,r5,9
811090f8:	003f4606 	br	81108e14 <__reset+0xfb0e8e14>
811090fc:	00802034 	movhi	r2,128
81109100:	89801034 	orhi	r6,r17,64
81109104:	10bfffc4 	addi	r2,r2,-1
81109108:	b00f883a 	mov	r7,r22
8110910c:	308c703a 	and	r6,r6,r2
81109110:	003f9206 	br	81108f5c <__reset+0xfb0e8f5c>

81109114 <__mulsf3>:
81109114:	defff504 	addi	sp,sp,-44
81109118:	dc000115 	stw	r16,4(sp)
8110911c:	2020d5fa 	srli	r16,r4,23
81109120:	dd400615 	stw	r21,24(sp)
81109124:	202ad7fa 	srli	r21,r4,31
81109128:	dc800315 	stw	r18,12(sp)
8110912c:	04802034 	movhi	r18,128
81109130:	df000915 	stw	fp,36(sp)
81109134:	dd000515 	stw	r20,20(sp)
81109138:	94bfffc4 	addi	r18,r18,-1
8110913c:	dfc00a15 	stw	ra,40(sp)
81109140:	ddc00815 	stw	r23,32(sp)
81109144:	dd800715 	stw	r22,28(sp)
81109148:	dcc00415 	stw	r19,16(sp)
8110914c:	dc400215 	stw	r17,8(sp)
81109150:	84003fcc 	andi	r16,r16,255
81109154:	9124703a 	and	r18,r18,r4
81109158:	a829883a 	mov	r20,r21
8110915c:	af003fcc 	andi	fp,r21,255
81109160:	80005426 	beq	r16,zero,811092b4 <__mulsf3+0x1a0>
81109164:	00803fc4 	movi	r2,255
81109168:	80802f26 	beq	r16,r2,81109228 <__mulsf3+0x114>
8110916c:	91002034 	orhi	r4,r18,128
81109170:	202490fa 	slli	r18,r4,3
81109174:	843fe044 	addi	r16,r16,-127
81109178:	0023883a 	mov	r17,zero
8110917c:	002f883a 	mov	r23,zero
81109180:	2804d5fa 	srli	r2,r5,23
81109184:	282cd7fa 	srli	r22,r5,31
81109188:	01002034 	movhi	r4,128
8110918c:	213fffc4 	addi	r4,r4,-1
81109190:	10803fcc 	andi	r2,r2,255
81109194:	2166703a 	and	r19,r4,r5
81109198:	b1803fcc 	andi	r6,r22,255
8110919c:	10004c26 	beq	r2,zero,811092d0 <__mulsf3+0x1bc>
811091a0:	00c03fc4 	movi	r3,255
811091a4:	10c04726 	beq	r2,r3,811092c4 <__mulsf3+0x1b0>
811091a8:	99002034 	orhi	r4,r19,128
811091ac:	202690fa 	slli	r19,r4,3
811091b0:	10bfe044 	addi	r2,r2,-127
811091b4:	0007883a 	mov	r3,zero
811091b8:	80a1883a 	add	r16,r16,r2
811091bc:	010003c4 	movi	r4,15
811091c0:	1c44b03a 	or	r2,r3,r17
811091c4:	b56af03a 	xor	r21,r22,r21
811091c8:	81c00044 	addi	r7,r16,1
811091cc:	20806b36 	bltu	r4,r2,8110937c <__mulsf3+0x268>
811091d0:	100490ba 	slli	r2,r2,2
811091d4:	01204474 	movhi	r4,33041
811091d8:	21247a04 	addi	r4,r4,-28184
811091dc:	1105883a 	add	r2,r2,r4
811091e0:	10800017 	ldw	r2,0(r2)
811091e4:	1000683a 	jmp	r2
811091e8:	8110937c 	xorhi	r4,r16,16973
811091ec:	8110923c 	xorhi	r4,r16,16968
811091f0:	8110923c 	xorhi	r4,r16,16968
811091f4:	81109238 	rdprs	r4,r16,16968
811091f8:	81109360 	cmpeqi	r4,r16,16973
811091fc:	81109360 	cmpeqi	r4,r16,16973
81109200:	8110934c 	andi	r4,r16,16973
81109204:	81109238 	rdprs	r4,r16,16968
81109208:	81109360 	cmpeqi	r4,r16,16973
8110920c:	8110934c 	andi	r4,r16,16973
81109210:	81109360 	cmpeqi	r4,r16,16973
81109214:	81109238 	rdprs	r4,r16,16968
81109218:	8110936c 	andhi	r4,r16,16973
8110921c:	8110936c 	andhi	r4,r16,16973
81109220:	8110936c 	andhi	r4,r16,16973
81109224:	81109448 	cmpgei	r4,r16,16977
81109228:	90003b1e 	bne	r18,zero,81109318 <__mulsf3+0x204>
8110922c:	04400204 	movi	r17,8
81109230:	05c00084 	movi	r23,2
81109234:	003fd206 	br	81109180 <__reset+0xfb0e9180>
81109238:	302b883a 	mov	r21,r6
8110923c:	00800084 	movi	r2,2
81109240:	18802626 	beq	r3,r2,811092dc <__mulsf3+0x1c8>
81109244:	008000c4 	movi	r2,3
81109248:	1880ab26 	beq	r3,r2,811094f8 <__mulsf3+0x3e4>
8110924c:	00800044 	movi	r2,1
81109250:	1880a21e 	bne	r3,r2,811094dc <__mulsf3+0x3c8>
81109254:	a829883a 	mov	r20,r21
81109258:	0007883a 	mov	r3,zero
8110925c:	0009883a 	mov	r4,zero
81109260:	18803fcc 	andi	r2,r3,255
81109264:	100695fa 	slli	r3,r2,23
81109268:	a0803fcc 	andi	r2,r20,255
8110926c:	100a97fa 	slli	r5,r2,31
81109270:	00802034 	movhi	r2,128
81109274:	10bfffc4 	addi	r2,r2,-1
81109278:	2084703a 	and	r2,r4,r2
8110927c:	10c4b03a 	or	r2,r2,r3
81109280:	1144b03a 	or	r2,r2,r5
81109284:	dfc00a17 	ldw	ra,40(sp)
81109288:	df000917 	ldw	fp,36(sp)
8110928c:	ddc00817 	ldw	r23,32(sp)
81109290:	dd800717 	ldw	r22,28(sp)
81109294:	dd400617 	ldw	r21,24(sp)
81109298:	dd000517 	ldw	r20,20(sp)
8110929c:	dcc00417 	ldw	r19,16(sp)
811092a0:	dc800317 	ldw	r18,12(sp)
811092a4:	dc400217 	ldw	r17,8(sp)
811092a8:	dc000117 	ldw	r16,4(sp)
811092ac:	dec00b04 	addi	sp,sp,44
811092b0:	f800283a 	ret
811092b4:	90000d1e 	bne	r18,zero,811092ec <__mulsf3+0x1d8>
811092b8:	04400104 	movi	r17,4
811092bc:	05c00044 	movi	r23,1
811092c0:	003faf06 	br	81109180 <__reset+0xfb0e9180>
811092c4:	9806c03a 	cmpne	r3,r19,zero
811092c8:	18c00084 	addi	r3,r3,2
811092cc:	003fba06 	br	811091b8 <__reset+0xfb0e91b8>
811092d0:	9800141e 	bne	r19,zero,81109324 <__mulsf3+0x210>
811092d4:	00c00044 	movi	r3,1
811092d8:	003fb706 	br	811091b8 <__reset+0xfb0e91b8>
811092dc:	a829883a 	mov	r20,r21
811092e0:	00ffffc4 	movi	r3,-1
811092e4:	0009883a 	mov	r4,zero
811092e8:	003fdd06 	br	81109260 <__reset+0xfb0e9260>
811092ec:	9009883a 	mov	r4,r18
811092f0:	d9400015 	stw	r5,0(sp)
811092f4:	110a0f40 	call	8110a0f4 <__clzsi2>
811092f8:	10fffec4 	addi	r3,r2,-5
811092fc:	10801d84 	addi	r2,r2,118
81109300:	90e4983a 	sll	r18,r18,r3
81109304:	00a1c83a 	sub	r16,zero,r2
81109308:	0023883a 	mov	r17,zero
8110930c:	002f883a 	mov	r23,zero
81109310:	d9400017 	ldw	r5,0(sp)
81109314:	003f9a06 	br	81109180 <__reset+0xfb0e9180>
81109318:	04400304 	movi	r17,12
8110931c:	05c000c4 	movi	r23,3
81109320:	003f9706 	br	81109180 <__reset+0xfb0e9180>
81109324:	9809883a 	mov	r4,r19
81109328:	d9800015 	stw	r6,0(sp)
8110932c:	110a0f40 	call	8110a0f4 <__clzsi2>
81109330:	10fffec4 	addi	r3,r2,-5
81109334:	10801d84 	addi	r2,r2,118
81109338:	98e6983a 	sll	r19,r19,r3
8110933c:	0085c83a 	sub	r2,zero,r2
81109340:	0007883a 	mov	r3,zero
81109344:	d9800017 	ldw	r6,0(sp)
81109348:	003f9b06 	br	811091b8 <__reset+0xfb0e91b8>
8110934c:	01002034 	movhi	r4,128
81109350:	0029883a 	mov	r20,zero
81109354:	213fffc4 	addi	r4,r4,-1
81109358:	00ffffc4 	movi	r3,-1
8110935c:	003fc006 	br	81109260 <__reset+0xfb0e9260>
81109360:	9027883a 	mov	r19,r18
81109364:	b807883a 	mov	r3,r23
81109368:	003fb406 	br	8110923c <__reset+0xfb0e923c>
8110936c:	9027883a 	mov	r19,r18
81109370:	e02b883a 	mov	r21,fp
81109374:	b807883a 	mov	r3,r23
81109378:	003fb006 	br	8110923c <__reset+0xfb0e923c>
8110937c:	9004d43a 	srli	r2,r18,16
81109380:	9810d43a 	srli	r8,r19,16
81109384:	94bfffcc 	andi	r18,r18,65535
81109388:	993fffcc 	andi	r4,r19,65535
8110938c:	910d383a 	mul	r6,r18,r4
81109390:	20a7383a 	mul	r19,r4,r2
81109394:	9225383a 	mul	r18,r18,r8
81109398:	3006d43a 	srli	r3,r6,16
8110939c:	1211383a 	mul	r8,r2,r8
811093a0:	94e5883a 	add	r18,r18,r19
811093a4:	1c87883a 	add	r3,r3,r18
811093a8:	1cc0022e 	bgeu	r3,r19,811093b4 <__mulsf3+0x2a0>
811093ac:	00800074 	movhi	r2,1
811093b0:	4091883a 	add	r8,r8,r2
811093b4:	1804943a 	slli	r2,r3,16
811093b8:	31bfffcc 	andi	r6,r6,65535
811093bc:	1806d43a 	srli	r3,r3,16
811093c0:	1185883a 	add	r2,r2,r6
811093c4:	102691ba 	slli	r19,r2,6
811093c8:	1a07883a 	add	r3,r3,r8
811093cc:	1004d6ba 	srli	r2,r2,26
811093d0:	180891ba 	slli	r4,r3,6
811093d4:	9826c03a 	cmpne	r19,r19,zero
811093d8:	9884b03a 	or	r2,r19,r2
811093dc:	1126b03a 	or	r19,r2,r4
811093e0:	9882002c 	andhi	r2,r19,2048
811093e4:	10000426 	beq	r2,zero,811093f8 <__mulsf3+0x2e4>
811093e8:	9804d07a 	srli	r2,r19,1
811093ec:	9900004c 	andi	r4,r19,1
811093f0:	3821883a 	mov	r16,r7
811093f4:	1126b03a 	or	r19,r2,r4
811093f8:	80c01fc4 	addi	r3,r16,127
811093fc:	00c0210e 	bge	zero,r3,81109484 <__mulsf3+0x370>
81109400:	988001cc 	andi	r2,r19,7
81109404:	10000426 	beq	r2,zero,81109418 <__mulsf3+0x304>
81109408:	988003cc 	andi	r2,r19,15
8110940c:	01000104 	movi	r4,4
81109410:	11000126 	beq	r2,r4,81109418 <__mulsf3+0x304>
81109414:	9927883a 	add	r19,r19,r4
81109418:	9882002c 	andhi	r2,r19,2048
8110941c:	10000426 	beq	r2,zero,81109430 <__mulsf3+0x31c>
81109420:	00be0034 	movhi	r2,63488
81109424:	10bfffc4 	addi	r2,r2,-1
81109428:	80c02004 	addi	r3,r16,128
8110942c:	98a6703a 	and	r19,r19,r2
81109430:	00803f84 	movi	r2,254
81109434:	10ffa916 	blt	r2,r3,811092dc <__reset+0xfb0e92dc>
81109438:	980891ba 	slli	r4,r19,6
8110943c:	a829883a 	mov	r20,r21
81109440:	2008d27a 	srli	r4,r4,9
81109444:	003f8606 	br	81109260 <__reset+0xfb0e9260>
81109448:	9080102c 	andhi	r2,r18,64
8110944c:	10000826 	beq	r2,zero,81109470 <__mulsf3+0x35c>
81109450:	9880102c 	andhi	r2,r19,64
81109454:	1000061e 	bne	r2,zero,81109470 <__mulsf3+0x35c>
81109458:	00802034 	movhi	r2,128
8110945c:	99001034 	orhi	r4,r19,64
81109460:	10bfffc4 	addi	r2,r2,-1
81109464:	b029883a 	mov	r20,r22
81109468:	2088703a 	and	r4,r4,r2
8110946c:	003fba06 	br	81109358 <__reset+0xfb0e9358>
81109470:	00802034 	movhi	r2,128
81109474:	91001034 	orhi	r4,r18,64
81109478:	10bfffc4 	addi	r2,r2,-1
8110947c:	2088703a 	and	r4,r4,r2
81109480:	003fb506 	br	81109358 <__reset+0xfb0e9358>
81109484:	00800044 	movi	r2,1
81109488:	10c7c83a 	sub	r3,r2,r3
8110948c:	008006c4 	movi	r2,27
81109490:	10ff7016 	blt	r2,r3,81109254 <__reset+0xfb0e9254>
81109494:	00800804 	movi	r2,32
81109498:	10c5c83a 	sub	r2,r2,r3
8110949c:	9884983a 	sll	r2,r19,r2
811094a0:	98c6d83a 	srl	r3,r19,r3
811094a4:	1004c03a 	cmpne	r2,r2,zero
811094a8:	1884b03a 	or	r2,r3,r2
811094ac:	10c001cc 	andi	r3,r2,7
811094b0:	18000426 	beq	r3,zero,811094c4 <__mulsf3+0x3b0>
811094b4:	10c003cc 	andi	r3,r2,15
811094b8:	01000104 	movi	r4,4
811094bc:	19000126 	beq	r3,r4,811094c4 <__mulsf3+0x3b0>
811094c0:	1105883a 	add	r2,r2,r4
811094c4:	10c1002c 	andhi	r3,r2,1024
811094c8:	18000626 	beq	r3,zero,811094e4 <__mulsf3+0x3d0>
811094cc:	a829883a 	mov	r20,r21
811094d0:	00c00044 	movi	r3,1
811094d4:	0009883a 	mov	r4,zero
811094d8:	003f6106 	br	81109260 <__reset+0xfb0e9260>
811094dc:	3821883a 	mov	r16,r7
811094e0:	003fc506 	br	811093f8 <__reset+0xfb0e93f8>
811094e4:	100491ba 	slli	r2,r2,6
811094e8:	a829883a 	mov	r20,r21
811094ec:	0007883a 	mov	r3,zero
811094f0:	1008d27a 	srli	r4,r2,9
811094f4:	003f5a06 	br	81109260 <__reset+0xfb0e9260>
811094f8:	00802034 	movhi	r2,128
811094fc:	99001034 	orhi	r4,r19,64
81109500:	10bfffc4 	addi	r2,r2,-1
81109504:	a829883a 	mov	r20,r21
81109508:	2088703a 	and	r4,r4,r2
8110950c:	003f9206 	br	81109358 <__reset+0xfb0e9358>

81109510 <__floatsisf>:
81109510:	defffd04 	addi	sp,sp,-12
81109514:	dfc00215 	stw	ra,8(sp)
81109518:	dc400115 	stw	r17,4(sp)
8110951c:	dc000015 	stw	r16,0(sp)
81109520:	20003526 	beq	r4,zero,811095f8 <__floatsisf+0xe8>
81109524:	2021883a 	mov	r16,r4
81109528:	2022d7fa 	srli	r17,r4,31
8110952c:	20003616 	blt	r4,zero,81109608 <__floatsisf+0xf8>
81109530:	8009883a 	mov	r4,r16
81109534:	110a0f40 	call	8110a0f4 <__clzsi2>
81109538:	00c02784 	movi	r3,158
8110953c:	1887c83a 	sub	r3,r3,r2
81109540:	01002584 	movi	r4,150
81109544:	20c01416 	blt	r4,r3,81109598 <__floatsisf+0x88>
81109548:	20c9c83a 	sub	r4,r4,r3
8110954c:	8120983a 	sll	r16,r16,r4
81109550:	00802034 	movhi	r2,128
81109554:	10bfffc4 	addi	r2,r2,-1
81109558:	8809883a 	mov	r4,r17
8110955c:	80a0703a 	and	r16,r16,r2
81109560:	18803fcc 	andi	r2,r3,255
81109564:	100695fa 	slli	r3,r2,23
81109568:	20803fcc 	andi	r2,r4,255
8110956c:	100897fa 	slli	r4,r2,31
81109570:	00802034 	movhi	r2,128
81109574:	10bfffc4 	addi	r2,r2,-1
81109578:	8084703a 	and	r2,r16,r2
8110957c:	10c4b03a 	or	r2,r2,r3
81109580:	1104b03a 	or	r2,r2,r4
81109584:	dfc00217 	ldw	ra,8(sp)
81109588:	dc400117 	ldw	r17,4(sp)
8110958c:	dc000017 	ldw	r16,0(sp)
81109590:	dec00304 	addi	sp,sp,12
81109594:	f800283a 	ret
81109598:	01002644 	movi	r4,153
8110959c:	20c01c16 	blt	r4,r3,81109610 <__floatsisf+0x100>
811095a0:	20c9c83a 	sub	r4,r4,r3
811095a4:	8120983a 	sll	r16,r16,r4
811095a8:	013f0034 	movhi	r4,64512
811095ac:	213fffc4 	addi	r4,r4,-1
811095b0:	814001cc 	andi	r5,r16,7
811095b4:	8108703a 	and	r4,r16,r4
811095b8:	28000426 	beq	r5,zero,811095cc <__floatsisf+0xbc>
811095bc:	840003cc 	andi	r16,r16,15
811095c0:	01400104 	movi	r5,4
811095c4:	81400126 	beq	r16,r5,811095cc <__floatsisf+0xbc>
811095c8:	2149883a 	add	r4,r4,r5
811095cc:	2141002c 	andhi	r5,r4,1024
811095d0:	28000526 	beq	r5,zero,811095e8 <__floatsisf+0xd8>
811095d4:	00c027c4 	movi	r3,159
811095d8:	1887c83a 	sub	r3,r3,r2
811095dc:	00bf0034 	movhi	r2,64512
811095e0:	10bfffc4 	addi	r2,r2,-1
811095e4:	2088703a 	and	r4,r4,r2
811095e8:	202091ba 	slli	r16,r4,6
811095ec:	8809883a 	mov	r4,r17
811095f0:	8020d27a 	srli	r16,r16,9
811095f4:	003fda06 	br	81109560 <__reset+0xfb0e9560>
811095f8:	0009883a 	mov	r4,zero
811095fc:	0007883a 	mov	r3,zero
81109600:	0021883a 	mov	r16,zero
81109604:	003fd606 	br	81109560 <__reset+0xfb0e9560>
81109608:	0121c83a 	sub	r16,zero,r4
8110960c:	003fc806 	br	81109530 <__reset+0xfb0e9530>
81109610:	01002e44 	movi	r4,185
81109614:	20c9c83a 	sub	r4,r4,r3
81109618:	01400144 	movi	r5,5
8110961c:	8108983a 	sll	r4,r16,r4
81109620:	288bc83a 	sub	r5,r5,r2
81109624:	8160d83a 	srl	r16,r16,r5
81109628:	2008c03a 	cmpne	r4,r4,zero
8110962c:	8120b03a 	or	r16,r16,r4
81109630:	003fdd06 	br	811095a8 <__reset+0xfb0e95a8>

81109634 <__floatunsisf>:
81109634:	defffe04 	addi	sp,sp,-8
81109638:	dfc00115 	stw	ra,4(sp)
8110963c:	dc000015 	stw	r16,0(sp)
81109640:	20002c26 	beq	r4,zero,811096f4 <__floatunsisf+0xc0>
81109644:	2021883a 	mov	r16,r4
81109648:	110a0f40 	call	8110a0f4 <__clzsi2>
8110964c:	00c02784 	movi	r3,158
81109650:	1887c83a 	sub	r3,r3,r2
81109654:	01002584 	movi	r4,150
81109658:	20c00f16 	blt	r4,r3,81109698 <__floatunsisf+0x64>
8110965c:	20c9c83a 	sub	r4,r4,r3
81109660:	8108983a 	sll	r4,r16,r4
81109664:	00802034 	movhi	r2,128
81109668:	10bfffc4 	addi	r2,r2,-1
8110966c:	2088703a 	and	r4,r4,r2
81109670:	18803fcc 	andi	r2,r3,255
81109674:	100695fa 	slli	r3,r2,23
81109678:	00802034 	movhi	r2,128
8110967c:	10bfffc4 	addi	r2,r2,-1
81109680:	2084703a 	and	r2,r4,r2
81109684:	10c4b03a 	or	r2,r2,r3
81109688:	dfc00117 	ldw	ra,4(sp)
8110968c:	dc000017 	ldw	r16,0(sp)
81109690:	dec00204 	addi	sp,sp,8
81109694:	f800283a 	ret
81109698:	01002644 	movi	r4,153
8110969c:	20c01816 	blt	r4,r3,81109700 <__floatunsisf+0xcc>
811096a0:	20c9c83a 	sub	r4,r4,r3
811096a4:	8108983a 	sll	r4,r16,r4
811096a8:	017f0034 	movhi	r5,64512
811096ac:	297fffc4 	addi	r5,r5,-1
811096b0:	218001cc 	andi	r6,r4,7
811096b4:	214a703a 	and	r5,r4,r5
811096b8:	30000426 	beq	r6,zero,811096cc <__floatunsisf+0x98>
811096bc:	210003cc 	andi	r4,r4,15
811096c0:	01800104 	movi	r6,4
811096c4:	21800126 	beq	r4,r6,811096cc <__floatunsisf+0x98>
811096c8:	298b883a 	add	r5,r5,r6
811096cc:	2901002c 	andhi	r4,r5,1024
811096d0:	20000526 	beq	r4,zero,811096e8 <__floatunsisf+0xb4>
811096d4:	00c027c4 	movi	r3,159
811096d8:	1887c83a 	sub	r3,r3,r2
811096dc:	00bf0034 	movhi	r2,64512
811096e0:	10bfffc4 	addi	r2,r2,-1
811096e4:	288a703a 	and	r5,r5,r2
811096e8:	280891ba 	slli	r4,r5,6
811096ec:	2008d27a 	srli	r4,r4,9
811096f0:	003fdf06 	br	81109670 <__reset+0xfb0e9670>
811096f4:	0007883a 	mov	r3,zero
811096f8:	0009883a 	mov	r4,zero
811096fc:	003fdc06 	br	81109670 <__reset+0xfb0e9670>
81109700:	01402e44 	movi	r5,185
81109704:	28cbc83a 	sub	r5,r5,r3
81109708:	01000144 	movi	r4,5
8110970c:	2089c83a 	sub	r4,r4,r2
81109710:	814a983a 	sll	r5,r16,r5
81109714:	8108d83a 	srl	r4,r16,r4
81109718:	2820c03a 	cmpne	r16,r5,zero
8110971c:	2408b03a 	or	r4,r4,r16
81109720:	003fe106 	br	811096a8 <__reset+0xfb0e96a8>

81109724 <__muldf3>:
81109724:	defff304 	addi	sp,sp,-52
81109728:	2804d53a 	srli	r2,r5,20
8110972c:	dd800915 	stw	r22,36(sp)
81109730:	282cd7fa 	srli	r22,r5,31
81109734:	dc000315 	stw	r16,12(sp)
81109738:	04000434 	movhi	r16,16
8110973c:	dd400815 	stw	r21,32(sp)
81109740:	dc800515 	stw	r18,20(sp)
81109744:	843fffc4 	addi	r16,r16,-1
81109748:	dfc00c15 	stw	ra,48(sp)
8110974c:	df000b15 	stw	fp,44(sp)
81109750:	ddc00a15 	stw	r23,40(sp)
81109754:	dd000715 	stw	r20,28(sp)
81109758:	dcc00615 	stw	r19,24(sp)
8110975c:	dc400415 	stw	r17,16(sp)
81109760:	1481ffcc 	andi	r18,r2,2047
81109764:	2c20703a 	and	r16,r5,r16
81109768:	b02b883a 	mov	r21,r22
8110976c:	b2403fcc 	andi	r9,r22,255
81109770:	90006026 	beq	r18,zero,811098f4 <__muldf3+0x1d0>
81109774:	0081ffc4 	movi	r2,2047
81109778:	2029883a 	mov	r20,r4
8110977c:	90803626 	beq	r18,r2,81109858 <__muldf3+0x134>
81109780:	80800434 	orhi	r2,r16,16
81109784:	100490fa 	slli	r2,r2,3
81109788:	2020d77a 	srli	r16,r4,29
8110978c:	202890fa 	slli	r20,r4,3
81109790:	94bf0044 	addi	r18,r18,-1023
81109794:	80a0b03a 	or	r16,r16,r2
81109798:	0027883a 	mov	r19,zero
8110979c:	0039883a 	mov	fp,zero
811097a0:	3804d53a 	srli	r2,r7,20
811097a4:	382ed7fa 	srli	r23,r7,31
811097a8:	04400434 	movhi	r17,16
811097ac:	8c7fffc4 	addi	r17,r17,-1
811097b0:	1081ffcc 	andi	r2,r2,2047
811097b4:	3011883a 	mov	r8,r6
811097b8:	3c62703a 	and	r17,r7,r17
811097bc:	ba803fcc 	andi	r10,r23,255
811097c0:	10006d26 	beq	r2,zero,81109978 <__muldf3+0x254>
811097c4:	00c1ffc4 	movi	r3,2047
811097c8:	10c06526 	beq	r2,r3,81109960 <__muldf3+0x23c>
811097cc:	88c00434 	orhi	r3,r17,16
811097d0:	180690fa 	slli	r3,r3,3
811097d4:	3022d77a 	srli	r17,r6,29
811097d8:	301090fa 	slli	r8,r6,3
811097dc:	10bf0044 	addi	r2,r2,-1023
811097e0:	88e2b03a 	or	r17,r17,r3
811097e4:	000b883a 	mov	r5,zero
811097e8:	9085883a 	add	r2,r18,r2
811097ec:	2cc8b03a 	or	r4,r5,r19
811097f0:	00c003c4 	movi	r3,15
811097f4:	bdacf03a 	xor	r22,r23,r22
811097f8:	12c00044 	addi	r11,r2,1
811097fc:	19009936 	bltu	r3,r4,81109a64 <__muldf3+0x340>
81109800:	200890ba 	slli	r4,r4,2
81109804:	00e04474 	movhi	r3,33041
81109808:	18e60604 	addi	r3,r3,-26600
8110980c:	20c9883a 	add	r4,r4,r3
81109810:	20c00017 	ldw	r3,0(r4)
81109814:	1800683a 	jmp	r3
81109818:	81109a64 	muli	r4,r16,17001
8110981c:	81109878 	rdprs	r4,r16,16993
81109820:	81109878 	rdprs	r4,r16,16993
81109824:	81109874 	orhi	r4,r16,16993
81109828:	81109a40 	call	881109a4 <__reset+0x20f09a4>
8110982c:	81109a40 	call	881109a4 <__reset+0x20f09a4>
81109830:	81109a28 	cmpgeui	r4,r16,17000
81109834:	81109874 	orhi	r4,r16,16993
81109838:	81109a40 	call	881109a4 <__reset+0x20f09a4>
8110983c:	81109a28 	cmpgeui	r4,r16,17000
81109840:	81109a40 	call	881109a4 <__reset+0x20f09a4>
81109844:	81109874 	orhi	r4,r16,16993
81109848:	81109a50 	cmplti	r4,r16,17001
8110984c:	81109a50 	cmplti	r4,r16,17001
81109850:	81109a50 	cmplti	r4,r16,17001
81109854:	81109c6c 	andhi	r4,r16,17009
81109858:	2404b03a 	or	r2,r4,r16
8110985c:	10006f1e 	bne	r2,zero,81109a1c <__muldf3+0x2f8>
81109860:	04c00204 	movi	r19,8
81109864:	0021883a 	mov	r16,zero
81109868:	0029883a 	mov	r20,zero
8110986c:	07000084 	movi	fp,2
81109870:	003fcb06 	br	811097a0 <__reset+0xfb0e97a0>
81109874:	502d883a 	mov	r22,r10
81109878:	00800084 	movi	r2,2
8110987c:	28805726 	beq	r5,r2,811099dc <__muldf3+0x2b8>
81109880:	008000c4 	movi	r2,3
81109884:	28816626 	beq	r5,r2,81109e20 <__muldf3+0x6fc>
81109888:	00800044 	movi	r2,1
8110988c:	2881411e 	bne	r5,r2,81109d94 <__muldf3+0x670>
81109890:	b02b883a 	mov	r21,r22
81109894:	0005883a 	mov	r2,zero
81109898:	000b883a 	mov	r5,zero
8110989c:	0029883a 	mov	r20,zero
811098a0:	1004953a 	slli	r2,r2,20
811098a4:	a8c03fcc 	andi	r3,r21,255
811098a8:	04400434 	movhi	r17,16
811098ac:	8c7fffc4 	addi	r17,r17,-1
811098b0:	180697fa 	slli	r3,r3,31
811098b4:	2c4a703a 	and	r5,r5,r17
811098b8:	288ab03a 	or	r5,r5,r2
811098bc:	28c6b03a 	or	r3,r5,r3
811098c0:	a005883a 	mov	r2,r20
811098c4:	dfc00c17 	ldw	ra,48(sp)
811098c8:	df000b17 	ldw	fp,44(sp)
811098cc:	ddc00a17 	ldw	r23,40(sp)
811098d0:	dd800917 	ldw	r22,36(sp)
811098d4:	dd400817 	ldw	r21,32(sp)
811098d8:	dd000717 	ldw	r20,28(sp)
811098dc:	dcc00617 	ldw	r19,24(sp)
811098e0:	dc800517 	ldw	r18,20(sp)
811098e4:	dc400417 	ldw	r17,16(sp)
811098e8:	dc000317 	ldw	r16,12(sp)
811098ec:	dec00d04 	addi	sp,sp,52
811098f0:	f800283a 	ret
811098f4:	2404b03a 	or	r2,r4,r16
811098f8:	2027883a 	mov	r19,r4
811098fc:	10004226 	beq	r2,zero,81109a08 <__muldf3+0x2e4>
81109900:	8000fc26 	beq	r16,zero,81109cf4 <__muldf3+0x5d0>
81109904:	8009883a 	mov	r4,r16
81109908:	d9800215 	stw	r6,8(sp)
8110990c:	d9c00015 	stw	r7,0(sp)
81109910:	da400115 	stw	r9,4(sp)
81109914:	110a0f40 	call	8110a0f4 <__clzsi2>
81109918:	d9800217 	ldw	r6,8(sp)
8110991c:	d9c00017 	ldw	r7,0(sp)
81109920:	da400117 	ldw	r9,4(sp)
81109924:	113ffd44 	addi	r4,r2,-11
81109928:	00c00704 	movi	r3,28
8110992c:	1900ed16 	blt	r3,r4,81109ce4 <__muldf3+0x5c0>
81109930:	00c00744 	movi	r3,29
81109934:	147ffe04 	addi	r17,r2,-8
81109938:	1907c83a 	sub	r3,r3,r4
8110993c:	8460983a 	sll	r16,r16,r17
81109940:	98c6d83a 	srl	r3,r19,r3
81109944:	9c68983a 	sll	r20,r19,r17
81109948:	1c20b03a 	or	r16,r3,r16
8110994c:	1080fcc4 	addi	r2,r2,1011
81109950:	00a5c83a 	sub	r18,zero,r2
81109954:	0027883a 	mov	r19,zero
81109958:	0039883a 	mov	fp,zero
8110995c:	003f9006 	br	811097a0 <__reset+0xfb0e97a0>
81109960:	3446b03a 	or	r3,r6,r17
81109964:	1800261e 	bne	r3,zero,81109a00 <__muldf3+0x2dc>
81109968:	0023883a 	mov	r17,zero
8110996c:	0011883a 	mov	r8,zero
81109970:	01400084 	movi	r5,2
81109974:	003f9c06 	br	811097e8 <__reset+0xfb0e97e8>
81109978:	3446b03a 	or	r3,r6,r17
8110997c:	18001c26 	beq	r3,zero,811099f0 <__muldf3+0x2cc>
81109980:	8800ce26 	beq	r17,zero,81109cbc <__muldf3+0x598>
81109984:	8809883a 	mov	r4,r17
81109988:	d9800215 	stw	r6,8(sp)
8110998c:	da400115 	stw	r9,4(sp)
81109990:	da800015 	stw	r10,0(sp)
81109994:	110a0f40 	call	8110a0f4 <__clzsi2>
81109998:	d9800217 	ldw	r6,8(sp)
8110999c:	da400117 	ldw	r9,4(sp)
811099a0:	da800017 	ldw	r10,0(sp)
811099a4:	113ffd44 	addi	r4,r2,-11
811099a8:	00c00704 	movi	r3,28
811099ac:	1900bf16 	blt	r3,r4,81109cac <__muldf3+0x588>
811099b0:	00c00744 	movi	r3,29
811099b4:	123ffe04 	addi	r8,r2,-8
811099b8:	1907c83a 	sub	r3,r3,r4
811099bc:	8a22983a 	sll	r17,r17,r8
811099c0:	30c6d83a 	srl	r3,r6,r3
811099c4:	3210983a 	sll	r8,r6,r8
811099c8:	1c62b03a 	or	r17,r3,r17
811099cc:	1080fcc4 	addi	r2,r2,1011
811099d0:	0085c83a 	sub	r2,zero,r2
811099d4:	000b883a 	mov	r5,zero
811099d8:	003f8306 	br	811097e8 <__reset+0xfb0e97e8>
811099dc:	b02b883a 	mov	r21,r22
811099e0:	0081ffc4 	movi	r2,2047
811099e4:	000b883a 	mov	r5,zero
811099e8:	0029883a 	mov	r20,zero
811099ec:	003fac06 	br	811098a0 <__reset+0xfb0e98a0>
811099f0:	0023883a 	mov	r17,zero
811099f4:	0011883a 	mov	r8,zero
811099f8:	01400044 	movi	r5,1
811099fc:	003f7a06 	br	811097e8 <__reset+0xfb0e97e8>
81109a00:	014000c4 	movi	r5,3
81109a04:	003f7806 	br	811097e8 <__reset+0xfb0e97e8>
81109a08:	04c00104 	movi	r19,4
81109a0c:	0021883a 	mov	r16,zero
81109a10:	0029883a 	mov	r20,zero
81109a14:	07000044 	movi	fp,1
81109a18:	003f6106 	br	811097a0 <__reset+0xfb0e97a0>
81109a1c:	04c00304 	movi	r19,12
81109a20:	070000c4 	movi	fp,3
81109a24:	003f5e06 	br	811097a0 <__reset+0xfb0e97a0>
81109a28:	01400434 	movhi	r5,16
81109a2c:	002b883a 	mov	r21,zero
81109a30:	297fffc4 	addi	r5,r5,-1
81109a34:	053fffc4 	movi	r20,-1
81109a38:	0081ffc4 	movi	r2,2047
81109a3c:	003f9806 	br	811098a0 <__reset+0xfb0e98a0>
81109a40:	8023883a 	mov	r17,r16
81109a44:	a011883a 	mov	r8,r20
81109a48:	e00b883a 	mov	r5,fp
81109a4c:	003f8a06 	br	81109878 <__reset+0xfb0e9878>
81109a50:	8023883a 	mov	r17,r16
81109a54:	a011883a 	mov	r8,r20
81109a58:	482d883a 	mov	r22,r9
81109a5c:	e00b883a 	mov	r5,fp
81109a60:	003f8506 	br	81109878 <__reset+0xfb0e9878>
81109a64:	a00ad43a 	srli	r5,r20,16
81109a68:	401ad43a 	srli	r13,r8,16
81109a6c:	a53fffcc 	andi	r20,r20,65535
81109a70:	423fffcc 	andi	r8,r8,65535
81109a74:	4519383a 	mul	r12,r8,r20
81109a78:	4147383a 	mul	r3,r8,r5
81109a7c:	6d09383a 	mul	r4,r13,r20
81109a80:	600cd43a 	srli	r6,r12,16
81109a84:	2b5d383a 	mul	r14,r5,r13
81109a88:	20c9883a 	add	r4,r4,r3
81109a8c:	310d883a 	add	r6,r6,r4
81109a90:	30c0022e 	bgeu	r6,r3,81109a9c <__muldf3+0x378>
81109a94:	00c00074 	movhi	r3,1
81109a98:	70dd883a 	add	r14,r14,r3
81109a9c:	8826d43a 	srli	r19,r17,16
81109aa0:	8bffffcc 	andi	r15,r17,65535
81109aa4:	7d23383a 	mul	r17,r15,r20
81109aa8:	7949383a 	mul	r4,r15,r5
81109aac:	9d29383a 	mul	r20,r19,r20
81109ab0:	8814d43a 	srli	r10,r17,16
81109ab4:	3012943a 	slli	r9,r6,16
81109ab8:	a129883a 	add	r20,r20,r4
81109abc:	633fffcc 	andi	r12,r12,65535
81109ac0:	5515883a 	add	r10,r10,r20
81109ac4:	3006d43a 	srli	r3,r6,16
81109ac8:	4b13883a 	add	r9,r9,r12
81109acc:	2ccb383a 	mul	r5,r5,r19
81109ad0:	5100022e 	bgeu	r10,r4,81109adc <__muldf3+0x3b8>
81109ad4:	01000074 	movhi	r4,1
81109ad8:	290b883a 	add	r5,r5,r4
81109adc:	802ad43a 	srli	r21,r16,16
81109ae0:	843fffcc 	andi	r16,r16,65535
81109ae4:	440d383a 	mul	r6,r8,r16
81109ae8:	4565383a 	mul	r18,r8,r21
81109aec:	8349383a 	mul	r4,r16,r13
81109af0:	500e943a 	slli	r7,r10,16
81109af4:	3010d43a 	srli	r8,r6,16
81109af8:	5028d43a 	srli	r20,r10,16
81109afc:	2489883a 	add	r4,r4,r18
81109b00:	8abfffcc 	andi	r10,r17,65535
81109b04:	3a95883a 	add	r10,r7,r10
81109b08:	4119883a 	add	r12,r8,r4
81109b0c:	a169883a 	add	r20,r20,r5
81109b10:	1a87883a 	add	r3,r3,r10
81109b14:	6d5b383a 	mul	r13,r13,r21
81109b18:	6480022e 	bgeu	r12,r18,81109b24 <__muldf3+0x400>
81109b1c:	01000074 	movhi	r4,1
81109b20:	691b883a 	add	r13,r13,r4
81109b24:	7c25383a 	mul	r18,r15,r16
81109b28:	7d4b383a 	mul	r5,r15,r21
81109b2c:	84cf383a 	mul	r7,r16,r19
81109b30:	901ed43a 	srli	r15,r18,16
81109b34:	6008d43a 	srli	r4,r12,16
81109b38:	6010943a 	slli	r8,r12,16
81109b3c:	394f883a 	add	r7,r7,r5
81109b40:	333fffcc 	andi	r12,r6,65535
81109b44:	79df883a 	add	r15,r15,r7
81109b48:	235b883a 	add	r13,r4,r13
81109b4c:	9d63383a 	mul	r17,r19,r21
81109b50:	4309883a 	add	r4,r8,r12
81109b54:	7940022e 	bgeu	r15,r5,81109b60 <__muldf3+0x43c>
81109b58:	01400074 	movhi	r5,1
81109b5c:	8963883a 	add	r17,r17,r5
81109b60:	780a943a 	slli	r5,r15,16
81109b64:	91bfffcc 	andi	r6,r18,65535
81109b68:	70c7883a 	add	r3,r14,r3
81109b6c:	298d883a 	add	r6,r5,r6
81109b70:	1a8f803a 	cmpltu	r7,r3,r10
81109b74:	350b883a 	add	r5,r6,r20
81109b78:	20c7883a 	add	r3,r4,r3
81109b7c:	3955883a 	add	r10,r7,r5
81109b80:	1909803a 	cmpltu	r4,r3,r4
81109b84:	6a91883a 	add	r8,r13,r10
81109b88:	780cd43a 	srli	r6,r15,16
81109b8c:	2219883a 	add	r12,r4,r8
81109b90:	2d0b803a 	cmpltu	r5,r5,r20
81109b94:	51cf803a 	cmpltu	r7,r10,r7
81109b98:	29ceb03a 	or	r7,r5,r7
81109b9c:	4351803a 	cmpltu	r8,r8,r13
81109ba0:	610b803a 	cmpltu	r5,r12,r4
81109ba4:	4148b03a 	or	r4,r8,r5
81109ba8:	398f883a 	add	r7,r7,r6
81109bac:	3909883a 	add	r4,r7,r4
81109bb0:	1810927a 	slli	r8,r3,9
81109bb4:	2449883a 	add	r4,r4,r17
81109bb8:	2008927a 	slli	r4,r4,9
81109bbc:	6022d5fa 	srli	r17,r12,23
81109bc0:	1806d5fa 	srli	r3,r3,23
81109bc4:	4252b03a 	or	r9,r8,r9
81109bc8:	600a927a 	slli	r5,r12,9
81109bcc:	4810c03a 	cmpne	r8,r9,zero
81109bd0:	2462b03a 	or	r17,r4,r17
81109bd4:	40c6b03a 	or	r3,r8,r3
81109bd8:	8900402c 	andhi	r4,r17,256
81109bdc:	1950b03a 	or	r8,r3,r5
81109be0:	20000726 	beq	r4,zero,81109c00 <__muldf3+0x4dc>
81109be4:	4006d07a 	srli	r3,r8,1
81109be8:	880497fa 	slli	r2,r17,31
81109bec:	4200004c 	andi	r8,r8,1
81109bf0:	8822d07a 	srli	r17,r17,1
81109bf4:	1a10b03a 	or	r8,r3,r8
81109bf8:	1210b03a 	or	r8,r2,r8
81109bfc:	5805883a 	mov	r2,r11
81109c00:	1140ffc4 	addi	r5,r2,1023
81109c04:	0140440e 	bge	zero,r5,81109d18 <__muldf3+0x5f4>
81109c08:	40c001cc 	andi	r3,r8,7
81109c0c:	18000726 	beq	r3,zero,81109c2c <__muldf3+0x508>
81109c10:	40c003cc 	andi	r3,r8,15
81109c14:	01000104 	movi	r4,4
81109c18:	19000426 	beq	r3,r4,81109c2c <__muldf3+0x508>
81109c1c:	4107883a 	add	r3,r8,r4
81109c20:	1a11803a 	cmpltu	r8,r3,r8
81109c24:	8a23883a 	add	r17,r17,r8
81109c28:	1811883a 	mov	r8,r3
81109c2c:	88c0402c 	andhi	r3,r17,256
81109c30:	18000426 	beq	r3,zero,81109c44 <__muldf3+0x520>
81109c34:	11410004 	addi	r5,r2,1024
81109c38:	00bfc034 	movhi	r2,65280
81109c3c:	10bfffc4 	addi	r2,r2,-1
81109c40:	88a2703a 	and	r17,r17,r2
81109c44:	0081ff84 	movi	r2,2046
81109c48:	117f6416 	blt	r2,r5,811099dc <__reset+0xfb0e99dc>
81109c4c:	8828977a 	slli	r20,r17,29
81109c50:	4010d0fa 	srli	r8,r8,3
81109c54:	8822927a 	slli	r17,r17,9
81109c58:	2881ffcc 	andi	r2,r5,2047
81109c5c:	a228b03a 	or	r20,r20,r8
81109c60:	880ad33a 	srli	r5,r17,12
81109c64:	b02b883a 	mov	r21,r22
81109c68:	003f0d06 	br	811098a0 <__reset+0xfb0e98a0>
81109c6c:	8080022c 	andhi	r2,r16,8
81109c70:	10000926 	beq	r2,zero,81109c98 <__muldf3+0x574>
81109c74:	8880022c 	andhi	r2,r17,8
81109c78:	1000071e 	bne	r2,zero,81109c98 <__muldf3+0x574>
81109c7c:	00800434 	movhi	r2,16
81109c80:	89400234 	orhi	r5,r17,8
81109c84:	10bfffc4 	addi	r2,r2,-1
81109c88:	b82b883a 	mov	r21,r23
81109c8c:	288a703a 	and	r5,r5,r2
81109c90:	4029883a 	mov	r20,r8
81109c94:	003f6806 	br	81109a38 <__reset+0xfb0e9a38>
81109c98:	00800434 	movhi	r2,16
81109c9c:	81400234 	orhi	r5,r16,8
81109ca0:	10bfffc4 	addi	r2,r2,-1
81109ca4:	288a703a 	and	r5,r5,r2
81109ca8:	003f6306 	br	81109a38 <__reset+0xfb0e9a38>
81109cac:	147ff604 	addi	r17,r2,-40
81109cb0:	3462983a 	sll	r17,r6,r17
81109cb4:	0011883a 	mov	r8,zero
81109cb8:	003f4406 	br	811099cc <__reset+0xfb0e99cc>
81109cbc:	3009883a 	mov	r4,r6
81109cc0:	d9800215 	stw	r6,8(sp)
81109cc4:	da400115 	stw	r9,4(sp)
81109cc8:	da800015 	stw	r10,0(sp)
81109ccc:	110a0f40 	call	8110a0f4 <__clzsi2>
81109cd0:	10800804 	addi	r2,r2,32
81109cd4:	da800017 	ldw	r10,0(sp)
81109cd8:	da400117 	ldw	r9,4(sp)
81109cdc:	d9800217 	ldw	r6,8(sp)
81109ce0:	003f3006 	br	811099a4 <__reset+0xfb0e99a4>
81109ce4:	143ff604 	addi	r16,r2,-40
81109ce8:	9c20983a 	sll	r16,r19,r16
81109cec:	0029883a 	mov	r20,zero
81109cf0:	003f1606 	br	8110994c <__reset+0xfb0e994c>
81109cf4:	d9800215 	stw	r6,8(sp)
81109cf8:	d9c00015 	stw	r7,0(sp)
81109cfc:	da400115 	stw	r9,4(sp)
81109d00:	110a0f40 	call	8110a0f4 <__clzsi2>
81109d04:	10800804 	addi	r2,r2,32
81109d08:	da400117 	ldw	r9,4(sp)
81109d0c:	d9c00017 	ldw	r7,0(sp)
81109d10:	d9800217 	ldw	r6,8(sp)
81109d14:	003f0306 	br	81109924 <__reset+0xfb0e9924>
81109d18:	00c00044 	movi	r3,1
81109d1c:	1947c83a 	sub	r3,r3,r5
81109d20:	00800e04 	movi	r2,56
81109d24:	10feda16 	blt	r2,r3,81109890 <__reset+0xfb0e9890>
81109d28:	008007c4 	movi	r2,31
81109d2c:	10c01b16 	blt	r2,r3,81109d9c <__muldf3+0x678>
81109d30:	00800804 	movi	r2,32
81109d34:	10c5c83a 	sub	r2,r2,r3
81109d38:	888a983a 	sll	r5,r17,r2
81109d3c:	40c8d83a 	srl	r4,r8,r3
81109d40:	4084983a 	sll	r2,r8,r2
81109d44:	88e2d83a 	srl	r17,r17,r3
81109d48:	2906b03a 	or	r3,r5,r4
81109d4c:	1004c03a 	cmpne	r2,r2,zero
81109d50:	1886b03a 	or	r3,r3,r2
81109d54:	188001cc 	andi	r2,r3,7
81109d58:	10000726 	beq	r2,zero,81109d78 <__muldf3+0x654>
81109d5c:	188003cc 	andi	r2,r3,15
81109d60:	01000104 	movi	r4,4
81109d64:	11000426 	beq	r2,r4,81109d78 <__muldf3+0x654>
81109d68:	1805883a 	mov	r2,r3
81109d6c:	10c00104 	addi	r3,r2,4
81109d70:	1885803a 	cmpltu	r2,r3,r2
81109d74:	88a3883a 	add	r17,r17,r2
81109d78:	8880202c 	andhi	r2,r17,128
81109d7c:	10001c26 	beq	r2,zero,81109df0 <__muldf3+0x6cc>
81109d80:	b02b883a 	mov	r21,r22
81109d84:	00800044 	movi	r2,1
81109d88:	000b883a 	mov	r5,zero
81109d8c:	0029883a 	mov	r20,zero
81109d90:	003ec306 	br	811098a0 <__reset+0xfb0e98a0>
81109d94:	5805883a 	mov	r2,r11
81109d98:	003f9906 	br	81109c00 <__reset+0xfb0e9c00>
81109d9c:	00bff844 	movi	r2,-31
81109da0:	1145c83a 	sub	r2,r2,r5
81109da4:	8888d83a 	srl	r4,r17,r2
81109da8:	00800804 	movi	r2,32
81109dac:	18801a26 	beq	r3,r2,81109e18 <__muldf3+0x6f4>
81109db0:	00801004 	movi	r2,64
81109db4:	10c5c83a 	sub	r2,r2,r3
81109db8:	8884983a 	sll	r2,r17,r2
81109dbc:	1204b03a 	or	r2,r2,r8
81109dc0:	1004c03a 	cmpne	r2,r2,zero
81109dc4:	2084b03a 	or	r2,r4,r2
81109dc8:	144001cc 	andi	r17,r2,7
81109dcc:	88000d1e 	bne	r17,zero,81109e04 <__muldf3+0x6e0>
81109dd0:	000b883a 	mov	r5,zero
81109dd4:	1028d0fa 	srli	r20,r2,3
81109dd8:	b02b883a 	mov	r21,r22
81109ddc:	0005883a 	mov	r2,zero
81109de0:	a468b03a 	or	r20,r20,r17
81109de4:	003eae06 	br	811098a0 <__reset+0xfb0e98a0>
81109de8:	1007883a 	mov	r3,r2
81109dec:	0023883a 	mov	r17,zero
81109df0:	880a927a 	slli	r5,r17,9
81109df4:	1805883a 	mov	r2,r3
81109df8:	8822977a 	slli	r17,r17,29
81109dfc:	280ad33a 	srli	r5,r5,12
81109e00:	003ff406 	br	81109dd4 <__reset+0xfb0e9dd4>
81109e04:	10c003cc 	andi	r3,r2,15
81109e08:	01000104 	movi	r4,4
81109e0c:	193ff626 	beq	r3,r4,81109de8 <__reset+0xfb0e9de8>
81109e10:	0023883a 	mov	r17,zero
81109e14:	003fd506 	br	81109d6c <__reset+0xfb0e9d6c>
81109e18:	0005883a 	mov	r2,zero
81109e1c:	003fe706 	br	81109dbc <__reset+0xfb0e9dbc>
81109e20:	00800434 	movhi	r2,16
81109e24:	89400234 	orhi	r5,r17,8
81109e28:	10bfffc4 	addi	r2,r2,-1
81109e2c:	b02b883a 	mov	r21,r22
81109e30:	288a703a 	and	r5,r5,r2
81109e34:	4029883a 	mov	r20,r8
81109e38:	003eff06 	br	81109a38 <__reset+0xfb0e9a38>

81109e3c <__extendsfdf2>:
81109e3c:	200ad5fa 	srli	r5,r4,23
81109e40:	defffd04 	addi	sp,sp,-12
81109e44:	dc400115 	stw	r17,4(sp)
81109e48:	29403fcc 	andi	r5,r5,255
81109e4c:	29800044 	addi	r6,r5,1
81109e50:	04402034 	movhi	r17,128
81109e54:	dc000015 	stw	r16,0(sp)
81109e58:	8c7fffc4 	addi	r17,r17,-1
81109e5c:	dfc00215 	stw	ra,8(sp)
81109e60:	31803fcc 	andi	r6,r6,255
81109e64:	00800044 	movi	r2,1
81109e68:	8922703a 	and	r17,r17,r4
81109e6c:	2020d7fa 	srli	r16,r4,31
81109e70:	1180110e 	bge	r2,r6,81109eb8 <__extendsfdf2+0x7c>
81109e74:	880cd0fa 	srli	r6,r17,3
81109e78:	8822977a 	slli	r17,r17,29
81109e7c:	2940e004 	addi	r5,r5,896
81109e80:	2941ffcc 	andi	r5,r5,2047
81109e84:	2804953a 	slli	r2,r5,20
81109e88:	01400434 	movhi	r5,16
81109e8c:	800697fa 	slli	r3,r16,31
81109e90:	297fffc4 	addi	r5,r5,-1
81109e94:	314a703a 	and	r5,r6,r5
81109e98:	288ab03a 	or	r5,r5,r2
81109e9c:	28c6b03a 	or	r3,r5,r3
81109ea0:	8805883a 	mov	r2,r17
81109ea4:	dfc00217 	ldw	ra,8(sp)
81109ea8:	dc400117 	ldw	r17,4(sp)
81109eac:	dc000017 	ldw	r16,0(sp)
81109eb0:	dec00304 	addi	sp,sp,12
81109eb4:	f800283a 	ret
81109eb8:	2800111e 	bne	r5,zero,81109f00 <__extendsfdf2+0xc4>
81109ebc:	88001c26 	beq	r17,zero,81109f30 <__extendsfdf2+0xf4>
81109ec0:	8809883a 	mov	r4,r17
81109ec4:	110a0f40 	call	8110a0f4 <__clzsi2>
81109ec8:	00c00284 	movi	r3,10
81109ecc:	18801b16 	blt	r3,r2,81109f3c <__extendsfdf2+0x100>
81109ed0:	018002c4 	movi	r6,11
81109ed4:	308dc83a 	sub	r6,r6,r2
81109ed8:	11000544 	addi	r4,r2,21
81109edc:	8986d83a 	srl	r3,r17,r6
81109ee0:	8922983a 	sll	r17,r17,r4
81109ee4:	0180e244 	movi	r6,905
81109ee8:	01400434 	movhi	r5,16
81109eec:	3085c83a 	sub	r2,r6,r2
81109ef0:	297fffc4 	addi	r5,r5,-1
81109ef4:	194c703a 	and	r6,r3,r5
81109ef8:	1141ffcc 	andi	r5,r2,2047
81109efc:	003fe006 	br	81109e80 <__reset+0xfb0e9e80>
81109f00:	88000826 	beq	r17,zero,81109f24 <__extendsfdf2+0xe8>
81109f04:	880cd0fa 	srli	r6,r17,3
81109f08:	00800434 	movhi	r2,16
81109f0c:	10bfffc4 	addi	r2,r2,-1
81109f10:	31800234 	orhi	r6,r6,8
81109f14:	8822977a 	slli	r17,r17,29
81109f18:	308c703a 	and	r6,r6,r2
81109f1c:	0141ffc4 	movi	r5,2047
81109f20:	003fd706 	br	81109e80 <__reset+0xfb0e9e80>
81109f24:	0141ffc4 	movi	r5,2047
81109f28:	000d883a 	mov	r6,zero
81109f2c:	003fd406 	br	81109e80 <__reset+0xfb0e9e80>
81109f30:	000b883a 	mov	r5,zero
81109f34:	000d883a 	mov	r6,zero
81109f38:	003fd106 	br	81109e80 <__reset+0xfb0e9e80>
81109f3c:	11bffd44 	addi	r6,r2,-11
81109f40:	8986983a 	sll	r3,r17,r6
81109f44:	0023883a 	mov	r17,zero
81109f48:	003fe606 	br	81109ee4 <__reset+0xfb0e9ee4>

81109f4c <__truncdfsf2>:
81109f4c:	2810d53a 	srli	r8,r5,20
81109f50:	01c00434 	movhi	r7,16
81109f54:	39ffffc4 	addi	r7,r7,-1
81109f58:	29ce703a 	and	r7,r5,r7
81109f5c:	4201ffcc 	andi	r8,r8,2047
81109f60:	380e90fa 	slli	r7,r7,3
81109f64:	200cd77a 	srli	r6,r4,29
81109f68:	42400044 	addi	r9,r8,1
81109f6c:	4a41ffcc 	andi	r9,r9,2047
81109f70:	00c00044 	movi	r3,1
81109f74:	280ad7fa 	srli	r5,r5,31
81109f78:	31ceb03a 	or	r7,r6,r7
81109f7c:	200490fa 	slli	r2,r4,3
81109f80:	1a40230e 	bge	r3,r9,8110a010 <__truncdfsf2+0xc4>
81109f84:	40ff2004 	addi	r3,r8,-896
81109f88:	01803f84 	movi	r6,254
81109f8c:	30c01516 	blt	r6,r3,81109fe4 <__truncdfsf2+0x98>
81109f90:	00c0380e 	bge	zero,r3,8110a074 <__truncdfsf2+0x128>
81109f94:	200c91ba 	slli	r6,r4,6
81109f98:	380e90fa 	slli	r7,r7,3
81109f9c:	1004d77a 	srli	r2,r2,29
81109fa0:	300cc03a 	cmpne	r6,r6,zero
81109fa4:	31ccb03a 	or	r6,r6,r7
81109fa8:	308cb03a 	or	r6,r6,r2
81109fac:	308001cc 	andi	r2,r6,7
81109fb0:	10000426 	beq	r2,zero,81109fc4 <__truncdfsf2+0x78>
81109fb4:	308003cc 	andi	r2,r6,15
81109fb8:	01000104 	movi	r4,4
81109fbc:	11000126 	beq	r2,r4,81109fc4 <__truncdfsf2+0x78>
81109fc0:	31800104 	addi	r6,r6,4
81109fc4:	3081002c 	andhi	r2,r6,1024
81109fc8:	10001626 	beq	r2,zero,8110a024 <__truncdfsf2+0xd8>
81109fcc:	18c00044 	addi	r3,r3,1
81109fd0:	00803fc4 	movi	r2,255
81109fd4:	18800326 	beq	r3,r2,81109fe4 <__truncdfsf2+0x98>
81109fd8:	300c91ba 	slli	r6,r6,6
81109fdc:	300cd27a 	srli	r6,r6,9
81109fe0:	00000206 	br	81109fec <__truncdfsf2+0xa0>
81109fe4:	00ffffc4 	movi	r3,-1
81109fe8:	000d883a 	mov	r6,zero
81109fec:	18c03fcc 	andi	r3,r3,255
81109ff0:	180895fa 	slli	r4,r3,23
81109ff4:	00c02034 	movhi	r3,128
81109ff8:	280a97fa 	slli	r5,r5,31
81109ffc:	18ffffc4 	addi	r3,r3,-1
8110a000:	30c6703a 	and	r3,r6,r3
8110a004:	1906b03a 	or	r3,r3,r4
8110a008:	1944b03a 	or	r2,r3,r5
8110a00c:	f800283a 	ret
8110a010:	40000b1e 	bne	r8,zero,8110a040 <__truncdfsf2+0xf4>
8110a014:	388cb03a 	or	r6,r7,r2
8110a018:	0007883a 	mov	r3,zero
8110a01c:	30000426 	beq	r6,zero,8110a030 <__truncdfsf2+0xe4>
8110a020:	01800144 	movi	r6,5
8110a024:	00803fc4 	movi	r2,255
8110a028:	300cd0fa 	srli	r6,r6,3
8110a02c:	18800a26 	beq	r3,r2,8110a058 <__truncdfsf2+0x10c>
8110a030:	00802034 	movhi	r2,128
8110a034:	10bfffc4 	addi	r2,r2,-1
8110a038:	308c703a 	and	r6,r6,r2
8110a03c:	003feb06 	br	81109fec <__reset+0xfb0e9fec>
8110a040:	3888b03a 	or	r4,r7,r2
8110a044:	203fe726 	beq	r4,zero,81109fe4 <__reset+0xfb0e9fe4>
8110a048:	380c90fa 	slli	r6,r7,3
8110a04c:	00c03fc4 	movi	r3,255
8110a050:	31808034 	orhi	r6,r6,512
8110a054:	003fd506 	br	81109fac <__reset+0xfb0e9fac>
8110a058:	303fe226 	beq	r6,zero,81109fe4 <__reset+0xfb0e9fe4>
8110a05c:	00802034 	movhi	r2,128
8110a060:	31801034 	orhi	r6,r6,64
8110a064:	10bfffc4 	addi	r2,r2,-1
8110a068:	00ffffc4 	movi	r3,-1
8110a06c:	308c703a 	and	r6,r6,r2
8110a070:	003fde06 	br	81109fec <__reset+0xfb0e9fec>
8110a074:	013ffa44 	movi	r4,-23
8110a078:	19000e16 	blt	r3,r4,8110a0b4 <__truncdfsf2+0x168>
8110a07c:	01000784 	movi	r4,30
8110a080:	20c9c83a 	sub	r4,r4,r3
8110a084:	018007c4 	movi	r6,31
8110a088:	39c02034 	orhi	r7,r7,128
8110a08c:	31000b16 	blt	r6,r4,8110a0bc <__truncdfsf2+0x170>
8110a090:	423f2084 	addi	r8,r8,-894
8110a094:	120c983a 	sll	r6,r2,r8
8110a098:	3a0e983a 	sll	r7,r7,r8
8110a09c:	1104d83a 	srl	r2,r2,r4
8110a0a0:	300cc03a 	cmpne	r6,r6,zero
8110a0a4:	31ceb03a 	or	r7,r6,r7
8110a0a8:	388cb03a 	or	r6,r7,r2
8110a0ac:	0007883a 	mov	r3,zero
8110a0b0:	003fbe06 	br	81109fac <__reset+0xfb0e9fac>
8110a0b4:	0007883a 	mov	r3,zero
8110a0b8:	003fd906 	br	8110a020 <__reset+0xfb0ea020>
8110a0bc:	01bfff84 	movi	r6,-2
8110a0c0:	30cdc83a 	sub	r6,r6,r3
8110a0c4:	00c00804 	movi	r3,32
8110a0c8:	398cd83a 	srl	r6,r7,r6
8110a0cc:	20c00726 	beq	r4,r3,8110a0ec <__truncdfsf2+0x1a0>
8110a0d0:	423f2884 	addi	r8,r8,-862
8110a0d4:	3a0e983a 	sll	r7,r7,r8
8110a0d8:	3884b03a 	or	r2,r7,r2
8110a0dc:	1004c03a 	cmpne	r2,r2,zero
8110a0e0:	118cb03a 	or	r6,r2,r6
8110a0e4:	0007883a 	mov	r3,zero
8110a0e8:	003fb006 	br	81109fac <__reset+0xfb0e9fac>
8110a0ec:	000f883a 	mov	r7,zero
8110a0f0:	003ff906 	br	8110a0d8 <__reset+0xfb0ea0d8>

8110a0f4 <__clzsi2>:
8110a0f4:	00bfffd4 	movui	r2,65535
8110a0f8:	11000536 	bltu	r2,r4,8110a110 <__clzsi2+0x1c>
8110a0fc:	00803fc4 	movi	r2,255
8110a100:	11000f36 	bltu	r2,r4,8110a140 <__clzsi2+0x4c>
8110a104:	00800804 	movi	r2,32
8110a108:	0007883a 	mov	r3,zero
8110a10c:	00000506 	br	8110a124 <__clzsi2+0x30>
8110a110:	00804034 	movhi	r2,256
8110a114:	10bfffc4 	addi	r2,r2,-1
8110a118:	11000c2e 	bgeu	r2,r4,8110a14c <__clzsi2+0x58>
8110a11c:	00800204 	movi	r2,8
8110a120:	00c00604 	movi	r3,24
8110a124:	20c8d83a 	srl	r4,r4,r3
8110a128:	00e044f4 	movhi	r3,33043
8110a12c:	18cd8004 	addi	r3,r3,13824
8110a130:	1909883a 	add	r4,r3,r4
8110a134:	20c00003 	ldbu	r3,0(r4)
8110a138:	10c5c83a 	sub	r2,r2,r3
8110a13c:	f800283a 	ret
8110a140:	00800604 	movi	r2,24
8110a144:	00c00204 	movi	r3,8
8110a148:	003ff606 	br	8110a124 <__reset+0xfb0ea124>
8110a14c:	00800404 	movi	r2,16
8110a150:	1007883a 	mov	r3,r2
8110a154:	003ff306 	br	8110a124 <__reset+0xfb0ea124>

8110a158 <atoi>:
8110a158:	01800284 	movi	r6,10
8110a15c:	000b883a 	mov	r5,zero
8110a160:	110bf441 	jmpi	8110bf44 <strtol>

8110a164 <_atoi_r>:
8110a164:	01c00284 	movi	r7,10
8110a168:	000d883a 	mov	r6,zero
8110a16c:	110bd0c1 	jmpi	8110bd0c <_strtol_r>

8110a170 <_fopen_r>:
8110a170:	defffa04 	addi	sp,sp,-24
8110a174:	3005883a 	mov	r2,r6
8110a178:	dcc00415 	stw	r19,16(sp)
8110a17c:	d80d883a 	mov	r6,sp
8110a180:	2827883a 	mov	r19,r5
8110a184:	100b883a 	mov	r5,r2
8110a188:	dc800315 	stw	r18,12(sp)
8110a18c:	dfc00515 	stw	ra,20(sp)
8110a190:	dc400215 	stw	r17,8(sp)
8110a194:	dc000115 	stw	r16,4(sp)
8110a198:	2025883a 	mov	r18,r4
8110a19c:	1113d6c0 	call	81113d6c <__sflags>
8110a1a0:	10002726 	beq	r2,zero,8110a240 <_fopen_r+0xd0>
8110a1a4:	9009883a 	mov	r4,r18
8110a1a8:	1023883a 	mov	r17,r2
8110a1ac:	1113bec0 	call	81113bec <__sfp>
8110a1b0:	1021883a 	mov	r16,r2
8110a1b4:	10002226 	beq	r2,zero,8110a240 <_fopen_r+0xd0>
8110a1b8:	d9800017 	ldw	r6,0(sp)
8110a1bc:	01c06d84 	movi	r7,438
8110a1c0:	980b883a 	mov	r5,r19
8110a1c4:	9009883a 	mov	r4,r18
8110a1c8:	110b4dc0 	call	8110b4dc <_open_r>
8110a1cc:	10001916 	blt	r2,zero,8110a234 <_fopen_r+0xc4>
8110a1d0:	8080038d 	sth	r2,14(r16)
8110a1d4:	00a04474 	movhi	r2,33041
8110a1d8:	10ae8404 	addi	r2,r2,-17904
8110a1dc:	80800815 	stw	r2,32(r16)
8110a1e0:	00a04474 	movhi	r2,33041
8110a1e4:	10ae9b04 	addi	r2,r2,-17812
8110a1e8:	80800915 	stw	r2,36(r16)
8110a1ec:	00a04474 	movhi	r2,33041
8110a1f0:	10aeba04 	addi	r2,r2,-17688
8110a1f4:	80800a15 	stw	r2,40(r16)
8110a1f8:	00a04474 	movhi	r2,33041
8110a1fc:	10aed104 	addi	r2,r2,-17596
8110a200:	8440030d 	sth	r17,12(r16)
8110a204:	84000715 	stw	r16,28(r16)
8110a208:	80800b15 	stw	r2,44(r16)
8110a20c:	8c40400c 	andi	r17,r17,256
8110a210:	88000d1e 	bne	r17,zero,8110a248 <_fopen_r+0xd8>
8110a214:	8005883a 	mov	r2,r16
8110a218:	dfc00517 	ldw	ra,20(sp)
8110a21c:	dcc00417 	ldw	r19,16(sp)
8110a220:	dc800317 	ldw	r18,12(sp)
8110a224:	dc400217 	ldw	r17,8(sp)
8110a228:	dc000117 	ldw	r16,4(sp)
8110a22c:	dec00604 	addi	sp,sp,24
8110a230:	f800283a 	ret
8110a234:	1113d2c0 	call	81113d2c <__sfp_lock_acquire>
8110a238:	8000030d 	sth	zero,12(r16)
8110a23c:	1113d300 	call	81113d30 <__sfp_lock_release>
8110a240:	0005883a 	mov	r2,zero
8110a244:	003ff406 	br	8110a218 <__reset+0xfb0ea218>
8110a248:	01c00084 	movi	r7,2
8110a24c:	000d883a 	mov	r6,zero
8110a250:	800b883a 	mov	r5,r16
8110a254:	9009883a 	mov	r4,r18
8110a258:	110a2c80 	call	8110a2c8 <_fseek_r>
8110a25c:	8005883a 	mov	r2,r16
8110a260:	003fed06 	br	8110a218 <__reset+0xfb0ea218>

8110a264 <fopen>:
8110a264:	00a044f4 	movhi	r2,33043
8110a268:	10976404 	addi	r2,r2,23952
8110a26c:	280d883a 	mov	r6,r5
8110a270:	200b883a 	mov	r5,r4
8110a274:	11000017 	ldw	r4,0(r2)
8110a278:	110a1701 	jmpi	8110a170 <_fopen_r>

8110a27c <_fprintf_r>:
8110a27c:	defffe04 	addi	sp,sp,-8
8110a280:	2809883a 	mov	r4,r5
8110a284:	300b883a 	mov	r5,r6
8110a288:	dfc00015 	stw	ra,0(sp)
8110a28c:	d9c00115 	stw	r7,4(sp)
8110a290:	d9800104 	addi	r6,sp,4
8110a294:	11103300 	call	81110330 <__vfprintf_internal>
8110a298:	dfc00017 	ldw	ra,0(sp)
8110a29c:	dec00204 	addi	sp,sp,8
8110a2a0:	f800283a 	ret

8110a2a4 <fprintf>:
8110a2a4:	defffd04 	addi	sp,sp,-12
8110a2a8:	dfc00015 	stw	ra,0(sp)
8110a2ac:	d9800115 	stw	r6,4(sp)
8110a2b0:	d9c00215 	stw	r7,8(sp)
8110a2b4:	d9800104 	addi	r6,sp,4
8110a2b8:	11103300 	call	81110330 <__vfprintf_internal>
8110a2bc:	dfc00017 	ldw	ra,0(sp)
8110a2c0:	dec00304 	addi	sp,sp,12
8110a2c4:	f800283a 	ret

8110a2c8 <_fseek_r>:
8110a2c8:	110a2e81 	jmpi	8110a2e8 <_fseeko_r>

8110a2cc <fseek>:
8110a2cc:	00a044f4 	movhi	r2,33043
8110a2d0:	10976404 	addi	r2,r2,23952
8110a2d4:	300f883a 	mov	r7,r6
8110a2d8:	280d883a 	mov	r6,r5
8110a2dc:	200b883a 	mov	r5,r4
8110a2e0:	11000017 	ldw	r4,0(r2)
8110a2e4:	110a2e81 	jmpi	8110a2e8 <_fseeko_r>

8110a2e8 <_fseeko_r>:
8110a2e8:	deffe804 	addi	sp,sp,-96
8110a2ec:	dd401415 	stw	r21,80(sp)
8110a2f0:	dc801115 	stw	r18,68(sp)
8110a2f4:	dc401015 	stw	r17,64(sp)
8110a2f8:	dc000f15 	stw	r16,60(sp)
8110a2fc:	dfc01715 	stw	ra,92(sp)
8110a300:	ddc01615 	stw	r23,88(sp)
8110a304:	dd801515 	stw	r22,84(sp)
8110a308:	dd001315 	stw	r20,76(sp)
8110a30c:	dcc01215 	stw	r19,72(sp)
8110a310:	2023883a 	mov	r17,r4
8110a314:	2821883a 	mov	r16,r5
8110a318:	302b883a 	mov	r21,r6
8110a31c:	3825883a 	mov	r18,r7
8110a320:	20000226 	beq	r4,zero,8110a32c <_fseeko_r+0x44>
8110a324:	20800e17 	ldw	r2,56(r4)
8110a328:	10005a26 	beq	r2,zero,8110a494 <_fseeko_r+0x1ac>
8110a32c:	8080030b 	ldhu	r2,12(r16)
8110a330:	00c04204 	movi	r3,264
8110a334:	1080420c 	andi	r2,r2,264
8110a338:	10c05b26 	beq	r2,r3,8110a4a8 <_fseeko_r+0x1c0>
8110a33c:	85000a17 	ldw	r20,40(r16)
8110a340:	a000f626 	beq	r20,zero,8110a71c <_fseeko_r+0x434>
8110a344:	00800044 	movi	r2,1
8110a348:	90803e26 	beq	r18,r2,8110a444 <_fseeko_r+0x15c>
8110a34c:	00800084 	movi	r2,2
8110a350:	90801026 	beq	r18,r2,8110a394 <_fseeko_r+0xac>
8110a354:	90000f26 	beq	r18,zero,8110a394 <_fseeko_r+0xac>
8110a358:	00800584 	movi	r2,22
8110a35c:	88800015 	stw	r2,0(r17)
8110a360:	04ffffc4 	movi	r19,-1
8110a364:	9805883a 	mov	r2,r19
8110a368:	dfc01717 	ldw	ra,92(sp)
8110a36c:	ddc01617 	ldw	r23,88(sp)
8110a370:	dd801517 	ldw	r22,84(sp)
8110a374:	dd401417 	ldw	r21,80(sp)
8110a378:	dd001317 	ldw	r20,76(sp)
8110a37c:	dcc01217 	ldw	r19,72(sp)
8110a380:	dc801117 	ldw	r18,68(sp)
8110a384:	dc401017 	ldw	r17,64(sp)
8110a388:	dc000f17 	ldw	r16,60(sp)
8110a38c:	dec01804 	addi	sp,sp,96
8110a390:	f800283a 	ret
8110a394:	80800417 	ldw	r2,16(r16)
8110a398:	002f883a 	mov	r23,zero
8110a39c:	0027883a 	mov	r19,zero
8110a3a0:	1000cb26 	beq	r2,zero,8110a6d0 <_fseeko_r+0x3e8>
8110a3a4:	8080030b 	ldhu	r2,12(r16)
8110a3a8:	10c2068c 	andi	r3,r2,2074
8110a3ac:	1800071e 	bne	r3,zero,8110a3cc <_fseeko_r+0xe4>
8110a3b0:	10c1000c 	andi	r3,r2,1024
8110a3b4:	1800451e 	bne	r3,zero,8110a4cc <_fseeko_r+0x1e4>
8110a3b8:	00e04474 	movhi	r3,33041
8110a3bc:	18eeba04 	addi	r3,r3,-17688
8110a3c0:	a0c0b726 	beq	r20,r3,8110a6a0 <_fseeko_r+0x3b8>
8110a3c4:	10820014 	ori	r2,r2,2048
8110a3c8:	8080030d 	sth	r2,12(r16)
8110a3cc:	800b883a 	mov	r5,r16
8110a3d0:	8809883a 	mov	r4,r17
8110a3d4:	11139400 	call	81113940 <_fflush_r>
8110a3d8:	1027883a 	mov	r19,r2
8110a3dc:	103fe01e 	bne	r2,zero,8110a360 <__reset+0xfb0ea360>
8110a3e0:	81400717 	ldw	r5,28(r16)
8110a3e4:	900f883a 	mov	r7,r18
8110a3e8:	a80d883a 	mov	r6,r21
8110a3ec:	8809883a 	mov	r4,r17
8110a3f0:	a03ee83a 	callr	r20
8110a3f4:	00ffffc4 	movi	r3,-1
8110a3f8:	10ffd926 	beq	r2,r3,8110a360 <__reset+0xfb0ea360>
8110a3fc:	81400c17 	ldw	r5,48(r16)
8110a400:	28000526 	beq	r5,zero,8110a418 <_fseeko_r+0x130>
8110a404:	80801004 	addi	r2,r16,64
8110a408:	28800226 	beq	r5,r2,8110a414 <_fseeko_r+0x12c>
8110a40c:	8809883a 	mov	r4,r17
8110a410:	111419c0 	call	8111419c <_free_r>
8110a414:	80000c15 	stw	zero,48(r16)
8110a418:	8080030b 	ldhu	r2,12(r16)
8110a41c:	80c00417 	ldw	r3,16(r16)
8110a420:	80000115 	stw	zero,4(r16)
8110a424:	10bdf7cc 	andi	r2,r2,63455
8110a428:	80c00015 	stw	r3,0(r16)
8110a42c:	8080030d 	sth	r2,12(r16)
8110a430:	01800204 	movi	r6,8
8110a434:	000b883a 	mov	r5,zero
8110a438:	81001704 	addi	r4,r16,92
8110a43c:	110b3b40 	call	8110b3b4 <memset>
8110a440:	003fc806 	br	8110a364 <__reset+0xfb0ea364>
8110a444:	800b883a 	mov	r5,r16
8110a448:	8809883a 	mov	r4,r17
8110a44c:	11139400 	call	81113940 <_fflush_r>
8110a450:	8080030b 	ldhu	r2,12(r16)
8110a454:	10c4000c 	andi	r3,r2,4096
8110a458:	18008726 	beq	r3,zero,8110a678 <_fseeko_r+0x390>
8110a45c:	84c01417 	ldw	r19,80(r16)
8110a460:	10c0010c 	andi	r3,r2,4
8110a464:	1800431e 	bne	r3,zero,8110a574 <_fseeko_r+0x28c>
8110a468:	1080020c 	andi	r2,r2,8
8110a46c:	10008026 	beq	r2,zero,8110a670 <_fseeko_r+0x388>
8110a470:	80c00017 	ldw	r3,0(r16)
8110a474:	80800417 	ldw	r2,16(r16)
8110a478:	18000226 	beq	r3,zero,8110a484 <_fseeko_r+0x19c>
8110a47c:	1887c83a 	sub	r3,r3,r2
8110a480:	98e7883a 	add	r19,r19,r3
8110a484:	aceb883a 	add	r21,r21,r19
8110a488:	05c00044 	movi	r23,1
8110a48c:	0025883a 	mov	r18,zero
8110a490:	003fc306 	br	8110a3a0 <__reset+0xfb0ea3a0>
8110a494:	1113d1c0 	call	81113d1c <__sinit>
8110a498:	8080030b 	ldhu	r2,12(r16)
8110a49c:	00c04204 	movi	r3,264
8110a4a0:	1080420c 	andi	r2,r2,264
8110a4a4:	10ffa51e 	bne	r2,r3,8110a33c <__reset+0xfb0ea33c>
8110a4a8:	800b883a 	mov	r5,r16
8110a4ac:	8809883a 	mov	r4,r17
8110a4b0:	11139400 	call	81113940 <_fflush_r>
8110a4b4:	003fa106 	br	8110a33c <__reset+0xfb0ea33c>
8110a4b8:	8080030b 	ldhu	r2,12(r16)
8110a4bc:	00c10004 	movi	r3,1024
8110a4c0:	80c01315 	stw	r3,76(r16)
8110a4c4:	10c4b03a 	or	r2,r2,r3
8110a4c8:	8080030d 	sth	r2,12(r16)
8110a4cc:	9000311e 	bne	r18,zero,8110a594 <_fseeko_r+0x2ac>
8110a4d0:	a82d883a 	mov	r22,r21
8110a4d4:	b800371e 	bne	r23,zero,8110a5b4 <_fseeko_r+0x2cc>
8110a4d8:	8080030b 	ldhu	r2,12(r16)
8110a4dc:	1084000c 	andi	r2,r2,4096
8110a4e0:	10007f26 	beq	r2,zero,8110a6e0 <_fseeko_r+0x3f8>
8110a4e4:	80801417 	ldw	r2,80(r16)
8110a4e8:	81800117 	ldw	r6,4(r16)
8110a4ec:	81400c17 	ldw	r5,48(r16)
8110a4f0:	11a7c83a 	sub	r19,r2,r6
8110a4f4:	28008226 	beq	r5,zero,8110a700 <_fseeko_r+0x418>
8110a4f8:	81c00f17 	ldw	r7,60(r16)
8110a4fc:	99e7c83a 	sub	r19,r19,r7
8110a500:	81000e17 	ldw	r4,56(r16)
8110a504:	80800417 	ldw	r2,16(r16)
8110a508:	99a7883a 	add	r19,r19,r6
8110a50c:	2087c83a 	sub	r3,r4,r2
8110a510:	98e7c83a 	sub	r19,r19,r3
8110a514:	38c7883a 	add	r3,r7,r3
8110a518:	b4c02b16 	blt	r22,r19,8110a5c8 <_fseeko_r+0x2e0>
8110a51c:	98c9883a 	add	r4,r19,r3
8110a520:	b100292e 	bgeu	r22,r4,8110a5c8 <_fseeko_r+0x2e0>
8110a524:	b4e7c83a 	sub	r19,r22,r19
8110a528:	14c5883a 	add	r2,r2,r19
8110a52c:	1ce7c83a 	sub	r19,r3,r19
8110a530:	80800015 	stw	r2,0(r16)
8110a534:	84c00115 	stw	r19,4(r16)
8110a538:	28000526 	beq	r5,zero,8110a550 <_fseeko_r+0x268>
8110a53c:	80801004 	addi	r2,r16,64
8110a540:	28800226 	beq	r5,r2,8110a54c <_fseeko_r+0x264>
8110a544:	8809883a 	mov	r4,r17
8110a548:	111419c0 	call	8111419c <_free_r>
8110a54c:	80000c15 	stw	zero,48(r16)
8110a550:	8080030b 	ldhu	r2,12(r16)
8110a554:	01800204 	movi	r6,8
8110a558:	000b883a 	mov	r5,zero
8110a55c:	10bff7cc 	andi	r2,r2,65503
8110a560:	8080030d 	sth	r2,12(r16)
8110a564:	81001704 	addi	r4,r16,92
8110a568:	110b3b40 	call	8110b3b4 <memset>
8110a56c:	0027883a 	mov	r19,zero
8110a570:	003f7c06 	br	8110a364 <__reset+0xfb0ea364>
8110a574:	80c00117 	ldw	r3,4(r16)
8110a578:	80800c17 	ldw	r2,48(r16)
8110a57c:	98e7c83a 	sub	r19,r19,r3
8110a580:	10003b26 	beq	r2,zero,8110a670 <_fseeko_r+0x388>
8110a584:	80c00f17 	ldw	r3,60(r16)
8110a588:	80800417 	ldw	r2,16(r16)
8110a58c:	98e7c83a 	sub	r19,r19,r3
8110a590:	003fbc06 	br	8110a484 <__reset+0xfb0ea484>
8110a594:	8140038f 	ldh	r5,14(r16)
8110a598:	d80d883a 	mov	r6,sp
8110a59c:	8809883a 	mov	r4,r17
8110a5a0:	110a7480 	call	8110a748 <_fstat_r>
8110a5a4:	103f891e 	bne	r2,zero,8110a3cc <__reset+0xfb0ea3cc>
8110a5a8:	dd800417 	ldw	r22,16(sp)
8110a5ac:	adad883a 	add	r22,r21,r22
8110a5b0:	b83fc926 	beq	r23,zero,8110a4d8 <__reset+0xfb0ea4d8>
8110a5b4:	81400c17 	ldw	r5,48(r16)
8110a5b8:	81800117 	ldw	r6,4(r16)
8110a5bc:	28005026 	beq	r5,zero,8110a700 <_fseeko_r+0x418>
8110a5c0:	81c00f17 	ldw	r7,60(r16)
8110a5c4:	003fce06 	br	8110a500 <__reset+0xfb0ea500>
8110a5c8:	84c01317 	ldw	r19,76(r16)
8110a5cc:	81400717 	ldw	r5,28(r16)
8110a5d0:	000f883a 	mov	r7,zero
8110a5d4:	04e7c83a 	sub	r19,zero,r19
8110a5d8:	9da6703a 	and	r19,r19,r22
8110a5dc:	980d883a 	mov	r6,r19
8110a5e0:	8809883a 	mov	r4,r17
8110a5e4:	a03ee83a 	callr	r20
8110a5e8:	00ffffc4 	movi	r3,-1
8110a5ec:	10ff7726 	beq	r2,r3,8110a3cc <__reset+0xfb0ea3cc>
8110a5f0:	80800417 	ldw	r2,16(r16)
8110a5f4:	81400c17 	ldw	r5,48(r16)
8110a5f8:	80000115 	stw	zero,4(r16)
8110a5fc:	80800015 	stw	r2,0(r16)
8110a600:	28000526 	beq	r5,zero,8110a618 <_fseeko_r+0x330>
8110a604:	80801004 	addi	r2,r16,64
8110a608:	28800226 	beq	r5,r2,8110a614 <_fseeko_r+0x32c>
8110a60c:	8809883a 	mov	r4,r17
8110a610:	111419c0 	call	8111419c <_free_r>
8110a614:	80000c15 	stw	zero,48(r16)
8110a618:	8080030b 	ldhu	r2,12(r16)
8110a61c:	b4e7c83a 	sub	r19,r22,r19
8110a620:	10bff7cc 	andi	r2,r2,65503
8110a624:	8080030d 	sth	r2,12(r16)
8110a628:	98000b26 	beq	r19,zero,8110a658 <_fseeko_r+0x370>
8110a62c:	800b883a 	mov	r5,r16
8110a630:	8809883a 	mov	r4,r17
8110a634:	110b6b80 	call	8110b6b8 <__srefill_r>
8110a638:	103f641e 	bne	r2,zero,8110a3cc <__reset+0xfb0ea3cc>
8110a63c:	80800117 	ldw	r2,4(r16)
8110a640:	14ff6236 	bltu	r2,r19,8110a3cc <__reset+0xfb0ea3cc>
8110a644:	80c00017 	ldw	r3,0(r16)
8110a648:	14c5c83a 	sub	r2,r2,r19
8110a64c:	80800115 	stw	r2,4(r16)
8110a650:	1ce7883a 	add	r19,r3,r19
8110a654:	84c00015 	stw	r19,0(r16)
8110a658:	01800204 	movi	r6,8
8110a65c:	000b883a 	mov	r5,zero
8110a660:	81001704 	addi	r4,r16,92
8110a664:	110b3b40 	call	8110b3b4 <memset>
8110a668:	0027883a 	mov	r19,zero
8110a66c:	003f3d06 	br	8110a364 <__reset+0xfb0ea364>
8110a670:	80800417 	ldw	r2,16(r16)
8110a674:	003f8306 	br	8110a484 <__reset+0xfb0ea484>
8110a678:	81400717 	ldw	r5,28(r16)
8110a67c:	900f883a 	mov	r7,r18
8110a680:	000d883a 	mov	r6,zero
8110a684:	8809883a 	mov	r4,r17
8110a688:	a03ee83a 	callr	r20
8110a68c:	1027883a 	mov	r19,r2
8110a690:	00bfffc4 	movi	r2,-1
8110a694:	98bf3226 	beq	r19,r2,8110a360 <__reset+0xfb0ea360>
8110a698:	8080030b 	ldhu	r2,12(r16)
8110a69c:	003f7006 	br	8110a460 <__reset+0xfb0ea460>
8110a6a0:	8140038f 	ldh	r5,14(r16)
8110a6a4:	283f4716 	blt	r5,zero,8110a3c4 <__reset+0xfb0ea3c4>
8110a6a8:	d80d883a 	mov	r6,sp
8110a6ac:	8809883a 	mov	r4,r17
8110a6b0:	110a7480 	call	8110a748 <_fstat_r>
8110a6b4:	1000041e 	bne	r2,zero,8110a6c8 <_fseeko_r+0x3e0>
8110a6b8:	d8800117 	ldw	r2,4(sp)
8110a6bc:	00e00014 	movui	r3,32768
8110a6c0:	10bc000c 	andi	r2,r2,61440
8110a6c4:	10ff7c26 	beq	r2,r3,8110a4b8 <__reset+0xfb0ea4b8>
8110a6c8:	8080030b 	ldhu	r2,12(r16)
8110a6cc:	003f3d06 	br	8110a3c4 <__reset+0xfb0ea3c4>
8110a6d0:	800b883a 	mov	r5,r16
8110a6d4:	8809883a 	mov	r4,r17
8110a6d8:	110a8a40 	call	8110a8a4 <__smakebuf_r>
8110a6dc:	003f3106 	br	8110a3a4 <__reset+0xfb0ea3a4>
8110a6e0:	81400717 	ldw	r5,28(r16)
8110a6e4:	01c00044 	movi	r7,1
8110a6e8:	000d883a 	mov	r6,zero
8110a6ec:	8809883a 	mov	r4,r17
8110a6f0:	a03ee83a 	callr	r20
8110a6f4:	00ffffc4 	movi	r3,-1
8110a6f8:	10ff7b1e 	bne	r2,r3,8110a4e8 <__reset+0xfb0ea4e8>
8110a6fc:	003f3306 	br	8110a3cc <__reset+0xfb0ea3cc>
8110a700:	80c00017 	ldw	r3,0(r16)
8110a704:	80800417 	ldw	r2,16(r16)
8110a708:	000b883a 	mov	r5,zero
8110a70c:	1887c83a 	sub	r3,r3,r2
8110a710:	98e7c83a 	sub	r19,r19,r3
8110a714:	30c7883a 	add	r3,r6,r3
8110a718:	003f7f06 	br	8110a518 <__reset+0xfb0ea518>
8110a71c:	00800744 	movi	r2,29
8110a720:	88800015 	stw	r2,0(r17)
8110a724:	04ffffc4 	movi	r19,-1
8110a728:	003f0e06 	br	8110a364 <__reset+0xfb0ea364>

8110a72c <fseeko>:
8110a72c:	00a044f4 	movhi	r2,33043
8110a730:	10976404 	addi	r2,r2,23952
8110a734:	300f883a 	mov	r7,r6
8110a738:	280d883a 	mov	r6,r5
8110a73c:	200b883a 	mov	r5,r4
8110a740:	11000017 	ldw	r4,0(r2)
8110a744:	110a2e81 	jmpi	8110a2e8 <_fseeko_r>

8110a748 <_fstat_r>:
8110a748:	defffd04 	addi	sp,sp,-12
8110a74c:	2805883a 	mov	r2,r5
8110a750:	dc000015 	stw	r16,0(sp)
8110a754:	042044f4 	movhi	r16,33043
8110a758:	dc400115 	stw	r17,4(sp)
8110a75c:	8417b304 	addi	r16,r16,24268
8110a760:	2023883a 	mov	r17,r4
8110a764:	300b883a 	mov	r5,r6
8110a768:	1009883a 	mov	r4,r2
8110a76c:	dfc00215 	stw	ra,8(sp)
8110a770:	80000015 	stw	zero,0(r16)
8110a774:	111f8b00 	call	8111f8b0 <fstat>
8110a778:	00ffffc4 	movi	r3,-1
8110a77c:	10c00526 	beq	r2,r3,8110a794 <_fstat_r+0x4c>
8110a780:	dfc00217 	ldw	ra,8(sp)
8110a784:	dc400117 	ldw	r17,4(sp)
8110a788:	dc000017 	ldw	r16,0(sp)
8110a78c:	dec00304 	addi	sp,sp,12
8110a790:	f800283a 	ret
8110a794:	80c00017 	ldw	r3,0(r16)
8110a798:	183ff926 	beq	r3,zero,8110a780 <__reset+0xfb0ea780>
8110a79c:	88c00015 	stw	r3,0(r17)
8110a7a0:	003ff706 	br	8110a780 <__reset+0xfb0ea780>

8110a7a4 <_fwrite_r>:
8110a7a4:	defff504 	addi	sp,sp,-44
8110a7a8:	dc800815 	stw	r18,32(sp)
8110a7ac:	39a5383a 	mul	r18,r7,r6
8110a7b0:	d8800304 	addi	r2,sp,12
8110a7b4:	d8800015 	stw	r2,0(sp)
8110a7b8:	00800044 	movi	r2,1
8110a7bc:	dcc00915 	stw	r19,36(sp)
8110a7c0:	dc400715 	stw	r17,28(sp)
8110a7c4:	dc000615 	stw	r16,24(sp)
8110a7c8:	d9400315 	stw	r5,12(sp)
8110a7cc:	dfc00a15 	stw	ra,40(sp)
8110a7d0:	dc800415 	stw	r18,16(sp)
8110a7d4:	dc800215 	stw	r18,8(sp)
8110a7d8:	d8800115 	stw	r2,4(sp)
8110a7dc:	3027883a 	mov	r19,r6
8110a7e0:	3821883a 	mov	r16,r7
8110a7e4:	2023883a 	mov	r17,r4
8110a7e8:	d9400b17 	ldw	r5,44(sp)
8110a7ec:	20000226 	beq	r4,zero,8110a7f8 <_fwrite_r+0x54>
8110a7f0:	20800e17 	ldw	r2,56(r4)
8110a7f4:	10001a26 	beq	r2,zero,8110a860 <_fwrite_r+0xbc>
8110a7f8:	2880030b 	ldhu	r2,12(r5)
8110a7fc:	10c8000c 	andi	r3,r2,8192
8110a800:	1800061e 	bne	r3,zero,8110a81c <_fwrite_r+0x78>
8110a804:	29001917 	ldw	r4,100(r5)
8110a808:	00f7ffc4 	movi	r3,-8193
8110a80c:	10880014 	ori	r2,r2,8192
8110a810:	20c6703a 	and	r3,r4,r3
8110a814:	2880030d 	sth	r2,12(r5)
8110a818:	28c01915 	stw	r3,100(r5)
8110a81c:	d80d883a 	mov	r6,sp
8110a820:	8809883a 	mov	r4,r17
8110a824:	11144ac0 	call	811144ac <__sfvwrite_r>
8110a828:	10000b26 	beq	r2,zero,8110a858 <_fwrite_r+0xb4>
8110a82c:	d9000217 	ldw	r4,8(sp)
8110a830:	980b883a 	mov	r5,r19
8110a834:	9109c83a 	sub	r4,r18,r4
8110a838:	111d5780 	call	8111d578 <__udivsi3>
8110a83c:	dfc00a17 	ldw	ra,40(sp)
8110a840:	dcc00917 	ldw	r19,36(sp)
8110a844:	dc800817 	ldw	r18,32(sp)
8110a848:	dc400717 	ldw	r17,28(sp)
8110a84c:	dc000617 	ldw	r16,24(sp)
8110a850:	dec00b04 	addi	sp,sp,44
8110a854:	f800283a 	ret
8110a858:	8005883a 	mov	r2,r16
8110a85c:	003ff706 	br	8110a83c <__reset+0xfb0ea83c>
8110a860:	d9400515 	stw	r5,20(sp)
8110a864:	1113d1c0 	call	81113d1c <__sinit>
8110a868:	d9400517 	ldw	r5,20(sp)
8110a86c:	003fe206 	br	8110a7f8 <__reset+0xfb0ea7f8>

8110a870 <fwrite>:
8110a870:	defffe04 	addi	sp,sp,-8
8110a874:	00a044f4 	movhi	r2,33043
8110a878:	d9c00015 	stw	r7,0(sp)
8110a87c:	10976404 	addi	r2,r2,23952
8110a880:	300f883a 	mov	r7,r6
8110a884:	280d883a 	mov	r6,r5
8110a888:	200b883a 	mov	r5,r4
8110a88c:	11000017 	ldw	r4,0(r2)
8110a890:	dfc00115 	stw	ra,4(sp)
8110a894:	110a7a40 	call	8110a7a4 <_fwrite_r>
8110a898:	dfc00117 	ldw	ra,4(sp)
8110a89c:	dec00204 	addi	sp,sp,8
8110a8a0:	f800283a 	ret

8110a8a4 <__smakebuf_r>:
8110a8a4:	2880030b 	ldhu	r2,12(r5)
8110a8a8:	10c0008c 	andi	r3,r2,2
8110a8ac:	1800411e 	bne	r3,zero,8110a9b4 <__smakebuf_r+0x110>
8110a8b0:	deffec04 	addi	sp,sp,-80
8110a8b4:	dc000f15 	stw	r16,60(sp)
8110a8b8:	2821883a 	mov	r16,r5
8110a8bc:	2940038f 	ldh	r5,14(r5)
8110a8c0:	dc401015 	stw	r17,64(sp)
8110a8c4:	dfc01315 	stw	ra,76(sp)
8110a8c8:	dcc01215 	stw	r19,72(sp)
8110a8cc:	dc801115 	stw	r18,68(sp)
8110a8d0:	2023883a 	mov	r17,r4
8110a8d4:	28001c16 	blt	r5,zero,8110a948 <__smakebuf_r+0xa4>
8110a8d8:	d80d883a 	mov	r6,sp
8110a8dc:	110a7480 	call	8110a748 <_fstat_r>
8110a8e0:	10001816 	blt	r2,zero,8110a944 <__smakebuf_r+0xa0>
8110a8e4:	d8800117 	ldw	r2,4(sp)
8110a8e8:	00e00014 	movui	r3,32768
8110a8ec:	10bc000c 	andi	r2,r2,61440
8110a8f0:	14c80020 	cmpeqi	r19,r2,8192
8110a8f4:	10c03726 	beq	r2,r3,8110a9d4 <__smakebuf_r+0x130>
8110a8f8:	80c0030b 	ldhu	r3,12(r16)
8110a8fc:	18c20014 	ori	r3,r3,2048
8110a900:	80c0030d 	sth	r3,12(r16)
8110a904:	00c80004 	movi	r3,8192
8110a908:	10c0521e 	bne	r2,r3,8110aa54 <__smakebuf_r+0x1b0>
8110a90c:	8140038f 	ldh	r5,14(r16)
8110a910:	8809883a 	mov	r4,r17
8110a914:	1114af00 	call	81114af0 <_isatty_r>
8110a918:	10004c26 	beq	r2,zero,8110aa4c <__smakebuf_r+0x1a8>
8110a91c:	8080030b 	ldhu	r2,12(r16)
8110a920:	80c010c4 	addi	r3,r16,67
8110a924:	80c00015 	stw	r3,0(r16)
8110a928:	10800054 	ori	r2,r2,1
8110a92c:	8080030d 	sth	r2,12(r16)
8110a930:	00800044 	movi	r2,1
8110a934:	80c00415 	stw	r3,16(r16)
8110a938:	80800515 	stw	r2,20(r16)
8110a93c:	04810004 	movi	r18,1024
8110a940:	00000706 	br	8110a960 <__smakebuf_r+0xbc>
8110a944:	8080030b 	ldhu	r2,12(r16)
8110a948:	10c0200c 	andi	r3,r2,128
8110a94c:	18001f1e 	bne	r3,zero,8110a9cc <__smakebuf_r+0x128>
8110a950:	04810004 	movi	r18,1024
8110a954:	10820014 	ori	r2,r2,2048
8110a958:	8080030d 	sth	r2,12(r16)
8110a95c:	0027883a 	mov	r19,zero
8110a960:	900b883a 	mov	r5,r18
8110a964:	8809883a 	mov	r4,r17
8110a968:	110aa600 	call	8110aa60 <_malloc_r>
8110a96c:	10002c26 	beq	r2,zero,8110aa20 <__smakebuf_r+0x17c>
8110a970:	80c0030b 	ldhu	r3,12(r16)
8110a974:	01204474 	movhi	r4,33041
8110a978:	210e7504 	addi	r4,r4,14804
8110a97c:	89000f15 	stw	r4,60(r17)
8110a980:	18c02014 	ori	r3,r3,128
8110a984:	80c0030d 	sth	r3,12(r16)
8110a988:	80800015 	stw	r2,0(r16)
8110a98c:	80800415 	stw	r2,16(r16)
8110a990:	84800515 	stw	r18,20(r16)
8110a994:	98001a1e 	bne	r19,zero,8110aa00 <__smakebuf_r+0x15c>
8110a998:	dfc01317 	ldw	ra,76(sp)
8110a99c:	dcc01217 	ldw	r19,72(sp)
8110a9a0:	dc801117 	ldw	r18,68(sp)
8110a9a4:	dc401017 	ldw	r17,64(sp)
8110a9a8:	dc000f17 	ldw	r16,60(sp)
8110a9ac:	dec01404 	addi	sp,sp,80
8110a9b0:	f800283a 	ret
8110a9b4:	288010c4 	addi	r2,r5,67
8110a9b8:	28800015 	stw	r2,0(r5)
8110a9bc:	28800415 	stw	r2,16(r5)
8110a9c0:	00800044 	movi	r2,1
8110a9c4:	28800515 	stw	r2,20(r5)
8110a9c8:	f800283a 	ret
8110a9cc:	04801004 	movi	r18,64
8110a9d0:	003fe006 	br	8110a954 <__reset+0xfb0ea954>
8110a9d4:	81000a17 	ldw	r4,40(r16)
8110a9d8:	00e04474 	movhi	r3,33041
8110a9dc:	18eeba04 	addi	r3,r3,-17688
8110a9e0:	20ffc51e 	bne	r4,r3,8110a8f8 <__reset+0xfb0ea8f8>
8110a9e4:	8080030b 	ldhu	r2,12(r16)
8110a9e8:	04810004 	movi	r18,1024
8110a9ec:	84801315 	stw	r18,76(r16)
8110a9f0:	1484b03a 	or	r2,r2,r18
8110a9f4:	8080030d 	sth	r2,12(r16)
8110a9f8:	0027883a 	mov	r19,zero
8110a9fc:	003fd806 	br	8110a960 <__reset+0xfb0ea960>
8110aa00:	8140038f 	ldh	r5,14(r16)
8110aa04:	8809883a 	mov	r4,r17
8110aa08:	1114af00 	call	81114af0 <_isatty_r>
8110aa0c:	103fe226 	beq	r2,zero,8110a998 <__reset+0xfb0ea998>
8110aa10:	8080030b 	ldhu	r2,12(r16)
8110aa14:	10800054 	ori	r2,r2,1
8110aa18:	8080030d 	sth	r2,12(r16)
8110aa1c:	003fde06 	br	8110a998 <__reset+0xfb0ea998>
8110aa20:	8080030b 	ldhu	r2,12(r16)
8110aa24:	10c0800c 	andi	r3,r2,512
8110aa28:	183fdb1e 	bne	r3,zero,8110a998 <__reset+0xfb0ea998>
8110aa2c:	10800094 	ori	r2,r2,2
8110aa30:	80c010c4 	addi	r3,r16,67
8110aa34:	8080030d 	sth	r2,12(r16)
8110aa38:	00800044 	movi	r2,1
8110aa3c:	80c00015 	stw	r3,0(r16)
8110aa40:	80c00415 	stw	r3,16(r16)
8110aa44:	80800515 	stw	r2,20(r16)
8110aa48:	003fd306 	br	8110a998 <__reset+0xfb0ea998>
8110aa4c:	04810004 	movi	r18,1024
8110aa50:	003fc306 	br	8110a960 <__reset+0xfb0ea960>
8110aa54:	0027883a 	mov	r19,zero
8110aa58:	04810004 	movi	r18,1024
8110aa5c:	003fc006 	br	8110a960 <__reset+0xfb0ea960>

8110aa60 <_malloc_r>:
8110aa60:	defff504 	addi	sp,sp,-44
8110aa64:	dc800315 	stw	r18,12(sp)
8110aa68:	dfc00a15 	stw	ra,40(sp)
8110aa6c:	df000915 	stw	fp,36(sp)
8110aa70:	ddc00815 	stw	r23,32(sp)
8110aa74:	dd800715 	stw	r22,28(sp)
8110aa78:	dd400615 	stw	r21,24(sp)
8110aa7c:	dd000515 	stw	r20,20(sp)
8110aa80:	dcc00415 	stw	r19,16(sp)
8110aa84:	dc400215 	stw	r17,8(sp)
8110aa88:	dc000115 	stw	r16,4(sp)
8110aa8c:	288002c4 	addi	r2,r5,11
8110aa90:	00c00584 	movi	r3,22
8110aa94:	2025883a 	mov	r18,r4
8110aa98:	18807f2e 	bgeu	r3,r2,8110ac98 <_malloc_r+0x238>
8110aa9c:	047ffe04 	movi	r17,-8
8110aaa0:	1462703a 	and	r17,r2,r17
8110aaa4:	8800a316 	blt	r17,zero,8110ad34 <_malloc_r+0x2d4>
8110aaa8:	8940a236 	bltu	r17,r5,8110ad34 <_malloc_r+0x2d4>
8110aaac:	11205dc0 	call	811205dc <__malloc_lock>
8110aab0:	00807dc4 	movi	r2,503
8110aab4:	1441e92e 	bgeu	r2,r17,8110b25c <_malloc_r+0x7fc>
8110aab8:	8804d27a 	srli	r2,r17,9
8110aabc:	1000a126 	beq	r2,zero,8110ad44 <_malloc_r+0x2e4>
8110aac0:	00c00104 	movi	r3,4
8110aac4:	18811e36 	bltu	r3,r2,8110af40 <_malloc_r+0x4e0>
8110aac8:	8804d1ba 	srli	r2,r17,6
8110aacc:	12000e44 	addi	r8,r2,57
8110aad0:	11c00e04 	addi	r7,r2,56
8110aad4:	4209883a 	add	r4,r8,r8
8110aad8:	04e044f4 	movhi	r19,33043
8110aadc:	2109883a 	add	r4,r4,r4
8110aae0:	9cd14604 	addi	r19,r19,17688
8110aae4:	2109883a 	add	r4,r4,r4
8110aae8:	9909883a 	add	r4,r19,r4
8110aaec:	24000117 	ldw	r16,4(r4)
8110aaf0:	213ffe04 	addi	r4,r4,-8
8110aaf4:	24009726 	beq	r4,r16,8110ad54 <_malloc_r+0x2f4>
8110aaf8:	80800117 	ldw	r2,4(r16)
8110aafc:	01bfff04 	movi	r6,-4
8110ab00:	014003c4 	movi	r5,15
8110ab04:	1184703a 	and	r2,r2,r6
8110ab08:	1447c83a 	sub	r3,r2,r17
8110ab0c:	28c00716 	blt	r5,r3,8110ab2c <_malloc_r+0xcc>
8110ab10:	1800920e 	bge	r3,zero,8110ad5c <_malloc_r+0x2fc>
8110ab14:	84000317 	ldw	r16,12(r16)
8110ab18:	24008e26 	beq	r4,r16,8110ad54 <_malloc_r+0x2f4>
8110ab1c:	80800117 	ldw	r2,4(r16)
8110ab20:	1184703a 	and	r2,r2,r6
8110ab24:	1447c83a 	sub	r3,r2,r17
8110ab28:	28fff90e 	bge	r5,r3,8110ab10 <__reset+0xfb0eab10>
8110ab2c:	3809883a 	mov	r4,r7
8110ab30:	01a044f4 	movhi	r6,33043
8110ab34:	9c000417 	ldw	r16,16(r19)
8110ab38:	31914604 	addi	r6,r6,17688
8110ab3c:	32000204 	addi	r8,r6,8
8110ab40:	82013426 	beq	r16,r8,8110b014 <_malloc_r+0x5b4>
8110ab44:	80c00117 	ldw	r3,4(r16)
8110ab48:	00bfff04 	movi	r2,-4
8110ab4c:	188e703a 	and	r7,r3,r2
8110ab50:	3c45c83a 	sub	r2,r7,r17
8110ab54:	00c003c4 	movi	r3,15
8110ab58:	18811f16 	blt	r3,r2,8110afd8 <_malloc_r+0x578>
8110ab5c:	32000515 	stw	r8,20(r6)
8110ab60:	32000415 	stw	r8,16(r6)
8110ab64:	10007f0e 	bge	r2,zero,8110ad64 <_malloc_r+0x304>
8110ab68:	00807fc4 	movi	r2,511
8110ab6c:	11c0fd36 	bltu	r2,r7,8110af64 <_malloc_r+0x504>
8110ab70:	3806d0fa 	srli	r3,r7,3
8110ab74:	01c00044 	movi	r7,1
8110ab78:	30800117 	ldw	r2,4(r6)
8110ab7c:	19400044 	addi	r5,r3,1
8110ab80:	294b883a 	add	r5,r5,r5
8110ab84:	1807d0ba 	srai	r3,r3,2
8110ab88:	294b883a 	add	r5,r5,r5
8110ab8c:	294b883a 	add	r5,r5,r5
8110ab90:	298b883a 	add	r5,r5,r6
8110ab94:	38c6983a 	sll	r3,r7,r3
8110ab98:	29c00017 	ldw	r7,0(r5)
8110ab9c:	2a7ffe04 	addi	r9,r5,-8
8110aba0:	1886b03a 	or	r3,r3,r2
8110aba4:	82400315 	stw	r9,12(r16)
8110aba8:	81c00215 	stw	r7,8(r16)
8110abac:	30c00115 	stw	r3,4(r6)
8110abb0:	2c000015 	stw	r16,0(r5)
8110abb4:	3c000315 	stw	r16,12(r7)
8110abb8:	2005d0ba 	srai	r2,r4,2
8110abbc:	01400044 	movi	r5,1
8110abc0:	288a983a 	sll	r5,r5,r2
8110abc4:	19406f36 	bltu	r3,r5,8110ad84 <_malloc_r+0x324>
8110abc8:	28c4703a 	and	r2,r5,r3
8110abcc:	10000a1e 	bne	r2,zero,8110abf8 <_malloc_r+0x198>
8110abd0:	00bfff04 	movi	r2,-4
8110abd4:	294b883a 	add	r5,r5,r5
8110abd8:	2088703a 	and	r4,r4,r2
8110abdc:	28c4703a 	and	r2,r5,r3
8110abe0:	21000104 	addi	r4,r4,4
8110abe4:	1000041e 	bne	r2,zero,8110abf8 <_malloc_r+0x198>
8110abe8:	294b883a 	add	r5,r5,r5
8110abec:	28c4703a 	and	r2,r5,r3
8110abf0:	21000104 	addi	r4,r4,4
8110abf4:	103ffc26 	beq	r2,zero,8110abe8 <__reset+0xfb0eabe8>
8110abf8:	02bfff04 	movi	r10,-4
8110abfc:	024003c4 	movi	r9,15
8110ac00:	21800044 	addi	r6,r4,1
8110ac04:	318d883a 	add	r6,r6,r6
8110ac08:	318d883a 	add	r6,r6,r6
8110ac0c:	318d883a 	add	r6,r6,r6
8110ac10:	998d883a 	add	r6,r19,r6
8110ac14:	333ffe04 	addi	r12,r6,-8
8110ac18:	2017883a 	mov	r11,r4
8110ac1c:	31800104 	addi	r6,r6,4
8110ac20:	34000017 	ldw	r16,0(r6)
8110ac24:	31fffd04 	addi	r7,r6,-12
8110ac28:	81c0041e 	bne	r16,r7,8110ac3c <_malloc_r+0x1dc>
8110ac2c:	0000fb06 	br	8110b01c <_malloc_r+0x5bc>
8110ac30:	1801030e 	bge	r3,zero,8110b040 <_malloc_r+0x5e0>
8110ac34:	84000317 	ldw	r16,12(r16)
8110ac38:	81c0f826 	beq	r16,r7,8110b01c <_malloc_r+0x5bc>
8110ac3c:	80800117 	ldw	r2,4(r16)
8110ac40:	1284703a 	and	r2,r2,r10
8110ac44:	1447c83a 	sub	r3,r2,r17
8110ac48:	48fff90e 	bge	r9,r3,8110ac30 <__reset+0xfb0eac30>
8110ac4c:	80800317 	ldw	r2,12(r16)
8110ac50:	81000217 	ldw	r4,8(r16)
8110ac54:	89400054 	ori	r5,r17,1
8110ac58:	81400115 	stw	r5,4(r16)
8110ac5c:	20800315 	stw	r2,12(r4)
8110ac60:	11000215 	stw	r4,8(r2)
8110ac64:	8463883a 	add	r17,r16,r17
8110ac68:	9c400515 	stw	r17,20(r19)
8110ac6c:	9c400415 	stw	r17,16(r19)
8110ac70:	18800054 	ori	r2,r3,1
8110ac74:	88800115 	stw	r2,4(r17)
8110ac78:	8a000315 	stw	r8,12(r17)
8110ac7c:	8a000215 	stw	r8,8(r17)
8110ac80:	88e3883a 	add	r17,r17,r3
8110ac84:	88c00015 	stw	r3,0(r17)
8110ac88:	9009883a 	mov	r4,r18
8110ac8c:	11206fc0 	call	811206fc <__malloc_unlock>
8110ac90:	80800204 	addi	r2,r16,8
8110ac94:	00001b06 	br	8110ad04 <_malloc_r+0x2a4>
8110ac98:	04400404 	movi	r17,16
8110ac9c:	89402536 	bltu	r17,r5,8110ad34 <_malloc_r+0x2d4>
8110aca0:	11205dc0 	call	811205dc <__malloc_lock>
8110aca4:	00800184 	movi	r2,6
8110aca8:	01000084 	movi	r4,2
8110acac:	04e044f4 	movhi	r19,33043
8110acb0:	1085883a 	add	r2,r2,r2
8110acb4:	9cd14604 	addi	r19,r19,17688
8110acb8:	1085883a 	add	r2,r2,r2
8110acbc:	9885883a 	add	r2,r19,r2
8110acc0:	14000117 	ldw	r16,4(r2)
8110acc4:	10fffe04 	addi	r3,r2,-8
8110acc8:	80c0d926 	beq	r16,r3,8110b030 <_malloc_r+0x5d0>
8110accc:	80c00117 	ldw	r3,4(r16)
8110acd0:	81000317 	ldw	r4,12(r16)
8110acd4:	00bfff04 	movi	r2,-4
8110acd8:	1884703a 	and	r2,r3,r2
8110acdc:	81400217 	ldw	r5,8(r16)
8110ace0:	8085883a 	add	r2,r16,r2
8110ace4:	10c00117 	ldw	r3,4(r2)
8110ace8:	29000315 	stw	r4,12(r5)
8110acec:	21400215 	stw	r5,8(r4)
8110acf0:	18c00054 	ori	r3,r3,1
8110acf4:	10c00115 	stw	r3,4(r2)
8110acf8:	9009883a 	mov	r4,r18
8110acfc:	11206fc0 	call	811206fc <__malloc_unlock>
8110ad00:	80800204 	addi	r2,r16,8
8110ad04:	dfc00a17 	ldw	ra,40(sp)
8110ad08:	df000917 	ldw	fp,36(sp)
8110ad0c:	ddc00817 	ldw	r23,32(sp)
8110ad10:	dd800717 	ldw	r22,28(sp)
8110ad14:	dd400617 	ldw	r21,24(sp)
8110ad18:	dd000517 	ldw	r20,20(sp)
8110ad1c:	dcc00417 	ldw	r19,16(sp)
8110ad20:	dc800317 	ldw	r18,12(sp)
8110ad24:	dc400217 	ldw	r17,8(sp)
8110ad28:	dc000117 	ldw	r16,4(sp)
8110ad2c:	dec00b04 	addi	sp,sp,44
8110ad30:	f800283a 	ret
8110ad34:	00800304 	movi	r2,12
8110ad38:	90800015 	stw	r2,0(r18)
8110ad3c:	0005883a 	mov	r2,zero
8110ad40:	003ff006 	br	8110ad04 <__reset+0xfb0ead04>
8110ad44:	01002004 	movi	r4,128
8110ad48:	02001004 	movi	r8,64
8110ad4c:	01c00fc4 	movi	r7,63
8110ad50:	003f6106 	br	8110aad8 <__reset+0xfb0eaad8>
8110ad54:	4009883a 	mov	r4,r8
8110ad58:	003f7506 	br	8110ab30 <__reset+0xfb0eab30>
8110ad5c:	81000317 	ldw	r4,12(r16)
8110ad60:	003fde06 	br	8110acdc <__reset+0xfb0eacdc>
8110ad64:	81c5883a 	add	r2,r16,r7
8110ad68:	11400117 	ldw	r5,4(r2)
8110ad6c:	9009883a 	mov	r4,r18
8110ad70:	29400054 	ori	r5,r5,1
8110ad74:	11400115 	stw	r5,4(r2)
8110ad78:	11206fc0 	call	811206fc <__malloc_unlock>
8110ad7c:	80800204 	addi	r2,r16,8
8110ad80:	003fe006 	br	8110ad04 <__reset+0xfb0ead04>
8110ad84:	9c000217 	ldw	r16,8(r19)
8110ad88:	00bfff04 	movi	r2,-4
8110ad8c:	85800117 	ldw	r22,4(r16)
8110ad90:	b0ac703a 	and	r22,r22,r2
8110ad94:	b4400336 	bltu	r22,r17,8110ada4 <_malloc_r+0x344>
8110ad98:	b445c83a 	sub	r2,r22,r17
8110ad9c:	00c003c4 	movi	r3,15
8110ada0:	18805d16 	blt	r3,r2,8110af18 <_malloc_r+0x4b8>
8110ada4:	05e044f4 	movhi	r23,33043
8110ada8:	00a044f4 	movhi	r2,33043
8110adac:	1097b604 	addi	r2,r2,24280
8110adb0:	bdd76504 	addi	r23,r23,23956
8110adb4:	15400017 	ldw	r21,0(r2)
8110adb8:	b8c00017 	ldw	r3,0(r23)
8110adbc:	00bfffc4 	movi	r2,-1
8110adc0:	858d883a 	add	r6,r16,r22
8110adc4:	8d6b883a 	add	r21,r17,r21
8110adc8:	1880ea26 	beq	r3,r2,8110b174 <_malloc_r+0x714>
8110adcc:	ad4403c4 	addi	r21,r21,4111
8110add0:	00bc0004 	movi	r2,-4096
8110add4:	a8aa703a 	and	r21,r21,r2
8110add8:	a80b883a 	mov	r5,r21
8110addc:	9009883a 	mov	r4,r18
8110ade0:	d9800015 	stw	r6,0(sp)
8110ade4:	110b88c0 	call	8110b88c <_sbrk_r>
8110ade8:	1029883a 	mov	r20,r2
8110adec:	00bfffc4 	movi	r2,-1
8110adf0:	d9800017 	ldw	r6,0(sp)
8110adf4:	a080e826 	beq	r20,r2,8110b198 <_malloc_r+0x738>
8110adf8:	a180a636 	bltu	r20,r6,8110b094 <_malloc_r+0x634>
8110adfc:	072044f4 	movhi	fp,33043
8110ae00:	e717e804 	addi	fp,fp,24480
8110ae04:	e0800017 	ldw	r2,0(fp)
8110ae08:	a887883a 	add	r3,r21,r2
8110ae0c:	e0c00015 	stw	r3,0(fp)
8110ae10:	3500e626 	beq	r6,r20,8110b1ac <_malloc_r+0x74c>
8110ae14:	b9000017 	ldw	r4,0(r23)
8110ae18:	00bfffc4 	movi	r2,-1
8110ae1c:	2080ee26 	beq	r4,r2,8110b1d8 <_malloc_r+0x778>
8110ae20:	a185c83a 	sub	r2,r20,r6
8110ae24:	10c5883a 	add	r2,r2,r3
8110ae28:	e0800015 	stw	r2,0(fp)
8110ae2c:	a0c001cc 	andi	r3,r20,7
8110ae30:	1800bc26 	beq	r3,zero,8110b124 <_malloc_r+0x6c4>
8110ae34:	a0e9c83a 	sub	r20,r20,r3
8110ae38:	00840204 	movi	r2,4104
8110ae3c:	a5000204 	addi	r20,r20,8
8110ae40:	10c7c83a 	sub	r3,r2,r3
8110ae44:	a545883a 	add	r2,r20,r21
8110ae48:	1083ffcc 	andi	r2,r2,4095
8110ae4c:	18abc83a 	sub	r21,r3,r2
8110ae50:	a80b883a 	mov	r5,r21
8110ae54:	9009883a 	mov	r4,r18
8110ae58:	110b88c0 	call	8110b88c <_sbrk_r>
8110ae5c:	00ffffc4 	movi	r3,-1
8110ae60:	10c0e126 	beq	r2,r3,8110b1e8 <_malloc_r+0x788>
8110ae64:	1505c83a 	sub	r2,r2,r20
8110ae68:	1545883a 	add	r2,r2,r21
8110ae6c:	10800054 	ori	r2,r2,1
8110ae70:	e0c00017 	ldw	r3,0(fp)
8110ae74:	9d000215 	stw	r20,8(r19)
8110ae78:	a0800115 	stw	r2,4(r20)
8110ae7c:	a8c7883a 	add	r3,r21,r3
8110ae80:	e0c00015 	stw	r3,0(fp)
8110ae84:	84c00e26 	beq	r16,r19,8110aec0 <_malloc_r+0x460>
8110ae88:	018003c4 	movi	r6,15
8110ae8c:	3580a72e 	bgeu	r6,r22,8110b12c <_malloc_r+0x6cc>
8110ae90:	81400117 	ldw	r5,4(r16)
8110ae94:	013ffe04 	movi	r4,-8
8110ae98:	b0bffd04 	addi	r2,r22,-12
8110ae9c:	1104703a 	and	r2,r2,r4
8110aea0:	2900004c 	andi	r4,r5,1
8110aea4:	2088b03a 	or	r4,r4,r2
8110aea8:	81000115 	stw	r4,4(r16)
8110aeac:	01400144 	movi	r5,5
8110aeb0:	8089883a 	add	r4,r16,r2
8110aeb4:	21400115 	stw	r5,4(r4)
8110aeb8:	21400215 	stw	r5,8(r4)
8110aebc:	3080cd36 	bltu	r6,r2,8110b1f4 <_malloc_r+0x794>
8110aec0:	00a044f4 	movhi	r2,33043
8110aec4:	1097b504 	addi	r2,r2,24276
8110aec8:	11000017 	ldw	r4,0(r2)
8110aecc:	20c0012e 	bgeu	r4,r3,8110aed4 <_malloc_r+0x474>
8110aed0:	10c00015 	stw	r3,0(r2)
8110aed4:	00a044f4 	movhi	r2,33043
8110aed8:	1097b404 	addi	r2,r2,24272
8110aedc:	11000017 	ldw	r4,0(r2)
8110aee0:	9c000217 	ldw	r16,8(r19)
8110aee4:	20c0012e 	bgeu	r4,r3,8110aeec <_malloc_r+0x48c>
8110aee8:	10c00015 	stw	r3,0(r2)
8110aeec:	80c00117 	ldw	r3,4(r16)
8110aef0:	00bfff04 	movi	r2,-4
8110aef4:	1886703a 	and	r3,r3,r2
8110aef8:	1c45c83a 	sub	r2,r3,r17
8110aefc:	1c400236 	bltu	r3,r17,8110af08 <_malloc_r+0x4a8>
8110af00:	00c003c4 	movi	r3,15
8110af04:	18800416 	blt	r3,r2,8110af18 <_malloc_r+0x4b8>
8110af08:	9009883a 	mov	r4,r18
8110af0c:	11206fc0 	call	811206fc <__malloc_unlock>
8110af10:	0005883a 	mov	r2,zero
8110af14:	003f7b06 	br	8110ad04 <__reset+0xfb0ead04>
8110af18:	88c00054 	ori	r3,r17,1
8110af1c:	80c00115 	stw	r3,4(r16)
8110af20:	8463883a 	add	r17,r16,r17
8110af24:	10800054 	ori	r2,r2,1
8110af28:	9c400215 	stw	r17,8(r19)
8110af2c:	88800115 	stw	r2,4(r17)
8110af30:	9009883a 	mov	r4,r18
8110af34:	11206fc0 	call	811206fc <__malloc_unlock>
8110af38:	80800204 	addi	r2,r16,8
8110af3c:	003f7106 	br	8110ad04 <__reset+0xfb0ead04>
8110af40:	00c00504 	movi	r3,20
8110af44:	18804a2e 	bgeu	r3,r2,8110b070 <_malloc_r+0x610>
8110af48:	00c01504 	movi	r3,84
8110af4c:	18806e36 	bltu	r3,r2,8110b108 <_malloc_r+0x6a8>
8110af50:	8804d33a 	srli	r2,r17,12
8110af54:	12001bc4 	addi	r8,r2,111
8110af58:	11c01b84 	addi	r7,r2,110
8110af5c:	4209883a 	add	r4,r8,r8
8110af60:	003edd06 	br	8110aad8 <__reset+0xfb0eaad8>
8110af64:	3804d27a 	srli	r2,r7,9
8110af68:	00c00104 	movi	r3,4
8110af6c:	1880442e 	bgeu	r3,r2,8110b080 <_malloc_r+0x620>
8110af70:	00c00504 	movi	r3,20
8110af74:	18808136 	bltu	r3,r2,8110b17c <_malloc_r+0x71c>
8110af78:	11401704 	addi	r5,r2,92
8110af7c:	10c016c4 	addi	r3,r2,91
8110af80:	294b883a 	add	r5,r5,r5
8110af84:	294b883a 	add	r5,r5,r5
8110af88:	294b883a 	add	r5,r5,r5
8110af8c:	994b883a 	add	r5,r19,r5
8110af90:	28800017 	ldw	r2,0(r5)
8110af94:	01a044f4 	movhi	r6,33043
8110af98:	297ffe04 	addi	r5,r5,-8
8110af9c:	31914604 	addi	r6,r6,17688
8110afa0:	28806526 	beq	r5,r2,8110b138 <_malloc_r+0x6d8>
8110afa4:	01bfff04 	movi	r6,-4
8110afa8:	10c00117 	ldw	r3,4(r2)
8110afac:	1986703a 	and	r3,r3,r6
8110afb0:	38c0022e 	bgeu	r7,r3,8110afbc <_malloc_r+0x55c>
8110afb4:	10800217 	ldw	r2,8(r2)
8110afb8:	28bffb1e 	bne	r5,r2,8110afa8 <__reset+0xfb0eafa8>
8110afbc:	11400317 	ldw	r5,12(r2)
8110afc0:	98c00117 	ldw	r3,4(r19)
8110afc4:	81400315 	stw	r5,12(r16)
8110afc8:	80800215 	stw	r2,8(r16)
8110afcc:	2c000215 	stw	r16,8(r5)
8110afd0:	14000315 	stw	r16,12(r2)
8110afd4:	003ef806 	br	8110abb8 <__reset+0xfb0eabb8>
8110afd8:	88c00054 	ori	r3,r17,1
8110afdc:	80c00115 	stw	r3,4(r16)
8110afe0:	8463883a 	add	r17,r16,r17
8110afe4:	34400515 	stw	r17,20(r6)
8110afe8:	34400415 	stw	r17,16(r6)
8110afec:	10c00054 	ori	r3,r2,1
8110aff0:	8a000315 	stw	r8,12(r17)
8110aff4:	8a000215 	stw	r8,8(r17)
8110aff8:	88c00115 	stw	r3,4(r17)
8110affc:	88a3883a 	add	r17,r17,r2
8110b000:	88800015 	stw	r2,0(r17)
8110b004:	9009883a 	mov	r4,r18
8110b008:	11206fc0 	call	811206fc <__malloc_unlock>
8110b00c:	80800204 	addi	r2,r16,8
8110b010:	003f3c06 	br	8110ad04 <__reset+0xfb0ead04>
8110b014:	30c00117 	ldw	r3,4(r6)
8110b018:	003ee706 	br	8110abb8 <__reset+0xfb0eabb8>
8110b01c:	5ac00044 	addi	r11,r11,1
8110b020:	588000cc 	andi	r2,r11,3
8110b024:	31800204 	addi	r6,r6,8
8110b028:	103efd1e 	bne	r2,zero,8110ac20 <__reset+0xfb0eac20>
8110b02c:	00002406 	br	8110b0c0 <_malloc_r+0x660>
8110b030:	14000317 	ldw	r16,12(r2)
8110b034:	143f251e 	bne	r2,r16,8110accc <__reset+0xfb0eaccc>
8110b038:	21000084 	addi	r4,r4,2
8110b03c:	003ebc06 	br	8110ab30 <__reset+0xfb0eab30>
8110b040:	8085883a 	add	r2,r16,r2
8110b044:	10c00117 	ldw	r3,4(r2)
8110b048:	81000317 	ldw	r4,12(r16)
8110b04c:	81400217 	ldw	r5,8(r16)
8110b050:	18c00054 	ori	r3,r3,1
8110b054:	10c00115 	stw	r3,4(r2)
8110b058:	29000315 	stw	r4,12(r5)
8110b05c:	21400215 	stw	r5,8(r4)
8110b060:	9009883a 	mov	r4,r18
8110b064:	11206fc0 	call	811206fc <__malloc_unlock>
8110b068:	80800204 	addi	r2,r16,8
8110b06c:	003f2506 	br	8110ad04 <__reset+0xfb0ead04>
8110b070:	12001704 	addi	r8,r2,92
8110b074:	11c016c4 	addi	r7,r2,91
8110b078:	4209883a 	add	r4,r8,r8
8110b07c:	003e9606 	br	8110aad8 <__reset+0xfb0eaad8>
8110b080:	3804d1ba 	srli	r2,r7,6
8110b084:	11400e44 	addi	r5,r2,57
8110b088:	10c00e04 	addi	r3,r2,56
8110b08c:	294b883a 	add	r5,r5,r5
8110b090:	003fbc06 	br	8110af84 <__reset+0xfb0eaf84>
8110b094:	84ff5926 	beq	r16,r19,8110adfc <__reset+0xfb0eadfc>
8110b098:	00a044f4 	movhi	r2,33043
8110b09c:	10914604 	addi	r2,r2,17688
8110b0a0:	14000217 	ldw	r16,8(r2)
8110b0a4:	00bfff04 	movi	r2,-4
8110b0a8:	80c00117 	ldw	r3,4(r16)
8110b0ac:	1886703a 	and	r3,r3,r2
8110b0b0:	003f9106 	br	8110aef8 <__reset+0xfb0eaef8>
8110b0b4:	60800217 	ldw	r2,8(r12)
8110b0b8:	213fffc4 	addi	r4,r4,-1
8110b0bc:	1300651e 	bne	r2,r12,8110b254 <_malloc_r+0x7f4>
8110b0c0:	208000cc 	andi	r2,r4,3
8110b0c4:	633ffe04 	addi	r12,r12,-8
8110b0c8:	103ffa1e 	bne	r2,zero,8110b0b4 <__reset+0xfb0eb0b4>
8110b0cc:	98800117 	ldw	r2,4(r19)
8110b0d0:	0146303a 	nor	r3,zero,r5
8110b0d4:	1884703a 	and	r2,r3,r2
8110b0d8:	98800115 	stw	r2,4(r19)
8110b0dc:	294b883a 	add	r5,r5,r5
8110b0e0:	117f2836 	bltu	r2,r5,8110ad84 <__reset+0xfb0ead84>
8110b0e4:	283f2726 	beq	r5,zero,8110ad84 <__reset+0xfb0ead84>
8110b0e8:	2886703a 	and	r3,r5,r2
8110b0ec:	5809883a 	mov	r4,r11
8110b0f0:	183ec31e 	bne	r3,zero,8110ac00 <__reset+0xfb0eac00>
8110b0f4:	294b883a 	add	r5,r5,r5
8110b0f8:	2886703a 	and	r3,r5,r2
8110b0fc:	21000104 	addi	r4,r4,4
8110b100:	183ffc26 	beq	r3,zero,8110b0f4 <__reset+0xfb0eb0f4>
8110b104:	003ebe06 	br	8110ac00 <__reset+0xfb0eac00>
8110b108:	00c05504 	movi	r3,340
8110b10c:	18801236 	bltu	r3,r2,8110b158 <_malloc_r+0x6f8>
8110b110:	8804d3fa 	srli	r2,r17,15
8110b114:	12001e04 	addi	r8,r2,120
8110b118:	11c01dc4 	addi	r7,r2,119
8110b11c:	4209883a 	add	r4,r8,r8
8110b120:	003e6d06 	br	8110aad8 <__reset+0xfb0eaad8>
8110b124:	00c40004 	movi	r3,4096
8110b128:	003f4606 	br	8110ae44 <__reset+0xfb0eae44>
8110b12c:	00800044 	movi	r2,1
8110b130:	a0800115 	stw	r2,4(r20)
8110b134:	003f7406 	br	8110af08 <__reset+0xfb0eaf08>
8110b138:	1805d0ba 	srai	r2,r3,2
8110b13c:	01c00044 	movi	r7,1
8110b140:	30c00117 	ldw	r3,4(r6)
8110b144:	388e983a 	sll	r7,r7,r2
8110b148:	2805883a 	mov	r2,r5
8110b14c:	38c6b03a 	or	r3,r7,r3
8110b150:	30c00115 	stw	r3,4(r6)
8110b154:	003f9b06 	br	8110afc4 <__reset+0xfb0eafc4>
8110b158:	00c15504 	movi	r3,1364
8110b15c:	18801a36 	bltu	r3,r2,8110b1c8 <_malloc_r+0x768>
8110b160:	8804d4ba 	srli	r2,r17,18
8110b164:	12001f44 	addi	r8,r2,125
8110b168:	11c01f04 	addi	r7,r2,124
8110b16c:	4209883a 	add	r4,r8,r8
8110b170:	003e5906 	br	8110aad8 <__reset+0xfb0eaad8>
8110b174:	ad400404 	addi	r21,r21,16
8110b178:	003f1706 	br	8110add8 <__reset+0xfb0eadd8>
8110b17c:	00c01504 	movi	r3,84
8110b180:	18802336 	bltu	r3,r2,8110b210 <_malloc_r+0x7b0>
8110b184:	3804d33a 	srli	r2,r7,12
8110b188:	11401bc4 	addi	r5,r2,111
8110b18c:	10c01b84 	addi	r3,r2,110
8110b190:	294b883a 	add	r5,r5,r5
8110b194:	003f7b06 	br	8110af84 <__reset+0xfb0eaf84>
8110b198:	9c000217 	ldw	r16,8(r19)
8110b19c:	00bfff04 	movi	r2,-4
8110b1a0:	80c00117 	ldw	r3,4(r16)
8110b1a4:	1886703a 	and	r3,r3,r2
8110b1a8:	003f5306 	br	8110aef8 <__reset+0xfb0eaef8>
8110b1ac:	3083ffcc 	andi	r2,r6,4095
8110b1b0:	103f181e 	bne	r2,zero,8110ae14 <__reset+0xfb0eae14>
8110b1b4:	99000217 	ldw	r4,8(r19)
8110b1b8:	b545883a 	add	r2,r22,r21
8110b1bc:	10800054 	ori	r2,r2,1
8110b1c0:	20800115 	stw	r2,4(r4)
8110b1c4:	003f3e06 	br	8110aec0 <__reset+0xfb0eaec0>
8110b1c8:	01003f84 	movi	r4,254
8110b1cc:	02001fc4 	movi	r8,127
8110b1d0:	01c01f84 	movi	r7,126
8110b1d4:	003e4006 	br	8110aad8 <__reset+0xfb0eaad8>
8110b1d8:	00a044f4 	movhi	r2,33043
8110b1dc:	10976504 	addi	r2,r2,23956
8110b1e0:	15000015 	stw	r20,0(r2)
8110b1e4:	003f1106 	br	8110ae2c <__reset+0xfb0eae2c>
8110b1e8:	00800044 	movi	r2,1
8110b1ec:	002b883a 	mov	r21,zero
8110b1f0:	003f1f06 	br	8110ae70 <__reset+0xfb0eae70>
8110b1f4:	81400204 	addi	r5,r16,8
8110b1f8:	9009883a 	mov	r4,r18
8110b1fc:	111419c0 	call	8111419c <_free_r>
8110b200:	00a044f4 	movhi	r2,33043
8110b204:	1097e804 	addi	r2,r2,24480
8110b208:	10c00017 	ldw	r3,0(r2)
8110b20c:	003f2c06 	br	8110aec0 <__reset+0xfb0eaec0>
8110b210:	00c05504 	movi	r3,340
8110b214:	18800536 	bltu	r3,r2,8110b22c <_malloc_r+0x7cc>
8110b218:	3804d3fa 	srli	r2,r7,15
8110b21c:	11401e04 	addi	r5,r2,120
8110b220:	10c01dc4 	addi	r3,r2,119
8110b224:	294b883a 	add	r5,r5,r5
8110b228:	003f5606 	br	8110af84 <__reset+0xfb0eaf84>
8110b22c:	00c15504 	movi	r3,1364
8110b230:	18800536 	bltu	r3,r2,8110b248 <_malloc_r+0x7e8>
8110b234:	3804d4ba 	srli	r2,r7,18
8110b238:	11401f44 	addi	r5,r2,125
8110b23c:	10c01f04 	addi	r3,r2,124
8110b240:	294b883a 	add	r5,r5,r5
8110b244:	003f4f06 	br	8110af84 <__reset+0xfb0eaf84>
8110b248:	01403f84 	movi	r5,254
8110b24c:	00c01f84 	movi	r3,126
8110b250:	003f4c06 	br	8110af84 <__reset+0xfb0eaf84>
8110b254:	98800117 	ldw	r2,4(r19)
8110b258:	003fa006 	br	8110b0dc <__reset+0xfb0eb0dc>
8110b25c:	8808d0fa 	srli	r4,r17,3
8110b260:	20800044 	addi	r2,r4,1
8110b264:	1085883a 	add	r2,r2,r2
8110b268:	003e9006 	br	8110acac <__reset+0xfb0eacac>

8110b26c <memcpy>:
8110b26c:	defffd04 	addi	sp,sp,-12
8110b270:	dfc00215 	stw	ra,8(sp)
8110b274:	dc400115 	stw	r17,4(sp)
8110b278:	dc000015 	stw	r16,0(sp)
8110b27c:	00c003c4 	movi	r3,15
8110b280:	2005883a 	mov	r2,r4
8110b284:	1980452e 	bgeu	r3,r6,8110b39c <memcpy+0x130>
8110b288:	2906b03a 	or	r3,r5,r4
8110b28c:	18c000cc 	andi	r3,r3,3
8110b290:	1800441e 	bne	r3,zero,8110b3a4 <memcpy+0x138>
8110b294:	347ffc04 	addi	r17,r6,-16
8110b298:	8822d13a 	srli	r17,r17,4
8110b29c:	28c00104 	addi	r3,r5,4
8110b2a0:	23400104 	addi	r13,r4,4
8110b2a4:	8820913a 	slli	r16,r17,4
8110b2a8:	2b000204 	addi	r12,r5,8
8110b2ac:	22c00204 	addi	r11,r4,8
8110b2b0:	84000504 	addi	r16,r16,20
8110b2b4:	2a800304 	addi	r10,r5,12
8110b2b8:	22400304 	addi	r9,r4,12
8110b2bc:	2c21883a 	add	r16,r5,r16
8110b2c0:	2811883a 	mov	r8,r5
8110b2c4:	200f883a 	mov	r7,r4
8110b2c8:	41000017 	ldw	r4,0(r8)
8110b2cc:	1fc00017 	ldw	ra,0(r3)
8110b2d0:	63c00017 	ldw	r15,0(r12)
8110b2d4:	39000015 	stw	r4,0(r7)
8110b2d8:	53800017 	ldw	r14,0(r10)
8110b2dc:	6fc00015 	stw	ra,0(r13)
8110b2e0:	5bc00015 	stw	r15,0(r11)
8110b2e4:	4b800015 	stw	r14,0(r9)
8110b2e8:	18c00404 	addi	r3,r3,16
8110b2ec:	39c00404 	addi	r7,r7,16
8110b2f0:	42000404 	addi	r8,r8,16
8110b2f4:	6b400404 	addi	r13,r13,16
8110b2f8:	63000404 	addi	r12,r12,16
8110b2fc:	5ac00404 	addi	r11,r11,16
8110b300:	52800404 	addi	r10,r10,16
8110b304:	4a400404 	addi	r9,r9,16
8110b308:	1c3fef1e 	bne	r3,r16,8110b2c8 <__reset+0xfb0eb2c8>
8110b30c:	89c00044 	addi	r7,r17,1
8110b310:	380e913a 	slli	r7,r7,4
8110b314:	310003cc 	andi	r4,r6,15
8110b318:	02c000c4 	movi	r11,3
8110b31c:	11c7883a 	add	r3,r2,r7
8110b320:	29cb883a 	add	r5,r5,r7
8110b324:	5900212e 	bgeu	r11,r4,8110b3ac <memcpy+0x140>
8110b328:	1813883a 	mov	r9,r3
8110b32c:	2811883a 	mov	r8,r5
8110b330:	200f883a 	mov	r7,r4
8110b334:	42800017 	ldw	r10,0(r8)
8110b338:	4a400104 	addi	r9,r9,4
8110b33c:	39ffff04 	addi	r7,r7,-4
8110b340:	4abfff15 	stw	r10,-4(r9)
8110b344:	42000104 	addi	r8,r8,4
8110b348:	59fffa36 	bltu	r11,r7,8110b334 <__reset+0xfb0eb334>
8110b34c:	213fff04 	addi	r4,r4,-4
8110b350:	2008d0ba 	srli	r4,r4,2
8110b354:	318000cc 	andi	r6,r6,3
8110b358:	21000044 	addi	r4,r4,1
8110b35c:	2109883a 	add	r4,r4,r4
8110b360:	2109883a 	add	r4,r4,r4
8110b364:	1907883a 	add	r3,r3,r4
8110b368:	290b883a 	add	r5,r5,r4
8110b36c:	30000626 	beq	r6,zero,8110b388 <memcpy+0x11c>
8110b370:	198d883a 	add	r6,r3,r6
8110b374:	29c00003 	ldbu	r7,0(r5)
8110b378:	18c00044 	addi	r3,r3,1
8110b37c:	29400044 	addi	r5,r5,1
8110b380:	19ffffc5 	stb	r7,-1(r3)
8110b384:	19bffb1e 	bne	r3,r6,8110b374 <__reset+0xfb0eb374>
8110b388:	dfc00217 	ldw	ra,8(sp)
8110b38c:	dc400117 	ldw	r17,4(sp)
8110b390:	dc000017 	ldw	r16,0(sp)
8110b394:	dec00304 	addi	sp,sp,12
8110b398:	f800283a 	ret
8110b39c:	2007883a 	mov	r3,r4
8110b3a0:	003ff206 	br	8110b36c <__reset+0xfb0eb36c>
8110b3a4:	2007883a 	mov	r3,r4
8110b3a8:	003ff106 	br	8110b370 <__reset+0xfb0eb370>
8110b3ac:	200d883a 	mov	r6,r4
8110b3b0:	003fee06 	br	8110b36c <__reset+0xfb0eb36c>

8110b3b4 <memset>:
8110b3b4:	20c000cc 	andi	r3,r4,3
8110b3b8:	2005883a 	mov	r2,r4
8110b3bc:	18004426 	beq	r3,zero,8110b4d0 <memset+0x11c>
8110b3c0:	31ffffc4 	addi	r7,r6,-1
8110b3c4:	30004026 	beq	r6,zero,8110b4c8 <memset+0x114>
8110b3c8:	2813883a 	mov	r9,r5
8110b3cc:	200d883a 	mov	r6,r4
8110b3d0:	2007883a 	mov	r3,r4
8110b3d4:	00000406 	br	8110b3e8 <memset+0x34>
8110b3d8:	3a3fffc4 	addi	r8,r7,-1
8110b3dc:	31800044 	addi	r6,r6,1
8110b3e0:	38003926 	beq	r7,zero,8110b4c8 <memset+0x114>
8110b3e4:	400f883a 	mov	r7,r8
8110b3e8:	18c00044 	addi	r3,r3,1
8110b3ec:	32400005 	stb	r9,0(r6)
8110b3f0:	1a0000cc 	andi	r8,r3,3
8110b3f4:	403ff81e 	bne	r8,zero,8110b3d8 <__reset+0xfb0eb3d8>
8110b3f8:	010000c4 	movi	r4,3
8110b3fc:	21c02d2e 	bgeu	r4,r7,8110b4b4 <memset+0x100>
8110b400:	29003fcc 	andi	r4,r5,255
8110b404:	200c923a 	slli	r6,r4,8
8110b408:	3108b03a 	or	r4,r6,r4
8110b40c:	200c943a 	slli	r6,r4,16
8110b410:	218cb03a 	or	r6,r4,r6
8110b414:	010003c4 	movi	r4,15
8110b418:	21c0182e 	bgeu	r4,r7,8110b47c <memset+0xc8>
8110b41c:	3b3ffc04 	addi	r12,r7,-16
8110b420:	6018d13a 	srli	r12,r12,4
8110b424:	1a000104 	addi	r8,r3,4
8110b428:	1ac00204 	addi	r11,r3,8
8110b42c:	6008913a 	slli	r4,r12,4
8110b430:	1a800304 	addi	r10,r3,12
8110b434:	1813883a 	mov	r9,r3
8110b438:	21000504 	addi	r4,r4,20
8110b43c:	1909883a 	add	r4,r3,r4
8110b440:	49800015 	stw	r6,0(r9)
8110b444:	41800015 	stw	r6,0(r8)
8110b448:	59800015 	stw	r6,0(r11)
8110b44c:	51800015 	stw	r6,0(r10)
8110b450:	42000404 	addi	r8,r8,16
8110b454:	4a400404 	addi	r9,r9,16
8110b458:	5ac00404 	addi	r11,r11,16
8110b45c:	52800404 	addi	r10,r10,16
8110b460:	413ff71e 	bne	r8,r4,8110b440 <__reset+0xfb0eb440>
8110b464:	63000044 	addi	r12,r12,1
8110b468:	6018913a 	slli	r12,r12,4
8110b46c:	39c003cc 	andi	r7,r7,15
8110b470:	010000c4 	movi	r4,3
8110b474:	1b07883a 	add	r3,r3,r12
8110b478:	21c00e2e 	bgeu	r4,r7,8110b4b4 <memset+0x100>
8110b47c:	1813883a 	mov	r9,r3
8110b480:	3811883a 	mov	r8,r7
8110b484:	010000c4 	movi	r4,3
8110b488:	49800015 	stw	r6,0(r9)
8110b48c:	423fff04 	addi	r8,r8,-4
8110b490:	4a400104 	addi	r9,r9,4
8110b494:	223ffc36 	bltu	r4,r8,8110b488 <__reset+0xfb0eb488>
8110b498:	393fff04 	addi	r4,r7,-4
8110b49c:	2008d0ba 	srli	r4,r4,2
8110b4a0:	39c000cc 	andi	r7,r7,3
8110b4a4:	21000044 	addi	r4,r4,1
8110b4a8:	2109883a 	add	r4,r4,r4
8110b4ac:	2109883a 	add	r4,r4,r4
8110b4b0:	1907883a 	add	r3,r3,r4
8110b4b4:	38000526 	beq	r7,zero,8110b4cc <memset+0x118>
8110b4b8:	19cf883a 	add	r7,r3,r7
8110b4bc:	19400005 	stb	r5,0(r3)
8110b4c0:	18c00044 	addi	r3,r3,1
8110b4c4:	38fffd1e 	bne	r7,r3,8110b4bc <__reset+0xfb0eb4bc>
8110b4c8:	f800283a 	ret
8110b4cc:	f800283a 	ret
8110b4d0:	2007883a 	mov	r3,r4
8110b4d4:	300f883a 	mov	r7,r6
8110b4d8:	003fc706 	br	8110b3f8 <__reset+0xfb0eb3f8>

8110b4dc <_open_r>:
8110b4dc:	defffd04 	addi	sp,sp,-12
8110b4e0:	2805883a 	mov	r2,r5
8110b4e4:	dc000015 	stw	r16,0(sp)
8110b4e8:	042044f4 	movhi	r16,33043
8110b4ec:	dc400115 	stw	r17,4(sp)
8110b4f0:	300b883a 	mov	r5,r6
8110b4f4:	8417b304 	addi	r16,r16,24268
8110b4f8:	2023883a 	mov	r17,r4
8110b4fc:	380d883a 	mov	r6,r7
8110b500:	1009883a 	mov	r4,r2
8110b504:	dfc00215 	stw	ra,8(sp)
8110b508:	80000015 	stw	zero,0(r16)
8110b50c:	111fd0c0 	call	8111fd0c <open>
8110b510:	00ffffc4 	movi	r3,-1
8110b514:	10c00526 	beq	r2,r3,8110b52c <_open_r+0x50>
8110b518:	dfc00217 	ldw	ra,8(sp)
8110b51c:	dc400117 	ldw	r17,4(sp)
8110b520:	dc000017 	ldw	r16,0(sp)
8110b524:	dec00304 	addi	sp,sp,12
8110b528:	f800283a 	ret
8110b52c:	80c00017 	ldw	r3,0(r16)
8110b530:	183ff926 	beq	r3,zero,8110b518 <__reset+0xfb0eb518>
8110b534:	88c00015 	stw	r3,0(r17)
8110b538:	003ff706 	br	8110b518 <__reset+0xfb0eb518>

8110b53c <_printf_r>:
8110b53c:	defffd04 	addi	sp,sp,-12
8110b540:	2805883a 	mov	r2,r5
8110b544:	dfc00015 	stw	ra,0(sp)
8110b548:	d9800115 	stw	r6,4(sp)
8110b54c:	d9c00215 	stw	r7,8(sp)
8110b550:	21400217 	ldw	r5,8(r4)
8110b554:	d9c00104 	addi	r7,sp,4
8110b558:	100d883a 	mov	r6,r2
8110b55c:	110e1380 	call	8110e138 <___vfprintf_internal_r>
8110b560:	dfc00017 	ldw	ra,0(sp)
8110b564:	dec00304 	addi	sp,sp,12
8110b568:	f800283a 	ret

8110b56c <printf>:
8110b56c:	defffc04 	addi	sp,sp,-16
8110b570:	dfc00015 	stw	ra,0(sp)
8110b574:	d9400115 	stw	r5,4(sp)
8110b578:	d9800215 	stw	r6,8(sp)
8110b57c:	d9c00315 	stw	r7,12(sp)
8110b580:	00a044f4 	movhi	r2,33043
8110b584:	10976404 	addi	r2,r2,23952
8110b588:	10800017 	ldw	r2,0(r2)
8110b58c:	200b883a 	mov	r5,r4
8110b590:	d9800104 	addi	r6,sp,4
8110b594:	11000217 	ldw	r4,8(r2)
8110b598:	11103300 	call	81110330 <__vfprintf_internal>
8110b59c:	dfc00017 	ldw	ra,0(sp)
8110b5a0:	dec00404 	addi	sp,sp,16
8110b5a4:	f800283a 	ret

8110b5a8 <_putchar_r>:
8110b5a8:	21800217 	ldw	r6,8(r4)
8110b5ac:	11161101 	jmpi	81116110 <_putc_r>

8110b5b0 <putchar>:
8110b5b0:	00a044f4 	movhi	r2,33043
8110b5b4:	10976404 	addi	r2,r2,23952
8110b5b8:	200b883a 	mov	r5,r4
8110b5bc:	11000017 	ldw	r4,0(r2)
8110b5c0:	21800217 	ldw	r6,8(r4)
8110b5c4:	11161101 	jmpi	81116110 <_putc_r>

8110b5c8 <_puts_r>:
8110b5c8:	defff604 	addi	sp,sp,-40
8110b5cc:	dc000715 	stw	r16,28(sp)
8110b5d0:	2021883a 	mov	r16,r4
8110b5d4:	2809883a 	mov	r4,r5
8110b5d8:	dc400815 	stw	r17,32(sp)
8110b5dc:	dfc00915 	stw	ra,36(sp)
8110b5e0:	2823883a 	mov	r17,r5
8110b5e4:	110bc740 	call	8110bc74 <strlen>
8110b5e8:	10c00044 	addi	r3,r2,1
8110b5ec:	d8800115 	stw	r2,4(sp)
8110b5f0:	00a044f4 	movhi	r2,33043
8110b5f4:	108dc104 	addi	r2,r2,14084
8110b5f8:	d8800215 	stw	r2,8(sp)
8110b5fc:	00800044 	movi	r2,1
8110b600:	d8800315 	stw	r2,12(sp)
8110b604:	00800084 	movi	r2,2
8110b608:	dc400015 	stw	r17,0(sp)
8110b60c:	d8c00615 	stw	r3,24(sp)
8110b610:	dec00415 	stw	sp,16(sp)
8110b614:	d8800515 	stw	r2,20(sp)
8110b618:	80000226 	beq	r16,zero,8110b624 <_puts_r+0x5c>
8110b61c:	80800e17 	ldw	r2,56(r16)
8110b620:	10001426 	beq	r2,zero,8110b674 <_puts_r+0xac>
8110b624:	81400217 	ldw	r5,8(r16)
8110b628:	2880030b 	ldhu	r2,12(r5)
8110b62c:	10c8000c 	andi	r3,r2,8192
8110b630:	1800061e 	bne	r3,zero,8110b64c <_puts_r+0x84>
8110b634:	29001917 	ldw	r4,100(r5)
8110b638:	00f7ffc4 	movi	r3,-8193
8110b63c:	10880014 	ori	r2,r2,8192
8110b640:	20c6703a 	and	r3,r4,r3
8110b644:	2880030d 	sth	r2,12(r5)
8110b648:	28c01915 	stw	r3,100(r5)
8110b64c:	d9800404 	addi	r6,sp,16
8110b650:	8009883a 	mov	r4,r16
8110b654:	11144ac0 	call	811144ac <__sfvwrite_r>
8110b658:	1000091e 	bne	r2,zero,8110b680 <_puts_r+0xb8>
8110b65c:	00800284 	movi	r2,10
8110b660:	dfc00917 	ldw	ra,36(sp)
8110b664:	dc400817 	ldw	r17,32(sp)
8110b668:	dc000717 	ldw	r16,28(sp)
8110b66c:	dec00a04 	addi	sp,sp,40
8110b670:	f800283a 	ret
8110b674:	8009883a 	mov	r4,r16
8110b678:	1113d1c0 	call	81113d1c <__sinit>
8110b67c:	003fe906 	br	8110b624 <__reset+0xfb0eb624>
8110b680:	00bfffc4 	movi	r2,-1
8110b684:	003ff606 	br	8110b660 <__reset+0xfb0eb660>

8110b688 <puts>:
8110b688:	00a044f4 	movhi	r2,33043
8110b68c:	10976404 	addi	r2,r2,23952
8110b690:	200b883a 	mov	r5,r4
8110b694:	11000017 	ldw	r4,0(r2)
8110b698:	110b5c81 	jmpi	8110b5c8 <_puts_r>

8110b69c <lflush>:
8110b69c:	2080030b 	ldhu	r2,12(r4)
8110b6a0:	00c00244 	movi	r3,9
8110b6a4:	1080024c 	andi	r2,r2,9
8110b6a8:	10c00226 	beq	r2,r3,8110b6b4 <lflush+0x18>
8110b6ac:	0005883a 	mov	r2,zero
8110b6b0:	f800283a 	ret
8110b6b4:	111399c1 	jmpi	8111399c <fflush>

8110b6b8 <__srefill_r>:
8110b6b8:	defffc04 	addi	sp,sp,-16
8110b6bc:	dc400115 	stw	r17,4(sp)
8110b6c0:	dc000015 	stw	r16,0(sp)
8110b6c4:	dfc00315 	stw	ra,12(sp)
8110b6c8:	dc800215 	stw	r18,8(sp)
8110b6cc:	2023883a 	mov	r17,r4
8110b6d0:	2821883a 	mov	r16,r5
8110b6d4:	20000226 	beq	r4,zero,8110b6e0 <__srefill_r+0x28>
8110b6d8:	20800e17 	ldw	r2,56(r4)
8110b6dc:	10003c26 	beq	r2,zero,8110b7d0 <__srefill_r+0x118>
8110b6e0:	80c0030b 	ldhu	r3,12(r16)
8110b6e4:	1908000c 	andi	r4,r3,8192
8110b6e8:	1805883a 	mov	r2,r3
8110b6ec:	2000071e 	bne	r4,zero,8110b70c <__srefill_r+0x54>
8110b6f0:	81001917 	ldw	r4,100(r16)
8110b6f4:	18880014 	ori	r2,r3,8192
8110b6f8:	00f7ffc4 	movi	r3,-8193
8110b6fc:	20c8703a 	and	r4,r4,r3
8110b700:	8080030d 	sth	r2,12(r16)
8110b704:	1007883a 	mov	r3,r2
8110b708:	81001915 	stw	r4,100(r16)
8110b70c:	80000115 	stw	zero,4(r16)
8110b710:	1100080c 	andi	r4,r2,32
8110b714:	2000571e 	bne	r4,zero,8110b874 <__srefill_r+0x1bc>
8110b718:	1100010c 	andi	r4,r2,4
8110b71c:	20001f26 	beq	r4,zero,8110b79c <__srefill_r+0xe4>
8110b720:	81400c17 	ldw	r5,48(r16)
8110b724:	28000826 	beq	r5,zero,8110b748 <__srefill_r+0x90>
8110b728:	80801004 	addi	r2,r16,64
8110b72c:	28800226 	beq	r5,r2,8110b738 <__srefill_r+0x80>
8110b730:	8809883a 	mov	r4,r17
8110b734:	111419c0 	call	8111419c <_free_r>
8110b738:	80800f17 	ldw	r2,60(r16)
8110b73c:	80000c15 	stw	zero,48(r16)
8110b740:	80800115 	stw	r2,4(r16)
8110b744:	1000391e 	bne	r2,zero,8110b82c <__srefill_r+0x174>
8110b748:	80800417 	ldw	r2,16(r16)
8110b74c:	10004b26 	beq	r2,zero,8110b87c <__srefill_r+0x1c4>
8110b750:	8480030b 	ldhu	r18,12(r16)
8110b754:	908000cc 	andi	r2,r18,3
8110b758:	10001f1e 	bne	r2,zero,8110b7d8 <__srefill_r+0x120>
8110b75c:	81800417 	ldw	r6,16(r16)
8110b760:	80800817 	ldw	r2,32(r16)
8110b764:	81c00517 	ldw	r7,20(r16)
8110b768:	81400717 	ldw	r5,28(r16)
8110b76c:	81800015 	stw	r6,0(r16)
8110b770:	8809883a 	mov	r4,r17
8110b774:	103ee83a 	callr	r2
8110b778:	80800115 	stw	r2,4(r16)
8110b77c:	00800e0e 	bge	zero,r2,8110b7b8 <__srefill_r+0x100>
8110b780:	0005883a 	mov	r2,zero
8110b784:	dfc00317 	ldw	ra,12(sp)
8110b788:	dc800217 	ldw	r18,8(sp)
8110b78c:	dc400117 	ldw	r17,4(sp)
8110b790:	dc000017 	ldw	r16,0(sp)
8110b794:	dec00404 	addi	sp,sp,16
8110b798:	f800283a 	ret
8110b79c:	1100040c 	andi	r4,r2,16
8110b7a0:	20003026 	beq	r4,zero,8110b864 <__srefill_r+0x1ac>
8110b7a4:	1080020c 	andi	r2,r2,8
8110b7a8:	1000241e 	bne	r2,zero,8110b83c <__srefill_r+0x184>
8110b7ac:	18c00114 	ori	r3,r3,4
8110b7b0:	80c0030d 	sth	r3,12(r16)
8110b7b4:	003fe406 	br	8110b748 <__reset+0xfb0eb748>
8110b7b8:	80c0030b 	ldhu	r3,12(r16)
8110b7bc:	1000161e 	bne	r2,zero,8110b818 <__srefill_r+0x160>
8110b7c0:	18c00814 	ori	r3,r3,32
8110b7c4:	00bfffc4 	movi	r2,-1
8110b7c8:	80c0030d 	sth	r3,12(r16)
8110b7cc:	003fed06 	br	8110b784 <__reset+0xfb0eb784>
8110b7d0:	1113d1c0 	call	81113d1c <__sinit>
8110b7d4:	003fc206 	br	8110b6e0 <__reset+0xfb0eb6e0>
8110b7d8:	00a044f4 	movhi	r2,33043
8110b7dc:	10976304 	addi	r2,r2,23948
8110b7e0:	11000017 	ldw	r4,0(r2)
8110b7e4:	01604474 	movhi	r5,33041
8110b7e8:	00800044 	movi	r2,1
8110b7ec:	296da704 	addi	r5,r5,-18788
8110b7f0:	8080030d 	sth	r2,12(r16)
8110b7f4:	11149680 	call	81114968 <_fwalk>
8110b7f8:	00800244 	movi	r2,9
8110b7fc:	8480030d 	sth	r18,12(r16)
8110b800:	9480024c 	andi	r18,r18,9
8110b804:	90bfd51e 	bne	r18,r2,8110b75c <__reset+0xfb0eb75c>
8110b808:	800b883a 	mov	r5,r16
8110b80c:	8809883a 	mov	r4,r17
8110b810:	11137240 	call	81113724 <__sflush_r>
8110b814:	003fd106 	br	8110b75c <__reset+0xfb0eb75c>
8110b818:	18c01014 	ori	r3,r3,64
8110b81c:	80000115 	stw	zero,4(r16)
8110b820:	00bfffc4 	movi	r2,-1
8110b824:	80c0030d 	sth	r3,12(r16)
8110b828:	003fd606 	br	8110b784 <__reset+0xfb0eb784>
8110b82c:	80c00e17 	ldw	r3,56(r16)
8110b830:	0005883a 	mov	r2,zero
8110b834:	80c00015 	stw	r3,0(r16)
8110b838:	003fd206 	br	8110b784 <__reset+0xfb0eb784>
8110b83c:	800b883a 	mov	r5,r16
8110b840:	8809883a 	mov	r4,r17
8110b844:	11139400 	call	81113940 <_fflush_r>
8110b848:	10000a1e 	bne	r2,zero,8110b874 <__srefill_r+0x1bc>
8110b84c:	8080030b 	ldhu	r2,12(r16)
8110b850:	00fffdc4 	movi	r3,-9
8110b854:	80000215 	stw	zero,8(r16)
8110b858:	1886703a 	and	r3,r3,r2
8110b85c:	80000615 	stw	zero,24(r16)
8110b860:	003fd206 	br	8110b7ac <__reset+0xfb0eb7ac>
8110b864:	00800244 	movi	r2,9
8110b868:	88800015 	stw	r2,0(r17)
8110b86c:	18c01014 	ori	r3,r3,64
8110b870:	80c0030d 	sth	r3,12(r16)
8110b874:	00bfffc4 	movi	r2,-1
8110b878:	003fc206 	br	8110b784 <__reset+0xfb0eb784>
8110b87c:	800b883a 	mov	r5,r16
8110b880:	8809883a 	mov	r4,r17
8110b884:	110a8a40 	call	8110a8a4 <__smakebuf_r>
8110b888:	003fb106 	br	8110b750 <__reset+0xfb0eb750>

8110b88c <_sbrk_r>:
8110b88c:	defffd04 	addi	sp,sp,-12
8110b890:	dc000015 	stw	r16,0(sp)
8110b894:	042044f4 	movhi	r16,33043
8110b898:	dc400115 	stw	r17,4(sp)
8110b89c:	8417b304 	addi	r16,r16,24268
8110b8a0:	2023883a 	mov	r17,r4
8110b8a4:	2809883a 	mov	r4,r5
8110b8a8:	dfc00215 	stw	ra,8(sp)
8110b8ac:	80000015 	stw	zero,0(r16)
8110b8b0:	111fffc0 	call	8111fffc <sbrk>
8110b8b4:	00ffffc4 	movi	r3,-1
8110b8b8:	10c00526 	beq	r2,r3,8110b8d0 <_sbrk_r+0x44>
8110b8bc:	dfc00217 	ldw	ra,8(sp)
8110b8c0:	dc400117 	ldw	r17,4(sp)
8110b8c4:	dc000017 	ldw	r16,0(sp)
8110b8c8:	dec00304 	addi	sp,sp,12
8110b8cc:	f800283a 	ret
8110b8d0:	80c00017 	ldw	r3,0(r16)
8110b8d4:	183ff926 	beq	r3,zero,8110b8bc <__reset+0xfb0eb8bc>
8110b8d8:	88c00015 	stw	r3,0(r17)
8110b8dc:	003ff706 	br	8110b8bc <__reset+0xfb0eb8bc>

8110b8e0 <scanf>:
8110b8e0:	defffc04 	addi	sp,sp,-16
8110b8e4:	dfc00015 	stw	ra,0(sp)
8110b8e8:	d9400115 	stw	r5,4(sp)
8110b8ec:	d9800215 	stw	r6,8(sp)
8110b8f0:	d9c00315 	stw	r7,12(sp)
8110b8f4:	00a044f4 	movhi	r2,33043
8110b8f8:	10976404 	addi	r2,r2,23952
8110b8fc:	200d883a 	mov	r6,r4
8110b900:	11000017 	ldw	r4,0(r2)
8110b904:	d9c00104 	addi	r7,sp,4
8110b908:	21400117 	ldw	r5,4(r4)
8110b90c:	1111c480 	call	81111c48 <_vfscanf_r>
8110b910:	dfc00017 	ldw	ra,0(sp)
8110b914:	dec00404 	addi	sp,sp,16
8110b918:	f800283a 	ret

8110b91c <_scanf_r>:
8110b91c:	defffd04 	addi	sp,sp,-12
8110b920:	2805883a 	mov	r2,r5
8110b924:	dfc00015 	stw	ra,0(sp)
8110b928:	d9800115 	stw	r6,4(sp)
8110b92c:	d9c00215 	stw	r7,8(sp)
8110b930:	21400117 	ldw	r5,4(r4)
8110b934:	d9c00104 	addi	r7,sp,4
8110b938:	100d883a 	mov	r6,r2
8110b93c:	1111c480 	call	81111c48 <_vfscanf_r>
8110b940:	dfc00017 	ldw	ra,0(sp)
8110b944:	dec00304 	addi	sp,sp,12
8110b948:	f800283a 	ret

8110b94c <_sprintf_r>:
8110b94c:	deffe404 	addi	sp,sp,-112
8110b950:	2807883a 	mov	r3,r5
8110b954:	dfc01a15 	stw	ra,104(sp)
8110b958:	d9c01b15 	stw	r7,108(sp)
8110b95c:	00a00034 	movhi	r2,32768
8110b960:	10bfffc4 	addi	r2,r2,-1
8110b964:	02008204 	movi	r8,520
8110b968:	d8800215 	stw	r2,8(sp)
8110b96c:	d8800515 	stw	r2,20(sp)
8110b970:	d9c01b04 	addi	r7,sp,108
8110b974:	d80b883a 	mov	r5,sp
8110b978:	00bfffc4 	movi	r2,-1
8110b97c:	d8c00015 	stw	r3,0(sp)
8110b980:	d8c00415 	stw	r3,16(sp)
8110b984:	da00030d 	sth	r8,12(sp)
8110b988:	d880038d 	sth	r2,14(sp)
8110b98c:	110bf600 	call	8110bf60 <___svfprintf_internal_r>
8110b990:	d8c00017 	ldw	r3,0(sp)
8110b994:	18000005 	stb	zero,0(r3)
8110b998:	dfc01a17 	ldw	ra,104(sp)
8110b99c:	dec01c04 	addi	sp,sp,112
8110b9a0:	f800283a 	ret

8110b9a4 <sprintf>:
8110b9a4:	deffe304 	addi	sp,sp,-116
8110b9a8:	2007883a 	mov	r3,r4
8110b9ac:	dfc01a15 	stw	ra,104(sp)
8110b9b0:	d9801b15 	stw	r6,108(sp)
8110b9b4:	d9c01c15 	stw	r7,112(sp)
8110b9b8:	012044f4 	movhi	r4,33043
8110b9bc:	21176404 	addi	r4,r4,23952
8110b9c0:	21000017 	ldw	r4,0(r4)
8110b9c4:	00a00034 	movhi	r2,32768
8110b9c8:	10bfffc4 	addi	r2,r2,-1
8110b9cc:	280d883a 	mov	r6,r5
8110b9d0:	02008204 	movi	r8,520
8110b9d4:	d8800215 	stw	r2,8(sp)
8110b9d8:	d8800515 	stw	r2,20(sp)
8110b9dc:	d9c01b04 	addi	r7,sp,108
8110b9e0:	d80b883a 	mov	r5,sp
8110b9e4:	00bfffc4 	movi	r2,-1
8110b9e8:	d8c00015 	stw	r3,0(sp)
8110b9ec:	d8c00415 	stw	r3,16(sp)
8110b9f0:	da00030d 	sth	r8,12(sp)
8110b9f4:	d880038d 	sth	r2,14(sp)
8110b9f8:	110bf600 	call	8110bf60 <___svfprintf_internal_r>
8110b9fc:	d8c00017 	ldw	r3,0(sp)
8110ba00:	18000005 	stb	zero,0(r3)
8110ba04:	dfc01a17 	ldw	ra,104(sp)
8110ba08:	dec01d04 	addi	sp,sp,116
8110ba0c:	f800283a 	ret

8110ba10 <__sread>:
8110ba10:	defffe04 	addi	sp,sp,-8
8110ba14:	dc000015 	stw	r16,0(sp)
8110ba18:	2821883a 	mov	r16,r5
8110ba1c:	2940038f 	ldh	r5,14(r5)
8110ba20:	dfc00115 	stw	ra,4(sp)
8110ba24:	11162780 	call	81116278 <_read_r>
8110ba28:	10000716 	blt	r2,zero,8110ba48 <__sread+0x38>
8110ba2c:	80c01417 	ldw	r3,80(r16)
8110ba30:	1887883a 	add	r3,r3,r2
8110ba34:	80c01415 	stw	r3,80(r16)
8110ba38:	dfc00117 	ldw	ra,4(sp)
8110ba3c:	dc000017 	ldw	r16,0(sp)
8110ba40:	dec00204 	addi	sp,sp,8
8110ba44:	f800283a 	ret
8110ba48:	80c0030b 	ldhu	r3,12(r16)
8110ba4c:	18fbffcc 	andi	r3,r3,61439
8110ba50:	80c0030d 	sth	r3,12(r16)
8110ba54:	dfc00117 	ldw	ra,4(sp)
8110ba58:	dc000017 	ldw	r16,0(sp)
8110ba5c:	dec00204 	addi	sp,sp,8
8110ba60:	f800283a 	ret

8110ba64 <__seofread>:
8110ba64:	0005883a 	mov	r2,zero
8110ba68:	f800283a 	ret

8110ba6c <__swrite>:
8110ba6c:	2880030b 	ldhu	r2,12(r5)
8110ba70:	defffb04 	addi	sp,sp,-20
8110ba74:	dcc00315 	stw	r19,12(sp)
8110ba78:	dc800215 	stw	r18,8(sp)
8110ba7c:	dc400115 	stw	r17,4(sp)
8110ba80:	dc000015 	stw	r16,0(sp)
8110ba84:	dfc00415 	stw	ra,16(sp)
8110ba88:	10c0400c 	andi	r3,r2,256
8110ba8c:	2821883a 	mov	r16,r5
8110ba90:	2023883a 	mov	r17,r4
8110ba94:	3025883a 	mov	r18,r6
8110ba98:	3827883a 	mov	r19,r7
8110ba9c:	18000526 	beq	r3,zero,8110bab4 <__swrite+0x48>
8110baa0:	2940038f 	ldh	r5,14(r5)
8110baa4:	01c00084 	movi	r7,2
8110baa8:	000d883a 	mov	r6,zero
8110baac:	1114c500 	call	81114c50 <_lseek_r>
8110bab0:	8080030b 	ldhu	r2,12(r16)
8110bab4:	8140038f 	ldh	r5,14(r16)
8110bab8:	10bbffcc 	andi	r2,r2,61439
8110babc:	980f883a 	mov	r7,r19
8110bac0:	900d883a 	mov	r6,r18
8110bac4:	8809883a 	mov	r4,r17
8110bac8:	8080030d 	sth	r2,12(r16)
8110bacc:	dfc00417 	ldw	ra,16(sp)
8110bad0:	dcc00317 	ldw	r19,12(sp)
8110bad4:	dc800217 	ldw	r18,8(sp)
8110bad8:	dc400117 	ldw	r17,4(sp)
8110badc:	dc000017 	ldw	r16,0(sp)
8110bae0:	dec00504 	addi	sp,sp,20
8110bae4:	1111c941 	jmpi	81111c94 <_write_r>

8110bae8 <__sseek>:
8110bae8:	defffe04 	addi	sp,sp,-8
8110baec:	dc000015 	stw	r16,0(sp)
8110baf0:	2821883a 	mov	r16,r5
8110baf4:	2940038f 	ldh	r5,14(r5)
8110baf8:	dfc00115 	stw	ra,4(sp)
8110bafc:	1114c500 	call	81114c50 <_lseek_r>
8110bb00:	00ffffc4 	movi	r3,-1
8110bb04:	10c00826 	beq	r2,r3,8110bb28 <__sseek+0x40>
8110bb08:	80c0030b 	ldhu	r3,12(r16)
8110bb0c:	80801415 	stw	r2,80(r16)
8110bb10:	18c40014 	ori	r3,r3,4096
8110bb14:	80c0030d 	sth	r3,12(r16)
8110bb18:	dfc00117 	ldw	ra,4(sp)
8110bb1c:	dc000017 	ldw	r16,0(sp)
8110bb20:	dec00204 	addi	sp,sp,8
8110bb24:	f800283a 	ret
8110bb28:	80c0030b 	ldhu	r3,12(r16)
8110bb2c:	18fbffcc 	andi	r3,r3,61439
8110bb30:	80c0030d 	sth	r3,12(r16)
8110bb34:	dfc00117 	ldw	ra,4(sp)
8110bb38:	dc000017 	ldw	r16,0(sp)
8110bb3c:	dec00204 	addi	sp,sp,8
8110bb40:	f800283a 	ret

8110bb44 <__sclose>:
8110bb44:	2940038f 	ldh	r5,14(r5)
8110bb48:	1111e481 	jmpi	81111e48 <_close_r>

8110bb4c <strcmp>:
8110bb4c:	2144b03a 	or	r2,r4,r5
8110bb50:	108000cc 	andi	r2,r2,3
8110bb54:	1000171e 	bne	r2,zero,8110bbb4 <strcmp+0x68>
8110bb58:	20800017 	ldw	r2,0(r4)
8110bb5c:	28c00017 	ldw	r3,0(r5)
8110bb60:	10c0141e 	bne	r2,r3,8110bbb4 <strcmp+0x68>
8110bb64:	027fbff4 	movhi	r9,65279
8110bb68:	4a7fbfc4 	addi	r9,r9,-257
8110bb6c:	0086303a 	nor	r3,zero,r2
8110bb70:	02202074 	movhi	r8,32897
8110bb74:	1245883a 	add	r2,r2,r9
8110bb78:	42202004 	addi	r8,r8,-32640
8110bb7c:	10c4703a 	and	r2,r2,r3
8110bb80:	1204703a 	and	r2,r2,r8
8110bb84:	10000226 	beq	r2,zero,8110bb90 <strcmp+0x44>
8110bb88:	00002306 	br	8110bc18 <strcmp+0xcc>
8110bb8c:	1000221e 	bne	r2,zero,8110bc18 <strcmp+0xcc>
8110bb90:	21000104 	addi	r4,r4,4
8110bb94:	20c00017 	ldw	r3,0(r4)
8110bb98:	29400104 	addi	r5,r5,4
8110bb9c:	29800017 	ldw	r6,0(r5)
8110bba0:	1a4f883a 	add	r7,r3,r9
8110bba4:	00c4303a 	nor	r2,zero,r3
8110bba8:	3884703a 	and	r2,r7,r2
8110bbac:	1204703a 	and	r2,r2,r8
8110bbb0:	19bff626 	beq	r3,r6,8110bb8c <__reset+0xfb0ebb8c>
8110bbb4:	20800003 	ldbu	r2,0(r4)
8110bbb8:	10c03fcc 	andi	r3,r2,255
8110bbbc:	18c0201c 	xori	r3,r3,128
8110bbc0:	18ffe004 	addi	r3,r3,-128
8110bbc4:	18000c26 	beq	r3,zero,8110bbf8 <strcmp+0xac>
8110bbc8:	29800007 	ldb	r6,0(r5)
8110bbcc:	19800326 	beq	r3,r6,8110bbdc <strcmp+0x90>
8110bbd0:	00001306 	br	8110bc20 <strcmp+0xd4>
8110bbd4:	29800007 	ldb	r6,0(r5)
8110bbd8:	11800b1e 	bne	r2,r6,8110bc08 <strcmp+0xbc>
8110bbdc:	21000044 	addi	r4,r4,1
8110bbe0:	20c00003 	ldbu	r3,0(r4)
8110bbe4:	29400044 	addi	r5,r5,1
8110bbe8:	18803fcc 	andi	r2,r3,255
8110bbec:	1080201c 	xori	r2,r2,128
8110bbf0:	10bfe004 	addi	r2,r2,-128
8110bbf4:	103ff71e 	bne	r2,zero,8110bbd4 <__reset+0xfb0ebbd4>
8110bbf8:	0007883a 	mov	r3,zero
8110bbfc:	28800003 	ldbu	r2,0(r5)
8110bc00:	1885c83a 	sub	r2,r3,r2
8110bc04:	f800283a 	ret
8110bc08:	28800003 	ldbu	r2,0(r5)
8110bc0c:	18c03fcc 	andi	r3,r3,255
8110bc10:	1885c83a 	sub	r2,r3,r2
8110bc14:	f800283a 	ret
8110bc18:	0005883a 	mov	r2,zero
8110bc1c:	f800283a 	ret
8110bc20:	10c03fcc 	andi	r3,r2,255
8110bc24:	003ff506 	br	8110bbfc <__reset+0xfb0ebbfc>

8110bc28 <strcspn>:
8110bc28:	21c00007 	ldb	r7,0(r4)
8110bc2c:	38000f26 	beq	r7,zero,8110bc6c <strcspn+0x44>
8110bc30:	2a000007 	ldb	r8,0(r5)
8110bc34:	2005883a 	mov	r2,r4
8110bc38:	40000726 	beq	r8,zero,8110bc58 <strcspn+0x30>
8110bc3c:	3a000926 	beq	r7,r8,8110bc64 <strcspn+0x3c>
8110bc40:	2807883a 	mov	r3,r5
8110bc44:	00000106 	br	8110bc4c <strcspn+0x24>
8110bc48:	31c00626 	beq	r6,r7,8110bc64 <strcspn+0x3c>
8110bc4c:	18c00044 	addi	r3,r3,1
8110bc50:	19800007 	ldb	r6,0(r3)
8110bc54:	303ffc1e 	bne	r6,zero,8110bc48 <__reset+0xfb0ebc48>
8110bc58:	10800044 	addi	r2,r2,1
8110bc5c:	11c00007 	ldb	r7,0(r2)
8110bc60:	383ff51e 	bne	r7,zero,8110bc38 <__reset+0xfb0ebc38>
8110bc64:	1105c83a 	sub	r2,r2,r4
8110bc68:	f800283a 	ret
8110bc6c:	0005883a 	mov	r2,zero
8110bc70:	f800283a 	ret

8110bc74 <strlen>:
8110bc74:	208000cc 	andi	r2,r4,3
8110bc78:	10002026 	beq	r2,zero,8110bcfc <strlen+0x88>
8110bc7c:	20800007 	ldb	r2,0(r4)
8110bc80:	10002026 	beq	r2,zero,8110bd04 <strlen+0x90>
8110bc84:	2005883a 	mov	r2,r4
8110bc88:	00000206 	br	8110bc94 <strlen+0x20>
8110bc8c:	10c00007 	ldb	r3,0(r2)
8110bc90:	18001826 	beq	r3,zero,8110bcf4 <strlen+0x80>
8110bc94:	10800044 	addi	r2,r2,1
8110bc98:	10c000cc 	andi	r3,r2,3
8110bc9c:	183ffb1e 	bne	r3,zero,8110bc8c <__reset+0xfb0ebc8c>
8110bca0:	10c00017 	ldw	r3,0(r2)
8110bca4:	01ffbff4 	movhi	r7,65279
8110bca8:	39ffbfc4 	addi	r7,r7,-257
8110bcac:	00ca303a 	nor	r5,zero,r3
8110bcb0:	01a02074 	movhi	r6,32897
8110bcb4:	19c7883a 	add	r3,r3,r7
8110bcb8:	31a02004 	addi	r6,r6,-32640
8110bcbc:	1946703a 	and	r3,r3,r5
8110bcc0:	1986703a 	and	r3,r3,r6
8110bcc4:	1800091e 	bne	r3,zero,8110bcec <strlen+0x78>
8110bcc8:	10800104 	addi	r2,r2,4
8110bccc:	10c00017 	ldw	r3,0(r2)
8110bcd0:	19cb883a 	add	r5,r3,r7
8110bcd4:	00c6303a 	nor	r3,zero,r3
8110bcd8:	28c6703a 	and	r3,r5,r3
8110bcdc:	1986703a 	and	r3,r3,r6
8110bce0:	183ff926 	beq	r3,zero,8110bcc8 <__reset+0xfb0ebcc8>
8110bce4:	00000106 	br	8110bcec <strlen+0x78>
8110bce8:	10800044 	addi	r2,r2,1
8110bcec:	10c00007 	ldb	r3,0(r2)
8110bcf0:	183ffd1e 	bne	r3,zero,8110bce8 <__reset+0xfb0ebce8>
8110bcf4:	1105c83a 	sub	r2,r2,r4
8110bcf8:	f800283a 	ret
8110bcfc:	2005883a 	mov	r2,r4
8110bd00:	003fe706 	br	8110bca0 <__reset+0xfb0ebca0>
8110bd04:	0005883a 	mov	r2,zero
8110bd08:	f800283a 	ret

8110bd0c <_strtol_r>:
8110bd0c:	00a044f4 	movhi	r2,33043
8110bd10:	defff404 	addi	sp,sp,-48
8110bd14:	10976704 	addi	r2,r2,23964
8110bd18:	dd400715 	stw	r21,28(sp)
8110bd1c:	15400017 	ldw	r21,0(r2)
8110bd20:	dd800815 	stw	r22,32(sp)
8110bd24:	dd000615 	stw	r20,24(sp)
8110bd28:	dcc00515 	stw	r19,20(sp)
8110bd2c:	d9000015 	stw	r4,0(sp)
8110bd30:	dfc00b15 	stw	ra,44(sp)
8110bd34:	df000a15 	stw	fp,40(sp)
8110bd38:	ddc00915 	stw	r23,36(sp)
8110bd3c:	dc800415 	stw	r18,16(sp)
8110bd40:	dc400315 	stw	r17,12(sp)
8110bd44:	dc000215 	stw	r16,8(sp)
8110bd48:	2829883a 	mov	r20,r5
8110bd4c:	3027883a 	mov	r19,r6
8110bd50:	382d883a 	mov	r22,r7
8110bd54:	2809883a 	mov	r4,r5
8110bd58:	24000003 	ldbu	r16,0(r4)
8110bd5c:	24400044 	addi	r17,r4,1
8110bd60:	2007883a 	mov	r3,r4
8110bd64:	ac05883a 	add	r2,r21,r16
8110bd68:	10800043 	ldbu	r2,1(r2)
8110bd6c:	8809883a 	mov	r4,r17
8110bd70:	1080020c 	andi	r2,r2,8
8110bd74:	103ff81e 	bne	r2,zero,8110bd58 <__reset+0xfb0ebd58>
8110bd78:	00800b44 	movi	r2,45
8110bd7c:	80805826 	beq	r16,r2,8110bee0 <_strtol_r+0x1d4>
8110bd80:	00800ac4 	movi	r2,43
8110bd84:	80805a26 	beq	r16,r2,8110bef0 <_strtol_r+0x1e4>
8110bd88:	0039883a 	mov	fp,zero
8110bd8c:	b0004426 	beq	r22,zero,8110bea0 <_strtol_r+0x194>
8110bd90:	00800404 	movi	r2,16
8110bd94:	b0806026 	beq	r22,r2,8110bf18 <_strtol_r+0x20c>
8110bd98:	b02f883a 	mov	r23,r22
8110bd9c:	00a00034 	movhi	r2,32768
8110bda0:	e025003a 	cmpeq	r18,fp,zero
8110bda4:	14a5c83a 	sub	r18,r2,r18
8110bda8:	b80b883a 	mov	r5,r23
8110bdac:	9009883a 	mov	r4,r18
8110bdb0:	111d5dc0 	call	8111d5dc <__umodsi3>
8110bdb4:	b80b883a 	mov	r5,r23
8110bdb8:	9009883a 	mov	r4,r18
8110bdbc:	d8800115 	stw	r2,4(sp)
8110bdc0:	111d5780 	call	8111d578 <__udivsi3>
8110bdc4:	ac07883a 	add	r3,r21,r16
8110bdc8:	18c00043 	ldbu	r3,1(r3)
8110bdcc:	880b883a 	mov	r5,r17
8110bdd0:	000d883a 	mov	r6,zero
8110bdd4:	1a00010c 	andi	r8,r3,4
8110bdd8:	0009883a 	mov	r4,zero
8110bddc:	02800044 	movi	r10,1
8110bde0:	027fffc4 	movi	r9,-1
8110bde4:	d9c00117 	ldw	r7,4(sp)
8110bde8:	40000e26 	beq	r8,zero,8110be24 <_strtol_r+0x118>
8110bdec:	843ff404 	addi	r16,r16,-48
8110bdf0:	8580120e 	bge	r16,r22,8110be3c <_strtol_r+0x130>
8110bdf4:	32400526 	beq	r6,r9,8110be0c <_strtol_r+0x100>
8110bdf8:	11002536 	bltu	r2,r4,8110be90 <_strtol_r+0x184>
8110bdfc:	20802326 	beq	r4,r2,8110be8c <_strtol_r+0x180>
8110be00:	25c9383a 	mul	r4,r4,r23
8110be04:	01800044 	movi	r6,1
8110be08:	8109883a 	add	r4,r16,r4
8110be0c:	2c000003 	ldbu	r16,0(r5)
8110be10:	29400044 	addi	r5,r5,1
8110be14:	ac07883a 	add	r3,r21,r16
8110be18:	18c00043 	ldbu	r3,1(r3)
8110be1c:	1a00010c 	andi	r8,r3,4
8110be20:	403ff21e 	bne	r8,zero,8110bdec <__reset+0xfb0ebdec>
8110be24:	18c000cc 	andi	r3,r3,3
8110be28:	18000426 	beq	r3,zero,8110be3c <_strtol_r+0x130>
8110be2c:	1a801a26 	beq	r3,r10,8110be98 <_strtol_r+0x18c>
8110be30:	00c015c4 	movi	r3,87
8110be34:	80e1c83a 	sub	r16,r16,r3
8110be38:	85bfee16 	blt	r16,r22,8110bdf4 <__reset+0xfb0ebdf4>
8110be3c:	00bfffc4 	movi	r2,-1
8110be40:	30801e26 	beq	r6,r2,8110bebc <_strtol_r+0x1b0>
8110be44:	e0001b1e 	bne	fp,zero,8110beb4 <_strtol_r+0x1a8>
8110be48:	2005883a 	mov	r2,r4
8110be4c:	98000326 	beq	r19,zero,8110be5c <_strtol_r+0x150>
8110be50:	3000211e 	bne	r6,zero,8110bed8 <_strtol_r+0x1cc>
8110be54:	a00b883a 	mov	r5,r20
8110be58:	99400015 	stw	r5,0(r19)
8110be5c:	dfc00b17 	ldw	ra,44(sp)
8110be60:	df000a17 	ldw	fp,40(sp)
8110be64:	ddc00917 	ldw	r23,36(sp)
8110be68:	dd800817 	ldw	r22,32(sp)
8110be6c:	dd400717 	ldw	r21,28(sp)
8110be70:	dd000617 	ldw	r20,24(sp)
8110be74:	dcc00517 	ldw	r19,20(sp)
8110be78:	dc800417 	ldw	r18,16(sp)
8110be7c:	dc400317 	ldw	r17,12(sp)
8110be80:	dc000217 	ldw	r16,8(sp)
8110be84:	dec00c04 	addi	sp,sp,48
8110be88:	f800283a 	ret
8110be8c:	3c3fdc0e 	bge	r7,r16,8110be00 <__reset+0xfb0ebe00>
8110be90:	01bfffc4 	movi	r6,-1
8110be94:	003fdd06 	br	8110be0c <__reset+0xfb0ebe0c>
8110be98:	00c00dc4 	movi	r3,55
8110be9c:	003fe506 	br	8110be34 <__reset+0xfb0ebe34>
8110bea0:	00800c04 	movi	r2,48
8110bea4:	80801626 	beq	r16,r2,8110bf00 <_strtol_r+0x1f4>
8110bea8:	05800284 	movi	r22,10
8110beac:	b02f883a 	mov	r23,r22
8110beb0:	003fba06 	br	8110bd9c <__reset+0xfb0ebd9c>
8110beb4:	0109c83a 	sub	r4,zero,r4
8110beb8:	003fe306 	br	8110be48 <__reset+0xfb0ebe48>
8110bebc:	d9000017 	ldw	r4,0(sp)
8110bec0:	00c00884 	movi	r3,34
8110bec4:	e005003a 	cmpeq	r2,fp,zero
8110bec8:	20c00015 	stw	r3,0(r4)
8110becc:	00e00034 	movhi	r3,32768
8110bed0:	1885c83a 	sub	r2,r3,r2
8110bed4:	983fe126 	beq	r19,zero,8110be5c <__reset+0xfb0ebe5c>
8110bed8:	297fffc4 	addi	r5,r5,-1
8110bedc:	003fde06 	br	8110be58 <__reset+0xfb0ebe58>
8110bee0:	1c400084 	addi	r17,r3,2
8110bee4:	1c000043 	ldbu	r16,1(r3)
8110bee8:	07000044 	movi	fp,1
8110beec:	003fa706 	br	8110bd8c <__reset+0xfb0ebd8c>
8110bef0:	1c400084 	addi	r17,r3,2
8110bef4:	1c000043 	ldbu	r16,1(r3)
8110bef8:	0039883a 	mov	fp,zero
8110befc:	003fa306 	br	8110bd8c <__reset+0xfb0ebd8c>
8110bf00:	88800003 	ldbu	r2,0(r17)
8110bf04:	00c01604 	movi	r3,88
8110bf08:	108037cc 	andi	r2,r2,223
8110bf0c:	10c00826 	beq	r2,r3,8110bf30 <_strtol_r+0x224>
8110bf10:	05800204 	movi	r22,8
8110bf14:	003fa006 	br	8110bd98 <__reset+0xfb0ebd98>
8110bf18:	00800c04 	movi	r2,48
8110bf1c:	80bf9e1e 	bne	r16,r2,8110bd98 <__reset+0xfb0ebd98>
8110bf20:	88800003 	ldbu	r2,0(r17)
8110bf24:	00c01604 	movi	r3,88
8110bf28:	108037cc 	andi	r2,r2,223
8110bf2c:	10ff9a1e 	bne	r2,r3,8110bd98 <__reset+0xfb0ebd98>
8110bf30:	05c00404 	movi	r23,16
8110bf34:	8c000043 	ldbu	r16,1(r17)
8110bf38:	b82d883a 	mov	r22,r23
8110bf3c:	8c400084 	addi	r17,r17,2
8110bf40:	003f9606 	br	8110bd9c <__reset+0xfb0ebd9c>

8110bf44 <strtol>:
8110bf44:	00a044f4 	movhi	r2,33043
8110bf48:	10976404 	addi	r2,r2,23952
8110bf4c:	300f883a 	mov	r7,r6
8110bf50:	280d883a 	mov	r6,r5
8110bf54:	200b883a 	mov	r5,r4
8110bf58:	11000017 	ldw	r4,0(r2)
8110bf5c:	110bd0c1 	jmpi	8110bd0c <_strtol_r>

8110bf60 <___svfprintf_internal_r>:
8110bf60:	deffb704 	addi	sp,sp,-292
8110bf64:	dfc04815 	stw	ra,288(sp)
8110bf68:	ddc04615 	stw	r23,280(sp)
8110bf6c:	d9402c15 	stw	r5,176(sp)
8110bf70:	d9003915 	stw	r4,228(sp)
8110bf74:	302f883a 	mov	r23,r6
8110bf78:	d9c02d15 	stw	r7,180(sp)
8110bf7c:	df004715 	stw	fp,284(sp)
8110bf80:	dd804515 	stw	r22,276(sp)
8110bf84:	dd404415 	stw	r21,272(sp)
8110bf88:	dd004315 	stw	r20,268(sp)
8110bf8c:	dcc04215 	stw	r19,264(sp)
8110bf90:	dc804115 	stw	r18,260(sp)
8110bf94:	dc404015 	stw	r17,256(sp)
8110bf98:	dc003f15 	stw	r16,252(sp)
8110bf9c:	1114c200 	call	81114c20 <_localeconv_r>
8110bfa0:	10800017 	ldw	r2,0(r2)
8110bfa4:	1009883a 	mov	r4,r2
8110bfa8:	d8803415 	stw	r2,208(sp)
8110bfac:	110bc740 	call	8110bc74 <strlen>
8110bfb0:	d8c02c17 	ldw	r3,176(sp)
8110bfb4:	d8803815 	stw	r2,224(sp)
8110bfb8:	1880030b 	ldhu	r2,12(r3)
8110bfbc:	1080200c 	andi	r2,r2,128
8110bfc0:	10000226 	beq	r2,zero,8110bfcc <___svfprintf_internal_r+0x6c>
8110bfc4:	18800417 	ldw	r2,16(r3)
8110bfc8:	10067f26 	beq	r2,zero,8110d9c8 <___svfprintf_internal_r+0x1a68>
8110bfcc:	dcc03917 	ldw	r19,228(sp)
8110bfd0:	d8c00404 	addi	r3,sp,16
8110bfd4:	056044f4 	movhi	r21,33043
8110bfd8:	d9001e04 	addi	r4,sp,120
8110bfdc:	ad4dd284 	addi	r21,r21,14154
8110bfe0:	d8c01e15 	stw	r3,120(sp)
8110bfe4:	d8002015 	stw	zero,128(sp)
8110bfe8:	d8001f15 	stw	zero,124(sp)
8110bfec:	d8003315 	stw	zero,204(sp)
8110bff0:	d8003615 	stw	zero,216(sp)
8110bff4:	d8003715 	stw	zero,220(sp)
8110bff8:	1811883a 	mov	r8,r3
8110bffc:	d8003a15 	stw	zero,232(sp)
8110c000:	d8003b15 	stw	zero,236(sp)
8110c004:	d8002f15 	stw	zero,188(sp)
8110c008:	d9002815 	stw	r4,160(sp)
8110c00c:	b8800007 	ldb	r2,0(r23)
8110c010:	10026726 	beq	r2,zero,8110c9b0 <___svfprintf_internal_r+0xa50>
8110c014:	00c00944 	movi	r3,37
8110c018:	b821883a 	mov	r16,r23
8110c01c:	10c0021e 	bne	r2,r3,8110c028 <___svfprintf_internal_r+0xc8>
8110c020:	00001406 	br	8110c074 <___svfprintf_internal_r+0x114>
8110c024:	10c00326 	beq	r2,r3,8110c034 <___svfprintf_internal_r+0xd4>
8110c028:	84000044 	addi	r16,r16,1
8110c02c:	80800007 	ldb	r2,0(r16)
8110c030:	103ffc1e 	bne	r2,zero,8110c024 <__reset+0xfb0ec024>
8110c034:	85e3c83a 	sub	r17,r16,r23
8110c038:	88000e26 	beq	r17,zero,8110c074 <___svfprintf_internal_r+0x114>
8110c03c:	d8c02017 	ldw	r3,128(sp)
8110c040:	d8801f17 	ldw	r2,124(sp)
8110c044:	45c00015 	stw	r23,0(r8)
8110c048:	1c47883a 	add	r3,r3,r17
8110c04c:	10800044 	addi	r2,r2,1
8110c050:	d8c02015 	stw	r3,128(sp)
8110c054:	44400115 	stw	r17,4(r8)
8110c058:	d8801f15 	stw	r2,124(sp)
8110c05c:	00c001c4 	movi	r3,7
8110c060:	18809716 	blt	r3,r2,8110c2c0 <___svfprintf_internal_r+0x360>
8110c064:	42000204 	addi	r8,r8,8
8110c068:	d9402f17 	ldw	r5,188(sp)
8110c06c:	2c4b883a 	add	r5,r5,r17
8110c070:	d9402f15 	stw	r5,188(sp)
8110c074:	80800007 	ldb	r2,0(r16)
8110c078:	10009826 	beq	r2,zero,8110c2dc <___svfprintf_internal_r+0x37c>
8110c07c:	84400047 	ldb	r17,1(r16)
8110c080:	00bfffc4 	movi	r2,-1
8110c084:	85c00044 	addi	r23,r16,1
8110c088:	d8002785 	stb	zero,158(sp)
8110c08c:	0007883a 	mov	r3,zero
8110c090:	000f883a 	mov	r7,zero
8110c094:	d8802915 	stw	r2,164(sp)
8110c098:	d8003115 	stw	zero,196(sp)
8110c09c:	0025883a 	mov	r18,zero
8110c0a0:	01401604 	movi	r5,88
8110c0a4:	01800244 	movi	r6,9
8110c0a8:	02800a84 	movi	r10,42
8110c0ac:	02401b04 	movi	r9,108
8110c0b0:	bdc00044 	addi	r23,r23,1
8110c0b4:	88bff804 	addi	r2,r17,-32
8110c0b8:	2882f036 	bltu	r5,r2,8110cc7c <___svfprintf_internal_r+0xd1c>
8110c0bc:	100490ba 	slli	r2,r2,2
8110c0c0:	01204474 	movhi	r4,33041
8110c0c4:	21303504 	addi	r4,r4,-16172
8110c0c8:	1105883a 	add	r2,r2,r4
8110c0cc:	10800017 	ldw	r2,0(r2)
8110c0d0:	1000683a 	jmp	r2
8110c0d4:	8110cbe4 	muli	r4,r16,17199
8110c0d8:	8110cc7c 	xorhi	r4,r16,17201
8110c0dc:	8110cc7c 	xorhi	r4,r16,17201
8110c0e0:	8110cbd8 	cmpnei	r4,r16,17199
8110c0e4:	8110cc7c 	xorhi	r4,r16,17201
8110c0e8:	8110cc7c 	xorhi	r4,r16,17201
8110c0ec:	8110cc7c 	xorhi	r4,r16,17201
8110c0f0:	8110cc7c 	xorhi	r4,r16,17201
8110c0f4:	8110cc7c 	xorhi	r4,r16,17201
8110c0f8:	8110cc7c 	xorhi	r4,r16,17201
8110c0fc:	8110c338 	rdprs	r4,r16,17164
8110c100:	8110cb14 	ori	r4,r16,17196
8110c104:	8110cc7c 	xorhi	r4,r16,17201
8110c108:	8110c248 	cmpgei	r4,r16,17161
8110c10c:	8110c360 	cmpeqi	r4,r16,17165
8110c110:	8110cc7c 	xorhi	r4,r16,17201
8110c114:	8110c3d4 	ori	r4,r16,17167
8110c118:	8110c3a0 	cmpeqi	r4,r16,17166
8110c11c:	8110c3a0 	cmpeqi	r4,r16,17166
8110c120:	8110c3a0 	cmpeqi	r4,r16,17166
8110c124:	8110c3a0 	cmpeqi	r4,r16,17166
8110c128:	8110c3a0 	cmpeqi	r4,r16,17166
8110c12c:	8110c3a0 	cmpeqi	r4,r16,17166
8110c130:	8110c3a0 	cmpeqi	r4,r16,17166
8110c134:	8110c3a0 	cmpeqi	r4,r16,17166
8110c138:	8110c3a0 	cmpeqi	r4,r16,17166
8110c13c:	8110cc7c 	xorhi	r4,r16,17201
8110c140:	8110cc7c 	xorhi	r4,r16,17201
8110c144:	8110cc7c 	xorhi	r4,r16,17201
8110c148:	8110cc7c 	xorhi	r4,r16,17201
8110c14c:	8110cc7c 	xorhi	r4,r16,17201
8110c150:	8110cc7c 	xorhi	r4,r16,17201
8110c154:	8110cc7c 	xorhi	r4,r16,17201
8110c158:	8110cc7c 	xorhi	r4,r16,17201
8110c15c:	8110cc7c 	xorhi	r4,r16,17201
8110c160:	8110cc7c 	xorhi	r4,r16,17201
8110c164:	8110c48c 	andi	r4,r16,17170
8110c168:	8110c3e0 	cmpeqi	r4,r16,17167
8110c16c:	8110cc7c 	xorhi	r4,r16,17201
8110c170:	8110c3e0 	cmpeqi	r4,r16,17167
8110c174:	8110cc7c 	xorhi	r4,r16,17201
8110c178:	8110cc7c 	xorhi	r4,r16,17201
8110c17c:	8110cc7c 	xorhi	r4,r16,17201
8110c180:	8110cc7c 	xorhi	r4,r16,17201
8110c184:	8110c480 	call	88110c48 <__reset+0x20f0c48>
8110c188:	8110cc7c 	xorhi	r4,r16,17201
8110c18c:	8110cc7c 	xorhi	r4,r16,17201
8110c190:	8110c548 	cmpgei	r4,r16,17173
8110c194:	8110cc7c 	xorhi	r4,r16,17201
8110c198:	8110cc7c 	xorhi	r4,r16,17201
8110c19c:	8110cc7c 	xorhi	r4,r16,17201
8110c1a0:	8110cc7c 	xorhi	r4,r16,17201
8110c1a4:	8110cc7c 	xorhi	r4,r16,17201
8110c1a8:	8110c9b8 	rdprs	r4,r16,17190
8110c1ac:	8110cc7c 	xorhi	r4,r16,17201
8110c1b0:	8110cc7c 	xorhi	r4,r16,17201
8110c1b4:	8110ca18 	cmpnei	r4,r16,17192
8110c1b8:	8110cc7c 	xorhi	r4,r16,17201
8110c1bc:	8110cc7c 	xorhi	r4,r16,17201
8110c1c0:	8110cc7c 	xorhi	r4,r16,17201
8110c1c4:	8110cc7c 	xorhi	r4,r16,17201
8110c1c8:	8110cc7c 	xorhi	r4,r16,17201
8110c1cc:	8110cc7c 	xorhi	r4,r16,17201
8110c1d0:	8110cc7c 	xorhi	r4,r16,17201
8110c1d4:	8110cc7c 	xorhi	r4,r16,17201
8110c1d8:	8110cc7c 	xorhi	r4,r16,17201
8110c1dc:	8110cc7c 	xorhi	r4,r16,17201
8110c1e0:	8110cac8 	cmpgei	r4,r16,17195
8110c1e4:	8110cc04 	addi	r4,r16,17200
8110c1e8:	8110c3e0 	cmpeqi	r4,r16,17167
8110c1ec:	8110c3e0 	cmpeqi	r4,r16,17167
8110c1f0:	8110c3e0 	cmpeqi	r4,r16,17167
8110c1f4:	8110cc58 	cmpnei	r4,r16,17201
8110c1f8:	8110cc04 	addi	r4,r16,17200
8110c1fc:	8110cc7c 	xorhi	r4,r16,17201
8110c200:	8110cc7c 	xorhi	r4,r16,17201
8110c204:	8110cc14 	ori	r4,r16,17200
8110c208:	8110cc7c 	xorhi	r4,r16,17201
8110c20c:	8110cc24 	muli	r4,r16,17200
8110c210:	8110cb04 	addi	r4,r16,17196
8110c214:	8110c254 	ori	r4,r16,17161
8110c218:	8110cb24 	muli	r4,r16,17196
8110c21c:	8110cc7c 	xorhi	r4,r16,17201
8110c220:	8110cb30 	cmpltui	r4,r16,17196
8110c224:	8110cc7c 	xorhi	r4,r16,17201
8110c228:	8110cb8c 	andi	r4,r16,17198
8110c22c:	8110cc7c 	xorhi	r4,r16,17201
8110c230:	8110cc7c 	xorhi	r4,r16,17201
8110c234:	8110cb9c 	xori	r4,r16,17198
8110c238:	d9003117 	ldw	r4,196(sp)
8110c23c:	d8802d15 	stw	r2,180(sp)
8110c240:	0109c83a 	sub	r4,zero,r4
8110c244:	d9003115 	stw	r4,196(sp)
8110c248:	94800114 	ori	r18,r18,4
8110c24c:	bc400007 	ldb	r17,0(r23)
8110c250:	003f9706 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110c254:	00800c04 	movi	r2,48
8110c258:	d9002d17 	ldw	r4,180(sp)
8110c25c:	d9402917 	ldw	r5,164(sp)
8110c260:	d8802705 	stb	r2,156(sp)
8110c264:	00801e04 	movi	r2,120
8110c268:	d8802745 	stb	r2,157(sp)
8110c26c:	d8002785 	stb	zero,158(sp)
8110c270:	20c00104 	addi	r3,r4,4
8110c274:	25000017 	ldw	r20,0(r4)
8110c278:	002d883a 	mov	r22,zero
8110c27c:	90800094 	ori	r2,r18,2
8110c280:	28028616 	blt	r5,zero,8110cc9c <___svfprintf_internal_r+0xd3c>
8110c284:	00bfdfc4 	movi	r2,-129
8110c288:	90a4703a 	and	r18,r18,r2
8110c28c:	d8c02d15 	stw	r3,180(sp)
8110c290:	94800094 	ori	r18,r18,2
8110c294:	a002731e 	bne	r20,zero,8110cc64 <___svfprintf_internal_r+0xd04>
8110c298:	00a044f4 	movhi	r2,33043
8110c29c:	108dcb04 	addi	r2,r2,14124
8110c2a0:	d8803a15 	stw	r2,232(sp)
8110c2a4:	04401e04 	movi	r17,120
8110c2a8:	d8c02917 	ldw	r3,164(sp)
8110c2ac:	0039883a 	mov	fp,zero
8110c2b0:	1801d526 	beq	r3,zero,8110ca08 <___svfprintf_internal_r+0xaa8>
8110c2b4:	0029883a 	mov	r20,zero
8110c2b8:	002d883a 	mov	r22,zero
8110c2bc:	0001f106 	br	8110ca84 <___svfprintf_internal_r+0xb24>
8110c2c0:	d9402c17 	ldw	r5,176(sp)
8110c2c4:	d9801e04 	addi	r6,sp,120
8110c2c8:	9809883a 	mov	r4,r19
8110c2cc:	111891c0 	call	8111891c <__ssprint_r>
8110c2d0:	1000081e 	bne	r2,zero,8110c2f4 <___svfprintf_internal_r+0x394>
8110c2d4:	da000404 	addi	r8,sp,16
8110c2d8:	003f6306 	br	8110c068 <__reset+0xfb0ec068>
8110c2dc:	d8802017 	ldw	r2,128(sp)
8110c2e0:	10000426 	beq	r2,zero,8110c2f4 <___svfprintf_internal_r+0x394>
8110c2e4:	d9402c17 	ldw	r5,176(sp)
8110c2e8:	d9003917 	ldw	r4,228(sp)
8110c2ec:	d9801e04 	addi	r6,sp,120
8110c2f0:	111891c0 	call	8111891c <__ssprint_r>
8110c2f4:	d8802c17 	ldw	r2,176(sp)
8110c2f8:	10c0030b 	ldhu	r3,12(r2)
8110c2fc:	d8802f17 	ldw	r2,188(sp)
8110c300:	18c0100c 	andi	r3,r3,64
8110c304:	1805f51e 	bne	r3,zero,8110dadc <___svfprintf_internal_r+0x1b7c>
8110c308:	dfc04817 	ldw	ra,288(sp)
8110c30c:	df004717 	ldw	fp,284(sp)
8110c310:	ddc04617 	ldw	r23,280(sp)
8110c314:	dd804517 	ldw	r22,276(sp)
8110c318:	dd404417 	ldw	r21,272(sp)
8110c31c:	dd004317 	ldw	r20,268(sp)
8110c320:	dcc04217 	ldw	r19,264(sp)
8110c324:	dc804117 	ldw	r18,260(sp)
8110c328:	dc404017 	ldw	r17,256(sp)
8110c32c:	dc003f17 	ldw	r16,252(sp)
8110c330:	dec04904 	addi	sp,sp,292
8110c334:	f800283a 	ret
8110c338:	d8802d17 	ldw	r2,180(sp)
8110c33c:	d9002d17 	ldw	r4,180(sp)
8110c340:	10800017 	ldw	r2,0(r2)
8110c344:	d8803115 	stw	r2,196(sp)
8110c348:	20800104 	addi	r2,r4,4
8110c34c:	d9003117 	ldw	r4,196(sp)
8110c350:	203fb916 	blt	r4,zero,8110c238 <__reset+0xfb0ec238>
8110c354:	d8802d15 	stw	r2,180(sp)
8110c358:	bc400007 	ldb	r17,0(r23)
8110c35c:	003f5406 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110c360:	bc400007 	ldb	r17,0(r23)
8110c364:	bac00044 	addi	r11,r23,1
8110c368:	8a873926 	beq	r17,r10,8110e050 <___svfprintf_internal_r+0x20f0>
8110c36c:	88bff404 	addi	r2,r17,-48
8110c370:	0009883a 	mov	r4,zero
8110c374:	30868836 	bltu	r6,r2,8110dd98 <___svfprintf_internal_r+0x1e38>
8110c378:	5c400007 	ldb	r17,0(r11)
8110c37c:	210002a4 	muli	r4,r4,10
8110c380:	5dc00044 	addi	r23,r11,1
8110c384:	b817883a 	mov	r11,r23
8110c388:	2089883a 	add	r4,r4,r2
8110c38c:	88bff404 	addi	r2,r17,-48
8110c390:	30bff92e 	bgeu	r6,r2,8110c378 <__reset+0xfb0ec378>
8110c394:	2005d716 	blt	r4,zero,8110daf4 <___svfprintf_internal_r+0x1b94>
8110c398:	d9002915 	stw	r4,164(sp)
8110c39c:	003f4506 	br	8110c0b4 <__reset+0xfb0ec0b4>
8110c3a0:	b809883a 	mov	r4,r23
8110c3a4:	d8003115 	stw	zero,196(sp)
8110c3a8:	88bff404 	addi	r2,r17,-48
8110c3ac:	0017883a 	mov	r11,zero
8110c3b0:	24400007 	ldb	r17,0(r4)
8110c3b4:	5ac002a4 	muli	r11,r11,10
8110c3b8:	bdc00044 	addi	r23,r23,1
8110c3bc:	b809883a 	mov	r4,r23
8110c3c0:	12d7883a 	add	r11,r2,r11
8110c3c4:	88bff404 	addi	r2,r17,-48
8110c3c8:	30bff92e 	bgeu	r6,r2,8110c3b0 <__reset+0xfb0ec3b0>
8110c3cc:	dac03115 	stw	r11,196(sp)
8110c3d0:	003f3806 	br	8110c0b4 <__reset+0xfb0ec0b4>
8110c3d4:	94802014 	ori	r18,r18,128
8110c3d8:	bc400007 	ldb	r17,0(r23)
8110c3dc:	003f3406 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110c3e0:	18c03fcc 	andi	r3,r3,255
8110c3e4:	1807471e 	bne	r3,zero,8110e104 <___svfprintf_internal_r+0x21a4>
8110c3e8:	9080020c 	andi	r2,r18,8
8110c3ec:	10047d26 	beq	r2,zero,8110d5e4 <___svfprintf_internal_r+0x1684>
8110c3f0:	d8c02d17 	ldw	r3,180(sp)
8110c3f4:	d9002d17 	ldw	r4,180(sp)
8110c3f8:	d9402d17 	ldw	r5,180(sp)
8110c3fc:	18c00017 	ldw	r3,0(r3)
8110c400:	21000117 	ldw	r4,4(r4)
8110c404:	29400204 	addi	r5,r5,8
8110c408:	d8c03615 	stw	r3,216(sp)
8110c40c:	d9003715 	stw	r4,220(sp)
8110c410:	d9402d15 	stw	r5,180(sp)
8110c414:	d9003617 	ldw	r4,216(sp)
8110c418:	d9403717 	ldw	r5,220(sp)
8110c41c:	da003e15 	stw	r8,248(sp)
8110c420:	04000044 	movi	r16,1
8110c424:	111683c0 	call	8111683c <__fpclassifyd>
8110c428:	da003e17 	ldw	r8,248(sp)
8110c42c:	14044b1e 	bne	r2,r16,8110d55c <___svfprintf_internal_r+0x15fc>
8110c430:	d9003617 	ldw	r4,216(sp)
8110c434:	d9403717 	ldw	r5,220(sp)
8110c438:	000d883a 	mov	r6,zero
8110c43c:	000f883a 	mov	r7,zero
8110c440:	111eb280 	call	8111eb28 <__ledf2>
8110c444:	da003e17 	ldw	r8,248(sp)
8110c448:	1005f316 	blt	r2,zero,8110dc18 <___svfprintf_internal_r+0x1cb8>
8110c44c:	df002783 	ldbu	fp,158(sp)
8110c450:	008011c4 	movi	r2,71
8110c454:	1445590e 	bge	r2,r17,8110d9bc <___svfprintf_internal_r+0x1a5c>
8110c458:	042044f4 	movhi	r16,33043
8110c45c:	840dc304 	addi	r16,r16,14092
8110c460:	00c000c4 	movi	r3,3
8110c464:	00bfdfc4 	movi	r2,-129
8110c468:	d8c02a15 	stw	r3,168(sp)
8110c46c:	90a4703a 	and	r18,r18,r2
8110c470:	d8c02e15 	stw	r3,184(sp)
8110c474:	d8002915 	stw	zero,164(sp)
8110c478:	d8003215 	stw	zero,200(sp)
8110c47c:	00006606 	br	8110c618 <___svfprintf_internal_r+0x6b8>
8110c480:	94800214 	ori	r18,r18,8
8110c484:	bc400007 	ldb	r17,0(r23)
8110c488:	003f0906 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110c48c:	18c03fcc 	andi	r3,r3,255
8110c490:	1807181e 	bne	r3,zero,8110e0f4 <___svfprintf_internal_r+0x2194>
8110c494:	94800414 	ori	r18,r18,16
8110c498:	9080080c 	andi	r2,r18,32
8110c49c:	10039626 	beq	r2,zero,8110d2f8 <___svfprintf_internal_r+0x1398>
8110c4a0:	d9402d17 	ldw	r5,180(sp)
8110c4a4:	28800117 	ldw	r2,4(r5)
8110c4a8:	2d000017 	ldw	r20,0(r5)
8110c4ac:	29400204 	addi	r5,r5,8
8110c4b0:	d9402d15 	stw	r5,180(sp)
8110c4b4:	102d883a 	mov	r22,r2
8110c4b8:	10039816 	blt	r2,zero,8110d31c <___svfprintf_internal_r+0x13bc>
8110c4bc:	d9402917 	ldw	r5,164(sp)
8110c4c0:	df002783 	ldbu	fp,158(sp)
8110c4c4:	2803ab16 	blt	r5,zero,8110d374 <___svfprintf_internal_r+0x1414>
8110c4c8:	00ffdfc4 	movi	r3,-129
8110c4cc:	a584b03a 	or	r2,r20,r22
8110c4d0:	90e4703a 	and	r18,r18,r3
8110c4d4:	10014a26 	beq	r2,zero,8110ca00 <___svfprintf_internal_r+0xaa0>
8110c4d8:	b0034b26 	beq	r22,zero,8110d208 <___svfprintf_internal_r+0x12a8>
8110c4dc:	dc402a15 	stw	r17,168(sp)
8110c4e0:	dc001e04 	addi	r16,sp,120
8110c4e4:	b023883a 	mov	r17,r22
8110c4e8:	402d883a 	mov	r22,r8
8110c4ec:	a009883a 	mov	r4,r20
8110c4f0:	880b883a 	mov	r5,r17
8110c4f4:	01800284 	movi	r6,10
8110c4f8:	000f883a 	mov	r7,zero
8110c4fc:	111cf480 	call	8111cf48 <__umoddi3>
8110c500:	10800c04 	addi	r2,r2,48
8110c504:	843fffc4 	addi	r16,r16,-1
8110c508:	a009883a 	mov	r4,r20
8110c50c:	880b883a 	mov	r5,r17
8110c510:	80800005 	stb	r2,0(r16)
8110c514:	01800284 	movi	r6,10
8110c518:	000f883a 	mov	r7,zero
8110c51c:	111c9d00 	call	8111c9d0 <__udivdi3>
8110c520:	1029883a 	mov	r20,r2
8110c524:	10c4b03a 	or	r2,r2,r3
8110c528:	1823883a 	mov	r17,r3
8110c52c:	103fef1e 	bne	r2,zero,8110c4ec <__reset+0xfb0ec4ec>
8110c530:	d8c02817 	ldw	r3,160(sp)
8110c534:	dc402a17 	ldw	r17,168(sp)
8110c538:	b011883a 	mov	r8,r22
8110c53c:	1c07c83a 	sub	r3,r3,r16
8110c540:	d8c02e15 	stw	r3,184(sp)
8110c544:	00002e06 	br	8110c600 <___svfprintf_internal_r+0x6a0>
8110c548:	18c03fcc 	andi	r3,r3,255
8110c54c:	1806e71e 	bne	r3,zero,8110e0ec <___svfprintf_internal_r+0x218c>
8110c550:	94800414 	ori	r18,r18,16
8110c554:	9080080c 	andi	r2,r18,32
8110c558:	1002d426 	beq	r2,zero,8110d0ac <___svfprintf_internal_r+0x114c>
8110c55c:	d9402d17 	ldw	r5,180(sp)
8110c560:	d8c02917 	ldw	r3,164(sp)
8110c564:	d8002785 	stb	zero,158(sp)
8110c568:	28800204 	addi	r2,r5,8
8110c56c:	2d000017 	ldw	r20,0(r5)
8110c570:	2d800117 	ldw	r22,4(r5)
8110c574:	18041516 	blt	r3,zero,8110d5cc <___svfprintf_internal_r+0x166c>
8110c578:	013fdfc4 	movi	r4,-129
8110c57c:	a586b03a 	or	r3,r20,r22
8110c580:	d8802d15 	stw	r2,180(sp)
8110c584:	9124703a 	and	r18,r18,r4
8110c588:	1802d51e 	bne	r3,zero,8110d0e0 <___svfprintf_internal_r+0x1180>
8110c58c:	d9402917 	ldw	r5,164(sp)
8110c590:	0039883a 	mov	fp,zero
8110c594:	2806be26 	beq	r5,zero,8110e090 <___svfprintf_internal_r+0x2130>
8110c598:	0029883a 	mov	r20,zero
8110c59c:	002d883a 	mov	r22,zero
8110c5a0:	dc001e04 	addi	r16,sp,120
8110c5a4:	a006d0fa 	srli	r3,r20,3
8110c5a8:	b008977a 	slli	r4,r22,29
8110c5ac:	b02cd0fa 	srli	r22,r22,3
8110c5b0:	a50001cc 	andi	r20,r20,7
8110c5b4:	a0800c04 	addi	r2,r20,48
8110c5b8:	843fffc4 	addi	r16,r16,-1
8110c5bc:	20e8b03a 	or	r20,r4,r3
8110c5c0:	80800005 	stb	r2,0(r16)
8110c5c4:	a586b03a 	or	r3,r20,r22
8110c5c8:	183ff61e 	bne	r3,zero,8110c5a4 <__reset+0xfb0ec5a4>
8110c5cc:	90c0004c 	andi	r3,r18,1
8110c5d0:	18013926 	beq	r3,zero,8110cab8 <___svfprintf_internal_r+0xb58>
8110c5d4:	10803fcc 	andi	r2,r2,255
8110c5d8:	1080201c 	xori	r2,r2,128
8110c5dc:	10bfe004 	addi	r2,r2,-128
8110c5e0:	00c00c04 	movi	r3,48
8110c5e4:	10c13426 	beq	r2,r3,8110cab8 <___svfprintf_internal_r+0xb58>
8110c5e8:	80ffffc5 	stb	r3,-1(r16)
8110c5ec:	d8c02817 	ldw	r3,160(sp)
8110c5f0:	80bfffc4 	addi	r2,r16,-1
8110c5f4:	1021883a 	mov	r16,r2
8110c5f8:	1887c83a 	sub	r3,r3,r2
8110c5fc:	d8c02e15 	stw	r3,184(sp)
8110c600:	d8802e17 	ldw	r2,184(sp)
8110c604:	d9002917 	ldw	r4,164(sp)
8110c608:	1100010e 	bge	r2,r4,8110c610 <___svfprintf_internal_r+0x6b0>
8110c60c:	2005883a 	mov	r2,r4
8110c610:	d8802a15 	stw	r2,168(sp)
8110c614:	d8003215 	stw	zero,200(sp)
8110c618:	e7003fcc 	andi	fp,fp,255
8110c61c:	e700201c 	xori	fp,fp,128
8110c620:	e73fe004 	addi	fp,fp,-128
8110c624:	e0000326 	beq	fp,zero,8110c634 <___svfprintf_internal_r+0x6d4>
8110c628:	d8c02a17 	ldw	r3,168(sp)
8110c62c:	18c00044 	addi	r3,r3,1
8110c630:	d8c02a15 	stw	r3,168(sp)
8110c634:	90c0008c 	andi	r3,r18,2
8110c638:	d8c02b15 	stw	r3,172(sp)
8110c63c:	18000326 	beq	r3,zero,8110c64c <___svfprintf_internal_r+0x6ec>
8110c640:	d8c02a17 	ldw	r3,168(sp)
8110c644:	18c00084 	addi	r3,r3,2
8110c648:	d8c02a15 	stw	r3,168(sp)
8110c64c:	90c0210c 	andi	r3,r18,132
8110c650:	d8c03015 	stw	r3,192(sp)
8110c654:	1801a11e 	bne	r3,zero,8110ccdc <___svfprintf_internal_r+0xd7c>
8110c658:	d9003117 	ldw	r4,196(sp)
8110c65c:	d8c02a17 	ldw	r3,168(sp)
8110c660:	20e9c83a 	sub	r20,r4,r3
8110c664:	05019d0e 	bge	zero,r20,8110ccdc <___svfprintf_internal_r+0xd7c>
8110c668:	02400404 	movi	r9,16
8110c66c:	d8c02017 	ldw	r3,128(sp)
8110c670:	d8801f17 	ldw	r2,124(sp)
8110c674:	4d051b0e 	bge	r9,r20,8110dae4 <___svfprintf_internal_r+0x1b84>
8110c678:	016044f4 	movhi	r5,33043
8110c67c:	294dd684 	addi	r5,r5,14170
8110c680:	dc403c15 	stw	r17,240(sp)
8110c684:	d9403515 	stw	r5,212(sp)
8110c688:	a023883a 	mov	r17,r20
8110c68c:	482d883a 	mov	r22,r9
8110c690:	9029883a 	mov	r20,r18
8110c694:	070001c4 	movi	fp,7
8110c698:	8025883a 	mov	r18,r16
8110c69c:	dc002c17 	ldw	r16,176(sp)
8110c6a0:	00000306 	br	8110c6b0 <___svfprintf_internal_r+0x750>
8110c6a4:	8c7ffc04 	addi	r17,r17,-16
8110c6a8:	42000204 	addi	r8,r8,8
8110c6ac:	b440130e 	bge	r22,r17,8110c6fc <___svfprintf_internal_r+0x79c>
8110c6b0:	012044f4 	movhi	r4,33043
8110c6b4:	18c00404 	addi	r3,r3,16
8110c6b8:	10800044 	addi	r2,r2,1
8110c6bc:	210dd684 	addi	r4,r4,14170
8110c6c0:	41000015 	stw	r4,0(r8)
8110c6c4:	45800115 	stw	r22,4(r8)
8110c6c8:	d8c02015 	stw	r3,128(sp)
8110c6cc:	d8801f15 	stw	r2,124(sp)
8110c6d0:	e0bff40e 	bge	fp,r2,8110c6a4 <__reset+0xfb0ec6a4>
8110c6d4:	d9801e04 	addi	r6,sp,120
8110c6d8:	800b883a 	mov	r5,r16
8110c6dc:	9809883a 	mov	r4,r19
8110c6e0:	111891c0 	call	8111891c <__ssprint_r>
8110c6e4:	103f031e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110c6e8:	8c7ffc04 	addi	r17,r17,-16
8110c6ec:	d8c02017 	ldw	r3,128(sp)
8110c6f0:	d8801f17 	ldw	r2,124(sp)
8110c6f4:	da000404 	addi	r8,sp,16
8110c6f8:	b47fed16 	blt	r22,r17,8110c6b0 <__reset+0xfb0ec6b0>
8110c6fc:	9021883a 	mov	r16,r18
8110c700:	a025883a 	mov	r18,r20
8110c704:	8829883a 	mov	r20,r17
8110c708:	dc403c17 	ldw	r17,240(sp)
8110c70c:	d9403517 	ldw	r5,212(sp)
8110c710:	a0c7883a 	add	r3,r20,r3
8110c714:	10800044 	addi	r2,r2,1
8110c718:	41400015 	stw	r5,0(r8)
8110c71c:	45000115 	stw	r20,4(r8)
8110c720:	d8c02015 	stw	r3,128(sp)
8110c724:	d8801f15 	stw	r2,124(sp)
8110c728:	010001c4 	movi	r4,7
8110c72c:	20829f16 	blt	r4,r2,8110d1ac <___svfprintf_internal_r+0x124c>
8110c730:	df002787 	ldb	fp,158(sp)
8110c734:	42000204 	addi	r8,r8,8
8110c738:	e0000c26 	beq	fp,zero,8110c76c <___svfprintf_internal_r+0x80c>
8110c73c:	d8801f17 	ldw	r2,124(sp)
8110c740:	d9002784 	addi	r4,sp,158
8110c744:	18c00044 	addi	r3,r3,1
8110c748:	10800044 	addi	r2,r2,1
8110c74c:	41000015 	stw	r4,0(r8)
8110c750:	01000044 	movi	r4,1
8110c754:	41000115 	stw	r4,4(r8)
8110c758:	d8c02015 	stw	r3,128(sp)
8110c75c:	d8801f15 	stw	r2,124(sp)
8110c760:	010001c4 	movi	r4,7
8110c764:	20823816 	blt	r4,r2,8110d048 <___svfprintf_internal_r+0x10e8>
8110c768:	42000204 	addi	r8,r8,8
8110c76c:	d8802b17 	ldw	r2,172(sp)
8110c770:	10000c26 	beq	r2,zero,8110c7a4 <___svfprintf_internal_r+0x844>
8110c774:	d8801f17 	ldw	r2,124(sp)
8110c778:	d9002704 	addi	r4,sp,156
8110c77c:	18c00084 	addi	r3,r3,2
8110c780:	10800044 	addi	r2,r2,1
8110c784:	41000015 	stw	r4,0(r8)
8110c788:	01000084 	movi	r4,2
8110c78c:	41000115 	stw	r4,4(r8)
8110c790:	d8c02015 	stw	r3,128(sp)
8110c794:	d8801f15 	stw	r2,124(sp)
8110c798:	010001c4 	movi	r4,7
8110c79c:	20823216 	blt	r4,r2,8110d068 <___svfprintf_internal_r+0x1108>
8110c7a0:	42000204 	addi	r8,r8,8
8110c7a4:	d9003017 	ldw	r4,192(sp)
8110c7a8:	00802004 	movi	r2,128
8110c7ac:	20819726 	beq	r4,r2,8110ce0c <___svfprintf_internal_r+0xeac>
8110c7b0:	d9402917 	ldw	r5,164(sp)
8110c7b4:	d8802e17 	ldw	r2,184(sp)
8110c7b8:	28adc83a 	sub	r22,r5,r2
8110c7bc:	05802f0e 	bge	zero,r22,8110c87c <___svfprintf_internal_r+0x91c>
8110c7c0:	07000404 	movi	fp,16
8110c7c4:	d8801f17 	ldw	r2,124(sp)
8110c7c8:	e583c00e 	bge	fp,r22,8110d6cc <___svfprintf_internal_r+0x176c>
8110c7cc:	016044f4 	movhi	r5,33043
8110c7d0:	294dd284 	addi	r5,r5,14154
8110c7d4:	dc402915 	stw	r17,164(sp)
8110c7d8:	d9402b15 	stw	r5,172(sp)
8110c7dc:	b023883a 	mov	r17,r22
8110c7e0:	050001c4 	movi	r20,7
8110c7e4:	902d883a 	mov	r22,r18
8110c7e8:	8025883a 	mov	r18,r16
8110c7ec:	dc002c17 	ldw	r16,176(sp)
8110c7f0:	00000306 	br	8110c800 <___svfprintf_internal_r+0x8a0>
8110c7f4:	8c7ffc04 	addi	r17,r17,-16
8110c7f8:	42000204 	addi	r8,r8,8
8110c7fc:	e440110e 	bge	fp,r17,8110c844 <___svfprintf_internal_r+0x8e4>
8110c800:	18c00404 	addi	r3,r3,16
8110c804:	10800044 	addi	r2,r2,1
8110c808:	45400015 	stw	r21,0(r8)
8110c80c:	47000115 	stw	fp,4(r8)
8110c810:	d8c02015 	stw	r3,128(sp)
8110c814:	d8801f15 	stw	r2,124(sp)
8110c818:	a0bff60e 	bge	r20,r2,8110c7f4 <__reset+0xfb0ec7f4>
8110c81c:	d9801e04 	addi	r6,sp,120
8110c820:	800b883a 	mov	r5,r16
8110c824:	9809883a 	mov	r4,r19
8110c828:	111891c0 	call	8111891c <__ssprint_r>
8110c82c:	103eb11e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110c830:	8c7ffc04 	addi	r17,r17,-16
8110c834:	d8c02017 	ldw	r3,128(sp)
8110c838:	d8801f17 	ldw	r2,124(sp)
8110c83c:	da000404 	addi	r8,sp,16
8110c840:	e47fef16 	blt	fp,r17,8110c800 <__reset+0xfb0ec800>
8110c844:	9021883a 	mov	r16,r18
8110c848:	b025883a 	mov	r18,r22
8110c84c:	882d883a 	mov	r22,r17
8110c850:	dc402917 	ldw	r17,164(sp)
8110c854:	d9002b17 	ldw	r4,172(sp)
8110c858:	1d87883a 	add	r3,r3,r22
8110c85c:	10800044 	addi	r2,r2,1
8110c860:	41000015 	stw	r4,0(r8)
8110c864:	45800115 	stw	r22,4(r8)
8110c868:	d8c02015 	stw	r3,128(sp)
8110c86c:	d8801f15 	stw	r2,124(sp)
8110c870:	010001c4 	movi	r4,7
8110c874:	2081ec16 	blt	r4,r2,8110d028 <___svfprintf_internal_r+0x10c8>
8110c878:	42000204 	addi	r8,r8,8
8110c87c:	9080400c 	andi	r2,r18,256
8110c880:	1001181e 	bne	r2,zero,8110cce4 <___svfprintf_internal_r+0xd84>
8110c884:	d9402e17 	ldw	r5,184(sp)
8110c888:	d8801f17 	ldw	r2,124(sp)
8110c88c:	44000015 	stw	r16,0(r8)
8110c890:	1947883a 	add	r3,r3,r5
8110c894:	10800044 	addi	r2,r2,1
8110c898:	41400115 	stw	r5,4(r8)
8110c89c:	d8c02015 	stw	r3,128(sp)
8110c8a0:	d8801f15 	stw	r2,124(sp)
8110c8a4:	010001c4 	movi	r4,7
8110c8a8:	2081d116 	blt	r4,r2,8110cff0 <___svfprintf_internal_r+0x1090>
8110c8ac:	42000204 	addi	r8,r8,8
8110c8b0:	9480010c 	andi	r18,r18,4
8110c8b4:	90003226 	beq	r18,zero,8110c980 <___svfprintf_internal_r+0xa20>
8110c8b8:	d9403117 	ldw	r5,196(sp)
8110c8bc:	d8802a17 	ldw	r2,168(sp)
8110c8c0:	28a1c83a 	sub	r16,r5,r2
8110c8c4:	04002e0e 	bge	zero,r16,8110c980 <___svfprintf_internal_r+0xa20>
8110c8c8:	04400404 	movi	r17,16
8110c8cc:	d8801f17 	ldw	r2,124(sp)
8110c8d0:	8c04b90e 	bge	r17,r16,8110dbb8 <___svfprintf_internal_r+0x1c58>
8110c8d4:	016044f4 	movhi	r5,33043
8110c8d8:	294dd684 	addi	r5,r5,14170
8110c8dc:	d9403515 	stw	r5,212(sp)
8110c8e0:	048001c4 	movi	r18,7
8110c8e4:	dd002c17 	ldw	r20,176(sp)
8110c8e8:	00000306 	br	8110c8f8 <___svfprintf_internal_r+0x998>
8110c8ec:	843ffc04 	addi	r16,r16,-16
8110c8f0:	42000204 	addi	r8,r8,8
8110c8f4:	8c00130e 	bge	r17,r16,8110c944 <___svfprintf_internal_r+0x9e4>
8110c8f8:	012044f4 	movhi	r4,33043
8110c8fc:	18c00404 	addi	r3,r3,16
8110c900:	10800044 	addi	r2,r2,1
8110c904:	210dd684 	addi	r4,r4,14170
8110c908:	41000015 	stw	r4,0(r8)
8110c90c:	44400115 	stw	r17,4(r8)
8110c910:	d8c02015 	stw	r3,128(sp)
8110c914:	d8801f15 	stw	r2,124(sp)
8110c918:	90bff40e 	bge	r18,r2,8110c8ec <__reset+0xfb0ec8ec>
8110c91c:	d9801e04 	addi	r6,sp,120
8110c920:	a00b883a 	mov	r5,r20
8110c924:	9809883a 	mov	r4,r19
8110c928:	111891c0 	call	8111891c <__ssprint_r>
8110c92c:	103e711e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110c930:	843ffc04 	addi	r16,r16,-16
8110c934:	d8c02017 	ldw	r3,128(sp)
8110c938:	d8801f17 	ldw	r2,124(sp)
8110c93c:	da000404 	addi	r8,sp,16
8110c940:	8c3fed16 	blt	r17,r16,8110c8f8 <__reset+0xfb0ec8f8>
8110c944:	d9403517 	ldw	r5,212(sp)
8110c948:	1c07883a 	add	r3,r3,r16
8110c94c:	10800044 	addi	r2,r2,1
8110c950:	41400015 	stw	r5,0(r8)
8110c954:	44000115 	stw	r16,4(r8)
8110c958:	d8c02015 	stw	r3,128(sp)
8110c95c:	d8801f15 	stw	r2,124(sp)
8110c960:	010001c4 	movi	r4,7
8110c964:	2080060e 	bge	r4,r2,8110c980 <___svfprintf_internal_r+0xa20>
8110c968:	d9402c17 	ldw	r5,176(sp)
8110c96c:	d9801e04 	addi	r6,sp,120
8110c970:	9809883a 	mov	r4,r19
8110c974:	111891c0 	call	8111891c <__ssprint_r>
8110c978:	103e5e1e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110c97c:	d8c02017 	ldw	r3,128(sp)
8110c980:	d8803117 	ldw	r2,196(sp)
8110c984:	d9002a17 	ldw	r4,168(sp)
8110c988:	1100010e 	bge	r2,r4,8110c990 <___svfprintf_internal_r+0xa30>
8110c98c:	2005883a 	mov	r2,r4
8110c990:	d9402f17 	ldw	r5,188(sp)
8110c994:	288b883a 	add	r5,r5,r2
8110c998:	d9402f15 	stw	r5,188(sp)
8110c99c:	18019c1e 	bne	r3,zero,8110d010 <___svfprintf_internal_r+0x10b0>
8110c9a0:	b8800007 	ldb	r2,0(r23)
8110c9a4:	d8001f15 	stw	zero,124(sp)
8110c9a8:	da000404 	addi	r8,sp,16
8110c9ac:	103d991e 	bne	r2,zero,8110c014 <__reset+0xfb0ec014>
8110c9b0:	b821883a 	mov	r16,r23
8110c9b4:	003daf06 	br	8110c074 <__reset+0xfb0ec074>
8110c9b8:	18c03fcc 	andi	r3,r3,255
8110c9bc:	1805c71e 	bne	r3,zero,8110e0dc <___svfprintf_internal_r+0x217c>
8110c9c0:	94800414 	ori	r18,r18,16
8110c9c4:	9080080c 	andi	r2,r18,32
8110c9c8:	10020126 	beq	r2,zero,8110d1d0 <___svfprintf_internal_r+0x1270>
8110c9cc:	d8802d17 	ldw	r2,180(sp)
8110c9d0:	d9002917 	ldw	r4,164(sp)
8110c9d4:	d8002785 	stb	zero,158(sp)
8110c9d8:	10c00204 	addi	r3,r2,8
8110c9dc:	15000017 	ldw	r20,0(r2)
8110c9e0:	15800117 	ldw	r22,4(r2)
8110c9e4:	20038e16 	blt	r4,zero,8110d820 <___svfprintf_internal_r+0x18c0>
8110c9e8:	013fdfc4 	movi	r4,-129
8110c9ec:	a584b03a 	or	r2,r20,r22
8110c9f0:	d8c02d15 	stw	r3,180(sp)
8110c9f4:	9124703a 	and	r18,r18,r4
8110c9f8:	0039883a 	mov	fp,zero
8110c9fc:	103eb61e 	bne	r2,zero,8110c4d8 <__reset+0xfb0ec4d8>
8110ca00:	d8802917 	ldw	r2,164(sp)
8110ca04:	1002c81e 	bne	r2,zero,8110d528 <___svfprintf_internal_r+0x15c8>
8110ca08:	d8002915 	stw	zero,164(sp)
8110ca0c:	d8002e15 	stw	zero,184(sp)
8110ca10:	dc001e04 	addi	r16,sp,120
8110ca14:	003efa06 	br	8110c600 <__reset+0xfb0ec600>
8110ca18:	18c03fcc 	andi	r3,r3,255
8110ca1c:	1805ad1e 	bne	r3,zero,8110e0d4 <___svfprintf_internal_r+0x2174>
8110ca20:	016044f4 	movhi	r5,33043
8110ca24:	294dc604 	addi	r5,r5,14104
8110ca28:	d9403a15 	stw	r5,232(sp)
8110ca2c:	9080080c 	andi	r2,r18,32
8110ca30:	10006126 	beq	r2,zero,8110cbb8 <___svfprintf_internal_r+0xc58>
8110ca34:	d8802d17 	ldw	r2,180(sp)
8110ca38:	15000017 	ldw	r20,0(r2)
8110ca3c:	15800117 	ldw	r22,4(r2)
8110ca40:	10800204 	addi	r2,r2,8
8110ca44:	d8802d15 	stw	r2,180(sp)
8110ca48:	9080004c 	andi	r2,r18,1
8110ca4c:	10018e26 	beq	r2,zero,8110d088 <___svfprintf_internal_r+0x1128>
8110ca50:	a584b03a 	or	r2,r20,r22
8110ca54:	10030926 	beq	r2,zero,8110d67c <___svfprintf_internal_r+0x171c>
8110ca58:	d8c02917 	ldw	r3,164(sp)
8110ca5c:	00800c04 	movi	r2,48
8110ca60:	d8802705 	stb	r2,156(sp)
8110ca64:	dc402745 	stb	r17,157(sp)
8110ca68:	d8002785 	stb	zero,158(sp)
8110ca6c:	90800094 	ori	r2,r18,2
8110ca70:	18048716 	blt	r3,zero,8110dc90 <___svfprintf_internal_r+0x1d30>
8110ca74:	00bfdfc4 	movi	r2,-129
8110ca78:	90a4703a 	and	r18,r18,r2
8110ca7c:	94800094 	ori	r18,r18,2
8110ca80:	0039883a 	mov	fp,zero
8110ca84:	d9003a17 	ldw	r4,232(sp)
8110ca88:	dc001e04 	addi	r16,sp,120
8110ca8c:	a08003cc 	andi	r2,r20,15
8110ca90:	b006973a 	slli	r3,r22,28
8110ca94:	2085883a 	add	r2,r4,r2
8110ca98:	a028d13a 	srli	r20,r20,4
8110ca9c:	10800003 	ldbu	r2,0(r2)
8110caa0:	b02cd13a 	srli	r22,r22,4
8110caa4:	843fffc4 	addi	r16,r16,-1
8110caa8:	1d28b03a 	or	r20,r3,r20
8110caac:	80800005 	stb	r2,0(r16)
8110cab0:	a584b03a 	or	r2,r20,r22
8110cab4:	103ff51e 	bne	r2,zero,8110ca8c <__reset+0xfb0eca8c>
8110cab8:	d8c02817 	ldw	r3,160(sp)
8110cabc:	1c07c83a 	sub	r3,r3,r16
8110cac0:	d8c02e15 	stw	r3,184(sp)
8110cac4:	003ece06 	br	8110c600 <__reset+0xfb0ec600>
8110cac8:	d8c02d17 	ldw	r3,180(sp)
8110cacc:	d9002d17 	ldw	r4,180(sp)
8110cad0:	d8002785 	stb	zero,158(sp)
8110cad4:	18800017 	ldw	r2,0(r3)
8110cad8:	21000104 	addi	r4,r4,4
8110cadc:	00c00044 	movi	r3,1
8110cae0:	d8c02a15 	stw	r3,168(sp)
8110cae4:	d8801405 	stb	r2,80(sp)
8110cae8:	d9002d15 	stw	r4,180(sp)
8110caec:	d8c02e15 	stw	r3,184(sp)
8110caf0:	d8002915 	stw	zero,164(sp)
8110caf4:	d8003215 	stw	zero,200(sp)
8110caf8:	dc001404 	addi	r16,sp,80
8110cafc:	0039883a 	mov	fp,zero
8110cb00:	003ecc06 	br	8110c634 <__reset+0xfb0ec634>
8110cb04:	18c03fcc 	andi	r3,r3,255
8110cb08:	183e9226 	beq	r3,zero,8110c554 <__reset+0xfb0ec554>
8110cb0c:	d9c02785 	stb	r7,158(sp)
8110cb10:	003e9006 	br	8110c554 <__reset+0xfb0ec554>
8110cb14:	00c00044 	movi	r3,1
8110cb18:	01c00ac4 	movi	r7,43
8110cb1c:	bc400007 	ldb	r17,0(r23)
8110cb20:	003d6306 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110cb24:	94800814 	ori	r18,r18,32
8110cb28:	bc400007 	ldb	r17,0(r23)
8110cb2c:	003d6006 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110cb30:	d8c02d17 	ldw	r3,180(sp)
8110cb34:	d8002785 	stb	zero,158(sp)
8110cb38:	1c000017 	ldw	r16,0(r3)
8110cb3c:	1d000104 	addi	r20,r3,4
8110cb40:	80040f26 	beq	r16,zero,8110db80 <___svfprintf_internal_r+0x1c20>
8110cb44:	d9002917 	ldw	r4,164(sp)
8110cb48:	2003dc16 	blt	r4,zero,8110dabc <___svfprintf_internal_r+0x1b5c>
8110cb4c:	200d883a 	mov	r6,r4
8110cb50:	000b883a 	mov	r5,zero
8110cb54:	8009883a 	mov	r4,r16
8110cb58:	da003e15 	stw	r8,248(sp)
8110cb5c:	1114ed40 	call	81114ed4 <memchr>
8110cb60:	da003e17 	ldw	r8,248(sp)
8110cb64:	10045826 	beq	r2,zero,8110dcc8 <___svfprintf_internal_r+0x1d68>
8110cb68:	1405c83a 	sub	r2,r2,r16
8110cb6c:	d8802e15 	stw	r2,184(sp)
8110cb70:	1003d816 	blt	r2,zero,8110dad4 <___svfprintf_internal_r+0x1b74>
8110cb74:	df002783 	ldbu	fp,158(sp)
8110cb78:	d8802a15 	stw	r2,168(sp)
8110cb7c:	dd002d15 	stw	r20,180(sp)
8110cb80:	d8002915 	stw	zero,164(sp)
8110cb84:	d8003215 	stw	zero,200(sp)
8110cb88:	003ea306 	br	8110c618 <__reset+0xfb0ec618>
8110cb8c:	18c03fcc 	andi	r3,r3,255
8110cb90:	183f8c26 	beq	r3,zero,8110c9c4 <__reset+0xfb0ec9c4>
8110cb94:	d9c02785 	stb	r7,158(sp)
8110cb98:	003f8a06 	br	8110c9c4 <__reset+0xfb0ec9c4>
8110cb9c:	18c03fcc 	andi	r3,r3,255
8110cba0:	1805631e 	bne	r3,zero,8110e130 <___svfprintf_internal_r+0x21d0>
8110cba4:	016044f4 	movhi	r5,33043
8110cba8:	294dcb04 	addi	r5,r5,14124
8110cbac:	d9403a15 	stw	r5,232(sp)
8110cbb0:	9080080c 	andi	r2,r18,32
8110cbb4:	103f9f1e 	bne	r2,zero,8110ca34 <__reset+0xfb0eca34>
8110cbb8:	9080040c 	andi	r2,r18,16
8110cbbc:	10029c26 	beq	r2,zero,8110d630 <___svfprintf_internal_r+0x16d0>
8110cbc0:	d8c02d17 	ldw	r3,180(sp)
8110cbc4:	002d883a 	mov	r22,zero
8110cbc8:	1d000017 	ldw	r20,0(r3)
8110cbcc:	18c00104 	addi	r3,r3,4
8110cbd0:	d8c02d15 	stw	r3,180(sp)
8110cbd4:	003f9c06 	br	8110ca48 <__reset+0xfb0eca48>
8110cbd8:	94800054 	ori	r18,r18,1
8110cbdc:	bc400007 	ldb	r17,0(r23)
8110cbe0:	003d3306 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110cbe4:	38803fcc 	andi	r2,r7,255
8110cbe8:	1080201c 	xori	r2,r2,128
8110cbec:	10bfe004 	addi	r2,r2,-128
8110cbf0:	1002971e 	bne	r2,zero,8110d650 <___svfprintf_internal_r+0x16f0>
8110cbf4:	00c00044 	movi	r3,1
8110cbf8:	01c00804 	movi	r7,32
8110cbfc:	bc400007 	ldb	r17,0(r23)
8110cc00:	003d2b06 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110cc04:	18c03fcc 	andi	r3,r3,255
8110cc08:	183e2326 	beq	r3,zero,8110c498 <__reset+0xfb0ec498>
8110cc0c:	d9c02785 	stb	r7,158(sp)
8110cc10:	003e2106 	br	8110c498 <__reset+0xfb0ec498>
8110cc14:	bc400007 	ldb	r17,0(r23)
8110cc18:	8a430426 	beq	r17,r9,8110d82c <___svfprintf_internal_r+0x18cc>
8110cc1c:	94800414 	ori	r18,r18,16
8110cc20:	003d2306 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110cc24:	18c03fcc 	andi	r3,r3,255
8110cc28:	18053f1e 	bne	r3,zero,8110e128 <___svfprintf_internal_r+0x21c8>
8110cc2c:	9080080c 	andi	r2,r18,32
8110cc30:	10028926 	beq	r2,zero,8110d658 <___svfprintf_internal_r+0x16f8>
8110cc34:	d9402d17 	ldw	r5,180(sp)
8110cc38:	d9002f17 	ldw	r4,188(sp)
8110cc3c:	28800017 	ldw	r2,0(r5)
8110cc40:	2007d7fa 	srai	r3,r4,31
8110cc44:	29400104 	addi	r5,r5,4
8110cc48:	d9402d15 	stw	r5,180(sp)
8110cc4c:	11000015 	stw	r4,0(r2)
8110cc50:	10c00115 	stw	r3,4(r2)
8110cc54:	003ced06 	br	8110c00c <__reset+0xfb0ec00c>
8110cc58:	94801014 	ori	r18,r18,64
8110cc5c:	bc400007 	ldb	r17,0(r23)
8110cc60:	003d1306 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110cc64:	012044f4 	movhi	r4,33043
8110cc68:	210dcb04 	addi	r4,r4,14124
8110cc6c:	0039883a 	mov	fp,zero
8110cc70:	d9003a15 	stw	r4,232(sp)
8110cc74:	04401e04 	movi	r17,120
8110cc78:	003f8206 	br	8110ca84 <__reset+0xfb0eca84>
8110cc7c:	18c03fcc 	andi	r3,r3,255
8110cc80:	1805221e 	bne	r3,zero,8110e10c <___svfprintf_internal_r+0x21ac>
8110cc84:	883d9526 	beq	r17,zero,8110c2dc <__reset+0xfb0ec2dc>
8110cc88:	00c00044 	movi	r3,1
8110cc8c:	d8c02a15 	stw	r3,168(sp)
8110cc90:	dc401405 	stb	r17,80(sp)
8110cc94:	d8002785 	stb	zero,158(sp)
8110cc98:	003f9406 	br	8110caec <__reset+0xfb0ecaec>
8110cc9c:	012044f4 	movhi	r4,33043
8110cca0:	210dcb04 	addi	r4,r4,14124
8110cca4:	d9003a15 	stw	r4,232(sp)
8110cca8:	d8c02d15 	stw	r3,180(sp)
8110ccac:	1025883a 	mov	r18,r2
8110ccb0:	04401e04 	movi	r17,120
8110ccb4:	a584b03a 	or	r2,r20,r22
8110ccb8:	1000fa1e 	bne	r2,zero,8110d0a4 <___svfprintf_internal_r+0x1144>
8110ccbc:	0039883a 	mov	fp,zero
8110ccc0:	00800084 	movi	r2,2
8110ccc4:	10803fcc 	andi	r2,r2,255
8110ccc8:	00c00044 	movi	r3,1
8110cccc:	10c21626 	beq	r2,r3,8110d528 <___svfprintf_internal_r+0x15c8>
8110ccd0:	00c00084 	movi	r3,2
8110ccd4:	10fe301e 	bne	r2,r3,8110c598 <__reset+0xfb0ec598>
8110ccd8:	003d7606 	br	8110c2b4 <__reset+0xfb0ec2b4>
8110ccdc:	d8c02017 	ldw	r3,128(sp)
8110cce0:	003e9506 	br	8110c738 <__reset+0xfb0ec738>
8110cce4:	00801944 	movi	r2,101
8110cce8:	14407c0e 	bge	r2,r17,8110cedc <___svfprintf_internal_r+0xf7c>
8110ccec:	d9003617 	ldw	r4,216(sp)
8110ccf0:	d9403717 	ldw	r5,220(sp)
8110ccf4:	000d883a 	mov	r6,zero
8110ccf8:	000f883a 	mov	r7,zero
8110ccfc:	d8c03d15 	stw	r3,244(sp)
8110cd00:	da003e15 	stw	r8,248(sp)
8110cd04:	111e9c40 	call	8111e9c4 <__eqdf2>
8110cd08:	d8c03d17 	ldw	r3,244(sp)
8110cd0c:	da003e17 	ldw	r8,248(sp)
8110cd10:	1000f51e 	bne	r2,zero,8110d0e8 <___svfprintf_internal_r+0x1188>
8110cd14:	d8801f17 	ldw	r2,124(sp)
8110cd18:	012044f4 	movhi	r4,33043
8110cd1c:	210dd204 	addi	r4,r4,14152
8110cd20:	18c00044 	addi	r3,r3,1
8110cd24:	10800044 	addi	r2,r2,1
8110cd28:	41000015 	stw	r4,0(r8)
8110cd2c:	01000044 	movi	r4,1
8110cd30:	41000115 	stw	r4,4(r8)
8110cd34:	d8c02015 	stw	r3,128(sp)
8110cd38:	d8801f15 	stw	r2,124(sp)
8110cd3c:	010001c4 	movi	r4,7
8110cd40:	20826616 	blt	r4,r2,8110d6dc <___svfprintf_internal_r+0x177c>
8110cd44:	42000204 	addi	r8,r8,8
8110cd48:	d8802617 	ldw	r2,152(sp)
8110cd4c:	d9403317 	ldw	r5,204(sp)
8110cd50:	11400216 	blt	r2,r5,8110cd5c <___svfprintf_internal_r+0xdfc>
8110cd54:	9080004c 	andi	r2,r18,1
8110cd58:	103ed526 	beq	r2,zero,8110c8b0 <__reset+0xfb0ec8b0>
8110cd5c:	d8803817 	ldw	r2,224(sp)
8110cd60:	d9003417 	ldw	r4,208(sp)
8110cd64:	d9403817 	ldw	r5,224(sp)
8110cd68:	1887883a 	add	r3,r3,r2
8110cd6c:	d8801f17 	ldw	r2,124(sp)
8110cd70:	41000015 	stw	r4,0(r8)
8110cd74:	41400115 	stw	r5,4(r8)
8110cd78:	10800044 	addi	r2,r2,1
8110cd7c:	d8c02015 	stw	r3,128(sp)
8110cd80:	d8801f15 	stw	r2,124(sp)
8110cd84:	010001c4 	movi	r4,7
8110cd88:	2082af16 	blt	r4,r2,8110d848 <___svfprintf_internal_r+0x18e8>
8110cd8c:	42000204 	addi	r8,r8,8
8110cd90:	d8803317 	ldw	r2,204(sp)
8110cd94:	143fffc4 	addi	r16,r2,-1
8110cd98:	043ec50e 	bge	zero,r16,8110c8b0 <__reset+0xfb0ec8b0>
8110cd9c:	04400404 	movi	r17,16
8110cda0:	d8801f17 	ldw	r2,124(sp)
8110cda4:	8c00860e 	bge	r17,r16,8110cfc0 <___svfprintf_internal_r+0x1060>
8110cda8:	016044f4 	movhi	r5,33043
8110cdac:	294dd284 	addi	r5,r5,14154
8110cdb0:	d9402b15 	stw	r5,172(sp)
8110cdb4:	058001c4 	movi	r22,7
8110cdb8:	dd002c17 	ldw	r20,176(sp)
8110cdbc:	00000306 	br	8110cdcc <___svfprintf_internal_r+0xe6c>
8110cdc0:	42000204 	addi	r8,r8,8
8110cdc4:	843ffc04 	addi	r16,r16,-16
8110cdc8:	8c00800e 	bge	r17,r16,8110cfcc <___svfprintf_internal_r+0x106c>
8110cdcc:	18c00404 	addi	r3,r3,16
8110cdd0:	10800044 	addi	r2,r2,1
8110cdd4:	45400015 	stw	r21,0(r8)
8110cdd8:	44400115 	stw	r17,4(r8)
8110cddc:	d8c02015 	stw	r3,128(sp)
8110cde0:	d8801f15 	stw	r2,124(sp)
8110cde4:	b0bff60e 	bge	r22,r2,8110cdc0 <__reset+0xfb0ecdc0>
8110cde8:	d9801e04 	addi	r6,sp,120
8110cdec:	a00b883a 	mov	r5,r20
8110cdf0:	9809883a 	mov	r4,r19
8110cdf4:	111891c0 	call	8111891c <__ssprint_r>
8110cdf8:	103d3e1e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110cdfc:	d8c02017 	ldw	r3,128(sp)
8110ce00:	d8801f17 	ldw	r2,124(sp)
8110ce04:	da000404 	addi	r8,sp,16
8110ce08:	003fee06 	br	8110cdc4 <__reset+0xfb0ecdc4>
8110ce0c:	d9403117 	ldw	r5,196(sp)
8110ce10:	d8802a17 	ldw	r2,168(sp)
8110ce14:	28adc83a 	sub	r22,r5,r2
8110ce18:	05be650e 	bge	zero,r22,8110c7b0 <__reset+0xfb0ec7b0>
8110ce1c:	07000404 	movi	fp,16
8110ce20:	d8801f17 	ldw	r2,124(sp)
8110ce24:	e583a20e 	bge	fp,r22,8110dcb0 <___svfprintf_internal_r+0x1d50>
8110ce28:	016044f4 	movhi	r5,33043
8110ce2c:	294dd284 	addi	r5,r5,14154
8110ce30:	dc403015 	stw	r17,192(sp)
8110ce34:	d9402b15 	stw	r5,172(sp)
8110ce38:	b023883a 	mov	r17,r22
8110ce3c:	050001c4 	movi	r20,7
8110ce40:	902d883a 	mov	r22,r18
8110ce44:	8025883a 	mov	r18,r16
8110ce48:	dc002c17 	ldw	r16,176(sp)
8110ce4c:	00000306 	br	8110ce5c <___svfprintf_internal_r+0xefc>
8110ce50:	8c7ffc04 	addi	r17,r17,-16
8110ce54:	42000204 	addi	r8,r8,8
8110ce58:	e440110e 	bge	fp,r17,8110cea0 <___svfprintf_internal_r+0xf40>
8110ce5c:	18c00404 	addi	r3,r3,16
8110ce60:	10800044 	addi	r2,r2,1
8110ce64:	45400015 	stw	r21,0(r8)
8110ce68:	47000115 	stw	fp,4(r8)
8110ce6c:	d8c02015 	stw	r3,128(sp)
8110ce70:	d8801f15 	stw	r2,124(sp)
8110ce74:	a0bff60e 	bge	r20,r2,8110ce50 <__reset+0xfb0ece50>
8110ce78:	d9801e04 	addi	r6,sp,120
8110ce7c:	800b883a 	mov	r5,r16
8110ce80:	9809883a 	mov	r4,r19
8110ce84:	111891c0 	call	8111891c <__ssprint_r>
8110ce88:	103d1a1e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110ce8c:	8c7ffc04 	addi	r17,r17,-16
8110ce90:	d8c02017 	ldw	r3,128(sp)
8110ce94:	d8801f17 	ldw	r2,124(sp)
8110ce98:	da000404 	addi	r8,sp,16
8110ce9c:	e47fef16 	blt	fp,r17,8110ce5c <__reset+0xfb0ece5c>
8110cea0:	9021883a 	mov	r16,r18
8110cea4:	b025883a 	mov	r18,r22
8110cea8:	882d883a 	mov	r22,r17
8110ceac:	dc403017 	ldw	r17,192(sp)
8110ceb0:	d9002b17 	ldw	r4,172(sp)
8110ceb4:	1d87883a 	add	r3,r3,r22
8110ceb8:	10800044 	addi	r2,r2,1
8110cebc:	41000015 	stw	r4,0(r8)
8110cec0:	45800115 	stw	r22,4(r8)
8110cec4:	d8c02015 	stw	r3,128(sp)
8110cec8:	d8801f15 	stw	r2,124(sp)
8110cecc:	010001c4 	movi	r4,7
8110ced0:	20819a16 	blt	r4,r2,8110d53c <___svfprintf_internal_r+0x15dc>
8110ced4:	42000204 	addi	r8,r8,8
8110ced8:	003e3506 	br	8110c7b0 <__reset+0xfb0ec7b0>
8110cedc:	d9403317 	ldw	r5,204(sp)
8110cee0:	00800044 	movi	r2,1
8110cee4:	18c00044 	addi	r3,r3,1
8110cee8:	1141710e 	bge	r2,r5,8110d4b0 <___svfprintf_internal_r+0x1550>
8110ceec:	dc401f17 	ldw	r17,124(sp)
8110cef0:	00800044 	movi	r2,1
8110cef4:	40800115 	stw	r2,4(r8)
8110cef8:	8c400044 	addi	r17,r17,1
8110cefc:	44000015 	stw	r16,0(r8)
8110cf00:	d8c02015 	stw	r3,128(sp)
8110cf04:	dc401f15 	stw	r17,124(sp)
8110cf08:	008001c4 	movi	r2,7
8110cf0c:	14417416 	blt	r2,r17,8110d4e0 <___svfprintf_internal_r+0x1580>
8110cf10:	42000204 	addi	r8,r8,8
8110cf14:	d8803817 	ldw	r2,224(sp)
8110cf18:	d9003417 	ldw	r4,208(sp)
8110cf1c:	8c400044 	addi	r17,r17,1
8110cf20:	10c7883a 	add	r3,r2,r3
8110cf24:	40800115 	stw	r2,4(r8)
8110cf28:	41000015 	stw	r4,0(r8)
8110cf2c:	d8c02015 	stw	r3,128(sp)
8110cf30:	dc401f15 	stw	r17,124(sp)
8110cf34:	008001c4 	movi	r2,7
8110cf38:	14417216 	blt	r2,r17,8110d504 <___svfprintf_internal_r+0x15a4>
8110cf3c:	45800204 	addi	r22,r8,8
8110cf40:	d9003617 	ldw	r4,216(sp)
8110cf44:	d9403717 	ldw	r5,220(sp)
8110cf48:	000d883a 	mov	r6,zero
8110cf4c:	000f883a 	mov	r7,zero
8110cf50:	d8c03d15 	stw	r3,244(sp)
8110cf54:	111e9c40 	call	8111e9c4 <__eqdf2>
8110cf58:	d8c03d17 	ldw	r3,244(sp)
8110cf5c:	1000b326 	beq	r2,zero,8110d22c <___svfprintf_internal_r+0x12cc>
8110cf60:	d9403317 	ldw	r5,204(sp)
8110cf64:	84000044 	addi	r16,r16,1
8110cf68:	8c400044 	addi	r17,r17,1
8110cf6c:	28bfffc4 	addi	r2,r5,-1
8110cf70:	1887883a 	add	r3,r3,r2
8110cf74:	b0800115 	stw	r2,4(r22)
8110cf78:	b4000015 	stw	r16,0(r22)
8110cf7c:	d8c02015 	stw	r3,128(sp)
8110cf80:	dc401f15 	stw	r17,124(sp)
8110cf84:	008001c4 	movi	r2,7
8110cf88:	1440d216 	blt	r2,r17,8110d2d4 <___svfprintf_internal_r+0x1374>
8110cf8c:	b5800204 	addi	r22,r22,8
8110cf90:	d9003b17 	ldw	r4,236(sp)
8110cf94:	df0022c4 	addi	fp,sp,139
8110cf98:	8c400044 	addi	r17,r17,1
8110cf9c:	20c7883a 	add	r3,r4,r3
8110cfa0:	b7000015 	stw	fp,0(r22)
8110cfa4:	b1000115 	stw	r4,4(r22)
8110cfa8:	d8c02015 	stw	r3,128(sp)
8110cfac:	dc401f15 	stw	r17,124(sp)
8110cfb0:	008001c4 	movi	r2,7
8110cfb4:	14400e16 	blt	r2,r17,8110cff0 <___svfprintf_internal_r+0x1090>
8110cfb8:	b2000204 	addi	r8,r22,8
8110cfbc:	003e3c06 	br	8110c8b0 <__reset+0xfb0ec8b0>
8110cfc0:	012044f4 	movhi	r4,33043
8110cfc4:	210dd284 	addi	r4,r4,14154
8110cfc8:	d9002b15 	stw	r4,172(sp)
8110cfcc:	d9002b17 	ldw	r4,172(sp)
8110cfd0:	1c07883a 	add	r3,r3,r16
8110cfd4:	44000115 	stw	r16,4(r8)
8110cfd8:	41000015 	stw	r4,0(r8)
8110cfdc:	10800044 	addi	r2,r2,1
8110cfe0:	d8c02015 	stw	r3,128(sp)
8110cfe4:	d8801f15 	stw	r2,124(sp)
8110cfe8:	010001c4 	movi	r4,7
8110cfec:	20be2f0e 	bge	r4,r2,8110c8ac <__reset+0xfb0ec8ac>
8110cff0:	d9402c17 	ldw	r5,176(sp)
8110cff4:	d9801e04 	addi	r6,sp,120
8110cff8:	9809883a 	mov	r4,r19
8110cffc:	111891c0 	call	8111891c <__ssprint_r>
8110d000:	103cbc1e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d004:	d8c02017 	ldw	r3,128(sp)
8110d008:	da000404 	addi	r8,sp,16
8110d00c:	003e2806 	br	8110c8b0 <__reset+0xfb0ec8b0>
8110d010:	d9402c17 	ldw	r5,176(sp)
8110d014:	d9801e04 	addi	r6,sp,120
8110d018:	9809883a 	mov	r4,r19
8110d01c:	111891c0 	call	8111891c <__ssprint_r>
8110d020:	103e5f26 	beq	r2,zero,8110c9a0 <__reset+0xfb0ec9a0>
8110d024:	003cb306 	br	8110c2f4 <__reset+0xfb0ec2f4>
8110d028:	d9402c17 	ldw	r5,176(sp)
8110d02c:	d9801e04 	addi	r6,sp,120
8110d030:	9809883a 	mov	r4,r19
8110d034:	111891c0 	call	8111891c <__ssprint_r>
8110d038:	103cae1e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d03c:	d8c02017 	ldw	r3,128(sp)
8110d040:	da000404 	addi	r8,sp,16
8110d044:	003e0d06 	br	8110c87c <__reset+0xfb0ec87c>
8110d048:	d9402c17 	ldw	r5,176(sp)
8110d04c:	d9801e04 	addi	r6,sp,120
8110d050:	9809883a 	mov	r4,r19
8110d054:	111891c0 	call	8111891c <__ssprint_r>
8110d058:	103ca61e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d05c:	d8c02017 	ldw	r3,128(sp)
8110d060:	da000404 	addi	r8,sp,16
8110d064:	003dc106 	br	8110c76c <__reset+0xfb0ec76c>
8110d068:	d9402c17 	ldw	r5,176(sp)
8110d06c:	d9801e04 	addi	r6,sp,120
8110d070:	9809883a 	mov	r4,r19
8110d074:	111891c0 	call	8111891c <__ssprint_r>
8110d078:	103c9e1e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d07c:	d8c02017 	ldw	r3,128(sp)
8110d080:	da000404 	addi	r8,sp,16
8110d084:	003dc706 	br	8110c7a4 <__reset+0xfb0ec7a4>
8110d088:	d8802917 	ldw	r2,164(sp)
8110d08c:	d8002785 	stb	zero,158(sp)
8110d090:	103f0816 	blt	r2,zero,8110ccb4 <__reset+0xfb0eccb4>
8110d094:	00ffdfc4 	movi	r3,-129
8110d098:	a584b03a 	or	r2,r20,r22
8110d09c:	90e4703a 	and	r18,r18,r3
8110d0a0:	103c8126 	beq	r2,zero,8110c2a8 <__reset+0xfb0ec2a8>
8110d0a4:	0039883a 	mov	fp,zero
8110d0a8:	003e7606 	br	8110ca84 <__reset+0xfb0eca84>
8110d0ac:	9080040c 	andi	r2,r18,16
8110d0b0:	10013d26 	beq	r2,zero,8110d5a8 <___svfprintf_internal_r+0x1648>
8110d0b4:	d9002d17 	ldw	r4,180(sp)
8110d0b8:	d9402917 	ldw	r5,164(sp)
8110d0bc:	d8002785 	stb	zero,158(sp)
8110d0c0:	20800104 	addi	r2,r4,4
8110d0c4:	25000017 	ldw	r20,0(r4)
8110d0c8:	002d883a 	mov	r22,zero
8110d0cc:	28013f16 	blt	r5,zero,8110d5cc <___svfprintf_internal_r+0x166c>
8110d0d0:	00ffdfc4 	movi	r3,-129
8110d0d4:	d8802d15 	stw	r2,180(sp)
8110d0d8:	90e4703a 	and	r18,r18,r3
8110d0dc:	a03d2b26 	beq	r20,zero,8110c58c <__reset+0xfb0ec58c>
8110d0e0:	0039883a 	mov	fp,zero
8110d0e4:	003d2e06 	br	8110c5a0 <__reset+0xfb0ec5a0>
8110d0e8:	dc402617 	ldw	r17,152(sp)
8110d0ec:	0441830e 	bge	zero,r17,8110d6fc <___svfprintf_internal_r+0x179c>
8110d0f0:	dc403217 	ldw	r17,200(sp)
8110d0f4:	d8803317 	ldw	r2,204(sp)
8110d0f8:	1440010e 	bge	r2,r17,8110d100 <___svfprintf_internal_r+0x11a0>
8110d0fc:	1023883a 	mov	r17,r2
8110d100:	04400a0e 	bge	zero,r17,8110d12c <___svfprintf_internal_r+0x11cc>
8110d104:	d8801f17 	ldw	r2,124(sp)
8110d108:	1c47883a 	add	r3,r3,r17
8110d10c:	44000015 	stw	r16,0(r8)
8110d110:	10800044 	addi	r2,r2,1
8110d114:	44400115 	stw	r17,4(r8)
8110d118:	d8c02015 	stw	r3,128(sp)
8110d11c:	d8801f15 	stw	r2,124(sp)
8110d120:	010001c4 	movi	r4,7
8110d124:	20827516 	blt	r4,r2,8110dafc <___svfprintf_internal_r+0x1b9c>
8110d128:	42000204 	addi	r8,r8,8
8110d12c:	88027b16 	blt	r17,zero,8110db1c <___svfprintf_internal_r+0x1bbc>
8110d130:	d9003217 	ldw	r4,200(sp)
8110d134:	2463c83a 	sub	r17,r4,r17
8110d138:	0440990e 	bge	zero,r17,8110d3a0 <___svfprintf_internal_r+0x1440>
8110d13c:	05800404 	movi	r22,16
8110d140:	d8801f17 	ldw	r2,124(sp)
8110d144:	b441530e 	bge	r22,r17,8110d694 <___svfprintf_internal_r+0x1734>
8110d148:	012044f4 	movhi	r4,33043
8110d14c:	210dd284 	addi	r4,r4,14154
8110d150:	d9002b15 	stw	r4,172(sp)
8110d154:	070001c4 	movi	fp,7
8110d158:	dd002c17 	ldw	r20,176(sp)
8110d15c:	00000306 	br	8110d16c <___svfprintf_internal_r+0x120c>
8110d160:	42000204 	addi	r8,r8,8
8110d164:	8c7ffc04 	addi	r17,r17,-16
8110d168:	b4414d0e 	bge	r22,r17,8110d6a0 <___svfprintf_internal_r+0x1740>
8110d16c:	18c00404 	addi	r3,r3,16
8110d170:	10800044 	addi	r2,r2,1
8110d174:	45400015 	stw	r21,0(r8)
8110d178:	45800115 	stw	r22,4(r8)
8110d17c:	d8c02015 	stw	r3,128(sp)
8110d180:	d8801f15 	stw	r2,124(sp)
8110d184:	e0bff60e 	bge	fp,r2,8110d160 <__reset+0xfb0ed160>
8110d188:	d9801e04 	addi	r6,sp,120
8110d18c:	a00b883a 	mov	r5,r20
8110d190:	9809883a 	mov	r4,r19
8110d194:	111891c0 	call	8111891c <__ssprint_r>
8110d198:	103c561e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d19c:	d8c02017 	ldw	r3,128(sp)
8110d1a0:	d8801f17 	ldw	r2,124(sp)
8110d1a4:	da000404 	addi	r8,sp,16
8110d1a8:	003fee06 	br	8110d164 <__reset+0xfb0ed164>
8110d1ac:	d9402c17 	ldw	r5,176(sp)
8110d1b0:	d9801e04 	addi	r6,sp,120
8110d1b4:	9809883a 	mov	r4,r19
8110d1b8:	111891c0 	call	8111891c <__ssprint_r>
8110d1bc:	103c4d1e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d1c0:	d8c02017 	ldw	r3,128(sp)
8110d1c4:	df002787 	ldb	fp,158(sp)
8110d1c8:	da000404 	addi	r8,sp,16
8110d1cc:	003d5a06 	br	8110c738 <__reset+0xfb0ec738>
8110d1d0:	9080040c 	andi	r2,r18,16
8110d1d4:	10005c26 	beq	r2,zero,8110d348 <___svfprintf_internal_r+0x13e8>
8110d1d8:	d9402d17 	ldw	r5,180(sp)
8110d1dc:	d8c02917 	ldw	r3,164(sp)
8110d1e0:	d8002785 	stb	zero,158(sp)
8110d1e4:	28800104 	addi	r2,r5,4
8110d1e8:	2d000017 	ldw	r20,0(r5)
8110d1ec:	002d883a 	mov	r22,zero
8110d1f0:	18005e16 	blt	r3,zero,8110d36c <___svfprintf_internal_r+0x140c>
8110d1f4:	00ffdfc4 	movi	r3,-129
8110d1f8:	d8802d15 	stw	r2,180(sp)
8110d1fc:	90e4703a 	and	r18,r18,r3
8110d200:	0039883a 	mov	fp,zero
8110d204:	a03dfe26 	beq	r20,zero,8110ca00 <__reset+0xfb0eca00>
8110d208:	00800244 	movi	r2,9
8110d20c:	153cb336 	bltu	r2,r20,8110c4dc <__reset+0xfb0ec4dc>
8110d210:	a5000c04 	addi	r20,r20,48
8110d214:	dc001dc4 	addi	r16,sp,119
8110d218:	dd001dc5 	stb	r20,119(sp)
8110d21c:	d8c02817 	ldw	r3,160(sp)
8110d220:	1c07c83a 	sub	r3,r3,r16
8110d224:	d8c02e15 	stw	r3,184(sp)
8110d228:	003cf506 	br	8110c600 <__reset+0xfb0ec600>
8110d22c:	d8803317 	ldw	r2,204(sp)
8110d230:	143fffc4 	addi	r16,r2,-1
8110d234:	043f560e 	bge	zero,r16,8110cf90 <__reset+0xfb0ecf90>
8110d238:	07000404 	movi	fp,16
8110d23c:	e403530e 	bge	fp,r16,8110df8c <___svfprintf_internal_r+0x202c>
8110d240:	016044f4 	movhi	r5,33043
8110d244:	294dd284 	addi	r5,r5,14154
8110d248:	d9402b15 	stw	r5,172(sp)
8110d24c:	01c001c4 	movi	r7,7
8110d250:	dd002c17 	ldw	r20,176(sp)
8110d254:	00000306 	br	8110d264 <___svfprintf_internal_r+0x1304>
8110d258:	843ffc04 	addi	r16,r16,-16
8110d25c:	b5800204 	addi	r22,r22,8
8110d260:	e400130e 	bge	fp,r16,8110d2b0 <___svfprintf_internal_r+0x1350>
8110d264:	18c00404 	addi	r3,r3,16
8110d268:	8c400044 	addi	r17,r17,1
8110d26c:	b5400015 	stw	r21,0(r22)
8110d270:	b7000115 	stw	fp,4(r22)
8110d274:	d8c02015 	stw	r3,128(sp)
8110d278:	dc401f15 	stw	r17,124(sp)
8110d27c:	3c7ff60e 	bge	r7,r17,8110d258 <__reset+0xfb0ed258>
8110d280:	d9801e04 	addi	r6,sp,120
8110d284:	a00b883a 	mov	r5,r20
8110d288:	9809883a 	mov	r4,r19
8110d28c:	d9c03d15 	stw	r7,244(sp)
8110d290:	111891c0 	call	8111891c <__ssprint_r>
8110d294:	d9c03d17 	ldw	r7,244(sp)
8110d298:	103c161e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d29c:	843ffc04 	addi	r16,r16,-16
8110d2a0:	d8c02017 	ldw	r3,128(sp)
8110d2a4:	dc401f17 	ldw	r17,124(sp)
8110d2a8:	dd800404 	addi	r22,sp,16
8110d2ac:	e43fed16 	blt	fp,r16,8110d264 <__reset+0xfb0ed264>
8110d2b0:	d8802b17 	ldw	r2,172(sp)
8110d2b4:	1c07883a 	add	r3,r3,r16
8110d2b8:	8c400044 	addi	r17,r17,1
8110d2bc:	b0800015 	stw	r2,0(r22)
8110d2c0:	b4000115 	stw	r16,4(r22)
8110d2c4:	d8c02015 	stw	r3,128(sp)
8110d2c8:	dc401f15 	stw	r17,124(sp)
8110d2cc:	008001c4 	movi	r2,7
8110d2d0:	147f2e0e 	bge	r2,r17,8110cf8c <__reset+0xfb0ecf8c>
8110d2d4:	d9402c17 	ldw	r5,176(sp)
8110d2d8:	d9801e04 	addi	r6,sp,120
8110d2dc:	9809883a 	mov	r4,r19
8110d2e0:	111891c0 	call	8111891c <__ssprint_r>
8110d2e4:	103c031e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d2e8:	d8c02017 	ldw	r3,128(sp)
8110d2ec:	dc401f17 	ldw	r17,124(sp)
8110d2f0:	dd800404 	addi	r22,sp,16
8110d2f4:	003f2606 	br	8110cf90 <__reset+0xfb0ecf90>
8110d2f8:	9080040c 	andi	r2,r18,16
8110d2fc:	1000c326 	beq	r2,zero,8110d60c <___svfprintf_internal_r+0x16ac>
8110d300:	d8802d17 	ldw	r2,180(sp)
8110d304:	15000017 	ldw	r20,0(r2)
8110d308:	10800104 	addi	r2,r2,4
8110d30c:	d8802d15 	stw	r2,180(sp)
8110d310:	a02dd7fa 	srai	r22,r20,31
8110d314:	b005883a 	mov	r2,r22
8110d318:	103c680e 	bge	r2,zero,8110c4bc <__reset+0xfb0ec4bc>
8110d31c:	0529c83a 	sub	r20,zero,r20
8110d320:	a004c03a 	cmpne	r2,r20,zero
8110d324:	05adc83a 	sub	r22,zero,r22
8110d328:	b0adc83a 	sub	r22,r22,r2
8110d32c:	d8802917 	ldw	r2,164(sp)
8110d330:	07000b44 	movi	fp,45
8110d334:	df002785 	stb	fp,158(sp)
8110d338:	10022e16 	blt	r2,zero,8110dbf4 <___svfprintf_internal_r+0x1c94>
8110d33c:	00bfdfc4 	movi	r2,-129
8110d340:	90a4703a 	and	r18,r18,r2
8110d344:	003c6406 	br	8110c4d8 <__reset+0xfb0ec4d8>
8110d348:	9080100c 	andi	r2,r18,64
8110d34c:	d8002785 	stb	zero,158(sp)
8110d350:	10012526 	beq	r2,zero,8110d7e8 <___svfprintf_internal_r+0x1888>
8110d354:	d9002d17 	ldw	r4,180(sp)
8110d358:	d9402917 	ldw	r5,164(sp)
8110d35c:	002d883a 	mov	r22,zero
8110d360:	20800104 	addi	r2,r4,4
8110d364:	2500000b 	ldhu	r20,0(r4)
8110d368:	283fa20e 	bge	r5,zero,8110d1f4 <__reset+0xfb0ed1f4>
8110d36c:	d8802d15 	stw	r2,180(sp)
8110d370:	0039883a 	mov	fp,zero
8110d374:	a584b03a 	or	r2,r20,r22
8110d378:	103c571e 	bne	r2,zero,8110c4d8 <__reset+0xfb0ec4d8>
8110d37c:	00800044 	movi	r2,1
8110d380:	003e5006 	br	8110ccc4 <__reset+0xfb0eccc4>
8110d384:	d9402c17 	ldw	r5,176(sp)
8110d388:	d9801e04 	addi	r6,sp,120
8110d38c:	9809883a 	mov	r4,r19
8110d390:	111891c0 	call	8111891c <__ssprint_r>
8110d394:	103bd71e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d398:	d8c02017 	ldw	r3,128(sp)
8110d39c:	da000404 	addi	r8,sp,16
8110d3a0:	d9003217 	ldw	r4,200(sp)
8110d3a4:	d8802617 	ldw	r2,152(sp)
8110d3a8:	d9403317 	ldw	r5,204(sp)
8110d3ac:	8123883a 	add	r17,r16,r4
8110d3b0:	11400216 	blt	r2,r5,8110d3bc <___svfprintf_internal_r+0x145c>
8110d3b4:	9100004c 	andi	r4,r18,1
8110d3b8:	20000d26 	beq	r4,zero,8110d3f0 <___svfprintf_internal_r+0x1490>
8110d3bc:	d9003817 	ldw	r4,224(sp)
8110d3c0:	d9403417 	ldw	r5,208(sp)
8110d3c4:	1907883a 	add	r3,r3,r4
8110d3c8:	d9001f17 	ldw	r4,124(sp)
8110d3cc:	41400015 	stw	r5,0(r8)
8110d3d0:	d9403817 	ldw	r5,224(sp)
8110d3d4:	21000044 	addi	r4,r4,1
8110d3d8:	d8c02015 	stw	r3,128(sp)
8110d3dc:	41400115 	stw	r5,4(r8)
8110d3e0:	d9001f15 	stw	r4,124(sp)
8110d3e4:	014001c4 	movi	r5,7
8110d3e8:	2901dc16 	blt	r5,r4,8110db5c <___svfprintf_internal_r+0x1bfc>
8110d3ec:	42000204 	addi	r8,r8,8
8110d3f0:	d9003317 	ldw	r4,204(sp)
8110d3f4:	8121883a 	add	r16,r16,r4
8110d3f8:	2085c83a 	sub	r2,r4,r2
8110d3fc:	8461c83a 	sub	r16,r16,r17
8110d400:	1400010e 	bge	r2,r16,8110d408 <___svfprintf_internal_r+0x14a8>
8110d404:	1021883a 	mov	r16,r2
8110d408:	04000a0e 	bge	zero,r16,8110d434 <___svfprintf_internal_r+0x14d4>
8110d40c:	d9001f17 	ldw	r4,124(sp)
8110d410:	1c07883a 	add	r3,r3,r16
8110d414:	44400015 	stw	r17,0(r8)
8110d418:	21000044 	addi	r4,r4,1
8110d41c:	44000115 	stw	r16,4(r8)
8110d420:	d8c02015 	stw	r3,128(sp)
8110d424:	d9001f15 	stw	r4,124(sp)
8110d428:	014001c4 	movi	r5,7
8110d42c:	2901e616 	blt	r5,r4,8110dbc8 <___svfprintf_internal_r+0x1c68>
8110d430:	42000204 	addi	r8,r8,8
8110d434:	8001f616 	blt	r16,zero,8110dc10 <___svfprintf_internal_r+0x1cb0>
8110d438:	1421c83a 	sub	r16,r2,r16
8110d43c:	043d1c0e 	bge	zero,r16,8110c8b0 <__reset+0xfb0ec8b0>
8110d440:	04400404 	movi	r17,16
8110d444:	d8801f17 	ldw	r2,124(sp)
8110d448:	8c3edd0e 	bge	r17,r16,8110cfc0 <__reset+0xfb0ecfc0>
8110d44c:	016044f4 	movhi	r5,33043
8110d450:	294dd284 	addi	r5,r5,14154
8110d454:	d9402b15 	stw	r5,172(sp)
8110d458:	058001c4 	movi	r22,7
8110d45c:	dd002c17 	ldw	r20,176(sp)
8110d460:	00000306 	br	8110d470 <___svfprintf_internal_r+0x1510>
8110d464:	42000204 	addi	r8,r8,8
8110d468:	843ffc04 	addi	r16,r16,-16
8110d46c:	8c3ed70e 	bge	r17,r16,8110cfcc <__reset+0xfb0ecfcc>
8110d470:	18c00404 	addi	r3,r3,16
8110d474:	10800044 	addi	r2,r2,1
8110d478:	45400015 	stw	r21,0(r8)
8110d47c:	44400115 	stw	r17,4(r8)
8110d480:	d8c02015 	stw	r3,128(sp)
8110d484:	d8801f15 	stw	r2,124(sp)
8110d488:	b0bff60e 	bge	r22,r2,8110d464 <__reset+0xfb0ed464>
8110d48c:	d9801e04 	addi	r6,sp,120
8110d490:	a00b883a 	mov	r5,r20
8110d494:	9809883a 	mov	r4,r19
8110d498:	111891c0 	call	8111891c <__ssprint_r>
8110d49c:	103b951e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d4a0:	d8c02017 	ldw	r3,128(sp)
8110d4a4:	d8801f17 	ldw	r2,124(sp)
8110d4a8:	da000404 	addi	r8,sp,16
8110d4ac:	003fee06 	br	8110d468 <__reset+0xfb0ed468>
8110d4b0:	9088703a 	and	r4,r18,r2
8110d4b4:	203e8d1e 	bne	r4,zero,8110ceec <__reset+0xfb0eceec>
8110d4b8:	dc401f17 	ldw	r17,124(sp)
8110d4bc:	40800115 	stw	r2,4(r8)
8110d4c0:	44000015 	stw	r16,0(r8)
8110d4c4:	8c400044 	addi	r17,r17,1
8110d4c8:	d8c02015 	stw	r3,128(sp)
8110d4cc:	dc401f15 	stw	r17,124(sp)
8110d4d0:	008001c4 	movi	r2,7
8110d4d4:	147f7f16 	blt	r2,r17,8110d2d4 <__reset+0xfb0ed2d4>
8110d4d8:	45800204 	addi	r22,r8,8
8110d4dc:	003eac06 	br	8110cf90 <__reset+0xfb0ecf90>
8110d4e0:	d9402c17 	ldw	r5,176(sp)
8110d4e4:	d9801e04 	addi	r6,sp,120
8110d4e8:	9809883a 	mov	r4,r19
8110d4ec:	111891c0 	call	8111891c <__ssprint_r>
8110d4f0:	103b801e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d4f4:	d8c02017 	ldw	r3,128(sp)
8110d4f8:	dc401f17 	ldw	r17,124(sp)
8110d4fc:	da000404 	addi	r8,sp,16
8110d500:	003e8406 	br	8110cf14 <__reset+0xfb0ecf14>
8110d504:	d9402c17 	ldw	r5,176(sp)
8110d508:	d9801e04 	addi	r6,sp,120
8110d50c:	9809883a 	mov	r4,r19
8110d510:	111891c0 	call	8111891c <__ssprint_r>
8110d514:	103b771e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d518:	d8c02017 	ldw	r3,128(sp)
8110d51c:	dc401f17 	ldw	r17,124(sp)
8110d520:	dd800404 	addi	r22,sp,16
8110d524:	003e8606 	br	8110cf40 <__reset+0xfb0ecf40>
8110d528:	0029883a 	mov	r20,zero
8110d52c:	a5000c04 	addi	r20,r20,48
8110d530:	dc001dc4 	addi	r16,sp,119
8110d534:	dd001dc5 	stb	r20,119(sp)
8110d538:	003f3806 	br	8110d21c <__reset+0xfb0ed21c>
8110d53c:	d9402c17 	ldw	r5,176(sp)
8110d540:	d9801e04 	addi	r6,sp,120
8110d544:	9809883a 	mov	r4,r19
8110d548:	111891c0 	call	8111891c <__ssprint_r>
8110d54c:	103b691e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d550:	d8c02017 	ldw	r3,128(sp)
8110d554:	da000404 	addi	r8,sp,16
8110d558:	003c9506 	br	8110c7b0 <__reset+0xfb0ec7b0>
8110d55c:	d9003617 	ldw	r4,216(sp)
8110d560:	d9403717 	ldw	r5,220(sp)
8110d564:	da003e15 	stw	r8,248(sp)
8110d568:	111683c0 	call	8111683c <__fpclassifyd>
8110d56c:	da003e17 	ldw	r8,248(sp)
8110d570:	1000bd1e 	bne	r2,zero,8110d868 <___svfprintf_internal_r+0x1908>
8110d574:	008011c4 	movi	r2,71
8110d578:	14411e0e 	bge	r2,r17,8110d9f4 <___svfprintf_internal_r+0x1a94>
8110d57c:	042044f4 	movhi	r16,33043
8110d580:	840dc504 	addi	r16,r16,14100
8110d584:	00c000c4 	movi	r3,3
8110d588:	00bfdfc4 	movi	r2,-129
8110d58c:	d8c02a15 	stw	r3,168(sp)
8110d590:	90a4703a 	and	r18,r18,r2
8110d594:	df002783 	ldbu	fp,158(sp)
8110d598:	d8c02e15 	stw	r3,184(sp)
8110d59c:	d8002915 	stw	zero,164(sp)
8110d5a0:	d8003215 	stw	zero,200(sp)
8110d5a4:	003c1c06 	br	8110c618 <__reset+0xfb0ec618>
8110d5a8:	9080100c 	andi	r2,r18,64
8110d5ac:	d8002785 	stb	zero,158(sp)
8110d5b0:	10009426 	beq	r2,zero,8110d804 <___svfprintf_internal_r+0x18a4>
8110d5b4:	d8c02d17 	ldw	r3,180(sp)
8110d5b8:	d9002917 	ldw	r4,164(sp)
8110d5bc:	002d883a 	mov	r22,zero
8110d5c0:	18800104 	addi	r2,r3,4
8110d5c4:	1d00000b 	ldhu	r20,0(r3)
8110d5c8:	203ec10e 	bge	r4,zero,8110d0d0 <__reset+0xfb0ed0d0>
8110d5cc:	a586b03a 	or	r3,r20,r22
8110d5d0:	d8802d15 	stw	r2,180(sp)
8110d5d4:	183ec21e 	bne	r3,zero,8110d0e0 <__reset+0xfb0ed0e0>
8110d5d8:	0039883a 	mov	fp,zero
8110d5dc:	0005883a 	mov	r2,zero
8110d5e0:	003db806 	br	8110ccc4 <__reset+0xfb0eccc4>
8110d5e4:	d8802d17 	ldw	r2,180(sp)
8110d5e8:	d8c02d17 	ldw	r3,180(sp)
8110d5ec:	d9002d17 	ldw	r4,180(sp)
8110d5f0:	10800017 	ldw	r2,0(r2)
8110d5f4:	18c00117 	ldw	r3,4(r3)
8110d5f8:	21000204 	addi	r4,r4,8
8110d5fc:	d8803615 	stw	r2,216(sp)
8110d600:	d8c03715 	stw	r3,220(sp)
8110d604:	d9002d15 	stw	r4,180(sp)
8110d608:	003b8206 	br	8110c414 <__reset+0xfb0ec414>
8110d60c:	9080100c 	andi	r2,r18,64
8110d610:	10010726 	beq	r2,zero,8110da30 <___svfprintf_internal_r+0x1ad0>
8110d614:	d8c02d17 	ldw	r3,180(sp)
8110d618:	1d00000f 	ldh	r20,0(r3)
8110d61c:	18c00104 	addi	r3,r3,4
8110d620:	d8c02d15 	stw	r3,180(sp)
8110d624:	a02dd7fa 	srai	r22,r20,31
8110d628:	b005883a 	mov	r2,r22
8110d62c:	003ba206 	br	8110c4b8 <__reset+0xfb0ec4b8>
8110d630:	9080100c 	andi	r2,r18,64
8110d634:	10010526 	beq	r2,zero,8110da4c <___svfprintf_internal_r+0x1aec>
8110d638:	d9002d17 	ldw	r4,180(sp)
8110d63c:	002d883a 	mov	r22,zero
8110d640:	2500000b 	ldhu	r20,0(r4)
8110d644:	21000104 	addi	r4,r4,4
8110d648:	d9002d15 	stw	r4,180(sp)
8110d64c:	003cfe06 	br	8110ca48 <__reset+0xfb0eca48>
8110d650:	bc400007 	ldb	r17,0(r23)
8110d654:	003a9606 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110d658:	9080040c 	andi	r2,r18,16
8110d65c:	10010126 	beq	r2,zero,8110da64 <___svfprintf_internal_r+0x1b04>
8110d660:	d9402d17 	ldw	r5,180(sp)
8110d664:	d8c02f17 	ldw	r3,188(sp)
8110d668:	28800017 	ldw	r2,0(r5)
8110d66c:	29400104 	addi	r5,r5,4
8110d670:	d9402d15 	stw	r5,180(sp)
8110d674:	10c00015 	stw	r3,0(r2)
8110d678:	003a6406 	br	8110c00c <__reset+0xfb0ec00c>
8110d67c:	d9002917 	ldw	r4,164(sp)
8110d680:	d8002785 	stb	zero,158(sp)
8110d684:	203d8d16 	blt	r4,zero,8110ccbc <__reset+0xfb0eccbc>
8110d688:	00bfdfc4 	movi	r2,-129
8110d68c:	90a4703a 	and	r18,r18,r2
8110d690:	003b0506 	br	8110c2a8 <__reset+0xfb0ec2a8>
8110d694:	016044f4 	movhi	r5,33043
8110d698:	294dd284 	addi	r5,r5,14154
8110d69c:	d9402b15 	stw	r5,172(sp)
8110d6a0:	d9402b17 	ldw	r5,172(sp)
8110d6a4:	1c47883a 	add	r3,r3,r17
8110d6a8:	10800044 	addi	r2,r2,1
8110d6ac:	41400015 	stw	r5,0(r8)
8110d6b0:	44400115 	stw	r17,4(r8)
8110d6b4:	d8c02015 	stw	r3,128(sp)
8110d6b8:	d8801f15 	stw	r2,124(sp)
8110d6bc:	010001c4 	movi	r4,7
8110d6c0:	20bf3016 	blt	r4,r2,8110d384 <__reset+0xfb0ed384>
8110d6c4:	42000204 	addi	r8,r8,8
8110d6c8:	003f3506 	br	8110d3a0 <__reset+0xfb0ed3a0>
8110d6cc:	012044f4 	movhi	r4,33043
8110d6d0:	210dd284 	addi	r4,r4,14154
8110d6d4:	d9002b15 	stw	r4,172(sp)
8110d6d8:	003c5e06 	br	8110c854 <__reset+0xfb0ec854>
8110d6dc:	d9402c17 	ldw	r5,176(sp)
8110d6e0:	d9801e04 	addi	r6,sp,120
8110d6e4:	9809883a 	mov	r4,r19
8110d6e8:	111891c0 	call	8111891c <__ssprint_r>
8110d6ec:	103b011e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d6f0:	d8c02017 	ldw	r3,128(sp)
8110d6f4:	da000404 	addi	r8,sp,16
8110d6f8:	003d9306 	br	8110cd48 <__reset+0xfb0ecd48>
8110d6fc:	d8801f17 	ldw	r2,124(sp)
8110d700:	016044f4 	movhi	r5,33043
8110d704:	01000044 	movi	r4,1
8110d708:	18c00044 	addi	r3,r3,1
8110d70c:	10800044 	addi	r2,r2,1
8110d710:	294dd204 	addi	r5,r5,14152
8110d714:	41000115 	stw	r4,4(r8)
8110d718:	41400015 	stw	r5,0(r8)
8110d71c:	d8c02015 	stw	r3,128(sp)
8110d720:	d8801f15 	stw	r2,124(sp)
8110d724:	010001c4 	movi	r4,7
8110d728:	2080b516 	blt	r4,r2,8110da00 <___svfprintf_internal_r+0x1aa0>
8110d72c:	42000204 	addi	r8,r8,8
8110d730:	8800041e 	bne	r17,zero,8110d744 <___svfprintf_internal_r+0x17e4>
8110d734:	d8803317 	ldw	r2,204(sp)
8110d738:	1000021e 	bne	r2,zero,8110d744 <___svfprintf_internal_r+0x17e4>
8110d73c:	9080004c 	andi	r2,r18,1
8110d740:	103c5b26 	beq	r2,zero,8110c8b0 <__reset+0xfb0ec8b0>
8110d744:	d9003817 	ldw	r4,224(sp)
8110d748:	d8801f17 	ldw	r2,124(sp)
8110d74c:	d9403417 	ldw	r5,208(sp)
8110d750:	20c7883a 	add	r3,r4,r3
8110d754:	10800044 	addi	r2,r2,1
8110d758:	41000115 	stw	r4,4(r8)
8110d75c:	41400015 	stw	r5,0(r8)
8110d760:	d8c02015 	stw	r3,128(sp)
8110d764:	d8801f15 	stw	r2,124(sp)
8110d768:	010001c4 	movi	r4,7
8110d76c:	20818016 	blt	r4,r2,8110dd70 <___svfprintf_internal_r+0x1e10>
8110d770:	42000204 	addi	r8,r8,8
8110d774:	0463c83a 	sub	r17,zero,r17
8110d778:	0440cb0e 	bge	zero,r17,8110daa8 <___svfprintf_internal_r+0x1b48>
8110d77c:	05800404 	movi	r22,16
8110d780:	b440e80e 	bge	r22,r17,8110db24 <___svfprintf_internal_r+0x1bc4>
8110d784:	016044f4 	movhi	r5,33043
8110d788:	294dd284 	addi	r5,r5,14154
8110d78c:	d9402b15 	stw	r5,172(sp)
8110d790:	070001c4 	movi	fp,7
8110d794:	dd002c17 	ldw	r20,176(sp)
8110d798:	00000306 	br	8110d7a8 <___svfprintf_internal_r+0x1848>
8110d79c:	42000204 	addi	r8,r8,8
8110d7a0:	8c7ffc04 	addi	r17,r17,-16
8110d7a4:	b440e20e 	bge	r22,r17,8110db30 <___svfprintf_internal_r+0x1bd0>
8110d7a8:	18c00404 	addi	r3,r3,16
8110d7ac:	10800044 	addi	r2,r2,1
8110d7b0:	45400015 	stw	r21,0(r8)
8110d7b4:	45800115 	stw	r22,4(r8)
8110d7b8:	d8c02015 	stw	r3,128(sp)
8110d7bc:	d8801f15 	stw	r2,124(sp)
8110d7c0:	e0bff60e 	bge	fp,r2,8110d79c <__reset+0xfb0ed79c>
8110d7c4:	d9801e04 	addi	r6,sp,120
8110d7c8:	a00b883a 	mov	r5,r20
8110d7cc:	9809883a 	mov	r4,r19
8110d7d0:	111891c0 	call	8111891c <__ssprint_r>
8110d7d4:	103ac71e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d7d8:	d8c02017 	ldw	r3,128(sp)
8110d7dc:	d8801f17 	ldw	r2,124(sp)
8110d7e0:	da000404 	addi	r8,sp,16
8110d7e4:	003fee06 	br	8110d7a0 <__reset+0xfb0ed7a0>
8110d7e8:	d8c02d17 	ldw	r3,180(sp)
8110d7ec:	d9002917 	ldw	r4,164(sp)
8110d7f0:	002d883a 	mov	r22,zero
8110d7f4:	18800104 	addi	r2,r3,4
8110d7f8:	1d000017 	ldw	r20,0(r3)
8110d7fc:	203e7d0e 	bge	r4,zero,8110d1f4 <__reset+0xfb0ed1f4>
8110d800:	003eda06 	br	8110d36c <__reset+0xfb0ed36c>
8110d804:	d9402d17 	ldw	r5,180(sp)
8110d808:	d8c02917 	ldw	r3,164(sp)
8110d80c:	002d883a 	mov	r22,zero
8110d810:	28800104 	addi	r2,r5,4
8110d814:	2d000017 	ldw	r20,0(r5)
8110d818:	183e2d0e 	bge	r3,zero,8110d0d0 <__reset+0xfb0ed0d0>
8110d81c:	003f6b06 	br	8110d5cc <__reset+0xfb0ed5cc>
8110d820:	d8c02d15 	stw	r3,180(sp)
8110d824:	0039883a 	mov	fp,zero
8110d828:	003ed206 	br	8110d374 <__reset+0xfb0ed374>
8110d82c:	bc400043 	ldbu	r17,1(r23)
8110d830:	94800814 	ori	r18,r18,32
8110d834:	bdc00044 	addi	r23,r23,1
8110d838:	8c403fcc 	andi	r17,r17,255
8110d83c:	8c40201c 	xori	r17,r17,128
8110d840:	8c7fe004 	addi	r17,r17,-128
8110d844:	003a1a06 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110d848:	d9402c17 	ldw	r5,176(sp)
8110d84c:	d9801e04 	addi	r6,sp,120
8110d850:	9809883a 	mov	r4,r19
8110d854:	111891c0 	call	8111891c <__ssprint_r>
8110d858:	103aa61e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110d85c:	d8c02017 	ldw	r3,128(sp)
8110d860:	da000404 	addi	r8,sp,16
8110d864:	003d4a06 	br	8110cd90 <__reset+0xfb0ecd90>
8110d868:	d9002917 	ldw	r4,164(sp)
8110d86c:	05bff7c4 	movi	r22,-33
8110d870:	00bfffc4 	movi	r2,-1
8110d874:	8dac703a 	and	r22,r17,r22
8110d878:	20806a26 	beq	r4,r2,8110da24 <___svfprintf_internal_r+0x1ac4>
8110d87c:	008011c4 	movi	r2,71
8110d880:	b0813726 	beq	r22,r2,8110dd60 <___svfprintf_internal_r+0x1e00>
8110d884:	d9003717 	ldw	r4,220(sp)
8110d888:	90c04014 	ori	r3,r18,256
8110d88c:	d8c02b15 	stw	r3,172(sp)
8110d890:	20015d16 	blt	r4,zero,8110de08 <___svfprintf_internal_r+0x1ea8>
8110d894:	dd003717 	ldw	r20,220(sp)
8110d898:	d8002a05 	stb	zero,168(sp)
8110d89c:	00801984 	movi	r2,102
8110d8a0:	88814026 	beq	r17,r2,8110dda4 <___svfprintf_internal_r+0x1e44>
8110d8a4:	00801184 	movi	r2,70
8110d8a8:	88817126 	beq	r17,r2,8110de70 <___svfprintf_internal_r+0x1f10>
8110d8ac:	00801144 	movi	r2,69
8110d8b0:	b0816226 	beq	r22,r2,8110de3c <___svfprintf_internal_r+0x1edc>
8110d8b4:	d8c02917 	ldw	r3,164(sp)
8110d8b8:	d8802104 	addi	r2,sp,132
8110d8bc:	d8800315 	stw	r2,12(sp)
8110d8c0:	d9403617 	ldw	r5,216(sp)
8110d8c4:	d8802504 	addi	r2,sp,148
8110d8c8:	d8800215 	stw	r2,8(sp)
8110d8cc:	d8802604 	addi	r2,sp,152
8110d8d0:	d8c00015 	stw	r3,0(sp)
8110d8d4:	d8800115 	stw	r2,4(sp)
8110d8d8:	01c00084 	movi	r7,2
8110d8dc:	a00d883a 	mov	r6,r20
8110d8e0:	9809883a 	mov	r4,r19
8110d8e4:	d8c03d15 	stw	r3,244(sp)
8110d8e8:	da003e15 	stw	r8,248(sp)
8110d8ec:	111209c0 	call	8111209c <_dtoa_r>
8110d8f0:	1021883a 	mov	r16,r2
8110d8f4:	008019c4 	movi	r2,103
8110d8f8:	d8c03d17 	ldw	r3,244(sp)
8110d8fc:	da003e17 	ldw	r8,248(sp)
8110d900:	8880e726 	beq	r17,r2,8110dca0 <___svfprintf_internal_r+0x1d40>
8110d904:	008011c4 	movi	r2,71
8110d908:	8880d426 	beq	r17,r2,8110dc5c <___svfprintf_internal_r+0x1cfc>
8110d90c:	80f9883a 	add	fp,r16,r3
8110d910:	d9003617 	ldw	r4,216(sp)
8110d914:	000d883a 	mov	r6,zero
8110d918:	000f883a 	mov	r7,zero
8110d91c:	a00b883a 	mov	r5,r20
8110d920:	da003e15 	stw	r8,248(sp)
8110d924:	111e9c40 	call	8111e9c4 <__eqdf2>
8110d928:	da003e17 	ldw	r8,248(sp)
8110d92c:	1000e426 	beq	r2,zero,8110dcc0 <___svfprintf_internal_r+0x1d60>
8110d930:	d8802117 	ldw	r2,132(sp)
8110d934:	1700062e 	bgeu	r2,fp,8110d950 <___svfprintf_internal_r+0x19f0>
8110d938:	01000c04 	movi	r4,48
8110d93c:	10c00044 	addi	r3,r2,1
8110d940:	d8c02115 	stw	r3,132(sp)
8110d944:	11000005 	stb	r4,0(r2)
8110d948:	d8802117 	ldw	r2,132(sp)
8110d94c:	173ffb36 	bltu	r2,fp,8110d93c <__reset+0xfb0ed93c>
8110d950:	1405c83a 	sub	r2,r2,r16
8110d954:	d8803315 	stw	r2,204(sp)
8110d958:	008011c4 	movi	r2,71
8110d95c:	b080c526 	beq	r22,r2,8110dc74 <___svfprintf_internal_r+0x1d14>
8110d960:	00801944 	movi	r2,101
8110d964:	1441d90e 	bge	r2,r17,8110e0cc <___svfprintf_internal_r+0x216c>
8110d968:	d8c02617 	ldw	r3,152(sp)
8110d96c:	00801984 	movi	r2,102
8110d970:	d8c03215 	stw	r3,200(sp)
8110d974:	88813426 	beq	r17,r2,8110de48 <___svfprintf_internal_r+0x1ee8>
8110d978:	d8c03217 	ldw	r3,200(sp)
8110d97c:	d9003317 	ldw	r4,204(sp)
8110d980:	19012516 	blt	r3,r4,8110de18 <___svfprintf_internal_r+0x1eb8>
8110d984:	9480004c 	andi	r18,r18,1
8110d988:	9001841e 	bne	r18,zero,8110df9c <___svfprintf_internal_r+0x203c>
8110d98c:	1805883a 	mov	r2,r3
8110d990:	1801cc16 	blt	r3,zero,8110e0c4 <___svfprintf_internal_r+0x2164>
8110d994:	d8c03217 	ldw	r3,200(sp)
8110d998:	044019c4 	movi	r17,103
8110d99c:	d8c02e15 	stw	r3,184(sp)
8110d9a0:	df002a07 	ldb	fp,168(sp)
8110d9a4:	e000a61e 	bne	fp,zero,8110dc40 <___svfprintf_internal_r+0x1ce0>
8110d9a8:	df002783 	ldbu	fp,158(sp)
8110d9ac:	d8802a15 	stw	r2,168(sp)
8110d9b0:	dc802b17 	ldw	r18,172(sp)
8110d9b4:	d8002915 	stw	zero,164(sp)
8110d9b8:	003b1706 	br	8110c618 <__reset+0xfb0ec618>
8110d9bc:	042044f4 	movhi	r16,33043
8110d9c0:	840dc204 	addi	r16,r16,14088
8110d9c4:	003aa606 	br	8110c460 <__reset+0xfb0ec460>
8110d9c8:	d9003917 	ldw	r4,228(sp)
8110d9cc:	04001004 	movi	r16,64
8110d9d0:	800b883a 	mov	r5,r16
8110d9d4:	110aa600 	call	8110aa60 <_malloc_r>
8110d9d8:	d9002c17 	ldw	r4,176(sp)
8110d9dc:	20800015 	stw	r2,0(r4)
8110d9e0:	20800415 	stw	r2,16(r4)
8110d9e4:	1001cb26 	beq	r2,zero,8110e114 <___svfprintf_internal_r+0x21b4>
8110d9e8:	d8802c17 	ldw	r2,176(sp)
8110d9ec:	14000515 	stw	r16,20(r2)
8110d9f0:	00397606 	br	8110bfcc <__reset+0xfb0ebfcc>
8110d9f4:	042044f4 	movhi	r16,33043
8110d9f8:	840dc404 	addi	r16,r16,14096
8110d9fc:	003ee106 	br	8110d584 <__reset+0xfb0ed584>
8110da00:	d9402c17 	ldw	r5,176(sp)
8110da04:	d9801e04 	addi	r6,sp,120
8110da08:	9809883a 	mov	r4,r19
8110da0c:	111891c0 	call	8111891c <__ssprint_r>
8110da10:	103a381e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110da14:	dc402617 	ldw	r17,152(sp)
8110da18:	d8c02017 	ldw	r3,128(sp)
8110da1c:	da000404 	addi	r8,sp,16
8110da20:	003f4306 	br	8110d730 <__reset+0xfb0ed730>
8110da24:	01400184 	movi	r5,6
8110da28:	d9402915 	stw	r5,164(sp)
8110da2c:	003f9506 	br	8110d884 <__reset+0xfb0ed884>
8110da30:	d9002d17 	ldw	r4,180(sp)
8110da34:	25000017 	ldw	r20,0(r4)
8110da38:	21000104 	addi	r4,r4,4
8110da3c:	d9002d15 	stw	r4,180(sp)
8110da40:	a02dd7fa 	srai	r22,r20,31
8110da44:	b005883a 	mov	r2,r22
8110da48:	003a9b06 	br	8110c4b8 <__reset+0xfb0ec4b8>
8110da4c:	d9402d17 	ldw	r5,180(sp)
8110da50:	002d883a 	mov	r22,zero
8110da54:	2d000017 	ldw	r20,0(r5)
8110da58:	29400104 	addi	r5,r5,4
8110da5c:	d9402d15 	stw	r5,180(sp)
8110da60:	003bf906 	br	8110ca48 <__reset+0xfb0eca48>
8110da64:	9480100c 	andi	r18,r18,64
8110da68:	90006e26 	beq	r18,zero,8110dc24 <___svfprintf_internal_r+0x1cc4>
8110da6c:	d9002d17 	ldw	r4,180(sp)
8110da70:	d9402f17 	ldw	r5,188(sp)
8110da74:	20800017 	ldw	r2,0(r4)
8110da78:	21000104 	addi	r4,r4,4
8110da7c:	d9002d15 	stw	r4,180(sp)
8110da80:	1140000d 	sth	r5,0(r2)
8110da84:	00396106 	br	8110c00c <__reset+0xfb0ec00c>
8110da88:	d9402c17 	ldw	r5,176(sp)
8110da8c:	d9801e04 	addi	r6,sp,120
8110da90:	9809883a 	mov	r4,r19
8110da94:	111891c0 	call	8111891c <__ssprint_r>
8110da98:	103a161e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110da9c:	d8c02017 	ldw	r3,128(sp)
8110daa0:	d8801f17 	ldw	r2,124(sp)
8110daa4:	da000404 	addi	r8,sp,16
8110daa8:	d9403317 	ldw	r5,204(sp)
8110daac:	10800044 	addi	r2,r2,1
8110dab0:	44000015 	stw	r16,0(r8)
8110dab4:	28c7883a 	add	r3,r5,r3
8110dab8:	003b7706 	br	8110c898 <__reset+0xfb0ec898>
8110dabc:	8009883a 	mov	r4,r16
8110dac0:	da003e15 	stw	r8,248(sp)
8110dac4:	110bc740 	call	8110bc74 <strlen>
8110dac8:	d8802e15 	stw	r2,184(sp)
8110dacc:	da003e17 	ldw	r8,248(sp)
8110dad0:	103c280e 	bge	r2,zero,8110cb74 <__reset+0xfb0ecb74>
8110dad4:	0005883a 	mov	r2,zero
8110dad8:	003c2606 	br	8110cb74 <__reset+0xfb0ecb74>
8110dadc:	00bfffc4 	movi	r2,-1
8110dae0:	003a0906 	br	8110c308 <__reset+0xfb0ec308>
8110dae4:	012044f4 	movhi	r4,33043
8110dae8:	210dd684 	addi	r4,r4,14170
8110daec:	d9003515 	stw	r4,212(sp)
8110daf0:	003b0606 	br	8110c70c <__reset+0xfb0ec70c>
8110daf4:	013fffc4 	movi	r4,-1
8110daf8:	003a2706 	br	8110c398 <__reset+0xfb0ec398>
8110dafc:	d9402c17 	ldw	r5,176(sp)
8110db00:	d9801e04 	addi	r6,sp,120
8110db04:	9809883a 	mov	r4,r19
8110db08:	111891c0 	call	8111891c <__ssprint_r>
8110db0c:	1039f91e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110db10:	d8c02017 	ldw	r3,128(sp)
8110db14:	da000404 	addi	r8,sp,16
8110db18:	003d8406 	br	8110d12c <__reset+0xfb0ed12c>
8110db1c:	0023883a 	mov	r17,zero
8110db20:	003d8306 	br	8110d130 <__reset+0xfb0ed130>
8110db24:	012044f4 	movhi	r4,33043
8110db28:	210dd284 	addi	r4,r4,14154
8110db2c:	d9002b15 	stw	r4,172(sp)
8110db30:	d9002b17 	ldw	r4,172(sp)
8110db34:	1c47883a 	add	r3,r3,r17
8110db38:	10800044 	addi	r2,r2,1
8110db3c:	41000015 	stw	r4,0(r8)
8110db40:	44400115 	stw	r17,4(r8)
8110db44:	d8c02015 	stw	r3,128(sp)
8110db48:	d8801f15 	stw	r2,124(sp)
8110db4c:	010001c4 	movi	r4,7
8110db50:	20bfcd16 	blt	r4,r2,8110da88 <__reset+0xfb0eda88>
8110db54:	42000204 	addi	r8,r8,8
8110db58:	003fd306 	br	8110daa8 <__reset+0xfb0edaa8>
8110db5c:	d9402c17 	ldw	r5,176(sp)
8110db60:	d9801e04 	addi	r6,sp,120
8110db64:	9809883a 	mov	r4,r19
8110db68:	111891c0 	call	8111891c <__ssprint_r>
8110db6c:	1039e11e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110db70:	d8802617 	ldw	r2,152(sp)
8110db74:	d8c02017 	ldw	r3,128(sp)
8110db78:	da000404 	addi	r8,sp,16
8110db7c:	003e1c06 	br	8110d3f0 <__reset+0xfb0ed3f0>
8110db80:	d8802917 	ldw	r2,164(sp)
8110db84:	00c00184 	movi	r3,6
8110db88:	1880012e 	bgeu	r3,r2,8110db90 <___svfprintf_internal_r+0x1c30>
8110db8c:	1805883a 	mov	r2,r3
8110db90:	d8802e15 	stw	r2,184(sp)
8110db94:	1000f316 	blt	r2,zero,8110df64 <___svfprintf_internal_r+0x2004>
8110db98:	042044f4 	movhi	r16,33043
8110db9c:	d8802a15 	stw	r2,168(sp)
8110dba0:	dd002d15 	stw	r20,180(sp)
8110dba4:	d8002915 	stw	zero,164(sp)
8110dba8:	d8003215 	stw	zero,200(sp)
8110dbac:	840dd004 	addi	r16,r16,14144
8110dbb0:	0039883a 	mov	fp,zero
8110dbb4:	003a9f06 	br	8110c634 <__reset+0xfb0ec634>
8110dbb8:	012044f4 	movhi	r4,33043
8110dbbc:	210dd684 	addi	r4,r4,14170
8110dbc0:	d9003515 	stw	r4,212(sp)
8110dbc4:	003b5f06 	br	8110c944 <__reset+0xfb0ec944>
8110dbc8:	d9402c17 	ldw	r5,176(sp)
8110dbcc:	d9801e04 	addi	r6,sp,120
8110dbd0:	9809883a 	mov	r4,r19
8110dbd4:	111891c0 	call	8111891c <__ssprint_r>
8110dbd8:	1039c61e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110dbdc:	d8802617 	ldw	r2,152(sp)
8110dbe0:	d9403317 	ldw	r5,204(sp)
8110dbe4:	d8c02017 	ldw	r3,128(sp)
8110dbe8:	da000404 	addi	r8,sp,16
8110dbec:	2885c83a 	sub	r2,r5,r2
8110dbf0:	003e1006 	br	8110d434 <__reset+0xfb0ed434>
8110dbf4:	00800044 	movi	r2,1
8110dbf8:	10803fcc 	andi	r2,r2,255
8110dbfc:	00c00044 	movi	r3,1
8110dc00:	10fa3526 	beq	r2,r3,8110c4d8 <__reset+0xfb0ec4d8>
8110dc04:	00c00084 	movi	r3,2
8110dc08:	10fb9e26 	beq	r2,r3,8110ca84 <__reset+0xfb0eca84>
8110dc0c:	003a6406 	br	8110c5a0 <__reset+0xfb0ec5a0>
8110dc10:	0021883a 	mov	r16,zero
8110dc14:	003e0806 	br	8110d438 <__reset+0xfb0ed438>
8110dc18:	07000b44 	movi	fp,45
8110dc1c:	df002785 	stb	fp,158(sp)
8110dc20:	003a0b06 	br	8110c450 <__reset+0xfb0ec450>
8110dc24:	d8c02d17 	ldw	r3,180(sp)
8110dc28:	d9002f17 	ldw	r4,188(sp)
8110dc2c:	18800017 	ldw	r2,0(r3)
8110dc30:	18c00104 	addi	r3,r3,4
8110dc34:	d8c02d15 	stw	r3,180(sp)
8110dc38:	11000015 	stw	r4,0(r2)
8110dc3c:	0038f306 	br	8110c00c <__reset+0xfb0ec00c>
8110dc40:	00c00b44 	movi	r3,45
8110dc44:	d8c02785 	stb	r3,158(sp)
8110dc48:	d8802a15 	stw	r2,168(sp)
8110dc4c:	dc802b17 	ldw	r18,172(sp)
8110dc50:	d8002915 	stw	zero,164(sp)
8110dc54:	07000b44 	movi	fp,45
8110dc58:	003a7306 	br	8110c628 <__reset+0xfb0ec628>
8110dc5c:	9080004c 	andi	r2,r18,1
8110dc60:	1000941e 	bne	r2,zero,8110deb4 <___svfprintf_internal_r+0x1f54>
8110dc64:	d8802117 	ldw	r2,132(sp)
8110dc68:	1405c83a 	sub	r2,r2,r16
8110dc6c:	d8803315 	stw	r2,204(sp)
8110dc70:	b441161e 	bne	r22,r17,8110e0cc <___svfprintf_internal_r+0x216c>
8110dc74:	dd802617 	ldw	r22,152(sp)
8110dc78:	00bfff44 	movi	r2,-3
8110dc7c:	b0801a16 	blt	r22,r2,8110dce8 <___svfprintf_internal_r+0x1d88>
8110dc80:	d9402917 	ldw	r5,164(sp)
8110dc84:	2d801816 	blt	r5,r22,8110dce8 <___svfprintf_internal_r+0x1d88>
8110dc88:	dd803215 	stw	r22,200(sp)
8110dc8c:	003f3a06 	br	8110d978 <__reset+0xfb0ed978>
8110dc90:	1025883a 	mov	r18,r2
8110dc94:	0039883a 	mov	fp,zero
8110dc98:	00800084 	movi	r2,2
8110dc9c:	003fd606 	br	8110dbf8 <__reset+0xfb0edbf8>
8110dca0:	9080004c 	andi	r2,r18,1
8110dca4:	103f191e 	bne	r2,zero,8110d90c <__reset+0xfb0ed90c>
8110dca8:	d8802117 	ldw	r2,132(sp)
8110dcac:	003f2806 	br	8110d950 <__reset+0xfb0ed950>
8110dcb0:	012044f4 	movhi	r4,33043
8110dcb4:	210dd284 	addi	r4,r4,14154
8110dcb8:	d9002b15 	stw	r4,172(sp)
8110dcbc:	003c7c06 	br	8110ceb0 <__reset+0xfb0eceb0>
8110dcc0:	e005883a 	mov	r2,fp
8110dcc4:	003f2206 	br	8110d950 <__reset+0xfb0ed950>
8110dcc8:	d9402917 	ldw	r5,164(sp)
8110dccc:	df002783 	ldbu	fp,158(sp)
8110dcd0:	dd002d15 	stw	r20,180(sp)
8110dcd4:	d9402a15 	stw	r5,168(sp)
8110dcd8:	d9402e15 	stw	r5,184(sp)
8110dcdc:	d8002915 	stw	zero,164(sp)
8110dce0:	d8003215 	stw	zero,200(sp)
8110dce4:	003a4c06 	br	8110c618 <__reset+0xfb0ec618>
8110dce8:	8c7fff84 	addi	r17,r17,-2
8110dcec:	b5bfffc4 	addi	r22,r22,-1
8110dcf0:	dd802615 	stw	r22,152(sp)
8110dcf4:	dc4022c5 	stb	r17,139(sp)
8110dcf8:	b000c316 	blt	r22,zero,8110e008 <___svfprintf_internal_r+0x20a8>
8110dcfc:	00800ac4 	movi	r2,43
8110dd00:	d8802305 	stb	r2,140(sp)
8110dd04:	00800244 	movi	r2,9
8110dd08:	15806e16 	blt	r2,r22,8110dec4 <___svfprintf_internal_r+0x1f64>
8110dd0c:	00800c04 	movi	r2,48
8110dd10:	b5800c04 	addi	r22,r22,48
8110dd14:	d8802345 	stb	r2,141(sp)
8110dd18:	dd802385 	stb	r22,142(sp)
8110dd1c:	d88023c4 	addi	r2,sp,143
8110dd20:	df0022c4 	addi	fp,sp,139
8110dd24:	d8c03317 	ldw	r3,204(sp)
8110dd28:	1739c83a 	sub	fp,r2,fp
8110dd2c:	d9003317 	ldw	r4,204(sp)
8110dd30:	e0c7883a 	add	r3,fp,r3
8110dd34:	df003b15 	stw	fp,236(sp)
8110dd38:	d8c02e15 	stw	r3,184(sp)
8110dd3c:	00800044 	movi	r2,1
8110dd40:	1100b70e 	bge	r2,r4,8110e020 <___svfprintf_internal_r+0x20c0>
8110dd44:	d8c02e17 	ldw	r3,184(sp)
8110dd48:	18c00044 	addi	r3,r3,1
8110dd4c:	d8c02e15 	stw	r3,184(sp)
8110dd50:	1805883a 	mov	r2,r3
8110dd54:	1800b016 	blt	r3,zero,8110e018 <___svfprintf_internal_r+0x20b8>
8110dd58:	d8003215 	stw	zero,200(sp)
8110dd5c:	003f1006 	br	8110d9a0 <__reset+0xfb0ed9a0>
8110dd60:	d8802917 	ldw	r2,164(sp)
8110dd64:	103ec71e 	bne	r2,zero,8110d884 <__reset+0xfb0ed884>
8110dd68:	dc002915 	stw	r16,164(sp)
8110dd6c:	003ec506 	br	8110d884 <__reset+0xfb0ed884>
8110dd70:	d9402c17 	ldw	r5,176(sp)
8110dd74:	d9801e04 	addi	r6,sp,120
8110dd78:	9809883a 	mov	r4,r19
8110dd7c:	111891c0 	call	8111891c <__ssprint_r>
8110dd80:	10395c1e 	bne	r2,zero,8110c2f4 <__reset+0xfb0ec2f4>
8110dd84:	dc402617 	ldw	r17,152(sp)
8110dd88:	d8c02017 	ldw	r3,128(sp)
8110dd8c:	d8801f17 	ldw	r2,124(sp)
8110dd90:	da000404 	addi	r8,sp,16
8110dd94:	003e7706 	br	8110d774 <__reset+0xfb0ed774>
8110dd98:	582f883a 	mov	r23,r11
8110dd9c:	d8002915 	stw	zero,164(sp)
8110dda0:	0038c406 	br	8110c0b4 <__reset+0xfb0ec0b4>
8110dda4:	d8c02917 	ldw	r3,164(sp)
8110dda8:	d8802104 	addi	r2,sp,132
8110ddac:	d8800315 	stw	r2,12(sp)
8110ddb0:	d9403617 	ldw	r5,216(sp)
8110ddb4:	d8802504 	addi	r2,sp,148
8110ddb8:	d8800215 	stw	r2,8(sp)
8110ddbc:	d8802604 	addi	r2,sp,152
8110ddc0:	d8c00015 	stw	r3,0(sp)
8110ddc4:	9809883a 	mov	r4,r19
8110ddc8:	d8800115 	stw	r2,4(sp)
8110ddcc:	01c000c4 	movi	r7,3
8110ddd0:	a00d883a 	mov	r6,r20
8110ddd4:	da003e15 	stw	r8,248(sp)
8110ddd8:	111209c0 	call	8111209c <_dtoa_r>
8110dddc:	d9002917 	ldw	r4,164(sp)
8110dde0:	da003e17 	ldw	r8,248(sp)
8110dde4:	1021883a 	mov	r16,r2
8110dde8:	1139883a 	add	fp,r2,r4
8110ddec:	2007883a 	mov	r3,r4
8110ddf0:	81000007 	ldb	r4,0(r16)
8110ddf4:	00800c04 	movi	r2,48
8110ddf8:	20806f26 	beq	r4,r2,8110dfb8 <___svfprintf_internal_r+0x2058>
8110ddfc:	d8c02617 	ldw	r3,152(sp)
8110de00:	e0f9883a 	add	fp,fp,r3
8110de04:	003ec206 	br	8110d910 <__reset+0xfb0ed910>
8110de08:	00c00b44 	movi	r3,45
8110de0c:	2520003c 	xorhi	r20,r4,32768
8110de10:	d8c02a05 	stb	r3,168(sp)
8110de14:	003ea106 	br	8110d89c <__reset+0xfb0ed89c>
8110de18:	d8c03217 	ldw	r3,200(sp)
8110de1c:	00c0890e 	bge	zero,r3,8110e044 <___svfprintf_internal_r+0x20e4>
8110de20:	00800044 	movi	r2,1
8110de24:	d9003317 	ldw	r4,204(sp)
8110de28:	1105883a 	add	r2,r2,r4
8110de2c:	d8802e15 	stw	r2,184(sp)
8110de30:	10005f16 	blt	r2,zero,8110dfb0 <___svfprintf_internal_r+0x2050>
8110de34:	044019c4 	movi	r17,103
8110de38:	003ed906 	br	8110d9a0 <__reset+0xfb0ed9a0>
8110de3c:	d9002917 	ldw	r4,164(sp)
8110de40:	20c00044 	addi	r3,r4,1
8110de44:	003e9c06 	br	8110d8b8 <__reset+0xfb0ed8b8>
8110de48:	d9002917 	ldw	r4,164(sp)
8110de4c:	00c0680e 	bge	zero,r3,8110dff0 <___svfprintf_internal_r+0x2090>
8110de50:	2000461e 	bne	r4,zero,8110df6c <___svfprintf_internal_r+0x200c>
8110de54:	9480004c 	andi	r18,r18,1
8110de58:	9000441e 	bne	r18,zero,8110df6c <___svfprintf_internal_r+0x200c>
8110de5c:	1805883a 	mov	r2,r3
8110de60:	1800a016 	blt	r3,zero,8110e0e4 <___svfprintf_internal_r+0x2184>
8110de64:	d8c03217 	ldw	r3,200(sp)
8110de68:	d8c02e15 	stw	r3,184(sp)
8110de6c:	003ecc06 	br	8110d9a0 <__reset+0xfb0ed9a0>
8110de70:	d9402917 	ldw	r5,164(sp)
8110de74:	d8802104 	addi	r2,sp,132
8110de78:	d8800315 	stw	r2,12(sp)
8110de7c:	d9400015 	stw	r5,0(sp)
8110de80:	d8802504 	addi	r2,sp,148
8110de84:	d9403617 	ldw	r5,216(sp)
8110de88:	d8800215 	stw	r2,8(sp)
8110de8c:	d8802604 	addi	r2,sp,152
8110de90:	d8800115 	stw	r2,4(sp)
8110de94:	01c000c4 	movi	r7,3
8110de98:	a00d883a 	mov	r6,r20
8110de9c:	9809883a 	mov	r4,r19
8110dea0:	da003e15 	stw	r8,248(sp)
8110dea4:	111209c0 	call	8111209c <_dtoa_r>
8110dea8:	d8c02917 	ldw	r3,164(sp)
8110deac:	da003e17 	ldw	r8,248(sp)
8110deb0:	1021883a 	mov	r16,r2
8110deb4:	00801184 	movi	r2,70
8110deb8:	80f9883a 	add	fp,r16,r3
8110debc:	88bfcc26 	beq	r17,r2,8110ddf0 <__reset+0xfb0eddf0>
8110dec0:	003e9306 	br	8110d910 <__reset+0xfb0ed910>
8110dec4:	df0022c4 	addi	fp,sp,139
8110dec8:	dc002915 	stw	r16,164(sp)
8110decc:	9829883a 	mov	r20,r19
8110ded0:	e021883a 	mov	r16,fp
8110ded4:	4027883a 	mov	r19,r8
8110ded8:	b009883a 	mov	r4,r22
8110dedc:	01400284 	movi	r5,10
8110dee0:	111d5040 	call	8111d504 <__modsi3>
8110dee4:	10800c04 	addi	r2,r2,48
8110dee8:	843fffc4 	addi	r16,r16,-1
8110deec:	b009883a 	mov	r4,r22
8110def0:	01400284 	movi	r5,10
8110def4:	80800005 	stb	r2,0(r16)
8110def8:	111d4800 	call	8111d480 <__divsi3>
8110defc:	102d883a 	mov	r22,r2
8110df00:	00800244 	movi	r2,9
8110df04:	15bff416 	blt	r2,r22,8110ded8 <__reset+0xfb0eded8>
8110df08:	9811883a 	mov	r8,r19
8110df0c:	b0800c04 	addi	r2,r22,48
8110df10:	a027883a 	mov	r19,r20
8110df14:	8029883a 	mov	r20,r16
8110df18:	a17fffc4 	addi	r5,r20,-1
8110df1c:	a0bfffc5 	stb	r2,-1(r20)
8110df20:	dc002917 	ldw	r16,164(sp)
8110df24:	2f00752e 	bgeu	r5,fp,8110e0fc <___svfprintf_internal_r+0x219c>
8110df28:	d9c02384 	addi	r7,sp,142
8110df2c:	3d0fc83a 	sub	r7,r7,r20
8110df30:	d9002344 	addi	r4,sp,141
8110df34:	e1cf883a 	add	r7,fp,r7
8110df38:	00000106 	br	8110df40 <___svfprintf_internal_r+0x1fe0>
8110df3c:	28800003 	ldbu	r2,0(r5)
8110df40:	20800005 	stb	r2,0(r4)
8110df44:	21000044 	addi	r4,r4,1
8110df48:	29400044 	addi	r5,r5,1
8110df4c:	21fffb1e 	bne	r4,r7,8110df3c <__reset+0xfb0edf3c>
8110df50:	d8802304 	addi	r2,sp,140
8110df54:	1505c83a 	sub	r2,r2,r20
8110df58:	d8c02344 	addi	r3,sp,141
8110df5c:	1885883a 	add	r2,r3,r2
8110df60:	003f7006 	br	8110dd24 <__reset+0xfb0edd24>
8110df64:	0005883a 	mov	r2,zero
8110df68:	003f0b06 	br	8110db98 <__reset+0xfb0edb98>
8110df6c:	d9002917 	ldw	r4,164(sp)
8110df70:	d8c03217 	ldw	r3,200(sp)
8110df74:	20800044 	addi	r2,r4,1
8110df78:	1885883a 	add	r2,r3,r2
8110df7c:	d8802e15 	stw	r2,184(sp)
8110df80:	103e870e 	bge	r2,zero,8110d9a0 <__reset+0xfb0ed9a0>
8110df84:	0005883a 	mov	r2,zero
8110df88:	003e8506 	br	8110d9a0 <__reset+0xfb0ed9a0>
8110df8c:	012044f4 	movhi	r4,33043
8110df90:	210dd284 	addi	r4,r4,14154
8110df94:	d9002b15 	stw	r4,172(sp)
8110df98:	003cc506 	br	8110d2b0 <__reset+0xfb0ed2b0>
8110df9c:	d8c03217 	ldw	r3,200(sp)
8110dfa0:	18c00044 	addi	r3,r3,1
8110dfa4:	d8c02e15 	stw	r3,184(sp)
8110dfa8:	1805883a 	mov	r2,r3
8110dfac:	183fa10e 	bge	r3,zero,8110de34 <__reset+0xfb0ede34>
8110dfb0:	0005883a 	mov	r2,zero
8110dfb4:	003f9f06 	br	8110de34 <__reset+0xfb0ede34>
8110dfb8:	d9003617 	ldw	r4,216(sp)
8110dfbc:	000d883a 	mov	r6,zero
8110dfc0:	000f883a 	mov	r7,zero
8110dfc4:	a00b883a 	mov	r5,r20
8110dfc8:	d8c03d15 	stw	r3,244(sp)
8110dfcc:	da003e15 	stw	r8,248(sp)
8110dfd0:	111e9c40 	call	8111e9c4 <__eqdf2>
8110dfd4:	d8c03d17 	ldw	r3,244(sp)
8110dfd8:	da003e17 	ldw	r8,248(sp)
8110dfdc:	103f8726 	beq	r2,zero,8110ddfc <__reset+0xfb0eddfc>
8110dfe0:	00800044 	movi	r2,1
8110dfe4:	10c7c83a 	sub	r3,r2,r3
8110dfe8:	d8c02615 	stw	r3,152(sp)
8110dfec:	003f8406 	br	8110de00 <__reset+0xfb0ede00>
8110dff0:	20000e1e 	bne	r4,zero,8110e02c <___svfprintf_internal_r+0x20cc>
8110dff4:	9480004c 	andi	r18,r18,1
8110dff8:	90000c1e 	bne	r18,zero,8110e02c <___svfprintf_internal_r+0x20cc>
8110dffc:	00800044 	movi	r2,1
8110e000:	d8802e15 	stw	r2,184(sp)
8110e004:	003e6606 	br	8110d9a0 <__reset+0xfb0ed9a0>
8110e008:	00800b44 	movi	r2,45
8110e00c:	05adc83a 	sub	r22,zero,r22
8110e010:	d8802305 	stb	r2,140(sp)
8110e014:	003f3b06 	br	8110dd04 <__reset+0xfb0edd04>
8110e018:	0005883a 	mov	r2,zero
8110e01c:	003f4e06 	br	8110dd58 <__reset+0xfb0edd58>
8110e020:	90a4703a 	and	r18,r18,r2
8110e024:	903f4a26 	beq	r18,zero,8110dd50 <__reset+0xfb0edd50>
8110e028:	003f4606 	br	8110dd44 <__reset+0xfb0edd44>
8110e02c:	d8c02917 	ldw	r3,164(sp)
8110e030:	18c00084 	addi	r3,r3,2
8110e034:	d8c02e15 	stw	r3,184(sp)
8110e038:	1805883a 	mov	r2,r3
8110e03c:	183e580e 	bge	r3,zero,8110d9a0 <__reset+0xfb0ed9a0>
8110e040:	003fd006 	br	8110df84 <__reset+0xfb0edf84>
8110e044:	00800084 	movi	r2,2
8110e048:	10c5c83a 	sub	r2,r2,r3
8110e04c:	003f7506 	br	8110de24 <__reset+0xfb0ede24>
8110e050:	d8802d17 	ldw	r2,180(sp)
8110e054:	d9002d17 	ldw	r4,180(sp)
8110e058:	bc400043 	ldbu	r17,1(r23)
8110e05c:	10800017 	ldw	r2,0(r2)
8110e060:	582f883a 	mov	r23,r11
8110e064:	d8802915 	stw	r2,164(sp)
8110e068:	20800104 	addi	r2,r4,4
8110e06c:	d9002917 	ldw	r4,164(sp)
8110e070:	d8802d15 	stw	r2,180(sp)
8110e074:	203df00e 	bge	r4,zero,8110d838 <__reset+0xfb0ed838>
8110e078:	8c403fcc 	andi	r17,r17,255
8110e07c:	00bfffc4 	movi	r2,-1
8110e080:	8c40201c 	xori	r17,r17,128
8110e084:	d8802915 	stw	r2,164(sp)
8110e088:	8c7fe004 	addi	r17,r17,-128
8110e08c:	00380806 	br	8110c0b0 <__reset+0xfb0ec0b0>
8110e090:	9080004c 	andi	r2,r18,1
8110e094:	0039883a 	mov	fp,zero
8110e098:	10000726 	beq	r2,zero,8110e0b8 <___svfprintf_internal_r+0x2158>
8110e09c:	d8c02817 	ldw	r3,160(sp)
8110e0a0:	dc001dc4 	addi	r16,sp,119
8110e0a4:	00800c04 	movi	r2,48
8110e0a8:	1c07c83a 	sub	r3,r3,r16
8110e0ac:	d8801dc5 	stb	r2,119(sp)
8110e0b0:	d8c02e15 	stw	r3,184(sp)
8110e0b4:	00395206 	br	8110c600 <__reset+0xfb0ec600>
8110e0b8:	d8002e15 	stw	zero,184(sp)
8110e0bc:	dc001e04 	addi	r16,sp,120
8110e0c0:	00394f06 	br	8110c600 <__reset+0xfb0ec600>
8110e0c4:	0005883a 	mov	r2,zero
8110e0c8:	003e3206 	br	8110d994 <__reset+0xfb0ed994>
8110e0cc:	dd802617 	ldw	r22,152(sp)
8110e0d0:	003f0606 	br	8110dcec <__reset+0xfb0edcec>
8110e0d4:	d9c02785 	stb	r7,158(sp)
8110e0d8:	003a5106 	br	8110ca20 <__reset+0xfb0eca20>
8110e0dc:	d9c02785 	stb	r7,158(sp)
8110e0e0:	003a3706 	br	8110c9c0 <__reset+0xfb0ec9c0>
8110e0e4:	0005883a 	mov	r2,zero
8110e0e8:	003f5e06 	br	8110de64 <__reset+0xfb0ede64>
8110e0ec:	d9c02785 	stb	r7,158(sp)
8110e0f0:	00391706 	br	8110c550 <__reset+0xfb0ec550>
8110e0f4:	d9c02785 	stb	r7,158(sp)
8110e0f8:	0038e606 	br	8110c494 <__reset+0xfb0ec494>
8110e0fc:	d8802344 	addi	r2,sp,141
8110e100:	003f0806 	br	8110dd24 <__reset+0xfb0edd24>
8110e104:	d9c02785 	stb	r7,158(sp)
8110e108:	0038b706 	br	8110c3e8 <__reset+0xfb0ec3e8>
8110e10c:	d9c02785 	stb	r7,158(sp)
8110e110:	003adc06 	br	8110cc84 <__reset+0xfb0ecc84>
8110e114:	d9403917 	ldw	r5,228(sp)
8110e118:	00800304 	movi	r2,12
8110e11c:	28800015 	stw	r2,0(r5)
8110e120:	00bfffc4 	movi	r2,-1
8110e124:	00387806 	br	8110c308 <__reset+0xfb0ec308>
8110e128:	d9c02785 	stb	r7,158(sp)
8110e12c:	003abf06 	br	8110cc2c <__reset+0xfb0ecc2c>
8110e130:	d9c02785 	stb	r7,158(sp)
8110e134:	003a9b06 	br	8110cba4 <__reset+0xfb0ecba4>

8110e138 <___vfprintf_internal_r>:
8110e138:	deffb804 	addi	sp,sp,-288
8110e13c:	dfc04715 	stw	ra,284(sp)
8110e140:	ddc04515 	stw	r23,276(sp)
8110e144:	dd404315 	stw	r21,268(sp)
8110e148:	d9002c15 	stw	r4,176(sp)
8110e14c:	282f883a 	mov	r23,r5
8110e150:	302b883a 	mov	r21,r6
8110e154:	d9c02d15 	stw	r7,180(sp)
8110e158:	df004615 	stw	fp,280(sp)
8110e15c:	dd804415 	stw	r22,272(sp)
8110e160:	dd004215 	stw	r20,264(sp)
8110e164:	dcc04115 	stw	r19,260(sp)
8110e168:	dc804015 	stw	r18,256(sp)
8110e16c:	dc403f15 	stw	r17,252(sp)
8110e170:	dc003e15 	stw	r16,248(sp)
8110e174:	1114c200 	call	81114c20 <_localeconv_r>
8110e178:	10800017 	ldw	r2,0(r2)
8110e17c:	1009883a 	mov	r4,r2
8110e180:	d8803415 	stw	r2,208(sp)
8110e184:	110bc740 	call	8110bc74 <strlen>
8110e188:	d8803715 	stw	r2,220(sp)
8110e18c:	d8802c17 	ldw	r2,176(sp)
8110e190:	10000226 	beq	r2,zero,8110e19c <___vfprintf_internal_r+0x64>
8110e194:	10800e17 	ldw	r2,56(r2)
8110e198:	1000f926 	beq	r2,zero,8110e580 <___vfprintf_internal_r+0x448>
8110e19c:	b880030b 	ldhu	r2,12(r23)
8110e1a0:	10c8000c 	andi	r3,r2,8192
8110e1a4:	1800061e 	bne	r3,zero,8110e1c0 <___vfprintf_internal_r+0x88>
8110e1a8:	b9001917 	ldw	r4,100(r23)
8110e1ac:	00f7ffc4 	movi	r3,-8193
8110e1b0:	10880014 	ori	r2,r2,8192
8110e1b4:	20c6703a 	and	r3,r4,r3
8110e1b8:	b880030d 	sth	r2,12(r23)
8110e1bc:	b8c01915 	stw	r3,100(r23)
8110e1c0:	10c0020c 	andi	r3,r2,8
8110e1c4:	1800c126 	beq	r3,zero,8110e4cc <___vfprintf_internal_r+0x394>
8110e1c8:	b8c00417 	ldw	r3,16(r23)
8110e1cc:	1800bf26 	beq	r3,zero,8110e4cc <___vfprintf_internal_r+0x394>
8110e1d0:	1080068c 	andi	r2,r2,26
8110e1d4:	00c00284 	movi	r3,10
8110e1d8:	10c0c426 	beq	r2,r3,8110e4ec <___vfprintf_internal_r+0x3b4>
8110e1dc:	d8c00404 	addi	r3,sp,16
8110e1e0:	052044f4 	movhi	r20,33043
8110e1e4:	d9001e04 	addi	r4,sp,120
8110e1e8:	a50dda84 	addi	r20,r20,14186
8110e1ec:	d8c01e15 	stw	r3,120(sp)
8110e1f0:	d8002015 	stw	zero,128(sp)
8110e1f4:	d8001f15 	stw	zero,124(sp)
8110e1f8:	d8003315 	stw	zero,204(sp)
8110e1fc:	d8003615 	stw	zero,216(sp)
8110e200:	d8003815 	stw	zero,224(sp)
8110e204:	1811883a 	mov	r8,r3
8110e208:	d8003915 	stw	zero,228(sp)
8110e20c:	d8003a15 	stw	zero,232(sp)
8110e210:	d8002f15 	stw	zero,188(sp)
8110e214:	d9002815 	stw	r4,160(sp)
8110e218:	a8800007 	ldb	r2,0(r21)
8110e21c:	10027b26 	beq	r2,zero,8110ec0c <___vfprintf_internal_r+0xad4>
8110e220:	00c00944 	movi	r3,37
8110e224:	a821883a 	mov	r16,r21
8110e228:	10c0021e 	bne	r2,r3,8110e234 <___vfprintf_internal_r+0xfc>
8110e22c:	00001406 	br	8110e280 <___vfprintf_internal_r+0x148>
8110e230:	10c00326 	beq	r2,r3,8110e240 <___vfprintf_internal_r+0x108>
8110e234:	84000044 	addi	r16,r16,1
8110e238:	80800007 	ldb	r2,0(r16)
8110e23c:	103ffc1e 	bne	r2,zero,8110e230 <__reset+0xfb0ee230>
8110e240:	8563c83a 	sub	r17,r16,r21
8110e244:	88000e26 	beq	r17,zero,8110e280 <___vfprintf_internal_r+0x148>
8110e248:	d8c02017 	ldw	r3,128(sp)
8110e24c:	d8801f17 	ldw	r2,124(sp)
8110e250:	45400015 	stw	r21,0(r8)
8110e254:	1c47883a 	add	r3,r3,r17
8110e258:	10800044 	addi	r2,r2,1
8110e25c:	d8c02015 	stw	r3,128(sp)
8110e260:	44400115 	stw	r17,4(r8)
8110e264:	d8801f15 	stw	r2,124(sp)
8110e268:	00c001c4 	movi	r3,7
8110e26c:	1880a716 	blt	r3,r2,8110e50c <___vfprintf_internal_r+0x3d4>
8110e270:	42000204 	addi	r8,r8,8
8110e274:	d9402f17 	ldw	r5,188(sp)
8110e278:	2c4b883a 	add	r5,r5,r17
8110e27c:	d9402f15 	stw	r5,188(sp)
8110e280:	80800007 	ldb	r2,0(r16)
8110e284:	1000a826 	beq	r2,zero,8110e528 <___vfprintf_internal_r+0x3f0>
8110e288:	84400047 	ldb	r17,1(r16)
8110e28c:	00bfffc4 	movi	r2,-1
8110e290:	85400044 	addi	r21,r16,1
8110e294:	d8002785 	stb	zero,158(sp)
8110e298:	0007883a 	mov	r3,zero
8110e29c:	000f883a 	mov	r7,zero
8110e2a0:	d8802915 	stw	r2,164(sp)
8110e2a4:	d8003115 	stw	zero,196(sp)
8110e2a8:	0025883a 	mov	r18,zero
8110e2ac:	01401604 	movi	r5,88
8110e2b0:	01800244 	movi	r6,9
8110e2b4:	02800a84 	movi	r10,42
8110e2b8:	02401b04 	movi	r9,108
8110e2bc:	ad400044 	addi	r21,r21,1
8110e2c0:	88bff804 	addi	r2,r17,-32
8110e2c4:	28830436 	bltu	r5,r2,8110eed8 <___vfprintf_internal_r+0xda0>
8110e2c8:	100490ba 	slli	r2,r2,2
8110e2cc:	01204474 	movhi	r4,33041
8110e2d0:	2138b804 	addi	r4,r4,-7456
8110e2d4:	1105883a 	add	r2,r2,r4
8110e2d8:	10800017 	ldw	r2,0(r2)
8110e2dc:	1000683a 	jmp	r2
8110e2e0:	8110edf8 	rdprs	r4,r16,17335
8110e2e4:	8110eed8 	cmpnei	r4,r16,17339
8110e2e8:	8110eed8 	cmpnei	r4,r16,17339
8110e2ec:	8110ee18 	cmpnei	r4,r16,17336
8110e2f0:	8110eed8 	cmpnei	r4,r16,17339
8110e2f4:	8110eed8 	cmpnei	r4,r16,17339
8110e2f8:	8110eed8 	cmpnei	r4,r16,17339
8110e2fc:	8110eed8 	cmpnei	r4,r16,17339
8110e300:	8110eed8 	cmpnei	r4,r16,17339
8110e304:	8110eed8 	cmpnei	r4,r16,17339
8110e308:	8110e58c 	andi	r4,r16,17302
8110e30c:	8110ed34 	orhi	r4,r16,17332
8110e310:	8110eed8 	cmpnei	r4,r16,17339
8110e314:	8110e454 	ori	r4,r16,17297
8110e318:	8110e5b4 	orhi	r4,r16,17302
8110e31c:	8110eed8 	cmpnei	r4,r16,17339
8110e320:	8110e5f4 	orhi	r4,r16,17303
8110e324:	8110e600 	call	88110e60 <__reset+0x20f0e60>
8110e328:	8110e600 	call	88110e60 <__reset+0x20f0e60>
8110e32c:	8110e600 	call	88110e60 <__reset+0x20f0e60>
8110e330:	8110e600 	call	88110e60 <__reset+0x20f0e60>
8110e334:	8110e600 	call	88110e60 <__reset+0x20f0e60>
8110e338:	8110e600 	call	88110e60 <__reset+0x20f0e60>
8110e33c:	8110e600 	call	88110e60 <__reset+0x20f0e60>
8110e340:	8110e600 	call	88110e60 <__reset+0x20f0e60>
8110e344:	8110e600 	call	88110e60 <__reset+0x20f0e60>
8110e348:	8110eed8 	cmpnei	r4,r16,17339
8110e34c:	8110eed8 	cmpnei	r4,r16,17339
8110e350:	8110eed8 	cmpnei	r4,r16,17339
8110e354:	8110eed8 	cmpnei	r4,r16,17339
8110e358:	8110eed8 	cmpnei	r4,r16,17339
8110e35c:	8110eed8 	cmpnei	r4,r16,17339
8110e360:	8110eed8 	cmpnei	r4,r16,17339
8110e364:	8110eed8 	cmpnei	r4,r16,17339
8110e368:	8110eed8 	cmpnei	r4,r16,17339
8110e36c:	8110eed8 	cmpnei	r4,r16,17339
8110e370:	8110e634 	orhi	r4,r16,17304
8110e374:	8110e6f0 	cmpltui	r4,r16,17307
8110e378:	8110eed8 	cmpnei	r4,r16,17339
8110e37c:	8110e6f0 	cmpltui	r4,r16,17307
8110e380:	8110eed8 	cmpnei	r4,r16,17339
8110e384:	8110eed8 	cmpnei	r4,r16,17339
8110e388:	8110eed8 	cmpnei	r4,r16,17339
8110e38c:	8110eed8 	cmpnei	r4,r16,17339
8110e390:	8110e790 	cmplti	r4,r16,17310
8110e394:	8110eed8 	cmpnei	r4,r16,17339
8110e398:	8110eed8 	cmpnei	r4,r16,17339
8110e39c:	8110e79c 	xori	r4,r16,17310
8110e3a0:	8110eed8 	cmpnei	r4,r16,17339
8110e3a4:	8110eed8 	cmpnei	r4,r16,17339
8110e3a8:	8110eed8 	cmpnei	r4,r16,17339
8110e3ac:	8110eed8 	cmpnei	r4,r16,17339
8110e3b0:	8110eed8 	cmpnei	r4,r16,17339
8110e3b4:	8110ec14 	ori	r4,r16,17328
8110e3b8:	8110eed8 	cmpnei	r4,r16,17339
8110e3bc:	8110eed8 	cmpnei	r4,r16,17339
8110e3c0:	8110ec74 	orhi	r4,r16,17329
8110e3c4:	8110eed8 	cmpnei	r4,r16,17339
8110e3c8:	8110eed8 	cmpnei	r4,r16,17339
8110e3cc:	8110eed8 	cmpnei	r4,r16,17339
8110e3d0:	8110eed8 	cmpnei	r4,r16,17339
8110e3d4:	8110eed8 	cmpnei	r4,r16,17339
8110e3d8:	8110eed8 	cmpnei	r4,r16,17339
8110e3dc:	8110eed8 	cmpnei	r4,r16,17339
8110e3e0:	8110eed8 	cmpnei	r4,r16,17339
8110e3e4:	8110eed8 	cmpnei	r4,r16,17339
8110e3e8:	8110eed8 	cmpnei	r4,r16,17339
8110e3ec:	8110ee84 	addi	r4,r16,17338
8110e3f0:	8110ee24 	muli	r4,r16,17336
8110e3f4:	8110e6f0 	cmpltui	r4,r16,17307
8110e3f8:	8110e6f0 	cmpltui	r4,r16,17307
8110e3fc:	8110e6f0 	cmpltui	r4,r16,17307
8110e400:	8110ee34 	orhi	r4,r16,17336
8110e404:	8110ee24 	muli	r4,r16,17336
8110e408:	8110eed8 	cmpnei	r4,r16,17339
8110e40c:	8110eed8 	cmpnei	r4,r16,17339
8110e410:	8110ee40 	call	88110ee4 <__reset+0x20f0ee4>
8110e414:	8110eed8 	cmpnei	r4,r16,17339
8110e418:	8110ee50 	cmplti	r4,r16,17337
8110e41c:	8110ed24 	muli	r4,r16,17332
8110e420:	8110e460 	cmpeqi	r4,r16,17297
8110e424:	8110ed44 	addi	r4,r16,17333
8110e428:	8110eed8 	cmpnei	r4,r16,17339
8110e42c:	8110ed50 	cmplti	r4,r16,17333
8110e430:	8110eed8 	cmpnei	r4,r16,17339
8110e434:	8110edac 	andhi	r4,r16,17334
8110e438:	8110eed8 	cmpnei	r4,r16,17339
8110e43c:	8110eed8 	cmpnei	r4,r16,17339
8110e440:	8110edbc 	xorhi	r4,r16,17334
8110e444:	d9003117 	ldw	r4,196(sp)
8110e448:	d8802d15 	stw	r2,180(sp)
8110e44c:	0109c83a 	sub	r4,zero,r4
8110e450:	d9003115 	stw	r4,196(sp)
8110e454:	94800114 	ori	r18,r18,4
8110e458:	ac400007 	ldb	r17,0(r21)
8110e45c:	003f9706 	br	8110e2bc <__reset+0xfb0ee2bc>
8110e460:	00800c04 	movi	r2,48
8110e464:	d9002d17 	ldw	r4,180(sp)
8110e468:	d9402917 	ldw	r5,164(sp)
8110e46c:	d8802705 	stb	r2,156(sp)
8110e470:	00801e04 	movi	r2,120
8110e474:	d8802745 	stb	r2,157(sp)
8110e478:	d8002785 	stb	zero,158(sp)
8110e47c:	20c00104 	addi	r3,r4,4
8110e480:	24c00017 	ldw	r19,0(r4)
8110e484:	002d883a 	mov	r22,zero
8110e488:	90800094 	ori	r2,r18,2
8110e48c:	28029a16 	blt	r5,zero,8110eef8 <___vfprintf_internal_r+0xdc0>
8110e490:	00bfdfc4 	movi	r2,-129
8110e494:	90a4703a 	and	r18,r18,r2
8110e498:	d8c02d15 	stw	r3,180(sp)
8110e49c:	94800094 	ori	r18,r18,2
8110e4a0:	9802871e 	bne	r19,zero,8110eec0 <___vfprintf_internal_r+0xd88>
8110e4a4:	00a044f4 	movhi	r2,33043
8110e4a8:	108dcb04 	addi	r2,r2,14124
8110e4ac:	d8803915 	stw	r2,228(sp)
8110e4b0:	04401e04 	movi	r17,120
8110e4b4:	d8802917 	ldw	r2,164(sp)
8110e4b8:	0039883a 	mov	fp,zero
8110e4bc:	1001e926 	beq	r2,zero,8110ec64 <___vfprintf_internal_r+0xb2c>
8110e4c0:	0027883a 	mov	r19,zero
8110e4c4:	002d883a 	mov	r22,zero
8110e4c8:	00020506 	br	8110ece0 <___vfprintf_internal_r+0xba8>
8110e4cc:	d9002c17 	ldw	r4,176(sp)
8110e4d0:	b80b883a 	mov	r5,r23
8110e4d4:	1111cf40 	call	81111cf4 <__swsetup_r>
8110e4d8:	1005ac1e 	bne	r2,zero,8110fb8c <___vfprintf_internal_r+0x1a54>
8110e4dc:	b880030b 	ldhu	r2,12(r23)
8110e4e0:	00c00284 	movi	r3,10
8110e4e4:	1080068c 	andi	r2,r2,26
8110e4e8:	10ff3c1e 	bne	r2,r3,8110e1dc <__reset+0xfb0ee1dc>
8110e4ec:	b880038f 	ldh	r2,14(r23)
8110e4f0:	103f3a16 	blt	r2,zero,8110e1dc <__reset+0xfb0ee1dc>
8110e4f4:	d9c02d17 	ldw	r7,180(sp)
8110e4f8:	d9002c17 	ldw	r4,176(sp)
8110e4fc:	a80d883a 	mov	r6,r21
8110e500:	b80b883a 	mov	r5,r23
8110e504:	111034c0 	call	8111034c <__sbprintf>
8110e508:	00001106 	br	8110e550 <___vfprintf_internal_r+0x418>
8110e50c:	d9002c17 	ldw	r4,176(sp)
8110e510:	d9801e04 	addi	r6,sp,120
8110e514:	b80b883a 	mov	r5,r23
8110e518:	111a0a40 	call	8111a0a4 <__sprint_r>
8110e51c:	1000081e 	bne	r2,zero,8110e540 <___vfprintf_internal_r+0x408>
8110e520:	da000404 	addi	r8,sp,16
8110e524:	003f5306 	br	8110e274 <__reset+0xfb0ee274>
8110e528:	d8802017 	ldw	r2,128(sp)
8110e52c:	10000426 	beq	r2,zero,8110e540 <___vfprintf_internal_r+0x408>
8110e530:	d9002c17 	ldw	r4,176(sp)
8110e534:	d9801e04 	addi	r6,sp,120
8110e538:	b80b883a 	mov	r5,r23
8110e53c:	111a0a40 	call	8111a0a4 <__sprint_r>
8110e540:	b880030b 	ldhu	r2,12(r23)
8110e544:	1080100c 	andi	r2,r2,64
8110e548:	1005901e 	bne	r2,zero,8110fb8c <___vfprintf_internal_r+0x1a54>
8110e54c:	d8802f17 	ldw	r2,188(sp)
8110e550:	dfc04717 	ldw	ra,284(sp)
8110e554:	df004617 	ldw	fp,280(sp)
8110e558:	ddc04517 	ldw	r23,276(sp)
8110e55c:	dd804417 	ldw	r22,272(sp)
8110e560:	dd404317 	ldw	r21,268(sp)
8110e564:	dd004217 	ldw	r20,264(sp)
8110e568:	dcc04117 	ldw	r19,260(sp)
8110e56c:	dc804017 	ldw	r18,256(sp)
8110e570:	dc403f17 	ldw	r17,252(sp)
8110e574:	dc003e17 	ldw	r16,248(sp)
8110e578:	dec04804 	addi	sp,sp,288
8110e57c:	f800283a 	ret
8110e580:	d9002c17 	ldw	r4,176(sp)
8110e584:	1113d1c0 	call	81113d1c <__sinit>
8110e588:	003f0406 	br	8110e19c <__reset+0xfb0ee19c>
8110e58c:	d8802d17 	ldw	r2,180(sp)
8110e590:	d9002d17 	ldw	r4,180(sp)
8110e594:	10800017 	ldw	r2,0(r2)
8110e598:	d8803115 	stw	r2,196(sp)
8110e59c:	20800104 	addi	r2,r4,4
8110e5a0:	d9003117 	ldw	r4,196(sp)
8110e5a4:	203fa716 	blt	r4,zero,8110e444 <__reset+0xfb0ee444>
8110e5a8:	d8802d15 	stw	r2,180(sp)
8110e5ac:	ac400007 	ldb	r17,0(r21)
8110e5b0:	003f4206 	br	8110e2bc <__reset+0xfb0ee2bc>
8110e5b4:	ac400007 	ldb	r17,0(r21)
8110e5b8:	aac00044 	addi	r11,r21,1
8110e5bc:	8a872826 	beq	r17,r10,81110260 <___vfprintf_internal_r+0x2128>
8110e5c0:	88bff404 	addi	r2,r17,-48
8110e5c4:	0009883a 	mov	r4,zero
8110e5c8:	30867d36 	bltu	r6,r2,8110ffc0 <___vfprintf_internal_r+0x1e88>
8110e5cc:	5c400007 	ldb	r17,0(r11)
8110e5d0:	210002a4 	muli	r4,r4,10
8110e5d4:	5d400044 	addi	r21,r11,1
8110e5d8:	a817883a 	mov	r11,r21
8110e5dc:	2089883a 	add	r4,r4,r2
8110e5e0:	88bff404 	addi	r2,r17,-48
8110e5e4:	30bff92e 	bgeu	r6,r2,8110e5cc <__reset+0xfb0ee5cc>
8110e5e8:	2005c916 	blt	r4,zero,8110fd10 <___vfprintf_internal_r+0x1bd8>
8110e5ec:	d9002915 	stw	r4,164(sp)
8110e5f0:	003f3306 	br	8110e2c0 <__reset+0xfb0ee2c0>
8110e5f4:	94802014 	ori	r18,r18,128
8110e5f8:	ac400007 	ldb	r17,0(r21)
8110e5fc:	003f2f06 	br	8110e2bc <__reset+0xfb0ee2bc>
8110e600:	a809883a 	mov	r4,r21
8110e604:	d8003115 	stw	zero,196(sp)
8110e608:	88bff404 	addi	r2,r17,-48
8110e60c:	0017883a 	mov	r11,zero
8110e610:	24400007 	ldb	r17,0(r4)
8110e614:	5ac002a4 	muli	r11,r11,10
8110e618:	ad400044 	addi	r21,r21,1
8110e61c:	a809883a 	mov	r4,r21
8110e620:	12d7883a 	add	r11,r2,r11
8110e624:	88bff404 	addi	r2,r17,-48
8110e628:	30bff92e 	bgeu	r6,r2,8110e610 <__reset+0xfb0ee610>
8110e62c:	dac03115 	stw	r11,196(sp)
8110e630:	003f2306 	br	8110e2c0 <__reset+0xfb0ee2c0>
8110e634:	18c03fcc 	andi	r3,r3,255
8110e638:	18072b1e 	bne	r3,zero,811102e8 <___vfprintf_internal_r+0x21b0>
8110e63c:	94800414 	ori	r18,r18,16
8110e640:	9080080c 	andi	r2,r18,32
8110e644:	10037b26 	beq	r2,zero,8110f434 <___vfprintf_internal_r+0x12fc>
8110e648:	d9402d17 	ldw	r5,180(sp)
8110e64c:	28800117 	ldw	r2,4(r5)
8110e650:	2cc00017 	ldw	r19,0(r5)
8110e654:	29400204 	addi	r5,r5,8
8110e658:	d9402d15 	stw	r5,180(sp)
8110e65c:	102d883a 	mov	r22,r2
8110e660:	10044b16 	blt	r2,zero,8110f790 <___vfprintf_internal_r+0x1658>
8110e664:	d9402917 	ldw	r5,164(sp)
8110e668:	df002783 	ldbu	fp,158(sp)
8110e66c:	2803bc16 	blt	r5,zero,8110f560 <___vfprintf_internal_r+0x1428>
8110e670:	00ffdfc4 	movi	r3,-129
8110e674:	9d84b03a 	or	r2,r19,r22
8110e678:	90e4703a 	and	r18,r18,r3
8110e67c:	10017726 	beq	r2,zero,8110ec5c <___vfprintf_internal_r+0xb24>
8110e680:	b0038326 	beq	r22,zero,8110f490 <___vfprintf_internal_r+0x1358>
8110e684:	dc402a15 	stw	r17,168(sp)
8110e688:	dc001e04 	addi	r16,sp,120
8110e68c:	b023883a 	mov	r17,r22
8110e690:	402d883a 	mov	r22,r8
8110e694:	9809883a 	mov	r4,r19
8110e698:	880b883a 	mov	r5,r17
8110e69c:	01800284 	movi	r6,10
8110e6a0:	000f883a 	mov	r7,zero
8110e6a4:	111cf480 	call	8111cf48 <__umoddi3>
8110e6a8:	10800c04 	addi	r2,r2,48
8110e6ac:	843fffc4 	addi	r16,r16,-1
8110e6b0:	9809883a 	mov	r4,r19
8110e6b4:	880b883a 	mov	r5,r17
8110e6b8:	80800005 	stb	r2,0(r16)
8110e6bc:	01800284 	movi	r6,10
8110e6c0:	000f883a 	mov	r7,zero
8110e6c4:	111c9d00 	call	8111c9d0 <__udivdi3>
8110e6c8:	1027883a 	mov	r19,r2
8110e6cc:	10c4b03a 	or	r2,r2,r3
8110e6d0:	1823883a 	mov	r17,r3
8110e6d4:	103fef1e 	bne	r2,zero,8110e694 <__reset+0xfb0ee694>
8110e6d8:	d8c02817 	ldw	r3,160(sp)
8110e6dc:	dc402a17 	ldw	r17,168(sp)
8110e6e0:	b011883a 	mov	r8,r22
8110e6e4:	1c07c83a 	sub	r3,r3,r16
8110e6e8:	d8c02e15 	stw	r3,184(sp)
8110e6ec:	00005906 	br	8110e854 <___vfprintf_internal_r+0x71c>
8110e6f0:	18c03fcc 	andi	r3,r3,255
8110e6f4:	1806fa1e 	bne	r3,zero,811102e0 <___vfprintf_internal_r+0x21a8>
8110e6f8:	9080020c 	andi	r2,r18,8
8110e6fc:	10048a26 	beq	r2,zero,8110f928 <___vfprintf_internal_r+0x17f0>
8110e700:	d8c02d17 	ldw	r3,180(sp)
8110e704:	d9002d17 	ldw	r4,180(sp)
8110e708:	d9402d17 	ldw	r5,180(sp)
8110e70c:	18c00017 	ldw	r3,0(r3)
8110e710:	21000117 	ldw	r4,4(r4)
8110e714:	29400204 	addi	r5,r5,8
8110e718:	d8c03615 	stw	r3,216(sp)
8110e71c:	d9003815 	stw	r4,224(sp)
8110e720:	d9402d15 	stw	r5,180(sp)
8110e724:	d9003617 	ldw	r4,216(sp)
8110e728:	d9403817 	ldw	r5,224(sp)
8110e72c:	da003d15 	stw	r8,244(sp)
8110e730:	04000044 	movi	r16,1
8110e734:	111683c0 	call	8111683c <__fpclassifyd>
8110e738:	da003d17 	ldw	r8,244(sp)
8110e73c:	14041f1e 	bne	r2,r16,8110f7bc <___vfprintf_internal_r+0x1684>
8110e740:	d9003617 	ldw	r4,216(sp)
8110e744:	d9403817 	ldw	r5,224(sp)
8110e748:	000d883a 	mov	r6,zero
8110e74c:	000f883a 	mov	r7,zero
8110e750:	111eb280 	call	8111eb28 <__ledf2>
8110e754:	da003d17 	ldw	r8,244(sp)
8110e758:	1005be16 	blt	r2,zero,8110fe54 <___vfprintf_internal_r+0x1d1c>
8110e75c:	df002783 	ldbu	fp,158(sp)
8110e760:	008011c4 	movi	r2,71
8110e764:	1445330e 	bge	r2,r17,8110fc34 <___vfprintf_internal_r+0x1afc>
8110e768:	042044f4 	movhi	r16,33043
8110e76c:	840dc304 	addi	r16,r16,14092
8110e770:	00c000c4 	movi	r3,3
8110e774:	00bfdfc4 	movi	r2,-129
8110e778:	d8c02a15 	stw	r3,168(sp)
8110e77c:	90a4703a 	and	r18,r18,r2
8110e780:	d8c02e15 	stw	r3,184(sp)
8110e784:	d8002915 	stw	zero,164(sp)
8110e788:	d8003215 	stw	zero,200(sp)
8110e78c:	00003706 	br	8110e86c <___vfprintf_internal_r+0x734>
8110e790:	94800214 	ori	r18,r18,8
8110e794:	ac400007 	ldb	r17,0(r21)
8110e798:	003ec806 	br	8110e2bc <__reset+0xfb0ee2bc>
8110e79c:	18c03fcc 	andi	r3,r3,255
8110e7a0:	1806db1e 	bne	r3,zero,81110310 <___vfprintf_internal_r+0x21d8>
8110e7a4:	94800414 	ori	r18,r18,16
8110e7a8:	9080080c 	andi	r2,r18,32
8110e7ac:	1002d826 	beq	r2,zero,8110f310 <___vfprintf_internal_r+0x11d8>
8110e7b0:	d9402d17 	ldw	r5,180(sp)
8110e7b4:	d8c02917 	ldw	r3,164(sp)
8110e7b8:	d8002785 	stb	zero,158(sp)
8110e7bc:	28800204 	addi	r2,r5,8
8110e7c0:	2cc00017 	ldw	r19,0(r5)
8110e7c4:	2d800117 	ldw	r22,4(r5)
8110e7c8:	18048f16 	blt	r3,zero,8110fa08 <___vfprintf_internal_r+0x18d0>
8110e7cc:	013fdfc4 	movi	r4,-129
8110e7d0:	9d86b03a 	or	r3,r19,r22
8110e7d4:	d8802d15 	stw	r2,180(sp)
8110e7d8:	9124703a 	and	r18,r18,r4
8110e7dc:	1802d91e 	bne	r3,zero,8110f344 <___vfprintf_internal_r+0x120c>
8110e7e0:	d8c02917 	ldw	r3,164(sp)
8110e7e4:	0039883a 	mov	fp,zero
8110e7e8:	1805c326 	beq	r3,zero,8110fef8 <___vfprintf_internal_r+0x1dc0>
8110e7ec:	0027883a 	mov	r19,zero
8110e7f0:	002d883a 	mov	r22,zero
8110e7f4:	dc001e04 	addi	r16,sp,120
8110e7f8:	9806d0fa 	srli	r3,r19,3
8110e7fc:	b008977a 	slli	r4,r22,29
8110e800:	b02cd0fa 	srli	r22,r22,3
8110e804:	9cc001cc 	andi	r19,r19,7
8110e808:	98800c04 	addi	r2,r19,48
8110e80c:	843fffc4 	addi	r16,r16,-1
8110e810:	20e6b03a 	or	r19,r4,r3
8110e814:	80800005 	stb	r2,0(r16)
8110e818:	9d86b03a 	or	r3,r19,r22
8110e81c:	183ff61e 	bne	r3,zero,8110e7f8 <__reset+0xfb0ee7f8>
8110e820:	90c0004c 	andi	r3,r18,1
8110e824:	18013b26 	beq	r3,zero,8110ed14 <___vfprintf_internal_r+0xbdc>
8110e828:	10803fcc 	andi	r2,r2,255
8110e82c:	1080201c 	xori	r2,r2,128
8110e830:	10bfe004 	addi	r2,r2,-128
8110e834:	00c00c04 	movi	r3,48
8110e838:	10c13626 	beq	r2,r3,8110ed14 <___vfprintf_internal_r+0xbdc>
8110e83c:	80ffffc5 	stb	r3,-1(r16)
8110e840:	d8c02817 	ldw	r3,160(sp)
8110e844:	80bfffc4 	addi	r2,r16,-1
8110e848:	1021883a 	mov	r16,r2
8110e84c:	1887c83a 	sub	r3,r3,r2
8110e850:	d8c02e15 	stw	r3,184(sp)
8110e854:	d8802e17 	ldw	r2,184(sp)
8110e858:	d9002917 	ldw	r4,164(sp)
8110e85c:	1100010e 	bge	r2,r4,8110e864 <___vfprintf_internal_r+0x72c>
8110e860:	2005883a 	mov	r2,r4
8110e864:	d8802a15 	stw	r2,168(sp)
8110e868:	d8003215 	stw	zero,200(sp)
8110e86c:	e7003fcc 	andi	fp,fp,255
8110e870:	e700201c 	xori	fp,fp,128
8110e874:	e73fe004 	addi	fp,fp,-128
8110e878:	e0000326 	beq	fp,zero,8110e888 <___vfprintf_internal_r+0x750>
8110e87c:	d8c02a17 	ldw	r3,168(sp)
8110e880:	18c00044 	addi	r3,r3,1
8110e884:	d8c02a15 	stw	r3,168(sp)
8110e888:	90c0008c 	andi	r3,r18,2
8110e88c:	d8c02b15 	stw	r3,172(sp)
8110e890:	18000326 	beq	r3,zero,8110e8a0 <___vfprintf_internal_r+0x768>
8110e894:	d8c02a17 	ldw	r3,168(sp)
8110e898:	18c00084 	addi	r3,r3,2
8110e89c:	d8c02a15 	stw	r3,168(sp)
8110e8a0:	90c0210c 	andi	r3,r18,132
8110e8a4:	d8c03015 	stw	r3,192(sp)
8110e8a8:	1801a31e 	bne	r3,zero,8110ef38 <___vfprintf_internal_r+0xe00>
8110e8ac:	d9003117 	ldw	r4,196(sp)
8110e8b0:	d8c02a17 	ldw	r3,168(sp)
8110e8b4:	20e7c83a 	sub	r19,r4,r3
8110e8b8:	04c19f0e 	bge	zero,r19,8110ef38 <___vfprintf_internal_r+0xe00>
8110e8bc:	02400404 	movi	r9,16
8110e8c0:	d8c02017 	ldw	r3,128(sp)
8110e8c4:	d8801f17 	ldw	r2,124(sp)
8110e8c8:	4cc50d0e 	bge	r9,r19,8110fd00 <___vfprintf_internal_r+0x1bc8>
8110e8cc:	016044f4 	movhi	r5,33043
8110e8d0:	294dde84 	addi	r5,r5,14202
8110e8d4:	dc403b15 	stw	r17,236(sp)
8110e8d8:	d9403515 	stw	r5,212(sp)
8110e8dc:	9823883a 	mov	r17,r19
8110e8e0:	482d883a 	mov	r22,r9
8110e8e4:	9027883a 	mov	r19,r18
8110e8e8:	070001c4 	movi	fp,7
8110e8ec:	8025883a 	mov	r18,r16
8110e8f0:	dc002c17 	ldw	r16,176(sp)
8110e8f4:	00000306 	br	8110e904 <___vfprintf_internal_r+0x7cc>
8110e8f8:	8c7ffc04 	addi	r17,r17,-16
8110e8fc:	42000204 	addi	r8,r8,8
8110e900:	b440130e 	bge	r22,r17,8110e950 <___vfprintf_internal_r+0x818>
8110e904:	012044f4 	movhi	r4,33043
8110e908:	18c00404 	addi	r3,r3,16
8110e90c:	10800044 	addi	r2,r2,1
8110e910:	210dde84 	addi	r4,r4,14202
8110e914:	41000015 	stw	r4,0(r8)
8110e918:	45800115 	stw	r22,4(r8)
8110e91c:	d8c02015 	stw	r3,128(sp)
8110e920:	d8801f15 	stw	r2,124(sp)
8110e924:	e0bff40e 	bge	fp,r2,8110e8f8 <__reset+0xfb0ee8f8>
8110e928:	d9801e04 	addi	r6,sp,120
8110e92c:	b80b883a 	mov	r5,r23
8110e930:	8009883a 	mov	r4,r16
8110e934:	111a0a40 	call	8111a0a4 <__sprint_r>
8110e938:	103f011e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110e93c:	8c7ffc04 	addi	r17,r17,-16
8110e940:	d8c02017 	ldw	r3,128(sp)
8110e944:	d8801f17 	ldw	r2,124(sp)
8110e948:	da000404 	addi	r8,sp,16
8110e94c:	b47fed16 	blt	r22,r17,8110e904 <__reset+0xfb0ee904>
8110e950:	9021883a 	mov	r16,r18
8110e954:	9825883a 	mov	r18,r19
8110e958:	8827883a 	mov	r19,r17
8110e95c:	dc403b17 	ldw	r17,236(sp)
8110e960:	d9403517 	ldw	r5,212(sp)
8110e964:	98c7883a 	add	r3,r19,r3
8110e968:	10800044 	addi	r2,r2,1
8110e96c:	41400015 	stw	r5,0(r8)
8110e970:	44c00115 	stw	r19,4(r8)
8110e974:	d8c02015 	stw	r3,128(sp)
8110e978:	d8801f15 	stw	r2,124(sp)
8110e97c:	010001c4 	movi	r4,7
8110e980:	2082a316 	blt	r4,r2,8110f410 <___vfprintf_internal_r+0x12d8>
8110e984:	df002787 	ldb	fp,158(sp)
8110e988:	42000204 	addi	r8,r8,8
8110e98c:	e0000c26 	beq	fp,zero,8110e9c0 <___vfprintf_internal_r+0x888>
8110e990:	d8801f17 	ldw	r2,124(sp)
8110e994:	d9002784 	addi	r4,sp,158
8110e998:	18c00044 	addi	r3,r3,1
8110e99c:	10800044 	addi	r2,r2,1
8110e9a0:	41000015 	stw	r4,0(r8)
8110e9a4:	01000044 	movi	r4,1
8110e9a8:	41000115 	stw	r4,4(r8)
8110e9ac:	d8c02015 	stw	r3,128(sp)
8110e9b0:	d8801f15 	stw	r2,124(sp)
8110e9b4:	010001c4 	movi	r4,7
8110e9b8:	20823c16 	blt	r4,r2,8110f2ac <___vfprintf_internal_r+0x1174>
8110e9bc:	42000204 	addi	r8,r8,8
8110e9c0:	d8802b17 	ldw	r2,172(sp)
8110e9c4:	10000c26 	beq	r2,zero,8110e9f8 <___vfprintf_internal_r+0x8c0>
8110e9c8:	d8801f17 	ldw	r2,124(sp)
8110e9cc:	d9002704 	addi	r4,sp,156
8110e9d0:	18c00084 	addi	r3,r3,2
8110e9d4:	10800044 	addi	r2,r2,1
8110e9d8:	41000015 	stw	r4,0(r8)
8110e9dc:	01000084 	movi	r4,2
8110e9e0:	41000115 	stw	r4,4(r8)
8110e9e4:	d8c02015 	stw	r3,128(sp)
8110e9e8:	d8801f15 	stw	r2,124(sp)
8110e9ec:	010001c4 	movi	r4,7
8110e9f0:	20823616 	blt	r4,r2,8110f2cc <___vfprintf_internal_r+0x1194>
8110e9f4:	42000204 	addi	r8,r8,8
8110e9f8:	d9003017 	ldw	r4,192(sp)
8110e9fc:	00802004 	movi	r2,128
8110ea00:	20819926 	beq	r4,r2,8110f068 <___vfprintf_internal_r+0xf30>
8110ea04:	d9402917 	ldw	r5,164(sp)
8110ea08:	d8802e17 	ldw	r2,184(sp)
8110ea0c:	28adc83a 	sub	r22,r5,r2
8110ea10:	0580310e 	bge	zero,r22,8110ead8 <___vfprintf_internal_r+0x9a0>
8110ea14:	07000404 	movi	fp,16
8110ea18:	d8801f17 	ldw	r2,124(sp)
8110ea1c:	e584140e 	bge	fp,r22,8110fa70 <___vfprintf_internal_r+0x1938>
8110ea20:	016044f4 	movhi	r5,33043
8110ea24:	294dda84 	addi	r5,r5,14186
8110ea28:	dc402915 	stw	r17,164(sp)
8110ea2c:	d9402b15 	stw	r5,172(sp)
8110ea30:	b023883a 	mov	r17,r22
8110ea34:	04c001c4 	movi	r19,7
8110ea38:	a82d883a 	mov	r22,r21
8110ea3c:	902b883a 	mov	r21,r18
8110ea40:	8025883a 	mov	r18,r16
8110ea44:	dc002c17 	ldw	r16,176(sp)
8110ea48:	00000306 	br	8110ea58 <___vfprintf_internal_r+0x920>
8110ea4c:	8c7ffc04 	addi	r17,r17,-16
8110ea50:	42000204 	addi	r8,r8,8
8110ea54:	e440110e 	bge	fp,r17,8110ea9c <___vfprintf_internal_r+0x964>
8110ea58:	18c00404 	addi	r3,r3,16
8110ea5c:	10800044 	addi	r2,r2,1
8110ea60:	45000015 	stw	r20,0(r8)
8110ea64:	47000115 	stw	fp,4(r8)
8110ea68:	d8c02015 	stw	r3,128(sp)
8110ea6c:	d8801f15 	stw	r2,124(sp)
8110ea70:	98bff60e 	bge	r19,r2,8110ea4c <__reset+0xfb0eea4c>
8110ea74:	d9801e04 	addi	r6,sp,120
8110ea78:	b80b883a 	mov	r5,r23
8110ea7c:	8009883a 	mov	r4,r16
8110ea80:	111a0a40 	call	8111a0a4 <__sprint_r>
8110ea84:	103eae1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110ea88:	8c7ffc04 	addi	r17,r17,-16
8110ea8c:	d8c02017 	ldw	r3,128(sp)
8110ea90:	d8801f17 	ldw	r2,124(sp)
8110ea94:	da000404 	addi	r8,sp,16
8110ea98:	e47fef16 	blt	fp,r17,8110ea58 <__reset+0xfb0eea58>
8110ea9c:	9021883a 	mov	r16,r18
8110eaa0:	a825883a 	mov	r18,r21
8110eaa4:	b02b883a 	mov	r21,r22
8110eaa8:	882d883a 	mov	r22,r17
8110eaac:	dc402917 	ldw	r17,164(sp)
8110eab0:	d9002b17 	ldw	r4,172(sp)
8110eab4:	1d87883a 	add	r3,r3,r22
8110eab8:	10800044 	addi	r2,r2,1
8110eabc:	41000015 	stw	r4,0(r8)
8110eac0:	45800115 	stw	r22,4(r8)
8110eac4:	d8c02015 	stw	r3,128(sp)
8110eac8:	d8801f15 	stw	r2,124(sp)
8110eacc:	010001c4 	movi	r4,7
8110ead0:	2081ee16 	blt	r4,r2,8110f28c <___vfprintf_internal_r+0x1154>
8110ead4:	42000204 	addi	r8,r8,8
8110ead8:	9080400c 	andi	r2,r18,256
8110eadc:	1001181e 	bne	r2,zero,8110ef40 <___vfprintf_internal_r+0xe08>
8110eae0:	d9402e17 	ldw	r5,184(sp)
8110eae4:	d8801f17 	ldw	r2,124(sp)
8110eae8:	44000015 	stw	r16,0(r8)
8110eaec:	1947883a 	add	r3,r3,r5
8110eaf0:	10800044 	addi	r2,r2,1
8110eaf4:	41400115 	stw	r5,4(r8)
8110eaf8:	d8c02015 	stw	r3,128(sp)
8110eafc:	d8801f15 	stw	r2,124(sp)
8110eb00:	010001c4 	movi	r4,7
8110eb04:	2081d316 	blt	r4,r2,8110f254 <___vfprintf_internal_r+0x111c>
8110eb08:	42000204 	addi	r8,r8,8
8110eb0c:	9480010c 	andi	r18,r18,4
8110eb10:	90003226 	beq	r18,zero,8110ebdc <___vfprintf_internal_r+0xaa4>
8110eb14:	d9403117 	ldw	r5,196(sp)
8110eb18:	d8802a17 	ldw	r2,168(sp)
8110eb1c:	28a1c83a 	sub	r16,r5,r2
8110eb20:	04002e0e 	bge	zero,r16,8110ebdc <___vfprintf_internal_r+0xaa4>
8110eb24:	04400404 	movi	r17,16
8110eb28:	d8801f17 	ldw	r2,124(sp)
8110eb2c:	8c04a20e 	bge	r17,r16,8110fdb8 <___vfprintf_internal_r+0x1c80>
8110eb30:	016044f4 	movhi	r5,33043
8110eb34:	294dde84 	addi	r5,r5,14202
8110eb38:	d9403515 	stw	r5,212(sp)
8110eb3c:	048001c4 	movi	r18,7
8110eb40:	dcc02c17 	ldw	r19,176(sp)
8110eb44:	00000306 	br	8110eb54 <___vfprintf_internal_r+0xa1c>
8110eb48:	843ffc04 	addi	r16,r16,-16
8110eb4c:	42000204 	addi	r8,r8,8
8110eb50:	8c00130e 	bge	r17,r16,8110eba0 <___vfprintf_internal_r+0xa68>
8110eb54:	012044f4 	movhi	r4,33043
8110eb58:	18c00404 	addi	r3,r3,16
8110eb5c:	10800044 	addi	r2,r2,1
8110eb60:	210dde84 	addi	r4,r4,14202
8110eb64:	41000015 	stw	r4,0(r8)
8110eb68:	44400115 	stw	r17,4(r8)
8110eb6c:	d8c02015 	stw	r3,128(sp)
8110eb70:	d8801f15 	stw	r2,124(sp)
8110eb74:	90bff40e 	bge	r18,r2,8110eb48 <__reset+0xfb0eeb48>
8110eb78:	d9801e04 	addi	r6,sp,120
8110eb7c:	b80b883a 	mov	r5,r23
8110eb80:	9809883a 	mov	r4,r19
8110eb84:	111a0a40 	call	8111a0a4 <__sprint_r>
8110eb88:	103e6d1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110eb8c:	843ffc04 	addi	r16,r16,-16
8110eb90:	d8c02017 	ldw	r3,128(sp)
8110eb94:	d8801f17 	ldw	r2,124(sp)
8110eb98:	da000404 	addi	r8,sp,16
8110eb9c:	8c3fed16 	blt	r17,r16,8110eb54 <__reset+0xfb0eeb54>
8110eba0:	d9403517 	ldw	r5,212(sp)
8110eba4:	1c07883a 	add	r3,r3,r16
8110eba8:	10800044 	addi	r2,r2,1
8110ebac:	41400015 	stw	r5,0(r8)
8110ebb0:	44000115 	stw	r16,4(r8)
8110ebb4:	d8c02015 	stw	r3,128(sp)
8110ebb8:	d8801f15 	stw	r2,124(sp)
8110ebbc:	010001c4 	movi	r4,7
8110ebc0:	2080060e 	bge	r4,r2,8110ebdc <___vfprintf_internal_r+0xaa4>
8110ebc4:	d9002c17 	ldw	r4,176(sp)
8110ebc8:	d9801e04 	addi	r6,sp,120
8110ebcc:	b80b883a 	mov	r5,r23
8110ebd0:	111a0a40 	call	8111a0a4 <__sprint_r>
8110ebd4:	103e5a1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110ebd8:	d8c02017 	ldw	r3,128(sp)
8110ebdc:	d8803117 	ldw	r2,196(sp)
8110ebe0:	d9002a17 	ldw	r4,168(sp)
8110ebe4:	1100010e 	bge	r2,r4,8110ebec <___vfprintf_internal_r+0xab4>
8110ebe8:	2005883a 	mov	r2,r4
8110ebec:	d9402f17 	ldw	r5,188(sp)
8110ebf0:	288b883a 	add	r5,r5,r2
8110ebf4:	d9402f15 	stw	r5,188(sp)
8110ebf8:	18019e1e 	bne	r3,zero,8110f274 <___vfprintf_internal_r+0x113c>
8110ebfc:	a8800007 	ldb	r2,0(r21)
8110ec00:	d8001f15 	stw	zero,124(sp)
8110ec04:	da000404 	addi	r8,sp,16
8110ec08:	103d851e 	bne	r2,zero,8110e220 <__reset+0xfb0ee220>
8110ec0c:	a821883a 	mov	r16,r21
8110ec10:	003d9b06 	br	8110e280 <__reset+0xfb0ee280>
8110ec14:	18c03fcc 	andi	r3,r3,255
8110ec18:	1805c11e 	bne	r3,zero,81110320 <___vfprintf_internal_r+0x21e8>
8110ec1c:	94800414 	ori	r18,r18,16
8110ec20:	9080080c 	andi	r2,r18,32
8110ec24:	10020c26 	beq	r2,zero,8110f458 <___vfprintf_internal_r+0x1320>
8110ec28:	d8802d17 	ldw	r2,180(sp)
8110ec2c:	d9002917 	ldw	r4,164(sp)
8110ec30:	d8002785 	stb	zero,158(sp)
8110ec34:	10c00204 	addi	r3,r2,8
8110ec38:	14c00017 	ldw	r19,0(r2)
8110ec3c:	15800117 	ldw	r22,4(r2)
8110ec40:	20040f16 	blt	r4,zero,8110fc80 <___vfprintf_internal_r+0x1b48>
8110ec44:	013fdfc4 	movi	r4,-129
8110ec48:	9d84b03a 	or	r2,r19,r22
8110ec4c:	d8c02d15 	stw	r3,180(sp)
8110ec50:	9124703a 	and	r18,r18,r4
8110ec54:	0039883a 	mov	fp,zero
8110ec58:	103e891e 	bne	r2,zero,8110e680 <__reset+0xfb0ee680>
8110ec5c:	d9002917 	ldw	r4,164(sp)
8110ec60:	2002c11e 	bne	r4,zero,8110f768 <___vfprintf_internal_r+0x1630>
8110ec64:	d8002915 	stw	zero,164(sp)
8110ec68:	d8002e15 	stw	zero,184(sp)
8110ec6c:	dc001e04 	addi	r16,sp,120
8110ec70:	003ef806 	br	8110e854 <__reset+0xfb0ee854>
8110ec74:	18c03fcc 	andi	r3,r3,255
8110ec78:	18059d1e 	bne	r3,zero,811102f0 <___vfprintf_internal_r+0x21b8>
8110ec7c:	016044f4 	movhi	r5,33043
8110ec80:	294dc604 	addi	r5,r5,14104
8110ec84:	d9403915 	stw	r5,228(sp)
8110ec88:	9080080c 	andi	r2,r18,32
8110ec8c:	10005226 	beq	r2,zero,8110edd8 <___vfprintf_internal_r+0xca0>
8110ec90:	d8802d17 	ldw	r2,180(sp)
8110ec94:	14c00017 	ldw	r19,0(r2)
8110ec98:	15800117 	ldw	r22,4(r2)
8110ec9c:	10800204 	addi	r2,r2,8
8110eca0:	d8802d15 	stw	r2,180(sp)
8110eca4:	9080004c 	andi	r2,r18,1
8110eca8:	10019026 	beq	r2,zero,8110f2ec <___vfprintf_internal_r+0x11b4>
8110ecac:	9d84b03a 	or	r2,r19,r22
8110ecb0:	10036926 	beq	r2,zero,8110fa58 <___vfprintf_internal_r+0x1920>
8110ecb4:	d8c02917 	ldw	r3,164(sp)
8110ecb8:	00800c04 	movi	r2,48
8110ecbc:	d8802705 	stb	r2,156(sp)
8110ecc0:	dc402745 	stb	r17,157(sp)
8110ecc4:	d8002785 	stb	zero,158(sp)
8110ecc8:	90800094 	ori	r2,r18,2
8110eccc:	18045d16 	blt	r3,zero,8110fe44 <___vfprintf_internal_r+0x1d0c>
8110ecd0:	00bfdfc4 	movi	r2,-129
8110ecd4:	90a4703a 	and	r18,r18,r2
8110ecd8:	94800094 	ori	r18,r18,2
8110ecdc:	0039883a 	mov	fp,zero
8110ece0:	d9003917 	ldw	r4,228(sp)
8110ece4:	dc001e04 	addi	r16,sp,120
8110ece8:	988003cc 	andi	r2,r19,15
8110ecec:	b006973a 	slli	r3,r22,28
8110ecf0:	2085883a 	add	r2,r4,r2
8110ecf4:	9826d13a 	srli	r19,r19,4
8110ecf8:	10800003 	ldbu	r2,0(r2)
8110ecfc:	b02cd13a 	srli	r22,r22,4
8110ed00:	843fffc4 	addi	r16,r16,-1
8110ed04:	1ce6b03a 	or	r19,r3,r19
8110ed08:	80800005 	stb	r2,0(r16)
8110ed0c:	9d84b03a 	or	r2,r19,r22
8110ed10:	103ff51e 	bne	r2,zero,8110ece8 <__reset+0xfb0eece8>
8110ed14:	d8c02817 	ldw	r3,160(sp)
8110ed18:	1c07c83a 	sub	r3,r3,r16
8110ed1c:	d8c02e15 	stw	r3,184(sp)
8110ed20:	003ecc06 	br	8110e854 <__reset+0xfb0ee854>
8110ed24:	18c03fcc 	andi	r3,r3,255
8110ed28:	183e9f26 	beq	r3,zero,8110e7a8 <__reset+0xfb0ee7a8>
8110ed2c:	d9c02785 	stb	r7,158(sp)
8110ed30:	003e9d06 	br	8110e7a8 <__reset+0xfb0ee7a8>
8110ed34:	00c00044 	movi	r3,1
8110ed38:	01c00ac4 	movi	r7,43
8110ed3c:	ac400007 	ldb	r17,0(r21)
8110ed40:	003d5e06 	br	8110e2bc <__reset+0xfb0ee2bc>
8110ed44:	94800814 	ori	r18,r18,32
8110ed48:	ac400007 	ldb	r17,0(r21)
8110ed4c:	003d5b06 	br	8110e2bc <__reset+0xfb0ee2bc>
8110ed50:	d8c02d17 	ldw	r3,180(sp)
8110ed54:	d8002785 	stb	zero,158(sp)
8110ed58:	1c000017 	ldw	r16,0(r3)
8110ed5c:	1cc00104 	addi	r19,r3,4
8110ed60:	80041926 	beq	r16,zero,8110fdc8 <___vfprintf_internal_r+0x1c90>
8110ed64:	d9002917 	ldw	r4,164(sp)
8110ed68:	2003d016 	blt	r4,zero,8110fcac <___vfprintf_internal_r+0x1b74>
8110ed6c:	200d883a 	mov	r6,r4
8110ed70:	000b883a 	mov	r5,zero
8110ed74:	8009883a 	mov	r4,r16
8110ed78:	da003d15 	stw	r8,244(sp)
8110ed7c:	1114ed40 	call	81114ed4 <memchr>
8110ed80:	da003d17 	ldw	r8,244(sp)
8110ed84:	10045426 	beq	r2,zero,8110fed8 <___vfprintf_internal_r+0x1da0>
8110ed88:	1405c83a 	sub	r2,r2,r16
8110ed8c:	d8802e15 	stw	r2,184(sp)
8110ed90:	1003cc16 	blt	r2,zero,8110fcc4 <___vfprintf_internal_r+0x1b8c>
8110ed94:	df002783 	ldbu	fp,158(sp)
8110ed98:	d8802a15 	stw	r2,168(sp)
8110ed9c:	dcc02d15 	stw	r19,180(sp)
8110eda0:	d8002915 	stw	zero,164(sp)
8110eda4:	d8003215 	stw	zero,200(sp)
8110eda8:	003eb006 	br	8110e86c <__reset+0xfb0ee86c>
8110edac:	18c03fcc 	andi	r3,r3,255
8110edb0:	183f9b26 	beq	r3,zero,8110ec20 <__reset+0xfb0eec20>
8110edb4:	d9c02785 	stb	r7,158(sp)
8110edb8:	003f9906 	br	8110ec20 <__reset+0xfb0eec20>
8110edbc:	18c03fcc 	andi	r3,r3,255
8110edc0:	1805551e 	bne	r3,zero,81110318 <___vfprintf_internal_r+0x21e0>
8110edc4:	016044f4 	movhi	r5,33043
8110edc8:	294dcb04 	addi	r5,r5,14124
8110edcc:	d9403915 	stw	r5,228(sp)
8110edd0:	9080080c 	andi	r2,r18,32
8110edd4:	103fae1e 	bne	r2,zero,8110ec90 <__reset+0xfb0eec90>
8110edd8:	9080040c 	andi	r2,r18,16
8110eddc:	1002de26 	beq	r2,zero,8110f958 <___vfprintf_internal_r+0x1820>
8110ede0:	d8c02d17 	ldw	r3,180(sp)
8110ede4:	002d883a 	mov	r22,zero
8110ede8:	1cc00017 	ldw	r19,0(r3)
8110edec:	18c00104 	addi	r3,r3,4
8110edf0:	d8c02d15 	stw	r3,180(sp)
8110edf4:	003fab06 	br	8110eca4 <__reset+0xfb0eeca4>
8110edf8:	38803fcc 	andi	r2,r7,255
8110edfc:	1080201c 	xori	r2,r2,128
8110ee00:	10bfe004 	addi	r2,r2,-128
8110ee04:	1002d21e 	bne	r2,zero,8110f950 <___vfprintf_internal_r+0x1818>
8110ee08:	00c00044 	movi	r3,1
8110ee0c:	01c00804 	movi	r7,32
8110ee10:	ac400007 	ldb	r17,0(r21)
8110ee14:	003d2906 	br	8110e2bc <__reset+0xfb0ee2bc>
8110ee18:	94800054 	ori	r18,r18,1
8110ee1c:	ac400007 	ldb	r17,0(r21)
8110ee20:	003d2606 	br	8110e2bc <__reset+0xfb0ee2bc>
8110ee24:	18c03fcc 	andi	r3,r3,255
8110ee28:	183e0526 	beq	r3,zero,8110e640 <__reset+0xfb0ee640>
8110ee2c:	d9c02785 	stb	r7,158(sp)
8110ee30:	003e0306 	br	8110e640 <__reset+0xfb0ee640>
8110ee34:	94801014 	ori	r18,r18,64
8110ee38:	ac400007 	ldb	r17,0(r21)
8110ee3c:	003d1f06 	br	8110e2bc <__reset+0xfb0ee2bc>
8110ee40:	ac400007 	ldb	r17,0(r21)
8110ee44:	8a438726 	beq	r17,r9,8110fc64 <___vfprintf_internal_r+0x1b2c>
8110ee48:	94800414 	ori	r18,r18,16
8110ee4c:	003d1b06 	br	8110e2bc <__reset+0xfb0ee2bc>
8110ee50:	18c03fcc 	andi	r3,r3,255
8110ee54:	1805341e 	bne	r3,zero,81110328 <___vfprintf_internal_r+0x21f0>
8110ee58:	9080080c 	andi	r2,r18,32
8110ee5c:	1002cd26 	beq	r2,zero,8110f994 <___vfprintf_internal_r+0x185c>
8110ee60:	d9402d17 	ldw	r5,180(sp)
8110ee64:	d9002f17 	ldw	r4,188(sp)
8110ee68:	28800017 	ldw	r2,0(r5)
8110ee6c:	2007d7fa 	srai	r3,r4,31
8110ee70:	29400104 	addi	r5,r5,4
8110ee74:	d9402d15 	stw	r5,180(sp)
8110ee78:	11000015 	stw	r4,0(r2)
8110ee7c:	10c00115 	stw	r3,4(r2)
8110ee80:	003ce506 	br	8110e218 <__reset+0xfb0ee218>
8110ee84:	d8c02d17 	ldw	r3,180(sp)
8110ee88:	d9002d17 	ldw	r4,180(sp)
8110ee8c:	d8002785 	stb	zero,158(sp)
8110ee90:	18800017 	ldw	r2,0(r3)
8110ee94:	21000104 	addi	r4,r4,4
8110ee98:	00c00044 	movi	r3,1
8110ee9c:	d8c02a15 	stw	r3,168(sp)
8110eea0:	d8801405 	stb	r2,80(sp)
8110eea4:	d9002d15 	stw	r4,180(sp)
8110eea8:	d8c02e15 	stw	r3,184(sp)
8110eeac:	d8002915 	stw	zero,164(sp)
8110eeb0:	d8003215 	stw	zero,200(sp)
8110eeb4:	dc001404 	addi	r16,sp,80
8110eeb8:	0039883a 	mov	fp,zero
8110eebc:	003e7206 	br	8110e888 <__reset+0xfb0ee888>
8110eec0:	012044f4 	movhi	r4,33043
8110eec4:	210dcb04 	addi	r4,r4,14124
8110eec8:	0039883a 	mov	fp,zero
8110eecc:	d9003915 	stw	r4,228(sp)
8110eed0:	04401e04 	movi	r17,120
8110eed4:	003f8206 	br	8110ece0 <__reset+0xfb0eece0>
8110eed8:	18c03fcc 	andi	r3,r3,255
8110eedc:	1805061e 	bne	r3,zero,811102f8 <___vfprintf_internal_r+0x21c0>
8110eee0:	883d9126 	beq	r17,zero,8110e528 <__reset+0xfb0ee528>
8110eee4:	00c00044 	movi	r3,1
8110eee8:	d8c02a15 	stw	r3,168(sp)
8110eeec:	dc401405 	stb	r17,80(sp)
8110eef0:	d8002785 	stb	zero,158(sp)
8110eef4:	003fec06 	br	8110eea8 <__reset+0xfb0eeea8>
8110eef8:	016044f4 	movhi	r5,33043
8110eefc:	294dcb04 	addi	r5,r5,14124
8110ef00:	d9403915 	stw	r5,228(sp)
8110ef04:	d8c02d15 	stw	r3,180(sp)
8110ef08:	1025883a 	mov	r18,r2
8110ef0c:	04401e04 	movi	r17,120
8110ef10:	9d84b03a 	or	r2,r19,r22
8110ef14:	1000fc1e 	bne	r2,zero,8110f308 <___vfprintf_internal_r+0x11d0>
8110ef18:	0039883a 	mov	fp,zero
8110ef1c:	00800084 	movi	r2,2
8110ef20:	10803fcc 	andi	r2,r2,255
8110ef24:	00c00044 	movi	r3,1
8110ef28:	10c20f26 	beq	r2,r3,8110f768 <___vfprintf_internal_r+0x1630>
8110ef2c:	00c00084 	movi	r3,2
8110ef30:	10fd6326 	beq	r2,r3,8110e4c0 <__reset+0xfb0ee4c0>
8110ef34:	003e2d06 	br	8110e7ec <__reset+0xfb0ee7ec>
8110ef38:	d8c02017 	ldw	r3,128(sp)
8110ef3c:	003e9306 	br	8110e98c <__reset+0xfb0ee98c>
8110ef40:	00801944 	movi	r2,101
8110ef44:	14407e0e 	bge	r2,r17,8110f140 <___vfprintf_internal_r+0x1008>
8110ef48:	d9003617 	ldw	r4,216(sp)
8110ef4c:	d9403817 	ldw	r5,224(sp)
8110ef50:	000d883a 	mov	r6,zero
8110ef54:	000f883a 	mov	r7,zero
8110ef58:	d8c03c15 	stw	r3,240(sp)
8110ef5c:	da003d15 	stw	r8,244(sp)
8110ef60:	111e9c40 	call	8111e9c4 <__eqdf2>
8110ef64:	d8c03c17 	ldw	r3,240(sp)
8110ef68:	da003d17 	ldw	r8,244(sp)
8110ef6c:	1000f71e 	bne	r2,zero,8110f34c <___vfprintf_internal_r+0x1214>
8110ef70:	d8801f17 	ldw	r2,124(sp)
8110ef74:	012044f4 	movhi	r4,33043
8110ef78:	210dd204 	addi	r4,r4,14152
8110ef7c:	18c00044 	addi	r3,r3,1
8110ef80:	10800044 	addi	r2,r2,1
8110ef84:	41000015 	stw	r4,0(r8)
8110ef88:	01000044 	movi	r4,1
8110ef8c:	41000115 	stw	r4,4(r8)
8110ef90:	d8c02015 	stw	r3,128(sp)
8110ef94:	d8801f15 	stw	r2,124(sp)
8110ef98:	010001c4 	movi	r4,7
8110ef9c:	2082b816 	blt	r4,r2,8110fa80 <___vfprintf_internal_r+0x1948>
8110efa0:	42000204 	addi	r8,r8,8
8110efa4:	d8802617 	ldw	r2,152(sp)
8110efa8:	d9403317 	ldw	r5,204(sp)
8110efac:	11400216 	blt	r2,r5,8110efb8 <___vfprintf_internal_r+0xe80>
8110efb0:	9080004c 	andi	r2,r18,1
8110efb4:	103ed526 	beq	r2,zero,8110eb0c <__reset+0xfb0eeb0c>
8110efb8:	d8803717 	ldw	r2,220(sp)
8110efbc:	d9003417 	ldw	r4,208(sp)
8110efc0:	d9403717 	ldw	r5,220(sp)
8110efc4:	1887883a 	add	r3,r3,r2
8110efc8:	d8801f17 	ldw	r2,124(sp)
8110efcc:	41000015 	stw	r4,0(r8)
8110efd0:	41400115 	stw	r5,4(r8)
8110efd4:	10800044 	addi	r2,r2,1
8110efd8:	d8c02015 	stw	r3,128(sp)
8110efdc:	d8801f15 	stw	r2,124(sp)
8110efe0:	010001c4 	movi	r4,7
8110efe4:	20832916 	blt	r4,r2,8110fc8c <___vfprintf_internal_r+0x1b54>
8110efe8:	42000204 	addi	r8,r8,8
8110efec:	d8803317 	ldw	r2,204(sp)
8110eff0:	143fffc4 	addi	r16,r2,-1
8110eff4:	043ec50e 	bge	zero,r16,8110eb0c <__reset+0xfb0eeb0c>
8110eff8:	04400404 	movi	r17,16
8110effc:	d8801f17 	ldw	r2,124(sp)
8110f000:	8c00880e 	bge	r17,r16,8110f224 <___vfprintf_internal_r+0x10ec>
8110f004:	016044f4 	movhi	r5,33043
8110f008:	294dda84 	addi	r5,r5,14186
8110f00c:	d9402b15 	stw	r5,172(sp)
8110f010:	058001c4 	movi	r22,7
8110f014:	dcc02c17 	ldw	r19,176(sp)
8110f018:	00000306 	br	8110f028 <___vfprintf_internal_r+0xef0>
8110f01c:	42000204 	addi	r8,r8,8
8110f020:	843ffc04 	addi	r16,r16,-16
8110f024:	8c00820e 	bge	r17,r16,8110f230 <___vfprintf_internal_r+0x10f8>
8110f028:	18c00404 	addi	r3,r3,16
8110f02c:	10800044 	addi	r2,r2,1
8110f030:	45000015 	stw	r20,0(r8)
8110f034:	44400115 	stw	r17,4(r8)
8110f038:	d8c02015 	stw	r3,128(sp)
8110f03c:	d8801f15 	stw	r2,124(sp)
8110f040:	b0bff60e 	bge	r22,r2,8110f01c <__reset+0xfb0ef01c>
8110f044:	d9801e04 	addi	r6,sp,120
8110f048:	b80b883a 	mov	r5,r23
8110f04c:	9809883a 	mov	r4,r19
8110f050:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f054:	103d3a1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f058:	d8c02017 	ldw	r3,128(sp)
8110f05c:	d8801f17 	ldw	r2,124(sp)
8110f060:	da000404 	addi	r8,sp,16
8110f064:	003fee06 	br	8110f020 <__reset+0xfb0ef020>
8110f068:	d9403117 	ldw	r5,196(sp)
8110f06c:	d8802a17 	ldw	r2,168(sp)
8110f070:	28adc83a 	sub	r22,r5,r2
8110f074:	05be630e 	bge	zero,r22,8110ea04 <__reset+0xfb0eea04>
8110f078:	07000404 	movi	fp,16
8110f07c:	d8801f17 	ldw	r2,124(sp)
8110f080:	e5838f0e 	bge	fp,r22,8110fec0 <___vfprintf_internal_r+0x1d88>
8110f084:	016044f4 	movhi	r5,33043
8110f088:	294dda84 	addi	r5,r5,14186
8110f08c:	dc403015 	stw	r17,192(sp)
8110f090:	d9402b15 	stw	r5,172(sp)
8110f094:	b023883a 	mov	r17,r22
8110f098:	04c001c4 	movi	r19,7
8110f09c:	a82d883a 	mov	r22,r21
8110f0a0:	902b883a 	mov	r21,r18
8110f0a4:	8025883a 	mov	r18,r16
8110f0a8:	dc002c17 	ldw	r16,176(sp)
8110f0ac:	00000306 	br	8110f0bc <___vfprintf_internal_r+0xf84>
8110f0b0:	8c7ffc04 	addi	r17,r17,-16
8110f0b4:	42000204 	addi	r8,r8,8
8110f0b8:	e440110e 	bge	fp,r17,8110f100 <___vfprintf_internal_r+0xfc8>
8110f0bc:	18c00404 	addi	r3,r3,16
8110f0c0:	10800044 	addi	r2,r2,1
8110f0c4:	45000015 	stw	r20,0(r8)
8110f0c8:	47000115 	stw	fp,4(r8)
8110f0cc:	d8c02015 	stw	r3,128(sp)
8110f0d0:	d8801f15 	stw	r2,124(sp)
8110f0d4:	98bff60e 	bge	r19,r2,8110f0b0 <__reset+0xfb0ef0b0>
8110f0d8:	d9801e04 	addi	r6,sp,120
8110f0dc:	b80b883a 	mov	r5,r23
8110f0e0:	8009883a 	mov	r4,r16
8110f0e4:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f0e8:	103d151e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f0ec:	8c7ffc04 	addi	r17,r17,-16
8110f0f0:	d8c02017 	ldw	r3,128(sp)
8110f0f4:	d8801f17 	ldw	r2,124(sp)
8110f0f8:	da000404 	addi	r8,sp,16
8110f0fc:	e47fef16 	blt	fp,r17,8110f0bc <__reset+0xfb0ef0bc>
8110f100:	9021883a 	mov	r16,r18
8110f104:	a825883a 	mov	r18,r21
8110f108:	b02b883a 	mov	r21,r22
8110f10c:	882d883a 	mov	r22,r17
8110f110:	dc403017 	ldw	r17,192(sp)
8110f114:	d9002b17 	ldw	r4,172(sp)
8110f118:	1d87883a 	add	r3,r3,r22
8110f11c:	10800044 	addi	r2,r2,1
8110f120:	41000015 	stw	r4,0(r8)
8110f124:	45800115 	stw	r22,4(r8)
8110f128:	d8c02015 	stw	r3,128(sp)
8110f12c:	d8801f15 	stw	r2,124(sp)
8110f130:	010001c4 	movi	r4,7
8110f134:	20818e16 	blt	r4,r2,8110f770 <___vfprintf_internal_r+0x1638>
8110f138:	42000204 	addi	r8,r8,8
8110f13c:	003e3106 	br	8110ea04 <__reset+0xfb0eea04>
8110f140:	d9403317 	ldw	r5,204(sp)
8110f144:	00800044 	movi	r2,1
8110f148:	18c00044 	addi	r3,r3,1
8110f14c:	1141530e 	bge	r2,r5,8110f69c <___vfprintf_internal_r+0x1564>
8110f150:	dc401f17 	ldw	r17,124(sp)
8110f154:	00800044 	movi	r2,1
8110f158:	40800115 	stw	r2,4(r8)
8110f15c:	8c400044 	addi	r17,r17,1
8110f160:	44000015 	stw	r16,0(r8)
8110f164:	d8c02015 	stw	r3,128(sp)
8110f168:	dc401f15 	stw	r17,124(sp)
8110f16c:	008001c4 	movi	r2,7
8110f170:	14416b16 	blt	r2,r17,8110f720 <___vfprintf_internal_r+0x15e8>
8110f174:	42000204 	addi	r8,r8,8
8110f178:	d8803717 	ldw	r2,220(sp)
8110f17c:	d9003417 	ldw	r4,208(sp)
8110f180:	8c400044 	addi	r17,r17,1
8110f184:	10c7883a 	add	r3,r2,r3
8110f188:	40800115 	stw	r2,4(r8)
8110f18c:	41000015 	stw	r4,0(r8)
8110f190:	d8c02015 	stw	r3,128(sp)
8110f194:	dc401f15 	stw	r17,124(sp)
8110f198:	008001c4 	movi	r2,7
8110f19c:	14416916 	blt	r2,r17,8110f744 <___vfprintf_internal_r+0x160c>
8110f1a0:	45800204 	addi	r22,r8,8
8110f1a4:	d9003617 	ldw	r4,216(sp)
8110f1a8:	d9403817 	ldw	r5,224(sp)
8110f1ac:	000d883a 	mov	r6,zero
8110f1b0:	000f883a 	mov	r7,zero
8110f1b4:	d8c03c15 	stw	r3,240(sp)
8110f1b8:	111e9c40 	call	8111e9c4 <__eqdf2>
8110f1bc:	d8c03c17 	ldw	r3,240(sp)
8110f1c0:	1000bc26 	beq	r2,zero,8110f4b4 <___vfprintf_internal_r+0x137c>
8110f1c4:	d9403317 	ldw	r5,204(sp)
8110f1c8:	84000044 	addi	r16,r16,1
8110f1cc:	8c400044 	addi	r17,r17,1
8110f1d0:	28bfffc4 	addi	r2,r5,-1
8110f1d4:	1887883a 	add	r3,r3,r2
8110f1d8:	b0800115 	stw	r2,4(r22)
8110f1dc:	b4000015 	stw	r16,0(r22)
8110f1e0:	d8c02015 	stw	r3,128(sp)
8110f1e4:	dc401f15 	stw	r17,124(sp)
8110f1e8:	008001c4 	movi	r2,7
8110f1ec:	14414316 	blt	r2,r17,8110f6fc <___vfprintf_internal_r+0x15c4>
8110f1f0:	b5800204 	addi	r22,r22,8
8110f1f4:	d9003a17 	ldw	r4,232(sp)
8110f1f8:	df0022c4 	addi	fp,sp,139
8110f1fc:	8c400044 	addi	r17,r17,1
8110f200:	20c7883a 	add	r3,r4,r3
8110f204:	b7000015 	stw	fp,0(r22)
8110f208:	b1000115 	stw	r4,4(r22)
8110f20c:	d8c02015 	stw	r3,128(sp)
8110f210:	dc401f15 	stw	r17,124(sp)
8110f214:	008001c4 	movi	r2,7
8110f218:	14400e16 	blt	r2,r17,8110f254 <___vfprintf_internal_r+0x111c>
8110f21c:	b2000204 	addi	r8,r22,8
8110f220:	003e3a06 	br	8110eb0c <__reset+0xfb0eeb0c>
8110f224:	012044f4 	movhi	r4,33043
8110f228:	210dda84 	addi	r4,r4,14186
8110f22c:	d9002b15 	stw	r4,172(sp)
8110f230:	d9002b17 	ldw	r4,172(sp)
8110f234:	1c07883a 	add	r3,r3,r16
8110f238:	44000115 	stw	r16,4(r8)
8110f23c:	41000015 	stw	r4,0(r8)
8110f240:	10800044 	addi	r2,r2,1
8110f244:	d8c02015 	stw	r3,128(sp)
8110f248:	d8801f15 	stw	r2,124(sp)
8110f24c:	010001c4 	movi	r4,7
8110f250:	20be2d0e 	bge	r4,r2,8110eb08 <__reset+0xfb0eeb08>
8110f254:	d9002c17 	ldw	r4,176(sp)
8110f258:	d9801e04 	addi	r6,sp,120
8110f25c:	b80b883a 	mov	r5,r23
8110f260:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f264:	103cb61e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f268:	d8c02017 	ldw	r3,128(sp)
8110f26c:	da000404 	addi	r8,sp,16
8110f270:	003e2606 	br	8110eb0c <__reset+0xfb0eeb0c>
8110f274:	d9002c17 	ldw	r4,176(sp)
8110f278:	d9801e04 	addi	r6,sp,120
8110f27c:	b80b883a 	mov	r5,r23
8110f280:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f284:	103e5d26 	beq	r2,zero,8110ebfc <__reset+0xfb0eebfc>
8110f288:	003cad06 	br	8110e540 <__reset+0xfb0ee540>
8110f28c:	d9002c17 	ldw	r4,176(sp)
8110f290:	d9801e04 	addi	r6,sp,120
8110f294:	b80b883a 	mov	r5,r23
8110f298:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f29c:	103ca81e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f2a0:	d8c02017 	ldw	r3,128(sp)
8110f2a4:	da000404 	addi	r8,sp,16
8110f2a8:	003e0b06 	br	8110ead8 <__reset+0xfb0eead8>
8110f2ac:	d9002c17 	ldw	r4,176(sp)
8110f2b0:	d9801e04 	addi	r6,sp,120
8110f2b4:	b80b883a 	mov	r5,r23
8110f2b8:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f2bc:	103ca01e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f2c0:	d8c02017 	ldw	r3,128(sp)
8110f2c4:	da000404 	addi	r8,sp,16
8110f2c8:	003dbd06 	br	8110e9c0 <__reset+0xfb0ee9c0>
8110f2cc:	d9002c17 	ldw	r4,176(sp)
8110f2d0:	d9801e04 	addi	r6,sp,120
8110f2d4:	b80b883a 	mov	r5,r23
8110f2d8:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f2dc:	103c981e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f2e0:	d8c02017 	ldw	r3,128(sp)
8110f2e4:	da000404 	addi	r8,sp,16
8110f2e8:	003dc306 	br	8110e9f8 <__reset+0xfb0ee9f8>
8110f2ec:	d8802917 	ldw	r2,164(sp)
8110f2f0:	d8002785 	stb	zero,158(sp)
8110f2f4:	103f0616 	blt	r2,zero,8110ef10 <__reset+0xfb0eef10>
8110f2f8:	00ffdfc4 	movi	r3,-129
8110f2fc:	9d84b03a 	or	r2,r19,r22
8110f300:	90e4703a 	and	r18,r18,r3
8110f304:	103c6b26 	beq	r2,zero,8110e4b4 <__reset+0xfb0ee4b4>
8110f308:	0039883a 	mov	fp,zero
8110f30c:	003e7406 	br	8110ece0 <__reset+0xfb0eece0>
8110f310:	9080040c 	andi	r2,r18,16
8110f314:	1001b326 	beq	r2,zero,8110f9e4 <___vfprintf_internal_r+0x18ac>
8110f318:	d9002d17 	ldw	r4,180(sp)
8110f31c:	d9402917 	ldw	r5,164(sp)
8110f320:	d8002785 	stb	zero,158(sp)
8110f324:	20800104 	addi	r2,r4,4
8110f328:	24c00017 	ldw	r19,0(r4)
8110f32c:	002d883a 	mov	r22,zero
8110f330:	2801b516 	blt	r5,zero,8110fa08 <___vfprintf_internal_r+0x18d0>
8110f334:	00ffdfc4 	movi	r3,-129
8110f338:	d8802d15 	stw	r2,180(sp)
8110f33c:	90e4703a 	and	r18,r18,r3
8110f340:	983d2726 	beq	r19,zero,8110e7e0 <__reset+0xfb0ee7e0>
8110f344:	0039883a 	mov	fp,zero
8110f348:	003d2a06 	br	8110e7f4 <__reset+0xfb0ee7f4>
8110f34c:	dc402617 	ldw	r17,152(sp)
8110f350:	0441d30e 	bge	zero,r17,8110faa0 <___vfprintf_internal_r+0x1968>
8110f354:	dc403217 	ldw	r17,200(sp)
8110f358:	d8803317 	ldw	r2,204(sp)
8110f35c:	1440010e 	bge	r2,r17,8110f364 <___vfprintf_internal_r+0x122c>
8110f360:	1023883a 	mov	r17,r2
8110f364:	04400a0e 	bge	zero,r17,8110f390 <___vfprintf_internal_r+0x1258>
8110f368:	d8801f17 	ldw	r2,124(sp)
8110f36c:	1c47883a 	add	r3,r3,r17
8110f370:	44000015 	stw	r16,0(r8)
8110f374:	10800044 	addi	r2,r2,1
8110f378:	44400115 	stw	r17,4(r8)
8110f37c:	d8c02015 	stw	r3,128(sp)
8110f380:	d8801f15 	stw	r2,124(sp)
8110f384:	010001c4 	movi	r4,7
8110f388:	20826516 	blt	r4,r2,8110fd20 <___vfprintf_internal_r+0x1be8>
8110f38c:	42000204 	addi	r8,r8,8
8110f390:	88026116 	blt	r17,zero,8110fd18 <___vfprintf_internal_r+0x1be0>
8110f394:	d9003217 	ldw	r4,200(sp)
8110f398:	2463c83a 	sub	r17,r4,r17
8110f39c:	04407b0e 	bge	zero,r17,8110f58c <___vfprintf_internal_r+0x1454>
8110f3a0:	05800404 	movi	r22,16
8110f3a4:	d8801f17 	ldw	r2,124(sp)
8110f3a8:	b4419d0e 	bge	r22,r17,8110fa20 <___vfprintf_internal_r+0x18e8>
8110f3ac:	012044f4 	movhi	r4,33043
8110f3b0:	210dda84 	addi	r4,r4,14186
8110f3b4:	d9002b15 	stw	r4,172(sp)
8110f3b8:	070001c4 	movi	fp,7
8110f3bc:	dcc02c17 	ldw	r19,176(sp)
8110f3c0:	00000306 	br	8110f3d0 <___vfprintf_internal_r+0x1298>
8110f3c4:	42000204 	addi	r8,r8,8
8110f3c8:	8c7ffc04 	addi	r17,r17,-16
8110f3cc:	b441970e 	bge	r22,r17,8110fa2c <___vfprintf_internal_r+0x18f4>
8110f3d0:	18c00404 	addi	r3,r3,16
8110f3d4:	10800044 	addi	r2,r2,1
8110f3d8:	45000015 	stw	r20,0(r8)
8110f3dc:	45800115 	stw	r22,4(r8)
8110f3e0:	d8c02015 	stw	r3,128(sp)
8110f3e4:	d8801f15 	stw	r2,124(sp)
8110f3e8:	e0bff60e 	bge	fp,r2,8110f3c4 <__reset+0xfb0ef3c4>
8110f3ec:	d9801e04 	addi	r6,sp,120
8110f3f0:	b80b883a 	mov	r5,r23
8110f3f4:	9809883a 	mov	r4,r19
8110f3f8:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f3fc:	103c501e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f400:	d8c02017 	ldw	r3,128(sp)
8110f404:	d8801f17 	ldw	r2,124(sp)
8110f408:	da000404 	addi	r8,sp,16
8110f40c:	003fee06 	br	8110f3c8 <__reset+0xfb0ef3c8>
8110f410:	d9002c17 	ldw	r4,176(sp)
8110f414:	d9801e04 	addi	r6,sp,120
8110f418:	b80b883a 	mov	r5,r23
8110f41c:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f420:	103c471e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f424:	d8c02017 	ldw	r3,128(sp)
8110f428:	df002787 	ldb	fp,158(sp)
8110f42c:	da000404 	addi	r8,sp,16
8110f430:	003d5606 	br	8110e98c <__reset+0xfb0ee98c>
8110f434:	9080040c 	andi	r2,r18,16
8110f438:	10016126 	beq	r2,zero,8110f9c0 <___vfprintf_internal_r+0x1888>
8110f43c:	d8802d17 	ldw	r2,180(sp)
8110f440:	14c00017 	ldw	r19,0(r2)
8110f444:	10800104 	addi	r2,r2,4
8110f448:	d8802d15 	stw	r2,180(sp)
8110f44c:	982dd7fa 	srai	r22,r19,31
8110f450:	b005883a 	mov	r2,r22
8110f454:	003c8206 	br	8110e660 <__reset+0xfb0ee660>
8110f458:	9080040c 	andi	r2,r18,16
8110f45c:	10003526 	beq	r2,zero,8110f534 <___vfprintf_internal_r+0x13fc>
8110f460:	d9402d17 	ldw	r5,180(sp)
8110f464:	d8c02917 	ldw	r3,164(sp)
8110f468:	d8002785 	stb	zero,158(sp)
8110f46c:	28800104 	addi	r2,r5,4
8110f470:	2cc00017 	ldw	r19,0(r5)
8110f474:	002d883a 	mov	r22,zero
8110f478:	18003716 	blt	r3,zero,8110f558 <___vfprintf_internal_r+0x1420>
8110f47c:	00ffdfc4 	movi	r3,-129
8110f480:	d8802d15 	stw	r2,180(sp)
8110f484:	90e4703a 	and	r18,r18,r3
8110f488:	0039883a 	mov	fp,zero
8110f48c:	983df326 	beq	r19,zero,8110ec5c <__reset+0xfb0eec5c>
8110f490:	00800244 	movi	r2,9
8110f494:	14fc7b36 	bltu	r2,r19,8110e684 <__reset+0xfb0ee684>
8110f498:	d8c02817 	ldw	r3,160(sp)
8110f49c:	dc001dc4 	addi	r16,sp,119
8110f4a0:	9cc00c04 	addi	r19,r19,48
8110f4a4:	1c07c83a 	sub	r3,r3,r16
8110f4a8:	dcc01dc5 	stb	r19,119(sp)
8110f4ac:	d8c02e15 	stw	r3,184(sp)
8110f4b0:	003ce806 	br	8110e854 <__reset+0xfb0ee854>
8110f4b4:	d8803317 	ldw	r2,204(sp)
8110f4b8:	143fffc4 	addi	r16,r2,-1
8110f4bc:	043f4d0e 	bge	zero,r16,8110f1f4 <__reset+0xfb0ef1f4>
8110f4c0:	07000404 	movi	fp,16
8110f4c4:	e400810e 	bge	fp,r16,8110f6cc <___vfprintf_internal_r+0x1594>
8110f4c8:	016044f4 	movhi	r5,33043
8110f4cc:	294dda84 	addi	r5,r5,14186
8110f4d0:	d9402b15 	stw	r5,172(sp)
8110f4d4:	01c001c4 	movi	r7,7
8110f4d8:	dcc02c17 	ldw	r19,176(sp)
8110f4dc:	00000306 	br	8110f4ec <___vfprintf_internal_r+0x13b4>
8110f4e0:	b5800204 	addi	r22,r22,8
8110f4e4:	843ffc04 	addi	r16,r16,-16
8110f4e8:	e4007b0e 	bge	fp,r16,8110f6d8 <___vfprintf_internal_r+0x15a0>
8110f4ec:	18c00404 	addi	r3,r3,16
8110f4f0:	8c400044 	addi	r17,r17,1
8110f4f4:	b5000015 	stw	r20,0(r22)
8110f4f8:	b7000115 	stw	fp,4(r22)
8110f4fc:	d8c02015 	stw	r3,128(sp)
8110f500:	dc401f15 	stw	r17,124(sp)
8110f504:	3c7ff60e 	bge	r7,r17,8110f4e0 <__reset+0xfb0ef4e0>
8110f508:	d9801e04 	addi	r6,sp,120
8110f50c:	b80b883a 	mov	r5,r23
8110f510:	9809883a 	mov	r4,r19
8110f514:	d9c03c15 	stw	r7,240(sp)
8110f518:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f51c:	d9c03c17 	ldw	r7,240(sp)
8110f520:	103c071e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f524:	d8c02017 	ldw	r3,128(sp)
8110f528:	dc401f17 	ldw	r17,124(sp)
8110f52c:	dd800404 	addi	r22,sp,16
8110f530:	003fec06 	br	8110f4e4 <__reset+0xfb0ef4e4>
8110f534:	9080100c 	andi	r2,r18,64
8110f538:	d8002785 	stb	zero,158(sp)
8110f53c:	10010e26 	beq	r2,zero,8110f978 <___vfprintf_internal_r+0x1840>
8110f540:	d9002d17 	ldw	r4,180(sp)
8110f544:	d9402917 	ldw	r5,164(sp)
8110f548:	002d883a 	mov	r22,zero
8110f54c:	20800104 	addi	r2,r4,4
8110f550:	24c0000b 	ldhu	r19,0(r4)
8110f554:	283fc90e 	bge	r5,zero,8110f47c <__reset+0xfb0ef47c>
8110f558:	d8802d15 	stw	r2,180(sp)
8110f55c:	0039883a 	mov	fp,zero
8110f560:	9d84b03a 	or	r2,r19,r22
8110f564:	103c461e 	bne	r2,zero,8110e680 <__reset+0xfb0ee680>
8110f568:	00800044 	movi	r2,1
8110f56c:	003e6c06 	br	8110ef20 <__reset+0xfb0eef20>
8110f570:	d9002c17 	ldw	r4,176(sp)
8110f574:	d9801e04 	addi	r6,sp,120
8110f578:	b80b883a 	mov	r5,r23
8110f57c:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f580:	103bef1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f584:	d8c02017 	ldw	r3,128(sp)
8110f588:	da000404 	addi	r8,sp,16
8110f58c:	d9003217 	ldw	r4,200(sp)
8110f590:	d8802617 	ldw	r2,152(sp)
8110f594:	d9403317 	ldw	r5,204(sp)
8110f598:	8123883a 	add	r17,r16,r4
8110f59c:	11400216 	blt	r2,r5,8110f5a8 <___vfprintf_internal_r+0x1470>
8110f5a0:	9100004c 	andi	r4,r18,1
8110f5a4:	20000d26 	beq	r4,zero,8110f5dc <___vfprintf_internal_r+0x14a4>
8110f5a8:	d9003717 	ldw	r4,220(sp)
8110f5ac:	d9403417 	ldw	r5,208(sp)
8110f5b0:	1907883a 	add	r3,r3,r4
8110f5b4:	d9001f17 	ldw	r4,124(sp)
8110f5b8:	41400015 	stw	r5,0(r8)
8110f5bc:	d9403717 	ldw	r5,220(sp)
8110f5c0:	21000044 	addi	r4,r4,1
8110f5c4:	d8c02015 	stw	r3,128(sp)
8110f5c8:	41400115 	stw	r5,4(r8)
8110f5cc:	d9001f15 	stw	r4,124(sp)
8110f5d0:	014001c4 	movi	r5,7
8110f5d4:	2901e816 	blt	r5,r4,8110fd78 <___vfprintf_internal_r+0x1c40>
8110f5d8:	42000204 	addi	r8,r8,8
8110f5dc:	d9003317 	ldw	r4,204(sp)
8110f5e0:	8121883a 	add	r16,r16,r4
8110f5e4:	2085c83a 	sub	r2,r4,r2
8110f5e8:	8461c83a 	sub	r16,r16,r17
8110f5ec:	1400010e 	bge	r2,r16,8110f5f4 <___vfprintf_internal_r+0x14bc>
8110f5f0:	1021883a 	mov	r16,r2
8110f5f4:	04000a0e 	bge	zero,r16,8110f620 <___vfprintf_internal_r+0x14e8>
8110f5f8:	d9001f17 	ldw	r4,124(sp)
8110f5fc:	1c07883a 	add	r3,r3,r16
8110f600:	44400015 	stw	r17,0(r8)
8110f604:	21000044 	addi	r4,r4,1
8110f608:	44000115 	stw	r16,4(r8)
8110f60c:	d8c02015 	stw	r3,128(sp)
8110f610:	d9001f15 	stw	r4,124(sp)
8110f614:	014001c4 	movi	r5,7
8110f618:	2901fb16 	blt	r5,r4,8110fe08 <___vfprintf_internal_r+0x1cd0>
8110f61c:	42000204 	addi	r8,r8,8
8110f620:	8001f716 	blt	r16,zero,8110fe00 <___vfprintf_internal_r+0x1cc8>
8110f624:	1421c83a 	sub	r16,r2,r16
8110f628:	043d380e 	bge	zero,r16,8110eb0c <__reset+0xfb0eeb0c>
8110f62c:	04400404 	movi	r17,16
8110f630:	d8801f17 	ldw	r2,124(sp)
8110f634:	8c3efb0e 	bge	r17,r16,8110f224 <__reset+0xfb0ef224>
8110f638:	016044f4 	movhi	r5,33043
8110f63c:	294dda84 	addi	r5,r5,14186
8110f640:	d9402b15 	stw	r5,172(sp)
8110f644:	058001c4 	movi	r22,7
8110f648:	dcc02c17 	ldw	r19,176(sp)
8110f64c:	00000306 	br	8110f65c <___vfprintf_internal_r+0x1524>
8110f650:	42000204 	addi	r8,r8,8
8110f654:	843ffc04 	addi	r16,r16,-16
8110f658:	8c3ef50e 	bge	r17,r16,8110f230 <__reset+0xfb0ef230>
8110f65c:	18c00404 	addi	r3,r3,16
8110f660:	10800044 	addi	r2,r2,1
8110f664:	45000015 	stw	r20,0(r8)
8110f668:	44400115 	stw	r17,4(r8)
8110f66c:	d8c02015 	stw	r3,128(sp)
8110f670:	d8801f15 	stw	r2,124(sp)
8110f674:	b0bff60e 	bge	r22,r2,8110f650 <__reset+0xfb0ef650>
8110f678:	d9801e04 	addi	r6,sp,120
8110f67c:	b80b883a 	mov	r5,r23
8110f680:	9809883a 	mov	r4,r19
8110f684:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f688:	103bad1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f68c:	d8c02017 	ldw	r3,128(sp)
8110f690:	d8801f17 	ldw	r2,124(sp)
8110f694:	da000404 	addi	r8,sp,16
8110f698:	003fee06 	br	8110f654 <__reset+0xfb0ef654>
8110f69c:	9088703a 	and	r4,r18,r2
8110f6a0:	203eab1e 	bne	r4,zero,8110f150 <__reset+0xfb0ef150>
8110f6a4:	dc401f17 	ldw	r17,124(sp)
8110f6a8:	40800115 	stw	r2,4(r8)
8110f6ac:	44000015 	stw	r16,0(r8)
8110f6b0:	8c400044 	addi	r17,r17,1
8110f6b4:	d8c02015 	stw	r3,128(sp)
8110f6b8:	dc401f15 	stw	r17,124(sp)
8110f6bc:	008001c4 	movi	r2,7
8110f6c0:	14400e16 	blt	r2,r17,8110f6fc <___vfprintf_internal_r+0x15c4>
8110f6c4:	45800204 	addi	r22,r8,8
8110f6c8:	003eca06 	br	8110f1f4 <__reset+0xfb0ef1f4>
8110f6cc:	012044f4 	movhi	r4,33043
8110f6d0:	210dda84 	addi	r4,r4,14186
8110f6d4:	d9002b15 	stw	r4,172(sp)
8110f6d8:	d8802b17 	ldw	r2,172(sp)
8110f6dc:	1c07883a 	add	r3,r3,r16
8110f6e0:	8c400044 	addi	r17,r17,1
8110f6e4:	b0800015 	stw	r2,0(r22)
8110f6e8:	b4000115 	stw	r16,4(r22)
8110f6ec:	d8c02015 	stw	r3,128(sp)
8110f6f0:	dc401f15 	stw	r17,124(sp)
8110f6f4:	008001c4 	movi	r2,7
8110f6f8:	147ebd0e 	bge	r2,r17,8110f1f0 <__reset+0xfb0ef1f0>
8110f6fc:	d9002c17 	ldw	r4,176(sp)
8110f700:	d9801e04 	addi	r6,sp,120
8110f704:	b80b883a 	mov	r5,r23
8110f708:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f70c:	103b8c1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f710:	d8c02017 	ldw	r3,128(sp)
8110f714:	dc401f17 	ldw	r17,124(sp)
8110f718:	dd800404 	addi	r22,sp,16
8110f71c:	003eb506 	br	8110f1f4 <__reset+0xfb0ef1f4>
8110f720:	d9002c17 	ldw	r4,176(sp)
8110f724:	d9801e04 	addi	r6,sp,120
8110f728:	b80b883a 	mov	r5,r23
8110f72c:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f730:	103b831e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f734:	d8c02017 	ldw	r3,128(sp)
8110f738:	dc401f17 	ldw	r17,124(sp)
8110f73c:	da000404 	addi	r8,sp,16
8110f740:	003e8d06 	br	8110f178 <__reset+0xfb0ef178>
8110f744:	d9002c17 	ldw	r4,176(sp)
8110f748:	d9801e04 	addi	r6,sp,120
8110f74c:	b80b883a 	mov	r5,r23
8110f750:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f754:	103b7a1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f758:	d8c02017 	ldw	r3,128(sp)
8110f75c:	dc401f17 	ldw	r17,124(sp)
8110f760:	dd800404 	addi	r22,sp,16
8110f764:	003e8f06 	br	8110f1a4 <__reset+0xfb0ef1a4>
8110f768:	0027883a 	mov	r19,zero
8110f76c:	003f4a06 	br	8110f498 <__reset+0xfb0ef498>
8110f770:	d9002c17 	ldw	r4,176(sp)
8110f774:	d9801e04 	addi	r6,sp,120
8110f778:	b80b883a 	mov	r5,r23
8110f77c:	111a0a40 	call	8111a0a4 <__sprint_r>
8110f780:	103b6f1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110f784:	d8c02017 	ldw	r3,128(sp)
8110f788:	da000404 	addi	r8,sp,16
8110f78c:	003c9d06 	br	8110ea04 <__reset+0xfb0eea04>
8110f790:	04e7c83a 	sub	r19,zero,r19
8110f794:	9804c03a 	cmpne	r2,r19,zero
8110f798:	05adc83a 	sub	r22,zero,r22
8110f79c:	b0adc83a 	sub	r22,r22,r2
8110f7a0:	d8802917 	ldw	r2,164(sp)
8110f7a4:	07000b44 	movi	fp,45
8110f7a8:	df002785 	stb	fp,158(sp)
8110f7ac:	10017b16 	blt	r2,zero,8110fd9c <___vfprintf_internal_r+0x1c64>
8110f7b0:	00bfdfc4 	movi	r2,-129
8110f7b4:	90a4703a 	and	r18,r18,r2
8110f7b8:	003bb106 	br	8110e680 <__reset+0xfb0ee680>
8110f7bc:	d9003617 	ldw	r4,216(sp)
8110f7c0:	d9403817 	ldw	r5,224(sp)
8110f7c4:	da003d15 	stw	r8,244(sp)
8110f7c8:	111683c0 	call	8111683c <__fpclassifyd>
8110f7cc:	da003d17 	ldw	r8,244(sp)
8110f7d0:	1000f026 	beq	r2,zero,8110fb94 <___vfprintf_internal_r+0x1a5c>
8110f7d4:	d9002917 	ldw	r4,164(sp)
8110f7d8:	05bff7c4 	movi	r22,-33
8110f7dc:	00bfffc4 	movi	r2,-1
8110f7e0:	8dac703a 	and	r22,r17,r22
8110f7e4:	20820026 	beq	r4,r2,8110ffe8 <___vfprintf_internal_r+0x1eb0>
8110f7e8:	008011c4 	movi	r2,71
8110f7ec:	b081f726 	beq	r22,r2,8110ffcc <___vfprintf_internal_r+0x1e94>
8110f7f0:	d9003817 	ldw	r4,224(sp)
8110f7f4:	90c04014 	ori	r3,r18,256
8110f7f8:	d8c02b15 	stw	r3,172(sp)
8110f7fc:	20021516 	blt	r4,zero,81110054 <___vfprintf_internal_r+0x1f1c>
8110f800:	dcc03817 	ldw	r19,224(sp)
8110f804:	d8002a05 	stb	zero,168(sp)
8110f808:	00801984 	movi	r2,102
8110f80c:	8881f926 	beq	r17,r2,8110fff4 <___vfprintf_internal_r+0x1ebc>
8110f810:	00801184 	movi	r2,70
8110f814:	88821c26 	beq	r17,r2,81110088 <___vfprintf_internal_r+0x1f50>
8110f818:	00801144 	movi	r2,69
8110f81c:	b081ef26 	beq	r22,r2,8110ffdc <___vfprintf_internal_r+0x1ea4>
8110f820:	d8c02917 	ldw	r3,164(sp)
8110f824:	d8802104 	addi	r2,sp,132
8110f828:	d8800315 	stw	r2,12(sp)
8110f82c:	d9403617 	ldw	r5,216(sp)
8110f830:	d8802504 	addi	r2,sp,148
8110f834:	d9002c17 	ldw	r4,176(sp)
8110f838:	d8800215 	stw	r2,8(sp)
8110f83c:	d8802604 	addi	r2,sp,152
8110f840:	d8c00015 	stw	r3,0(sp)
8110f844:	d8800115 	stw	r2,4(sp)
8110f848:	01c00084 	movi	r7,2
8110f84c:	980d883a 	mov	r6,r19
8110f850:	d8c03c15 	stw	r3,240(sp)
8110f854:	da003d15 	stw	r8,244(sp)
8110f858:	111209c0 	call	8111209c <_dtoa_r>
8110f85c:	1021883a 	mov	r16,r2
8110f860:	008019c4 	movi	r2,103
8110f864:	d8c03c17 	ldw	r3,240(sp)
8110f868:	da003d17 	ldw	r8,244(sp)
8110f86c:	88817126 	beq	r17,r2,8110fe34 <___vfprintf_internal_r+0x1cfc>
8110f870:	008011c4 	movi	r2,71
8110f874:	88829226 	beq	r17,r2,811102c0 <___vfprintf_internal_r+0x2188>
8110f878:	80f9883a 	add	fp,r16,r3
8110f87c:	d9003617 	ldw	r4,216(sp)
8110f880:	000d883a 	mov	r6,zero
8110f884:	000f883a 	mov	r7,zero
8110f888:	980b883a 	mov	r5,r19
8110f88c:	da003d15 	stw	r8,244(sp)
8110f890:	111e9c40 	call	8111e9c4 <__eqdf2>
8110f894:	da003d17 	ldw	r8,244(sp)
8110f898:	10018d26 	beq	r2,zero,8110fed0 <___vfprintf_internal_r+0x1d98>
8110f89c:	d8802117 	ldw	r2,132(sp)
8110f8a0:	1700062e 	bgeu	r2,fp,8110f8bc <___vfprintf_internal_r+0x1784>
8110f8a4:	01000c04 	movi	r4,48
8110f8a8:	10c00044 	addi	r3,r2,1
8110f8ac:	d8c02115 	stw	r3,132(sp)
8110f8b0:	11000005 	stb	r4,0(r2)
8110f8b4:	d8802117 	ldw	r2,132(sp)
8110f8b8:	173ffb36 	bltu	r2,fp,8110f8a8 <__reset+0xfb0ef8a8>
8110f8bc:	1405c83a 	sub	r2,r2,r16
8110f8c0:	d8803315 	stw	r2,204(sp)
8110f8c4:	008011c4 	movi	r2,71
8110f8c8:	b0817626 	beq	r22,r2,8110fea4 <___vfprintf_internal_r+0x1d6c>
8110f8cc:	00801944 	movi	r2,101
8110f8d0:	1442810e 	bge	r2,r17,811102d8 <___vfprintf_internal_r+0x21a0>
8110f8d4:	d8c02617 	ldw	r3,152(sp)
8110f8d8:	00801984 	movi	r2,102
8110f8dc:	d8c03215 	stw	r3,200(sp)
8110f8e0:	8881fe26 	beq	r17,r2,811100dc <___vfprintf_internal_r+0x1fa4>
8110f8e4:	d8c03217 	ldw	r3,200(sp)
8110f8e8:	d9003317 	ldw	r4,204(sp)
8110f8ec:	1901dd16 	blt	r3,r4,81110064 <___vfprintf_internal_r+0x1f2c>
8110f8f0:	9480004c 	andi	r18,r18,1
8110f8f4:	90022b1e 	bne	r18,zero,811101a4 <___vfprintf_internal_r+0x206c>
8110f8f8:	1805883a 	mov	r2,r3
8110f8fc:	18028016 	blt	r3,zero,81110300 <___vfprintf_internal_r+0x21c8>
8110f900:	d8c03217 	ldw	r3,200(sp)
8110f904:	044019c4 	movi	r17,103
8110f908:	d8c02e15 	stw	r3,184(sp)
8110f90c:	df002a07 	ldb	fp,168(sp)
8110f910:	e001531e 	bne	fp,zero,8110fe60 <___vfprintf_internal_r+0x1d28>
8110f914:	df002783 	ldbu	fp,158(sp)
8110f918:	d8802a15 	stw	r2,168(sp)
8110f91c:	dc802b17 	ldw	r18,172(sp)
8110f920:	d8002915 	stw	zero,164(sp)
8110f924:	003bd106 	br	8110e86c <__reset+0xfb0ee86c>
8110f928:	d8802d17 	ldw	r2,180(sp)
8110f92c:	d8c02d17 	ldw	r3,180(sp)
8110f930:	d9002d17 	ldw	r4,180(sp)
8110f934:	10800017 	ldw	r2,0(r2)
8110f938:	18c00117 	ldw	r3,4(r3)
8110f93c:	21000204 	addi	r4,r4,8
8110f940:	d8803615 	stw	r2,216(sp)
8110f944:	d8c03815 	stw	r3,224(sp)
8110f948:	d9002d15 	stw	r4,180(sp)
8110f94c:	003b7506 	br	8110e724 <__reset+0xfb0ee724>
8110f950:	ac400007 	ldb	r17,0(r21)
8110f954:	003a5906 	br	8110e2bc <__reset+0xfb0ee2bc>
8110f958:	9080100c 	andi	r2,r18,64
8110f95c:	1000a826 	beq	r2,zero,8110fc00 <___vfprintf_internal_r+0x1ac8>
8110f960:	d9002d17 	ldw	r4,180(sp)
8110f964:	002d883a 	mov	r22,zero
8110f968:	24c0000b 	ldhu	r19,0(r4)
8110f96c:	21000104 	addi	r4,r4,4
8110f970:	d9002d15 	stw	r4,180(sp)
8110f974:	003ccb06 	br	8110eca4 <__reset+0xfb0eeca4>
8110f978:	d8c02d17 	ldw	r3,180(sp)
8110f97c:	d9002917 	ldw	r4,164(sp)
8110f980:	002d883a 	mov	r22,zero
8110f984:	18800104 	addi	r2,r3,4
8110f988:	1cc00017 	ldw	r19,0(r3)
8110f98c:	203ebb0e 	bge	r4,zero,8110f47c <__reset+0xfb0ef47c>
8110f990:	003ef106 	br	8110f558 <__reset+0xfb0ef558>
8110f994:	9080040c 	andi	r2,r18,16
8110f998:	1000921e 	bne	r2,zero,8110fbe4 <___vfprintf_internal_r+0x1aac>
8110f99c:	9480100c 	andi	r18,r18,64
8110f9a0:	90013926 	beq	r18,zero,8110fe88 <___vfprintf_internal_r+0x1d50>
8110f9a4:	d9002d17 	ldw	r4,180(sp)
8110f9a8:	d9402f17 	ldw	r5,188(sp)
8110f9ac:	20800017 	ldw	r2,0(r4)
8110f9b0:	21000104 	addi	r4,r4,4
8110f9b4:	d9002d15 	stw	r4,180(sp)
8110f9b8:	1140000d 	sth	r5,0(r2)
8110f9bc:	003a1606 	br	8110e218 <__reset+0xfb0ee218>
8110f9c0:	9080100c 	andi	r2,r18,64
8110f9c4:	10008026 	beq	r2,zero,8110fbc8 <___vfprintf_internal_r+0x1a90>
8110f9c8:	d8c02d17 	ldw	r3,180(sp)
8110f9cc:	1cc0000f 	ldh	r19,0(r3)
8110f9d0:	18c00104 	addi	r3,r3,4
8110f9d4:	d8c02d15 	stw	r3,180(sp)
8110f9d8:	982dd7fa 	srai	r22,r19,31
8110f9dc:	b005883a 	mov	r2,r22
8110f9e0:	003b1f06 	br	8110e660 <__reset+0xfb0ee660>
8110f9e4:	9080100c 	andi	r2,r18,64
8110f9e8:	d8002785 	stb	zero,158(sp)
8110f9ec:	10008a1e 	bne	r2,zero,8110fc18 <___vfprintf_internal_r+0x1ae0>
8110f9f0:	d9402d17 	ldw	r5,180(sp)
8110f9f4:	d8c02917 	ldw	r3,164(sp)
8110f9f8:	002d883a 	mov	r22,zero
8110f9fc:	28800104 	addi	r2,r5,4
8110fa00:	2cc00017 	ldw	r19,0(r5)
8110fa04:	183e4b0e 	bge	r3,zero,8110f334 <__reset+0xfb0ef334>
8110fa08:	9d86b03a 	or	r3,r19,r22
8110fa0c:	d8802d15 	stw	r2,180(sp)
8110fa10:	183e4c1e 	bne	r3,zero,8110f344 <__reset+0xfb0ef344>
8110fa14:	0039883a 	mov	fp,zero
8110fa18:	0005883a 	mov	r2,zero
8110fa1c:	003d4006 	br	8110ef20 <__reset+0xfb0eef20>
8110fa20:	016044f4 	movhi	r5,33043
8110fa24:	294dda84 	addi	r5,r5,14186
8110fa28:	d9402b15 	stw	r5,172(sp)
8110fa2c:	d9402b17 	ldw	r5,172(sp)
8110fa30:	1c47883a 	add	r3,r3,r17
8110fa34:	10800044 	addi	r2,r2,1
8110fa38:	41400015 	stw	r5,0(r8)
8110fa3c:	44400115 	stw	r17,4(r8)
8110fa40:	d8c02015 	stw	r3,128(sp)
8110fa44:	d8801f15 	stw	r2,124(sp)
8110fa48:	010001c4 	movi	r4,7
8110fa4c:	20bec816 	blt	r4,r2,8110f570 <__reset+0xfb0ef570>
8110fa50:	42000204 	addi	r8,r8,8
8110fa54:	003ecd06 	br	8110f58c <__reset+0xfb0ef58c>
8110fa58:	d9002917 	ldw	r4,164(sp)
8110fa5c:	d8002785 	stb	zero,158(sp)
8110fa60:	203d2d16 	blt	r4,zero,8110ef18 <__reset+0xfb0eef18>
8110fa64:	00bfdfc4 	movi	r2,-129
8110fa68:	90a4703a 	and	r18,r18,r2
8110fa6c:	003a9106 	br	8110e4b4 <__reset+0xfb0ee4b4>
8110fa70:	012044f4 	movhi	r4,33043
8110fa74:	210dda84 	addi	r4,r4,14186
8110fa78:	d9002b15 	stw	r4,172(sp)
8110fa7c:	003c0c06 	br	8110eab0 <__reset+0xfb0eeab0>
8110fa80:	d9002c17 	ldw	r4,176(sp)
8110fa84:	d9801e04 	addi	r6,sp,120
8110fa88:	b80b883a 	mov	r5,r23
8110fa8c:	111a0a40 	call	8111a0a4 <__sprint_r>
8110fa90:	103aab1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110fa94:	d8c02017 	ldw	r3,128(sp)
8110fa98:	da000404 	addi	r8,sp,16
8110fa9c:	003d4106 	br	8110efa4 <__reset+0xfb0eefa4>
8110faa0:	d8801f17 	ldw	r2,124(sp)
8110faa4:	016044f4 	movhi	r5,33043
8110faa8:	01000044 	movi	r4,1
8110faac:	18c00044 	addi	r3,r3,1
8110fab0:	10800044 	addi	r2,r2,1
8110fab4:	294dd204 	addi	r5,r5,14152
8110fab8:	41000115 	stw	r4,4(r8)
8110fabc:	41400015 	stw	r5,0(r8)
8110fac0:	d8c02015 	stw	r3,128(sp)
8110fac4:	d8801f15 	stw	r2,124(sp)
8110fac8:	010001c4 	movi	r4,7
8110facc:	20805c16 	blt	r4,r2,8110fc40 <___vfprintf_internal_r+0x1b08>
8110fad0:	42000204 	addi	r8,r8,8
8110fad4:	8800041e 	bne	r17,zero,8110fae8 <___vfprintf_internal_r+0x19b0>
8110fad8:	d8803317 	ldw	r2,204(sp)
8110fadc:	1000021e 	bne	r2,zero,8110fae8 <___vfprintf_internal_r+0x19b0>
8110fae0:	9080004c 	andi	r2,r18,1
8110fae4:	103c0926 	beq	r2,zero,8110eb0c <__reset+0xfb0eeb0c>
8110fae8:	d9003717 	ldw	r4,220(sp)
8110faec:	d8801f17 	ldw	r2,124(sp)
8110faf0:	d9403417 	ldw	r5,208(sp)
8110faf4:	20c7883a 	add	r3,r4,r3
8110faf8:	10800044 	addi	r2,r2,1
8110fafc:	41000115 	stw	r4,4(r8)
8110fb00:	41400015 	stw	r5,0(r8)
8110fb04:	d8c02015 	stw	r3,128(sp)
8110fb08:	d8801f15 	stw	r2,124(sp)
8110fb0c:	010001c4 	movi	r4,7
8110fb10:	20812116 	blt	r4,r2,8110ff98 <___vfprintf_internal_r+0x1e60>
8110fb14:	42000204 	addi	r8,r8,8
8110fb18:	0463c83a 	sub	r17,zero,r17
8110fb1c:	0440730e 	bge	zero,r17,8110fcec <___vfprintf_internal_r+0x1bb4>
8110fb20:	05800404 	movi	r22,16
8110fb24:	b440860e 	bge	r22,r17,8110fd40 <___vfprintf_internal_r+0x1c08>
8110fb28:	016044f4 	movhi	r5,33043
8110fb2c:	294dda84 	addi	r5,r5,14186
8110fb30:	d9402b15 	stw	r5,172(sp)
8110fb34:	070001c4 	movi	fp,7
8110fb38:	dcc02c17 	ldw	r19,176(sp)
8110fb3c:	00000306 	br	8110fb4c <___vfprintf_internal_r+0x1a14>
8110fb40:	42000204 	addi	r8,r8,8
8110fb44:	8c7ffc04 	addi	r17,r17,-16
8110fb48:	b440800e 	bge	r22,r17,8110fd4c <___vfprintf_internal_r+0x1c14>
8110fb4c:	18c00404 	addi	r3,r3,16
8110fb50:	10800044 	addi	r2,r2,1
8110fb54:	45000015 	stw	r20,0(r8)
8110fb58:	45800115 	stw	r22,4(r8)
8110fb5c:	d8c02015 	stw	r3,128(sp)
8110fb60:	d8801f15 	stw	r2,124(sp)
8110fb64:	e0bff60e 	bge	fp,r2,8110fb40 <__reset+0xfb0efb40>
8110fb68:	d9801e04 	addi	r6,sp,120
8110fb6c:	b80b883a 	mov	r5,r23
8110fb70:	9809883a 	mov	r4,r19
8110fb74:	111a0a40 	call	8111a0a4 <__sprint_r>
8110fb78:	103a711e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110fb7c:	d8c02017 	ldw	r3,128(sp)
8110fb80:	d8801f17 	ldw	r2,124(sp)
8110fb84:	da000404 	addi	r8,sp,16
8110fb88:	003fee06 	br	8110fb44 <__reset+0xfb0efb44>
8110fb8c:	00bfffc4 	movi	r2,-1
8110fb90:	003a6f06 	br	8110e550 <__reset+0xfb0ee550>
8110fb94:	008011c4 	movi	r2,71
8110fb98:	1440b816 	blt	r2,r17,8110fe7c <___vfprintf_internal_r+0x1d44>
8110fb9c:	042044f4 	movhi	r16,33043
8110fba0:	840dc404 	addi	r16,r16,14096
8110fba4:	00c000c4 	movi	r3,3
8110fba8:	00bfdfc4 	movi	r2,-129
8110fbac:	d8c02a15 	stw	r3,168(sp)
8110fbb0:	90a4703a 	and	r18,r18,r2
8110fbb4:	df002783 	ldbu	fp,158(sp)
8110fbb8:	d8c02e15 	stw	r3,184(sp)
8110fbbc:	d8002915 	stw	zero,164(sp)
8110fbc0:	d8003215 	stw	zero,200(sp)
8110fbc4:	003b2906 	br	8110e86c <__reset+0xfb0ee86c>
8110fbc8:	d9002d17 	ldw	r4,180(sp)
8110fbcc:	24c00017 	ldw	r19,0(r4)
8110fbd0:	21000104 	addi	r4,r4,4
8110fbd4:	d9002d15 	stw	r4,180(sp)
8110fbd8:	982dd7fa 	srai	r22,r19,31
8110fbdc:	b005883a 	mov	r2,r22
8110fbe0:	003a9f06 	br	8110e660 <__reset+0xfb0ee660>
8110fbe4:	d9402d17 	ldw	r5,180(sp)
8110fbe8:	d8c02f17 	ldw	r3,188(sp)
8110fbec:	28800017 	ldw	r2,0(r5)
8110fbf0:	29400104 	addi	r5,r5,4
8110fbf4:	d9402d15 	stw	r5,180(sp)
8110fbf8:	10c00015 	stw	r3,0(r2)
8110fbfc:	00398606 	br	8110e218 <__reset+0xfb0ee218>
8110fc00:	d9402d17 	ldw	r5,180(sp)
8110fc04:	002d883a 	mov	r22,zero
8110fc08:	2cc00017 	ldw	r19,0(r5)
8110fc0c:	29400104 	addi	r5,r5,4
8110fc10:	d9402d15 	stw	r5,180(sp)
8110fc14:	003c2306 	br	8110eca4 <__reset+0xfb0eeca4>
8110fc18:	d8c02d17 	ldw	r3,180(sp)
8110fc1c:	d9002917 	ldw	r4,164(sp)
8110fc20:	002d883a 	mov	r22,zero
8110fc24:	18800104 	addi	r2,r3,4
8110fc28:	1cc0000b 	ldhu	r19,0(r3)
8110fc2c:	203dc10e 	bge	r4,zero,8110f334 <__reset+0xfb0ef334>
8110fc30:	003f7506 	br	8110fa08 <__reset+0xfb0efa08>
8110fc34:	042044f4 	movhi	r16,33043
8110fc38:	840dc204 	addi	r16,r16,14088
8110fc3c:	003acc06 	br	8110e770 <__reset+0xfb0ee770>
8110fc40:	d9002c17 	ldw	r4,176(sp)
8110fc44:	d9801e04 	addi	r6,sp,120
8110fc48:	b80b883a 	mov	r5,r23
8110fc4c:	111a0a40 	call	8111a0a4 <__sprint_r>
8110fc50:	103a3b1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110fc54:	dc402617 	ldw	r17,152(sp)
8110fc58:	d8c02017 	ldw	r3,128(sp)
8110fc5c:	da000404 	addi	r8,sp,16
8110fc60:	003f9c06 	br	8110fad4 <__reset+0xfb0efad4>
8110fc64:	ac400043 	ldbu	r17,1(r21)
8110fc68:	94800814 	ori	r18,r18,32
8110fc6c:	ad400044 	addi	r21,r21,1
8110fc70:	8c403fcc 	andi	r17,r17,255
8110fc74:	8c40201c 	xori	r17,r17,128
8110fc78:	8c7fe004 	addi	r17,r17,-128
8110fc7c:	00398f06 	br	8110e2bc <__reset+0xfb0ee2bc>
8110fc80:	d8c02d15 	stw	r3,180(sp)
8110fc84:	0039883a 	mov	fp,zero
8110fc88:	003e3506 	br	8110f560 <__reset+0xfb0ef560>
8110fc8c:	d9002c17 	ldw	r4,176(sp)
8110fc90:	d9801e04 	addi	r6,sp,120
8110fc94:	b80b883a 	mov	r5,r23
8110fc98:	111a0a40 	call	8111a0a4 <__sprint_r>
8110fc9c:	103a281e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110fca0:	d8c02017 	ldw	r3,128(sp)
8110fca4:	da000404 	addi	r8,sp,16
8110fca8:	003cd006 	br	8110efec <__reset+0xfb0eefec>
8110fcac:	8009883a 	mov	r4,r16
8110fcb0:	da003d15 	stw	r8,244(sp)
8110fcb4:	110bc740 	call	8110bc74 <strlen>
8110fcb8:	d8802e15 	stw	r2,184(sp)
8110fcbc:	da003d17 	ldw	r8,244(sp)
8110fcc0:	103c340e 	bge	r2,zero,8110ed94 <__reset+0xfb0eed94>
8110fcc4:	0005883a 	mov	r2,zero
8110fcc8:	003c3206 	br	8110ed94 <__reset+0xfb0eed94>
8110fccc:	d9002c17 	ldw	r4,176(sp)
8110fcd0:	d9801e04 	addi	r6,sp,120
8110fcd4:	b80b883a 	mov	r5,r23
8110fcd8:	111a0a40 	call	8111a0a4 <__sprint_r>
8110fcdc:	103a181e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110fce0:	d8c02017 	ldw	r3,128(sp)
8110fce4:	d8801f17 	ldw	r2,124(sp)
8110fce8:	da000404 	addi	r8,sp,16
8110fcec:	d9403317 	ldw	r5,204(sp)
8110fcf0:	10800044 	addi	r2,r2,1
8110fcf4:	44000015 	stw	r16,0(r8)
8110fcf8:	28c7883a 	add	r3,r5,r3
8110fcfc:	003b7d06 	br	8110eaf4 <__reset+0xfb0eeaf4>
8110fd00:	012044f4 	movhi	r4,33043
8110fd04:	210dde84 	addi	r4,r4,14202
8110fd08:	d9003515 	stw	r4,212(sp)
8110fd0c:	003b1406 	br	8110e960 <__reset+0xfb0ee960>
8110fd10:	013fffc4 	movi	r4,-1
8110fd14:	003a3506 	br	8110e5ec <__reset+0xfb0ee5ec>
8110fd18:	0023883a 	mov	r17,zero
8110fd1c:	003d9d06 	br	8110f394 <__reset+0xfb0ef394>
8110fd20:	d9002c17 	ldw	r4,176(sp)
8110fd24:	d9801e04 	addi	r6,sp,120
8110fd28:	b80b883a 	mov	r5,r23
8110fd2c:	111a0a40 	call	8111a0a4 <__sprint_r>
8110fd30:	103a031e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110fd34:	d8c02017 	ldw	r3,128(sp)
8110fd38:	da000404 	addi	r8,sp,16
8110fd3c:	003d9406 	br	8110f390 <__reset+0xfb0ef390>
8110fd40:	012044f4 	movhi	r4,33043
8110fd44:	210dda84 	addi	r4,r4,14186
8110fd48:	d9002b15 	stw	r4,172(sp)
8110fd4c:	d9002b17 	ldw	r4,172(sp)
8110fd50:	1c47883a 	add	r3,r3,r17
8110fd54:	10800044 	addi	r2,r2,1
8110fd58:	41000015 	stw	r4,0(r8)
8110fd5c:	44400115 	stw	r17,4(r8)
8110fd60:	d8c02015 	stw	r3,128(sp)
8110fd64:	d8801f15 	stw	r2,124(sp)
8110fd68:	010001c4 	movi	r4,7
8110fd6c:	20bfd716 	blt	r4,r2,8110fccc <__reset+0xfb0efccc>
8110fd70:	42000204 	addi	r8,r8,8
8110fd74:	003fdd06 	br	8110fcec <__reset+0xfb0efcec>
8110fd78:	d9002c17 	ldw	r4,176(sp)
8110fd7c:	d9801e04 	addi	r6,sp,120
8110fd80:	b80b883a 	mov	r5,r23
8110fd84:	111a0a40 	call	8111a0a4 <__sprint_r>
8110fd88:	1039ed1e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110fd8c:	d8802617 	ldw	r2,152(sp)
8110fd90:	d8c02017 	ldw	r3,128(sp)
8110fd94:	da000404 	addi	r8,sp,16
8110fd98:	003e1006 	br	8110f5dc <__reset+0xfb0ef5dc>
8110fd9c:	00800044 	movi	r2,1
8110fda0:	10803fcc 	andi	r2,r2,255
8110fda4:	00c00044 	movi	r3,1
8110fda8:	10fa3526 	beq	r2,r3,8110e680 <__reset+0xfb0ee680>
8110fdac:	00c00084 	movi	r3,2
8110fdb0:	10fbcb26 	beq	r2,r3,8110ece0 <__reset+0xfb0eece0>
8110fdb4:	003a8f06 	br	8110e7f4 <__reset+0xfb0ee7f4>
8110fdb8:	012044f4 	movhi	r4,33043
8110fdbc:	210dde84 	addi	r4,r4,14202
8110fdc0:	d9003515 	stw	r4,212(sp)
8110fdc4:	003b7606 	br	8110eba0 <__reset+0xfb0eeba0>
8110fdc8:	d8802917 	ldw	r2,164(sp)
8110fdcc:	00c00184 	movi	r3,6
8110fdd0:	1880012e 	bgeu	r3,r2,8110fdd8 <___vfprintf_internal_r+0x1ca0>
8110fdd4:	1805883a 	mov	r2,r3
8110fdd8:	d8802e15 	stw	r2,184(sp)
8110fddc:	1000ef16 	blt	r2,zero,8111019c <___vfprintf_internal_r+0x2064>
8110fde0:	042044f4 	movhi	r16,33043
8110fde4:	d8802a15 	stw	r2,168(sp)
8110fde8:	dcc02d15 	stw	r19,180(sp)
8110fdec:	d8002915 	stw	zero,164(sp)
8110fdf0:	d8003215 	stw	zero,200(sp)
8110fdf4:	840dd004 	addi	r16,r16,14144
8110fdf8:	0039883a 	mov	fp,zero
8110fdfc:	003aa206 	br	8110e888 <__reset+0xfb0ee888>
8110fe00:	0021883a 	mov	r16,zero
8110fe04:	003e0706 	br	8110f624 <__reset+0xfb0ef624>
8110fe08:	d9002c17 	ldw	r4,176(sp)
8110fe0c:	d9801e04 	addi	r6,sp,120
8110fe10:	b80b883a 	mov	r5,r23
8110fe14:	111a0a40 	call	8111a0a4 <__sprint_r>
8110fe18:	1039c91e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110fe1c:	d8802617 	ldw	r2,152(sp)
8110fe20:	d9403317 	ldw	r5,204(sp)
8110fe24:	d8c02017 	ldw	r3,128(sp)
8110fe28:	da000404 	addi	r8,sp,16
8110fe2c:	2885c83a 	sub	r2,r5,r2
8110fe30:	003dfb06 	br	8110f620 <__reset+0xfb0ef620>
8110fe34:	9080004c 	andi	r2,r18,1
8110fe38:	103e8f1e 	bne	r2,zero,8110f878 <__reset+0xfb0ef878>
8110fe3c:	d8802117 	ldw	r2,132(sp)
8110fe40:	003e9e06 	br	8110f8bc <__reset+0xfb0ef8bc>
8110fe44:	1025883a 	mov	r18,r2
8110fe48:	0039883a 	mov	fp,zero
8110fe4c:	00800084 	movi	r2,2
8110fe50:	003fd306 	br	8110fda0 <__reset+0xfb0efda0>
8110fe54:	07000b44 	movi	fp,45
8110fe58:	df002785 	stb	fp,158(sp)
8110fe5c:	003a4006 	br	8110e760 <__reset+0xfb0ee760>
8110fe60:	00c00b44 	movi	r3,45
8110fe64:	d8c02785 	stb	r3,158(sp)
8110fe68:	d8802a15 	stw	r2,168(sp)
8110fe6c:	dc802b17 	ldw	r18,172(sp)
8110fe70:	d8002915 	stw	zero,164(sp)
8110fe74:	07000b44 	movi	fp,45
8110fe78:	003a8006 	br	8110e87c <__reset+0xfb0ee87c>
8110fe7c:	042044f4 	movhi	r16,33043
8110fe80:	840dc504 	addi	r16,r16,14100
8110fe84:	003f4706 	br	8110fba4 <__reset+0xfb0efba4>
8110fe88:	d8c02d17 	ldw	r3,180(sp)
8110fe8c:	d9002f17 	ldw	r4,188(sp)
8110fe90:	18800017 	ldw	r2,0(r3)
8110fe94:	18c00104 	addi	r3,r3,4
8110fe98:	d8c02d15 	stw	r3,180(sp)
8110fe9c:	11000015 	stw	r4,0(r2)
8110fea0:	0038dd06 	br	8110e218 <__reset+0xfb0ee218>
8110fea4:	dd802617 	ldw	r22,152(sp)
8110fea8:	00bfff44 	movi	r2,-3
8110feac:	b0801c16 	blt	r22,r2,8110ff20 <___vfprintf_internal_r+0x1de8>
8110feb0:	d9402917 	ldw	r5,164(sp)
8110feb4:	2d801a16 	blt	r5,r22,8110ff20 <___vfprintf_internal_r+0x1de8>
8110feb8:	dd803215 	stw	r22,200(sp)
8110febc:	003e8906 	br	8110f8e4 <__reset+0xfb0ef8e4>
8110fec0:	012044f4 	movhi	r4,33043
8110fec4:	210dda84 	addi	r4,r4,14186
8110fec8:	d9002b15 	stw	r4,172(sp)
8110fecc:	003c9106 	br	8110f114 <__reset+0xfb0ef114>
8110fed0:	e005883a 	mov	r2,fp
8110fed4:	003e7906 	br	8110f8bc <__reset+0xfb0ef8bc>
8110fed8:	d9402917 	ldw	r5,164(sp)
8110fedc:	df002783 	ldbu	fp,158(sp)
8110fee0:	dcc02d15 	stw	r19,180(sp)
8110fee4:	d9402a15 	stw	r5,168(sp)
8110fee8:	d9402e15 	stw	r5,184(sp)
8110feec:	d8002915 	stw	zero,164(sp)
8110fef0:	d8003215 	stw	zero,200(sp)
8110fef4:	003a5d06 	br	8110e86c <__reset+0xfb0ee86c>
8110fef8:	9080004c 	andi	r2,r18,1
8110fefc:	0039883a 	mov	fp,zero
8110ff00:	10000426 	beq	r2,zero,8110ff14 <___vfprintf_internal_r+0x1ddc>
8110ff04:	00800c04 	movi	r2,48
8110ff08:	dc001dc4 	addi	r16,sp,119
8110ff0c:	d8801dc5 	stb	r2,119(sp)
8110ff10:	003b8006 	br	8110ed14 <__reset+0xfb0eed14>
8110ff14:	d8002e15 	stw	zero,184(sp)
8110ff18:	dc001e04 	addi	r16,sp,120
8110ff1c:	003a4d06 	br	8110e854 <__reset+0xfb0ee854>
8110ff20:	8c7fff84 	addi	r17,r17,-2
8110ff24:	b5bfffc4 	addi	r22,r22,-1
8110ff28:	dd802615 	stw	r22,152(sp)
8110ff2c:	dc4022c5 	stb	r17,139(sp)
8110ff30:	b000bf16 	blt	r22,zero,81110230 <___vfprintf_internal_r+0x20f8>
8110ff34:	00800ac4 	movi	r2,43
8110ff38:	d8802305 	stb	r2,140(sp)
8110ff3c:	00800244 	movi	r2,9
8110ff40:	15807016 	blt	r2,r22,81110104 <___vfprintf_internal_r+0x1fcc>
8110ff44:	00800c04 	movi	r2,48
8110ff48:	b5800c04 	addi	r22,r22,48
8110ff4c:	d8802345 	stb	r2,141(sp)
8110ff50:	dd802385 	stb	r22,142(sp)
8110ff54:	d88023c4 	addi	r2,sp,143
8110ff58:	df0022c4 	addi	fp,sp,139
8110ff5c:	d8c03317 	ldw	r3,204(sp)
8110ff60:	1739c83a 	sub	fp,r2,fp
8110ff64:	d9003317 	ldw	r4,204(sp)
8110ff68:	e0c7883a 	add	r3,fp,r3
8110ff6c:	df003a15 	stw	fp,232(sp)
8110ff70:	d8c02e15 	stw	r3,184(sp)
8110ff74:	00800044 	movi	r2,1
8110ff78:	1100b30e 	bge	r2,r4,81110248 <___vfprintf_internal_r+0x2110>
8110ff7c:	d8c02e17 	ldw	r3,184(sp)
8110ff80:	18c00044 	addi	r3,r3,1
8110ff84:	d8c02e15 	stw	r3,184(sp)
8110ff88:	1805883a 	mov	r2,r3
8110ff8c:	1800ac16 	blt	r3,zero,81110240 <___vfprintf_internal_r+0x2108>
8110ff90:	d8003215 	stw	zero,200(sp)
8110ff94:	003e5d06 	br	8110f90c <__reset+0xfb0ef90c>
8110ff98:	d9002c17 	ldw	r4,176(sp)
8110ff9c:	d9801e04 	addi	r6,sp,120
8110ffa0:	b80b883a 	mov	r5,r23
8110ffa4:	111a0a40 	call	8111a0a4 <__sprint_r>
8110ffa8:	1039651e 	bne	r2,zero,8110e540 <__reset+0xfb0ee540>
8110ffac:	dc402617 	ldw	r17,152(sp)
8110ffb0:	d8c02017 	ldw	r3,128(sp)
8110ffb4:	d8801f17 	ldw	r2,124(sp)
8110ffb8:	da000404 	addi	r8,sp,16
8110ffbc:	003ed606 	br	8110fb18 <__reset+0xfb0efb18>
8110ffc0:	582b883a 	mov	r21,r11
8110ffc4:	d8002915 	stw	zero,164(sp)
8110ffc8:	0038bd06 	br	8110e2c0 <__reset+0xfb0ee2c0>
8110ffcc:	d8802917 	ldw	r2,164(sp)
8110ffd0:	103e071e 	bne	r2,zero,8110f7f0 <__reset+0xfb0ef7f0>
8110ffd4:	dc002915 	stw	r16,164(sp)
8110ffd8:	003e0506 	br	8110f7f0 <__reset+0xfb0ef7f0>
8110ffdc:	d9002917 	ldw	r4,164(sp)
8110ffe0:	20c00044 	addi	r3,r4,1
8110ffe4:	003e0f06 	br	8110f824 <__reset+0xfb0ef824>
8110ffe8:	01400184 	movi	r5,6
8110ffec:	d9402915 	stw	r5,164(sp)
8110fff0:	003dff06 	br	8110f7f0 <__reset+0xfb0ef7f0>
8110fff4:	d8802104 	addi	r2,sp,132
8110fff8:	d8800315 	stw	r2,12(sp)
8110fffc:	d8802504 	addi	r2,sp,148
81110000:	d8800215 	stw	r2,8(sp)
81110004:	d8802604 	addi	r2,sp,152
81110008:	d8800115 	stw	r2,4(sp)
8111000c:	d8802917 	ldw	r2,164(sp)
81110010:	d9403617 	ldw	r5,216(sp)
81110014:	d9002c17 	ldw	r4,176(sp)
81110018:	d8800015 	stw	r2,0(sp)
8111001c:	01c000c4 	movi	r7,3
81110020:	980d883a 	mov	r6,r19
81110024:	da003d15 	stw	r8,244(sp)
81110028:	111209c0 	call	8111209c <_dtoa_r>
8111002c:	d8c02917 	ldw	r3,164(sp)
81110030:	da003d17 	ldw	r8,244(sp)
81110034:	1021883a 	mov	r16,r2
81110038:	10f9883a 	add	fp,r2,r3
8111003c:	81000007 	ldb	r4,0(r16)
81110040:	00800c04 	movi	r2,48
81110044:	20805e26 	beq	r4,r2,811101c0 <___vfprintf_internal_r+0x2088>
81110048:	d8c02617 	ldw	r3,152(sp)
8111004c:	e0f9883a 	add	fp,fp,r3
81110050:	003e0a06 	br	8110f87c <__reset+0xfb0ef87c>
81110054:	00c00b44 	movi	r3,45
81110058:	24e0003c 	xorhi	r19,r4,32768
8111005c:	d8c02a05 	stb	r3,168(sp)
81110060:	003de906 	br	8110f808 <__reset+0xfb0ef808>
81110064:	d8c03217 	ldw	r3,200(sp)
81110068:	00c07a0e 	bge	zero,r3,81110254 <___vfprintf_internal_r+0x211c>
8111006c:	00800044 	movi	r2,1
81110070:	d9003317 	ldw	r4,204(sp)
81110074:	1105883a 	add	r2,r2,r4
81110078:	d8802e15 	stw	r2,184(sp)
8111007c:	10004e16 	blt	r2,zero,811101b8 <___vfprintf_internal_r+0x2080>
81110080:	044019c4 	movi	r17,103
81110084:	003e2106 	br	8110f90c <__reset+0xfb0ef90c>
81110088:	d9002917 	ldw	r4,164(sp)
8111008c:	d8802104 	addi	r2,sp,132
81110090:	d8800315 	stw	r2,12(sp)
81110094:	d9000015 	stw	r4,0(sp)
81110098:	d8802504 	addi	r2,sp,148
8111009c:	d9403617 	ldw	r5,216(sp)
811100a0:	d9002c17 	ldw	r4,176(sp)
811100a4:	d8800215 	stw	r2,8(sp)
811100a8:	d8802604 	addi	r2,sp,152
811100ac:	d8800115 	stw	r2,4(sp)
811100b0:	01c000c4 	movi	r7,3
811100b4:	980d883a 	mov	r6,r19
811100b8:	da003d15 	stw	r8,244(sp)
811100bc:	111209c0 	call	8111209c <_dtoa_r>
811100c0:	d8c02917 	ldw	r3,164(sp)
811100c4:	da003d17 	ldw	r8,244(sp)
811100c8:	1021883a 	mov	r16,r2
811100cc:	00801184 	movi	r2,70
811100d0:	80f9883a 	add	fp,r16,r3
811100d4:	88bfd926 	beq	r17,r2,8111003c <__reset+0xfb0f003c>
811100d8:	003de806 	br	8110f87c <__reset+0xfb0ef87c>
811100dc:	d9002917 	ldw	r4,164(sp)
811100e0:	00c04d0e 	bge	zero,r3,81110218 <___vfprintf_internal_r+0x20e0>
811100e4:	2000441e 	bne	r4,zero,811101f8 <___vfprintf_internal_r+0x20c0>
811100e8:	9480004c 	andi	r18,r18,1
811100ec:	9000421e 	bne	r18,zero,811101f8 <___vfprintf_internal_r+0x20c0>
811100f0:	1805883a 	mov	r2,r3
811100f4:	18007016 	blt	r3,zero,811102b8 <___vfprintf_internal_r+0x2180>
811100f8:	d8c03217 	ldw	r3,200(sp)
811100fc:	d8c02e15 	stw	r3,184(sp)
81110100:	003e0206 	br	8110f90c <__reset+0xfb0ef90c>
81110104:	df0022c4 	addi	fp,sp,139
81110108:	dc002915 	stw	r16,164(sp)
8111010c:	4027883a 	mov	r19,r8
81110110:	e021883a 	mov	r16,fp
81110114:	b009883a 	mov	r4,r22
81110118:	01400284 	movi	r5,10
8111011c:	111d5040 	call	8111d504 <__modsi3>
81110120:	10800c04 	addi	r2,r2,48
81110124:	843fffc4 	addi	r16,r16,-1
81110128:	b009883a 	mov	r4,r22
8111012c:	01400284 	movi	r5,10
81110130:	80800005 	stb	r2,0(r16)
81110134:	111d4800 	call	8111d480 <__divsi3>
81110138:	102d883a 	mov	r22,r2
8111013c:	00800244 	movi	r2,9
81110140:	15bff416 	blt	r2,r22,81110114 <__reset+0xfb0f0114>
81110144:	9811883a 	mov	r8,r19
81110148:	b0800c04 	addi	r2,r22,48
8111014c:	8027883a 	mov	r19,r16
81110150:	997fffc4 	addi	r5,r19,-1
81110154:	98bfffc5 	stb	r2,-1(r19)
81110158:	dc002917 	ldw	r16,164(sp)
8111015c:	2f006a2e 	bgeu	r5,fp,81110308 <___vfprintf_internal_r+0x21d0>
81110160:	d9c02384 	addi	r7,sp,142
81110164:	3ccfc83a 	sub	r7,r7,r19
81110168:	d9002344 	addi	r4,sp,141
8111016c:	e1cf883a 	add	r7,fp,r7
81110170:	00000106 	br	81110178 <___vfprintf_internal_r+0x2040>
81110174:	28800003 	ldbu	r2,0(r5)
81110178:	20800005 	stb	r2,0(r4)
8111017c:	21000044 	addi	r4,r4,1
81110180:	29400044 	addi	r5,r5,1
81110184:	393ffb1e 	bne	r7,r4,81110174 <__reset+0xfb0f0174>
81110188:	d8802304 	addi	r2,sp,140
8111018c:	14c5c83a 	sub	r2,r2,r19
81110190:	d8c02344 	addi	r3,sp,141
81110194:	1885883a 	add	r2,r3,r2
81110198:	003f7006 	br	8110ff5c <__reset+0xfb0eff5c>
8111019c:	0005883a 	mov	r2,zero
811101a0:	003f0f06 	br	8110fde0 <__reset+0xfb0efde0>
811101a4:	d8c03217 	ldw	r3,200(sp)
811101a8:	18c00044 	addi	r3,r3,1
811101ac:	d8c02e15 	stw	r3,184(sp)
811101b0:	1805883a 	mov	r2,r3
811101b4:	183fb20e 	bge	r3,zero,81110080 <__reset+0xfb0f0080>
811101b8:	0005883a 	mov	r2,zero
811101bc:	003fb006 	br	81110080 <__reset+0xfb0f0080>
811101c0:	d9003617 	ldw	r4,216(sp)
811101c4:	000d883a 	mov	r6,zero
811101c8:	000f883a 	mov	r7,zero
811101cc:	980b883a 	mov	r5,r19
811101d0:	d8c03c15 	stw	r3,240(sp)
811101d4:	da003d15 	stw	r8,244(sp)
811101d8:	111e9c40 	call	8111e9c4 <__eqdf2>
811101dc:	d8c03c17 	ldw	r3,240(sp)
811101e0:	da003d17 	ldw	r8,244(sp)
811101e4:	103f9826 	beq	r2,zero,81110048 <__reset+0xfb0f0048>
811101e8:	00800044 	movi	r2,1
811101ec:	10c7c83a 	sub	r3,r2,r3
811101f0:	d8c02615 	stw	r3,152(sp)
811101f4:	003f9506 	br	8111004c <__reset+0xfb0f004c>
811101f8:	d9002917 	ldw	r4,164(sp)
811101fc:	d8c03217 	ldw	r3,200(sp)
81110200:	20800044 	addi	r2,r4,1
81110204:	1885883a 	add	r2,r3,r2
81110208:	d8802e15 	stw	r2,184(sp)
8111020c:	103dbf0e 	bge	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110210:	0005883a 	mov	r2,zero
81110214:	003dbd06 	br	8110f90c <__reset+0xfb0ef90c>
81110218:	2000211e 	bne	r4,zero,811102a0 <___vfprintf_internal_r+0x2168>
8111021c:	9480004c 	andi	r18,r18,1
81110220:	90001f1e 	bne	r18,zero,811102a0 <___vfprintf_internal_r+0x2168>
81110224:	00800044 	movi	r2,1
81110228:	d8802e15 	stw	r2,184(sp)
8111022c:	003db706 	br	8110f90c <__reset+0xfb0ef90c>
81110230:	00800b44 	movi	r2,45
81110234:	05adc83a 	sub	r22,zero,r22
81110238:	d8802305 	stb	r2,140(sp)
8111023c:	003f3f06 	br	8110ff3c <__reset+0xfb0eff3c>
81110240:	0005883a 	mov	r2,zero
81110244:	003f5206 	br	8110ff90 <__reset+0xfb0eff90>
81110248:	90a4703a 	and	r18,r18,r2
8111024c:	903f4e26 	beq	r18,zero,8110ff88 <__reset+0xfb0eff88>
81110250:	003f4a06 	br	8110ff7c <__reset+0xfb0eff7c>
81110254:	00800084 	movi	r2,2
81110258:	10c5c83a 	sub	r2,r2,r3
8111025c:	003f8406 	br	81110070 <__reset+0xfb0f0070>
81110260:	d8802d17 	ldw	r2,180(sp)
81110264:	d9002d17 	ldw	r4,180(sp)
81110268:	ac400043 	ldbu	r17,1(r21)
8111026c:	10800017 	ldw	r2,0(r2)
81110270:	582b883a 	mov	r21,r11
81110274:	d8802915 	stw	r2,164(sp)
81110278:	20800104 	addi	r2,r4,4
8111027c:	d9002917 	ldw	r4,164(sp)
81110280:	d8802d15 	stw	r2,180(sp)
81110284:	203e7a0e 	bge	r4,zero,8110fc70 <__reset+0xfb0efc70>
81110288:	8c403fcc 	andi	r17,r17,255
8111028c:	00bfffc4 	movi	r2,-1
81110290:	8c40201c 	xori	r17,r17,128
81110294:	d8802915 	stw	r2,164(sp)
81110298:	8c7fe004 	addi	r17,r17,-128
8111029c:	00380706 	br	8110e2bc <__reset+0xfb0ee2bc>
811102a0:	d8c02917 	ldw	r3,164(sp)
811102a4:	18c00084 	addi	r3,r3,2
811102a8:	d8c02e15 	stw	r3,184(sp)
811102ac:	1805883a 	mov	r2,r3
811102b0:	183d960e 	bge	r3,zero,8110f90c <__reset+0xfb0ef90c>
811102b4:	003fd606 	br	81110210 <__reset+0xfb0f0210>
811102b8:	0005883a 	mov	r2,zero
811102bc:	003f8e06 	br	811100f8 <__reset+0xfb0f00f8>
811102c0:	9080004c 	andi	r2,r18,1
811102c4:	103f811e 	bne	r2,zero,811100cc <__reset+0xfb0f00cc>
811102c8:	d8802117 	ldw	r2,132(sp)
811102cc:	1405c83a 	sub	r2,r2,r16
811102d0:	d8803315 	stw	r2,204(sp)
811102d4:	b47ef326 	beq	r22,r17,8110fea4 <__reset+0xfb0efea4>
811102d8:	dd802617 	ldw	r22,152(sp)
811102dc:	003f1106 	br	8110ff24 <__reset+0xfb0eff24>
811102e0:	d9c02785 	stb	r7,158(sp)
811102e4:	00390406 	br	8110e6f8 <__reset+0xfb0ee6f8>
811102e8:	d9c02785 	stb	r7,158(sp)
811102ec:	0038d306 	br	8110e63c <__reset+0xfb0ee63c>
811102f0:	d9c02785 	stb	r7,158(sp)
811102f4:	003a6106 	br	8110ec7c <__reset+0xfb0eec7c>
811102f8:	d9c02785 	stb	r7,158(sp)
811102fc:	003af806 	br	8110eee0 <__reset+0xfb0eeee0>
81110300:	0005883a 	mov	r2,zero
81110304:	003d7e06 	br	8110f900 <__reset+0xfb0ef900>
81110308:	d8802344 	addi	r2,sp,141
8111030c:	003f1306 	br	8110ff5c <__reset+0xfb0eff5c>
81110310:	d9c02785 	stb	r7,158(sp)
81110314:	00392306 	br	8110e7a4 <__reset+0xfb0ee7a4>
81110318:	d9c02785 	stb	r7,158(sp)
8111031c:	003aa906 	br	8110edc4 <__reset+0xfb0eedc4>
81110320:	d9c02785 	stb	r7,158(sp)
81110324:	003a3d06 	br	8110ec1c <__reset+0xfb0eec1c>
81110328:	d9c02785 	stb	r7,158(sp)
8111032c:	003aca06 	br	8110ee58 <__reset+0xfb0eee58>

81110330 <__vfprintf_internal>:
81110330:	00a044f4 	movhi	r2,33043
81110334:	10976404 	addi	r2,r2,23952
81110338:	300f883a 	mov	r7,r6
8111033c:	280d883a 	mov	r6,r5
81110340:	200b883a 	mov	r5,r4
81110344:	11000017 	ldw	r4,0(r2)
81110348:	110e1381 	jmpi	8110e138 <___vfprintf_internal_r>

8111034c <__sbprintf>:
8111034c:	2880030b 	ldhu	r2,12(r5)
81110350:	2ac01917 	ldw	r11,100(r5)
81110354:	2a80038b 	ldhu	r10,14(r5)
81110358:	2a400717 	ldw	r9,28(r5)
8111035c:	2a000917 	ldw	r8,36(r5)
81110360:	defee204 	addi	sp,sp,-1144
81110364:	00c10004 	movi	r3,1024
81110368:	dc011a15 	stw	r16,1128(sp)
8111036c:	10bfff4c 	andi	r2,r2,65533
81110370:	2821883a 	mov	r16,r5
81110374:	d8cb883a 	add	r5,sp,r3
81110378:	dc811c15 	stw	r18,1136(sp)
8111037c:	dc411b15 	stw	r17,1132(sp)
81110380:	dfc11d15 	stw	ra,1140(sp)
81110384:	2025883a 	mov	r18,r4
81110388:	d881030d 	sth	r2,1036(sp)
8111038c:	dac11915 	stw	r11,1124(sp)
81110390:	da81038d 	sth	r10,1038(sp)
81110394:	da410715 	stw	r9,1052(sp)
81110398:	da010915 	stw	r8,1060(sp)
8111039c:	dec10015 	stw	sp,1024(sp)
811103a0:	dec10415 	stw	sp,1040(sp)
811103a4:	d8c10215 	stw	r3,1032(sp)
811103a8:	d8c10515 	stw	r3,1044(sp)
811103ac:	d8010615 	stw	zero,1048(sp)
811103b0:	110e1380 	call	8110e138 <___vfprintf_internal_r>
811103b4:	1023883a 	mov	r17,r2
811103b8:	10000416 	blt	r2,zero,811103cc <__sbprintf+0x80>
811103bc:	d9410004 	addi	r5,sp,1024
811103c0:	9009883a 	mov	r4,r18
811103c4:	11139400 	call	81113940 <_fflush_r>
811103c8:	10000d1e 	bne	r2,zero,81110400 <__sbprintf+0xb4>
811103cc:	d881030b 	ldhu	r2,1036(sp)
811103d0:	1080100c 	andi	r2,r2,64
811103d4:	10000326 	beq	r2,zero,811103e4 <__sbprintf+0x98>
811103d8:	8080030b 	ldhu	r2,12(r16)
811103dc:	10801014 	ori	r2,r2,64
811103e0:	8080030d 	sth	r2,12(r16)
811103e4:	8805883a 	mov	r2,r17
811103e8:	dfc11d17 	ldw	ra,1140(sp)
811103ec:	dc811c17 	ldw	r18,1136(sp)
811103f0:	dc411b17 	ldw	r17,1132(sp)
811103f4:	dc011a17 	ldw	r16,1128(sp)
811103f8:	dec11e04 	addi	sp,sp,1144
811103fc:	f800283a 	ret
81110400:	047fffc4 	movi	r17,-1
81110404:	003ff106 	br	811103cc <__reset+0xfb0f03cc>

81110408 <__svfscanf_r>:
81110408:	2880030b 	ldhu	r2,12(r5)
8111040c:	deff4b04 	addi	sp,sp,-724
81110410:	df00b315 	stw	fp,716(sp)
81110414:	dd80b115 	stw	r22,708(sp)
81110418:	dfc0b415 	stw	ra,720(sp)
8111041c:	ddc0b215 	stw	r23,712(sp)
81110420:	dd40b015 	stw	r21,704(sp)
81110424:	dd00af15 	stw	r20,700(sp)
81110428:	dcc0ae15 	stw	r19,696(sp)
8111042c:	dc80ad15 	stw	r18,692(sp)
81110430:	dc40ac15 	stw	r17,688(sp)
81110434:	dc00ab15 	stw	r16,684(sp)
81110438:	10c8000c 	andi	r3,r2,8192
8111043c:	d9c09c15 	stw	r7,624(sp)
81110440:	2839883a 	mov	fp,r5
81110444:	202d883a 	mov	r22,r4
81110448:	1800061e 	bne	r3,zero,81110464 <__svfscanf_r+0x5c>
8111044c:	29001917 	ldw	r4,100(r5)
81110450:	00f7ffc4 	movi	r3,-8193
81110454:	10880014 	ori	r2,r2,8192
81110458:	20c6703a 	and	r3,r4,r3
8111045c:	2880030d 	sth	r2,12(r5)
81110460:	28c01915 	stw	r3,100(r5)
81110464:	30800003 	ldbu	r2,0(r6)
81110468:	0021883a 	mov	r16,zero
8111046c:	05e044f4 	movhi	r23,33043
81110470:	d800a115 	stw	zero,644(sp)
81110474:	d8009e15 	stw	zero,632(sp)
81110478:	d800a015 	stw	zero,640(sp)
8111047c:	d8809b15 	stw	r2,620(sp)
81110480:	bdd76704 	addi	r23,r23,23964
81110484:	8025883a 	mov	r18,r16
81110488:	35000044 	addi	r20,r6,1
8111048c:	10001e26 	beq	r2,zero,81110508 <__svfscanf_r+0x100>
81110490:	b9c00017 	ldw	r7,0(r23)
81110494:	3887883a 	add	r3,r7,r2
81110498:	18c00043 	ldbu	r3,1(r3)
8111049c:	18c0020c 	andi	r3,r3,8
811104a0:	18001b26 	beq	r3,zero,81110510 <__svfscanf_r+0x108>
811104a4:	e0800117 	ldw	r2,4(fp)
811104a8:	00800e0e 	bge	zero,r2,811104e4 <__svfscanf_r+0xdc>
811104ac:	e0c00017 	ldw	r3,0(fp)
811104b0:	b9000017 	ldw	r4,0(r23)
811104b4:	18800003 	ldbu	r2,0(r3)
811104b8:	2085883a 	add	r2,r4,r2
811104bc:	10800043 	ldbu	r2,1(r2)
811104c0:	1080020c 	andi	r2,r2,8
811104c4:	10000b26 	beq	r2,zero,811104f4 <__svfscanf_r+0xec>
811104c8:	e0800117 	ldw	r2,4(fp)
811104cc:	18c00044 	addi	r3,r3,1
811104d0:	e0c00015 	stw	r3,0(fp)
811104d4:	10bfffc4 	addi	r2,r2,-1
811104d8:	e0800115 	stw	r2,4(fp)
811104dc:	94800044 	addi	r18,r18,1
811104e0:	00bff216 	blt	zero,r2,811104ac <__reset+0xfb0f04ac>
811104e4:	e00b883a 	mov	r5,fp
811104e8:	b009883a 	mov	r4,r22
811104ec:	110b6b80 	call	8110b6b8 <__srefill_r>
811104f0:	103fee26 	beq	r2,zero,811104ac <__reset+0xfb0f04ac>
811104f4:	a00d883a 	mov	r6,r20
811104f8:	30800003 	ldbu	r2,0(r6)
811104fc:	35000044 	addi	r20,r6,1
81110500:	d8809b15 	stw	r2,620(sp)
81110504:	103fe21e 	bne	r2,zero,81110490 <__reset+0xfb0f0490>
81110508:	d880a017 	ldw	r2,640(sp)
8111050c:	00009906 	br	81110774 <__svfscanf_r+0x36c>
81110510:	00c00944 	movi	r3,37
81110514:	10c0881e 	bne	r2,r3,81110738 <__svfscanf_r+0x330>
81110518:	30c00043 	ldbu	r3,1(r6)
8111051c:	0023883a 	mov	r17,zero
81110520:	0027883a 	mov	r19,zero
81110524:	01001e04 	movi	r4,120
81110528:	01401b04 	movi	r5,108
8111052c:	a1800044 	addi	r6,r20,1
81110530:	20c0a236 	bltu	r4,r3,811107bc <__svfscanf_r+0x3b4>
81110534:	180490ba 	slli	r2,r3,2
81110538:	02204474 	movhi	r8,33041
8111053c:	42015304 	addi	r8,r8,1356
81110540:	1205883a 	add	r2,r2,r8
81110544:	10800017 	ldw	r2,0(r2)
81110548:	1000683a 	jmp	r2
8111054c:	81110770 	cmpltui	r4,r16,17437
81110550:	811107bc 	xorhi	r4,r16,17438
81110554:	811107bc 	xorhi	r4,r16,17438
81110558:	811107bc 	xorhi	r4,r16,17438
8111055c:	811107bc 	xorhi	r4,r16,17438
81110560:	811107bc 	xorhi	r4,r16,17438
81110564:	811107bc 	xorhi	r4,r16,17438
81110568:	811107bc 	xorhi	r4,r16,17438
8111056c:	811107bc 	xorhi	r4,r16,17438
81110570:	811107bc 	xorhi	r4,r16,17438
81110574:	811107bc 	xorhi	r4,r16,17438
81110578:	811107bc 	xorhi	r4,r16,17438
8111057c:	811107bc 	xorhi	r4,r16,17438
81110580:	811107bc 	xorhi	r4,r16,17438
81110584:	811107bc 	xorhi	r4,r16,17438
81110588:	811107bc 	xorhi	r4,r16,17438
8111058c:	811107bc 	xorhi	r4,r16,17438
81110590:	811107bc 	xorhi	r4,r16,17438
81110594:	811107bc 	xorhi	r4,r16,17438
81110598:	811107bc 	xorhi	r4,r16,17438
8111059c:	811107bc 	xorhi	r4,r16,17438
811105a0:	811107bc 	xorhi	r4,r16,17438
811105a4:	811107bc 	xorhi	r4,r16,17438
811105a8:	811107bc 	xorhi	r4,r16,17438
811105ac:	811107bc 	xorhi	r4,r16,17438
811105b0:	811107bc 	xorhi	r4,r16,17438
811105b4:	811107bc 	xorhi	r4,r16,17438
811105b8:	811107bc 	xorhi	r4,r16,17438
811105bc:	811107bc 	xorhi	r4,r16,17438
811105c0:	811107bc 	xorhi	r4,r16,17438
811105c4:	811107bc 	xorhi	r4,r16,17438
811105c8:	811107bc 	xorhi	r4,r16,17438
811105cc:	811107bc 	xorhi	r4,r16,17438
811105d0:	811107bc 	xorhi	r4,r16,17438
811105d4:	811107bc 	xorhi	r4,r16,17438
811105d8:	811107bc 	xorhi	r4,r16,17438
811105dc:	811107bc 	xorhi	r4,r16,17438
811105e0:	81110730 	cmpltui	r4,r16,17436
811105e4:	811107bc 	xorhi	r4,r16,17438
811105e8:	811107bc 	xorhi	r4,r16,17438
811105ec:	811107bc 	xorhi	r4,r16,17438
811105f0:	811107bc 	xorhi	r4,r16,17438
811105f4:	811107a4 	muli	r4,r16,17438
811105f8:	811107bc 	xorhi	r4,r16,17438
811105fc:	811107bc 	xorhi	r4,r16,17438
81110600:	811107bc 	xorhi	r4,r16,17438
81110604:	811107bc 	xorhi	r4,r16,17438
81110608:	811107bc 	xorhi	r4,r16,17438
8111060c:	811108d8 	cmpnei	r4,r16,17443
81110610:	811108d8 	cmpnei	r4,r16,17443
81110614:	811108d8 	cmpnei	r4,r16,17443
81110618:	811108d8 	cmpnei	r4,r16,17443
8111061c:	811108d8 	cmpnei	r4,r16,17443
81110620:	811108d8 	cmpnei	r4,r16,17443
81110624:	811108d8 	cmpnei	r4,r16,17443
81110628:	811108d8 	cmpnei	r4,r16,17443
8111062c:	811108d8 	cmpnei	r4,r16,17443
81110630:	811108d8 	cmpnei	r4,r16,17443
81110634:	811107bc 	xorhi	r4,r16,17438
81110638:	811107bc 	xorhi	r4,r16,17438
8111063c:	811107bc 	xorhi	r4,r16,17438
81110640:	811107bc 	xorhi	r4,r16,17438
81110644:	811107bc 	xorhi	r4,r16,17438
81110648:	811107bc 	xorhi	r4,r16,17438
8111064c:	811107bc 	xorhi	r4,r16,17438
81110650:	811107bc 	xorhi	r4,r16,17438
81110654:	811107bc 	xorhi	r4,r16,17438
81110658:	811107bc 	xorhi	r4,r16,17438
8111065c:	811108ac 	andhi	r4,r16,17442
81110660:	8111095c 	xori	r4,r16,17445
81110664:	811107bc 	xorhi	r4,r16,17438
81110668:	8111095c 	xori	r4,r16,17445
8111066c:	811107bc 	xorhi	r4,r16,17438
81110670:	811107bc 	xorhi	r4,r16,17438
81110674:	811107bc 	xorhi	r4,r16,17438
81110678:	811107bc 	xorhi	r4,r16,17438
8111067c:	81110948 	cmpgei	r4,r16,17445
81110680:	811107bc 	xorhi	r4,r16,17438
81110684:	811107bc 	xorhi	r4,r16,17438
81110688:	8111091c 	xori	r4,r16,17444
8111068c:	811107bc 	xorhi	r4,r16,17438
81110690:	811107bc 	xorhi	r4,r16,17438
81110694:	811107bc 	xorhi	r4,r16,17438
81110698:	811107bc 	xorhi	r4,r16,17438
8111069c:	811107bc 	xorhi	r4,r16,17438
811106a0:	811107bc 	xorhi	r4,r16,17438
811106a4:	811107bc 	xorhi	r4,r16,17438
811106a8:	811107bc 	xorhi	r4,r16,17438
811106ac:	811108f4 	orhi	r4,r16,17443
811106b0:	811107bc 	xorhi	r4,r16,17438
811106b4:	811107bc 	xorhi	r4,r16,17438
811106b8:	81110a90 	cmplti	r4,r16,17450
811106bc:	811107bc 	xorhi	r4,r16,17438
811106c0:	811107bc 	xorhi	r4,r16,17438
811106c4:	811107bc 	xorhi	r4,r16,17438
811106c8:	811107bc 	xorhi	r4,r16,17438
811106cc:	811107bc 	xorhi	r4,r16,17438
811106d0:	811107bc 	xorhi	r4,r16,17438
811106d4:	811107bc 	xorhi	r4,r16,17438
811106d8:	81110a14 	ori	r4,r16,17448
811106dc:	811109ec 	andhi	r4,r16,17447
811106e0:	8111095c 	xori	r4,r16,17445
811106e4:	8111095c 	xori	r4,r16,17445
811106e8:	8111095c 	xori	r4,r16,17445
811106ec:	811109d8 	cmpnei	r4,r16,17447
811106f0:	81110b1c 	xori	r4,r16,17452
811106f4:	811107bc 	xorhi	r4,r16,17438
811106f8:	811107bc 	xorhi	r4,r16,17438
811106fc:	811109c4 	addi	r4,r16,17447
81110700:	811107bc 	xorhi	r4,r16,17438
81110704:	81110994 	ori	r4,r16,17446
81110708:	81110970 	cmpltui	r4,r16,17445
8111070c:	81110880 	call	88111088 <__reset+0x20f1088>
81110710:	811107bc 	xorhi	r4,r16,17438
81110714:	811107bc 	xorhi	r4,r16,17438
81110718:	8111086c 	andhi	r4,r16,17441
8111071c:	811107bc 	xorhi	r4,r16,17438
81110720:	811107f4 	orhi	r4,r16,17439
81110724:	811107bc 	xorhi	r4,r16,17438
81110728:	811107bc 	xorhi	r4,r16,17438
8111072c:	811108f4 	orhi	r4,r16,17443
81110730:	d9809d15 	stw	r6,628(sp)
81110734:	3029883a 	mov	r20,r6
81110738:	e0800117 	ldw	r2,4(fp)
8111073c:	0081aa0e 	bge	zero,r2,81110de8 <__svfscanf_r+0x9e0>
81110740:	e0800017 	ldw	r2,0(fp)
81110744:	a0ffffc3 	ldbu	r3,-1(r20)
81110748:	11000003 	ldbu	r4,0(r2)
8111074c:	20ff6e1e 	bne	r4,r3,81110508 <__reset+0xfb0f0508>
81110750:	e0c00117 	ldw	r3,4(fp)
81110754:	10800044 	addi	r2,r2,1
81110758:	e0800015 	stw	r2,0(fp)
8111075c:	18bfffc4 	addi	r2,r3,-1
81110760:	e0800115 	stw	r2,4(fp)
81110764:	94800044 	addi	r18,r18,1
81110768:	a00d883a 	mov	r6,r20
8111076c:	003f6206 	br	811104f8 <__reset+0xfb0f04f8>
81110770:	00bfffc4 	movi	r2,-1
81110774:	dfc0b417 	ldw	ra,720(sp)
81110778:	df00b317 	ldw	fp,716(sp)
8111077c:	ddc0b217 	ldw	r23,712(sp)
81110780:	dd80b117 	ldw	r22,708(sp)
81110784:	dd40b017 	ldw	r21,704(sp)
81110788:	dd00af17 	ldw	r20,700(sp)
8111078c:	dcc0ae17 	ldw	r19,696(sp)
81110790:	dc80ad17 	ldw	r18,692(sp)
81110794:	dc40ac17 	ldw	r17,688(sp)
81110798:	dc00ab17 	ldw	r16,684(sp)
8111079c:	dec0b504 	addi	sp,sp,724
811107a0:	f800283a 	ret
811107a4:	a0800043 	ldbu	r2,1(r20)
811107a8:	3029883a 	mov	r20,r6
811107ac:	8c400414 	ori	r17,r17,16
811107b0:	10c03fcc 	andi	r3,r2,255
811107b4:	a1800044 	addi	r6,r20,1
811107b8:	20ff5e2e 	bgeu	r4,r3,81110534 <__reset+0xfb0f0534>
811107bc:	38c7883a 	add	r3,r7,r3
811107c0:	18800043 	ldbu	r2,1(r3)
811107c4:	d9809d15 	stw	r6,628(sp)
811107c8:	00c00044 	movi	r3,1
811107cc:	108000cc 	andi	r2,r2,3
811107d0:	10c18f26 	beq	r2,r3,81110e10 <__svfscanf_r+0xa08>
811107d4:	e0800117 	ldw	r2,4(fp)
811107d8:	00808716 	blt	zero,r2,811109f8 <__svfscanf_r+0x5f0>
811107dc:	e00b883a 	mov	r5,fp
811107e0:	b009883a 	mov	r4,r22
811107e4:	110b6b80 	call	8110b6b8 <__srefill_r>
811107e8:	1001431e 	bne	r2,zero,81110cf8 <__svfscanf_r+0x8f0>
811107ec:	b9c00017 	ldw	r7,0(r23)
811107f0:	00008106 	br	811109f8 <__svfscanf_r+0x5f0>
811107f4:	e0800117 	ldw	r2,4(fp)
811107f8:	d9809d15 	stw	r6,628(sp)
811107fc:	0081a30e 	bge	zero,r2,81110e8c <__svfscanf_r+0xa84>
81110800:	00a044b4 	movhi	r2,33042
81110804:	10a0f704 	addi	r2,r2,-31780
81110808:	02000284 	movi	r8,10
8111080c:	d880a115 	stw	r2,644(sp)
81110810:	da009e15 	stw	r8,632(sp)
81110814:	050000c4 	movi	r20,3
81110818:	e0c00017 	ldw	r3,0(fp)
8111081c:	00000206 	br	81110828 <__svfscanf_r+0x420>
81110820:	18c00044 	addi	r3,r3,1
81110824:	e0c00015 	stw	r3,0(fp)
81110828:	19000003 	ldbu	r4,0(r3)
8111082c:	20803fcc 	andi	r2,r4,255
81110830:	3885883a 	add	r2,r7,r2
81110834:	10800043 	ldbu	r2,1(r2)
81110838:	1140020c 	andi	r5,r2,8
8111083c:	2801ab26 	beq	r5,zero,81110eec <__svfscanf_r+0xae4>
81110840:	e0800117 	ldw	r2,4(fp)
81110844:	94800044 	addi	r18,r18,1
81110848:	10bfffc4 	addi	r2,r2,-1
8111084c:	e0800115 	stw	r2,4(fp)
81110850:	00bff316 	blt	zero,r2,81110820 <__reset+0xfb0f0820>
81110854:	e00b883a 	mov	r5,fp
81110858:	b009883a 	mov	r4,r22
8111085c:	110b6b80 	call	8110b6b8 <__srefill_r>
81110860:	1001251e 	bne	r2,zero,81110cf8 <__svfscanf_r+0x8f0>
81110864:	b9c00017 	ldw	r7,0(r23)
81110868:	003feb06 	br	81110818 <__reset+0xfb0f0818>
8111086c:	e0800117 	ldw	r2,4(fp)
81110870:	d9809d15 	stw	r6,628(sp)
81110874:	00818b0e 	bge	zero,r2,81110ea4 <__svfscanf_r+0xa9c>
81110878:	05000084 	movi	r20,2
8111087c:	003fe606 	br	81110818 <__reset+0xfb0f0818>
81110880:	e0800117 	ldw	r2,4(fp)
81110884:	d9809d15 	stw	r6,628(sp)
81110888:	8c408814 	ori	r17,r17,544
8111088c:	00801d0e 	bge	zero,r2,81110904 <__svfscanf_r+0x4fc>
81110890:	00a044b4 	movhi	r2,33042
81110894:	10a0f704 	addi	r2,r2,-31780
81110898:	02000404 	movi	r8,16
8111089c:	d880a115 	stw	r2,644(sp)
811108a0:	da009e15 	stw	r8,632(sp)
811108a4:	050000c4 	movi	r20,3
811108a8:	003fdb06 	br	81110818 <__reset+0xfb0f0818>
811108ac:	e0800117 	ldw	r2,4(fp)
811108b0:	d9809d15 	stw	r6,628(sp)
811108b4:	8c400054 	ori	r17,r17,1
811108b8:	00bfc80e 	bge	zero,r2,811107dc <__reset+0xfb0f07dc>
811108bc:	00e04474 	movhi	r3,33041
811108c0:	18ef4304 	addi	r3,r3,-17140
811108c4:	02000284 	movi	r8,10
811108c8:	d8c0a115 	stw	r3,644(sp)
811108cc:	da009e15 	stw	r8,632(sp)
811108d0:	050000c4 	movi	r20,3
811108d4:	003fd006 	br	81110818 <__reset+0xfb0f0818>
811108d8:	9cc002a4 	muli	r19,r19,10
811108dc:	a0800043 	ldbu	r2,1(r20)
811108e0:	3029883a 	mov	r20,r6
811108e4:	98e7883a 	add	r19,r19,r3
811108e8:	9cfff404 	addi	r19,r19,-48
811108ec:	10c03fcc 	andi	r3,r2,255
811108f0:	003f0e06 	br	8111052c <__reset+0xfb0f052c>
811108f4:	e0800117 	ldw	r2,4(fp)
811108f8:	d9809d15 	stw	r6,628(sp)
811108fc:	8c408014 	ori	r17,r17,512
81110900:	00bfe316 	blt	zero,r2,81110890 <__reset+0xfb0f0890>
81110904:	e00b883a 	mov	r5,fp
81110908:	b009883a 	mov	r4,r22
8111090c:	110b6b80 	call	8110b6b8 <__srefill_r>
81110910:	1000f91e 	bne	r2,zero,81110cf8 <__svfscanf_r+0x8f0>
81110914:	b9c00017 	ldw	r7,0(r23)
81110918:	003fdd06 	br	81110890 <__reset+0xfb0f0890>
8111091c:	e0800117 	ldw	r2,4(fp)
81110920:	d9809d15 	stw	r6,628(sp)
81110924:	8c400054 	ori	r17,r17,1
81110928:	0080140e 	bge	zero,r2,8111097c <__svfscanf_r+0x574>
8111092c:	00a044b4 	movhi	r2,33042
81110930:	10a0f704 	addi	r2,r2,-31780
81110934:	02000204 	movi	r8,8
81110938:	d880a115 	stw	r2,644(sp)
8111093c:	da009e15 	stw	r8,632(sp)
81110940:	050000c4 	movi	r20,3
81110944:	003fb406 	br	81110818 <__reset+0xfb0f0818>
81110948:	a0800043 	ldbu	r2,1(r20)
8111094c:	8c400094 	ori	r17,r17,2
81110950:	3029883a 	mov	r20,r6
81110954:	10c03fcc 	andi	r3,r2,255
81110958:	003ef406 	br	8111052c <__reset+0xfb0f052c>
8111095c:	e0800117 	ldw	r2,4(fp)
81110960:	d9809d15 	stw	r6,628(sp)
81110964:	0081420e 	bge	zero,r2,81110e70 <__svfscanf_r+0xa68>
81110968:	05000104 	movi	r20,4
8111096c:	003faa06 	br	81110818 <__reset+0xfb0f0818>
81110970:	e0800117 	ldw	r2,4(fp)
81110974:	d9809d15 	stw	r6,628(sp)
81110978:	00bfec16 	blt	zero,r2,8111092c <__reset+0xfb0f092c>
8111097c:	e00b883a 	mov	r5,fp
81110980:	b009883a 	mov	r4,r22
81110984:	110b6b80 	call	8110b6b8 <__srefill_r>
81110988:	1000db1e 	bne	r2,zero,81110cf8 <__svfscanf_r+0x8f0>
8111098c:	b9c00017 	ldw	r7,0(r23)
81110990:	003fe606 	br	8111092c <__reset+0xfb0f092c>
81110994:	d9809d15 	stw	r6,628(sp)
81110998:	8880040c 	andi	r2,r17,16
8111099c:	10009c1e 	bne	r2,zero,81110c10 <__svfscanf_r+0x808>
811109a0:	8880010c 	andi	r2,r17,4
811109a4:	10011e26 	beq	r2,zero,81110e20 <__svfscanf_r+0xa18>
811109a8:	da009c17 	ldw	r8,624(sp)
811109ac:	3029883a 	mov	r20,r6
811109b0:	40800017 	ldw	r2,0(r8)
811109b4:	42000104 	addi	r8,r8,4
811109b8:	da009c15 	stw	r8,624(sp)
811109bc:	1480000d 	sth	r18,0(r2)
811109c0:	003ecc06 	br	811104f4 <__reset+0xfb0f04f4>
811109c4:	a0c00043 	ldbu	r3,1(r20)
811109c8:	19410c26 	beq	r3,r5,81110dfc <__svfscanf_r+0x9f4>
811109cc:	8c400054 	ori	r17,r17,1
811109d0:	3029883a 	mov	r20,r6
811109d4:	003ed506 	br	8111052c <__reset+0xfb0f052c>
811109d8:	a0800043 	ldbu	r2,1(r20)
811109dc:	8c400114 	ori	r17,r17,4
811109e0:	3029883a 	mov	r20,r6
811109e4:	10c03fcc 	andi	r3,r2,255
811109e8:	003ed006 	br	8111052c <__reset+0xfb0f052c>
811109ec:	e0800117 	ldw	r2,4(fp)
811109f0:	d9809d15 	stw	r6,628(sp)
811109f4:	00bf790e 	bge	zero,r2,811107dc <__reset+0xfb0f07dc>
811109f8:	00a04474 	movhi	r2,33041
811109fc:	10af4304 	addi	r2,r2,-17140
81110a00:	02000284 	movi	r8,10
81110a04:	d880a115 	stw	r2,644(sp)
81110a08:	da009e15 	stw	r8,632(sp)
81110a0c:	050000c4 	movi	r20,3
81110a10:	003f8106 	br	81110818 <__reset+0xfb0f0818>
81110a14:	e0800117 	ldw	r2,4(fp)
81110a18:	d9809d15 	stw	r6,628(sp)
81110a1c:	0080c40e 	bge	zero,r2,81110d30 <__svfscanf_r+0x928>
81110a20:	9800011e 	bne	r19,zero,81110a28 <__svfscanf_r+0x620>
81110a24:	04c00044 	movi	r19,1
81110a28:	8880004c 	andi	r2,r17,1
81110a2c:	1000441e 	bne	r2,zero,81110b40 <__svfscanf_r+0x738>
81110a30:	8c40040c 	andi	r17,r17,16
81110a34:	8800da26 	beq	r17,zero,81110da0 <__svfscanf_r+0x998>
81110a38:	0021883a 	mov	r16,zero
81110a3c:	00000806 	br	81110a60 <__svfscanf_r+0x658>
81110a40:	1887883a 	add	r3,r3,r2
81110a44:	e00b883a 	mov	r5,fp
81110a48:	b009883a 	mov	r4,r22
81110a4c:	e0c00015 	stw	r3,0(fp)
81110a50:	80a1883a 	add	r16,r16,r2
81110a54:	98a7c83a 	sub	r19,r19,r2
81110a58:	110b6b80 	call	8110b6b8 <__srefill_r>
81110a5c:	1000ca1e 	bne	r2,zero,81110d88 <__svfscanf_r+0x980>
81110a60:	e0800117 	ldw	r2,4(fp)
81110a64:	e0c00017 	ldw	r3,0(fp)
81110a68:	14fff516 	blt	r2,r19,81110a40 <__reset+0xfb0f0a40>
81110a6c:	14c5c83a 	sub	r2,r2,r19
81110a70:	1cd5883a 	add	r10,r3,r19
81110a74:	84e1883a 	add	r16,r16,r19
81110a78:	e0800115 	stw	r2,4(fp)
81110a7c:	e2800015 	stw	r10,0(fp)
81110a80:	dd009d17 	ldw	r20,628(sp)
81110a84:	9425883a 	add	r18,r18,r16
81110a88:	a00d883a 	mov	r6,r20
81110a8c:	003e9a06 	br	811104f8 <__reset+0xfb0f04f8>
81110a90:	300b883a 	mov	r5,r6
81110a94:	d9005884 	addi	r4,sp,354
81110a98:	d9809d15 	stw	r6,628(sp)
81110a9c:	11168b00 	call	811168b0 <__sccl>
81110aa0:	1029883a 	mov	r20,r2
81110aa4:	e0800117 	ldw	r2,4(fp)
81110aa8:	0081050e 	bge	zero,r2,81110ec0 <__svfscanf_r+0xab8>
81110aac:	e1000017 	ldw	r4,0(fp)
81110ab0:	20800003 	ldbu	r2,0(r4)
81110ab4:	98005926 	beq	r19,zero,81110c1c <__svfscanf_r+0x814>
81110ab8:	8c40040c 	andi	r17,r17,16
81110abc:	88005a26 	beq	r17,zero,81110c28 <__svfscanf_r+0x820>
81110ac0:	9823883a 	mov	r17,r19
81110ac4:	0021883a 	mov	r16,zero
81110ac8:	00000106 	br	81110ad0 <__svfscanf_r+0x6c8>
81110acc:	20800003 	ldbu	r2,0(r4)
81110ad0:	10803fcc 	andi	r2,r2,255
81110ad4:	d8c05884 	addi	r3,sp,354
81110ad8:	1885883a 	add	r2,r3,r2
81110adc:	10800007 	ldb	r2,0(r2)
81110ae0:	1000ad26 	beq	r2,zero,81110d98 <__svfscanf_r+0x990>
81110ae4:	e0800117 	ldw	r2,4(fp)
81110ae8:	21000044 	addi	r4,r4,1
81110aec:	84000044 	addi	r16,r16,1
81110af0:	10bfffc4 	addi	r2,r2,-1
81110af4:	e0800115 	stw	r2,4(fp)
81110af8:	e1000015 	stw	r4,0(fp)
81110afc:	84c0a026 	beq	r16,r19,81110d80 <__svfscanf_r+0x978>
81110b00:	00bff216 	blt	zero,r2,81110acc <__reset+0xfb0f0acc>
81110b04:	e00b883a 	mov	r5,fp
81110b08:	b009883a 	mov	r4,r22
81110b0c:	110b6b80 	call	8110b6b8 <__srefill_r>
81110b10:	10009a1e 	bne	r2,zero,81110d7c <__svfscanf_r+0x974>
81110b14:	e1000017 	ldw	r4,0(fp)
81110b18:	003fec06 	br	81110acc <__reset+0xfb0f0acc>
81110b1c:	e0800117 	ldw	r2,4(fp)
81110b20:	d9809d15 	stw	r6,628(sp)
81110b24:	0080eb0e 	bge	zero,r2,81110ed4 <__svfscanf_r+0xacc>
81110b28:	00a04474 	movhi	r2,33041
81110b2c:	10af4304 	addi	r2,r2,-17140
81110b30:	d880a115 	stw	r2,644(sp)
81110b34:	d8009e15 	stw	zero,632(sp)
81110b38:	050000c4 	movi	r20,3
81110b3c:	003f3606 	br	81110818 <__reset+0xfb0f0818>
81110b40:	dd409904 	addi	r21,sp,612
81110b44:	8c40040c 	andi	r17,r17,16
81110b48:	01800204 	movi	r6,8
81110b4c:	000b883a 	mov	r5,zero
81110b50:	a809883a 	mov	r4,r21
81110b54:	dc409f15 	stw	r17,636(sp)
81110b58:	110b3b40 	call	8110b3b4 <memset>
81110b5c:	dc409f17 	ldw	r17,636(sp)
81110b60:	88006e26 	beq	r17,zero,81110d1c <__svfscanf_r+0x914>
81110b64:	0029883a 	mov	r20,zero
81110b68:	0023883a 	mov	r17,zero
81110b6c:	1114bfc0 	call	81114bfc <__locale_mb_cur_max>
81110b70:	14406126 	beq	r2,r17,81110cf8 <__svfscanf_r+0x8f0>
81110b74:	e0800017 	ldw	r2,0(fp)
81110b78:	e0c00117 	ldw	r3,4(fp)
81110b7c:	d9000104 	addi	r4,sp,4
81110b80:	12000003 	ldbu	r8,0(r2)
81110b84:	18ffffc4 	addi	r3,r3,-1
81110b88:	10800044 	addi	r2,r2,1
81110b8c:	e0c00115 	stw	r3,4(fp)
81110b90:	e0800015 	stw	r2,0(fp)
81110b94:	8c000044 	addi	r16,r17,1
81110b98:	dd400015 	stw	r21,0(sp)
81110b9c:	2463883a 	add	r17,r4,r17
81110ba0:	200d883a 	mov	r6,r4
81110ba4:	a00b883a 	mov	r5,r20
81110ba8:	800f883a 	mov	r7,r16
81110bac:	b009883a 	mov	r4,r22
81110bb0:	8a000005 	stb	r8,0(r17)
81110bb4:	1114cb00 	call	81114cb0 <_mbrtowc_r>
81110bb8:	017fffc4 	movi	r5,-1
81110bbc:	11404e26 	beq	r2,r5,81110cf8 <__svfscanf_r+0x8f0>
81110bc0:	1000601e 	bne	r2,zero,81110d44 <__svfscanf_r+0x93c>
81110bc4:	da009f17 	ldw	r8,636(sp)
81110bc8:	4000641e 	bne	r8,zero,81110d5c <__svfscanf_r+0x954>
81110bcc:	a0000015 	stw	zero,0(r20)
81110bd0:	9425883a 	add	r18,r18,r16
81110bd4:	9967883a 	add	r19,r19,r5
81110bd8:	a5000104 	addi	r20,r20,4
81110bdc:	e0800117 	ldw	r2,4(fp)
81110be0:	0023883a 	mov	r17,zero
81110be4:	00804b16 	blt	zero,r2,81110d14 <__svfscanf_r+0x90c>
81110be8:	e00b883a 	mov	r5,fp
81110bec:	b009883a 	mov	r4,r22
81110bf0:	110b6b80 	call	8110b6b8 <__srefill_r>
81110bf4:	10004726 	beq	r2,zero,81110d14 <__svfscanf_r+0x90c>
81110bf8:	88003f1e 	bne	r17,zero,81110cf8 <__svfscanf_r+0x8f0>
81110bfc:	d8c09f17 	ldw	r3,636(sp)
81110c00:	1800031e 	bne	r3,zero,81110c10 <__svfscanf_r+0x808>
81110c04:	da00a017 	ldw	r8,640(sp)
81110c08:	42000044 	addi	r8,r8,1
81110c0c:	da00a015 	stw	r8,640(sp)
81110c10:	dd009d17 	ldw	r20,628(sp)
81110c14:	a00d883a 	mov	r6,r20
81110c18:	003e3706 	br	811104f8 <__reset+0xfb0f04f8>
81110c1c:	8c40040c 	andi	r17,r17,16
81110c20:	04ffffc4 	movi	r19,-1
81110c24:	883fa61e 	bne	r17,zero,81110ac0 <__reset+0xfb0f0ac0>
81110c28:	da009c17 	ldw	r8,624(sp)
81110c2c:	9abfffc4 	addi	r10,r19,-1
81110c30:	44000017 	ldw	r16,0(r8)
81110c34:	44400104 	addi	r17,r8,4
81110c38:	8007883a 	mov	r3,r16
81110c3c:	82ab883a 	add	r21,r16,r10
81110c40:	00000306 	br	81110c50 <__svfscanf_r+0x848>
81110c44:	e1000017 	ldw	r4,0(fp)
81110c48:	9807883a 	mov	r3,r19
81110c4c:	20800003 	ldbu	r2,0(r4)
81110c50:	10803fcc 	andi	r2,r2,255
81110c54:	d9405884 	addi	r5,sp,354
81110c58:	2885883a 	add	r2,r5,r2
81110c5c:	10800007 	ldb	r2,0(r2)
81110c60:	10004b26 	beq	r2,zero,81110d90 <__svfscanf_r+0x988>
81110c64:	e0800117 	ldw	r2,4(fp)
81110c68:	21400044 	addi	r5,r4,1
81110c6c:	e1400015 	stw	r5,0(fp)
81110c70:	10bfffc4 	addi	r2,r2,-1
81110c74:	e0800115 	stw	r2,4(fp)
81110c78:	20800003 	ldbu	r2,0(r4)
81110c7c:	1cc00044 	addi	r19,r3,1
81110c80:	18800005 	stb	r2,0(r3)
81110c84:	1d400726 	beq	r3,r21,81110ca4 <__svfscanf_r+0x89c>
81110c88:	e0800117 	ldw	r2,4(fp)
81110c8c:	00bfed16 	blt	zero,r2,81110c44 <__reset+0xfb0f0c44>
81110c90:	e00b883a 	mov	r5,fp
81110c94:	b009883a 	mov	r4,r22
81110c98:	110b6b80 	call	8110b6b8 <__srefill_r>
81110c9c:	103fe926 	beq	r2,zero,81110c44 <__reset+0xfb0f0c44>
81110ca0:	84c01526 	beq	r16,r19,81110cf8 <__svfscanf_r+0x8f0>
81110ca4:	9c21c83a 	sub	r16,r19,r16
81110ca8:	803e1726 	beq	r16,zero,81110508 <__reset+0xfb0f0508>
81110cac:	da00a017 	ldw	r8,640(sp)
81110cb0:	98000005 	stb	zero,0(r19)
81110cb4:	dc409c15 	stw	r17,624(sp)
81110cb8:	42000044 	addi	r8,r8,1
81110cbc:	da00a015 	stw	r8,640(sp)
81110cc0:	9425883a 	add	r18,r18,r16
81110cc4:	a00d883a 	mov	r6,r20
81110cc8:	003e0b06 	br	811104f8 <__reset+0xfb0f04f8>
81110ccc:	017fff84 	movi	r5,-2
81110cd0:	11439b1e 	bne	r2,r5,81111b40 <__svfscanf_r+0x1738>
81110cd4:	8821883a 	mov	r16,r17
81110cd8:	e0800117 	ldw	r2,4(fp)
81110cdc:	0082e516 	blt	zero,r2,81111874 <__svfscanf_r+0x146c>
81110ce0:	e00b883a 	mov	r5,fp
81110ce4:	b009883a 	mov	r4,r22
81110ce8:	110b6b80 	call	8110b6b8 <__srefill_r>
81110cec:	1002e126 	beq	r2,zero,81111874 <__svfscanf_r+0x146c>
81110cf0:	dc409f17 	ldw	r17,636(sp)
81110cf4:	8002e826 	beq	r16,zero,81111898 <__svfscanf_r+0x1490>
81110cf8:	da00a017 	ldw	r8,640(sp)
81110cfc:	403e9c26 	beq	r8,zero,81110770 <__reset+0xfb0f0770>
81110d00:	e080030b 	ldhu	r2,12(fp)
81110d04:	1080100c 	andi	r2,r2,64
81110d08:	103e991e 	bne	r2,zero,81110770 <__reset+0xfb0f0770>
81110d0c:	4005883a 	mov	r2,r8
81110d10:	003e9806 	br	81110774 <__reset+0xfb0f0774>
81110d14:	983f951e 	bne	r19,zero,81110b6c <__reset+0xfb0f0b6c>
81110d18:	003fb806 	br	81110bfc <__reset+0xfb0f0bfc>
81110d1c:	da009c17 	ldw	r8,624(sp)
81110d20:	45000017 	ldw	r20,0(r8)
81110d24:	42000104 	addi	r8,r8,4
81110d28:	da009c15 	stw	r8,624(sp)
81110d2c:	003f8e06 	br	81110b68 <__reset+0xfb0f0b68>
81110d30:	e00b883a 	mov	r5,fp
81110d34:	b009883a 	mov	r4,r22
81110d38:	110b6b80 	call	8110b6b8 <__srefill_r>
81110d3c:	103f3826 	beq	r2,zero,81110a20 <__reset+0xfb0f0a20>
81110d40:	003fed06 	br	81110cf8 <__reset+0xfb0f0cf8>
81110d44:	00ffff84 	movi	r3,-2
81110d48:	10c0071e 	bne	r2,r3,81110d68 <__svfscanf_r+0x960>
81110d4c:	e0800117 	ldw	r2,4(fp)
81110d50:	8023883a 	mov	r17,r16
81110d54:	00bf8516 	blt	zero,r2,81110b6c <__reset+0xfb0f0b6c>
81110d58:	003fa306 	br	81110be8 <__reset+0xfb0f0be8>
81110d5c:	9425883a 	add	r18,r18,r16
81110d60:	9cffffc4 	addi	r19,r19,-1
81110d64:	003f9d06 	br	81110bdc <__reset+0xfb0f0bdc>
81110d68:	da009f17 	ldw	r8,636(sp)
81110d6c:	9425883a 	add	r18,r18,r16
81110d70:	9cffffc4 	addi	r19,r19,-1
81110d74:	403f9826 	beq	r8,zero,81110bd8 <__reset+0xfb0f0bd8>
81110d78:	003f9806 	br	81110bdc <__reset+0xfb0f0bdc>
81110d7c:	8023883a 	mov	r17,r16
81110d80:	8821883a 	mov	r16,r17
81110d84:	003fce06 	br	81110cc0 <__reset+0xfb0f0cc0>
81110d88:	803f3d1e 	bne	r16,zero,81110a80 <__reset+0xfb0f0a80>
81110d8c:	003fda06 	br	81110cf8 <__reset+0xfb0f0cf8>
81110d90:	1827883a 	mov	r19,r3
81110d94:	003fc306 	br	81110ca4 <__reset+0xfb0f0ca4>
81110d98:	803fc91e 	bne	r16,zero,81110cc0 <__reset+0xfb0f0cc0>
81110d9c:	003dda06 	br	81110508 <__reset+0xfb0f0508>
81110da0:	da009c17 	ldw	r8,624(sp)
81110da4:	df000015 	stw	fp,0(sp)
81110da8:	980f883a 	mov	r7,r19
81110dac:	41400017 	ldw	r5,0(r8)
81110db0:	01800044 	movi	r6,1
81110db4:	b009883a 	mov	r4,r22
81110db8:	1113e180 	call	81113e18 <_fread_r>
81110dbc:	da009c17 	ldw	r8,624(sp)
81110dc0:	40c00104 	addi	r3,r8,4
81110dc4:	103fcc26 	beq	r2,zero,81110cf8 <__reset+0xfb0f0cf8>
81110dc8:	da00a017 	ldw	r8,640(sp)
81110dcc:	dd009d17 	ldw	r20,628(sp)
81110dd0:	90a5883a 	add	r18,r18,r2
81110dd4:	42000044 	addi	r8,r8,1
81110dd8:	da00a015 	stw	r8,640(sp)
81110ddc:	d8c09c15 	stw	r3,624(sp)
81110de0:	a00d883a 	mov	r6,r20
81110de4:	003dc406 	br	811104f8 <__reset+0xfb0f04f8>
81110de8:	e00b883a 	mov	r5,fp
81110dec:	b009883a 	mov	r4,r22
81110df0:	110b6b80 	call	8110b6b8 <__srefill_r>
81110df4:	103e5226 	beq	r2,zero,81110740 <__reset+0xfb0f0740>
81110df8:	003fbf06 	br	81110cf8 <__reset+0xfb0f0cf8>
81110dfc:	a0800083 	ldbu	r2,2(r20)
81110e00:	8c400094 	ori	r17,r17,2
81110e04:	a5000084 	addi	r20,r20,2
81110e08:	10c03fcc 	andi	r3,r2,255
81110e0c:	003dc706 	br	8111052c <__reset+0xfb0f052c>
81110e10:	e0800117 	ldw	r2,4(fp)
81110e14:	88e2b03a 	or	r17,r17,r3
81110e18:	00bef716 	blt	zero,r2,811109f8 <__reset+0xfb0f09f8>
81110e1c:	003e6f06 	br	811107dc <__reset+0xfb0f07dc>
81110e20:	8880004c 	andi	r2,r17,1
81110e24:	10000b1e 	bne	r2,zero,81110e54 <__svfscanf_r+0xa4c>
81110e28:	8c40008c 	andi	r17,r17,2
81110e2c:	88000926 	beq	r17,zero,81110e54 <__svfscanf_r+0xa4c>
81110e30:	da009c17 	ldw	r8,624(sp)
81110e34:	9007d7fa 	srai	r3,r18,31
81110e38:	dd009d17 	ldw	r20,628(sp)
81110e3c:	40800017 	ldw	r2,0(r8)
81110e40:	42000104 	addi	r8,r8,4
81110e44:	da009c15 	stw	r8,624(sp)
81110e48:	14800015 	stw	r18,0(r2)
81110e4c:	10c00115 	stw	r3,4(r2)
81110e50:	003da806 	br	811104f4 <__reset+0xfb0f04f4>
81110e54:	da009c17 	ldw	r8,624(sp)
81110e58:	dd009d17 	ldw	r20,628(sp)
81110e5c:	40800017 	ldw	r2,0(r8)
81110e60:	42000104 	addi	r8,r8,4
81110e64:	da009c15 	stw	r8,624(sp)
81110e68:	14800015 	stw	r18,0(r2)
81110e6c:	003da106 	br	811104f4 <__reset+0xfb0f04f4>
81110e70:	e00b883a 	mov	r5,fp
81110e74:	b009883a 	mov	r4,r22
81110e78:	110b6b80 	call	8110b6b8 <__srefill_r>
81110e7c:	103f9e1e 	bne	r2,zero,81110cf8 <__reset+0xfb0f0cf8>
81110e80:	b9c00017 	ldw	r7,0(r23)
81110e84:	05000104 	movi	r20,4
81110e88:	003e6306 	br	81110818 <__reset+0xfb0f0818>
81110e8c:	e00b883a 	mov	r5,fp
81110e90:	b009883a 	mov	r4,r22
81110e94:	110b6b80 	call	8110b6b8 <__srefill_r>
81110e98:	103f971e 	bne	r2,zero,81110cf8 <__reset+0xfb0f0cf8>
81110e9c:	b9c00017 	ldw	r7,0(r23)
81110ea0:	003e5706 	br	81110800 <__reset+0xfb0f0800>
81110ea4:	e00b883a 	mov	r5,fp
81110ea8:	b009883a 	mov	r4,r22
81110eac:	110b6b80 	call	8110b6b8 <__srefill_r>
81110eb0:	103f911e 	bne	r2,zero,81110cf8 <__reset+0xfb0f0cf8>
81110eb4:	b9c00017 	ldw	r7,0(r23)
81110eb8:	05000084 	movi	r20,2
81110ebc:	003e5606 	br	81110818 <__reset+0xfb0f0818>
81110ec0:	e00b883a 	mov	r5,fp
81110ec4:	b009883a 	mov	r4,r22
81110ec8:	110b6b80 	call	8110b6b8 <__srefill_r>
81110ecc:	103ef726 	beq	r2,zero,81110aac <__reset+0xfb0f0aac>
81110ed0:	003f8906 	br	81110cf8 <__reset+0xfb0f0cf8>
81110ed4:	e00b883a 	mov	r5,fp
81110ed8:	b009883a 	mov	r4,r22
81110edc:	110b6b80 	call	8110b6b8 <__srefill_r>
81110ee0:	103f851e 	bne	r2,zero,81110cf8 <__reset+0xfb0f0cf8>
81110ee4:	b9c00017 	ldw	r7,0(r23)
81110ee8:	003f0f06 	br	81110b28 <__reset+0xfb0f0b28>
81110eec:	014000c4 	movi	r5,3
81110ef0:	a1414a26 	beq	r20,r5,8111141c <__svfscanf_r+0x1014>
81110ef4:	01000104 	movi	r4,4
81110ef8:	a101f11e 	bne	r20,r4,811116c0 <__svfscanf_r+0x12b8>
81110efc:	b009883a 	mov	r4,r22
81110f00:	1114c200 	call	81114c20 <_localeconv_r>
81110f04:	10800017 	ldw	r2,0(r2)
81110f08:	98ffffc4 	addi	r3,r19,-1
81110f0c:	d880a315 	stw	r2,652(sp)
81110f10:	00805704 	movi	r2,348
81110f14:	10c21e2e 	bgeu	r2,r3,81111790 <__svfscanf_r+0x1388>
81110f18:	9cffa8c4 	addi	r19,r19,-349
81110f1c:	dcc0a215 	stw	r19,648(sp)
81110f20:	04c05744 	movi	r19,349
81110f24:	8d01e014 	ori	r20,r17,1920
81110f28:	0023883a 	mov	r17,zero
81110f2c:	dc000104 	addi	r16,sp,4
81110f30:	8805883a 	mov	r2,r17
81110f34:	0019883a 	mov	r12,zero
81110f38:	8023883a 	mov	r17,r16
81110f3c:	b007883a 	mov	r3,r22
81110f40:	9821883a 	mov	r16,r19
81110f44:	002b883a 	mov	r21,zero
81110f48:	d800a515 	stw	zero,660(sp)
81110f4c:	d800a415 	stw	zero,656(sp)
81110f50:	d8009f15 	stw	zero,636(sp)
81110f54:	01c01384 	movi	r7,78
81110f58:	602d883a 	mov	r22,r12
81110f5c:	1027883a 	mov	r19,r2
81110f60:	e1000017 	ldw	r4,0(fp)
81110f64:	21400003 	ldbu	r5,0(r4)
81110f68:	28bff544 	addi	r2,r5,-43
81110f6c:	10803fcc 	andi	r2,r2,255
81110f70:	38810e36 	bltu	r7,r2,811113ac <__svfscanf_r+0xfa4>
81110f74:	100490ba 	slli	r2,r2,2
81110f78:	01a04474 	movhi	r6,33041
81110f7c:	3183e304 	addi	r6,r6,3980
81110f80:	1185883a 	add	r2,r2,r6
81110f84:	10800017 	ldw	r2,0(r2)
81110f88:	1000683a 	jmp	r2
81110f8c:	81111284 	addi	r4,r16,17482
81110f90:	811113ac 	andhi	r4,r16,17486
81110f94:	81111284 	addi	r4,r16,17482
81110f98:	811113ac 	andhi	r4,r16,17486
81110f9c:	811113ac 	andhi	r4,r16,17486
81110fa0:	81111258 	cmpnei	r4,r16,17481
81110fa4:	811110c8 	cmpgei	r4,r16,17475
81110fa8:	811110c8 	cmpgei	r4,r16,17475
81110fac:	811110c8 	cmpgei	r4,r16,17475
81110fb0:	811110c8 	cmpgei	r4,r16,17475
81110fb4:	811110c8 	cmpgei	r4,r16,17475
81110fb8:	811110c8 	cmpgei	r4,r16,17475
81110fbc:	811110c8 	cmpgei	r4,r16,17475
81110fc0:	811110c8 	cmpgei	r4,r16,17475
81110fc4:	811110c8 	cmpgei	r4,r16,17475
81110fc8:	811113ac 	andhi	r4,r16,17486
81110fcc:	811113ac 	andhi	r4,r16,17486
81110fd0:	811113ac 	andhi	r4,r16,17486
81110fd4:	811113ac 	andhi	r4,r16,17486
81110fd8:	811113ac 	andhi	r4,r16,17486
81110fdc:	811113ac 	andhi	r4,r16,17486
81110fe0:	811113ac 	andhi	r4,r16,17486
81110fe4:	8111139c 	xori	r4,r16,17486
81110fe8:	811113ac 	andhi	r4,r16,17486
81110fec:	811113ac 	andhi	r4,r16,17486
81110ff0:	811113ac 	andhi	r4,r16,17486
81110ff4:	81111358 	cmpnei	r4,r16,17485
81110ff8:	8111133c 	xorhi	r4,r16,17484
81110ffc:	811113ac 	andhi	r4,r16,17486
81111000:	811113ac 	andhi	r4,r16,17486
81111004:	81111308 	cmpgei	r4,r16,17484
81111008:	811113ac 	andhi	r4,r16,17486
8111100c:	811113ac 	andhi	r4,r16,17486
81111010:	811113ac 	andhi	r4,r16,17486
81111014:	811113ac 	andhi	r4,r16,17486
81111018:	811112d0 	cmplti	r4,r16,17483
8111101c:	811113ac 	andhi	r4,r16,17486
81111020:	811113ac 	andhi	r4,r16,17486
81111024:	811113ac 	andhi	r4,r16,17486
81111028:	811113ac 	andhi	r4,r16,17486
8111102c:	811113ac 	andhi	r4,r16,17486
81111030:	811112b4 	orhi	r4,r16,17482
81111034:	811113ac 	andhi	r4,r16,17486
81111038:	811113ac 	andhi	r4,r16,17486
8111103c:	811113ac 	andhi	r4,r16,17486
81111040:	811113ac 	andhi	r4,r16,17486
81111044:	81111298 	cmpnei	r4,r16,17482
81111048:	811113ac 	andhi	r4,r16,17486
8111104c:	811113ac 	andhi	r4,r16,17486
81111050:	811113ac 	andhi	r4,r16,17486
81111054:	811113ac 	andhi	r4,r16,17486
81111058:	811113ac 	andhi	r4,r16,17486
8111105c:	811113ac 	andhi	r4,r16,17486
81111060:	811113ac 	andhi	r4,r16,17486
81111064:	8111139c 	xori	r4,r16,17486
81111068:	811113ac 	andhi	r4,r16,17486
8111106c:	811113ac 	andhi	r4,r16,17486
81111070:	811113ac 	andhi	r4,r16,17486
81111074:	81111358 	cmpnei	r4,r16,17485
81111078:	8111133c 	xorhi	r4,r16,17484
8111107c:	811113ac 	andhi	r4,r16,17486
81111080:	811113ac 	andhi	r4,r16,17486
81111084:	81111308 	cmpgei	r4,r16,17484
81111088:	811113ac 	andhi	r4,r16,17486
8111108c:	811113ac 	andhi	r4,r16,17486
81111090:	811113ac 	andhi	r4,r16,17486
81111094:	811113ac 	andhi	r4,r16,17486
81111098:	811112d0 	cmplti	r4,r16,17483
8111109c:	811113ac 	andhi	r4,r16,17486
811110a0:	811113ac 	andhi	r4,r16,17486
811110a4:	811113ac 	andhi	r4,r16,17486
811110a8:	811113ac 	andhi	r4,r16,17486
811110ac:	811113ac 	andhi	r4,r16,17486
811110b0:	811112b4 	orhi	r4,r16,17482
811110b4:	811113ac 	andhi	r4,r16,17486
811110b8:	811113ac 	andhi	r4,r16,17486
811110bc:	811113ac 	andhi	r4,r16,17486
811110c0:	811113ac 	andhi	r4,r16,17486
811110c4:	81111298 	cmpnei	r4,r16,17482
811110c8:	a8803fcc 	andi	r2,r21,255
811110cc:	1080201c 	xori	r2,r2,128
811110d0:	10bfe004 	addi	r2,r2,-128
811110d4:	b085883a 	add	r2,r22,r2
811110d8:	10000d1e 	bne	r2,zero,81111110 <__svfscanf_r+0xd08>
811110dc:	00bf9fc4 	movi	r2,-385
811110e0:	a0a8703a 	and	r20,r20,r2
811110e4:	89400005 	stb	r5,0(r17)
811110e8:	8c400044 	addi	r17,r17,1
811110ec:	e0800117 	ldw	r2,4(fp)
811110f0:	843fffc4 	addi	r16,r16,-1
811110f4:	94800044 	addi	r18,r18,1
811110f8:	10bfffc4 	addi	r2,r2,-1
811110fc:	e0800115 	stw	r2,4(fp)
81111100:	0080b40e 	bge	zero,r2,811113d4 <__svfscanf_r+0xfcc>
81111104:	21000044 	addi	r4,r4,1
81111108:	e1000015 	stw	r4,0(fp)
8111110c:	803f941e 	bne	r16,zero,81110f60 <__reset+0xfb0f0f60>
81111110:	8821883a 	mov	r16,r17
81111114:	b019883a 	mov	r12,r22
81111118:	9823883a 	mov	r17,r19
8111111c:	182d883a 	mov	r22,r3
81111120:	9801961e 	bne	r19,zero,8111177c <__svfscanf_r+0x1374>
81111124:	633fffc4 	addi	r12,r12,-1
81111128:	00800044 	movi	r2,1
8111112c:	1302882e 	bgeu	r2,r12,81111b50 <__svfscanf_r+0x1748>
81111130:	a8803fcc 	andi	r2,r21,255
81111134:	1080201c 	xori	r2,r2,128
81111138:	10bfe004 	addi	r2,r2,-128
8111113c:	113fffc4 	addi	r4,r2,-1
81111140:	01400184 	movi	r5,6
81111144:	29001136 	bltu	r5,r4,8111118c <__svfscanf_r+0xd84>
81111148:	01000084 	movi	r4,2
8111114c:	2082900e 	bge	r4,r2,81111b90 <__svfscanf_r+0x1788>
81111150:	00c000c4 	movi	r3,3
81111154:	10c00d26 	beq	r2,r3,8111118c <__svfscanf_r+0xd84>
81111158:	9425c83a 	sub	r18,r18,r16
8111115c:	1827883a 	mov	r19,r3
81111160:	843fffc4 	addi	r16,r16,-1
81111164:	81400007 	ldb	r5,0(r16)
81111168:	e00d883a 	mov	r6,fp
8111116c:	b009883a 	mov	r4,r22
81111170:	1119dfc0 	call	81119dfc <_ungetc_r>
81111174:	a8bfffc4 	addi	r2,r21,-1
81111178:	10c03fcc 	andi	r3,r2,255
8111117c:	8493883a 	add	r9,r16,r18
81111180:	102b883a 	mov	r21,r2
81111184:	98fff636 	bltu	r19,r3,81111160 <__reset+0xfb0f1160>
81111188:	4825883a 	mov	r18,r9
8111118c:	a080400c 	andi	r2,r20,256
81111190:	10001426 	beq	r2,zero,811111e4 <__svfscanf_r+0xddc>
81111194:	a081000c 	andi	r2,r20,1024
81111198:	1002571e 	bne	r2,zero,81111af8 <__svfscanf_r+0x16f0>
8111119c:	817fffc7 	ldb	r5,-1(r16)
811111a0:	00801944 	movi	r2,101
811111a4:	84ffffc4 	addi	r19,r16,-1
811111a8:	957fffc4 	addi	r21,r18,-1
811111ac:	28800826 	beq	r5,r2,811111d0 <__svfscanf_r+0xdc8>
811111b0:	00801144 	movi	r2,69
811111b4:	28800626 	beq	r5,r2,811111d0 <__svfscanf_r+0xdc8>
811111b8:	e00d883a 	mov	r6,fp
811111bc:	b009883a 	mov	r4,r22
811111c0:	1119dfc0 	call	81119dfc <_ungetc_r>
811111c4:	817fff87 	ldb	r5,-2(r16)
811111c8:	84ffff84 	addi	r19,r16,-2
811111cc:	957fff84 	addi	r21,r18,-2
811111d0:	e00d883a 	mov	r6,fp
811111d4:	b009883a 	mov	r4,r22
811111d8:	1119dfc0 	call	81119dfc <_ungetc_r>
811111dc:	a825883a 	mov	r18,r21
811111e0:	9821883a 	mov	r16,r19
811111e4:	a080040c 	andi	r2,r20,16
811111e8:	103e891e 	bne	r2,zero,81110c10 <__reset+0xfb0f0c10>
811111ec:	80000005 	stb	zero,0(r16)
811111f0:	a081800c 	andi	r2,r20,1536
811111f4:	01010004 	movi	r4,1024
811111f8:	1101dd26 	beq	r2,r4,81111970 <__svfscanf_r+0x1568>
811111fc:	da00a417 	ldw	r8,656(sp)
81111200:	4001e71e 	bne	r8,zero,811119a0 <__svfscanf_r+0x1598>
81111204:	000d883a 	mov	r6,zero
81111208:	d9400104 	addi	r5,sp,4
8111120c:	b009883a 	mov	r4,r22
81111210:	11169ec0 	call	811169ec <_strtod_r>
81111214:	1021883a 	mov	r16,r2
81111218:	a080004c 	andi	r2,r20,1
8111121c:	1000021e 	bne	r2,zero,81111228 <__svfscanf_r+0xe20>
81111220:	a2c0008c 	andi	r11,r20,2
81111224:	5801e826 	beq	r11,zero,811119c8 <__svfscanf_r+0x15c0>
81111228:	da009c17 	ldw	r8,624(sp)
8111122c:	40800017 	ldw	r2,0(r8)
81111230:	42000104 	addi	r8,r8,4
81111234:	da009c15 	stw	r8,624(sp)
81111238:	14000015 	stw	r16,0(r2)
8111123c:	10c00115 	stw	r3,4(r2)
81111240:	da00a017 	ldw	r8,640(sp)
81111244:	dd009d17 	ldw	r20,628(sp)
81111248:	42000044 	addi	r8,r8,1
8111124c:	da00a015 	stw	r8,640(sp)
81111250:	a00d883a 	mov	r6,r20
81111254:	003ca806 	br	811104f8 <__reset+0xfb0f04f8>
81111258:	a080400c 	andi	r2,r20,256
8111125c:	103f9a26 	beq	r2,zero,811110c8 <__reset+0xfb0f10c8>
81111260:	da00a217 	ldw	r8,648(sp)
81111264:	00bfdfc4 	movi	r2,-129
81111268:	a0a8703a 	and	r20,r20,r2
8111126c:	9cc00044 	addi	r19,r19,1
81111270:	403f9e26 	beq	r8,zero,811110ec <__reset+0xfb0f10ec>
81111274:	423fffc4 	addi	r8,r8,-1
81111278:	da00a215 	stw	r8,648(sp)
8111127c:	84000044 	addi	r16,r16,1
81111280:	003f9a06 	br	811110ec <__reset+0xfb0f10ec>
81111284:	a080200c 	andi	r2,r20,128
81111288:	103fa126 	beq	r2,zero,81111110 <__reset+0xfb0f1110>
8111128c:	00bfdfc4 	movi	r2,-129
81111290:	a0a8703a 	and	r20,r20,r2
81111294:	003f9306 	br	811110e4 <__reset+0xfb0f10e4>
81111298:	a8803fcc 	andi	r2,r21,255
8111129c:	1080201c 	xori	r2,r2,128
811112a0:	10bfe004 	addi	r2,r2,-128
811112a4:	020001c4 	movi	r8,7
811112a8:	123f991e 	bne	r2,r8,81111110 <__reset+0xfb0f1110>
811112ac:	05400204 	movi	r21,8
811112b0:	003f8c06 	br	811110e4 <__reset+0xfb0f10e4>
811112b4:	a8803fcc 	andi	r2,r21,255
811112b8:	1080201c 	xori	r2,r2,128
811112bc:	10bfe004 	addi	r2,r2,-128
811112c0:	01800184 	movi	r6,6
811112c4:	11bf921e 	bne	r2,r6,81111110 <__reset+0xfb0f1110>
811112c8:	054001c4 	movi	r21,7
811112cc:	003f8506 	br	811110e4 <__reset+0xfb0f10e4>
811112d0:	b000491e 	bne	r22,zero,811113f8 <__svfscanf_r+0xff0>
811112d4:	9800031e 	bne	r19,zero,811112e4 <__svfscanf_r+0xedc>
811112d8:	a081c00c 	andi	r2,r20,1792
811112dc:	0181c004 	movi	r6,1792
811112e0:	11819f26 	beq	r2,r6,81111960 <__svfscanf_r+0x1558>
811112e4:	a8803fcc 	andi	r2,r21,255
811112e8:	1080201c 	xori	r2,r2,128
811112ec:	10bfe004 	addi	r2,r2,-128
811112f0:	01800044 	movi	r6,1
811112f4:	11800226 	beq	r2,r6,81111300 <__svfscanf_r+0xef8>
811112f8:	01800104 	movi	r6,4
811112fc:	11bf841e 	bne	r2,r6,81111110 <__reset+0xfb0f1110>
81111300:	ad400044 	addi	r21,r21,1
81111304:	003f7706 	br	811110e4 <__reset+0xfb0f10e4>
81111308:	a8803fcc 	andi	r2,r21,255
8111130c:	1080201c 	xori	r2,r2,128
81111310:	10bfe004 	addi	r2,r2,-128
81111314:	10003c1e 	bne	r2,zero,81111408 <__svfscanf_r+0x1000>
81111318:	9801141e 	bne	r19,zero,8111176c <__svfscanf_r+0x1364>
8111131c:	a081c00c 	andi	r2,r20,1792
81111320:	0181c004 	movi	r6,1792
81111324:	11818226 	beq	r2,r6,81111930 <__svfscanf_r+0x1528>
81111328:	8821883a 	mov	r16,r17
8111132c:	b019883a 	mov	r12,r22
81111330:	9823883a 	mov	r17,r19
81111334:	182d883a 	mov	r22,r3
81111338:	003f7a06 	br	81111124 <__reset+0xfb0f1124>
8111133c:	a8803fcc 	andi	r2,r21,255
81111340:	1080201c 	xori	r2,r2,128
81111344:	10bfe004 	addi	r2,r2,-128
81111348:	01800084 	movi	r6,2
8111134c:	11bf701e 	bne	r2,r6,81111110 <__reset+0xfb0f1110>
81111350:	054000c4 	movi	r21,3
81111354:	003f6306 	br	811110e4 <__reset+0xfb0f10e4>
81111358:	a081400c 	andi	r2,r20,1280
8111135c:	01810004 	movi	r6,1024
81111360:	11800326 	beq	r2,r6,81111370 <__svfscanf_r+0xf68>
81111364:	a184703a 	and	r2,r20,r6
81111368:	103f6926 	beq	r2,zero,81111110 <__reset+0xfb0f1110>
8111136c:	983fee26 	beq	r19,zero,81111328 <__reset+0xfb0f1328>
81111370:	a080800c 	andi	r2,r20,512
81111374:	1000041e 	bne	r2,zero,81111388 <__svfscanf_r+0xf80>
81111378:	da009f17 	ldw	r8,636(sp)
8111137c:	dc40a515 	stw	r17,660(sp)
81111380:	9a27c83a 	sub	r19,r19,r8
81111384:	dcc0a415 	stw	r19,656(sp)
81111388:	00be1fc4 	movi	r2,-1921
8111138c:	a0a8703a 	and	r20,r20,r2
81111390:	a5006014 	ori	r20,r20,384
81111394:	0027883a 	mov	r19,zero
81111398:	003f5206 	br	811110e4 <__reset+0xfb0f10e4>
8111139c:	00800044 	movi	r2,1
811113a0:	b0bf5b1e 	bne	r22,r2,81111110 <__reset+0xfb0f1110>
811113a4:	05800084 	movi	r22,2
811113a8:	003f4e06 	br	811110e4 <__reset+0xfb0f10e4>
811113ac:	d980a317 	ldw	r6,652(sp)
811113b0:	30800003 	ldbu	r2,0(r6)
811113b4:	29803fcc 	andi	r6,r5,255
811113b8:	30bf551e 	bne	r6,r2,81111110 <__reset+0xfb0f1110>
811113bc:	a080800c 	andi	r2,r20,512
811113c0:	103f5326 	beq	r2,zero,81111110 <__reset+0xfb0f1110>
811113c4:	023f5fc4 	movi	r8,-641
811113c8:	a228703a 	and	r20,r20,r8
811113cc:	dcc09f15 	stw	r19,636(sp)
811113d0:	003f4406 	br	811110e4 <__reset+0xfb0f10e4>
811113d4:	1809883a 	mov	r4,r3
811113d8:	e00b883a 	mov	r5,fp
811113dc:	d8c0a615 	stw	r3,664(sp)
811113e0:	d9c0aa15 	stw	r7,680(sp)
811113e4:	110b6b80 	call	8110b6b8 <__srefill_r>
811113e8:	d8c0a617 	ldw	r3,664(sp)
811113ec:	d9c0aa17 	ldw	r7,680(sp)
811113f0:	103f4626 	beq	r2,zero,8111110c <__reset+0xfb0f110c>
811113f4:	003f4606 	br	81111110 <__reset+0xfb0f1110>
811113f8:	00800084 	movi	r2,2
811113fc:	b0bfb91e 	bne	r22,r2,811112e4 <__reset+0xfb0f12e4>
81111400:	058000c4 	movi	r22,3
81111404:	003f3706 	br	811110e4 <__reset+0xfb0f10e4>
81111408:	018000c4 	movi	r6,3
8111140c:	11bfbc26 	beq	r2,r6,81111300 <__reset+0xfb0f1300>
81111410:	01800144 	movi	r6,5
81111414:	11bfba26 	beq	r2,r6,81111300 <__reset+0xfb0f1300>
81111418:	003f3d06 	br	81111110 <__reset+0xfb0f1110>
8111141c:	98bfffc4 	addi	r2,r19,-1
81111420:	01405704 	movi	r5,348
81111424:	2880d82e 	bgeu	r5,r2,81111788 <__svfscanf_r+0x1380>
81111428:	99ffa8c4 	addi	r7,r19,-349
8111142c:	04c05744 	movi	r19,349
81111430:	8c436014 	ori	r17,r17,3456
81111434:	9013883a 	mov	r9,r18
81111438:	8825883a 	mov	r18,r17
8111143c:	dc409e17 	ldw	r17,632(sp)
81111440:	0029883a 	mov	r20,zero
81111444:	dc000104 	addi	r16,sp,4
81111448:	05401344 	movi	r21,77
8111144c:	02c08004 	movi	r11,512
81111450:	01bf7fc4 	movi	r6,-513
81111454:	023fdfc4 	movi	r8,-129
81111458:	20bff544 	addi	r2,r4,-43
8111145c:	10803fcc 	andi	r2,r2,255
81111460:	a8807236 	bltu	r21,r2,8111162c <__svfscanf_r+0x1224>
81111464:	100490ba 	slli	r2,r2,2
81111468:	01604474 	movhi	r5,33041
8111146c:	29451f04 	addi	r5,r5,5244
81111470:	1145883a 	add	r2,r2,r5
81111474:	10800017 	ldw	r2,0(r2)
81111478:	1000683a 	jmp	r2
8111147c:	811116b0 	cmpltui	r4,r16,17498
81111480:	8111162c 	andhi	r4,r16,17496
81111484:	811116b0 	cmpltui	r4,r16,17498
81111488:	8111162c 	andhi	r4,r16,17496
8111148c:	8111162c 	andhi	r4,r16,17496
81111490:	81111688 	cmpgei	r4,r16,17498
81111494:	81111668 	cmpgeui	r4,r16,17497
81111498:	81111668 	cmpgeui	r4,r16,17497
8111149c:	81111668 	cmpgeui	r4,r16,17497
811114a0:	81111668 	cmpgeui	r4,r16,17497
811114a4:	81111668 	cmpgeui	r4,r16,17497
811114a8:	81111668 	cmpgeui	r4,r16,17497
811114ac:	81111668 	cmpgeui	r4,r16,17497
811114b0:	81111610 	cmplti	r4,r16,17496
811114b4:	81111610 	cmplti	r4,r16,17496
811114b8:	8111162c 	andhi	r4,r16,17496
811114bc:	8111162c 	andhi	r4,r16,17496
811114c0:	8111162c 	andhi	r4,r16,17496
811114c4:	8111162c 	andhi	r4,r16,17496
811114c8:	8111162c 	andhi	r4,r16,17496
811114cc:	8111162c 	andhi	r4,r16,17496
811114d0:	8111162c 	andhi	r4,r16,17496
811114d4:	811115fc 	xorhi	r4,r16,17495
811114d8:	811115fc 	xorhi	r4,r16,17495
811114dc:	811115fc 	xorhi	r4,r16,17495
811114e0:	811115fc 	xorhi	r4,r16,17495
811114e4:	811115fc 	xorhi	r4,r16,17495
811114e8:	811115fc 	xorhi	r4,r16,17495
811114ec:	8111162c 	andhi	r4,r16,17496
811114f0:	8111162c 	andhi	r4,r16,17496
811114f4:	8111162c 	andhi	r4,r16,17496
811114f8:	8111162c 	andhi	r4,r16,17496
811114fc:	8111162c 	andhi	r4,r16,17496
81111500:	8111162c 	andhi	r4,r16,17496
81111504:	8111162c 	andhi	r4,r16,17496
81111508:	8111162c 	andhi	r4,r16,17496
8111150c:	8111162c 	andhi	r4,r16,17496
81111510:	8111162c 	andhi	r4,r16,17496
81111514:	8111162c 	andhi	r4,r16,17496
81111518:	8111162c 	andhi	r4,r16,17496
8111151c:	8111162c 	andhi	r4,r16,17496
81111520:	8111162c 	andhi	r4,r16,17496
81111524:	8111162c 	andhi	r4,r16,17496
81111528:	8111162c 	andhi	r4,r16,17496
8111152c:	8111162c 	andhi	r4,r16,17496
81111530:	811115b4 	orhi	r4,r16,17494
81111534:	8111162c 	andhi	r4,r16,17496
81111538:	8111162c 	andhi	r4,r16,17496
8111153c:	8111162c 	andhi	r4,r16,17496
81111540:	8111162c 	andhi	r4,r16,17496
81111544:	8111162c 	andhi	r4,r16,17496
81111548:	8111162c 	andhi	r4,r16,17496
8111154c:	8111162c 	andhi	r4,r16,17496
81111550:	8111162c 	andhi	r4,r16,17496
81111554:	811115fc 	xorhi	r4,r16,17495
81111558:	811115fc 	xorhi	r4,r16,17495
8111155c:	811115fc 	xorhi	r4,r16,17495
81111560:	811115fc 	xorhi	r4,r16,17495
81111564:	811115fc 	xorhi	r4,r16,17495
81111568:	811115fc 	xorhi	r4,r16,17495
8111156c:	8111162c 	andhi	r4,r16,17496
81111570:	8111162c 	andhi	r4,r16,17496
81111574:	8111162c 	andhi	r4,r16,17496
81111578:	8111162c 	andhi	r4,r16,17496
8111157c:	8111162c 	andhi	r4,r16,17496
81111580:	8111162c 	andhi	r4,r16,17496
81111584:	8111162c 	andhi	r4,r16,17496
81111588:	8111162c 	andhi	r4,r16,17496
8111158c:	8111162c 	andhi	r4,r16,17496
81111590:	8111162c 	andhi	r4,r16,17496
81111594:	8111162c 	andhi	r4,r16,17496
81111598:	8111162c 	andhi	r4,r16,17496
8111159c:	8111162c 	andhi	r4,r16,17496
811115a0:	8111162c 	andhi	r4,r16,17496
811115a4:	8111162c 	andhi	r4,r16,17496
811115a8:	8111162c 	andhi	r4,r16,17496
811115ac:	8111162c 	andhi	r4,r16,17496
811115b0:	811115b4 	orhi	r4,r16,17494
811115b4:	9081800c 	andi	r2,r18,1536
811115b8:	12c01c1e 	bne	r2,r11,8111162c <__svfscanf_r+0x1224>
811115bc:	91a4703a 	and	r18,r18,r6
811115c0:	94814014 	ori	r18,r18,1280
811115c4:	04400404 	movi	r17,16
811115c8:	81000005 	stb	r4,0(r16)
811115cc:	84000044 	addi	r16,r16,1
811115d0:	e0800117 	ldw	r2,4(fp)
811115d4:	10bfffc4 	addi	r2,r2,-1
811115d8:	e0800115 	stw	r2,4(fp)
811115dc:	0080540e 	bge	zero,r2,81111730 <__svfscanf_r+0x1328>
811115e0:	18c00044 	addi	r3,r3,1
811115e4:	e0c00015 	stw	r3,0(fp)
811115e8:	9cffffc4 	addi	r19,r19,-1
811115ec:	98000f26 	beq	r19,zero,8111162c <__svfscanf_r+0x1224>
811115f0:	e0c00017 	ldw	r3,0(fp)
811115f4:	19000003 	ldbu	r4,0(r3)
811115f8:	003f9706 	br	81111458 <__reset+0xfb0f1458>
811115fc:	00800284 	movi	r2,10
81111600:	14400a0e 	bge	r2,r17,8111162c <__svfscanf_r+0x1224>
81111604:	00bd1fc4 	movi	r2,-2945
81111608:	90a4703a 	and	r18,r18,r2
8111160c:	003fee06 	br	811115c8 <__reset+0xfb0f15c8>
81111610:	016044f4 	movhi	r5,33043
81111614:	8c63883a 	add	r17,r17,r17
81111618:	294de484 	addi	r5,r5,14226
8111161c:	2c45883a 	add	r2,r5,r17
81111620:	1440000f 	ldh	r17,0(r2)
81111624:	00800204 	movi	r2,8
81111628:	147ff616 	blt	r2,r17,81111604 <__reset+0xfb0f1604>
8111162c:	dc409e15 	stw	r17,632(sp)
81111630:	9023883a 	mov	r17,r18
81111634:	8880400c 	andi	r2,r17,256
81111638:	4825883a 	mov	r18,r9
8111163c:	10000426 	beq	r2,zero,81111650 <__svfscanf_r+0x1248>
81111640:	d9800104 	addi	r6,sp,4
81111644:	3400be36 	bltu	r6,r16,81111940 <__svfscanf_r+0x1538>
81111648:	da000104 	addi	r8,sp,4
8111164c:	443bae26 	beq	r8,r16,81110508 <__reset+0xfb0f0508>
81111650:	8880040c 	andi	r2,r17,16
81111654:	10009326 	beq	r2,zero,811118a4 <__svfscanf_r+0x149c>
81111658:	d8800104 	addi	r2,sp,4
8111165c:	80a1c83a 	sub	r16,r16,r2
81111660:	8521883a 	add	r16,r16,r20
81111664:	003d0606 	br	81110a80 <__reset+0xfb0f0a80>
81111668:	016044f4 	movhi	r5,33043
8111166c:	8c63883a 	add	r17,r17,r17
81111670:	294de484 	addi	r5,r5,14226
81111674:	2c45883a 	add	r2,r5,r17
81111678:	1440000f 	ldh	r17,0(r2)
8111167c:	00bd1fc4 	movi	r2,-2945
81111680:	90a4703a 	and	r18,r18,r2
81111684:	003fd006 	br	811115c8 <__reset+0xfb0f15c8>
81111688:	9082000c 	andi	r2,r18,2048
8111168c:	103fce26 	beq	r2,zero,811115c8 <__reset+0xfb0f15c8>
81111690:	8800021e 	bne	r17,zero,8111169c <__svfscanf_r+0x1294>
81111694:	94808014 	ori	r18,r18,512
81111698:	04400204 	movi	r17,8
8111169c:	9081000c 	andi	r2,r18,1024
811116a0:	10009426 	beq	r2,zero,811118f4 <__svfscanf_r+0x14ec>
811116a4:	00be9fc4 	movi	r2,-1409
811116a8:	90a4703a 	and	r18,r18,r2
811116ac:	003fc606 	br	811115c8 <__reset+0xfb0f15c8>
811116b0:	9080200c 	andi	r2,r18,128
811116b4:	103fdd26 	beq	r2,zero,8111162c <__reset+0xfb0f162c>
811116b8:	9224703a 	and	r18,r18,r8
811116bc:	003fc206 	br	811115c8 <__reset+0xfb0f15c8>
811116c0:	9800011e 	bne	r19,zero,811116c8 <__svfscanf_r+0x12c0>
811116c4:	04ffffc4 	movi	r19,-1
811116c8:	8900004c 	andi	r4,r17,1
811116cc:	20005b1e 	bne	r4,zero,8111183c <__svfscanf_r+0x1434>
811116d0:	8c40040c 	andi	r17,r17,16
811116d4:	88003026 	beq	r17,zero,81111798 <__svfscanf_r+0x1390>
811116d8:	0021883a 	mov	r16,zero
811116dc:	00000306 	br	811116ec <__svfscanf_r+0x12e4>
811116e0:	18800003 	ldbu	r2,0(r3)
811116e4:	3885883a 	add	r2,r7,r2
811116e8:	10800043 	ldbu	r2,1(r2)
811116ec:	1080020c 	andi	r2,r2,8
811116f0:	103ce31e 	bne	r2,zero,81110a80 <__reset+0xfb0f0a80>
811116f4:	e0800117 	ldw	r2,4(fp)
811116f8:	18c00044 	addi	r3,r3,1
811116fc:	84000044 	addi	r16,r16,1
81111700:	10bfffc4 	addi	r2,r2,-1
81111704:	e0800115 	stw	r2,4(fp)
81111708:	e0c00015 	stw	r3,0(fp)
8111170c:	84fcdc26 	beq	r16,r19,81110a80 <__reset+0xfb0f0a80>
81111710:	00bff316 	blt	zero,r2,811116e0 <__reset+0xfb0f16e0>
81111714:	e00b883a 	mov	r5,fp
81111718:	b009883a 	mov	r4,r22
8111171c:	110b6b80 	call	8110b6b8 <__srefill_r>
81111720:	103cd71e 	bne	r2,zero,81110a80 <__reset+0xfb0f0a80>
81111724:	b9c00017 	ldw	r7,0(r23)
81111728:	e0c00017 	ldw	r3,0(fp)
8111172c:	003fec06 	br	811116e0 <__reset+0xfb0f16e0>
81111730:	e00b883a 	mov	r5,fp
81111734:	b009883a 	mov	r4,r22
81111738:	d980a715 	stw	r6,668(sp)
8111173c:	d9c0aa15 	stw	r7,680(sp)
81111740:	da00a815 	stw	r8,672(sp)
81111744:	da40a915 	stw	r9,676(sp)
81111748:	dac0a615 	stw	r11,664(sp)
8111174c:	110b6b80 	call	8110b6b8 <__srefill_r>
81111750:	d980a717 	ldw	r6,668(sp)
81111754:	d9c0aa17 	ldw	r7,680(sp)
81111758:	da00a817 	ldw	r8,672(sp)
8111175c:	da40a917 	ldw	r9,676(sp)
81111760:	dac0a617 	ldw	r11,664(sp)
81111764:	103fa026 	beq	r2,zero,811115e8 <__reset+0xfb0f15e8>
81111768:	003fb006 	br	8111162c <__reset+0xfb0f162c>
8111176c:	8821883a 	mov	r16,r17
81111770:	b019883a 	mov	r12,r22
81111774:	9823883a 	mov	r17,r19
81111778:	182d883a 	mov	r22,r3
8111177c:	00bfbfc4 	movi	r2,-257
81111780:	a0a8703a 	and	r20,r20,r2
81111784:	003e6706 	br	81111124 <__reset+0xfb0f1124>
81111788:	000f883a 	mov	r7,zero
8111178c:	003f2806 	br	81111430 <__reset+0xfb0f1430>
81111790:	d800a215 	stw	zero,648(sp)
81111794:	003de306 	br	81110f24 <__reset+0xfb0f0f24>
81111798:	da009c17 	ldw	r8,624(sp)
8111179c:	9abfffc4 	addi	r10,r19,-1
811117a0:	44400017 	ldw	r17,0(r8)
811117a4:	44000104 	addi	r16,r8,4
811117a8:	880b883a 	mov	r5,r17
811117ac:	8aa9883a 	add	r20,r17,r10
811117b0:	00000606 	br	811117cc <__svfscanf_r+0x13c4>
811117b4:	e0c00017 	ldw	r3,0(fp)
811117b8:	b9000017 	ldw	r4,0(r23)
811117bc:	a80b883a 	mov	r5,r21
811117c0:	18800003 	ldbu	r2,0(r3)
811117c4:	2085883a 	add	r2,r4,r2
811117c8:	10800043 	ldbu	r2,1(r2)
811117cc:	1080020c 	andi	r2,r2,8
811117d0:	1000551e 	bne	r2,zero,81111928 <__svfscanf_r+0x1520>
811117d4:	e0800117 	ldw	r2,4(fp)
811117d8:	19000044 	addi	r4,r3,1
811117dc:	e1000015 	stw	r4,0(fp)
811117e0:	10bfffc4 	addi	r2,r2,-1
811117e4:	e0800115 	stw	r2,4(fp)
811117e8:	18800003 	ldbu	r2,0(r3)
811117ec:	2d400044 	addi	r21,r5,1
811117f0:	a827883a 	mov	r19,r21
811117f4:	28800005 	stb	r2,0(r5)
811117f8:	2d000626 	beq	r5,r20,81111814 <__svfscanf_r+0x140c>
811117fc:	e0800117 	ldw	r2,4(fp)
81111800:	00bfec16 	blt	zero,r2,811117b4 <__reset+0xfb0f17b4>
81111804:	e00b883a 	mov	r5,fp
81111808:	b009883a 	mov	r4,r22
8111180c:	110b6b80 	call	8110b6b8 <__srefill_r>
81111810:	103fe826 	beq	r2,zero,811117b4 <__reset+0xfb0f17b4>
81111814:	da00a017 	ldw	r8,640(sp)
81111818:	dd009d17 	ldw	r20,628(sp)
8111181c:	9c63c83a 	sub	r17,r19,r17
81111820:	42000044 	addi	r8,r8,1
81111824:	98000005 	stb	zero,0(r19)
81111828:	9465883a 	add	r18,r18,r17
8111182c:	da00a015 	stw	r8,640(sp)
81111830:	dc009c15 	stw	r16,624(sp)
81111834:	a00d883a 	mov	r6,r20
81111838:	003b2f06 	br	811104f8 <__reset+0xfb0f04f8>
8111183c:	dd409904 	addi	r21,sp,612
81111840:	8c40040c 	andi	r17,r17,16
81111844:	01800204 	movi	r6,8
81111848:	000b883a 	mov	r5,zero
8111184c:	a809883a 	mov	r4,r21
81111850:	110b3b40 	call	8110b3b4 <memset>
81111854:	8800401e 	bne	r17,zero,81111958 <__svfscanf_r+0x1550>
81111858:	da009c17 	ldw	r8,624(sp)
8111185c:	45000017 	ldw	r20,0(r8)
81111860:	42000104 	addi	r8,r8,4
81111864:	da009c15 	stw	r8,624(sp)
81111868:	000d883a 	mov	r6,zero
8111186c:	3021883a 	mov	r16,r6
81111870:	dc409f15 	stw	r17,636(sp)
81111874:	e0800017 	ldw	r2,0(fp)
81111878:	b8c00017 	ldw	r3,0(r23)
8111187c:	10800003 	ldbu	r2,0(r2)
81111880:	1885883a 	add	r2,r3,r2
81111884:	10800043 	ldbu	r2,1(r2)
81111888:	1080020c 	andi	r2,r2,8
8111188c:	1000011e 	bne	r2,zero,81111894 <__svfscanf_r+0x148c>
81111890:	9800701e 	bne	r19,zero,81111a54 <__svfscanf_r+0x164c>
81111894:	dc409f17 	ldw	r17,636(sp)
81111898:	883cdd1e 	bne	r17,zero,81110c10 <__reset+0xfb0f0c10>
8111189c:	a0000015 	stw	zero,0(r20)
811118a0:	003cd806 	br	81110c04 <__reset+0xfb0f0c04>
811118a4:	d9c09e17 	ldw	r7,632(sp)
811118a8:	da00a117 	ldw	r8,644(sp)
811118ac:	000d883a 	mov	r6,zero
811118b0:	d9400104 	addi	r5,sp,4
811118b4:	b009883a 	mov	r4,r22
811118b8:	80000005 	stb	zero,0(r16)
811118bc:	403ee83a 	callr	r8
811118c0:	88c0080c 	andi	r3,r17,32
811118c4:	1800121e 	bne	r3,zero,81111910 <__svfscanf_r+0x1508>
811118c8:	88c0010c 	andi	r3,r17,4
811118cc:	18004d26 	beq	r3,zero,81111a04 <__svfscanf_r+0x15fc>
811118d0:	da009c17 	ldw	r8,624(sp)
811118d4:	40c00017 	ldw	r3,0(r8)
811118d8:	42000104 	addi	r8,r8,4
811118dc:	da009c15 	stw	r8,624(sp)
811118e0:	1880000d 	sth	r2,0(r3)
811118e4:	da00a017 	ldw	r8,640(sp)
811118e8:	42000044 	addi	r8,r8,1
811118ec:	da00a015 	stw	r8,640(sp)
811118f0:	003f5906 	br	81111658 <__reset+0xfb0f1658>
811118f4:	00bf1fc4 	movi	r2,-897
811118f8:	90a4703a 	and	r18,r18,r2
811118fc:	38000226 	beq	r7,zero,81111908 <__svfscanf_r+0x1500>
81111900:	39ffffc4 	addi	r7,r7,-1
81111904:	9cc00044 	addi	r19,r19,1
81111908:	a5000044 	addi	r20,r20,1
8111190c:	003f3006 	br	811115d0 <__reset+0xfb0f15d0>
81111910:	da009c17 	ldw	r8,624(sp)
81111914:	40c00017 	ldw	r3,0(r8)
81111918:	42000104 	addi	r8,r8,4
8111191c:	da009c15 	stw	r8,624(sp)
81111920:	18800015 	stw	r2,0(r3)
81111924:	003fef06 	br	811118e4 <__reset+0xfb0f18e4>
81111928:	2827883a 	mov	r19,r5
8111192c:	003fb906 	br	81111814 <__reset+0xfb0f1814>
81111930:	01be1fc4 	movi	r6,-1921
81111934:	a1a8703a 	and	r20,r20,r6
81111938:	05400044 	movi	r21,1
8111193c:	003de906 	br	811110e4 <__reset+0xfb0f10e4>
81111940:	817fffc7 	ldb	r5,-1(r16)
81111944:	e00d883a 	mov	r6,fp
81111948:	b009883a 	mov	r4,r22
8111194c:	843fffc4 	addi	r16,r16,-1
81111950:	1119dfc0 	call	81119dfc <_ungetc_r>
81111954:	003f3c06 	br	81111648 <__reset+0xfb0f1648>
81111958:	dd009b04 	addi	r20,sp,620
8111195c:	003fc206 	br	81111868 <__reset+0xfb0f1868>
81111960:	00be1fc4 	movi	r2,-1921
81111964:	a0a8703a 	and	r20,r20,r2
81111968:	05800044 	movi	r22,1
8111196c:	003ddd06 	br	811110e4 <__reset+0xfb0f10e4>
81111970:	d8c09f17 	ldw	r3,636(sp)
81111974:	88e3c83a 	sub	r17,r17,r3
81111978:	044dc83a 	sub	r6,zero,r17
8111197c:	883e2126 	beq	r17,zero,81111204 <__reset+0xfb0f1204>
81111980:	d88055c4 	addi	r2,sp,343
81111984:	80800136 	bltu	r16,r2,8111198c <__svfscanf_r+0x1584>
81111988:	dc005584 	addi	r16,sp,342
8111198c:	016044f4 	movhi	r5,33043
81111990:	294de304 	addi	r5,r5,14220
81111994:	8009883a 	mov	r4,r16
81111998:	110b9a40 	call	8110b9a4 <sprintf>
8111199c:	003e1906 	br	81111204 <__reset+0xfb0f1204>
811119a0:	d8c0a517 	ldw	r3,660(sp)
811119a4:	000d883a 	mov	r6,zero
811119a8:	01c00284 	movi	r7,10
811119ac:	19400044 	addi	r5,r3,1
811119b0:	b009883a 	mov	r4,r22
811119b4:	110bd0c0 	call	8110bd0c <_strtol_r>
811119b8:	da00a417 	ldw	r8,656(sp)
811119bc:	dc00a517 	ldw	r16,660(sp)
811119c0:	120dc83a 	sub	r6,r2,r8
811119c4:	003fee06 	br	81111980 <__reset+0xfb0f1980>
811119c8:	da009c17 	ldw	r8,624(sp)
811119cc:	180b883a 	mov	r5,r3
811119d0:	8009883a 	mov	r4,r16
811119d4:	45000017 	ldw	r20,0(r8)
811119d8:	44400104 	addi	r17,r8,4
811119dc:	d8c0a615 	stw	r3,664(sp)
811119e0:	111683c0 	call	8111683c <__fpclassifyd>
811119e4:	d8c0a617 	ldw	r3,664(sp)
811119e8:	10006426 	beq	r2,zero,81111b7c <__svfscanf_r+0x1774>
811119ec:	8009883a 	mov	r4,r16
811119f0:	180b883a 	mov	r5,r3
811119f4:	1109f4c0 	call	81109f4c <__truncdfsf2>
811119f8:	a0800015 	stw	r2,0(r20)
811119fc:	dc409c15 	stw	r17,624(sp)
81111a00:	003e0f06 	br	81111240 <__reset+0xfb0f1240>
81111a04:	88c0004c 	andi	r3,r17,1
81111a08:	183fc11e 	bne	r3,zero,81111910 <__reset+0xfb0f1910>
81111a0c:	8c40008c 	andi	r17,r17,2
81111a10:	883fbf26 	beq	r17,zero,81111910 <__reset+0xfb0f1910>
81111a14:	da00a117 	ldw	r8,644(sp)
81111a18:	00a044b4 	movhi	r2,33042
81111a1c:	10a0f704 	addi	r2,r2,-31780
81111a20:	d9c09e17 	ldw	r7,632(sp)
81111a24:	000d883a 	mov	r6,zero
81111a28:	d9400104 	addi	r5,sp,4
81111a2c:	b009883a 	mov	r4,r22
81111a30:	40806226 	beq	r8,r2,81111bbc <__svfscanf_r+0x17b4>
81111a34:	11180fc0 	call	811180fc <_strtoll_r>
81111a38:	da009c17 	ldw	r8,624(sp)
81111a3c:	41000017 	ldw	r4,0(r8)
81111a40:	42000104 	addi	r8,r8,4
81111a44:	da009c15 	stw	r8,624(sp)
81111a48:	20800015 	stw	r2,0(r4)
81111a4c:	20c00115 	stw	r3,4(r4)
81111a50:	003fa406 	br	811118e4 <__reset+0xfb0f18e4>
81111a54:	1114bfc0 	call	81114bfc <__locale_mb_cur_max>
81111a58:	80bca726 	beq	r16,r2,81110cf8 <__reset+0xfb0f0cf8>
81111a5c:	e0800017 	ldw	r2,0(fp)
81111a60:	e1000117 	ldw	r4,4(fp)
81111a64:	d8c00104 	addi	r3,sp,4
81111a68:	12000003 	ldbu	r8,0(r2)
81111a6c:	213fffc4 	addi	r4,r4,-1
81111a70:	10800044 	addi	r2,r2,1
81111a74:	e1000115 	stw	r4,4(fp)
81111a78:	e0800015 	stw	r2,0(fp)
81111a7c:	84400044 	addi	r17,r16,1
81111a80:	dd400015 	stw	r21,0(sp)
81111a84:	1c21883a 	add	r16,r3,r16
81111a88:	b009883a 	mov	r4,r22
81111a8c:	880f883a 	mov	r7,r17
81111a90:	180d883a 	mov	r6,r3
81111a94:	a00b883a 	mov	r5,r20
81111a98:	82000005 	stb	r8,0(r16)
81111a9c:	1114cb00 	call	81114cb0 <_mbrtowc_r>
81111aa0:	013fffc4 	movi	r4,-1
81111aa4:	113c9426 	beq	r2,r4,81110cf8 <__reset+0xfb0f0cf8>
81111aa8:	103c881e 	bne	r2,zero,81110ccc <__reset+0xfb0f0ccc>
81111aac:	a0000015 	stw	zero,0(r20)
81111ab0:	0009883a 	mov	r4,zero
81111ab4:	1114b440 	call	81114b44 <iswspace>
81111ab8:	10001a26 	beq	r2,zero,81111b24 <__svfscanf_r+0x171c>
81111abc:	8821883a 	mov	r16,r17
81111ac0:	dc409f17 	ldw	r17,636(sp)
81111ac4:	803f7426 	beq	r16,zero,81111898 <__reset+0xfb0f1898>
81111ac8:	843fffc4 	addi	r16,r16,-1
81111acc:	d9800104 	addi	r6,sp,4
81111ad0:	342b883a 	add	r21,r6,r16
81111ad4:	00000106 	br	81111adc <__svfscanf_r+0x16d4>
81111ad8:	843fffc4 	addi	r16,r16,-1
81111adc:	a9400003 	ldbu	r5,0(r21)
81111ae0:	e00d883a 	mov	r6,fp
81111ae4:	b009883a 	mov	r4,r22
81111ae8:	1119dfc0 	call	81119dfc <_ungetc_r>
81111aec:	ad7fffc4 	addi	r21,r21,-1
81111af0:	803ff91e 	bne	r16,zero,81111ad8 <__reset+0xfb0f1ad8>
81111af4:	003f6806 	br	81111898 <__reset+0xfb0f1898>
81111af8:	d9800104 	addi	r6,sp,4
81111afc:	802b883a 	mov	r21,r16
81111b00:	343a812e 	bgeu	r6,r16,81110508 <__reset+0xfb0f0508>
81111b04:	ad7fffc4 	addi	r21,r21,-1
81111b08:	a9400007 	ldb	r5,0(r21)
81111b0c:	e00d883a 	mov	r6,fp
81111b10:	b009883a 	mov	r4,r22
81111b14:	1119dfc0 	call	81119dfc <_ungetc_r>
81111b18:	da000104 	addi	r8,sp,4
81111b1c:	457ff91e 	bne	r8,r21,81111b04 <__reset+0xfb0f1b04>
81111b20:	003a7906 	br	81110508 <__reset+0xfb0f0508>
81111b24:	da009f17 	ldw	r8,636(sp)
81111b28:	9465883a 	add	r18,r18,r17
81111b2c:	9cffffc4 	addi	r19,r19,-1
81111b30:	4000051e 	bne	r8,zero,81111b48 <__svfscanf_r+0x1740>
81111b34:	a5000104 	addi	r20,r20,4
81111b38:	0021883a 	mov	r16,zero
81111b3c:	003c6606 	br	81110cd8 <__reset+0xfb0f0cd8>
81111b40:	a1000017 	ldw	r4,0(r20)
81111b44:	003fdb06 	br	81111ab4 <__reset+0xfb0f1ab4>
81111b48:	0021883a 	mov	r16,zero
81111b4c:	003c6206 	br	81110cd8 <__reset+0xfb0f0cd8>
81111b50:	d8800104 	addi	r2,sp,4
81111b54:	802b883a 	mov	r21,r16
81111b58:	143a6b2e 	bgeu	r2,r16,81110508 <__reset+0xfb0f0508>
81111b5c:	ad7fffc4 	addi	r21,r21,-1
81111b60:	a9400007 	ldb	r5,0(r21)
81111b64:	e00d883a 	mov	r6,fp
81111b68:	b009883a 	mov	r4,r22
81111b6c:	1119dfc0 	call	81119dfc <_ungetc_r>
81111b70:	d8c00104 	addi	r3,sp,4
81111b74:	1d7ff91e 	bne	r3,r21,81111b5c <__reset+0xfb0f1b5c>
81111b78:	003a6306 	br	81110508 <__reset+0xfb0f0508>
81111b7c:	0009883a 	mov	r4,zero
81111b80:	11169800 	call	81116980 <nanf>
81111b84:	a0800015 	stw	r2,0(r20)
81111b88:	dc409c15 	stw	r17,624(sp)
81111b8c:	003dac06 	br	81111240 <__reset+0xfb0f1240>
81111b90:	d9000104 	addi	r4,sp,4
81111b94:	802b883a 	mov	r21,r16
81111b98:	243a5b2e 	bgeu	r4,r16,81110508 <__reset+0xfb0f0508>
81111b9c:	ad7fffc4 	addi	r21,r21,-1
81111ba0:	a9400007 	ldb	r5,0(r21)
81111ba4:	e00d883a 	mov	r6,fp
81111ba8:	b009883a 	mov	r4,r22
81111bac:	1119dfc0 	call	81119dfc <_ungetc_r>
81111bb0:	d9400104 	addi	r5,sp,4
81111bb4:	2d7ff91e 	bne	r5,r21,81111b9c <__reset+0xfb0f1b9c>
81111bb8:	003a5306 	br	81110508 <__reset+0xfb0f0508>
81111bbc:	11186440 	call	81118644 <_strtoull_r>
81111bc0:	003f9d06 	br	81111a38 <__reset+0xfb0f1a38>

81111bc4 <vfscanf>:
81111bc4:	00a044f4 	movhi	r2,33043
81111bc8:	defffb04 	addi	sp,sp,-20
81111bcc:	10976404 	addi	r2,r2,23952
81111bd0:	dc000215 	stw	r16,8(sp)
81111bd4:	14000017 	ldw	r16,0(r2)
81111bd8:	dc400315 	stw	r17,12(sp)
81111bdc:	dfc00415 	stw	ra,16(sp)
81111be0:	2023883a 	mov	r17,r4
81111be4:	80000826 	beq	r16,zero,81111c08 <vfscanf+0x44>
81111be8:	80800e17 	ldw	r2,56(r16)
81111bec:	1000061e 	bne	r2,zero,81111c08 <vfscanf+0x44>
81111bf0:	8009883a 	mov	r4,r16
81111bf4:	d9400015 	stw	r5,0(sp)
81111bf8:	d9800115 	stw	r6,4(sp)
81111bfc:	1113d1c0 	call	81113d1c <__sinit>
81111c00:	d9800117 	ldw	r6,4(sp)
81111c04:	d9400017 	ldw	r5,0(sp)
81111c08:	300f883a 	mov	r7,r6
81111c0c:	8009883a 	mov	r4,r16
81111c10:	280d883a 	mov	r6,r5
81111c14:	880b883a 	mov	r5,r17
81111c18:	dfc00417 	ldw	ra,16(sp)
81111c1c:	dc400317 	ldw	r17,12(sp)
81111c20:	dc000217 	ldw	r16,8(sp)
81111c24:	dec00504 	addi	sp,sp,20
81111c28:	11104081 	jmpi	81110408 <__svfscanf_r>

81111c2c <__svfscanf>:
81111c2c:	00a044f4 	movhi	r2,33043
81111c30:	10976404 	addi	r2,r2,23952
81111c34:	300f883a 	mov	r7,r6
81111c38:	280d883a 	mov	r6,r5
81111c3c:	200b883a 	mov	r5,r4
81111c40:	11000017 	ldw	r4,0(r2)
81111c44:	11104081 	jmpi	81110408 <__svfscanf_r>

81111c48 <_vfscanf_r>:
81111c48:	defffb04 	addi	sp,sp,-20
81111c4c:	dc000315 	stw	r16,12(sp)
81111c50:	dfc00415 	stw	ra,16(sp)
81111c54:	2021883a 	mov	r16,r4
81111c58:	20000926 	beq	r4,zero,81111c80 <_vfscanf_r+0x38>
81111c5c:	20800e17 	ldw	r2,56(r4)
81111c60:	1000071e 	bne	r2,zero,81111c80 <_vfscanf_r+0x38>
81111c64:	d9400015 	stw	r5,0(sp)
81111c68:	d9800115 	stw	r6,4(sp)
81111c6c:	d9c00215 	stw	r7,8(sp)
81111c70:	1113d1c0 	call	81113d1c <__sinit>
81111c74:	d9c00217 	ldw	r7,8(sp)
81111c78:	d9800117 	ldw	r6,4(sp)
81111c7c:	d9400017 	ldw	r5,0(sp)
81111c80:	8009883a 	mov	r4,r16
81111c84:	dfc00417 	ldw	ra,16(sp)
81111c88:	dc000317 	ldw	r16,12(sp)
81111c8c:	dec00504 	addi	sp,sp,20
81111c90:	11104081 	jmpi	81110408 <__svfscanf_r>

81111c94 <_write_r>:
81111c94:	defffd04 	addi	sp,sp,-12
81111c98:	2805883a 	mov	r2,r5
81111c9c:	dc000015 	stw	r16,0(sp)
81111ca0:	042044f4 	movhi	r16,33043
81111ca4:	dc400115 	stw	r17,4(sp)
81111ca8:	300b883a 	mov	r5,r6
81111cac:	8417b304 	addi	r16,r16,24268
81111cb0:	2023883a 	mov	r17,r4
81111cb4:	380d883a 	mov	r6,r7
81111cb8:	1009883a 	mov	r4,r2
81111cbc:	dfc00215 	stw	ra,8(sp)
81111cc0:	80000015 	stw	zero,0(r16)
81111cc4:	11203c00 	call	811203c0 <write>
81111cc8:	00ffffc4 	movi	r3,-1
81111ccc:	10c00526 	beq	r2,r3,81111ce4 <_write_r+0x50>
81111cd0:	dfc00217 	ldw	ra,8(sp)
81111cd4:	dc400117 	ldw	r17,4(sp)
81111cd8:	dc000017 	ldw	r16,0(sp)
81111cdc:	dec00304 	addi	sp,sp,12
81111ce0:	f800283a 	ret
81111ce4:	80c00017 	ldw	r3,0(r16)
81111ce8:	183ff926 	beq	r3,zero,81111cd0 <__reset+0xfb0f1cd0>
81111cec:	88c00015 	stw	r3,0(r17)
81111cf0:	003ff706 	br	81111cd0 <__reset+0xfb0f1cd0>

81111cf4 <__swsetup_r>:
81111cf4:	00a044f4 	movhi	r2,33043
81111cf8:	defffd04 	addi	sp,sp,-12
81111cfc:	10976404 	addi	r2,r2,23952
81111d00:	dc400115 	stw	r17,4(sp)
81111d04:	2023883a 	mov	r17,r4
81111d08:	11000017 	ldw	r4,0(r2)
81111d0c:	dc000015 	stw	r16,0(sp)
81111d10:	dfc00215 	stw	ra,8(sp)
81111d14:	2821883a 	mov	r16,r5
81111d18:	20000226 	beq	r4,zero,81111d24 <__swsetup_r+0x30>
81111d1c:	20800e17 	ldw	r2,56(r4)
81111d20:	10003126 	beq	r2,zero,81111de8 <__swsetup_r+0xf4>
81111d24:	8080030b 	ldhu	r2,12(r16)
81111d28:	10c0020c 	andi	r3,r2,8
81111d2c:	1009883a 	mov	r4,r2
81111d30:	18000f26 	beq	r3,zero,81111d70 <__swsetup_r+0x7c>
81111d34:	80c00417 	ldw	r3,16(r16)
81111d38:	18001526 	beq	r3,zero,81111d90 <__swsetup_r+0x9c>
81111d3c:	1100004c 	andi	r4,r2,1
81111d40:	20001c1e 	bne	r4,zero,81111db4 <__swsetup_r+0xc0>
81111d44:	1080008c 	andi	r2,r2,2
81111d48:	1000291e 	bne	r2,zero,81111df0 <__swsetup_r+0xfc>
81111d4c:	80800517 	ldw	r2,20(r16)
81111d50:	80800215 	stw	r2,8(r16)
81111d54:	18001c26 	beq	r3,zero,81111dc8 <__swsetup_r+0xd4>
81111d58:	0005883a 	mov	r2,zero
81111d5c:	dfc00217 	ldw	ra,8(sp)
81111d60:	dc400117 	ldw	r17,4(sp)
81111d64:	dc000017 	ldw	r16,0(sp)
81111d68:	dec00304 	addi	sp,sp,12
81111d6c:	f800283a 	ret
81111d70:	2080040c 	andi	r2,r4,16
81111d74:	10002e26 	beq	r2,zero,81111e30 <__swsetup_r+0x13c>
81111d78:	2080010c 	andi	r2,r4,4
81111d7c:	10001e1e 	bne	r2,zero,81111df8 <__swsetup_r+0x104>
81111d80:	80c00417 	ldw	r3,16(r16)
81111d84:	20800214 	ori	r2,r4,8
81111d88:	8080030d 	sth	r2,12(r16)
81111d8c:	183feb1e 	bne	r3,zero,81111d3c <__reset+0xfb0f1d3c>
81111d90:	1100a00c 	andi	r4,r2,640
81111d94:	01408004 	movi	r5,512
81111d98:	217fe826 	beq	r4,r5,81111d3c <__reset+0xfb0f1d3c>
81111d9c:	800b883a 	mov	r5,r16
81111da0:	8809883a 	mov	r4,r17
81111da4:	110a8a40 	call	8110a8a4 <__smakebuf_r>
81111da8:	8080030b 	ldhu	r2,12(r16)
81111dac:	80c00417 	ldw	r3,16(r16)
81111db0:	003fe206 	br	81111d3c <__reset+0xfb0f1d3c>
81111db4:	80800517 	ldw	r2,20(r16)
81111db8:	80000215 	stw	zero,8(r16)
81111dbc:	0085c83a 	sub	r2,zero,r2
81111dc0:	80800615 	stw	r2,24(r16)
81111dc4:	183fe41e 	bne	r3,zero,81111d58 <__reset+0xfb0f1d58>
81111dc8:	80c0030b 	ldhu	r3,12(r16)
81111dcc:	0005883a 	mov	r2,zero
81111dd0:	1900200c 	andi	r4,r3,128
81111dd4:	203fe126 	beq	r4,zero,81111d5c <__reset+0xfb0f1d5c>
81111dd8:	18c01014 	ori	r3,r3,64
81111ddc:	80c0030d 	sth	r3,12(r16)
81111de0:	00bfffc4 	movi	r2,-1
81111de4:	003fdd06 	br	81111d5c <__reset+0xfb0f1d5c>
81111de8:	1113d1c0 	call	81113d1c <__sinit>
81111dec:	003fcd06 	br	81111d24 <__reset+0xfb0f1d24>
81111df0:	0005883a 	mov	r2,zero
81111df4:	003fd606 	br	81111d50 <__reset+0xfb0f1d50>
81111df8:	81400c17 	ldw	r5,48(r16)
81111dfc:	28000626 	beq	r5,zero,81111e18 <__swsetup_r+0x124>
81111e00:	80801004 	addi	r2,r16,64
81111e04:	28800326 	beq	r5,r2,81111e14 <__swsetup_r+0x120>
81111e08:	8809883a 	mov	r4,r17
81111e0c:	111419c0 	call	8111419c <_free_r>
81111e10:	8100030b 	ldhu	r4,12(r16)
81111e14:	80000c15 	stw	zero,48(r16)
81111e18:	80c00417 	ldw	r3,16(r16)
81111e1c:	00bff6c4 	movi	r2,-37
81111e20:	1108703a 	and	r4,r2,r4
81111e24:	80000115 	stw	zero,4(r16)
81111e28:	80c00015 	stw	r3,0(r16)
81111e2c:	003fd506 	br	81111d84 <__reset+0xfb0f1d84>
81111e30:	00800244 	movi	r2,9
81111e34:	88800015 	stw	r2,0(r17)
81111e38:	20801014 	ori	r2,r4,64
81111e3c:	8080030d 	sth	r2,12(r16)
81111e40:	00bfffc4 	movi	r2,-1
81111e44:	003fc506 	br	81111d5c <__reset+0xfb0f1d5c>

81111e48 <_close_r>:
81111e48:	defffd04 	addi	sp,sp,-12
81111e4c:	dc000015 	stw	r16,0(sp)
81111e50:	042044f4 	movhi	r16,33043
81111e54:	dc400115 	stw	r17,4(sp)
81111e58:	8417b304 	addi	r16,r16,24268
81111e5c:	2023883a 	mov	r17,r4
81111e60:	2809883a 	mov	r4,r5
81111e64:	dfc00215 	stw	ra,8(sp)
81111e68:	80000015 	stw	zero,0(r16)
81111e6c:	111f7580 	call	8111f758 <close>
81111e70:	00ffffc4 	movi	r3,-1
81111e74:	10c00526 	beq	r2,r3,81111e8c <_close_r+0x44>
81111e78:	dfc00217 	ldw	ra,8(sp)
81111e7c:	dc400117 	ldw	r17,4(sp)
81111e80:	dc000017 	ldw	r16,0(sp)
81111e84:	dec00304 	addi	sp,sp,12
81111e88:	f800283a 	ret
81111e8c:	80c00017 	ldw	r3,0(r16)
81111e90:	183ff926 	beq	r3,zero,81111e78 <__reset+0xfb0f1e78>
81111e94:	88c00015 	stw	r3,0(r17)
81111e98:	003ff706 	br	81111e78 <__reset+0xfb0f1e78>

81111e9c <quorem>:
81111e9c:	defff704 	addi	sp,sp,-36
81111ea0:	dc800215 	stw	r18,8(sp)
81111ea4:	20800417 	ldw	r2,16(r4)
81111ea8:	2c800417 	ldw	r18,16(r5)
81111eac:	dfc00815 	stw	ra,32(sp)
81111eb0:	ddc00715 	stw	r23,28(sp)
81111eb4:	dd800615 	stw	r22,24(sp)
81111eb8:	dd400515 	stw	r21,20(sp)
81111ebc:	dd000415 	stw	r20,16(sp)
81111ec0:	dcc00315 	stw	r19,12(sp)
81111ec4:	dc400115 	stw	r17,4(sp)
81111ec8:	dc000015 	stw	r16,0(sp)
81111ecc:	14807116 	blt	r2,r18,81112094 <quorem+0x1f8>
81111ed0:	94bfffc4 	addi	r18,r18,-1
81111ed4:	94ad883a 	add	r22,r18,r18
81111ed8:	b5ad883a 	add	r22,r22,r22
81111edc:	2c400504 	addi	r17,r5,20
81111ee0:	8da9883a 	add	r20,r17,r22
81111ee4:	25400504 	addi	r21,r4,20
81111ee8:	282f883a 	mov	r23,r5
81111eec:	adad883a 	add	r22,r21,r22
81111ef0:	a1400017 	ldw	r5,0(r20)
81111ef4:	2021883a 	mov	r16,r4
81111ef8:	b1000017 	ldw	r4,0(r22)
81111efc:	29400044 	addi	r5,r5,1
81111f00:	111d5780 	call	8111d578 <__udivsi3>
81111f04:	1027883a 	mov	r19,r2
81111f08:	10002c26 	beq	r2,zero,81111fbc <quorem+0x120>
81111f0c:	a813883a 	mov	r9,r21
81111f10:	880b883a 	mov	r5,r17
81111f14:	0009883a 	mov	r4,zero
81111f18:	000d883a 	mov	r6,zero
81111f1c:	2a000017 	ldw	r8,0(r5)
81111f20:	49c00017 	ldw	r7,0(r9)
81111f24:	29400104 	addi	r5,r5,4
81111f28:	40bfffcc 	andi	r2,r8,65535
81111f2c:	14c5383a 	mul	r2,r2,r19
81111f30:	4010d43a 	srli	r8,r8,16
81111f34:	38ffffcc 	andi	r3,r7,65535
81111f38:	1105883a 	add	r2,r2,r4
81111f3c:	1008d43a 	srli	r4,r2,16
81111f40:	44d1383a 	mul	r8,r8,r19
81111f44:	198d883a 	add	r6,r3,r6
81111f48:	10ffffcc 	andi	r3,r2,65535
81111f4c:	30c7c83a 	sub	r3,r6,r3
81111f50:	380ed43a 	srli	r7,r7,16
81111f54:	4105883a 	add	r2,r8,r4
81111f58:	180dd43a 	srai	r6,r3,16
81111f5c:	113fffcc 	andi	r4,r2,65535
81111f60:	390fc83a 	sub	r7,r7,r4
81111f64:	398d883a 	add	r6,r7,r6
81111f68:	300e943a 	slli	r7,r6,16
81111f6c:	18ffffcc 	andi	r3,r3,65535
81111f70:	1008d43a 	srli	r4,r2,16
81111f74:	38ceb03a 	or	r7,r7,r3
81111f78:	49c00015 	stw	r7,0(r9)
81111f7c:	300dd43a 	srai	r6,r6,16
81111f80:	4a400104 	addi	r9,r9,4
81111f84:	a17fe52e 	bgeu	r20,r5,81111f1c <__reset+0xfb0f1f1c>
81111f88:	b0800017 	ldw	r2,0(r22)
81111f8c:	10000b1e 	bne	r2,zero,81111fbc <quorem+0x120>
81111f90:	b0bfff04 	addi	r2,r22,-4
81111f94:	a880082e 	bgeu	r21,r2,81111fb8 <quorem+0x11c>
81111f98:	b0ffff17 	ldw	r3,-4(r22)
81111f9c:	18000326 	beq	r3,zero,81111fac <quorem+0x110>
81111fa0:	00000506 	br	81111fb8 <quorem+0x11c>
81111fa4:	10c00017 	ldw	r3,0(r2)
81111fa8:	1800031e 	bne	r3,zero,81111fb8 <quorem+0x11c>
81111fac:	10bfff04 	addi	r2,r2,-4
81111fb0:	94bfffc4 	addi	r18,r18,-1
81111fb4:	a8bffb36 	bltu	r21,r2,81111fa4 <__reset+0xfb0f1fa4>
81111fb8:	84800415 	stw	r18,16(r16)
81111fbc:	b80b883a 	mov	r5,r23
81111fc0:	8009883a 	mov	r4,r16
81111fc4:	11159dc0 	call	811159dc <__mcmp>
81111fc8:	10002616 	blt	r2,zero,81112064 <quorem+0x1c8>
81111fcc:	9cc00044 	addi	r19,r19,1
81111fd0:	a805883a 	mov	r2,r21
81111fd4:	000b883a 	mov	r5,zero
81111fd8:	11000017 	ldw	r4,0(r2)
81111fdc:	89800017 	ldw	r6,0(r17)
81111fe0:	10800104 	addi	r2,r2,4
81111fe4:	20ffffcc 	andi	r3,r4,65535
81111fe8:	194b883a 	add	r5,r3,r5
81111fec:	30ffffcc 	andi	r3,r6,65535
81111ff0:	28c7c83a 	sub	r3,r5,r3
81111ff4:	300cd43a 	srli	r6,r6,16
81111ff8:	2008d43a 	srli	r4,r4,16
81111ffc:	180bd43a 	srai	r5,r3,16
81112000:	18ffffcc 	andi	r3,r3,65535
81112004:	2189c83a 	sub	r4,r4,r6
81112008:	2149883a 	add	r4,r4,r5
8111200c:	200c943a 	slli	r6,r4,16
81112010:	8c400104 	addi	r17,r17,4
81112014:	200bd43a 	srai	r5,r4,16
81112018:	30c6b03a 	or	r3,r6,r3
8111201c:	10ffff15 	stw	r3,-4(r2)
81112020:	a47fed2e 	bgeu	r20,r17,81111fd8 <__reset+0xfb0f1fd8>
81112024:	9485883a 	add	r2,r18,r18
81112028:	1085883a 	add	r2,r2,r2
8111202c:	a887883a 	add	r3,r21,r2
81112030:	18800017 	ldw	r2,0(r3)
81112034:	10000b1e 	bne	r2,zero,81112064 <quorem+0x1c8>
81112038:	18bfff04 	addi	r2,r3,-4
8111203c:	a880082e 	bgeu	r21,r2,81112060 <quorem+0x1c4>
81112040:	18ffff17 	ldw	r3,-4(r3)
81112044:	18000326 	beq	r3,zero,81112054 <quorem+0x1b8>
81112048:	00000506 	br	81112060 <quorem+0x1c4>
8111204c:	10c00017 	ldw	r3,0(r2)
81112050:	1800031e 	bne	r3,zero,81112060 <quorem+0x1c4>
81112054:	10bfff04 	addi	r2,r2,-4
81112058:	94bfffc4 	addi	r18,r18,-1
8111205c:	a8bffb36 	bltu	r21,r2,8111204c <__reset+0xfb0f204c>
81112060:	84800415 	stw	r18,16(r16)
81112064:	9805883a 	mov	r2,r19
81112068:	dfc00817 	ldw	ra,32(sp)
8111206c:	ddc00717 	ldw	r23,28(sp)
81112070:	dd800617 	ldw	r22,24(sp)
81112074:	dd400517 	ldw	r21,20(sp)
81112078:	dd000417 	ldw	r20,16(sp)
8111207c:	dcc00317 	ldw	r19,12(sp)
81112080:	dc800217 	ldw	r18,8(sp)
81112084:	dc400117 	ldw	r17,4(sp)
81112088:	dc000017 	ldw	r16,0(sp)
8111208c:	dec00904 	addi	sp,sp,36
81112090:	f800283a 	ret
81112094:	0005883a 	mov	r2,zero
81112098:	003ff306 	br	81112068 <__reset+0xfb0f2068>

8111209c <_dtoa_r>:
8111209c:	20801017 	ldw	r2,64(r4)
811120a0:	deffde04 	addi	sp,sp,-136
811120a4:	df002015 	stw	fp,128(sp)
811120a8:	dcc01b15 	stw	r19,108(sp)
811120ac:	dc801a15 	stw	r18,104(sp)
811120b0:	dc401915 	stw	r17,100(sp)
811120b4:	dc001815 	stw	r16,96(sp)
811120b8:	dfc02115 	stw	ra,132(sp)
811120bc:	ddc01f15 	stw	r23,124(sp)
811120c0:	dd801e15 	stw	r22,120(sp)
811120c4:	dd401d15 	stw	r21,116(sp)
811120c8:	dd001c15 	stw	r20,112(sp)
811120cc:	d9c00315 	stw	r7,12(sp)
811120d0:	2039883a 	mov	fp,r4
811120d4:	3023883a 	mov	r17,r6
811120d8:	2825883a 	mov	r18,r5
811120dc:	dc002417 	ldw	r16,144(sp)
811120e0:	3027883a 	mov	r19,r6
811120e4:	10000826 	beq	r2,zero,81112108 <_dtoa_r+0x6c>
811120e8:	21801117 	ldw	r6,68(r4)
811120ec:	00c00044 	movi	r3,1
811120f0:	100b883a 	mov	r5,r2
811120f4:	1986983a 	sll	r3,r3,r6
811120f8:	11800115 	stw	r6,4(r2)
811120fc:	10c00215 	stw	r3,8(r2)
81112100:	11151bc0 	call	811151bc <_Bfree>
81112104:	e0001015 	stw	zero,64(fp)
81112108:	88002e16 	blt	r17,zero,811121c4 <_dtoa_r+0x128>
8111210c:	80000015 	stw	zero,0(r16)
81112110:	889ffc2c 	andhi	r2,r17,32752
81112114:	00dffc34 	movhi	r3,32752
81112118:	10c01c26 	beq	r2,r3,8111218c <_dtoa_r+0xf0>
8111211c:	000d883a 	mov	r6,zero
81112120:	000f883a 	mov	r7,zero
81112124:	9009883a 	mov	r4,r18
81112128:	980b883a 	mov	r5,r19
8111212c:	111e9c40 	call	8111e9c4 <__eqdf2>
81112130:	10002b1e 	bne	r2,zero,811121e0 <_dtoa_r+0x144>
81112134:	d9c02317 	ldw	r7,140(sp)
81112138:	00800044 	movi	r2,1
8111213c:	38800015 	stw	r2,0(r7)
81112140:	d8802517 	ldw	r2,148(sp)
81112144:	10019e26 	beq	r2,zero,811127c0 <_dtoa_r+0x724>
81112148:	d8c02517 	ldw	r3,148(sp)
8111214c:	00a044f4 	movhi	r2,33043
81112150:	108dd244 	addi	r2,r2,14153
81112154:	18800015 	stw	r2,0(r3)
81112158:	10bfffc4 	addi	r2,r2,-1
8111215c:	dfc02117 	ldw	ra,132(sp)
81112160:	df002017 	ldw	fp,128(sp)
81112164:	ddc01f17 	ldw	r23,124(sp)
81112168:	dd801e17 	ldw	r22,120(sp)
8111216c:	dd401d17 	ldw	r21,116(sp)
81112170:	dd001c17 	ldw	r20,112(sp)
81112174:	dcc01b17 	ldw	r19,108(sp)
81112178:	dc801a17 	ldw	r18,104(sp)
8111217c:	dc401917 	ldw	r17,100(sp)
81112180:	dc001817 	ldw	r16,96(sp)
81112184:	dec02204 	addi	sp,sp,136
81112188:	f800283a 	ret
8111218c:	d8c02317 	ldw	r3,140(sp)
81112190:	0089c3c4 	movi	r2,9999
81112194:	18800015 	stw	r2,0(r3)
81112198:	90017726 	beq	r18,zero,81112778 <_dtoa_r+0x6dc>
8111219c:	00a044f4 	movhi	r2,33043
811121a0:	108e9104 	addi	r2,r2,14916
811121a4:	d9002517 	ldw	r4,148(sp)
811121a8:	203fec26 	beq	r4,zero,8111215c <__reset+0xfb0f215c>
811121ac:	10c000c7 	ldb	r3,3(r2)
811121b0:	1801781e 	bne	r3,zero,81112794 <_dtoa_r+0x6f8>
811121b4:	10c000c4 	addi	r3,r2,3
811121b8:	d9802517 	ldw	r6,148(sp)
811121bc:	30c00015 	stw	r3,0(r6)
811121c0:	003fe606 	br	8111215c <__reset+0xfb0f215c>
811121c4:	04e00034 	movhi	r19,32768
811121c8:	9cffffc4 	addi	r19,r19,-1
811121cc:	00800044 	movi	r2,1
811121d0:	8ce6703a 	and	r19,r17,r19
811121d4:	80800015 	stw	r2,0(r16)
811121d8:	9823883a 	mov	r17,r19
811121dc:	003fcc06 	br	81112110 <__reset+0xfb0f2110>
811121e0:	d8800204 	addi	r2,sp,8
811121e4:	d8800015 	stw	r2,0(sp)
811121e8:	d9c00104 	addi	r7,sp,4
811121ec:	900b883a 	mov	r5,r18
811121f0:	980d883a 	mov	r6,r19
811121f4:	e009883a 	mov	r4,fp
811121f8:	8820d53a 	srli	r16,r17,20
811121fc:	1115da80 	call	81115da8 <__d2b>
81112200:	d8800915 	stw	r2,36(sp)
81112204:	8001651e 	bne	r16,zero,8111279c <_dtoa_r+0x700>
81112208:	dd800217 	ldw	r22,8(sp)
8111220c:	dc000117 	ldw	r16,4(sp)
81112210:	00800804 	movi	r2,32
81112214:	b421883a 	add	r16,r22,r16
81112218:	80c10c84 	addi	r3,r16,1074
8111221c:	10c2d10e 	bge	r2,r3,81112d64 <_dtoa_r+0xcc8>
81112220:	00801004 	movi	r2,64
81112224:	81010484 	addi	r4,r16,1042
81112228:	10c7c83a 	sub	r3,r2,r3
8111222c:	9108d83a 	srl	r4,r18,r4
81112230:	88e2983a 	sll	r17,r17,r3
81112234:	2448b03a 	or	r4,r4,r17
81112238:	111f6740 	call	8111f674 <__floatunsidf>
8111223c:	017f8434 	movhi	r5,65040
81112240:	01800044 	movi	r6,1
81112244:	1009883a 	mov	r4,r2
81112248:	194b883a 	add	r5,r3,r5
8111224c:	843fffc4 	addi	r16,r16,-1
81112250:	d9801115 	stw	r6,68(sp)
81112254:	000d883a 	mov	r6,zero
81112258:	01cffe34 	movhi	r7,16376
8111225c:	111ec1c0 	call	8111ec1c <__subdf3>
81112260:	0198dbf4 	movhi	r6,25455
81112264:	01cff4f4 	movhi	r7,16339
81112268:	3190d844 	addi	r6,r6,17249
8111226c:	39e1e9c4 	addi	r7,r7,-30809
81112270:	1009883a 	mov	r4,r2
81112274:	180b883a 	mov	r5,r3
81112278:	11097240 	call	81109724 <__muldf3>
8111227c:	01a2d874 	movhi	r6,35681
81112280:	01cff1f4 	movhi	r7,16327
81112284:	31b22cc4 	addi	r6,r6,-14157
81112288:	39e28a04 	addi	r7,r7,-30168
8111228c:	180b883a 	mov	r5,r3
81112290:	1009883a 	mov	r4,r2
81112294:	111d8300 	call	8111d830 <__adddf3>
81112298:	8009883a 	mov	r4,r16
8111229c:	1029883a 	mov	r20,r2
811122a0:	1823883a 	mov	r17,r3
811122a4:	111f5980 	call	8111f598 <__floatsidf>
811122a8:	019427f4 	movhi	r6,20639
811122ac:	01cff4f4 	movhi	r7,16339
811122b0:	319e7ec4 	addi	r6,r6,31227
811122b4:	39d104c4 	addi	r7,r7,17427
811122b8:	1009883a 	mov	r4,r2
811122bc:	180b883a 	mov	r5,r3
811122c0:	11097240 	call	81109724 <__muldf3>
811122c4:	100d883a 	mov	r6,r2
811122c8:	180f883a 	mov	r7,r3
811122cc:	a009883a 	mov	r4,r20
811122d0:	880b883a 	mov	r5,r17
811122d4:	111d8300 	call	8111d830 <__adddf3>
811122d8:	1009883a 	mov	r4,r2
811122dc:	180b883a 	mov	r5,r3
811122e0:	1029883a 	mov	r20,r2
811122e4:	1823883a 	mov	r17,r3
811122e8:	111f5180 	call	8111f518 <__fixdfsi>
811122ec:	000d883a 	mov	r6,zero
811122f0:	000f883a 	mov	r7,zero
811122f4:	a009883a 	mov	r4,r20
811122f8:	880b883a 	mov	r5,r17
811122fc:	d8800515 	stw	r2,20(sp)
81112300:	111eb280 	call	8111eb28 <__ledf2>
81112304:	10028716 	blt	r2,zero,81112d24 <_dtoa_r+0xc88>
81112308:	d8c00517 	ldw	r3,20(sp)
8111230c:	00800584 	movi	r2,22
81112310:	10c27536 	bltu	r2,r3,81112ce8 <_dtoa_r+0xc4c>
81112314:	180490fa 	slli	r2,r3,3
81112318:	00e044f4 	movhi	r3,33043
8111231c:	18ceac04 	addi	r3,r3,15024
81112320:	1885883a 	add	r2,r3,r2
81112324:	11000017 	ldw	r4,0(r2)
81112328:	11400117 	ldw	r5,4(r2)
8111232c:	900d883a 	mov	r6,r18
81112330:	980f883a 	mov	r7,r19
81112334:	111ea4c0 	call	8111ea4c <__gedf2>
81112338:	00828d0e 	bge	zero,r2,81112d70 <_dtoa_r+0xcd4>
8111233c:	d9000517 	ldw	r4,20(sp)
81112340:	d8000e15 	stw	zero,56(sp)
81112344:	213fffc4 	addi	r4,r4,-1
81112348:	d9000515 	stw	r4,20(sp)
8111234c:	b42dc83a 	sub	r22,r22,r16
81112350:	b5bfffc4 	addi	r22,r22,-1
81112354:	b0026f16 	blt	r22,zero,81112d14 <_dtoa_r+0xc78>
81112358:	d8000815 	stw	zero,32(sp)
8111235c:	d9c00517 	ldw	r7,20(sp)
81112360:	38026416 	blt	r7,zero,81112cf4 <_dtoa_r+0xc58>
81112364:	b1ed883a 	add	r22,r22,r7
81112368:	d9c00d15 	stw	r7,52(sp)
8111236c:	d8000a15 	stw	zero,40(sp)
81112370:	d9800317 	ldw	r6,12(sp)
81112374:	00800244 	movi	r2,9
81112378:	11811436 	bltu	r2,r6,811127cc <_dtoa_r+0x730>
8111237c:	00800144 	movi	r2,5
81112380:	1184e10e 	bge	r2,r6,81113708 <_dtoa_r+0x166c>
81112384:	31bfff04 	addi	r6,r6,-4
81112388:	d9800315 	stw	r6,12(sp)
8111238c:	0023883a 	mov	r17,zero
81112390:	d9800317 	ldw	r6,12(sp)
81112394:	008000c4 	movi	r2,3
81112398:	30836726 	beq	r6,r2,81113138 <_dtoa_r+0x109c>
8111239c:	1183410e 	bge	r2,r6,811130a4 <_dtoa_r+0x1008>
811123a0:	d9c00317 	ldw	r7,12(sp)
811123a4:	00800104 	movi	r2,4
811123a8:	38827c26 	beq	r7,r2,81112d9c <_dtoa_r+0xd00>
811123ac:	00800144 	movi	r2,5
811123b0:	3884c41e 	bne	r7,r2,811136c4 <_dtoa_r+0x1628>
811123b4:	00800044 	movi	r2,1
811123b8:	d8800b15 	stw	r2,44(sp)
811123bc:	d8c00517 	ldw	r3,20(sp)
811123c0:	d9002217 	ldw	r4,136(sp)
811123c4:	1907883a 	add	r3,r3,r4
811123c8:	19800044 	addi	r6,r3,1
811123cc:	d8c00c15 	stw	r3,48(sp)
811123d0:	d9800615 	stw	r6,24(sp)
811123d4:	0183a40e 	bge	zero,r6,81113268 <_dtoa_r+0x11cc>
811123d8:	d9800617 	ldw	r6,24(sp)
811123dc:	3021883a 	mov	r16,r6
811123e0:	e0001115 	stw	zero,68(fp)
811123e4:	008005c4 	movi	r2,23
811123e8:	1184c92e 	bgeu	r2,r6,81113710 <_dtoa_r+0x1674>
811123ec:	00c00044 	movi	r3,1
811123f0:	00800104 	movi	r2,4
811123f4:	1085883a 	add	r2,r2,r2
811123f8:	11000504 	addi	r4,r2,20
811123fc:	180b883a 	mov	r5,r3
81112400:	18c00044 	addi	r3,r3,1
81112404:	313ffb2e 	bgeu	r6,r4,811123f4 <__reset+0xfb0f23f4>
81112408:	e1401115 	stw	r5,68(fp)
8111240c:	e009883a 	mov	r4,fp
81112410:	11151140 	call	81115114 <_Balloc>
81112414:	d8800715 	stw	r2,28(sp)
81112418:	e0801015 	stw	r2,64(fp)
8111241c:	00800384 	movi	r2,14
81112420:	1400f736 	bltu	r2,r16,81112800 <_dtoa_r+0x764>
81112424:	8800f626 	beq	r17,zero,81112800 <_dtoa_r+0x764>
81112428:	d9c00517 	ldw	r7,20(sp)
8111242c:	01c39a0e 	bge	zero,r7,81113298 <_dtoa_r+0x11fc>
81112430:	388003cc 	andi	r2,r7,15
81112434:	100490fa 	slli	r2,r2,3
81112438:	382bd13a 	srai	r21,r7,4
8111243c:	00e044f4 	movhi	r3,33043
81112440:	18ceac04 	addi	r3,r3,15024
81112444:	1885883a 	add	r2,r3,r2
81112448:	a8c0040c 	andi	r3,r21,16
8111244c:	12400017 	ldw	r9,0(r2)
81112450:	12000117 	ldw	r8,4(r2)
81112454:	18037926 	beq	r3,zero,8111323c <_dtoa_r+0x11a0>
81112458:	00a044f4 	movhi	r2,33043
8111245c:	108ea204 	addi	r2,r2,14984
81112460:	11800817 	ldw	r6,32(r2)
81112464:	11c00917 	ldw	r7,36(r2)
81112468:	9009883a 	mov	r4,r18
8111246c:	980b883a 	mov	r5,r19
81112470:	da001715 	stw	r8,92(sp)
81112474:	da401615 	stw	r9,88(sp)
81112478:	111e0dc0 	call	8111e0dc <__divdf3>
8111247c:	da001717 	ldw	r8,92(sp)
81112480:	da401617 	ldw	r9,88(sp)
81112484:	ad4003cc 	andi	r21,r21,15
81112488:	040000c4 	movi	r16,3
8111248c:	1023883a 	mov	r17,r2
81112490:	1829883a 	mov	r20,r3
81112494:	a8001126 	beq	r21,zero,811124dc <_dtoa_r+0x440>
81112498:	05e044f4 	movhi	r23,33043
8111249c:	bdcea204 	addi	r23,r23,14984
811124a0:	4805883a 	mov	r2,r9
811124a4:	4007883a 	mov	r3,r8
811124a8:	a980004c 	andi	r6,r21,1
811124ac:	1009883a 	mov	r4,r2
811124b0:	a82bd07a 	srai	r21,r21,1
811124b4:	180b883a 	mov	r5,r3
811124b8:	30000426 	beq	r6,zero,811124cc <_dtoa_r+0x430>
811124bc:	b9800017 	ldw	r6,0(r23)
811124c0:	b9c00117 	ldw	r7,4(r23)
811124c4:	84000044 	addi	r16,r16,1
811124c8:	11097240 	call	81109724 <__muldf3>
811124cc:	bdc00204 	addi	r23,r23,8
811124d0:	a83ff51e 	bne	r21,zero,811124a8 <__reset+0xfb0f24a8>
811124d4:	1013883a 	mov	r9,r2
811124d8:	1811883a 	mov	r8,r3
811124dc:	480d883a 	mov	r6,r9
811124e0:	400f883a 	mov	r7,r8
811124e4:	8809883a 	mov	r4,r17
811124e8:	a00b883a 	mov	r5,r20
811124ec:	111e0dc0 	call	8111e0dc <__divdf3>
811124f0:	d8800f15 	stw	r2,60(sp)
811124f4:	d8c01015 	stw	r3,64(sp)
811124f8:	d8c00e17 	ldw	r3,56(sp)
811124fc:	18000626 	beq	r3,zero,81112518 <_dtoa_r+0x47c>
81112500:	d9000f17 	ldw	r4,60(sp)
81112504:	d9401017 	ldw	r5,64(sp)
81112508:	000d883a 	mov	r6,zero
8111250c:	01cffc34 	movhi	r7,16368
81112510:	111eb280 	call	8111eb28 <__ledf2>
81112514:	10040b16 	blt	r2,zero,81113544 <_dtoa_r+0x14a8>
81112518:	8009883a 	mov	r4,r16
8111251c:	111f5980 	call	8111f598 <__floatsidf>
81112520:	d9800f17 	ldw	r6,60(sp)
81112524:	d9c01017 	ldw	r7,64(sp)
81112528:	1009883a 	mov	r4,r2
8111252c:	180b883a 	mov	r5,r3
81112530:	11097240 	call	81109724 <__muldf3>
81112534:	000d883a 	mov	r6,zero
81112538:	01d00734 	movhi	r7,16412
8111253c:	1009883a 	mov	r4,r2
81112540:	180b883a 	mov	r5,r3
81112544:	111d8300 	call	8111d830 <__adddf3>
81112548:	1021883a 	mov	r16,r2
8111254c:	d8800617 	ldw	r2,24(sp)
81112550:	047f3034 	movhi	r17,64704
81112554:	1c63883a 	add	r17,r3,r17
81112558:	10031826 	beq	r2,zero,811131bc <_dtoa_r+0x1120>
8111255c:	d8c00517 	ldw	r3,20(sp)
81112560:	db000617 	ldw	r12,24(sp)
81112564:	d8c01315 	stw	r3,76(sp)
81112568:	d9000b17 	ldw	r4,44(sp)
8111256c:	20038f26 	beq	r4,zero,811133ac <_dtoa_r+0x1310>
81112570:	60bfffc4 	addi	r2,r12,-1
81112574:	100490fa 	slli	r2,r2,3
81112578:	00e044f4 	movhi	r3,33043
8111257c:	18ceac04 	addi	r3,r3,15024
81112580:	1885883a 	add	r2,r3,r2
81112584:	11800017 	ldw	r6,0(r2)
81112588:	11c00117 	ldw	r7,4(r2)
8111258c:	d8800717 	ldw	r2,28(sp)
81112590:	0009883a 	mov	r4,zero
81112594:	014ff834 	movhi	r5,16352
81112598:	db001615 	stw	r12,88(sp)
8111259c:	15c00044 	addi	r23,r2,1
811125a0:	111e0dc0 	call	8111e0dc <__divdf3>
811125a4:	800d883a 	mov	r6,r16
811125a8:	880f883a 	mov	r7,r17
811125ac:	1009883a 	mov	r4,r2
811125b0:	180b883a 	mov	r5,r3
811125b4:	111ec1c0 	call	8111ec1c <__subdf3>
811125b8:	d9401017 	ldw	r5,64(sp)
811125bc:	d9000f17 	ldw	r4,60(sp)
811125c0:	102b883a 	mov	r21,r2
811125c4:	d8c01215 	stw	r3,72(sp)
811125c8:	111f5180 	call	8111f518 <__fixdfsi>
811125cc:	1009883a 	mov	r4,r2
811125d0:	1029883a 	mov	r20,r2
811125d4:	111f5980 	call	8111f598 <__floatsidf>
811125d8:	d9000f17 	ldw	r4,60(sp)
811125dc:	d9401017 	ldw	r5,64(sp)
811125e0:	100d883a 	mov	r6,r2
811125e4:	180f883a 	mov	r7,r3
811125e8:	111ec1c0 	call	8111ec1c <__subdf3>
811125ec:	1823883a 	mov	r17,r3
811125f0:	d8c00717 	ldw	r3,28(sp)
811125f4:	d9401217 	ldw	r5,72(sp)
811125f8:	a2000c04 	addi	r8,r20,48
811125fc:	1021883a 	mov	r16,r2
81112600:	1a000005 	stb	r8,0(r3)
81112604:	800d883a 	mov	r6,r16
81112608:	880f883a 	mov	r7,r17
8111260c:	a809883a 	mov	r4,r21
81112610:	4029883a 	mov	r20,r8
81112614:	111ea4c0 	call	8111ea4c <__gedf2>
81112618:	00841d16 	blt	zero,r2,81113690 <_dtoa_r+0x15f4>
8111261c:	800d883a 	mov	r6,r16
81112620:	880f883a 	mov	r7,r17
81112624:	0009883a 	mov	r4,zero
81112628:	014ffc34 	movhi	r5,16368
8111262c:	111ec1c0 	call	8111ec1c <__subdf3>
81112630:	d9401217 	ldw	r5,72(sp)
81112634:	100d883a 	mov	r6,r2
81112638:	180f883a 	mov	r7,r3
8111263c:	a809883a 	mov	r4,r21
81112640:	111ea4c0 	call	8111ea4c <__gedf2>
81112644:	db001617 	ldw	r12,88(sp)
81112648:	00840e16 	blt	zero,r2,81113684 <_dtoa_r+0x15e8>
8111264c:	00800044 	movi	r2,1
81112650:	13006b0e 	bge	r2,r12,81112800 <_dtoa_r+0x764>
81112654:	d9000717 	ldw	r4,28(sp)
81112658:	dd800f15 	stw	r22,60(sp)
8111265c:	dcc01015 	stw	r19,64(sp)
81112660:	2319883a 	add	r12,r4,r12
81112664:	dcc01217 	ldw	r19,72(sp)
81112668:	602d883a 	mov	r22,r12
8111266c:	dc801215 	stw	r18,72(sp)
81112670:	b825883a 	mov	r18,r23
81112674:	00000906 	br	8111269c <_dtoa_r+0x600>
81112678:	111ec1c0 	call	8111ec1c <__subdf3>
8111267c:	a80d883a 	mov	r6,r21
81112680:	980f883a 	mov	r7,r19
81112684:	1009883a 	mov	r4,r2
81112688:	180b883a 	mov	r5,r3
8111268c:	111eb280 	call	8111eb28 <__ledf2>
81112690:	1003e816 	blt	r2,zero,81113634 <_dtoa_r+0x1598>
81112694:	b825883a 	mov	r18,r23
81112698:	bd83e926 	beq	r23,r22,81113640 <_dtoa_r+0x15a4>
8111269c:	a809883a 	mov	r4,r21
811126a0:	980b883a 	mov	r5,r19
811126a4:	000d883a 	mov	r6,zero
811126a8:	01d00934 	movhi	r7,16420
811126ac:	11097240 	call	81109724 <__muldf3>
811126b0:	000d883a 	mov	r6,zero
811126b4:	01d00934 	movhi	r7,16420
811126b8:	8009883a 	mov	r4,r16
811126bc:	880b883a 	mov	r5,r17
811126c0:	102b883a 	mov	r21,r2
811126c4:	1827883a 	mov	r19,r3
811126c8:	11097240 	call	81109724 <__muldf3>
811126cc:	180b883a 	mov	r5,r3
811126d0:	1009883a 	mov	r4,r2
811126d4:	1821883a 	mov	r16,r3
811126d8:	1023883a 	mov	r17,r2
811126dc:	111f5180 	call	8111f518 <__fixdfsi>
811126e0:	1009883a 	mov	r4,r2
811126e4:	1029883a 	mov	r20,r2
811126e8:	111f5980 	call	8111f598 <__floatsidf>
811126ec:	8809883a 	mov	r4,r17
811126f0:	800b883a 	mov	r5,r16
811126f4:	100d883a 	mov	r6,r2
811126f8:	180f883a 	mov	r7,r3
811126fc:	111ec1c0 	call	8111ec1c <__subdf3>
81112700:	a5000c04 	addi	r20,r20,48
81112704:	a80d883a 	mov	r6,r21
81112708:	980f883a 	mov	r7,r19
8111270c:	1009883a 	mov	r4,r2
81112710:	180b883a 	mov	r5,r3
81112714:	95000005 	stb	r20,0(r18)
81112718:	1021883a 	mov	r16,r2
8111271c:	1823883a 	mov	r17,r3
81112720:	111eb280 	call	8111eb28 <__ledf2>
81112724:	bdc00044 	addi	r23,r23,1
81112728:	800d883a 	mov	r6,r16
8111272c:	880f883a 	mov	r7,r17
81112730:	0009883a 	mov	r4,zero
81112734:	014ffc34 	movhi	r5,16368
81112738:	103fcf0e 	bge	r2,zero,81112678 <__reset+0xfb0f2678>
8111273c:	d8c01317 	ldw	r3,76(sp)
81112740:	d8c00515 	stw	r3,20(sp)
81112744:	d9400917 	ldw	r5,36(sp)
81112748:	e009883a 	mov	r4,fp
8111274c:	11151bc0 	call	811151bc <_Bfree>
81112750:	d9000517 	ldw	r4,20(sp)
81112754:	d9802317 	ldw	r6,140(sp)
81112758:	d9c02517 	ldw	r7,148(sp)
8111275c:	b8000005 	stb	zero,0(r23)
81112760:	20800044 	addi	r2,r4,1
81112764:	30800015 	stw	r2,0(r6)
81112768:	3802aa26 	beq	r7,zero,81113214 <_dtoa_r+0x1178>
8111276c:	3dc00015 	stw	r23,0(r7)
81112770:	d8800717 	ldw	r2,28(sp)
81112774:	003e7906 	br	8111215c <__reset+0xfb0f215c>
81112778:	00800434 	movhi	r2,16
8111277c:	10bfffc4 	addi	r2,r2,-1
81112780:	88a2703a 	and	r17,r17,r2
81112784:	883e851e 	bne	r17,zero,8111219c <__reset+0xfb0f219c>
81112788:	00a044f4 	movhi	r2,33043
8111278c:	108e8e04 	addi	r2,r2,14904
81112790:	003e8406 	br	811121a4 <__reset+0xfb0f21a4>
81112794:	10c00204 	addi	r3,r2,8
81112798:	003e8706 	br	811121b8 <__reset+0xfb0f21b8>
8111279c:	01400434 	movhi	r5,16
811127a0:	297fffc4 	addi	r5,r5,-1
811127a4:	994a703a 	and	r5,r19,r5
811127a8:	9009883a 	mov	r4,r18
811127ac:	843f0044 	addi	r16,r16,-1023
811127b0:	294ffc34 	orhi	r5,r5,16368
811127b4:	dd800217 	ldw	r22,8(sp)
811127b8:	d8001115 	stw	zero,68(sp)
811127bc:	003ea506 	br	81112254 <__reset+0xfb0f2254>
811127c0:	00a044f4 	movhi	r2,33043
811127c4:	108dd204 	addi	r2,r2,14152
811127c8:	003e6406 	br	8111215c <__reset+0xfb0f215c>
811127cc:	e0001115 	stw	zero,68(fp)
811127d0:	000b883a 	mov	r5,zero
811127d4:	e009883a 	mov	r4,fp
811127d8:	11151140 	call	81115114 <_Balloc>
811127dc:	01bfffc4 	movi	r6,-1
811127e0:	01c00044 	movi	r7,1
811127e4:	d8800715 	stw	r2,28(sp)
811127e8:	d9800c15 	stw	r6,48(sp)
811127ec:	e0801015 	stw	r2,64(fp)
811127f0:	d8000315 	stw	zero,12(sp)
811127f4:	d9c00b15 	stw	r7,44(sp)
811127f8:	d9800615 	stw	r6,24(sp)
811127fc:	d8002215 	stw	zero,136(sp)
81112800:	d8800117 	ldw	r2,4(sp)
81112804:	10008916 	blt	r2,zero,81112a2c <_dtoa_r+0x990>
81112808:	d9000517 	ldw	r4,20(sp)
8111280c:	00c00384 	movi	r3,14
81112810:	19008616 	blt	r3,r4,81112a2c <_dtoa_r+0x990>
81112814:	200490fa 	slli	r2,r4,3
81112818:	00e044f4 	movhi	r3,33043
8111281c:	d9802217 	ldw	r6,136(sp)
81112820:	18ceac04 	addi	r3,r3,15024
81112824:	1885883a 	add	r2,r3,r2
81112828:	14000017 	ldw	r16,0(r2)
8111282c:	14400117 	ldw	r17,4(r2)
81112830:	30016316 	blt	r6,zero,81112dc0 <_dtoa_r+0xd24>
81112834:	800d883a 	mov	r6,r16
81112838:	880f883a 	mov	r7,r17
8111283c:	9009883a 	mov	r4,r18
81112840:	980b883a 	mov	r5,r19
81112844:	111e0dc0 	call	8111e0dc <__divdf3>
81112848:	180b883a 	mov	r5,r3
8111284c:	1009883a 	mov	r4,r2
81112850:	111f5180 	call	8111f518 <__fixdfsi>
81112854:	1009883a 	mov	r4,r2
81112858:	102b883a 	mov	r21,r2
8111285c:	111f5980 	call	8111f598 <__floatsidf>
81112860:	800d883a 	mov	r6,r16
81112864:	880f883a 	mov	r7,r17
81112868:	1009883a 	mov	r4,r2
8111286c:	180b883a 	mov	r5,r3
81112870:	11097240 	call	81109724 <__muldf3>
81112874:	100d883a 	mov	r6,r2
81112878:	180f883a 	mov	r7,r3
8111287c:	9009883a 	mov	r4,r18
81112880:	980b883a 	mov	r5,r19
81112884:	111ec1c0 	call	8111ec1c <__subdf3>
81112888:	d9c00717 	ldw	r7,28(sp)
8111288c:	1009883a 	mov	r4,r2
81112890:	a8800c04 	addi	r2,r21,48
81112894:	38800005 	stb	r2,0(r7)
81112898:	3dc00044 	addi	r23,r7,1
8111289c:	d9c00617 	ldw	r7,24(sp)
811128a0:	01800044 	movi	r6,1
811128a4:	180b883a 	mov	r5,r3
811128a8:	2005883a 	mov	r2,r4
811128ac:	39803826 	beq	r7,r6,81112990 <_dtoa_r+0x8f4>
811128b0:	000d883a 	mov	r6,zero
811128b4:	01d00934 	movhi	r7,16420
811128b8:	11097240 	call	81109724 <__muldf3>
811128bc:	000d883a 	mov	r6,zero
811128c0:	000f883a 	mov	r7,zero
811128c4:	1009883a 	mov	r4,r2
811128c8:	180b883a 	mov	r5,r3
811128cc:	1025883a 	mov	r18,r2
811128d0:	1827883a 	mov	r19,r3
811128d4:	111e9c40 	call	8111e9c4 <__eqdf2>
811128d8:	103f9a26 	beq	r2,zero,81112744 <__reset+0xfb0f2744>
811128dc:	d9c00617 	ldw	r7,24(sp)
811128e0:	d8c00717 	ldw	r3,28(sp)
811128e4:	b829883a 	mov	r20,r23
811128e8:	38bfffc4 	addi	r2,r7,-1
811128ec:	18ad883a 	add	r22,r3,r2
811128f0:	00000a06 	br	8111291c <_dtoa_r+0x880>
811128f4:	11097240 	call	81109724 <__muldf3>
811128f8:	000d883a 	mov	r6,zero
811128fc:	000f883a 	mov	r7,zero
81112900:	1009883a 	mov	r4,r2
81112904:	180b883a 	mov	r5,r3
81112908:	1025883a 	mov	r18,r2
8111290c:	1827883a 	mov	r19,r3
81112910:	b829883a 	mov	r20,r23
81112914:	111e9c40 	call	8111e9c4 <__eqdf2>
81112918:	103f8a26 	beq	r2,zero,81112744 <__reset+0xfb0f2744>
8111291c:	800d883a 	mov	r6,r16
81112920:	880f883a 	mov	r7,r17
81112924:	9009883a 	mov	r4,r18
81112928:	980b883a 	mov	r5,r19
8111292c:	111e0dc0 	call	8111e0dc <__divdf3>
81112930:	180b883a 	mov	r5,r3
81112934:	1009883a 	mov	r4,r2
81112938:	111f5180 	call	8111f518 <__fixdfsi>
8111293c:	1009883a 	mov	r4,r2
81112940:	102b883a 	mov	r21,r2
81112944:	111f5980 	call	8111f598 <__floatsidf>
81112948:	800d883a 	mov	r6,r16
8111294c:	880f883a 	mov	r7,r17
81112950:	1009883a 	mov	r4,r2
81112954:	180b883a 	mov	r5,r3
81112958:	11097240 	call	81109724 <__muldf3>
8111295c:	100d883a 	mov	r6,r2
81112960:	180f883a 	mov	r7,r3
81112964:	9009883a 	mov	r4,r18
81112968:	980b883a 	mov	r5,r19
8111296c:	111ec1c0 	call	8111ec1c <__subdf3>
81112970:	aa000c04 	addi	r8,r21,48
81112974:	a2000005 	stb	r8,0(r20)
81112978:	000d883a 	mov	r6,zero
8111297c:	01d00934 	movhi	r7,16420
81112980:	1009883a 	mov	r4,r2
81112984:	180b883a 	mov	r5,r3
81112988:	a5c00044 	addi	r23,r20,1
8111298c:	b53fd91e 	bne	r22,r20,811128f4 <__reset+0xfb0f28f4>
81112990:	100d883a 	mov	r6,r2
81112994:	180f883a 	mov	r7,r3
81112998:	1009883a 	mov	r4,r2
8111299c:	180b883a 	mov	r5,r3
811129a0:	111d8300 	call	8111d830 <__adddf3>
811129a4:	100d883a 	mov	r6,r2
811129a8:	180f883a 	mov	r7,r3
811129ac:	8009883a 	mov	r4,r16
811129b0:	880b883a 	mov	r5,r17
811129b4:	1027883a 	mov	r19,r2
811129b8:	1825883a 	mov	r18,r3
811129bc:	111eb280 	call	8111eb28 <__ledf2>
811129c0:	10000816 	blt	r2,zero,811129e4 <_dtoa_r+0x948>
811129c4:	980d883a 	mov	r6,r19
811129c8:	900f883a 	mov	r7,r18
811129cc:	8009883a 	mov	r4,r16
811129d0:	880b883a 	mov	r5,r17
811129d4:	111e9c40 	call	8111e9c4 <__eqdf2>
811129d8:	103f5a1e 	bne	r2,zero,81112744 <__reset+0xfb0f2744>
811129dc:	ad40004c 	andi	r21,r21,1
811129e0:	a83f5826 	beq	r21,zero,81112744 <__reset+0xfb0f2744>
811129e4:	bd3fffc3 	ldbu	r20,-1(r23)
811129e8:	b8bfffc4 	addi	r2,r23,-1
811129ec:	1007883a 	mov	r3,r2
811129f0:	01400e44 	movi	r5,57
811129f4:	d9800717 	ldw	r6,28(sp)
811129f8:	00000506 	br	81112a10 <_dtoa_r+0x974>
811129fc:	18ffffc4 	addi	r3,r3,-1
81112a00:	11824726 	beq	r2,r6,81113320 <_dtoa_r+0x1284>
81112a04:	1d000003 	ldbu	r20,0(r3)
81112a08:	102f883a 	mov	r23,r2
81112a0c:	10bfffc4 	addi	r2,r2,-1
81112a10:	a1003fcc 	andi	r4,r20,255
81112a14:	2100201c 	xori	r4,r4,128
81112a18:	213fe004 	addi	r4,r4,-128
81112a1c:	217ff726 	beq	r4,r5,811129fc <__reset+0xfb0f29fc>
81112a20:	a2000044 	addi	r8,r20,1
81112a24:	12000005 	stb	r8,0(r2)
81112a28:	003f4606 	br	81112744 <__reset+0xfb0f2744>
81112a2c:	d9000b17 	ldw	r4,44(sp)
81112a30:	2000c826 	beq	r4,zero,81112d54 <_dtoa_r+0xcb8>
81112a34:	d9800317 	ldw	r6,12(sp)
81112a38:	00c00044 	movi	r3,1
81112a3c:	1980f90e 	bge	r3,r6,81112e24 <_dtoa_r+0xd88>
81112a40:	d8800617 	ldw	r2,24(sp)
81112a44:	d8c00a17 	ldw	r3,40(sp)
81112a48:	157fffc4 	addi	r21,r2,-1
81112a4c:	1d41f316 	blt	r3,r21,8111321c <_dtoa_r+0x1180>
81112a50:	1d6bc83a 	sub	r21,r3,r21
81112a54:	d9c00617 	ldw	r7,24(sp)
81112a58:	3802aa16 	blt	r7,zero,81113504 <_dtoa_r+0x1468>
81112a5c:	dd000817 	ldw	r20,32(sp)
81112a60:	d8800617 	ldw	r2,24(sp)
81112a64:	d8c00817 	ldw	r3,32(sp)
81112a68:	01400044 	movi	r5,1
81112a6c:	e009883a 	mov	r4,fp
81112a70:	1887883a 	add	r3,r3,r2
81112a74:	d8c00815 	stw	r3,32(sp)
81112a78:	b0ad883a 	add	r22,r22,r2
81112a7c:	11155200 	call	81115520 <__i2b>
81112a80:	1023883a 	mov	r17,r2
81112a84:	a0000826 	beq	r20,zero,81112aa8 <_dtoa_r+0xa0c>
81112a88:	0580070e 	bge	zero,r22,81112aa8 <_dtoa_r+0xa0c>
81112a8c:	a005883a 	mov	r2,r20
81112a90:	b500b916 	blt	r22,r20,81112d78 <_dtoa_r+0xcdc>
81112a94:	d9000817 	ldw	r4,32(sp)
81112a98:	a0a9c83a 	sub	r20,r20,r2
81112a9c:	b0adc83a 	sub	r22,r22,r2
81112aa0:	2089c83a 	sub	r4,r4,r2
81112aa4:	d9000815 	stw	r4,32(sp)
81112aa8:	d9800a17 	ldw	r6,40(sp)
81112aac:	0181810e 	bge	zero,r6,811130b4 <_dtoa_r+0x1018>
81112ab0:	d9c00b17 	ldw	r7,44(sp)
81112ab4:	3800b326 	beq	r7,zero,81112d84 <_dtoa_r+0xce8>
81112ab8:	a800b226 	beq	r21,zero,81112d84 <_dtoa_r+0xce8>
81112abc:	880b883a 	mov	r5,r17
81112ac0:	a80d883a 	mov	r6,r21
81112ac4:	e009883a 	mov	r4,fp
81112ac8:	11157540 	call	81115754 <__pow5mult>
81112acc:	d9800917 	ldw	r6,36(sp)
81112ad0:	100b883a 	mov	r5,r2
81112ad4:	e009883a 	mov	r4,fp
81112ad8:	1023883a 	mov	r17,r2
81112adc:	111555c0 	call	8111555c <__multiply>
81112ae0:	1021883a 	mov	r16,r2
81112ae4:	d8800a17 	ldw	r2,40(sp)
81112ae8:	d9400917 	ldw	r5,36(sp)
81112aec:	e009883a 	mov	r4,fp
81112af0:	1545c83a 	sub	r2,r2,r21
81112af4:	d8800a15 	stw	r2,40(sp)
81112af8:	11151bc0 	call	811151bc <_Bfree>
81112afc:	d8c00a17 	ldw	r3,40(sp)
81112b00:	18009f1e 	bne	r3,zero,81112d80 <_dtoa_r+0xce4>
81112b04:	05c00044 	movi	r23,1
81112b08:	e009883a 	mov	r4,fp
81112b0c:	b80b883a 	mov	r5,r23
81112b10:	11155200 	call	81115520 <__i2b>
81112b14:	d9000d17 	ldw	r4,52(sp)
81112b18:	102b883a 	mov	r21,r2
81112b1c:	2000ce26 	beq	r4,zero,81112e58 <_dtoa_r+0xdbc>
81112b20:	200d883a 	mov	r6,r4
81112b24:	100b883a 	mov	r5,r2
81112b28:	e009883a 	mov	r4,fp
81112b2c:	11157540 	call	81115754 <__pow5mult>
81112b30:	d9800317 	ldw	r6,12(sp)
81112b34:	102b883a 	mov	r21,r2
81112b38:	b981810e 	bge	r23,r6,81113140 <_dtoa_r+0x10a4>
81112b3c:	0027883a 	mov	r19,zero
81112b40:	a8800417 	ldw	r2,16(r21)
81112b44:	05c00804 	movi	r23,32
81112b48:	10800104 	addi	r2,r2,4
81112b4c:	1085883a 	add	r2,r2,r2
81112b50:	1085883a 	add	r2,r2,r2
81112b54:	a885883a 	add	r2,r21,r2
81112b58:	11000017 	ldw	r4,0(r2)
81112b5c:	11154080 	call	81115408 <__hi0bits>
81112b60:	b885c83a 	sub	r2,r23,r2
81112b64:	1585883a 	add	r2,r2,r22
81112b68:	108007cc 	andi	r2,r2,31
81112b6c:	1000b326 	beq	r2,zero,81112e3c <_dtoa_r+0xda0>
81112b70:	00c00804 	movi	r3,32
81112b74:	1887c83a 	sub	r3,r3,r2
81112b78:	01000104 	movi	r4,4
81112b7c:	20c2cd0e 	bge	r4,r3,811136b4 <_dtoa_r+0x1618>
81112b80:	00c00704 	movi	r3,28
81112b84:	1885c83a 	sub	r2,r3,r2
81112b88:	d8c00817 	ldw	r3,32(sp)
81112b8c:	a0a9883a 	add	r20,r20,r2
81112b90:	b0ad883a 	add	r22,r22,r2
81112b94:	1887883a 	add	r3,r3,r2
81112b98:	d8c00815 	stw	r3,32(sp)
81112b9c:	d9800817 	ldw	r6,32(sp)
81112ba0:	0180040e 	bge	zero,r6,81112bb4 <_dtoa_r+0xb18>
81112ba4:	800b883a 	mov	r5,r16
81112ba8:	e009883a 	mov	r4,fp
81112bac:	11158940 	call	81115894 <__lshift>
81112bb0:	1021883a 	mov	r16,r2
81112bb4:	0580050e 	bge	zero,r22,81112bcc <_dtoa_r+0xb30>
81112bb8:	a80b883a 	mov	r5,r21
81112bbc:	b00d883a 	mov	r6,r22
81112bc0:	e009883a 	mov	r4,fp
81112bc4:	11158940 	call	81115894 <__lshift>
81112bc8:	102b883a 	mov	r21,r2
81112bcc:	d9c00e17 	ldw	r7,56(sp)
81112bd0:	3801211e 	bne	r7,zero,81113058 <_dtoa_r+0xfbc>
81112bd4:	d9800617 	ldw	r6,24(sp)
81112bd8:	0181380e 	bge	zero,r6,811130bc <_dtoa_r+0x1020>
81112bdc:	d8c00b17 	ldw	r3,44(sp)
81112be0:	1800ab1e 	bne	r3,zero,81112e90 <_dtoa_r+0xdf4>
81112be4:	dc800717 	ldw	r18,28(sp)
81112be8:	dcc00617 	ldw	r19,24(sp)
81112bec:	9029883a 	mov	r20,r18
81112bf0:	00000206 	br	81112bfc <_dtoa_r+0xb60>
81112bf4:	11151e40 	call	811151e4 <__multadd>
81112bf8:	1021883a 	mov	r16,r2
81112bfc:	a80b883a 	mov	r5,r21
81112c00:	8009883a 	mov	r4,r16
81112c04:	1111e9c0 	call	81111e9c <quorem>
81112c08:	10800c04 	addi	r2,r2,48
81112c0c:	90800005 	stb	r2,0(r18)
81112c10:	94800044 	addi	r18,r18,1
81112c14:	9507c83a 	sub	r3,r18,r20
81112c18:	000f883a 	mov	r7,zero
81112c1c:	01800284 	movi	r6,10
81112c20:	800b883a 	mov	r5,r16
81112c24:	e009883a 	mov	r4,fp
81112c28:	1cfff216 	blt	r3,r19,81112bf4 <__reset+0xfb0f2bf4>
81112c2c:	1011883a 	mov	r8,r2
81112c30:	d8800617 	ldw	r2,24(sp)
81112c34:	0082370e 	bge	zero,r2,81113514 <_dtoa_r+0x1478>
81112c38:	d9000717 	ldw	r4,28(sp)
81112c3c:	0025883a 	mov	r18,zero
81112c40:	20af883a 	add	r23,r4,r2
81112c44:	01800044 	movi	r6,1
81112c48:	800b883a 	mov	r5,r16
81112c4c:	e009883a 	mov	r4,fp
81112c50:	da001715 	stw	r8,92(sp)
81112c54:	11158940 	call	81115894 <__lshift>
81112c58:	a80b883a 	mov	r5,r21
81112c5c:	1009883a 	mov	r4,r2
81112c60:	d8800915 	stw	r2,36(sp)
81112c64:	11159dc0 	call	811159dc <__mcmp>
81112c68:	da001717 	ldw	r8,92(sp)
81112c6c:	0081800e 	bge	zero,r2,81113270 <_dtoa_r+0x11d4>
81112c70:	b93fffc3 	ldbu	r4,-1(r23)
81112c74:	b8bfffc4 	addi	r2,r23,-1
81112c78:	1007883a 	mov	r3,r2
81112c7c:	01800e44 	movi	r6,57
81112c80:	d9c00717 	ldw	r7,28(sp)
81112c84:	00000506 	br	81112c9c <_dtoa_r+0xc00>
81112c88:	18ffffc4 	addi	r3,r3,-1
81112c8c:	11c12326 	beq	r2,r7,8111311c <_dtoa_r+0x1080>
81112c90:	19000003 	ldbu	r4,0(r3)
81112c94:	102f883a 	mov	r23,r2
81112c98:	10bfffc4 	addi	r2,r2,-1
81112c9c:	21403fcc 	andi	r5,r4,255
81112ca0:	2940201c 	xori	r5,r5,128
81112ca4:	297fe004 	addi	r5,r5,-128
81112ca8:	29bff726 	beq	r5,r6,81112c88 <__reset+0xfb0f2c88>
81112cac:	21000044 	addi	r4,r4,1
81112cb0:	11000005 	stb	r4,0(r2)
81112cb4:	a80b883a 	mov	r5,r21
81112cb8:	e009883a 	mov	r4,fp
81112cbc:	11151bc0 	call	811151bc <_Bfree>
81112cc0:	883ea026 	beq	r17,zero,81112744 <__reset+0xfb0f2744>
81112cc4:	90000426 	beq	r18,zero,81112cd8 <_dtoa_r+0xc3c>
81112cc8:	94400326 	beq	r18,r17,81112cd8 <_dtoa_r+0xc3c>
81112ccc:	900b883a 	mov	r5,r18
81112cd0:	e009883a 	mov	r4,fp
81112cd4:	11151bc0 	call	811151bc <_Bfree>
81112cd8:	880b883a 	mov	r5,r17
81112cdc:	e009883a 	mov	r4,fp
81112ce0:	11151bc0 	call	811151bc <_Bfree>
81112ce4:	003e9706 	br	81112744 <__reset+0xfb0f2744>
81112ce8:	01800044 	movi	r6,1
81112cec:	d9800e15 	stw	r6,56(sp)
81112cf0:	003d9606 	br	8111234c <__reset+0xfb0f234c>
81112cf4:	d8800817 	ldw	r2,32(sp)
81112cf8:	d8c00517 	ldw	r3,20(sp)
81112cfc:	d8000d15 	stw	zero,52(sp)
81112d00:	10c5c83a 	sub	r2,r2,r3
81112d04:	00c9c83a 	sub	r4,zero,r3
81112d08:	d8800815 	stw	r2,32(sp)
81112d0c:	d9000a15 	stw	r4,40(sp)
81112d10:	003d9706 	br	81112370 <__reset+0xfb0f2370>
81112d14:	05adc83a 	sub	r22,zero,r22
81112d18:	dd800815 	stw	r22,32(sp)
81112d1c:	002d883a 	mov	r22,zero
81112d20:	003d8e06 	br	8111235c <__reset+0xfb0f235c>
81112d24:	d9000517 	ldw	r4,20(sp)
81112d28:	111f5980 	call	8111f598 <__floatsidf>
81112d2c:	100d883a 	mov	r6,r2
81112d30:	180f883a 	mov	r7,r3
81112d34:	a009883a 	mov	r4,r20
81112d38:	880b883a 	mov	r5,r17
81112d3c:	111e9c40 	call	8111e9c4 <__eqdf2>
81112d40:	103d7126 	beq	r2,zero,81112308 <__reset+0xfb0f2308>
81112d44:	d9c00517 	ldw	r7,20(sp)
81112d48:	39ffffc4 	addi	r7,r7,-1
81112d4c:	d9c00515 	stw	r7,20(sp)
81112d50:	003d6d06 	br	81112308 <__reset+0xfb0f2308>
81112d54:	dd400a17 	ldw	r21,40(sp)
81112d58:	dd000817 	ldw	r20,32(sp)
81112d5c:	0023883a 	mov	r17,zero
81112d60:	003f4806 	br	81112a84 <__reset+0xfb0f2a84>
81112d64:	10e3c83a 	sub	r17,r2,r3
81112d68:	9448983a 	sll	r4,r18,r17
81112d6c:	003d3206 	br	81112238 <__reset+0xfb0f2238>
81112d70:	d8000e15 	stw	zero,56(sp)
81112d74:	003d7506 	br	8111234c <__reset+0xfb0f234c>
81112d78:	b005883a 	mov	r2,r22
81112d7c:	003f4506 	br	81112a94 <__reset+0xfb0f2a94>
81112d80:	dc000915 	stw	r16,36(sp)
81112d84:	d9800a17 	ldw	r6,40(sp)
81112d88:	d9400917 	ldw	r5,36(sp)
81112d8c:	e009883a 	mov	r4,fp
81112d90:	11157540 	call	81115754 <__pow5mult>
81112d94:	1021883a 	mov	r16,r2
81112d98:	003f5a06 	br	81112b04 <__reset+0xfb0f2b04>
81112d9c:	01c00044 	movi	r7,1
81112da0:	d9c00b15 	stw	r7,44(sp)
81112da4:	d8802217 	ldw	r2,136(sp)
81112da8:	0081280e 	bge	zero,r2,8111324c <_dtoa_r+0x11b0>
81112dac:	100d883a 	mov	r6,r2
81112db0:	1021883a 	mov	r16,r2
81112db4:	d8800c15 	stw	r2,48(sp)
81112db8:	d8800615 	stw	r2,24(sp)
81112dbc:	003d8806 	br	811123e0 <__reset+0xfb0f23e0>
81112dc0:	d8800617 	ldw	r2,24(sp)
81112dc4:	00be9b16 	blt	zero,r2,81112834 <__reset+0xfb0f2834>
81112dc8:	10010f1e 	bne	r2,zero,81113208 <_dtoa_r+0x116c>
81112dcc:	880b883a 	mov	r5,r17
81112dd0:	000d883a 	mov	r6,zero
81112dd4:	01d00534 	movhi	r7,16404
81112dd8:	8009883a 	mov	r4,r16
81112ddc:	11097240 	call	81109724 <__muldf3>
81112de0:	900d883a 	mov	r6,r18
81112de4:	980f883a 	mov	r7,r19
81112de8:	1009883a 	mov	r4,r2
81112dec:	180b883a 	mov	r5,r3
81112df0:	111ea4c0 	call	8111ea4c <__gedf2>
81112df4:	002b883a 	mov	r21,zero
81112df8:	0023883a 	mov	r17,zero
81112dfc:	1000bf16 	blt	r2,zero,811130fc <_dtoa_r+0x1060>
81112e00:	d9802217 	ldw	r6,136(sp)
81112e04:	ddc00717 	ldw	r23,28(sp)
81112e08:	018c303a 	nor	r6,zero,r6
81112e0c:	d9800515 	stw	r6,20(sp)
81112e10:	a80b883a 	mov	r5,r21
81112e14:	e009883a 	mov	r4,fp
81112e18:	11151bc0 	call	811151bc <_Bfree>
81112e1c:	883e4926 	beq	r17,zero,81112744 <__reset+0xfb0f2744>
81112e20:	003fad06 	br	81112cd8 <__reset+0xfb0f2cd8>
81112e24:	d9c01117 	ldw	r7,68(sp)
81112e28:	3801bc26 	beq	r7,zero,8111351c <_dtoa_r+0x1480>
81112e2c:	10810cc4 	addi	r2,r2,1075
81112e30:	dd400a17 	ldw	r21,40(sp)
81112e34:	dd000817 	ldw	r20,32(sp)
81112e38:	003f0a06 	br	81112a64 <__reset+0xfb0f2a64>
81112e3c:	00800704 	movi	r2,28
81112e40:	d9000817 	ldw	r4,32(sp)
81112e44:	a0a9883a 	add	r20,r20,r2
81112e48:	b0ad883a 	add	r22,r22,r2
81112e4c:	2089883a 	add	r4,r4,r2
81112e50:	d9000815 	stw	r4,32(sp)
81112e54:	003f5106 	br	81112b9c <__reset+0xfb0f2b9c>
81112e58:	d8c00317 	ldw	r3,12(sp)
81112e5c:	b8c1fc0e 	bge	r23,r3,81113650 <_dtoa_r+0x15b4>
81112e60:	0027883a 	mov	r19,zero
81112e64:	b805883a 	mov	r2,r23
81112e68:	003f3e06 	br	81112b64 <__reset+0xfb0f2b64>
81112e6c:	880b883a 	mov	r5,r17
81112e70:	e009883a 	mov	r4,fp
81112e74:	000f883a 	mov	r7,zero
81112e78:	01800284 	movi	r6,10
81112e7c:	11151e40 	call	811151e4 <__multadd>
81112e80:	d9000c17 	ldw	r4,48(sp)
81112e84:	1023883a 	mov	r17,r2
81112e88:	0102040e 	bge	zero,r4,8111369c <_dtoa_r+0x1600>
81112e8c:	d9000615 	stw	r4,24(sp)
81112e90:	0500050e 	bge	zero,r20,81112ea8 <_dtoa_r+0xe0c>
81112e94:	880b883a 	mov	r5,r17
81112e98:	a00d883a 	mov	r6,r20
81112e9c:	e009883a 	mov	r4,fp
81112ea0:	11158940 	call	81115894 <__lshift>
81112ea4:	1023883a 	mov	r17,r2
81112ea8:	9801241e 	bne	r19,zero,8111333c <_dtoa_r+0x12a0>
81112eac:	8829883a 	mov	r20,r17
81112eb0:	d9000617 	ldw	r4,24(sp)
81112eb4:	dcc00717 	ldw	r19,28(sp)
81112eb8:	9480004c 	andi	r18,r18,1
81112ebc:	20bfffc4 	addi	r2,r4,-1
81112ec0:	9885883a 	add	r2,r19,r2
81112ec4:	d8800415 	stw	r2,16(sp)
81112ec8:	dc800615 	stw	r18,24(sp)
81112ecc:	a80b883a 	mov	r5,r21
81112ed0:	8009883a 	mov	r4,r16
81112ed4:	1111e9c0 	call	81111e9c <quorem>
81112ed8:	880b883a 	mov	r5,r17
81112edc:	8009883a 	mov	r4,r16
81112ee0:	102f883a 	mov	r23,r2
81112ee4:	11159dc0 	call	811159dc <__mcmp>
81112ee8:	a80b883a 	mov	r5,r21
81112eec:	a00d883a 	mov	r6,r20
81112ef0:	e009883a 	mov	r4,fp
81112ef4:	102d883a 	mov	r22,r2
81112ef8:	1115a3c0 	call	81115a3c <__mdiff>
81112efc:	1007883a 	mov	r3,r2
81112f00:	10800317 	ldw	r2,12(r2)
81112f04:	bc800c04 	addi	r18,r23,48
81112f08:	180b883a 	mov	r5,r3
81112f0c:	10004e1e 	bne	r2,zero,81113048 <_dtoa_r+0xfac>
81112f10:	8009883a 	mov	r4,r16
81112f14:	d8c01615 	stw	r3,88(sp)
81112f18:	11159dc0 	call	811159dc <__mcmp>
81112f1c:	d8c01617 	ldw	r3,88(sp)
81112f20:	e009883a 	mov	r4,fp
81112f24:	d8801615 	stw	r2,88(sp)
81112f28:	180b883a 	mov	r5,r3
81112f2c:	11151bc0 	call	811151bc <_Bfree>
81112f30:	d8801617 	ldw	r2,88(sp)
81112f34:	1000041e 	bne	r2,zero,81112f48 <_dtoa_r+0xeac>
81112f38:	d9800317 	ldw	r6,12(sp)
81112f3c:	3000021e 	bne	r6,zero,81112f48 <_dtoa_r+0xeac>
81112f40:	d8c00617 	ldw	r3,24(sp)
81112f44:	18003726 	beq	r3,zero,81113024 <_dtoa_r+0xf88>
81112f48:	b0002016 	blt	r22,zero,81112fcc <_dtoa_r+0xf30>
81112f4c:	b000041e 	bne	r22,zero,81112f60 <_dtoa_r+0xec4>
81112f50:	d9000317 	ldw	r4,12(sp)
81112f54:	2000021e 	bne	r4,zero,81112f60 <_dtoa_r+0xec4>
81112f58:	d8c00617 	ldw	r3,24(sp)
81112f5c:	18001b26 	beq	r3,zero,81112fcc <_dtoa_r+0xf30>
81112f60:	00810716 	blt	zero,r2,81113380 <_dtoa_r+0x12e4>
81112f64:	d8c00417 	ldw	r3,16(sp)
81112f68:	9d800044 	addi	r22,r19,1
81112f6c:	9c800005 	stb	r18,0(r19)
81112f70:	b02f883a 	mov	r23,r22
81112f74:	98c10626 	beq	r19,r3,81113390 <_dtoa_r+0x12f4>
81112f78:	800b883a 	mov	r5,r16
81112f7c:	000f883a 	mov	r7,zero
81112f80:	01800284 	movi	r6,10
81112f84:	e009883a 	mov	r4,fp
81112f88:	11151e40 	call	811151e4 <__multadd>
81112f8c:	1021883a 	mov	r16,r2
81112f90:	000f883a 	mov	r7,zero
81112f94:	01800284 	movi	r6,10
81112f98:	880b883a 	mov	r5,r17
81112f9c:	e009883a 	mov	r4,fp
81112fa0:	8d002526 	beq	r17,r20,81113038 <_dtoa_r+0xf9c>
81112fa4:	11151e40 	call	811151e4 <__multadd>
81112fa8:	a00b883a 	mov	r5,r20
81112fac:	000f883a 	mov	r7,zero
81112fb0:	01800284 	movi	r6,10
81112fb4:	e009883a 	mov	r4,fp
81112fb8:	1023883a 	mov	r17,r2
81112fbc:	11151e40 	call	811151e4 <__multadd>
81112fc0:	1029883a 	mov	r20,r2
81112fc4:	b027883a 	mov	r19,r22
81112fc8:	003fc006 	br	81112ecc <__reset+0xfb0f2ecc>
81112fcc:	9011883a 	mov	r8,r18
81112fd0:	00800e0e 	bge	zero,r2,8111300c <_dtoa_r+0xf70>
81112fd4:	800b883a 	mov	r5,r16
81112fd8:	01800044 	movi	r6,1
81112fdc:	e009883a 	mov	r4,fp
81112fe0:	da001715 	stw	r8,92(sp)
81112fe4:	11158940 	call	81115894 <__lshift>
81112fe8:	a80b883a 	mov	r5,r21
81112fec:	1009883a 	mov	r4,r2
81112ff0:	1021883a 	mov	r16,r2
81112ff4:	11159dc0 	call	811159dc <__mcmp>
81112ff8:	da001717 	ldw	r8,92(sp)
81112ffc:	0081960e 	bge	zero,r2,81113658 <_dtoa_r+0x15bc>
81113000:	00800e44 	movi	r2,57
81113004:	40817026 	beq	r8,r2,811135c8 <_dtoa_r+0x152c>
81113008:	ba000c44 	addi	r8,r23,49
8111300c:	8825883a 	mov	r18,r17
81113010:	9dc00044 	addi	r23,r19,1
81113014:	9a000005 	stb	r8,0(r19)
81113018:	a023883a 	mov	r17,r20
8111301c:	dc000915 	stw	r16,36(sp)
81113020:	003f2406 	br	81112cb4 <__reset+0xfb0f2cb4>
81113024:	00800e44 	movi	r2,57
81113028:	9011883a 	mov	r8,r18
8111302c:	90816626 	beq	r18,r2,811135c8 <_dtoa_r+0x152c>
81113030:	05bff516 	blt	zero,r22,81113008 <__reset+0xfb0f3008>
81113034:	003ff506 	br	8111300c <__reset+0xfb0f300c>
81113038:	11151e40 	call	811151e4 <__multadd>
8111303c:	1023883a 	mov	r17,r2
81113040:	1029883a 	mov	r20,r2
81113044:	003fdf06 	br	81112fc4 <__reset+0xfb0f2fc4>
81113048:	e009883a 	mov	r4,fp
8111304c:	11151bc0 	call	811151bc <_Bfree>
81113050:	00800044 	movi	r2,1
81113054:	003fbc06 	br	81112f48 <__reset+0xfb0f2f48>
81113058:	a80b883a 	mov	r5,r21
8111305c:	8009883a 	mov	r4,r16
81113060:	11159dc0 	call	811159dc <__mcmp>
81113064:	103edb0e 	bge	r2,zero,81112bd4 <__reset+0xfb0f2bd4>
81113068:	800b883a 	mov	r5,r16
8111306c:	000f883a 	mov	r7,zero
81113070:	01800284 	movi	r6,10
81113074:	e009883a 	mov	r4,fp
81113078:	11151e40 	call	811151e4 <__multadd>
8111307c:	1021883a 	mov	r16,r2
81113080:	d8800517 	ldw	r2,20(sp)
81113084:	d8c00b17 	ldw	r3,44(sp)
81113088:	10bfffc4 	addi	r2,r2,-1
8111308c:	d8800515 	stw	r2,20(sp)
81113090:	183f761e 	bne	r3,zero,81112e6c <__reset+0xfb0f2e6c>
81113094:	d9000c17 	ldw	r4,48(sp)
81113098:	0101730e 	bge	zero,r4,81113668 <_dtoa_r+0x15cc>
8111309c:	d9000615 	stw	r4,24(sp)
811130a0:	003ed006 	br	81112be4 <__reset+0xfb0f2be4>
811130a4:	00800084 	movi	r2,2
811130a8:	3081861e 	bne	r6,r2,811136c4 <_dtoa_r+0x1628>
811130ac:	d8000b15 	stw	zero,44(sp)
811130b0:	003f3c06 	br	81112da4 <__reset+0xfb0f2da4>
811130b4:	dc000917 	ldw	r16,36(sp)
811130b8:	003e9206 	br	81112b04 <__reset+0xfb0f2b04>
811130bc:	d9c00317 	ldw	r7,12(sp)
811130c0:	00800084 	movi	r2,2
811130c4:	11fec50e 	bge	r2,r7,81112bdc <__reset+0xfb0f2bdc>
811130c8:	d9000617 	ldw	r4,24(sp)
811130cc:	20013c1e 	bne	r4,zero,811135c0 <_dtoa_r+0x1524>
811130d0:	a80b883a 	mov	r5,r21
811130d4:	000f883a 	mov	r7,zero
811130d8:	01800144 	movi	r6,5
811130dc:	e009883a 	mov	r4,fp
811130e0:	11151e40 	call	811151e4 <__multadd>
811130e4:	100b883a 	mov	r5,r2
811130e8:	8009883a 	mov	r4,r16
811130ec:	102b883a 	mov	r21,r2
811130f0:	11159dc0 	call	811159dc <__mcmp>
811130f4:	dc000915 	stw	r16,36(sp)
811130f8:	00bf410e 	bge	zero,r2,81112e00 <__reset+0xfb0f2e00>
811130fc:	d9c00717 	ldw	r7,28(sp)
81113100:	00800c44 	movi	r2,49
81113104:	38800005 	stb	r2,0(r7)
81113108:	d8800517 	ldw	r2,20(sp)
8111310c:	3dc00044 	addi	r23,r7,1
81113110:	10800044 	addi	r2,r2,1
81113114:	d8800515 	stw	r2,20(sp)
81113118:	003f3d06 	br	81112e10 <__reset+0xfb0f2e10>
8111311c:	d9800517 	ldw	r6,20(sp)
81113120:	d9c00717 	ldw	r7,28(sp)
81113124:	00800c44 	movi	r2,49
81113128:	31800044 	addi	r6,r6,1
8111312c:	d9800515 	stw	r6,20(sp)
81113130:	38800005 	stb	r2,0(r7)
81113134:	003edf06 	br	81112cb4 <__reset+0xfb0f2cb4>
81113138:	d8000b15 	stw	zero,44(sp)
8111313c:	003c9f06 	br	811123bc <__reset+0xfb0f23bc>
81113140:	903e7e1e 	bne	r18,zero,81112b3c <__reset+0xfb0f2b3c>
81113144:	00800434 	movhi	r2,16
81113148:	10bfffc4 	addi	r2,r2,-1
8111314c:	9884703a 	and	r2,r19,r2
81113150:	1000ea1e 	bne	r2,zero,811134fc <_dtoa_r+0x1460>
81113154:	9cdffc2c 	andhi	r19,r19,32752
81113158:	9800e826 	beq	r19,zero,811134fc <_dtoa_r+0x1460>
8111315c:	d9c00817 	ldw	r7,32(sp)
81113160:	b5800044 	addi	r22,r22,1
81113164:	04c00044 	movi	r19,1
81113168:	39c00044 	addi	r7,r7,1
8111316c:	d9c00815 	stw	r7,32(sp)
81113170:	d8800d17 	ldw	r2,52(sp)
81113174:	103e721e 	bne	r2,zero,81112b40 <__reset+0xfb0f2b40>
81113178:	00800044 	movi	r2,1
8111317c:	003e7906 	br	81112b64 <__reset+0xfb0f2b64>
81113180:	8009883a 	mov	r4,r16
81113184:	111f5980 	call	8111f598 <__floatsidf>
81113188:	d9800f17 	ldw	r6,60(sp)
8111318c:	d9c01017 	ldw	r7,64(sp)
81113190:	1009883a 	mov	r4,r2
81113194:	180b883a 	mov	r5,r3
81113198:	11097240 	call	81109724 <__muldf3>
8111319c:	000d883a 	mov	r6,zero
811131a0:	01d00734 	movhi	r7,16412
811131a4:	1009883a 	mov	r4,r2
811131a8:	180b883a 	mov	r5,r3
811131ac:	111d8300 	call	8111d830 <__adddf3>
811131b0:	047f3034 	movhi	r17,64704
811131b4:	1021883a 	mov	r16,r2
811131b8:	1c63883a 	add	r17,r3,r17
811131bc:	d9000f17 	ldw	r4,60(sp)
811131c0:	d9401017 	ldw	r5,64(sp)
811131c4:	000d883a 	mov	r6,zero
811131c8:	01d00534 	movhi	r7,16404
811131cc:	111ec1c0 	call	8111ec1c <__subdf3>
811131d0:	800d883a 	mov	r6,r16
811131d4:	880f883a 	mov	r7,r17
811131d8:	1009883a 	mov	r4,r2
811131dc:	180b883a 	mov	r5,r3
811131e0:	102b883a 	mov	r21,r2
811131e4:	1829883a 	mov	r20,r3
811131e8:	111ea4c0 	call	8111ea4c <__gedf2>
811131ec:	00806c16 	blt	zero,r2,811133a0 <_dtoa_r+0x1304>
811131f0:	89e0003c 	xorhi	r7,r17,32768
811131f4:	800d883a 	mov	r6,r16
811131f8:	a809883a 	mov	r4,r21
811131fc:	a00b883a 	mov	r5,r20
81113200:	111eb280 	call	8111eb28 <__ledf2>
81113204:	103d7e0e 	bge	r2,zero,81112800 <__reset+0xfb0f2800>
81113208:	002b883a 	mov	r21,zero
8111320c:	0023883a 	mov	r17,zero
81113210:	003efb06 	br	81112e00 <__reset+0xfb0f2e00>
81113214:	d8800717 	ldw	r2,28(sp)
81113218:	003bd006 	br	8111215c <__reset+0xfb0f215c>
8111321c:	d9000a17 	ldw	r4,40(sp)
81113220:	d9800d17 	ldw	r6,52(sp)
81113224:	dd400a15 	stw	r21,40(sp)
81113228:	a905c83a 	sub	r2,r21,r4
8111322c:	308d883a 	add	r6,r6,r2
81113230:	d9800d15 	stw	r6,52(sp)
81113234:	002b883a 	mov	r21,zero
81113238:	003e0606 	br	81112a54 <__reset+0xfb0f2a54>
8111323c:	9023883a 	mov	r17,r18
81113240:	9829883a 	mov	r20,r19
81113244:	04000084 	movi	r16,2
81113248:	003c9206 	br	81112494 <__reset+0xfb0f2494>
8111324c:	04000044 	movi	r16,1
81113250:	dc000c15 	stw	r16,48(sp)
81113254:	dc000615 	stw	r16,24(sp)
81113258:	dc002215 	stw	r16,136(sp)
8111325c:	e0001115 	stw	zero,68(fp)
81113260:	000b883a 	mov	r5,zero
81113264:	003c6906 	br	8111240c <__reset+0xfb0f240c>
81113268:	3021883a 	mov	r16,r6
8111326c:	003ffb06 	br	8111325c <__reset+0xfb0f325c>
81113270:	1000021e 	bne	r2,zero,8111327c <_dtoa_r+0x11e0>
81113274:	4200004c 	andi	r8,r8,1
81113278:	403e7d1e 	bne	r8,zero,81112c70 <__reset+0xfb0f2c70>
8111327c:	01000c04 	movi	r4,48
81113280:	00000106 	br	81113288 <_dtoa_r+0x11ec>
81113284:	102f883a 	mov	r23,r2
81113288:	b8bfffc4 	addi	r2,r23,-1
8111328c:	10c00007 	ldb	r3,0(r2)
81113290:	193ffc26 	beq	r3,r4,81113284 <__reset+0xfb0f3284>
81113294:	003e8706 	br	81112cb4 <__reset+0xfb0f2cb4>
81113298:	d8800517 	ldw	r2,20(sp)
8111329c:	00a3c83a 	sub	r17,zero,r2
811132a0:	8800a426 	beq	r17,zero,81113534 <_dtoa_r+0x1498>
811132a4:	888003cc 	andi	r2,r17,15
811132a8:	100490fa 	slli	r2,r2,3
811132ac:	00e044f4 	movhi	r3,33043
811132b0:	18ceac04 	addi	r3,r3,15024
811132b4:	1885883a 	add	r2,r3,r2
811132b8:	11800017 	ldw	r6,0(r2)
811132bc:	11c00117 	ldw	r7,4(r2)
811132c0:	9009883a 	mov	r4,r18
811132c4:	980b883a 	mov	r5,r19
811132c8:	8823d13a 	srai	r17,r17,4
811132cc:	11097240 	call	81109724 <__muldf3>
811132d0:	d8800f15 	stw	r2,60(sp)
811132d4:	d8c01015 	stw	r3,64(sp)
811132d8:	8800e826 	beq	r17,zero,8111367c <_dtoa_r+0x15e0>
811132dc:	052044f4 	movhi	r20,33043
811132e0:	a50ea204 	addi	r20,r20,14984
811132e4:	04000084 	movi	r16,2
811132e8:	8980004c 	andi	r6,r17,1
811132ec:	1009883a 	mov	r4,r2
811132f0:	8823d07a 	srai	r17,r17,1
811132f4:	180b883a 	mov	r5,r3
811132f8:	30000426 	beq	r6,zero,8111330c <_dtoa_r+0x1270>
811132fc:	a1800017 	ldw	r6,0(r20)
81113300:	a1c00117 	ldw	r7,4(r20)
81113304:	84000044 	addi	r16,r16,1
81113308:	11097240 	call	81109724 <__muldf3>
8111330c:	a5000204 	addi	r20,r20,8
81113310:	883ff51e 	bne	r17,zero,811132e8 <__reset+0xfb0f32e8>
81113314:	d8800f15 	stw	r2,60(sp)
81113318:	d8c01015 	stw	r3,64(sp)
8111331c:	003c7606 	br	811124f8 <__reset+0xfb0f24f8>
81113320:	00c00c04 	movi	r3,48
81113324:	10c00005 	stb	r3,0(r2)
81113328:	d8c00517 	ldw	r3,20(sp)
8111332c:	bd3fffc3 	ldbu	r20,-1(r23)
81113330:	18c00044 	addi	r3,r3,1
81113334:	d8c00515 	stw	r3,20(sp)
81113338:	003db906 	br	81112a20 <__reset+0xfb0f2a20>
8111333c:	89400117 	ldw	r5,4(r17)
81113340:	e009883a 	mov	r4,fp
81113344:	11151140 	call	81115114 <_Balloc>
81113348:	89800417 	ldw	r6,16(r17)
8111334c:	89400304 	addi	r5,r17,12
81113350:	11000304 	addi	r4,r2,12
81113354:	31800084 	addi	r6,r6,2
81113358:	318d883a 	add	r6,r6,r6
8111335c:	318d883a 	add	r6,r6,r6
81113360:	1027883a 	mov	r19,r2
81113364:	110b26c0 	call	8110b26c <memcpy>
81113368:	01800044 	movi	r6,1
8111336c:	980b883a 	mov	r5,r19
81113370:	e009883a 	mov	r4,fp
81113374:	11158940 	call	81115894 <__lshift>
81113378:	1029883a 	mov	r20,r2
8111337c:	003ecc06 	br	81112eb0 <__reset+0xfb0f2eb0>
81113380:	00800e44 	movi	r2,57
81113384:	90809026 	beq	r18,r2,811135c8 <_dtoa_r+0x152c>
81113388:	92000044 	addi	r8,r18,1
8111338c:	003f1f06 	br	8111300c <__reset+0xfb0f300c>
81113390:	9011883a 	mov	r8,r18
81113394:	8825883a 	mov	r18,r17
81113398:	a023883a 	mov	r17,r20
8111339c:	003e2906 	br	81112c44 <__reset+0xfb0f2c44>
811133a0:	002b883a 	mov	r21,zero
811133a4:	0023883a 	mov	r17,zero
811133a8:	003f5406 	br	811130fc <__reset+0xfb0f30fc>
811133ac:	61bfffc4 	addi	r6,r12,-1
811133b0:	300490fa 	slli	r2,r6,3
811133b4:	00e044f4 	movhi	r3,33043
811133b8:	18ceac04 	addi	r3,r3,15024
811133bc:	1885883a 	add	r2,r3,r2
811133c0:	11000017 	ldw	r4,0(r2)
811133c4:	11400117 	ldw	r5,4(r2)
811133c8:	d8800717 	ldw	r2,28(sp)
811133cc:	880f883a 	mov	r7,r17
811133d0:	d9801215 	stw	r6,72(sp)
811133d4:	800d883a 	mov	r6,r16
811133d8:	db001615 	stw	r12,88(sp)
811133dc:	15c00044 	addi	r23,r2,1
811133e0:	11097240 	call	81109724 <__muldf3>
811133e4:	d9401017 	ldw	r5,64(sp)
811133e8:	d9000f17 	ldw	r4,60(sp)
811133ec:	d8c01515 	stw	r3,84(sp)
811133f0:	d8801415 	stw	r2,80(sp)
811133f4:	111f5180 	call	8111f518 <__fixdfsi>
811133f8:	1009883a 	mov	r4,r2
811133fc:	1021883a 	mov	r16,r2
81113400:	111f5980 	call	8111f598 <__floatsidf>
81113404:	d9000f17 	ldw	r4,60(sp)
81113408:	d9401017 	ldw	r5,64(sp)
8111340c:	100d883a 	mov	r6,r2
81113410:	180f883a 	mov	r7,r3
81113414:	111ec1c0 	call	8111ec1c <__subdf3>
81113418:	1829883a 	mov	r20,r3
8111341c:	d8c00717 	ldw	r3,28(sp)
81113420:	84000c04 	addi	r16,r16,48
81113424:	1023883a 	mov	r17,r2
81113428:	1c000005 	stb	r16,0(r3)
8111342c:	db001617 	ldw	r12,88(sp)
81113430:	00800044 	movi	r2,1
81113434:	60802226 	beq	r12,r2,811134c0 <_dtoa_r+0x1424>
81113438:	d9c00717 	ldw	r7,28(sp)
8111343c:	8805883a 	mov	r2,r17
81113440:	b82b883a 	mov	r21,r23
81113444:	3b19883a 	add	r12,r7,r12
81113448:	6023883a 	mov	r17,r12
8111344c:	a007883a 	mov	r3,r20
81113450:	dc800f15 	stw	r18,60(sp)
81113454:	000d883a 	mov	r6,zero
81113458:	01d00934 	movhi	r7,16420
8111345c:	1009883a 	mov	r4,r2
81113460:	180b883a 	mov	r5,r3
81113464:	11097240 	call	81109724 <__muldf3>
81113468:	180b883a 	mov	r5,r3
8111346c:	1009883a 	mov	r4,r2
81113470:	1829883a 	mov	r20,r3
81113474:	1025883a 	mov	r18,r2
81113478:	111f5180 	call	8111f518 <__fixdfsi>
8111347c:	1009883a 	mov	r4,r2
81113480:	1021883a 	mov	r16,r2
81113484:	111f5980 	call	8111f598 <__floatsidf>
81113488:	100d883a 	mov	r6,r2
8111348c:	180f883a 	mov	r7,r3
81113490:	9009883a 	mov	r4,r18
81113494:	a00b883a 	mov	r5,r20
81113498:	84000c04 	addi	r16,r16,48
8111349c:	111ec1c0 	call	8111ec1c <__subdf3>
811134a0:	ad400044 	addi	r21,r21,1
811134a4:	ac3fffc5 	stb	r16,-1(r21)
811134a8:	ac7fea1e 	bne	r21,r17,81113454 <__reset+0xfb0f3454>
811134ac:	1023883a 	mov	r17,r2
811134b0:	d8801217 	ldw	r2,72(sp)
811134b4:	dc800f17 	ldw	r18,60(sp)
811134b8:	1829883a 	mov	r20,r3
811134bc:	b8af883a 	add	r23,r23,r2
811134c0:	d9001417 	ldw	r4,80(sp)
811134c4:	d9401517 	ldw	r5,84(sp)
811134c8:	000d883a 	mov	r6,zero
811134cc:	01cff834 	movhi	r7,16352
811134d0:	111d8300 	call	8111d830 <__adddf3>
811134d4:	880d883a 	mov	r6,r17
811134d8:	a00f883a 	mov	r7,r20
811134dc:	1009883a 	mov	r4,r2
811134e0:	180b883a 	mov	r5,r3
811134e4:	111eb280 	call	8111eb28 <__ledf2>
811134e8:	10003e0e 	bge	r2,zero,811135e4 <_dtoa_r+0x1548>
811134ec:	d9001317 	ldw	r4,76(sp)
811134f0:	bd3fffc3 	ldbu	r20,-1(r23)
811134f4:	d9000515 	stw	r4,20(sp)
811134f8:	003d3b06 	br	811129e8 <__reset+0xfb0f29e8>
811134fc:	0027883a 	mov	r19,zero
81113500:	003f1b06 	br	81113170 <__reset+0xfb0f3170>
81113504:	d8800817 	ldw	r2,32(sp)
81113508:	11e9c83a 	sub	r20,r2,r7
8111350c:	0005883a 	mov	r2,zero
81113510:	003d5406 	br	81112a64 <__reset+0xfb0f2a64>
81113514:	00800044 	movi	r2,1
81113518:	003dc706 	br	81112c38 <__reset+0xfb0f2c38>
8111351c:	d8c00217 	ldw	r3,8(sp)
81113520:	00800d84 	movi	r2,54
81113524:	dd400a17 	ldw	r21,40(sp)
81113528:	10c5c83a 	sub	r2,r2,r3
8111352c:	dd000817 	ldw	r20,32(sp)
81113530:	003d4c06 	br	81112a64 <__reset+0xfb0f2a64>
81113534:	dc800f15 	stw	r18,60(sp)
81113538:	dcc01015 	stw	r19,64(sp)
8111353c:	04000084 	movi	r16,2
81113540:	003bed06 	br	811124f8 <__reset+0xfb0f24f8>
81113544:	d9000617 	ldw	r4,24(sp)
81113548:	203f0d26 	beq	r4,zero,81113180 <__reset+0xfb0f3180>
8111354c:	d9800c17 	ldw	r6,48(sp)
81113550:	01bcab0e 	bge	zero,r6,81112800 <__reset+0xfb0f2800>
81113554:	d9401017 	ldw	r5,64(sp)
81113558:	d9000f17 	ldw	r4,60(sp)
8111355c:	000d883a 	mov	r6,zero
81113560:	01d00934 	movhi	r7,16420
81113564:	11097240 	call	81109724 <__muldf3>
81113568:	81000044 	addi	r4,r16,1
8111356c:	d8800f15 	stw	r2,60(sp)
81113570:	d8c01015 	stw	r3,64(sp)
81113574:	111f5980 	call	8111f598 <__floatsidf>
81113578:	d9800f17 	ldw	r6,60(sp)
8111357c:	d9c01017 	ldw	r7,64(sp)
81113580:	1009883a 	mov	r4,r2
81113584:	180b883a 	mov	r5,r3
81113588:	11097240 	call	81109724 <__muldf3>
8111358c:	01d00734 	movhi	r7,16412
81113590:	000d883a 	mov	r6,zero
81113594:	1009883a 	mov	r4,r2
81113598:	180b883a 	mov	r5,r3
8111359c:	111d8300 	call	8111d830 <__adddf3>
811135a0:	d9c00517 	ldw	r7,20(sp)
811135a4:	047f3034 	movhi	r17,64704
811135a8:	1021883a 	mov	r16,r2
811135ac:	39ffffc4 	addi	r7,r7,-1
811135b0:	d9c01315 	stw	r7,76(sp)
811135b4:	1c63883a 	add	r17,r3,r17
811135b8:	db000c17 	ldw	r12,48(sp)
811135bc:	003bea06 	br	81112568 <__reset+0xfb0f2568>
811135c0:	dc000915 	stw	r16,36(sp)
811135c4:	003e0e06 	br	81112e00 <__reset+0xfb0f2e00>
811135c8:	01000e44 	movi	r4,57
811135cc:	8825883a 	mov	r18,r17
811135d0:	9dc00044 	addi	r23,r19,1
811135d4:	99000005 	stb	r4,0(r19)
811135d8:	a023883a 	mov	r17,r20
811135dc:	dc000915 	stw	r16,36(sp)
811135e0:	003da406 	br	81112c74 <__reset+0xfb0f2c74>
811135e4:	d9801417 	ldw	r6,80(sp)
811135e8:	d9c01517 	ldw	r7,84(sp)
811135ec:	0009883a 	mov	r4,zero
811135f0:	014ff834 	movhi	r5,16352
811135f4:	111ec1c0 	call	8111ec1c <__subdf3>
811135f8:	880d883a 	mov	r6,r17
811135fc:	a00f883a 	mov	r7,r20
81113600:	1009883a 	mov	r4,r2
81113604:	180b883a 	mov	r5,r3
81113608:	111ea4c0 	call	8111ea4c <__gedf2>
8111360c:	00bc7c0e 	bge	zero,r2,81112800 <__reset+0xfb0f2800>
81113610:	01000c04 	movi	r4,48
81113614:	00000106 	br	8111361c <_dtoa_r+0x1580>
81113618:	102f883a 	mov	r23,r2
8111361c:	b8bfffc4 	addi	r2,r23,-1
81113620:	10c00007 	ldb	r3,0(r2)
81113624:	193ffc26 	beq	r3,r4,81113618 <__reset+0xfb0f3618>
81113628:	d9801317 	ldw	r6,76(sp)
8111362c:	d9800515 	stw	r6,20(sp)
81113630:	003c4406 	br	81112744 <__reset+0xfb0f2744>
81113634:	d9801317 	ldw	r6,76(sp)
81113638:	d9800515 	stw	r6,20(sp)
8111363c:	003cea06 	br	811129e8 <__reset+0xfb0f29e8>
81113640:	dd800f17 	ldw	r22,60(sp)
81113644:	dcc01017 	ldw	r19,64(sp)
81113648:	dc801217 	ldw	r18,72(sp)
8111364c:	003c6c06 	br	81112800 <__reset+0xfb0f2800>
81113650:	903e031e 	bne	r18,zero,81112e60 <__reset+0xfb0f2e60>
81113654:	003ebb06 	br	81113144 <__reset+0xfb0f3144>
81113658:	103e6c1e 	bne	r2,zero,8111300c <__reset+0xfb0f300c>
8111365c:	4080004c 	andi	r2,r8,1
81113660:	103e6a26 	beq	r2,zero,8111300c <__reset+0xfb0f300c>
81113664:	003e6606 	br	81113000 <__reset+0xfb0f3000>
81113668:	d8c00317 	ldw	r3,12(sp)
8111366c:	00800084 	movi	r2,2
81113670:	10c02916 	blt	r2,r3,81113718 <_dtoa_r+0x167c>
81113674:	d9000c17 	ldw	r4,48(sp)
81113678:	003e8806 	br	8111309c <__reset+0xfb0f309c>
8111367c:	04000084 	movi	r16,2
81113680:	003b9d06 	br	811124f8 <__reset+0xfb0f24f8>
81113684:	d9001317 	ldw	r4,76(sp)
81113688:	d9000515 	stw	r4,20(sp)
8111368c:	003cd606 	br	811129e8 <__reset+0xfb0f29e8>
81113690:	d8801317 	ldw	r2,76(sp)
81113694:	d8800515 	stw	r2,20(sp)
81113698:	003c2a06 	br	81112744 <__reset+0xfb0f2744>
8111369c:	d9800317 	ldw	r6,12(sp)
811136a0:	00800084 	movi	r2,2
811136a4:	11801516 	blt	r2,r6,811136fc <_dtoa_r+0x1660>
811136a8:	d9c00c17 	ldw	r7,48(sp)
811136ac:	d9c00615 	stw	r7,24(sp)
811136b0:	003df706 	br	81112e90 <__reset+0xfb0f2e90>
811136b4:	193d3926 	beq	r3,r4,81112b9c <__reset+0xfb0f2b9c>
811136b8:	00c00f04 	movi	r3,60
811136bc:	1885c83a 	sub	r2,r3,r2
811136c0:	003ddf06 	br	81112e40 <__reset+0xfb0f2e40>
811136c4:	e009883a 	mov	r4,fp
811136c8:	e0001115 	stw	zero,68(fp)
811136cc:	000b883a 	mov	r5,zero
811136d0:	11151140 	call	81115114 <_Balloc>
811136d4:	d8800715 	stw	r2,28(sp)
811136d8:	d8c00717 	ldw	r3,28(sp)
811136dc:	00bfffc4 	movi	r2,-1
811136e0:	01000044 	movi	r4,1
811136e4:	d8800c15 	stw	r2,48(sp)
811136e8:	e0c01015 	stw	r3,64(fp)
811136ec:	d9000b15 	stw	r4,44(sp)
811136f0:	d8800615 	stw	r2,24(sp)
811136f4:	d8002215 	stw	zero,136(sp)
811136f8:	003c4106 	br	81112800 <__reset+0xfb0f2800>
811136fc:	d8c00c17 	ldw	r3,48(sp)
81113700:	d8c00615 	stw	r3,24(sp)
81113704:	003e7006 	br	811130c8 <__reset+0xfb0f30c8>
81113708:	04400044 	movi	r17,1
8111370c:	003b2006 	br	81112390 <__reset+0xfb0f2390>
81113710:	000b883a 	mov	r5,zero
81113714:	003b3d06 	br	8111240c <__reset+0xfb0f240c>
81113718:	d8800c17 	ldw	r2,48(sp)
8111371c:	d8800615 	stw	r2,24(sp)
81113720:	003e6906 	br	811130c8 <__reset+0xfb0f30c8>

81113724 <__sflush_r>:
81113724:	2880030b 	ldhu	r2,12(r5)
81113728:	defffb04 	addi	sp,sp,-20
8111372c:	dcc00315 	stw	r19,12(sp)
81113730:	dc400115 	stw	r17,4(sp)
81113734:	dfc00415 	stw	ra,16(sp)
81113738:	dc800215 	stw	r18,8(sp)
8111373c:	dc000015 	stw	r16,0(sp)
81113740:	10c0020c 	andi	r3,r2,8
81113744:	2823883a 	mov	r17,r5
81113748:	2027883a 	mov	r19,r4
8111374c:	1800311e 	bne	r3,zero,81113814 <__sflush_r+0xf0>
81113750:	28c00117 	ldw	r3,4(r5)
81113754:	10820014 	ori	r2,r2,2048
81113758:	2880030d 	sth	r2,12(r5)
8111375c:	00c04b0e 	bge	zero,r3,8111388c <__sflush_r+0x168>
81113760:	8a000a17 	ldw	r8,40(r17)
81113764:	40002326 	beq	r8,zero,811137f4 <__sflush_r+0xd0>
81113768:	9c000017 	ldw	r16,0(r19)
8111376c:	10c4000c 	andi	r3,r2,4096
81113770:	98000015 	stw	zero,0(r19)
81113774:	18004826 	beq	r3,zero,81113898 <__sflush_r+0x174>
81113778:	89801417 	ldw	r6,80(r17)
8111377c:	10c0010c 	andi	r3,r2,4
81113780:	18000626 	beq	r3,zero,8111379c <__sflush_r+0x78>
81113784:	88c00117 	ldw	r3,4(r17)
81113788:	88800c17 	ldw	r2,48(r17)
8111378c:	30cdc83a 	sub	r6,r6,r3
81113790:	10000226 	beq	r2,zero,8111379c <__sflush_r+0x78>
81113794:	88800f17 	ldw	r2,60(r17)
81113798:	308dc83a 	sub	r6,r6,r2
8111379c:	89400717 	ldw	r5,28(r17)
811137a0:	000f883a 	mov	r7,zero
811137a4:	9809883a 	mov	r4,r19
811137a8:	403ee83a 	callr	r8
811137ac:	00ffffc4 	movi	r3,-1
811137b0:	10c04426 	beq	r2,r3,811138c4 <__sflush_r+0x1a0>
811137b4:	88c0030b 	ldhu	r3,12(r17)
811137b8:	89000417 	ldw	r4,16(r17)
811137bc:	88000115 	stw	zero,4(r17)
811137c0:	197dffcc 	andi	r5,r3,63487
811137c4:	8940030d 	sth	r5,12(r17)
811137c8:	89000015 	stw	r4,0(r17)
811137cc:	18c4000c 	andi	r3,r3,4096
811137d0:	18002c1e 	bne	r3,zero,81113884 <__sflush_r+0x160>
811137d4:	89400c17 	ldw	r5,48(r17)
811137d8:	9c000015 	stw	r16,0(r19)
811137dc:	28000526 	beq	r5,zero,811137f4 <__sflush_r+0xd0>
811137e0:	88801004 	addi	r2,r17,64
811137e4:	28800226 	beq	r5,r2,811137f0 <__sflush_r+0xcc>
811137e8:	9809883a 	mov	r4,r19
811137ec:	111419c0 	call	8111419c <_free_r>
811137f0:	88000c15 	stw	zero,48(r17)
811137f4:	0005883a 	mov	r2,zero
811137f8:	dfc00417 	ldw	ra,16(sp)
811137fc:	dcc00317 	ldw	r19,12(sp)
81113800:	dc800217 	ldw	r18,8(sp)
81113804:	dc400117 	ldw	r17,4(sp)
81113808:	dc000017 	ldw	r16,0(sp)
8111380c:	dec00504 	addi	sp,sp,20
81113810:	f800283a 	ret
81113814:	2c800417 	ldw	r18,16(r5)
81113818:	903ff626 	beq	r18,zero,811137f4 <__reset+0xfb0f37f4>
8111381c:	2c000017 	ldw	r16,0(r5)
81113820:	108000cc 	andi	r2,r2,3
81113824:	2c800015 	stw	r18,0(r5)
81113828:	84a1c83a 	sub	r16,r16,r18
8111382c:	1000131e 	bne	r2,zero,8111387c <__sflush_r+0x158>
81113830:	28800517 	ldw	r2,20(r5)
81113834:	88800215 	stw	r2,8(r17)
81113838:	04000316 	blt	zero,r16,81113848 <__sflush_r+0x124>
8111383c:	003fed06 	br	811137f4 <__reset+0xfb0f37f4>
81113840:	90a5883a 	add	r18,r18,r2
81113844:	043feb0e 	bge	zero,r16,811137f4 <__reset+0xfb0f37f4>
81113848:	88800917 	ldw	r2,36(r17)
8111384c:	89400717 	ldw	r5,28(r17)
81113850:	800f883a 	mov	r7,r16
81113854:	900d883a 	mov	r6,r18
81113858:	9809883a 	mov	r4,r19
8111385c:	103ee83a 	callr	r2
81113860:	80a1c83a 	sub	r16,r16,r2
81113864:	00bff616 	blt	zero,r2,81113840 <__reset+0xfb0f3840>
81113868:	88c0030b 	ldhu	r3,12(r17)
8111386c:	00bfffc4 	movi	r2,-1
81113870:	18c01014 	ori	r3,r3,64
81113874:	88c0030d 	sth	r3,12(r17)
81113878:	003fdf06 	br	811137f8 <__reset+0xfb0f37f8>
8111387c:	0005883a 	mov	r2,zero
81113880:	003fec06 	br	81113834 <__reset+0xfb0f3834>
81113884:	88801415 	stw	r2,80(r17)
81113888:	003fd206 	br	811137d4 <__reset+0xfb0f37d4>
8111388c:	28c00f17 	ldw	r3,60(r5)
81113890:	00ffb316 	blt	zero,r3,81113760 <__reset+0xfb0f3760>
81113894:	003fd706 	br	811137f4 <__reset+0xfb0f37f4>
81113898:	89400717 	ldw	r5,28(r17)
8111389c:	000d883a 	mov	r6,zero
811138a0:	01c00044 	movi	r7,1
811138a4:	9809883a 	mov	r4,r19
811138a8:	403ee83a 	callr	r8
811138ac:	100d883a 	mov	r6,r2
811138b0:	00bfffc4 	movi	r2,-1
811138b4:	30801426 	beq	r6,r2,81113908 <__sflush_r+0x1e4>
811138b8:	8880030b 	ldhu	r2,12(r17)
811138bc:	8a000a17 	ldw	r8,40(r17)
811138c0:	003fae06 	br	8111377c <__reset+0xfb0f377c>
811138c4:	98c00017 	ldw	r3,0(r19)
811138c8:	183fba26 	beq	r3,zero,811137b4 <__reset+0xfb0f37b4>
811138cc:	01000744 	movi	r4,29
811138d0:	19000626 	beq	r3,r4,811138ec <__sflush_r+0x1c8>
811138d4:	01000584 	movi	r4,22
811138d8:	19000426 	beq	r3,r4,811138ec <__sflush_r+0x1c8>
811138dc:	88c0030b 	ldhu	r3,12(r17)
811138e0:	18c01014 	ori	r3,r3,64
811138e4:	88c0030d 	sth	r3,12(r17)
811138e8:	003fc306 	br	811137f8 <__reset+0xfb0f37f8>
811138ec:	8880030b 	ldhu	r2,12(r17)
811138f0:	88c00417 	ldw	r3,16(r17)
811138f4:	88000115 	stw	zero,4(r17)
811138f8:	10bdffcc 	andi	r2,r2,63487
811138fc:	8880030d 	sth	r2,12(r17)
81113900:	88c00015 	stw	r3,0(r17)
81113904:	003fb306 	br	811137d4 <__reset+0xfb0f37d4>
81113908:	98800017 	ldw	r2,0(r19)
8111390c:	103fea26 	beq	r2,zero,811138b8 <__reset+0xfb0f38b8>
81113910:	00c00744 	movi	r3,29
81113914:	10c00226 	beq	r2,r3,81113920 <__sflush_r+0x1fc>
81113918:	00c00584 	movi	r3,22
8111391c:	10c0031e 	bne	r2,r3,8111392c <__sflush_r+0x208>
81113920:	9c000015 	stw	r16,0(r19)
81113924:	0005883a 	mov	r2,zero
81113928:	003fb306 	br	811137f8 <__reset+0xfb0f37f8>
8111392c:	88c0030b 	ldhu	r3,12(r17)
81113930:	3005883a 	mov	r2,r6
81113934:	18c01014 	ori	r3,r3,64
81113938:	88c0030d 	sth	r3,12(r17)
8111393c:	003fae06 	br	811137f8 <__reset+0xfb0f37f8>

81113940 <_fflush_r>:
81113940:	defffd04 	addi	sp,sp,-12
81113944:	dc000115 	stw	r16,4(sp)
81113948:	dfc00215 	stw	ra,8(sp)
8111394c:	2021883a 	mov	r16,r4
81113950:	20000226 	beq	r4,zero,8111395c <_fflush_r+0x1c>
81113954:	20800e17 	ldw	r2,56(r4)
81113958:	10000c26 	beq	r2,zero,8111398c <_fflush_r+0x4c>
8111395c:	2880030f 	ldh	r2,12(r5)
81113960:	1000051e 	bne	r2,zero,81113978 <_fflush_r+0x38>
81113964:	0005883a 	mov	r2,zero
81113968:	dfc00217 	ldw	ra,8(sp)
8111396c:	dc000117 	ldw	r16,4(sp)
81113970:	dec00304 	addi	sp,sp,12
81113974:	f800283a 	ret
81113978:	8009883a 	mov	r4,r16
8111397c:	dfc00217 	ldw	ra,8(sp)
81113980:	dc000117 	ldw	r16,4(sp)
81113984:	dec00304 	addi	sp,sp,12
81113988:	11137241 	jmpi	81113724 <__sflush_r>
8111398c:	d9400015 	stw	r5,0(sp)
81113990:	1113d1c0 	call	81113d1c <__sinit>
81113994:	d9400017 	ldw	r5,0(sp)
81113998:	003ff006 	br	8111395c <__reset+0xfb0f395c>

8111399c <fflush>:
8111399c:	20000526 	beq	r4,zero,811139b4 <fflush+0x18>
811139a0:	00a044f4 	movhi	r2,33043
811139a4:	10976404 	addi	r2,r2,23952
811139a8:	200b883a 	mov	r5,r4
811139ac:	11000017 	ldw	r4,0(r2)
811139b0:	11139401 	jmpi	81113940 <_fflush_r>
811139b4:	00a044f4 	movhi	r2,33043
811139b8:	10976304 	addi	r2,r2,23948
811139bc:	11000017 	ldw	r4,0(r2)
811139c0:	01604474 	movhi	r5,33041
811139c4:	294e5004 	addi	r5,r5,14656
811139c8:	1114a2c1 	jmpi	81114a2c <_fwalk_reent>

811139cc <__fp_unlock>:
811139cc:	0005883a 	mov	r2,zero
811139d0:	f800283a 	ret

811139d4 <_cleanup_r>:
811139d4:	016044b4 	movhi	r5,33042
811139d8:	296e0304 	addi	r5,r5,-18420
811139dc:	1114a2c1 	jmpi	81114a2c <_fwalk_reent>

811139e0 <__sinit.part.1>:
811139e0:	defff704 	addi	sp,sp,-36
811139e4:	00e04474 	movhi	r3,33041
811139e8:	dfc00815 	stw	ra,32(sp)
811139ec:	ddc00715 	stw	r23,28(sp)
811139f0:	dd800615 	stw	r22,24(sp)
811139f4:	dd400515 	stw	r21,20(sp)
811139f8:	dd000415 	stw	r20,16(sp)
811139fc:	dcc00315 	stw	r19,12(sp)
81113a00:	dc800215 	stw	r18,8(sp)
81113a04:	dc400115 	stw	r17,4(sp)
81113a08:	dc000015 	stw	r16,0(sp)
81113a0c:	18ce7504 	addi	r3,r3,14804
81113a10:	24000117 	ldw	r16,4(r4)
81113a14:	20c00f15 	stw	r3,60(r4)
81113a18:	2080bb04 	addi	r2,r4,748
81113a1c:	00c000c4 	movi	r3,3
81113a20:	20c0b915 	stw	r3,740(r4)
81113a24:	2080ba15 	stw	r2,744(r4)
81113a28:	2000b815 	stw	zero,736(r4)
81113a2c:	05c00204 	movi	r23,8
81113a30:	00800104 	movi	r2,4
81113a34:	2025883a 	mov	r18,r4
81113a38:	b80d883a 	mov	r6,r23
81113a3c:	81001704 	addi	r4,r16,92
81113a40:	000b883a 	mov	r5,zero
81113a44:	80000015 	stw	zero,0(r16)
81113a48:	80000115 	stw	zero,4(r16)
81113a4c:	80000215 	stw	zero,8(r16)
81113a50:	8080030d 	sth	r2,12(r16)
81113a54:	80001915 	stw	zero,100(r16)
81113a58:	8000038d 	sth	zero,14(r16)
81113a5c:	80000415 	stw	zero,16(r16)
81113a60:	80000515 	stw	zero,20(r16)
81113a64:	80000615 	stw	zero,24(r16)
81113a68:	110b3b40 	call	8110b3b4 <memset>
81113a6c:	05a04474 	movhi	r22,33041
81113a70:	94400217 	ldw	r17,8(r18)
81113a74:	05604474 	movhi	r21,33041
81113a78:	05204474 	movhi	r20,33041
81113a7c:	04e04474 	movhi	r19,33041
81113a80:	b5ae8404 	addi	r22,r22,-17904
81113a84:	ad6e9b04 	addi	r21,r21,-17812
81113a88:	a52eba04 	addi	r20,r20,-17688
81113a8c:	9ceed104 	addi	r19,r19,-17596
81113a90:	85800815 	stw	r22,32(r16)
81113a94:	85400915 	stw	r21,36(r16)
81113a98:	85000a15 	stw	r20,40(r16)
81113a9c:	84c00b15 	stw	r19,44(r16)
81113aa0:	84000715 	stw	r16,28(r16)
81113aa4:	00800284 	movi	r2,10
81113aa8:	8880030d 	sth	r2,12(r17)
81113aac:	00800044 	movi	r2,1
81113ab0:	b80d883a 	mov	r6,r23
81113ab4:	89001704 	addi	r4,r17,92
81113ab8:	000b883a 	mov	r5,zero
81113abc:	88000015 	stw	zero,0(r17)
81113ac0:	88000115 	stw	zero,4(r17)
81113ac4:	88000215 	stw	zero,8(r17)
81113ac8:	88001915 	stw	zero,100(r17)
81113acc:	8880038d 	sth	r2,14(r17)
81113ad0:	88000415 	stw	zero,16(r17)
81113ad4:	88000515 	stw	zero,20(r17)
81113ad8:	88000615 	stw	zero,24(r17)
81113adc:	110b3b40 	call	8110b3b4 <memset>
81113ae0:	94000317 	ldw	r16,12(r18)
81113ae4:	00800484 	movi	r2,18
81113ae8:	8c400715 	stw	r17,28(r17)
81113aec:	8d800815 	stw	r22,32(r17)
81113af0:	8d400915 	stw	r21,36(r17)
81113af4:	8d000a15 	stw	r20,40(r17)
81113af8:	8cc00b15 	stw	r19,44(r17)
81113afc:	8080030d 	sth	r2,12(r16)
81113b00:	00800084 	movi	r2,2
81113b04:	80000015 	stw	zero,0(r16)
81113b08:	80000115 	stw	zero,4(r16)
81113b0c:	80000215 	stw	zero,8(r16)
81113b10:	80001915 	stw	zero,100(r16)
81113b14:	8080038d 	sth	r2,14(r16)
81113b18:	80000415 	stw	zero,16(r16)
81113b1c:	80000515 	stw	zero,20(r16)
81113b20:	80000615 	stw	zero,24(r16)
81113b24:	b80d883a 	mov	r6,r23
81113b28:	000b883a 	mov	r5,zero
81113b2c:	81001704 	addi	r4,r16,92
81113b30:	110b3b40 	call	8110b3b4 <memset>
81113b34:	00800044 	movi	r2,1
81113b38:	84000715 	stw	r16,28(r16)
81113b3c:	85800815 	stw	r22,32(r16)
81113b40:	85400915 	stw	r21,36(r16)
81113b44:	85000a15 	stw	r20,40(r16)
81113b48:	84c00b15 	stw	r19,44(r16)
81113b4c:	90800e15 	stw	r2,56(r18)
81113b50:	dfc00817 	ldw	ra,32(sp)
81113b54:	ddc00717 	ldw	r23,28(sp)
81113b58:	dd800617 	ldw	r22,24(sp)
81113b5c:	dd400517 	ldw	r21,20(sp)
81113b60:	dd000417 	ldw	r20,16(sp)
81113b64:	dcc00317 	ldw	r19,12(sp)
81113b68:	dc800217 	ldw	r18,8(sp)
81113b6c:	dc400117 	ldw	r17,4(sp)
81113b70:	dc000017 	ldw	r16,0(sp)
81113b74:	dec00904 	addi	sp,sp,36
81113b78:	f800283a 	ret

81113b7c <__fp_lock>:
81113b7c:	0005883a 	mov	r2,zero
81113b80:	f800283a 	ret

81113b84 <__sfmoreglue>:
81113b84:	defffc04 	addi	sp,sp,-16
81113b88:	dc400115 	stw	r17,4(sp)
81113b8c:	2c7fffc4 	addi	r17,r5,-1
81113b90:	8c401a24 	muli	r17,r17,104
81113b94:	dc800215 	stw	r18,8(sp)
81113b98:	2825883a 	mov	r18,r5
81113b9c:	89401d04 	addi	r5,r17,116
81113ba0:	dc000015 	stw	r16,0(sp)
81113ba4:	dfc00315 	stw	ra,12(sp)
81113ba8:	110aa600 	call	8110aa60 <_malloc_r>
81113bac:	1021883a 	mov	r16,r2
81113bb0:	10000726 	beq	r2,zero,81113bd0 <__sfmoreglue+0x4c>
81113bb4:	11000304 	addi	r4,r2,12
81113bb8:	10000015 	stw	zero,0(r2)
81113bbc:	14800115 	stw	r18,4(r2)
81113bc0:	11000215 	stw	r4,8(r2)
81113bc4:	89801a04 	addi	r6,r17,104
81113bc8:	000b883a 	mov	r5,zero
81113bcc:	110b3b40 	call	8110b3b4 <memset>
81113bd0:	8005883a 	mov	r2,r16
81113bd4:	dfc00317 	ldw	ra,12(sp)
81113bd8:	dc800217 	ldw	r18,8(sp)
81113bdc:	dc400117 	ldw	r17,4(sp)
81113be0:	dc000017 	ldw	r16,0(sp)
81113be4:	dec00404 	addi	sp,sp,16
81113be8:	f800283a 	ret

81113bec <__sfp>:
81113bec:	defffb04 	addi	sp,sp,-20
81113bf0:	dc000015 	stw	r16,0(sp)
81113bf4:	042044f4 	movhi	r16,33043
81113bf8:	84176304 	addi	r16,r16,23948
81113bfc:	dcc00315 	stw	r19,12(sp)
81113c00:	2027883a 	mov	r19,r4
81113c04:	81000017 	ldw	r4,0(r16)
81113c08:	dfc00415 	stw	ra,16(sp)
81113c0c:	dc800215 	stw	r18,8(sp)
81113c10:	20800e17 	ldw	r2,56(r4)
81113c14:	dc400115 	stw	r17,4(sp)
81113c18:	1000021e 	bne	r2,zero,81113c24 <__sfp+0x38>
81113c1c:	11139e00 	call	811139e0 <__sinit.part.1>
81113c20:	81000017 	ldw	r4,0(r16)
81113c24:	2480b804 	addi	r18,r4,736
81113c28:	047fffc4 	movi	r17,-1
81113c2c:	91000117 	ldw	r4,4(r18)
81113c30:	94000217 	ldw	r16,8(r18)
81113c34:	213fffc4 	addi	r4,r4,-1
81113c38:	20000a16 	blt	r4,zero,81113c64 <__sfp+0x78>
81113c3c:	8080030f 	ldh	r2,12(r16)
81113c40:	10000c26 	beq	r2,zero,81113c74 <__sfp+0x88>
81113c44:	80c01d04 	addi	r3,r16,116
81113c48:	00000206 	br	81113c54 <__sfp+0x68>
81113c4c:	18bfe60f 	ldh	r2,-104(r3)
81113c50:	10000826 	beq	r2,zero,81113c74 <__sfp+0x88>
81113c54:	213fffc4 	addi	r4,r4,-1
81113c58:	1c3ffd04 	addi	r16,r3,-12
81113c5c:	18c01a04 	addi	r3,r3,104
81113c60:	247ffa1e 	bne	r4,r17,81113c4c <__reset+0xfb0f3c4c>
81113c64:	90800017 	ldw	r2,0(r18)
81113c68:	10001d26 	beq	r2,zero,81113ce0 <__sfp+0xf4>
81113c6c:	1025883a 	mov	r18,r2
81113c70:	003fee06 	br	81113c2c <__reset+0xfb0f3c2c>
81113c74:	00bfffc4 	movi	r2,-1
81113c78:	8080038d 	sth	r2,14(r16)
81113c7c:	00800044 	movi	r2,1
81113c80:	8080030d 	sth	r2,12(r16)
81113c84:	80001915 	stw	zero,100(r16)
81113c88:	80000015 	stw	zero,0(r16)
81113c8c:	80000215 	stw	zero,8(r16)
81113c90:	80000115 	stw	zero,4(r16)
81113c94:	80000415 	stw	zero,16(r16)
81113c98:	80000515 	stw	zero,20(r16)
81113c9c:	80000615 	stw	zero,24(r16)
81113ca0:	01800204 	movi	r6,8
81113ca4:	000b883a 	mov	r5,zero
81113ca8:	81001704 	addi	r4,r16,92
81113cac:	110b3b40 	call	8110b3b4 <memset>
81113cb0:	8005883a 	mov	r2,r16
81113cb4:	80000c15 	stw	zero,48(r16)
81113cb8:	80000d15 	stw	zero,52(r16)
81113cbc:	80001115 	stw	zero,68(r16)
81113cc0:	80001215 	stw	zero,72(r16)
81113cc4:	dfc00417 	ldw	ra,16(sp)
81113cc8:	dcc00317 	ldw	r19,12(sp)
81113ccc:	dc800217 	ldw	r18,8(sp)
81113cd0:	dc400117 	ldw	r17,4(sp)
81113cd4:	dc000017 	ldw	r16,0(sp)
81113cd8:	dec00504 	addi	sp,sp,20
81113cdc:	f800283a 	ret
81113ce0:	01400104 	movi	r5,4
81113ce4:	9809883a 	mov	r4,r19
81113ce8:	1113b840 	call	81113b84 <__sfmoreglue>
81113cec:	90800015 	stw	r2,0(r18)
81113cf0:	103fde1e 	bne	r2,zero,81113c6c <__reset+0xfb0f3c6c>
81113cf4:	00800304 	movi	r2,12
81113cf8:	98800015 	stw	r2,0(r19)
81113cfc:	0005883a 	mov	r2,zero
81113d00:	003ff006 	br	81113cc4 <__reset+0xfb0f3cc4>

81113d04 <_cleanup>:
81113d04:	00a044f4 	movhi	r2,33043
81113d08:	10976304 	addi	r2,r2,23948
81113d0c:	11000017 	ldw	r4,0(r2)
81113d10:	016044b4 	movhi	r5,33042
81113d14:	296e0304 	addi	r5,r5,-18420
81113d18:	1114a2c1 	jmpi	81114a2c <_fwalk_reent>

81113d1c <__sinit>:
81113d1c:	20800e17 	ldw	r2,56(r4)
81113d20:	10000126 	beq	r2,zero,81113d28 <__sinit+0xc>
81113d24:	f800283a 	ret
81113d28:	11139e01 	jmpi	811139e0 <__sinit.part.1>

81113d2c <__sfp_lock_acquire>:
81113d2c:	f800283a 	ret

81113d30 <__sfp_lock_release>:
81113d30:	f800283a 	ret

81113d34 <__sinit_lock_acquire>:
81113d34:	f800283a 	ret

81113d38 <__sinit_lock_release>:
81113d38:	f800283a 	ret

81113d3c <__fp_lock_all>:
81113d3c:	00a044f4 	movhi	r2,33043
81113d40:	10976404 	addi	r2,r2,23952
81113d44:	11000017 	ldw	r4,0(r2)
81113d48:	01604474 	movhi	r5,33041
81113d4c:	294edf04 	addi	r5,r5,15228
81113d50:	11149681 	jmpi	81114968 <_fwalk>

81113d54 <__fp_unlock_all>:
81113d54:	00a044f4 	movhi	r2,33043
81113d58:	10976404 	addi	r2,r2,23952
81113d5c:	11000017 	ldw	r4,0(r2)
81113d60:	01604474 	movhi	r5,33041
81113d64:	294e7304 	addi	r5,r5,14796
81113d68:	11149681 	jmpi	81114968 <_fwalk>

81113d6c <__sflags>:
81113d6c:	28800007 	ldb	r2,0(r5)
81113d70:	00c01c84 	movi	r3,114
81113d74:	10c02426 	beq	r2,r3,81113e08 <__sflags+0x9c>
81113d78:	00c01dc4 	movi	r3,119
81113d7c:	10c01e26 	beq	r2,r3,81113df8 <__sflags+0x8c>
81113d80:	00c01844 	movi	r3,97
81113d84:	10c00426 	beq	r2,r3,81113d98 <__sflags+0x2c>
81113d88:	00800584 	movi	r2,22
81113d8c:	20800015 	stw	r2,0(r4)
81113d90:	0005883a 	mov	r2,zero
81113d94:	f800283a 	ret
81113d98:	02c08204 	movi	r11,520
81113d9c:	01000044 	movi	r4,1
81113da0:	00804204 	movi	r2,264
81113da4:	01c00ac4 	movi	r7,43
81113da8:	02bff8c4 	movi	r10,-29
81113dac:	027fff04 	movi	r9,-4
81113db0:	02001e04 	movi	r8,120
81113db4:	29400044 	addi	r5,r5,1
81113db8:	28c00007 	ldb	r3,0(r5)
81113dbc:	18000626 	beq	r3,zero,81113dd8 <__sflags+0x6c>
81113dc0:	19c00826 	beq	r3,r7,81113de4 <__sflags+0x78>
81113dc4:	1a3ffb1e 	bne	r3,r8,81113db4 <__reset+0xfb0f3db4>
81113dc8:	29400044 	addi	r5,r5,1
81113dcc:	28c00007 	ldb	r3,0(r5)
81113dd0:	21020014 	ori	r4,r4,2048
81113dd4:	183ffa1e 	bne	r3,zero,81113dc0 <__reset+0xfb0f3dc0>
81113dd8:	22c8b03a 	or	r4,r4,r11
81113ddc:	31000015 	stw	r4,0(r6)
81113de0:	f800283a 	ret
81113de4:	1284703a 	and	r2,r2,r10
81113de8:	2248703a 	and	r4,r4,r9
81113dec:	10800414 	ori	r2,r2,16
81113df0:	21000094 	ori	r4,r4,2
81113df4:	003fef06 	br	81113db4 <__reset+0xfb0f3db4>
81113df8:	02c18004 	movi	r11,1536
81113dfc:	01000044 	movi	r4,1
81113e00:	00800204 	movi	r2,8
81113e04:	003fe706 	br	81113da4 <__reset+0xfb0f3da4>
81113e08:	0017883a 	mov	r11,zero
81113e0c:	0009883a 	mov	r4,zero
81113e10:	00800104 	movi	r2,4
81113e14:	003fe306 	br	81113da4 <__reset+0xfb0f3da4>

81113e18 <_fread_r>:
81113e18:	defff404 	addi	sp,sp,-48
81113e1c:	dd800815 	stw	r22,32(sp)
81113e20:	39ad383a 	mul	r22,r7,r6
81113e24:	dc000215 	stw	r16,8(sp)
81113e28:	dfc00b15 	stw	ra,44(sp)
81113e2c:	df000a15 	stw	fp,40(sp)
81113e30:	ddc00915 	stw	r23,36(sp)
81113e34:	dd400715 	stw	r21,28(sp)
81113e38:	dd000615 	stw	r20,24(sp)
81113e3c:	dcc00515 	stw	r19,20(sp)
81113e40:	dc800415 	stw	r18,16(sp)
81113e44:	dc400315 	stw	r17,12(sp)
81113e48:	dc000c17 	ldw	r16,48(sp)
81113e4c:	b0003b26 	beq	r22,zero,81113f3c <_fread_r+0x124>
81113e50:	302f883a 	mov	r23,r6
81113e54:	382b883a 	mov	r21,r7
81113e58:	2029883a 	mov	r20,r4
81113e5c:	2827883a 	mov	r19,r5
81113e60:	20000226 	beq	r4,zero,81113e6c <_fread_r+0x54>
81113e64:	20800e17 	ldw	r2,56(r4)
81113e68:	10006e26 	beq	r2,zero,81114024 <_fread_r+0x20c>
81113e6c:	8080030b 	ldhu	r2,12(r16)
81113e70:	10c8000c 	andi	r3,r2,8192
81113e74:	1800061e 	bne	r3,zero,81113e90 <_fread_r+0x78>
81113e78:	81001917 	ldw	r4,100(r16)
81113e7c:	00f7ffc4 	movi	r3,-8193
81113e80:	10880014 	ori	r2,r2,8192
81113e84:	20c6703a 	and	r3,r4,r3
81113e88:	8080030d 	sth	r2,12(r16)
81113e8c:	80c01915 	stw	r3,100(r16)
81113e90:	84400117 	ldw	r17,4(r16)
81113e94:	88005f16 	blt	r17,zero,81114014 <_fread_r+0x1fc>
81113e98:	8809883a 	mov	r4,r17
81113e9c:	1080008c 	andi	r2,r2,2
81113ea0:	1000281e 	bne	r2,zero,81113f44 <_fread_r+0x12c>
81113ea4:	b025883a 	mov	r18,r22
81113ea8:	00000b06 	br	81113ed8 <_fread_r+0xc0>
81113eac:	110b26c0 	call	8110b26c <memcpy>
81113eb0:	80800017 	ldw	r2,0(r16)
81113eb4:	9c67883a 	add	r19,r19,r17
81113eb8:	9465c83a 	sub	r18,r18,r17
81113ebc:	1463883a 	add	r17,r2,r17
81113ec0:	800b883a 	mov	r5,r16
81113ec4:	a009883a 	mov	r4,r20
81113ec8:	84400015 	stw	r17,0(r16)
81113ecc:	110b6b80 	call	8110b6b8 <__srefill_r>
81113ed0:	10004c1e 	bne	r2,zero,81114004 <_fread_r+0x1ec>
81113ed4:	84400117 	ldw	r17,4(r16)
81113ed8:	880d883a 	mov	r6,r17
81113edc:	9809883a 	mov	r4,r19
81113ee0:	81400017 	ldw	r5,0(r16)
81113ee4:	8cbff136 	bltu	r17,r18,81113eac <__reset+0xfb0f3eac>
81113ee8:	900d883a 	mov	r6,r18
81113eec:	110b26c0 	call	8110b26c <memcpy>
81113ef0:	80c00117 	ldw	r3,4(r16)
81113ef4:	81000017 	ldw	r4,0(r16)
81113ef8:	a805883a 	mov	r2,r21
81113efc:	1c87c83a 	sub	r3,r3,r18
81113f00:	24a5883a 	add	r18,r4,r18
81113f04:	80c00115 	stw	r3,4(r16)
81113f08:	84800015 	stw	r18,0(r16)
81113f0c:	dfc00b17 	ldw	ra,44(sp)
81113f10:	df000a17 	ldw	fp,40(sp)
81113f14:	ddc00917 	ldw	r23,36(sp)
81113f18:	dd800817 	ldw	r22,32(sp)
81113f1c:	dd400717 	ldw	r21,28(sp)
81113f20:	dd000617 	ldw	r20,24(sp)
81113f24:	dcc00517 	ldw	r19,20(sp)
81113f28:	dc800417 	ldw	r18,16(sp)
81113f2c:	dc400317 	ldw	r17,12(sp)
81113f30:	dc000217 	ldw	r16,8(sp)
81113f34:	dec00c04 	addi	sp,sp,48
81113f38:	f800283a 	ret
81113f3c:	0005883a 	mov	r2,zero
81113f40:	003ff206 	br	81113f0c <__reset+0xfb0f3f0c>
81113f44:	b007883a 	mov	r3,r22
81113f48:	2580012e 	bgeu	r4,r22,81113f50 <_fread_r+0x138>
81113f4c:	2007883a 	mov	r3,r4
81113f50:	81400017 	ldw	r5,0(r16)
81113f54:	180d883a 	mov	r6,r3
81113f58:	9809883a 	mov	r4,r19
81113f5c:	d8c00115 	stw	r3,4(sp)
81113f60:	110b26c0 	call	8110b26c <memcpy>
81113f64:	d8c00117 	ldw	r3,4(sp)
81113f68:	84400017 	ldw	r17,0(r16)
81113f6c:	80800117 	ldw	r2,4(r16)
81113f70:	81400c17 	ldw	r5,48(r16)
81113f74:	88e3883a 	add	r17,r17,r3
81113f78:	10c5c83a 	sub	r2,r2,r3
81113f7c:	84400015 	stw	r17,0(r16)
81113f80:	80800115 	stw	r2,4(r16)
81113f84:	b0e5c83a 	sub	r18,r22,r3
81113f88:	28002b26 	beq	r5,zero,81114038 <_fread_r+0x220>
81113f8c:	90002b26 	beq	r18,zero,8111403c <_fread_r+0x224>
81113f90:	80801004 	addi	r2,r16,64
81113f94:	28800526 	beq	r5,r2,81113fac <_fread_r+0x194>
81113f98:	a009883a 	mov	r4,r20
81113f9c:	d8c00115 	stw	r3,4(sp)
81113fa0:	111419c0 	call	8111419c <_free_r>
81113fa4:	d8c00117 	ldw	r3,4(sp)
81113fa8:	84400017 	ldw	r17,0(r16)
81113fac:	80000c15 	stw	zero,48(r16)
81113fb0:	80800517 	ldw	r2,20(r16)
81113fb4:	87000417 	ldw	fp,16(r16)
81113fb8:	98e7883a 	add	r19,r19,r3
81113fbc:	d8800015 	stw	r2,0(sp)
81113fc0:	00000106 	br	81113fc8 <_fread_r+0x1b0>
81113fc4:	90001d26 	beq	r18,zero,8111403c <_fread_r+0x224>
81113fc8:	84c00415 	stw	r19,16(r16)
81113fcc:	84800515 	stw	r18,20(r16)
81113fd0:	84c00015 	stw	r19,0(r16)
81113fd4:	a009883a 	mov	r4,r20
81113fd8:	800b883a 	mov	r5,r16
81113fdc:	110b6b80 	call	8110b6b8 <__srefill_r>
81113fe0:	d9000017 	ldw	r4,0(sp)
81113fe4:	80c00117 	ldw	r3,4(r16)
81113fe8:	87000415 	stw	fp,16(r16)
81113fec:	81000515 	stw	r4,20(r16)
81113ff0:	84400015 	stw	r17,0(r16)
81113ff4:	80000115 	stw	zero,4(r16)
81113ff8:	90e5c83a 	sub	r18,r18,r3
81113ffc:	98e7883a 	add	r19,r19,r3
81114000:	103ff026 	beq	r2,zero,81113fc4 <__reset+0xfb0f3fc4>
81114004:	b80b883a 	mov	r5,r23
81114008:	b489c83a 	sub	r4,r22,r18
8111400c:	111d5780 	call	8111d578 <__udivsi3>
81114010:	003fbe06 	br	81113f0c <__reset+0xfb0f3f0c>
81114014:	80000115 	stw	zero,4(r16)
81114018:	0009883a 	mov	r4,zero
8111401c:	0023883a 	mov	r17,zero
81114020:	003f9e06 	br	81113e9c <__reset+0xfb0f3e9c>
81114024:	1113d1c0 	call	81113d1c <__sinit>
81114028:	8080030b 	ldhu	r2,12(r16)
8111402c:	10c8000c 	andi	r3,r2,8192
81114030:	183f971e 	bne	r3,zero,81113e90 <__reset+0xfb0f3e90>
81114034:	003f9006 	br	81113e78 <__reset+0xfb0f3e78>
81114038:	903fdd1e 	bne	r18,zero,81113fb0 <__reset+0xfb0f3fb0>
8111403c:	a805883a 	mov	r2,r21
81114040:	003fb206 	br	81113f0c <__reset+0xfb0f3f0c>

81114044 <fread>:
81114044:	defffe04 	addi	sp,sp,-8
81114048:	00a044f4 	movhi	r2,33043
8111404c:	d9c00015 	stw	r7,0(sp)
81114050:	10976404 	addi	r2,r2,23952
81114054:	300f883a 	mov	r7,r6
81114058:	280d883a 	mov	r6,r5
8111405c:	200b883a 	mov	r5,r4
81114060:	11000017 	ldw	r4,0(r2)
81114064:	dfc00115 	stw	ra,4(sp)
81114068:	1113e180 	call	81113e18 <_fread_r>
8111406c:	dfc00117 	ldw	ra,4(sp)
81114070:	dec00204 	addi	sp,sp,8
81114074:	f800283a 	ret

81114078 <_malloc_trim_r>:
81114078:	defffb04 	addi	sp,sp,-20
8111407c:	dcc00315 	stw	r19,12(sp)
81114080:	04e044f4 	movhi	r19,33043
81114084:	dc800215 	stw	r18,8(sp)
81114088:	dc400115 	stw	r17,4(sp)
8111408c:	dc000015 	stw	r16,0(sp)
81114090:	dfc00415 	stw	ra,16(sp)
81114094:	2821883a 	mov	r16,r5
81114098:	9cd14604 	addi	r19,r19,17688
8111409c:	2025883a 	mov	r18,r4
811140a0:	11205dc0 	call	811205dc <__malloc_lock>
811140a4:	98800217 	ldw	r2,8(r19)
811140a8:	14400117 	ldw	r17,4(r2)
811140ac:	00bfff04 	movi	r2,-4
811140b0:	88a2703a 	and	r17,r17,r2
811140b4:	8c21c83a 	sub	r16,r17,r16
811140b8:	8403fbc4 	addi	r16,r16,4079
811140bc:	8020d33a 	srli	r16,r16,12
811140c0:	0083ffc4 	movi	r2,4095
811140c4:	843fffc4 	addi	r16,r16,-1
811140c8:	8020933a 	slli	r16,r16,12
811140cc:	1400060e 	bge	r2,r16,811140e8 <_malloc_trim_r+0x70>
811140d0:	000b883a 	mov	r5,zero
811140d4:	9009883a 	mov	r4,r18
811140d8:	110b88c0 	call	8110b88c <_sbrk_r>
811140dc:	98c00217 	ldw	r3,8(r19)
811140e0:	1c47883a 	add	r3,r3,r17
811140e4:	10c00a26 	beq	r2,r3,81114110 <_malloc_trim_r+0x98>
811140e8:	9009883a 	mov	r4,r18
811140ec:	11206fc0 	call	811206fc <__malloc_unlock>
811140f0:	0005883a 	mov	r2,zero
811140f4:	dfc00417 	ldw	ra,16(sp)
811140f8:	dcc00317 	ldw	r19,12(sp)
811140fc:	dc800217 	ldw	r18,8(sp)
81114100:	dc400117 	ldw	r17,4(sp)
81114104:	dc000017 	ldw	r16,0(sp)
81114108:	dec00504 	addi	sp,sp,20
8111410c:	f800283a 	ret
81114110:	040bc83a 	sub	r5,zero,r16
81114114:	9009883a 	mov	r4,r18
81114118:	110b88c0 	call	8110b88c <_sbrk_r>
8111411c:	00ffffc4 	movi	r3,-1
81114120:	10c00d26 	beq	r2,r3,81114158 <_malloc_trim_r+0xe0>
81114124:	00e044f4 	movhi	r3,33043
81114128:	18d7e804 	addi	r3,r3,24480
8111412c:	18800017 	ldw	r2,0(r3)
81114130:	99000217 	ldw	r4,8(r19)
81114134:	8c23c83a 	sub	r17,r17,r16
81114138:	8c400054 	ori	r17,r17,1
8111413c:	1421c83a 	sub	r16,r2,r16
81114140:	24400115 	stw	r17,4(r4)
81114144:	9009883a 	mov	r4,r18
81114148:	1c000015 	stw	r16,0(r3)
8111414c:	11206fc0 	call	811206fc <__malloc_unlock>
81114150:	00800044 	movi	r2,1
81114154:	003fe706 	br	811140f4 <__reset+0xfb0f40f4>
81114158:	000b883a 	mov	r5,zero
8111415c:	9009883a 	mov	r4,r18
81114160:	110b88c0 	call	8110b88c <_sbrk_r>
81114164:	99000217 	ldw	r4,8(r19)
81114168:	014003c4 	movi	r5,15
8111416c:	1107c83a 	sub	r3,r2,r4
81114170:	28ffdd0e 	bge	r5,r3,811140e8 <__reset+0xfb0f40e8>
81114174:	016044f4 	movhi	r5,33043
81114178:	29576504 	addi	r5,r5,23956
8111417c:	29400017 	ldw	r5,0(r5)
81114180:	18c00054 	ori	r3,r3,1
81114184:	20c00115 	stw	r3,4(r4)
81114188:	00e044f4 	movhi	r3,33043
8111418c:	1145c83a 	sub	r2,r2,r5
81114190:	18d7e804 	addi	r3,r3,24480
81114194:	18800015 	stw	r2,0(r3)
81114198:	003fd306 	br	811140e8 <__reset+0xfb0f40e8>

8111419c <_free_r>:
8111419c:	28004126 	beq	r5,zero,811142a4 <_free_r+0x108>
811141a0:	defffd04 	addi	sp,sp,-12
811141a4:	dc400115 	stw	r17,4(sp)
811141a8:	dc000015 	stw	r16,0(sp)
811141ac:	2023883a 	mov	r17,r4
811141b0:	2821883a 	mov	r16,r5
811141b4:	dfc00215 	stw	ra,8(sp)
811141b8:	11205dc0 	call	811205dc <__malloc_lock>
811141bc:	81ffff17 	ldw	r7,-4(r16)
811141c0:	00bfff84 	movi	r2,-2
811141c4:	012044f4 	movhi	r4,33043
811141c8:	81bffe04 	addi	r6,r16,-8
811141cc:	3884703a 	and	r2,r7,r2
811141d0:	21114604 	addi	r4,r4,17688
811141d4:	308b883a 	add	r5,r6,r2
811141d8:	2a400117 	ldw	r9,4(r5)
811141dc:	22000217 	ldw	r8,8(r4)
811141e0:	00ffff04 	movi	r3,-4
811141e4:	48c6703a 	and	r3,r9,r3
811141e8:	2a005726 	beq	r5,r8,81114348 <_free_r+0x1ac>
811141ec:	28c00115 	stw	r3,4(r5)
811141f0:	39c0004c 	andi	r7,r7,1
811141f4:	3800091e 	bne	r7,zero,8111421c <_free_r+0x80>
811141f8:	823ffe17 	ldw	r8,-8(r16)
811141fc:	22400204 	addi	r9,r4,8
81114200:	320dc83a 	sub	r6,r6,r8
81114204:	31c00217 	ldw	r7,8(r6)
81114208:	1205883a 	add	r2,r2,r8
8111420c:	3a406526 	beq	r7,r9,811143a4 <_free_r+0x208>
81114210:	32000317 	ldw	r8,12(r6)
81114214:	3a000315 	stw	r8,12(r7)
81114218:	41c00215 	stw	r7,8(r8)
8111421c:	28cf883a 	add	r7,r5,r3
81114220:	39c00117 	ldw	r7,4(r7)
81114224:	39c0004c 	andi	r7,r7,1
81114228:	38003a26 	beq	r7,zero,81114314 <_free_r+0x178>
8111422c:	10c00054 	ori	r3,r2,1
81114230:	30c00115 	stw	r3,4(r6)
81114234:	3087883a 	add	r3,r6,r2
81114238:	18800015 	stw	r2,0(r3)
8111423c:	00c07fc4 	movi	r3,511
81114240:	18801936 	bltu	r3,r2,811142a8 <_free_r+0x10c>
81114244:	1004d0fa 	srli	r2,r2,3
81114248:	01c00044 	movi	r7,1
8111424c:	21400117 	ldw	r5,4(r4)
81114250:	10c00044 	addi	r3,r2,1
81114254:	18c7883a 	add	r3,r3,r3
81114258:	1005d0ba 	srai	r2,r2,2
8111425c:	18c7883a 	add	r3,r3,r3
81114260:	18c7883a 	add	r3,r3,r3
81114264:	1907883a 	add	r3,r3,r4
81114268:	3884983a 	sll	r2,r7,r2
8111426c:	19c00017 	ldw	r7,0(r3)
81114270:	1a3ffe04 	addi	r8,r3,-8
81114274:	1144b03a 	or	r2,r2,r5
81114278:	32000315 	stw	r8,12(r6)
8111427c:	31c00215 	stw	r7,8(r6)
81114280:	20800115 	stw	r2,4(r4)
81114284:	19800015 	stw	r6,0(r3)
81114288:	39800315 	stw	r6,12(r7)
8111428c:	8809883a 	mov	r4,r17
81114290:	dfc00217 	ldw	ra,8(sp)
81114294:	dc400117 	ldw	r17,4(sp)
81114298:	dc000017 	ldw	r16,0(sp)
8111429c:	dec00304 	addi	sp,sp,12
811142a0:	11206fc1 	jmpi	811206fc <__malloc_unlock>
811142a4:	f800283a 	ret
811142a8:	100ad27a 	srli	r5,r2,9
811142ac:	00c00104 	movi	r3,4
811142b0:	19404a36 	bltu	r3,r5,811143dc <_free_r+0x240>
811142b4:	100ad1ba 	srli	r5,r2,6
811142b8:	28c00e44 	addi	r3,r5,57
811142bc:	18c7883a 	add	r3,r3,r3
811142c0:	29400e04 	addi	r5,r5,56
811142c4:	18c7883a 	add	r3,r3,r3
811142c8:	18c7883a 	add	r3,r3,r3
811142cc:	1909883a 	add	r4,r3,r4
811142d0:	20c00017 	ldw	r3,0(r4)
811142d4:	01e044f4 	movhi	r7,33043
811142d8:	213ffe04 	addi	r4,r4,-8
811142dc:	39d14604 	addi	r7,r7,17688
811142e0:	20c04426 	beq	r4,r3,811143f4 <_free_r+0x258>
811142e4:	01ffff04 	movi	r7,-4
811142e8:	19400117 	ldw	r5,4(r3)
811142ec:	29ca703a 	and	r5,r5,r7
811142f0:	1140022e 	bgeu	r2,r5,811142fc <_free_r+0x160>
811142f4:	18c00217 	ldw	r3,8(r3)
811142f8:	20fffb1e 	bne	r4,r3,811142e8 <__reset+0xfb0f42e8>
811142fc:	19000317 	ldw	r4,12(r3)
81114300:	31000315 	stw	r4,12(r6)
81114304:	30c00215 	stw	r3,8(r6)
81114308:	21800215 	stw	r6,8(r4)
8111430c:	19800315 	stw	r6,12(r3)
81114310:	003fde06 	br	8111428c <__reset+0xfb0f428c>
81114314:	29c00217 	ldw	r7,8(r5)
81114318:	10c5883a 	add	r2,r2,r3
8111431c:	00e044f4 	movhi	r3,33043
81114320:	18d14804 	addi	r3,r3,17696
81114324:	38c03b26 	beq	r7,r3,81114414 <_free_r+0x278>
81114328:	2a000317 	ldw	r8,12(r5)
8111432c:	11400054 	ori	r5,r2,1
81114330:	3087883a 	add	r3,r6,r2
81114334:	3a000315 	stw	r8,12(r7)
81114338:	41c00215 	stw	r7,8(r8)
8111433c:	31400115 	stw	r5,4(r6)
81114340:	18800015 	stw	r2,0(r3)
81114344:	003fbd06 	br	8111423c <__reset+0xfb0f423c>
81114348:	39c0004c 	andi	r7,r7,1
8111434c:	10c5883a 	add	r2,r2,r3
81114350:	3800071e 	bne	r7,zero,81114370 <_free_r+0x1d4>
81114354:	81fffe17 	ldw	r7,-8(r16)
81114358:	31cdc83a 	sub	r6,r6,r7
8111435c:	30c00317 	ldw	r3,12(r6)
81114360:	31400217 	ldw	r5,8(r6)
81114364:	11c5883a 	add	r2,r2,r7
81114368:	28c00315 	stw	r3,12(r5)
8111436c:	19400215 	stw	r5,8(r3)
81114370:	10c00054 	ori	r3,r2,1
81114374:	30c00115 	stw	r3,4(r6)
81114378:	00e044f4 	movhi	r3,33043
8111437c:	18d76604 	addi	r3,r3,23960
81114380:	18c00017 	ldw	r3,0(r3)
81114384:	21800215 	stw	r6,8(r4)
81114388:	10ffc036 	bltu	r2,r3,8111428c <__reset+0xfb0f428c>
8111438c:	00a044f4 	movhi	r2,33043
81114390:	1097b604 	addi	r2,r2,24280
81114394:	11400017 	ldw	r5,0(r2)
81114398:	8809883a 	mov	r4,r17
8111439c:	11140780 	call	81114078 <_malloc_trim_r>
811143a0:	003fba06 	br	8111428c <__reset+0xfb0f428c>
811143a4:	28c9883a 	add	r4,r5,r3
811143a8:	21000117 	ldw	r4,4(r4)
811143ac:	2100004c 	andi	r4,r4,1
811143b0:	2000391e 	bne	r4,zero,81114498 <_free_r+0x2fc>
811143b4:	29c00217 	ldw	r7,8(r5)
811143b8:	29000317 	ldw	r4,12(r5)
811143bc:	1885883a 	add	r2,r3,r2
811143c0:	10c00054 	ori	r3,r2,1
811143c4:	39000315 	stw	r4,12(r7)
811143c8:	21c00215 	stw	r7,8(r4)
811143cc:	30c00115 	stw	r3,4(r6)
811143d0:	308d883a 	add	r6,r6,r2
811143d4:	30800015 	stw	r2,0(r6)
811143d8:	003fac06 	br	8111428c <__reset+0xfb0f428c>
811143dc:	00c00504 	movi	r3,20
811143e0:	19401536 	bltu	r3,r5,81114438 <_free_r+0x29c>
811143e4:	28c01704 	addi	r3,r5,92
811143e8:	18c7883a 	add	r3,r3,r3
811143ec:	294016c4 	addi	r5,r5,91
811143f0:	003fb406 	br	811142c4 <__reset+0xfb0f42c4>
811143f4:	280bd0ba 	srai	r5,r5,2
811143f8:	00c00044 	movi	r3,1
811143fc:	38800117 	ldw	r2,4(r7)
81114400:	194a983a 	sll	r5,r3,r5
81114404:	2007883a 	mov	r3,r4
81114408:	2884b03a 	or	r2,r5,r2
8111440c:	38800115 	stw	r2,4(r7)
81114410:	003fbb06 	br	81114300 <__reset+0xfb0f4300>
81114414:	21800515 	stw	r6,20(r4)
81114418:	21800415 	stw	r6,16(r4)
8111441c:	10c00054 	ori	r3,r2,1
81114420:	31c00315 	stw	r7,12(r6)
81114424:	31c00215 	stw	r7,8(r6)
81114428:	30c00115 	stw	r3,4(r6)
8111442c:	308d883a 	add	r6,r6,r2
81114430:	30800015 	stw	r2,0(r6)
81114434:	003f9506 	br	8111428c <__reset+0xfb0f428c>
81114438:	00c01504 	movi	r3,84
8111443c:	19400536 	bltu	r3,r5,81114454 <_free_r+0x2b8>
81114440:	100ad33a 	srli	r5,r2,12
81114444:	28c01bc4 	addi	r3,r5,111
81114448:	18c7883a 	add	r3,r3,r3
8111444c:	29401b84 	addi	r5,r5,110
81114450:	003f9c06 	br	811142c4 <__reset+0xfb0f42c4>
81114454:	00c05504 	movi	r3,340
81114458:	19400536 	bltu	r3,r5,81114470 <_free_r+0x2d4>
8111445c:	100ad3fa 	srli	r5,r2,15
81114460:	28c01e04 	addi	r3,r5,120
81114464:	18c7883a 	add	r3,r3,r3
81114468:	29401dc4 	addi	r5,r5,119
8111446c:	003f9506 	br	811142c4 <__reset+0xfb0f42c4>
81114470:	00c15504 	movi	r3,1364
81114474:	19400536 	bltu	r3,r5,8111448c <_free_r+0x2f0>
81114478:	100ad4ba 	srli	r5,r2,18
8111447c:	28c01f44 	addi	r3,r5,125
81114480:	18c7883a 	add	r3,r3,r3
81114484:	29401f04 	addi	r5,r5,124
81114488:	003f8e06 	br	811142c4 <__reset+0xfb0f42c4>
8111448c:	00c03f84 	movi	r3,254
81114490:	01401f84 	movi	r5,126
81114494:	003f8b06 	br	811142c4 <__reset+0xfb0f42c4>
81114498:	10c00054 	ori	r3,r2,1
8111449c:	30c00115 	stw	r3,4(r6)
811144a0:	308d883a 	add	r6,r6,r2
811144a4:	30800015 	stw	r2,0(r6)
811144a8:	003f7806 	br	8111428c <__reset+0xfb0f428c>

811144ac <__sfvwrite_r>:
811144ac:	30800217 	ldw	r2,8(r6)
811144b0:	10006726 	beq	r2,zero,81114650 <__sfvwrite_r+0x1a4>
811144b4:	28c0030b 	ldhu	r3,12(r5)
811144b8:	defff404 	addi	sp,sp,-48
811144bc:	dd400715 	stw	r21,28(sp)
811144c0:	dd000615 	stw	r20,24(sp)
811144c4:	dc000215 	stw	r16,8(sp)
811144c8:	dfc00b15 	stw	ra,44(sp)
811144cc:	df000a15 	stw	fp,40(sp)
811144d0:	ddc00915 	stw	r23,36(sp)
811144d4:	dd800815 	stw	r22,32(sp)
811144d8:	dcc00515 	stw	r19,20(sp)
811144dc:	dc800415 	stw	r18,16(sp)
811144e0:	dc400315 	stw	r17,12(sp)
811144e4:	1880020c 	andi	r2,r3,8
811144e8:	2821883a 	mov	r16,r5
811144ec:	202b883a 	mov	r21,r4
811144f0:	3029883a 	mov	r20,r6
811144f4:	10002726 	beq	r2,zero,81114594 <__sfvwrite_r+0xe8>
811144f8:	28800417 	ldw	r2,16(r5)
811144fc:	10002526 	beq	r2,zero,81114594 <__sfvwrite_r+0xe8>
81114500:	1880008c 	andi	r2,r3,2
81114504:	a4400017 	ldw	r17,0(r20)
81114508:	10002a26 	beq	r2,zero,811145b4 <__sfvwrite_r+0x108>
8111450c:	05a00034 	movhi	r22,32768
81114510:	0027883a 	mov	r19,zero
81114514:	0025883a 	mov	r18,zero
81114518:	b5bf0004 	addi	r22,r22,-1024
8111451c:	980d883a 	mov	r6,r19
81114520:	a809883a 	mov	r4,r21
81114524:	90004626 	beq	r18,zero,81114640 <__sfvwrite_r+0x194>
81114528:	900f883a 	mov	r7,r18
8111452c:	b480022e 	bgeu	r22,r18,81114538 <__sfvwrite_r+0x8c>
81114530:	01e00034 	movhi	r7,32768
81114534:	39ff0004 	addi	r7,r7,-1024
81114538:	80800917 	ldw	r2,36(r16)
8111453c:	81400717 	ldw	r5,28(r16)
81114540:	103ee83a 	callr	r2
81114544:	0080570e 	bge	zero,r2,811146a4 <__sfvwrite_r+0x1f8>
81114548:	a0c00217 	ldw	r3,8(r20)
8111454c:	98a7883a 	add	r19,r19,r2
81114550:	90a5c83a 	sub	r18,r18,r2
81114554:	1885c83a 	sub	r2,r3,r2
81114558:	a0800215 	stw	r2,8(r20)
8111455c:	103fef1e 	bne	r2,zero,8111451c <__reset+0xfb0f451c>
81114560:	0005883a 	mov	r2,zero
81114564:	dfc00b17 	ldw	ra,44(sp)
81114568:	df000a17 	ldw	fp,40(sp)
8111456c:	ddc00917 	ldw	r23,36(sp)
81114570:	dd800817 	ldw	r22,32(sp)
81114574:	dd400717 	ldw	r21,28(sp)
81114578:	dd000617 	ldw	r20,24(sp)
8111457c:	dcc00517 	ldw	r19,20(sp)
81114580:	dc800417 	ldw	r18,16(sp)
81114584:	dc400317 	ldw	r17,12(sp)
81114588:	dc000217 	ldw	r16,8(sp)
8111458c:	dec00c04 	addi	sp,sp,48
81114590:	f800283a 	ret
81114594:	800b883a 	mov	r5,r16
81114598:	a809883a 	mov	r4,r21
8111459c:	1111cf40 	call	81111cf4 <__swsetup_r>
811145a0:	1000eb1e 	bne	r2,zero,81114950 <__sfvwrite_r+0x4a4>
811145a4:	80c0030b 	ldhu	r3,12(r16)
811145a8:	a4400017 	ldw	r17,0(r20)
811145ac:	1880008c 	andi	r2,r3,2
811145b0:	103fd61e 	bne	r2,zero,8111450c <__reset+0xfb0f450c>
811145b4:	1880004c 	andi	r2,r3,1
811145b8:	10003f1e 	bne	r2,zero,811146b8 <__sfvwrite_r+0x20c>
811145bc:	0039883a 	mov	fp,zero
811145c0:	0025883a 	mov	r18,zero
811145c4:	90001a26 	beq	r18,zero,81114630 <__sfvwrite_r+0x184>
811145c8:	1880800c 	andi	r2,r3,512
811145cc:	84c00217 	ldw	r19,8(r16)
811145d0:	10002126 	beq	r2,zero,81114658 <__sfvwrite_r+0x1ac>
811145d4:	982f883a 	mov	r23,r19
811145d8:	94c09336 	bltu	r18,r19,81114828 <__sfvwrite_r+0x37c>
811145dc:	1881200c 	andi	r2,r3,1152
811145e0:	10009e1e 	bne	r2,zero,8111485c <__sfvwrite_r+0x3b0>
811145e4:	81000017 	ldw	r4,0(r16)
811145e8:	b80d883a 	mov	r6,r23
811145ec:	e00b883a 	mov	r5,fp
811145f0:	1114fb80 	call	81114fb8 <memmove>
811145f4:	80c00217 	ldw	r3,8(r16)
811145f8:	81000017 	ldw	r4,0(r16)
811145fc:	9005883a 	mov	r2,r18
81114600:	1ce7c83a 	sub	r19,r3,r19
81114604:	25cf883a 	add	r7,r4,r23
81114608:	84c00215 	stw	r19,8(r16)
8111460c:	81c00015 	stw	r7,0(r16)
81114610:	a0c00217 	ldw	r3,8(r20)
81114614:	e0b9883a 	add	fp,fp,r2
81114618:	90a5c83a 	sub	r18,r18,r2
8111461c:	18a7c83a 	sub	r19,r3,r2
81114620:	a4c00215 	stw	r19,8(r20)
81114624:	983fce26 	beq	r19,zero,81114560 <__reset+0xfb0f4560>
81114628:	80c0030b 	ldhu	r3,12(r16)
8111462c:	903fe61e 	bne	r18,zero,811145c8 <__reset+0xfb0f45c8>
81114630:	8f000017 	ldw	fp,0(r17)
81114634:	8c800117 	ldw	r18,4(r17)
81114638:	8c400204 	addi	r17,r17,8
8111463c:	003fe106 	br	811145c4 <__reset+0xfb0f45c4>
81114640:	8cc00017 	ldw	r19,0(r17)
81114644:	8c800117 	ldw	r18,4(r17)
81114648:	8c400204 	addi	r17,r17,8
8111464c:	003fb306 	br	8111451c <__reset+0xfb0f451c>
81114650:	0005883a 	mov	r2,zero
81114654:	f800283a 	ret
81114658:	81000017 	ldw	r4,0(r16)
8111465c:	80800417 	ldw	r2,16(r16)
81114660:	11005736 	bltu	r2,r4,811147c0 <__sfvwrite_r+0x314>
81114664:	85c00517 	ldw	r23,20(r16)
81114668:	95c05536 	bltu	r18,r23,811147c0 <__sfvwrite_r+0x314>
8111466c:	00a00034 	movhi	r2,32768
81114670:	10bfffc4 	addi	r2,r2,-1
81114674:	9009883a 	mov	r4,r18
81114678:	1480012e 	bgeu	r2,r18,81114680 <__sfvwrite_r+0x1d4>
8111467c:	1009883a 	mov	r4,r2
81114680:	b80b883a 	mov	r5,r23
81114684:	111d4800 	call	8111d480 <__divsi3>
81114688:	15cf383a 	mul	r7,r2,r23
8111468c:	81400717 	ldw	r5,28(r16)
81114690:	80800917 	ldw	r2,36(r16)
81114694:	e00d883a 	mov	r6,fp
81114698:	a809883a 	mov	r4,r21
8111469c:	103ee83a 	callr	r2
811146a0:	00bfdb16 	blt	zero,r2,81114610 <__reset+0xfb0f4610>
811146a4:	8080030b 	ldhu	r2,12(r16)
811146a8:	10801014 	ori	r2,r2,64
811146ac:	8080030d 	sth	r2,12(r16)
811146b0:	00bfffc4 	movi	r2,-1
811146b4:	003fab06 	br	81114564 <__reset+0xfb0f4564>
811146b8:	0027883a 	mov	r19,zero
811146bc:	0011883a 	mov	r8,zero
811146c0:	0039883a 	mov	fp,zero
811146c4:	0025883a 	mov	r18,zero
811146c8:	90001f26 	beq	r18,zero,81114748 <__sfvwrite_r+0x29c>
811146cc:	40005a26 	beq	r8,zero,81114838 <__sfvwrite_r+0x38c>
811146d0:	982d883a 	mov	r22,r19
811146d4:	94c0012e 	bgeu	r18,r19,811146dc <__sfvwrite_r+0x230>
811146d8:	902d883a 	mov	r22,r18
811146dc:	81000017 	ldw	r4,0(r16)
811146e0:	80800417 	ldw	r2,16(r16)
811146e4:	b02f883a 	mov	r23,r22
811146e8:	81c00517 	ldw	r7,20(r16)
811146ec:	1100032e 	bgeu	r2,r4,811146fc <__sfvwrite_r+0x250>
811146f0:	80c00217 	ldw	r3,8(r16)
811146f4:	38c7883a 	add	r3,r7,r3
811146f8:	1d801816 	blt	r3,r22,8111475c <__sfvwrite_r+0x2b0>
811146fc:	b1c03e16 	blt	r22,r7,811147f8 <__sfvwrite_r+0x34c>
81114700:	80800917 	ldw	r2,36(r16)
81114704:	81400717 	ldw	r5,28(r16)
81114708:	e00d883a 	mov	r6,fp
8111470c:	da000115 	stw	r8,4(sp)
81114710:	a809883a 	mov	r4,r21
81114714:	103ee83a 	callr	r2
81114718:	102f883a 	mov	r23,r2
8111471c:	da000117 	ldw	r8,4(sp)
81114720:	00bfe00e 	bge	zero,r2,811146a4 <__reset+0xfb0f46a4>
81114724:	9de7c83a 	sub	r19,r19,r23
81114728:	98001f26 	beq	r19,zero,811147a8 <__sfvwrite_r+0x2fc>
8111472c:	a0800217 	ldw	r2,8(r20)
81114730:	e5f9883a 	add	fp,fp,r23
81114734:	95e5c83a 	sub	r18,r18,r23
81114738:	15efc83a 	sub	r23,r2,r23
8111473c:	a5c00215 	stw	r23,8(r20)
81114740:	b83f8726 	beq	r23,zero,81114560 <__reset+0xfb0f4560>
81114744:	903fe11e 	bne	r18,zero,811146cc <__reset+0xfb0f46cc>
81114748:	8f000017 	ldw	fp,0(r17)
8111474c:	8c800117 	ldw	r18,4(r17)
81114750:	0011883a 	mov	r8,zero
81114754:	8c400204 	addi	r17,r17,8
81114758:	003fdb06 	br	811146c8 <__reset+0xfb0f46c8>
8111475c:	180d883a 	mov	r6,r3
81114760:	e00b883a 	mov	r5,fp
81114764:	da000115 	stw	r8,4(sp)
81114768:	d8c00015 	stw	r3,0(sp)
8111476c:	1114fb80 	call	81114fb8 <memmove>
81114770:	d8c00017 	ldw	r3,0(sp)
81114774:	80800017 	ldw	r2,0(r16)
81114778:	800b883a 	mov	r5,r16
8111477c:	a809883a 	mov	r4,r21
81114780:	10c5883a 	add	r2,r2,r3
81114784:	80800015 	stw	r2,0(r16)
81114788:	d8c00015 	stw	r3,0(sp)
8111478c:	11139400 	call	81113940 <_fflush_r>
81114790:	d8c00017 	ldw	r3,0(sp)
81114794:	da000117 	ldw	r8,4(sp)
81114798:	103fc21e 	bne	r2,zero,811146a4 <__reset+0xfb0f46a4>
8111479c:	182f883a 	mov	r23,r3
811147a0:	9de7c83a 	sub	r19,r19,r23
811147a4:	983fe11e 	bne	r19,zero,8111472c <__reset+0xfb0f472c>
811147a8:	800b883a 	mov	r5,r16
811147ac:	a809883a 	mov	r4,r21
811147b0:	11139400 	call	81113940 <_fflush_r>
811147b4:	103fbb1e 	bne	r2,zero,811146a4 <__reset+0xfb0f46a4>
811147b8:	0011883a 	mov	r8,zero
811147bc:	003fdb06 	br	8111472c <__reset+0xfb0f472c>
811147c0:	94c0012e 	bgeu	r18,r19,811147c8 <__sfvwrite_r+0x31c>
811147c4:	9027883a 	mov	r19,r18
811147c8:	980d883a 	mov	r6,r19
811147cc:	e00b883a 	mov	r5,fp
811147d0:	1114fb80 	call	81114fb8 <memmove>
811147d4:	80800217 	ldw	r2,8(r16)
811147d8:	80c00017 	ldw	r3,0(r16)
811147dc:	14c5c83a 	sub	r2,r2,r19
811147e0:	1cc7883a 	add	r3,r3,r19
811147e4:	80800215 	stw	r2,8(r16)
811147e8:	80c00015 	stw	r3,0(r16)
811147ec:	10004326 	beq	r2,zero,811148fc <__sfvwrite_r+0x450>
811147f0:	9805883a 	mov	r2,r19
811147f4:	003f8606 	br	81114610 <__reset+0xfb0f4610>
811147f8:	b00d883a 	mov	r6,r22
811147fc:	e00b883a 	mov	r5,fp
81114800:	da000115 	stw	r8,4(sp)
81114804:	1114fb80 	call	81114fb8 <memmove>
81114808:	80800217 	ldw	r2,8(r16)
8111480c:	80c00017 	ldw	r3,0(r16)
81114810:	da000117 	ldw	r8,4(sp)
81114814:	1585c83a 	sub	r2,r2,r22
81114818:	1dad883a 	add	r22,r3,r22
8111481c:	80800215 	stw	r2,8(r16)
81114820:	85800015 	stw	r22,0(r16)
81114824:	003fbf06 	br	81114724 <__reset+0xfb0f4724>
81114828:	81000017 	ldw	r4,0(r16)
8111482c:	9027883a 	mov	r19,r18
81114830:	902f883a 	mov	r23,r18
81114834:	003f6c06 	br	811145e8 <__reset+0xfb0f45e8>
81114838:	900d883a 	mov	r6,r18
8111483c:	01400284 	movi	r5,10
81114840:	e009883a 	mov	r4,fp
81114844:	1114ed40 	call	81114ed4 <memchr>
81114848:	10003e26 	beq	r2,zero,81114944 <__sfvwrite_r+0x498>
8111484c:	10800044 	addi	r2,r2,1
81114850:	1727c83a 	sub	r19,r2,fp
81114854:	02000044 	movi	r8,1
81114858:	003f9d06 	br	811146d0 <__reset+0xfb0f46d0>
8111485c:	80800517 	ldw	r2,20(r16)
81114860:	81400417 	ldw	r5,16(r16)
81114864:	81c00017 	ldw	r7,0(r16)
81114868:	10a7883a 	add	r19,r2,r2
8111486c:	9885883a 	add	r2,r19,r2
81114870:	1026d7fa 	srli	r19,r2,31
81114874:	396dc83a 	sub	r22,r7,r5
81114878:	b1000044 	addi	r4,r22,1
8111487c:	9885883a 	add	r2,r19,r2
81114880:	1027d07a 	srai	r19,r2,1
81114884:	2485883a 	add	r2,r4,r18
81114888:	980d883a 	mov	r6,r19
8111488c:	9880022e 	bgeu	r19,r2,81114898 <__sfvwrite_r+0x3ec>
81114890:	1027883a 	mov	r19,r2
81114894:	100d883a 	mov	r6,r2
81114898:	18c1000c 	andi	r3,r3,1024
8111489c:	18001c26 	beq	r3,zero,81114910 <__sfvwrite_r+0x464>
811148a0:	300b883a 	mov	r5,r6
811148a4:	a809883a 	mov	r4,r21
811148a8:	110aa600 	call	8110aa60 <_malloc_r>
811148ac:	102f883a 	mov	r23,r2
811148b0:	10002926 	beq	r2,zero,81114958 <__sfvwrite_r+0x4ac>
811148b4:	81400417 	ldw	r5,16(r16)
811148b8:	b00d883a 	mov	r6,r22
811148bc:	1009883a 	mov	r4,r2
811148c0:	110b26c0 	call	8110b26c <memcpy>
811148c4:	8080030b 	ldhu	r2,12(r16)
811148c8:	00fedfc4 	movi	r3,-1153
811148cc:	10c4703a 	and	r2,r2,r3
811148d0:	10802014 	ori	r2,r2,128
811148d4:	8080030d 	sth	r2,12(r16)
811148d8:	bd89883a 	add	r4,r23,r22
811148dc:	9d8fc83a 	sub	r7,r19,r22
811148e0:	85c00415 	stw	r23,16(r16)
811148e4:	84c00515 	stw	r19,20(r16)
811148e8:	81000015 	stw	r4,0(r16)
811148ec:	9027883a 	mov	r19,r18
811148f0:	81c00215 	stw	r7,8(r16)
811148f4:	902f883a 	mov	r23,r18
811148f8:	003f3b06 	br	811145e8 <__reset+0xfb0f45e8>
811148fc:	800b883a 	mov	r5,r16
81114900:	a809883a 	mov	r4,r21
81114904:	11139400 	call	81113940 <_fflush_r>
81114908:	103fb926 	beq	r2,zero,811147f0 <__reset+0xfb0f47f0>
8111490c:	003f6506 	br	811146a4 <__reset+0xfb0f46a4>
81114910:	a809883a 	mov	r4,r21
81114914:	11162d80 	call	811162d8 <_realloc_r>
81114918:	102f883a 	mov	r23,r2
8111491c:	103fee1e 	bne	r2,zero,811148d8 <__reset+0xfb0f48d8>
81114920:	81400417 	ldw	r5,16(r16)
81114924:	a809883a 	mov	r4,r21
81114928:	111419c0 	call	8111419c <_free_r>
8111492c:	8080030b 	ldhu	r2,12(r16)
81114930:	00ffdfc4 	movi	r3,-129
81114934:	1884703a 	and	r2,r3,r2
81114938:	00c00304 	movi	r3,12
8111493c:	a8c00015 	stw	r3,0(r21)
81114940:	003f5906 	br	811146a8 <__reset+0xfb0f46a8>
81114944:	94c00044 	addi	r19,r18,1
81114948:	02000044 	movi	r8,1
8111494c:	003f6006 	br	811146d0 <__reset+0xfb0f46d0>
81114950:	00bfffc4 	movi	r2,-1
81114954:	003f0306 	br	81114564 <__reset+0xfb0f4564>
81114958:	00800304 	movi	r2,12
8111495c:	a8800015 	stw	r2,0(r21)
81114960:	8080030b 	ldhu	r2,12(r16)
81114964:	003f5006 	br	811146a8 <__reset+0xfb0f46a8>

81114968 <_fwalk>:
81114968:	defff704 	addi	sp,sp,-36
8111496c:	dd000415 	stw	r20,16(sp)
81114970:	dfc00815 	stw	ra,32(sp)
81114974:	ddc00715 	stw	r23,28(sp)
81114978:	dd800615 	stw	r22,24(sp)
8111497c:	dd400515 	stw	r21,20(sp)
81114980:	dcc00315 	stw	r19,12(sp)
81114984:	dc800215 	stw	r18,8(sp)
81114988:	dc400115 	stw	r17,4(sp)
8111498c:	dc000015 	stw	r16,0(sp)
81114990:	2500b804 	addi	r20,r4,736
81114994:	a0002326 	beq	r20,zero,81114a24 <_fwalk+0xbc>
81114998:	282b883a 	mov	r21,r5
8111499c:	002f883a 	mov	r23,zero
811149a0:	05800044 	movi	r22,1
811149a4:	04ffffc4 	movi	r19,-1
811149a8:	a4400117 	ldw	r17,4(r20)
811149ac:	a4800217 	ldw	r18,8(r20)
811149b0:	8c7fffc4 	addi	r17,r17,-1
811149b4:	88000d16 	blt	r17,zero,811149ec <_fwalk+0x84>
811149b8:	94000304 	addi	r16,r18,12
811149bc:	94800384 	addi	r18,r18,14
811149c0:	8080000b 	ldhu	r2,0(r16)
811149c4:	8c7fffc4 	addi	r17,r17,-1
811149c8:	813ffd04 	addi	r4,r16,-12
811149cc:	b080042e 	bgeu	r22,r2,811149e0 <_fwalk+0x78>
811149d0:	9080000f 	ldh	r2,0(r18)
811149d4:	14c00226 	beq	r2,r19,811149e0 <_fwalk+0x78>
811149d8:	a83ee83a 	callr	r21
811149dc:	b8aeb03a 	or	r23,r23,r2
811149e0:	84001a04 	addi	r16,r16,104
811149e4:	94801a04 	addi	r18,r18,104
811149e8:	8cfff51e 	bne	r17,r19,811149c0 <__reset+0xfb0f49c0>
811149ec:	a5000017 	ldw	r20,0(r20)
811149f0:	a03fed1e 	bne	r20,zero,811149a8 <__reset+0xfb0f49a8>
811149f4:	b805883a 	mov	r2,r23
811149f8:	dfc00817 	ldw	ra,32(sp)
811149fc:	ddc00717 	ldw	r23,28(sp)
81114a00:	dd800617 	ldw	r22,24(sp)
81114a04:	dd400517 	ldw	r21,20(sp)
81114a08:	dd000417 	ldw	r20,16(sp)
81114a0c:	dcc00317 	ldw	r19,12(sp)
81114a10:	dc800217 	ldw	r18,8(sp)
81114a14:	dc400117 	ldw	r17,4(sp)
81114a18:	dc000017 	ldw	r16,0(sp)
81114a1c:	dec00904 	addi	sp,sp,36
81114a20:	f800283a 	ret
81114a24:	002f883a 	mov	r23,zero
81114a28:	003ff206 	br	811149f4 <__reset+0xfb0f49f4>

81114a2c <_fwalk_reent>:
81114a2c:	defff704 	addi	sp,sp,-36
81114a30:	dd000415 	stw	r20,16(sp)
81114a34:	dfc00815 	stw	ra,32(sp)
81114a38:	ddc00715 	stw	r23,28(sp)
81114a3c:	dd800615 	stw	r22,24(sp)
81114a40:	dd400515 	stw	r21,20(sp)
81114a44:	dcc00315 	stw	r19,12(sp)
81114a48:	dc800215 	stw	r18,8(sp)
81114a4c:	dc400115 	stw	r17,4(sp)
81114a50:	dc000015 	stw	r16,0(sp)
81114a54:	2500b804 	addi	r20,r4,736
81114a58:	a0002326 	beq	r20,zero,81114ae8 <_fwalk_reent+0xbc>
81114a5c:	282b883a 	mov	r21,r5
81114a60:	2027883a 	mov	r19,r4
81114a64:	002f883a 	mov	r23,zero
81114a68:	05800044 	movi	r22,1
81114a6c:	04bfffc4 	movi	r18,-1
81114a70:	a4400117 	ldw	r17,4(r20)
81114a74:	a4000217 	ldw	r16,8(r20)
81114a78:	8c7fffc4 	addi	r17,r17,-1
81114a7c:	88000c16 	blt	r17,zero,81114ab0 <_fwalk_reent+0x84>
81114a80:	84000304 	addi	r16,r16,12
81114a84:	8080000b 	ldhu	r2,0(r16)
81114a88:	8c7fffc4 	addi	r17,r17,-1
81114a8c:	817ffd04 	addi	r5,r16,-12
81114a90:	b080052e 	bgeu	r22,r2,81114aa8 <_fwalk_reent+0x7c>
81114a94:	8080008f 	ldh	r2,2(r16)
81114a98:	9809883a 	mov	r4,r19
81114a9c:	14800226 	beq	r2,r18,81114aa8 <_fwalk_reent+0x7c>
81114aa0:	a83ee83a 	callr	r21
81114aa4:	b8aeb03a 	or	r23,r23,r2
81114aa8:	84001a04 	addi	r16,r16,104
81114aac:	8cbff51e 	bne	r17,r18,81114a84 <__reset+0xfb0f4a84>
81114ab0:	a5000017 	ldw	r20,0(r20)
81114ab4:	a03fee1e 	bne	r20,zero,81114a70 <__reset+0xfb0f4a70>
81114ab8:	b805883a 	mov	r2,r23
81114abc:	dfc00817 	ldw	ra,32(sp)
81114ac0:	ddc00717 	ldw	r23,28(sp)
81114ac4:	dd800617 	ldw	r22,24(sp)
81114ac8:	dd400517 	ldw	r21,20(sp)
81114acc:	dd000417 	ldw	r20,16(sp)
81114ad0:	dcc00317 	ldw	r19,12(sp)
81114ad4:	dc800217 	ldw	r18,8(sp)
81114ad8:	dc400117 	ldw	r17,4(sp)
81114adc:	dc000017 	ldw	r16,0(sp)
81114ae0:	dec00904 	addi	sp,sp,36
81114ae4:	f800283a 	ret
81114ae8:	002f883a 	mov	r23,zero
81114aec:	003ff206 	br	81114ab8 <__reset+0xfb0f4ab8>

81114af0 <_isatty_r>:
81114af0:	defffd04 	addi	sp,sp,-12
81114af4:	dc000015 	stw	r16,0(sp)
81114af8:	042044f4 	movhi	r16,33043
81114afc:	dc400115 	stw	r17,4(sp)
81114b00:	8417b304 	addi	r16,r16,24268
81114b04:	2023883a 	mov	r17,r4
81114b08:	2809883a 	mov	r4,r5
81114b0c:	dfc00215 	stw	ra,8(sp)
81114b10:	80000015 	stw	zero,0(r16)
81114b14:	111f99c0 	call	8111f99c <isatty>
81114b18:	00ffffc4 	movi	r3,-1
81114b1c:	10c00526 	beq	r2,r3,81114b34 <_isatty_r+0x44>
81114b20:	dfc00217 	ldw	ra,8(sp)
81114b24:	dc400117 	ldw	r17,4(sp)
81114b28:	dc000017 	ldw	r16,0(sp)
81114b2c:	dec00304 	addi	sp,sp,12
81114b30:	f800283a 	ret
81114b34:	80c00017 	ldw	r3,0(r16)
81114b38:	183ff926 	beq	r3,zero,81114b20 <__reset+0xfb0f4b20>
81114b3c:	88c00015 	stw	r3,0(r17)
81114b40:	003ff706 	br	81114b20 <__reset+0xfb0f4b20>

81114b44 <iswspace>:
81114b44:	00803fc4 	movi	r2,255
81114b48:	11000836 	bltu	r2,r4,81114b6c <iswspace+0x28>
81114b4c:	00a044f4 	movhi	r2,33043
81114b50:	10976704 	addi	r2,r2,23964
81114b54:	10800017 	ldw	r2,0(r2)
81114b58:	1109883a 	add	r4,r2,r4
81114b5c:	20800043 	ldbu	r2,1(r4)
81114b60:	1080020c 	andi	r2,r2,8
81114b64:	10803fcc 	andi	r2,r2,255
81114b68:	f800283a 	ret
81114b6c:	0005883a 	mov	r2,zero
81114b70:	f800283a 	ret

81114b74 <_setlocale_r>:
81114b74:	30001b26 	beq	r6,zero,81114be4 <_setlocale_r+0x70>
81114b78:	016044f4 	movhi	r5,33043
81114b7c:	defffe04 	addi	sp,sp,-8
81114b80:	294e9204 	addi	r5,r5,14920
81114b84:	3009883a 	mov	r4,r6
81114b88:	dc000015 	stw	r16,0(sp)
81114b8c:	dfc00115 	stw	ra,4(sp)
81114b90:	3021883a 	mov	r16,r6
81114b94:	110bb4c0 	call	8110bb4c <strcmp>
81114b98:	1000061e 	bne	r2,zero,81114bb4 <_setlocale_r+0x40>
81114b9c:	00a044f4 	movhi	r2,33043
81114ba0:	108dc004 	addi	r2,r2,14080
81114ba4:	dfc00117 	ldw	ra,4(sp)
81114ba8:	dc000017 	ldw	r16,0(sp)
81114bac:	dec00204 	addi	sp,sp,8
81114bb0:	f800283a 	ret
81114bb4:	016044f4 	movhi	r5,33043
81114bb8:	294dc004 	addi	r5,r5,14080
81114bbc:	8009883a 	mov	r4,r16
81114bc0:	110bb4c0 	call	8110bb4c <strcmp>
81114bc4:	103ff526 	beq	r2,zero,81114b9c <__reset+0xfb0f4b9c>
81114bc8:	016044f4 	movhi	r5,33043
81114bcc:	294dca04 	addi	r5,r5,14120
81114bd0:	8009883a 	mov	r4,r16
81114bd4:	110bb4c0 	call	8110bb4c <strcmp>
81114bd8:	103ff026 	beq	r2,zero,81114b9c <__reset+0xfb0f4b9c>
81114bdc:	0005883a 	mov	r2,zero
81114be0:	003ff006 	br	81114ba4 <__reset+0xfb0f4ba4>
81114be4:	00a044f4 	movhi	r2,33043
81114be8:	108dc004 	addi	r2,r2,14080
81114bec:	f800283a 	ret

81114bf0 <__locale_charset>:
81114bf0:	00a044f4 	movhi	r2,33043
81114bf4:	10925004 	addi	r2,r2,18752
81114bf8:	f800283a 	ret

81114bfc <__locale_mb_cur_max>:
81114bfc:	00a044f4 	movhi	r2,33043
81114c00:	10976804 	addi	r2,r2,23968
81114c04:	10800017 	ldw	r2,0(r2)
81114c08:	f800283a 	ret

81114c0c <__locale_msgcharset>:
81114c0c:	00a044f4 	movhi	r2,33043
81114c10:	10924804 	addi	r2,r2,18720
81114c14:	f800283a 	ret

81114c18 <__locale_cjk_lang>:
81114c18:	0005883a 	mov	r2,zero
81114c1c:	f800283a 	ret

81114c20 <_localeconv_r>:
81114c20:	00a044f4 	movhi	r2,33043
81114c24:	10925804 	addi	r2,r2,18784
81114c28:	f800283a 	ret

81114c2c <setlocale>:
81114c2c:	00a044f4 	movhi	r2,33043
81114c30:	10976404 	addi	r2,r2,23952
81114c34:	280d883a 	mov	r6,r5
81114c38:	200b883a 	mov	r5,r4
81114c3c:	11000017 	ldw	r4,0(r2)
81114c40:	1114b741 	jmpi	81114b74 <_setlocale_r>

81114c44 <localeconv>:
81114c44:	00a044f4 	movhi	r2,33043
81114c48:	10925804 	addi	r2,r2,18784
81114c4c:	f800283a 	ret

81114c50 <_lseek_r>:
81114c50:	defffd04 	addi	sp,sp,-12
81114c54:	2805883a 	mov	r2,r5
81114c58:	dc000015 	stw	r16,0(sp)
81114c5c:	042044f4 	movhi	r16,33043
81114c60:	dc400115 	stw	r17,4(sp)
81114c64:	300b883a 	mov	r5,r6
81114c68:	8417b304 	addi	r16,r16,24268
81114c6c:	2023883a 	mov	r17,r4
81114c70:	380d883a 	mov	r6,r7
81114c74:	1009883a 	mov	r4,r2
81114c78:	dfc00215 	stw	ra,8(sp)
81114c7c:	80000015 	stw	zero,0(r16)
81114c80:	111fa7c0 	call	8111fa7c <lseek>
81114c84:	00ffffc4 	movi	r3,-1
81114c88:	10c00526 	beq	r2,r3,81114ca0 <_lseek_r+0x50>
81114c8c:	dfc00217 	ldw	ra,8(sp)
81114c90:	dc400117 	ldw	r17,4(sp)
81114c94:	dc000017 	ldw	r16,0(sp)
81114c98:	dec00304 	addi	sp,sp,12
81114c9c:	f800283a 	ret
81114ca0:	80c00017 	ldw	r3,0(r16)
81114ca4:	183ff926 	beq	r3,zero,81114c8c <__reset+0xfb0f4c8c>
81114ca8:	88c00015 	stw	r3,0(r17)
81114cac:	003ff706 	br	81114c8c <__reset+0xfb0f4c8c>

81114cb0 <_mbrtowc_r>:
81114cb0:	defff704 	addi	sp,sp,-36
81114cb4:	00a044f4 	movhi	r2,33043
81114cb8:	dc800715 	stw	r18,28(sp)
81114cbc:	dc400615 	stw	r17,24(sp)
81114cc0:	dc000515 	stw	r16,20(sp)
81114cc4:	10976904 	addi	r2,r2,23972
81114cc8:	dfc00815 	stw	ra,32(sp)
81114ccc:	2021883a 	mov	r16,r4
81114cd0:	dc400917 	ldw	r17,36(sp)
81114cd4:	14800017 	ldw	r18,0(r2)
81114cd8:	30001626 	beq	r6,zero,81114d34 <_mbrtowc_r+0x84>
81114cdc:	d9400215 	stw	r5,8(sp)
81114ce0:	d9800315 	stw	r6,12(sp)
81114ce4:	d9c00415 	stw	r7,16(sp)
81114ce8:	1114bf00 	call	81114bf0 <__locale_charset>
81114cec:	d9c00417 	ldw	r7,16(sp)
81114cf0:	d9800317 	ldw	r6,12(sp)
81114cf4:	d9400217 	ldw	r5,8(sp)
81114cf8:	d8800015 	stw	r2,0(sp)
81114cfc:	dc400115 	stw	r17,4(sp)
81114d00:	8009883a 	mov	r4,r16
81114d04:	903ee83a 	callr	r18
81114d08:	00ffffc4 	movi	r3,-1
81114d0c:	10c0031e 	bne	r2,r3,81114d1c <_mbrtowc_r+0x6c>
81114d10:	88000015 	stw	zero,0(r17)
81114d14:	00c02284 	movi	r3,138
81114d18:	80c00015 	stw	r3,0(r16)
81114d1c:	dfc00817 	ldw	ra,32(sp)
81114d20:	dc800717 	ldw	r18,28(sp)
81114d24:	dc400617 	ldw	r17,24(sp)
81114d28:	dc000517 	ldw	r16,20(sp)
81114d2c:	dec00904 	addi	sp,sp,36
81114d30:	f800283a 	ret
81114d34:	1114bf00 	call	81114bf0 <__locale_charset>
81114d38:	01a044f4 	movhi	r6,33043
81114d3c:	318dca04 	addi	r6,r6,14120
81114d40:	dc400115 	stw	r17,4(sp)
81114d44:	d8800015 	stw	r2,0(sp)
81114d48:	01c00044 	movi	r7,1
81114d4c:	000b883a 	mov	r5,zero
81114d50:	8009883a 	mov	r4,r16
81114d54:	903ee83a 	callr	r18
81114d58:	003feb06 	br	81114d08 <__reset+0xfb0f4d08>

81114d5c <mbrtowc>:
81114d5c:	defff704 	addi	sp,sp,-36
81114d60:	00a044f4 	movhi	r2,33043
81114d64:	dc800415 	stw	r18,16(sp)
81114d68:	dc400315 	stw	r17,12(sp)
81114d6c:	10976404 	addi	r2,r2,23952
81114d70:	dfc00815 	stw	ra,32(sp)
81114d74:	dd400715 	stw	r21,28(sp)
81114d78:	dd000615 	stw	r20,24(sp)
81114d7c:	dcc00515 	stw	r19,20(sp)
81114d80:	dc000215 	stw	r16,8(sp)
81114d84:	3825883a 	mov	r18,r7
81114d88:	14400017 	ldw	r17,0(r2)
81114d8c:	28001c26 	beq	r5,zero,81114e00 <mbrtowc+0xa4>
81114d90:	00a044f4 	movhi	r2,33043
81114d94:	10976904 	addi	r2,r2,23972
81114d98:	15400017 	ldw	r21,0(r2)
81114d9c:	2821883a 	mov	r16,r5
81114da0:	2027883a 	mov	r19,r4
81114da4:	3029883a 	mov	r20,r6
81114da8:	1114bf00 	call	81114bf0 <__locale_charset>
81114dac:	d8800015 	stw	r2,0(sp)
81114db0:	dc800115 	stw	r18,4(sp)
81114db4:	a00f883a 	mov	r7,r20
81114db8:	800d883a 	mov	r6,r16
81114dbc:	980b883a 	mov	r5,r19
81114dc0:	8809883a 	mov	r4,r17
81114dc4:	a83ee83a 	callr	r21
81114dc8:	00ffffc4 	movi	r3,-1
81114dcc:	10c0031e 	bne	r2,r3,81114ddc <mbrtowc+0x80>
81114dd0:	90000015 	stw	zero,0(r18)
81114dd4:	00c02284 	movi	r3,138
81114dd8:	88c00015 	stw	r3,0(r17)
81114ddc:	dfc00817 	ldw	ra,32(sp)
81114de0:	dd400717 	ldw	r21,28(sp)
81114de4:	dd000617 	ldw	r20,24(sp)
81114de8:	dcc00517 	ldw	r19,20(sp)
81114dec:	dc800417 	ldw	r18,16(sp)
81114df0:	dc400317 	ldw	r17,12(sp)
81114df4:	dc000217 	ldw	r16,8(sp)
81114df8:	dec00904 	addi	sp,sp,36
81114dfc:	f800283a 	ret
81114e00:	00a044f4 	movhi	r2,33043
81114e04:	10976904 	addi	r2,r2,23972
81114e08:	14000017 	ldw	r16,0(r2)
81114e0c:	1114bf00 	call	81114bf0 <__locale_charset>
81114e10:	01a044f4 	movhi	r6,33043
81114e14:	318dca04 	addi	r6,r6,14120
81114e18:	dc800115 	stw	r18,4(sp)
81114e1c:	d8800015 	stw	r2,0(sp)
81114e20:	01c00044 	movi	r7,1
81114e24:	000b883a 	mov	r5,zero
81114e28:	8809883a 	mov	r4,r17
81114e2c:	803ee83a 	callr	r16
81114e30:	003fe506 	br	81114dc8 <__reset+0xfb0f4dc8>

81114e34 <__ascii_mbtowc>:
81114e34:	deffff04 	addi	sp,sp,-4
81114e38:	28000826 	beq	r5,zero,81114e5c <__ascii_mbtowc+0x28>
81114e3c:	30000926 	beq	r6,zero,81114e64 <__ascii_mbtowc+0x30>
81114e40:	38000b26 	beq	r7,zero,81114e70 <__ascii_mbtowc+0x3c>
81114e44:	30800003 	ldbu	r2,0(r6)
81114e48:	28800015 	stw	r2,0(r5)
81114e4c:	30800003 	ldbu	r2,0(r6)
81114e50:	1004c03a 	cmpne	r2,r2,zero
81114e54:	dec00104 	addi	sp,sp,4
81114e58:	f800283a 	ret
81114e5c:	d80b883a 	mov	r5,sp
81114e60:	303ff71e 	bne	r6,zero,81114e40 <__reset+0xfb0f4e40>
81114e64:	0005883a 	mov	r2,zero
81114e68:	dec00104 	addi	sp,sp,4
81114e6c:	f800283a 	ret
81114e70:	00bfff84 	movi	r2,-2
81114e74:	003ff706 	br	81114e54 <__reset+0xfb0f4e54>

81114e78 <_mbtowc_r>:
81114e78:	00a044f4 	movhi	r2,33043
81114e7c:	defff804 	addi	sp,sp,-32
81114e80:	10976904 	addi	r2,r2,23972
81114e84:	dfc00715 	stw	ra,28(sp)
81114e88:	dc000615 	stw	r16,24(sp)
81114e8c:	14000017 	ldw	r16,0(r2)
81114e90:	d9000215 	stw	r4,8(sp)
81114e94:	d9400315 	stw	r5,12(sp)
81114e98:	d9800415 	stw	r6,16(sp)
81114e9c:	d9c00515 	stw	r7,20(sp)
81114ea0:	1114bf00 	call	81114bf0 <__locale_charset>
81114ea4:	d8800015 	stw	r2,0(sp)
81114ea8:	d8800817 	ldw	r2,32(sp)
81114eac:	d9c00517 	ldw	r7,20(sp)
81114eb0:	d9800417 	ldw	r6,16(sp)
81114eb4:	d9400317 	ldw	r5,12(sp)
81114eb8:	d9000217 	ldw	r4,8(sp)
81114ebc:	d8800115 	stw	r2,4(sp)
81114ec0:	803ee83a 	callr	r16
81114ec4:	dfc00717 	ldw	ra,28(sp)
81114ec8:	dc000617 	ldw	r16,24(sp)
81114ecc:	dec00804 	addi	sp,sp,32
81114ed0:	f800283a 	ret

81114ed4 <memchr>:
81114ed4:	208000cc 	andi	r2,r4,3
81114ed8:	280f883a 	mov	r7,r5
81114edc:	10003426 	beq	r2,zero,81114fb0 <memchr+0xdc>
81114ee0:	30bfffc4 	addi	r2,r6,-1
81114ee4:	30001a26 	beq	r6,zero,81114f50 <memchr+0x7c>
81114ee8:	20c00003 	ldbu	r3,0(r4)
81114eec:	29803fcc 	andi	r6,r5,255
81114ef0:	30c0051e 	bne	r6,r3,81114f08 <memchr+0x34>
81114ef4:	00001806 	br	81114f58 <memchr+0x84>
81114ef8:	10001526 	beq	r2,zero,81114f50 <memchr+0x7c>
81114efc:	20c00003 	ldbu	r3,0(r4)
81114f00:	10bfffc4 	addi	r2,r2,-1
81114f04:	30c01426 	beq	r6,r3,81114f58 <memchr+0x84>
81114f08:	21000044 	addi	r4,r4,1
81114f0c:	20c000cc 	andi	r3,r4,3
81114f10:	183ff91e 	bne	r3,zero,81114ef8 <__reset+0xfb0f4ef8>
81114f14:	020000c4 	movi	r8,3
81114f18:	40801136 	bltu	r8,r2,81114f60 <memchr+0x8c>
81114f1c:	10000c26 	beq	r2,zero,81114f50 <memchr+0x7c>
81114f20:	20c00003 	ldbu	r3,0(r4)
81114f24:	29403fcc 	andi	r5,r5,255
81114f28:	28c00b26 	beq	r5,r3,81114f58 <memchr+0x84>
81114f2c:	20c00044 	addi	r3,r4,1
81114f30:	39803fcc 	andi	r6,r7,255
81114f34:	2089883a 	add	r4,r4,r2
81114f38:	00000306 	br	81114f48 <memchr+0x74>
81114f3c:	18c00044 	addi	r3,r3,1
81114f40:	197fffc3 	ldbu	r5,-1(r3)
81114f44:	31400526 	beq	r6,r5,81114f5c <memchr+0x88>
81114f48:	1805883a 	mov	r2,r3
81114f4c:	20fffb1e 	bne	r4,r3,81114f3c <__reset+0xfb0f4f3c>
81114f50:	0005883a 	mov	r2,zero
81114f54:	f800283a 	ret
81114f58:	2005883a 	mov	r2,r4
81114f5c:	f800283a 	ret
81114f60:	28c03fcc 	andi	r3,r5,255
81114f64:	1812923a 	slli	r9,r3,8
81114f68:	02ffbff4 	movhi	r11,65279
81114f6c:	02a02074 	movhi	r10,32897
81114f70:	48d2b03a 	or	r9,r9,r3
81114f74:	4806943a 	slli	r3,r9,16
81114f78:	5affbfc4 	addi	r11,r11,-257
81114f7c:	52a02004 	addi	r10,r10,-32640
81114f80:	48d2b03a 	or	r9,r9,r3
81114f84:	20c00017 	ldw	r3,0(r4)
81114f88:	48c6f03a 	xor	r3,r9,r3
81114f8c:	1acd883a 	add	r6,r3,r11
81114f90:	00c6303a 	nor	r3,zero,r3
81114f94:	30c6703a 	and	r3,r6,r3
81114f98:	1a86703a 	and	r3,r3,r10
81114f9c:	183fe01e 	bne	r3,zero,81114f20 <__reset+0xfb0f4f20>
81114fa0:	10bfff04 	addi	r2,r2,-4
81114fa4:	21000104 	addi	r4,r4,4
81114fa8:	40bff636 	bltu	r8,r2,81114f84 <__reset+0xfb0f4f84>
81114fac:	003fdb06 	br	81114f1c <__reset+0xfb0f4f1c>
81114fb0:	3005883a 	mov	r2,r6
81114fb4:	003fd706 	br	81114f14 <__reset+0xfb0f4f14>

81114fb8 <memmove>:
81114fb8:	2005883a 	mov	r2,r4
81114fbc:	29000b2e 	bgeu	r5,r4,81114fec <memmove+0x34>
81114fc0:	298f883a 	add	r7,r5,r6
81114fc4:	21c0092e 	bgeu	r4,r7,81114fec <memmove+0x34>
81114fc8:	2187883a 	add	r3,r4,r6
81114fcc:	198bc83a 	sub	r5,r3,r6
81114fd0:	30004826 	beq	r6,zero,811150f4 <memmove+0x13c>
81114fd4:	39ffffc4 	addi	r7,r7,-1
81114fd8:	39000003 	ldbu	r4,0(r7)
81114fdc:	18ffffc4 	addi	r3,r3,-1
81114fe0:	19000005 	stb	r4,0(r3)
81114fe4:	28fffb1e 	bne	r5,r3,81114fd4 <__reset+0xfb0f4fd4>
81114fe8:	f800283a 	ret
81114fec:	00c003c4 	movi	r3,15
81114ff0:	1980412e 	bgeu	r3,r6,811150f8 <memmove+0x140>
81114ff4:	2886b03a 	or	r3,r5,r2
81114ff8:	18c000cc 	andi	r3,r3,3
81114ffc:	1800401e 	bne	r3,zero,81115100 <memmove+0x148>
81115000:	33fffc04 	addi	r15,r6,-16
81115004:	781ed13a 	srli	r15,r15,4
81115008:	28c00104 	addi	r3,r5,4
8111500c:	13400104 	addi	r13,r2,4
81115010:	781c913a 	slli	r14,r15,4
81115014:	2b000204 	addi	r12,r5,8
81115018:	12c00204 	addi	r11,r2,8
8111501c:	73800504 	addi	r14,r14,20
81115020:	2a800304 	addi	r10,r5,12
81115024:	12400304 	addi	r9,r2,12
81115028:	2b9d883a 	add	r14,r5,r14
8111502c:	2811883a 	mov	r8,r5
81115030:	100f883a 	mov	r7,r2
81115034:	41000017 	ldw	r4,0(r8)
81115038:	39c00404 	addi	r7,r7,16
8111503c:	18c00404 	addi	r3,r3,16
81115040:	393ffc15 	stw	r4,-16(r7)
81115044:	193ffc17 	ldw	r4,-16(r3)
81115048:	6b400404 	addi	r13,r13,16
8111504c:	5ac00404 	addi	r11,r11,16
81115050:	693ffc15 	stw	r4,-16(r13)
81115054:	61000017 	ldw	r4,0(r12)
81115058:	4a400404 	addi	r9,r9,16
8111505c:	42000404 	addi	r8,r8,16
81115060:	593ffc15 	stw	r4,-16(r11)
81115064:	51000017 	ldw	r4,0(r10)
81115068:	63000404 	addi	r12,r12,16
8111506c:	52800404 	addi	r10,r10,16
81115070:	493ffc15 	stw	r4,-16(r9)
81115074:	1bbfef1e 	bne	r3,r14,81115034 <__reset+0xfb0f5034>
81115078:	79000044 	addi	r4,r15,1
8111507c:	2008913a 	slli	r4,r4,4
81115080:	328003cc 	andi	r10,r6,15
81115084:	02c000c4 	movi	r11,3
81115088:	1107883a 	add	r3,r2,r4
8111508c:	290b883a 	add	r5,r5,r4
81115090:	5a801e2e 	bgeu	r11,r10,8111510c <memmove+0x154>
81115094:	1813883a 	mov	r9,r3
81115098:	2811883a 	mov	r8,r5
8111509c:	500f883a 	mov	r7,r10
811150a0:	41000017 	ldw	r4,0(r8)
811150a4:	4a400104 	addi	r9,r9,4
811150a8:	39ffff04 	addi	r7,r7,-4
811150ac:	493fff15 	stw	r4,-4(r9)
811150b0:	42000104 	addi	r8,r8,4
811150b4:	59fffa36 	bltu	r11,r7,811150a0 <__reset+0xfb0f50a0>
811150b8:	513fff04 	addi	r4,r10,-4
811150bc:	2008d0ba 	srli	r4,r4,2
811150c0:	318000cc 	andi	r6,r6,3
811150c4:	21000044 	addi	r4,r4,1
811150c8:	2109883a 	add	r4,r4,r4
811150cc:	2109883a 	add	r4,r4,r4
811150d0:	1907883a 	add	r3,r3,r4
811150d4:	290b883a 	add	r5,r5,r4
811150d8:	30000b26 	beq	r6,zero,81115108 <memmove+0x150>
811150dc:	198d883a 	add	r6,r3,r6
811150e0:	29c00003 	ldbu	r7,0(r5)
811150e4:	18c00044 	addi	r3,r3,1
811150e8:	29400044 	addi	r5,r5,1
811150ec:	19ffffc5 	stb	r7,-1(r3)
811150f0:	19bffb1e 	bne	r3,r6,811150e0 <__reset+0xfb0f50e0>
811150f4:	f800283a 	ret
811150f8:	1007883a 	mov	r3,r2
811150fc:	003ff606 	br	811150d8 <__reset+0xfb0f50d8>
81115100:	1007883a 	mov	r3,r2
81115104:	003ff506 	br	811150dc <__reset+0xfb0f50dc>
81115108:	f800283a 	ret
8111510c:	500d883a 	mov	r6,r10
81115110:	003ff106 	br	811150d8 <__reset+0xfb0f50d8>

81115114 <_Balloc>:
81115114:	20801317 	ldw	r2,76(r4)
81115118:	defffc04 	addi	sp,sp,-16
8111511c:	dc400115 	stw	r17,4(sp)
81115120:	dc000015 	stw	r16,0(sp)
81115124:	dfc00315 	stw	ra,12(sp)
81115128:	dc800215 	stw	r18,8(sp)
8111512c:	2023883a 	mov	r17,r4
81115130:	2821883a 	mov	r16,r5
81115134:	10000f26 	beq	r2,zero,81115174 <_Balloc+0x60>
81115138:	8407883a 	add	r3,r16,r16
8111513c:	18c7883a 	add	r3,r3,r3
81115140:	10c7883a 	add	r3,r2,r3
81115144:	18800017 	ldw	r2,0(r3)
81115148:	10001126 	beq	r2,zero,81115190 <_Balloc+0x7c>
8111514c:	11000017 	ldw	r4,0(r2)
81115150:	19000015 	stw	r4,0(r3)
81115154:	10000415 	stw	zero,16(r2)
81115158:	10000315 	stw	zero,12(r2)
8111515c:	dfc00317 	ldw	ra,12(sp)
81115160:	dc800217 	ldw	r18,8(sp)
81115164:	dc400117 	ldw	r17,4(sp)
81115168:	dc000017 	ldw	r16,0(sp)
8111516c:	dec00404 	addi	sp,sp,16
81115170:	f800283a 	ret
81115174:	01800844 	movi	r6,33
81115178:	01400104 	movi	r5,4
8111517c:	111b7480 	call	8111b748 <_calloc_r>
81115180:	88801315 	stw	r2,76(r17)
81115184:	103fec1e 	bne	r2,zero,81115138 <__reset+0xfb0f5138>
81115188:	0005883a 	mov	r2,zero
8111518c:	003ff306 	br	8111515c <__reset+0xfb0f515c>
81115190:	01400044 	movi	r5,1
81115194:	2c24983a 	sll	r18,r5,r16
81115198:	8809883a 	mov	r4,r17
8111519c:	91800144 	addi	r6,r18,5
811151a0:	318d883a 	add	r6,r6,r6
811151a4:	318d883a 	add	r6,r6,r6
811151a8:	111b7480 	call	8111b748 <_calloc_r>
811151ac:	103ff626 	beq	r2,zero,81115188 <__reset+0xfb0f5188>
811151b0:	14000115 	stw	r16,4(r2)
811151b4:	14800215 	stw	r18,8(r2)
811151b8:	003fe606 	br	81115154 <__reset+0xfb0f5154>

811151bc <_Bfree>:
811151bc:	28000826 	beq	r5,zero,811151e0 <_Bfree+0x24>
811151c0:	28c00117 	ldw	r3,4(r5)
811151c4:	20801317 	ldw	r2,76(r4)
811151c8:	18c7883a 	add	r3,r3,r3
811151cc:	18c7883a 	add	r3,r3,r3
811151d0:	10c5883a 	add	r2,r2,r3
811151d4:	10c00017 	ldw	r3,0(r2)
811151d8:	28c00015 	stw	r3,0(r5)
811151dc:	11400015 	stw	r5,0(r2)
811151e0:	f800283a 	ret

811151e4 <__multadd>:
811151e4:	defffa04 	addi	sp,sp,-24
811151e8:	dc800315 	stw	r18,12(sp)
811151ec:	dc400215 	stw	r17,8(sp)
811151f0:	dc000115 	stw	r16,4(sp)
811151f4:	2823883a 	mov	r17,r5
811151f8:	2c000417 	ldw	r16,16(r5)
811151fc:	dfc00515 	stw	ra,20(sp)
81115200:	dcc00415 	stw	r19,16(sp)
81115204:	2025883a 	mov	r18,r4
81115208:	29400504 	addi	r5,r5,20
8111520c:	0011883a 	mov	r8,zero
81115210:	28c00017 	ldw	r3,0(r5)
81115214:	29400104 	addi	r5,r5,4
81115218:	42000044 	addi	r8,r8,1
8111521c:	18bfffcc 	andi	r2,r3,65535
81115220:	1185383a 	mul	r2,r2,r6
81115224:	1806d43a 	srli	r3,r3,16
81115228:	11cf883a 	add	r7,r2,r7
8111522c:	3808d43a 	srli	r4,r7,16
81115230:	1987383a 	mul	r3,r3,r6
81115234:	38bfffcc 	andi	r2,r7,65535
81115238:	1907883a 	add	r3,r3,r4
8111523c:	1808943a 	slli	r4,r3,16
81115240:	180ed43a 	srli	r7,r3,16
81115244:	2085883a 	add	r2,r4,r2
81115248:	28bfff15 	stw	r2,-4(r5)
8111524c:	443ff016 	blt	r8,r16,81115210 <__reset+0xfb0f5210>
81115250:	38000926 	beq	r7,zero,81115278 <__multadd+0x94>
81115254:	88800217 	ldw	r2,8(r17)
81115258:	80800f0e 	bge	r16,r2,81115298 <__multadd+0xb4>
8111525c:	80800144 	addi	r2,r16,5
81115260:	1085883a 	add	r2,r2,r2
81115264:	1085883a 	add	r2,r2,r2
81115268:	8885883a 	add	r2,r17,r2
8111526c:	11c00015 	stw	r7,0(r2)
81115270:	84000044 	addi	r16,r16,1
81115274:	8c000415 	stw	r16,16(r17)
81115278:	8805883a 	mov	r2,r17
8111527c:	dfc00517 	ldw	ra,20(sp)
81115280:	dcc00417 	ldw	r19,16(sp)
81115284:	dc800317 	ldw	r18,12(sp)
81115288:	dc400217 	ldw	r17,8(sp)
8111528c:	dc000117 	ldw	r16,4(sp)
81115290:	dec00604 	addi	sp,sp,24
81115294:	f800283a 	ret
81115298:	89400117 	ldw	r5,4(r17)
8111529c:	9009883a 	mov	r4,r18
811152a0:	d9c00015 	stw	r7,0(sp)
811152a4:	29400044 	addi	r5,r5,1
811152a8:	11151140 	call	81115114 <_Balloc>
811152ac:	89800417 	ldw	r6,16(r17)
811152b0:	89400304 	addi	r5,r17,12
811152b4:	11000304 	addi	r4,r2,12
811152b8:	31800084 	addi	r6,r6,2
811152bc:	318d883a 	add	r6,r6,r6
811152c0:	318d883a 	add	r6,r6,r6
811152c4:	1027883a 	mov	r19,r2
811152c8:	110b26c0 	call	8110b26c <memcpy>
811152cc:	d9c00017 	ldw	r7,0(sp)
811152d0:	88000a26 	beq	r17,zero,811152fc <__multadd+0x118>
811152d4:	88c00117 	ldw	r3,4(r17)
811152d8:	90801317 	ldw	r2,76(r18)
811152dc:	18c7883a 	add	r3,r3,r3
811152e0:	18c7883a 	add	r3,r3,r3
811152e4:	10c5883a 	add	r2,r2,r3
811152e8:	10c00017 	ldw	r3,0(r2)
811152ec:	88c00015 	stw	r3,0(r17)
811152f0:	14400015 	stw	r17,0(r2)
811152f4:	9823883a 	mov	r17,r19
811152f8:	003fd806 	br	8111525c <__reset+0xfb0f525c>
811152fc:	9823883a 	mov	r17,r19
81115300:	003fd606 	br	8111525c <__reset+0xfb0f525c>

81115304 <__s2b>:
81115304:	defff904 	addi	sp,sp,-28
81115308:	dc400115 	stw	r17,4(sp)
8111530c:	dc000015 	stw	r16,0(sp)
81115310:	2023883a 	mov	r17,r4
81115314:	2821883a 	mov	r16,r5
81115318:	39000204 	addi	r4,r7,8
8111531c:	01400244 	movi	r5,9
81115320:	dcc00315 	stw	r19,12(sp)
81115324:	dc800215 	stw	r18,8(sp)
81115328:	dfc00615 	stw	ra,24(sp)
8111532c:	dd400515 	stw	r21,20(sp)
81115330:	dd000415 	stw	r20,16(sp)
81115334:	3825883a 	mov	r18,r7
81115338:	3027883a 	mov	r19,r6
8111533c:	111d4800 	call	8111d480 <__divsi3>
81115340:	00c00044 	movi	r3,1
81115344:	000b883a 	mov	r5,zero
81115348:	1880030e 	bge	r3,r2,81115358 <__s2b+0x54>
8111534c:	18c7883a 	add	r3,r3,r3
81115350:	29400044 	addi	r5,r5,1
81115354:	18bffd16 	blt	r3,r2,8111534c <__reset+0xfb0f534c>
81115358:	8809883a 	mov	r4,r17
8111535c:	11151140 	call	81115114 <_Balloc>
81115360:	d8c00717 	ldw	r3,28(sp)
81115364:	10c00515 	stw	r3,20(r2)
81115368:	00c00044 	movi	r3,1
8111536c:	10c00415 	stw	r3,16(r2)
81115370:	00c00244 	movi	r3,9
81115374:	1cc0210e 	bge	r3,r19,811153fc <__s2b+0xf8>
81115378:	80eb883a 	add	r21,r16,r3
8111537c:	a829883a 	mov	r20,r21
81115380:	84e1883a 	add	r16,r16,r19
81115384:	a1c00007 	ldb	r7,0(r20)
81115388:	01800284 	movi	r6,10
8111538c:	a5000044 	addi	r20,r20,1
81115390:	100b883a 	mov	r5,r2
81115394:	39fff404 	addi	r7,r7,-48
81115398:	8809883a 	mov	r4,r17
8111539c:	11151e40 	call	811151e4 <__multadd>
811153a0:	a43ff81e 	bne	r20,r16,81115384 <__reset+0xfb0f5384>
811153a4:	ace1883a 	add	r16,r21,r19
811153a8:	843ffe04 	addi	r16,r16,-8
811153ac:	9c800a0e 	bge	r19,r18,811153d8 <__s2b+0xd4>
811153b0:	94e5c83a 	sub	r18,r18,r19
811153b4:	84a5883a 	add	r18,r16,r18
811153b8:	81c00007 	ldb	r7,0(r16)
811153bc:	01800284 	movi	r6,10
811153c0:	84000044 	addi	r16,r16,1
811153c4:	100b883a 	mov	r5,r2
811153c8:	39fff404 	addi	r7,r7,-48
811153cc:	8809883a 	mov	r4,r17
811153d0:	11151e40 	call	811151e4 <__multadd>
811153d4:	84bff81e 	bne	r16,r18,811153b8 <__reset+0xfb0f53b8>
811153d8:	dfc00617 	ldw	ra,24(sp)
811153dc:	dd400517 	ldw	r21,20(sp)
811153e0:	dd000417 	ldw	r20,16(sp)
811153e4:	dcc00317 	ldw	r19,12(sp)
811153e8:	dc800217 	ldw	r18,8(sp)
811153ec:	dc400117 	ldw	r17,4(sp)
811153f0:	dc000017 	ldw	r16,0(sp)
811153f4:	dec00704 	addi	sp,sp,28
811153f8:	f800283a 	ret
811153fc:	84000284 	addi	r16,r16,10
81115400:	1827883a 	mov	r19,r3
81115404:	003fe906 	br	811153ac <__reset+0xfb0f53ac>

81115408 <__hi0bits>:
81115408:	20bfffec 	andhi	r2,r4,65535
8111540c:	1000141e 	bne	r2,zero,81115460 <__hi0bits+0x58>
81115410:	2008943a 	slli	r4,r4,16
81115414:	00800404 	movi	r2,16
81115418:	20ffc02c 	andhi	r3,r4,65280
8111541c:	1800021e 	bne	r3,zero,81115428 <__hi0bits+0x20>
81115420:	2008923a 	slli	r4,r4,8
81115424:	10800204 	addi	r2,r2,8
81115428:	20fc002c 	andhi	r3,r4,61440
8111542c:	1800021e 	bne	r3,zero,81115438 <__hi0bits+0x30>
81115430:	2008913a 	slli	r4,r4,4
81115434:	10800104 	addi	r2,r2,4
81115438:	20f0002c 	andhi	r3,r4,49152
8111543c:	1800031e 	bne	r3,zero,8111544c <__hi0bits+0x44>
81115440:	2109883a 	add	r4,r4,r4
81115444:	10800084 	addi	r2,r2,2
81115448:	2109883a 	add	r4,r4,r4
8111544c:	20000316 	blt	r4,zero,8111545c <__hi0bits+0x54>
81115450:	2110002c 	andhi	r4,r4,16384
81115454:	2000041e 	bne	r4,zero,81115468 <__hi0bits+0x60>
81115458:	00800804 	movi	r2,32
8111545c:	f800283a 	ret
81115460:	0005883a 	mov	r2,zero
81115464:	003fec06 	br	81115418 <__reset+0xfb0f5418>
81115468:	10800044 	addi	r2,r2,1
8111546c:	f800283a 	ret

81115470 <__lo0bits>:
81115470:	20c00017 	ldw	r3,0(r4)
81115474:	188001cc 	andi	r2,r3,7
81115478:	10000826 	beq	r2,zero,8111549c <__lo0bits+0x2c>
8111547c:	1880004c 	andi	r2,r3,1
81115480:	1000211e 	bne	r2,zero,81115508 <__lo0bits+0x98>
81115484:	1880008c 	andi	r2,r3,2
81115488:	1000211e 	bne	r2,zero,81115510 <__lo0bits+0xa0>
8111548c:	1806d0ba 	srli	r3,r3,2
81115490:	00800084 	movi	r2,2
81115494:	20c00015 	stw	r3,0(r4)
81115498:	f800283a 	ret
8111549c:	18bfffcc 	andi	r2,r3,65535
811154a0:	10001326 	beq	r2,zero,811154f0 <__lo0bits+0x80>
811154a4:	0005883a 	mov	r2,zero
811154a8:	19403fcc 	andi	r5,r3,255
811154ac:	2800021e 	bne	r5,zero,811154b8 <__lo0bits+0x48>
811154b0:	1806d23a 	srli	r3,r3,8
811154b4:	10800204 	addi	r2,r2,8
811154b8:	194003cc 	andi	r5,r3,15
811154bc:	2800021e 	bne	r5,zero,811154c8 <__lo0bits+0x58>
811154c0:	1806d13a 	srli	r3,r3,4
811154c4:	10800104 	addi	r2,r2,4
811154c8:	194000cc 	andi	r5,r3,3
811154cc:	2800021e 	bne	r5,zero,811154d8 <__lo0bits+0x68>
811154d0:	1806d0ba 	srli	r3,r3,2
811154d4:	10800084 	addi	r2,r2,2
811154d8:	1940004c 	andi	r5,r3,1
811154dc:	2800081e 	bne	r5,zero,81115500 <__lo0bits+0x90>
811154e0:	1806d07a 	srli	r3,r3,1
811154e4:	1800051e 	bne	r3,zero,811154fc <__lo0bits+0x8c>
811154e8:	00800804 	movi	r2,32
811154ec:	f800283a 	ret
811154f0:	1806d43a 	srli	r3,r3,16
811154f4:	00800404 	movi	r2,16
811154f8:	003feb06 	br	811154a8 <__reset+0xfb0f54a8>
811154fc:	10800044 	addi	r2,r2,1
81115500:	20c00015 	stw	r3,0(r4)
81115504:	f800283a 	ret
81115508:	0005883a 	mov	r2,zero
8111550c:	f800283a 	ret
81115510:	1806d07a 	srli	r3,r3,1
81115514:	00800044 	movi	r2,1
81115518:	20c00015 	stw	r3,0(r4)
8111551c:	f800283a 	ret

81115520 <__i2b>:
81115520:	defffd04 	addi	sp,sp,-12
81115524:	dc000015 	stw	r16,0(sp)
81115528:	04000044 	movi	r16,1
8111552c:	dc400115 	stw	r17,4(sp)
81115530:	2823883a 	mov	r17,r5
81115534:	800b883a 	mov	r5,r16
81115538:	dfc00215 	stw	ra,8(sp)
8111553c:	11151140 	call	81115114 <_Balloc>
81115540:	14400515 	stw	r17,20(r2)
81115544:	14000415 	stw	r16,16(r2)
81115548:	dfc00217 	ldw	ra,8(sp)
8111554c:	dc400117 	ldw	r17,4(sp)
81115550:	dc000017 	ldw	r16,0(sp)
81115554:	dec00304 	addi	sp,sp,12
81115558:	f800283a 	ret

8111555c <__multiply>:
8111555c:	defffa04 	addi	sp,sp,-24
81115560:	dcc00315 	stw	r19,12(sp)
81115564:	dc800215 	stw	r18,8(sp)
81115568:	34c00417 	ldw	r19,16(r6)
8111556c:	2c800417 	ldw	r18,16(r5)
81115570:	dd000415 	stw	r20,16(sp)
81115574:	dc400115 	stw	r17,4(sp)
81115578:	dfc00515 	stw	ra,20(sp)
8111557c:	dc000015 	stw	r16,0(sp)
81115580:	2829883a 	mov	r20,r5
81115584:	3023883a 	mov	r17,r6
81115588:	94c0050e 	bge	r18,r19,811155a0 <__multiply+0x44>
8111558c:	9007883a 	mov	r3,r18
81115590:	3029883a 	mov	r20,r6
81115594:	9825883a 	mov	r18,r19
81115598:	2823883a 	mov	r17,r5
8111559c:	1827883a 	mov	r19,r3
811155a0:	a0800217 	ldw	r2,8(r20)
811155a4:	94e1883a 	add	r16,r18,r19
811155a8:	a1400117 	ldw	r5,4(r20)
811155ac:	1400010e 	bge	r2,r16,811155b4 <__multiply+0x58>
811155b0:	29400044 	addi	r5,r5,1
811155b4:	11151140 	call	81115114 <_Balloc>
811155b8:	8415883a 	add	r10,r16,r16
811155bc:	12c00504 	addi	r11,r2,20
811155c0:	5295883a 	add	r10,r10,r10
811155c4:	5a95883a 	add	r10,r11,r10
811155c8:	5807883a 	mov	r3,r11
811155cc:	5a80032e 	bgeu	r11,r10,811155dc <__multiply+0x80>
811155d0:	18000015 	stw	zero,0(r3)
811155d4:	18c00104 	addi	r3,r3,4
811155d8:	1abffd36 	bltu	r3,r10,811155d0 <__reset+0xfb0f55d0>
811155dc:	9ce7883a 	add	r19,r19,r19
811155e0:	94a5883a 	add	r18,r18,r18
811155e4:	89800504 	addi	r6,r17,20
811155e8:	9ce7883a 	add	r19,r19,r19
811155ec:	a3400504 	addi	r13,r20,20
811155f0:	94a5883a 	add	r18,r18,r18
811155f4:	34d9883a 	add	r12,r6,r19
811155f8:	6c93883a 	add	r9,r13,r18
811155fc:	3300422e 	bgeu	r6,r12,81115708 <__multiply+0x1ac>
81115600:	37c00017 	ldw	ra,0(r6)
81115604:	fbffffcc 	andi	r15,ra,65535
81115608:	78001b26 	beq	r15,zero,81115678 <__multiply+0x11c>
8111560c:	5811883a 	mov	r8,r11
81115610:	681d883a 	mov	r14,r13
81115614:	000f883a 	mov	r7,zero
81115618:	71000017 	ldw	r4,0(r14)
8111561c:	40c00017 	ldw	r3,0(r8)
81115620:	73800104 	addi	r14,r14,4
81115624:	217fffcc 	andi	r5,r4,65535
81115628:	2bcb383a 	mul	r5,r5,r15
8111562c:	2008d43a 	srli	r4,r4,16
81115630:	1c7fffcc 	andi	r17,r3,65535
81115634:	2c4b883a 	add	r5,r5,r17
81115638:	29cb883a 	add	r5,r5,r7
8111563c:	23c9383a 	mul	r4,r4,r15
81115640:	1806d43a 	srli	r3,r3,16
81115644:	280ed43a 	srli	r7,r5,16
81115648:	297fffcc 	andi	r5,r5,65535
8111564c:	20c7883a 	add	r3,r4,r3
81115650:	19c7883a 	add	r3,r3,r7
81115654:	1808943a 	slli	r4,r3,16
81115658:	4023883a 	mov	r17,r8
8111565c:	180ed43a 	srli	r7,r3,16
81115660:	214ab03a 	or	r5,r4,r5
81115664:	41400015 	stw	r5,0(r8)
81115668:	42000104 	addi	r8,r8,4
8111566c:	727fea36 	bltu	r14,r9,81115618 <__reset+0xfb0f5618>
81115670:	89c00115 	stw	r7,4(r17)
81115674:	37c00017 	ldw	ra,0(r6)
81115678:	f83ed43a 	srli	ra,ra,16
8111567c:	f8001f26 	beq	ra,zero,811156fc <__multiply+0x1a0>
81115680:	58c00017 	ldw	r3,0(r11)
81115684:	681d883a 	mov	r14,r13
81115688:	581f883a 	mov	r15,r11
8111568c:	1811883a 	mov	r8,r3
81115690:	5825883a 	mov	r18,r11
81115694:	000f883a 	mov	r7,zero
81115698:	00000106 	br	811156a0 <__multiply+0x144>
8111569c:	8825883a 	mov	r18,r17
811156a0:	7140000b 	ldhu	r5,0(r14)
811156a4:	4010d43a 	srli	r8,r8,16
811156a8:	193fffcc 	andi	r4,r3,65535
811156ac:	2fcb383a 	mul	r5,r5,ra
811156b0:	7bc00104 	addi	r15,r15,4
811156b4:	73800104 	addi	r14,r14,4
811156b8:	2a0b883a 	add	r5,r5,r8
811156bc:	29cb883a 	add	r5,r5,r7
811156c0:	2806943a 	slli	r3,r5,16
811156c4:	94400104 	addi	r17,r18,4
811156c8:	280ad43a 	srli	r5,r5,16
811156cc:	1908b03a 	or	r4,r3,r4
811156d0:	793fff15 	stw	r4,-4(r15)
811156d4:	70ffff17 	ldw	r3,-4(r14)
811156d8:	8a000017 	ldw	r8,0(r17)
811156dc:	1806d43a 	srli	r3,r3,16
811156e0:	413fffcc 	andi	r4,r8,65535
811156e4:	1fc7383a 	mul	r3,r3,ra
811156e8:	1907883a 	add	r3,r3,r4
811156ec:	1947883a 	add	r3,r3,r5
811156f0:	180ed43a 	srli	r7,r3,16
811156f4:	727fe936 	bltu	r14,r9,8111569c <__reset+0xfb0f569c>
811156f8:	90c00115 	stw	r3,4(r18)
811156fc:	31800104 	addi	r6,r6,4
81115700:	5ac00104 	addi	r11,r11,4
81115704:	333fbe36 	bltu	r6,r12,81115600 <__reset+0xfb0f5600>
81115708:	0400090e 	bge	zero,r16,81115730 <__multiply+0x1d4>
8111570c:	50ffff17 	ldw	r3,-4(r10)
81115710:	52bfff04 	addi	r10,r10,-4
81115714:	18000326 	beq	r3,zero,81115724 <__multiply+0x1c8>
81115718:	00000506 	br	81115730 <__multiply+0x1d4>
8111571c:	50c00017 	ldw	r3,0(r10)
81115720:	1800031e 	bne	r3,zero,81115730 <__multiply+0x1d4>
81115724:	843fffc4 	addi	r16,r16,-1
81115728:	52bfff04 	addi	r10,r10,-4
8111572c:	803ffb1e 	bne	r16,zero,8111571c <__reset+0xfb0f571c>
81115730:	14000415 	stw	r16,16(r2)
81115734:	dfc00517 	ldw	ra,20(sp)
81115738:	dd000417 	ldw	r20,16(sp)
8111573c:	dcc00317 	ldw	r19,12(sp)
81115740:	dc800217 	ldw	r18,8(sp)
81115744:	dc400117 	ldw	r17,4(sp)
81115748:	dc000017 	ldw	r16,0(sp)
8111574c:	dec00604 	addi	sp,sp,24
81115750:	f800283a 	ret

81115754 <__pow5mult>:
81115754:	defffa04 	addi	sp,sp,-24
81115758:	dcc00315 	stw	r19,12(sp)
8111575c:	dc000015 	stw	r16,0(sp)
81115760:	dfc00515 	stw	ra,20(sp)
81115764:	dd000415 	stw	r20,16(sp)
81115768:	dc800215 	stw	r18,8(sp)
8111576c:	dc400115 	stw	r17,4(sp)
81115770:	308000cc 	andi	r2,r6,3
81115774:	3021883a 	mov	r16,r6
81115778:	2027883a 	mov	r19,r4
8111577c:	10002f1e 	bne	r2,zero,8111583c <__pow5mult+0xe8>
81115780:	2825883a 	mov	r18,r5
81115784:	8021d0ba 	srai	r16,r16,2
81115788:	80001a26 	beq	r16,zero,811157f4 <__pow5mult+0xa0>
8111578c:	9c401217 	ldw	r17,72(r19)
81115790:	8800061e 	bne	r17,zero,811157ac <__pow5mult+0x58>
81115794:	00003406 	br	81115868 <__pow5mult+0x114>
81115798:	8021d07a 	srai	r16,r16,1
8111579c:	80001526 	beq	r16,zero,811157f4 <__pow5mult+0xa0>
811157a0:	88800017 	ldw	r2,0(r17)
811157a4:	10001c26 	beq	r2,zero,81115818 <__pow5mult+0xc4>
811157a8:	1023883a 	mov	r17,r2
811157ac:	8080004c 	andi	r2,r16,1
811157b0:	103ff926 	beq	r2,zero,81115798 <__reset+0xfb0f5798>
811157b4:	880d883a 	mov	r6,r17
811157b8:	900b883a 	mov	r5,r18
811157bc:	9809883a 	mov	r4,r19
811157c0:	111555c0 	call	8111555c <__multiply>
811157c4:	90001b26 	beq	r18,zero,81115834 <__pow5mult+0xe0>
811157c8:	91000117 	ldw	r4,4(r18)
811157cc:	98c01317 	ldw	r3,76(r19)
811157d0:	8021d07a 	srai	r16,r16,1
811157d4:	2109883a 	add	r4,r4,r4
811157d8:	2109883a 	add	r4,r4,r4
811157dc:	1907883a 	add	r3,r3,r4
811157e0:	19000017 	ldw	r4,0(r3)
811157e4:	91000015 	stw	r4,0(r18)
811157e8:	1c800015 	stw	r18,0(r3)
811157ec:	1025883a 	mov	r18,r2
811157f0:	803feb1e 	bne	r16,zero,811157a0 <__reset+0xfb0f57a0>
811157f4:	9005883a 	mov	r2,r18
811157f8:	dfc00517 	ldw	ra,20(sp)
811157fc:	dd000417 	ldw	r20,16(sp)
81115800:	dcc00317 	ldw	r19,12(sp)
81115804:	dc800217 	ldw	r18,8(sp)
81115808:	dc400117 	ldw	r17,4(sp)
8111580c:	dc000017 	ldw	r16,0(sp)
81115810:	dec00604 	addi	sp,sp,24
81115814:	f800283a 	ret
81115818:	880d883a 	mov	r6,r17
8111581c:	880b883a 	mov	r5,r17
81115820:	9809883a 	mov	r4,r19
81115824:	111555c0 	call	8111555c <__multiply>
81115828:	88800015 	stw	r2,0(r17)
8111582c:	10000015 	stw	zero,0(r2)
81115830:	003fdd06 	br	811157a8 <__reset+0xfb0f57a8>
81115834:	1025883a 	mov	r18,r2
81115838:	003fd706 	br	81115798 <__reset+0xfb0f5798>
8111583c:	10bfffc4 	addi	r2,r2,-1
81115840:	1085883a 	add	r2,r2,r2
81115844:	00e044f4 	movhi	r3,33043
81115848:	18ce9504 	addi	r3,r3,14932
8111584c:	1085883a 	add	r2,r2,r2
81115850:	1885883a 	add	r2,r3,r2
81115854:	11800017 	ldw	r6,0(r2)
81115858:	000f883a 	mov	r7,zero
8111585c:	11151e40 	call	811151e4 <__multadd>
81115860:	1025883a 	mov	r18,r2
81115864:	003fc706 	br	81115784 <__reset+0xfb0f5784>
81115868:	05000044 	movi	r20,1
8111586c:	a00b883a 	mov	r5,r20
81115870:	9809883a 	mov	r4,r19
81115874:	11151140 	call	81115114 <_Balloc>
81115878:	1023883a 	mov	r17,r2
8111587c:	00809c44 	movi	r2,625
81115880:	88800515 	stw	r2,20(r17)
81115884:	8d000415 	stw	r20,16(r17)
81115888:	9c401215 	stw	r17,72(r19)
8111588c:	88000015 	stw	zero,0(r17)
81115890:	003fc606 	br	811157ac <__reset+0xfb0f57ac>

81115894 <__lshift>:
81115894:	defff904 	addi	sp,sp,-28
81115898:	dd400515 	stw	r21,20(sp)
8111589c:	dcc00315 	stw	r19,12(sp)
811158a0:	302bd17a 	srai	r21,r6,5
811158a4:	2cc00417 	ldw	r19,16(r5)
811158a8:	28800217 	ldw	r2,8(r5)
811158ac:	dd000415 	stw	r20,16(sp)
811158b0:	ace7883a 	add	r19,r21,r19
811158b4:	dc800215 	stw	r18,8(sp)
811158b8:	dc400115 	stw	r17,4(sp)
811158bc:	dc000015 	stw	r16,0(sp)
811158c0:	dfc00615 	stw	ra,24(sp)
811158c4:	9c000044 	addi	r16,r19,1
811158c8:	2823883a 	mov	r17,r5
811158cc:	3029883a 	mov	r20,r6
811158d0:	2025883a 	mov	r18,r4
811158d4:	29400117 	ldw	r5,4(r5)
811158d8:	1400030e 	bge	r2,r16,811158e8 <__lshift+0x54>
811158dc:	1085883a 	add	r2,r2,r2
811158e0:	29400044 	addi	r5,r5,1
811158e4:	143ffd16 	blt	r2,r16,811158dc <__reset+0xfb0f58dc>
811158e8:	9009883a 	mov	r4,r18
811158ec:	11151140 	call	81115114 <_Balloc>
811158f0:	10c00504 	addi	r3,r2,20
811158f4:	0540070e 	bge	zero,r21,81115914 <__lshift+0x80>
811158f8:	ad6b883a 	add	r21,r21,r21
811158fc:	ad6b883a 	add	r21,r21,r21
81115900:	1809883a 	mov	r4,r3
81115904:	1d47883a 	add	r3,r3,r21
81115908:	20000015 	stw	zero,0(r4)
8111590c:	21000104 	addi	r4,r4,4
81115910:	193ffd1e 	bne	r3,r4,81115908 <__reset+0xfb0f5908>
81115914:	8a000417 	ldw	r8,16(r17)
81115918:	89000504 	addi	r4,r17,20
8111591c:	a18007cc 	andi	r6,r20,31
81115920:	4211883a 	add	r8,r8,r8
81115924:	4211883a 	add	r8,r8,r8
81115928:	2211883a 	add	r8,r4,r8
8111592c:	30002326 	beq	r6,zero,811159bc <__lshift+0x128>
81115930:	02400804 	movi	r9,32
81115934:	4993c83a 	sub	r9,r9,r6
81115938:	000b883a 	mov	r5,zero
8111593c:	21c00017 	ldw	r7,0(r4)
81115940:	1815883a 	mov	r10,r3
81115944:	18c00104 	addi	r3,r3,4
81115948:	398e983a 	sll	r7,r7,r6
8111594c:	21000104 	addi	r4,r4,4
81115950:	394ab03a 	or	r5,r7,r5
81115954:	197fff15 	stw	r5,-4(r3)
81115958:	217fff17 	ldw	r5,-4(r4)
8111595c:	2a4ad83a 	srl	r5,r5,r9
81115960:	223ff636 	bltu	r4,r8,8111593c <__reset+0xfb0f593c>
81115964:	51400115 	stw	r5,4(r10)
81115968:	28001a1e 	bne	r5,zero,811159d4 <__lshift+0x140>
8111596c:	843fffc4 	addi	r16,r16,-1
81115970:	14000415 	stw	r16,16(r2)
81115974:	88000826 	beq	r17,zero,81115998 <__lshift+0x104>
81115978:	89000117 	ldw	r4,4(r17)
8111597c:	90c01317 	ldw	r3,76(r18)
81115980:	2109883a 	add	r4,r4,r4
81115984:	2109883a 	add	r4,r4,r4
81115988:	1907883a 	add	r3,r3,r4
8111598c:	19000017 	ldw	r4,0(r3)
81115990:	89000015 	stw	r4,0(r17)
81115994:	1c400015 	stw	r17,0(r3)
81115998:	dfc00617 	ldw	ra,24(sp)
8111599c:	dd400517 	ldw	r21,20(sp)
811159a0:	dd000417 	ldw	r20,16(sp)
811159a4:	dcc00317 	ldw	r19,12(sp)
811159a8:	dc800217 	ldw	r18,8(sp)
811159ac:	dc400117 	ldw	r17,4(sp)
811159b0:	dc000017 	ldw	r16,0(sp)
811159b4:	dec00704 	addi	sp,sp,28
811159b8:	f800283a 	ret
811159bc:	21400017 	ldw	r5,0(r4)
811159c0:	18c00104 	addi	r3,r3,4
811159c4:	21000104 	addi	r4,r4,4
811159c8:	197fff15 	stw	r5,-4(r3)
811159cc:	223ffb36 	bltu	r4,r8,811159bc <__reset+0xfb0f59bc>
811159d0:	003fe606 	br	8111596c <__reset+0xfb0f596c>
811159d4:	9c000084 	addi	r16,r19,2
811159d8:	003fe406 	br	8111596c <__reset+0xfb0f596c>

811159dc <__mcmp>:
811159dc:	20800417 	ldw	r2,16(r4)
811159e0:	28c00417 	ldw	r3,16(r5)
811159e4:	10c5c83a 	sub	r2,r2,r3
811159e8:	1000111e 	bne	r2,zero,81115a30 <__mcmp+0x54>
811159ec:	18c7883a 	add	r3,r3,r3
811159f0:	18c7883a 	add	r3,r3,r3
811159f4:	21000504 	addi	r4,r4,20
811159f8:	29400504 	addi	r5,r5,20
811159fc:	20c5883a 	add	r2,r4,r3
81115a00:	28cb883a 	add	r5,r5,r3
81115a04:	00000106 	br	81115a0c <__mcmp+0x30>
81115a08:	20800a2e 	bgeu	r4,r2,81115a34 <__mcmp+0x58>
81115a0c:	10bfff04 	addi	r2,r2,-4
81115a10:	297fff04 	addi	r5,r5,-4
81115a14:	11800017 	ldw	r6,0(r2)
81115a18:	28c00017 	ldw	r3,0(r5)
81115a1c:	30fffa26 	beq	r6,r3,81115a08 <__reset+0xfb0f5a08>
81115a20:	30c00236 	bltu	r6,r3,81115a2c <__mcmp+0x50>
81115a24:	00800044 	movi	r2,1
81115a28:	f800283a 	ret
81115a2c:	00bfffc4 	movi	r2,-1
81115a30:	f800283a 	ret
81115a34:	0005883a 	mov	r2,zero
81115a38:	f800283a 	ret

81115a3c <__mdiff>:
81115a3c:	28c00417 	ldw	r3,16(r5)
81115a40:	30800417 	ldw	r2,16(r6)
81115a44:	defffa04 	addi	sp,sp,-24
81115a48:	dcc00315 	stw	r19,12(sp)
81115a4c:	dc800215 	stw	r18,8(sp)
81115a50:	dfc00515 	stw	ra,20(sp)
81115a54:	dd000415 	stw	r20,16(sp)
81115a58:	dc400115 	stw	r17,4(sp)
81115a5c:	dc000015 	stw	r16,0(sp)
81115a60:	1887c83a 	sub	r3,r3,r2
81115a64:	2825883a 	mov	r18,r5
81115a68:	3027883a 	mov	r19,r6
81115a6c:	1800141e 	bne	r3,zero,81115ac0 <__mdiff+0x84>
81115a70:	1085883a 	add	r2,r2,r2
81115a74:	1085883a 	add	r2,r2,r2
81115a78:	2a000504 	addi	r8,r5,20
81115a7c:	34000504 	addi	r16,r6,20
81115a80:	4087883a 	add	r3,r8,r2
81115a84:	8085883a 	add	r2,r16,r2
81115a88:	00000106 	br	81115a90 <__mdiff+0x54>
81115a8c:	40c0592e 	bgeu	r8,r3,81115bf4 <__mdiff+0x1b8>
81115a90:	18ffff04 	addi	r3,r3,-4
81115a94:	10bfff04 	addi	r2,r2,-4
81115a98:	19c00017 	ldw	r7,0(r3)
81115a9c:	11400017 	ldw	r5,0(r2)
81115aa0:	397ffa26 	beq	r7,r5,81115a8c <__reset+0xfb0f5a8c>
81115aa4:	3940592e 	bgeu	r7,r5,81115c0c <__mdiff+0x1d0>
81115aa8:	9005883a 	mov	r2,r18
81115aac:	4023883a 	mov	r17,r8
81115ab0:	9825883a 	mov	r18,r19
81115ab4:	05000044 	movi	r20,1
81115ab8:	1027883a 	mov	r19,r2
81115abc:	00000406 	br	81115ad0 <__mdiff+0x94>
81115ac0:	18005616 	blt	r3,zero,81115c1c <__mdiff+0x1e0>
81115ac4:	34400504 	addi	r17,r6,20
81115ac8:	2c000504 	addi	r16,r5,20
81115acc:	0029883a 	mov	r20,zero
81115ad0:	91400117 	ldw	r5,4(r18)
81115ad4:	11151140 	call	81115114 <_Balloc>
81115ad8:	92400417 	ldw	r9,16(r18)
81115adc:	9b000417 	ldw	r12,16(r19)
81115ae0:	12c00504 	addi	r11,r2,20
81115ae4:	4a51883a 	add	r8,r9,r9
81115ae8:	6319883a 	add	r12,r12,r12
81115aec:	4211883a 	add	r8,r8,r8
81115af0:	6319883a 	add	r12,r12,r12
81115af4:	15000315 	stw	r20,12(r2)
81115af8:	8211883a 	add	r8,r16,r8
81115afc:	8b19883a 	add	r12,r17,r12
81115b00:	0007883a 	mov	r3,zero
81115b04:	81400017 	ldw	r5,0(r16)
81115b08:	89c00017 	ldw	r7,0(r17)
81115b0c:	59800104 	addi	r6,r11,4
81115b10:	293fffcc 	andi	r4,r5,65535
81115b14:	20c7883a 	add	r3,r4,r3
81115b18:	393fffcc 	andi	r4,r7,65535
81115b1c:	1909c83a 	sub	r4,r3,r4
81115b20:	280ad43a 	srli	r5,r5,16
81115b24:	380ed43a 	srli	r7,r7,16
81115b28:	2007d43a 	srai	r3,r4,16
81115b2c:	213fffcc 	andi	r4,r4,65535
81115b30:	29cbc83a 	sub	r5,r5,r7
81115b34:	28c7883a 	add	r3,r5,r3
81115b38:	180a943a 	slli	r5,r3,16
81115b3c:	8c400104 	addi	r17,r17,4
81115b40:	84000104 	addi	r16,r16,4
81115b44:	2908b03a 	or	r4,r5,r4
81115b48:	59000015 	stw	r4,0(r11)
81115b4c:	1807d43a 	srai	r3,r3,16
81115b50:	3015883a 	mov	r10,r6
81115b54:	3017883a 	mov	r11,r6
81115b58:	8b3fea36 	bltu	r17,r12,81115b04 <__reset+0xfb0f5b04>
81115b5c:	8200162e 	bgeu	r16,r8,81115bb8 <__mdiff+0x17c>
81115b60:	8017883a 	mov	r11,r16
81115b64:	59400017 	ldw	r5,0(r11)
81115b68:	31800104 	addi	r6,r6,4
81115b6c:	5ac00104 	addi	r11,r11,4
81115b70:	293fffcc 	andi	r4,r5,65535
81115b74:	20c7883a 	add	r3,r4,r3
81115b78:	280ed43a 	srli	r7,r5,16
81115b7c:	180bd43a 	srai	r5,r3,16
81115b80:	193fffcc 	andi	r4,r3,65535
81115b84:	3947883a 	add	r3,r7,r5
81115b88:	180a943a 	slli	r5,r3,16
81115b8c:	1807d43a 	srai	r3,r3,16
81115b90:	2908b03a 	or	r4,r5,r4
81115b94:	313fff15 	stw	r4,-4(r6)
81115b98:	5a3ff236 	bltu	r11,r8,81115b64 <__reset+0xfb0f5b64>
81115b9c:	0406303a 	nor	r3,zero,r16
81115ba0:	1a07883a 	add	r3,r3,r8
81115ba4:	1806d0ba 	srli	r3,r3,2
81115ba8:	18c00044 	addi	r3,r3,1
81115bac:	18c7883a 	add	r3,r3,r3
81115bb0:	18c7883a 	add	r3,r3,r3
81115bb4:	50d5883a 	add	r10,r10,r3
81115bb8:	50ffff04 	addi	r3,r10,-4
81115bbc:	2000041e 	bne	r4,zero,81115bd0 <__mdiff+0x194>
81115bc0:	18ffff04 	addi	r3,r3,-4
81115bc4:	19000017 	ldw	r4,0(r3)
81115bc8:	4a7fffc4 	addi	r9,r9,-1
81115bcc:	203ffc26 	beq	r4,zero,81115bc0 <__reset+0xfb0f5bc0>
81115bd0:	12400415 	stw	r9,16(r2)
81115bd4:	dfc00517 	ldw	ra,20(sp)
81115bd8:	dd000417 	ldw	r20,16(sp)
81115bdc:	dcc00317 	ldw	r19,12(sp)
81115be0:	dc800217 	ldw	r18,8(sp)
81115be4:	dc400117 	ldw	r17,4(sp)
81115be8:	dc000017 	ldw	r16,0(sp)
81115bec:	dec00604 	addi	sp,sp,24
81115bf0:	f800283a 	ret
81115bf4:	000b883a 	mov	r5,zero
81115bf8:	11151140 	call	81115114 <_Balloc>
81115bfc:	00c00044 	movi	r3,1
81115c00:	10c00415 	stw	r3,16(r2)
81115c04:	10000515 	stw	zero,20(r2)
81115c08:	003ff206 	br	81115bd4 <__reset+0xfb0f5bd4>
81115c0c:	8023883a 	mov	r17,r16
81115c10:	0029883a 	mov	r20,zero
81115c14:	4021883a 	mov	r16,r8
81115c18:	003fad06 	br	81115ad0 <__reset+0xfb0f5ad0>
81115c1c:	9005883a 	mov	r2,r18
81115c20:	94400504 	addi	r17,r18,20
81115c24:	9c000504 	addi	r16,r19,20
81115c28:	9825883a 	mov	r18,r19
81115c2c:	05000044 	movi	r20,1
81115c30:	1027883a 	mov	r19,r2
81115c34:	003fa606 	br	81115ad0 <__reset+0xfb0f5ad0>

81115c38 <__ulp>:
81115c38:	295ffc2c 	andhi	r5,r5,32752
81115c3c:	00bf3034 	movhi	r2,64704
81115c40:	2887883a 	add	r3,r5,r2
81115c44:	00c0020e 	bge	zero,r3,81115c50 <__ulp+0x18>
81115c48:	0005883a 	mov	r2,zero
81115c4c:	f800283a 	ret
81115c50:	00c7c83a 	sub	r3,zero,r3
81115c54:	1807d53a 	srai	r3,r3,20
81115c58:	008004c4 	movi	r2,19
81115c5c:	10c00b0e 	bge	r2,r3,81115c8c <__ulp+0x54>
81115c60:	18bffb04 	addi	r2,r3,-20
81115c64:	01000784 	movi	r4,30
81115c68:	0007883a 	mov	r3,zero
81115c6c:	20800516 	blt	r4,r2,81115c84 <__ulp+0x4c>
81115c70:	010007c4 	movi	r4,31
81115c74:	2089c83a 	sub	r4,r4,r2
81115c78:	00800044 	movi	r2,1
81115c7c:	1104983a 	sll	r2,r2,r4
81115c80:	f800283a 	ret
81115c84:	00800044 	movi	r2,1
81115c88:	f800283a 	ret
81115c8c:	01400234 	movhi	r5,8
81115c90:	28c7d83a 	sra	r3,r5,r3
81115c94:	0005883a 	mov	r2,zero
81115c98:	f800283a 	ret

81115c9c <__b2d>:
81115c9c:	defffa04 	addi	sp,sp,-24
81115ca0:	dc000015 	stw	r16,0(sp)
81115ca4:	24000417 	ldw	r16,16(r4)
81115ca8:	dc400115 	stw	r17,4(sp)
81115cac:	24400504 	addi	r17,r4,20
81115cb0:	8421883a 	add	r16,r16,r16
81115cb4:	8421883a 	add	r16,r16,r16
81115cb8:	8c21883a 	add	r16,r17,r16
81115cbc:	dc800215 	stw	r18,8(sp)
81115cc0:	84bfff17 	ldw	r18,-4(r16)
81115cc4:	dd000415 	stw	r20,16(sp)
81115cc8:	dcc00315 	stw	r19,12(sp)
81115ccc:	9009883a 	mov	r4,r18
81115cd0:	2829883a 	mov	r20,r5
81115cd4:	dfc00515 	stw	ra,20(sp)
81115cd8:	11154080 	call	81115408 <__hi0bits>
81115cdc:	00c00804 	movi	r3,32
81115ce0:	1889c83a 	sub	r4,r3,r2
81115ce4:	a1000015 	stw	r4,0(r20)
81115ce8:	01000284 	movi	r4,10
81115cec:	84ffff04 	addi	r19,r16,-4
81115cf0:	20801216 	blt	r4,r2,81115d3c <__b2d+0xa0>
81115cf4:	018002c4 	movi	r6,11
81115cf8:	308dc83a 	sub	r6,r6,r2
81115cfc:	9186d83a 	srl	r3,r18,r6
81115d00:	18cffc34 	orhi	r3,r3,16368
81115d04:	8cc0212e 	bgeu	r17,r19,81115d8c <__b2d+0xf0>
81115d08:	813ffe17 	ldw	r4,-8(r16)
81115d0c:	218cd83a 	srl	r6,r4,r6
81115d10:	10800544 	addi	r2,r2,21
81115d14:	9084983a 	sll	r2,r18,r2
81115d18:	1184b03a 	or	r2,r2,r6
81115d1c:	dfc00517 	ldw	ra,20(sp)
81115d20:	dd000417 	ldw	r20,16(sp)
81115d24:	dcc00317 	ldw	r19,12(sp)
81115d28:	dc800217 	ldw	r18,8(sp)
81115d2c:	dc400117 	ldw	r17,4(sp)
81115d30:	dc000017 	ldw	r16,0(sp)
81115d34:	dec00604 	addi	sp,sp,24
81115d38:	f800283a 	ret
81115d3c:	8cc00f2e 	bgeu	r17,r19,81115d7c <__b2d+0xe0>
81115d40:	117ffd44 	addi	r5,r2,-11
81115d44:	80bffe17 	ldw	r2,-8(r16)
81115d48:	28000e26 	beq	r5,zero,81115d84 <__b2d+0xe8>
81115d4c:	1949c83a 	sub	r4,r3,r5
81115d50:	9164983a 	sll	r18,r18,r5
81115d54:	1106d83a 	srl	r3,r2,r4
81115d58:	81bffe04 	addi	r6,r16,-8
81115d5c:	948ffc34 	orhi	r18,r18,16368
81115d60:	90c6b03a 	or	r3,r18,r3
81115d64:	89800e2e 	bgeu	r17,r6,81115da0 <__b2d+0x104>
81115d68:	81bffd17 	ldw	r6,-12(r16)
81115d6c:	1144983a 	sll	r2,r2,r5
81115d70:	310ad83a 	srl	r5,r6,r4
81115d74:	2884b03a 	or	r2,r5,r2
81115d78:	003fe806 	br	81115d1c <__reset+0xfb0f5d1c>
81115d7c:	10bffd44 	addi	r2,r2,-11
81115d80:	1000041e 	bne	r2,zero,81115d94 <__b2d+0xf8>
81115d84:	90cffc34 	orhi	r3,r18,16368
81115d88:	003fe406 	br	81115d1c <__reset+0xfb0f5d1c>
81115d8c:	000d883a 	mov	r6,zero
81115d90:	003fdf06 	br	81115d10 <__reset+0xfb0f5d10>
81115d94:	90a4983a 	sll	r18,r18,r2
81115d98:	0005883a 	mov	r2,zero
81115d9c:	003ff906 	br	81115d84 <__reset+0xfb0f5d84>
81115da0:	1144983a 	sll	r2,r2,r5
81115da4:	003fdd06 	br	81115d1c <__reset+0xfb0f5d1c>

81115da8 <__d2b>:
81115da8:	defff804 	addi	sp,sp,-32
81115dac:	dc000215 	stw	r16,8(sp)
81115db0:	3021883a 	mov	r16,r6
81115db4:	dc400315 	stw	r17,12(sp)
81115db8:	8022907a 	slli	r17,r16,1
81115dbc:	dd000615 	stw	r20,24(sp)
81115dc0:	2829883a 	mov	r20,r5
81115dc4:	01400044 	movi	r5,1
81115dc8:	dcc00515 	stw	r19,20(sp)
81115dcc:	dc800415 	stw	r18,16(sp)
81115dd0:	dfc00715 	stw	ra,28(sp)
81115dd4:	3825883a 	mov	r18,r7
81115dd8:	8822d57a 	srli	r17,r17,21
81115ddc:	11151140 	call	81115114 <_Balloc>
81115de0:	1027883a 	mov	r19,r2
81115de4:	00800434 	movhi	r2,16
81115de8:	10bfffc4 	addi	r2,r2,-1
81115dec:	808c703a 	and	r6,r16,r2
81115df0:	88000126 	beq	r17,zero,81115df8 <__d2b+0x50>
81115df4:	31800434 	orhi	r6,r6,16
81115df8:	d9800015 	stw	r6,0(sp)
81115dfc:	a0002426 	beq	r20,zero,81115e90 <__d2b+0xe8>
81115e00:	d9000104 	addi	r4,sp,4
81115e04:	dd000115 	stw	r20,4(sp)
81115e08:	11154700 	call	81115470 <__lo0bits>
81115e0c:	d8c00017 	ldw	r3,0(sp)
81115e10:	10002f1e 	bne	r2,zero,81115ed0 <__d2b+0x128>
81115e14:	d9000117 	ldw	r4,4(sp)
81115e18:	99000515 	stw	r4,20(r19)
81115e1c:	1821003a 	cmpeq	r16,r3,zero
81115e20:	01000084 	movi	r4,2
81115e24:	2421c83a 	sub	r16,r4,r16
81115e28:	98c00615 	stw	r3,24(r19)
81115e2c:	9c000415 	stw	r16,16(r19)
81115e30:	88001f1e 	bne	r17,zero,81115eb0 <__d2b+0x108>
81115e34:	10bef384 	addi	r2,r2,-1074
81115e38:	90800015 	stw	r2,0(r18)
81115e3c:	00900034 	movhi	r2,16384
81115e40:	10bfffc4 	addi	r2,r2,-1
81115e44:	8085883a 	add	r2,r16,r2
81115e48:	1085883a 	add	r2,r2,r2
81115e4c:	1085883a 	add	r2,r2,r2
81115e50:	9885883a 	add	r2,r19,r2
81115e54:	11000517 	ldw	r4,20(r2)
81115e58:	8020917a 	slli	r16,r16,5
81115e5c:	11154080 	call	81115408 <__hi0bits>
81115e60:	d8c00817 	ldw	r3,32(sp)
81115e64:	8085c83a 	sub	r2,r16,r2
81115e68:	18800015 	stw	r2,0(r3)
81115e6c:	9805883a 	mov	r2,r19
81115e70:	dfc00717 	ldw	ra,28(sp)
81115e74:	dd000617 	ldw	r20,24(sp)
81115e78:	dcc00517 	ldw	r19,20(sp)
81115e7c:	dc800417 	ldw	r18,16(sp)
81115e80:	dc400317 	ldw	r17,12(sp)
81115e84:	dc000217 	ldw	r16,8(sp)
81115e88:	dec00804 	addi	sp,sp,32
81115e8c:	f800283a 	ret
81115e90:	d809883a 	mov	r4,sp
81115e94:	11154700 	call	81115470 <__lo0bits>
81115e98:	d8c00017 	ldw	r3,0(sp)
81115e9c:	04000044 	movi	r16,1
81115ea0:	9c000415 	stw	r16,16(r19)
81115ea4:	98c00515 	stw	r3,20(r19)
81115ea8:	10800804 	addi	r2,r2,32
81115eac:	883fe126 	beq	r17,zero,81115e34 <__reset+0xfb0f5e34>
81115eb0:	00c00d44 	movi	r3,53
81115eb4:	8c7ef344 	addi	r17,r17,-1075
81115eb8:	88a3883a 	add	r17,r17,r2
81115ebc:	1885c83a 	sub	r2,r3,r2
81115ec0:	d8c00817 	ldw	r3,32(sp)
81115ec4:	94400015 	stw	r17,0(r18)
81115ec8:	18800015 	stw	r2,0(r3)
81115ecc:	003fe706 	br	81115e6c <__reset+0xfb0f5e6c>
81115ed0:	01000804 	movi	r4,32
81115ed4:	2089c83a 	sub	r4,r4,r2
81115ed8:	1908983a 	sll	r4,r3,r4
81115edc:	d9400117 	ldw	r5,4(sp)
81115ee0:	1886d83a 	srl	r3,r3,r2
81115ee4:	2148b03a 	or	r4,r4,r5
81115ee8:	99000515 	stw	r4,20(r19)
81115eec:	d8c00015 	stw	r3,0(sp)
81115ef0:	003fca06 	br	81115e1c <__reset+0xfb0f5e1c>

81115ef4 <__ratio>:
81115ef4:	defff904 	addi	sp,sp,-28
81115ef8:	dc400315 	stw	r17,12(sp)
81115efc:	2823883a 	mov	r17,r5
81115f00:	d9400104 	addi	r5,sp,4
81115f04:	dfc00615 	stw	ra,24(sp)
81115f08:	dcc00515 	stw	r19,20(sp)
81115f0c:	dc800415 	stw	r18,16(sp)
81115f10:	2027883a 	mov	r19,r4
81115f14:	dc000215 	stw	r16,8(sp)
81115f18:	1115c9c0 	call	81115c9c <__b2d>
81115f1c:	d80b883a 	mov	r5,sp
81115f20:	8809883a 	mov	r4,r17
81115f24:	1025883a 	mov	r18,r2
81115f28:	1821883a 	mov	r16,r3
81115f2c:	1115c9c0 	call	81115c9c <__b2d>
81115f30:	8a000417 	ldw	r8,16(r17)
81115f34:	99000417 	ldw	r4,16(r19)
81115f38:	d9400117 	ldw	r5,4(sp)
81115f3c:	2209c83a 	sub	r4,r4,r8
81115f40:	2010917a 	slli	r8,r4,5
81115f44:	d9000017 	ldw	r4,0(sp)
81115f48:	2909c83a 	sub	r4,r5,r4
81115f4c:	4109883a 	add	r4,r8,r4
81115f50:	01000e0e 	bge	zero,r4,81115f8c <__ratio+0x98>
81115f54:	2008953a 	slli	r4,r4,20
81115f58:	2421883a 	add	r16,r4,r16
81115f5c:	100d883a 	mov	r6,r2
81115f60:	180f883a 	mov	r7,r3
81115f64:	9009883a 	mov	r4,r18
81115f68:	800b883a 	mov	r5,r16
81115f6c:	111e0dc0 	call	8111e0dc <__divdf3>
81115f70:	dfc00617 	ldw	ra,24(sp)
81115f74:	dcc00517 	ldw	r19,20(sp)
81115f78:	dc800417 	ldw	r18,16(sp)
81115f7c:	dc400317 	ldw	r17,12(sp)
81115f80:	dc000217 	ldw	r16,8(sp)
81115f84:	dec00704 	addi	sp,sp,28
81115f88:	f800283a 	ret
81115f8c:	2008953a 	slli	r4,r4,20
81115f90:	1907c83a 	sub	r3,r3,r4
81115f94:	003ff106 	br	81115f5c <__reset+0xfb0f5f5c>

81115f98 <_mprec_log10>:
81115f98:	defffe04 	addi	sp,sp,-8
81115f9c:	dc000015 	stw	r16,0(sp)
81115fa0:	dfc00115 	stw	ra,4(sp)
81115fa4:	008005c4 	movi	r2,23
81115fa8:	2021883a 	mov	r16,r4
81115fac:	11000d0e 	bge	r2,r4,81115fe4 <_mprec_log10+0x4c>
81115fb0:	0005883a 	mov	r2,zero
81115fb4:	00cffc34 	movhi	r3,16368
81115fb8:	843fffc4 	addi	r16,r16,-1
81115fbc:	000d883a 	mov	r6,zero
81115fc0:	01d00934 	movhi	r7,16420
81115fc4:	1009883a 	mov	r4,r2
81115fc8:	180b883a 	mov	r5,r3
81115fcc:	11097240 	call	81109724 <__muldf3>
81115fd0:	803ff91e 	bne	r16,zero,81115fb8 <__reset+0xfb0f5fb8>
81115fd4:	dfc00117 	ldw	ra,4(sp)
81115fd8:	dc000017 	ldw	r16,0(sp)
81115fdc:	dec00204 	addi	sp,sp,8
81115fe0:	f800283a 	ret
81115fe4:	202090fa 	slli	r16,r4,3
81115fe8:	00a044f4 	movhi	r2,33043
81115fec:	108eac04 	addi	r2,r2,15024
81115ff0:	1421883a 	add	r16,r2,r16
81115ff4:	80800017 	ldw	r2,0(r16)
81115ff8:	80c00117 	ldw	r3,4(r16)
81115ffc:	dfc00117 	ldw	ra,4(sp)
81116000:	dc000017 	ldw	r16,0(sp)
81116004:	dec00204 	addi	sp,sp,8
81116008:	f800283a 	ret

8111600c <__copybits>:
8111600c:	297fffc4 	addi	r5,r5,-1
81116010:	280fd17a 	srai	r7,r5,5
81116014:	30c00417 	ldw	r3,16(r6)
81116018:	30800504 	addi	r2,r6,20
8111601c:	39c00044 	addi	r7,r7,1
81116020:	18c7883a 	add	r3,r3,r3
81116024:	39cf883a 	add	r7,r7,r7
81116028:	18c7883a 	add	r3,r3,r3
8111602c:	39cf883a 	add	r7,r7,r7
81116030:	10c7883a 	add	r3,r2,r3
81116034:	21cf883a 	add	r7,r4,r7
81116038:	10c00d2e 	bgeu	r2,r3,81116070 <__copybits+0x64>
8111603c:	200b883a 	mov	r5,r4
81116040:	12000017 	ldw	r8,0(r2)
81116044:	29400104 	addi	r5,r5,4
81116048:	10800104 	addi	r2,r2,4
8111604c:	2a3fff15 	stw	r8,-4(r5)
81116050:	10fffb36 	bltu	r2,r3,81116040 <__reset+0xfb0f6040>
81116054:	1985c83a 	sub	r2,r3,r6
81116058:	10bffac4 	addi	r2,r2,-21
8111605c:	1004d0ba 	srli	r2,r2,2
81116060:	10800044 	addi	r2,r2,1
81116064:	1085883a 	add	r2,r2,r2
81116068:	1085883a 	add	r2,r2,r2
8111606c:	2089883a 	add	r4,r4,r2
81116070:	21c0032e 	bgeu	r4,r7,81116080 <__copybits+0x74>
81116074:	20000015 	stw	zero,0(r4)
81116078:	21000104 	addi	r4,r4,4
8111607c:	21fffd36 	bltu	r4,r7,81116074 <__reset+0xfb0f6074>
81116080:	f800283a 	ret

81116084 <__any_on>:
81116084:	20c00417 	ldw	r3,16(r4)
81116088:	2805d17a 	srai	r2,r5,5
8111608c:	21000504 	addi	r4,r4,20
81116090:	18800d0e 	bge	r3,r2,811160c8 <__any_on+0x44>
81116094:	18c7883a 	add	r3,r3,r3
81116098:	18c7883a 	add	r3,r3,r3
8111609c:	20c7883a 	add	r3,r4,r3
811160a0:	20c0192e 	bgeu	r4,r3,81116108 <__any_on+0x84>
811160a4:	18bfff17 	ldw	r2,-4(r3)
811160a8:	18ffff04 	addi	r3,r3,-4
811160ac:	1000041e 	bne	r2,zero,811160c0 <__any_on+0x3c>
811160b0:	20c0142e 	bgeu	r4,r3,81116104 <__any_on+0x80>
811160b4:	18ffff04 	addi	r3,r3,-4
811160b8:	19400017 	ldw	r5,0(r3)
811160bc:	283ffc26 	beq	r5,zero,811160b0 <__reset+0xfb0f60b0>
811160c0:	00800044 	movi	r2,1
811160c4:	f800283a 	ret
811160c8:	10c00a0e 	bge	r2,r3,811160f4 <__any_on+0x70>
811160cc:	1085883a 	add	r2,r2,r2
811160d0:	1085883a 	add	r2,r2,r2
811160d4:	294007cc 	andi	r5,r5,31
811160d8:	2087883a 	add	r3,r4,r2
811160dc:	283ff026 	beq	r5,zero,811160a0 <__reset+0xfb0f60a0>
811160e0:	19800017 	ldw	r6,0(r3)
811160e4:	3144d83a 	srl	r2,r6,r5
811160e8:	114a983a 	sll	r5,r2,r5
811160ec:	317ff41e 	bne	r6,r5,811160c0 <__reset+0xfb0f60c0>
811160f0:	003feb06 	br	811160a0 <__reset+0xfb0f60a0>
811160f4:	1085883a 	add	r2,r2,r2
811160f8:	1085883a 	add	r2,r2,r2
811160fc:	2087883a 	add	r3,r4,r2
81116100:	003fe706 	br	811160a0 <__reset+0xfb0f60a0>
81116104:	f800283a 	ret
81116108:	0005883a 	mov	r2,zero
8111610c:	f800283a 	ret

81116110 <_putc_r>:
81116110:	defffc04 	addi	sp,sp,-16
81116114:	dc000215 	stw	r16,8(sp)
81116118:	dfc00315 	stw	ra,12(sp)
8111611c:	2021883a 	mov	r16,r4
81116120:	20000226 	beq	r4,zero,8111612c <_putc_r+0x1c>
81116124:	20800e17 	ldw	r2,56(r4)
81116128:	10001b26 	beq	r2,zero,81116198 <_putc_r+0x88>
8111612c:	30800217 	ldw	r2,8(r6)
81116130:	10bfffc4 	addi	r2,r2,-1
81116134:	30800215 	stw	r2,8(r6)
81116138:	10000a16 	blt	r2,zero,81116164 <_putc_r+0x54>
8111613c:	30800017 	ldw	r2,0(r6)
81116140:	11400005 	stb	r5,0(r2)
81116144:	30800017 	ldw	r2,0(r6)
81116148:	10c00044 	addi	r3,r2,1
8111614c:	30c00015 	stw	r3,0(r6)
81116150:	10800003 	ldbu	r2,0(r2)
81116154:	dfc00317 	ldw	ra,12(sp)
81116158:	dc000217 	ldw	r16,8(sp)
8111615c:	dec00404 	addi	sp,sp,16
81116160:	f800283a 	ret
81116164:	30c00617 	ldw	r3,24(r6)
81116168:	10c00616 	blt	r2,r3,81116184 <_putc_r+0x74>
8111616c:	30800017 	ldw	r2,0(r6)
81116170:	00c00284 	movi	r3,10
81116174:	11400005 	stb	r5,0(r2)
81116178:	30800017 	ldw	r2,0(r6)
8111617c:	11400003 	ldbu	r5,0(r2)
81116180:	28fff11e 	bne	r5,r3,81116148 <__reset+0xfb0f6148>
81116184:	8009883a 	mov	r4,r16
81116188:	dfc00317 	ldw	ra,12(sp)
8111618c:	dc000217 	ldw	r16,8(sp)
81116190:	dec00404 	addi	sp,sp,16
81116194:	111b5f01 	jmpi	8111b5f0 <__swbuf_r>
81116198:	d9400015 	stw	r5,0(sp)
8111619c:	d9800115 	stw	r6,4(sp)
811161a0:	1113d1c0 	call	81113d1c <__sinit>
811161a4:	d9800117 	ldw	r6,4(sp)
811161a8:	d9400017 	ldw	r5,0(sp)
811161ac:	003fdf06 	br	8111612c <__reset+0xfb0f612c>

811161b0 <putc>:
811161b0:	00a044f4 	movhi	r2,33043
811161b4:	defffc04 	addi	sp,sp,-16
811161b8:	10976404 	addi	r2,r2,23952
811161bc:	dc000115 	stw	r16,4(sp)
811161c0:	14000017 	ldw	r16,0(r2)
811161c4:	dc400215 	stw	r17,8(sp)
811161c8:	dfc00315 	stw	ra,12(sp)
811161cc:	2023883a 	mov	r17,r4
811161d0:	80000226 	beq	r16,zero,811161dc <putc+0x2c>
811161d4:	80800e17 	ldw	r2,56(r16)
811161d8:	10001a26 	beq	r2,zero,81116244 <putc+0x94>
811161dc:	28800217 	ldw	r2,8(r5)
811161e0:	10bfffc4 	addi	r2,r2,-1
811161e4:	28800215 	stw	r2,8(r5)
811161e8:	10000b16 	blt	r2,zero,81116218 <putc+0x68>
811161ec:	28800017 	ldw	r2,0(r5)
811161f0:	14400005 	stb	r17,0(r2)
811161f4:	28800017 	ldw	r2,0(r5)
811161f8:	10c00044 	addi	r3,r2,1
811161fc:	28c00015 	stw	r3,0(r5)
81116200:	10800003 	ldbu	r2,0(r2)
81116204:	dfc00317 	ldw	ra,12(sp)
81116208:	dc400217 	ldw	r17,8(sp)
8111620c:	dc000117 	ldw	r16,4(sp)
81116210:	dec00404 	addi	sp,sp,16
81116214:	f800283a 	ret
81116218:	28c00617 	ldw	r3,24(r5)
8111621c:	10c00e16 	blt	r2,r3,81116258 <putc+0xa8>
81116220:	28800017 	ldw	r2,0(r5)
81116224:	01000284 	movi	r4,10
81116228:	14400005 	stb	r17,0(r2)
8111622c:	28800017 	ldw	r2,0(r5)
81116230:	10c00003 	ldbu	r3,0(r2)
81116234:	193ff01e 	bne	r3,r4,811161f8 <__reset+0xfb0f61f8>
81116238:	280d883a 	mov	r6,r5
8111623c:	180b883a 	mov	r5,r3
81116240:	00000706 	br	81116260 <putc+0xb0>
81116244:	8009883a 	mov	r4,r16
81116248:	d9400015 	stw	r5,0(sp)
8111624c:	1113d1c0 	call	81113d1c <__sinit>
81116250:	d9400017 	ldw	r5,0(sp)
81116254:	003fe106 	br	811161dc <__reset+0xfb0f61dc>
81116258:	280d883a 	mov	r6,r5
8111625c:	880b883a 	mov	r5,r17
81116260:	8009883a 	mov	r4,r16
81116264:	dfc00317 	ldw	ra,12(sp)
81116268:	dc400217 	ldw	r17,8(sp)
8111626c:	dc000117 	ldw	r16,4(sp)
81116270:	dec00404 	addi	sp,sp,16
81116274:	111b5f01 	jmpi	8111b5f0 <__swbuf_r>

81116278 <_read_r>:
81116278:	defffd04 	addi	sp,sp,-12
8111627c:	2805883a 	mov	r2,r5
81116280:	dc000015 	stw	r16,0(sp)
81116284:	042044f4 	movhi	r16,33043
81116288:	dc400115 	stw	r17,4(sp)
8111628c:	300b883a 	mov	r5,r6
81116290:	8417b304 	addi	r16,r16,24268
81116294:	2023883a 	mov	r17,r4
81116298:	380d883a 	mov	r6,r7
8111629c:	1009883a 	mov	r4,r2
811162a0:	dfc00215 	stw	ra,8(sp)
811162a4:	80000015 	stw	zero,0(r16)
811162a8:	111fe9c0 	call	8111fe9c <read>
811162ac:	00ffffc4 	movi	r3,-1
811162b0:	10c00526 	beq	r2,r3,811162c8 <_read_r+0x50>
811162b4:	dfc00217 	ldw	ra,8(sp)
811162b8:	dc400117 	ldw	r17,4(sp)
811162bc:	dc000017 	ldw	r16,0(sp)
811162c0:	dec00304 	addi	sp,sp,12
811162c4:	f800283a 	ret
811162c8:	80c00017 	ldw	r3,0(r16)
811162cc:	183ff926 	beq	r3,zero,811162b4 <__reset+0xfb0f62b4>
811162d0:	88c00015 	stw	r3,0(r17)
811162d4:	003ff706 	br	811162b4 <__reset+0xfb0f62b4>

811162d8 <_realloc_r>:
811162d8:	defff604 	addi	sp,sp,-40
811162dc:	dc800215 	stw	r18,8(sp)
811162e0:	dfc00915 	stw	ra,36(sp)
811162e4:	df000815 	stw	fp,32(sp)
811162e8:	ddc00715 	stw	r23,28(sp)
811162ec:	dd800615 	stw	r22,24(sp)
811162f0:	dd400515 	stw	r21,20(sp)
811162f4:	dd000415 	stw	r20,16(sp)
811162f8:	dcc00315 	stw	r19,12(sp)
811162fc:	dc400115 	stw	r17,4(sp)
81116300:	dc000015 	stw	r16,0(sp)
81116304:	3025883a 	mov	r18,r6
81116308:	2800b726 	beq	r5,zero,811165e8 <_realloc_r+0x310>
8111630c:	282b883a 	mov	r21,r5
81116310:	2029883a 	mov	r20,r4
81116314:	11205dc0 	call	811205dc <__malloc_lock>
81116318:	a8bfff17 	ldw	r2,-4(r21)
8111631c:	043fff04 	movi	r16,-4
81116320:	90c002c4 	addi	r3,r18,11
81116324:	01000584 	movi	r4,22
81116328:	acfffe04 	addi	r19,r21,-8
8111632c:	1420703a 	and	r16,r2,r16
81116330:	20c0332e 	bgeu	r4,r3,81116400 <_realloc_r+0x128>
81116334:	047ffe04 	movi	r17,-8
81116338:	1c62703a 	and	r17,r3,r17
8111633c:	8807883a 	mov	r3,r17
81116340:	88005816 	blt	r17,zero,811164a4 <_realloc_r+0x1cc>
81116344:	8c805736 	bltu	r17,r18,811164a4 <_realloc_r+0x1cc>
81116348:	80c0300e 	bge	r16,r3,8111640c <_realloc_r+0x134>
8111634c:	072044f4 	movhi	fp,33043
81116350:	e7114604 	addi	fp,fp,17688
81116354:	e1c00217 	ldw	r7,8(fp)
81116358:	9c09883a 	add	r4,r19,r16
8111635c:	22000117 	ldw	r8,4(r4)
81116360:	21c06326 	beq	r4,r7,811164f0 <_realloc_r+0x218>
81116364:	017fff84 	movi	r5,-2
81116368:	414a703a 	and	r5,r8,r5
8111636c:	214b883a 	add	r5,r4,r5
81116370:	29800117 	ldw	r6,4(r5)
81116374:	3180004c 	andi	r6,r6,1
81116378:	30003f26 	beq	r6,zero,81116478 <_realloc_r+0x1a0>
8111637c:	1080004c 	andi	r2,r2,1
81116380:	10008326 	beq	r2,zero,81116590 <_realloc_r+0x2b8>
81116384:	900b883a 	mov	r5,r18
81116388:	a009883a 	mov	r4,r20
8111638c:	110aa600 	call	8110aa60 <_malloc_r>
81116390:	1025883a 	mov	r18,r2
81116394:	10011e26 	beq	r2,zero,81116810 <_realloc_r+0x538>
81116398:	a93fff17 	ldw	r4,-4(r21)
8111639c:	10fffe04 	addi	r3,r2,-8
811163a0:	00bfff84 	movi	r2,-2
811163a4:	2084703a 	and	r2,r4,r2
811163a8:	9885883a 	add	r2,r19,r2
811163ac:	1880ee26 	beq	r3,r2,81116768 <_realloc_r+0x490>
811163b0:	81bfff04 	addi	r6,r16,-4
811163b4:	00800904 	movi	r2,36
811163b8:	1180b836 	bltu	r2,r6,8111669c <_realloc_r+0x3c4>
811163bc:	00c004c4 	movi	r3,19
811163c0:	19809636 	bltu	r3,r6,8111661c <_realloc_r+0x344>
811163c4:	9005883a 	mov	r2,r18
811163c8:	a807883a 	mov	r3,r21
811163cc:	19000017 	ldw	r4,0(r3)
811163d0:	11000015 	stw	r4,0(r2)
811163d4:	19000117 	ldw	r4,4(r3)
811163d8:	11000115 	stw	r4,4(r2)
811163dc:	18c00217 	ldw	r3,8(r3)
811163e0:	10c00215 	stw	r3,8(r2)
811163e4:	a80b883a 	mov	r5,r21
811163e8:	a009883a 	mov	r4,r20
811163ec:	111419c0 	call	8111419c <_free_r>
811163f0:	a009883a 	mov	r4,r20
811163f4:	11206fc0 	call	811206fc <__malloc_unlock>
811163f8:	9005883a 	mov	r2,r18
811163fc:	00001206 	br	81116448 <_realloc_r+0x170>
81116400:	00c00404 	movi	r3,16
81116404:	1823883a 	mov	r17,r3
81116408:	003fce06 	br	81116344 <__reset+0xfb0f6344>
8111640c:	a825883a 	mov	r18,r21
81116410:	8445c83a 	sub	r2,r16,r17
81116414:	00c003c4 	movi	r3,15
81116418:	18802636 	bltu	r3,r2,811164b4 <_realloc_r+0x1dc>
8111641c:	99800117 	ldw	r6,4(r19)
81116420:	9c07883a 	add	r3,r19,r16
81116424:	3180004c 	andi	r6,r6,1
81116428:	3420b03a 	or	r16,r6,r16
8111642c:	9c000115 	stw	r16,4(r19)
81116430:	18800117 	ldw	r2,4(r3)
81116434:	10800054 	ori	r2,r2,1
81116438:	18800115 	stw	r2,4(r3)
8111643c:	a009883a 	mov	r4,r20
81116440:	11206fc0 	call	811206fc <__malloc_unlock>
81116444:	9005883a 	mov	r2,r18
81116448:	dfc00917 	ldw	ra,36(sp)
8111644c:	df000817 	ldw	fp,32(sp)
81116450:	ddc00717 	ldw	r23,28(sp)
81116454:	dd800617 	ldw	r22,24(sp)
81116458:	dd400517 	ldw	r21,20(sp)
8111645c:	dd000417 	ldw	r20,16(sp)
81116460:	dcc00317 	ldw	r19,12(sp)
81116464:	dc800217 	ldw	r18,8(sp)
81116468:	dc400117 	ldw	r17,4(sp)
8111646c:	dc000017 	ldw	r16,0(sp)
81116470:	dec00a04 	addi	sp,sp,40
81116474:	f800283a 	ret
81116478:	017fff04 	movi	r5,-4
8111647c:	414a703a 	and	r5,r8,r5
81116480:	814d883a 	add	r6,r16,r5
81116484:	30c01f16 	blt	r6,r3,81116504 <_realloc_r+0x22c>
81116488:	20800317 	ldw	r2,12(r4)
8111648c:	20c00217 	ldw	r3,8(r4)
81116490:	a825883a 	mov	r18,r21
81116494:	3021883a 	mov	r16,r6
81116498:	18800315 	stw	r2,12(r3)
8111649c:	10c00215 	stw	r3,8(r2)
811164a0:	003fdb06 	br	81116410 <__reset+0xfb0f6410>
811164a4:	00800304 	movi	r2,12
811164a8:	a0800015 	stw	r2,0(r20)
811164ac:	0005883a 	mov	r2,zero
811164b0:	003fe506 	br	81116448 <__reset+0xfb0f6448>
811164b4:	98c00117 	ldw	r3,4(r19)
811164b8:	9c4b883a 	add	r5,r19,r17
811164bc:	11000054 	ori	r4,r2,1
811164c0:	18c0004c 	andi	r3,r3,1
811164c4:	1c62b03a 	or	r17,r3,r17
811164c8:	9c400115 	stw	r17,4(r19)
811164cc:	29000115 	stw	r4,4(r5)
811164d0:	2885883a 	add	r2,r5,r2
811164d4:	10c00117 	ldw	r3,4(r2)
811164d8:	29400204 	addi	r5,r5,8
811164dc:	a009883a 	mov	r4,r20
811164e0:	18c00054 	ori	r3,r3,1
811164e4:	10c00115 	stw	r3,4(r2)
811164e8:	111419c0 	call	8111419c <_free_r>
811164ec:	003fd306 	br	8111643c <__reset+0xfb0f643c>
811164f0:	017fff04 	movi	r5,-4
811164f4:	414a703a 	and	r5,r8,r5
811164f8:	89800404 	addi	r6,r17,16
811164fc:	8151883a 	add	r8,r16,r5
81116500:	4180590e 	bge	r8,r6,81116668 <_realloc_r+0x390>
81116504:	1080004c 	andi	r2,r2,1
81116508:	103f9e1e 	bne	r2,zero,81116384 <__reset+0xfb0f6384>
8111650c:	adbffe17 	ldw	r22,-8(r21)
81116510:	00bfff04 	movi	r2,-4
81116514:	9dadc83a 	sub	r22,r19,r22
81116518:	b1800117 	ldw	r6,4(r22)
8111651c:	3084703a 	and	r2,r6,r2
81116520:	20002026 	beq	r4,zero,811165a4 <_realloc_r+0x2cc>
81116524:	80af883a 	add	r23,r16,r2
81116528:	b96f883a 	add	r23,r23,r5
8111652c:	21c05f26 	beq	r4,r7,811166ac <_realloc_r+0x3d4>
81116530:	b8c01c16 	blt	r23,r3,811165a4 <_realloc_r+0x2cc>
81116534:	20800317 	ldw	r2,12(r4)
81116538:	20c00217 	ldw	r3,8(r4)
8111653c:	81bfff04 	addi	r6,r16,-4
81116540:	01000904 	movi	r4,36
81116544:	18800315 	stw	r2,12(r3)
81116548:	10c00215 	stw	r3,8(r2)
8111654c:	b0c00217 	ldw	r3,8(r22)
81116550:	b0800317 	ldw	r2,12(r22)
81116554:	b4800204 	addi	r18,r22,8
81116558:	18800315 	stw	r2,12(r3)
8111655c:	10c00215 	stw	r3,8(r2)
81116560:	21801b36 	bltu	r4,r6,811165d0 <_realloc_r+0x2f8>
81116564:	008004c4 	movi	r2,19
81116568:	1180352e 	bgeu	r2,r6,81116640 <_realloc_r+0x368>
8111656c:	a8800017 	ldw	r2,0(r21)
81116570:	b0800215 	stw	r2,8(r22)
81116574:	a8800117 	ldw	r2,4(r21)
81116578:	b0800315 	stw	r2,12(r22)
8111657c:	008006c4 	movi	r2,27
81116580:	11807f36 	bltu	r2,r6,81116780 <_realloc_r+0x4a8>
81116584:	b0800404 	addi	r2,r22,16
81116588:	ad400204 	addi	r21,r21,8
8111658c:	00002d06 	br	81116644 <_realloc_r+0x36c>
81116590:	adbffe17 	ldw	r22,-8(r21)
81116594:	00bfff04 	movi	r2,-4
81116598:	9dadc83a 	sub	r22,r19,r22
8111659c:	b1000117 	ldw	r4,4(r22)
811165a0:	2084703a 	and	r2,r4,r2
811165a4:	b03f7726 	beq	r22,zero,81116384 <__reset+0xfb0f6384>
811165a8:	80af883a 	add	r23,r16,r2
811165ac:	b8ff7516 	blt	r23,r3,81116384 <__reset+0xfb0f6384>
811165b0:	b0800317 	ldw	r2,12(r22)
811165b4:	b0c00217 	ldw	r3,8(r22)
811165b8:	81bfff04 	addi	r6,r16,-4
811165bc:	01000904 	movi	r4,36
811165c0:	18800315 	stw	r2,12(r3)
811165c4:	10c00215 	stw	r3,8(r2)
811165c8:	b4800204 	addi	r18,r22,8
811165cc:	21bfe52e 	bgeu	r4,r6,81116564 <__reset+0xfb0f6564>
811165d0:	a80b883a 	mov	r5,r21
811165d4:	9009883a 	mov	r4,r18
811165d8:	1114fb80 	call	81114fb8 <memmove>
811165dc:	b821883a 	mov	r16,r23
811165e0:	b027883a 	mov	r19,r22
811165e4:	003f8a06 	br	81116410 <__reset+0xfb0f6410>
811165e8:	300b883a 	mov	r5,r6
811165ec:	dfc00917 	ldw	ra,36(sp)
811165f0:	df000817 	ldw	fp,32(sp)
811165f4:	ddc00717 	ldw	r23,28(sp)
811165f8:	dd800617 	ldw	r22,24(sp)
811165fc:	dd400517 	ldw	r21,20(sp)
81116600:	dd000417 	ldw	r20,16(sp)
81116604:	dcc00317 	ldw	r19,12(sp)
81116608:	dc800217 	ldw	r18,8(sp)
8111660c:	dc400117 	ldw	r17,4(sp)
81116610:	dc000017 	ldw	r16,0(sp)
81116614:	dec00a04 	addi	sp,sp,40
81116618:	110aa601 	jmpi	8110aa60 <_malloc_r>
8111661c:	a8c00017 	ldw	r3,0(r21)
81116620:	90c00015 	stw	r3,0(r18)
81116624:	a8c00117 	ldw	r3,4(r21)
81116628:	90c00115 	stw	r3,4(r18)
8111662c:	00c006c4 	movi	r3,27
81116630:	19804536 	bltu	r3,r6,81116748 <_realloc_r+0x470>
81116634:	90800204 	addi	r2,r18,8
81116638:	a8c00204 	addi	r3,r21,8
8111663c:	003f6306 	br	811163cc <__reset+0xfb0f63cc>
81116640:	9005883a 	mov	r2,r18
81116644:	a8c00017 	ldw	r3,0(r21)
81116648:	b821883a 	mov	r16,r23
8111664c:	b027883a 	mov	r19,r22
81116650:	10c00015 	stw	r3,0(r2)
81116654:	a8c00117 	ldw	r3,4(r21)
81116658:	10c00115 	stw	r3,4(r2)
8111665c:	a8c00217 	ldw	r3,8(r21)
81116660:	10c00215 	stw	r3,8(r2)
81116664:	003f6a06 	br	81116410 <__reset+0xfb0f6410>
81116668:	9c67883a 	add	r19,r19,r17
8111666c:	4445c83a 	sub	r2,r8,r17
81116670:	e4c00215 	stw	r19,8(fp)
81116674:	10800054 	ori	r2,r2,1
81116678:	98800115 	stw	r2,4(r19)
8111667c:	a8bfff17 	ldw	r2,-4(r21)
81116680:	a009883a 	mov	r4,r20
81116684:	1080004c 	andi	r2,r2,1
81116688:	1462b03a 	or	r17,r2,r17
8111668c:	ac7fff15 	stw	r17,-4(r21)
81116690:	11206fc0 	call	811206fc <__malloc_unlock>
81116694:	a805883a 	mov	r2,r21
81116698:	003f6b06 	br	81116448 <__reset+0xfb0f6448>
8111669c:	a80b883a 	mov	r5,r21
811166a0:	9009883a 	mov	r4,r18
811166a4:	1114fb80 	call	81114fb8 <memmove>
811166a8:	003f4e06 	br	811163e4 <__reset+0xfb0f63e4>
811166ac:	89000404 	addi	r4,r17,16
811166b0:	b93fbc16 	blt	r23,r4,811165a4 <__reset+0xfb0f65a4>
811166b4:	b0800317 	ldw	r2,12(r22)
811166b8:	b0c00217 	ldw	r3,8(r22)
811166bc:	81bfff04 	addi	r6,r16,-4
811166c0:	01000904 	movi	r4,36
811166c4:	18800315 	stw	r2,12(r3)
811166c8:	10c00215 	stw	r3,8(r2)
811166cc:	b4800204 	addi	r18,r22,8
811166d0:	21804336 	bltu	r4,r6,811167e0 <_realloc_r+0x508>
811166d4:	008004c4 	movi	r2,19
811166d8:	11803f2e 	bgeu	r2,r6,811167d8 <_realloc_r+0x500>
811166dc:	a8800017 	ldw	r2,0(r21)
811166e0:	b0800215 	stw	r2,8(r22)
811166e4:	a8800117 	ldw	r2,4(r21)
811166e8:	b0800315 	stw	r2,12(r22)
811166ec:	008006c4 	movi	r2,27
811166f0:	11803f36 	bltu	r2,r6,811167f0 <_realloc_r+0x518>
811166f4:	b0800404 	addi	r2,r22,16
811166f8:	ad400204 	addi	r21,r21,8
811166fc:	a8c00017 	ldw	r3,0(r21)
81116700:	10c00015 	stw	r3,0(r2)
81116704:	a8c00117 	ldw	r3,4(r21)
81116708:	10c00115 	stw	r3,4(r2)
8111670c:	a8c00217 	ldw	r3,8(r21)
81116710:	10c00215 	stw	r3,8(r2)
81116714:	b447883a 	add	r3,r22,r17
81116718:	bc45c83a 	sub	r2,r23,r17
8111671c:	e0c00215 	stw	r3,8(fp)
81116720:	10800054 	ori	r2,r2,1
81116724:	18800115 	stw	r2,4(r3)
81116728:	b0800117 	ldw	r2,4(r22)
8111672c:	a009883a 	mov	r4,r20
81116730:	1080004c 	andi	r2,r2,1
81116734:	1462b03a 	or	r17,r2,r17
81116738:	b4400115 	stw	r17,4(r22)
8111673c:	11206fc0 	call	811206fc <__malloc_unlock>
81116740:	9005883a 	mov	r2,r18
81116744:	003f4006 	br	81116448 <__reset+0xfb0f6448>
81116748:	a8c00217 	ldw	r3,8(r21)
8111674c:	90c00215 	stw	r3,8(r18)
81116750:	a8c00317 	ldw	r3,12(r21)
81116754:	90c00315 	stw	r3,12(r18)
81116758:	30801126 	beq	r6,r2,811167a0 <_realloc_r+0x4c8>
8111675c:	90800404 	addi	r2,r18,16
81116760:	a8c00404 	addi	r3,r21,16
81116764:	003f1906 	br	811163cc <__reset+0xfb0f63cc>
81116768:	90ffff17 	ldw	r3,-4(r18)
8111676c:	00bfff04 	movi	r2,-4
81116770:	a825883a 	mov	r18,r21
81116774:	1884703a 	and	r2,r3,r2
81116778:	80a1883a 	add	r16,r16,r2
8111677c:	003f2406 	br	81116410 <__reset+0xfb0f6410>
81116780:	a8800217 	ldw	r2,8(r21)
81116784:	b0800415 	stw	r2,16(r22)
81116788:	a8800317 	ldw	r2,12(r21)
8111678c:	b0800515 	stw	r2,20(r22)
81116790:	31000a26 	beq	r6,r4,811167bc <_realloc_r+0x4e4>
81116794:	b0800604 	addi	r2,r22,24
81116798:	ad400404 	addi	r21,r21,16
8111679c:	003fa906 	br	81116644 <__reset+0xfb0f6644>
811167a0:	a9000417 	ldw	r4,16(r21)
811167a4:	90800604 	addi	r2,r18,24
811167a8:	a8c00604 	addi	r3,r21,24
811167ac:	91000415 	stw	r4,16(r18)
811167b0:	a9000517 	ldw	r4,20(r21)
811167b4:	91000515 	stw	r4,20(r18)
811167b8:	003f0406 	br	811163cc <__reset+0xfb0f63cc>
811167bc:	a8c00417 	ldw	r3,16(r21)
811167c0:	ad400604 	addi	r21,r21,24
811167c4:	b0800804 	addi	r2,r22,32
811167c8:	b0c00615 	stw	r3,24(r22)
811167cc:	a8ffff17 	ldw	r3,-4(r21)
811167d0:	b0c00715 	stw	r3,28(r22)
811167d4:	003f9b06 	br	81116644 <__reset+0xfb0f6644>
811167d8:	9005883a 	mov	r2,r18
811167dc:	003fc706 	br	811166fc <__reset+0xfb0f66fc>
811167e0:	a80b883a 	mov	r5,r21
811167e4:	9009883a 	mov	r4,r18
811167e8:	1114fb80 	call	81114fb8 <memmove>
811167ec:	003fc906 	br	81116714 <__reset+0xfb0f6714>
811167f0:	a8800217 	ldw	r2,8(r21)
811167f4:	b0800415 	stw	r2,16(r22)
811167f8:	a8800317 	ldw	r2,12(r21)
811167fc:	b0800515 	stw	r2,20(r22)
81116800:	31000726 	beq	r6,r4,81116820 <_realloc_r+0x548>
81116804:	b0800604 	addi	r2,r22,24
81116808:	ad400404 	addi	r21,r21,16
8111680c:	003fbb06 	br	811166fc <__reset+0xfb0f66fc>
81116810:	a009883a 	mov	r4,r20
81116814:	11206fc0 	call	811206fc <__malloc_unlock>
81116818:	0005883a 	mov	r2,zero
8111681c:	003f0a06 	br	81116448 <__reset+0xfb0f6448>
81116820:	a8c00417 	ldw	r3,16(r21)
81116824:	ad400604 	addi	r21,r21,24
81116828:	b0800804 	addi	r2,r22,32
8111682c:	b0c00615 	stw	r3,24(r22)
81116830:	a8ffff17 	ldw	r3,-4(r21)
81116834:	b0c00715 	stw	r3,28(r22)
81116838:	003fb006 	br	811166fc <__reset+0xfb0f66fc>

8111683c <__fpclassifyd>:
8111683c:	00a00034 	movhi	r2,32768
81116840:	10bfffc4 	addi	r2,r2,-1
81116844:	2884703a 	and	r2,r5,r2
81116848:	10000726 	beq	r2,zero,81116868 <__fpclassifyd+0x2c>
8111684c:	00fffc34 	movhi	r3,65520
81116850:	019ff834 	movhi	r6,32736
81116854:	28c7883a 	add	r3,r5,r3
81116858:	31bfffc4 	addi	r6,r6,-1
8111685c:	30c00536 	bltu	r6,r3,81116874 <__fpclassifyd+0x38>
81116860:	00800104 	movi	r2,4
81116864:	f800283a 	ret
81116868:	2000021e 	bne	r4,zero,81116874 <__fpclassifyd+0x38>
8111686c:	00800084 	movi	r2,2
81116870:	f800283a 	ret
81116874:	00dffc34 	movhi	r3,32752
81116878:	019ff834 	movhi	r6,32736
8111687c:	28cb883a 	add	r5,r5,r3
81116880:	31bfffc4 	addi	r6,r6,-1
81116884:	317ff62e 	bgeu	r6,r5,81116860 <__reset+0xfb0f6860>
81116888:	01400434 	movhi	r5,16
8111688c:	297fffc4 	addi	r5,r5,-1
81116890:	28800236 	bltu	r5,r2,8111689c <__fpclassifyd+0x60>
81116894:	008000c4 	movi	r2,3
81116898:	f800283a 	ret
8111689c:	10c00226 	beq	r2,r3,811168a8 <__fpclassifyd+0x6c>
811168a0:	0005883a 	mov	r2,zero
811168a4:	f800283a 	ret
811168a8:	2005003a 	cmpeq	r2,r4,zero
811168ac:	f800283a 	ret

811168b0 <__sccl>:
811168b0:	2a000003 	ldbu	r8,0(r5)
811168b4:	00801784 	movi	r2,94
811168b8:	40802a26 	beq	r8,r2,81116964 <__sccl+0xb4>
811168bc:	29400044 	addi	r5,r5,1
811168c0:	000f883a 	mov	r7,zero
811168c4:	0013883a 	mov	r9,zero
811168c8:	2007883a 	mov	r3,r4
811168cc:	21804004 	addi	r6,r4,256
811168d0:	19c00005 	stb	r7,0(r3)
811168d4:	18c00044 	addi	r3,r3,1
811168d8:	19bffd1e 	bne	r3,r6,811168d0 <__reset+0xfb0f68d0>
811168dc:	40001126 	beq	r8,zero,81116924 <__sccl+0x74>
811168e0:	00800044 	movi	r2,1
811168e4:	124fc83a 	sub	r7,r2,r9
811168e8:	02800b44 	movi	r10,45
811168ec:	02c01744 	movi	r11,93
811168f0:	2205883a 	add	r2,r4,r8
811168f4:	11c00005 	stb	r7,0(r2)
811168f8:	28800044 	addi	r2,r5,1
811168fc:	28c00003 	ldbu	r3,0(r5)
81116900:	1a800a26 	beq	r3,r10,8111692c <__sccl+0x7c>
81116904:	1ac00426 	beq	r3,r11,81116918 <__sccl+0x68>
81116908:	18000426 	beq	r3,zero,8111691c <__sccl+0x6c>
8111690c:	1811883a 	mov	r8,r3
81116910:	100b883a 	mov	r5,r2
81116914:	003ff606 	br	811168f0 <__reset+0xfb0f68f0>
81116918:	f800283a 	ret
8111691c:	2805883a 	mov	r2,r5
81116920:	f800283a 	ret
81116924:	28bfffc4 	addi	r2,r5,-1
81116928:	f800283a 	ret
8111692c:	12400003 	ldbu	r9,0(r2)
81116930:	4ac01126 	beq	r9,r11,81116978 <__sccl+0xc8>
81116934:	4a001016 	blt	r9,r8,81116978 <__sccl+0xc8>
81116938:	41800044 	addi	r6,r8,1
8111693c:	29400084 	addi	r5,r5,2
81116940:	2187883a 	add	r3,r4,r6
81116944:	00000106 	br	8111694c <__sccl+0x9c>
81116948:	31800044 	addi	r6,r6,1
8111694c:	19c00005 	stb	r7,0(r3)
81116950:	3011883a 	mov	r8,r6
81116954:	18c00044 	addi	r3,r3,1
81116958:	327ffb16 	blt	r6,r9,81116948 <__reset+0xfb0f6948>
8111695c:	10800084 	addi	r2,r2,2
81116960:	003fe606 	br	811168fc <__reset+0xfb0f68fc>
81116964:	2a000043 	ldbu	r8,1(r5)
81116968:	01c00044 	movi	r7,1
8111696c:	29400084 	addi	r5,r5,2
81116970:	02400044 	movi	r9,1
81116974:	003fd406 	br	811168c8 <__reset+0xfb0f68c8>
81116978:	5011883a 	mov	r8,r10
8111697c:	003fe406 	br	81116910 <__reset+0xfb0f6910>

81116980 <nanf>:
81116980:	009ff034 	movhi	r2,32704
81116984:	f800283a 	ret

81116988 <sulp>:
81116988:	defffd04 	addi	sp,sp,-12
8111698c:	dc400115 	stw	r17,4(sp)
81116990:	3023883a 	mov	r17,r6
81116994:	dc000015 	stw	r16,0(sp)
81116998:	dfc00215 	stw	ra,8(sp)
8111699c:	2821883a 	mov	r16,r5
811169a0:	1115c380 	call	81115c38 <__ulp>
811169a4:	88000c26 	beq	r17,zero,811169d8 <sulp+0x50>
811169a8:	841ffc2c 	andhi	r16,r16,32752
811169ac:	8020d53a 	srli	r16,r16,20
811169b0:	01c01ac4 	movi	r7,107
811169b4:	3c21c83a 	sub	r16,r7,r16
811169b8:	0400070e 	bge	zero,r16,811169d8 <sulp+0x50>
811169bc:	8020953a 	slli	r16,r16,20
811169c0:	01cffc34 	movhi	r7,16368
811169c4:	000d883a 	mov	r6,zero
811169c8:	81cf883a 	add	r7,r16,r7
811169cc:	1009883a 	mov	r4,r2
811169d0:	180b883a 	mov	r5,r3
811169d4:	11097240 	call	81109724 <__muldf3>
811169d8:	dfc00217 	ldw	ra,8(sp)
811169dc:	dc400117 	ldw	r17,4(sp)
811169e0:	dc000017 	ldw	r16,0(sp)
811169e4:	dec00304 	addi	sp,sp,12
811169e8:	f800283a 	ret

811169ec <_strtod_r>:
811169ec:	deffe204 	addi	sp,sp,-120
811169f0:	ddc01b15 	stw	r23,108(sp)
811169f4:	dd001815 	stw	r20,96(sp)
811169f8:	dc801615 	stw	r18,88(sp)
811169fc:	dc401515 	stw	r17,84(sp)
81116a00:	dc001415 	stw	r16,80(sp)
81116a04:	d9400615 	stw	r5,24(sp)
81116a08:	dfc01d15 	stw	ra,116(sp)
81116a0c:	df001c15 	stw	fp,112(sp)
81116a10:	dd801a15 	stw	r22,104(sp)
81116a14:	dd401915 	stw	r21,100(sp)
81116a18:	dcc01715 	stw	r19,92(sp)
81116a1c:	2021883a 	mov	r16,r4
81116a20:	d8000515 	stw	zero,20(sp)
81116a24:	2809883a 	mov	r4,r5
81116a28:	20800003 	ldbu	r2,0(r4)
81116a2c:	01e04474 	movhi	r7,33041
81116a30:	282f883a 	mov	r23,r5
81116a34:	10c03fcc 	andi	r3,r2,255
81116a38:	01400b44 	movi	r5,45
81116a3c:	39da9804 	addi	r7,r7,27232
81116a40:	3029883a 	mov	r20,r6
81116a44:	0025883a 	mov	r18,zero
81116a48:	0023883a 	mov	r17,zero
81116a4c:	28c0ba36 	bltu	r5,r3,81116d38 <_strtod_r+0x34c>
81116a50:	180690ba 	slli	r3,r3,2
81116a54:	19c7883a 	add	r3,r3,r7
81116a58:	18c00017 	ldw	r3,0(r3)
81116a5c:	1800683a 	jmp	r3
81116a60:	81116b20 	cmpeqi	r4,r16,17836
81116a64:	81116d38 	rdprs	r4,r16,17844
81116a68:	81116d38 	rdprs	r4,r16,17844
81116a6c:	81116d38 	rdprs	r4,r16,17844
81116a70:	81116d38 	rdprs	r4,r16,17844
81116a74:	81116d38 	rdprs	r4,r16,17844
81116a78:	81116d38 	rdprs	r4,r16,17844
81116a7c:	81116d38 	rdprs	r4,r16,17844
81116a80:	81116d38 	rdprs	r4,r16,17844
81116a84:	81116d24 	muli	r4,r16,17844
81116a88:	81116d24 	muli	r4,r16,17844
81116a8c:	81116d24 	muli	r4,r16,17844
81116a90:	81116d24 	muli	r4,r16,17844
81116a94:	81116d24 	muli	r4,r16,17844
81116a98:	81116d38 	rdprs	r4,r16,17844
81116a9c:	81116d38 	rdprs	r4,r16,17844
81116aa0:	81116d38 	rdprs	r4,r16,17844
81116aa4:	81116d38 	rdprs	r4,r16,17844
81116aa8:	81116d38 	rdprs	r4,r16,17844
81116aac:	81116d38 	rdprs	r4,r16,17844
81116ab0:	81116d38 	rdprs	r4,r16,17844
81116ab4:	81116d38 	rdprs	r4,r16,17844
81116ab8:	81116d38 	rdprs	r4,r16,17844
81116abc:	81116d38 	rdprs	r4,r16,17844
81116ac0:	81116d38 	rdprs	r4,r16,17844
81116ac4:	81116d38 	rdprs	r4,r16,17844
81116ac8:	81116d38 	rdprs	r4,r16,17844
81116acc:	81116d38 	rdprs	r4,r16,17844
81116ad0:	81116d38 	rdprs	r4,r16,17844
81116ad4:	81116d38 	rdprs	r4,r16,17844
81116ad8:	81116d38 	rdprs	r4,r16,17844
81116adc:	81116d38 	rdprs	r4,r16,17844
81116ae0:	81116d24 	muli	r4,r16,17844
81116ae4:	81116d38 	rdprs	r4,r16,17844
81116ae8:	81116d38 	rdprs	r4,r16,17844
81116aec:	81116d38 	rdprs	r4,r16,17844
81116af0:	81116d38 	rdprs	r4,r16,17844
81116af4:	81116d38 	rdprs	r4,r16,17844
81116af8:	81116d38 	rdprs	r4,r16,17844
81116afc:	81116d38 	rdprs	r4,r16,17844
81116b00:	81116d38 	rdprs	r4,r16,17844
81116b04:	81116d38 	rdprs	r4,r16,17844
81116b08:	81116d38 	rdprs	r4,r16,17844
81116b0c:	81116b78 	rdprs	r4,r16,17837
81116b10:	81116d38 	rdprs	r4,r16,17844
81116b14:	81116d18 	cmpnei	r4,r16,17844
81116b18:	00801244 	movi	r2,73
81116b1c:	88843526 	beq	r17,r2,81117bf4 <_strtod_r+0x1208>
81116b20:	002b883a 	mov	r21,zero
81116b24:	002d883a 	mov	r22,zero
81116b28:	a0000526 	beq	r20,zero,81116b40 <_strtod_r+0x154>
81116b2c:	d8000715 	stw	zero,28(sp)
81116b30:	a5c00015 	stw	r23,0(r20)
81116b34:	d9000717 	ldw	r4,28(sp)
81116b38:	20000126 	beq	r4,zero,81116b40 <_strtod_r+0x154>
81116b3c:	b5a0003c 	xorhi	r22,r22,32768
81116b40:	a805883a 	mov	r2,r21
81116b44:	b007883a 	mov	r3,r22
81116b48:	dfc01d17 	ldw	ra,116(sp)
81116b4c:	df001c17 	ldw	fp,112(sp)
81116b50:	ddc01b17 	ldw	r23,108(sp)
81116b54:	dd801a17 	ldw	r22,104(sp)
81116b58:	dd401917 	ldw	r21,100(sp)
81116b5c:	dd001817 	ldw	r20,96(sp)
81116b60:	dcc01717 	ldw	r19,92(sp)
81116b64:	dc801617 	ldw	r18,88(sp)
81116b68:	dc401517 	ldw	r17,84(sp)
81116b6c:	dc001417 	ldw	r16,80(sp)
81116b70:	dec01e04 	addi	sp,sp,120
81116b74:	f800283a 	ret
81116b78:	d8000715 	stw	zero,28(sp)
81116b7c:	24c00044 	addi	r19,r4,1
81116b80:	dcc00615 	stw	r19,24(sp)
81116b84:	20800043 	ldbu	r2,1(r4)
81116b88:	10c03fcc 	andi	r3,r2,255
81116b8c:	18c0201c 	xori	r3,r3,128
81116b90:	18ffe004 	addi	r3,r3,-128
81116b94:	183fe226 	beq	r3,zero,81116b20 <__reset+0xfb0f6b20>
81116b98:	11403fcc 	andi	r5,r2,255
81116b9c:	2940201c 	xori	r5,r5,128
81116ba0:	297fe004 	addi	r5,r5,-128
81116ba4:	00c00c04 	movi	r3,48
81116ba8:	28c0e526 	beq	r5,r3,81116f40 <_strtod_r+0x554>
81116bac:	dcc00815 	stw	r19,32(sp)
81116bb0:	0025883a 	mov	r18,zero
81116bb4:	10fff404 	addi	r3,r2,-48
81116bb8:	18c03fcc 	andi	r3,r3,255
81116bbc:	01000244 	movi	r4,9
81116bc0:	20c37536 	bltu	r4,r3,81117998 <_strtod_r+0xfac>
81116bc4:	dd400817 	ldw	r21,32(sp)
81116bc8:	0027883a 	mov	r19,zero
81116bcc:	0039883a 	mov	fp,zero
81116bd0:	002d883a 	mov	r22,zero
81116bd4:	01400204 	movi	r5,8
81116bd8:	2d805a16 	blt	r5,r22,81116d44 <_strtod_r+0x358>
81116bdc:	e70002a4 	muli	fp,fp,10
81116be0:	10c03fcc 	andi	r3,r2,255
81116be4:	18c0201c 	xori	r3,r3,128
81116be8:	18ffe004 	addi	r3,r3,-128
81116bec:	e0f9883a 	add	fp,fp,r3
81116bf0:	e73ff404 	addi	fp,fp,-48
81116bf4:	ad400044 	addi	r21,r21,1
81116bf8:	dd400615 	stw	r21,24(sp)
81116bfc:	a8800003 	ldbu	r2,0(r21)
81116c00:	b5800044 	addi	r22,r22,1
81116c04:	10fff404 	addi	r3,r2,-48
81116c08:	18c03fcc 	andi	r3,r3,255
81116c0c:	20fff22e 	bgeu	r4,r3,81116bd8 <__reset+0xfb0f6bd8>
81116c10:	14403fcc 	andi	r17,r2,255
81116c14:	8c40201c 	xori	r17,r17,128
81116c18:	8c7fe004 	addi	r17,r17,-128
81116c1c:	8009883a 	mov	r4,r16
81116c20:	1114c200 	call	81114c20 <_localeconv_r>
81116c24:	11400017 	ldw	r5,0(r2)
81116c28:	8009883a 	mov	r4,r16
81116c2c:	d9401315 	stw	r5,76(sp)
81116c30:	1114c200 	call	81114c20 <_localeconv_r>
81116c34:	11000017 	ldw	r4,0(r2)
81116c38:	110bc740 	call	8110bc74 <strlen>
81116c3c:	d9401317 	ldw	r5,76(sp)
81116c40:	100d883a 	mov	r6,r2
81116c44:	a809883a 	mov	r4,r21
81116c48:	111c6a40 	call	8111c6a4 <strncmp>
81116c4c:	1000ce26 	beq	r2,zero,81116f88 <_strtod_r+0x59c>
81116c50:	b013883a 	mov	r9,r22
81116c54:	000b883a 	mov	r5,zero
81116c58:	0015883a 	mov	r10,zero
81116c5c:	0017883a 	mov	r11,zero
81116c60:	00801944 	movi	r2,101
81116c64:	88807826 	beq	r17,r2,81116e48 <_strtod_r+0x45c>
81116c68:	00801144 	movi	r2,69
81116c6c:	88807626 	beq	r17,r2,81116e48 <_strtod_r+0x45c>
81116c70:	002b883a 	mov	r21,zero
81116c74:	48003d1e 	bne	r9,zero,81116d6c <_strtod_r+0x380>
81116c78:	2800391e 	bne	r5,zero,81116d60 <_strtod_r+0x374>
81116c7c:	9000381e 	bne	r18,zero,81116d60 <_strtod_r+0x374>
81116c80:	583fa71e 	bne	r11,zero,81116b20 <__reset+0xfb0f6b20>
81116c84:	00801384 	movi	r2,78
81116c88:	88800526 	beq	r17,r2,81116ca0 <_strtod_r+0x2b4>
81116c8c:	147fa20e 	bge	r2,r17,81116b18 <__reset+0xfb0f6b18>
81116c90:	00801a44 	movi	r2,105
81116c94:	8883d726 	beq	r17,r2,81117bf4 <_strtod_r+0x1208>
81116c98:	00801b84 	movi	r2,110
81116c9c:	88bfa01e 	bne	r17,r2,81116b20 <__reset+0xfb0f6b20>
81116ca0:	016044f4 	movhi	r5,33043
81116ca4:	d9000617 	ldw	r4,24(sp)
81116ca8:	294ee104 	addi	r5,r5,15236
81116cac:	01c00644 	movi	r7,25
81116cb0:	00000b06 	br	81116ce0 <_strtod_r+0x2f4>
81116cb4:	21000044 	addi	r4,r4,1
81116cb8:	20800003 	ldbu	r2,0(r4)
81116cbc:	10ffefc4 	addi	r3,r2,-65
81116cc0:	10803fcc 	andi	r2,r2,255
81116cc4:	1080201c 	xori	r2,r2,128
81116cc8:	18c03fcc 	andi	r3,r3,255
81116ccc:	10bfe004 	addi	r2,r2,-128
81116cd0:	38c00136 	bltu	r7,r3,81116cd8 <_strtod_r+0x2ec>
81116cd4:	10800804 	addi	r2,r2,32
81116cd8:	29400044 	addi	r5,r5,1
81116cdc:	11bf901e 	bne	r2,r6,81116b20 <__reset+0xfb0f6b20>
81116ce0:	29800007 	ldb	r6,0(r5)
81116ce4:	303ff31e 	bne	r6,zero,81116cb4 <__reset+0xfb0f6cb4>
81116ce8:	20800044 	addi	r2,r4,1
81116cec:	d8800615 	stw	r2,24(sp)
81116cf0:	20c00047 	ldb	r3,1(r4)
81116cf4:	00800a04 	movi	r2,40
81116cf8:	18849d26 	beq	r3,r2,81117f70 <_strtod_r+0x1584>
81116cfc:	047ffe34 	movhi	r17,65528
81116d00:	0025883a 	mov	r18,zero
81116d04:	902b883a 	mov	r21,r18
81116d08:	882d883a 	mov	r22,r17
81116d0c:	a03f8926 	beq	r20,zero,81116b34 <__reset+0xfb0f6b34>
81116d10:	ddc00617 	ldw	r23,24(sp)
81116d14:	003f8606 	br	81116b30 <__reset+0xfb0f6b30>
81116d18:	00800044 	movi	r2,1
81116d1c:	d8800715 	stw	r2,28(sp)
81116d20:	003f9606 	br	81116b7c <__reset+0xfb0f6b7c>
81116d24:	21000044 	addi	r4,r4,1
81116d28:	d9000615 	stw	r4,24(sp)
81116d2c:	20800003 	ldbu	r2,0(r4)
81116d30:	10c03fcc 	andi	r3,r2,255
81116d34:	28ff462e 	bgeu	r5,r3,81116a50 <__reset+0xfb0f6a50>
81116d38:	2027883a 	mov	r19,r4
81116d3c:	d8000715 	stw	zero,28(sp)
81116d40:	003f9506 	br	81116b98 <__reset+0xfb0f6b98>
81116d44:	9cc002a4 	muli	r19,r19,10
81116d48:	10803fcc 	andi	r2,r2,255
81116d4c:	1080201c 	xori	r2,r2,128
81116d50:	10bfe004 	addi	r2,r2,-128
81116d54:	9885883a 	add	r2,r19,r2
81116d58:	14fff404 	addi	r19,r2,-48
81116d5c:	003fa506 	br	81116bf4 <__reset+0xfb0f6bf4>
81116d60:	002b883a 	mov	r21,zero
81116d64:	002d883a 	mov	r22,zero
81116d68:	003fe806 	br	81116d0c <__reset+0xfb0f6d0c>
81116d6c:	aaabc83a 	sub	r21,r21,r10
81116d70:	b000011e 	bne	r22,zero,81116d78 <_strtod_r+0x38c>
81116d74:	482d883a 	mov	r22,r9
81116d78:	00800404 	movi	r2,16
81116d7c:	482f883a 	mov	r23,r9
81116d80:	1240010e 	bge	r2,r9,81116d88 <_strtod_r+0x39c>
81116d84:	102f883a 	mov	r23,r2
81116d88:	e009883a 	mov	r4,fp
81116d8c:	da401315 	stw	r9,76(sp)
81116d90:	111f6740 	call	8111f674 <__floatunsidf>
81116d94:	1025883a 	mov	r18,r2
81116d98:	00800244 	movi	r2,9
81116d9c:	1823883a 	mov	r17,r3
81116da0:	da401317 	ldw	r9,76(sp)
81116da4:	15c0160e 	bge	r2,r23,81116e00 <_strtod_r+0x414>
81116da8:	b8bffdc4 	addi	r2,r23,-9
81116dac:	100490fa 	slli	r2,r2,3
81116db0:	180b883a 	mov	r5,r3
81116db4:	00e044f4 	movhi	r3,33043
81116db8:	18ceac04 	addi	r3,r3,15024
81116dbc:	1885883a 	add	r2,r3,r2
81116dc0:	11800017 	ldw	r6,0(r2)
81116dc4:	11c00117 	ldw	r7,4(r2)
81116dc8:	9009883a 	mov	r4,r18
81116dcc:	11097240 	call	81109724 <__muldf3>
81116dd0:	9809883a 	mov	r4,r19
81116dd4:	1025883a 	mov	r18,r2
81116dd8:	1823883a 	mov	r17,r3
81116ddc:	111f6740 	call	8111f674 <__floatunsidf>
81116de0:	9009883a 	mov	r4,r18
81116de4:	880b883a 	mov	r5,r17
81116de8:	100d883a 	mov	r6,r2
81116dec:	180f883a 	mov	r7,r3
81116df0:	111d8300 	call	8111d830 <__adddf3>
81116df4:	da401317 	ldw	r9,76(sp)
81116df8:	1025883a 	mov	r18,r2
81116dfc:	1823883a 	mov	r17,r3
81116e00:	008003c4 	movi	r2,15
81116e04:	12407b16 	blt	r2,r9,81116ff4 <_strtod_r+0x608>
81116e08:	a83fbe26 	beq	r21,zero,81116d04 <__reset+0xfb0f6d04>
81116e0c:	0543670e 	bge	zero,r21,81117bac <_strtod_r+0x11c0>
81116e10:	00c00584 	movi	r3,22
81116e14:	1d42e816 	blt	r3,r21,811179b8 <_strtod_r+0xfcc>
81116e18:	a82a90fa 	slli	r21,r21,3
81116e1c:	00a044f4 	movhi	r2,33043
81116e20:	108eac04 	addi	r2,r2,15024
81116e24:	1545883a 	add	r2,r2,r21
81116e28:	11000017 	ldw	r4,0(r2)
81116e2c:	11400117 	ldw	r5,4(r2)
81116e30:	900d883a 	mov	r6,r18
81116e34:	880f883a 	mov	r7,r17
81116e38:	11097240 	call	81109724 <__muldf3>
81116e3c:	102b883a 	mov	r21,r2
81116e40:	182d883a 	mov	r22,r3
81116e44:	003fb106 	br	81116d0c <__reset+0xfb0f6d0c>
81116e48:	4801b526 	beq	r9,zero,81117520 <_strtod_r+0xb34>
81116e4c:	ddc00617 	ldw	r23,24(sp)
81116e50:	00c00ac4 	movi	r3,43
81116e54:	b8800044 	addi	r2,r23,1
81116e58:	d8800615 	stw	r2,24(sp)
81116e5c:	b8800047 	ldb	r2,1(r23)
81116e60:	10c1e926 	beq	r2,r3,81117608 <_strtod_r+0xc1c>
81116e64:	00c00b44 	movi	r3,45
81116e68:	10c1ec26 	beq	r2,r3,8111761c <_strtod_r+0xc30>
81116e6c:	1023883a 	mov	r17,r2
81116e70:	0019883a 	mov	r12,zero
81116e74:	88bff404 	addi	r2,r17,-48
81116e78:	00c00244 	movi	r3,9
81116e7c:	1881b736 	bltu	r3,r2,8111755c <_strtod_r+0xb70>
81116e80:	00800c04 	movi	r2,48
81116e84:	8880071e 	bne	r17,r2,81116ea4 <_strtod_r+0x4b8>
81116e88:	d8800617 	ldw	r2,24(sp)
81116e8c:	8807883a 	mov	r3,r17
81116e90:	10800044 	addi	r2,r2,1
81116e94:	d8800615 	stw	r2,24(sp)
81116e98:	14400007 	ldb	r17,0(r2)
81116e9c:	10800044 	addi	r2,r2,1
81116ea0:	88fffc26 	beq	r17,r3,81116e94 <__reset+0xfb0f6e94>
81116ea4:	88bff3c4 	addi	r2,r17,-49
81116ea8:	00c00204 	movi	r3,8
81116eac:	18bf7036 	bltu	r3,r2,81116c70 <__reset+0xfb0f6c70>
81116eb0:	db800617 	ldw	r14,24(sp)
81116eb4:	88bff404 	addi	r2,r17,-48
81116eb8:	03400244 	movi	r13,9
81116ebc:	71c00044 	addi	r7,r14,1
81116ec0:	d9c00615 	stw	r7,24(sp)
81116ec4:	74400043 	ldbu	r17,1(r14)
81116ec8:	88fff404 	addi	r3,r17,-48
81116ecc:	8c403fcc 	andi	r17,r17,255
81116ed0:	8c40201c 	xori	r17,r17,128
81116ed4:	18c03fcc 	andi	r3,r3,255
81116ed8:	8c7fe004 	addi	r17,r17,-128
81116edc:	68c00e36 	bltu	r13,r3,81116f18 <_strtod_r+0x52c>
81116ee0:	71000084 	addi	r4,r14,2
81116ee4:	d9000615 	stw	r4,24(sp)
81116ee8:	108002a4 	muli	r2,r2,10
81116eec:	21800003 	ldbu	r6,0(r4)
81116ef0:	200f883a 	mov	r7,r4
81116ef4:	1463883a 	add	r17,r2,r17
81116ef8:	30fff404 	addi	r3,r6,-48
81116efc:	88bff404 	addi	r2,r17,-48
81116f00:	34403fcc 	andi	r17,r6,255
81116f04:	8c40201c 	xori	r17,r17,128
81116f08:	18c03fcc 	andi	r3,r3,255
81116f0c:	8c7fe004 	addi	r17,r17,-128
81116f10:	21000044 	addi	r4,r4,1
81116f14:	68fff32e 	bgeu	r13,r3,81116ee4 <__reset+0xfb0f6ee4>
81116f18:	3b8fc83a 	sub	r7,r7,r14
81116f1c:	00c00204 	movi	r3,8
81116f20:	19c29716 	blt	r3,r7,81117980 <_strtod_r+0xf94>
81116f24:	102b883a 	mov	r21,r2
81116f28:	009387c4 	movi	r2,19999
81116f2c:	1540010e 	bge	r2,r21,81116f34 <_strtod_r+0x548>
81116f30:	102b883a 	mov	r21,r2
81116f34:	603f4f26 	beq	r12,zero,81116c74 <__reset+0xfb0f6c74>
81116f38:	056bc83a 	sub	r21,zero,r21
81116f3c:	003f4d06 	br	81116c74 <__reset+0xfb0f6c74>
81116f40:	98800047 	ldb	r2,1(r19)
81116f44:	00c01604 	movi	r3,88
81116f48:	10c1de26 	beq	r2,r3,811176c4 <_strtod_r+0xcd8>
81116f4c:	00c01e04 	movi	r3,120
81116f50:	10c1dc26 	beq	r2,r3,811176c4 <_strtod_r+0xcd8>
81116f54:	98c00044 	addi	r3,r19,1
81116f58:	1827883a 	mov	r19,r3
81116f5c:	d8c00615 	stw	r3,24(sp)
81116f60:	18c00044 	addi	r3,r3,1
81116f64:	18bfffc3 	ldbu	r2,-1(r3)
81116f68:	11003fcc 	andi	r4,r2,255
81116f6c:	2100201c 	xori	r4,r4,128
81116f70:	213fe004 	addi	r4,r4,-128
81116f74:	217ff826 	beq	r4,r5,81116f58 <__reset+0xfb0f6f58>
81116f78:	203f7926 	beq	r4,zero,81116d60 <__reset+0xfb0f6d60>
81116f7c:	dcc00815 	stw	r19,32(sp)
81116f80:	04800044 	movi	r18,1
81116f84:	003f0b06 	br	81116bb4 <__reset+0xfb0f6bb4>
81116f88:	8009883a 	mov	r4,r16
81116f8c:	1114c200 	call	81114c20 <_localeconv_r>
81116f90:	11000017 	ldw	r4,0(r2)
81116f94:	110bc740 	call	8110bc74 <strlen>
81116f98:	d8c00617 	ldw	r3,24(sp)
81116f9c:	1885883a 	add	r2,r3,r2
81116fa0:	d8800615 	stw	r2,24(sp)
81116fa4:	14400007 	ldb	r17,0(r2)
81116fa8:	b001881e 	bne	r22,zero,811175cc <_strtod_r+0xbe0>
81116fac:	00c00c04 	movi	r3,48
81116fb0:	88c3391e 	bne	r17,r3,81117c98 <_strtod_r+0x12ac>
81116fb4:	10c00044 	addi	r3,r2,1
81116fb8:	8809883a 	mov	r4,r17
81116fbc:	d8c00615 	stw	r3,24(sp)
81116fc0:	1c400007 	ldb	r17,0(r3)
81116fc4:	188bc83a 	sub	r5,r3,r2
81116fc8:	18c00044 	addi	r3,r3,1
81116fcc:	893ffb26 	beq	r17,r4,81116fbc <__reset+0xfb0f6fbc>
81116fd0:	88bff3c4 	addi	r2,r17,-49
81116fd4:	00c00204 	movi	r3,8
81116fd8:	1882e72e 	bgeu	r3,r2,81117b78 <_strtod_r+0x118c>
81116fdc:	00801944 	movi	r2,101
81116fe0:	88814d26 	beq	r17,r2,81117518 <_strtod_r+0xb2c>
81116fe4:	0013883a 	mov	r9,zero
81116fe8:	0015883a 	mov	r10,zero
81116fec:	02c00044 	movi	r11,1
81116ff0:	003f1d06 	br	81116c68 <__reset+0xfb0f6c68>
81116ff4:	4defc83a 	sub	r23,r9,r23
81116ff8:	bd6f883a 	add	r23,r23,r21
81116ffc:	05c21e0e 	bge	zero,r23,81117878 <_strtod_r+0xe8c>
81117000:	b88003cc 	andi	r2,r23,15
81117004:	10000d26 	beq	r2,zero,8111703c <_strtod_r+0x650>
81117008:	100490fa 	slli	r2,r2,3
8111700c:	00e044f4 	movhi	r3,33043
81117010:	18ceac04 	addi	r3,r3,15024
81117014:	1885883a 	add	r2,r3,r2
81117018:	11000017 	ldw	r4,0(r2)
8111701c:	11400117 	ldw	r5,4(r2)
81117020:	900d883a 	mov	r6,r18
81117024:	880f883a 	mov	r7,r17
81117028:	da401315 	stw	r9,76(sp)
8111702c:	11097240 	call	81109724 <__muldf3>
81117030:	da401317 	ldw	r9,76(sp)
81117034:	1025883a 	mov	r18,r2
81117038:	1823883a 	mov	r17,r3
8111703c:	023ffc04 	movi	r8,-16
81117040:	ba10703a 	and	r8,r23,r8
81117044:	40003c26 	beq	r8,zero,81117138 <_strtod_r+0x74c>
81117048:	00804d04 	movi	r2,308
8111704c:	1201cd16 	blt	r2,r8,81117784 <_strtod_r+0xd98>
81117050:	4011d13a 	srai	r8,r8,4
81117054:	03000044 	movi	r12,1
81117058:	62037c0e 	bge	r12,r8,81117e4c <_strtod_r+0x1460>
8111705c:	012044f4 	movhi	r4,33043
81117060:	210ea204 	addi	r4,r4,14984
81117064:	2015883a 	mov	r10,r4
81117068:	0027883a 	mov	r19,zero
8111706c:	d9000915 	stw	r4,36(sp)
81117070:	9005883a 	mov	r2,r18
81117074:	8807883a 	mov	r3,r17
81117078:	dc000c15 	stw	r16,48(sp)
8111707c:	dc800e15 	stw	r18,56(sp)
81117080:	9821883a 	mov	r16,r19
81117084:	0009883a 	mov	r4,zero
81117088:	8827883a 	mov	r19,r17
8111708c:	602f883a 	mov	r23,r12
81117090:	da400a15 	stw	r9,40(sp)
81117094:	5025883a 	mov	r18,r10
81117098:	4023883a 	mov	r17,r8
8111709c:	8980004c 	andi	r6,r17,1
811170a0:	30000626 	beq	r6,zero,811170bc <_strtod_r+0x6d0>
811170a4:	91800017 	ldw	r6,0(r18)
811170a8:	91c00117 	ldw	r7,4(r18)
811170ac:	1009883a 	mov	r4,r2
811170b0:	180b883a 	mov	r5,r3
811170b4:	11097240 	call	81109724 <__muldf3>
811170b8:	01000044 	movi	r4,1
811170bc:	8823d07a 	srai	r17,r17,1
811170c0:	84000044 	addi	r16,r16,1
811170c4:	94800204 	addi	r18,r18,8
811170c8:	8dfff41e 	bne	r17,r23,8111709c <__reset+0xfb0f709c>
811170cc:	21003fcc 	andi	r4,r4,255
811170d0:	9823883a 	mov	r17,r19
811170d4:	da400a17 	ldw	r9,40(sp)
811170d8:	8027883a 	mov	r19,r16
811170dc:	dc800e17 	ldw	r18,56(sp)
811170e0:	dc000c17 	ldw	r16,48(sp)
811170e4:	2003b11e 	bne	r4,zero,81117fac <_strtod_r+0x15c0>
811170e8:	981690fa 	slli	r11,r19,3
811170ec:	d8800917 	ldw	r2,36(sp)
811170f0:	01ff2c34 	movhi	r7,64688
811170f4:	900d883a 	mov	r6,r18
811170f8:	12ef883a 	add	r23,r2,r11
811170fc:	b9000017 	ldw	r4,0(r23)
81117100:	b9400117 	ldw	r5,4(r23)
81117104:	89cf883a 	add	r7,r17,r7
81117108:	da401315 	stw	r9,76(sp)
8111710c:	11097240 	call	81109724 <__muldf3>
81117110:	1025883a 	mov	r18,r2
81117114:	011f2834 	movhi	r4,31904
81117118:	189ffc2c 	andhi	r2,r3,32752
8111711c:	da401317 	ldw	r9,76(sp)
81117120:	20819836 	bltu	r4,r2,81117784 <_strtod_r+0xd98>
81117124:	011f2434 	movhi	r4,31888
81117128:	2083382e 	bgeu	r4,r2,81117e0c <_strtod_r+0x1420>
8111712c:	045ffc34 	movhi	r17,32752
81117130:	8c7fffc4 	addi	r17,r17,-1
81117134:	04bfffc4 	movi	r18,-1
81117138:	d8000915 	stw	zero,36(sp)
8111713c:	d9400817 	ldw	r5,32(sp)
81117140:	df000015 	stw	fp,0(sp)
81117144:	480f883a 	mov	r7,r9
81117148:	b00d883a 	mov	r6,r22
8111714c:	8009883a 	mov	r4,r16
81117150:	11153040 	call	81115304 <__s2b>
81117154:	d8800815 	stw	r2,32(sp)
81117158:	10018a26 	beq	r2,zero,81117784 <_strtod_r+0xd98>
8111715c:	a807d7fa 	srai	r3,r21,31
81117160:	0545c83a 	sub	r2,zero,r21
81117164:	dd400a15 	stw	r21,40(sp)
81117168:	1886703a 	and	r3,r3,r2
8111716c:	d8c00c15 	stw	r3,48(sp)
81117170:	a8013516 	blt	r21,zero,81117648 <_strtod_r+0xc5c>
81117174:	d9400817 	ldw	r5,32(sp)
81117178:	0011883a 	mov	r8,zero
8111717c:	0027883a 	mov	r19,zero
81117180:	29400304 	addi	r5,r5,12
81117184:	d9400f15 	stw	r5,60(sp)
81117188:	402b883a 	mov	r21,r8
8111718c:	dd001215 	stw	r20,72(sp)
81117190:	d8800817 	ldw	r2,32(sp)
81117194:	8009883a 	mov	r4,r16
81117198:	11400117 	ldw	r5,4(r2)
8111719c:	11151140 	call	81115114 <_Balloc>
811171a0:	1029883a 	mov	r20,r2
811171a4:	10012d26 	beq	r2,zero,8111765c <_strtod_r+0xc70>
811171a8:	d8c00817 	ldw	r3,32(sp)
811171ac:	d9400f17 	ldw	r5,60(sp)
811171b0:	11000304 	addi	r4,r2,12
811171b4:	19800417 	ldw	r6,16(r3)
811171b8:	31800084 	addi	r6,r6,2
811171bc:	318d883a 	add	r6,r6,r6
811171c0:	318d883a 	add	r6,r6,r6
811171c4:	110b26c0 	call	8110b26c <memcpy>
811171c8:	d9000204 	addi	r4,sp,8
811171cc:	d9000015 	stw	r4,0(sp)
811171d0:	d9c00404 	addi	r7,sp,16
811171d4:	900b883a 	mov	r5,r18
811171d8:	880d883a 	mov	r6,r17
811171dc:	8009883a 	mov	r4,r16
811171e0:	1115da80 	call	81115da8 <__d2b>
811171e4:	d8800515 	stw	r2,20(sp)
811171e8:	dc801115 	stw	r18,68(sp)
811171ec:	dc401015 	stw	r17,64(sp)
811171f0:	10027c26 	beq	r2,zero,81117be4 <_strtod_r+0x11f8>
811171f4:	01400044 	movi	r5,1
811171f8:	8009883a 	mov	r4,r16
811171fc:	11155200 	call	81115520 <__i2b>
81117200:	1027883a 	mov	r19,r2
81117204:	10011526 	beq	r2,zero,8111765c <_strtod_r+0xc70>
81117208:	d8800417 	ldw	r2,16(sp)
8111720c:	1000c816 	blt	r2,zero,81117530 <_strtod_r+0xb44>
81117210:	d9400c17 	ldw	r5,48(sp)
81117214:	d9000a17 	ldw	r4,40(sp)
81117218:	28ad883a 	add	r22,r5,r2
8111721c:	d9400917 	ldw	r5,36(sp)
81117220:	df000217 	ldw	fp,8(sp)
81117224:	05ff0084 	movi	r23,-1022
81117228:	1147c83a 	sub	r3,r2,r5
8111722c:	1f07883a 	add	r3,r3,fp
81117230:	00800d84 	movi	r2,54
81117234:	18ffffc4 	addi	r3,r3,-1
81117238:	1739c83a 	sub	fp,r2,fp
8111723c:	1dc0a50e 	bge	r3,r23,811174d4 <_strtod_r+0xae8>
81117240:	b8efc83a 	sub	r23,r23,r3
81117244:	008007c4 	movi	r2,31
81117248:	e5f9c83a 	sub	fp,fp,r23
8111724c:	15c0bc16 	blt	r2,r23,81117540 <_strtod_r+0xb54>
81117250:	00800044 	movi	r2,1
81117254:	15c4983a 	sll	r2,r2,r23
81117258:	d8000b15 	stw	zero,44(sp)
8111725c:	d8800d15 	stw	r2,52(sp)
81117260:	2707883a 	add	r3,r4,fp
81117264:	d9000917 	ldw	r4,36(sp)
81117268:	b739883a 	add	fp,r22,fp
8111726c:	20ef883a 	add	r23,r4,r3
81117270:	b009883a 	mov	r4,r22
81117274:	e580010e 	bge	fp,r22,8111727c <_strtod_r+0x890>
81117278:	e009883a 	mov	r4,fp
8111727c:	b805883a 	mov	r2,r23
81117280:	25c0010e 	bge	r4,r23,81117288 <_strtod_r+0x89c>
81117284:	2005883a 	mov	r2,r4
81117288:	0080030e 	bge	zero,r2,81117298 <_strtod_r+0x8ac>
8111728c:	e0b9c83a 	sub	fp,fp,r2
81117290:	b8afc83a 	sub	r23,r23,r2
81117294:	b0adc83a 	sub	r22,r22,r2
81117298:	d9400c17 	ldw	r5,48(sp)
8111729c:	28001126 	beq	r5,zero,811172e4 <_strtod_r+0x8f8>
811172a0:	280d883a 	mov	r6,r5
811172a4:	8009883a 	mov	r4,r16
811172a8:	980b883a 	mov	r5,r19
811172ac:	11157540 	call	81115754 <__pow5mult>
811172b0:	1027883a 	mov	r19,r2
811172b4:	1000e926 	beq	r2,zero,8111765c <_strtod_r+0xc70>
811172b8:	d9800517 	ldw	r6,20(sp)
811172bc:	100b883a 	mov	r5,r2
811172c0:	8009883a 	mov	r4,r16
811172c4:	111555c0 	call	8111555c <__multiply>
811172c8:	1000e426 	beq	r2,zero,8111765c <_strtod_r+0xc70>
811172cc:	d9400517 	ldw	r5,20(sp)
811172d0:	8009883a 	mov	r4,r16
811172d4:	d8801315 	stw	r2,76(sp)
811172d8:	11151bc0 	call	811151bc <_Bfree>
811172dc:	d8801317 	ldw	r2,76(sp)
811172e0:	d8800515 	stw	r2,20(sp)
811172e4:	0700060e 	bge	zero,fp,81117300 <_strtod_r+0x914>
811172e8:	d9400517 	ldw	r5,20(sp)
811172ec:	e00d883a 	mov	r6,fp
811172f0:	8009883a 	mov	r4,r16
811172f4:	11158940 	call	81115894 <__lshift>
811172f8:	d8800515 	stw	r2,20(sp)
811172fc:	10023926 	beq	r2,zero,81117be4 <_strtod_r+0x11f8>
81117300:	d8800a17 	ldw	r2,40(sp)
81117304:	10000626 	beq	r2,zero,81117320 <_strtod_r+0x934>
81117308:	d9800a17 	ldw	r6,40(sp)
8111730c:	a00b883a 	mov	r5,r20
81117310:	8009883a 	mov	r4,r16
81117314:	11157540 	call	81115754 <__pow5mult>
81117318:	1029883a 	mov	r20,r2
8111731c:	1000cf26 	beq	r2,zero,8111765c <_strtod_r+0xc70>
81117320:	05c0060e 	bge	zero,r23,8111733c <_strtod_r+0x950>
81117324:	a00b883a 	mov	r5,r20
81117328:	b80d883a 	mov	r6,r23
8111732c:	8009883a 	mov	r4,r16
81117330:	11158940 	call	81115894 <__lshift>
81117334:	1029883a 	mov	r20,r2
81117338:	1000c826 	beq	r2,zero,8111765c <_strtod_r+0xc70>
8111733c:	0580060e 	bge	zero,r22,81117358 <_strtod_r+0x96c>
81117340:	980b883a 	mov	r5,r19
81117344:	b00d883a 	mov	r6,r22
81117348:	8009883a 	mov	r4,r16
8111734c:	11158940 	call	81115894 <__lshift>
81117350:	1027883a 	mov	r19,r2
81117354:	1000c126 	beq	r2,zero,8111765c <_strtod_r+0xc70>
81117358:	d9400517 	ldw	r5,20(sp)
8111735c:	a00d883a 	mov	r6,r20
81117360:	8009883a 	mov	r4,r16
81117364:	1115a3c0 	call	81115a3c <__mdiff>
81117368:	102b883a 	mov	r21,r2
8111736c:	1000bb26 	beq	r2,zero,8111765c <_strtod_r+0xc70>
81117370:	10c00317 	ldw	r3,12(r2)
81117374:	980b883a 	mov	r5,r19
81117378:	10000315 	stw	zero,12(r2)
8111737c:	1009883a 	mov	r4,r2
81117380:	d8c00e15 	stw	r3,56(sp)
81117384:	11159dc0 	call	811159dc <__mcmp>
81117388:	10027616 	blt	r2,zero,81117d64 <_strtod_r+0x1378>
8111738c:	10024426 	beq	r2,zero,81117ca0 <_strtod_r+0x12b4>
81117390:	980b883a 	mov	r5,r19
81117394:	a809883a 	mov	r4,r21
81117398:	1115ef40 	call	81115ef4 <__ratio>
8111739c:	000d883a 	mov	r6,zero
811173a0:	01d00034 	movhi	r7,16384
811173a4:	1009883a 	mov	r4,r2
811173a8:	180b883a 	mov	r5,r3
811173ac:	102f883a 	mov	r23,r2
811173b0:	182d883a 	mov	r22,r3
811173b4:	111eb280 	call	8111eb28 <__ledf2>
811173b8:	00804a16 	blt	zero,r2,811174e4 <_strtod_r+0xaf8>
811173bc:	d9400e17 	ldw	r5,56(sp)
811173c0:	28006b26 	beq	r5,zero,81117570 <_strtod_r+0xb84>
811173c4:	058ffc34 	movhi	r22,16368
811173c8:	d8000b15 	stw	zero,44(sp)
811173cc:	d8000d15 	stw	zero,52(sp)
811173d0:	b02f883a 	mov	r23,r22
811173d4:	8f1ffc2c 	andhi	fp,r17,32752
811173d8:	009ff834 	movhi	r2,32736
811173dc:	e080cd26 	beq	fp,r2,81117714 <_strtod_r+0xd28>
811173e0:	d9400917 	ldw	r5,36(sp)
811173e4:	28001a26 	beq	r5,zero,81117450 <_strtod_r+0xa64>
811173e8:	0081a834 	movhi	r2,1696
811173ec:	17001836 	bltu	r2,fp,81117450 <_strtod_r+0xa64>
811173f0:	d9000d17 	ldw	r4,52(sp)
811173f4:	01d07834 	movhi	r7,16864
811173f8:	39ffffc4 	addi	r7,r7,-1
811173fc:	01bff034 	movhi	r6,65472
81117400:	b80b883a 	mov	r5,r23
81117404:	111eb280 	call	8111eb28 <__ledf2>
81117408:	00800e16 	blt	zero,r2,81117444 <_strtod_r+0xa58>
8111740c:	d9000d17 	ldw	r4,52(sp)
81117410:	b80b883a 	mov	r5,r23
81117414:	111c95c0 	call	8111c95c <__fixunsdfsi>
81117418:	10018126 	beq	r2,zero,81117a20 <_strtod_r+0x1034>
8111741c:	1009883a 	mov	r4,r2
81117420:	111f6740 	call	8111f674 <__floatunsidf>
81117424:	d8800d15 	stw	r2,52(sp)
81117428:	182f883a 	mov	r23,r3
8111742c:	d8800e17 	ldw	r2,56(sp)
81117430:	1001791e 	bne	r2,zero,81117a18 <_strtod_r+0x102c>
81117434:	ba20003c 	xorhi	r8,r23,32768
81117438:	d8c00d17 	ldw	r3,52(sp)
8111743c:	402d883a 	mov	r22,r8
81117440:	d8c00b15 	stw	r3,44(sp)
81117444:	0081ac34 	movhi	r2,1712
81117448:	b091883a 	add	r8,r22,r2
8111744c:	472dc83a 	sub	r22,r8,fp
81117450:	9009883a 	mov	r4,r18
81117454:	880b883a 	mov	r5,r17
81117458:	1115c380 	call	81115c38 <__ulp>
8111745c:	d9000b17 	ldw	r4,44(sp)
81117460:	b00b883a 	mov	r5,r22
81117464:	100d883a 	mov	r6,r2
81117468:	180f883a 	mov	r7,r3
8111746c:	11097240 	call	81109724 <__muldf3>
81117470:	900d883a 	mov	r6,r18
81117474:	880f883a 	mov	r7,r17
81117478:	1009883a 	mov	r4,r2
8111747c:	180b883a 	mov	r5,r3
81117480:	111d8300 	call	8111d830 <__adddf3>
81117484:	1025883a 	mov	r18,r2
81117488:	1823883a 	mov	r17,r3
8111748c:	182d883a 	mov	r22,r3
81117490:	d9000917 	ldw	r4,36(sp)
81117494:	2000021e 	bne	r4,zero,811174a0 <_strtod_r+0xab4>
81117498:	b09ffc2c 	andhi	r2,r22,32752
8111749c:	e080be26 	beq	fp,r2,81117798 <_strtod_r+0xdac>
811174a0:	d9400517 	ldw	r5,20(sp)
811174a4:	8009883a 	mov	r4,r16
811174a8:	11151bc0 	call	811151bc <_Bfree>
811174ac:	a00b883a 	mov	r5,r20
811174b0:	8009883a 	mov	r4,r16
811174b4:	11151bc0 	call	811151bc <_Bfree>
811174b8:	980b883a 	mov	r5,r19
811174bc:	8009883a 	mov	r4,r16
811174c0:	11151bc0 	call	811151bc <_Bfree>
811174c4:	a80b883a 	mov	r5,r21
811174c8:	8009883a 	mov	r4,r16
811174cc:	11151bc0 	call	811151bc <_Bfree>
811174d0:	003f2f06 	br	81117190 <__reset+0xfb0f7190>
811174d4:	00c00044 	movi	r3,1
811174d8:	d8000b15 	stw	zero,44(sp)
811174dc:	d8c00d15 	stw	r3,52(sp)
811174e0:	003f5f06 	br	81117260 <__reset+0xfb0f7260>
811174e4:	b809883a 	mov	r4,r23
811174e8:	000d883a 	mov	r6,zero
811174ec:	01cff834 	movhi	r7,16352
811174f0:	b00b883a 	mov	r5,r22
811174f4:	11097240 	call	81109724 <__muldf3>
811174f8:	d9000e17 	ldw	r4,56(sp)
811174fc:	d8800d15 	stw	r2,52(sp)
81117500:	182f883a 	mov	r23,r3
81117504:	2000181e 	bne	r4,zero,81117568 <_strtod_r+0xb7c>
81117508:	1a20003c 	xorhi	r8,r3,32768
8111750c:	d8800b15 	stw	r2,44(sp)
81117510:	402d883a 	mov	r22,r8
81117514:	003faf06 	br	811173d4 <__reset+0xfb0f73d4>
81117518:	0015883a 	mov	r10,zero
8111751c:	02c00044 	movi	r11,1
81117520:	2800011e 	bne	r5,zero,81117528 <_strtod_r+0xb3c>
81117524:	903d7e26 	beq	r18,zero,81116b20 <__reset+0xfb0f6b20>
81117528:	0013883a 	mov	r9,zero
8111752c:	003e4706 	br	81116e4c <__reset+0xfb0f6e4c>
81117530:	d8c00a17 	ldw	r3,40(sp)
81117534:	dd800c17 	ldw	r22,48(sp)
81117538:	1889c83a 	sub	r4,r3,r2
8111753c:	003f3706 	br	8111721c <__reset+0xfb0f721c>
81117540:	00bef884 	movi	r2,-1054
81117544:	05c00044 	movi	r23,1
81117548:	10c5c83a 	sub	r2,r2,r3
8111754c:	b884983a 	sll	r2,r23,r2
81117550:	ddc00d15 	stw	r23,52(sp)
81117554:	d8800b15 	stw	r2,44(sp)
81117558:	003f4106 	br	81117260 <__reset+0xfb0f7260>
8111755c:	ddc00615 	stw	r23,24(sp)
81117560:	002b883a 	mov	r21,zero
81117564:	003dc306 	br	81116c74 <__reset+0xfb0f6c74>
81117568:	1811883a 	mov	r8,r3
8111756c:	003fe706 	br	8111750c <__reset+0xfb0f750c>
81117570:	90002e1e 	bne	r18,zero,8111762c <_strtod_r+0xc40>
81117574:	00c00434 	movhi	r3,16
81117578:	18ffffc4 	addi	r3,r3,-1
8111757c:	88c4703a 	and	r2,r17,r3
81117580:	10002c1e 	bne	r2,zero,81117634 <_strtod_r+0xc48>
81117584:	000d883a 	mov	r6,zero
81117588:	01cffc34 	movhi	r7,16368
8111758c:	b809883a 	mov	r4,r23
81117590:	b00b883a 	mov	r5,r22
81117594:	111eb280 	call	8111eb28 <__ledf2>
81117598:	10021716 	blt	r2,zero,81117df8 <_strtod_r+0x140c>
8111759c:	b809883a 	mov	r4,r23
811175a0:	b00b883a 	mov	r5,r22
811175a4:	000d883a 	mov	r6,zero
811175a8:	01cff834 	movhi	r7,16352
811175ac:	11097240 	call	81109724 <__muldf3>
811175b0:	d8800d15 	stw	r2,52(sp)
811175b4:	182f883a 	mov	r23,r3
811175b8:	102d883a 	mov	r22,r2
811175bc:	1a20003c 	xorhi	r8,r3,32768
811175c0:	dd800b15 	stw	r22,44(sp)
811175c4:	402d883a 	mov	r22,r8
811175c8:	003f8206 	br	811173d4 <__reset+0xfb0f73d4>
811175cc:	b013883a 	mov	r9,r22
811175d0:	000b883a 	mov	r5,zero
811175d4:	0015883a 	mov	r10,zero
811175d8:	893ff404 	addi	r4,r17,-48
811175dc:	00800244 	movi	r2,9
811175e0:	11001036 	bltu	r2,r4,81117624 <_strtod_r+0xc38>
811175e4:	28c00044 	addi	r3,r5,1
811175e8:	2023883a 	mov	r17,r4
811175ec:	20014d1e 	bne	r4,zero,81117b24 <_strtod_r+0x1138>
811175f0:	d9800617 	ldw	r6,24(sp)
811175f4:	180b883a 	mov	r5,r3
811175f8:	30800044 	addi	r2,r6,1
811175fc:	d8800615 	stw	r2,24(sp)
81117600:	34400047 	ldb	r17,1(r6)
81117604:	003ff406 	br	811175d8 <__reset+0xfb0f75d8>
81117608:	0019883a 	mov	r12,zero
8111760c:	b8800084 	addi	r2,r23,2
81117610:	d8800615 	stw	r2,24(sp)
81117614:	bc400087 	ldb	r17,2(r23)
81117618:	003e1606 	br	81116e74 <__reset+0xfb0f6e74>
8111761c:	03000044 	movi	r12,1
81117620:	003ffa06 	br	8111760c <__reset+0xfb0f760c>
81117624:	02c00044 	movi	r11,1
81117628:	003d8d06 	br	81116c60 <__reset+0xfb0f6c60>
8111762c:	00800044 	movi	r2,1
81117630:	9080fe26 	beq	r18,r2,81117a2c <_strtod_r+0x1040>
81117634:	d8000b15 	stw	zero,44(sp)
81117638:	05affc34 	movhi	r22,49136
8111763c:	d8000d15 	stw	zero,52(sp)
81117640:	05cffc34 	movhi	r23,16368
81117644:	003f6306 	br	811173d4 <__reset+0xfb0f73d4>
81117648:	d8000a15 	stw	zero,40(sp)
8111764c:	003ec906 	br	81117174 <__reset+0xfb0f7174>
81117650:	d9001117 	ldw	r4,68(sp)
81117654:	00bfffc4 	movi	r2,-1
81117658:	2080461e 	bne	r4,r2,81117774 <_strtod_r+0xd88>
8111765c:	dd000a15 	stw	r20,40(sp)
81117660:	dd001217 	ldw	r20,72(sp)
81117664:	a811883a 	mov	r8,r21
81117668:	d8800517 	ldw	r2,20(sp)
8111766c:	00c00884 	movi	r3,34
81117670:	80c00015 	stw	r3,0(r16)
81117674:	002b883a 	mov	r21,zero
81117678:	059ffc34 	movhi	r22,32752
8111767c:	100b883a 	mov	r5,r2
81117680:	8009883a 	mov	r4,r16
81117684:	da001315 	stw	r8,76(sp)
81117688:	11151bc0 	call	811151bc <_Bfree>
8111768c:	d9400a17 	ldw	r5,40(sp)
81117690:	8009883a 	mov	r4,r16
81117694:	11151bc0 	call	811151bc <_Bfree>
81117698:	980b883a 	mov	r5,r19
8111769c:	8009883a 	mov	r4,r16
811176a0:	11151bc0 	call	811151bc <_Bfree>
811176a4:	d9400817 	ldw	r5,32(sp)
811176a8:	8009883a 	mov	r4,r16
811176ac:	11151bc0 	call	811151bc <_Bfree>
811176b0:	da001317 	ldw	r8,76(sp)
811176b4:	8009883a 	mov	r4,r16
811176b8:	400b883a 	mov	r5,r8
811176bc:	11151bc0 	call	811151bc <_Bfree>
811176c0:	003d9206 	br	81116d0c <__reset+0xfb0f6d0c>
811176c4:	d8c00717 	ldw	r3,28(sp)
811176c8:	d8800504 	addi	r2,sp,20
811176cc:	01a044f4 	movhi	r6,33043
811176d0:	318ee704 	addi	r6,r6,15260
811176d4:	d8c00115 	stw	r3,4(sp)
811176d8:	d8800015 	stw	r2,0(sp)
811176dc:	d9c00404 	addi	r7,sp,16
811176e0:	d9400604 	addi	r5,sp,24
811176e4:	8009883a 	mov	r4,r16
811176e8:	111bc180 	call	8111bc18 <__gethex>
811176ec:	154001cc 	andi	r21,r2,7
811176f0:	a83d9b26 	beq	r21,zero,81116d60 <__reset+0xfb0f6d60>
811176f4:	00c00184 	movi	r3,6
811176f8:	a8c0d61e 	bne	r21,r3,81117a54 <_strtod_r+0x1068>
811176fc:	9cc00044 	addi	r19,r19,1
81117700:	dcc00615 	stw	r19,24(sp)
81117704:	002b883a 	mov	r21,zero
81117708:	002d883a 	mov	r22,zero
8111770c:	d8000715 	stw	zero,28(sp)
81117710:	003d7e06 	br	81116d0c <__reset+0xfb0f6d0c>
81117714:	00bf2c34 	movhi	r2,64688
81117718:	88a3883a 	add	r17,r17,r2
8111771c:	9009883a 	mov	r4,r18
81117720:	880b883a 	mov	r5,r17
81117724:	1115c380 	call	81115c38 <__ulp>
81117728:	d9000b17 	ldw	r4,44(sp)
8111772c:	100d883a 	mov	r6,r2
81117730:	180f883a 	mov	r7,r3
81117734:	b00b883a 	mov	r5,r22
81117738:	11097240 	call	81109724 <__muldf3>
8111773c:	900d883a 	mov	r6,r18
81117740:	180b883a 	mov	r5,r3
81117744:	880f883a 	mov	r7,r17
81117748:	1009883a 	mov	r4,r2
8111774c:	111d8300 	call	8111d830 <__adddf3>
81117750:	015f2834 	movhi	r5,31904
81117754:	1025883a 	mov	r18,r2
81117758:	297fffc4 	addi	r5,r5,-1
8111775c:	189ffc2c 	andhi	r2,r3,32752
81117760:	2880892e 	bgeu	r5,r2,81117988 <_strtod_r+0xf9c>
81117764:	d8801017 	ldw	r2,64(sp)
81117768:	00dffc34 	movhi	r3,32752
8111776c:	18ffffc4 	addi	r3,r3,-1
81117770:	10ffb726 	beq	r2,r3,81117650 <__reset+0xfb0f7650>
81117774:	045ffc34 	movhi	r17,32752
81117778:	8c7fffc4 	addi	r17,r17,-1
8111777c:	04bfffc4 	movi	r18,-1
81117780:	003f4706 	br	811174a0 <__reset+0xfb0f74a0>
81117784:	00800884 	movi	r2,34
81117788:	80800015 	stw	r2,0(r16)
8111778c:	002b883a 	mov	r21,zero
81117790:	059ffc34 	movhi	r22,32752
81117794:	003d5d06 	br	81116d0c <__reset+0xfb0f6d0c>
81117798:	d9000d17 	ldw	r4,52(sp)
8111779c:	b80b883a 	mov	r5,r23
811177a0:	111f5180 	call	8111f518 <__fixdfsi>
811177a4:	1009883a 	mov	r4,r2
811177a8:	111f5980 	call	8111f598 <__floatsidf>
811177ac:	d9000d17 	ldw	r4,52(sp)
811177b0:	b80b883a 	mov	r5,r23
811177b4:	100d883a 	mov	r6,r2
811177b8:	180f883a 	mov	r7,r3
811177bc:	111ec1c0 	call	8111ec1c <__subdf3>
811177c0:	d9400e17 	ldw	r5,56(sp)
811177c4:	1039883a 	mov	fp,r2
811177c8:	182f883a 	mov	r23,r3
811177cc:	2800141e 	bne	r5,zero,81117820 <_strtod_r+0xe34>
811177d0:	9000131e 	bne	r18,zero,81117820 <_strtod_r+0xe34>
811177d4:	00800434 	movhi	r2,16
811177d8:	10bfffc4 	addi	r2,r2,-1
811177dc:	b0ac703a 	and	r22,r22,r2
811177e0:	b0000f1e 	bne	r22,zero,81117820 <_strtod_r+0xe34>
811177e4:	01a52834 	movhi	r6,38048
811177e8:	01cff434 	movhi	r7,16336
811177ec:	318d6544 	addi	r6,r6,13717
811177f0:	39ffffc4 	addi	r7,r7,-1
811177f4:	e009883a 	mov	r4,fp
811177f8:	180b883a 	mov	r5,r3
811177fc:	111eb280 	call	8111eb28 <__ledf2>
81117800:	103f270e 	bge	r2,zero,811174a0 <__reset+0xfb0f74a0>
81117804:	dd000a15 	stw	r20,40(sp)
81117808:	a811883a 	mov	r8,r21
8111780c:	dd001217 	ldw	r20,72(sp)
81117810:	d8800517 	ldw	r2,20(sp)
81117814:	002b883a 	mov	r21,zero
81117818:	882d883a 	mov	r22,r17
8111781c:	003f9706 	br	8111767c <__reset+0xfb0f767c>
81117820:	01a52834 	movhi	r6,38048
81117824:	01cff834 	movhi	r7,16352
81117828:	318d6544 	addi	r6,r6,13717
8111782c:	39ffffc4 	addi	r7,r7,-1
81117830:	e009883a 	mov	r4,fp
81117834:	b80b883a 	mov	r5,r23
81117838:	111eb280 	call	8111eb28 <__ledf2>
8111783c:	10000716 	blt	r2,zero,8111785c <_strtod_r+0xe70>
81117840:	018d6c34 	movhi	r6,13744
81117844:	31b94d44 	addi	r6,r6,-6859
81117848:	01cff834 	movhi	r7,16352
8111784c:	e009883a 	mov	r4,fp
81117850:	b80b883a 	mov	r5,r23
81117854:	111ea4c0 	call	8111ea4c <__gedf2>
81117858:	00bf110e 	bge	zero,r2,811174a0 <__reset+0xfb0f74a0>
8111785c:	dd000a15 	stw	r20,40(sp)
81117860:	a811883a 	mov	r8,r21
81117864:	dd001217 	ldw	r20,72(sp)
81117868:	d8800517 	ldw	r2,20(sp)
8111786c:	902b883a 	mov	r21,r18
81117870:	882d883a 	mov	r22,r17
81117874:	003f8106 	br	8111767c <__reset+0xfb0f767c>
81117878:	b83e2f26 	beq	r23,zero,81117138 <__reset+0xfb0f7138>
8111787c:	05efc83a 	sub	r23,zero,r23
81117880:	b88003cc 	andi	r2,r23,15
81117884:	10000d26 	beq	r2,zero,811178bc <_strtod_r+0xed0>
81117888:	100490fa 	slli	r2,r2,3
8111788c:	00e044f4 	movhi	r3,33043
81117890:	18ceac04 	addi	r3,r3,15024
81117894:	1885883a 	add	r2,r3,r2
81117898:	11800017 	ldw	r6,0(r2)
8111789c:	11c00117 	ldw	r7,4(r2)
811178a0:	9009883a 	mov	r4,r18
811178a4:	880b883a 	mov	r5,r17
811178a8:	da401315 	stw	r9,76(sp)
811178ac:	111e0dc0 	call	8111e0dc <__divdf3>
811178b0:	da401317 	ldw	r9,76(sp)
811178b4:	1025883a 	mov	r18,r2
811178b8:	1823883a 	mov	r17,r3
811178bc:	b82fd13a 	srai	r23,r23,4
811178c0:	b83e1d26 	beq	r23,zero,81117138 <__reset+0xfb0f7138>
811178c4:	008007c4 	movi	r2,31
811178c8:	15c02816 	blt	r2,r23,8111796c <_strtod_r+0xf80>
811178cc:	b880040c 	andi	r2,r23,16
811178d0:	10019726 	beq	r2,zero,81117f30 <_strtod_r+0x1544>
811178d4:	05c1880e 	bge	zero,r23,81117ef8 <_strtod_r+0x150c>
811178d8:	00c01a84 	movi	r3,106
811178dc:	d8c00915 	stw	r3,36(sp)
811178e0:	04e044f4 	movhi	r19,33043
811178e4:	9cceec04 	addi	r19,r19,15280
811178e8:	8807883a 	mov	r3,r17
811178ec:	9005883a 	mov	r2,r18
811178f0:	8023883a 	mov	r17,r16
811178f4:	0009883a 	mov	r4,zero
811178f8:	9821883a 	mov	r16,r19
811178fc:	da400a15 	stw	r9,40(sp)
81117900:	1827883a 	mov	r19,r3
81117904:	b980004c 	andi	r6,r23,1
81117908:	30000626 	beq	r6,zero,81117924 <_strtod_r+0xf38>
8111790c:	81800017 	ldw	r6,0(r16)
81117910:	81c00117 	ldw	r7,4(r16)
81117914:	1009883a 	mov	r4,r2
81117918:	180b883a 	mov	r5,r3
8111791c:	11097240 	call	81109724 <__muldf3>
81117920:	01000044 	movi	r4,1
81117924:	b82fd07a 	srai	r23,r23,1
81117928:	84000204 	addi	r16,r16,8
8111792c:	b83ff51e 	bne	r23,zero,81117904 <__reset+0xfb0f7904>
81117930:	21003fcc 	andi	r4,r4,255
81117934:	8821883a 	mov	r16,r17
81117938:	da400a17 	ldw	r9,40(sp)
8111793c:	9823883a 	mov	r17,r19
81117940:	2001a51e 	bne	r4,zero,81117fd8 <_strtod_r+0x15ec>
81117944:	d9000917 	ldw	r4,36(sp)
81117948:	20016d1e 	bne	r4,zero,81117f00 <_strtod_r+0x1514>
8111794c:	000d883a 	mov	r6,zero
81117950:	000f883a 	mov	r7,zero
81117954:	9009883a 	mov	r4,r18
81117958:	880b883a 	mov	r5,r17
8111795c:	da401315 	stw	r9,76(sp)
81117960:	111e9c40 	call	8111e9c4 <__eqdf2>
81117964:	da401317 	ldw	r9,76(sp)
81117968:	103df41e 	bne	r2,zero,8111713c <__reset+0xfb0f713c>
8111796c:	00800884 	movi	r2,34
81117970:	80800015 	stw	r2,0(r16)
81117974:	002b883a 	mov	r21,zero
81117978:	002d883a 	mov	r22,zero
8111797c:	003ce306 	br	81116d0c <__reset+0xfb0f6d0c>
81117980:	055387c4 	movi	r21,19999
81117984:	003d6b06 	br	81116f34 <__reset+0xfb0f6f34>
81117988:	0440d434 	movhi	r17,848
8111798c:	1c63883a 	add	r17,r3,r17
81117990:	882d883a 	mov	r22,r17
81117994:	003ebe06 	br	81117490 <__reset+0xfb0f7490>
81117998:	14403fcc 	andi	r17,r2,255
8111799c:	8c40201c 	xori	r17,r17,128
811179a0:	8c7fe004 	addi	r17,r17,-128
811179a4:	dd400817 	ldw	r21,32(sp)
811179a8:	0027883a 	mov	r19,zero
811179ac:	0039883a 	mov	fp,zero
811179b0:	002d883a 	mov	r22,zero
811179b4:	003c9906 	br	81116c1c <__reset+0xfb0f6c1c>
811179b8:	00c00944 	movi	r3,37
811179bc:	1a47c83a 	sub	r3,r3,r9
811179c0:	1d7d8c16 	blt	r3,r21,81116ff4 <__reset+0xfb0f6ff4>
811179c4:	1261c83a 	sub	r16,r2,r9
811179c8:	800490fa 	slli	r2,r16,3
811179cc:	04e044f4 	movhi	r19,33043
811179d0:	9cceac04 	addi	r19,r19,15024
811179d4:	9885883a 	add	r2,r19,r2
811179d8:	11000017 	ldw	r4,0(r2)
811179dc:	11400117 	ldw	r5,4(r2)
811179e0:	900d883a 	mov	r6,r18
811179e4:	880f883a 	mov	r7,r17
811179e8:	11097240 	call	81109724 <__muldf3>
811179ec:	ac0dc83a 	sub	r6,r21,r16
811179f0:	300c90fa 	slli	r6,r6,3
811179f4:	1009883a 	mov	r4,r2
811179f8:	180b883a 	mov	r5,r3
811179fc:	9985883a 	add	r2,r19,r6
81117a00:	11800017 	ldw	r6,0(r2)
81117a04:	11c00117 	ldw	r7,4(r2)
81117a08:	11097240 	call	81109724 <__muldf3>
81117a0c:	102b883a 	mov	r21,r2
81117a10:	182d883a 	mov	r22,r3
81117a14:	003cbd06 	br	81116d0c <__reset+0xfb0f6d0c>
81117a18:	b811883a 	mov	r8,r23
81117a1c:	003e8606 	br	81117438 <__reset+0xfb0f7438>
81117a20:	d8000d15 	stw	zero,52(sp)
81117a24:	05cffc34 	movhi	r23,16368
81117a28:	003e8006 	br	8111742c <__reset+0xfb0f742c>
81117a2c:	883f011e 	bne	r17,zero,81117634 <__reset+0xfb0f7634>
81117a30:	dd000a15 	stw	r20,40(sp)
81117a34:	dd001217 	ldw	r20,72(sp)
81117a38:	a811883a 	mov	r8,r21
81117a3c:	00800884 	movi	r2,34
81117a40:	80800015 	stw	r2,0(r16)
81117a44:	002b883a 	mov	r21,zero
81117a48:	d8800517 	ldw	r2,20(sp)
81117a4c:	002d883a 	mov	r22,zero
81117a50:	003f0a06 	br	8111767c <__reset+0xfb0f767c>
81117a54:	d9800517 	ldw	r6,20(sp)
81117a58:	30000826 	beq	r6,zero,81117a7c <_strtod_r+0x1090>
81117a5c:	01400d44 	movi	r5,53
81117a60:	d9000204 	addi	r4,sp,8
81117a64:	d8801315 	stw	r2,76(sp)
81117a68:	111600c0 	call	8111600c <__copybits>
81117a6c:	d9400517 	ldw	r5,20(sp)
81117a70:	8009883a 	mov	r4,r16
81117a74:	11151bc0 	call	811151bc <_Bfree>
81117a78:	d8801317 	ldw	r2,76(sp)
81117a7c:	00c00184 	movi	r3,6
81117a80:	1d400f36 	bltu	r3,r21,81117ac0 <_strtod_r+0x10d4>
81117a84:	a82a90ba 	slli	r21,r21,2
81117a88:	00e04474 	movhi	r3,33041
81117a8c:	18dea704 	addi	r3,r3,31388
81117a90:	a8eb883a 	add	r21,r21,r3
81117a94:	a8c00017 	ldw	r3,0(r21)
81117a98:	1800683a 	jmp	r3
81117a9c:	81117b18 	cmpnei	r4,r16,17900
81117aa0:	81117af0 	cmpltui	r4,r16,17899
81117aa4:	81117ad4 	ori	r4,r16,17899
81117aa8:	81117ab8 	rdprs	r4,r16,17898
81117aac:	81117ae0 	cmpeqi	r4,r16,17899
81117ab0:	81117af0 	cmpltui	r4,r16,17899
81117ab4:	81117b18 	cmpnei	r4,r16,17900
81117ab8:	045ffc34 	movhi	r17,32752
81117abc:	0025883a 	mov	r18,zero
81117ac0:	1080020c 	andi	r2,r2,8
81117ac4:	902b883a 	mov	r21,r18
81117ac8:	103c8f26 	beq	r2,zero,81116d08 <__reset+0xfb0f6d08>
81117acc:	8da00034 	orhi	r22,r17,32768
81117ad0:	003c8e06 	br	81116d0c <__reset+0xfb0f6d0c>
81117ad4:	dc800217 	ldw	r18,8(sp)
81117ad8:	dc400317 	ldw	r17,12(sp)
81117adc:	003ff806 	br	81117ac0 <__reset+0xfb0f7ac0>
81117ae0:	04600034 	movhi	r17,32768
81117ae4:	8c7fffc4 	addi	r17,r17,-1
81117ae8:	04bfffc4 	movi	r18,-1
81117aec:	003ff406 	br	81117ac0 <__reset+0xfb0f7ac0>
81117af0:	d8c00417 	ldw	r3,16(sp)
81117af4:	dc400317 	ldw	r17,12(sp)
81117af8:	013ffc34 	movhi	r4,65520
81117afc:	18c10cc4 	addi	r3,r3,1075
81117b00:	1806953a 	slli	r3,r3,20
81117b04:	213fffc4 	addi	r4,r4,-1
81117b08:	8922703a 	and	r17,r17,r4
81117b0c:	dc800217 	ldw	r18,8(sp)
81117b10:	88e2b03a 	or	r17,r17,r3
81117b14:	003fea06 	br	81117ac0 <__reset+0xfb0f7ac0>
81117b18:	0023883a 	mov	r17,zero
81117b1c:	0025883a 	mov	r18,zero
81117b20:	003fe706 	br	81117ac0 <__reset+0xfb0f7ac0>
81117b24:	01800044 	movi	r6,1
81117b28:	50d5883a 	add	r10,r10,r3
81117b2c:	2a4b883a 	add	r5,r5,r9
81117b30:	19811a26 	beq	r3,r6,81117f9c <_strtod_r+0x15b0>
81117b34:	01800204 	movi	r6,8
81117b38:	01c00404 	movi	r7,16
81117b3c:	4a400044 	addi	r9,r9,1
81117b40:	48bfffc4 	addi	r2,r9,-1
81117b44:	30801616 	blt	r6,r2,81117ba0 <_strtod_r+0x11b4>
81117b48:	e70002a4 	muli	fp,fp,10
81117b4c:	497ffb1e 	bne	r9,r5,81117b3c <__reset+0xfb0f7b3c>
81117b50:	d9800617 	ldw	r6,24(sp)
81117b54:	4a400044 	addi	r9,r9,1
81117b58:	00c00204 	movi	r3,8
81117b5c:	19400c0e 	bge	r3,r5,81117b90 <_strtod_r+0x11a4>
81117b60:	00800404 	movi	r2,16
81117b64:	000b883a 	mov	r5,zero
81117b68:	127ea316 	blt	r2,r9,811175f8 <__reset+0xfb0f75f8>
81117b6c:	988002a4 	muli	r2,r19,10
81117b70:	20a7883a 	add	r19,r4,r2
81117b74:	003ea006 	br	811175f8 <__reset+0xfb0f75f8>
81117b78:	d8800617 	ldw	r2,24(sp)
81117b7c:	8c7ff404 	addi	r17,r17,-48
81117b80:	2a800044 	addi	r10,r5,1
81117b84:	d8800815 	stw	r2,32(sp)
81117b88:	100d883a 	mov	r6,r2
81117b8c:	02400044 	movi	r9,1
81117b90:	e08002a4 	muli	r2,fp,10
81117b94:	000b883a 	mov	r5,zero
81117b98:	88b9883a 	add	fp,r17,r2
81117b9c:	003e9606 	br	811175f8 <__reset+0xfb0f75f8>
81117ba0:	3a7fea16 	blt	r7,r9,81117b4c <__reset+0xfb0f7b4c>
81117ba4:	9cc002a4 	muli	r19,r19,10
81117ba8:	003fe806 	br	81117b4c <__reset+0xfb0f7b4c>
81117bac:	00bffa84 	movi	r2,-22
81117bb0:	a8bd1016 	blt	r21,r2,81116ff4 <__reset+0xfb0f6ff4>
81117bb4:	a82a90fa 	slli	r21,r21,3
81117bb8:	00a044f4 	movhi	r2,33043
81117bbc:	108eac04 	addi	r2,r2,15024
81117bc0:	1545c83a 	sub	r2,r2,r21
81117bc4:	11800017 	ldw	r6,0(r2)
81117bc8:	11c00117 	ldw	r7,4(r2)
81117bcc:	9009883a 	mov	r4,r18
81117bd0:	880b883a 	mov	r5,r17
81117bd4:	111e0dc0 	call	8111e0dc <__divdf3>
81117bd8:	102b883a 	mov	r21,r2
81117bdc:	182d883a 	mov	r22,r3
81117be0:	003c4a06 	br	81116d0c <__reset+0xfb0f6d0c>
81117be4:	dd000a15 	stw	r20,40(sp)
81117be8:	a811883a 	mov	r8,r21
81117bec:	dd001217 	ldw	r20,72(sp)
81117bf0:	003e9e06 	br	8111766c <__reset+0xfb0f766c>
81117bf4:	016044f4 	movhi	r5,33043
81117bf8:	d9000617 	ldw	r4,24(sp)
81117bfc:	294ede04 	addi	r5,r5,15224
81117c00:	01c00644 	movi	r7,25
81117c04:	00000b06 	br	81117c34 <_strtod_r+0x1248>
81117c08:	21000044 	addi	r4,r4,1
81117c0c:	20800003 	ldbu	r2,0(r4)
81117c10:	10ffefc4 	addi	r3,r2,-65
81117c14:	10803fcc 	andi	r2,r2,255
81117c18:	1080201c 	xori	r2,r2,128
81117c1c:	18c03fcc 	andi	r3,r3,255
81117c20:	10bfe004 	addi	r2,r2,-128
81117c24:	38c00136 	bltu	r7,r3,81117c2c <_strtod_r+0x1240>
81117c28:	10800804 	addi	r2,r2,32
81117c2c:	29400044 	addi	r5,r5,1
81117c30:	11bbbb1e 	bne	r2,r6,81116b20 <__reset+0xfb0f6b20>
81117c34:	29800007 	ldb	r6,0(r5)
81117c38:	303ff31e 	bne	r6,zero,81117c08 <__reset+0xfb0f7c08>
81117c3c:	01a044f4 	movhi	r6,33043
81117c40:	d9000615 	stw	r4,24(sp)
81117c44:	318edf04 	addi	r6,r6,15228
81117c48:	200b883a 	mov	r5,r4
81117c4c:	02000644 	movi	r8,25
81117c50:	00000a06 	br	81117c7c <_strtod_r+0x1290>
81117c54:	28800003 	ldbu	r2,0(r5)
81117c58:	10ffefc4 	addi	r3,r2,-65
81117c5c:	10803fcc 	andi	r2,r2,255
81117c60:	1080201c 	xori	r2,r2,128
81117c64:	18c03fcc 	andi	r3,r3,255
81117c68:	10bfe004 	addi	r2,r2,-128
81117c6c:	40c00136 	bltu	r8,r3,81117c74 <_strtod_r+0x1288>
81117c70:	10800804 	addi	r2,r2,32
81117c74:	31800044 	addi	r6,r6,1
81117c78:	11c0711e 	bne	r2,r7,81117e40 <_strtod_r+0x1454>
81117c7c:	31c00007 	ldb	r7,0(r6)
81117c80:	29400044 	addi	r5,r5,1
81117c84:	383ff31e 	bne	r7,zero,81117c54 <__reset+0xfb0f7c54>
81117c88:	d9400615 	stw	r5,24(sp)
81117c8c:	045ffc34 	movhi	r17,32752
81117c90:	0025883a 	mov	r18,zero
81117c94:	003c1b06 	br	81116d04 <__reset+0xfb0f6d04>
81117c98:	000b883a 	mov	r5,zero
81117c9c:	003ccc06 	br	81116fd0 <__reset+0xfb0f6fd0>
81117ca0:	d9400e17 	ldw	r5,56(sp)
81117ca4:	dd000a15 	stw	r20,40(sp)
81117ca8:	00800434 	movhi	r2,16
81117cac:	a811883a 	mov	r8,r21
81117cb0:	dd001217 	ldw	r20,72(sp)
81117cb4:	dd401117 	ldw	r21,68(sp)
81117cb8:	dd801017 	ldw	r22,64(sp)
81117cbc:	10bfffc4 	addi	r2,r2,-1
81117cc0:	28005626 	beq	r5,zero,81117e1c <_strtod_r+0x1430>
81117cc4:	8886703a 	and	r3,r17,r2
81117cc8:	18807826 	beq	r3,r2,81117eac <_strtod_r+0x14c0>
81117ccc:	d8c00b17 	ldw	r3,44(sp)
81117cd0:	18005726 	beq	r3,zero,81117e30 <_strtod_r+0x1444>
81117cd4:	1c44703a 	and	r2,r3,r17
81117cd8:	10000f26 	beq	r2,zero,81117d18 <_strtod_r+0x132c>
81117cdc:	d9000e17 	ldw	r4,56(sp)
81117ce0:	d9800917 	ldw	r6,36(sp)
81117ce4:	20005e26 	beq	r4,zero,81117e60 <_strtod_r+0x1474>
81117ce8:	9009883a 	mov	r4,r18
81117cec:	880b883a 	mov	r5,r17
81117cf0:	da001315 	stw	r8,76(sp)
81117cf4:	11169880 	call	81116988 <sulp>
81117cf8:	100d883a 	mov	r6,r2
81117cfc:	180f883a 	mov	r7,r3
81117d00:	9009883a 	mov	r4,r18
81117d04:	880b883a 	mov	r5,r17
81117d08:	111d8300 	call	8111d830 <__adddf3>
81117d0c:	da001317 	ldw	r8,76(sp)
81117d10:	102b883a 	mov	r21,r2
81117d14:	182d883a 	mov	r22,r3
81117d18:	d8c00917 	ldw	r3,36(sp)
81117d1c:	18000f26 	beq	r3,zero,81117d5c <_strtod_r+0x1370>
81117d20:	a809883a 	mov	r4,r21
81117d24:	b00b883a 	mov	r5,r22
81117d28:	000d883a 	mov	r6,zero
81117d2c:	01ce5434 	movhi	r7,14672
81117d30:	da001315 	stw	r8,76(sp)
81117d34:	11097240 	call	81109724 <__muldf3>
81117d38:	102b883a 	mov	r21,r2
81117d3c:	182d883a 	mov	r22,r3
81117d40:	da001317 	ldw	r8,76(sp)
81117d44:	1800051e 	bne	r3,zero,81117d5c <_strtod_r+0x1370>
81117d48:	d8800517 	ldw	r2,20(sp)
81117d4c:	a83e4b1e 	bne	r21,zero,8111767c <__reset+0xfb0f767c>
81117d50:	00c00884 	movi	r3,34
81117d54:	80c00015 	stw	r3,0(r16)
81117d58:	003e4806 	br	8111767c <__reset+0xfb0f767c>
81117d5c:	d8800517 	ldw	r2,20(sp)
81117d60:	003e4606 	br	8111767c <__reset+0xfb0f767c>
81117d64:	d9000e17 	ldw	r4,56(sp)
81117d68:	dd000a15 	stw	r20,40(sp)
81117d6c:	a811883a 	mov	r8,r21
81117d70:	dd001217 	ldw	r20,72(sp)
81117d74:	dd401117 	ldw	r21,68(sp)
81117d78:	dd801017 	ldw	r22,64(sp)
81117d7c:	203fe61e 	bne	r4,zero,81117d18 <__reset+0xfb0f7d18>
81117d80:	903fe51e 	bne	r18,zero,81117d18 <__reset+0xfb0f7d18>
81117d84:	00800434 	movhi	r2,16
81117d88:	10bfffc4 	addi	r2,r2,-1
81117d8c:	8884703a 	and	r2,r17,r2
81117d90:	103fe11e 	bne	r2,zero,81117d18 <__reset+0xfb0f7d18>
81117d94:	8ddffc2c 	andhi	r23,r17,32752
81117d98:	0081ac34 	movhi	r2,1712
81117d9c:	15ffde2e 	bgeu	r2,r23,81117d18 <__reset+0xfb0f7d18>
81117da0:	40800517 	ldw	r2,20(r8)
81117da4:	1000031e 	bne	r2,zero,81117db4 <_strtod_r+0x13c8>
81117da8:	40800417 	ldw	r2,16(r8)
81117dac:	00c00044 	movi	r3,1
81117db0:	18bfd90e 	bge	r3,r2,81117d18 <__reset+0xfb0f7d18>
81117db4:	400b883a 	mov	r5,r8
81117db8:	01800044 	movi	r6,1
81117dbc:	8009883a 	mov	r4,r16
81117dc0:	11158940 	call	81115894 <__lshift>
81117dc4:	980b883a 	mov	r5,r19
81117dc8:	1009883a 	mov	r4,r2
81117dcc:	d8801315 	stw	r2,76(sp)
81117dd0:	11159dc0 	call	811159dc <__mcmp>
81117dd4:	da001317 	ldw	r8,76(sp)
81117dd8:	00bfcf0e 	bge	zero,r2,81117d18 <__reset+0xfb0f7d18>
81117ddc:	d8c00917 	ldw	r3,36(sp)
81117de0:	18005c26 	beq	r3,zero,81117f54 <_strtod_r+0x1568>
81117de4:	0081ac34 	movhi	r2,1712
81117de8:	15c05a16 	blt	r2,r23,81117f54 <_strtod_r+0x1568>
81117dec:	0080dc34 	movhi	r2,880
81117df0:	15ffcb16 	blt	r2,r23,81117d20 <__reset+0xfb0f7d20>
81117df4:	003f1106 	br	81117a3c <__reset+0xfb0f7a3c>
81117df8:	002d883a 	mov	r22,zero
81117dfc:	022ff834 	movhi	r8,49120
81117e00:	d8000d15 	stw	zero,52(sp)
81117e04:	05cff834 	movhi	r23,16352
81117e08:	003ded06 	br	811175c0 <__reset+0xfb0f75c0>
81117e0c:	0440d434 	movhi	r17,848
81117e10:	1c63883a 	add	r17,r3,r17
81117e14:	d8000915 	stw	zero,36(sp)
81117e18:	003cc806 	br	8111713c <__reset+0xfb0f713c>
81117e1c:	8884703a 	and	r2,r17,r2
81117e20:	103faa1e 	bne	r2,zero,81117ccc <__reset+0xfb0f7ccc>
81117e24:	903fa91e 	bne	r18,zero,81117ccc <__reset+0xfb0f7ccc>
81117e28:	8ddffc2c 	andhi	r23,r17,32752
81117e2c:	003feb06 	br	81117ddc <__reset+0xfb0f7ddc>
81117e30:	d8c00d17 	ldw	r3,52(sp)
81117e34:	1cae703a 	and	r23,r3,r18
81117e38:	b83fb726 	beq	r23,zero,81117d18 <__reset+0xfb0f7d18>
81117e3c:	003fa706 	br	81117cdc <__reset+0xfb0f7cdc>
81117e40:	21000044 	addi	r4,r4,1
81117e44:	d9000615 	stw	r4,24(sp)
81117e48:	003f9006 	br	81117c8c <__reset+0xfb0f7c8c>
81117e4c:	016044f4 	movhi	r5,33043
81117e50:	294ea204 	addi	r5,r5,14984
81117e54:	d9400915 	stw	r5,36(sp)
81117e58:	0027883a 	mov	r19,zero
81117e5c:	003ca206 	br	811170e8 <__reset+0xfb0f70e8>
81117e60:	9009883a 	mov	r4,r18
81117e64:	880b883a 	mov	r5,r17
81117e68:	da001315 	stw	r8,76(sp)
81117e6c:	11169880 	call	81116988 <sulp>
81117e70:	100d883a 	mov	r6,r2
81117e74:	180f883a 	mov	r7,r3
81117e78:	9009883a 	mov	r4,r18
81117e7c:	880b883a 	mov	r5,r17
81117e80:	111ec1c0 	call	8111ec1c <__subdf3>
81117e84:	000d883a 	mov	r6,zero
81117e88:	000f883a 	mov	r7,zero
81117e8c:	1009883a 	mov	r4,r2
81117e90:	180b883a 	mov	r5,r3
81117e94:	102b883a 	mov	r21,r2
81117e98:	182d883a 	mov	r22,r3
81117e9c:	111e9c40 	call	8111e9c4 <__eqdf2>
81117ea0:	da001317 	ldw	r8,76(sp)
81117ea4:	103ee526 	beq	r2,zero,81117a3c <__reset+0xfb0f7a3c>
81117ea8:	003f9b06 	br	81117d18 <__reset+0xfb0f7d18>
81117eac:	d8800917 	ldw	r2,36(sp)
81117eb0:	10002226 	beq	r2,zero,81117f3c <_strtod_r+0x1550>
81117eb4:	889ffc2c 	andhi	r2,r17,32752
81117eb8:	00c1a834 	movhi	r3,1696
81117ebc:	18801f36 	bltu	r3,r2,81117f3c <_strtod_r+0x1550>
81117ec0:	1004d53a 	srli	r2,r2,20
81117ec4:	00c01ac4 	movi	r3,107
81117ec8:	1887c83a 	sub	r3,r3,r2
81117ecc:	00bfffc4 	movi	r2,-1
81117ed0:	10c4983a 	sll	r2,r2,r3
81117ed4:	14bf7d1e 	bne	r2,r18,81117ccc <__reset+0xfb0f7ccc>
81117ed8:	00dffc34 	movhi	r3,32752
81117edc:	18ffffc4 	addi	r3,r3,-1
81117ee0:	88c03526 	beq	r17,r3,81117fb8 <_strtod_r+0x15cc>
81117ee4:	8c5ffc2c 	andhi	r17,r17,32752
81117ee8:	00800434 	movhi	r2,16
81117eec:	002b883a 	mov	r21,zero
81117ef0:	88ad883a 	add	r22,r17,r2
81117ef4:	003f8806 	br	81117d18 <__reset+0xfb0f7d18>
81117ef8:	01401a84 	movi	r5,106
81117efc:	d9400915 	stw	r5,36(sp)
81117f00:	8ddffc2c 	andhi	r23,r17,32752
81117f04:	b82ed53a 	srli	r23,r23,20
81117f08:	00801ac4 	movi	r2,107
81117f0c:	15c5c83a 	sub	r2,r2,r23
81117f10:	00be8e0e 	bge	zero,r2,8111794c <__reset+0xfb0f794c>
81117f14:	00c007c4 	movi	r3,31
81117f18:	18800a0e 	bge	r3,r2,81117f44 <_strtod_r+0x1558>
81117f1c:	00c00d04 	movi	r3,52
81117f20:	0025883a 	mov	r18,zero
81117f24:	1880270e 	bge	r3,r2,81117fc4 <_strtod_r+0x15d8>
81117f28:	0440dc34 	movhi	r17,880
81117f2c:	003e8706 	br	8111794c <__reset+0xfb0f794c>
81117f30:	d8000915 	stw	zero,36(sp)
81117f34:	05fe6a16 	blt	zero,r23,811178e0 <__reset+0xfb0f78e0>
81117f38:	003e8406 	br	8111794c <__reset+0xfb0f794c>
81117f3c:	00bfffc4 	movi	r2,-1
81117f40:	003fe406 	br	81117ed4 <__reset+0xfb0f7ed4>
81117f44:	00ffffc4 	movi	r3,-1
81117f48:	1884983a 	sll	r2,r3,r2
81117f4c:	14a4703a 	and	r18,r2,r18
81117f50:	003e7e06 	br	8111794c <__reset+0xfb0f794c>
81117f54:	00bffc34 	movhi	r2,65520
81117f58:	b8af883a 	add	r23,r23,r2
81117f5c:	057fffc4 	movi	r21,-1
81117f60:	00800434 	movhi	r2,16
81117f64:	1545883a 	add	r2,r2,r21
81117f68:	b8acb03a 	or	r22,r23,r2
81117f6c:	003f6a06 	br	81117d18 <__reset+0xfb0f7d18>
81117f70:	016044f4 	movhi	r5,33043
81117f74:	294ee204 	addi	r5,r5,15240
81117f78:	d9800204 	addi	r6,sp,8
81117f7c:	d9000604 	addi	r4,sp,24
81117f80:	111c4480 	call	8111c448 <__hexnan>
81117f84:	00c00144 	movi	r3,5
81117f88:	10fb5c1e 	bne	r2,r3,81116cfc <__reset+0xfb0f6cfc>
81117f8c:	dc400317 	ldw	r17,12(sp)
81117f90:	dc800217 	ldw	r18,8(sp)
81117f94:	8c5ffc34 	orhi	r17,r17,32752
81117f98:	003b5a06 	br	81116d04 <__reset+0xfb0f6d04>
81117f9c:	480b883a 	mov	r5,r9
81117fa0:	d9800617 	ldw	r6,24(sp)
81117fa4:	4a400044 	addi	r9,r9,1
81117fa8:	003eeb06 	br	81117b58 <__reset+0xfb0f7b58>
81117fac:	1025883a 	mov	r18,r2
81117fb0:	1823883a 	mov	r17,r3
81117fb4:	003c4c06 	br	811170e8 <__reset+0xfb0f70e8>
81117fb8:	00ffffc4 	movi	r3,-1
81117fbc:	10ffc91e 	bne	r2,r3,81117ee4 <__reset+0xfb0f7ee4>
81117fc0:	003da906 	br	81117668 <__reset+0xfb0f7668>
81117fc4:	10bff804 	addi	r2,r2,-32
81117fc8:	00ffffc4 	movi	r3,-1
81117fcc:	1884983a 	sll	r2,r3,r2
81117fd0:	1462703a 	and	r17,r2,r17
81117fd4:	003e5d06 	br	8111794c <__reset+0xfb0f794c>
81117fd8:	1025883a 	mov	r18,r2
81117fdc:	1823883a 	mov	r17,r3
81117fe0:	003e5806 	br	81117944 <__reset+0xfb0f7944>

81117fe4 <strtod>:
81117fe4:	00a044f4 	movhi	r2,33043
81117fe8:	10976404 	addi	r2,r2,23952
81117fec:	280d883a 	mov	r6,r5
81117ff0:	200b883a 	mov	r5,r4
81117ff4:	11000017 	ldw	r4,0(r2)
81117ff8:	11169ec1 	jmpi	811169ec <_strtod_r>

81117ffc <strtof>:
81117ffc:	defffb04 	addi	sp,sp,-20
81118000:	dcc00315 	stw	r19,12(sp)
81118004:	04e044f4 	movhi	r19,33043
81118008:	9cd76404 	addi	r19,r19,23952
8111800c:	280d883a 	mov	r6,r5
81118010:	200b883a 	mov	r5,r4
81118014:	99000017 	ldw	r4,0(r19)
81118018:	dfc00415 	stw	ra,16(sp)
8111801c:	dc800215 	stw	r18,8(sp)
81118020:	dc400115 	stw	r17,4(sp)
81118024:	dc000015 	stw	r16,0(sp)
81118028:	11169ec0 	call	811169ec <_strtod_r>
8111802c:	1009883a 	mov	r4,r2
81118030:	180b883a 	mov	r5,r3
81118034:	1025883a 	mov	r18,r2
81118038:	1823883a 	mov	r17,r3
8111803c:	1109f4c0 	call	81109f4c <__truncdfsf2>
81118040:	000b883a 	mov	r5,zero
81118044:	1009883a 	mov	r4,r2
81118048:	1021883a 	mov	r16,r2
8111804c:	111d6340 	call	8111d634 <__eqsf2>
81118050:	1000111e 	bne	r2,zero,81118098 <strtof+0x9c>
81118054:	000d883a 	mov	r6,zero
81118058:	000f883a 	mov	r7,zero
8111805c:	9009883a 	mov	r4,r18
81118060:	880b883a 	mov	r5,r17
81118064:	111e9c40 	call	8111e9c4 <__eqdf2>
81118068:	10000b26 	beq	r2,zero,81118098 <strtof+0x9c>
8111806c:	98800017 	ldw	r2,0(r19)
81118070:	00c00884 	movi	r3,34
81118074:	10c00015 	stw	r3,0(r2)
81118078:	8005883a 	mov	r2,r16
8111807c:	dfc00417 	ldw	ra,16(sp)
81118080:	dcc00317 	ldw	r19,12(sp)
81118084:	dc800217 	ldw	r18,8(sp)
81118088:	dc400117 	ldw	r17,4(sp)
8111808c:	dc000017 	ldw	r16,0(sp)
81118090:	dec00504 	addi	sp,sp,20
81118094:	f800283a 	ret
81118098:	015fe034 	movhi	r5,32640
8111809c:	297fffc4 	addi	r5,r5,-1
811180a0:	8009883a 	mov	r4,r16
811180a4:	111d6ac0 	call	8111d6ac <__gesf2>
811180a8:	0080070e 	bge	zero,r2,811180c8 <strtof+0xcc>
811180ac:	01dffc34 	movhi	r7,32752
811180b0:	39ffffc4 	addi	r7,r7,-1
811180b4:	01bfffc4 	movi	r6,-1
811180b8:	9009883a 	mov	r4,r18
811180bc:	880b883a 	mov	r5,r17
811180c0:	111ea4c0 	call	8111ea4c <__gedf2>
811180c4:	00bfe90e 	bge	zero,r2,8111806c <__reset+0xfb0f806c>
811180c8:	017fe034 	movhi	r5,65408
811180cc:	297fffc4 	addi	r5,r5,-1
811180d0:	8009883a 	mov	r4,r16
811180d4:	111d7680 	call	8111d768 <__lesf2>
811180d8:	103fe70e 	bge	r2,zero,81118078 <__reset+0xfb0f8078>
811180dc:	01fffc34 	movhi	r7,65520
811180e0:	39ffffc4 	addi	r7,r7,-1
811180e4:	01bfffc4 	movi	r6,-1
811180e8:	9009883a 	mov	r4,r18
811180ec:	880b883a 	mov	r5,r17
811180f0:	111eb280 	call	8111eb28 <__ledf2>
811180f4:	103fdd0e 	bge	r2,zero,8111806c <__reset+0xfb0f806c>
811180f8:	003fdf06 	br	81118078 <__reset+0xfb0f8078>

811180fc <_strtoll_r>:
811180fc:	00a044f4 	movhi	r2,33043
81118100:	defff304 	addi	sp,sp,-52
81118104:	10976704 	addi	r2,r2,23964
81118108:	dc800515 	stw	r18,20(sp)
8111810c:	14800017 	ldw	r18,0(r2)
81118110:	dd800915 	stw	r22,36(sp)
81118114:	dd400815 	stw	r21,32(sp)
81118118:	dcc00615 	stw	r19,24(sp)
8111811c:	d9000015 	stw	r4,0(sp)
81118120:	dfc00c15 	stw	ra,48(sp)
81118124:	df000b15 	stw	fp,44(sp)
81118128:	ddc00a15 	stw	r23,40(sp)
8111812c:	dd000715 	stw	r20,28(sp)
81118130:	dc400415 	stw	r17,16(sp)
81118134:	dc000315 	stw	r16,12(sp)
81118138:	282d883a 	mov	r22,r5
8111813c:	302b883a 	mov	r21,r6
81118140:	3827883a 	mov	r19,r7
81118144:	2809883a 	mov	r4,r5
81118148:	24000003 	ldbu	r16,0(r4)
8111814c:	24400044 	addi	r17,r4,1
81118150:	2007883a 	mov	r3,r4
81118154:	9405883a 	add	r2,r18,r16
81118158:	10800043 	ldbu	r2,1(r2)
8111815c:	8809883a 	mov	r4,r17
81118160:	1080020c 	andi	r2,r2,8
81118164:	103ff81e 	bne	r2,zero,81118148 <__reset+0xfb0f8148>
81118168:	00800b44 	movi	r2,45
8111816c:	80807826 	beq	r16,r2,81118350 <_strtoll_r+0x254>
81118170:	00800ac4 	movi	r2,43
81118174:	80807a26 	beq	r16,r2,81118360 <_strtoll_r+0x264>
81118178:	0039883a 	mov	fp,zero
8111817c:	98004e26 	beq	r19,zero,811182b8 <_strtoll_r+0x1bc>
81118180:	00800404 	movi	r2,16
81118184:	98808226 	beq	r19,r2,81118390 <_strtoll_r+0x294>
81118188:	982fd7fa 	srai	r23,r19,31
8111818c:	9829883a 	mov	r20,r19
81118190:	e0004f26 	beq	fp,zero,811182d0 <_strtoll_r+0x1d4>
81118194:	0017883a 	mov	r11,zero
81118198:	02a00034 	movhi	r10,32768
8111819c:	5809883a 	mov	r4,r11
811181a0:	500b883a 	mov	r5,r10
811181a4:	a00d883a 	mov	r6,r20
811181a8:	b80f883a 	mov	r7,r23
811181ac:	da800215 	stw	r10,8(sp)
811181b0:	dac00115 	stw	r11,4(sp)
811181b4:	111cf480 	call	8111cf48 <__umoddi3>
811181b8:	dac00117 	ldw	r11,4(sp)
811181bc:	da800217 	ldw	r10,8(sp)
811181c0:	a00d883a 	mov	r6,r20
811181c4:	5809883a 	mov	r4,r11
811181c8:	500b883a 	mov	r5,r10
811181cc:	b80f883a 	mov	r7,r23
811181d0:	d8800115 	stw	r2,4(sp)
811181d4:	111c9d00 	call	8111c9d0 <__udivdi3>
811181d8:	9409883a 	add	r4,r18,r16
811181dc:	21000043 	ldbu	r4,1(r4)
811181e0:	1019883a 	mov	r12,r2
811181e4:	880b883a 	mov	r5,r17
811181e8:	2240010c 	andi	r9,r4,4
811181ec:	0015883a 	mov	r10,zero
811181f0:	000d883a 	mov	r6,zero
811181f4:	000f883a 	mov	r7,zero
811181f8:	03400044 	movi	r13,1
811181fc:	02ffffc4 	movi	r11,-1
81118200:	da000117 	ldw	r8,4(sp)
81118204:	48000d26 	beq	r9,zero,8111823c <_strtoll_r+0x140>
81118208:	843ff404 	addi	r16,r16,-48
8111820c:	84c0110e 	bge	r16,r19,81118254 <_strtoll_r+0x158>
81118210:	52c00426 	beq	r10,r11,81118224 <_strtoll_r+0x128>
81118214:	19c00236 	bltu	r3,r7,81118220 <_strtoll_r+0x124>
81118218:	38c0311e 	bne	r7,r3,811182e0 <_strtoll_r+0x1e4>
8111821c:	6180302e 	bgeu	r12,r6,811182e0 <_strtoll_r+0x1e4>
81118220:	02bfffc4 	movi	r10,-1
81118224:	2c000003 	ldbu	r16,0(r5)
81118228:	29400044 	addi	r5,r5,1
8111822c:	9409883a 	add	r4,r18,r16
81118230:	21000043 	ldbu	r4,1(r4)
81118234:	2240010c 	andi	r9,r4,4
81118238:	483ff31e 	bne	r9,zero,81118208 <__reset+0xfb0f8208>
8111823c:	210000cc 	andi	r4,r4,3
81118240:	20000426 	beq	r4,zero,81118254 <_strtoll_r+0x158>
81118244:	23403426 	beq	r4,r13,81118318 <_strtoll_r+0x21c>
81118248:	008015c4 	movi	r2,87
8111824c:	80a1c83a 	sub	r16,r16,r2
81118250:	84ffef16 	blt	r16,r19,81118210 <__reset+0xfb0f8210>
81118254:	00bfffc4 	movi	r2,-1
81118258:	50803426 	beq	r10,r2,8111832c <_strtoll_r+0x230>
8111825c:	e0000426 	beq	fp,zero,81118270 <_strtoll_r+0x174>
81118260:	018dc83a 	sub	r6,zero,r6
81118264:	3004c03a 	cmpne	r2,r6,zero
81118268:	01e1c83a 	sub	r16,zero,r7
8111826c:	808fc83a 	sub	r7,r16,r2
81118270:	3005883a 	mov	r2,r6
81118274:	3807883a 	mov	r3,r7
81118278:	a8000326 	beq	r21,zero,81118288 <_strtoll_r+0x18c>
8111827c:	5000321e 	bne	r10,zero,81118348 <_strtoll_r+0x24c>
81118280:	b00b883a 	mov	r5,r22
81118284:	a9400015 	stw	r5,0(r21)
81118288:	dfc00c17 	ldw	ra,48(sp)
8111828c:	df000b17 	ldw	fp,44(sp)
81118290:	ddc00a17 	ldw	r23,40(sp)
81118294:	dd800917 	ldw	r22,36(sp)
81118298:	dd400817 	ldw	r21,32(sp)
8111829c:	dd000717 	ldw	r20,28(sp)
811182a0:	dcc00617 	ldw	r19,24(sp)
811182a4:	dc800517 	ldw	r18,20(sp)
811182a8:	dc400417 	ldw	r17,16(sp)
811182ac:	dc000317 	ldw	r16,12(sp)
811182b0:	dec00d04 	addi	sp,sp,52
811182b4:	f800283a 	ret
811182b8:	00800c04 	movi	r2,48
811182bc:	80802c26 	beq	r16,r2,81118370 <_strtoll_r+0x274>
811182c0:	05000284 	movi	r20,10
811182c4:	002f883a 	mov	r23,zero
811182c8:	a027883a 	mov	r19,r20
811182cc:	e03fb11e 	bne	fp,zero,81118194 <__reset+0xfb0f8194>
811182d0:	02a00034 	movhi	r10,32768
811182d4:	52bfffc4 	addi	r10,r10,-1
811182d8:	02ffffc4 	movi	r11,-1
811182dc:	003faf06 	br	8111819c <__reset+0xfb0f819c>
811182e0:	33000f26 	beq	r6,r12,81118320 <_strtoll_r+0x224>
811182e4:	b985383a 	mul	r2,r23,r6
811182e8:	3d0f383a 	mul	r7,r7,r20
811182ec:	3508383a 	mulxuu	r4,r6,r20
811182f0:	350d383a 	mul	r6,r6,r20
811182f4:	8013d7fa 	srai	r9,r16,31
811182f8:	388f883a 	add	r7,r7,r2
811182fc:	818d883a 	add	r6,r16,r6
81118300:	390f883a 	add	r7,r7,r4
81118304:	3421803a 	cmpltu	r16,r6,r16
81118308:	49cf883a 	add	r7,r9,r7
8111830c:	81cf883a 	add	r7,r16,r7
81118310:	02800044 	movi	r10,1
81118314:	003fc306 	br	81118224 <__reset+0xfb0f8224>
81118318:	00800dc4 	movi	r2,55
8111831c:	003fcb06 	br	8111824c <__reset+0xfb0f824c>
81118320:	38fff01e 	bne	r7,r3,811182e4 <__reset+0xfb0f82e4>
81118324:	443fbe16 	blt	r8,r16,81118220 <__reset+0xfb0f8220>
81118328:	003fee06 	br	811182e4 <__reset+0xfb0f82e4>
8111832c:	e0002426 	beq	fp,zero,811183c0 <_strtoll_r+0x2c4>
81118330:	0005883a 	mov	r2,zero
81118334:	00e00034 	movhi	r3,32768
81118338:	d9800017 	ldw	r6,0(sp)
8111833c:	01000884 	movi	r4,34
81118340:	31000015 	stw	r4,0(r6)
81118344:	a83fd026 	beq	r21,zero,81118288 <__reset+0xfb0f8288>
81118348:	297fffc4 	addi	r5,r5,-1
8111834c:	003fcd06 	br	81118284 <__reset+0xfb0f8284>
81118350:	1c400084 	addi	r17,r3,2
81118354:	1c000043 	ldbu	r16,1(r3)
81118358:	07000044 	movi	fp,1
8111835c:	003f8706 	br	8111817c <__reset+0xfb0f817c>
81118360:	1c400084 	addi	r17,r3,2
81118364:	1c000043 	ldbu	r16,1(r3)
81118368:	0039883a 	mov	fp,zero
8111836c:	003f8306 	br	8111817c <__reset+0xfb0f817c>
81118370:	88800003 	ldbu	r2,0(r17)
81118374:	00c01604 	movi	r3,88
81118378:	108037cc 	andi	r2,r2,223
8111837c:	10c00a26 	beq	r2,r3,811183a8 <_strtoll_r+0x2ac>
81118380:	05000204 	movi	r20,8
81118384:	002f883a 	mov	r23,zero
81118388:	a027883a 	mov	r19,r20
8111838c:	003f8006 	br	81118190 <__reset+0xfb0f8190>
81118390:	00800c04 	movi	r2,48
81118394:	80800e1e 	bne	r16,r2,811183d0 <_strtoll_r+0x2d4>
81118398:	88800003 	ldbu	r2,0(r17)
8111839c:	00c01604 	movi	r3,88
811183a0:	108037cc 	andi	r2,r2,223
811183a4:	10c00a1e 	bne	r2,r3,811183d0 <_strtoll_r+0x2d4>
811183a8:	05000404 	movi	r20,16
811183ac:	8c000043 	ldbu	r16,1(r17)
811183b0:	002f883a 	mov	r23,zero
811183b4:	8c400084 	addi	r17,r17,2
811183b8:	a027883a 	mov	r19,r20
811183bc:	003f7406 	br	81118190 <__reset+0xfb0f8190>
811183c0:	00e00034 	movhi	r3,32768
811183c4:	18ffffc4 	addi	r3,r3,-1
811183c8:	5005883a 	mov	r2,r10
811183cc:	003fda06 	br	81118338 <__reset+0xfb0f8338>
811183d0:	9829883a 	mov	r20,r19
811183d4:	002f883a 	mov	r23,zero
811183d8:	003f6d06 	br	81118190 <__reset+0xfb0f8190>

811183dc <_strtoul_r>:
811183dc:	00a044f4 	movhi	r2,33043
811183e0:	defff604 	addi	sp,sp,-40
811183e4:	10976704 	addi	r2,r2,23964
811183e8:	dc800315 	stw	r18,12(sp)
811183ec:	14800017 	ldw	r18,0(r2)
811183f0:	dd400615 	stw	r21,24(sp)
811183f4:	dd000515 	stw	r20,20(sp)
811183f8:	dcc00415 	stw	r19,16(sp)
811183fc:	2029883a 	mov	r20,r4
81118400:	dfc00915 	stw	ra,36(sp)
81118404:	ddc00815 	stw	r23,32(sp)
81118408:	dd800715 	stw	r22,28(sp)
8111840c:	dc400215 	stw	r17,8(sp)
81118410:	dc000115 	stw	r16,4(sp)
81118414:	2827883a 	mov	r19,r5
81118418:	382b883a 	mov	r21,r7
8111841c:	2809883a 	mov	r4,r5
81118420:	24000003 	ldbu	r16,0(r4)
81118424:	24400044 	addi	r17,r4,1
81118428:	2007883a 	mov	r3,r4
8111842c:	9405883a 	add	r2,r18,r16
81118430:	10800043 	ldbu	r2,1(r2)
81118434:	8809883a 	mov	r4,r17
81118438:	1080020c 	andi	r2,r2,8
8111843c:	103ff81e 	bne	r2,zero,81118420 <__reset+0xfb0f8420>
81118440:	00800b44 	movi	r2,45
81118444:	80805326 	beq	r16,r2,81118594 <_strtoul_r+0x1b8>
81118448:	00800ac4 	movi	r2,43
8111844c:	80805526 	beq	r16,r2,811185a4 <_strtoul_r+0x1c8>
81118450:	002f883a 	mov	r23,zero
81118454:	a8000f26 	beq	r21,zero,81118494 <_strtoul_r+0xb8>
81118458:	00800404 	movi	r2,16
8111845c:	a8805f26 	beq	r21,r2,811185dc <_strtoul_r+0x200>
81118460:	013fffc4 	movi	r4,-1
81118464:	a80b883a 	mov	r5,r21
81118468:	d9800015 	stw	r6,0(sp)
8111846c:	111d5780 	call	8111d578 <__udivsi3>
81118470:	a80b883a 	mov	r5,r21
81118474:	013fffc4 	movi	r4,-1
81118478:	102d883a 	mov	r22,r2
8111847c:	111d5dc0 	call	8111d5dc <__umodsi3>
81118480:	d9800017 	ldw	r6,0(sp)
81118484:	1019883a 	mov	r12,r2
81118488:	a817883a 	mov	r11,r21
8111848c:	b00f883a 	mov	r7,r22
81118490:	00000706 	br	811184b0 <_strtoul_r+0xd4>
81118494:	00800c04 	movi	r2,48
81118498:	80804626 	beq	r16,r2,811185b4 <_strtoul_r+0x1d8>
8111849c:	05400284 	movi	r21,10
811184a0:	01c666b4 	movhi	r7,6554
811184a4:	03000144 	movi	r12,5
811184a8:	39e66644 	addi	r7,r7,-26215
811184ac:	a817883a 	mov	r11,r21
811184b0:	9407883a 	add	r3,r18,r16
811184b4:	18c00043 	ldbu	r3,1(r3)
811184b8:	8809883a 	mov	r4,r17
811184bc:	0011883a 	mov	r8,zero
811184c0:	1940010c 	andi	r5,r3,4
811184c4:	0005883a 	mov	r2,zero
811184c8:	02800044 	movi	r10,1
811184cc:	027fffc4 	movi	r9,-1
811184d0:	28000e26 	beq	r5,zero,8111850c <_strtoul_r+0x130>
811184d4:	843ff404 	addi	r16,r16,-48
811184d8:	8540120e 	bge	r16,r21,81118524 <_strtoul_r+0x148>
811184dc:	42400526 	beq	r8,r9,811184f4 <_strtoul_r+0x118>
811184e0:	38802236 	bltu	r7,r2,8111856c <_strtoul_r+0x190>
811184e4:	11c02026 	beq	r2,r7,81118568 <_strtoul_r+0x18c>
811184e8:	12c5383a 	mul	r2,r2,r11
811184ec:	02000044 	movi	r8,1
811184f0:	8085883a 	add	r2,r16,r2
811184f4:	24000003 	ldbu	r16,0(r4)
811184f8:	21000044 	addi	r4,r4,1
811184fc:	9407883a 	add	r3,r18,r16
81118500:	18c00043 	ldbu	r3,1(r3)
81118504:	1940010c 	andi	r5,r3,4
81118508:	283ff21e 	bne	r5,zero,811184d4 <__reset+0xfb0f84d4>
8111850c:	18c000cc 	andi	r3,r3,3
81118510:	18000426 	beq	r3,zero,81118524 <_strtoul_r+0x148>
81118514:	1a801726 	beq	r3,r10,81118574 <_strtoul_r+0x198>
81118518:	00c015c4 	movi	r3,87
8111851c:	80e1c83a 	sub	r16,r16,r3
81118520:	857fee16 	blt	r16,r21,811184dc <__reset+0xfb0f84dc>
81118524:	40001516 	blt	r8,zero,8111857c <_strtoul_r+0x1a0>
81118528:	b8000126 	beq	r23,zero,81118530 <_strtoul_r+0x154>
8111852c:	0085c83a 	sub	r2,zero,r2
81118530:	30000226 	beq	r6,zero,8111853c <_strtoul_r+0x160>
81118534:	4000151e 	bne	r8,zero,8111858c <_strtoul_r+0x1b0>
81118538:	34c00015 	stw	r19,0(r6)
8111853c:	dfc00917 	ldw	ra,36(sp)
81118540:	ddc00817 	ldw	r23,32(sp)
81118544:	dd800717 	ldw	r22,28(sp)
81118548:	dd400617 	ldw	r21,24(sp)
8111854c:	dd000517 	ldw	r20,20(sp)
81118550:	dcc00417 	ldw	r19,16(sp)
81118554:	dc800317 	ldw	r18,12(sp)
81118558:	dc400217 	ldw	r17,8(sp)
8111855c:	dc000117 	ldw	r16,4(sp)
81118560:	dec00a04 	addi	sp,sp,40
81118564:	f800283a 	ret
81118568:	643fdf0e 	bge	r12,r16,811184e8 <__reset+0xfb0f84e8>
8111856c:	023fffc4 	movi	r8,-1
81118570:	003fe006 	br	811184f4 <__reset+0xfb0f84f4>
81118574:	00c00dc4 	movi	r3,55
81118578:	003fe806 	br	8111851c <__reset+0xfb0f851c>
8111857c:	00800884 	movi	r2,34
81118580:	a0800015 	stw	r2,0(r20)
81118584:	00bfffc4 	movi	r2,-1
81118588:	303fec26 	beq	r6,zero,8111853c <__reset+0xfb0f853c>
8111858c:	24ffffc4 	addi	r19,r4,-1
81118590:	003fe906 	br	81118538 <__reset+0xfb0f8538>
81118594:	1c400084 	addi	r17,r3,2
81118598:	1c000043 	ldbu	r16,1(r3)
8111859c:	05c00044 	movi	r23,1
811185a0:	003fac06 	br	81118454 <__reset+0xfb0f8454>
811185a4:	1c400084 	addi	r17,r3,2
811185a8:	1c000043 	ldbu	r16,1(r3)
811185ac:	002f883a 	mov	r23,zero
811185b0:	003fa806 	br	81118454 <__reset+0xfb0f8454>
811185b4:	88800003 	ldbu	r2,0(r17)
811185b8:	00c01604 	movi	r3,88
811185bc:	108037cc 	andi	r2,r2,223
811185c0:	10c00c26 	beq	r2,r3,811185f4 <_strtoul_r+0x218>
811185c4:	05400204 	movi	r21,8
811185c8:	01c80034 	movhi	r7,8192
811185cc:	030001c4 	movi	r12,7
811185d0:	39ffffc4 	addi	r7,r7,-1
811185d4:	a817883a 	mov	r11,r21
811185d8:	003fb506 	br	811184b0 <__reset+0xfb0f84b0>
811185dc:	00800c04 	movi	r2,48
811185e0:	80800c1e 	bne	r16,r2,81118614 <_strtoul_r+0x238>
811185e4:	88800003 	ldbu	r2,0(r17)
811185e8:	00c01604 	movi	r3,88
811185ec:	108037cc 	andi	r2,r2,223
811185f0:	10c0081e 	bne	r2,r3,81118614 <_strtoul_r+0x238>
811185f4:	02c00404 	movi	r11,16
811185f8:	05840034 	movhi	r22,4096
811185fc:	8c000043 	ldbu	r16,1(r17)
81118600:	030003c4 	movi	r12,15
81118604:	8c400084 	addi	r17,r17,2
81118608:	b5bfffc4 	addi	r22,r22,-1
8111860c:	582b883a 	mov	r21,r11
81118610:	003f9e06 	br	8111848c <__reset+0xfb0f848c>
81118614:	01c40034 	movhi	r7,4096
81118618:	030003c4 	movi	r12,15
8111861c:	39ffffc4 	addi	r7,r7,-1
81118620:	a817883a 	mov	r11,r21
81118624:	003fa206 	br	811184b0 <__reset+0xfb0f84b0>

81118628 <strtoul>:
81118628:	00a044f4 	movhi	r2,33043
8111862c:	10976404 	addi	r2,r2,23952
81118630:	300f883a 	mov	r7,r6
81118634:	280d883a 	mov	r6,r5
81118638:	200b883a 	mov	r5,r4
8111863c:	11000017 	ldw	r4,0(r2)
81118640:	11183dc1 	jmpi	811183dc <_strtoul_r>

81118644 <_strtoull_r>:
81118644:	00a044f4 	movhi	r2,33043
81118648:	defff404 	addi	sp,sp,-48
8111864c:	10976704 	addi	r2,r2,23964
81118650:	dc400315 	stw	r17,12(sp)
81118654:	14400017 	ldw	r17,0(r2)
81118658:	dd400715 	stw	r21,28(sp)
8111865c:	dd000615 	stw	r20,24(sp)
81118660:	dcc00515 	stw	r19,20(sp)
81118664:	dc800415 	stw	r18,16(sp)
81118668:	dfc00b15 	stw	ra,44(sp)
8111866c:	df000a15 	stw	fp,40(sp)
81118670:	ddc00915 	stw	r23,36(sp)
81118674:	dd800815 	stw	r22,32(sp)
81118678:	dc000215 	stw	r16,8(sp)
8111867c:	2827883a 	mov	r19,r5
81118680:	202b883a 	mov	r21,r4
81118684:	3029883a 	mov	r20,r6
81118688:	3825883a 	mov	r18,r7
8111868c:	2807883a 	mov	r3,r5
81118690:	1c000003 	ldbu	r16,0(r3)
81118694:	1f000044 	addi	fp,r3,1
81118698:	1809883a 	mov	r4,r3
8111869c:	8c05883a 	add	r2,r17,r16
811186a0:	10800043 	ldbu	r2,1(r2)
811186a4:	e007883a 	mov	r3,fp
811186a8:	1080020c 	andi	r2,r2,8
811186ac:	103ff81e 	bne	r2,zero,81118690 <__reset+0xfb0f8690>
811186b0:	00800b44 	movi	r2,45
811186b4:	80806e26 	beq	r16,r2,81118870 <_strtoull_r+0x22c>
811186b8:	00800ac4 	movi	r2,43
811186bc:	80807026 	beq	r16,r2,81118880 <_strtoull_r+0x23c>
811186c0:	002f883a 	mov	r23,zero
811186c4:	90001426 	beq	r18,zero,81118718 <_strtoull_r+0xd4>
811186c8:	00800404 	movi	r2,16
811186cc:	90807c26 	beq	r18,r2,811188c0 <_strtoull_r+0x27c>
811186d0:	902dd7fa 	srai	r22,r18,31
811186d4:	013fffc4 	movi	r4,-1
811186d8:	200b883a 	mov	r5,r4
811186dc:	900d883a 	mov	r6,r18
811186e0:	b00f883a 	mov	r7,r22
811186e4:	111c9d00 	call	8111c9d0 <__udivdi3>
811186e8:	013fffc4 	movi	r4,-1
811186ec:	900d883a 	mov	r6,r18
811186f0:	b00f883a 	mov	r7,r22
811186f4:	200b883a 	mov	r5,r4
811186f8:	d8c00115 	stw	r3,4(sp)
811186fc:	d8800015 	stw	r2,0(sp)
81118700:	111cf480 	call	8111cf48 <__umoddi3>
81118704:	101b883a 	mov	r13,r2
81118708:	9015883a 	mov	r10,r18
8111870c:	dac00017 	ldw	r11,0(sp)
81118710:	da000117 	ldw	r8,4(sp)
81118714:	00000a06 	br	81118740 <_strtoull_r+0xfc>
81118718:	00800c04 	movi	r2,48
8111871c:	80805c26 	beq	r16,r2,81118890 <_strtoull_r+0x24c>
81118720:	02800284 	movi	r10,10
81118724:	02e666b4 	movhi	r11,39322
81118728:	020666b4 	movhi	r8,6554
8111872c:	03400144 	movi	r13,5
81118730:	5ae66644 	addi	r11,r11,-26215
81118734:	42266644 	addi	r8,r8,-26215
81118738:	002d883a 	mov	r22,zero
8111873c:	5025883a 	mov	r18,r10
81118740:	8c0b883a 	add	r5,r17,r16
81118744:	29400043 	ldbu	r5,1(r5)
81118748:	e009883a 	mov	r4,fp
8111874c:	000f883a 	mov	r7,zero
81118750:	2980010c 	andi	r6,r5,4
81118754:	0005883a 	mov	r2,zero
81118758:	0007883a 	mov	r3,zero
8111875c:	03000044 	movi	r12,1
81118760:	027fffc4 	movi	r9,-1
81118764:	30000d26 	beq	r6,zero,8111879c <_strtoull_r+0x158>
81118768:	843ff404 	addi	r16,r16,-48
8111876c:	8480110e 	bge	r16,r18,811187b4 <_strtoull_r+0x170>
81118770:	3a400426 	beq	r7,r9,81118784 <_strtoull_r+0x140>
81118774:	40c00236 	bltu	r8,r3,81118780 <_strtoull_r+0x13c>
81118778:	1a00231e 	bne	r3,r8,81118808 <_strtoull_r+0x1c4>
8111877c:	5880222e 	bgeu	r11,r2,81118808 <_strtoull_r+0x1c4>
81118780:	01ffffc4 	movi	r7,-1
81118784:	24000003 	ldbu	r16,0(r4)
81118788:	21000044 	addi	r4,r4,1
8111878c:	8c0b883a 	add	r5,r17,r16
81118790:	29400043 	ldbu	r5,1(r5)
81118794:	2980010c 	andi	r6,r5,4
81118798:	303ff31e 	bne	r6,zero,81118768 <__reset+0xfb0f8768>
8111879c:	294000cc 	andi	r5,r5,3
811187a0:	28000426 	beq	r5,zero,811187b4 <_strtoull_r+0x170>
811187a4:	2b002626 	beq	r5,r12,81118840 <_strtoull_r+0x1fc>
811187a8:	014015c4 	movi	r5,87
811187ac:	8161c83a 	sub	r16,r16,r5
811187b0:	84bfef16 	blt	r16,r18,81118770 <__reset+0xfb0f8770>
811187b4:	38002716 	blt	r7,zero,81118854 <_strtoull_r+0x210>
811187b8:	b8000426 	beq	r23,zero,811187cc <_strtoull_r+0x188>
811187bc:	0085c83a 	sub	r2,zero,r2
811187c0:	100ac03a 	cmpne	r5,r2,zero
811187c4:	00e1c83a 	sub	r16,zero,r3
811187c8:	8147c83a 	sub	r3,r16,r5
811187cc:	a0000226 	beq	r20,zero,811187d8 <_strtoull_r+0x194>
811187d0:	3800251e 	bne	r7,zero,81118868 <_strtoull_r+0x224>
811187d4:	a4c00015 	stw	r19,0(r20)
811187d8:	dfc00b17 	ldw	ra,44(sp)
811187dc:	df000a17 	ldw	fp,40(sp)
811187e0:	ddc00917 	ldw	r23,36(sp)
811187e4:	dd800817 	ldw	r22,32(sp)
811187e8:	dd400717 	ldw	r21,28(sp)
811187ec:	dd000617 	ldw	r20,24(sp)
811187f0:	dcc00517 	ldw	r19,20(sp)
811187f4:	dc800417 	ldw	r18,16(sp)
811187f8:	dc400317 	ldw	r17,12(sp)
811187fc:	dc000217 	ldw	r16,8(sp)
81118800:	dec00c04 	addi	sp,sp,48
81118804:	f800283a 	ret
81118808:	12c00f26 	beq	r2,r11,81118848 <_strtoull_r+0x204>
8111880c:	b08d383a 	mul	r6,r22,r2
81118810:	1a87383a 	mul	r3,r3,r10
81118814:	128a383a 	mulxuu	r5,r2,r10
81118818:	1285383a 	mul	r2,r2,r10
8111881c:	800fd7fa 	srai	r7,r16,31
81118820:	1987883a 	add	r3,r3,r6
81118824:	8085883a 	add	r2,r16,r2
81118828:	1947883a 	add	r3,r3,r5
8111882c:	38c7883a 	add	r3,r7,r3
81118830:	1421803a 	cmpltu	r16,r2,r16
81118834:	80c7883a 	add	r3,r16,r3
81118838:	01c00044 	movi	r7,1
8111883c:	003fd106 	br	81118784 <__reset+0xfb0f8784>
81118840:	01400dc4 	movi	r5,55
81118844:	003fd906 	br	811187ac <__reset+0xfb0f87ac>
81118848:	1a3ff01e 	bne	r3,r8,8111880c <__reset+0xfb0f880c>
8111884c:	6c3fcc16 	blt	r13,r16,81118780 <__reset+0xfb0f8780>
81118850:	003fee06 	br	8111880c <__reset+0xfb0f880c>
81118854:	00800884 	movi	r2,34
81118858:	a8800015 	stw	r2,0(r21)
8111885c:	00bfffc4 	movi	r2,-1
81118860:	1007883a 	mov	r3,r2
81118864:	a03fdc26 	beq	r20,zero,811187d8 <__reset+0xfb0f87d8>
81118868:	24ffffc4 	addi	r19,r4,-1
8111886c:	003fd906 	br	811187d4 <__reset+0xfb0f87d4>
81118870:	27000084 	addi	fp,r4,2
81118874:	24000043 	ldbu	r16,1(r4)
81118878:	05c00044 	movi	r23,1
8111887c:	003f9106 	br	811186c4 <__reset+0xfb0f86c4>
81118880:	27000084 	addi	fp,r4,2
81118884:	24000043 	ldbu	r16,1(r4)
81118888:	002f883a 	mov	r23,zero
8111888c:	003f8d06 	br	811186c4 <__reset+0xfb0f86c4>
81118890:	e0800003 	ldbu	r2,0(fp)
81118894:	00c01604 	movi	r3,88
81118898:	108037cc 	andi	r2,r2,223
8111889c:	10c00e26 	beq	r2,r3,811188d8 <_strtoull_r+0x294>
811188a0:	02800204 	movi	r10,8
811188a4:	02ffffc4 	movi	r11,-1
811188a8:	02080034 	movhi	r8,8192
811188ac:	034001c4 	movi	r13,7
811188b0:	42d1883a 	add	r8,r8,r11
811188b4:	002d883a 	mov	r22,zero
811188b8:	5025883a 	mov	r18,r10
811188bc:	003fa006 	br	81118740 <__reset+0xfb0f8740>
811188c0:	00800c04 	movi	r2,48
811188c4:	80800e1e 	bne	r16,r2,81118900 <_strtoull_r+0x2bc>
811188c8:	e0800003 	ldbu	r2,0(fp)
811188cc:	00c01604 	movi	r3,88
811188d0:	108037cc 	andi	r2,r2,223
811188d4:	10c00a1e 	bne	r2,r3,81118900 <_strtoull_r+0x2bc>
811188d8:	02800404 	movi	r10,16
811188dc:	02ffffc4 	movi	r11,-1
811188e0:	02040034 	movhi	r8,4096
811188e4:	e4000043 	ldbu	r16,1(fp)
811188e8:	034003c4 	movi	r13,15
811188ec:	e7000084 	addi	fp,fp,2
811188f0:	42d1883a 	add	r8,r8,r11
811188f4:	002d883a 	mov	r22,zero
811188f8:	5025883a 	mov	r18,r10
811188fc:	003f9006 	br	81118740 <__reset+0xfb0f8740>
81118900:	02ffffc4 	movi	r11,-1
81118904:	02040034 	movhi	r8,4096
81118908:	034003c4 	movi	r13,15
8111890c:	42d1883a 	add	r8,r8,r11
81118910:	9015883a 	mov	r10,r18
81118914:	002d883a 	mov	r22,zero
81118918:	003f8906 	br	81118740 <__reset+0xfb0f8740>

8111891c <__ssprint_r>:
8111891c:	30800217 	ldw	r2,8(r6)
81118920:	defff604 	addi	sp,sp,-40
81118924:	dc800215 	stw	r18,8(sp)
81118928:	dfc00915 	stw	ra,36(sp)
8111892c:	df000815 	stw	fp,32(sp)
81118930:	ddc00715 	stw	r23,28(sp)
81118934:	dd800615 	stw	r22,24(sp)
81118938:	dd400515 	stw	r21,20(sp)
8111893c:	dd000415 	stw	r20,16(sp)
81118940:	dcc00315 	stw	r19,12(sp)
81118944:	dc400115 	stw	r17,4(sp)
81118948:	dc000015 	stw	r16,0(sp)
8111894c:	3025883a 	mov	r18,r6
81118950:	10005826 	beq	r2,zero,81118ab4 <__ssprint_r+0x198>
81118954:	2027883a 	mov	r19,r4
81118958:	35c00017 	ldw	r23,0(r6)
8111895c:	29000017 	ldw	r4,0(r5)
81118960:	28800217 	ldw	r2,8(r5)
81118964:	2823883a 	mov	r17,r5
81118968:	0039883a 	mov	fp,zero
8111896c:	0021883a 	mov	r16,zero
81118970:	80003926 	beq	r16,zero,81118a58 <__ssprint_r+0x13c>
81118974:	102b883a 	mov	r21,r2
81118978:	102d883a 	mov	r22,r2
8111897c:	80803a36 	bltu	r16,r2,81118a68 <__ssprint_r+0x14c>
81118980:	88c0030b 	ldhu	r3,12(r17)
81118984:	1881200c 	andi	r2,r3,1152
81118988:	10002626 	beq	r2,zero,81118a24 <__ssprint_r+0x108>
8111898c:	88800517 	ldw	r2,20(r17)
81118990:	89400417 	ldw	r5,16(r17)
81118994:	81800044 	addi	r6,r16,1
81118998:	108f883a 	add	r7,r2,r2
8111899c:	3885883a 	add	r2,r7,r2
811189a0:	100ed7fa 	srli	r7,r2,31
811189a4:	216dc83a 	sub	r22,r4,r5
811189a8:	3589883a 	add	r4,r6,r22
811189ac:	3885883a 	add	r2,r7,r2
811189b0:	102bd07a 	srai	r21,r2,1
811189b4:	a80d883a 	mov	r6,r21
811189b8:	a900022e 	bgeu	r21,r4,811189c4 <__ssprint_r+0xa8>
811189bc:	202b883a 	mov	r21,r4
811189c0:	200d883a 	mov	r6,r4
811189c4:	18c1000c 	andi	r3,r3,1024
811189c8:	18002a26 	beq	r3,zero,81118a74 <__ssprint_r+0x158>
811189cc:	300b883a 	mov	r5,r6
811189d0:	9809883a 	mov	r4,r19
811189d4:	110aa600 	call	8110aa60 <_malloc_r>
811189d8:	1029883a 	mov	r20,r2
811189dc:	10002c26 	beq	r2,zero,81118a90 <__ssprint_r+0x174>
811189e0:	89400417 	ldw	r5,16(r17)
811189e4:	b00d883a 	mov	r6,r22
811189e8:	1009883a 	mov	r4,r2
811189ec:	110b26c0 	call	8110b26c <memcpy>
811189f0:	8880030b 	ldhu	r2,12(r17)
811189f4:	00fedfc4 	movi	r3,-1153
811189f8:	10c4703a 	and	r2,r2,r3
811189fc:	10802014 	ori	r2,r2,128
81118a00:	8880030d 	sth	r2,12(r17)
81118a04:	a589883a 	add	r4,r20,r22
81118a08:	adadc83a 	sub	r22,r21,r22
81118a0c:	8d400515 	stw	r21,20(r17)
81118a10:	8d800215 	stw	r22,8(r17)
81118a14:	8d000415 	stw	r20,16(r17)
81118a18:	89000015 	stw	r4,0(r17)
81118a1c:	802b883a 	mov	r21,r16
81118a20:	802d883a 	mov	r22,r16
81118a24:	b00d883a 	mov	r6,r22
81118a28:	e00b883a 	mov	r5,fp
81118a2c:	1114fb80 	call	81114fb8 <memmove>
81118a30:	88800217 	ldw	r2,8(r17)
81118a34:	89000017 	ldw	r4,0(r17)
81118a38:	90c00217 	ldw	r3,8(r18)
81118a3c:	1545c83a 	sub	r2,r2,r21
81118a40:	2589883a 	add	r4,r4,r22
81118a44:	88800215 	stw	r2,8(r17)
81118a48:	89000015 	stw	r4,0(r17)
81118a4c:	1c21c83a 	sub	r16,r3,r16
81118a50:	94000215 	stw	r16,8(r18)
81118a54:	80001726 	beq	r16,zero,81118ab4 <__ssprint_r+0x198>
81118a58:	bf000017 	ldw	fp,0(r23)
81118a5c:	bc000117 	ldw	r16,4(r23)
81118a60:	bdc00204 	addi	r23,r23,8
81118a64:	003fc206 	br	81118970 <__reset+0xfb0f8970>
81118a68:	802b883a 	mov	r21,r16
81118a6c:	802d883a 	mov	r22,r16
81118a70:	003fec06 	br	81118a24 <__reset+0xfb0f8a24>
81118a74:	9809883a 	mov	r4,r19
81118a78:	11162d80 	call	811162d8 <_realloc_r>
81118a7c:	1029883a 	mov	r20,r2
81118a80:	103fe01e 	bne	r2,zero,81118a04 <__reset+0xfb0f8a04>
81118a84:	89400417 	ldw	r5,16(r17)
81118a88:	9809883a 	mov	r4,r19
81118a8c:	111419c0 	call	8111419c <_free_r>
81118a90:	88c0030b 	ldhu	r3,12(r17)
81118a94:	00800304 	movi	r2,12
81118a98:	98800015 	stw	r2,0(r19)
81118a9c:	18c01014 	ori	r3,r3,64
81118aa0:	88c0030d 	sth	r3,12(r17)
81118aa4:	00bfffc4 	movi	r2,-1
81118aa8:	90000215 	stw	zero,8(r18)
81118aac:	90000115 	stw	zero,4(r18)
81118ab0:	00000206 	br	81118abc <__ssprint_r+0x1a0>
81118ab4:	90000115 	stw	zero,4(r18)
81118ab8:	0005883a 	mov	r2,zero
81118abc:	dfc00917 	ldw	ra,36(sp)
81118ac0:	df000817 	ldw	fp,32(sp)
81118ac4:	ddc00717 	ldw	r23,28(sp)
81118ac8:	dd800617 	ldw	r22,24(sp)
81118acc:	dd400517 	ldw	r21,20(sp)
81118ad0:	dd000417 	ldw	r20,16(sp)
81118ad4:	dcc00317 	ldw	r19,12(sp)
81118ad8:	dc800217 	ldw	r18,8(sp)
81118adc:	dc400117 	ldw	r17,4(sp)
81118ae0:	dc000017 	ldw	r16,0(sp)
81118ae4:	dec00a04 	addi	sp,sp,40
81118ae8:	f800283a 	ret

81118aec <___svfiprintf_internal_r>:
81118aec:	2880030b 	ldhu	r2,12(r5)
81118af0:	deffc804 	addi	sp,sp,-224
81118af4:	dcc03115 	stw	r19,196(sp)
81118af8:	dfc03715 	stw	ra,220(sp)
81118afc:	df003615 	stw	fp,216(sp)
81118b00:	ddc03515 	stw	r23,212(sp)
81118b04:	dd803415 	stw	r22,208(sp)
81118b08:	dd403315 	stw	r21,204(sp)
81118b0c:	dd003215 	stw	r20,200(sp)
81118b10:	dc803015 	stw	r18,192(sp)
81118b14:	dc402f15 	stw	r17,188(sp)
81118b18:	dc002e15 	stw	r16,184(sp)
81118b1c:	d9402715 	stw	r5,156(sp)
81118b20:	d9002a15 	stw	r4,168(sp)
81118b24:	1080200c 	andi	r2,r2,128
81118b28:	d9c02315 	stw	r7,140(sp)
81118b2c:	3027883a 	mov	r19,r6
81118b30:	10000226 	beq	r2,zero,81118b3c <___svfiprintf_internal_r+0x50>
81118b34:	28800417 	ldw	r2,16(r5)
81118b38:	10041d26 	beq	r2,zero,81119bb0 <___svfiprintf_internal_r+0x10c4>
81118b3c:	dac01a04 	addi	r11,sp,104
81118b40:	dac01e15 	stw	r11,120(sp)
81118b44:	d8801e17 	ldw	r2,120(sp)
81118b48:	dac019c4 	addi	r11,sp,103
81118b4c:	dd402a17 	ldw	r21,168(sp)
81118b50:	ddc02717 	ldw	r23,156(sp)
81118b54:	05a044f4 	movhi	r22,33043
81118b58:	052044f4 	movhi	r20,33043
81118b5c:	dac01f15 	stw	r11,124(sp)
81118b60:	12d7c83a 	sub	r11,r2,r11
81118b64:	b58efa04 	addi	r22,r22,15336
81118b68:	a50ef604 	addi	r20,r20,15320
81118b6c:	dec01a15 	stw	sp,104(sp)
81118b70:	d8001c15 	stw	zero,112(sp)
81118b74:	d8001b15 	stw	zero,108(sp)
81118b78:	d811883a 	mov	r8,sp
81118b7c:	d8002915 	stw	zero,164(sp)
81118b80:	d8002515 	stw	zero,148(sp)
81118b84:	dac02b15 	stw	r11,172(sp)
81118b88:	98800007 	ldb	r2,0(r19)
81118b8c:	1002dd26 	beq	r2,zero,81119704 <___svfiprintf_internal_r+0xc18>
81118b90:	00c00944 	movi	r3,37
81118b94:	9823883a 	mov	r17,r19
81118b98:	10c0021e 	bne	r2,r3,81118ba4 <___svfiprintf_internal_r+0xb8>
81118b9c:	00001406 	br	81118bf0 <___svfiprintf_internal_r+0x104>
81118ba0:	10c00326 	beq	r2,r3,81118bb0 <___svfiprintf_internal_r+0xc4>
81118ba4:	8c400044 	addi	r17,r17,1
81118ba8:	88800007 	ldb	r2,0(r17)
81118bac:	103ffc1e 	bne	r2,zero,81118ba0 <__reset+0xfb0f8ba0>
81118bb0:	8ce1c83a 	sub	r16,r17,r19
81118bb4:	80000e26 	beq	r16,zero,81118bf0 <___svfiprintf_internal_r+0x104>
81118bb8:	d8c01c17 	ldw	r3,112(sp)
81118bbc:	d8801b17 	ldw	r2,108(sp)
81118bc0:	44c00015 	stw	r19,0(r8)
81118bc4:	1c07883a 	add	r3,r3,r16
81118bc8:	10800044 	addi	r2,r2,1
81118bcc:	d8c01c15 	stw	r3,112(sp)
81118bd0:	44000115 	stw	r16,4(r8)
81118bd4:	d8801b15 	stw	r2,108(sp)
81118bd8:	00c001c4 	movi	r3,7
81118bdc:	18831e16 	blt	r3,r2,81119858 <___svfiprintf_internal_r+0xd6c>
81118be0:	42000204 	addi	r8,r8,8
81118be4:	dac02517 	ldw	r11,148(sp)
81118be8:	5c17883a 	add	r11,r11,r16
81118bec:	dac02515 	stw	r11,148(sp)
81118bf0:	88800007 	ldb	r2,0(r17)
81118bf4:	1002c526 	beq	r2,zero,8111970c <___svfiprintf_internal_r+0xc20>
81118bf8:	88c00047 	ldb	r3,1(r17)
81118bfc:	8cc00044 	addi	r19,r17,1
81118c00:	d8001d85 	stb	zero,118(sp)
81118c04:	0009883a 	mov	r4,zero
81118c08:	000f883a 	mov	r7,zero
81118c0c:	043fffc4 	movi	r16,-1
81118c10:	d8002415 	stw	zero,144(sp)
81118c14:	0025883a 	mov	r18,zero
81118c18:	01401604 	movi	r5,88
81118c1c:	01800244 	movi	r6,9
81118c20:	02800a84 	movi	r10,42
81118c24:	02401b04 	movi	r9,108
81118c28:	9cc00044 	addi	r19,r19,1
81118c2c:	18bff804 	addi	r2,r3,-32
81118c30:	2881dd36 	bltu	r5,r2,811193a8 <___svfiprintf_internal_r+0x8bc>
81118c34:	100490ba 	slli	r2,r2,2
81118c38:	02e044b4 	movhi	r11,33042
81118c3c:	5ae31304 	addi	r11,r11,-29620
81118c40:	12c5883a 	add	r2,r2,r11
81118c44:	10800017 	ldw	r2,0(r2)
81118c48:	1000683a 	jmp	r2
81118c4c:	81118e48 	cmpgei	r4,r16,17977
81118c50:	811193a8 	cmpgeui	r4,r16,17998
81118c54:	811193a8 	cmpgeui	r4,r16,17998
81118c58:	81118e3c 	xorhi	r4,r16,17976
81118c5c:	811193a8 	cmpgeui	r4,r16,17998
81118c60:	811193a8 	cmpgeui	r4,r16,17998
81118c64:	811193a8 	cmpgeui	r4,r16,17998
81118c68:	811193a8 	cmpgeui	r4,r16,17998
81118c6c:	811193a8 	cmpgeui	r4,r16,17998
81118c70:	811193a8 	cmpgeui	r4,r16,17998
81118c74:	81118db0 	cmpltui	r4,r16,17974
81118c78:	81118f8c 	andi	r4,r16,17982
81118c7c:	811193a8 	cmpgeui	r4,r16,17998
81118c80:	81118ddc 	xori	r4,r16,17975
81118c84:	811193dc 	xori	r4,r16,17999
81118c88:	811193a8 	cmpgeui	r4,r16,17998
81118c8c:	811193d0 	cmplti	r4,r16,17999
81118c90:	81119370 	cmpltui	r4,r16,17997
81118c94:	81119370 	cmpltui	r4,r16,17997
81118c98:	81119370 	cmpltui	r4,r16,17997
81118c9c:	81119370 	cmpltui	r4,r16,17997
81118ca0:	81119370 	cmpltui	r4,r16,17997
81118ca4:	81119370 	cmpltui	r4,r16,17997
81118ca8:	81119370 	cmpltui	r4,r16,17997
81118cac:	81119370 	cmpltui	r4,r16,17997
81118cb0:	81119370 	cmpltui	r4,r16,17997
81118cb4:	811193a8 	cmpgeui	r4,r16,17998
81118cb8:	811193a8 	cmpgeui	r4,r16,17998
81118cbc:	811193a8 	cmpgeui	r4,r16,17998
81118cc0:	811193a8 	cmpgeui	r4,r16,17998
81118cc4:	811193a8 	cmpgeui	r4,r16,17998
81118cc8:	811193a8 	cmpgeui	r4,r16,17998
81118ccc:	811193a8 	cmpgeui	r4,r16,17998
81118cd0:	811193a8 	cmpgeui	r4,r16,17998
81118cd4:	811193a8 	cmpgeui	r4,r16,17998
81118cd8:	811193a8 	cmpgeui	r4,r16,17998
81118cdc:	8111930c 	andi	r4,r16,17996
81118ce0:	811193a8 	cmpgeui	r4,r16,17998
81118ce4:	811193a8 	cmpgeui	r4,r16,17998
81118ce8:	811193a8 	cmpgeui	r4,r16,17998
81118cec:	811193a8 	cmpgeui	r4,r16,17998
81118cf0:	811193a8 	cmpgeui	r4,r16,17998
81118cf4:	811193a8 	cmpgeui	r4,r16,17998
81118cf8:	811193a8 	cmpgeui	r4,r16,17998
81118cfc:	811193a8 	cmpgeui	r4,r16,17998
81118d00:	811193a8 	cmpgeui	r4,r16,17998
81118d04:	811193a8 	cmpgeui	r4,r16,17998
81118d08:	81119484 	addi	r4,r16,18002
81118d0c:	811193a8 	cmpgeui	r4,r16,17998
81118d10:	811193a8 	cmpgeui	r4,r16,17998
81118d14:	811193a8 	cmpgeui	r4,r16,17998
81118d18:	811193a8 	cmpgeui	r4,r16,17998
81118d1c:	811193a8 	cmpgeui	r4,r16,17998
81118d20:	8111941c 	xori	r4,r16,18000
81118d24:	811193a8 	cmpgeui	r4,r16,17998
81118d28:	811193a8 	cmpgeui	r4,r16,17998
81118d2c:	81119150 	cmplti	r4,r16,17989
81118d30:	811193a8 	cmpgeui	r4,r16,17998
81118d34:	811193a8 	cmpgeui	r4,r16,17998
81118d38:	811193a8 	cmpgeui	r4,r16,17998
81118d3c:	811193a8 	cmpgeui	r4,r16,17998
81118d40:	811193a8 	cmpgeui	r4,r16,17998
81118d44:	811193a8 	cmpgeui	r4,r16,17998
81118d48:	811193a8 	cmpgeui	r4,r16,17998
81118d4c:	811193a8 	cmpgeui	r4,r16,17998
81118d50:	811193a8 	cmpgeui	r4,r16,17998
81118d54:	811193a8 	cmpgeui	r4,r16,17998
81118d58:	81119040 	call	88111904 <__reset+0x20f1904>
81118d5c:	811191ec 	andhi	r4,r16,17991
81118d60:	811193a8 	cmpgeui	r4,r16,17998
81118d64:	811193a8 	cmpgeui	r4,r16,17998
81118d68:	811193a8 	cmpgeui	r4,r16,17998
81118d6c:	811191e0 	cmpeqi	r4,r16,17991
81118d70:	811191ec 	andhi	r4,r16,17991
81118d74:	811193a8 	cmpgeui	r4,r16,17998
81118d78:	811193a8 	cmpgeui	r4,r16,17998
81118d7c:	811191d0 	cmplti	r4,r16,17991
81118d80:	811193a8 	cmpgeui	r4,r16,17998
81118d84:	81119194 	ori	r4,r16,17990
81118d88:	81118f9c 	xori	r4,r16,17982
81118d8c:	81118de8 	cmpgeui	r4,r16,17975
81118d90:	81119300 	call	88111930 <__reset+0x20f1930>
81118d94:	811193a8 	cmpgeui	r4,r16,17998
81118d98:	811192b4 	orhi	r4,r16,17994
81118d9c:	811193a8 	cmpgeui	r4,r16,17998
81118da0:	81118f0c 	andi	r4,r16,17980
81118da4:	811193a8 	cmpgeui	r4,r16,17998
81118da8:	811193a8 	cmpgeui	r4,r16,17998
81118dac:	81118e68 	cmpgeui	r4,r16,17977
81118db0:	dac02317 	ldw	r11,140(sp)
81118db4:	5ac00017 	ldw	r11,0(r11)
81118db8:	dac02415 	stw	r11,144(sp)
81118dbc:	dac02317 	ldw	r11,140(sp)
81118dc0:	58800104 	addi	r2,r11,4
81118dc4:	dac02417 	ldw	r11,144(sp)
81118dc8:	5802e90e 	bge	r11,zero,81119970 <___svfiprintf_internal_r+0xe84>
81118dcc:	dac02417 	ldw	r11,144(sp)
81118dd0:	d8802315 	stw	r2,140(sp)
81118dd4:	02d7c83a 	sub	r11,zero,r11
81118dd8:	dac02415 	stw	r11,144(sp)
81118ddc:	94800114 	ori	r18,r18,4
81118de0:	98c00007 	ldb	r3,0(r19)
81118de4:	003f9006 	br	81118c28 <__reset+0xfb0f8c28>
81118de8:	00800c04 	movi	r2,48
81118dec:	dac02317 	ldw	r11,140(sp)
81118df0:	d8801d05 	stb	r2,116(sp)
81118df4:	00801e04 	movi	r2,120
81118df8:	d8801d45 	stb	r2,117(sp)
81118dfc:	d8001d85 	stb	zero,118(sp)
81118e00:	58c00104 	addi	r3,r11,4
81118e04:	5f000017 	ldw	fp,0(r11)
81118e08:	0013883a 	mov	r9,zero
81118e0c:	90800094 	ori	r2,r18,2
81118e10:	80032b16 	blt	r16,zero,81119ac0 <___svfiprintf_internal_r+0xfd4>
81118e14:	00bfdfc4 	movi	r2,-129
81118e18:	90a4703a 	and	r18,r18,r2
81118e1c:	d8c02315 	stw	r3,140(sp)
81118e20:	94800094 	ori	r18,r18,2
81118e24:	e002dc26 	beq	fp,zero,81119998 <___svfiprintf_internal_r+0xeac>
81118e28:	012044f4 	movhi	r4,33043
81118e2c:	210dcb04 	addi	r4,r4,14124
81118e30:	0015883a 	mov	r10,zero
81118e34:	d9002915 	stw	r4,164(sp)
81118e38:	00002306 	br	81118ec8 <___svfiprintf_internal_r+0x3dc>
81118e3c:	94800054 	ori	r18,r18,1
81118e40:	98c00007 	ldb	r3,0(r19)
81118e44:	003f7806 	br	81118c28 <__reset+0xfb0f8c28>
81118e48:	38803fcc 	andi	r2,r7,255
81118e4c:	1080201c 	xori	r2,r2,128
81118e50:	10bfe004 	addi	r2,r2,-128
81118e54:	1002f31e 	bne	r2,zero,81119a24 <___svfiprintf_internal_r+0xf38>
81118e58:	01000044 	movi	r4,1
81118e5c:	01c00804 	movi	r7,32
81118e60:	98c00007 	ldb	r3,0(r19)
81118e64:	003f7006 	br	81118c28 <__reset+0xfb0f8c28>
81118e68:	21003fcc 	andi	r4,r4,255
81118e6c:	2003aa1e 	bne	r4,zero,81119d18 <___svfiprintf_internal_r+0x122c>
81118e70:	00a044f4 	movhi	r2,33043
81118e74:	108dcb04 	addi	r2,r2,14124
81118e78:	d8802915 	stw	r2,164(sp)
81118e7c:	9080080c 	andi	r2,r18,32
81118e80:	1000ba26 	beq	r2,zero,8111916c <___svfiprintf_internal_r+0x680>
81118e84:	dac02317 	ldw	r11,140(sp)
81118e88:	5f000017 	ldw	fp,0(r11)
81118e8c:	5a400117 	ldw	r9,4(r11)
81118e90:	5ac00204 	addi	r11,r11,8
81118e94:	dac02315 	stw	r11,140(sp)
81118e98:	9080004c 	andi	r2,r18,1
81118e9c:	10029026 	beq	r2,zero,811198e0 <___svfiprintf_internal_r+0xdf4>
81118ea0:	e244b03a 	or	r2,fp,r9
81118ea4:	1002d41e 	bne	r2,zero,811199f8 <___svfiprintf_internal_r+0xf0c>
81118ea8:	d8001d85 	stb	zero,118(sp)
81118eac:	80030b16 	blt	r16,zero,81119adc <___svfiprintf_internal_r+0xff0>
81118eb0:	00bfdfc4 	movi	r2,-129
81118eb4:	90a4703a 	and	r18,r18,r2
81118eb8:	0015883a 	mov	r10,zero
81118ebc:	80002426 	beq	r16,zero,81118f50 <___svfiprintf_internal_r+0x464>
81118ec0:	0039883a 	mov	fp,zero
81118ec4:	0013883a 	mov	r9,zero
81118ec8:	d9002917 	ldw	r4,164(sp)
81118ecc:	dc401a04 	addi	r17,sp,104
81118ed0:	e08003cc 	andi	r2,fp,15
81118ed4:	4806973a 	slli	r3,r9,28
81118ed8:	2085883a 	add	r2,r4,r2
81118edc:	e038d13a 	srli	fp,fp,4
81118ee0:	10800003 	ldbu	r2,0(r2)
81118ee4:	4812d13a 	srli	r9,r9,4
81118ee8:	8c7fffc4 	addi	r17,r17,-1
81118eec:	1f38b03a 	or	fp,r3,fp
81118ef0:	88800005 	stb	r2,0(r17)
81118ef4:	e244b03a 	or	r2,fp,r9
81118ef8:	103ff51e 	bne	r2,zero,81118ed0 <__reset+0xfb0f8ed0>
81118efc:	dac01e17 	ldw	r11,120(sp)
81118f00:	5c57c83a 	sub	r11,r11,r17
81118f04:	dac02115 	stw	r11,132(sp)
81118f08:	00001406 	br	81118f5c <___svfiprintf_internal_r+0x470>
81118f0c:	21003fcc 	andi	r4,r4,255
81118f10:	2003741e 	bne	r4,zero,81119ce4 <___svfiprintf_internal_r+0x11f8>
81118f14:	9080080c 	andi	r2,r18,32
81118f18:	10014526 	beq	r2,zero,81119430 <___svfiprintf_internal_r+0x944>
81118f1c:	dac02317 	ldw	r11,140(sp)
81118f20:	d8001d85 	stb	zero,118(sp)
81118f24:	58c00204 	addi	r3,r11,8
81118f28:	5f000017 	ldw	fp,0(r11)
81118f2c:	5a400117 	ldw	r9,4(r11)
81118f30:	8002d916 	blt	r16,zero,81119a98 <___svfiprintf_internal_r+0xfac>
81118f34:	013fdfc4 	movi	r4,-129
81118f38:	e244b03a 	or	r2,fp,r9
81118f3c:	d8c02315 	stw	r3,140(sp)
81118f40:	9124703a 	and	r18,r18,r4
81118f44:	0015883a 	mov	r10,zero
81118f48:	1000b91e 	bne	r2,zero,81119230 <___svfiprintf_internal_r+0x744>
81118f4c:	8002e61e 	bne	r16,zero,81119ae8 <___svfiprintf_internal_r+0xffc>
81118f50:	0021883a 	mov	r16,zero
81118f54:	d8002115 	stw	zero,132(sp)
81118f58:	dc401a04 	addi	r17,sp,104
81118f5c:	d8c02117 	ldw	r3,132(sp)
81118f60:	dc002015 	stw	r16,128(sp)
81118f64:	80c0010e 	bge	r16,r3,81118f6c <___svfiprintf_internal_r+0x480>
81118f68:	d8c02015 	stw	r3,128(sp)
81118f6c:	52803fcc 	andi	r10,r10,255
81118f70:	5280201c 	xori	r10,r10,128
81118f74:	52bfe004 	addi	r10,r10,-128
81118f78:	50003c26 	beq	r10,zero,8111906c <___svfiprintf_internal_r+0x580>
81118f7c:	dac02017 	ldw	r11,128(sp)
81118f80:	5ac00044 	addi	r11,r11,1
81118f84:	dac02015 	stw	r11,128(sp)
81118f88:	00003806 	br	8111906c <___svfiprintf_internal_r+0x580>
81118f8c:	01000044 	movi	r4,1
81118f90:	01c00ac4 	movi	r7,43
81118f94:	98c00007 	ldb	r3,0(r19)
81118f98:	003f2306 	br	81118c28 <__reset+0xfb0f8c28>
81118f9c:	21003fcc 	andi	r4,r4,255
81118fa0:	2003481e 	bne	r4,zero,81119cc4 <___svfiprintf_internal_r+0x11d8>
81118fa4:	9080080c 	andi	r2,r18,32
81118fa8:	10013b26 	beq	r2,zero,81119498 <___svfiprintf_internal_r+0x9ac>
81118fac:	dac02317 	ldw	r11,140(sp)
81118fb0:	d8001d85 	stb	zero,118(sp)
81118fb4:	58800204 	addi	r2,r11,8
81118fb8:	5f000017 	ldw	fp,0(r11)
81118fbc:	5a400117 	ldw	r9,4(r11)
81118fc0:	8002a816 	blt	r16,zero,81119a64 <___svfiprintf_internal_r+0xf78>
81118fc4:	013fdfc4 	movi	r4,-129
81118fc8:	e246b03a 	or	r3,fp,r9
81118fcc:	d8802315 	stw	r2,140(sp)
81118fd0:	9124703a 	and	r18,r18,r4
81118fd4:	18013c26 	beq	r3,zero,811194c8 <___svfiprintf_internal_r+0x9dc>
81118fd8:	0015883a 	mov	r10,zero
81118fdc:	dc401a04 	addi	r17,sp,104
81118fe0:	e006d0fa 	srli	r3,fp,3
81118fe4:	4808977a 	slli	r4,r9,29
81118fe8:	4812d0fa 	srli	r9,r9,3
81118fec:	e70001cc 	andi	fp,fp,7
81118ff0:	e0800c04 	addi	r2,fp,48
81118ff4:	8c7fffc4 	addi	r17,r17,-1
81118ff8:	20f8b03a 	or	fp,r4,r3
81118ffc:	88800005 	stb	r2,0(r17)
81119000:	e246b03a 	or	r3,fp,r9
81119004:	183ff61e 	bne	r3,zero,81118fe0 <__reset+0xfb0f8fe0>
81119008:	90c0004c 	andi	r3,r18,1
8111900c:	1800a526 	beq	r3,zero,811192a4 <___svfiprintf_internal_r+0x7b8>
81119010:	10803fcc 	andi	r2,r2,255
81119014:	1080201c 	xori	r2,r2,128
81119018:	10bfe004 	addi	r2,r2,-128
8111901c:	00c00c04 	movi	r3,48
81119020:	10ffb626 	beq	r2,r3,81118efc <__reset+0xfb0f8efc>
81119024:	88ffffc5 	stb	r3,-1(r17)
81119028:	d8c01e17 	ldw	r3,120(sp)
8111902c:	88bfffc4 	addi	r2,r17,-1
81119030:	1023883a 	mov	r17,r2
81119034:	1887c83a 	sub	r3,r3,r2
81119038:	d8c02115 	stw	r3,132(sp)
8111903c:	003fc706 	br	81118f5c <__reset+0xfb0f8f5c>
81119040:	dac02317 	ldw	r11,140(sp)
81119044:	00c00044 	movi	r3,1
81119048:	d8c02015 	stw	r3,128(sp)
8111904c:	58800017 	ldw	r2,0(r11)
81119050:	5ac00104 	addi	r11,r11,4
81119054:	d8001d85 	stb	zero,118(sp)
81119058:	d8801005 	stb	r2,64(sp)
8111905c:	dac02315 	stw	r11,140(sp)
81119060:	d8c02115 	stw	r3,132(sp)
81119064:	dc401004 	addi	r17,sp,64
81119068:	0021883a 	mov	r16,zero
8111906c:	90c0008c 	andi	r3,r18,2
81119070:	d8c02215 	stw	r3,136(sp)
81119074:	18000326 	beq	r3,zero,81119084 <___svfiprintf_internal_r+0x598>
81119078:	dac02017 	ldw	r11,128(sp)
8111907c:	5ac00084 	addi	r11,r11,2
81119080:	dac02015 	stw	r11,128(sp)
81119084:	90c0210c 	andi	r3,r18,132
81119088:	d8c02615 	stw	r3,152(sp)
8111908c:	1801131e 	bne	r3,zero,811194dc <___svfiprintf_internal_r+0x9f0>
81119090:	dac02417 	ldw	r11,144(sp)
81119094:	d8c02017 	ldw	r3,128(sp)
81119098:	58f9c83a 	sub	fp,r11,r3
8111909c:	07010f0e 	bge	zero,fp,811194dc <___svfiprintf_internal_r+0x9f0>
811190a0:	02400404 	movi	r9,16
811190a4:	d8c01c17 	ldw	r3,112(sp)
811190a8:	d8801b17 	ldw	r2,108(sp)
811190ac:	4f02d60e 	bge	r9,fp,81119c08 <___svfiprintf_internal_r+0x111c>
811190b0:	016044f4 	movhi	r5,33043
811190b4:	294efa04 	addi	r5,r5,15336
811190b8:	d9402815 	stw	r5,160(sp)
811190bc:	028001c4 	movi	r10,7
811190c0:	00000306 	br	811190d0 <___svfiprintf_internal_r+0x5e4>
811190c4:	e73ffc04 	addi	fp,fp,-16
811190c8:	42000204 	addi	r8,r8,8
811190cc:	4f00150e 	bge	r9,fp,81119124 <___svfiprintf_internal_r+0x638>
811190d0:	18c00404 	addi	r3,r3,16
811190d4:	10800044 	addi	r2,r2,1
811190d8:	45800015 	stw	r22,0(r8)
811190dc:	42400115 	stw	r9,4(r8)
811190e0:	d8c01c15 	stw	r3,112(sp)
811190e4:	d8801b15 	stw	r2,108(sp)
811190e8:	50bff60e 	bge	r10,r2,811190c4 <__reset+0xfb0f90c4>
811190ec:	d9801a04 	addi	r6,sp,104
811190f0:	b80b883a 	mov	r5,r23
811190f4:	a809883a 	mov	r4,r21
811190f8:	da402c15 	stw	r9,176(sp)
811190fc:	da802d15 	stw	r10,180(sp)
81119100:	111891c0 	call	8111891c <__ssprint_r>
81119104:	da402c17 	ldw	r9,176(sp)
81119108:	da802d17 	ldw	r10,180(sp)
8111910c:	1001851e 	bne	r2,zero,81119724 <___svfiprintf_internal_r+0xc38>
81119110:	e73ffc04 	addi	fp,fp,-16
81119114:	d8c01c17 	ldw	r3,112(sp)
81119118:	d8801b17 	ldw	r2,108(sp)
8111911c:	d811883a 	mov	r8,sp
81119120:	4f3feb16 	blt	r9,fp,811190d0 <__reset+0xfb0f90d0>
81119124:	dac02817 	ldw	r11,160(sp)
81119128:	e0c7883a 	add	r3,fp,r3
8111912c:	10800044 	addi	r2,r2,1
81119130:	42c00015 	stw	r11,0(r8)
81119134:	47000115 	stw	fp,4(r8)
81119138:	d8c01c15 	stw	r3,112(sp)
8111913c:	d8801b15 	stw	r2,108(sp)
81119140:	010001c4 	movi	r4,7
81119144:	2081ee16 	blt	r4,r2,81119900 <___svfiprintf_internal_r+0xe14>
81119148:	42000204 	addi	r8,r8,8
8111914c:	0000e506 	br	811194e4 <___svfiprintf_internal_r+0x9f8>
81119150:	21003fcc 	andi	r4,r4,255
81119154:	2002dd1e 	bne	r4,zero,81119ccc <___svfiprintf_internal_r+0x11e0>
81119158:	00a044f4 	movhi	r2,33043
8111915c:	108dc604 	addi	r2,r2,14104
81119160:	d8802915 	stw	r2,164(sp)
81119164:	9080080c 	andi	r2,r18,32
81119168:	103f461e 	bne	r2,zero,81118e84 <__reset+0xfb0f8e84>
8111916c:	9080040c 	andi	r2,r18,16
81119170:	10022e1e 	bne	r2,zero,81119a2c <___svfiprintf_internal_r+0xf40>
81119174:	9080100c 	andi	r2,r18,64
81119178:	dac02317 	ldw	r11,140(sp)
8111917c:	10027326 	beq	r2,zero,81119b4c <___svfiprintf_internal_r+0x1060>
81119180:	5f00000b 	ldhu	fp,0(r11)
81119184:	5ac00104 	addi	r11,r11,4
81119188:	0013883a 	mov	r9,zero
8111918c:	dac02315 	stw	r11,140(sp)
81119190:	003f4106 	br	81118e98 <__reset+0xfb0f8e98>
81119194:	21003fcc 	andi	r4,r4,255
81119198:	2002e11e 	bne	r4,zero,81119d20 <___svfiprintf_internal_r+0x1234>
8111919c:	9080080c 	andi	r2,r18,32
811191a0:	1002011e 	bne	r2,zero,811199a8 <___svfiprintf_internal_r+0xebc>
811191a4:	9080040c 	andi	r2,r18,16
811191a8:	10023e1e 	bne	r2,zero,81119aa4 <___svfiprintf_internal_r+0xfb8>
811191ac:	9480100c 	andi	r18,r18,64
811191b0:	90023c26 	beq	r18,zero,81119aa4 <___svfiprintf_internal_r+0xfb8>
811191b4:	dac02317 	ldw	r11,140(sp)
811191b8:	58800017 	ldw	r2,0(r11)
811191bc:	5ac00104 	addi	r11,r11,4
811191c0:	dac02315 	stw	r11,140(sp)
811191c4:	dac02517 	ldw	r11,148(sp)
811191c8:	12c0000d 	sth	r11,0(r2)
811191cc:	003e6e06 	br	81118b88 <__reset+0xfb0f8b88>
811191d0:	98c00007 	ldb	r3,0(r19)
811191d4:	1a422926 	beq	r3,r9,81119a7c <___svfiprintf_internal_r+0xf90>
811191d8:	94800414 	ori	r18,r18,16
811191dc:	003e9206 	br	81118c28 <__reset+0xfb0f8c28>
811191e0:	94801014 	ori	r18,r18,64
811191e4:	98c00007 	ldb	r3,0(r19)
811191e8:	003e8f06 	br	81118c28 <__reset+0xfb0f8c28>
811191ec:	21003fcc 	andi	r4,r4,255
811191f0:	2002c71e 	bne	r4,zero,81119d10 <___svfiprintf_internal_r+0x1224>
811191f4:	9080080c 	andi	r2,r18,32
811191f8:	10004926 	beq	r2,zero,81119320 <___svfiprintf_internal_r+0x834>
811191fc:	dac02317 	ldw	r11,140(sp)
81119200:	58800117 	ldw	r2,4(r11)
81119204:	5f000017 	ldw	fp,0(r11)
81119208:	5ac00204 	addi	r11,r11,8
8111920c:	dac02315 	stw	r11,140(sp)
81119210:	1013883a 	mov	r9,r2
81119214:	10004b16 	blt	r2,zero,81119344 <___svfiprintf_internal_r+0x858>
81119218:	da801d83 	ldbu	r10,118(sp)
8111921c:	8001cb16 	blt	r16,zero,8111994c <___svfiprintf_internal_r+0xe60>
81119220:	00ffdfc4 	movi	r3,-129
81119224:	e244b03a 	or	r2,fp,r9
81119228:	90e4703a 	and	r18,r18,r3
8111922c:	103f4726 	beq	r2,zero,81118f4c <__reset+0xfb0f8f4c>
81119230:	48008c26 	beq	r9,zero,81119464 <___svfiprintf_internal_r+0x978>
81119234:	dc802015 	stw	r18,128(sp)
81119238:	dc002115 	stw	r16,132(sp)
8111923c:	dc401a04 	addi	r17,sp,104
81119240:	e021883a 	mov	r16,fp
81119244:	da002215 	stw	r8,136(sp)
81119248:	5039883a 	mov	fp,r10
8111924c:	4825883a 	mov	r18,r9
81119250:	8009883a 	mov	r4,r16
81119254:	900b883a 	mov	r5,r18
81119258:	01800284 	movi	r6,10
8111925c:	000f883a 	mov	r7,zero
81119260:	111cf480 	call	8111cf48 <__umoddi3>
81119264:	10800c04 	addi	r2,r2,48
81119268:	8c7fffc4 	addi	r17,r17,-1
8111926c:	8009883a 	mov	r4,r16
81119270:	900b883a 	mov	r5,r18
81119274:	88800005 	stb	r2,0(r17)
81119278:	01800284 	movi	r6,10
8111927c:	000f883a 	mov	r7,zero
81119280:	111c9d00 	call	8111c9d0 <__udivdi3>
81119284:	1021883a 	mov	r16,r2
81119288:	10c4b03a 	or	r2,r2,r3
8111928c:	1825883a 	mov	r18,r3
81119290:	103fef1e 	bne	r2,zero,81119250 <__reset+0xfb0f9250>
81119294:	dc802017 	ldw	r18,128(sp)
81119298:	dc002117 	ldw	r16,132(sp)
8111929c:	da002217 	ldw	r8,136(sp)
811192a0:	e015883a 	mov	r10,fp
811192a4:	d8c01e17 	ldw	r3,120(sp)
811192a8:	1c47c83a 	sub	r3,r3,r17
811192ac:	d8c02115 	stw	r3,132(sp)
811192b0:	003f2a06 	br	81118f5c <__reset+0xfb0f8f5c>
811192b4:	dac02317 	ldw	r11,140(sp)
811192b8:	d8001d85 	stb	zero,118(sp)
811192bc:	5c400017 	ldw	r17,0(r11)
811192c0:	5f000104 	addi	fp,r11,4
811192c4:	88022f26 	beq	r17,zero,81119b84 <___svfiprintf_internal_r+0x1098>
811192c8:	80022516 	blt	r16,zero,81119b60 <___svfiprintf_internal_r+0x1074>
811192cc:	800d883a 	mov	r6,r16
811192d0:	000b883a 	mov	r5,zero
811192d4:	8809883a 	mov	r4,r17
811192d8:	da002c15 	stw	r8,176(sp)
811192dc:	1114ed40 	call	81114ed4 <memchr>
811192e0:	da002c17 	ldw	r8,176(sp)
811192e4:	10026426 	beq	r2,zero,81119c78 <___svfiprintf_internal_r+0x118c>
811192e8:	1445c83a 	sub	r2,r2,r17
811192ec:	d8802115 	stw	r2,132(sp)
811192f0:	da801d83 	ldbu	r10,118(sp)
811192f4:	df002315 	stw	fp,140(sp)
811192f8:	0021883a 	mov	r16,zero
811192fc:	003f1706 	br	81118f5c <__reset+0xfb0f8f5c>
81119300:	94800814 	ori	r18,r18,32
81119304:	98c00007 	ldb	r3,0(r19)
81119308:	003e4706 	br	81118c28 <__reset+0xfb0f8c28>
8111930c:	21003fcc 	andi	r4,r4,255
81119310:	2002701e 	bne	r4,zero,81119cd4 <___svfiprintf_internal_r+0x11e8>
81119314:	94800414 	ori	r18,r18,16
81119318:	9080080c 	andi	r2,r18,32
8111931c:	103fb71e 	bne	r2,zero,811191fc <__reset+0xfb0f91fc>
81119320:	9080040c 	andi	r2,r18,16
81119324:	1001ab26 	beq	r2,zero,811199d4 <___svfiprintf_internal_r+0xee8>
81119328:	dac02317 	ldw	r11,140(sp)
8111932c:	5f000017 	ldw	fp,0(r11)
81119330:	5ac00104 	addi	r11,r11,4
81119334:	dac02315 	stw	r11,140(sp)
81119338:	e013d7fa 	srai	r9,fp,31
8111933c:	4805883a 	mov	r2,r9
81119340:	103fb50e 	bge	r2,zero,81119218 <__reset+0xfb0f9218>
81119344:	0739c83a 	sub	fp,zero,fp
81119348:	02800b44 	movi	r10,45
8111934c:	e004c03a 	cmpne	r2,fp,zero
81119350:	0253c83a 	sub	r9,zero,r9
81119354:	da801d85 	stb	r10,118(sp)
81119358:	4893c83a 	sub	r9,r9,r2
8111935c:	80023016 	blt	r16,zero,81119c20 <___svfiprintf_internal_r+0x1134>
81119360:	00bfdfc4 	movi	r2,-129
81119364:	90a4703a 	and	r18,r18,r2
81119368:	483fb21e 	bne	r9,zero,81119234 <__reset+0xfb0f9234>
8111936c:	00003d06 	br	81119464 <___svfiprintf_internal_r+0x978>
81119370:	9817883a 	mov	r11,r19
81119374:	d8002415 	stw	zero,144(sp)
81119378:	18bff404 	addi	r2,r3,-48
8111937c:	0019883a 	mov	r12,zero
81119380:	58c00007 	ldb	r3,0(r11)
81119384:	630002a4 	muli	r12,r12,10
81119388:	9cc00044 	addi	r19,r19,1
8111938c:	9817883a 	mov	r11,r19
81119390:	1319883a 	add	r12,r2,r12
81119394:	18bff404 	addi	r2,r3,-48
81119398:	30bff92e 	bgeu	r6,r2,81119380 <__reset+0xfb0f9380>
8111939c:	db002415 	stw	r12,144(sp)
811193a0:	18bff804 	addi	r2,r3,-32
811193a4:	28be232e 	bgeu	r5,r2,81118c34 <__reset+0xfb0f8c34>
811193a8:	21003fcc 	andi	r4,r4,255
811193ac:	20024b1e 	bne	r4,zero,81119cdc <___svfiprintf_internal_r+0x11f0>
811193b0:	1800d626 	beq	r3,zero,8111970c <___svfiprintf_internal_r+0xc20>
811193b4:	02c00044 	movi	r11,1
811193b8:	dac02015 	stw	r11,128(sp)
811193bc:	d8c01005 	stb	r3,64(sp)
811193c0:	d8001d85 	stb	zero,118(sp)
811193c4:	dac02115 	stw	r11,132(sp)
811193c8:	dc401004 	addi	r17,sp,64
811193cc:	003f2606 	br	81119068 <__reset+0xfb0f9068>
811193d0:	94802014 	ori	r18,r18,128
811193d4:	98c00007 	ldb	r3,0(r19)
811193d8:	003e1306 	br	81118c28 <__reset+0xfb0f8c28>
811193dc:	98c00007 	ldb	r3,0(r19)
811193e0:	9ac00044 	addi	r11,r19,1
811193e4:	1a822b26 	beq	r3,r10,81119c94 <___svfiprintf_internal_r+0x11a8>
811193e8:	18bff404 	addi	r2,r3,-48
811193ec:	0021883a 	mov	r16,zero
811193f0:	30821e36 	bltu	r6,r2,81119c6c <___svfiprintf_internal_r+0x1180>
811193f4:	58c00007 	ldb	r3,0(r11)
811193f8:	840002a4 	muli	r16,r16,10
811193fc:	5cc00044 	addi	r19,r11,1
81119400:	9817883a 	mov	r11,r19
81119404:	80a1883a 	add	r16,r16,r2
81119408:	18bff404 	addi	r2,r3,-48
8111940c:	30bff92e 	bgeu	r6,r2,811193f4 <__reset+0xfb0f93f4>
81119410:	803e060e 	bge	r16,zero,81118c2c <__reset+0xfb0f8c2c>
81119414:	043fffc4 	movi	r16,-1
81119418:	003e0406 	br	81118c2c <__reset+0xfb0f8c2c>
8111941c:	21003fcc 	andi	r4,r4,255
81119420:	2002371e 	bne	r4,zero,81119d00 <___svfiprintf_internal_r+0x1214>
81119424:	94800414 	ori	r18,r18,16
81119428:	9080080c 	andi	r2,r18,32
8111942c:	103ebb1e 	bne	r2,zero,81118f1c <__reset+0xfb0f8f1c>
81119430:	9080040c 	andi	r2,r18,16
81119434:	10013b26 	beq	r2,zero,81119924 <___svfiprintf_internal_r+0xe38>
81119438:	dac02317 	ldw	r11,140(sp)
8111943c:	d8001d85 	stb	zero,118(sp)
81119440:	0013883a 	mov	r9,zero
81119444:	58800104 	addi	r2,r11,4
81119448:	5f000017 	ldw	fp,0(r11)
8111944c:	80013d16 	blt	r16,zero,81119944 <___svfiprintf_internal_r+0xe58>
81119450:	00ffdfc4 	movi	r3,-129
81119454:	d8802315 	stw	r2,140(sp)
81119458:	90e4703a 	and	r18,r18,r3
8111945c:	0015883a 	mov	r10,zero
81119460:	e03eba26 	beq	fp,zero,81118f4c <__reset+0xfb0f8f4c>
81119464:	00800244 	movi	r2,9
81119468:	173f7236 	bltu	r2,fp,81119234 <__reset+0xfb0f9234>
8111946c:	dac02b17 	ldw	r11,172(sp)
81119470:	e7000c04 	addi	fp,fp,48
81119474:	df0019c5 	stb	fp,103(sp)
81119478:	dac02115 	stw	r11,132(sp)
8111947c:	dc4019c4 	addi	r17,sp,103
81119480:	003eb606 	br	81118f5c <__reset+0xfb0f8f5c>
81119484:	21003fcc 	andi	r4,r4,255
81119488:	20021f1e 	bne	r4,zero,81119d08 <___svfiprintf_internal_r+0x121c>
8111948c:	94800414 	ori	r18,r18,16
81119490:	9080080c 	andi	r2,r18,32
81119494:	103ec51e 	bne	r2,zero,81118fac <__reset+0xfb0f8fac>
81119498:	9080040c 	andi	r2,r18,16
8111949c:	10016926 	beq	r2,zero,81119a44 <___svfiprintf_internal_r+0xf58>
811194a0:	dac02317 	ldw	r11,140(sp)
811194a4:	d8001d85 	stb	zero,118(sp)
811194a8:	0013883a 	mov	r9,zero
811194ac:	58800104 	addi	r2,r11,4
811194b0:	5f000017 	ldw	fp,0(r11)
811194b4:	80016b16 	blt	r16,zero,81119a64 <___svfiprintf_internal_r+0xf78>
811194b8:	00ffdfc4 	movi	r3,-129
811194bc:	d8802315 	stw	r2,140(sp)
811194c0:	90e4703a 	and	r18,r18,r3
811194c4:	e03ec41e 	bne	fp,zero,81118fd8 <__reset+0xfb0f8fd8>
811194c8:	0015883a 	mov	r10,zero
811194cc:	8001c226 	beq	r16,zero,81119bd8 <___svfiprintf_internal_r+0x10ec>
811194d0:	0039883a 	mov	fp,zero
811194d4:	0013883a 	mov	r9,zero
811194d8:	003ec006 	br	81118fdc <__reset+0xfb0f8fdc>
811194dc:	d8c01c17 	ldw	r3,112(sp)
811194e0:	d8801b17 	ldw	r2,108(sp)
811194e4:	d9001d87 	ldb	r4,118(sp)
811194e8:	20000b26 	beq	r4,zero,81119518 <___svfiprintf_internal_r+0xa2c>
811194ec:	d9001d84 	addi	r4,sp,118
811194f0:	18c00044 	addi	r3,r3,1
811194f4:	10800044 	addi	r2,r2,1
811194f8:	41000015 	stw	r4,0(r8)
811194fc:	01000044 	movi	r4,1
81119500:	41000115 	stw	r4,4(r8)
81119504:	d8c01c15 	stw	r3,112(sp)
81119508:	d8801b15 	stw	r2,108(sp)
8111950c:	010001c4 	movi	r4,7
81119510:	2080e116 	blt	r4,r2,81119898 <___svfiprintf_internal_r+0xdac>
81119514:	42000204 	addi	r8,r8,8
81119518:	dac02217 	ldw	r11,136(sp)
8111951c:	58000b26 	beq	r11,zero,8111954c <___svfiprintf_internal_r+0xa60>
81119520:	d9001d04 	addi	r4,sp,116
81119524:	18c00084 	addi	r3,r3,2
81119528:	10800044 	addi	r2,r2,1
8111952c:	41000015 	stw	r4,0(r8)
81119530:	01000084 	movi	r4,2
81119534:	41000115 	stw	r4,4(r8)
81119538:	d8c01c15 	stw	r3,112(sp)
8111953c:	d8801b15 	stw	r2,108(sp)
81119540:	010001c4 	movi	r4,7
81119544:	2080dd16 	blt	r4,r2,811198bc <___svfiprintf_internal_r+0xdd0>
81119548:	42000204 	addi	r8,r8,8
8111954c:	dac02617 	ldw	r11,152(sp)
81119550:	01002004 	movi	r4,128
81119554:	59008426 	beq	r11,r4,81119768 <___svfiprintf_internal_r+0xc7c>
81119558:	dac02117 	ldw	r11,132(sp)
8111955c:	82e1c83a 	sub	r16,r16,r11
81119560:	0400270e 	bge	zero,r16,81119600 <___svfiprintf_internal_r+0xb14>
81119564:	01c00404 	movi	r7,16
81119568:	3c016a0e 	bge	r7,r16,81119b14 <___svfiprintf_internal_r+0x1028>
8111956c:	016044f4 	movhi	r5,33043
81119570:	294ef604 	addi	r5,r5,15320
81119574:	d9402215 	stw	r5,136(sp)
81119578:	070001c4 	movi	fp,7
8111957c:	00000306 	br	8111958c <___svfiprintf_internal_r+0xaa0>
81119580:	843ffc04 	addi	r16,r16,-16
81119584:	42000204 	addi	r8,r8,8
81119588:	3c00130e 	bge	r7,r16,811195d8 <___svfiprintf_internal_r+0xaec>
8111958c:	18c00404 	addi	r3,r3,16
81119590:	10800044 	addi	r2,r2,1
81119594:	45000015 	stw	r20,0(r8)
81119598:	41c00115 	stw	r7,4(r8)
8111959c:	d8c01c15 	stw	r3,112(sp)
811195a0:	d8801b15 	stw	r2,108(sp)
811195a4:	e0bff60e 	bge	fp,r2,81119580 <__reset+0xfb0f9580>
811195a8:	d9801a04 	addi	r6,sp,104
811195ac:	b80b883a 	mov	r5,r23
811195b0:	a809883a 	mov	r4,r21
811195b4:	d9c02c15 	stw	r7,176(sp)
811195b8:	111891c0 	call	8111891c <__ssprint_r>
811195bc:	d9c02c17 	ldw	r7,176(sp)
811195c0:	1000581e 	bne	r2,zero,81119724 <___svfiprintf_internal_r+0xc38>
811195c4:	843ffc04 	addi	r16,r16,-16
811195c8:	d8c01c17 	ldw	r3,112(sp)
811195cc:	d8801b17 	ldw	r2,108(sp)
811195d0:	d811883a 	mov	r8,sp
811195d4:	3c3fed16 	blt	r7,r16,8111958c <__reset+0xfb0f958c>
811195d8:	dac02217 	ldw	r11,136(sp)
811195dc:	1c07883a 	add	r3,r3,r16
811195e0:	10800044 	addi	r2,r2,1
811195e4:	42c00015 	stw	r11,0(r8)
811195e8:	44000115 	stw	r16,4(r8)
811195ec:	d8c01c15 	stw	r3,112(sp)
811195f0:	d8801b15 	stw	r2,108(sp)
811195f4:	010001c4 	movi	r4,7
811195f8:	20809e16 	blt	r4,r2,81119874 <___svfiprintf_internal_r+0xd88>
811195fc:	42000204 	addi	r8,r8,8
81119600:	dac02117 	ldw	r11,132(sp)
81119604:	10800044 	addi	r2,r2,1
81119608:	44400015 	stw	r17,0(r8)
8111960c:	58c7883a 	add	r3,r11,r3
81119610:	42c00115 	stw	r11,4(r8)
81119614:	d8c01c15 	stw	r3,112(sp)
81119618:	d8801b15 	stw	r2,108(sp)
8111961c:	010001c4 	movi	r4,7
81119620:	20807f16 	blt	r4,r2,81119820 <___svfiprintf_internal_r+0xd34>
81119624:	42000204 	addi	r8,r8,8
81119628:	9480010c 	andi	r18,r18,4
8111962c:	90002926 	beq	r18,zero,811196d4 <___svfiprintf_internal_r+0xbe8>
81119630:	dac02417 	ldw	r11,144(sp)
81119634:	d8802017 	ldw	r2,128(sp)
81119638:	58a1c83a 	sub	r16,r11,r2
8111963c:	0400250e 	bge	zero,r16,811196d4 <___svfiprintf_internal_r+0xbe8>
81119640:	04400404 	movi	r17,16
81119644:	d8801b17 	ldw	r2,108(sp)
81119648:	8c017c0e 	bge	r17,r16,81119c3c <___svfiprintf_internal_r+0x1150>
8111964c:	016044f4 	movhi	r5,33043
81119650:	294efa04 	addi	r5,r5,15336
81119654:	d9402815 	stw	r5,160(sp)
81119658:	048001c4 	movi	r18,7
8111965c:	00000306 	br	8111966c <___svfiprintf_internal_r+0xb80>
81119660:	843ffc04 	addi	r16,r16,-16
81119664:	42000204 	addi	r8,r8,8
81119668:	8c00110e 	bge	r17,r16,811196b0 <___svfiprintf_internal_r+0xbc4>
8111966c:	18c00404 	addi	r3,r3,16
81119670:	10800044 	addi	r2,r2,1
81119674:	45800015 	stw	r22,0(r8)
81119678:	44400115 	stw	r17,4(r8)
8111967c:	d8c01c15 	stw	r3,112(sp)
81119680:	d8801b15 	stw	r2,108(sp)
81119684:	90bff60e 	bge	r18,r2,81119660 <__reset+0xfb0f9660>
81119688:	d9801a04 	addi	r6,sp,104
8111968c:	b80b883a 	mov	r5,r23
81119690:	a809883a 	mov	r4,r21
81119694:	111891c0 	call	8111891c <__ssprint_r>
81119698:	1000221e 	bne	r2,zero,81119724 <___svfiprintf_internal_r+0xc38>
8111969c:	843ffc04 	addi	r16,r16,-16
811196a0:	d8c01c17 	ldw	r3,112(sp)
811196a4:	d8801b17 	ldw	r2,108(sp)
811196a8:	d811883a 	mov	r8,sp
811196ac:	8c3fef16 	blt	r17,r16,8111966c <__reset+0xfb0f966c>
811196b0:	dac02817 	ldw	r11,160(sp)
811196b4:	1c07883a 	add	r3,r3,r16
811196b8:	10800044 	addi	r2,r2,1
811196bc:	42c00015 	stw	r11,0(r8)
811196c0:	44000115 	stw	r16,4(r8)
811196c4:	d8c01c15 	stw	r3,112(sp)
811196c8:	d8801b15 	stw	r2,108(sp)
811196cc:	010001c4 	movi	r4,7
811196d0:	2080aa16 	blt	r4,r2,8111997c <___svfiprintf_internal_r+0xe90>
811196d4:	d8802417 	ldw	r2,144(sp)
811196d8:	dac02017 	ldw	r11,128(sp)
811196dc:	12c0010e 	bge	r2,r11,811196e4 <___svfiprintf_internal_r+0xbf8>
811196e0:	5805883a 	mov	r2,r11
811196e4:	dac02517 	ldw	r11,148(sp)
811196e8:	5897883a 	add	r11,r11,r2
811196ec:	dac02515 	stw	r11,148(sp)
811196f0:	1800531e 	bne	r3,zero,81119840 <___svfiprintf_internal_r+0xd54>
811196f4:	98800007 	ldb	r2,0(r19)
811196f8:	d8001b15 	stw	zero,108(sp)
811196fc:	d811883a 	mov	r8,sp
81119700:	103d231e 	bne	r2,zero,81118b90 <__reset+0xfb0f8b90>
81119704:	9823883a 	mov	r17,r19
81119708:	003d3906 	br	81118bf0 <__reset+0xfb0f8bf0>
8111970c:	d8801c17 	ldw	r2,112(sp)
81119710:	10000426 	beq	r2,zero,81119724 <___svfiprintf_internal_r+0xc38>
81119714:	d9402717 	ldw	r5,156(sp)
81119718:	d9002a17 	ldw	r4,168(sp)
8111971c:	d9801a04 	addi	r6,sp,104
81119720:	111891c0 	call	8111891c <__ssprint_r>
81119724:	dac02717 	ldw	r11,156(sp)
81119728:	d8802517 	ldw	r2,148(sp)
8111972c:	58c0030b 	ldhu	r3,12(r11)
81119730:	18c0100c 	andi	r3,r3,64
81119734:	1801381e 	bne	r3,zero,81119c18 <___svfiprintf_internal_r+0x112c>
81119738:	dfc03717 	ldw	ra,220(sp)
8111973c:	df003617 	ldw	fp,216(sp)
81119740:	ddc03517 	ldw	r23,212(sp)
81119744:	dd803417 	ldw	r22,208(sp)
81119748:	dd403317 	ldw	r21,204(sp)
8111974c:	dd003217 	ldw	r20,200(sp)
81119750:	dcc03117 	ldw	r19,196(sp)
81119754:	dc803017 	ldw	r18,192(sp)
81119758:	dc402f17 	ldw	r17,188(sp)
8111975c:	dc002e17 	ldw	r16,184(sp)
81119760:	dec03804 	addi	sp,sp,224
81119764:	f800283a 	ret
81119768:	dac02417 	ldw	r11,144(sp)
8111976c:	d9002017 	ldw	r4,128(sp)
81119770:	5939c83a 	sub	fp,r11,r4
81119774:	073f780e 	bge	zero,fp,81119558 <__reset+0xfb0f9558>
81119778:	02400404 	movi	r9,16
8111977c:	4f01370e 	bge	r9,fp,81119c5c <___svfiprintf_internal_r+0x1170>
81119780:	02e044f4 	movhi	r11,33043
81119784:	5acef604 	addi	r11,r11,15320
81119788:	dac02215 	stw	r11,136(sp)
8111978c:	028001c4 	movi	r10,7
81119790:	00000306 	br	811197a0 <___svfiprintf_internal_r+0xcb4>
81119794:	e73ffc04 	addi	fp,fp,-16
81119798:	42000204 	addi	r8,r8,8
8111979c:	4f00150e 	bge	r9,fp,811197f4 <___svfiprintf_internal_r+0xd08>
811197a0:	18c00404 	addi	r3,r3,16
811197a4:	10800044 	addi	r2,r2,1
811197a8:	45000015 	stw	r20,0(r8)
811197ac:	42400115 	stw	r9,4(r8)
811197b0:	d8c01c15 	stw	r3,112(sp)
811197b4:	d8801b15 	stw	r2,108(sp)
811197b8:	50bff60e 	bge	r10,r2,81119794 <__reset+0xfb0f9794>
811197bc:	d9801a04 	addi	r6,sp,104
811197c0:	b80b883a 	mov	r5,r23
811197c4:	a809883a 	mov	r4,r21
811197c8:	da402c15 	stw	r9,176(sp)
811197cc:	da802d15 	stw	r10,180(sp)
811197d0:	111891c0 	call	8111891c <__ssprint_r>
811197d4:	da402c17 	ldw	r9,176(sp)
811197d8:	da802d17 	ldw	r10,180(sp)
811197dc:	103fd11e 	bne	r2,zero,81119724 <__reset+0xfb0f9724>
811197e0:	e73ffc04 	addi	fp,fp,-16
811197e4:	d8c01c17 	ldw	r3,112(sp)
811197e8:	d8801b17 	ldw	r2,108(sp)
811197ec:	d811883a 	mov	r8,sp
811197f0:	4f3feb16 	blt	r9,fp,811197a0 <__reset+0xfb0f97a0>
811197f4:	dac02217 	ldw	r11,136(sp)
811197f8:	1f07883a 	add	r3,r3,fp
811197fc:	10800044 	addi	r2,r2,1
81119800:	42c00015 	stw	r11,0(r8)
81119804:	47000115 	stw	fp,4(r8)
81119808:	d8c01c15 	stw	r3,112(sp)
8111980c:	d8801b15 	stw	r2,108(sp)
81119810:	010001c4 	movi	r4,7
81119814:	2080b616 	blt	r4,r2,81119af0 <___svfiprintf_internal_r+0x1004>
81119818:	42000204 	addi	r8,r8,8
8111981c:	003f4e06 	br	81119558 <__reset+0xfb0f9558>
81119820:	d9801a04 	addi	r6,sp,104
81119824:	b80b883a 	mov	r5,r23
81119828:	a809883a 	mov	r4,r21
8111982c:	111891c0 	call	8111891c <__ssprint_r>
81119830:	103fbc1e 	bne	r2,zero,81119724 <__reset+0xfb0f9724>
81119834:	d8c01c17 	ldw	r3,112(sp)
81119838:	d811883a 	mov	r8,sp
8111983c:	003f7a06 	br	81119628 <__reset+0xfb0f9628>
81119840:	d9801a04 	addi	r6,sp,104
81119844:	b80b883a 	mov	r5,r23
81119848:	a809883a 	mov	r4,r21
8111984c:	111891c0 	call	8111891c <__ssprint_r>
81119850:	103fa826 	beq	r2,zero,811196f4 <__reset+0xfb0f96f4>
81119854:	003fb306 	br	81119724 <__reset+0xfb0f9724>
81119858:	d9801a04 	addi	r6,sp,104
8111985c:	b80b883a 	mov	r5,r23
81119860:	a809883a 	mov	r4,r21
81119864:	111891c0 	call	8111891c <__ssprint_r>
81119868:	103fae1e 	bne	r2,zero,81119724 <__reset+0xfb0f9724>
8111986c:	d811883a 	mov	r8,sp
81119870:	003cdc06 	br	81118be4 <__reset+0xfb0f8be4>
81119874:	d9801a04 	addi	r6,sp,104
81119878:	b80b883a 	mov	r5,r23
8111987c:	a809883a 	mov	r4,r21
81119880:	111891c0 	call	8111891c <__ssprint_r>
81119884:	103fa71e 	bne	r2,zero,81119724 <__reset+0xfb0f9724>
81119888:	d8c01c17 	ldw	r3,112(sp)
8111988c:	d8801b17 	ldw	r2,108(sp)
81119890:	d811883a 	mov	r8,sp
81119894:	003f5a06 	br	81119600 <__reset+0xfb0f9600>
81119898:	d9801a04 	addi	r6,sp,104
8111989c:	b80b883a 	mov	r5,r23
811198a0:	a809883a 	mov	r4,r21
811198a4:	111891c0 	call	8111891c <__ssprint_r>
811198a8:	103f9e1e 	bne	r2,zero,81119724 <__reset+0xfb0f9724>
811198ac:	d8c01c17 	ldw	r3,112(sp)
811198b0:	d8801b17 	ldw	r2,108(sp)
811198b4:	d811883a 	mov	r8,sp
811198b8:	003f1706 	br	81119518 <__reset+0xfb0f9518>
811198bc:	d9801a04 	addi	r6,sp,104
811198c0:	b80b883a 	mov	r5,r23
811198c4:	a809883a 	mov	r4,r21
811198c8:	111891c0 	call	8111891c <__ssprint_r>
811198cc:	103f951e 	bne	r2,zero,81119724 <__reset+0xfb0f9724>
811198d0:	d8c01c17 	ldw	r3,112(sp)
811198d4:	d8801b17 	ldw	r2,108(sp)
811198d8:	d811883a 	mov	r8,sp
811198dc:	003f1b06 	br	8111954c <__reset+0xfb0f954c>
811198e0:	d8001d85 	stb	zero,118(sp)
811198e4:	80007b16 	blt	r16,zero,81119ad4 <___svfiprintf_internal_r+0xfe8>
811198e8:	00ffdfc4 	movi	r3,-129
811198ec:	e244b03a 	or	r2,fp,r9
811198f0:	90e4703a 	and	r18,r18,r3
811198f4:	103d7026 	beq	r2,zero,81118eb8 <__reset+0xfb0f8eb8>
811198f8:	0015883a 	mov	r10,zero
811198fc:	003d7206 	br	81118ec8 <__reset+0xfb0f8ec8>
81119900:	d9801a04 	addi	r6,sp,104
81119904:	b80b883a 	mov	r5,r23
81119908:	a809883a 	mov	r4,r21
8111990c:	111891c0 	call	8111891c <__ssprint_r>
81119910:	103f841e 	bne	r2,zero,81119724 <__reset+0xfb0f9724>
81119914:	d8c01c17 	ldw	r3,112(sp)
81119918:	d8801b17 	ldw	r2,108(sp)
8111991c:	d811883a 	mov	r8,sp
81119920:	003ef006 	br	811194e4 <__reset+0xfb0f94e4>
81119924:	9080100c 	andi	r2,r18,64
81119928:	d8001d85 	stb	zero,118(sp)
8111992c:	dac02317 	ldw	r11,140(sp)
81119930:	10008126 	beq	r2,zero,81119b38 <___svfiprintf_internal_r+0x104c>
81119934:	58800104 	addi	r2,r11,4
81119938:	5f00000b 	ldhu	fp,0(r11)
8111993c:	0013883a 	mov	r9,zero
81119940:	803ec30e 	bge	r16,zero,81119450 <__reset+0xfb0f9450>
81119944:	d8802315 	stw	r2,140(sp)
81119948:	0015883a 	mov	r10,zero
8111994c:	e244b03a 	or	r2,fp,r9
81119950:	103e371e 	bne	r2,zero,81119230 <__reset+0xfb0f9230>
81119954:	00800044 	movi	r2,1
81119958:	10803fcc 	andi	r2,r2,255
8111995c:	00c00044 	movi	r3,1
81119960:	10c06126 	beq	r2,r3,81119ae8 <___svfiprintf_internal_r+0xffc>
81119964:	00c00084 	movi	r3,2
81119968:	10fd5526 	beq	r2,r3,81118ec0 <__reset+0xfb0f8ec0>
8111996c:	003ed806 	br	811194d0 <__reset+0xfb0f94d0>
81119970:	d8802315 	stw	r2,140(sp)
81119974:	98c00007 	ldb	r3,0(r19)
81119978:	003cab06 	br	81118c28 <__reset+0xfb0f8c28>
8111997c:	d9801a04 	addi	r6,sp,104
81119980:	b80b883a 	mov	r5,r23
81119984:	a809883a 	mov	r4,r21
81119988:	111891c0 	call	8111891c <__ssprint_r>
8111998c:	103f651e 	bne	r2,zero,81119724 <__reset+0xfb0f9724>
81119990:	d8c01c17 	ldw	r3,112(sp)
81119994:	003f4f06 	br	811196d4 <__reset+0xfb0f96d4>
81119998:	00a044f4 	movhi	r2,33043
8111999c:	108dcb04 	addi	r2,r2,14124
811199a0:	d8802915 	stw	r2,164(sp)
811199a4:	003d4406 	br	81118eb8 <__reset+0xfb0f8eb8>
811199a8:	dac02317 	ldw	r11,140(sp)
811199ac:	58800017 	ldw	r2,0(r11)
811199b0:	dac02517 	ldw	r11,148(sp)
811199b4:	5807d7fa 	srai	r3,r11,31
811199b8:	dac02317 	ldw	r11,140(sp)
811199bc:	10c00115 	stw	r3,4(r2)
811199c0:	5ac00104 	addi	r11,r11,4
811199c4:	dac02315 	stw	r11,140(sp)
811199c8:	dac02517 	ldw	r11,148(sp)
811199cc:	12c00015 	stw	r11,0(r2)
811199d0:	003c6d06 	br	81118b88 <__reset+0xfb0f8b88>
811199d4:	9080100c 	andi	r2,r18,64
811199d8:	dac02317 	ldw	r11,140(sp)
811199dc:	103e5326 	beq	r2,zero,8111932c <__reset+0xfb0f932c>
811199e0:	5f00000f 	ldh	fp,0(r11)
811199e4:	5ac00104 	addi	r11,r11,4
811199e8:	dac02315 	stw	r11,140(sp)
811199ec:	e013d7fa 	srai	r9,fp,31
811199f0:	4805883a 	mov	r2,r9
811199f4:	003e0706 	br	81119214 <__reset+0xfb0f9214>
811199f8:	00800c04 	movi	r2,48
811199fc:	d8801d05 	stb	r2,116(sp)
81119a00:	d8c01d45 	stb	r3,117(sp)
81119a04:	d8001d85 	stb	zero,118(sp)
81119a08:	90800094 	ori	r2,r18,2
81119a0c:	80008f16 	blt	r16,zero,81119c4c <___svfiprintf_internal_r+0x1160>
81119a10:	00bfdfc4 	movi	r2,-129
81119a14:	90a4703a 	and	r18,r18,r2
81119a18:	94800094 	ori	r18,r18,2
81119a1c:	0015883a 	mov	r10,zero
81119a20:	003d2906 	br	81118ec8 <__reset+0xfb0f8ec8>
81119a24:	98c00007 	ldb	r3,0(r19)
81119a28:	003c7f06 	br	81118c28 <__reset+0xfb0f8c28>
81119a2c:	dac02317 	ldw	r11,140(sp)
81119a30:	0013883a 	mov	r9,zero
81119a34:	5f000017 	ldw	fp,0(r11)
81119a38:	5ac00104 	addi	r11,r11,4
81119a3c:	dac02315 	stw	r11,140(sp)
81119a40:	003d1506 	br	81118e98 <__reset+0xfb0f8e98>
81119a44:	9080100c 	andi	r2,r18,64
81119a48:	d8001d85 	stb	zero,118(sp)
81119a4c:	dac02317 	ldw	r11,140(sp)
81119a50:	10003426 	beq	r2,zero,81119b24 <___svfiprintf_internal_r+0x1038>
81119a54:	58800104 	addi	r2,r11,4
81119a58:	5f00000b 	ldhu	fp,0(r11)
81119a5c:	0013883a 	mov	r9,zero
81119a60:	803e950e 	bge	r16,zero,811194b8 <__reset+0xfb0f94b8>
81119a64:	e246b03a 	or	r3,fp,r9
81119a68:	d8802315 	stw	r2,140(sp)
81119a6c:	183d5a1e 	bne	r3,zero,81118fd8 <__reset+0xfb0f8fd8>
81119a70:	0015883a 	mov	r10,zero
81119a74:	0005883a 	mov	r2,zero
81119a78:	003fb706 	br	81119958 <__reset+0xfb0f9958>
81119a7c:	98c00043 	ldbu	r3,1(r19)
81119a80:	94800814 	ori	r18,r18,32
81119a84:	9cc00044 	addi	r19,r19,1
81119a88:	18c03fcc 	andi	r3,r3,255
81119a8c:	18c0201c 	xori	r3,r3,128
81119a90:	18ffe004 	addi	r3,r3,-128
81119a94:	003c6406 	br	81118c28 <__reset+0xfb0f8c28>
81119a98:	d8c02315 	stw	r3,140(sp)
81119a9c:	0015883a 	mov	r10,zero
81119aa0:	003faa06 	br	8111994c <__reset+0xfb0f994c>
81119aa4:	dac02317 	ldw	r11,140(sp)
81119aa8:	58800017 	ldw	r2,0(r11)
81119aac:	5ac00104 	addi	r11,r11,4
81119ab0:	dac02315 	stw	r11,140(sp)
81119ab4:	dac02517 	ldw	r11,148(sp)
81119ab8:	12c00015 	stw	r11,0(r2)
81119abc:	003c3206 	br	81118b88 <__reset+0xfb0f8b88>
81119ac0:	012044f4 	movhi	r4,33043
81119ac4:	210dcb04 	addi	r4,r4,14124
81119ac8:	d9002915 	stw	r4,164(sp)
81119acc:	d8c02315 	stw	r3,140(sp)
81119ad0:	1025883a 	mov	r18,r2
81119ad4:	e244b03a 	or	r2,fp,r9
81119ad8:	103f871e 	bne	r2,zero,811198f8 <__reset+0xfb0f98f8>
81119adc:	0015883a 	mov	r10,zero
81119ae0:	00800084 	movi	r2,2
81119ae4:	003f9c06 	br	81119958 <__reset+0xfb0f9958>
81119ae8:	0039883a 	mov	fp,zero
81119aec:	003e5f06 	br	8111946c <__reset+0xfb0f946c>
81119af0:	d9801a04 	addi	r6,sp,104
81119af4:	b80b883a 	mov	r5,r23
81119af8:	a809883a 	mov	r4,r21
81119afc:	111891c0 	call	8111891c <__ssprint_r>
81119b00:	103f081e 	bne	r2,zero,81119724 <__reset+0xfb0f9724>
81119b04:	d8c01c17 	ldw	r3,112(sp)
81119b08:	d8801b17 	ldw	r2,108(sp)
81119b0c:	d811883a 	mov	r8,sp
81119b10:	003e9106 	br	81119558 <__reset+0xfb0f9558>
81119b14:	012044f4 	movhi	r4,33043
81119b18:	210ef604 	addi	r4,r4,15320
81119b1c:	d9002215 	stw	r4,136(sp)
81119b20:	003ead06 	br	811195d8 <__reset+0xfb0f95d8>
81119b24:	58800104 	addi	r2,r11,4
81119b28:	5f000017 	ldw	fp,0(r11)
81119b2c:	0013883a 	mov	r9,zero
81119b30:	803e610e 	bge	r16,zero,811194b8 <__reset+0xfb0f94b8>
81119b34:	003fcb06 	br	81119a64 <__reset+0xfb0f9a64>
81119b38:	58800104 	addi	r2,r11,4
81119b3c:	5f000017 	ldw	fp,0(r11)
81119b40:	0013883a 	mov	r9,zero
81119b44:	803e420e 	bge	r16,zero,81119450 <__reset+0xfb0f9450>
81119b48:	003f7e06 	br	81119944 <__reset+0xfb0f9944>
81119b4c:	5f000017 	ldw	fp,0(r11)
81119b50:	5ac00104 	addi	r11,r11,4
81119b54:	0013883a 	mov	r9,zero
81119b58:	dac02315 	stw	r11,140(sp)
81119b5c:	003cce06 	br	81118e98 <__reset+0xfb0f8e98>
81119b60:	8809883a 	mov	r4,r17
81119b64:	da002c15 	stw	r8,176(sp)
81119b68:	110bc740 	call	8110bc74 <strlen>
81119b6c:	d8802115 	stw	r2,132(sp)
81119b70:	da801d83 	ldbu	r10,118(sp)
81119b74:	df002315 	stw	fp,140(sp)
81119b78:	0021883a 	mov	r16,zero
81119b7c:	da002c17 	ldw	r8,176(sp)
81119b80:	003cf606 	br	81118f5c <__reset+0xfb0f8f5c>
81119b84:	00800184 	movi	r2,6
81119b88:	1400012e 	bgeu	r2,r16,81119b90 <___svfiprintf_internal_r+0x10a4>
81119b8c:	1021883a 	mov	r16,r2
81119b90:	dc002115 	stw	r16,132(sp)
81119b94:	8005883a 	mov	r2,r16
81119b98:	80003c16 	blt	r16,zero,81119c8c <___svfiprintf_internal_r+0x11a0>
81119b9c:	046044f4 	movhi	r17,33043
81119ba0:	d8802015 	stw	r2,128(sp)
81119ba4:	df002315 	stw	fp,140(sp)
81119ba8:	8c4dd004 	addi	r17,r17,14144
81119bac:	003d2e06 	br	81119068 <__reset+0xfb0f9068>
81119bb0:	04001004 	movi	r16,64
81119bb4:	800b883a 	mov	r5,r16
81119bb8:	110aa600 	call	8110aa60 <_malloc_r>
81119bbc:	dac02717 	ldw	r11,156(sp)
81119bc0:	58800015 	stw	r2,0(r11)
81119bc4:	58800415 	stw	r2,16(r11)
81119bc8:	10004826 	beq	r2,zero,81119cec <___svfiprintf_internal_r+0x1200>
81119bcc:	dac02717 	ldw	r11,156(sp)
81119bd0:	5c000515 	stw	r16,20(r11)
81119bd4:	003bd906 	br	81118b3c <__reset+0xfb0f8b3c>
81119bd8:	9080004c 	andi	r2,r18,1
81119bdc:	0015883a 	mov	r10,zero
81119be0:	10000626 	beq	r2,zero,81119bfc <___svfiprintf_internal_r+0x1110>
81119be4:	dac02b17 	ldw	r11,172(sp)
81119be8:	00800c04 	movi	r2,48
81119bec:	d88019c5 	stb	r2,103(sp)
81119bf0:	dac02115 	stw	r11,132(sp)
81119bf4:	dc4019c4 	addi	r17,sp,103
81119bf8:	003cd806 	br	81118f5c <__reset+0xfb0f8f5c>
81119bfc:	d8002115 	stw	zero,132(sp)
81119c00:	dc401a04 	addi	r17,sp,104
81119c04:	003cd506 	br	81118f5c <__reset+0xfb0f8f5c>
81119c08:	012044f4 	movhi	r4,33043
81119c0c:	210efa04 	addi	r4,r4,15336
81119c10:	d9002815 	stw	r4,160(sp)
81119c14:	003d4306 	br	81119124 <__reset+0xfb0f9124>
81119c18:	00bfffc4 	movi	r2,-1
81119c1c:	003ec606 	br	81119738 <__reset+0xfb0f9738>
81119c20:	00800044 	movi	r2,1
81119c24:	10803fcc 	andi	r2,r2,255
81119c28:	00c00044 	movi	r3,1
81119c2c:	10fd8026 	beq	r2,r3,81119230 <__reset+0xfb0f9230>
81119c30:	00c00084 	movi	r3,2
81119c34:	10fca426 	beq	r2,r3,81118ec8 <__reset+0xfb0f8ec8>
81119c38:	003ce806 	br	81118fdc <__reset+0xfb0f8fdc>
81119c3c:	012044f4 	movhi	r4,33043
81119c40:	210efa04 	addi	r4,r4,15336
81119c44:	d9002815 	stw	r4,160(sp)
81119c48:	003e9906 	br	811196b0 <__reset+0xfb0f96b0>
81119c4c:	1025883a 	mov	r18,r2
81119c50:	0015883a 	mov	r10,zero
81119c54:	00800084 	movi	r2,2
81119c58:	003ff206 	br	81119c24 <__reset+0xfb0f9c24>
81119c5c:	016044f4 	movhi	r5,33043
81119c60:	294ef604 	addi	r5,r5,15320
81119c64:	d9402215 	stw	r5,136(sp)
81119c68:	003ee206 	br	811197f4 <__reset+0xfb0f97f4>
81119c6c:	5827883a 	mov	r19,r11
81119c70:	0021883a 	mov	r16,zero
81119c74:	003bed06 	br	81118c2c <__reset+0xfb0f8c2c>
81119c78:	dc002115 	stw	r16,132(sp)
81119c7c:	da801d83 	ldbu	r10,118(sp)
81119c80:	df002315 	stw	fp,140(sp)
81119c84:	0021883a 	mov	r16,zero
81119c88:	003cb406 	br	81118f5c <__reset+0xfb0f8f5c>
81119c8c:	0005883a 	mov	r2,zero
81119c90:	003fc206 	br	81119b9c <__reset+0xfb0f9b9c>
81119c94:	d8802317 	ldw	r2,140(sp)
81119c98:	98c00043 	ldbu	r3,1(r19)
81119c9c:	5827883a 	mov	r19,r11
81119ca0:	14000017 	ldw	r16,0(r2)
81119ca4:	10800104 	addi	r2,r2,4
81119ca8:	d8802315 	stw	r2,140(sp)
81119cac:	803f760e 	bge	r16,zero,81119a88 <__reset+0xfb0f9a88>
81119cb0:	18c03fcc 	andi	r3,r3,255
81119cb4:	18c0201c 	xori	r3,r3,128
81119cb8:	043fffc4 	movi	r16,-1
81119cbc:	18ffe004 	addi	r3,r3,-128
81119cc0:	003bd906 	br	81118c28 <__reset+0xfb0f8c28>
81119cc4:	d9c01d85 	stb	r7,118(sp)
81119cc8:	003cb606 	br	81118fa4 <__reset+0xfb0f8fa4>
81119ccc:	d9c01d85 	stb	r7,118(sp)
81119cd0:	003d2106 	br	81119158 <__reset+0xfb0f9158>
81119cd4:	d9c01d85 	stb	r7,118(sp)
81119cd8:	003d8e06 	br	81119314 <__reset+0xfb0f9314>
81119cdc:	d9c01d85 	stb	r7,118(sp)
81119ce0:	003db306 	br	811193b0 <__reset+0xfb0f93b0>
81119ce4:	d9c01d85 	stb	r7,118(sp)
81119ce8:	003c8a06 	br	81118f14 <__reset+0xfb0f8f14>
81119cec:	dac02a17 	ldw	r11,168(sp)
81119cf0:	00800304 	movi	r2,12
81119cf4:	58800015 	stw	r2,0(r11)
81119cf8:	00bfffc4 	movi	r2,-1
81119cfc:	003e8e06 	br	81119738 <__reset+0xfb0f9738>
81119d00:	d9c01d85 	stb	r7,118(sp)
81119d04:	003dc706 	br	81119424 <__reset+0xfb0f9424>
81119d08:	d9c01d85 	stb	r7,118(sp)
81119d0c:	003ddf06 	br	8111948c <__reset+0xfb0f948c>
81119d10:	d9c01d85 	stb	r7,118(sp)
81119d14:	003d3706 	br	811191f4 <__reset+0xfb0f91f4>
81119d18:	d9c01d85 	stb	r7,118(sp)
81119d1c:	003c5406 	br	81118e70 <__reset+0xfb0f8e70>
81119d20:	d9c01d85 	stb	r7,118(sp)
81119d24:	003d1d06 	br	8111919c <__reset+0xfb0f919c>

81119d28 <__submore>:
81119d28:	defffa04 	addi	sp,sp,-24
81119d2c:	dc000015 	stw	r16,0(sp)
81119d30:	2821883a 	mov	r16,r5
81119d34:	29400c17 	ldw	r5,48(r5)
81119d38:	dfc00515 	stw	ra,20(sp)
81119d3c:	dd000415 	stw	r20,16(sp)
81119d40:	dcc00315 	stw	r19,12(sp)
81119d44:	dc800215 	stw	r18,8(sp)
81119d48:	dc400115 	stw	r17,4(sp)
81119d4c:	80801004 	addi	r2,r16,64
81119d50:	28801726 	beq	r5,r2,81119db0 <__submore+0x88>
81119d54:	84400d17 	ldw	r17,52(r16)
81119d58:	8c67883a 	add	r19,r17,r17
81119d5c:	980d883a 	mov	r6,r19
81119d60:	11162d80 	call	811162d8 <_realloc_r>
81119d64:	1025883a 	mov	r18,r2
81119d68:	10002226 	beq	r2,zero,81119df4 <__submore+0xcc>
81119d6c:	1469883a 	add	r20,r2,r17
81119d70:	880d883a 	mov	r6,r17
81119d74:	100b883a 	mov	r5,r2
81119d78:	a009883a 	mov	r4,r20
81119d7c:	110b26c0 	call	8110b26c <memcpy>
81119d80:	0005883a 	mov	r2,zero
81119d84:	85000015 	stw	r20,0(r16)
81119d88:	84800c15 	stw	r18,48(r16)
81119d8c:	84c00d15 	stw	r19,52(r16)
81119d90:	dfc00517 	ldw	ra,20(sp)
81119d94:	dd000417 	ldw	r20,16(sp)
81119d98:	dcc00317 	ldw	r19,12(sp)
81119d9c:	dc800217 	ldw	r18,8(sp)
81119da0:	dc400117 	ldw	r17,4(sp)
81119da4:	dc000017 	ldw	r16,0(sp)
81119da8:	dec00604 	addi	sp,sp,24
81119dac:	f800283a 	ret
81119db0:	04410004 	movi	r17,1024
81119db4:	880b883a 	mov	r5,r17
81119db8:	110aa600 	call	8110aa60 <_malloc_r>
81119dbc:	1007883a 	mov	r3,r2
81119dc0:	10000c26 	beq	r2,zero,81119df4 <__submore+0xcc>
81119dc4:	80801083 	ldbu	r2,66(r16)
81119dc8:	80c00c15 	stw	r3,48(r16)
81119dcc:	84400d15 	stw	r17,52(r16)
81119dd0:	1880ffc5 	stb	r2,1023(r3)
81119dd4:	81401043 	ldbu	r5,65(r16)
81119dd8:	1900ff44 	addi	r4,r3,1021
81119ddc:	0005883a 	mov	r2,zero
81119de0:	1940ff85 	stb	r5,1022(r3)
81119de4:	81401003 	ldbu	r5,64(r16)
81119de8:	1940ff45 	stb	r5,1021(r3)
81119dec:	81000015 	stw	r4,0(r16)
81119df0:	003fe706 	br	81119d90 <__reset+0xfb0f9d90>
81119df4:	00bfffc4 	movi	r2,-1
81119df8:	003fe506 	br	81119d90 <__reset+0xfb0f9d90>

81119dfc <_ungetc_r>:
81119dfc:	00bfffc4 	movi	r2,-1
81119e00:	28806126 	beq	r5,r2,81119f88 <_ungetc_r+0x18c>
81119e04:	defffb04 	addi	sp,sp,-20
81119e08:	dcc00315 	stw	r19,12(sp)
81119e0c:	dc400115 	stw	r17,4(sp)
81119e10:	dc000015 	stw	r16,0(sp)
81119e14:	dfc00415 	stw	ra,16(sp)
81119e18:	dc800215 	stw	r18,8(sp)
81119e1c:	2023883a 	mov	r17,r4
81119e20:	3021883a 	mov	r16,r6
81119e24:	2827883a 	mov	r19,r5
81119e28:	20000226 	beq	r4,zero,81119e34 <_ungetc_r+0x38>
81119e2c:	20800e17 	ldw	r2,56(r4)
81119e30:	10002e26 	beq	r2,zero,81119eec <_ungetc_r+0xf0>
81119e34:	80c0030b 	ldhu	r3,12(r16)
81119e38:	1888000c 	andi	r2,r3,8192
81119e3c:	1000051e 	bne	r2,zero,81119e54 <_ungetc_r+0x58>
81119e40:	81001917 	ldw	r4,100(r16)
81119e44:	00b7ffc4 	movi	r2,-8193
81119e48:	18c80014 	ori	r3,r3,8192
81119e4c:	2084703a 	and	r2,r4,r2
81119e50:	80801915 	stw	r2,100(r16)
81119e54:	00bff7c4 	movi	r2,-33
81119e58:	1884703a 	and	r2,r3,r2
81119e5c:	8080030d 	sth	r2,12(r16)
81119e60:	1900010c 	andi	r4,r3,4
81119e64:	2000061e 	bne	r4,zero,81119e80 <_ungetc_r+0x84>
81119e68:	1900040c 	andi	r4,r3,16
81119e6c:	20001d26 	beq	r4,zero,81119ee4 <_ungetc_r+0xe8>
81119e70:	18c0020c 	andi	r3,r3,8
81119e74:	1800331e 	bne	r3,zero,81119f44 <_ungetc_r+0x148>
81119e78:	10800114 	ori	r2,r2,4
81119e7c:	8080030d 	sth	r2,12(r16)
81119e80:	80800c17 	ldw	r2,48(r16)
81119e84:	9c803fcc 	andi	r18,r19,255
81119e88:	10001a26 	beq	r2,zero,81119ef4 <_ungetc_r+0xf8>
81119e8c:	80c00117 	ldw	r3,4(r16)
81119e90:	80800d17 	ldw	r2,52(r16)
81119e94:	18800f0e 	bge	r3,r2,81119ed4 <_ungetc_r+0xd8>
81119e98:	80c00017 	ldw	r3,0(r16)
81119e9c:	9005883a 	mov	r2,r18
81119ea0:	193fffc4 	addi	r4,r3,-1
81119ea4:	81000015 	stw	r4,0(r16)
81119ea8:	1cffffc5 	stb	r19,-1(r3)
81119eac:	80c00117 	ldw	r3,4(r16)
81119eb0:	18c00044 	addi	r3,r3,1
81119eb4:	80c00115 	stw	r3,4(r16)
81119eb8:	dfc00417 	ldw	ra,16(sp)
81119ebc:	dcc00317 	ldw	r19,12(sp)
81119ec0:	dc800217 	ldw	r18,8(sp)
81119ec4:	dc400117 	ldw	r17,4(sp)
81119ec8:	dc000017 	ldw	r16,0(sp)
81119ecc:	dec00504 	addi	sp,sp,20
81119ed0:	f800283a 	ret
81119ed4:	800b883a 	mov	r5,r16
81119ed8:	8809883a 	mov	r4,r17
81119edc:	1119d280 	call	81119d28 <__submore>
81119ee0:	103fed26 	beq	r2,zero,81119e98 <__reset+0xfb0f9e98>
81119ee4:	00bfffc4 	movi	r2,-1
81119ee8:	003ff306 	br	81119eb8 <__reset+0xfb0f9eb8>
81119eec:	1113d1c0 	call	81113d1c <__sinit>
81119ef0:	003fd006 	br	81119e34 <__reset+0xfb0f9e34>
81119ef4:	80c00417 	ldw	r3,16(r16)
81119ef8:	80800017 	ldw	r2,0(r16)
81119efc:	18000326 	beq	r3,zero,81119f0c <_ungetc_r+0x110>
81119f00:	1880022e 	bgeu	r3,r2,81119f0c <_ungetc_r+0x110>
81119f04:	10ffffc3 	ldbu	r3,-1(r2)
81119f08:	90c01826 	beq	r18,r3,81119f6c <_ungetc_r+0x170>
81119f0c:	81400117 	ldw	r5,4(r16)
81119f10:	80800e15 	stw	r2,56(r16)
81119f14:	008000c4 	movi	r2,3
81119f18:	81001004 	addi	r4,r16,64
81119f1c:	80c01084 	addi	r3,r16,66
81119f20:	80800d15 	stw	r2,52(r16)
81119f24:	00800044 	movi	r2,1
81119f28:	80800115 	stw	r2,4(r16)
81119f2c:	81400f15 	stw	r5,60(r16)
81119f30:	81000c15 	stw	r4,48(r16)
81119f34:	84c01085 	stb	r19,66(r16)
81119f38:	80c00015 	stw	r3,0(r16)
81119f3c:	9005883a 	mov	r2,r18
81119f40:	003fdd06 	br	81119eb8 <__reset+0xfb0f9eb8>
81119f44:	800b883a 	mov	r5,r16
81119f48:	8809883a 	mov	r4,r17
81119f4c:	11139400 	call	81113940 <_fflush_r>
81119f50:	103fe41e 	bne	r2,zero,81119ee4 <__reset+0xfb0f9ee4>
81119f54:	8080030b 	ldhu	r2,12(r16)
81119f58:	00fffdc4 	movi	r3,-9
81119f5c:	80000215 	stw	zero,8(r16)
81119f60:	1884703a 	and	r2,r3,r2
81119f64:	80000615 	stw	zero,24(r16)
81119f68:	003fc306 	br	81119e78 <__reset+0xfb0f9e78>
81119f6c:	80c00117 	ldw	r3,4(r16)
81119f70:	10bfffc4 	addi	r2,r2,-1
81119f74:	80800015 	stw	r2,0(r16)
81119f78:	18800044 	addi	r2,r3,1
81119f7c:	80800115 	stw	r2,4(r16)
81119f80:	9005883a 	mov	r2,r18
81119f84:	003fcc06 	br	81119eb8 <__reset+0xfb0f9eb8>
81119f88:	00bfffc4 	movi	r2,-1
81119f8c:	f800283a 	ret

81119f90 <ungetc>:
81119f90:	00a044f4 	movhi	r2,33043
81119f94:	10976404 	addi	r2,r2,23952
81119f98:	280d883a 	mov	r6,r5
81119f9c:	200b883a 	mov	r5,r4
81119fa0:	11000017 	ldw	r4,0(r2)
81119fa4:	1119dfc1 	jmpi	81119dfc <_ungetc_r>

81119fa8 <__sprint_r.part.0>:
81119fa8:	28801917 	ldw	r2,100(r5)
81119fac:	defff604 	addi	sp,sp,-40
81119fb0:	dd400515 	stw	r21,20(sp)
81119fb4:	dfc00915 	stw	ra,36(sp)
81119fb8:	df000815 	stw	fp,32(sp)
81119fbc:	ddc00715 	stw	r23,28(sp)
81119fc0:	dd800615 	stw	r22,24(sp)
81119fc4:	dd000415 	stw	r20,16(sp)
81119fc8:	dcc00315 	stw	r19,12(sp)
81119fcc:	dc800215 	stw	r18,8(sp)
81119fd0:	dc400115 	stw	r17,4(sp)
81119fd4:	dc000015 	stw	r16,0(sp)
81119fd8:	1088000c 	andi	r2,r2,8192
81119fdc:	302b883a 	mov	r21,r6
81119fe0:	10002e26 	beq	r2,zero,8111a09c <__sprint_r.part.0+0xf4>
81119fe4:	30800217 	ldw	r2,8(r6)
81119fe8:	35800017 	ldw	r22,0(r6)
81119fec:	10002926 	beq	r2,zero,8111a094 <__sprint_r.part.0+0xec>
81119ff0:	2827883a 	mov	r19,r5
81119ff4:	2029883a 	mov	r20,r4
81119ff8:	b5c00104 	addi	r23,r22,4
81119ffc:	04bfffc4 	movi	r18,-1
8111a000:	bc400017 	ldw	r17,0(r23)
8111a004:	b4000017 	ldw	r16,0(r22)
8111a008:	0039883a 	mov	fp,zero
8111a00c:	8822d0ba 	srli	r17,r17,2
8111a010:	8800031e 	bne	r17,zero,8111a020 <__sprint_r.part.0+0x78>
8111a014:	00001806 	br	8111a078 <__sprint_r.part.0+0xd0>
8111a018:	84000104 	addi	r16,r16,4
8111a01c:	8f001526 	beq	r17,fp,8111a074 <__sprint_r.part.0+0xcc>
8111a020:	81400017 	ldw	r5,0(r16)
8111a024:	980d883a 	mov	r6,r19
8111a028:	a009883a 	mov	r4,r20
8111a02c:	111ba740 	call	8111ba74 <_fputwc_r>
8111a030:	e7000044 	addi	fp,fp,1
8111a034:	14bff81e 	bne	r2,r18,8111a018 <__reset+0xfb0fa018>
8111a038:	9005883a 	mov	r2,r18
8111a03c:	a8000215 	stw	zero,8(r21)
8111a040:	a8000115 	stw	zero,4(r21)
8111a044:	dfc00917 	ldw	ra,36(sp)
8111a048:	df000817 	ldw	fp,32(sp)
8111a04c:	ddc00717 	ldw	r23,28(sp)
8111a050:	dd800617 	ldw	r22,24(sp)
8111a054:	dd400517 	ldw	r21,20(sp)
8111a058:	dd000417 	ldw	r20,16(sp)
8111a05c:	dcc00317 	ldw	r19,12(sp)
8111a060:	dc800217 	ldw	r18,8(sp)
8111a064:	dc400117 	ldw	r17,4(sp)
8111a068:	dc000017 	ldw	r16,0(sp)
8111a06c:	dec00a04 	addi	sp,sp,40
8111a070:	f800283a 	ret
8111a074:	a8800217 	ldw	r2,8(r21)
8111a078:	8c63883a 	add	r17,r17,r17
8111a07c:	8c63883a 	add	r17,r17,r17
8111a080:	1445c83a 	sub	r2,r2,r17
8111a084:	a8800215 	stw	r2,8(r21)
8111a088:	b5800204 	addi	r22,r22,8
8111a08c:	bdc00204 	addi	r23,r23,8
8111a090:	103fdb1e 	bne	r2,zero,8111a000 <__reset+0xfb0fa000>
8111a094:	0005883a 	mov	r2,zero
8111a098:	003fe806 	br	8111a03c <__reset+0xfb0fa03c>
8111a09c:	11144ac0 	call	811144ac <__sfvwrite_r>
8111a0a0:	003fe606 	br	8111a03c <__reset+0xfb0fa03c>

8111a0a4 <__sprint_r>:
8111a0a4:	30c00217 	ldw	r3,8(r6)
8111a0a8:	18000126 	beq	r3,zero,8111a0b0 <__sprint_r+0xc>
8111a0ac:	1119fa81 	jmpi	81119fa8 <__sprint_r.part.0>
8111a0b0:	30000115 	stw	zero,4(r6)
8111a0b4:	0005883a 	mov	r2,zero
8111a0b8:	f800283a 	ret

8111a0bc <___vfiprintf_internal_r>:
8111a0bc:	deffc904 	addi	sp,sp,-220
8111a0c0:	df003515 	stw	fp,212(sp)
8111a0c4:	dd003115 	stw	r20,196(sp)
8111a0c8:	dfc03615 	stw	ra,216(sp)
8111a0cc:	ddc03415 	stw	r23,208(sp)
8111a0d0:	dd803315 	stw	r22,204(sp)
8111a0d4:	dd403215 	stw	r21,200(sp)
8111a0d8:	dcc03015 	stw	r19,192(sp)
8111a0dc:	dc802f15 	stw	r18,188(sp)
8111a0e0:	dc402e15 	stw	r17,184(sp)
8111a0e4:	dc002d15 	stw	r16,180(sp)
8111a0e8:	d9002015 	stw	r4,128(sp)
8111a0ec:	d9c02215 	stw	r7,136(sp)
8111a0f0:	2829883a 	mov	r20,r5
8111a0f4:	3039883a 	mov	fp,r6
8111a0f8:	20000226 	beq	r4,zero,8111a104 <___vfiprintf_internal_r+0x48>
8111a0fc:	20800e17 	ldw	r2,56(r4)
8111a100:	1000cf26 	beq	r2,zero,8111a440 <___vfiprintf_internal_r+0x384>
8111a104:	a080030b 	ldhu	r2,12(r20)
8111a108:	10c8000c 	andi	r3,r2,8192
8111a10c:	1800061e 	bne	r3,zero,8111a128 <___vfiprintf_internal_r+0x6c>
8111a110:	a1001917 	ldw	r4,100(r20)
8111a114:	00f7ffc4 	movi	r3,-8193
8111a118:	10880014 	ori	r2,r2,8192
8111a11c:	20c6703a 	and	r3,r4,r3
8111a120:	a080030d 	sth	r2,12(r20)
8111a124:	a0c01915 	stw	r3,100(r20)
8111a128:	10c0020c 	andi	r3,r2,8
8111a12c:	1800a926 	beq	r3,zero,8111a3d4 <___vfiprintf_internal_r+0x318>
8111a130:	a0c00417 	ldw	r3,16(r20)
8111a134:	1800a726 	beq	r3,zero,8111a3d4 <___vfiprintf_internal_r+0x318>
8111a138:	1080068c 	andi	r2,r2,26
8111a13c:	00c00284 	movi	r3,10
8111a140:	10c0ac26 	beq	r2,r3,8111a3f4 <___vfiprintf_internal_r+0x338>
8111a144:	da801a04 	addi	r10,sp,104
8111a148:	da801e15 	stw	r10,120(sp)
8111a14c:	d8801e17 	ldw	r2,120(sp)
8111a150:	da8019c4 	addi	r10,sp,103
8111a154:	05a044f4 	movhi	r22,33043
8111a158:	05e044f4 	movhi	r23,33043
8111a15c:	da801f15 	stw	r10,124(sp)
8111a160:	1295c83a 	sub	r10,r2,r10
8111a164:	b58f0204 	addi	r22,r22,15368
8111a168:	bdcefe04 	addi	r23,r23,15352
8111a16c:	dec01a15 	stw	sp,104(sp)
8111a170:	d8001c15 	stw	zero,112(sp)
8111a174:	d8001b15 	stw	zero,108(sp)
8111a178:	d8002615 	stw	zero,152(sp)
8111a17c:	d8002315 	stw	zero,140(sp)
8111a180:	da802715 	stw	r10,156(sp)
8111a184:	d811883a 	mov	r8,sp
8111a188:	dd002115 	stw	r20,132(sp)
8111a18c:	e021883a 	mov	r16,fp
8111a190:	80800007 	ldb	r2,0(r16)
8111a194:	1003ea26 	beq	r2,zero,8111b140 <___vfiprintf_internal_r+0x1084>
8111a198:	00c00944 	movi	r3,37
8111a19c:	8025883a 	mov	r18,r16
8111a1a0:	10c0021e 	bne	r2,r3,8111a1ac <___vfiprintf_internal_r+0xf0>
8111a1a4:	00001606 	br	8111a200 <___vfiprintf_internal_r+0x144>
8111a1a8:	10c00326 	beq	r2,r3,8111a1b8 <___vfiprintf_internal_r+0xfc>
8111a1ac:	94800044 	addi	r18,r18,1
8111a1b0:	90800007 	ldb	r2,0(r18)
8111a1b4:	103ffc1e 	bne	r2,zero,8111a1a8 <__reset+0xfb0fa1a8>
8111a1b8:	9423c83a 	sub	r17,r18,r16
8111a1bc:	88001026 	beq	r17,zero,8111a200 <___vfiprintf_internal_r+0x144>
8111a1c0:	d8c01c17 	ldw	r3,112(sp)
8111a1c4:	d8801b17 	ldw	r2,108(sp)
8111a1c8:	44000015 	stw	r16,0(r8)
8111a1cc:	88c7883a 	add	r3,r17,r3
8111a1d0:	10800044 	addi	r2,r2,1
8111a1d4:	44400115 	stw	r17,4(r8)
8111a1d8:	d8c01c15 	stw	r3,112(sp)
8111a1dc:	d8801b15 	stw	r2,108(sp)
8111a1e0:	010001c4 	movi	r4,7
8111a1e4:	2080760e 	bge	r4,r2,8111a3c0 <___vfiprintf_internal_r+0x304>
8111a1e8:	1803821e 	bne	r3,zero,8111aff4 <___vfiprintf_internal_r+0xf38>
8111a1ec:	da802317 	ldw	r10,140(sp)
8111a1f0:	d8001b15 	stw	zero,108(sp)
8111a1f4:	d811883a 	mov	r8,sp
8111a1f8:	5455883a 	add	r10,r10,r17
8111a1fc:	da802315 	stw	r10,140(sp)
8111a200:	90800007 	ldb	r2,0(r18)
8111a204:	10044626 	beq	r2,zero,8111b320 <___vfiprintf_internal_r+0x1264>
8111a208:	90c00047 	ldb	r3,1(r18)
8111a20c:	94000044 	addi	r16,r18,1
8111a210:	d8001d85 	stb	zero,118(sp)
8111a214:	0009883a 	mov	r4,zero
8111a218:	000f883a 	mov	r7,zero
8111a21c:	027fffc4 	movi	r9,-1
8111a220:	0023883a 	mov	r17,zero
8111a224:	0029883a 	mov	r20,zero
8111a228:	01401604 	movi	r5,88
8111a22c:	01800244 	movi	r6,9
8111a230:	03400a84 	movi	r13,42
8111a234:	03001b04 	movi	r12,108
8111a238:	84000044 	addi	r16,r16,1
8111a23c:	18bff804 	addi	r2,r3,-32
8111a240:	28827336 	bltu	r5,r2,8111ac10 <___vfiprintf_internal_r+0xb54>
8111a244:	100490ba 	slli	r2,r2,2
8111a248:	02a044b4 	movhi	r10,33042
8111a24c:	52a89704 	addi	r10,r10,-23972
8111a250:	1285883a 	add	r2,r2,r10
8111a254:	10800017 	ldw	r2,0(r2)
8111a258:	1000683a 	jmp	r2
8111a25c:	8111a944 	addi	r4,r16,18085
8111a260:	8111ac10 	cmplti	r4,r16,18096
8111a264:	8111ac10 	cmplti	r4,r16,18096
8111a268:	8111a964 	muli	r4,r16,18085
8111a26c:	8111ac10 	cmplti	r4,r16,18096
8111a270:	8111ac10 	cmplti	r4,r16,18096
8111a274:	8111ac10 	cmplti	r4,r16,18096
8111a278:	8111ac10 	cmplti	r4,r16,18096
8111a27c:	8111ac10 	cmplti	r4,r16,18096
8111a280:	8111ac10 	cmplti	r4,r16,18096
8111a284:	8111ab4c 	andi	r4,r16,18093
8111a288:	8111ab68 	cmpgeui	r4,r16,18093
8111a28c:	8111ac10 	cmplti	r4,r16,18096
8111a290:	8111a450 	cmplti	r4,r16,18065
8111a294:	8111ab78 	rdprs	r4,r16,18093
8111a298:	8111ac10 	cmplti	r4,r16,18096
8111a29c:	8111a970 	cmpltui	r4,r16,18085
8111a2a0:	8111a97c 	xorhi	r4,r16,18085
8111a2a4:	8111a97c 	xorhi	r4,r16,18085
8111a2a8:	8111a97c 	xorhi	r4,r16,18085
8111a2ac:	8111a97c 	xorhi	r4,r16,18085
8111a2b0:	8111a97c 	xorhi	r4,r16,18085
8111a2b4:	8111a97c 	xorhi	r4,r16,18085
8111a2b8:	8111a97c 	xorhi	r4,r16,18085
8111a2bc:	8111a97c 	xorhi	r4,r16,18085
8111a2c0:	8111a97c 	xorhi	r4,r16,18085
8111a2c4:	8111ac10 	cmplti	r4,r16,18096
8111a2c8:	8111ac10 	cmplti	r4,r16,18096
8111a2cc:	8111ac10 	cmplti	r4,r16,18096
8111a2d0:	8111ac10 	cmplti	r4,r16,18096
8111a2d4:	8111ac10 	cmplti	r4,r16,18096
8111a2d8:	8111ac10 	cmplti	r4,r16,18096
8111a2dc:	8111ac10 	cmplti	r4,r16,18096
8111a2e0:	8111ac10 	cmplti	r4,r16,18096
8111a2e4:	8111ac10 	cmplti	r4,r16,18096
8111a2e8:	8111ac10 	cmplti	r4,r16,18096
8111a2ec:	8111a9a8 	cmpgeui	r4,r16,18086
8111a2f0:	8111ac10 	cmplti	r4,r16,18096
8111a2f4:	8111ac10 	cmplti	r4,r16,18096
8111a2f8:	8111ac10 	cmplti	r4,r16,18096
8111a2fc:	8111ac10 	cmplti	r4,r16,18096
8111a300:	8111ac10 	cmplti	r4,r16,18096
8111a304:	8111ac10 	cmplti	r4,r16,18096
8111a308:	8111ac10 	cmplti	r4,r16,18096
8111a30c:	8111ac10 	cmplti	r4,r16,18096
8111a310:	8111ac10 	cmplti	r4,r16,18096
8111a314:	8111ac10 	cmplti	r4,r16,18096
8111a318:	8111a9e0 	cmpeqi	r4,r16,18087
8111a31c:	8111ac10 	cmplti	r4,r16,18096
8111a320:	8111ac10 	cmplti	r4,r16,18096
8111a324:	8111ac10 	cmplti	r4,r16,18096
8111a328:	8111ac10 	cmplti	r4,r16,18096
8111a32c:	8111ac10 	cmplti	r4,r16,18096
8111a330:	8111aa38 	rdprs	r4,r16,18088
8111a334:	8111ac10 	cmplti	r4,r16,18096
8111a338:	8111ac10 	cmplti	r4,r16,18096
8111a33c:	8111aaa8 	cmpgeui	r4,r16,18090
8111a340:	8111ac10 	cmplti	r4,r16,18096
8111a344:	8111ac10 	cmplti	r4,r16,18096
8111a348:	8111ac10 	cmplti	r4,r16,18096
8111a34c:	8111ac10 	cmplti	r4,r16,18096
8111a350:	8111ac10 	cmplti	r4,r16,18096
8111a354:	8111ac10 	cmplti	r4,r16,18096
8111a358:	8111ac10 	cmplti	r4,r16,18096
8111a35c:	8111ac10 	cmplti	r4,r16,18096
8111a360:	8111ac10 	cmplti	r4,r16,18096
8111a364:	8111ac10 	cmplti	r4,r16,18096
8111a368:	8111a854 	ori	r4,r16,18081
8111a36c:	8111a880 	call	88111a88 <__reset+0x20f1a88>
8111a370:	8111ac10 	cmplti	r4,r16,18096
8111a374:	8111ac10 	cmplti	r4,r16,18096
8111a378:	8111ac10 	cmplti	r4,r16,18096
8111a37c:	8111abb8 	rdprs	r4,r16,18094
8111a380:	8111a880 	call	88111a88 <__reset+0x20f1a88>
8111a384:	8111ac10 	cmplti	r4,r16,18096
8111a388:	8111ac10 	cmplti	r4,r16,18096
8111a38c:	8111a714 	ori	r4,r16,18076
8111a390:	8111ac10 	cmplti	r4,r16,18096
8111a394:	8111a724 	muli	r4,r16,18076
8111a398:	8111a760 	cmpeqi	r4,r16,18077
8111a39c:	8111a45c 	xori	r4,r16,18065
8111a3a0:	8111a708 	cmpgei	r4,r16,18076
8111a3a4:	8111ac10 	cmplti	r4,r16,18096
8111a3a8:	8111aae4 	muli	r4,r16,18091
8111a3ac:	8111ac10 	cmplti	r4,r16,18096
8111a3b0:	8111ab3c 	xorhi	r4,r16,18092
8111a3b4:	8111ac10 	cmplti	r4,r16,18096
8111a3b8:	8111ac10 	cmplti	r4,r16,18096
8111a3bc:	8111a800 	call	88111a80 <__reset+0x20f1a80>
8111a3c0:	42000204 	addi	r8,r8,8
8111a3c4:	da802317 	ldw	r10,140(sp)
8111a3c8:	5455883a 	add	r10,r10,r17
8111a3cc:	da802315 	stw	r10,140(sp)
8111a3d0:	003f8b06 	br	8111a200 <__reset+0xfb0fa200>
8111a3d4:	d9002017 	ldw	r4,128(sp)
8111a3d8:	a00b883a 	mov	r5,r20
8111a3dc:	1111cf40 	call	81111cf4 <__swsetup_r>
8111a3e0:	1003b11e 	bne	r2,zero,8111b2a8 <___vfiprintf_internal_r+0x11ec>
8111a3e4:	a080030b 	ldhu	r2,12(r20)
8111a3e8:	00c00284 	movi	r3,10
8111a3ec:	1080068c 	andi	r2,r2,26
8111a3f0:	10ff541e 	bne	r2,r3,8111a144 <__reset+0xfb0fa144>
8111a3f4:	a080038f 	ldh	r2,14(r20)
8111a3f8:	103f5216 	blt	r2,zero,8111a144 <__reset+0xfb0fa144>
8111a3fc:	d9c02217 	ldw	r7,136(sp)
8111a400:	d9002017 	ldw	r4,128(sp)
8111a404:	e00d883a 	mov	r6,fp
8111a408:	a00b883a 	mov	r5,r20
8111a40c:	111b5340 	call	8111b534 <__sbprintf>
8111a410:	dfc03617 	ldw	ra,216(sp)
8111a414:	df003517 	ldw	fp,212(sp)
8111a418:	ddc03417 	ldw	r23,208(sp)
8111a41c:	dd803317 	ldw	r22,204(sp)
8111a420:	dd403217 	ldw	r21,200(sp)
8111a424:	dd003117 	ldw	r20,196(sp)
8111a428:	dcc03017 	ldw	r19,192(sp)
8111a42c:	dc802f17 	ldw	r18,188(sp)
8111a430:	dc402e17 	ldw	r17,184(sp)
8111a434:	dc002d17 	ldw	r16,180(sp)
8111a438:	dec03704 	addi	sp,sp,220
8111a43c:	f800283a 	ret
8111a440:	1113d1c0 	call	81113d1c <__sinit>
8111a444:	003f2f06 	br	8111a104 <__reset+0xfb0fa104>
8111a448:	0463c83a 	sub	r17,zero,r17
8111a44c:	d8802215 	stw	r2,136(sp)
8111a450:	a5000114 	ori	r20,r20,4
8111a454:	80c00007 	ldb	r3,0(r16)
8111a458:	003f7706 	br	8111a238 <__reset+0xfb0fa238>
8111a45c:	00800c04 	movi	r2,48
8111a460:	da802217 	ldw	r10,136(sp)
8111a464:	d8801d05 	stb	r2,116(sp)
8111a468:	00801e04 	movi	r2,120
8111a46c:	d8801d45 	stb	r2,117(sp)
8111a470:	d8001d85 	stb	zero,118(sp)
8111a474:	50c00104 	addi	r3,r10,4
8111a478:	54800017 	ldw	r18,0(r10)
8111a47c:	0027883a 	mov	r19,zero
8111a480:	a0800094 	ori	r2,r20,2
8111a484:	48030b16 	blt	r9,zero,8111b0b4 <___vfiprintf_internal_r+0xff8>
8111a488:	00bfdfc4 	movi	r2,-129
8111a48c:	a096703a 	and	r11,r20,r2
8111a490:	d8c02215 	stw	r3,136(sp)
8111a494:	5d000094 	ori	r20,r11,2
8111a498:	90032b1e 	bne	r18,zero,8111b148 <___vfiprintf_internal_r+0x108c>
8111a49c:	00a044f4 	movhi	r2,33043
8111a4a0:	108dcb04 	addi	r2,r2,14124
8111a4a4:	d8802615 	stw	r2,152(sp)
8111a4a8:	0039883a 	mov	fp,zero
8111a4ac:	48017b1e 	bne	r9,zero,8111aa9c <___vfiprintf_internal_r+0x9e0>
8111a4b0:	0013883a 	mov	r9,zero
8111a4b4:	0027883a 	mov	r19,zero
8111a4b8:	dd401a04 	addi	r21,sp,104
8111a4bc:	4825883a 	mov	r18,r9
8111a4c0:	4cc0010e 	bge	r9,r19,8111a4c8 <___vfiprintf_internal_r+0x40c>
8111a4c4:	9825883a 	mov	r18,r19
8111a4c8:	e7003fcc 	andi	fp,fp,255
8111a4cc:	e700201c 	xori	fp,fp,128
8111a4d0:	e73fe004 	addi	fp,fp,-128
8111a4d4:	e0000126 	beq	fp,zero,8111a4dc <___vfiprintf_internal_r+0x420>
8111a4d8:	94800044 	addi	r18,r18,1
8111a4dc:	a380008c 	andi	r14,r20,2
8111a4e0:	70000126 	beq	r14,zero,8111a4e8 <___vfiprintf_internal_r+0x42c>
8111a4e4:	94800084 	addi	r18,r18,2
8111a4e8:	a700210c 	andi	fp,r20,132
8111a4ec:	e001df1e 	bne	fp,zero,8111ac6c <___vfiprintf_internal_r+0xbb0>
8111a4f0:	8c87c83a 	sub	r3,r17,r18
8111a4f4:	00c1dd0e 	bge	zero,r3,8111ac6c <___vfiprintf_internal_r+0xbb0>
8111a4f8:	01c00404 	movi	r7,16
8111a4fc:	d8801c17 	ldw	r2,112(sp)
8111a500:	38c3ad0e 	bge	r7,r3,8111b3b8 <___vfiprintf_internal_r+0x12fc>
8111a504:	02a044f4 	movhi	r10,33043
8111a508:	528f0204 	addi	r10,r10,15368
8111a50c:	dc002915 	stw	r16,164(sp)
8111a510:	d9801b17 	ldw	r6,108(sp)
8111a514:	da802415 	stw	r10,144(sp)
8111a518:	03c001c4 	movi	r15,7
8111a51c:	da402515 	stw	r9,148(sp)
8111a520:	db802815 	stw	r14,160(sp)
8111a524:	1821883a 	mov	r16,r3
8111a528:	00000506 	br	8111a540 <___vfiprintf_internal_r+0x484>
8111a52c:	31400084 	addi	r5,r6,2
8111a530:	42000204 	addi	r8,r8,8
8111a534:	200d883a 	mov	r6,r4
8111a538:	843ffc04 	addi	r16,r16,-16
8111a53c:	3c000d0e 	bge	r7,r16,8111a574 <___vfiprintf_internal_r+0x4b8>
8111a540:	10800404 	addi	r2,r2,16
8111a544:	31000044 	addi	r4,r6,1
8111a548:	45800015 	stw	r22,0(r8)
8111a54c:	41c00115 	stw	r7,4(r8)
8111a550:	d8801c15 	stw	r2,112(sp)
8111a554:	d9001b15 	stw	r4,108(sp)
8111a558:	793ff40e 	bge	r15,r4,8111a52c <__reset+0xfb0fa52c>
8111a55c:	1001b51e 	bne	r2,zero,8111ac34 <___vfiprintf_internal_r+0xb78>
8111a560:	843ffc04 	addi	r16,r16,-16
8111a564:	000d883a 	mov	r6,zero
8111a568:	01400044 	movi	r5,1
8111a56c:	d811883a 	mov	r8,sp
8111a570:	3c3ff316 	blt	r7,r16,8111a540 <__reset+0xfb0fa540>
8111a574:	8007883a 	mov	r3,r16
8111a578:	da402517 	ldw	r9,148(sp)
8111a57c:	db802817 	ldw	r14,160(sp)
8111a580:	dc002917 	ldw	r16,164(sp)
8111a584:	da802417 	ldw	r10,144(sp)
8111a588:	1885883a 	add	r2,r3,r2
8111a58c:	40c00115 	stw	r3,4(r8)
8111a590:	42800015 	stw	r10,0(r8)
8111a594:	d8801c15 	stw	r2,112(sp)
8111a598:	d9401b15 	stw	r5,108(sp)
8111a59c:	00c001c4 	movi	r3,7
8111a5a0:	19426016 	blt	r3,r5,8111af24 <___vfiprintf_internal_r+0xe68>
8111a5a4:	d8c01d87 	ldb	r3,118(sp)
8111a5a8:	42000204 	addi	r8,r8,8
8111a5ac:	29000044 	addi	r4,r5,1
8111a5b0:	1801b31e 	bne	r3,zero,8111ac80 <___vfiprintf_internal_r+0xbc4>
8111a5b4:	7001c026 	beq	r14,zero,8111acb8 <___vfiprintf_internal_r+0xbfc>
8111a5b8:	d8c01d04 	addi	r3,sp,116
8111a5bc:	10800084 	addi	r2,r2,2
8111a5c0:	40c00015 	stw	r3,0(r8)
8111a5c4:	00c00084 	movi	r3,2
8111a5c8:	40c00115 	stw	r3,4(r8)
8111a5cc:	d8801c15 	stw	r2,112(sp)
8111a5d0:	d9001b15 	stw	r4,108(sp)
8111a5d4:	00c001c4 	movi	r3,7
8111a5d8:	1902650e 	bge	r3,r4,8111af70 <___vfiprintf_internal_r+0xeb4>
8111a5dc:	10029a1e 	bne	r2,zero,8111b048 <___vfiprintf_internal_r+0xf8c>
8111a5e0:	00c02004 	movi	r3,128
8111a5e4:	01000044 	movi	r4,1
8111a5e8:	000b883a 	mov	r5,zero
8111a5ec:	d811883a 	mov	r8,sp
8111a5f0:	e0c1b31e 	bne	fp,r3,8111acc0 <___vfiprintf_internal_r+0xc04>
8111a5f4:	8cb9c83a 	sub	fp,r17,r18
8111a5f8:	0701b10e 	bge	zero,fp,8111acc0 <___vfiprintf_internal_r+0xc04>
8111a5fc:	01c00404 	movi	r7,16
8111a600:	3f03890e 	bge	r7,fp,8111b428 <___vfiprintf_internal_r+0x136c>
8111a604:	00e044f4 	movhi	r3,33043
8111a608:	18cefe04 	addi	r3,r3,15352
8111a60c:	d8c02415 	stw	r3,144(sp)
8111a610:	8007883a 	mov	r3,r16
8111a614:	034001c4 	movi	r13,7
8111a618:	e021883a 	mov	r16,fp
8111a61c:	da402515 	stw	r9,148(sp)
8111a620:	1839883a 	mov	fp,r3
8111a624:	00000506 	br	8111a63c <___vfiprintf_internal_r+0x580>
8111a628:	29800084 	addi	r6,r5,2
8111a62c:	42000204 	addi	r8,r8,8
8111a630:	180b883a 	mov	r5,r3
8111a634:	843ffc04 	addi	r16,r16,-16
8111a638:	3c000d0e 	bge	r7,r16,8111a670 <___vfiprintf_internal_r+0x5b4>
8111a63c:	10800404 	addi	r2,r2,16
8111a640:	28c00044 	addi	r3,r5,1
8111a644:	45c00015 	stw	r23,0(r8)
8111a648:	41c00115 	stw	r7,4(r8)
8111a64c:	d8801c15 	stw	r2,112(sp)
8111a650:	d8c01b15 	stw	r3,108(sp)
8111a654:	68fff40e 	bge	r13,r3,8111a628 <__reset+0xfb0fa628>
8111a658:	1002241e 	bne	r2,zero,8111aeec <___vfiprintf_internal_r+0xe30>
8111a65c:	843ffc04 	addi	r16,r16,-16
8111a660:	01800044 	movi	r6,1
8111a664:	000b883a 	mov	r5,zero
8111a668:	d811883a 	mov	r8,sp
8111a66c:	3c3ff316 	blt	r7,r16,8111a63c <__reset+0xfb0fa63c>
8111a670:	da402517 	ldw	r9,148(sp)
8111a674:	e007883a 	mov	r3,fp
8111a678:	8039883a 	mov	fp,r16
8111a67c:	1821883a 	mov	r16,r3
8111a680:	d8c02417 	ldw	r3,144(sp)
8111a684:	1705883a 	add	r2,r2,fp
8111a688:	47000115 	stw	fp,4(r8)
8111a68c:	40c00015 	stw	r3,0(r8)
8111a690:	d8801c15 	stw	r2,112(sp)
8111a694:	d9801b15 	stw	r6,108(sp)
8111a698:	00c001c4 	movi	r3,7
8111a69c:	19827616 	blt	r3,r6,8111b078 <___vfiprintf_internal_r+0xfbc>
8111a6a0:	4cf9c83a 	sub	fp,r9,r19
8111a6a4:	42000204 	addi	r8,r8,8
8111a6a8:	31000044 	addi	r4,r6,1
8111a6ac:	300b883a 	mov	r5,r6
8111a6b0:	07018516 	blt	zero,fp,8111acc8 <___vfiprintf_internal_r+0xc0c>
8111a6b4:	9885883a 	add	r2,r19,r2
8111a6b8:	45400015 	stw	r21,0(r8)
8111a6bc:	44c00115 	stw	r19,4(r8)
8111a6c0:	d8801c15 	stw	r2,112(sp)
8111a6c4:	d9001b15 	stw	r4,108(sp)
8111a6c8:	00c001c4 	movi	r3,7
8111a6cc:	1901dd0e 	bge	r3,r4,8111ae44 <___vfiprintf_internal_r+0xd88>
8111a6d0:	1002401e 	bne	r2,zero,8111afd4 <___vfiprintf_internal_r+0xf18>
8111a6d4:	d8001b15 	stw	zero,108(sp)
8111a6d8:	a2c0010c 	andi	r11,r20,4
8111a6dc:	58000226 	beq	r11,zero,8111a6e8 <___vfiprintf_internal_r+0x62c>
8111a6e0:	8ca7c83a 	sub	r19,r17,r18
8111a6e4:	04c2f216 	blt	zero,r19,8111b2b0 <___vfiprintf_internal_r+0x11f4>
8111a6e8:	8c80010e 	bge	r17,r18,8111a6f0 <___vfiprintf_internal_r+0x634>
8111a6ec:	9023883a 	mov	r17,r18
8111a6f0:	da802317 	ldw	r10,140(sp)
8111a6f4:	5455883a 	add	r10,r10,r17
8111a6f8:	da802315 	stw	r10,140(sp)
8111a6fc:	d8001b15 	stw	zero,108(sp)
8111a700:	d811883a 	mov	r8,sp
8111a704:	003ea206 	br	8111a190 <__reset+0xfb0fa190>
8111a708:	a5000814 	ori	r20,r20,32
8111a70c:	80c00007 	ldb	r3,0(r16)
8111a710:	003ec906 	br	8111a238 <__reset+0xfb0fa238>
8111a714:	80c00007 	ldb	r3,0(r16)
8111a718:	1b030926 	beq	r3,r12,8111b340 <___vfiprintf_internal_r+0x1284>
8111a71c:	a5000414 	ori	r20,r20,16
8111a720:	003ec506 	br	8111a238 <__reset+0xfb0fa238>
8111a724:	21003fcc 	andi	r4,r4,255
8111a728:	20035e1e 	bne	r4,zero,8111b4a4 <___vfiprintf_internal_r+0x13e8>
8111a72c:	a080080c 	andi	r2,r20,32
8111a730:	1002a526 	beq	r2,zero,8111b1c8 <___vfiprintf_internal_r+0x110c>
8111a734:	da802217 	ldw	r10,136(sp)
8111a738:	50800017 	ldw	r2,0(r10)
8111a73c:	da802317 	ldw	r10,140(sp)
8111a740:	5007d7fa 	srai	r3,r10,31
8111a744:	da802217 	ldw	r10,136(sp)
8111a748:	10c00115 	stw	r3,4(r2)
8111a74c:	52800104 	addi	r10,r10,4
8111a750:	da802215 	stw	r10,136(sp)
8111a754:	da802317 	ldw	r10,140(sp)
8111a758:	12800015 	stw	r10,0(r2)
8111a75c:	003e8c06 	br	8111a190 <__reset+0xfb0fa190>
8111a760:	21003fcc 	andi	r4,r4,255
8111a764:	2003511e 	bne	r4,zero,8111b4ac <___vfiprintf_internal_r+0x13f0>
8111a768:	a080080c 	andi	r2,r20,32
8111a76c:	1000a126 	beq	r2,zero,8111a9f4 <___vfiprintf_internal_r+0x938>
8111a770:	da802217 	ldw	r10,136(sp)
8111a774:	d8001d85 	stb	zero,118(sp)
8111a778:	50800204 	addi	r2,r10,8
8111a77c:	54800017 	ldw	r18,0(r10)
8111a780:	54c00117 	ldw	r19,4(r10)
8111a784:	4802b416 	blt	r9,zero,8111b258 <___vfiprintf_internal_r+0x119c>
8111a788:	013fdfc4 	movi	r4,-129
8111a78c:	94c6b03a 	or	r3,r18,r19
8111a790:	d8802215 	stw	r2,136(sp)
8111a794:	a128703a 	and	r20,r20,r4
8111a798:	1800a226 	beq	r3,zero,8111aa24 <___vfiprintf_internal_r+0x968>
8111a79c:	0039883a 	mov	fp,zero
8111a7a0:	dd401a04 	addi	r21,sp,104
8111a7a4:	9006d0fa 	srli	r3,r18,3
8111a7a8:	9808977a 	slli	r4,r19,29
8111a7ac:	9826d0fa 	srli	r19,r19,3
8111a7b0:	948001cc 	andi	r18,r18,7
8111a7b4:	90800c04 	addi	r2,r18,48
8111a7b8:	ad7fffc4 	addi	r21,r21,-1
8111a7bc:	20e4b03a 	or	r18,r4,r3
8111a7c0:	a8800005 	stb	r2,0(r21)
8111a7c4:	94c6b03a 	or	r3,r18,r19
8111a7c8:	183ff61e 	bne	r3,zero,8111a7a4 <__reset+0xfb0fa7a4>
8111a7cc:	a0c0004c 	andi	r3,r20,1
8111a7d0:	18005926 	beq	r3,zero,8111a938 <___vfiprintf_internal_r+0x87c>
8111a7d4:	10803fcc 	andi	r2,r2,255
8111a7d8:	1080201c 	xori	r2,r2,128
8111a7dc:	10bfe004 	addi	r2,r2,-128
8111a7e0:	00c00c04 	movi	r3,48
8111a7e4:	10c05426 	beq	r2,r3,8111a938 <___vfiprintf_internal_r+0x87c>
8111a7e8:	da801e17 	ldw	r10,120(sp)
8111a7ec:	a8bfffc4 	addi	r2,r21,-1
8111a7f0:	a8ffffc5 	stb	r3,-1(r21)
8111a7f4:	50a7c83a 	sub	r19,r10,r2
8111a7f8:	102b883a 	mov	r21,r2
8111a7fc:	003f2f06 	br	8111a4bc <__reset+0xfb0fa4bc>
8111a800:	21003fcc 	andi	r4,r4,255
8111a804:	2003421e 	bne	r4,zero,8111b510 <___vfiprintf_internal_r+0x1454>
8111a808:	00a044f4 	movhi	r2,33043
8111a80c:	108dcb04 	addi	r2,r2,14124
8111a810:	d8802615 	stw	r2,152(sp)
8111a814:	a080080c 	andi	r2,r20,32
8111a818:	1000aa26 	beq	r2,zero,8111aac4 <___vfiprintf_internal_r+0xa08>
8111a81c:	da802217 	ldw	r10,136(sp)
8111a820:	54800017 	ldw	r18,0(r10)
8111a824:	54c00117 	ldw	r19,4(r10)
8111a828:	52800204 	addi	r10,r10,8
8111a82c:	da802215 	stw	r10,136(sp)
8111a830:	a080004c 	andi	r2,r20,1
8111a834:	1001d226 	beq	r2,zero,8111af80 <___vfiprintf_internal_r+0xec4>
8111a838:	94c4b03a 	or	r2,r18,r19
8111a83c:	1002351e 	bne	r2,zero,8111b114 <___vfiprintf_internal_r+0x1058>
8111a840:	d8001d85 	stb	zero,118(sp)
8111a844:	48022216 	blt	r9,zero,8111b0d0 <___vfiprintf_internal_r+0x1014>
8111a848:	00bfdfc4 	movi	r2,-129
8111a84c:	a0a8703a 	and	r20,r20,r2
8111a850:	003f1506 	br	8111a4a8 <__reset+0xfb0fa4a8>
8111a854:	da802217 	ldw	r10,136(sp)
8111a858:	04800044 	movi	r18,1
8111a85c:	d8001d85 	stb	zero,118(sp)
8111a860:	50800017 	ldw	r2,0(r10)
8111a864:	52800104 	addi	r10,r10,4
8111a868:	da802215 	stw	r10,136(sp)
8111a86c:	d8801005 	stb	r2,64(sp)
8111a870:	9027883a 	mov	r19,r18
8111a874:	dd401004 	addi	r21,sp,64
8111a878:	0013883a 	mov	r9,zero
8111a87c:	003f1706 	br	8111a4dc <__reset+0xfb0fa4dc>
8111a880:	21003fcc 	andi	r4,r4,255
8111a884:	2003201e 	bne	r4,zero,8111b508 <___vfiprintf_internal_r+0x144c>
8111a888:	a080080c 	andi	r2,r20,32
8111a88c:	10004b26 	beq	r2,zero,8111a9bc <___vfiprintf_internal_r+0x900>
8111a890:	da802217 	ldw	r10,136(sp)
8111a894:	50800117 	ldw	r2,4(r10)
8111a898:	54800017 	ldw	r18,0(r10)
8111a89c:	52800204 	addi	r10,r10,8
8111a8a0:	da802215 	stw	r10,136(sp)
8111a8a4:	1027883a 	mov	r19,r2
8111a8a8:	10022c16 	blt	r2,zero,8111b15c <___vfiprintf_internal_r+0x10a0>
8111a8ac:	df001d83 	ldbu	fp,118(sp)
8111a8b0:	48007216 	blt	r9,zero,8111aa7c <___vfiprintf_internal_r+0x9c0>
8111a8b4:	00ffdfc4 	movi	r3,-129
8111a8b8:	94c4b03a 	or	r2,r18,r19
8111a8bc:	a0e8703a 	and	r20,r20,r3
8111a8c0:	1000cc26 	beq	r2,zero,8111abf4 <___vfiprintf_internal_r+0xb38>
8111a8c4:	98021026 	beq	r19,zero,8111b108 <___vfiprintf_internal_r+0x104c>
8111a8c8:	dc402415 	stw	r17,144(sp)
8111a8cc:	dc002515 	stw	r16,148(sp)
8111a8d0:	9823883a 	mov	r17,r19
8111a8d4:	9021883a 	mov	r16,r18
8111a8d8:	dd401a04 	addi	r21,sp,104
8111a8dc:	4825883a 	mov	r18,r9
8111a8e0:	4027883a 	mov	r19,r8
8111a8e4:	8009883a 	mov	r4,r16
8111a8e8:	880b883a 	mov	r5,r17
8111a8ec:	01800284 	movi	r6,10
8111a8f0:	000f883a 	mov	r7,zero
8111a8f4:	111cf480 	call	8111cf48 <__umoddi3>
8111a8f8:	10800c04 	addi	r2,r2,48
8111a8fc:	ad7fffc4 	addi	r21,r21,-1
8111a900:	8009883a 	mov	r4,r16
8111a904:	880b883a 	mov	r5,r17
8111a908:	a8800005 	stb	r2,0(r21)
8111a90c:	01800284 	movi	r6,10
8111a910:	000f883a 	mov	r7,zero
8111a914:	111c9d00 	call	8111c9d0 <__udivdi3>
8111a918:	1021883a 	mov	r16,r2
8111a91c:	10c4b03a 	or	r2,r2,r3
8111a920:	1823883a 	mov	r17,r3
8111a924:	103fef1e 	bne	r2,zero,8111a8e4 <__reset+0xfb0fa8e4>
8111a928:	dc402417 	ldw	r17,144(sp)
8111a92c:	dc002517 	ldw	r16,148(sp)
8111a930:	9013883a 	mov	r9,r18
8111a934:	9811883a 	mov	r8,r19
8111a938:	da801e17 	ldw	r10,120(sp)
8111a93c:	5567c83a 	sub	r19,r10,r21
8111a940:	003ede06 	br	8111a4bc <__reset+0xfb0fa4bc>
8111a944:	38803fcc 	andi	r2,r7,255
8111a948:	1080201c 	xori	r2,r2,128
8111a94c:	10bfe004 	addi	r2,r2,-128
8111a950:	1002371e 	bne	r2,zero,8111b230 <___vfiprintf_internal_r+0x1174>
8111a954:	01000044 	movi	r4,1
8111a958:	01c00804 	movi	r7,32
8111a95c:	80c00007 	ldb	r3,0(r16)
8111a960:	003e3506 	br	8111a238 <__reset+0xfb0fa238>
8111a964:	a5000054 	ori	r20,r20,1
8111a968:	80c00007 	ldb	r3,0(r16)
8111a96c:	003e3206 	br	8111a238 <__reset+0xfb0fa238>
8111a970:	a5002014 	ori	r20,r20,128
8111a974:	80c00007 	ldb	r3,0(r16)
8111a978:	003e2f06 	br	8111a238 <__reset+0xfb0fa238>
8111a97c:	8015883a 	mov	r10,r16
8111a980:	0023883a 	mov	r17,zero
8111a984:	18bff404 	addi	r2,r3,-48
8111a988:	50c00007 	ldb	r3,0(r10)
8111a98c:	8c4002a4 	muli	r17,r17,10
8111a990:	84000044 	addi	r16,r16,1
8111a994:	8015883a 	mov	r10,r16
8111a998:	1463883a 	add	r17,r2,r17
8111a99c:	18bff404 	addi	r2,r3,-48
8111a9a0:	30bff92e 	bgeu	r6,r2,8111a988 <__reset+0xfb0fa988>
8111a9a4:	003e2506 	br	8111a23c <__reset+0xfb0fa23c>
8111a9a8:	21003fcc 	andi	r4,r4,255
8111a9ac:	2002d41e 	bne	r4,zero,8111b500 <___vfiprintf_internal_r+0x1444>
8111a9b0:	a5000414 	ori	r20,r20,16
8111a9b4:	a080080c 	andi	r2,r20,32
8111a9b8:	103fb51e 	bne	r2,zero,8111a890 <__reset+0xfb0fa890>
8111a9bc:	a080040c 	andi	r2,r20,16
8111a9c0:	1001f826 	beq	r2,zero,8111b1a4 <___vfiprintf_internal_r+0x10e8>
8111a9c4:	da802217 	ldw	r10,136(sp)
8111a9c8:	54800017 	ldw	r18,0(r10)
8111a9cc:	52800104 	addi	r10,r10,4
8111a9d0:	da802215 	stw	r10,136(sp)
8111a9d4:	9027d7fa 	srai	r19,r18,31
8111a9d8:	9805883a 	mov	r2,r19
8111a9dc:	003fb206 	br	8111a8a8 <__reset+0xfb0fa8a8>
8111a9e0:	21003fcc 	andi	r4,r4,255
8111a9e4:	2002c41e 	bne	r4,zero,8111b4f8 <___vfiprintf_internal_r+0x143c>
8111a9e8:	a5000414 	ori	r20,r20,16
8111a9ec:	a080080c 	andi	r2,r20,32
8111a9f0:	103f5f1e 	bne	r2,zero,8111a770 <__reset+0xfb0fa770>
8111a9f4:	a080040c 	andi	r2,r20,16
8111a9f8:	10020f26 	beq	r2,zero,8111b238 <___vfiprintf_internal_r+0x117c>
8111a9fc:	da802217 	ldw	r10,136(sp)
8111aa00:	d8001d85 	stb	zero,118(sp)
8111aa04:	0027883a 	mov	r19,zero
8111aa08:	50800104 	addi	r2,r10,4
8111aa0c:	54800017 	ldw	r18,0(r10)
8111aa10:	48021116 	blt	r9,zero,8111b258 <___vfiprintf_internal_r+0x119c>
8111aa14:	00ffdfc4 	movi	r3,-129
8111aa18:	d8802215 	stw	r2,136(sp)
8111aa1c:	a0e8703a 	and	r20,r20,r3
8111aa20:	903f5e1e 	bne	r18,zero,8111a79c <__reset+0xfb0fa79c>
8111aa24:	0039883a 	mov	fp,zero
8111aa28:	4802a626 	beq	r9,zero,8111b4c4 <___vfiprintf_internal_r+0x1408>
8111aa2c:	0025883a 	mov	r18,zero
8111aa30:	0027883a 	mov	r19,zero
8111aa34:	003f5a06 	br	8111a7a0 <__reset+0xfb0fa7a0>
8111aa38:	21003fcc 	andi	r4,r4,255
8111aa3c:	20029f1e 	bne	r4,zero,8111b4bc <___vfiprintf_internal_r+0x1400>
8111aa40:	a5000414 	ori	r20,r20,16
8111aa44:	a080080c 	andi	r2,r20,32
8111aa48:	10005e1e 	bne	r2,zero,8111abc4 <___vfiprintf_internal_r+0xb08>
8111aa4c:	a080040c 	andi	r2,r20,16
8111aa50:	1001a21e 	bne	r2,zero,8111b0dc <___vfiprintf_internal_r+0x1020>
8111aa54:	a080100c 	andi	r2,r20,64
8111aa58:	d8001d85 	stb	zero,118(sp)
8111aa5c:	da802217 	ldw	r10,136(sp)
8111aa60:	1002231e 	bne	r2,zero,8111b2f0 <___vfiprintf_internal_r+0x1234>
8111aa64:	50800104 	addi	r2,r10,4
8111aa68:	54800017 	ldw	r18,0(r10)
8111aa6c:	0027883a 	mov	r19,zero
8111aa70:	4801a00e 	bge	r9,zero,8111b0f4 <___vfiprintf_internal_r+0x1038>
8111aa74:	d8802215 	stw	r2,136(sp)
8111aa78:	0039883a 	mov	fp,zero
8111aa7c:	94c4b03a 	or	r2,r18,r19
8111aa80:	103f901e 	bne	r2,zero,8111a8c4 <__reset+0xfb0fa8c4>
8111aa84:	00800044 	movi	r2,1
8111aa88:	10803fcc 	andi	r2,r2,255
8111aa8c:	00c00044 	movi	r3,1
8111aa90:	10c05926 	beq	r2,r3,8111abf8 <___vfiprintf_internal_r+0xb3c>
8111aa94:	00c00084 	movi	r3,2
8111aa98:	10ffe41e 	bne	r2,r3,8111aa2c <__reset+0xfb0faa2c>
8111aa9c:	0025883a 	mov	r18,zero
8111aaa0:	0027883a 	mov	r19,zero
8111aaa4:	00013d06 	br	8111af9c <___vfiprintf_internal_r+0xee0>
8111aaa8:	21003fcc 	andi	r4,r4,255
8111aaac:	2002811e 	bne	r4,zero,8111b4b4 <___vfiprintf_internal_r+0x13f8>
8111aab0:	00a044f4 	movhi	r2,33043
8111aab4:	108dc604 	addi	r2,r2,14104
8111aab8:	d8802615 	stw	r2,152(sp)
8111aabc:	a080080c 	andi	r2,r20,32
8111aac0:	103f561e 	bne	r2,zero,8111a81c <__reset+0xfb0fa81c>
8111aac4:	a080040c 	andi	r2,r20,16
8111aac8:	1001d126 	beq	r2,zero,8111b210 <___vfiprintf_internal_r+0x1154>
8111aacc:	da802217 	ldw	r10,136(sp)
8111aad0:	0027883a 	mov	r19,zero
8111aad4:	54800017 	ldw	r18,0(r10)
8111aad8:	52800104 	addi	r10,r10,4
8111aadc:	da802215 	stw	r10,136(sp)
8111aae0:	003f5306 	br	8111a830 <__reset+0xfb0fa830>
8111aae4:	da802217 	ldw	r10,136(sp)
8111aae8:	d8001d85 	stb	zero,118(sp)
8111aaec:	55400017 	ldw	r21,0(r10)
8111aaf0:	50c00104 	addi	r3,r10,4
8111aaf4:	a8024226 	beq	r21,zero,8111b400 <___vfiprintf_internal_r+0x1344>
8111aaf8:	48021816 	blt	r9,zero,8111b35c <___vfiprintf_internal_r+0x12a0>
8111aafc:	480d883a 	mov	r6,r9
8111ab00:	000b883a 	mov	r5,zero
8111ab04:	a809883a 	mov	r4,r21
8111ab08:	d8c02a15 	stw	r3,168(sp)
8111ab0c:	da002b15 	stw	r8,172(sp)
8111ab10:	da402c15 	stw	r9,176(sp)
8111ab14:	1114ed40 	call	81114ed4 <memchr>
8111ab18:	d8c02a17 	ldw	r3,168(sp)
8111ab1c:	da002b17 	ldw	r8,172(sp)
8111ab20:	da402c17 	ldw	r9,176(sp)
8111ab24:	10024826 	beq	r2,zero,8111b448 <___vfiprintf_internal_r+0x138c>
8111ab28:	1567c83a 	sub	r19,r2,r21
8111ab2c:	df001d83 	ldbu	fp,118(sp)
8111ab30:	d8c02215 	stw	r3,136(sp)
8111ab34:	0013883a 	mov	r9,zero
8111ab38:	003e6006 	br	8111a4bc <__reset+0xfb0fa4bc>
8111ab3c:	21003fcc 	andi	r4,r4,255
8111ab40:	203fc026 	beq	r4,zero,8111aa44 <__reset+0xfb0faa44>
8111ab44:	d9c01d85 	stb	r7,118(sp)
8111ab48:	003fbe06 	br	8111aa44 <__reset+0xfb0faa44>
8111ab4c:	da802217 	ldw	r10,136(sp)
8111ab50:	54400017 	ldw	r17,0(r10)
8111ab54:	50800104 	addi	r2,r10,4
8111ab58:	883e3b16 	blt	r17,zero,8111a448 <__reset+0xfb0fa448>
8111ab5c:	d8802215 	stw	r2,136(sp)
8111ab60:	80c00007 	ldb	r3,0(r16)
8111ab64:	003db406 	br	8111a238 <__reset+0xfb0fa238>
8111ab68:	01000044 	movi	r4,1
8111ab6c:	01c00ac4 	movi	r7,43
8111ab70:	80c00007 	ldb	r3,0(r16)
8111ab74:	003db006 	br	8111a238 <__reset+0xfb0fa238>
8111ab78:	80c00007 	ldb	r3,0(r16)
8111ab7c:	82800044 	addi	r10,r16,1
8111ab80:	1b423c26 	beq	r3,r13,8111b474 <___vfiprintf_internal_r+0x13b8>
8111ab84:	18bff404 	addi	r2,r3,-48
8111ab88:	0013883a 	mov	r9,zero
8111ab8c:	30822b36 	bltu	r6,r2,8111b43c <___vfiprintf_internal_r+0x1380>
8111ab90:	50c00007 	ldb	r3,0(r10)
8111ab94:	4a4002a4 	muli	r9,r9,10
8111ab98:	54000044 	addi	r16,r10,1
8111ab9c:	8015883a 	mov	r10,r16
8111aba0:	4893883a 	add	r9,r9,r2
8111aba4:	18bff404 	addi	r2,r3,-48
8111aba8:	30bff92e 	bgeu	r6,r2,8111ab90 <__reset+0xfb0fab90>
8111abac:	483da30e 	bge	r9,zero,8111a23c <__reset+0xfb0fa23c>
8111abb0:	027fffc4 	movi	r9,-1
8111abb4:	003da106 	br	8111a23c <__reset+0xfb0fa23c>
8111abb8:	a5001014 	ori	r20,r20,64
8111abbc:	80c00007 	ldb	r3,0(r16)
8111abc0:	003d9d06 	br	8111a238 <__reset+0xfb0fa238>
8111abc4:	da802217 	ldw	r10,136(sp)
8111abc8:	d8001d85 	stb	zero,118(sp)
8111abcc:	50c00204 	addi	r3,r10,8
8111abd0:	54800017 	ldw	r18,0(r10)
8111abd4:	54c00117 	ldw	r19,4(r10)
8111abd8:	4801ca16 	blt	r9,zero,8111b304 <___vfiprintf_internal_r+0x1248>
8111abdc:	013fdfc4 	movi	r4,-129
8111abe0:	94c4b03a 	or	r2,r18,r19
8111abe4:	d8c02215 	stw	r3,136(sp)
8111abe8:	a128703a 	and	r20,r20,r4
8111abec:	0039883a 	mov	fp,zero
8111abf0:	103f341e 	bne	r2,zero,8111a8c4 <__reset+0xfb0fa8c4>
8111abf4:	483e2e26 	beq	r9,zero,8111a4b0 <__reset+0xfb0fa4b0>
8111abf8:	0025883a 	mov	r18,zero
8111abfc:	94800c04 	addi	r18,r18,48
8111ac00:	dc8019c5 	stb	r18,103(sp)
8111ac04:	dcc02717 	ldw	r19,156(sp)
8111ac08:	dd4019c4 	addi	r21,sp,103
8111ac0c:	003e2b06 	br	8111a4bc <__reset+0xfb0fa4bc>
8111ac10:	21003fcc 	andi	r4,r4,255
8111ac14:	2002361e 	bne	r4,zero,8111b4f0 <___vfiprintf_internal_r+0x1434>
8111ac18:	1801c126 	beq	r3,zero,8111b320 <___vfiprintf_internal_r+0x1264>
8111ac1c:	04800044 	movi	r18,1
8111ac20:	d8c01005 	stb	r3,64(sp)
8111ac24:	d8001d85 	stb	zero,118(sp)
8111ac28:	9027883a 	mov	r19,r18
8111ac2c:	dd401004 	addi	r21,sp,64
8111ac30:	003f1106 	br	8111a878 <__reset+0xfb0fa878>
8111ac34:	d9402117 	ldw	r5,132(sp)
8111ac38:	d9002017 	ldw	r4,128(sp)
8111ac3c:	d9801a04 	addi	r6,sp,104
8111ac40:	d9c02b15 	stw	r7,172(sp)
8111ac44:	dbc02a15 	stw	r15,168(sp)
8111ac48:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111ac4c:	d9c02b17 	ldw	r7,172(sp)
8111ac50:	dbc02a17 	ldw	r15,168(sp)
8111ac54:	10006d1e 	bne	r2,zero,8111ae0c <___vfiprintf_internal_r+0xd50>
8111ac58:	d9801b17 	ldw	r6,108(sp)
8111ac5c:	d8801c17 	ldw	r2,112(sp)
8111ac60:	d811883a 	mov	r8,sp
8111ac64:	31400044 	addi	r5,r6,1
8111ac68:	003e3306 	br	8111a538 <__reset+0xfb0fa538>
8111ac6c:	d9401b17 	ldw	r5,108(sp)
8111ac70:	d8801c17 	ldw	r2,112(sp)
8111ac74:	29000044 	addi	r4,r5,1
8111ac78:	d8c01d87 	ldb	r3,118(sp)
8111ac7c:	183e4d26 	beq	r3,zero,8111a5b4 <__reset+0xfb0fa5b4>
8111ac80:	00c00044 	movi	r3,1
8111ac84:	d9401d84 	addi	r5,sp,118
8111ac88:	10c5883a 	add	r2,r2,r3
8111ac8c:	41400015 	stw	r5,0(r8)
8111ac90:	40c00115 	stw	r3,4(r8)
8111ac94:	d8801c15 	stw	r2,112(sp)
8111ac98:	d9001b15 	stw	r4,108(sp)
8111ac9c:	014001c4 	movi	r5,7
8111aca0:	2900a90e 	bge	r5,r4,8111af48 <___vfiprintf_internal_r+0xe8c>
8111aca4:	1000da1e 	bne	r2,zero,8111b010 <___vfiprintf_internal_r+0xf54>
8111aca8:	7000ab1e 	bne	r14,zero,8111af58 <___vfiprintf_internal_r+0xe9c>
8111acac:	000b883a 	mov	r5,zero
8111acb0:	1809883a 	mov	r4,r3
8111acb4:	d811883a 	mov	r8,sp
8111acb8:	00c02004 	movi	r3,128
8111acbc:	e0fe4d26 	beq	fp,r3,8111a5f4 <__reset+0xfb0fa5f4>
8111acc0:	4cf9c83a 	sub	fp,r9,r19
8111acc4:	073e7b0e 	bge	zero,fp,8111a6b4 <__reset+0xfb0fa6b4>
8111acc8:	01c00404 	movi	r7,16
8111accc:	3f01900e 	bge	r7,fp,8111b310 <___vfiprintf_internal_r+0x1254>
8111acd0:	00e044f4 	movhi	r3,33043
8111acd4:	18cefe04 	addi	r3,r3,15352
8111acd8:	d8c02415 	stw	r3,144(sp)
8111acdc:	034001c4 	movi	r13,7
8111ace0:	00000506 	br	8111acf8 <___vfiprintf_internal_r+0xc3c>
8111ace4:	29000084 	addi	r4,r5,2
8111ace8:	42000204 	addi	r8,r8,8
8111acec:	180b883a 	mov	r5,r3
8111acf0:	e73ffc04 	addi	fp,fp,-16
8111acf4:	3f000d0e 	bge	r7,fp,8111ad2c <___vfiprintf_internal_r+0xc70>
8111acf8:	10800404 	addi	r2,r2,16
8111acfc:	28c00044 	addi	r3,r5,1
8111ad00:	45c00015 	stw	r23,0(r8)
8111ad04:	41c00115 	stw	r7,4(r8)
8111ad08:	d8801c15 	stw	r2,112(sp)
8111ad0c:	d8c01b15 	stw	r3,108(sp)
8111ad10:	68fff40e 	bge	r13,r3,8111ace4 <__reset+0xfb0face4>
8111ad14:	1000101e 	bne	r2,zero,8111ad58 <___vfiprintf_internal_r+0xc9c>
8111ad18:	e73ffc04 	addi	fp,fp,-16
8111ad1c:	01000044 	movi	r4,1
8111ad20:	000b883a 	mov	r5,zero
8111ad24:	d811883a 	mov	r8,sp
8111ad28:	3f3ff316 	blt	r7,fp,8111acf8 <__reset+0xfb0facf8>
8111ad2c:	da802417 	ldw	r10,144(sp)
8111ad30:	1705883a 	add	r2,r2,fp
8111ad34:	47000115 	stw	fp,4(r8)
8111ad38:	42800015 	stw	r10,0(r8)
8111ad3c:	d8801c15 	stw	r2,112(sp)
8111ad40:	d9001b15 	stw	r4,108(sp)
8111ad44:	00c001c4 	movi	r3,7
8111ad48:	19003616 	blt	r3,r4,8111ae24 <___vfiprintf_internal_r+0xd68>
8111ad4c:	42000204 	addi	r8,r8,8
8111ad50:	21000044 	addi	r4,r4,1
8111ad54:	003e5706 	br	8111a6b4 <__reset+0xfb0fa6b4>
8111ad58:	d9402117 	ldw	r5,132(sp)
8111ad5c:	d9002017 	ldw	r4,128(sp)
8111ad60:	d9801a04 	addi	r6,sp,104
8111ad64:	d9c02b15 	stw	r7,172(sp)
8111ad68:	db402a15 	stw	r13,168(sp)
8111ad6c:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111ad70:	d9c02b17 	ldw	r7,172(sp)
8111ad74:	db402a17 	ldw	r13,168(sp)
8111ad78:	1000241e 	bne	r2,zero,8111ae0c <___vfiprintf_internal_r+0xd50>
8111ad7c:	d9401b17 	ldw	r5,108(sp)
8111ad80:	d8801c17 	ldw	r2,112(sp)
8111ad84:	d811883a 	mov	r8,sp
8111ad88:	29000044 	addi	r4,r5,1
8111ad8c:	003fd806 	br	8111acf0 <__reset+0xfb0facf0>
8111ad90:	d9401b17 	ldw	r5,108(sp)
8111ad94:	00e044f4 	movhi	r3,33043
8111ad98:	18cf0204 	addi	r3,r3,15368
8111ad9c:	d8c02415 	stw	r3,144(sp)
8111ada0:	29400044 	addi	r5,r5,1
8111ada4:	d8c02417 	ldw	r3,144(sp)
8111ada8:	14c5883a 	add	r2,r2,r19
8111adac:	44c00115 	stw	r19,4(r8)
8111adb0:	40c00015 	stw	r3,0(r8)
8111adb4:	d8801c15 	stw	r2,112(sp)
8111adb8:	d9401b15 	stw	r5,108(sp)
8111adbc:	00c001c4 	movi	r3,7
8111adc0:	1940070e 	bge	r3,r5,8111ade0 <___vfiprintf_internal_r+0xd24>
8111adc4:	103e4826 	beq	r2,zero,8111a6e8 <__reset+0xfb0fa6e8>
8111adc8:	d9402117 	ldw	r5,132(sp)
8111adcc:	d9002017 	ldw	r4,128(sp)
8111add0:	d9801a04 	addi	r6,sp,104
8111add4:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111add8:	10000c1e 	bne	r2,zero,8111ae0c <___vfiprintf_internal_r+0xd50>
8111addc:	d8801c17 	ldw	r2,112(sp)
8111ade0:	8c80010e 	bge	r17,r18,8111ade8 <___vfiprintf_internal_r+0xd2c>
8111ade4:	9023883a 	mov	r17,r18
8111ade8:	da802317 	ldw	r10,140(sp)
8111adec:	5455883a 	add	r10,r10,r17
8111adf0:	da802315 	stw	r10,140(sp)
8111adf4:	103e4126 	beq	r2,zero,8111a6fc <__reset+0xfb0fa6fc>
8111adf8:	d9402117 	ldw	r5,132(sp)
8111adfc:	d9002017 	ldw	r4,128(sp)
8111ae00:	d9801a04 	addi	r6,sp,104
8111ae04:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111ae08:	103e3c26 	beq	r2,zero,8111a6fc <__reset+0xfb0fa6fc>
8111ae0c:	dd002117 	ldw	r20,132(sp)
8111ae10:	a080030b 	ldhu	r2,12(r20)
8111ae14:	1080100c 	andi	r2,r2,64
8111ae18:	1001231e 	bne	r2,zero,8111b2a8 <___vfiprintf_internal_r+0x11ec>
8111ae1c:	d8802317 	ldw	r2,140(sp)
8111ae20:	003d7b06 	br	8111a410 <__reset+0xfb0fa410>
8111ae24:	1000991e 	bne	r2,zero,8111b08c <___vfiprintf_internal_r+0xfd0>
8111ae28:	00c00044 	movi	r3,1
8111ae2c:	9805883a 	mov	r2,r19
8111ae30:	dd400015 	stw	r21,0(sp)
8111ae34:	dcc00115 	stw	r19,4(sp)
8111ae38:	dcc01c15 	stw	r19,112(sp)
8111ae3c:	d8c01b15 	stw	r3,108(sp)
8111ae40:	d811883a 	mov	r8,sp
8111ae44:	42000204 	addi	r8,r8,8
8111ae48:	a2c0010c 	andi	r11,r20,4
8111ae4c:	583fe426 	beq	r11,zero,8111ade0 <__reset+0xfb0fade0>
8111ae50:	8ca7c83a 	sub	r19,r17,r18
8111ae54:	04ffe20e 	bge	zero,r19,8111ade0 <__reset+0xfb0fade0>
8111ae58:	01c00404 	movi	r7,16
8111ae5c:	3cffcc0e 	bge	r7,r19,8111ad90 <__reset+0xfb0fad90>
8111ae60:	02a044f4 	movhi	r10,33043
8111ae64:	528f0204 	addi	r10,r10,15368
8111ae68:	d9001b17 	ldw	r4,108(sp)
8111ae6c:	da802415 	stw	r10,144(sp)
8111ae70:	382b883a 	mov	r21,r7
8111ae74:	050001c4 	movi	r20,7
8111ae78:	df002017 	ldw	fp,128(sp)
8111ae7c:	00000506 	br	8111ae94 <___vfiprintf_internal_r+0xdd8>
8111ae80:	21400084 	addi	r5,r4,2
8111ae84:	42000204 	addi	r8,r8,8
8111ae88:	1809883a 	mov	r4,r3
8111ae8c:	9cfffc04 	addi	r19,r19,-16
8111ae90:	acffc40e 	bge	r21,r19,8111ada4 <__reset+0xfb0fada4>
8111ae94:	10800404 	addi	r2,r2,16
8111ae98:	20c00044 	addi	r3,r4,1
8111ae9c:	45800015 	stw	r22,0(r8)
8111aea0:	45400115 	stw	r21,4(r8)
8111aea4:	d8801c15 	stw	r2,112(sp)
8111aea8:	d8c01b15 	stw	r3,108(sp)
8111aeac:	a0fff40e 	bge	r20,r3,8111ae80 <__reset+0xfb0fae80>
8111aeb0:	1000041e 	bne	r2,zero,8111aec4 <___vfiprintf_internal_r+0xe08>
8111aeb4:	01400044 	movi	r5,1
8111aeb8:	0009883a 	mov	r4,zero
8111aebc:	d811883a 	mov	r8,sp
8111aec0:	003ff206 	br	8111ae8c <__reset+0xfb0fae8c>
8111aec4:	d9402117 	ldw	r5,132(sp)
8111aec8:	d9801a04 	addi	r6,sp,104
8111aecc:	e009883a 	mov	r4,fp
8111aed0:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111aed4:	103fcd1e 	bne	r2,zero,8111ae0c <__reset+0xfb0fae0c>
8111aed8:	d9001b17 	ldw	r4,108(sp)
8111aedc:	d8801c17 	ldw	r2,112(sp)
8111aee0:	d811883a 	mov	r8,sp
8111aee4:	21400044 	addi	r5,r4,1
8111aee8:	003fe806 	br	8111ae8c <__reset+0xfb0fae8c>
8111aeec:	d9402117 	ldw	r5,132(sp)
8111aef0:	d9002017 	ldw	r4,128(sp)
8111aef4:	d9801a04 	addi	r6,sp,104
8111aef8:	d9c02b15 	stw	r7,172(sp)
8111aefc:	db402a15 	stw	r13,168(sp)
8111af00:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111af04:	d9c02b17 	ldw	r7,172(sp)
8111af08:	db402a17 	ldw	r13,168(sp)
8111af0c:	103fbf1e 	bne	r2,zero,8111ae0c <__reset+0xfb0fae0c>
8111af10:	d9401b17 	ldw	r5,108(sp)
8111af14:	d8801c17 	ldw	r2,112(sp)
8111af18:	d811883a 	mov	r8,sp
8111af1c:	29800044 	addi	r6,r5,1
8111af20:	003dc406 	br	8111a634 <__reset+0xfb0fa634>
8111af24:	1000d21e 	bne	r2,zero,8111b270 <___vfiprintf_internal_r+0x11b4>
8111af28:	d8c01d87 	ldb	r3,118(sp)
8111af2c:	18009526 	beq	r3,zero,8111b184 <___vfiprintf_internal_r+0x10c8>
8111af30:	00800044 	movi	r2,1
8111af34:	d8c01d84 	addi	r3,sp,118
8111af38:	1009883a 	mov	r4,r2
8111af3c:	d8c00015 	stw	r3,0(sp)
8111af40:	d8800115 	stw	r2,4(sp)
8111af44:	d811883a 	mov	r8,sp
8111af48:	200b883a 	mov	r5,r4
8111af4c:	42000204 	addi	r8,r8,8
8111af50:	21000044 	addi	r4,r4,1
8111af54:	003d9706 	br	8111a5b4 <__reset+0xfb0fa5b4>
8111af58:	d9001d04 	addi	r4,sp,116
8111af5c:	00800084 	movi	r2,2
8111af60:	d9000015 	stw	r4,0(sp)
8111af64:	d8800115 	stw	r2,4(sp)
8111af68:	1809883a 	mov	r4,r3
8111af6c:	d811883a 	mov	r8,sp
8111af70:	200b883a 	mov	r5,r4
8111af74:	42000204 	addi	r8,r8,8
8111af78:	21000044 	addi	r4,r4,1
8111af7c:	003f4e06 	br	8111acb8 <__reset+0xfb0facb8>
8111af80:	d8001d85 	stb	zero,118(sp)
8111af84:	48005016 	blt	r9,zero,8111b0c8 <___vfiprintf_internal_r+0x100c>
8111af88:	00ffdfc4 	movi	r3,-129
8111af8c:	94c4b03a 	or	r2,r18,r19
8111af90:	a0e8703a 	and	r20,r20,r3
8111af94:	103d4426 	beq	r2,zero,8111a4a8 <__reset+0xfb0fa4a8>
8111af98:	0039883a 	mov	fp,zero
8111af9c:	d9002617 	ldw	r4,152(sp)
8111afa0:	dd401a04 	addi	r21,sp,104
8111afa4:	908003cc 	andi	r2,r18,15
8111afa8:	9806973a 	slli	r3,r19,28
8111afac:	2085883a 	add	r2,r4,r2
8111afb0:	9024d13a 	srli	r18,r18,4
8111afb4:	10800003 	ldbu	r2,0(r2)
8111afb8:	9826d13a 	srli	r19,r19,4
8111afbc:	ad7fffc4 	addi	r21,r21,-1
8111afc0:	1ca4b03a 	or	r18,r3,r18
8111afc4:	a8800005 	stb	r2,0(r21)
8111afc8:	94c4b03a 	or	r2,r18,r19
8111afcc:	103ff51e 	bne	r2,zero,8111afa4 <__reset+0xfb0fafa4>
8111afd0:	003e5906 	br	8111a938 <__reset+0xfb0fa938>
8111afd4:	d9402117 	ldw	r5,132(sp)
8111afd8:	d9002017 	ldw	r4,128(sp)
8111afdc:	d9801a04 	addi	r6,sp,104
8111afe0:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111afe4:	103f891e 	bne	r2,zero,8111ae0c <__reset+0xfb0fae0c>
8111afe8:	d8801c17 	ldw	r2,112(sp)
8111afec:	d811883a 	mov	r8,sp
8111aff0:	003f9506 	br	8111ae48 <__reset+0xfb0fae48>
8111aff4:	d9402117 	ldw	r5,132(sp)
8111aff8:	d9002017 	ldw	r4,128(sp)
8111affc:	d9801a04 	addi	r6,sp,104
8111b000:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111b004:	103f811e 	bne	r2,zero,8111ae0c <__reset+0xfb0fae0c>
8111b008:	d811883a 	mov	r8,sp
8111b00c:	003ced06 	br	8111a3c4 <__reset+0xfb0fa3c4>
8111b010:	d9402117 	ldw	r5,132(sp)
8111b014:	d9002017 	ldw	r4,128(sp)
8111b018:	d9801a04 	addi	r6,sp,104
8111b01c:	da402c15 	stw	r9,176(sp)
8111b020:	db802a15 	stw	r14,168(sp)
8111b024:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111b028:	da402c17 	ldw	r9,176(sp)
8111b02c:	db802a17 	ldw	r14,168(sp)
8111b030:	103f761e 	bne	r2,zero,8111ae0c <__reset+0xfb0fae0c>
8111b034:	d9401b17 	ldw	r5,108(sp)
8111b038:	d8801c17 	ldw	r2,112(sp)
8111b03c:	d811883a 	mov	r8,sp
8111b040:	29000044 	addi	r4,r5,1
8111b044:	003d5b06 	br	8111a5b4 <__reset+0xfb0fa5b4>
8111b048:	d9402117 	ldw	r5,132(sp)
8111b04c:	d9002017 	ldw	r4,128(sp)
8111b050:	d9801a04 	addi	r6,sp,104
8111b054:	da402c15 	stw	r9,176(sp)
8111b058:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111b05c:	da402c17 	ldw	r9,176(sp)
8111b060:	103f6a1e 	bne	r2,zero,8111ae0c <__reset+0xfb0fae0c>
8111b064:	d9401b17 	ldw	r5,108(sp)
8111b068:	d8801c17 	ldw	r2,112(sp)
8111b06c:	d811883a 	mov	r8,sp
8111b070:	29000044 	addi	r4,r5,1
8111b074:	003f1006 	br	8111acb8 <__reset+0xfb0facb8>
8111b078:	1000c31e 	bne	r2,zero,8111b388 <___vfiprintf_internal_r+0x12cc>
8111b07c:	01000044 	movi	r4,1
8111b080:	000b883a 	mov	r5,zero
8111b084:	d811883a 	mov	r8,sp
8111b088:	003f0d06 	br	8111acc0 <__reset+0xfb0facc0>
8111b08c:	d9402117 	ldw	r5,132(sp)
8111b090:	d9002017 	ldw	r4,128(sp)
8111b094:	d9801a04 	addi	r6,sp,104
8111b098:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111b09c:	103f5b1e 	bne	r2,zero,8111ae0c <__reset+0xfb0fae0c>
8111b0a0:	d9001b17 	ldw	r4,108(sp)
8111b0a4:	d8801c17 	ldw	r2,112(sp)
8111b0a8:	d811883a 	mov	r8,sp
8111b0ac:	21000044 	addi	r4,r4,1
8111b0b0:	003d8006 	br	8111a6b4 <__reset+0xfb0fa6b4>
8111b0b4:	012044f4 	movhi	r4,33043
8111b0b8:	210dcb04 	addi	r4,r4,14124
8111b0bc:	d9002615 	stw	r4,152(sp)
8111b0c0:	d8c02215 	stw	r3,136(sp)
8111b0c4:	1029883a 	mov	r20,r2
8111b0c8:	94c4b03a 	or	r2,r18,r19
8111b0cc:	103fb21e 	bne	r2,zero,8111af98 <__reset+0xfb0faf98>
8111b0d0:	0039883a 	mov	fp,zero
8111b0d4:	00800084 	movi	r2,2
8111b0d8:	003e6b06 	br	8111aa88 <__reset+0xfb0faa88>
8111b0dc:	da802217 	ldw	r10,136(sp)
8111b0e0:	d8001d85 	stb	zero,118(sp)
8111b0e4:	0027883a 	mov	r19,zero
8111b0e8:	50800104 	addi	r2,r10,4
8111b0ec:	54800017 	ldw	r18,0(r10)
8111b0f0:	483e6016 	blt	r9,zero,8111aa74 <__reset+0xfb0faa74>
8111b0f4:	00ffdfc4 	movi	r3,-129
8111b0f8:	d8802215 	stw	r2,136(sp)
8111b0fc:	a0e8703a 	and	r20,r20,r3
8111b100:	0039883a 	mov	fp,zero
8111b104:	903ebb26 	beq	r18,zero,8111abf4 <__reset+0xfb0fabf4>
8111b108:	00800244 	movi	r2,9
8111b10c:	14bdee36 	bltu	r2,r18,8111a8c8 <__reset+0xfb0fa8c8>
8111b110:	003eba06 	br	8111abfc <__reset+0xfb0fabfc>
8111b114:	00800c04 	movi	r2,48
8111b118:	d8c01d45 	stb	r3,117(sp)
8111b11c:	d8801d05 	stb	r2,116(sp)
8111b120:	d8001d85 	stb	zero,118(sp)
8111b124:	a0c00094 	ori	r3,r20,2
8111b128:	4800a916 	blt	r9,zero,8111b3d0 <___vfiprintf_internal_r+0x1314>
8111b12c:	00bfdfc4 	movi	r2,-129
8111b130:	a096703a 	and	r11,r20,r2
8111b134:	5d000094 	ori	r20,r11,2
8111b138:	0039883a 	mov	fp,zero
8111b13c:	003f9706 	br	8111af9c <__reset+0xfb0faf9c>
8111b140:	8025883a 	mov	r18,r16
8111b144:	003c2e06 	br	8111a200 <__reset+0xfb0fa200>
8111b148:	00a044f4 	movhi	r2,33043
8111b14c:	108dcb04 	addi	r2,r2,14124
8111b150:	0039883a 	mov	fp,zero
8111b154:	d8802615 	stw	r2,152(sp)
8111b158:	003f9006 	br	8111af9c <__reset+0xfb0faf9c>
8111b15c:	04a5c83a 	sub	r18,zero,r18
8111b160:	07000b44 	movi	fp,45
8111b164:	9004c03a 	cmpne	r2,r18,zero
8111b168:	04e7c83a 	sub	r19,zero,r19
8111b16c:	df001d85 	stb	fp,118(sp)
8111b170:	98a7c83a 	sub	r19,r19,r2
8111b174:	48009f16 	blt	r9,zero,8111b3f4 <___vfiprintf_internal_r+0x1338>
8111b178:	00bfdfc4 	movi	r2,-129
8111b17c:	a0a8703a 	and	r20,r20,r2
8111b180:	003dd006 	br	8111a8c4 <__reset+0xfb0fa8c4>
8111b184:	70004c26 	beq	r14,zero,8111b2b8 <___vfiprintf_internal_r+0x11fc>
8111b188:	00800084 	movi	r2,2
8111b18c:	d8c01d04 	addi	r3,sp,116
8111b190:	d8c00015 	stw	r3,0(sp)
8111b194:	d8800115 	stw	r2,4(sp)
8111b198:	01000044 	movi	r4,1
8111b19c:	d811883a 	mov	r8,sp
8111b1a0:	003f7306 	br	8111af70 <__reset+0xfb0faf70>
8111b1a4:	a080100c 	andi	r2,r20,64
8111b1a8:	da802217 	ldw	r10,136(sp)
8111b1ac:	103e0626 	beq	r2,zero,8111a9c8 <__reset+0xfb0fa9c8>
8111b1b0:	5480000f 	ldh	r18,0(r10)
8111b1b4:	52800104 	addi	r10,r10,4
8111b1b8:	da802215 	stw	r10,136(sp)
8111b1bc:	9027d7fa 	srai	r19,r18,31
8111b1c0:	9805883a 	mov	r2,r19
8111b1c4:	003db806 	br	8111a8a8 <__reset+0xfb0fa8a8>
8111b1c8:	a080040c 	andi	r2,r20,16
8111b1cc:	1000091e 	bne	r2,zero,8111b1f4 <___vfiprintf_internal_r+0x1138>
8111b1d0:	a2c0100c 	andi	r11,r20,64
8111b1d4:	58000726 	beq	r11,zero,8111b1f4 <___vfiprintf_internal_r+0x1138>
8111b1d8:	da802217 	ldw	r10,136(sp)
8111b1dc:	50800017 	ldw	r2,0(r10)
8111b1e0:	52800104 	addi	r10,r10,4
8111b1e4:	da802215 	stw	r10,136(sp)
8111b1e8:	da802317 	ldw	r10,140(sp)
8111b1ec:	1280000d 	sth	r10,0(r2)
8111b1f0:	003be706 	br	8111a190 <__reset+0xfb0fa190>
8111b1f4:	da802217 	ldw	r10,136(sp)
8111b1f8:	50800017 	ldw	r2,0(r10)
8111b1fc:	52800104 	addi	r10,r10,4
8111b200:	da802215 	stw	r10,136(sp)
8111b204:	da802317 	ldw	r10,140(sp)
8111b208:	12800015 	stw	r10,0(r2)
8111b20c:	003be006 	br	8111a190 <__reset+0xfb0fa190>
8111b210:	a080100c 	andi	r2,r20,64
8111b214:	da802217 	ldw	r10,136(sp)
8111b218:	10003026 	beq	r2,zero,8111b2dc <___vfiprintf_internal_r+0x1220>
8111b21c:	5480000b 	ldhu	r18,0(r10)
8111b220:	52800104 	addi	r10,r10,4
8111b224:	0027883a 	mov	r19,zero
8111b228:	da802215 	stw	r10,136(sp)
8111b22c:	003d8006 	br	8111a830 <__reset+0xfb0fa830>
8111b230:	80c00007 	ldb	r3,0(r16)
8111b234:	003c0006 	br	8111a238 <__reset+0xfb0fa238>
8111b238:	a080100c 	andi	r2,r20,64
8111b23c:	d8001d85 	stb	zero,118(sp)
8111b240:	da802217 	ldw	r10,136(sp)
8111b244:	1000201e 	bne	r2,zero,8111b2c8 <___vfiprintf_internal_r+0x120c>
8111b248:	50800104 	addi	r2,r10,4
8111b24c:	54800017 	ldw	r18,0(r10)
8111b250:	0027883a 	mov	r19,zero
8111b254:	483def0e 	bge	r9,zero,8111aa14 <__reset+0xfb0faa14>
8111b258:	94c6b03a 	or	r3,r18,r19
8111b25c:	d8802215 	stw	r2,136(sp)
8111b260:	183d4e1e 	bne	r3,zero,8111a79c <__reset+0xfb0fa79c>
8111b264:	0039883a 	mov	fp,zero
8111b268:	0005883a 	mov	r2,zero
8111b26c:	003e0606 	br	8111aa88 <__reset+0xfb0faa88>
8111b270:	d9402117 	ldw	r5,132(sp)
8111b274:	d9002017 	ldw	r4,128(sp)
8111b278:	d9801a04 	addi	r6,sp,104
8111b27c:	da402c15 	stw	r9,176(sp)
8111b280:	db802a15 	stw	r14,168(sp)
8111b284:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111b288:	da402c17 	ldw	r9,176(sp)
8111b28c:	db802a17 	ldw	r14,168(sp)
8111b290:	103ede1e 	bne	r2,zero,8111ae0c <__reset+0xfb0fae0c>
8111b294:	d9401b17 	ldw	r5,108(sp)
8111b298:	d8801c17 	ldw	r2,112(sp)
8111b29c:	d811883a 	mov	r8,sp
8111b2a0:	29000044 	addi	r4,r5,1
8111b2a4:	003e7406 	br	8111ac78 <__reset+0xfb0fac78>
8111b2a8:	00bfffc4 	movi	r2,-1
8111b2ac:	003c5806 	br	8111a410 <__reset+0xfb0fa410>
8111b2b0:	d811883a 	mov	r8,sp
8111b2b4:	003ee806 	br	8111ae58 <__reset+0xfb0fae58>
8111b2b8:	000b883a 	mov	r5,zero
8111b2bc:	01000044 	movi	r4,1
8111b2c0:	d811883a 	mov	r8,sp
8111b2c4:	003e7c06 	br	8111acb8 <__reset+0xfb0facb8>
8111b2c8:	50800104 	addi	r2,r10,4
8111b2cc:	5480000b 	ldhu	r18,0(r10)
8111b2d0:	0027883a 	mov	r19,zero
8111b2d4:	483dcf0e 	bge	r9,zero,8111aa14 <__reset+0xfb0faa14>
8111b2d8:	003fdf06 	br	8111b258 <__reset+0xfb0fb258>
8111b2dc:	54800017 	ldw	r18,0(r10)
8111b2e0:	52800104 	addi	r10,r10,4
8111b2e4:	0027883a 	mov	r19,zero
8111b2e8:	da802215 	stw	r10,136(sp)
8111b2ec:	003d5006 	br	8111a830 <__reset+0xfb0fa830>
8111b2f0:	50800104 	addi	r2,r10,4
8111b2f4:	5480000b 	ldhu	r18,0(r10)
8111b2f8:	0027883a 	mov	r19,zero
8111b2fc:	483f7d0e 	bge	r9,zero,8111b0f4 <__reset+0xfb0fb0f4>
8111b300:	003ddc06 	br	8111aa74 <__reset+0xfb0faa74>
8111b304:	d8c02215 	stw	r3,136(sp)
8111b308:	0039883a 	mov	fp,zero
8111b30c:	003ddb06 	br	8111aa7c <__reset+0xfb0faa7c>
8111b310:	02a044f4 	movhi	r10,33043
8111b314:	528efe04 	addi	r10,r10,15352
8111b318:	da802415 	stw	r10,144(sp)
8111b31c:	003e8306 	br	8111ad2c <__reset+0xfb0fad2c>
8111b320:	d8801c17 	ldw	r2,112(sp)
8111b324:	dd002117 	ldw	r20,132(sp)
8111b328:	103eb926 	beq	r2,zero,8111ae10 <__reset+0xfb0fae10>
8111b32c:	d9002017 	ldw	r4,128(sp)
8111b330:	d9801a04 	addi	r6,sp,104
8111b334:	a00b883a 	mov	r5,r20
8111b338:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111b33c:	003eb406 	br	8111ae10 <__reset+0xfb0fae10>
8111b340:	80c00043 	ldbu	r3,1(r16)
8111b344:	a5000814 	ori	r20,r20,32
8111b348:	84000044 	addi	r16,r16,1
8111b34c:	18c03fcc 	andi	r3,r3,255
8111b350:	18c0201c 	xori	r3,r3,128
8111b354:	18ffe004 	addi	r3,r3,-128
8111b358:	003bb706 	br	8111a238 <__reset+0xfb0fa238>
8111b35c:	a809883a 	mov	r4,r21
8111b360:	d8c02a15 	stw	r3,168(sp)
8111b364:	da002b15 	stw	r8,172(sp)
8111b368:	110bc740 	call	8110bc74 <strlen>
8111b36c:	d8c02a17 	ldw	r3,168(sp)
8111b370:	1027883a 	mov	r19,r2
8111b374:	df001d83 	ldbu	fp,118(sp)
8111b378:	d8c02215 	stw	r3,136(sp)
8111b37c:	0013883a 	mov	r9,zero
8111b380:	da002b17 	ldw	r8,172(sp)
8111b384:	003c4d06 	br	8111a4bc <__reset+0xfb0fa4bc>
8111b388:	d9402117 	ldw	r5,132(sp)
8111b38c:	d9002017 	ldw	r4,128(sp)
8111b390:	d9801a04 	addi	r6,sp,104
8111b394:	da402c15 	stw	r9,176(sp)
8111b398:	1119fa80 	call	81119fa8 <__sprint_r.part.0>
8111b39c:	da402c17 	ldw	r9,176(sp)
8111b3a0:	103e9a1e 	bne	r2,zero,8111ae0c <__reset+0xfb0fae0c>
8111b3a4:	d9401b17 	ldw	r5,108(sp)
8111b3a8:	d8801c17 	ldw	r2,112(sp)
8111b3ac:	d811883a 	mov	r8,sp
8111b3b0:	29000044 	addi	r4,r5,1
8111b3b4:	003e4206 	br	8111acc0 <__reset+0xfb0facc0>
8111b3b8:	d9401b17 	ldw	r5,108(sp)
8111b3bc:	012044f4 	movhi	r4,33043
8111b3c0:	210f0204 	addi	r4,r4,15368
8111b3c4:	d9002415 	stw	r4,144(sp)
8111b3c8:	29400044 	addi	r5,r5,1
8111b3cc:	003c6d06 	br	8111a584 <__reset+0xfb0fa584>
8111b3d0:	0039883a 	mov	fp,zero
8111b3d4:	00800084 	movi	r2,2
8111b3d8:	10803fcc 	andi	r2,r2,255
8111b3dc:	01000044 	movi	r4,1
8111b3e0:	11001e26 	beq	r2,r4,8111b45c <___vfiprintf_internal_r+0x13a0>
8111b3e4:	01000084 	movi	r4,2
8111b3e8:	11001e1e 	bne	r2,r4,8111b464 <___vfiprintf_internal_r+0x13a8>
8111b3ec:	1829883a 	mov	r20,r3
8111b3f0:	003eea06 	br	8111af9c <__reset+0xfb0faf9c>
8111b3f4:	a007883a 	mov	r3,r20
8111b3f8:	00800044 	movi	r2,1
8111b3fc:	003ff606 	br	8111b3d8 <__reset+0xfb0fb3d8>
8111b400:	00800184 	movi	r2,6
8111b404:	1240012e 	bgeu	r2,r9,8111b40c <___vfiprintf_internal_r+0x1350>
8111b408:	1013883a 	mov	r9,r2
8111b40c:	4827883a 	mov	r19,r9
8111b410:	4825883a 	mov	r18,r9
8111b414:	48001516 	blt	r9,zero,8111b46c <___vfiprintf_internal_r+0x13b0>
8111b418:	056044f4 	movhi	r21,33043
8111b41c:	d8c02215 	stw	r3,136(sp)
8111b420:	ad4dd004 	addi	r21,r21,14144
8111b424:	003d1406 	br	8111a878 <__reset+0xfb0fa878>
8111b428:	02a044f4 	movhi	r10,33043
8111b42c:	528efe04 	addi	r10,r10,15352
8111b430:	da802415 	stw	r10,144(sp)
8111b434:	200d883a 	mov	r6,r4
8111b438:	003c9106 	br	8111a680 <__reset+0xfb0fa680>
8111b43c:	5021883a 	mov	r16,r10
8111b440:	0013883a 	mov	r9,zero
8111b444:	003b7d06 	br	8111a23c <__reset+0xfb0fa23c>
8111b448:	4827883a 	mov	r19,r9
8111b44c:	df001d83 	ldbu	fp,118(sp)
8111b450:	d8c02215 	stw	r3,136(sp)
8111b454:	0013883a 	mov	r9,zero
8111b458:	003c1806 	br	8111a4bc <__reset+0xfb0fa4bc>
8111b45c:	1829883a 	mov	r20,r3
8111b460:	003d1806 	br	8111a8c4 <__reset+0xfb0fa8c4>
8111b464:	1829883a 	mov	r20,r3
8111b468:	003ccd06 	br	8111a7a0 <__reset+0xfb0fa7a0>
8111b46c:	0025883a 	mov	r18,zero
8111b470:	003fe906 	br	8111b418 <__reset+0xfb0fb418>
8111b474:	d8802217 	ldw	r2,136(sp)
8111b478:	80c00043 	ldbu	r3,1(r16)
8111b47c:	5021883a 	mov	r16,r10
8111b480:	12400017 	ldw	r9,0(r2)
8111b484:	10800104 	addi	r2,r2,4
8111b488:	d8802215 	stw	r2,136(sp)
8111b48c:	483faf0e 	bge	r9,zero,8111b34c <__reset+0xfb0fb34c>
8111b490:	18c03fcc 	andi	r3,r3,255
8111b494:	18c0201c 	xori	r3,r3,128
8111b498:	027fffc4 	movi	r9,-1
8111b49c:	18ffe004 	addi	r3,r3,-128
8111b4a0:	003b6506 	br	8111a238 <__reset+0xfb0fa238>
8111b4a4:	d9c01d85 	stb	r7,118(sp)
8111b4a8:	003ca006 	br	8111a72c <__reset+0xfb0fa72c>
8111b4ac:	d9c01d85 	stb	r7,118(sp)
8111b4b0:	003cad06 	br	8111a768 <__reset+0xfb0fa768>
8111b4b4:	d9c01d85 	stb	r7,118(sp)
8111b4b8:	003d7d06 	br	8111aab0 <__reset+0xfb0faab0>
8111b4bc:	d9c01d85 	stb	r7,118(sp)
8111b4c0:	003d5f06 	br	8111aa40 <__reset+0xfb0faa40>
8111b4c4:	a080004c 	andi	r2,r20,1
8111b4c8:	0039883a 	mov	fp,zero
8111b4cc:	10000526 	beq	r2,zero,8111b4e4 <___vfiprintf_internal_r+0x1428>
8111b4d0:	00800c04 	movi	r2,48
8111b4d4:	d88019c5 	stb	r2,103(sp)
8111b4d8:	dcc02717 	ldw	r19,156(sp)
8111b4dc:	dd4019c4 	addi	r21,sp,103
8111b4e0:	003bf606 	br	8111a4bc <__reset+0xfb0fa4bc>
8111b4e4:	0027883a 	mov	r19,zero
8111b4e8:	dd401a04 	addi	r21,sp,104
8111b4ec:	003bf306 	br	8111a4bc <__reset+0xfb0fa4bc>
8111b4f0:	d9c01d85 	stb	r7,118(sp)
8111b4f4:	003dc806 	br	8111ac18 <__reset+0xfb0fac18>
8111b4f8:	d9c01d85 	stb	r7,118(sp)
8111b4fc:	003d3a06 	br	8111a9e8 <__reset+0xfb0fa9e8>
8111b500:	d9c01d85 	stb	r7,118(sp)
8111b504:	003d2a06 	br	8111a9b0 <__reset+0xfb0fa9b0>
8111b508:	d9c01d85 	stb	r7,118(sp)
8111b50c:	003cde06 	br	8111a888 <__reset+0xfb0fa888>
8111b510:	d9c01d85 	stb	r7,118(sp)
8111b514:	003cbc06 	br	8111a808 <__reset+0xfb0fa808>

8111b518 <__vfiprintf_internal>:
8111b518:	00a044f4 	movhi	r2,33043
8111b51c:	10976404 	addi	r2,r2,23952
8111b520:	300f883a 	mov	r7,r6
8111b524:	280d883a 	mov	r6,r5
8111b528:	200b883a 	mov	r5,r4
8111b52c:	11000017 	ldw	r4,0(r2)
8111b530:	111a0bc1 	jmpi	8111a0bc <___vfiprintf_internal_r>

8111b534 <__sbprintf>:
8111b534:	2880030b 	ldhu	r2,12(r5)
8111b538:	2ac01917 	ldw	r11,100(r5)
8111b53c:	2a80038b 	ldhu	r10,14(r5)
8111b540:	2a400717 	ldw	r9,28(r5)
8111b544:	2a000917 	ldw	r8,36(r5)
8111b548:	defee204 	addi	sp,sp,-1144
8111b54c:	00c10004 	movi	r3,1024
8111b550:	dc011a15 	stw	r16,1128(sp)
8111b554:	10bfff4c 	andi	r2,r2,65533
8111b558:	2821883a 	mov	r16,r5
8111b55c:	d8cb883a 	add	r5,sp,r3
8111b560:	dc811c15 	stw	r18,1136(sp)
8111b564:	dc411b15 	stw	r17,1132(sp)
8111b568:	dfc11d15 	stw	ra,1140(sp)
8111b56c:	2025883a 	mov	r18,r4
8111b570:	d881030d 	sth	r2,1036(sp)
8111b574:	dac11915 	stw	r11,1124(sp)
8111b578:	da81038d 	sth	r10,1038(sp)
8111b57c:	da410715 	stw	r9,1052(sp)
8111b580:	da010915 	stw	r8,1060(sp)
8111b584:	dec10015 	stw	sp,1024(sp)
8111b588:	dec10415 	stw	sp,1040(sp)
8111b58c:	d8c10215 	stw	r3,1032(sp)
8111b590:	d8c10515 	stw	r3,1044(sp)
8111b594:	d8010615 	stw	zero,1048(sp)
8111b598:	111a0bc0 	call	8111a0bc <___vfiprintf_internal_r>
8111b59c:	1023883a 	mov	r17,r2
8111b5a0:	10000416 	blt	r2,zero,8111b5b4 <__sbprintf+0x80>
8111b5a4:	d9410004 	addi	r5,sp,1024
8111b5a8:	9009883a 	mov	r4,r18
8111b5ac:	11139400 	call	81113940 <_fflush_r>
8111b5b0:	10000d1e 	bne	r2,zero,8111b5e8 <__sbprintf+0xb4>
8111b5b4:	d881030b 	ldhu	r2,1036(sp)
8111b5b8:	1080100c 	andi	r2,r2,64
8111b5bc:	10000326 	beq	r2,zero,8111b5cc <__sbprintf+0x98>
8111b5c0:	8080030b 	ldhu	r2,12(r16)
8111b5c4:	10801014 	ori	r2,r2,64
8111b5c8:	8080030d 	sth	r2,12(r16)
8111b5cc:	8805883a 	mov	r2,r17
8111b5d0:	dfc11d17 	ldw	ra,1140(sp)
8111b5d4:	dc811c17 	ldw	r18,1136(sp)
8111b5d8:	dc411b17 	ldw	r17,1132(sp)
8111b5dc:	dc011a17 	ldw	r16,1128(sp)
8111b5e0:	dec11e04 	addi	sp,sp,1144
8111b5e4:	f800283a 	ret
8111b5e8:	047fffc4 	movi	r17,-1
8111b5ec:	003ff106 	br	8111b5b4 <__reset+0xfb0fb5b4>

8111b5f0 <__swbuf_r>:
8111b5f0:	defffb04 	addi	sp,sp,-20
8111b5f4:	dcc00315 	stw	r19,12(sp)
8111b5f8:	dc800215 	stw	r18,8(sp)
8111b5fc:	dc000015 	stw	r16,0(sp)
8111b600:	dfc00415 	stw	ra,16(sp)
8111b604:	dc400115 	stw	r17,4(sp)
8111b608:	2025883a 	mov	r18,r4
8111b60c:	2827883a 	mov	r19,r5
8111b610:	3021883a 	mov	r16,r6
8111b614:	20000226 	beq	r4,zero,8111b620 <__swbuf_r+0x30>
8111b618:	20800e17 	ldw	r2,56(r4)
8111b61c:	10004226 	beq	r2,zero,8111b728 <__swbuf_r+0x138>
8111b620:	80800617 	ldw	r2,24(r16)
8111b624:	8100030b 	ldhu	r4,12(r16)
8111b628:	80800215 	stw	r2,8(r16)
8111b62c:	2080020c 	andi	r2,r4,8
8111b630:	10003626 	beq	r2,zero,8111b70c <__swbuf_r+0x11c>
8111b634:	80c00417 	ldw	r3,16(r16)
8111b638:	18003426 	beq	r3,zero,8111b70c <__swbuf_r+0x11c>
8111b63c:	2088000c 	andi	r2,r4,8192
8111b640:	9c403fcc 	andi	r17,r19,255
8111b644:	10001a26 	beq	r2,zero,8111b6b0 <__swbuf_r+0xc0>
8111b648:	80800017 	ldw	r2,0(r16)
8111b64c:	81000517 	ldw	r4,20(r16)
8111b650:	10c7c83a 	sub	r3,r2,r3
8111b654:	1900200e 	bge	r3,r4,8111b6d8 <__swbuf_r+0xe8>
8111b658:	18c00044 	addi	r3,r3,1
8111b65c:	81000217 	ldw	r4,8(r16)
8111b660:	11400044 	addi	r5,r2,1
8111b664:	81400015 	stw	r5,0(r16)
8111b668:	213fffc4 	addi	r4,r4,-1
8111b66c:	81000215 	stw	r4,8(r16)
8111b670:	14c00005 	stb	r19,0(r2)
8111b674:	80800517 	ldw	r2,20(r16)
8111b678:	10c01e26 	beq	r2,r3,8111b6f4 <__swbuf_r+0x104>
8111b67c:	8080030b 	ldhu	r2,12(r16)
8111b680:	1080004c 	andi	r2,r2,1
8111b684:	10000226 	beq	r2,zero,8111b690 <__swbuf_r+0xa0>
8111b688:	00800284 	movi	r2,10
8111b68c:	88801926 	beq	r17,r2,8111b6f4 <__swbuf_r+0x104>
8111b690:	8805883a 	mov	r2,r17
8111b694:	dfc00417 	ldw	ra,16(sp)
8111b698:	dcc00317 	ldw	r19,12(sp)
8111b69c:	dc800217 	ldw	r18,8(sp)
8111b6a0:	dc400117 	ldw	r17,4(sp)
8111b6a4:	dc000017 	ldw	r16,0(sp)
8111b6a8:	dec00504 	addi	sp,sp,20
8111b6ac:	f800283a 	ret
8111b6b0:	81401917 	ldw	r5,100(r16)
8111b6b4:	00b7ffc4 	movi	r2,-8193
8111b6b8:	21080014 	ori	r4,r4,8192
8111b6bc:	2884703a 	and	r2,r5,r2
8111b6c0:	80801915 	stw	r2,100(r16)
8111b6c4:	80800017 	ldw	r2,0(r16)
8111b6c8:	8100030d 	sth	r4,12(r16)
8111b6cc:	81000517 	ldw	r4,20(r16)
8111b6d0:	10c7c83a 	sub	r3,r2,r3
8111b6d4:	193fe016 	blt	r3,r4,8111b658 <__reset+0xfb0fb658>
8111b6d8:	800b883a 	mov	r5,r16
8111b6dc:	9009883a 	mov	r4,r18
8111b6e0:	11139400 	call	81113940 <_fflush_r>
8111b6e4:	1000071e 	bne	r2,zero,8111b704 <__swbuf_r+0x114>
8111b6e8:	80800017 	ldw	r2,0(r16)
8111b6ec:	00c00044 	movi	r3,1
8111b6f0:	003fda06 	br	8111b65c <__reset+0xfb0fb65c>
8111b6f4:	800b883a 	mov	r5,r16
8111b6f8:	9009883a 	mov	r4,r18
8111b6fc:	11139400 	call	81113940 <_fflush_r>
8111b700:	103fe326 	beq	r2,zero,8111b690 <__reset+0xfb0fb690>
8111b704:	00bfffc4 	movi	r2,-1
8111b708:	003fe206 	br	8111b694 <__reset+0xfb0fb694>
8111b70c:	800b883a 	mov	r5,r16
8111b710:	9009883a 	mov	r4,r18
8111b714:	1111cf40 	call	81111cf4 <__swsetup_r>
8111b718:	103ffa1e 	bne	r2,zero,8111b704 <__reset+0xfb0fb704>
8111b71c:	8100030b 	ldhu	r4,12(r16)
8111b720:	80c00417 	ldw	r3,16(r16)
8111b724:	003fc506 	br	8111b63c <__reset+0xfb0fb63c>
8111b728:	1113d1c0 	call	81113d1c <__sinit>
8111b72c:	003fbc06 	br	8111b620 <__reset+0xfb0fb620>

8111b730 <__swbuf>:
8111b730:	00a044f4 	movhi	r2,33043
8111b734:	10976404 	addi	r2,r2,23952
8111b738:	280d883a 	mov	r6,r5
8111b73c:	200b883a 	mov	r5,r4
8111b740:	11000017 	ldw	r4,0(r2)
8111b744:	111b5f01 	jmpi	8111b5f0 <__swbuf_r>

8111b748 <_calloc_r>:
8111b748:	298b383a 	mul	r5,r5,r6
8111b74c:	defffe04 	addi	sp,sp,-8
8111b750:	dfc00115 	stw	ra,4(sp)
8111b754:	dc000015 	stw	r16,0(sp)
8111b758:	110aa600 	call	8110aa60 <_malloc_r>
8111b75c:	10002926 	beq	r2,zero,8111b804 <_calloc_r+0xbc>
8111b760:	11bfff17 	ldw	r6,-4(r2)
8111b764:	1021883a 	mov	r16,r2
8111b768:	00bfff04 	movi	r2,-4
8111b76c:	308c703a 	and	r6,r6,r2
8111b770:	00c00904 	movi	r3,36
8111b774:	308d883a 	add	r6,r6,r2
8111b778:	19801636 	bltu	r3,r6,8111b7d4 <_calloc_r+0x8c>
8111b77c:	008004c4 	movi	r2,19
8111b780:	11800b2e 	bgeu	r2,r6,8111b7b0 <_calloc_r+0x68>
8111b784:	80000015 	stw	zero,0(r16)
8111b788:	80000115 	stw	zero,4(r16)
8111b78c:	008006c4 	movi	r2,27
8111b790:	11801a2e 	bgeu	r2,r6,8111b7fc <_calloc_r+0xb4>
8111b794:	80000215 	stw	zero,8(r16)
8111b798:	80000315 	stw	zero,12(r16)
8111b79c:	30c0151e 	bne	r6,r3,8111b7f4 <_calloc_r+0xac>
8111b7a0:	80000415 	stw	zero,16(r16)
8111b7a4:	80800604 	addi	r2,r16,24
8111b7a8:	80000515 	stw	zero,20(r16)
8111b7ac:	00000106 	br	8111b7b4 <_calloc_r+0x6c>
8111b7b0:	8005883a 	mov	r2,r16
8111b7b4:	10000015 	stw	zero,0(r2)
8111b7b8:	10000115 	stw	zero,4(r2)
8111b7bc:	10000215 	stw	zero,8(r2)
8111b7c0:	8005883a 	mov	r2,r16
8111b7c4:	dfc00117 	ldw	ra,4(sp)
8111b7c8:	dc000017 	ldw	r16,0(sp)
8111b7cc:	dec00204 	addi	sp,sp,8
8111b7d0:	f800283a 	ret
8111b7d4:	000b883a 	mov	r5,zero
8111b7d8:	8009883a 	mov	r4,r16
8111b7dc:	110b3b40 	call	8110b3b4 <memset>
8111b7e0:	8005883a 	mov	r2,r16
8111b7e4:	dfc00117 	ldw	ra,4(sp)
8111b7e8:	dc000017 	ldw	r16,0(sp)
8111b7ec:	dec00204 	addi	sp,sp,8
8111b7f0:	f800283a 	ret
8111b7f4:	80800404 	addi	r2,r16,16
8111b7f8:	003fee06 	br	8111b7b4 <__reset+0xfb0fb7b4>
8111b7fc:	80800204 	addi	r2,r16,8
8111b800:	003fec06 	br	8111b7b4 <__reset+0xfb0fb7b4>
8111b804:	0005883a 	mov	r2,zero
8111b808:	003fee06 	br	8111b7c4 <__reset+0xfb0fb7c4>

8111b80c <_fclose_r>:
8111b80c:	28003926 	beq	r5,zero,8111b8f4 <_fclose_r+0xe8>
8111b810:	defffc04 	addi	sp,sp,-16
8111b814:	dc400115 	stw	r17,4(sp)
8111b818:	dc000015 	stw	r16,0(sp)
8111b81c:	dfc00315 	stw	ra,12(sp)
8111b820:	dc800215 	stw	r18,8(sp)
8111b824:	2023883a 	mov	r17,r4
8111b828:	2821883a 	mov	r16,r5
8111b82c:	20000226 	beq	r4,zero,8111b838 <_fclose_r+0x2c>
8111b830:	20800e17 	ldw	r2,56(r4)
8111b834:	10002726 	beq	r2,zero,8111b8d4 <_fclose_r+0xc8>
8111b838:	8080030f 	ldh	r2,12(r16)
8111b83c:	1000071e 	bne	r2,zero,8111b85c <_fclose_r+0x50>
8111b840:	0005883a 	mov	r2,zero
8111b844:	dfc00317 	ldw	ra,12(sp)
8111b848:	dc800217 	ldw	r18,8(sp)
8111b84c:	dc400117 	ldw	r17,4(sp)
8111b850:	dc000017 	ldw	r16,0(sp)
8111b854:	dec00404 	addi	sp,sp,16
8111b858:	f800283a 	ret
8111b85c:	800b883a 	mov	r5,r16
8111b860:	8809883a 	mov	r4,r17
8111b864:	11137240 	call	81113724 <__sflush_r>
8111b868:	1025883a 	mov	r18,r2
8111b86c:	80800b17 	ldw	r2,44(r16)
8111b870:	10000426 	beq	r2,zero,8111b884 <_fclose_r+0x78>
8111b874:	81400717 	ldw	r5,28(r16)
8111b878:	8809883a 	mov	r4,r17
8111b87c:	103ee83a 	callr	r2
8111b880:	10001616 	blt	r2,zero,8111b8dc <_fclose_r+0xd0>
8111b884:	8080030b 	ldhu	r2,12(r16)
8111b888:	1080200c 	andi	r2,r2,128
8111b88c:	1000151e 	bne	r2,zero,8111b8e4 <_fclose_r+0xd8>
8111b890:	81400c17 	ldw	r5,48(r16)
8111b894:	28000526 	beq	r5,zero,8111b8ac <_fclose_r+0xa0>
8111b898:	80801004 	addi	r2,r16,64
8111b89c:	28800226 	beq	r5,r2,8111b8a8 <_fclose_r+0x9c>
8111b8a0:	8809883a 	mov	r4,r17
8111b8a4:	111419c0 	call	8111419c <_free_r>
8111b8a8:	80000c15 	stw	zero,48(r16)
8111b8ac:	81401117 	ldw	r5,68(r16)
8111b8b0:	28000326 	beq	r5,zero,8111b8c0 <_fclose_r+0xb4>
8111b8b4:	8809883a 	mov	r4,r17
8111b8b8:	111419c0 	call	8111419c <_free_r>
8111b8bc:	80001115 	stw	zero,68(r16)
8111b8c0:	1113d2c0 	call	81113d2c <__sfp_lock_acquire>
8111b8c4:	8000030d 	sth	zero,12(r16)
8111b8c8:	1113d300 	call	81113d30 <__sfp_lock_release>
8111b8cc:	9005883a 	mov	r2,r18
8111b8d0:	003fdc06 	br	8111b844 <__reset+0xfb0fb844>
8111b8d4:	1113d1c0 	call	81113d1c <__sinit>
8111b8d8:	003fd706 	br	8111b838 <__reset+0xfb0fb838>
8111b8dc:	04bfffc4 	movi	r18,-1
8111b8e0:	003fe806 	br	8111b884 <__reset+0xfb0fb884>
8111b8e4:	81400417 	ldw	r5,16(r16)
8111b8e8:	8809883a 	mov	r4,r17
8111b8ec:	111419c0 	call	8111419c <_free_r>
8111b8f0:	003fe706 	br	8111b890 <__reset+0xfb0fb890>
8111b8f4:	0005883a 	mov	r2,zero
8111b8f8:	f800283a 	ret

8111b8fc <fclose>:
8111b8fc:	00a044f4 	movhi	r2,33043
8111b900:	10976404 	addi	r2,r2,23952
8111b904:	200b883a 	mov	r5,r4
8111b908:	11000017 	ldw	r4,0(r2)
8111b90c:	111b80c1 	jmpi	8111b80c <_fclose_r>

8111b910 <__fputwc>:
8111b910:	defff804 	addi	sp,sp,-32
8111b914:	dcc00415 	stw	r19,16(sp)
8111b918:	dc800315 	stw	r18,12(sp)
8111b91c:	dc000115 	stw	r16,4(sp)
8111b920:	dfc00715 	stw	ra,28(sp)
8111b924:	dd400615 	stw	r21,24(sp)
8111b928:	dd000515 	stw	r20,20(sp)
8111b92c:	dc400215 	stw	r17,8(sp)
8111b930:	2027883a 	mov	r19,r4
8111b934:	2825883a 	mov	r18,r5
8111b938:	3021883a 	mov	r16,r6
8111b93c:	1114bfc0 	call	81114bfc <__locale_mb_cur_max>
8111b940:	00c00044 	movi	r3,1
8111b944:	10c03e26 	beq	r2,r3,8111ba40 <__fputwc+0x130>
8111b948:	81c01704 	addi	r7,r16,92
8111b94c:	900d883a 	mov	r6,r18
8111b950:	d80b883a 	mov	r5,sp
8111b954:	9809883a 	mov	r4,r19
8111b958:	111c7740 	call	8111c774 <_wcrtomb_r>
8111b95c:	1029883a 	mov	r20,r2
8111b960:	00bfffc4 	movi	r2,-1
8111b964:	a0802026 	beq	r20,r2,8111b9e8 <__fputwc+0xd8>
8111b968:	d9400003 	ldbu	r5,0(sp)
8111b96c:	a0001c26 	beq	r20,zero,8111b9e0 <__fputwc+0xd0>
8111b970:	0023883a 	mov	r17,zero
8111b974:	05400284 	movi	r21,10
8111b978:	00000906 	br	8111b9a0 <__fputwc+0x90>
8111b97c:	80800017 	ldw	r2,0(r16)
8111b980:	11400005 	stb	r5,0(r2)
8111b984:	80c00017 	ldw	r3,0(r16)
8111b988:	18c00044 	addi	r3,r3,1
8111b98c:	80c00015 	stw	r3,0(r16)
8111b990:	8c400044 	addi	r17,r17,1
8111b994:	dc45883a 	add	r2,sp,r17
8111b998:	8d00112e 	bgeu	r17,r20,8111b9e0 <__fputwc+0xd0>
8111b99c:	11400003 	ldbu	r5,0(r2)
8111b9a0:	80c00217 	ldw	r3,8(r16)
8111b9a4:	18ffffc4 	addi	r3,r3,-1
8111b9a8:	80c00215 	stw	r3,8(r16)
8111b9ac:	183ff30e 	bge	r3,zero,8111b97c <__reset+0xfb0fb97c>
8111b9b0:	80800617 	ldw	r2,24(r16)
8111b9b4:	18801916 	blt	r3,r2,8111ba1c <__fputwc+0x10c>
8111b9b8:	80800017 	ldw	r2,0(r16)
8111b9bc:	11400005 	stb	r5,0(r2)
8111b9c0:	80800017 	ldw	r2,0(r16)
8111b9c4:	10c00003 	ldbu	r3,0(r2)
8111b9c8:	10800044 	addi	r2,r2,1
8111b9cc:	1d402326 	beq	r3,r21,8111ba5c <__fputwc+0x14c>
8111b9d0:	80800015 	stw	r2,0(r16)
8111b9d4:	8c400044 	addi	r17,r17,1
8111b9d8:	dc45883a 	add	r2,sp,r17
8111b9dc:	8d3fef36 	bltu	r17,r20,8111b99c <__reset+0xfb0fb99c>
8111b9e0:	9005883a 	mov	r2,r18
8111b9e4:	00000406 	br	8111b9f8 <__fputwc+0xe8>
8111b9e8:	80c0030b 	ldhu	r3,12(r16)
8111b9ec:	a005883a 	mov	r2,r20
8111b9f0:	18c01014 	ori	r3,r3,64
8111b9f4:	80c0030d 	sth	r3,12(r16)
8111b9f8:	dfc00717 	ldw	ra,28(sp)
8111b9fc:	dd400617 	ldw	r21,24(sp)
8111ba00:	dd000517 	ldw	r20,20(sp)
8111ba04:	dcc00417 	ldw	r19,16(sp)
8111ba08:	dc800317 	ldw	r18,12(sp)
8111ba0c:	dc400217 	ldw	r17,8(sp)
8111ba10:	dc000117 	ldw	r16,4(sp)
8111ba14:	dec00804 	addi	sp,sp,32
8111ba18:	f800283a 	ret
8111ba1c:	800d883a 	mov	r6,r16
8111ba20:	29403fcc 	andi	r5,r5,255
8111ba24:	9809883a 	mov	r4,r19
8111ba28:	111b5f00 	call	8111b5f0 <__swbuf_r>
8111ba2c:	10bfffe0 	cmpeqi	r2,r2,-1
8111ba30:	10803fcc 	andi	r2,r2,255
8111ba34:	103fd626 	beq	r2,zero,8111b990 <__reset+0xfb0fb990>
8111ba38:	00bfffc4 	movi	r2,-1
8111ba3c:	003fee06 	br	8111b9f8 <__reset+0xfb0fb9f8>
8111ba40:	90ffffc4 	addi	r3,r18,-1
8111ba44:	01003f84 	movi	r4,254
8111ba48:	20ffbf36 	bltu	r4,r3,8111b948 <__reset+0xfb0fb948>
8111ba4c:	900b883a 	mov	r5,r18
8111ba50:	dc800005 	stb	r18,0(sp)
8111ba54:	1029883a 	mov	r20,r2
8111ba58:	003fc506 	br	8111b970 <__reset+0xfb0fb970>
8111ba5c:	800d883a 	mov	r6,r16
8111ba60:	a80b883a 	mov	r5,r21
8111ba64:	9809883a 	mov	r4,r19
8111ba68:	111b5f00 	call	8111b5f0 <__swbuf_r>
8111ba6c:	10bfffe0 	cmpeqi	r2,r2,-1
8111ba70:	003fef06 	br	8111ba30 <__reset+0xfb0fba30>

8111ba74 <_fputwc_r>:
8111ba74:	3080030b 	ldhu	r2,12(r6)
8111ba78:	10c8000c 	andi	r3,r2,8192
8111ba7c:	1800051e 	bne	r3,zero,8111ba94 <_fputwc_r+0x20>
8111ba80:	30c01917 	ldw	r3,100(r6)
8111ba84:	10880014 	ori	r2,r2,8192
8111ba88:	3080030d 	sth	r2,12(r6)
8111ba8c:	18880014 	ori	r2,r3,8192
8111ba90:	30801915 	stw	r2,100(r6)
8111ba94:	111b9101 	jmpi	8111b910 <__fputwc>

8111ba98 <fputwc>:
8111ba98:	00a044f4 	movhi	r2,33043
8111ba9c:	defffc04 	addi	sp,sp,-16
8111baa0:	10976404 	addi	r2,r2,23952
8111baa4:	dc000115 	stw	r16,4(sp)
8111baa8:	14000017 	ldw	r16,0(r2)
8111baac:	dc400215 	stw	r17,8(sp)
8111bab0:	dfc00315 	stw	ra,12(sp)
8111bab4:	2023883a 	mov	r17,r4
8111bab8:	80000226 	beq	r16,zero,8111bac4 <fputwc+0x2c>
8111babc:	80800e17 	ldw	r2,56(r16)
8111bac0:	10001026 	beq	r2,zero,8111bb04 <fputwc+0x6c>
8111bac4:	2880030b 	ldhu	r2,12(r5)
8111bac8:	10c8000c 	andi	r3,r2,8192
8111bacc:	1800051e 	bne	r3,zero,8111bae4 <fputwc+0x4c>
8111bad0:	28c01917 	ldw	r3,100(r5)
8111bad4:	10880014 	ori	r2,r2,8192
8111bad8:	2880030d 	sth	r2,12(r5)
8111badc:	18880014 	ori	r2,r3,8192
8111bae0:	28801915 	stw	r2,100(r5)
8111bae4:	280d883a 	mov	r6,r5
8111bae8:	8009883a 	mov	r4,r16
8111baec:	880b883a 	mov	r5,r17
8111baf0:	dfc00317 	ldw	ra,12(sp)
8111baf4:	dc400217 	ldw	r17,8(sp)
8111baf8:	dc000117 	ldw	r16,4(sp)
8111bafc:	dec00404 	addi	sp,sp,16
8111bb00:	111b9101 	jmpi	8111b910 <__fputwc>
8111bb04:	8009883a 	mov	r4,r16
8111bb08:	d9400015 	stw	r5,0(sp)
8111bb0c:	1113d1c0 	call	81113d1c <__sinit>
8111bb10:	d9400017 	ldw	r5,0(sp)
8111bb14:	003feb06 	br	8111bac4 <__reset+0xfb0fbac4>

8111bb18 <rshift>:
8111bb18:	2807d17a 	srai	r3,r5,5
8111bb1c:	20800417 	ldw	r2,16(r4)
8111bb20:	22000504 	addi	r8,r4,20
8111bb24:	1880250e 	bge	r3,r2,8111bbbc <rshift+0xa4>
8111bb28:	1085883a 	add	r2,r2,r2
8111bb2c:	18c7883a 	add	r3,r3,r3
8111bb30:	1085883a 	add	r2,r2,r2
8111bb34:	18c7883a 	add	r3,r3,r3
8111bb38:	294007cc 	andi	r5,r5,31
8111bb3c:	4085883a 	add	r2,r8,r2
8111bb40:	40c7883a 	add	r3,r8,r3
8111bb44:	28002026 	beq	r5,zero,8111bbc8 <rshift+0xb0>
8111bb48:	19800017 	ldw	r6,0(r3)
8111bb4c:	02c00804 	movi	r11,32
8111bb50:	19c00104 	addi	r7,r3,4
8111bb54:	5957c83a 	sub	r11,r11,r5
8111bb58:	314cd83a 	srl	r6,r6,r5
8111bb5c:	38802c2e 	bgeu	r7,r2,8111bc10 <rshift+0xf8>
8111bb60:	4015883a 	mov	r10,r8
8111bb64:	3a400017 	ldw	r9,0(r7)
8111bb68:	52800104 	addi	r10,r10,4
8111bb6c:	39c00104 	addi	r7,r7,4
8111bb70:	4ad2983a 	sll	r9,r9,r11
8111bb74:	498cb03a 	or	r6,r9,r6
8111bb78:	51bfff15 	stw	r6,-4(r10)
8111bb7c:	39bfff17 	ldw	r6,-4(r7)
8111bb80:	314cd83a 	srl	r6,r6,r5
8111bb84:	38bff736 	bltu	r7,r2,8111bb64 <__reset+0xfb0fbb64>
8111bb88:	10c7c83a 	sub	r3,r2,r3
8111bb8c:	18fffec4 	addi	r3,r3,-5
8111bb90:	1806d0ba 	srli	r3,r3,2
8111bb94:	18c00044 	addi	r3,r3,1
8111bb98:	18c7883a 	add	r3,r3,r3
8111bb9c:	18c7883a 	add	r3,r3,r3
8111bba0:	40c7883a 	add	r3,r8,r3
8111bba4:	19800015 	stw	r6,0(r3)
8111bba8:	30000126 	beq	r6,zero,8111bbb0 <rshift+0x98>
8111bbac:	18c00104 	addi	r3,r3,4
8111bbb0:	1a05c83a 	sub	r2,r3,r8
8111bbb4:	1005d0ba 	srai	r2,r2,2
8111bbb8:	00001206 	br	8111bc04 <rshift+0xec>
8111bbbc:	20000415 	stw	zero,16(r4)
8111bbc0:	20000515 	stw	zero,20(r4)
8111bbc4:	f800283a 	ret
8111bbc8:	18bffc2e 	bgeu	r3,r2,8111bbbc <__reset+0xfb0fbbbc>
8111bbcc:	180d883a 	mov	r6,r3
8111bbd0:	400b883a 	mov	r5,r8
8111bbd4:	31c00017 	ldw	r7,0(r6)
8111bbd8:	29400104 	addi	r5,r5,4
8111bbdc:	31800104 	addi	r6,r6,4
8111bbe0:	29ffff15 	stw	r7,-4(r5)
8111bbe4:	30bffb36 	bltu	r6,r2,8111bbd4 <__reset+0xfb0fbbd4>
8111bbe8:	00c6303a 	nor	r3,zero,r3
8111bbec:	1885883a 	add	r2,r3,r2
8111bbf0:	1004d0ba 	srli	r2,r2,2
8111bbf4:	10800044 	addi	r2,r2,1
8111bbf8:	1085883a 	add	r2,r2,r2
8111bbfc:	1085883a 	add	r2,r2,r2
8111bc00:	1005d0ba 	srai	r2,r2,2
8111bc04:	20800415 	stw	r2,16(r4)
8111bc08:	103fed26 	beq	r2,zero,8111bbc0 <__reset+0xfb0fbbc0>
8111bc0c:	f800283a 	ret
8111bc10:	4007883a 	mov	r3,r8
8111bc14:	003fe306 	br	8111bba4 <__reset+0xfb0fbba4>

8111bc18 <__gethex>:
8111bc18:	deffeb04 	addi	sp,sp,-84
8111bc1c:	dfc01415 	stw	ra,80(sp)
8111bc20:	dd801115 	stw	r22,68(sp)
8111bc24:	dcc00e15 	stw	r19,56(sp)
8111bc28:	dc800d15 	stw	r18,52(sp)
8111bc2c:	2827883a 	mov	r19,r5
8111bc30:	d9000115 	stw	r4,4(sp)
8111bc34:	d9800015 	stw	r6,0(sp)
8111bc38:	d9c00415 	stw	r7,16(sp)
8111bc3c:	df001315 	stw	fp,76(sp)
8111bc40:	ddc01215 	stw	r23,72(sp)
8111bc44:	dd401015 	stw	r21,64(sp)
8111bc48:	dd000f15 	stw	r20,60(sp)
8111bc4c:	dc400c15 	stw	r17,48(sp)
8111bc50:	dc000b15 	stw	r16,44(sp)
8111bc54:	1114c200 	call	81114c20 <_localeconv_r>
8111bc58:	14800017 	ldw	r18,0(r2)
8111bc5c:	9009883a 	mov	r4,r18
8111bc60:	110bc740 	call	8110bc74 <strlen>
8111bc64:	98c00017 	ldw	r3,0(r19)
8111bc68:	102d883a 	mov	r22,r2
8111bc6c:	9085883a 	add	r2,r18,r2
8111bc70:	10bfffc3 	ldbu	r2,-1(r2)
8111bc74:	19000083 	ldbu	r4,2(r3)
8111bc78:	d8800305 	stb	r2,12(sp)
8111bc7c:	00800c04 	movi	r2,48
8111bc80:	2081521e 	bne	r4,r2,8111c1cc <__gethex+0x5b4>
8111bc84:	017fff84 	movi	r5,-2
8111bc88:	188000c4 	addi	r2,r3,3
8111bc8c:	28cbc83a 	sub	r5,r5,r3
8111bc90:	200d883a 	mov	r6,r4
8111bc94:	28a3883a 	add	r17,r5,r2
8111bc98:	102b883a 	mov	r21,r2
8111bc9c:	10800044 	addi	r2,r2,1
8111bca0:	113fffc3 	ldbu	r4,-1(r2)
8111bca4:	21bffb26 	beq	r4,r6,8111bc94 <__reset+0xfb0fbc94>
8111bca8:	052044f4 	movhi	r20,33043
8111bcac:	a50f0604 	addi	r20,r20,15384
8111bcb0:	a109883a 	add	r4,r20,r4
8111bcb4:	20800003 	ldbu	r2,0(r4)
8111bcb8:	10008826 	beq	r2,zero,8111bedc <__gethex+0x2c4>
8111bcbc:	a8800003 	ldbu	r2,0(r21)
8111bcc0:	0015883a 	mov	r10,zero
8111bcc4:	002f883a 	mov	r23,zero
8111bcc8:	a085883a 	add	r2,r20,r2
8111bccc:	10800003 	ldbu	r2,0(r2)
8111bcd0:	a821883a 	mov	r16,r21
8111bcd4:	10000526 	beq	r2,zero,8111bcec <__gethex+0xd4>
8111bcd8:	84000044 	addi	r16,r16,1
8111bcdc:	80800003 	ldbu	r2,0(r16)
8111bce0:	a085883a 	add	r2,r20,r2
8111bce4:	10800003 	ldbu	r2,0(r2)
8111bce8:	103ffb1e 	bne	r2,zero,8111bcd8 <__reset+0xfb0fbcd8>
8111bcec:	b00d883a 	mov	r6,r22
8111bcf0:	900b883a 	mov	r5,r18
8111bcf4:	8009883a 	mov	r4,r16
8111bcf8:	da800a15 	stw	r10,40(sp)
8111bcfc:	111c6a40 	call	8111c6a4 <strncmp>
8111bd00:	da800a17 	ldw	r10,40(sp)
8111bd04:	1000031e 	bne	r2,zero,8111bd14 <__gethex+0xfc>
8111bd08:	b8015226 	beq	r23,zero,8111c254 <__gethex+0x63c>
8111bd0c:	80800003 	ldbu	r2,0(r16)
8111bd10:	00000206 	br	8111bd1c <__gethex+0x104>
8111bd14:	80800003 	ldbu	r2,0(r16)
8111bd18:	b8011f26 	beq	r23,zero,8111c198 <__gethex+0x580>
8111bd1c:	85efc83a 	sub	r23,r16,r23
8111bd20:	bdef883a 	add	r23,r23,r23
8111bd24:	bdef883a 	add	r23,r23,r23
8111bd28:	05efc83a 	sub	r23,zero,r23
8111bd2c:	10803fcc 	andi	r2,r2,255
8111bd30:	01001404 	movi	r4,80
8111bd34:	11008626 	beq	r2,r4,8111bf50 <__gethex+0x338>
8111bd38:	01001c04 	movi	r4,112
8111bd3c:	11008426 	beq	r2,r4,8111bf50 <__gethex+0x338>
8111bd40:	8039883a 	mov	fp,r16
8111bd44:	9c000015 	stw	r16,0(r19)
8111bd48:	5000711e 	bne	r10,zero,8111bf10 <__gethex+0x2f8>
8111bd4c:	e545c83a 	sub	r2,fp,r21
8111bd50:	10bfffc4 	addi	r2,r2,-1
8111bd54:	010001c4 	movi	r4,7
8111bd58:	000b883a 	mov	r5,zero
8111bd5c:	2080030e 	bge	r4,r2,8111bd6c <__gethex+0x154>
8111bd60:	1005d07a 	srai	r2,r2,1
8111bd64:	29400044 	addi	r5,r5,1
8111bd68:	20bffd16 	blt	r4,r2,8111bd60 <__reset+0xfb0fbd60>
8111bd6c:	d9000117 	ldw	r4,4(sp)
8111bd70:	11151140 	call	81115114 <_Balloc>
8111bd74:	10c00504 	addi	r3,r2,20
8111bd78:	d8c00215 	stw	r3,8(sp)
8111bd7c:	1021883a 	mov	r16,r2
8111bd80:	af01732e 	bgeu	r21,fp,8111c350 <__gethex+0x738>
8111bd84:	dc400303 	ldbu	r17,12(sp)
8111bd88:	03400044 	movi	r13,1
8111bd8c:	1815883a 	mov	r10,r3
8111bd90:	0013883a 	mov	r9,zero
8111bd94:	0027883a 	mov	r19,zero
8111bd98:	6d9bc83a 	sub	r13,r13,r22
8111bd9c:	02c00804 	movi	r11,32
8111bda0:	e0bfffc3 	ldbu	r2,-1(fp)
8111bda4:	e3bfffc4 	addi	r14,fp,-1
8111bda8:	88803026 	beq	r17,r2,8111be6c <__gethex+0x254>
8111bdac:	9ac04526 	beq	r19,r11,8111bec4 <__gethex+0x2ac>
8111bdb0:	980b883a 	mov	r5,r19
8111bdb4:	9cc00104 	addi	r19,r19,4
8111bdb8:	e13fffc3 	ldbu	r4,-1(fp)
8111bdbc:	7039883a 	mov	fp,r14
8111bdc0:	a109883a 	add	r4,r20,r4
8111bdc4:	20800003 	ldbu	r2,0(r4)
8111bdc8:	108003cc 	andi	r2,r2,15
8111bdcc:	1144983a 	sll	r2,r2,r5
8111bdd0:	4892b03a 	or	r9,r9,r2
8111bdd4:	af3ff236 	bltu	r21,fp,8111bda0 <__reset+0xfb0fbda0>
8111bdd8:	d8c00217 	ldw	r3,8(sp)
8111bddc:	50800104 	addi	r2,r10,4
8111bde0:	52400015 	stw	r9,0(r10)
8111bde4:	10c5c83a 	sub	r2,r2,r3
8111bde8:	1005d0ba 	srai	r2,r2,2
8111bdec:	4809883a 	mov	r4,r9
8111bdf0:	80800415 	stw	r2,16(r16)
8111bdf4:	1022917a 	slli	r17,r2,5
8111bdf8:	11154080 	call	81115408 <__hi0bits>
8111bdfc:	d8c00017 	ldw	r3,0(sp)
8111be00:	8885c83a 	sub	r2,r17,r2
8111be04:	1c800017 	ldw	r18,0(r3)
8111be08:	9080c716 	blt	r18,r2,8111c128 <__gethex+0x510>
8111be0c:	1480e416 	blt	r2,r18,8111c1a0 <__gethex+0x588>
8111be10:	0027883a 	mov	r19,zero
8111be14:	d8c00017 	ldw	r3,0(sp)
8111be18:	18800217 	ldw	r2,8(r3)
8111be1c:	15c08d16 	blt	r2,r23,8111c054 <__gethex+0x43c>
8111be20:	d8c00017 	ldw	r3,0(sp)
8111be24:	18800117 	ldw	r2,4(r3)
8111be28:	b880aa0e 	bge	r23,r2,8111c0d4 <__gethex+0x4bc>
8111be2c:	15efc83a 	sub	r23,r2,r23
8111be30:	bc80ed16 	blt	r23,r18,8111c1e8 <__gethex+0x5d0>
8111be34:	18c00317 	ldw	r3,12(r3)
8111be38:	01000084 	movi	r4,2
8111be3c:	19014926 	beq	r3,r4,8111c364 <__gethex+0x74c>
8111be40:	010000c4 	movi	r4,3
8111be44:	19012e26 	beq	r3,r4,8111c300 <__gethex+0x6e8>
8111be48:	01000044 	movi	r4,1
8111be4c:	19014826 	beq	r3,r4,8111c370 <__gethex+0x758>
8111be50:	d9000117 	ldw	r4,4(sp)
8111be54:	800b883a 	mov	r5,r16
8111be58:	11151bc0 	call	811151bc <_Bfree>
8111be5c:	d8801517 	ldw	r2,84(sp)
8111be60:	10000015 	stw	zero,0(r2)
8111be64:	00801404 	movi	r2,80
8111be68:	00002b06 	br	8111bf18 <__gethex+0x300>
8111be6c:	735f883a 	add	r15,r14,r13
8111be70:	7d7fce36 	bltu	r15,r21,8111bdac <__reset+0xfb0fbdac>
8111be74:	7809883a 	mov	r4,r15
8111be78:	b00d883a 	mov	r6,r22
8111be7c:	900b883a 	mov	r5,r18
8111be80:	da400515 	stw	r9,20(sp)
8111be84:	da800a15 	stw	r10,40(sp)
8111be88:	dac00915 	stw	r11,36(sp)
8111be8c:	db400815 	stw	r13,32(sp)
8111be90:	db800615 	stw	r14,24(sp)
8111be94:	dbc00715 	stw	r15,28(sp)
8111be98:	111c6a40 	call	8111c6a4 <strncmp>
8111be9c:	da400517 	ldw	r9,20(sp)
8111bea0:	da800a17 	ldw	r10,40(sp)
8111bea4:	dac00917 	ldw	r11,36(sp)
8111bea8:	db400817 	ldw	r13,32(sp)
8111beac:	db800617 	ldw	r14,24(sp)
8111beb0:	dbc00717 	ldw	r15,28(sp)
8111beb4:	103fbd1e 	bne	r2,zero,8111bdac <__reset+0xfb0fbdac>
8111beb8:	7839883a 	mov	fp,r15
8111bebc:	af3fb836 	bltu	r21,fp,8111bda0 <__reset+0xfb0fbda0>
8111bec0:	003fc506 	br	8111bdd8 <__reset+0xfb0fbdd8>
8111bec4:	04c00104 	movi	r19,4
8111bec8:	52400015 	stw	r9,0(r10)
8111becc:	000b883a 	mov	r5,zero
8111bed0:	54d5883a 	add	r10,r10,r19
8111bed4:	0013883a 	mov	r9,zero
8111bed8:	003fb706 	br	8111bdb8 <__reset+0xfb0fbdb8>
8111bedc:	b00d883a 	mov	r6,r22
8111bee0:	900b883a 	mov	r5,r18
8111bee4:	a809883a 	mov	r4,r21
8111bee8:	111c6a40 	call	8111c6a4 <strncmp>
8111beec:	10006426 	beq	r2,zero,8111c080 <__gethex+0x468>
8111bef0:	a8800003 	ldbu	r2,0(r21)
8111bef4:	a821883a 	mov	r16,r21
8111bef8:	10803fcc 	andi	r2,r2,255
8111befc:	01001404 	movi	r4,80
8111bf00:	11001126 	beq	r2,r4,8111bf48 <__gethex+0x330>
8111bf04:	01001c04 	movi	r4,112
8111bf08:	11000f26 	beq	r2,r4,8111bf48 <__gethex+0x330>
8111bf0c:	9c000015 	stw	r16,0(r19)
8111bf10:	8800831e 	bne	r17,zero,8111c120 <__gethex+0x508>
8111bf14:	00800184 	movi	r2,6
8111bf18:	dfc01417 	ldw	ra,80(sp)
8111bf1c:	df001317 	ldw	fp,76(sp)
8111bf20:	ddc01217 	ldw	r23,72(sp)
8111bf24:	dd801117 	ldw	r22,68(sp)
8111bf28:	dd401017 	ldw	r21,64(sp)
8111bf2c:	dd000f17 	ldw	r20,60(sp)
8111bf30:	dcc00e17 	ldw	r19,56(sp)
8111bf34:	dc800d17 	ldw	r18,52(sp)
8111bf38:	dc400c17 	ldw	r17,48(sp)
8111bf3c:	dc000b17 	ldw	r16,44(sp)
8111bf40:	dec01504 	addi	sp,sp,84
8111bf44:	f800283a 	ret
8111bf48:	002f883a 	mov	r23,zero
8111bf4c:	02800044 	movi	r10,1
8111bf50:	80800043 	ldbu	r2,1(r16)
8111bf54:	01400ac4 	movi	r5,43
8111bf58:	11003fcc 	andi	r4,r2,255
8111bf5c:	21406e26 	beq	r4,r5,8111c118 <__gethex+0x500>
8111bf60:	01400b44 	movi	r5,45
8111bf64:	21404226 	beq	r4,r5,8111c070 <__gethex+0x458>
8111bf68:	81400044 	addi	r5,r16,1
8111bf6c:	000d883a 	mov	r6,zero
8111bf70:	10803fcc 	andi	r2,r2,255
8111bf74:	a085883a 	add	r2,r20,r2
8111bf78:	11000003 	ldbu	r4,0(r2)
8111bf7c:	03000604 	movi	r12,24
8111bf80:	20bfffc4 	addi	r2,r4,-1
8111bf84:	10803fcc 	andi	r2,r2,255
8111bf88:	60bf6d36 	bltu	r12,r2,8111bd40 <__reset+0xfb0fbd40>
8111bf8c:	2ac00043 	ldbu	r11,1(r5)
8111bf90:	20803fcc 	andi	r2,r4,255
8111bf94:	012044f4 	movhi	r4,33043
8111bf98:	210f0604 	addi	r4,r4,15384
8111bf9c:	22c9883a 	add	r4,r4,r11
8111bfa0:	23400003 	ldbu	r13,0(r4)
8111bfa4:	10bffc04 	addi	r2,r2,-16
8111bfa8:	29400044 	addi	r5,r5,1
8111bfac:	693fffc4 	addi	r4,r13,-1
8111bfb0:	21003fcc 	andi	r4,r4,255
8111bfb4:	6b403fcc 	andi	r13,r13,255
8111bfb8:	61000b36 	bltu	r12,r4,8111bfe8 <__gethex+0x3d0>
8111bfbc:	29400044 	addi	r5,r5,1
8111bfc0:	29000003 	ldbu	r4,0(r5)
8111bfc4:	108002a4 	muli	r2,r2,10
8111bfc8:	a109883a 	add	r4,r20,r4
8111bfcc:	22c00003 	ldbu	r11,0(r4)
8111bfd0:	1345883a 	add	r2,r2,r13
8111bfd4:	10bffc04 	addi	r2,r2,-16
8111bfd8:	593fffc4 	addi	r4,r11,-1
8111bfdc:	21003fcc 	andi	r4,r4,255
8111bfe0:	5b403fcc 	andi	r13,r11,255
8111bfe4:	613ff52e 	bgeu	r12,r4,8111bfbc <__reset+0xfb0fbfbc>
8111bfe8:	30000126 	beq	r6,zero,8111bff0 <__gethex+0x3d8>
8111bfec:	0085c83a 	sub	r2,zero,r2
8111bff0:	8039883a 	mov	fp,r16
8111bff4:	b8af883a 	add	r23,r23,r2
8111bff8:	2821883a 	mov	r16,r5
8111bffc:	003f5106 	br	8111bd44 <__reset+0xfb0fbd44>
8111c000:	80800217 	ldw	r2,8(r16)
8111c004:	e080f00e 	bge	fp,r2,8111c3c8 <__gethex+0x7b0>
8111c008:	e007883a 	mov	r3,fp
8111c00c:	18800144 	addi	r2,r3,5
8111c010:	1085883a 	add	r2,r2,r2
8111c014:	18c00044 	addi	r3,r3,1
8111c018:	1085883a 	add	r2,r2,r2
8111c01c:	8085883a 	add	r2,r16,r2
8111c020:	80c00415 	stw	r3,16(r16)
8111c024:	01000044 	movi	r4,1
8111c028:	11000015 	stw	r4,0(r2)
8111c02c:	00800084 	movi	r2,2
8111c030:	8880d826 	beq	r17,r2,8111c394 <__gethex+0x77c>
8111c034:	e0c0ac0e 	bge	fp,r3,8111c2e8 <__gethex+0x6d0>
8111c038:	01400044 	movi	r5,1
8111c03c:	8009883a 	mov	r4,r16
8111c040:	111bb180 	call	8111bb18 <rshift>
8111c044:	d8c00017 	ldw	r3,0(sp)
8111c048:	bdc00044 	addi	r23,r23,1
8111c04c:	18800217 	ldw	r2,8(r3)
8111c050:	15c0a70e 	bge	r2,r23,8111c2f0 <__gethex+0x6d8>
8111c054:	d9000117 	ldw	r4,4(sp)
8111c058:	800b883a 	mov	r5,r16
8111c05c:	11151bc0 	call	811151bc <_Bfree>
8111c060:	d9001517 	ldw	r4,84(sp)
8111c064:	008028c4 	movi	r2,163
8111c068:	20000015 	stw	zero,0(r4)
8111c06c:	003faa06 	br	8111bf18 <__reset+0xfb0fbf18>
8111c070:	01800044 	movi	r6,1
8111c074:	80800083 	ldbu	r2,2(r16)
8111c078:	81400084 	addi	r5,r16,2
8111c07c:	003fbc06 	br	8111bf70 <__reset+0xfb0fbf70>
8111c080:	ada1883a 	add	r16,r21,r22
8111c084:	81000003 	ldbu	r4,0(r16)
8111c088:	21403fcc 	andi	r5,r4,255
8111c08c:	a145883a 	add	r2,r20,r5
8111c090:	10800003 	ldbu	r2,0(r2)
8111c094:	11803fcc 	andi	r6,r2,255
8111c098:	30004f26 	beq	r6,zero,8111c1d8 <__gethex+0x5c0>
8111c09c:	00c00c04 	movi	r3,48
8111c0a0:	802b883a 	mov	r21,r16
8111c0a4:	28c0061e 	bne	r5,r3,8111c0c0 <__gethex+0x4a8>
8111c0a8:	2809883a 	mov	r4,r5
8111c0ac:	ad400044 	addi	r21,r21,1
8111c0b0:	a8800003 	ldbu	r2,0(r21)
8111c0b4:	113ffd26 	beq	r2,r4,8111c0ac <__reset+0xfb0fc0ac>
8111c0b8:	a085883a 	add	r2,r20,r2
8111c0bc:	10800003 	ldbu	r2,0(r2)
8111c0c0:	10803fcc 	andi	r2,r2,255
8111c0c4:	1015003a 	cmpeq	r10,r2,zero
8111c0c8:	802f883a 	mov	r23,r16
8111c0cc:	04400044 	movi	r17,1
8111c0d0:	003eff06 	br	8111bcd0 <__reset+0xfb0fbcd0>
8111c0d4:	04400044 	movi	r17,1
8111c0d8:	98000926 	beq	r19,zero,8111c100 <__gethex+0x4e8>
8111c0dc:	d8c00017 	ldw	r3,0(sp)
8111c0e0:	18800317 	ldw	r2,12(r3)
8111c0e4:	00c00084 	movi	r3,2
8111c0e8:	10c06826 	beq	r2,r3,8111c28c <__gethex+0x674>
8111c0ec:	00c000c4 	movi	r3,3
8111c0f0:	10c06a26 	beq	r2,r3,8111c29c <__gethex+0x684>
8111c0f4:	00c00044 	movi	r3,1
8111c0f8:	10c08d26 	beq	r2,r3,8111c330 <__gethex+0x718>
8111c0fc:	8c400414 	ori	r17,r17,16
8111c100:	d9001517 	ldw	r4,84(sp)
8111c104:	d8c00417 	ldw	r3,16(sp)
8111c108:	8805883a 	mov	r2,r17
8111c10c:	24000015 	stw	r16,0(r4)
8111c110:	1dc00015 	stw	r23,0(r3)
8111c114:	003f8006 	br	8111bf18 <__reset+0xfb0fbf18>
8111c118:	000d883a 	mov	r6,zero
8111c11c:	003fd506 	br	8111c074 <__reset+0xfb0fc074>
8111c120:	0005883a 	mov	r2,zero
8111c124:	003f7c06 	br	8111bf18 <__reset+0xfb0fbf18>
8111c128:	14a3c83a 	sub	r17,r2,r18
8111c12c:	880b883a 	mov	r5,r17
8111c130:	8009883a 	mov	r4,r16
8111c134:	11160840 	call	81116084 <__any_on>
8111c138:	10002926 	beq	r2,zero,8111c1e0 <__gethex+0x5c8>
8111c13c:	897fffc4 	addi	r5,r17,-1
8111c140:	2807d17a 	srai	r3,r5,5
8111c144:	d8800217 	ldw	r2,8(sp)
8111c148:	290007cc 	andi	r4,r5,31
8111c14c:	18c7883a 	add	r3,r3,r3
8111c150:	18c7883a 	add	r3,r3,r3
8111c154:	04c00044 	movi	r19,1
8111c158:	10c7883a 	add	r3,r2,r3
8111c15c:	9908983a 	sll	r4,r19,r4
8111c160:	18c00017 	ldw	r3,0(r3)
8111c164:	20c6703a 	and	r3,r4,r3
8111c168:	18000626 	beq	r3,zero,8111c184 <__gethex+0x56c>
8111c16c:	99407b0e 	bge	r19,r5,8111c35c <__gethex+0x744>
8111c170:	897fff84 	addi	r5,r17,-2
8111c174:	8009883a 	mov	r4,r16
8111c178:	11160840 	call	81116084 <__any_on>
8111c17c:	10007726 	beq	r2,zero,8111c35c <__gethex+0x744>
8111c180:	04c000c4 	movi	r19,3
8111c184:	880b883a 	mov	r5,r17
8111c188:	8009883a 	mov	r4,r16
8111c18c:	111bb180 	call	8111bb18 <rshift>
8111c190:	bc6f883a 	add	r23,r23,r17
8111c194:	003f1f06 	br	8111be14 <__reset+0xfb0fbe14>
8111c198:	002f883a 	mov	r23,zero
8111c19c:	003ee306 	br	8111bd2c <__reset+0xfb0fbd2c>
8111c1a0:	d9000117 	ldw	r4,4(sp)
8111c1a4:	90a3c83a 	sub	r17,r18,r2
8111c1a8:	800b883a 	mov	r5,r16
8111c1ac:	880d883a 	mov	r6,r17
8111c1b0:	11158940 	call	81115894 <__lshift>
8111c1b4:	10c00504 	addi	r3,r2,20
8111c1b8:	1021883a 	mov	r16,r2
8111c1bc:	bc6fc83a 	sub	r23,r23,r17
8111c1c0:	d8c00215 	stw	r3,8(sp)
8111c1c4:	0027883a 	mov	r19,zero
8111c1c8:	003f1206 	br	8111be14 <__reset+0xfb0fbe14>
8111c1cc:	1d400084 	addi	r21,r3,2
8111c1d0:	0023883a 	mov	r17,zero
8111c1d4:	003eb406 	br	8111bca8 <__reset+0xfb0fbca8>
8111c1d8:	2005883a 	mov	r2,r4
8111c1dc:	003f4606 	br	8111bef8 <__reset+0xfb0fbef8>
8111c1e0:	0027883a 	mov	r19,zero
8111c1e4:	003fe706 	br	8111c184 <__reset+0xfb0fc184>
8111c1e8:	bc7fffc4 	addi	r17,r23,-1
8111c1ec:	9800421e 	bne	r19,zero,8111c2f8 <__gethex+0x6e0>
8111c1f0:	88000426 	beq	r17,zero,8111c204 <__gethex+0x5ec>
8111c1f4:	880b883a 	mov	r5,r17
8111c1f8:	8009883a 	mov	r4,r16
8111c1fc:	11160840 	call	81116084 <__any_on>
8111c200:	1027883a 	mov	r19,r2
8111c204:	8805d17a 	srai	r2,r17,5
8111c208:	d8c00217 	ldw	r3,8(sp)
8111c20c:	8c4007cc 	andi	r17,r17,31
8111c210:	1085883a 	add	r2,r2,r2
8111c214:	1085883a 	add	r2,r2,r2
8111c218:	1885883a 	add	r2,r3,r2
8111c21c:	00c00044 	movi	r3,1
8111c220:	1c62983a 	sll	r17,r3,r17
8111c224:	10800017 	ldw	r2,0(r2)
8111c228:	8884703a 	and	r2,r17,r2
8111c22c:	10000126 	beq	r2,zero,8111c234 <__gethex+0x61c>
8111c230:	9cc00094 	ori	r19,r19,2
8111c234:	b80b883a 	mov	r5,r23
8111c238:	8009883a 	mov	r4,r16
8111c23c:	111bb180 	call	8111bb18 <rshift>
8111c240:	d8c00017 	ldw	r3,0(sp)
8111c244:	95e5c83a 	sub	r18,r18,r23
8111c248:	04400084 	movi	r17,2
8111c24c:	1dc00117 	ldw	r23,4(r3)
8111c250:	003fa106 	br	8111c0d8 <__reset+0xfb0fc0d8>
8111c254:	85af883a 	add	r23,r16,r22
8111c258:	b8800003 	ldbu	r2,0(r23)
8111c25c:	b821883a 	mov	r16,r23
8111c260:	11003fcc 	andi	r4,r2,255
8111c264:	a109883a 	add	r4,r20,r4
8111c268:	21000003 	ldbu	r4,0(r4)
8111c26c:	203eaa26 	beq	r4,zero,8111bd18 <__reset+0xfb0fbd18>
8111c270:	84000044 	addi	r16,r16,1
8111c274:	80800003 	ldbu	r2,0(r16)
8111c278:	11003fcc 	andi	r4,r2,255
8111c27c:	a109883a 	add	r4,r20,r4
8111c280:	21000003 	ldbu	r4,0(r4)
8111c284:	203ffa1e 	bne	r4,zero,8111c270 <__reset+0xfb0fc270>
8111c288:	003ea306 	br	8111bd18 <__reset+0xfb0fbd18>
8111c28c:	d9001617 	ldw	r4,88(sp)
8111c290:	00800044 	movi	r2,1
8111c294:	1109c83a 	sub	r4,r2,r4
8111c298:	d9001615 	stw	r4,88(sp)
8111c29c:	d8801617 	ldw	r2,88(sp)
8111c2a0:	103f9626 	beq	r2,zero,8111c0fc <__reset+0xfb0fc0fc>
8111c2a4:	87000417 	ldw	fp,16(r16)
8111c2a8:	d9800217 	ldw	r6,8(sp)
8111c2ac:	013fffc4 	movi	r4,-1
8111c2b0:	e727883a 	add	r19,fp,fp
8111c2b4:	9ce7883a 	add	r19,r19,r19
8111c2b8:	3005883a 	mov	r2,r6
8111c2bc:	34cb883a 	add	r5,r6,r19
8111c2c0:	00000306 	br	8111c2d0 <__gethex+0x6b8>
8111c2c4:	10000015 	stw	zero,0(r2)
8111c2c8:	10800104 	addi	r2,r2,4
8111c2cc:	117f4c2e 	bgeu	r2,r5,8111c000 <__reset+0xfb0fc000>
8111c2d0:	10c00017 	ldw	r3,0(r2)
8111c2d4:	193ffb26 	beq	r3,r4,8111c2c4 <__reset+0xfb0fc2c4>
8111c2d8:	18c00044 	addi	r3,r3,1
8111c2dc:	10c00015 	stw	r3,0(r2)
8111c2e0:	00800084 	movi	r2,2
8111c2e4:	88802b26 	beq	r17,r2,8111c394 <__gethex+0x77c>
8111c2e8:	948007cc 	andi	r18,r18,31
8111c2ec:	90002f1e 	bne	r18,zero,8111c3ac <__gethex+0x794>
8111c2f0:	04400844 	movi	r17,33
8111c2f4:	003f8206 	br	8111c100 <__reset+0xfb0fc100>
8111c2f8:	04c00044 	movi	r19,1
8111c2fc:	003fc106 	br	8111c204 <__reset+0xfb0fc204>
8111c300:	d8c01617 	ldw	r3,88(sp)
8111c304:	183ed226 	beq	r3,zero,8111be50 <__reset+0xfb0fbe50>
8111c308:	d8c00417 	ldw	r3,16(sp)
8111c30c:	d9001517 	ldw	r4,84(sp)
8111c310:	18800015 	stw	r2,0(r3)
8111c314:	d8c00217 	ldw	r3,8(sp)
8111c318:	00800044 	movi	r2,1
8111c31c:	80800415 	stw	r2,16(r16)
8111c320:	18800015 	stw	r2,0(r3)
8111c324:	24000015 	stw	r16,0(r4)
8111c328:	00801884 	movi	r2,98
8111c32c:	003efa06 	br	8111bf18 <__reset+0xfb0fbf18>
8111c330:	9880008c 	andi	r2,r19,2
8111c334:	103f7126 	beq	r2,zero,8111c0fc <__reset+0xfb0fc0fc>
8111c338:	d8c00217 	ldw	r3,8(sp)
8111c33c:	18800017 	ldw	r2,0(r3)
8111c340:	9884b03a 	or	r2,r19,r2
8111c344:	1080004c 	andi	r2,r2,1
8111c348:	103fd61e 	bne	r2,zero,8111c2a4 <__reset+0xfb0fc2a4>
8111c34c:	003f6b06 	br	8111c0fc <__reset+0xfb0fc0fc>
8111c350:	da800217 	ldw	r10,8(sp)
8111c354:	0013883a 	mov	r9,zero
8111c358:	003e9f06 	br	8111bdd8 <__reset+0xfb0fbdd8>
8111c35c:	04c00084 	movi	r19,2
8111c360:	003f8806 	br	8111c184 <__reset+0xfb0fc184>
8111c364:	d9001617 	ldw	r4,88(sp)
8111c368:	203fe726 	beq	r4,zero,8111c308 <__reset+0xfb0fc308>
8111c36c:	003eb806 	br	8111be50 <__reset+0xfb0fbe50>
8111c370:	95feb71e 	bne	r18,r23,8111be50 <__reset+0xfb0fbe50>
8111c374:	1cbfe40e 	bge	r3,r18,8111c308 <__reset+0xfb0fc308>
8111c378:	917fffc4 	addi	r5,r18,-1
8111c37c:	8009883a 	mov	r4,r16
8111c380:	11160840 	call	81116084 <__any_on>
8111c384:	103eb226 	beq	r2,zero,8111be50 <__reset+0xfb0fbe50>
8111c388:	d8c00017 	ldw	r3,0(sp)
8111c38c:	18800117 	ldw	r2,4(r3)
8111c390:	003fdd06 	br	8111c308 <__reset+0xfb0fc308>
8111c394:	d8c00017 	ldw	r3,0(sp)
8111c398:	18800017 	ldw	r2,0(r3)
8111c39c:	10bfffc4 	addi	r2,r2,-1
8111c3a0:	90801c26 	beq	r18,r2,8111c414 <__gethex+0x7fc>
8111c3a4:	04400884 	movi	r17,34
8111c3a8:	003f5506 	br	8111c100 <__reset+0xfb0fc100>
8111c3ac:	34c5883a 	add	r2,r6,r19
8111c3b0:	113fff17 	ldw	r4,-4(r2)
8111c3b4:	11154080 	call	81115408 <__hi0bits>
8111c3b8:	00c00804 	movi	r3,32
8111c3bc:	1ca5c83a 	sub	r18,r3,r18
8111c3c0:	14bfcb0e 	bge	r2,r18,8111c2f0 <__reset+0xfb0fc2f0>
8111c3c4:	003f1c06 	br	8111c038 <__reset+0xfb0fc038>
8111c3c8:	81400117 	ldw	r5,4(r16)
8111c3cc:	d9000117 	ldw	r4,4(sp)
8111c3d0:	29400044 	addi	r5,r5,1
8111c3d4:	11151140 	call	81115114 <_Balloc>
8111c3d8:	81800417 	ldw	r6,16(r16)
8111c3dc:	81400304 	addi	r5,r16,12
8111c3e0:	11000304 	addi	r4,r2,12
8111c3e4:	31800084 	addi	r6,r6,2
8111c3e8:	318d883a 	add	r6,r6,r6
8111c3ec:	318d883a 	add	r6,r6,r6
8111c3f0:	1029883a 	mov	r20,r2
8111c3f4:	110b26c0 	call	8110b26c <memcpy>
8111c3f8:	d9000117 	ldw	r4,4(sp)
8111c3fc:	800b883a 	mov	r5,r16
8111c400:	a021883a 	mov	r16,r20
8111c404:	11151bc0 	call	811151bc <_Bfree>
8111c408:	a0c00417 	ldw	r3,16(r20)
8111c40c:	a1800504 	addi	r6,r20,20
8111c410:	003efe06 	br	8111c00c <__reset+0xfb0fc00c>
8111c414:	9005d17a 	srai	r2,r18,5
8111c418:	944007cc 	andi	r17,r18,31
8111c41c:	1085883a 	add	r2,r2,r2
8111c420:	1085883a 	add	r2,r2,r2
8111c424:	3087883a 	add	r3,r6,r2
8111c428:	00800044 	movi	r2,1
8111c42c:	1462983a 	sll	r17,r2,r17
8111c430:	18800017 	ldw	r2,0(r3)
8111c434:	8884703a 	and	r2,r17,r2
8111c438:	1022c03a 	cmpne	r17,r2,zero
8111c43c:	00800884 	movi	r2,34
8111c440:	1463c83a 	sub	r17,r2,r17
8111c444:	003f2e06 	br	8111c100 <__reset+0xfb0fc100>

8111c448 <__hexnan>:
8111c448:	defff904 	addi	sp,sp,-28
8111c44c:	dc800215 	stw	r18,8(sp)
8111c450:	2c800017 	ldw	r18,0(r5)
8111c454:	dfc00615 	stw	ra,24(sp)
8111c458:	dd400515 	stw	r21,20(sp)
8111c45c:	901fd17a 	srai	r15,r18,5
8111c460:	dd000415 	stw	r20,16(sp)
8111c464:	dcc00315 	stw	r19,12(sp)
8111c468:	7bdf883a 	add	r15,r15,r15
8111c46c:	7bdf883a 	add	r15,r15,r15
8111c470:	dc400115 	stw	r17,4(sp)
8111c474:	dc000015 	stw	r16,0(sp)
8111c478:	948007cc 	andi	r18,r18,31
8111c47c:	33df883a 	add	r15,r6,r15
8111c480:	90000126 	beq	r18,zero,8111c488 <__hexnan+0x40>
8111c484:	7bc00104 	addi	r15,r15,4
8111c488:	22000017 	ldw	r8,0(r4)
8111c48c:	7affff04 	addi	r11,r15,-4
8111c490:	03a044f4 	movhi	r14,33043
8111c494:	783fff15 	stw	zero,-4(r15)
8111c498:	581b883a 	mov	r13,r11
8111c49c:	580b883a 	mov	r5,r11
8111c4a0:	000f883a 	mov	r7,zero
8111c4a4:	003f883a 	mov	ra,zero
8111c4a8:	0019883a 	mov	r12,zero
8111c4ac:	738f0604 	addi	r14,r14,15384
8111c4b0:	04400204 	movi	r17,8
8111c4b4:	04000804 	movi	r16,32
8111c4b8:	04c001c4 	movi	r19,7
8111c4bc:	42000044 	addi	r8,r8,1
8111c4c0:	40c00003 	ldbu	r3,0(r8)
8111c4c4:	18001d26 	beq	r3,zero,8111c53c <__hexnan+0xf4>
8111c4c8:	70c5883a 	add	r2,r14,r3
8111c4cc:	10800003 	ldbu	r2,0(r2)
8111c4d0:	12403fcc 	andi	r9,r2,255
8111c4d4:	4800301e 	bne	r9,zero,8111c598 <__hexnan+0x150>
8111c4d8:	80c04236 	bltu	r16,r3,8111c5e4 <__hexnan+0x19c>
8111c4dc:	fb3ff70e 	bge	ra,r12,8111c4bc <__reset+0xfb0fc4bc>
8111c4e0:	2b40112e 	bgeu	r5,r13,8111c528 <__hexnan+0xe0>
8111c4e4:	99c01016 	blt	r19,r7,8111c528 <__hexnan+0xe0>
8111c4e8:	89e9c83a 	sub	r20,r17,r7
8111c4ec:	a529883a 	add	r20,r20,r20
8111c4f0:	2a800017 	ldw	r10,0(r5)
8111c4f4:	a529883a 	add	r20,r20,r20
8111c4f8:	852bc83a 	sub	r21,r16,r20
8111c4fc:	28c00104 	addi	r3,r5,4
8111c500:	2805883a 	mov	r2,r5
8111c504:	19c00017 	ldw	r7,0(r3)
8111c508:	10800104 	addi	r2,r2,4
8111c50c:	18c00104 	addi	r3,r3,4
8111c510:	3d52983a 	sll	r9,r7,r21
8111c514:	4a92b03a 	or	r9,r9,r10
8111c518:	3d14d83a 	srl	r10,r7,r20
8111c51c:	127fff15 	stw	r9,-4(r2)
8111c520:	1abfff15 	stw	r10,-4(r3)
8111c524:	137ff736 	bltu	r2,r13,8111c504 <__reset+0xfb0fc504>
8111c528:	31402836 	bltu	r6,r5,8111c5cc <__hexnan+0x184>
8111c52c:	42000044 	addi	r8,r8,1
8111c530:	40c00003 	ldbu	r3,0(r8)
8111c534:	01c00204 	movi	r7,8
8111c538:	183fe31e 	bne	r3,zero,8111c4c8 <__reset+0xfb0fc4c8>
8111c53c:	60002b26 	beq	r12,zero,8111c5ec <__hexnan+0x1a4>
8111c540:	2b40022e 	bgeu	r5,r13,8111c54c <__hexnan+0x104>
8111c544:	008001c4 	movi	r2,7
8111c548:	11c0430e 	bge	r2,r7,8111c658 <__hexnan+0x210>
8111c54c:	3140312e 	bgeu	r6,r5,8111c614 <__hexnan+0x1cc>
8111c550:	3007883a 	mov	r3,r6
8111c554:	29000017 	ldw	r4,0(r5)
8111c558:	18800104 	addi	r2,r3,4
8111c55c:	29400104 	addi	r5,r5,4
8111c560:	19000015 	stw	r4,0(r3)
8111c564:	1007883a 	mov	r3,r2
8111c568:	597ffa2e 	bgeu	r11,r5,8111c554 <__reset+0xfb0fc554>
8111c56c:	10000015 	stw	zero,0(r2)
8111c570:	10800104 	addi	r2,r2,4
8111c574:	58bffd2e 	bgeu	r11,r2,8111c56c <__reset+0xfb0fc56c>
8111c578:	78bfff17 	ldw	r2,-4(r15)
8111c57c:	1000041e 	bne	r2,zero,8111c590 <__hexnan+0x148>
8111c580:	32c02d26 	beq	r6,r11,8111c638 <__hexnan+0x1f0>
8111c584:	5affff04 	addi	r11,r11,-4
8111c588:	58800017 	ldw	r2,0(r11)
8111c58c:	103ffc26 	beq	r2,zero,8111c580 <__reset+0xfb0fc580>
8111c590:	00800144 	movi	r2,5
8111c594:	00001606 	br	8111c5f0 <__hexnan+0x1a8>
8111c598:	39c00044 	addi	r7,r7,1
8111c59c:	63000044 	addi	r12,r12,1
8111c5a0:	89c0040e 	bge	r17,r7,8111c5b4 <__hexnan+0x16c>
8111c5a4:	317fc52e 	bgeu	r6,r5,8111c4bc <__reset+0xfb0fc4bc>
8111c5a8:	283fff15 	stw	zero,-4(r5)
8111c5ac:	01c00044 	movi	r7,1
8111c5b0:	297fff04 	addi	r5,r5,-4
8111c5b4:	28c00017 	ldw	r3,0(r5)
8111c5b8:	108003cc 	andi	r2,r2,15
8111c5bc:	1806913a 	slli	r3,r3,4
8111c5c0:	1884b03a 	or	r2,r3,r2
8111c5c4:	28800015 	stw	r2,0(r5)
8111c5c8:	003fbc06 	br	8111c4bc <__reset+0xfb0fc4bc>
8111c5cc:	2b7fff04 	addi	r13,r5,-4
8111c5d0:	283fff15 	stw	zero,-4(r5)
8111c5d4:	603f883a 	mov	ra,r12
8111c5d8:	680b883a 	mov	r5,r13
8111c5dc:	000f883a 	mov	r7,zero
8111c5e0:	003fb606 	br	8111c4bc <__reset+0xfb0fc4bc>
8111c5e4:	00800a44 	movi	r2,41
8111c5e8:	18801726 	beq	r3,r2,8111c648 <__hexnan+0x200>
8111c5ec:	00800104 	movi	r2,4
8111c5f0:	dfc00617 	ldw	ra,24(sp)
8111c5f4:	dd400517 	ldw	r21,20(sp)
8111c5f8:	dd000417 	ldw	r20,16(sp)
8111c5fc:	dcc00317 	ldw	r19,12(sp)
8111c600:	dc800217 	ldw	r18,8(sp)
8111c604:	dc400117 	ldw	r17,4(sp)
8111c608:	dc000017 	ldw	r16,0(sp)
8111c60c:	dec00704 	addi	sp,sp,28
8111c610:	f800283a 	ret
8111c614:	903fd826 	beq	r18,zero,8111c578 <__reset+0xfb0fc578>
8111c618:	00c00804 	movi	r3,32
8111c61c:	1ca5c83a 	sub	r18,r3,r18
8111c620:	00ffffc4 	movi	r3,-1
8111c624:	78bfff17 	ldw	r2,-4(r15)
8111c628:	1c86d83a 	srl	r3,r3,r18
8111c62c:	1884703a 	and	r2,r3,r2
8111c630:	78bfff15 	stw	r2,-4(r15)
8111c634:	003fd106 	br	8111c57c <__reset+0xfb0fc57c>
8111c638:	00800044 	movi	r2,1
8111c63c:	58800015 	stw	r2,0(r11)
8111c640:	00800144 	movi	r2,5
8111c644:	003fea06 	br	8111c5f0 <__reset+0xfb0fc5f0>
8111c648:	42000044 	addi	r8,r8,1
8111c64c:	22000015 	stw	r8,0(r4)
8111c650:	603fbb1e 	bne	r12,zero,8111c540 <__reset+0xfb0fc540>
8111c654:	003fe506 	br	8111c5ec <__reset+0xfb0fc5ec>
8111c658:	02400204 	movi	r9,8
8111c65c:	49d3c83a 	sub	r9,r9,r7
8111c660:	4a53883a 	add	r9,r9,r9
8111c664:	2a000017 	ldw	r8,0(r5)
8111c668:	4a53883a 	add	r9,r9,r9
8111c66c:	02800804 	movi	r10,32
8111c670:	5255c83a 	sub	r10,r10,r9
8111c674:	28c00104 	addi	r3,r5,4
8111c678:	2805883a 	mov	r2,r5
8111c67c:	19c00017 	ldw	r7,0(r3)
8111c680:	10800104 	addi	r2,r2,4
8111c684:	18c00104 	addi	r3,r3,4
8111c688:	3a88983a 	sll	r4,r7,r10
8111c68c:	2208b03a 	or	r4,r4,r8
8111c690:	3a50d83a 	srl	r8,r7,r9
8111c694:	113fff15 	stw	r4,-4(r2)
8111c698:	1a3fff15 	stw	r8,-4(r3)
8111c69c:	137ff736 	bltu	r2,r13,8111c67c <__reset+0xfb0fc67c>
8111c6a0:	003faa06 	br	8111c54c <__reset+0xfb0fc54c>

8111c6a4 <strncmp>:
8111c6a4:	30003126 	beq	r6,zero,8111c76c <strncmp+0xc8>
8111c6a8:	2144b03a 	or	r2,r4,r5
8111c6ac:	108000cc 	andi	r2,r2,3
8111c6b0:	10001e1e 	bne	r2,zero,8111c72c <strncmp+0x88>
8111c6b4:	024000c4 	movi	r9,3
8111c6b8:	49801c2e 	bgeu	r9,r6,8111c72c <strncmp+0x88>
8111c6bc:	20800017 	ldw	r2,0(r4)
8111c6c0:	28c00017 	ldw	r3,0(r5)
8111c6c4:	10c0191e 	bne	r2,r3,8111c72c <strncmp+0x88>
8111c6c8:	31bfff04 	addi	r6,r6,-4
8111c6cc:	30002726 	beq	r6,zero,8111c76c <strncmp+0xc8>
8111c6d0:	02ffbff4 	movhi	r11,65279
8111c6d4:	5affbfc4 	addi	r11,r11,-257
8111c6d8:	0086303a 	nor	r3,zero,r2
8111c6dc:	02a02074 	movhi	r10,32897
8111c6e0:	12c5883a 	add	r2,r2,r11
8111c6e4:	52a02004 	addi	r10,r10,-32640
8111c6e8:	10c4703a 	and	r2,r2,r3
8111c6ec:	1284703a 	and	r2,r2,r10
8111c6f0:	10000b26 	beq	r2,zero,8111c720 <strncmp+0x7c>
8111c6f4:	00001d06 	br	8111c76c <strncmp+0xc8>
8111c6f8:	20c00017 	ldw	r3,0(r4)
8111c6fc:	29c00017 	ldw	r7,0(r5)
8111c700:	1ad1883a 	add	r8,r3,r11
8111c704:	00c4303a 	nor	r2,zero,r3
8111c708:	4084703a 	and	r2,r8,r2
8111c70c:	1284703a 	and	r2,r2,r10
8111c710:	19c0061e 	bne	r3,r7,8111c72c <strncmp+0x88>
8111c714:	31bfff04 	addi	r6,r6,-4
8111c718:	30001426 	beq	r6,zero,8111c76c <strncmp+0xc8>
8111c71c:	1000131e 	bne	r2,zero,8111c76c <strncmp+0xc8>
8111c720:	21000104 	addi	r4,r4,4
8111c724:	29400104 	addi	r5,r5,4
8111c728:	49bff336 	bltu	r9,r6,8111c6f8 <__reset+0xfb0fc6f8>
8111c72c:	28800007 	ldb	r2,0(r5)
8111c730:	20c00007 	ldb	r3,0(r4)
8111c734:	31bfffc4 	addi	r6,r6,-1
8111c738:	10c0081e 	bne	r2,r3,8111c75c <strncmp+0xb8>
8111c73c:	30000b26 	beq	r6,zero,8111c76c <strncmp+0xc8>
8111c740:	10000a26 	beq	r2,zero,8111c76c <strncmp+0xc8>
8111c744:	21000044 	addi	r4,r4,1
8111c748:	29400044 	addi	r5,r5,1
8111c74c:	20800007 	ldb	r2,0(r4)
8111c750:	28c00007 	ldb	r3,0(r5)
8111c754:	31bfffc4 	addi	r6,r6,-1
8111c758:	10fff826 	beq	r2,r3,8111c73c <__reset+0xfb0fc73c>
8111c75c:	20800003 	ldbu	r2,0(r4)
8111c760:	28c00003 	ldbu	r3,0(r5)
8111c764:	10c5c83a 	sub	r2,r2,r3
8111c768:	f800283a 	ret
8111c76c:	0005883a 	mov	r2,zero
8111c770:	f800283a 	ret

8111c774 <_wcrtomb_r>:
8111c774:	defff604 	addi	sp,sp,-40
8111c778:	00a044f4 	movhi	r2,33043
8111c77c:	dc800815 	stw	r18,32(sp)
8111c780:	dc400715 	stw	r17,28(sp)
8111c784:	dc000615 	stw	r16,24(sp)
8111c788:	10976a04 	addi	r2,r2,23976
8111c78c:	dfc00915 	stw	ra,36(sp)
8111c790:	2021883a 	mov	r16,r4
8111c794:	3823883a 	mov	r17,r7
8111c798:	14800017 	ldw	r18,0(r2)
8111c79c:	28001426 	beq	r5,zero,8111c7f0 <_wcrtomb_r+0x7c>
8111c7a0:	d9400415 	stw	r5,16(sp)
8111c7a4:	d9800515 	stw	r6,20(sp)
8111c7a8:	1114bf00 	call	81114bf0 <__locale_charset>
8111c7ac:	d9800517 	ldw	r6,20(sp)
8111c7b0:	d9400417 	ldw	r5,16(sp)
8111c7b4:	100f883a 	mov	r7,r2
8111c7b8:	dc400015 	stw	r17,0(sp)
8111c7bc:	8009883a 	mov	r4,r16
8111c7c0:	903ee83a 	callr	r18
8111c7c4:	00ffffc4 	movi	r3,-1
8111c7c8:	10c0031e 	bne	r2,r3,8111c7d8 <_wcrtomb_r+0x64>
8111c7cc:	88000015 	stw	zero,0(r17)
8111c7d0:	00c02284 	movi	r3,138
8111c7d4:	80c00015 	stw	r3,0(r16)
8111c7d8:	dfc00917 	ldw	ra,36(sp)
8111c7dc:	dc800817 	ldw	r18,32(sp)
8111c7e0:	dc400717 	ldw	r17,28(sp)
8111c7e4:	dc000617 	ldw	r16,24(sp)
8111c7e8:	dec00a04 	addi	sp,sp,40
8111c7ec:	f800283a 	ret
8111c7f0:	1114bf00 	call	81114bf0 <__locale_charset>
8111c7f4:	100f883a 	mov	r7,r2
8111c7f8:	dc400015 	stw	r17,0(sp)
8111c7fc:	000d883a 	mov	r6,zero
8111c800:	d9400104 	addi	r5,sp,4
8111c804:	8009883a 	mov	r4,r16
8111c808:	903ee83a 	callr	r18
8111c80c:	003fed06 	br	8111c7c4 <__reset+0xfb0fc7c4>

8111c810 <wcrtomb>:
8111c810:	defff604 	addi	sp,sp,-40
8111c814:	00a044f4 	movhi	r2,33043
8111c818:	dc800615 	stw	r18,24(sp)
8111c81c:	dc400515 	stw	r17,20(sp)
8111c820:	10976404 	addi	r2,r2,23952
8111c824:	dfc00915 	stw	ra,36(sp)
8111c828:	dd000815 	stw	r20,32(sp)
8111c82c:	dcc00715 	stw	r19,28(sp)
8111c830:	dc000415 	stw	r16,16(sp)
8111c834:	3025883a 	mov	r18,r6
8111c838:	14400017 	ldw	r17,0(r2)
8111c83c:	20001926 	beq	r4,zero,8111c8a4 <wcrtomb+0x94>
8111c840:	00a044f4 	movhi	r2,33043
8111c844:	10976a04 	addi	r2,r2,23976
8111c848:	15000017 	ldw	r20,0(r2)
8111c84c:	2021883a 	mov	r16,r4
8111c850:	2827883a 	mov	r19,r5
8111c854:	1114bf00 	call	81114bf0 <__locale_charset>
8111c858:	100f883a 	mov	r7,r2
8111c85c:	dc800015 	stw	r18,0(sp)
8111c860:	980d883a 	mov	r6,r19
8111c864:	800b883a 	mov	r5,r16
8111c868:	8809883a 	mov	r4,r17
8111c86c:	a03ee83a 	callr	r20
8111c870:	00ffffc4 	movi	r3,-1
8111c874:	10c0031e 	bne	r2,r3,8111c884 <wcrtomb+0x74>
8111c878:	90000015 	stw	zero,0(r18)
8111c87c:	00c02284 	movi	r3,138
8111c880:	88c00015 	stw	r3,0(r17)
8111c884:	dfc00917 	ldw	ra,36(sp)
8111c888:	dd000817 	ldw	r20,32(sp)
8111c88c:	dcc00717 	ldw	r19,28(sp)
8111c890:	dc800617 	ldw	r18,24(sp)
8111c894:	dc400517 	ldw	r17,20(sp)
8111c898:	dc000417 	ldw	r16,16(sp)
8111c89c:	dec00a04 	addi	sp,sp,40
8111c8a0:	f800283a 	ret
8111c8a4:	00a044f4 	movhi	r2,33043
8111c8a8:	10976a04 	addi	r2,r2,23976
8111c8ac:	14000017 	ldw	r16,0(r2)
8111c8b0:	1114bf00 	call	81114bf0 <__locale_charset>
8111c8b4:	100f883a 	mov	r7,r2
8111c8b8:	dc800015 	stw	r18,0(sp)
8111c8bc:	000d883a 	mov	r6,zero
8111c8c0:	d9400104 	addi	r5,sp,4
8111c8c4:	8809883a 	mov	r4,r17
8111c8c8:	803ee83a 	callr	r16
8111c8cc:	003fe806 	br	8111c870 <__reset+0xfb0fc870>

8111c8d0 <__ascii_wctomb>:
8111c8d0:	28000526 	beq	r5,zero,8111c8e8 <__ascii_wctomb+0x18>
8111c8d4:	00803fc4 	movi	r2,255
8111c8d8:	11800536 	bltu	r2,r6,8111c8f0 <__ascii_wctomb+0x20>
8111c8dc:	29800005 	stb	r6,0(r5)
8111c8e0:	00800044 	movi	r2,1
8111c8e4:	f800283a 	ret
8111c8e8:	0005883a 	mov	r2,zero
8111c8ec:	f800283a 	ret
8111c8f0:	00802284 	movi	r2,138
8111c8f4:	20800015 	stw	r2,0(r4)
8111c8f8:	00bfffc4 	movi	r2,-1
8111c8fc:	f800283a 	ret

8111c900 <_wctomb_r>:
8111c900:	00a044f4 	movhi	r2,33043
8111c904:	defff904 	addi	sp,sp,-28
8111c908:	10976a04 	addi	r2,r2,23976
8111c90c:	dfc00615 	stw	ra,24(sp)
8111c910:	dc400515 	stw	r17,20(sp)
8111c914:	dc000415 	stw	r16,16(sp)
8111c918:	3823883a 	mov	r17,r7
8111c91c:	14000017 	ldw	r16,0(r2)
8111c920:	d9000115 	stw	r4,4(sp)
8111c924:	d9400215 	stw	r5,8(sp)
8111c928:	d9800315 	stw	r6,12(sp)
8111c92c:	1114bf00 	call	81114bf0 <__locale_charset>
8111c930:	d9800317 	ldw	r6,12(sp)
8111c934:	d9400217 	ldw	r5,8(sp)
8111c938:	d9000117 	ldw	r4,4(sp)
8111c93c:	100f883a 	mov	r7,r2
8111c940:	dc400015 	stw	r17,0(sp)
8111c944:	803ee83a 	callr	r16
8111c948:	dfc00617 	ldw	ra,24(sp)
8111c94c:	dc400517 	ldw	r17,20(sp)
8111c950:	dc000417 	ldw	r16,16(sp)
8111c954:	dec00704 	addi	sp,sp,28
8111c958:	f800283a 	ret

8111c95c <__fixunsdfsi>:
8111c95c:	defffd04 	addi	sp,sp,-12
8111c960:	000d883a 	mov	r6,zero
8111c964:	01d07834 	movhi	r7,16864
8111c968:	dc400115 	stw	r17,4(sp)
8111c96c:	dc000015 	stw	r16,0(sp)
8111c970:	dfc00215 	stw	ra,8(sp)
8111c974:	2023883a 	mov	r17,r4
8111c978:	2821883a 	mov	r16,r5
8111c97c:	111ea4c0 	call	8111ea4c <__gedf2>
8111c980:	1000080e 	bge	r2,zero,8111c9a4 <__fixunsdfsi+0x48>
8111c984:	8809883a 	mov	r4,r17
8111c988:	800b883a 	mov	r5,r16
8111c98c:	111f5180 	call	8111f518 <__fixdfsi>
8111c990:	dfc00217 	ldw	ra,8(sp)
8111c994:	dc400117 	ldw	r17,4(sp)
8111c998:	dc000017 	ldw	r16,0(sp)
8111c99c:	dec00304 	addi	sp,sp,12
8111c9a0:	f800283a 	ret
8111c9a4:	000d883a 	mov	r6,zero
8111c9a8:	01d07834 	movhi	r7,16864
8111c9ac:	8809883a 	mov	r4,r17
8111c9b0:	800b883a 	mov	r5,r16
8111c9b4:	111ec1c0 	call	8111ec1c <__subdf3>
8111c9b8:	180b883a 	mov	r5,r3
8111c9bc:	1009883a 	mov	r4,r2
8111c9c0:	111f5180 	call	8111f518 <__fixdfsi>
8111c9c4:	00e00034 	movhi	r3,32768
8111c9c8:	10c5883a 	add	r2,r2,r3
8111c9cc:	003ff006 	br	8111c990 <__reset+0xfb0fc990>

8111c9d0 <__udivdi3>:
8111c9d0:	defff504 	addi	sp,sp,-44
8111c9d4:	dcc00415 	stw	r19,16(sp)
8111c9d8:	dc000115 	stw	r16,4(sp)
8111c9dc:	dfc00a15 	stw	ra,40(sp)
8111c9e0:	df000915 	stw	fp,36(sp)
8111c9e4:	ddc00815 	stw	r23,32(sp)
8111c9e8:	dd800715 	stw	r22,28(sp)
8111c9ec:	dd400615 	stw	r21,24(sp)
8111c9f0:	dd000515 	stw	r20,20(sp)
8111c9f4:	dc800315 	stw	r18,12(sp)
8111c9f8:	dc400215 	stw	r17,8(sp)
8111c9fc:	2027883a 	mov	r19,r4
8111ca00:	2821883a 	mov	r16,r5
8111ca04:	3800411e 	bne	r7,zero,8111cb0c <__udivdi3+0x13c>
8111ca08:	3023883a 	mov	r17,r6
8111ca0c:	2025883a 	mov	r18,r4
8111ca10:	2980522e 	bgeu	r5,r6,8111cb5c <__udivdi3+0x18c>
8111ca14:	00bfffd4 	movui	r2,65535
8111ca18:	282d883a 	mov	r22,r5
8111ca1c:	1180a836 	bltu	r2,r6,8111ccc0 <__udivdi3+0x2f0>
8111ca20:	00803fc4 	movi	r2,255
8111ca24:	1185803a 	cmpltu	r2,r2,r6
8111ca28:	100490fa 	slli	r2,r2,3
8111ca2c:	3086d83a 	srl	r3,r6,r2
8111ca30:	012044f4 	movhi	r4,33043
8111ca34:	210d8004 	addi	r4,r4,13824
8111ca38:	20c7883a 	add	r3,r4,r3
8111ca3c:	18c00003 	ldbu	r3,0(r3)
8111ca40:	1885883a 	add	r2,r3,r2
8111ca44:	00c00804 	movi	r3,32
8111ca48:	1887c83a 	sub	r3,r3,r2
8111ca4c:	18000526 	beq	r3,zero,8111ca64 <__udivdi3+0x94>
8111ca50:	80e0983a 	sll	r16,r16,r3
8111ca54:	9884d83a 	srl	r2,r19,r2
8111ca58:	30e2983a 	sll	r17,r6,r3
8111ca5c:	98e4983a 	sll	r18,r19,r3
8111ca60:	142cb03a 	or	r22,r2,r16
8111ca64:	882ad43a 	srli	r21,r17,16
8111ca68:	b009883a 	mov	r4,r22
8111ca6c:	8d3fffcc 	andi	r20,r17,65535
8111ca70:	a80b883a 	mov	r5,r21
8111ca74:	111d5dc0 	call	8111d5dc <__umodsi3>
8111ca78:	b009883a 	mov	r4,r22
8111ca7c:	a80b883a 	mov	r5,r21
8111ca80:	1027883a 	mov	r19,r2
8111ca84:	111d5780 	call	8111d578 <__udivsi3>
8111ca88:	102d883a 	mov	r22,r2
8111ca8c:	9826943a 	slli	r19,r19,16
8111ca90:	9004d43a 	srli	r2,r18,16
8111ca94:	a5a1383a 	mul	r16,r20,r22
8111ca98:	14c4b03a 	or	r2,r2,r19
8111ca9c:	1400052e 	bgeu	r2,r16,8111cab4 <__udivdi3+0xe4>
8111caa0:	1445883a 	add	r2,r2,r17
8111caa4:	b0ffffc4 	addi	r3,r22,-1
8111caa8:	14400136 	bltu	r2,r17,8111cab0 <__udivdi3+0xe0>
8111caac:	14012336 	bltu	r2,r16,8111cf3c <__udivdi3+0x56c>
8111cab0:	182d883a 	mov	r22,r3
8111cab4:	1421c83a 	sub	r16,r2,r16
8111cab8:	a80b883a 	mov	r5,r21
8111cabc:	8009883a 	mov	r4,r16
8111cac0:	111d5dc0 	call	8111d5dc <__umodsi3>
8111cac4:	1027883a 	mov	r19,r2
8111cac8:	a80b883a 	mov	r5,r21
8111cacc:	8009883a 	mov	r4,r16
8111cad0:	111d5780 	call	8111d578 <__udivsi3>
8111cad4:	9826943a 	slli	r19,r19,16
8111cad8:	a0a9383a 	mul	r20,r20,r2
8111cadc:	94bfffcc 	andi	r18,r18,65535
8111cae0:	94e4b03a 	or	r18,r18,r19
8111cae4:	9500052e 	bgeu	r18,r20,8111cafc <__udivdi3+0x12c>
8111cae8:	8ca5883a 	add	r18,r17,r18
8111caec:	10ffffc4 	addi	r3,r2,-1
8111caf0:	9440f136 	bltu	r18,r17,8111ceb8 <__udivdi3+0x4e8>
8111caf4:	9500f02e 	bgeu	r18,r20,8111ceb8 <__udivdi3+0x4e8>
8111caf8:	10bfff84 	addi	r2,r2,-2
8111cafc:	b00c943a 	slli	r6,r22,16
8111cb00:	0007883a 	mov	r3,zero
8111cb04:	3084b03a 	or	r2,r6,r2
8111cb08:	00005906 	br	8111cc70 <__udivdi3+0x2a0>
8111cb0c:	29c05636 	bltu	r5,r7,8111cc68 <__udivdi3+0x298>
8111cb10:	00bfffd4 	movui	r2,65535
8111cb14:	11c0622e 	bgeu	r2,r7,8111cca0 <__udivdi3+0x2d0>
8111cb18:	00804034 	movhi	r2,256
8111cb1c:	10bfffc4 	addi	r2,r2,-1
8111cb20:	11c0ee36 	bltu	r2,r7,8111cedc <__udivdi3+0x50c>
8111cb24:	00800404 	movi	r2,16
8111cb28:	3886d83a 	srl	r3,r7,r2
8111cb2c:	012044f4 	movhi	r4,33043
8111cb30:	210d8004 	addi	r4,r4,13824
8111cb34:	20c7883a 	add	r3,r4,r3
8111cb38:	18c00003 	ldbu	r3,0(r3)
8111cb3c:	05400804 	movi	r21,32
8111cb40:	1885883a 	add	r2,r3,r2
8111cb44:	a8abc83a 	sub	r21,r21,r2
8111cb48:	a800621e 	bne	r21,zero,8111ccd4 <__udivdi3+0x304>
8111cb4c:	3c00e936 	bltu	r7,r16,8111cef4 <__udivdi3+0x524>
8111cb50:	9985403a 	cmpgeu	r2,r19,r6
8111cb54:	0007883a 	mov	r3,zero
8111cb58:	00004506 	br	8111cc70 <__udivdi3+0x2a0>
8111cb5c:	3000041e 	bne	r6,zero,8111cb70 <__udivdi3+0x1a0>
8111cb60:	000b883a 	mov	r5,zero
8111cb64:	01000044 	movi	r4,1
8111cb68:	111d5780 	call	8111d578 <__udivsi3>
8111cb6c:	1023883a 	mov	r17,r2
8111cb70:	00bfffd4 	movui	r2,65535
8111cb74:	14404e2e 	bgeu	r2,r17,8111ccb0 <__udivdi3+0x2e0>
8111cb78:	00804034 	movhi	r2,256
8111cb7c:	10bfffc4 	addi	r2,r2,-1
8111cb80:	1440d836 	bltu	r2,r17,8111cee4 <__udivdi3+0x514>
8111cb84:	00800404 	movi	r2,16
8111cb88:	8886d83a 	srl	r3,r17,r2
8111cb8c:	012044f4 	movhi	r4,33043
8111cb90:	210d8004 	addi	r4,r4,13824
8111cb94:	20c7883a 	add	r3,r4,r3
8111cb98:	18c00003 	ldbu	r3,0(r3)
8111cb9c:	1885883a 	add	r2,r3,r2
8111cba0:	00c00804 	movi	r3,32
8111cba4:	1887c83a 	sub	r3,r3,r2
8111cba8:	18008f1e 	bne	r3,zero,8111cde8 <__udivdi3+0x418>
8111cbac:	882ad43a 	srli	r21,r17,16
8111cbb0:	8461c83a 	sub	r16,r16,r17
8111cbb4:	8d3fffcc 	andi	r20,r17,65535
8111cbb8:	00c00044 	movi	r3,1
8111cbbc:	8009883a 	mov	r4,r16
8111cbc0:	a80b883a 	mov	r5,r21
8111cbc4:	d8c00015 	stw	r3,0(sp)
8111cbc8:	111d5dc0 	call	8111d5dc <__umodsi3>
8111cbcc:	8009883a 	mov	r4,r16
8111cbd0:	a80b883a 	mov	r5,r21
8111cbd4:	1027883a 	mov	r19,r2
8111cbd8:	111d5780 	call	8111d578 <__udivsi3>
8111cbdc:	9826943a 	slli	r19,r19,16
8111cbe0:	9008d43a 	srli	r4,r18,16
8111cbe4:	1521383a 	mul	r16,r2,r20
8111cbe8:	102d883a 	mov	r22,r2
8111cbec:	24c8b03a 	or	r4,r4,r19
8111cbf0:	d8c00017 	ldw	r3,0(sp)
8111cbf4:	2400052e 	bgeu	r4,r16,8111cc0c <__udivdi3+0x23c>
8111cbf8:	2449883a 	add	r4,r4,r17
8111cbfc:	b0bfffc4 	addi	r2,r22,-1
8111cc00:	24400136 	bltu	r4,r17,8111cc08 <__udivdi3+0x238>
8111cc04:	2400ca36 	bltu	r4,r16,8111cf30 <__udivdi3+0x560>
8111cc08:	102d883a 	mov	r22,r2
8111cc0c:	2421c83a 	sub	r16,r4,r16
8111cc10:	a80b883a 	mov	r5,r21
8111cc14:	8009883a 	mov	r4,r16
8111cc18:	d8c00015 	stw	r3,0(sp)
8111cc1c:	111d5dc0 	call	8111d5dc <__umodsi3>
8111cc20:	1027883a 	mov	r19,r2
8111cc24:	a80b883a 	mov	r5,r21
8111cc28:	8009883a 	mov	r4,r16
8111cc2c:	111d5780 	call	8111d578 <__udivsi3>
8111cc30:	9826943a 	slli	r19,r19,16
8111cc34:	1529383a 	mul	r20,r2,r20
8111cc38:	94bfffcc 	andi	r18,r18,65535
8111cc3c:	94e4b03a 	or	r18,r18,r19
8111cc40:	d8c00017 	ldw	r3,0(sp)
8111cc44:	9500052e 	bgeu	r18,r20,8111cc5c <__udivdi3+0x28c>
8111cc48:	8ca5883a 	add	r18,r17,r18
8111cc4c:	113fffc4 	addi	r4,r2,-1
8111cc50:	94409736 	bltu	r18,r17,8111ceb0 <__udivdi3+0x4e0>
8111cc54:	9500962e 	bgeu	r18,r20,8111ceb0 <__udivdi3+0x4e0>
8111cc58:	10bfff84 	addi	r2,r2,-2
8111cc5c:	b00c943a 	slli	r6,r22,16
8111cc60:	3084b03a 	or	r2,r6,r2
8111cc64:	00000206 	br	8111cc70 <__udivdi3+0x2a0>
8111cc68:	0007883a 	mov	r3,zero
8111cc6c:	0005883a 	mov	r2,zero
8111cc70:	dfc00a17 	ldw	ra,40(sp)
8111cc74:	df000917 	ldw	fp,36(sp)
8111cc78:	ddc00817 	ldw	r23,32(sp)
8111cc7c:	dd800717 	ldw	r22,28(sp)
8111cc80:	dd400617 	ldw	r21,24(sp)
8111cc84:	dd000517 	ldw	r20,20(sp)
8111cc88:	dcc00417 	ldw	r19,16(sp)
8111cc8c:	dc800317 	ldw	r18,12(sp)
8111cc90:	dc400217 	ldw	r17,8(sp)
8111cc94:	dc000117 	ldw	r16,4(sp)
8111cc98:	dec00b04 	addi	sp,sp,44
8111cc9c:	f800283a 	ret
8111cca0:	00803fc4 	movi	r2,255
8111cca4:	11c5803a 	cmpltu	r2,r2,r7
8111cca8:	100490fa 	slli	r2,r2,3
8111ccac:	003f9e06 	br	8111cb28 <__reset+0xfb0fcb28>
8111ccb0:	00803fc4 	movi	r2,255
8111ccb4:	1445803a 	cmpltu	r2,r2,r17
8111ccb8:	100490fa 	slli	r2,r2,3
8111ccbc:	003fb206 	br	8111cb88 <__reset+0xfb0fcb88>
8111ccc0:	00804034 	movhi	r2,256
8111ccc4:	10bfffc4 	addi	r2,r2,-1
8111ccc8:	11808836 	bltu	r2,r6,8111ceec <__udivdi3+0x51c>
8111cccc:	00800404 	movi	r2,16
8111ccd0:	003f5606 	br	8111ca2c <__reset+0xfb0fca2c>
8111ccd4:	30aed83a 	srl	r23,r6,r2
8111ccd8:	3d4e983a 	sll	r7,r7,r21
8111ccdc:	80acd83a 	srl	r22,r16,r2
8111cce0:	9884d83a 	srl	r2,r19,r2
8111cce4:	3deeb03a 	or	r23,r7,r23
8111cce8:	b824d43a 	srli	r18,r23,16
8111ccec:	8560983a 	sll	r16,r16,r21
8111ccf0:	b009883a 	mov	r4,r22
8111ccf4:	900b883a 	mov	r5,r18
8111ccf8:	3568983a 	sll	r20,r6,r21
8111ccfc:	1420b03a 	or	r16,r2,r16
8111cd00:	111d5dc0 	call	8111d5dc <__umodsi3>
8111cd04:	b009883a 	mov	r4,r22
8111cd08:	900b883a 	mov	r5,r18
8111cd0c:	1023883a 	mov	r17,r2
8111cd10:	111d5780 	call	8111d578 <__udivsi3>
8111cd14:	8808943a 	slli	r4,r17,16
8111cd18:	bf3fffcc 	andi	fp,r23,65535
8111cd1c:	8006d43a 	srli	r3,r16,16
8111cd20:	e0a3383a 	mul	r17,fp,r2
8111cd24:	100d883a 	mov	r6,r2
8111cd28:	1906b03a 	or	r3,r3,r4
8111cd2c:	1c40042e 	bgeu	r3,r17,8111cd40 <__udivdi3+0x370>
8111cd30:	1dc7883a 	add	r3,r3,r23
8111cd34:	10bfffc4 	addi	r2,r2,-1
8111cd38:	1dc0752e 	bgeu	r3,r23,8111cf10 <__udivdi3+0x540>
8111cd3c:	100d883a 	mov	r6,r2
8111cd40:	1c63c83a 	sub	r17,r3,r17
8111cd44:	900b883a 	mov	r5,r18
8111cd48:	8809883a 	mov	r4,r17
8111cd4c:	d9800015 	stw	r6,0(sp)
8111cd50:	111d5dc0 	call	8111d5dc <__umodsi3>
8111cd54:	102d883a 	mov	r22,r2
8111cd58:	8809883a 	mov	r4,r17
8111cd5c:	900b883a 	mov	r5,r18
8111cd60:	111d5780 	call	8111d578 <__udivsi3>
8111cd64:	b02c943a 	slli	r22,r22,16
8111cd68:	e089383a 	mul	r4,fp,r2
8111cd6c:	843fffcc 	andi	r16,r16,65535
8111cd70:	85a0b03a 	or	r16,r16,r22
8111cd74:	d9800017 	ldw	r6,0(sp)
8111cd78:	8100042e 	bgeu	r16,r4,8111cd8c <__udivdi3+0x3bc>
8111cd7c:	85e1883a 	add	r16,r16,r23
8111cd80:	10ffffc4 	addi	r3,r2,-1
8111cd84:	85c05e2e 	bgeu	r16,r23,8111cf00 <__udivdi3+0x530>
8111cd88:	1805883a 	mov	r2,r3
8111cd8c:	300c943a 	slli	r6,r6,16
8111cd90:	a17fffcc 	andi	r5,r20,65535
8111cd94:	a028d43a 	srli	r20,r20,16
8111cd98:	3084b03a 	or	r2,r6,r2
8111cd9c:	10ffffcc 	andi	r3,r2,65535
8111cda0:	100cd43a 	srli	r6,r2,16
8111cda4:	194f383a 	mul	r7,r3,r5
8111cda8:	1d07383a 	mul	r3,r3,r20
8111cdac:	314b383a 	mul	r5,r6,r5
8111cdb0:	3810d43a 	srli	r8,r7,16
8111cdb4:	8121c83a 	sub	r16,r16,r4
8111cdb8:	1947883a 	add	r3,r3,r5
8111cdbc:	40c7883a 	add	r3,r8,r3
8111cdc0:	350d383a 	mul	r6,r6,r20
8111cdc4:	1940022e 	bgeu	r3,r5,8111cdd0 <__udivdi3+0x400>
8111cdc8:	01000074 	movhi	r4,1
8111cdcc:	310d883a 	add	r6,r6,r4
8111cdd0:	1828d43a 	srli	r20,r3,16
8111cdd4:	a18d883a 	add	r6,r20,r6
8111cdd8:	81803e36 	bltu	r16,r6,8111ced4 <__udivdi3+0x504>
8111cddc:	81803826 	beq	r16,r6,8111cec0 <__udivdi3+0x4f0>
8111cde0:	0007883a 	mov	r3,zero
8111cde4:	003fa206 	br	8111cc70 <__reset+0xfb0fcc70>
8111cde8:	88e2983a 	sll	r17,r17,r3
8111cdec:	80a8d83a 	srl	r20,r16,r2
8111cdf0:	80e0983a 	sll	r16,r16,r3
8111cdf4:	882ad43a 	srli	r21,r17,16
8111cdf8:	9884d83a 	srl	r2,r19,r2
8111cdfc:	a009883a 	mov	r4,r20
8111ce00:	a80b883a 	mov	r5,r21
8111ce04:	142eb03a 	or	r23,r2,r16
8111ce08:	98e4983a 	sll	r18,r19,r3
8111ce0c:	111d5dc0 	call	8111d5dc <__umodsi3>
8111ce10:	a009883a 	mov	r4,r20
8111ce14:	a80b883a 	mov	r5,r21
8111ce18:	1021883a 	mov	r16,r2
8111ce1c:	111d5780 	call	8111d578 <__udivsi3>
8111ce20:	1039883a 	mov	fp,r2
8111ce24:	8d3fffcc 	andi	r20,r17,65535
8111ce28:	8020943a 	slli	r16,r16,16
8111ce2c:	b804d43a 	srli	r2,r23,16
8111ce30:	a72d383a 	mul	r22,r20,fp
8111ce34:	1404b03a 	or	r2,r2,r16
8111ce38:	1580062e 	bgeu	r2,r22,8111ce54 <__udivdi3+0x484>
8111ce3c:	1445883a 	add	r2,r2,r17
8111ce40:	e0ffffc4 	addi	r3,fp,-1
8111ce44:	14403836 	bltu	r2,r17,8111cf28 <__udivdi3+0x558>
8111ce48:	1580372e 	bgeu	r2,r22,8111cf28 <__udivdi3+0x558>
8111ce4c:	e73fff84 	addi	fp,fp,-2
8111ce50:	1445883a 	add	r2,r2,r17
8111ce54:	15adc83a 	sub	r22,r2,r22
8111ce58:	a80b883a 	mov	r5,r21
8111ce5c:	b009883a 	mov	r4,r22
8111ce60:	111d5dc0 	call	8111d5dc <__umodsi3>
8111ce64:	1027883a 	mov	r19,r2
8111ce68:	b009883a 	mov	r4,r22
8111ce6c:	a80b883a 	mov	r5,r21
8111ce70:	111d5780 	call	8111d578 <__udivsi3>
8111ce74:	9826943a 	slli	r19,r19,16
8111ce78:	a0a1383a 	mul	r16,r20,r2
8111ce7c:	b93fffcc 	andi	r4,r23,65535
8111ce80:	24c8b03a 	or	r4,r4,r19
8111ce84:	2400062e 	bgeu	r4,r16,8111cea0 <__udivdi3+0x4d0>
8111ce88:	2449883a 	add	r4,r4,r17
8111ce8c:	10ffffc4 	addi	r3,r2,-1
8111ce90:	24402336 	bltu	r4,r17,8111cf20 <__udivdi3+0x550>
8111ce94:	2400222e 	bgeu	r4,r16,8111cf20 <__udivdi3+0x550>
8111ce98:	10bfff84 	addi	r2,r2,-2
8111ce9c:	2449883a 	add	r4,r4,r17
8111cea0:	e038943a 	slli	fp,fp,16
8111cea4:	2421c83a 	sub	r16,r4,r16
8111cea8:	e086b03a 	or	r3,fp,r2
8111ceac:	003f4306 	br	8111cbbc <__reset+0xfb0fcbbc>
8111ceb0:	2005883a 	mov	r2,r4
8111ceb4:	003f6906 	br	8111cc5c <__reset+0xfb0fcc5c>
8111ceb8:	1805883a 	mov	r2,r3
8111cebc:	003f0f06 	br	8111cafc <__reset+0xfb0fcafc>
8111cec0:	1806943a 	slli	r3,r3,16
8111cec4:	9d66983a 	sll	r19,r19,r21
8111cec8:	39ffffcc 	andi	r7,r7,65535
8111cecc:	19c7883a 	add	r3,r3,r7
8111ced0:	98ffc32e 	bgeu	r19,r3,8111cde0 <__reset+0xfb0fcde0>
8111ced4:	10bfffc4 	addi	r2,r2,-1
8111ced8:	003fc106 	br	8111cde0 <__reset+0xfb0fcde0>
8111cedc:	00800604 	movi	r2,24
8111cee0:	003f1106 	br	8111cb28 <__reset+0xfb0fcb28>
8111cee4:	00800604 	movi	r2,24
8111cee8:	003f2706 	br	8111cb88 <__reset+0xfb0fcb88>
8111ceec:	00800604 	movi	r2,24
8111cef0:	003ece06 	br	8111ca2c <__reset+0xfb0fca2c>
8111cef4:	0007883a 	mov	r3,zero
8111cef8:	00800044 	movi	r2,1
8111cefc:	003f5c06 	br	8111cc70 <__reset+0xfb0fcc70>
8111cf00:	813fa12e 	bgeu	r16,r4,8111cd88 <__reset+0xfb0fcd88>
8111cf04:	10bfff84 	addi	r2,r2,-2
8111cf08:	85e1883a 	add	r16,r16,r23
8111cf0c:	003f9f06 	br	8111cd8c <__reset+0xfb0fcd8c>
8111cf10:	1c7f8a2e 	bgeu	r3,r17,8111cd3c <__reset+0xfb0fcd3c>
8111cf14:	31bfff84 	addi	r6,r6,-2
8111cf18:	1dc7883a 	add	r3,r3,r23
8111cf1c:	003f8806 	br	8111cd40 <__reset+0xfb0fcd40>
8111cf20:	1805883a 	mov	r2,r3
8111cf24:	003fde06 	br	8111cea0 <__reset+0xfb0fcea0>
8111cf28:	1839883a 	mov	fp,r3
8111cf2c:	003fc906 	br	8111ce54 <__reset+0xfb0fce54>
8111cf30:	b5bfff84 	addi	r22,r22,-2
8111cf34:	2449883a 	add	r4,r4,r17
8111cf38:	003f3406 	br	8111cc0c <__reset+0xfb0fcc0c>
8111cf3c:	b5bfff84 	addi	r22,r22,-2
8111cf40:	1445883a 	add	r2,r2,r17
8111cf44:	003edb06 	br	8111cab4 <__reset+0xfb0fcab4>

8111cf48 <__umoddi3>:
8111cf48:	defff404 	addi	sp,sp,-48
8111cf4c:	df000a15 	stw	fp,40(sp)
8111cf50:	dc400315 	stw	r17,12(sp)
8111cf54:	dc000215 	stw	r16,8(sp)
8111cf58:	dfc00b15 	stw	ra,44(sp)
8111cf5c:	ddc00915 	stw	r23,36(sp)
8111cf60:	dd800815 	stw	r22,32(sp)
8111cf64:	dd400715 	stw	r21,28(sp)
8111cf68:	dd000615 	stw	r20,24(sp)
8111cf6c:	dcc00515 	stw	r19,20(sp)
8111cf70:	dc800415 	stw	r18,16(sp)
8111cf74:	2021883a 	mov	r16,r4
8111cf78:	2823883a 	mov	r17,r5
8111cf7c:	2839883a 	mov	fp,r5
8111cf80:	38003c1e 	bne	r7,zero,8111d074 <__umoddi3+0x12c>
8111cf84:	3027883a 	mov	r19,r6
8111cf88:	2029883a 	mov	r20,r4
8111cf8c:	2980512e 	bgeu	r5,r6,8111d0d4 <__umoddi3+0x18c>
8111cf90:	00bfffd4 	movui	r2,65535
8111cf94:	11809a36 	bltu	r2,r6,8111d200 <__umoddi3+0x2b8>
8111cf98:	01003fc4 	movi	r4,255
8111cf9c:	2189803a 	cmpltu	r4,r4,r6
8111cfa0:	200890fa 	slli	r4,r4,3
8111cfa4:	3104d83a 	srl	r2,r6,r4
8111cfa8:	00e044f4 	movhi	r3,33043
8111cfac:	18cd8004 	addi	r3,r3,13824
8111cfb0:	1885883a 	add	r2,r3,r2
8111cfb4:	10c00003 	ldbu	r3,0(r2)
8111cfb8:	00800804 	movi	r2,32
8111cfbc:	1909883a 	add	r4,r3,r4
8111cfc0:	1125c83a 	sub	r18,r2,r4
8111cfc4:	90000526 	beq	r18,zero,8111cfdc <__umoddi3+0x94>
8111cfc8:	8ca2983a 	sll	r17,r17,r18
8111cfcc:	8108d83a 	srl	r4,r16,r4
8111cfd0:	34a6983a 	sll	r19,r6,r18
8111cfd4:	84a8983a 	sll	r20,r16,r18
8111cfd8:	2478b03a 	or	fp,r4,r17
8111cfdc:	982ed43a 	srli	r23,r19,16
8111cfe0:	e009883a 	mov	r4,fp
8111cfe4:	9dbfffcc 	andi	r22,r19,65535
8111cfe8:	b80b883a 	mov	r5,r23
8111cfec:	111d5dc0 	call	8111d5dc <__umodsi3>
8111cff0:	e009883a 	mov	r4,fp
8111cff4:	b80b883a 	mov	r5,r23
8111cff8:	102b883a 	mov	r21,r2
8111cffc:	111d5780 	call	8111d578 <__udivsi3>
8111d000:	a806943a 	slli	r3,r21,16
8111d004:	a008d43a 	srli	r4,r20,16
8111d008:	b085383a 	mul	r2,r22,r2
8111d00c:	20c8b03a 	or	r4,r4,r3
8111d010:	2080032e 	bgeu	r4,r2,8111d020 <__umoddi3+0xd8>
8111d014:	24c9883a 	add	r4,r4,r19
8111d018:	24c00136 	bltu	r4,r19,8111d020 <__umoddi3+0xd8>
8111d01c:	20811036 	bltu	r4,r2,8111d460 <__umoddi3+0x518>
8111d020:	20abc83a 	sub	r21,r4,r2
8111d024:	b80b883a 	mov	r5,r23
8111d028:	a809883a 	mov	r4,r21
8111d02c:	111d5dc0 	call	8111d5dc <__umodsi3>
8111d030:	1023883a 	mov	r17,r2
8111d034:	b80b883a 	mov	r5,r23
8111d038:	a809883a 	mov	r4,r21
8111d03c:	111d5780 	call	8111d578 <__udivsi3>
8111d040:	8822943a 	slli	r17,r17,16
8111d044:	b085383a 	mul	r2,r22,r2
8111d048:	a0ffffcc 	andi	r3,r20,65535
8111d04c:	1c46b03a 	or	r3,r3,r17
8111d050:	1880042e 	bgeu	r3,r2,8111d064 <__umoddi3+0x11c>
8111d054:	1cc7883a 	add	r3,r3,r19
8111d058:	1cc00236 	bltu	r3,r19,8111d064 <__umoddi3+0x11c>
8111d05c:	1880012e 	bgeu	r3,r2,8111d064 <__umoddi3+0x11c>
8111d060:	1cc7883a 	add	r3,r3,r19
8111d064:	1885c83a 	sub	r2,r3,r2
8111d068:	1484d83a 	srl	r2,r2,r18
8111d06c:	0007883a 	mov	r3,zero
8111d070:	00004f06 	br	8111d1b0 <__umoddi3+0x268>
8111d074:	29c04c36 	bltu	r5,r7,8111d1a8 <__umoddi3+0x260>
8111d078:	00bfffd4 	movui	r2,65535
8111d07c:	11c0582e 	bgeu	r2,r7,8111d1e0 <__umoddi3+0x298>
8111d080:	00804034 	movhi	r2,256
8111d084:	10bfffc4 	addi	r2,r2,-1
8111d088:	11c0e736 	bltu	r2,r7,8111d428 <__umoddi3+0x4e0>
8111d08c:	01000404 	movi	r4,16
8111d090:	3904d83a 	srl	r2,r7,r4
8111d094:	00e044f4 	movhi	r3,33043
8111d098:	18cd8004 	addi	r3,r3,13824
8111d09c:	1885883a 	add	r2,r3,r2
8111d0a0:	14c00003 	ldbu	r19,0(r2)
8111d0a4:	00c00804 	movi	r3,32
8111d0a8:	9927883a 	add	r19,r19,r4
8111d0ac:	1ce9c83a 	sub	r20,r3,r19
8111d0b0:	a000581e 	bne	r20,zero,8111d214 <__umoddi3+0x2cc>
8111d0b4:	3c400136 	bltu	r7,r17,8111d0bc <__umoddi3+0x174>
8111d0b8:	8180eb36 	bltu	r16,r6,8111d468 <__umoddi3+0x520>
8111d0bc:	8185c83a 	sub	r2,r16,r6
8111d0c0:	89e3c83a 	sub	r17,r17,r7
8111d0c4:	8089803a 	cmpltu	r4,r16,r2
8111d0c8:	8939c83a 	sub	fp,r17,r4
8111d0cc:	e007883a 	mov	r3,fp
8111d0d0:	00003706 	br	8111d1b0 <__umoddi3+0x268>
8111d0d4:	3000041e 	bne	r6,zero,8111d0e8 <__umoddi3+0x1a0>
8111d0d8:	000b883a 	mov	r5,zero
8111d0dc:	01000044 	movi	r4,1
8111d0e0:	111d5780 	call	8111d578 <__udivsi3>
8111d0e4:	1027883a 	mov	r19,r2
8111d0e8:	00bfffd4 	movui	r2,65535
8111d0ec:	14c0402e 	bgeu	r2,r19,8111d1f0 <__umoddi3+0x2a8>
8111d0f0:	00804034 	movhi	r2,256
8111d0f4:	10bfffc4 	addi	r2,r2,-1
8111d0f8:	14c0cd36 	bltu	r2,r19,8111d430 <__umoddi3+0x4e8>
8111d0fc:	00800404 	movi	r2,16
8111d100:	9886d83a 	srl	r3,r19,r2
8111d104:	012044f4 	movhi	r4,33043
8111d108:	210d8004 	addi	r4,r4,13824
8111d10c:	20c7883a 	add	r3,r4,r3
8111d110:	18c00003 	ldbu	r3,0(r3)
8111d114:	1887883a 	add	r3,r3,r2
8111d118:	00800804 	movi	r2,32
8111d11c:	10e5c83a 	sub	r18,r2,r3
8111d120:	9000901e 	bne	r18,zero,8111d364 <__umoddi3+0x41c>
8111d124:	982cd43a 	srli	r22,r19,16
8111d128:	8ce3c83a 	sub	r17,r17,r19
8111d12c:	9d7fffcc 	andi	r21,r19,65535
8111d130:	b00b883a 	mov	r5,r22
8111d134:	8809883a 	mov	r4,r17
8111d138:	111d5dc0 	call	8111d5dc <__umodsi3>
8111d13c:	8809883a 	mov	r4,r17
8111d140:	b00b883a 	mov	r5,r22
8111d144:	1021883a 	mov	r16,r2
8111d148:	111d5780 	call	8111d578 <__udivsi3>
8111d14c:	8006943a 	slli	r3,r16,16
8111d150:	a008d43a 	srli	r4,r20,16
8111d154:	1545383a 	mul	r2,r2,r21
8111d158:	20c8b03a 	or	r4,r4,r3
8111d15c:	2080042e 	bgeu	r4,r2,8111d170 <__umoddi3+0x228>
8111d160:	24c9883a 	add	r4,r4,r19
8111d164:	24c00236 	bltu	r4,r19,8111d170 <__umoddi3+0x228>
8111d168:	2080012e 	bgeu	r4,r2,8111d170 <__umoddi3+0x228>
8111d16c:	24c9883a 	add	r4,r4,r19
8111d170:	20a1c83a 	sub	r16,r4,r2
8111d174:	b00b883a 	mov	r5,r22
8111d178:	8009883a 	mov	r4,r16
8111d17c:	111d5dc0 	call	8111d5dc <__umodsi3>
8111d180:	1023883a 	mov	r17,r2
8111d184:	b00b883a 	mov	r5,r22
8111d188:	8009883a 	mov	r4,r16
8111d18c:	111d5780 	call	8111d578 <__udivsi3>
8111d190:	8822943a 	slli	r17,r17,16
8111d194:	1545383a 	mul	r2,r2,r21
8111d198:	a53fffcc 	andi	r20,r20,65535
8111d19c:	a446b03a 	or	r3,r20,r17
8111d1a0:	18bfb02e 	bgeu	r3,r2,8111d064 <__reset+0xfb0fd064>
8111d1a4:	003fab06 	br	8111d054 <__reset+0xfb0fd054>
8111d1a8:	2005883a 	mov	r2,r4
8111d1ac:	2807883a 	mov	r3,r5
8111d1b0:	dfc00b17 	ldw	ra,44(sp)
8111d1b4:	df000a17 	ldw	fp,40(sp)
8111d1b8:	ddc00917 	ldw	r23,36(sp)
8111d1bc:	dd800817 	ldw	r22,32(sp)
8111d1c0:	dd400717 	ldw	r21,28(sp)
8111d1c4:	dd000617 	ldw	r20,24(sp)
8111d1c8:	dcc00517 	ldw	r19,20(sp)
8111d1cc:	dc800417 	ldw	r18,16(sp)
8111d1d0:	dc400317 	ldw	r17,12(sp)
8111d1d4:	dc000217 	ldw	r16,8(sp)
8111d1d8:	dec00c04 	addi	sp,sp,48
8111d1dc:	f800283a 	ret
8111d1e0:	04c03fc4 	movi	r19,255
8111d1e4:	99c9803a 	cmpltu	r4,r19,r7
8111d1e8:	200890fa 	slli	r4,r4,3
8111d1ec:	003fa806 	br	8111d090 <__reset+0xfb0fd090>
8111d1f0:	00803fc4 	movi	r2,255
8111d1f4:	14c5803a 	cmpltu	r2,r2,r19
8111d1f8:	100490fa 	slli	r2,r2,3
8111d1fc:	003fc006 	br	8111d100 <__reset+0xfb0fd100>
8111d200:	00804034 	movhi	r2,256
8111d204:	10bfffc4 	addi	r2,r2,-1
8111d208:	11808b36 	bltu	r2,r6,8111d438 <__umoddi3+0x4f0>
8111d20c:	01000404 	movi	r4,16
8111d210:	003f6406 	br	8111cfa4 <__reset+0xfb0fcfa4>
8111d214:	34c4d83a 	srl	r2,r6,r19
8111d218:	3d0e983a 	sll	r7,r7,r20
8111d21c:	8cf8d83a 	srl	fp,r17,r19
8111d220:	8d10983a 	sll	r8,r17,r20
8111d224:	38aab03a 	or	r21,r7,r2
8111d228:	a82cd43a 	srli	r22,r21,16
8111d22c:	84e2d83a 	srl	r17,r16,r19
8111d230:	e009883a 	mov	r4,fp
8111d234:	b00b883a 	mov	r5,r22
8111d238:	8a22b03a 	or	r17,r17,r8
8111d23c:	3524983a 	sll	r18,r6,r20
8111d240:	111d5dc0 	call	8111d5dc <__umodsi3>
8111d244:	e009883a 	mov	r4,fp
8111d248:	b00b883a 	mov	r5,r22
8111d24c:	102f883a 	mov	r23,r2
8111d250:	111d5780 	call	8111d578 <__udivsi3>
8111d254:	100d883a 	mov	r6,r2
8111d258:	b808943a 	slli	r4,r23,16
8111d25c:	aa3fffcc 	andi	r8,r21,65535
8111d260:	8804d43a 	srli	r2,r17,16
8111d264:	41af383a 	mul	r23,r8,r6
8111d268:	8520983a 	sll	r16,r16,r20
8111d26c:	1104b03a 	or	r2,r2,r4
8111d270:	15c0042e 	bgeu	r2,r23,8111d284 <__umoddi3+0x33c>
8111d274:	1545883a 	add	r2,r2,r21
8111d278:	30ffffc4 	addi	r3,r6,-1
8111d27c:	1540742e 	bgeu	r2,r21,8111d450 <__umoddi3+0x508>
8111d280:	180d883a 	mov	r6,r3
8111d284:	15efc83a 	sub	r23,r2,r23
8111d288:	b00b883a 	mov	r5,r22
8111d28c:	b809883a 	mov	r4,r23
8111d290:	d9800115 	stw	r6,4(sp)
8111d294:	da000015 	stw	r8,0(sp)
8111d298:	111d5dc0 	call	8111d5dc <__umodsi3>
8111d29c:	b00b883a 	mov	r5,r22
8111d2a0:	b809883a 	mov	r4,r23
8111d2a4:	1039883a 	mov	fp,r2
8111d2a8:	111d5780 	call	8111d578 <__udivsi3>
8111d2ac:	da000017 	ldw	r8,0(sp)
8111d2b0:	e038943a 	slli	fp,fp,16
8111d2b4:	100b883a 	mov	r5,r2
8111d2b8:	4089383a 	mul	r4,r8,r2
8111d2bc:	8a3fffcc 	andi	r8,r17,65535
8111d2c0:	4710b03a 	or	r8,r8,fp
8111d2c4:	d9800117 	ldw	r6,4(sp)
8111d2c8:	4100042e 	bgeu	r8,r4,8111d2dc <__umoddi3+0x394>
8111d2cc:	4551883a 	add	r8,r8,r21
8111d2d0:	10bfffc4 	addi	r2,r2,-1
8111d2d4:	45405a2e 	bgeu	r8,r21,8111d440 <__umoddi3+0x4f8>
8111d2d8:	100b883a 	mov	r5,r2
8111d2dc:	300c943a 	slli	r6,r6,16
8111d2e0:	91ffffcc 	andi	r7,r18,65535
8111d2e4:	9004d43a 	srli	r2,r18,16
8111d2e8:	314cb03a 	or	r6,r6,r5
8111d2ec:	317fffcc 	andi	r5,r6,65535
8111d2f0:	300cd43a 	srli	r6,r6,16
8111d2f4:	29d3383a 	mul	r9,r5,r7
8111d2f8:	288b383a 	mul	r5,r5,r2
8111d2fc:	31cf383a 	mul	r7,r6,r7
8111d300:	4806d43a 	srli	r3,r9,16
8111d304:	4111c83a 	sub	r8,r8,r4
8111d308:	29cb883a 	add	r5,r5,r7
8111d30c:	194b883a 	add	r5,r3,r5
8111d310:	3085383a 	mul	r2,r6,r2
8111d314:	29c0022e 	bgeu	r5,r7,8111d320 <__umoddi3+0x3d8>
8111d318:	00c00074 	movhi	r3,1
8111d31c:	10c5883a 	add	r2,r2,r3
8111d320:	2808d43a 	srli	r4,r5,16
8111d324:	280a943a 	slli	r5,r5,16
8111d328:	4a7fffcc 	andi	r9,r9,65535
8111d32c:	2085883a 	add	r2,r4,r2
8111d330:	2a4b883a 	add	r5,r5,r9
8111d334:	40803636 	bltu	r8,r2,8111d410 <__umoddi3+0x4c8>
8111d338:	40804d26 	beq	r8,r2,8111d470 <__umoddi3+0x528>
8111d33c:	4089c83a 	sub	r4,r8,r2
8111d340:	280f883a 	mov	r7,r5
8111d344:	81cfc83a 	sub	r7,r16,r7
8111d348:	81c7803a 	cmpltu	r3,r16,r7
8111d34c:	20c7c83a 	sub	r3,r4,r3
8111d350:	1cc4983a 	sll	r2,r3,r19
8111d354:	3d0ed83a 	srl	r7,r7,r20
8111d358:	1d06d83a 	srl	r3,r3,r20
8111d35c:	11c4b03a 	or	r2,r2,r7
8111d360:	003f9306 	br	8111d1b0 <__reset+0xfb0fd1b0>
8111d364:	9ca6983a 	sll	r19,r19,r18
8111d368:	88e8d83a 	srl	r20,r17,r3
8111d36c:	80c4d83a 	srl	r2,r16,r3
8111d370:	982cd43a 	srli	r22,r19,16
8111d374:	8ca2983a 	sll	r17,r17,r18
8111d378:	a009883a 	mov	r4,r20
8111d37c:	b00b883a 	mov	r5,r22
8111d380:	1478b03a 	or	fp,r2,r17
8111d384:	111d5dc0 	call	8111d5dc <__umodsi3>
8111d388:	a009883a 	mov	r4,r20
8111d38c:	b00b883a 	mov	r5,r22
8111d390:	1023883a 	mov	r17,r2
8111d394:	111d5780 	call	8111d578 <__udivsi3>
8111d398:	9d7fffcc 	andi	r21,r19,65535
8111d39c:	880a943a 	slli	r5,r17,16
8111d3a0:	e008d43a 	srli	r4,fp,16
8111d3a4:	a885383a 	mul	r2,r21,r2
8111d3a8:	84a8983a 	sll	r20,r16,r18
8111d3ac:	2148b03a 	or	r4,r4,r5
8111d3b0:	2080042e 	bgeu	r4,r2,8111d3c4 <__umoddi3+0x47c>
8111d3b4:	24c9883a 	add	r4,r4,r19
8111d3b8:	24c00236 	bltu	r4,r19,8111d3c4 <__umoddi3+0x47c>
8111d3bc:	2080012e 	bgeu	r4,r2,8111d3c4 <__umoddi3+0x47c>
8111d3c0:	24c9883a 	add	r4,r4,r19
8111d3c4:	20a3c83a 	sub	r17,r4,r2
8111d3c8:	b00b883a 	mov	r5,r22
8111d3cc:	8809883a 	mov	r4,r17
8111d3d0:	111d5dc0 	call	8111d5dc <__umodsi3>
8111d3d4:	102f883a 	mov	r23,r2
8111d3d8:	8809883a 	mov	r4,r17
8111d3dc:	b00b883a 	mov	r5,r22
8111d3e0:	111d5780 	call	8111d578 <__udivsi3>
8111d3e4:	b82e943a 	slli	r23,r23,16
8111d3e8:	a885383a 	mul	r2,r21,r2
8111d3ec:	e13fffcc 	andi	r4,fp,65535
8111d3f0:	25c8b03a 	or	r4,r4,r23
8111d3f4:	2080042e 	bgeu	r4,r2,8111d408 <__umoddi3+0x4c0>
8111d3f8:	24c9883a 	add	r4,r4,r19
8111d3fc:	24c00236 	bltu	r4,r19,8111d408 <__umoddi3+0x4c0>
8111d400:	2080012e 	bgeu	r4,r2,8111d408 <__umoddi3+0x4c0>
8111d404:	24c9883a 	add	r4,r4,r19
8111d408:	20a3c83a 	sub	r17,r4,r2
8111d40c:	003f4806 	br	8111d130 <__reset+0xfb0fd130>
8111d410:	2c8fc83a 	sub	r7,r5,r18
8111d414:	1545c83a 	sub	r2,r2,r21
8111d418:	29cb803a 	cmpltu	r5,r5,r7
8111d41c:	1145c83a 	sub	r2,r2,r5
8111d420:	4089c83a 	sub	r4,r8,r2
8111d424:	003fc706 	br	8111d344 <__reset+0xfb0fd344>
8111d428:	01000604 	movi	r4,24
8111d42c:	003f1806 	br	8111d090 <__reset+0xfb0fd090>
8111d430:	00800604 	movi	r2,24
8111d434:	003f3206 	br	8111d100 <__reset+0xfb0fd100>
8111d438:	01000604 	movi	r4,24
8111d43c:	003ed906 	br	8111cfa4 <__reset+0xfb0fcfa4>
8111d440:	413fa52e 	bgeu	r8,r4,8111d2d8 <__reset+0xfb0fd2d8>
8111d444:	297fff84 	addi	r5,r5,-2
8111d448:	4551883a 	add	r8,r8,r21
8111d44c:	003fa306 	br	8111d2dc <__reset+0xfb0fd2dc>
8111d450:	15ff8b2e 	bgeu	r2,r23,8111d280 <__reset+0xfb0fd280>
8111d454:	31bfff84 	addi	r6,r6,-2
8111d458:	1545883a 	add	r2,r2,r21
8111d45c:	003f8906 	br	8111d284 <__reset+0xfb0fd284>
8111d460:	24c9883a 	add	r4,r4,r19
8111d464:	003eee06 	br	8111d020 <__reset+0xfb0fd020>
8111d468:	8005883a 	mov	r2,r16
8111d46c:	003f1706 	br	8111d0cc <__reset+0xfb0fd0cc>
8111d470:	817fe736 	bltu	r16,r5,8111d410 <__reset+0xfb0fd410>
8111d474:	280f883a 	mov	r7,r5
8111d478:	0009883a 	mov	r4,zero
8111d47c:	003fb106 	br	8111d344 <__reset+0xfb0fd344>

8111d480 <__divsi3>:
8111d480:	20001b16 	blt	r4,zero,8111d4f0 <__divsi3+0x70>
8111d484:	000f883a 	mov	r7,zero
8111d488:	28001616 	blt	r5,zero,8111d4e4 <__divsi3+0x64>
8111d48c:	200d883a 	mov	r6,r4
8111d490:	29001a2e 	bgeu	r5,r4,8111d4fc <__divsi3+0x7c>
8111d494:	00800804 	movi	r2,32
8111d498:	00c00044 	movi	r3,1
8111d49c:	00000106 	br	8111d4a4 <__divsi3+0x24>
8111d4a0:	10000d26 	beq	r2,zero,8111d4d8 <__divsi3+0x58>
8111d4a4:	294b883a 	add	r5,r5,r5
8111d4a8:	10bfffc4 	addi	r2,r2,-1
8111d4ac:	18c7883a 	add	r3,r3,r3
8111d4b0:	293ffb36 	bltu	r5,r4,8111d4a0 <__reset+0xfb0fd4a0>
8111d4b4:	0005883a 	mov	r2,zero
8111d4b8:	18000726 	beq	r3,zero,8111d4d8 <__divsi3+0x58>
8111d4bc:	0005883a 	mov	r2,zero
8111d4c0:	31400236 	bltu	r6,r5,8111d4cc <__divsi3+0x4c>
8111d4c4:	314dc83a 	sub	r6,r6,r5
8111d4c8:	10c4b03a 	or	r2,r2,r3
8111d4cc:	1806d07a 	srli	r3,r3,1
8111d4d0:	280ad07a 	srli	r5,r5,1
8111d4d4:	183ffa1e 	bne	r3,zero,8111d4c0 <__reset+0xfb0fd4c0>
8111d4d8:	38000126 	beq	r7,zero,8111d4e0 <__divsi3+0x60>
8111d4dc:	0085c83a 	sub	r2,zero,r2
8111d4e0:	f800283a 	ret
8111d4e4:	014bc83a 	sub	r5,zero,r5
8111d4e8:	39c0005c 	xori	r7,r7,1
8111d4ec:	003fe706 	br	8111d48c <__reset+0xfb0fd48c>
8111d4f0:	0109c83a 	sub	r4,zero,r4
8111d4f4:	01c00044 	movi	r7,1
8111d4f8:	003fe306 	br	8111d488 <__reset+0xfb0fd488>
8111d4fc:	00c00044 	movi	r3,1
8111d500:	003fee06 	br	8111d4bc <__reset+0xfb0fd4bc>

8111d504 <__modsi3>:
8111d504:	20001716 	blt	r4,zero,8111d564 <__modsi3+0x60>
8111d508:	000f883a 	mov	r7,zero
8111d50c:	2005883a 	mov	r2,r4
8111d510:	28001216 	blt	r5,zero,8111d55c <__modsi3+0x58>
8111d514:	2900162e 	bgeu	r5,r4,8111d570 <__modsi3+0x6c>
8111d518:	01800804 	movi	r6,32
8111d51c:	00c00044 	movi	r3,1
8111d520:	00000106 	br	8111d528 <__modsi3+0x24>
8111d524:	30000a26 	beq	r6,zero,8111d550 <__modsi3+0x4c>
8111d528:	294b883a 	add	r5,r5,r5
8111d52c:	31bfffc4 	addi	r6,r6,-1
8111d530:	18c7883a 	add	r3,r3,r3
8111d534:	293ffb36 	bltu	r5,r4,8111d524 <__reset+0xfb0fd524>
8111d538:	18000526 	beq	r3,zero,8111d550 <__modsi3+0x4c>
8111d53c:	1806d07a 	srli	r3,r3,1
8111d540:	11400136 	bltu	r2,r5,8111d548 <__modsi3+0x44>
8111d544:	1145c83a 	sub	r2,r2,r5
8111d548:	280ad07a 	srli	r5,r5,1
8111d54c:	183ffb1e 	bne	r3,zero,8111d53c <__reset+0xfb0fd53c>
8111d550:	38000126 	beq	r7,zero,8111d558 <__modsi3+0x54>
8111d554:	0085c83a 	sub	r2,zero,r2
8111d558:	f800283a 	ret
8111d55c:	014bc83a 	sub	r5,zero,r5
8111d560:	003fec06 	br	8111d514 <__reset+0xfb0fd514>
8111d564:	0109c83a 	sub	r4,zero,r4
8111d568:	01c00044 	movi	r7,1
8111d56c:	003fe706 	br	8111d50c <__reset+0xfb0fd50c>
8111d570:	00c00044 	movi	r3,1
8111d574:	003ff106 	br	8111d53c <__reset+0xfb0fd53c>

8111d578 <__udivsi3>:
8111d578:	200d883a 	mov	r6,r4
8111d57c:	2900152e 	bgeu	r5,r4,8111d5d4 <__udivsi3+0x5c>
8111d580:	28001416 	blt	r5,zero,8111d5d4 <__udivsi3+0x5c>
8111d584:	00800804 	movi	r2,32
8111d588:	00c00044 	movi	r3,1
8111d58c:	00000206 	br	8111d598 <__udivsi3+0x20>
8111d590:	10000e26 	beq	r2,zero,8111d5cc <__udivsi3+0x54>
8111d594:	28000516 	blt	r5,zero,8111d5ac <__udivsi3+0x34>
8111d598:	294b883a 	add	r5,r5,r5
8111d59c:	10bfffc4 	addi	r2,r2,-1
8111d5a0:	18c7883a 	add	r3,r3,r3
8111d5a4:	293ffa36 	bltu	r5,r4,8111d590 <__reset+0xfb0fd590>
8111d5a8:	18000826 	beq	r3,zero,8111d5cc <__udivsi3+0x54>
8111d5ac:	0005883a 	mov	r2,zero
8111d5b0:	31400236 	bltu	r6,r5,8111d5bc <__udivsi3+0x44>
8111d5b4:	314dc83a 	sub	r6,r6,r5
8111d5b8:	10c4b03a 	or	r2,r2,r3
8111d5bc:	1806d07a 	srli	r3,r3,1
8111d5c0:	280ad07a 	srli	r5,r5,1
8111d5c4:	183ffa1e 	bne	r3,zero,8111d5b0 <__reset+0xfb0fd5b0>
8111d5c8:	f800283a 	ret
8111d5cc:	0005883a 	mov	r2,zero
8111d5d0:	f800283a 	ret
8111d5d4:	00c00044 	movi	r3,1
8111d5d8:	003ff406 	br	8111d5ac <__reset+0xfb0fd5ac>

8111d5dc <__umodsi3>:
8111d5dc:	2005883a 	mov	r2,r4
8111d5e0:	2900122e 	bgeu	r5,r4,8111d62c <__umodsi3+0x50>
8111d5e4:	28001116 	blt	r5,zero,8111d62c <__umodsi3+0x50>
8111d5e8:	01800804 	movi	r6,32
8111d5ec:	00c00044 	movi	r3,1
8111d5f0:	00000206 	br	8111d5fc <__umodsi3+0x20>
8111d5f4:	30000c26 	beq	r6,zero,8111d628 <__umodsi3+0x4c>
8111d5f8:	28000516 	blt	r5,zero,8111d610 <__umodsi3+0x34>
8111d5fc:	294b883a 	add	r5,r5,r5
8111d600:	31bfffc4 	addi	r6,r6,-1
8111d604:	18c7883a 	add	r3,r3,r3
8111d608:	293ffa36 	bltu	r5,r4,8111d5f4 <__reset+0xfb0fd5f4>
8111d60c:	18000626 	beq	r3,zero,8111d628 <__umodsi3+0x4c>
8111d610:	1806d07a 	srli	r3,r3,1
8111d614:	11400136 	bltu	r2,r5,8111d61c <__umodsi3+0x40>
8111d618:	1145c83a 	sub	r2,r2,r5
8111d61c:	280ad07a 	srli	r5,r5,1
8111d620:	183ffb1e 	bne	r3,zero,8111d610 <__reset+0xfb0fd610>
8111d624:	f800283a 	ret
8111d628:	f800283a 	ret
8111d62c:	00c00044 	movi	r3,1
8111d630:	003ff706 	br	8111d610 <__reset+0xfb0fd610>

8111d634 <__eqsf2>:
8111d634:	2006d5fa 	srli	r3,r4,23
8111d638:	280cd5fa 	srli	r6,r5,23
8111d63c:	01c02034 	movhi	r7,128
8111d640:	39ffffc4 	addi	r7,r7,-1
8111d644:	18c03fcc 	andi	r3,r3,255
8111d648:	02003fc4 	movi	r8,255
8111d64c:	3904703a 	and	r2,r7,r4
8111d650:	31803fcc 	andi	r6,r6,255
8111d654:	394e703a 	and	r7,r7,r5
8111d658:	2008d7fa 	srli	r4,r4,31
8111d65c:	280ad7fa 	srli	r5,r5,31
8111d660:	1a000d26 	beq	r3,r8,8111d698 <__eqsf2+0x64>
8111d664:	02003fc4 	movi	r8,255
8111d668:	32000826 	beq	r6,r8,8111d68c <__eqsf2+0x58>
8111d66c:	19800226 	beq	r3,r6,8111d678 <__eqsf2+0x44>
8111d670:	00800044 	movi	r2,1
8111d674:	f800283a 	ret
8111d678:	11fffd1e 	bne	r2,r7,8111d670 <__reset+0xfb0fd670>
8111d67c:	21400926 	beq	r4,r5,8111d6a4 <__eqsf2+0x70>
8111d680:	183ffb1e 	bne	r3,zero,8111d670 <__reset+0xfb0fd670>
8111d684:	1004c03a 	cmpne	r2,r2,zero
8111d688:	f800283a 	ret
8111d68c:	383ff726 	beq	r7,zero,8111d66c <__reset+0xfb0fd66c>
8111d690:	00800044 	movi	r2,1
8111d694:	f800283a 	ret
8111d698:	103ff226 	beq	r2,zero,8111d664 <__reset+0xfb0fd664>
8111d69c:	00800044 	movi	r2,1
8111d6a0:	f800283a 	ret
8111d6a4:	0005883a 	mov	r2,zero
8111d6a8:	f800283a 	ret

8111d6ac <__gesf2>:
8111d6ac:	2004d5fa 	srli	r2,r4,23
8111d6b0:	2806d5fa 	srli	r3,r5,23
8111d6b4:	01802034 	movhi	r6,128
8111d6b8:	31bfffc4 	addi	r6,r6,-1
8111d6bc:	10803fcc 	andi	r2,r2,255
8111d6c0:	01c03fc4 	movi	r7,255
8111d6c4:	3110703a 	and	r8,r6,r4
8111d6c8:	18c03fcc 	andi	r3,r3,255
8111d6cc:	314c703a 	and	r6,r6,r5
8111d6d0:	2008d7fa 	srli	r4,r4,31
8111d6d4:	280ad7fa 	srli	r5,r5,31
8111d6d8:	11c01926 	beq	r2,r7,8111d740 <__gesf2+0x94>
8111d6dc:	01c03fc4 	movi	r7,255
8111d6e0:	19c00f26 	beq	r3,r7,8111d720 <__gesf2+0x74>
8111d6e4:	1000061e 	bne	r2,zero,8111d700 <__gesf2+0x54>
8111d6e8:	400f003a 	cmpeq	r7,r8,zero
8111d6ec:	1800071e 	bne	r3,zero,8111d70c <__gesf2+0x60>
8111d6f0:	3000061e 	bne	r6,zero,8111d70c <__gesf2+0x60>
8111d6f4:	0005883a 	mov	r2,zero
8111d6f8:	40000e1e 	bne	r8,zero,8111d734 <__gesf2+0x88>
8111d6fc:	f800283a 	ret
8111d700:	18000a1e 	bne	r3,zero,8111d72c <__gesf2+0x80>
8111d704:	30000b26 	beq	r6,zero,8111d734 <__gesf2+0x88>
8111d708:	000f883a 	mov	r7,zero
8111d70c:	29403fcc 	andi	r5,r5,255
8111d710:	38000726 	beq	r7,zero,8111d730 <__gesf2+0x84>
8111d714:	28000826 	beq	r5,zero,8111d738 <__gesf2+0x8c>
8111d718:	00800044 	movi	r2,1
8111d71c:	f800283a 	ret
8111d720:	303ff026 	beq	r6,zero,8111d6e4 <__reset+0xfb0fd6e4>
8111d724:	00bfff84 	movi	r2,-2
8111d728:	f800283a 	ret
8111d72c:	29403fcc 	andi	r5,r5,255
8111d730:	21400526 	beq	r4,r5,8111d748 <__gesf2+0x9c>
8111d734:	203ff826 	beq	r4,zero,8111d718 <__reset+0xfb0fd718>
8111d738:	00bfffc4 	movi	r2,-1
8111d73c:	f800283a 	ret
8111d740:	403fe626 	beq	r8,zero,8111d6dc <__reset+0xfb0fd6dc>
8111d744:	003ff706 	br	8111d724 <__reset+0xfb0fd724>
8111d748:	18bffa16 	blt	r3,r2,8111d734 <__reset+0xfb0fd734>
8111d74c:	10c00216 	blt	r2,r3,8111d758 <__gesf2+0xac>
8111d750:	323ff836 	bltu	r6,r8,8111d734 <__reset+0xfb0fd734>
8111d754:	4180022e 	bgeu	r8,r6,8111d760 <__gesf2+0xb4>
8111d758:	203fef1e 	bne	r4,zero,8111d718 <__reset+0xfb0fd718>
8111d75c:	003ff606 	br	8111d738 <__reset+0xfb0fd738>
8111d760:	0005883a 	mov	r2,zero
8111d764:	f800283a 	ret

8111d768 <__lesf2>:
8111d768:	2004d5fa 	srli	r2,r4,23
8111d76c:	280cd5fa 	srli	r6,r5,23
8111d770:	00c02034 	movhi	r3,128
8111d774:	18ffffc4 	addi	r3,r3,-1
8111d778:	10803fcc 	andi	r2,r2,255
8111d77c:	01c03fc4 	movi	r7,255
8111d780:	1910703a 	and	r8,r3,r4
8111d784:	31803fcc 	andi	r6,r6,255
8111d788:	1946703a 	and	r3,r3,r5
8111d78c:	2008d7fa 	srli	r4,r4,31
8111d790:	280ad7fa 	srli	r5,r5,31
8111d794:	11c01b26 	beq	r2,r7,8111d804 <__lesf2+0x9c>
8111d798:	01c03fc4 	movi	r7,255
8111d79c:	31c01126 	beq	r6,r7,8111d7e4 <__lesf2+0x7c>
8111d7a0:	1000071e 	bne	r2,zero,8111d7c0 <__lesf2+0x58>
8111d7a4:	400f003a 	cmpeq	r7,r8,zero
8111d7a8:	21003fcc 	andi	r4,r4,255
8111d7ac:	3000081e 	bne	r6,zero,8111d7d0 <__lesf2+0x68>
8111d7b0:	1800071e 	bne	r3,zero,8111d7d0 <__lesf2+0x68>
8111d7b4:	0005883a 	mov	r2,zero
8111d7b8:	40000f1e 	bne	r8,zero,8111d7f8 <__lesf2+0x90>
8111d7bc:	f800283a 	ret
8111d7c0:	21003fcc 	andi	r4,r4,255
8111d7c4:	30000a1e 	bne	r6,zero,8111d7f0 <__lesf2+0x88>
8111d7c8:	18000b26 	beq	r3,zero,8111d7f8 <__lesf2+0x90>
8111d7cc:	000f883a 	mov	r7,zero
8111d7d0:	29403fcc 	andi	r5,r5,255
8111d7d4:	38000726 	beq	r7,zero,8111d7f4 <__lesf2+0x8c>
8111d7d8:	28000826 	beq	r5,zero,8111d7fc <__lesf2+0x94>
8111d7dc:	00800044 	movi	r2,1
8111d7e0:	f800283a 	ret
8111d7e4:	183fee26 	beq	r3,zero,8111d7a0 <__reset+0xfb0fd7a0>
8111d7e8:	00800084 	movi	r2,2
8111d7ec:	f800283a 	ret
8111d7f0:	29403fcc 	andi	r5,r5,255
8111d7f4:	21400626 	beq	r4,r5,8111d810 <__lesf2+0xa8>
8111d7f8:	203ff826 	beq	r4,zero,8111d7dc <__reset+0xfb0fd7dc>
8111d7fc:	00bfffc4 	movi	r2,-1
8111d800:	f800283a 	ret
8111d804:	403fe426 	beq	r8,zero,8111d798 <__reset+0xfb0fd798>
8111d808:	00800084 	movi	r2,2
8111d80c:	f800283a 	ret
8111d810:	30bff916 	blt	r6,r2,8111d7f8 <__reset+0xfb0fd7f8>
8111d814:	11800216 	blt	r2,r6,8111d820 <__lesf2+0xb8>
8111d818:	1a3ff736 	bltu	r3,r8,8111d7f8 <__reset+0xfb0fd7f8>
8111d81c:	40c0022e 	bgeu	r8,r3,8111d828 <__lesf2+0xc0>
8111d820:	203fee1e 	bne	r4,zero,8111d7dc <__reset+0xfb0fd7dc>
8111d824:	003ff506 	br	8111d7fc <__reset+0xfb0fd7fc>
8111d828:	0005883a 	mov	r2,zero
8111d82c:	f800283a 	ret

8111d830 <__adddf3>:
8111d830:	02c00434 	movhi	r11,16
8111d834:	5affffc4 	addi	r11,r11,-1
8111d838:	2806d7fa 	srli	r3,r5,31
8111d83c:	2ad4703a 	and	r10,r5,r11
8111d840:	3ad2703a 	and	r9,r7,r11
8111d844:	3804d53a 	srli	r2,r7,20
8111d848:	3018d77a 	srli	r12,r6,29
8111d84c:	280ad53a 	srli	r5,r5,20
8111d850:	501490fa 	slli	r10,r10,3
8111d854:	2010d77a 	srli	r8,r4,29
8111d858:	481290fa 	slli	r9,r9,3
8111d85c:	380ed7fa 	srli	r7,r7,31
8111d860:	defffb04 	addi	sp,sp,-20
8111d864:	dc800215 	stw	r18,8(sp)
8111d868:	dc400115 	stw	r17,4(sp)
8111d86c:	dc000015 	stw	r16,0(sp)
8111d870:	dfc00415 	stw	ra,16(sp)
8111d874:	dcc00315 	stw	r19,12(sp)
8111d878:	1c803fcc 	andi	r18,r3,255
8111d87c:	2c01ffcc 	andi	r16,r5,2047
8111d880:	5210b03a 	or	r8,r10,r8
8111d884:	202290fa 	slli	r17,r4,3
8111d888:	1081ffcc 	andi	r2,r2,2047
8111d88c:	4b12b03a 	or	r9,r9,r12
8111d890:	300c90fa 	slli	r6,r6,3
8111d894:	91c07526 	beq	r18,r7,8111da6c <__adddf3+0x23c>
8111d898:	8087c83a 	sub	r3,r16,r2
8111d89c:	00c0ab0e 	bge	zero,r3,8111db4c <__adddf3+0x31c>
8111d8a0:	10002a1e 	bne	r2,zero,8111d94c <__adddf3+0x11c>
8111d8a4:	4984b03a 	or	r2,r9,r6
8111d8a8:	1000961e 	bne	r2,zero,8111db04 <__adddf3+0x2d4>
8111d8ac:	888001cc 	andi	r2,r17,7
8111d8b0:	10000726 	beq	r2,zero,8111d8d0 <__adddf3+0xa0>
8111d8b4:	888003cc 	andi	r2,r17,15
8111d8b8:	00c00104 	movi	r3,4
8111d8bc:	10c00426 	beq	r2,r3,8111d8d0 <__adddf3+0xa0>
8111d8c0:	88c7883a 	add	r3,r17,r3
8111d8c4:	1c63803a 	cmpltu	r17,r3,r17
8111d8c8:	4451883a 	add	r8,r8,r17
8111d8cc:	1823883a 	mov	r17,r3
8111d8d0:	4080202c 	andhi	r2,r8,128
8111d8d4:	10005926 	beq	r2,zero,8111da3c <__adddf3+0x20c>
8111d8d8:	84000044 	addi	r16,r16,1
8111d8dc:	0081ffc4 	movi	r2,2047
8111d8e0:	8080ba26 	beq	r16,r2,8111dbcc <__adddf3+0x39c>
8111d8e4:	00bfe034 	movhi	r2,65408
8111d8e8:	10bfffc4 	addi	r2,r2,-1
8111d8ec:	4090703a 	and	r8,r8,r2
8111d8f0:	4004977a 	slli	r2,r8,29
8111d8f4:	4010927a 	slli	r8,r8,9
8111d8f8:	8822d0fa 	srli	r17,r17,3
8111d8fc:	8401ffcc 	andi	r16,r16,2047
8111d900:	4010d33a 	srli	r8,r8,12
8111d904:	9007883a 	mov	r3,r18
8111d908:	1444b03a 	or	r2,r2,r17
8111d90c:	8401ffcc 	andi	r16,r16,2047
8111d910:	8020953a 	slli	r16,r16,20
8111d914:	18c03fcc 	andi	r3,r3,255
8111d918:	01000434 	movhi	r4,16
8111d91c:	213fffc4 	addi	r4,r4,-1
8111d920:	180697fa 	slli	r3,r3,31
8111d924:	4110703a 	and	r8,r8,r4
8111d928:	4410b03a 	or	r8,r8,r16
8111d92c:	40c6b03a 	or	r3,r8,r3
8111d930:	dfc00417 	ldw	ra,16(sp)
8111d934:	dcc00317 	ldw	r19,12(sp)
8111d938:	dc800217 	ldw	r18,8(sp)
8111d93c:	dc400117 	ldw	r17,4(sp)
8111d940:	dc000017 	ldw	r16,0(sp)
8111d944:	dec00504 	addi	sp,sp,20
8111d948:	f800283a 	ret
8111d94c:	0081ffc4 	movi	r2,2047
8111d950:	80bfd626 	beq	r16,r2,8111d8ac <__reset+0xfb0fd8ac>
8111d954:	4a402034 	orhi	r9,r9,128
8111d958:	00800e04 	movi	r2,56
8111d95c:	10c09f16 	blt	r2,r3,8111dbdc <__adddf3+0x3ac>
8111d960:	008007c4 	movi	r2,31
8111d964:	10c0c216 	blt	r2,r3,8111dc70 <__adddf3+0x440>
8111d968:	00800804 	movi	r2,32
8111d96c:	10c5c83a 	sub	r2,r2,r3
8111d970:	488a983a 	sll	r5,r9,r2
8111d974:	30c8d83a 	srl	r4,r6,r3
8111d978:	3084983a 	sll	r2,r6,r2
8111d97c:	48c6d83a 	srl	r3,r9,r3
8111d980:	290cb03a 	or	r6,r5,r4
8111d984:	1004c03a 	cmpne	r2,r2,zero
8111d988:	308cb03a 	or	r6,r6,r2
8111d98c:	898dc83a 	sub	r6,r17,r6
8111d990:	89a3803a 	cmpltu	r17,r17,r6
8111d994:	40d1c83a 	sub	r8,r8,r3
8111d998:	4451c83a 	sub	r8,r8,r17
8111d99c:	3023883a 	mov	r17,r6
8111d9a0:	4080202c 	andhi	r2,r8,128
8111d9a4:	10002326 	beq	r2,zero,8111da34 <__adddf3+0x204>
8111d9a8:	04c02034 	movhi	r19,128
8111d9ac:	9cffffc4 	addi	r19,r19,-1
8111d9b0:	44e6703a 	and	r19,r8,r19
8111d9b4:	98007626 	beq	r19,zero,8111db90 <__adddf3+0x360>
8111d9b8:	9809883a 	mov	r4,r19
8111d9bc:	110a0f40 	call	8110a0f4 <__clzsi2>
8111d9c0:	10fffe04 	addi	r3,r2,-8
8111d9c4:	010007c4 	movi	r4,31
8111d9c8:	20c07716 	blt	r4,r3,8111dba8 <__adddf3+0x378>
8111d9cc:	00800804 	movi	r2,32
8111d9d0:	10c5c83a 	sub	r2,r2,r3
8111d9d4:	8884d83a 	srl	r2,r17,r2
8111d9d8:	98d0983a 	sll	r8,r19,r3
8111d9dc:	88e2983a 	sll	r17,r17,r3
8111d9e0:	1204b03a 	or	r2,r2,r8
8111d9e4:	1c007416 	blt	r3,r16,8111dbb8 <__adddf3+0x388>
8111d9e8:	1c21c83a 	sub	r16,r3,r16
8111d9ec:	82000044 	addi	r8,r16,1
8111d9f0:	00c007c4 	movi	r3,31
8111d9f4:	1a009116 	blt	r3,r8,8111dc3c <__adddf3+0x40c>
8111d9f8:	00c00804 	movi	r3,32
8111d9fc:	1a07c83a 	sub	r3,r3,r8
8111da00:	8a08d83a 	srl	r4,r17,r8
8111da04:	88e2983a 	sll	r17,r17,r3
8111da08:	10c6983a 	sll	r3,r2,r3
8111da0c:	1210d83a 	srl	r8,r2,r8
8111da10:	8804c03a 	cmpne	r2,r17,zero
8111da14:	1906b03a 	or	r3,r3,r4
8111da18:	18a2b03a 	or	r17,r3,r2
8111da1c:	0021883a 	mov	r16,zero
8111da20:	003fa206 	br	8111d8ac <__reset+0xfb0fd8ac>
8111da24:	1890b03a 	or	r8,r3,r2
8111da28:	40017d26 	beq	r8,zero,8111e020 <__adddf3+0x7f0>
8111da2c:	1011883a 	mov	r8,r2
8111da30:	1823883a 	mov	r17,r3
8111da34:	888001cc 	andi	r2,r17,7
8111da38:	103f9e1e 	bne	r2,zero,8111d8b4 <__reset+0xfb0fd8b4>
8111da3c:	4004977a 	slli	r2,r8,29
8111da40:	8822d0fa 	srli	r17,r17,3
8111da44:	4010d0fa 	srli	r8,r8,3
8111da48:	9007883a 	mov	r3,r18
8111da4c:	1444b03a 	or	r2,r2,r17
8111da50:	0101ffc4 	movi	r4,2047
8111da54:	81002426 	beq	r16,r4,8111dae8 <__adddf3+0x2b8>
8111da58:	8120703a 	and	r16,r16,r4
8111da5c:	01000434 	movhi	r4,16
8111da60:	213fffc4 	addi	r4,r4,-1
8111da64:	4110703a 	and	r8,r8,r4
8111da68:	003fa806 	br	8111d90c <__reset+0xfb0fd90c>
8111da6c:	8089c83a 	sub	r4,r16,r2
8111da70:	01005e0e 	bge	zero,r4,8111dbec <__adddf3+0x3bc>
8111da74:	10002b26 	beq	r2,zero,8111db24 <__adddf3+0x2f4>
8111da78:	0081ffc4 	movi	r2,2047
8111da7c:	80bf8b26 	beq	r16,r2,8111d8ac <__reset+0xfb0fd8ac>
8111da80:	4a402034 	orhi	r9,r9,128
8111da84:	00800e04 	movi	r2,56
8111da88:	1100a40e 	bge	r2,r4,8111dd1c <__adddf3+0x4ec>
8111da8c:	498cb03a 	or	r6,r9,r6
8111da90:	300ac03a 	cmpne	r5,r6,zero
8111da94:	0013883a 	mov	r9,zero
8111da98:	2c4b883a 	add	r5,r5,r17
8111da9c:	2c63803a 	cmpltu	r17,r5,r17
8111daa0:	4a11883a 	add	r8,r9,r8
8111daa4:	8a11883a 	add	r8,r17,r8
8111daa8:	2823883a 	mov	r17,r5
8111daac:	4080202c 	andhi	r2,r8,128
8111dab0:	103fe026 	beq	r2,zero,8111da34 <__reset+0xfb0fda34>
8111dab4:	84000044 	addi	r16,r16,1
8111dab8:	0081ffc4 	movi	r2,2047
8111dabc:	8080d226 	beq	r16,r2,8111de08 <__adddf3+0x5d8>
8111dac0:	00bfe034 	movhi	r2,65408
8111dac4:	10bfffc4 	addi	r2,r2,-1
8111dac8:	4090703a 	and	r8,r8,r2
8111dacc:	880ad07a 	srli	r5,r17,1
8111dad0:	400897fa 	slli	r4,r8,31
8111dad4:	88c0004c 	andi	r3,r17,1
8111dad8:	28e2b03a 	or	r17,r5,r3
8111dadc:	4010d07a 	srli	r8,r8,1
8111dae0:	2462b03a 	or	r17,r4,r17
8111dae4:	003f7106 	br	8111d8ac <__reset+0xfb0fd8ac>
8111dae8:	4088b03a 	or	r4,r8,r2
8111daec:	20014526 	beq	r4,zero,8111e004 <__adddf3+0x7d4>
8111daf0:	01000434 	movhi	r4,16
8111daf4:	42000234 	orhi	r8,r8,8
8111daf8:	213fffc4 	addi	r4,r4,-1
8111dafc:	4110703a 	and	r8,r8,r4
8111db00:	003f8206 	br	8111d90c <__reset+0xfb0fd90c>
8111db04:	18ffffc4 	addi	r3,r3,-1
8111db08:	1800491e 	bne	r3,zero,8111dc30 <__adddf3+0x400>
8111db0c:	898bc83a 	sub	r5,r17,r6
8111db10:	8963803a 	cmpltu	r17,r17,r5
8111db14:	4251c83a 	sub	r8,r8,r9
8111db18:	4451c83a 	sub	r8,r8,r17
8111db1c:	2823883a 	mov	r17,r5
8111db20:	003f9f06 	br	8111d9a0 <__reset+0xfb0fd9a0>
8111db24:	4984b03a 	or	r2,r9,r6
8111db28:	103f6026 	beq	r2,zero,8111d8ac <__reset+0xfb0fd8ac>
8111db2c:	213fffc4 	addi	r4,r4,-1
8111db30:	2000931e 	bne	r4,zero,8111dd80 <__adddf3+0x550>
8111db34:	898d883a 	add	r6,r17,r6
8111db38:	3463803a 	cmpltu	r17,r6,r17
8111db3c:	4251883a 	add	r8,r8,r9
8111db40:	8a11883a 	add	r8,r17,r8
8111db44:	3023883a 	mov	r17,r6
8111db48:	003fd806 	br	8111daac <__reset+0xfb0fdaac>
8111db4c:	1800541e 	bne	r3,zero,8111dca0 <__adddf3+0x470>
8111db50:	80800044 	addi	r2,r16,1
8111db54:	1081ffcc 	andi	r2,r2,2047
8111db58:	00c00044 	movi	r3,1
8111db5c:	1880a00e 	bge	r3,r2,8111dde0 <__adddf3+0x5b0>
8111db60:	8989c83a 	sub	r4,r17,r6
8111db64:	8905803a 	cmpltu	r2,r17,r4
8111db68:	4267c83a 	sub	r19,r8,r9
8111db6c:	98a7c83a 	sub	r19,r19,r2
8111db70:	9880202c 	andhi	r2,r19,128
8111db74:	10006326 	beq	r2,zero,8111dd04 <__adddf3+0x4d4>
8111db78:	3463c83a 	sub	r17,r6,r17
8111db7c:	4a07c83a 	sub	r3,r9,r8
8111db80:	344d803a 	cmpltu	r6,r6,r17
8111db84:	19a7c83a 	sub	r19,r3,r6
8111db88:	3825883a 	mov	r18,r7
8111db8c:	983f8a1e 	bne	r19,zero,8111d9b8 <__reset+0xfb0fd9b8>
8111db90:	8809883a 	mov	r4,r17
8111db94:	110a0f40 	call	8110a0f4 <__clzsi2>
8111db98:	10800804 	addi	r2,r2,32
8111db9c:	10fffe04 	addi	r3,r2,-8
8111dba0:	010007c4 	movi	r4,31
8111dba4:	20ff890e 	bge	r4,r3,8111d9cc <__reset+0xfb0fd9cc>
8111dba8:	10bff604 	addi	r2,r2,-40
8111dbac:	8884983a 	sll	r2,r17,r2
8111dbb0:	0023883a 	mov	r17,zero
8111dbb4:	1c3f8c0e 	bge	r3,r16,8111d9e8 <__reset+0xfb0fd9e8>
8111dbb8:	023fe034 	movhi	r8,65408
8111dbbc:	423fffc4 	addi	r8,r8,-1
8111dbc0:	80e1c83a 	sub	r16,r16,r3
8111dbc4:	1210703a 	and	r8,r2,r8
8111dbc8:	003f3806 	br	8111d8ac <__reset+0xfb0fd8ac>
8111dbcc:	9007883a 	mov	r3,r18
8111dbd0:	0011883a 	mov	r8,zero
8111dbd4:	0005883a 	mov	r2,zero
8111dbd8:	003f4c06 	br	8111d90c <__reset+0xfb0fd90c>
8111dbdc:	498cb03a 	or	r6,r9,r6
8111dbe0:	300cc03a 	cmpne	r6,r6,zero
8111dbe4:	0007883a 	mov	r3,zero
8111dbe8:	003f6806 	br	8111d98c <__reset+0xfb0fd98c>
8111dbec:	20009c1e 	bne	r4,zero,8111de60 <__adddf3+0x630>
8111dbf0:	80800044 	addi	r2,r16,1
8111dbf4:	1141ffcc 	andi	r5,r2,2047
8111dbf8:	01000044 	movi	r4,1
8111dbfc:	2140670e 	bge	r4,r5,8111dd9c <__adddf3+0x56c>
8111dc00:	0101ffc4 	movi	r4,2047
8111dc04:	11007f26 	beq	r2,r4,8111de04 <__adddf3+0x5d4>
8111dc08:	898d883a 	add	r6,r17,r6
8111dc0c:	4247883a 	add	r3,r8,r9
8111dc10:	3451803a 	cmpltu	r8,r6,r17
8111dc14:	40d1883a 	add	r8,r8,r3
8111dc18:	402297fa 	slli	r17,r8,31
8111dc1c:	300cd07a 	srli	r6,r6,1
8111dc20:	4010d07a 	srli	r8,r8,1
8111dc24:	1021883a 	mov	r16,r2
8111dc28:	89a2b03a 	or	r17,r17,r6
8111dc2c:	003f1f06 	br	8111d8ac <__reset+0xfb0fd8ac>
8111dc30:	0081ffc4 	movi	r2,2047
8111dc34:	80bf481e 	bne	r16,r2,8111d958 <__reset+0xfb0fd958>
8111dc38:	003f1c06 	br	8111d8ac <__reset+0xfb0fd8ac>
8111dc3c:	843ff844 	addi	r16,r16,-31
8111dc40:	01000804 	movi	r4,32
8111dc44:	1406d83a 	srl	r3,r2,r16
8111dc48:	41005026 	beq	r8,r4,8111dd8c <__adddf3+0x55c>
8111dc4c:	01001004 	movi	r4,64
8111dc50:	2211c83a 	sub	r8,r4,r8
8111dc54:	1204983a 	sll	r2,r2,r8
8111dc58:	88a2b03a 	or	r17,r17,r2
8111dc5c:	8822c03a 	cmpne	r17,r17,zero
8111dc60:	1c62b03a 	or	r17,r3,r17
8111dc64:	0011883a 	mov	r8,zero
8111dc68:	0021883a 	mov	r16,zero
8111dc6c:	003f7106 	br	8111da34 <__reset+0xfb0fda34>
8111dc70:	193ff804 	addi	r4,r3,-32
8111dc74:	00800804 	movi	r2,32
8111dc78:	4908d83a 	srl	r4,r9,r4
8111dc7c:	18804526 	beq	r3,r2,8111dd94 <__adddf3+0x564>
8111dc80:	00801004 	movi	r2,64
8111dc84:	10c5c83a 	sub	r2,r2,r3
8111dc88:	4886983a 	sll	r3,r9,r2
8111dc8c:	198cb03a 	or	r6,r3,r6
8111dc90:	300cc03a 	cmpne	r6,r6,zero
8111dc94:	218cb03a 	or	r6,r4,r6
8111dc98:	0007883a 	mov	r3,zero
8111dc9c:	003f3b06 	br	8111d98c <__reset+0xfb0fd98c>
8111dca0:	80002a26 	beq	r16,zero,8111dd4c <__adddf3+0x51c>
8111dca4:	0101ffc4 	movi	r4,2047
8111dca8:	11006826 	beq	r2,r4,8111de4c <__adddf3+0x61c>
8111dcac:	00c7c83a 	sub	r3,zero,r3
8111dcb0:	42002034 	orhi	r8,r8,128
8111dcb4:	01000e04 	movi	r4,56
8111dcb8:	20c07c16 	blt	r4,r3,8111deac <__adddf3+0x67c>
8111dcbc:	010007c4 	movi	r4,31
8111dcc0:	20c0da16 	blt	r4,r3,8111e02c <__adddf3+0x7fc>
8111dcc4:	01000804 	movi	r4,32
8111dcc8:	20c9c83a 	sub	r4,r4,r3
8111dccc:	4114983a 	sll	r10,r8,r4
8111dcd0:	88cad83a 	srl	r5,r17,r3
8111dcd4:	8908983a 	sll	r4,r17,r4
8111dcd8:	40c6d83a 	srl	r3,r8,r3
8111dcdc:	5162b03a 	or	r17,r10,r5
8111dce0:	2008c03a 	cmpne	r4,r4,zero
8111dce4:	8922b03a 	or	r17,r17,r4
8111dce8:	3463c83a 	sub	r17,r6,r17
8111dcec:	48c7c83a 	sub	r3,r9,r3
8111dcf0:	344d803a 	cmpltu	r6,r6,r17
8111dcf4:	1991c83a 	sub	r8,r3,r6
8111dcf8:	1021883a 	mov	r16,r2
8111dcfc:	3825883a 	mov	r18,r7
8111dd00:	003f2706 	br	8111d9a0 <__reset+0xfb0fd9a0>
8111dd04:	24d0b03a 	or	r8,r4,r19
8111dd08:	40001b1e 	bne	r8,zero,8111dd78 <__adddf3+0x548>
8111dd0c:	0005883a 	mov	r2,zero
8111dd10:	0007883a 	mov	r3,zero
8111dd14:	0021883a 	mov	r16,zero
8111dd18:	003f4d06 	br	8111da50 <__reset+0xfb0fda50>
8111dd1c:	008007c4 	movi	r2,31
8111dd20:	11003c16 	blt	r2,r4,8111de14 <__adddf3+0x5e4>
8111dd24:	00800804 	movi	r2,32
8111dd28:	1105c83a 	sub	r2,r2,r4
8111dd2c:	488e983a 	sll	r7,r9,r2
8111dd30:	310ad83a 	srl	r5,r6,r4
8111dd34:	3084983a 	sll	r2,r6,r2
8111dd38:	4912d83a 	srl	r9,r9,r4
8111dd3c:	394ab03a 	or	r5,r7,r5
8111dd40:	1004c03a 	cmpne	r2,r2,zero
8111dd44:	288ab03a 	or	r5,r5,r2
8111dd48:	003f5306 	br	8111da98 <__reset+0xfb0fda98>
8111dd4c:	4448b03a 	or	r4,r8,r17
8111dd50:	20003e26 	beq	r4,zero,8111de4c <__adddf3+0x61c>
8111dd54:	00c6303a 	nor	r3,zero,r3
8111dd58:	18003a1e 	bne	r3,zero,8111de44 <__adddf3+0x614>
8111dd5c:	3463c83a 	sub	r17,r6,r17
8111dd60:	4a07c83a 	sub	r3,r9,r8
8111dd64:	344d803a 	cmpltu	r6,r6,r17
8111dd68:	1991c83a 	sub	r8,r3,r6
8111dd6c:	1021883a 	mov	r16,r2
8111dd70:	3825883a 	mov	r18,r7
8111dd74:	003f0a06 	br	8111d9a0 <__reset+0xfb0fd9a0>
8111dd78:	2023883a 	mov	r17,r4
8111dd7c:	003f0d06 	br	8111d9b4 <__reset+0xfb0fd9b4>
8111dd80:	0081ffc4 	movi	r2,2047
8111dd84:	80bf3f1e 	bne	r16,r2,8111da84 <__reset+0xfb0fda84>
8111dd88:	003ec806 	br	8111d8ac <__reset+0xfb0fd8ac>
8111dd8c:	0005883a 	mov	r2,zero
8111dd90:	003fb106 	br	8111dc58 <__reset+0xfb0fdc58>
8111dd94:	0007883a 	mov	r3,zero
8111dd98:	003fbc06 	br	8111dc8c <__reset+0xfb0fdc8c>
8111dd9c:	4444b03a 	or	r2,r8,r17
8111dda0:	8000871e 	bne	r16,zero,8111dfc0 <__adddf3+0x790>
8111dda4:	1000ba26 	beq	r2,zero,8111e090 <__adddf3+0x860>
8111dda8:	4984b03a 	or	r2,r9,r6
8111ddac:	103ebf26 	beq	r2,zero,8111d8ac <__reset+0xfb0fd8ac>
8111ddb0:	8985883a 	add	r2,r17,r6
8111ddb4:	4247883a 	add	r3,r8,r9
8111ddb8:	1451803a 	cmpltu	r8,r2,r17
8111ddbc:	40d1883a 	add	r8,r8,r3
8111ddc0:	40c0202c 	andhi	r3,r8,128
8111ddc4:	1023883a 	mov	r17,r2
8111ddc8:	183f1a26 	beq	r3,zero,8111da34 <__reset+0xfb0fda34>
8111ddcc:	00bfe034 	movhi	r2,65408
8111ddd0:	10bfffc4 	addi	r2,r2,-1
8111ddd4:	2021883a 	mov	r16,r4
8111ddd8:	4090703a 	and	r8,r8,r2
8111dddc:	003eb306 	br	8111d8ac <__reset+0xfb0fd8ac>
8111dde0:	4444b03a 	or	r2,r8,r17
8111dde4:	8000291e 	bne	r16,zero,8111de8c <__adddf3+0x65c>
8111dde8:	10004b1e 	bne	r2,zero,8111df18 <__adddf3+0x6e8>
8111ddec:	4990b03a 	or	r8,r9,r6
8111ddf0:	40008b26 	beq	r8,zero,8111e020 <__adddf3+0x7f0>
8111ddf4:	4811883a 	mov	r8,r9
8111ddf8:	3023883a 	mov	r17,r6
8111ddfc:	3825883a 	mov	r18,r7
8111de00:	003eaa06 	br	8111d8ac <__reset+0xfb0fd8ac>
8111de04:	1021883a 	mov	r16,r2
8111de08:	0011883a 	mov	r8,zero
8111de0c:	0005883a 	mov	r2,zero
8111de10:	003f0f06 	br	8111da50 <__reset+0xfb0fda50>
8111de14:	217ff804 	addi	r5,r4,-32
8111de18:	00800804 	movi	r2,32
8111de1c:	494ad83a 	srl	r5,r9,r5
8111de20:	20807d26 	beq	r4,r2,8111e018 <__adddf3+0x7e8>
8111de24:	00801004 	movi	r2,64
8111de28:	1109c83a 	sub	r4,r2,r4
8111de2c:	4912983a 	sll	r9,r9,r4
8111de30:	498cb03a 	or	r6,r9,r6
8111de34:	300cc03a 	cmpne	r6,r6,zero
8111de38:	298ab03a 	or	r5,r5,r6
8111de3c:	0013883a 	mov	r9,zero
8111de40:	003f1506 	br	8111da98 <__reset+0xfb0fda98>
8111de44:	0101ffc4 	movi	r4,2047
8111de48:	113f9a1e 	bne	r2,r4,8111dcb4 <__reset+0xfb0fdcb4>
8111de4c:	4811883a 	mov	r8,r9
8111de50:	3023883a 	mov	r17,r6
8111de54:	1021883a 	mov	r16,r2
8111de58:	3825883a 	mov	r18,r7
8111de5c:	003e9306 	br	8111d8ac <__reset+0xfb0fd8ac>
8111de60:	8000161e 	bne	r16,zero,8111debc <__adddf3+0x68c>
8111de64:	444ab03a 	or	r5,r8,r17
8111de68:	28005126 	beq	r5,zero,8111dfb0 <__adddf3+0x780>
8111de6c:	0108303a 	nor	r4,zero,r4
8111de70:	20004d1e 	bne	r4,zero,8111dfa8 <__adddf3+0x778>
8111de74:	89a3883a 	add	r17,r17,r6
8111de78:	4253883a 	add	r9,r8,r9
8111de7c:	898d803a 	cmpltu	r6,r17,r6
8111de80:	3251883a 	add	r8,r6,r9
8111de84:	1021883a 	mov	r16,r2
8111de88:	003f0806 	br	8111daac <__reset+0xfb0fdaac>
8111de8c:	1000301e 	bne	r2,zero,8111df50 <__adddf3+0x720>
8111de90:	4984b03a 	or	r2,r9,r6
8111de94:	10007126 	beq	r2,zero,8111e05c <__adddf3+0x82c>
8111de98:	4811883a 	mov	r8,r9
8111de9c:	3023883a 	mov	r17,r6
8111dea0:	3825883a 	mov	r18,r7
8111dea4:	0401ffc4 	movi	r16,2047
8111dea8:	003e8006 	br	8111d8ac <__reset+0xfb0fd8ac>
8111deac:	4462b03a 	or	r17,r8,r17
8111deb0:	8822c03a 	cmpne	r17,r17,zero
8111deb4:	0007883a 	mov	r3,zero
8111deb8:	003f8b06 	br	8111dce8 <__reset+0xfb0fdce8>
8111debc:	0141ffc4 	movi	r5,2047
8111dec0:	11403b26 	beq	r2,r5,8111dfb0 <__adddf3+0x780>
8111dec4:	0109c83a 	sub	r4,zero,r4
8111dec8:	42002034 	orhi	r8,r8,128
8111decc:	01400e04 	movi	r5,56
8111ded0:	29006716 	blt	r5,r4,8111e070 <__adddf3+0x840>
8111ded4:	014007c4 	movi	r5,31
8111ded8:	29007016 	blt	r5,r4,8111e09c <__adddf3+0x86c>
8111dedc:	01400804 	movi	r5,32
8111dee0:	290bc83a 	sub	r5,r5,r4
8111dee4:	4154983a 	sll	r10,r8,r5
8111dee8:	890ed83a 	srl	r7,r17,r4
8111deec:	894a983a 	sll	r5,r17,r5
8111def0:	4108d83a 	srl	r4,r8,r4
8111def4:	51e2b03a 	or	r17,r10,r7
8111def8:	280ac03a 	cmpne	r5,r5,zero
8111defc:	8962b03a 	or	r17,r17,r5
8111df00:	89a3883a 	add	r17,r17,r6
8111df04:	2253883a 	add	r9,r4,r9
8111df08:	898d803a 	cmpltu	r6,r17,r6
8111df0c:	3251883a 	add	r8,r6,r9
8111df10:	1021883a 	mov	r16,r2
8111df14:	003ee506 	br	8111daac <__reset+0xfb0fdaac>
8111df18:	4984b03a 	or	r2,r9,r6
8111df1c:	103e6326 	beq	r2,zero,8111d8ac <__reset+0xfb0fd8ac>
8111df20:	8987c83a 	sub	r3,r17,r6
8111df24:	88c9803a 	cmpltu	r4,r17,r3
8111df28:	4245c83a 	sub	r2,r8,r9
8111df2c:	1105c83a 	sub	r2,r2,r4
8111df30:	1100202c 	andhi	r4,r2,128
8111df34:	203ebb26 	beq	r4,zero,8111da24 <__reset+0xfb0fda24>
8111df38:	3463c83a 	sub	r17,r6,r17
8111df3c:	4a07c83a 	sub	r3,r9,r8
8111df40:	344d803a 	cmpltu	r6,r6,r17
8111df44:	1991c83a 	sub	r8,r3,r6
8111df48:	3825883a 	mov	r18,r7
8111df4c:	003e5706 	br	8111d8ac <__reset+0xfb0fd8ac>
8111df50:	4984b03a 	or	r2,r9,r6
8111df54:	10002e26 	beq	r2,zero,8111e010 <__adddf3+0x7e0>
8111df58:	4004d0fa 	srli	r2,r8,3
8111df5c:	8822d0fa 	srli	r17,r17,3
8111df60:	4010977a 	slli	r8,r8,29
8111df64:	10c0022c 	andhi	r3,r2,8
8111df68:	4462b03a 	or	r17,r8,r17
8111df6c:	18000826 	beq	r3,zero,8111df90 <__adddf3+0x760>
8111df70:	4808d0fa 	srli	r4,r9,3
8111df74:	20c0022c 	andhi	r3,r4,8
8111df78:	1800051e 	bne	r3,zero,8111df90 <__adddf3+0x760>
8111df7c:	300cd0fa 	srli	r6,r6,3
8111df80:	4806977a 	slli	r3,r9,29
8111df84:	2005883a 	mov	r2,r4
8111df88:	3825883a 	mov	r18,r7
8111df8c:	19a2b03a 	or	r17,r3,r6
8111df90:	8810d77a 	srli	r8,r17,29
8111df94:	100490fa 	slli	r2,r2,3
8111df98:	882290fa 	slli	r17,r17,3
8111df9c:	0401ffc4 	movi	r16,2047
8111dfa0:	4090b03a 	or	r8,r8,r2
8111dfa4:	003e4106 	br	8111d8ac <__reset+0xfb0fd8ac>
8111dfa8:	0141ffc4 	movi	r5,2047
8111dfac:	117fc71e 	bne	r2,r5,8111decc <__reset+0xfb0fdecc>
8111dfb0:	4811883a 	mov	r8,r9
8111dfb4:	3023883a 	mov	r17,r6
8111dfb8:	1021883a 	mov	r16,r2
8111dfbc:	003e3b06 	br	8111d8ac <__reset+0xfb0fd8ac>
8111dfc0:	10002f26 	beq	r2,zero,8111e080 <__adddf3+0x850>
8111dfc4:	4984b03a 	or	r2,r9,r6
8111dfc8:	10001126 	beq	r2,zero,8111e010 <__adddf3+0x7e0>
8111dfcc:	4004d0fa 	srli	r2,r8,3
8111dfd0:	8822d0fa 	srli	r17,r17,3
8111dfd4:	4010977a 	slli	r8,r8,29
8111dfd8:	10c0022c 	andhi	r3,r2,8
8111dfdc:	4462b03a 	or	r17,r8,r17
8111dfe0:	183feb26 	beq	r3,zero,8111df90 <__reset+0xfb0fdf90>
8111dfe4:	4808d0fa 	srli	r4,r9,3
8111dfe8:	20c0022c 	andhi	r3,r4,8
8111dfec:	183fe81e 	bne	r3,zero,8111df90 <__reset+0xfb0fdf90>
8111dff0:	300cd0fa 	srli	r6,r6,3
8111dff4:	4806977a 	slli	r3,r9,29
8111dff8:	2005883a 	mov	r2,r4
8111dffc:	19a2b03a 	or	r17,r3,r6
8111e000:	003fe306 	br	8111df90 <__reset+0xfb0fdf90>
8111e004:	0011883a 	mov	r8,zero
8111e008:	0005883a 	mov	r2,zero
8111e00c:	003e3f06 	br	8111d90c <__reset+0xfb0fd90c>
8111e010:	0401ffc4 	movi	r16,2047
8111e014:	003e2506 	br	8111d8ac <__reset+0xfb0fd8ac>
8111e018:	0013883a 	mov	r9,zero
8111e01c:	003f8406 	br	8111de30 <__reset+0xfb0fde30>
8111e020:	0005883a 	mov	r2,zero
8111e024:	0007883a 	mov	r3,zero
8111e028:	003e8906 	br	8111da50 <__reset+0xfb0fda50>
8111e02c:	197ff804 	addi	r5,r3,-32
8111e030:	01000804 	movi	r4,32
8111e034:	414ad83a 	srl	r5,r8,r5
8111e038:	19002426 	beq	r3,r4,8111e0cc <__adddf3+0x89c>
8111e03c:	01001004 	movi	r4,64
8111e040:	20c7c83a 	sub	r3,r4,r3
8111e044:	40c6983a 	sll	r3,r8,r3
8111e048:	1c46b03a 	or	r3,r3,r17
8111e04c:	1806c03a 	cmpne	r3,r3,zero
8111e050:	28e2b03a 	or	r17,r5,r3
8111e054:	0007883a 	mov	r3,zero
8111e058:	003f2306 	br	8111dce8 <__reset+0xfb0fdce8>
8111e05c:	0007883a 	mov	r3,zero
8111e060:	5811883a 	mov	r8,r11
8111e064:	00bfffc4 	movi	r2,-1
8111e068:	0401ffc4 	movi	r16,2047
8111e06c:	003e7806 	br	8111da50 <__reset+0xfb0fda50>
8111e070:	4462b03a 	or	r17,r8,r17
8111e074:	8822c03a 	cmpne	r17,r17,zero
8111e078:	0009883a 	mov	r4,zero
8111e07c:	003fa006 	br	8111df00 <__reset+0xfb0fdf00>
8111e080:	4811883a 	mov	r8,r9
8111e084:	3023883a 	mov	r17,r6
8111e088:	0401ffc4 	movi	r16,2047
8111e08c:	003e0706 	br	8111d8ac <__reset+0xfb0fd8ac>
8111e090:	4811883a 	mov	r8,r9
8111e094:	3023883a 	mov	r17,r6
8111e098:	003e0406 	br	8111d8ac <__reset+0xfb0fd8ac>
8111e09c:	21fff804 	addi	r7,r4,-32
8111e0a0:	01400804 	movi	r5,32
8111e0a4:	41ced83a 	srl	r7,r8,r7
8111e0a8:	21400a26 	beq	r4,r5,8111e0d4 <__adddf3+0x8a4>
8111e0ac:	01401004 	movi	r5,64
8111e0b0:	2909c83a 	sub	r4,r5,r4
8111e0b4:	4108983a 	sll	r4,r8,r4
8111e0b8:	2448b03a 	or	r4,r4,r17
8111e0bc:	2008c03a 	cmpne	r4,r4,zero
8111e0c0:	3922b03a 	or	r17,r7,r4
8111e0c4:	0009883a 	mov	r4,zero
8111e0c8:	003f8d06 	br	8111df00 <__reset+0xfb0fdf00>
8111e0cc:	0007883a 	mov	r3,zero
8111e0d0:	003fdd06 	br	8111e048 <__reset+0xfb0fe048>
8111e0d4:	0009883a 	mov	r4,zero
8111e0d8:	003ff706 	br	8111e0b8 <__reset+0xfb0fe0b8>

8111e0dc <__divdf3>:
8111e0dc:	defff204 	addi	sp,sp,-56
8111e0e0:	dd400915 	stw	r21,36(sp)
8111e0e4:	282ad53a 	srli	r21,r5,20
8111e0e8:	dd000815 	stw	r20,32(sp)
8111e0ec:	2828d7fa 	srli	r20,r5,31
8111e0f0:	dc000415 	stw	r16,16(sp)
8111e0f4:	04000434 	movhi	r16,16
8111e0f8:	df000c15 	stw	fp,48(sp)
8111e0fc:	843fffc4 	addi	r16,r16,-1
8111e100:	dfc00d15 	stw	ra,52(sp)
8111e104:	ddc00b15 	stw	r23,44(sp)
8111e108:	dd800a15 	stw	r22,40(sp)
8111e10c:	dcc00715 	stw	r19,28(sp)
8111e110:	dc800615 	stw	r18,24(sp)
8111e114:	dc400515 	stw	r17,20(sp)
8111e118:	ad41ffcc 	andi	r21,r21,2047
8111e11c:	2c20703a 	and	r16,r5,r16
8111e120:	a7003fcc 	andi	fp,r20,255
8111e124:	a8006126 	beq	r21,zero,8111e2ac <__divdf3+0x1d0>
8111e128:	0081ffc4 	movi	r2,2047
8111e12c:	2025883a 	mov	r18,r4
8111e130:	a8803726 	beq	r21,r2,8111e210 <__divdf3+0x134>
8111e134:	80800434 	orhi	r2,r16,16
8111e138:	100490fa 	slli	r2,r2,3
8111e13c:	2020d77a 	srli	r16,r4,29
8111e140:	202490fa 	slli	r18,r4,3
8111e144:	ad7f0044 	addi	r21,r21,-1023
8111e148:	80a0b03a 	or	r16,r16,r2
8111e14c:	0027883a 	mov	r19,zero
8111e150:	0013883a 	mov	r9,zero
8111e154:	3804d53a 	srli	r2,r7,20
8111e158:	382cd7fa 	srli	r22,r7,31
8111e15c:	04400434 	movhi	r17,16
8111e160:	8c7fffc4 	addi	r17,r17,-1
8111e164:	1081ffcc 	andi	r2,r2,2047
8111e168:	3011883a 	mov	r8,r6
8111e16c:	3c62703a 	and	r17,r7,r17
8111e170:	b5c03fcc 	andi	r23,r22,255
8111e174:	10006c26 	beq	r2,zero,8111e328 <__divdf3+0x24c>
8111e178:	00c1ffc4 	movi	r3,2047
8111e17c:	10c06426 	beq	r2,r3,8111e310 <__divdf3+0x234>
8111e180:	88c00434 	orhi	r3,r17,16
8111e184:	180690fa 	slli	r3,r3,3
8111e188:	3022d77a 	srli	r17,r6,29
8111e18c:	301090fa 	slli	r8,r6,3
8111e190:	10bf0044 	addi	r2,r2,-1023
8111e194:	88e2b03a 	or	r17,r17,r3
8111e198:	000f883a 	mov	r7,zero
8111e19c:	a58cf03a 	xor	r6,r20,r22
8111e1a0:	3cc8b03a 	or	r4,r7,r19
8111e1a4:	a8abc83a 	sub	r21,r21,r2
8111e1a8:	008003c4 	movi	r2,15
8111e1ac:	3007883a 	mov	r3,r6
8111e1b0:	34c03fcc 	andi	r19,r6,255
8111e1b4:	11009036 	bltu	r2,r4,8111e3f8 <__divdf3+0x31c>
8111e1b8:	200890ba 	slli	r4,r4,2
8111e1bc:	00a044b4 	movhi	r2,33042
8111e1c0:	10b87404 	addi	r2,r2,-7728
8111e1c4:	2089883a 	add	r4,r4,r2
8111e1c8:	20800017 	ldw	r2,0(r4)
8111e1cc:	1000683a 	jmp	r2
8111e1d0:	8111e3f8 	rdprs	r4,r16,18319
8111e1d4:	8111e248 	cmpgei	r4,r16,18313
8111e1d8:	8111e3e8 	cmpgeui	r4,r16,18319
8111e1dc:	8111e23c 	xorhi	r4,r16,18312
8111e1e0:	8111e3e8 	cmpgeui	r4,r16,18319
8111e1e4:	8111e3bc 	xorhi	r4,r16,18318
8111e1e8:	8111e3e8 	cmpgeui	r4,r16,18319
8111e1ec:	8111e23c 	xorhi	r4,r16,18312
8111e1f0:	8111e248 	cmpgei	r4,r16,18313
8111e1f4:	8111e248 	cmpgei	r4,r16,18313
8111e1f8:	8111e3bc 	xorhi	r4,r16,18318
8111e1fc:	8111e23c 	xorhi	r4,r16,18312
8111e200:	8111e22c 	andhi	r4,r16,18312
8111e204:	8111e22c 	andhi	r4,r16,18312
8111e208:	8111e22c 	andhi	r4,r16,18312
8111e20c:	8111e6dc 	xori	r4,r16,18331
8111e210:	2404b03a 	or	r2,r4,r16
8111e214:	1000661e 	bne	r2,zero,8111e3b0 <__divdf3+0x2d4>
8111e218:	04c00204 	movi	r19,8
8111e21c:	0021883a 	mov	r16,zero
8111e220:	0025883a 	mov	r18,zero
8111e224:	02400084 	movi	r9,2
8111e228:	003fca06 	br	8111e154 <__reset+0xfb0fe154>
8111e22c:	8023883a 	mov	r17,r16
8111e230:	9011883a 	mov	r8,r18
8111e234:	e02f883a 	mov	r23,fp
8111e238:	480f883a 	mov	r7,r9
8111e23c:	00800084 	movi	r2,2
8111e240:	3881311e 	bne	r7,r2,8111e708 <__divdf3+0x62c>
8111e244:	b827883a 	mov	r19,r23
8111e248:	98c0004c 	andi	r3,r19,1
8111e24c:	0081ffc4 	movi	r2,2047
8111e250:	000b883a 	mov	r5,zero
8111e254:	0025883a 	mov	r18,zero
8111e258:	1004953a 	slli	r2,r2,20
8111e25c:	18c03fcc 	andi	r3,r3,255
8111e260:	04400434 	movhi	r17,16
8111e264:	8c7fffc4 	addi	r17,r17,-1
8111e268:	180697fa 	slli	r3,r3,31
8111e26c:	2c4a703a 	and	r5,r5,r17
8111e270:	288ab03a 	or	r5,r5,r2
8111e274:	28c6b03a 	or	r3,r5,r3
8111e278:	9005883a 	mov	r2,r18
8111e27c:	dfc00d17 	ldw	ra,52(sp)
8111e280:	df000c17 	ldw	fp,48(sp)
8111e284:	ddc00b17 	ldw	r23,44(sp)
8111e288:	dd800a17 	ldw	r22,40(sp)
8111e28c:	dd400917 	ldw	r21,36(sp)
8111e290:	dd000817 	ldw	r20,32(sp)
8111e294:	dcc00717 	ldw	r19,28(sp)
8111e298:	dc800617 	ldw	r18,24(sp)
8111e29c:	dc400517 	ldw	r17,20(sp)
8111e2a0:	dc000417 	ldw	r16,16(sp)
8111e2a4:	dec00e04 	addi	sp,sp,56
8111e2a8:	f800283a 	ret
8111e2ac:	2404b03a 	or	r2,r4,r16
8111e2b0:	2027883a 	mov	r19,r4
8111e2b4:	10003926 	beq	r2,zero,8111e39c <__divdf3+0x2c0>
8111e2b8:	80012e26 	beq	r16,zero,8111e774 <__divdf3+0x698>
8111e2bc:	8009883a 	mov	r4,r16
8111e2c0:	d9800315 	stw	r6,12(sp)
8111e2c4:	d9c00215 	stw	r7,8(sp)
8111e2c8:	110a0f40 	call	8110a0f4 <__clzsi2>
8111e2cc:	d9800317 	ldw	r6,12(sp)
8111e2d0:	d9c00217 	ldw	r7,8(sp)
8111e2d4:	113ffd44 	addi	r4,r2,-11
8111e2d8:	00c00704 	movi	r3,28
8111e2dc:	19012116 	blt	r3,r4,8111e764 <__divdf3+0x688>
8111e2e0:	00c00744 	movi	r3,29
8111e2e4:	147ffe04 	addi	r17,r2,-8
8111e2e8:	1907c83a 	sub	r3,r3,r4
8111e2ec:	8460983a 	sll	r16,r16,r17
8111e2f0:	98c6d83a 	srl	r3,r19,r3
8111e2f4:	9c64983a 	sll	r18,r19,r17
8111e2f8:	1c20b03a 	or	r16,r3,r16
8111e2fc:	1080fcc4 	addi	r2,r2,1011
8111e300:	00abc83a 	sub	r21,zero,r2
8111e304:	0027883a 	mov	r19,zero
8111e308:	0013883a 	mov	r9,zero
8111e30c:	003f9106 	br	8111e154 <__reset+0xfb0fe154>
8111e310:	3446b03a 	or	r3,r6,r17
8111e314:	18001f1e 	bne	r3,zero,8111e394 <__divdf3+0x2b8>
8111e318:	0023883a 	mov	r17,zero
8111e31c:	0011883a 	mov	r8,zero
8111e320:	01c00084 	movi	r7,2
8111e324:	003f9d06 	br	8111e19c <__reset+0xfb0fe19c>
8111e328:	3446b03a 	or	r3,r6,r17
8111e32c:	18001526 	beq	r3,zero,8111e384 <__divdf3+0x2a8>
8111e330:	88011b26 	beq	r17,zero,8111e7a0 <__divdf3+0x6c4>
8111e334:	8809883a 	mov	r4,r17
8111e338:	d9800315 	stw	r6,12(sp)
8111e33c:	da400115 	stw	r9,4(sp)
8111e340:	110a0f40 	call	8110a0f4 <__clzsi2>
8111e344:	d9800317 	ldw	r6,12(sp)
8111e348:	da400117 	ldw	r9,4(sp)
8111e34c:	113ffd44 	addi	r4,r2,-11
8111e350:	00c00704 	movi	r3,28
8111e354:	19010e16 	blt	r3,r4,8111e790 <__divdf3+0x6b4>
8111e358:	00c00744 	movi	r3,29
8111e35c:	123ffe04 	addi	r8,r2,-8
8111e360:	1907c83a 	sub	r3,r3,r4
8111e364:	8a22983a 	sll	r17,r17,r8
8111e368:	30c6d83a 	srl	r3,r6,r3
8111e36c:	3210983a 	sll	r8,r6,r8
8111e370:	1c62b03a 	or	r17,r3,r17
8111e374:	1080fcc4 	addi	r2,r2,1011
8111e378:	0085c83a 	sub	r2,zero,r2
8111e37c:	000f883a 	mov	r7,zero
8111e380:	003f8606 	br	8111e19c <__reset+0xfb0fe19c>
8111e384:	0023883a 	mov	r17,zero
8111e388:	0011883a 	mov	r8,zero
8111e38c:	01c00044 	movi	r7,1
8111e390:	003f8206 	br	8111e19c <__reset+0xfb0fe19c>
8111e394:	01c000c4 	movi	r7,3
8111e398:	003f8006 	br	8111e19c <__reset+0xfb0fe19c>
8111e39c:	04c00104 	movi	r19,4
8111e3a0:	0021883a 	mov	r16,zero
8111e3a4:	0025883a 	mov	r18,zero
8111e3a8:	02400044 	movi	r9,1
8111e3ac:	003f6906 	br	8111e154 <__reset+0xfb0fe154>
8111e3b0:	04c00304 	movi	r19,12
8111e3b4:	024000c4 	movi	r9,3
8111e3b8:	003f6606 	br	8111e154 <__reset+0xfb0fe154>
8111e3bc:	01400434 	movhi	r5,16
8111e3c0:	0007883a 	mov	r3,zero
8111e3c4:	297fffc4 	addi	r5,r5,-1
8111e3c8:	04bfffc4 	movi	r18,-1
8111e3cc:	0081ffc4 	movi	r2,2047
8111e3d0:	003fa106 	br	8111e258 <__reset+0xfb0fe258>
8111e3d4:	00c00044 	movi	r3,1
8111e3d8:	1887c83a 	sub	r3,r3,r2
8111e3dc:	01000e04 	movi	r4,56
8111e3e0:	20c1210e 	bge	r4,r3,8111e868 <__divdf3+0x78c>
8111e3e4:	98c0004c 	andi	r3,r19,1
8111e3e8:	0005883a 	mov	r2,zero
8111e3ec:	000b883a 	mov	r5,zero
8111e3f0:	0025883a 	mov	r18,zero
8111e3f4:	003f9806 	br	8111e258 <__reset+0xfb0fe258>
8111e3f8:	8c00fd36 	bltu	r17,r16,8111e7f0 <__divdf3+0x714>
8111e3fc:	8440fb26 	beq	r16,r17,8111e7ec <__divdf3+0x710>
8111e400:	8007883a 	mov	r3,r16
8111e404:	ad7fffc4 	addi	r21,r21,-1
8111e408:	0021883a 	mov	r16,zero
8111e40c:	4004d63a 	srli	r2,r8,24
8111e410:	8822923a 	slli	r17,r17,8
8111e414:	1809883a 	mov	r4,r3
8111e418:	402c923a 	slli	r22,r8,8
8111e41c:	88b8b03a 	or	fp,r17,r2
8111e420:	e028d43a 	srli	r20,fp,16
8111e424:	d8c00015 	stw	r3,0(sp)
8111e428:	e5ffffcc 	andi	r23,fp,65535
8111e42c:	a00b883a 	mov	r5,r20
8111e430:	111d5780 	call	8111d578 <__udivsi3>
8111e434:	d8c00017 	ldw	r3,0(sp)
8111e438:	a00b883a 	mov	r5,r20
8111e43c:	d8800315 	stw	r2,12(sp)
8111e440:	1809883a 	mov	r4,r3
8111e444:	111d5dc0 	call	8111d5dc <__umodsi3>
8111e448:	d9800317 	ldw	r6,12(sp)
8111e44c:	1006943a 	slli	r3,r2,16
8111e450:	9004d43a 	srli	r2,r18,16
8111e454:	b9a3383a 	mul	r17,r23,r6
8111e458:	10c4b03a 	or	r2,r2,r3
8111e45c:	1440062e 	bgeu	r2,r17,8111e478 <__divdf3+0x39c>
8111e460:	1705883a 	add	r2,r2,fp
8111e464:	30ffffc4 	addi	r3,r6,-1
8111e468:	1700ee36 	bltu	r2,fp,8111e824 <__divdf3+0x748>
8111e46c:	1440ed2e 	bgeu	r2,r17,8111e824 <__divdf3+0x748>
8111e470:	31bfff84 	addi	r6,r6,-2
8111e474:	1705883a 	add	r2,r2,fp
8111e478:	1463c83a 	sub	r17,r2,r17
8111e47c:	a00b883a 	mov	r5,r20
8111e480:	8809883a 	mov	r4,r17
8111e484:	d9800315 	stw	r6,12(sp)
8111e488:	111d5780 	call	8111d578 <__udivsi3>
8111e48c:	a00b883a 	mov	r5,r20
8111e490:	8809883a 	mov	r4,r17
8111e494:	d8800215 	stw	r2,8(sp)
8111e498:	111d5dc0 	call	8111d5dc <__umodsi3>
8111e49c:	d9c00217 	ldw	r7,8(sp)
8111e4a0:	1004943a 	slli	r2,r2,16
8111e4a4:	94bfffcc 	andi	r18,r18,65535
8111e4a8:	b9d1383a 	mul	r8,r23,r7
8111e4ac:	90a4b03a 	or	r18,r18,r2
8111e4b0:	d9800317 	ldw	r6,12(sp)
8111e4b4:	9200062e 	bgeu	r18,r8,8111e4d0 <__divdf3+0x3f4>
8111e4b8:	9725883a 	add	r18,r18,fp
8111e4bc:	38bfffc4 	addi	r2,r7,-1
8111e4c0:	9700d636 	bltu	r18,fp,8111e81c <__divdf3+0x740>
8111e4c4:	9200d52e 	bgeu	r18,r8,8111e81c <__divdf3+0x740>
8111e4c8:	39ffff84 	addi	r7,r7,-2
8111e4cc:	9725883a 	add	r18,r18,fp
8111e4d0:	3004943a 	slli	r2,r6,16
8111e4d4:	b012d43a 	srli	r9,r22,16
8111e4d8:	b1bfffcc 	andi	r6,r22,65535
8111e4dc:	11e2b03a 	or	r17,r2,r7
8111e4e0:	8806d43a 	srli	r3,r17,16
8111e4e4:	893fffcc 	andi	r4,r17,65535
8111e4e8:	218b383a 	mul	r5,r4,r6
8111e4ec:	30c5383a 	mul	r2,r6,r3
8111e4f0:	2249383a 	mul	r4,r4,r9
8111e4f4:	280ed43a 	srli	r7,r5,16
8111e4f8:	9225c83a 	sub	r18,r18,r8
8111e4fc:	2089883a 	add	r4,r4,r2
8111e500:	3909883a 	add	r4,r7,r4
8111e504:	1a47383a 	mul	r3,r3,r9
8111e508:	2080022e 	bgeu	r4,r2,8111e514 <__divdf3+0x438>
8111e50c:	00800074 	movhi	r2,1
8111e510:	1887883a 	add	r3,r3,r2
8111e514:	2004d43a 	srli	r2,r4,16
8111e518:	2008943a 	slli	r4,r4,16
8111e51c:	297fffcc 	andi	r5,r5,65535
8111e520:	10c7883a 	add	r3,r2,r3
8111e524:	2149883a 	add	r4,r4,r5
8111e528:	90c0a536 	bltu	r18,r3,8111e7c0 <__divdf3+0x6e4>
8111e52c:	90c0bf26 	beq	r18,r3,8111e82c <__divdf3+0x750>
8111e530:	90c7c83a 	sub	r3,r18,r3
8111e534:	810fc83a 	sub	r7,r16,r4
8111e538:	81e5803a 	cmpltu	r18,r16,r7
8111e53c:	1ca5c83a 	sub	r18,r3,r18
8111e540:	e480c126 	beq	fp,r18,8111e848 <__divdf3+0x76c>
8111e544:	a00b883a 	mov	r5,r20
8111e548:	9009883a 	mov	r4,r18
8111e54c:	d9800315 	stw	r6,12(sp)
8111e550:	d9c00215 	stw	r7,8(sp)
8111e554:	da400115 	stw	r9,4(sp)
8111e558:	111d5780 	call	8111d578 <__udivsi3>
8111e55c:	a00b883a 	mov	r5,r20
8111e560:	9009883a 	mov	r4,r18
8111e564:	d8800015 	stw	r2,0(sp)
8111e568:	111d5dc0 	call	8111d5dc <__umodsi3>
8111e56c:	d9c00217 	ldw	r7,8(sp)
8111e570:	da000017 	ldw	r8,0(sp)
8111e574:	1006943a 	slli	r3,r2,16
8111e578:	3804d43a 	srli	r2,r7,16
8111e57c:	ba21383a 	mul	r16,r23,r8
8111e580:	d9800317 	ldw	r6,12(sp)
8111e584:	10c4b03a 	or	r2,r2,r3
8111e588:	da400117 	ldw	r9,4(sp)
8111e58c:	1400062e 	bgeu	r2,r16,8111e5a8 <__divdf3+0x4cc>
8111e590:	1705883a 	add	r2,r2,fp
8111e594:	40ffffc4 	addi	r3,r8,-1
8111e598:	1700ad36 	bltu	r2,fp,8111e850 <__divdf3+0x774>
8111e59c:	1400ac2e 	bgeu	r2,r16,8111e850 <__divdf3+0x774>
8111e5a0:	423fff84 	addi	r8,r8,-2
8111e5a4:	1705883a 	add	r2,r2,fp
8111e5a8:	1421c83a 	sub	r16,r2,r16
8111e5ac:	a00b883a 	mov	r5,r20
8111e5b0:	8009883a 	mov	r4,r16
8111e5b4:	d9800315 	stw	r6,12(sp)
8111e5b8:	d9c00215 	stw	r7,8(sp)
8111e5bc:	da000015 	stw	r8,0(sp)
8111e5c0:	da400115 	stw	r9,4(sp)
8111e5c4:	111d5780 	call	8111d578 <__udivsi3>
8111e5c8:	8009883a 	mov	r4,r16
8111e5cc:	a00b883a 	mov	r5,r20
8111e5d0:	1025883a 	mov	r18,r2
8111e5d4:	111d5dc0 	call	8111d5dc <__umodsi3>
8111e5d8:	d9c00217 	ldw	r7,8(sp)
8111e5dc:	1004943a 	slli	r2,r2,16
8111e5e0:	bcaf383a 	mul	r23,r23,r18
8111e5e4:	393fffcc 	andi	r4,r7,65535
8111e5e8:	2088b03a 	or	r4,r4,r2
8111e5ec:	d9800317 	ldw	r6,12(sp)
8111e5f0:	da000017 	ldw	r8,0(sp)
8111e5f4:	da400117 	ldw	r9,4(sp)
8111e5f8:	25c0062e 	bgeu	r4,r23,8111e614 <__divdf3+0x538>
8111e5fc:	2709883a 	add	r4,r4,fp
8111e600:	90bfffc4 	addi	r2,r18,-1
8111e604:	27009436 	bltu	r4,fp,8111e858 <__divdf3+0x77c>
8111e608:	25c0932e 	bgeu	r4,r23,8111e858 <__divdf3+0x77c>
8111e60c:	94bfff84 	addi	r18,r18,-2
8111e610:	2709883a 	add	r4,r4,fp
8111e614:	4004943a 	slli	r2,r8,16
8111e618:	25efc83a 	sub	r23,r4,r23
8111e61c:	1490b03a 	or	r8,r2,r18
8111e620:	4008d43a 	srli	r4,r8,16
8111e624:	40ffffcc 	andi	r3,r8,65535
8111e628:	30c5383a 	mul	r2,r6,r3
8111e62c:	1a47383a 	mul	r3,r3,r9
8111e630:	310d383a 	mul	r6,r6,r4
8111e634:	100ad43a 	srli	r5,r2,16
8111e638:	4913383a 	mul	r9,r9,r4
8111e63c:	1987883a 	add	r3,r3,r6
8111e640:	28c7883a 	add	r3,r5,r3
8111e644:	1980022e 	bgeu	r3,r6,8111e650 <__divdf3+0x574>
8111e648:	01000074 	movhi	r4,1
8111e64c:	4913883a 	add	r9,r9,r4
8111e650:	1808d43a 	srli	r4,r3,16
8111e654:	1806943a 	slli	r3,r3,16
8111e658:	10bfffcc 	andi	r2,r2,65535
8111e65c:	2253883a 	add	r9,r4,r9
8111e660:	1887883a 	add	r3,r3,r2
8111e664:	ba403836 	bltu	r23,r9,8111e748 <__divdf3+0x66c>
8111e668:	ba403626 	beq	r23,r9,8111e744 <__divdf3+0x668>
8111e66c:	42000054 	ori	r8,r8,1
8111e670:	a880ffc4 	addi	r2,r21,1023
8111e674:	00bf570e 	bge	zero,r2,8111e3d4 <__reset+0xfb0fe3d4>
8111e678:	40c001cc 	andi	r3,r8,7
8111e67c:	18000726 	beq	r3,zero,8111e69c <__divdf3+0x5c0>
8111e680:	40c003cc 	andi	r3,r8,15
8111e684:	01000104 	movi	r4,4
8111e688:	19000426 	beq	r3,r4,8111e69c <__divdf3+0x5c0>
8111e68c:	4107883a 	add	r3,r8,r4
8111e690:	1a11803a 	cmpltu	r8,r3,r8
8111e694:	8a23883a 	add	r17,r17,r8
8111e698:	1811883a 	mov	r8,r3
8111e69c:	88c0402c 	andhi	r3,r17,256
8111e6a0:	18000426 	beq	r3,zero,8111e6b4 <__divdf3+0x5d8>
8111e6a4:	00ffc034 	movhi	r3,65280
8111e6a8:	18ffffc4 	addi	r3,r3,-1
8111e6ac:	a8810004 	addi	r2,r21,1024
8111e6b0:	88e2703a 	and	r17,r17,r3
8111e6b4:	00c1ff84 	movi	r3,2046
8111e6b8:	18bee316 	blt	r3,r2,8111e248 <__reset+0xfb0fe248>
8111e6bc:	8824977a 	slli	r18,r17,29
8111e6c0:	4010d0fa 	srli	r8,r8,3
8111e6c4:	8822927a 	slli	r17,r17,9
8111e6c8:	1081ffcc 	andi	r2,r2,2047
8111e6cc:	9224b03a 	or	r18,r18,r8
8111e6d0:	880ad33a 	srli	r5,r17,12
8111e6d4:	98c0004c 	andi	r3,r19,1
8111e6d8:	003edf06 	br	8111e258 <__reset+0xfb0fe258>
8111e6dc:	8080022c 	andhi	r2,r16,8
8111e6e0:	10001226 	beq	r2,zero,8111e72c <__divdf3+0x650>
8111e6e4:	8880022c 	andhi	r2,r17,8
8111e6e8:	1000101e 	bne	r2,zero,8111e72c <__divdf3+0x650>
8111e6ec:	00800434 	movhi	r2,16
8111e6f0:	89400234 	orhi	r5,r17,8
8111e6f4:	10bfffc4 	addi	r2,r2,-1
8111e6f8:	b007883a 	mov	r3,r22
8111e6fc:	288a703a 	and	r5,r5,r2
8111e700:	4025883a 	mov	r18,r8
8111e704:	003f3106 	br	8111e3cc <__reset+0xfb0fe3cc>
8111e708:	008000c4 	movi	r2,3
8111e70c:	3880a626 	beq	r7,r2,8111e9a8 <__divdf3+0x8cc>
8111e710:	00800044 	movi	r2,1
8111e714:	3880521e 	bne	r7,r2,8111e860 <__divdf3+0x784>
8111e718:	b807883a 	mov	r3,r23
8111e71c:	0005883a 	mov	r2,zero
8111e720:	000b883a 	mov	r5,zero
8111e724:	0025883a 	mov	r18,zero
8111e728:	003ecb06 	br	8111e258 <__reset+0xfb0fe258>
8111e72c:	00800434 	movhi	r2,16
8111e730:	81400234 	orhi	r5,r16,8
8111e734:	10bfffc4 	addi	r2,r2,-1
8111e738:	a007883a 	mov	r3,r20
8111e73c:	288a703a 	and	r5,r5,r2
8111e740:	003f2206 	br	8111e3cc <__reset+0xfb0fe3cc>
8111e744:	183fca26 	beq	r3,zero,8111e670 <__reset+0xfb0fe670>
8111e748:	e5ef883a 	add	r23,fp,r23
8111e74c:	40bfffc4 	addi	r2,r8,-1
8111e750:	bf00392e 	bgeu	r23,fp,8111e838 <__divdf3+0x75c>
8111e754:	1011883a 	mov	r8,r2
8111e758:	ba7fc41e 	bne	r23,r9,8111e66c <__reset+0xfb0fe66c>
8111e75c:	b0ffc31e 	bne	r22,r3,8111e66c <__reset+0xfb0fe66c>
8111e760:	003fc306 	br	8111e670 <__reset+0xfb0fe670>
8111e764:	143ff604 	addi	r16,r2,-40
8111e768:	9c20983a 	sll	r16,r19,r16
8111e76c:	0025883a 	mov	r18,zero
8111e770:	003ee206 	br	8111e2fc <__reset+0xfb0fe2fc>
8111e774:	d9800315 	stw	r6,12(sp)
8111e778:	d9c00215 	stw	r7,8(sp)
8111e77c:	110a0f40 	call	8110a0f4 <__clzsi2>
8111e780:	10800804 	addi	r2,r2,32
8111e784:	d9c00217 	ldw	r7,8(sp)
8111e788:	d9800317 	ldw	r6,12(sp)
8111e78c:	003ed106 	br	8111e2d4 <__reset+0xfb0fe2d4>
8111e790:	147ff604 	addi	r17,r2,-40
8111e794:	3462983a 	sll	r17,r6,r17
8111e798:	0011883a 	mov	r8,zero
8111e79c:	003ef506 	br	8111e374 <__reset+0xfb0fe374>
8111e7a0:	3009883a 	mov	r4,r6
8111e7a4:	d9800315 	stw	r6,12(sp)
8111e7a8:	da400115 	stw	r9,4(sp)
8111e7ac:	110a0f40 	call	8110a0f4 <__clzsi2>
8111e7b0:	10800804 	addi	r2,r2,32
8111e7b4:	da400117 	ldw	r9,4(sp)
8111e7b8:	d9800317 	ldw	r6,12(sp)
8111e7bc:	003ee306 	br	8111e34c <__reset+0xfb0fe34c>
8111e7c0:	85a1883a 	add	r16,r16,r22
8111e7c4:	8585803a 	cmpltu	r2,r16,r22
8111e7c8:	1705883a 	add	r2,r2,fp
8111e7cc:	14a5883a 	add	r18,r2,r18
8111e7d0:	88bfffc4 	addi	r2,r17,-1
8111e7d4:	e4800c2e 	bgeu	fp,r18,8111e808 <__divdf3+0x72c>
8111e7d8:	90c03e36 	bltu	r18,r3,8111e8d4 <__divdf3+0x7f8>
8111e7dc:	1c806926 	beq	r3,r18,8111e984 <__divdf3+0x8a8>
8111e7e0:	90c7c83a 	sub	r3,r18,r3
8111e7e4:	1023883a 	mov	r17,r2
8111e7e8:	003f5206 	br	8111e534 <__reset+0xfb0fe534>
8111e7ec:	923f0436 	bltu	r18,r8,8111e400 <__reset+0xfb0fe400>
8111e7f0:	800897fa 	slli	r4,r16,31
8111e7f4:	9004d07a 	srli	r2,r18,1
8111e7f8:	8006d07a 	srli	r3,r16,1
8111e7fc:	902097fa 	slli	r16,r18,31
8111e800:	20a4b03a 	or	r18,r4,r2
8111e804:	003f0106 	br	8111e40c <__reset+0xfb0fe40c>
8111e808:	e4bff51e 	bne	fp,r18,8111e7e0 <__reset+0xfb0fe7e0>
8111e80c:	85bff22e 	bgeu	r16,r22,8111e7d8 <__reset+0xfb0fe7d8>
8111e810:	e0c7c83a 	sub	r3,fp,r3
8111e814:	1023883a 	mov	r17,r2
8111e818:	003f4606 	br	8111e534 <__reset+0xfb0fe534>
8111e81c:	100f883a 	mov	r7,r2
8111e820:	003f2b06 	br	8111e4d0 <__reset+0xfb0fe4d0>
8111e824:	180d883a 	mov	r6,r3
8111e828:	003f1306 	br	8111e478 <__reset+0xfb0fe478>
8111e82c:	813fe436 	bltu	r16,r4,8111e7c0 <__reset+0xfb0fe7c0>
8111e830:	0007883a 	mov	r3,zero
8111e834:	003f3f06 	br	8111e534 <__reset+0xfb0fe534>
8111e838:	ba402c36 	bltu	r23,r9,8111e8ec <__divdf3+0x810>
8111e83c:	4dc05426 	beq	r9,r23,8111e990 <__divdf3+0x8b4>
8111e840:	1011883a 	mov	r8,r2
8111e844:	003f8906 	br	8111e66c <__reset+0xfb0fe66c>
8111e848:	023fffc4 	movi	r8,-1
8111e84c:	003f8806 	br	8111e670 <__reset+0xfb0fe670>
8111e850:	1811883a 	mov	r8,r3
8111e854:	003f5406 	br	8111e5a8 <__reset+0xfb0fe5a8>
8111e858:	1025883a 	mov	r18,r2
8111e85c:	003f6d06 	br	8111e614 <__reset+0xfb0fe614>
8111e860:	b827883a 	mov	r19,r23
8111e864:	003f8206 	br	8111e670 <__reset+0xfb0fe670>
8111e868:	010007c4 	movi	r4,31
8111e86c:	20c02616 	blt	r4,r3,8111e908 <__divdf3+0x82c>
8111e870:	00800804 	movi	r2,32
8111e874:	10c5c83a 	sub	r2,r2,r3
8111e878:	888a983a 	sll	r5,r17,r2
8111e87c:	40c8d83a 	srl	r4,r8,r3
8111e880:	4084983a 	sll	r2,r8,r2
8111e884:	88e2d83a 	srl	r17,r17,r3
8111e888:	2906b03a 	or	r3,r5,r4
8111e88c:	1004c03a 	cmpne	r2,r2,zero
8111e890:	1886b03a 	or	r3,r3,r2
8111e894:	188001cc 	andi	r2,r3,7
8111e898:	10000726 	beq	r2,zero,8111e8b8 <__divdf3+0x7dc>
8111e89c:	188003cc 	andi	r2,r3,15
8111e8a0:	01000104 	movi	r4,4
8111e8a4:	11000426 	beq	r2,r4,8111e8b8 <__divdf3+0x7dc>
8111e8a8:	1805883a 	mov	r2,r3
8111e8ac:	10c00104 	addi	r3,r2,4
8111e8b0:	1885803a 	cmpltu	r2,r3,r2
8111e8b4:	88a3883a 	add	r17,r17,r2
8111e8b8:	8880202c 	andhi	r2,r17,128
8111e8bc:	10002726 	beq	r2,zero,8111e95c <__divdf3+0x880>
8111e8c0:	98c0004c 	andi	r3,r19,1
8111e8c4:	00800044 	movi	r2,1
8111e8c8:	000b883a 	mov	r5,zero
8111e8cc:	0025883a 	mov	r18,zero
8111e8d0:	003e6106 	br	8111e258 <__reset+0xfb0fe258>
8111e8d4:	85a1883a 	add	r16,r16,r22
8111e8d8:	8585803a 	cmpltu	r2,r16,r22
8111e8dc:	1705883a 	add	r2,r2,fp
8111e8e0:	14a5883a 	add	r18,r2,r18
8111e8e4:	8c7fff84 	addi	r17,r17,-2
8111e8e8:	003f1106 	br	8111e530 <__reset+0xfb0fe530>
8111e8ec:	b589883a 	add	r4,r22,r22
8111e8f0:	25ad803a 	cmpltu	r22,r4,r22
8111e8f4:	b739883a 	add	fp,r22,fp
8111e8f8:	40bfff84 	addi	r2,r8,-2
8111e8fc:	bf2f883a 	add	r23,r23,fp
8111e900:	202d883a 	mov	r22,r4
8111e904:	003f9306 	br	8111e754 <__reset+0xfb0fe754>
8111e908:	013ff844 	movi	r4,-31
8111e90c:	2085c83a 	sub	r2,r4,r2
8111e910:	8888d83a 	srl	r4,r17,r2
8111e914:	00800804 	movi	r2,32
8111e918:	18802126 	beq	r3,r2,8111e9a0 <__divdf3+0x8c4>
8111e91c:	00801004 	movi	r2,64
8111e920:	10c5c83a 	sub	r2,r2,r3
8111e924:	8884983a 	sll	r2,r17,r2
8111e928:	1204b03a 	or	r2,r2,r8
8111e92c:	1004c03a 	cmpne	r2,r2,zero
8111e930:	2084b03a 	or	r2,r4,r2
8111e934:	144001cc 	andi	r17,r2,7
8111e938:	88000d1e 	bne	r17,zero,8111e970 <__divdf3+0x894>
8111e93c:	000b883a 	mov	r5,zero
8111e940:	1024d0fa 	srli	r18,r2,3
8111e944:	98c0004c 	andi	r3,r19,1
8111e948:	0005883a 	mov	r2,zero
8111e94c:	9464b03a 	or	r18,r18,r17
8111e950:	003e4106 	br	8111e258 <__reset+0xfb0fe258>
8111e954:	1007883a 	mov	r3,r2
8111e958:	0023883a 	mov	r17,zero
8111e95c:	880a927a 	slli	r5,r17,9
8111e960:	1805883a 	mov	r2,r3
8111e964:	8822977a 	slli	r17,r17,29
8111e968:	280ad33a 	srli	r5,r5,12
8111e96c:	003ff406 	br	8111e940 <__reset+0xfb0fe940>
8111e970:	10c003cc 	andi	r3,r2,15
8111e974:	01000104 	movi	r4,4
8111e978:	193ff626 	beq	r3,r4,8111e954 <__reset+0xfb0fe954>
8111e97c:	0023883a 	mov	r17,zero
8111e980:	003fca06 	br	8111e8ac <__reset+0xfb0fe8ac>
8111e984:	813fd336 	bltu	r16,r4,8111e8d4 <__reset+0xfb0fe8d4>
8111e988:	1023883a 	mov	r17,r2
8111e98c:	003fa806 	br	8111e830 <__reset+0xfb0fe830>
8111e990:	b0ffd636 	bltu	r22,r3,8111e8ec <__reset+0xfb0fe8ec>
8111e994:	1011883a 	mov	r8,r2
8111e998:	b0ff341e 	bne	r22,r3,8111e66c <__reset+0xfb0fe66c>
8111e99c:	003f3406 	br	8111e670 <__reset+0xfb0fe670>
8111e9a0:	0005883a 	mov	r2,zero
8111e9a4:	003fe006 	br	8111e928 <__reset+0xfb0fe928>
8111e9a8:	00800434 	movhi	r2,16
8111e9ac:	89400234 	orhi	r5,r17,8
8111e9b0:	10bfffc4 	addi	r2,r2,-1
8111e9b4:	b807883a 	mov	r3,r23
8111e9b8:	288a703a 	and	r5,r5,r2
8111e9bc:	4025883a 	mov	r18,r8
8111e9c0:	003e8206 	br	8111e3cc <__reset+0xfb0fe3cc>

8111e9c4 <__eqdf2>:
8111e9c4:	2804d53a 	srli	r2,r5,20
8111e9c8:	3806d53a 	srli	r3,r7,20
8111e9cc:	02000434 	movhi	r8,16
8111e9d0:	423fffc4 	addi	r8,r8,-1
8111e9d4:	1081ffcc 	andi	r2,r2,2047
8111e9d8:	0281ffc4 	movi	r10,2047
8111e9dc:	2a12703a 	and	r9,r5,r8
8111e9e0:	18c1ffcc 	andi	r3,r3,2047
8111e9e4:	3a10703a 	and	r8,r7,r8
8111e9e8:	280ad7fa 	srli	r5,r5,31
8111e9ec:	380ed7fa 	srli	r7,r7,31
8111e9f0:	12801026 	beq	r2,r10,8111ea34 <__eqdf2+0x70>
8111e9f4:	0281ffc4 	movi	r10,2047
8111e9f8:	1a800a26 	beq	r3,r10,8111ea24 <__eqdf2+0x60>
8111e9fc:	10c00226 	beq	r2,r3,8111ea08 <__eqdf2+0x44>
8111ea00:	00800044 	movi	r2,1
8111ea04:	f800283a 	ret
8111ea08:	4a3ffd1e 	bne	r9,r8,8111ea00 <__reset+0xfb0fea00>
8111ea0c:	21bffc1e 	bne	r4,r6,8111ea00 <__reset+0xfb0fea00>
8111ea10:	29c00c26 	beq	r5,r7,8111ea44 <__eqdf2+0x80>
8111ea14:	103ffa1e 	bne	r2,zero,8111ea00 <__reset+0xfb0fea00>
8111ea18:	2244b03a 	or	r2,r4,r9
8111ea1c:	1004c03a 	cmpne	r2,r2,zero
8111ea20:	f800283a 	ret
8111ea24:	3214b03a 	or	r10,r6,r8
8111ea28:	503ff426 	beq	r10,zero,8111e9fc <__reset+0xfb0fe9fc>
8111ea2c:	00800044 	movi	r2,1
8111ea30:	f800283a 	ret
8111ea34:	2254b03a 	or	r10,r4,r9
8111ea38:	503fee26 	beq	r10,zero,8111e9f4 <__reset+0xfb0fe9f4>
8111ea3c:	00800044 	movi	r2,1
8111ea40:	f800283a 	ret
8111ea44:	0005883a 	mov	r2,zero
8111ea48:	f800283a 	ret

8111ea4c <__gedf2>:
8111ea4c:	2804d53a 	srli	r2,r5,20
8111ea50:	3806d53a 	srli	r3,r7,20
8111ea54:	02000434 	movhi	r8,16
8111ea58:	423fffc4 	addi	r8,r8,-1
8111ea5c:	1081ffcc 	andi	r2,r2,2047
8111ea60:	0241ffc4 	movi	r9,2047
8111ea64:	2a14703a 	and	r10,r5,r8
8111ea68:	18c1ffcc 	andi	r3,r3,2047
8111ea6c:	3a10703a 	and	r8,r7,r8
8111ea70:	280ad7fa 	srli	r5,r5,31
8111ea74:	380ed7fa 	srli	r7,r7,31
8111ea78:	12401d26 	beq	r2,r9,8111eaf0 <__gedf2+0xa4>
8111ea7c:	0241ffc4 	movi	r9,2047
8111ea80:	1a401226 	beq	r3,r9,8111eacc <__gedf2+0x80>
8111ea84:	1000081e 	bne	r2,zero,8111eaa8 <__gedf2+0x5c>
8111ea88:	2296b03a 	or	r11,r4,r10
8111ea8c:	5813003a 	cmpeq	r9,r11,zero
8111ea90:	1800091e 	bne	r3,zero,8111eab8 <__gedf2+0x6c>
8111ea94:	3218b03a 	or	r12,r6,r8
8111ea98:	6000071e 	bne	r12,zero,8111eab8 <__gedf2+0x6c>
8111ea9c:	0005883a 	mov	r2,zero
8111eaa0:	5800101e 	bne	r11,zero,8111eae4 <__gedf2+0x98>
8111eaa4:	f800283a 	ret
8111eaa8:	18000c1e 	bne	r3,zero,8111eadc <__gedf2+0x90>
8111eaac:	3212b03a 	or	r9,r6,r8
8111eab0:	48000c26 	beq	r9,zero,8111eae4 <__gedf2+0x98>
8111eab4:	0013883a 	mov	r9,zero
8111eab8:	39c03fcc 	andi	r7,r7,255
8111eabc:	48000826 	beq	r9,zero,8111eae0 <__gedf2+0x94>
8111eac0:	38000926 	beq	r7,zero,8111eae8 <__gedf2+0x9c>
8111eac4:	00800044 	movi	r2,1
8111eac8:	f800283a 	ret
8111eacc:	3212b03a 	or	r9,r6,r8
8111ead0:	483fec26 	beq	r9,zero,8111ea84 <__reset+0xfb0fea84>
8111ead4:	00bfff84 	movi	r2,-2
8111ead8:	f800283a 	ret
8111eadc:	39c03fcc 	andi	r7,r7,255
8111eae0:	29c00626 	beq	r5,r7,8111eafc <__gedf2+0xb0>
8111eae4:	283ff726 	beq	r5,zero,8111eac4 <__reset+0xfb0feac4>
8111eae8:	00bfffc4 	movi	r2,-1
8111eaec:	f800283a 	ret
8111eaf0:	2292b03a 	or	r9,r4,r10
8111eaf4:	483fe126 	beq	r9,zero,8111ea7c <__reset+0xfb0fea7c>
8111eaf8:	003ff606 	br	8111ead4 <__reset+0xfb0fead4>
8111eafc:	18bff916 	blt	r3,r2,8111eae4 <__reset+0xfb0feae4>
8111eb00:	10c00316 	blt	r2,r3,8111eb10 <__gedf2+0xc4>
8111eb04:	42bff736 	bltu	r8,r10,8111eae4 <__reset+0xfb0feae4>
8111eb08:	52000326 	beq	r10,r8,8111eb18 <__gedf2+0xcc>
8111eb0c:	5200042e 	bgeu	r10,r8,8111eb20 <__gedf2+0xd4>
8111eb10:	283fec1e 	bne	r5,zero,8111eac4 <__reset+0xfb0feac4>
8111eb14:	003ff406 	br	8111eae8 <__reset+0xfb0feae8>
8111eb18:	313ff236 	bltu	r6,r4,8111eae4 <__reset+0xfb0feae4>
8111eb1c:	21bffc36 	bltu	r4,r6,8111eb10 <__reset+0xfb0feb10>
8111eb20:	0005883a 	mov	r2,zero
8111eb24:	f800283a 	ret

8111eb28 <__ledf2>:
8111eb28:	2804d53a 	srli	r2,r5,20
8111eb2c:	3810d53a 	srli	r8,r7,20
8111eb30:	00c00434 	movhi	r3,16
8111eb34:	18ffffc4 	addi	r3,r3,-1
8111eb38:	1081ffcc 	andi	r2,r2,2047
8111eb3c:	0241ffc4 	movi	r9,2047
8111eb40:	28d4703a 	and	r10,r5,r3
8111eb44:	4201ffcc 	andi	r8,r8,2047
8111eb48:	38c6703a 	and	r3,r7,r3
8111eb4c:	280ad7fa 	srli	r5,r5,31
8111eb50:	380ed7fa 	srli	r7,r7,31
8111eb54:	12401f26 	beq	r2,r9,8111ebd4 <__ledf2+0xac>
8111eb58:	0241ffc4 	movi	r9,2047
8111eb5c:	42401426 	beq	r8,r9,8111ebb0 <__ledf2+0x88>
8111eb60:	1000091e 	bne	r2,zero,8111eb88 <__ledf2+0x60>
8111eb64:	2296b03a 	or	r11,r4,r10
8111eb68:	5813003a 	cmpeq	r9,r11,zero
8111eb6c:	29403fcc 	andi	r5,r5,255
8111eb70:	40000a1e 	bne	r8,zero,8111eb9c <__ledf2+0x74>
8111eb74:	30d8b03a 	or	r12,r6,r3
8111eb78:	6000081e 	bne	r12,zero,8111eb9c <__ledf2+0x74>
8111eb7c:	0005883a 	mov	r2,zero
8111eb80:	5800111e 	bne	r11,zero,8111ebc8 <__ledf2+0xa0>
8111eb84:	f800283a 	ret
8111eb88:	29403fcc 	andi	r5,r5,255
8111eb8c:	40000c1e 	bne	r8,zero,8111ebc0 <__ledf2+0x98>
8111eb90:	30d2b03a 	or	r9,r6,r3
8111eb94:	48000c26 	beq	r9,zero,8111ebc8 <__ledf2+0xa0>
8111eb98:	0013883a 	mov	r9,zero
8111eb9c:	39c03fcc 	andi	r7,r7,255
8111eba0:	48000826 	beq	r9,zero,8111ebc4 <__ledf2+0x9c>
8111eba4:	38001126 	beq	r7,zero,8111ebec <__ledf2+0xc4>
8111eba8:	00800044 	movi	r2,1
8111ebac:	f800283a 	ret
8111ebb0:	30d2b03a 	or	r9,r6,r3
8111ebb4:	483fea26 	beq	r9,zero,8111eb60 <__reset+0xfb0feb60>
8111ebb8:	00800084 	movi	r2,2
8111ebbc:	f800283a 	ret
8111ebc0:	39c03fcc 	andi	r7,r7,255
8111ebc4:	39400726 	beq	r7,r5,8111ebe4 <__ledf2+0xbc>
8111ebc8:	2800081e 	bne	r5,zero,8111ebec <__ledf2+0xc4>
8111ebcc:	00800044 	movi	r2,1
8111ebd0:	f800283a 	ret
8111ebd4:	2292b03a 	or	r9,r4,r10
8111ebd8:	483fdf26 	beq	r9,zero,8111eb58 <__reset+0xfb0feb58>
8111ebdc:	00800084 	movi	r2,2
8111ebe0:	f800283a 	ret
8111ebe4:	4080030e 	bge	r8,r2,8111ebf4 <__ledf2+0xcc>
8111ebe8:	383fef26 	beq	r7,zero,8111eba8 <__reset+0xfb0feba8>
8111ebec:	00bfffc4 	movi	r2,-1
8111ebf0:	f800283a 	ret
8111ebf4:	123feb16 	blt	r2,r8,8111eba4 <__reset+0xfb0feba4>
8111ebf8:	1abff336 	bltu	r3,r10,8111ebc8 <__reset+0xfb0febc8>
8111ebfc:	50c00326 	beq	r10,r3,8111ec0c <__ledf2+0xe4>
8111ec00:	50c0042e 	bgeu	r10,r3,8111ec14 <__ledf2+0xec>
8111ec04:	283fe81e 	bne	r5,zero,8111eba8 <__reset+0xfb0feba8>
8111ec08:	003ff806 	br	8111ebec <__reset+0xfb0febec>
8111ec0c:	313fee36 	bltu	r6,r4,8111ebc8 <__reset+0xfb0febc8>
8111ec10:	21bffc36 	bltu	r4,r6,8111ec04 <__reset+0xfb0fec04>
8111ec14:	0005883a 	mov	r2,zero
8111ec18:	f800283a 	ret

8111ec1c <__subdf3>:
8111ec1c:	02000434 	movhi	r8,16
8111ec20:	423fffc4 	addi	r8,r8,-1
8111ec24:	defffb04 	addi	sp,sp,-20
8111ec28:	2a14703a 	and	r10,r5,r8
8111ec2c:	3812d53a 	srli	r9,r7,20
8111ec30:	3a10703a 	and	r8,r7,r8
8111ec34:	2006d77a 	srli	r3,r4,29
8111ec38:	3004d77a 	srli	r2,r6,29
8111ec3c:	dc000015 	stw	r16,0(sp)
8111ec40:	501490fa 	slli	r10,r10,3
8111ec44:	2820d53a 	srli	r16,r5,20
8111ec48:	401090fa 	slli	r8,r8,3
8111ec4c:	dc800215 	stw	r18,8(sp)
8111ec50:	dc400115 	stw	r17,4(sp)
8111ec54:	dfc00415 	stw	ra,16(sp)
8111ec58:	202290fa 	slli	r17,r4,3
8111ec5c:	dcc00315 	stw	r19,12(sp)
8111ec60:	4a41ffcc 	andi	r9,r9,2047
8111ec64:	0101ffc4 	movi	r4,2047
8111ec68:	2824d7fa 	srli	r18,r5,31
8111ec6c:	8401ffcc 	andi	r16,r16,2047
8111ec70:	50c6b03a 	or	r3,r10,r3
8111ec74:	380ed7fa 	srli	r7,r7,31
8111ec78:	408ab03a 	or	r5,r8,r2
8111ec7c:	300c90fa 	slli	r6,r6,3
8111ec80:	49009626 	beq	r9,r4,8111eedc <__subdf3+0x2c0>
8111ec84:	39c0005c 	xori	r7,r7,1
8111ec88:	8245c83a 	sub	r2,r16,r9
8111ec8c:	3c807426 	beq	r7,r18,8111ee60 <__subdf3+0x244>
8111ec90:	0080af0e 	bge	zero,r2,8111ef50 <__subdf3+0x334>
8111ec94:	48002a1e 	bne	r9,zero,8111ed40 <__subdf3+0x124>
8111ec98:	2988b03a 	or	r4,r5,r6
8111ec9c:	20009a1e 	bne	r4,zero,8111ef08 <__subdf3+0x2ec>
8111eca0:	888001cc 	andi	r2,r17,7
8111eca4:	10000726 	beq	r2,zero,8111ecc4 <__subdf3+0xa8>
8111eca8:	888003cc 	andi	r2,r17,15
8111ecac:	01000104 	movi	r4,4
8111ecb0:	11000426 	beq	r2,r4,8111ecc4 <__subdf3+0xa8>
8111ecb4:	890b883a 	add	r5,r17,r4
8111ecb8:	2c63803a 	cmpltu	r17,r5,r17
8111ecbc:	1c47883a 	add	r3,r3,r17
8111ecc0:	2823883a 	mov	r17,r5
8111ecc4:	1880202c 	andhi	r2,r3,128
8111ecc8:	10005926 	beq	r2,zero,8111ee30 <__subdf3+0x214>
8111eccc:	84000044 	addi	r16,r16,1
8111ecd0:	0081ffc4 	movi	r2,2047
8111ecd4:	8080be26 	beq	r16,r2,8111efd0 <__subdf3+0x3b4>
8111ecd8:	017fe034 	movhi	r5,65408
8111ecdc:	297fffc4 	addi	r5,r5,-1
8111ece0:	1946703a 	and	r3,r3,r5
8111ece4:	1804977a 	slli	r2,r3,29
8111ece8:	1806927a 	slli	r3,r3,9
8111ecec:	8822d0fa 	srli	r17,r17,3
8111ecf0:	8401ffcc 	andi	r16,r16,2047
8111ecf4:	180ad33a 	srli	r5,r3,12
8111ecf8:	9100004c 	andi	r4,r18,1
8111ecfc:	1444b03a 	or	r2,r2,r17
8111ed00:	80c1ffcc 	andi	r3,r16,2047
8111ed04:	1820953a 	slli	r16,r3,20
8111ed08:	20c03fcc 	andi	r3,r4,255
8111ed0c:	180897fa 	slli	r4,r3,31
8111ed10:	00c00434 	movhi	r3,16
8111ed14:	18ffffc4 	addi	r3,r3,-1
8111ed18:	28c6703a 	and	r3,r5,r3
8111ed1c:	1c06b03a 	or	r3,r3,r16
8111ed20:	1906b03a 	or	r3,r3,r4
8111ed24:	dfc00417 	ldw	ra,16(sp)
8111ed28:	dcc00317 	ldw	r19,12(sp)
8111ed2c:	dc800217 	ldw	r18,8(sp)
8111ed30:	dc400117 	ldw	r17,4(sp)
8111ed34:	dc000017 	ldw	r16,0(sp)
8111ed38:	dec00504 	addi	sp,sp,20
8111ed3c:	f800283a 	ret
8111ed40:	0101ffc4 	movi	r4,2047
8111ed44:	813fd626 	beq	r16,r4,8111eca0 <__reset+0xfb0feca0>
8111ed48:	29402034 	orhi	r5,r5,128
8111ed4c:	01000e04 	movi	r4,56
8111ed50:	2080a316 	blt	r4,r2,8111efe0 <__subdf3+0x3c4>
8111ed54:	010007c4 	movi	r4,31
8111ed58:	2080c616 	blt	r4,r2,8111f074 <__subdf3+0x458>
8111ed5c:	01000804 	movi	r4,32
8111ed60:	2089c83a 	sub	r4,r4,r2
8111ed64:	2910983a 	sll	r8,r5,r4
8111ed68:	308ed83a 	srl	r7,r6,r2
8111ed6c:	3108983a 	sll	r4,r6,r4
8111ed70:	2884d83a 	srl	r2,r5,r2
8111ed74:	41ccb03a 	or	r6,r8,r7
8111ed78:	2008c03a 	cmpne	r4,r4,zero
8111ed7c:	310cb03a 	or	r6,r6,r4
8111ed80:	898dc83a 	sub	r6,r17,r6
8111ed84:	89a3803a 	cmpltu	r17,r17,r6
8111ed88:	1887c83a 	sub	r3,r3,r2
8111ed8c:	1c47c83a 	sub	r3,r3,r17
8111ed90:	3023883a 	mov	r17,r6
8111ed94:	1880202c 	andhi	r2,r3,128
8111ed98:	10002326 	beq	r2,zero,8111ee28 <__subdf3+0x20c>
8111ed9c:	04c02034 	movhi	r19,128
8111eda0:	9cffffc4 	addi	r19,r19,-1
8111eda4:	1ce6703a 	and	r19,r3,r19
8111eda8:	98007a26 	beq	r19,zero,8111ef94 <__subdf3+0x378>
8111edac:	9809883a 	mov	r4,r19
8111edb0:	110a0f40 	call	8110a0f4 <__clzsi2>
8111edb4:	113ffe04 	addi	r4,r2,-8
8111edb8:	00c007c4 	movi	r3,31
8111edbc:	19007b16 	blt	r3,r4,8111efac <__subdf3+0x390>
8111edc0:	00800804 	movi	r2,32
8111edc4:	1105c83a 	sub	r2,r2,r4
8111edc8:	8884d83a 	srl	r2,r17,r2
8111edcc:	9906983a 	sll	r3,r19,r4
8111edd0:	8922983a 	sll	r17,r17,r4
8111edd4:	10c4b03a 	or	r2,r2,r3
8111edd8:	24007816 	blt	r4,r16,8111efbc <__subdf3+0x3a0>
8111eddc:	2421c83a 	sub	r16,r4,r16
8111ede0:	80c00044 	addi	r3,r16,1
8111ede4:	010007c4 	movi	r4,31
8111ede8:	20c09516 	blt	r4,r3,8111f040 <__subdf3+0x424>
8111edec:	01400804 	movi	r5,32
8111edf0:	28cbc83a 	sub	r5,r5,r3
8111edf4:	88c8d83a 	srl	r4,r17,r3
8111edf8:	8962983a 	sll	r17,r17,r5
8111edfc:	114a983a 	sll	r5,r2,r5
8111ee00:	10c6d83a 	srl	r3,r2,r3
8111ee04:	8804c03a 	cmpne	r2,r17,zero
8111ee08:	290ab03a 	or	r5,r5,r4
8111ee0c:	28a2b03a 	or	r17,r5,r2
8111ee10:	0021883a 	mov	r16,zero
8111ee14:	003fa206 	br	8111eca0 <__reset+0xfb0feca0>
8111ee18:	2090b03a 	or	r8,r4,r2
8111ee1c:	40018e26 	beq	r8,zero,8111f458 <__subdf3+0x83c>
8111ee20:	1007883a 	mov	r3,r2
8111ee24:	2023883a 	mov	r17,r4
8111ee28:	888001cc 	andi	r2,r17,7
8111ee2c:	103f9e1e 	bne	r2,zero,8111eca8 <__reset+0xfb0feca8>
8111ee30:	1804977a 	slli	r2,r3,29
8111ee34:	8822d0fa 	srli	r17,r17,3
8111ee38:	1810d0fa 	srli	r8,r3,3
8111ee3c:	9100004c 	andi	r4,r18,1
8111ee40:	1444b03a 	or	r2,r2,r17
8111ee44:	00c1ffc4 	movi	r3,2047
8111ee48:	80c02826 	beq	r16,r3,8111eeec <__subdf3+0x2d0>
8111ee4c:	01400434 	movhi	r5,16
8111ee50:	297fffc4 	addi	r5,r5,-1
8111ee54:	80e0703a 	and	r16,r16,r3
8111ee58:	414a703a 	and	r5,r8,r5
8111ee5c:	003fa806 	br	8111ed00 <__reset+0xfb0fed00>
8111ee60:	0080630e 	bge	zero,r2,8111eff0 <__subdf3+0x3d4>
8111ee64:	48003026 	beq	r9,zero,8111ef28 <__subdf3+0x30c>
8111ee68:	0101ffc4 	movi	r4,2047
8111ee6c:	813f8c26 	beq	r16,r4,8111eca0 <__reset+0xfb0feca0>
8111ee70:	29402034 	orhi	r5,r5,128
8111ee74:	01000e04 	movi	r4,56
8111ee78:	2080a90e 	bge	r4,r2,8111f120 <__subdf3+0x504>
8111ee7c:	298cb03a 	or	r6,r5,r6
8111ee80:	3012c03a 	cmpne	r9,r6,zero
8111ee84:	0005883a 	mov	r2,zero
8111ee88:	4c53883a 	add	r9,r9,r17
8111ee8c:	4c63803a 	cmpltu	r17,r9,r17
8111ee90:	10c7883a 	add	r3,r2,r3
8111ee94:	88c7883a 	add	r3,r17,r3
8111ee98:	4823883a 	mov	r17,r9
8111ee9c:	1880202c 	andhi	r2,r3,128
8111eea0:	1000d026 	beq	r2,zero,8111f1e4 <__subdf3+0x5c8>
8111eea4:	84000044 	addi	r16,r16,1
8111eea8:	0081ffc4 	movi	r2,2047
8111eeac:	8080fe26 	beq	r16,r2,8111f2a8 <__subdf3+0x68c>
8111eeb0:	00bfe034 	movhi	r2,65408
8111eeb4:	10bfffc4 	addi	r2,r2,-1
8111eeb8:	1886703a 	and	r3,r3,r2
8111eebc:	880ad07a 	srli	r5,r17,1
8111eec0:	180497fa 	slli	r2,r3,31
8111eec4:	8900004c 	andi	r4,r17,1
8111eec8:	2922b03a 	or	r17,r5,r4
8111eecc:	1806d07a 	srli	r3,r3,1
8111eed0:	1462b03a 	or	r17,r2,r17
8111eed4:	3825883a 	mov	r18,r7
8111eed8:	003f7106 	br	8111eca0 <__reset+0xfb0feca0>
8111eedc:	2984b03a 	or	r2,r5,r6
8111eee0:	103f6826 	beq	r2,zero,8111ec84 <__reset+0xfb0fec84>
8111eee4:	39c03fcc 	andi	r7,r7,255
8111eee8:	003f6706 	br	8111ec88 <__reset+0xfb0fec88>
8111eeec:	4086b03a 	or	r3,r8,r2
8111eef0:	18015226 	beq	r3,zero,8111f43c <__subdf3+0x820>
8111eef4:	00c00434 	movhi	r3,16
8111eef8:	41400234 	orhi	r5,r8,8
8111eefc:	18ffffc4 	addi	r3,r3,-1
8111ef00:	28ca703a 	and	r5,r5,r3
8111ef04:	003f7e06 	br	8111ed00 <__reset+0xfb0fed00>
8111ef08:	10bfffc4 	addi	r2,r2,-1
8111ef0c:	1000491e 	bne	r2,zero,8111f034 <__subdf3+0x418>
8111ef10:	898fc83a 	sub	r7,r17,r6
8111ef14:	89e3803a 	cmpltu	r17,r17,r7
8111ef18:	1947c83a 	sub	r3,r3,r5
8111ef1c:	1c47c83a 	sub	r3,r3,r17
8111ef20:	3823883a 	mov	r17,r7
8111ef24:	003f9b06 	br	8111ed94 <__reset+0xfb0fed94>
8111ef28:	2988b03a 	or	r4,r5,r6
8111ef2c:	203f5c26 	beq	r4,zero,8111eca0 <__reset+0xfb0feca0>
8111ef30:	10bfffc4 	addi	r2,r2,-1
8111ef34:	1000931e 	bne	r2,zero,8111f184 <__subdf3+0x568>
8111ef38:	898d883a 	add	r6,r17,r6
8111ef3c:	3463803a 	cmpltu	r17,r6,r17
8111ef40:	1947883a 	add	r3,r3,r5
8111ef44:	88c7883a 	add	r3,r17,r3
8111ef48:	3023883a 	mov	r17,r6
8111ef4c:	003fd306 	br	8111ee9c <__reset+0xfb0fee9c>
8111ef50:	1000541e 	bne	r2,zero,8111f0a4 <__subdf3+0x488>
8111ef54:	80800044 	addi	r2,r16,1
8111ef58:	1081ffcc 	andi	r2,r2,2047
8111ef5c:	01000044 	movi	r4,1
8111ef60:	2080a20e 	bge	r4,r2,8111f1ec <__subdf3+0x5d0>
8111ef64:	8989c83a 	sub	r4,r17,r6
8111ef68:	8905803a 	cmpltu	r2,r17,r4
8111ef6c:	1967c83a 	sub	r19,r3,r5
8111ef70:	98a7c83a 	sub	r19,r19,r2
8111ef74:	9880202c 	andhi	r2,r19,128
8111ef78:	10006326 	beq	r2,zero,8111f108 <__subdf3+0x4ec>
8111ef7c:	3463c83a 	sub	r17,r6,r17
8111ef80:	28c7c83a 	sub	r3,r5,r3
8111ef84:	344d803a 	cmpltu	r6,r6,r17
8111ef88:	19a7c83a 	sub	r19,r3,r6
8111ef8c:	3825883a 	mov	r18,r7
8111ef90:	983f861e 	bne	r19,zero,8111edac <__reset+0xfb0fedac>
8111ef94:	8809883a 	mov	r4,r17
8111ef98:	110a0f40 	call	8110a0f4 <__clzsi2>
8111ef9c:	10800804 	addi	r2,r2,32
8111efa0:	113ffe04 	addi	r4,r2,-8
8111efa4:	00c007c4 	movi	r3,31
8111efa8:	193f850e 	bge	r3,r4,8111edc0 <__reset+0xfb0fedc0>
8111efac:	10bff604 	addi	r2,r2,-40
8111efb0:	8884983a 	sll	r2,r17,r2
8111efb4:	0023883a 	mov	r17,zero
8111efb8:	243f880e 	bge	r4,r16,8111eddc <__reset+0xfb0feddc>
8111efbc:	00ffe034 	movhi	r3,65408
8111efc0:	18ffffc4 	addi	r3,r3,-1
8111efc4:	8121c83a 	sub	r16,r16,r4
8111efc8:	10c6703a 	and	r3,r2,r3
8111efcc:	003f3406 	br	8111eca0 <__reset+0xfb0feca0>
8111efd0:	9100004c 	andi	r4,r18,1
8111efd4:	000b883a 	mov	r5,zero
8111efd8:	0005883a 	mov	r2,zero
8111efdc:	003f4806 	br	8111ed00 <__reset+0xfb0fed00>
8111efe0:	298cb03a 	or	r6,r5,r6
8111efe4:	300cc03a 	cmpne	r6,r6,zero
8111efe8:	0005883a 	mov	r2,zero
8111efec:	003f6406 	br	8111ed80 <__reset+0xfb0fed80>
8111eff0:	10009a1e 	bne	r2,zero,8111f25c <__subdf3+0x640>
8111eff4:	82400044 	addi	r9,r16,1
8111eff8:	4881ffcc 	andi	r2,r9,2047
8111effc:	02800044 	movi	r10,1
8111f000:	5080670e 	bge	r10,r2,8111f1a0 <__subdf3+0x584>
8111f004:	0081ffc4 	movi	r2,2047
8111f008:	4880af26 	beq	r9,r2,8111f2c8 <__subdf3+0x6ac>
8111f00c:	898d883a 	add	r6,r17,r6
8111f010:	1945883a 	add	r2,r3,r5
8111f014:	3447803a 	cmpltu	r3,r6,r17
8111f018:	1887883a 	add	r3,r3,r2
8111f01c:	182297fa 	slli	r17,r3,31
8111f020:	300cd07a 	srli	r6,r6,1
8111f024:	1806d07a 	srli	r3,r3,1
8111f028:	4821883a 	mov	r16,r9
8111f02c:	89a2b03a 	or	r17,r17,r6
8111f030:	003f1b06 	br	8111eca0 <__reset+0xfb0feca0>
8111f034:	0101ffc4 	movi	r4,2047
8111f038:	813f441e 	bne	r16,r4,8111ed4c <__reset+0xfb0fed4c>
8111f03c:	003f1806 	br	8111eca0 <__reset+0xfb0feca0>
8111f040:	843ff844 	addi	r16,r16,-31
8111f044:	01400804 	movi	r5,32
8111f048:	1408d83a 	srl	r4,r2,r16
8111f04c:	19405026 	beq	r3,r5,8111f190 <__subdf3+0x574>
8111f050:	01401004 	movi	r5,64
8111f054:	28c7c83a 	sub	r3,r5,r3
8111f058:	10c4983a 	sll	r2,r2,r3
8111f05c:	88a2b03a 	or	r17,r17,r2
8111f060:	8822c03a 	cmpne	r17,r17,zero
8111f064:	2462b03a 	or	r17,r4,r17
8111f068:	0007883a 	mov	r3,zero
8111f06c:	0021883a 	mov	r16,zero
8111f070:	003f6d06 	br	8111ee28 <__reset+0xfb0fee28>
8111f074:	11fff804 	addi	r7,r2,-32
8111f078:	01000804 	movi	r4,32
8111f07c:	29ced83a 	srl	r7,r5,r7
8111f080:	11004526 	beq	r2,r4,8111f198 <__subdf3+0x57c>
8111f084:	01001004 	movi	r4,64
8111f088:	2089c83a 	sub	r4,r4,r2
8111f08c:	2904983a 	sll	r2,r5,r4
8111f090:	118cb03a 	or	r6,r2,r6
8111f094:	300cc03a 	cmpne	r6,r6,zero
8111f098:	398cb03a 	or	r6,r7,r6
8111f09c:	0005883a 	mov	r2,zero
8111f0a0:	003f3706 	br	8111ed80 <__reset+0xfb0fed80>
8111f0a4:	80002a26 	beq	r16,zero,8111f150 <__subdf3+0x534>
8111f0a8:	0101ffc4 	movi	r4,2047
8111f0ac:	49006626 	beq	r9,r4,8111f248 <__subdf3+0x62c>
8111f0b0:	0085c83a 	sub	r2,zero,r2
8111f0b4:	18c02034 	orhi	r3,r3,128
8111f0b8:	01000e04 	movi	r4,56
8111f0bc:	20807e16 	blt	r4,r2,8111f2b8 <__subdf3+0x69c>
8111f0c0:	010007c4 	movi	r4,31
8111f0c4:	2080e716 	blt	r4,r2,8111f464 <__subdf3+0x848>
8111f0c8:	01000804 	movi	r4,32
8111f0cc:	2089c83a 	sub	r4,r4,r2
8111f0d0:	1914983a 	sll	r10,r3,r4
8111f0d4:	8890d83a 	srl	r8,r17,r2
8111f0d8:	8908983a 	sll	r4,r17,r4
8111f0dc:	1884d83a 	srl	r2,r3,r2
8111f0e0:	5222b03a 	or	r17,r10,r8
8111f0e4:	2006c03a 	cmpne	r3,r4,zero
8111f0e8:	88e2b03a 	or	r17,r17,r3
8111f0ec:	3463c83a 	sub	r17,r6,r17
8111f0f0:	2885c83a 	sub	r2,r5,r2
8111f0f4:	344d803a 	cmpltu	r6,r6,r17
8111f0f8:	1187c83a 	sub	r3,r2,r6
8111f0fc:	4821883a 	mov	r16,r9
8111f100:	3825883a 	mov	r18,r7
8111f104:	003f2306 	br	8111ed94 <__reset+0xfb0fed94>
8111f108:	24d0b03a 	or	r8,r4,r19
8111f10c:	40001b1e 	bne	r8,zero,8111f17c <__subdf3+0x560>
8111f110:	0005883a 	mov	r2,zero
8111f114:	0009883a 	mov	r4,zero
8111f118:	0021883a 	mov	r16,zero
8111f11c:	003f4906 	br	8111ee44 <__reset+0xfb0fee44>
8111f120:	010007c4 	movi	r4,31
8111f124:	20803a16 	blt	r4,r2,8111f210 <__subdf3+0x5f4>
8111f128:	01000804 	movi	r4,32
8111f12c:	2089c83a 	sub	r4,r4,r2
8111f130:	2912983a 	sll	r9,r5,r4
8111f134:	3090d83a 	srl	r8,r6,r2
8111f138:	3108983a 	sll	r4,r6,r4
8111f13c:	2884d83a 	srl	r2,r5,r2
8111f140:	4a12b03a 	or	r9,r9,r8
8111f144:	2008c03a 	cmpne	r4,r4,zero
8111f148:	4912b03a 	or	r9,r9,r4
8111f14c:	003f4e06 	br	8111ee88 <__reset+0xfb0fee88>
8111f150:	1c48b03a 	or	r4,r3,r17
8111f154:	20003c26 	beq	r4,zero,8111f248 <__subdf3+0x62c>
8111f158:	0084303a 	nor	r2,zero,r2
8111f15c:	1000381e 	bne	r2,zero,8111f240 <__subdf3+0x624>
8111f160:	3463c83a 	sub	r17,r6,r17
8111f164:	28c5c83a 	sub	r2,r5,r3
8111f168:	344d803a 	cmpltu	r6,r6,r17
8111f16c:	1187c83a 	sub	r3,r2,r6
8111f170:	4821883a 	mov	r16,r9
8111f174:	3825883a 	mov	r18,r7
8111f178:	003f0606 	br	8111ed94 <__reset+0xfb0fed94>
8111f17c:	2023883a 	mov	r17,r4
8111f180:	003f0906 	br	8111eda8 <__reset+0xfb0feda8>
8111f184:	0101ffc4 	movi	r4,2047
8111f188:	813f3a1e 	bne	r16,r4,8111ee74 <__reset+0xfb0fee74>
8111f18c:	003ec406 	br	8111eca0 <__reset+0xfb0feca0>
8111f190:	0005883a 	mov	r2,zero
8111f194:	003fb106 	br	8111f05c <__reset+0xfb0ff05c>
8111f198:	0005883a 	mov	r2,zero
8111f19c:	003fbc06 	br	8111f090 <__reset+0xfb0ff090>
8111f1a0:	1c44b03a 	or	r2,r3,r17
8111f1a4:	80008e1e 	bne	r16,zero,8111f3e0 <__subdf3+0x7c4>
8111f1a8:	1000c826 	beq	r2,zero,8111f4cc <__subdf3+0x8b0>
8111f1ac:	2984b03a 	or	r2,r5,r6
8111f1b0:	103ebb26 	beq	r2,zero,8111eca0 <__reset+0xfb0feca0>
8111f1b4:	8989883a 	add	r4,r17,r6
8111f1b8:	1945883a 	add	r2,r3,r5
8111f1bc:	2447803a 	cmpltu	r3,r4,r17
8111f1c0:	1887883a 	add	r3,r3,r2
8111f1c4:	1880202c 	andhi	r2,r3,128
8111f1c8:	2023883a 	mov	r17,r4
8111f1cc:	103f1626 	beq	r2,zero,8111ee28 <__reset+0xfb0fee28>
8111f1d0:	00bfe034 	movhi	r2,65408
8111f1d4:	10bfffc4 	addi	r2,r2,-1
8111f1d8:	5021883a 	mov	r16,r10
8111f1dc:	1886703a 	and	r3,r3,r2
8111f1e0:	003eaf06 	br	8111eca0 <__reset+0xfb0feca0>
8111f1e4:	3825883a 	mov	r18,r7
8111f1e8:	003f0f06 	br	8111ee28 <__reset+0xfb0fee28>
8111f1ec:	1c44b03a 	or	r2,r3,r17
8111f1f0:	8000251e 	bne	r16,zero,8111f288 <__subdf3+0x66c>
8111f1f4:	1000661e 	bne	r2,zero,8111f390 <__subdf3+0x774>
8111f1f8:	2990b03a 	or	r8,r5,r6
8111f1fc:	40009626 	beq	r8,zero,8111f458 <__subdf3+0x83c>
8111f200:	2807883a 	mov	r3,r5
8111f204:	3023883a 	mov	r17,r6
8111f208:	3825883a 	mov	r18,r7
8111f20c:	003ea406 	br	8111eca0 <__reset+0xfb0feca0>
8111f210:	127ff804 	addi	r9,r2,-32
8111f214:	01000804 	movi	r4,32
8111f218:	2a52d83a 	srl	r9,r5,r9
8111f21c:	11008c26 	beq	r2,r4,8111f450 <__subdf3+0x834>
8111f220:	01001004 	movi	r4,64
8111f224:	2085c83a 	sub	r2,r4,r2
8111f228:	2884983a 	sll	r2,r5,r2
8111f22c:	118cb03a 	or	r6,r2,r6
8111f230:	300cc03a 	cmpne	r6,r6,zero
8111f234:	4992b03a 	or	r9,r9,r6
8111f238:	0005883a 	mov	r2,zero
8111f23c:	003f1206 	br	8111ee88 <__reset+0xfb0fee88>
8111f240:	0101ffc4 	movi	r4,2047
8111f244:	493f9c1e 	bne	r9,r4,8111f0b8 <__reset+0xfb0ff0b8>
8111f248:	2807883a 	mov	r3,r5
8111f24c:	3023883a 	mov	r17,r6
8111f250:	4821883a 	mov	r16,r9
8111f254:	3825883a 	mov	r18,r7
8111f258:	003e9106 	br	8111eca0 <__reset+0xfb0feca0>
8111f25c:	80001f1e 	bne	r16,zero,8111f2dc <__subdf3+0x6c0>
8111f260:	1c48b03a 	or	r4,r3,r17
8111f264:	20005a26 	beq	r4,zero,8111f3d0 <__subdf3+0x7b4>
8111f268:	0084303a 	nor	r2,zero,r2
8111f26c:	1000561e 	bne	r2,zero,8111f3c8 <__subdf3+0x7ac>
8111f270:	89a3883a 	add	r17,r17,r6
8111f274:	1945883a 	add	r2,r3,r5
8111f278:	898d803a 	cmpltu	r6,r17,r6
8111f27c:	3087883a 	add	r3,r6,r2
8111f280:	4821883a 	mov	r16,r9
8111f284:	003f0506 	br	8111ee9c <__reset+0xfb0fee9c>
8111f288:	10002b1e 	bne	r2,zero,8111f338 <__subdf3+0x71c>
8111f28c:	2984b03a 	or	r2,r5,r6
8111f290:	10008026 	beq	r2,zero,8111f494 <__subdf3+0x878>
8111f294:	2807883a 	mov	r3,r5
8111f298:	3023883a 	mov	r17,r6
8111f29c:	3825883a 	mov	r18,r7
8111f2a0:	0401ffc4 	movi	r16,2047
8111f2a4:	003e7e06 	br	8111eca0 <__reset+0xfb0feca0>
8111f2a8:	3809883a 	mov	r4,r7
8111f2ac:	0011883a 	mov	r8,zero
8111f2b0:	0005883a 	mov	r2,zero
8111f2b4:	003ee306 	br	8111ee44 <__reset+0xfb0fee44>
8111f2b8:	1c62b03a 	or	r17,r3,r17
8111f2bc:	8822c03a 	cmpne	r17,r17,zero
8111f2c0:	0005883a 	mov	r2,zero
8111f2c4:	003f8906 	br	8111f0ec <__reset+0xfb0ff0ec>
8111f2c8:	3809883a 	mov	r4,r7
8111f2cc:	4821883a 	mov	r16,r9
8111f2d0:	0011883a 	mov	r8,zero
8111f2d4:	0005883a 	mov	r2,zero
8111f2d8:	003eda06 	br	8111ee44 <__reset+0xfb0fee44>
8111f2dc:	0101ffc4 	movi	r4,2047
8111f2e0:	49003b26 	beq	r9,r4,8111f3d0 <__subdf3+0x7b4>
8111f2e4:	0085c83a 	sub	r2,zero,r2
8111f2e8:	18c02034 	orhi	r3,r3,128
8111f2ec:	01000e04 	movi	r4,56
8111f2f0:	20806e16 	blt	r4,r2,8111f4ac <__subdf3+0x890>
8111f2f4:	010007c4 	movi	r4,31
8111f2f8:	20807716 	blt	r4,r2,8111f4d8 <__subdf3+0x8bc>
8111f2fc:	01000804 	movi	r4,32
8111f300:	2089c83a 	sub	r4,r4,r2
8111f304:	1914983a 	sll	r10,r3,r4
8111f308:	8890d83a 	srl	r8,r17,r2
8111f30c:	8908983a 	sll	r4,r17,r4
8111f310:	1884d83a 	srl	r2,r3,r2
8111f314:	5222b03a 	or	r17,r10,r8
8111f318:	2006c03a 	cmpne	r3,r4,zero
8111f31c:	88e2b03a 	or	r17,r17,r3
8111f320:	89a3883a 	add	r17,r17,r6
8111f324:	1145883a 	add	r2,r2,r5
8111f328:	898d803a 	cmpltu	r6,r17,r6
8111f32c:	3087883a 	add	r3,r6,r2
8111f330:	4821883a 	mov	r16,r9
8111f334:	003ed906 	br	8111ee9c <__reset+0xfb0fee9c>
8111f338:	2984b03a 	or	r2,r5,r6
8111f33c:	10004226 	beq	r2,zero,8111f448 <__subdf3+0x82c>
8111f340:	1808d0fa 	srli	r4,r3,3
8111f344:	8822d0fa 	srli	r17,r17,3
8111f348:	1806977a 	slli	r3,r3,29
8111f34c:	2080022c 	andhi	r2,r4,8
8111f350:	1c62b03a 	or	r17,r3,r17
8111f354:	10000826 	beq	r2,zero,8111f378 <__subdf3+0x75c>
8111f358:	2812d0fa 	srli	r9,r5,3
8111f35c:	4880022c 	andhi	r2,r9,8
8111f360:	1000051e 	bne	r2,zero,8111f378 <__subdf3+0x75c>
8111f364:	300cd0fa 	srli	r6,r6,3
8111f368:	2804977a 	slli	r2,r5,29
8111f36c:	4809883a 	mov	r4,r9
8111f370:	3825883a 	mov	r18,r7
8111f374:	11a2b03a 	or	r17,r2,r6
8111f378:	8806d77a 	srli	r3,r17,29
8111f37c:	200890fa 	slli	r4,r4,3
8111f380:	882290fa 	slli	r17,r17,3
8111f384:	0401ffc4 	movi	r16,2047
8111f388:	1906b03a 	or	r3,r3,r4
8111f38c:	003e4406 	br	8111eca0 <__reset+0xfb0feca0>
8111f390:	2984b03a 	or	r2,r5,r6
8111f394:	103e4226 	beq	r2,zero,8111eca0 <__reset+0xfb0feca0>
8111f398:	8989c83a 	sub	r4,r17,r6
8111f39c:	8911803a 	cmpltu	r8,r17,r4
8111f3a0:	1945c83a 	sub	r2,r3,r5
8111f3a4:	1205c83a 	sub	r2,r2,r8
8111f3a8:	1200202c 	andhi	r8,r2,128
8111f3ac:	403e9a26 	beq	r8,zero,8111ee18 <__reset+0xfb0fee18>
8111f3b0:	3463c83a 	sub	r17,r6,r17
8111f3b4:	28c5c83a 	sub	r2,r5,r3
8111f3b8:	344d803a 	cmpltu	r6,r6,r17
8111f3bc:	1187c83a 	sub	r3,r2,r6
8111f3c0:	3825883a 	mov	r18,r7
8111f3c4:	003e3606 	br	8111eca0 <__reset+0xfb0feca0>
8111f3c8:	0101ffc4 	movi	r4,2047
8111f3cc:	493fc71e 	bne	r9,r4,8111f2ec <__reset+0xfb0ff2ec>
8111f3d0:	2807883a 	mov	r3,r5
8111f3d4:	3023883a 	mov	r17,r6
8111f3d8:	4821883a 	mov	r16,r9
8111f3dc:	003e3006 	br	8111eca0 <__reset+0xfb0feca0>
8111f3e0:	10003626 	beq	r2,zero,8111f4bc <__subdf3+0x8a0>
8111f3e4:	2984b03a 	or	r2,r5,r6
8111f3e8:	10001726 	beq	r2,zero,8111f448 <__subdf3+0x82c>
8111f3ec:	1808d0fa 	srli	r4,r3,3
8111f3f0:	8822d0fa 	srli	r17,r17,3
8111f3f4:	1806977a 	slli	r3,r3,29
8111f3f8:	2080022c 	andhi	r2,r4,8
8111f3fc:	1c62b03a 	or	r17,r3,r17
8111f400:	10000726 	beq	r2,zero,8111f420 <__subdf3+0x804>
8111f404:	2812d0fa 	srli	r9,r5,3
8111f408:	4880022c 	andhi	r2,r9,8
8111f40c:	1000041e 	bne	r2,zero,8111f420 <__subdf3+0x804>
8111f410:	300cd0fa 	srli	r6,r6,3
8111f414:	2804977a 	slli	r2,r5,29
8111f418:	4809883a 	mov	r4,r9
8111f41c:	11a2b03a 	or	r17,r2,r6
8111f420:	8806d77a 	srli	r3,r17,29
8111f424:	200890fa 	slli	r4,r4,3
8111f428:	882290fa 	slli	r17,r17,3
8111f42c:	3825883a 	mov	r18,r7
8111f430:	1906b03a 	or	r3,r3,r4
8111f434:	0401ffc4 	movi	r16,2047
8111f438:	003e1906 	br	8111eca0 <__reset+0xfb0feca0>
8111f43c:	000b883a 	mov	r5,zero
8111f440:	0005883a 	mov	r2,zero
8111f444:	003e2e06 	br	8111ed00 <__reset+0xfb0fed00>
8111f448:	0401ffc4 	movi	r16,2047
8111f44c:	003e1406 	br	8111eca0 <__reset+0xfb0feca0>
8111f450:	0005883a 	mov	r2,zero
8111f454:	003f7506 	br	8111f22c <__reset+0xfb0ff22c>
8111f458:	0005883a 	mov	r2,zero
8111f45c:	0009883a 	mov	r4,zero
8111f460:	003e7806 	br	8111ee44 <__reset+0xfb0fee44>
8111f464:	123ff804 	addi	r8,r2,-32
8111f468:	01000804 	movi	r4,32
8111f46c:	1a10d83a 	srl	r8,r3,r8
8111f470:	11002526 	beq	r2,r4,8111f508 <__subdf3+0x8ec>
8111f474:	01001004 	movi	r4,64
8111f478:	2085c83a 	sub	r2,r4,r2
8111f47c:	1884983a 	sll	r2,r3,r2
8111f480:	1444b03a 	or	r2,r2,r17
8111f484:	1004c03a 	cmpne	r2,r2,zero
8111f488:	40a2b03a 	or	r17,r8,r2
8111f48c:	0005883a 	mov	r2,zero
8111f490:	003f1606 	br	8111f0ec <__reset+0xfb0ff0ec>
8111f494:	02000434 	movhi	r8,16
8111f498:	0009883a 	mov	r4,zero
8111f49c:	423fffc4 	addi	r8,r8,-1
8111f4a0:	00bfffc4 	movi	r2,-1
8111f4a4:	0401ffc4 	movi	r16,2047
8111f4a8:	003e6606 	br	8111ee44 <__reset+0xfb0fee44>
8111f4ac:	1c62b03a 	or	r17,r3,r17
8111f4b0:	8822c03a 	cmpne	r17,r17,zero
8111f4b4:	0005883a 	mov	r2,zero
8111f4b8:	003f9906 	br	8111f320 <__reset+0xfb0ff320>
8111f4bc:	2807883a 	mov	r3,r5
8111f4c0:	3023883a 	mov	r17,r6
8111f4c4:	0401ffc4 	movi	r16,2047
8111f4c8:	003df506 	br	8111eca0 <__reset+0xfb0feca0>
8111f4cc:	2807883a 	mov	r3,r5
8111f4d0:	3023883a 	mov	r17,r6
8111f4d4:	003df206 	br	8111eca0 <__reset+0xfb0feca0>
8111f4d8:	123ff804 	addi	r8,r2,-32
8111f4dc:	01000804 	movi	r4,32
8111f4e0:	1a10d83a 	srl	r8,r3,r8
8111f4e4:	11000a26 	beq	r2,r4,8111f510 <__subdf3+0x8f4>
8111f4e8:	01001004 	movi	r4,64
8111f4ec:	2085c83a 	sub	r2,r4,r2
8111f4f0:	1884983a 	sll	r2,r3,r2
8111f4f4:	1444b03a 	or	r2,r2,r17
8111f4f8:	1004c03a 	cmpne	r2,r2,zero
8111f4fc:	40a2b03a 	or	r17,r8,r2
8111f500:	0005883a 	mov	r2,zero
8111f504:	003f8606 	br	8111f320 <__reset+0xfb0ff320>
8111f508:	0005883a 	mov	r2,zero
8111f50c:	003fdc06 	br	8111f480 <__reset+0xfb0ff480>
8111f510:	0005883a 	mov	r2,zero
8111f514:	003ff706 	br	8111f4f4 <__reset+0xfb0ff4f4>

8111f518 <__fixdfsi>:
8111f518:	280cd53a 	srli	r6,r5,20
8111f51c:	00c00434 	movhi	r3,16
8111f520:	18ffffc4 	addi	r3,r3,-1
8111f524:	3181ffcc 	andi	r6,r6,2047
8111f528:	01c0ff84 	movi	r7,1022
8111f52c:	28c6703a 	and	r3,r5,r3
8111f530:	280ad7fa 	srli	r5,r5,31
8111f534:	3980120e 	bge	r7,r6,8111f580 <__fixdfsi+0x68>
8111f538:	00810744 	movi	r2,1053
8111f53c:	11800c16 	blt	r2,r6,8111f570 <__fixdfsi+0x58>
8111f540:	00810cc4 	movi	r2,1075
8111f544:	1185c83a 	sub	r2,r2,r6
8111f548:	01c007c4 	movi	r7,31
8111f54c:	18c00434 	orhi	r3,r3,16
8111f550:	38800d16 	blt	r7,r2,8111f588 <__fixdfsi+0x70>
8111f554:	31befb44 	addi	r6,r6,-1043
8111f558:	2084d83a 	srl	r2,r4,r2
8111f55c:	1986983a 	sll	r3,r3,r6
8111f560:	1884b03a 	or	r2,r3,r2
8111f564:	28000726 	beq	r5,zero,8111f584 <__fixdfsi+0x6c>
8111f568:	0085c83a 	sub	r2,zero,r2
8111f56c:	f800283a 	ret
8111f570:	00a00034 	movhi	r2,32768
8111f574:	10bfffc4 	addi	r2,r2,-1
8111f578:	2885883a 	add	r2,r5,r2
8111f57c:	f800283a 	ret
8111f580:	0005883a 	mov	r2,zero
8111f584:	f800283a 	ret
8111f588:	008104c4 	movi	r2,1043
8111f58c:	1185c83a 	sub	r2,r2,r6
8111f590:	1884d83a 	srl	r2,r3,r2
8111f594:	003ff306 	br	8111f564 <__reset+0xfb0ff564>

8111f598 <__floatsidf>:
8111f598:	defffd04 	addi	sp,sp,-12
8111f59c:	dfc00215 	stw	ra,8(sp)
8111f5a0:	dc400115 	stw	r17,4(sp)
8111f5a4:	dc000015 	stw	r16,0(sp)
8111f5a8:	20002b26 	beq	r4,zero,8111f658 <__floatsidf+0xc0>
8111f5ac:	2023883a 	mov	r17,r4
8111f5b0:	2020d7fa 	srli	r16,r4,31
8111f5b4:	20002d16 	blt	r4,zero,8111f66c <__floatsidf+0xd4>
8111f5b8:	8809883a 	mov	r4,r17
8111f5bc:	110a0f40 	call	8110a0f4 <__clzsi2>
8111f5c0:	01410784 	movi	r5,1054
8111f5c4:	288bc83a 	sub	r5,r5,r2
8111f5c8:	01010cc4 	movi	r4,1075
8111f5cc:	2149c83a 	sub	r4,r4,r5
8111f5d0:	00c007c4 	movi	r3,31
8111f5d4:	1900160e 	bge	r3,r4,8111f630 <__floatsidf+0x98>
8111f5d8:	00c104c4 	movi	r3,1043
8111f5dc:	1947c83a 	sub	r3,r3,r5
8111f5e0:	88c6983a 	sll	r3,r17,r3
8111f5e4:	00800434 	movhi	r2,16
8111f5e8:	10bfffc4 	addi	r2,r2,-1
8111f5ec:	1886703a 	and	r3,r3,r2
8111f5f0:	2941ffcc 	andi	r5,r5,2047
8111f5f4:	800d883a 	mov	r6,r16
8111f5f8:	0005883a 	mov	r2,zero
8111f5fc:	280a953a 	slli	r5,r5,20
8111f600:	31803fcc 	andi	r6,r6,255
8111f604:	01000434 	movhi	r4,16
8111f608:	300c97fa 	slli	r6,r6,31
8111f60c:	213fffc4 	addi	r4,r4,-1
8111f610:	1906703a 	and	r3,r3,r4
8111f614:	1946b03a 	or	r3,r3,r5
8111f618:	1986b03a 	or	r3,r3,r6
8111f61c:	dfc00217 	ldw	ra,8(sp)
8111f620:	dc400117 	ldw	r17,4(sp)
8111f624:	dc000017 	ldw	r16,0(sp)
8111f628:	dec00304 	addi	sp,sp,12
8111f62c:	f800283a 	ret
8111f630:	00c002c4 	movi	r3,11
8111f634:	1887c83a 	sub	r3,r3,r2
8111f638:	88c6d83a 	srl	r3,r17,r3
8111f63c:	8904983a 	sll	r2,r17,r4
8111f640:	01000434 	movhi	r4,16
8111f644:	213fffc4 	addi	r4,r4,-1
8111f648:	2941ffcc 	andi	r5,r5,2047
8111f64c:	1906703a 	and	r3,r3,r4
8111f650:	800d883a 	mov	r6,r16
8111f654:	003fe906 	br	8111f5fc <__reset+0xfb0ff5fc>
8111f658:	000d883a 	mov	r6,zero
8111f65c:	000b883a 	mov	r5,zero
8111f660:	0007883a 	mov	r3,zero
8111f664:	0005883a 	mov	r2,zero
8111f668:	003fe406 	br	8111f5fc <__reset+0xfb0ff5fc>
8111f66c:	0123c83a 	sub	r17,zero,r4
8111f670:	003fd106 	br	8111f5b8 <__reset+0xfb0ff5b8>

8111f674 <__floatunsidf>:
8111f674:	defffe04 	addi	sp,sp,-8
8111f678:	dc000015 	stw	r16,0(sp)
8111f67c:	dfc00115 	stw	ra,4(sp)
8111f680:	2021883a 	mov	r16,r4
8111f684:	20002226 	beq	r4,zero,8111f710 <__floatunsidf+0x9c>
8111f688:	110a0f40 	call	8110a0f4 <__clzsi2>
8111f68c:	01010784 	movi	r4,1054
8111f690:	2089c83a 	sub	r4,r4,r2
8111f694:	01810cc4 	movi	r6,1075
8111f698:	310dc83a 	sub	r6,r6,r4
8111f69c:	00c007c4 	movi	r3,31
8111f6a0:	1980120e 	bge	r3,r6,8111f6ec <__floatunsidf+0x78>
8111f6a4:	00c104c4 	movi	r3,1043
8111f6a8:	1907c83a 	sub	r3,r3,r4
8111f6ac:	80ca983a 	sll	r5,r16,r3
8111f6b0:	00800434 	movhi	r2,16
8111f6b4:	10bfffc4 	addi	r2,r2,-1
8111f6b8:	2101ffcc 	andi	r4,r4,2047
8111f6bc:	0021883a 	mov	r16,zero
8111f6c0:	288a703a 	and	r5,r5,r2
8111f6c4:	2008953a 	slli	r4,r4,20
8111f6c8:	00c00434 	movhi	r3,16
8111f6cc:	18ffffc4 	addi	r3,r3,-1
8111f6d0:	28c6703a 	and	r3,r5,r3
8111f6d4:	8005883a 	mov	r2,r16
8111f6d8:	1906b03a 	or	r3,r3,r4
8111f6dc:	dfc00117 	ldw	ra,4(sp)
8111f6e0:	dc000017 	ldw	r16,0(sp)
8111f6e4:	dec00204 	addi	sp,sp,8
8111f6e8:	f800283a 	ret
8111f6ec:	00c002c4 	movi	r3,11
8111f6f0:	188bc83a 	sub	r5,r3,r2
8111f6f4:	814ad83a 	srl	r5,r16,r5
8111f6f8:	00c00434 	movhi	r3,16
8111f6fc:	18ffffc4 	addi	r3,r3,-1
8111f700:	81a0983a 	sll	r16,r16,r6
8111f704:	2101ffcc 	andi	r4,r4,2047
8111f708:	28ca703a 	and	r5,r5,r3
8111f70c:	003fed06 	br	8111f6c4 <__reset+0xfb0ff6c4>
8111f710:	0009883a 	mov	r4,zero
8111f714:	000b883a 	mov	r5,zero
8111f718:	003fea06 	br	8111f6c4 <__reset+0xfb0ff6c4>

8111f71c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111f71c:	defffe04 	addi	sp,sp,-8
8111f720:	dfc00115 	stw	ra,4(sp)
8111f724:	df000015 	stw	fp,0(sp)
8111f728:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111f72c:	d0a01517 	ldw	r2,-32684(gp)
8111f730:	10000326 	beq	r2,zero,8111f740 <alt_get_errno+0x24>
8111f734:	d0a01517 	ldw	r2,-32684(gp)
8111f738:	103ee83a 	callr	r2
8111f73c:	00000106 	br	8111f744 <alt_get_errno+0x28>
8111f740:	d0a05804 	addi	r2,gp,-32416
}
8111f744:	e037883a 	mov	sp,fp
8111f748:	dfc00117 	ldw	ra,4(sp)
8111f74c:	df000017 	ldw	fp,0(sp)
8111f750:	dec00204 	addi	sp,sp,8
8111f754:	f800283a 	ret

8111f758 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
8111f758:	defffb04 	addi	sp,sp,-20
8111f75c:	dfc00415 	stw	ra,16(sp)
8111f760:	df000315 	stw	fp,12(sp)
8111f764:	df000304 	addi	fp,sp,12
8111f768:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
8111f76c:	e0bfff17 	ldw	r2,-4(fp)
8111f770:	10000616 	blt	r2,zero,8111f78c <close+0x34>
8111f774:	e0bfff17 	ldw	r2,-4(fp)
8111f778:	10c00324 	muli	r3,r2,12
8111f77c:	00a044f4 	movhi	r2,33043
8111f780:	10927004 	addi	r2,r2,18880
8111f784:	1885883a 	add	r2,r3,r2
8111f788:	00000106 	br	8111f790 <close+0x38>
8111f78c:	0005883a 	mov	r2,zero
8111f790:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
8111f794:	e0bffd17 	ldw	r2,-12(fp)
8111f798:	10001926 	beq	r2,zero,8111f800 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
8111f79c:	e0bffd17 	ldw	r2,-12(fp)
8111f7a0:	10800017 	ldw	r2,0(r2)
8111f7a4:	10800417 	ldw	r2,16(r2)
8111f7a8:	10000626 	beq	r2,zero,8111f7c4 <close+0x6c>
8111f7ac:	e0bffd17 	ldw	r2,-12(fp)
8111f7b0:	10800017 	ldw	r2,0(r2)
8111f7b4:	10800417 	ldw	r2,16(r2)
8111f7b8:	e13ffd17 	ldw	r4,-12(fp)
8111f7bc:	103ee83a 	callr	r2
8111f7c0:	00000106 	br	8111f7c8 <close+0x70>
8111f7c4:	0005883a 	mov	r2,zero
8111f7c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
8111f7cc:	e13fff17 	ldw	r4,-4(fp)
8111f7d0:	111ff980 	call	8111ff98 <alt_release_fd>
    if (rval < 0)
8111f7d4:	e0bffe17 	ldw	r2,-8(fp)
8111f7d8:	1000070e 	bge	r2,zero,8111f7f8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
8111f7dc:	111f71c0 	call	8111f71c <alt_get_errno>
8111f7e0:	1007883a 	mov	r3,r2
8111f7e4:	e0bffe17 	ldw	r2,-8(fp)
8111f7e8:	0085c83a 	sub	r2,zero,r2
8111f7ec:	18800015 	stw	r2,0(r3)
      return -1;
8111f7f0:	00bfffc4 	movi	r2,-1
8111f7f4:	00000706 	br	8111f814 <close+0xbc>
    }
    return 0;
8111f7f8:	0005883a 	mov	r2,zero
8111f7fc:	00000506 	br	8111f814 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
8111f800:	111f71c0 	call	8111f71c <alt_get_errno>
8111f804:	1007883a 	mov	r3,r2
8111f808:	00801444 	movi	r2,81
8111f80c:	18800015 	stw	r2,0(r3)
    return -1;
8111f810:	00bfffc4 	movi	r2,-1
  }
}
8111f814:	e037883a 	mov	sp,fp
8111f818:	dfc00117 	ldw	ra,4(sp)
8111f81c:	df000017 	ldw	fp,0(sp)
8111f820:	dec00204 	addi	sp,sp,8
8111f824:	f800283a 	ret

8111f828 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
8111f828:	deffff04 	addi	sp,sp,-4
8111f82c:	df000015 	stw	fp,0(sp)
8111f830:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8111f834:	0001883a 	nop
8111f838:	e037883a 	mov	sp,fp
8111f83c:	df000017 	ldw	fp,0(sp)
8111f840:	dec00104 	addi	sp,sp,4
8111f844:	f800283a 	ret

8111f848 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
8111f848:	defffc04 	addi	sp,sp,-16
8111f84c:	df000315 	stw	fp,12(sp)
8111f850:	df000304 	addi	fp,sp,12
8111f854:	e13ffd15 	stw	r4,-12(fp)
8111f858:	e17ffe15 	stw	r5,-8(fp)
8111f85c:	e1bfff15 	stw	r6,-4(fp)
  return len;
8111f860:	e0bfff17 	ldw	r2,-4(fp)
}
8111f864:	e037883a 	mov	sp,fp
8111f868:	df000017 	ldw	fp,0(sp)
8111f86c:	dec00104 	addi	sp,sp,4
8111f870:	f800283a 	ret

8111f874 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111f874:	defffe04 	addi	sp,sp,-8
8111f878:	dfc00115 	stw	ra,4(sp)
8111f87c:	df000015 	stw	fp,0(sp)
8111f880:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111f884:	d0a01517 	ldw	r2,-32684(gp)
8111f888:	10000326 	beq	r2,zero,8111f898 <alt_get_errno+0x24>
8111f88c:	d0a01517 	ldw	r2,-32684(gp)
8111f890:	103ee83a 	callr	r2
8111f894:	00000106 	br	8111f89c <alt_get_errno+0x28>
8111f898:	d0a05804 	addi	r2,gp,-32416
}
8111f89c:	e037883a 	mov	sp,fp
8111f8a0:	dfc00117 	ldw	ra,4(sp)
8111f8a4:	df000017 	ldw	fp,0(sp)
8111f8a8:	dec00204 	addi	sp,sp,8
8111f8ac:	f800283a 	ret

8111f8b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
8111f8b0:	defffb04 	addi	sp,sp,-20
8111f8b4:	dfc00415 	stw	ra,16(sp)
8111f8b8:	df000315 	stw	fp,12(sp)
8111f8bc:	df000304 	addi	fp,sp,12
8111f8c0:	e13ffe15 	stw	r4,-8(fp)
8111f8c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8111f8c8:	e0bffe17 	ldw	r2,-8(fp)
8111f8cc:	10000616 	blt	r2,zero,8111f8e8 <fstat+0x38>
8111f8d0:	e0bffe17 	ldw	r2,-8(fp)
8111f8d4:	10c00324 	muli	r3,r2,12
8111f8d8:	00a044f4 	movhi	r2,33043
8111f8dc:	10927004 	addi	r2,r2,18880
8111f8e0:	1885883a 	add	r2,r3,r2
8111f8e4:	00000106 	br	8111f8ec <fstat+0x3c>
8111f8e8:	0005883a 	mov	r2,zero
8111f8ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
8111f8f0:	e0bffd17 	ldw	r2,-12(fp)
8111f8f4:	10001026 	beq	r2,zero,8111f938 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
8111f8f8:	e0bffd17 	ldw	r2,-12(fp)
8111f8fc:	10800017 	ldw	r2,0(r2)
8111f900:	10800817 	ldw	r2,32(r2)
8111f904:	10000726 	beq	r2,zero,8111f924 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
8111f908:	e0bffd17 	ldw	r2,-12(fp)
8111f90c:	10800017 	ldw	r2,0(r2)
8111f910:	10800817 	ldw	r2,32(r2)
8111f914:	e17fff17 	ldw	r5,-4(fp)
8111f918:	e13ffd17 	ldw	r4,-12(fp)
8111f91c:	103ee83a 	callr	r2
8111f920:	00000a06 	br	8111f94c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
8111f924:	e0bfff17 	ldw	r2,-4(fp)
8111f928:	00c80004 	movi	r3,8192
8111f92c:	10c00115 	stw	r3,4(r2)
      return 0;
8111f930:	0005883a 	mov	r2,zero
8111f934:	00000506 	br	8111f94c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8111f938:	111f8740 	call	8111f874 <alt_get_errno>
8111f93c:	1007883a 	mov	r3,r2
8111f940:	00801444 	movi	r2,81
8111f944:	18800015 	stw	r2,0(r3)
    return -1;
8111f948:	00bfffc4 	movi	r2,-1
  }
}
8111f94c:	e037883a 	mov	sp,fp
8111f950:	dfc00117 	ldw	ra,4(sp)
8111f954:	df000017 	ldw	fp,0(sp)
8111f958:	dec00204 	addi	sp,sp,8
8111f95c:	f800283a 	ret

8111f960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111f960:	defffe04 	addi	sp,sp,-8
8111f964:	dfc00115 	stw	ra,4(sp)
8111f968:	df000015 	stw	fp,0(sp)
8111f96c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111f970:	d0a01517 	ldw	r2,-32684(gp)
8111f974:	10000326 	beq	r2,zero,8111f984 <alt_get_errno+0x24>
8111f978:	d0a01517 	ldw	r2,-32684(gp)
8111f97c:	103ee83a 	callr	r2
8111f980:	00000106 	br	8111f988 <alt_get_errno+0x28>
8111f984:	d0a05804 	addi	r2,gp,-32416
}
8111f988:	e037883a 	mov	sp,fp
8111f98c:	dfc00117 	ldw	ra,4(sp)
8111f990:	df000017 	ldw	fp,0(sp)
8111f994:	dec00204 	addi	sp,sp,8
8111f998:	f800283a 	ret

8111f99c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
8111f99c:	deffed04 	addi	sp,sp,-76
8111f9a0:	dfc01215 	stw	ra,72(sp)
8111f9a4:	df001115 	stw	fp,68(sp)
8111f9a8:	df001104 	addi	fp,sp,68
8111f9ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8111f9b0:	e0bfff17 	ldw	r2,-4(fp)
8111f9b4:	10000616 	blt	r2,zero,8111f9d0 <isatty+0x34>
8111f9b8:	e0bfff17 	ldw	r2,-4(fp)
8111f9bc:	10c00324 	muli	r3,r2,12
8111f9c0:	00a044f4 	movhi	r2,33043
8111f9c4:	10927004 	addi	r2,r2,18880
8111f9c8:	1885883a 	add	r2,r3,r2
8111f9cc:	00000106 	br	8111f9d4 <isatty+0x38>
8111f9d0:	0005883a 	mov	r2,zero
8111f9d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
8111f9d8:	e0bfef17 	ldw	r2,-68(fp)
8111f9dc:	10000e26 	beq	r2,zero,8111fa18 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
8111f9e0:	e0bfef17 	ldw	r2,-68(fp)
8111f9e4:	10800017 	ldw	r2,0(r2)
8111f9e8:	10800817 	ldw	r2,32(r2)
8111f9ec:	1000021e 	bne	r2,zero,8111f9f8 <isatty+0x5c>
    {
      return 1;
8111f9f0:	00800044 	movi	r2,1
8111f9f4:	00000d06 	br	8111fa2c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
8111f9f8:	e0bff004 	addi	r2,fp,-64
8111f9fc:	100b883a 	mov	r5,r2
8111fa00:	e13fff17 	ldw	r4,-4(fp)
8111fa04:	111f8b00 	call	8111f8b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
8111fa08:	e0bff117 	ldw	r2,-60(fp)
8111fa0c:	10880020 	cmpeqi	r2,r2,8192
8111fa10:	10803fcc 	andi	r2,r2,255
8111fa14:	00000506 	br	8111fa2c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
8111fa18:	111f9600 	call	8111f960 <alt_get_errno>
8111fa1c:	1007883a 	mov	r3,r2
8111fa20:	00801444 	movi	r2,81
8111fa24:	18800015 	stw	r2,0(r3)
    return 0;
8111fa28:	0005883a 	mov	r2,zero
  }
}
8111fa2c:	e037883a 	mov	sp,fp
8111fa30:	dfc00117 	ldw	ra,4(sp)
8111fa34:	df000017 	ldw	fp,0(sp)
8111fa38:	dec00204 	addi	sp,sp,8
8111fa3c:	f800283a 	ret

8111fa40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111fa40:	defffe04 	addi	sp,sp,-8
8111fa44:	dfc00115 	stw	ra,4(sp)
8111fa48:	df000015 	stw	fp,0(sp)
8111fa4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111fa50:	d0a01517 	ldw	r2,-32684(gp)
8111fa54:	10000326 	beq	r2,zero,8111fa64 <alt_get_errno+0x24>
8111fa58:	d0a01517 	ldw	r2,-32684(gp)
8111fa5c:	103ee83a 	callr	r2
8111fa60:	00000106 	br	8111fa68 <alt_get_errno+0x28>
8111fa64:	d0a05804 	addi	r2,gp,-32416
}
8111fa68:	e037883a 	mov	sp,fp
8111fa6c:	dfc00117 	ldw	ra,4(sp)
8111fa70:	df000017 	ldw	fp,0(sp)
8111fa74:	dec00204 	addi	sp,sp,8
8111fa78:	f800283a 	ret

8111fa7c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
8111fa7c:	defff904 	addi	sp,sp,-28
8111fa80:	dfc00615 	stw	ra,24(sp)
8111fa84:	df000515 	stw	fp,20(sp)
8111fa88:	df000504 	addi	fp,sp,20
8111fa8c:	e13ffd15 	stw	r4,-12(fp)
8111fa90:	e17ffe15 	stw	r5,-8(fp)
8111fa94:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
8111fa98:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8111fa9c:	e0bffd17 	ldw	r2,-12(fp)
8111faa0:	10000616 	blt	r2,zero,8111fabc <lseek+0x40>
8111faa4:	e0bffd17 	ldw	r2,-12(fp)
8111faa8:	10c00324 	muli	r3,r2,12
8111faac:	00a044f4 	movhi	r2,33043
8111fab0:	10927004 	addi	r2,r2,18880
8111fab4:	1885883a 	add	r2,r3,r2
8111fab8:	00000106 	br	8111fac0 <lseek+0x44>
8111fabc:	0005883a 	mov	r2,zero
8111fac0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
8111fac4:	e0bffc17 	ldw	r2,-16(fp)
8111fac8:	10001026 	beq	r2,zero,8111fb0c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
8111facc:	e0bffc17 	ldw	r2,-16(fp)
8111fad0:	10800017 	ldw	r2,0(r2)
8111fad4:	10800717 	ldw	r2,28(r2)
8111fad8:	10000926 	beq	r2,zero,8111fb00 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8111fadc:	e0bffc17 	ldw	r2,-16(fp)
8111fae0:	10800017 	ldw	r2,0(r2)
8111fae4:	10800717 	ldw	r2,28(r2)
8111fae8:	e1bfff17 	ldw	r6,-4(fp)
8111faec:	e17ffe17 	ldw	r5,-8(fp)
8111faf0:	e13ffc17 	ldw	r4,-16(fp)
8111faf4:	103ee83a 	callr	r2
8111faf8:	e0bffb15 	stw	r2,-20(fp)
8111fafc:	00000506 	br	8111fb14 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
8111fb00:	00bfde84 	movi	r2,-134
8111fb04:	e0bffb15 	stw	r2,-20(fp)
8111fb08:	00000206 	br	8111fb14 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
8111fb0c:	00bfebc4 	movi	r2,-81
8111fb10:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
8111fb14:	e0bffb17 	ldw	r2,-20(fp)
8111fb18:	1000070e 	bge	r2,zero,8111fb38 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
8111fb1c:	111fa400 	call	8111fa40 <alt_get_errno>
8111fb20:	1007883a 	mov	r3,r2
8111fb24:	e0bffb17 	ldw	r2,-20(fp)
8111fb28:	0085c83a 	sub	r2,zero,r2
8111fb2c:	18800015 	stw	r2,0(r3)
    rc = -1;
8111fb30:	00bfffc4 	movi	r2,-1
8111fb34:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
8111fb38:	e0bffb17 	ldw	r2,-20(fp)
}
8111fb3c:	e037883a 	mov	sp,fp
8111fb40:	dfc00117 	ldw	ra,4(sp)
8111fb44:	df000017 	ldw	fp,0(sp)
8111fb48:	dec00204 	addi	sp,sp,8
8111fb4c:	f800283a 	ret

8111fb50 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
8111fb50:	defff904 	addi	sp,sp,-28
8111fb54:	dfc00615 	stw	ra,24(sp)
8111fb58:	df000515 	stw	fp,20(sp)
8111fb5c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8111fb60:	0009883a 	mov	r4,zero
8111fb64:	1127fd80 	call	81127fd8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
8111fb68:	11210380 	call	81121038 <OSInit>
8111fb6c:	01000044 	movi	r4,1
8111fb70:	11259980 	call	81125998 <OSSemCreate>
8111fb74:	d0a06615 	stw	r2,-32360(gp)
8111fb78:	01000044 	movi	r4,1
8111fb7c:	11259980 	call	81125998 <OSSemCreate>
8111fb80:	d0a06815 	stw	r2,-32352(gp)
8111fb84:	d0a05f04 	addi	r2,gp,-32388
8111fb88:	e0bffc15 	stw	r2,-16(fp)
8111fb8c:	00800044 	movi	r2,1
8111fb90:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8111fb94:	e0bffd0b 	ldhu	r2,-12(fp)
8111fb98:	1009883a 	mov	r4,r2
8111fb9c:	11259980 	call	81125998 <OSSemCreate>
8111fba0:	1007883a 	mov	r3,r2
8111fba4:	e0bffc17 	ldw	r2,-16(fp)
8111fba8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
8111fbac:	11280100 	call	81128010 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
8111fbb0:	01a044f4 	movhi	r6,33043
8111fbb4:	318f4904 	addi	r6,r6,15652
8111fbb8:	016044f4 	movhi	r5,33043
8111fbbc:	294f4e04 	addi	r5,r5,15672
8111fbc0:	012044f4 	movhi	r4,33043
8111fbc4:	210f4e04 	addi	r4,r4,15672
8111fbc8:	11314b80 	call	811314b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
8111fbcc:	1130e200 	call	81130e20 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
8111fbd0:	012044f4 	movhi	r4,33043
8111fbd4:	2103a004 	addi	r4,r4,3712
8111fbd8:	1131bb40 	call	81131bb4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
8111fbdc:	d0a06017 	ldw	r2,-32384(gp)
8111fbe0:	d0e06117 	ldw	r3,-32380(gp)
8111fbe4:	d1206217 	ldw	r4,-32376(gp)
8111fbe8:	200d883a 	mov	r6,r4
8111fbec:	180b883a 	mov	r5,r3
8111fbf0:	1009883a 	mov	r4,r2
8111fbf4:	110768c0 	call	8110768c <main>
8111fbf8:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
8111fbfc:	01000044 	movi	r4,1
8111fc00:	111f7580 	call	8111f758 <close>
  exit (result);
8111fc04:	e13ffb17 	ldw	r4,-20(fp)
8111fc08:	1131bc80 	call	81131bc8 <exit>

8111fc0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111fc0c:	defffe04 	addi	sp,sp,-8
8111fc10:	dfc00115 	stw	ra,4(sp)
8111fc14:	df000015 	stw	fp,0(sp)
8111fc18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111fc1c:	d0a01517 	ldw	r2,-32684(gp)
8111fc20:	10000326 	beq	r2,zero,8111fc30 <alt_get_errno+0x24>
8111fc24:	d0a01517 	ldw	r2,-32684(gp)
8111fc28:	103ee83a 	callr	r2
8111fc2c:	00000106 	br	8111fc34 <alt_get_errno+0x28>
8111fc30:	d0a05804 	addi	r2,gp,-32416
}
8111fc34:	e037883a 	mov	sp,fp
8111fc38:	dfc00117 	ldw	ra,4(sp)
8111fc3c:	df000017 	ldw	fp,0(sp)
8111fc40:	dec00204 	addi	sp,sp,8
8111fc44:	f800283a 	ret

8111fc48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8111fc48:	defffd04 	addi	sp,sp,-12
8111fc4c:	df000215 	stw	fp,8(sp)
8111fc50:	df000204 	addi	fp,sp,8
8111fc54:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8111fc58:	e0bfff17 	ldw	r2,-4(fp)
8111fc5c:	10800217 	ldw	r2,8(r2)
8111fc60:	10d00034 	orhi	r3,r2,16384
8111fc64:	e0bfff17 	ldw	r2,-4(fp)
8111fc68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8111fc6c:	e03ffe15 	stw	zero,-8(fp)
8111fc70:	00001d06 	br	8111fce8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8111fc74:	00a044f4 	movhi	r2,33043
8111fc78:	10927004 	addi	r2,r2,18880
8111fc7c:	e0fffe17 	ldw	r3,-8(fp)
8111fc80:	18c00324 	muli	r3,r3,12
8111fc84:	10c5883a 	add	r2,r2,r3
8111fc88:	10c00017 	ldw	r3,0(r2)
8111fc8c:	e0bfff17 	ldw	r2,-4(fp)
8111fc90:	10800017 	ldw	r2,0(r2)
8111fc94:	1880111e 	bne	r3,r2,8111fcdc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8111fc98:	00a044f4 	movhi	r2,33043
8111fc9c:	10927004 	addi	r2,r2,18880
8111fca0:	e0fffe17 	ldw	r3,-8(fp)
8111fca4:	18c00324 	muli	r3,r3,12
8111fca8:	10c5883a 	add	r2,r2,r3
8111fcac:	10800204 	addi	r2,r2,8
8111fcb0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8111fcb4:	1000090e 	bge	r2,zero,8111fcdc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
8111fcb8:	e0bffe17 	ldw	r2,-8(fp)
8111fcbc:	10c00324 	muli	r3,r2,12
8111fcc0:	00a044f4 	movhi	r2,33043
8111fcc4:	10927004 	addi	r2,r2,18880
8111fcc8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8111fccc:	e0bfff17 	ldw	r2,-4(fp)
8111fcd0:	18800226 	beq	r3,r2,8111fcdc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8111fcd4:	00bffcc4 	movi	r2,-13
8111fcd8:	00000806 	br	8111fcfc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8111fcdc:	e0bffe17 	ldw	r2,-8(fp)
8111fce0:	10800044 	addi	r2,r2,1
8111fce4:	e0bffe15 	stw	r2,-8(fp)
8111fce8:	d0a01417 	ldw	r2,-32688(gp)
8111fcec:	1007883a 	mov	r3,r2
8111fcf0:	e0bffe17 	ldw	r2,-8(fp)
8111fcf4:	18bfdf2e 	bgeu	r3,r2,8111fc74 <__reset+0xfb0ffc74>
    }
  }
  
  /* The device is not locked */
 
  return 0;
8111fcf8:	0005883a 	mov	r2,zero
}
8111fcfc:	e037883a 	mov	sp,fp
8111fd00:	df000017 	ldw	fp,0(sp)
8111fd04:	dec00104 	addi	sp,sp,4
8111fd08:	f800283a 	ret

8111fd0c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8111fd0c:	defff604 	addi	sp,sp,-40
8111fd10:	dfc00915 	stw	ra,36(sp)
8111fd14:	df000815 	stw	fp,32(sp)
8111fd18:	df000804 	addi	fp,sp,32
8111fd1c:	e13ffd15 	stw	r4,-12(fp)
8111fd20:	e17ffe15 	stw	r5,-8(fp)
8111fd24:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
8111fd28:	00bfffc4 	movi	r2,-1
8111fd2c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8111fd30:	00bffb44 	movi	r2,-19
8111fd34:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
8111fd38:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8111fd3c:	d1601204 	addi	r5,gp,-32696
8111fd40:	e13ffd17 	ldw	r4,-12(fp)
8111fd44:	1130ee00 	call	81130ee0 <alt_find_dev>
8111fd48:	e0bff815 	stw	r2,-32(fp)
8111fd4c:	e0bff817 	ldw	r2,-32(fp)
8111fd50:	1000051e 	bne	r2,zero,8111fd68 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8111fd54:	e13ffd17 	ldw	r4,-12(fp)
8111fd58:	1130f700 	call	81130f70 <alt_find_file>
8111fd5c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8111fd60:	00800044 	movi	r2,1
8111fd64:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8111fd68:	e0bff817 	ldw	r2,-32(fp)
8111fd6c:	10002926 	beq	r2,zero,8111fe14 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
8111fd70:	e13ff817 	ldw	r4,-32(fp)
8111fd74:	11310780 	call	81131078 <alt_get_fd>
8111fd78:	e0bff915 	stw	r2,-28(fp)
8111fd7c:	e0bff917 	ldw	r2,-28(fp)
8111fd80:	1000030e 	bge	r2,zero,8111fd90 <open+0x84>
    {
      status = index;
8111fd84:	e0bff917 	ldw	r2,-28(fp)
8111fd88:	e0bffa15 	stw	r2,-24(fp)
8111fd8c:	00002306 	br	8111fe1c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
8111fd90:	e0bff917 	ldw	r2,-28(fp)
8111fd94:	10c00324 	muli	r3,r2,12
8111fd98:	00a044f4 	movhi	r2,33043
8111fd9c:	10927004 	addi	r2,r2,18880
8111fda0:	1885883a 	add	r2,r3,r2
8111fda4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8111fda8:	e0fffe17 	ldw	r3,-8(fp)
8111fdac:	00900034 	movhi	r2,16384
8111fdb0:	10bfffc4 	addi	r2,r2,-1
8111fdb4:	1886703a 	and	r3,r3,r2
8111fdb8:	e0bffc17 	ldw	r2,-16(fp)
8111fdbc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8111fdc0:	e0bffb17 	ldw	r2,-20(fp)
8111fdc4:	1000051e 	bne	r2,zero,8111fddc <open+0xd0>
8111fdc8:	e13ffc17 	ldw	r4,-16(fp)
8111fdcc:	111fc480 	call	8111fc48 <alt_file_locked>
8111fdd0:	e0bffa15 	stw	r2,-24(fp)
8111fdd4:	e0bffa17 	ldw	r2,-24(fp)
8111fdd8:	10001016 	blt	r2,zero,8111fe1c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8111fddc:	e0bff817 	ldw	r2,-32(fp)
8111fde0:	10800317 	ldw	r2,12(r2)
8111fde4:	10000826 	beq	r2,zero,8111fe08 <open+0xfc>
8111fde8:	e0bff817 	ldw	r2,-32(fp)
8111fdec:	10800317 	ldw	r2,12(r2)
8111fdf0:	e1ffff17 	ldw	r7,-4(fp)
8111fdf4:	e1bffe17 	ldw	r6,-8(fp)
8111fdf8:	e17ffd17 	ldw	r5,-12(fp)
8111fdfc:	e13ffc17 	ldw	r4,-16(fp)
8111fe00:	103ee83a 	callr	r2
8111fe04:	00000106 	br	8111fe0c <open+0x100>
8111fe08:	0005883a 	mov	r2,zero
8111fe0c:	e0bffa15 	stw	r2,-24(fp)
8111fe10:	00000206 	br	8111fe1c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
8111fe14:	00bffb44 	movi	r2,-19
8111fe18:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8111fe1c:	e0bffa17 	ldw	r2,-24(fp)
8111fe20:	1000090e 	bge	r2,zero,8111fe48 <open+0x13c>
  {
    alt_release_fd (index);  
8111fe24:	e13ff917 	ldw	r4,-28(fp)
8111fe28:	111ff980 	call	8111ff98 <alt_release_fd>
    ALT_ERRNO = -status;
8111fe2c:	111fc0c0 	call	8111fc0c <alt_get_errno>
8111fe30:	1007883a 	mov	r3,r2
8111fe34:	e0bffa17 	ldw	r2,-24(fp)
8111fe38:	0085c83a 	sub	r2,zero,r2
8111fe3c:	18800015 	stw	r2,0(r3)
    return -1;
8111fe40:	00bfffc4 	movi	r2,-1
8111fe44:	00000106 	br	8111fe4c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
8111fe48:	e0bff917 	ldw	r2,-28(fp)
}
8111fe4c:	e037883a 	mov	sp,fp
8111fe50:	dfc00117 	ldw	ra,4(sp)
8111fe54:	df000017 	ldw	fp,0(sp)
8111fe58:	dec00204 	addi	sp,sp,8
8111fe5c:	f800283a 	ret

8111fe60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111fe60:	defffe04 	addi	sp,sp,-8
8111fe64:	dfc00115 	stw	ra,4(sp)
8111fe68:	df000015 	stw	fp,0(sp)
8111fe6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111fe70:	d0a01517 	ldw	r2,-32684(gp)
8111fe74:	10000326 	beq	r2,zero,8111fe84 <alt_get_errno+0x24>
8111fe78:	d0a01517 	ldw	r2,-32684(gp)
8111fe7c:	103ee83a 	callr	r2
8111fe80:	00000106 	br	8111fe88 <alt_get_errno+0x28>
8111fe84:	d0a05804 	addi	r2,gp,-32416
}
8111fe88:	e037883a 	mov	sp,fp
8111fe8c:	dfc00117 	ldw	ra,4(sp)
8111fe90:	df000017 	ldw	fp,0(sp)
8111fe94:	dec00204 	addi	sp,sp,8
8111fe98:	f800283a 	ret

8111fe9c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
8111fe9c:	defff904 	addi	sp,sp,-28
8111fea0:	dfc00615 	stw	ra,24(sp)
8111fea4:	df000515 	stw	fp,20(sp)
8111fea8:	df000504 	addi	fp,sp,20
8111feac:	e13ffd15 	stw	r4,-12(fp)
8111feb0:	e17ffe15 	stw	r5,-8(fp)
8111feb4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8111feb8:	e0bffd17 	ldw	r2,-12(fp)
8111febc:	10000616 	blt	r2,zero,8111fed8 <read+0x3c>
8111fec0:	e0bffd17 	ldw	r2,-12(fp)
8111fec4:	10c00324 	muli	r3,r2,12
8111fec8:	00a044f4 	movhi	r2,33043
8111fecc:	10927004 	addi	r2,r2,18880
8111fed0:	1885883a 	add	r2,r3,r2
8111fed4:	00000106 	br	8111fedc <read+0x40>
8111fed8:	0005883a 	mov	r2,zero
8111fedc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8111fee0:	e0bffb17 	ldw	r2,-20(fp)
8111fee4:	10002226 	beq	r2,zero,8111ff70 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8111fee8:	e0bffb17 	ldw	r2,-20(fp)
8111feec:	10800217 	ldw	r2,8(r2)
8111fef0:	108000cc 	andi	r2,r2,3
8111fef4:	10800060 	cmpeqi	r2,r2,1
8111fef8:	1000181e 	bne	r2,zero,8111ff5c <read+0xc0>
        (fd->dev->read))
8111fefc:	e0bffb17 	ldw	r2,-20(fp)
8111ff00:	10800017 	ldw	r2,0(r2)
8111ff04:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8111ff08:	10001426 	beq	r2,zero,8111ff5c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
8111ff0c:	e0bffb17 	ldw	r2,-20(fp)
8111ff10:	10800017 	ldw	r2,0(r2)
8111ff14:	10800517 	ldw	r2,20(r2)
8111ff18:	e0ffff17 	ldw	r3,-4(fp)
8111ff1c:	180d883a 	mov	r6,r3
8111ff20:	e17ffe17 	ldw	r5,-8(fp)
8111ff24:	e13ffb17 	ldw	r4,-20(fp)
8111ff28:	103ee83a 	callr	r2
8111ff2c:	e0bffc15 	stw	r2,-16(fp)
8111ff30:	e0bffc17 	ldw	r2,-16(fp)
8111ff34:	1000070e 	bge	r2,zero,8111ff54 <read+0xb8>
        {
          ALT_ERRNO = -rval;
8111ff38:	111fe600 	call	8111fe60 <alt_get_errno>
8111ff3c:	1007883a 	mov	r3,r2
8111ff40:	e0bffc17 	ldw	r2,-16(fp)
8111ff44:	0085c83a 	sub	r2,zero,r2
8111ff48:	18800015 	stw	r2,0(r3)
          return -1;
8111ff4c:	00bfffc4 	movi	r2,-1
8111ff50:	00000c06 	br	8111ff84 <read+0xe8>
        }
        return rval;
8111ff54:	e0bffc17 	ldw	r2,-16(fp)
8111ff58:	00000a06 	br	8111ff84 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
8111ff5c:	111fe600 	call	8111fe60 <alt_get_errno>
8111ff60:	1007883a 	mov	r3,r2
8111ff64:	00800344 	movi	r2,13
8111ff68:	18800015 	stw	r2,0(r3)
8111ff6c:	00000406 	br	8111ff80 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
8111ff70:	111fe600 	call	8111fe60 <alt_get_errno>
8111ff74:	1007883a 	mov	r3,r2
8111ff78:	00801444 	movi	r2,81
8111ff7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
8111ff80:	00bfffc4 	movi	r2,-1
}
8111ff84:	e037883a 	mov	sp,fp
8111ff88:	dfc00117 	ldw	ra,4(sp)
8111ff8c:	df000017 	ldw	fp,0(sp)
8111ff90:	dec00204 	addi	sp,sp,8
8111ff94:	f800283a 	ret

8111ff98 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
8111ff98:	defffe04 	addi	sp,sp,-8
8111ff9c:	df000115 	stw	fp,4(sp)
8111ffa0:	df000104 	addi	fp,sp,4
8111ffa4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
8111ffa8:	e0bfff17 	ldw	r2,-4(fp)
8111ffac:	108000d0 	cmplti	r2,r2,3
8111ffb0:	10000d1e 	bne	r2,zero,8111ffe8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
8111ffb4:	00a044f4 	movhi	r2,33043
8111ffb8:	10927004 	addi	r2,r2,18880
8111ffbc:	e0ffff17 	ldw	r3,-4(fp)
8111ffc0:	18c00324 	muli	r3,r3,12
8111ffc4:	10c5883a 	add	r2,r2,r3
8111ffc8:	10800204 	addi	r2,r2,8
8111ffcc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
8111ffd0:	00a044f4 	movhi	r2,33043
8111ffd4:	10927004 	addi	r2,r2,18880
8111ffd8:	e0ffff17 	ldw	r3,-4(fp)
8111ffdc:	18c00324 	muli	r3,r3,12
8111ffe0:	10c5883a 	add	r2,r2,r3
8111ffe4:	10000015 	stw	zero,0(r2)
  }
}
8111ffe8:	0001883a 	nop
8111ffec:	e037883a 	mov	sp,fp
8111fff0:	df000017 	ldw	fp,0(sp)
8111fff4:	dec00104 	addi	sp,sp,4
8111fff8:	f800283a 	ret

8111fffc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
8111fffc:	defff904 	addi	sp,sp,-28
81120000:	df000615 	stw	fp,24(sp)
81120004:	df000604 	addi	fp,sp,24
81120008:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112000c:	0005303a 	rdctl	r2,status
81120010:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120014:	e0fffe17 	ldw	r3,-8(fp)
81120018:	00bfff84 	movi	r2,-2
8112001c:	1884703a 	and	r2,r3,r2
81120020:	1001703a 	wrctl	status,r2
  
  return context;
81120024:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81120028:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
8112002c:	d0a01617 	ldw	r2,-32680(gp)
81120030:	10c000c4 	addi	r3,r2,3
81120034:	00bfff04 	movi	r2,-4
81120038:	1884703a 	and	r2,r3,r2
8112003c:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81120040:	d0e01617 	ldw	r3,-32680(gp)
81120044:	e0bfff17 	ldw	r2,-4(fp)
81120048:	1887883a 	add	r3,r3,r2
8112004c:	00a04834 	movhi	r2,33056
81120050:	10a80004 	addi	r2,r2,-24576
81120054:	10c0062e 	bgeu	r2,r3,81120070 <sbrk+0x74>
81120058:	e0bffb17 	ldw	r2,-20(fp)
8112005c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120060:	e0bffa17 	ldw	r2,-24(fp)
81120064:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81120068:	00bfffc4 	movi	r2,-1
8112006c:	00000b06 	br	8112009c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
81120070:	d0a01617 	ldw	r2,-32680(gp)
81120074:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
81120078:	d0e01617 	ldw	r3,-32680(gp)
8112007c:	e0bfff17 	ldw	r2,-4(fp)
81120080:	1885883a 	add	r2,r3,r2
81120084:	d0a01615 	stw	r2,-32680(gp)
81120088:	e0bffb17 	ldw	r2,-20(fp)
8112008c:	e0bffc15 	stw	r2,-16(fp)
81120090:	e0bffc17 	ldw	r2,-16(fp)
81120094:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
81120098:	e0bffd17 	ldw	r2,-12(fp)
} 
8112009c:	e037883a 	mov	sp,fp
811200a0:	df000017 	ldw	fp,0(sp)
811200a4:	dec00104 	addi	sp,sp,4
811200a8:	f800283a 	ret

811200ac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
811200ac:	defffa04 	addi	sp,sp,-24
811200b0:	df000515 	stw	fp,20(sp)
811200b4:	df000504 	addi	fp,sp,20
811200b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811200bc:	0005303a 	rdctl	r2,status
811200c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811200c4:	e0fffc17 	ldw	r3,-16(fp)
811200c8:	00bfff84 	movi	r2,-2
811200cc:	1884703a 	and	r2,r3,r2
811200d0:	1001703a 	wrctl	status,r2
  
  return context;
811200d4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
811200d8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
811200dc:	e0bfff17 	ldw	r2,-4(fp)
811200e0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
811200e4:	e0bffd17 	ldw	r2,-12(fp)
811200e8:	10800017 	ldw	r2,0(r2)
811200ec:	e0fffd17 	ldw	r3,-12(fp)
811200f0:	18c00117 	ldw	r3,4(r3)
811200f4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
811200f8:	e0bffd17 	ldw	r2,-12(fp)
811200fc:	10800117 	ldw	r2,4(r2)
81120100:	e0fffd17 	ldw	r3,-12(fp)
81120104:	18c00017 	ldw	r3,0(r3)
81120108:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
8112010c:	e0bffd17 	ldw	r2,-12(fp)
81120110:	e0fffd17 	ldw	r3,-12(fp)
81120114:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81120118:	e0bffd17 	ldw	r2,-12(fp)
8112011c:	e0fffd17 	ldw	r3,-12(fp)
81120120:	10c00015 	stw	r3,0(r2)
81120124:	e0bffb17 	ldw	r2,-20(fp)
81120128:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112012c:	e0bffe17 	ldw	r2,-8(fp)
81120130:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81120134:	0001883a 	nop
81120138:	e037883a 	mov	sp,fp
8112013c:	df000017 	ldw	fp,0(sp)
81120140:	dec00104 	addi	sp,sp,4
81120144:	f800283a 	ret

81120148 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81120148:	defffb04 	addi	sp,sp,-20
8112014c:	dfc00415 	stw	ra,16(sp)
81120150:	df000315 	stw	fp,12(sp)
81120154:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81120158:	d0a01717 	ldw	r2,-32676(gp)
8112015c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81120160:	d0a06417 	ldw	r2,-32368(gp)
81120164:	10800044 	addi	r2,r2,1
81120168:	d0a06415 	stw	r2,-32368(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8112016c:	00002e06 	br	81120228 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
81120170:	e0bffd17 	ldw	r2,-12(fp)
81120174:	10800017 	ldw	r2,0(r2)
81120178:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
8112017c:	e0bffd17 	ldw	r2,-12(fp)
81120180:	10800403 	ldbu	r2,16(r2)
81120184:	10803fcc 	andi	r2,r2,255
81120188:	10000426 	beq	r2,zero,8112019c <alt_tick+0x54>
8112018c:	d0a06417 	ldw	r2,-32368(gp)
81120190:	1000021e 	bne	r2,zero,8112019c <alt_tick+0x54>
    {
      alarm->rollover = 0;
81120194:	e0bffd17 	ldw	r2,-12(fp)
81120198:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
8112019c:	e0bffd17 	ldw	r2,-12(fp)
811201a0:	10800217 	ldw	r2,8(r2)
811201a4:	d0e06417 	ldw	r3,-32368(gp)
811201a8:	18801d36 	bltu	r3,r2,81120220 <alt_tick+0xd8>
811201ac:	e0bffd17 	ldw	r2,-12(fp)
811201b0:	10800403 	ldbu	r2,16(r2)
811201b4:	10803fcc 	andi	r2,r2,255
811201b8:	1000191e 	bne	r2,zero,81120220 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
811201bc:	e0bffd17 	ldw	r2,-12(fp)
811201c0:	10800317 	ldw	r2,12(r2)
811201c4:	e0fffd17 	ldw	r3,-12(fp)
811201c8:	18c00517 	ldw	r3,20(r3)
811201cc:	1809883a 	mov	r4,r3
811201d0:	103ee83a 	callr	r2
811201d4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
811201d8:	e0bfff17 	ldw	r2,-4(fp)
811201dc:	1000031e 	bne	r2,zero,811201ec <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
811201e0:	e13ffd17 	ldw	r4,-12(fp)
811201e4:	11200ac0 	call	811200ac <alt_alarm_stop>
811201e8:	00000d06 	br	81120220 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
811201ec:	e0bffd17 	ldw	r2,-12(fp)
811201f0:	10c00217 	ldw	r3,8(r2)
811201f4:	e0bfff17 	ldw	r2,-4(fp)
811201f8:	1887883a 	add	r3,r3,r2
811201fc:	e0bffd17 	ldw	r2,-12(fp)
81120200:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
81120204:	e0bffd17 	ldw	r2,-12(fp)
81120208:	10c00217 	ldw	r3,8(r2)
8112020c:	d0a06417 	ldw	r2,-32368(gp)
81120210:	1880032e 	bgeu	r3,r2,81120220 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
81120214:	e0bffd17 	ldw	r2,-12(fp)
81120218:	00c00044 	movi	r3,1
8112021c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81120220:	e0bffe17 	ldw	r2,-8(fp)
81120224:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81120228:	e0fffd17 	ldw	r3,-12(fp)
8112022c:	d0a01704 	addi	r2,gp,-32676
81120230:	18bfcf1e 	bne	r3,r2,81120170 <__reset+0xfb100170>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
81120234:	112145c0 	call	8112145c <OSTimeTick>
}
81120238:	0001883a 	nop
8112023c:	e037883a 	mov	sp,fp
81120240:	dfc00117 	ldw	ra,4(sp)
81120244:	df000017 	ldw	fp,0(sp)
81120248:	dec00204 	addi	sp,sp,8
8112024c:	f800283a 	ret

81120250 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
81120250:	defffb04 	addi	sp,sp,-20
81120254:	dfc00415 	stw	ra,16(sp)
81120258:	df000315 	stw	fp,12(sp)
8112025c:	df000304 	addi	fp,sp,12
81120260:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
81120264:	d0a06943 	ldbu	r2,-32347(gp)
81120268:	10803fcc 	andi	r2,r2,255
8112026c:	1000031e 	bne	r2,zero,8112027c <usleep+0x2c>
  {
    return alt_busy_sleep (us);
81120270:	e13fff17 	ldw	r4,-4(fp)
81120274:	1130bf00 	call	81130bf0 <alt_busy_sleep>
81120278:	00003d06 	br	81120370 <usleep+0x120>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8112027c:	d0a06317 	ldw	r2,-32372(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
81120280:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
81120284:	e0ffff17 	ldw	r3,-4(fp)
81120288:	0090c734 	movhi	r2,17180
8112028c:	10b7a0c4 	addi	r2,r2,-8573
81120290:	1888383a 	mulxuu	r4,r3,r2
81120294:	1885383a 	mul	r2,r3,r2
81120298:	1013883a 	mov	r9,r2
8112029c:	2015883a 	mov	r10,r4
811202a0:	5006d4ba 	srli	r3,r10,18
811202a4:	e0bffe17 	ldw	r2,-8(fp)
811202a8:	1893383a 	mul	r9,r3,r2
811202ac:	e0ffff17 	ldw	r3,-4(fp)
811202b0:	0090c734 	movhi	r2,17180
811202b4:	10b7a0c4 	addi	r2,r2,-8573
811202b8:	1888383a 	mulxuu	r4,r3,r2
811202bc:	1885383a 	mul	r2,r3,r2
811202c0:	100f883a 	mov	r7,r2
811202c4:	2011883a 	mov	r8,r4
811202c8:	4004d4ba 	srli	r2,r8,18
811202cc:	010003f4 	movhi	r4,15
811202d0:	21109004 	addi	r4,r4,16960
811202d4:	1105383a 	mul	r2,r2,r4
811202d8:	1885c83a 	sub	r2,r3,r2
811202dc:	e0fffe17 	ldw	r3,-8(fp)
811202e0:	10c7383a 	mul	r3,r2,r3
811202e4:	0090c734 	movhi	r2,17180
811202e8:	10b7a0c4 	addi	r2,r2,-8573
811202ec:	1888383a 	mulxuu	r4,r3,r2
811202f0:	1885383a 	mul	r2,r3,r2
811202f4:	100b883a 	mov	r5,r2
811202f8:	200d883a 	mov	r6,r4
811202fc:	3004d4ba 	srli	r2,r6,18
81120300:	4885883a 	add	r2,r9,r2
81120304:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
81120308:	00000706 	br	81120328 <usleep+0xd8>
  {
    OSTimeDly(0xffff);
8112030c:	013fffd4 	movui	r4,65535
81120310:	1127ab40 	call	81127ab4 <OSTimeDly>
    ticks -= 0xffff;
81120314:	e0fffd17 	ldw	r3,-12(fp)
81120318:	00bffff4 	movhi	r2,65535
8112031c:	10800044 	addi	r2,r2,1
81120320:	1885883a 	add	r2,r3,r2
81120324:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
81120328:	e0bffd17 	ldw	r2,-12(fp)
8112032c:	00ffffd4 	movui	r3,65535
81120330:	18bff636 	bltu	r3,r2,8112030c <__reset+0xfb10030c>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
81120334:	e0bffd17 	ldw	r2,-12(fp)
81120338:	10bfffcc 	andi	r2,r2,65535
8112033c:	1009883a 	mov	r4,r2
81120340:	1127ab40 	call	81127ab4 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
81120344:	008003f4 	movhi	r2,15
81120348:	10909004 	addi	r2,r2,16960
8112034c:	e0fffe17 	ldw	r3,-8(fp)
81120350:	10c7203a 	divu	r3,r2,r3
81120354:	e0bfff17 	ldw	r2,-4(fp)
81120358:	10c9203a 	divu	r4,r2,r3
8112035c:	20c7383a 	mul	r3,r4,r3
81120360:	10c5c83a 	sub	r2,r2,r3
81120364:	1009883a 	mov	r4,r2
81120368:	1130bf00 	call	81130bf0 <alt_busy_sleep>

  return 0;  
8112036c:	0005883a 	mov	r2,zero
}
81120370:	e037883a 	mov	sp,fp
81120374:	dfc00117 	ldw	ra,4(sp)
81120378:	df000017 	ldw	fp,0(sp)
8112037c:	dec00204 	addi	sp,sp,8
81120380:	f800283a 	ret

81120384 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81120384:	defffe04 	addi	sp,sp,-8
81120388:	dfc00115 	stw	ra,4(sp)
8112038c:	df000015 	stw	fp,0(sp)
81120390:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81120394:	d0a01517 	ldw	r2,-32684(gp)
81120398:	10000326 	beq	r2,zero,811203a8 <alt_get_errno+0x24>
8112039c:	d0a01517 	ldw	r2,-32684(gp)
811203a0:	103ee83a 	callr	r2
811203a4:	00000106 	br	811203ac <alt_get_errno+0x28>
811203a8:	d0a05804 	addi	r2,gp,-32416
}
811203ac:	e037883a 	mov	sp,fp
811203b0:	dfc00117 	ldw	ra,4(sp)
811203b4:	df000017 	ldw	fp,0(sp)
811203b8:	dec00204 	addi	sp,sp,8
811203bc:	f800283a 	ret

811203c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
811203c0:	defff904 	addi	sp,sp,-28
811203c4:	dfc00615 	stw	ra,24(sp)
811203c8:	df000515 	stw	fp,20(sp)
811203cc:	df000504 	addi	fp,sp,20
811203d0:	e13ffd15 	stw	r4,-12(fp)
811203d4:	e17ffe15 	stw	r5,-8(fp)
811203d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811203dc:	e0bffd17 	ldw	r2,-12(fp)
811203e0:	10000616 	blt	r2,zero,811203fc <write+0x3c>
811203e4:	e0bffd17 	ldw	r2,-12(fp)
811203e8:	10c00324 	muli	r3,r2,12
811203ec:	00a044f4 	movhi	r2,33043
811203f0:	10927004 	addi	r2,r2,18880
811203f4:	1885883a 	add	r2,r3,r2
811203f8:	00000106 	br	81120400 <write+0x40>
811203fc:	0005883a 	mov	r2,zero
81120400:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81120404:	e0bffb17 	ldw	r2,-20(fp)
81120408:	10002126 	beq	r2,zero,81120490 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
8112040c:	e0bffb17 	ldw	r2,-20(fp)
81120410:	10800217 	ldw	r2,8(r2)
81120414:	108000cc 	andi	r2,r2,3
81120418:	10001826 	beq	r2,zero,8112047c <write+0xbc>
8112041c:	e0bffb17 	ldw	r2,-20(fp)
81120420:	10800017 	ldw	r2,0(r2)
81120424:	10800617 	ldw	r2,24(r2)
81120428:	10001426 	beq	r2,zero,8112047c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8112042c:	e0bffb17 	ldw	r2,-20(fp)
81120430:	10800017 	ldw	r2,0(r2)
81120434:	10800617 	ldw	r2,24(r2)
81120438:	e0ffff17 	ldw	r3,-4(fp)
8112043c:	180d883a 	mov	r6,r3
81120440:	e17ffe17 	ldw	r5,-8(fp)
81120444:	e13ffb17 	ldw	r4,-20(fp)
81120448:	103ee83a 	callr	r2
8112044c:	e0bffc15 	stw	r2,-16(fp)
81120450:	e0bffc17 	ldw	r2,-16(fp)
81120454:	1000070e 	bge	r2,zero,81120474 <write+0xb4>
      {
        ALT_ERRNO = -rval;
81120458:	11203840 	call	81120384 <alt_get_errno>
8112045c:	1007883a 	mov	r3,r2
81120460:	e0bffc17 	ldw	r2,-16(fp)
81120464:	0085c83a 	sub	r2,zero,r2
81120468:	18800015 	stw	r2,0(r3)
        return -1;
8112046c:	00bfffc4 	movi	r2,-1
81120470:	00000c06 	br	811204a4 <write+0xe4>
      }
      return rval;
81120474:	e0bffc17 	ldw	r2,-16(fp)
81120478:	00000a06 	br	811204a4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
8112047c:	11203840 	call	81120384 <alt_get_errno>
81120480:	1007883a 	mov	r3,r2
81120484:	00800344 	movi	r2,13
81120488:	18800015 	stw	r2,0(r3)
8112048c:	00000406 	br	811204a0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
81120490:	11203840 	call	81120384 <alt_get_errno>
81120494:	1007883a 	mov	r3,r2
81120498:	00801444 	movi	r2,81
8112049c:	18800015 	stw	r2,0(r3)
  }
  return -1;
811204a0:	00bfffc4 	movi	r2,-1
}
811204a4:	e037883a 	mov	sp,fp
811204a8:	dfc00117 	ldw	ra,4(sp)
811204ac:	df000017 	ldw	fp,0(sp)
811204b0:	dec00204 	addi	sp,sp,8
811204b4:	f800283a 	ret

811204b8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
811204b8:	deffde04 	addi	sp,sp,-136
811204bc:	dfc02115 	stw	ra,132(sp)
811204c0:	df002015 	stw	fp,128(sp)
811204c4:	df002004 	addi	fp,sp,128
811204c8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
811204cc:	e0bfe104 	addi	r2,fp,-124
811204d0:	100b883a 	mov	r5,r2
811204d4:	01003fc4 	movi	r4,255
811204d8:	11279200 	call	81127920 <OSTaskQuery>
811204dc:	e0bffe05 	stb	r2,-8(fp)
  if (err != OS_NO_ERR)
811204e0:	e0bffe03 	ldbu	r2,-8(fp)
811204e4:	10803fcc 	andi	r2,r2,255
811204e8:	10001e1e 	bne	r2,zero,81120564 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
811204ec:	e0bfed83 	ldbu	r2,-74(fp)
811204f0:	10803fcc 	andi	r2,r2,255
811204f4:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
811204f8:	d0a06617 	ldw	r2,-32360(gp)
811204fc:	e0fffc04 	addi	r3,fp,-16
81120500:	180b883a 	mov	r5,r3
81120504:	1009883a 	mov	r4,r2
81120508:	11261380 	call	81126138 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
8112050c:	e0bffd83 	ldbu	r2,-10(fp)
81120510:	10803fcc 	andi	r2,r2,255
81120514:	10000726 	beq	r2,zero,81120534 <__env_lock+0x7c>
81120518:	d0a01917 	ldw	r2,-32668(gp)
8112051c:	e0ffe017 	ldw	r3,-128(fp)
81120520:	1880041e 	bne	r3,r2,81120534 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
81120524:	d0a06517 	ldw	r2,-32364(gp)
81120528:	10800044 	addi	r2,r2,1
8112052c:	d0a06515 	stw	r2,-32364(gp)
81120530:	00000a06 	br	8112055c <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
81120534:	d0a06617 	ldw	r2,-32360(gp)
81120538:	e0fffe04 	addi	r3,fp,-8
8112053c:	180d883a 	mov	r6,r3
81120540:	000b883a 	mov	r5,zero
81120544:	1009883a 	mov	r4,r2
81120548:	1125cb00 	call	81125cb0 <OSSemPend>
    locks  = 1;
8112054c:	00800044 	movi	r2,1
81120550:	d0a06515 	stw	r2,-32364(gp)
    lockid = id;
81120554:	e0bfe017 	ldw	r2,-128(fp)
81120558:	d0a01915 	stw	r2,-32668(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
8112055c:	0001883a 	nop
81120560:	00000106 	br	81120568 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
81120564:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
81120568:	e037883a 	mov	sp,fp
8112056c:	dfc00117 	ldw	ra,4(sp)
81120570:	df000017 	ldw	fp,0(sp)
81120574:	dec00204 	addi	sp,sp,8
81120578:	f800283a 	ret

8112057c <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
8112057c:	defffd04 	addi	sp,sp,-12
81120580:	dfc00215 	stw	ra,8(sp)
81120584:	df000115 	stw	fp,4(sp)
81120588:	df000104 	addi	fp,sp,4
8112058c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
81120590:	d0a06517 	ldw	r2,-32364(gp)
81120594:	10000b26 	beq	r2,zero,811205c4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
81120598:	d0a06517 	ldw	r2,-32364(gp)
8112059c:	10bfffc4 	addi	r2,r2,-1
811205a0:	d0a06515 	stw	r2,-32364(gp)
811205a4:	d0a06517 	ldw	r2,-32364(gp)
811205a8:	1000071e 	bne	r2,zero,811205c8 <__env_unlock+0x4c>
  {
    lockid = -1;
811205ac:	00bfffc4 	movi	r2,-1
811205b0:	d0a01915 	stw	r2,-32668(gp)
    OSSemPost( alt_envsem );
811205b4:	d0a06617 	ldw	r2,-32360(gp)
811205b8:	1009883a 	mov	r4,r2
811205bc:	11260280 	call	81126028 <OSSemPost>
811205c0:	00000106 	br	811205c8 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
811205c4:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
811205c8:	e037883a 	mov	sp,fp
811205cc:	dfc00117 	ldw	ra,4(sp)
811205d0:	df000017 	ldw	fp,0(sp)
811205d4:	dec00204 	addi	sp,sp,8
811205d8:	f800283a 	ret

811205dc <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
811205dc:	deffda04 	addi	sp,sp,-152
811205e0:	dfc02515 	stw	ra,148(sp)
811205e4:	df002415 	stw	fp,144(sp)
811205e8:	df002404 	addi	fp,sp,144
811205ec:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811205f0:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
811205f4:	d0a06943 	ldbu	r2,-32347(gp)
811205f8:	10803fcc 	andi	r2,r2,255
811205fc:	10800060 	cmpeqi	r2,r2,1
81120600:	10003626 	beq	r2,zero,811206dc <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
81120604:	e0bfe104 	addi	r2,fp,-124
81120608:	100b883a 	mov	r5,r2
8112060c:	01003fc4 	movi	r4,255
81120610:	11279200 	call	81127920 <OSTaskQuery>
81120614:	e0bffe05 	stb	r2,-8(fp)
  if (err != OS_NO_ERR)
81120618:	e0bffe03 	ldbu	r2,-8(fp)
8112061c:	10803fcc 	andi	r2,r2,255
81120620:	1000301e 	bne	r2,zero,811206e4 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
81120624:	e0bfed83 	ldbu	r2,-74(fp)
81120628:	10803fcc 	andi	r2,r2,255
8112062c:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
81120630:	d0a06817 	ldw	r2,-32352(gp)
81120634:	e0fffc04 	addi	r3,fp,-16
81120638:	180b883a 	mov	r5,r3
8112063c:	1009883a 	mov	r4,r2
81120640:	11261380 	call	81126138 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120644:	0005303a 	rdctl	r2,status
81120648:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112064c:	e0ffe017 	ldw	r3,-128(fp)
81120650:	00bfff84 	movi	r2,-2
81120654:	1884703a 	and	r2,r3,r2
81120658:	1001703a 	wrctl	status,r2
  
  return context;
8112065c:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
81120660:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
81120664:	e0bffc0b 	ldhu	r2,-16(fp)
81120668:	10bfffcc 	andi	r2,r2,65535
8112066c:	10000b1e 	bne	r2,zero,8112069c <__malloc_lock+0xc0>
81120670:	d0a01a17 	ldw	r2,-32664(gp)
81120674:	e0ffdd17 	ldw	r3,-140(fp)
81120678:	1880081e 	bne	r3,r2,8112069c <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
8112067c:	d0a06717 	ldw	r2,-32356(gp)
81120680:	10800044 	addi	r2,r2,1
81120684:	d0a06715 	stw	r2,-32356(gp)
81120688:	e0bfdc17 	ldw	r2,-144(fp)
8112068c:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120690:	e0bfde17 	ldw	r2,-136(fp)
81120694:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
81120698:	00000e06 	br	811206d4 <__malloc_lock+0xf8>
8112069c:	e0bfdc17 	ldw	r2,-144(fp)
811206a0:	e0bfdf15 	stw	r2,-132(fp)
811206a4:	e0bfdf17 	ldw	r2,-132(fp)
811206a8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
811206ac:	d0a06817 	ldw	r2,-32352(gp)
811206b0:	e0fffe04 	addi	r3,fp,-8
811206b4:	180d883a 	mov	r6,r3
811206b8:	000b883a 	mov	r5,zero
811206bc:	1009883a 	mov	r4,r2
811206c0:	1125cb00 	call	81125cb0 <OSSemPend>
    locks  = 1;
811206c4:	00800044 	movi	r2,1
811206c8:	d0a06715 	stw	r2,-32356(gp)
    lockid = id;
811206cc:	e0bfdd17 	ldw	r2,-140(fp)
811206d0:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
811206d4:	0001883a 	nop
811206d8:	00000306 	br	811206e8 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
811206dc:	0001883a 	nop
811206e0:	00000106 	br	811206e8 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
811206e4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
811206e8:	e037883a 	mov	sp,fp
811206ec:	dfc00117 	ldw	ra,4(sp)
811206f0:	df000017 	ldw	fp,0(sp)
811206f4:	dec00204 	addi	sp,sp,8
811206f8:	f800283a 	ret

811206fc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
811206fc:	defff804 	addi	sp,sp,-32
81120700:	dfc00715 	stw	ra,28(sp)
81120704:	df000615 	stw	fp,24(sp)
81120708:	df000604 	addi	fp,sp,24
8112070c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81120710:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
81120714:	d0a06943 	ldbu	r2,-32347(gp)
81120718:	10803fcc 	andi	r2,r2,255
8112071c:	10800060 	cmpeqi	r2,r2,1
81120720:	10002326 	beq	r2,zero,811207b0 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120724:	0005303a 	rdctl	r2,status
81120728:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112072c:	e0fffe17 	ldw	r3,-8(fp)
81120730:	00bfff84 	movi	r2,-2
81120734:	1884703a 	and	r2,r3,r2
81120738:	1001703a 	wrctl	status,r2
  
  return context;
8112073c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
81120740:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
81120744:	d0a06717 	ldw	r2,-32356(gp)
81120748:	1000051e 	bne	r2,zero,81120760 <__malloc_unlock+0x64>
8112074c:	e0bffa17 	ldw	r2,-24(fp)
81120750:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120754:	e0bffb17 	ldw	r2,-20(fp)
81120758:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
8112075c:	00001506 	br	811207b4 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
81120760:	d0a06717 	ldw	r2,-32356(gp)
81120764:	10bfffc4 	addi	r2,r2,-1
81120768:	d0a06715 	stw	r2,-32356(gp)
8112076c:	d0a06717 	ldw	r2,-32356(gp)
81120770:	10000a1e 	bne	r2,zero,8112079c <__malloc_unlock+0xa0>
  {
    lockid = -1;
81120774:	00bfffc4 	movi	r2,-1
81120778:	d0a01a15 	stw	r2,-32664(gp)
8112077c:	e0bffa17 	ldw	r2,-24(fp)
81120780:	e0bffc15 	stw	r2,-16(fp)
81120784:	e0bffc17 	ldw	r2,-16(fp)
81120788:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
8112078c:	d0a06817 	ldw	r2,-32352(gp)
81120790:	1009883a 	mov	r4,r2
81120794:	11260280 	call	81126028 <OSSemPost>
81120798:	00000606 	br	811207b4 <__malloc_unlock+0xb8>
8112079c:	e0bffa17 	ldw	r2,-24(fp)
811207a0:	e0bffd15 	stw	r2,-12(fp)
811207a4:	e0bffd17 	ldw	r2,-12(fp)
811207a8:	1001703a 	wrctl	status,r2
811207ac:	00000106 	br	811207b4 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
811207b0:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
811207b4:	e037883a 	mov	sp,fp
811207b8:	dfc00117 	ldw	ra,4(sp)
811207bc:	df000017 	ldw	fp,0(sp)
811207c0:	dec00204 	addi	sp,sp,8
811207c4:	f800283a 	ret

811207c8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
811207c8:	defff704 	addi	sp,sp,-36
811207cc:	dfc00815 	stw	ra,32(sp)
811207d0:	df000715 	stw	fp,28(sp)
811207d4:	df000704 	addi	fp,sp,28
811207d8:	e13ffd15 	stw	r4,-12(fp)
811207dc:	e17ffe15 	stw	r5,-8(fp)
811207e0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811207e4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811207e8:	e0bfff17 	ldw	r2,-4(fp)
811207ec:	1000021e 	bne	r2,zero,811207f8 <OSEventNameGet+0x30>
        return (0);
811207f0:	0005883a 	mov	r2,zero
811207f4:	00003706 	br	811208d4 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
811207f8:	e0bffd17 	ldw	r2,-12(fp)
811207fc:	1000051e 	bne	r2,zero,81120814 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
81120800:	e0bfff17 	ldw	r2,-4(fp)
81120804:	00c00104 	movi	r3,4
81120808:	10c00005 	stb	r3,0(r2)
        return (0);
8112080c:	0005883a 	mov	r2,zero
81120810:	00003006 	br	811208d4 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81120814:	e0bffe17 	ldw	r2,-8(fp)
81120818:	1000051e 	bne	r2,zero,81120830 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
8112081c:	e0bfff17 	ldw	r2,-4(fp)
81120820:	00c00304 	movi	r3,12
81120824:	10c00005 	stb	r3,0(r2)
        return (0);
81120828:	0005883a 	mov	r2,zero
8112082c:	00002906 	br	811208d4 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81120830:	d0a07803 	ldbu	r2,-32288(gp)
81120834:	10803fcc 	andi	r2,r2,255
81120838:	10000526 	beq	r2,zero,81120850 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
8112083c:	e0bfff17 	ldw	r2,-4(fp)
81120840:	00c00444 	movi	r3,17
81120844:	10c00005 	stb	r3,0(r2)
        return (0);
81120848:	0005883a 	mov	r2,zero
8112084c:	00002106 	br	811208d4 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
81120850:	e0bffd17 	ldw	r2,-12(fp)
81120854:	10800003 	ldbu	r2,0(r2)
81120858:	10803fcc 	andi	r2,r2,255
8112085c:	10bfffc4 	addi	r2,r2,-1
81120860:	10800128 	cmpgeui	r2,r2,4
81120864:	10000526 	beq	r2,zero,8112087c <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81120868:	e0bfff17 	ldw	r2,-4(fp)
8112086c:	00c00044 	movi	r3,1
81120870:	10c00005 	stb	r3,0(r2)
             return (0);
81120874:	0005883a 	mov	r2,zero
81120878:	00001606 	br	811208d4 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
8112087c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120880:	0005303a 	rdctl	r2,status
81120884:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120888:	e0fffb17 	ldw	r3,-20(fp)
8112088c:	00bfff84 	movi	r2,-2
81120890:	1884703a 	and	r2,r3,r2
81120894:	1001703a 	wrctl	status,r2
  
  return context;
81120898:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
8112089c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
811208a0:	e0bffd17 	ldw	r2,-12(fp)
811208a4:	108003c4 	addi	r2,r2,15
811208a8:	100b883a 	mov	r5,r2
811208ac:	e13ffe17 	ldw	r4,-8(fp)
811208b0:	112224c0 	call	8112224c <OS_StrCopy>
811208b4:	e0bffa05 	stb	r2,-24(fp)
811208b8:	e0bff917 	ldw	r2,-28(fp)
811208bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811208c0:	e0bffc17 	ldw	r2,-16(fp)
811208c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811208c8:	e0bfff17 	ldw	r2,-4(fp)
811208cc:	10000005 	stb	zero,0(r2)
    return (len);
811208d0:	e0bffa03 	ldbu	r2,-24(fp)
}
811208d4:	e037883a 	mov	sp,fp
811208d8:	dfc00117 	ldw	ra,4(sp)
811208dc:	df000017 	ldw	fp,0(sp)
811208e0:	dec00204 	addi	sp,sp,8
811208e4:	f800283a 	ret

811208e8 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
811208e8:	defff604 	addi	sp,sp,-40
811208ec:	dfc00915 	stw	ra,36(sp)
811208f0:	df000815 	stw	fp,32(sp)
811208f4:	df000804 	addi	fp,sp,32
811208f8:	e13ffd15 	stw	r4,-12(fp)
811208fc:	e17ffe15 	stw	r5,-8(fp)
81120900:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81120904:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81120908:	e0bfff17 	ldw	r2,-4(fp)
8112090c:	10004026 	beq	r2,zero,81120a10 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81120910:	e0bffd17 	ldw	r2,-12(fp)
81120914:	1000041e 	bne	r2,zero,81120928 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
81120918:	e0bfff17 	ldw	r2,-4(fp)
8112091c:	00c00104 	movi	r3,4
81120920:	10c00005 	stb	r3,0(r2)
        return;
81120924:	00003b06 	br	81120a14 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81120928:	e0bffe17 	ldw	r2,-8(fp)
8112092c:	1000041e 	bne	r2,zero,81120940 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
81120930:	e0bfff17 	ldw	r2,-4(fp)
81120934:	00c00304 	movi	r3,12
81120938:	10c00005 	stb	r3,0(r2)
        return;
8112093c:	00003506 	br	81120a14 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81120940:	d0a07803 	ldbu	r2,-32288(gp)
81120944:	10803fcc 	andi	r2,r2,255
81120948:	10000426 	beq	r2,zero,8112095c <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
8112094c:	e0bfff17 	ldw	r2,-4(fp)
81120950:	00c00484 	movi	r3,18
81120954:	10c00005 	stb	r3,0(r2)
        return;
81120958:	00002e06 	br	81120a14 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
8112095c:	e0bffd17 	ldw	r2,-12(fp)
81120960:	10800003 	ldbu	r2,0(r2)
81120964:	10803fcc 	andi	r2,r2,255
81120968:	10bfffc4 	addi	r2,r2,-1
8112096c:	10800128 	cmpgeui	r2,r2,4
81120970:	10000426 	beq	r2,zero,81120984 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81120974:	e0bfff17 	ldw	r2,-4(fp)
81120978:	00c00044 	movi	r3,1
8112097c:	10c00005 	stb	r3,0(r2)
             return;
81120980:	00002406 	br	81120a14 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81120984:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120988:	0005303a 	rdctl	r2,status
8112098c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120990:	e0fffc17 	ldw	r3,-16(fp)
81120994:	00bfff84 	movi	r2,-2
81120998:	1884703a 	and	r2,r3,r2
8112099c:	1001703a 	wrctl	status,r2
  
  return context;
811209a0:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
811209a4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
811209a8:	e13ffe17 	ldw	r4,-8(fp)
811209ac:	11222c00 	call	811222c0 <OS_StrLen>
811209b0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
811209b4:	e0bffa03 	ldbu	r2,-24(fp)
811209b8:	10800830 	cmpltui	r2,r2,32
811209bc:	1000081e 	bne	r2,zero,811209e0 <OSEventNameSet+0xf8>
811209c0:	e0bff817 	ldw	r2,-32(fp)
811209c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811209c8:	e0bff917 	ldw	r2,-28(fp)
811209cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
811209d0:	e0bfff17 	ldw	r2,-4(fp)
811209d4:	00c002c4 	movi	r3,11
811209d8:	10c00005 	stb	r3,0(r2)
        return;
811209dc:	00000d06 	br	81120a14 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
811209e0:	e0bffd17 	ldw	r2,-12(fp)
811209e4:	108003c4 	addi	r2,r2,15
811209e8:	e17ffe17 	ldw	r5,-8(fp)
811209ec:	1009883a 	mov	r4,r2
811209f0:	112224c0 	call	8112224c <OS_StrCopy>
811209f4:	e0bff817 	ldw	r2,-32(fp)
811209f8:	e0bffb15 	stw	r2,-20(fp)
811209fc:	e0bffb17 	ldw	r2,-20(fp)
81120a00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81120a04:	e0bfff17 	ldw	r2,-4(fp)
81120a08:	10000005 	stb	zero,0(r2)
81120a0c:	00000106 	br	81120a14 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81120a10:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81120a14:	e037883a 	mov	sp,fp
81120a18:	dfc00117 	ldw	ra,4(sp)
81120a1c:	df000017 	ldw	fp,0(sp)
81120a20:	dec00204 	addi	sp,sp,8
81120a24:	f800283a 	ret

81120a28 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
81120a28:	deffed04 	addi	sp,sp,-76
81120a2c:	dfc01215 	stw	ra,72(sp)
81120a30:	df001115 	stw	fp,68(sp)
81120a34:	df001104 	addi	fp,sp,68
81120a38:	e13ffc15 	stw	r4,-16(fp)
81120a3c:	e17ffd15 	stw	r5,-12(fp)
81120a40:	e1bffe15 	stw	r6,-8(fp)
81120a44:	3805883a 	mov	r2,r7
81120a48:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
81120a4c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
81120a50:	e0800217 	ldw	r2,8(fp)
81120a54:	1000021e 	bne	r2,zero,81120a60 <OSEventPendMulti+0x38>
        return (0);
81120a58:	0005883a 	mov	r2,zero
81120a5c:	00017106 	br	81121024 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
81120a60:	e0bffc17 	ldw	r2,-16(fp)
81120a64:	1000051e 	bne	r2,zero,81120a7c <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
81120a68:	e0800217 	ldw	r2,8(fp)
81120a6c:	00c00104 	movi	r3,4
81120a70:	10c00005 	stb	r3,0(r2)
        return (0);
81120a74:	0005883a 	mov	r2,zero
81120a78:	00016a06 	br	81121024 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
81120a7c:	e0bffd17 	ldw	r2,-12(fp)
81120a80:	1000051e 	bne	r2,zero,81120a98 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
81120a84:	e0800217 	ldw	r2,8(fp)
81120a88:	00c00104 	movi	r3,4
81120a8c:	10c00005 	stb	r3,0(r2)
        return (0);
81120a90:	0005883a 	mov	r2,zero
81120a94:	00016306 	br	81121024 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
81120a98:	e0bffe17 	ldw	r2,-8(fp)
81120a9c:	1000051e 	bne	r2,zero,81120ab4 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
81120aa0:	e0800217 	ldw	r2,8(fp)
81120aa4:	00c00104 	movi	r3,4
81120aa8:	10c00005 	stb	r3,0(r2)
        return (0);
81120aac:	0005883a 	mov	r2,zero
81120ab0:	00015c06 	br	81121024 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
81120ab4:	e0bffd17 	ldw	r2,-12(fp)
81120ab8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
81120abc:	e0bffc17 	ldw	r2,-16(fp)
81120ac0:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
81120ac4:	e0bfef17 	ldw	r2,-68(fp)
81120ac8:	10800017 	ldw	r2,0(r2)
81120acc:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
81120ad0:	00001906 	br	81120b38 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
81120ad4:	e0bff017 	ldw	r2,-64(fp)
81120ad8:	10800003 	ldbu	r2,0(r2)
81120adc:	10803fcc 	andi	r2,r2,255
81120ae0:	10c000a0 	cmpeqi	r3,r2,2
81120ae4:	1800091e 	bne	r3,zero,81120b0c <OSEventPendMulti+0xe4>
81120ae8:	10c000e0 	cmpeqi	r3,r2,3
81120aec:	1800091e 	bne	r3,zero,81120b14 <OSEventPendMulti+0xec>
81120af0:	10800060 	cmpeqi	r2,r2,1
81120af4:	1000091e 	bne	r2,zero,81120b1c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
81120af8:	e0800217 	ldw	r2,8(fp)
81120afc:	00c00044 	movi	r3,1
81120b00:	10c00005 	stb	r3,0(r2)
                 return (0);
81120b04:	0005883a 	mov	r2,zero
81120b08:	00014606 	br	81121024 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
81120b0c:	0001883a 	nop
81120b10:	00000306 	br	81120b20 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
81120b14:	0001883a 	nop
81120b18:	00000106 	br	81120b20 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
81120b1c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
81120b20:	e0bfef17 	ldw	r2,-68(fp)
81120b24:	10800104 	addi	r2,r2,4
81120b28:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81120b2c:	e0bfef17 	ldw	r2,-68(fp)
81120b30:	10800017 	ldw	r2,0(r2)
81120b34:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
81120b38:	e0bff017 	ldw	r2,-64(fp)
81120b3c:	103fe51e 	bne	r2,zero,81120ad4 <__reset+0xfb100ad4>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
81120b40:	d0a07803 	ldbu	r2,-32288(gp)
81120b44:	10803fcc 	andi	r2,r2,255
81120b48:	10000526 	beq	r2,zero,81120b60 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
81120b4c:	e0800217 	ldw	r2,8(fp)
81120b50:	00c00084 	movi	r3,2
81120b54:	10c00005 	stb	r3,0(r2)
        return (0);
81120b58:	0005883a 	mov	r2,zero
81120b5c:	00013106 	br	81121024 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
81120b60:	d0a06903 	ldbu	r2,-32348(gp)
81120b64:	10803fcc 	andi	r2,r2,255
81120b68:	10000526 	beq	r2,zero,81120b80 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
81120b6c:	e0800217 	ldw	r2,8(fp)
81120b70:	00c00344 	movi	r3,13
81120b74:	10c00005 	stb	r3,0(r2)
        return (0);
81120b78:	0005883a 	mov	r2,zero
81120b7c:	00012906 	br	81121024 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120b80:	0005303a 	rdctl	r2,status
81120b84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120b88:	e0fffb17 	ldw	r3,-20(fp)
81120b8c:	00bfff84 	movi	r2,-2
81120b90:	1884703a 	and	r2,r3,r2
81120b94:	1001703a 	wrctl	status,r2
  
  return context;
81120b98:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
81120b9c:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
81120ba0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
81120ba4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
81120ba8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
81120bac:	e0bffc17 	ldw	r2,-16(fp)
81120bb0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
81120bb4:	e0bfef17 	ldw	r2,-68(fp)
81120bb8:	10800017 	ldw	r2,0(r2)
81120bbc:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81120bc0:	00008106 	br	81120dc8 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
81120bc4:	e0bff017 	ldw	r2,-64(fp)
81120bc8:	10800003 	ldbu	r2,0(r2)
81120bcc:	10803fcc 	andi	r2,r2,255
81120bd0:	10c000a0 	cmpeqi	r3,r2,2
81120bd4:	18003c1e 	bne	r3,zero,81120cc8 <OSEventPendMulti+0x2a0>
81120bd8:	10c000e0 	cmpeqi	r3,r2,3
81120bdc:	1800031e 	bne	r3,zero,81120bec <OSEventPendMulti+0x1c4>
81120be0:	10800060 	cmpeqi	r2,r2,1
81120be4:	10001e1e 	bne	r2,zero,81120c60 <OSEventPendMulti+0x238>
81120be8:	00006606 	br	81120d84 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
81120bec:	e0bff017 	ldw	r2,-64(fp)
81120bf0:	1080020b 	ldhu	r2,8(r2)
81120bf4:	10bfffcc 	andi	r2,r2,65535
81120bf8:	10001526 	beq	r2,zero,81120c50 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
81120bfc:	e0bff017 	ldw	r2,-64(fp)
81120c00:	1080020b 	ldhu	r2,8(r2)
81120c04:	10bfffc4 	addi	r2,r2,-1
81120c08:	1007883a 	mov	r3,r2
81120c0c:	e0bff017 	ldw	r2,-64(fp)
81120c10:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
81120c14:	e0bffd17 	ldw	r2,-12(fp)
81120c18:	10c00104 	addi	r3,r2,4
81120c1c:	e0fffd15 	stw	r3,-12(fp)
81120c20:	e0fff017 	ldw	r3,-64(fp)
81120c24:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
81120c28:	00800044 	movi	r2,1
81120c2c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
81120c30:	e0bffe17 	ldw	r2,-8(fp)
81120c34:	10c00104 	addi	r3,r2,4
81120c38:	e0fffe15 	stw	r3,-8(fp)
81120c3c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
81120c40:	e0bff18b 	ldhu	r2,-58(fp)
81120c44:	10800044 	addi	r2,r2,1
81120c48:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
81120c4c:	00005806 	br	81120db0 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
81120c50:	e0bff203 	ldbu	r2,-56(fp)
81120c54:	10800054 	ori	r2,r2,1
81120c58:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81120c5c:	00005406 	br	81120db0 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
81120c60:	e0bff017 	ldw	r2,-64(fp)
81120c64:	10800117 	ldw	r2,4(r2)
81120c68:	10001326 	beq	r2,zero,81120cb8 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
81120c6c:	e0bffe17 	ldw	r2,-8(fp)
81120c70:	10c00104 	addi	r3,r2,4
81120c74:	e0fffe15 	stw	r3,-8(fp)
81120c78:	e0fff017 	ldw	r3,-64(fp)
81120c7c:	18c00117 	ldw	r3,4(r3)
81120c80:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
81120c84:	e0bff017 	ldw	r2,-64(fp)
81120c88:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
81120c8c:	e0bffd17 	ldw	r2,-12(fp)
81120c90:	10c00104 	addi	r3,r2,4
81120c94:	e0fffd15 	stw	r3,-12(fp)
81120c98:	e0fff017 	ldw	r3,-64(fp)
81120c9c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
81120ca0:	00800044 	movi	r2,1
81120ca4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81120ca8:	e0bff18b 	ldhu	r2,-58(fp)
81120cac:	10800044 	addi	r2,r2,1
81120cb0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
81120cb4:	00003e06 	br	81120db0 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
81120cb8:	e0bff203 	ldbu	r2,-56(fp)
81120cbc:	10800094 	ori	r2,r2,2
81120cc0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81120cc4:	00003a06 	br	81120db0 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
81120cc8:	e0bff017 	ldw	r2,-64(fp)
81120ccc:	10800117 	ldw	r2,4(r2)
81120cd0:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
81120cd4:	e0bff517 	ldw	r2,-44(fp)
81120cd8:	1080058b 	ldhu	r2,22(r2)
81120cdc:	10bfffcc 	andi	r2,r2,65535
81120ce0:	10002426 	beq	r2,zero,81120d74 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
81120ce4:	e0bffe17 	ldw	r2,-8(fp)
81120ce8:	10c00104 	addi	r3,r2,4
81120cec:	e0fffe15 	stw	r3,-8(fp)
81120cf0:	e0fff517 	ldw	r3,-44(fp)
81120cf4:	18c00417 	ldw	r3,16(r3)
81120cf8:	19400104 	addi	r5,r3,4
81120cfc:	e13ff517 	ldw	r4,-44(fp)
81120d00:	21400415 	stw	r5,16(r4)
81120d04:	18c00017 	ldw	r3,0(r3)
81120d08:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
81120d0c:	e0bff517 	ldw	r2,-44(fp)
81120d10:	10c00417 	ldw	r3,16(r2)
81120d14:	e0bff517 	ldw	r2,-44(fp)
81120d18:	10800217 	ldw	r2,8(r2)
81120d1c:	1880041e 	bne	r3,r2,81120d30 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
81120d20:	e0bff517 	ldw	r2,-44(fp)
81120d24:	10c00117 	ldw	r3,4(r2)
81120d28:	e0bff517 	ldw	r2,-44(fp)
81120d2c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
81120d30:	e0bff517 	ldw	r2,-44(fp)
81120d34:	1080058b 	ldhu	r2,22(r2)
81120d38:	10bfffc4 	addi	r2,r2,-1
81120d3c:	1007883a 	mov	r3,r2
81120d40:	e0bff517 	ldw	r2,-44(fp)
81120d44:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
81120d48:	e0bffd17 	ldw	r2,-12(fp)
81120d4c:	10c00104 	addi	r3,r2,4
81120d50:	e0fffd15 	stw	r3,-12(fp)
81120d54:	e0fff017 	ldw	r3,-64(fp)
81120d58:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
81120d5c:	00800044 	movi	r2,1
81120d60:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81120d64:	e0bff18b 	ldhu	r2,-58(fp)
81120d68:	10800044 	addi	r2,r2,1
81120d6c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
81120d70:	00000f06 	br	81120db0 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
81120d74:	e0bff203 	ldbu	r2,-56(fp)
81120d78:	10800114 	ori	r2,r2,4
81120d7c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81120d80:	00000b06 	br	81120db0 <OSEventPendMulti+0x388>
81120d84:	e0bff317 	ldw	r2,-52(fp)
81120d88:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120d8c:	e0bff417 	ldw	r2,-48(fp)
81120d90:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
81120d94:	e0bffd17 	ldw	r2,-12(fp)
81120d98:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
81120d9c:	e0800217 	ldw	r2,8(fp)
81120da0:	00c00044 	movi	r3,1
81120da4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
81120da8:	e0bff18b 	ldhu	r2,-58(fp)
81120dac:	00009d06 	br	81121024 <OSEventPendMulti+0x5fc>
        }
        pevents++;
81120db0:	e0bfef17 	ldw	r2,-68(fp)
81120db4:	10800104 	addi	r2,r2,4
81120db8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81120dbc:	e0bfef17 	ldw	r2,-68(fp)
81120dc0:	10800017 	ldw	r2,0(r2)
81120dc4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81120dc8:	e0bff017 	ldw	r2,-64(fp)
81120dcc:	103f7d1e 	bne	r2,zero,81120bc4 <__reset+0xfb100bc4>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
81120dd0:	e0bff103 	ldbu	r2,-60(fp)
81120dd4:	10800058 	cmpnei	r2,r2,1
81120dd8:	10000a1e 	bne	r2,zero,81120e04 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
81120ddc:	e0bffd17 	ldw	r2,-12(fp)
81120de0:	10000015 	stw	zero,0(r2)
81120de4:	e0bff317 	ldw	r2,-52(fp)
81120de8:	e0bff615 	stw	r2,-40(fp)
81120dec:	e0bff617 	ldw	r2,-40(fp)
81120df0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
81120df4:	e0800217 	ldw	r2,8(fp)
81120df8:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
81120dfc:	e0bff18b 	ldhu	r2,-58(fp)
81120e00:	00008806 	br	81121024 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
81120e04:	d0a07917 	ldw	r2,-32284(gp)
81120e08:	d0e07917 	ldw	r3,-32284(gp)
81120e0c:	19000c03 	ldbu	r4,48(r3)
81120e10:	e0fff203 	ldbu	r3,-56(fp)
81120e14:	20c6b03a 	or	r3,r4,r3
81120e18:	1809883a 	mov	r4,r3
81120e1c:	00ffe004 	movi	r3,-128
81120e20:	20c6b03a 	or	r3,r4,r3
81120e24:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81120e28:	d0a07917 	ldw	r2,-32284(gp)
81120e2c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
81120e30:	d0a07917 	ldw	r2,-32284(gp)
81120e34:	e0ffff0b 	ldhu	r3,-4(fp)
81120e38:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
81120e3c:	e13ffc17 	ldw	r4,-16(fp)
81120e40:	11219640 	call	81121964 <OS_EventTaskWaitMulti>
81120e44:	e0bff317 	ldw	r2,-52(fp)
81120e48:	e0bff915 	stw	r2,-28(fp)
81120e4c:	e0bff917 	ldw	r2,-28(fp)
81120e50:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
81120e54:	11221080 	call	81122108 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120e58:	0005303a 	rdctl	r2,status
81120e5c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120e60:	e0fff717 	ldw	r3,-36(fp)
81120e64:	00bfff84 	movi	r2,-2
81120e68:	1884703a 	and	r2,r3,r2
81120e6c:	1001703a 	wrctl	status,r2
  
  return context;
81120e70:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
81120e74:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
81120e78:	d0a07917 	ldw	r2,-32284(gp)
81120e7c:	10800c43 	ldbu	r2,49(r2)
81120e80:	10803fcc 	andi	r2,r2,255
81120e84:	10000226 	beq	r2,zero,81120e90 <OSEventPendMulti+0x468>
81120e88:	108000a0 	cmpeqi	r2,r2,2
81120e8c:	10001826 	beq	r2,zero,81120ef0 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
81120e90:	d0a07917 	ldw	r2,-32284(gp)
81120e94:	10800717 	ldw	r2,28(r2)
81120e98:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
81120e9c:	e0bff017 	ldw	r2,-64(fp)
81120ea0:	10000b26 	beq	r2,zero,81120ed0 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
81120ea4:	e0bffd17 	ldw	r2,-12(fp)
81120ea8:	10c00104 	addi	r3,r2,4
81120eac:	e0fffd15 	stw	r3,-12(fp)
81120eb0:	e0fff017 	ldw	r3,-64(fp)
81120eb4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
81120eb8:	e0bffd17 	ldw	r2,-12(fp)
81120ebc:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
81120ec0:	e0bff18b 	ldhu	r2,-58(fp)
81120ec4:	10800044 	addi	r2,r2,1
81120ec8:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
81120ecc:	00000d06 	br	81120f04 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
81120ed0:	d0a07917 	ldw	r2,-32284(gp)
81120ed4:	00c00044 	movi	r3,1
81120ed8:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81120edc:	d0a07917 	ldw	r2,-32284(gp)
81120ee0:	e17ffc17 	ldw	r5,-16(fp)
81120ee4:	1009883a 	mov	r4,r2
81120ee8:	1121b6c0 	call	81121b6c <OS_EventTaskRemoveMulti>
             }
			 break;
81120eec:	00000506 	br	81120f04 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81120ef0:	d0a07917 	ldw	r2,-32284(gp)
81120ef4:	e17ffc17 	ldw	r5,-16(fp)
81120ef8:	1009883a 	mov	r4,r2
81120efc:	1121b6c0 	call	81121b6c <OS_EventTaskRemoveMulti>
             break;
81120f00:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
81120f04:	d0a07917 	ldw	r2,-32284(gp)
81120f08:	10800c43 	ldbu	r2,49(r2)
81120f0c:	10803fcc 	andi	r2,r2,255
81120f10:	10000326 	beq	r2,zero,81120f20 <OSEventPendMulti+0x4f8>
81120f14:	108000a0 	cmpeqi	r2,r2,2
81120f18:	1000231e 	bne	r2,zero,81120fa8 <OSEventPendMulti+0x580>
81120f1c:	00002a06 	br	81120fc8 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
81120f20:	e0bff017 	ldw	r2,-64(fp)
81120f24:	10800003 	ldbu	r2,0(r2)
81120f28:	10803fcc 	andi	r2,r2,255
81120f2c:	0080100e 	bge	zero,r2,81120f70 <OSEventPendMulti+0x548>
81120f30:	10c000d0 	cmplti	r3,r2,3
81120f34:	1800071e 	bne	r3,zero,81120f54 <OSEventPendMulti+0x52c>
81120f38:	108000e0 	cmpeqi	r2,r2,3
81120f3c:	10000c26 	beq	r2,zero,81120f70 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
81120f40:	e0bffe17 	ldw	r2,-8(fp)
81120f44:	10c00104 	addi	r3,r2,4
81120f48:	e0fffe15 	stw	r3,-8(fp)
81120f4c:	10000015 	stw	zero,0(r2)
                      break;
81120f50:	00001206 	br	81120f9c <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
81120f54:	e0bffe17 	ldw	r2,-8(fp)
81120f58:	10c00104 	addi	r3,r2,4
81120f5c:	e0fffe15 	stw	r3,-8(fp)
81120f60:	d0e07917 	ldw	r3,-32284(gp)
81120f64:	18c00917 	ldw	r3,36(r3)
81120f68:	10c00015 	stw	r3,0(r2)
                      break;
81120f6c:	00000b06 	br	81120f9c <OSEventPendMulti+0x574>
81120f70:	e0bff317 	ldw	r2,-52(fp)
81120f74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120f78:	e0bff817 	ldw	r2,-32(fp)
81120f7c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
81120f80:	e0bffd17 	ldw	r2,-12(fp)
81120f84:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
81120f88:	e0800217 	ldw	r2,8(fp)
81120f8c:	00c00044 	movi	r3,1
81120f90:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
81120f94:	e0bff18b 	ldhu	r2,-58(fp)
81120f98:	00002206 	br	81121024 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
81120f9c:	e0800217 	ldw	r2,8(fp)
81120fa0:	10000005 	stb	zero,0(r2)
             break;
81120fa4:	00001006 	br	81120fe8 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
81120fa8:	e0bffe17 	ldw	r2,-8(fp)
81120fac:	10c00104 	addi	r3,r2,4
81120fb0:	e0fffe15 	stw	r3,-8(fp)
81120fb4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
81120fb8:	e0800217 	ldw	r2,8(fp)
81120fbc:	00c00384 	movi	r3,14
81120fc0:	10c00005 	stb	r3,0(r2)
             break;
81120fc4:	00000806 	br	81120fe8 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
81120fc8:	e0bffe17 	ldw	r2,-8(fp)
81120fcc:	10c00104 	addi	r3,r2,4
81120fd0:	e0fffe15 	stw	r3,-8(fp)
81120fd4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
81120fd8:	e0800217 	ldw	r2,8(fp)
81120fdc:	00c00284 	movi	r3,10
81120fe0:	10c00005 	stb	r3,0(r2)
             break;
81120fe4:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
81120fe8:	d0a07917 	ldw	r2,-32284(gp)
81120fec:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
81120ff0:	d0a07917 	ldw	r2,-32284(gp)
81120ff4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
81120ff8:	d0a07917 	ldw	r2,-32284(gp)
81120ffc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81121000:	d0a07917 	ldw	r2,-32284(gp)
81121004:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
81121008:	d0a07917 	ldw	r2,-32284(gp)
8112100c:	10000915 	stw	zero,36(r2)
81121010:	e0bff317 	ldw	r2,-52(fp)
81121014:	e0bffa15 	stw	r2,-24(fp)
81121018:	e0bffa17 	ldw	r2,-24(fp)
8112101c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
81121020:	e0bff18b 	ldhu	r2,-58(fp)
}
81121024:	e037883a 	mov	sp,fp
81121028:	dfc00117 	ldw	ra,4(sp)
8112102c:	df000017 	ldw	fp,0(sp)
81121030:	dec00204 	addi	sp,sp,8
81121034:	f800283a 	ret

81121038 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
81121038:	defffe04 	addi	sp,sp,-8
8112103c:	dfc00115 	stw	ra,4(sp)
81121040:	df000015 	stw	fp,0(sp)
81121044:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
81121048:	1131a940 	call	81131a94 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
8112104c:	1121db40 	call	81121db4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
81121050:	1121dfc0 	call	81121dfc <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
81121054:	1121f680 	call	81121f68 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
81121058:	1121cd40 	call	81121cd4 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
8112105c:	1123e180 	call	81123e18 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
81121060:	11247180 	call	81124718 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
81121064:	11258400 	call	81125840 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
81121068:	1121e680 	call	81121e68 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
8112106c:	1121ee80 	call	81121ee8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
81121070:	1131ab40 	call	81131ab4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
81121074:	11227ec0 	call	811227ec <OSDebugInit>
#endif
}
81121078:	0001883a 	nop
8112107c:	e037883a 	mov	sp,fp
81121080:	dfc00117 	ldw	ra,4(sp)
81121084:	df000017 	ldw	fp,0(sp)
81121088:	dec00204 	addi	sp,sp,8
8112108c:	f800283a 	ret

81121090 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
81121090:	deffff04 	addi	sp,sp,-4
81121094:	df000015 	stw	fp,0(sp)
81121098:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
8112109c:	d0a06943 	ldbu	r2,-32347(gp)
811210a0:	10803fcc 	andi	r2,r2,255
811210a4:	10800058 	cmpnei	r2,r2,1
811210a8:	1000071e 	bne	r2,zero,811210c8 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
811210ac:	d0a07803 	ldbu	r2,-32288(gp)
811210b0:	10803fcc 	andi	r2,r2,255
811210b4:	10803fe0 	cmpeqi	r2,r2,255
811210b8:	1000031e 	bne	r2,zero,811210c8 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
811210bc:	d0a07803 	ldbu	r2,-32288(gp)
811210c0:	10800044 	addi	r2,r2,1
811210c4:	d0a07805 	stb	r2,-32288(gp)
        }
    }
}
811210c8:	0001883a 	nop
811210cc:	e037883a 	mov	sp,fp
811210d0:	df000017 	ldw	fp,0(sp)
811210d4:	dec00104 	addi	sp,sp,4
811210d8:	f800283a 	ret

811210dc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
811210dc:	defffb04 	addi	sp,sp,-20
811210e0:	dfc00415 	stw	ra,16(sp)
811210e4:	df000315 	stw	fp,12(sp)
811210e8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
811210ec:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
811210f0:	d0a06943 	ldbu	r2,-32347(gp)
811210f4:	10803fcc 	andi	r2,r2,255
811210f8:	10800058 	cmpnei	r2,r2,1
811210fc:	10002f1e 	bne	r2,zero,811211bc <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81121100:	0005303a 	rdctl	r2,status
81121104:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81121108:	e0ffff17 	ldw	r3,-4(fp)
8112110c:	00bfff84 	movi	r2,-2
81121110:	1884703a 	and	r2,r3,r2
81121114:	1001703a 	wrctl	status,r2
  
  return context;
81121118:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112111c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
81121120:	d0a07803 	ldbu	r2,-32288(gp)
81121124:	10803fcc 	andi	r2,r2,255
81121128:	10000326 	beq	r2,zero,81121138 <OSIntExit+0x5c>
            OSIntNesting--;
8112112c:	d0a07803 	ldbu	r2,-32288(gp)
81121130:	10bfffc4 	addi	r2,r2,-1
81121134:	d0a07805 	stb	r2,-32288(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
81121138:	d0a07803 	ldbu	r2,-32288(gp)
8112113c:	10803fcc 	andi	r2,r2,255
81121140:	10001a1e 	bne	r2,zero,811211ac <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
81121144:	d0a06903 	ldbu	r2,-32348(gp)
81121148:	10803fcc 	andi	r2,r2,255
8112114c:	1000171e 	bne	r2,zero,811211ac <OSIntExit+0xd0>
                OS_SchedNew();
81121150:	11221d80 	call	811221d8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
81121154:	d0e06b03 	ldbu	r3,-32340(gp)
81121158:	d0a06b43 	ldbu	r2,-32339(gp)
8112115c:	18c03fcc 	andi	r3,r3,255
81121160:	10803fcc 	andi	r2,r2,255
81121164:	18801126 	beq	r3,r2,811211ac <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
81121168:	d0a06b03 	ldbu	r2,-32340(gp)
8112116c:	10c03fcc 	andi	r3,r2,255
81121170:	00a04574 	movhi	r2,33045
81121174:	10970204 	addi	r2,r2,23560
81121178:	18c7883a 	add	r3,r3,r3
8112117c:	18c7883a 	add	r3,r3,r3
81121180:	10c5883a 	add	r2,r2,r3
81121184:	10800017 	ldw	r2,0(r2)
81121188:	d0a07315 	stw	r2,-32308(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
8112118c:	d0a07317 	ldw	r2,-32308(gp)
81121190:	10c00e17 	ldw	r3,56(r2)
81121194:	18c00044 	addi	r3,r3,1
81121198:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
8112119c:	d0a06e17 	ldw	r2,-32328(gp)
811211a0:	10800044 	addi	r2,r2,1
811211a4:	d0a06e15 	stw	r2,-32328(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
811211a8:	11317c00 	call	811317c0 <OSCtxSw>
811211ac:	e0bffd17 	ldw	r2,-12(fp)
811211b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811211b4:	e0bffe17 	ldw	r2,-8(fp)
811211b8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
811211bc:	0001883a 	nop
811211c0:	e037883a 	mov	sp,fp
811211c4:	dfc00117 	ldw	ra,4(sp)
811211c8:	df000017 	ldw	fp,0(sp)
811211cc:	dec00204 	addi	sp,sp,8
811211d0:	f800283a 	ret

811211d4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
811211d4:	defffc04 	addi	sp,sp,-16
811211d8:	df000315 	stw	fp,12(sp)
811211dc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811211e0:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
811211e4:	d0a06943 	ldbu	r2,-32347(gp)
811211e8:	10803fcc 	andi	r2,r2,255
811211ec:	10800058 	cmpnei	r2,r2,1
811211f0:	1000161e 	bne	r2,zero,8112124c <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811211f4:	0005303a 	rdctl	r2,status
811211f8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811211fc:	e0ffff17 	ldw	r3,-4(fp)
81121200:	00bfff84 	movi	r2,-2
81121204:	1884703a 	and	r2,r3,r2
81121208:	1001703a 	wrctl	status,r2
  
  return context;
8112120c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81121210:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
81121214:	d0a07803 	ldbu	r2,-32288(gp)
81121218:	10803fcc 	andi	r2,r2,255
8112121c:	1000071e 	bne	r2,zero,8112123c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
81121220:	d0a06903 	ldbu	r2,-32348(gp)
81121224:	10803fcc 	andi	r2,r2,255
81121228:	10803fe0 	cmpeqi	r2,r2,255
8112122c:	1000031e 	bne	r2,zero,8112123c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
81121230:	d0a06903 	ldbu	r2,-32348(gp)
81121234:	10800044 	addi	r2,r2,1
81121238:	d0a06905 	stb	r2,-32348(gp)
8112123c:	e0bffd17 	ldw	r2,-12(fp)
81121240:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81121244:	e0bffe17 	ldw	r2,-8(fp)
81121248:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
8112124c:	0001883a 	nop
81121250:	e037883a 	mov	sp,fp
81121254:	df000017 	ldw	fp,0(sp)
81121258:	dec00104 	addi	sp,sp,4
8112125c:	f800283a 	ret

81121260 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
81121260:	defff804 	addi	sp,sp,-32
81121264:	dfc00715 	stw	ra,28(sp)
81121268:	df000615 	stw	fp,24(sp)
8112126c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81121270:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
81121274:	d0a06943 	ldbu	r2,-32347(gp)
81121278:	10803fcc 	andi	r2,r2,255
8112127c:	10800058 	cmpnei	r2,r2,1
81121280:	1000281e 	bne	r2,zero,81121324 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81121284:	0005303a 	rdctl	r2,status
81121288:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112128c:	e0ffff17 	ldw	r3,-4(fp)
81121290:	00bfff84 	movi	r2,-2
81121294:	1884703a 	and	r2,r3,r2
81121298:	1001703a 	wrctl	status,r2
  
  return context;
8112129c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
811212a0:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
811212a4:	d0a06903 	ldbu	r2,-32348(gp)
811212a8:	10803fcc 	andi	r2,r2,255
811212ac:	10001926 	beq	r2,zero,81121314 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
811212b0:	d0a06903 	ldbu	r2,-32348(gp)
811212b4:	10bfffc4 	addi	r2,r2,-1
811212b8:	d0a06905 	stb	r2,-32348(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
811212bc:	d0a06903 	ldbu	r2,-32348(gp)
811212c0:	10803fcc 	andi	r2,r2,255
811212c4:	10000e1e 	bne	r2,zero,81121300 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
811212c8:	d0a07803 	ldbu	r2,-32288(gp)
811212cc:	10803fcc 	andi	r2,r2,255
811212d0:	1000061e 	bne	r2,zero,811212ec <OSSchedUnlock+0x8c>
811212d4:	e0bffa17 	ldw	r2,-24(fp)
811212d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811212dc:	e0bffb17 	ldw	r2,-20(fp)
811212e0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
811212e4:	11221080 	call	81122108 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
811212e8:	00000e06 	br	81121324 <OSSchedUnlock+0xc4>
811212ec:	e0bffa17 	ldw	r2,-24(fp)
811212f0:	e0bffc15 	stw	r2,-16(fp)
811212f4:	e0bffc17 	ldw	r2,-16(fp)
811212f8:	1001703a 	wrctl	status,r2
811212fc:	00000906 	br	81121324 <OSSchedUnlock+0xc4>
81121300:	e0bffa17 	ldw	r2,-24(fp)
81121304:	e0bffd15 	stw	r2,-12(fp)
81121308:	e0bffd17 	ldw	r2,-12(fp)
8112130c:	1001703a 	wrctl	status,r2
81121310:	00000406 	br	81121324 <OSSchedUnlock+0xc4>
81121314:	e0bffa17 	ldw	r2,-24(fp)
81121318:	e0bffe15 	stw	r2,-8(fp)
8112131c:	e0bffe17 	ldw	r2,-8(fp)
81121320:	1001703a 	wrctl	status,r2
81121324:	0001883a 	nop
81121328:	e037883a 	mov	sp,fp
8112132c:	dfc00117 	ldw	ra,4(sp)
81121330:	df000017 	ldw	fp,0(sp)
81121334:	dec00204 	addi	sp,sp,8
81121338:	f800283a 	ret

8112133c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
8112133c:	defffe04 	addi	sp,sp,-8
81121340:	dfc00115 	stw	ra,4(sp)
81121344:	df000015 	stw	fp,0(sp)
81121348:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
8112134c:	d0a06943 	ldbu	r2,-32347(gp)
81121350:	10803fcc 	andi	r2,r2,255
81121354:	10000f1e 	bne	r2,zero,81121394 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
81121358:	11221d80 	call	811221d8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
8112135c:	d0a06b03 	ldbu	r2,-32340(gp)
81121360:	d0a06b45 	stb	r2,-32339(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
81121364:	d0a06b03 	ldbu	r2,-32340(gp)
81121368:	10c03fcc 	andi	r3,r2,255
8112136c:	00a04574 	movhi	r2,33045
81121370:	10970204 	addi	r2,r2,23560
81121374:	18c7883a 	add	r3,r3,r3
81121378:	18c7883a 	add	r3,r3,r3
8112137c:	10c5883a 	add	r2,r2,r3
81121380:	10800017 	ldw	r2,0(r2)
81121384:	d0a07315 	stw	r2,-32308(gp)
        OSTCBCur      = OSTCBHighRdy;
81121388:	d0a07317 	ldw	r2,-32308(gp)
8112138c:	d0a07915 	stw	r2,-32284(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
81121390:	113184c0 	call	8113184c <OSStartHighRdy>
    }
}
81121394:	0001883a 	nop
81121398:	e037883a 	mov	sp,fp
8112139c:	dfc00117 	ldw	ra,4(sp)
811213a0:	df000017 	ldw	fp,0(sp)
811213a4:	dec00204 	addi	sp,sp,8
811213a8:	f800283a 	ret

811213ac <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
811213ac:	defff904 	addi	sp,sp,-28
811213b0:	dfc00615 	stw	ra,24(sp)
811213b4:	df000515 	stw	fp,20(sp)
811213b8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811213bc:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
811213c0:	01000084 	movi	r4,2
811213c4:	1127ab40 	call	81127ab4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811213c8:	0005303a 	rdctl	r2,status
811213cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811213d0:	e0fffc17 	ldw	r3,-16(fp)
811213d4:	00bfff84 	movi	r2,-2
811213d8:	1884703a 	and	r2,r3,r2
811213dc:	1001703a 	wrctl	status,r2
  
  return context;
811213e0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
811213e4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
811213e8:	d0206a15 	stw	zero,-32344(gp)
811213ec:	e0bffb17 	ldw	r2,-20(fp)
811213f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811213f4:	e0bffd17 	ldw	r2,-12(fp)
811213f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
811213fc:	01001904 	movi	r4,100
81121400:	1127ab40 	call	81127ab4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81121404:	0005303a 	rdctl	r2,status
81121408:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112140c:	e0fffe17 	ldw	r3,-8(fp)
81121410:	00bfff84 	movi	r2,-2
81121414:	1884703a 	and	r2,r3,r2
81121418:	1001703a 	wrctl	status,r2
  
  return context;
8112141c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
81121420:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
81121424:	d0a06a17 	ldw	r2,-32344(gp)
81121428:	d0a06f15 	stw	r2,-32324(gp)
    OSStatRdy    = OS_TRUE;
8112142c:	00800044 	movi	r2,1
81121430:	d0a07c05 	stb	r2,-32272(gp)
81121434:	e0bffb17 	ldw	r2,-20(fp)
81121438:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112143c:	e0bfff17 	ldw	r2,-4(fp)
81121440:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81121444:	0001883a 	nop
81121448:	e037883a 	mov	sp,fp
8112144c:	dfc00117 	ldw	ra,4(sp)
81121450:	df000017 	ldw	fp,0(sp)
81121454:	dec00204 	addi	sp,sp,8
81121458:	f800283a 	ret

8112145c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
8112145c:	defff704 	addi	sp,sp,-36
81121460:	dfc00815 	stw	ra,32(sp)
81121464:	df000715 	stw	fp,28(sp)
81121468:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112146c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
81121470:	1131a740 	call	81131a74 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81121474:	0005303a 	rdctl	r2,status
81121478:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112147c:	e0fffd17 	ldw	r3,-12(fp)
81121480:	00bfff84 	movi	r2,-2
81121484:	1884703a 	and	r2,r3,r2
81121488:	1001703a 	wrctl	status,r2
  
  return context;
8112148c:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
81121490:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
81121494:	d0a07a17 	ldw	r2,-32280(gp)
81121498:	10800044 	addi	r2,r2,1
8112149c:	d0a07a15 	stw	r2,-32280(gp)
811214a0:	e0bffb17 	ldw	r2,-20(fp)
811214a4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811214a8:	e0bfff17 	ldw	r2,-4(fp)
811214ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
811214b0:	d0a06943 	ldbu	r2,-32347(gp)
811214b4:	10803fcc 	andi	r2,r2,255
811214b8:	10800058 	cmpnei	r2,r2,1
811214bc:	10006a1e 	bne	r2,zero,81121668 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
811214c0:	d0a06d03 	ldbu	r2,-32332(gp)
811214c4:	10803fcc 	andi	r2,r2,255
811214c8:	10c00060 	cmpeqi	r3,r2,1
811214cc:	1800061e 	bne	r3,zero,811214e8 <OSTimeTick+0x8c>
811214d0:	10c000a0 	cmpeqi	r3,r2,2
811214d4:	1800061e 	bne	r3,zero,811214f0 <OSTimeTick+0x94>
811214d8:	10000a1e 	bne	r2,zero,81121504 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
811214dc:	00800044 	movi	r2,1
811214e0:	e0bffa05 	stb	r2,-24(fp)
                 break;
811214e4:	00000b06 	br	81121514 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
811214e8:	e03ffa05 	stb	zero,-24(fp)
                 break;
811214ec:	00000906 	br	81121514 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
811214f0:	00800044 	movi	r2,1
811214f4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
811214f8:	00800044 	movi	r2,1
811214fc:	d0a06d05 	stb	r2,-32332(gp)
                 break;
81121500:	00000406 	br	81121514 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
81121504:	00800044 	movi	r2,1
81121508:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
8112150c:	d0206d05 	stb	zero,-32332(gp)
                 break;
81121510:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
81121514:	e0bffa03 	ldbu	r2,-24(fp)
81121518:	10005226 	beq	r2,zero,81121664 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
8112151c:	d0a06c17 	ldw	r2,-32336(gp)
81121520:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
81121524:	00004906 	br	8112164c <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81121528:	0005303a 	rdctl	r2,status
8112152c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81121530:	e0fffc17 	ldw	r3,-16(fp)
81121534:	00bfff84 	movi	r2,-2
81121538:	1884703a 	and	r2,r3,r2
8112153c:	1001703a 	wrctl	status,r2
  
  return context;
81121540:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
81121544:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
81121548:	e0bff917 	ldw	r2,-28(fp)
8112154c:	10800b8b 	ldhu	r2,46(r2)
81121550:	10bfffcc 	andi	r2,r2,65535
81121554:	10003626 	beq	r2,zero,81121630 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
81121558:	e0bff917 	ldw	r2,-28(fp)
8112155c:	10800b8b 	ldhu	r2,46(r2)
81121560:	10bfffc4 	addi	r2,r2,-1
81121564:	1007883a 	mov	r3,r2
81121568:	e0bff917 	ldw	r2,-28(fp)
8112156c:	10c00b8d 	sth	r3,46(r2)
81121570:	e0bff917 	ldw	r2,-28(fp)
81121574:	10800b8b 	ldhu	r2,46(r2)
81121578:	10bfffcc 	andi	r2,r2,65535
8112157c:	10002c1e 	bne	r2,zero,81121630 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
81121580:	e0bff917 	ldw	r2,-28(fp)
81121584:	10800c03 	ldbu	r2,48(r2)
81121588:	10803fcc 	andi	r2,r2,255
8112158c:	10800dcc 	andi	r2,r2,55
81121590:	10000b26 	beq	r2,zero,811215c0 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
81121594:	e0bff917 	ldw	r2,-28(fp)
81121598:	10c00c03 	ldbu	r3,48(r2)
8112159c:	00bff204 	movi	r2,-56
811215a0:	1884703a 	and	r2,r3,r2
811215a4:	1007883a 	mov	r3,r2
811215a8:	e0bff917 	ldw	r2,-28(fp)
811215ac:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
811215b0:	e0bff917 	ldw	r2,-28(fp)
811215b4:	00c00044 	movi	r3,1
811215b8:	10c00c45 	stb	r3,49(r2)
811215bc:	00000206 	br	811215c8 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
811215c0:	e0bff917 	ldw	r2,-28(fp)
811215c4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
811215c8:	e0bff917 	ldw	r2,-28(fp)
811215cc:	10800c03 	ldbu	r2,48(r2)
811215d0:	10803fcc 	andi	r2,r2,255
811215d4:	1080020c 	andi	r2,r2,8
811215d8:	1000151e 	bne	r2,zero,81121630 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
811215dc:	e0bff917 	ldw	r2,-28(fp)
811215e0:	10c00d83 	ldbu	r3,54(r2)
811215e4:	d0a07503 	ldbu	r2,-32300(gp)
811215e8:	1884b03a 	or	r2,r3,r2
811215ec:	d0a07505 	stb	r2,-32300(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
811215f0:	e0bff917 	ldw	r2,-28(fp)
811215f4:	10800d03 	ldbu	r2,52(r2)
811215f8:	10c03fcc 	andi	r3,r2,255
811215fc:	e0bff917 	ldw	r2,-28(fp)
81121600:	10800d03 	ldbu	r2,52(r2)
81121604:	11003fcc 	andi	r4,r2,255
81121608:	d0a07544 	addi	r2,gp,-32299
8112160c:	2085883a 	add	r2,r4,r2
81121610:	11000003 	ldbu	r4,0(r2)
81121614:	e0bff917 	ldw	r2,-28(fp)
81121618:	10800d43 	ldbu	r2,53(r2)
8112161c:	2084b03a 	or	r2,r4,r2
81121620:	1009883a 	mov	r4,r2
81121624:	d0a07544 	addi	r2,gp,-32299
81121628:	1885883a 	add	r2,r3,r2
8112162c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
81121630:	e0bff917 	ldw	r2,-28(fp)
81121634:	10800517 	ldw	r2,20(r2)
81121638:	e0bff915 	stw	r2,-28(fp)
8112163c:	e0bffb17 	ldw	r2,-20(fp)
81121640:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81121644:	e0bffe17 	ldw	r2,-8(fp)
81121648:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
8112164c:	e0bff917 	ldw	r2,-28(fp)
81121650:	10800c83 	ldbu	r2,50(r2)
81121654:	10803fcc 	andi	r2,r2,255
81121658:	10800798 	cmpnei	r2,r2,30
8112165c:	103fb21e 	bne	r2,zero,81121528 <__reset+0xfb101528>
81121660:	00000106 	br	81121668 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
81121664:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
81121668:	e037883a 	mov	sp,fp
8112166c:	dfc00117 	ldw	ra,4(sp)
81121670:	df000017 	ldw	fp,0(sp)
81121674:	dec00204 	addi	sp,sp,8
81121678:	f800283a 	ret

8112167c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
8112167c:	deffff04 	addi	sp,sp,-4
81121680:	df000015 	stw	fp,0(sp)
81121684:	d839883a 	mov	fp,sp
    return (OS_VERSION);
81121688:	00804784 	movi	r2,286
}
8112168c:	e037883a 	mov	sp,fp
81121690:	df000017 	ldw	fp,0(sp)
81121694:	dec00104 	addi	sp,sp,4
81121698:	f800283a 	ret

8112169c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
8112169c:	deffff04 	addi	sp,sp,-4
811216a0:	df000015 	stw	fp,0(sp)
811216a4:	d839883a 	mov	fp,sp
}
811216a8:	0001883a 	nop
811216ac:	e037883a 	mov	sp,fp
811216b0:	df000017 	ldw	fp,0(sp)
811216b4:	dec00104 	addi	sp,sp,4
811216b8:	f800283a 	ret

811216bc <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
811216bc:	defff804 	addi	sp,sp,-32
811216c0:	dfc00715 	stw	ra,28(sp)
811216c4:	df000615 	stw	fp,24(sp)
811216c8:	df000604 	addi	fp,sp,24
811216cc:	e13ffc15 	stw	r4,-16(fp)
811216d0:	e17ffd15 	stw	r5,-12(fp)
811216d4:	3007883a 	mov	r3,r6
811216d8:	3805883a 	mov	r2,r7
811216dc:	e0fffe05 	stb	r3,-8(fp)
811216e0:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
811216e4:	e0bffc17 	ldw	r2,-16(fp)
811216e8:	10800283 	ldbu	r2,10(r2)
811216ec:	10c03fcc 	andi	r3,r2,255
811216f0:	00a044f4 	movhi	r2,33043
811216f4:	108f5204 	addi	r2,r2,15688
811216f8:	10c5883a 	add	r2,r2,r3
811216fc:	10800003 	ldbu	r2,0(r2)
81121700:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
81121704:	e0bffa03 	ldbu	r2,-24(fp)
81121708:	e0fffc17 	ldw	r3,-16(fp)
8112170c:	1885883a 	add	r2,r3,r2
81121710:	108002c4 	addi	r2,r2,11
81121714:	10800003 	ldbu	r2,0(r2)
81121718:	10c03fcc 	andi	r3,r2,255
8112171c:	00a044f4 	movhi	r2,33043
81121720:	108f5204 	addi	r2,r2,15688
81121724:	10c5883a 	add	r2,r2,r3
81121728:	10800003 	ldbu	r2,0(r2)
8112172c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
81121730:	e0bffa03 	ldbu	r2,-24(fp)
81121734:	100490fa 	slli	r2,r2,3
81121738:	1007883a 	mov	r3,r2
8112173c:	e0bffa43 	ldbu	r2,-23(fp)
81121740:	1885883a 	add	r2,r3,r2
81121744:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
81121748:	e0fffa83 	ldbu	r3,-22(fp)
8112174c:	00a04574 	movhi	r2,33045
81121750:	10970204 	addi	r2,r2,23560
81121754:	18c7883a 	add	r3,r3,r3
81121758:	18c7883a 	add	r3,r3,r3
8112175c:	10c5883a 	add	r2,r2,r3
81121760:	10800017 	ldw	r2,0(r2)
81121764:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
81121768:	e0bffb17 	ldw	r2,-20(fp)
8112176c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
81121770:	e0bffb17 	ldw	r2,-20(fp)
81121774:	e0fffd17 	ldw	r3,-12(fp)
81121778:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
8112177c:	e0bffb17 	ldw	r2,-20(fp)
81121780:	10800c03 	ldbu	r2,48(r2)
81121784:	1007883a 	mov	r3,r2
81121788:	e0bffe03 	ldbu	r2,-8(fp)
8112178c:	0084303a 	nor	r2,zero,r2
81121790:	1884703a 	and	r2,r3,r2
81121794:	1007883a 	mov	r3,r2
81121798:	e0bffb17 	ldw	r2,-20(fp)
8112179c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
811217a0:	e0bffb17 	ldw	r2,-20(fp)
811217a4:	e0ffff03 	ldbu	r3,-4(fp)
811217a8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
811217ac:	e0bffb17 	ldw	r2,-20(fp)
811217b0:	10800c03 	ldbu	r2,48(r2)
811217b4:	10803fcc 	andi	r2,r2,255
811217b8:	1080020c 	andi	r2,r2,8
811217bc:	1000111e 	bne	r2,zero,81121804 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
811217c0:	e0bffb17 	ldw	r2,-20(fp)
811217c4:	10c00d83 	ldbu	r3,54(r2)
811217c8:	d0a07503 	ldbu	r2,-32300(gp)
811217cc:	1884b03a 	or	r2,r3,r2
811217d0:	d0a07505 	stb	r2,-32300(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
811217d4:	e0fffa03 	ldbu	r3,-24(fp)
811217d8:	e13ffa03 	ldbu	r4,-24(fp)
811217dc:	d0a07544 	addi	r2,gp,-32299
811217e0:	2085883a 	add	r2,r4,r2
811217e4:	11000003 	ldbu	r4,0(r2)
811217e8:	e0bffb17 	ldw	r2,-20(fp)
811217ec:	10800d43 	ldbu	r2,53(r2)
811217f0:	2084b03a 	or	r2,r4,r2
811217f4:	1009883a 	mov	r4,r2
811217f8:	d0a07544 	addi	r2,gp,-32299
811217fc:	1885883a 	add	r2,r3,r2
81121800:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
81121804:	e17ffc17 	ldw	r5,-16(fp)
81121808:	e13ffb17 	ldw	r4,-20(fp)
8112180c:	1121ab40 	call	81121ab4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
81121810:	e0bffb17 	ldw	r2,-20(fp)
81121814:	10800817 	ldw	r2,32(r2)
81121818:	10000826 	beq	r2,zero,8112183c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112181c:	e0bffb17 	ldw	r2,-20(fp)
81121820:	10800817 	ldw	r2,32(r2)
81121824:	100b883a 	mov	r5,r2
81121828:	e13ffb17 	ldw	r4,-20(fp)
8112182c:	1121b6c0 	call	81121b6c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
81121830:	e0bffb17 	ldw	r2,-20(fp)
81121834:	e0fffc17 	ldw	r3,-16(fp)
81121838:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
8112183c:	e0bffa83 	ldbu	r2,-22(fp)
}
81121840:	e037883a 	mov	sp,fp
81121844:	dfc00117 	ldw	ra,4(sp)
81121848:	df000017 	ldw	fp,0(sp)
8112184c:	dec00204 	addi	sp,sp,8
81121850:	f800283a 	ret

81121854 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
81121854:	defffd04 	addi	sp,sp,-12
81121858:	df000215 	stw	fp,8(sp)
8112185c:	df000204 	addi	fp,sp,8
81121860:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
81121864:	d0a07917 	ldw	r2,-32284(gp)
81121868:	e0ffff17 	ldw	r3,-4(fp)
8112186c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
81121870:	d0a07917 	ldw	r2,-32284(gp)
81121874:	10800d03 	ldbu	r2,52(r2)
81121878:	10803fcc 	andi	r2,r2,255
8112187c:	d0e07917 	ldw	r3,-32284(gp)
81121880:	18c00d03 	ldbu	r3,52(r3)
81121884:	18c03fcc 	andi	r3,r3,255
81121888:	e13fff17 	ldw	r4,-4(fp)
8112188c:	20c7883a 	add	r3,r4,r3
81121890:	18c002c4 	addi	r3,r3,11
81121894:	19000003 	ldbu	r4,0(r3)
81121898:	d0e07917 	ldw	r3,-32284(gp)
8112189c:	18c00d43 	ldbu	r3,53(r3)
811218a0:	20c6b03a 	or	r3,r4,r3
811218a4:	1809883a 	mov	r4,r3
811218a8:	e0ffff17 	ldw	r3,-4(fp)
811218ac:	1885883a 	add	r2,r3,r2
811218b0:	108002c4 	addi	r2,r2,11
811218b4:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
811218b8:	e0bfff17 	ldw	r2,-4(fp)
811218bc:	10c00283 	ldbu	r3,10(r2)
811218c0:	d0a07917 	ldw	r2,-32284(gp)
811218c4:	10800d83 	ldbu	r2,54(r2)
811218c8:	1884b03a 	or	r2,r3,r2
811218cc:	1007883a 	mov	r3,r2
811218d0:	e0bfff17 	ldw	r2,-4(fp)
811218d4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
811218d8:	d0a07917 	ldw	r2,-32284(gp)
811218dc:	10800d03 	ldbu	r2,52(r2)
811218e0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
811218e4:	e0fffe03 	ldbu	r3,-8(fp)
811218e8:	e13ffe03 	ldbu	r4,-8(fp)
811218ec:	d0a07544 	addi	r2,gp,-32299
811218f0:	2085883a 	add	r2,r4,r2
811218f4:	10800003 	ldbu	r2,0(r2)
811218f8:	1009883a 	mov	r4,r2
811218fc:	d0a07917 	ldw	r2,-32284(gp)
81121900:	10800d43 	ldbu	r2,53(r2)
81121904:	0084303a 	nor	r2,zero,r2
81121908:	2084703a 	and	r2,r4,r2
8112190c:	1009883a 	mov	r4,r2
81121910:	d0a07544 	addi	r2,gp,-32299
81121914:	1885883a 	add	r2,r3,r2
81121918:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112191c:	e0fffe03 	ldbu	r3,-8(fp)
81121920:	d0a07544 	addi	r2,gp,-32299
81121924:	1885883a 	add	r2,r3,r2
81121928:	10800003 	ldbu	r2,0(r2)
8112192c:	10803fcc 	andi	r2,r2,255
81121930:	1000071e 	bne	r2,zero,81121950 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
81121934:	d0a07917 	ldw	r2,-32284(gp)
81121938:	10800d83 	ldbu	r2,54(r2)
8112193c:	0084303a 	nor	r2,zero,r2
81121940:	1007883a 	mov	r3,r2
81121944:	d0a07503 	ldbu	r2,-32300(gp)
81121948:	1884703a 	and	r2,r3,r2
8112194c:	d0a07505 	stb	r2,-32300(gp)
    }
}
81121950:	0001883a 	nop
81121954:	e037883a 	mov	sp,fp
81121958:	df000017 	ldw	fp,0(sp)
8112195c:	dec00104 	addi	sp,sp,4
81121960:	f800283a 	ret

81121964 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
81121964:	defffb04 	addi	sp,sp,-20
81121968:	df000415 	stw	fp,16(sp)
8112196c:	df000404 	addi	fp,sp,16
81121970:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
81121974:	d0a07917 	ldw	r2,-32284(gp)
81121978:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
8112197c:	d0a07917 	ldw	r2,-32284(gp)
81121980:	e0ffff17 	ldw	r3,-4(fp)
81121984:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
81121988:	e0bfff17 	ldw	r2,-4(fp)
8112198c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
81121990:	e0bffc17 	ldw	r2,-16(fp)
81121994:	10800017 	ldw	r2,0(r2)
81121998:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
8112199c:	00002006 	br	81121a20 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
811219a0:	d0a07917 	ldw	r2,-32284(gp)
811219a4:	10800d03 	ldbu	r2,52(r2)
811219a8:	10803fcc 	andi	r2,r2,255
811219ac:	d0e07917 	ldw	r3,-32284(gp)
811219b0:	18c00d03 	ldbu	r3,52(r3)
811219b4:	18c03fcc 	andi	r3,r3,255
811219b8:	e13ffd17 	ldw	r4,-12(fp)
811219bc:	20c7883a 	add	r3,r4,r3
811219c0:	18c002c4 	addi	r3,r3,11
811219c4:	19000003 	ldbu	r4,0(r3)
811219c8:	d0e07917 	ldw	r3,-32284(gp)
811219cc:	18c00d43 	ldbu	r3,53(r3)
811219d0:	20c6b03a 	or	r3,r4,r3
811219d4:	1809883a 	mov	r4,r3
811219d8:	e0fffd17 	ldw	r3,-12(fp)
811219dc:	1885883a 	add	r2,r3,r2
811219e0:	108002c4 	addi	r2,r2,11
811219e4:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
811219e8:	e0bffd17 	ldw	r2,-12(fp)
811219ec:	10c00283 	ldbu	r3,10(r2)
811219f0:	d0a07917 	ldw	r2,-32284(gp)
811219f4:	10800d83 	ldbu	r2,54(r2)
811219f8:	1884b03a 	or	r2,r3,r2
811219fc:	1007883a 	mov	r3,r2
81121a00:	e0bffd17 	ldw	r2,-12(fp)
81121a04:	10c00285 	stb	r3,10(r2)
        pevents++;
81121a08:	e0bffc17 	ldw	r2,-16(fp)
81121a0c:	10800104 	addi	r2,r2,4
81121a10:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
81121a14:	e0bffc17 	ldw	r2,-16(fp)
81121a18:	10800017 	ldw	r2,0(r2)
81121a1c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81121a20:	e0bffd17 	ldw	r2,-12(fp)
81121a24:	103fde1e 	bne	r2,zero,811219a0 <__reset+0xfb1019a0>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81121a28:	d0a07917 	ldw	r2,-32284(gp)
81121a2c:	10800d03 	ldbu	r2,52(r2)
81121a30:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
81121a34:	e0fffe03 	ldbu	r3,-8(fp)
81121a38:	e13ffe03 	ldbu	r4,-8(fp)
81121a3c:	d0a07544 	addi	r2,gp,-32299
81121a40:	2085883a 	add	r2,r4,r2
81121a44:	10800003 	ldbu	r2,0(r2)
81121a48:	1009883a 	mov	r4,r2
81121a4c:	d0a07917 	ldw	r2,-32284(gp)
81121a50:	10800d43 	ldbu	r2,53(r2)
81121a54:	0084303a 	nor	r2,zero,r2
81121a58:	2084703a 	and	r2,r4,r2
81121a5c:	1009883a 	mov	r4,r2
81121a60:	d0a07544 	addi	r2,gp,-32299
81121a64:	1885883a 	add	r2,r3,r2
81121a68:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81121a6c:	e0fffe03 	ldbu	r3,-8(fp)
81121a70:	d0a07544 	addi	r2,gp,-32299
81121a74:	1885883a 	add	r2,r3,r2
81121a78:	10800003 	ldbu	r2,0(r2)
81121a7c:	10803fcc 	andi	r2,r2,255
81121a80:	1000071e 	bne	r2,zero,81121aa0 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
81121a84:	d0a07917 	ldw	r2,-32284(gp)
81121a88:	10800d83 	ldbu	r2,54(r2)
81121a8c:	0084303a 	nor	r2,zero,r2
81121a90:	1007883a 	mov	r3,r2
81121a94:	d0a07503 	ldbu	r2,-32300(gp)
81121a98:	1884703a 	and	r2,r3,r2
81121a9c:	d0a07505 	stb	r2,-32300(gp)
    }
}
81121aa0:	0001883a 	nop
81121aa4:	e037883a 	mov	sp,fp
81121aa8:	df000017 	ldw	fp,0(sp)
81121aac:	dec00104 	addi	sp,sp,4
81121ab0:	f800283a 	ret

81121ab4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
81121ab4:	defffc04 	addi	sp,sp,-16
81121ab8:	df000315 	stw	fp,12(sp)
81121abc:	df000304 	addi	fp,sp,12
81121ac0:	e13ffe15 	stw	r4,-8(fp)
81121ac4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
81121ac8:	e0bffe17 	ldw	r2,-8(fp)
81121acc:	10800d03 	ldbu	r2,52(r2)
81121ad0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
81121ad4:	e0bffd03 	ldbu	r2,-12(fp)
81121ad8:	e0fffd03 	ldbu	r3,-12(fp)
81121adc:	e13fff17 	ldw	r4,-4(fp)
81121ae0:	20c7883a 	add	r3,r4,r3
81121ae4:	18c002c4 	addi	r3,r3,11
81121ae8:	18c00003 	ldbu	r3,0(r3)
81121aec:	1809883a 	mov	r4,r3
81121af0:	e0fffe17 	ldw	r3,-8(fp)
81121af4:	18c00d43 	ldbu	r3,53(r3)
81121af8:	00c6303a 	nor	r3,zero,r3
81121afc:	20c6703a 	and	r3,r4,r3
81121b00:	1809883a 	mov	r4,r3
81121b04:	e0ffff17 	ldw	r3,-4(fp)
81121b08:	1885883a 	add	r2,r3,r2
81121b0c:	108002c4 	addi	r2,r2,11
81121b10:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
81121b14:	e0bffd03 	ldbu	r2,-12(fp)
81121b18:	e0ffff17 	ldw	r3,-4(fp)
81121b1c:	1885883a 	add	r2,r3,r2
81121b20:	108002c4 	addi	r2,r2,11
81121b24:	10800003 	ldbu	r2,0(r2)
81121b28:	10803fcc 	andi	r2,r2,255
81121b2c:	10000a1e 	bne	r2,zero,81121b58 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
81121b30:	e0bfff17 	ldw	r2,-4(fp)
81121b34:	10800283 	ldbu	r2,10(r2)
81121b38:	1007883a 	mov	r3,r2
81121b3c:	e0bffe17 	ldw	r2,-8(fp)
81121b40:	10800d83 	ldbu	r2,54(r2)
81121b44:	0084303a 	nor	r2,zero,r2
81121b48:	1884703a 	and	r2,r3,r2
81121b4c:	1007883a 	mov	r3,r2
81121b50:	e0bfff17 	ldw	r2,-4(fp)
81121b54:	10c00285 	stb	r3,10(r2)
    }
}
81121b58:	0001883a 	nop
81121b5c:	e037883a 	mov	sp,fp
81121b60:	df000017 	ldw	fp,0(sp)
81121b64:	dec00104 	addi	sp,sp,4
81121b68:	f800283a 	ret

81121b6c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
81121b6c:	defffa04 	addi	sp,sp,-24
81121b70:	df000515 	stw	fp,20(sp)
81121b74:	df000504 	addi	fp,sp,20
81121b78:	e13ffe15 	stw	r4,-8(fp)
81121b7c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
81121b80:	e0bffe17 	ldw	r2,-8(fp)
81121b84:	10800d03 	ldbu	r2,52(r2)
81121b88:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
81121b8c:	e0bffe17 	ldw	r2,-8(fp)
81121b90:	10800d83 	ldbu	r2,54(r2)
81121b94:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
81121b98:	e0bffe17 	ldw	r2,-8(fp)
81121b9c:	10800d43 	ldbu	r2,53(r2)
81121ba0:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
81121ba4:	e0bfff17 	ldw	r2,-4(fp)
81121ba8:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
81121bac:	e0bffb17 	ldw	r2,-20(fp)
81121bb0:	10800017 	ldw	r2,0(r2)
81121bb4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81121bb8:	00002506 	br	81121c50 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
81121bbc:	e0bffd03 	ldbu	r2,-12(fp)
81121bc0:	e0fffd03 	ldbu	r3,-12(fp)
81121bc4:	e13ffc17 	ldw	r4,-16(fp)
81121bc8:	20c7883a 	add	r3,r4,r3
81121bcc:	18c002c4 	addi	r3,r3,11
81121bd0:	18c00003 	ldbu	r3,0(r3)
81121bd4:	1809883a 	mov	r4,r3
81121bd8:	e0fffd83 	ldbu	r3,-10(fp)
81121bdc:	00c6303a 	nor	r3,zero,r3
81121be0:	20c6703a 	and	r3,r4,r3
81121be4:	1809883a 	mov	r4,r3
81121be8:	e0fffc17 	ldw	r3,-16(fp)
81121bec:	1885883a 	add	r2,r3,r2
81121bf0:	108002c4 	addi	r2,r2,11
81121bf4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
81121bf8:	e0bffd03 	ldbu	r2,-12(fp)
81121bfc:	e0fffc17 	ldw	r3,-16(fp)
81121c00:	1885883a 	add	r2,r3,r2
81121c04:	108002c4 	addi	r2,r2,11
81121c08:	10800003 	ldbu	r2,0(r2)
81121c0c:	10803fcc 	andi	r2,r2,255
81121c10:	1000091e 	bne	r2,zero,81121c38 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
81121c14:	e0bffc17 	ldw	r2,-16(fp)
81121c18:	10800283 	ldbu	r2,10(r2)
81121c1c:	1007883a 	mov	r3,r2
81121c20:	e0bffd43 	ldbu	r2,-11(fp)
81121c24:	0084303a 	nor	r2,zero,r2
81121c28:	1884703a 	and	r2,r3,r2
81121c2c:	1007883a 	mov	r3,r2
81121c30:	e0bffc17 	ldw	r2,-16(fp)
81121c34:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
81121c38:	e0bffb17 	ldw	r2,-20(fp)
81121c3c:	10800104 	addi	r2,r2,4
81121c40:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
81121c44:	e0bffb17 	ldw	r2,-20(fp)
81121c48:	10800017 	ldw	r2,0(r2)
81121c4c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81121c50:	e0bffc17 	ldw	r2,-16(fp)
81121c54:	103fd91e 	bne	r2,zero,81121bbc <__reset+0xfb101bbc>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
81121c58:	0001883a 	nop
81121c5c:	e037883a 	mov	sp,fp
81121c60:	df000017 	ldw	fp,0(sp)
81121c64:	dec00104 	addi	sp,sp,4
81121c68:	f800283a 	ret

81121c6c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
81121c6c:	defffc04 	addi	sp,sp,-16
81121c70:	df000315 	stw	fp,12(sp)
81121c74:	df000304 	addi	fp,sp,12
81121c78:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
81121c7c:	e0bfff17 	ldw	r2,-4(fp)
81121c80:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
81121c84:	e0bfff17 	ldw	r2,-4(fp)
81121c88:	108002c4 	addi	r2,r2,11
81121c8c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81121c90:	e03ffe05 	stb	zero,-8(fp)
81121c94:	00000706 	br	81121cb4 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
81121c98:	e0bffd17 	ldw	r2,-12(fp)
81121c9c:	10c00044 	addi	r3,r2,1
81121ca0:	e0fffd15 	stw	r3,-12(fp)
81121ca4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81121ca8:	e0bffe03 	ldbu	r2,-8(fp)
81121cac:	10800044 	addi	r2,r2,1
81121cb0:	e0bffe05 	stb	r2,-8(fp)
81121cb4:	e0bffe03 	ldbu	r2,-8(fp)
81121cb8:	10800130 	cmpltui	r2,r2,4
81121cbc:	103ff61e 	bne	r2,zero,81121c98 <__reset+0xfb101c98>
        *ptbl++ = 0;
    }
}
81121cc0:	0001883a 	nop
81121cc4:	e037883a 	mov	sp,fp
81121cc8:	df000017 	ldw	fp,0(sp)
81121ccc:	dec00104 	addi	sp,sp,4
81121cd0:	f800283a 	ret

81121cd4 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
81121cd4:	defffb04 	addi	sp,sp,-20
81121cd8:	dfc00415 	stw	ra,16(sp)
81121cdc:	df000315 	stw	fp,12(sp)
81121ce0:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
81121ce4:	0142d004 	movi	r5,2880
81121ce8:	01204574 	movhi	r4,33045
81121cec:	21115904 	addi	r4,r4,17764
81121cf0:	112204c0 	call	8112204c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
81121cf4:	00a04574 	movhi	r2,33045
81121cf8:	10915904 	addi	r2,r2,17764
81121cfc:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
81121d00:	00a04574 	movhi	r2,33045
81121d04:	10916504 	addi	r2,r2,17812
81121d08:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
81121d0c:	e03ffd0d 	sth	zero,-12(fp)
81121d10:	00001306 	br	81121d60 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
81121d14:	e0bffe17 	ldw	r2,-8(fp)
81121d18:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
81121d1c:	e0bffe17 	ldw	r2,-8(fp)
81121d20:	e0ffff17 	ldw	r3,-4(fp)
81121d24:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
81121d28:	e0bffe17 	ldw	r2,-8(fp)
81121d2c:	00c00fc4 	movi	r3,63
81121d30:	10c003c5 	stb	r3,15(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
81121d34:	e0bffe17 	ldw	r2,-8(fp)
81121d38:	10000405 	stb	zero,16(r2)
#endif
        pevent1++;
81121d3c:	e0bffe17 	ldw	r2,-8(fp)
81121d40:	10800c04 	addi	r2,r2,48
81121d44:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
81121d48:	e0bfff17 	ldw	r2,-4(fp)
81121d4c:	10800c04 	addi	r2,r2,48
81121d50:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
81121d54:	e0bffd0b 	ldhu	r2,-12(fp)
81121d58:	10800044 	addi	r2,r2,1
81121d5c:	e0bffd0d 	sth	r2,-12(fp)
81121d60:	e0bffd0b 	ldhu	r2,-12(fp)
81121d64:	10800ef0 	cmpltui	r2,r2,59
81121d68:	103fea1e 	bne	r2,zero,81121d14 <__reset+0xfb101d14>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
81121d6c:	e0bffe17 	ldw	r2,-8(fp)
81121d70:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
81121d74:	e0bffe17 	ldw	r2,-8(fp)
81121d78:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
81121d7c:	e0bffe17 	ldw	r2,-8(fp)
81121d80:	00c00fc4 	movi	r3,63
81121d84:	10c003c5 	stb	r3,15(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
81121d88:	e0bffe17 	ldw	r2,-8(fp)
81121d8c:	10000405 	stb	zero,16(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
81121d90:	00a04574 	movhi	r2,33045
81121d94:	10915904 	addi	r2,r2,17764
81121d98:	d0a07715 	stw	r2,-32292(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
81121d9c:	0001883a 	nop
81121da0:	e037883a 	mov	sp,fp
81121da4:	dfc00117 	ldw	ra,4(sp)
81121da8:	df000017 	ldw	fp,0(sp)
81121dac:	dec00204 	addi	sp,sp,8
81121db0:	f800283a 	ret

81121db4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
81121db4:	deffff04 	addi	sp,sp,-4
81121db8:	df000015 	stw	fp,0(sp)
81121dbc:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
81121dc0:	d0207a15 	stw	zero,-32280(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
81121dc4:	d0207805 	stb	zero,-32288(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
81121dc8:	d0206905 	stb	zero,-32348(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
81121dcc:	d0207145 	stb	zero,-32315(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
81121dd0:	d0206945 	stb	zero,-32347(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
81121dd4:	d0206e15 	stw	zero,-32328(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
81121dd8:	d0206a15 	stw	zero,-32344(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
81121ddc:	d0207d15 	stw	zero,-32268(gp)
    OSIdleCtrMax  = 0L;
81121de0:	d0206f15 	stw	zero,-32324(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
81121de4:	d0207c05 	stb	zero,-32272(gp)
#endif
}
81121de8:	0001883a 	nop
81121dec:	e037883a 	mov	sp,fp
81121df0:	df000017 	ldw	fp,0(sp)
81121df4:	dec00104 	addi	sp,sp,4
81121df8:	f800283a 	ret

81121dfc <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
81121dfc:	defffd04 	addi	sp,sp,-12
81121e00:	df000215 	stw	fp,8(sp)
81121e04:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
81121e08:	d0207505 	stb	zero,-32300(gp)
    prdytbl       = &OSRdyTbl[0];
81121e0c:	d0a07544 	addi	r2,gp,-32299
81121e10:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81121e14:	e03ffe05 	stb	zero,-8(fp)
81121e18:	00000706 	br	81121e38 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
81121e1c:	e0bfff17 	ldw	r2,-4(fp)
81121e20:	10c00044 	addi	r3,r2,1
81121e24:	e0ffff15 	stw	r3,-4(fp)
81121e28:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81121e2c:	e0bffe03 	ldbu	r2,-8(fp)
81121e30:	10800044 	addi	r2,r2,1
81121e34:	e0bffe05 	stb	r2,-8(fp)
81121e38:	e0bffe03 	ldbu	r2,-8(fp)
81121e3c:	10800130 	cmpltui	r2,r2,4
81121e40:	103ff61e 	bne	r2,zero,81121e1c <__reset+0xfb101e1c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
81121e44:	d0206b45 	stb	zero,-32339(gp)
    OSPrioHighRdy = 0;
81121e48:	d0206b05 	stb	zero,-32340(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
81121e4c:	d0207315 	stw	zero,-32308(gp)
    OSTCBCur      = (OS_TCB *)0;
81121e50:	d0207915 	stw	zero,-32284(gp)
}
81121e54:	0001883a 	nop
81121e58:	e037883a 	mov	sp,fp
81121e5c:	df000017 	ldw	fp,0(sp)
81121e60:	dec00104 	addi	sp,sp,4
81121e64:	f800283a 	ret

81121e68 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
81121e68:	defff804 	addi	sp,sp,-32
81121e6c:	dfc00715 	stw	ra,28(sp)
81121e70:	df000615 	stw	fp,24(sp)
81121e74:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
81121e78:	008000c4 	movi	r2,3
81121e7c:	d8800415 	stw	r2,16(sp)
81121e80:	d8000315 	stw	zero,12(sp)
81121e84:	00808004 	movi	r2,512
81121e88:	d8800215 	stw	r2,8(sp)
81121e8c:	00a04574 	movhi	r2,33045
81121e90:	108f5904 	addi	r2,r2,15716
81121e94:	d8800115 	stw	r2,4(sp)
81121e98:	00bfffd4 	movui	r2,65535
81121e9c:	d8800015 	stw	r2,0(sp)
81121ea0:	01c00784 	movi	r7,30
81121ea4:	01a04574 	movhi	r6,33045
81121ea8:	31915804 	addi	r6,r6,17760
81121eac:	000b883a 	mov	r5,zero
81121eb0:	012044b4 	movhi	r4,33042
81121eb4:	2108c504 	addi	r4,r4,8980
81121eb8:	11269e40 	call	811269e4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
81121ebc:	e1bfff04 	addi	r6,fp,-4
81121ec0:	016044f4 	movhi	r5,33043
81121ec4:	294f9204 	addi	r5,r5,15944
81121ec8:	01000784 	movi	r4,30
81121ecc:	11271f40 	call	811271f4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
81121ed0:	0001883a 	nop
81121ed4:	e037883a 	mov	sp,fp
81121ed8:	dfc00117 	ldw	ra,4(sp)
81121edc:	df000017 	ldw	fp,0(sp)
81121ee0:	dec00204 	addi	sp,sp,8
81121ee4:	f800283a 	ret

81121ee8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
81121ee8:	defff804 	addi	sp,sp,-32
81121eec:	dfc00715 	stw	ra,28(sp)
81121ef0:	df000615 	stw	fp,24(sp)
81121ef4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
81121ef8:	008000c4 	movi	r2,3
81121efc:	d8800415 	stw	r2,16(sp)
81121f00:	d8000315 	stw	zero,12(sp)
81121f04:	00808004 	movi	r2,512
81121f08:	d8800215 	stw	r2,8(sp)
81121f0c:	00a04574 	movhi	r2,33045
81121f10:	108ce104 	addi	r2,r2,13188
81121f14:	d8800115 	stw	r2,4(sp)
81121f18:	00bfff94 	movui	r2,65534
81121f1c:	d8800015 	stw	r2,0(sp)
81121f20:	01c00744 	movi	r7,29
81121f24:	01a04574 	movhi	r6,33045
81121f28:	318ee004 	addi	r6,r6,15232
81121f2c:	000b883a 	mov	r5,zero
81121f30:	012044b4 	movhi	r4,33042
81121f34:	2108dc04 	addi	r4,r4,9072
81121f38:	11269e40 	call	811269e4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
81121f3c:	e1bfff04 	addi	r6,fp,-4
81121f40:	016044f4 	movhi	r5,33043
81121f44:	294f9604 	addi	r5,r5,15960
81121f48:	01000744 	movi	r4,29
81121f4c:	11271f40 	call	811271f4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
81121f50:	0001883a 	nop
81121f54:	e037883a 	mov	sp,fp
81121f58:	dfc00117 	ldw	ra,4(sp)
81121f5c:	df000017 	ldw	fp,0(sp)
81121f60:	dec00204 	addi	sp,sp,8
81121f64:	f800283a 	ret

81121f68 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
81121f68:	defffb04 	addi	sp,sp,-20
81121f6c:	dfc00415 	stw	ra,16(sp)
81121f70:	df000315 	stw	fp,12(sp)
81121f74:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
81121f78:	0142d904 	movi	r5,2916
81121f7c:	01204574 	movhi	r4,33045
81121f80:	21142904 	addi	r4,r4,20644
81121f84:	112204c0 	call	8112204c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
81121f88:	01401f04 	movi	r5,124
81121f8c:	01204574 	movhi	r4,33045
81121f90:	21170204 	addi	r4,r4,23560
81121f94:	112204c0 	call	8112204c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
81121f98:	00a04574 	movhi	r2,33045
81121f9c:	10942904 	addi	r2,r2,20644
81121fa0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
81121fa4:	00a04574 	movhi	r2,33045
81121fa8:	10944404 	addi	r2,r2,20752
81121fac:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81121fb0:	e03ffd05 	stb	zero,-12(fp)
81121fb4:	00001106 	br	81121ffc <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
81121fb8:	e0bffe17 	ldw	r2,-8(fp)
81121fbc:	e0ffff17 	ldw	r3,-4(fp)
81121fc0:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
81121fc4:	e0bffe17 	ldw	r2,-8(fp)
81121fc8:	00c00fc4 	movi	r3,63
81121fcc:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81121fd0:	e0bffe17 	ldw	r2,-8(fp)
81121fd4:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
81121fd8:	e0bffe17 	ldw	r2,-8(fp)
81121fdc:	10801b04 	addi	r2,r2,108
81121fe0:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
81121fe4:	e0bfff17 	ldw	r2,-4(fp)
81121fe8:	10801b04 	addi	r2,r2,108
81121fec:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81121ff0:	e0bffd03 	ldbu	r2,-12(fp)
81121ff4:	10800044 	addi	r2,r2,1
81121ff8:	e0bffd05 	stb	r2,-12(fp)
81121ffc:	e0bffd03 	ldbu	r2,-12(fp)
81122000:	108006b0 	cmpltui	r2,r2,26
81122004:	103fec1e 	bne	r2,zero,81121fb8 <__reset+0xfb101fb8>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
81122008:	e0bffe17 	ldw	r2,-8(fp)
8112200c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
81122010:	e0bffe17 	ldw	r2,-8(fp)
81122014:	00c00fc4 	movi	r3,63
81122018:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
8112201c:	e0bffe17 	ldw	r2,-8(fp)
81122020:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
81122024:	d0206c15 	stw	zero,-32336(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
81122028:	00a04574 	movhi	r2,33045
8112202c:	10942904 	addi	r2,r2,20644
81122030:	d0a07015 	stw	r2,-32320(gp)
}
81122034:	0001883a 	nop
81122038:	e037883a 	mov	sp,fp
8112203c:	dfc00117 	ldw	ra,4(sp)
81122040:	df000017 	ldw	fp,0(sp)
81122044:	dec00204 	addi	sp,sp,8
81122048:	f800283a 	ret

8112204c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
8112204c:	defffd04 	addi	sp,sp,-12
81122050:	df000215 	stw	fp,8(sp)
81122054:	df000204 	addi	fp,sp,8
81122058:	e13ffe15 	stw	r4,-8(fp)
8112205c:	2805883a 	mov	r2,r5
81122060:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
81122064:	00000706 	br	81122084 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
81122068:	e0bffe17 	ldw	r2,-8(fp)
8112206c:	10c00044 	addi	r3,r2,1
81122070:	e0fffe15 	stw	r3,-8(fp)
81122074:	10000005 	stb	zero,0(r2)
        size--;
81122078:	e0bfff0b 	ldhu	r2,-4(fp)
8112207c:	10bfffc4 	addi	r2,r2,-1
81122080:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
81122084:	e0bfff0b 	ldhu	r2,-4(fp)
81122088:	103ff71e 	bne	r2,zero,81122068 <__reset+0xfb102068>
        *pdest++ = (INT8U)0;
        size--;
    }
}
8112208c:	0001883a 	nop
81122090:	e037883a 	mov	sp,fp
81122094:	df000017 	ldw	fp,0(sp)
81122098:	dec00104 	addi	sp,sp,4
8112209c:	f800283a 	ret

811220a0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
811220a0:	defffc04 	addi	sp,sp,-16
811220a4:	df000315 	stw	fp,12(sp)
811220a8:	df000304 	addi	fp,sp,12
811220ac:	e13ffd15 	stw	r4,-12(fp)
811220b0:	e17ffe15 	stw	r5,-8(fp)
811220b4:	3005883a 	mov	r2,r6
811220b8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
811220bc:	00000b06 	br	811220ec <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
811220c0:	e0bffd17 	ldw	r2,-12(fp)
811220c4:	10c00044 	addi	r3,r2,1
811220c8:	e0fffd15 	stw	r3,-12(fp)
811220cc:	e0fffe17 	ldw	r3,-8(fp)
811220d0:	19000044 	addi	r4,r3,1
811220d4:	e13ffe15 	stw	r4,-8(fp)
811220d8:	18c00003 	ldbu	r3,0(r3)
811220dc:	10c00005 	stb	r3,0(r2)
        size--;
811220e0:	e0bfff0b 	ldhu	r2,-4(fp)
811220e4:	10bfffc4 	addi	r2,r2,-1
811220e8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
811220ec:	e0bfff0b 	ldhu	r2,-4(fp)
811220f0:	103ff31e 	bne	r2,zero,811220c0 <__reset+0xfb1020c0>
        *pdest++ = *psrc++;
        size--;
    }
}
811220f4:	0001883a 	nop
811220f8:	e037883a 	mov	sp,fp
811220fc:	df000017 	ldw	fp,0(sp)
81122100:	dec00104 	addi	sp,sp,4
81122104:	f800283a 	ret

81122108 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
81122108:	defffb04 	addi	sp,sp,-20
8112210c:	dfc00415 	stw	ra,16(sp)
81122110:	df000315 	stw	fp,12(sp)
81122114:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81122118:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112211c:	0005303a 	rdctl	r2,status
81122120:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122124:	e0ffff17 	ldw	r3,-4(fp)
81122128:	00bfff84 	movi	r2,-2
8112212c:	1884703a 	and	r2,r3,r2
81122130:	1001703a 	wrctl	status,r2
  
  return context;
81122134:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
81122138:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
8112213c:	d0a07803 	ldbu	r2,-32288(gp)
81122140:	10803fcc 	andi	r2,r2,255
81122144:	10001a1e 	bne	r2,zero,811221b0 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
81122148:	d0a06903 	ldbu	r2,-32348(gp)
8112214c:	10803fcc 	andi	r2,r2,255
81122150:	1000171e 	bne	r2,zero,811221b0 <OS_Sched+0xa8>
            OS_SchedNew();
81122154:	11221d80 	call	811221d8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
81122158:	d0e06b03 	ldbu	r3,-32340(gp)
8112215c:	d0a06b43 	ldbu	r2,-32339(gp)
81122160:	18c03fcc 	andi	r3,r3,255
81122164:	10803fcc 	andi	r2,r2,255
81122168:	18801126 	beq	r3,r2,811221b0 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
8112216c:	d0a06b03 	ldbu	r2,-32340(gp)
81122170:	10c03fcc 	andi	r3,r2,255
81122174:	00a04574 	movhi	r2,33045
81122178:	10970204 	addi	r2,r2,23560
8112217c:	18c7883a 	add	r3,r3,r3
81122180:	18c7883a 	add	r3,r3,r3
81122184:	10c5883a 	add	r2,r2,r3
81122188:	10800017 	ldw	r2,0(r2)
8112218c:	d0a07315 	stw	r2,-32308(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
81122190:	d0a07317 	ldw	r2,-32308(gp)
81122194:	10c00e17 	ldw	r3,56(r2)
81122198:	18c00044 	addi	r3,r3,1
8112219c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
811221a0:	d0a06e17 	ldw	r2,-32328(gp)
811221a4:	10800044 	addi	r2,r2,1
811221a8:	d0a06e15 	stw	r2,-32328(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
811221ac:	11317c00 	call	811317c0 <OSCtxSw>
811221b0:	e0bffd17 	ldw	r2,-12(fp)
811221b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811221b8:	e0bffe17 	ldw	r2,-8(fp)
811221bc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
811221c0:	0001883a 	nop
811221c4:	e037883a 	mov	sp,fp
811221c8:	dfc00117 	ldw	ra,4(sp)
811221cc:	df000017 	ldw	fp,0(sp)
811221d0:	dec00204 	addi	sp,sp,8
811221d4:	f800283a 	ret

811221d8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
811221d8:	defffe04 	addi	sp,sp,-8
811221dc:	df000115 	stw	fp,4(sp)
811221e0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
811221e4:	d0a07503 	ldbu	r2,-32300(gp)
811221e8:	10c03fcc 	andi	r3,r2,255
811221ec:	00a044f4 	movhi	r2,33043
811221f0:	108f5204 	addi	r2,r2,15688
811221f4:	10c5883a 	add	r2,r2,r3
811221f8:	10800003 	ldbu	r2,0(r2)
811221fc:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
81122200:	e0bfff03 	ldbu	r2,-4(fp)
81122204:	100490fa 	slli	r2,r2,3
81122208:	1009883a 	mov	r4,r2
8112220c:	e0ffff03 	ldbu	r3,-4(fp)
81122210:	d0a07544 	addi	r2,gp,-32299
81122214:	1885883a 	add	r2,r3,r2
81122218:	10800003 	ldbu	r2,0(r2)
8112221c:	10c03fcc 	andi	r3,r2,255
81122220:	00a044f4 	movhi	r2,33043
81122224:	108f5204 	addi	r2,r2,15688
81122228:	10c5883a 	add	r2,r2,r3
8112222c:	10800003 	ldbu	r2,0(r2)
81122230:	2085883a 	add	r2,r4,r2
81122234:	d0a06b05 	stb	r2,-32340(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
81122238:	0001883a 	nop
8112223c:	e037883a 	mov	sp,fp
81122240:	df000017 	ldw	fp,0(sp)
81122244:	dec00104 	addi	sp,sp,4
81122248:	f800283a 	ret

8112224c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
8112224c:	defffc04 	addi	sp,sp,-16
81122250:	df000315 	stw	fp,12(sp)
81122254:	df000304 	addi	fp,sp,12
81122258:	e13ffe15 	stw	r4,-8(fp)
8112225c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
81122260:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
81122264:	00000b06 	br	81122294 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
81122268:	e0bffe17 	ldw	r2,-8(fp)
8112226c:	10c00044 	addi	r3,r2,1
81122270:	e0fffe15 	stw	r3,-8(fp)
81122274:	e0ffff17 	ldw	r3,-4(fp)
81122278:	19000044 	addi	r4,r3,1
8112227c:	e13fff15 	stw	r4,-4(fp)
81122280:	18c00003 	ldbu	r3,0(r3)
81122284:	10c00005 	stb	r3,0(r2)
        len++;
81122288:	e0bffd03 	ldbu	r2,-12(fp)
8112228c:	10800044 	addi	r2,r2,1
81122290:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
81122294:	e0bfff17 	ldw	r2,-4(fp)
81122298:	10800003 	ldbu	r2,0(r2)
8112229c:	10803fcc 	andi	r2,r2,255
811222a0:	103ff11e 	bne	r2,zero,81122268 <__reset+0xfb102268>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
811222a4:	e0bffe17 	ldw	r2,-8(fp)
811222a8:	10000005 	stb	zero,0(r2)
    return (len);
811222ac:	e0bffd03 	ldbu	r2,-12(fp)
}
811222b0:	e037883a 	mov	sp,fp
811222b4:	df000017 	ldw	fp,0(sp)
811222b8:	dec00104 	addi	sp,sp,4
811222bc:	f800283a 	ret

811222c0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
811222c0:	defffd04 	addi	sp,sp,-12
811222c4:	df000215 	stw	fp,8(sp)
811222c8:	df000204 	addi	fp,sp,8
811222cc:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
811222d0:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
811222d4:	00000606 	br	811222f0 <OS_StrLen+0x30>
        psrc++;
811222d8:	e0bfff17 	ldw	r2,-4(fp)
811222dc:	10800044 	addi	r2,r2,1
811222e0:	e0bfff15 	stw	r2,-4(fp)
        len++;
811222e4:	e0bffe03 	ldbu	r2,-8(fp)
811222e8:	10800044 	addi	r2,r2,1
811222ec:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
811222f0:	e0bfff17 	ldw	r2,-4(fp)
811222f4:	10800003 	ldbu	r2,0(r2)
811222f8:	10803fcc 	andi	r2,r2,255
811222fc:	103ff61e 	bne	r2,zero,811222d8 <__reset+0xfb1022d8>
        psrc++;
        len++;
    }
    return (len);
81122300:	e0bffe03 	ldbu	r2,-8(fp)
}
81122304:	e037883a 	mov	sp,fp
81122308:	df000017 	ldw	fp,0(sp)
8112230c:	dec00104 	addi	sp,sp,4
81122310:	f800283a 	ret

81122314 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
81122314:	defffa04 	addi	sp,sp,-24
81122318:	dfc00515 	stw	ra,20(sp)
8112231c:	df000415 	stw	fp,16(sp)
81122320:	df000404 	addi	fp,sp,16
81122324:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81122328:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112232c:	0005303a 	rdctl	r2,status
81122330:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122334:	e0fffd17 	ldw	r3,-12(fp)
81122338:	00bfff84 	movi	r2,-2
8112233c:	1884703a 	and	r2,r3,r2
81122340:	1001703a 	wrctl	status,r2
  
  return context;
81122344:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
81122348:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
8112234c:	d0a06a17 	ldw	r2,-32344(gp)
81122350:	10800044 	addi	r2,r2,1
81122354:	d0a06a15 	stw	r2,-32344(gp)
81122358:	e0bffc17 	ldw	r2,-16(fp)
8112235c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122360:	e0bffe17 	ldw	r2,-8(fp)
81122364:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
81122368:	1131ad40 	call	81131ad4 <OSTaskIdleHook>
    }
8112236c:	003fef06 	br	8112232c <__reset+0xfb10232c>

81122370 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
81122370:	defff804 	addi	sp,sp,-32
81122374:	dfc00715 	stw	ra,28(sp)
81122378:	df000615 	stw	fp,24(sp)
8112237c:	dc400515 	stw	r17,20(sp)
81122380:	dc000415 	stw	r16,16(sp)
81122384:	df000604 	addi	fp,sp,24
81122388:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112238c:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
81122390:	00000206 	br	8112239c <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
81122394:	01003204 	movi	r4,200
81122398:	1127ab40 	call	81127ab4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112239c:	d0a07c03 	ldbu	r2,-32272(gp)
811223a0:	10803fcc 	andi	r2,r2,255
811223a4:	103ffb26 	beq	r2,zero,81122394 <__reset+0xfb102394>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
811223a8:	d0e06f17 	ldw	r3,-32324(gp)
811223ac:	00947b34 	movhi	r2,20972
811223b0:	10a147c4 	addi	r2,r2,-31457
811223b4:	1888383a 	mulxuu	r4,r3,r2
811223b8:	1885383a 	mul	r2,r3,r2
811223bc:	1021883a 	mov	r16,r2
811223c0:	2023883a 	mov	r17,r4
811223c4:	8804d17a 	srli	r2,r17,5
811223c8:	d0a06f15 	stw	r2,-32324(gp)
    if (OSIdleCtrMax == 0L) {
811223cc:	d0a06f17 	ldw	r2,-32324(gp)
811223d0:	1000031e 	bne	r2,zero,811223e0 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
811223d4:	d0207105 	stb	zero,-32316(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
811223d8:	01003fc4 	movi	r4,255
811223dc:	112773c0 	call	8112773c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811223e0:	0005303a 	rdctl	r2,status
811223e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811223e8:	e0fffb17 	ldw	r3,-20(fp)
811223ec:	00bfff84 	movi	r2,-2
811223f0:	1884703a 	and	r2,r3,r2
811223f4:	1001703a 	wrctl	status,r2
  
  return context;
811223f8:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
811223fc:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
81122400:	d0a06a17 	ldw	r2,-32344(gp)
81122404:	d0a07d15 	stw	r2,-32268(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
81122408:	d0206a15 	stw	zero,-32344(gp)
8112240c:	e0bffa17 	ldw	r2,-24(fp)
81122410:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122414:	e0bffc17 	ldw	r2,-16(fp)
81122418:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
8112241c:	d0e07d17 	ldw	r3,-32268(gp)
81122420:	d0a06f17 	ldw	r2,-32324(gp)
81122424:	1885203a 	divu	r2,r3,r2
81122428:	1007883a 	mov	r3,r2
8112242c:	00801904 	movi	r2,100
81122430:	10c5c83a 	sub	r2,r2,r3
81122434:	d0a07105 	stb	r2,-32316(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
81122438:	1131a540 	call	81131a54 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
8112243c:	112244c0 	call	8112244c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
81122440:	01001904 	movi	r4,100
81122444:	1127ab40 	call	81127ab4 <OSTimeDly>
    }
81122448:	003fe506 	br	811223e0 <__reset+0xfb1023e0>

8112244c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
8112244c:	defffa04 	addi	sp,sp,-24
81122450:	dfc00515 	stw	ra,20(sp)
81122454:	df000415 	stw	fp,16(sp)
81122458:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112245c:	e03ffc05 	stb	zero,-16(fp)
81122460:	00002406 	br	811224f4 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
81122464:	e0bffc03 	ldbu	r2,-16(fp)
81122468:	e0fffe04 	addi	r3,fp,-8
8112246c:	180b883a 	mov	r5,r3
81122470:	1009883a 	mov	r4,r2
81122474:	112757c0 	call	8112757c <OSTaskStkChk>
81122478:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
8112247c:	e0bffc43 	ldbu	r2,-15(fp)
81122480:	1000191e 	bne	r2,zero,811224e8 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
81122484:	e0fffc03 	ldbu	r3,-16(fp)
81122488:	00a04574 	movhi	r2,33045
8112248c:	10970204 	addi	r2,r2,23560
81122490:	18c7883a 	add	r3,r3,r3
81122494:	18c7883a 	add	r3,r3,r3
81122498:	10c5883a 	add	r2,r2,r3
8112249c:	10800017 	ldw	r2,0(r2)
811224a0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
811224a4:	e0bffd17 	ldw	r2,-12(fp)
811224a8:	10000f26 	beq	r2,zero,811224e8 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
811224ac:	e0bffd17 	ldw	r2,-12(fp)
811224b0:	10800060 	cmpeqi	r2,r2,1
811224b4:	10000c1e 	bne	r2,zero,811224e8 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
811224b8:	e0bffd17 	ldw	r2,-12(fp)
811224bc:	10c00217 	ldw	r3,8(r2)
811224c0:	e0bffd17 	ldw	r2,-12(fp)
811224c4:	10800317 	ldw	r2,12(r2)
811224c8:	1085883a 	add	r2,r2,r2
811224cc:	1085883a 	add	r2,r2,r2
811224d0:	1887883a 	add	r3,r3,r2
811224d4:	e0bffd17 	ldw	r2,-12(fp)
811224d8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
811224dc:	e0ffff17 	ldw	r3,-4(fp)
811224e0:	e0bffd17 	ldw	r2,-12(fp)
811224e4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
811224e8:	e0bffc03 	ldbu	r2,-16(fp)
811224ec:	10800044 	addi	r2,r2,1
811224f0:	e0bffc05 	stb	r2,-16(fp)
811224f4:	e0bffc03 	ldbu	r2,-16(fp)
811224f8:	108007f0 	cmpltui	r2,r2,31
811224fc:	103fd91e 	bne	r2,zero,81122464 <__reset+0xfb102464>
#endif
                }
            }
        }
    }
}
81122500:	0001883a 	nop
81122504:	e037883a 	mov	sp,fp
81122508:	dfc00117 	ldw	ra,4(sp)
8112250c:	df000017 	ldw	fp,0(sp)
81122510:	dec00204 	addi	sp,sp,8
81122514:	f800283a 	ret

81122518 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
81122518:	defff204 	addi	sp,sp,-56
8112251c:	dfc00d15 	stw	ra,52(sp)
81122520:	df000c15 	stw	fp,48(sp)
81122524:	df000c04 	addi	fp,sp,48
81122528:	e17ffc15 	stw	r5,-16(fp)
8112252c:	e1bffd15 	stw	r6,-12(fp)
81122530:	3807883a 	mov	r3,r7
81122534:	e0800417 	ldw	r2,16(fp)
81122538:	e13ffb05 	stb	r4,-20(fp)
8112253c:	e0fffe0d 	sth	r3,-8(fp)
81122540:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81122544:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122548:	0005303a 	rdctl	r2,status
8112254c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122550:	e0fffa17 	ldw	r3,-24(fp)
81122554:	00bfff84 	movi	r2,-2
81122558:	1884703a 	and	r2,r3,r2
8112255c:	1001703a 	wrctl	status,r2
  
  return context;
81122560:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
81122564:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
81122568:	d0a07017 	ldw	r2,-32320(gp)
8112256c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
81122570:	e0bff617 	ldw	r2,-40(fp)
81122574:	10009326 	beq	r2,zero,811227c4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
81122578:	e0bff617 	ldw	r2,-40(fp)
8112257c:	10800517 	ldw	r2,20(r2)
81122580:	d0a07015 	stw	r2,-32320(gp)
81122584:	e0bff417 	ldw	r2,-48(fp)
81122588:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112258c:	e0bff817 	ldw	r2,-32(fp)
81122590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
81122594:	e0bff617 	ldw	r2,-40(fp)
81122598:	e0fffc17 	ldw	r3,-16(fp)
8112259c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
811225a0:	e0bff617 	ldw	r2,-40(fp)
811225a4:	e0fffb03 	ldbu	r3,-20(fp)
811225a8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
811225ac:	e0bff617 	ldw	r2,-40(fp)
811225b0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
811225b4:	e0bff617 	ldw	r2,-40(fp)
811225b8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
811225bc:	e0bff617 	ldw	r2,-40(fp)
811225c0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
811225c4:	e0bff617 	ldw	r2,-40(fp)
811225c8:	e0c00317 	ldw	r3,12(fp)
811225cc:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
811225d0:	e0bff617 	ldw	r2,-40(fp)
811225d4:	e0c00217 	ldw	r3,8(fp)
811225d8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
811225dc:	e0bff617 	ldw	r2,-40(fp)
811225e0:	e0fffd17 	ldw	r3,-12(fp)
811225e4:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
811225e8:	e0bff617 	ldw	r2,-40(fp)
811225ec:	e0ffff0b 	ldhu	r3,-4(fp)
811225f0:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
811225f4:	e0bff617 	ldw	r2,-40(fp)
811225f8:	e0fffe0b 	ldhu	r3,-8(fp)
811225fc:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
81122600:	e0bff617 	ldw	r2,-40(fp)
81122604:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
81122608:	e0bffb03 	ldbu	r2,-20(fp)
8112260c:	1004d0fa 	srli	r2,r2,3
81122610:	1007883a 	mov	r3,r2
81122614:	e0bff617 	ldw	r2,-40(fp)
81122618:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
8112261c:	e0bffb03 	ldbu	r2,-20(fp)
81122620:	108001cc 	andi	r2,r2,7
81122624:	1007883a 	mov	r3,r2
81122628:	e0bff617 	ldw	r2,-40(fp)
8112262c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
81122630:	e0bff617 	ldw	r2,-40(fp)
81122634:	10800d03 	ldbu	r2,52(r2)
81122638:	10803fcc 	andi	r2,r2,255
8112263c:	00c00044 	movi	r3,1
81122640:	1884983a 	sll	r2,r3,r2
81122644:	1007883a 	mov	r3,r2
81122648:	e0bff617 	ldw	r2,-40(fp)
8112264c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
81122650:	e0bff617 	ldw	r2,-40(fp)
81122654:	10800cc3 	ldbu	r2,51(r2)
81122658:	10803fcc 	andi	r2,r2,255
8112265c:	00c00044 	movi	r3,1
81122660:	1884983a 	sll	r2,r3,r2
81122664:	1007883a 	mov	r3,r2
81122668:	e0bff617 	ldw	r2,-40(fp)
8112266c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
81122670:	e0bff617 	ldw	r2,-40(fp)
81122674:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
81122678:	e0bff617 	ldw	r2,-40(fp)
8112267c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
81122680:	e0bff617 	ldw	r2,-40(fp)
81122684:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
81122688:	e0bff617 	ldw	r2,-40(fp)
8112268c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
81122690:	e0bff617 	ldw	r2,-40(fp)
81122694:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
81122698:	e0bff617 	ldw	r2,-40(fp)
8112269c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
811226a0:	e0bff617 	ldw	r2,-40(fp)
811226a4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
811226a8:	e0bff617 	ldw	r2,-40(fp)
811226ac:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
811226b0:	e0bff617 	ldw	r2,-40(fp)
811226b4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
811226b8:	e0bff617 	ldw	r2,-40(fp)
811226bc:	00c00fc4 	movi	r3,63
811226c0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
811226c4:	e0bff617 	ldw	r2,-40(fp)
811226c8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
811226cc:	e13ff617 	ldw	r4,-40(fp)
811226d0:	1131af40 	call	81131af4 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
811226d4:	e13ff617 	ldw	r4,-40(fp)
811226d8:	11319ec0 	call	811319ec <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811226dc:	0005303a 	rdctl	r2,status
811226e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811226e4:	e0fff517 	ldw	r3,-44(fp)
811226e8:	00bfff84 	movi	r2,-2
811226ec:	1884703a 	and	r2,r3,r2
811226f0:	1001703a 	wrctl	status,r2
  
  return context;
811226f4:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
811226f8:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
811226fc:	e0fffb03 	ldbu	r3,-20(fp)
81122700:	00a04574 	movhi	r2,33045
81122704:	10970204 	addi	r2,r2,23560
81122708:	18c7883a 	add	r3,r3,r3
8112270c:	18c7883a 	add	r3,r3,r3
81122710:	10c5883a 	add	r2,r2,r3
81122714:	e0fff617 	ldw	r3,-40(fp)
81122718:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
8112271c:	d0e06c17 	ldw	r3,-32336(gp)
81122720:	e0bff617 	ldw	r2,-40(fp)
81122724:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
81122728:	e0bff617 	ldw	r2,-40(fp)
8112272c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
81122730:	d0a06c17 	ldw	r2,-32336(gp)
81122734:	10000326 	beq	r2,zero,81122744 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
81122738:	d0a06c17 	ldw	r2,-32336(gp)
8112273c:	e0fff617 	ldw	r3,-40(fp)
81122740:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
81122744:	e0bff617 	ldw	r2,-40(fp)
81122748:	d0a06c15 	stw	r2,-32336(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
8112274c:	e0bff617 	ldw	r2,-40(fp)
81122750:	10c00d83 	ldbu	r3,54(r2)
81122754:	d0a07503 	ldbu	r2,-32300(gp)
81122758:	1884b03a 	or	r2,r3,r2
8112275c:	d0a07505 	stb	r2,-32300(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81122760:	e0bff617 	ldw	r2,-40(fp)
81122764:	10800d03 	ldbu	r2,52(r2)
81122768:	10c03fcc 	andi	r3,r2,255
8112276c:	e0bff617 	ldw	r2,-40(fp)
81122770:	10800d03 	ldbu	r2,52(r2)
81122774:	11003fcc 	andi	r4,r2,255
81122778:	d0a07544 	addi	r2,gp,-32299
8112277c:	2085883a 	add	r2,r4,r2
81122780:	11000003 	ldbu	r4,0(r2)
81122784:	e0bff617 	ldw	r2,-40(fp)
81122788:	10800d43 	ldbu	r2,53(r2)
8112278c:	2084b03a 	or	r2,r4,r2
81122790:	1009883a 	mov	r4,r2
81122794:	d0a07544 	addi	r2,gp,-32299
81122798:	1885883a 	add	r2,r3,r2
8112279c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
811227a0:	d0a07143 	ldbu	r2,-32315(gp)
811227a4:	10800044 	addi	r2,r2,1
811227a8:	d0a07145 	stb	r2,-32315(gp)
811227ac:	e0bff417 	ldw	r2,-48(fp)
811227b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811227b4:	e0bff717 	ldw	r2,-36(fp)
811227b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
811227bc:	0005883a 	mov	r2,zero
811227c0:	00000506 	br	811227d8 <OS_TCBInit+0x2c0>
811227c4:	e0bff417 	ldw	r2,-48(fp)
811227c8:	e0bff915 	stw	r2,-28(fp)
811227cc:	e0bff917 	ldw	r2,-28(fp)
811227d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
811227d4:	00801084 	movi	r2,66
}
811227d8:	e037883a 	mov	sp,fp
811227dc:	dfc00117 	ldw	ra,4(sp)
811227e0:	df000017 	ldw	fp,0(sp)
811227e4:	dec00204 	addi	sp,sp,8
811227e8:	f800283a 	ret

811227ec <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
811227ec:	defffe04 	addi	sp,sp,-8
811227f0:	df000115 	stw	fp,4(sp)
811227f4:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
811227f8:	d0a01b04 	addi	r2,gp,-32660
811227fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
81122800:	d0a01c04 	addi	r2,gp,-32656
81122804:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
81122808:	d0a01d84 	addi	r2,gp,-32650
8112280c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
81122810:	d0a01e04 	addi	r2,gp,-32648
81122814:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
81122818:	d0a01d04 	addi	r2,gp,-32652
8112281c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
81122820:	d0a01e84 	addi	r2,gp,-32646
81122824:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
81122828:	d0a01f04 	addi	r2,gp,-32644
8112282c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
81122830:	d0a01f84 	addi	r2,gp,-32642
81122834:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
81122838:	d0a02004 	addi	r2,gp,-32640
8112283c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
81122840:	d0a02084 	addi	r2,gp,-32638
81122844:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
81122848:	d0a02104 	addi	r2,gp,-32636
8112284c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
81122850:	d0a02184 	addi	r2,gp,-32634
81122854:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
81122858:	d0a02204 	addi	r2,gp,-32632
8112285c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
81122860:	d0a02284 	addi	r2,gp,-32630
81122864:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
81122868:	d0a02304 	addi	r2,gp,-32628
8112286c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
81122870:	d0a02384 	addi	r2,gp,-32626
81122874:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
81122878:	d0a02404 	addi	r2,gp,-32624
8112287c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
81122880:	d0a02484 	addi	r2,gp,-32622
81122884:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
81122888:	d0a02504 	addi	r2,gp,-32620
8112288c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
81122890:	d0a02584 	addi	r2,gp,-32618
81122894:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
81122898:	d0a02604 	addi	r2,gp,-32616
8112289c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
811228a0:	d0a02684 	addi	r2,gp,-32614
811228a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
811228a8:	d0a02704 	addi	r2,gp,-32612
811228ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
811228b0:	d0a02784 	addi	r2,gp,-32610
811228b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
811228b8:	d0a02804 	addi	r2,gp,-32608
811228bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
811228c0:	d0a02884 	addi	r2,gp,-32606
811228c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
811228c8:	d0a02904 	addi	r2,gp,-32604
811228cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
811228d0:	d0a02984 	addi	r2,gp,-32602
811228d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
811228d8:	d0a02a04 	addi	r2,gp,-32600
811228dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
811228e0:	d0a02a84 	addi	r2,gp,-32598
811228e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
811228e8:	d0a02b04 	addi	r2,gp,-32596
811228ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
811228f0:	d0a02b84 	addi	r2,gp,-32594
811228f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
811228f8:	d0a02c04 	addi	r2,gp,-32592
811228fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
81122900:	d0a02c84 	addi	r2,gp,-32590
81122904:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
81122908:	d0a02d04 	addi	r2,gp,-32588
8112290c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
81122910:	d0a02d84 	addi	r2,gp,-32586
81122914:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
81122918:	d0a02e04 	addi	r2,gp,-32584
8112291c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
81122920:	d0a02e84 	addi	r2,gp,-32582
81122924:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
81122928:	d0a02f04 	addi	r2,gp,-32580
8112292c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
81122930:	d0a02f84 	addi	r2,gp,-32578
81122934:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
81122938:	d0a03004 	addi	r2,gp,-32576
8112293c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
81122940:	d0a03084 	addi	r2,gp,-32574
81122944:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
81122948:	d0a03104 	addi	r2,gp,-32572
8112294c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
81122950:	d0a03184 	addi	r2,gp,-32570
81122954:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
81122958:	d0a03204 	addi	r2,gp,-32568
8112295c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
81122960:	d0a03704 	addi	r2,gp,-32548
81122964:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
81122968:	0001883a 	nop
8112296c:	e037883a 	mov	sp,fp
81122970:	df000017 	ldw	fp,0(sp)
81122974:	dec00104 	addi	sp,sp,4
81122978:	f800283a 	ret

8112297c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
8112297c:	defff204 	addi	sp,sp,-56
81122980:	df000d15 	stw	fp,52(sp)
81122984:	df000d04 	addi	fp,sp,52
81122988:	e13ffc15 	stw	r4,-16(fp)
8112298c:	2807883a 	mov	r3,r5
81122990:	3005883a 	mov	r2,r6
81122994:	e1ffff15 	stw	r7,-4(fp)
81122998:	e0fffd0d 	sth	r3,-12(fp)
8112299c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
811229a0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
811229a4:	e0bfff17 	ldw	r2,-4(fp)
811229a8:	1000021e 	bne	r2,zero,811229b4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
811229ac:	0005883a 	mov	r2,zero
811229b0:	0000b006 	br	81122c74 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
811229b4:	e0bffc17 	ldw	r2,-16(fp)
811229b8:	1000051e 	bne	r2,zero,811229d0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811229bc:	e0bfff17 	ldw	r2,-4(fp)
811229c0:	00c01b84 	movi	r3,110
811229c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811229c8:	0005883a 	mov	r2,zero
811229cc:	0000a906 	br	81122c74 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
811229d0:	e0bffc17 	ldw	r2,-16(fp)
811229d4:	10800003 	ldbu	r2,0(r2)
811229d8:	10803fcc 	andi	r2,r2,255
811229dc:	10800160 	cmpeqi	r2,r2,5
811229e0:	1000051e 	bne	r2,zero,811229f8 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
811229e4:	e0bfff17 	ldw	r2,-4(fp)
811229e8:	00c00044 	movi	r3,1
811229ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811229f0:	0005883a 	mov	r2,zero
811229f4:	00009f06 	br	81122c74 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
811229f8:	e0fffe03 	ldbu	r3,-8(fp)
811229fc:	00bfe004 	movi	r2,-128
81122a00:	1884703a 	and	r2,r3,r2
81122a04:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
81122a08:	e0bff503 	ldbu	r2,-44(fp)
81122a0c:	10000626 	beq	r2,zero,81122a28 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
81122a10:	e0bffe03 	ldbu	r2,-8(fp)
81122a14:	10801fcc 	andi	r2,r2,127
81122a18:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
81122a1c:	00800044 	movi	r2,1
81122a20:	e0bff385 	stb	r2,-50(fp)
81122a24:	00000106 	br	81122a2c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
81122a28:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
81122a2c:	e0bfff17 	ldw	r2,-4(fp)
81122a30:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122a34:	0005303a 	rdctl	r2,status
81122a38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122a3c:	e0fffb17 	ldw	r3,-20(fp)
81122a40:	00bfff84 	movi	r2,-2
81122a44:	1884703a 	and	r2,r3,r2
81122a48:	1001703a 	wrctl	status,r2
  
  return context;
81122a4c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
81122a50:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
81122a54:	e0bffe03 	ldbu	r2,-8(fp)
81122a58:	10c00060 	cmpeqi	r3,r2,1
81122a5c:	18005f1e 	bne	r3,zero,81122bdc <OSFlagAccept+0x260>
81122a60:	10c00088 	cmpgei	r3,r2,2
81122a64:	1800021e 	bne	r3,zero,81122a70 <OSFlagAccept+0xf4>
81122a68:	10003f26 	beq	r2,zero,81122b68 <OSFlagAccept+0x1ec>
81122a6c:	00007706 	br	81122c4c <OSFlagAccept+0x2d0>
81122a70:	10c000a0 	cmpeqi	r3,r2,2
81122a74:	1800031e 	bne	r3,zero,81122a84 <OSFlagAccept+0x108>
81122a78:	108000e0 	cmpeqi	r2,r2,3
81122a7c:	10001e1e 	bne	r2,zero,81122af8 <OSFlagAccept+0x17c>
81122a80:	00007206 	br	81122c4c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
81122a84:	e0bffc17 	ldw	r2,-16(fp)
81122a88:	10c0020b 	ldhu	r3,8(r2)
81122a8c:	e0bffd0b 	ldhu	r2,-12(fp)
81122a90:	1884703a 	and	r2,r3,r2
81122a94:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81122a98:	e0fff30b 	ldhu	r3,-52(fp)
81122a9c:	e0bffd0b 	ldhu	r2,-12(fp)
81122aa0:	18800d1e 	bne	r3,r2,81122ad8 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81122aa4:	e0bff383 	ldbu	r2,-50(fp)
81122aa8:	10800058 	cmpnei	r2,r2,1
81122aac:	10000d1e 	bne	r2,zero,81122ae4 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
81122ab0:	e0bffc17 	ldw	r2,-16(fp)
81122ab4:	1080020b 	ldhu	r2,8(r2)
81122ab8:	1007883a 	mov	r3,r2
81122abc:	e0bff30b 	ldhu	r2,-52(fp)
81122ac0:	0084303a 	nor	r2,zero,r2
81122ac4:	1884703a 	and	r2,r3,r2
81122ac8:	1007883a 	mov	r3,r2
81122acc:	e0bffc17 	ldw	r2,-16(fp)
81122ad0:	10c0020d 	sth	r3,8(r2)
81122ad4:	00000306 	br	81122ae4 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81122ad8:	e0bfff17 	ldw	r2,-4(fp)
81122adc:	00c01c04 	movi	r3,112
81122ae0:	10c00005 	stb	r3,0(r2)
81122ae4:	e0bff417 	ldw	r2,-48(fp)
81122ae8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122aec:	e0bff617 	ldw	r2,-40(fp)
81122af0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81122af4:	00005e06 	br	81122c70 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
81122af8:	e0bffc17 	ldw	r2,-16(fp)
81122afc:	10c0020b 	ldhu	r3,8(r2)
81122b00:	e0bffd0b 	ldhu	r2,-12(fp)
81122b04:	1884703a 	and	r2,r3,r2
81122b08:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
81122b0c:	e0bff30b 	ldhu	r2,-52(fp)
81122b10:	10000d26 	beq	r2,zero,81122b48 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81122b14:	e0bff383 	ldbu	r2,-50(fp)
81122b18:	10800058 	cmpnei	r2,r2,1
81122b1c:	10000d1e 	bne	r2,zero,81122b54 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
81122b20:	e0bffc17 	ldw	r2,-16(fp)
81122b24:	1080020b 	ldhu	r2,8(r2)
81122b28:	1007883a 	mov	r3,r2
81122b2c:	e0bff30b 	ldhu	r2,-52(fp)
81122b30:	0084303a 	nor	r2,zero,r2
81122b34:	1884703a 	and	r2,r3,r2
81122b38:	1007883a 	mov	r3,r2
81122b3c:	e0bffc17 	ldw	r2,-16(fp)
81122b40:	10c0020d 	sth	r3,8(r2)
81122b44:	00000306 	br	81122b54 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81122b48:	e0bfff17 	ldw	r2,-4(fp)
81122b4c:	00c01c04 	movi	r3,112
81122b50:	10c00005 	stb	r3,0(r2)
81122b54:	e0bff417 	ldw	r2,-48(fp)
81122b58:	e0bff715 	stw	r2,-36(fp)
81122b5c:	e0bff717 	ldw	r2,-36(fp)
81122b60:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81122b64:	00004206 	br	81122c70 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
81122b68:	e0bffc17 	ldw	r2,-16(fp)
81122b6c:	1080020b 	ldhu	r2,8(r2)
81122b70:	0084303a 	nor	r2,zero,r2
81122b74:	1007883a 	mov	r3,r2
81122b78:	e0bffd0b 	ldhu	r2,-12(fp)
81122b7c:	1884703a 	and	r2,r3,r2
81122b80:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81122b84:	e0fff30b 	ldhu	r3,-52(fp)
81122b88:	e0bffd0b 	ldhu	r2,-12(fp)
81122b8c:	18800b1e 	bne	r3,r2,81122bbc <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81122b90:	e0bff383 	ldbu	r2,-50(fp)
81122b94:	10800058 	cmpnei	r2,r2,1
81122b98:	10000b1e 	bne	r2,zero,81122bc8 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
81122b9c:	e0bffc17 	ldw	r2,-16(fp)
81122ba0:	10c0020b 	ldhu	r3,8(r2)
81122ba4:	e0bff30b 	ldhu	r2,-52(fp)
81122ba8:	1884b03a 	or	r2,r3,r2
81122bac:	1007883a 	mov	r3,r2
81122bb0:	e0bffc17 	ldw	r2,-16(fp)
81122bb4:	10c0020d 	sth	r3,8(r2)
81122bb8:	00000306 	br	81122bc8 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81122bbc:	e0bfff17 	ldw	r2,-4(fp)
81122bc0:	00c01c04 	movi	r3,112
81122bc4:	10c00005 	stb	r3,0(r2)
81122bc8:	e0bff417 	ldw	r2,-48(fp)
81122bcc:	e0bff815 	stw	r2,-32(fp)
81122bd0:	e0bff817 	ldw	r2,-32(fp)
81122bd4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81122bd8:	00002506 	br	81122c70 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
81122bdc:	e0bffc17 	ldw	r2,-16(fp)
81122be0:	1080020b 	ldhu	r2,8(r2)
81122be4:	0084303a 	nor	r2,zero,r2
81122be8:	1007883a 	mov	r3,r2
81122bec:	e0bffd0b 	ldhu	r2,-12(fp)
81122bf0:	1884703a 	and	r2,r3,r2
81122bf4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
81122bf8:	e0bff30b 	ldhu	r2,-52(fp)
81122bfc:	10000b26 	beq	r2,zero,81122c2c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81122c00:	e0bff383 	ldbu	r2,-50(fp)
81122c04:	10800058 	cmpnei	r2,r2,1
81122c08:	10000b1e 	bne	r2,zero,81122c38 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
81122c0c:	e0bffc17 	ldw	r2,-16(fp)
81122c10:	10c0020b 	ldhu	r3,8(r2)
81122c14:	e0bff30b 	ldhu	r2,-52(fp)
81122c18:	1884b03a 	or	r2,r3,r2
81122c1c:	1007883a 	mov	r3,r2
81122c20:	e0bffc17 	ldw	r2,-16(fp)
81122c24:	10c0020d 	sth	r3,8(r2)
81122c28:	00000306 	br	81122c38 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81122c2c:	e0bfff17 	ldw	r2,-4(fp)
81122c30:	00c01c04 	movi	r3,112
81122c34:	10c00005 	stb	r3,0(r2)
81122c38:	e0bff417 	ldw	r2,-48(fp)
81122c3c:	e0bff915 	stw	r2,-28(fp)
81122c40:	e0bff917 	ldw	r2,-28(fp)
81122c44:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81122c48:	00000906 	br	81122c70 <OSFlagAccept+0x2f4>
81122c4c:	e0bff417 	ldw	r2,-48(fp)
81122c50:	e0bffa15 	stw	r2,-24(fp)
81122c54:	e0bffa17 	ldw	r2,-24(fp)
81122c58:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
81122c5c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
81122c60:	e0bfff17 	ldw	r2,-4(fp)
81122c64:	00c01bc4 	movi	r3,111
81122c68:	10c00005 	stb	r3,0(r2)
             break;
81122c6c:	0001883a 	nop
    }
    return (flags_rdy);
81122c70:	e0bff30b 	ldhu	r2,-52(fp)
}
81122c74:	e037883a 	mov	sp,fp
81122c78:	df000017 	ldw	fp,0(sp)
81122c7c:	dec00104 	addi	sp,sp,4
81122c80:	f800283a 	ret

81122c84 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
81122c84:	defff804 	addi	sp,sp,-32
81122c88:	df000715 	stw	fp,28(sp)
81122c8c:	df000704 	addi	fp,sp,28
81122c90:	2005883a 	mov	r2,r4
81122c94:	e17fff15 	stw	r5,-4(fp)
81122c98:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
81122c9c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
81122ca0:	e0bfff17 	ldw	r2,-4(fp)
81122ca4:	1000021e 	bne	r2,zero,81122cb0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
81122ca8:	0005883a 	mov	r2,zero
81122cac:	00003306 	br	81122d7c <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
81122cb0:	d0a07803 	ldbu	r2,-32288(gp)
81122cb4:	10803fcc 	andi	r2,r2,255
81122cb8:	10000526 	beq	r2,zero,81122cd0 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
81122cbc:	e0bfff17 	ldw	r2,-4(fp)
81122cc0:	00c00404 	movi	r3,16
81122cc4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
81122cc8:	0005883a 	mov	r2,zero
81122ccc:	00002b06 	br	81122d7c <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122cd0:	0005303a 	rdctl	r2,status
81122cd4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122cd8:	e0fffd17 	ldw	r3,-12(fp)
81122cdc:	00bfff84 	movi	r2,-2
81122ce0:	1884703a 	and	r2,r3,r2
81122ce4:	1001703a 	wrctl	status,r2
  
  return context;
81122ce8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81122cec:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
81122cf0:	d0a07b17 	ldw	r2,-32276(gp)
81122cf4:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
81122cf8:	e0bffb17 	ldw	r2,-20(fp)
81122cfc:	10001726 	beq	r2,zero,81122d5c <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
81122d00:	d0a07b17 	ldw	r2,-32276(gp)
81122d04:	10800117 	ldw	r2,4(r2)
81122d08:	d0a07b15 	stw	r2,-32276(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
81122d0c:	e0bffb17 	ldw	r2,-20(fp)
81122d10:	00c00144 	movi	r3,5
81122d14:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
81122d18:	e0bffb17 	ldw	r2,-20(fp)
81122d1c:	e0fffe0b 	ldhu	r3,-8(fp)
81122d20:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
81122d24:	e0bffb17 	ldw	r2,-20(fp)
81122d28:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
81122d2c:	e0bffb17 	ldw	r2,-20(fp)
81122d30:	00c00fc4 	movi	r3,63
81122d34:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81122d38:	e0bffb17 	ldw	r2,-20(fp)
81122d3c:	100002c5 	stb	zero,11(r2)
81122d40:	e0bff917 	ldw	r2,-28(fp)
81122d44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122d48:	e0bffa17 	ldw	r2,-24(fp)
81122d4c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
81122d50:	e0bfff17 	ldw	r2,-4(fp)
81122d54:	10000005 	stb	zero,0(r2)
81122d58:	00000706 	br	81122d78 <OSFlagCreate+0xf4>
81122d5c:	e0bff917 	ldw	r2,-28(fp)
81122d60:	e0bffc15 	stw	r2,-16(fp)
81122d64:	e0bffc17 	ldw	r2,-16(fp)
81122d68:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
81122d6c:	e0bfff17 	ldw	r2,-4(fp)
81122d70:	00c01c84 	movi	r3,114
81122d74:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
81122d78:	e0bffb17 	ldw	r2,-20(fp)
}
81122d7c:	e037883a 	mov	sp,fp
81122d80:	df000017 	ldw	fp,0(sp)
81122d84:	dec00104 	addi	sp,sp,4
81122d88:	f800283a 	ret

81122d8c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
81122d8c:	defff204 	addi	sp,sp,-56
81122d90:	dfc00d15 	stw	ra,52(sp)
81122d94:	df000c15 	stw	fp,48(sp)
81122d98:	df000c04 	addi	fp,sp,48
81122d9c:	e13ffd15 	stw	r4,-12(fp)
81122da0:	2805883a 	mov	r2,r5
81122da4:	e1bfff15 	stw	r6,-4(fp)
81122da8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81122dac:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81122db0:	e0bfff17 	ldw	r2,-4(fp)
81122db4:	1000021e 	bne	r2,zero,81122dc0 <OSFlagDel+0x34>
        return (pgrp);
81122db8:	e0bffd17 	ldw	r2,-12(fp)
81122dbc:	00008006 	br	81122fc0 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
81122dc0:	e0bffd17 	ldw	r2,-12(fp)
81122dc4:	1000051e 	bne	r2,zero,81122ddc <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81122dc8:	e0bfff17 	ldw	r2,-4(fp)
81122dcc:	00c01b84 	movi	r3,110
81122dd0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
81122dd4:	e0bffd17 	ldw	r2,-12(fp)
81122dd8:	00007906 	br	81122fc0 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81122ddc:	d0a07803 	ldbu	r2,-32288(gp)
81122de0:	10803fcc 	andi	r2,r2,255
81122de4:	10000526 	beq	r2,zero,81122dfc <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
81122de8:	e0bfff17 	ldw	r2,-4(fp)
81122dec:	00c003c4 	movi	r3,15
81122df0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
81122df4:	e0bffd17 	ldw	r2,-12(fp)
81122df8:	00007106 	br	81122fc0 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
81122dfc:	e0bffd17 	ldw	r2,-12(fp)
81122e00:	10800003 	ldbu	r2,0(r2)
81122e04:	10803fcc 	andi	r2,r2,255
81122e08:	10800160 	cmpeqi	r2,r2,5
81122e0c:	1000051e 	bne	r2,zero,81122e24 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
81122e10:	e0bfff17 	ldw	r2,-4(fp)
81122e14:	00c00044 	movi	r3,1
81122e18:	10c00005 	stb	r3,0(r2)
        return (pgrp);
81122e1c:	e0bffd17 	ldw	r2,-12(fp)
81122e20:	00006706 	br	81122fc0 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122e24:	0005303a 	rdctl	r2,status
81122e28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122e2c:	e0fffc17 	ldw	r3,-16(fp)
81122e30:	00bfff84 	movi	r2,-2
81122e34:	1884703a 	and	r2,r3,r2
81122e38:	1001703a 	wrctl	status,r2
  
  return context;
81122e3c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81122e40:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
81122e44:	e0bffd17 	ldw	r2,-12(fp)
81122e48:	10800117 	ldw	r2,4(r2)
81122e4c:	10000326 	beq	r2,zero,81122e5c <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81122e50:	00800044 	movi	r2,1
81122e54:	e0bff405 	stb	r2,-48(fp)
81122e58:	00000106 	br	81122e60 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81122e5c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
81122e60:	e0bffe03 	ldbu	r2,-8(fp)
81122e64:	10000326 	beq	r2,zero,81122e74 <OSFlagDel+0xe8>
81122e68:	10800060 	cmpeqi	r2,r2,1
81122e6c:	1000231e 	bne	r2,zero,81122efc <OSFlagDel+0x170>
81122e70:	00004806 	br	81122f94 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
81122e74:	e0bff403 	ldbu	r2,-48(fp)
81122e78:	1000161e 	bne	r2,zero,81122ed4 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
81122e7c:	e0bffd17 	ldw	r2,-12(fp)
81122e80:	00c00fc4 	movi	r3,63
81122e84:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81122e88:	e0bffd17 	ldw	r2,-12(fp)
81122e8c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81122e90:	e0bffd17 	ldw	r2,-12(fp)
81122e94:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
81122e98:	d0e07b17 	ldw	r3,-32276(gp)
81122e9c:	e0bffd17 	ldw	r2,-12(fp)
81122ea0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
81122ea4:	e0bffd17 	ldw	r2,-12(fp)
81122ea8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
81122eac:	e0bffd17 	ldw	r2,-12(fp)
81122eb0:	d0a07b15 	stw	r2,-32276(gp)
81122eb4:	e0bff717 	ldw	r2,-36(fp)
81122eb8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122ebc:	e0bff817 	ldw	r2,-32(fp)
81122ec0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
81122ec4:	e0bfff17 	ldw	r2,-4(fp)
81122ec8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
81122ecc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
81122ed0:	00003a06 	br	81122fbc <OSFlagDel+0x230>
81122ed4:	e0bff717 	ldw	r2,-36(fp)
81122ed8:	e0bff915 	stw	r2,-28(fp)
81122edc:	e0bff917 	ldw	r2,-28(fp)
81122ee0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
81122ee4:	e0bfff17 	ldw	r2,-4(fp)
81122ee8:	00c01244 	movi	r3,73
81122eec:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
81122ef0:	e0bffd17 	ldw	r2,-12(fp)
81122ef4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
81122ef8:	00003006 	br	81122fbc <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
81122efc:	e0bffd17 	ldw	r2,-12(fp)
81122f00:	10800117 	ldw	r2,4(r2)
81122f04:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
81122f08:	00000606 	br	81122f24 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
81122f0c:	000b883a 	mov	r5,zero
81122f10:	e13ff517 	ldw	r4,-44(fp)
81122f14:	1123ef80 	call	81123ef8 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
81122f18:	e0bff517 	ldw	r2,-44(fp)
81122f1c:	10800017 	ldw	r2,0(r2)
81122f20:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
81122f24:	e0bff517 	ldw	r2,-44(fp)
81122f28:	103ff81e 	bne	r2,zero,81122f0c <__reset+0xfb102f0c>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
81122f2c:	e0bffd17 	ldw	r2,-12(fp)
81122f30:	00c00fc4 	movi	r3,63
81122f34:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81122f38:	e0bffd17 	ldw	r2,-12(fp)
81122f3c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81122f40:	e0bffd17 	ldw	r2,-12(fp)
81122f44:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
81122f48:	d0e07b17 	ldw	r3,-32276(gp)
81122f4c:	e0bffd17 	ldw	r2,-12(fp)
81122f50:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
81122f54:	e0bffd17 	ldw	r2,-12(fp)
81122f58:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
81122f5c:	e0bffd17 	ldw	r2,-12(fp)
81122f60:	d0a07b15 	stw	r2,-32276(gp)
81122f64:	e0bff717 	ldw	r2,-36(fp)
81122f68:	e0bffa15 	stw	r2,-24(fp)
81122f6c:	e0bffa17 	ldw	r2,-24(fp)
81122f70:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81122f74:	e0bff403 	ldbu	r2,-48(fp)
81122f78:	10800058 	cmpnei	r2,r2,1
81122f7c:	1000011e 	bne	r2,zero,81122f84 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81122f80:	11221080 	call	81122108 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
81122f84:	e0bfff17 	ldw	r2,-4(fp)
81122f88:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
81122f8c:	e03ff615 	stw	zero,-40(fp)
             break;
81122f90:	00000a06 	br	81122fbc <OSFlagDel+0x230>
81122f94:	e0bff717 	ldw	r2,-36(fp)
81122f98:	e0bffb15 	stw	r2,-20(fp)
81122f9c:	e0bffb17 	ldw	r2,-20(fp)
81122fa0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
81122fa4:	e0bfff17 	ldw	r2,-4(fp)
81122fa8:	00c001c4 	movi	r3,7
81122fac:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
81122fb0:	e0bffd17 	ldw	r2,-12(fp)
81122fb4:	e0bff615 	stw	r2,-40(fp)
             break;
81122fb8:	0001883a 	nop
    }
    return (pgrp_return);
81122fbc:	e0bff617 	ldw	r2,-40(fp)
}
81122fc0:	e037883a 	mov	sp,fp
81122fc4:	dfc00117 	ldw	ra,4(sp)
81122fc8:	df000017 	ldw	fp,0(sp)
81122fcc:	dec00204 	addi	sp,sp,8
81122fd0:	f800283a 	ret

81122fd4 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
81122fd4:	defff604 	addi	sp,sp,-40
81122fd8:	dfc00915 	stw	ra,36(sp)
81122fdc:	df000815 	stw	fp,32(sp)
81122fe0:	df000804 	addi	fp,sp,32
81122fe4:	e13ffd15 	stw	r4,-12(fp)
81122fe8:	e17ffe15 	stw	r5,-8(fp)
81122fec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81122ff0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81122ff4:	e0bfff17 	ldw	r2,-4(fp)
81122ff8:	1000021e 	bne	r2,zero,81123004 <OSFlagNameGet+0x30>
        return (0);
81122ffc:	0005883a 	mov	r2,zero
81123000:	00003906 	br	811230e8 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
81123004:	e0bffd17 	ldw	r2,-12(fp)
81123008:	1000051e 	bne	r2,zero,81123020 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112300c:	e0bfff17 	ldw	r2,-4(fp)
81123010:	00c01b84 	movi	r3,110
81123014:	10c00005 	stb	r3,0(r2)
        return (0);
81123018:	0005883a 	mov	r2,zero
8112301c:	00003206 	br	811230e8 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81123020:	e0bffe17 	ldw	r2,-8(fp)
81123024:	1000051e 	bne	r2,zero,8112303c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
81123028:	e0bfff17 	ldw	r2,-4(fp)
8112302c:	00c00304 	movi	r3,12
81123030:	10c00005 	stb	r3,0(r2)
        return (0);
81123034:	0005883a 	mov	r2,zero
81123038:	00002b06 	br	811230e8 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112303c:	d0a07803 	ldbu	r2,-32288(gp)
81123040:	10803fcc 	andi	r2,r2,255
81123044:	10000526 	beq	r2,zero,8112305c <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
81123048:	e0bfff17 	ldw	r2,-4(fp)
8112304c:	00c00444 	movi	r3,17
81123050:	10c00005 	stb	r3,0(r2)
        return (0);
81123054:	0005883a 	mov	r2,zero
81123058:	00002306 	br	811230e8 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112305c:	0005303a 	rdctl	r2,status
81123060:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123064:	e0fffc17 	ldw	r3,-16(fp)
81123068:	00bfff84 	movi	r2,-2
8112306c:	1884703a 	and	r2,r3,r2
81123070:	1001703a 	wrctl	status,r2
  
  return context;
81123074:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81123078:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112307c:	e0bffd17 	ldw	r2,-12(fp)
81123080:	10800003 	ldbu	r2,0(r2)
81123084:	10803fcc 	andi	r2,r2,255
81123088:	10800160 	cmpeqi	r2,r2,5
8112308c:	1000091e 	bne	r2,zero,811230b4 <OSFlagNameGet+0xe0>
81123090:	e0bff817 	ldw	r2,-32(fp)
81123094:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123098:	e0bff917 	ldw	r2,-28(fp)
8112309c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
811230a0:	e0bfff17 	ldw	r2,-4(fp)
811230a4:	00c00044 	movi	r3,1
811230a8:	10c00005 	stb	r3,0(r2)
        return (0);
811230ac:	0005883a 	mov	r2,zero
811230b0:	00000d06 	br	811230e8 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
811230b4:	e0bffd17 	ldw	r2,-12(fp)
811230b8:	10800284 	addi	r2,r2,10
811230bc:	100b883a 	mov	r5,r2
811230c0:	e13ffe17 	ldw	r4,-8(fp)
811230c4:	112224c0 	call	8112224c <OS_StrCopy>
811230c8:	e0bffb05 	stb	r2,-20(fp)
811230cc:	e0bff817 	ldw	r2,-32(fp)
811230d0:	e0bffa15 	stw	r2,-24(fp)
811230d4:	e0bffa17 	ldw	r2,-24(fp)
811230d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811230dc:	e0bfff17 	ldw	r2,-4(fp)
811230e0:	10000005 	stb	zero,0(r2)
    return (len);
811230e4:	e0bffb03 	ldbu	r2,-20(fp)
}
811230e8:	e037883a 	mov	sp,fp
811230ec:	dfc00117 	ldw	ra,4(sp)
811230f0:	df000017 	ldw	fp,0(sp)
811230f4:	dec00204 	addi	sp,sp,8
811230f8:	f800283a 	ret

811230fc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
811230fc:	defff504 	addi	sp,sp,-44
81123100:	dfc00a15 	stw	ra,40(sp)
81123104:	df000915 	stw	fp,36(sp)
81123108:	df000904 	addi	fp,sp,36
8112310c:	e13ffd15 	stw	r4,-12(fp)
81123110:	e17ffe15 	stw	r5,-8(fp)
81123114:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81123118:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112311c:	e0bfff17 	ldw	r2,-4(fp)
81123120:	10004326 	beq	r2,zero,81123230 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
81123124:	e0bffd17 	ldw	r2,-12(fp)
81123128:	1000041e 	bne	r2,zero,8112313c <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112312c:	e0bfff17 	ldw	r2,-4(fp)
81123130:	00c01b84 	movi	r3,110
81123134:	10c00005 	stb	r3,0(r2)
        return;
81123138:	00003e06 	br	81123234 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112313c:	e0bffe17 	ldw	r2,-8(fp)
81123140:	1000041e 	bne	r2,zero,81123154 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
81123144:	e0bfff17 	ldw	r2,-4(fp)
81123148:	00c00304 	movi	r3,12
8112314c:	10c00005 	stb	r3,0(r2)
        return;
81123150:	00003806 	br	81123234 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81123154:	d0a07803 	ldbu	r2,-32288(gp)
81123158:	10803fcc 	andi	r2,r2,255
8112315c:	10000426 	beq	r2,zero,81123170 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
81123160:	e0bfff17 	ldw	r2,-4(fp)
81123164:	00c00484 	movi	r3,18
81123168:	10c00005 	stb	r3,0(r2)
        return;
8112316c:	00003106 	br	81123234 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123170:	0005303a 	rdctl	r2,status
81123174:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123178:	e0fffc17 	ldw	r3,-16(fp)
8112317c:	00bfff84 	movi	r2,-2
81123180:	1884703a 	and	r2,r3,r2
81123184:	1001703a 	wrctl	status,r2
  
  return context;
81123188:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112318c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
81123190:	e0bffd17 	ldw	r2,-12(fp)
81123194:	10800003 	ldbu	r2,0(r2)
81123198:	10803fcc 	andi	r2,r2,255
8112319c:	10800160 	cmpeqi	r2,r2,5
811231a0:	1000081e 	bne	r2,zero,811231c4 <OSFlagNameSet+0xc8>
811231a4:	e0bff717 	ldw	r2,-36(fp)
811231a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811231ac:	e0bff817 	ldw	r2,-32(fp)
811231b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
811231b4:	e0bfff17 	ldw	r2,-4(fp)
811231b8:	00c00044 	movi	r3,1
811231bc:	10c00005 	stb	r3,0(r2)
        return;
811231c0:	00001c06 	br	81123234 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
811231c4:	e13ffe17 	ldw	r4,-8(fp)
811231c8:	11222c00 	call	811222c0 <OS_StrLen>
811231cc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
811231d0:	e0bffa03 	ldbu	r2,-24(fp)
811231d4:	10800830 	cmpltui	r2,r2,32
811231d8:	1000081e 	bne	r2,zero,811231fc <OSFlagNameSet+0x100>
811231dc:	e0bff717 	ldw	r2,-36(fp)
811231e0:	e0bff915 	stw	r2,-28(fp)
811231e4:	e0bff917 	ldw	r2,-28(fp)
811231e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
811231ec:	e0bfff17 	ldw	r2,-4(fp)
811231f0:	00c01cc4 	movi	r3,115
811231f4:	10c00005 	stb	r3,0(r2)
        return;
811231f8:	00000e06 	br	81123234 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
811231fc:	e0bffd17 	ldw	r2,-12(fp)
81123200:	10800284 	addi	r2,r2,10
81123204:	e17ffe17 	ldw	r5,-8(fp)
81123208:	1009883a 	mov	r4,r2
8112320c:	112224c0 	call	8112224c <OS_StrCopy>
81123210:	e0bff717 	ldw	r2,-36(fp)
81123214:	e0bffb15 	stw	r2,-20(fp)
81123218:	e0bffb17 	ldw	r2,-20(fp)
8112321c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81123220:	e0bfff17 	ldw	r2,-4(fp)
81123224:	10000005 	stb	zero,0(r2)
    return;
81123228:	0001883a 	nop
8112322c:	00000106 	br	81123234 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81123230:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
81123234:	e037883a 	mov	sp,fp
81123238:	dfc00117 	ldw	ra,4(sp)
8112323c:	df000017 	ldw	fp,0(sp)
81123240:	dec00204 	addi	sp,sp,8
81123244:	f800283a 	ret

81123248 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
81123248:	deffe104 	addi	sp,sp,-124
8112324c:	dfc01e15 	stw	ra,120(sp)
81123250:	df001d15 	stw	fp,116(sp)
81123254:	df001d04 	addi	fp,sp,116
81123258:	e13ffc15 	stw	r4,-16(fp)
8112325c:	2809883a 	mov	r4,r5
81123260:	3007883a 	mov	r3,r6
81123264:	3805883a 	mov	r2,r7
81123268:	e13ffd0d 	sth	r4,-12(fp)
8112326c:	e0fffe05 	stb	r3,-8(fp)
81123270:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81123274:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81123278:	e0800217 	ldw	r2,8(fp)
8112327c:	1000021e 	bne	r2,zero,81123288 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
81123280:	0005883a 	mov	r2,zero
81123284:	00015906 	br	811237ec <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
81123288:	e0bffc17 	ldw	r2,-16(fp)
8112328c:	1000051e 	bne	r2,zero,811232a4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81123290:	e0800217 	ldw	r2,8(fp)
81123294:	00c01b84 	movi	r3,110
81123298:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112329c:	0005883a 	mov	r2,zero
811232a0:	00015206 	br	811237ec <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811232a4:	d0a07803 	ldbu	r2,-32288(gp)
811232a8:	10803fcc 	andi	r2,r2,255
811232ac:	10000526 	beq	r2,zero,811232c4 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
811232b0:	e0800217 	ldw	r2,8(fp)
811232b4:	00c00084 	movi	r3,2
811232b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811232bc:	0005883a 	mov	r2,zero
811232c0:	00014a06 	br	811237ec <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
811232c4:	d0a06903 	ldbu	r2,-32348(gp)
811232c8:	10803fcc 	andi	r2,r2,255
811232cc:	10000526 	beq	r2,zero,811232e4 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
811232d0:	e0800217 	ldw	r2,8(fp)
811232d4:	00c00344 	movi	r3,13
811232d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811232dc:	0005883a 	mov	r2,zero
811232e0:	00014206 	br	811237ec <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
811232e4:	e0bffc17 	ldw	r2,-16(fp)
811232e8:	10800003 	ldbu	r2,0(r2)
811232ec:	10803fcc 	andi	r2,r2,255
811232f0:	10800160 	cmpeqi	r2,r2,5
811232f4:	1000051e 	bne	r2,zero,8112330c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
811232f8:	e0800217 	ldw	r2,8(fp)
811232fc:	00c00044 	movi	r3,1
81123300:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81123304:	0005883a 	mov	r2,zero
81123308:	00013806 	br	811237ec <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112330c:	e0fffe03 	ldbu	r3,-8(fp)
81123310:	00bfe004 	movi	r2,-128
81123314:	1884703a 	and	r2,r3,r2
81123318:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
8112331c:	e0bfe603 	ldbu	r2,-104(fp)
81123320:	10000626 	beq	r2,zero,8112333c <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
81123324:	e0bffe03 	ldbu	r2,-8(fp)
81123328:	10801fcc 	andi	r2,r2,127
8112332c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
81123330:	00800044 	movi	r2,1
81123334:	e0bfe405 	stb	r2,-112(fp)
81123338:	00000106 	br	81123340 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
8112333c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123340:	0005303a 	rdctl	r2,status
81123344:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123348:	e0fff617 	ldw	r3,-40(fp)
8112334c:	00bfff84 	movi	r2,-2
81123350:	1884703a 	and	r2,r3,r2
81123354:	1001703a 	wrctl	status,r2
  
  return context;
81123358:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112335c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
81123360:	e0bffe03 	ldbu	r2,-8(fp)
81123364:	10c00060 	cmpeqi	r3,r2,1
81123368:	1800921e 	bne	r3,zero,811235b4 <OSFlagPend+0x36c>
8112336c:	10c00088 	cmpgei	r3,r2,2
81123370:	1800021e 	bne	r3,zero,8112337c <OSFlagPend+0x134>
81123374:	10006126 	beq	r2,zero,811234fc <OSFlagPend+0x2b4>
81123378:	0000bb06 	br	81123668 <OSFlagPend+0x420>
8112337c:	10c000a0 	cmpeqi	r3,r2,2
81123380:	1800031e 	bne	r3,zero,81123390 <OSFlagPend+0x148>
81123384:	108000e0 	cmpeqi	r2,r2,3
81123388:	10002f1e 	bne	r2,zero,81123448 <OSFlagPend+0x200>
8112338c:	0000b606 	br	81123668 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
81123390:	e0bffc17 	ldw	r2,-16(fp)
81123394:	10c0020b 	ldhu	r3,8(r2)
81123398:	e0bffd0b 	ldhu	r2,-12(fp)
8112339c:	1884703a 	and	r2,r3,r2
811233a0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
811233a4:	e0ffe80b 	ldhu	r3,-96(fp)
811233a8:	e0bffd0b 	ldhu	r2,-12(fp)
811233ac:	1880171e 	bne	r3,r2,8112340c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811233b0:	e0bfe403 	ldbu	r2,-112(fp)
811233b4:	10800058 	cmpnei	r2,r2,1
811233b8:	1000091e 	bne	r2,zero,811233e0 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
811233bc:	e0bffc17 	ldw	r2,-16(fp)
811233c0:	1080020b 	ldhu	r2,8(r2)
811233c4:	1007883a 	mov	r3,r2
811233c8:	e0bfe80b 	ldhu	r2,-96(fp)
811233cc:	0084303a 	nor	r2,zero,r2
811233d0:	1884703a 	and	r2,r3,r2
811233d4:	1007883a 	mov	r3,r2
811233d8:	e0bffc17 	ldw	r2,-16(fp)
811233dc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
811233e0:	d0a07917 	ldw	r2,-32284(gp)
811233e4:	e0ffe80b 	ldhu	r3,-96(fp)
811233e8:	10c00b0d 	sth	r3,44(r2)
811233ec:	e0bfe517 	ldw	r2,-108(fp)
811233f0:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811233f4:	e0bfe717 	ldw	r2,-100(fp)
811233f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
811233fc:	e0800217 	ldw	r2,8(fp)
81123400:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81123404:	e0bfe80b 	ldhu	r2,-96(fp)
81123408:	0000f806 	br	811237ec <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112340c:	e13ffd0b 	ldhu	r4,-12(fp)
81123410:	e17ffe03 	ldbu	r5,-8(fp)
81123414:	e0bfff0b 	ldhu	r2,-4(fp)
81123418:	e0fff704 	addi	r3,fp,-36
8112341c:	d8800015 	stw	r2,0(sp)
81123420:	280f883a 	mov	r7,r5
81123424:	200d883a 	mov	r6,r4
81123428:	180b883a 	mov	r5,r3
8112342c:	e13ffc17 	ldw	r4,-16(fp)
81123430:	1123cb80 	call	81123cb8 <OS_FlagBlock>
81123434:	e0bfe517 	ldw	r2,-108(fp)
81123438:	e0bfe915 	stw	r2,-92(fp)
8112343c:	e0bfe917 	ldw	r2,-92(fp)
81123440:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81123444:	00009206 	br	81123690 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
81123448:	e0bffc17 	ldw	r2,-16(fp)
8112344c:	10c0020b 	ldhu	r3,8(r2)
81123450:	e0bffd0b 	ldhu	r2,-12(fp)
81123454:	1884703a 	and	r2,r3,r2
81123458:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112345c:	e0bfe80b 	ldhu	r2,-96(fp)
81123460:	10001726 	beq	r2,zero,811234c0 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81123464:	e0bfe403 	ldbu	r2,-112(fp)
81123468:	10800058 	cmpnei	r2,r2,1
8112346c:	1000091e 	bne	r2,zero,81123494 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
81123470:	e0bffc17 	ldw	r2,-16(fp)
81123474:	1080020b 	ldhu	r2,8(r2)
81123478:	1007883a 	mov	r3,r2
8112347c:	e0bfe80b 	ldhu	r2,-96(fp)
81123480:	0084303a 	nor	r2,zero,r2
81123484:	1884703a 	and	r2,r3,r2
81123488:	1007883a 	mov	r3,r2
8112348c:	e0bffc17 	ldw	r2,-16(fp)
81123490:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81123494:	d0a07917 	ldw	r2,-32284(gp)
81123498:	e0ffe80b 	ldhu	r3,-96(fp)
8112349c:	10c00b0d 	sth	r3,44(r2)
811234a0:	e0bfe517 	ldw	r2,-108(fp)
811234a4:	e0bfea15 	stw	r2,-88(fp)
811234a8:	e0bfea17 	ldw	r2,-88(fp)
811234ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
811234b0:	e0800217 	ldw	r2,8(fp)
811234b4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
811234b8:	e0bfe80b 	ldhu	r2,-96(fp)
811234bc:	0000cb06 	br	811237ec <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
811234c0:	e13ffd0b 	ldhu	r4,-12(fp)
811234c4:	e17ffe03 	ldbu	r5,-8(fp)
811234c8:	e0bfff0b 	ldhu	r2,-4(fp)
811234cc:	e0fff704 	addi	r3,fp,-36
811234d0:	d8800015 	stw	r2,0(sp)
811234d4:	280f883a 	mov	r7,r5
811234d8:	200d883a 	mov	r6,r4
811234dc:	180b883a 	mov	r5,r3
811234e0:	e13ffc17 	ldw	r4,-16(fp)
811234e4:	1123cb80 	call	81123cb8 <OS_FlagBlock>
811234e8:	e0bfe517 	ldw	r2,-108(fp)
811234ec:	e0bfeb15 	stw	r2,-84(fp)
811234f0:	e0bfeb17 	ldw	r2,-84(fp)
811234f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
811234f8:	00006506 	br	81123690 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
811234fc:	e0bffc17 	ldw	r2,-16(fp)
81123500:	1080020b 	ldhu	r2,8(r2)
81123504:	0084303a 	nor	r2,zero,r2
81123508:	1007883a 	mov	r3,r2
8112350c:	e0bffd0b 	ldhu	r2,-12(fp)
81123510:	1884703a 	and	r2,r3,r2
81123514:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81123518:	e0ffe80b 	ldhu	r3,-96(fp)
8112351c:	e0bffd0b 	ldhu	r2,-12(fp)
81123520:	1880151e 	bne	r3,r2,81123578 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81123524:	e0bfe403 	ldbu	r2,-112(fp)
81123528:	10800058 	cmpnei	r2,r2,1
8112352c:	1000071e 	bne	r2,zero,8112354c <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
81123530:	e0bffc17 	ldw	r2,-16(fp)
81123534:	10c0020b 	ldhu	r3,8(r2)
81123538:	e0bfe80b 	ldhu	r2,-96(fp)
8112353c:	1884b03a 	or	r2,r3,r2
81123540:	1007883a 	mov	r3,r2
81123544:	e0bffc17 	ldw	r2,-16(fp)
81123548:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112354c:	d0a07917 	ldw	r2,-32284(gp)
81123550:	e0ffe80b 	ldhu	r3,-96(fp)
81123554:	10c00b0d 	sth	r3,44(r2)
81123558:	e0bfe517 	ldw	r2,-108(fp)
8112355c:	e0bfec15 	stw	r2,-80(fp)
81123560:	e0bfec17 	ldw	r2,-80(fp)
81123564:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81123568:	e0800217 	ldw	r2,8(fp)
8112356c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81123570:	e0bfe80b 	ldhu	r2,-96(fp)
81123574:	00009d06 	br	811237ec <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81123578:	e13ffd0b 	ldhu	r4,-12(fp)
8112357c:	e17ffe03 	ldbu	r5,-8(fp)
81123580:	e0bfff0b 	ldhu	r2,-4(fp)
81123584:	e0fff704 	addi	r3,fp,-36
81123588:	d8800015 	stw	r2,0(sp)
8112358c:	280f883a 	mov	r7,r5
81123590:	200d883a 	mov	r6,r4
81123594:	180b883a 	mov	r5,r3
81123598:	e13ffc17 	ldw	r4,-16(fp)
8112359c:	1123cb80 	call	81123cb8 <OS_FlagBlock>
811235a0:	e0bfe517 	ldw	r2,-108(fp)
811235a4:	e0bfed15 	stw	r2,-76(fp)
811235a8:	e0bfed17 	ldw	r2,-76(fp)
811235ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
811235b0:	00003706 	br	81123690 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
811235b4:	e0bffc17 	ldw	r2,-16(fp)
811235b8:	1080020b 	ldhu	r2,8(r2)
811235bc:	0084303a 	nor	r2,zero,r2
811235c0:	1007883a 	mov	r3,r2
811235c4:	e0bffd0b 	ldhu	r2,-12(fp)
811235c8:	1884703a 	and	r2,r3,r2
811235cc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
811235d0:	e0bfe80b 	ldhu	r2,-96(fp)
811235d4:	10001526 	beq	r2,zero,8112362c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811235d8:	e0bfe403 	ldbu	r2,-112(fp)
811235dc:	10800058 	cmpnei	r2,r2,1
811235e0:	1000071e 	bne	r2,zero,81123600 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
811235e4:	e0bffc17 	ldw	r2,-16(fp)
811235e8:	10c0020b 	ldhu	r3,8(r2)
811235ec:	e0bfe80b 	ldhu	r2,-96(fp)
811235f0:	1884b03a 	or	r2,r3,r2
811235f4:	1007883a 	mov	r3,r2
811235f8:	e0bffc17 	ldw	r2,-16(fp)
811235fc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81123600:	d0a07917 	ldw	r2,-32284(gp)
81123604:	e0ffe80b 	ldhu	r3,-96(fp)
81123608:	10c00b0d 	sth	r3,44(r2)
8112360c:	e0bfe517 	ldw	r2,-108(fp)
81123610:	e0bfee15 	stw	r2,-72(fp)
81123614:	e0bfee17 	ldw	r2,-72(fp)
81123618:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112361c:	e0800217 	ldw	r2,8(fp)
81123620:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81123624:	e0bfe80b 	ldhu	r2,-96(fp)
81123628:	00007006 	br	811237ec <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112362c:	e13ffd0b 	ldhu	r4,-12(fp)
81123630:	e17ffe03 	ldbu	r5,-8(fp)
81123634:	e0bfff0b 	ldhu	r2,-4(fp)
81123638:	e0fff704 	addi	r3,fp,-36
8112363c:	d8800015 	stw	r2,0(sp)
81123640:	280f883a 	mov	r7,r5
81123644:	200d883a 	mov	r6,r4
81123648:	180b883a 	mov	r5,r3
8112364c:	e13ffc17 	ldw	r4,-16(fp)
81123650:	1123cb80 	call	81123cb8 <OS_FlagBlock>
81123654:	e0bfe517 	ldw	r2,-108(fp)
81123658:	e0bfef15 	stw	r2,-68(fp)
8112365c:	e0bfef17 	ldw	r2,-68(fp)
81123660:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81123664:	00000a06 	br	81123690 <OSFlagPend+0x448>
81123668:	e0bfe517 	ldw	r2,-108(fp)
8112366c:	e0bff015 	stw	r2,-64(fp)
81123670:	e0bff017 	ldw	r2,-64(fp)
81123674:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
81123678:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
8112367c:	e0800217 	ldw	r2,8(fp)
81123680:	00c01bc4 	movi	r3,111
81123684:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
81123688:	e0bfe80b 	ldhu	r2,-96(fp)
8112368c:	00005706 	br	811237ec <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
81123690:	11221080 	call	81122108 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123694:	0005303a 	rdctl	r2,status
81123698:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112369c:	e0fff117 	ldw	r3,-60(fp)
811236a0:	00bfff84 	movi	r2,-2
811236a4:	1884703a 	and	r2,r3,r2
811236a8:	1001703a 	wrctl	status,r2
  
  return context;
811236ac:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
811236b0:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
811236b4:	d0a07917 	ldw	r2,-32284(gp)
811236b8:	10800c43 	ldbu	r2,49(r2)
811236bc:	10803fcc 	andi	r2,r2,255
811236c0:	10001c26 	beq	r2,zero,81123734 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
811236c4:	d0a07917 	ldw	r2,-32284(gp)
811236c8:	10800c43 	ldbu	r2,49(r2)
811236cc:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
811236d0:	d0a07917 	ldw	r2,-32284(gp)
811236d4:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
811236d8:	e0bff704 	addi	r2,fp,-36
811236dc:	1009883a 	mov	r4,r2
811236e0:	1123fec0 	call	81123fec <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
811236e4:	d0a07917 	ldw	r2,-32284(gp)
811236e8:	10000c05 	stb	zero,48(r2)
811236ec:	e0bfe517 	ldw	r2,-108(fp)
811236f0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811236f4:	e0bff217 	ldw	r2,-56(fp)
811236f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
811236fc:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
81123700:	e0bff303 	ldbu	r2,-52(fp)
81123704:	108000a0 	cmpeqi	r2,r2,2
81123708:	10000426 	beq	r2,zero,8112371c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
8112370c:	e0800217 	ldw	r2,8(fp)
81123710:	00c00384 	movi	r3,14
81123714:	10c00005 	stb	r3,0(r2)
                 break;
81123718:	00000406 	br	8112372c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
8112371c:	e0800217 	ldw	r2,8(fp)
81123720:	00c00284 	movi	r3,10
81123724:	10c00005 	stb	r3,0(r2)
                 break;
81123728:	0001883a 	nop
        }
        return (flags_rdy);
8112372c:	e0bfe80b 	ldhu	r2,-96(fp)
81123730:	00002e06 	br	811237ec <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
81123734:	d0a07917 	ldw	r2,-32284(gp)
81123738:	10800b0b 	ldhu	r2,44(r2)
8112373c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
81123740:	e0bfe403 	ldbu	r2,-112(fp)
81123744:	10800058 	cmpnei	r2,r2,1
81123748:	1000211e 	bne	r2,zero,811237d0 <OSFlagPend+0x588>
        switch (wait_type) {
8112374c:	e0bffe03 	ldbu	r2,-8(fp)
81123750:	10001616 	blt	r2,zero,811237ac <OSFlagPend+0x564>
81123754:	10c00090 	cmplti	r3,r2,2
81123758:	18000c1e 	bne	r3,zero,8112378c <OSFlagPend+0x544>
8112375c:	10800108 	cmpgei	r2,r2,4
81123760:	1000121e 	bne	r2,zero,811237ac <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
81123764:	e0bffc17 	ldw	r2,-16(fp)
81123768:	1080020b 	ldhu	r2,8(r2)
8112376c:	1007883a 	mov	r3,r2
81123770:	e0bfe80b 	ldhu	r2,-96(fp)
81123774:	0084303a 	nor	r2,zero,r2
81123778:	1884703a 	and	r2,r3,r2
8112377c:	1007883a 	mov	r3,r2
81123780:	e0bffc17 	ldw	r2,-16(fp)
81123784:	10c0020d 	sth	r3,8(r2)
                 break;
81123788:	00001106 	br	811237d0 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
8112378c:	e0bffc17 	ldw	r2,-16(fp)
81123790:	10c0020b 	ldhu	r3,8(r2)
81123794:	e0bfe80b 	ldhu	r2,-96(fp)
81123798:	1884b03a 	or	r2,r3,r2
8112379c:	1007883a 	mov	r3,r2
811237a0:	e0bffc17 	ldw	r2,-16(fp)
811237a4:	10c0020d 	sth	r3,8(r2)
                 break;
811237a8:	00000906 	br	811237d0 <OSFlagPend+0x588>
811237ac:	e0bfe517 	ldw	r2,-108(fp)
811237b0:	e0bff415 	stw	r2,-48(fp)
811237b4:	e0bff417 	ldw	r2,-48(fp)
811237b8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
811237bc:	e0800217 	ldw	r2,8(fp)
811237c0:	00c01bc4 	movi	r3,111
811237c4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
811237c8:	0005883a 	mov	r2,zero
811237cc:	00000706 	br	811237ec <OSFlagPend+0x5a4>
811237d0:	e0bfe517 	ldw	r2,-108(fp)
811237d4:	e0bff515 	stw	r2,-44(fp)
811237d8:	e0bff517 	ldw	r2,-44(fp)
811237dc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
811237e0:	e0800217 	ldw	r2,8(fp)
811237e4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
811237e8:	e0bfe80b 	ldhu	r2,-96(fp)
}
811237ec:	e037883a 	mov	sp,fp
811237f0:	dfc00117 	ldw	ra,4(sp)
811237f4:	df000017 	ldw	fp,0(sp)
811237f8:	dec00204 	addi	sp,sp,8
811237fc:	f800283a 	ret

81123800 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
81123800:	defffb04 	addi	sp,sp,-20
81123804:	df000415 	stw	fp,16(sp)
81123808:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112380c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123810:	0005303a 	rdctl	r2,status
81123814:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123818:	e0fffe17 	ldw	r3,-8(fp)
8112381c:	00bfff84 	movi	r2,-2
81123820:	1884703a 	and	r2,r3,r2
81123824:	1001703a 	wrctl	status,r2
  
  return context;
81123828:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8112382c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
81123830:	d0a07917 	ldw	r2,-32284(gp)
81123834:	10800b0b 	ldhu	r2,44(r2)
81123838:	e0bffd0d 	sth	r2,-12(fp)
8112383c:	e0bffc17 	ldw	r2,-16(fp)
81123840:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123844:	e0bfff17 	ldw	r2,-4(fp)
81123848:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
8112384c:	e0bffd0b 	ldhu	r2,-12(fp)
}
81123850:	e037883a 	mov	sp,fp
81123854:	df000017 	ldw	fp,0(sp)
81123858:	dec00104 	addi	sp,sp,4
8112385c:	f800283a 	ret

81123860 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
81123860:	deffef04 	addi	sp,sp,-68
81123864:	dfc01015 	stw	ra,64(sp)
81123868:	df000f15 	stw	fp,60(sp)
8112386c:	df000f04 	addi	fp,sp,60
81123870:	e13ffc15 	stw	r4,-16(fp)
81123874:	2807883a 	mov	r3,r5
81123878:	3005883a 	mov	r2,r6
8112387c:	e1ffff15 	stw	r7,-4(fp)
81123880:	e0fffd0d 	sth	r3,-12(fp)
81123884:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
81123888:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8112388c:	e0bfff17 	ldw	r2,-4(fp)
81123890:	1000021e 	bne	r2,zero,8112389c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
81123894:	0005883a 	mov	r2,zero
81123898:	0000d106 	br	81123be0 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
8112389c:	e0bffc17 	ldw	r2,-16(fp)
811238a0:	1000051e 	bne	r2,zero,811238b8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811238a4:	e0bfff17 	ldw	r2,-4(fp)
811238a8:	00c01b84 	movi	r3,110
811238ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811238b0:	0005883a 	mov	r2,zero
811238b4:	0000ca06 	br	81123be0 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
811238b8:	e0bffc17 	ldw	r2,-16(fp)
811238bc:	10800003 	ldbu	r2,0(r2)
811238c0:	10803fcc 	andi	r2,r2,255
811238c4:	10800160 	cmpeqi	r2,r2,5
811238c8:	1000051e 	bne	r2,zero,811238e0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
811238cc:	e0bfff17 	ldw	r2,-4(fp)
811238d0:	00c00044 	movi	r3,1
811238d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811238d8:	0005883a 	mov	r2,zero
811238dc:	0000c006 	br	81123be0 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811238e0:	0005303a 	rdctl	r2,status
811238e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811238e8:	e0fffb17 	ldw	r3,-20(fp)
811238ec:	00bfff84 	movi	r2,-2
811238f0:	1884703a 	and	r2,r3,r2
811238f4:	1001703a 	wrctl	status,r2
  
  return context;
811238f8:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
811238fc:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
81123900:	e0bffe03 	ldbu	r2,-8(fp)
81123904:	10000326 	beq	r2,zero,81123914 <OSFlagPost+0xb4>
81123908:	10800060 	cmpeqi	r2,r2,1
8112390c:	10000b1e 	bne	r2,zero,8112393c <OSFlagPost+0xdc>
81123910:	00001206 	br	8112395c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
81123914:	e0bffc17 	ldw	r2,-16(fp)
81123918:	1080020b 	ldhu	r2,8(r2)
8112391c:	1007883a 	mov	r3,r2
81123920:	e0bffd0b 	ldhu	r2,-12(fp)
81123924:	0084303a 	nor	r2,zero,r2
81123928:	1884703a 	and	r2,r3,r2
8112392c:	1007883a 	mov	r3,r2
81123930:	e0bffc17 	ldw	r2,-16(fp)
81123934:	10c0020d 	sth	r3,8(r2)
             break;
81123938:	00001106 	br	81123980 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
8112393c:	e0bffc17 	ldw	r2,-16(fp)
81123940:	10c0020b 	ldhu	r3,8(r2)
81123944:	e0bffd0b 	ldhu	r2,-12(fp)
81123948:	1884b03a 	or	r2,r3,r2
8112394c:	1007883a 	mov	r3,r2
81123950:	e0bffc17 	ldw	r2,-16(fp)
81123954:	10c0020d 	sth	r3,8(r2)
             break;
81123958:	00000906 	br	81123980 <OSFlagPost+0x120>
8112395c:	e0bff317 	ldw	r2,-52(fp)
81123960:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123964:	e0bff417 	ldw	r2,-48(fp)
81123968:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
8112396c:	e0bfff17 	ldw	r2,-4(fp)
81123970:	00c01c44 	movi	r3,113
81123974:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
81123978:	0005883a 	mov	r2,zero
8112397c:	00009806 	br	81123be0 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
81123980:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
81123984:	e0bffc17 	ldw	r2,-16(fp)
81123988:	10800117 	ldw	r2,4(r2)
8112398c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
81123990:	00007706 	br	81123b70 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
81123994:	e0bff117 	ldw	r2,-60(fp)
81123998:	10800483 	ldbu	r2,18(r2)
8112399c:	10803fcc 	andi	r2,r2,255
811239a0:	10c00060 	cmpeqi	r3,r2,1
811239a4:	18004a1e 	bne	r3,zero,81123ad0 <OSFlagPost+0x270>
811239a8:	10c00088 	cmpgei	r3,r2,2
811239ac:	1800021e 	bne	r3,zero,811239b8 <OSFlagPost+0x158>
811239b0:	10002f26 	beq	r2,zero,81123a70 <OSFlagPost+0x210>
811239b4:	00005b06 	br	81123b24 <OSFlagPost+0x2c4>
811239b8:	10c000a0 	cmpeqi	r3,r2,2
811239bc:	1800031e 	bne	r3,zero,811239cc <OSFlagPost+0x16c>
811239c0:	108000e0 	cmpeqi	r2,r2,3
811239c4:	1000171e 	bne	r2,zero,81123a24 <OSFlagPost+0x1c4>
811239c8:	00005606 	br	81123b24 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
811239cc:	e0bffc17 	ldw	r2,-16(fp)
811239d0:	10c0020b 	ldhu	r3,8(r2)
811239d4:	e0bff117 	ldw	r2,-60(fp)
811239d8:	1080040b 	ldhu	r2,16(r2)
811239dc:	1884703a 	and	r2,r3,r2
811239e0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
811239e4:	e0bff117 	ldw	r2,-60(fp)
811239e8:	1080040b 	ldhu	r2,16(r2)
811239ec:	10ffffcc 	andi	r3,r2,65535
811239f0:	e0bff60b 	ldhu	r2,-40(fp)
811239f4:	1880541e 	bne	r3,r2,81123b48 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
811239f8:	e0bff60b 	ldhu	r2,-40(fp)
811239fc:	100b883a 	mov	r5,r2
81123a00:	e13ff117 	ldw	r4,-60(fp)
81123a04:	1123ef80 	call	81123ef8 <OS_FlagTaskRdy>
81123a08:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81123a0c:	e0bff683 	ldbu	r2,-38(fp)
81123a10:	10800058 	cmpnei	r2,r2,1
81123a14:	10004c1e 	bne	r2,zero,81123b48 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81123a18:	00800044 	movi	r2,1
81123a1c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81123a20:	00004906 	br	81123b48 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81123a24:	e0bffc17 	ldw	r2,-16(fp)
81123a28:	10c0020b 	ldhu	r3,8(r2)
81123a2c:	e0bff117 	ldw	r2,-60(fp)
81123a30:	1080040b 	ldhu	r2,16(r2)
81123a34:	1884703a 	and	r2,r3,r2
81123a38:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
81123a3c:	e0bff60b 	ldhu	r2,-40(fp)
81123a40:	10004326 	beq	r2,zero,81123b50 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81123a44:	e0bff60b 	ldhu	r2,-40(fp)
81123a48:	100b883a 	mov	r5,r2
81123a4c:	e13ff117 	ldw	r4,-60(fp)
81123a50:	1123ef80 	call	81123ef8 <OS_FlagTaskRdy>
81123a54:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81123a58:	e0bff683 	ldbu	r2,-38(fp)
81123a5c:	10800058 	cmpnei	r2,r2,1
81123a60:	10003b1e 	bne	r2,zero,81123b50 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81123a64:	00800044 	movi	r2,1
81123a68:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81123a6c:	00003806 	br	81123b50 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81123a70:	e0bffc17 	ldw	r2,-16(fp)
81123a74:	1080020b 	ldhu	r2,8(r2)
81123a78:	0084303a 	nor	r2,zero,r2
81123a7c:	1007883a 	mov	r3,r2
81123a80:	e0bff117 	ldw	r2,-60(fp)
81123a84:	1080040b 	ldhu	r2,16(r2)
81123a88:	1884703a 	and	r2,r3,r2
81123a8c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
81123a90:	e0bff117 	ldw	r2,-60(fp)
81123a94:	1080040b 	ldhu	r2,16(r2)
81123a98:	10ffffcc 	andi	r3,r2,65535
81123a9c:	e0bff60b 	ldhu	r2,-40(fp)
81123aa0:	18802d1e 	bne	r3,r2,81123b58 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81123aa4:	e0bff60b 	ldhu	r2,-40(fp)
81123aa8:	100b883a 	mov	r5,r2
81123aac:	e13ff117 	ldw	r4,-60(fp)
81123ab0:	1123ef80 	call	81123ef8 <OS_FlagTaskRdy>
81123ab4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81123ab8:	e0bff683 	ldbu	r2,-38(fp)
81123abc:	10800058 	cmpnei	r2,r2,1
81123ac0:	1000251e 	bne	r2,zero,81123b58 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81123ac4:	00800044 	movi	r2,1
81123ac8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81123acc:	00002206 	br	81123b58 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81123ad0:	e0bffc17 	ldw	r2,-16(fp)
81123ad4:	1080020b 	ldhu	r2,8(r2)
81123ad8:	0084303a 	nor	r2,zero,r2
81123adc:	1007883a 	mov	r3,r2
81123ae0:	e0bff117 	ldw	r2,-60(fp)
81123ae4:	1080040b 	ldhu	r2,16(r2)
81123ae8:	1884703a 	and	r2,r3,r2
81123aec:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
81123af0:	e0bff60b 	ldhu	r2,-40(fp)
81123af4:	10001a26 	beq	r2,zero,81123b60 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81123af8:	e0bff60b 	ldhu	r2,-40(fp)
81123afc:	100b883a 	mov	r5,r2
81123b00:	e13ff117 	ldw	r4,-60(fp)
81123b04:	1123ef80 	call	81123ef8 <OS_FlagTaskRdy>
81123b08:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81123b0c:	e0bff683 	ldbu	r2,-38(fp)
81123b10:	10800058 	cmpnei	r2,r2,1
81123b14:	1000121e 	bne	r2,zero,81123b60 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81123b18:	00800044 	movi	r2,1
81123b1c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81123b20:	00000f06 	br	81123b60 <OSFlagPost+0x300>
81123b24:	e0bff317 	ldw	r2,-52(fp)
81123b28:	e0bff515 	stw	r2,-44(fp)
81123b2c:	e0bff517 	ldw	r2,-44(fp)
81123b30:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
81123b34:	e0bfff17 	ldw	r2,-4(fp)
81123b38:	00c01bc4 	movi	r3,111
81123b3c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
81123b40:	0005883a 	mov	r2,zero
81123b44:	00002606 	br	81123be0 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81123b48:	0001883a 	nop
81123b4c:	00000506 	br	81123b64 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81123b50:	0001883a 	nop
81123b54:	00000306 	br	81123b64 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81123b58:	0001883a 	nop
81123b5c:	00000106 	br	81123b64 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81123b60:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
81123b64:	e0bff117 	ldw	r2,-60(fp)
81123b68:	10800017 	ldw	r2,0(r2)
81123b6c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
81123b70:	e0bff117 	ldw	r2,-60(fp)
81123b74:	103f871e 	bne	r2,zero,81123994 <__reset+0xfb103994>
81123b78:	e0bff317 	ldw	r2,-52(fp)
81123b7c:	e0bff715 	stw	r2,-36(fp)
81123b80:	e0bff717 	ldw	r2,-36(fp)
81123b84:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
81123b88:	e0bff203 	ldbu	r2,-56(fp)
81123b8c:	10800058 	cmpnei	r2,r2,1
81123b90:	1000011e 	bne	r2,zero,81123b98 <OSFlagPost+0x338>
        OS_Sched();
81123b94:	11221080 	call	81122108 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123b98:	0005303a 	rdctl	r2,status
81123b9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123ba0:	e0fffa17 	ldw	r3,-24(fp)
81123ba4:	00bfff84 	movi	r2,-2
81123ba8:	1884703a 	and	r2,r3,r2
81123bac:	1001703a 	wrctl	status,r2
  
  return context;
81123bb0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
81123bb4:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
81123bb8:	e0bffc17 	ldw	r2,-16(fp)
81123bbc:	1080020b 	ldhu	r2,8(r2)
81123bc0:	e0bff90d 	sth	r2,-28(fp)
81123bc4:	e0bff317 	ldw	r2,-52(fp)
81123bc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123bcc:	e0bff817 	ldw	r2,-32(fp)
81123bd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
81123bd4:	e0bfff17 	ldw	r2,-4(fp)
81123bd8:	10000005 	stb	zero,0(r2)
    return (flags_cur);
81123bdc:	e0bff90b 	ldhu	r2,-28(fp)
}
81123be0:	e037883a 	mov	sp,fp
81123be4:	dfc00117 	ldw	ra,4(sp)
81123be8:	df000017 	ldw	fp,0(sp)
81123bec:	dec00204 	addi	sp,sp,8
81123bf0:	f800283a 	ret

81123bf4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
81123bf4:	defff904 	addi	sp,sp,-28
81123bf8:	df000615 	stw	fp,24(sp)
81123bfc:	df000604 	addi	fp,sp,24
81123c00:	e13ffe15 	stw	r4,-8(fp)
81123c04:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
81123c08:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
81123c0c:	e0bfff17 	ldw	r2,-4(fp)
81123c10:	1000021e 	bne	r2,zero,81123c1c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
81123c14:	0005883a 	mov	r2,zero
81123c18:	00002306 	br	81123ca8 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
81123c1c:	e0bffe17 	ldw	r2,-8(fp)
81123c20:	1000051e 	bne	r2,zero,81123c38 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81123c24:	e0bfff17 	ldw	r2,-4(fp)
81123c28:	00c01b84 	movi	r3,110
81123c2c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81123c30:	0005883a 	mov	r2,zero
81123c34:	00001c06 	br	81123ca8 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
81123c38:	e0bffe17 	ldw	r2,-8(fp)
81123c3c:	10800003 	ldbu	r2,0(r2)
81123c40:	10803fcc 	andi	r2,r2,255
81123c44:	10800160 	cmpeqi	r2,r2,5
81123c48:	1000051e 	bne	r2,zero,81123c60 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
81123c4c:	e0bfff17 	ldw	r2,-4(fp)
81123c50:	00c00044 	movi	r3,1
81123c54:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81123c58:	0005883a 	mov	r2,zero
81123c5c:	00001206 	br	81123ca8 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123c60:	0005303a 	rdctl	r2,status
81123c64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123c68:	e0fffc17 	ldw	r3,-16(fp)
81123c6c:	00bfff84 	movi	r2,-2
81123c70:	1884703a 	and	r2,r3,r2
81123c74:	1001703a 	wrctl	status,r2
  
  return context;
81123c78:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81123c7c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
81123c80:	e0bffe17 	ldw	r2,-8(fp)
81123c84:	1080020b 	ldhu	r2,8(r2)
81123c88:	e0bffb0d 	sth	r2,-20(fp)
81123c8c:	e0bffa17 	ldw	r2,-24(fp)
81123c90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123c94:	e0bffd17 	ldw	r2,-12(fp)
81123c98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81123c9c:	e0bfff17 	ldw	r2,-4(fp)
81123ca0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
81123ca4:	e0bffb0b 	ldhu	r2,-20(fp)
}
81123ca8:	e037883a 	mov	sp,fp
81123cac:	df000017 	ldw	fp,0(sp)
81123cb0:	dec00104 	addi	sp,sp,4
81123cb4:	f800283a 	ret

81123cb8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
81123cb8:	defff804 	addi	sp,sp,-32
81123cbc:	df000715 	stw	fp,28(sp)
81123cc0:	df000704 	addi	fp,sp,28
81123cc4:	e13ffb15 	stw	r4,-20(fp)
81123cc8:	e17ffc15 	stw	r5,-16(fp)
81123ccc:	3009883a 	mov	r4,r6
81123cd0:	3807883a 	mov	r3,r7
81123cd4:	e0800117 	ldw	r2,4(fp)
81123cd8:	e13ffd0d 	sth	r4,-12(fp)
81123cdc:	e0fffe05 	stb	r3,-8(fp)
81123ce0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
81123ce4:	d0a07917 	ldw	r2,-32284(gp)
81123ce8:	d0e07917 	ldw	r3,-32284(gp)
81123cec:	18c00c03 	ldbu	r3,48(r3)
81123cf0:	18c00814 	ori	r3,r3,32
81123cf4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
81123cf8:	d0a07917 	ldw	r2,-32284(gp)
81123cfc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
81123d00:	d0a07917 	ldw	r2,-32284(gp)
81123d04:	e0ffff0b 	ldhu	r3,-4(fp)
81123d08:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
81123d0c:	d0a07917 	ldw	r2,-32284(gp)
81123d10:	e0fffc17 	ldw	r3,-16(fp)
81123d14:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
81123d18:	e0bffc17 	ldw	r2,-16(fp)
81123d1c:	e0fffd0b 	ldhu	r3,-12(fp)
81123d20:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
81123d24:	e0bffc17 	ldw	r2,-16(fp)
81123d28:	e0fffe03 	ldbu	r3,-8(fp)
81123d2c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
81123d30:	d0e07917 	ldw	r3,-32284(gp)
81123d34:	e0bffc17 	ldw	r2,-16(fp)
81123d38:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
81123d3c:	e0bffb17 	ldw	r2,-20(fp)
81123d40:	10c00117 	ldw	r3,4(r2)
81123d44:	e0bffc17 	ldw	r2,-16(fp)
81123d48:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
81123d4c:	e0bffc17 	ldw	r2,-16(fp)
81123d50:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
81123d54:	e0bffc17 	ldw	r2,-16(fp)
81123d58:	e0fffb17 	ldw	r3,-20(fp)
81123d5c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
81123d60:	e0bffb17 	ldw	r2,-20(fp)
81123d64:	10800117 	ldw	r2,4(r2)
81123d68:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
81123d6c:	e0bff917 	ldw	r2,-28(fp)
81123d70:	10000326 	beq	r2,zero,81123d80 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
81123d74:	e0bff917 	ldw	r2,-28(fp)
81123d78:	e0fffc17 	ldw	r3,-16(fp)
81123d7c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
81123d80:	e0bffb17 	ldw	r2,-20(fp)
81123d84:	e0fffc17 	ldw	r3,-16(fp)
81123d88:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
81123d8c:	d0a07917 	ldw	r2,-32284(gp)
81123d90:	10800d03 	ldbu	r2,52(r2)
81123d94:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
81123d98:	e0fffa03 	ldbu	r3,-24(fp)
81123d9c:	e13ffa03 	ldbu	r4,-24(fp)
81123da0:	d0a07544 	addi	r2,gp,-32299
81123da4:	2085883a 	add	r2,r4,r2
81123da8:	10800003 	ldbu	r2,0(r2)
81123dac:	1009883a 	mov	r4,r2
81123db0:	d0a07917 	ldw	r2,-32284(gp)
81123db4:	10800d43 	ldbu	r2,53(r2)
81123db8:	0084303a 	nor	r2,zero,r2
81123dbc:	2084703a 	and	r2,r4,r2
81123dc0:	1009883a 	mov	r4,r2
81123dc4:	d0a07544 	addi	r2,gp,-32299
81123dc8:	1885883a 	add	r2,r3,r2
81123dcc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
81123dd0:	e0fffa03 	ldbu	r3,-24(fp)
81123dd4:	d0a07544 	addi	r2,gp,-32299
81123dd8:	1885883a 	add	r2,r3,r2
81123ddc:	10800003 	ldbu	r2,0(r2)
81123de0:	10803fcc 	andi	r2,r2,255
81123de4:	1000071e 	bne	r2,zero,81123e04 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
81123de8:	d0a07917 	ldw	r2,-32284(gp)
81123dec:	10800d83 	ldbu	r2,54(r2)
81123df0:	0084303a 	nor	r2,zero,r2
81123df4:	1007883a 	mov	r3,r2
81123df8:	d0a07503 	ldbu	r2,-32300(gp)
81123dfc:	1884703a 	and	r2,r3,r2
81123e00:	d0a07505 	stb	r2,-32300(gp)
    }
}
81123e04:	0001883a 	nop
81123e08:	e037883a 	mov	sp,fp
81123e0c:	df000017 	ldw	fp,0(sp)
81123e10:	dec00104 	addi	sp,sp,4
81123e14:	f800283a 	ret

81123e18 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
81123e18:	defffb04 	addi	sp,sp,-20
81123e1c:	dfc00415 	stw	ra,16(sp)
81123e20:	df000315 	stw	fp,12(sp)
81123e24:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
81123e28:	0140dc04 	movi	r5,880
81123e2c:	01204574 	movhi	r4,33045
81123e30:	2108f904 	addi	r4,r4,9188
81123e34:	112204c0 	call	8112204c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
81123e38:	00a04574 	movhi	r2,33045
81123e3c:	1088f904 	addi	r2,r2,9188
81123e40:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
81123e44:	00a04574 	movhi	r2,33045
81123e48:	10890404 	addi	r2,r2,9232
81123e4c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
81123e50:	e03ffd0d 	sth	zero,-12(fp)
81123e54:	00001306 	br	81123ea4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81123e58:	e0bffe17 	ldw	r2,-8(fp)
81123e5c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
81123e60:	e0bffe17 	ldw	r2,-8(fp)
81123e64:	e0ffff17 	ldw	r3,-4(fp)
81123e68:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
81123e6c:	e0bffe17 	ldw	r2,-8(fp)
81123e70:	00c00fc4 	movi	r3,63
81123e74:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
81123e78:	e0bffe17 	ldw	r2,-8(fp)
81123e7c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
81123e80:	e0bffe17 	ldw	r2,-8(fp)
81123e84:	10800b04 	addi	r2,r2,44
81123e88:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
81123e8c:	e0bfff17 	ldw	r2,-4(fp)
81123e90:	10800b04 	addi	r2,r2,44
81123e94:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
81123e98:	e0bffd0b 	ldhu	r2,-12(fp)
81123e9c:	10800044 	addi	r2,r2,1
81123ea0:	e0bffd0d 	sth	r2,-12(fp)
81123ea4:	e0bffd0b 	ldhu	r2,-12(fp)
81123ea8:	108004f0 	cmpltui	r2,r2,19
81123eac:	103fea1e 	bne	r2,zero,81123e58 <__reset+0xfb103e58>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81123eb0:	e0bffe17 	ldw	r2,-8(fp)
81123eb4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
81123eb8:	e0bffe17 	ldw	r2,-8(fp)
81123ebc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
81123ec0:	e0bffe17 	ldw	r2,-8(fp)
81123ec4:	00c00fc4 	movi	r3,63
81123ec8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
81123ecc:	e0bffe17 	ldw	r2,-8(fp)
81123ed0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
81123ed4:	00a04574 	movhi	r2,33045
81123ed8:	1088f904 	addi	r2,r2,9188
81123edc:	d0a07b15 	stw	r2,-32276(gp)
#endif
}
81123ee0:	0001883a 	nop
81123ee4:	e037883a 	mov	sp,fp
81123ee8:	dfc00117 	ldw	ra,4(sp)
81123eec:	df000017 	ldw	fp,0(sp)
81123ef0:	dec00204 	addi	sp,sp,8
81123ef4:	f800283a 	ret

81123ef8 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
81123ef8:	defffa04 	addi	sp,sp,-24
81123efc:	dfc00515 	stw	ra,20(sp)
81123f00:	df000415 	stw	fp,16(sp)
81123f04:	df000404 	addi	fp,sp,16
81123f08:	e13ffe15 	stw	r4,-8(fp)
81123f0c:	2805883a 	mov	r2,r5
81123f10:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
81123f14:	e0bffe17 	ldw	r2,-8(fp)
81123f18:	10800217 	ldw	r2,8(r2)
81123f1c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
81123f20:	e0bffd17 	ldw	r2,-12(fp)
81123f24:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
81123f28:	e0bffd17 	ldw	r2,-12(fp)
81123f2c:	e0ffff0b 	ldhu	r3,-4(fp)
81123f30:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
81123f34:	e0bffd17 	ldw	r2,-12(fp)
81123f38:	10c00c03 	ldbu	r3,48(r2)
81123f3c:	00bff7c4 	movi	r2,-33
81123f40:	1884703a 	and	r2,r3,r2
81123f44:	1007883a 	mov	r3,r2
81123f48:	e0bffd17 	ldw	r2,-12(fp)
81123f4c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
81123f50:	e0bffd17 	ldw	r2,-12(fp)
81123f54:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
81123f58:	e0bffd17 	ldw	r2,-12(fp)
81123f5c:	10800c03 	ldbu	r2,48(r2)
81123f60:	10803fcc 	andi	r2,r2,255
81123f64:	1000181e 	bne	r2,zero,81123fc8 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
81123f68:	e0bffd17 	ldw	r2,-12(fp)
81123f6c:	10c00d83 	ldbu	r3,54(r2)
81123f70:	d0a07503 	ldbu	r2,-32300(gp)
81123f74:	1884b03a 	or	r2,r3,r2
81123f78:	d0a07505 	stb	r2,-32300(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81123f7c:	e0bffd17 	ldw	r2,-12(fp)
81123f80:	10800d03 	ldbu	r2,52(r2)
81123f84:	10c03fcc 	andi	r3,r2,255
81123f88:	e0bffd17 	ldw	r2,-12(fp)
81123f8c:	10800d03 	ldbu	r2,52(r2)
81123f90:	11003fcc 	andi	r4,r2,255
81123f94:	d0a07544 	addi	r2,gp,-32299
81123f98:	2085883a 	add	r2,r4,r2
81123f9c:	11000003 	ldbu	r4,0(r2)
81123fa0:	e0bffd17 	ldw	r2,-12(fp)
81123fa4:	10800d43 	ldbu	r2,53(r2)
81123fa8:	2084b03a 	or	r2,r4,r2
81123fac:	1009883a 	mov	r4,r2
81123fb0:	d0a07544 	addi	r2,gp,-32299
81123fb4:	1885883a 	add	r2,r3,r2
81123fb8:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
81123fbc:	00800044 	movi	r2,1
81123fc0:	e0bffc05 	stb	r2,-16(fp)
81123fc4:	00000106 	br	81123fcc <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
81123fc8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
81123fcc:	e13ffe17 	ldw	r4,-8(fp)
81123fd0:	1123fec0 	call	81123fec <OS_FlagUnlink>
    return (sched);
81123fd4:	e0bffc03 	ldbu	r2,-16(fp)
}
81123fd8:	e037883a 	mov	sp,fp
81123fdc:	dfc00117 	ldw	ra,4(sp)
81123fe0:	df000017 	ldw	fp,0(sp)
81123fe4:	dec00204 	addi	sp,sp,8
81123fe8:	f800283a 	ret

81123fec <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
81123fec:	defffa04 	addi	sp,sp,-24
81123ff0:	df000515 	stw	fp,20(sp)
81123ff4:	df000504 	addi	fp,sp,20
81123ff8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
81123ffc:	e0bfff17 	ldw	r2,-4(fp)
81124000:	10800117 	ldw	r2,4(r2)
81124004:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
81124008:	e0bfff17 	ldw	r2,-4(fp)
8112400c:	10800017 	ldw	r2,0(r2)
81124010:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
81124014:	e0bffb17 	ldw	r2,-20(fp)
81124018:	10000b1e 	bne	r2,zero,81124048 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
8112401c:	e0bfff17 	ldw	r2,-4(fp)
81124020:	10800317 	ldw	r2,12(r2)
81124024:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
81124028:	e0bffd17 	ldw	r2,-12(fp)
8112402c:	e0fffc17 	ldw	r3,-16(fp)
81124030:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
81124034:	e0bffc17 	ldw	r2,-16(fp)
81124038:	10000b26 	beq	r2,zero,81124068 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
8112403c:	e0bffc17 	ldw	r2,-16(fp)
81124040:	10000115 	stw	zero,4(r2)
81124044:	00000806 	br	81124068 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
81124048:	e0bffb17 	ldw	r2,-20(fp)
8112404c:	e0fffc17 	ldw	r3,-16(fp)
81124050:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
81124054:	e0bffc17 	ldw	r2,-16(fp)
81124058:	10000326 	beq	r2,zero,81124068 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
8112405c:	e0bffc17 	ldw	r2,-16(fp)
81124060:	e0fffb17 	ldw	r3,-20(fp)
81124064:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
81124068:	e0bfff17 	ldw	r2,-4(fp)
8112406c:	10800217 	ldw	r2,8(r2)
81124070:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
81124074:	e0bffe17 	ldw	r2,-8(fp)
81124078:	10000a15 	stw	zero,40(r2)
#endif
}
8112407c:	0001883a 	nop
81124080:	e037883a 	mov	sp,fp
81124084:	df000017 	ldw	fp,0(sp)
81124088:	dec00104 	addi	sp,sp,4
8112408c:	f800283a 	ret

81124090 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
81124090:	defff404 	addi	sp,sp,-48
81124094:	df000b15 	stw	fp,44(sp)
81124098:	df000b04 	addi	fp,sp,44
8112409c:	e13ffc15 	stw	r4,-16(fp)
811240a0:	e17ffd15 	stw	r5,-12(fp)
811240a4:	e1bffe15 	stw	r6,-8(fp)
811240a8:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811240ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
811240b0:	e0bfff17 	ldw	r2,-4(fp)
811240b4:	1000021e 	bne	r2,zero,811240c0 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
811240b8:	0005883a 	mov	r2,zero
811240bc:	00006506 	br	81124254 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
811240c0:	e0bffc17 	ldw	r2,-16(fp)
811240c4:	1000051e 	bne	r2,zero,811240dc <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
811240c8:	e0bfff17 	ldw	r2,-4(fp)
811240cc:	00c01884 	movi	r3,98
811240d0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
811240d4:	0005883a 	mov	r2,zero
811240d8:	00005e06 	br	81124254 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
811240dc:	e0bffc17 	ldw	r2,-16(fp)
811240e0:	108000cc 	andi	r2,r2,3
811240e4:	10000526 	beq	r2,zero,811240fc <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
811240e8:	e0bfff17 	ldw	r2,-4(fp)
811240ec:	00c01884 	movi	r3,98
811240f0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
811240f4:	0005883a 	mov	r2,zero
811240f8:	00005606 	br	81124254 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
811240fc:	e0bffd17 	ldw	r2,-12(fp)
81124100:	108000a8 	cmpgeui	r2,r2,2
81124104:	1000051e 	bne	r2,zero,8112411c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
81124108:	e0bfff17 	ldw	r2,-4(fp)
8112410c:	00c016c4 	movi	r3,91
81124110:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81124114:	0005883a 	mov	r2,zero
81124118:	00004e06 	br	81124254 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
8112411c:	e0bffe17 	ldw	r2,-8(fp)
81124120:	10800128 	cmpgeui	r2,r2,4
81124124:	1000051e 	bne	r2,zero,8112413c <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
81124128:	e0bfff17 	ldw	r2,-4(fp)
8112412c:	00c01704 	movi	r3,92
81124130:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81124134:	0005883a 	mov	r2,zero
81124138:	00004606 	br	81124254 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112413c:	0005303a 	rdctl	r2,status
81124140:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124144:	e0fffb17 	ldw	r3,-20(fp)
81124148:	00bfff84 	movi	r2,-2
8112414c:	1884703a 	and	r2,r3,r2
81124150:	1001703a 	wrctl	status,r2
  
  return context;
81124154:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81124158:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
8112415c:	d0a07217 	ldw	r2,-32312(gp)
81124160:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
81124164:	d0a07217 	ldw	r2,-32312(gp)
81124168:	10000326 	beq	r2,zero,81124178 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
8112416c:	d0a07217 	ldw	r2,-32312(gp)
81124170:	10800117 	ldw	r2,4(r2)
81124174:	d0a07215 	stw	r2,-32312(gp)
81124178:	e0bff817 	ldw	r2,-32(fp)
8112417c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124180:	e0bff917 	ldw	r2,-28(fp)
81124184:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
81124188:	e0bffa17 	ldw	r2,-24(fp)
8112418c:	1000051e 	bne	r2,zero,811241a4 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
81124190:	e0bfff17 	ldw	r2,-4(fp)
81124194:	00c01684 	movi	r3,90
81124198:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112419c:	0005883a 	mov	r2,zero
811241a0:	00002c06 	br	81124254 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
811241a4:	e0bffc17 	ldw	r2,-16(fp)
811241a8:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
811241ac:	e0fffc17 	ldw	r3,-16(fp)
811241b0:	e0bffe17 	ldw	r2,-8(fp)
811241b4:	1885883a 	add	r2,r3,r2
811241b8:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
811241bc:	e03ff715 	stw	zero,-36(fp)
811241c0:	00000c06 	br	811241f4 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
811241c4:	e0bff617 	ldw	r2,-40(fp)
811241c8:	e0fff517 	ldw	r3,-44(fp)
811241cc:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
811241d0:	e0bff517 	ldw	r2,-44(fp)
811241d4:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
811241d8:	e0fff517 	ldw	r3,-44(fp)
811241dc:	e0bffe17 	ldw	r2,-8(fp)
811241e0:	1885883a 	add	r2,r3,r2
811241e4:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
811241e8:	e0bff717 	ldw	r2,-36(fp)
811241ec:	10800044 	addi	r2,r2,1
811241f0:	e0bff715 	stw	r2,-36(fp)
811241f4:	e0bffd17 	ldw	r2,-12(fp)
811241f8:	10bfffc4 	addi	r2,r2,-1
811241fc:	e0fff717 	ldw	r3,-36(fp)
81124200:	18bff036 	bltu	r3,r2,811241c4 <__reset+0xfb1041c4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
81124204:	e0bff617 	ldw	r2,-40(fp)
81124208:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
8112420c:	e0bffa17 	ldw	r2,-24(fp)
81124210:	e0fffc17 	ldw	r3,-16(fp)
81124214:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
81124218:	e0bffa17 	ldw	r2,-24(fp)
8112421c:	e0fffc17 	ldw	r3,-16(fp)
81124220:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
81124224:	e0bffa17 	ldw	r2,-24(fp)
81124228:	e0fffd17 	ldw	r3,-12(fp)
8112422c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
81124230:	e0bffa17 	ldw	r2,-24(fp)
81124234:	e0fffd17 	ldw	r3,-12(fp)
81124238:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
8112423c:	e0bffa17 	ldw	r2,-24(fp)
81124240:	e0fffe17 	ldw	r3,-8(fp)
81124244:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
81124248:	e0bfff17 	ldw	r2,-4(fp)
8112424c:	10000005 	stb	zero,0(r2)
    return (pmem);
81124250:	e0bffa17 	ldw	r2,-24(fp)
}
81124254:	e037883a 	mov	sp,fp
81124258:	df000017 	ldw	fp,0(sp)
8112425c:	dec00104 	addi	sp,sp,4
81124260:	f800283a 	ret

81124264 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
81124264:	defff804 	addi	sp,sp,-32
81124268:	df000715 	stw	fp,28(sp)
8112426c:	df000704 	addi	fp,sp,28
81124270:	e13ffe15 	stw	r4,-8(fp)
81124274:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81124278:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112427c:	e0bfff17 	ldw	r2,-4(fp)
81124280:	1000021e 	bne	r2,zero,8112428c <OSMemGet+0x28>
        return ((void *)0);
81124284:	0005883a 	mov	r2,zero
81124288:	00002e06 	br	81124344 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
8112428c:	e0bffe17 	ldw	r2,-8(fp)
81124290:	1000051e 	bne	r2,zero,811242a8 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
81124294:	e0bfff17 	ldw	r2,-4(fp)
81124298:	00c01804 	movi	r3,96
8112429c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
811242a0:	0005883a 	mov	r2,zero
811242a4:	00002706 	br	81124344 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811242a8:	0005303a 	rdctl	r2,status
811242ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811242b0:	e0fffd17 	ldw	r3,-12(fp)
811242b4:	00bfff84 	movi	r2,-2
811242b8:	1884703a 	and	r2,r3,r2
811242bc:	1001703a 	wrctl	status,r2
  
  return context;
811242c0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811242c4:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
811242c8:	e0bffe17 	ldw	r2,-8(fp)
811242cc:	10800417 	ldw	r2,16(r2)
811242d0:	10001426 	beq	r2,zero,81124324 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
811242d4:	e0bffe17 	ldw	r2,-8(fp)
811242d8:	10800117 	ldw	r2,4(r2)
811242dc:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
811242e0:	e0bffb17 	ldw	r2,-20(fp)
811242e4:	10c00017 	ldw	r3,0(r2)
811242e8:	e0bffe17 	ldw	r2,-8(fp)
811242ec:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
811242f0:	e0bffe17 	ldw	r2,-8(fp)
811242f4:	10800417 	ldw	r2,16(r2)
811242f8:	10ffffc4 	addi	r3,r2,-1
811242fc:	e0bffe17 	ldw	r2,-8(fp)
81124300:	10c00415 	stw	r3,16(r2)
81124304:	e0bff917 	ldw	r2,-28(fp)
81124308:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112430c:	e0bffa17 	ldw	r2,-24(fp)
81124310:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
81124314:	e0bfff17 	ldw	r2,-4(fp)
81124318:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
8112431c:	e0bffb17 	ldw	r2,-20(fp)
81124320:	00000806 	br	81124344 <OSMemGet+0xe0>
81124324:	e0bff917 	ldw	r2,-28(fp)
81124328:	e0bffc15 	stw	r2,-16(fp)
8112432c:	e0bffc17 	ldw	r2,-16(fp)
81124330:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
81124334:	e0bfff17 	ldw	r2,-4(fp)
81124338:	00c01744 	movi	r3,93
8112433c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
81124340:	0005883a 	mov	r2,zero
}
81124344:	e037883a 	mov	sp,fp
81124348:	df000017 	ldw	fp,0(sp)
8112434c:	dec00104 	addi	sp,sp,4
81124350:	f800283a 	ret

81124354 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
81124354:	defff704 	addi	sp,sp,-36
81124358:	dfc00815 	stw	ra,32(sp)
8112435c:	df000715 	stw	fp,28(sp)
81124360:	df000704 	addi	fp,sp,28
81124364:	e13ffd15 	stw	r4,-12(fp)
81124368:	e17ffe15 	stw	r5,-8(fp)
8112436c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124370:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81124374:	e0bfff17 	ldw	r2,-4(fp)
81124378:	1000021e 	bne	r2,zero,81124384 <OSMemNameGet+0x30>
        return (0);
8112437c:	0005883a 	mov	r2,zero
81124380:	00002b06 	br	81124430 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
81124384:	e0bffd17 	ldw	r2,-12(fp)
81124388:	1000051e 	bne	r2,zero,811243a0 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112438c:	e0bfff17 	ldw	r2,-4(fp)
81124390:	00c01804 	movi	r3,96
81124394:	10c00005 	stb	r3,0(r2)
        return (0);
81124398:	0005883a 	mov	r2,zero
8112439c:	00002406 	br	81124430 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
811243a0:	e0bffe17 	ldw	r2,-8(fp)
811243a4:	1000051e 	bne	r2,zero,811243bc <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
811243a8:	e0bfff17 	ldw	r2,-4(fp)
811243ac:	00c00304 	movi	r3,12
811243b0:	10c00005 	stb	r3,0(r2)
        return (0);
811243b4:	0005883a 	mov	r2,zero
811243b8:	00001d06 	br	81124430 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
811243bc:	d0a07803 	ldbu	r2,-32288(gp)
811243c0:	10803fcc 	andi	r2,r2,255
811243c4:	10000526 	beq	r2,zero,811243dc <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
811243c8:	e0bfff17 	ldw	r2,-4(fp)
811243cc:	00c00444 	movi	r3,17
811243d0:	10c00005 	stb	r3,0(r2)
        return (0);
811243d4:	0005883a 	mov	r2,zero
811243d8:	00001506 	br	81124430 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811243dc:	0005303a 	rdctl	r2,status
811243e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811243e4:	e0fffb17 	ldw	r3,-20(fp)
811243e8:	00bfff84 	movi	r2,-2
811243ec:	1884703a 	and	r2,r3,r2
811243f0:	1001703a 	wrctl	status,r2
  
  return context;
811243f4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
811243f8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
811243fc:	e0bffd17 	ldw	r2,-12(fp)
81124400:	10800504 	addi	r2,r2,20
81124404:	100b883a 	mov	r5,r2
81124408:	e13ffe17 	ldw	r4,-8(fp)
8112440c:	112224c0 	call	8112224c <OS_StrCopy>
81124410:	e0bffa05 	stb	r2,-24(fp)
81124414:	e0bff917 	ldw	r2,-28(fp)
81124418:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112441c:	e0bffc17 	ldw	r2,-16(fp)
81124420:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81124424:	e0bfff17 	ldw	r2,-4(fp)
81124428:	10000005 	stb	zero,0(r2)
    return (len);
8112442c:	e0bffa03 	ldbu	r2,-24(fp)
}
81124430:	e037883a 	mov	sp,fp
81124434:	dfc00117 	ldw	ra,4(sp)
81124438:	df000017 	ldw	fp,0(sp)
8112443c:	dec00204 	addi	sp,sp,8
81124440:	f800283a 	ret

81124444 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
81124444:	defff604 	addi	sp,sp,-40
81124448:	dfc00915 	stw	ra,36(sp)
8112444c:	df000815 	stw	fp,32(sp)
81124450:	df000804 	addi	fp,sp,32
81124454:	e13ffd15 	stw	r4,-12(fp)
81124458:	e17ffe15 	stw	r5,-8(fp)
8112445c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124460:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81124464:	e0bfff17 	ldw	r2,-4(fp)
81124468:	10003526 	beq	r2,zero,81124540 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112446c:	e0bffd17 	ldw	r2,-12(fp)
81124470:	1000041e 	bne	r2,zero,81124484 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
81124474:	e0bfff17 	ldw	r2,-4(fp)
81124478:	00c01804 	movi	r3,96
8112447c:	10c00005 	stb	r3,0(r2)
        return;
81124480:	00003006 	br	81124544 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81124484:	e0bffe17 	ldw	r2,-8(fp)
81124488:	1000041e 	bne	r2,zero,8112449c <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
8112448c:	e0bfff17 	ldw	r2,-4(fp)
81124490:	00c00304 	movi	r3,12
81124494:	10c00005 	stb	r3,0(r2)
        return;
81124498:	00002a06 	br	81124544 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112449c:	d0a07803 	ldbu	r2,-32288(gp)
811244a0:	10803fcc 	andi	r2,r2,255
811244a4:	10000426 	beq	r2,zero,811244b8 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
811244a8:	e0bfff17 	ldw	r2,-4(fp)
811244ac:	00c00484 	movi	r3,18
811244b0:	10c00005 	stb	r3,0(r2)
        return;
811244b4:	00002306 	br	81124544 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811244b8:	0005303a 	rdctl	r2,status
811244bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811244c0:	e0fffc17 	ldw	r3,-16(fp)
811244c4:	00bfff84 	movi	r2,-2
811244c8:	1884703a 	and	r2,r3,r2
811244cc:	1001703a 	wrctl	status,r2
  
  return context;
811244d0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811244d4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
811244d8:	e13ffe17 	ldw	r4,-8(fp)
811244dc:	11222c00 	call	811222c0 <OS_StrLen>
811244e0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
811244e4:	e0bffa03 	ldbu	r2,-24(fp)
811244e8:	10800830 	cmpltui	r2,r2,32
811244ec:	1000081e 	bne	r2,zero,81124510 <OSMemNameSet+0xcc>
811244f0:	e0bff817 	ldw	r2,-32(fp)
811244f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811244f8:	e0bff917 	ldw	r2,-28(fp)
811244fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
81124500:	e0bfff17 	ldw	r2,-4(fp)
81124504:	00c018c4 	movi	r3,99
81124508:	10c00005 	stb	r3,0(r2)
        return;
8112450c:	00000d06 	br	81124544 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
81124510:	e0bffd17 	ldw	r2,-12(fp)
81124514:	10800504 	addi	r2,r2,20
81124518:	e17ffe17 	ldw	r5,-8(fp)
8112451c:	1009883a 	mov	r4,r2
81124520:	112224c0 	call	8112224c <OS_StrCopy>
81124524:	e0bff817 	ldw	r2,-32(fp)
81124528:	e0bffb15 	stw	r2,-20(fp)
8112452c:	e0bffb17 	ldw	r2,-20(fp)
81124530:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81124534:	e0bfff17 	ldw	r2,-4(fp)
81124538:	10000005 	stb	zero,0(r2)
8112453c:	00000106 	br	81124544 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81124540:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81124544:	e037883a 	mov	sp,fp
81124548:	dfc00117 	ldw	ra,4(sp)
8112454c:	df000017 	ldw	fp,0(sp)
81124550:	dec00204 	addi	sp,sp,8
81124554:	f800283a 	ret

81124558 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
81124558:	defff904 	addi	sp,sp,-28
8112455c:	df000615 	stw	fp,24(sp)
81124560:	df000604 	addi	fp,sp,24
81124564:	e13ffe15 	stw	r4,-8(fp)
81124568:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112456c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
81124570:	e0bffe17 	ldw	r2,-8(fp)
81124574:	1000021e 	bne	r2,zero,81124580 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
81124578:	00801804 	movi	r2,96
8112457c:	00002806 	br	81124620 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
81124580:	e0bfff17 	ldw	r2,-4(fp)
81124584:	1000021e 	bne	r2,zero,81124590 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
81124588:	008017c4 	movi	r2,95
8112458c:	00002406 	br	81124620 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124590:	0005303a 	rdctl	r2,status
81124594:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124598:	e0fffd17 	ldw	r3,-12(fp)
8112459c:	00bfff84 	movi	r2,-2
811245a0:	1884703a 	and	r2,r3,r2
811245a4:	1001703a 	wrctl	status,r2
  
  return context;
811245a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811245ac:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
811245b0:	e0bffe17 	ldw	r2,-8(fp)
811245b4:	10c00417 	ldw	r3,16(r2)
811245b8:	e0bffe17 	ldw	r2,-8(fp)
811245bc:	10800317 	ldw	r2,12(r2)
811245c0:	18800636 	bltu	r3,r2,811245dc <OSMemPut+0x84>
811245c4:	e0bffa17 	ldw	r2,-24(fp)
811245c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811245cc:	e0bffb17 	ldw	r2,-20(fp)
811245d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
811245d4:	00801784 	movi	r2,94
811245d8:	00001106 	br	81124620 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
811245dc:	e0bffe17 	ldw	r2,-8(fp)
811245e0:	10c00117 	ldw	r3,4(r2)
811245e4:	e0bfff17 	ldw	r2,-4(fp)
811245e8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
811245ec:	e0bffe17 	ldw	r2,-8(fp)
811245f0:	e0ffff17 	ldw	r3,-4(fp)
811245f4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
811245f8:	e0bffe17 	ldw	r2,-8(fp)
811245fc:	10800417 	ldw	r2,16(r2)
81124600:	10c00044 	addi	r3,r2,1
81124604:	e0bffe17 	ldw	r2,-8(fp)
81124608:	10c00415 	stw	r3,16(r2)
8112460c:	e0bffa17 	ldw	r2,-24(fp)
81124610:	e0bffc15 	stw	r2,-16(fp)
81124614:	e0bffc17 	ldw	r2,-16(fp)
81124618:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
8112461c:	0005883a 	mov	r2,zero
}
81124620:	e037883a 	mov	sp,fp
81124624:	df000017 	ldw	fp,0(sp)
81124628:	dec00104 	addi	sp,sp,4
8112462c:	f800283a 	ret

81124630 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
81124630:	defffa04 	addi	sp,sp,-24
81124634:	df000515 	stw	fp,20(sp)
81124638:	df000504 	addi	fp,sp,20
8112463c:	e13ffe15 	stw	r4,-8(fp)
81124640:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124644:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
81124648:	e0bffe17 	ldw	r2,-8(fp)
8112464c:	1000021e 	bne	r2,zero,81124658 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
81124650:	00801804 	movi	r2,96
81124654:	00002c06 	br	81124708 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
81124658:	e0bfff17 	ldw	r2,-4(fp)
8112465c:	1000021e 	bne	r2,zero,81124668 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
81124660:	00801844 	movi	r2,97
81124664:	00002806 	br	81124708 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124668:	0005303a 	rdctl	r2,status
8112466c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124670:	e0fffc17 	ldw	r3,-16(fp)
81124674:	00bfff84 	movi	r2,-2
81124678:	1884703a 	and	r2,r3,r2
8112467c:	1001703a 	wrctl	status,r2
  
  return context;
81124680:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81124684:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
81124688:	e0bffe17 	ldw	r2,-8(fp)
8112468c:	10c00017 	ldw	r3,0(r2)
81124690:	e0bfff17 	ldw	r2,-4(fp)
81124694:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
81124698:	e0bffe17 	ldw	r2,-8(fp)
8112469c:	10c00117 	ldw	r3,4(r2)
811246a0:	e0bfff17 	ldw	r2,-4(fp)
811246a4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
811246a8:	e0bffe17 	ldw	r2,-8(fp)
811246ac:	10c00217 	ldw	r3,8(r2)
811246b0:	e0bfff17 	ldw	r2,-4(fp)
811246b4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
811246b8:	e0bffe17 	ldw	r2,-8(fp)
811246bc:	10c00317 	ldw	r3,12(r2)
811246c0:	e0bfff17 	ldw	r2,-4(fp)
811246c4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
811246c8:	e0bffe17 	ldw	r2,-8(fp)
811246cc:	10c00417 	ldw	r3,16(r2)
811246d0:	e0bfff17 	ldw	r2,-4(fp)
811246d4:	10c00415 	stw	r3,16(r2)
811246d8:	e0bffb17 	ldw	r2,-20(fp)
811246dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811246e0:	e0bffd17 	ldw	r2,-12(fp)
811246e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
811246e8:	e0bfff17 	ldw	r2,-4(fp)
811246ec:	10c00317 	ldw	r3,12(r2)
811246f0:	e0bfff17 	ldw	r2,-4(fp)
811246f4:	10800417 	ldw	r2,16(r2)
811246f8:	1887c83a 	sub	r3,r3,r2
811246fc:	e0bfff17 	ldw	r2,-4(fp)
81124700:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
81124704:	0005883a 	mov	r2,zero
}
81124708:	e037883a 	mov	sp,fp
8112470c:	df000017 	ldw	fp,0(sp)
81124710:	dec00104 	addi	sp,sp,4
81124714:	f800283a 	ret

81124718 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
81124718:	defffc04 	addi	sp,sp,-16
8112471c:	dfc00315 	stw	ra,12(sp)
81124720:	df000215 	stw	fp,8(sp)
81124724:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
81124728:	01430c04 	movi	r5,3120
8112472c:	01204574 	movhi	r4,33045
81124730:	2109d504 	addi	r4,r4,10068
81124734:	112204c0 	call	8112204c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
81124738:	00a04574 	movhi	r2,33045
8112473c:	1089d504 	addi	r2,r2,10068
81124740:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
81124744:	e03fff0d 	sth	zero,-4(fp)
81124748:	00001306 	br	81124798 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
8112474c:	e0bfff0b 	ldhu	r2,-4(fp)
81124750:	10800044 	addi	r2,r2,1
81124754:	10c00d24 	muli	r3,r2,52
81124758:	00a04574 	movhi	r2,33045
8112475c:	1089d504 	addi	r2,r2,10068
81124760:	1887883a 	add	r3,r3,r2
81124764:	e0bffe17 	ldw	r2,-8(fp)
81124768:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
8112476c:	e0bffe17 	ldw	r2,-8(fp)
81124770:	00c00fc4 	movi	r3,63
81124774:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
81124778:	e0bffe17 	ldw	r2,-8(fp)
8112477c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
81124780:	e0bffe17 	ldw	r2,-8(fp)
81124784:	10800d04 	addi	r2,r2,52
81124788:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112478c:	e0bfff0b 	ldhu	r2,-4(fp)
81124790:	10800044 	addi	r2,r2,1
81124794:	e0bfff0d 	sth	r2,-4(fp)
81124798:	e0bfff0b 	ldhu	r2,-4(fp)
8112479c:	10800ef0 	cmpltui	r2,r2,59
811247a0:	103fea1e 	bne	r2,zero,8112474c <__reset+0xfb10474c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
811247a4:	e0bffe17 	ldw	r2,-8(fp)
811247a8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
811247ac:	e0bffe17 	ldw	r2,-8(fp)
811247b0:	00c00fc4 	movi	r3,63
811247b4:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
811247b8:	e0bffe17 	ldw	r2,-8(fp)
811247bc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
811247c0:	00a04574 	movhi	r2,33045
811247c4:	1089d504 	addi	r2,r2,10068
811247c8:	d0a07215 	stw	r2,-32312(gp)
#endif
}
811247cc:	0001883a 	nop
811247d0:	e037883a 	mov	sp,fp
811247d4:	dfc00117 	ldw	ra,4(sp)
811247d8:	df000017 	ldw	fp,0(sp)
811247dc:	dec00204 	addi	sp,sp,8
811247e0:	f800283a 	ret

811247e4 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
811247e4:	defff804 	addi	sp,sp,-32
811247e8:	df000715 	stw	fp,28(sp)
811247ec:	df000704 	addi	fp,sp,28
811247f0:	e13ffe15 	stw	r4,-8(fp)
811247f4:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811247f8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811247fc:	e0bfff17 	ldw	r2,-4(fp)
81124800:	1000021e 	bne	r2,zero,8112480c <OSQAccept+0x28>
        return ((void *)0);
81124804:	0005883a 	mov	r2,zero
81124808:	00004206 	br	81124914 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112480c:	e0bffe17 	ldw	r2,-8(fp)
81124810:	1000051e 	bne	r2,zero,81124828 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
81124814:	e0bfff17 	ldw	r2,-4(fp)
81124818:	00c00104 	movi	r3,4
8112481c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81124820:	0005883a 	mov	r2,zero
81124824:	00003b06 	br	81124914 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
81124828:	e0bffe17 	ldw	r2,-8(fp)
8112482c:	10800003 	ldbu	r2,0(r2)
81124830:	10803fcc 	andi	r2,r2,255
81124834:	108000a0 	cmpeqi	r2,r2,2
81124838:	1000051e 	bne	r2,zero,81124850 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
8112483c:	e0bfff17 	ldw	r2,-4(fp)
81124840:	00c00044 	movi	r3,1
81124844:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81124848:	0005883a 	mov	r2,zero
8112484c:	00003106 	br	81124914 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124850:	0005303a 	rdctl	r2,status
81124854:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124858:	e0fffd17 	ldw	r3,-12(fp)
8112485c:	00bfff84 	movi	r2,-2
81124860:	1884703a 	and	r2,r3,r2
81124864:	1001703a 	wrctl	status,r2
  
  return context;
81124868:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112486c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
81124870:	e0bffe17 	ldw	r2,-8(fp)
81124874:	10800117 	ldw	r2,4(r2)
81124878:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112487c:	e0bffc17 	ldw	r2,-16(fp)
81124880:	1080058b 	ldhu	r2,22(r2)
81124884:	10bfffcc 	andi	r2,r2,65535
81124888:	10001926 	beq	r2,zero,811248f0 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112488c:	e0bffc17 	ldw	r2,-16(fp)
81124890:	10800417 	ldw	r2,16(r2)
81124894:	11000104 	addi	r4,r2,4
81124898:	e0fffc17 	ldw	r3,-16(fp)
8112489c:	19000415 	stw	r4,16(r3)
811248a0:	10800017 	ldw	r2,0(r2)
811248a4:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
811248a8:	e0bffc17 	ldw	r2,-16(fp)
811248ac:	1080058b 	ldhu	r2,22(r2)
811248b0:	10bfffc4 	addi	r2,r2,-1
811248b4:	1007883a 	mov	r3,r2
811248b8:	e0bffc17 	ldw	r2,-16(fp)
811248bc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
811248c0:	e0bffc17 	ldw	r2,-16(fp)
811248c4:	10c00417 	ldw	r3,16(r2)
811248c8:	e0bffc17 	ldw	r2,-16(fp)
811248cc:	10800217 	ldw	r2,8(r2)
811248d0:	1880041e 	bne	r3,r2,811248e4 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
811248d4:	e0bffc17 	ldw	r2,-16(fp)
811248d8:	10c00117 	ldw	r3,4(r2)
811248dc:	e0bffc17 	ldw	r2,-16(fp)
811248e0:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
811248e4:	e0bfff17 	ldw	r2,-4(fp)
811248e8:	10000005 	stb	zero,0(r2)
811248ec:	00000406 	br	81124900 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
811248f0:	e0bfff17 	ldw	r2,-4(fp)
811248f4:	00c007c4 	movi	r3,31
811248f8:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
811248fc:	e03ff915 	stw	zero,-28(fp)
81124900:	e0bffa17 	ldw	r2,-24(fp)
81124904:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124908:	e0bffb17 	ldw	r2,-20(fp)
8112490c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
81124910:	e0bff917 	ldw	r2,-28(fp)
}
81124914:	e037883a 	mov	sp,fp
81124918:	df000017 	ldw	fp,0(sp)
8112491c:	dec00104 	addi	sp,sp,4
81124920:	f800283a 	ret

81124924 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
81124924:	defff404 	addi	sp,sp,-48
81124928:	dfc00b15 	stw	ra,44(sp)
8112492c:	df000a15 	stw	fp,40(sp)
81124930:	df000a04 	addi	fp,sp,40
81124934:	e13ffe15 	stw	r4,-8(fp)
81124938:	2805883a 	mov	r2,r5
8112493c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124940:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
81124944:	d0a07803 	ldbu	r2,-32288(gp)
81124948:	10803fcc 	andi	r2,r2,255
8112494c:	10000226 	beq	r2,zero,81124958 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
81124950:	0005883a 	mov	r2,zero
81124954:	00005906 	br	81124abc <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124958:	0005303a 	rdctl	r2,status
8112495c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124960:	e0fffd17 	ldw	r3,-12(fp)
81124964:	00bfff84 	movi	r2,-2
81124968:	1884703a 	and	r2,r3,r2
8112496c:	1001703a 	wrctl	status,r2
  
  return context;
81124970:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81124974:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
81124978:	d0a07717 	ldw	r2,-32292(gp)
8112497c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
81124980:	d0a07717 	ldw	r2,-32292(gp)
81124984:	10000326 	beq	r2,zero,81124994 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
81124988:	d0a07717 	ldw	r2,-32292(gp)
8112498c:	10800117 	ldw	r2,4(r2)
81124990:	d0a07715 	stw	r2,-32292(gp)
81124994:	e0bff717 	ldw	r2,-36(fp)
81124998:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112499c:	e0bff817 	ldw	r2,-32(fp)
811249a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
811249a4:	e0bff617 	ldw	r2,-40(fp)
811249a8:	10004326 	beq	r2,zero,81124ab8 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811249ac:	0005303a 	rdctl	r2,status
811249b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811249b4:	e0fff917 	ldw	r3,-28(fp)
811249b8:	00bfff84 	movi	r2,-2
811249bc:	1884703a 	and	r2,r3,r2
811249c0:	1001703a 	wrctl	status,r2
  
  return context;
811249c4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
811249c8:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
811249cc:	d0a07417 	ldw	r2,-32304(gp)
811249d0:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
811249d4:	e0bffb17 	ldw	r2,-20(fp)
811249d8:	10002d26 	beq	r2,zero,81124a90 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
811249dc:	d0a07417 	ldw	r2,-32304(gp)
811249e0:	10800017 	ldw	r2,0(r2)
811249e4:	d0a07415 	stw	r2,-32304(gp)
811249e8:	e0bff717 	ldw	r2,-36(fp)
811249ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811249f0:	e0bffa17 	ldw	r2,-24(fp)
811249f4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
811249f8:	e0bffb17 	ldw	r2,-20(fp)
811249fc:	e0fffe17 	ldw	r3,-8(fp)
81124a00:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
81124a04:	e0bfff0b 	ldhu	r2,-4(fp)
81124a08:	1085883a 	add	r2,r2,r2
81124a0c:	1085883a 	add	r2,r2,r2
81124a10:	1007883a 	mov	r3,r2
81124a14:	e0bffe17 	ldw	r2,-8(fp)
81124a18:	10c7883a 	add	r3,r2,r3
81124a1c:	e0bffb17 	ldw	r2,-20(fp)
81124a20:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
81124a24:	e0bffb17 	ldw	r2,-20(fp)
81124a28:	e0fffe17 	ldw	r3,-8(fp)
81124a2c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
81124a30:	e0bffb17 	ldw	r2,-20(fp)
81124a34:	e0fffe17 	ldw	r3,-8(fp)
81124a38:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
81124a3c:	e0bffb17 	ldw	r2,-20(fp)
81124a40:	e0ffff0b 	ldhu	r3,-4(fp)
81124a44:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
81124a48:	e0bffb17 	ldw	r2,-20(fp)
81124a4c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
81124a50:	e0bff617 	ldw	r2,-40(fp)
81124a54:	00c00084 	movi	r3,2
81124a58:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
81124a5c:	e0bff617 	ldw	r2,-40(fp)
81124a60:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
81124a64:	e0bff617 	ldw	r2,-40(fp)
81124a68:	e0fffb17 	ldw	r3,-20(fp)
81124a6c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
81124a70:	e0bff617 	ldw	r2,-40(fp)
81124a74:	00c00fc4 	movi	r3,63
81124a78:	10c003c5 	stb	r3,15(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
81124a7c:	e0bff617 	ldw	r2,-40(fp)
81124a80:	10000405 	stb	zero,16(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
81124a84:	e13ff617 	ldw	r4,-40(fp)
81124a88:	1121c6c0 	call	81121c6c <OS_EventWaitListInit>
81124a8c:	00000a06 	br	81124ab8 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
81124a90:	d0e07717 	ldw	r3,-32292(gp)
81124a94:	e0bff617 	ldw	r2,-40(fp)
81124a98:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
81124a9c:	e0bff617 	ldw	r2,-40(fp)
81124aa0:	d0a07715 	stw	r2,-32292(gp)
81124aa4:	e0bff717 	ldw	r2,-36(fp)
81124aa8:	e0bffc15 	stw	r2,-16(fp)
81124aac:	e0bffc17 	ldw	r2,-16(fp)
81124ab0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
81124ab4:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
81124ab8:	e0bff617 	ldw	r2,-40(fp)
}
81124abc:	e037883a 	mov	sp,fp
81124ac0:	dfc00117 	ldw	ra,4(sp)
81124ac4:	df000017 	ldw	fp,0(sp)
81124ac8:	dec00204 	addi	sp,sp,8
81124acc:	f800283a 	ret

81124ad0 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81124ad0:	defff204 	addi	sp,sp,-56
81124ad4:	dfc00d15 	stw	ra,52(sp)
81124ad8:	df000c15 	stw	fp,48(sp)
81124adc:	df000c04 	addi	fp,sp,48
81124ae0:	e13ffd15 	stw	r4,-12(fp)
81124ae4:	2805883a 	mov	r2,r5
81124ae8:	e1bfff15 	stw	r6,-4(fp)
81124aec:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81124af0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81124af4:	e0bfff17 	ldw	r2,-4(fp)
81124af8:	1000021e 	bne	r2,zero,81124b04 <OSQDel+0x34>
        return (pevent);
81124afc:	e0bffd17 	ldw	r2,-12(fp)
81124b00:	00008e06 	br	81124d3c <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81124b04:	e0bffd17 	ldw	r2,-12(fp)
81124b08:	1000051e 	bne	r2,zero,81124b20 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
81124b0c:	e0bfff17 	ldw	r2,-4(fp)
81124b10:	00c00104 	movi	r3,4
81124b14:	10c00005 	stb	r3,0(r2)
        return (pevent);
81124b18:	e0bffd17 	ldw	r2,-12(fp)
81124b1c:	00008706 	br	81124d3c <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
81124b20:	e0bffd17 	ldw	r2,-12(fp)
81124b24:	10800003 	ldbu	r2,0(r2)
81124b28:	10803fcc 	andi	r2,r2,255
81124b2c:	108000a0 	cmpeqi	r2,r2,2
81124b30:	1000051e 	bne	r2,zero,81124b48 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
81124b34:	e0bfff17 	ldw	r2,-4(fp)
81124b38:	00c00044 	movi	r3,1
81124b3c:	10c00005 	stb	r3,0(r2)
        return (pevent);
81124b40:	e0bffd17 	ldw	r2,-12(fp)
81124b44:	00007d06 	br	81124d3c <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81124b48:	d0a07803 	ldbu	r2,-32288(gp)
81124b4c:	10803fcc 	andi	r2,r2,255
81124b50:	10000526 	beq	r2,zero,81124b68 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
81124b54:	e0bfff17 	ldw	r2,-4(fp)
81124b58:	00c003c4 	movi	r3,15
81124b5c:	10c00005 	stb	r3,0(r2)
        return (pevent);
81124b60:	e0bffd17 	ldw	r2,-12(fp)
81124b64:	00007506 	br	81124d3c <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124b68:	0005303a 	rdctl	r2,status
81124b6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124b70:	e0fffc17 	ldw	r3,-16(fp)
81124b74:	00bfff84 	movi	r2,-2
81124b78:	1884703a 	and	r2,r3,r2
81124b7c:	1001703a 	wrctl	status,r2
  
  return context;
81124b80:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81124b84:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
81124b88:	e0bffd17 	ldw	r2,-12(fp)
81124b8c:	10800283 	ldbu	r2,10(r2)
81124b90:	10803fcc 	andi	r2,r2,255
81124b94:	10000326 	beq	r2,zero,81124ba4 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81124b98:	00800044 	movi	r2,1
81124b9c:	e0bff405 	stb	r2,-48(fp)
81124ba0:	00000106 	br	81124ba8 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81124ba4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
81124ba8:	e0bffe03 	ldbu	r2,-8(fp)
81124bac:	10000326 	beq	r2,zero,81124bbc <OSQDel+0xec>
81124bb0:	10800060 	cmpeqi	r2,r2,1
81124bb4:	1000301e 	bne	r2,zero,81124c78 <OSQDel+0x1a8>
81124bb8:	00005506 	br	81124d10 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
81124bbc:	e0bff403 	ldbu	r2,-48(fp)
81124bc0:	10001e1e 	bne	r2,zero,81124c3c <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
81124bc4:	e0bffd17 	ldw	r2,-12(fp)
81124bc8:	00c00fc4 	movi	r3,63
81124bcc:	10c003c5 	stb	r3,15(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
81124bd0:	e0bffd17 	ldw	r2,-12(fp)
81124bd4:	10000405 	stb	zero,16(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
81124bd8:	e0bffd17 	ldw	r2,-12(fp)
81124bdc:	10800117 	ldw	r2,4(r2)
81124be0:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
81124be4:	d0e07417 	ldw	r3,-32304(gp)
81124be8:	e0bff817 	ldw	r2,-32(fp)
81124bec:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
81124bf0:	e0bff817 	ldw	r2,-32(fp)
81124bf4:	d0a07415 	stw	r2,-32304(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81124bf8:	e0bffd17 	ldw	r2,-12(fp)
81124bfc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
81124c00:	d0e07717 	ldw	r3,-32292(gp)
81124c04:	e0bffd17 	ldw	r2,-12(fp)
81124c08:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
81124c0c:	e0bffd17 	ldw	r2,-12(fp)
81124c10:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
81124c14:	e0bffd17 	ldw	r2,-12(fp)
81124c18:	d0a07715 	stw	r2,-32292(gp)
81124c1c:	e0bff617 	ldw	r2,-40(fp)
81124c20:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124c24:	e0bff717 	ldw	r2,-36(fp)
81124c28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
81124c2c:	e0bfff17 	ldw	r2,-4(fp)
81124c30:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
81124c34:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
81124c38:	00003f06 	br	81124d38 <OSQDel+0x268>
81124c3c:	e0bff617 	ldw	r2,-40(fp)
81124c40:	e0bff915 	stw	r2,-28(fp)
81124c44:	e0bff917 	ldw	r2,-28(fp)
81124c48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
81124c4c:	e0bfff17 	ldw	r2,-4(fp)
81124c50:	00c01244 	movi	r3,73
81124c54:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
81124c58:	e0bffd17 	ldw	r2,-12(fp)
81124c5c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
81124c60:	00003506 	br	81124d38 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
81124c64:	000f883a 	mov	r7,zero
81124c68:	01800104 	movi	r6,4
81124c6c:	000b883a 	mov	r5,zero
81124c70:	e13ffd17 	ldw	r4,-12(fp)
81124c74:	11216bc0 	call	811216bc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
81124c78:	e0bffd17 	ldw	r2,-12(fp)
81124c7c:	10800283 	ldbu	r2,10(r2)
81124c80:	10803fcc 	andi	r2,r2,255
81124c84:	103ff71e 	bne	r2,zero,81124c64 <__reset+0xfb104c64>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
81124c88:	e0bffd17 	ldw	r2,-12(fp)
81124c8c:	00c00fc4 	movi	r3,63
81124c90:	10c003c5 	stb	r3,15(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81124c94:	e0bffd17 	ldw	r2,-12(fp)
81124c98:	10000405 	stb	zero,16(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
81124c9c:	e0bffd17 	ldw	r2,-12(fp)
81124ca0:	10800117 	ldw	r2,4(r2)
81124ca4:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
81124ca8:	d0e07417 	ldw	r3,-32304(gp)
81124cac:	e0bff817 	ldw	r2,-32(fp)
81124cb0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
81124cb4:	e0bff817 	ldw	r2,-32(fp)
81124cb8:	d0a07415 	stw	r2,-32304(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81124cbc:	e0bffd17 	ldw	r2,-12(fp)
81124cc0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
81124cc4:	d0e07717 	ldw	r3,-32292(gp)
81124cc8:	e0bffd17 	ldw	r2,-12(fp)
81124ccc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
81124cd0:	e0bffd17 	ldw	r2,-12(fp)
81124cd4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
81124cd8:	e0bffd17 	ldw	r2,-12(fp)
81124cdc:	d0a07715 	stw	r2,-32292(gp)
81124ce0:	e0bff617 	ldw	r2,-40(fp)
81124ce4:	e0bffa15 	stw	r2,-24(fp)
81124ce8:	e0bffa17 	ldw	r2,-24(fp)
81124cec:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81124cf0:	e0bff403 	ldbu	r2,-48(fp)
81124cf4:	10800058 	cmpnei	r2,r2,1
81124cf8:	1000011e 	bne	r2,zero,81124d00 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81124cfc:	11221080 	call	81122108 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
81124d00:	e0bfff17 	ldw	r2,-4(fp)
81124d04:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
81124d08:	e03ff515 	stw	zero,-44(fp)
             break;
81124d0c:	00000a06 	br	81124d38 <OSQDel+0x268>
81124d10:	e0bff617 	ldw	r2,-40(fp)
81124d14:	e0bffb15 	stw	r2,-20(fp)
81124d18:	e0bffb17 	ldw	r2,-20(fp)
81124d1c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
81124d20:	e0bfff17 	ldw	r2,-4(fp)
81124d24:	00c001c4 	movi	r3,7
81124d28:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
81124d2c:	e0bffd17 	ldw	r2,-12(fp)
81124d30:	e0bff515 	stw	r2,-44(fp)
             break;
81124d34:	0001883a 	nop
    }
    return (pevent_return);
81124d38:	e0bff517 	ldw	r2,-44(fp)
}
81124d3c:	e037883a 	mov	sp,fp
81124d40:	dfc00117 	ldw	ra,4(sp)
81124d44:	df000017 	ldw	fp,0(sp)
81124d48:	dec00204 	addi	sp,sp,8
81124d4c:	f800283a 	ret

81124d50 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
81124d50:	defffa04 	addi	sp,sp,-24
81124d54:	df000515 	stw	fp,20(sp)
81124d58:	df000504 	addi	fp,sp,20
81124d5c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81124d60:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81124d64:	e0bfff17 	ldw	r2,-4(fp)
81124d68:	1000021e 	bne	r2,zero,81124d74 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
81124d6c:	00800104 	movi	r2,4
81124d70:	00002106 	br	81124df8 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
81124d74:	e0bfff17 	ldw	r2,-4(fp)
81124d78:	10800003 	ldbu	r2,0(r2)
81124d7c:	10803fcc 	andi	r2,r2,255
81124d80:	108000a0 	cmpeqi	r2,r2,2
81124d84:	1000021e 	bne	r2,zero,81124d90 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
81124d88:	00800044 	movi	r2,1
81124d8c:	00001a06 	br	81124df8 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124d90:	0005303a 	rdctl	r2,status
81124d94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124d98:	e0fffd17 	ldw	r3,-12(fp)
81124d9c:	00bfff84 	movi	r2,-2
81124da0:	1884703a 	and	r2,r3,r2
81124da4:	1001703a 	wrctl	status,r2
  
  return context;
81124da8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81124dac:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
81124db0:	e0bfff17 	ldw	r2,-4(fp)
81124db4:	10800117 	ldw	r2,4(r2)
81124db8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
81124dbc:	e0bffc17 	ldw	r2,-16(fp)
81124dc0:	10c00117 	ldw	r3,4(r2)
81124dc4:	e0bffc17 	ldw	r2,-16(fp)
81124dc8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
81124dcc:	e0bffc17 	ldw	r2,-16(fp)
81124dd0:	10c00117 	ldw	r3,4(r2)
81124dd4:	e0bffc17 	ldw	r2,-16(fp)
81124dd8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
81124ddc:	e0bffc17 	ldw	r2,-16(fp)
81124de0:	1000058d 	sth	zero,22(r2)
81124de4:	e0bffb17 	ldw	r2,-20(fp)
81124de8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124dec:	e0bffe17 	ldw	r2,-8(fp)
81124df0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81124df4:	0005883a 	mov	r2,zero
}
81124df8:	e037883a 	mov	sp,fp
81124dfc:	df000017 	ldw	fp,0(sp)
81124e00:	dec00104 	addi	sp,sp,4
81124e04:	f800283a 	ret

81124e08 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81124e08:	defff304 	addi	sp,sp,-52
81124e0c:	dfc00c15 	stw	ra,48(sp)
81124e10:	df000b15 	stw	fp,44(sp)
81124e14:	df000b04 	addi	fp,sp,44
81124e18:	e13ffd15 	stw	r4,-12(fp)
81124e1c:	2805883a 	mov	r2,r5
81124e20:	e1bfff15 	stw	r6,-4(fp)
81124e24:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124e28:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81124e2c:	e0bfff17 	ldw	r2,-4(fp)
81124e30:	1000021e 	bne	r2,zero,81124e3c <OSQPend+0x34>
        return ((void *)0);
81124e34:	0005883a 	mov	r2,zero
81124e38:	00009106 	br	81125080 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
81124e3c:	e0bffd17 	ldw	r2,-12(fp)
81124e40:	1000051e 	bne	r2,zero,81124e58 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
81124e44:	e0bfff17 	ldw	r2,-4(fp)
81124e48:	00c00104 	movi	r3,4
81124e4c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81124e50:	0005883a 	mov	r2,zero
81124e54:	00008a06 	br	81125080 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
81124e58:	e0bffd17 	ldw	r2,-12(fp)
81124e5c:	10800003 	ldbu	r2,0(r2)
81124e60:	10803fcc 	andi	r2,r2,255
81124e64:	108000a0 	cmpeqi	r2,r2,2
81124e68:	1000051e 	bne	r2,zero,81124e80 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
81124e6c:	e0bfff17 	ldw	r2,-4(fp)
81124e70:	00c00044 	movi	r3,1
81124e74:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81124e78:	0005883a 	mov	r2,zero
81124e7c:	00008006 	br	81125080 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
81124e80:	d0a07803 	ldbu	r2,-32288(gp)
81124e84:	10803fcc 	andi	r2,r2,255
81124e88:	10000526 	beq	r2,zero,81124ea0 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
81124e8c:	e0bfff17 	ldw	r2,-4(fp)
81124e90:	00c00084 	movi	r3,2
81124e94:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81124e98:	0005883a 	mov	r2,zero
81124e9c:	00007806 	br	81125080 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
81124ea0:	d0a06903 	ldbu	r2,-32348(gp)
81124ea4:	10803fcc 	andi	r2,r2,255
81124ea8:	10000526 	beq	r2,zero,81124ec0 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
81124eac:	e0bfff17 	ldw	r2,-4(fp)
81124eb0:	00c00344 	movi	r3,13
81124eb4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81124eb8:	0005883a 	mov	r2,zero
81124ebc:	00007006 	br	81125080 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124ec0:	0005303a 	rdctl	r2,status
81124ec4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124ec8:	e0fffc17 	ldw	r3,-16(fp)
81124ecc:	00bfff84 	movi	r2,-2
81124ed0:	1884703a 	and	r2,r3,r2
81124ed4:	1001703a 	wrctl	status,r2
  
  return context;
81124ed8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81124edc:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
81124ee0:	e0bffd17 	ldw	r2,-12(fp)
81124ee4:	10800117 	ldw	r2,4(r2)
81124ee8:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
81124eec:	e0bff817 	ldw	r2,-32(fp)
81124ef0:	1080058b 	ldhu	r2,22(r2)
81124ef4:	10bfffcc 	andi	r2,r2,65535
81124ef8:	10001e26 	beq	r2,zero,81124f74 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
81124efc:	e0bff817 	ldw	r2,-32(fp)
81124f00:	10800417 	ldw	r2,16(r2)
81124f04:	11000104 	addi	r4,r2,4
81124f08:	e0fff817 	ldw	r3,-32(fp)
81124f0c:	19000415 	stw	r4,16(r3)
81124f10:	10800017 	ldw	r2,0(r2)
81124f14:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
81124f18:	e0bff817 	ldw	r2,-32(fp)
81124f1c:	1080058b 	ldhu	r2,22(r2)
81124f20:	10bfffc4 	addi	r2,r2,-1
81124f24:	1007883a 	mov	r3,r2
81124f28:	e0bff817 	ldw	r2,-32(fp)
81124f2c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
81124f30:	e0bff817 	ldw	r2,-32(fp)
81124f34:	10c00417 	ldw	r3,16(r2)
81124f38:	e0bff817 	ldw	r2,-32(fp)
81124f3c:	10800217 	ldw	r2,8(r2)
81124f40:	1880041e 	bne	r3,r2,81124f54 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
81124f44:	e0bff817 	ldw	r2,-32(fp)
81124f48:	10c00117 	ldw	r3,4(r2)
81124f4c:	e0bff817 	ldw	r2,-32(fp)
81124f50:	10c00415 	stw	r3,16(r2)
81124f54:	e0bff617 	ldw	r2,-40(fp)
81124f58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124f5c:	e0bff717 	ldw	r2,-36(fp)
81124f60:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
81124f64:	e0bfff17 	ldw	r2,-4(fp)
81124f68:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
81124f6c:	e0bff517 	ldw	r2,-44(fp)
81124f70:	00004306 	br	81125080 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
81124f74:	d0a07917 	ldw	r2,-32284(gp)
81124f78:	d0e07917 	ldw	r3,-32284(gp)
81124f7c:	18c00c03 	ldbu	r3,48(r3)
81124f80:	18c00114 	ori	r3,r3,4
81124f84:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81124f88:	d0a07917 	ldw	r2,-32284(gp)
81124f8c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
81124f90:	d0a07917 	ldw	r2,-32284(gp)
81124f94:	e0fffe0b 	ldhu	r3,-8(fp)
81124f98:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
81124f9c:	e13ffd17 	ldw	r4,-12(fp)
81124fa0:	11218540 	call	81121854 <OS_EventTaskWait>
81124fa4:	e0bff617 	ldw	r2,-40(fp)
81124fa8:	e0bffb15 	stw	r2,-20(fp)
81124fac:	e0bffb17 	ldw	r2,-20(fp)
81124fb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
81124fb4:	11221080 	call	81122108 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124fb8:	0005303a 	rdctl	r2,status
81124fbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124fc0:	e0fff917 	ldw	r3,-28(fp)
81124fc4:	00bfff84 	movi	r2,-2
81124fc8:	1884703a 	and	r2,r3,r2
81124fcc:	1001703a 	wrctl	status,r2
  
  return context;
81124fd0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
81124fd4:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81124fd8:	d0a07917 	ldw	r2,-32284(gp)
81124fdc:	10800c43 	ldbu	r2,49(r2)
81124fe0:	10803fcc 	andi	r2,r2,255
81124fe4:	10000326 	beq	r2,zero,81124ff4 <OSQPend+0x1ec>
81124fe8:	108000a0 	cmpeqi	r2,r2,2
81124fec:	1000071e 	bne	r2,zero,8112500c <OSQPend+0x204>
81124ff0:	00000b06 	br	81125020 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
81124ff4:	d0a07917 	ldw	r2,-32284(gp)
81124ff8:	10800917 	ldw	r2,36(r2)
81124ffc:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
81125000:	e0bfff17 	ldw	r2,-4(fp)
81125004:	10000005 	stb	zero,0(r2)
             break;
81125008:	00000e06 	br	81125044 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
8112500c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
81125010:	e0bfff17 	ldw	r2,-4(fp)
81125014:	00c00384 	movi	r3,14
81125018:	10c00005 	stb	r3,0(r2)
             break;
8112501c:	00000906 	br	81125044 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
81125020:	d0a07917 	ldw	r2,-32284(gp)
81125024:	e17ffd17 	ldw	r5,-12(fp)
81125028:	1009883a 	mov	r4,r2
8112502c:	1121ab40 	call	81121ab4 <OS_EventTaskRemove>
             pmsg = (void *)0;
81125030:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
81125034:	e0bfff17 	ldw	r2,-4(fp)
81125038:	00c00284 	movi	r3,10
8112503c:	10c00005 	stb	r3,0(r2)
             break;
81125040:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
81125044:	d0a07917 	ldw	r2,-32284(gp)
81125048:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112504c:	d0a07917 	ldw	r2,-32284(gp)
81125050:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
81125054:	d0a07917 	ldw	r2,-32284(gp)
81125058:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112505c:	d0a07917 	ldw	r2,-32284(gp)
81125060:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
81125064:	d0a07917 	ldw	r2,-32284(gp)
81125068:	10000915 	stw	zero,36(r2)
8112506c:	e0bff617 	ldw	r2,-40(fp)
81125070:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125074:	e0bffa17 	ldw	r2,-24(fp)
81125078:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
8112507c:	e0bff517 	ldw	r2,-44(fp)
}
81125080:	e037883a 	mov	sp,fp
81125084:	dfc00117 	ldw	ra,4(sp)
81125088:	df000017 	ldw	fp,0(sp)
8112508c:	dec00204 	addi	sp,sp,8
81125090:	f800283a 	ret

81125094 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81125094:	defff604 	addi	sp,sp,-40
81125098:	dfc00915 	stw	ra,36(sp)
8112509c:	df000815 	stw	fp,32(sp)
811250a0:	df000804 	addi	fp,sp,32
811250a4:	e13ffd15 	stw	r4,-12(fp)
811250a8:	2805883a 	mov	r2,r5
811250ac:	e1bfff15 	stw	r6,-4(fp)
811250b0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
811250b4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
811250b8:	e0bfff17 	ldw	r2,-4(fp)
811250bc:	1000021e 	bne	r2,zero,811250c8 <OSQPendAbort+0x34>
        return (0);
811250c0:	0005883a 	mov	r2,zero
811250c4:	00004906 	br	811251ec <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
811250c8:	e0bffd17 	ldw	r2,-12(fp)
811250cc:	1000051e 	bne	r2,zero,811250e4 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
811250d0:	e0bfff17 	ldw	r2,-4(fp)
811250d4:	00c00104 	movi	r3,4
811250d8:	10c00005 	stb	r3,0(r2)
        return (0);
811250dc:	0005883a 	mov	r2,zero
811250e0:	00004206 	br	811251ec <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
811250e4:	e0bffd17 	ldw	r2,-12(fp)
811250e8:	10800003 	ldbu	r2,0(r2)
811250ec:	10803fcc 	andi	r2,r2,255
811250f0:	108000a0 	cmpeqi	r2,r2,2
811250f4:	1000051e 	bne	r2,zero,8112510c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
811250f8:	e0bfff17 	ldw	r2,-4(fp)
811250fc:	00c00044 	movi	r3,1
81125100:	10c00005 	stb	r3,0(r2)
        return (0);
81125104:	0005883a 	mov	r2,zero
81125108:	00003806 	br	811251ec <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112510c:	0005303a 	rdctl	r2,status
81125110:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125114:	e0fffc17 	ldw	r3,-16(fp)
81125118:	00bfff84 	movi	r2,-2
8112511c:	1884703a 	and	r2,r3,r2
81125120:	1001703a 	wrctl	status,r2
  
  return context;
81125124:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81125128:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
8112512c:	e0bffd17 	ldw	r2,-12(fp)
81125130:	10800283 	ldbu	r2,10(r2)
81125134:	10803fcc 	andi	r2,r2,255
81125138:	10002526 	beq	r2,zero,811251d0 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
8112513c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
81125140:	e0bffe03 	ldbu	r2,-8(fp)
81125144:	10800060 	cmpeqi	r2,r2,1
81125148:	10000e26 	beq	r2,zero,81125184 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112514c:	00000806 	br	81125170 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
81125150:	01c00084 	movi	r7,2
81125154:	01800104 	movi	r6,4
81125158:	000b883a 	mov	r5,zero
8112515c:	e13ffd17 	ldw	r4,-12(fp)
81125160:	11216bc0 	call	811216bc <OS_EventTaskRdy>
                     nbr_tasks++;
81125164:	e0bff803 	ldbu	r2,-32(fp)
81125168:	10800044 	addi	r2,r2,1
8112516c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
81125170:	e0bffd17 	ldw	r2,-12(fp)
81125174:	10800283 	ldbu	r2,10(r2)
81125178:	10803fcc 	andi	r2,r2,255
8112517c:	103ff41e 	bne	r2,zero,81125150 <__reset+0xfb105150>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
81125180:	00000906 	br	811251a8 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
81125184:	01c00084 	movi	r7,2
81125188:	01800104 	movi	r6,4
8112518c:	000b883a 	mov	r5,zero
81125190:	e13ffd17 	ldw	r4,-12(fp)
81125194:	11216bc0 	call	811216bc <OS_EventTaskRdy>
                 nbr_tasks++;
81125198:	e0bff803 	ldbu	r2,-32(fp)
8112519c:	10800044 	addi	r2,r2,1
811251a0:	e0bff805 	stb	r2,-32(fp)
                 break;
811251a4:	0001883a 	nop
811251a8:	e0bff917 	ldw	r2,-28(fp)
811251ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811251b0:	e0bffa17 	ldw	r2,-24(fp)
811251b4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
811251b8:	11221080 	call	81122108 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
811251bc:	e0bfff17 	ldw	r2,-4(fp)
811251c0:	00c00384 	movi	r3,14
811251c4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
811251c8:	e0bff803 	ldbu	r2,-32(fp)
811251cc:	00000706 	br	811251ec <OSQPendAbort+0x158>
811251d0:	e0bff917 	ldw	r2,-28(fp)
811251d4:	e0bffb15 	stw	r2,-20(fp)
811251d8:	e0bffb17 	ldw	r2,-20(fp)
811251dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811251e0:	e0bfff17 	ldw	r2,-4(fp)
811251e4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
811251e8:	0005883a 	mov	r2,zero
}
811251ec:	e037883a 	mov	sp,fp
811251f0:	dfc00117 	ldw	ra,4(sp)
811251f4:	df000017 	ldw	fp,0(sp)
811251f8:	dec00204 	addi	sp,sp,8
811251fc:	f800283a 	ret

81125200 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
81125200:	defff604 	addi	sp,sp,-40
81125204:	dfc00915 	stw	ra,36(sp)
81125208:	df000815 	stw	fp,32(sp)
8112520c:	df000804 	addi	fp,sp,32
81125210:	e13ffe15 	stw	r4,-8(fp)
81125214:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81125218:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112521c:	e0bffe17 	ldw	r2,-8(fp)
81125220:	1000021e 	bne	r2,zero,8112522c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
81125224:	00800104 	movi	r2,4
81125228:	00004a06 	br	81125354 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112522c:	e0bffe17 	ldw	r2,-8(fp)
81125230:	10800003 	ldbu	r2,0(r2)
81125234:	10803fcc 	andi	r2,r2,255
81125238:	108000a0 	cmpeqi	r2,r2,2
8112523c:	1000021e 	bne	r2,zero,81125248 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
81125240:	00800044 	movi	r2,1
81125244:	00004306 	br	81125354 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125248:	0005303a 	rdctl	r2,status
8112524c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125250:	e0fffd17 	ldw	r3,-12(fp)
81125254:	00bfff84 	movi	r2,-2
81125258:	1884703a 	and	r2,r3,r2
8112525c:	1001703a 	wrctl	status,r2
  
  return context;
81125260:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81125264:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
81125268:	e0bffe17 	ldw	r2,-8(fp)
8112526c:	10800283 	ldbu	r2,10(r2)
81125270:	10803fcc 	andi	r2,r2,255
81125274:	10000c26 	beq	r2,zero,811252a8 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81125278:	000f883a 	mov	r7,zero
8112527c:	01800104 	movi	r6,4
81125280:	e17fff17 	ldw	r5,-4(fp)
81125284:	e13ffe17 	ldw	r4,-8(fp)
81125288:	11216bc0 	call	811216bc <OS_EventTaskRdy>
8112528c:	e0bff817 	ldw	r2,-32(fp)
81125290:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125294:	e0bff917 	ldw	r2,-28(fp)
81125298:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
8112529c:	11221080 	call	81122108 <OS_Sched>
        return (OS_ERR_NONE);
811252a0:	0005883a 	mov	r2,zero
811252a4:	00002b06 	br	81125354 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
811252a8:	e0bffe17 	ldw	r2,-8(fp)
811252ac:	10800117 	ldw	r2,4(r2)
811252b0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
811252b4:	e0bffb17 	ldw	r2,-20(fp)
811252b8:	10c0058b 	ldhu	r3,22(r2)
811252bc:	e0bffb17 	ldw	r2,-20(fp)
811252c0:	1080050b 	ldhu	r2,20(r2)
811252c4:	18ffffcc 	andi	r3,r3,65535
811252c8:	10bfffcc 	andi	r2,r2,65535
811252cc:	18800636 	bltu	r3,r2,811252e8 <OSQPost+0xe8>
811252d0:	e0bff817 	ldw	r2,-32(fp)
811252d4:	e0bffa15 	stw	r2,-24(fp)
811252d8:	e0bffa17 	ldw	r2,-24(fp)
811252dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
811252e0:	00800784 	movi	r2,30
811252e4:	00001b06 	br	81125354 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
811252e8:	e0bffb17 	ldw	r2,-20(fp)
811252ec:	10800317 	ldw	r2,12(r2)
811252f0:	11000104 	addi	r4,r2,4
811252f4:	e0fffb17 	ldw	r3,-20(fp)
811252f8:	19000315 	stw	r4,12(r3)
811252fc:	e0ffff17 	ldw	r3,-4(fp)
81125300:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
81125304:	e0bffb17 	ldw	r2,-20(fp)
81125308:	1080058b 	ldhu	r2,22(r2)
8112530c:	10800044 	addi	r2,r2,1
81125310:	1007883a 	mov	r3,r2
81125314:	e0bffb17 	ldw	r2,-20(fp)
81125318:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
8112531c:	e0bffb17 	ldw	r2,-20(fp)
81125320:	10c00317 	ldw	r3,12(r2)
81125324:	e0bffb17 	ldw	r2,-20(fp)
81125328:	10800217 	ldw	r2,8(r2)
8112532c:	1880041e 	bne	r3,r2,81125340 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
81125330:	e0bffb17 	ldw	r2,-20(fp)
81125334:	10c00117 	ldw	r3,4(r2)
81125338:	e0bffb17 	ldw	r2,-20(fp)
8112533c:	10c00315 	stw	r3,12(r2)
81125340:	e0bff817 	ldw	r2,-32(fp)
81125344:	e0bffc15 	stw	r2,-16(fp)
81125348:	e0bffc17 	ldw	r2,-16(fp)
8112534c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81125350:	0005883a 	mov	r2,zero
}
81125354:	e037883a 	mov	sp,fp
81125358:	dfc00117 	ldw	ra,4(sp)
8112535c:	df000017 	ldw	fp,0(sp)
81125360:	dec00204 	addi	sp,sp,8
81125364:	f800283a 	ret

81125368 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
81125368:	defff604 	addi	sp,sp,-40
8112536c:	dfc00915 	stw	ra,36(sp)
81125370:	df000815 	stw	fp,32(sp)
81125374:	df000804 	addi	fp,sp,32
81125378:	e13ffe15 	stw	r4,-8(fp)
8112537c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81125380:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81125384:	e0bffe17 	ldw	r2,-8(fp)
81125388:	1000021e 	bne	r2,zero,81125394 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
8112538c:	00800104 	movi	r2,4
81125390:	00004c06 	br	811254c4 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
81125394:	e0bffe17 	ldw	r2,-8(fp)
81125398:	10800003 	ldbu	r2,0(r2)
8112539c:	10803fcc 	andi	r2,r2,255
811253a0:	108000a0 	cmpeqi	r2,r2,2
811253a4:	1000021e 	bne	r2,zero,811253b0 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
811253a8:	00800044 	movi	r2,1
811253ac:	00004506 	br	811254c4 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811253b0:	0005303a 	rdctl	r2,status
811253b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811253b8:	e0fffd17 	ldw	r3,-12(fp)
811253bc:	00bfff84 	movi	r2,-2
811253c0:	1884703a 	and	r2,r3,r2
811253c4:	1001703a 	wrctl	status,r2
  
  return context;
811253c8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811253cc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
811253d0:	e0bffe17 	ldw	r2,-8(fp)
811253d4:	10800283 	ldbu	r2,10(r2)
811253d8:	10803fcc 	andi	r2,r2,255
811253dc:	10000c26 	beq	r2,zero,81125410 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
811253e0:	000f883a 	mov	r7,zero
811253e4:	01800104 	movi	r6,4
811253e8:	e17fff17 	ldw	r5,-4(fp)
811253ec:	e13ffe17 	ldw	r4,-8(fp)
811253f0:	11216bc0 	call	811216bc <OS_EventTaskRdy>
811253f4:	e0bff817 	ldw	r2,-32(fp)
811253f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811253fc:	e0bff917 	ldw	r2,-28(fp)
81125400:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
81125404:	11221080 	call	81122108 <OS_Sched>
        return (OS_ERR_NONE);
81125408:	0005883a 	mov	r2,zero
8112540c:	00002d06 	br	811254c4 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
81125410:	e0bffe17 	ldw	r2,-8(fp)
81125414:	10800117 	ldw	r2,4(r2)
81125418:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112541c:	e0bffb17 	ldw	r2,-20(fp)
81125420:	10c0058b 	ldhu	r3,22(r2)
81125424:	e0bffb17 	ldw	r2,-20(fp)
81125428:	1080050b 	ldhu	r2,20(r2)
8112542c:	18ffffcc 	andi	r3,r3,65535
81125430:	10bfffcc 	andi	r2,r2,65535
81125434:	18800636 	bltu	r3,r2,81125450 <OSQPostFront+0xe8>
81125438:	e0bff817 	ldw	r2,-32(fp)
8112543c:	e0bffa15 	stw	r2,-24(fp)
81125440:	e0bffa17 	ldw	r2,-24(fp)
81125444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
81125448:	00800784 	movi	r2,30
8112544c:	00001d06 	br	811254c4 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
81125450:	e0bffb17 	ldw	r2,-20(fp)
81125454:	10c00417 	ldw	r3,16(r2)
81125458:	e0bffb17 	ldw	r2,-20(fp)
8112545c:	10800117 	ldw	r2,4(r2)
81125460:	1880041e 	bne	r3,r2,81125474 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
81125464:	e0bffb17 	ldw	r2,-20(fp)
81125468:	10c00217 	ldw	r3,8(r2)
8112546c:	e0bffb17 	ldw	r2,-20(fp)
81125470:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
81125474:	e0bffb17 	ldw	r2,-20(fp)
81125478:	10800417 	ldw	r2,16(r2)
8112547c:	10ffff04 	addi	r3,r2,-4
81125480:	e0bffb17 	ldw	r2,-20(fp)
81125484:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
81125488:	e0bffb17 	ldw	r2,-20(fp)
8112548c:	10800417 	ldw	r2,16(r2)
81125490:	e0ffff17 	ldw	r3,-4(fp)
81125494:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
81125498:	e0bffb17 	ldw	r2,-20(fp)
8112549c:	1080058b 	ldhu	r2,22(r2)
811254a0:	10800044 	addi	r2,r2,1
811254a4:	1007883a 	mov	r3,r2
811254a8:	e0bffb17 	ldw	r2,-20(fp)
811254ac:	10c0058d 	sth	r3,22(r2)
811254b0:	e0bff817 	ldw	r2,-32(fp)
811254b4:	e0bffc15 	stw	r2,-16(fp)
811254b8:	e0bffc17 	ldw	r2,-16(fp)
811254bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
811254c0:	0005883a 	mov	r2,zero
}
811254c4:	e037883a 	mov	sp,fp
811254c8:	dfc00117 	ldw	ra,4(sp)
811254cc:	df000017 	ldw	fp,0(sp)
811254d0:	dec00204 	addi	sp,sp,8
811254d4:	f800283a 	ret

811254d8 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
811254d8:	defff504 	addi	sp,sp,-44
811254dc:	dfc00a15 	stw	ra,40(sp)
811254e0:	df000915 	stw	fp,36(sp)
811254e4:	df000904 	addi	fp,sp,36
811254e8:	e13ffd15 	stw	r4,-12(fp)
811254ec:	e17ffe15 	stw	r5,-8(fp)
811254f0:	3005883a 	mov	r2,r6
811254f4:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811254f8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
811254fc:	e0bffd17 	ldw	r2,-12(fp)
81125500:	1000021e 	bne	r2,zero,8112550c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
81125504:	00800104 	movi	r2,4
81125508:	00007106 	br	811256d0 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112550c:	e0bffd17 	ldw	r2,-12(fp)
81125510:	10800003 	ldbu	r2,0(r2)
81125514:	10803fcc 	andi	r2,r2,255
81125518:	108000a0 	cmpeqi	r2,r2,2
8112551c:	1000021e 	bne	r2,zero,81125528 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
81125520:	00800044 	movi	r2,1
81125524:	00006a06 	br	811256d0 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125528:	0005303a 	rdctl	r2,status
8112552c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125530:	e0fffc17 	ldw	r3,-16(fp)
81125534:	00bfff84 	movi	r2,-2
81125538:	1884703a 	and	r2,r3,r2
8112553c:	1001703a 	wrctl	status,r2
  
  return context;
81125540:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81125544:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
81125548:	e0bffd17 	ldw	r2,-12(fp)
8112554c:	10800283 	ldbu	r2,10(r2)
81125550:	10803fcc 	andi	r2,r2,255
81125554:	10001d26 	beq	r2,zero,811255cc <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
81125558:	e0bfff03 	ldbu	r2,-4(fp)
8112555c:	1080004c 	andi	r2,r2,1
81125560:	10000b26 	beq	r2,zero,81125590 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
81125564:	00000506 	br	8112557c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81125568:	000f883a 	mov	r7,zero
8112556c:	01800104 	movi	r6,4
81125570:	e17ffe17 	ldw	r5,-8(fp)
81125574:	e13ffd17 	ldw	r4,-12(fp)
81125578:	11216bc0 	call	811216bc <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112557c:	e0bffd17 	ldw	r2,-12(fp)
81125580:	10800283 	ldbu	r2,10(r2)
81125584:	10803fcc 	andi	r2,r2,255
81125588:	103ff71e 	bne	r2,zero,81125568 <__reset+0xfb105568>
8112558c:	00000506 	br	811255a4 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81125590:	000f883a 	mov	r7,zero
81125594:	01800104 	movi	r6,4
81125598:	e17ffe17 	ldw	r5,-8(fp)
8112559c:	e13ffd17 	ldw	r4,-12(fp)
811255a0:	11216bc0 	call	811216bc <OS_EventTaskRdy>
811255a4:	e0bff717 	ldw	r2,-36(fp)
811255a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811255ac:	e0bff817 	ldw	r2,-32(fp)
811255b0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
811255b4:	e0bfff03 	ldbu	r2,-4(fp)
811255b8:	1080010c 	andi	r2,r2,4
811255bc:	1000011e 	bne	r2,zero,811255c4 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
811255c0:	11221080 	call	81122108 <OS_Sched>
        }
        return (OS_ERR_NONE);
811255c4:	0005883a 	mov	r2,zero
811255c8:	00004106 	br	811256d0 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
811255cc:	e0bffd17 	ldw	r2,-12(fp)
811255d0:	10800117 	ldw	r2,4(r2)
811255d4:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
811255d8:	e0bffa17 	ldw	r2,-24(fp)
811255dc:	10c0058b 	ldhu	r3,22(r2)
811255e0:	e0bffa17 	ldw	r2,-24(fp)
811255e4:	1080050b 	ldhu	r2,20(r2)
811255e8:	18ffffcc 	andi	r3,r3,65535
811255ec:	10bfffcc 	andi	r2,r2,65535
811255f0:	18800636 	bltu	r3,r2,8112560c <OSQPostOpt+0x134>
811255f4:	e0bff717 	ldw	r2,-36(fp)
811255f8:	e0bff915 	stw	r2,-28(fp)
811255fc:	e0bff917 	ldw	r2,-28(fp)
81125600:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
81125604:	00800784 	movi	r2,30
81125608:	00003106 	br	811256d0 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
8112560c:	e0bfff03 	ldbu	r2,-4(fp)
81125610:	1080008c 	andi	r2,r2,2
81125614:	10001326 	beq	r2,zero,81125664 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
81125618:	e0bffa17 	ldw	r2,-24(fp)
8112561c:	10c00417 	ldw	r3,16(r2)
81125620:	e0bffa17 	ldw	r2,-24(fp)
81125624:	10800117 	ldw	r2,4(r2)
81125628:	1880041e 	bne	r3,r2,8112563c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
8112562c:	e0bffa17 	ldw	r2,-24(fp)
81125630:	10c00217 	ldw	r3,8(r2)
81125634:	e0bffa17 	ldw	r2,-24(fp)
81125638:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
8112563c:	e0bffa17 	ldw	r2,-24(fp)
81125640:	10800417 	ldw	r2,16(r2)
81125644:	10ffff04 	addi	r3,r2,-4
81125648:	e0bffa17 	ldw	r2,-24(fp)
8112564c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
81125650:	e0bffa17 	ldw	r2,-24(fp)
81125654:	10800417 	ldw	r2,16(r2)
81125658:	e0fffe17 	ldw	r3,-8(fp)
8112565c:	10c00015 	stw	r3,0(r2)
81125660:	00001006 	br	811256a4 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
81125664:	e0bffa17 	ldw	r2,-24(fp)
81125668:	10800317 	ldw	r2,12(r2)
8112566c:	11000104 	addi	r4,r2,4
81125670:	e0fffa17 	ldw	r3,-24(fp)
81125674:	19000315 	stw	r4,12(r3)
81125678:	e0fffe17 	ldw	r3,-8(fp)
8112567c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
81125680:	e0bffa17 	ldw	r2,-24(fp)
81125684:	10c00317 	ldw	r3,12(r2)
81125688:	e0bffa17 	ldw	r2,-24(fp)
8112568c:	10800217 	ldw	r2,8(r2)
81125690:	1880041e 	bne	r3,r2,811256a4 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
81125694:	e0bffa17 	ldw	r2,-24(fp)
81125698:	10c00117 	ldw	r3,4(r2)
8112569c:	e0bffa17 	ldw	r2,-24(fp)
811256a0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
811256a4:	e0bffa17 	ldw	r2,-24(fp)
811256a8:	1080058b 	ldhu	r2,22(r2)
811256ac:	10800044 	addi	r2,r2,1
811256b0:	1007883a 	mov	r3,r2
811256b4:	e0bffa17 	ldw	r2,-24(fp)
811256b8:	10c0058d 	sth	r3,22(r2)
811256bc:	e0bff717 	ldw	r2,-36(fp)
811256c0:	e0bffb15 	stw	r2,-20(fp)
811256c4:	e0bffb17 	ldw	r2,-20(fp)
811256c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
811256cc:	0005883a 	mov	r2,zero
}
811256d0:	e037883a 	mov	sp,fp
811256d4:	dfc00117 	ldw	ra,4(sp)
811256d8:	df000017 	ldw	fp,0(sp)
811256dc:	dec00204 	addi	sp,sp,8
811256e0:	f800283a 	ret

811256e4 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
811256e4:	defff604 	addi	sp,sp,-40
811256e8:	df000915 	stw	fp,36(sp)
811256ec:	df000904 	addi	fp,sp,36
811256f0:	e13ffe15 	stw	r4,-8(fp)
811256f4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811256f8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
811256fc:	e0bffe17 	ldw	r2,-8(fp)
81125700:	1000021e 	bne	r2,zero,8112570c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
81125704:	00800104 	movi	r2,4
81125708:	00004906 	br	81125830 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
8112570c:	e0bfff17 	ldw	r2,-4(fp)
81125710:	1000021e 	bne	r2,zero,8112571c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
81125714:	00800244 	movi	r2,9
81125718:	00004506 	br	81125830 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112571c:	e0bffe17 	ldw	r2,-8(fp)
81125720:	10800003 	ldbu	r2,0(r2)
81125724:	10803fcc 	andi	r2,r2,255
81125728:	108000a0 	cmpeqi	r2,r2,2
8112572c:	1000021e 	bne	r2,zero,81125738 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
81125730:	00800044 	movi	r2,1
81125734:	00003e06 	br	81125830 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125738:	0005303a 	rdctl	r2,status
8112573c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125740:	e0fffd17 	ldw	r3,-12(fp)
81125744:	00bfff84 	movi	r2,-2
81125748:	1884703a 	and	r2,r3,r2
8112574c:	1001703a 	wrctl	status,r2
  
  return context;
81125750:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81125754:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
81125758:	e0bffe17 	ldw	r2,-8(fp)
8112575c:	10c00283 	ldbu	r3,10(r2)
81125760:	e0bfff17 	ldw	r2,-4(fp)
81125764:	10c00305 	stb	r3,12(r2)
    psrc                 = &pevent->OSEventTbl[0];
81125768:	e0bffe17 	ldw	r2,-8(fp)
8112576c:	108002c4 	addi	r2,r2,11
81125770:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
81125774:	e0bfff17 	ldw	r2,-4(fp)
81125778:	10800204 	addi	r2,r2,8
8112577c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81125780:	e03ff705 	stb	zero,-36(fp)
81125784:	00000b06 	br	811257b4 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
81125788:	e0bff917 	ldw	r2,-28(fp)
8112578c:	10c00044 	addi	r3,r2,1
81125790:	e0fff915 	stw	r3,-28(fp)
81125794:	e0fff817 	ldw	r3,-32(fp)
81125798:	19000044 	addi	r4,r3,1
8112579c:	e13ff815 	stw	r4,-32(fp)
811257a0:	18c00003 	ldbu	r3,0(r3)
811257a4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811257a8:	e0bff703 	ldbu	r2,-36(fp)
811257ac:	10800044 	addi	r2,r2,1
811257b0:	e0bff705 	stb	r2,-36(fp)
811257b4:	e0bff703 	ldbu	r2,-36(fp)
811257b8:	10800130 	cmpltui	r2,r2,4
811257bc:	103ff21e 	bne	r2,zero,81125788 <__reset+0xfb105788>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
811257c0:	e0bffe17 	ldw	r2,-8(fp)
811257c4:	10800117 	ldw	r2,4(r2)
811257c8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
811257cc:	e0bffc17 	ldw	r2,-16(fp)
811257d0:	1080058b 	ldhu	r2,22(r2)
811257d4:	10bfffcc 	andi	r2,r2,65535
811257d8:	10000626 	beq	r2,zero,811257f4 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
811257dc:	e0bffc17 	ldw	r2,-16(fp)
811257e0:	10800417 	ldw	r2,16(r2)
811257e4:	10c00017 	ldw	r3,0(r2)
811257e8:	e0bfff17 	ldw	r2,-4(fp)
811257ec:	10c00015 	stw	r3,0(r2)
811257f0:	00000206 	br	811257fc <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
811257f4:	e0bfff17 	ldw	r2,-4(fp)
811257f8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
811257fc:	e0bffc17 	ldw	r2,-16(fp)
81125800:	10c0058b 	ldhu	r3,22(r2)
81125804:	e0bfff17 	ldw	r2,-4(fp)
81125808:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
8112580c:	e0bffc17 	ldw	r2,-16(fp)
81125810:	10c0050b 	ldhu	r3,20(r2)
81125814:	e0bfff17 	ldw	r2,-4(fp)
81125818:	10c0018d 	sth	r3,6(r2)
8112581c:	e0bffa17 	ldw	r2,-24(fp)
81125820:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125824:	e0bffb17 	ldw	r2,-20(fp)
81125828:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112582c:	0005883a 	mov	r2,zero
}
81125830:	e037883a 	mov	sp,fp
81125834:	df000017 	ldw	fp,0(sp)
81125838:	dec00104 	addi	sp,sp,4
8112583c:	f800283a 	ret

81125840 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
81125840:	defffb04 	addi	sp,sp,-20
81125844:	dfc00415 	stw	ra,16(sp)
81125848:	df000315 	stw	fp,12(sp)
8112584c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
81125850:	01407804 	movi	r5,480
81125854:	01204574 	movhi	r4,33045
81125858:	210ee104 	addi	r4,r4,15236
8112585c:	112204c0 	call	8112204c <OS_MemClr>
    pq1 = &OSQTbl[0];
81125860:	00a04574 	movhi	r2,33045
81125864:	108ee104 	addi	r2,r2,15236
81125868:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
8112586c:	00a04574 	movhi	r2,33045
81125870:	108ee704 	addi	r2,r2,15260
81125874:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
81125878:	e03ffd0d 	sth	zero,-12(fp)
8112587c:	00000c06 	br	811258b0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
81125880:	e0bffe17 	ldw	r2,-8(fp)
81125884:	e0ffff17 	ldw	r3,-4(fp)
81125888:	10c00015 	stw	r3,0(r2)
        pq1++;
8112588c:	e0bffe17 	ldw	r2,-8(fp)
81125890:	10800604 	addi	r2,r2,24
81125894:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
81125898:	e0bfff17 	ldw	r2,-4(fp)
8112589c:	10800604 	addi	r2,r2,24
811258a0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
811258a4:	e0bffd0b 	ldhu	r2,-12(fp)
811258a8:	10800044 	addi	r2,r2,1
811258ac:	e0bffd0d 	sth	r2,-12(fp)
811258b0:	e0bffd0b 	ldhu	r2,-12(fp)
811258b4:	108004f0 	cmpltui	r2,r2,19
811258b8:	103ff11e 	bne	r2,zero,81125880 <__reset+0xfb105880>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
811258bc:	e0bffe17 	ldw	r2,-8(fp)
811258c0:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
811258c4:	00a04574 	movhi	r2,33045
811258c8:	108ee104 	addi	r2,r2,15236
811258cc:	d0a07415 	stw	r2,-32304(gp)
#endif
}
811258d0:	0001883a 	nop
811258d4:	e037883a 	mov	sp,fp
811258d8:	dfc00117 	ldw	ra,4(sp)
811258dc:	df000017 	ldw	fp,0(sp)
811258e0:	dec00204 	addi	sp,sp,8
811258e4:	f800283a 	ret

811258e8 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
811258e8:	defffa04 	addi	sp,sp,-24
811258ec:	df000515 	stw	fp,20(sp)
811258f0:	df000504 	addi	fp,sp,20
811258f4:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811258f8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
811258fc:	e0bfff17 	ldw	r2,-4(fp)
81125900:	1000021e 	bne	r2,zero,8112590c <OSSemAccept+0x24>
        return (0);
81125904:	0005883a 	mov	r2,zero
81125908:	00001f06 	br	81125988 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112590c:	e0bfff17 	ldw	r2,-4(fp)
81125910:	10800003 	ldbu	r2,0(r2)
81125914:	10803fcc 	andi	r2,r2,255
81125918:	108000e0 	cmpeqi	r2,r2,3
8112591c:	1000021e 	bne	r2,zero,81125928 <OSSemAccept+0x40>
        return (0);
81125920:	0005883a 	mov	r2,zero
81125924:	00001806 	br	81125988 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125928:	0005303a 	rdctl	r2,status
8112592c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125930:	e0fffe17 	ldw	r3,-8(fp)
81125934:	00bfff84 	movi	r2,-2
81125938:	1884703a 	and	r2,r3,r2
8112593c:	1001703a 	wrctl	status,r2
  
  return context;
81125940:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81125944:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
81125948:	e0bfff17 	ldw	r2,-4(fp)
8112594c:	1080020b 	ldhu	r2,8(r2)
81125950:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
81125954:	e0bffd0b 	ldhu	r2,-12(fp)
81125958:	10000626 	beq	r2,zero,81125974 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
8112595c:	e0bfff17 	ldw	r2,-4(fp)
81125960:	1080020b 	ldhu	r2,8(r2)
81125964:	10bfffc4 	addi	r2,r2,-1
81125968:	1007883a 	mov	r3,r2
8112596c:	e0bfff17 	ldw	r2,-4(fp)
81125970:	10c0020d 	sth	r3,8(r2)
81125974:	e0bffb17 	ldw	r2,-20(fp)
81125978:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112597c:	e0bffc17 	ldw	r2,-16(fp)
81125980:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
81125984:	e0bffd0b 	ldhu	r2,-12(fp)
}
81125988:	e037883a 	mov	sp,fp
8112598c:	df000017 	ldw	fp,0(sp)
81125990:	dec00104 	addi	sp,sp,4
81125994:	f800283a 	ret

81125998 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
81125998:	defff904 	addi	sp,sp,-28
8112599c:	dfc00615 	stw	ra,24(sp)
811259a0:	df000515 	stw	fp,20(sp)
811259a4:	df000504 	addi	fp,sp,20
811259a8:	2005883a 	mov	r2,r4
811259ac:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
811259b0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811259b4:	d0a07803 	ldbu	r2,-32288(gp)
811259b8:	10803fcc 	andi	r2,r2,255
811259bc:	10000226 	beq	r2,zero,811259c8 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
811259c0:	0005883a 	mov	r2,zero
811259c4:	00002506 	br	81125a5c <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811259c8:	0005303a 	rdctl	r2,status
811259cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811259d0:	e0fffe17 	ldw	r3,-8(fp)
811259d4:	00bfff84 	movi	r2,-2
811259d8:	1884703a 	and	r2,r3,r2
811259dc:	1001703a 	wrctl	status,r2
  
  return context;
811259e0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
811259e4:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
811259e8:	d0a07717 	ldw	r2,-32292(gp)
811259ec:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
811259f0:	d0a07717 	ldw	r2,-32292(gp)
811259f4:	10000326 	beq	r2,zero,81125a04 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
811259f8:	d0a07717 	ldw	r2,-32292(gp)
811259fc:	10800117 	ldw	r2,4(r2)
81125a00:	d0a07715 	stw	r2,-32292(gp)
81125a04:	e0bffb17 	ldw	r2,-20(fp)
81125a08:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125a0c:	e0bffc17 	ldw	r2,-16(fp)
81125a10:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
81125a14:	e0bffd17 	ldw	r2,-12(fp)
81125a18:	10000f26 	beq	r2,zero,81125a58 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
81125a1c:	e0bffd17 	ldw	r2,-12(fp)
81125a20:	00c000c4 	movi	r3,3
81125a24:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
81125a28:	e0bffd17 	ldw	r2,-12(fp)
81125a2c:	e0ffff0b 	ldhu	r3,-4(fp)
81125a30:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
81125a34:	e0bffd17 	ldw	r2,-12(fp)
81125a38:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
81125a3c:	e0bffd17 	ldw	r2,-12(fp)
81125a40:	00c00fc4 	movi	r3,63
81125a44:	10c003c5 	stb	r3,15(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
81125a48:	e0bffd17 	ldw	r2,-12(fp)
81125a4c:	10000405 	stb	zero,16(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
81125a50:	e13ffd17 	ldw	r4,-12(fp)
81125a54:	1121c6c0 	call	81121c6c <OS_EventWaitListInit>
    }
    return (pevent);
81125a58:	e0bffd17 	ldw	r2,-12(fp)
}
81125a5c:	e037883a 	mov	sp,fp
81125a60:	dfc00117 	ldw	ra,4(sp)
81125a64:	df000017 	ldw	fp,0(sp)
81125a68:	dec00204 	addi	sp,sp,8
81125a6c:	f800283a 	ret

81125a70 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81125a70:	defff304 	addi	sp,sp,-52
81125a74:	dfc00c15 	stw	ra,48(sp)
81125a78:	df000b15 	stw	fp,44(sp)
81125a7c:	df000b04 	addi	fp,sp,44
81125a80:	e13ffd15 	stw	r4,-12(fp)
81125a84:	2805883a 	mov	r2,r5
81125a88:	e1bfff15 	stw	r6,-4(fp)
81125a8c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81125a90:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81125a94:	e0bfff17 	ldw	r2,-4(fp)
81125a98:	1000021e 	bne	r2,zero,81125aa4 <OSSemDel+0x34>
        return (pevent);
81125a9c:	e0bffd17 	ldw	r2,-12(fp)
81125aa0:	00007e06 	br	81125c9c <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81125aa4:	e0bffd17 	ldw	r2,-12(fp)
81125aa8:	1000051e 	bne	r2,zero,81125ac0 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
81125aac:	e0bfff17 	ldw	r2,-4(fp)
81125ab0:	00c00104 	movi	r3,4
81125ab4:	10c00005 	stb	r3,0(r2)
        return (pevent);
81125ab8:	e0bffd17 	ldw	r2,-12(fp)
81125abc:	00007706 	br	81125c9c <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
81125ac0:	e0bffd17 	ldw	r2,-12(fp)
81125ac4:	10800003 	ldbu	r2,0(r2)
81125ac8:	10803fcc 	andi	r2,r2,255
81125acc:	108000e0 	cmpeqi	r2,r2,3
81125ad0:	1000051e 	bne	r2,zero,81125ae8 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
81125ad4:	e0bfff17 	ldw	r2,-4(fp)
81125ad8:	00c00044 	movi	r3,1
81125adc:	10c00005 	stb	r3,0(r2)
        return (pevent);
81125ae0:	e0bffd17 	ldw	r2,-12(fp)
81125ae4:	00006d06 	br	81125c9c <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81125ae8:	d0a07803 	ldbu	r2,-32288(gp)
81125aec:	10803fcc 	andi	r2,r2,255
81125af0:	10000526 	beq	r2,zero,81125b08 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
81125af4:	e0bfff17 	ldw	r2,-4(fp)
81125af8:	00c003c4 	movi	r3,15
81125afc:	10c00005 	stb	r3,0(r2)
        return (pevent);
81125b00:	e0bffd17 	ldw	r2,-12(fp)
81125b04:	00006506 	br	81125c9c <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125b08:	0005303a 	rdctl	r2,status
81125b0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125b10:	e0fffc17 	ldw	r3,-16(fp)
81125b14:	00bfff84 	movi	r2,-2
81125b18:	1884703a 	and	r2,r3,r2
81125b1c:	1001703a 	wrctl	status,r2
  
  return context;
81125b20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81125b24:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
81125b28:	e0bffd17 	ldw	r2,-12(fp)
81125b2c:	10800283 	ldbu	r2,10(r2)
81125b30:	10803fcc 	andi	r2,r2,255
81125b34:	10000326 	beq	r2,zero,81125b44 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81125b38:	00800044 	movi	r2,1
81125b3c:	e0bff505 	stb	r2,-44(fp)
81125b40:	00000106 	br	81125b48 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81125b44:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
81125b48:	e0bffe03 	ldbu	r2,-8(fp)
81125b4c:	10000326 	beq	r2,zero,81125b5c <OSSemDel+0xec>
81125b50:	10800060 	cmpeqi	r2,r2,1
81125b54:	1000281e 	bne	r2,zero,81125bf8 <OSSemDel+0x188>
81125b58:	00004506 	br	81125c70 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
81125b5c:	e0bff503 	ldbu	r2,-44(fp)
81125b60:	1000161e 	bne	r2,zero,81125bbc <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
81125b64:	e0bffd17 	ldw	r2,-12(fp)
81125b68:	00c00fc4 	movi	r3,63
81125b6c:	10c003c5 	stb	r3,15(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
81125b70:	e0bffd17 	ldw	r2,-12(fp)
81125b74:	10000405 	stb	zero,16(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81125b78:	e0bffd17 	ldw	r2,-12(fp)
81125b7c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
81125b80:	d0e07717 	ldw	r3,-32292(gp)
81125b84:	e0bffd17 	ldw	r2,-12(fp)
81125b88:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
81125b8c:	e0bffd17 	ldw	r2,-12(fp)
81125b90:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
81125b94:	e0bffd17 	ldw	r2,-12(fp)
81125b98:	d0a07715 	stw	r2,-32292(gp)
81125b9c:	e0bff717 	ldw	r2,-36(fp)
81125ba0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125ba4:	e0bff817 	ldw	r2,-32(fp)
81125ba8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
81125bac:	e0bfff17 	ldw	r2,-4(fp)
81125bb0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
81125bb4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
81125bb8:	00003706 	br	81125c98 <OSSemDel+0x228>
81125bbc:	e0bff717 	ldw	r2,-36(fp)
81125bc0:	e0bff915 	stw	r2,-28(fp)
81125bc4:	e0bff917 	ldw	r2,-28(fp)
81125bc8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
81125bcc:	e0bfff17 	ldw	r2,-4(fp)
81125bd0:	00c01244 	movi	r3,73
81125bd4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
81125bd8:	e0bffd17 	ldw	r2,-12(fp)
81125bdc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
81125be0:	00002d06 	br	81125c98 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
81125be4:	000f883a 	mov	r7,zero
81125be8:	01800044 	movi	r6,1
81125bec:	000b883a 	mov	r5,zero
81125bf0:	e13ffd17 	ldw	r4,-12(fp)
81125bf4:	11216bc0 	call	811216bc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
81125bf8:	e0bffd17 	ldw	r2,-12(fp)
81125bfc:	10800283 	ldbu	r2,10(r2)
81125c00:	10803fcc 	andi	r2,r2,255
81125c04:	103ff71e 	bne	r2,zero,81125be4 <__reset+0xfb105be4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
81125c08:	e0bffd17 	ldw	r2,-12(fp)
81125c0c:	00c00fc4 	movi	r3,63
81125c10:	10c003c5 	stb	r3,15(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81125c14:	e0bffd17 	ldw	r2,-12(fp)
81125c18:	10000405 	stb	zero,16(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81125c1c:	e0bffd17 	ldw	r2,-12(fp)
81125c20:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
81125c24:	d0e07717 	ldw	r3,-32292(gp)
81125c28:	e0bffd17 	ldw	r2,-12(fp)
81125c2c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
81125c30:	e0bffd17 	ldw	r2,-12(fp)
81125c34:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
81125c38:	e0bffd17 	ldw	r2,-12(fp)
81125c3c:	d0a07715 	stw	r2,-32292(gp)
81125c40:	e0bff717 	ldw	r2,-36(fp)
81125c44:	e0bffa15 	stw	r2,-24(fp)
81125c48:	e0bffa17 	ldw	r2,-24(fp)
81125c4c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81125c50:	e0bff503 	ldbu	r2,-44(fp)
81125c54:	10800058 	cmpnei	r2,r2,1
81125c58:	1000011e 	bne	r2,zero,81125c60 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81125c5c:	11221080 	call	81122108 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
81125c60:	e0bfff17 	ldw	r2,-4(fp)
81125c64:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
81125c68:	e03ff615 	stw	zero,-40(fp)
             break;
81125c6c:	00000a06 	br	81125c98 <OSSemDel+0x228>
81125c70:	e0bff717 	ldw	r2,-36(fp)
81125c74:	e0bffb15 	stw	r2,-20(fp)
81125c78:	e0bffb17 	ldw	r2,-20(fp)
81125c7c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
81125c80:	e0bfff17 	ldw	r2,-4(fp)
81125c84:	00c001c4 	movi	r3,7
81125c88:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
81125c8c:	e0bffd17 	ldw	r2,-12(fp)
81125c90:	e0bff615 	stw	r2,-40(fp)
             break;
81125c94:	0001883a 	nop
    }
    return (pevent_return);
81125c98:	e0bff617 	ldw	r2,-40(fp)
}
81125c9c:	e037883a 	mov	sp,fp
81125ca0:	dfc00117 	ldw	ra,4(sp)
81125ca4:	df000017 	ldw	fp,0(sp)
81125ca8:	dec00204 	addi	sp,sp,8
81125cac:	f800283a 	ret

81125cb0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81125cb0:	defff504 	addi	sp,sp,-44
81125cb4:	dfc00a15 	stw	ra,40(sp)
81125cb8:	df000915 	stw	fp,36(sp)
81125cbc:	df000904 	addi	fp,sp,36
81125cc0:	e13ffd15 	stw	r4,-12(fp)
81125cc4:	2805883a 	mov	r2,r5
81125cc8:	e1bfff15 	stw	r6,-4(fp)
81125ccc:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81125cd0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81125cd4:	e0bfff17 	ldw	r2,-4(fp)
81125cd8:	10007226 	beq	r2,zero,81125ea4 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81125cdc:	e0bffd17 	ldw	r2,-12(fp)
81125ce0:	1000041e 	bne	r2,zero,81125cf4 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
81125ce4:	e0bfff17 	ldw	r2,-4(fp)
81125ce8:	00c00104 	movi	r3,4
81125cec:	10c00005 	stb	r3,0(r2)
        return;
81125cf0:	00006d06 	br	81125ea8 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81125cf4:	e0bffd17 	ldw	r2,-12(fp)
81125cf8:	10800003 	ldbu	r2,0(r2)
81125cfc:	10803fcc 	andi	r2,r2,255
81125d00:	108000e0 	cmpeqi	r2,r2,3
81125d04:	1000041e 	bne	r2,zero,81125d18 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
81125d08:	e0bfff17 	ldw	r2,-4(fp)
81125d0c:	00c00044 	movi	r3,1
81125d10:	10c00005 	stb	r3,0(r2)
        return;
81125d14:	00006406 	br	81125ea8 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
81125d18:	d0a07803 	ldbu	r2,-32288(gp)
81125d1c:	10803fcc 	andi	r2,r2,255
81125d20:	10000426 	beq	r2,zero,81125d34 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
81125d24:	e0bfff17 	ldw	r2,-4(fp)
81125d28:	00c00084 	movi	r3,2
81125d2c:	10c00005 	stb	r3,0(r2)
        return;
81125d30:	00005d06 	br	81125ea8 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
81125d34:	d0a06903 	ldbu	r2,-32348(gp)
81125d38:	10803fcc 	andi	r2,r2,255
81125d3c:	10000426 	beq	r2,zero,81125d50 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
81125d40:	e0bfff17 	ldw	r2,-4(fp)
81125d44:	00c00344 	movi	r3,13
81125d48:	10c00005 	stb	r3,0(r2)
        return;
81125d4c:	00005606 	br	81125ea8 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125d50:	0005303a 	rdctl	r2,status
81125d54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125d58:	e0fffc17 	ldw	r3,-16(fp)
81125d5c:	00bfff84 	movi	r2,-2
81125d60:	1884703a 	and	r2,r3,r2
81125d64:	1001703a 	wrctl	status,r2
  
  return context;
81125d68:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81125d6c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
81125d70:	e0bffd17 	ldw	r2,-12(fp)
81125d74:	1080020b 	ldhu	r2,8(r2)
81125d78:	10bfffcc 	andi	r2,r2,65535
81125d7c:	10000d26 	beq	r2,zero,81125db4 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
81125d80:	e0bffd17 	ldw	r2,-12(fp)
81125d84:	1080020b 	ldhu	r2,8(r2)
81125d88:	10bfffc4 	addi	r2,r2,-1
81125d8c:	1007883a 	mov	r3,r2
81125d90:	e0bffd17 	ldw	r2,-12(fp)
81125d94:	10c0020d 	sth	r3,8(r2)
81125d98:	e0bff717 	ldw	r2,-36(fp)
81125d9c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125da0:	e0bff817 	ldw	r2,-32(fp)
81125da4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
81125da8:	e0bfff17 	ldw	r2,-4(fp)
81125dac:	10000005 	stb	zero,0(r2)
        return;
81125db0:	00003d06 	br	81125ea8 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
81125db4:	d0a07917 	ldw	r2,-32284(gp)
81125db8:	d0e07917 	ldw	r3,-32284(gp)
81125dbc:	18c00c03 	ldbu	r3,48(r3)
81125dc0:	18c00054 	ori	r3,r3,1
81125dc4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81125dc8:	d0a07917 	ldw	r2,-32284(gp)
81125dcc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
81125dd0:	d0a07917 	ldw	r2,-32284(gp)
81125dd4:	e0fffe0b 	ldhu	r3,-8(fp)
81125dd8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
81125ddc:	e13ffd17 	ldw	r4,-12(fp)
81125de0:	11218540 	call	81121854 <OS_EventTaskWait>
81125de4:	e0bff717 	ldw	r2,-36(fp)
81125de8:	e0bffb15 	stw	r2,-20(fp)
81125dec:	e0bffb17 	ldw	r2,-20(fp)
81125df0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
81125df4:	11221080 	call	81122108 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125df8:	0005303a 	rdctl	r2,status
81125dfc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125e00:	e0fff917 	ldw	r3,-28(fp)
81125e04:	00bfff84 	movi	r2,-2
81125e08:	1884703a 	and	r2,r3,r2
81125e0c:	1001703a 	wrctl	status,r2
  
  return context;
81125e10:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
81125e14:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81125e18:	d0a07917 	ldw	r2,-32284(gp)
81125e1c:	10800c43 	ldbu	r2,49(r2)
81125e20:	10803fcc 	andi	r2,r2,255
81125e24:	10000326 	beq	r2,zero,81125e34 <OSSemPend+0x184>
81125e28:	108000a0 	cmpeqi	r2,r2,2
81125e2c:	1000041e 	bne	r2,zero,81125e40 <OSSemPend+0x190>
81125e30:	00000706 	br	81125e50 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
81125e34:	e0bfff17 	ldw	r2,-4(fp)
81125e38:	10000005 	stb	zero,0(r2)
             break;
81125e3c:	00000c06 	br	81125e70 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
81125e40:	e0bfff17 	ldw	r2,-4(fp)
81125e44:	00c00384 	movi	r3,14
81125e48:	10c00005 	stb	r3,0(r2)
             break;
81125e4c:	00000806 	br	81125e70 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
81125e50:	d0a07917 	ldw	r2,-32284(gp)
81125e54:	e17ffd17 	ldw	r5,-12(fp)
81125e58:	1009883a 	mov	r4,r2
81125e5c:	1121ab40 	call	81121ab4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
81125e60:	e0bfff17 	ldw	r2,-4(fp)
81125e64:	00c00284 	movi	r3,10
81125e68:	10c00005 	stb	r3,0(r2)
             break;
81125e6c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
81125e70:	d0a07917 	ldw	r2,-32284(gp)
81125e74:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
81125e78:	d0a07917 	ldw	r2,-32284(gp)
81125e7c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
81125e80:	d0a07917 	ldw	r2,-32284(gp)
81125e84:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81125e88:	d0a07917 	ldw	r2,-32284(gp)
81125e8c:	10000815 	stw	zero,32(r2)
81125e90:	e0bff717 	ldw	r2,-36(fp)
81125e94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125e98:	e0bffa17 	ldw	r2,-24(fp)
81125e9c:	1001703a 	wrctl	status,r2
81125ea0:	00000106 	br	81125ea8 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
81125ea4:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
81125ea8:	e037883a 	mov	sp,fp
81125eac:	dfc00117 	ldw	ra,4(sp)
81125eb0:	df000017 	ldw	fp,0(sp)
81125eb4:	dec00204 	addi	sp,sp,8
81125eb8:	f800283a 	ret

81125ebc <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81125ebc:	defff604 	addi	sp,sp,-40
81125ec0:	dfc00915 	stw	ra,36(sp)
81125ec4:	df000815 	stw	fp,32(sp)
81125ec8:	df000804 	addi	fp,sp,32
81125ecc:	e13ffd15 	stw	r4,-12(fp)
81125ed0:	2805883a 	mov	r2,r5
81125ed4:	e1bfff15 	stw	r6,-4(fp)
81125ed8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81125edc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81125ee0:	e0bfff17 	ldw	r2,-4(fp)
81125ee4:	1000021e 	bne	r2,zero,81125ef0 <OSSemPendAbort+0x34>
        return (0);
81125ee8:	0005883a 	mov	r2,zero
81125eec:	00004906 	br	81126014 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81125ef0:	e0bffd17 	ldw	r2,-12(fp)
81125ef4:	1000051e 	bne	r2,zero,81125f0c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
81125ef8:	e0bfff17 	ldw	r2,-4(fp)
81125efc:	00c00104 	movi	r3,4
81125f00:	10c00005 	stb	r3,0(r2)
        return (0);
81125f04:	0005883a 	mov	r2,zero
81125f08:	00004206 	br	81126014 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81125f0c:	e0bffd17 	ldw	r2,-12(fp)
81125f10:	10800003 	ldbu	r2,0(r2)
81125f14:	10803fcc 	andi	r2,r2,255
81125f18:	108000e0 	cmpeqi	r2,r2,3
81125f1c:	1000051e 	bne	r2,zero,81125f34 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
81125f20:	e0bfff17 	ldw	r2,-4(fp)
81125f24:	00c00044 	movi	r3,1
81125f28:	10c00005 	stb	r3,0(r2)
        return (0);
81125f2c:	0005883a 	mov	r2,zero
81125f30:	00003806 	br	81126014 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125f34:	0005303a 	rdctl	r2,status
81125f38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125f3c:	e0fffc17 	ldw	r3,-16(fp)
81125f40:	00bfff84 	movi	r2,-2
81125f44:	1884703a 	and	r2,r3,r2
81125f48:	1001703a 	wrctl	status,r2
  
  return context;
81125f4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81125f50:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
81125f54:	e0bffd17 	ldw	r2,-12(fp)
81125f58:	10800283 	ldbu	r2,10(r2)
81125f5c:	10803fcc 	andi	r2,r2,255
81125f60:	10002526 	beq	r2,zero,81125ff8 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
81125f64:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
81125f68:	e0bffe03 	ldbu	r2,-8(fp)
81125f6c:	10800060 	cmpeqi	r2,r2,1
81125f70:	10000e26 	beq	r2,zero,81125fac <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
81125f74:	00000806 	br	81125f98 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
81125f78:	01c00084 	movi	r7,2
81125f7c:	01800044 	movi	r6,1
81125f80:	000b883a 	mov	r5,zero
81125f84:	e13ffd17 	ldw	r4,-12(fp)
81125f88:	11216bc0 	call	811216bc <OS_EventTaskRdy>
                     nbr_tasks++;
81125f8c:	e0bff803 	ldbu	r2,-32(fp)
81125f90:	10800044 	addi	r2,r2,1
81125f94:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
81125f98:	e0bffd17 	ldw	r2,-12(fp)
81125f9c:	10800283 	ldbu	r2,10(r2)
81125fa0:	10803fcc 	andi	r2,r2,255
81125fa4:	103ff41e 	bne	r2,zero,81125f78 <__reset+0xfb105f78>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
81125fa8:	00000906 	br	81125fd0 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
81125fac:	01c00084 	movi	r7,2
81125fb0:	01800044 	movi	r6,1
81125fb4:	000b883a 	mov	r5,zero
81125fb8:	e13ffd17 	ldw	r4,-12(fp)
81125fbc:	11216bc0 	call	811216bc <OS_EventTaskRdy>
                 nbr_tasks++;
81125fc0:	e0bff803 	ldbu	r2,-32(fp)
81125fc4:	10800044 	addi	r2,r2,1
81125fc8:	e0bff805 	stb	r2,-32(fp)
                 break;
81125fcc:	0001883a 	nop
81125fd0:	e0bff917 	ldw	r2,-28(fp)
81125fd4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125fd8:	e0bffa17 	ldw	r2,-24(fp)
81125fdc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
81125fe0:	11221080 	call	81122108 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
81125fe4:	e0bfff17 	ldw	r2,-4(fp)
81125fe8:	00c00384 	movi	r3,14
81125fec:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
81125ff0:	e0bff803 	ldbu	r2,-32(fp)
81125ff4:	00000706 	br	81126014 <OSSemPendAbort+0x158>
81125ff8:	e0bff917 	ldw	r2,-28(fp)
81125ffc:	e0bffb15 	stw	r2,-20(fp)
81126000:	e0bffb17 	ldw	r2,-20(fp)
81126004:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81126008:	e0bfff17 	ldw	r2,-4(fp)
8112600c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
81126010:	0005883a 	mov	r2,zero
}
81126014:	e037883a 	mov	sp,fp
81126018:	dfc00117 	ldw	ra,4(sp)
8112601c:	df000017 	ldw	fp,0(sp)
81126020:	dec00204 	addi	sp,sp,8
81126024:	f800283a 	ret

81126028 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
81126028:	defff804 	addi	sp,sp,-32
8112602c:	dfc00715 	stw	ra,28(sp)
81126030:	df000615 	stw	fp,24(sp)
81126034:	df000604 	addi	fp,sp,24
81126038:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112603c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81126040:	e0bfff17 	ldw	r2,-4(fp)
81126044:	1000021e 	bne	r2,zero,81126050 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
81126048:	00800104 	movi	r2,4
8112604c:	00003506 	br	81126124 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81126050:	e0bfff17 	ldw	r2,-4(fp)
81126054:	10800003 	ldbu	r2,0(r2)
81126058:	10803fcc 	andi	r2,r2,255
8112605c:	108000e0 	cmpeqi	r2,r2,3
81126060:	1000021e 	bne	r2,zero,8112606c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
81126064:	00800044 	movi	r2,1
81126068:	00002e06 	br	81126124 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112606c:	0005303a 	rdctl	r2,status
81126070:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126074:	e0fffe17 	ldw	r3,-8(fp)
81126078:	00bfff84 	movi	r2,-2
8112607c:	1884703a 	and	r2,r3,r2
81126080:	1001703a 	wrctl	status,r2
  
  return context;
81126084:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81126088:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
8112608c:	e0bfff17 	ldw	r2,-4(fp)
81126090:	10800283 	ldbu	r2,10(r2)
81126094:	10803fcc 	andi	r2,r2,255
81126098:	10000c26 	beq	r2,zero,811260cc <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112609c:	000f883a 	mov	r7,zero
811260a0:	01800044 	movi	r6,1
811260a4:	000b883a 	mov	r5,zero
811260a8:	e13fff17 	ldw	r4,-4(fp)
811260ac:	11216bc0 	call	811216bc <OS_EventTaskRdy>
811260b0:	e0bffa17 	ldw	r2,-24(fp)
811260b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811260b8:	e0bffb17 	ldw	r2,-20(fp)
811260bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
811260c0:	11221080 	call	81122108 <OS_Sched>
        return (OS_ERR_NONE);
811260c4:	0005883a 	mov	r2,zero
811260c8:	00001606 	br	81126124 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
811260cc:	e0bfff17 	ldw	r2,-4(fp)
811260d0:	1080020b 	ldhu	r2,8(r2)
811260d4:	10ffffcc 	andi	r3,r2,65535
811260d8:	00bfffd4 	movui	r2,65535
811260dc:	18800c26 	beq	r3,r2,81126110 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
811260e0:	e0bfff17 	ldw	r2,-4(fp)
811260e4:	1080020b 	ldhu	r2,8(r2)
811260e8:	10800044 	addi	r2,r2,1
811260ec:	1007883a 	mov	r3,r2
811260f0:	e0bfff17 	ldw	r2,-4(fp)
811260f4:	10c0020d 	sth	r3,8(r2)
811260f8:	e0bffa17 	ldw	r2,-24(fp)
811260fc:	e0bffc15 	stw	r2,-16(fp)
81126100:	e0bffc17 	ldw	r2,-16(fp)
81126104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
81126108:	0005883a 	mov	r2,zero
8112610c:	00000506 	br	81126124 <OSSemPost+0xfc>
81126110:	e0bffa17 	ldw	r2,-24(fp)
81126114:	e0bffd15 	stw	r2,-12(fp)
81126118:	e0bffd17 	ldw	r2,-12(fp)
8112611c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
81126120:	00800c84 	movi	r2,50
}
81126124:	e037883a 	mov	sp,fp
81126128:	dfc00117 	ldw	ra,4(sp)
8112612c:	df000017 	ldw	fp,0(sp)
81126130:	dec00204 	addi	sp,sp,8
81126134:	f800283a 	ret

81126138 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
81126138:	defff704 	addi	sp,sp,-36
8112613c:	df000815 	stw	fp,32(sp)
81126140:	df000804 	addi	fp,sp,32
81126144:	e13ffe15 	stw	r4,-8(fp)
81126148:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112614c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81126150:	e0bffe17 	ldw	r2,-8(fp)
81126154:	1000021e 	bne	r2,zero,81126160 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
81126158:	00800104 	movi	r2,4
8112615c:	00003606 	br	81126238 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
81126160:	e0bfff17 	ldw	r2,-4(fp)
81126164:	1000021e 	bne	r2,zero,81126170 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
81126168:	00800244 	movi	r2,9
8112616c:	00003206 	br	81126238 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
81126170:	e0bffe17 	ldw	r2,-8(fp)
81126174:	10800003 	ldbu	r2,0(r2)
81126178:	10803fcc 	andi	r2,r2,255
8112617c:	108000e0 	cmpeqi	r2,r2,3
81126180:	1000021e 	bne	r2,zero,8112618c <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
81126184:	00800044 	movi	r2,1
81126188:	00002b06 	br	81126238 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112618c:	0005303a 	rdctl	r2,status
81126190:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126194:	e0fffd17 	ldw	r3,-12(fp)
81126198:	00bfff84 	movi	r2,-2
8112619c:	1884703a 	and	r2,r3,r2
811261a0:	1001703a 	wrctl	status,r2
  
  return context;
811261a4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811261a8:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
811261ac:	e0bffe17 	ldw	r2,-8(fp)
811261b0:	10c00283 	ldbu	r3,10(r2)
811261b4:	e0bfff17 	ldw	r2,-4(fp)
811261b8:	10c00185 	stb	r3,6(r2)
    psrc                   = &pevent->OSEventTbl[0];
811261bc:	e0bffe17 	ldw	r2,-8(fp)
811261c0:	108002c4 	addi	r2,r2,11
811261c4:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
811261c8:	e0bfff17 	ldw	r2,-4(fp)
811261cc:	10800084 	addi	r2,r2,2
811261d0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811261d4:	e03ffa05 	stb	zero,-24(fp)
811261d8:	00000b06 	br	81126208 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
811261dc:	e0bff917 	ldw	r2,-28(fp)
811261e0:	10c00044 	addi	r3,r2,1
811261e4:	e0fff915 	stw	r3,-28(fp)
811261e8:	e0fff817 	ldw	r3,-32(fp)
811261ec:	19000044 	addi	r4,r3,1
811261f0:	e13ff815 	stw	r4,-32(fp)
811261f4:	18c00003 	ldbu	r3,0(r3)
811261f8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811261fc:	e0bffa03 	ldbu	r2,-24(fp)
81126200:	10800044 	addi	r2,r2,1
81126204:	e0bffa05 	stb	r2,-24(fp)
81126208:	e0bffa03 	ldbu	r2,-24(fp)
8112620c:	10800130 	cmpltui	r2,r2,4
81126210:	103ff21e 	bne	r2,zero,811261dc <__reset+0xfb1061dc>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
81126214:	e0bffe17 	ldw	r2,-8(fp)
81126218:	10c0020b 	ldhu	r3,8(r2)
8112621c:	e0bfff17 	ldw	r2,-4(fp)
81126220:	10c0000d 	sth	r3,0(r2)
81126224:	e0bffb17 	ldw	r2,-20(fp)
81126228:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112622c:	e0bffc17 	ldw	r2,-16(fp)
81126230:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81126234:	0005883a 	mov	r2,zero
}
81126238:	e037883a 	mov	sp,fp
8112623c:	df000017 	ldw	fp,0(sp)
81126240:	dec00104 	addi	sp,sp,4
81126244:	f800283a 	ret

81126248 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
81126248:	defff904 	addi	sp,sp,-28
8112624c:	df000615 	stw	fp,24(sp)
81126250:	df000604 	addi	fp,sp,24
81126254:	e13ffd15 	stw	r4,-12(fp)
81126258:	2805883a 	mov	r2,r5
8112625c:	e1bfff15 	stw	r6,-4(fp)
81126260:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81126264:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81126268:	e0bfff17 	ldw	r2,-4(fp)
8112626c:	10003126 	beq	r2,zero,81126334 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81126270:	e0bffd17 	ldw	r2,-12(fp)
81126274:	1000041e 	bne	r2,zero,81126288 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
81126278:	e0bfff17 	ldw	r2,-4(fp)
8112627c:	00c00104 	movi	r3,4
81126280:	10c00005 	stb	r3,0(r2)
        return;
81126284:	00002c06 	br	81126338 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81126288:	e0bffd17 	ldw	r2,-12(fp)
8112628c:	10800003 	ldbu	r2,0(r2)
81126290:	10803fcc 	andi	r2,r2,255
81126294:	108000e0 	cmpeqi	r2,r2,3
81126298:	1000041e 	bne	r2,zero,811262ac <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
8112629c:	e0bfff17 	ldw	r2,-4(fp)
811262a0:	00c00044 	movi	r3,1
811262a4:	10c00005 	stb	r3,0(r2)
        return;
811262a8:	00002306 	br	81126338 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811262ac:	0005303a 	rdctl	r2,status
811262b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811262b4:	e0fffc17 	ldw	r3,-16(fp)
811262b8:	00bfff84 	movi	r2,-2
811262bc:	1884703a 	and	r2,r3,r2
811262c0:	1001703a 	wrctl	status,r2
  
  return context;
811262c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811262c8:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
811262cc:	e0bfff17 	ldw	r2,-4(fp)
811262d0:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
811262d4:	e0bffd17 	ldw	r2,-12(fp)
811262d8:	1080020b 	ldhu	r2,8(r2)
811262dc:	10bfffcc 	andi	r2,r2,65535
811262e0:	10000426 	beq	r2,zero,811262f4 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
811262e4:	e0bffd17 	ldw	r2,-12(fp)
811262e8:	e0fffe0b 	ldhu	r3,-8(fp)
811262ec:	10c0020d 	sth	r3,8(r2)
811262f0:	00000b06 	br	81126320 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
811262f4:	e0bffd17 	ldw	r2,-12(fp)
811262f8:	10800283 	ldbu	r2,10(r2)
811262fc:	10803fcc 	andi	r2,r2,255
81126300:	1000041e 	bne	r2,zero,81126314 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
81126304:	e0bffd17 	ldw	r2,-12(fp)
81126308:	e0fffe0b 	ldhu	r3,-8(fp)
8112630c:	10c0020d 	sth	r3,8(r2)
81126310:	00000306 	br	81126320 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
81126314:	e0bfff17 	ldw	r2,-4(fp)
81126318:	00c01244 	movi	r3,73
8112631c:	10c00005 	stb	r3,0(r2)
81126320:	e0bffa17 	ldw	r2,-24(fp)
81126324:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126328:	e0bffb17 	ldw	r2,-20(fp)
8112632c:	1001703a 	wrctl	status,r2
81126330:	00000106 	br	81126338 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
81126334:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
81126338:	e037883a 	mov	sp,fp
8112633c:	df000017 	ldw	fp,0(sp)
81126340:	dec00104 	addi	sp,sp,4
81126344:	f800283a 	ret

81126348 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
81126348:	defff104 	addi	sp,sp,-60
8112634c:	dfc00e15 	stw	ra,56(sp)
81126350:	df000d15 	stw	fp,52(sp)
81126354:	df000d04 	addi	fp,sp,52
81126358:	2007883a 	mov	r3,r4
8112635c:	2805883a 	mov	r2,r5
81126360:	e0fffe05 	stb	r3,-8(fp)
81126364:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
81126368:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
8112636c:	e0bffe03 	ldbu	r2,-8(fp)
81126370:	108007b0 	cmpltui	r2,r2,30
81126374:	1000051e 	bne	r2,zero,8112638c <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
81126378:	e0bffe03 	ldbu	r2,-8(fp)
8112637c:	10803fe0 	cmpeqi	r2,r2,255
81126380:	1000021e 	bne	r2,zero,8112638c <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
81126384:	00800a84 	movi	r2,42
81126388:	00012606 	br	81126824 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
8112638c:	e0bfff03 	ldbu	r2,-4(fp)
81126390:	108007b0 	cmpltui	r2,r2,30
81126394:	1000021e 	bne	r2,zero,811263a0 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
81126398:	00800a84 	movi	r2,42
8112639c:	00012106 	br	81126824 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811263a0:	0005303a 	rdctl	r2,status
811263a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811263a8:	e0fffd17 	ldw	r3,-12(fp)
811263ac:	00bfff84 	movi	r2,-2
811263b0:	1884703a 	and	r2,r3,r2
811263b4:	1001703a 	wrctl	status,r2
  
  return context;
811263b8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811263bc:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
811263c0:	e0ffff03 	ldbu	r3,-4(fp)
811263c4:	00a04574 	movhi	r2,33045
811263c8:	10970204 	addi	r2,r2,23560
811263cc:	18c7883a 	add	r3,r3,r3
811263d0:	18c7883a 	add	r3,r3,r3
811263d4:	10c5883a 	add	r2,r2,r3
811263d8:	10800017 	ldw	r2,0(r2)
811263dc:	10000626 	beq	r2,zero,811263f8 <OSTaskChangePrio+0xb0>
811263e0:	e0bff517 	ldw	r2,-44(fp)
811263e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811263e8:	e0bff617 	ldw	r2,-40(fp)
811263ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
811263f0:	00800a04 	movi	r2,40
811263f4:	00010b06 	br	81126824 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
811263f8:	e0bffe03 	ldbu	r2,-8(fp)
811263fc:	10803fd8 	cmpnei	r2,r2,255
81126400:	1000031e 	bne	r2,zero,81126410 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
81126404:	d0a07917 	ldw	r2,-32284(gp)
81126408:	10800c83 	ldbu	r2,50(r2)
8112640c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
81126410:	e0fffe03 	ldbu	r3,-8(fp)
81126414:	00a04574 	movhi	r2,33045
81126418:	10970204 	addi	r2,r2,23560
8112641c:	18c7883a 	add	r3,r3,r3
81126420:	18c7883a 	add	r3,r3,r3
81126424:	10c5883a 	add	r2,r2,r3
81126428:	10800017 	ldw	r2,0(r2)
8112642c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
81126430:	e0bff817 	ldw	r2,-32(fp)
81126434:	1000061e 	bne	r2,zero,81126450 <OSTaskChangePrio+0x108>
81126438:	e0bff517 	ldw	r2,-44(fp)
8112643c:	e0bff715 	stw	r2,-36(fp)
81126440:	e0bff717 	ldw	r2,-36(fp)
81126444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
81126448:	00800a44 	movi	r2,41
8112644c:	0000f506 	br	81126824 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
81126450:	e0bff817 	ldw	r2,-32(fp)
81126454:	10800058 	cmpnei	r2,r2,1
81126458:	1000061e 	bne	r2,zero,81126474 <OSTaskChangePrio+0x12c>
8112645c:	e0bff517 	ldw	r2,-44(fp)
81126460:	e0bff915 	stw	r2,-28(fp)
81126464:	e0bff917 	ldw	r2,-28(fp)
81126468:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
8112646c:	008010c4 	movi	r2,67
81126470:	0000ec06 	br	81126824 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
81126474:	e0bfff03 	ldbu	r2,-4(fp)
81126478:	1004d0fa 	srli	r2,r2,3
8112647c:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
81126480:	e0bfff03 	ldbu	r2,-4(fp)
81126484:	108001cc 	andi	r2,r2,7
81126488:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
8112648c:	e0bffb03 	ldbu	r2,-20(fp)
81126490:	00c00044 	movi	r3,1
81126494:	1884983a 	sll	r2,r3,r2
81126498:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
8112649c:	e0bffb43 	ldbu	r2,-19(fp)
811264a0:	00c00044 	movi	r3,1
811264a4:	1884983a 	sll	r2,r3,r2
811264a8:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
811264ac:	e0fffe03 	ldbu	r3,-8(fp)
811264b0:	00a04574 	movhi	r2,33045
811264b4:	10970204 	addi	r2,r2,23560
811264b8:	18c7883a 	add	r3,r3,r3
811264bc:	18c7883a 	add	r3,r3,r3
811264c0:	10c5883a 	add	r2,r2,r3
811264c4:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
811264c8:	e0ffff03 	ldbu	r3,-4(fp)
811264cc:	00a04574 	movhi	r2,33045
811264d0:	10970204 	addi	r2,r2,23560
811264d4:	18c7883a 	add	r3,r3,r3
811264d8:	18c7883a 	add	r3,r3,r3
811264dc:	10c5883a 	add	r2,r2,r3
811264e0:	e0fff817 	ldw	r3,-32(fp)
811264e4:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
811264e8:	e0bff817 	ldw	r2,-32(fp)
811264ec:	10800d03 	ldbu	r2,52(r2)
811264f0:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
811264f4:	e0bff817 	ldw	r2,-32(fp)
811264f8:	10800d83 	ldbu	r2,54(r2)
811264fc:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
81126500:	e0bff817 	ldw	r2,-32(fp)
81126504:	10800d43 	ldbu	r2,53(r2)
81126508:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
8112650c:	e0fffc03 	ldbu	r3,-16(fp)
81126510:	d0a07544 	addi	r2,gp,-32299
81126514:	1885883a 	add	r2,r3,r2
81126518:	10c00003 	ldbu	r3,0(r2)
8112651c:	e0bffc83 	ldbu	r2,-14(fp)
81126520:	1884703a 	and	r2,r3,r2
81126524:	10803fcc 	andi	r2,r2,255
81126528:	10002826 	beq	r2,zero,811265cc <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
8112652c:	e0fffc03 	ldbu	r3,-16(fp)
81126530:	e13ffc03 	ldbu	r4,-16(fp)
81126534:	d0a07544 	addi	r2,gp,-32299
81126538:	2085883a 	add	r2,r4,r2
8112653c:	10800003 	ldbu	r2,0(r2)
81126540:	1009883a 	mov	r4,r2
81126544:	e0bffc83 	ldbu	r2,-14(fp)
81126548:	0084303a 	nor	r2,zero,r2
8112654c:	2084703a 	and	r2,r4,r2
81126550:	1009883a 	mov	r4,r2
81126554:	d0a07544 	addi	r2,gp,-32299
81126558:	1885883a 	add	r2,r3,r2
8112655c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
81126560:	e0fffc03 	ldbu	r3,-16(fp)
81126564:	d0a07544 	addi	r2,gp,-32299
81126568:	1885883a 	add	r2,r3,r2
8112656c:	10800003 	ldbu	r2,0(r2)
81126570:	10803fcc 	andi	r2,r2,255
81126574:	1000061e 	bne	r2,zero,81126590 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
81126578:	e0bffc43 	ldbu	r2,-15(fp)
8112657c:	0084303a 	nor	r2,zero,r2
81126580:	1007883a 	mov	r3,r2
81126584:	d0a07503 	ldbu	r2,-32300(gp)
81126588:	1884703a 	and	r2,r3,r2
8112658c:	d0a07505 	stb	r2,-32300(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
81126590:	d0e07503 	ldbu	r3,-32300(gp)
81126594:	e0bffb83 	ldbu	r2,-18(fp)
81126598:	1884b03a 	or	r2,r3,r2
8112659c:	d0a07505 	stb	r2,-32300(gp)
         OSRdyTbl[y_new] |= bitx_new;
811265a0:	e0fffb03 	ldbu	r3,-20(fp)
811265a4:	e13ffb03 	ldbu	r4,-20(fp)
811265a8:	d0a07544 	addi	r2,gp,-32299
811265ac:	2085883a 	add	r2,r4,r2
811265b0:	11000003 	ldbu	r4,0(r2)
811265b4:	e0bffbc3 	ldbu	r2,-17(fp)
811265b8:	2084b03a 	or	r2,r4,r2
811265bc:	1009883a 	mov	r4,r2
811265c0:	d0a07544 	addi	r2,gp,-32299
811265c4:	1885883a 	add	r2,r3,r2
811265c8:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
811265cc:	e0bff817 	ldw	r2,-32(fp)
811265d0:	10800717 	ldw	r2,28(r2)
811265d4:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
811265d8:	e0bff317 	ldw	r2,-52(fp)
811265dc:	10003326 	beq	r2,zero,811266ac <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
811265e0:	e0bffc03 	ldbu	r2,-16(fp)
811265e4:	e0fffc03 	ldbu	r3,-16(fp)
811265e8:	e13ff317 	ldw	r4,-52(fp)
811265ec:	20c7883a 	add	r3,r4,r3
811265f0:	18c002c4 	addi	r3,r3,11
811265f4:	18c00003 	ldbu	r3,0(r3)
811265f8:	1809883a 	mov	r4,r3
811265fc:	e0fffc83 	ldbu	r3,-14(fp)
81126600:	00c6303a 	nor	r3,zero,r3
81126604:	20c6703a 	and	r3,r4,r3
81126608:	1809883a 	mov	r4,r3
8112660c:	e0fff317 	ldw	r3,-52(fp)
81126610:	1885883a 	add	r2,r3,r2
81126614:	108002c4 	addi	r2,r2,11
81126618:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
8112661c:	e0bffc03 	ldbu	r2,-16(fp)
81126620:	e0fff317 	ldw	r3,-52(fp)
81126624:	1885883a 	add	r2,r3,r2
81126628:	108002c4 	addi	r2,r2,11
8112662c:	10800003 	ldbu	r2,0(r2)
81126630:	10803fcc 	andi	r2,r2,255
81126634:	1000091e 	bne	r2,zero,8112665c <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
81126638:	e0bff317 	ldw	r2,-52(fp)
8112663c:	10800283 	ldbu	r2,10(r2)
81126640:	1007883a 	mov	r3,r2
81126644:	e0bffc43 	ldbu	r2,-15(fp)
81126648:	0084303a 	nor	r2,zero,r2
8112664c:	1884703a 	and	r2,r3,r2
81126650:	1007883a 	mov	r3,r2
81126654:	e0bff317 	ldw	r2,-52(fp)
81126658:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
8112665c:	e0bff317 	ldw	r2,-52(fp)
81126660:	10c00283 	ldbu	r3,10(r2)
81126664:	e0bffb83 	ldbu	r2,-18(fp)
81126668:	1884b03a 	or	r2,r3,r2
8112666c:	1007883a 	mov	r3,r2
81126670:	e0bff317 	ldw	r2,-52(fp)
81126674:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
81126678:	e0bffb03 	ldbu	r2,-20(fp)
8112667c:	e0fffb03 	ldbu	r3,-20(fp)
81126680:	e13ff317 	ldw	r4,-52(fp)
81126684:	20c7883a 	add	r3,r4,r3
81126688:	18c002c4 	addi	r3,r3,11
8112668c:	19000003 	ldbu	r4,0(r3)
81126690:	e0fffbc3 	ldbu	r3,-17(fp)
81126694:	20c6b03a 	or	r3,r4,r3
81126698:	1809883a 	mov	r4,r3
8112669c:	e0fff317 	ldw	r3,-52(fp)
811266a0:	1885883a 	add	r2,r3,r2
811266a4:	108002c4 	addi	r2,r2,11
811266a8:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
811266ac:	e0bff817 	ldw	r2,-32(fp)
811266b0:	10800817 	ldw	r2,32(r2)
811266b4:	10004226 	beq	r2,zero,811267c0 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
811266b8:	e0bff817 	ldw	r2,-32(fp)
811266bc:	10800817 	ldw	r2,32(r2)
811266c0:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
811266c4:	e0bff417 	ldw	r2,-48(fp)
811266c8:	10800017 	ldw	r2,0(r2)
811266cc:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
811266d0:	00003906 	br	811267b8 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
811266d4:	e0bffc03 	ldbu	r2,-16(fp)
811266d8:	e0fffc03 	ldbu	r3,-16(fp)
811266dc:	e13ff317 	ldw	r4,-52(fp)
811266e0:	20c7883a 	add	r3,r4,r3
811266e4:	18c002c4 	addi	r3,r3,11
811266e8:	18c00003 	ldbu	r3,0(r3)
811266ec:	1809883a 	mov	r4,r3
811266f0:	e0fffc83 	ldbu	r3,-14(fp)
811266f4:	00c6303a 	nor	r3,zero,r3
811266f8:	20c6703a 	and	r3,r4,r3
811266fc:	1809883a 	mov	r4,r3
81126700:	e0fff317 	ldw	r3,-52(fp)
81126704:	1885883a 	add	r2,r3,r2
81126708:	108002c4 	addi	r2,r2,11
8112670c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
81126710:	e0bffc03 	ldbu	r2,-16(fp)
81126714:	e0fff317 	ldw	r3,-52(fp)
81126718:	1885883a 	add	r2,r3,r2
8112671c:	108002c4 	addi	r2,r2,11
81126720:	10800003 	ldbu	r2,0(r2)
81126724:	10803fcc 	andi	r2,r2,255
81126728:	1000091e 	bne	r2,zero,81126750 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
8112672c:	e0bff317 	ldw	r2,-52(fp)
81126730:	10800283 	ldbu	r2,10(r2)
81126734:	1007883a 	mov	r3,r2
81126738:	e0bffc43 	ldbu	r2,-15(fp)
8112673c:	0084303a 	nor	r2,zero,r2
81126740:	1884703a 	and	r2,r3,r2
81126744:	1007883a 	mov	r3,r2
81126748:	e0bff317 	ldw	r2,-52(fp)
8112674c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
81126750:	e0bff317 	ldw	r2,-52(fp)
81126754:	10c00283 	ldbu	r3,10(r2)
81126758:	e0bffb83 	ldbu	r2,-18(fp)
8112675c:	1884b03a 	or	r2,r3,r2
81126760:	1007883a 	mov	r3,r2
81126764:	e0bff317 	ldw	r2,-52(fp)
81126768:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
8112676c:	e0bffb03 	ldbu	r2,-20(fp)
81126770:	e0fffb03 	ldbu	r3,-20(fp)
81126774:	e13ff317 	ldw	r4,-52(fp)
81126778:	20c7883a 	add	r3,r4,r3
8112677c:	18c002c4 	addi	r3,r3,11
81126780:	19000003 	ldbu	r4,0(r3)
81126784:	e0fffbc3 	ldbu	r3,-17(fp)
81126788:	20c6b03a 	or	r3,r4,r3
8112678c:	1809883a 	mov	r4,r3
81126790:	e0fff317 	ldw	r3,-52(fp)
81126794:	1885883a 	add	r2,r3,r2
81126798:	108002c4 	addi	r2,r2,11
8112679c:	11000005 	stb	r4,0(r2)
            pevents++;
811267a0:	e0bff417 	ldw	r2,-48(fp)
811267a4:	10800104 	addi	r2,r2,4
811267a8:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
811267ac:	e0bff417 	ldw	r2,-48(fp)
811267b0:	10800017 	ldw	r2,0(r2)
811267b4:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
811267b8:	e0bff317 	ldw	r2,-52(fp)
811267bc:	103fc51e 	bne	r2,zero,811266d4 <__reset+0xfb1066d4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
811267c0:	e0bff817 	ldw	r2,-32(fp)
811267c4:	e0ffff03 	ldbu	r3,-4(fp)
811267c8:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
811267cc:	e0bff817 	ldw	r2,-32(fp)
811267d0:	e0fffb03 	ldbu	r3,-20(fp)
811267d4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
811267d8:	e0bff817 	ldw	r2,-32(fp)
811267dc:	e0fffb43 	ldbu	r3,-19(fp)
811267e0:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
811267e4:	e0bff817 	ldw	r2,-32(fp)
811267e8:	e0fffb83 	ldbu	r3,-18(fp)
811267ec:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
811267f0:	e0bff817 	ldw	r2,-32(fp)
811267f4:	e0fffbc3 	ldbu	r3,-17(fp)
811267f8:	10c00d45 	stb	r3,53(r2)
811267fc:	e0bff517 	ldw	r2,-44(fp)
81126800:	e0bffa15 	stw	r2,-24(fp)
81126804:	e0bffa17 	ldw	r2,-24(fp)
81126808:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8112680c:	d0a06943 	ldbu	r2,-32347(gp)
81126810:	10803fcc 	andi	r2,r2,255
81126814:	10800058 	cmpnei	r2,r2,1
81126818:	1000011e 	bne	r2,zero,81126820 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
8112681c:	11221080 	call	81122108 <OS_Sched>
    }
    return (OS_ERR_NONE);
81126820:	0005883a 	mov	r2,zero
}
81126824:	e037883a 	mov	sp,fp
81126828:	dfc00117 	ldw	ra,4(sp)
8112682c:	df000017 	ldw	fp,0(sp)
81126830:	dec00204 	addi	sp,sp,8
81126834:	f800283a 	ret

81126838 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
81126838:	deffee04 	addi	sp,sp,-72
8112683c:	dfc01115 	stw	ra,68(sp)
81126840:	df001015 	stw	fp,64(sp)
81126844:	df001004 	addi	fp,sp,64
81126848:	e13ffc15 	stw	r4,-16(fp)
8112684c:	e17ffd15 	stw	r5,-12(fp)
81126850:	e1bffe15 	stw	r6,-8(fp)
81126854:	3805883a 	mov	r2,r7
81126858:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8112685c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
81126860:	e0bfff03 	ldbu	r2,-4(fp)
81126864:	108007f0 	cmpltui	r2,r2,31
81126868:	1000021e 	bne	r2,zero,81126874 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
8112686c:	00800a84 	movi	r2,42
81126870:	00005706 	br	811269d0 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126874:	0005303a 	rdctl	r2,status
81126878:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112687c:	e0fffb17 	ldw	r3,-20(fp)
81126880:	00bfff84 	movi	r2,-2
81126884:	1884703a 	and	r2,r3,r2
81126888:	1001703a 	wrctl	status,r2
  
  return context;
8112688c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81126890:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
81126894:	d0a07803 	ldbu	r2,-32288(gp)
81126898:	10803fcc 	andi	r2,r2,255
8112689c:	10000626 	beq	r2,zero,811268b8 <OSTaskCreate+0x80>
811268a0:	e0bff317 	ldw	r2,-52(fp)
811268a4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811268a8:	e0bff417 	ldw	r2,-48(fp)
811268ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
811268b0:	00800f04 	movi	r2,60
811268b4:	00004606 	br	811269d0 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
811268b8:	e0ffff03 	ldbu	r3,-4(fp)
811268bc:	00a04574 	movhi	r2,33045
811268c0:	10970204 	addi	r2,r2,23560
811268c4:	18c7883a 	add	r3,r3,r3
811268c8:	18c7883a 	add	r3,r3,r3
811268cc:	10c5883a 	add	r2,r2,r3
811268d0:	10800017 	ldw	r2,0(r2)
811268d4:	1000391e 	bne	r2,zero,811269bc <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
811268d8:	e0ffff03 	ldbu	r3,-4(fp)
811268dc:	00a04574 	movhi	r2,33045
811268e0:	10970204 	addi	r2,r2,23560
811268e4:	18c7883a 	add	r3,r3,r3
811268e8:	18c7883a 	add	r3,r3,r3
811268ec:	10c5883a 	add	r2,r2,r3
811268f0:	00c00044 	movi	r3,1
811268f4:	10c00015 	stw	r3,0(r2)
811268f8:	e0bff317 	ldw	r2,-52(fp)
811268fc:	e0bff515 	stw	r2,-44(fp)
81126900:	e0bff517 	ldw	r2,-44(fp)
81126904:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
81126908:	000f883a 	mov	r7,zero
8112690c:	e1bffe17 	ldw	r6,-8(fp)
81126910:	e17ffd17 	ldw	r5,-12(fp)
81126914:	e13ffc17 	ldw	r4,-16(fp)
81126918:	11318900 	call	81131890 <OSTaskStkInit>
8112691c:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
81126920:	e0bfff03 	ldbu	r2,-4(fp)
81126924:	d8000215 	stw	zero,8(sp)
81126928:	d8000115 	stw	zero,4(sp)
8112692c:	d8000015 	stw	zero,0(sp)
81126930:	000f883a 	mov	r7,zero
81126934:	000d883a 	mov	r6,zero
81126938:	e17ff717 	ldw	r5,-36(fp)
8112693c:	1009883a 	mov	r4,r2
81126940:	11225180 	call	81122518 <OS_TCBInit>
81126944:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
81126948:	e0bff803 	ldbu	r2,-32(fp)
8112694c:	1000061e 	bne	r2,zero,81126968 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
81126950:	d0a06943 	ldbu	r2,-32347(gp)
81126954:	10803fcc 	andi	r2,r2,255
81126958:	10800058 	cmpnei	r2,r2,1
8112695c:	1000151e 	bne	r2,zero,811269b4 <OSTaskCreate+0x17c>
                OS_Sched();
81126960:	11221080 	call	81122108 <OS_Sched>
81126964:	00001306 	br	811269b4 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126968:	0005303a 	rdctl	r2,status
8112696c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126970:	e0fffa17 	ldw	r3,-24(fp)
81126974:	00bfff84 	movi	r2,-2
81126978:	1884703a 	and	r2,r3,r2
8112697c:	1001703a 	wrctl	status,r2
  
  return context;
81126980:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
81126984:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
81126988:	e0ffff03 	ldbu	r3,-4(fp)
8112698c:	00a04574 	movhi	r2,33045
81126990:	10970204 	addi	r2,r2,23560
81126994:	18c7883a 	add	r3,r3,r3
81126998:	18c7883a 	add	r3,r3,r3
8112699c:	10c5883a 	add	r2,r2,r3
811269a0:	10000015 	stw	zero,0(r2)
811269a4:	e0bff317 	ldw	r2,-52(fp)
811269a8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811269ac:	e0bff617 	ldw	r2,-40(fp)
811269b0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
811269b4:	e0bff803 	ldbu	r2,-32(fp)
811269b8:	00000506 	br	811269d0 <OSTaskCreate+0x198>
811269bc:	e0bff317 	ldw	r2,-52(fp)
811269c0:	e0bff915 	stw	r2,-28(fp)
811269c4:	e0bff917 	ldw	r2,-28(fp)
811269c8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
811269cc:	00800a04 	movi	r2,40
}
811269d0:	e037883a 	mov	sp,fp
811269d4:	dfc00117 	ldw	ra,4(sp)
811269d8:	df000017 	ldw	fp,0(sp)
811269dc:	dec00204 	addi	sp,sp,8
811269e0:	f800283a 	ret

811269e4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
811269e4:	deffec04 	addi	sp,sp,-80
811269e8:	dfc01315 	stw	ra,76(sp)
811269ec:	df001215 	stw	fp,72(sp)
811269f0:	df001204 	addi	fp,sp,72
811269f4:	e13ffa15 	stw	r4,-24(fp)
811269f8:	e17ffb15 	stw	r5,-20(fp)
811269fc:	e1bffc15 	stw	r6,-16(fp)
81126a00:	3809883a 	mov	r4,r7
81126a04:	e0c00217 	ldw	r3,8(fp)
81126a08:	e0800617 	ldw	r2,24(fp)
81126a0c:	e13ffd05 	stb	r4,-12(fp)
81126a10:	e0fffe0d 	sth	r3,-8(fp)
81126a14:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
81126a18:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
81126a1c:	e0bffd03 	ldbu	r2,-12(fp)
81126a20:	108007f0 	cmpltui	r2,r2,31
81126a24:	1000021e 	bne	r2,zero,81126a30 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
81126a28:	00800a84 	movi	r2,42
81126a2c:	00006106 	br	81126bb4 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126a30:	0005303a 	rdctl	r2,status
81126a34:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126a38:	e0fff917 	ldw	r3,-28(fp)
81126a3c:	00bfff84 	movi	r2,-2
81126a40:	1884703a 	and	r2,r3,r2
81126a44:	1001703a 	wrctl	status,r2
  
  return context;
81126a48:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81126a4c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
81126a50:	d0a07803 	ldbu	r2,-32288(gp)
81126a54:	10803fcc 	andi	r2,r2,255
81126a58:	10000626 	beq	r2,zero,81126a74 <OSTaskCreateExt+0x90>
81126a5c:	e0bff117 	ldw	r2,-60(fp)
81126a60:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126a64:	e0bff217 	ldw	r2,-56(fp)
81126a68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
81126a6c:	00800f04 	movi	r2,60
81126a70:	00005006 	br	81126bb4 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
81126a74:	e0fffd03 	ldbu	r3,-12(fp)
81126a78:	00a04574 	movhi	r2,33045
81126a7c:	10970204 	addi	r2,r2,23560
81126a80:	18c7883a 	add	r3,r3,r3
81126a84:	18c7883a 	add	r3,r3,r3
81126a88:	10c5883a 	add	r2,r2,r3
81126a8c:	10800017 	ldw	r2,0(r2)
81126a90:	1000431e 	bne	r2,zero,81126ba0 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
81126a94:	e0fffd03 	ldbu	r3,-12(fp)
81126a98:	00a04574 	movhi	r2,33045
81126a9c:	10970204 	addi	r2,r2,23560
81126aa0:	18c7883a 	add	r3,r3,r3
81126aa4:	18c7883a 	add	r3,r3,r3
81126aa8:	10c5883a 	add	r2,r2,r3
81126aac:	00c00044 	movi	r3,1
81126ab0:	10c00015 	stw	r3,0(r2)
81126ab4:	e0bff117 	ldw	r2,-60(fp)
81126ab8:	e0bff315 	stw	r2,-52(fp)
81126abc:	e0bff317 	ldw	r2,-52(fp)
81126ac0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
81126ac4:	e0bfff0b 	ldhu	r2,-4(fp)
81126ac8:	100d883a 	mov	r6,r2
81126acc:	e1400417 	ldw	r5,16(fp)
81126ad0:	e1000317 	ldw	r4,12(fp)
81126ad4:	1127a440 	call	81127a44 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
81126ad8:	e0bfff0b 	ldhu	r2,-4(fp)
81126adc:	100f883a 	mov	r7,r2
81126ae0:	e1bffc17 	ldw	r6,-16(fp)
81126ae4:	e17ffb17 	ldw	r5,-20(fp)
81126ae8:	e13ffa17 	ldw	r4,-24(fp)
81126aec:	11318900 	call	81131890 <OSTaskStkInit>
81126af0:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
81126af4:	e0fffd03 	ldbu	r3,-12(fp)
81126af8:	e13ffe0b 	ldhu	r4,-8(fp)
81126afc:	e0bfff0b 	ldhu	r2,-4(fp)
81126b00:	d8800215 	stw	r2,8(sp)
81126b04:	e0800517 	ldw	r2,20(fp)
81126b08:	d8800115 	stw	r2,4(sp)
81126b0c:	e0800417 	ldw	r2,16(fp)
81126b10:	d8800015 	stw	r2,0(sp)
81126b14:	200f883a 	mov	r7,r4
81126b18:	e1800317 	ldw	r6,12(fp)
81126b1c:	e17ff517 	ldw	r5,-44(fp)
81126b20:	1809883a 	mov	r4,r3
81126b24:	11225180 	call	81122518 <OS_TCBInit>
81126b28:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
81126b2c:	e0bff603 	ldbu	r2,-40(fp)
81126b30:	1000061e 	bne	r2,zero,81126b4c <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
81126b34:	d0a06943 	ldbu	r2,-32347(gp)
81126b38:	10803fcc 	andi	r2,r2,255
81126b3c:	10800058 	cmpnei	r2,r2,1
81126b40:	1000151e 	bne	r2,zero,81126b98 <OSTaskCreateExt+0x1b4>
                OS_Sched();
81126b44:	11221080 	call	81122108 <OS_Sched>
81126b48:	00001306 	br	81126b98 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126b4c:	0005303a 	rdctl	r2,status
81126b50:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126b54:	e0fff817 	ldw	r3,-32(fp)
81126b58:	00bfff84 	movi	r2,-2
81126b5c:	1884703a 	and	r2,r3,r2
81126b60:	1001703a 	wrctl	status,r2
  
  return context;
81126b64:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
81126b68:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
81126b6c:	e0fffd03 	ldbu	r3,-12(fp)
81126b70:	00a04574 	movhi	r2,33045
81126b74:	10970204 	addi	r2,r2,23560
81126b78:	18c7883a 	add	r3,r3,r3
81126b7c:	18c7883a 	add	r3,r3,r3
81126b80:	10c5883a 	add	r2,r2,r3
81126b84:	10000015 	stw	zero,0(r2)
81126b88:	e0bff117 	ldw	r2,-60(fp)
81126b8c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126b90:	e0bff417 	ldw	r2,-48(fp)
81126b94:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
81126b98:	e0bff603 	ldbu	r2,-40(fp)
81126b9c:	00000506 	br	81126bb4 <OSTaskCreateExt+0x1d0>
81126ba0:	e0bff117 	ldw	r2,-60(fp)
81126ba4:	e0bff715 	stw	r2,-36(fp)
81126ba8:	e0bff717 	ldw	r2,-36(fp)
81126bac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
81126bb0:	00800a04 	movi	r2,40
}
81126bb4:	e037883a 	mov	sp,fp
81126bb8:	dfc00117 	ldw	ra,4(sp)
81126bbc:	df000017 	ldw	fp,0(sp)
81126bc0:	dec00204 	addi	sp,sp,8
81126bc4:	f800283a 	ret

81126bc8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
81126bc8:	defff404 	addi	sp,sp,-48
81126bcc:	dfc00b15 	stw	ra,44(sp)
81126bd0:	df000a15 	stw	fp,40(sp)
81126bd4:	df000a04 	addi	fp,sp,40
81126bd8:	2005883a 	mov	r2,r4
81126bdc:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
81126be0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
81126be4:	d0a07803 	ldbu	r2,-32288(gp)
81126be8:	10803fcc 	andi	r2,r2,255
81126bec:	10000226 	beq	r2,zero,81126bf8 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
81126bf0:	00801004 	movi	r2,64
81126bf4:	0000c006 	br	81126ef8 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
81126bf8:	e0bfff03 	ldbu	r2,-4(fp)
81126bfc:	10800798 	cmpnei	r2,r2,30
81126c00:	1000021e 	bne	r2,zero,81126c0c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
81126c04:	00800f84 	movi	r2,62
81126c08:	0000bb06 	br	81126ef8 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
81126c0c:	e0bfff03 	ldbu	r2,-4(fp)
81126c10:	108007b0 	cmpltui	r2,r2,30
81126c14:	1000051e 	bne	r2,zero,81126c2c <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
81126c18:	e0bfff03 	ldbu	r2,-4(fp)
81126c1c:	10803fe0 	cmpeqi	r2,r2,255
81126c20:	1000021e 	bne	r2,zero,81126c2c <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
81126c24:	00800a84 	movi	r2,42
81126c28:	0000b306 	br	81126ef8 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126c2c:	0005303a 	rdctl	r2,status
81126c30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126c34:	e0fffe17 	ldw	r3,-8(fp)
81126c38:	00bfff84 	movi	r2,-2
81126c3c:	1884703a 	and	r2,r3,r2
81126c40:	1001703a 	wrctl	status,r2
  
  return context;
81126c44:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
81126c48:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
81126c4c:	e0bfff03 	ldbu	r2,-4(fp)
81126c50:	10803fd8 	cmpnei	r2,r2,255
81126c54:	1000031e 	bne	r2,zero,81126c64 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
81126c58:	d0a07917 	ldw	r2,-32284(gp)
81126c5c:	10800c83 	ldbu	r2,50(r2)
81126c60:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81126c64:	e0ffff03 	ldbu	r3,-4(fp)
81126c68:	00a04574 	movhi	r2,33045
81126c6c:	10970204 	addi	r2,r2,23560
81126c70:	18c7883a 	add	r3,r3,r3
81126c74:	18c7883a 	add	r3,r3,r3
81126c78:	10c5883a 	add	r2,r2,r3
81126c7c:	10800017 	ldw	r2,0(r2)
81126c80:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
81126c84:	e0bff817 	ldw	r2,-32(fp)
81126c88:	1000061e 	bne	r2,zero,81126ca4 <OSTaskDel+0xdc>
81126c8c:	e0bff617 	ldw	r2,-40(fp)
81126c90:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126c94:	e0bff717 	ldw	r2,-36(fp)
81126c98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81126c9c:	008010c4 	movi	r2,67
81126ca0:	00009506 	br	81126ef8 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
81126ca4:	e0bff817 	ldw	r2,-32(fp)
81126ca8:	10800058 	cmpnei	r2,r2,1
81126cac:	1000061e 	bne	r2,zero,81126cc8 <OSTaskDel+0x100>
81126cb0:	e0bff617 	ldw	r2,-40(fp)
81126cb4:	e0bff915 	stw	r2,-28(fp)
81126cb8:	e0bff917 	ldw	r2,-28(fp)
81126cbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
81126cc0:	00800f44 	movi	r2,61
81126cc4:	00008c06 	br	81126ef8 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
81126cc8:	e0bff817 	ldw	r2,-32(fp)
81126ccc:	10800d03 	ldbu	r2,52(r2)
81126cd0:	10c03fcc 	andi	r3,r2,255
81126cd4:	e0bff817 	ldw	r2,-32(fp)
81126cd8:	10800d03 	ldbu	r2,52(r2)
81126cdc:	11003fcc 	andi	r4,r2,255
81126ce0:	d0a07544 	addi	r2,gp,-32299
81126ce4:	2085883a 	add	r2,r4,r2
81126ce8:	10800003 	ldbu	r2,0(r2)
81126cec:	1009883a 	mov	r4,r2
81126cf0:	e0bff817 	ldw	r2,-32(fp)
81126cf4:	10800d43 	ldbu	r2,53(r2)
81126cf8:	0084303a 	nor	r2,zero,r2
81126cfc:	2084703a 	and	r2,r4,r2
81126d00:	1009883a 	mov	r4,r2
81126d04:	d0a07544 	addi	r2,gp,-32299
81126d08:	1885883a 	add	r2,r3,r2
81126d0c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
81126d10:	e0bff817 	ldw	r2,-32(fp)
81126d14:	10800d03 	ldbu	r2,52(r2)
81126d18:	10c03fcc 	andi	r3,r2,255
81126d1c:	d0a07544 	addi	r2,gp,-32299
81126d20:	1885883a 	add	r2,r3,r2
81126d24:	10800003 	ldbu	r2,0(r2)
81126d28:	10803fcc 	andi	r2,r2,255
81126d2c:	1000071e 	bne	r2,zero,81126d4c <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
81126d30:	e0bff817 	ldw	r2,-32(fp)
81126d34:	10800d83 	ldbu	r2,54(r2)
81126d38:	0084303a 	nor	r2,zero,r2
81126d3c:	1007883a 	mov	r3,r2
81126d40:	d0a07503 	ldbu	r2,-32300(gp)
81126d44:	1884703a 	and	r2,r3,r2
81126d48:	d0a07505 	stb	r2,-32300(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
81126d4c:	e0bff817 	ldw	r2,-32(fp)
81126d50:	10800717 	ldw	r2,28(r2)
81126d54:	10000526 	beq	r2,zero,81126d6c <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
81126d58:	e0bff817 	ldw	r2,-32(fp)
81126d5c:	10800717 	ldw	r2,28(r2)
81126d60:	100b883a 	mov	r5,r2
81126d64:	e13ff817 	ldw	r4,-32(fp)
81126d68:	1121ab40 	call	81121ab4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
81126d6c:	e0bff817 	ldw	r2,-32(fp)
81126d70:	10800817 	ldw	r2,32(r2)
81126d74:	10000526 	beq	r2,zero,81126d8c <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
81126d78:	e0bff817 	ldw	r2,-32(fp)
81126d7c:	10800817 	ldw	r2,32(r2)
81126d80:	100b883a 	mov	r5,r2
81126d84:	e13ff817 	ldw	r4,-32(fp)
81126d88:	1121b6c0 	call	81121b6c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
81126d8c:	e0bff817 	ldw	r2,-32(fp)
81126d90:	10800a17 	ldw	r2,40(r2)
81126d94:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
81126d98:	e0bffb17 	ldw	r2,-20(fp)
81126d9c:	10000226 	beq	r2,zero,81126da8 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
81126da0:	e13ffb17 	ldw	r4,-20(fp)
81126da4:	1123fec0 	call	81123fec <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
81126da8:	e0bff817 	ldw	r2,-32(fp)
81126dac:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
81126db0:	e0bff817 	ldw	r2,-32(fp)
81126db4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
81126db8:	e0bff817 	ldw	r2,-32(fp)
81126dbc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
81126dc0:	d0a06903 	ldbu	r2,-32348(gp)
81126dc4:	10803fcc 	andi	r2,r2,255
81126dc8:	10803fe0 	cmpeqi	r2,r2,255
81126dcc:	1000031e 	bne	r2,zero,81126ddc <OSTaskDel+0x214>
        OSLockNesting++;
81126dd0:	d0a06903 	ldbu	r2,-32348(gp)
81126dd4:	10800044 	addi	r2,r2,1
81126dd8:	d0a06905 	stb	r2,-32348(gp)
81126ddc:	e0bff617 	ldw	r2,-40(fp)
81126de0:	e0bffd15 	stw	r2,-12(fp)
81126de4:	e0bffd17 	ldw	r2,-12(fp)
81126de8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
81126dec:	112169c0 	call	8112169c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126df0:	0005303a 	rdctl	r2,status
81126df4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126df8:	e0fffa17 	ldw	r3,-24(fp)
81126dfc:	00bfff84 	movi	r2,-2
81126e00:	1884703a 	and	r2,r3,r2
81126e04:	1001703a 	wrctl	status,r2
  
  return context;
81126e08:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
81126e0c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
81126e10:	d0a06903 	ldbu	r2,-32348(gp)
81126e14:	10803fcc 	andi	r2,r2,255
81126e18:	10000326 	beq	r2,zero,81126e28 <OSTaskDel+0x260>
        OSLockNesting--;
81126e1c:	d0a06903 	ldbu	r2,-32348(gp)
81126e20:	10bfffc4 	addi	r2,r2,-1
81126e24:	d0a06905 	stb	r2,-32348(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
81126e28:	e13ff817 	ldw	r4,-32(fp)
81126e2c:	1131a100 	call	81131a10 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
81126e30:	d0a07143 	ldbu	r2,-32315(gp)
81126e34:	10bfffc4 	addi	r2,r2,-1
81126e38:	d0a07145 	stb	r2,-32315(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
81126e3c:	e0ffff03 	ldbu	r3,-4(fp)
81126e40:	00a04574 	movhi	r2,33045
81126e44:	10970204 	addi	r2,r2,23560
81126e48:	18c7883a 	add	r3,r3,r3
81126e4c:	18c7883a 	add	r3,r3,r3
81126e50:	10c5883a 	add	r2,r2,r3
81126e54:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
81126e58:	e0bff817 	ldw	r2,-32(fp)
81126e5c:	10800617 	ldw	r2,24(r2)
81126e60:	1000071e 	bne	r2,zero,81126e80 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
81126e64:	e0bff817 	ldw	r2,-32(fp)
81126e68:	10800517 	ldw	r2,20(r2)
81126e6c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
81126e70:	e0bff817 	ldw	r2,-32(fp)
81126e74:	10800517 	ldw	r2,20(r2)
81126e78:	d0a06c15 	stw	r2,-32336(gp)
81126e7c:	00000a06 	br	81126ea8 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
81126e80:	e0bff817 	ldw	r2,-32(fp)
81126e84:	10800617 	ldw	r2,24(r2)
81126e88:	e0fff817 	ldw	r3,-32(fp)
81126e8c:	18c00517 	ldw	r3,20(r3)
81126e90:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
81126e94:	e0bff817 	ldw	r2,-32(fp)
81126e98:	10800517 	ldw	r2,20(r2)
81126e9c:	e0fff817 	ldw	r3,-32(fp)
81126ea0:	18c00617 	ldw	r3,24(r3)
81126ea4:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
81126ea8:	d0e07017 	ldw	r3,-32320(gp)
81126eac:	e0bff817 	ldw	r2,-32(fp)
81126eb0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
81126eb4:	e0bff817 	ldw	r2,-32(fp)
81126eb8:	d0a07015 	stw	r2,-32320(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
81126ebc:	e0bff817 	ldw	r2,-32(fp)
81126ec0:	00c00fc4 	movi	r3,63
81126ec4:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
81126ec8:	e0bff817 	ldw	r2,-32(fp)
81126ecc:	10001345 	stb	zero,77(r2)
81126ed0:	e0bff617 	ldw	r2,-40(fp)
81126ed4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126ed8:	e0bffc17 	ldw	r2,-16(fp)
81126edc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
81126ee0:	d0a06943 	ldbu	r2,-32347(gp)
81126ee4:	10803fcc 	andi	r2,r2,255
81126ee8:	10800058 	cmpnei	r2,r2,1
81126eec:	1000011e 	bne	r2,zero,81126ef4 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
81126ef0:	11221080 	call	81122108 <OS_Sched>
    }
    return (OS_ERR_NONE);
81126ef4:	0005883a 	mov	r2,zero
}
81126ef8:	e037883a 	mov	sp,fp
81126efc:	dfc00117 	ldw	ra,4(sp)
81126f00:	df000017 	ldw	fp,0(sp)
81126f04:	dec00204 	addi	sp,sp,8
81126f08:	f800283a 	ret

81126f0c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
81126f0c:	defff504 	addi	sp,sp,-44
81126f10:	df000a15 	stw	fp,40(sp)
81126f14:	df000a04 	addi	fp,sp,40
81126f18:	2005883a 	mov	r2,r4
81126f1c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81126f20:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
81126f24:	e0bfff03 	ldbu	r2,-4(fp)
81126f28:	10800798 	cmpnei	r2,r2,30
81126f2c:	1000021e 	bne	r2,zero,81126f38 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
81126f30:	00800f84 	movi	r2,62
81126f34:	00004506 	br	8112704c <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
81126f38:	e0bfff03 	ldbu	r2,-4(fp)
81126f3c:	108007b0 	cmpltui	r2,r2,30
81126f40:	1000051e 	bne	r2,zero,81126f58 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
81126f44:	e0bfff03 	ldbu	r2,-4(fp)
81126f48:	10803fe0 	cmpeqi	r2,r2,255
81126f4c:	1000021e 	bne	r2,zero,81126f58 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
81126f50:	00800a84 	movi	r2,42
81126f54:	00003d06 	br	8112704c <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
81126f58:	e0bfff03 	ldbu	r2,-4(fp)
81126f5c:	10803fd8 	cmpnei	r2,r2,255
81126f60:	1000111e 	bne	r2,zero,81126fa8 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126f64:	0005303a 	rdctl	r2,status
81126f68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126f6c:	e0fff917 	ldw	r3,-28(fp)
81126f70:	00bfff84 	movi	r2,-2
81126f74:	1884703a 	and	r2,r3,r2
81126f78:	1001703a 	wrctl	status,r2
  
  return context;
81126f7c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
81126f80:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
81126f84:	d0a07917 	ldw	r2,-32284(gp)
81126f88:	10800dc3 	ldbu	r2,55(r2)
81126f8c:	e0bff805 	stb	r2,-32(fp)
81126f90:	e0bff617 	ldw	r2,-40(fp)
81126f94:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126f98:	e0bffe17 	ldw	r2,-8(fp)
81126f9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
81126fa0:	e0bff803 	ldbu	r2,-32(fp)
81126fa4:	00002906 	br	8112704c <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126fa8:	0005303a 	rdctl	r2,status
81126fac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126fb0:	e0fff717 	ldw	r3,-36(fp)
81126fb4:	00bfff84 	movi	r2,-2
81126fb8:	1884703a 	and	r2,r3,r2
81126fbc:	1001703a 	wrctl	status,r2
  
  return context;
81126fc0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
81126fc4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
81126fc8:	e0ffff03 	ldbu	r3,-4(fp)
81126fcc:	00a04574 	movhi	r2,33045
81126fd0:	10970204 	addi	r2,r2,23560
81126fd4:	18c7883a 	add	r3,r3,r3
81126fd8:	18c7883a 	add	r3,r3,r3
81126fdc:	10c5883a 	add	r2,r2,r3
81126fe0:	10800017 	ldw	r2,0(r2)
81126fe4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
81126fe8:	e0bffb17 	ldw	r2,-20(fp)
81126fec:	1000061e 	bne	r2,zero,81127008 <OSTaskDelReq+0xfc>
81126ff0:	e0bff617 	ldw	r2,-40(fp)
81126ff4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126ff8:	e0bffa17 	ldw	r2,-24(fp)
81126ffc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
81127000:	008010c4 	movi	r2,67
81127004:	00001106 	br	8112704c <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
81127008:	e0bffb17 	ldw	r2,-20(fp)
8112700c:	10800058 	cmpnei	r2,r2,1
81127010:	1000061e 	bne	r2,zero,8112702c <OSTaskDelReq+0x120>
81127014:	e0bff617 	ldw	r2,-40(fp)
81127018:	e0bffc15 	stw	r2,-16(fp)
8112701c:	e0bffc17 	ldw	r2,-16(fp)
81127020:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
81127024:	00800f44 	movi	r2,61
81127028:	00000806 	br	8112704c <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
8112702c:	e0bffb17 	ldw	r2,-20(fp)
81127030:	00c00fc4 	movi	r3,63
81127034:	10c00dc5 	stb	r3,55(r2)
81127038:	e0bff617 	ldw	r2,-40(fp)
8112703c:	e0bffd15 	stw	r2,-12(fp)
81127040:	e0bffd17 	ldw	r2,-12(fp)
81127044:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81127048:	0005883a 	mov	r2,zero
}
8112704c:	e037883a 	mov	sp,fp
81127050:	df000017 	ldw	fp,0(sp)
81127054:	dec00104 	addi	sp,sp,4
81127058:	f800283a 	ret

8112705c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
8112705c:	defff404 	addi	sp,sp,-48
81127060:	dfc00b15 	stw	ra,44(sp)
81127064:	df000a15 	stw	fp,40(sp)
81127068:	df000a04 	addi	fp,sp,40
8112706c:	2005883a 	mov	r2,r4
81127070:	e17ffe15 	stw	r5,-8(fp)
81127074:	e1bfff15 	stw	r6,-4(fp)
81127078:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
8112707c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
81127080:	e0bfff17 	ldw	r2,-4(fp)
81127084:	1000021e 	bne	r2,zero,81127090 <OSTaskNameGet+0x34>
        return (0);
81127088:	0005883a 	mov	r2,zero
8112708c:	00005406 	br	811271e0 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
81127090:	e0bffd03 	ldbu	r2,-12(fp)
81127094:	108007f0 	cmpltui	r2,r2,31
81127098:	1000081e 	bne	r2,zero,811270bc <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
8112709c:	e0bffd03 	ldbu	r2,-12(fp)
811270a0:	10803fe0 	cmpeqi	r2,r2,255
811270a4:	1000051e 	bne	r2,zero,811270bc <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
811270a8:	e0bfff17 	ldw	r2,-4(fp)
811270ac:	00c00a84 	movi	r3,42
811270b0:	10c00005 	stb	r3,0(r2)
            return (0);
811270b4:	0005883a 	mov	r2,zero
811270b8:	00004906 	br	811271e0 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
811270bc:	e0bffe17 	ldw	r2,-8(fp)
811270c0:	1000051e 	bne	r2,zero,811270d8 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
811270c4:	e0bfff17 	ldw	r2,-4(fp)
811270c8:	00c00304 	movi	r3,12
811270cc:	10c00005 	stb	r3,0(r2)
        return (0);
811270d0:	0005883a 	mov	r2,zero
811270d4:	00004206 	br	811271e0 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
811270d8:	d0a07803 	ldbu	r2,-32288(gp)
811270dc:	10803fcc 	andi	r2,r2,255
811270e0:	10000526 	beq	r2,zero,811270f8 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
811270e4:	e0bfff17 	ldw	r2,-4(fp)
811270e8:	00c00444 	movi	r3,17
811270ec:	10c00005 	stb	r3,0(r2)
        return (0);
811270f0:	0005883a 	mov	r2,zero
811270f4:	00003a06 	br	811271e0 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811270f8:	0005303a 	rdctl	r2,status
811270fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127100:	e0fffc17 	ldw	r3,-16(fp)
81127104:	00bfff84 	movi	r2,-2
81127108:	1884703a 	and	r2,r3,r2
8112710c:	1001703a 	wrctl	status,r2
  
  return context;
81127110:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81127114:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
81127118:	e0bffd03 	ldbu	r2,-12(fp)
8112711c:	10803fd8 	cmpnei	r2,r2,255
81127120:	1000031e 	bne	r2,zero,81127130 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
81127124:	d0a07917 	ldw	r2,-32284(gp)
81127128:	10800c83 	ldbu	r2,50(r2)
8112712c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81127130:	e0fffd03 	ldbu	r3,-12(fp)
81127134:	00a04574 	movhi	r2,33045
81127138:	10970204 	addi	r2,r2,23560
8112713c:	18c7883a 	add	r3,r3,r3
81127140:	18c7883a 	add	r3,r3,r3
81127144:	10c5883a 	add	r2,r2,r3
81127148:	10800017 	ldw	r2,0(r2)
8112714c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
81127150:	e0bff817 	ldw	r2,-32(fp)
81127154:	1000091e 	bne	r2,zero,8112717c <OSTaskNameGet+0x120>
81127158:	e0bff617 	ldw	r2,-40(fp)
8112715c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127160:	e0bff717 	ldw	r2,-36(fp)
81127164:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
81127168:	e0bfff17 	ldw	r2,-4(fp)
8112716c:	00c010c4 	movi	r3,67
81127170:	10c00005 	stb	r3,0(r2)
        return (0);
81127174:	0005883a 	mov	r2,zero
81127178:	00001906 	br	811271e0 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
8112717c:	e0bff817 	ldw	r2,-32(fp)
81127180:	10800058 	cmpnei	r2,r2,1
81127184:	1000091e 	bne	r2,zero,811271ac <OSTaskNameGet+0x150>
81127188:	e0bff617 	ldw	r2,-40(fp)
8112718c:	e0bff915 	stw	r2,-28(fp)
81127190:	e0bff917 	ldw	r2,-28(fp)
81127194:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
81127198:	e0bfff17 	ldw	r2,-4(fp)
8112719c:	00c010c4 	movi	r3,67
811271a0:	10c00005 	stb	r3,0(r2)
        return (0);
811271a4:	0005883a 	mov	r2,zero
811271a8:	00000d06 	br	811271e0 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
811271ac:	e0bff817 	ldw	r2,-32(fp)
811271b0:	10801304 	addi	r2,r2,76
811271b4:	100b883a 	mov	r5,r2
811271b8:	e13ffe17 	ldw	r4,-8(fp)
811271bc:	112224c0 	call	8112224c <OS_StrCopy>
811271c0:	e0bffb05 	stb	r2,-20(fp)
811271c4:	e0bff617 	ldw	r2,-40(fp)
811271c8:	e0bffa15 	stw	r2,-24(fp)
811271cc:	e0bffa17 	ldw	r2,-24(fp)
811271d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811271d4:	e0bfff17 	ldw	r2,-4(fp)
811271d8:	10000005 	stb	zero,0(r2)
    return (len);
811271dc:	e0bffb03 	ldbu	r2,-20(fp)
}
811271e0:	e037883a 	mov	sp,fp
811271e4:	dfc00117 	ldw	ra,4(sp)
811271e8:	df000017 	ldw	fp,0(sp)
811271ec:	dec00204 	addi	sp,sp,8
811271f0:	f800283a 	ret

811271f4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
811271f4:	defff304 	addi	sp,sp,-52
811271f8:	dfc00c15 	stw	ra,48(sp)
811271fc:	df000b15 	stw	fp,44(sp)
81127200:	df000b04 	addi	fp,sp,44
81127204:	2005883a 	mov	r2,r4
81127208:	e17ffe15 	stw	r5,-8(fp)
8112720c:	e1bfff15 	stw	r6,-4(fp)
81127210:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
81127214:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
81127218:	e0bfff17 	ldw	r2,-4(fp)
8112721c:	10005c26 	beq	r2,zero,81127390 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
81127220:	e0bffd03 	ldbu	r2,-12(fp)
81127224:	108007f0 	cmpltui	r2,r2,31
81127228:	1000071e 	bne	r2,zero,81127248 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
8112722c:	e0bffd03 	ldbu	r2,-12(fp)
81127230:	10803fe0 	cmpeqi	r2,r2,255
81127234:	1000041e 	bne	r2,zero,81127248 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
81127238:	e0bfff17 	ldw	r2,-4(fp)
8112723c:	00c00a84 	movi	r3,42
81127240:	10c00005 	stb	r3,0(r2)
            return;
81127244:	00005306 	br	81127394 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
81127248:	e0bffe17 	ldw	r2,-8(fp)
8112724c:	1000041e 	bne	r2,zero,81127260 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
81127250:	e0bfff17 	ldw	r2,-4(fp)
81127254:	00c00304 	movi	r3,12
81127258:	10c00005 	stb	r3,0(r2)
        return;
8112725c:	00004d06 	br	81127394 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
81127260:	d0a07803 	ldbu	r2,-32288(gp)
81127264:	10803fcc 	andi	r2,r2,255
81127268:	10000426 	beq	r2,zero,8112727c <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
8112726c:	e0bfff17 	ldw	r2,-4(fp)
81127270:	00c00484 	movi	r3,18
81127274:	10c00005 	stb	r3,0(r2)
        return;
81127278:	00004606 	br	81127394 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112727c:	0005303a 	rdctl	r2,status
81127280:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127284:	e0fffc17 	ldw	r3,-16(fp)
81127288:	00bfff84 	movi	r2,-2
8112728c:	1884703a 	and	r2,r3,r2
81127290:	1001703a 	wrctl	status,r2
  
  return context;
81127294:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81127298:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
8112729c:	e0bffd03 	ldbu	r2,-12(fp)
811272a0:	10803fd8 	cmpnei	r2,r2,255
811272a4:	1000031e 	bne	r2,zero,811272b4 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
811272a8:	d0a07917 	ldw	r2,-32284(gp)
811272ac:	10800c83 	ldbu	r2,50(r2)
811272b0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
811272b4:	e0fffd03 	ldbu	r3,-12(fp)
811272b8:	00a04574 	movhi	r2,33045
811272bc:	10970204 	addi	r2,r2,23560
811272c0:	18c7883a 	add	r3,r3,r3
811272c4:	18c7883a 	add	r3,r3,r3
811272c8:	10c5883a 	add	r2,r2,r3
811272cc:	10800017 	ldw	r2,0(r2)
811272d0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
811272d4:	e0bff717 	ldw	r2,-36(fp)
811272d8:	1000081e 	bne	r2,zero,811272fc <OSTaskNameSet+0x108>
811272dc:	e0bff517 	ldw	r2,-44(fp)
811272e0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811272e4:	e0bff617 	ldw	r2,-40(fp)
811272e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
811272ec:	e0bfff17 	ldw	r2,-4(fp)
811272f0:	00c010c4 	movi	r3,67
811272f4:	10c00005 	stb	r3,0(r2)
        return;
811272f8:	00002606 	br	81127394 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
811272fc:	e0bff717 	ldw	r2,-36(fp)
81127300:	10800058 	cmpnei	r2,r2,1
81127304:	1000081e 	bne	r2,zero,81127328 <OSTaskNameSet+0x134>
81127308:	e0bff517 	ldw	r2,-44(fp)
8112730c:	e0bff815 	stw	r2,-32(fp)
81127310:	e0bff817 	ldw	r2,-32(fp)
81127314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
81127318:	e0bfff17 	ldw	r2,-4(fp)
8112731c:	00c010c4 	movi	r3,67
81127320:	10c00005 	stb	r3,0(r2)
        return;
81127324:	00001b06 	br	81127394 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
81127328:	e13ffe17 	ldw	r4,-8(fp)
8112732c:	11222c00 	call	811222c0 <OS_StrLen>
81127330:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
81127334:	e0bffa03 	ldbu	r2,-24(fp)
81127338:	10800830 	cmpltui	r2,r2,32
8112733c:	1000081e 	bne	r2,zero,81127360 <OSTaskNameSet+0x16c>
81127340:	e0bff517 	ldw	r2,-44(fp)
81127344:	e0bff915 	stw	r2,-28(fp)
81127348:	e0bff917 	ldw	r2,-28(fp)
8112734c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
81127350:	e0bfff17 	ldw	r2,-4(fp)
81127354:	00c01044 	movi	r3,65
81127358:	10c00005 	stb	r3,0(r2)
        return;
8112735c:	00000d06 	br	81127394 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
81127360:	e0bff717 	ldw	r2,-36(fp)
81127364:	10801304 	addi	r2,r2,76
81127368:	e17ffe17 	ldw	r5,-8(fp)
8112736c:	1009883a 	mov	r4,r2
81127370:	112224c0 	call	8112224c <OS_StrCopy>
81127374:	e0bff517 	ldw	r2,-44(fp)
81127378:	e0bffb15 	stw	r2,-20(fp)
8112737c:	e0bffb17 	ldw	r2,-20(fp)
81127380:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81127384:	e0bfff17 	ldw	r2,-4(fp)
81127388:	10000005 	stb	zero,0(r2)
8112738c:	00000106 	br	81127394 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
81127390:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81127394:	e037883a 	mov	sp,fp
81127398:	dfc00117 	ldw	ra,4(sp)
8112739c:	df000017 	ldw	fp,0(sp)
811273a0:	dec00204 	addi	sp,sp,8
811273a4:	f800283a 	ret

811273a8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
811273a8:	defff404 	addi	sp,sp,-48
811273ac:	dfc00b15 	stw	ra,44(sp)
811273b0:	df000a15 	stw	fp,40(sp)
811273b4:	df000a04 	addi	fp,sp,40
811273b8:	2005883a 	mov	r2,r4
811273bc:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
811273c0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
811273c4:	e0bfff03 	ldbu	r2,-4(fp)
811273c8:	108007b0 	cmpltui	r2,r2,30
811273cc:	1000021e 	bne	r2,zero,811273d8 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
811273d0:	00800a84 	movi	r2,42
811273d4:	00006406 	br	81127568 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811273d8:	0005303a 	rdctl	r2,status
811273dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811273e0:	e0fffe17 	ldw	r3,-8(fp)
811273e4:	00bfff84 	movi	r2,-2
811273e8:	1884703a 	and	r2,r3,r2
811273ec:	1001703a 	wrctl	status,r2
  
  return context;
811273f0:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811273f4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
811273f8:	e0ffff03 	ldbu	r3,-4(fp)
811273fc:	00a04574 	movhi	r2,33045
81127400:	10970204 	addi	r2,r2,23560
81127404:	18c7883a 	add	r3,r3,r3
81127408:	18c7883a 	add	r3,r3,r3
8112740c:	10c5883a 	add	r2,r2,r3
81127410:	10800017 	ldw	r2,0(r2)
81127414:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
81127418:	e0bff817 	ldw	r2,-32(fp)
8112741c:	1000061e 	bne	r2,zero,81127438 <OSTaskResume+0x90>
81127420:	e0bff617 	ldw	r2,-40(fp)
81127424:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127428:	e0bff717 	ldw	r2,-36(fp)
8112742c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
81127430:	00801184 	movi	r2,70
81127434:	00004c06 	br	81127568 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
81127438:	e0bff817 	ldw	r2,-32(fp)
8112743c:	10800058 	cmpnei	r2,r2,1
81127440:	1000061e 	bne	r2,zero,8112745c <OSTaskResume+0xb4>
81127444:	e0bff617 	ldw	r2,-40(fp)
81127448:	e0bff915 	stw	r2,-28(fp)
8112744c:	e0bff917 	ldw	r2,-28(fp)
81127450:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81127454:	008010c4 	movi	r2,67
81127458:	00004306 	br	81127568 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
8112745c:	e0bff817 	ldw	r2,-32(fp)
81127460:	10800c03 	ldbu	r2,48(r2)
81127464:	10803fcc 	andi	r2,r2,255
81127468:	1080020c 	andi	r2,r2,8
8112746c:	10003926 	beq	r2,zero,81127554 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
81127470:	e0bff817 	ldw	r2,-32(fp)
81127474:	10c00c03 	ldbu	r3,48(r2)
81127478:	00bffdc4 	movi	r2,-9
8112747c:	1884703a 	and	r2,r3,r2
81127480:	1007883a 	mov	r3,r2
81127484:	e0bff817 	ldw	r2,-32(fp)
81127488:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
8112748c:	e0bff817 	ldw	r2,-32(fp)
81127490:	10800c03 	ldbu	r2,48(r2)
81127494:	10803fcc 	andi	r2,r2,255
81127498:	1000281e 	bne	r2,zero,8112753c <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
8112749c:	e0bff817 	ldw	r2,-32(fp)
811274a0:	10800b8b 	ldhu	r2,46(r2)
811274a4:	10bfffcc 	andi	r2,r2,65535
811274a8:	10001f1e 	bne	r2,zero,81127528 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
811274ac:	e0bff817 	ldw	r2,-32(fp)
811274b0:	10c00d83 	ldbu	r3,54(r2)
811274b4:	d0a07503 	ldbu	r2,-32300(gp)
811274b8:	1884b03a 	or	r2,r3,r2
811274bc:	d0a07505 	stb	r2,-32300(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
811274c0:	e0bff817 	ldw	r2,-32(fp)
811274c4:	10800d03 	ldbu	r2,52(r2)
811274c8:	10c03fcc 	andi	r3,r2,255
811274cc:	e0bff817 	ldw	r2,-32(fp)
811274d0:	10800d03 	ldbu	r2,52(r2)
811274d4:	11003fcc 	andi	r4,r2,255
811274d8:	d0a07544 	addi	r2,gp,-32299
811274dc:	2085883a 	add	r2,r4,r2
811274e0:	11000003 	ldbu	r4,0(r2)
811274e4:	e0bff817 	ldw	r2,-32(fp)
811274e8:	10800d43 	ldbu	r2,53(r2)
811274ec:	2084b03a 	or	r2,r4,r2
811274f0:	1009883a 	mov	r4,r2
811274f4:	d0a07544 	addi	r2,gp,-32299
811274f8:	1885883a 	add	r2,r3,r2
811274fc:	11000005 	stb	r4,0(r2)
81127500:	e0bff617 	ldw	r2,-40(fp)
81127504:	e0bffa15 	stw	r2,-24(fp)
81127508:	e0bffa17 	ldw	r2,-24(fp)
8112750c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
81127510:	d0a06943 	ldbu	r2,-32347(gp)
81127514:	10803fcc 	andi	r2,r2,255
81127518:	10800058 	cmpnei	r2,r2,1
8112751c:	10000b1e 	bne	r2,zero,8112754c <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
81127520:	11221080 	call	81122108 <OS_Sched>
81127524:	00000906 	br	8112754c <OSTaskResume+0x1a4>
81127528:	e0bff617 	ldw	r2,-40(fp)
8112752c:	e0bffb15 	stw	r2,-20(fp)
81127530:	e0bffb17 	ldw	r2,-20(fp)
81127534:	1001703a 	wrctl	status,r2
81127538:	00000406 	br	8112754c <OSTaskResume+0x1a4>
8112753c:	e0bff617 	ldw	r2,-40(fp)
81127540:	e0bffc15 	stw	r2,-16(fp)
81127544:	e0bffc17 	ldw	r2,-16(fp)
81127548:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
8112754c:	0005883a 	mov	r2,zero
81127550:	00000506 	br	81127568 <OSTaskResume+0x1c0>
81127554:	e0bff617 	ldw	r2,-40(fp)
81127558:	e0bffd15 	stw	r2,-12(fp)
8112755c:	e0bffd17 	ldw	r2,-12(fp)
81127560:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
81127564:	00801104 	movi	r2,68
}
81127568:	e037883a 	mov	sp,fp
8112756c:	dfc00117 	ldw	ra,4(sp)
81127570:	df000017 	ldw	fp,0(sp)
81127574:	dec00204 	addi	sp,sp,8
81127578:	f800283a 	ret

8112757c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
8112757c:	defff304 	addi	sp,sp,-52
81127580:	df000c15 	stw	fp,48(sp)
81127584:	df000c04 	addi	fp,sp,48
81127588:	2005883a 	mov	r2,r4
8112758c:	e17fff15 	stw	r5,-4(fp)
81127590:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81127594:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
81127598:	e0bffe03 	ldbu	r2,-8(fp)
8112759c:	108007f0 	cmpltui	r2,r2,31
811275a0:	1000051e 	bne	r2,zero,811275b8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
811275a4:	e0bffe03 	ldbu	r2,-8(fp)
811275a8:	10803fe0 	cmpeqi	r2,r2,255
811275ac:	1000021e 	bne	r2,zero,811275b8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
811275b0:	00800a84 	movi	r2,42
811275b4:	00005d06 	br	8112772c <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
811275b8:	e0bfff17 	ldw	r2,-4(fp)
811275bc:	1000021e 	bne	r2,zero,811275c8 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
811275c0:	00800244 	movi	r2,9
811275c4:	00005906 	br	8112772c <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
811275c8:	e0bfff17 	ldw	r2,-4(fp)
811275cc:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
811275d0:	e0bfff17 	ldw	r2,-4(fp)
811275d4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811275d8:	0005303a 	rdctl	r2,status
811275dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811275e0:	e0fffd17 	ldw	r3,-12(fp)
811275e4:	00bfff84 	movi	r2,-2
811275e8:	1884703a 	and	r2,r3,r2
811275ec:	1001703a 	wrctl	status,r2
  
  return context;
811275f0:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
811275f4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
811275f8:	e0bffe03 	ldbu	r2,-8(fp)
811275fc:	10803fd8 	cmpnei	r2,r2,255
81127600:	1000031e 	bne	r2,zero,81127610 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
81127604:	d0a07917 	ldw	r2,-32284(gp)
81127608:	10800c83 	ldbu	r2,50(r2)
8112760c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81127610:	e0fffe03 	ldbu	r3,-8(fp)
81127614:	00a04574 	movhi	r2,33045
81127618:	10970204 	addi	r2,r2,23560
8112761c:	18c7883a 	add	r3,r3,r3
81127620:	18c7883a 	add	r3,r3,r3
81127624:	10c5883a 	add	r2,r2,r3
81127628:	10800017 	ldw	r2,0(r2)
8112762c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
81127630:	e0bff817 	ldw	r2,-32(fp)
81127634:	1000061e 	bne	r2,zero,81127650 <OSTaskStkChk+0xd4>
81127638:	e0bff617 	ldw	r2,-40(fp)
8112763c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127640:	e0bff717 	ldw	r2,-36(fp)
81127644:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81127648:	008010c4 	movi	r2,67
8112764c:	00003706 	br	8112772c <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
81127650:	e0bff817 	ldw	r2,-32(fp)
81127654:	10800058 	cmpnei	r2,r2,1
81127658:	1000061e 	bne	r2,zero,81127674 <OSTaskStkChk+0xf8>
8112765c:	e0bff617 	ldw	r2,-40(fp)
81127660:	e0bff915 	stw	r2,-28(fp)
81127664:	e0bff917 	ldw	r2,-28(fp)
81127668:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112766c:	008010c4 	movi	r2,67
81127670:	00002e06 	br	8112772c <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
81127674:	e0bff817 	ldw	r2,-32(fp)
81127678:	1080040b 	ldhu	r2,16(r2)
8112767c:	10bfffcc 	andi	r2,r2,65535
81127680:	1080004c 	andi	r2,r2,1
81127684:	1000061e 	bne	r2,zero,811276a0 <OSTaskStkChk+0x124>
81127688:	e0bff617 	ldw	r2,-40(fp)
8112768c:	e0bffa15 	stw	r2,-24(fp)
81127690:	e0bffa17 	ldw	r2,-24(fp)
81127694:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
81127698:	00801144 	movi	r2,69
8112769c:	00002306 	br	8112772c <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
811276a0:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
811276a4:	e0bff817 	ldw	r2,-32(fp)
811276a8:	10800317 	ldw	r2,12(r2)
811276ac:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
811276b0:	e0bff817 	ldw	r2,-32(fp)
811276b4:	10800217 	ldw	r2,8(r2)
811276b8:	e0bff415 	stw	r2,-48(fp)
811276bc:	e0bff617 	ldw	r2,-40(fp)
811276c0:	e0bffb15 	stw	r2,-20(fp)
811276c4:	e0bffb17 	ldw	r2,-20(fp)
811276c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
811276cc:	00000306 	br	811276dc <OSTaskStkChk+0x160>
        nfree++;
811276d0:	e0bff517 	ldw	r2,-44(fp)
811276d4:	10800044 	addi	r2,r2,1
811276d8:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
811276dc:	e0bff417 	ldw	r2,-48(fp)
811276e0:	10c00104 	addi	r3,r2,4
811276e4:	e0fff415 	stw	r3,-48(fp)
811276e8:	10800017 	ldw	r2,0(r2)
811276ec:	103ff826 	beq	r2,zero,811276d0 <__reset+0xfb1076d0>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
811276f0:	e0bff517 	ldw	r2,-44(fp)
811276f4:	1085883a 	add	r2,r2,r2
811276f8:	1085883a 	add	r2,r2,r2
811276fc:	1007883a 	mov	r3,r2
81127700:	e0bfff17 	ldw	r2,-4(fp)
81127704:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
81127708:	e0fffc17 	ldw	r3,-16(fp)
8112770c:	e0bff517 	ldw	r2,-44(fp)
81127710:	1885c83a 	sub	r2,r3,r2
81127714:	1085883a 	add	r2,r2,r2
81127718:	1085883a 	add	r2,r2,r2
8112771c:	1007883a 	mov	r3,r2
81127720:	e0bfff17 	ldw	r2,-4(fp)
81127724:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
81127728:	0005883a 	mov	r2,zero
}
8112772c:	e037883a 	mov	sp,fp
81127730:	df000017 	ldw	fp,0(sp)
81127734:	dec00104 	addi	sp,sp,4
81127738:	f800283a 	ret

8112773c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
8112773c:	defff504 	addi	sp,sp,-44
81127740:	dfc00a15 	stw	ra,40(sp)
81127744:	df000915 	stw	fp,36(sp)
81127748:	df000904 	addi	fp,sp,36
8112774c:	2005883a 	mov	r2,r4
81127750:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81127754:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
81127758:	e0bfff03 	ldbu	r2,-4(fp)
8112775c:	10800798 	cmpnei	r2,r2,30
81127760:	1000021e 	bne	r2,zero,8112776c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
81127764:	008011c4 	movi	r2,71
81127768:	00006806 	br	8112790c <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8112776c:	e0bfff03 	ldbu	r2,-4(fp)
81127770:	108007b0 	cmpltui	r2,r2,30
81127774:	1000051e 	bne	r2,zero,8112778c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
81127778:	e0bfff03 	ldbu	r2,-4(fp)
8112777c:	10803fe0 	cmpeqi	r2,r2,255
81127780:	1000021e 	bne	r2,zero,8112778c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
81127784:	00800a84 	movi	r2,42
81127788:	00006006 	br	8112790c <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112778c:	0005303a 	rdctl	r2,status
81127790:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127794:	e0fffe17 	ldw	r3,-8(fp)
81127798:	00bfff84 	movi	r2,-2
8112779c:	1884703a 	and	r2,r3,r2
811277a0:	1001703a 	wrctl	status,r2
  
  return context;
811277a4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
811277a8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
811277ac:	e0bfff03 	ldbu	r2,-4(fp)
811277b0:	10803fd8 	cmpnei	r2,r2,255
811277b4:	1000061e 	bne	r2,zero,811277d0 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
811277b8:	d0a07917 	ldw	r2,-32284(gp)
811277bc:	10800c83 	ldbu	r2,50(r2)
811277c0:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
811277c4:	00800044 	movi	r2,1
811277c8:	e0bff705 	stb	r2,-36(fp)
811277cc:	00000906 	br	811277f4 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
811277d0:	d0a07917 	ldw	r2,-32284(gp)
811277d4:	10800c83 	ldbu	r2,50(r2)
811277d8:	10c03fcc 	andi	r3,r2,255
811277dc:	e0bfff03 	ldbu	r2,-4(fp)
811277e0:	1880031e 	bne	r3,r2,811277f0 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
811277e4:	00800044 	movi	r2,1
811277e8:	e0bff705 	stb	r2,-36(fp)
811277ec:	00000106 	br	811277f4 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
811277f0:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
811277f4:	e0ffff03 	ldbu	r3,-4(fp)
811277f8:	00a04574 	movhi	r2,33045
811277fc:	10970204 	addi	r2,r2,23560
81127800:	18c7883a 	add	r3,r3,r3
81127804:	18c7883a 	add	r3,r3,r3
81127808:	10c5883a 	add	r2,r2,r3
8112780c:	10800017 	ldw	r2,0(r2)
81127810:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
81127814:	e0bffa17 	ldw	r2,-24(fp)
81127818:	1000061e 	bne	r2,zero,81127834 <OSTaskSuspend+0xf8>
8112781c:	e0bff817 	ldw	r2,-32(fp)
81127820:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127824:	e0bff917 	ldw	r2,-28(fp)
81127828:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
8112782c:	00801204 	movi	r2,72
81127830:	00003606 	br	8112790c <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
81127834:	e0bffa17 	ldw	r2,-24(fp)
81127838:	10800058 	cmpnei	r2,r2,1
8112783c:	1000061e 	bne	r2,zero,81127858 <OSTaskSuspend+0x11c>
81127840:	e0bff817 	ldw	r2,-32(fp)
81127844:	e0bffb15 	stw	r2,-20(fp)
81127848:	e0bffb17 	ldw	r2,-20(fp)
8112784c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81127850:	008010c4 	movi	r2,67
81127854:	00002d06 	br	8112790c <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
81127858:	e0bffa17 	ldw	r2,-24(fp)
8112785c:	10800d03 	ldbu	r2,52(r2)
81127860:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
81127864:	e0fffd03 	ldbu	r3,-12(fp)
81127868:	e13ffd03 	ldbu	r4,-12(fp)
8112786c:	d0a07544 	addi	r2,gp,-32299
81127870:	2085883a 	add	r2,r4,r2
81127874:	10800003 	ldbu	r2,0(r2)
81127878:	1009883a 	mov	r4,r2
8112787c:	e0bffa17 	ldw	r2,-24(fp)
81127880:	10800d43 	ldbu	r2,53(r2)
81127884:	0084303a 	nor	r2,zero,r2
81127888:	2084703a 	and	r2,r4,r2
8112788c:	1009883a 	mov	r4,r2
81127890:	d0a07544 	addi	r2,gp,-32299
81127894:	1885883a 	add	r2,r3,r2
81127898:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112789c:	e0fffd03 	ldbu	r3,-12(fp)
811278a0:	d0a07544 	addi	r2,gp,-32299
811278a4:	1885883a 	add	r2,r3,r2
811278a8:	10800003 	ldbu	r2,0(r2)
811278ac:	10803fcc 	andi	r2,r2,255
811278b0:	1000071e 	bne	r2,zero,811278d0 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
811278b4:	e0bffa17 	ldw	r2,-24(fp)
811278b8:	10800d83 	ldbu	r2,54(r2)
811278bc:	0084303a 	nor	r2,zero,r2
811278c0:	1007883a 	mov	r3,r2
811278c4:	d0a07503 	ldbu	r2,-32300(gp)
811278c8:	1884703a 	and	r2,r3,r2
811278cc:	d0a07505 	stb	r2,-32300(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
811278d0:	e0bffa17 	ldw	r2,-24(fp)
811278d4:	10800c03 	ldbu	r2,48(r2)
811278d8:	10800214 	ori	r2,r2,8
811278dc:	1007883a 	mov	r3,r2
811278e0:	e0bffa17 	ldw	r2,-24(fp)
811278e4:	10c00c05 	stb	r3,48(r2)
811278e8:	e0bff817 	ldw	r2,-32(fp)
811278ec:	e0bffc15 	stw	r2,-16(fp)
811278f0:	e0bffc17 	ldw	r2,-16(fp)
811278f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
811278f8:	e0bff703 	ldbu	r2,-36(fp)
811278fc:	10800058 	cmpnei	r2,r2,1
81127900:	1000011e 	bne	r2,zero,81127908 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
81127904:	11221080 	call	81122108 <OS_Sched>
    }
    return (OS_ERR_NONE);
81127908:	0005883a 	mov	r2,zero
}
8112790c:	e037883a 	mov	sp,fp
81127910:	dfc00117 	ldw	ra,4(sp)
81127914:	df000017 	ldw	fp,0(sp)
81127918:	dec00204 	addi	sp,sp,8
8112791c:	f800283a 	ret

81127920 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
81127920:	defff604 	addi	sp,sp,-40
81127924:	dfc00915 	stw	ra,36(sp)
81127928:	df000815 	stw	fp,32(sp)
8112792c:	df000804 	addi	fp,sp,32
81127930:	2005883a 	mov	r2,r4
81127934:	e17fff15 	stw	r5,-4(fp)
81127938:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112793c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
81127940:	e0bffe03 	ldbu	r2,-8(fp)
81127944:	108007f0 	cmpltui	r2,r2,31
81127948:	1000051e 	bne	r2,zero,81127960 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
8112794c:	e0bffe03 	ldbu	r2,-8(fp)
81127950:	10803fe0 	cmpeqi	r2,r2,255
81127954:	1000021e 	bne	r2,zero,81127960 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
81127958:	00800a84 	movi	r2,42
8112795c:	00003406 	br	81127a30 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
81127960:	e0bfff17 	ldw	r2,-4(fp)
81127964:	1000021e 	bne	r2,zero,81127970 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
81127968:	00800244 	movi	r2,9
8112796c:	00003006 	br	81127a30 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127970:	0005303a 	rdctl	r2,status
81127974:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127978:	e0fffd17 	ldw	r3,-12(fp)
8112797c:	00bfff84 	movi	r2,-2
81127980:	1884703a 	and	r2,r3,r2
81127984:	1001703a 	wrctl	status,r2
  
  return context;
81127988:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112798c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
81127990:	e0bffe03 	ldbu	r2,-8(fp)
81127994:	10803fd8 	cmpnei	r2,r2,255
81127998:	1000031e 	bne	r2,zero,811279a8 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
8112799c:	d0a07917 	ldw	r2,-32284(gp)
811279a0:	10800c83 	ldbu	r2,50(r2)
811279a4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
811279a8:	e0fffe03 	ldbu	r3,-8(fp)
811279ac:	00a04574 	movhi	r2,33045
811279b0:	10970204 	addi	r2,r2,23560
811279b4:	18c7883a 	add	r3,r3,r3
811279b8:	18c7883a 	add	r3,r3,r3
811279bc:	10c5883a 	add	r2,r2,r3
811279c0:	10800017 	ldw	r2,0(r2)
811279c4:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
811279c8:	e0bffa17 	ldw	r2,-24(fp)
811279cc:	1000061e 	bne	r2,zero,811279e8 <OSTaskQuery+0xc8>
811279d0:	e0bff817 	ldw	r2,-32(fp)
811279d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811279d8:	e0bff917 	ldw	r2,-28(fp)
811279dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
811279e0:	00800a44 	movi	r2,41
811279e4:	00001206 	br	81127a30 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
811279e8:	e0bffa17 	ldw	r2,-24(fp)
811279ec:	10800058 	cmpnei	r2,r2,1
811279f0:	1000061e 	bne	r2,zero,81127a0c <OSTaskQuery+0xec>
811279f4:	e0bff817 	ldw	r2,-32(fp)
811279f8:	e0bffb15 	stw	r2,-20(fp)
811279fc:	e0bffb17 	ldw	r2,-20(fp)
81127a00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81127a04:	008010c4 	movi	r2,67
81127a08:	00000906 	br	81127a30 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
81127a0c:	01801b04 	movi	r6,108
81127a10:	e17ffa17 	ldw	r5,-24(fp)
81127a14:	e13fff17 	ldw	r4,-4(fp)
81127a18:	11220a00 	call	811220a0 <OS_MemCopy>
81127a1c:	e0bff817 	ldw	r2,-32(fp)
81127a20:	e0bffc15 	stw	r2,-16(fp)
81127a24:	e0bffc17 	ldw	r2,-16(fp)
81127a28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81127a2c:	0005883a 	mov	r2,zero
}
81127a30:	e037883a 	mov	sp,fp
81127a34:	dfc00117 	ldw	ra,4(sp)
81127a38:	df000017 	ldw	fp,0(sp)
81127a3c:	dec00204 	addi	sp,sp,8
81127a40:	f800283a 	ret

81127a44 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
81127a44:	defffc04 	addi	sp,sp,-16
81127a48:	df000315 	stw	fp,12(sp)
81127a4c:	df000304 	addi	fp,sp,12
81127a50:	e13ffd15 	stw	r4,-12(fp)
81127a54:	e17ffe15 	stw	r5,-8(fp)
81127a58:	3005883a 	mov	r2,r6
81127a5c:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
81127a60:	e0bfff0b 	ldhu	r2,-4(fp)
81127a64:	1080004c 	andi	r2,r2,1
81127a68:	10000d26 	beq	r2,zero,81127aa0 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
81127a6c:	e0bfff0b 	ldhu	r2,-4(fp)
81127a70:	1080008c 	andi	r2,r2,2
81127a74:	10000a26 	beq	r2,zero,81127aa0 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81127a78:	00000706 	br	81127a98 <OS_TaskStkClr+0x54>
                size--;
81127a7c:	e0bffe17 	ldw	r2,-8(fp)
81127a80:	10bfffc4 	addi	r2,r2,-1
81127a84:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
81127a88:	e0bffd17 	ldw	r2,-12(fp)
81127a8c:	10c00104 	addi	r3,r2,4
81127a90:	e0fffd15 	stw	r3,-12(fp)
81127a94:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81127a98:	e0bffe17 	ldw	r2,-8(fp)
81127a9c:	103ff71e 	bne	r2,zero,81127a7c <__reset+0xfb107a7c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
81127aa0:	0001883a 	nop
81127aa4:	e037883a 	mov	sp,fp
81127aa8:	df000017 	ldw	fp,0(sp)
81127aac:	dec00104 	addi	sp,sp,4
81127ab0:	f800283a 	ret

81127ab4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
81127ab4:	defff904 	addi	sp,sp,-28
81127ab8:	dfc00615 	stw	ra,24(sp)
81127abc:	df000515 	stw	fp,20(sp)
81127ac0:	df000504 	addi	fp,sp,20
81127ac4:	2005883a 	mov	r2,r4
81127ac8:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81127acc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81127ad0:	d0a07803 	ldbu	r2,-32288(gp)
81127ad4:	10803fcc 	andi	r2,r2,255
81127ad8:	1000311e 	bne	r2,zero,81127ba0 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
81127adc:	e0bfff0b 	ldhu	r2,-4(fp)
81127ae0:	10003026 	beq	r2,zero,81127ba4 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127ae4:	0005303a 	rdctl	r2,status
81127ae8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127aec:	e0fffe17 	ldw	r3,-8(fp)
81127af0:	00bfff84 	movi	r2,-2
81127af4:	1884703a 	and	r2,r3,r2
81127af8:	1001703a 	wrctl	status,r2
  
  return context;
81127afc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
81127b00:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
81127b04:	d0a07917 	ldw	r2,-32284(gp)
81127b08:	10800d03 	ldbu	r2,52(r2)
81127b0c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
81127b10:	e0fffd03 	ldbu	r3,-12(fp)
81127b14:	e13ffd03 	ldbu	r4,-12(fp)
81127b18:	d0a07544 	addi	r2,gp,-32299
81127b1c:	2085883a 	add	r2,r4,r2
81127b20:	10800003 	ldbu	r2,0(r2)
81127b24:	1009883a 	mov	r4,r2
81127b28:	d0a07917 	ldw	r2,-32284(gp)
81127b2c:	10800d43 	ldbu	r2,53(r2)
81127b30:	0084303a 	nor	r2,zero,r2
81127b34:	2084703a 	and	r2,r4,r2
81127b38:	1009883a 	mov	r4,r2
81127b3c:	d0a07544 	addi	r2,gp,-32299
81127b40:	1885883a 	add	r2,r3,r2
81127b44:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
81127b48:	e0fffd03 	ldbu	r3,-12(fp)
81127b4c:	d0a07544 	addi	r2,gp,-32299
81127b50:	1885883a 	add	r2,r3,r2
81127b54:	10800003 	ldbu	r2,0(r2)
81127b58:	10803fcc 	andi	r2,r2,255
81127b5c:	1000071e 	bne	r2,zero,81127b7c <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
81127b60:	d0a07917 	ldw	r2,-32284(gp)
81127b64:	10800d83 	ldbu	r2,54(r2)
81127b68:	0084303a 	nor	r2,zero,r2
81127b6c:	1007883a 	mov	r3,r2
81127b70:	d0a07503 	ldbu	r2,-32300(gp)
81127b74:	1884703a 	and	r2,r3,r2
81127b78:	d0a07505 	stb	r2,-32300(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
81127b7c:	d0a07917 	ldw	r2,-32284(gp)
81127b80:	e0ffff0b 	ldhu	r3,-4(fp)
81127b84:	10c00b8d 	sth	r3,46(r2)
81127b88:	e0bffb17 	ldw	r2,-20(fp)
81127b8c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127b90:	e0bffc17 	ldw	r2,-16(fp)
81127b94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
81127b98:	11221080 	call	81122108 <OS_Sched>
81127b9c:	00000106 	br	81127ba4 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
81127ba0:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
81127ba4:	e037883a 	mov	sp,fp
81127ba8:	dfc00117 	ldw	ra,4(sp)
81127bac:	df000017 	ldw	fp,0(sp)
81127bb0:	dec00204 	addi	sp,sp,8
81127bb4:	f800283a 	ret

81127bb8 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
81127bb8:	defff804 	addi	sp,sp,-32
81127bbc:	dfc00715 	stw	ra,28(sp)
81127bc0:	df000615 	stw	fp,24(sp)
81127bc4:	df000604 	addi	fp,sp,24
81127bc8:	2015883a 	mov	r10,r4
81127bcc:	2809883a 	mov	r4,r5
81127bd0:	3007883a 	mov	r3,r6
81127bd4:	3805883a 	mov	r2,r7
81127bd8:	e2bffc05 	stb	r10,-16(fp)
81127bdc:	e13ffd05 	stb	r4,-12(fp)
81127be0:	e0fffe05 	stb	r3,-8(fp)
81127be4:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81127be8:	d0a07803 	ldbu	r2,-32288(gp)
81127bec:	10803fcc 	andi	r2,r2,255
81127bf0:	10000226 	beq	r2,zero,81127bfc <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
81127bf4:	00801544 	movi	r2,85
81127bf8:	00004106 	br	81127d00 <OSTimeDlyHMSM+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
81127bfc:	e0bffc03 	ldbu	r2,-16(fp)
81127c00:	1000081e 	bne	r2,zero,81127c24 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
81127c04:	e0bffd03 	ldbu	r2,-12(fp)
81127c08:	1000061e 	bne	r2,zero,81127c24 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
81127c0c:	e0bffe03 	ldbu	r2,-8(fp)
81127c10:	1000041e 	bne	r2,zero,81127c24 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
81127c14:	e0bfff0b 	ldhu	r2,-4(fp)
81127c18:	1000021e 	bne	r2,zero,81127c24 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
81127c1c:	00801504 	movi	r2,84
81127c20:	00003706 	br	81127d00 <OSTimeDlyHMSM+0x148>
                }
            }
        }
    }
    if (minutes > 59) {
81127c24:	e0bffd03 	ldbu	r2,-12(fp)
81127c28:	10800f30 	cmpltui	r2,r2,60
81127c2c:	1000021e 	bne	r2,zero,81127c38 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
81127c30:	00801444 	movi	r2,81
81127c34:	00003206 	br	81127d00 <OSTimeDlyHMSM+0x148>
    }
    if (seconds > 59) {
81127c38:	e0bffe03 	ldbu	r2,-8(fp)
81127c3c:	10800f30 	cmpltui	r2,r2,60
81127c40:	1000021e 	bne	r2,zero,81127c4c <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
81127c44:	00801484 	movi	r2,82
81127c48:	00002d06 	br	81127d00 <OSTimeDlyHMSM+0x148>
    }
    if (ms > 999) {
81127c4c:	e0bfff0b 	ldhu	r2,-4(fp)
81127c50:	1080fa30 	cmpltui	r2,r2,1000
81127c54:	1000021e 	bne	r2,zero,81127c60 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
81127c58:	008014c4 	movi	r2,83
81127c5c:	00002806 	br	81127d00 <OSTimeDlyHMSM+0x148>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81127c60:	e0bffc03 	ldbu	r2,-16(fp)
81127c64:	10c38424 	muli	r3,r2,3600
81127c68:	e0bffd03 	ldbu	r2,-12(fp)
81127c6c:	10800f24 	muli	r2,r2,60
81127c70:	1887883a 	add	r3,r3,r2
81127c74:	e0bffe03 	ldbu	r2,-8(fp)
81127c78:	1885883a 	add	r2,r3,r2
81127c7c:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
81127c80:	e0bfff0b 	ldhu	r2,-4(fp)
81127c84:	10c0fa24 	muli	r3,r2,1000
81127c88:	008418b4 	movhi	r2,4194
81127c8c:	109374c4 	addi	r2,r2,19923
81127c90:	188a383a 	mulxuu	r5,r3,r2
81127c94:	1885383a 	mul	r2,r3,r2
81127c98:	1011883a 	mov	r8,r2
81127c9c:	2813883a 	mov	r9,r5
81127ca0:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81127ca4:	2085883a 	add	r2,r4,r2
81127ca8:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
81127cac:	e0bffb17 	ldw	r2,-20(fp)
81127cb0:	1004d43a 	srli	r2,r2,16
81127cb4:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
81127cb8:	e0bffb17 	ldw	r2,-20(fp)
81127cbc:	10bfffcc 	andi	r2,r2,65535
81127cc0:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
81127cc4:	e0bffb17 	ldw	r2,-20(fp)
81127cc8:	10bfffcc 	andi	r2,r2,65535
81127ccc:	1009883a 	mov	r4,r2
81127cd0:	1127ab40 	call	81127ab4 <OSTimeDly>
    while (loops > 0) {
81127cd4:	00000706 	br	81127cf4 <OSTimeDlyHMSM+0x13c>
        OSTimeDly((INT16U)32768u);
81127cd8:	01200014 	movui	r4,32768
81127cdc:	1127ab40 	call	81127ab4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
81127ce0:	01200014 	movui	r4,32768
81127ce4:	1127ab40 	call	81127ab4 <OSTimeDly>
        loops--;
81127ce8:	e0bffa0b 	ldhu	r2,-24(fp)
81127cec:	10bfffc4 	addi	r2,r2,-1
81127cf0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
81127cf4:	e0bffa0b 	ldhu	r2,-24(fp)
81127cf8:	103ff71e 	bne	r2,zero,81127cd8 <__reset+0xfb107cd8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
81127cfc:	0005883a 	mov	r2,zero
}
81127d00:	e037883a 	mov	sp,fp
81127d04:	dfc00117 	ldw	ra,4(sp)
81127d08:	df000017 	ldw	fp,0(sp)
81127d0c:	dec00204 	addi	sp,sp,8
81127d10:	f800283a 	ret

81127d14 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
81127d14:	defff504 	addi	sp,sp,-44
81127d18:	dfc00a15 	stw	ra,40(sp)
81127d1c:	df000915 	stw	fp,36(sp)
81127d20:	df000904 	addi	fp,sp,36
81127d24:	2005883a 	mov	r2,r4
81127d28:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81127d2c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
81127d30:	e0bfff03 	ldbu	r2,-4(fp)
81127d34:	108007b0 	cmpltui	r2,r2,30
81127d38:	1000021e 	bne	r2,zero,81127d44 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
81127d3c:	00800a84 	movi	r2,42
81127d40:	00006406 	br	81127ed4 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127d44:	0005303a 	rdctl	r2,status
81127d48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127d4c:	e0fffe17 	ldw	r3,-8(fp)
81127d50:	00bfff84 	movi	r2,-2
81127d54:	1884703a 	and	r2,r3,r2
81127d58:	1001703a 	wrctl	status,r2
  
  return context;
81127d5c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81127d60:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
81127d64:	e0ffff03 	ldbu	r3,-4(fp)
81127d68:	00a04574 	movhi	r2,33045
81127d6c:	10970204 	addi	r2,r2,23560
81127d70:	18c7883a 	add	r3,r3,r3
81127d74:	18c7883a 	add	r3,r3,r3
81127d78:	10c5883a 	add	r2,r2,r3
81127d7c:	10800017 	ldw	r2,0(r2)
81127d80:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
81127d84:	e0bff917 	ldw	r2,-28(fp)
81127d88:	1000061e 	bne	r2,zero,81127da4 <OSTimeDlyResume+0x90>
81127d8c:	e0bff717 	ldw	r2,-36(fp)
81127d90:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127d94:	e0bff817 	ldw	r2,-32(fp)
81127d98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81127d9c:	008010c4 	movi	r2,67
81127da0:	00004c06 	br	81127ed4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
81127da4:	e0bff917 	ldw	r2,-28(fp)
81127da8:	10800058 	cmpnei	r2,r2,1
81127dac:	1000061e 	bne	r2,zero,81127dc8 <OSTimeDlyResume+0xb4>
81127db0:	e0bff717 	ldw	r2,-36(fp)
81127db4:	e0bffa15 	stw	r2,-24(fp)
81127db8:	e0bffa17 	ldw	r2,-24(fp)
81127dbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81127dc0:	008010c4 	movi	r2,67
81127dc4:	00004306 	br	81127ed4 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
81127dc8:	e0bff917 	ldw	r2,-28(fp)
81127dcc:	10800b8b 	ldhu	r2,46(r2)
81127dd0:	10bfffcc 	andi	r2,r2,65535
81127dd4:	1000061e 	bne	r2,zero,81127df0 <OSTimeDlyResume+0xdc>
81127dd8:	e0bff717 	ldw	r2,-36(fp)
81127ddc:	e0bffb15 	stw	r2,-20(fp)
81127de0:	e0bffb17 	ldw	r2,-20(fp)
81127de4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
81127de8:	00801404 	movi	r2,80
81127dec:	00003906 	br	81127ed4 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
81127df0:	e0bff917 	ldw	r2,-28(fp)
81127df4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
81127df8:	e0bff917 	ldw	r2,-28(fp)
81127dfc:	10800c03 	ldbu	r2,48(r2)
81127e00:	10803fcc 	andi	r2,r2,255
81127e04:	10800dcc 	andi	r2,r2,55
81127e08:	10000b26 	beq	r2,zero,81127e38 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
81127e0c:	e0bff917 	ldw	r2,-28(fp)
81127e10:	10c00c03 	ldbu	r3,48(r2)
81127e14:	00bff204 	movi	r2,-56
81127e18:	1884703a 	and	r2,r3,r2
81127e1c:	1007883a 	mov	r3,r2
81127e20:	e0bff917 	ldw	r2,-28(fp)
81127e24:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
81127e28:	e0bff917 	ldw	r2,-28(fp)
81127e2c:	00c00044 	movi	r3,1
81127e30:	10c00c45 	stb	r3,49(r2)
81127e34:	00000206 	br	81127e40 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
81127e38:	e0bff917 	ldw	r2,-28(fp)
81127e3c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
81127e40:	e0bff917 	ldw	r2,-28(fp)
81127e44:	10800c03 	ldbu	r2,48(r2)
81127e48:	10803fcc 	andi	r2,r2,255
81127e4c:	1080020c 	andi	r2,r2,8
81127e50:	10001b1e 	bne	r2,zero,81127ec0 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
81127e54:	e0bff917 	ldw	r2,-28(fp)
81127e58:	10c00d83 	ldbu	r3,54(r2)
81127e5c:	d0a07503 	ldbu	r2,-32300(gp)
81127e60:	1884b03a 	or	r2,r3,r2
81127e64:	d0a07505 	stb	r2,-32300(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81127e68:	e0bff917 	ldw	r2,-28(fp)
81127e6c:	10800d03 	ldbu	r2,52(r2)
81127e70:	10c03fcc 	andi	r3,r2,255
81127e74:	e0bff917 	ldw	r2,-28(fp)
81127e78:	10800d03 	ldbu	r2,52(r2)
81127e7c:	11003fcc 	andi	r4,r2,255
81127e80:	d0a07544 	addi	r2,gp,-32299
81127e84:	2085883a 	add	r2,r4,r2
81127e88:	11000003 	ldbu	r4,0(r2)
81127e8c:	e0bff917 	ldw	r2,-28(fp)
81127e90:	10800d43 	ldbu	r2,53(r2)
81127e94:	2084b03a 	or	r2,r4,r2
81127e98:	1009883a 	mov	r4,r2
81127e9c:	d0a07544 	addi	r2,gp,-32299
81127ea0:	1885883a 	add	r2,r3,r2
81127ea4:	11000005 	stb	r4,0(r2)
81127ea8:	e0bff717 	ldw	r2,-36(fp)
81127eac:	e0bffc15 	stw	r2,-16(fp)
81127eb0:	e0bffc17 	ldw	r2,-16(fp)
81127eb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
81127eb8:	11221080 	call	81122108 <OS_Sched>
81127ebc:	00000406 	br	81127ed0 <OSTimeDlyResume+0x1bc>
81127ec0:	e0bff717 	ldw	r2,-36(fp)
81127ec4:	e0bffd15 	stw	r2,-12(fp)
81127ec8:	e0bffd17 	ldw	r2,-12(fp)
81127ecc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
81127ed0:	0005883a 	mov	r2,zero
}
81127ed4:	e037883a 	mov	sp,fp
81127ed8:	dfc00117 	ldw	ra,4(sp)
81127edc:	df000017 	ldw	fp,0(sp)
81127ee0:	dec00204 	addi	sp,sp,8
81127ee4:	f800283a 	ret

81127ee8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
81127ee8:	defffb04 	addi	sp,sp,-20
81127eec:	df000415 	stw	fp,16(sp)
81127ef0:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81127ef4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127ef8:	0005303a 	rdctl	r2,status
81127efc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127f00:	e0fffe17 	ldw	r3,-8(fp)
81127f04:	00bfff84 	movi	r2,-2
81127f08:	1884703a 	and	r2,r3,r2
81127f0c:	1001703a 	wrctl	status,r2
  
  return context;
81127f10:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
81127f14:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
81127f18:	d0a07a17 	ldw	r2,-32280(gp)
81127f1c:	e0bffd15 	stw	r2,-12(fp)
81127f20:	e0bffc17 	ldw	r2,-16(fp)
81127f24:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127f28:	e0bfff17 	ldw	r2,-4(fp)
81127f2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
81127f30:	e0bffd17 	ldw	r2,-12(fp)
}
81127f34:	e037883a 	mov	sp,fp
81127f38:	df000017 	ldw	fp,0(sp)
81127f3c:	dec00104 	addi	sp,sp,4
81127f40:	f800283a 	ret

81127f44 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
81127f44:	defffb04 	addi	sp,sp,-20
81127f48:	df000415 	stw	fp,16(sp)
81127f4c:	df000404 	addi	fp,sp,16
81127f50:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81127f54:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127f58:	0005303a 	rdctl	r2,status
81127f5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127f60:	e0fffd17 	ldw	r3,-12(fp)
81127f64:	00bfff84 	movi	r2,-2
81127f68:	1884703a 	and	r2,r3,r2
81127f6c:	1001703a 	wrctl	status,r2
  
  return context;
81127f70:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
81127f74:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
81127f78:	e0bfff17 	ldw	r2,-4(fp)
81127f7c:	d0a07a15 	stw	r2,-32280(gp)
81127f80:	e0bffc17 	ldw	r2,-16(fp)
81127f84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127f88:	e0bffe17 	ldw	r2,-8(fp)
81127f8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81127f90:	0001883a 	nop
81127f94:	e037883a 	mov	sp,fp
81127f98:	df000017 	ldw	fp,0(sp)
81127f9c:	dec00104 	addi	sp,sp,4
81127fa0:	f800283a 	ret

81127fa4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
81127fa4:	defffd04 	addi	sp,sp,-12
81127fa8:	dfc00215 	stw	ra,8(sp)
81127fac:	df000115 	stw	fp,4(sp)
81127fb0:	df000104 	addi	fp,sp,4
81127fb4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
81127fb8:	d1601204 	addi	r5,gp,-32696
81127fbc:	e13fff17 	ldw	r4,-4(fp)
81127fc0:	1130d7c0 	call	81130d7c <alt_dev_llist_insert>
}
81127fc4:	e037883a 	mov	sp,fp
81127fc8:	dfc00117 	ldw	ra,4(sp)
81127fcc:	df000017 	ldw	fp,0(sp)
81127fd0:	dec00204 	addi	sp,sp,8
81127fd4:	f800283a 	ret

81127fd8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
81127fd8:	defffd04 	addi	sp,sp,-12
81127fdc:	dfc00215 	stw	ra,8(sp)
81127fe0:	df000115 	stw	fp,4(sp)
81127fe4:	df000104 	addi	fp,sp,4
81127fe8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
81127fec:	113179c0 	call	8113179c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
81127ff0:	00800044 	movi	r2,1
81127ff4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
81127ff8:	0001883a 	nop
81127ffc:	e037883a 	mov	sp,fp
81128000:	dfc00117 	ldw	ra,4(sp)
81128004:	df000017 	ldw	fp,0(sp)
81128008:	dec00204 	addi	sp,sp,8
8112800c:	f800283a 	ret

81128010 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
81128010:	defffe04 	addi	sp,sp,-8
81128014:	dfc00115 	stw	ra,4(sp)
81128018:	df000015 	stw	fp,0(sp)
8112801c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
81128020:	01c0fa04 	movi	r7,1000
81128024:	018000c4 	movi	r6,3
81128028:	000b883a 	mov	r5,zero
8112802c:	01200034 	movhi	r4,32768
81128030:	21011004 	addi	r4,r4,1088
81128034:	112def80 	call	8112def8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
81128038:	01800084 	movi	r6,2
8112803c:	000b883a 	mov	r5,zero
81128040:	012044f4 	movhi	r4,33043
81128044:	2112da04 	addi	r4,r4,19304
81128048:	112c5240 	call	8112c524 <altera_avalon_jtag_uart_init>
8112804c:	012044f4 	movhi	r4,33043
81128050:	2112d004 	addi	r4,r4,19264
81128054:	1127fa40 	call	81127fa4 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
81128058:	01800044 	movi	r6,1
8112805c:	000b883a 	mov	r5,zero
81128060:	012044f4 	movhi	r4,33043
81128064:	2116eb04 	addi	r4,r4,23468
81128068:	112ddd80 	call	8112ddd8 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
8112806c:	000d883a 	mov	r6,zero
81128070:	000b883a 	mov	r5,zero
81128074:	012044f4 	movhi	r4,33043
81128078:	2116f704 	addi	r4,r4,23516
8112807c:	112ddd80 	call	8112ddd8 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
81128080:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
81128084:	01800184 	movi	r6,6
81128088:	000b883a 	mov	r5,zero
8112808c:	012044f4 	movhi	r4,33043
81128090:	21170d04 	addi	r4,r4,23604
81128094:	112e0840 	call	8112e084 <altera_avalon_uart_init>
81128098:	012044f4 	movhi	r4,33043
8112809c:	21170304 	addi	r4,r4,23564
811280a0:	1127fa40 	call	81127fa4 <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE_MAC, tse_mac);
811280a4:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( DMA_DDR_M, dma_DDR_M);
811280a8:	00a044f4 	movhi	r2,33043
811280ac:	10973704 	addi	r2,r2,23772
811280b0:	10c00717 	ldw	r3,28(r2)
811280b4:	00a044f4 	movhi	r2,33043
811280b8:	10973704 	addi	r2,r2,23772
811280bc:	10800817 	ldw	r2,32(r2)
811280c0:	100d883a 	mov	r6,r2
811280c4:	180b883a 	mov	r5,r3
811280c8:	012044f4 	movhi	r4,33043
811280cc:	21173704 	addi	r4,r4,23772
811280d0:	11307d40 	call	811307d4 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
811280d4:	012044f4 	movhi	r4,33043
811280d8:	21175004 	addi	r4,r4,23872
811280dc:	1127fa40 	call	81127fa4 <alt_dev_reg>
}
811280e0:	0001883a 	nop
811280e4:	e037883a 	mov	sp,fp
811280e8:	dfc00117 	ldw	ra,4(sp)
811280ec:	df000017 	ldw	fp,0(sp)
811280f0:	dec00204 	addi	sp,sp,8
811280f4:	f800283a 	ret

811280f8 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
811280f8:	defffa04 	addi	sp,sp,-24
811280fc:	dfc00515 	stw	ra,20(sp)
81128100:	df000415 	stw	fp,16(sp)
81128104:	df000404 	addi	fp,sp,16
81128108:	e13ffe15 	stw	r4,-8(fp)
8112810c:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
81128110:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
81128114:	112ae280 	call	8112ae28 <alt_up_sd_card_is_Present>
81128118:	10001e26 	beq	r2,zero,81128194 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
8112811c:	00803fc4 	movi	r2,255
81128120:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81128124:	d0a08417 	ldw	r2,-32240(gp)
81128128:	e13ffe17 	ldw	r4,-8(fp)
8112812c:	e0ffff17 	ldw	r3,-4(fp)
81128130:	20c7883a 	add	r3,r4,r3
81128134:	1806927a 	slli	r3,r3,9
81128138:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
8112813c:	d0a08317 	ldw	r2,-32244(gp)
81128140:	00c00604 	movi	r3,24
81128144:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81128148:	d0a08017 	ldw	r2,-32256(gp)
8112814c:	1080002b 	ldhuio	r2,0(r2)
81128150:	10bfffcc 	andi	r2,r2,65535
81128154:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
81128158:	e0bffd0b 	ldhu	r2,-12(fp)
8112815c:	10bfffcc 	andi	r2,r2,65535
81128160:	1080010c 	andi	r2,r2,4
81128164:	103ff81e 	bne	r2,zero,81128148 <__reset+0xfb108148>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
81128168:	e0bffd0b 	ldhu	r2,-12(fp)
8112816c:	10bfffcc 	andi	r2,r2,65535
81128170:	1080040c 	andi	r2,r2,16
81128174:	1000071e 	bne	r2,zero,81128194 <Write_Sector_Data+0x9c>
        {
            result = true;
81128178:	00800044 	movi	r2,1
8112817c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
81128180:	d0208915 	stw	zero,-32220(gp)
            current_sector_index = sector_index+partition_offset;
81128184:	e0fffe17 	ldw	r3,-8(fp)
81128188:	e0bfff17 	ldw	r2,-4(fp)
8112818c:	1885883a 	add	r2,r3,r2
81128190:	d0a08a15 	stw	r2,-32216(gp)
        }
    }
    return result;
81128194:	e0bffc17 	ldw	r2,-16(fp)
}
81128198:	e037883a 	mov	sp,fp
8112819c:	dfc00117 	ldw	ra,4(sp)
811281a0:	df000017 	ldw	fp,0(sp)
811281a4:	dec00204 	addi	sp,sp,8
811281a8:	f800283a 	ret

811281ac <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
811281ac:	defffd04 	addi	sp,sp,-12
811281b0:	dfc00215 	stw	ra,8(sp)
811281b4:	df000115 	stw	fp,4(sp)
811281b8:	df000104 	addi	fp,sp,4
    bool result = true;
811281bc:	00800044 	movi	r2,1
811281c0:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
811281c4:	d0a08917 	ldw	r2,-32220(gp)
811281c8:	10000526 	beq	r2,zero,811281e0 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
811281cc:	d0a08a17 	ldw	r2,-32216(gp)
811281d0:	000b883a 	mov	r5,zero
811281d4:	1009883a 	mov	r4,r2
811281d8:	11280f80 	call	811280f8 <Write_Sector_Data>
811281dc:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
811281e0:	e0bfff17 	ldw	r2,-4(fp)
}
811281e4:	e037883a 	mov	sp,fp
811281e8:	dfc00117 	ldw	ra,4(sp)
811281ec:	df000017 	ldw	fp,0(sp)
811281f0:	dec00204 	addi	sp,sp,8
811281f4:	f800283a 	ret

811281f8 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
811281f8:	defffa04 	addi	sp,sp,-24
811281fc:	dfc00515 	stw	ra,20(sp)
81128200:	df000415 	stw	fp,16(sp)
81128204:	df000404 	addi	fp,sp,16
81128208:	e13ffe15 	stw	r4,-8(fp)
8112820c:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
81128210:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
81128214:	112ae280 	call	8112ae28 <alt_up_sd_card_is_Present>
81128218:	10002726 	beq	r2,zero,811282b8 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
8112821c:	00803fc4 	movi	r2,255
81128220:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
81128224:	d0a08917 	ldw	r2,-32220(gp)
81128228:	10000726 	beq	r2,zero,81128248 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
8112822c:	d0a08a17 	ldw	r2,-32216(gp)
81128230:	000b883a 	mov	r5,zero
81128234:	1009883a 	mov	r4,r2
81128238:	11280f80 	call	811280f8 <Write_Sector_Data>
8112823c:	1000021e 	bne	r2,zero,81128248 <Read_Sector_Data+0x50>
            {
                return false;
81128240:	0005883a 	mov	r2,zero
81128244:	00001d06 	br	811282bc <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81128248:	d0a08417 	ldw	r2,-32240(gp)
8112824c:	e13ffe17 	ldw	r4,-8(fp)
81128250:	e0ffff17 	ldw	r3,-4(fp)
81128254:	20c7883a 	add	r3,r4,r3
81128258:	1806927a 	slli	r3,r3,9
8112825c:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
81128260:	d0a08317 	ldw	r2,-32244(gp)
81128264:	00c00444 	movi	r3,17
81128268:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
8112826c:	d0a08017 	ldw	r2,-32256(gp)
81128270:	1080002b 	ldhuio	r2,0(r2)
81128274:	10bfffcc 	andi	r2,r2,65535
81128278:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
8112827c:	e0bffd0b 	ldhu	r2,-12(fp)
81128280:	10bfffcc 	andi	r2,r2,65535
81128284:	1080010c 	andi	r2,r2,4
81128288:	103ff81e 	bne	r2,zero,8112826c <__reset+0xfb10826c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
8112828c:	e0bffd0b 	ldhu	r2,-12(fp)
81128290:	10bfffcc 	andi	r2,r2,65535
81128294:	1080040c 	andi	r2,r2,16
81128298:	1000071e 	bne	r2,zero,811282b8 <Read_Sector_Data+0xc0>
		{
			result = true;
8112829c:	00800044 	movi	r2,1
811282a0:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
811282a4:	d0208915 	stw	zero,-32220(gp)
            current_sector_index = sector_index+partition_offset;
811282a8:	e0fffe17 	ldw	r3,-8(fp)
811282ac:	e0bfff17 	ldw	r2,-4(fp)
811282b0:	1885883a 	add	r2,r3,r2
811282b4:	d0a08a15 	stw	r2,-32216(gp)
		}
	}
	return result;
811282b8:	e0bffc17 	ldw	r2,-16(fp)
}
811282bc:	e037883a 	mov	sp,fp
811282c0:	dfc00117 	ldw	ra,4(sp)
811282c4:	df000017 	ldw	fp,0(sp)
811282c8:	dec00204 	addi	sp,sp,8
811282cc:	f800283a 	ret

811282d0 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
811282d0:	defffb04 	addi	sp,sp,-20
811282d4:	dfc00415 	stw	ra,16(sp)
811282d8:	df000315 	stw	fp,12(sp)
811282dc:	df000304 	addi	fp,sp,12
811282e0:	e13ffe15 	stw	r4,-8(fp)
811282e4:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
811282e8:	e0bffe17 	ldw	r2,-8(fp)
811282ec:	1004d23a 	srli	r2,r2,8
811282f0:	d0e08617 	ldw	r3,-32232(gp)
811282f4:	10c5883a 	add	r2,r2,r3
811282f8:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
811282fc:	00a04574 	movhi	r2,33045
81128300:	10972604 	addi	r2,r2,23704
81128304:	10801117 	ldw	r2,68(r2)
81128308:	e0fffd17 	ldw	r3,-12(fp)
8112830c:	1885883a 	add	r2,r3,r2
81128310:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
81128314:	d0a08a17 	ldw	r2,-32216(gp)
81128318:	e0fffd17 	ldw	r3,-12(fp)
8112831c:	18800726 	beq	r3,r2,8112833c <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81128320:	e0bffd17 	ldw	r2,-12(fp)
81128324:	000b883a 	mov	r5,zero
81128328:	1009883a 	mov	r4,r2
8112832c:	11281f80 	call	811281f8 <Read_Sector_Data>
81128330:	1000021e 	bne	r2,zero,8112833c <get_cluster_flag+0x6c>
        {
            return false;
81128334:	0005883a 	mov	r2,zero
81128338:	00000d06 	br	81128370 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
8112833c:	e0bffe17 	ldw	r2,-8(fp)
81128340:	10803fcc 	andi	r2,r2,255
81128344:	1085883a 	add	r2,r2,r2
81128348:	1007883a 	mov	r3,r2
8112834c:	d0a08817 	ldw	r2,-32224(gp)
81128350:	10800a17 	ldw	r2,40(r2)
81128354:	1885883a 	add	r2,r3,r2
81128358:	1080002b 	ldhuio	r2,0(r2)
8112835c:	10bfffcc 	andi	r2,r2,65535
81128360:	1007883a 	mov	r3,r2
81128364:	e0bfff17 	ldw	r2,-4(fp)
81128368:	10c0000d 	sth	r3,0(r2)
    return true;
8112836c:	00800044 	movi	r2,1
}
81128370:	e037883a 	mov	sp,fp
81128374:	dfc00117 	ldw	ra,4(sp)
81128378:	df000017 	ldw	fp,0(sp)
8112837c:	dec00204 	addi	sp,sp,8
81128380:	f800283a 	ret

81128384 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
81128384:	defffa04 	addi	sp,sp,-24
81128388:	dfc00515 	stw	ra,20(sp)
8112838c:	df000415 	stw	fp,16(sp)
81128390:	df000404 	addi	fp,sp,16
81128394:	e13ffd15 	stw	r4,-12(fp)
81128398:	2805883a 	mov	r2,r5
8112839c:	e1bfff15 	stw	r6,-4(fp)
811283a0:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
811283a4:	e0bffd17 	ldw	r2,-12(fp)
811283a8:	1004d23a 	srli	r2,r2,8
811283ac:	d0e08617 	ldw	r3,-32232(gp)
811283b0:	10c5883a 	add	r2,r2,r3
811283b4:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
811283b8:	e0bfff17 	ldw	r2,-4(fp)
811283bc:	10000726 	beq	r2,zero,811283dc <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
811283c0:	00a04574 	movhi	r2,33045
811283c4:	10972604 	addi	r2,r2,23704
811283c8:	10801117 	ldw	r2,68(r2)
811283cc:	e0fffc17 	ldw	r3,-16(fp)
811283d0:	1885883a 	add	r2,r3,r2
811283d4:	e0bffc15 	stw	r2,-16(fp)
811283d8:	00000606 	br	811283f4 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
811283dc:	00a04574 	movhi	r2,33045
811283e0:	10972604 	addi	r2,r2,23704
811283e4:	10801217 	ldw	r2,72(r2)
811283e8:	e0fffc17 	ldw	r3,-16(fp)
811283ec:	1885883a 	add	r2,r3,r2
811283f0:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
811283f4:	d0a08a17 	ldw	r2,-32216(gp)
811283f8:	e0fffc17 	ldw	r3,-16(fp)
811283fc:	18800726 	beq	r3,r2,8112841c <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81128400:	e0bffc17 	ldw	r2,-16(fp)
81128404:	000b883a 	mov	r5,zero
81128408:	1009883a 	mov	r4,r2
8112840c:	11281f80 	call	811281f8 <Read_Sector_Data>
81128410:	1000021e 	bne	r2,zero,8112841c <mark_cluster+0x98>
        {
            return false;
81128414:	0005883a 	mov	r2,zero
81128418:	00000d06 	br	81128450 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
8112841c:	e0bffd17 	ldw	r2,-12(fp)
81128420:	10803fcc 	andi	r2,r2,255
81128424:	1085883a 	add	r2,r2,r2
81128428:	1007883a 	mov	r3,r2
8112842c:	d0a08817 	ldw	r2,-32224(gp)
81128430:	10800a17 	ldw	r2,40(r2)
81128434:	1885883a 	add	r2,r3,r2
81128438:	1007883a 	mov	r3,r2
8112843c:	e0bffe0f 	ldh	r2,-8(fp)
81128440:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
81128444:	00800044 	movi	r2,1
81128448:	d0a08915 	stw	r2,-32220(gp)
    return true;
8112844c:	00800044 	movi	r2,1
}
81128450:	e037883a 	mov	sp,fp
81128454:	dfc00117 	ldw	ra,4(sp)
81128458:	df000017 	ldw	fp,0(sp)
8112845c:	dec00204 	addi	sp,sp,8
81128460:	f800283a 	ret

81128464 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
81128464:	defff704 	addi	sp,sp,-36
81128468:	dfc00815 	stw	ra,32(sp)
8112846c:	df000715 	stw	fp,28(sp)
81128470:	df000704 	addi	fp,sp,28
	bool result = false;
81128474:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
81128478:	000b883a 	mov	r5,zero
8112847c:	0009883a 	mov	r4,zero
81128480:	11281f80 	call	811281f8 <Read_Sector_Data>
81128484:	10005a26 	beq	r2,zero,811285f0 <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
81128488:	d0a08817 	ldw	r2,-32224(gp)
8112848c:	10800a17 	ldw	r2,40(r2)
81128490:	10807f84 	addi	r2,r2,510
81128494:	1080002b 	ldhuio	r2,0(r2)
81128498:	10bfffcc 	andi	r2,r2,65535
8112849c:	10bfffcc 	andi	r2,r2,65535
811284a0:	10a0001c 	xori	r2,r2,32768
811284a4:	10a00004 	addi	r2,r2,-32768
811284a8:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
811284ac:	e0bffb17 	ldw	r2,-20(fp)
811284b0:	10ffffcc 	andi	r3,r2,65535
811284b4:	00aa9554 	movui	r2,43605
811284b8:	18804d1e 	bne	r3,r2,811285f0 <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
811284bc:	e03ffa15 	stw	zero,-24(fp)
811284c0:	00004806 	br	811285e4 <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
811284c4:	e0bffa17 	ldw	r2,-24(fp)
811284c8:	1004913a 	slli	r2,r2,4
811284cc:	10806f84 	addi	r2,r2,446
811284d0:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
811284d4:	d0a08817 	ldw	r2,-32224(gp)
811284d8:	10c00a17 	ldw	r3,40(r2)
811284dc:	e0bffc17 	ldw	r2,-16(fp)
811284e0:	1885883a 	add	r2,r3,r2
811284e4:	10800104 	addi	r2,r2,4
811284e8:	10800023 	ldbuio	r2,0(r2)
811284ec:	10803fcc 	andi	r2,r2,255
811284f0:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
811284f4:	e0bffd07 	ldb	r2,-12(fp)
811284f8:	10800060 	cmpeqi	r2,r2,1
811284fc:	1000091e 	bne	r2,zero,81128524 <Check_for_Master_Boot_Record+0xc0>
81128500:	e0bffd07 	ldb	r2,-12(fp)
81128504:	10800120 	cmpeqi	r2,r2,4
81128508:	1000061e 	bne	r2,zero,81128524 <Check_for_Master_Boot_Record+0xc0>
8112850c:	e0bffd07 	ldb	r2,-12(fp)
81128510:	108001a0 	cmpeqi	r2,r2,6
81128514:	1000031e 	bne	r2,zero,81128524 <Check_for_Master_Boot_Record+0xc0>
81128518:	e0bffd07 	ldb	r2,-12(fp)
8112851c:	10800398 	cmpnei	r2,r2,14
81128520:	10002d1e 	bne	r2,zero,811285d8 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
81128524:	d0a08817 	ldw	r2,-32224(gp)
81128528:	10c00a17 	ldw	r3,40(r2)
8112852c:	e0bffc17 	ldw	r2,-16(fp)
81128530:	1885883a 	add	r2,r3,r2
81128534:	10800284 	addi	r2,r2,10
81128538:	1080002b 	ldhuio	r2,0(r2)
8112853c:	10bfffcc 	andi	r2,r2,65535
81128540:	1006943a 	slli	r3,r2,16
81128544:	d0a08817 	ldw	r2,-32224(gp)
81128548:	11000a17 	ldw	r4,40(r2)
8112854c:	e0bffc17 	ldw	r2,-16(fp)
81128550:	2085883a 	add	r2,r4,r2
81128554:	10800204 	addi	r2,r2,8
81128558:	1080002b 	ldhuio	r2,0(r2)
8112855c:	10bfffcc 	andi	r2,r2,65535
81128560:	10bfffcc 	andi	r2,r2,65535
81128564:	1884b03a 	or	r2,r3,r2
81128568:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
8112856c:	d0a08817 	ldw	r2,-32224(gp)
81128570:	10c00a17 	ldw	r3,40(r2)
81128574:	e0bffc17 	ldw	r2,-16(fp)
81128578:	1885883a 	add	r2,r3,r2
8112857c:	10800384 	addi	r2,r2,14
81128580:	1080002b 	ldhuio	r2,0(r2)
81128584:	10bfffcc 	andi	r2,r2,65535
81128588:	1006943a 	slli	r3,r2,16
8112858c:	d0a08817 	ldw	r2,-32224(gp)
81128590:	11000a17 	ldw	r4,40(r2)
81128594:	e0bffc17 	ldw	r2,-16(fp)
81128598:	2085883a 	add	r2,r4,r2
8112859c:	10800304 	addi	r2,r2,12
811285a0:	1080002b 	ldhuio	r2,0(r2)
811285a4:	10bfffcc 	andi	r2,r2,65535
811285a8:	10bfffcc 	andi	r2,r2,65535
811285ac:	1884b03a 	or	r2,r3,r2
811285b0:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
811285b4:	e0bfff17 	ldw	r2,-4(fp)
811285b8:	0080070e 	bge	zero,r2,811285d8 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
811285bc:	00800044 	movi	r2,1
811285c0:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
811285c4:	e0bfff17 	ldw	r2,-4(fp)
811285c8:	d0a08715 	stw	r2,-32228(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
811285cc:	e0bffe17 	ldw	r2,-8(fp)
811285d0:	d0a08615 	stw	r2,-32232(gp)
						break;
811285d4:	00000606 	br	811285f0 <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
811285d8:	e0bffa17 	ldw	r2,-24(fp)
811285dc:	10800044 	addi	r2,r2,1
811285e0:	e0bffa15 	stw	r2,-24(fp)
811285e4:	e0bffa17 	ldw	r2,-24(fp)
811285e8:	10800110 	cmplti	r2,r2,4
811285ec:	103fb51e 	bne	r2,zero,811284c4 <__reset+0xfb1084c4>
				}
			}
		}
	}

	return result;
811285f0:	e0bff917 	ldw	r2,-28(fp)
}
811285f4:	e037883a 	mov	sp,fp
811285f8:	dfc00117 	ldw	ra,4(sp)
811285fc:	df000017 	ldw	fp,0(sp)
81128600:	dec00204 	addi	sp,sp,8
81128604:	f800283a 	ret

81128608 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
81128608:	defff804 	addi	sp,sp,-32
8112860c:	dfc00715 	stw	ra,28(sp)
81128610:	df000615 	stw	fp,24(sp)
81128614:	df000604 	addi	fp,sp,24
81128618:	e13ffc15 	stw	r4,-16(fp)
8112861c:	e17ffd15 	stw	r5,-12(fp)
81128620:	e1bffe15 	stw	r6,-8(fp)
81128624:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
81128628:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112862c:	e0bffc17 	ldw	r2,-16(fp)
81128630:	108007cc 	andi	r2,r2,31
81128634:	10008d1e 	bne	r2,zero,8112886c <Read_File_Record_At_Offset+0x264>
81128638:	112ae280 	call	8112ae28 <alt_up_sd_card_is_Present>
8112863c:	10008b26 	beq	r2,zero,8112886c <Read_File_Record_At_Offset+0x264>
81128640:	d0a07f17 	ldw	r2,-32260(gp)
81128644:	10008926 	beq	r2,zero,8112886c <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81128648:	e03ffb15 	stw	zero,-20(fp)
8112864c:	00001106 	br	81128694 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
81128650:	e0fffc17 	ldw	r3,-16(fp)
81128654:	e0bffb17 	ldw	r2,-20(fp)
81128658:	1885883a 	add	r2,r3,r2
8112865c:	1007883a 	mov	r3,r2
81128660:	d0a08817 	ldw	r2,-32224(gp)
81128664:	10800a17 	ldw	r2,40(r2)
81128668:	1885883a 	add	r2,r3,r2
8112866c:	10800023 	ldbuio	r2,0(r2)
81128670:	10803fcc 	andi	r2,r2,255
81128674:	1009883a 	mov	r4,r2
81128678:	e0fffd17 	ldw	r3,-12(fp)
8112867c:	e0bffb17 	ldw	r2,-20(fp)
81128680:	1885883a 	add	r2,r3,r2
81128684:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81128688:	e0bffb17 	ldw	r2,-20(fp)
8112868c:	10800044 	addi	r2,r2,1
81128690:	e0bffb15 	stw	r2,-20(fp)
81128694:	e0bffb17 	ldw	r2,-20(fp)
81128698:	10800210 	cmplti	r2,r2,8
8112869c:	103fec1e 	bne	r2,zero,81128650 <__reset+0xfb108650>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
811286a0:	e03ffb15 	stw	zero,-20(fp)
811286a4:	00001306 	br	811286f4 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
811286a8:	e0fffc17 	ldw	r3,-16(fp)
811286ac:	e0bffb17 	ldw	r2,-20(fp)
811286b0:	1885883a 	add	r2,r3,r2
811286b4:	1007883a 	mov	r3,r2
811286b8:	d0a08817 	ldw	r2,-32224(gp)
811286bc:	10800a17 	ldw	r2,40(r2)
811286c0:	1885883a 	add	r2,r3,r2
811286c4:	10800204 	addi	r2,r2,8
811286c8:	10800023 	ldbuio	r2,0(r2)
811286cc:	10803fcc 	andi	r2,r2,255
811286d0:	1009883a 	mov	r4,r2
811286d4:	e0fffd17 	ldw	r3,-12(fp)
811286d8:	e0bffb17 	ldw	r2,-20(fp)
811286dc:	1885883a 	add	r2,r3,r2
811286e0:	10800204 	addi	r2,r2,8
811286e4:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
811286e8:	e0bffb17 	ldw	r2,-20(fp)
811286ec:	10800044 	addi	r2,r2,1
811286f0:	e0bffb15 	stw	r2,-20(fp)
811286f4:	e0bffb17 	ldw	r2,-20(fp)
811286f8:	108000d0 	cmplti	r2,r2,3
811286fc:	103fea1e 	bne	r2,zero,811286a8 <__reset+0xfb1086a8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
81128700:	d0a08817 	ldw	r2,-32224(gp)
81128704:	10c00a17 	ldw	r3,40(r2)
81128708:	e0bffc17 	ldw	r2,-16(fp)
8112870c:	1885883a 	add	r2,r3,r2
81128710:	108002c4 	addi	r2,r2,11
81128714:	10800023 	ldbuio	r2,0(r2)
81128718:	10803fcc 	andi	r2,r2,255
8112871c:	1007883a 	mov	r3,r2
81128720:	e0bffd17 	ldw	r2,-12(fp)
81128724:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
81128728:	d0a08817 	ldw	r2,-32224(gp)
8112872c:	10c00a17 	ldw	r3,40(r2)
81128730:	e0bffc17 	ldw	r2,-16(fp)
81128734:	1885883a 	add	r2,r3,r2
81128738:	10800384 	addi	r2,r2,14
8112873c:	1080002b 	ldhuio	r2,0(r2)
81128740:	10bfffcc 	andi	r2,r2,65535
81128744:	1007883a 	mov	r3,r2
81128748:	e0bffd17 	ldw	r2,-12(fp)
8112874c:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
81128750:	d0a08817 	ldw	r2,-32224(gp)
81128754:	10c00a17 	ldw	r3,40(r2)
81128758:	e0bffc17 	ldw	r2,-16(fp)
8112875c:	1885883a 	add	r2,r3,r2
81128760:	10800404 	addi	r2,r2,16
81128764:	1080002b 	ldhuio	r2,0(r2)
81128768:	10bfffcc 	andi	r2,r2,65535
8112876c:	1007883a 	mov	r3,r2
81128770:	e0bffd17 	ldw	r2,-12(fp)
81128774:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
81128778:	d0a08817 	ldw	r2,-32224(gp)
8112877c:	10c00a17 	ldw	r3,40(r2)
81128780:	e0bffc17 	ldw	r2,-16(fp)
81128784:	1885883a 	add	r2,r3,r2
81128788:	10800484 	addi	r2,r2,18
8112878c:	1080002b 	ldhuio	r2,0(r2)
81128790:	10bfffcc 	andi	r2,r2,65535
81128794:	1007883a 	mov	r3,r2
81128798:	e0bffd17 	ldw	r2,-12(fp)
8112879c:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
811287a0:	d0a08817 	ldw	r2,-32224(gp)
811287a4:	10c00a17 	ldw	r3,40(r2)
811287a8:	e0bffc17 	ldw	r2,-16(fp)
811287ac:	1885883a 	add	r2,r3,r2
811287b0:	10800584 	addi	r2,r2,22
811287b4:	1080002b 	ldhuio	r2,0(r2)
811287b8:	10bfffcc 	andi	r2,r2,65535
811287bc:	1007883a 	mov	r3,r2
811287c0:	e0bffd17 	ldw	r2,-12(fp)
811287c4:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
811287c8:	d0a08817 	ldw	r2,-32224(gp)
811287cc:	10c00a17 	ldw	r3,40(r2)
811287d0:	e0bffc17 	ldw	r2,-16(fp)
811287d4:	1885883a 	add	r2,r3,r2
811287d8:	10800604 	addi	r2,r2,24
811287dc:	1080002b 	ldhuio	r2,0(r2)
811287e0:	10bfffcc 	andi	r2,r2,65535
811287e4:	1007883a 	mov	r3,r2
811287e8:	e0bffd17 	ldw	r2,-12(fp)
811287ec:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
811287f0:	d0a08817 	ldw	r2,-32224(gp)
811287f4:	10c00a17 	ldw	r3,40(r2)
811287f8:	e0bffc17 	ldw	r2,-16(fp)
811287fc:	1885883a 	add	r2,r3,r2
81128800:	10800684 	addi	r2,r2,26
81128804:	1080002b 	ldhuio	r2,0(r2)
81128808:	10bfffcc 	andi	r2,r2,65535
8112880c:	1007883a 	mov	r3,r2
81128810:	e0bffd17 	ldw	r2,-12(fp)
81128814:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
81128818:	d0a08817 	ldw	r2,-32224(gp)
8112881c:	10c00a17 	ldw	r3,40(r2)
81128820:	e0bffc17 	ldw	r2,-16(fp)
81128824:	1885883a 	add	r2,r3,r2
81128828:	10800704 	addi	r2,r2,28
8112882c:	10800037 	ldwio	r2,0(r2)
81128830:	1007883a 	mov	r3,r2
81128834:	e0bffd17 	ldw	r2,-12(fp)
81128838:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
8112883c:	e0bffd17 	ldw	r2,-12(fp)
81128840:	e0fffe17 	ldw	r3,-8(fp)
81128844:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
81128848:	e0bffd17 	ldw	r2,-12(fp)
8112884c:	e0ffff17 	ldw	r3,-4(fp)
81128850:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
81128854:	e0bffc17 	ldw	r2,-16(fp)
81128858:	1007883a 	mov	r3,r2
8112885c:	e0bffd17 	ldw	r2,-12(fp)
81128860:	10c00c0d 	sth	r3,48(r2)
		result = true;
81128864:	00800044 	movi	r2,1
81128868:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
8112886c:	e0bffa17 	ldw	r2,-24(fp)
}
81128870:	e037883a 	mov	sp,fp
81128874:	dfc00117 	ldw	ra,4(sp)
81128878:	df000017 	ldw	fp,0(sp)
8112887c:	dec00204 	addi	sp,sp,8
81128880:	f800283a 	ret

81128884 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
81128884:	defff904 	addi	sp,sp,-28
81128888:	dfc00615 	stw	ra,24(sp)
8112888c:	df000515 	stw	fp,20(sp)
81128890:	df000504 	addi	fp,sp,20
81128894:	e13ffe15 	stw	r4,-8(fp)
81128898:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
8112889c:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811288a0:	e0bffe17 	ldw	r2,-8(fp)
811288a4:	108007cc 	andi	r2,r2,31
811288a8:	1000931e 	bne	r2,zero,81128af8 <Write_File_Record_At_Offset+0x274>
811288ac:	112ae280 	call	8112ae28 <alt_up_sd_card_is_Present>
811288b0:	10009126 	beq	r2,zero,81128af8 <Write_File_Record_At_Offset+0x274>
811288b4:	d0a07f17 	ldw	r2,-32260(gp)
811288b8:	10008f26 	beq	r2,zero,81128af8 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
811288bc:	e03ffc15 	stw	zero,-16(fp)
811288c0:	00001f06 	br	81128940 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
811288c4:	e0bffc17 	ldw	r2,-16(fp)
811288c8:	10800044 	addi	r2,r2,1
811288cc:	e0ffff17 	ldw	r3,-4(fp)
811288d0:	1885883a 	add	r2,r3,r2
811288d4:	10800003 	ldbu	r2,0(r2)
811288d8:	10803fcc 	andi	r2,r2,255
811288dc:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
811288e0:	e0bffd0f 	ldh	r2,-12(fp)
811288e4:	1004923a 	slli	r2,r2,8
811288e8:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
811288ec:	e0ffff17 	ldw	r3,-4(fp)
811288f0:	e0bffc17 	ldw	r2,-16(fp)
811288f4:	1885883a 	add	r2,r3,r2
811288f8:	10800003 	ldbu	r2,0(r2)
811288fc:	10c03fcc 	andi	r3,r2,255
81128900:	e0bffd0b 	ldhu	r2,-12(fp)
81128904:	1884b03a 	or	r2,r3,r2
81128908:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
8112890c:	e0fffe17 	ldw	r3,-8(fp)
81128910:	e0bffc17 	ldw	r2,-16(fp)
81128914:	1885883a 	add	r2,r3,r2
81128918:	1007883a 	mov	r3,r2
8112891c:	d0a08817 	ldw	r2,-32224(gp)
81128920:	10800a17 	ldw	r2,40(r2)
81128924:	1885883a 	add	r2,r3,r2
81128928:	1007883a 	mov	r3,r2
8112892c:	e0bffd0f 	ldh	r2,-12(fp)
81128930:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81128934:	e0bffc17 	ldw	r2,-16(fp)
81128938:	10800084 	addi	r2,r2,2
8112893c:	e0bffc15 	stw	r2,-16(fp)
81128940:	e0bffc17 	ldw	r2,-16(fp)
81128944:	10800210 	cmplti	r2,r2,8
81128948:	103fde1e 	bne	r2,zero,811288c4 <__reset+0xfb1088c4>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
8112894c:	e03ffc15 	stw	zero,-16(fp)
81128950:	00001306 	br	811289a0 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
81128954:	e0fffe17 	ldw	r3,-8(fp)
81128958:	e0bffc17 	ldw	r2,-16(fp)
8112895c:	1885883a 	add	r2,r3,r2
81128960:	1007883a 	mov	r3,r2
81128964:	d0a08817 	ldw	r2,-32224(gp)
81128968:	10800a17 	ldw	r2,40(r2)
8112896c:	1885883a 	add	r2,r3,r2
81128970:	10800204 	addi	r2,r2,8
81128974:	1009883a 	mov	r4,r2
81128978:	e0ffff17 	ldw	r3,-4(fp)
8112897c:	e0bffc17 	ldw	r2,-16(fp)
81128980:	1885883a 	add	r2,r3,r2
81128984:	10800204 	addi	r2,r2,8
81128988:	10800003 	ldbu	r2,0(r2)
8112898c:	10803fcc 	andi	r2,r2,255
81128990:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
81128994:	e0bffc17 	ldw	r2,-16(fp)
81128998:	10800044 	addi	r2,r2,1
8112899c:	e0bffc15 	stw	r2,-16(fp)
811289a0:	e0bffc17 	ldw	r2,-16(fp)
811289a4:	108000d0 	cmplti	r2,r2,3
811289a8:	103fea1e 	bne	r2,zero,81128954 <__reset+0xfb108954>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
811289ac:	d0a08817 	ldw	r2,-32224(gp)
811289b0:	10c00a17 	ldw	r3,40(r2)
811289b4:	e0bffe17 	ldw	r2,-8(fp)
811289b8:	1885883a 	add	r2,r3,r2
811289bc:	108002c4 	addi	r2,r2,11
811289c0:	1007883a 	mov	r3,r2
811289c4:	e0bfff17 	ldw	r2,-4(fp)
811289c8:	108002c3 	ldbu	r2,11(r2)
811289cc:	10803fcc 	andi	r2,r2,255
811289d0:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
811289d4:	d0a08817 	ldw	r2,-32224(gp)
811289d8:	10c00a17 	ldw	r3,40(r2)
811289dc:	e0bffe17 	ldw	r2,-8(fp)
811289e0:	1885883a 	add	r2,r3,r2
811289e4:	10800384 	addi	r2,r2,14
811289e8:	1007883a 	mov	r3,r2
811289ec:	e0bfff17 	ldw	r2,-4(fp)
811289f0:	1080030b 	ldhu	r2,12(r2)
811289f4:	10bfffcc 	andi	r2,r2,65535
811289f8:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
811289fc:	d0a08817 	ldw	r2,-32224(gp)
81128a00:	10c00a17 	ldw	r3,40(r2)
81128a04:	e0bffe17 	ldw	r2,-8(fp)
81128a08:	1885883a 	add	r2,r3,r2
81128a0c:	10800404 	addi	r2,r2,16
81128a10:	1007883a 	mov	r3,r2
81128a14:	e0bfff17 	ldw	r2,-4(fp)
81128a18:	1080038b 	ldhu	r2,14(r2)
81128a1c:	10bfffcc 	andi	r2,r2,65535
81128a20:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
81128a24:	d0a08817 	ldw	r2,-32224(gp)
81128a28:	10c00a17 	ldw	r3,40(r2)
81128a2c:	e0bffe17 	ldw	r2,-8(fp)
81128a30:	1885883a 	add	r2,r3,r2
81128a34:	10800484 	addi	r2,r2,18
81128a38:	1007883a 	mov	r3,r2
81128a3c:	e0bfff17 	ldw	r2,-4(fp)
81128a40:	1080040b 	ldhu	r2,16(r2)
81128a44:	10bfffcc 	andi	r2,r2,65535
81128a48:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
81128a4c:	d0a08817 	ldw	r2,-32224(gp)
81128a50:	10c00a17 	ldw	r3,40(r2)
81128a54:	e0bffe17 	ldw	r2,-8(fp)
81128a58:	1885883a 	add	r2,r3,r2
81128a5c:	10800584 	addi	r2,r2,22
81128a60:	1007883a 	mov	r3,r2
81128a64:	e0bfff17 	ldw	r2,-4(fp)
81128a68:	1080048b 	ldhu	r2,18(r2)
81128a6c:	10bfffcc 	andi	r2,r2,65535
81128a70:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
81128a74:	d0a08817 	ldw	r2,-32224(gp)
81128a78:	10c00a17 	ldw	r3,40(r2)
81128a7c:	e0bffe17 	ldw	r2,-8(fp)
81128a80:	1885883a 	add	r2,r3,r2
81128a84:	10800604 	addi	r2,r2,24
81128a88:	1007883a 	mov	r3,r2
81128a8c:	e0bfff17 	ldw	r2,-4(fp)
81128a90:	1080050b 	ldhu	r2,20(r2)
81128a94:	10bfffcc 	andi	r2,r2,65535
81128a98:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
81128a9c:	d0a08817 	ldw	r2,-32224(gp)
81128aa0:	10c00a17 	ldw	r3,40(r2)
81128aa4:	e0bffe17 	ldw	r2,-8(fp)
81128aa8:	1885883a 	add	r2,r3,r2
81128aac:	10800684 	addi	r2,r2,26
81128ab0:	1007883a 	mov	r3,r2
81128ab4:	e0bfff17 	ldw	r2,-4(fp)
81128ab8:	1080058b 	ldhu	r2,22(r2)
81128abc:	10bfffcc 	andi	r2,r2,65535
81128ac0:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
81128ac4:	d0a08817 	ldw	r2,-32224(gp)
81128ac8:	10c00a17 	ldw	r3,40(r2)
81128acc:	e0bffe17 	ldw	r2,-8(fp)
81128ad0:	1885883a 	add	r2,r3,r2
81128ad4:	10800704 	addi	r2,r2,28
81128ad8:	1007883a 	mov	r3,r2
81128adc:	e0bfff17 	ldw	r2,-4(fp)
81128ae0:	10800617 	ldw	r2,24(r2)
81128ae4:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
81128ae8:	00800044 	movi	r2,1
81128aec:	d0a08915 	stw	r2,-32220(gp)
        result = true;
81128af0:	00800044 	movi	r2,1
81128af4:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
81128af8:	e0bffb17 	ldw	r2,-20(fp)
}
81128afc:	e037883a 	mov	sp,fp
81128b00:	dfc00117 	ldw	ra,4(sp)
81128b04:	df000017 	ldw	fp,0(sp)
81128b08:	dec00204 	addi	sp,sp,8
81128b0c:	f800283a 	ret

81128b10 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
81128b10:	defff904 	addi	sp,sp,-28
81128b14:	dfc00615 	stw	ra,24(sp)
81128b18:	df000515 	stw	fp,20(sp)
81128b1c:	df000504 	addi	fp,sp,20
81128b20:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
81128b24:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
81128b28:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
81128b2c:	e17fff17 	ldw	r5,-4(fp)
81128b30:	0009883a 	mov	r4,zero
81128b34:	11281f80 	call	811281f8 <Read_Sector_Data>
81128b38:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
81128b3c:	d0a08817 	ldw	r2,-32224(gp)
81128b40:	10800a17 	ldw	r2,40(r2)
81128b44:	10807f84 	addi	r2,r2,510
81128b48:	1080002b 	ldhuio	r2,0(r2)
81128b4c:	10bfffcc 	andi	r2,r2,65535
81128b50:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
81128b54:	e0bffe0f 	ldh	r2,-8(fp)
81128b58:	10ffffcc 	andi	r3,r2,65535
81128b5c:	00aa9554 	movui	r2,43605
81128b60:	1881841e 	bne	r3,r2,81129174 <Check_for_DOS_FAT+0x664>
81128b64:	e0bffb17 	ldw	r2,-20(fp)
81128b68:	10018226 	beq	r2,zero,81129174 <Check_for_DOS_FAT+0x664>
	{
		int num_clusters = 0;
81128b6c:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
81128b70:	d0a08817 	ldw	r2,-32224(gp)
81128b74:	10800a17 	ldw	r2,40(r2)
81128b78:	10800023 	ldbuio	r2,0(r2)
81128b7c:	10803fcc 	andi	r2,r2,255
81128b80:	1007883a 	mov	r3,r2
81128b84:	00a04574 	movhi	r2,33045
81128b88:	10972604 	addi	r2,r2,23704
81128b8c:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
81128b90:	d0a08817 	ldw	r2,-32224(gp)
81128b94:	10800a17 	ldw	r2,40(r2)
81128b98:	10800044 	addi	r2,r2,1
81128b9c:	10800023 	ldbuio	r2,0(r2)
81128ba0:	10803fcc 	andi	r2,r2,255
81128ba4:	1007883a 	mov	r3,r2
81128ba8:	00a04574 	movhi	r2,33045
81128bac:	10972604 	addi	r2,r2,23704
81128bb0:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
81128bb4:	d0a08817 	ldw	r2,-32224(gp)
81128bb8:	10800a17 	ldw	r2,40(r2)
81128bbc:	10800084 	addi	r2,r2,2
81128bc0:	10800023 	ldbuio	r2,0(r2)
81128bc4:	10803fcc 	andi	r2,r2,255
81128bc8:	1007883a 	mov	r3,r2
81128bcc:	00a04574 	movhi	r2,33045
81128bd0:	10972604 	addi	r2,r2,23704
81128bd4:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
81128bd8:	e03ffc15 	stw	zero,-16(fp)
81128bdc:	00001106 	br	81128c24 <Check_for_DOS_FAT+0x114>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
81128be0:	d0a08817 	ldw	r2,-32224(gp)
81128be4:	10c00a17 	ldw	r3,40(r2)
81128be8:	e0bffc17 	ldw	r2,-16(fp)
81128bec:	1885883a 	add	r2,r3,r2
81128bf0:	108000c4 	addi	r2,r2,3
81128bf4:	10800023 	ldbuio	r2,0(r2)
81128bf8:	10803fcc 	andi	r2,r2,255
81128bfc:	1009883a 	mov	r4,r2
81128c00:	00a04574 	movhi	r2,33045
81128c04:	10972604 	addi	r2,r2,23704
81128c08:	e0fffc17 	ldw	r3,-16(fp)
81128c0c:	10c5883a 	add	r2,r2,r3
81128c10:	108000c4 	addi	r2,r2,3
81128c14:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
81128c18:	e0bffc17 	ldw	r2,-16(fp)
81128c1c:	10800044 	addi	r2,r2,1
81128c20:	e0bffc15 	stw	r2,-16(fp)
81128c24:	e0bffc17 	ldw	r2,-16(fp)
81128c28:	10800210 	cmplti	r2,r2,8
81128c2c:	103fec1e 	bne	r2,zero,81128be0 <__reset+0xfb108be0>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
81128c30:	d0a08817 	ldw	r2,-32224(gp)
81128c34:	10800a17 	ldw	r2,40(r2)
81128c38:	10800304 	addi	r2,r2,12
81128c3c:	10800023 	ldbuio	r2,0(r2)
81128c40:	10803fcc 	andi	r2,r2,255
81128c44:	1004923a 	slli	r2,r2,8
81128c48:	1007883a 	mov	r3,r2
81128c4c:	d0a08817 	ldw	r2,-32224(gp)
81128c50:	10800a17 	ldw	r2,40(r2)
81128c54:	108002c4 	addi	r2,r2,11
81128c58:	10800023 	ldbuio	r2,0(r2)
81128c5c:	10803fcc 	andi	r2,r2,255
81128c60:	10803fcc 	andi	r2,r2,255
81128c64:	1080201c 	xori	r2,r2,128
81128c68:	10bfe004 	addi	r2,r2,-128
81128c6c:	1884b03a 	or	r2,r3,r2
81128c70:	1007883a 	mov	r3,r2
81128c74:	00a04574 	movhi	r2,33045
81128c78:	10972604 	addi	r2,r2,23704
81128c7c:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
81128c80:	d0a08817 	ldw	r2,-32224(gp)
81128c84:	10800a17 	ldw	r2,40(r2)
81128c88:	10800344 	addi	r2,r2,13
81128c8c:	10800023 	ldbuio	r2,0(r2)
81128c90:	10803fcc 	andi	r2,r2,255
81128c94:	1007883a 	mov	r3,r2
81128c98:	00a04574 	movhi	r2,33045
81128c9c:	10972604 	addi	r2,r2,23704
81128ca0:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
81128ca4:	d0a08817 	ldw	r2,-32224(gp)
81128ca8:	10800a17 	ldw	r2,40(r2)
81128cac:	10800384 	addi	r2,r2,14
81128cb0:	1080002b 	ldhuio	r2,0(r2)
81128cb4:	10bfffcc 	andi	r2,r2,65535
81128cb8:	1007883a 	mov	r3,r2
81128cbc:	00a04574 	movhi	r2,33045
81128cc0:	10972604 	addi	r2,r2,23704
81128cc4:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
81128cc8:	d0a08817 	ldw	r2,-32224(gp)
81128ccc:	10800a17 	ldw	r2,40(r2)
81128cd0:	10800404 	addi	r2,r2,16
81128cd4:	10800023 	ldbuio	r2,0(r2)
81128cd8:	10803fcc 	andi	r2,r2,255
81128cdc:	1007883a 	mov	r3,r2
81128ce0:	00a04574 	movhi	r2,33045
81128ce4:	10972604 	addi	r2,r2,23704
81128ce8:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
81128cec:	d0a08817 	ldw	r2,-32224(gp)
81128cf0:	10800a17 	ldw	r2,40(r2)
81128cf4:	10800484 	addi	r2,r2,18
81128cf8:	10800023 	ldbuio	r2,0(r2)
81128cfc:	10803fcc 	andi	r2,r2,255
81128d00:	1004923a 	slli	r2,r2,8
81128d04:	1007883a 	mov	r3,r2
81128d08:	d0a08817 	ldw	r2,-32224(gp)
81128d0c:	10800a17 	ldw	r2,40(r2)
81128d10:	10800444 	addi	r2,r2,17
81128d14:	10800023 	ldbuio	r2,0(r2)
81128d18:	10803fcc 	andi	r2,r2,255
81128d1c:	10803fcc 	andi	r2,r2,255
81128d20:	1884b03a 	or	r2,r3,r2
81128d24:	1007883a 	mov	r3,r2
81128d28:	00a04574 	movhi	r2,33045
81128d2c:	10972604 	addi	r2,r2,23704
81128d30:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
81128d34:	d0a08817 	ldw	r2,-32224(gp)
81128d38:	10800a17 	ldw	r2,40(r2)
81128d3c:	10800504 	addi	r2,r2,20
81128d40:	10800023 	ldbuio	r2,0(r2)
81128d44:	10803fcc 	andi	r2,r2,255
81128d48:	1004923a 	slli	r2,r2,8
81128d4c:	1007883a 	mov	r3,r2
81128d50:	d0a08817 	ldw	r2,-32224(gp)
81128d54:	10800a17 	ldw	r2,40(r2)
81128d58:	108004c4 	addi	r2,r2,19
81128d5c:	10800023 	ldbuio	r2,0(r2)
81128d60:	10803fcc 	andi	r2,r2,255
81128d64:	10803fcc 	andi	r2,r2,255
81128d68:	1884b03a 	or	r2,r3,r2
81128d6c:	1007883a 	mov	r3,r2
81128d70:	00a04574 	movhi	r2,33045
81128d74:	10972604 	addi	r2,r2,23704
81128d78:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
81128d7c:	d0a08817 	ldw	r2,-32224(gp)
81128d80:	10800a17 	ldw	r2,40(r2)
81128d84:	10800544 	addi	r2,r2,21
81128d88:	10800023 	ldbuio	r2,0(r2)
81128d8c:	10803fcc 	andi	r2,r2,255
81128d90:	1007883a 	mov	r3,r2
81128d94:	00a04574 	movhi	r2,33045
81128d98:	10972604 	addi	r2,r2,23704
81128d9c:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
81128da0:	d0a08817 	ldw	r2,-32224(gp)
81128da4:	10800a17 	ldw	r2,40(r2)
81128da8:	10800584 	addi	r2,r2,22
81128dac:	1080002b 	ldhuio	r2,0(r2)
81128db0:	10bfffcc 	andi	r2,r2,65535
81128db4:	1007883a 	mov	r3,r2
81128db8:	00a04574 	movhi	r2,33045
81128dbc:	10972604 	addi	r2,r2,23704
81128dc0:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
81128dc4:	d0a08817 	ldw	r2,-32224(gp)
81128dc8:	10800a17 	ldw	r2,40(r2)
81128dcc:	10800604 	addi	r2,r2,24
81128dd0:	1080002b 	ldhuio	r2,0(r2)
81128dd4:	10bfffcc 	andi	r2,r2,65535
81128dd8:	1007883a 	mov	r3,r2
81128ddc:	00a04574 	movhi	r2,33045
81128de0:	10972604 	addi	r2,r2,23704
81128de4:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
81128de8:	d0a08817 	ldw	r2,-32224(gp)
81128dec:	10800a17 	ldw	r2,40(r2)
81128df0:	10800684 	addi	r2,r2,26
81128df4:	1080002b 	ldhuio	r2,0(r2)
81128df8:	10bfffcc 	andi	r2,r2,65535
81128dfc:	1007883a 	mov	r3,r2
81128e00:	00a04574 	movhi	r2,33045
81128e04:	10972604 	addi	r2,r2,23704
81128e08:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
81128e0c:	d0a08817 	ldw	r2,-32224(gp)
81128e10:	10800a17 	ldw	r2,40(r2)
81128e14:	10800704 	addi	r2,r2,28
81128e18:	10800037 	ldwio	r2,0(r2)
81128e1c:	1007883a 	mov	r3,r2
81128e20:	00a04574 	movhi	r2,33045
81128e24:	10972604 	addi	r2,r2,23704
81128e28:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
81128e2c:	d0a08817 	ldw	r2,-32224(gp)
81128e30:	10800a17 	ldw	r2,40(r2)
81128e34:	10800804 	addi	r2,r2,32
81128e38:	10800037 	ldwio	r2,0(r2)
81128e3c:	1007883a 	mov	r3,r2
81128e40:	00a04574 	movhi	r2,33045
81128e44:	10972604 	addi	r2,r2,23704
81128e48:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
81128e4c:	d0a08817 	ldw	r2,-32224(gp)
81128e50:	10800a17 	ldw	r2,40(r2)
81128e54:	10800904 	addi	r2,r2,36
81128e58:	10800023 	ldbuio	r2,0(r2)
81128e5c:	10803fcc 	andi	r2,r2,255
81128e60:	1007883a 	mov	r3,r2
81128e64:	00a04574 	movhi	r2,33045
81128e68:	10972604 	addi	r2,r2,23704
81128e6c:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
81128e70:	d0a08817 	ldw	r2,-32224(gp)
81128e74:	10800a17 	ldw	r2,40(r2)
81128e78:	10800944 	addi	r2,r2,37
81128e7c:	10800023 	ldbuio	r2,0(r2)
81128e80:	10803fcc 	andi	r2,r2,255
81128e84:	1007883a 	mov	r3,r2
81128e88:	00a04574 	movhi	r2,33045
81128e8c:	10972604 	addi	r2,r2,23704
81128e90:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
81128e94:	d0a08817 	ldw	r2,-32224(gp)
81128e98:	10800a17 	ldw	r2,40(r2)
81128e9c:	10800984 	addi	r2,r2,38
81128ea0:	10800023 	ldbuio	r2,0(r2)
81128ea4:	10803fcc 	andi	r2,r2,255
81128ea8:	1007883a 	mov	r3,r2
81128eac:	00a04574 	movhi	r2,33045
81128eb0:	10972604 	addi	r2,r2,23704
81128eb4:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
81128eb8:	00a04574 	movhi	r2,33045
81128ebc:	10972604 	addi	r2,r2,23704
81128ec0:	1080040b 	ldhu	r2,16(r2)
81128ec4:	10ffffcc 	andi	r3,r2,65535
81128ec8:	00a04574 	movhi	r2,33045
81128ecc:	10972604 	addi	r2,r2,23704
81128ed0:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
81128ed4:	00a04574 	movhi	r2,33045
81128ed8:	10972604 	addi	r2,r2,23704
81128edc:	10c01117 	ldw	r3,68(r2)
81128ee0:	00a04574 	movhi	r2,33045
81128ee4:	10972604 	addi	r2,r2,23704
81128ee8:	1080068b 	ldhu	r2,26(r2)
81128eec:	10bfffcc 	andi	r2,r2,65535
81128ef0:	1887883a 	add	r3,r3,r2
81128ef4:	00a04574 	movhi	r2,33045
81128ef8:	10972604 	addi	r2,r2,23704
81128efc:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
81128f00:	00a04574 	movhi	r2,33045
81128f04:	10972604 	addi	r2,r2,23704
81128f08:	10c01217 	ldw	r3,72(r2)
81128f0c:	00a04574 	movhi	r2,33045
81128f10:	10972604 	addi	r2,r2,23704
81128f14:	1080068b 	ldhu	r2,26(r2)
81128f18:	10bfffcc 	andi	r2,r2,65535
81128f1c:	1887883a 	add	r3,r3,r2
81128f20:	00a04574 	movhi	r2,33045
81128f24:	10972604 	addi	r2,r2,23704
81128f28:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
81128f2c:	00a04574 	movhi	r2,33045
81128f30:	10972604 	addi	r2,r2,23704
81128f34:	10c01317 	ldw	r3,76(r2)
81128f38:	00a04574 	movhi	r2,33045
81128f3c:	10972604 	addi	r2,r2,23704
81128f40:	1080050b 	ldhu	r2,20(r2)
81128f44:	10bfffcc 	andi	r2,r2,65535
81128f48:	1008917a 	slli	r4,r2,5
81128f4c:	00a04574 	movhi	r2,33045
81128f50:	10972604 	addi	r2,r2,23704
81128f54:	1080030b 	ldhu	r2,12(r2)
81128f58:	10bfffcc 	andi	r2,r2,65535
81128f5c:	2085283a 	div	r2,r4,r2
81128f60:	1887883a 	add	r3,r3,r2
81128f64:	00a04574 	movhi	r2,33045
81128f68:	10972604 	addi	r2,r2,23704
81128f6c:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
81128f70:	00a04574 	movhi	r2,33045
81128f74:	10972604 	addi	r2,r2,23704
81128f78:	1080058b 	ldhu	r2,22(r2)
81128f7c:	10bfffcc 	andi	r2,r2,65535
81128f80:	10000b26 	beq	r2,zero,81128fb0 <Check_for_DOS_FAT+0x4a0>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
81128f84:	00a04574 	movhi	r2,33045
81128f88:	10972604 	addi	r2,r2,23704
81128f8c:	1080058b 	ldhu	r2,22(r2)
81128f90:	10ffffcc 	andi	r3,r2,65535
81128f94:	00a04574 	movhi	r2,33045
81128f98:	10972604 	addi	r2,r2,23704
81128f9c:	10800383 	ldbu	r2,14(r2)
81128fa0:	10803fcc 	andi	r2,r2,255
81128fa4:	1885283a 	div	r2,r3,r2
81128fa8:	e0bffd15 	stw	r2,-12(fp)
81128fac:	00000906 	br	81128fd4 <Check_for_DOS_FAT+0x4c4>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
81128fb0:	00a04574 	movhi	r2,33045
81128fb4:	10972604 	addi	r2,r2,23704
81128fb8:	10c00917 	ldw	r3,36(r2)
81128fbc:	00a04574 	movhi	r2,33045
81128fc0:	10972604 	addi	r2,r2,23704
81128fc4:	10800383 	ldbu	r2,14(r2)
81128fc8:	10803fcc 	andi	r2,r2,255
81128fcc:	1885203a 	divu	r2,r3,r2
81128fd0:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
81128fd4:	e0bffd17 	ldw	r2,-12(fp)
81128fd8:	1083fdc8 	cmpgei	r2,r2,4087
81128fdc:	1000051e 	bne	r2,zero,81128ff4 <Check_for_DOS_FAT+0x4e4>
		{
			boot_sector_data.bits_for_cluster_index = 12;
81128fe0:	00a04574 	movhi	r2,33045
81128fe4:	10972604 	addi	r2,r2,23704
81128fe8:	00c00304 	movi	r3,12
81128fec:	10c01085 	stb	r3,66(r2)
81128ff0:	00000c06 	br	81129024 <Check_for_DOS_FAT+0x514>
		}
		else if (num_clusters <= 65517)
81128ff4:	e0bffd17 	ldw	r2,-12(fp)
81128ff8:	00fffb54 	movui	r3,65517
81128ffc:	18800516 	blt	r3,r2,81129014 <Check_for_DOS_FAT+0x504>
		{
			boot_sector_data.bits_for_cluster_index = 16;
81129000:	00a04574 	movhi	r2,33045
81129004:	10972604 	addi	r2,r2,23704
81129008:	00c00404 	movi	r3,16
8112900c:	10c01085 	stb	r3,66(r2)
81129010:	00000406 	br	81129024 <Check_for_DOS_FAT+0x514>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
81129014:	00a04574 	movhi	r2,33045
81129018:	10972604 	addi	r2,r2,23704
8112901c:	00c00804 	movi	r3,32
81129020:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
81129024:	e03ffc15 	stw	zero,-16(fp)
81129028:	00001106 	br	81129070 <Check_for_DOS_FAT+0x560>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
8112902c:	d0a08817 	ldw	r2,-32224(gp)
81129030:	10c00a17 	ldw	r3,40(r2)
81129034:	e0bffc17 	ldw	r2,-16(fp)
81129038:	1885883a 	add	r2,r3,r2
8112903c:	108009c4 	addi	r2,r2,39
81129040:	10800023 	ldbuio	r2,0(r2)
81129044:	10803fcc 	andi	r2,r2,255
81129048:	1009883a 	mov	r4,r2
8112904c:	00a04574 	movhi	r2,33045
81129050:	10972604 	addi	r2,r2,23704
81129054:	e0fffc17 	ldw	r3,-16(fp)
81129058:	10c5883a 	add	r2,r2,r3
8112905c:	10800ac4 	addi	r2,r2,43
81129060:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
81129064:	e0bffc17 	ldw	r2,-16(fp)
81129068:	10800044 	addi	r2,r2,1
8112906c:	e0bffc15 	stw	r2,-16(fp)
81129070:	e0bffc17 	ldw	r2,-16(fp)
81129074:	10800110 	cmplti	r2,r2,4
81129078:	103fec1e 	bne	r2,zero,8112902c <__reset+0xfb10902c>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
8112907c:	e03ffc15 	stw	zero,-16(fp)
81129080:	00001106 	br	811290c8 <Check_for_DOS_FAT+0x5b8>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
81129084:	d0a08817 	ldw	r2,-32224(gp)
81129088:	10c00a17 	ldw	r3,40(r2)
8112908c:	e0bffc17 	ldw	r2,-16(fp)
81129090:	1885883a 	add	r2,r3,r2
81129094:	10800ac4 	addi	r2,r2,43
81129098:	10800023 	ldbuio	r2,0(r2)
8112909c:	10803fcc 	andi	r2,r2,255
811290a0:	1009883a 	mov	r4,r2
811290a4:	00a04574 	movhi	r2,33045
811290a8:	10972604 	addi	r2,r2,23704
811290ac:	e0fffc17 	ldw	r3,-16(fp)
811290b0:	10c5883a 	add	r2,r2,r3
811290b4:	10800bc4 	addi	r2,r2,47
811290b8:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
811290bc:	e0bffc17 	ldw	r2,-16(fp)
811290c0:	10800044 	addi	r2,r2,1
811290c4:	e0bffc15 	stw	r2,-16(fp)
811290c8:	e0bffc17 	ldw	r2,-16(fp)
811290cc:	108002d0 	cmplti	r2,r2,11
811290d0:	103fec1e 	bne	r2,zero,81129084 <__reset+0xfb109084>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
811290d4:	e03ffc15 	stw	zero,-16(fp)
811290d8:	00001106 	br	81129120 <Check_for_DOS_FAT+0x610>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
811290dc:	d0a08817 	ldw	r2,-32224(gp)
811290e0:	10c00a17 	ldw	r3,40(r2)
811290e4:	e0bffc17 	ldw	r2,-16(fp)
811290e8:	1885883a 	add	r2,r3,r2
811290ec:	10800d84 	addi	r2,r2,54
811290f0:	10800023 	ldbuio	r2,0(r2)
811290f4:	10803fcc 	andi	r2,r2,255
811290f8:	1009883a 	mov	r4,r2
811290fc:	00a04574 	movhi	r2,33045
81129100:	10972604 	addi	r2,r2,23704
81129104:	e0fffc17 	ldw	r3,-16(fp)
81129108:	10c5883a 	add	r2,r2,r3
8112910c:	10800e84 	addi	r2,r2,58
81129110:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
81129114:	e0bffc17 	ldw	r2,-16(fp)
81129118:	10800044 	addi	r2,r2,1
8112911c:	e0bffc15 	stw	r2,-16(fp)
81129120:	e0bffc17 	ldw	r2,-16(fp)
81129124:	10800210 	cmplti	r2,r2,8
81129128:	103fec1e 	bne	r2,zero,811290dc <__reset+0xfb1090dc>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
8112912c:	e03ffc15 	stw	zero,-16(fp)
81129130:	00000a06 	br	8112915c <Check_for_DOS_FAT+0x64c>
		{
			active_files[counter].in_use = false;
81129134:	00a04574 	movhi	r2,33045
81129138:	10973b04 	addi	r2,r2,23788
8112913c:	e0fffc17 	ldw	r3,-16(fp)
81129140:	180691ba 	slli	r3,r3,6
81129144:	10c5883a 	add	r2,r2,r3
81129148:	10800f04 	addi	r2,r2,60
8112914c:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
81129150:	e0bffc17 	ldw	r2,-16(fp)
81129154:	10800044 	addi	r2,r2,1
81129158:	e0bffc15 	stw	r2,-16(fp)
8112915c:	e0bffc17 	ldw	r2,-16(fp)
81129160:	10800510 	cmplti	r2,r2,20
81129164:	103ff31e 	bne	r2,zero,81129134 <__reset+0xfb109134>
		{
			active_files[counter].in_use = false;
		}
		result = true;
81129168:	00800044 	movi	r2,1
8112916c:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
81129170:	00000106 	br	81129178 <Check_for_DOS_FAT+0x668>
		}
		result = true;
	}
    else
    {
        result = false;
81129174:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
81129178:	e0bffb17 	ldw	r2,-20(fp)
}
8112917c:	e037883a 	mov	sp,fp
81129180:	dfc00117 	ldw	ra,4(sp)
81129184:	df000017 	ldw	fp,0(sp)
81129188:	dec00204 	addi	sp,sp,8
8112918c:	f800283a 	ret

81129190 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
81129190:	defffc04 	addi	sp,sp,-16
81129194:	dfc00315 	stw	ra,12(sp)
81129198:	df000215 	stw	fp,8(sp)
8112919c:	df000204 	addi	fp,sp,8
	bool result = false;
811291a0:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
811291a4:	112ae280 	call	8112ae28 <alt_up_sd_card_is_Present>
811291a8:	10002e26 	beq	r2,zero,81129264 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
811291ac:	d0a08217 	ldw	r2,-32248(gp)
811291b0:	1080000b 	ldhu	r2,0(r2)
811291b4:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
811291b8:	d0208615 	stw	zero,-32232(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
811291bc:	d0208715 	stw	zero,-32228(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
811291c0:	e0bfff0f 	ldh	r2,-4(fp)
811291c4:	10002716 	blt	r2,zero,81129264 <Look_for_FAT16+0xd4>
811291c8:	e0bfff0b 	ldhu	r2,-4(fp)
811291cc:	10bfffcc 	andi	r2,r2,65535
811291d0:	1083000c 	andi	r2,r2,3072
811291d4:	10830020 	cmpeqi	r2,r2,3072
811291d8:	1000221e 	bne	r2,zero,81129264 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
811291dc:	e0bfff0b 	ldhu	r2,-4(fp)
811291e0:	10bfffcc 	andi	r2,r2,65535
811291e4:	1083000c 	andi	r2,r2,3072
811291e8:	10810018 	cmpnei	r2,r2,1024
811291ec:	1000031e 	bne	r2,zero,811291fc <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
811291f0:	0009883a 	mov	r4,zero
811291f4:	1128b100 	call	81128b10 <Check_for_DOS_FAT>
811291f8:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
811291fc:	e0bfff0b 	ldhu	r2,-4(fp)
81129200:	10bfffcc 	andi	r2,r2,65535
81129204:	1083000c 	andi	r2,r2,3072
81129208:	1000061e 	bne	r2,zero,81129224 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
8112920c:	11284640 	call	81128464 <Check_for_Master_Boot_Record>
81129210:	10000426 	beq	r2,zero,81129224 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
81129214:	d0a08617 	ldw	r2,-32232(gp)
81129218:	1009883a 	mov	r4,r2
8112921c:	1128b100 	call	81128b10 <Check_for_DOS_FAT>
81129220:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
81129224:	e0bffe17 	ldw	r2,-8(fp)
81129228:	10800058 	cmpnei	r2,r2,1
8112922c:	10000d1e 	bne	r2,zero,81129264 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
81129230:	00a04574 	movhi	r2,33045
81129234:	10972604 	addi	r2,r2,23704
81129238:	10801083 	ldbu	r2,66(r2)
8112923c:	10803fcc 	andi	r2,r2,255
81129240:	10800420 	cmpeqi	r2,r2,16
81129244:	1000021e 	bne	r2,zero,81129250 <Look_for_FAT16+0xc0>
				{
					result = false;
81129248:	e03ffe15 	stw	zero,-8(fp)
8112924c:	00000506 	br	81129264 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
81129250:	00a04574 	movhi	r2,33045
81129254:	10972604 	addi	r2,r2,23704
81129258:	1080058b 	ldhu	r2,22(r2)
8112925c:	10bfffcc 	andi	r2,r2,65535
81129260:	d0a08715 	stw	r2,-32228(gp)
				}
			}
		}
	}
	return result;
81129264:	e0bffe17 	ldw	r2,-8(fp)
}
81129268:	e037883a 	mov	sp,fp
8112926c:	dfc00117 	ldw	ra,4(sp)
81129270:	df000017 	ldw	fp,0(sp)
81129274:	dec00204 	addi	sp,sp,8
81129278:	f800283a 	ret

8112927c <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
8112927c:	defffb04 	addi	sp,sp,-20
81129280:	dfc00415 	stw	ra,16(sp)
81129284:	df000315 	stw	fp,12(sp)
81129288:	df000304 	addi	fp,sp,12
8112928c:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
81129290:	e13fff17 	ldw	r4,-4(fp)
81129294:	110bc740 	call	8110bc74 <strlen>
81129298:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
8112929c:	e03ffd15 	stw	zero,-12(fp)
811292a0:	00001e06 	br	8112931c <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
811292a4:	e0bffd17 	ldw	r2,-12(fp)
811292a8:	e0ffff17 	ldw	r3,-4(fp)
811292ac:	1885883a 	add	r2,r3,r2
811292b0:	10800003 	ldbu	r2,0(r2)
811292b4:	10803fcc 	andi	r2,r2,255
811292b8:	1080201c 	xori	r2,r2,128
811292bc:	10bfe004 	addi	r2,r2,-128
811292c0:	10801850 	cmplti	r2,r2,97
811292c4:	1000121e 	bne	r2,zero,81129310 <filename_to_upper_case+0x94>
811292c8:	e0bffd17 	ldw	r2,-12(fp)
811292cc:	e0ffff17 	ldw	r3,-4(fp)
811292d0:	1885883a 	add	r2,r3,r2
811292d4:	10800003 	ldbu	r2,0(r2)
811292d8:	10803fcc 	andi	r2,r2,255
811292dc:	1080201c 	xori	r2,r2,128
811292e0:	10bfe004 	addi	r2,r2,-128
811292e4:	10801ec8 	cmpgei	r2,r2,123
811292e8:	1000091e 	bne	r2,zero,81129310 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
811292ec:	e0bffd17 	ldw	r2,-12(fp)
811292f0:	e0ffff17 	ldw	r3,-4(fp)
811292f4:	1885883a 	add	r2,r3,r2
811292f8:	e0fffd17 	ldw	r3,-12(fp)
811292fc:	e13fff17 	ldw	r4,-4(fp)
81129300:	20c7883a 	add	r3,r4,r3
81129304:	18c00003 	ldbu	r3,0(r3)
81129308:	18fff804 	addi	r3,r3,-32
8112930c:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
81129310:	e0bffd17 	ldw	r2,-12(fp)
81129314:	10800044 	addi	r2,r2,1
81129318:	e0bffd15 	stw	r2,-12(fp)
8112931c:	e0fffd17 	ldw	r3,-12(fp)
81129320:	e0bffe17 	ldw	r2,-8(fp)
81129324:	18bfdf16 	blt	r3,r2,811292a4 <__reset+0xfb1092a4>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
81129328:	0001883a 	nop
8112932c:	e037883a 	mov	sp,fp
81129330:	dfc00117 	ldw	ra,4(sp)
81129334:	df000017 	ldw	fp,0(sp)
81129338:	dec00204 	addi	sp,sp,8
8112933c:	f800283a 	ret

81129340 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
81129340:	defff804 	addi	sp,sp,-32
81129344:	dfc00715 	stw	ra,28(sp)
81129348:	df000615 	stw	fp,24(sp)
8112934c:	df000604 	addi	fp,sp,24
81129350:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
81129354:	e13fff17 	ldw	r4,-4(fp)
81129358:	110bc740 	call	8110bc74 <strlen>
8112935c:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
81129360:	00bfffc4 	movi	r2,-1
81129364:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
81129368:	00bfffc4 	movi	r2,-1
8112936c:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
81129370:	00800044 	movi	r2,1
81129374:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
81129378:	e03ffa15 	stw	zero,-24(fp)
8112937c:	00006d06 	br	81129534 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
81129380:	e0bffa17 	ldw	r2,-24(fp)
81129384:	e0ffff17 	ldw	r3,-4(fp)
81129388:	1885883a 	add	r2,r3,r2
8112938c:	10800003 	ldbu	r2,0(r2)
81129390:	10803fcc 	andi	r2,r2,255
81129394:	1080201c 	xori	r2,r2,128
81129398:	10bfe004 	addi	r2,r2,-128
8112939c:	10800820 	cmpeqi	r2,r2,32
811293a0:	10003e1e 	bne	r2,zero,8112949c <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
811293a4:	e0bffa17 	ldw	r2,-24(fp)
811293a8:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
811293ac:	e0bffb17 	ldw	r2,-20(fp)
811293b0:	1880121e 	bne	r3,r2,811293fc <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
811293b4:	e0bffa17 	ldw	r2,-24(fp)
811293b8:	e0ffff17 	ldw	r3,-4(fp)
811293bc:	1885883a 	add	r2,r3,r2
811293c0:	10800003 	ldbu	r2,0(r2)
811293c4:	10803fcc 	andi	r2,r2,255
811293c8:	1080201c 	xori	r2,r2,128
811293cc:	10bfe004 	addi	r2,r2,-128
811293d0:	10801720 	cmpeqi	r2,r2,92
811293d4:	1000311e 	bne	r2,zero,8112949c <check_file_name_for_FAT16_compliance+0x15c>
811293d8:	e0bffa17 	ldw	r2,-24(fp)
811293dc:	e0ffff17 	ldw	r3,-4(fp)
811293e0:	1885883a 	add	r2,r3,r2
811293e4:	10800003 	ldbu	r2,0(r2)
811293e8:	10803fcc 	andi	r2,r2,255
811293ec:	1080201c 	xori	r2,r2,128
811293f0:	10bfe004 	addi	r2,r2,-128
811293f4:	10800be0 	cmpeqi	r2,r2,47
811293f8:	1000281e 	bne	r2,zero,8112949c <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
811293fc:	e0fffa17 	ldw	r3,-24(fp)
81129400:	e0bffc17 	ldw	r2,-16(fp)
81129404:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81129408:	10800258 	cmpnei	r2,r2,9
8112940c:	1000091e 	bne	r2,zero,81129434 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81129410:	e0bffa17 	ldw	r2,-24(fp)
81129414:	e0ffff17 	ldw	r3,-4(fp)
81129418:	1885883a 	add	r2,r3,r2
8112941c:	10800003 	ldbu	r2,0(r2)
81129420:	10803fcc 	andi	r2,r2,255
81129424:	1080201c 	xori	r2,r2,128
81129428:	10bfe004 	addi	r2,r2,-128
8112942c:	10800b98 	cmpnei	r2,r2,46
81129430:	10001a1e 	bne	r2,zero,8112949c <check_file_name_for_FAT16_compliance+0x15c>
81129434:	e0fffb17 	ldw	r3,-20(fp)
81129438:	e0bffc17 	ldw	r2,-16(fp)
8112943c:	18801926 	beq	r3,r2,811294a4 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81129440:	e0fffa17 	ldw	r3,-24(fp)
81129444:	e0bffc17 	ldw	r2,-16(fp)
81129448:	1885c83a 	sub	r2,r3,r2
8112944c:	10800110 	cmplti	r2,r2,4
81129450:	1000141e 	bne	r2,zero,811294a4 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
81129454:	e0bffa17 	ldw	r2,-24(fp)
81129458:	e0ffff17 	ldw	r3,-4(fp)
8112945c:	1885883a 	add	r2,r3,r2
81129460:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81129464:	10803fcc 	andi	r2,r2,255
81129468:	1080201c 	xori	r2,r2,128
8112946c:	10bfe004 	addi	r2,r2,-128
81129470:	10801720 	cmpeqi	r2,r2,92
81129474:	10000b1e 	bne	r2,zero,811294a4 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
81129478:	e0bffa17 	ldw	r2,-24(fp)
8112947c:	e0ffff17 	ldw	r3,-4(fp)
81129480:	1885883a 	add	r2,r3,r2
81129484:	10800003 	ldbu	r2,0(r2)
81129488:	10803fcc 	andi	r2,r2,255
8112948c:	1080201c 	xori	r2,r2,128
81129490:	10bfe004 	addi	r2,r2,-128
81129494:	10800be0 	cmpeqi	r2,r2,47
81129498:	1000021e 	bne	r2,zero,811294a4 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
8112949c:	e03ffd15 	stw	zero,-12(fp)
            break;
811294a0:	00002706 	br	81129540 <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
811294a4:	e0bffa17 	ldw	r2,-24(fp)
811294a8:	e0ffff17 	ldw	r3,-4(fp)
811294ac:	1885883a 	add	r2,r3,r2
811294b0:	10800003 	ldbu	r2,0(r2)
811294b4:	10803fcc 	andi	r2,r2,255
811294b8:	1080201c 	xori	r2,r2,128
811294bc:	10bfe004 	addi	r2,r2,-128
811294c0:	10801720 	cmpeqi	r2,r2,92
811294c4:	1000091e 	bne	r2,zero,811294ec <check_file_name_for_FAT16_compliance+0x1ac>
811294c8:	e0bffa17 	ldw	r2,-24(fp)
811294cc:	e0ffff17 	ldw	r3,-4(fp)
811294d0:	1885883a 	add	r2,r3,r2
811294d4:	10800003 	ldbu	r2,0(r2)
811294d8:	10803fcc 	andi	r2,r2,255
811294dc:	1080201c 	xori	r2,r2,128
811294e0:	10bfe004 	addi	r2,r2,-128
811294e4:	10800bd8 	cmpnei	r2,r2,47
811294e8:	1000041e 	bne	r2,zero,811294fc <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
811294ec:	e0bffa17 	ldw	r2,-24(fp)
811294f0:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
811294f4:	e0bffa17 	ldw	r2,-24(fp)
811294f8:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
811294fc:	e0bffa17 	ldw	r2,-24(fp)
81129500:	e0ffff17 	ldw	r3,-4(fp)
81129504:	1885883a 	add	r2,r3,r2
81129508:	10800003 	ldbu	r2,0(r2)
8112950c:	10803fcc 	andi	r2,r2,255
81129510:	1080201c 	xori	r2,r2,128
81129514:	10bfe004 	addi	r2,r2,-128
81129518:	10800b98 	cmpnei	r2,r2,46
8112951c:	1000021e 	bne	r2,zero,81129528 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
81129520:	e0bffa17 	ldw	r2,-24(fp)
81129524:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
81129528:	e0bffa17 	ldw	r2,-24(fp)
8112952c:	10800044 	addi	r2,r2,1
81129530:	e0bffa15 	stw	r2,-24(fp)
81129534:	e0fffa17 	ldw	r3,-24(fp)
81129538:	e0bffe17 	ldw	r2,-8(fp)
8112953c:	18bf9016 	blt	r3,r2,81129380 <__reset+0xfb109380>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
81129540:	e0bffe17 	ldw	r2,-8(fp)
81129544:	10bfffc4 	addi	r2,r2,-1
81129548:	e0ffff17 	ldw	r3,-4(fp)
8112954c:	1885883a 	add	r2,r3,r2
81129550:	10800003 	ldbu	r2,0(r2)
81129554:	10803fcc 	andi	r2,r2,255
81129558:	1080201c 	xori	r2,r2,128
8112955c:	10bfe004 	addi	r2,r2,-128
81129560:	10801720 	cmpeqi	r2,r2,92
81129564:	10000a1e 	bne	r2,zero,81129590 <check_file_name_for_FAT16_compliance+0x250>
81129568:	e0bffe17 	ldw	r2,-8(fp)
8112956c:	10bfffc4 	addi	r2,r2,-1
81129570:	e0ffff17 	ldw	r3,-4(fp)
81129574:	1885883a 	add	r2,r3,r2
81129578:	10800003 	ldbu	r2,0(r2)
8112957c:	10803fcc 	andi	r2,r2,255
81129580:	1080201c 	xori	r2,r2,128
81129584:	10bfe004 	addi	r2,r2,-128
81129588:	10800bd8 	cmpnei	r2,r2,47
8112958c:	1000011e 	bne	r2,zero,81129594 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
81129590:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
81129594:	e0bffd17 	ldw	r2,-12(fp)
}
81129598:	e037883a 	mov	sp,fp
8112959c:	dfc00117 	ldw	ra,4(sp)
811295a0:	df000017 	ldw	fp,0(sp)
811295a4:	dec00204 	addi	sp,sp,8
811295a8:	f800283a 	ret

811295ac <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
811295ac:	defffb04 	addi	sp,sp,-20
811295b0:	dfc00415 	stw	ra,16(sp)
811295b4:	df000315 	stw	fp,12(sp)
811295b8:	df000304 	addi	fp,sp,12
811295bc:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
811295c0:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
811295c4:	e13fff17 	ldw	r4,-4(fp)
811295c8:	110bc740 	call	8110bc74 <strlen>
811295cc:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
811295d0:	e03ffd15 	stw	zero,-12(fp)
811295d4:	00001506 	br	8112962c <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
811295d8:	e0bffd17 	ldw	r2,-12(fp)
811295dc:	e0ffff17 	ldw	r3,-4(fp)
811295e0:	1885883a 	add	r2,r3,r2
811295e4:	10800003 	ldbu	r2,0(r2)
811295e8:	10803fcc 	andi	r2,r2,255
811295ec:	1080201c 	xori	r2,r2,128
811295f0:	10bfe004 	addi	r2,r2,-128
811295f4:	10801720 	cmpeqi	r2,r2,92
811295f8:	10000f1e 	bne	r2,zero,81129638 <get_dir_divider_location+0x8c>
811295fc:	e0bffd17 	ldw	r2,-12(fp)
81129600:	e0ffff17 	ldw	r3,-4(fp)
81129604:	1885883a 	add	r2,r3,r2
81129608:	10800003 	ldbu	r2,0(r2)
8112960c:	10803fcc 	andi	r2,r2,255
81129610:	1080201c 	xori	r2,r2,128
81129614:	10bfe004 	addi	r2,r2,-128
81129618:	10800be0 	cmpeqi	r2,r2,47
8112961c:	1000061e 	bne	r2,zero,81129638 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
81129620:	e0bffd17 	ldw	r2,-12(fp)
81129624:	10800044 	addi	r2,r2,1
81129628:	e0bffd15 	stw	r2,-12(fp)
8112962c:	e0fffd17 	ldw	r3,-12(fp)
81129630:	e0bffe17 	ldw	r2,-8(fp)
81129634:	18bfe816 	blt	r3,r2,811295d8 <__reset+0xfb1095d8>
        {
            break;
        }
    }
    
    if (index == length)
81129638:	e0fffd17 	ldw	r3,-12(fp)
8112963c:	e0bffe17 	ldw	r2,-8(fp)
81129640:	1880021e 	bne	r3,r2,8112964c <get_dir_divider_location+0xa0>
    {
        index = -1;
81129644:	00bfffc4 	movi	r2,-1
81129648:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
8112964c:	e0bffd17 	ldw	r2,-12(fp)
}
81129650:	e037883a 	mov	sp,fp
81129654:	dfc00117 	ldw	ra,4(sp)
81129658:	df000017 	ldw	fp,0(sp)
8112965c:	dec00204 	addi	sp,sp,8
81129660:	f800283a 	ret

81129664 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
81129664:	defffa04 	addi	sp,sp,-24
81129668:	df000515 	stw	fp,20(sp)
8112966c:	df000504 	addi	fp,sp,20
81129670:	e13ffd15 	stw	r4,-12(fp)
81129674:	e17ffe15 	stw	r5,-8(fp)
81129678:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
8112967c:	00800044 	movi	r2,1
81129680:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
81129684:	e03ffc15 	stw	zero,-16(fp)
81129688:	00004606 	br	811297a4 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
8112968c:	e0fffd17 	ldw	r3,-12(fp)
81129690:	e0bffc17 	ldw	r2,-16(fp)
81129694:	1885883a 	add	r2,r3,r2
81129698:	10800003 	ldbu	r2,0(r2)
8112969c:	10803fcc 	andi	r2,r2,255
811296a0:	10801870 	cmpltui	r2,r2,97
811296a4:	1000101e 	bne	r2,zero,811296e8 <match_file_record_to_name_ext+0x84>
811296a8:	e0fffd17 	ldw	r3,-12(fp)
811296ac:	e0bffc17 	ldw	r2,-16(fp)
811296b0:	1885883a 	add	r2,r3,r2
811296b4:	10800003 	ldbu	r2,0(r2)
811296b8:	10803fcc 	andi	r2,r2,255
811296bc:	10801ee8 	cmpgeui	r2,r2,123
811296c0:	1000091e 	bne	r2,zero,811296e8 <match_file_record_to_name_ext+0x84>
811296c4:	e0fffd17 	ldw	r3,-12(fp)
811296c8:	e0bffc17 	ldw	r2,-16(fp)
811296cc:	1885883a 	add	r2,r3,r2
811296d0:	10800003 	ldbu	r2,0(r2)
811296d4:	10bff804 	addi	r2,r2,-32
811296d8:	10c03fcc 	andi	r3,r2,255
811296dc:	18c0201c 	xori	r3,r3,128
811296e0:	18ffe004 	addi	r3,r3,-128
811296e4:	00000706 	br	81129704 <match_file_record_to_name_ext+0xa0>
811296e8:	e0fffd17 	ldw	r3,-12(fp)
811296ec:	e0bffc17 	ldw	r2,-16(fp)
811296f0:	1885883a 	add	r2,r3,r2
811296f4:	10800003 	ldbu	r2,0(r2)
811296f8:	10c03fcc 	andi	r3,r2,255
811296fc:	18c0201c 	xori	r3,r3,128
81129700:	18ffe004 	addi	r3,r3,-128
81129704:	e0bffc17 	ldw	r2,-16(fp)
81129708:	e13ffe17 	ldw	r4,-8(fp)
8112970c:	2085883a 	add	r2,r4,r2
81129710:	10800003 	ldbu	r2,0(r2)
81129714:	10803fcc 	andi	r2,r2,255
81129718:	1080201c 	xori	r2,r2,128
8112971c:	10bfe004 	addi	r2,r2,-128
81129720:	10801850 	cmplti	r2,r2,97
81129724:	1000121e 	bne	r2,zero,81129770 <match_file_record_to_name_ext+0x10c>
81129728:	e0bffc17 	ldw	r2,-16(fp)
8112972c:	e13ffe17 	ldw	r4,-8(fp)
81129730:	2085883a 	add	r2,r4,r2
81129734:	10800003 	ldbu	r2,0(r2)
81129738:	10803fcc 	andi	r2,r2,255
8112973c:	1080201c 	xori	r2,r2,128
81129740:	10bfe004 	addi	r2,r2,-128
81129744:	10801ec8 	cmpgei	r2,r2,123
81129748:	1000091e 	bne	r2,zero,81129770 <match_file_record_to_name_ext+0x10c>
8112974c:	e0bffc17 	ldw	r2,-16(fp)
81129750:	e13ffe17 	ldw	r4,-8(fp)
81129754:	2085883a 	add	r2,r4,r2
81129758:	10800003 	ldbu	r2,0(r2)
8112975c:	10bff804 	addi	r2,r2,-32
81129760:	10803fcc 	andi	r2,r2,255
81129764:	1080201c 	xori	r2,r2,128
81129768:	10bfe004 	addi	r2,r2,-128
8112976c:	00000706 	br	8112978c <match_file_record_to_name_ext+0x128>
81129770:	e0bffc17 	ldw	r2,-16(fp)
81129774:	e13ffe17 	ldw	r4,-8(fp)
81129778:	2085883a 	add	r2,r4,r2
8112977c:	10800003 	ldbu	r2,0(r2)
81129780:	10803fcc 	andi	r2,r2,255
81129784:	1080201c 	xori	r2,r2,128
81129788:	10bfe004 	addi	r2,r2,-128
8112978c:	18800226 	beq	r3,r2,81129798 <match_file_record_to_name_ext+0x134>
        {
            match = false;
81129790:	e03ffb15 	stw	zero,-20(fp)
			break;
81129794:	00000606 	br	811297b0 <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
81129798:	e0bffc17 	ldw	r2,-16(fp)
8112979c:	10800044 	addi	r2,r2,1
811297a0:	e0bffc15 	stw	r2,-16(fp)
811297a4:	e0bffc17 	ldw	r2,-16(fp)
811297a8:	10800210 	cmplti	r2,r2,8
811297ac:	103fb71e 	bne	r2,zero,8112968c <__reset+0xfb10968c>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
811297b0:	e03ffc15 	stw	zero,-16(fp)
811297b4:	00004a06 	br	811298e0 <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
811297b8:	e0fffd17 	ldw	r3,-12(fp)
811297bc:	e0bffc17 	ldw	r2,-16(fp)
811297c0:	1885883a 	add	r2,r3,r2
811297c4:	10800204 	addi	r2,r2,8
811297c8:	10800003 	ldbu	r2,0(r2)
811297cc:	10803fcc 	andi	r2,r2,255
811297d0:	10801870 	cmpltui	r2,r2,97
811297d4:	1000121e 	bne	r2,zero,81129820 <match_file_record_to_name_ext+0x1bc>
811297d8:	e0fffd17 	ldw	r3,-12(fp)
811297dc:	e0bffc17 	ldw	r2,-16(fp)
811297e0:	1885883a 	add	r2,r3,r2
811297e4:	10800204 	addi	r2,r2,8
811297e8:	10800003 	ldbu	r2,0(r2)
811297ec:	10803fcc 	andi	r2,r2,255
811297f0:	10801ee8 	cmpgeui	r2,r2,123
811297f4:	10000a1e 	bne	r2,zero,81129820 <match_file_record_to_name_ext+0x1bc>
811297f8:	e0fffd17 	ldw	r3,-12(fp)
811297fc:	e0bffc17 	ldw	r2,-16(fp)
81129800:	1885883a 	add	r2,r3,r2
81129804:	10800204 	addi	r2,r2,8
81129808:	10800003 	ldbu	r2,0(r2)
8112980c:	10bff804 	addi	r2,r2,-32
81129810:	10c03fcc 	andi	r3,r2,255
81129814:	18c0201c 	xori	r3,r3,128
81129818:	18ffe004 	addi	r3,r3,-128
8112981c:	00000806 	br	81129840 <match_file_record_to_name_ext+0x1dc>
81129820:	e0fffd17 	ldw	r3,-12(fp)
81129824:	e0bffc17 	ldw	r2,-16(fp)
81129828:	1885883a 	add	r2,r3,r2
8112982c:	10800204 	addi	r2,r2,8
81129830:	10800003 	ldbu	r2,0(r2)
81129834:	10c03fcc 	andi	r3,r2,255
81129838:	18c0201c 	xori	r3,r3,128
8112983c:	18ffe004 	addi	r3,r3,-128
81129840:	e0bffc17 	ldw	r2,-16(fp)
81129844:	e13fff17 	ldw	r4,-4(fp)
81129848:	2085883a 	add	r2,r4,r2
8112984c:	10800003 	ldbu	r2,0(r2)
81129850:	10803fcc 	andi	r2,r2,255
81129854:	1080201c 	xori	r2,r2,128
81129858:	10bfe004 	addi	r2,r2,-128
8112985c:	10801850 	cmplti	r2,r2,97
81129860:	1000121e 	bne	r2,zero,811298ac <match_file_record_to_name_ext+0x248>
81129864:	e0bffc17 	ldw	r2,-16(fp)
81129868:	e13fff17 	ldw	r4,-4(fp)
8112986c:	2085883a 	add	r2,r4,r2
81129870:	10800003 	ldbu	r2,0(r2)
81129874:	10803fcc 	andi	r2,r2,255
81129878:	1080201c 	xori	r2,r2,128
8112987c:	10bfe004 	addi	r2,r2,-128
81129880:	10801ec8 	cmpgei	r2,r2,123
81129884:	1000091e 	bne	r2,zero,811298ac <match_file_record_to_name_ext+0x248>
81129888:	e0bffc17 	ldw	r2,-16(fp)
8112988c:	e13fff17 	ldw	r4,-4(fp)
81129890:	2085883a 	add	r2,r4,r2
81129894:	10800003 	ldbu	r2,0(r2)
81129898:	10bff804 	addi	r2,r2,-32
8112989c:	10803fcc 	andi	r2,r2,255
811298a0:	1080201c 	xori	r2,r2,128
811298a4:	10bfe004 	addi	r2,r2,-128
811298a8:	00000706 	br	811298c8 <match_file_record_to_name_ext+0x264>
811298ac:	e0bffc17 	ldw	r2,-16(fp)
811298b0:	e13fff17 	ldw	r4,-4(fp)
811298b4:	2085883a 	add	r2,r4,r2
811298b8:	10800003 	ldbu	r2,0(r2)
811298bc:	10803fcc 	andi	r2,r2,255
811298c0:	1080201c 	xori	r2,r2,128
811298c4:	10bfe004 	addi	r2,r2,-128
811298c8:	18800226 	beq	r3,r2,811298d4 <match_file_record_to_name_ext+0x270>
        {
            match = false;
811298cc:	e03ffb15 	stw	zero,-20(fp)
			break;
811298d0:	00000606 	br	811298ec <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
811298d4:	e0bffc17 	ldw	r2,-16(fp)
811298d8:	10800044 	addi	r2,r2,1
811298dc:	e0bffc15 	stw	r2,-16(fp)
811298e0:	e0bffc17 	ldw	r2,-16(fp)
811298e4:	108000d0 	cmplti	r2,r2,3
811298e8:	103fb31e 	bne	r2,zero,811297b8 <__reset+0xfb1097b8>
        {
            match = false;
			break;
        }
    }
	return match;
811298ec:	e0bffb17 	ldw	r2,-20(fp)
}
811298f0:	e037883a 	mov	sp,fp
811298f4:	df000017 	ldw	fp,0(sp)
811298f8:	dec00104 	addi	sp,sp,4
811298fc:	f800283a 	ret

81129900 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
81129900:	deffe704 	addi	sp,sp,-100
81129904:	dfc01815 	stw	ra,96(sp)
81129908:	df001715 	stw	fp,92(sp)
8112990c:	df001704 	addi	fp,sp,92
81129910:	e13ffd15 	stw	r4,-12(fp)
81129914:	e17ffe15 	stw	r5,-8(fp)
81129918:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
8112991c:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
81129920:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
81129924:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
81129928:	e13ffd17 	ldw	r4,-12(fp)
8112992c:	11295ac0 	call	811295ac <get_dir_divider_location>
81129930:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
81129934:	00012f06 	br	81129df4 <get_home_directory_cluster_for_file+0x4f4>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81129938:	00800804 	movi	r2,32
8112993c:	e0bff905 	stb	r2,-28(fp)
81129940:	00800804 	movi	r2,32
81129944:	e0bff945 	stb	r2,-27(fp)
81129948:	00800804 	movi	r2,32
8112994c:	e0bff985 	stb	r2,-26(fp)
81129950:	00800804 	movi	r2,32
81129954:	e0bff9c5 	stb	r2,-25(fp)
81129958:	00800804 	movi	r2,32
8112995c:	e0bffa05 	stb	r2,-24(fp)
81129960:	00800804 	movi	r2,32
81129964:	e0bffa45 	stb	r2,-23(fp)
81129968:	00800804 	movi	r2,32
8112996c:	e0bffa85 	stb	r2,-22(fp)
81129970:	00800804 	movi	r2,32
81129974:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
81129978:	00800804 	movi	r2,32
8112997c:	e0bffb05 	stb	r2,-20(fp)
81129980:	00800804 	movi	r2,32
81129984:	e0bffb45 	stb	r2,-19(fp)
81129988:	00800804 	movi	r2,32
8112998c:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
81129990:	00bfffc4 	movi	r2,-1
81129994:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
81129998:	e0bfea17 	ldw	r2,-88(fp)
8112999c:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
811299a0:	e03fec15 	stw	zero,-80(fp)
811299a4:	00002d06 	br	81129a5c <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
811299a8:	e0ffec17 	ldw	r3,-80(fp)
811299ac:	e0bfed17 	ldw	r2,-76(fp)
811299b0:	1885883a 	add	r2,r3,r2
811299b4:	1007883a 	mov	r3,r2
811299b8:	e0bffd17 	ldw	r2,-12(fp)
811299bc:	10c5883a 	add	r2,r2,r3
811299c0:	10800003 	ldbu	r2,0(r2)
811299c4:	10803fcc 	andi	r2,r2,255
811299c8:	1080201c 	xori	r2,r2,128
811299cc:	10bfe004 	addi	r2,r2,-128
811299d0:	10800b98 	cmpnei	r2,r2,46
811299d4:	1000031e 	bne	r2,zero,811299e4 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
811299d8:	e0bfec17 	ldw	r2,-80(fp)
811299dc:	e0bfee15 	stw	r2,-72(fp)
811299e0:	00001b06 	br	81129a50 <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
811299e4:	e0bfee17 	ldw	r2,-72(fp)
811299e8:	10000c0e 	bge	r2,zero,81129a1c <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
811299ec:	e0ffec17 	ldw	r3,-80(fp)
811299f0:	e0bfed17 	ldw	r2,-76(fp)
811299f4:	1885883a 	add	r2,r3,r2
811299f8:	1007883a 	mov	r3,r2
811299fc:	e0bffd17 	ldw	r2,-12(fp)
81129a00:	10c5883a 	add	r2,r2,r3
81129a04:	10c00003 	ldbu	r3,0(r2)
81129a08:	e13ff904 	addi	r4,fp,-28
81129a0c:	e0bfec17 	ldw	r2,-80(fp)
81129a10:	2085883a 	add	r2,r4,r2
81129a14:	10c00005 	stb	r3,0(r2)
81129a18:	00000d06 	br	81129a50 <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
81129a1c:	e0ffec17 	ldw	r3,-80(fp)
81129a20:	e0bfee17 	ldw	r2,-72(fp)
81129a24:	1885c83a 	sub	r2,r3,r2
81129a28:	e13fec17 	ldw	r4,-80(fp)
81129a2c:	e0ffed17 	ldw	r3,-76(fp)
81129a30:	20c7883a 	add	r3,r4,r3
81129a34:	1809883a 	mov	r4,r3
81129a38:	e0fffd17 	ldw	r3,-12(fp)
81129a3c:	1907883a 	add	r3,r3,r4
81129a40:	18c00003 	ldbu	r3,0(r3)
81129a44:	e13ffb04 	addi	r4,fp,-20
81129a48:	2085883a 	add	r2,r4,r2
81129a4c:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81129a50:	e0bfec17 	ldw	r2,-80(fp)
81129a54:	10800044 	addi	r2,r2,1
81129a58:	e0bfec15 	stw	r2,-80(fp)
81129a5c:	e0ffec17 	ldw	r3,-80(fp)
81129a60:	e0bfeb17 	ldw	r2,-84(fp)
81129a64:	18bfd016 	blt	r3,r2,811299a8 <__reset+0xfb1099a8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
81129a68:	e0bfea17 	ldw	r2,-88(fp)
81129a6c:	10005c1e 	bne	r2,zero,81129be0 <get_home_directory_cluster_for_file+0x2e0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81129a70:	00a04574 	movhi	r2,33045
81129a74:	10972604 	addi	r2,r2,23704
81129a78:	1080050b 	ldhu	r2,20(r2)
81129a7c:	10bfffcc 	andi	r2,r2,65535
81129a80:	1006917a 	slli	r3,r2,5
81129a84:	00a04574 	movhi	r2,33045
81129a88:	10972604 	addi	r2,r2,23704
81129a8c:	1080030b 	ldhu	r2,12(r2)
81129a90:	10bfffcc 	andi	r2,r2,65535
81129a94:	1885283a 	div	r2,r3,r2
81129a98:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81129a9c:	e03ff015 	stw	zero,-64(fp)
81129aa0:	00003b06 	br	81129b90 <get_home_directory_cluster_for_file+0x290>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
81129aa4:	00a04574 	movhi	r2,33045
81129aa8:	10972604 	addi	r2,r2,23704
81129aac:	10c01317 	ldw	r3,76(r2)
81129ab0:	e0bff017 	ldw	r2,-64(fp)
81129ab4:	1885883a 	add	r2,r3,r2
81129ab8:	1007883a 	mov	r3,r2
81129abc:	d0a08617 	ldw	r2,-32232(gp)
81129ac0:	100b883a 	mov	r5,r2
81129ac4:	1809883a 	mov	r4,r3
81129ac8:	11281f80 	call	811281f8 <Read_Sector_Data>
81129acc:	10003426 	beq	r2,zero,81129ba0 <get_home_directory_cluster_for_file+0x2a0>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81129ad0:	e03ff115 	stw	zero,-60(fp)
81129ad4:	00002506 	br	81129b6c <get_home_directory_cluster_for_file+0x26c>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
81129ad8:	e0bff117 	ldw	r2,-60(fp)
81129adc:	1004917a 	slli	r2,r2,5
81129ae0:	e0fff017 	ldw	r3,-64(fp)
81129ae4:	180f883a 	mov	r7,r3
81129ae8:	000d883a 	mov	r6,zero
81129aec:	e17fff17 	ldw	r5,-4(fp)
81129af0:	1009883a 	mov	r4,r2
81129af4:	11286080 	call	81128608 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81129af8:	e0bfff17 	ldw	r2,-4(fp)
81129afc:	10800003 	ldbu	r2,0(r2)
81129b00:	10803fcc 	andi	r2,r2,255
81129b04:	10803960 	cmpeqi	r2,r2,229
81129b08:	1000151e 	bne	r2,zero,81129b60 <get_home_directory_cluster_for_file+0x260>
81129b0c:	e0bfff17 	ldw	r2,-4(fp)
81129b10:	10800003 	ldbu	r2,0(r2)
81129b14:	10803fcc 	andi	r2,r2,255
81129b18:	10001126 	beq	r2,zero,81129b60 <get_home_directory_cluster_for_file+0x260>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81129b1c:	e0fffb04 	addi	r3,fp,-20
81129b20:	e0bff904 	addi	r2,fp,-28
81129b24:	180d883a 	mov	r6,r3
81129b28:	100b883a 	mov	r5,r2
81129b2c:	e13fff17 	ldw	r4,-4(fp)
81129b30:	11296640 	call	81129664 <match_file_record_to_name_ext>
81129b34:	e0bff815 	stw	r2,-32(fp)
                            if (match)
81129b38:	e0bff817 	ldw	r2,-32(fp)
81129b3c:	10000826 	beq	r2,zero,81129b60 <get_home_directory_cluster_for_file+0x260>
                            {
                                new_cluster = file_record->start_cluster_index;
81129b40:	e0bfff17 	ldw	r2,-4(fp)
81129b44:	1080058b 	ldhu	r2,22(r2)
81129b48:	10bfffcc 	andi	r2,r2,65535
81129b4c:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
81129b50:	e0bfff17 	ldw	r2,-4(fp)
81129b54:	00c00044 	movi	r3,1
81129b58:	10c00a15 	stw	r3,40(r2)
                                break;
81129b5c:	00000606 	br	81129b78 <get_home_directory_cluster_for_file+0x278>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81129b60:	e0bff117 	ldw	r2,-60(fp)
81129b64:	10800044 	addi	r2,r2,1
81129b68:	e0bff115 	stw	r2,-60(fp)
81129b6c:	e0bff117 	ldw	r2,-60(fp)
81129b70:	10800410 	cmplti	r2,r2,16
81129b74:	103fd81e 	bne	r2,zero,81129ad8 <__reset+0xfb109ad8>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
81129b78:	e0ffef17 	ldw	r3,-68(fp)
81129b7c:	e0bfea17 	ldw	r2,-88(fp)
81129b80:	1880091e 	bne	r3,r2,81129ba8 <get_home_directory_cluster_for_file+0x2a8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81129b84:	e0bff017 	ldw	r2,-64(fp)
81129b88:	10800044 	addi	r2,r2,1
81129b8c:	e0bff015 	stw	r2,-64(fp)
81129b90:	e0fff017 	ldw	r3,-64(fp)
81129b94:	e0bff717 	ldw	r2,-36(fp)
81129b98:	18bfc216 	blt	r3,r2,81129aa4 <__reset+0xfb109aa4>
81129b9c:	00000306 	br	81129bac <get_home_directory_cluster_for_file+0x2ac>
                        }
                    }
                }
                else
                {
                    break;
81129ba0:	0001883a 	nop
81129ba4:	00000106 	br	81129bac <get_home_directory_cluster_for_file+0x2ac>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
81129ba8:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
81129bac:	e0ffef17 	ldw	r3,-68(fp)
81129bb0:	e0bfea17 	ldw	r2,-88(fp)
81129bb4:	18800826 	beq	r3,r2,81129bd8 <get_home_directory_cluster_for_file+0x2d8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81129bb8:	e0bfef17 	ldw	r2,-68(fp)
81129bbc:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81129bc0:	e0ffed17 	ldw	r3,-76(fp)
81129bc4:	e0bfeb17 	ldw	r2,-84(fp)
81129bc8:	1885883a 	add	r2,r3,r2
81129bcc:	10800044 	addi	r2,r2,1
81129bd0:	e0bfed15 	stw	r2,-76(fp)
81129bd4:	00007d06 	br	81129dcc <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81129bd8:	0005883a 	mov	r2,zero
81129bdc:	00009106 	br	81129e24 <get_home_directory_cluster_for_file+0x524>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
81129be0:	e0bfea17 	ldw	r2,-88(fp)
81129be4:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81129be8:	e0bff417 	ldw	r2,-48(fp)
81129bec:	10ffff84 	addi	r3,r2,-2
81129bf0:	00a04574 	movhi	r2,33045
81129bf4:	10972604 	addi	r2,r2,23704
81129bf8:	10800383 	ldbu	r2,14(r2)
81129bfc:	10803fcc 	andi	r2,r2,255
81129c00:	1885383a 	mul	r2,r3,r2
81129c04:	1007883a 	mov	r3,r2
81129c08:	00a04574 	movhi	r2,33045
81129c0c:	10972604 	addi	r2,r2,23704
81129c10:	10801417 	ldw	r2,80(r2)
81129c14:	1885883a 	add	r2,r3,r2
81129c18:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81129c1c:	e03ff215 	stw	zero,-56(fp)
81129c20:	00003606 	br	81129cfc <get_home_directory_cluster_for_file+0x3fc>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81129c24:	e0fff217 	ldw	r3,-56(fp)
81129c28:	e0bff517 	ldw	r2,-44(fp)
81129c2c:	1885883a 	add	r2,r3,r2
81129c30:	d0e08617 	ldw	r3,-32232(gp)
81129c34:	180b883a 	mov	r5,r3
81129c38:	1009883a 	mov	r4,r2
81129c3c:	11281f80 	call	811281f8 <Read_Sector_Data>
81129c40:	10003526 	beq	r2,zero,81129d18 <get_home_directory_cluster_for_file+0x418>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81129c44:	e03ff315 	stw	zero,-52(fp)
81129c48:	00002306 	br	81129cd8 <get_home_directory_cluster_for_file+0x3d8>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
81129c4c:	e0bff317 	ldw	r2,-52(fp)
81129c50:	1004917a 	slli	r2,r2,5
81129c54:	e0fff417 	ldw	r3,-48(fp)
81129c58:	e13ff217 	ldw	r4,-56(fp)
81129c5c:	200f883a 	mov	r7,r4
81129c60:	180d883a 	mov	r6,r3
81129c64:	e17fff17 	ldw	r5,-4(fp)
81129c68:	1009883a 	mov	r4,r2
81129c6c:	11286080 	call	81128608 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81129c70:	e0bfff17 	ldw	r2,-4(fp)
81129c74:	10800003 	ldbu	r2,0(r2)
81129c78:	10803fcc 	andi	r2,r2,255
81129c7c:	10803960 	cmpeqi	r2,r2,229
81129c80:	1000121e 	bne	r2,zero,81129ccc <get_home_directory_cluster_for_file+0x3cc>
81129c84:	e0bfff17 	ldw	r2,-4(fp)
81129c88:	10800003 	ldbu	r2,0(r2)
81129c8c:	10803fcc 	andi	r2,r2,255
81129c90:	10000e26 	beq	r2,zero,81129ccc <get_home_directory_cluster_for_file+0x3cc>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
81129c94:	e0fffb04 	addi	r3,fp,-20
81129c98:	e0bff904 	addi	r2,fp,-28
81129c9c:	180d883a 	mov	r6,r3
81129ca0:	100b883a 	mov	r5,r2
81129ca4:	e13fff17 	ldw	r4,-4(fp)
81129ca8:	11296640 	call	81129664 <match_file_record_to_name_ext>
81129cac:	e0bff615 	stw	r2,-40(fp)
                                if (match)
81129cb0:	e0bff617 	ldw	r2,-40(fp)
81129cb4:	10000526 	beq	r2,zero,81129ccc <get_home_directory_cluster_for_file+0x3cc>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
81129cb8:	e0bfff17 	ldw	r2,-4(fp)
81129cbc:	1080058b 	ldhu	r2,22(r2)
81129cc0:	10bfffcc 	andi	r2,r2,65535
81129cc4:	e0bfef15 	stw	r2,-68(fp)
                                    break;
81129cc8:	00000606 	br	81129ce4 <get_home_directory_cluster_for_file+0x3e4>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81129ccc:	e0bff317 	ldw	r2,-52(fp)
81129cd0:	10800044 	addi	r2,r2,1
81129cd4:	e0bff315 	stw	r2,-52(fp)
81129cd8:	e0bff317 	ldw	r2,-52(fp)
81129cdc:	10800410 	cmplti	r2,r2,16
81129ce0:	103fda1e 	bne	r2,zero,81129c4c <__reset+0xfb109c4c>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
81129ce4:	e0ffef17 	ldw	r3,-68(fp)
81129ce8:	e0bfea17 	ldw	r2,-88(fp)
81129cec:	18800c1e 	bne	r3,r2,81129d20 <get_home_directory_cluster_for_file+0x420>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81129cf0:	e0bff217 	ldw	r2,-56(fp)
81129cf4:	10800044 	addi	r2,r2,1
81129cf8:	e0bff215 	stw	r2,-56(fp)
81129cfc:	00a04574 	movhi	r2,33045
81129d00:	10972604 	addi	r2,r2,23704
81129d04:	10800383 	ldbu	r2,14(r2)
81129d08:	10803fcc 	andi	r2,r2,255
81129d0c:	e0fff217 	ldw	r3,-56(fp)
81129d10:	18bfc416 	blt	r3,r2,81129c24 <__reset+0xfb109c24>
81129d14:	00000306 	br	81129d24 <get_home_directory_cluster_for_file+0x424>
                            }
                        }
                    }
                    else
                    {
                        break;
81129d18:	0001883a 	nop
81129d1c:	00000106 	br	81129d24 <get_home_directory_cluster_for_file+0x424>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
81129d20:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
81129d24:	e0ffef17 	ldw	r3,-68(fp)
81129d28:	e0bfea17 	ldw	r2,-88(fp)
81129d2c:	1880141e 	bne	r3,r2,81129d80 <get_home_directory_cluster_for_file+0x480>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
81129d30:	e0bfef17 	ldw	r2,-68(fp)
81129d34:	e0fffc04 	addi	r3,fp,-16
81129d38:	180b883a 	mov	r5,r3
81129d3c:	1009883a 	mov	r4,r2
81129d40:	11282d00 	call	811282d0 <get_cluster_flag>
81129d44:	10000c26 	beq	r2,zero,81129d78 <get_home_directory_cluster_for_file+0x478>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81129d48:	e0bffc0b 	ldhu	r2,-16(fp)
81129d4c:	10bfffcc 	andi	r2,r2,65535
81129d50:	10fffe0c 	andi	r3,r2,65528
81129d54:	00bffe14 	movui	r2,65528
81129d58:	1880021e 	bne	r3,r2,81129d64 <get_home_directory_cluster_for_file+0x464>
						{
							return false;
81129d5c:	0005883a 	mov	r2,zero
81129d60:	00003006 	br	81129e24 <get_home_directory_cluster_for_file+0x524>
						}
						new_cluster = (next_cluster & 0x0000fff8);
81129d64:	e0bffc0b 	ldhu	r2,-16(fp)
81129d68:	10bfffcc 	andi	r2,r2,65535
81129d6c:	10bffe0c 	andi	r2,r2,65528
81129d70:	e0bfef15 	stw	r2,-68(fp)
81129d74:	00000206 	br	81129d80 <get_home_directory_cluster_for_file+0x480>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
81129d78:	0005883a 	mov	r2,zero
81129d7c:	00002906 	br	81129e24 <get_home_directory_cluster_for_file+0x524>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
81129d80:	e0bff417 	ldw	r2,-48(fp)
81129d84:	00fffdd4 	movui	r3,65527
81129d88:	18800316 	blt	r3,r2,81129d98 <get_home_directory_cluster_for_file+0x498>
81129d8c:	e0ffef17 	ldw	r3,-68(fp)
81129d90:	e0bfea17 	ldw	r2,-88(fp)
81129d94:	18bf9426 	beq	r3,r2,81129be8 <__reset+0xfb109be8>
            if (new_cluster != home_dir_cluster)
81129d98:	e0ffef17 	ldw	r3,-68(fp)
81129d9c:	e0bfea17 	ldw	r2,-88(fp)
81129da0:	18800826 	beq	r3,r2,81129dc4 <get_home_directory_cluster_for_file+0x4c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81129da4:	e0bfef17 	ldw	r2,-68(fp)
81129da8:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81129dac:	e0ffed17 	ldw	r3,-76(fp)
81129db0:	e0bfeb17 	ldw	r2,-84(fp)
81129db4:	1885883a 	add	r2,r3,r2
81129db8:	10800044 	addi	r2,r2,1
81129dbc:	e0bfed15 	stw	r2,-76(fp)
81129dc0:	00000206 	br	81129dcc <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81129dc4:	0005883a 	mov	r2,zero
81129dc8:	00001606 	br	81129e24 <get_home_directory_cluster_for_file+0x524>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
81129dcc:	e0bfed17 	ldw	r2,-76(fp)
81129dd0:	e0fffd17 	ldw	r3,-12(fp)
81129dd4:	1885883a 	add	r2,r3,r2
81129dd8:	1009883a 	mov	r4,r2
81129ddc:	11295ac0 	call	811295ac <get_dir_divider_location>
81129de0:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
81129de4:	e0bfeb17 	ldw	r2,-84(fp)
81129de8:	1000020e 	bge	r2,zero,81129df4 <get_home_directory_cluster_for_file+0x4f4>
        {
            // Directory has been located.
            result = true;
81129dec:	00800044 	movi	r2,1
81129df0:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
81129df4:	e0bfeb17 	ldw	r2,-84(fp)
81129df8:	00becf16 	blt	zero,r2,81129938 <__reset+0xfb109938>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
81129dfc:	e0bffe17 	ldw	r2,-8(fp)
81129e00:	e0ffea17 	ldw	r3,-88(fp)
81129e04:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
81129e08:	e0bfea17 	ldw	r2,-88(fp)
81129e0c:	1000041e 	bne	r2,zero,81129e20 <get_home_directory_cluster_for_file+0x520>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
81129e10:	e0bfff17 	ldw	r2,-4(fp)
81129e14:	10000a15 	stw	zero,40(r2)
		result = true;
81129e18:	00800044 	movi	r2,1
81129e1c:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
81129e20:	e0bfe917 	ldw	r2,-92(fp)
}
81129e24:	e037883a 	mov	sp,fp
81129e28:	dfc00117 	ldw	ra,4(sp)
81129e2c:	df000017 	ldw	fp,0(sp)
81129e30:	dec00204 	addi	sp,sp,8
81129e34:	f800283a 	ret

81129e38 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
81129e38:	deffe804 	addi	sp,sp,-96
81129e3c:	dfc01715 	stw	ra,92(sp)
81129e40:	df001615 	stw	fp,88(sp)
81129e44:	df001604 	addi	fp,sp,88
81129e48:	e13ffd15 	stw	r4,-12(fp)
81129e4c:	e17ffe15 	stw	r5,-8(fp)
81129e50:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
81129e54:	e13ffe17 	ldw	r4,-8(fp)
81129e58:	11295ac0 	call	811295ac <get_dir_divider_location>
81129e5c:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
81129e60:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81129e64:	00800804 	movi	r2,32
81129e68:	e0bff905 	stb	r2,-28(fp)
81129e6c:	00800804 	movi	r2,32
81129e70:	e0bff945 	stb	r2,-27(fp)
81129e74:	00800804 	movi	r2,32
81129e78:	e0bff985 	stb	r2,-26(fp)
81129e7c:	00800804 	movi	r2,32
81129e80:	e0bff9c5 	stb	r2,-25(fp)
81129e84:	00800804 	movi	r2,32
81129e88:	e0bffa05 	stb	r2,-24(fp)
81129e8c:	00800804 	movi	r2,32
81129e90:	e0bffa45 	stb	r2,-23(fp)
81129e94:	00800804 	movi	r2,32
81129e98:	e0bffa85 	stb	r2,-22(fp)
81129e9c:	00800804 	movi	r2,32
81129ea0:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
81129ea4:	00800804 	movi	r2,32
81129ea8:	e0bffb05 	stb	r2,-20(fp)
81129eac:	00800804 	movi	r2,32
81129eb0:	e0bffb45 	stb	r2,-19(fp)
81129eb4:	00800804 	movi	r2,32
81129eb8:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
81129ebc:	00bfffc4 	movi	r2,-1
81129ec0:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
81129ec4:	e0bffd17 	ldw	r2,-12(fp)
81129ec8:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
81129ecc:	e13ffe17 	ldw	r4,-8(fp)
81129ed0:	110bc740 	call	8110bc74 <strlen>
81129ed4:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
81129ed8:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
81129edc:	00000b06 	br	81129f0c <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
81129ee0:	e0ffeb17 	ldw	r3,-84(fp)
81129ee4:	e0bfea17 	ldw	r2,-88(fp)
81129ee8:	1885883a 	add	r2,r3,r2
81129eec:	10800044 	addi	r2,r2,1
81129ef0:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
81129ef4:	e0bfeb17 	ldw	r2,-84(fp)
81129ef8:	e0fffe17 	ldw	r3,-8(fp)
81129efc:	1885883a 	add	r2,r3,r2
81129f00:	1009883a 	mov	r4,r2
81129f04:	11295ac0 	call	811295ac <get_dir_divider_location>
81129f08:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
81129f0c:	e0bfea17 	ldw	r2,-88(fp)
81129f10:	00bff316 	blt	zero,r2,81129ee0 <__reset+0xfb109ee0>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81129f14:	e0bfeb17 	ldw	r2,-84(fp)
81129f18:	e0bfee15 	stw	r2,-72(fp)
81129f1c:	00002706 	br	81129fbc <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
81129f20:	e0bfee17 	ldw	r2,-72(fp)
81129f24:	e0fffe17 	ldw	r3,-8(fp)
81129f28:	1885883a 	add	r2,r3,r2
81129f2c:	10800003 	ldbu	r2,0(r2)
81129f30:	10803fcc 	andi	r2,r2,255
81129f34:	1080201c 	xori	r2,r2,128
81129f38:	10bfe004 	addi	r2,r2,-128
81129f3c:	10800b98 	cmpnei	r2,r2,46
81129f40:	1000031e 	bne	r2,zero,81129f50 <find_file_in_directory+0x118>
        {
            ext_index = index;
81129f44:	e0bfee17 	ldw	r2,-72(fp)
81129f48:	e0bfec15 	stw	r2,-80(fp)
81129f4c:	00001806 	br	81129fb0 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
81129f50:	e0bfec17 	ldw	r2,-80(fp)
81129f54:	10000b0e 	bge	r2,zero,81129f84 <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
81129f58:	e0ffee17 	ldw	r3,-72(fp)
81129f5c:	e0bfeb17 	ldw	r2,-84(fp)
81129f60:	1885c83a 	sub	r2,r3,r2
81129f64:	e0ffee17 	ldw	r3,-72(fp)
81129f68:	e13ffe17 	ldw	r4,-8(fp)
81129f6c:	20c7883a 	add	r3,r4,r3
81129f70:	18c00003 	ldbu	r3,0(r3)
81129f74:	e13ff904 	addi	r4,fp,-28
81129f78:	2085883a 	add	r2,r4,r2
81129f7c:	10c00005 	stb	r3,0(r2)
81129f80:	00000b06 	br	81129fb0 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
81129f84:	e0ffee17 	ldw	r3,-72(fp)
81129f88:	e0bfec17 	ldw	r2,-80(fp)
81129f8c:	1885c83a 	sub	r2,r3,r2
81129f90:	10bfffc4 	addi	r2,r2,-1
81129f94:	e0ffee17 	ldw	r3,-72(fp)
81129f98:	e13ffe17 	ldw	r4,-8(fp)
81129f9c:	20c7883a 	add	r3,r4,r3
81129fa0:	18c00003 	ldbu	r3,0(r3)
81129fa4:	e13ffb04 	addi	r4,fp,-20
81129fa8:	2085883a 	add	r2,r4,r2
81129fac:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81129fb0:	e0bfee17 	ldw	r2,-72(fp)
81129fb4:	10800044 	addi	r2,r2,1
81129fb8:	e0bfee15 	stw	r2,-72(fp)
81129fbc:	e0ffee17 	ldw	r3,-72(fp)
81129fc0:	e0bff417 	ldw	r2,-48(fp)
81129fc4:	18bfd616 	blt	r3,r2,81129f20 <__reset+0xfb109f20>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
81129fc8:	e0bffd17 	ldw	r2,-12(fp)
81129fcc:	1000461e 	bne	r2,zero,8112a0e8 <find_file_in_directory+0x2b0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81129fd0:	00a04574 	movhi	r2,33045
81129fd4:	10972604 	addi	r2,r2,23704
81129fd8:	1080050b 	ldhu	r2,20(r2)
81129fdc:	10bfffcc 	andi	r2,r2,65535
81129fe0:	1006917a 	slli	r3,r2,5
81129fe4:	00a04574 	movhi	r2,33045
81129fe8:	10972604 	addi	r2,r2,23704
81129fec:	1080030b 	ldhu	r2,12(r2)
81129ff0:	10bfffcc 	andi	r2,r2,65535
81129ff4:	1885283a 	div	r2,r3,r2
81129ff8:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81129ffc:	e03ff015 	stw	zero,-64(fp)
8112a000:	00003506 	br	8112a0d8 <find_file_in_directory+0x2a0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
8112a004:	00a04574 	movhi	r2,33045
8112a008:	10972604 	addi	r2,r2,23704
8112a00c:	10c01317 	ldw	r3,76(r2)
8112a010:	e0bff017 	ldw	r2,-64(fp)
8112a014:	1885883a 	add	r2,r3,r2
8112a018:	1007883a 	mov	r3,r2
8112a01c:	d0a08617 	ldw	r2,-32232(gp)
8112a020:	100b883a 	mov	r5,r2
8112a024:	1809883a 	mov	r4,r3
8112a028:	11281f80 	call	811281f8 <Read_Sector_Data>
8112a02c:	10009626 	beq	r2,zero,8112a288 <find_file_in_directory+0x450>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8112a030:	e03ff115 	stw	zero,-60(fp)
8112a034:	00002006 	br	8112a0b8 <find_file_in_directory+0x280>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
8112a038:	e0bff117 	ldw	r2,-60(fp)
8112a03c:	1004917a 	slli	r2,r2,5
8112a040:	e0fff017 	ldw	r3,-64(fp)
8112a044:	180f883a 	mov	r7,r3
8112a048:	000d883a 	mov	r6,zero
8112a04c:	e17fff17 	ldw	r5,-4(fp)
8112a050:	1009883a 	mov	r4,r2
8112a054:	11286080 	call	81128608 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
8112a058:	e0bfff17 	ldw	r2,-4(fp)
8112a05c:	10800003 	ldbu	r2,0(r2)
8112a060:	10803fcc 	andi	r2,r2,255
8112a064:	10803960 	cmpeqi	r2,r2,229
8112a068:	1000101e 	bne	r2,zero,8112a0ac <find_file_in_directory+0x274>
8112a06c:	e0bfff17 	ldw	r2,-4(fp)
8112a070:	10800003 	ldbu	r2,0(r2)
8112a074:	10803fcc 	andi	r2,r2,255
8112a078:	10000c26 	beq	r2,zero,8112a0ac <find_file_in_directory+0x274>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
8112a07c:	e0fffb04 	addi	r3,fp,-20
8112a080:	e0bff904 	addi	r2,fp,-28
8112a084:	180d883a 	mov	r6,r3
8112a088:	100b883a 	mov	r5,r2
8112a08c:	e13fff17 	ldw	r4,-4(fp)
8112a090:	11296640 	call	81129664 <match_file_record_to_name_ext>
8112a094:	e0bff815 	stw	r2,-32(fp)

                        if (match)
8112a098:	e0bff817 	ldw	r2,-32(fp)
8112a09c:	10000326 	beq	r2,zero,8112a0ac <find_file_in_directory+0x274>
                        {
                            result = true;
8112a0a0:	00800044 	movi	r2,1
8112a0a4:	e0bfef15 	stw	r2,-68(fp)
                            break;
8112a0a8:	00000606 	br	8112a0c4 <find_file_in_directory+0x28c>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8112a0ac:	e0bff117 	ldw	r2,-60(fp)
8112a0b0:	10800044 	addi	r2,r2,1
8112a0b4:	e0bff115 	stw	r2,-60(fp)
8112a0b8:	e0bff117 	ldw	r2,-60(fp)
8112a0bc:	10800410 	cmplti	r2,r2,16
8112a0c0:	103fdd1e 	bne	r2,zero,8112a038 <__reset+0xfb10a038>
            }
            else
            {
                break;
            }
            if (result)
8112a0c4:	e0bfef17 	ldw	r2,-68(fp)
8112a0c8:	1000711e 	bne	r2,zero,8112a290 <find_file_in_directory+0x458>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8112a0cc:	e0bff017 	ldw	r2,-64(fp)
8112a0d0:	10800044 	addi	r2,r2,1
8112a0d4:	e0bff015 	stw	r2,-64(fp)
8112a0d8:	e0fff017 	ldw	r3,-64(fp)
8112a0dc:	e0bff717 	ldw	r2,-36(fp)
8112a0e0:	18bfc816 	blt	r3,r2,8112a004 <__reset+0xfb10a004>
8112a0e4:	00006b06 	br	8112a294 <find_file_in_directory+0x45c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8112a0e8:	e0bfed17 	ldw	r2,-76(fp)
8112a0ec:	10ffff84 	addi	r3,r2,-2
8112a0f0:	00a04574 	movhi	r2,33045
8112a0f4:	10972604 	addi	r2,r2,23704
8112a0f8:	10800383 	ldbu	r2,14(r2)
8112a0fc:	10803fcc 	andi	r2,r2,255
8112a100:	1885383a 	mul	r2,r3,r2
8112a104:	1007883a 	mov	r3,r2
8112a108:	00a04574 	movhi	r2,33045
8112a10c:	10972604 	addi	r2,r2,23704
8112a110:	10801417 	ldw	r2,80(r2)
8112a114:	1885883a 	add	r2,r3,r2
8112a118:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112a11c:	e03ff215 	stw	zero,-56(fp)
8112a120:	00003306 	br	8112a1f0 <find_file_in_directory+0x3b8>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
8112a124:	e0fff217 	ldw	r3,-56(fp)
8112a128:	e0bff517 	ldw	r2,-44(fp)
8112a12c:	1885883a 	add	r2,r3,r2
8112a130:	d0e08617 	ldw	r3,-32232(gp)
8112a134:	180b883a 	mov	r5,r3
8112a138:	1009883a 	mov	r4,r2
8112a13c:	11281f80 	call	811281f8 <Read_Sector_Data>
8112a140:	10003226 	beq	r2,zero,8112a20c <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8112a144:	e03ff315 	stw	zero,-52(fp)
8112a148:	00002106 	br	8112a1d0 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
8112a14c:	e0bff317 	ldw	r2,-52(fp)
8112a150:	1004917a 	slli	r2,r2,5
8112a154:	e0ffed17 	ldw	r3,-76(fp)
8112a158:	e13ff217 	ldw	r4,-56(fp)
8112a15c:	200f883a 	mov	r7,r4
8112a160:	180d883a 	mov	r6,r3
8112a164:	e17fff17 	ldw	r5,-4(fp)
8112a168:	1009883a 	mov	r4,r2
8112a16c:	11286080 	call	81128608 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
8112a170:	e0bfff17 	ldw	r2,-4(fp)
8112a174:	10800003 	ldbu	r2,0(r2)
8112a178:	10803fcc 	andi	r2,r2,255
8112a17c:	10803960 	cmpeqi	r2,r2,229
8112a180:	1000101e 	bne	r2,zero,8112a1c4 <find_file_in_directory+0x38c>
8112a184:	e0bfff17 	ldw	r2,-4(fp)
8112a188:	10800003 	ldbu	r2,0(r2)
8112a18c:	10803fcc 	andi	r2,r2,255
8112a190:	10000c26 	beq	r2,zero,8112a1c4 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
8112a194:	e0fffb04 	addi	r3,fp,-20
8112a198:	e0bff904 	addi	r2,fp,-28
8112a19c:	180d883a 	mov	r6,r3
8112a1a0:	100b883a 	mov	r5,r2
8112a1a4:	e13fff17 	ldw	r4,-4(fp)
8112a1a8:	11296640 	call	81129664 <match_file_record_to_name_ext>
8112a1ac:	e0bff615 	stw	r2,-40(fp)

                            if (match)
8112a1b0:	e0bff617 	ldw	r2,-40(fp)
8112a1b4:	10000326 	beq	r2,zero,8112a1c4 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
8112a1b8:	00800044 	movi	r2,1
8112a1bc:	e0bfef15 	stw	r2,-68(fp)
                                break;
8112a1c0:	00000606 	br	8112a1dc <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8112a1c4:	e0bff317 	ldw	r2,-52(fp)
8112a1c8:	10800044 	addi	r2,r2,1
8112a1cc:	e0bff315 	stw	r2,-52(fp)
8112a1d0:	e0bff317 	ldw	r2,-52(fp)
8112a1d4:	10800410 	cmplti	r2,r2,16
8112a1d8:	103fdc1e 	bne	r2,zero,8112a14c <__reset+0xfb10a14c>
                }
                else
                {
                    break;
                }
                if (result)
8112a1dc:	e0bfef17 	ldw	r2,-68(fp)
8112a1e0:	10000c1e 	bne	r2,zero,8112a214 <find_file_in_directory+0x3dc>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112a1e4:	e0bff217 	ldw	r2,-56(fp)
8112a1e8:	10800044 	addi	r2,r2,1
8112a1ec:	e0bff215 	stw	r2,-56(fp)
8112a1f0:	00a04574 	movhi	r2,33045
8112a1f4:	10972604 	addi	r2,r2,23704
8112a1f8:	10800383 	ldbu	r2,14(r2)
8112a1fc:	10803fcc 	andi	r2,r2,255
8112a200:	e0fff217 	ldw	r3,-56(fp)
8112a204:	18bfc716 	blt	r3,r2,8112a124 <__reset+0xfb10a124>
8112a208:	00000306 	br	8112a218 <find_file_in_directory+0x3e0>
                        }
                    }
                }
                else
                {
                    break;
8112a20c:	0001883a 	nop
8112a210:	00000106 	br	8112a218 <find_file_in_directory+0x3e0>
                }
                if (result)
                {
                    break;
8112a214:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
8112a218:	e0bfef17 	ldw	r2,-68(fp)
8112a21c:	1000141e 	bne	r2,zero,8112a270 <find_file_in_directory+0x438>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
8112a220:	e0bfed17 	ldw	r2,-76(fp)
8112a224:	e0fffc04 	addi	r3,fp,-16
8112a228:	180b883a 	mov	r5,r3
8112a22c:	1009883a 	mov	r4,r2
8112a230:	11282d00 	call	811282d0 <get_cluster_flag>
8112a234:	10000c26 	beq	r2,zero,8112a268 <find_file_in_directory+0x430>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
8112a238:	e0bffc0b 	ldhu	r2,-16(fp)
8112a23c:	10bfffcc 	andi	r2,r2,65535
8112a240:	10fffe0c 	andi	r3,r2,65528
8112a244:	00bffe14 	movui	r2,65528
8112a248:	1880021e 	bne	r3,r2,8112a254 <find_file_in_directory+0x41c>
					{
						return false;
8112a24c:	0005883a 	mov	r2,zero
8112a250:	00001106 	br	8112a298 <find_file_in_directory+0x460>
					}
					cluster = (new_cluster & 0x0000fff8);
8112a254:	e0bffc0b 	ldhu	r2,-16(fp)
8112a258:	10bfffcc 	andi	r2,r2,65535
8112a25c:	10bffe0c 	andi	r2,r2,65528
8112a260:	e0bfed15 	stw	r2,-76(fp)
8112a264:	00000206 	br	8112a270 <find_file_in_directory+0x438>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
8112a268:	0005883a 	mov	r2,zero
8112a26c:	00000a06 	br	8112a298 <find_file_in_directory+0x460>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
8112a270:	e0bfed17 	ldw	r2,-76(fp)
8112a274:	00fffdd4 	movui	r3,65527
8112a278:	18800616 	blt	r3,r2,8112a294 <find_file_in_directory+0x45c>
8112a27c:	e0bfef17 	ldw	r2,-68(fp)
8112a280:	103f9926 	beq	r2,zero,8112a0e8 <__reset+0xfb10a0e8>
8112a284:	00000306 	br	8112a294 <find_file_in_directory+0x45c>
                    }
                }
            }
            else
            {
                break;
8112a288:	0001883a 	nop
8112a28c:	00000106 	br	8112a294 <find_file_in_directory+0x45c>
            }
            if (result)
            {
                break;
8112a290:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
8112a294:	e0bfef17 	ldw	r2,-68(fp)
}
8112a298:	e037883a 	mov	sp,fp
8112a29c:	dfc00117 	ldw	ra,4(sp)
8112a2a0:	df000017 	ldw	fp,0(sp)
8112a2a4:	dec00204 	addi	sp,sp,8
8112a2a8:	f800283a 	ret

8112a2ac <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
8112a2ac:	defff504 	addi	sp,sp,-44
8112a2b0:	dfc00a15 	stw	ra,40(sp)
8112a2b4:	df000915 	stw	fp,36(sp)
8112a2b8:	df000904 	addi	fp,sp,36
8112a2bc:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
8112a2c0:	00a04574 	movhi	r2,33045
8112a2c4:	10972604 	addi	r2,r2,23704
8112a2c8:	10801117 	ldw	r2,68(r2)
8112a2cc:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
8112a2d0:	00800084 	movi	r2,2
8112a2d4:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
8112a2d8:	00bfffc4 	movi	r2,-1
8112a2dc:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
8112a2e0:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
8112a2e4:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
8112a2e8:	00a04574 	movhi	r2,33045
8112a2ec:	10972604 	addi	r2,r2,23704
8112a2f0:	10801417 	ldw	r2,80(r2)
8112a2f4:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
8112a2f8:	00a04574 	movhi	r2,33045
8112a2fc:	10972604 	addi	r2,r2,23704
8112a300:	1080058b 	ldhu	r2,22(r2)
8112a304:	10bfffcc 	andi	r2,r2,65535
8112a308:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
8112a30c:	00a04574 	movhi	r2,33045
8112a310:	10972604 	addi	r2,r2,23704
8112a314:	10800917 	ldw	r2,36(r2)
8112a318:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
8112a31c:	e0bffd17 	ldw	r2,-12(fp)
8112a320:	e0fffe17 	ldw	r3,-8(fp)
8112a324:	18800b2e 	bgeu	r3,r2,8112a354 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
8112a328:	e0fffd17 	ldw	r3,-12(fp)
8112a32c:	e0bffc17 	ldw	r2,-16(fp)
8112a330:	1887c83a 	sub	r3,r3,r2
8112a334:	00a04574 	movhi	r2,33045
8112a338:	10972604 	addi	r2,r2,23704
8112a33c:	10800383 	ldbu	r2,14(r2)
8112a340:	10803fcc 	andi	r2,r2,255
8112a344:	1885203a 	divu	r2,r3,r2
8112a348:	10800044 	addi	r2,r2,1
8112a34c:	e0bffb15 	stw	r2,-20(fp)
8112a350:	00002a06 	br	8112a3fc <find_first_empty_cluster+0x150>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
8112a354:	e0fffe17 	ldw	r3,-8(fp)
8112a358:	e0bffc17 	ldw	r2,-16(fp)
8112a35c:	1887c83a 	sub	r3,r3,r2
8112a360:	00a04574 	movhi	r2,33045
8112a364:	10972604 	addi	r2,r2,23704
8112a368:	10800383 	ldbu	r2,14(r2)
8112a36c:	10803fcc 	andi	r2,r2,255
8112a370:	1885203a 	divu	r2,r3,r2
8112a374:	10800044 	addi	r2,r2,1
8112a378:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
8112a37c:	00001f06 	br	8112a3fc <find_first_empty_cluster+0x150>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
8112a380:	e0bff717 	ldw	r2,-36(fp)
8112a384:	d0e08617 	ldw	r3,-32232(gp)
8112a388:	180b883a 	mov	r5,r3
8112a38c:	1009883a 	mov	r4,r2
8112a390:	11281f80 	call	811281f8 <Read_Sector_Data>
8112a394:	10001426 	beq	r2,zero,8112a3e8 <find_first_empty_cluster+0x13c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
8112a398:	e0bff817 	ldw	r2,-32(fp)
8112a39c:	10803fcc 	andi	r2,r2,255
8112a3a0:	1085883a 	add	r2,r2,r2
8112a3a4:	1007883a 	mov	r3,r2
8112a3a8:	d0a08817 	ldw	r2,-32224(gp)
8112a3ac:	10800a17 	ldw	r2,40(r2)
8112a3b0:	1885883a 	add	r2,r3,r2
8112a3b4:	1080002b 	ldhuio	r2,0(r2)
8112a3b8:	10bfffcc 	andi	r2,r2,65535
8112a3bc:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
8112a3c0:	e0bff90f 	ldh	r2,-28(fp)
8112a3c4:	10000726 	beq	r2,zero,8112a3e4 <find_first_empty_cluster+0x138>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
8112a3c8:	e0bff817 	ldw	r2,-32(fp)
8112a3cc:	10800044 	addi	r2,r2,1
8112a3d0:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
8112a3d4:	e0bff817 	ldw	r2,-32(fp)
8112a3d8:	10803fcc 	andi	r2,r2,255
8112a3dc:	103fee1e 	bne	r2,zero,8112a398 <__reset+0xfb10a398>
8112a3e0:	00000106 	br	8112a3e8 <find_first_empty_cluster+0x13c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
8112a3e4:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
8112a3e8:	e0bff90f 	ldh	r2,-28(fp)
8112a3ec:	10000926 	beq	r2,zero,8112a414 <find_first_empty_cluster+0x168>
        {
            break;
        }
        sector++;
8112a3f0:	e0bff717 	ldw	r2,-36(fp)
8112a3f4:	10800044 	addi	r2,r2,1
8112a3f8:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
8112a3fc:	00a04574 	movhi	r2,33045
8112a400:	10972604 	addi	r2,r2,23704
8112a404:	10c01217 	ldw	r3,72(r2)
8112a408:	e0bff717 	ldw	r2,-36(fp)
8112a40c:	18bfdc1e 	bne	r3,r2,8112a380 <__reset+0xfb10a380>
8112a410:	00000106 	br	8112a418 <find_first_empty_cluster+0x16c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
8112a414:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
8112a418:	e0bff90f 	ldh	r2,-28(fp)
8112a41c:	1000081e 	bne	r2,zero,8112a440 <find_first_empty_cluster+0x194>
8112a420:	e0bff90f 	ldh	r2,-28(fp)
8112a424:	e0fffb17 	ldw	r3,-20(fp)
8112a428:	18800536 	bltu	r3,r2,8112a440 <find_first_empty_cluster+0x194>
    {
        *cluster_number = cluster_index;
8112a42c:	e0bfff17 	ldw	r2,-4(fp)
8112a430:	e0fff817 	ldw	r3,-32(fp)
8112a434:	10c00015 	stw	r3,0(r2)
		result = true;
8112a438:	00800044 	movi	r2,1
8112a43c:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
8112a440:	e0bffa17 	ldw	r2,-24(fp)
}
8112a444:	e037883a 	mov	sp,fp
8112a448:	dfc00117 	ldw	ra,4(sp)
8112a44c:	df000017 	ldw	fp,0(sp)
8112a450:	dec00204 	addi	sp,sp,8
8112a454:	f800283a 	ret

8112a458 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
8112a458:	defff604 	addi	sp,sp,-40
8112a45c:	dfc00915 	stw	ra,36(sp)
8112a460:	df000815 	stw	fp,32(sp)
8112a464:	df000804 	addi	fp,sp,32
8112a468:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
8112a46c:	00bfffc4 	movi	r2,-1
8112a470:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
8112a474:	e0bfff17 	ldw	r2,-4(fp)
8112a478:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8112a47c:	e0bff917 	ldw	r2,-28(fp)
8112a480:	10ffff84 	addi	r3,r2,-2
8112a484:	00a04574 	movhi	r2,33045
8112a488:	10972604 	addi	r2,r2,23704
8112a48c:	10800383 	ldbu	r2,14(r2)
8112a490:	10803fcc 	andi	r2,r2,255
8112a494:	1885383a 	mul	r2,r3,r2
8112a498:	1007883a 	mov	r3,r2
8112a49c:	00a04574 	movhi	r2,33045
8112a4a0:	10972604 	addi	r2,r2,23704
8112a4a4:	10801417 	ldw	r2,80(r2)
8112a4a8:	1885883a 	add	r2,r3,r2
8112a4ac:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112a4b0:	e03ffa15 	stw	zero,-24(fp)
8112a4b4:	00002c06 	br	8112a568 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
8112a4b8:	e0fffa17 	ldw	r3,-24(fp)
8112a4bc:	e0bffc17 	ldw	r2,-16(fp)
8112a4c0:	1885883a 	add	r2,r3,r2
8112a4c4:	d0e08617 	ldw	r3,-32232(gp)
8112a4c8:	180b883a 	mov	r5,r3
8112a4cc:	1009883a 	mov	r4,r2
8112a4d0:	11281f80 	call	811281f8 <Read_Sector_Data>
8112a4d4:	10002b26 	beq	r2,zero,8112a584 <find_first_empty_record_in_a_subdirectory+0x12c>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8112a4d8:	e03ffb15 	stw	zero,-20(fp)
8112a4dc:	00001c06 	br	8112a550 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
8112a4e0:	e0bffb17 	ldw	r2,-20(fp)
8112a4e4:	1004917a 	slli	r2,r2,5
8112a4e8:	1007883a 	mov	r3,r2
8112a4ec:	d0a08817 	ldw	r2,-32224(gp)
8112a4f0:	10800a17 	ldw	r2,40(r2)
8112a4f4:	1885883a 	add	r2,r3,r2
8112a4f8:	10800023 	ldbuio	r2,0(r2)
8112a4fc:	10803fcc 	andi	r2,r2,255
8112a500:	10803fcc 	andi	r2,r2,255
8112a504:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
8112a508:	e0bffd0b 	ldhu	r2,-12(fp)
8112a50c:	10803960 	cmpeqi	r2,r2,229
8112a510:	1000021e 	bne	r2,zero,8112a51c <find_first_empty_record_in_a_subdirectory+0xc4>
8112a514:	e0bffd0b 	ldhu	r2,-12(fp)
8112a518:	10000a1e 	bne	r2,zero,8112a544 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
8112a51c:	e0bffa17 	ldw	r2,-24(fp)
8112a520:	1006913a 	slli	r3,r2,4
8112a524:	e0bffb17 	ldw	r2,-20(fp)
8112a528:	1885883a 	add	r2,r3,r2
8112a52c:	1006943a 	slli	r3,r2,16
8112a530:	e0bff917 	ldw	r2,-28(fp)
8112a534:	1884b03a 	or	r2,r3,r2
8112a538:	e0bff815 	stw	r2,-32(fp)
                        return result;
8112a53c:	e0bff817 	ldw	r2,-32(fp)
8112a540:	00005306 	br	8112a690 <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8112a544:	e0bffb17 	ldw	r2,-20(fp)
8112a548:	10800044 	addi	r2,r2,1
8112a54c:	e0bffb15 	stw	r2,-20(fp)
8112a550:	e0bffb17 	ldw	r2,-20(fp)
8112a554:	10800410 	cmplti	r2,r2,16
8112a558:	103fe11e 	bne	r2,zero,8112a4e0 <__reset+0xfb10a4e0>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112a55c:	e0bffa17 	ldw	r2,-24(fp)
8112a560:	10800044 	addi	r2,r2,1
8112a564:	e0bffa15 	stw	r2,-24(fp)
8112a568:	00a04574 	movhi	r2,33045
8112a56c:	10972604 	addi	r2,r2,23704
8112a570:	10800383 	ldbu	r2,14(r2)
8112a574:	10803fcc 	andi	r2,r2,255
8112a578:	e0fffa17 	ldw	r3,-24(fp)
8112a57c:	18bfce16 	blt	r3,r2,8112a4b8 <__reset+0xfb10a4b8>
8112a580:	00000106 	br	8112a588 <find_first_empty_record_in_a_subdirectory+0x130>
                    }
                }
            }
            else
            {
                break;
8112a584:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
8112a588:	e0bff817 	ldw	r2,-32(fp)
8112a58c:	1000390e 	bge	r2,zero,8112a674 <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
8112a590:	e0bff917 	ldw	r2,-28(fp)
8112a594:	e0fffd84 	addi	r3,fp,-10
8112a598:	180b883a 	mov	r5,r3
8112a59c:	1009883a 	mov	r4,r2
8112a5a0:	11282d00 	call	811282d0 <get_cluster_flag>
8112a5a4:	10003126 	beq	r2,zero,8112a66c <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
8112a5a8:	e0bffd8b 	ldhu	r2,-10(fp)
8112a5ac:	10bfffcc 	andi	r2,r2,65535
8112a5b0:	10fffe0c 	andi	r3,r2,65528
8112a5b4:	00bffe14 	movui	r2,65528
8112a5b8:	18802e1e 	bne	r3,r2,8112a674 <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
8112a5bc:	e0bffe04 	addi	r2,fp,-8
8112a5c0:	1009883a 	mov	r4,r2
8112a5c4:	112a2ac0 	call	8112a2ac <find_first_empty_cluster>
8112a5c8:	10002326 	beq	r2,zero,8112a658 <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
8112a5cc:	e0bff917 	ldw	r2,-28(fp)
8112a5d0:	e0fffe17 	ldw	r3,-8(fp)
8112a5d4:	18ffffcc 	andi	r3,r3,65535
8112a5d8:	18e0001c 	xori	r3,r3,32768
8112a5dc:	18e00004 	addi	r3,r3,-32768
8112a5e0:	01800044 	movi	r6,1
8112a5e4:	180b883a 	mov	r5,r3
8112a5e8:	1009883a 	mov	r4,r2
8112a5ec:	11283840 	call	81128384 <mark_cluster>
8112a5f0:	10001926 	beq	r2,zero,8112a658 <find_first_empty_record_in_a_subdirectory+0x200>
8112a5f4:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
8112a5f8:	01800044 	movi	r6,1
8112a5fc:	017fffc4 	movi	r5,-1
8112a600:	1009883a 	mov	r4,r2
8112a604:	11283840 	call	81128384 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
8112a608:	10001326 	beq	r2,zero,8112a658 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
8112a60c:	e0bff917 	ldw	r2,-28(fp)
8112a610:	e0fffe17 	ldw	r3,-8(fp)
8112a614:	18ffffcc 	andi	r3,r3,65535
8112a618:	18e0001c 	xori	r3,r3,32768
8112a61c:	18e00004 	addi	r3,r3,-32768
8112a620:	000d883a 	mov	r6,zero
8112a624:	180b883a 	mov	r5,r3
8112a628:	1009883a 	mov	r4,r2
8112a62c:	11283840 	call	81128384 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
8112a630:	10000926 	beq	r2,zero,8112a658 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
8112a634:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
8112a638:	000d883a 	mov	r6,zero
8112a63c:	017fffc4 	movi	r5,-1
8112a640:	1009883a 	mov	r4,r2
8112a644:	11283840 	call	81128384 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
8112a648:	10000326 	beq	r2,zero,8112a658 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
8112a64c:	11281ac0 	call	811281ac <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
8112a650:	e0bffe17 	ldw	r2,-8(fp)
8112a654:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
8112a658:	e0bffd8b 	ldhu	r2,-10(fp)
8112a65c:	10bfffcc 	andi	r2,r2,65535
8112a660:	10bffe0c 	andi	r2,r2,65528
8112a664:	e0bff915 	stw	r2,-28(fp)
8112a668:	00000206 	br	8112a674 <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
8112a66c:	00bfffc4 	movi	r2,-1
8112a670:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
8112a674:	e0bff917 	ldw	r2,-28(fp)
8112a678:	00fffdd4 	movui	r3,65527
8112a67c:	18800316 	blt	r3,r2,8112a68c <find_first_empty_record_in_a_subdirectory+0x234>
8112a680:	e0bff817 	ldw	r2,-32(fp)
8112a684:	10bfffe0 	cmpeqi	r2,r2,-1
8112a688:	103f7c1e 	bne	r2,zero,8112a47c <__reset+0xfb10a47c>
    return result; 
8112a68c:	e0bff817 	ldw	r2,-32(fp)
}
8112a690:	e037883a 	mov	sp,fp
8112a694:	dfc00117 	ldw	ra,4(sp)
8112a698:	df000017 	ldw	fp,0(sp)
8112a69c:	dec00204 	addi	sp,sp,8
8112a6a0:	f800283a 	ret

8112a6a4 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
8112a6a4:	defff904 	addi	sp,sp,-28
8112a6a8:	dfc00615 	stw	ra,24(sp)
8112a6ac:	df000515 	stw	fp,20(sp)
8112a6b0:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
8112a6b4:	00a04574 	movhi	r2,33045
8112a6b8:	10972604 	addi	r2,r2,23704
8112a6bc:	1080050b 	ldhu	r2,20(r2)
8112a6c0:	10bfffcc 	andi	r2,r2,65535
8112a6c4:	1006917a 	slli	r3,r2,5
8112a6c8:	00a04574 	movhi	r2,33045
8112a6cc:	10972604 	addi	r2,r2,23704
8112a6d0:	1080030b 	ldhu	r2,12(r2)
8112a6d4:	10bfffcc 	andi	r2,r2,65535
8112a6d8:	1885283a 	div	r2,r3,r2
8112a6dc:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
8112a6e0:	00bfffc4 	movi	r2,-1
8112a6e4:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8112a6e8:	e03ffb15 	stw	zero,-20(fp)
8112a6ec:	00002d06 	br	8112a7a4 <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
8112a6f0:	00a04574 	movhi	r2,33045
8112a6f4:	10972604 	addi	r2,r2,23704
8112a6f8:	10c01317 	ldw	r3,76(r2)
8112a6fc:	e0bffb17 	ldw	r2,-20(fp)
8112a700:	1885883a 	add	r2,r3,r2
8112a704:	1007883a 	mov	r3,r2
8112a708:	d0a08617 	ldw	r2,-32232(gp)
8112a70c:	100b883a 	mov	r5,r2
8112a710:	1809883a 	mov	r4,r3
8112a714:	11281f80 	call	811281f8 <Read_Sector_Data>
8112a718:	10002626 	beq	r2,zero,8112a7b4 <find_first_empty_record_in_root_directory+0x110>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
8112a71c:	e03ffc15 	stw	zero,-16(fp)
8112a720:	00001a06 	br	8112a78c <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
8112a724:	e0bffc17 	ldw	r2,-16(fp)
8112a728:	1004917a 	slli	r2,r2,5
8112a72c:	1007883a 	mov	r3,r2
8112a730:	d0a08817 	ldw	r2,-32224(gp)
8112a734:	10800a17 	ldw	r2,40(r2)
8112a738:	1885883a 	add	r2,r3,r2
8112a73c:	10800023 	ldbuio	r2,0(r2)
8112a740:	10803fcc 	andi	r2,r2,255
8112a744:	10803fcc 	andi	r2,r2,255
8112a748:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
8112a74c:	e0bfff0b 	ldhu	r2,-4(fp)
8112a750:	10803960 	cmpeqi	r2,r2,229
8112a754:	1000021e 	bne	r2,zero,8112a760 <find_first_empty_record_in_root_directory+0xbc>
8112a758:	e0bfff0b 	ldhu	r2,-4(fp)
8112a75c:	1000081e 	bne	r2,zero,8112a780 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
8112a760:	e0bffb17 	ldw	r2,-20(fp)
8112a764:	1006913a 	slli	r3,r2,4
8112a768:	e0bffc17 	ldw	r2,-16(fp)
8112a76c:	1885883a 	add	r2,r3,r2
8112a770:	1004943a 	slli	r2,r2,16
8112a774:	e0bffe15 	stw	r2,-8(fp)
                    return result;
8112a778:	e0bffe17 	ldw	r2,-8(fp)
8112a77c:	00000f06 	br	8112a7bc <find_first_empty_record_in_root_directory+0x118>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
8112a780:	e0bffc17 	ldw	r2,-16(fp)
8112a784:	10800044 	addi	r2,r2,1
8112a788:	e0bffc15 	stw	r2,-16(fp)
8112a78c:	e0bffc17 	ldw	r2,-16(fp)
8112a790:	10800410 	cmplti	r2,r2,16
8112a794:	103fe31e 	bne	r2,zero,8112a724 <__reset+0xfb10a724>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8112a798:	e0bffb17 	ldw	r2,-20(fp)
8112a79c:	10800044 	addi	r2,r2,1
8112a7a0:	e0bffb15 	stw	r2,-20(fp)
8112a7a4:	e0fffb17 	ldw	r3,-20(fp)
8112a7a8:	e0bffd17 	ldw	r2,-12(fp)
8112a7ac:	18bfd016 	blt	r3,r2,8112a6f0 <__reset+0xfb10a6f0>
8112a7b0:	00000106 	br	8112a7b8 <find_first_empty_record_in_root_directory+0x114>
                }
            }
        }
        else
        {
            break;
8112a7b4:	0001883a 	nop
        }
    }
    return result;
8112a7b8:	e0bffe17 	ldw	r2,-8(fp)
}
8112a7bc:	e037883a 	mov	sp,fp
8112a7c0:	dfc00117 	ldw	ra,4(sp)
8112a7c4:	df000017 	ldw	fp,0(sp)
8112a7c8:	dec00204 	addi	sp,sp,8
8112a7cc:	f800283a 	ret

8112a7d0 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
8112a7d0:	defffa04 	addi	sp,sp,-24
8112a7d4:	df000515 	stw	fp,20(sp)
8112a7d8:	df000504 	addi	fp,sp,20
8112a7dc:	e13ffd15 	stw	r4,-12(fp)
8112a7e0:	e17ffe15 	stw	r5,-8(fp)
8112a7e4:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
8112a7e8:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
8112a7ec:	e03ffb15 	stw	zero,-20(fp)
8112a7f0:	00002506 	br	8112a888 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
8112a7f4:	e0bffc17 	ldw	r2,-16(fp)
8112a7f8:	e0fffd17 	ldw	r3,-12(fp)
8112a7fc:	1885883a 	add	r2,r3,r2
8112a800:	10800003 	ldbu	r2,0(r2)
8112a804:	10803fcc 	andi	r2,r2,255
8112a808:	1080201c 	xori	r2,r2,128
8112a80c:	10bfe004 	addi	r2,r2,-128
8112a810:	10800ba0 	cmpeqi	r2,r2,46
8112a814:	1000141e 	bne	r2,zero,8112a868 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
8112a818:	e0bffb17 	ldw	r2,-20(fp)
8112a81c:	e0fffe17 	ldw	r3,-8(fp)
8112a820:	1885883a 	add	r2,r3,r2
8112a824:	e0fffc17 	ldw	r3,-16(fp)
8112a828:	e13ffd17 	ldw	r4,-12(fp)
8112a82c:	20c7883a 	add	r3,r4,r3
8112a830:	18c00003 	ldbu	r3,0(r3)
8112a834:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
8112a838:	e0bffc17 	ldw	r2,-16(fp)
8112a83c:	e0fffd17 	ldw	r3,-12(fp)
8112a840:	1885883a 	add	r2,r3,r2
8112a844:	10800003 	ldbu	r2,0(r2)
8112a848:	10803fcc 	andi	r2,r2,255
8112a84c:	1080201c 	xori	r2,r2,128
8112a850:	10bfe004 	addi	r2,r2,-128
8112a854:	10000926 	beq	r2,zero,8112a87c <convert_filename_to_name_extension+0xac>
8112a858:	e0bffc17 	ldw	r2,-16(fp)
8112a85c:	10800044 	addi	r2,r2,1
8112a860:	e0bffc15 	stw	r2,-16(fp)
8112a864:	00000506 	br	8112a87c <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
8112a868:	e0bffb17 	ldw	r2,-20(fp)
8112a86c:	e0fffe17 	ldw	r3,-8(fp)
8112a870:	1885883a 	add	r2,r3,r2
8112a874:	00c00804 	movi	r3,32
8112a878:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
8112a87c:	e0bffb17 	ldw	r2,-20(fp)
8112a880:	10800044 	addi	r2,r2,1
8112a884:	e0bffb15 	stw	r2,-20(fp)
8112a888:	e0bffb17 	ldw	r2,-20(fp)
8112a88c:	10800210 	cmplti	r2,r2,8
8112a890:	103fd81e 	bne	r2,zero,8112a7f4 <__reset+0xfb10a7f4>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
8112a894:	e0bffc17 	ldw	r2,-16(fp)
8112a898:	e0fffd17 	ldw	r3,-12(fp)
8112a89c:	1885883a 	add	r2,r3,r2
8112a8a0:	10800003 	ldbu	r2,0(r2)
8112a8a4:	10803fcc 	andi	r2,r2,255
8112a8a8:	1080201c 	xori	r2,r2,128
8112a8ac:	10bfe004 	addi	r2,r2,-128
8112a8b0:	10800b98 	cmpnei	r2,r2,46
8112a8b4:	1000031e 	bne	r2,zero,8112a8c4 <convert_filename_to_name_extension+0xf4>
8112a8b8:	e0bffc17 	ldw	r2,-16(fp)
8112a8bc:	10800044 	addi	r2,r2,1
8112a8c0:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
8112a8c4:	e03ffb15 	stw	zero,-20(fp)
8112a8c8:	00001c06 	br	8112a93c <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
8112a8cc:	e0bffc17 	ldw	r2,-16(fp)
8112a8d0:	e0fffd17 	ldw	r3,-12(fp)
8112a8d4:	1885883a 	add	r2,r3,r2
8112a8d8:	10800003 	ldbu	r2,0(r2)
8112a8dc:	10803fcc 	andi	r2,r2,255
8112a8e0:	1080201c 	xori	r2,r2,128
8112a8e4:	10bfe004 	addi	r2,r2,-128
8112a8e8:	10000c26 	beq	r2,zero,8112a91c <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
8112a8ec:	e0bffb17 	ldw	r2,-20(fp)
8112a8f0:	e0ffff17 	ldw	r3,-4(fp)
8112a8f4:	1885883a 	add	r2,r3,r2
8112a8f8:	e0fffc17 	ldw	r3,-16(fp)
8112a8fc:	e13ffd17 	ldw	r4,-12(fp)
8112a900:	20c7883a 	add	r3,r4,r3
8112a904:	18c00003 	ldbu	r3,0(r3)
8112a908:	10c00005 	stb	r3,0(r2)
            local++;
8112a90c:	e0bffc17 	ldw	r2,-16(fp)
8112a910:	10800044 	addi	r2,r2,1
8112a914:	e0bffc15 	stw	r2,-16(fp)
8112a918:	00000506 	br	8112a930 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
8112a91c:	e0bffb17 	ldw	r2,-20(fp)
8112a920:	e0ffff17 	ldw	r3,-4(fp)
8112a924:	1885883a 	add	r2,r3,r2
8112a928:	00c00804 	movi	r3,32
8112a92c:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
8112a930:	e0bffb17 	ldw	r2,-20(fp)
8112a934:	10800044 	addi	r2,r2,1
8112a938:	e0bffb15 	stw	r2,-20(fp)
8112a93c:	e0bffb17 	ldw	r2,-20(fp)
8112a940:	108000d0 	cmplti	r2,r2,3
8112a944:	103fe11e 	bne	r2,zero,8112a8cc <__reset+0xfb10a8cc>
        {
            extension[counter] = ' ';
        }
    }

}
8112a948:	0001883a 	nop
8112a94c:	e037883a 	mov	sp,fp
8112a950:	df000017 	ldw	fp,0(sp)
8112a954:	dec00104 	addi	sp,sp,4
8112a958:	f800283a 	ret

8112a95c <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
8112a95c:	defff504 	addi	sp,sp,-44
8112a960:	dfc00a15 	stw	ra,40(sp)
8112a964:	df000915 	stw	fp,36(sp)
8112a968:	df000904 	addi	fp,sp,36
8112a96c:	e13ffd15 	stw	r4,-12(fp)
8112a970:	e17ffe15 	stw	r5,-8(fp)
8112a974:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
8112a978:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
8112a97c:	e0bffc04 	addi	r2,fp,-16
8112a980:	1009883a 	mov	r4,r2
8112a984:	112a2ac0 	call	8112a2ac <find_first_empty_cluster>
8112a988:	1000a026 	beq	r2,zero,8112ac0c <create_file+0x2b0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
8112a98c:	e0bfff17 	ldw	r2,-4(fp)
8112a990:	10800a17 	ldw	r2,40(r2)
8112a994:	1000031e 	bne	r2,zero,8112a9a4 <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
8112a998:	112a6a40 	call	8112a6a4 <find_first_empty_record_in_root_directory>
8112a99c:	e0bff815 	stw	r2,-32(fp)
8112a9a0:	00000606 	br	8112a9bc <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
8112a9a4:	e0bfff17 	ldw	r2,-4(fp)
8112a9a8:	1080058b 	ldhu	r2,22(r2)
8112a9ac:	10bfffcc 	andi	r2,r2,65535
8112a9b0:	1009883a 	mov	r4,r2
8112a9b4:	112a4580 	call	8112a458 <find_first_empty_record_in_a_subdirectory>
8112a9b8:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
8112a9bc:	e0bff817 	ldw	r2,-32(fp)
8112a9c0:	10009216 	blt	r2,zero,8112ac0c <create_file+0x2b0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
8112a9c4:	e13ffd17 	ldw	r4,-12(fp)
8112a9c8:	11295ac0 	call	811295ac <get_dir_divider_location>
8112a9cc:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
8112a9d0:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
8112a9d4:	00000b06 	br	8112aa04 <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
8112a9d8:	e0fffa17 	ldw	r3,-24(fp)
8112a9dc:	e0bff917 	ldw	r2,-28(fp)
8112a9e0:	1885883a 	add	r2,r3,r2
8112a9e4:	10800044 	addi	r2,r2,1
8112a9e8:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
8112a9ec:	e0bffa17 	ldw	r2,-24(fp)
8112a9f0:	e0fffd17 	ldw	r3,-12(fp)
8112a9f4:	1885883a 	add	r2,r3,r2
8112a9f8:	1009883a 	mov	r4,r2
8112a9fc:	11295ac0 	call	811295ac <get_dir_divider_location>
8112aa00:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
8112aa04:	e0bff917 	ldw	r2,-28(fp)
8112aa08:	00bff316 	blt	zero,r2,8112a9d8 <__reset+0xfb10a9d8>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
8112aa0c:	e0bffa17 	ldw	r2,-24(fp)
8112aa10:	e0fffd17 	ldw	r3,-12(fp)
8112aa14:	1887883a 	add	r3,r3,r2
8112aa18:	e13ffe17 	ldw	r4,-8(fp)
8112aa1c:	e0bffe17 	ldw	r2,-8(fp)
8112aa20:	10800204 	addi	r2,r2,8
8112aa24:	100d883a 	mov	r6,r2
8112aa28:	200b883a 	mov	r5,r4
8112aa2c:	1809883a 	mov	r4,r3
8112aa30:	112a7d00 	call	8112a7d0 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
8112aa34:	e0bffe17 	ldw	r2,-8(fp)
8112aa38:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
8112aa3c:	e0bffe17 	ldw	r2,-8(fp)
8112aa40:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
8112aa44:	e0bffe17 	ldw	r2,-8(fp)
8112aa48:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
8112aa4c:	e0bffe17 	ldw	r2,-8(fp)
8112aa50:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
8112aa54:	e0bffe17 	ldw	r2,-8(fp)
8112aa58:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
8112aa5c:	e0bffe17 	ldw	r2,-8(fp)
8112aa60:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
8112aa64:	e0bffc17 	ldw	r2,-16(fp)
8112aa68:	1007883a 	mov	r3,r2
8112aa6c:	e0bffe17 	ldw	r2,-8(fp)
8112aa70:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
8112aa74:	e0bffe17 	ldw	r2,-8(fp)
8112aa78:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
8112aa7c:	e0fffc17 	ldw	r3,-16(fp)
8112aa80:	e0bffe17 	ldw	r2,-8(fp)
8112aa84:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
8112aa88:	e0bffe17 	ldw	r2,-8(fp)
8112aa8c:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
8112aa90:	e0bffe17 	ldw	r2,-8(fp)
8112aa94:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
8112aa98:	e0bff817 	ldw	r2,-32(fp)
8112aa9c:	10ffffcc 	andi	r3,r2,65535
8112aaa0:	e0bffe17 	ldw	r2,-8(fp)
8112aaa4:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
8112aaa8:	e0bff817 	ldw	r2,-32(fp)
8112aaac:	1004d43a 	srli	r2,r2,16
8112aab0:	1000010e 	bge	r2,zero,8112aab8 <create_file+0x15c>
8112aab4:	108003c4 	addi	r2,r2,15
8112aab8:	1005d13a 	srai	r2,r2,4
8112aabc:	1007883a 	mov	r3,r2
8112aac0:	e0bffe17 	ldw	r2,-8(fp)
8112aac4:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
8112aac8:	e0bff817 	ldw	r2,-32(fp)
8112aacc:	1004d43a 	srli	r2,r2,16
8112aad0:	1007883a 	mov	r3,r2
8112aad4:	00a00034 	movhi	r2,32768
8112aad8:	108003c4 	addi	r2,r2,15
8112aadc:	1884703a 	and	r2,r3,r2
8112aae0:	1000040e 	bge	r2,zero,8112aaf4 <create_file+0x198>
8112aae4:	10bfffc4 	addi	r2,r2,-1
8112aae8:	00fffc04 	movi	r3,-16
8112aaec:	10c4b03a 	or	r2,r2,r3
8112aaf0:	10800044 	addi	r2,r2,1
8112aaf4:	1004917a 	slli	r2,r2,5
8112aaf8:	1007883a 	mov	r3,r2
8112aafc:	e0bffe17 	ldw	r2,-8(fp)
8112ab00:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
8112ab04:	e0bfff17 	ldw	r2,-4(fp)
8112ab08:	1080058b 	ldhu	r2,22(r2)
8112ab0c:	10ffffcc 	andi	r3,r2,65535
8112ab10:	e0bffe17 	ldw	r2,-8(fp)
8112ab14:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
8112ab18:	e0bffe17 	ldw	r2,-8(fp)
8112ab1c:	00c00044 	movi	r3,1
8112ab20:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
8112ab24:	e0bffe17 	ldw	r2,-8(fp)
8112ab28:	00c00044 	movi	r3,1
8112ab2c:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
8112ab30:	e0bffe17 	ldw	r2,-8(fp)
8112ab34:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
8112ab38:	1000071e 	bne	r2,zero,8112ab58 <create_file+0x1fc>
8112ab3c:	00a04574 	movhi	r2,33045
8112ab40:	10972604 	addi	r2,r2,23704
8112ab44:	10c01317 	ldw	r3,76(r2)
8112ab48:	e0bffe17 	ldw	r2,-8(fp)
8112ab4c:	10800b17 	ldw	r2,44(r2)
8112ab50:	1885883a 	add	r2,r3,r2
8112ab54:	00000f06 	br	8112ab94 <create_file+0x238>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
8112ab58:	00a04574 	movhi	r2,33045
8112ab5c:	10972604 	addi	r2,r2,23704
8112ab60:	10c01417 	ldw	r3,80(r2)
8112ab64:	e0bffe17 	ldw	r2,-8(fp)
8112ab68:	10800a17 	ldw	r2,40(r2)
8112ab6c:	113fff84 	addi	r4,r2,-2
8112ab70:	00a04574 	movhi	r2,33045
8112ab74:	10972604 	addi	r2,r2,23704
8112ab78:	10800383 	ldbu	r2,14(r2)
8112ab7c:	10803fcc 	andi	r2,r2,255
8112ab80:	2085383a 	mul	r2,r4,r2
8112ab84:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
8112ab88:	e0bffe17 	ldw	r2,-8(fp)
8112ab8c:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
8112ab90:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
8112ab94:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
8112ab98:	e0bffb17 	ldw	r2,-20(fp)
8112ab9c:	d0e08617 	ldw	r3,-32232(gp)
8112aba0:	180b883a 	mov	r5,r3
8112aba4:	1009883a 	mov	r4,r2
8112aba8:	11281f80 	call	811281f8 <Read_Sector_Data>
8112abac:	10001726 	beq	r2,zero,8112ac0c <create_file+0x2b0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
8112abb0:	e0bffe17 	ldw	r2,-8(fp)
8112abb4:	10800c0b 	ldhu	r2,48(r2)
8112abb8:	10bfffcc 	andi	r2,r2,65535
8112abbc:	10a0001c 	xori	r2,r2,32768
8112abc0:	10a00004 	addi	r2,r2,-32768
8112abc4:	e17ffe17 	ldw	r5,-8(fp)
8112abc8:	1009883a 	mov	r4,r2
8112abcc:	11288840 	call	81128884 <Write_File_Record_At_Offset>
8112abd0:	10000e26 	beq	r2,zero,8112ac0c <create_file+0x2b0>
                {
                    Save_Modified_Sector();
8112abd4:	11281ac0 	call	811281ac <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
8112abd8:	e0bffc17 	ldw	r2,-16(fp)
8112abdc:	01800044 	movi	r6,1
8112abe0:	017fffc4 	movi	r5,-1
8112abe4:	1009883a 	mov	r4,r2
8112abe8:	11283840 	call	81128384 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
8112abec:	e0bffc17 	ldw	r2,-16(fp)
8112abf0:	000d883a 	mov	r6,zero
8112abf4:	017fffc4 	movi	r5,-1
8112abf8:	1009883a 	mov	r4,r2
8112abfc:	11283840 	call	81128384 <mark_cluster>
8112ac00:	10000226 	beq	r2,zero,8112ac0c <create_file+0x2b0>
                    {
                        result = true;
8112ac04:	00800044 	movi	r2,1
8112ac08:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
8112ac0c:	e0bff717 	ldw	r2,-36(fp)
}
8112ac10:	e037883a 	mov	sp,fp
8112ac14:	dfc00117 	ldw	ra,4(sp)
8112ac18:	df000017 	ldw	fp,0(sp)
8112ac1c:	dec00204 	addi	sp,sp,8
8112ac20:	f800283a 	ret

8112ac24 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
8112ac24:	defffb04 	addi	sp,sp,-20
8112ac28:	df000415 	stw	fp,16(sp)
8112ac2c:	df000404 	addi	fp,sp,16
8112ac30:	e13ffe15 	stw	r4,-8(fp)
8112ac34:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
8112ac38:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
8112ac3c:	e03ffc15 	stw	zero,-16(fp)
8112ac40:	00001506 	br	8112ac98 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
8112ac44:	e0fffe17 	ldw	r3,-8(fp)
8112ac48:	e0bffc17 	ldw	r2,-16(fp)
8112ac4c:	1885883a 	add	r2,r3,r2
8112ac50:	10800003 	ldbu	r2,0(r2)
8112ac54:	10803fcc 	andi	r2,r2,255
8112ac58:	10800820 	cmpeqi	r2,r2,32
8112ac5c:	10000b1e 	bne	r2,zero,8112ac8c <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
8112ac60:	e0bffd17 	ldw	r2,-12(fp)
8112ac64:	e0ffff17 	ldw	r3,-4(fp)
8112ac68:	1885883a 	add	r2,r3,r2
8112ac6c:	e13ffe17 	ldw	r4,-8(fp)
8112ac70:	e0fffc17 	ldw	r3,-16(fp)
8112ac74:	20c7883a 	add	r3,r4,r3
8112ac78:	18c00003 	ldbu	r3,0(r3)
8112ac7c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
8112ac80:	e0bffd17 	ldw	r2,-12(fp)
8112ac84:	10800044 	addi	r2,r2,1
8112ac88:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
8112ac8c:	e0bffc17 	ldw	r2,-16(fp)
8112ac90:	10800044 	addi	r2,r2,1
8112ac94:	e0bffc15 	stw	r2,-16(fp)
8112ac98:	e0bffc17 	ldw	r2,-16(fp)
8112ac9c:	10800210 	cmplti	r2,r2,8
8112aca0:	103fe81e 	bne	r2,zero,8112ac44 <__reset+0xfb10ac44>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
8112aca4:	e0bffe17 	ldw	r2,-8(fp)
8112aca8:	10800203 	ldbu	r2,8(r2)
8112acac:	10803fcc 	andi	r2,r2,255
8112acb0:	10800820 	cmpeqi	r2,r2,32
8112acb4:	1000241e 	bne	r2,zero,8112ad48 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
8112acb8:	e0bffd17 	ldw	r2,-12(fp)
8112acbc:	e0ffff17 	ldw	r3,-4(fp)
8112acc0:	1885883a 	add	r2,r3,r2
8112acc4:	00c00b84 	movi	r3,46
8112acc8:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
8112accc:	e0bffd17 	ldw	r2,-12(fp)
8112acd0:	10800044 	addi	r2,r2,1
8112acd4:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
8112acd8:	e03ffc15 	stw	zero,-16(fp)
8112acdc:	00001706 	br	8112ad3c <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
8112ace0:	e0fffe17 	ldw	r3,-8(fp)
8112ace4:	e0bffc17 	ldw	r2,-16(fp)
8112ace8:	1885883a 	add	r2,r3,r2
8112acec:	10800204 	addi	r2,r2,8
8112acf0:	10800003 	ldbu	r2,0(r2)
8112acf4:	10803fcc 	andi	r2,r2,255
8112acf8:	10800820 	cmpeqi	r2,r2,32
8112acfc:	10000c1e 	bne	r2,zero,8112ad30 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
8112ad00:	e0bffd17 	ldw	r2,-12(fp)
8112ad04:	e0ffff17 	ldw	r3,-4(fp)
8112ad08:	1885883a 	add	r2,r3,r2
8112ad0c:	e13ffe17 	ldw	r4,-8(fp)
8112ad10:	e0fffc17 	ldw	r3,-16(fp)
8112ad14:	20c7883a 	add	r3,r4,r3
8112ad18:	18c00204 	addi	r3,r3,8
8112ad1c:	18c00003 	ldbu	r3,0(r3)
8112ad20:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
8112ad24:	e0bffd17 	ldw	r2,-12(fp)
8112ad28:	10800044 	addi	r2,r2,1
8112ad2c:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
8112ad30:	e0bffc17 	ldw	r2,-16(fp)
8112ad34:	10800044 	addi	r2,r2,1
8112ad38:	e0bffc15 	stw	r2,-16(fp)
8112ad3c:	e0bffc17 	ldw	r2,-16(fp)
8112ad40:	108000d0 	cmplti	r2,r2,3
8112ad44:	103fe61e 	bne	r2,zero,8112ace0 <__reset+0xfb10ace0>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
8112ad48:	e0bffd17 	ldw	r2,-12(fp)
8112ad4c:	e0ffff17 	ldw	r3,-4(fp)
8112ad50:	1885883a 	add	r2,r3,r2
8112ad54:	10000005 	stb	zero,0(r2)
}
8112ad58:	0001883a 	nop
8112ad5c:	e037883a 	mov	sp,fp
8112ad60:	df000017 	ldw	fp,0(sp)
8112ad64:	dec00104 	addi	sp,sp,4
8112ad68:	f800283a 	ret

8112ad6c <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
8112ad6c:	defffc04 	addi	sp,sp,-16
8112ad70:	dfc00315 	stw	ra,12(sp)
8112ad74:	df000215 	stw	fp,8(sp)
8112ad78:	df000204 	addi	fp,sp,8
8112ad7c:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
8112ad80:	d1601204 	addi	r5,gp,-32696
8112ad84:	e13fff17 	ldw	r4,-4(fp)
8112ad88:	1130ee00 	call	81130ee0 <alt_find_dev>
8112ad8c:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
8112ad90:	e0bffe17 	ldw	r2,-8(fp)
8112ad94:	10001e26 	beq	r2,zero,8112ae10 <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
8112ad98:	e0bffe17 	ldw	r2,-8(fp)
8112ad9c:	10800a17 	ldw	r2,40(r2)
8112ada0:	10808d04 	addi	r2,r2,564
8112ada4:	d0a08015 	stw	r2,-32256(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
8112ada8:	e0bffe17 	ldw	r2,-8(fp)
8112adac:	10800a17 	ldw	r2,40(r2)
8112adb0:	10808904 	addi	r2,r2,548
8112adb4:	d0a08115 	stw	r2,-32252(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
8112adb8:	e0bffe17 	ldw	r2,-8(fp)
8112adbc:	10800a17 	ldw	r2,40(r2)
8112adc0:	10808404 	addi	r2,r2,528
8112adc4:	d0a08215 	stw	r2,-32248(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
8112adc8:	e0bffe17 	ldw	r2,-8(fp)
8112adcc:	10800a17 	ldw	r2,40(r2)
8112add0:	10808c04 	addi	r2,r2,560
8112add4:	d0a08315 	stw	r2,-32244(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
8112add8:	e0bffe17 	ldw	r2,-8(fp)
8112addc:	10800a17 	ldw	r2,40(r2)
8112ade0:	10808b04 	addi	r2,r2,556
8112ade4:	d0a08415 	stw	r2,-32240(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
8112ade8:	e0bffe17 	ldw	r2,-8(fp)
8112adec:	10800a17 	ldw	r2,40(r2)
8112adf0:	d0a08515 	stw	r2,-32236(gp)
		device_pointer = dev;
8112adf4:	e0bffe17 	ldw	r2,-8(fp)
8112adf8:	d0a08815 	stw	r2,-32224(gp)
		initialized = false;
8112adfc:	d0207e15 	stw	zero,-32264(gp)
		is_sd_card_formated_as_FAT16 = false;
8112ae00:	d0207f15 	stw	zero,-32260(gp)
		search_data.valid = false;
8112ae04:	00a04574 	movhi	r2,33045
8112ae08:	10972104 	addi	r2,r2,23684
8112ae0c:	10000415 	stw	zero,16(r2)
	}
	return dev;
8112ae10:	e0bffe17 	ldw	r2,-8(fp)
}
8112ae14:	e037883a 	mov	sp,fp
8112ae18:	dfc00117 	ldw	ra,4(sp)
8112ae1c:	df000017 	ldw	fp,0(sp)
8112ae20:	dec00204 	addi	sp,sp,8
8112ae24:	f800283a 	ret

8112ae28 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
8112ae28:	defffd04 	addi	sp,sp,-12
8112ae2c:	df000215 	stw	fp,8(sp)
8112ae30:	df000204 	addi	fp,sp,8
    bool result = false;
8112ae34:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
8112ae38:	d0a08817 	ldw	r2,-32224(gp)
8112ae3c:	10000826 	beq	r2,zero,8112ae60 <alt_up_sd_card_is_Present+0x38>
8112ae40:	d0a08017 	ldw	r2,-32256(gp)
8112ae44:	1080002b 	ldhuio	r2,0(r2)
8112ae48:	10bfffcc 	andi	r2,r2,65535
8112ae4c:	1080008c 	andi	r2,r2,2
8112ae50:	10000326 	beq	r2,zero,8112ae60 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
8112ae54:	00800044 	movi	r2,1
8112ae58:	e0bffe15 	stw	r2,-8(fp)
8112ae5c:	00001e06 	br	8112aed8 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
8112ae60:	d0a07e17 	ldw	r2,-32264(gp)
8112ae64:	10800058 	cmpnei	r2,r2,1
8112ae68:	10001b1e 	bne	r2,zero,8112aed8 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
8112ae6c:	d0207e15 	stw	zero,-32264(gp)
		search_data.valid = false;
8112ae70:	00a04574 	movhi	r2,33045
8112ae74:	10972104 	addi	r2,r2,23684
8112ae78:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
8112ae7c:	d0207f15 	stw	zero,-32260(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
8112ae80:	e03fff15 	stw	zero,-4(fp)
8112ae84:	00001106 	br	8112aecc <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
8112ae88:	00a04574 	movhi	r2,33045
8112ae8c:	10973b04 	addi	r2,r2,23788
8112ae90:	e0ffff17 	ldw	r3,-4(fp)
8112ae94:	180691ba 	slli	r3,r3,6
8112ae98:	10c5883a 	add	r2,r2,r3
8112ae9c:	10800f04 	addi	r2,r2,60
8112aea0:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
8112aea4:	00a04574 	movhi	r2,33045
8112aea8:	10973b04 	addi	r2,r2,23788
8112aeac:	e0ffff17 	ldw	r3,-4(fp)
8112aeb0:	180691ba 	slli	r3,r3,6
8112aeb4:	10c5883a 	add	r2,r2,r3
8112aeb8:	10800e04 	addi	r2,r2,56
8112aebc:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
8112aec0:	e0bfff17 	ldw	r2,-4(fp)
8112aec4:	10800044 	addi	r2,r2,1
8112aec8:	e0bfff15 	stw	r2,-4(fp)
8112aecc:	e0bfff17 	ldw	r2,-4(fp)
8112aed0:	10800510 	cmplti	r2,r2,20
8112aed4:	103fec1e 	bne	r2,zero,8112ae88 <__reset+0xfb10ae88>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
8112aed8:	e0bffe17 	ldw	r2,-8(fp)
}
8112aedc:	e037883a 	mov	sp,fp
8112aee0:	df000017 	ldw	fp,0(sp)
8112aee4:	dec00104 	addi	sp,sp,4
8112aee8:	f800283a 	ret

8112aeec <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
8112aeec:	defffd04 	addi	sp,sp,-12
8112aef0:	dfc00215 	stw	ra,8(sp)
8112aef4:	df000115 	stw	fp,4(sp)
8112aef8:	df000104 	addi	fp,sp,4
	bool result = false;
8112aefc:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
8112af00:	112ae280 	call	8112ae28 <alt_up_sd_card_is_Present>
8112af04:	10000c26 	beq	r2,zero,8112af38 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
8112af08:	d0a07e17 	ldw	r2,-32264(gp)
8112af0c:	1000071e 	bne	r2,zero,8112af2c <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
8112af10:	11291900 	call	81129190 <Look_for_FAT16>
8112af14:	d0a07f15 	stw	r2,-32260(gp)
			initialized = is_sd_card_formated_as_FAT16;
8112af18:	d0a07f17 	ldw	r2,-32260(gp)
8112af1c:	d0a07e15 	stw	r2,-32264(gp)
			search_data.valid = false;
8112af20:	00a04574 	movhi	r2,33045
8112af24:	10972104 	addi	r2,r2,23684
8112af28:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
8112af2c:	d0a07f17 	ldw	r2,-32260(gp)
8112af30:	e0bfff15 	stw	r2,-4(fp)
8112af34:	00000206 	br	8112af40 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
8112af38:	d0207e15 	stw	zero,-32264(gp)
		is_sd_card_formated_as_FAT16 = false;
8112af3c:	d0207f15 	stw	zero,-32260(gp)
	}

	return result;
8112af40:	e0bfff17 	ldw	r2,-4(fp)
}
8112af44:	e037883a 	mov	sp,fp
8112af48:	dfc00117 	ldw	ra,4(sp)
8112af4c:	df000017 	ldw	fp,0(sp)
8112af50:	dec00204 	addi	sp,sp,8
8112af54:	f800283a 	ret

8112af58 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
8112af58:	deffea04 	addi	sp,sp,-88
8112af5c:	dfc01515 	stw	ra,84(sp)
8112af60:	df001415 	stw	fp,80(sp)
8112af64:	df001404 	addi	fp,sp,80
8112af68:	e13ffe15 	stw	r4,-8(fp)
8112af6c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
8112af70:	00800084 	movi	r2,2
8112af74:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112af78:	112ae280 	call	8112ae28 <alt_up_sd_card_is_Present>
8112af7c:	10002426 	beq	r2,zero,8112b010 <alt_up_sd_card_find_first+0xb8>
8112af80:	d0a07f17 	ldw	r2,-32260(gp)
8112af84:	10002226 	beq	r2,zero,8112b010 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
8112af88:	e0ffee04 	addi	r3,fp,-72
8112af8c:	e0bfed04 	addi	r2,fp,-76
8112af90:	180d883a 	mov	r6,r3
8112af94:	100b883a 	mov	r5,r2
8112af98:	e13ffe17 	ldw	r4,-8(fp)
8112af9c:	11299000 	call	81129900 <get_home_directory_cluster_for_file>
8112afa0:	10001926 	beq	r2,zero,8112b008 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
8112afa4:	e0bfed17 	ldw	r2,-76(fp)
8112afa8:	1007883a 	mov	r3,r2
8112afac:	00a04574 	movhi	r2,33045
8112afb0:	10972104 	addi	r2,r2,23684
8112afb4:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
8112afb8:	e0bfed17 	ldw	r2,-76(fp)
8112afbc:	1007883a 	mov	r3,r2
8112afc0:	00a04574 	movhi	r2,33045
8112afc4:	10972104 	addi	r2,r2,23684
8112afc8:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
8112afcc:	00a04574 	movhi	r2,33045
8112afd0:	10972104 	addi	r2,r2,23684
8112afd4:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
8112afd8:	00a04574 	movhi	r2,33045
8112afdc:	10972104 	addi	r2,r2,23684
8112afe0:	00ffffc4 	movi	r3,-1
8112afe4:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
8112afe8:	00a04574 	movhi	r2,33045
8112afec:	10972104 	addi	r2,r2,23684
8112aff0:	00c00044 	movi	r3,1
8112aff4:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
8112aff8:	e13fff17 	ldw	r4,-4(fp)
8112affc:	112b0280 	call	8112b028 <alt_up_sd_card_find_next>
8112b000:	e0bfec0d 	sth	r2,-80(fp)
8112b004:	00000206 	br	8112b010 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
8112b008:	00800044 	movi	r2,1
8112b00c:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
8112b010:	e0bfec0b 	ldhu	r2,-80(fp)
}
8112b014:	e037883a 	mov	sp,fp
8112b018:	dfc00117 	ldw	ra,4(sp)
8112b01c:	df000017 	ldw	fp,0(sp)
8112b020:	dec00204 	addi	sp,sp,8
8112b024:	f800283a 	ret

8112b028 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
8112b028:	deffe404 	addi	sp,sp,-112
8112b02c:	dfc01b15 	stw	ra,108(sp)
8112b030:	df001a15 	stw	fp,104(sp)
8112b034:	df001a04 	addi	fp,sp,104
8112b038:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
8112b03c:	00800084 	movi	r2,2
8112b040:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112b044:	112ae280 	call	8112ae28 <alt_up_sd_card_is_Present>
8112b048:	1000df26 	beq	r2,zero,8112b3c8 <alt_up_sd_card_find_next+0x3a0>
8112b04c:	d0a07f17 	ldw	r2,-32260(gp)
8112b050:	1000dd26 	beq	r2,zero,8112b3c8 <alt_up_sd_card_find_next+0x3a0>
	{
		if (search_data.valid)
8112b054:	00a04574 	movhi	r2,33045
8112b058:	10972104 	addi	r2,r2,23684
8112b05c:	10800417 	ldw	r2,16(r2)
8112b060:	1000d726 	beq	r2,zero,8112b3c0 <alt_up_sd_card_find_next+0x398>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
8112b064:	00a04574 	movhi	r2,33045
8112b068:	10972104 	addi	r2,r2,23684
8112b06c:	10800117 	ldw	r2,4(r2)
8112b070:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
8112b074:	e0bfe717 	ldw	r2,-100(fp)
8112b078:	1000561e 	bne	r2,zero,8112b1d4 <alt_up_sd_card_find_next+0x1ac>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
8112b07c:	00a04574 	movhi	r2,33045
8112b080:	10972604 	addi	r2,r2,23704
8112b084:	1080050b 	ldhu	r2,20(r2)
8112b088:	10bfffcc 	andi	r2,r2,65535
8112b08c:	1006917a 	slli	r3,r2,5
8112b090:	00a04574 	movhi	r2,33045
8112b094:	10972604 	addi	r2,r2,23704
8112b098:	1080030b 	ldhu	r2,12(r2)
8112b09c:	10bfffcc 	andi	r2,r2,65535
8112b0a0:	1885283a 	div	r2,r3,r2
8112b0a4:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
8112b0a8:	00a04574 	movhi	r2,33045
8112b0ac:	10972104 	addi	r2,r2,23684
8112b0b0:	10800217 	ldw	r2,8(r2)
8112b0b4:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
8112b0b8:	00a04574 	movhi	r2,33045
8112b0bc:	10972104 	addi	r2,r2,23684
8112b0c0:	1080030b 	ldhu	r2,12(r2)
8112b0c4:	10bfffcc 	andi	r2,r2,65535
8112b0c8:	10a0001c 	xori	r2,r2,32768
8112b0cc:	10a00004 	addi	r2,r2,-32768
8112b0d0:	10800044 	addi	r2,r2,1
8112b0d4:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
8112b0d8:	00003606 	br	8112b1b4 <alt_up_sd_card_find_next+0x18c>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
8112b0dc:	00a04574 	movhi	r2,33045
8112b0e0:	10972604 	addi	r2,r2,23704
8112b0e4:	10c01317 	ldw	r3,76(r2)
8112b0e8:	e0bfe817 	ldw	r2,-96(fp)
8112b0ec:	1885883a 	add	r2,r3,r2
8112b0f0:	1007883a 	mov	r3,r2
8112b0f4:	d0a08617 	ldw	r2,-32232(gp)
8112b0f8:	100b883a 	mov	r5,r2
8112b0fc:	1809883a 	mov	r4,r3
8112b100:	11281f80 	call	811281f8 <Read_Sector_Data>
8112b104:	10002f26 	beq	r2,zero,8112b1c4 <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
8112b108:	00002306 	br	8112b198 <alt_up_sd_card_find_next+0x170>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
8112b10c:	e0bfe917 	ldw	r2,-92(fp)
8112b110:	1004917a 	slli	r2,r2,5
8112b114:	e13fe817 	ldw	r4,-96(fp)
8112b118:	e0ffef04 	addi	r3,fp,-68
8112b11c:	200f883a 	mov	r7,r4
8112b120:	000d883a 	mov	r6,zero
8112b124:	180b883a 	mov	r5,r3
8112b128:	1009883a 	mov	r4,r2
8112b12c:	11286080 	call	81128608 <Read_File_Record_At_Offset>
8112b130:	10001626 	beq	r2,zero,8112b18c <alt_up_sd_card_find_next+0x164>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
8112b134:	e0bfef03 	ldbu	r2,-68(fp)
8112b138:	10803fcc 	andi	r2,r2,255
8112b13c:	10001326 	beq	r2,zero,8112b18c <alt_up_sd_card_find_next+0x164>
8112b140:	e0bfef03 	ldbu	r2,-68(fp)
8112b144:	10803fcc 	andi	r2,r2,255
8112b148:	10803960 	cmpeqi	r2,r2,229
8112b14c:	10000f1e 	bne	r2,zero,8112b18c <alt_up_sd_card_find_next+0x164>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
8112b150:	e0bfe917 	ldw	r2,-92(fp)
8112b154:	1007883a 	mov	r3,r2
8112b158:	00a04574 	movhi	r2,33045
8112b15c:	10972104 	addi	r2,r2,23684
8112b160:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
8112b164:	e0ffe817 	ldw	r3,-96(fp)
8112b168:	00a04574 	movhi	r2,33045
8112b16c:	10972104 	addi	r2,r2,23684
8112b170:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
8112b174:	e0bfef04 	addi	r2,fp,-68
8112b178:	e17fff17 	ldw	r5,-4(fp)
8112b17c:	1009883a 	mov	r4,r2
8112b180:	112ac240 	call	8112ac24 <copy_file_record_name_to_string>
									return 0;
8112b184:	0005883a 	mov	r2,zero
8112b188:	00009006 	br	8112b3cc <alt_up_sd_card_find_next+0x3a4>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
8112b18c:	e0bfe917 	ldw	r2,-92(fp)
8112b190:	10800044 	addi	r2,r2,1
8112b194:	e0bfe915 	stw	r2,-92(fp)
8112b198:	e0bfe917 	ldw	r2,-92(fp)
8112b19c:	10800410 	cmplti	r2,r2,16
8112b1a0:	103fda1e 	bne	r2,zero,8112b10c <__reset+0xfb10b10c>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
8112b1a4:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
8112b1a8:	e0bfe817 	ldw	r2,-96(fp)
8112b1ac:	10800044 	addi	r2,r2,1
8112b1b0:	e0bfe815 	stw	r2,-96(fp)
8112b1b4:	e0ffe817 	ldw	r3,-96(fp)
8112b1b8:	e0bfec17 	ldw	r2,-80(fp)
8112b1bc:	18bfc716 	blt	r3,r2,8112b0dc <__reset+0xfb10b0dc>
8112b1c0:	00000106 	br	8112b1c8 <alt_up_sd_card_find_next+0x1a0>
						}
						file_counter = 0;
					}
					else
					{
						break;
8112b1c4:	0001883a 	nop
					}
				}
				result = -1;
8112b1c8:	00bfffc4 	movi	r2,-1
8112b1cc:	e0bfe60d 	sth	r2,-104(fp)
8112b1d0:	00007d06 	br	8112b3c8 <alt_up_sd_card_find_next+0x3a0>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
8112b1d4:	00a04574 	movhi	r2,33045
8112b1d8:	10972104 	addi	r2,r2,23684
8112b1dc:	1080030b 	ldhu	r2,12(r2)
8112b1e0:	10bfffcc 	andi	r2,r2,65535
8112b1e4:	10a0001c 	xori	r2,r2,32768
8112b1e8:	10a00004 	addi	r2,r2,-32768
8112b1ec:	10800044 	addi	r2,r2,1
8112b1f0:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8112b1f4:	e0bfe717 	ldw	r2,-100(fp)
8112b1f8:	10ffff84 	addi	r3,r2,-2
8112b1fc:	00a04574 	movhi	r2,33045
8112b200:	10972604 	addi	r2,r2,23704
8112b204:	10800383 	ldbu	r2,14(r2)
8112b208:	10803fcc 	andi	r2,r2,255
8112b20c:	1885383a 	mul	r2,r3,r2
8112b210:	1007883a 	mov	r3,r2
8112b214:	00a04574 	movhi	r2,33045
8112b218:	10972604 	addi	r2,r2,23704
8112b21c:	10801417 	ldw	r2,80(r2)
8112b220:	1885883a 	add	r2,r3,r2
8112b224:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
8112b228:	00a04574 	movhi	r2,33045
8112b22c:	10972104 	addi	r2,r2,23684
8112b230:	10800217 	ldw	r2,8(r2)
8112b234:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112b238:	00003806 	br	8112b31c <alt_up_sd_card_find_next+0x2f4>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
8112b23c:	e0ffeb17 	ldw	r3,-84(fp)
8112b240:	e0bfed17 	ldw	r2,-76(fp)
8112b244:	1885883a 	add	r2,r3,r2
8112b248:	d0e08617 	ldw	r3,-32232(gp)
8112b24c:	180b883a 	mov	r5,r3
8112b250:	1009883a 	mov	r4,r2
8112b254:	11281f80 	call	811281f8 <Read_Sector_Data>
8112b258:	10003726 	beq	r2,zero,8112b338 <alt_up_sd_card_find_next+0x310>
						{        
							for (; file_counter < 16; file_counter++)
8112b25c:	00002806 	br	8112b300 <alt_up_sd_card_find_next+0x2d8>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
8112b260:	e0bfea17 	ldw	r2,-88(fp)
8112b264:	1004917a 	slli	r2,r2,5
8112b268:	e13fe717 	ldw	r4,-100(fp)
8112b26c:	e17feb17 	ldw	r5,-84(fp)
8112b270:	e0ffef04 	addi	r3,fp,-68
8112b274:	280f883a 	mov	r7,r5
8112b278:	200d883a 	mov	r6,r4
8112b27c:	180b883a 	mov	r5,r3
8112b280:	1009883a 	mov	r4,r2
8112b284:	11286080 	call	81128608 <Read_File_Record_At_Offset>
8112b288:	10001a26 	beq	r2,zero,8112b2f4 <alt_up_sd_card_find_next+0x2cc>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
8112b28c:	e0bfef03 	ldbu	r2,-68(fp)
8112b290:	10803fcc 	andi	r2,r2,255
8112b294:	10001726 	beq	r2,zero,8112b2f4 <alt_up_sd_card_find_next+0x2cc>
8112b298:	e0bfef03 	ldbu	r2,-68(fp)
8112b29c:	10803fcc 	andi	r2,r2,255
8112b2a0:	10803960 	cmpeqi	r2,r2,229
8112b2a4:	1000131e 	bne	r2,zero,8112b2f4 <alt_up_sd_card_find_next+0x2cc>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
8112b2a8:	e0ffe717 	ldw	r3,-100(fp)
8112b2ac:	00a04574 	movhi	r2,33045
8112b2b0:	10972104 	addi	r2,r2,23684
8112b2b4:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
8112b2b8:	e0bfea17 	ldw	r2,-88(fp)
8112b2bc:	1007883a 	mov	r3,r2
8112b2c0:	00a04574 	movhi	r2,33045
8112b2c4:	10972104 	addi	r2,r2,23684
8112b2c8:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
8112b2cc:	e0ffeb17 	ldw	r3,-84(fp)
8112b2d0:	00a04574 	movhi	r2,33045
8112b2d4:	10972104 	addi	r2,r2,23684
8112b2d8:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
8112b2dc:	e0bfef04 	addi	r2,fp,-68
8112b2e0:	e17fff17 	ldw	r5,-4(fp)
8112b2e4:	1009883a 	mov	r4,r2
8112b2e8:	112ac240 	call	8112ac24 <copy_file_record_name_to_string>
										return 0;
8112b2ec:	0005883a 	mov	r2,zero
8112b2f0:	00003606 	br	8112b3cc <alt_up_sd_card_find_next+0x3a4>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
8112b2f4:	e0bfea17 	ldw	r2,-88(fp)
8112b2f8:	10800044 	addi	r2,r2,1
8112b2fc:	e0bfea15 	stw	r2,-88(fp)
8112b300:	e0bfea17 	ldw	r2,-88(fp)
8112b304:	10800410 	cmplti	r2,r2,16
8112b308:	103fd51e 	bne	r2,zero,8112b260 <__reset+0xfb10b260>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
8112b30c:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112b310:	e0bfeb17 	ldw	r2,-84(fp)
8112b314:	10800044 	addi	r2,r2,1
8112b318:	e0bfeb15 	stw	r2,-84(fp)
8112b31c:	00a04574 	movhi	r2,33045
8112b320:	10972604 	addi	r2,r2,23704
8112b324:	10800383 	ldbu	r2,14(r2)
8112b328:	10803fcc 	andi	r2,r2,255
8112b32c:	e0ffeb17 	ldw	r3,-84(fp)
8112b330:	18bfc216 	blt	r3,r2,8112b23c <__reset+0xfb10b23c>
8112b334:	00000106 	br	8112b33c <alt_up_sd_card_find_next+0x314>
							}
							file_counter = 0;
						}
						else
						{
							break;
8112b338:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
8112b33c:	00a04574 	movhi	r2,33045
8112b340:	10972604 	addi	r2,r2,23704
8112b344:	10800383 	ldbu	r2,14(r2)
8112b348:	10803fcc 	andi	r2,r2,255
8112b34c:	e0ffeb17 	ldw	r3,-84(fp)
8112b350:	18801716 	blt	r3,r2,8112b3b0 <alt_up_sd_card_find_next+0x388>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
8112b354:	e0bfe717 	ldw	r2,-100(fp)
8112b358:	e0ffee04 	addi	r3,fp,-72
8112b35c:	180b883a 	mov	r5,r3
8112b360:	1009883a 	mov	r4,r2
8112b364:	11282d00 	call	811282d0 <get_cluster_flag>
8112b368:	10000f26 	beq	r2,zero,8112b3a8 <alt_up_sd_card_find_next+0x380>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
8112b36c:	e0bfee0b 	ldhu	r2,-72(fp)
8112b370:	10bfffcc 	andi	r2,r2,65535
8112b374:	10fffe0c 	andi	r3,r2,65528
8112b378:	00bffe14 	movui	r2,65528
8112b37c:	1880051e 	bne	r3,r2,8112b394 <alt_up_sd_card_find_next+0x36c>
							{
								result = -1;
8112b380:	00bfffc4 	movi	r2,-1
8112b384:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
8112b388:	00a04574 	movhi	r2,33045
8112b38c:	10972104 	addi	r2,r2,23684
8112b390:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
8112b394:	e0bfee0b 	ldhu	r2,-72(fp)
8112b398:	10bfffcc 	andi	r2,r2,65535
8112b39c:	10bffe0c 	andi	r2,r2,65528
8112b3a0:	e0bfe715 	stw	r2,-100(fp)
8112b3a4:	00000206 	br	8112b3b0 <alt_up_sd_card_find_next+0x388>
						}
						else
						{
							// Error encountered.                 
							result = -1;
8112b3a8:	00bfffc4 	movi	r2,-1
8112b3ac:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
8112b3b0:	e0bfe717 	ldw	r2,-100(fp)
8112b3b4:	00fffdd4 	movui	r3,65527
8112b3b8:	18bf8e0e 	bge	r3,r2,8112b1f4 <__reset+0xfb10b1f4>
8112b3bc:	00000206 	br	8112b3c8 <alt_up_sd_card_find_next+0x3a0>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
8112b3c0:	008000c4 	movi	r2,3
8112b3c4:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
8112b3c8:	e0bfe60b 	ldhu	r2,-104(fp)
}
8112b3cc:	e037883a 	mov	sp,fp
8112b3d0:	dfc00117 	ldw	ra,4(sp)
8112b3d4:	df000017 	ldw	fp,0(sp)
8112b3d8:	dec00204 	addi	sp,sp,8
8112b3dc:	f800283a 	ret

8112b3e0 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
8112b3e0:	deffe904 	addi	sp,sp,-92
8112b3e4:	dfc01615 	stw	ra,88(sp)
8112b3e8:	df001515 	stw	fp,84(sp)
8112b3ec:	df001504 	addi	fp,sp,84
8112b3f0:	e13ffe15 	stw	r4,-8(fp)
8112b3f4:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
8112b3f8:	00bfffc4 	movi	r2,-1
8112b3fc:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112b400:	112ae280 	call	8112ae28 <alt_up_sd_card_is_Present>
8112b404:	1000cf26 	beq	r2,zero,8112b744 <alt_up_sd_card_fopen+0x364>
8112b408:	d0a07f17 	ldw	r2,-32260(gp)
8112b40c:	1000cd26 	beq	r2,zero,8112b744 <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
8112b410:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
8112b414:	e13ffe17 	ldw	r4,-8(fp)
8112b418:	112927c0 	call	8112927c <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
8112b41c:	e13ffe17 	ldw	r4,-8(fp)
8112b420:	11293400 	call	81129340 <check_file_name_for_FAT16_compliance>
8112b424:	1000c726 	beq	r2,zero,8112b744 <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
8112b428:	e0ffee04 	addi	r3,fp,-72
8112b42c:	e0bfed04 	addi	r2,fp,-76
8112b430:	180d883a 	mov	r6,r3
8112b434:	100b883a 	mov	r5,r2
8112b438:	e13ffe17 	ldw	r4,-8(fp)
8112b43c:	11299000 	call	81129900 <get_home_directory_cluster_for_file>
8112b440:	1000021e 	bne	r2,zero,8112b44c <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
8112b444:	e0bfeb0b 	ldhu	r2,-84(fp)
8112b448:	0000bf06 	br	8112b748 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
8112b44c:	e03fec15 	stw	zero,-80(fp)
8112b450:	00000e06 	br	8112b48c <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
8112b454:	00a04574 	movhi	r2,33045
8112b458:	10973b04 	addi	r2,r2,23788
8112b45c:	e0ffec17 	ldw	r3,-80(fp)
8112b460:	180691ba 	slli	r3,r3,6
8112b464:	10c5883a 	add	r2,r2,r3
8112b468:	10800f04 	addi	r2,r2,60
8112b46c:	10800017 	ldw	r2,0(r2)
8112b470:	1000031e 	bne	r2,zero,8112b480 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
8112b474:	e0bfec17 	ldw	r2,-80(fp)
8112b478:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
8112b47c:	00000606 	br	8112b498 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
8112b480:	e0bfec17 	ldw	r2,-80(fp)
8112b484:	10800044 	addi	r2,r2,1
8112b488:	e0bfec15 	stw	r2,-80(fp)
8112b48c:	e0bfec17 	ldw	r2,-80(fp)
8112b490:	10800510 	cmplti	r2,r2,20
8112b494:	103fef1e 	bne	r2,zero,8112b454 <__reset+0xfb10b454>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
8112b498:	e0bfeb0f 	ldh	r2,-84(fp)
8112b49c:	1000a916 	blt	r2,zero,8112b744 <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
8112b4a0:	e0bfed17 	ldw	r2,-76(fp)
8112b4a4:	1009883a 	mov	r4,r2
8112b4a8:	e0bfeb0f 	ldh	r2,-84(fp)
8112b4ac:	100691ba 	slli	r3,r2,6
8112b4b0:	00a04574 	movhi	r2,33045
8112b4b4:	10973b04 	addi	r2,r2,23788
8112b4b8:	1885883a 	add	r2,r3,r2
8112b4bc:	100d883a 	mov	r6,r2
8112b4c0:	e17ffe17 	ldw	r5,-8(fp)
8112b4c4:	1129e380 	call	81129e38 <find_file_in_directory>
8112b4c8:	10007b26 	beq	r2,zero,8112b6b8 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
8112b4cc:	e0bfff17 	ldw	r2,-4(fp)
8112b4d0:	10000226 	beq	r2,zero,8112b4dc <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
8112b4d4:	00bfffc4 	movi	r2,-1
8112b4d8:	00009b06 	br	8112b748 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
8112b4dc:	e13feb0f 	ldh	r4,-84(fp)
8112b4e0:	e0ffeb0f 	ldh	r3,-84(fp)
8112b4e4:	00a04574 	movhi	r2,33045
8112b4e8:	10973b04 	addi	r2,r2,23788
8112b4ec:	180691ba 	slli	r3,r3,6
8112b4f0:	10c5883a 	add	r2,r2,r3
8112b4f4:	10800584 	addi	r2,r2,22
8112b4f8:	1080000b 	ldhu	r2,0(r2)
8112b4fc:	10ffffcc 	andi	r3,r2,65535
8112b500:	00a04574 	movhi	r2,33045
8112b504:	10973b04 	addi	r2,r2,23788
8112b508:	200891ba 	slli	r4,r4,6
8112b50c:	1105883a 	add	r2,r2,r4
8112b510:	10800704 	addi	r2,r2,28
8112b514:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
8112b518:	e0ffeb0f 	ldh	r3,-84(fp)
8112b51c:	00a04574 	movhi	r2,33045
8112b520:	10973b04 	addi	r2,r2,23788
8112b524:	180691ba 	slli	r3,r3,6
8112b528:	10c5883a 	add	r2,r2,r3
8112b52c:	10800804 	addi	r2,r2,32
8112b530:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
8112b534:	e0ffeb0f 	ldh	r3,-84(fp)
8112b538:	00a04574 	movhi	r2,33045
8112b53c:	10973b04 	addi	r2,r2,23788
8112b540:	180691ba 	slli	r3,r3,6
8112b544:	10c5883a 	add	r2,r2,r3
8112b548:	10800904 	addi	r2,r2,36
8112b54c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
8112b550:	e0ffeb0f 	ldh	r3,-84(fp)
8112b554:	00a04574 	movhi	r2,33045
8112b558:	10973b04 	addi	r2,r2,23788
8112b55c:	180691ba 	slli	r3,r3,6
8112b560:	10c5883a 	add	r2,r2,r3
8112b564:	10800f04 	addi	r2,r2,60
8112b568:	00c00044 	movi	r3,1
8112b56c:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
8112b570:	e0ffeb0f 	ldh	r3,-84(fp)
8112b574:	00a04574 	movhi	r2,33045
8112b578:	10973b04 	addi	r2,r2,23788
8112b57c:	180691ba 	slli	r3,r3,6
8112b580:	10c5883a 	add	r2,r2,r3
8112b584:	10800e04 	addi	r2,r2,56
8112b588:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
8112b58c:	e03fec15 	stw	zero,-80(fp)
8112b590:	00004506 	br	8112b6a8 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
8112b594:	e0ffeb0f 	ldh	r3,-84(fp)
8112b598:	e0bfec17 	ldw	r2,-80(fp)
8112b59c:	18803f26 	beq	r3,r2,8112b69c <alt_up_sd_card_fopen+0x2bc>
8112b5a0:	00a04574 	movhi	r2,33045
8112b5a4:	10973b04 	addi	r2,r2,23788
8112b5a8:	e0ffec17 	ldw	r3,-80(fp)
8112b5ac:	180691ba 	slli	r3,r3,6
8112b5b0:	10c5883a 	add	r2,r2,r3
8112b5b4:	10800f04 	addi	r2,r2,60
8112b5b8:	10800017 	ldw	r2,0(r2)
8112b5bc:	10800058 	cmpnei	r2,r2,1
8112b5c0:	1000361e 	bne	r2,zero,8112b69c <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
8112b5c4:	e0ffeb0f 	ldh	r3,-84(fp)
8112b5c8:	00a04574 	movhi	r2,33045
8112b5cc:	10973b04 	addi	r2,r2,23788
8112b5d0:	180691ba 	slli	r3,r3,6
8112b5d4:	10c5883a 	add	r2,r2,r3
8112b5d8:	10800a04 	addi	r2,r2,40
8112b5dc:	10c00017 	ldw	r3,0(r2)
8112b5e0:	00a04574 	movhi	r2,33045
8112b5e4:	10973b04 	addi	r2,r2,23788
8112b5e8:	e13fec17 	ldw	r4,-80(fp)
8112b5ec:	200891ba 	slli	r4,r4,6
8112b5f0:	1105883a 	add	r2,r2,r4
8112b5f4:	10800a04 	addi	r2,r2,40
8112b5f8:	10800017 	ldw	r2,0(r2)
8112b5fc:	1880271e 	bne	r3,r2,8112b69c <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
8112b600:	e0ffeb0f 	ldh	r3,-84(fp)
8112b604:	00a04574 	movhi	r2,33045
8112b608:	10973b04 	addi	r2,r2,23788
8112b60c:	180691ba 	slli	r3,r3,6
8112b610:	10c5883a 	add	r2,r2,r3
8112b614:	10800b04 	addi	r2,r2,44
8112b618:	10c00017 	ldw	r3,0(r2)
8112b61c:	00a04574 	movhi	r2,33045
8112b620:	10973b04 	addi	r2,r2,23788
8112b624:	e13fec17 	ldw	r4,-80(fp)
8112b628:	200891ba 	slli	r4,r4,6
8112b62c:	1105883a 	add	r2,r2,r4
8112b630:	10800b04 	addi	r2,r2,44
8112b634:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
8112b638:	1880181e 	bne	r3,r2,8112b69c <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
8112b63c:	e0ffeb0f 	ldh	r3,-84(fp)
8112b640:	00a04574 	movhi	r2,33045
8112b644:	10973b04 	addi	r2,r2,23788
8112b648:	180691ba 	slli	r3,r3,6
8112b64c:	10c5883a 	add	r2,r2,r3
8112b650:	10800c04 	addi	r2,r2,48
8112b654:	1100000b 	ldhu	r4,0(r2)
8112b658:	00a04574 	movhi	r2,33045
8112b65c:	10973b04 	addi	r2,r2,23788
8112b660:	e0ffec17 	ldw	r3,-80(fp)
8112b664:	180691ba 	slli	r3,r3,6
8112b668:	10c5883a 	add	r2,r2,r3
8112b66c:	10800c04 	addi	r2,r2,48
8112b670:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
8112b674:	20ffffcc 	andi	r3,r4,65535
8112b678:	18e0001c 	xori	r3,r3,32768
8112b67c:	18e00004 	addi	r3,r3,-32768
8112b680:	10bfffcc 	andi	r2,r2,65535
8112b684:	10a0001c 	xori	r2,r2,32768
8112b688:	10a00004 	addi	r2,r2,-32768
8112b68c:	1880031e 	bne	r3,r2,8112b69c <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
8112b690:	00bfff84 	movi	r2,-2
8112b694:	e0bfeb0d 	sth	r2,-84(fp)
								break;
8112b698:	00002a06 	br	8112b744 <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
8112b69c:	e0bfec17 	ldw	r2,-80(fp)
8112b6a0:	10800044 	addi	r2,r2,1
8112b6a4:	e0bfec15 	stw	r2,-80(fp)
8112b6a8:	e0bfec17 	ldw	r2,-80(fp)
8112b6ac:	10800510 	cmplti	r2,r2,20
8112b6b0:	103fb81e 	bne	r2,zero,8112b594 <__reset+0xfb10b594>
8112b6b4:	00002306 	br	8112b744 <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
8112b6b8:	e0bfff17 	ldw	r2,-4(fp)
8112b6bc:	10001f26 	beq	r2,zero,8112b73c <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
8112b6c0:	e0bfeb0f 	ldh	r2,-84(fp)
8112b6c4:	100691ba 	slli	r3,r2,6
8112b6c8:	00a04574 	movhi	r2,33045
8112b6cc:	10973b04 	addi	r2,r2,23788
8112b6d0:	1885883a 	add	r2,r3,r2
8112b6d4:	e0ffee04 	addi	r3,fp,-72
8112b6d8:	180d883a 	mov	r6,r3
8112b6dc:	100b883a 	mov	r5,r2
8112b6e0:	e13ffe17 	ldw	r4,-8(fp)
8112b6e4:	112a95c0 	call	8112a95c <create_file>
8112b6e8:	10001126 	beq	r2,zero,8112b730 <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
8112b6ec:	e0ffeb0f 	ldh	r3,-84(fp)
8112b6f0:	00a04574 	movhi	r2,33045
8112b6f4:	10973b04 	addi	r2,r2,23788
8112b6f8:	180691ba 	slli	r3,r3,6
8112b6fc:	10c5883a 	add	r2,r2,r3
8112b700:	10800f04 	addi	r2,r2,60
8112b704:	00c00044 	movi	r3,1
8112b708:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
8112b70c:	e0ffeb0f 	ldh	r3,-84(fp)
8112b710:	00a04574 	movhi	r2,33045
8112b714:	10973b04 	addi	r2,r2,23788
8112b718:	180691ba 	slli	r3,r3,6
8112b71c:	10c5883a 	add	r2,r2,r3
8112b720:	10800e04 	addi	r2,r2,56
8112b724:	00c00044 	movi	r3,1
8112b728:	10c00015 	stw	r3,0(r2)
8112b72c:	00000506 	br	8112b744 <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
8112b730:	00bfffc4 	movi	r2,-1
8112b734:	e0bfeb0d 	sth	r2,-84(fp)
8112b738:	00000206 	br	8112b744 <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
8112b73c:	00bfffc4 	movi	r2,-1
8112b740:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
8112b744:	e0bfeb0b 	ldhu	r2,-84(fp)
}
8112b748:	e037883a 	mov	sp,fp
8112b74c:	dfc00117 	ldw	ra,4(sp)
8112b750:	df000017 	ldw	fp,0(sp)
8112b754:	dec00204 	addi	sp,sp,8
8112b758:	f800283a 	ret

8112b75c <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
8112b75c:	defffd04 	addi	sp,sp,-12
8112b760:	df000215 	stw	fp,8(sp)
8112b764:	df000204 	addi	fp,sp,8
8112b768:	2007883a 	mov	r3,r4
8112b76c:	2805883a 	mov	r2,r5
8112b770:	e0fffe0d 	sth	r3,-8(fp)
8112b774:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
8112b778:	e0bffe0f 	ldh	r2,-8(fp)
8112b77c:	10001416 	blt	r2,zero,8112b7d0 <alt_up_sd_card_set_attributes+0x74>
8112b780:	e0bffe0f 	ldh	r2,-8(fp)
8112b784:	10800508 	cmpgei	r2,r2,20
8112b788:	1000111e 	bne	r2,zero,8112b7d0 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
8112b78c:	e0fffe0f 	ldh	r3,-8(fp)
8112b790:	00a04574 	movhi	r2,33045
8112b794:	10973b04 	addi	r2,r2,23788
8112b798:	180691ba 	slli	r3,r3,6
8112b79c:	10c5883a 	add	r2,r2,r3
8112b7a0:	10800f04 	addi	r2,r2,60
8112b7a4:	10800017 	ldw	r2,0(r2)
8112b7a8:	10000926 	beq	r2,zero,8112b7d0 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
8112b7ac:	e0fffe0f 	ldh	r3,-8(fp)
8112b7b0:	e0bfff0b 	ldhu	r2,-4(fp)
8112b7b4:	1009883a 	mov	r4,r2
8112b7b8:	00a04574 	movhi	r2,33045
8112b7bc:	10973b04 	addi	r2,r2,23788
8112b7c0:	180691ba 	slli	r3,r3,6
8112b7c4:	10c5883a 	add	r2,r2,r3
8112b7c8:	108002c4 	addi	r2,r2,11
8112b7cc:	11000005 	stb	r4,0(r2)
        }
    }
}
8112b7d0:	0001883a 	nop
8112b7d4:	e037883a 	mov	sp,fp
8112b7d8:	df000017 	ldw	fp,0(sp)
8112b7dc:	dec00104 	addi	sp,sp,4
8112b7e0:	f800283a 	ret

8112b7e4 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
8112b7e4:	defffd04 	addi	sp,sp,-12
8112b7e8:	df000215 	stw	fp,8(sp)
8112b7ec:	df000204 	addi	fp,sp,8
8112b7f0:	2005883a 	mov	r2,r4
8112b7f4:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
8112b7f8:	00bfffc4 	movi	r2,-1
8112b7fc:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
8112b800:	e0bfff0f 	ldh	r2,-4(fp)
8112b804:	10001416 	blt	r2,zero,8112b858 <alt_up_sd_card_get_attributes+0x74>
8112b808:	e0bfff0f 	ldh	r2,-4(fp)
8112b80c:	10800508 	cmpgei	r2,r2,20
8112b810:	1000111e 	bne	r2,zero,8112b858 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
8112b814:	e0ffff0f 	ldh	r3,-4(fp)
8112b818:	00a04574 	movhi	r2,33045
8112b81c:	10973b04 	addi	r2,r2,23788
8112b820:	180691ba 	slli	r3,r3,6
8112b824:	10c5883a 	add	r2,r2,r3
8112b828:	10800f04 	addi	r2,r2,60
8112b82c:	10800017 	ldw	r2,0(r2)
8112b830:	10000926 	beq	r2,zero,8112b858 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
8112b834:	e0ffff0f 	ldh	r3,-4(fp)
8112b838:	00a04574 	movhi	r2,33045
8112b83c:	10973b04 	addi	r2,r2,23788
8112b840:	180691ba 	slli	r3,r3,6
8112b844:	10c5883a 	add	r2,r2,r3
8112b848:	108002c4 	addi	r2,r2,11
8112b84c:	10800003 	ldbu	r2,0(r2)
8112b850:	10803fcc 	andi	r2,r2,255
8112b854:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
8112b858:	e0bffe0b 	ldhu	r2,-8(fp)
}
8112b85c:	e037883a 	mov	sp,fp
8112b860:	df000017 	ldw	fp,0(sp)
8112b864:	dec00104 	addi	sp,sp,4
8112b868:	f800283a 	ret

8112b86c <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
8112b86c:	defffa04 	addi	sp,sp,-24
8112b870:	dfc00515 	stw	ra,20(sp)
8112b874:	df000415 	stw	fp,16(sp)
8112b878:	df000404 	addi	fp,sp,16
8112b87c:	2005883a 	mov	r2,r4
8112b880:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
8112b884:	00bfffc4 	movi	r2,-1
8112b888:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
8112b88c:	e0bfff0f 	ldh	r2,-4(fp)
8112b890:	1000ce16 	blt	r2,zero,8112bbcc <alt_up_sd_card_read+0x360>
8112b894:	e0bfff0f 	ldh	r2,-4(fp)
8112b898:	10800508 	cmpgei	r2,r2,20
8112b89c:	1000cb1e 	bne	r2,zero,8112bbcc <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
8112b8a0:	e0ffff0f 	ldh	r3,-4(fp)
8112b8a4:	00a04574 	movhi	r2,33045
8112b8a8:	10973b04 	addi	r2,r2,23788
8112b8ac:	180691ba 	slli	r3,r3,6
8112b8b0:	10c5883a 	add	r2,r2,r3
8112b8b4:	10800f04 	addi	r2,r2,60
8112b8b8:	10800017 	ldw	r2,0(r2)
8112b8bc:	1000c326 	beq	r2,zero,8112bbcc <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
8112b8c0:	e0ffff0f 	ldh	r3,-4(fp)
8112b8c4:	00a04574 	movhi	r2,33045
8112b8c8:	10973b04 	addi	r2,r2,23788
8112b8cc:	180691ba 	slli	r3,r3,6
8112b8d0:	10c5883a 	add	r2,r2,r3
8112b8d4:	10800904 	addi	r2,r2,36
8112b8d8:	10c00017 	ldw	r3,0(r2)
8112b8dc:	e13fff0f 	ldh	r4,-4(fp)
8112b8e0:	00a04574 	movhi	r2,33045
8112b8e4:	10973b04 	addi	r2,r2,23788
8112b8e8:	200891ba 	slli	r4,r4,6
8112b8ec:	1105883a 	add	r2,r2,r4
8112b8f0:	10800604 	addi	r2,r2,24
8112b8f4:	10800017 	ldw	r2,0(r2)
8112b8f8:	1880b42e 	bgeu	r3,r2,8112bbcc <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112b8fc:	00a04574 	movhi	r2,33045
8112b900:	10972604 	addi	r2,r2,23704
8112b904:	10c01417 	ldw	r3,80(r2)
8112b908:	e13fff0f 	ldh	r4,-4(fp)
8112b90c:	00a04574 	movhi	r2,33045
8112b910:	10973b04 	addi	r2,r2,23788
8112b914:	200891ba 	slli	r4,r4,6
8112b918:	1105883a 	add	r2,r2,r4
8112b91c:	10800704 	addi	r2,r2,28
8112b920:	10800017 	ldw	r2,0(r2)
8112b924:	113fff84 	addi	r4,r2,-2
8112b928:	00a04574 	movhi	r2,33045
8112b92c:	10972604 	addi	r2,r2,23704
8112b930:	10800383 	ldbu	r2,14(r2)
8112b934:	10803fcc 	andi	r2,r2,255
8112b938:	2085383a 	mul	r2,r4,r2
8112b93c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
8112b940:	e13fff0f 	ldh	r4,-4(fp)
8112b944:	00a04574 	movhi	r2,33045
8112b948:	10973b04 	addi	r2,r2,23788
8112b94c:	200891ba 	slli	r4,r4,6
8112b950:	1105883a 	add	r2,r2,r4
8112b954:	10800804 	addi	r2,r2,32
8112b958:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112b95c:	1885883a 	add	r2,r3,r2
8112b960:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
8112b964:	e0ffff0f 	ldh	r3,-4(fp)
8112b968:	00a04574 	movhi	r2,33045
8112b96c:	10973b04 	addi	r2,r2,23788
8112b970:	180691ba 	slli	r3,r3,6
8112b974:	10c5883a 	add	r2,r2,r3
8112b978:	10800904 	addi	r2,r2,36
8112b97c:	10800017 	ldw	r2,0(r2)
8112b980:	10006826 	beq	r2,zero,8112bb24 <alt_up_sd_card_read+0x2b8>
8112b984:	e0ffff0f 	ldh	r3,-4(fp)
8112b988:	00a04574 	movhi	r2,33045
8112b98c:	10973b04 	addi	r2,r2,23788
8112b990:	180691ba 	slli	r3,r3,6
8112b994:	10c5883a 	add	r2,r2,r3
8112b998:	10800904 	addi	r2,r2,36
8112b99c:	10800017 	ldw	r2,0(r2)
8112b9a0:	10807fcc 	andi	r2,r2,511
8112b9a4:	10005f1e 	bne	r2,zero,8112bb24 <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
8112b9a8:	e0ffff0f 	ldh	r3,-4(fp)
8112b9ac:	00a04574 	movhi	r2,33045
8112b9b0:	10973b04 	addi	r2,r2,23788
8112b9b4:	180691ba 	slli	r3,r3,6
8112b9b8:	10c5883a 	add	r2,r2,r3
8112b9bc:	10800804 	addi	r2,r2,32
8112b9c0:	10c00017 	ldw	r3,0(r2)
8112b9c4:	00a04574 	movhi	r2,33045
8112b9c8:	10972604 	addi	r2,r2,23704
8112b9cc:	10800383 	ldbu	r2,14(r2)
8112b9d0:	10803fcc 	andi	r2,r2,255
8112b9d4:	10bfffc4 	addi	r2,r2,-1
8112b9d8:	1880401e 	bne	r3,r2,8112badc <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
8112b9dc:	e0ffff0f 	ldh	r3,-4(fp)
8112b9e0:	00a04574 	movhi	r2,33045
8112b9e4:	10973b04 	addi	r2,r2,23788
8112b9e8:	180691ba 	slli	r3,r3,6
8112b9ec:	10c5883a 	add	r2,r2,r3
8112b9f0:	10800704 	addi	r2,r2,28
8112b9f4:	10800017 	ldw	r2,0(r2)
8112b9f8:	e0fffe04 	addi	r3,fp,-8
8112b9fc:	180b883a 	mov	r5,r3
8112ba00:	1009883a 	mov	r4,r2
8112ba04:	11282d00 	call	811282d0 <get_cluster_flag>
8112ba08:	10003226 	beq	r2,zero,8112bad4 <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
8112ba0c:	e0bffe0b 	ldhu	r2,-8(fp)
8112ba10:	10bfffcc 	andi	r2,r2,65535
8112ba14:	10fffe0c 	andi	r3,r2,65528
8112ba18:	00bffe14 	movui	r2,65528
8112ba1c:	1880021e 	bne	r3,r2,8112ba28 <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
8112ba20:	00bfffc4 	movi	r2,-1
8112ba24:	00006a06 	br	8112bbd0 <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
8112ba28:	e13fff0f 	ldh	r4,-4(fp)
8112ba2c:	e0bffe0b 	ldhu	r2,-8(fp)
8112ba30:	10ffffcc 	andi	r3,r2,65535
8112ba34:	00a04574 	movhi	r2,33045
8112ba38:	10973b04 	addi	r2,r2,23788
8112ba3c:	200891ba 	slli	r4,r4,6
8112ba40:	1105883a 	add	r2,r2,r4
8112ba44:	10800704 	addi	r2,r2,28
8112ba48:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
8112ba4c:	e0ffff0f 	ldh	r3,-4(fp)
8112ba50:	00a04574 	movhi	r2,33045
8112ba54:	10973b04 	addi	r2,r2,23788
8112ba58:	180691ba 	slli	r3,r3,6
8112ba5c:	10c5883a 	add	r2,r2,r3
8112ba60:	10800804 	addi	r2,r2,32
8112ba64:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112ba68:	00a04574 	movhi	r2,33045
8112ba6c:	10972604 	addi	r2,r2,23704
8112ba70:	10c01417 	ldw	r3,80(r2)
8112ba74:	e13fff0f 	ldh	r4,-4(fp)
8112ba78:	00a04574 	movhi	r2,33045
8112ba7c:	10973b04 	addi	r2,r2,23788
8112ba80:	200891ba 	slli	r4,r4,6
8112ba84:	1105883a 	add	r2,r2,r4
8112ba88:	10800704 	addi	r2,r2,28
8112ba8c:	10800017 	ldw	r2,0(r2)
8112ba90:	113fff84 	addi	r4,r2,-2
8112ba94:	00a04574 	movhi	r2,33045
8112ba98:	10972604 	addi	r2,r2,23704
8112ba9c:	10800383 	ldbu	r2,14(r2)
8112baa0:	10803fcc 	andi	r2,r2,255
8112baa4:	2085383a 	mul	r2,r4,r2
8112baa8:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
8112baac:	e13fff0f 	ldh	r4,-4(fp)
8112bab0:	00a04574 	movhi	r2,33045
8112bab4:	10973b04 	addi	r2,r2,23788
8112bab8:	200891ba 	slli	r4,r4,6
8112babc:	1105883a 	add	r2,r2,r4
8112bac0:	10800804 	addi	r2,r2,32
8112bac4:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112bac8:	1885883a 	add	r2,r3,r2
8112bacc:	e0bffd15 	stw	r2,-12(fp)
8112bad0:	00001406 	br	8112bb24 <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
8112bad4:	00bfff84 	movi	r2,-2
8112bad8:	00003d06 	br	8112bbd0 <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
8112badc:	e13fff0f 	ldh	r4,-4(fp)
8112bae0:	e0ffff0f 	ldh	r3,-4(fp)
8112bae4:	00a04574 	movhi	r2,33045
8112bae8:	10973b04 	addi	r2,r2,23788
8112baec:	180691ba 	slli	r3,r3,6
8112baf0:	10c5883a 	add	r2,r2,r3
8112baf4:	10800804 	addi	r2,r2,32
8112baf8:	10800017 	ldw	r2,0(r2)
8112bafc:	10c00044 	addi	r3,r2,1
8112bb00:	00a04574 	movhi	r2,33045
8112bb04:	10973b04 	addi	r2,r2,23788
8112bb08:	200891ba 	slli	r4,r4,6
8112bb0c:	1105883a 	add	r2,r2,r4
8112bb10:	10800804 	addi	r2,r2,32
8112bb14:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
8112bb18:	e0bffd17 	ldw	r2,-12(fp)
8112bb1c:	10800044 	addi	r2,r2,1
8112bb20:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
8112bb24:	d0e08617 	ldw	r3,-32232(gp)
8112bb28:	e0bffd17 	ldw	r2,-12(fp)
8112bb2c:	1885883a 	add	r2,r3,r2
8112bb30:	1007883a 	mov	r3,r2
8112bb34:	d0a08a17 	ldw	r2,-32216(gp)
8112bb38:	18800726 	beq	r3,r2,8112bb58 <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
8112bb3c:	d0a08617 	ldw	r2,-32232(gp)
8112bb40:	100b883a 	mov	r5,r2
8112bb44:	e13ffd17 	ldw	r4,-12(fp)
8112bb48:	11281f80 	call	811281f8 <Read_Sector_Data>
8112bb4c:	1000021e 	bne	r2,zero,8112bb58 <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
8112bb50:	00bfff84 	movi	r2,-2
8112bb54:	00001e06 	br	8112bbd0 <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
8112bb58:	d0e08517 	ldw	r3,-32236(gp)
8112bb5c:	e13fff0f 	ldh	r4,-4(fp)
8112bb60:	00a04574 	movhi	r2,33045
8112bb64:	10973b04 	addi	r2,r2,23788
8112bb68:	200891ba 	slli	r4,r4,6
8112bb6c:	1105883a 	add	r2,r2,r4
8112bb70:	10800904 	addi	r2,r2,36
8112bb74:	10800017 	ldw	r2,0(r2)
8112bb78:	10807fcc 	andi	r2,r2,511
8112bb7c:	1885883a 	add	r2,r3,r2
8112bb80:	10800023 	ldbuio	r2,0(r2)
8112bb84:	10803fcc 	andi	r2,r2,255
8112bb88:	10803fcc 	andi	r2,r2,255
8112bb8c:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
8112bb90:	e13fff0f 	ldh	r4,-4(fp)
8112bb94:	e0ffff0f 	ldh	r3,-4(fp)
8112bb98:	00a04574 	movhi	r2,33045
8112bb9c:	10973b04 	addi	r2,r2,23788
8112bba0:	180691ba 	slli	r3,r3,6
8112bba4:	10c5883a 	add	r2,r2,r3
8112bba8:	10800904 	addi	r2,r2,36
8112bbac:	10800017 	ldw	r2,0(r2)
8112bbb0:	10c00044 	addi	r3,r2,1
8112bbb4:	00a04574 	movhi	r2,33045
8112bbb8:	10973b04 	addi	r2,r2,23788
8112bbbc:	200891ba 	slli	r4,r4,6
8112bbc0:	1105883a 	add	r2,r2,r4
8112bbc4:	10800904 	addi	r2,r2,36
8112bbc8:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
8112bbcc:	e0bffc0b 	ldhu	r2,-16(fp)
}
8112bbd0:	e037883a 	mov	sp,fp
8112bbd4:	dfc00117 	ldw	ra,4(sp)
8112bbd8:	df000017 	ldw	fp,0(sp)
8112bbdc:	dec00204 	addi	sp,sp,8
8112bbe0:	f800283a 	ret

8112bbe4 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
8112bbe4:	defff804 	addi	sp,sp,-32
8112bbe8:	dfc00715 	stw	ra,28(sp)
8112bbec:	df000615 	stw	fp,24(sp)
8112bbf0:	df000604 	addi	fp,sp,24
8112bbf4:	2007883a 	mov	r3,r4
8112bbf8:	2805883a 	mov	r2,r5
8112bbfc:	e0fffe0d 	sth	r3,-8(fp)
8112bc00:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
8112bc04:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
8112bc08:	e0bffe0f 	ldh	r2,-8(fp)
8112bc0c:	10017716 	blt	r2,zero,8112c1ec <alt_up_sd_card_write+0x608>
8112bc10:	e0bffe0f 	ldh	r2,-8(fp)
8112bc14:	10800508 	cmpgei	r2,r2,20
8112bc18:	1001741e 	bne	r2,zero,8112c1ec <alt_up_sd_card_write+0x608>
    {
        if (active_files[file_handle].in_use)
8112bc1c:	e0fffe0f 	ldh	r3,-8(fp)
8112bc20:	00a04574 	movhi	r2,33045
8112bc24:	10973b04 	addi	r2,r2,23788
8112bc28:	180691ba 	slli	r3,r3,6
8112bc2c:	10c5883a 	add	r2,r2,r3
8112bc30:	10800f04 	addi	r2,r2,60
8112bc34:	10800017 	ldw	r2,0(r2)
8112bc38:	10016c26 	beq	r2,zero,8112c1ec <alt_up_sd_card_write+0x608>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112bc3c:	00a04574 	movhi	r2,33045
8112bc40:	10972604 	addi	r2,r2,23704
8112bc44:	10c01417 	ldw	r3,80(r2)
8112bc48:	e13ffe0f 	ldh	r4,-8(fp)
8112bc4c:	00a04574 	movhi	r2,33045
8112bc50:	10973b04 	addi	r2,r2,23788
8112bc54:	200891ba 	slli	r4,r4,6
8112bc58:	1105883a 	add	r2,r2,r4
8112bc5c:	10800704 	addi	r2,r2,28
8112bc60:	10800017 	ldw	r2,0(r2)
8112bc64:	113fff84 	addi	r4,r2,-2
8112bc68:	00a04574 	movhi	r2,33045
8112bc6c:	10972604 	addi	r2,r2,23704
8112bc70:	10800383 	ldbu	r2,14(r2)
8112bc74:	10803fcc 	andi	r2,r2,255
8112bc78:	2085383a 	mul	r2,r4,r2
8112bc7c:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
8112bc80:	e13ffe0f 	ldh	r4,-8(fp)
8112bc84:	00a04574 	movhi	r2,33045
8112bc88:	10973b04 	addi	r2,r2,23788
8112bc8c:	200891ba 	slli	r4,r4,6
8112bc90:	1105883a 	add	r2,r2,r4
8112bc94:	10800804 	addi	r2,r2,32
8112bc98:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112bc9c:	1885883a 	add	r2,r3,r2
8112bca0:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
8112bca4:	e0fffe0f 	ldh	r3,-8(fp)
8112bca8:	00a04574 	movhi	r2,33045
8112bcac:	10973b04 	addi	r2,r2,23788
8112bcb0:	180691ba 	slli	r3,r3,6
8112bcb4:	10c5883a 	add	r2,r2,r3
8112bcb8:	10800904 	addi	r2,r2,36
8112bcbc:	10c00017 	ldw	r3,0(r2)
8112bcc0:	00a04574 	movhi	r2,33045
8112bcc4:	10972604 	addi	r2,r2,23704
8112bcc8:	1080030b 	ldhu	r2,12(r2)
8112bccc:	10bfffcc 	andi	r2,r2,65535
8112bcd0:	1889203a 	divu	r4,r3,r2
8112bcd4:	2085383a 	mul	r2,r4,r2
8112bcd8:	1885c83a 	sub	r2,r3,r2
8112bcdc:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
8112bce0:	e0fffe0f 	ldh	r3,-8(fp)
8112bce4:	00a04574 	movhi	r2,33045
8112bce8:	10973b04 	addi	r2,r2,23788
8112bcec:	180691ba 	slli	r3,r3,6
8112bcf0:	10c5883a 	add	r2,r2,r3
8112bcf4:	10800904 	addi	r2,r2,36
8112bcf8:	10c00017 	ldw	r3,0(r2)
8112bcfc:	e13ffe0f 	ldh	r4,-8(fp)
8112bd00:	00a04574 	movhi	r2,33045
8112bd04:	10973b04 	addi	r2,r2,23788
8112bd08:	200891ba 	slli	r4,r4,6
8112bd0c:	1105883a 	add	r2,r2,r4
8112bd10:	10800604 	addi	r2,r2,24
8112bd14:	10800017 	ldw	r2,0(r2)
8112bd18:	1880672e 	bgeu	r3,r2,8112beb8 <alt_up_sd_card_write+0x2d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
8112bd1c:	e0fffe0f 	ldh	r3,-8(fp)
8112bd20:	00a04574 	movhi	r2,33045
8112bd24:	10973b04 	addi	r2,r2,23788
8112bd28:	180691ba 	slli	r3,r3,6
8112bd2c:	10c5883a 	add	r2,r2,r3
8112bd30:	10800904 	addi	r2,r2,36
8112bd34:	10800017 	ldw	r2,0(r2)
8112bd38:	1000e126 	beq	r2,zero,8112c0c0 <alt_up_sd_card_write+0x4dc>
8112bd3c:	e0bffc0f 	ldh	r2,-16(fp)
8112bd40:	1000df1e 	bne	r2,zero,8112c0c0 <alt_up_sd_card_write+0x4dc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
8112bd44:	e0fffe0f 	ldh	r3,-8(fp)
8112bd48:	00a04574 	movhi	r2,33045
8112bd4c:	10973b04 	addi	r2,r2,23788
8112bd50:	180691ba 	slli	r3,r3,6
8112bd54:	10c5883a 	add	r2,r2,r3
8112bd58:	10800804 	addi	r2,r2,32
8112bd5c:	10c00017 	ldw	r3,0(r2)
8112bd60:	00a04574 	movhi	r2,33045
8112bd64:	10972604 	addi	r2,r2,23704
8112bd68:	10800383 	ldbu	r2,14(r2)
8112bd6c:	10803fcc 	andi	r2,r2,255
8112bd70:	10bfffc4 	addi	r2,r2,-1
8112bd74:	18803d1e 	bne	r3,r2,8112be6c <alt_up_sd_card_write+0x288>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
8112bd78:	e0fffe0f 	ldh	r3,-8(fp)
8112bd7c:	00a04574 	movhi	r2,33045
8112bd80:	10973b04 	addi	r2,r2,23788
8112bd84:	180691ba 	slli	r3,r3,6
8112bd88:	10c5883a 	add	r2,r2,r3
8112bd8c:	10800704 	addi	r2,r2,28
8112bd90:	10800017 	ldw	r2,0(r2)
8112bd94:	e0fffc84 	addi	r3,fp,-14
8112bd98:	180b883a 	mov	r5,r3
8112bd9c:	1009883a 	mov	r4,r2
8112bda0:	11282d00 	call	811282d0 <get_cluster_flag>
8112bda4:	10002f26 	beq	r2,zero,8112be64 <alt_up_sd_card_write+0x280>
                        {
                            if (next_cluster < 0x0000fff8)
8112bda8:	e0bffc8b 	ldhu	r2,-14(fp)
8112bdac:	10bfffcc 	andi	r2,r2,65535
8112bdb0:	10bffe28 	cmpgeui	r2,r2,65528
8112bdb4:	1000c21e 	bne	r2,zero,8112c0c0 <alt_up_sd_card_write+0x4dc>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
8112bdb8:	e13ffe0f 	ldh	r4,-8(fp)
8112bdbc:	e0bffc8b 	ldhu	r2,-14(fp)
8112bdc0:	10ffffcc 	andi	r3,r2,65535
8112bdc4:	00a04574 	movhi	r2,33045
8112bdc8:	10973b04 	addi	r2,r2,23788
8112bdcc:	200891ba 	slli	r4,r4,6
8112bdd0:	1105883a 	add	r2,r2,r4
8112bdd4:	10800704 	addi	r2,r2,28
8112bdd8:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
8112bddc:	e0fffe0f 	ldh	r3,-8(fp)
8112bde0:	00a04574 	movhi	r2,33045
8112bde4:	10973b04 	addi	r2,r2,23788
8112bde8:	180691ba 	slli	r3,r3,6
8112bdec:	10c5883a 	add	r2,r2,r3
8112bdf0:	10800804 	addi	r2,r2,32
8112bdf4:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112bdf8:	00a04574 	movhi	r2,33045
8112bdfc:	10972604 	addi	r2,r2,23704
8112be00:	10c01417 	ldw	r3,80(r2)
8112be04:	e13ffe0f 	ldh	r4,-8(fp)
8112be08:	00a04574 	movhi	r2,33045
8112be0c:	10973b04 	addi	r2,r2,23788
8112be10:	200891ba 	slli	r4,r4,6
8112be14:	1105883a 	add	r2,r2,r4
8112be18:	10800704 	addi	r2,r2,28
8112be1c:	10800017 	ldw	r2,0(r2)
8112be20:	113fff84 	addi	r4,r2,-2
8112be24:	00a04574 	movhi	r2,33045
8112be28:	10972604 	addi	r2,r2,23704
8112be2c:	10800383 	ldbu	r2,14(r2)
8112be30:	10803fcc 	andi	r2,r2,255
8112be34:	2085383a 	mul	r2,r4,r2
8112be38:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
8112be3c:	e13ffe0f 	ldh	r4,-8(fp)
8112be40:	00a04574 	movhi	r2,33045
8112be44:	10973b04 	addi	r2,r2,23788
8112be48:	200891ba 	slli	r4,r4,6
8112be4c:	1105883a 	add	r2,r2,r4
8112be50:	10800804 	addi	r2,r2,32
8112be54:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112be58:	1885883a 	add	r2,r3,r2
8112be5c:	e0bffb15 	stw	r2,-20(fp)
8112be60:	00009706 	br	8112c0c0 <alt_up_sd_card_write+0x4dc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
8112be64:	0005883a 	mov	r2,zero
8112be68:	0000e106 	br	8112c1f0 <alt_up_sd_card_write+0x60c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
8112be6c:	e13ffe0f 	ldh	r4,-8(fp)
8112be70:	e0fffe0f 	ldh	r3,-8(fp)
8112be74:	00a04574 	movhi	r2,33045
8112be78:	10973b04 	addi	r2,r2,23788
8112be7c:	180691ba 	slli	r3,r3,6
8112be80:	10c5883a 	add	r2,r2,r3
8112be84:	10800804 	addi	r2,r2,32
8112be88:	10800017 	ldw	r2,0(r2)
8112be8c:	10c00044 	addi	r3,r2,1
8112be90:	00a04574 	movhi	r2,33045
8112be94:	10973b04 	addi	r2,r2,23788
8112be98:	200891ba 	slli	r4,r4,6
8112be9c:	1105883a 	add	r2,r2,r4
8112bea0:	10800804 	addi	r2,r2,32
8112bea4:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
8112bea8:	e0bffb17 	ldw	r2,-20(fp)
8112beac:	10800044 	addi	r2,r2,1
8112beb0:	e0bffb15 	stw	r2,-20(fp)
8112beb4:	00008206 	br	8112c0c0 <alt_up_sd_card_write+0x4dc>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
8112beb8:	e0fffe0f 	ldh	r3,-8(fp)
8112bebc:	00a04574 	movhi	r2,33045
8112bec0:	10973b04 	addi	r2,r2,23788
8112bec4:	180691ba 	slli	r3,r3,6
8112bec8:	10c5883a 	add	r2,r2,r3
8112becc:	10800904 	addi	r2,r2,36
8112bed0:	10800017 	ldw	r2,0(r2)
8112bed4:	10007a26 	beq	r2,zero,8112c0c0 <alt_up_sd_card_write+0x4dc>
8112bed8:	e0bffc0f 	ldh	r2,-16(fp)
8112bedc:	1000781e 	bne	r2,zero,8112c0c0 <alt_up_sd_card_write+0x4dc>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
8112bee0:	e0fffe0f 	ldh	r3,-8(fp)
8112bee4:	00a04574 	movhi	r2,33045
8112bee8:	10973b04 	addi	r2,r2,23788
8112beec:	180691ba 	slli	r3,r3,6
8112bef0:	10c5883a 	add	r2,r2,r3
8112bef4:	10800804 	addi	r2,r2,32
8112bef8:	10c00017 	ldw	r3,0(r2)
8112befc:	00a04574 	movhi	r2,33045
8112bf00:	10972604 	addi	r2,r2,23704
8112bf04:	10800383 	ldbu	r2,14(r2)
8112bf08:	10803fcc 	andi	r2,r2,255
8112bf0c:	10bfffc4 	addi	r2,r2,-1
8112bf10:	18803e1e 	bne	r3,r2,8112c00c <alt_up_sd_card_write+0x428>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
8112bf14:	e0bffd04 	addi	r2,fp,-12
8112bf18:	1009883a 	mov	r4,r2
8112bf1c:	112a2ac0 	call	8112a2ac <find_first_empty_cluster>
8112bf20:	10003826 	beq	r2,zero,8112c004 <alt_up_sd_card_write+0x420>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
8112bf24:	e0fffe0f 	ldh	r3,-8(fp)
8112bf28:	00a04574 	movhi	r2,33045
8112bf2c:	10973b04 	addi	r2,r2,23788
8112bf30:	180691ba 	slli	r3,r3,6
8112bf34:	10c5883a 	add	r2,r2,r3
8112bf38:	10800704 	addi	r2,r2,28
8112bf3c:	10800017 	ldw	r2,0(r2)
8112bf40:	e0fffd17 	ldw	r3,-12(fp)
8112bf44:	18ffffcc 	andi	r3,r3,65535
8112bf48:	18e0001c 	xori	r3,r3,32768
8112bf4c:	18e00004 	addi	r3,r3,-32768
8112bf50:	01800044 	movi	r6,1
8112bf54:	180b883a 	mov	r5,r3
8112bf58:	1009883a 	mov	r4,r2
8112bf5c:	11283840 	call	81128384 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
8112bf60:	e0bffd17 	ldw	r2,-12(fp)
8112bf64:	01800044 	movi	r6,1
8112bf68:	017fffc4 	movi	r5,-1
8112bf6c:	1009883a 	mov	r4,r2
8112bf70:	11283840 	call	81128384 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
8112bf74:	e0fffe0f 	ldh	r3,-8(fp)
8112bf78:	00a04574 	movhi	r2,33045
8112bf7c:	10973b04 	addi	r2,r2,23788
8112bf80:	180691ba 	slli	r3,r3,6
8112bf84:	10c5883a 	add	r2,r2,r3
8112bf88:	10800704 	addi	r2,r2,28
8112bf8c:	10800017 	ldw	r2,0(r2)
8112bf90:	e0fffd17 	ldw	r3,-12(fp)
8112bf94:	18ffffcc 	andi	r3,r3,65535
8112bf98:	18e0001c 	xori	r3,r3,32768
8112bf9c:	18e00004 	addi	r3,r3,-32768
8112bfa0:	000d883a 	mov	r6,zero
8112bfa4:	180b883a 	mov	r5,r3
8112bfa8:	1009883a 	mov	r4,r2
8112bfac:	11283840 	call	81128384 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
8112bfb0:	e0bffd17 	ldw	r2,-12(fp)
8112bfb4:	000d883a 	mov	r6,zero
8112bfb8:	017fffc4 	movi	r5,-1
8112bfbc:	1009883a 	mov	r4,r2
8112bfc0:	11283840 	call	81128384 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
8112bfc4:	e13ffe0f 	ldh	r4,-8(fp)
8112bfc8:	e0fffd17 	ldw	r3,-12(fp)
8112bfcc:	00a04574 	movhi	r2,33045
8112bfd0:	10973b04 	addi	r2,r2,23788
8112bfd4:	200891ba 	slli	r4,r4,6
8112bfd8:	1105883a 	add	r2,r2,r4
8112bfdc:	10800704 	addi	r2,r2,28
8112bfe0:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
8112bfe4:	e0fffe0f 	ldh	r3,-8(fp)
8112bfe8:	00a04574 	movhi	r2,33045
8112bfec:	10973b04 	addi	r2,r2,23788
8112bff0:	180691ba 	slli	r3,r3,6
8112bff4:	10c5883a 	add	r2,r2,r3
8112bff8:	10800804 	addi	r2,r2,32
8112bffc:	10000015 	stw	zero,0(r2)
8112c000:	00001506 	br	8112c058 <alt_up_sd_card_write+0x474>
						}
						else
						{
							return false;
8112c004:	0005883a 	mov	r2,zero
8112c008:	00007906 	br	8112c1f0 <alt_up_sd_card_write+0x60c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
8112c00c:	e13ffe0f 	ldh	r4,-8(fp)
8112c010:	e0fffe0f 	ldh	r3,-8(fp)
8112c014:	00a04574 	movhi	r2,33045
8112c018:	10973b04 	addi	r2,r2,23788
8112c01c:	180691ba 	slli	r3,r3,6
8112c020:	10c5883a 	add	r2,r2,r3
8112c024:	10800904 	addi	r2,r2,36
8112c028:	10c00017 	ldw	r3,0(r2)
8112c02c:	00a04574 	movhi	r2,33045
8112c030:	10972604 	addi	r2,r2,23704
8112c034:	1080030b 	ldhu	r2,12(r2)
8112c038:	10bfffcc 	andi	r2,r2,65535
8112c03c:	1887203a 	divu	r3,r3,r2
8112c040:	00a04574 	movhi	r2,33045
8112c044:	10973b04 	addi	r2,r2,23788
8112c048:	200891ba 	slli	r4,r4,6
8112c04c:	1105883a 	add	r2,r2,r4
8112c050:	10800804 	addi	r2,r2,32
8112c054:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112c058:	00a04574 	movhi	r2,33045
8112c05c:	10972604 	addi	r2,r2,23704
8112c060:	10c01417 	ldw	r3,80(r2)
8112c064:	e13ffe0f 	ldh	r4,-8(fp)
8112c068:	00a04574 	movhi	r2,33045
8112c06c:	10973b04 	addi	r2,r2,23788
8112c070:	200891ba 	slli	r4,r4,6
8112c074:	1105883a 	add	r2,r2,r4
8112c078:	10800704 	addi	r2,r2,28
8112c07c:	10800017 	ldw	r2,0(r2)
8112c080:	113fff84 	addi	r4,r2,-2
8112c084:	00a04574 	movhi	r2,33045
8112c088:	10972604 	addi	r2,r2,23704
8112c08c:	10800383 	ldbu	r2,14(r2)
8112c090:	10803fcc 	andi	r2,r2,255
8112c094:	2085383a 	mul	r2,r4,r2
8112c098:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
8112c09c:	e13ffe0f 	ldh	r4,-8(fp)
8112c0a0:	00a04574 	movhi	r2,33045
8112c0a4:	10973b04 	addi	r2,r2,23788
8112c0a8:	200891ba 	slli	r4,r4,6
8112c0ac:	1105883a 	add	r2,r2,r4
8112c0b0:	10800804 	addi	r2,r2,32
8112c0b4:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112c0b8:	1885883a 	add	r2,r3,r2
8112c0bc:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
8112c0c0:	d0e08617 	ldw	r3,-32232(gp)
8112c0c4:	e0bffb17 	ldw	r2,-20(fp)
8112c0c8:	1885883a 	add	r2,r3,r2
8112c0cc:	1007883a 	mov	r3,r2
8112c0d0:	d0a08a17 	ldw	r2,-32216(gp)
8112c0d4:	18800726 	beq	r3,r2,8112c0f4 <alt_up_sd_card_write+0x510>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
8112c0d8:	d0a08617 	ldw	r2,-32232(gp)
8112c0dc:	100b883a 	mov	r5,r2
8112c0e0:	e13ffb17 	ldw	r4,-20(fp)
8112c0e4:	11281f80 	call	811281f8 <Read_Sector_Data>
8112c0e8:	1000021e 	bne	r2,zero,8112c0f4 <alt_up_sd_card_write+0x510>
                {
					return false;
8112c0ec:	0005883a 	mov	r2,zero
8112c0f0:	00003f06 	br	8112c1f0 <alt_up_sd_card_write+0x60c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
8112c0f4:	d0e08517 	ldw	r3,-32236(gp)
8112c0f8:	e0bffc0f 	ldh	r2,-16(fp)
8112c0fc:	1885883a 	add	r2,r3,r2
8112c100:	e0ffff07 	ldb	r3,-4(fp)
8112c104:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
8112c108:	e13ffe0f 	ldh	r4,-8(fp)
8112c10c:	e0fffe0f 	ldh	r3,-8(fp)
8112c110:	00a04574 	movhi	r2,33045
8112c114:	10973b04 	addi	r2,r2,23788
8112c118:	180691ba 	slli	r3,r3,6
8112c11c:	10c5883a 	add	r2,r2,r3
8112c120:	10800904 	addi	r2,r2,36
8112c124:	10800017 	ldw	r2,0(r2)
8112c128:	10c00044 	addi	r3,r2,1
8112c12c:	00a04574 	movhi	r2,33045
8112c130:	10973b04 	addi	r2,r2,23788
8112c134:	200891ba 	slli	r4,r4,6
8112c138:	1105883a 	add	r2,r2,r4
8112c13c:	10800904 	addi	r2,r2,36
8112c140:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
8112c144:	e0fffe0f 	ldh	r3,-8(fp)
8112c148:	00a04574 	movhi	r2,33045
8112c14c:	10973b04 	addi	r2,r2,23788
8112c150:	180691ba 	slli	r3,r3,6
8112c154:	10c5883a 	add	r2,r2,r3
8112c158:	10800904 	addi	r2,r2,36
8112c15c:	10c00017 	ldw	r3,0(r2)
8112c160:	e13ffe0f 	ldh	r4,-8(fp)
8112c164:	00a04574 	movhi	r2,33045
8112c168:	10973b04 	addi	r2,r2,23788
8112c16c:	200891ba 	slli	r4,r4,6
8112c170:	1105883a 	add	r2,r2,r4
8112c174:	10800604 	addi	r2,r2,24
8112c178:	10800017 	ldw	r2,0(r2)
8112c17c:	18801736 	bltu	r3,r2,8112c1dc <alt_up_sd_card_write+0x5f8>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
8112c180:	e13ffe0f 	ldh	r4,-8(fp)
8112c184:	e0fffe0f 	ldh	r3,-8(fp)
8112c188:	00a04574 	movhi	r2,33045
8112c18c:	10973b04 	addi	r2,r2,23788
8112c190:	180691ba 	slli	r3,r3,6
8112c194:	10c5883a 	add	r2,r2,r3
8112c198:	10800604 	addi	r2,r2,24
8112c19c:	10800017 	ldw	r2,0(r2)
8112c1a0:	10c00044 	addi	r3,r2,1
8112c1a4:	00a04574 	movhi	r2,33045
8112c1a8:	10973b04 	addi	r2,r2,23788
8112c1ac:	200891ba 	slli	r4,r4,6
8112c1b0:	1105883a 	add	r2,r2,r4
8112c1b4:	10800604 	addi	r2,r2,24
8112c1b8:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
8112c1bc:	e0fffe0f 	ldh	r3,-8(fp)
8112c1c0:	00a04574 	movhi	r2,33045
8112c1c4:	10973b04 	addi	r2,r2,23788
8112c1c8:	180691ba 	slli	r3,r3,6
8112c1cc:	10c5883a 	add	r2,r2,r3
8112c1d0:	10800e04 	addi	r2,r2,56
8112c1d4:	00c00044 	movi	r3,1
8112c1d8:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
8112c1dc:	00800044 	movi	r2,1
8112c1e0:	d0a08915 	stw	r2,-32220(gp)
			result = true;
8112c1e4:	00800044 	movi	r2,1
8112c1e8:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
8112c1ec:	e0bffa17 	ldw	r2,-24(fp)
}
8112c1f0:	e037883a 	mov	sp,fp
8112c1f4:	dfc00117 	ldw	ra,4(sp)
8112c1f8:	df000017 	ldw	fp,0(sp)
8112c1fc:	dec00204 	addi	sp,sp,8
8112c200:	f800283a 	ret

8112c204 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
8112c204:	defffb04 	addi	sp,sp,-20
8112c208:	dfc00415 	stw	ra,16(sp)
8112c20c:	df000315 	stw	fp,12(sp)
8112c210:	df000304 	addi	fp,sp,12
8112c214:	2005883a 	mov	r2,r4
8112c218:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
8112c21c:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112c220:	112ae280 	call	8112ae28 <alt_up_sd_card_is_Present>
8112c224:	10006026 	beq	r2,zero,8112c3a8 <alt_up_sd_card_fclose+0x1a4>
8112c228:	d0a07f17 	ldw	r2,-32260(gp)
8112c22c:	10005e26 	beq	r2,zero,8112c3a8 <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
8112c230:	e0ffff0f 	ldh	r3,-4(fp)
8112c234:	00a04574 	movhi	r2,33045
8112c238:	10973b04 	addi	r2,r2,23788
8112c23c:	180691ba 	slli	r3,r3,6
8112c240:	10c5883a 	add	r2,r2,r3
8112c244:	10800f04 	addi	r2,r2,60
8112c248:	10800017 	ldw	r2,0(r2)
8112c24c:	10005626 	beq	r2,zero,8112c3a8 <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
8112c250:	e0ffff0f 	ldh	r3,-4(fp)
8112c254:	00a04574 	movhi	r2,33045
8112c258:	10973b04 	addi	r2,r2,23788
8112c25c:	180691ba 	slli	r3,r3,6
8112c260:	10c5883a 	add	r2,r2,r3
8112c264:	10800e04 	addi	r2,r2,56
8112c268:	10800017 	ldw	r2,0(r2)
8112c26c:	10004526 	beq	r2,zero,8112c384 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
8112c270:	e0ffff0f 	ldh	r3,-4(fp)
8112c274:	00a04574 	movhi	r2,33045
8112c278:	10973b04 	addi	r2,r2,23788
8112c27c:	180691ba 	slli	r3,r3,6
8112c280:	10c5883a 	add	r2,r2,r3
8112c284:	10800b04 	addi	r2,r2,44
8112c288:	10800017 	ldw	r2,0(r2)
8112c28c:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
8112c290:	e0ffff0f 	ldh	r3,-4(fp)
8112c294:	00a04574 	movhi	r2,33045
8112c298:	10973b04 	addi	r2,r2,23788
8112c29c:	180691ba 	slli	r3,r3,6
8112c2a0:	10c5883a 	add	r2,r2,r3
8112c2a4:	10800a04 	addi	r2,r2,40
8112c2a8:	10800017 	ldw	r2,0(r2)
8112c2ac:	1000071e 	bne	r2,zero,8112c2cc <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
8112c2b0:	00a04574 	movhi	r2,33045
8112c2b4:	10972604 	addi	r2,r2,23704
8112c2b8:	10801317 	ldw	r2,76(r2)
8112c2bc:	e0fffe17 	ldw	r3,-8(fp)
8112c2c0:	1885883a 	add	r2,r3,r2
8112c2c4:	e0bffe15 	stw	r2,-8(fp)
8112c2c8:	00001406 	br	8112c31c <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
8112c2cc:	00a04574 	movhi	r2,33045
8112c2d0:	10972604 	addi	r2,r2,23704
8112c2d4:	10c01417 	ldw	r3,80(r2)
8112c2d8:	e0bffe17 	ldw	r2,-8(fp)
8112c2dc:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
8112c2e0:	e13fff0f 	ldh	r4,-4(fp)
8112c2e4:	00a04574 	movhi	r2,33045
8112c2e8:	10973b04 	addi	r2,r2,23788
8112c2ec:	200891ba 	slli	r4,r4,6
8112c2f0:	1105883a 	add	r2,r2,r4
8112c2f4:	10800a04 	addi	r2,r2,40
8112c2f8:	10800017 	ldw	r2,0(r2)
8112c2fc:	113fff84 	addi	r4,r2,-2
8112c300:	00a04574 	movhi	r2,33045
8112c304:	10972604 	addi	r2,r2,23704
8112c308:	10800383 	ldbu	r2,14(r2)
8112c30c:	10803fcc 	andi	r2,r2,255
8112c310:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
8112c314:	1885883a 	add	r2,r3,r2
8112c318:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
8112c31c:	e0bffe17 	ldw	r2,-8(fp)
8112c320:	d0e08617 	ldw	r3,-32232(gp)
8112c324:	180b883a 	mov	r5,r3
8112c328:	1009883a 	mov	r4,r2
8112c32c:	11281f80 	call	811281f8 <Read_Sector_Data>
8112c330:	10001426 	beq	r2,zero,8112c384 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
8112c334:	e0ffff0f 	ldh	r3,-4(fp)
8112c338:	00a04574 	movhi	r2,33045
8112c33c:	10973b04 	addi	r2,r2,23788
8112c340:	180691ba 	slli	r3,r3,6
8112c344:	10c5883a 	add	r2,r2,r3
8112c348:	10800c04 	addi	r2,r2,48
8112c34c:	1080000b 	ldhu	r2,0(r2)
8112c350:	113fffcc 	andi	r4,r2,65535
8112c354:	2120001c 	xori	r4,r4,32768
8112c358:	21200004 	addi	r4,r4,-32768
8112c35c:	e0bfff0f 	ldh	r2,-4(fp)
8112c360:	100691ba 	slli	r3,r2,6
8112c364:	00a04574 	movhi	r2,33045
8112c368:	10973b04 	addi	r2,r2,23788
8112c36c:	1885883a 	add	r2,r3,r2
8112c370:	100b883a 	mov	r5,r2
8112c374:	11288840 	call	81128884 <Write_File_Record_At_Offset>
8112c378:	10000226 	beq	r2,zero,8112c384 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
8112c37c:	11281ac0 	call	811281ac <Save_Modified_Sector>
8112c380:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
8112c384:	e0ffff0f 	ldh	r3,-4(fp)
8112c388:	00a04574 	movhi	r2,33045
8112c38c:	10973b04 	addi	r2,r2,23788
8112c390:	180691ba 	slli	r3,r3,6
8112c394:	10c5883a 	add	r2,r2,r3
8112c398:	10800f04 	addi	r2,r2,60
8112c39c:	10000015 	stw	zero,0(r2)
			result = true;
8112c3a0:	00800044 	movi	r2,1
8112c3a4:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
8112c3a8:	e0bffd17 	ldw	r2,-12(fp)
}
8112c3ac:	e037883a 	mov	sp,fp
8112c3b0:	dfc00117 	ldw	ra,4(sp)
8112c3b4:	df000017 	ldw	fp,0(sp)
8112c3b8:	dec00204 	addi	sp,sp,8
8112c3bc:	f800283a 	ret

8112c3c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8112c3c0:	defffa04 	addi	sp,sp,-24
8112c3c4:	dfc00515 	stw	ra,20(sp)
8112c3c8:	df000415 	stw	fp,16(sp)
8112c3cc:	df000404 	addi	fp,sp,16
8112c3d0:	e13ffd15 	stw	r4,-12(fp)
8112c3d4:	e17ffe15 	stw	r5,-8(fp)
8112c3d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8112c3dc:	e0bffd17 	ldw	r2,-12(fp)
8112c3e0:	10800017 	ldw	r2,0(r2)
8112c3e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
8112c3e8:	e0bffc17 	ldw	r2,-16(fp)
8112c3ec:	10c00a04 	addi	r3,r2,40
8112c3f0:	e0bffd17 	ldw	r2,-12(fp)
8112c3f4:	10800217 	ldw	r2,8(r2)
8112c3f8:	100f883a 	mov	r7,r2
8112c3fc:	e1bfff17 	ldw	r6,-4(fp)
8112c400:	e17ffe17 	ldw	r5,-8(fp)
8112c404:	1809883a 	mov	r4,r3
8112c408:	112cb6c0 	call	8112cb6c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8112c40c:	e037883a 	mov	sp,fp
8112c410:	dfc00117 	ldw	ra,4(sp)
8112c414:	df000017 	ldw	fp,0(sp)
8112c418:	dec00204 	addi	sp,sp,8
8112c41c:	f800283a 	ret

8112c420 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8112c420:	defffa04 	addi	sp,sp,-24
8112c424:	dfc00515 	stw	ra,20(sp)
8112c428:	df000415 	stw	fp,16(sp)
8112c42c:	df000404 	addi	fp,sp,16
8112c430:	e13ffd15 	stw	r4,-12(fp)
8112c434:	e17ffe15 	stw	r5,-8(fp)
8112c438:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8112c43c:	e0bffd17 	ldw	r2,-12(fp)
8112c440:	10800017 	ldw	r2,0(r2)
8112c444:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
8112c448:	e0bffc17 	ldw	r2,-16(fp)
8112c44c:	10c00a04 	addi	r3,r2,40
8112c450:	e0bffd17 	ldw	r2,-12(fp)
8112c454:	10800217 	ldw	r2,8(r2)
8112c458:	100f883a 	mov	r7,r2
8112c45c:	e1bfff17 	ldw	r6,-4(fp)
8112c460:	e17ffe17 	ldw	r5,-8(fp)
8112c464:	1809883a 	mov	r4,r3
8112c468:	112ce280 	call	8112ce28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
8112c46c:	e037883a 	mov	sp,fp
8112c470:	dfc00117 	ldw	ra,4(sp)
8112c474:	df000017 	ldw	fp,0(sp)
8112c478:	dec00204 	addi	sp,sp,8
8112c47c:	f800283a 	ret

8112c480 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
8112c480:	defffc04 	addi	sp,sp,-16
8112c484:	dfc00315 	stw	ra,12(sp)
8112c488:	df000215 	stw	fp,8(sp)
8112c48c:	df000204 	addi	fp,sp,8
8112c490:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8112c494:	e0bfff17 	ldw	r2,-4(fp)
8112c498:	10800017 	ldw	r2,0(r2)
8112c49c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
8112c4a0:	e0bffe17 	ldw	r2,-8(fp)
8112c4a4:	10c00a04 	addi	r3,r2,40
8112c4a8:	e0bfff17 	ldw	r2,-4(fp)
8112c4ac:	10800217 	ldw	r2,8(r2)
8112c4b0:	100b883a 	mov	r5,r2
8112c4b4:	1809883a 	mov	r4,r3
8112c4b8:	112ca140 	call	8112ca14 <altera_avalon_jtag_uart_close>
}
8112c4bc:	e037883a 	mov	sp,fp
8112c4c0:	dfc00117 	ldw	ra,4(sp)
8112c4c4:	df000017 	ldw	fp,0(sp)
8112c4c8:	dec00204 	addi	sp,sp,8
8112c4cc:	f800283a 	ret

8112c4d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8112c4d0:	defffa04 	addi	sp,sp,-24
8112c4d4:	dfc00515 	stw	ra,20(sp)
8112c4d8:	df000415 	stw	fp,16(sp)
8112c4dc:	df000404 	addi	fp,sp,16
8112c4e0:	e13ffd15 	stw	r4,-12(fp)
8112c4e4:	e17ffe15 	stw	r5,-8(fp)
8112c4e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8112c4ec:	e0bffd17 	ldw	r2,-12(fp)
8112c4f0:	10800017 	ldw	r2,0(r2)
8112c4f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
8112c4f8:	e0bffc17 	ldw	r2,-16(fp)
8112c4fc:	10800a04 	addi	r2,r2,40
8112c500:	e1bfff17 	ldw	r6,-4(fp)
8112c504:	e17ffe17 	ldw	r5,-8(fp)
8112c508:	1009883a 	mov	r4,r2
8112c50c:	112ca7c0 	call	8112ca7c <altera_avalon_jtag_uart_ioctl>
}
8112c510:	e037883a 	mov	sp,fp
8112c514:	dfc00117 	ldw	ra,4(sp)
8112c518:	df000017 	ldw	fp,0(sp)
8112c51c:	dec00204 	addi	sp,sp,8
8112c520:	f800283a 	ret

8112c524 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
8112c524:	defff104 	addi	sp,sp,-60
8112c528:	dfc00e15 	stw	ra,56(sp)
8112c52c:	df000d15 	stw	fp,52(sp)
8112c530:	df000d04 	addi	fp,sp,52
8112c534:	e13ff915 	stw	r4,-28(fp)
8112c538:	e17ffa15 	stw	r5,-24(fp)
8112c53c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
8112c540:	e0bff917 	ldw	r2,-28(fp)
8112c544:	10800c04 	addi	r2,r2,48
8112c548:	e0bff415 	stw	r2,-48(fp)
8112c54c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
8112c550:	e0bff80b 	ldhu	r2,-32(fp)
8112c554:	e0fff884 	addi	r3,fp,-30
8112c558:	180b883a 	mov	r5,r3
8112c55c:	1009883a 	mov	r4,r2
8112c560:	1122c840 	call	81122c84 <OSFlagCreate>
8112c564:	1007883a 	mov	r3,r2
8112c568:	e0bff417 	ldw	r2,-48(fp)
8112c56c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
8112c570:	e0bff917 	ldw	r2,-28(fp)
8112c574:	10800a04 	addi	r2,r2,40
8112c578:	e0bff515 	stw	r2,-44(fp)
8112c57c:	00800044 	movi	r2,1
8112c580:	e0bff78d 	sth	r2,-34(fp)
8112c584:	e0bff78b 	ldhu	r2,-34(fp)
8112c588:	1009883a 	mov	r4,r2
8112c58c:	11259980 	call	81125998 <OSSemCreate>
8112c590:	1007883a 	mov	r3,r2
8112c594:	e0bff517 	ldw	r2,-44(fp)
8112c598:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
8112c59c:	e0bff917 	ldw	r2,-28(fp)
8112c5a0:	10800b04 	addi	r2,r2,44
8112c5a4:	e0bff615 	stw	r2,-40(fp)
8112c5a8:	00800044 	movi	r2,1
8112c5ac:	e0bff70d 	sth	r2,-36(fp)
8112c5b0:	e0bff70b 	ldhu	r2,-36(fp)
8112c5b4:	1009883a 	mov	r4,r2
8112c5b8:	11259980 	call	81125998 <OSSemCreate>
8112c5bc:	1007883a 	mov	r3,r2
8112c5c0:	e0bff617 	ldw	r2,-40(fp)
8112c5c4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8112c5c8:	e0bff917 	ldw	r2,-28(fp)
8112c5cc:	00c00044 	movi	r3,1
8112c5d0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8112c5d4:	e0bff917 	ldw	r2,-28(fp)
8112c5d8:	10800017 	ldw	r2,0(r2)
8112c5dc:	10800104 	addi	r2,r2,4
8112c5e0:	1007883a 	mov	r3,r2
8112c5e4:	e0bff917 	ldw	r2,-28(fp)
8112c5e8:	10800817 	ldw	r2,32(r2)
8112c5ec:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
8112c5f0:	e0bffa17 	ldw	r2,-24(fp)
8112c5f4:	e0fffb17 	ldw	r3,-20(fp)
8112c5f8:	d8000015 	stw	zero,0(sp)
8112c5fc:	e1fff917 	ldw	r7,-28(fp)
8112c600:	01a044f4 	movhi	r6,33043
8112c604:	31b19b04 	addi	r6,r6,-14740
8112c608:	180b883a 	mov	r5,r3
8112c60c:	1009883a 	mov	r4,r2
8112c610:	11311540 	call	81131154 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8112c614:	e0bff917 	ldw	r2,-28(fp)
8112c618:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
8112c61c:	e0bff917 	ldw	r2,-28(fp)
8112c620:	10800204 	addi	r2,r2,8
8112c624:	d0e06317 	ldw	r3,-32372(gp)
8112c628:	e1fff917 	ldw	r7,-28(fp)
8112c62c:	01a044f4 	movhi	r6,33043
8112c630:	31b24404 	addi	r6,r6,-14064
8112c634:	180b883a 	mov	r5,r3
8112c638:	1009883a 	mov	r4,r2
8112c63c:	1130ac40 	call	81130ac4 <alt_alarm_start>
8112c640:	1000040e 	bge	r2,zero,8112c654 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8112c644:	e0fff917 	ldw	r3,-28(fp)
8112c648:	00a00034 	movhi	r2,32768
8112c64c:	10bfffc4 	addi	r2,r2,-1
8112c650:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
8112c654:	0001883a 	nop
8112c658:	e037883a 	mov	sp,fp
8112c65c:	dfc00117 	ldw	ra,4(sp)
8112c660:	df000017 	ldw	fp,0(sp)
8112c664:	dec00204 	addi	sp,sp,8
8112c668:	f800283a 	ret

8112c66c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
8112c66c:	defff204 	addi	sp,sp,-56
8112c670:	dfc00d15 	stw	ra,52(sp)
8112c674:	df000c15 	stw	fp,48(sp)
8112c678:	df000c04 	addi	fp,sp,48
8112c67c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
8112c680:	e0bfff17 	ldw	r2,-4(fp)
8112c684:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
8112c688:	e0bff617 	ldw	r2,-40(fp)
8112c68c:	10800017 	ldw	r2,0(r2)
8112c690:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8112c694:	e0bff717 	ldw	r2,-36(fp)
8112c698:	10800104 	addi	r2,r2,4
8112c69c:	10800037 	ldwio	r2,0(r2)
8112c6a0:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8112c6a4:	e0bff817 	ldw	r2,-32(fp)
8112c6a8:	1080c00c 	andi	r2,r2,768
8112c6ac:	10009126 	beq	r2,zero,8112c8f4 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
8112c6b0:	e0bff817 	ldw	r2,-32(fp)
8112c6b4:	1080400c 	andi	r2,r2,256
8112c6b8:	10004726 	beq	r2,zero,8112c7d8 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
8112c6bc:	00800074 	movhi	r2,1
8112c6c0:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8112c6c4:	e0bff617 	ldw	r2,-40(fp)
8112c6c8:	10800d17 	ldw	r2,52(r2)
8112c6cc:	10800044 	addi	r2,r2,1
8112c6d0:	1081ffcc 	andi	r2,r2,2047
8112c6d4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
8112c6d8:	e0bff617 	ldw	r2,-40(fp)
8112c6dc:	10c00e17 	ldw	r3,56(r2)
8112c6e0:	e0bff917 	ldw	r2,-28(fp)
8112c6e4:	18802726 	beq	r3,r2,8112c784 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
8112c6e8:	e0bff717 	ldw	r2,-36(fp)
8112c6ec:	10800037 	ldwio	r2,0(r2)
8112c6f0:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
8112c6f4:	e0bff417 	ldw	r2,-48(fp)
8112c6f8:	10a0000c 	andi	r2,r2,32768
8112c6fc:	10002326 	beq	r2,zero,8112c78c <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
8112c700:	e0bff617 	ldw	r2,-40(fp)
8112c704:	10800d17 	ldw	r2,52(r2)
8112c708:	e0fff417 	ldw	r3,-48(fp)
8112c70c:	1809883a 	mov	r4,r3
8112c710:	e0fff617 	ldw	r3,-40(fp)
8112c714:	1885883a 	add	r2,r3,r2
8112c718:	10801104 	addi	r2,r2,68
8112c71c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8112c720:	e0bff617 	ldw	r2,-40(fp)
8112c724:	10800d17 	ldw	r2,52(r2)
8112c728:	10800044 	addi	r2,r2,1
8112c72c:	10c1ffcc 	andi	r3,r2,2047
8112c730:	e0bff617 	ldw	r2,-40(fp)
8112c734:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
8112c738:	e0bff617 	ldw	r2,-40(fp)
8112c73c:	10800c17 	ldw	r2,48(r2)
8112c740:	e0bffb15 	stw	r2,-20(fp)
8112c744:	00800044 	movi	r2,1
8112c748:	e0bffc0d 	sth	r2,-16(fp)
8112c74c:	00800044 	movi	r2,1
8112c750:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8112c754:	d0a06943 	ldbu	r2,-32347(gp)
8112c758:	10803fcc 	andi	r2,r2,255
8112c75c:	103fd926 	beq	r2,zero,8112c6c4 <__reset+0xfb10c6c4>
  {
    OSFlagPost (group, flags, opt, &err);
8112c760:	e0bffc0b 	ldhu	r2,-16(fp)
8112c764:	e0fffc83 	ldbu	r3,-14(fp)
8112c768:	e13ffdc4 	addi	r4,fp,-9
8112c76c:	200f883a 	mov	r7,r4
8112c770:	180d883a 	mov	r6,r3
8112c774:	100b883a 	mov	r5,r2
8112c778:	e13ffb17 	ldw	r4,-20(fp)
8112c77c:	11238600 	call	81123860 <OSFlagPost>
      }
8112c780:	003fd006 	br	8112c6c4 <__reset+0xfb10c6c4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
8112c784:	0001883a 	nop
8112c788:	00000106 	br	8112c790 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
8112c78c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8112c790:	e0bff417 	ldw	r2,-48(fp)
8112c794:	10bfffec 	andhi	r2,r2,65535
8112c798:	10000f26 	beq	r2,zero,8112c7d8 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8112c79c:	e0bff617 	ldw	r2,-40(fp)
8112c7a0:	10c00817 	ldw	r3,32(r2)
8112c7a4:	00bfff84 	movi	r2,-2
8112c7a8:	1886703a 	and	r3,r3,r2
8112c7ac:	e0bff617 	ldw	r2,-40(fp)
8112c7b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8112c7b4:	e0bff717 	ldw	r2,-36(fp)
8112c7b8:	10800104 	addi	r2,r2,4
8112c7bc:	1007883a 	mov	r3,r2
8112c7c0:	e0bff617 	ldw	r2,-40(fp)
8112c7c4:	10800817 	ldw	r2,32(r2)
8112c7c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8112c7cc:	e0bff717 	ldw	r2,-36(fp)
8112c7d0:	10800104 	addi	r2,r2,4
8112c7d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
8112c7d8:	e0bff817 	ldw	r2,-32(fp)
8112c7dc:	1080800c 	andi	r2,r2,512
8112c7e0:	103fac26 	beq	r2,zero,8112c694 <__reset+0xfb10c694>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8112c7e4:	e0bff817 	ldw	r2,-32(fp)
8112c7e8:	1004d43a 	srli	r2,r2,16
8112c7ec:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8112c7f0:	00002606 	br	8112c88c <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8112c7f4:	e0bff717 	ldw	r2,-36(fp)
8112c7f8:	e0fff617 	ldw	r3,-40(fp)
8112c7fc:	18c01017 	ldw	r3,64(r3)
8112c800:	e13ff617 	ldw	r4,-40(fp)
8112c804:	20c7883a 	add	r3,r4,r3
8112c808:	18c21104 	addi	r3,r3,2116
8112c80c:	18c00003 	ldbu	r3,0(r3)
8112c810:	18c03fcc 	andi	r3,r3,255
8112c814:	18c0201c 	xori	r3,r3,128
8112c818:	18ffe004 	addi	r3,r3,-128
8112c81c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8112c820:	e0bff617 	ldw	r2,-40(fp)
8112c824:	10801017 	ldw	r2,64(r2)
8112c828:	10800044 	addi	r2,r2,1
8112c82c:	10c1ffcc 	andi	r3,r2,2047
8112c830:	e0bff617 	ldw	r2,-40(fp)
8112c834:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
8112c838:	e0bff617 	ldw	r2,-40(fp)
8112c83c:	10800c17 	ldw	r2,48(r2)
8112c840:	e0bffa15 	stw	r2,-24(fp)
8112c844:	00800084 	movi	r2,2
8112c848:	e0bffd0d 	sth	r2,-12(fp)
8112c84c:	00800044 	movi	r2,1
8112c850:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8112c854:	d0a06943 	ldbu	r2,-32347(gp)
8112c858:	10803fcc 	andi	r2,r2,255
8112c85c:	10000826 	beq	r2,zero,8112c880 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
8112c860:	e0bffd0b 	ldhu	r2,-12(fp)
8112c864:	e0fffd83 	ldbu	r3,-10(fp)
8112c868:	e13ffe04 	addi	r4,fp,-8
8112c86c:	200f883a 	mov	r7,r4
8112c870:	180d883a 	mov	r6,r3
8112c874:	100b883a 	mov	r5,r2
8112c878:	e13ffa17 	ldw	r4,-24(fp)
8112c87c:	11238600 	call	81123860 <OSFlagPost>

        space--;
8112c880:	e0bff517 	ldw	r2,-44(fp)
8112c884:	10bfffc4 	addi	r2,r2,-1
8112c888:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
8112c88c:	e0bff517 	ldw	r2,-44(fp)
8112c890:	10000526 	beq	r2,zero,8112c8a8 <altera_avalon_jtag_uart_irq+0x23c>
8112c894:	e0bff617 	ldw	r2,-40(fp)
8112c898:	10c01017 	ldw	r3,64(r2)
8112c89c:	e0bff617 	ldw	r2,-40(fp)
8112c8a0:	10800f17 	ldw	r2,60(r2)
8112c8a4:	18bfd31e 	bne	r3,r2,8112c7f4 <__reset+0xfb10c7f4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
8112c8a8:	e0bff517 	ldw	r2,-44(fp)
8112c8ac:	103f7926 	beq	r2,zero,8112c694 <__reset+0xfb10c694>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8112c8b0:	e0bff617 	ldw	r2,-40(fp)
8112c8b4:	10c00817 	ldw	r3,32(r2)
8112c8b8:	00bfff44 	movi	r2,-3
8112c8bc:	1886703a 	and	r3,r3,r2
8112c8c0:	e0bff617 	ldw	r2,-40(fp)
8112c8c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8112c8c8:	e0bff617 	ldw	r2,-40(fp)
8112c8cc:	10800017 	ldw	r2,0(r2)
8112c8d0:	10800104 	addi	r2,r2,4
8112c8d4:	1007883a 	mov	r3,r2
8112c8d8:	e0bff617 	ldw	r2,-40(fp)
8112c8dc:	10800817 	ldw	r2,32(r2)
8112c8e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8112c8e4:	e0bff717 	ldw	r2,-36(fp)
8112c8e8:	10800104 	addi	r2,r2,4
8112c8ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
8112c8f0:	003f6806 	br	8112c694 <__reset+0xfb10c694>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
8112c8f4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8112c8f8:	0001883a 	nop
8112c8fc:	e037883a 	mov	sp,fp
8112c900:	dfc00117 	ldw	ra,4(sp)
8112c904:	df000017 	ldw	fp,0(sp)
8112c908:	dec00204 	addi	sp,sp,8
8112c90c:	f800283a 	ret

8112c910 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
8112c910:	defff904 	addi	sp,sp,-28
8112c914:	dfc00615 	stw	ra,24(sp)
8112c918:	df000515 	stw	fp,20(sp)
8112c91c:	df000504 	addi	fp,sp,20
8112c920:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
8112c924:	e0bfff17 	ldw	r2,-4(fp)
8112c928:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8112c92c:	e0bffb17 	ldw	r2,-20(fp)
8112c930:	10800017 	ldw	r2,0(r2)
8112c934:	10800104 	addi	r2,r2,4
8112c938:	10800037 	ldwio	r2,0(r2)
8112c93c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8112c940:	e0bffc17 	ldw	r2,-16(fp)
8112c944:	1081000c 	andi	r2,r2,1024
8112c948:	10000b26 	beq	r2,zero,8112c978 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8112c94c:	e0bffb17 	ldw	r2,-20(fp)
8112c950:	10800017 	ldw	r2,0(r2)
8112c954:	10800104 	addi	r2,r2,4
8112c958:	1007883a 	mov	r3,r2
8112c95c:	e0bffb17 	ldw	r2,-20(fp)
8112c960:	10800817 	ldw	r2,32(r2)
8112c964:	10810014 	ori	r2,r2,1024
8112c968:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8112c96c:	e0bffb17 	ldw	r2,-20(fp)
8112c970:	10000915 	stw	zero,36(r2)
8112c974:	00002106 	br	8112c9fc <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
8112c978:	e0bffb17 	ldw	r2,-20(fp)
8112c97c:	10c00917 	ldw	r3,36(r2)
8112c980:	00a00034 	movhi	r2,32768
8112c984:	10bfff04 	addi	r2,r2,-4
8112c988:	10c01c36 	bltu	r2,r3,8112c9fc <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
8112c98c:	e0bffb17 	ldw	r2,-20(fp)
8112c990:	10800917 	ldw	r2,36(r2)
8112c994:	10c00044 	addi	r3,r2,1
8112c998:	e0bffb17 	ldw	r2,-20(fp)
8112c99c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
8112c9a0:	e0bffb17 	ldw	r2,-20(fp)
8112c9a4:	10c00917 	ldw	r3,36(r2)
8112c9a8:	e0bffb17 	ldw	r2,-20(fp)
8112c9ac:	10800117 	ldw	r2,4(r2)
8112c9b0:	18801236 	bltu	r3,r2,8112c9fc <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
8112c9b4:	e0bffb17 	ldw	r2,-20(fp)
8112c9b8:	10800c17 	ldw	r2,48(r2)
8112c9bc:	e0bffd15 	stw	r2,-12(fp)
8112c9c0:	00800104 	movi	r2,4
8112c9c4:	e0bffe0d 	sth	r2,-8(fp)
8112c9c8:	00800044 	movi	r2,1
8112c9cc:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8112c9d0:	d0a06943 	ldbu	r2,-32347(gp)
8112c9d4:	10803fcc 	andi	r2,r2,255
8112c9d8:	10000826 	beq	r2,zero,8112c9fc <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
8112c9dc:	e0bffe0b 	ldhu	r2,-8(fp)
8112c9e0:	e0fffe83 	ldbu	r3,-6(fp)
8112c9e4:	e13ffec4 	addi	r4,fp,-5
8112c9e8:	200f883a 	mov	r7,r4
8112c9ec:	180d883a 	mov	r6,r3
8112c9f0:	100b883a 	mov	r5,r2
8112c9f4:	e13ffd17 	ldw	r4,-12(fp)
8112c9f8:	11238600 	call	81123860 <OSFlagPost>
8112c9fc:	d0a06317 	ldw	r2,-32372(gp)
    }
  }

  return alt_ticks_per_second();
}
8112ca00:	e037883a 	mov	sp,fp
8112ca04:	dfc00117 	ldw	ra,4(sp)
8112ca08:	df000017 	ldw	fp,0(sp)
8112ca0c:	dec00204 	addi	sp,sp,8
8112ca10:	f800283a 	ret

8112ca14 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
8112ca14:	defffd04 	addi	sp,sp,-12
8112ca18:	df000215 	stw	fp,8(sp)
8112ca1c:	df000204 	addi	fp,sp,8
8112ca20:	e13ffe15 	stw	r4,-8(fp)
8112ca24:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8112ca28:	00000506 	br	8112ca40 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8112ca2c:	e0bfff17 	ldw	r2,-4(fp)
8112ca30:	1090000c 	andi	r2,r2,16384
8112ca34:	10000226 	beq	r2,zero,8112ca40 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
8112ca38:	00bffd44 	movi	r2,-11
8112ca3c:	00000b06 	br	8112ca6c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8112ca40:	e0bffe17 	ldw	r2,-8(fp)
8112ca44:	10c01017 	ldw	r3,64(r2)
8112ca48:	e0bffe17 	ldw	r2,-8(fp)
8112ca4c:	10800f17 	ldw	r2,60(r2)
8112ca50:	18800526 	beq	r3,r2,8112ca68 <altera_avalon_jtag_uart_close+0x54>
8112ca54:	e0bffe17 	ldw	r2,-8(fp)
8112ca58:	10c00917 	ldw	r3,36(r2)
8112ca5c:	e0bffe17 	ldw	r2,-8(fp)
8112ca60:	10800117 	ldw	r2,4(r2)
8112ca64:	18bff136 	bltu	r3,r2,8112ca2c <__reset+0xfb10ca2c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8112ca68:	0005883a 	mov	r2,zero
}
8112ca6c:	e037883a 	mov	sp,fp
8112ca70:	df000017 	ldw	fp,0(sp)
8112ca74:	dec00104 	addi	sp,sp,4
8112ca78:	f800283a 	ret

8112ca7c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
8112ca7c:	defffa04 	addi	sp,sp,-24
8112ca80:	df000515 	stw	fp,20(sp)
8112ca84:	df000504 	addi	fp,sp,20
8112ca88:	e13ffd15 	stw	r4,-12(fp)
8112ca8c:	e17ffe15 	stw	r5,-8(fp)
8112ca90:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
8112ca94:	00bff9c4 	movi	r2,-25
8112ca98:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
8112ca9c:	e0bffe17 	ldw	r2,-8(fp)
8112caa0:	10da8060 	cmpeqi	r3,r2,27137
8112caa4:	1800031e 	bne	r3,zero,8112cab4 <altera_avalon_jtag_uart_ioctl+0x38>
8112caa8:	109a80a0 	cmpeqi	r2,r2,27138
8112caac:	1000181e 	bne	r2,zero,8112cb10 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
8112cab0:	00002906 	br	8112cb58 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
8112cab4:	e0bffd17 	ldw	r2,-12(fp)
8112cab8:	10c00117 	ldw	r3,4(r2)
8112cabc:	00a00034 	movhi	r2,32768
8112cac0:	10bfffc4 	addi	r2,r2,-1
8112cac4:	18802126 	beq	r3,r2,8112cb4c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
8112cac8:	e0bfff17 	ldw	r2,-4(fp)
8112cacc:	10800017 	ldw	r2,0(r2)
8112cad0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
8112cad4:	e0bffc17 	ldw	r2,-16(fp)
8112cad8:	10800090 	cmplti	r2,r2,2
8112cadc:	1000061e 	bne	r2,zero,8112caf8 <altera_avalon_jtag_uart_ioctl+0x7c>
8112cae0:	e0fffc17 	ldw	r3,-16(fp)
8112cae4:	00a00034 	movhi	r2,32768
8112cae8:	10bfffc4 	addi	r2,r2,-1
8112caec:	18800226 	beq	r3,r2,8112caf8 <altera_avalon_jtag_uart_ioctl+0x7c>
8112caf0:	e0bffc17 	ldw	r2,-16(fp)
8112caf4:	00000206 	br	8112cb00 <altera_avalon_jtag_uart_ioctl+0x84>
8112caf8:	00a00034 	movhi	r2,32768
8112cafc:	10bfff84 	addi	r2,r2,-2
8112cb00:	e0fffd17 	ldw	r3,-12(fp)
8112cb04:	18800115 	stw	r2,4(r3)
      rc = 0;
8112cb08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8112cb0c:	00000f06 	br	8112cb4c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
8112cb10:	e0bffd17 	ldw	r2,-12(fp)
8112cb14:	10c00117 	ldw	r3,4(r2)
8112cb18:	00a00034 	movhi	r2,32768
8112cb1c:	10bfffc4 	addi	r2,r2,-1
8112cb20:	18800c26 	beq	r3,r2,8112cb54 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
8112cb24:	e0bffd17 	ldw	r2,-12(fp)
8112cb28:	10c00917 	ldw	r3,36(r2)
8112cb2c:	e0bffd17 	ldw	r2,-12(fp)
8112cb30:	10800117 	ldw	r2,4(r2)
8112cb34:	1885803a 	cmpltu	r2,r3,r2
8112cb38:	10c03fcc 	andi	r3,r2,255
8112cb3c:	e0bfff17 	ldw	r2,-4(fp)
8112cb40:	10c00015 	stw	r3,0(r2)
      rc = 0;
8112cb44:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8112cb48:	00000206 	br	8112cb54 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
8112cb4c:	0001883a 	nop
8112cb50:	00000106 	br	8112cb58 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
8112cb54:	0001883a 	nop

  default:
    break;
  }

  return rc;
8112cb58:	e0bffb17 	ldw	r2,-20(fp)
}
8112cb5c:	e037883a 	mov	sp,fp
8112cb60:	df000017 	ldw	fp,0(sp)
8112cb64:	dec00104 	addi	sp,sp,4
8112cb68:	f800283a 	ret

8112cb6c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
8112cb6c:	deffed04 	addi	sp,sp,-76
8112cb70:	dfc01215 	stw	ra,72(sp)
8112cb74:	df001115 	stw	fp,68(sp)
8112cb78:	df001104 	addi	fp,sp,68
8112cb7c:	e13ffc15 	stw	r4,-16(fp)
8112cb80:	e17ffd15 	stw	r5,-12(fp)
8112cb84:	e1bffe15 	stw	r6,-8(fp)
8112cb88:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
8112cb8c:	e0bffd17 	ldw	r2,-12(fp)
8112cb90:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
8112cb94:	e0bffc17 	ldw	r2,-16(fp)
8112cb98:	10800a17 	ldw	r2,40(r2)
8112cb9c:	e0bff815 	stw	r2,-32(fp)
8112cba0:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8112cba4:	e0bff90b 	ldhu	r2,-28(fp)
8112cba8:	e0fffb04 	addi	r3,fp,-20
8112cbac:	180d883a 	mov	r6,r3
8112cbb0:	100b883a 	mov	r5,r2
8112cbb4:	e13ff817 	ldw	r4,-32(fp)
8112cbb8:	1125cb00 	call	81125cb0 <OSSemPend>

  while (space > 0)
8112cbbc:	00006106 	br	8112cd44 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
8112cbc0:	e0bffc17 	ldw	r2,-16(fp)
8112cbc4:	10800d17 	ldw	r2,52(r2)
8112cbc8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
8112cbcc:	e0bffc17 	ldw	r2,-16(fp)
8112cbd0:	10800e17 	ldw	r2,56(r2)
8112cbd4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
8112cbd8:	e0fff317 	ldw	r3,-52(fp)
8112cbdc:	e0bff417 	ldw	r2,-48(fp)
8112cbe0:	18800536 	bltu	r3,r2,8112cbf8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
8112cbe4:	e0fff317 	ldw	r3,-52(fp)
8112cbe8:	e0bff417 	ldw	r2,-48(fp)
8112cbec:	1885c83a 	sub	r2,r3,r2
8112cbf0:	e0bff115 	stw	r2,-60(fp)
8112cbf4:	00000406 	br	8112cc08 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
8112cbf8:	00c20004 	movi	r3,2048
8112cbfc:	e0bff417 	ldw	r2,-48(fp)
8112cc00:	1885c83a 	sub	r2,r3,r2
8112cc04:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
8112cc08:	e0bff117 	ldw	r2,-60(fp)
8112cc0c:	10001e26 	beq	r2,zero,8112cc88 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
8112cc10:	e0fffe17 	ldw	r3,-8(fp)
8112cc14:	e0bff117 	ldw	r2,-60(fp)
8112cc18:	1880022e 	bgeu	r3,r2,8112cc24 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
8112cc1c:	e0bffe17 	ldw	r2,-8(fp)
8112cc20:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
8112cc24:	e0bffc17 	ldw	r2,-16(fp)
8112cc28:	10c01104 	addi	r3,r2,68
8112cc2c:	e0bff417 	ldw	r2,-48(fp)
8112cc30:	1885883a 	add	r2,r3,r2
8112cc34:	e1bff117 	ldw	r6,-60(fp)
8112cc38:	100b883a 	mov	r5,r2
8112cc3c:	e13ff017 	ldw	r4,-64(fp)
8112cc40:	110b26c0 	call	8110b26c <memcpy>
      ptr   += n;
8112cc44:	e0fff017 	ldw	r3,-64(fp)
8112cc48:	e0bff117 	ldw	r2,-60(fp)
8112cc4c:	1885883a 	add	r2,r3,r2
8112cc50:	e0bff015 	stw	r2,-64(fp)
      space -= n;
8112cc54:	e0fffe17 	ldw	r3,-8(fp)
8112cc58:	e0bff117 	ldw	r2,-60(fp)
8112cc5c:	1885c83a 	sub	r2,r3,r2
8112cc60:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8112cc64:	e0fff417 	ldw	r3,-48(fp)
8112cc68:	e0bff117 	ldw	r2,-60(fp)
8112cc6c:	1885883a 	add	r2,r3,r2
8112cc70:	10c1ffcc 	andi	r3,r2,2047
8112cc74:	e0bffc17 	ldw	r2,-16(fp)
8112cc78:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
8112cc7c:	e0bffe17 	ldw	r2,-8(fp)
8112cc80:	00bfcf16 	blt	zero,r2,8112cbc0 <__reset+0xfb10cbc0>
8112cc84:	00000106 	br	8112cc8c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
8112cc88:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
8112cc8c:	e0fff017 	ldw	r3,-64(fp)
8112cc90:	e0bffd17 	ldw	r2,-12(fp)
8112cc94:	18802e1e 	bne	r3,r2,8112cd50 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8112cc98:	e0bfff17 	ldw	r2,-4(fp)
8112cc9c:	1090000c 	andi	r2,r2,16384
8112cca0:	10002d1e 	bne	r2,zero,8112cd58 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
8112cca4:	d0a06943 	ldbu	r2,-32347(gp)
8112cca8:	10803fcc 	andi	r2,r2,255
8112ccac:	10800058 	cmpnei	r2,r2,1
8112ccb0:	1000161e 	bne	r2,zero,8112cd0c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
8112ccb4:	e0bffc17 	ldw	r2,-16(fp)
8112ccb8:	10800c17 	ldw	r2,48(r2)
8112ccbc:	e0bff215 	stw	r2,-56(fp)
8112ccc0:	00800144 	movi	r2,5
8112ccc4:	e0bff98d 	sth	r2,-26(fp)
8112ccc8:	00bfe0c4 	movi	r2,-125
8112cccc:	e0bffa05 	stb	r2,-24(fp)
8112ccd0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8112ccd4:	d0a06943 	ldbu	r2,-32347(gp)
8112ccd8:	10803fcc 	andi	r2,r2,255
8112ccdc:	10001526 	beq	r2,zero,8112cd34 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8112cce0:	e0fff98b 	ldhu	r3,-26(fp)
8112cce4:	e13ffa03 	ldbu	r4,-24(fp)
8112cce8:	e17ffa8b 	ldhu	r5,-22(fp)
8112ccec:	e0bffb44 	addi	r2,fp,-19
8112ccf0:	d8800015 	stw	r2,0(sp)
8112ccf4:	280f883a 	mov	r7,r5
8112ccf8:	200d883a 	mov	r6,r4
8112ccfc:	180b883a 	mov	r5,r3
8112cd00:	e13ff217 	ldw	r4,-56(fp)
8112cd04:	11232480 	call	81123248 <OSFlagPend>
8112cd08:	00000a06 	br	8112cd34 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
8112cd0c:	0001883a 	nop
8112cd10:	e0bffc17 	ldw	r2,-16(fp)
8112cd14:	10c00d17 	ldw	r3,52(r2)
8112cd18:	e0bff317 	ldw	r2,-52(fp)
8112cd1c:	1880051e 	bne	r3,r2,8112cd34 <altera_avalon_jtag_uart_read+0x1c8>
8112cd20:	e0bffc17 	ldw	r2,-16(fp)
8112cd24:	10c00917 	ldw	r3,36(r2)
8112cd28:	e0bffc17 	ldw	r2,-16(fp)
8112cd2c:	10800117 	ldw	r2,4(r2)
8112cd30:	18bff736 	bltu	r3,r2,8112cd10 <__reset+0xfb10cd10>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
8112cd34:	e0bffc17 	ldw	r2,-16(fp)
8112cd38:	10c00d17 	ldw	r3,52(r2)
8112cd3c:	e0bff317 	ldw	r2,-52(fp)
8112cd40:	18800726 	beq	r3,r2,8112cd60 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8112cd44:	e0bffe17 	ldw	r2,-8(fp)
8112cd48:	00bf9d16 	blt	zero,r2,8112cbc0 <__reset+0xfb10cbc0>
8112cd4c:	00000506 	br	8112cd64 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8112cd50:	0001883a 	nop
8112cd54:	00000306 	br	8112cd64 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
8112cd58:	0001883a 	nop
8112cd5c:	00000106 	br	8112cd64 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8112cd60:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
8112cd64:	e0bffc17 	ldw	r2,-16(fp)
8112cd68:	10800a17 	ldw	r2,40(r2)
8112cd6c:	1009883a 	mov	r4,r2
8112cd70:	11260280 	call	81126028 <OSSemPost>

  if (ptr != buffer)
8112cd74:	e0fff017 	ldw	r3,-64(fp)
8112cd78:	e0bffd17 	ldw	r2,-12(fp)
8112cd7c:	18801826 	beq	r3,r2,8112cde0 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cd80:	0005303a 	rdctl	r2,status
8112cd84:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cd88:	e0fff717 	ldw	r3,-36(fp)
8112cd8c:	00bfff84 	movi	r2,-2
8112cd90:	1884703a 	and	r2,r3,r2
8112cd94:	1001703a 	wrctl	status,r2
  
  return context;
8112cd98:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
8112cd9c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8112cda0:	e0bffc17 	ldw	r2,-16(fp)
8112cda4:	10800817 	ldw	r2,32(r2)
8112cda8:	10c00054 	ori	r3,r2,1
8112cdac:	e0bffc17 	ldw	r2,-16(fp)
8112cdb0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8112cdb4:	e0bffc17 	ldw	r2,-16(fp)
8112cdb8:	10800017 	ldw	r2,0(r2)
8112cdbc:	10800104 	addi	r2,r2,4
8112cdc0:	1007883a 	mov	r3,r2
8112cdc4:	e0bffc17 	ldw	r2,-16(fp)
8112cdc8:	10800817 	ldw	r2,32(r2)
8112cdcc:	18800035 	stwio	r2,0(r3)
8112cdd0:	e0bff617 	ldw	r2,-40(fp)
8112cdd4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cdd8:	e0bff517 	ldw	r2,-44(fp)
8112cddc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
8112cde0:	e0fff017 	ldw	r3,-64(fp)
8112cde4:	e0bffd17 	ldw	r2,-12(fp)
8112cde8:	18800426 	beq	r3,r2,8112cdfc <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
8112cdec:	e0fff017 	ldw	r3,-64(fp)
8112cdf0:	e0bffd17 	ldw	r2,-12(fp)
8112cdf4:	1885c83a 	sub	r2,r3,r2
8112cdf8:	00000606 	br	8112ce14 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
8112cdfc:	e0bfff17 	ldw	r2,-4(fp)
8112ce00:	1090000c 	andi	r2,r2,16384
8112ce04:	10000226 	beq	r2,zero,8112ce10 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
8112ce08:	00bffd44 	movi	r2,-11
8112ce0c:	00000106 	br	8112ce14 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
8112ce10:	00bffec4 	movi	r2,-5
}
8112ce14:	e037883a 	mov	sp,fp
8112ce18:	dfc00117 	ldw	ra,4(sp)
8112ce1c:	df000017 	ldw	fp,0(sp)
8112ce20:	dec00204 	addi	sp,sp,8
8112ce24:	f800283a 	ret

8112ce28 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
8112ce28:	deffed04 	addi	sp,sp,-76
8112ce2c:	dfc01215 	stw	ra,72(sp)
8112ce30:	df001115 	stw	fp,68(sp)
8112ce34:	df001104 	addi	fp,sp,68
8112ce38:	e13ffc15 	stw	r4,-16(fp)
8112ce3c:	e17ffd15 	stw	r5,-12(fp)
8112ce40:	e1bffe15 	stw	r6,-8(fp)
8112ce44:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8112ce48:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
8112ce4c:	e0bffd17 	ldw	r2,-12(fp)
8112ce50:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
8112ce54:	e0bffc17 	ldw	r2,-16(fp)
8112ce58:	10800b17 	ldw	r2,44(r2)
8112ce5c:	e0bff815 	stw	r2,-32(fp)
8112ce60:	e03ff90d 	sth	zero,-28(fp)
8112ce64:	e0bff90b 	ldhu	r2,-28(fp)
8112ce68:	e0fffb44 	addi	r3,fp,-19
8112ce6c:	180d883a 	mov	r6,r3
8112ce70:	100b883a 	mov	r5,r2
8112ce74:	e13ff817 	ldw	r4,-32(fp)
8112ce78:	1125cb00 	call	81125cb0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8112ce7c:	00003706 	br	8112cf5c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
8112ce80:	e0bffc17 	ldw	r2,-16(fp)
8112ce84:	10800f17 	ldw	r2,60(r2)
8112ce88:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
8112ce8c:	e0bffc17 	ldw	r2,-16(fp)
8112ce90:	10801017 	ldw	r2,64(r2)
8112ce94:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
8112ce98:	e0fff417 	ldw	r3,-48(fp)
8112ce9c:	e0bff017 	ldw	r2,-64(fp)
8112cea0:	1880062e 	bgeu	r3,r2,8112cebc <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
8112cea4:	e0fff017 	ldw	r3,-64(fp)
8112cea8:	e0bff417 	ldw	r2,-48(fp)
8112ceac:	1885c83a 	sub	r2,r3,r2
8112ceb0:	10bfffc4 	addi	r2,r2,-1
8112ceb4:	e0bff115 	stw	r2,-60(fp)
8112ceb8:	00000b06 	br	8112cee8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
8112cebc:	e0bff017 	ldw	r2,-64(fp)
8112cec0:	10000526 	beq	r2,zero,8112ced8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
8112cec4:	00c20004 	movi	r3,2048
8112cec8:	e0bff417 	ldw	r2,-48(fp)
8112cecc:	1885c83a 	sub	r2,r3,r2
8112ced0:	e0bff115 	stw	r2,-60(fp)
8112ced4:	00000406 	br	8112cee8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
8112ced8:	00c1ffc4 	movi	r3,2047
8112cedc:	e0bff417 	ldw	r2,-48(fp)
8112cee0:	1885c83a 	sub	r2,r3,r2
8112cee4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
8112cee8:	e0bff117 	ldw	r2,-60(fp)
8112ceec:	10001e26 	beq	r2,zero,8112cf68 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
8112cef0:	e0fffe17 	ldw	r3,-8(fp)
8112cef4:	e0bff117 	ldw	r2,-60(fp)
8112cef8:	1880022e 	bgeu	r3,r2,8112cf04 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
8112cefc:	e0bffe17 	ldw	r2,-8(fp)
8112cf00:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
8112cf04:	e0bffc17 	ldw	r2,-16(fp)
8112cf08:	10c21104 	addi	r3,r2,2116
8112cf0c:	e0bff417 	ldw	r2,-48(fp)
8112cf10:	1885883a 	add	r2,r3,r2
8112cf14:	e1bff117 	ldw	r6,-60(fp)
8112cf18:	e17ffd17 	ldw	r5,-12(fp)
8112cf1c:	1009883a 	mov	r4,r2
8112cf20:	110b26c0 	call	8110b26c <memcpy>
      ptr   += n;
8112cf24:	e0fffd17 	ldw	r3,-12(fp)
8112cf28:	e0bff117 	ldw	r2,-60(fp)
8112cf2c:	1885883a 	add	r2,r3,r2
8112cf30:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
8112cf34:	e0fffe17 	ldw	r3,-8(fp)
8112cf38:	e0bff117 	ldw	r2,-60(fp)
8112cf3c:	1885c83a 	sub	r2,r3,r2
8112cf40:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8112cf44:	e0fff417 	ldw	r3,-48(fp)
8112cf48:	e0bff117 	ldw	r2,-60(fp)
8112cf4c:	1885883a 	add	r2,r3,r2
8112cf50:	10c1ffcc 	andi	r3,r2,2047
8112cf54:	e0bffc17 	ldw	r2,-16(fp)
8112cf58:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8112cf5c:	e0bffe17 	ldw	r2,-8(fp)
8112cf60:	00bfc716 	blt	zero,r2,8112ce80 <__reset+0xfb10ce80>
8112cf64:	00000106 	br	8112cf6c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8112cf68:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cf6c:	0005303a 	rdctl	r2,status
8112cf70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cf74:	e0fff717 	ldw	r3,-36(fp)
8112cf78:	00bfff84 	movi	r2,-2
8112cf7c:	1884703a 	and	r2,r3,r2
8112cf80:	1001703a 	wrctl	status,r2
  
  return context;
8112cf84:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8112cf88:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8112cf8c:	e0bffc17 	ldw	r2,-16(fp)
8112cf90:	10800817 	ldw	r2,32(r2)
8112cf94:	10c00094 	ori	r3,r2,2
8112cf98:	e0bffc17 	ldw	r2,-16(fp)
8112cf9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8112cfa0:	e0bffc17 	ldw	r2,-16(fp)
8112cfa4:	10800017 	ldw	r2,0(r2)
8112cfa8:	10800104 	addi	r2,r2,4
8112cfac:	1007883a 	mov	r3,r2
8112cfb0:	e0bffc17 	ldw	r2,-16(fp)
8112cfb4:	10800817 	ldw	r2,32(r2)
8112cfb8:	18800035 	stwio	r2,0(r3)
8112cfbc:	e0bff617 	ldw	r2,-40(fp)
8112cfc0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cfc4:	e0bff317 	ldw	r2,-52(fp)
8112cfc8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8112cfcc:	e0bffe17 	ldw	r2,-8(fp)
8112cfd0:	00802a0e 	bge	zero,r2,8112d07c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
8112cfd4:	e0bfff17 	ldw	r2,-4(fp)
8112cfd8:	1090000c 	andi	r2,r2,16384
8112cfdc:	10002a1e 	bne	r2,zero,8112d088 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
8112cfe0:	d0a06943 	ldbu	r2,-32347(gp)
8112cfe4:	10803fcc 	andi	r2,r2,255
8112cfe8:	10800058 	cmpnei	r2,r2,1
8112cfec:	1000161e 	bne	r2,zero,8112d048 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
8112cff0:	e0bffc17 	ldw	r2,-16(fp)
8112cff4:	10800c17 	ldw	r2,48(r2)
8112cff8:	e0bff515 	stw	r2,-44(fp)
8112cffc:	00800184 	movi	r2,6
8112d000:	e0bff98d 	sth	r2,-26(fp)
8112d004:	00bfe0c4 	movi	r2,-125
8112d008:	e0bffa05 	stb	r2,-24(fp)
8112d00c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8112d010:	d0a06943 	ldbu	r2,-32347(gp)
8112d014:	10803fcc 	andi	r2,r2,255
8112d018:	10001526 	beq	r2,zero,8112d070 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8112d01c:	e0fff98b 	ldhu	r3,-26(fp)
8112d020:	e13ffa03 	ldbu	r4,-24(fp)
8112d024:	e17ffa8b 	ldhu	r5,-22(fp)
8112d028:	e0bffb04 	addi	r2,fp,-20
8112d02c:	d8800015 	stw	r2,0(sp)
8112d030:	280f883a 	mov	r7,r5
8112d034:	200d883a 	mov	r6,r4
8112d038:	180b883a 	mov	r5,r3
8112d03c:	e13ff517 	ldw	r4,-44(fp)
8112d040:	11232480 	call	81123248 <OSFlagPend>
8112d044:	00000a06 	br	8112d070 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8112d048:	0001883a 	nop
8112d04c:	e0bffc17 	ldw	r2,-16(fp)
8112d050:	10c01017 	ldw	r3,64(r2)
8112d054:	e0bff017 	ldw	r2,-64(fp)
8112d058:	1880051e 	bne	r3,r2,8112d070 <altera_avalon_jtag_uart_write+0x248>
8112d05c:	e0bffc17 	ldw	r2,-16(fp)
8112d060:	10c00917 	ldw	r3,36(r2)
8112d064:	e0bffc17 	ldw	r2,-16(fp)
8112d068:	10800117 	ldw	r2,4(r2)
8112d06c:	18bff736 	bltu	r3,r2,8112d04c <__reset+0xfb10d04c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
8112d070:	e0bffc17 	ldw	r2,-16(fp)
8112d074:	10800917 	ldw	r2,36(r2)
8112d078:	1000051e 	bne	r2,zero,8112d090 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
8112d07c:	e0bffe17 	ldw	r2,-8(fp)
8112d080:	00bfb616 	blt	zero,r2,8112cf5c <__reset+0xfb10cf5c>
8112d084:	00000306 	br	8112d094 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8112d088:	0001883a 	nop
8112d08c:	00000106 	br	8112d094 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
8112d090:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
8112d094:	e0bffc17 	ldw	r2,-16(fp)
8112d098:	10800b17 	ldw	r2,44(r2)
8112d09c:	1009883a 	mov	r4,r2
8112d0a0:	11260280 	call	81126028 <OSSemPost>

  if (ptr != start)
8112d0a4:	e0fffd17 	ldw	r3,-12(fp)
8112d0a8:	e0bff217 	ldw	r2,-56(fp)
8112d0ac:	18800426 	beq	r3,r2,8112d0c0 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
8112d0b0:	e0fffd17 	ldw	r3,-12(fp)
8112d0b4:	e0bff217 	ldw	r2,-56(fp)
8112d0b8:	1885c83a 	sub	r2,r3,r2
8112d0bc:	00000606 	br	8112d0d8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
8112d0c0:	e0bfff17 	ldw	r2,-4(fp)
8112d0c4:	1090000c 	andi	r2,r2,16384
8112d0c8:	10000226 	beq	r2,zero,8112d0d4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
8112d0cc:	00bffd44 	movi	r2,-11
8112d0d0:	00000106 	br	8112d0d8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8112d0d4:	00bffec4 	movi	r2,-5
}
8112d0d8:	e037883a 	mov	sp,fp
8112d0dc:	dfc00117 	ldw	ra,4(sp)
8112d0e0:	df000017 	ldw	fp,0(sp)
8112d0e4:	dec00204 	addi	sp,sp,8
8112d0e8:	f800283a 	ret

8112d0ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112d0ec:	defffe04 	addi	sp,sp,-8
8112d0f0:	dfc00115 	stw	ra,4(sp)
8112d0f4:	df000015 	stw	fp,0(sp)
8112d0f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112d0fc:	d0a01517 	ldw	r2,-32684(gp)
8112d100:	10000326 	beq	r2,zero,8112d110 <alt_get_errno+0x24>
8112d104:	d0a01517 	ldw	r2,-32684(gp)
8112d108:	103ee83a 	callr	r2
8112d10c:	00000106 	br	8112d114 <alt_get_errno+0x28>
8112d110:	d0a05804 	addi	r2,gp,-32416
}
8112d114:	e037883a 	mov	sp,fp
8112d118:	dfc00117 	ldw	ra,4(sp)
8112d11c:	df000017 	ldw	fp,0(sp)
8112d120:	dec00204 	addi	sp,sp,8
8112d124:	f800283a 	ret

8112d128 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
8112d128:	defffc04 	addi	sp,sp,-16
8112d12c:	df000315 	stw	fp,12(sp)
8112d130:	df000304 	addi	fp,sp,12
8112d134:	e13ffe15 	stw	r4,-8(fp)
8112d138:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
8112d13c:	e0bffe17 	ldw	r2,-8(fp)
8112d140:	10800317 	ldw	r2,12(r2)
8112d144:	10800037 	ldwio	r2,0(r2)
8112d148:	1080040c 	andi	r2,r2,16
8112d14c:	10000226 	beq	r2,zero,8112d158 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
8112d150:	00bffc04 	movi	r2,-16
8112d154:	00003906 	br	8112d23c <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
8112d158:	e0bffe17 	ldw	r2,-8(fp)
8112d15c:	10800317 	ldw	r2,12(r2)
8112d160:	10800404 	addi	r2,r2,16
8112d164:	e0fffe17 	ldw	r3,-8(fp)
8112d168:	18c00317 	ldw	r3,12(r3)
8112d16c:	18c00404 	addi	r3,r3,16
8112d170:	19000037 	ldwio	r4,0(r3)
8112d174:	00fff7c4 	movi	r3,-33
8112d178:	20c6703a 	and	r3,r4,r3
8112d17c:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
8112d180:	e0bffe17 	ldw	r2,-8(fp)
8112d184:	10800317 	ldw	r2,12(r2)
8112d188:	00c03fc4 	movi	r3,255
8112d18c:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
8112d190:	e0bffe17 	ldw	r2,-8(fp)
8112d194:	10800317 	ldw	r2,12(r2)
8112d198:	10800804 	addi	r2,r2,32
8112d19c:	e0ffff17 	ldw	r3,-4(fp)
8112d1a0:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
8112d1a4:	e0bffe17 	ldw	r2,-8(fp)
8112d1a8:	10800917 	ldw	r2,36(r2)
8112d1ac:	10001126 	beq	r2,zero,8112d1f4 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8112d1b0:	e0bffe17 	ldw	r2,-8(fp)
8112d1b4:	10800317 	ldw	r2,12(r2)
8112d1b8:	10800404 	addi	r2,r2,16
8112d1bc:	10800037 	ldwio	r2,0(r2)
8112d1c0:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
8112d1c4:	e0bffe17 	ldw	r2,-8(fp)
8112d1c8:	10c00b17 	ldw	r3,44(r2)
8112d1cc:	e0bffd17 	ldw	r2,-12(fp)
8112d1d0:	1884b03a 	or	r2,r3,r2
8112d1d4:	10801814 	ori	r2,r2,96
8112d1d8:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8112d1dc:	e0bffe17 	ldw	r2,-8(fp)
8112d1e0:	10800317 	ldw	r2,12(r2)
8112d1e4:	10800404 	addi	r2,r2,16
8112d1e8:	e0fffd17 	ldw	r3,-12(fp)
8112d1ec:	10c00035 	stwio	r3,0(r2)
8112d1f0:	00001106 	br	8112d238 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8112d1f4:	e0bffe17 	ldw	r2,-8(fp)
8112d1f8:	10800317 	ldw	r2,12(r2)
8112d1fc:	10800404 	addi	r2,r2,16
8112d200:	10800037 	ldwio	r2,0(r2)
8112d204:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
8112d208:	e0bffd17 	ldw	r2,-12(fp)
8112d20c:	10801814 	ori	r2,r2,96
8112d210:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
8112d214:	e0fffd17 	ldw	r3,-12(fp)
8112d218:	00bffbc4 	movi	r2,-17
8112d21c:	1884703a 	and	r2,r3,r2
8112d220:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8112d224:	e0bffe17 	ldw	r2,-8(fp)
8112d228:	10800317 	ldw	r2,12(r2)
8112d22c:	10800404 	addi	r2,r2,16
8112d230:	e0fffd17 	ldw	r3,-12(fp)
8112d234:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
8112d238:	0005883a 	mov	r2,zero
}
8112d23c:	e037883a 	mov	sp,fp
8112d240:	df000017 	ldw	fp,0(sp)
8112d244:	dec00104 	addi	sp,sp,4
8112d248:	f800283a 	ret

8112d24c <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
8112d24c:	defffc04 	addi	sp,sp,-16
8112d250:	df000315 	stw	fp,12(sp)
8112d254:	df000304 	addi	fp,sp,12
8112d258:	e13ffe15 	stw	r4,-8(fp)
8112d25c:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
8112d260:	0001883a 	nop
8112d264:	e0bffe17 	ldw	r2,-8(fp)
8112d268:	10800317 	ldw	r2,12(r2)
8112d26c:	10800037 	ldwio	r2,0(r2)
8112d270:	1080040c 	andi	r2,r2,16
8112d274:	103ffb1e 	bne	r2,zero,8112d264 <__reset+0xfb10d264>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
8112d278:	e0bffe17 	ldw	r2,-8(fp)
8112d27c:	10800317 	ldw	r2,12(r2)
8112d280:	10800404 	addi	r2,r2,16
8112d284:	e0fffe17 	ldw	r3,-8(fp)
8112d288:	18c00317 	ldw	r3,12(r3)
8112d28c:	18c00404 	addi	r3,r3,16
8112d290:	19000037 	ldwio	r4,0(r3)
8112d294:	00fff7c4 	movi	r3,-33
8112d298:	20c6703a 	and	r3,r4,r3
8112d29c:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
8112d2a0:	e0bffe17 	ldw	r2,-8(fp)
8112d2a4:	10800317 	ldw	r2,12(r2)
8112d2a8:	00c03fc4 	movi	r3,255
8112d2ac:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
8112d2b0:	e0bffe17 	ldw	r2,-8(fp)
8112d2b4:	10800317 	ldw	r2,12(r2)
8112d2b8:	10800804 	addi	r2,r2,32
8112d2bc:	e0ffff17 	ldw	r3,-4(fp)
8112d2c0:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
8112d2c4:	e0bffe17 	ldw	r2,-8(fp)
8112d2c8:	10800317 	ldw	r2,12(r2)
8112d2cc:	10800404 	addi	r2,r2,16
8112d2d0:	e0fffe17 	ldw	r3,-8(fp)
8112d2d4:	18c00317 	ldw	r3,12(r3)
8112d2d8:	18c00404 	addi	r3,r3,16
8112d2dc:	18c00037 	ldwio	r3,0(r3)
8112d2e0:	18c01814 	ori	r3,r3,96
8112d2e4:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
8112d2e8:	0001883a 	nop
8112d2ec:	e0bffe17 	ldw	r2,-8(fp)
8112d2f0:	10800317 	ldw	r2,12(r2)
8112d2f4:	10800037 	ldwio	r2,0(r2)
8112d2f8:	1080040c 	andi	r2,r2,16
8112d2fc:	103ffb1e 	bne	r2,zero,8112d2ec <__reset+0xfb10d2ec>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
8112d300:	e0bffe17 	ldw	r2,-8(fp)
8112d304:	10800317 	ldw	r2,12(r2)
8112d308:	10800404 	addi	r2,r2,16
8112d30c:	e0fffe17 	ldw	r3,-8(fp)
8112d310:	18c00317 	ldw	r3,12(r3)
8112d314:	18c00404 	addi	r3,r3,16
8112d318:	19000037 	ldwio	r4,0(r3)
8112d31c:	00fff7c4 	movi	r3,-33
8112d320:	20c6703a 	and	r3,r4,r3
8112d324:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
8112d328:	e0bffe17 	ldw	r2,-8(fp)
8112d32c:	10800317 	ldw	r2,12(r2)
8112d330:	10800037 	ldwio	r2,0(r2)
8112d334:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
8112d338:	e0bffe17 	ldw	r2,-8(fp)
8112d33c:	10800317 	ldw	r2,12(r2)
8112d340:	00c03fc4 	movi	r3,255
8112d344:	10c00035 	stwio	r3,0(r2)

  return status;
8112d348:	e0bffd03 	ldbu	r2,-12(fp)
}
8112d34c:	e037883a 	mov	sp,fp
8112d350:	df000017 	ldw	fp,0(sp)
8112d354:	dec00104 	addi	sp,sp,4
8112d358:	f800283a 	ret

8112d35c <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
8112d35c:	defff404 	addi	sp,sp,-48
8112d360:	dfc00b15 	stw	ra,44(sp)
8112d364:	df000a15 	stw	fp,40(sp)
8112d368:	df000a04 	addi	fp,sp,40
8112d36c:	e13ffb15 	stw	r4,-20(fp)
8112d370:	e17ffc15 	stw	r5,-16(fp)
8112d374:	e1bffd15 	stw	r6,-12(fp)
8112d378:	e1fffe15 	stw	r7,-8(fp)
8112d37c:	e0800217 	ldw	r2,8(fp)
8112d380:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
8112d384:	e0bfff0b 	ldhu	r2,-4(fp)
8112d388:	d8000415 	stw	zero,16(sp)
8112d38c:	d8000315 	stw	zero,12(sp)
8112d390:	e0c00417 	ldw	r3,16(fp)
8112d394:	d8c00215 	stw	r3,8(sp)
8112d398:	e0c00317 	ldw	r3,12(fp)
8112d39c:	d8c00115 	stw	r3,4(sp)
8112d3a0:	d8800015 	stw	r2,0(sp)
8112d3a4:	e1fffe17 	ldw	r7,-8(fp)
8112d3a8:	e1bffd17 	ldw	r6,-12(fp)
8112d3ac:	e17ffc17 	ldw	r5,-16(fp)
8112d3b0:	e13ffb17 	ldw	r4,-20(fp)
8112d3b4:	112d3d00 	call	8112d3d0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
8112d3b8:	0001883a 	nop
8112d3bc:	e037883a 	mov	sp,fp
8112d3c0:	dfc00117 	ldw	ra,4(sp)
8112d3c4:	df000017 	ldw	fp,0(sp)
8112d3c8:	dec00204 	addi	sp,sp,8
8112d3cc:	f800283a 	ret

8112d3d0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
8112d3d0:	defff204 	addi	sp,sp,-56
8112d3d4:	dfc00d15 	stw	ra,52(sp)
8112d3d8:	df000c15 	stw	fp,48(sp)
8112d3dc:	df000c04 	addi	fp,sp,48
8112d3e0:	e13ffb15 	stw	r4,-20(fp)
8112d3e4:	e17ffc15 	stw	r5,-16(fp)
8112d3e8:	e1bffd15 	stw	r6,-12(fp)
8112d3ec:	e1fffe15 	stw	r7,-8(fp)
8112d3f0:	e0800217 	ldw	r2,8(fp)
8112d3f4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
8112d3f8:	e0bfff0b 	ldhu	r2,-4(fp)
8112d3fc:	d8000615 	stw	zero,24(sp)
8112d400:	e0c00617 	ldw	r3,24(fp)
8112d404:	d8c00515 	stw	r3,20(sp)
8112d408:	e0c00517 	ldw	r3,20(fp)
8112d40c:	d8c00415 	stw	r3,16(sp)
8112d410:	e0c00417 	ldw	r3,16(fp)
8112d414:	d8c00315 	stw	r3,12(sp)
8112d418:	e0c00317 	ldw	r3,12(fp)
8112d41c:	d8c00215 	stw	r3,8(sp)
8112d420:	d8000115 	stw	zero,4(sp)
8112d424:	d8800015 	stw	r2,0(sp)
8112d428:	e1fffe17 	ldw	r7,-8(fp)
8112d42c:	e1bffd17 	ldw	r6,-12(fp)
8112d430:	e17ffc17 	ldw	r5,-16(fp)
8112d434:	e13ffb17 	ldw	r4,-20(fp)
8112d438:	112d9640 	call	8112d964 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
8112d43c:	0001883a 	nop
8112d440:	e037883a 	mov	sp,fp
8112d444:	dfc00117 	ldw	ra,4(sp)
8112d448:	df000017 	ldw	fp,0(sp)
8112d44c:	dec00204 	addi	sp,sp,8
8112d450:	f800283a 	ret

8112d454 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
8112d454:	defff804 	addi	sp,sp,-32
8112d458:	dfc00715 	stw	ra,28(sp)
8112d45c:	df000615 	stw	fp,24(sp)
8112d460:	df000604 	addi	fp,sp,24
8112d464:	e13ffc15 	stw	r4,-16(fp)
8112d468:	e17ffd15 	stw	r5,-12(fp)
8112d46c:	e1bffe15 	stw	r6,-8(fp)
8112d470:	3805883a 	mov	r2,r7
8112d474:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
8112d478:	e0ffff0b 	ldhu	r3,-4(fp)
8112d47c:	d8000115 	stw	zero,4(sp)
8112d480:	e0800217 	ldw	r2,8(fp)
8112d484:	d8800015 	stw	r2,0(sp)
8112d488:	180f883a 	mov	r7,r3
8112d48c:	e1bffe17 	ldw	r6,-8(fp)
8112d490:	e17ffd17 	ldw	r5,-12(fp)
8112d494:	e13ffc17 	ldw	r4,-16(fp)
8112d498:	112d4b40 	call	8112d4b4 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
8112d49c:	0001883a 	nop
8112d4a0:	e037883a 	mov	sp,fp
8112d4a4:	dfc00117 	ldw	ra,4(sp)
8112d4a8:	df000017 	ldw	fp,0(sp)
8112d4ac:	dec00204 	addi	sp,sp,8
8112d4b0:	f800283a 	ret

8112d4b4 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
8112d4b4:	defff304 	addi	sp,sp,-52
8112d4b8:	dfc00c15 	stw	ra,48(sp)
8112d4bc:	df000b15 	stw	fp,44(sp)
8112d4c0:	df000b04 	addi	fp,sp,44
8112d4c4:	e13ffc15 	stw	r4,-16(fp)
8112d4c8:	e17ffd15 	stw	r5,-12(fp)
8112d4cc:	e1bffe15 	stw	r6,-8(fp)
8112d4d0:	3805883a 	mov	r2,r7
8112d4d4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
8112d4d8:	e0bfff0b 	ldhu	r2,-4(fp)
8112d4dc:	d8000615 	stw	zero,24(sp)
8112d4e0:	e0c00317 	ldw	r3,12(fp)
8112d4e4:	d8c00515 	stw	r3,20(sp)
8112d4e8:	d8000415 	stw	zero,16(sp)
8112d4ec:	e0c00217 	ldw	r3,8(fp)
8112d4f0:	d8c00315 	stw	r3,12(sp)
8112d4f4:	d8000215 	stw	zero,8(sp)
8112d4f8:	d8000115 	stw	zero,4(sp)
8112d4fc:	d8800015 	stw	r2,0(sp)
8112d500:	e1fffe17 	ldw	r7,-8(fp)
8112d504:	000d883a 	mov	r6,zero
8112d508:	e17ffd17 	ldw	r5,-12(fp)
8112d50c:	e13ffc17 	ldw	r4,-16(fp)
8112d510:	112d9640 	call	8112d964 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
8112d514:	0001883a 	nop
8112d518:	e037883a 	mov	sp,fp
8112d51c:	dfc00117 	ldw	ra,4(sp)
8112d520:	df000017 	ldw	fp,0(sp)
8112d524:	dec00204 	addi	sp,sp,8
8112d528:	f800283a 	ret

8112d52c <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
8112d52c:	defff404 	addi	sp,sp,-48
8112d530:	dfc00b15 	stw	ra,44(sp)
8112d534:	df000a15 	stw	fp,40(sp)
8112d538:	df000a04 	addi	fp,sp,40
8112d53c:	e13ffb15 	stw	r4,-20(fp)
8112d540:	e17ffc15 	stw	r5,-16(fp)
8112d544:	e1bffd15 	stw	r6,-12(fp)
8112d548:	3807883a 	mov	r3,r7
8112d54c:	e0800517 	ldw	r2,20(fp)
8112d550:	e0fffe0d 	sth	r3,-8(fp)
8112d554:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
8112d558:	e0fffe0b 	ldhu	r3,-8(fp)
8112d55c:	e0bfff03 	ldbu	r2,-4(fp)
8112d560:	d8800415 	stw	r2,16(sp)
8112d564:	d8000315 	stw	zero,12(sp)
8112d568:	e0800417 	ldw	r2,16(fp)
8112d56c:	d8800215 	stw	r2,8(sp)
8112d570:	e0800317 	ldw	r2,12(fp)
8112d574:	d8800115 	stw	r2,4(sp)
8112d578:	e0800217 	ldw	r2,8(fp)
8112d57c:	d8800015 	stw	r2,0(sp)
8112d580:	180f883a 	mov	r7,r3
8112d584:	e1bffd17 	ldw	r6,-12(fp)
8112d588:	e17ffc17 	ldw	r5,-16(fp)
8112d58c:	e13ffb17 	ldw	r4,-20(fp)
8112d590:	112d5ac0 	call	8112d5ac <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
8112d594:	0001883a 	nop
8112d598:	e037883a 	mov	sp,fp
8112d59c:	dfc00117 	ldw	ra,4(sp)
8112d5a0:	df000017 	ldw	fp,0(sp)
8112d5a4:	dec00204 	addi	sp,sp,8
8112d5a8:	f800283a 	ret

8112d5ac <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
8112d5ac:	defff204 	addi	sp,sp,-56
8112d5b0:	dfc00d15 	stw	ra,52(sp)
8112d5b4:	df000c15 	stw	fp,48(sp)
8112d5b8:	df000c04 	addi	fp,sp,48
8112d5bc:	e13ffb15 	stw	r4,-20(fp)
8112d5c0:	e17ffc15 	stw	r5,-16(fp)
8112d5c4:	e1bffd15 	stw	r6,-12(fp)
8112d5c8:	3807883a 	mov	r3,r7
8112d5cc:	e0800617 	ldw	r2,24(fp)
8112d5d0:	e0fffe0d 	sth	r3,-8(fp)
8112d5d4:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
8112d5d8:	e0bffe0b 	ldhu	r2,-8(fp)
8112d5dc:	e0ffff03 	ldbu	r3,-4(fp)
8112d5e0:	d8c00615 	stw	r3,24(sp)
8112d5e4:	d8000515 	stw	zero,20(sp)
8112d5e8:	e0c00517 	ldw	r3,20(fp)
8112d5ec:	d8c00415 	stw	r3,16(sp)
8112d5f0:	e0c00317 	ldw	r3,12(fp)
8112d5f4:	d8c00315 	stw	r3,12(sp)
8112d5f8:	e0c00217 	ldw	r3,8(fp)
8112d5fc:	d8c00215 	stw	r3,8(sp)
8112d600:	e0c00417 	ldw	r3,16(fp)
8112d604:	d8c00115 	stw	r3,4(sp)
8112d608:	d8800015 	stw	r2,0(sp)
8112d60c:	000f883a 	mov	r7,zero
8112d610:	e1bffd17 	ldw	r6,-12(fp)
8112d614:	e17ffc17 	ldw	r5,-16(fp)
8112d618:	e13ffb17 	ldw	r4,-20(fp)
8112d61c:	112d9640 	call	8112d964 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
8112d620:	0001883a 	nop
8112d624:	e037883a 	mov	sp,fp
8112d628:	dfc00117 	ldw	ra,4(sp)
8112d62c:	df000017 	ldw	fp,0(sp)
8112d630:	dec00204 	addi	sp,sp,8
8112d634:	f800283a 	ret

8112d638 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
8112d638:	defffb04 	addi	sp,sp,-20
8112d63c:	df000415 	stw	fp,16(sp)
8112d640:	df000404 	addi	fp,sp,16
8112d644:	e13ffc15 	stw	r4,-16(fp)
8112d648:	e17ffd15 	stw	r5,-12(fp)
8112d64c:	e1bffe15 	stw	r6,-8(fp)
8112d650:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
8112d654:	e0bffc17 	ldw	r2,-16(fp)
8112d658:	e0fffd17 	ldw	r3,-12(fp)
8112d65c:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
8112d660:	e0bffc17 	ldw	r2,-16(fp)
8112d664:	e0ffff17 	ldw	r3,-4(fp)
8112d668:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
8112d66c:	e0bffc17 	ldw	r2,-16(fp)
8112d670:	e0fffe17 	ldw	r3,-8(fp)
8112d674:	10c00b15 	stw	r3,44(r2)
}
8112d678:	0001883a 	nop
8112d67c:	e037883a 	mov	sp,fp
8112d680:	df000017 	ldw	fp,0(sp)
8112d684:	dec00104 	addi	sp,sp,4
8112d688:	f800283a 	ret

8112d68c <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
8112d68c:	defffd04 	addi	sp,sp,-12
8112d690:	df000215 	stw	fp,8(sp)
8112d694:	df000204 	addi	fp,sp,8
8112d698:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8112d69c:	e0bfff17 	ldw	r2,-4(fp)
8112d6a0:	10800317 	ldw	r2,12(r2)
8112d6a4:	10800404 	addi	r2,r2,16
8112d6a8:	10800037 	ldwio	r2,0(r2)
8112d6ac:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
8112d6b0:	e0bffe17 	ldw	r2,-8(fp)
8112d6b4:	10800814 	ori	r2,r2,32
8112d6b8:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8112d6bc:	e0bfff17 	ldw	r2,-4(fp)
8112d6c0:	10800317 	ldw	r2,12(r2)
8112d6c4:	10800404 	addi	r2,r2,16
8112d6c8:	e0fffe17 	ldw	r3,-8(fp)
8112d6cc:	10c00035 	stwio	r3,0(r2)
}
8112d6d0:	0001883a 	nop
8112d6d4:	e037883a 	mov	sp,fp
8112d6d8:	df000017 	ldw	fp,0(sp)
8112d6dc:	dec00104 	addi	sp,sp,4
8112d6e0:	f800283a 	ret

8112d6e4 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
8112d6e4:	defffd04 	addi	sp,sp,-12
8112d6e8:	df000215 	stw	fp,8(sp)
8112d6ec:	df000204 	addi	fp,sp,8
8112d6f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8112d6f4:	e0bfff17 	ldw	r2,-4(fp)
8112d6f8:	10800317 	ldw	r2,12(r2)
8112d6fc:	10800404 	addi	r2,r2,16
8112d700:	10800037 	ldwio	r2,0(r2)
8112d704:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
8112d708:	e0fffe17 	ldw	r3,-8(fp)
8112d70c:	00bff7c4 	movi	r2,-33
8112d710:	1884703a 	and	r2,r3,r2
8112d714:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8112d718:	e0bfff17 	ldw	r2,-4(fp)
8112d71c:	10800317 	ldw	r2,12(r2)
8112d720:	10800404 	addi	r2,r2,16
8112d724:	e0fffe17 	ldw	r3,-8(fp)
8112d728:	10c00035 	stwio	r3,0(r2)
}
8112d72c:	0001883a 	nop
8112d730:	e037883a 	mov	sp,fp
8112d734:	df000017 	ldw	fp,0(sp)
8112d738:	dec00104 	addi	sp,sp,4
8112d73c:	f800283a 	ret

8112d740 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
8112d740:	defffe04 	addi	sp,sp,-8
8112d744:	df000115 	stw	fp,4(sp)
8112d748:	df000104 	addi	fp,sp,4
8112d74c:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
8112d750:	e0bfff17 	ldw	r2,-4(fp)
8112d754:	10800784 	addi	r2,r2,30
8112d758:	10800023 	ldbuio	r2,0(r2)
8112d75c:	10803fcc 	andi	r2,r2,255
8112d760:	10801fcc 	andi	r2,r2,127
8112d764:	10000226 	beq	r2,zero,8112d770 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
8112d768:	00bffec4 	movi	r2,-5
8112d76c:	00000906 	br	8112d794 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
8112d770:	e0bfff17 	ldw	r2,-4(fp)
8112d774:	108007c4 	addi	r2,r2,31
8112d778:	10800023 	ldbuio	r2,0(r2)
8112d77c:	10803fcc 	andi	r2,r2,255
8112d780:	1080200c 	andi	r2,r2,128
8112d784:	10000226 	beq	r2,zero,8112d790 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
8112d788:	00bfe244 	movi	r2,-119
8112d78c:	00000106 	br	8112d794 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
8112d790:	0005883a 	mov	r2,zero
}
8112d794:	e037883a 	mov	sp,fp
8112d798:	df000017 	ldw	fp,0(sp)
8112d79c:	dec00104 	addi	sp,sp,4
8112d7a0:	f800283a 	ret

8112d7a4 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
8112d7a4:	defffc04 	addi	sp,sp,-16
8112d7a8:	dfc00315 	stw	ra,12(sp)
8112d7ac:	df000215 	stw	fp,8(sp)
8112d7b0:	df000204 	addi	fp,sp,8
8112d7b4:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
8112d7b8:	d1603804 	addi	r5,gp,-32544
8112d7bc:	e13fff17 	ldw	r4,-4(fp)
8112d7c0:	1130ee00 	call	81130ee0 <alt_find_dev>
8112d7c4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
8112d7c8:	e0bffe17 	ldw	r2,-8(fp)
8112d7cc:	1000041e 	bne	r2,zero,8112d7e0 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
8112d7d0:	112d0ec0 	call	8112d0ec <alt_get_errno>
8112d7d4:	1007883a 	mov	r3,r2
8112d7d8:	008004c4 	movi	r2,19
8112d7dc:	18800015 	stw	r2,0(r3)
  }

  return dev;
8112d7e0:	e0bffe17 	ldw	r2,-8(fp)
}
8112d7e4:	e037883a 	mov	sp,fp
8112d7e8:	dfc00117 	ldw	ra,4(sp)
8112d7ec:	df000017 	ldw	fp,0(sp)
8112d7f0:	dec00204 	addi	sp,sp,8
8112d7f4:	f800283a 	ret

8112d7f8 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
8112d7f8:	defff104 	addi	sp,sp,-60
8112d7fc:	dfc00e15 	stw	ra,56(sp)
8112d800:	df000d15 	stw	fp,52(sp)
8112d804:	df000d04 	addi	fp,sp,52
8112d808:	e13ffa15 	stw	r4,-24(fp)
8112d80c:	e17ffb15 	stw	r5,-20(fp)
8112d810:	e1bffc15 	stw	r6,-16(fp)
8112d814:	e1fffd15 	stw	r7,-12(fp)
8112d818:	e0c00217 	ldw	r3,8(fp)
8112d81c:	e0800617 	ldw	r2,24(fp)
8112d820:	e0fffe0d 	sth	r3,-8(fp)
8112d824:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
8112d828:	e0bffe0b 	ldhu	r2,-8(fp)
8112d82c:	e0ffff03 	ldbu	r3,-4(fp)
8112d830:	d8c00615 	stw	r3,24(sp)
8112d834:	d8000515 	stw	zero,20(sp)
8112d838:	d8000415 	stw	zero,16(sp)
8112d83c:	e0c00517 	ldw	r3,20(fp)
8112d840:	d8c00315 	stw	r3,12(sp)
8112d844:	e0c00417 	ldw	r3,16(fp)
8112d848:	d8c00215 	stw	r3,8(sp)
8112d84c:	e0c00317 	ldw	r3,12(fp)
8112d850:	d8c00115 	stw	r3,4(sp)
8112d854:	d8800015 	stw	r2,0(sp)
8112d858:	e1fffd17 	ldw	r7,-12(fp)
8112d85c:	e1bffc17 	ldw	r6,-16(fp)
8112d860:	e17ffb17 	ldw	r5,-20(fp)
8112d864:	e13ffa17 	ldw	r4,-24(fp)
8112d868:	112d9640 	call	8112d964 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
8112d86c:	0001883a 	nop
8112d870:	e037883a 	mov	sp,fp
8112d874:	dfc00117 	ldw	ra,4(sp)
8112d878:	df000017 	ldw	fp,0(sp)
8112d87c:	dec00204 	addi	sp,sp,8
8112d880:	f800283a 	ret

8112d884 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
8112d884:	defffc04 	addi	sp,sp,-16
8112d888:	df000315 	stw	fp,12(sp)
8112d88c:	df000304 	addi	fp,sp,12
8112d890:	e13ffe15 	stw	r4,-8(fp)
8112d894:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8112d898:	e0bffe17 	ldw	r2,-8(fp)
8112d89c:	10800317 	ldw	r2,12(r2)
8112d8a0:	10800404 	addi	r2,r2,16
8112d8a4:	10800037 	ldwio	r2,0(r2)
8112d8a8:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
8112d8ac:	e0fffd17 	ldw	r3,-12(fp)
8112d8b0:	00a00434 	movhi	r2,32784
8112d8b4:	10bfffc4 	addi	r2,r2,-1
8112d8b8:	1884703a 	and	r2,r3,r2
8112d8bc:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
8112d8c0:	e0bfff17 	ldw	r2,-4(fp)
8112d8c4:	1004953a 	slli	r2,r2,20
8112d8c8:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
8112d8cc:	e0bffd17 	ldw	r2,-12(fp)
8112d8d0:	1884b03a 	or	r2,r3,r2
8112d8d4:	10800134 	orhi	r2,r2,4
8112d8d8:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8112d8dc:	e0bffe17 	ldw	r2,-8(fp)
8112d8e0:	10800317 	ldw	r2,12(r2)
8112d8e4:	10800404 	addi	r2,r2,16
8112d8e8:	e0fffd17 	ldw	r3,-12(fp)
8112d8ec:	10c00035 	stwio	r3,0(r2)
  
  return;
8112d8f0:	0001883a 	nop
}
8112d8f4:	e037883a 	mov	sp,fp
8112d8f8:	df000017 	ldw	fp,0(sp)
8112d8fc:	dec00104 	addi	sp,sp,4
8112d900:	f800283a 	ret

8112d904 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
8112d904:	defffd04 	addi	sp,sp,-12
8112d908:	df000215 	stw	fp,8(sp)
8112d90c:	df000204 	addi	fp,sp,8
8112d910:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8112d914:	e0bfff17 	ldw	r2,-4(fp)
8112d918:	10800317 	ldw	r2,12(r2)
8112d91c:	10800404 	addi	r2,r2,16
8112d920:	10800037 	ldwio	r2,0(r2)
8112d924:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
8112d928:	e0fffe17 	ldw	r3,-8(fp)
8112d92c:	00bfff34 	movhi	r2,65532
8112d930:	10bfffc4 	addi	r2,r2,-1
8112d934:	1884703a 	and	r2,r3,r2
8112d938:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8112d93c:	e0bfff17 	ldw	r2,-4(fp)
8112d940:	10800317 	ldw	r2,12(r2)
8112d944:	10800404 	addi	r2,r2,16
8112d948:	e0fffe17 	ldw	r3,-8(fp)
8112d94c:	10c00035 	stwio	r3,0(r2)
  
  return;
8112d950:	0001883a 	nop
}
8112d954:	e037883a 	mov	sp,fp
8112d958:	df000017 	ldw	fp,0(sp)
8112d95c:	dec00104 	addi	sp,sp,4
8112d960:	f800283a 	ret

8112d964 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
8112d964:	defff804 	addi	sp,sp,-32
8112d968:	dfc00715 	stw	ra,28(sp)
8112d96c:	df000615 	stw	fp,24(sp)
8112d970:	df000604 	addi	fp,sp,24
8112d974:	e13ffa15 	stw	r4,-24(fp)
8112d978:	e17ffb15 	stw	r5,-20(fp)
8112d97c:	e1bffc15 	stw	r6,-16(fp)
8112d980:	e1fffd15 	stw	r7,-12(fp)
8112d984:	e0c00217 	ldw	r3,8(fp)
8112d988:	e0800817 	ldw	r2,32(fp)
8112d98c:	e0fffe0d 	sth	r3,-8(fp)
8112d990:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
8112d994:	e0bffb17 	ldw	r2,-20(fp)
8112d998:	108007c4 	addi	r2,r2,31
8112d99c:	e0fffb17 	ldw	r3,-20(fp)
8112d9a0:	18c007c3 	ldbu	r3,31(r3)
8112d9a4:	19003fcc 	andi	r4,r3,255
8112d9a8:	00ffdfc4 	movi	r3,-129
8112d9ac:	20c6703a 	and	r3,r4,r3
8112d9b0:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
8112d9b4:	e0bffa17 	ldw	r2,-24(fp)
8112d9b8:	e0fffc17 	ldw	r3,-16(fp)
8112d9bc:	19403fcc 	andi	r5,r3,255
8112d9c0:	10c00003 	ldbu	r3,0(r2)
8112d9c4:	1806703a 	and	r3,r3,zero
8112d9c8:	1809883a 	mov	r4,r3
8112d9cc:	2807883a 	mov	r3,r5
8112d9d0:	20c6b03a 	or	r3,r4,r3
8112d9d4:	10c00005 	stb	r3,0(r2)
8112d9d8:	e0fffc17 	ldw	r3,-16(fp)
8112d9dc:	1806d23a 	srli	r3,r3,8
8112d9e0:	19403fcc 	andi	r5,r3,255
8112d9e4:	10c00043 	ldbu	r3,1(r2)
8112d9e8:	1806703a 	and	r3,r3,zero
8112d9ec:	1809883a 	mov	r4,r3
8112d9f0:	2807883a 	mov	r3,r5
8112d9f4:	20c6b03a 	or	r3,r4,r3
8112d9f8:	10c00045 	stb	r3,1(r2)
8112d9fc:	e0fffc17 	ldw	r3,-16(fp)
8112da00:	1806d43a 	srli	r3,r3,16
8112da04:	19403fcc 	andi	r5,r3,255
8112da08:	10c00083 	ldbu	r3,2(r2)
8112da0c:	1806703a 	and	r3,r3,zero
8112da10:	1809883a 	mov	r4,r3
8112da14:	2807883a 	mov	r3,r5
8112da18:	20c6b03a 	or	r3,r4,r3
8112da1c:	10c00085 	stb	r3,2(r2)
8112da20:	e0fffc17 	ldw	r3,-16(fp)
8112da24:	180ad63a 	srli	r5,r3,24
8112da28:	10c000c3 	ldbu	r3,3(r2)
8112da2c:	1806703a 	and	r3,r3,zero
8112da30:	1809883a 	mov	r4,r3
8112da34:	2807883a 	mov	r3,r5
8112da38:	20c6b03a 	or	r3,r4,r3
8112da3c:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
8112da40:	e0bffa17 	ldw	r2,-24(fp)
8112da44:	e0fffd17 	ldw	r3,-12(fp)
8112da48:	19403fcc 	andi	r5,r3,255
8112da4c:	10c00203 	ldbu	r3,8(r2)
8112da50:	1806703a 	and	r3,r3,zero
8112da54:	1809883a 	mov	r4,r3
8112da58:	2807883a 	mov	r3,r5
8112da5c:	20c6b03a 	or	r3,r4,r3
8112da60:	10c00205 	stb	r3,8(r2)
8112da64:	e0fffd17 	ldw	r3,-12(fp)
8112da68:	1806d23a 	srli	r3,r3,8
8112da6c:	19403fcc 	andi	r5,r3,255
8112da70:	10c00243 	ldbu	r3,9(r2)
8112da74:	1806703a 	and	r3,r3,zero
8112da78:	1809883a 	mov	r4,r3
8112da7c:	2807883a 	mov	r3,r5
8112da80:	20c6b03a 	or	r3,r4,r3
8112da84:	10c00245 	stb	r3,9(r2)
8112da88:	e0fffd17 	ldw	r3,-12(fp)
8112da8c:	1806d43a 	srli	r3,r3,16
8112da90:	19403fcc 	andi	r5,r3,255
8112da94:	10c00283 	ldbu	r3,10(r2)
8112da98:	1806703a 	and	r3,r3,zero
8112da9c:	1809883a 	mov	r4,r3
8112daa0:	2807883a 	mov	r3,r5
8112daa4:	20c6b03a 	or	r3,r4,r3
8112daa8:	10c00285 	stb	r3,10(r2)
8112daac:	e0fffd17 	ldw	r3,-12(fp)
8112dab0:	180ad63a 	srli	r5,r3,24
8112dab4:	10c002c3 	ldbu	r3,11(r2)
8112dab8:	1806703a 	and	r3,r3,zero
8112dabc:	1809883a 	mov	r4,r3
8112dac0:	2807883a 	mov	r3,r5
8112dac4:	20c6b03a 	or	r3,r4,r3
8112dac8:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
8112dacc:	e0bffa17 	ldw	r2,-24(fp)
8112dad0:	e0fffb17 	ldw	r3,-20(fp)
8112dad4:	19403fcc 	andi	r5,r3,255
8112dad8:	10c00403 	ldbu	r3,16(r2)
8112dadc:	1806703a 	and	r3,r3,zero
8112dae0:	1809883a 	mov	r4,r3
8112dae4:	2807883a 	mov	r3,r5
8112dae8:	20c6b03a 	or	r3,r4,r3
8112daec:	10c00405 	stb	r3,16(r2)
8112daf0:	e0fffb17 	ldw	r3,-20(fp)
8112daf4:	1806d23a 	srli	r3,r3,8
8112daf8:	19403fcc 	andi	r5,r3,255
8112dafc:	10c00443 	ldbu	r3,17(r2)
8112db00:	1806703a 	and	r3,r3,zero
8112db04:	1809883a 	mov	r4,r3
8112db08:	2807883a 	mov	r3,r5
8112db0c:	20c6b03a 	or	r3,r4,r3
8112db10:	10c00445 	stb	r3,17(r2)
8112db14:	e0fffb17 	ldw	r3,-20(fp)
8112db18:	1806d43a 	srli	r3,r3,16
8112db1c:	19403fcc 	andi	r5,r3,255
8112db20:	10c00483 	ldbu	r3,18(r2)
8112db24:	1806703a 	and	r3,r3,zero
8112db28:	1809883a 	mov	r4,r3
8112db2c:	2807883a 	mov	r3,r5
8112db30:	20c6b03a 	or	r3,r4,r3
8112db34:	10c00485 	stb	r3,18(r2)
8112db38:	e0fffb17 	ldw	r3,-20(fp)
8112db3c:	180ad63a 	srli	r5,r3,24
8112db40:	10c004c3 	ldbu	r3,19(r2)
8112db44:	1806703a 	and	r3,r3,zero
8112db48:	1809883a 	mov	r4,r3
8112db4c:	2807883a 	mov	r3,r5
8112db50:	20c6b03a 	or	r3,r4,r3
8112db54:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
8112db58:	e0bffa17 	ldw	r2,-24(fp)
8112db5c:	10c00103 	ldbu	r3,4(r2)
8112db60:	1806703a 	and	r3,r3,zero
8112db64:	10c00105 	stb	r3,4(r2)
8112db68:	10c00143 	ldbu	r3,5(r2)
8112db6c:	1806703a 	and	r3,r3,zero
8112db70:	10c00145 	stb	r3,5(r2)
8112db74:	10c00183 	ldbu	r3,6(r2)
8112db78:	1806703a 	and	r3,r3,zero
8112db7c:	10c00185 	stb	r3,6(r2)
8112db80:	10c001c3 	ldbu	r3,7(r2)
8112db84:	1806703a 	and	r3,r3,zero
8112db88:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
8112db8c:	e0bffa17 	ldw	r2,-24(fp)
8112db90:	10c00303 	ldbu	r3,12(r2)
8112db94:	1806703a 	and	r3,r3,zero
8112db98:	10c00305 	stb	r3,12(r2)
8112db9c:	10c00343 	ldbu	r3,13(r2)
8112dba0:	1806703a 	and	r3,r3,zero
8112dba4:	10c00345 	stb	r3,13(r2)
8112dba8:	10c00383 	ldbu	r3,14(r2)
8112dbac:	1806703a 	and	r3,r3,zero
8112dbb0:	10c00385 	stb	r3,14(r2)
8112dbb4:	10c003c3 	ldbu	r3,15(r2)
8112dbb8:	1806703a 	and	r3,r3,zero
8112dbbc:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
8112dbc0:	e0bffa17 	ldw	r2,-24(fp)
8112dbc4:	10c00503 	ldbu	r3,20(r2)
8112dbc8:	1806703a 	and	r3,r3,zero
8112dbcc:	10c00505 	stb	r3,20(r2)
8112dbd0:	10c00543 	ldbu	r3,21(r2)
8112dbd4:	1806703a 	and	r3,r3,zero
8112dbd8:	10c00545 	stb	r3,21(r2)
8112dbdc:	10c00583 	ldbu	r3,22(r2)
8112dbe0:	1806703a 	and	r3,r3,zero
8112dbe4:	10c00585 	stb	r3,22(r2)
8112dbe8:	10c005c3 	ldbu	r3,23(r2)
8112dbec:	1806703a 	and	r3,r3,zero
8112dbf0:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
8112dbf4:	e0bffa17 	ldw	r2,-24(fp)
8112dbf8:	e0fffe17 	ldw	r3,-8(fp)
8112dbfc:	19403fcc 	andi	r5,r3,255
8112dc00:	10c00603 	ldbu	r3,24(r2)
8112dc04:	1806703a 	and	r3,r3,zero
8112dc08:	1809883a 	mov	r4,r3
8112dc0c:	2807883a 	mov	r3,r5
8112dc10:	20c6b03a 	or	r3,r4,r3
8112dc14:	10c00605 	stb	r3,24(r2)
8112dc18:	e0fffe17 	ldw	r3,-8(fp)
8112dc1c:	1806d23a 	srli	r3,r3,8
8112dc20:	19403fcc 	andi	r5,r3,255
8112dc24:	10c00643 	ldbu	r3,25(r2)
8112dc28:	1806703a 	and	r3,r3,zero
8112dc2c:	1809883a 	mov	r4,r3
8112dc30:	2807883a 	mov	r3,r5
8112dc34:	20c6b03a 	or	r3,r4,r3
8112dc38:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
8112dc3c:	e0bffa17 	ldw	r2,-24(fp)
8112dc40:	10c00703 	ldbu	r3,28(r2)
8112dc44:	1806703a 	and	r3,r3,zero
8112dc48:	10c00705 	stb	r3,28(r2)
8112dc4c:	10c00743 	ldbu	r3,29(r2)
8112dc50:	1806703a 	and	r3,r3,zero
8112dc54:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
8112dc58:	e0bffa17 	ldw	r2,-24(fp)
8112dc5c:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
8112dc60:	e0800617 	ldw	r2,24(fp)
8112dc64:	1007883a 	mov	r3,r2
8112dc68:	e0bffa17 	ldw	r2,-24(fp)
8112dc6c:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
8112dc70:	e0800717 	ldw	r2,28(fp)
8112dc74:	1007883a 	mov	r3,r2
8112dc78:	e0bffa17 	ldw	r2,-24(fp)
8112dc7c:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
8112dc80:	e0800317 	ldw	r2,12(fp)
8112dc84:	10000226 	beq	r2,zero,8112dc90 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
8112dc88:	00bfe044 	movi	r2,-127
8112dc8c:	00000106 	br	8112dc94 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
8112dc90:	00bfe004 	movi	r2,-128
8112dc94:	e0c00417 	ldw	r3,16(fp)
8112dc98:	18000226 	beq	r3,zero,8112dca4 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
8112dc9c:	00c00084 	movi	r3,2
8112dca0:	00000106 	br	8112dca8 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
8112dca4:	0007883a 	mov	r3,zero
8112dca8:	10c4b03a 	or	r2,r2,r3
8112dcac:	1007883a 	mov	r3,r2
8112dcb0:	e0800517 	ldw	r2,20(fp)
8112dcb4:	10000226 	beq	r2,zero,8112dcc0 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
8112dcb8:	00800104 	movi	r2,4
8112dcbc:	00000106 	br	8112dcc4 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
8112dcc0:	0005883a 	mov	r2,zero
8112dcc4:	1884b03a 	or	r2,r3,r2
8112dcc8:	1007883a 	mov	r3,r2
8112dccc:	e0bfff03 	ldbu	r2,-4(fp)
8112dcd0:	10000426 	beq	r2,zero,8112dce4 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
8112dcd4:	e0bfff03 	ldbu	r2,-4(fp)
8112dcd8:	108003cc 	andi	r2,r2,15
8112dcdc:	100490fa 	slli	r2,r2,3
8112dce0:	00000106 	br	8112dce8 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
8112dce4:	0005883a 	mov	r2,zero
8112dce8:	1884b03a 	or	r2,r3,r2
8112dcec:	1007883a 	mov	r3,r2
8112dcf0:	e0bffa17 	ldw	r2,-24(fp)
8112dcf4:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
8112dcf8:	01400804 	movi	r5,32
8112dcfc:	e13ffa17 	ldw	r4,-24(fp)
8112dd00:	1130d180 	call	81130d18 <alt_dcache_flush>
}
8112dd04:	0001883a 	nop
8112dd08:	e037883a 	mov	sp,fp
8112dd0c:	dfc00117 	ldw	ra,4(sp)
8112dd10:	df000017 	ldw	fp,0(sp)
8112dd14:	dec00204 	addi	sp,sp,8
8112dd18:	f800283a 	ret

8112dd1c <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
8112dd1c:	defff904 	addi	sp,sp,-28
8112dd20:	dfc00615 	stw	ra,24(sp)
8112dd24:	df000515 	stw	fp,20(sp)
8112dd28:	df000504 	addi	fp,sp,20
8112dd2c:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
8112dd30:	e0bfff17 	ldw	r2,-4(fp)
8112dd34:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
8112dd38:	e0bffb17 	ldw	r2,-20(fp)
8112dd3c:	10800317 	ldw	r2,12(r2)
8112dd40:	10800404 	addi	r2,r2,16
8112dd44:	e0fffb17 	ldw	r3,-20(fp)
8112dd48:	18c00317 	ldw	r3,12(r3)
8112dd4c:	18c00404 	addi	r3,r3,16
8112dd50:	18c00037 	ldwio	r3,0(r3)
8112dd54:	18e00034 	orhi	r3,r3,32768
8112dd58:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8112dd5c:	e0bffb17 	ldw	r2,-20(fp)
8112dd60:	10800317 	ldw	r2,12(r2)
8112dd64:	10800404 	addi	r2,r2,16
8112dd68:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
8112dd6c:	e0bffb17 	ldw	r2,-20(fp)
8112dd70:	10800917 	ldw	r2,36(r2)
8112dd74:	10001226 	beq	r2,zero,8112ddc0 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112dd78:	0005303a 	rdctl	r2,status
8112dd7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dd80:	e0fffd17 	ldw	r3,-12(fp)
8112dd84:	00bfff84 	movi	r2,-2
8112dd88:	1884703a 	and	r2,r3,r2
8112dd8c:	1001703a 	wrctl	status,r2
  
  return context;
8112dd90:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
8112dd94:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
8112dd98:	e0bffb17 	ldw	r2,-20(fp)
8112dd9c:	10800917 	ldw	r2,36(r2)
8112dda0:	e0fffb17 	ldw	r3,-20(fp)
8112dda4:	18c00a17 	ldw	r3,40(r3)
8112dda8:	1809883a 	mov	r4,r3
8112ddac:	103ee83a 	callr	r2
8112ddb0:	e0bffc17 	ldw	r2,-16(fp)
8112ddb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ddb8:	e0bffe17 	ldw	r2,-8(fp)
8112ddbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
8112ddc0:	0001883a 	nop
8112ddc4:	e037883a 	mov	sp,fp
8112ddc8:	dfc00117 	ldw	ra,4(sp)
8112ddcc:	df000017 	ldw	fp,0(sp)
8112ddd0:	dec00204 	addi	sp,sp,8
8112ddd4:	f800283a 	ret

8112ddd8 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8112ddd8:	defffa04 	addi	sp,sp,-24
8112dddc:	dfc00515 	stw	ra,20(sp)
8112dde0:	df000415 	stw	fp,16(sp)
8112dde4:	df000404 	addi	fp,sp,16
8112dde8:	e13ffd15 	stw	r4,-12(fp)
8112ddec:	e17ffe15 	stw	r5,-8(fp)
8112ddf0:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
8112ddf4:	e0bffd17 	ldw	r2,-12(fp)
8112ddf8:	10800317 	ldw	r2,12(r2)
8112ddfc:	10800404 	addi	r2,r2,16
8112de00:	00c00074 	movhi	r3,1
8112de04:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
8112de08:	e0bffd17 	ldw	r2,-12(fp)
8112de0c:	10800317 	ldw	r2,12(r2)
8112de10:	10800404 	addi	r2,r2,16
8112de14:	00c00074 	movhi	r3,1
8112de18:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
8112de1c:	e0bffd17 	ldw	r2,-12(fp)
8112de20:	10800317 	ldw	r2,12(r2)
8112de24:	10800404 	addi	r2,r2,16
8112de28:	0007883a 	mov	r3,zero
8112de2c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
8112de30:	e0bffd17 	ldw	r2,-12(fp)
8112de34:	10800317 	ldw	r2,12(r2)
8112de38:	00c03fc4 	movi	r3,255
8112de3c:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
8112de40:	d1603804 	addi	r5,gp,-32544
8112de44:	e13ffd17 	ldw	r4,-12(fp)
8112de48:	1130d7c0 	call	81130d7c <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
8112de4c:	d8000015 	stw	zero,0(sp)
8112de50:	e1fffd17 	ldw	r7,-12(fp)
8112de54:	01a044f4 	movhi	r6,33043
8112de58:	31b74704 	addi	r6,r6,-8932
8112de5c:	e17fff17 	ldw	r5,-4(fp)
8112de60:	e13ffe17 	ldw	r4,-8(fp)
8112de64:	11311540 	call	81131154 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
8112de68:	0001883a 	nop
8112de6c:	e037883a 	mov	sp,fp
8112de70:	dfc00117 	ldw	ra,4(sp)
8112de74:	df000017 	ldw	fp,0(sp)
8112de78:	dec00204 	addi	sp,sp,8
8112de7c:	f800283a 	ret

8112de80 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
8112de80:	defffa04 	addi	sp,sp,-24
8112de84:	dfc00515 	stw	ra,20(sp)
8112de88:	df000415 	stw	fp,16(sp)
8112de8c:	df000404 	addi	fp,sp,16
8112de90:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
8112de94:	0007883a 	mov	r3,zero
8112de98:	e0bfff17 	ldw	r2,-4(fp)
8112de9c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
8112dea0:	e0bfff17 	ldw	r2,-4(fp)
8112dea4:	10800104 	addi	r2,r2,4
8112dea8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112deac:	0005303a 	rdctl	r2,status
8112deb0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112deb4:	e0fffd17 	ldw	r3,-12(fp)
8112deb8:	00bfff84 	movi	r2,-2
8112debc:	1884703a 	and	r2,r3,r2
8112dec0:	1001703a 	wrctl	status,r2
  
  return context;
8112dec4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
8112dec8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
8112decc:	11201480 	call	81120148 <alt_tick>
8112ded0:	e0bffc17 	ldw	r2,-16(fp)
8112ded4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ded8:	e0bffe17 	ldw	r2,-8(fp)
8112dedc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8112dee0:	0001883a 	nop
8112dee4:	e037883a 	mov	sp,fp
8112dee8:	dfc00117 	ldw	ra,4(sp)
8112deec:	df000017 	ldw	fp,0(sp)
8112def0:	dec00204 	addi	sp,sp,8
8112def4:	f800283a 	ret

8112def8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
8112def8:	defff804 	addi	sp,sp,-32
8112defc:	dfc00715 	stw	ra,28(sp)
8112df00:	df000615 	stw	fp,24(sp)
8112df04:	df000604 	addi	fp,sp,24
8112df08:	e13ffc15 	stw	r4,-16(fp)
8112df0c:	e17ffd15 	stw	r5,-12(fp)
8112df10:	e1bffe15 	stw	r6,-8(fp)
8112df14:	e1ffff15 	stw	r7,-4(fp)
8112df18:	e0bfff17 	ldw	r2,-4(fp)
8112df1c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
8112df20:	d0a06317 	ldw	r2,-32372(gp)
8112df24:	1000021e 	bne	r2,zero,8112df30 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
8112df28:	e0bffb17 	ldw	r2,-20(fp)
8112df2c:	d0a06315 	stw	r2,-32372(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
8112df30:	e0bffc17 	ldw	r2,-16(fp)
8112df34:	10800104 	addi	r2,r2,4
8112df38:	00c001c4 	movi	r3,7
8112df3c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
8112df40:	d8000015 	stw	zero,0(sp)
8112df44:	e1fffc17 	ldw	r7,-16(fp)
8112df48:	01a044f4 	movhi	r6,33043
8112df4c:	31b7a004 	addi	r6,r6,-8576
8112df50:	e17ffe17 	ldw	r5,-8(fp)
8112df54:	e13ffd17 	ldw	r4,-12(fp)
8112df58:	11311540 	call	81131154 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
8112df5c:	0001883a 	nop
8112df60:	e037883a 	mov	sp,fp
8112df64:	dfc00117 	ldw	ra,4(sp)
8112df68:	df000017 	ldw	fp,0(sp)
8112df6c:	dec00204 	addi	sp,sp,8
8112df70:	f800283a 	ret

8112df74 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8112df74:	defffa04 	addi	sp,sp,-24
8112df78:	dfc00515 	stw	ra,20(sp)
8112df7c:	df000415 	stw	fp,16(sp)
8112df80:	df000404 	addi	fp,sp,16
8112df84:	e13ffd15 	stw	r4,-12(fp)
8112df88:	e17ffe15 	stw	r5,-8(fp)
8112df8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8112df90:	e0bffd17 	ldw	r2,-12(fp)
8112df94:	10800017 	ldw	r2,0(r2)
8112df98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
8112df9c:	e0bffc17 	ldw	r2,-16(fp)
8112dfa0:	10c00a04 	addi	r3,r2,40
8112dfa4:	e0bffd17 	ldw	r2,-12(fp)
8112dfa8:	10800217 	ldw	r2,8(r2)
8112dfac:	100f883a 	mov	r7,r2
8112dfb0:	e1bfff17 	ldw	r6,-4(fp)
8112dfb4:	e17ffe17 	ldw	r5,-8(fp)
8112dfb8:	1809883a 	mov	r4,r3
8112dfbc:	112e5ec0 	call	8112e5ec <altera_avalon_uart_read>
      fd->fd_flags);
}
8112dfc0:	e037883a 	mov	sp,fp
8112dfc4:	dfc00117 	ldw	ra,4(sp)
8112dfc8:	df000017 	ldw	fp,0(sp)
8112dfcc:	dec00204 	addi	sp,sp,8
8112dfd0:	f800283a 	ret

8112dfd4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8112dfd4:	defffa04 	addi	sp,sp,-24
8112dfd8:	dfc00515 	stw	ra,20(sp)
8112dfdc:	df000415 	stw	fp,16(sp)
8112dfe0:	df000404 	addi	fp,sp,16
8112dfe4:	e13ffd15 	stw	r4,-12(fp)
8112dfe8:	e17ffe15 	stw	r5,-8(fp)
8112dfec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8112dff0:	e0bffd17 	ldw	r2,-12(fp)
8112dff4:	10800017 	ldw	r2,0(r2)
8112dff8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
8112dffc:	e0bffc17 	ldw	r2,-16(fp)
8112e000:	10c00a04 	addi	r3,r2,40
8112e004:	e0bffd17 	ldw	r2,-12(fp)
8112e008:	10800217 	ldw	r2,8(r2)
8112e00c:	100f883a 	mov	r7,r2
8112e010:	e1bfff17 	ldw	r6,-4(fp)
8112e014:	e17ffe17 	ldw	r5,-8(fp)
8112e018:	1809883a 	mov	r4,r3
8112e01c:	112e8900 	call	8112e890 <altera_avalon_uart_write>
      fd->fd_flags);
}
8112e020:	e037883a 	mov	sp,fp
8112e024:	dfc00117 	ldw	ra,4(sp)
8112e028:	df000017 	ldw	fp,0(sp)
8112e02c:	dec00204 	addi	sp,sp,8
8112e030:	f800283a 	ret

8112e034 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
8112e034:	defffc04 	addi	sp,sp,-16
8112e038:	dfc00315 	stw	ra,12(sp)
8112e03c:	df000215 	stw	fp,8(sp)
8112e040:	df000204 	addi	fp,sp,8
8112e044:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8112e048:	e0bfff17 	ldw	r2,-4(fp)
8112e04c:	10800017 	ldw	r2,0(r2)
8112e050:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
8112e054:	e0bffe17 	ldw	r2,-8(fp)
8112e058:	10c00a04 	addi	r3,r2,40
8112e05c:	e0bfff17 	ldw	r2,-4(fp)
8112e060:	10800217 	ldw	r2,8(r2)
8112e064:	100b883a 	mov	r5,r2
8112e068:	1809883a 	mov	r4,r3
8112e06c:	112e55c0 	call	8112e55c <altera_avalon_uart_close>
}
8112e070:	e037883a 	mov	sp,fp
8112e074:	dfc00117 	ldw	ra,4(sp)
8112e078:	df000017 	ldw	fp,0(sp)
8112e07c:	dec00204 	addi	sp,sp,8
8112e080:	f800283a 	ret

8112e084 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
8112e084:	defff304 	addi	sp,sp,-52
8112e088:	dfc00c15 	stw	ra,48(sp)
8112e08c:	df000b15 	stw	fp,44(sp)
8112e090:	df000b04 	addi	fp,sp,44
8112e094:	e13ffd15 	stw	r4,-12(fp)
8112e098:	e17ffe15 	stw	r5,-8(fp)
8112e09c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
8112e0a0:	e0bffd17 	ldw	r2,-12(fp)
8112e0a4:	10800017 	ldw	r2,0(r2)
8112e0a8:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8112e0ac:	e0bffd17 	ldw	r2,-12(fp)
8112e0b0:	10800704 	addi	r2,r2,28
8112e0b4:	e0bffa15 	stw	r2,-24(fp)
8112e0b8:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
8112e0bc:	e0bffb0b 	ldhu	r2,-20(fp)
8112e0c0:	e0fffc84 	addi	r3,fp,-14
8112e0c4:	180b883a 	mov	r5,r3
8112e0c8:	1009883a 	mov	r4,r2
8112e0cc:	1122c840 	call	81122c84 <OSFlagCreate>
8112e0d0:	1007883a 	mov	r3,r2
8112e0d4:	e0bffa17 	ldw	r2,-24(fp)
8112e0d8:	10c00015 	stw	r3,0(r2)
  return err;
8112e0dc:	e0bffc83 	ldbu	r2,-14(fp)
8112e0e0:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8112e0e4:	1000241e 	bne	r2,zero,8112e178 <altera_avalon_uart_init+0xf4>
8112e0e8:	e0bffd17 	ldw	r2,-12(fp)
8112e0ec:	10800804 	addi	r2,r2,32
8112e0f0:	e0bff715 	stw	r2,-36(fp)
8112e0f4:	00800044 	movi	r2,1
8112e0f8:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8112e0fc:	e0bffb8b 	ldhu	r2,-18(fp)
8112e100:	1009883a 	mov	r4,r2
8112e104:	11259980 	call	81125998 <OSSemCreate>
8112e108:	1007883a 	mov	r3,r2
8112e10c:	e0bff717 	ldw	r2,-36(fp)
8112e110:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8112e114:	e0bff717 	ldw	r2,-36(fp)
8112e118:	10800017 	ldw	r2,0(r2)
8112e11c:	10000226 	beq	r2,zero,8112e128 <altera_avalon_uart_init+0xa4>
8112e120:	0005883a 	mov	r2,zero
8112e124:	00000106 	br	8112e12c <altera_avalon_uart_init+0xa8>
8112e128:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8112e12c:	1000121e 	bne	r2,zero,8112e178 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
8112e130:	e0bffd17 	ldw	r2,-12(fp)
8112e134:	10800904 	addi	r2,r2,36
8112e138:	e0bff815 	stw	r2,-32(fp)
8112e13c:	00800044 	movi	r2,1
8112e140:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8112e144:	e0bffc0b 	ldhu	r2,-16(fp)
8112e148:	1009883a 	mov	r4,r2
8112e14c:	11259980 	call	81125998 <OSSemCreate>
8112e150:	1007883a 	mov	r3,r2
8112e154:	e0bff817 	ldw	r2,-32(fp)
8112e158:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8112e15c:	e0bff817 	ldw	r2,-32(fp)
8112e160:	10800017 	ldw	r2,0(r2)
8112e164:	10000226 	beq	r2,zero,8112e170 <altera_avalon_uart_init+0xec>
8112e168:	0005883a 	mov	r2,zero
8112e16c:	00000106 	br	8112e174 <altera_avalon_uart_init+0xf0>
8112e170:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8112e174:	10000226 	beq	r2,zero,8112e180 <altera_avalon_uart_init+0xfc>
8112e178:	00800044 	movi	r2,1
8112e17c:	00000106 	br	8112e184 <altera_avalon_uart_init+0x100>
8112e180:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8112e184:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
8112e188:	e0bff917 	ldw	r2,-28(fp)
8112e18c:	10000f1e 	bne	r2,zero,8112e1cc <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
8112e190:	e0bffd17 	ldw	r2,-12(fp)
8112e194:	00c32004 	movi	r3,3200
8112e198:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
8112e19c:	e0bff617 	ldw	r2,-40(fp)
8112e1a0:	10800304 	addi	r2,r2,12
8112e1a4:	e0fffd17 	ldw	r3,-12(fp)
8112e1a8:	18c00117 	ldw	r3,4(r3)
8112e1ac:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
8112e1b0:	d8000015 	stw	zero,0(sp)
8112e1b4:	e1fffd17 	ldw	r7,-12(fp)
8112e1b8:	01a044f4 	movhi	r6,33043
8112e1bc:	31b87904 	addi	r6,r6,-7708
8112e1c0:	e17fff17 	ldw	r5,-4(fp)
8112e1c4:	e13ffe17 	ldw	r4,-8(fp)
8112e1c8:	11311540 	call	81131154 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
8112e1cc:	0001883a 	nop
8112e1d0:	e037883a 	mov	sp,fp
8112e1d4:	dfc00117 	ldw	ra,4(sp)
8112e1d8:	df000017 	ldw	fp,0(sp)
8112e1dc:	dec00204 	addi	sp,sp,8
8112e1e0:	f800283a 	ret

8112e1e4 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
8112e1e4:	defffa04 	addi	sp,sp,-24
8112e1e8:	dfc00515 	stw	ra,20(sp)
8112e1ec:	df000415 	stw	fp,16(sp)
8112e1f0:	df000404 	addi	fp,sp,16
8112e1f4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
8112e1f8:	e0bfff17 	ldw	r2,-4(fp)
8112e1fc:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
8112e200:	e0bffc17 	ldw	r2,-16(fp)
8112e204:	10800017 	ldw	r2,0(r2)
8112e208:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
8112e20c:	e0bffd17 	ldw	r2,-12(fp)
8112e210:	10800204 	addi	r2,r2,8
8112e214:	10800037 	ldwio	r2,0(r2)
8112e218:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
8112e21c:	e0bffd17 	ldw	r2,-12(fp)
8112e220:	10800204 	addi	r2,r2,8
8112e224:	0007883a 	mov	r3,zero
8112e228:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
8112e22c:	e0bffd17 	ldw	r2,-12(fp)
8112e230:	10800204 	addi	r2,r2,8
8112e234:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
8112e238:	e0bffe17 	ldw	r2,-8(fp)
8112e23c:	1080200c 	andi	r2,r2,128
8112e240:	10000326 	beq	r2,zero,8112e250 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
8112e244:	e17ffe17 	ldw	r5,-8(fp)
8112e248:	e13ffc17 	ldw	r4,-16(fp)
8112e24c:	112e2800 	call	8112e280 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
8112e250:	e0bffe17 	ldw	r2,-8(fp)
8112e254:	1081100c 	andi	r2,r2,1088
8112e258:	10000326 	beq	r2,zero,8112e268 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
8112e25c:	e17ffe17 	ldw	r5,-8(fp)
8112e260:	e13ffc17 	ldw	r4,-16(fp)
8112e264:	112e3b80 	call	8112e3b8 <altera_avalon_uart_txirq>
  }
  

}
8112e268:	0001883a 	nop
8112e26c:	e037883a 	mov	sp,fp
8112e270:	dfc00117 	ldw	ra,4(sp)
8112e274:	df000017 	ldw	fp,0(sp)
8112e278:	dec00204 	addi	sp,sp,8
8112e27c:	f800283a 	ret

8112e280 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8112e280:	defff904 	addi	sp,sp,-28
8112e284:	dfc00615 	stw	ra,24(sp)
8112e288:	df000515 	stw	fp,20(sp)
8112e28c:	df000504 	addi	fp,sp,20
8112e290:	e13ffe15 	stw	r4,-8(fp)
8112e294:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
8112e298:	e0bfff17 	ldw	r2,-4(fp)
8112e29c:	108000cc 	andi	r2,r2,3
8112e2a0:	10003f1e 	bne	r2,zero,8112e3a0 <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
8112e2a4:	e0bffe17 	ldw	r2,-8(fp)
8112e2a8:	10c00317 	ldw	r3,12(r2)
8112e2ac:	e0bffe17 	ldw	r2,-8(fp)
8112e2b0:	10800217 	ldw	r2,8(r2)
8112e2b4:	1880121e 	bne	r3,r2,8112e300 <altera_avalon_uart_rxirq+0x80>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
8112e2b8:	e0bffe17 	ldw	r2,-8(fp)
8112e2bc:	10800717 	ldw	r2,28(r2)
8112e2c0:	e0bffc15 	stw	r2,-16(fp)
8112e2c4:	00800044 	movi	r2,1
8112e2c8:	e0bffd0d 	sth	r2,-12(fp)
8112e2cc:	00800044 	movi	r2,1
8112e2d0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8112e2d4:	d0a06943 	ldbu	r2,-32347(gp)
8112e2d8:	10803fcc 	andi	r2,r2,255
8112e2dc:	10000826 	beq	r2,zero,8112e300 <altera_avalon_uart_rxirq+0x80>
  {
    OSFlagPost (group, flags, opt, &err);
8112e2e0:	e0bffd0b 	ldhu	r2,-12(fp)
8112e2e4:	e0fffd83 	ldbu	r3,-10(fp)
8112e2e8:	e13ffdc4 	addi	r4,fp,-9
8112e2ec:	200f883a 	mov	r7,r4
8112e2f0:	180d883a 	mov	r6,r3
8112e2f4:	100b883a 	mov	r5,r2
8112e2f8:	e13ffc17 	ldw	r4,-16(fp)
8112e2fc:	11238600 	call	81123860 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8112e300:	e0bffe17 	ldw	r2,-8(fp)
8112e304:	10800317 	ldw	r2,12(r2)
8112e308:	10800044 	addi	r2,r2,1
8112e30c:	10800fcc 	andi	r2,r2,63
8112e310:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
8112e314:	e0bffe17 	ldw	r2,-8(fp)
8112e318:	10800317 	ldw	r2,12(r2)
8112e31c:	e0fffe17 	ldw	r3,-8(fp)
8112e320:	18c00017 	ldw	r3,0(r3)
8112e324:	18c00037 	ldwio	r3,0(r3)
8112e328:	1809883a 	mov	r4,r3
8112e32c:	e0fffe17 	ldw	r3,-8(fp)
8112e330:	1885883a 	add	r2,r3,r2
8112e334:	10800a04 	addi	r2,r2,40
8112e338:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
8112e33c:	e0bffe17 	ldw	r2,-8(fp)
8112e340:	e0fffb17 	ldw	r3,-20(fp)
8112e344:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8112e348:	e0bffe17 	ldw	r2,-8(fp)
8112e34c:	10800317 	ldw	r2,12(r2)
8112e350:	10800044 	addi	r2,r2,1
8112e354:	10800fcc 	andi	r2,r2,63
8112e358:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
8112e35c:	e0bffe17 	ldw	r2,-8(fp)
8112e360:	10c00217 	ldw	r3,8(r2)
8112e364:	e0bffb17 	ldw	r2,-20(fp)
8112e368:	18800e1e 	bne	r3,r2,8112e3a4 <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8112e36c:	e0bffe17 	ldw	r2,-8(fp)
8112e370:	10c00117 	ldw	r3,4(r2)
8112e374:	00bfdfc4 	movi	r2,-129
8112e378:	1886703a 	and	r3,r3,r2
8112e37c:	e0bffe17 	ldw	r2,-8(fp)
8112e380:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
8112e384:	e0bffe17 	ldw	r2,-8(fp)
8112e388:	10800017 	ldw	r2,0(r2)
8112e38c:	10800304 	addi	r2,r2,12
8112e390:	e0fffe17 	ldw	r3,-8(fp)
8112e394:	18c00117 	ldw	r3,4(r3)
8112e398:	10c00035 	stwio	r3,0(r2)
8112e39c:	00000106 	br	8112e3a4 <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
8112e3a0:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
8112e3a4:	e037883a 	mov	sp,fp
8112e3a8:	dfc00117 	ldw	ra,4(sp)
8112e3ac:	df000017 	ldw	fp,0(sp)
8112e3b0:	dec00204 	addi	sp,sp,8
8112e3b4:	f800283a 	ret

8112e3b8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8112e3b8:	defffa04 	addi	sp,sp,-24
8112e3bc:	dfc00515 	stw	ra,20(sp)
8112e3c0:	df000415 	stw	fp,16(sp)
8112e3c4:	df000404 	addi	fp,sp,16
8112e3c8:	e13ffe15 	stw	r4,-8(fp)
8112e3cc:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
8112e3d0:	e0bffe17 	ldw	r2,-8(fp)
8112e3d4:	10c00417 	ldw	r3,16(r2)
8112e3d8:	e0bffe17 	ldw	r2,-8(fp)
8112e3dc:	10800517 	ldw	r2,20(r2)
8112e3e0:	18804726 	beq	r3,r2,8112e500 <altera_avalon_uart_txirq+0x148>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8112e3e4:	e0bffe17 	ldw	r2,-8(fp)
8112e3e8:	10800617 	ldw	r2,24(r2)
8112e3ec:	1080008c 	andi	r2,r2,2
8112e3f0:	10000326 	beq	r2,zero,8112e400 <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8112e3f4:	e0bfff17 	ldw	r2,-4(fp)
8112e3f8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8112e3fc:	10003226 	beq	r2,zero,8112e4c8 <altera_avalon_uart_txirq+0x110>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
8112e400:	e0bffe17 	ldw	r2,-8(fp)
8112e404:	10c00417 	ldw	r3,16(r2)
8112e408:	e0bffe17 	ldw	r2,-8(fp)
8112e40c:	10800517 	ldw	r2,20(r2)
8112e410:	10800044 	addi	r2,r2,1
8112e414:	10800fcc 	andi	r2,r2,63
8112e418:	1880121e 	bne	r3,r2,8112e464 <altera_avalon_uart_txirq+0xac>
      { 
        ALT_FLAG_POST (sp->events, 
8112e41c:	e0bffe17 	ldw	r2,-8(fp)
8112e420:	10800717 	ldw	r2,28(r2)
8112e424:	e0bffc15 	stw	r2,-16(fp)
8112e428:	00800084 	movi	r2,2
8112e42c:	e0bffd0d 	sth	r2,-12(fp)
8112e430:	00800044 	movi	r2,1
8112e434:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8112e438:	d0a06943 	ldbu	r2,-32347(gp)
8112e43c:	10803fcc 	andi	r2,r2,255
8112e440:	10000826 	beq	r2,zero,8112e464 <altera_avalon_uart_txirq+0xac>
  {
    OSFlagPost (group, flags, opt, &err);
8112e444:	e0bffd0b 	ldhu	r2,-12(fp)
8112e448:	e0fffd83 	ldbu	r3,-10(fp)
8112e44c:	e13ffdc4 	addi	r4,fp,-9
8112e450:	200f883a 	mov	r7,r4
8112e454:	180d883a 	mov	r6,r3
8112e458:	100b883a 	mov	r5,r2
8112e45c:	e13ffc17 	ldw	r4,-16(fp)
8112e460:	11238600 	call	81123860 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
8112e464:	e0bffe17 	ldw	r2,-8(fp)
8112e468:	10800017 	ldw	r2,0(r2)
8112e46c:	10800104 	addi	r2,r2,4
8112e470:	e0fffe17 	ldw	r3,-8(fp)
8112e474:	18c00417 	ldw	r3,16(r3)
8112e478:	e13ffe17 	ldw	r4,-8(fp)
8112e47c:	20c7883a 	add	r3,r4,r3
8112e480:	18c01a04 	addi	r3,r3,104
8112e484:	18c00003 	ldbu	r3,0(r3)
8112e488:	18c03fcc 	andi	r3,r3,255
8112e48c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
8112e490:	e0bffe17 	ldw	r2,-8(fp)
8112e494:	10800417 	ldw	r2,16(r2)
8112e498:	10800044 	addi	r2,r2,1
8112e49c:	e0fffe17 	ldw	r3,-8(fp)
8112e4a0:	18800415 	stw	r2,16(r3)
8112e4a4:	10c00fcc 	andi	r3,r2,63
8112e4a8:	e0bffe17 	ldw	r2,-8(fp)
8112e4ac:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8112e4b0:	e0bffe17 	ldw	r2,-8(fp)
8112e4b4:	10800117 	ldw	r2,4(r2)
8112e4b8:	10c01014 	ori	r3,r2,64
8112e4bc:	e0bffe17 	ldw	r2,-8(fp)
8112e4c0:	10c00115 	stw	r3,4(r2)
8112e4c4:	00000e06 	br	8112e500 <altera_avalon_uart_txirq+0x148>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
8112e4c8:	e0bffe17 	ldw	r2,-8(fp)
8112e4cc:	10800017 	ldw	r2,0(r2)
8112e4d0:	10800204 	addi	r2,r2,8
8112e4d4:	10800037 	ldwio	r2,0(r2)
8112e4d8:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8112e4dc:	e0bfff17 	ldw	r2,-4(fp)
8112e4e0:	1082000c 	andi	r2,r2,2048
8112e4e4:	1000061e 	bne	r2,zero,8112e500 <altera_avalon_uart_txirq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8112e4e8:	e0bffe17 	ldw	r2,-8(fp)
8112e4ec:	10c00117 	ldw	r3,4(r2)
8112e4f0:	00bfefc4 	movi	r2,-65
8112e4f4:	1886703a 	and	r3,r3,r2
8112e4f8:	e0bffe17 	ldw	r2,-8(fp)
8112e4fc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
8112e500:	e0bffe17 	ldw	r2,-8(fp)
8112e504:	10c00417 	ldw	r3,16(r2)
8112e508:	e0bffe17 	ldw	r2,-8(fp)
8112e50c:	10800517 	ldw	r2,20(r2)
8112e510:	1880061e 	bne	r3,r2,8112e52c <altera_avalon_uart_txirq+0x174>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8112e514:	e0bffe17 	ldw	r2,-8(fp)
8112e518:	10c00117 	ldw	r3,4(r2)
8112e51c:	00beefc4 	movi	r2,-1089
8112e520:	1886703a 	and	r3,r3,r2
8112e524:	e0bffe17 	ldw	r2,-8(fp)
8112e528:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8112e52c:	e0bffe17 	ldw	r2,-8(fp)
8112e530:	10800017 	ldw	r2,0(r2)
8112e534:	10800304 	addi	r2,r2,12
8112e538:	e0fffe17 	ldw	r3,-8(fp)
8112e53c:	18c00117 	ldw	r3,4(r3)
8112e540:	10c00035 	stwio	r3,0(r2)
}
8112e544:	0001883a 	nop
8112e548:	e037883a 	mov	sp,fp
8112e54c:	dfc00117 	ldw	ra,4(sp)
8112e550:	df000017 	ldw	fp,0(sp)
8112e554:	dec00204 	addi	sp,sp,8
8112e558:	f800283a 	ret

8112e55c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
8112e55c:	defffd04 	addi	sp,sp,-12
8112e560:	df000215 	stw	fp,8(sp)
8112e564:	df000204 	addi	fp,sp,8
8112e568:	e13ffe15 	stw	r4,-8(fp)
8112e56c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8112e570:	00000506 	br	8112e588 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8112e574:	e0bfff17 	ldw	r2,-4(fp)
8112e578:	1090000c 	andi	r2,r2,16384
8112e57c:	10000226 	beq	r2,zero,8112e588 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
8112e580:	00bffd44 	movi	r2,-11
8112e584:	00000606 	br	8112e5a0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8112e588:	e0bffe17 	ldw	r2,-8(fp)
8112e58c:	10c00417 	ldw	r3,16(r2)
8112e590:	e0bffe17 	ldw	r2,-8(fp)
8112e594:	10800517 	ldw	r2,20(r2)
8112e598:	18bff61e 	bne	r3,r2,8112e574 <__reset+0xfb10e574>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8112e59c:	0005883a 	mov	r2,zero
}
8112e5a0:	e037883a 	mov	sp,fp
8112e5a4:	df000017 	ldw	fp,0(sp)
8112e5a8:	dec00104 	addi	sp,sp,4
8112e5ac:	f800283a 	ret

8112e5b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112e5b0:	defffe04 	addi	sp,sp,-8
8112e5b4:	dfc00115 	stw	ra,4(sp)
8112e5b8:	df000015 	stw	fp,0(sp)
8112e5bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112e5c0:	d0a01517 	ldw	r2,-32684(gp)
8112e5c4:	10000326 	beq	r2,zero,8112e5d4 <alt_get_errno+0x24>
8112e5c8:	d0a01517 	ldw	r2,-32684(gp)
8112e5cc:	103ee83a 	callr	r2
8112e5d0:	00000106 	br	8112e5d8 <alt_get_errno+0x28>
8112e5d4:	d0a05804 	addi	r2,gp,-32416
}
8112e5d8:	e037883a 	mov	sp,fp
8112e5dc:	dfc00117 	ldw	ra,4(sp)
8112e5e0:	df000017 	ldw	fp,0(sp)
8112e5e4:	dec00204 	addi	sp,sp,8
8112e5e8:	f800283a 	ret

8112e5ec <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
8112e5ec:	deffec04 	addi	sp,sp,-80
8112e5f0:	dfc01315 	stw	ra,76(sp)
8112e5f4:	df001215 	stw	fp,72(sp)
8112e5f8:	df001204 	addi	fp,sp,72
8112e5fc:	e13ffc15 	stw	r4,-16(fp)
8112e600:	e17ffd15 	stw	r5,-12(fp)
8112e604:	e1bffe15 	stw	r6,-8(fp)
8112e608:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
8112e60c:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
8112e610:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
8112e614:	e0bfff17 	ldw	r2,-4(fp)
8112e618:	1090000c 	andi	r2,r2,16384
8112e61c:	1005003a 	cmpeq	r2,r2,zero
8112e620:	10803fcc 	andi	r2,r2,255
8112e624:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
8112e628:	e0bffc17 	ldw	r2,-16(fp)
8112e62c:	10800817 	ldw	r2,32(r2)
8112e630:	e0bff815 	stw	r2,-32(fp)
8112e634:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8112e638:	e0bff90b 	ldhu	r2,-28(fp)
8112e63c:	e0fffb44 	addi	r3,fp,-19
8112e640:	180d883a 	mov	r6,r3
8112e644:	100b883a 	mov	r5,r2
8112e648:	e13ff817 	ldw	r4,-32(fp)
8112e64c:	1125cb00 	call	81125cb0 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8112e650:	00001306 	br	8112e6a0 <altera_avalon_uart_read+0xb4>
    {
      count++;
8112e654:	e0bff017 	ldw	r2,-64(fp)
8112e658:	10800044 	addi	r2,r2,1
8112e65c:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
8112e660:	e0bffd17 	ldw	r2,-12(fp)
8112e664:	10c00044 	addi	r3,r2,1
8112e668:	e0fffd15 	stw	r3,-12(fp)
8112e66c:	e0fffc17 	ldw	r3,-16(fp)
8112e670:	18c00217 	ldw	r3,8(r3)
8112e674:	e13ffc17 	ldw	r4,-16(fp)
8112e678:	20c7883a 	add	r3,r4,r3
8112e67c:	18c00a04 	addi	r3,r3,40
8112e680:	18c00003 	ldbu	r3,0(r3)
8112e684:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
8112e688:	e0bffc17 	ldw	r2,-16(fp)
8112e68c:	10800217 	ldw	r2,8(r2)
8112e690:	10800044 	addi	r2,r2,1
8112e694:	10c00fcc 	andi	r3,r2,63
8112e698:	e0bffc17 	ldw	r2,-16(fp)
8112e69c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8112e6a0:	e0fff017 	ldw	r3,-64(fp)
8112e6a4:	e0bffe17 	ldw	r2,-8(fp)
8112e6a8:	1880050e 	bge	r3,r2,8112e6c0 <altera_avalon_uart_read+0xd4>
8112e6ac:	e0bffc17 	ldw	r2,-16(fp)
8112e6b0:	10c00217 	ldw	r3,8(r2)
8112e6b4:	e0bffc17 	ldw	r2,-16(fp)
8112e6b8:	10800317 	ldw	r2,12(r2)
8112e6bc:	18bfe51e 	bne	r3,r2,8112e654 <__reset+0xfb10e654>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
8112e6c0:	e0bff017 	ldw	r2,-64(fp)
8112e6c4:	10003a1e 	bne	r2,zero,8112e7b0 <altera_avalon_uart_read+0x1c4>
8112e6c8:	e0bffc17 	ldw	r2,-16(fp)
8112e6cc:	10c00217 	ldw	r3,8(r2)
8112e6d0:	e0bffc17 	ldw	r2,-16(fp)
8112e6d4:	10800317 	ldw	r2,12(r2)
8112e6d8:	1880351e 	bne	r3,r2,8112e7b0 <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
8112e6dc:	e0bff117 	ldw	r2,-60(fp)
8112e6e0:	1000071e 	bne	r2,zero,8112e700 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
8112e6e4:	112e5b00 	call	8112e5b0 <alt_get_errno>
8112e6e8:	1007883a 	mov	r3,r2
8112e6ec:	008002c4 	movi	r2,11
8112e6f0:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
8112e6f4:	00800044 	movi	r2,1
8112e6f8:	e0bfef05 	stb	r2,-68(fp)
        break;
8112e6fc:	00003006 	br	8112e7c0 <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e700:	0005303a 	rdctl	r2,status
8112e704:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e708:	e0fff517 	ldw	r3,-44(fp)
8112e70c:	00bfff84 	movi	r2,-2
8112e710:	1884703a 	and	r2,r3,r2
8112e714:	1001703a 	wrctl	status,r2
  
  return context;
8112e718:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
8112e71c:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8112e720:	e0bffc17 	ldw	r2,-16(fp)
8112e724:	10800117 	ldw	r2,4(r2)
8112e728:	10c02014 	ori	r3,r2,128
8112e72c:	e0bffc17 	ldw	r2,-16(fp)
8112e730:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8112e734:	e0bffc17 	ldw	r2,-16(fp)
8112e738:	10800017 	ldw	r2,0(r2)
8112e73c:	10800304 	addi	r2,r2,12
8112e740:	e0fffc17 	ldw	r3,-16(fp)
8112e744:	18c00117 	ldw	r3,4(r3)
8112e748:	10c00035 	stwio	r3,0(r2)
8112e74c:	e0bff417 	ldw	r2,-48(fp)
8112e750:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e754:	e0bff617 	ldw	r2,-40(fp)
8112e758:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
8112e75c:	e0bffc17 	ldw	r2,-16(fp)
8112e760:	10800717 	ldw	r2,28(r2)
8112e764:	e0bff215 	stw	r2,-56(fp)
8112e768:	00800044 	movi	r2,1
8112e76c:	e0bff98d 	sth	r2,-26(fp)
8112e770:	00bfe0c4 	movi	r2,-125
8112e774:	e0bffa05 	stb	r2,-24(fp)
8112e778:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8112e77c:	d0a06943 	ldbu	r2,-32347(gp)
8112e780:	10803fcc 	andi	r2,r2,255
8112e784:	10000a26 	beq	r2,zero,8112e7b0 <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8112e788:	e0fff98b 	ldhu	r3,-26(fp)
8112e78c:	e13ffa03 	ldbu	r4,-24(fp)
8112e790:	e17ffa8b 	ldhu	r5,-22(fp)
8112e794:	e0bffb04 	addi	r2,fp,-20
8112e798:	d8800015 	stw	r2,0(sp)
8112e79c:	280f883a 	mov	r7,r5
8112e7a0:	200d883a 	mov	r6,r4
8112e7a4:	180b883a 	mov	r5,r3
8112e7a8:	e13ff217 	ldw	r4,-56(fp)
8112e7ac:	11232480 	call	81123248 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
8112e7b0:	e0bff017 	ldw	r2,-64(fp)
8112e7b4:	1000021e 	bne	r2,zero,8112e7c0 <altera_avalon_uart_read+0x1d4>
8112e7b8:	e0bffe17 	ldw	r2,-8(fp)
8112e7bc:	103fb81e 	bne	r2,zero,8112e6a0 <__reset+0xfb10e6a0>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
8112e7c0:	e0bffc17 	ldw	r2,-16(fp)
8112e7c4:	10800817 	ldw	r2,32(r2)
8112e7c8:	1009883a 	mov	r4,r2
8112e7cc:	11260280 	call	81126028 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e7d0:	0005303a 	rdctl	r2,status
8112e7d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e7d8:	e0fff717 	ldw	r3,-36(fp)
8112e7dc:	00bfff84 	movi	r2,-2
8112e7e0:	1884703a 	and	r2,r3,r2
8112e7e4:	1001703a 	wrctl	status,r2
  
  return context;
8112e7e8:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
8112e7ec:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8112e7f0:	e0bffc17 	ldw	r2,-16(fp)
8112e7f4:	10800117 	ldw	r2,4(r2)
8112e7f8:	10c02014 	ori	r3,r2,128
8112e7fc:	e0bffc17 	ldw	r2,-16(fp)
8112e800:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8112e804:	e0bffc17 	ldw	r2,-16(fp)
8112e808:	10800017 	ldw	r2,0(r2)
8112e80c:	10800304 	addi	r2,r2,12
8112e810:	e0fffc17 	ldw	r3,-16(fp)
8112e814:	18c00117 	ldw	r3,4(r3)
8112e818:	10c00035 	stwio	r3,0(r2)
8112e81c:	e0bff417 	ldw	r2,-48(fp)
8112e820:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e824:	e0bff317 	ldw	r2,-52(fp)
8112e828:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
8112e82c:	e0bfef03 	ldbu	r2,-68(fp)
8112e830:	10000226 	beq	r2,zero,8112e83c <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
8112e834:	00bffd44 	movi	r2,-11
8112e838:	00000106 	br	8112e840 <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
8112e83c:	e0bff017 	ldw	r2,-64(fp)
  }
}
8112e840:	e037883a 	mov	sp,fp
8112e844:	dfc00117 	ldw	ra,4(sp)
8112e848:	df000017 	ldw	fp,0(sp)
8112e84c:	dec00204 	addi	sp,sp,8
8112e850:	f800283a 	ret

8112e854 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112e854:	defffe04 	addi	sp,sp,-8
8112e858:	dfc00115 	stw	ra,4(sp)
8112e85c:	df000015 	stw	fp,0(sp)
8112e860:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112e864:	d0a01517 	ldw	r2,-32684(gp)
8112e868:	10000326 	beq	r2,zero,8112e878 <alt_get_errno+0x24>
8112e86c:	d0a01517 	ldw	r2,-32684(gp)
8112e870:	103ee83a 	callr	r2
8112e874:	00000106 	br	8112e87c <alt_get_errno+0x28>
8112e878:	d0a05804 	addi	r2,gp,-32416
}
8112e87c:	e037883a 	mov	sp,fp
8112e880:	dfc00117 	ldw	ra,4(sp)
8112e884:	df000017 	ldw	fp,0(sp)
8112e888:	dec00204 	addi	sp,sp,8
8112e88c:	f800283a 	ret

8112e890 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8112e890:	deffec04 	addi	sp,sp,-80
8112e894:	dfc01315 	stw	ra,76(sp)
8112e898:	df001215 	stw	fp,72(sp)
8112e89c:	df001204 	addi	fp,sp,72
8112e8a0:	e13ffc15 	stw	r4,-16(fp)
8112e8a4:	e17ffd15 	stw	r5,-12(fp)
8112e8a8:	e1bffe15 	stw	r6,-8(fp)
8112e8ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
8112e8b0:	e0bffe17 	ldw	r2,-8(fp)
8112e8b4:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
8112e8b8:	e0bfff17 	ldw	r2,-4(fp)
8112e8bc:	1090000c 	andi	r2,r2,16384
8112e8c0:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
8112e8c4:	e0bffc17 	ldw	r2,-16(fp)
8112e8c8:	10800917 	ldw	r2,36(r2)
8112e8cc:	e0bff815 	stw	r2,-32(fp)
8112e8d0:	e03ff90d 	sth	zero,-28(fp)
8112e8d4:	e0bff90b 	ldhu	r2,-28(fp)
8112e8d8:	e0fffb44 	addi	r3,fp,-19
8112e8dc:	180d883a 	mov	r6,r3
8112e8e0:	100b883a 	mov	r5,r2
8112e8e4:	e13ff817 	ldw	r4,-32(fp)
8112e8e8:	1125cb00 	call	81125cb0 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8112e8ec:	00005106 	br	8112ea34 <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8112e8f0:	e0bffc17 	ldw	r2,-16(fp)
8112e8f4:	10800517 	ldw	r2,20(r2)
8112e8f8:	10800044 	addi	r2,r2,1
8112e8fc:	10800fcc 	andi	r2,r2,63
8112e900:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
8112e904:	e0bffc17 	ldw	r2,-16(fp)
8112e908:	10c00417 	ldw	r3,16(r2)
8112e90c:	e0bff217 	ldw	r2,-56(fp)
8112e910:	1880371e 	bne	r3,r2,8112e9f0 <altera_avalon_uart_write+0x160>
    {
      if (no_block)
8112e914:	e0bff017 	ldw	r2,-64(fp)
8112e918:	10000526 	beq	r2,zero,8112e930 <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
8112e91c:	112e8540 	call	8112e854 <alt_get_errno>
8112e920:	1007883a 	mov	r3,r2
8112e924:	008002c4 	movi	r2,11
8112e928:	18800015 	stw	r2,0(r3)
        break;
8112e92c:	00004306 	br	8112ea3c <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e930:	0005303a 	rdctl	r2,status
8112e934:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e938:	e0fff517 	ldw	r3,-44(fp)
8112e93c:	00bfff84 	movi	r2,-2
8112e940:	1884703a 	and	r2,r3,r2
8112e944:	1001703a 	wrctl	status,r2
  
  return context;
8112e948:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
8112e94c:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8112e950:	e0bffc17 	ldw	r2,-16(fp)
8112e954:	10800117 	ldw	r2,4(r2)
8112e958:	10c11014 	ori	r3,r2,1088
8112e95c:	e0bffc17 	ldw	r2,-16(fp)
8112e960:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8112e964:	e0bffc17 	ldw	r2,-16(fp)
8112e968:	10800017 	ldw	r2,0(r2)
8112e96c:	10800304 	addi	r2,r2,12
8112e970:	e0fffc17 	ldw	r3,-16(fp)
8112e974:	18c00117 	ldw	r3,4(r3)
8112e978:	10c00035 	stwio	r3,0(r2)
8112e97c:	e0bff417 	ldw	r2,-48(fp)
8112e980:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e984:	e0bff117 	ldw	r2,-60(fp)
8112e988:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
8112e98c:	e0bffc17 	ldw	r2,-16(fp)
8112e990:	10800717 	ldw	r2,28(r2)
8112e994:	e0bff315 	stw	r2,-52(fp)
8112e998:	00800084 	movi	r2,2
8112e99c:	e0bff98d 	sth	r2,-26(fp)
8112e9a0:	00bfe0c4 	movi	r2,-125
8112e9a4:	e0bffa05 	stb	r2,-24(fp)
8112e9a8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8112e9ac:	d0a06943 	ldbu	r2,-32347(gp)
8112e9b0:	10803fcc 	andi	r2,r2,255
8112e9b4:	10000a26 	beq	r2,zero,8112e9e0 <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8112e9b8:	e0fff98b 	ldhu	r3,-26(fp)
8112e9bc:	e13ffa03 	ldbu	r4,-24(fp)
8112e9c0:	e17ffa8b 	ldhu	r5,-22(fp)
8112e9c4:	e0bffb04 	addi	r2,fp,-20
8112e9c8:	d8800015 	stw	r2,0(sp)
8112e9cc:	280f883a 	mov	r7,r5
8112e9d0:	200d883a 	mov	r6,r4
8112e9d4:	180b883a 	mov	r5,r3
8112e9d8:	e13ff317 	ldw	r4,-52(fp)
8112e9dc:	11232480 	call	81123248 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8112e9e0:	e0bffc17 	ldw	r2,-16(fp)
8112e9e4:	10c00417 	ldw	r3,16(r2)
8112e9e8:	e0bff217 	ldw	r2,-56(fp)
8112e9ec:	18bfe726 	beq	r3,r2,8112e98c <__reset+0xfb10e98c>
      }
    }

    count--;
8112e9f0:	e0bfef17 	ldw	r2,-68(fp)
8112e9f4:	10bfffc4 	addi	r2,r2,-1
8112e9f8:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
8112e9fc:	e0bffc17 	ldw	r2,-16(fp)
8112ea00:	10c00517 	ldw	r3,20(r2)
8112ea04:	e0bffd17 	ldw	r2,-12(fp)
8112ea08:	11000044 	addi	r4,r2,1
8112ea0c:	e13ffd15 	stw	r4,-12(fp)
8112ea10:	10800003 	ldbu	r2,0(r2)
8112ea14:	1009883a 	mov	r4,r2
8112ea18:	e0bffc17 	ldw	r2,-16(fp)
8112ea1c:	10c5883a 	add	r2,r2,r3
8112ea20:	10801a04 	addi	r2,r2,104
8112ea24:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
8112ea28:	e0bffc17 	ldw	r2,-16(fp)
8112ea2c:	e0fff217 	ldw	r3,-56(fp)
8112ea30:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8112ea34:	e0bfef17 	ldw	r2,-68(fp)
8112ea38:	103fad1e 	bne	r2,zero,8112e8f0 <__reset+0xfb10e8f0>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
8112ea3c:	e0bffc17 	ldw	r2,-16(fp)
8112ea40:	10800917 	ldw	r2,36(r2)
8112ea44:	1009883a 	mov	r4,r2
8112ea48:	11260280 	call	81126028 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ea4c:	0005303a 	rdctl	r2,status
8112ea50:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ea54:	e0fff717 	ldw	r3,-36(fp)
8112ea58:	00bfff84 	movi	r2,-2
8112ea5c:	1884703a 	and	r2,r3,r2
8112ea60:	1001703a 	wrctl	status,r2
  
  return context;
8112ea64:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8112ea68:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8112ea6c:	e0bffc17 	ldw	r2,-16(fp)
8112ea70:	10800117 	ldw	r2,4(r2)
8112ea74:	10c11014 	ori	r3,r2,1088
8112ea78:	e0bffc17 	ldw	r2,-16(fp)
8112ea7c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8112ea80:	e0bffc17 	ldw	r2,-16(fp)
8112ea84:	10800017 	ldw	r2,0(r2)
8112ea88:	10800304 	addi	r2,r2,12
8112ea8c:	e0fffc17 	ldw	r3,-16(fp)
8112ea90:	18c00117 	ldw	r3,4(r3)
8112ea94:	10c00035 	stwio	r3,0(r2)
8112ea98:	e0bff417 	ldw	r2,-48(fp)
8112ea9c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112eaa0:	e0bff617 	ldw	r2,-40(fp)
8112eaa4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
8112eaa8:	e0fffe17 	ldw	r3,-8(fp)
8112eaac:	e0bfef17 	ldw	r2,-68(fp)
8112eab0:	1885c83a 	sub	r2,r3,r2
}
8112eab4:	e037883a 	mov	sp,fp
8112eab8:	dfc00117 	ldw	ra,4(sp)
8112eabc:	df000017 	ldw	fp,0(sp)
8112eac0:	dec00204 	addi	sp,sp,8
8112eac4:	f800283a 	ret

8112eac8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112eac8:	defffe04 	addi	sp,sp,-8
8112eacc:	dfc00115 	stw	ra,4(sp)
8112ead0:	df000015 	stw	fp,0(sp)
8112ead4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112ead8:	d0a01517 	ldw	r2,-32684(gp)
8112eadc:	10000326 	beq	r2,zero,8112eaec <alt_get_errno+0x24>
8112eae0:	d0a01517 	ldw	r2,-32684(gp)
8112eae4:	103ee83a 	callr	r2
8112eae8:	00000106 	br	8112eaf0 <alt_get_errno+0x28>
8112eaec:	d0a05804 	addi	r2,gp,-32416
}
8112eaf0:	e037883a 	mov	sp,fp
8112eaf4:	dfc00117 	ldw	ra,4(sp)
8112eaf8:	df000017 	ldw	fp,0(sp)
8112eafc:	dec00204 	addi	sp,sp,8
8112eb00:	f800283a 	ret

8112eb04 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
8112eb04:	defffc04 	addi	sp,sp,-16
8112eb08:	df000315 	stw	fp,12(sp)
8112eb0c:	df000304 	addi	fp,sp,12
8112eb10:	e13ffd15 	stw	r4,-12(fp)
8112eb14:	e17ffe15 	stw	r5,-8(fp)
8112eb18:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8112eb1c:	e0bffd17 	ldw	r2,-12(fp)
8112eb20:	10800037 	ldwio	r2,0(r2)
8112eb24:	1080010c 	andi	r2,r2,4
8112eb28:	10000226 	beq	r2,zero,8112eb34 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
8112eb2c:	00bff904 	movi	r2,-28
8112eb30:	00001506 	br	8112eb88 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8112eb34:	e0bfff17 	ldw	r2,-4(fp)
8112eb38:	10800017 	ldw	r2,0(r2)
8112eb3c:	1007883a 	mov	r3,r2
8112eb40:	e0bffe17 	ldw	r2,-8(fp)
8112eb44:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8112eb48:	e0bffe17 	ldw	r2,-8(fp)
8112eb4c:	10800104 	addi	r2,r2,4
8112eb50:	e0ffff17 	ldw	r3,-4(fp)
8112eb54:	18c00117 	ldw	r3,4(r3)
8112eb58:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8112eb5c:	e0bffe17 	ldw	r2,-8(fp)
8112eb60:	10800204 	addi	r2,r2,8
8112eb64:	e0ffff17 	ldw	r3,-4(fp)
8112eb68:	18c00217 	ldw	r3,8(r3)
8112eb6c:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8112eb70:	e0bffe17 	ldw	r2,-8(fp)
8112eb74:	10800304 	addi	r2,r2,12
8112eb78:	e0ffff17 	ldw	r3,-4(fp)
8112eb7c:	18c00317 	ldw	r3,12(r3)
8112eb80:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
8112eb84:	0005883a 	mov	r2,zero
}
8112eb88:	e037883a 	mov	sp,fp
8112eb8c:	df000017 	ldw	fp,0(sp)
8112eb90:	dec00104 	addi	sp,sp,4
8112eb94:	f800283a 	ret

8112eb98 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
8112eb98:	defffc04 	addi	sp,sp,-16
8112eb9c:	df000315 	stw	fp,12(sp)
8112eba0:	df000304 	addi	fp,sp,12
8112eba4:	e13ffd15 	stw	r4,-12(fp)
8112eba8:	e17ffe15 	stw	r5,-8(fp)
8112ebac:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8112ebb0:	e0bffd17 	ldw	r2,-12(fp)
8112ebb4:	10800037 	ldwio	r2,0(r2)
8112ebb8:	1080010c 	andi	r2,r2,4
8112ebbc:	10000226 	beq	r2,zero,8112ebc8 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
8112ebc0:	00bff904 	movi	r2,-28
8112ebc4:	00003b06 	br	8112ecb4 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8112ebc8:	e0bfff17 	ldw	r2,-4(fp)
8112ebcc:	10800017 	ldw	r2,0(r2)
8112ebd0:	1007883a 	mov	r3,r2
8112ebd4:	e0bffe17 	ldw	r2,-8(fp)
8112ebd8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8112ebdc:	e0bffe17 	ldw	r2,-8(fp)
8112ebe0:	10800104 	addi	r2,r2,4
8112ebe4:	e0ffff17 	ldw	r3,-4(fp)
8112ebe8:	18c00117 	ldw	r3,4(r3)
8112ebec:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8112ebf0:	e0bffe17 	ldw	r2,-8(fp)
8112ebf4:	10800204 	addi	r2,r2,8
8112ebf8:	e0ffff17 	ldw	r3,-4(fp)
8112ebfc:	18c00217 	ldw	r3,8(r3)
8112ec00:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8112ec04:	e0bffe17 	ldw	r2,-8(fp)
8112ec08:	10800304 	addi	r2,r2,12
8112ec0c:	e0ffff17 	ldw	r3,-4(fp)
8112ec10:	18c0030b 	ldhu	r3,12(r3)
8112ec14:	18ffffcc 	andi	r3,r3,65535
8112ec18:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8112ec1c:	e0bffe17 	ldw	r2,-8(fp)
8112ec20:	10800384 	addi	r2,r2,14
8112ec24:	e0ffff17 	ldw	r3,-4(fp)
8112ec28:	18c00383 	ldbu	r3,14(r3)
8112ec2c:	18c03fcc 	andi	r3,r3,255
8112ec30:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8112ec34:	e0bffe17 	ldw	r2,-8(fp)
8112ec38:	108003c4 	addi	r2,r2,15
8112ec3c:	e0ffff17 	ldw	r3,-4(fp)
8112ec40:	18c003c3 	ldbu	r3,15(r3)
8112ec44:	18c03fcc 	andi	r3,r3,255
8112ec48:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8112ec4c:	e0bffe17 	ldw	r2,-8(fp)
8112ec50:	10800404 	addi	r2,r2,16
8112ec54:	e0ffff17 	ldw	r3,-4(fp)
8112ec58:	18c0040b 	ldhu	r3,16(r3)
8112ec5c:	18ffffcc 	andi	r3,r3,65535
8112ec60:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8112ec64:	e0bffe17 	ldw	r2,-8(fp)
8112ec68:	10800484 	addi	r2,r2,18
8112ec6c:	e0ffff17 	ldw	r3,-4(fp)
8112ec70:	18c0048b 	ldhu	r3,18(r3)
8112ec74:	18ffffcc 	andi	r3,r3,65535
8112ec78:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8112ec7c:	e0bffe17 	ldw	r2,-8(fp)
8112ec80:	10800504 	addi	r2,r2,20
8112ec84:	0007883a 	mov	r3,zero
8112ec88:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8112ec8c:	e0bffe17 	ldw	r2,-8(fp)
8112ec90:	10800604 	addi	r2,r2,24
8112ec94:	0007883a 	mov	r3,zero
8112ec98:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8112ec9c:	e0bffe17 	ldw	r2,-8(fp)
8112eca0:	10800704 	addi	r2,r2,28
8112eca4:	e0ffff17 	ldw	r3,-4(fp)
8112eca8:	18c00717 	ldw	r3,28(r3)
8112ecac:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
8112ecb0:	0005883a 	mov	r2,zero
}
8112ecb4:	e037883a 	mov	sp,fp
8112ecb8:	df000017 	ldw	fp,0(sp)
8112ecbc:	dec00104 	addi	sp,sp,4
8112ecc0:	f800283a 	ret

8112ecc4 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8112ecc4:	defff804 	addi	sp,sp,-32
8112ecc8:	dfc00715 	stw	ra,28(sp)
8112eccc:	df000615 	stw	fp,24(sp)
8112ecd0:	df000604 	addi	fp,sp,24
8112ecd4:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8112ecd8:	e0bfff17 	ldw	r2,-4(fp)
8112ecdc:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8112ece0:	e0bffa17 	ldw	r2,-24(fp)
8112ece4:	10801783 	ldbu	r2,94(r2)
8112ece8:	10803fcc 	andi	r2,r2,255
8112ecec:	10001126 	beq	r2,zero,8112ed34 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8112ecf0:	e0bffa17 	ldw	r2,-24(fp)
8112ecf4:	10800617 	ldw	r2,24(r2)
8112ecf8:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8112ecfc:	1007883a 	mov	r3,r2
8112ed00:	00bffdc4 	movi	r2,-9
8112ed04:	1884703a 	and	r2,r3,r2
8112ed08:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8112ed0c:	e0bffa17 	ldw	r2,-24(fp)
8112ed10:	10800617 	ldw	r2,24(r2)
8112ed14:	e0fffb17 	ldw	r3,-20(fp)
8112ed18:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8112ed1c:	e0bffa17 	ldw	r2,-24(fp)
8112ed20:	10800617 	ldw	r2,24(r2)
8112ed24:	10800404 	addi	r2,r2,16
8112ed28:	00c00044 	movi	r3,1
8112ed2c:	10c00035 	stwio	r3,0(r2)
8112ed30:	00001106 	br	8112ed78 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8112ed34:	e0bffa17 	ldw	r2,-24(fp)
8112ed38:	10800317 	ldw	r2,12(r2)
8112ed3c:	10800104 	addi	r2,r2,4
8112ed40:	10800037 	ldwio	r2,0(r2)
8112ed44:	1007883a 	mov	r3,r2
8112ed48:	00bffbc4 	movi	r2,-17
8112ed4c:	1884703a 	and	r2,r3,r2
8112ed50:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8112ed54:	e0bffa17 	ldw	r2,-24(fp)
8112ed58:	10800317 	ldw	r2,12(r2)
8112ed5c:	10800104 	addi	r2,r2,4
8112ed60:	e0fffb17 	ldw	r3,-20(fp)
8112ed64:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8112ed68:	e0bffa17 	ldw	r2,-24(fp)
8112ed6c:	10800317 	ldw	r2,12(r2)
8112ed70:	00c08004 	movi	r3,512
8112ed74:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8112ed78:	e0bffa17 	ldw	r2,-24(fp)
8112ed7c:	10800b17 	ldw	r2,44(r2)
8112ed80:	10001226 	beq	r2,zero,8112edcc <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ed84:	0005303a 	rdctl	r2,status
8112ed88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ed8c:	e0fffd17 	ldw	r3,-12(fp)
8112ed90:	00bfff84 	movi	r2,-2
8112ed94:	1884703a 	and	r2,r3,r2
8112ed98:	1001703a 	wrctl	status,r2
  
  return context;
8112ed9c:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8112eda0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
8112eda4:	e0bffa17 	ldw	r2,-24(fp)
8112eda8:	10800b17 	ldw	r2,44(r2)
8112edac:	e0fffa17 	ldw	r3,-24(fp)
8112edb0:	18c00c17 	ldw	r3,48(r3)
8112edb4:	1809883a 	mov	r4,r3
8112edb8:	103ee83a 	callr	r2
8112edbc:	e0bffc17 	ldw	r2,-16(fp)
8112edc0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112edc4:	e0bffe17 	ldw	r2,-8(fp)
8112edc8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
8112edcc:	e0bffa17 	ldw	r2,-24(fp)
8112edd0:	10801783 	ldbu	r2,94(r2)
8112edd4:	10803fcc 	andi	r2,r2,255
8112edd8:	10000a26 	beq	r2,zero,8112ee04 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8112eddc:	e0bffa17 	ldw	r2,-24(fp)
8112ede0:	10800617 	ldw	r2,24(r2)
8112ede4:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8112ede8:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
8112edec:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8112edf0:	e0bffa17 	ldw	r2,-24(fp)
8112edf4:	10800617 	ldw	r2,24(r2)
8112edf8:	e0fffb17 	ldw	r3,-20(fp)
8112edfc:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8112ee00:	00000c06 	br	8112ee34 <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8112ee04:	e0bffa17 	ldw	r2,-24(fp)
8112ee08:	10800317 	ldw	r2,12(r2)
8112ee0c:	10800104 	addi	r2,r2,4
8112ee10:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
8112ee14:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8112ee18:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8112ee1c:	e0bffa17 	ldw	r2,-24(fp)
8112ee20:	10800317 	ldw	r2,12(r2)
8112ee24:	10800104 	addi	r2,r2,4
8112ee28:	e0fffb17 	ldw	r3,-20(fp)
8112ee2c:	10c00035 	stwio	r3,0(r2)
    }

    return;
8112ee30:	0001883a 	nop
}
8112ee34:	e037883a 	mov	sp,fp
8112ee38:	dfc00117 	ldw	ra,4(sp)
8112ee3c:	df000017 	ldw	fp,0(sp)
8112ee40:	dec00204 	addi	sp,sp,8
8112ee44:	f800283a 	ret

8112ee48 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8112ee48:	defffb04 	addi	sp,sp,-20
8112ee4c:	df000415 	stw	fp,16(sp)
8112ee50:	df000404 	addi	fp,sp,16
8112ee54:	e13ffc15 	stw	r4,-16(fp)
8112ee58:	e17ffd15 	stw	r5,-12(fp)
8112ee5c:	e1bffe15 	stw	r6,-8(fp)
8112ee60:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8112ee64:	e0bffc17 	ldw	r2,-16(fp)
8112ee68:	10c01217 	ldw	r3,72(r2)
8112ee6c:	e0800117 	ldw	r2,4(fp)
8112ee70:	18800436 	bltu	r3,r2,8112ee84 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8112ee74:	e0bffc17 	ldw	r2,-16(fp)
8112ee78:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8112ee7c:	10803fcc 	andi	r2,r2,255
8112ee80:	10000226 	beq	r2,zero,8112ee8c <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8112ee84:	00bffa84 	movi	r2,-22
8112ee88:	00000e06 	br	8112eec4 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
8112ee8c:	e0bffd17 	ldw	r2,-12(fp)
8112ee90:	e0fffe17 	ldw	r3,-8(fp)
8112ee94:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8112ee98:	e0bffd17 	ldw	r2,-12(fp)
8112ee9c:	e0ffff17 	ldw	r3,-4(fp)
8112eea0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8112eea4:	e0bffd17 	ldw	r2,-12(fp)
8112eea8:	e0c00117 	ldw	r3,4(fp)
8112eeac:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8112eeb0:	e0800217 	ldw	r2,8(fp)
8112eeb4:	10e00034 	orhi	r3,r2,32768
8112eeb8:	e0bffd17 	ldw	r2,-12(fp)
8112eebc:	10c00315 	stw	r3,12(r2)
    
    return 0;
8112eec0:	0005883a 	mov	r2,zero
}
8112eec4:	e037883a 	mov	sp,fp
8112eec8:	df000017 	ldw	fp,0(sp)
8112eecc:	dec00104 	addi	sp,sp,4
8112eed0:	f800283a 	ret

8112eed4 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8112eed4:	defff604 	addi	sp,sp,-40
8112eed8:	df000915 	stw	fp,36(sp)
8112eedc:	df000904 	addi	fp,sp,36
8112eee0:	e13ff715 	stw	r4,-36(fp)
8112eee4:	e17ff815 	stw	r5,-32(fp)
8112eee8:	e1bff915 	stw	r6,-28(fp)
8112eeec:	e1fffa15 	stw	r7,-24(fp)
8112eef0:	e1800317 	ldw	r6,12(fp)
8112eef4:	e1400417 	ldw	r5,16(fp)
8112eef8:	e1000517 	ldw	r4,20(fp)
8112eefc:	e0c00617 	ldw	r3,24(fp)
8112ef00:	e0800717 	ldw	r2,28(fp)
8112ef04:	e1bffb0d 	sth	r6,-20(fp)
8112ef08:	e17ffc05 	stb	r5,-16(fp)
8112ef0c:	e13ffd05 	stb	r4,-12(fp)
8112ef10:	e0fffe0d 	sth	r3,-8(fp)
8112ef14:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8112ef18:	e0bff717 	ldw	r2,-36(fp)
8112ef1c:	10c01217 	ldw	r3,72(r2)
8112ef20:	e0800117 	ldw	r2,4(fp)
8112ef24:	18801936 	bltu	r3,r2,8112ef8c <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8112ef28:	e13ff717 	ldw	r4,-36(fp)
8112ef2c:	20801317 	ldw	r2,76(r4)
8112ef30:	20c01417 	ldw	r3,80(r4)
8112ef34:	e13ffe0b 	ldhu	r4,-8(fp)
8112ef38:	213fffcc 	andi	r4,r4,65535
8112ef3c:	2015883a 	mov	r10,r4
8112ef40:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8112ef44:	1ac01136 	bltu	r3,r11,8112ef8c <alt_msgdma_construct_extended_descriptor+0xb8>
8112ef48:	58c0011e 	bne	r11,r3,8112ef50 <alt_msgdma_construct_extended_descriptor+0x7c>
8112ef4c:	12800f36 	bltu	r2,r10,8112ef8c <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8112ef50:	e13ff717 	ldw	r4,-36(fp)
8112ef54:	20801317 	ldw	r2,76(r4)
8112ef58:	20c01417 	ldw	r3,80(r4)
8112ef5c:	e13fff0b 	ldhu	r4,-4(fp)
8112ef60:	213fffcc 	andi	r4,r4,65535
8112ef64:	2011883a 	mov	r8,r4
8112ef68:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8112ef6c:	1a400736 	bltu	r3,r9,8112ef8c <alt_msgdma_construct_extended_descriptor+0xb8>
8112ef70:	48c0011e 	bne	r9,r3,8112ef78 <alt_msgdma_construct_extended_descriptor+0xa4>
8112ef74:	12000536 	bltu	r2,r8,8112ef8c <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8112ef78:	e0bff717 	ldw	r2,-36(fp)
8112ef7c:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8112ef80:	10803fcc 	andi	r2,r2,255
8112ef84:	10800060 	cmpeqi	r2,r2,1
8112ef88:	1000021e 	bne	r2,zero,8112ef94 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8112ef8c:	00bffa84 	movi	r2,-22
8112ef90:	00002106 	br	8112f018 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
8112ef94:	e0bff817 	ldw	r2,-32(fp)
8112ef98:	e0fff917 	ldw	r3,-28(fp)
8112ef9c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8112efa0:	e0bff817 	ldw	r2,-32(fp)
8112efa4:	e0fffa17 	ldw	r3,-24(fp)
8112efa8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8112efac:	e0bff817 	ldw	r2,-32(fp)
8112efb0:	e0c00117 	ldw	r3,4(fp)
8112efb4:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8112efb8:	e0bff817 	ldw	r2,-32(fp)
8112efbc:	e0fffb0b 	ldhu	r3,-20(fp)
8112efc0:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
8112efc4:	e0bff817 	ldw	r2,-32(fp)
8112efc8:	e0fffc03 	ldbu	r3,-16(fp)
8112efcc:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8112efd0:	e0bff817 	ldw	r2,-32(fp)
8112efd4:	e0fffd03 	ldbu	r3,-12(fp)
8112efd8:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8112efdc:	e0bff817 	ldw	r2,-32(fp)
8112efe0:	e0fffe0b 	ldhu	r3,-8(fp)
8112efe4:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8112efe8:	e0bff817 	ldw	r2,-32(fp)
8112efec:	e0ffff0b 	ldhu	r3,-4(fp)
8112eff0:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
8112eff4:	e0bff817 	ldw	r2,-32(fp)
8112eff8:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8112effc:	e0bff817 	ldw	r2,-32(fp)
8112f000:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8112f004:	e0800217 	ldw	r2,8(fp)
8112f008:	10e00034 	orhi	r3,r2,32768
8112f00c:	e0bff817 	ldw	r2,-32(fp)
8112f010:	10c00715 	stw	r3,28(r2)

  return 0 ;
8112f014:	0005883a 	mov	r2,zero

}
8112f018:	e037883a 	mov	sp,fp
8112f01c:	df000017 	ldw	fp,0(sp)
8112f020:	dec00104 	addi	sp,sp,4
8112f024:	f800283a 	ret

8112f028 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8112f028:	deffee04 	addi	sp,sp,-72
8112f02c:	dfc01115 	stw	ra,68(sp)
8112f030:	df001015 	stw	fp,64(sp)
8112f034:	df001004 	addi	fp,sp,64
8112f038:	e13ffd15 	stw	r4,-12(fp)
8112f03c:	e17ffe15 	stw	r5,-8(fp)
8112f040:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8112f044:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
8112f048:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8112f04c:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8112f050:	e0bffd17 	ldw	r2,-12(fp)
8112f054:	10800317 	ldw	r2,12(r2)
8112f058:	10800204 	addi	r2,r2,8
8112f05c:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8112f060:	10bfffcc 	andi	r2,r2,65535
8112f064:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8112f068:	e0bffd17 	ldw	r2,-12(fp)
8112f06c:	10800317 	ldw	r2,12(r2)
8112f070:	10800204 	addi	r2,r2,8
8112f074:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8112f078:	1004d43a 	srli	r2,r2,16
8112f07c:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8112f080:	e0bffd17 	ldw	r2,-12(fp)
8112f084:	10800917 	ldw	r2,36(r2)
8112f088:	e0fff417 	ldw	r3,-48(fp)
8112f08c:	1880042e 	bgeu	r3,r2,8112f0a0 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8112f090:	e0bffd17 	ldw	r2,-12(fp)
8112f094:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8112f098:	e0fff317 	ldw	r3,-52(fp)
8112f09c:	18800236 	bltu	r3,r2,8112f0a8 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
8112f0a0:	00bff904 	movi	r2,-28
8112f0a4:	0000a906 	br	8112f34c <alt_msgdma_descriptor_async_transfer+0x324>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
8112f0a8:	e0bffd17 	ldw	r2,-12(fp)
8112f0ac:	10801817 	ldw	r2,96(r2)
8112f0b0:	e0bff615 	stw	r2,-40(fp)
8112f0b4:	e03ffc0d 	sth	zero,-16(fp)
8112f0b8:	e0bffc0b 	ldhu	r2,-16(fp)
8112f0bc:	e0fffc84 	addi	r3,fp,-14
8112f0c0:	180d883a 	mov	r6,r3
8112f0c4:	100b883a 	mov	r5,r2
8112f0c8:	e13ff617 	ldw	r4,-40(fp)
8112f0cc:	1125cb00 	call	81125cb0 <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8112f0d0:	00800804 	movi	r2,32
8112f0d4:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f0d8:	0005303a 	rdctl	r2,status
8112f0dc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f0e0:	e0fff717 	ldw	r3,-36(fp)
8112f0e4:	00bfff84 	movi	r2,-2
8112f0e8:	1884703a 	and	r2,r3,r2
8112f0ec:	1001703a 	wrctl	status,r2
  
  return context;
8112f0f0:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8112f0f4:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8112f0f8:	e0bffd17 	ldw	r2,-12(fp)
8112f0fc:	10800317 	ldw	r2,12(r2)
8112f100:	10800104 	addi	r2,r2,4
8112f104:	e0fff117 	ldw	r3,-60(fp)
8112f108:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
8112f10c:	e0bffd17 	ldw	r2,-12(fp)
8112f110:	10800317 	ldw	r2,12(r2)
8112f114:	e0fffd17 	ldw	r3,-12(fp)
8112f118:	18c00317 	ldw	r3,12(r3)
8112f11c:	18c00037 	ldwio	r3,0(r3)
8112f120:	10c00035 	stwio	r3,0(r2)
8112f124:	e0bff217 	ldw	r2,-56(fp)
8112f128:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f12c:	e0bffb17 	ldw	r2,-20(fp)
8112f130:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8112f134:	e0bffe17 	ldw	r2,-8(fp)
8112f138:	10001e26 	beq	r2,zero,8112f1b4 <alt_msgdma_descriptor_async_transfer+0x18c>
8112f13c:	e0bfff17 	ldw	r2,-4(fp)
8112f140:	10001c1e 	bne	r2,zero,8112f1b4 <alt_msgdma_descriptor_async_transfer+0x18c>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8112f144:	00001106 	br	8112f18c <alt_msgdma_descriptor_async_transfer+0x164>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8112f148:	01000044 	movi	r4,1
8112f14c:	1130bf00 	call	81130bf0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8112f150:	e0bff00b 	ldhu	r2,-64(fp)
8112f154:	1084e230 	cmpltui	r2,r2,5000
8112f158:	1000091e 	bne	r2,zero,8112f180 <alt_msgdma_descriptor_async_transfer+0x158>
            {
                alt_printf("time out after 5 msec while waiting" 
8112f15c:	012044f4 	movhi	r4,33043
8112f160:	210fc004 	addi	r4,r4,16128
8112f164:	11315340 	call	81131534 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8112f168:	e0bffd17 	ldw	r2,-12(fp)
8112f16c:	10801817 	ldw	r2,96(r2)
8112f170:	1009883a 	mov	r4,r2
8112f174:	11260280 	call	81126028 <OSSemPost>
				
                return -ETIME;
8112f178:	00bff084 	movi	r2,-62
8112f17c:	00007306 	br	8112f34c <alt_msgdma_descriptor_async_transfer+0x324>
            }
            counter++; 
8112f180:	e0bff00b 	ldhu	r2,-64(fp)
8112f184:	10800044 	addi	r2,r2,1
8112f188:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8112f18c:	e0bffd17 	ldw	r2,-12(fp)
8112f190:	10c00317 	ldw	r3,12(r2)
8112f194:	e0bffd17 	ldw	r2,-12(fp)
8112f198:	10800417 	ldw	r2,16(r2)
8112f19c:	e1bffe17 	ldw	r6,-8(fp)
8112f1a0:	100b883a 	mov	r5,r2
8112f1a4:	1809883a 	mov	r4,r3
8112f1a8:	112eb040 	call	8112eb04 <alt_msgdma_write_standard_descriptor>
8112f1ac:	103fe61e 	bne	r2,zero,8112f148 <__reset+0xfb10f148>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8112f1b0:	00002706 	br	8112f250 <alt_msgdma_descriptor_async_transfer+0x228>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8112f1b4:	e0bffe17 	ldw	r2,-8(fp)
8112f1b8:	10001f1e 	bne	r2,zero,8112f238 <alt_msgdma_descriptor_async_transfer+0x210>
8112f1bc:	e0bfff17 	ldw	r2,-4(fp)
8112f1c0:	10001d26 	beq	r2,zero,8112f238 <alt_msgdma_descriptor_async_transfer+0x210>
    {
        counter = 0; /* reset counter */
8112f1c4:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8112f1c8:	00001106 	br	8112f210 <alt_msgdma_descriptor_async_transfer+0x1e8>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8112f1cc:	01000044 	movi	r4,1
8112f1d0:	1130bf00 	call	81130bf0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8112f1d4:	e0bff00b 	ldhu	r2,-64(fp)
8112f1d8:	1084e230 	cmpltui	r2,r2,5000
8112f1dc:	1000091e 	bne	r2,zero,8112f204 <alt_msgdma_descriptor_async_transfer+0x1dc>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8112f1e0:	012044f4 	movhi	r4,33043
8112f1e4:	210fd604 	addi	r4,r4,16216
8112f1e8:	11315340 	call	81131534 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8112f1ec:	e0bffd17 	ldw	r2,-12(fp)
8112f1f0:	10801817 	ldw	r2,96(r2)
8112f1f4:	1009883a 	mov	r4,r2
8112f1f8:	11260280 	call	81126028 <OSSemPost>
				
                return -ETIME;
8112f1fc:	00bff084 	movi	r2,-62
8112f200:	00005206 	br	8112f34c <alt_msgdma_descriptor_async_transfer+0x324>
            }
            counter++; 
8112f204:	e0bff00b 	ldhu	r2,-64(fp)
8112f208:	10800044 	addi	r2,r2,1
8112f20c:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8112f210:	e0bffd17 	ldw	r2,-12(fp)
8112f214:	10c00317 	ldw	r3,12(r2)
8112f218:	e0bffd17 	ldw	r2,-12(fp)
8112f21c:	10800417 	ldw	r2,16(r2)
8112f220:	e1bfff17 	ldw	r6,-4(fp)
8112f224:	100b883a 	mov	r5,r2
8112f228:	1809883a 	mov	r4,r3
8112f22c:	112eb980 	call	8112eb98 <alt_msgdma_write_extended_descriptor>
8112f230:	103fe61e 	bne	r2,zero,8112f1cc <__reset+0xfb10f1cc>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8112f234:	00000606 	br	8112f250 <alt_msgdma_descriptor_async_transfer+0x228>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8112f238:	e0bffd17 	ldw	r2,-12(fp)
8112f23c:	10801817 	ldw	r2,96(r2)
8112f240:	1009883a 	mov	r4,r2
8112f244:	11260280 	call	81126028 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8112f248:	00bfffc4 	movi	r2,-1
8112f24c:	00003f06 	br	8112f34c <alt_msgdma_descriptor_async_transfer+0x324>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8112f250:	e0bffd17 	ldw	r2,-12(fp)
8112f254:	10800b17 	ldw	r2,44(r2)
8112f258:	10001c26 	beq	r2,zero,8112f2cc <alt_msgdma_descriptor_async_transfer+0x2a4>
    {

        control |= (dev->control |
8112f25c:	e0bffd17 	ldw	r2,-12(fp)
8112f260:	10c00d17 	ldw	r3,52(r2)
8112f264:	e0bff117 	ldw	r2,-60(fp)
8112f268:	1884b03a 	or	r2,r3,r2
8112f26c:	10800514 	ori	r2,r2,20
8112f270:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8112f274:	e0fff117 	ldw	r3,-60(fp)
8112f278:	00bff7c4 	movi	r2,-33
8112f27c:	1884703a 	and	r2,r3,r2
8112f280:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f284:	0005303a 	rdctl	r2,status
8112f288:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f28c:	e0fff917 	ldw	r3,-28(fp)
8112f290:	00bfff84 	movi	r2,-2
8112f294:	1884703a 	and	r2,r3,r2
8112f298:	1001703a 	wrctl	status,r2
  
  return context;
8112f29c:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8112f2a0:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8112f2a4:	e0bffd17 	ldw	r2,-12(fp)
8112f2a8:	10800317 	ldw	r2,12(r2)
8112f2ac:	10800104 	addi	r2,r2,4
8112f2b0:	e0fff117 	ldw	r3,-60(fp)
8112f2b4:	10c00035 	stwio	r3,0(r2)
8112f2b8:	e0bff217 	ldw	r2,-56(fp)
8112f2bc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f2c0:	e0bff517 	ldw	r2,-44(fp)
8112f2c4:	1001703a 	wrctl	status,r2
8112f2c8:	00001b06 	br	8112f338 <alt_msgdma_descriptor_async_transfer+0x310>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8112f2cc:	e0bffd17 	ldw	r2,-12(fp)
8112f2d0:	10c00d17 	ldw	r3,52(r2)
8112f2d4:	e0bff117 	ldw	r2,-60(fp)
8112f2d8:	1884b03a 	or	r2,r3,r2
8112f2dc:	10800114 	ori	r2,r2,4
8112f2e0:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8112f2e4:	e0fff117 	ldw	r3,-60(fp)
8112f2e8:	00bff3c4 	movi	r2,-49
8112f2ec:	1884703a 	and	r2,r3,r2
8112f2f0:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f2f4:	0005303a 	rdctl	r2,status
8112f2f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f2fc:	e0fffa17 	ldw	r3,-24(fp)
8112f300:	00bfff84 	movi	r2,-2
8112f304:	1884703a 	and	r2,r3,r2
8112f308:	1001703a 	wrctl	status,r2
  
  return context;
8112f30c:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8112f310:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8112f314:	e0bffd17 	ldw	r2,-12(fp)
8112f318:	10800317 	ldw	r2,12(r2)
8112f31c:	10800104 	addi	r2,r2,4
8112f320:	e0fff117 	ldw	r3,-60(fp)
8112f324:	10c00035 	stwio	r3,0(r2)
8112f328:	e0bff217 	ldw	r2,-56(fp)
8112f32c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f330:	e0bff817 	ldw	r2,-32(fp)
8112f334:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
8112f338:	e0bffd17 	ldw	r2,-12(fp)
8112f33c:	10801817 	ldw	r2,96(r2)
8112f340:	1009883a 	mov	r4,r2
8112f344:	11260280 	call	81126028 <OSSemPost>
    
    return 0;
8112f348:	0005883a 	mov	r2,zero
}
8112f34c:	e037883a 	mov	sp,fp
8112f350:	dfc00117 	ldw	ra,4(sp)
8112f354:	df000017 	ldw	fp,0(sp)
8112f358:	dec00204 	addi	sp,sp,8
8112f35c:	f800283a 	ret

8112f360 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8112f360:	deffee04 	addi	sp,sp,-72
8112f364:	dfc01115 	stw	ra,68(sp)
8112f368:	df001015 	stw	fp,64(sp)
8112f36c:	df001004 	addi	fp,sp,64
8112f370:	e13ffd15 	stw	r4,-12(fp)
8112f374:	e17ffe15 	stw	r5,-8(fp)
8112f378:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8112f37c:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
8112f380:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
8112f384:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
8112f388:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8112f38c:	e0bffd17 	ldw	r2,-12(fp)
8112f390:	10800317 	ldw	r2,12(r2)
8112f394:	10800204 	addi	r2,r2,8
8112f398:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8112f39c:	10bfffcc 	andi	r2,r2,65535
8112f3a0:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8112f3a4:	e0bffd17 	ldw	r2,-12(fp)
8112f3a8:	10800317 	ldw	r2,12(r2)
8112f3ac:	10800204 	addi	r2,r2,8
8112f3b0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8112f3b4:	1004d43a 	srli	r2,r2,16
8112f3b8:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8112f3bc:	00807804 	movi	r2,480
8112f3c0:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8112f3c4:	00001906 	br	8112f42c <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8112f3c8:	01000044 	movi	r4,1
8112f3cc:	1130bf00 	call	81130bf0 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8112f3d0:	e0bff10b 	ldhu	r2,-60(fp)
8112f3d4:	1084e230 	cmpltui	r2,r2,5000
8112f3d8:	1000051e 	bne	r2,zero,8112f3f0 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8112f3dc:	012044f4 	movhi	r4,33043
8112f3e0:	210fec04 	addi	r4,r4,16304
8112f3e4:	11315340 	call	81131534 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
8112f3e8:	00bff084 	movi	r2,-62
8112f3ec:	0000d706 	br	8112f74c <alt_msgdma_descriptor_sync_transfer+0x3ec>
        }
        counter++;  
8112f3f0:	e0bff10b 	ldhu	r2,-60(fp)
8112f3f4:	10800044 	addi	r2,r2,1
8112f3f8:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8112f3fc:	e0bffd17 	ldw	r2,-12(fp)
8112f400:	10800317 	ldw	r2,12(r2)
8112f404:	10800204 	addi	r2,r2,8
8112f408:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8112f40c:	10bfffcc 	andi	r2,r2,65535
8112f410:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8112f414:	e0bffd17 	ldw	r2,-12(fp)
8112f418:	10800317 	ldw	r2,12(r2)
8112f41c:	10800204 	addi	r2,r2,8
8112f420:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8112f424:	1004d43a 	srli	r2,r2,16
8112f428:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8112f42c:	e0bffd17 	ldw	r2,-12(fp)
8112f430:	10800917 	ldw	r2,36(r2)
8112f434:	e0fff317 	ldw	r3,-52(fp)
8112f438:	18bfe32e 	bgeu	r3,r2,8112f3c8 <__reset+0xfb10f3c8>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8112f43c:	e0bffd17 	ldw	r2,-12(fp)
8112f440:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8112f444:	e0fff217 	ldw	r3,-56(fp)
8112f448:	18bfdf2e 	bgeu	r3,r2,8112f3c8 <__reset+0xfb10f3c8>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
8112f44c:	e0bffd17 	ldw	r2,-12(fp)
8112f450:	10801817 	ldw	r2,96(r2)
8112f454:	e0bff815 	stw	r2,-32(fp)
8112f458:	e03ffc0d 	sth	zero,-16(fp)
8112f45c:	e0bffc0b 	ldhu	r2,-16(fp)
8112f460:	e0fffc84 	addi	r3,fp,-14
8112f464:	180d883a 	mov	r6,r3
8112f468:	100b883a 	mov	r5,r2
8112f46c:	e13ff817 	ldw	r4,-32(fp)
8112f470:	1125cb00 	call	81125cb0 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f474:	0005303a 	rdctl	r2,status
8112f478:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f47c:	e0fffb17 	ldw	r3,-20(fp)
8112f480:	00bfff84 	movi	r2,-2
8112f484:	1884703a 	and	r2,r3,r2
8112f488:	1001703a 	wrctl	status,r2
  
  return context;
8112f48c:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8112f490:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8112f494:	e0bffd17 	ldw	r2,-12(fp)
8112f498:	10800317 	ldw	r2,12(r2)
8112f49c:	10800104 	addi	r2,r2,4
8112f4a0:	00c00804 	movi	r3,32
8112f4a4:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8112f4a8:	e0bffd17 	ldw	r2,-12(fp)
8112f4ac:	10800317 	ldw	r2,12(r2)
8112f4b0:	e0fffd17 	ldw	r3,-12(fp)
8112f4b4:	18c00317 	ldw	r3,12(r3)
8112f4b8:	18c00037 	ldwio	r3,0(r3)
8112f4bc:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8112f4c0:	e0bffe17 	ldw	r2,-8(fp)
8112f4c4:	10001f26 	beq	r2,zero,8112f544 <alt_msgdma_descriptor_sync_transfer+0x1e4>
8112f4c8:	e0bfff17 	ldw	r2,-4(fp)
8112f4cc:	10001d1e 	bne	r2,zero,8112f544 <alt_msgdma_descriptor_sync_transfer+0x1e4>
    {
        counter = 0; /* reset counter */
8112f4d0:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8112f4d4:	00001106 	br	8112f51c <alt_msgdma_descriptor_sync_transfer+0x1bc>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8112f4d8:	01000044 	movi	r4,1
8112f4dc:	1130bf00 	call	81130bf0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8112f4e0:	e0bff10b 	ldhu	r2,-60(fp)
8112f4e4:	1084e230 	cmpltui	r2,r2,5000
8112f4e8:	1000091e 	bne	r2,zero,8112f510 <alt_msgdma_descriptor_sync_transfer+0x1b0>
            {
                alt_printf("time out after 5 msec while writing standard" 
8112f4ec:	012044f4 	movhi	r4,33043
8112f4f0:	21100004 	addi	r4,r4,16384
8112f4f4:	11315340 	call	81131534 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8112f4f8:	e0bffd17 	ldw	r2,-12(fp)
8112f4fc:	10801817 	ldw	r2,96(r2)
8112f500:	1009883a 	mov	r4,r2
8112f504:	11260280 	call	81126028 <OSSemPost>
				
                return -ETIME;
8112f508:	00bff084 	movi	r2,-62
8112f50c:	00008f06 	br	8112f74c <alt_msgdma_descriptor_sync_transfer+0x3ec>
            }
            counter++;    
8112f510:	e0bff10b 	ldhu	r2,-60(fp)
8112f514:	10800044 	addi	r2,r2,1
8112f518:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8112f51c:	e0bffd17 	ldw	r2,-12(fp)
8112f520:	10c00317 	ldw	r3,12(r2)
8112f524:	e0bffd17 	ldw	r2,-12(fp)
8112f528:	10800417 	ldw	r2,16(r2)
8112f52c:	e1bffe17 	ldw	r6,-8(fp)
8112f530:	100b883a 	mov	r5,r2
8112f534:	1809883a 	mov	r4,r3
8112f538:	112eb040 	call	8112eb04 <alt_msgdma_write_standard_descriptor>
8112f53c:	103fe61e 	bne	r2,zero,8112f4d8 <__reset+0xfb10f4d8>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8112f540:	00002706 	br	8112f5e0 <alt_msgdma_descriptor_sync_transfer+0x280>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8112f544:	e0bffe17 	ldw	r2,-8(fp)
8112f548:	10001f1e 	bne	r2,zero,8112f5c8 <alt_msgdma_descriptor_sync_transfer+0x268>
8112f54c:	e0bfff17 	ldw	r2,-4(fp)
8112f550:	10001d26 	beq	r2,zero,8112f5c8 <alt_msgdma_descriptor_sync_transfer+0x268>
    {
        counter = 0; /* reset counter */
8112f554:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8112f558:	00001106 	br	8112f5a0 <alt_msgdma_descriptor_sync_transfer+0x240>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8112f55c:	01000044 	movi	r4,1
8112f560:	1130bf00 	call	81130bf0 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8112f564:	e0bff10b 	ldhu	r2,-60(fp)
8112f568:	1084e230 	cmpltui	r2,r2,5000
8112f56c:	1000091e 	bne	r2,zero,8112f594 <alt_msgdma_descriptor_sync_transfer+0x234>
            {
                alt_printf("time out after 5 msec while writing extended" 
8112f570:	012044f4 	movhi	r4,33043
8112f574:	21101104 	addi	r4,r4,16452
8112f578:	11315340 	call	81131534 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8112f57c:	e0bffd17 	ldw	r2,-12(fp)
8112f580:	10801817 	ldw	r2,96(r2)
8112f584:	1009883a 	mov	r4,r2
8112f588:	11260280 	call	81126028 <OSSemPost>
				
                return -ETIME;
8112f58c:	00bff084 	movi	r2,-62
8112f590:	00006e06 	br	8112f74c <alt_msgdma_descriptor_sync_transfer+0x3ec>
            }
            counter++;
8112f594:	e0bff10b 	ldhu	r2,-60(fp)
8112f598:	10800044 	addi	r2,r2,1
8112f59c:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8112f5a0:	e0bffd17 	ldw	r2,-12(fp)
8112f5a4:	10c00317 	ldw	r3,12(r2)
8112f5a8:	e0bffd17 	ldw	r2,-12(fp)
8112f5ac:	10800417 	ldw	r2,16(r2)
8112f5b0:	e1bfff17 	ldw	r6,-4(fp)
8112f5b4:	100b883a 	mov	r5,r2
8112f5b8:	1809883a 	mov	r4,r3
8112f5bc:	112eb980 	call	8112eb98 <alt_msgdma_write_extended_descriptor>
8112f5c0:	103fe61e 	bne	r2,zero,8112f55c <__reset+0xfb10f55c>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8112f5c4:	00000606 	br	8112f5e0 <alt_msgdma_descriptor_sync_transfer+0x280>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8112f5c8:	e0bffd17 	ldw	r2,-12(fp)
8112f5cc:	10801817 	ldw	r2,96(r2)
8112f5d0:	1009883a 	mov	r4,r2
8112f5d4:	11260280 	call	81126028 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8112f5d8:	00bfffc4 	movi	r2,-1
8112f5dc:	00005b06 	br	8112f74c <alt_msgdma_descriptor_sync_transfer+0x3ec>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8112f5e0:	e0bffd17 	ldw	r2,-12(fp)
8112f5e4:	10800317 	ldw	r2,12(r2)
8112f5e8:	10800104 	addi	r2,r2,4
8112f5ec:	e0fffd17 	ldw	r3,-12(fp)
8112f5f0:	19000d17 	ldw	r4,52(r3)
8112f5f4:	00fff2c4 	movi	r3,-53
8112f5f8:	20c6703a 	and	r3,r4,r3
8112f5fc:	18c00114 	ori	r3,r3,4
8112f600:	10c00035 	stwio	r3,0(r2)
8112f604:	e0bff517 	ldw	r2,-44(fp)
8112f608:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f60c:	e0bff717 	ldw	r2,-36(fp)
8112f610:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8112f614:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8112f618:	e0bffd17 	ldw	r2,-12(fp)
8112f61c:	10800317 	ldw	r2,12(r2)
8112f620:	10800037 	ldwio	r2,0(r2)
8112f624:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8112f628:	00001506 	br	8112f680 <alt_msgdma_descriptor_sync_transfer+0x320>
    {
        alt_busy_sleep(1); /* delay 1us */
8112f62c:	01000044 	movi	r4,1
8112f630:	1130bf00 	call	81130bf0 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8112f634:	e0bff10b 	ldhu	r2,-60(fp)
8112f638:	1084e230 	cmpltui	r2,r2,5000
8112f63c:	1000091e 	bne	r2,zero,8112f664 <alt_msgdma_descriptor_sync_transfer+0x304>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8112f640:	012044f4 	movhi	r4,33043
8112f644:	21102204 	addi	r4,r4,16520
8112f648:	11315340 	call	81131534 <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
8112f64c:	e0bffd17 	ldw	r2,-12(fp)
8112f650:	10801817 	ldw	r2,96(r2)
8112f654:	1009883a 	mov	r4,r2
8112f658:	11260280 	call	81126028 <OSSemPost>
			
            return -ETIME;
8112f65c:	00bff084 	movi	r2,-62
8112f660:	00003a06 	br	8112f74c <alt_msgdma_descriptor_sync_transfer+0x3ec>
        }
        counter++;
8112f664:	e0bff10b 	ldhu	r2,-60(fp)
8112f668:	10800044 	addi	r2,r2,1
8112f66c:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8112f670:	e0bffd17 	ldw	r2,-12(fp)
8112f674:	10800317 	ldw	r2,12(r2)
8112f678:	10800037 	ldwio	r2,0(r2)
8112f67c:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8112f680:	e0fff017 	ldw	r3,-64(fp)
8112f684:	e0bff617 	ldw	r2,-40(fp)
8112f688:	1884703a 	and	r2,r3,r2
8112f68c:	1000031e 	bne	r2,zero,8112f69c <alt_msgdma_descriptor_sync_transfer+0x33c>
8112f690:	e0bff017 	ldw	r2,-64(fp)
8112f694:	1080004c 	andi	r2,r2,1
8112f698:	103fe41e 	bne	r2,zero,8112f62c <__reset+0xfb10f62c>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8112f69c:	e0fff017 	ldw	r3,-64(fp)
8112f6a0:	e0bff617 	ldw	r2,-40(fp)
8112f6a4:	1884703a 	and	r2,r3,r2
8112f6a8:	10000626 	beq	r2,zero,8112f6c4 <alt_msgdma_descriptor_sync_transfer+0x364>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8112f6ac:	e0bffd17 	ldw	r2,-12(fp)
8112f6b0:	10801817 	ldw	r2,96(r2)
8112f6b4:	1009883a 	mov	r4,r2
8112f6b8:	11260280 	call	81126028 <OSSemPost>
		
        return error;
8112f6bc:	e0bff617 	ldw	r2,-40(fp)
8112f6c0:	00002206 	br	8112f74c <alt_msgdma_descriptor_sync_transfer+0x3ec>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8112f6c4:	e0bffd17 	ldw	r2,-12(fp)
8112f6c8:	10800317 	ldw	r2,12(r2)
8112f6cc:	10800104 	addi	r2,r2,4
8112f6d0:	10800037 	ldwio	r2,0(r2)
8112f6d4:	10800814 	ori	r2,r2,32
8112f6d8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f6dc:	0005303a 	rdctl	r2,status
8112f6e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f6e4:	e0fffa17 	ldw	r3,-24(fp)
8112f6e8:	00bfff84 	movi	r2,-2
8112f6ec:	1884703a 	and	r2,r3,r2
8112f6f0:	1001703a 	wrctl	status,r2
  
  return context;
8112f6f4:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8112f6f8:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8112f6fc:	e0bffd17 	ldw	r2,-12(fp)
8112f700:	10800317 	ldw	r2,12(r2)
8112f704:	10800104 	addi	r2,r2,4
8112f708:	e0fff417 	ldw	r3,-48(fp)
8112f70c:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8112f710:	e0bffd17 	ldw	r2,-12(fp)
8112f714:	10800317 	ldw	r2,12(r2)
8112f718:	e0fffd17 	ldw	r3,-12(fp)
8112f71c:	18c00317 	ldw	r3,12(r3)
8112f720:	18c00037 	ldwio	r3,0(r3)
8112f724:	10c00035 	stwio	r3,0(r2)
8112f728:	e0bff517 	ldw	r2,-44(fp)
8112f72c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f730:	e0bff917 	ldw	r2,-28(fp)
8112f734:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
8112f738:	e0bffd17 	ldw	r2,-12(fp)
8112f73c:	10801817 	ldw	r2,96(r2)
8112f740:	1009883a 	mov	r4,r2
8112f744:	11260280 	call	81126028 <OSSemPost>
    
    return 0;
8112f748:	0005883a 	mov	r2,zero

}
8112f74c:	e037883a 	mov	sp,fp
8112f750:	dfc00117 	ldw	ra,4(sp)
8112f754:	df000017 	ldw	fp,0(sp)
8112f758:	dec00204 	addi	sp,sp,8
8112f75c:	f800283a 	ret

8112f760 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8112f760:	defff804 	addi	sp,sp,-32
8112f764:	dfc00715 	stw	ra,28(sp)
8112f768:	df000615 	stw	fp,24(sp)
8112f76c:	df000604 	addi	fp,sp,24
8112f770:	e13ffc15 	stw	r4,-16(fp)
8112f774:	e17ffd15 	stw	r5,-12(fp)
8112f778:	e1bffe15 	stw	r6,-8(fp)
8112f77c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8112f780:	e0800217 	ldw	r2,8(fp)
8112f784:	d8800115 	stw	r2,4(sp)
8112f788:	e0bfff17 	ldw	r2,-4(fp)
8112f78c:	d8800015 	stw	r2,0(sp)
8112f790:	e1fffe17 	ldw	r7,-8(fp)
8112f794:	000d883a 	mov	r6,zero
8112f798:	e17ffd17 	ldw	r5,-12(fp)
8112f79c:	e13ffc17 	ldw	r4,-16(fp)
8112f7a0:	112ee480 	call	8112ee48 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8112f7a4:	e037883a 	mov	sp,fp
8112f7a8:	dfc00117 	ldw	ra,4(sp)
8112f7ac:	df000017 	ldw	fp,0(sp)
8112f7b0:	dec00204 	addi	sp,sp,8
8112f7b4:	f800283a 	ret

8112f7b8 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
8112f7b8:	defff804 	addi	sp,sp,-32
8112f7bc:	dfc00715 	stw	ra,28(sp)
8112f7c0:	df000615 	stw	fp,24(sp)
8112f7c4:	df000604 	addi	fp,sp,24
8112f7c8:	e13ffc15 	stw	r4,-16(fp)
8112f7cc:	e17ffd15 	stw	r5,-12(fp)
8112f7d0:	e1bffe15 	stw	r6,-8(fp)
8112f7d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8112f7d8:	e0800217 	ldw	r2,8(fp)
8112f7dc:	d8800115 	stw	r2,4(sp)
8112f7e0:	e0bfff17 	ldw	r2,-4(fp)
8112f7e4:	d8800015 	stw	r2,0(sp)
8112f7e8:	000f883a 	mov	r7,zero
8112f7ec:	e1bffe17 	ldw	r6,-8(fp)
8112f7f0:	e17ffd17 	ldw	r5,-12(fp)
8112f7f4:	e13ffc17 	ldw	r4,-16(fp)
8112f7f8:	112ee480 	call	8112ee48 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8112f7fc:	e037883a 	mov	sp,fp
8112f800:	dfc00117 	ldw	ra,4(sp)
8112f804:	df000017 	ldw	fp,0(sp)
8112f808:	dec00204 	addi	sp,sp,8
8112f80c:	f800283a 	ret

8112f810 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8112f810:	defff804 	addi	sp,sp,-32
8112f814:	dfc00715 	stw	ra,28(sp)
8112f818:	df000615 	stw	fp,24(sp)
8112f81c:	df000604 	addi	fp,sp,24
8112f820:	e13ffc15 	stw	r4,-16(fp)
8112f824:	e17ffd15 	stw	r5,-12(fp)
8112f828:	e1bffe15 	stw	r6,-8(fp)
8112f82c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8112f830:	e0800317 	ldw	r2,12(fp)
8112f834:	d8800115 	stw	r2,4(sp)
8112f838:	e0800217 	ldw	r2,8(fp)
8112f83c:	d8800015 	stw	r2,0(sp)
8112f840:	e1ffff17 	ldw	r7,-4(fp)
8112f844:	e1bffe17 	ldw	r6,-8(fp)
8112f848:	e17ffd17 	ldw	r5,-12(fp)
8112f84c:	e13ffc17 	ldw	r4,-16(fp)
8112f850:	112ee480 	call	8112ee48 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8112f854:	e037883a 	mov	sp,fp
8112f858:	dfc00117 	ldw	ra,4(sp)
8112f85c:	df000017 	ldw	fp,0(sp)
8112f860:	dec00204 	addi	sp,sp,8
8112f864:	f800283a 	ret

8112f868 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
8112f868:	defff004 	addi	sp,sp,-64
8112f86c:	dfc00f15 	stw	ra,60(sp)
8112f870:	df000e15 	stw	fp,56(sp)
8112f874:	df000e04 	addi	fp,sp,56
8112f878:	e13ff915 	stw	r4,-28(fp)
8112f87c:	e17ffa15 	stw	r5,-24(fp)
8112f880:	e1bffb15 	stw	r6,-20(fp)
8112f884:	e1fffc15 	stw	r7,-16(fp)
8112f888:	e1000317 	ldw	r4,12(fp)
8112f88c:	e0c00417 	ldw	r3,16(fp)
8112f890:	e0800517 	ldw	r2,20(fp)
8112f894:	e13ffd0d 	sth	r4,-12(fp)
8112f898:	e0fffe05 	stb	r3,-8(fp)
8112f89c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8112f8a0:	e0bffd0b 	ldhu	r2,-12(fp)
8112f8a4:	e0fffe03 	ldbu	r3,-8(fp)
8112f8a8:	e13fff0b 	ldhu	r4,-4(fp)
8112f8ac:	d9000615 	stw	r4,24(sp)
8112f8b0:	d8000515 	stw	zero,20(sp)
8112f8b4:	d8c00415 	stw	r3,16(sp)
8112f8b8:	d8000315 	stw	zero,12(sp)
8112f8bc:	d8800215 	stw	r2,8(sp)
8112f8c0:	e0800217 	ldw	r2,8(fp)
8112f8c4:	d8800115 	stw	r2,4(sp)
8112f8c8:	e0bffc17 	ldw	r2,-16(fp)
8112f8cc:	d8800015 	stw	r2,0(sp)
8112f8d0:	e1fffb17 	ldw	r7,-20(fp)
8112f8d4:	000d883a 	mov	r6,zero
8112f8d8:	e17ffa17 	ldw	r5,-24(fp)
8112f8dc:	e13ff917 	ldw	r4,-28(fp)
8112f8e0:	112eed40 	call	8112eed4 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8112f8e4:	e037883a 	mov	sp,fp
8112f8e8:	dfc00117 	ldw	ra,4(sp)
8112f8ec:	df000017 	ldw	fp,0(sp)
8112f8f0:	dec00204 	addi	sp,sp,8
8112f8f4:	f800283a 	ret

8112f8f8 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8112f8f8:	defff004 	addi	sp,sp,-64
8112f8fc:	dfc00f15 	stw	ra,60(sp)
8112f900:	df000e15 	stw	fp,56(sp)
8112f904:	df000e04 	addi	fp,sp,56
8112f908:	e13ff915 	stw	r4,-28(fp)
8112f90c:	e17ffa15 	stw	r5,-24(fp)
8112f910:	e1bffb15 	stw	r6,-20(fp)
8112f914:	e1fffc15 	stw	r7,-16(fp)
8112f918:	e1000317 	ldw	r4,12(fp)
8112f91c:	e0c00417 	ldw	r3,16(fp)
8112f920:	e0800517 	ldw	r2,20(fp)
8112f924:	e13ffd0d 	sth	r4,-12(fp)
8112f928:	e0fffe05 	stb	r3,-8(fp)
8112f92c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8112f930:	e0bffd0b 	ldhu	r2,-12(fp)
8112f934:	e0fffe03 	ldbu	r3,-8(fp)
8112f938:	e13fff0b 	ldhu	r4,-4(fp)
8112f93c:	d8000615 	stw	zero,24(sp)
8112f940:	d9000515 	stw	r4,20(sp)
8112f944:	d8000415 	stw	zero,16(sp)
8112f948:	d8c00315 	stw	r3,12(sp)
8112f94c:	d8800215 	stw	r2,8(sp)
8112f950:	e0800217 	ldw	r2,8(fp)
8112f954:	d8800115 	stw	r2,4(sp)
8112f958:	e0bffc17 	ldw	r2,-16(fp)
8112f95c:	d8800015 	stw	r2,0(sp)
8112f960:	000f883a 	mov	r7,zero
8112f964:	e1bffb17 	ldw	r6,-20(fp)
8112f968:	e17ffa17 	ldw	r5,-24(fp)
8112f96c:	e13ff917 	ldw	r4,-28(fp)
8112f970:	112eed40 	call	8112eed4 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8112f974:	e037883a 	mov	sp,fp
8112f978:	dfc00117 	ldw	ra,4(sp)
8112f97c:	df000017 	ldw	fp,0(sp)
8112f980:	dec00204 	addi	sp,sp,8
8112f984:	f800283a 	ret

8112f988 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8112f988:	deffee04 	addi	sp,sp,-72
8112f98c:	dfc01115 	stw	ra,68(sp)
8112f990:	df001015 	stw	fp,64(sp)
8112f994:	df001004 	addi	fp,sp,64
8112f998:	e13ff715 	stw	r4,-36(fp)
8112f99c:	e17ff815 	stw	r5,-32(fp)
8112f9a0:	e1bff915 	stw	r6,-28(fp)
8112f9a4:	e1fffa15 	stw	r7,-24(fp)
8112f9a8:	e1800417 	ldw	r6,16(fp)
8112f9ac:	e1400517 	ldw	r5,20(fp)
8112f9b0:	e1000617 	ldw	r4,24(fp)
8112f9b4:	e0c00717 	ldw	r3,28(fp)
8112f9b8:	e0800817 	ldw	r2,32(fp)
8112f9bc:	e1bffb0d 	sth	r6,-20(fp)
8112f9c0:	e17ffc05 	stb	r5,-16(fp)
8112f9c4:	e13ffd05 	stb	r4,-12(fp)
8112f9c8:	e0fffe0d 	sth	r3,-8(fp)
8112f9cc:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8112f9d0:	e0bffb0b 	ldhu	r2,-20(fp)
8112f9d4:	e0fffc03 	ldbu	r3,-16(fp)
8112f9d8:	e13ffd03 	ldbu	r4,-12(fp)
8112f9dc:	e17ffe0b 	ldhu	r5,-8(fp)
8112f9e0:	e1bfff0b 	ldhu	r6,-4(fp)
8112f9e4:	d9800615 	stw	r6,24(sp)
8112f9e8:	d9400515 	stw	r5,20(sp)
8112f9ec:	d9000415 	stw	r4,16(sp)
8112f9f0:	d8c00315 	stw	r3,12(sp)
8112f9f4:	d8800215 	stw	r2,8(sp)
8112f9f8:	e0800317 	ldw	r2,12(fp)
8112f9fc:	d8800115 	stw	r2,4(sp)
8112fa00:	e0800217 	ldw	r2,8(fp)
8112fa04:	d8800015 	stw	r2,0(sp)
8112fa08:	e1fffa17 	ldw	r7,-24(fp)
8112fa0c:	e1bff917 	ldw	r6,-28(fp)
8112fa10:	e17ff817 	ldw	r5,-32(fp)
8112fa14:	e13ff717 	ldw	r4,-36(fp)
8112fa18:	112eed40 	call	8112eed4 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8112fa1c:	e037883a 	mov	sp,fp
8112fa20:	dfc00117 	ldw	ra,4(sp)
8112fa24:	df000017 	ldw	fp,0(sp)
8112fa28:	dec00204 	addi	sp,sp,8
8112fa2c:	f800283a 	ret

8112fa30 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8112fa30:	defffb04 	addi	sp,sp,-20
8112fa34:	df000415 	stw	fp,16(sp)
8112fa38:	df000404 	addi	fp,sp,16
8112fa3c:	e13ffc15 	stw	r4,-16(fp)
8112fa40:	e17ffd15 	stw	r5,-12(fp)
8112fa44:	e1bffe15 	stw	r6,-8(fp)
8112fa48:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8112fa4c:	e0bffc17 	ldw	r2,-16(fp)
8112fa50:	10c01217 	ldw	r3,72(r2)
8112fa54:	e0800117 	ldw	r2,4(fp)
8112fa58:	18800436 	bltu	r3,r2,8112fa6c <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
8112fa5c:	e0bffc17 	ldw	r2,-16(fp)
8112fa60:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8112fa64:	10803fcc 	andi	r2,r2,255
8112fa68:	10000226 	beq	r2,zero,8112fa74 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8112fa6c:	00bffa84 	movi	r2,-22
8112fa70:	00001406 	br	8112fac4 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
8112fa74:	e0bffd17 	ldw	r2,-12(fp)
8112fa78:	e0fffe17 	ldw	r3,-8(fp)
8112fa7c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8112fa80:	e0bffd17 	ldw	r2,-12(fp)
8112fa84:	e0ffff17 	ldw	r3,-4(fp)
8112fa88:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8112fa8c:	e0bffd17 	ldw	r2,-12(fp)
8112fa90:	e0c00117 	ldw	r3,4(fp)
8112fa94:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8112fa98:	e0fffd17 	ldw	r3,-12(fp)
8112fa9c:	e0bffd17 	ldw	r2,-12(fp)
8112faa0:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8112faa4:	e0c00217 	ldw	r3,8(fp)
8112faa8:	00900034 	movhi	r2,16384
8112faac:	10bfffc4 	addi	r2,r2,-1
8112fab0:	1884703a 	and	r2,r3,r2
8112fab4:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8112fab8:	e0bffd17 	ldw	r2,-12(fp)
8112fabc:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8112fac0:	0005883a 	mov	r2,zero
}
8112fac4:	e037883a 	mov	sp,fp
8112fac8:	df000017 	ldw	fp,0(sp)
8112facc:	dec00104 	addi	sp,sp,4
8112fad0:	f800283a 	ret

8112fad4 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8112fad4:	defff404 	addi	sp,sp,-48
8112fad8:	df000b15 	stw	fp,44(sp)
8112fadc:	df000b04 	addi	fp,sp,44
8112fae0:	e13ff715 	stw	r4,-36(fp)
8112fae4:	e17ff815 	stw	r5,-32(fp)
8112fae8:	e1bff915 	stw	r6,-28(fp)
8112faec:	e1fffa15 	stw	r7,-24(fp)
8112faf0:	e1800517 	ldw	r6,20(fp)
8112faf4:	e1400617 	ldw	r5,24(fp)
8112faf8:	e1000717 	ldw	r4,28(fp)
8112fafc:	e0c00817 	ldw	r3,32(fp)
8112fb00:	e0800917 	ldw	r2,36(fp)
8112fb04:	e1bffb0d 	sth	r6,-20(fp)
8112fb08:	e17ffc05 	stb	r5,-16(fp)
8112fb0c:	e13ffd05 	stb	r4,-12(fp)
8112fb10:	e0fffe0d 	sth	r3,-8(fp)
8112fb14:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8112fb18:	e0bff717 	ldw	r2,-36(fp)
8112fb1c:	10c01217 	ldw	r3,72(r2)
8112fb20:	e0800317 	ldw	r2,12(fp)
8112fb24:	18801936 	bltu	r3,r2,8112fb8c <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
8112fb28:	e13ff717 	ldw	r4,-36(fp)
8112fb2c:	20801317 	ldw	r2,76(r4)
8112fb30:	20c01417 	ldw	r3,80(r4)
8112fb34:	e13ffe0b 	ldhu	r4,-8(fp)
8112fb38:	213fffcc 	andi	r4,r4,65535
8112fb3c:	2015883a 	mov	r10,r4
8112fb40:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8112fb44:	1ac01136 	bltu	r3,r11,8112fb8c <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8112fb48:	58c0011e 	bne	r11,r3,8112fb50 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
8112fb4c:	12800f36 	bltu	r2,r10,8112fb8c <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8112fb50:	e13ff717 	ldw	r4,-36(fp)
8112fb54:	20801317 	ldw	r2,76(r4)
8112fb58:	20c01417 	ldw	r3,80(r4)
8112fb5c:	e13fff0b 	ldhu	r4,-4(fp)
8112fb60:	213fffcc 	andi	r4,r4,65535
8112fb64:	2011883a 	mov	r8,r4
8112fb68:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8112fb6c:	1a400736 	bltu	r3,r9,8112fb8c <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
8112fb70:	48c0011e 	bne	r9,r3,8112fb78 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
8112fb74:	12000536 	bltu	r2,r8,8112fb8c <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8112fb78:	e0bff717 	ldw	r2,-36(fp)
8112fb7c:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8112fb80:	10803fcc 	andi	r2,r2,255
8112fb84:	10800060 	cmpeqi	r2,r2,1
8112fb88:	1000021e 	bne	r2,zero,8112fb94 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8112fb8c:	00bffa84 	movi	r2,-22
8112fb90:	00003106 	br	8112fc58 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
8112fb94:	e0bff817 	ldw	r2,-32(fp)
8112fb98:	e0fff917 	ldw	r3,-28(fp)
8112fb9c:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8112fba0:	e0bff817 	ldw	r2,-32(fp)
8112fba4:	e0fffa17 	ldw	r3,-24(fp)
8112fba8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8112fbac:	e0bff817 	ldw	r2,-32(fp)
8112fbb0:	e0c00117 	ldw	r3,4(fp)
8112fbb4:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8112fbb8:	e0bff817 	ldw	r2,-32(fp)
8112fbbc:	e0c00217 	ldw	r3,8(fp)
8112fbc0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8112fbc4:	e0bff817 	ldw	r2,-32(fp)
8112fbc8:	e0c00317 	ldw	r3,12(fp)
8112fbcc:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8112fbd0:	e0bff817 	ldw	r2,-32(fp)
8112fbd4:	e0fffb0b 	ldhu	r3,-20(fp)
8112fbd8:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8112fbdc:	e0bff817 	ldw	r2,-32(fp)
8112fbe0:	e0fffc03 	ldbu	r3,-16(fp)
8112fbe4:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8112fbe8:	e0bff817 	ldw	r2,-32(fp)
8112fbec:	e0fffd03 	ldbu	r3,-12(fp)
8112fbf0:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8112fbf4:	e0bff817 	ldw	r2,-32(fp)
8112fbf8:	e0fffe0b 	ldhu	r3,-8(fp)
8112fbfc:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8112fc00:	e0bff817 	ldw	r2,-32(fp)
8112fc04:	e0ffff0b 	ldhu	r3,-4(fp)
8112fc08:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
8112fc0c:	e0bff817 	ldw	r2,-32(fp)
8112fc10:	1019883a 	mov	r12,r2
8112fc14:	001b883a 	mov	r13,zero
8112fc18:	e33ff515 	stw	r12,-44(fp)
8112fc1c:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8112fc20:	e0fff517 	ldw	r3,-44(fp)
8112fc24:	e0bff817 	ldw	r2,-32(fp)
8112fc28:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8112fc2c:	e0fff617 	ldw	r3,-40(fp)
8112fc30:	e0bff817 	ldw	r2,-32(fp)
8112fc34:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8112fc38:	e0c00417 	ldw	r3,16(fp)
8112fc3c:	00900034 	movhi	r2,16384
8112fc40:	10bfffc4 	addi	r2,r2,-1
8112fc44:	1884703a 	and	r2,r3,r2
8112fc48:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8112fc4c:	e0bff817 	ldw	r2,-32(fp)
8112fc50:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8112fc54:	0005883a 	mov	r2,zero
}
8112fc58:	e037883a 	mov	sp,fp
8112fc5c:	df000017 	ldw	fp,0(sp)
8112fc60:	dec00104 	addi	sp,sp,4
8112fc64:	f800283a 	ret

8112fc68 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
8112fc68:	defff804 	addi	sp,sp,-32
8112fc6c:	dfc00715 	stw	ra,28(sp)
8112fc70:	df000615 	stw	fp,24(sp)
8112fc74:	df000604 	addi	fp,sp,24
8112fc78:	e13ffc15 	stw	r4,-16(fp)
8112fc7c:	e17ffd15 	stw	r5,-12(fp)
8112fc80:	e1bffe15 	stw	r6,-8(fp)
8112fc84:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8112fc88:	e0800317 	ldw	r2,12(fp)
8112fc8c:	d8800115 	stw	r2,4(sp)
8112fc90:	e0800217 	ldw	r2,8(fp)
8112fc94:	d8800015 	stw	r2,0(sp)
8112fc98:	e1ffff17 	ldw	r7,-4(fp)
8112fc9c:	e1bffe17 	ldw	r6,-8(fp)
8112fca0:	e17ffd17 	ldw	r5,-12(fp)
8112fca4:	e13ffc17 	ldw	r4,-16(fp)
8112fca8:	112fa300 	call	8112fa30 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
8112fcac:	e037883a 	mov	sp,fp
8112fcb0:	dfc00117 	ldw	ra,4(sp)
8112fcb4:	df000017 	ldw	fp,0(sp)
8112fcb8:	dec00204 	addi	sp,sp,8
8112fcbc:	f800283a 	ret

8112fcc0 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8112fcc0:	defff804 	addi	sp,sp,-32
8112fcc4:	dfc00715 	stw	ra,28(sp)
8112fcc8:	df000615 	stw	fp,24(sp)
8112fccc:	df000604 	addi	fp,sp,24
8112fcd0:	e13ffc15 	stw	r4,-16(fp)
8112fcd4:	e17ffd15 	stw	r5,-12(fp)
8112fcd8:	e1bffe15 	stw	r6,-8(fp)
8112fcdc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8112fce0:	e0800217 	ldw	r2,8(fp)
8112fce4:	d8800115 	stw	r2,4(sp)
8112fce8:	e0bfff17 	ldw	r2,-4(fp)
8112fcec:	d8800015 	stw	r2,0(sp)
8112fcf0:	e1fffe17 	ldw	r7,-8(fp)
8112fcf4:	000d883a 	mov	r6,zero
8112fcf8:	e17ffd17 	ldw	r5,-12(fp)
8112fcfc:	e13ffc17 	ldw	r4,-16(fp)
8112fd00:	112fa300 	call	8112fa30 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
8112fd04:	e037883a 	mov	sp,fp
8112fd08:	dfc00117 	ldw	ra,4(sp)
8112fd0c:	df000017 	ldw	fp,0(sp)
8112fd10:	dec00204 	addi	sp,sp,8
8112fd14:	f800283a 	ret

8112fd18 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
8112fd18:	defff804 	addi	sp,sp,-32
8112fd1c:	dfc00715 	stw	ra,28(sp)
8112fd20:	df000615 	stw	fp,24(sp)
8112fd24:	df000604 	addi	fp,sp,24
8112fd28:	e13ffc15 	stw	r4,-16(fp)
8112fd2c:	e17ffd15 	stw	r5,-12(fp)
8112fd30:	e1bffe15 	stw	r6,-8(fp)
8112fd34:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8112fd38:	e0800217 	ldw	r2,8(fp)
8112fd3c:	d8800115 	stw	r2,4(sp)
8112fd40:	e0bfff17 	ldw	r2,-4(fp)
8112fd44:	d8800015 	stw	r2,0(sp)
8112fd48:	000f883a 	mov	r7,zero
8112fd4c:	e1bffe17 	ldw	r6,-8(fp)
8112fd50:	e17ffd17 	ldw	r5,-12(fp)
8112fd54:	e13ffc17 	ldw	r4,-16(fp)
8112fd58:	112fa300 	call	8112fa30 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
8112fd5c:	e037883a 	mov	sp,fp
8112fd60:	dfc00117 	ldw	ra,4(sp)
8112fd64:	df000017 	ldw	fp,0(sp)
8112fd68:	dec00204 	addi	sp,sp,8
8112fd6c:	f800283a 	ret

8112fd70 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8112fd70:	deffee04 	addi	sp,sp,-72
8112fd74:	dfc01115 	stw	ra,68(sp)
8112fd78:	df001015 	stw	fp,64(sp)
8112fd7c:	df001004 	addi	fp,sp,64
8112fd80:	e13ff915 	stw	r4,-28(fp)
8112fd84:	e17ffa15 	stw	r5,-24(fp)
8112fd88:	e1bffb15 	stw	r6,-20(fp)
8112fd8c:	e1fffc15 	stw	r7,-16(fp)
8112fd90:	e1000417 	ldw	r4,16(fp)
8112fd94:	e0c00517 	ldw	r3,20(fp)
8112fd98:	e0800617 	ldw	r2,24(fp)
8112fd9c:	e13ffd0d 	sth	r4,-12(fp)
8112fda0:	e0fffe05 	stb	r3,-8(fp)
8112fda4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8112fda8:	e0bffd0b 	ldhu	r2,-12(fp)
8112fdac:	e0fffe03 	ldbu	r3,-8(fp)
8112fdb0:	e13fff0b 	ldhu	r4,-4(fp)
8112fdb4:	d9000815 	stw	r4,32(sp)
8112fdb8:	d8000715 	stw	zero,28(sp)
8112fdbc:	d8c00615 	stw	r3,24(sp)
8112fdc0:	d8000515 	stw	zero,20(sp)
8112fdc4:	d8800415 	stw	r2,16(sp)
8112fdc8:	e0800317 	ldw	r2,12(fp)
8112fdcc:	d8800315 	stw	r2,12(sp)
8112fdd0:	e0800217 	ldw	r2,8(fp)
8112fdd4:	d8800215 	stw	r2,8(sp)
8112fdd8:	e0bffc17 	ldw	r2,-16(fp)
8112fddc:	d8800115 	stw	r2,4(sp)
8112fde0:	e0bffb17 	ldw	r2,-20(fp)
8112fde4:	d8800015 	stw	r2,0(sp)
8112fde8:	000f883a 	mov	r7,zero
8112fdec:	000d883a 	mov	r6,zero
8112fdf0:	e17ffa17 	ldw	r5,-24(fp)
8112fdf4:	e13ff917 	ldw	r4,-28(fp)
8112fdf8:	112fad40 	call	8112fad4 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
8112fdfc:	e037883a 	mov	sp,fp
8112fe00:	dfc00117 	ldw	ra,4(sp)
8112fe04:	df000017 	ldw	fp,0(sp)
8112fe08:	dec00204 	addi	sp,sp,8
8112fe0c:	f800283a 	ret

8112fe10 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8112fe10:	deffee04 	addi	sp,sp,-72
8112fe14:	dfc01115 	stw	ra,68(sp)
8112fe18:	df001015 	stw	fp,64(sp)
8112fe1c:	df001004 	addi	fp,sp,64
8112fe20:	e13ff915 	stw	r4,-28(fp)
8112fe24:	e17ffa15 	stw	r5,-24(fp)
8112fe28:	e1bffb15 	stw	r6,-20(fp)
8112fe2c:	e1fffc15 	stw	r7,-16(fp)
8112fe30:	e1000417 	ldw	r4,16(fp)
8112fe34:	e0c00517 	ldw	r3,20(fp)
8112fe38:	e0800617 	ldw	r2,24(fp)
8112fe3c:	e13ffd0d 	sth	r4,-12(fp)
8112fe40:	e0fffe05 	stb	r3,-8(fp)
8112fe44:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8112fe48:	e0bffd0b 	ldhu	r2,-12(fp)
8112fe4c:	e0fffe03 	ldbu	r3,-8(fp)
8112fe50:	e13fff0b 	ldhu	r4,-4(fp)
8112fe54:	d8000815 	stw	zero,32(sp)
8112fe58:	d9000715 	stw	r4,28(sp)
8112fe5c:	d8000615 	stw	zero,24(sp)
8112fe60:	d8c00515 	stw	r3,20(sp)
8112fe64:	d8800415 	stw	r2,16(sp)
8112fe68:	e0800317 	ldw	r2,12(fp)
8112fe6c:	d8800315 	stw	r2,12(sp)
8112fe70:	e0800217 	ldw	r2,8(fp)
8112fe74:	d8800215 	stw	r2,8(sp)
8112fe78:	d8000115 	stw	zero,4(sp)
8112fe7c:	d8000015 	stw	zero,0(sp)
8112fe80:	e1fffc17 	ldw	r7,-16(fp)
8112fe84:	e1bffb17 	ldw	r6,-20(fp)
8112fe88:	e17ffa17 	ldw	r5,-24(fp)
8112fe8c:	e13ff917 	ldw	r4,-28(fp)
8112fe90:	112fad40 	call	8112fad4 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
8112fe94:	e037883a 	mov	sp,fp
8112fe98:	dfc00117 	ldw	ra,4(sp)
8112fe9c:	df000017 	ldw	fp,0(sp)
8112fea0:	dec00204 	addi	sp,sp,8
8112fea4:	f800283a 	ret

8112fea8 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8112fea8:	deffec04 	addi	sp,sp,-80
8112feac:	dfc01315 	stw	ra,76(sp)
8112feb0:	df001215 	stw	fp,72(sp)
8112feb4:	df001204 	addi	fp,sp,72
8112feb8:	e13ff715 	stw	r4,-36(fp)
8112febc:	e17ff815 	stw	r5,-32(fp)
8112fec0:	e1bff915 	stw	r6,-28(fp)
8112fec4:	e1fffa15 	stw	r7,-24(fp)
8112fec8:	e1800617 	ldw	r6,24(fp)
8112fecc:	e1400717 	ldw	r5,28(fp)
8112fed0:	e1000817 	ldw	r4,32(fp)
8112fed4:	e0c00917 	ldw	r3,36(fp)
8112fed8:	e0800a17 	ldw	r2,40(fp)
8112fedc:	e1bffb0d 	sth	r6,-20(fp)
8112fee0:	e17ffc05 	stb	r5,-16(fp)
8112fee4:	e13ffd05 	stb	r4,-12(fp)
8112fee8:	e0fffe0d 	sth	r3,-8(fp)
8112feec:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8112fef0:	e0bffb0b 	ldhu	r2,-20(fp)
8112fef4:	e0fffc03 	ldbu	r3,-16(fp)
8112fef8:	e13ffd03 	ldbu	r4,-12(fp)
8112fefc:	e17ffe0b 	ldhu	r5,-8(fp)
8112ff00:	e1bfff0b 	ldhu	r6,-4(fp)
8112ff04:	d9800815 	stw	r6,32(sp)
8112ff08:	d9400715 	stw	r5,28(sp)
8112ff0c:	d9000615 	stw	r4,24(sp)
8112ff10:	d8c00515 	stw	r3,20(sp)
8112ff14:	d8800415 	stw	r2,16(sp)
8112ff18:	e0800517 	ldw	r2,20(fp)
8112ff1c:	d8800315 	stw	r2,12(sp)
8112ff20:	e0800417 	ldw	r2,16(fp)
8112ff24:	d8800215 	stw	r2,8(sp)
8112ff28:	e0800317 	ldw	r2,12(fp)
8112ff2c:	d8800115 	stw	r2,4(sp)
8112ff30:	e0800217 	ldw	r2,8(fp)
8112ff34:	d8800015 	stw	r2,0(sp)
8112ff38:	e1fffa17 	ldw	r7,-24(fp)
8112ff3c:	e1bff917 	ldw	r6,-28(fp)
8112ff40:	e17ff817 	ldw	r5,-32(fp)
8112ff44:	e13ff717 	ldw	r4,-36(fp)
8112ff48:	112fad40 	call	8112fad4 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8112ff4c:	e037883a 	mov	sp,fp
8112ff50:	dfc00117 	ldw	ra,4(sp)
8112ff54:	df000017 	ldw	fp,0(sp)
8112ff58:	dec00204 	addi	sp,sp,8
8112ff5c:	f800283a 	ret

8112ff60 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8112ff60:	defffc04 	addi	sp,sp,-16
8112ff64:	df000315 	stw	fp,12(sp)
8112ff68:	df000304 	addi	fp,sp,12
8112ff6c:	e13ffe15 	stw	r4,-8(fp)
8112ff70:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
8112ff74:	e0bfff17 	ldw	r2,-4(fp)
8112ff78:	1000021e 	bne	r2,zero,8112ff84 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8112ff7c:	00bffa84 	movi	r2,-22
8112ff80:	00002f06 	br	81130040 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8112ff84:	e0bfff17 	ldw	r2,-4(fp)
8112ff88:	10c00317 	ldw	r3,12(r2)
8112ff8c:	e0bfff17 	ldw	r2,-4(fp)
8112ff90:	18800226 	beq	r3,r2,8112ff9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8112ff94:	00bffa84 	movi	r2,-22
8112ff98:	00002906 	br	81130040 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
8112ff9c:	e0bffe17 	ldw	r2,-8(fp)
8112ffa0:	10800017 	ldw	r2,0(r2)
8112ffa4:	1000051e 	bne	r2,zero,8112ffbc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
8112ffa8:	e0bffe17 	ldw	r2,-8(fp)
8112ffac:	e0ffff17 	ldw	r3,-4(fp)
8112ffb0:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
8112ffb4:	0005883a 	mov	r2,zero
8112ffb8:	00002106 	br	81130040 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
8112ffbc:	e0bffe17 	ldw	r2,-8(fp)
8112ffc0:	10c00017 	ldw	r3,0(r2)
8112ffc4:	e0bfff17 	ldw	r2,-4(fp)
8112ffc8:	1880021e 	bne	r3,r2,8112ffd4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8112ffcc:	00bffa84 	movi	r2,-22
8112ffd0:	00001b06 	br	81130040 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8112ffd4:	e0bffe17 	ldw	r2,-8(fp)
8112ffd8:	10800017 	ldw	r2,0(r2)
8112ffdc:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8112ffe0:	00000906 	br	81130008 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8112ffe4:	e0bffd17 	ldw	r2,-12(fp)
8112ffe8:	10c00317 	ldw	r3,12(r2)
8112ffec:	e0bfff17 	ldw	r2,-4(fp)
8112fff0:	1880021e 	bne	r3,r2,8112fffc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8112fff4:	00bffa84 	movi	r2,-22
8112fff8:	00001106 	br	81130040 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8112fffc:	e0bffd17 	ldw	r2,-12(fp)
81130000:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
81130004:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81130008:	e0bffd17 	ldw	r2,-12(fp)
8113000c:	10800317 	ldw	r2,12(r2)
81130010:	e0fffe17 	ldw	r3,-8(fp)
81130014:	18c00017 	ldw	r3,0(r3)
81130018:	10fff21e 	bne	r2,r3,8112ffe4 <__reset+0xfb10ffe4>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8113001c:	e0ffff17 	ldw	r3,-4(fp)
81130020:	e0bffd17 	ldw	r2,-12(fp)
81130024:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
81130028:	e0bffe17 	ldw	r2,-8(fp)
8113002c:	10800017 	ldw	r2,0(r2)
81130030:	1007883a 	mov	r3,r2
81130034:	e0bfff17 	ldw	r2,-4(fp)
81130038:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
8113003c:	0005883a 	mov	r2,zero
}
81130040:	e037883a 	mov	sp,fp
81130044:	df000017 	ldw	fp,0(sp)
81130048:	dec00104 	addi	sp,sp,4
8113004c:	f800283a 	ret

81130050 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
81130050:	defff804 	addi	sp,sp,-32
81130054:	df000715 	stw	fp,28(sp)
81130058:	df000704 	addi	fp,sp,28
8113005c:	e13ffe15 	stw	r4,-8(fp)
81130060:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
81130064:	e13fff17 	ldw	r4,-4(fp)
81130068:	2000021e 	bne	r4,zero,81130074 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8113006c:	00bffa84 	movi	r2,-22
81130070:	00005906 	br	811301d8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
81130074:	e13fff17 	ldw	r4,-4(fp)
81130078:	2015883a 	mov	r10,r4
8113007c:	0017883a 	mov	r11,zero
81130080:	e2bffc15 	stw	r10,-16(fp)
81130084:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
81130088:	e13fff17 	ldw	r4,-4(fp)
8113008c:	21400317 	ldw	r5,12(r4)
81130090:	e13ffc17 	ldw	r4,-16(fp)
81130094:	29000626 	beq	r5,r4,811300b0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
81130098:	e13fff17 	ldw	r4,-4(fp)
8113009c:	21400b17 	ldw	r5,44(r4)
811300a0:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811300a4:	29000226 	beq	r5,r4,811300b0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811300a8:	00bffa84 	movi	r2,-22
811300ac:	00004a06 	br	811301d8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
811300b0:	e13ffe17 	ldw	r4,-8(fp)
811300b4:	21000017 	ldw	r4,0(r4)
811300b8:	2000051e 	bne	r4,zero,811300d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
811300bc:	e0bffe17 	ldw	r2,-8(fp)
811300c0:	e0ffff17 	ldw	r3,-4(fp)
811300c4:	10c00015 	stw	r3,0(r2)
		return 0;
811300c8:	0005883a 	mov	r2,zero
811300cc:	00004206 	br	811301d8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
811300d0:	e13ffe17 	ldw	r4,-8(fp)
811300d4:	21400017 	ldw	r5,0(r4)
811300d8:	e13fff17 	ldw	r4,-4(fp)
811300dc:	2900021e 	bne	r5,r4,811300e8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
811300e0:	00bffa84 	movi	r2,-22
811300e4:	00003c06 	br	811301d8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
811300e8:	e13ffe17 	ldw	r4,-8(fp)
811300ec:	21000017 	ldw	r4,0(r4)
811300f0:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
811300f4:	e13ffe17 	ldw	r4,-8(fp)
811300f8:	21000017 	ldw	r4,0(r4)
811300fc:	2011883a 	mov	r8,r4
81130100:	0013883a 	mov	r9,zero
81130104:	e23ffa15 	stw	r8,-24(fp)
81130108:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113010c:	00001806 	br	81130170 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
81130110:	e13fff17 	ldw	r4,-4(fp)
81130114:	200d883a 	mov	r6,r4
81130118:	000f883a 	mov	r7,zero
8113011c:	e1bffc15 	stw	r6,-16(fp)
81130120:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
81130124:	e13ff917 	ldw	r4,-28(fp)
81130128:	21400317 	ldw	r5,12(r4)
8113012c:	e13ffc17 	ldw	r4,-16(fp)
81130130:	2900061e 	bne	r5,r4,8113014c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
81130134:	e13ff917 	ldw	r4,-28(fp)
81130138:	21400b17 	ldw	r5,44(r4)
8113013c:	e13ffd17 	ldw	r4,-12(fp)
81130140:	2900021e 	bne	r5,r4,8113014c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81130144:	00bffa84 	movi	r2,-22
81130148:	00002306 	br	811301d8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8113014c:	e13ff917 	ldw	r4,-28(fp)
81130150:	21000317 	ldw	r4,12(r4)
81130154:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81130158:	e13ff917 	ldw	r4,-28(fp)
8113015c:	21000b17 	ldw	r4,44(r4)
81130160:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81130164:	e13ffc17 	ldw	r4,-16(fp)
81130168:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8113016c:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81130170:	e13ff917 	ldw	r4,-28(fp)
81130174:	21400317 	ldw	r5,12(r4)
81130178:	e13ffa17 	ldw	r4,-24(fp)
8113017c:	29000426 	beq	r5,r4,81130190 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81130180:	e13ff917 	ldw	r4,-28(fp)
81130184:	21400b17 	ldw	r5,44(r4)
81130188:	e13ffb17 	ldw	r4,-20(fp)
8113018c:	293fe01e 	bne	r5,r4,81130110 <__reset+0xfb110110>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
81130190:	e13fff17 	ldw	r4,-4(fp)
81130194:	2005883a 	mov	r2,r4
81130198:	0007883a 	mov	r3,zero
8113019c:	e0bffc15 	stw	r2,-16(fp)
811301a0:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
811301a4:	e0fffc17 	ldw	r3,-16(fp)
811301a8:	e0bff917 	ldw	r2,-28(fp)
811301ac:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
811301b0:	e0fffd17 	ldw	r3,-12(fp)
811301b4:	e0bff917 	ldw	r2,-28(fp)
811301b8:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
811301bc:	e0fffa17 	ldw	r3,-24(fp)
811301c0:	e0bfff17 	ldw	r2,-4(fp)
811301c4:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
811301c8:	e0fffb17 	ldw	r3,-20(fp)
811301cc:	e0bfff17 	ldw	r2,-4(fp)
811301d0:	10c00b15 	stw	r3,44(r2)
	return 0;
811301d4:	0005883a 	mov	r2,zero
}
811301d8:	e037883a 	mov	sp,fp
811301dc:	df000017 	ldw	fp,0(sp)
811301e0:	dec00104 	addi	sp,sp,4
811301e4:	f800283a 	ret

811301e8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
811301e8:	defffc04 	addi	sp,sp,-16
811301ec:	df000315 	stw	fp,12(sp)
811301f0:	df000304 	addi	fp,sp,12
811301f4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
811301f8:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
811301fc:	e0bfff17 	ldw	r2,-4(fp)
81130200:	1000021e 	bne	r2,zero,8113020c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
81130204:	00bffa84 	movi	r2,-22
81130208:	00001906 	br	81130270 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8113020c:	e0bfff17 	ldw	r2,-4(fp)
81130210:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81130214:	00000a06 	br	81130240 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
81130218:	e0bffd17 	ldw	r2,-12(fp)
8113021c:	10800717 	ldw	r2,28(r2)
81130220:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81130224:	e0bffe17 	ldw	r2,-8(fp)
81130228:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8113022c:	e0bffd17 	ldw	r2,-12(fp)
81130230:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81130234:	e0bffd17 	ldw	r2,-12(fp)
81130238:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8113023c:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81130240:	e0bffd17 	ldw	r2,-12(fp)
81130244:	10c00317 	ldw	r3,12(r2)
81130248:	e0bfff17 	ldw	r2,-4(fp)
8113024c:	18bff21e 	bne	r3,r2,81130218 <__reset+0xfb110218>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
81130250:	e0bffd17 	ldw	r2,-12(fp)
81130254:	10800717 	ldw	r2,28(r2)
81130258:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113025c:	e0bffe17 	ldw	r2,-8(fp)
81130260:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81130264:	e0bffd17 	ldw	r2,-12(fp)
81130268:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
8113026c:	0005883a 	mov	r2,zero
}
81130270:	e037883a 	mov	sp,fp
81130274:	df000017 	ldw	fp,0(sp)
81130278:	dec00104 	addi	sp,sp,4
8113027c:	f800283a 	ret

81130280 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
81130280:	defff804 	addi	sp,sp,-32
81130284:	df000715 	stw	fp,28(sp)
81130288:	df000704 	addi	fp,sp,28
8113028c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81130290:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
81130294:	e13fff17 	ldw	r4,-4(fp)
81130298:	2000021e 	bne	r4,zero,811302a4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
8113029c:	00bffa84 	movi	r2,-22
811302a0:	00002806 	br	81130344 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
811302a4:	e13fff17 	ldw	r4,-4(fp)
811302a8:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
811302ac:	e13fff17 	ldw	r4,-4(fp)
811302b0:	2005883a 	mov	r2,r4
811302b4:	0007883a 	mov	r3,zero
811302b8:	e0bffb15 	stw	r2,-20(fp)
811302bc:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811302c0:	00001006 	br	81130304 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
811302c4:	e0bff917 	ldw	r2,-28(fp)
811302c8:	10800f17 	ldw	r2,60(r2)
811302cc:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
811302d0:	e0bffa17 	ldw	r2,-24(fp)
811302d4:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
811302d8:	e0bff917 	ldw	r2,-28(fp)
811302dc:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
811302e0:	e0bff917 	ldw	r2,-28(fp)
811302e4:	10800317 	ldw	r2,12(r2)
811302e8:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
811302ec:	e0bff917 	ldw	r2,-28(fp)
811302f0:	10800b17 	ldw	r2,44(r2)
811302f4:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
811302f8:	e0bffd17 	ldw	r2,-12(fp)
811302fc:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81130300:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81130304:	e0bff917 	ldw	r2,-28(fp)
81130308:	10c00317 	ldw	r3,12(r2)
8113030c:	e0bffb17 	ldw	r2,-20(fp)
81130310:	18800426 	beq	r3,r2,81130324 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81130314:	e0bff917 	ldw	r2,-28(fp)
81130318:	10c00b17 	ldw	r3,44(r2)
8113031c:	e0bffc17 	ldw	r2,-16(fp)
81130320:	18bfe81e 	bne	r3,r2,811302c4 <__reset+0xfb1102c4>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
81130324:	e0bff917 	ldw	r2,-28(fp)
81130328:	10800f17 	ldw	r2,60(r2)
8113032c:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81130330:	e0bffa17 	ldw	r2,-24(fp)
81130334:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81130338:	e0bff917 	ldw	r2,-28(fp)
8113033c:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
81130340:	0005883a 	mov	r2,zero
}
81130344:	e037883a 	mov	sp,fp
81130348:	df000017 	ldw	fp,0(sp)
8113034c:	dec00104 	addi	sp,sp,4
81130350:	f800283a 	ret

81130354 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81130354:	deffeb04 	addi	sp,sp,-84
81130358:	dfc01415 	stw	ra,80(sp)
8113035c:	df001315 	stw	fp,76(sp)
81130360:	df001304 	addi	fp,sp,76
81130364:	e13ffb15 	stw	r4,-20(fp)
81130368:	e17ffc15 	stw	r5,-16(fp)
8113036c:	e1bffd15 	stw	r6,-12(fp)
81130370:	3807883a 	mov	r3,r7
81130374:	e0800217 	ldw	r2,8(fp)
81130378:	e0fffe05 	stb	r3,-8(fp)
8113037c:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
81130380:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
81130384:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
81130388:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
8113038c:	e0bffc17 	ldw	r2,-16(fp)
81130390:	e0bff815 	stw	r2,-32(fp)
81130394:	e0bffd17 	ldw	r2,-12(fp)
81130398:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
8113039c:	e0bffb17 	ldw	r2,-20(fp)
811303a0:	10801817 	ldw	r2,96(r2)
811303a4:	e0bff615 	stw	r2,-40(fp)
811303a8:	e03ff70d 	sth	zero,-36(fp)
811303ac:	e0bff70b 	ldhu	r2,-36(fp)
811303b0:	e0fffa04 	addi	r3,fp,-24
811303b4:	180d883a 	mov	r6,r3
811303b8:	100b883a 	mov	r5,r2
811303bc:	e13ff617 	ldw	r4,-40(fp)
811303c0:	1125cb00 	call	81125cb0 <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
811303c4:	e0bffb17 	ldw	r2,-20(fp)
811303c8:	10800617 	ldw	r2,24(r2)
811303cc:	10800037 	ldwio	r2,0(r2)
811303d0:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
811303d4:	e0bfed17 	ldw	r2,-76(fp)
811303d8:	1080004c 	andi	r2,r2,1
811303dc:	10000626 	beq	r2,zero,811303f8 <alt_msgdma_start_prefetcher_with_list_addr+0xa4>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
811303e0:	e0bffb17 	ldw	r2,-20(fp)
811303e4:	10801817 	ldw	r2,96(r2)
811303e8:	1009883a 	mov	r4,r2
811303ec:	11260280 	call	81126028 <OSSemPost>
		return -EBUSY;
811303f0:	00bffc04 	movi	r2,-16
811303f4:	00009606 	br	81130650 <alt_msgdma_start_prefetcher_with_list_addr+0x2fc>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
811303f8:	00800804 	movi	r2,32
811303fc:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130400:	0005303a 	rdctl	r2,status
81130404:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130408:	e0fff217 	ldw	r3,-56(fp)
8113040c:	00bfff84 	movi	r2,-2
81130410:	1884703a 	and	r2,r3,r2
81130414:	1001703a 	wrctl	status,r2
  
  return context;
81130418:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8113041c:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81130420:	e0bffb17 	ldw	r2,-20(fp)
81130424:	10800317 	ldw	r2,12(r2)
81130428:	10800104 	addi	r2,r2,4
8113042c:	e0ffee17 	ldw	r3,-72(fp)
81130430:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
81130434:	e0bffb17 	ldw	r2,-20(fp)
81130438:	10800317 	ldw	r2,12(r2)
8113043c:	e0fffb17 	ldw	r3,-20(fp)
81130440:	18c00317 	ldw	r3,12(r3)
81130444:	18c00037 	ldwio	r3,0(r3)
81130448:	10c00035 	stwio	r3,0(r2)
8113044c:	e0bfef17 	ldw	r2,-68(fp)
81130450:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130454:	e0bff017 	ldw	r2,-64(fp)
81130458:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8113045c:	e0bffb17 	ldw	r2,-20(fp)
81130460:	10800b17 	ldw	r2,44(r2)
81130464:	10002326 	beq	r2,zero,811304f4 <alt_msgdma_start_prefetcher_with_list_addr+0x1a0>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
81130468:	e0bffb17 	ldw	r2,-20(fp)
8113046c:	10c00d17 	ldw	r3,52(r2)
81130470:	e0bfee17 	ldw	r2,-72(fp)
81130474:	1884b03a 	or	r2,r3,r2
81130478:	10800514 	ori	r2,r2,20
8113047c:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81130480:	e0ffee17 	ldw	r3,-72(fp)
81130484:	00bff7c4 	movi	r2,-33
81130488:	1884703a 	and	r2,r3,r2
8113048c:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81130490:	e0bfed17 	ldw	r2,-76(fp)
81130494:	10800214 	ori	r2,r2,8
81130498:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113049c:	0005303a 	rdctl	r2,status
811304a0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811304a4:	e0fff417 	ldw	r3,-48(fp)
811304a8:	00bfff84 	movi	r2,-2
811304ac:	1884703a 	and	r2,r3,r2
811304b0:	1001703a 	wrctl	status,r2
  
  return context;
811304b4:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
811304b8:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
811304bc:	e0bffb17 	ldw	r2,-20(fp)
811304c0:	10800317 	ldw	r2,12(r2)
811304c4:	10800104 	addi	r2,r2,4
811304c8:	e0ffee17 	ldw	r3,-72(fp)
811304cc:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
811304d0:	e0bffb17 	ldw	r2,-20(fp)
811304d4:	10800617 	ldw	r2,24(r2)
811304d8:	e0ffed17 	ldw	r3,-76(fp)
811304dc:	10c00035 	stwio	r3,0(r2)
811304e0:	e0bfef17 	ldw	r2,-68(fp)
811304e4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811304e8:	e0bff117 	ldw	r2,-60(fp)
811304ec:	1001703a 	wrctl	status,r2
811304f0:	00002306 	br	81130580 <alt_msgdma_start_prefetcher_with_list_addr+0x22c>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
811304f4:	e0bffb17 	ldw	r2,-20(fp)
811304f8:	10c00d17 	ldw	r3,52(r2)
811304fc:	e0bfee17 	ldw	r2,-72(fp)
81130500:	1884b03a 	or	r2,r3,r2
81130504:	10800114 	ori	r2,r2,4
81130508:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8113050c:	e0ffee17 	ldw	r3,-72(fp)
81130510:	00bff3c4 	movi	r2,-49
81130514:	1884703a 	and	r2,r3,r2
81130518:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8113051c:	e0ffed17 	ldw	r3,-76(fp)
81130520:	00bffdc4 	movi	r2,-9
81130524:	1884703a 	and	r2,r3,r2
81130528:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113052c:	0005303a 	rdctl	r2,status
81130530:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130534:	e0fff517 	ldw	r3,-44(fp)
81130538:	00bfff84 	movi	r2,-2
8113053c:	1884703a 	and	r2,r3,r2
81130540:	1001703a 	wrctl	status,r2
  
  return context;
81130544:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
81130548:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113054c:	e0bffb17 	ldw	r2,-20(fp)
81130550:	10800317 	ldw	r2,12(r2)
81130554:	10800104 	addi	r2,r2,4
81130558:	e0ffee17 	ldw	r3,-72(fp)
8113055c:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81130560:	e0bffb17 	ldw	r2,-20(fp)
81130564:	10800617 	ldw	r2,24(r2)
81130568:	e0ffed17 	ldw	r3,-76(fp)
8113056c:	10c00035 	stwio	r3,0(r2)
81130570:	e0bfef17 	ldw	r2,-68(fp)
81130574:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130578:	e0bff317 	ldw	r2,-52(fp)
8113057c:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
81130580:	e0bffb17 	ldw	r2,-20(fp)
81130584:	10800617 	ldw	r2,24(r2)
81130588:	10800104 	addi	r2,r2,4
8113058c:	e0fff817 	ldw	r3,-32(fp)
81130590:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
81130594:	e0bffb17 	ldw	r2,-20(fp)
81130598:	10800617 	ldw	r2,24(r2)
8113059c:	10800204 	addi	r2,r2,8
811305a0:	e0fff917 	ldw	r3,-28(fp)
811305a4:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
811305a8:	e0bffe03 	ldbu	r2,-8(fp)
811305ac:	10000426 	beq	r2,zero,811305c0 <alt_msgdma_start_prefetcher_with_list_addr+0x26c>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
811305b0:	e0bfed17 	ldw	r2,-76(fp)
811305b4:	10800414 	ori	r2,r2,16
811305b8:	e0bfed15 	stw	r2,-76(fp)
811305bc:	00000406 	br	811305d0 <alt_msgdma_start_prefetcher_with_list_addr+0x27c>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
811305c0:	e0ffed17 	ldw	r3,-76(fp)
811305c4:	00bffbc4 	movi	r2,-17
811305c8:	1884703a 	and	r2,r3,r2
811305cc:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
811305d0:	e0bfff03 	ldbu	r2,-4(fp)
811305d4:	10000e26 	beq	r2,zero,81130610 <alt_msgdma_start_prefetcher_with_list_addr+0x2bc>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
811305d8:	e0bfed17 	ldw	r2,-76(fp)
811305dc:	10800094 	ori	r2,r2,2
811305e0:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
811305e4:	e0bffb17 	ldw	r2,-20(fp)
811305e8:	10800617 	ldw	r2,24(r2)
811305ec:	10800304 	addi	r2,r2,12
811305f0:	10800037 	ldwio	r2,0(r2)
811305f4:	10000a1e 	bne	r2,zero,81130620 <alt_msgdma_start_prefetcher_with_list_addr+0x2cc>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
811305f8:	e0bffb17 	ldw	r2,-20(fp)
811305fc:	10800617 	ldw	r2,24(r2)
81130600:	10800304 	addi	r2,r2,12
81130604:	00c03fc4 	movi	r3,255
81130608:	10c00035 	stwio	r3,0(r2)
8113060c:	00000406 	br	81130620 <alt_msgdma_start_prefetcher_with_list_addr+0x2cc>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
81130610:	e0ffed17 	ldw	r3,-76(fp)
81130614:	00bfff44 	movi	r2,-3
81130618:	1884703a 	and	r2,r3,r2
8113061c:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
81130620:	e0bfed17 	ldw	r2,-76(fp)
81130624:	10800054 	ori	r2,r2,1
81130628:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113062c:	e0bffb17 	ldw	r2,-20(fp)
81130630:	10800617 	ldw	r2,24(r2)
81130634:	e0ffed17 	ldw	r3,-76(fp)
81130638:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
8113063c:	e0bffb17 	ldw	r2,-20(fp)
81130640:	10801817 	ldw	r2,96(r2)
81130644:	1009883a 	mov	r4,r2
81130648:	11260280 	call	81126028 <OSSemPost>
	 
	 return 0;
8113064c:	0005883a 	mov	r2,zero
}
81130650:	e037883a 	mov	sp,fp
81130654:	dfc00117 	ldw	ra,4(sp)
81130658:	df000017 	ldw	fp,0(sp)
8113065c:	dec00204 	addi	sp,sp,8
81130660:	f800283a 	ret

81130664 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
81130664:	defff704 	addi	sp,sp,-36
81130668:	dfc00815 	stw	ra,32(sp)
8113066c:	df000715 	stw	fp,28(sp)
81130670:	dc400615 	stw	r17,24(sp)
81130674:	dc000515 	stw	r16,20(sp)
81130678:	df000704 	addi	fp,sp,28
8113067c:	e13ffa15 	stw	r4,-24(fp)
81130680:	e17ffb15 	stw	r5,-20(fp)
81130684:	3007883a 	mov	r3,r6
81130688:	3805883a 	mov	r2,r7
8113068c:	e0fffc05 	stb	r3,-16(fp)
81130690:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
81130694:	e13ffb17 	ldw	r4,-20(fp)
81130698:	11301e80 	call	811301e8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8113069c:	10000226 	beq	r2,zero,811306a8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
811306a0:	00bffa84 	movi	r2,-22
811306a4:	00000b06 	br	811306d4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
811306a8:	e0bffb17 	ldw	r2,-20(fp)
811306ac:	1021883a 	mov	r16,r2
811306b0:	0023883a 	mov	r17,zero
811306b4:	e0fffc03 	ldbu	r3,-16(fp)
811306b8:	e0bffd03 	ldbu	r2,-12(fp)
811306bc:	d8800015 	stw	r2,0(sp)
811306c0:	180f883a 	mov	r7,r3
811306c4:	800b883a 	mov	r5,r16
811306c8:	880d883a 	mov	r6,r17
811306cc:	e13ffa17 	ldw	r4,-24(fp)
811306d0:	11303540 	call	81130354 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
811306d4:	e6fffe04 	addi	sp,fp,-8
811306d8:	dfc00317 	ldw	ra,12(sp)
811306dc:	df000217 	ldw	fp,8(sp)
811306e0:	dc400117 	ldw	r17,4(sp)
811306e4:	dc000017 	ldw	r16,0(sp)
811306e8:	dec00404 	addi	sp,sp,16
811306ec:	f800283a 	ret

811306f0 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
811306f0:	defff704 	addi	sp,sp,-36
811306f4:	dfc00815 	stw	ra,32(sp)
811306f8:	df000715 	stw	fp,28(sp)
811306fc:	dc400615 	stw	r17,24(sp)
81130700:	dc000515 	stw	r16,20(sp)
81130704:	df000704 	addi	fp,sp,28
81130708:	e13ffa15 	stw	r4,-24(fp)
8113070c:	e17ffb15 	stw	r5,-20(fp)
81130710:	3007883a 	mov	r3,r6
81130714:	3805883a 	mov	r2,r7
81130718:	e0fffc05 	stb	r3,-16(fp)
8113071c:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
81130720:	e13ffb17 	ldw	r4,-20(fp)
81130724:	11302800 	call	81130280 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
81130728:	10000226 	beq	r2,zero,81130734 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
8113072c:	00bffa84 	movi	r2,-22
81130730:	00000b06 	br	81130760 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
81130734:	e0bffb17 	ldw	r2,-20(fp)
81130738:	1021883a 	mov	r16,r2
8113073c:	0023883a 	mov	r17,zero
81130740:	e0fffc03 	ldbu	r3,-16(fp)
81130744:	e0bffd03 	ldbu	r2,-12(fp)
81130748:	d8800015 	stw	r2,0(sp)
8113074c:	180f883a 	mov	r7,r3
81130750:	800b883a 	mov	r5,r16
81130754:	880d883a 	mov	r6,r17
81130758:	e13ffa17 	ldw	r4,-24(fp)
8113075c:	11303540 	call	81130354 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81130760:	e6fffe04 	addi	sp,fp,-8
81130764:	dfc00317 	ldw	ra,12(sp)
81130768:	df000217 	ldw	fp,8(sp)
8113076c:	dc400117 	ldw	r17,4(sp)
81130770:	dc000017 	ldw	r16,0(sp)
81130774:	dec00404 	addi	sp,sp,16
81130778:	f800283a 	ret

8113077c <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8113077c:	defffc04 	addi	sp,sp,-16
81130780:	dfc00315 	stw	ra,12(sp)
81130784:	df000215 	stw	fp,8(sp)
81130788:	df000204 	addi	fp,sp,8
8113078c:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
81130790:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
81130794:	d1603a04 	addi	r5,gp,-32536
81130798:	e13fff17 	ldw	r4,-4(fp)
8113079c:	1130ee00 	call	81130ee0 <alt_find_dev>
811307a0:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
811307a4:	e0bffe17 	ldw	r2,-8(fp)
811307a8:	1000041e 	bne	r2,zero,811307bc <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
811307ac:	112eac80 	call	8112eac8 <alt_get_errno>
811307b0:	1007883a 	mov	r3,r2
811307b4:	008004c4 	movi	r2,19
811307b8:	18800015 	stw	r2,0(r3)
    }

    return dev;
811307bc:	e0bffe17 	ldw	r2,-8(fp)
}
811307c0:	e037883a 	mov	sp,fp
811307c4:	dfc00117 	ldw	ra,4(sp)
811307c8:	df000017 	ldw	fp,0(sp)
811307cc:	dec00204 	addi	sp,sp,8
811307d0:	f800283a 	ret

811307d4 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
811307d4:	defff604 	addi	sp,sp,-40
811307d8:	dfc00915 	stw	ra,36(sp)
811307dc:	df000815 	stw	fp,32(sp)
811307e0:	df000804 	addi	fp,sp,32
811307e4:	e13ffd15 	stw	r4,-12(fp)
811307e8:	e17ffe15 	stw	r5,-8(fp)
811307ec:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
811307f0:	e0bffd17 	ldw	r2,-12(fp)
811307f4:	10801783 	ldbu	r2,94(r2)
811307f8:	10803fcc 	andi	r2,r2,255
811307fc:	10000b26 	beq	r2,zero,8113082c <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
81130800:	e0bffd17 	ldw	r2,-12(fp)
81130804:	10800617 	ldw	r2,24(r2)
81130808:	00c00104 	movi	r3,4
8113080c:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
81130810:	0001883a 	nop
81130814:	e0bffd17 	ldw	r2,-12(fp)
81130818:	10800617 	ldw	r2,24(r2)
8113081c:	10800037 	ldwio	r2,0(r2)
81130820:	1080010c 	andi	r2,r2,4
81130824:	1005d0ba 	srai	r2,r2,2
81130828:	103ffa1e 	bne	r2,zero,81130814 <__reset+0xfb110814>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8113082c:	e0bffd17 	ldw	r2,-12(fp)
81130830:	10800317 	ldw	r2,12(r2)
81130834:	10800104 	addi	r2,r2,4
81130838:	00c00084 	movi	r3,2
8113083c:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81130840:	0001883a 	nop
81130844:	e0bffd17 	ldw	r2,-12(fp)
81130848:	10800317 	ldw	r2,12(r2)
8113084c:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
81130850:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81130854:	103ffb1e 	bne	r2,zero,81130844 <__reset+0xfb110844>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81130858:	e0bffd17 	ldw	r2,-12(fp)
8113085c:	10800317 	ldw	r2,12(r2)
81130860:	10800104 	addi	r2,r2,4
81130864:	10800037 	ldwio	r2,0(r2)
81130868:	1007883a 	mov	r3,r2
8113086c:	00bffbc4 	movi	r2,-17
81130870:	1884703a 	and	r2,r3,r2
81130874:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81130878:	e0bff917 	ldw	r2,-28(fp)
8113087c:	10800814 	ori	r2,r2,32
81130880:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81130884:	e0bffd17 	ldw	r2,-12(fp)
81130888:	10800317 	ldw	r2,12(r2)
8113088c:	10800104 	addi	r2,r2,4
81130890:	e0fff917 	ldw	r3,-28(fp)
81130894:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
81130898:	e0bffd17 	ldw	r2,-12(fp)
8113089c:	10800317 	ldw	r2,12(r2)
811308a0:	e0fffd17 	ldw	r3,-12(fp)
811308a4:	18c00317 	ldw	r3,12(r3)
811308a8:	18c00037 	ldwio	r3,0(r3)
811308ac:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
811308b0:	e0bffd17 	ldw	r2,-12(fp)
811308b4:	10801783 	ldbu	r2,94(r2)
811308b8:	10803fcc 	andi	r2,r2,255
811308bc:	10000826 	beq	r2,zero,811308e0 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
811308c0:	e0bffd17 	ldw	r2,-12(fp)
811308c4:	10800617 	ldw	r2,24(r2)
811308c8:	10800404 	addi	r2,r2,16
811308cc:	e0fffd17 	ldw	r3,-12(fp)
811308d0:	18c00617 	ldw	r3,24(r3)
811308d4:	18c00404 	addi	r3,r3,16
811308d8:	18c00037 	ldwio	r3,0(r3)
811308dc:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
811308e0:	d1603a04 	addi	r5,gp,-32536
811308e4:	e13ffd17 	ldw	r4,-12(fp)
811308e8:	1130d7c0 	call	81130d7c <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
811308ec:	e0bffd17 	ldw	r2,-12(fp)
811308f0:	10801804 	addi	r2,r2,96
811308f4:	e0bffb15 	stw	r2,-20(fp)
811308f8:	00800044 	movi	r2,1
811308fc:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81130900:	e0bffc0b 	ldhu	r2,-16(fp)
81130904:	1009883a 	mov	r4,r2
81130908:	11259980 	call	81125998 <OSSemCreate>
8113090c:	1007883a 	mov	r3,r2
81130910:	e0bffb17 	ldw	r2,-20(fp)
81130914:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81130918:	e0bffb17 	ldw	r2,-20(fp)
8113091c:	10800017 	ldw	r2,0(r2)
81130920:	10000226 	beq	r2,zero,8113092c <alt_msgdma_init+0x158>
81130924:	0005883a 	mov	r2,zero
81130928:	00000106 	br	81130930 <alt_msgdma_init+0x15c>
8113092c:	00bfffc4 	movi	r2,-1
81130930:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
81130934:	e0bffa17 	ldw	r2,-24(fp)
81130938:	1000081e 	bne	r2,zero,8113095c <alt_msgdma_init+0x188>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8113093c:	d8000015 	stw	zero,0(sp)
81130940:	e1fffd17 	ldw	r7,-12(fp)
81130944:	01a044f4 	movhi	r6,33043
81130948:	31bb3104 	addi	r6,r6,-4924
8113094c:	e17fff17 	ldw	r5,-4(fp)
81130950:	e13ffe17 	ldw	r4,-8(fp)
81130954:	11311540 	call	81131154 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
81130958:	00000406 	br	8113096c <alt_msgdma_init+0x198>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8113095c:	012044f4 	movhi	r4,33043
81130960:	21103404 	addi	r4,r4,16592
81130964:	11315340 	call	81131534 <alt_printf>
    }
    
    return;
81130968:	0001883a 	nop

}
8113096c:	e037883a 	mov	sp,fp
81130970:	dfc00117 	ldw	ra,4(sp)
81130974:	df000017 	ldw	fp,0(sp)
81130978:	dec00204 	addi	sp,sp,8
8113097c:	f800283a 	ret

81130980 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
81130980:	defffb04 	addi	sp,sp,-20
81130984:	df000415 	stw	fp,16(sp)
81130988:	df000404 	addi	fp,sp,16
8113098c:	e13ffc15 	stw	r4,-16(fp)
81130990:	e17ffd15 	stw	r5,-12(fp)
81130994:	e1bffe15 	stw	r6,-8(fp)
81130998:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8113099c:	e0bffc17 	ldw	r2,-16(fp)
811309a0:	e0fffd17 	ldw	r3,-12(fp)
811309a4:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
811309a8:	e0bffc17 	ldw	r2,-16(fp)
811309ac:	e0ffff17 	ldw	r3,-4(fp)
811309b0:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
811309b4:	e0bffc17 	ldw	r2,-16(fp)
811309b8:	e0fffe17 	ldw	r3,-8(fp)
811309bc:	10c00d15 	stw	r3,52(r2)

    return ;
811309c0:	0001883a 	nop
}
811309c4:	e037883a 	mov	sp,fp
811309c8:	df000017 	ldw	fp,0(sp)
811309cc:	dec00104 	addi	sp,sp,4
811309d0:	f800283a 	ret

811309d4 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
811309d4:	defffc04 	addi	sp,sp,-16
811309d8:	dfc00315 	stw	ra,12(sp)
811309dc:	df000215 	stw	fp,8(sp)
811309e0:	df000204 	addi	fp,sp,8
811309e4:	e13ffe15 	stw	r4,-8(fp)
811309e8:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
811309ec:	000d883a 	mov	r6,zero
811309f0:	e17fff17 	ldw	r5,-4(fp)
811309f4:	e13ffe17 	ldw	r4,-8(fp)
811309f8:	112f0280 	call	8112f028 <alt_msgdma_descriptor_async_transfer>

}
811309fc:	e037883a 	mov	sp,fp
81130a00:	dfc00117 	ldw	ra,4(sp)
81130a04:	df000017 	ldw	fp,0(sp)
81130a08:	dec00204 	addi	sp,sp,8
81130a0c:	f800283a 	ret

81130a10 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81130a10:	defffc04 	addi	sp,sp,-16
81130a14:	dfc00315 	stw	ra,12(sp)
81130a18:	df000215 	stw	fp,8(sp)
81130a1c:	df000204 	addi	fp,sp,8
81130a20:	e13ffe15 	stw	r4,-8(fp)
81130a24:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
81130a28:	e1bfff17 	ldw	r6,-4(fp)
81130a2c:	000b883a 	mov	r5,zero
81130a30:	e13ffe17 	ldw	r4,-8(fp)
81130a34:	112f0280 	call	8112f028 <alt_msgdma_descriptor_async_transfer>
}
81130a38:	e037883a 	mov	sp,fp
81130a3c:	dfc00117 	ldw	ra,4(sp)
81130a40:	df000017 	ldw	fp,0(sp)
81130a44:	dec00204 	addi	sp,sp,8
81130a48:	f800283a 	ret

81130a4c <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81130a4c:	defffc04 	addi	sp,sp,-16
81130a50:	dfc00315 	stw	ra,12(sp)
81130a54:	df000215 	stw	fp,8(sp)
81130a58:	df000204 	addi	fp,sp,8
81130a5c:	e13ffe15 	stw	r4,-8(fp)
81130a60:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
81130a64:	000d883a 	mov	r6,zero
81130a68:	e17fff17 	ldw	r5,-4(fp)
81130a6c:	e13ffe17 	ldw	r4,-8(fp)
81130a70:	112f3600 	call	8112f360 <alt_msgdma_descriptor_sync_transfer>
}
81130a74:	e037883a 	mov	sp,fp
81130a78:	dfc00117 	ldw	ra,4(sp)
81130a7c:	df000017 	ldw	fp,0(sp)
81130a80:	dec00204 	addi	sp,sp,8
81130a84:	f800283a 	ret

81130a88 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81130a88:	defffc04 	addi	sp,sp,-16
81130a8c:	dfc00315 	stw	ra,12(sp)
81130a90:	df000215 	stw	fp,8(sp)
81130a94:	df000204 	addi	fp,sp,8
81130a98:	e13ffe15 	stw	r4,-8(fp)
81130a9c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
81130aa0:	e1bfff17 	ldw	r6,-4(fp)
81130aa4:	000b883a 	mov	r5,zero
81130aa8:	e13ffe17 	ldw	r4,-8(fp)
81130aac:	112f3600 	call	8112f360 <alt_msgdma_descriptor_sync_transfer>
}
81130ab0:	e037883a 	mov	sp,fp
81130ab4:	dfc00117 	ldw	ra,4(sp)
81130ab8:	df000017 	ldw	fp,0(sp)
81130abc:	dec00204 	addi	sp,sp,8
81130ac0:	f800283a 	ret

81130ac4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
81130ac4:	defff504 	addi	sp,sp,-44
81130ac8:	df000a15 	stw	fp,40(sp)
81130acc:	df000a04 	addi	fp,sp,40
81130ad0:	e13ffc15 	stw	r4,-16(fp)
81130ad4:	e17ffd15 	stw	r5,-12(fp)
81130ad8:	e1bffe15 	stw	r6,-8(fp)
81130adc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
81130ae0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81130ae4:	d0a06317 	ldw	r2,-32372(gp)
  
  if (alt_ticks_per_second ())
81130ae8:	10003c26 	beq	r2,zero,81130bdc <alt_alarm_start+0x118>
  {
    if (alarm)
81130aec:	e0bffc17 	ldw	r2,-16(fp)
81130af0:	10003826 	beq	r2,zero,81130bd4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
81130af4:	e0bffc17 	ldw	r2,-16(fp)
81130af8:	e0fffe17 	ldw	r3,-8(fp)
81130afc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
81130b00:	e0bffc17 	ldw	r2,-16(fp)
81130b04:	e0ffff17 	ldw	r3,-4(fp)
81130b08:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130b0c:	0005303a 	rdctl	r2,status
81130b10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130b14:	e0fff917 	ldw	r3,-28(fp)
81130b18:	00bfff84 	movi	r2,-2
81130b1c:	1884703a 	and	r2,r3,r2
81130b20:	1001703a 	wrctl	status,r2
  
  return context;
81130b24:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
81130b28:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81130b2c:	d0a06417 	ldw	r2,-32368(gp)
      
      current_nticks = alt_nticks();
81130b30:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
81130b34:	e0fffd17 	ldw	r3,-12(fp)
81130b38:	e0bff617 	ldw	r2,-40(fp)
81130b3c:	1885883a 	add	r2,r3,r2
81130b40:	10c00044 	addi	r3,r2,1
81130b44:	e0bffc17 	ldw	r2,-16(fp)
81130b48:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
81130b4c:	e0bffc17 	ldw	r2,-16(fp)
81130b50:	10c00217 	ldw	r3,8(r2)
81130b54:	e0bff617 	ldw	r2,-40(fp)
81130b58:	1880042e 	bgeu	r3,r2,81130b6c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
81130b5c:	e0bffc17 	ldw	r2,-16(fp)
81130b60:	00c00044 	movi	r3,1
81130b64:	10c00405 	stb	r3,16(r2)
81130b68:	00000206 	br	81130b74 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
81130b6c:	e0bffc17 	ldw	r2,-16(fp)
81130b70:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
81130b74:	e0bffc17 	ldw	r2,-16(fp)
81130b78:	d0e01704 	addi	r3,gp,-32676
81130b7c:	e0fffa15 	stw	r3,-24(fp)
81130b80:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81130b84:	e0bffb17 	ldw	r2,-20(fp)
81130b88:	e0fffa17 	ldw	r3,-24(fp)
81130b8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81130b90:	e0bffa17 	ldw	r2,-24(fp)
81130b94:	10c00017 	ldw	r3,0(r2)
81130b98:	e0bffb17 	ldw	r2,-20(fp)
81130b9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81130ba0:	e0bffa17 	ldw	r2,-24(fp)
81130ba4:	10800017 	ldw	r2,0(r2)
81130ba8:	e0fffb17 	ldw	r3,-20(fp)
81130bac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81130bb0:	e0bffa17 	ldw	r2,-24(fp)
81130bb4:	e0fffb17 	ldw	r3,-20(fp)
81130bb8:	10c00015 	stw	r3,0(r2)
81130bbc:	e0bff817 	ldw	r2,-32(fp)
81130bc0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130bc4:	e0bff717 	ldw	r2,-36(fp)
81130bc8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
81130bcc:	0005883a 	mov	r2,zero
81130bd0:	00000306 	br	81130be0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
81130bd4:	00bffa84 	movi	r2,-22
81130bd8:	00000106 	br	81130be0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
81130bdc:	00bfde84 	movi	r2,-134
  }
}
81130be0:	e037883a 	mov	sp,fp
81130be4:	df000017 	ldw	fp,0(sp)
81130be8:	dec00104 	addi	sp,sp,4
81130bec:	f800283a 	ret

81130bf0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81130bf0:	defffb04 	addi	sp,sp,-20
81130bf4:	df000415 	stw	fp,16(sp)
81130bf8:	df000404 	addi	fp,sp,16
81130bfc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81130c00:	008000c4 	movi	r2,3
81130c04:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81130c08:	e0fffd17 	ldw	r3,-12(fp)
81130c0c:	008003f4 	movhi	r2,15
81130c10:	10909004 	addi	r2,r2,16960
81130c14:	1887383a 	mul	r3,r3,r2
81130c18:	00817db4 	movhi	r2,1526
81130c1c:	10b84004 	addi	r2,r2,-7936
81130c20:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81130c24:	00a00034 	movhi	r2,32768
81130c28:	10bfffc4 	addi	r2,r2,-1
81130c2c:	10c5203a 	divu	r2,r2,r3
81130c30:	e0ffff17 	ldw	r3,-4(fp)
81130c34:	1885203a 	divu	r2,r3,r2
81130c38:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81130c3c:	e0bffe17 	ldw	r2,-8(fp)
81130c40:	10002526 	beq	r2,zero,81130cd8 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
81130c44:	e03ffc15 	stw	zero,-16(fp)
81130c48:	00001406 	br	81130c9c <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81130c4c:	00a00034 	movhi	r2,32768
81130c50:	10bfffc4 	addi	r2,r2,-1
81130c54:	10bfffc4 	addi	r2,r2,-1
81130c58:	103ffe1e 	bne	r2,zero,81130c54 <__reset+0xfb110c54>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81130c5c:	e0fffd17 	ldw	r3,-12(fp)
81130c60:	008003f4 	movhi	r2,15
81130c64:	10909004 	addi	r2,r2,16960
81130c68:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81130c6c:	00817db4 	movhi	r2,1526
81130c70:	10b84004 	addi	r2,r2,-7936
81130c74:	10c7203a 	divu	r3,r2,r3
81130c78:	00a00034 	movhi	r2,32768
81130c7c:	10bfffc4 	addi	r2,r2,-1
81130c80:	10c5203a 	divu	r2,r2,r3
81130c84:	e0ffff17 	ldw	r3,-4(fp)
81130c88:	1885c83a 	sub	r2,r3,r2
81130c8c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81130c90:	e0bffc17 	ldw	r2,-16(fp)
81130c94:	10800044 	addi	r2,r2,1
81130c98:	e0bffc15 	stw	r2,-16(fp)
81130c9c:	e0fffc17 	ldw	r3,-16(fp)
81130ca0:	e0bffe17 	ldw	r2,-8(fp)
81130ca4:	18bfe916 	blt	r3,r2,81130c4c <__reset+0xfb110c4c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81130ca8:	e0fffd17 	ldw	r3,-12(fp)
81130cac:	008003f4 	movhi	r2,15
81130cb0:	10909004 	addi	r2,r2,16960
81130cb4:	1887383a 	mul	r3,r3,r2
81130cb8:	00817db4 	movhi	r2,1526
81130cbc:	10b84004 	addi	r2,r2,-7936
81130cc0:	10c7203a 	divu	r3,r2,r3
81130cc4:	e0bfff17 	ldw	r2,-4(fp)
81130cc8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81130ccc:	10bfffc4 	addi	r2,r2,-1
81130cd0:	103ffe1e 	bne	r2,zero,81130ccc <__reset+0xfb110ccc>
81130cd4:	00000b06 	br	81130d04 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81130cd8:	e0fffd17 	ldw	r3,-12(fp)
81130cdc:	008003f4 	movhi	r2,15
81130ce0:	10909004 	addi	r2,r2,16960
81130ce4:	1887383a 	mul	r3,r3,r2
81130ce8:	00817db4 	movhi	r2,1526
81130cec:	10b84004 	addi	r2,r2,-7936
81130cf0:	10c7203a 	divu	r3,r2,r3
81130cf4:	e0bfff17 	ldw	r2,-4(fp)
81130cf8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81130cfc:	10bfffc4 	addi	r2,r2,-1
81130d00:	00bffe16 	blt	zero,r2,81130cfc <__reset+0xfb110cfc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81130d04:	0005883a 	mov	r2,zero
}
81130d08:	e037883a 	mov	sp,fp
81130d0c:	df000017 	ldw	fp,0(sp)
81130d10:	dec00104 	addi	sp,sp,4
81130d14:	f800283a 	ret

81130d18 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
81130d18:	defffd04 	addi	sp,sp,-12
81130d1c:	df000215 	stw	fp,8(sp)
81130d20:	df000204 	addi	fp,sp,8
81130d24:	e13ffe15 	stw	r4,-8(fp)
81130d28:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81130d2c:	0001883a 	nop
81130d30:	e037883a 	mov	sp,fp
81130d34:	df000017 	ldw	fp,0(sp)
81130d38:	dec00104 	addi	sp,sp,4
81130d3c:	f800283a 	ret

81130d40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81130d40:	defffe04 	addi	sp,sp,-8
81130d44:	dfc00115 	stw	ra,4(sp)
81130d48:	df000015 	stw	fp,0(sp)
81130d4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81130d50:	d0a01517 	ldw	r2,-32684(gp)
81130d54:	10000326 	beq	r2,zero,81130d64 <alt_get_errno+0x24>
81130d58:	d0a01517 	ldw	r2,-32684(gp)
81130d5c:	103ee83a 	callr	r2
81130d60:	00000106 	br	81130d68 <alt_get_errno+0x28>
81130d64:	d0a05804 	addi	r2,gp,-32416
}
81130d68:	e037883a 	mov	sp,fp
81130d6c:	dfc00117 	ldw	ra,4(sp)
81130d70:	df000017 	ldw	fp,0(sp)
81130d74:	dec00204 	addi	sp,sp,8
81130d78:	f800283a 	ret

81130d7c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
81130d7c:	defffa04 	addi	sp,sp,-24
81130d80:	dfc00515 	stw	ra,20(sp)
81130d84:	df000415 	stw	fp,16(sp)
81130d88:	df000404 	addi	fp,sp,16
81130d8c:	e13ffe15 	stw	r4,-8(fp)
81130d90:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
81130d94:	e0bffe17 	ldw	r2,-8(fp)
81130d98:	10000326 	beq	r2,zero,81130da8 <alt_dev_llist_insert+0x2c>
81130d9c:	e0bffe17 	ldw	r2,-8(fp)
81130da0:	10800217 	ldw	r2,8(r2)
81130da4:	1000061e 	bne	r2,zero,81130dc0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
81130da8:	1130d400 	call	81130d40 <alt_get_errno>
81130dac:	1007883a 	mov	r3,r2
81130db0:	00800584 	movi	r2,22
81130db4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
81130db8:	00bffa84 	movi	r2,-22
81130dbc:	00001306 	br	81130e0c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
81130dc0:	e0bffe17 	ldw	r2,-8(fp)
81130dc4:	e0ffff17 	ldw	r3,-4(fp)
81130dc8:	e0fffc15 	stw	r3,-16(fp)
81130dcc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81130dd0:	e0bffd17 	ldw	r2,-12(fp)
81130dd4:	e0fffc17 	ldw	r3,-16(fp)
81130dd8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81130ddc:	e0bffc17 	ldw	r2,-16(fp)
81130de0:	10c00017 	ldw	r3,0(r2)
81130de4:	e0bffd17 	ldw	r2,-12(fp)
81130de8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81130dec:	e0bffc17 	ldw	r2,-16(fp)
81130df0:	10800017 	ldw	r2,0(r2)
81130df4:	e0fffd17 	ldw	r3,-12(fp)
81130df8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81130dfc:	e0bffc17 	ldw	r2,-16(fp)
81130e00:	e0fffd17 	ldw	r3,-12(fp)
81130e04:	10c00015 	stw	r3,0(r2)

  return 0;  
81130e08:	0005883a 	mov	r2,zero
}
81130e0c:	e037883a 	mov	sp,fp
81130e10:	dfc00117 	ldw	ra,4(sp)
81130e14:	df000017 	ldw	fp,0(sp)
81130e18:	dec00204 	addi	sp,sp,8
81130e1c:	f800283a 	ret

81130e20 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
81130e20:	defffd04 	addi	sp,sp,-12
81130e24:	dfc00215 	stw	ra,8(sp)
81130e28:	df000115 	stw	fp,4(sp)
81130e2c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81130e30:	00a044f4 	movhi	r2,33043
81130e34:	1087d104 	addi	r2,r2,8004
81130e38:	e0bfff15 	stw	r2,-4(fp)
81130e3c:	00000606 	br	81130e58 <_do_ctors+0x38>
        (*ctor) (); 
81130e40:	e0bfff17 	ldw	r2,-4(fp)
81130e44:	10800017 	ldw	r2,0(r2)
81130e48:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81130e4c:	e0bfff17 	ldw	r2,-4(fp)
81130e50:	10bfff04 	addi	r2,r2,-4
81130e54:	e0bfff15 	stw	r2,-4(fp)
81130e58:	e0ffff17 	ldw	r3,-4(fp)
81130e5c:	00a044f4 	movhi	r2,33043
81130e60:	1087d204 	addi	r2,r2,8008
81130e64:	18bff62e 	bgeu	r3,r2,81130e40 <__reset+0xfb110e40>
        (*ctor) (); 
}
81130e68:	0001883a 	nop
81130e6c:	e037883a 	mov	sp,fp
81130e70:	dfc00117 	ldw	ra,4(sp)
81130e74:	df000017 	ldw	fp,0(sp)
81130e78:	dec00204 	addi	sp,sp,8
81130e7c:	f800283a 	ret

81130e80 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
81130e80:	defffd04 	addi	sp,sp,-12
81130e84:	dfc00215 	stw	ra,8(sp)
81130e88:	df000115 	stw	fp,4(sp)
81130e8c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81130e90:	00a044f4 	movhi	r2,33043
81130e94:	1087d104 	addi	r2,r2,8004
81130e98:	e0bfff15 	stw	r2,-4(fp)
81130e9c:	00000606 	br	81130eb8 <_do_dtors+0x38>
        (*dtor) (); 
81130ea0:	e0bfff17 	ldw	r2,-4(fp)
81130ea4:	10800017 	ldw	r2,0(r2)
81130ea8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
81130eac:	e0bfff17 	ldw	r2,-4(fp)
81130eb0:	10bfff04 	addi	r2,r2,-4
81130eb4:	e0bfff15 	stw	r2,-4(fp)
81130eb8:	e0ffff17 	ldw	r3,-4(fp)
81130ebc:	00a044f4 	movhi	r2,33043
81130ec0:	1087d204 	addi	r2,r2,8008
81130ec4:	18bff62e 	bgeu	r3,r2,81130ea0 <__reset+0xfb110ea0>
        (*dtor) (); 
}
81130ec8:	0001883a 	nop
81130ecc:	e037883a 	mov	sp,fp
81130ed0:	dfc00117 	ldw	ra,4(sp)
81130ed4:	df000017 	ldw	fp,0(sp)
81130ed8:	dec00204 	addi	sp,sp,8
81130edc:	f800283a 	ret

81130ee0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
81130ee0:	defffa04 	addi	sp,sp,-24
81130ee4:	dfc00515 	stw	ra,20(sp)
81130ee8:	df000415 	stw	fp,16(sp)
81130eec:	df000404 	addi	fp,sp,16
81130ef0:	e13ffe15 	stw	r4,-8(fp)
81130ef4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
81130ef8:	e0bfff17 	ldw	r2,-4(fp)
81130efc:	10800017 	ldw	r2,0(r2)
81130f00:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
81130f04:	e13ffe17 	ldw	r4,-8(fp)
81130f08:	110bc740 	call	8110bc74 <strlen>
81130f0c:	10800044 	addi	r2,r2,1
81130f10:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81130f14:	00000d06 	br	81130f4c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
81130f18:	e0bffc17 	ldw	r2,-16(fp)
81130f1c:	10800217 	ldw	r2,8(r2)
81130f20:	e0fffd17 	ldw	r3,-12(fp)
81130f24:	180d883a 	mov	r6,r3
81130f28:	e17ffe17 	ldw	r5,-8(fp)
81130f2c:	1009883a 	mov	r4,r2
81130f30:	1131c000 	call	81131c00 <memcmp>
81130f34:	1000021e 	bne	r2,zero,81130f40 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
81130f38:	e0bffc17 	ldw	r2,-16(fp)
81130f3c:	00000706 	br	81130f5c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
81130f40:	e0bffc17 	ldw	r2,-16(fp)
81130f44:	10800017 	ldw	r2,0(r2)
81130f48:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81130f4c:	e0fffc17 	ldw	r3,-16(fp)
81130f50:	e0bfff17 	ldw	r2,-4(fp)
81130f54:	18bff01e 	bne	r3,r2,81130f18 <__reset+0xfb110f18>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
81130f58:	0005883a 	mov	r2,zero
}
81130f5c:	e037883a 	mov	sp,fp
81130f60:	dfc00117 	ldw	ra,4(sp)
81130f64:	df000017 	ldw	fp,0(sp)
81130f68:	dec00204 	addi	sp,sp,8
81130f6c:	f800283a 	ret

81130f70 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
81130f70:	defffb04 	addi	sp,sp,-20
81130f74:	dfc00415 	stw	ra,16(sp)
81130f78:	df000315 	stw	fp,12(sp)
81130f7c:	df000304 	addi	fp,sp,12
81130f80:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
81130f84:	d0a01017 	ldw	r2,-32704(gp)
81130f88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81130f8c:	00003106 	br	81131054 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
81130f90:	e0bffd17 	ldw	r2,-12(fp)
81130f94:	10800217 	ldw	r2,8(r2)
81130f98:	1009883a 	mov	r4,r2
81130f9c:	110bc740 	call	8110bc74 <strlen>
81130fa0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
81130fa4:	e0bffd17 	ldw	r2,-12(fp)
81130fa8:	10c00217 	ldw	r3,8(r2)
81130fac:	e0bffe17 	ldw	r2,-8(fp)
81130fb0:	10bfffc4 	addi	r2,r2,-1
81130fb4:	1885883a 	add	r2,r3,r2
81130fb8:	10800003 	ldbu	r2,0(r2)
81130fbc:	10803fcc 	andi	r2,r2,255
81130fc0:	1080201c 	xori	r2,r2,128
81130fc4:	10bfe004 	addi	r2,r2,-128
81130fc8:	10800bd8 	cmpnei	r2,r2,47
81130fcc:	1000031e 	bne	r2,zero,81130fdc <alt_find_file+0x6c>
    {
      len -= 1;
81130fd0:	e0bffe17 	ldw	r2,-8(fp)
81130fd4:	10bfffc4 	addi	r2,r2,-1
81130fd8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81130fdc:	e0bffe17 	ldw	r2,-8(fp)
81130fe0:	e0ffff17 	ldw	r3,-4(fp)
81130fe4:	1885883a 	add	r2,r3,r2
81130fe8:	10800003 	ldbu	r2,0(r2)
81130fec:	10803fcc 	andi	r2,r2,255
81130ff0:	1080201c 	xori	r2,r2,128
81130ff4:	10bfe004 	addi	r2,r2,-128
81130ff8:	10800be0 	cmpeqi	r2,r2,47
81130ffc:	1000081e 	bne	r2,zero,81131020 <alt_find_file+0xb0>
81131000:	e0bffe17 	ldw	r2,-8(fp)
81131004:	e0ffff17 	ldw	r3,-4(fp)
81131008:	1885883a 	add	r2,r3,r2
8113100c:	10800003 	ldbu	r2,0(r2)
81131010:	10803fcc 	andi	r2,r2,255
81131014:	1080201c 	xori	r2,r2,128
81131018:	10bfe004 	addi	r2,r2,-128
8113101c:	10000a1e 	bne	r2,zero,81131048 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
81131020:	e0bffd17 	ldw	r2,-12(fp)
81131024:	10800217 	ldw	r2,8(r2)
81131028:	e0fffe17 	ldw	r3,-8(fp)
8113102c:	180d883a 	mov	r6,r3
81131030:	e17fff17 	ldw	r5,-4(fp)
81131034:	1009883a 	mov	r4,r2
81131038:	1131c000 	call	81131c00 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113103c:	1000021e 	bne	r2,zero,81131048 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
81131040:	e0bffd17 	ldw	r2,-12(fp)
81131044:	00000706 	br	81131064 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
81131048:	e0bffd17 	ldw	r2,-12(fp)
8113104c:	10800017 	ldw	r2,0(r2)
81131050:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81131054:	e0fffd17 	ldw	r3,-12(fp)
81131058:	d0a01004 	addi	r2,gp,-32704
8113105c:	18bfcc1e 	bne	r3,r2,81130f90 <__reset+0xfb110f90>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
81131060:	0005883a 	mov	r2,zero
}
81131064:	e037883a 	mov	sp,fp
81131068:	dfc00117 	ldw	ra,4(sp)
8113106c:	df000017 	ldw	fp,0(sp)
81131070:	dec00204 	addi	sp,sp,8
81131074:	f800283a 	ret

81131078 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
81131078:	defff904 	addi	sp,sp,-28
8113107c:	dfc00615 	stw	ra,24(sp)
81131080:	df000515 	stw	fp,20(sp)
81131084:	df000504 	addi	fp,sp,20
81131088:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8113108c:	00bffa04 	movi	r2,-24
81131090:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
81131094:	d0a05f17 	ldw	r2,-32388(gp)
81131098:	e0bffd15 	stw	r2,-12(fp)
8113109c:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
811310a0:	e0bffe0b 	ldhu	r2,-8(fp)
811310a4:	e0fffe84 	addi	r3,fp,-6
811310a8:	180d883a 	mov	r6,r3
811310ac:	100b883a 	mov	r5,r2
811310b0:	e13ffd17 	ldw	r4,-12(fp)
811310b4:	1125cb00 	call	81125cb0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
811310b8:	e03ffb15 	stw	zero,-20(fp)
811310bc:	00001906 	br	81131124 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
811310c0:	00a044f4 	movhi	r2,33043
811310c4:	10927004 	addi	r2,r2,18880
811310c8:	e0fffb17 	ldw	r3,-20(fp)
811310cc:	18c00324 	muli	r3,r3,12
811310d0:	10c5883a 	add	r2,r2,r3
811310d4:	10800017 	ldw	r2,0(r2)
811310d8:	10000f1e 	bne	r2,zero,81131118 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
811310dc:	00a044f4 	movhi	r2,33043
811310e0:	10927004 	addi	r2,r2,18880
811310e4:	e0fffb17 	ldw	r3,-20(fp)
811310e8:	18c00324 	muli	r3,r3,12
811310ec:	10c5883a 	add	r2,r2,r3
811310f0:	e0ffff17 	ldw	r3,-4(fp)
811310f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
811310f8:	d0e01417 	ldw	r3,-32688(gp)
811310fc:	e0bffb17 	ldw	r2,-20(fp)
81131100:	1880020e 	bge	r3,r2,8113110c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
81131104:	e0bffb17 	ldw	r2,-20(fp)
81131108:	d0a01415 	stw	r2,-32688(gp)
      }
      rc = i;
8113110c:	e0bffb17 	ldw	r2,-20(fp)
81131110:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
81131114:	00000606 	br	81131130 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81131118:	e0bffb17 	ldw	r2,-20(fp)
8113111c:	10800044 	addi	r2,r2,1
81131120:	e0bffb15 	stw	r2,-20(fp)
81131124:	e0bffb17 	ldw	r2,-20(fp)
81131128:	10800810 	cmplti	r2,r2,32
8113112c:	103fe41e 	bne	r2,zero,811310c0 <__reset+0xfb1110c0>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
81131130:	d0a05f17 	ldw	r2,-32388(gp)
81131134:	1009883a 	mov	r4,r2
81131138:	11260280 	call	81126028 <OSSemPost>

  return rc;
8113113c:	e0bffc17 	ldw	r2,-16(fp)
}
81131140:	e037883a 	mov	sp,fp
81131144:	dfc00117 	ldw	ra,4(sp)
81131148:	df000017 	ldw	fp,0(sp)
8113114c:	dec00204 	addi	sp,sp,8
81131150:	f800283a 	ret

81131154 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81131154:	defff904 	addi	sp,sp,-28
81131158:	dfc00615 	stw	ra,24(sp)
8113115c:	df000515 	stw	fp,20(sp)
81131160:	df000504 	addi	fp,sp,20
81131164:	e13ffc15 	stw	r4,-16(fp)
81131168:	e17ffd15 	stw	r5,-12(fp)
8113116c:	e1bffe15 	stw	r6,-8(fp)
81131170:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
81131174:	e0800217 	ldw	r2,8(fp)
81131178:	d8800015 	stw	r2,0(sp)
8113117c:	e1ffff17 	ldw	r7,-4(fp)
81131180:	e1bffe17 	ldw	r6,-8(fp)
81131184:	e17ffd17 	ldw	r5,-12(fp)
81131188:	e13ffc17 	ldw	r4,-16(fp)
8113118c:	11313040 	call	81131304 <alt_iic_isr_register>
}  
81131190:	e037883a 	mov	sp,fp
81131194:	dfc00117 	ldw	ra,4(sp)
81131198:	df000017 	ldw	fp,0(sp)
8113119c:	dec00204 	addi	sp,sp,8
811311a0:	f800283a 	ret

811311a4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
811311a4:	defff904 	addi	sp,sp,-28
811311a8:	df000615 	stw	fp,24(sp)
811311ac:	df000604 	addi	fp,sp,24
811311b0:	e13ffe15 	stw	r4,-8(fp)
811311b4:	e17fff15 	stw	r5,-4(fp)
811311b8:	e0bfff17 	ldw	r2,-4(fp)
811311bc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811311c0:	0005303a 	rdctl	r2,status
811311c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811311c8:	e0fffb17 	ldw	r3,-20(fp)
811311cc:	00bfff84 	movi	r2,-2
811311d0:	1884703a 	and	r2,r3,r2
811311d4:	1001703a 	wrctl	status,r2
  
  return context;
811311d8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811311dc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
811311e0:	00c00044 	movi	r3,1
811311e4:	e0bffa17 	ldw	r2,-24(fp)
811311e8:	1884983a 	sll	r2,r3,r2
811311ec:	1007883a 	mov	r3,r2
811311f0:	d0a08b17 	ldw	r2,-32212(gp)
811311f4:	1884b03a 	or	r2,r3,r2
811311f8:	d0a08b15 	stw	r2,-32212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811311fc:	d0a08b17 	ldw	r2,-32212(gp)
81131200:	100170fa 	wrctl	ienable,r2
81131204:	e0bffc17 	ldw	r2,-16(fp)
81131208:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113120c:	e0bffd17 	ldw	r2,-12(fp)
81131210:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81131214:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
81131218:	0001883a 	nop
}
8113121c:	e037883a 	mov	sp,fp
81131220:	df000017 	ldw	fp,0(sp)
81131224:	dec00104 	addi	sp,sp,4
81131228:	f800283a 	ret

8113122c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8113122c:	defff904 	addi	sp,sp,-28
81131230:	df000615 	stw	fp,24(sp)
81131234:	df000604 	addi	fp,sp,24
81131238:	e13ffe15 	stw	r4,-8(fp)
8113123c:	e17fff15 	stw	r5,-4(fp)
81131240:	e0bfff17 	ldw	r2,-4(fp)
81131244:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131248:	0005303a 	rdctl	r2,status
8113124c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131250:	e0fffb17 	ldw	r3,-20(fp)
81131254:	00bfff84 	movi	r2,-2
81131258:	1884703a 	and	r2,r3,r2
8113125c:	1001703a 	wrctl	status,r2
  
  return context;
81131260:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81131264:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
81131268:	00c00044 	movi	r3,1
8113126c:	e0bffa17 	ldw	r2,-24(fp)
81131270:	1884983a 	sll	r2,r3,r2
81131274:	0084303a 	nor	r2,zero,r2
81131278:	1007883a 	mov	r3,r2
8113127c:	d0a08b17 	ldw	r2,-32212(gp)
81131280:	1884703a 	and	r2,r3,r2
81131284:	d0a08b15 	stw	r2,-32212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81131288:	d0a08b17 	ldw	r2,-32212(gp)
8113128c:	100170fa 	wrctl	ienable,r2
81131290:	e0bffc17 	ldw	r2,-16(fp)
81131294:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131298:	e0bffd17 	ldw	r2,-12(fp)
8113129c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811312a0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
811312a4:	0001883a 	nop
}
811312a8:	e037883a 	mov	sp,fp
811312ac:	df000017 	ldw	fp,0(sp)
811312b0:	dec00104 	addi	sp,sp,4
811312b4:	f800283a 	ret

811312b8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
811312b8:	defffc04 	addi	sp,sp,-16
811312bc:	df000315 	stw	fp,12(sp)
811312c0:	df000304 	addi	fp,sp,12
811312c4:	e13ffe15 	stw	r4,-8(fp)
811312c8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
811312cc:	000530fa 	rdctl	r2,ienable
811312d0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
811312d4:	00c00044 	movi	r3,1
811312d8:	e0bfff17 	ldw	r2,-4(fp)
811312dc:	1884983a 	sll	r2,r3,r2
811312e0:	1007883a 	mov	r3,r2
811312e4:	e0bffd17 	ldw	r2,-12(fp)
811312e8:	1884703a 	and	r2,r3,r2
811312ec:	1004c03a 	cmpne	r2,r2,zero
811312f0:	10803fcc 	andi	r2,r2,255
}
811312f4:	e037883a 	mov	sp,fp
811312f8:	df000017 	ldw	fp,0(sp)
811312fc:	dec00104 	addi	sp,sp,4
81131300:	f800283a 	ret

81131304 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81131304:	defff504 	addi	sp,sp,-44
81131308:	dfc00a15 	stw	ra,40(sp)
8113130c:	df000915 	stw	fp,36(sp)
81131310:	df000904 	addi	fp,sp,36
81131314:	e13ffc15 	stw	r4,-16(fp)
81131318:	e17ffd15 	stw	r5,-12(fp)
8113131c:	e1bffe15 	stw	r6,-8(fp)
81131320:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
81131324:	00bffa84 	movi	r2,-22
81131328:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8113132c:	e0bffd17 	ldw	r2,-12(fp)
81131330:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81131334:	e0bff817 	ldw	r2,-32(fp)
81131338:	10800808 	cmpgei	r2,r2,32
8113133c:	1000271e 	bne	r2,zero,811313dc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131340:	0005303a 	rdctl	r2,status
81131344:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131348:	e0fffb17 	ldw	r3,-20(fp)
8113134c:	00bfff84 	movi	r2,-2
81131350:	1884703a 	and	r2,r3,r2
81131354:	1001703a 	wrctl	status,r2
  
  return context;
81131358:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8113135c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
81131360:	00a04574 	movhi	r2,33045
81131364:	10987b04 	addi	r2,r2,25068
81131368:	e0fff817 	ldw	r3,-32(fp)
8113136c:	180690fa 	slli	r3,r3,3
81131370:	10c5883a 	add	r2,r2,r3
81131374:	e0fffe17 	ldw	r3,-8(fp)
81131378:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8113137c:	00a04574 	movhi	r2,33045
81131380:	10987b04 	addi	r2,r2,25068
81131384:	e0fff817 	ldw	r3,-32(fp)
81131388:	180690fa 	slli	r3,r3,3
8113138c:	10c5883a 	add	r2,r2,r3
81131390:	10800104 	addi	r2,r2,4
81131394:	e0ffff17 	ldw	r3,-4(fp)
81131398:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8113139c:	e0bffe17 	ldw	r2,-8(fp)
811313a0:	10000526 	beq	r2,zero,811313b8 <alt_iic_isr_register+0xb4>
811313a4:	e0bff817 	ldw	r2,-32(fp)
811313a8:	100b883a 	mov	r5,r2
811313ac:	e13ffc17 	ldw	r4,-16(fp)
811313b0:	11311a40 	call	811311a4 <alt_ic_irq_enable>
811313b4:	00000406 	br	811313c8 <alt_iic_isr_register+0xc4>
811313b8:	e0bff817 	ldw	r2,-32(fp)
811313bc:	100b883a 	mov	r5,r2
811313c0:	e13ffc17 	ldw	r4,-16(fp)
811313c4:	113122c0 	call	8113122c <alt_ic_irq_disable>
811313c8:	e0bff715 	stw	r2,-36(fp)
811313cc:	e0bffa17 	ldw	r2,-24(fp)
811313d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811313d4:	e0bff917 	ldw	r2,-28(fp)
811313d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
811313dc:	e0bff717 	ldw	r2,-36(fp)
}
811313e0:	e037883a 	mov	sp,fp
811313e4:	dfc00117 	ldw	ra,4(sp)
811313e8:	df000017 	ldw	fp,0(sp)
811313ec:	dec00204 	addi	sp,sp,8
811313f0:	f800283a 	ret

811313f4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
811313f4:	defff904 	addi	sp,sp,-28
811313f8:	dfc00615 	stw	ra,24(sp)
811313fc:	df000515 	stw	fp,20(sp)
81131400:	df000504 	addi	fp,sp,20
81131404:	e13ffc15 	stw	r4,-16(fp)
81131408:	e17ffd15 	stw	r5,-12(fp)
8113140c:	e1bffe15 	stw	r6,-8(fp)
81131410:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
81131414:	e1bfff17 	ldw	r6,-4(fp)
81131418:	e17ffe17 	ldw	r5,-8(fp)
8113141c:	e13ffd17 	ldw	r4,-12(fp)
81131420:	111fd0c0 	call	8111fd0c <open>
81131424:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
81131428:	e0bffb17 	ldw	r2,-20(fp)
8113142c:	10001c16 	blt	r2,zero,811314a0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
81131430:	00a044f4 	movhi	r2,33043
81131434:	10927004 	addi	r2,r2,18880
81131438:	e0fffb17 	ldw	r3,-20(fp)
8113143c:	18c00324 	muli	r3,r3,12
81131440:	10c5883a 	add	r2,r2,r3
81131444:	10c00017 	ldw	r3,0(r2)
81131448:	e0bffc17 	ldw	r2,-16(fp)
8113144c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
81131450:	00a044f4 	movhi	r2,33043
81131454:	10927004 	addi	r2,r2,18880
81131458:	e0fffb17 	ldw	r3,-20(fp)
8113145c:	18c00324 	muli	r3,r3,12
81131460:	10c5883a 	add	r2,r2,r3
81131464:	10800104 	addi	r2,r2,4
81131468:	10c00017 	ldw	r3,0(r2)
8113146c:	e0bffc17 	ldw	r2,-16(fp)
81131470:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
81131474:	00a044f4 	movhi	r2,33043
81131478:	10927004 	addi	r2,r2,18880
8113147c:	e0fffb17 	ldw	r3,-20(fp)
81131480:	18c00324 	muli	r3,r3,12
81131484:	10c5883a 	add	r2,r2,r3
81131488:	10800204 	addi	r2,r2,8
8113148c:	10c00017 	ldw	r3,0(r2)
81131490:	e0bffc17 	ldw	r2,-16(fp)
81131494:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
81131498:	e13ffb17 	ldw	r4,-20(fp)
8113149c:	111ff980 	call	8111ff98 <alt_release_fd>
  }
} 
811314a0:	0001883a 	nop
811314a4:	e037883a 	mov	sp,fp
811314a8:	dfc00117 	ldw	ra,4(sp)
811314ac:	df000017 	ldw	fp,0(sp)
811314b0:	dec00204 	addi	sp,sp,8
811314b4:	f800283a 	ret

811314b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
811314b8:	defffb04 	addi	sp,sp,-20
811314bc:	dfc00415 	stw	ra,16(sp)
811314c0:	df000315 	stw	fp,12(sp)
811314c4:	df000304 	addi	fp,sp,12
811314c8:	e13ffd15 	stw	r4,-12(fp)
811314cc:	e17ffe15 	stw	r5,-8(fp)
811314d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
811314d4:	01c07fc4 	movi	r7,511
811314d8:	01800044 	movi	r6,1
811314dc:	e17ffd17 	ldw	r5,-12(fp)
811314e0:	012044f4 	movhi	r4,33043
811314e4:	21127304 	addi	r4,r4,18892
811314e8:	11313f40 	call	811313f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
811314ec:	01c07fc4 	movi	r7,511
811314f0:	000d883a 	mov	r6,zero
811314f4:	e17ffe17 	ldw	r5,-8(fp)
811314f8:	012044f4 	movhi	r4,33043
811314fc:	21127004 	addi	r4,r4,18880
81131500:	11313f40 	call	811313f4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
81131504:	01c07fc4 	movi	r7,511
81131508:	01800044 	movi	r6,1
8113150c:	e17fff17 	ldw	r5,-4(fp)
81131510:	012044f4 	movhi	r4,33043
81131514:	21127604 	addi	r4,r4,18904
81131518:	11313f40 	call	811313f4 <alt_open_fd>
}  
8113151c:	0001883a 	nop
81131520:	e037883a 	mov	sp,fp
81131524:	dfc00117 	ldw	ra,4(sp)
81131528:	df000017 	ldw	fp,0(sp)
8113152c:	dec00204 	addi	sp,sp,8
81131530:	f800283a 	ret

81131534 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
81131534:	defff204 	addi	sp,sp,-56
81131538:	dfc00a15 	stw	ra,40(sp)
8113153c:	df000915 	stw	fp,36(sp)
81131540:	df000904 	addi	fp,sp,36
81131544:	e13fff15 	stw	r4,-4(fp)
81131548:	e1400215 	stw	r5,8(fp)
8113154c:	e1800315 	stw	r6,12(fp)
81131550:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
81131554:	e0800204 	addi	r2,fp,8
81131558:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8113155c:	e0bfff17 	ldw	r2,-4(fp)
81131560:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
81131564:	00006f06 	br	81131724 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
81131568:	e0bff807 	ldb	r2,-32(fp)
8113156c:	10800960 	cmpeqi	r2,r2,37
81131570:	1000041e 	bne	r2,zero,81131584 <alt_printf+0x50>
        {
            alt_putchar(c);
81131574:	e0bff807 	ldb	r2,-32(fp)
81131578:	1009883a 	mov	r4,r2
8113157c:	11317600 	call	81131760 <alt_putchar>
81131580:	00006806 	br	81131724 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
81131584:	e0bff717 	ldw	r2,-36(fp)
81131588:	10c00044 	addi	r3,r2,1
8113158c:	e0fff715 	stw	r3,-36(fp)
81131590:	10800003 	ldbu	r2,0(r2)
81131594:	e0bff805 	stb	r2,-32(fp)
81131598:	e0bff807 	ldb	r2,-32(fp)
8113159c:	10006926 	beq	r2,zero,81131744 <alt_printf+0x210>
            {
                if (c == '%')
811315a0:	e0bff807 	ldb	r2,-32(fp)
811315a4:	10800958 	cmpnei	r2,r2,37
811315a8:	1000041e 	bne	r2,zero,811315bc <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
811315ac:	e0bff807 	ldb	r2,-32(fp)
811315b0:	1009883a 	mov	r4,r2
811315b4:	11317600 	call	81131760 <alt_putchar>
811315b8:	00005a06 	br	81131724 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
811315bc:	e0bff807 	ldb	r2,-32(fp)
811315c0:	108018d8 	cmpnei	r2,r2,99
811315c4:	1000081e 	bne	r2,zero,811315e8 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
811315c8:	e0bffe17 	ldw	r2,-8(fp)
811315cc:	10c00104 	addi	r3,r2,4
811315d0:	e0fffe15 	stw	r3,-8(fp)
811315d4:	10800017 	ldw	r2,0(r2)
811315d8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
811315dc:	e13ffd17 	ldw	r4,-12(fp)
811315e0:	11317600 	call	81131760 <alt_putchar>
811315e4:	00004f06 	br	81131724 <alt_printf+0x1f0>
                }
                else if (c == 'x')
811315e8:	e0bff807 	ldb	r2,-32(fp)
811315ec:	10801e18 	cmpnei	r2,r2,120
811315f0:	1000341e 	bne	r2,zero,811316c4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
811315f4:	e0bffe17 	ldw	r2,-8(fp)
811315f8:	10c00104 	addi	r3,r2,4
811315fc:	e0fffe15 	stw	r3,-8(fp)
81131600:	10800017 	ldw	r2,0(r2)
81131604:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81131608:	e0bffb17 	ldw	r2,-20(fp)
8113160c:	1000031e 	bne	r2,zero,8113161c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
81131610:	01000c04 	movi	r4,48
81131614:	11317600 	call	81131760 <alt_putchar>
                        continue;
81131618:	00004206 	br	81131724 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8113161c:	00800704 	movi	r2,28
81131620:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
81131624:	00000306 	br	81131634 <alt_printf+0x100>
                        digit_shift -= 4;
81131628:	e0bff917 	ldw	r2,-28(fp)
8113162c:	10bfff04 	addi	r2,r2,-4
81131630:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
81131634:	00c003c4 	movi	r3,15
81131638:	e0bff917 	ldw	r2,-28(fp)
8113163c:	1884983a 	sll	r2,r3,r2
81131640:	1007883a 	mov	r3,r2
81131644:	e0bffb17 	ldw	r2,-20(fp)
81131648:	1884703a 	and	r2,r3,r2
8113164c:	103ff626 	beq	r2,zero,81131628 <__reset+0xfb111628>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81131650:	00001906 	br	811316b8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
81131654:	00c003c4 	movi	r3,15
81131658:	e0bff917 	ldw	r2,-28(fp)
8113165c:	1884983a 	sll	r2,r3,r2
81131660:	1007883a 	mov	r3,r2
81131664:	e0bffb17 	ldw	r2,-20(fp)
81131668:	1886703a 	and	r3,r3,r2
8113166c:	e0bff917 	ldw	r2,-28(fp)
81131670:	1884d83a 	srl	r2,r3,r2
81131674:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
81131678:	e0bffc17 	ldw	r2,-16(fp)
8113167c:	108002a8 	cmpgeui	r2,r2,10
81131680:	1000041e 	bne	r2,zero,81131694 <alt_printf+0x160>
                            c = '0' + digit;
81131684:	e0bffc17 	ldw	r2,-16(fp)
81131688:	10800c04 	addi	r2,r2,48
8113168c:	e0bff805 	stb	r2,-32(fp)
81131690:	00000306 	br	811316a0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
81131694:	e0bffc17 	ldw	r2,-16(fp)
81131698:	108015c4 	addi	r2,r2,87
8113169c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
811316a0:	e0bff807 	ldb	r2,-32(fp)
811316a4:	1009883a 	mov	r4,r2
811316a8:	11317600 	call	81131760 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
811316ac:	e0bff917 	ldw	r2,-28(fp)
811316b0:	10bfff04 	addi	r2,r2,-4
811316b4:	e0bff915 	stw	r2,-28(fp)
811316b8:	e0bff917 	ldw	r2,-28(fp)
811316bc:	103fe50e 	bge	r2,zero,81131654 <__reset+0xfb111654>
811316c0:	00001806 	br	81131724 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
811316c4:	e0bff807 	ldb	r2,-32(fp)
811316c8:	10801cd8 	cmpnei	r2,r2,115
811316cc:	1000151e 	bne	r2,zero,81131724 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
811316d0:	e0bffe17 	ldw	r2,-8(fp)
811316d4:	10c00104 	addi	r3,r2,4
811316d8:	e0fffe15 	stw	r3,-8(fp)
811316dc:	10800017 	ldw	r2,0(r2)
811316e0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
811316e4:	00000906 	br	8113170c <alt_printf+0x1d8>
                      alt_putchar(*s++);
811316e8:	e0bffa17 	ldw	r2,-24(fp)
811316ec:	10c00044 	addi	r3,r2,1
811316f0:	e0fffa15 	stw	r3,-24(fp)
811316f4:	10800003 	ldbu	r2,0(r2)
811316f8:	10803fcc 	andi	r2,r2,255
811316fc:	1080201c 	xori	r2,r2,128
81131700:	10bfe004 	addi	r2,r2,-128
81131704:	1009883a 	mov	r4,r2
81131708:	11317600 	call	81131760 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8113170c:	e0bffa17 	ldw	r2,-24(fp)
81131710:	10800003 	ldbu	r2,0(r2)
81131714:	10803fcc 	andi	r2,r2,255
81131718:	1080201c 	xori	r2,r2,128
8113171c:	10bfe004 	addi	r2,r2,-128
81131720:	103ff11e 	bne	r2,zero,811316e8 <__reset+0xfb1116e8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
81131724:	e0bff717 	ldw	r2,-36(fp)
81131728:	10c00044 	addi	r3,r2,1
8113172c:	e0fff715 	stw	r3,-36(fp)
81131730:	10800003 	ldbu	r2,0(r2)
81131734:	e0bff805 	stb	r2,-32(fp)
81131738:	e0bff807 	ldb	r2,-32(fp)
8113173c:	103f8a1e 	bne	r2,zero,81131568 <__reset+0xfb111568>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81131740:	00000106 	br	81131748 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81131744:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81131748:	0001883a 	nop
8113174c:	e037883a 	mov	sp,fp
81131750:	dfc00117 	ldw	ra,4(sp)
81131754:	df000017 	ldw	fp,0(sp)
81131758:	dec00504 	addi	sp,sp,20
8113175c:	f800283a 	ret

81131760 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
81131760:	defffd04 	addi	sp,sp,-12
81131764:	dfc00215 	stw	ra,8(sp)
81131768:	df000115 	stw	fp,4(sp)
8113176c:	df000104 	addi	fp,sp,4
81131770:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
81131774:	d0a00917 	ldw	r2,-32732(gp)
81131778:	10800217 	ldw	r2,8(r2)
8113177c:	100b883a 	mov	r5,r2
81131780:	e13fff17 	ldw	r4,-4(fp)
81131784:	11161b00 	call	811161b0 <putc>
#endif
#endif
}
81131788:	e037883a 	mov	sp,fp
8113178c:	dfc00117 	ldw	ra,4(sp)
81131790:	df000017 	ldw	fp,0(sp)
81131794:	dec00204 	addi	sp,sp,8
81131798:	f800283a 	ret

8113179c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8113179c:	deffff04 	addi	sp,sp,-4
811317a0:	df000015 	stw	fp,0(sp)
811317a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
811317a8:	000170fa 	wrctl	ienable,zero
}
811317ac:	0001883a 	nop
811317b0:	e037883a 	mov	sp,fp
811317b4:	df000017 	ldw	fp,0(sp)
811317b8:	dec00104 	addi	sp,sp,4
811317bc:	f800283a 	ret

811317c0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
811317c0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
811317c4:	d0e00917 	ldw	r3,-32732(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
811317c8:	d1207917 	ldw	r4,-32284(gp)

      stw ra,  0(sp)
811317cc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
811317d0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
811317d4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
811317d8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
811317dc:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
811317e0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
811317e4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
811317e8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
811317ec:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
811317f0:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
811317f4:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
811317f8:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
811317fc:	1131a340 	call	81131a34 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
81131800:	d1207317 	ldw	r4,-32308(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
81131804:	d1606b07 	ldb	r5,-32340(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
81131808:	d1207915 	stw	r4,-32284(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
8113180c:	d1606b45 	stb	r5,-32339(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
81131810:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
81131814:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
81131818:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
8113181c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
81131820:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
81131824:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
81131828:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
8113182c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
81131830:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
81131834:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
81131838:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
8113183c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
81131840:	d0e00915 	stw	r3,-32732(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
81131844:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
81131848:	f800283a 	ret

8113184c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
8113184c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
81131850:	047fff84 	movi	r17,-2
      and   r18, r18, r17
81131854:	9464703a 	and	r18,r18,r17
      wrctl status, r18
81131858:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113185c:	1131a340 	call	81131a34 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
81131860:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
81131864:	d4a06945 	stb	r18,-32347(gp)

      /*
       * start execution of the new task.
       */

      br 9b
81131868:	003fe506 	br	81131800 <__reset+0xfb111800>

8113186c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
8113186c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
81131870:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
81131874:	10800054 	ori	r2,r2,1
      wrctl status, r2
81131878:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
8113187c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
81131880:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
81131884:	dec00204 	addi	sp,sp,8

      callr r2
81131888:	103ee83a 	callr	r2

      nop
8113188c:	0001883a 	nop

81131890 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
81131890:	defff704 	addi	sp,sp,-36
81131894:	dfc00815 	stw	ra,32(sp)
81131898:	df000715 	stw	fp,28(sp)
8113189c:	df000704 	addi	fp,sp,28
811318a0:	e13ffc15 	stw	r4,-16(fp)
811318a4:	e17ffd15 	stw	r5,-12(fp)
811318a8:	e1bffe15 	stw	r6,-8(fp)
811318ac:	3805883a 	mov	r2,r7
811318b0:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
811318b4:	e0fffe17 	ldw	r3,-8(fp)
811318b8:	00bfff04 	movi	r2,-4
811318bc:	1884703a 	and	r2,r3,r2
811318c0:	10bef704 	addi	r2,r2,-1060
811318c4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
811318c8:	01810904 	movi	r6,1060
811318cc:	000b883a 	mov	r5,zero
811318d0:	e13ff917 	ldw	r4,-28(fp)
811318d4:	110b3b40 	call	8110b3b4 <memset>
811318d8:	e0bff917 	ldw	r2,-28(fp)
811318dc:	10c0bb04 	addi	r3,r2,748
811318e0:	e0bff917 	ldw	r2,-28(fp)
811318e4:	10c00115 	stw	r3,4(r2)
811318e8:	e0bff917 	ldw	r2,-28(fp)
811318ec:	10c0d504 	addi	r3,r2,852
811318f0:	e0bff917 	ldw	r2,-28(fp)
811318f4:	10c00215 	stw	r3,8(r2)
811318f8:	e0bff917 	ldw	r2,-28(fp)
811318fc:	10c0ef04 	addi	r3,r2,956
81131900:	e0bff917 	ldw	r2,-28(fp)
81131904:	10c00315 	stw	r3,12(r2)
81131908:	e0fff917 	ldw	r3,-28(fp)
8113190c:	00a044f4 	movhi	r2,33043
81131910:	10903c04 	addi	r2,r2,16624
81131914:	18800d15 	stw	r2,52(r3)
81131918:	e0bff917 	ldw	r2,-28(fp)
8113191c:	00c00044 	movi	r3,1
81131920:	10c02915 	stw	r3,164(r2)
81131924:	10002a15 	stw	zero,168(r2)
81131928:	e0bff917 	ldw	r2,-28(fp)
8113192c:	00ccc384 	movi	r3,13070
81131930:	10c02b0d 	sth	r3,172(r2)
81131934:	e0bff917 	ldw	r2,-28(fp)
81131938:	00eaf344 	movi	r3,-21555
8113193c:	10c02b8d 	sth	r3,174(r2)
81131940:	e0bff917 	ldw	r2,-28(fp)
81131944:	00c48d04 	movi	r3,4660
81131948:	10c02c0d 	sth	r3,176(r2)
8113194c:	e0bff917 	ldw	r2,-28(fp)
81131950:	00f99b44 	movi	r3,-6547
81131954:	10c02c8d 	sth	r3,178(r2)
81131958:	e0bff917 	ldw	r2,-28(fp)
8113195c:	00f7bb04 	movi	r3,-8468
81131960:	10c02d0d 	sth	r3,180(r2)
81131964:	e0bff917 	ldw	r2,-28(fp)
81131968:	00c00144 	movi	r3,5
8113196c:	10c02d8d 	sth	r3,182(r2)
81131970:	e0bff917 	ldw	r2,-28(fp)
81131974:	00c002c4 	movi	r3,11
81131978:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
8113197c:	e0bff917 	ldw	r2,-28(fp)
81131980:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
81131984:	e0bffa17 	ldw	r2,-24(fp)
81131988:	10bff304 	addi	r2,r2,-52
8113198c:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
81131990:	e0bffb17 	ldw	r2,-20(fp)
81131994:	10800c04 	addi	r2,r2,48
81131998:	e0fffc17 	ldw	r3,-16(fp)
8113199c:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
811319a0:	e0bffb17 	ldw	r2,-20(fp)
811319a4:	10800b04 	addi	r2,r2,44
811319a8:	e0fffd17 	ldw	r3,-12(fp)
811319ac:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
811319b0:	e0bffb17 	ldw	r2,-20(fp)
811319b4:	10800a04 	addi	r2,r2,40
811319b8:	e0fff917 	ldw	r3,-28(fp)
811319bc:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
811319c0:	00a044f4 	movhi	r2,33043
811319c4:	10861b04 	addi	r2,r2,6252
811319c8:	10c00104 	addi	r3,r2,4
811319cc:	e0bffb17 	ldw	r2,-20(fp)
811319d0:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
811319d4:	e0bffb17 	ldw	r2,-20(fp)
}
811319d8:	e037883a 	mov	sp,fp
811319dc:	dfc00117 	ldw	ra,4(sp)
811319e0:	df000017 	ldw	fp,0(sp)
811319e4:	dec00204 	addi	sp,sp,8
811319e8:	f800283a 	ret

811319ec <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
811319ec:	defffe04 	addi	sp,sp,-8
811319f0:	df000115 	stw	fp,4(sp)
811319f4:	df000104 	addi	fp,sp,4
811319f8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
811319fc:	0001883a 	nop
81131a00:	e037883a 	mov	sp,fp
81131a04:	df000017 	ldw	fp,0(sp)
81131a08:	dec00104 	addi	sp,sp,4
81131a0c:	f800283a 	ret

81131a10 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
81131a10:	defffe04 	addi	sp,sp,-8
81131a14:	df000115 	stw	fp,4(sp)
81131a18:	df000104 	addi	fp,sp,4
81131a1c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
81131a20:	0001883a 	nop
81131a24:	e037883a 	mov	sp,fp
81131a28:	df000017 	ldw	fp,0(sp)
81131a2c:	dec00104 	addi	sp,sp,4
81131a30:	f800283a 	ret

81131a34 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
81131a34:	deffff04 	addi	sp,sp,-4
81131a38:	df000015 	stw	fp,0(sp)
81131a3c:	d839883a 	mov	fp,sp
}
81131a40:	0001883a 	nop
81131a44:	e037883a 	mov	sp,fp
81131a48:	df000017 	ldw	fp,0(sp)
81131a4c:	dec00104 	addi	sp,sp,4
81131a50:	f800283a 	ret

81131a54 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
81131a54:	deffff04 	addi	sp,sp,-4
81131a58:	df000015 	stw	fp,0(sp)
81131a5c:	d839883a 	mov	fp,sp
}
81131a60:	0001883a 	nop
81131a64:	e037883a 	mov	sp,fp
81131a68:	df000017 	ldw	fp,0(sp)
81131a6c:	dec00104 	addi	sp,sp,4
81131a70:	f800283a 	ret

81131a74 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
81131a74:	deffff04 	addi	sp,sp,-4
81131a78:	df000015 	stw	fp,0(sp)
81131a7c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
81131a80:	0001883a 	nop
81131a84:	e037883a 	mov	sp,fp
81131a88:	df000017 	ldw	fp,0(sp)
81131a8c:	dec00104 	addi	sp,sp,4
81131a90:	f800283a 	ret

81131a94 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
81131a94:	deffff04 	addi	sp,sp,-4
81131a98:	df000015 	stw	fp,0(sp)
81131a9c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
81131aa0:	0001883a 	nop
81131aa4:	e037883a 	mov	sp,fp
81131aa8:	df000017 	ldw	fp,0(sp)
81131aac:	dec00104 	addi	sp,sp,4
81131ab0:	f800283a 	ret

81131ab4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
81131ab4:	deffff04 	addi	sp,sp,-4
81131ab8:	df000015 	stw	fp,0(sp)
81131abc:	d839883a 	mov	fp,sp
}
81131ac0:	0001883a 	nop
81131ac4:	e037883a 	mov	sp,fp
81131ac8:	df000017 	ldw	fp,0(sp)
81131acc:	dec00104 	addi	sp,sp,4
81131ad0:	f800283a 	ret

81131ad4 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
81131ad4:	deffff04 	addi	sp,sp,-4
81131ad8:	df000015 	stw	fp,0(sp)
81131adc:	d839883a 	mov	fp,sp
}
81131ae0:	0001883a 	nop
81131ae4:	e037883a 	mov	sp,fp
81131ae8:	df000017 	ldw	fp,0(sp)
81131aec:	dec00104 	addi	sp,sp,4
81131af0:	f800283a 	ret

81131af4 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
81131af4:	defffe04 	addi	sp,sp,-8
81131af8:	df000115 	stw	fp,4(sp)
81131afc:	df000104 	addi	fp,sp,4
81131b00:	e13fff15 	stw	r4,-4(fp)
}
81131b04:	0001883a 	nop
81131b08:	e037883a 	mov	sp,fp
81131b0c:	df000017 	ldw	fp,0(sp)
81131b10:	dec00104 	addi	sp,sp,4
81131b14:	f800283a 	ret

81131b18 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
81131b18:	defffe04 	addi	sp,sp,-8
81131b1c:	df000115 	stw	fp,4(sp)
81131b20:	df000104 	addi	fp,sp,4
81131b24:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
81131b28:	e0bfff17 	ldw	r2,-4(fp)
81131b2c:	10bffe84 	addi	r2,r2,-6
81131b30:	10c00428 	cmpgeui	r3,r2,16
81131b34:	18001a1e 	bne	r3,zero,81131ba0 <alt_exception_cause_generated_bad_addr+0x88>
81131b38:	100690ba 	slli	r3,r2,2
81131b3c:	00a044f4 	movhi	r2,33043
81131b40:	1086d404 	addi	r2,r2,6992
81131b44:	1885883a 	add	r2,r3,r2
81131b48:	10800017 	ldw	r2,0(r2)
81131b4c:	1000683a 	jmp	r2
81131b50:	81131b90 	cmplti	r4,r16,19566
81131b54:	81131b90 	cmplti	r4,r16,19566
81131b58:	81131ba0 	cmpeqi	r4,r16,19566
81131b5c:	81131ba0 	cmpeqi	r4,r16,19566
81131b60:	81131ba0 	cmpeqi	r4,r16,19566
81131b64:	81131b90 	cmplti	r4,r16,19566
81131b68:	81131b98 	cmpnei	r4,r16,19566
81131b6c:	81131ba0 	cmpeqi	r4,r16,19566
81131b70:	81131b90 	cmplti	r4,r16,19566
81131b74:	81131b90 	cmplti	r4,r16,19566
81131b78:	81131ba0 	cmpeqi	r4,r16,19566
81131b7c:	81131b90 	cmplti	r4,r16,19566
81131b80:	81131b98 	cmpnei	r4,r16,19566
81131b84:	81131ba0 	cmpeqi	r4,r16,19566
81131b88:	81131ba0 	cmpeqi	r4,r16,19566
81131b8c:	81131b90 	cmplti	r4,r16,19566
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
81131b90:	00800044 	movi	r2,1
81131b94:	00000306 	br	81131ba4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
81131b98:	0005883a 	mov	r2,zero
81131b9c:	00000106 	br	81131ba4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
81131ba0:	0005883a 	mov	r2,zero
  }
}
81131ba4:	e037883a 	mov	sp,fp
81131ba8:	df000017 	ldw	fp,0(sp)
81131bac:	dec00104 	addi	sp,sp,4
81131bb0:	f800283a 	ret

81131bb4 <atexit>:
81131bb4:	200b883a 	mov	r5,r4
81131bb8:	000f883a 	mov	r7,zero
81131bbc:	000d883a 	mov	r6,zero
81131bc0:	0009883a 	mov	r4,zero
81131bc4:	1131c7c1 	jmpi	81131c7c <__register_exitproc>

81131bc8 <exit>:
81131bc8:	defffe04 	addi	sp,sp,-8
81131bcc:	000b883a 	mov	r5,zero
81131bd0:	dc000015 	stw	r16,0(sp)
81131bd4:	dfc00115 	stw	ra,4(sp)
81131bd8:	2021883a 	mov	r16,r4
81131bdc:	1131d940 	call	81131d94 <__call_exitprocs>
81131be0:	00a044f4 	movhi	r2,33043
81131be4:	10976304 	addi	r2,r2,23948
81131be8:	11000017 	ldw	r4,0(r2)
81131bec:	20800f17 	ldw	r2,60(r4)
81131bf0:	10000126 	beq	r2,zero,81131bf8 <exit+0x30>
81131bf4:	103ee83a 	callr	r2
81131bf8:	8009883a 	mov	r4,r16
81131bfc:	1131f140 	call	81131f14 <_exit>

81131c00 <memcmp>:
81131c00:	01c000c4 	movi	r7,3
81131c04:	3980192e 	bgeu	r7,r6,81131c6c <memcmp+0x6c>
81131c08:	2144b03a 	or	r2,r4,r5
81131c0c:	11c4703a 	and	r2,r2,r7
81131c10:	10000f26 	beq	r2,zero,81131c50 <memcmp+0x50>
81131c14:	20800003 	ldbu	r2,0(r4)
81131c18:	28c00003 	ldbu	r3,0(r5)
81131c1c:	10c0151e 	bne	r2,r3,81131c74 <memcmp+0x74>
81131c20:	31bfff84 	addi	r6,r6,-2
81131c24:	01ffffc4 	movi	r7,-1
81131c28:	00000406 	br	81131c3c <memcmp+0x3c>
81131c2c:	20800003 	ldbu	r2,0(r4)
81131c30:	28c00003 	ldbu	r3,0(r5)
81131c34:	31bfffc4 	addi	r6,r6,-1
81131c38:	10c00e1e 	bne	r2,r3,81131c74 <memcmp+0x74>
81131c3c:	21000044 	addi	r4,r4,1
81131c40:	29400044 	addi	r5,r5,1
81131c44:	31fff91e 	bne	r6,r7,81131c2c <__reset+0xfb111c2c>
81131c48:	0005883a 	mov	r2,zero
81131c4c:	f800283a 	ret
81131c50:	20c00017 	ldw	r3,0(r4)
81131c54:	28800017 	ldw	r2,0(r5)
81131c58:	18bfee1e 	bne	r3,r2,81131c14 <__reset+0xfb111c14>
81131c5c:	31bfff04 	addi	r6,r6,-4
81131c60:	21000104 	addi	r4,r4,4
81131c64:	29400104 	addi	r5,r5,4
81131c68:	39bff936 	bltu	r7,r6,81131c50 <__reset+0xfb111c50>
81131c6c:	303fe91e 	bne	r6,zero,81131c14 <__reset+0xfb111c14>
81131c70:	003ff506 	br	81131c48 <__reset+0xfb111c48>
81131c74:	10c5c83a 	sub	r2,r2,r3
81131c78:	f800283a 	ret

81131c7c <__register_exitproc>:
81131c7c:	defffa04 	addi	sp,sp,-24
81131c80:	dc000315 	stw	r16,12(sp)
81131c84:	042044f4 	movhi	r16,33043
81131c88:	84176304 	addi	r16,r16,23948
81131c8c:	80c00017 	ldw	r3,0(r16)
81131c90:	dc400415 	stw	r17,16(sp)
81131c94:	dfc00515 	stw	ra,20(sp)
81131c98:	18805217 	ldw	r2,328(r3)
81131c9c:	2023883a 	mov	r17,r4
81131ca0:	10003726 	beq	r2,zero,81131d80 <__register_exitproc+0x104>
81131ca4:	10c00117 	ldw	r3,4(r2)
81131ca8:	010007c4 	movi	r4,31
81131cac:	20c00e16 	blt	r4,r3,81131ce8 <__register_exitproc+0x6c>
81131cb0:	1a000044 	addi	r8,r3,1
81131cb4:	8800221e 	bne	r17,zero,81131d40 <__register_exitproc+0xc4>
81131cb8:	18c00084 	addi	r3,r3,2
81131cbc:	18c7883a 	add	r3,r3,r3
81131cc0:	18c7883a 	add	r3,r3,r3
81131cc4:	12000115 	stw	r8,4(r2)
81131cc8:	10c7883a 	add	r3,r2,r3
81131ccc:	19400015 	stw	r5,0(r3)
81131cd0:	0005883a 	mov	r2,zero
81131cd4:	dfc00517 	ldw	ra,20(sp)
81131cd8:	dc400417 	ldw	r17,16(sp)
81131cdc:	dc000317 	ldw	r16,12(sp)
81131ce0:	dec00604 	addi	sp,sp,24
81131ce4:	f800283a 	ret
81131ce8:	00800034 	movhi	r2,0
81131cec:	10800004 	addi	r2,r2,0
81131cf0:	10002626 	beq	r2,zero,81131d8c <__register_exitproc+0x110>
81131cf4:	01006404 	movi	r4,400
81131cf8:	d9400015 	stw	r5,0(sp)
81131cfc:	d9800115 	stw	r6,4(sp)
81131d00:	d9c00215 	stw	r7,8(sp)
81131d04:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffc0>
81131d08:	d9400017 	ldw	r5,0(sp)
81131d0c:	d9800117 	ldw	r6,4(sp)
81131d10:	d9c00217 	ldw	r7,8(sp)
81131d14:	10001d26 	beq	r2,zero,81131d8c <__register_exitproc+0x110>
81131d18:	81000017 	ldw	r4,0(r16)
81131d1c:	10000115 	stw	zero,4(r2)
81131d20:	02000044 	movi	r8,1
81131d24:	22405217 	ldw	r9,328(r4)
81131d28:	0007883a 	mov	r3,zero
81131d2c:	12400015 	stw	r9,0(r2)
81131d30:	20805215 	stw	r2,328(r4)
81131d34:	10006215 	stw	zero,392(r2)
81131d38:	10006315 	stw	zero,396(r2)
81131d3c:	883fde26 	beq	r17,zero,81131cb8 <__reset+0xfb111cb8>
81131d40:	18c9883a 	add	r4,r3,r3
81131d44:	2109883a 	add	r4,r4,r4
81131d48:	1109883a 	add	r4,r2,r4
81131d4c:	21802215 	stw	r6,136(r4)
81131d50:	01800044 	movi	r6,1
81131d54:	12406217 	ldw	r9,392(r2)
81131d58:	30cc983a 	sll	r6,r6,r3
81131d5c:	4992b03a 	or	r9,r9,r6
81131d60:	12406215 	stw	r9,392(r2)
81131d64:	21c04215 	stw	r7,264(r4)
81131d68:	01000084 	movi	r4,2
81131d6c:	893fd21e 	bne	r17,r4,81131cb8 <__reset+0xfb111cb8>
81131d70:	11006317 	ldw	r4,396(r2)
81131d74:	218cb03a 	or	r6,r4,r6
81131d78:	11806315 	stw	r6,396(r2)
81131d7c:	003fce06 	br	81131cb8 <__reset+0xfb111cb8>
81131d80:	18805304 	addi	r2,r3,332
81131d84:	18805215 	stw	r2,328(r3)
81131d88:	003fc606 	br	81131ca4 <__reset+0xfb111ca4>
81131d8c:	00bfffc4 	movi	r2,-1
81131d90:	003fd006 	br	81131cd4 <__reset+0xfb111cd4>

81131d94 <__call_exitprocs>:
81131d94:	defff504 	addi	sp,sp,-44
81131d98:	df000915 	stw	fp,36(sp)
81131d9c:	dd400615 	stw	r21,24(sp)
81131da0:	dc800315 	stw	r18,12(sp)
81131da4:	dfc00a15 	stw	ra,40(sp)
81131da8:	ddc00815 	stw	r23,32(sp)
81131dac:	dd800715 	stw	r22,28(sp)
81131db0:	dd000515 	stw	r20,20(sp)
81131db4:	dcc00415 	stw	r19,16(sp)
81131db8:	dc400215 	stw	r17,8(sp)
81131dbc:	dc000115 	stw	r16,4(sp)
81131dc0:	d9000015 	stw	r4,0(sp)
81131dc4:	2839883a 	mov	fp,r5
81131dc8:	04800044 	movi	r18,1
81131dcc:	057fffc4 	movi	r21,-1
81131dd0:	00a044f4 	movhi	r2,33043
81131dd4:	10976304 	addi	r2,r2,23948
81131dd8:	12000017 	ldw	r8,0(r2)
81131ddc:	45005217 	ldw	r20,328(r8)
81131de0:	44c05204 	addi	r19,r8,328
81131de4:	a0001c26 	beq	r20,zero,81131e58 <__call_exitprocs+0xc4>
81131de8:	a0800117 	ldw	r2,4(r20)
81131dec:	15ffffc4 	addi	r23,r2,-1
81131df0:	b8000d16 	blt	r23,zero,81131e28 <__call_exitprocs+0x94>
81131df4:	14000044 	addi	r16,r2,1
81131df8:	8421883a 	add	r16,r16,r16
81131dfc:	8421883a 	add	r16,r16,r16
81131e00:	84402004 	addi	r17,r16,128
81131e04:	a463883a 	add	r17,r20,r17
81131e08:	a421883a 	add	r16,r20,r16
81131e0c:	e0001e26 	beq	fp,zero,81131e88 <__call_exitprocs+0xf4>
81131e10:	80804017 	ldw	r2,256(r16)
81131e14:	e0801c26 	beq	fp,r2,81131e88 <__call_exitprocs+0xf4>
81131e18:	bdffffc4 	addi	r23,r23,-1
81131e1c:	843fff04 	addi	r16,r16,-4
81131e20:	8c7fff04 	addi	r17,r17,-4
81131e24:	bd7ff91e 	bne	r23,r21,81131e0c <__reset+0xfb111e0c>
81131e28:	00800034 	movhi	r2,0
81131e2c:	10800004 	addi	r2,r2,0
81131e30:	10000926 	beq	r2,zero,81131e58 <__call_exitprocs+0xc4>
81131e34:	a0800117 	ldw	r2,4(r20)
81131e38:	1000301e 	bne	r2,zero,81131efc <__call_exitprocs+0x168>
81131e3c:	a0800017 	ldw	r2,0(r20)
81131e40:	10003226 	beq	r2,zero,81131f0c <__call_exitprocs+0x178>
81131e44:	a009883a 	mov	r4,r20
81131e48:	98800015 	stw	r2,0(r19)
81131e4c:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffc0>
81131e50:	9d000017 	ldw	r20,0(r19)
81131e54:	a03fe41e 	bne	r20,zero,81131de8 <__reset+0xfb111de8>
81131e58:	dfc00a17 	ldw	ra,40(sp)
81131e5c:	df000917 	ldw	fp,36(sp)
81131e60:	ddc00817 	ldw	r23,32(sp)
81131e64:	dd800717 	ldw	r22,28(sp)
81131e68:	dd400617 	ldw	r21,24(sp)
81131e6c:	dd000517 	ldw	r20,20(sp)
81131e70:	dcc00417 	ldw	r19,16(sp)
81131e74:	dc800317 	ldw	r18,12(sp)
81131e78:	dc400217 	ldw	r17,8(sp)
81131e7c:	dc000117 	ldw	r16,4(sp)
81131e80:	dec00b04 	addi	sp,sp,44
81131e84:	f800283a 	ret
81131e88:	a0800117 	ldw	r2,4(r20)
81131e8c:	80c00017 	ldw	r3,0(r16)
81131e90:	10bfffc4 	addi	r2,r2,-1
81131e94:	15c01426 	beq	r2,r23,81131ee8 <__call_exitprocs+0x154>
81131e98:	80000015 	stw	zero,0(r16)
81131e9c:	183fde26 	beq	r3,zero,81131e18 <__reset+0xfb111e18>
81131ea0:	95c8983a 	sll	r4,r18,r23
81131ea4:	a0806217 	ldw	r2,392(r20)
81131ea8:	a5800117 	ldw	r22,4(r20)
81131eac:	2084703a 	and	r2,r4,r2
81131eb0:	10000b26 	beq	r2,zero,81131ee0 <__call_exitprocs+0x14c>
81131eb4:	a0806317 	ldw	r2,396(r20)
81131eb8:	2088703a 	and	r4,r4,r2
81131ebc:	20000c1e 	bne	r4,zero,81131ef0 <__call_exitprocs+0x15c>
81131ec0:	89400017 	ldw	r5,0(r17)
81131ec4:	d9000017 	ldw	r4,0(sp)
81131ec8:	183ee83a 	callr	r3
81131ecc:	a0800117 	ldw	r2,4(r20)
81131ed0:	15bfbf1e 	bne	r2,r22,81131dd0 <__reset+0xfb111dd0>
81131ed4:	98800017 	ldw	r2,0(r19)
81131ed8:	153fcf26 	beq	r2,r20,81131e18 <__reset+0xfb111e18>
81131edc:	003fbc06 	br	81131dd0 <__reset+0xfb111dd0>
81131ee0:	183ee83a 	callr	r3
81131ee4:	003ff906 	br	81131ecc <__reset+0xfb111ecc>
81131ee8:	a5c00115 	stw	r23,4(r20)
81131eec:	003feb06 	br	81131e9c <__reset+0xfb111e9c>
81131ef0:	89000017 	ldw	r4,0(r17)
81131ef4:	183ee83a 	callr	r3
81131ef8:	003ff406 	br	81131ecc <__reset+0xfb111ecc>
81131efc:	a0800017 	ldw	r2,0(r20)
81131f00:	a027883a 	mov	r19,r20
81131f04:	1029883a 	mov	r20,r2
81131f08:	003fb606 	br	81131de4 <__reset+0xfb111de4>
81131f0c:	0005883a 	mov	r2,zero
81131f10:	003ffb06 	br	81131f00 <__reset+0xfb111f00>

81131f14 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
81131f14:	defffd04 	addi	sp,sp,-12
81131f18:	df000215 	stw	fp,8(sp)
81131f1c:	df000204 	addi	fp,sp,8
81131f20:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
81131f24:	d0206945 	stb	zero,-32347(gp)
81131f28:	e0bfff17 	ldw	r2,-4(fp)
81131f2c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
81131f30:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
81131f34:	10000226 	beq	r2,zero,81131f40 <_exit+0x2c>
    ALT_SIM_FAIL();
81131f38:	002af070 	cmpltui	zero,zero,43969
81131f3c:	00000106 	br	81131f44 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
81131f40:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
81131f44:	003fff06 	br	81131f44 <__reset+0xfb111f44>
