
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8110025c

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x0003ff18 memsz 0x00053c48 flags rwx
    LOAD off    0x00041000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00041000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0003ad20  8110025c  8110025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003268  8113af7c  8113af7c  0003bf7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d54  8113e1e4  8113e1e4  0003f1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00013d30  8113ff38  8113ff38  00040f38  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  81153c68  81153c68  00041000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00041000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00041000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001c18  00000000  00000000  00041028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0005a461  00000000  00000000  00042c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000147c2  00000000  00000000  0009d0a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001d1dc  00000000  00000000  000b1863  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00007970  00000000  00000000  000cea40  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000a63c  00000000  00000000  000d63b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00026ce7  00000000  00000000  000e09ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  001076d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002378  00000000  00000000  00107718  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00113789  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0011378f  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0011379b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0011379c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0011379d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  001137a1  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  001137a5  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  001137a9  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000a  00000000  00000000  001137b4  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000a  00000000  00000000  001137be  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  001137c8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  001137d9  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00278448  00000000  00000000  00113818  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
8110025c l    d  .text	00000000 .text
8113af7c l    d  .rodata	00000000 .rodata
8113e1e4 l    d  .rwdata	00000000 .rwdata
8113ff38 l    d  .bss	00000000 .bss
81153c68 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100294 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 comm.c
00000000 l    df *ABS*	00000000 data_packet.c
00000000 l    df *ABS*	00000000 fee_buffers.c
8113ff54 l     O .bss	00000004 viCh1HoldContext
8113ff58 l     O .bss	00000004 viCh2HoldContext
8113ff5c l     O .bss	00000004 viCh3HoldContext
8113ff60 l     O .bss	00000004 viCh4HoldContext
8113ff64 l     O .bss	00000004 viCh5HoldContext
8113ff68 l     O .bss	00000004 viCh6HoldContext
8113ff6c l     O .bss	00000004 viCh7HoldContext
8113ff70 l     O .bss	00000004 viCh8HoldContext
811050d8 l     F .text	00000054 vFeebWriteReg
8110512c l     F .text	00000050 uliFeebReadReg
00000000 l    df *ABS*	00000000 rmap.c
00000000 l    df *ABS*	00000000 spw_controller.c
811056dc l     F .text	00000050 uliSpwcReadReg
81105688 l     F .text	00000054 vSpwcWriteReg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
8113fe64 l     O .rwdata	00000001 ucIoValue
811058dc l     F .text	0000007c bCtrlIoLvdsDrive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
811061cc l     F .text	0000013c msgdma_write_extended_descriptor
81106308 l     F .text	00000164 msgdma_construct_extended_descriptor
8110646c l     F .text	00000318 msgdma_descriptor_async_transfer
81106784 l     F .text	000003fc msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
81107300 l     F .text	00000054 vRstcWriteReg
81107354 l     F .text	00000050 uliRstReadReg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
8113ff78 l     O .bss	00000004 viHoldContext
81108688 l     F .text	00000058 uliSyncReadReg
8110862c l     F .text	0000005c bSyncWriteReg
00000000 l    df *ABS*	00000000 fee_task.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
8113ff7e l     O .bss	00000004 xRAckLocal.4438
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
8113ff82 l     O .bss	00000004 xSAckLocal.4434
00000000 l    df *ABS*	00000000 parser_comm_task.c
811400c8 l     O .bss	0000004c PreParsedLocal.4511
00000000 l    df *ABS*	00000000 receiver_uart_task.c
81140114 l     O .bss	0000004c xPreParsedReader.4502
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 sim_meb_task.c
00000000 l    df *ABS*	00000000 timeout_checker_ack_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 ccd.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
8113c7cb l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 fee.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 meb.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
8113d8c1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8113e1e4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
811124fc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113da8e l     O .rodata	00000010 zeroes.4389
8113da9e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8113daae l     O .rodata	00000010 zeroes.4404
81117130 l     F .text	000000c4 __sbprintf
8113dabe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
8113dad6 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
81118cb8 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8111a808 l     F .text	00000008 __fp_unlock
8111a81c l     F .text	000001a4 __sinit.part.1
8111a9c0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
8113ea30 l     O .rwdata	00000020 lc_ctype_charset
8113ea10 l     O .rwdata	00000020 lc_message_charset
8113ea50 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
8113db14 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8111d830 l     F .text	0000006c sulp
8113dc5c l     O .rodata	00000014 fpi.2737
8113dc70 l     O .rodata	00000028 tinytens
8113dc48 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113dca8 l     O .rodata	00000010 blanks.4332
8113dc98 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
81120ea0 l     F .text	00000104 __sprint_r.part.0
8113dcc8 l     O .rodata	00000010 blanks.4348
8113dcb8 l     O .rodata	00000010 zeroes.4349
8112243c l     F .text	000000c4 __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
811228f0 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
811267ec l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
81126930 l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81126964 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
81126be8 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
81126cd8 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
81126ebc l     F .text	00000044 alt_get_errno
81126f00 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
81127128 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8113fea8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
811276c8 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
8113feb4 l     O .rwdata	00000004 lockid
81140010 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
8113feb8 l     O .rwdata	00000004 lockid
81140018 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
811291cc l     F .text	00000050 OS_InitMisc
8112921c l     F .text	00000074 OS_InitRdyList
811293a0 l     F .text	000000ec OS_InitTCBList
811290e4 l     F .text	000000e8 OS_InitEventList
81129290 l     F .text	00000088 OS_InitTaskIdle
81129318 l     F .text	00000088 OS_InitTaskStat
81129630 l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
8112b448 l     F .text	000000fc OS_FlagTaskRdy
8112b1f8 l     F .text	00000168 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
8112cd34 l     F .text	00000198 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
81131764 l     F .text	00000044 OSTmr_Lock
81131204 l     F .text	00000074 OSTmr_Alloc
811317a8 l     F .text	0000003c OSTmr_Unlock
81131668 l     F .text	000000fc OSTmr_Unlink
81131278 l     F .text	000000a4 OSTmr_Free
81131518 l     F .text	00000150 OSTmr_Link
81131490 l     F .text	00000088 OSTmr_InitTask
811317e4 l     F .text	00000110 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
811318f4 l     F .text	0000003c alt_dev_reg
8113ec30 l     O .rwdata	0000106c jtag_uart_0
8113fc9c l     O .rwdata	000000d0 rs232_uart
8113fd6c l     O .rwdata	00000064 dma_DDR_M1
8113fdd0 l     O .rwdata	00000064 dma_DDR_M2
8113fe34 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81136104 l     F .text	000002ac altera_avalon_jtag_uart_irq
811363b0 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
81136bb4 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81136f48 l     F .text	000000a4 altera_avalon_uart_irq
81136fec l     F .text	00000140 altera_avalon_uart_rxirq
8113712c l     F .text	000001ac altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
81137334 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
811375e8 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8113786c l     F .text	00000044 alt_get_errno
811378b0 l     F .text	0000009c alt_msgdma_write_standard_descriptor
8113794c l     F .text	00000134 alt_msgdma_write_extended_descriptor
81137a80 l     F .text	0000018c alt_msgdma_irq
81137c0c l     F .text	00000094 alt_msgdma_construct_standard_descriptor
81137ca0 l     F .text	0000015c alt_msgdma_construct_extended_descriptor
81137dfc l     F .text	00000340 alt_msgdma_descriptor_async_transfer
8113813c l     F .text	00000408 alt_msgdma_descriptor_sync_transfer
81138844 l     F .text	000000ac alt_msgdma_construct_prefetcher_standard_descriptor
811388f0 l     F .text	0000019c alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
81139abc l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8113a1d0 l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000044 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
811400c0 l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
811400c4 g     O .bss	00000004 alt_instruction_exception_handler
8110dc78 g     F .text	0000004c vFailDeleteInitialization
81140094 g     O .bss	00000004 aux_status_register
81140688 g     O .bss	00002000 vInAckHandlerTask_stk
81139878 g     F .text	00000044 alt_msgdma_standard_descriptor_async_transfer
8110788c g     F .text	0000004c vSyncInitIrq
8111ceb4 g     F .text	0000007c _mprec_log10
81107a08 g     F .text	00000040 bSyncSetMbt
81105ac0 g     F .text	00000108 I2C_Read
8113ff06 g     O .rwdata	00000002 OSTaskNameSize
81142688 g     O .bss	00000118 xBuffer64
8111cfa8 g     F .text	0000008c __any_on
8111b97c g     F .text	0000005c _isatty_r
8113db20 g     O .rodata	00000028 __mprec_tinytens
81126df8 g     F .text	000000c4 alt_main
81112420 g     F .text	000000c8 _puts_r
81104964 g     F .text	00000058 bFeebCh3IrqFlagBufferEmpty
81140020 g     O .bss	00000004 OSTmrFreeList
81153b68 g     O .bss	00000100 alt_irq
8111baec g     F .text	00000068 _lseek_r
8110f304 g     F .text	00000030 vChangeDefaultAutoResetSync
8112bca8 g     F .text	000000d4 OS_MemInit
8110c8d0 g     F .text	0000098c vLoadDefaultETHConf
81130744 g     F .text	00000068 OSTimeSet
8111abc0 g     F .text	000000ac __sflags
8112594c g     F .text	00000088 .hidden __eqdf2
81102a38 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_FULL
8110f17c g     F .text	00000034 vLoadDefaultSyncSource
81131df4 g     F .text	000001ac Check_for_Master_Boot_Record
8114efa4 g     O .bss	00000010 OSTmrWheelTbl
81138604 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_mm_descriptor
81127dac g     F .text	00000618 OSEventPendMulti
81153c68 g       *ABS*	00000000 __alt_heap_start
8113a808 g     F .text	0000002c OSTaskCreateHook
81135c6c g     F .text	000001c4 alt_up_sd_card_fclose
8113ff88 g     O .bss	00000004 xSemCountBuffer64
811123dc g     F .text	00000044 printf
8113ff75 g     O .bss	00000001 SspdConfigControl
81107e24 g     F .text	00000054 bSyncCtrReset
8113fede g     O .rwdata	00000002 OSMboxEn
8110b870 g     F .text	00000398 bSendUART128
8110f978 g     F .text	000000a4 aatoh
81128428 g     F .text	00000054 OSIntEnter
811236bc g     F .text	000000a4 _wcrtomb_r
81104870 g     F .text	00000044 vFeebCh8IrqFlagClrBufferEmpty
8110dbe0 g     F .text	0000004c vFailReceiverCreate
811044d4 g     F .text	00000040 vFeebCh2HandleIrq
81112988 g     F .text	00000064 __sseek
8111ab70 g     F .text	00000010 __sinit
81106c40 g     F .text	00000044 iMsgdmaExtendedDescriptorAsyncTransfer
8112355c g     F .text	00000148 __swbuf_r
8110b2fc g     F .text	000002cc bResourcesInitRTOS
8110534c g     F .text	000000f4 bSpwcGetLinkError
8113feee g     O .rwdata	00000002 OSQEn
8111ba08 g     F .text	00000084 _setlocale_r
8113fe68 g     O .rwdata	00000004 LedsPainelControl
81140188 g     O .bss	00000100 cDebugBuffer
8111a9c8 g     F .text	00000070 __sfmoreglue
81120e88 g     F .text	00000018 ungetc
81127a68 g     F .text	000000d4 __malloc_unlock
81102d28 g     F .text	00000210 DMA_MULTIPLE_TRANSFER
8113a888 g     F .text	00000028 OSTaskStatHook
8110f1ec g     F .text	00000030 vChangeDefaultSyncSource
81140024 g     O .bss	00000001 OSLockNesting
81140028 g     O .bss	00000004 OSTmrSemSignal
8110e764 g     F .text	000000d8 vNFeeStructureInit
8113ff8c g     O .bss	00000004 xSemCommInit
811028bc g     F .text	00000080 uliXorshift32
8111d89c g     F .text	00001600 _strtod_r
8113ff90 g     O .bss	00000004 xSemCountSenderACK
8110fab4 g     F .text	00000448 .hidden __divsf3
811400b8 g     O .bss	00000004 current_sector_modified
8113ff2c g     O .rwdata	00000002 OSDataSize
8114002c g     O .bss	00000001 OSRunning
81105510 g     F .text	00000178 bSpwcInitCh
811427a0 g     O .bss	00002000 senderTask_stk
8113ff94 g     O .bss	00000004 fp
8111be7c g     F .text	0000015c memmove
811447a0 g     O .bss	0000045c xSimMebStruct
8113a904 g     F .text	0000002c OSInitHookBegin
811082c0 g     F .text	00000074 bSyncCtrCh8OutEnable
8113ff24 g     O .rwdata	00000002 OSTmrSize
8111ab58 g     F .text	00000018 _cleanup
8110f5b0 g     F .text	00000040 siCloseFile
8111bfd8 g     F .text	000000b0 _Balloc
8110f290 g     F .text	00000038 vLoadDefaultAutoResetSync
81134848 g     F .text	000000cc alt_up_sd_card_is_Present
81138544 g     F .text	00000060 alt_msgdma_construct_standard_st_to_mm_descriptor
8113ff40 g     O .bss	00000004 pxDmaM1Dev
81102ad0 g     F .text	000000a4 DMA_DISPATCHER_STOP
81131b1c g     F .text	00000054 Save_Modified_Sector
81104ac4 g     F .text	00000058 bFeebCh7IrqFlagBufferEmpty
81140030 g     O .bss	00000004 OSIdleCtr
8110572c g     F .text	0000003c bEnableIsoDrivers
811259d4 g     F .text	000000dc .hidden __gtdf2
8113a598 g     F .text	0000002c altera_nios2_gen2_irq_init
8113a680 g       .text	00000000 OSStartTsk
81107b7c g     F .text	00000070 bSyncSetNCycles
811299a0 g     F .text	000002dc OS_TCBInit
8110ed64 g     F .text	00000068 vInitSimucamBasicHW
81144bfc g     O .bss	00002000 vTimeoutCheckerTask_stk
811081d8 g     F .text	00000074 bSyncCtrCh6OutEnable
81105e3c g     F .text	00000138 i2c_write
86020000 g     F .entry	00000000 __reset
811400b0 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
81140034 g     O .bss	00000002 OSTmrUsed
8113ff98 g     O .bss	00000004 xSemCountBuffer128
81103200 g     F .text	000000f8 TEMP_Read
81104554 g     F .text	00000040 vFeebCh4HandleIrq
8113ff2a g     O .rwdata	00000002 OSTmrWheelTblSize
8110ec34 g     F .text	0000002c cFeeSpwChannelDisable
8113feca g     O .rwdata	00000002 OSEventSize
81140036 g     O .bss	00000001 OSPrioHighRdy
81111578 g     F .text	00000064 _fstat_r
8113a834 g     F .text	0000002c OSTaskDelHook
8113ffd8 g     O .bss	00000004 errno
811085b4 g     F .text	0000003c uliSyncGetCtr
81118a28 g     F .text	0000001c __svfscanf
811128fc g     F .text	00000008 __seofread
8113a660 g       .text	00000000 OSStartHighRdy
8112f174 g     F .text	000001ec OSTaskCreateExt
8110de64 g     F .text	00000068 vFailGetCountSemaphorePreParsedBuffer
8111f9cc g     F .text	00001244 ___svfiprintf_internal_r
8112ad28 g     F .text	00000068 OSFlagPendGetFlagsRdy
8113ff0a g     O .rwdata	00000002 OSTaskStatStkSize
81129e74 g     F .text	00000310 OSFlagAccept
8112d450 g     F .text	000000c0 OSQFlush
8112cecc g     F .text	00000148 OSQAccept
81140000 g     O .bss	00000004 alt_argv
81147e60 g       *ABS*	00000000 _gp
8110d8a8 g     F .text	0000004c vFailSendPreAckReceiverSemaphore
8112758c g     F .text	0000013c usleep
81134e20 g     F .text	00000384 alt_up_sd_card_fopen
8110f41c g     F .text	00000030 bSDcardIsPresent
8110a8b8 g     F .text	00000134 vSenderComTask
81134988 g     F .text	000000d8 alt_up_sd_card_find_first
8112efc0 g     F .text	000001b4 OSTaskCreate
8110e004 g     F .text	00000068 vFailSendNack
811400a4 g     O .bss	00000004 command_argument_register
8112eac8 g     F .text	000004f8 OSTaskChangePrio
8114001c g     O .bss	00000004 alt_heapsem
811060d4 g     F .text	00000080 bSetBoardLeds
81129c7c g     F .text	000001f8 OSDebugInit
8112f360 g     F .text	0000034c OSTaskDel
8112bd7c g     F .text	000001ac OSMutexAccept
8110f21c g     F .text	00000040 vSetTimeCode
811390ec g     F .text	000000dc alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8113ff9c g     O .bss	00000004 xSemCountPreParsed
8113eab0 g     O .rwdata	00000180 alt_fd_list
81104a14 g     F .text	00000058 bFeebCh5IrqFlagBufferEmpty
8114efb4 g     O .bss	00000370 OSFlagTbl
8110da10 g     F .text	00000068 vFailGetCountSemaphoreReceiverTask
8110f0d4 g     F .text	0000003c vLoadDefaultRTValue
81128eac g     F .text	000000c0 OS_EventTaskRemove
8113409c g     F .text	00000134 find_first_empty_record_in_root_directory
81139c7c g     F .text	00000098 alt_find_dev
811120c4 g     F .text	00000150 memcpy
81123228 g     F .text	00000264 __hexnan
81146bfc g     O .bss	00000130 xBuffer32
8113fef4 g     O .rwdata	00000002 OSRdyTblSize
8114f324 g     O .bss	000001a0 OSTmrTbl
8111a810 g     F .text	0000000c _cleanup_r
81126528 g     F .text	000000e4 .hidden __floatsidf
81107978 g     F .text	0000004c ucSyncStatusErrorCode
8110ed30 g     F .text	00000034 cFeeRMAPLogDisable
81109204 g     F .text	00000a48 vParserCommTask
8113a29c g     F .text	00000084 alt_io_redirect
8110ecc4 g     F .text	00000034 cFeeRMAPEchoingDisable
81125ab0 g     F .text	000000f4 .hidden __ltdf2
81104cf4 g     F .text	000000d4 bFeebSetIrqControl
8110e574 g     F .text	00000068 vCouldNotRetransmitB128TimeoutTask
8113ffa0 g     O .bss	00000004 xMutexReceivedACK
81103b7c g     F .text	000000b0 bSdmaInitM2Dma
8113af7c g       *ABS*	00000000 __DTOR_END__
81139574 g     F .text	00000094 alt_msgdma_start_prefetcher_with_extd_desc_list
811398bc g     F .text	00000044 alt_msgdma_extended_descriptor_async_transfer
81107ecc g     F .text	00000054 bSyncCtrErrInj
8113981c g     F .text	0000005c alt_msgdma_register_callback
8110d25c g     F .text	00000330 vShowEthConfig
8110edcc g     F .text	00000030 bLogWriteSDCard
8110dd2c g     F .text	00000068 vFailSetCountSemaphorexBuffer64
81109d64 g     F .text	000000a0 bTrySendSemaphoreCommInit
8110bfa0 g     F .text	00000398 bSendUART32
811124e8 g     F .text	00000014 puts
8113a9ac g     F .text	000000a4 alt_exception_cause_generated_bad_addr
8110784c g     F .text	00000040 vSyncHandleIrq
81127b3c g     F .text	00000128 OSEventNameGet
811046d8 g     F .text	00000044 vFeebCh2IrqFlagClrBufferEmpty
8113fed8 g     O .rwdata	00000002 OSFlagMax
8111bc08 g     F .text	000000e0 mbrtowc
81133c94 g     F .text	000001b4 find_first_empty_cluster
81108164 g     F .text	00000074 bSyncCtrCh5OutEnable
8113ff7c g     O .bss	00000001 vucN
8111d608 g     F .text	00000074 __fpclassifyd
811078d8 g     F .text	00000054 bSyncStatusExtnIrq
81118a44 g     F .text	00000054 _vfscanf_r
8112c3fc g     F .text	000005a4 OSMutexPend
8111ce08 g     F .text	000000ac __ratio
81134784 g     F .text	000000c4 alt_up_sd_card_open_dev
8112847c g     F .text	00000100 OSIntExit
81107a48 g     F .text	00000040 bSyncSetBt
81122420 g     F .text	0000001c __vfiprintf_internal
8113ff12 g     O .rwdata	00000002 OSTCBSize
81104694 g     F .text	00000044 vFeebCh1IrqFlagClrBufferEmpty
81140037 g     O .bss	00000001 OSPrioCur
81136624 g     F .text	000002c4 altera_avalon_jtag_uart_read
81138db4 g     F .text	000000f8 alt_msgdma_prefetcher_add_standard_desc_to_list
811123a4 g     F .text	00000038 _printf_r
811244f0 g     F .text	00000064 .hidden __udivsi3
81126c2c g     F .text	000000ac isatty
8113ff74 g     O .bss	00000001 LedsBoardControl
8113ffa4 g     O .bss	00000004 xSemCountReceivedACK
8113fef8 g     O .rwdata	00000002 OSStkWidth
8111b9d8 g     F .text	00000030 iswspace
8113db70 g     O .rodata	000000c8 __mprec_tens
8113feec g     O .rwdata	00000002 OSPtrSize
8111ba8c g     F .text	0000000c __locale_charset
8110807c g     F .text	00000074 bSyncCtrCh3OutEnable
811246e0 g     F .text	000000c8 .hidden __lesf2
8113fecc g     O .rwdata	00000002 OSEventTblSize
811238bc g     F .text	0000007c .hidden __fixunsdfsi
8113a5c4 g       .text	00000000 OSCtxSw
81105bc8 g     F .text	00000160 I2C_MultipleRead
8113ffe4 g     O .bss	00000004 __malloc_top_pad
81140038 g     O .bss	00000004 OSTCBList
811311c4 g     F .text	00000040 OSTmrSignal
8113fff4 g     O .bss	00000004 alt_fd_list_lock
8111f4f8 g     F .text	0000001c strtoul
8113fe80 g     O .rwdata	00000004 __mb_cur_max
8111babc g     F .text	0000000c _localeconv_r
8111f514 g     F .text	000002e0 _strtoull_r
81107290 g     F .text	00000070 vRstcHoldDeviceReset
8111c3fc g     F .text	00000044 __i2b
8111b320 g     F .text	000004c4 __sfvwrite_r
81132f74 g     F .text	000000c0 get_dir_divider_location
8114f4c4 g     O .bss	00000c30 OSMemTbl
8114003c g     O .bss	00000001 OSTickStepState
81146d2c g     O .bss	00002000 vReceiverUartTask_stk
811126f4 g     F .text	0000005c _sbrk_r
8113ffa8 g     O .bss	00000004 xSemTimeoutChecker
81132c34 g     F .text	000000cc filename_to_upper_case
8113fef0 g     O .rwdata	00000002 OSQMax
811351a4 g     F .text	00000090 alt_up_sd_card_set_attributes
8112c0f8 g     F .text	00000304 OSMutexDel
811500f4 g     O .bss	00000800 OSTaskStatStk
8110f44c g     F .text	00000030 bSDcardFAT16Check
8112b8c4 g     F .text	000000f8 OSMemNameGet
8110d6fc g     F .text	00000060 vFailCreateMutexSResources
81131fa0 g     F .text	00000284 Read_File_Record_At_Offset
8113fed0 g     O .rwdata	00000002 OSFlagEn
8111d034 g     F .text	00000068 _read_r
8113ff16 g     O .rwdata	00000002 OSTimeTickHookEn
8112d918 g     F .text	00000170 OSQPost
8112b544 g     F .text	000000ac OS_FlagUnlink
81102420 g     F .text	0000049c bDdr2MemoryRandomReadTest
8113fe9c g     O .rwdata	00000004 alt_max_fd
8110e320 g     F .text	0000004c vFailTimeoutCheckerTaskCreate
811294e8 g     F .text	00000070 OS_MemCopy
81129558 g     F .text	000000d8 OS_Sched
81133818 g     F .text	0000047c find_file_in_directory
811225cc g     F .text	000000f8 _fclose_r
8112b7cc g     F .text	000000f8 OSMemGet
8112f9a4 g     F .text	000001bc OSTaskNameSet
8111a7d8 g     F .text	00000030 fflush
8113ffe0 g     O .bss	00000004 __malloc_max_sbrked_mem
81140040 g     O .bss	00000004 OSCtxSwCtr
8113a8b0 g     F .text	00000054 OSTimeTickHook
81148d2c g     O .bss	00002000 vOutAckHandlerTask_stk
81126a60 g     F .text	00000188 alt_irq_register
8113feda g     O .rwdata	00000002 OSFlagNameSize
81110c44 g     F .text	00000118 .hidden __extendsfdf2
81128f6c g     F .text	00000108 OS_EventTaskRemoveMulti
81134914 g     F .text	00000074 alt_up_sd_card_is_FAT16
81105958 g     F .text	00000088 I2C_TestAdress
811247a8 g     F .text	000008b4 .hidden __adddf3
811245ac g     F .text	00000078 .hidden __nesf2
81128d54 g     F .text	00000158 OS_EventTaskWaitMulti
8111cba0 g     F .text	00000114 __b2d
81138aec g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8113fef2 g     O .rwdata	00000002 OSQSize
81123eb8 g     F .text	00000540 .hidden __umoddi3
81126d1c g     F .text	000000dc lseek
8112e408 g     F .text	00000214 OSSemPend
81105440 g     F .text	000000d0 bSpwcGetLinkStatus
81104fa4 g     F .text	00000088 bFeebGetWindowing
8113fe70 g     O .rwdata	00000004 _global_impure_ptr
81107800 g     F .text	0000004c bSSDisplayUpdate
811332d8 g     F .text	00000540 get_home_directory_cluster_for_file
8111d09c g     F .text	0000056c _realloc_r
8113fedc g     O .rwdata	00000002 OSLowestPrio
81153c68 g       *ABS*	00000000 __bss_end
8113a0d8 g     F .text	000000f8 alt_iic_isr_register
8113a980 g     F .text	0000002c OSTCBInitHook
8113ff22 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
8112747c g     F .text	00000110 alt_tick
8110d9a8 g     F .text	00000068 vFailGetMutexSenderTask
811071b0 g     F .text	0000006c vRstcSimucamReset
8113dcd8 g     O .rodata	00000100 __hexdig
81139668 g     F .text	000001b4 alt_msgdma_init
81123938 g     F .text	00000580 .hidden __udivdi3
8110a568 g     F .text	000001a8 setPreAckSenderFreePos
81122844 g     F .text	00000024 _fputwc_r
8113fec4 g     O .rwdata	00000002 OSEventEn
8113db48 g     O .rodata	00000028 __mprec_bigtens
8111c1d8 g     F .text	0000010c __s2b
8113ff1e g     O .rwdata	00000002 OSTmrCfgNameSize
81107b08 g     F .text	00000074 bSyncSetPolarity
8112660c g     F .text	000000b0 .hidden __floatunsidf
8110ddfc g     F .text	00000068 vFailFoundBufferRetransmission
8111c8d8 g     F .text	00000060 __mcmp
811400bc g     O .bss	00000004 current_sector_index
81136de0 g     F .text	00000168 altera_avalon_uart_init
81139944 g     F .text	00000044 alt_msgdma_extended_descriptor_sync_transfer
8110405c g     F .text	00000438 bSdmaDmaM2Transfer
8110f25c g     F .text	00000034 vResetTimeCode
8110ec08 g     F .text	0000002c cFeeSpwChannelEnable
8111ab90 g     F .text	00000018 __fp_lock_all
8113a084 g     F .text	00000054 alt_ic_irq_enabled
811059e0 g     F .text	000000e0 I2C_Write
81140044 g     O .bss	00000002 OSTmrFree
8112b360 g     F .text	000000e8 OS_FlagInit
811273d8 g     F .text	000000a4 alt_alarm_stop
81112d18 g     F .text	0000001c strtol
81130970 g     F .text	00000140 OSTmrDel
81131d0c g     F .text	000000e8 mark_cluster
8113ff00 g     O .rwdata	00000002 OSTaskIdleStkSize
8113fff8 g     O .bss	00000004 alt_irq_active
8112e028 g     F .text	000000b8 OSSemAccept
81111110 g     F .text	0000044c _fseeko_r
8112bad8 g     F .text	000000e0 OSMemPut
8112b5f0 g     F .text	000001dc OSMemCreate
81140048 g     O .bss	00000004 OSIdleCtrMax
81100104 g     F .exceptions	000000dc alt_irq_handler
8113ea88 g     O .rwdata	00000028 alt_dev_null
811386fc g     F .text	00000098 alt_msgdma_construct_extended_mm_to_st_descriptor
81107ac8 g     F .text	00000040 bSyncSetOst
8113ff14 g     O .rwdata	00000002 OSTicksPerSec
811341d0 g     F .text	00000194 convert_filename_to_name_extension
8110a9ec g     F .text	00000030 vSimMebTask
81105d28 g     F .text	00000094 i2c_start
8113a5c4 g       .text	00000000 OSIntCtxSw
811080f0 g     F .text	00000074 bSyncCtrCh4OutEnable
811394e0 g     F .text	00000094 alt_msgdma_start_prefetcher_with_std_desc_list
81126908 g     F .text	00000028 alt_dcache_flush_all
8111c2e4 g     F .text	00000068 __hi0bits
8110f110 g     F .text	0000003c vChangeRTValue
81140090 g     O .bss	00000004 is_sd_card_formated_as_FAT16
8110e714 g     F .text	00000050 vNFeeNotInUse
811264a8 g     F .text	00000080 .hidden __fixdfsi
8114ad2c g     O .bss	00002000 vInitialTask_stk
8113ffac g     O .bss	00000002 usiIdCMD
81107dd0 g     F .text	00000054 bSyncCtrStart
81133e48 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
81109ff4 g     F .text	00000410 bPreParser
8111ee9c g     F .text	00000018 strtod
8114004c g     O .bss	00000004 OSTCBFreeList
8112e61c g     F .text	00000174 OSSemPendAbort
8110db48 g     F .text	0000004c vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8110e288 g     F .text	0000004c vFailCreateTimerRetransmisison
8110ee94 g     F .text	0000019c vSimucamStructureInit
8113fe94 g     O .rwdata	00000008 alt_dev_list
8112770c g     F .text	00000100 write
8113ab20 g     F .text	000000a8 _putc_r
811400b4 g     O .bss	00000004 device_pointer
8113ff18 g     O .rwdata	00000002 OSVersionNbr
81124624 g     F .text	000000bc .hidden __gtsf2
81109c4c g     F .text	00000118 getPreParsedPacket
811269a8 g     F .text	000000b8 fstat
8110f368 g     F .text	00000040 vChangeIdNFEEMaster
811110c4 g     F .text	0000002c fprintf
8110ecf8 g     F .text	00000038 cFeeRMAPLogEnable
81102c18 g     F .text	00000110 DMA_SINGLE_TRANSFER
81104a6c g     F .text	00000058 bFeebCh6IrqFlagBufferEmpty
8110e3d4 g     F .text	00000068 vFailPostBlockingSemTimeoutTask
8110f658 g     F .text	00000058 _reg_write
8110f3a8 g     F .text	00000034 vChangeDefaultIdNFEEMaster
81125ab0 g     F .text	000000f4 .hidden __ledf2
8110e6ac g     F .text	00000068 vCouldNotSendLog
81130bf0 g     F .text	000001b8 OSTmrRemainGet
8113fec0 g     O .rwdata	00000004 OSEndiannessTest
811073a4 g     F .text	00000058 v_spi_start
8111c640 g     F .text	00000148 __pow5mult
81120fbc g     F .text	00001464 ___vfiprintf_internal_r
8113fff0 g     O .bss	00000004 __nlocale_changed
81124554 g     F .text	00000058 .hidden __umodsi3
81107f20 g     F .text	00000074 bSyncCtrSyncOutEnable
8110f47c g     F .text	000000f8 bInitializeSDCard
8110e1a4 g     F .text	0000004c vFailParserCommTaskCreate
81112794 g     F .text	00000038 _scanf_r
8110e23c g     F .text	0000004c vFailOutAckHandlerTaskCreate
8113fed2 g     O .rwdata	00000002 OSFlagGrpSize
81138b4c g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81130da8 g     F .text	000000ec OSTmrStateGet
81153c68 g       *ABS*	00000000 end
811045d4 g     F .text	00000040 vFeebCh6HandleIrq
8110df34 g     F .text	00000068 vNoContentInPreParsedBuffer
8111155c g     F .text	0000001c fseeko
81110f74 g     F .text	0000000c _atoi_r
8113762c g     F .text	00000240 altera_avalon_uart_write
811110f4 g     F .text	0000001c fseek
8110b7e0 g     F .text	00000090 vCCDChangeValues
81135fb4 g     F .text	00000150 altera_avalon_jtag_uart_init
811297e8 g     F .text	000000e4 OS_TaskStat
811001e0 g     F .exceptions	0000007c alt_instruction_exception_entry
8110d7a8 g     F .text	0000004c vFailTestCriticasParts
8113af7c g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81101fb0 g     F .text	00000470 bDdr2MemoryRandomWriteTest
81136c34 g     F .text	00000084 alt_avalon_timer_sc_init
81104efc g     F .text	000000a8 bFeebSetWindowing
81136d20 g     F .text	00000068 altera_avalon_uart_write_fd
81110f04 g     F .text	00000064 .hidden __clzsi2
81136d88 g     F .text	00000058 altera_avalon_uart_close_fd
811368e8 g     F .text	000002cc altera_avalon_jtag_uart_write
8113131c g     F .text	00000174 OSTmr_Init
8114cd2c g     O .bss	0000010c xBuffer128
8111ab80 g     F .text	00000004 __sfp_lock_acquire
811032f8 g     F .text	00000048 sense_log_temp
8111bd98 g     F .text	000000e4 memchr
8112948c g     F .text	0000005c OS_MemClr
81114f14 g     F .text	00002200 ___vfprintf_internal_r
8113a6a4 g     F .text	00000164 OSTaskStkInit
811127cc g     F .text	00000060 _sprintf_r
8111b008 g     F .text	00000318 _free_r
8113a320 g     F .text	00000234 alt_printf
8110c880 g     F .text	00000050 vTimeoutCheck
8110f708 g     F .text	000001fc _print_codec_status
8111ba98 g     F .text	00000010 __locale_mb_cur_max
81128a9c g     F .text	000001a0 OS_EventTaskRdy
81102b74 g     F .text	000000a4 DMA_DISPATCHER_RESET
8113adb8 g     F .text	00000188 __call_exitprocs
81140050 g     O .bss	00000001 OSCPUUsage
8113ffec g     O .bss	00000004 __mlocale_changed
81107e78 g     F .text	00000054 bSyncCtrOneShot
8113fe78 g     O .rwdata	00000004 __malloc_sbrk_base
8110025c g     F .text	0000003c _start
811085f0 g     F .text	0000003c uliSyncReadStatus
81140008 g     O .bss	00000004 _alt_tick_rate
8112d510 g     F .text	00000294 OSQPend
8111efbc g     F .text	000002e8 _strtoll_r
81130294 g     F .text	0000010c OSTimeDly
8111c788 g     F .text	00000150 __lshift
81108f44 g     F .text	000002c0 vOutAckHandlerTask
811385a4 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_st_descriptor
8114000c g     O .bss	00000004 _alt_nticks
8112716c g     F .text	00000104 read
81131970 g     F .text	000000f0 alt_sys_init
81110300 g     F .text	0000012c .hidden __floatsisf
8111f7f4 g     F .text	000001d8 __ssprint_r
8111233c g     F .text	00000068 _open_r
8110f630 g     F .text	00000028 bTestSimucamCriticalHW
8110502c g     F .text	000000ac bFeebGetBuffersStatus
8110d58c g     F .text	000000a4 ucCrc8
811007ac g     F .text	00000cb4 bDdr2EepromDump
8113ac98 g     F .text	00000120 __register_exitproc
81140051 g     O .bss	00000001 OSTaskCtr
8110c830 g     F .text	00000050 siPosStr
8112348c g     F .text	000000d0 strncmp
811303a0 g     F .text	00000164 OSTimeDlyHMSM
8111c440 g     F .text	00000200 __multiply
811364bc g     F .text	00000070 altera_avalon_jtag_uart_close
81107574 g     F .text	00000058 v_spi_end
8110f5f0 g     F .text	00000040 cGetNextChar
81140160 g     O .bss	00000028 __malloc_current_mallinfo
8113fec6 g     O .rwdata	00000002 OSEventMax
811245ac g     F .text	00000078 .hidden __eqsf2
8111ccb4 g     F .text	00000154 __d2b
8112e790 g     F .text	00000118 OSSemPost
81104760 g     F .text	00000044 vFeebCh4IrqFlagClrBufferEmpty
8110f14c g     F .text	00000030 vChangeDefaultRTValue
81104654 g     F .text	00000040 vFeebCh8HandleIrq
8114008c g     O .bss	00000004 initialized
8110c6e0 g     F .text	00000100 vSendLog
81128610 g     F .text	000000e4 OSSchedUnlock
811075cc g     F .text	00000164 RTCC_SPI_R_MAC
81135e30 g     F .text	00000068 altera_avalon_jtag_uart_read_fd
8111f2a4 g     F .text	00000254 _strtoul_r
81139e24 g     F .text	000000e4 alt_get_fd
81140054 g     O .bss	00000004 OSMemFreeList
8112876c g     F .text	000000b8 OSStatInit
8110293c g     F .text	00000064 DMA_OPEN_DEVICE
81153600 g     O .bss	00000014 search_data
8110517c g     F .text	00000100 bSpwcSetLink
811266bc g     F .text	00000130 alt_busy_sleep
8112b12c g     F .text	000000cc OSFlagQuery
81107f94 g     F .text	00000074 bSyncCtrCh1OutEnable
8113fefc g     O .rwdata	00000002 OSTaskCreateExtEn
8110f904 g     F .text	00000074 _split_codec_status
81118c5c g     F .text	0000005c _close_r
8110df9c g     F .text	00000068 vCouldNotSendEthConfUART
81108c24 g     F .text	00000320 vInitialTask
81138a8c g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8113aaa4 g     F .text	0000007c memcmp
81128a74 g     F .text	00000028 OS_Dummy
81135f00 g     F .text	00000058 altera_avalon_jtag_uart_close_fd
81153c68 g       *ABS*	00000000 __alt_stack_base
81135f58 g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
811047a4 g     F .text	00000044 vFeebCh5IrqFlagClrBufferEmpty
811115dc g     F .text	000000d4 _fwrite_r
81138bac g     F .text	000000a8 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
811048b4 g     F .text	00000058 bFeebCh1IrqFlagBufferEmpty
81118b00 g     F .text	0000015c __swsetup_r
811508f4 g     O .bss	000001e0 OSQTbl
8110aa1c g     F .text	000008e0 vTimeoutCheckerTask
8114ef88 g     O .bss	0000001c xConfEth
8112505c g     F .text	000008f0 .hidden __divdf3
8110f1b0 g     F .text	0000003c vChangeSyncSource
8111aa38 g     F .text	00000120 __sfp
81153614 g     O .bss	00000054 boot_sector_data
81102a84 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_EMPTY
8111cf30 g     F .text	00000078 __copybits
8113e608 g     O .rwdata	00000408 __malloc_av_
8111ab8c g     F .text	00000004 __sinit_lock_release
8113ff38 g     O .bss	00000004 uliInitialState
81105dbc g     F .text	00000080 i2c_stop
8110fa1c g     F .text	00000064 Verif_Error
8110fa80 g     F .text	00000034 toInt
8110d8f4 g     F .text	0000004c vFailSendPreAckSenderSemaphore
81140058 g     O .bss	00000004 OSTCBHighRdy
81110524 g     F .text	00000720 .hidden __muldf3
811128a0 g     F .text	0000005c __sread
8111aea0 g     F .text	0000003c fread
8114005c g     O .bss	00000004 OSQFreeList
81139d14 g     F .text	00000110 alt_find_file
81139b00 g     F .text	000000ac alt_dev_llist_insert
81127940 g     F .text	00000128 __malloc_lock
81111094 g     F .text	00000030 _fprintf_r
811272dc g     F .text	000000fc sbrk
8110eb84 g     F .text	0000002c vFeeSpwRMAPLoadDefault
81112d34 g     F .text	000021e0 ___svfprintf_internal_r
81127c64 g     F .text	00000148 OSEventNameSet
8111a774 g     F .text	00000064 _fflush_r
81122500 g     F .text	000000cc _calloc_r
81140060 g     O .bss	00000001 OSRdyGrp
811079c4 g     F .text	00000044 ucSyncStatusCycleNumber
81130e94 g     F .text	00000148 OSTmrStart
81104594 g     F .text	00000040 vFeebCh5HandleIrq
8111107c g     F .text	00000018 fopen
811029a0 g     F .text	0000004c DMA_CONFIG
8113ff38 g       *ABS*	00000000 __bss_start
81112214 g     F .text	00000128 memset
8110a404 g     F .text	00000164 setPreParsedFreePos
81139608 g     F .text	00000060 alt_msgdma_open
81108710 g     F .text	00000514 vInAckHandlerTask
8110b5f8 g     F .text	00000180 main
8110da78 g     F .text	00000068 vFailGetMutexReceiverTask
8110f068 g     F .text	0000003c vChangeEPValue
81140004 g     O .bss	00000004 alt_envp
8113ffdc g     O .bss	00000004 __malloc_max_total_mem
81138eac g     F .text	000001a0 alt_msgdma_prefetcher_add_extended_desc_to_list
8110d630 g     F .text	0000005c ucCrc8wInit
8110e2d4 g     F .text	0000004c vCouldNotCheckBufferTimeOutFunction
81135e98 g     F .text	00000068 altera_avalon_jtag_uart_write_fd
81102f38 g     F .text	000002c8 POWER_Read
81105f74 g     F .text	00000160 i2c_read
811236a4 g     F .text	00000018 __swbuf
8113de08 g     O .rodata	00000100 OSUnMapTbl
811246e0 g     F .text	000000c8 .hidden __ltsf2
81135234 g     F .text	00000090 alt_up_sd_card_get_attributes
8111ac6c g     F .text	00000234 _fread_r
8110d940 g     F .text	00000068 vFailGetCountSemaphoreSenderTask
81105768 g     F .text	0000003c bDisableIsoDrivers
8113fef6 g     O .rwdata	00000002 OSSemEn
81131a60 g     F .text	000000bc Write_Sector_Data
81135644 g     F .text	00000628 alt_up_sd_card_write
8112ad90 g     F .text	0000039c OSFlagPost
811129ec g     F .text	00000008 __sclose
8110e5dc g     F .text	00000068 vFailStartTimerRetransmission
811fa000 g       *ABS*	00000000 __alt_heap_limit
811226c4 g     F .text	00000014 fclose
81128c3c g     F .text	00000118 OS_EventTaskWait
8110e4a4 g     F .text	00000068 vCouldNotRetransmitB32TimeoutTask
81112ad8 g     F .text	00000240 _strtol_r
81110d5c g     F .text	000001a8 .hidden __truncdfsf2
811298cc g     F .text	000000d4 OS_TaskStatStkChk
8112f6ac g     F .text	00000158 OSTaskDelReq
81118ec0 g     F .text	00001690 _dtoa_r
811391c8 g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
811118b0 g     F .text	00000814 _malloc_r
81123828 g     F .text	00000030 __ascii_wctomb
8112bf28 g     F .text	000001d0 OSMutexCreate
8110e43c g     F .text	00000068 vFailCouldNotRetransmitTimeoutTask
8113fea0 g     O .rwdata	00000004 alt_errno
81138cf4 g     F .text	000000c0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
811286f4 g     F .text	00000078 OSStart
8110527c g     F .text	000000d0 bSpwcGetLink
81106cc8 g     F .text	000004e8 POWER_SPI_RW
81120c10 g     F .text	000000dc __submore
811278d8 g     F .text	00000068 __env_unlock
8111b7e4 g     F .text	000000cc _fwalk
8112fb60 g     F .text	000001dc OSTaskResume
8112bbb8 g     F .text	000000f0 OSMemQuery
8113ff08 g     O .rwdata	00000002 OSTaskStatEn
81153c68 g       *ABS*	00000000 __alt_stack_limit
8113ff50 g     O .bss	00000004 ECommSpwCh
8110f2c8 g     F .text	0000003c vChangeAutoResetSync
8111bd34 g     F .text	00000064 _mbtowc_r
8113fee2 g     O .rwdata	00000002 OSMemMax
8112da88 g     F .text	00000178 OSQPostFront
8113abc8 g     F .text	000000d0 putc
811243f8 g     F .text	00000084 .hidden __divsi3
81140061 g     O .bss	00000006 OSRdyTbl
8113febc g     O .rwdata	00000002 OSDebugEn
8111aedc g     F .text	0000012c _malloc_trim_r
8113af7c g       *ABS*	00000000 __CTOR_END__
8113ffd0 g     O .bss	00000008 xSdHandle
8110fefc g     F .text	00000404 .hidden __mulsf3
8113fed4 g     O .rwdata	00000002 OSFlagNodeSize
8113ff3c g     O .bss	00000004 pnt_memory
8110f3dc g     F .text	00000040 vSyncReset
81107a88 g     F .text	00000040 bSyncSetPer
81100298 g     F .text	00000514 bDdr2EepromTest
81140098 g     O .bss	00000004 status_register
8113ff1c g     O .rwdata	00000002 OSTmrCfgMax
8110841c g     F .text	00000074 bSyncIrqFlagClrError
8110e06c g     F .text	00000068 vFailSetPreAckSenderBuffer
8111d754 g     F .text	000000dc strcmp
811400a0 g     O .bss	00000004 command_register
8112d014 g     F .text	000001b4 OSQCreate
8112f804 g     F .text	000001a0 OSTaskNameGet
8114ce38 g     O .bss	00000010 xReceivedACK
8112dc00 g     F .text	00000214 OSQPostOpt
81128824 g     F .text	00000228 OSTimeTick
8113ff04 g     O .rwdata	00000002 OSTaskMax
8113af7c g       *ABS*	00000000 __DTOR_LIST__
8112e0e0 g     F .text	000000e0 OSSemCreate
8113ff28 g     O .rwdata	00000002 OSTmrWheelSize
8110f6b0 g     F .text	00000058 _reg_read
8112cbc0 g     F .text	00000174 OSMutexQuery
8112594c g     F .text	00000088 .hidden __nedf2
8113fefe g     O .rwdata	00000002 OSTaskDelEn
8110f030 g     F .text	00000038 vLoadDefaultEPValue
8110824c g     F .text	00000074 bSyncCtrCh7OutEnable
8112e8a8 g     F .text	00000118 OSSemQuery
8112d1c8 g     F .text	00000288 OSQDel
8112d7a4 g     F .text	00000174 OSQPendAbort
8113ffb0 g     O .bss	00000004 xMutexPreParsed
81131930 g     F .text	00000040 alt_irq_init
8110bc08 g     F .text	00000398 bSendUART64
81127270 g     F .text	0000006c alt_release_fd
81131c50 g     F .text	000000bc get_cluster_flag
81108490 g     F .text	00000074 bSyncIrqFlagClrBlank
81139900 g     F .text	00000044 alt_msgdma_standard_descriptor_sync_transfer
8111282c g     F .text	00000074 sprintf
8113d6c0 g     O .rodata	00000100 .hidden __clz_tab
81132224 g     F .text	00000294 Write_File_Record_At_Offset
81101520 g     F .text	00000580 bDdr2MemoryWriteTest
8110dae0 g     F .text	00000068 vFailGetMutexTxUARTSenderTask
8113ffe8 g     O .bss	00000004 _PathLocale
8110855c g     F .text	00000058 bSyncIrqFlagBlank
81106b80 g     F .text	000000c0 iMsgdmaConstructExtendedMmToMmDescriptor
81130fdc g     F .text	000001e8 OSTmrStop
8110c7e0 g     F .text	00000050 usiGetIdCMD
8111eeb4 g     F .text	00000108 strtof
8113aa50 g     F .text	00000014 atexit
81104514 g     F .text	00000040 vFeebCh3HandleIrq
81124624 g     F .text	000000bc .hidden __gesf2
811129f4 g     F .text	0000004c strcspn
81118a98 g     F .text	00000068 _write_r
8110721c g     F .text	00000074 vRstcReleaseDeviceReset
8110e1f0 g     F .text	0000004c vFailInAckHandlerTaskCreate
8112857c g     F .text	00000094 OSSchedLock
8111bac8 g     F .text	00000018 setlocale
81138c54 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
81150ad4 g     O .bss	00000800 OSTmrTaskStk
81112750 g     F .text	00000044 scanf
8112a184 g     F .text	00000110 OSFlagCreate
811324b8 g     F .text	00000688 Check_for_DOS_FAT
81134364 g     F .text	000002d0 create_file
8111d74c g     F .text	00000008 nanf
8113fe74 g     O .rwdata	00000004 _impure_ptr
8114009c g     O .bss	00000004 CSD_register_w0
8113fffc g     O .bss	00000004 alt_argc
8111a550 g     F .text	00000224 __sflush_r
8111bb54 g     F .text	000000b4 _mbrtowc_r
81139c14 g     F .text	00000068 _do_dtors
8111bab4 g     F .text	00000008 __locale_cjk_lang
81103340 g     F .text	0000078c sense_log
8113ff48 g     O .bss	00000004 ESdmaBufferSide
8113fece g     O .rwdata	00000002 OSEventMultiEn
811110f0 g     F .text	00000004 _fseek_r
8114ce48 g     O .bss	00002000 vParserCommTask_stk
8110d68c g     F .text	00000070 printErrorTask
8110f0a4 g     F .text	00000030 vChangeDefaultEPValue
811307ac g     F .text	000001c4 OSTmrCreate
81112518 g     F .text	000001dc __srefill_r
811057a4 g     F .text	0000003c bEnableLvdsBoard
8113ffb4 g     O .bss	00000004 xMutexBuffer32
8112a294 g     F .text	00000250 OSFlagDel
81140068 g     O .bss	00000004 OSEventFreeList
8110581c g     F .text	000000c0 bSetPreEmphasys
81100020 g       .exceptions	00000000 alt_irq_entry
8111bce8 g     F .text	0000004c __ascii_mbtowc
81107d58 g     F .text	00000078 bSyncCtrExtnIrq
8111cb3c g     F .text	00000064 __ulp
8112a768 g     F .text	000005c0 OSFlagPend
8113ff1a g     O .rwdata	00000002 OSTmrEn
8111aba8 g     F .text	00000018 __fp_unlock_all
8110a710 g     F .text	000001a8 setPreAckReceiverFreePos
81107d18 g     F .text	00000040 bSyncErrInj
8113fe8c g     O .rwdata	00000008 alt_fs_list
81132d00 g     F .text	00000274 check_file_name_for_FAT16_compliance
81130ab0 g     F .text	00000140 OSTmrNameGet
81140288 g     O .bss	00000400 xSZData
811296ac g     F .text	0000007c OS_StrCopy
811400a8 g     O .bss	00000004 buffer_memory
8110decc g     F .text	00000068 vFailGetxMutexPreParsedParserRxTask
8110edfc g     F .text	00000098 vLogWriteNUC
8113fee4 g     O .rwdata	00000002 OSMemNameSize
81103acc g     F .text	000000b0 bSdmaInitM1Dma
811083a8 g     F .text	00000074 bSyncIrqEnableBlank
8113a930 g     F .text	00000028 OSInitHookEnd
8110e83c g     F .text	00000348 vUpdateMemMapFEE
8110e13c g     F .text	00000068 vFailSetPreAckReceiverBuffer
81104b1c g     F .text	00000058 bFeebCh8IrqFlagBufferEmpty
8113ff10 g     O .rwdata	00000002 OSTCBPrioTblMax
8111bae0 g     F .text	0000000c localeconv
8113ffb8 g     O .bss	00000004 xTimerRetransmission
81109e04 g     F .text	000001f0 vReceiverUartTask
8113ff0c g     O .rwdata	00000002 OSTaskStatStkChkEn
8113ffbc g     O .bss	00000004 xMutexBuffer128
81104494 g     F .text	00000040 vFeebCh1HandleIrq
81104614 g     F .text	00000040 vFeebCh7HandleIrq
81139f08 g     F .text	00000058 alt_ic_isr_register
8113fee0 g     O .rwdata	00000002 OSMemEn
8113fe60 g     O .rwdata	00000004 alt_stack_limit_value
811116b0 g     F .text	0000003c fwrite
811400ac g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
8113feea g     O .rwdata	00000002 OSMutexEn
8113ff38 g       *ABS*	00000000 _edata
81136cb8 g     F .text	00000068 altera_avalon_uart_read_fd
8110f334 g     F .text	00000034 vLoadDefaultIdNFEEMaster
81153c68 g       *ABS*	00000000 _end
81153668 g     O .bss	00000500 active_files
8114006c g     O .bss	00000001 OSIntNesting
8110db94 g     F .text	0000004c vFailInitialization
81101460 g     F .text	000000c0 bDdr2SwitchMemory
8110ec60 g     F .text	0000002c cFeeRMAPDump
8113ffc0 g     O .bss	00000004 xSemCountBuffer32
811226d8 g     F .text	0000016c __fputwc
8110ebb0 g     F .text	0000002c vFeeSpwRMAPChangeConfig
811189b8 g     F .text	00000070 vfscanf
81134634 g     F .text	00000150 copy_file_record_name_to_string
8113652c g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
81130504 g     F .text	000001dc OSTimeDlyResume
81132b40 g     F .text	000000f4 Look_for_FAT16
8112a614 g     F .text	00000154 OSFlagNameSet
8113ffc4 g     O .bss	00000004 xMutexBuffer64
8112fd3c g     F .text	000001c8 OSTaskStkChk
81139ff0 g     F .text	00000094 alt_ic_irq_disable
81103c2c g     F .text	00000430 bSdmaDmaM1Transfer
8113fee6 g     O .rwdata	00000002 OSMemSize
8110dcc4 g     F .text	00000068 vFailSetCountSemaphorexBuffer32
81112904 g     F .text	00000084 __swrite
8113fe7c g     O .rwdata	00000004 __malloc_trim_threshold
8111baa8 g     F .text	0000000c __locale_msgcharset
81140070 g     O .bss	00000004 OSTCBCur
8110e50c g     F .text	00000068 vCouldNotRetransmitB64TimeoutTask
81106c84 g     F .text	00000044 iMsgdmaExtendedDescriptorSyncTransfer
8113aa64 g     F .text	00000040 exit
8112c9a0 g     F .text	00000220 OSMutexPost
81108504 g     F .text	00000058 bSyncIrqFlagError
81134a60 g     F .text	000003c0 alt_up_sd_card_find_next
8113fee8 g     O .rwdata	00000002 OSMemTblSize
8111b8b0 g     F .text	000000cc _fwalk_reent
8113904c g     F .text	000000a0 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8111042c g     F .text	000000f8 .hidden __floatunsisf
8111c938 g     F .text	00000204 __mdiff
81104b74 g     F .text	00000180 vFeebInitIrq
8110dc2c g     F .text	0000004c vFailSenderCreate
8112447c g     F .text	00000074 .hidden __modsi3
81107c64 g     F .text	0000003c uliSyncGetPer
8113ffc8 g     O .bss	00000004 xMutexSenderACK
8110e36c g     F .text	00000068 vFailGetBlockingSemTimeoutTask
8113fe6c g     O .rwdata	00000004 __ctype_ptr__
8110e0d4 g     F .text	00000068 vFailSetPreParsedBuffer
81131b70 g     F .text	000000e0 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
8111ab84 g     F .text	00000004 __sfp_lock_release
81104dc8 g     F .text	000000ac bFeebGetIrqControl
8110e644 g     F .text	00000068 vCouldNotSendTurnOff
811283c4 g     F .text	00000064 OSInit
81106154 g     F .text	00000078 bSetPainelLeds
81138794 g     F .text	000000b0 alt_msgdma_construct_extended_mm_to_mm_descriptor
81140074 g     O .bss	00000004 OSTmrTime
81101aa0 g     F .text	00000510 bDdr2MemoryReadTest
811300f0 g     F .text	0000012c OSTaskQuery
81108334 g     F .text	00000074 bSyncIrqEnableError
8112df78 g     F .text	000000b0 OS_QInit
8111d67c g     F .text	000000d0 __sccl
81110f68 g     F .text	0000000c atoi
811086e0 g     F .text	00000030 vFeeTask
81129728 g     F .text	0000005c OS_StrLen
8110490c g     F .text	00000058 bFeebCh2IrqFlagBufferEmpty
8112b9bc g     F .text	0000011c OSMemNameSet
8113d7c0 g     O .rodata	00000101 _ctype_
81107c28 g     F .text	0000003c uliSyncGetBt
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8110dd94 g     F .text	00000068 vFailSetCountSemaphorexBuffer128
8113ff02 g     O .rwdata	00000002 OSTaskProfileEn
81138664 g     F .text	00000098 alt_msgdma_construct_extended_st_to_mm_descriptor
8113ffcc g     O .bss	00000004 xTxUARTMutex
81140078 g     O .bss	00000004 OSTime
8113fe84 g     O .rwdata	00000004 __mbtowc
811372d8 g     F .text	0000005c altera_avalon_uart_close
8114007c g     O .bss	00000004 OSTmrSem
811512d4 g     O .bss	00000800 OSTaskIdleStk
81110f80 g     F .text	000000fc _fopen_r
8113af40 g     F .text	0000003c _exit
81139988 g     F .text	00000134 alt_alarm_start
8112a4e4 g     F .text	00000130 OSFlagNameGet
811306e0 g     F .text	00000064 OSTimeGet
8113ff4c g     O .bss	00000004 ESdmaChBufferId
811352c4 g     F .text	00000380 alt_up_sd_card_read
811116ec g     F .text	000001c4 __smakebuf_r
811049bc g     F .text	00000058 bFeebCh4IrqFlagBufferEmpty
8113ff30 g     O .rwdata	00000008 alt_msgdma_list
81112a40 g     F .text	00000098 strlen
811074c0 g     F .text	000000b4 uc_spi_get_byte
8113a860 g     F .text	00000028 OSTaskSwHook
81126fcc g     F .text	0000015c open
81151ad4 g     O .bss	00000c30 OSEventTbl
8110ebdc g     F .text	0000002c vFeeSpwRMAPChangeDefault
811259d4 g     F .text	000000dc .hidden __gedf2
8114ee48 g     O .bss	00000010 xSenderACK
8113a554 g     F .text	00000044 alt_putchar
81152704 g     O .bss	00000e58 OSTCBTbl
811229f0 g     F .text	00000838 __gethex
8112e9c0 g     F .text	00000108 OSSemSet
8110ec8c g     F .text	00000038 cFeeRMAPEchoingEnable
8113fe88 g     O .rwdata	00000004 __wctomb
8110b5c8 g     F .text	00000030 vVariablesInitialization
81120fa4 g     F .text	00000018 __sprint_r
81104e74 g     F .text	00000088 bFeebGetIrqFlags
8113ff44 g     O .bss	00000004 pxDmaM2Dev
8110d75c g     F .text	0000004c vFailCreateSemaphoreResources
8113fea4 g     O .rwdata	00000004 alt_priority_mask
811057e0 g     F .text	0000003c bDisableLvdsBoard
8112e1c0 g     F .text	00000248 OSSemDel
81140080 g     O .bss	00000004 OSFlagFreeList
811073fc g     F .text	000000c4 v_spi_send_byte
81107730 g     F .text	000000d0 bSSDisplayConfig
81139f60 g     F .text	00000090 alt_ic_irq_enable
8113fec8 g     O .rwdata	00000002 OSEventNameSize
81117114 g     F .text	0000001c __vfprintf_internal
81140084 g     O .bss	00000001 OSStatRdy
81108008 g     F .text	00000074 bSyncCtrCh2OutEnable
8115355c g     O .bss	000000a4 OSTCBPrioTbl
81137378 g     F .text	00000270 altera_avalon_uart_read
81123858 g     F .text	00000064 _wctomb_r
8112780c g     F .text	000000cc __env_lock
8113ff0e g     O .rwdata	00000002 OSTaskSwHookEn
8110471c g     F .text	00000044 vFeebCh3IrqFlagClrBufferEmpty
81125ba4 g     F .text	00000904 .hidden __subdf3
8114ee58 g     O .bss	00000130 xPreParsed
81107ca0 g     F .text	0000003c uliSyncGetOst
811047e8 g     F .text	00000044 vFeebCh6IrqFlagClrBufferEmpty
8110c338 g     F .text	00000290 vSendEthConf
8111c34c g     F .text	000000b0 __lo0bits
811171f4 g     F .text	000017c4 __svfscanf_r
8113feac g     O .rwdata	00000008 alt_alarm_list
81120cec g     F .text	0000019c _ungetc_r
8113fed6 g     O .rwdata	00000002 OSFlagWidth
81139bac g     F .text	00000068 _do_ctors
811029ec g     F .text	0000004c DMA_BUSY
81123760 g     F .text	000000c8 wcrtomb
8110b778 g     F .text	00000068 vCCDLoadDefaultValues
81126830 g     F .text	000000d8 close
81107cdc g     F .text	0000003c uliSyncGetGeneral
81140014 g     O .bss	00000004 alt_envsem
81140088 g     O .bss	00000004 OSIdleCtrRun
81128a4c g     F .text	00000028 OSVersion
8113ff20 g     O .rwdata	00000002 OSTmrCfgWheelSize
8113021c g     F .text	00000078 OS_TaskStkClr
8110f574 g     F .text	0000003c siOpenFile
8113fefa g     O .rwdata	00000002 OSTaskCreateEn
8110c5c8 g     F .text	00000118 vSendTurnOff
8110d85c g     F .text	0000004c vFailSendPreParsedSemaphore
81133034 g     F .text	000002a4 match_file_record_to_name_ext
81129074 g     F .text	00000070 OS_EventWaitListInit
81122868 g     F .text	00000088 fputwc
8110d7f4 g     F .text	00000068 vFailSendxSemCommInit
8113a958 g     F .text	00000028 OSTaskIdleHook
8111ab88 g     F .text	00000004 __sinit_lock_acquire
8111c0b0 g     F .text	00000128 __multadd
8110482c g     F .text	00000044 vFeebCh7IrqFlagClrBufferEmpty
8110792c g     F .text	0000004c ucSyncStatusState
8112ff04 g     F .text	000001ec OSTaskSuspend
8111c088 g     F .text	00000028 _Bfree
81107bec g     F .text	0000003c uliSyncGetMbt
81129784 g     F .text	00000064 OS_TaskIdle
8113ff26 g     O .rwdata	00000002 OSTmrTblSize
8112de14 g     F .text	00000164 OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:
81100020:	deffed04 	addi	sp,sp,-76
81100024:	de003636 	bltu	sp,et,81100100 <alt_exception+0xe0>
81100028:	dfc00015 	stw	ra,0(sp)
8110002c:	d8400215 	stw	at,8(sp)
81100030:	d8800315 	stw	r2,12(sp)
81100034:	d8c00415 	stw	r3,16(sp)
81100038:	d9000515 	stw	r4,20(sp)
8110003c:	d9400615 	stw	r5,24(sp)
81100040:	d9800715 	stw	r6,28(sp)
81100044:	d9c00815 	stw	r7,32(sp)
81100048:	000b307a 	rdctl	r5,estatus
8110004c:	da000915 	stw	r8,36(sp)
81100050:	da400a15 	stw	r9,40(sp)
81100054:	da800b15 	stw	r10,44(sp)
81100058:	dac00c15 	stw	r11,48(sp)
8110005c:	db000d15 	stw	r12,52(sp)
81100060:	db400e15 	stw	r13,56(sp)
81100064:	db800f15 	stw	r14,60(sp)
81100068:	dbc01015 	stw	r15,64(sp)
8110006c:	d9401115 	stw	r5,68(sp)
81100070:	ebffff04 	addi	r15,ea,-4
81100074:	dbc01215 	stw	r15,72(sp)
81100078:	0009313a 	rdctl	r4,ipending
8110007c:	2880004c 	andi	r2,r5,1
81100080:	10000326 	beq	r2,zero,81100090 <alt_exception+0x70>
81100084:	20000226 	beq	r4,zero,81100090 <alt_exception+0x70>
81100088:	11001040 	call	81100104 <alt_irq_handler>
8110008c:	00000706 	br	811000ac <alt_exception+0x8c>
81100090:	df401215 	stw	ea,72(sp)
81100094:	e8bfff17 	ldw	r2,-4(ea)
81100098:	e93fff04 	addi	r4,ea,-4
8110009c:	11001e00 	call	811001e0 <alt_instruction_exception_entry>
811000a0:	1000021e 	bne	r2,zero,811000ac <alt_exception+0x8c>
811000a4:	ebffff04 	addi	r15,ea,-4
811000a8:	dbc01215 	stw	r15,72(sp)
811000ac:	d9401117 	ldw	r5,68(sp)
811000b0:	df401217 	ldw	ea,72(sp)
811000b4:	dfc00017 	ldw	ra,0(sp)
811000b8:	2801707a 	wrctl	estatus,r5
811000bc:	d8400217 	ldw	at,8(sp)
811000c0:	d8800317 	ldw	r2,12(sp)
811000c4:	d8c00417 	ldw	r3,16(sp)
811000c8:	d9000517 	ldw	r4,20(sp)
811000cc:	d9400617 	ldw	r5,24(sp)
811000d0:	d9800717 	ldw	r6,28(sp)
811000d4:	d9c00817 	ldw	r7,32(sp)
811000d8:	da000917 	ldw	r8,36(sp)
811000dc:	da400a17 	ldw	r9,40(sp)
811000e0:	da800b17 	ldw	r10,44(sp)
811000e4:	dac00c17 	ldw	r11,48(sp)
811000e8:	db000d17 	ldw	r12,52(sp)
811000ec:	db400e17 	ldw	r13,56(sp)
811000f0:	db800f17 	ldw	r14,60(sp)
811000f4:	dbc01017 	ldw	r15,64(sp)
811000f8:	dec01304 	addi	sp,sp,76
811000fc:	ef80083a 	eret
81100100:	003da0fa 	break	3

81100104 <alt_irq_handler>:
81100104:	defff904 	addi	sp,sp,-28
81100108:	de00012e 	bgeu	sp,et,81100110 <alt_irq_handler+0xc>
8110010c:	003b68fa 	trap	3
81100110:	dfc00615 	stw	ra,24(sp)
81100114:	df000515 	stw	fp,20(sp)
81100118:	df000504 	addi	fp,sp,20
8110011c:	11284280 	call	81128428 <OSIntEnter>
81100120:	0005313a 	rdctl	r2,ipending
81100124:	e0bffe15 	stw	r2,-8(fp)
81100128:	e0bffe17 	ldw	r2,-8(fp)
8110012c:	e0bffb15 	stw	r2,-20(fp)
81100130:	e03ffd15 	stw	zero,-12(fp)
81100134:	00800044 	movi	r2,1
81100138:	e0bffc15 	stw	r2,-16(fp)
8110013c:	e0fffb17 	ldw	r3,-20(fp)
81100140:	e0bffc17 	ldw	r2,-16(fp)
81100144:	1884703a 	and	r2,r3,r2
81100148:	10001426 	beq	r2,zero,8110019c <alt_irq_handler+0x98>
8110014c:	00a04574 	movhi	r2,33045
81100150:	108eda04 	addi	r2,r2,15208
81100154:	e0fffd17 	ldw	r3,-12(fp)
81100158:	180690fa 	slli	r3,r3,3
8110015c:	10c5883a 	add	r2,r2,r3
81100160:	10c00017 	ldw	r3,0(r2)
81100164:	00a04574 	movhi	r2,33045
81100168:	108eda04 	addi	r2,r2,15208
8110016c:	e13ffd17 	ldw	r4,-12(fp)
81100170:	200890fa 	slli	r4,r4,3
81100174:	1105883a 	add	r2,r2,r4
81100178:	10800104 	addi	r2,r2,4
8110017c:	10800017 	ldw	r2,0(r2)
81100180:	1009883a 	mov	r4,r2
81100184:	183ee83a 	callr	r3
81100188:	0001883a 	nop
8110018c:	0005313a 	rdctl	r2,ipending
81100190:	e0bfff15 	stw	r2,-4(fp)
81100194:	e0bfff17 	ldw	r2,-4(fp)
81100198:	00000706 	br	811001b8 <alt_irq_handler+0xb4>
8110019c:	e0bffc17 	ldw	r2,-16(fp)
811001a0:	1085883a 	add	r2,r2,r2
811001a4:	e0bffc15 	stw	r2,-16(fp)
811001a8:	e0bffd17 	ldw	r2,-12(fp)
811001ac:	10800044 	addi	r2,r2,1
811001b0:	e0bffd15 	stw	r2,-12(fp)
811001b4:	003fe106 	br	8110013c <__reset+0xfb0e013c>
811001b8:	e0bffb15 	stw	r2,-20(fp)
811001bc:	e0bffb17 	ldw	r2,-20(fp)
811001c0:	103fdb1e 	bne	r2,zero,81100130 <__reset+0xfb0e0130>
811001c4:	112847c0 	call	8112847c <OSIntExit>
811001c8:	0001883a 	nop
811001cc:	e037883a 	mov	sp,fp
811001d0:	dfc00117 	ldw	ra,4(sp)
811001d4:	df000017 	ldw	fp,0(sp)
811001d8:	dec00204 	addi	sp,sp,8
811001dc:	f800283a 	ret

811001e0 <alt_instruction_exception_entry>:
811001e0:	defffb04 	addi	sp,sp,-20
811001e4:	de00012e 	bgeu	sp,et,811001ec <alt_instruction_exception_entry+0xc>
811001e8:	003b68fa 	trap	3
811001ec:	dfc00415 	stw	ra,16(sp)
811001f0:	df000315 	stw	fp,12(sp)
811001f4:	df000304 	addi	fp,sp,12
811001f8:	e13fff15 	stw	r4,-4(fp)
811001fc:	000531fa 	rdctl	r2,exception
81100200:	e0bffd15 	stw	r2,-12(fp)
81100204:	e0bffd17 	ldw	r2,-12(fp)
81100208:	10801f0c 	andi	r2,r2,124
8110020c:	1004d0ba 	srli	r2,r2,2
81100210:	e0bffd15 	stw	r2,-12(fp)
81100214:	0005333a 	rdctl	r2,badaddr
81100218:	e0bffe15 	stw	r2,-8(fp)
8110021c:	d0a09917 	ldw	r2,-32156(gp)
81100220:	10000726 	beq	r2,zero,81100240 <alt_instruction_exception_entry+0x60>
81100224:	d0a09917 	ldw	r2,-32156(gp)
81100228:	e0fffd17 	ldw	r3,-12(fp)
8110022c:	e1bffe17 	ldw	r6,-8(fp)
81100230:	e17fff17 	ldw	r5,-4(fp)
81100234:	1809883a 	mov	r4,r3
81100238:	103ee83a 	callr	r2
8110023c:	00000206 	br	81100248 <alt_instruction_exception_entry+0x68>
81100240:	003da03a 	break	0
81100244:	0005883a 	mov	r2,zero
81100248:	e037883a 	mov	sp,fp
8110024c:	dfc00117 	ldw	ra,4(sp)
81100250:	df000017 	ldw	fp,0(sp)
81100254:	dec00204 	addi	sp,sp,8
81100258:	f800283a 	ret

Disassembly of section .text:

8110025c <_start>:
8110025c:	06e047f4 	movhi	sp,33055
81100260:	dee80014 	ori	sp,sp,40960
81100264:	06a04534 	movhi	gp,33044
81100268:	d69f9814 	ori	gp,gp,32352
8110026c:	00a044f4 	movhi	r2,33043
81100270:	10bfce14 	ori	r2,r2,65336
81100274:	00e04574 	movhi	r3,33045
81100278:	18cf1a14 	ori	r3,r3,15464
8110027c:	10c00326 	beq	r2,r3,8110028c <_start+0x30>
81100280:	10000015 	stw	zero,0(r2)
81100284:	10800104 	addi	r2,r2,4
81100288:	10fffd36 	bltu	r2,r3,81100280 <__reset+0xfb0e0280>
8110028c:	d6200017 	ldw	et,-32768(gp)
81100290:	1126df80 	call	81126df8 <alt_main>

81100294 <alt_after_alt_main>:
81100294:	003fff06 	br	81100294 <__reset+0xfb0e0294>

81100298 <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
81100298:	defff604 	addi	sp,sp,-40
8110029c:	de00012e 	bgeu	sp,et,811002a4 <bDdr2EepromTest+0xc>
811002a0:	003b68fa 	trap	3
811002a4:	dfc00915 	stw	ra,36(sp)
811002a8:	df000815 	stw	fp,32(sp)
811002ac:	df000804 	addi	fp,sp,32
811002b0:	2005883a 	mov	r2,r4
811002b4:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
811002b8:	00e04534 	movhi	r3,33044
811002bc:	18c06204 	addi	r3,r3,392
811002c0:	00a04534 	movhi	r2,33044
811002c4:	10abdf04 	addi	r2,r2,-20612
811002c8:	1009883a 	mov	r4,r2
811002cc:	00800884 	movi	r2,34
811002d0:	100d883a 	mov	r6,r2
811002d4:	200b883a 	mov	r5,r4
811002d8:	1809883a 	mov	r4,r3
811002dc:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
811002e0:	d0a04d17 	ldw	r2,-32460(gp)
811002e4:	01604534 	movhi	r5,33044
811002e8:	29406204 	addi	r5,r5,392
811002ec:	1009883a 	mov	r4,r2
811002f0:	11110c40 	call	811110c4 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811002f4:	00bfe804 	movi	r2,-96
811002f8:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
811002fc:	00800044 	movi	r2,1
81100300:	e0bff915 	stw	r2,-28(fp)
	switch (ucMemoryId) {
81100304:	e0bfff03 	ldbu	r2,-4(fp)
81100308:	10c00060 	cmpeqi	r3,r2,1
8110030c:	1800031e 	bne	r3,zero,8110031c <bDdr2EepromTest+0x84>
81100310:	108000a0 	cmpeqi	r2,r2,2
81100314:	1000081e 	bne	r2,zero,81100338 <bDdr2EepromTest+0xa0>
81100318:	00000e06 	br	81100354 <bDdr2EepromTest+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8110031c:	00a00034 	movhi	r2,32768
81100320:	10827c04 	addi	r2,r2,2544
81100324:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100328:	00a00034 	movhi	r2,32768
8110032c:	10828004 	addi	r2,r2,2560
81100330:	e0bffb15 	stw	r2,-20(fp)
		break;
81100334:	00001906 	br	8110039c <bDdr2EepromTest+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100338:	00a00034 	movhi	r2,32768
8110033c:	10825804 	addi	r2,r2,2400
81100340:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100344:	00a00034 	movhi	r2,32768
81100348:	10825c04 	addi	r2,r2,2416
8110034c:	e0bffb15 	stw	r2,-20(fp)
		break;
81100350:	00001206 	br	8110039c <bDdr2EepromTest+0x104>
	default:
		bSuccess = FALSE;
81100354:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81100358:	00e04534 	movhi	r3,33044
8110035c:	18c06204 	addi	r3,r3,392
81100360:	00a04534 	movhi	r2,33044
81100364:	10abe804 	addi	r2,r2,-20576
81100368:	1009883a 	mov	r4,r2
8110036c:	00800bc4 	movi	r2,47
81100370:	100d883a 	mov	r6,r2
81100374:	200b883a 	mov	r5,r4
81100378:	1809883a 	mov	r4,r3
8110037c:	11120c40 	call	811120c4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81100380:	d0a04d17 	ldw	r2,-32460(gp)
81100384:	01604534 	movhi	r5,33044
81100388:	29406204 	addi	r5,r5,392
8110038c:	1009883a 	mov	r4,r2
81100390:	11110c40 	call	811110c4 <fprintf>
		;
#endif
		return bSuccess;
81100394:	e0bff917 	ldw	r2,-28(fp)
81100398:	0000ff06 	br	81100798 <bDdr2EepromTest+0x500>
	}

	alt_u8 ucControlAddr, ucValue;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
8110039c:	00e04534 	movhi	r3,33044
811003a0:	18c06204 	addi	r3,r3,392
811003a4:	00a04534 	movhi	r2,33044
811003a8:	10abf404 	addi	r2,r2,-20528
811003ac:	1009883a 	mov	r4,r2
811003b0:	008005c4 	movi	r2,23
811003b4:	100d883a 	mov	r6,r2
811003b8:	200b883a 	mov	r5,r4
811003bc:	1809883a 	mov	r4,r3
811003c0:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
811003c4:	d0a04d17 	ldw	r2,-32460(gp)
811003c8:	01604534 	movhi	r5,33044
811003cc:	29406204 	addi	r5,r5,392
811003d0:	1009883a 	mov	r4,r2
811003d4:	11110c40 	call	811110c4 <fprintf>
#endif
	usleep(20 * 1000);
811003d8:	01138804 	movi	r4,20000
811003dc:	112758c0 	call	8112758c <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811003e0:	e03ffc15 	stw	zero,-16(fp)
811003e4:	00003306 	br	811004b4 <bDdr2EepromTest+0x21c>
		ucControlAddr = iI;
811003e8:	e0bffc17 	ldw	r2,-16(fp)
811003ec:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811003f0:	e0bffd03 	ldbu	r2,-12(fp)
811003f4:	10c03fcc 	andi	r3,r2,255
811003f8:	18c0201c 	xori	r3,r3,128
811003fc:	18ffe004 	addi	r3,r3,-128
81100400:	e13ffd43 	ldbu	r4,-11(fp)
81100404:	e0bffe04 	addi	r2,fp,-8
81100408:	d8800015 	stw	r2,0(sp)
8110040c:	200f883a 	mov	r7,r4
81100410:	180d883a 	mov	r6,r3
81100414:	e17ffb17 	ldw	r5,-20(fp)
81100418:	e13ffa17 	ldw	r4,-24(fp)
8110041c:	1105ac00 	call	81105ac0 <I2C_Read>
81100420:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
81100424:	e0bff917 	ldw	r2,-28(fp)
81100428:	10001026 	beq	r2,zero,8110046c <bDdr2EepromTest+0x1d4>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
8110042c:	e0bffd43 	ldbu	r2,-11(fp)
81100430:	e0fffe03 	ldbu	r3,-8(fp)
81100434:	18c03fcc 	andi	r3,r3,255
81100438:	180f883a 	mov	r7,r3
8110043c:	100d883a 	mov	r6,r2
81100440:	01604534 	movhi	r5,33044
81100444:	296bfa04 	addi	r5,r5,-20504
81100448:	01204534 	movhi	r4,33044
8110044c:	21006204 	addi	r4,r4,392
81100450:	111282c0 	call	8111282c <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
81100454:	d0a04d17 	ldw	r2,-32460(gp)
81100458:	01604534 	movhi	r5,33044
8110045c:	29406204 	addi	r5,r5,392
81100460:	1009883a 	mov	r4,r2
81100464:	11110c40 	call	811110c4 <fprintf>
81100468:	00000f06 	br	811004a8 <bDdr2EepromTest+0x210>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
8110046c:	00e04534 	movhi	r3,33044
81100470:	18c06204 	addi	r3,r3,392
81100474:	00a04534 	movhi	r2,33044
81100478:	10abff04 	addi	r2,r2,-20484
8110047c:	1009883a 	mov	r4,r2
81100480:	008005c4 	movi	r2,23
81100484:	100d883a 	mov	r6,r2
81100488:	200b883a 	mov	r5,r4
8110048c:	1809883a 	mov	r4,r3
81100490:	11120c40 	call	811120c4 <memcpy>
			debug(fp, cDebugBuffer);
81100494:	d0a04d17 	ldw	r2,-32460(gp)
81100498:	01604534 	movhi	r5,33044
8110049c:	29406204 	addi	r5,r5,392
811004a0:	1009883a 	mov	r4,r2
811004a4:	11110c40 	call	811110c4 <fprintf>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811004a8:	e0bffc17 	ldw	r2,-16(fp)
811004ac:	10800044 	addi	r2,r2,1
811004b0:	e0bffc15 	stw	r2,-16(fp)
811004b4:	e0bffc17 	ldw	r2,-16(fp)
811004b8:	10804008 	cmpgei	r2,r2,256
811004bc:	1000021e 	bne	r2,zero,811004c8 <bDdr2EepromTest+0x230>
811004c0:	e0bff917 	ldw	r2,-28(fp)
811004c4:	103fc81e 	bne	r2,zero,811003e8 <__reset+0xfb0e03e8>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
811004c8:	e0bff917 	ldw	r2,-28(fp)
811004cc:	10001026 	beq	r2,zero,81100510 <bDdr2EepromTest+0x278>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
811004d0:	00e04534 	movhi	r3,33044
811004d4:	18c06204 	addi	r3,r3,392
811004d8:	00a04534 	movhi	r2,33044
811004dc:	10ac0504 	addi	r2,r2,-20460
811004e0:	1009883a 	mov	r4,r2
811004e4:	00800884 	movi	r2,34
811004e8:	100d883a 	mov	r6,r2
811004ec:	200b883a 	mov	r5,r4
811004f0:	1809883a 	mov	r4,r3
811004f4:	11120c40 	call	811120c4 <memcpy>
		debug(fp, cDebugBuffer);
811004f8:	d0a04d17 	ldw	r2,-32460(gp)
811004fc:	01604534 	movhi	r5,33044
81100500:	29406204 	addi	r5,r5,392
81100504:	1009883a 	mov	r4,r2
81100508:	11110c40 	call	811110c4 <fprintf>
8110050c:	00000f06 	br	8110054c <bDdr2EepromTest+0x2b4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
81100510:	00e04534 	movhi	r3,33044
81100514:	18c06204 	addi	r3,r3,392
81100518:	00a04534 	movhi	r2,33044
8110051c:	10ac0e04 	addi	r2,r2,-20424
81100520:	1009883a 	mov	r4,r2
81100524:	008007c4 	movi	r2,31
81100528:	100d883a 	mov	r6,r2
8110052c:	200b883a 	mov	r5,r4
81100530:	1809883a 	mov	r4,r3
81100534:	11120c40 	call	811120c4 <memcpy>
		debug(fp, cDebugBuffer);
81100538:	d0a04d17 	ldw	r2,-32460(gp)
8110053c:	01604534 	movhi	r5,33044
81100540:	29406204 	addi	r5,r5,392
81100544:	1009883a 	mov	r4,r2
81100548:	11110c40 	call	811110c4 <fprintf>
#endif
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
8110054c:	00e04534 	movhi	r3,33044
81100550:	18c06204 	addi	r3,r3,392
81100554:	00a04534 	movhi	r2,33044
81100558:	10ac1604 	addi	r2,r2,-20392
8110055c:	1009883a 	mov	r4,r2
81100560:	00800604 	movi	r2,24
81100564:	100d883a 	mov	r6,r2
81100568:	200b883a 	mov	r5,r4
8110056c:	1809883a 	mov	r4,r3
81100570:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
81100574:	d0a04d17 	ldw	r2,-32460(gp)
81100578:	01604534 	movhi	r5,33044
8110057c:	29406204 	addi	r5,r5,392
81100580:	1009883a 	mov	r4,r2
81100584:	11110c40 	call	811110c4 <fprintf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
81100588:	00800484 	movi	r2,18
8110058c:	e0bffd85 	stb	r2,-10(fp)
81100590:	00bfe004 	movi	r2,-128
81100594:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100598:	01138804 	movi	r4,20000
8110059c:	112758c0 	call	8112758c <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811005a0:	e0bffd03 	ldbu	r2,-12(fp)
811005a4:	10c03fcc 	andi	r3,r2,255
811005a8:	18c0201c 	xori	r3,r3,128
811005ac:	18ffe004 	addi	r3,r3,-128
811005b0:	e13ffdc3 	ldbu	r4,-9(fp)
811005b4:	e0bffd83 	ldbu	r2,-10(fp)
811005b8:	d8800015 	stw	r2,0(sp)
811005bc:	200f883a 	mov	r7,r4
811005c0:	180d883a 	mov	r6,r3
811005c4:	e17ffb17 	ldw	r5,-20(fp)
811005c8:	e13ffa17 	ldw	r4,-24(fp)
811005cc:	11059e00 	call	811059e0 <I2C_Write>
811005d0:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
811005d4:	e0bff917 	ldw	r2,-28(fp)
811005d8:	1000101e 	bne	r2,zero,8110061c <bDdr2EepromTest+0x384>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
811005dc:	00e04534 	movhi	r3,33044
811005e0:	18c06204 	addi	r3,r3,392
811005e4:	00a04534 	movhi	r2,33044
811005e8:	10ac1c04 	addi	r2,r2,-20368
811005ec:	1009883a 	mov	r4,r2
811005f0:	00800604 	movi	r2,24
811005f4:	100d883a 	mov	r6,r2
811005f8:	200b883a 	mov	r5,r4
811005fc:	1809883a 	mov	r4,r3
81100600:	11120c40 	call	811120c4 <memcpy>
		debug(fp, cDebugBuffer);
81100604:	d0a04d17 	ldw	r2,-32460(gp)
81100608:	01604534 	movhi	r5,33044
8110060c:	29406204 	addi	r5,r5,392
81100610:	1009883a 	mov	r4,r2
81100614:	11110c40 	call	811110c4 <fprintf>
81100618:	00003306 	br	811006e8 <bDdr2EepromTest+0x450>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
8110061c:	e0bffd03 	ldbu	r2,-12(fp)
81100620:	10c03fcc 	andi	r3,r2,255
81100624:	18c0201c 	xori	r3,r3,128
81100628:	18ffe004 	addi	r3,r3,-128
8110062c:	e13ffdc3 	ldbu	r4,-9(fp)
81100630:	e0bffe44 	addi	r2,fp,-7
81100634:	d8800015 	stw	r2,0(sp)
81100638:	200f883a 	mov	r7,r4
8110063c:	180d883a 	mov	r6,r3
81100640:	e17ffb17 	ldw	r5,-20(fp)
81100644:	e13ffa17 	ldw	r4,-24(fp)
81100648:	1105ac00 	call	81105ac0 <I2C_Read>
8110064c:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
81100650:	e0bff917 	ldw	r2,-28(fp)
81100654:	1000101e 	bne	r2,zero,81100698 <bDdr2EepromTest+0x400>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
81100658:	00e04534 	movhi	r3,33044
8110065c:	18c06204 	addi	r3,r3,392
81100660:	00a04534 	movhi	r2,33044
81100664:	10ac2204 	addi	r2,r2,-20344
81100668:	1009883a 	mov	r4,r2
8110066c:	00800884 	movi	r2,34
81100670:	100d883a 	mov	r6,r2
81100674:	200b883a 	mov	r5,r4
81100678:	1809883a 	mov	r4,r3
8110067c:	11120c40 	call	811120c4 <memcpy>
			debug(fp, cDebugBuffer);
81100680:	d0a04d17 	ldw	r2,-32460(gp)
81100684:	01604534 	movhi	r5,33044
81100688:	29406204 	addi	r5,r5,392
8110068c:	1009883a 	mov	r4,r2
81100690:	11110c40 	call	811110c4 <fprintf>
81100694:	00001406 	br	811006e8 <bDdr2EepromTest+0x450>
#endif
		} else {
			if (ucReadData != ucWriteData) {
81100698:	e0bffe43 	ldbu	r2,-7(fp)
8110069c:	10c03fcc 	andi	r3,r2,255
811006a0:	e0bffd83 	ldbu	r2,-10(fp)
811006a4:	18801026 	beq	r3,r2,811006e8 <bDdr2EepromTest+0x450>
				bSuccess = FALSE;
811006a8:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811006ac:	e0bffe43 	ldbu	r2,-7(fp)
811006b0:	10803fcc 	andi	r2,r2,255
811006b4:	e0fffd83 	ldbu	r3,-10(fp)
811006b8:	180f883a 	mov	r7,r3
811006bc:	100d883a 	mov	r6,r2
811006c0:	01604534 	movhi	r5,33044
811006c4:	296c2b04 	addi	r5,r5,-20308
811006c8:	01204534 	movhi	r4,33044
811006cc:	21006204 	addi	r4,r4,392
811006d0:	111282c0 	call	8111282c <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
811006d4:	d0a04d17 	ldw	r2,-32460(gp)
811006d8:	01604534 	movhi	r5,33044
811006dc:	29406204 	addi	r5,r5,392
811006e0:	1009883a 	mov	r4,r2
811006e4:	11110c40 	call	811110c4 <fprintf>
#endif
			}
		}
	}
	if (bSuccess) {
811006e8:	e0bff917 	ldw	r2,-28(fp)
811006ec:	10001026 	beq	r2,zero,81100730 <bDdr2EepromTest+0x498>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
811006f0:	00e04534 	movhi	r3,33044
811006f4:	18c06204 	addi	r3,r3,392
811006f8:	00a04534 	movhi	r2,33044
811006fc:	10ac3a04 	addi	r2,r2,-20248
81100700:	1009883a 	mov	r4,r2
81100704:	008008c4 	movi	r2,35
81100708:	100d883a 	mov	r6,r2
8110070c:	200b883a 	mov	r5,r4
81100710:	1809883a 	mov	r4,r3
81100714:	11120c40 	call	811120c4 <memcpy>
		debug(fp, cDebugBuffer);
81100718:	d0a04d17 	ldw	r2,-32460(gp)
8110071c:	01604534 	movhi	r5,33044
81100720:	29406204 	addi	r5,r5,392
81100724:	1009883a 	mov	r4,r2
81100728:	11110c40 	call	811110c4 <fprintf>
8110072c:	00000f06 	br	8110076c <bDdr2EepromTest+0x4d4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
81100730:	00e04534 	movhi	r3,33044
81100734:	18c06204 	addi	r3,r3,392
81100738:	00a04534 	movhi	r2,33044
8110073c:	10ac4304 	addi	r2,r2,-20212
81100740:	1009883a 	mov	r4,r2
81100744:	00800804 	movi	r2,32
81100748:	100d883a 	mov	r6,r2
8110074c:	200b883a 	mov	r5,r4
81100750:	1809883a 	mov	r4,r3
81100754:	11120c40 	call	811120c4 <memcpy>
		debug(fp, cDebugBuffer);
81100758:	d0a04d17 	ldw	r2,-32460(gp)
8110075c:	01604534 	movhi	r5,33044
81100760:	29406204 	addi	r5,r5,392
81100764:	1009883a 	mov	r4,r2
81100768:	11110c40 	call	811110c4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8110076c:	00a04534 	movhi	r2,33044
81100770:	10806204 	addi	r2,r2,392
81100774:	00c00284 	movi	r3,10
81100778:	10c00005 	stb	r3,0(r2)
8110077c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81100780:	d0a04d17 	ldw	r2,-32460(gp)
81100784:	01604534 	movhi	r5,33044
81100788:	29406204 	addi	r5,r5,392
8110078c:	1009883a 	mov	r4,r2
81100790:	11110c40 	call	811110c4 <fprintf>
#endif

	return bSuccess;
81100794:	e0bff917 	ldw	r2,-28(fp)
}
81100798:	e037883a 	mov	sp,fp
8110079c:	dfc00117 	ldw	ra,4(sp)
811007a0:	df000017 	ldw	fp,0(sp)
811007a4:	dec00204 	addi	sp,sp,8
811007a8:	f800283a 	ret

811007ac <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
811007ac:	deffb704 	addi	sp,sp,-292
811007b0:	de00012e 	bgeu	sp,et,811007b8 <bDdr2EepromDump+0xc>
811007b4:	003b68fa 	trap	3
811007b8:	dfc04815 	stw	ra,288(sp)
811007bc:	df004715 	stw	fp,284(sp)
811007c0:	df004704 	addi	fp,sp,284
811007c4:	2005883a 	mov	r2,r4
811007c8:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
811007cc:	00e04534 	movhi	r3,33044
811007d0:	18c06204 	addi	r3,r3,392
811007d4:	00a04534 	movhi	r2,33044
811007d8:	10ac4b04 	addi	r2,r2,-20180
811007dc:	1009883a 	mov	r4,r2
811007e0:	00800884 	movi	r2,34
811007e4:	100d883a 	mov	r6,r2
811007e8:	200b883a 	mov	r5,r4
811007ec:	1809883a 	mov	r4,r3
811007f0:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
811007f4:	d0a04d17 	ldw	r2,-32460(gp)
811007f8:	01604534 	movhi	r5,33044
811007fc:	29406204 	addi	r5,r5,392
81100800:	1009883a 	mov	r4,r2
81100804:	11110c40 	call	811110c4 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100808:	00bfe804 	movi	r2,-96
8110080c:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
81100810:	00800044 	movi	r2,1
81100814:	e0bfbe15 	stw	r2,-264(fp)
	switch (ucMemoryId) {
81100818:	e0bfff03 	ldbu	r2,-4(fp)
8110081c:	10c00060 	cmpeqi	r3,r2,1
81100820:	1800031e 	bne	r3,zero,81100830 <bDdr2EepromDump+0x84>
81100824:	108000a0 	cmpeqi	r2,r2,2
81100828:	1000081e 	bne	r2,zero,8110084c <bDdr2EepromDump+0xa0>
8110082c:	00000e06 	br	81100868 <bDdr2EepromDump+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81100830:	00a00034 	movhi	r2,32768
81100834:	10827c04 	addi	r2,r2,2544
81100838:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
8110083c:	00a00034 	movhi	r2,32768
81100840:	10828004 	addi	r2,r2,2560
81100844:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100848:	00001906 	br	811008b0 <bDdr2EepromDump+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
8110084c:	00a00034 	movhi	r2,32768
81100850:	10825804 	addi	r2,r2,2400
81100854:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100858:	00a00034 	movhi	r2,32768
8110085c:	10825c04 	addi	r2,r2,2416
81100860:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100864:	00001206 	br	811008b0 <bDdr2EepromDump+0x104>
	default:
		bSuccess = FALSE;
81100868:	e03fbe15 	stw	zero,-264(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110086c:	00e04534 	movhi	r3,33044
81100870:	18c06204 	addi	r3,r3,392
81100874:	00a04534 	movhi	r2,33044
81100878:	10ac5404 	addi	r2,r2,-20144
8110087c:	1009883a 	mov	r4,r2
81100880:	00800bc4 	movi	r2,47
81100884:	100d883a 	mov	r6,r2
81100888:	200b883a 	mov	r5,r4
8110088c:	1809883a 	mov	r4,r3
81100890:	11120c40 	call	811120c4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
81100894:	d0a04d17 	ldw	r2,-32460(gp)
81100898:	01604534 	movhi	r5,33044
8110089c:	29406204 	addi	r5,r5,392
811008a0:	1009883a 	mov	r4,r2
811008a4:	11110c40 	call	811110c4 <fprintf>
		;
#endif
		return bSuccess;
811008a8:	e0bfbe17 	ldw	r2,-264(fp)
811008ac:	0002e706 	br	8110144c <bDdr2EepromDump+0xca0>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811008b0:	e0bfbd03 	ldbu	r2,-268(fp)
811008b4:	10c03fcc 	andi	r3,r2,255
811008b8:	18c0201c 	xori	r3,r3,128
811008bc:	18ffe004 	addi	r3,r3,-128
811008c0:	e13fbf04 	addi	r4,fp,-260
811008c4:	00804004 	movi	r2,256
811008c8:	d8800015 	stw	r2,0(sp)
811008cc:	200f883a 	mov	r7,r4
811008d0:	180d883a 	mov	r6,r3
811008d4:	e17fbb17 	ldw	r5,-276(fp)
811008d8:	e13fba17 	ldw	r4,-280(fp)
811008dc:	1105bc80 	call	81105bc8 <I2C_MultipleRead>
811008e0:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
811008e4:	e0bfbe17 	ldw	r2,-264(fp)
811008e8:	1002be26 	beq	r2,zero,811013e4 <bDdr2EepromDump+0xc38>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811008ec:	e03fbc15 	stw	zero,-272(fp)
811008f0:	0002b606 	br	811013cc <bDdr2EepromDump+0xc20>
			if (iI == 0) {
811008f4:	e0bfbc17 	ldw	r2,-272(fp)
811008f8:	1000121e 	bne	r2,zero,81100944 <bDdr2EepromDump+0x198>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
811008fc:	e0ffbf04 	addi	r3,fp,-260
81100900:	e0bfbc17 	ldw	r2,-272(fp)
81100904:	1885883a 	add	r2,r3,r2
81100908:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110090c:	10803fcc 	andi	r2,r2,255
81100910:	100f883a 	mov	r7,r2
81100914:	e1bfbc17 	ldw	r6,-272(fp)
81100918:	01604534 	movhi	r5,33044
8110091c:	296c6004 	addi	r5,r5,-20096
81100920:	01204534 	movhi	r4,33044
81100924:	21006204 	addi	r4,r4,392
81100928:	111282c0 	call	8111282c <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
8110092c:	d0a04d17 	ldw	r2,-32460(gp)
81100930:	01604534 	movhi	r5,33044
81100934:	29406204 	addi	r5,r5,392
81100938:	1009883a 	mov	r4,r2
8110093c:	11110c40 	call	811110c4 <fprintf>
81100940:	00029f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 1) {
81100944:	e0bfbc17 	ldw	r2,-272(fp)
81100948:	10800058 	cmpnei	r2,r2,1
8110094c:	1000101e 	bne	r2,zero,81100990 <bDdr2EepromDump+0x1e4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100950:	00e04534 	movhi	r3,33044
81100954:	18c06204 	addi	r3,r3,392
81100958:	00a04534 	movhi	r2,33044
8110095c:	10ac6c04 	addi	r2,r2,-20048
81100960:	1009883a 	mov	r4,r2
81100964:	00800c04 	movi	r2,48
81100968:	100d883a 	mov	r6,r2
8110096c:	200b883a 	mov	r5,r4
81100970:	1809883a 	mov	r4,r3
81100974:	11120c40 	call	811120c4 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
81100978:	d0a04d17 	ldw	r2,-32460(gp)
8110097c:	01604534 	movhi	r5,33044
81100980:	29406204 	addi	r5,r5,392
81100984:	1009883a 	mov	r4,r2
81100988:	11110c40 	call	811110c4 <fprintf>
8110098c:	00028c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 2) {
81100990:	e0bfbc17 	ldw	r2,-272(fp)
81100994:	10800098 	cmpnei	r2,r2,2
81100998:	1000101e 	bne	r2,zero,811009dc <bDdr2EepromDump+0x230>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
8110099c:	00e04534 	movhi	r3,33044
811009a0:	18c06204 	addi	r3,r3,392
811009a4:	00a04534 	movhi	r2,33044
811009a8:	10ac7804 	addi	r2,r2,-20000
811009ac:	1009883a 	mov	r4,r2
811009b0:	008007c4 	movi	r2,31
811009b4:	100d883a 	mov	r6,r2
811009b8:	200b883a 	mov	r5,r4
811009bc:	1809883a 	mov	r4,r3
811009c0:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
811009c4:	d0a04d17 	ldw	r2,-32460(gp)
811009c8:	01604534 	movhi	r5,33044
811009cc:	29406204 	addi	r5,r5,392
811009d0:	1009883a 	mov	r4,r2
811009d4:	11110c40 	call	811110c4 <fprintf>
811009d8:	00027906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 3) {
811009dc:	e0bfbc17 	ldw	r2,-272(fp)
811009e0:	108000d8 	cmpnei	r2,r2,3
811009e4:	1000101e 	bne	r2,zero,81100a28 <bDdr2EepromDump+0x27c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811009e8:	00e04534 	movhi	r3,33044
811009ec:	18c06204 	addi	r3,r3,392
811009f0:	00a04534 	movhi	r2,33044
811009f4:	10ac8004 	addi	r2,r2,-19968
811009f8:	1009883a 	mov	r4,r2
811009fc:	008009c4 	movi	r2,39
81100a00:	100d883a 	mov	r6,r2
81100a04:	200b883a 	mov	r5,r4
81100a08:	1809883a 	mov	r4,r3
81100a0c:	11120c40 	call	811120c4 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a10:	d0a04d17 	ldw	r2,-32460(gp)
81100a14:	01604534 	movhi	r5,33044
81100a18:	29406204 	addi	r5,r5,392
81100a1c:	1009883a 	mov	r4,r2
81100a20:	11110c40 	call	811110c4 <fprintf>
81100a24:	00026606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 4) {
81100a28:	e0bfbc17 	ldw	r2,-272(fp)
81100a2c:	10800118 	cmpnei	r2,r2,4
81100a30:	1000101e 	bne	r2,zero,81100a74 <bDdr2EepromDump+0x2c8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a34:	00e04534 	movhi	r3,33044
81100a38:	18c06204 	addi	r3,r3,392
81100a3c:	00a04534 	movhi	r2,33044
81100a40:	10ac8a04 	addi	r2,r2,-19928
81100a44:	1009883a 	mov	r4,r2
81100a48:	00800a84 	movi	r2,42
81100a4c:	100d883a 	mov	r6,r2
81100a50:	200b883a 	mov	r5,r4
81100a54:	1809883a 	mov	r4,r3
81100a58:	11120c40 	call	811120c4 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a5c:	d0a04d17 	ldw	r2,-32460(gp)
81100a60:	01604534 	movhi	r5,33044
81100a64:	29406204 	addi	r5,r5,392
81100a68:	1009883a 	mov	r4,r2
81100a6c:	11110c40 	call	811110c4 <fprintf>
81100a70:	00025306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 5) {
81100a74:	e0bfbc17 	ldw	r2,-272(fp)
81100a78:	10800158 	cmpnei	r2,r2,5
81100a7c:	1000101e 	bne	r2,zero,81100ac0 <bDdr2EepromDump+0x314>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a80:	00e04534 	movhi	r3,33044
81100a84:	18c06204 	addi	r3,r3,392
81100a88:	00a04534 	movhi	r2,33044
81100a8c:	10ac9504 	addi	r2,r2,-19884
81100a90:	1009883a 	mov	r4,r2
81100a94:	00800c04 	movi	r2,48
81100a98:	100d883a 	mov	r6,r2
81100a9c:	200b883a 	mov	r5,r4
81100aa0:	1809883a 	mov	r4,r3
81100aa4:	11120c40 	call	811120c4 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
81100aa8:	d0a04d17 	ldw	r2,-32460(gp)
81100aac:	01604534 	movhi	r5,33044
81100ab0:	29406204 	addi	r5,r5,392
81100ab4:	1009883a 	mov	r4,r2
81100ab8:	11110c40 	call	811110c4 <fprintf>
81100abc:	00024006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 6) {
81100ac0:	e0bfbc17 	ldw	r2,-272(fp)
81100ac4:	10800198 	cmpnei	r2,r2,6
81100ac8:	1000101e 	bne	r2,zero,81100b0c <bDdr2EepromDump+0x360>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
81100acc:	00e04534 	movhi	r3,33044
81100ad0:	18c06204 	addi	r3,r3,392
81100ad4:	00a04534 	movhi	r2,33044
81100ad8:	10aca104 	addi	r2,r2,-19836
81100adc:	1009883a 	mov	r4,r2
81100ae0:	00800544 	movi	r2,21
81100ae4:	100d883a 	mov	r6,r2
81100ae8:	200b883a 	mov	r5,r4
81100aec:	1809883a 	mov	r4,r3
81100af0:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
81100af4:	d0a04d17 	ldw	r2,-32460(gp)
81100af8:	01604534 	movhi	r5,33044
81100afc:	29406204 	addi	r5,r5,392
81100b00:	1009883a 	mov	r4,r2
81100b04:	11110c40 	call	811110c4 <fprintf>
81100b08:	00022d06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 7) {
81100b0c:	e0bfbc17 	ldw	r2,-272(fp)
81100b10:	108001d8 	cmpnei	r2,r2,7
81100b14:	1000101e 	bne	r2,zero,81100b58 <bDdr2EepromDump+0x3ac>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
81100b18:	00e04534 	movhi	r3,33044
81100b1c:	18c06204 	addi	r3,r3,392
81100b20:	00a04534 	movhi	r2,33044
81100b24:	10aca704 	addi	r2,r2,-19812
81100b28:	1009883a 	mov	r4,r2
81100b2c:	00800804 	movi	r2,32
81100b30:	100d883a 	mov	r6,r2
81100b34:	200b883a 	mov	r5,r4
81100b38:	1809883a 	mov	r4,r3
81100b3c:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
81100b40:	d0a04d17 	ldw	r2,-32460(gp)
81100b44:	01604534 	movhi	r5,33044
81100b48:	29406204 	addi	r5,r5,392
81100b4c:	1009883a 	mov	r4,r2
81100b50:	11110c40 	call	811110c4 <fprintf>
81100b54:	00021a06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 16) {
81100b58:	e0bfbc17 	ldw	r2,-272(fp)
81100b5c:	10800418 	cmpnei	r2,r2,16
81100b60:	1000101e 	bne	r2,zero,81100ba4 <bDdr2EepromDump+0x3f8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100b64:	00e04534 	movhi	r3,33044
81100b68:	18c06204 	addi	r3,r3,392
81100b6c:	00a04534 	movhi	r2,33044
81100b70:	10acaf04 	addi	r2,r2,-19780
81100b74:	1009883a 	mov	r4,r2
81100b78:	00800d04 	movi	r2,52
81100b7c:	100d883a 	mov	r6,r2
81100b80:	200b883a 	mov	r5,r4
81100b84:	1809883a 	mov	r4,r3
81100b88:	11120c40 	call	811120c4 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
81100b8c:	d0a04d17 	ldw	r2,-32460(gp)
81100b90:	01604534 	movhi	r5,33044
81100b94:	29406204 	addi	r5,r5,392
81100b98:	1009883a 	mov	r4,r2
81100b9c:	11110c40 	call	811110c4 <fprintf>
81100ba0:	00020706 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 13) {
81100ba4:	e0bfbc17 	ldw	r2,-272(fp)
81100ba8:	10800358 	cmpnei	r2,r2,13
81100bac:	1000101e 	bne	r2,zero,81100bf0 <bDdr2EepromDump+0x444>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
81100bb0:	00e04534 	movhi	r3,33044
81100bb4:	18c06204 	addi	r3,r3,392
81100bb8:	00a04534 	movhi	r2,33044
81100bbc:	10acbc04 	addi	r2,r2,-19728
81100bc0:	1009883a 	mov	r4,r2
81100bc4:	008005c4 	movi	r2,23
81100bc8:	100d883a 	mov	r6,r2
81100bcc:	200b883a 	mov	r5,r4
81100bd0:	1809883a 	mov	r4,r3
81100bd4:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
81100bd8:	d0a04d17 	ldw	r2,-32460(gp)
81100bdc:	01604534 	movhi	r5,33044
81100be0:	29406204 	addi	r5,r5,392
81100be4:	1009883a 	mov	r4,r2
81100be8:	11110c40 	call	811110c4 <fprintf>
81100bec:	0001f406 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 14) {
81100bf0:	e0bfbc17 	ldw	r2,-272(fp)
81100bf4:	10800398 	cmpnei	r2,r2,14
81100bf8:	1000101e 	bne	r2,zero,81100c3c <bDdr2EepromDump+0x490>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
81100bfc:	00e04534 	movhi	r3,33044
81100c00:	18c06204 	addi	r3,r3,392
81100c04:	00a04534 	movhi	r2,33044
81100c08:	10acc204 	addi	r2,r2,-19704
81100c0c:	1009883a 	mov	r4,r2
81100c10:	008004c4 	movi	r2,19
81100c14:	100d883a 	mov	r6,r2
81100c18:	200b883a 	mov	r5,r4
81100c1c:	1809883a 	mov	r4,r3
81100c20:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
81100c24:	d0a04d17 	ldw	r2,-32460(gp)
81100c28:	01604534 	movhi	r5,33044
81100c2c:	29406204 	addi	r5,r5,392
81100c30:	1009883a 	mov	r4,r2
81100c34:	11110c40 	call	811110c4 <fprintf>
81100c38:	0001e106 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 17) {
81100c3c:	e0bfbc17 	ldw	r2,-272(fp)
81100c40:	10800458 	cmpnei	r2,r2,17
81100c44:	1000101e 	bne	r2,zero,81100c88 <bDdr2EepromDump+0x4dc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
81100c48:	00e04534 	movhi	r3,33044
81100c4c:	18c06204 	addi	r3,r3,392
81100c50:	00a04534 	movhi	r2,33044
81100c54:	10acc704 	addi	r2,r2,-19684
81100c58:	1009883a 	mov	r4,r2
81100c5c:	00800684 	movi	r2,26
81100c60:	100d883a 	mov	r6,r2
81100c64:	200b883a 	mov	r5,r4
81100c68:	1809883a 	mov	r4,r3
81100c6c:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
81100c70:	d0a04d17 	ldw	r2,-32460(gp)
81100c74:	01604534 	movhi	r5,33044
81100c78:	29406204 	addi	r5,r5,392
81100c7c:	1009883a 	mov	r4,r2
81100c80:	11110c40 	call	811110c4 <fprintf>
81100c84:	0001ce06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 18) {
81100c88:	e0bfbc17 	ldw	r2,-272(fp)
81100c8c:	10800498 	cmpnei	r2,r2,18
81100c90:	1000101e 	bne	r2,zero,81100cd4 <bDdr2EepromDump+0x528>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100c94:	00e04534 	movhi	r3,33044
81100c98:	18c06204 	addi	r3,r3,392
81100c9c:	00a04534 	movhi	r2,33044
81100ca0:	10acce04 	addi	r2,r2,-19656
81100ca4:	1009883a 	mov	r4,r2
81100ca8:	00800d44 	movi	r2,53
81100cac:	100d883a 	mov	r6,r2
81100cb0:	200b883a 	mov	r5,r4
81100cb4:	1809883a 	mov	r4,r3
81100cb8:	11120c40 	call	811120c4 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
81100cbc:	d0a04d17 	ldw	r2,-32460(gp)
81100cc0:	01604534 	movhi	r5,33044
81100cc4:	29406204 	addi	r5,r5,392
81100cc8:	1009883a 	mov	r4,r2
81100ccc:	11110c40 	call	811110c4 <fprintf>
81100cd0:	0001bb06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 20) {
81100cd4:	e0bfbc17 	ldw	r2,-272(fp)
81100cd8:	10800518 	cmpnei	r2,r2,20
81100cdc:	1000101e 	bne	r2,zero,81100d20 <bDdr2EepromDump+0x574>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ce0:	00e04534 	movhi	r3,33044
81100ce4:	18c06204 	addi	r3,r3,392
81100ce8:	00a04534 	movhi	r2,33044
81100cec:	10acdc04 	addi	r2,r2,-19600
81100cf0:	1009883a 	mov	r4,r2
81100cf4:	00801204 	movi	r2,72
81100cf8:	100d883a 	mov	r6,r2
81100cfc:	200b883a 	mov	r5,r4
81100d00:	1809883a 	mov	r4,r3
81100d04:	11120c40 	call	811120c4 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
81100d08:	d0a04d17 	ldw	r2,-32460(gp)
81100d0c:	01604534 	movhi	r5,33044
81100d10:	29406204 	addi	r5,r5,392
81100d14:	1009883a 	mov	r4,r2
81100d18:	11110c40 	call	811110c4 <fprintf>
81100d1c:	0001a806 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 22) {
81100d20:	e0bfbc17 	ldw	r2,-272(fp)
81100d24:	10800598 	cmpnei	r2,r2,22
81100d28:	1000101e 	bne	r2,zero,81100d6c <bDdr2EepromDump+0x5c0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
81100d2c:	00e04534 	movhi	r3,33044
81100d30:	18c06204 	addi	r3,r3,392
81100d34:	00a04534 	movhi	r2,33044
81100d38:	10acee04 	addi	r2,r2,-19528
81100d3c:	1009883a 	mov	r4,r2
81100d40:	00800784 	movi	r2,30
81100d44:	100d883a 	mov	r6,r2
81100d48:	200b883a 	mov	r5,r4
81100d4c:	1809883a 	mov	r4,r3
81100d50:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
81100d54:	d0a04d17 	ldw	r2,-32460(gp)
81100d58:	01604534 	movhi	r5,33044
81100d5c:	29406204 	addi	r5,r5,392
81100d60:	1009883a 	mov	r4,r2
81100d64:	11110c40 	call	811110c4 <fprintf>
81100d68:	00019506 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 27) {
81100d6c:	e0bfbc17 	ldw	r2,-272(fp)
81100d70:	108006d8 	cmpnei	r2,r2,27
81100d74:	1000101e 	bne	r2,zero,81100db8 <bDdr2EepromDump+0x60c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d78:	00e04534 	movhi	r3,33044
81100d7c:	18c06204 	addi	r3,r3,392
81100d80:	00a04534 	movhi	r2,33044
81100d84:	10acf604 	addi	r2,r2,-19496
81100d88:	1009883a 	mov	r4,r2
81100d8c:	00800a04 	movi	r2,40
81100d90:	100d883a 	mov	r6,r2
81100d94:	200b883a 	mov	r5,r4
81100d98:	1809883a 	mov	r4,r3
81100d9c:	11120c40 	call	811120c4 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100da0:	d0a04d17 	ldw	r2,-32460(gp)
81100da4:	01604534 	movhi	r5,33044
81100da8:	29406204 	addi	r5,r5,392
81100dac:	1009883a 	mov	r4,r2
81100db0:	11110c40 	call	811110c4 <fprintf>
81100db4:	00018206 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 28) {
81100db8:	e0bfbc17 	ldw	r2,-272(fp)
81100dbc:	10800718 	cmpnei	r2,r2,28
81100dc0:	1000101e 	bne	r2,zero,81100e04 <bDdr2EepromDump+0x658>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100dc4:	00e04534 	movhi	r3,33044
81100dc8:	18c06204 	addi	r3,r3,392
81100dcc:	00a04534 	movhi	r2,33044
81100dd0:	10ad0004 	addi	r2,r2,-19456
81100dd4:	1009883a 	mov	r4,r2
81100dd8:	00800cc4 	movi	r2,51
81100ddc:	100d883a 	mov	r6,r2
81100de0:	200b883a 	mov	r5,r4
81100de4:	1809883a 	mov	r4,r3
81100de8:	11120c40 	call	811120c4 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100dec:	d0a04d17 	ldw	r2,-32460(gp)
81100df0:	01604534 	movhi	r5,33044
81100df4:	29406204 	addi	r5,r5,392
81100df8:	1009883a 	mov	r4,r2
81100dfc:	11110c40 	call	811110c4 <fprintf>
81100e00:	00016f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 29) {
81100e04:	e0bfbc17 	ldw	r2,-272(fp)
81100e08:	10800758 	cmpnei	r2,r2,29
81100e0c:	1000101e 	bne	r2,zero,81100e50 <bDdr2EepromDump+0x6a4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e10:	00e04534 	movhi	r3,33044
81100e14:	18c06204 	addi	r3,r3,392
81100e18:	00a04534 	movhi	r2,33044
81100e1c:	10ad0d04 	addi	r2,r2,-19404
81100e20:	1009883a 	mov	r4,r2
81100e24:	008009c4 	movi	r2,39
81100e28:	100d883a 	mov	r6,r2
81100e2c:	200b883a 	mov	r5,r4
81100e30:	1809883a 	mov	r4,r3
81100e34:	11120c40 	call	811120c4 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e38:	d0a04d17 	ldw	r2,-32460(gp)
81100e3c:	01604534 	movhi	r5,33044
81100e40:	29406204 	addi	r5,r5,392
81100e44:	1009883a 	mov	r4,r2
81100e48:	11110c40 	call	811110c4 <fprintf>
81100e4c:	00015c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 30) {
81100e50:	e0bfbc17 	ldw	r2,-272(fp)
81100e54:	10800798 	cmpnei	r2,r2,30
81100e58:	1000101e 	bne	r2,zero,81100e9c <bDdr2EepromDump+0x6f0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e5c:	00e04534 	movhi	r3,33044
81100e60:	18c06204 	addi	r3,r3,392
81100e64:	00a04534 	movhi	r2,33044
81100e68:	10ad1704 	addi	r2,r2,-19364
81100e6c:	1009883a 	mov	r4,r2
81100e70:	00800b04 	movi	r2,44
81100e74:	100d883a 	mov	r6,r2
81100e78:	200b883a 	mov	r5,r4
81100e7c:	1809883a 	mov	r4,r3
81100e80:	11120c40 	call	811120c4 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
81100e84:	d0a04d17 	ldw	r2,-32460(gp)
81100e88:	01604534 	movhi	r5,33044
81100e8c:	29406204 	addi	r5,r5,392
81100e90:	1009883a 	mov	r4,r2
81100e94:	11110c40 	call	811110c4 <fprintf>
81100e98:	00014906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 31) {
81100e9c:	e0bfbc17 	ldw	r2,-272(fp)
81100ea0:	108007d8 	cmpnei	r2,r2,31
81100ea4:	1000101e 	bne	r2,zero,81100ee8 <bDdr2EepromDump+0x73c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ea8:	00e04534 	movhi	r3,33044
81100eac:	18c06204 	addi	r3,r3,392
81100eb0:	00a04534 	movhi	r2,33044
81100eb4:	10ad2204 	addi	r2,r2,-19320
81100eb8:	1009883a 	mov	r4,r2
81100ebc:	008010c4 	movi	r2,67
81100ec0:	100d883a 	mov	r6,r2
81100ec4:	200b883a 	mov	r5,r4
81100ec8:	1809883a 	mov	r4,r3
81100ecc:	11120c40 	call	811120c4 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
81100ed0:	d0a04d17 	ldw	r2,-32460(gp)
81100ed4:	01604534 	movhi	r5,33044
81100ed8:	29406204 	addi	r5,r5,392
81100edc:	1009883a 	mov	r4,r2
81100ee0:	11110c40 	call	811110c4 <fprintf>
81100ee4:	00013606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 36) {
81100ee8:	e0bfbc17 	ldw	r2,-272(fp)
81100eec:	10800918 	cmpnei	r2,r2,36
81100ef0:	1000101e 	bne	r2,zero,81100f34 <bDdr2EepromDump+0x788>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ef4:	00e04534 	movhi	r3,33044
81100ef8:	18c06204 	addi	r3,r3,392
81100efc:	00a04534 	movhi	r2,33044
81100f00:	10ad3304 	addi	r2,r2,-19252
81100f04:	1009883a 	mov	r4,r2
81100f08:	00800a84 	movi	r2,42
81100f0c:	100d883a 	mov	r6,r2
81100f10:	200b883a 	mov	r5,r4
81100f14:	1809883a 	mov	r4,r3
81100f18:	11120c40 	call	811120c4 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f1c:	d0a04d17 	ldw	r2,-32460(gp)
81100f20:	01604534 	movhi	r5,33044
81100f24:	29406204 	addi	r5,r5,392
81100f28:	1009883a 	mov	r4,r2
81100f2c:	11110c40 	call	811110c4 <fprintf>
81100f30:	00012306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 37) {
81100f34:	e0bfbc17 	ldw	r2,-272(fp)
81100f38:	10800958 	cmpnei	r2,r2,37
81100f3c:	1000101e 	bne	r2,zero,81100f80 <bDdr2EepromDump+0x7d4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f40:	00e04534 	movhi	r3,33044
81100f44:	18c06204 	addi	r3,r3,392
81100f48:	00a04534 	movhi	r2,33044
81100f4c:	10ad3e04 	addi	r2,r2,-19208
81100f50:	1009883a 	mov	r4,r2
81100f54:	00800cc4 	movi	r2,51
81100f58:	100d883a 	mov	r6,r2
81100f5c:	200b883a 	mov	r5,r4
81100f60:	1809883a 	mov	r4,r3
81100f64:	11120c40 	call	811120c4 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f68:	d0a04d17 	ldw	r2,-32460(gp)
81100f6c:	01604534 	movhi	r5,33044
81100f70:	29406204 	addi	r5,r5,392
81100f74:	1009883a 	mov	r4,r2
81100f78:	11110c40 	call	811110c4 <fprintf>
81100f7c:	00011006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 38) {
81100f80:	e0bfbc17 	ldw	r2,-272(fp)
81100f84:	10800998 	cmpnei	r2,r2,38
81100f88:	1000101e 	bne	r2,zero,81100fcc <bDdr2EepromDump+0x820>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f8c:	00e04534 	movhi	r3,33044
81100f90:	18c06204 	addi	r3,r3,392
81100f94:	00a04534 	movhi	r2,33044
81100f98:	10ad4b04 	addi	r2,r2,-19156
81100f9c:	1009883a 	mov	r4,r2
81100fa0:	00800dc4 	movi	r2,55
81100fa4:	100d883a 	mov	r6,r2
81100fa8:	200b883a 	mov	r5,r4
81100fac:	1809883a 	mov	r4,r3
81100fb0:	11120c40 	call	811120c4 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100fb4:	d0a04d17 	ldw	r2,-32460(gp)
81100fb8:	01604534 	movhi	r5,33044
81100fbc:	29406204 	addi	r5,r5,392
81100fc0:	1009883a 	mov	r4,r2
81100fc4:	11110c40 	call	811110c4 <fprintf>
81100fc8:	0000fd06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 41) {
81100fcc:	e0bfbc17 	ldw	r2,-272(fp)
81100fd0:	10800a58 	cmpnei	r2,r2,41
81100fd4:	1000101e 	bne	r2,zero,81101018 <bDdr2EepromDump+0x86c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100fd8:	00e04534 	movhi	r3,33044
81100fdc:	18c06204 	addi	r3,r3,392
81100fe0:	00a04534 	movhi	r2,33044
81100fe4:	10ad5904 	addi	r2,r2,-19100
81100fe8:	1009883a 	mov	r4,r2
81100fec:	00800c84 	movi	r2,50
81100ff0:	100d883a 	mov	r6,r2
81100ff4:	200b883a 	mov	r5,r4
81100ff8:	1809883a 	mov	r4,r3
81100ffc:	11120c40 	call	811120c4 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
81101000:	d0a04d17 	ldw	r2,-32460(gp)
81101004:	01604534 	movhi	r5,33044
81101008:	29406204 	addi	r5,r5,392
8110100c:	1009883a 	mov	r4,r2
81101010:	11110c40 	call	811110c4 <fprintf>
81101014:	0000ea06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 42) {
81101018:	e0bfbc17 	ldw	r2,-272(fp)
8110101c:	10800a98 	cmpnei	r2,r2,42
81101020:	1000101e 	bne	r2,zero,81101064 <bDdr2EepromDump+0x8b8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101024:	00e04534 	movhi	r3,33044
81101028:	18c06204 	addi	r3,r3,392
8110102c:	00a04534 	movhi	r2,33044
81101030:	10ad6604 	addi	r2,r2,-19048
81101034:	1009883a 	mov	r4,r2
81101038:	00800cc4 	movi	r2,51
8110103c:	100d883a 	mov	r6,r2
81101040:	200b883a 	mov	r5,r4
81101044:	1809883a 	mov	r4,r3
81101048:	11120c40 	call	811120c4 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
8110104c:	d0a04d17 	ldw	r2,-32460(gp)
81101050:	01604534 	movhi	r5,33044
81101054:	29406204 	addi	r5,r5,392
81101058:	1009883a 	mov	r4,r2
8110105c:	11110c40 	call	811110c4 <fprintf>
81101060:	0000d706 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 62) {
81101064:	e0bfbc17 	ldw	r2,-272(fp)
81101068:	10800f98 	cmpnei	r2,r2,62
8110106c:	1000101e 	bne	r2,zero,811010b0 <bDdr2EepromDump+0x904>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
81101070:	00e04534 	movhi	r3,33044
81101074:	18c06204 	addi	r3,r3,392
81101078:	00a04534 	movhi	r2,33044
8110107c:	10ad7304 	addi	r2,r2,-18996
81101080:	1009883a 	mov	r4,r2
81101084:	00800404 	movi	r2,16
81101088:	100d883a 	mov	r6,r2
8110108c:	200b883a 	mov	r5,r4
81101090:	1809883a 	mov	r4,r3
81101094:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
81101098:	d0a04d17 	ldw	r2,-32460(gp)
8110109c:	01604534 	movhi	r5,33044
811010a0:	29406204 	addi	r5,r5,392
811010a4:	1009883a 	mov	r4,r2
811010a8:	11110c40 	call	811110c4 <fprintf>
811010ac:	0000c406 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 63) {
811010b0:	e0bfbc17 	ldw	r2,-272(fp)
811010b4:	10800fd8 	cmpnei	r2,r2,63
811010b8:	10001f1e 	bne	r2,zero,81101138 <bDdr2EepromDump+0x98c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
811010bc:	00a04534 	movhi	r2,33044
811010c0:	10806204 	addi	r2,r2,392
811010c4:	00c00a04 	movi	r3,40
811010c8:	10c00005 	stb	r3,0(r2)
811010cc:	00c010c4 	movi	r3,67
811010d0:	10c00045 	stb	r3,1(r2)
811010d4:	00c01a04 	movi	r3,104
811010d8:	10c00085 	stb	r3,2(r2)
811010dc:	00c01944 	movi	r3,101
811010e0:	10c000c5 	stb	r3,3(r2)
811010e4:	00c018c4 	movi	r3,99
811010e8:	10c00105 	stb	r3,4(r2)
811010ec:	00c01ac4 	movi	r3,107
811010f0:	10c00145 	stb	r3,5(r2)
811010f4:	00c01cc4 	movi	r3,115
811010f8:	10c00185 	stb	r3,6(r2)
811010fc:	00c01d44 	movi	r3,117
81101100:	10c001c5 	stb	r3,7(r2)
81101104:	00c01b44 	movi	r3,109
81101108:	10c00205 	stb	r3,8(r2)
8110110c:	00c00a44 	movi	r3,41
81101110:	10c00245 	stb	r3,9(r2)
81101114:	00c00284 	movi	r3,10
81101118:	10c00285 	stb	r3,10(r2)
8110111c:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
81101120:	d0a04d17 	ldw	r2,-32460(gp)
81101124:	01604534 	movhi	r5,33044
81101128:	29406204 	addi	r5,r5,392
8110112c:	1009883a 	mov	r4,r2
81101130:	11110c40 	call	811110c4 <fprintf>
81101134:	0000a206 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 64) {
81101138:	e0bfbc17 	ldw	r2,-272(fp)
8110113c:	10801018 	cmpnei	r2,r2,64
81101140:	1000101e 	bne	r2,zero,81101184 <bDdr2EepromDump+0x9d8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
81101144:	00e04534 	movhi	r3,33044
81101148:	18c06204 	addi	r3,r3,392
8110114c:	00a04534 	movhi	r2,33044
81101150:	10ad7704 	addi	r2,r2,-18980
81101154:	1009883a 	mov	r4,r2
81101158:	00800804 	movi	r2,32
8110115c:	100d883a 	mov	r6,r2
81101160:	200b883a 	mov	r5,r4
81101164:	1809883a 	mov	r4,r3
81101168:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
8110116c:	d0a04d17 	ldw	r2,-32460(gp)
81101170:	01604534 	movhi	r5,33044
81101174:	29406204 	addi	r5,r5,392
81101178:	1009883a 	mov	r4,r2
8110117c:	11110c40 	call	811110c4 <fprintf>
81101180:	00008f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 72) {
81101184:	e0bfbc17 	ldw	r2,-272(fp)
81101188:	10801218 	cmpnei	r2,r2,72
8110118c:	1000101e 	bne	r2,zero,811011d0 <bDdr2EepromDump+0xa24>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101190:	00e04534 	movhi	r3,33044
81101194:	18c06204 	addi	r3,r3,392
81101198:	00a04534 	movhi	r2,33044
8110119c:	10ad7f04 	addi	r2,r2,-18948
811011a0:	1009883a 	mov	r4,r2
811011a4:	00800dc4 	movi	r2,55
811011a8:	100d883a 	mov	r6,r2
811011ac:	200b883a 	mov	r5,r4
811011b0:	1809883a 	mov	r4,r3
811011b4:	11120c40 	call	811120c4 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
811011b8:	d0a04d17 	ldw	r2,-32460(gp)
811011bc:	01604534 	movhi	r5,33044
811011c0:	29406204 	addi	r5,r5,392
811011c4:	1009883a 	mov	r4,r2
811011c8:	11110c40 	call	811110c4 <fprintf>
811011cc:	00007c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 73) {
811011d0:	e0bfbc17 	ldw	r2,-272(fp)
811011d4:	10801258 	cmpnei	r2,r2,73
811011d8:	1000101e 	bne	r2,zero,8110121c <bDdr2EepromDump+0xa70>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
811011dc:	00e04534 	movhi	r3,33044
811011e0:	18c06204 	addi	r3,r3,392
811011e4:	00a04534 	movhi	r2,33044
811011e8:	10ad8d04 	addi	r2,r2,-18892
811011ec:	1009883a 	mov	r4,r2
811011f0:	00800784 	movi	r2,30
811011f4:	100d883a 	mov	r6,r2
811011f8:	200b883a 	mov	r5,r4
811011fc:	1809883a 	mov	r4,r3
81101200:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
81101204:	d0a04d17 	ldw	r2,-32460(gp)
81101208:	01604534 	movhi	r5,33044
8110120c:	29406204 	addi	r5,r5,392
81101210:	1009883a 	mov	r4,r2
81101214:	11110c40 	call	811110c4 <fprintf>
81101218:	00006906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 91) {
8110121c:	e0bfbc17 	ldw	r2,-272(fp)
81101220:	108016d8 	cmpnei	r2,r2,91
81101224:	1000101e 	bne	r2,zero,81101268 <bDdr2EepromDump+0xabc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
81101228:	00e04534 	movhi	r3,33044
8110122c:	18c06204 	addi	r3,r3,392
81101230:	00a04534 	movhi	r2,33044
81101234:	10ad9504 	addi	r2,r2,-18860
81101238:	1009883a 	mov	r4,r2
8110123c:	00800804 	movi	r2,32
81101240:	100d883a 	mov	r6,r2
81101244:	200b883a 	mov	r5,r4
81101248:	1809883a 	mov	r4,r3
8110124c:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
81101250:	d0a04d17 	ldw	r2,-32460(gp)
81101254:	01604534 	movhi	r5,33044
81101258:	29406204 	addi	r5,r5,392
8110125c:	1009883a 	mov	r4,r2
81101260:	11110c40 	call	811110c4 <fprintf>
81101264:	00005606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 93) {
81101268:	e0bfbc17 	ldw	r2,-272(fp)
8110126c:	10801758 	cmpnei	r2,r2,93
81101270:	1000101e 	bne	r2,zero,811012b4 <bDdr2EepromDump+0xb08>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101274:	00e04534 	movhi	r3,33044
81101278:	18c06204 	addi	r3,r3,392
8110127c:	00a04534 	movhi	r2,33044
81101280:	10ad9d04 	addi	r2,r2,-18828
81101284:	1009883a 	mov	r4,r2
81101288:	008009c4 	movi	r2,39
8110128c:	100d883a 	mov	r6,r2
81101290:	200b883a 	mov	r5,r4
81101294:	1809883a 	mov	r4,r3
81101298:	11120c40 	call	811120c4 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
8110129c:	d0a04d17 	ldw	r2,-32460(gp)
811012a0:	01604534 	movhi	r5,33044
811012a4:	29406204 	addi	r5,r5,392
811012a8:	1009883a 	mov	r4,r2
811012ac:	11110c40 	call	811110c4 <fprintf>
811012b0:	00004306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 94) {
811012b4:	e0bfbc17 	ldw	r2,-272(fp)
811012b8:	10801798 	cmpnei	r2,r2,94
811012bc:	1000101e 	bne	r2,zero,81101300 <bDdr2EepromDump+0xb54>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
811012c0:	00e04534 	movhi	r3,33044
811012c4:	18c06204 	addi	r3,r3,392
811012c8:	00a04534 	movhi	r2,33044
811012cc:	10ada704 	addi	r2,r2,-18788
811012d0:	1009883a 	mov	r4,r2
811012d4:	008006c4 	movi	r2,27
811012d8:	100d883a 	mov	r6,r2
811012dc:	200b883a 	mov	r5,r4
811012e0:	1809883a 	mov	r4,r3
811012e4:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
811012e8:	d0a04d17 	ldw	r2,-32460(gp)
811012ec:	01604534 	movhi	r5,33044
811012f0:	29406204 	addi	r5,r5,392
811012f4:	1009883a 	mov	r4,r2
811012f8:	11110c40 	call	811110c4 <fprintf>
811012fc:	00003006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 95) {
81101300:	e0bfbc17 	ldw	r2,-272(fp)
81101304:	108017d8 	cmpnei	r2,r2,95
81101308:	1000101e 	bne	r2,zero,8110134c <bDdr2EepromDump+0xba0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110130c:	00e04534 	movhi	r3,33044
81101310:	18c06204 	addi	r3,r3,392
81101314:	00a04534 	movhi	r2,33044
81101318:	10adae04 	addi	r2,r2,-18760
8110131c:	1009883a 	mov	r4,r2
81101320:	00800a04 	movi	r2,40
81101324:	100d883a 	mov	r6,r2
81101328:	200b883a 	mov	r5,r4
8110132c:	1809883a 	mov	r4,r3
81101330:	11120c40 	call	811120c4 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
81101334:	d0a04d17 	ldw	r2,-32460(gp)
81101338:	01604534 	movhi	r5,33044
8110133c:	29406204 	addi	r5,r5,392
81101340:	1009883a 	mov	r4,r2
81101344:	11110c40 	call	811110c4 <fprintf>
81101348:	00001d06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 99) {
8110134c:	e0bfbc17 	ldw	r2,-272(fp)
81101350:	108018d8 	cmpnei	r2,r2,99
81101354:	1000101e 	bne	r2,zero,81101398 <bDdr2EepromDump+0xbec>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
81101358:	00e04534 	movhi	r3,33044
8110135c:	18c06204 	addi	r3,r3,392
81101360:	00a04534 	movhi	r2,33044
81101364:	10adb804 	addi	r2,r2,-18720
81101368:	1009883a 	mov	r4,r2
8110136c:	00800984 	movi	r2,38
81101370:	100d883a 	mov	r6,r2
81101374:	200b883a 	mov	r5,r4
81101378:	1809883a 	mov	r4,r3
8110137c:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
81101380:	d0a04d17 	ldw	r2,-32460(gp)
81101384:	01604534 	movhi	r5,33044
81101388:	29406204 	addi	r5,r5,392
8110138c:	1009883a 	mov	r4,r2
81101390:	11110c40 	call	811110c4 <fprintf>
81101394:	00000a06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "\n");
81101398:	00a04534 	movhi	r2,33044
8110139c:	10806204 	addi	r2,r2,392
811013a0:	00c00284 	movi	r3,10
811013a4:	10c00005 	stb	r3,0(r2)
811013a8:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
811013ac:	d0a04d17 	ldw	r2,-32460(gp)
811013b0:	01604534 	movhi	r5,33044
811013b4:	29406204 	addi	r5,r5,392
811013b8:	1009883a 	mov	r4,r2
811013bc:	11110c40 	call	811110c4 <fprintf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811013c0:	e0bfbc17 	ldw	r2,-272(fp)
811013c4:	10800044 	addi	r2,r2,1
811013c8:	e0bfbc15 	stw	r2,-272(fp)
811013cc:	e0bfbc17 	ldw	r2,-272(fp)
811013d0:	10804008 	cmpgei	r2,r2,256
811013d4:	1000121e 	bne	r2,zero,81101420 <bDdr2EepromDump+0xc74>
811013d8:	e0bfbe17 	ldw	r2,-264(fp)
811013dc:	103d451e 	bne	r2,zero,811008f4 <__reset+0xfb0e08f4>
811013e0:	00000f06 	br	81101420 <bDdr2EepromDump+0xc74>
#endif
			}
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
811013e4:	00e04534 	movhi	r3,33044
811013e8:	18c06204 	addi	r3,r3,392
811013ec:	00a04534 	movhi	r2,33044
811013f0:	10adc204 	addi	r2,r2,-18680
811013f4:	1009883a 	mov	r4,r2
811013f8:	008005c4 	movi	r2,23
811013fc:	100d883a 	mov	r6,r2
81101400:	200b883a 	mov	r5,r4
81101404:	1809883a 	mov	r4,r3
81101408:	11120c40 	call	811120c4 <memcpy>
		debug(fp, cDebugBuffer);
8110140c:	d0a04d17 	ldw	r2,-32460(gp)
81101410:	01604534 	movhi	r5,33044
81101414:	29406204 	addi	r5,r5,392
81101418:	1009883a 	mov	r4,r2
8110141c:	11110c40 	call	811110c4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101420:	00a04534 	movhi	r2,33044
81101424:	10806204 	addi	r2,r2,392
81101428:	00c00284 	movi	r3,10
8110142c:	10c00005 	stb	r3,0(r2)
81101430:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101434:	d0a04d17 	ldw	r2,-32460(gp)
81101438:	01604534 	movhi	r5,33044
8110143c:	29406204 	addi	r5,r5,392
81101440:	1009883a 	mov	r4,r2
81101444:	11110c40 	call	811110c4 <fprintf>
#endif

	return bSuccess;
81101448:	e0bfbe17 	ldw	r2,-264(fp)
}
8110144c:	e037883a 	mov	sp,fp
81101450:	dfc00117 	ldw	ra,4(sp)
81101454:	df000017 	ldw	fp,0(sp)
81101458:	dec00204 	addi	sp,sp,8
8110145c:	f800283a 	ret

81101460 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
81101460:	defffb04 	addi	sp,sp,-20
81101464:	de00012e 	bgeu	sp,et,8110146c <bDdr2SwitchMemory+0xc>
81101468:	003b68fa 	trap	3
8110146c:	dfc00415 	stw	ra,16(sp)
81101470:	df000315 	stw	fp,12(sp)
81101474:	df000304 	addi	fp,sp,12
81101478:	2005883a 	mov	r2,r4
8110147c:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
81101480:	00a04834 	movhi	r2,33056
81101484:	108c2204 	addi	r2,r2,12424
81101488:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = TRUE;
8110148c:	00800044 	movi	r2,1
81101490:	e0bffd15 	stw	r2,-12(fp)
	switch (ucMemoryId) {
81101494:	e0bfff03 	ldbu	r2,-4(fp)
81101498:	10c00060 	cmpeqi	r3,r2,1
8110149c:	1800031e 	bne	r3,zero,811014ac <bDdr2SwitchMemory+0x4c>
811014a0:	108000a0 	cmpeqi	r2,r2,2
811014a4:	1000041e 	bne	r2,zero,811014b8 <bDdr2SwitchMemory+0x58>
811014a8:	00000706 	br	811014c8 <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
811014ac:	e0bffe17 	ldw	r2,-8(fp)
811014b0:	10000015 	stw	zero,0(r2)
		break;
811014b4:	00001406 	br	81101508 <bDdr2SwitchMemory+0xa8>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
811014b8:	e0bffe17 	ldw	r2,-8(fp)
811014bc:	00e00034 	movhi	r3,32768
811014c0:	10c00015 	stw	r3,0(r2)
		break;
811014c4:	00001006 	br	81101508 <bDdr2SwitchMemory+0xa8>
	default:
		bSuccess = FALSE;
811014c8:	e03ffd15 	stw	zero,-12(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811014cc:	00e04534 	movhi	r3,33044
811014d0:	18c06204 	addi	r3,r3,392
811014d4:	00a04534 	movhi	r2,33044
811014d8:	10adc804 	addi	r2,r2,-18656
811014dc:	1009883a 	mov	r4,r2
811014e0:	00800f04 	movi	r2,60
811014e4:	100d883a 	mov	r6,r2
811014e8:	200b883a 	mov	r5,r4
811014ec:	1809883a 	mov	r4,r3
811014f0:	11120c40 	call	811120c4 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
811014f4:	d0a04d17 	ldw	r2,-32460(gp)
811014f8:	01604534 	movhi	r5,33044
811014fc:	29406204 	addi	r5,r5,392
81101500:	1009883a 	mov	r4,r2
81101504:	11110c40 	call	811110c4 <fprintf>
		;
#endif
	}

	return bSuccess;
81101508:	e0bffd17 	ldw	r2,-12(fp)
}
8110150c:	e037883a 	mov	sp,fp
81101510:	dfc00117 	ldw	ra,4(sp)
81101514:	df000017 	ldw	fp,0(sp)
81101518:	dec00204 	addi	sp,sp,8
8110151c:	f800283a 	ret

81101520 <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
81101520:	deffe204 	addi	sp,sp,-120
81101524:	de00012e 	bgeu	sp,et,8110152c <bDdr2MemoryWriteTest+0xc>
81101528:	003b68fa 	trap	3
8110152c:	dfc01d15 	stw	ra,116(sp)
81101530:	df001c15 	stw	fp,112(sp)
81101534:	dc401b15 	stw	r17,108(sp)
81101538:	dc001a15 	stw	r16,104(sp)
8110153c:	df001c04 	addi	fp,sp,112
81101540:	2005883a 	mov	r2,r4
81101544:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
81101548:	00e04534 	movhi	r3,33044
8110154c:	18c06204 	addi	r3,r3,392
81101550:	00a04534 	movhi	r2,33044
81101554:	10add704 	addi	r2,r2,-18596
81101558:	1009883a 	mov	r4,r2
8110155c:	00800a04 	movi	r2,40
81101560:	100d883a 	mov	r6,r2
81101564:	200b883a 	mov	r5,r4
81101568:	1809883a 	mov	r4,r3
8110156c:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
81101570:	d0a04d17 	ldw	r2,-32460(gp)
81101574:	01604534 	movhi	r5,33044
81101578:	29406204 	addi	r5,r5,392
8110157c:	1009883a 	mov	r4,r2
81101580:	11110c40 	call	811110c4 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101584:	00800044 	movi	r2,1
81101588:	e0bfed15 	stw	r2,-76(fp)
	switch (ucMemoryId) {
8110158c:	e0bffd03 	ldbu	r2,-12(fp)
81101590:	10c00060 	cmpeqi	r3,r2,1
81101594:	1800031e 	bne	r3,zero,811015a4 <bDdr2MemoryWriteTest+0x84>
81101598:	108000a0 	cmpeqi	r2,r2,2
8110159c:	1000081e 	bne	r2,zero,811015c0 <bDdr2MemoryWriteTest+0xa0>
811015a0:	00000e06 	br	811015dc <bDdr2MemoryWriteTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015a4:	e0bffd03 	ldbu	r2,-12(fp)
811015a8:	1009883a 	mov	r4,r2
811015ac:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015b0:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811015b4:	00a00034 	movhi	r2,32768
811015b8:	e0bfe615 	stw	r2,-104(fp)
		break;
811015bc:	00001906 	br	81101624 <bDdr2MemoryWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015c0:	e0bffd03 	ldbu	r2,-12(fp)
811015c4:	1009883a 	mov	r4,r2
811015c8:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015cc:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811015d0:	00a00034 	movhi	r2,32768
811015d4:	e0bfe615 	stw	r2,-104(fp)
		break;
811015d8:	00001206 	br	81101624 <bDdr2MemoryWriteTest+0x104>
	default:
		bSuccess = FALSE;
811015dc:	e03fed15 	stw	zero,-76(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811015e0:	00e04534 	movhi	r3,33044
811015e4:	18c06204 	addi	r3,r3,392
811015e8:	00a04534 	movhi	r2,33044
811015ec:	10abe804 	addi	r2,r2,-20576
811015f0:	1009883a 	mov	r4,r2
811015f4:	00800bc4 	movi	r2,47
811015f8:	100d883a 	mov	r6,r2
811015fc:	200b883a 	mov	r5,r4
81101600:	1809883a 	mov	r4,r3
81101604:	11120c40 	call	811120c4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101608:	d0a04d17 	ldw	r2,-32460(gp)
8110160c:	01604534 	movhi	r5,33044
81101610:	29406204 	addi	r5,r5,392
81101614:	1009883a 	mov	r4,r2
81101618:	11110c40 	call	811110c4 <fprintf>
		;
#endif
		return bSuccess;
8110161c:	e0bfed17 	ldw	r2,-76(fp)
81101620:	00011806 	br	81101a84 <bDdr2MemoryWriteTest+0x564>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81101624:	e0bfe617 	ldw	r2,-104(fp)
81101628:	1004d53a 	srli	r2,r2,20
8110162c:	100d883a 	mov	r6,r2
81101630:	01604534 	movhi	r5,33044
81101634:	296de104 	addi	r5,r5,-18556
81101638:	01204534 	movhi	r4,33044
8110163c:	21006204 	addi	r4,r4,392
81101640:	111282c0 	call	8111282c <sprintf>
	debug(fp, cDebugBuffer);
81101644:	d0a04d17 	ldw	r2,-32460(gp)
81101648:	01604534 	movhi	r5,33044
8110164c:	29406204 	addi	r5,r5,392
81101650:	1009883a 	mov	r4,r2
81101654:	11110c40 	call	811110c4 <fprintf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
81101658:	00800104 	movi	r2,4
8110165c:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
81101660:	e03fec15 	stw	zero,-80(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101664:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
81101668:	e03fe715 	stw	zero,-100(fp)
8110166c:	00001506 	br	811016c4 <bDdr2MemoryWriteTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101670:	e0ffe617 	ldw	r3,-104(fp)
81101674:	00b33374 	movhi	r2,52429
81101678:	10b33344 	addi	r2,r2,-13107
8110167c:	1888383a 	mulxuu	r4,r3,r2
81101680:	1885383a 	mul	r2,r3,r2
81101684:	1021883a 	mov	r16,r2
81101688:	2023883a 	mov	r17,r4
8110168c:	8804d0fa 	srli	r2,r17,3
81101690:	e0ffe717 	ldw	r3,-100(fp)
81101694:	18c00044 	addi	r3,r3,1
81101698:	10c7383a 	mul	r3,r2,r3
8110169c:	e0bfe717 	ldw	r2,-100(fp)
811016a0:	1085883a 	add	r2,r2,r2
811016a4:	1085883a 	add	r2,r2,r2
811016a8:	e13fe504 	addi	r4,fp,-108
811016ac:	2085883a 	add	r2,r4,r2
811016b0:	10800e04 	addi	r2,r2,56
811016b4:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
811016b8:	e0bfe717 	ldw	r2,-100(fp)
811016bc:	10800044 	addi	r2,r2,1
811016c0:	e0bfe715 	stw	r2,-100(fp)
811016c4:	e0bfe717 	ldw	r2,-100(fp)
811016c8:	10800290 	cmplti	r2,r2,10
811016cc:	103fe81e 	bne	r2,zero,81101670 <__reset+0xfb0e1670>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811016d0:	d0a06b17 	ldw	r2,-32340(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
811016d4:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
811016d8:	00804004 	movi	r2,256
811016dc:	e0bfea15 	stw	r2,-88(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
811016e0:	e03fe715 	stw	zero,-100(fp)
811016e4:	00001e06 	br	81101760 <bDdr2MemoryWriteTest+0x240>
		if (iI == 0) {
811016e8:	e0bfe717 	ldw	r2,-100(fp)
811016ec:	1000091e 	bne	r2,zero,81101714 <bDdr2MemoryWriteTest+0x1f4>
			xSZData[iI] = uliInitValue;
811016f0:	00a04534 	movhi	r2,33044
811016f4:	1080a204 	addi	r2,r2,648
811016f8:	e0ffe717 	ldw	r3,-100(fp)
811016fc:	18c7883a 	add	r3,r3,r3
81101700:	18c7883a 	add	r3,r3,r3
81101704:	10c5883a 	add	r2,r2,r3
81101708:	e0fff017 	ldw	r3,-64(fp)
8110170c:	10c00015 	stw	r3,0(r2)
81101710:	00001006 	br	81101754 <bDdr2MemoryWriteTest+0x234>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
81101714:	e0bfe717 	ldw	r2,-100(fp)
81101718:	10ffffc4 	addi	r3,r2,-1
8110171c:	00a04534 	movhi	r2,33044
81101720:	1080a204 	addi	r2,r2,648
81101724:	18c7883a 	add	r3,r3,r3
81101728:	18c7883a 	add	r3,r3,r3
8110172c:	10c5883a 	add	r2,r2,r3
81101730:	10800017 	ldw	r2,0(r2)
81101734:	11000364 	muli	r4,r2,13
81101738:	00a04534 	movhi	r2,33044
8110173c:	1080a204 	addi	r2,r2,648
81101740:	e0ffe717 	ldw	r3,-100(fp)
81101744:	18c7883a 	add	r3,r3,r3
81101748:	18c7883a 	add	r3,r3,r3
8110174c:	10c5883a 	add	r2,r2,r3
81101750:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
81101754:	e0bfe717 	ldw	r2,-100(fp)
81101758:	10800044 	addi	r2,r2,1
8110175c:	e0bfe715 	stw	r2,-100(fp)
81101760:	e0ffe717 	ldw	r3,-100(fp)
81101764:	e0bfea17 	ldw	r2,-88(fp)
81101768:	18bfdf16 	blt	r3,r2,811016e8 <__reset+0xfb0e16e8>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
8110176c:	e0bfea17 	ldw	r2,-88(fp)
81101770:	10ffffc4 	addi	r3,r2,-1
81101774:	00a04534 	movhi	r2,33044
81101778:	1080a204 	addi	r2,r2,648
8110177c:	18c7883a 	add	r3,r3,r3
81101780:	18c7883a 	add	r3,r3,r3
81101784:	10c7883a 	add	r3,r2,r3
81101788:	00aaaaf4 	movhi	r2,43691
8110178c:	10aaaa84 	addi	r2,r2,-21846
81101790:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81101794:	e0bfea17 	ldw	r2,-88(fp)
81101798:	10ffff84 	addi	r3,r2,-2
8110179c:	00a04534 	movhi	r2,33044
811017a0:	1080a204 	addi	r2,r2,648
811017a4:	18c7883a 	add	r3,r3,r3
811017a8:	18c7883a 	add	r3,r3,r3
811017ac:	10c7883a 	add	r3,r2,r3
811017b0:	00955574 	movhi	r2,21845
811017b4:	10955544 	addi	r2,r2,21845
811017b8:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
811017bc:	e0bfea17 	ldw	r2,-88(fp)
811017c0:	10ffff44 	addi	r3,r2,-3
811017c4:	00a04534 	movhi	r2,33044
811017c8:	1080a204 	addi	r2,r2,648
811017cc:	18c7883a 	add	r3,r3,r3
811017d0:	18c7883a 	add	r3,r3,r3
811017d4:	10c5883a 	add	r2,r2,r3
811017d8:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
811017dc:	e0bfea17 	ldw	r2,-88(fp)
811017e0:	10ffff04 	addi	r3,r2,-4
811017e4:	00a04534 	movhi	r2,33044
811017e8:	1080a204 	addi	r2,r2,648
811017ec:	18c7883a 	add	r3,r3,r3
811017f0:	18c7883a 	add	r3,r3,r3
811017f4:	10c5883a 	add	r2,r2,r3
811017f8:	00ffffc4 	movi	r3,-1
811017fc:	10c00015 	stw	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
81101800:	00e04534 	movhi	r3,33044
81101804:	18c06204 	addi	r3,r3,392
81101808:	00a04534 	movhi	r2,33044
8110180c:	10ade704 	addi	r2,r2,-18532
81101810:	1009883a 	mov	r4,r2
81101814:	00800444 	movi	r2,17
81101818:	100d883a 	mov	r6,r2
8110181c:	200b883a 	mov	r5,r4
81101820:	1809883a 	mov	r4,r3
81101824:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
81101828:	d0a04d17 	ldw	r2,-32460(gp)
8110182c:	01604534 	movhi	r5,33044
81101830:	29406204 	addi	r5,r5,392
81101834:	1009883a 	mov	r4,r2
81101838:	11110c40 	call	811110c4 <fprintf>
8110183c:	d0a06b17 	ldw	r2,-32340(gp)
#endif
	iTimeStart = alt_nticks();
81101840:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
81101844:	e0bfe517 	ldw	r2,-108(fp)
81101848:	e0bfe915 	stw	r2,-92(fp)
	iNAccessLen = sizeof(xSZData);
8110184c:	00810004 	movi	r2,1024
81101850:	e0bfe815 	stw	r2,-96(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101854:	e0ffe817 	ldw	r3,-96(fp)
81101858:	e0bfee17 	ldw	r2,-72(fp)
8110185c:	1885283a 	div	r2,r3,r2
81101860:	e0bfea15 	stw	r2,-88(fp)
	iNPos = 0;
81101864:	e03feb15 	stw	zero,-84(fp)
	while (iNPos < uliByteLen) {
81101868:	00003a06 	br	81101954 <bDdr2MemoryWriteTest+0x434>
		iNRemainedLen = uliByteLen - iNPos;
8110186c:	e0bfeb17 	ldw	r2,-84(fp)
81101870:	e0ffe617 	ldw	r3,-104(fp)
81101874:	1885c83a 	sub	r2,r3,r2
81101878:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
8110187c:	e0bfe817 	ldw	r2,-96(fp)
81101880:	e0fff217 	ldw	r3,-56(fp)
81101884:	1880060e 	bge	r3,r2,811018a0 <bDdr2MemoryWriteTest+0x380>
			iNAccessLen = iNRemainedLen;
81101888:	e0bff217 	ldw	r2,-56(fp)
8110188c:	e0bfe815 	stw	r2,-96(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101890:	e0ffe817 	ldw	r3,-96(fp)
81101894:	e0bfee17 	ldw	r2,-72(fp)
81101898:	1885283a 	div	r2,r3,r2
8110189c:	e0bfea15 	stw	r2,-88(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
811018a0:	e0bfe817 	ldw	r2,-96(fp)
811018a4:	100d883a 	mov	r6,r2
811018a8:	01604534 	movhi	r5,33044
811018ac:	2940a204 	addi	r5,r5,648
811018b0:	e13fe917 	ldw	r4,-92(fp)
811018b4:	11120c40 	call	811120c4 <memcpy>
		pxDes += iNItemNum;
811018b8:	e0bfea17 	ldw	r2,-88(fp)
811018bc:	1085883a 	add	r2,r2,r2
811018c0:	1085883a 	add	r2,r2,r2
811018c4:	1007883a 	mov	r3,r2
811018c8:	e0bfe917 	ldw	r2,-92(fp)
811018cc:	10c5883a 	add	r2,r2,r3
811018d0:	e0bfe915 	stw	r2,-92(fp)
		iNPos += iNAccessLen;
811018d4:	e0ffeb17 	ldw	r3,-84(fp)
811018d8:	e0bfe817 	ldw	r2,-96(fp)
811018dc:	1885883a 	add	r2,r3,r2
811018e0:	e0bfeb15 	stw	r2,-84(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
811018e4:	e0bfec17 	ldw	r2,-80(fp)
811018e8:	10800288 	cmpgei	r2,r2,10
811018ec:	1000191e 	bne	r2,zero,81101954 <bDdr2MemoryWriteTest+0x434>
811018f0:	e0bfec17 	ldw	r2,-80(fp)
811018f4:	1085883a 	add	r2,r2,r2
811018f8:	1085883a 	add	r2,r2,r2
811018fc:	e0ffe504 	addi	r3,fp,-108
81101900:	1885883a 	add	r2,r3,r2
81101904:	10800e04 	addi	r2,r2,56
81101908:	10800017 	ldw	r2,0(r2)
8110190c:	e0ffeb17 	ldw	r3,-84(fp)
81101910:	18801036 	bltu	r3,r2,81101954 <bDdr2MemoryWriteTest+0x434>
			iNProgressIndex++;
81101914:	e0bfec17 	ldw	r2,-80(fp)
81101918:	10800044 	addi	r2,r2,1
8110191c:	e0bfec15 	stw	r2,-80(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101920:	e0bfec17 	ldw	r2,-80(fp)
81101924:	108002a4 	muli	r2,r2,10
81101928:	100d883a 	mov	r6,r2
8110192c:	01604534 	movhi	r5,33044
81101930:	296dec04 	addi	r5,r5,-18512
81101934:	01204534 	movhi	r4,33044
81101938:	21006204 	addi	r4,r4,392
8110193c:	111282c0 	call	8111282c <sprintf>
			debug(fp, cDebugBuffer);
81101940:	d0a04d17 	ldw	r2,-32460(gp)
81101944:	01604534 	movhi	r5,33044
81101948:	29406204 	addi	r5,r5,392
8110194c:	1009883a 	mov	r4,r2
81101950:	11110c40 	call	811110c4 <fprintf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
81101954:	e0ffeb17 	ldw	r3,-84(fp)
81101958:	e0bfe617 	ldw	r2,-104(fp)
8110195c:	18bfc336 	bltu	r3,r2,8110186c <__reset+0xfb0e186c>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
81101960:	11269080 	call	81126908 <alt_dcache_flush_all>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101964:	00a04534 	movhi	r2,33044
81101968:	10806204 	addi	r2,r2,392
8110196c:	00c00284 	movi	r3,10
81101970:	10c00005 	stb	r3,0(r2)
81101974:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101978:	d0a04d17 	ldw	r2,-32460(gp)
8110197c:	01604534 	movhi	r5,33044
81101980:	29406204 	addi	r5,r5,392
81101984:	1009883a 	mov	r4,r2
81101988:	11110c40 	call	811110c4 <fprintf>
8110198c:	d0e06b17 	ldw	r3,-32340(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101990:	e0bff117 	ldw	r2,-60(fp)
81101994:	1885c83a 	sub	r2,r3,r2
81101998:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
8110199c:	e0bfed17 	ldw	r2,-76(fp)
811019a0:	10001e26 	beq	r2,zero,81101a1c <bDdr2MemoryWriteTest+0x4fc>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
811019a4:	e13fef17 	ldw	r4,-68(fp)
811019a8:	11103000 	call	81110300 <__floatsisf>
811019ac:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811019b0:	d0a06a17 	ldw	r2,-32344(gp)
811019b4:	1009883a 	mov	r4,r2
811019b8:	111042c0 	call	8111042c <__floatunsisf>
811019bc:	1007883a 	mov	r3,r2
811019c0:	180b883a 	mov	r5,r3
811019c4:	8009883a 	mov	r4,r16
811019c8:	110fab40 	call	8110fab4 <__divsf3>
811019cc:	1007883a 	mov	r3,r2
811019d0:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811019d4:	1009883a 	mov	r4,r2
811019d8:	1110c440 	call	81110c44 <__extendsfdf2>
811019dc:	1009883a 	mov	r4,r2
811019e0:	180b883a 	mov	r5,r3
811019e4:	d9400015 	stw	r5,0(sp)
811019e8:	200f883a 	mov	r7,r4
811019ec:	e1bfe617 	ldw	r6,-104(fp)
811019f0:	01604534 	movhi	r5,33044
811019f4:	296dee04 	addi	r5,r5,-18504
811019f8:	01204534 	movhi	r4,33044
811019fc:	21006204 	addi	r4,r4,392
81101a00:	111282c0 	call	8111282c <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101a04:	d0a04d17 	ldw	r2,-32460(gp)
81101a08:	01604534 	movhi	r5,33044
81101a0c:	29406204 	addi	r5,r5,392
81101a10:	1009883a 	mov	r4,r2
81101a14:	11110c40 	call	811110c4 <fprintf>
81101a18:	00000f06 	br	81101a58 <bDdr2MemoryWriteTest+0x538>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81101a1c:	00e04534 	movhi	r3,33044
81101a20:	18c06204 	addi	r3,r3,392
81101a24:	00a04534 	movhi	r2,33044
81101a28:	10adfa04 	addi	r2,r2,-18456
81101a2c:	1009883a 	mov	r4,r2
81101a30:	00800584 	movi	r2,22
81101a34:	100d883a 	mov	r6,r2
81101a38:	200b883a 	mov	r5,r4
81101a3c:	1809883a 	mov	r4,r3
81101a40:	11120c40 	call	811120c4 <memcpy>
		debug(fp, cDebugBuffer);
81101a44:	d0a04d17 	ldw	r2,-32460(gp)
81101a48:	01604534 	movhi	r5,33044
81101a4c:	29406204 	addi	r5,r5,392
81101a50:	1009883a 	mov	r4,r2
81101a54:	11110c40 	call	811110c4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101a58:	00a04534 	movhi	r2,33044
81101a5c:	10806204 	addi	r2,r2,392
81101a60:	00c00284 	movi	r3,10
81101a64:	10c00005 	stb	r3,0(r2)
81101a68:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101a6c:	d0a04d17 	ldw	r2,-32460(gp)
81101a70:	01604534 	movhi	r5,33044
81101a74:	29406204 	addi	r5,r5,392
81101a78:	1009883a 	mov	r4,r2
81101a7c:	11110c40 	call	811110c4 <fprintf>
#endif

	return bSuccess;
81101a80:	e0bfed17 	ldw	r2,-76(fp)
}
81101a84:	e6fffe04 	addi	sp,fp,-8
81101a88:	dfc00317 	ldw	ra,12(sp)
81101a8c:	df000217 	ldw	fp,8(sp)
81101a90:	dc400117 	ldw	r17,4(sp)
81101a94:	dc000017 	ldw	r16,0(sp)
81101a98:	dec00404 	addi	sp,sp,16
81101a9c:	f800283a 	ret

81101aa0 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
81101aa0:	deffe204 	addi	sp,sp,-120
81101aa4:	de00012e 	bgeu	sp,et,81101aac <bDdr2MemoryReadTest+0xc>
81101aa8:	003b68fa 	trap	3
81101aac:	dfc01d15 	stw	ra,116(sp)
81101ab0:	df001c15 	stw	fp,112(sp)
81101ab4:	dc401b15 	stw	r17,108(sp)
81101ab8:	dc001a15 	stw	r16,104(sp)
81101abc:	df001c04 	addi	fp,sp,112
81101ac0:	2005883a 	mov	r2,r4
81101ac4:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
81101ac8:	00e04534 	movhi	r3,33044
81101acc:	18c06204 	addi	r3,r3,392
81101ad0:	00a04534 	movhi	r2,33044
81101ad4:	10ae0004 	addi	r2,r2,-18432
81101ad8:	1009883a 	mov	r4,r2
81101adc:	008009c4 	movi	r2,39
81101ae0:	100d883a 	mov	r6,r2
81101ae4:	200b883a 	mov	r5,r4
81101ae8:	1809883a 	mov	r4,r3
81101aec:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
81101af0:	d0a04d17 	ldw	r2,-32460(gp)
81101af4:	01604534 	movhi	r5,33044
81101af8:	29406204 	addi	r5,r5,392
81101afc:	1009883a 	mov	r4,r2
81101b00:	11110c40 	call	811110c4 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101b04:	00800044 	movi	r2,1
81101b08:	e0bfe515 	stw	r2,-108(fp)
	switch (ucMemoryId) {
81101b0c:	e0bffd03 	ldbu	r2,-12(fp)
81101b10:	10c00060 	cmpeqi	r3,r2,1
81101b14:	1800031e 	bne	r3,zero,81101b24 <bDdr2MemoryReadTest+0x84>
81101b18:	108000a0 	cmpeqi	r2,r2,2
81101b1c:	1000081e 	bne	r2,zero,81101b40 <bDdr2MemoryReadTest+0xa0>
81101b20:	00000e06 	br	81101b5c <bDdr2MemoryReadTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b24:	e0bffd03 	ldbu	r2,-12(fp)
81101b28:	1009883a 	mov	r4,r2
81101b2c:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101b30:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101b34:	00a00034 	movhi	r2,32768
81101b38:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b3c:	00001906 	br	81101ba4 <bDdr2MemoryReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b40:	e0bffd03 	ldbu	r2,-12(fp)
81101b44:	1009883a 	mov	r4,r2
81101b48:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101b4c:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101b50:	00a00034 	movhi	r2,32768
81101b54:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b58:	00001206 	br	81101ba4 <bDdr2MemoryReadTest+0x104>
	default:
		bSuccess = FALSE;
81101b5c:	e03fe515 	stw	zero,-108(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101b60:	00e04534 	movhi	r3,33044
81101b64:	18c06204 	addi	r3,r3,392
81101b68:	00a04534 	movhi	r2,33044
81101b6c:	10abe804 	addi	r2,r2,-20576
81101b70:	1009883a 	mov	r4,r2
81101b74:	00800bc4 	movi	r2,47
81101b78:	100d883a 	mov	r6,r2
81101b7c:	200b883a 	mov	r5,r4
81101b80:	1809883a 	mov	r4,r3
81101b84:	11120c40 	call	811120c4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101b88:	d0a04d17 	ldw	r2,-32460(gp)
81101b8c:	01604534 	movhi	r5,33044
81101b90:	29406204 	addi	r5,r5,392
81101b94:	1009883a 	mov	r4,r2
81101b98:	11110c40 	call	811110c4 <fprintf>
		;
#endif
		return bSuccess;
81101b9c:	e0bfe517 	ldw	r2,-108(fp)
81101ba0:	0000fc06 	br	81101f94 <bDdr2MemoryReadTest+0x4f4>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101ba4:	e0bfe717 	ldw	r2,-100(fp)
81101ba8:	1004d53a 	srli	r2,r2,20
81101bac:	100d883a 	mov	r6,r2
81101bb0:	01604534 	movhi	r5,33044
81101bb4:	296e0a04 	addi	r5,r5,-18392
81101bb8:	01204534 	movhi	r4,33044
81101bbc:	21006204 	addi	r4,r4,392
81101bc0:	111282c0 	call	8111282c <sprintf>
	debug(fp, cDebugBuffer);
81101bc4:	d0a04d17 	ldw	r2,-32460(gp)
81101bc8:	01604534 	movhi	r5,33044
81101bcc:	29406204 	addi	r5,r5,392
81101bd0:	1009883a 	mov	r4,r2
81101bd4:	11110c40 	call	811110c4 <fprintf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101bd8:	00804004 	movi	r2,256
81101bdc:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101be0:	00800104 	movi	r2,4
81101be4:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
81101be8:	e0ffec17 	ldw	r3,-80(fp)
81101bec:	e0bfef17 	ldw	r2,-68(fp)
81101bf0:	1885383a 	mul	r2,r3,r2
81101bf4:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
81101bf8:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101bfc:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
81101c00:	e03fe815 	stw	zero,-96(fp)
81101c04:	00001506 	br	81101c5c <bDdr2MemoryReadTest+0x1bc>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101c08:	e0ffe717 	ldw	r3,-100(fp)
81101c0c:	00b33374 	movhi	r2,52429
81101c10:	10b33344 	addi	r2,r2,-13107
81101c14:	1888383a 	mulxuu	r4,r3,r2
81101c18:	1885383a 	mul	r2,r3,r2
81101c1c:	1021883a 	mov	r16,r2
81101c20:	2023883a 	mov	r17,r4
81101c24:	8804d0fa 	srli	r2,r17,3
81101c28:	e0ffe817 	ldw	r3,-96(fp)
81101c2c:	18c00044 	addi	r3,r3,1
81101c30:	10c7383a 	mul	r3,r2,r3
81101c34:	e0bfe817 	ldw	r2,-96(fp)
81101c38:	1085883a 	add	r2,r2,r2
81101c3c:	1085883a 	add	r2,r2,r2
81101c40:	e13fe504 	addi	r4,fp,-108
81101c44:	2085883a 	add	r2,r4,r2
81101c48:	10800e04 	addi	r2,r2,56
81101c4c:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101c50:	e0bfe817 	ldw	r2,-96(fp)
81101c54:	10800044 	addi	r2,r2,1
81101c58:	e0bfe815 	stw	r2,-96(fp)
81101c5c:	e0bfe817 	ldw	r2,-96(fp)
81101c60:	10800290 	cmplti	r2,r2,10
81101c64:	103fe81e 	bne	r2,zero,81101c08 <__reset+0xfb0e1c08>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
81101c68:	e03fee15 	stw	zero,-72(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
81101c6c:	00e04534 	movhi	r3,33044
81101c70:	18c06204 	addi	r3,r3,392
81101c74:	00a04534 	movhi	r2,33044
81101c78:	10ae1004 	addi	r2,r2,-18368
81101c7c:	1009883a 	mov	r4,r2
81101c80:	008006c4 	movi	r2,27
81101c84:	100d883a 	mov	r6,r2
81101c88:	200b883a 	mov	r5,r4
81101c8c:	1809883a 	mov	r4,r3
81101c90:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
81101c94:	d0a04d17 	ldw	r2,-32460(gp)
81101c98:	01604534 	movhi	r5,33044
81101c9c:	29406204 	addi	r5,r5,392
81101ca0:	1009883a 	mov	r4,r2
81101ca4:	11110c40 	call	811110c4 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101ca8:	d0a06b17 	ldw	r2,-32340(gp)
#endif
	iTimeStart = alt_nticks();
81101cac:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101cb0:	e0bfe617 	ldw	r2,-104(fp)
81101cb4:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
81101cb8:	00810004 	movi	r2,1024
81101cbc:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101cc0:	e0ffe917 	ldw	r3,-92(fp)
81101cc4:	e0bfef17 	ldw	r2,-68(fp)
81101cc8:	1885283a 	div	r2,r3,r2
81101ccc:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101cd0:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101cd4:	00006206 	br	81101e60 <bDdr2MemoryReadTest+0x3c0>
		iNRemainedLen = uliByteLen - iNPos;
81101cd8:	e0bfed17 	ldw	r2,-76(fp)
81101cdc:	e0ffe717 	ldw	r3,-100(fp)
81101ce0:	1885c83a 	sub	r2,r3,r2
81101ce4:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101ce8:	e0bfe917 	ldw	r2,-92(fp)
81101cec:	e0fff217 	ldw	r3,-56(fp)
81101cf0:	1880060e 	bge	r3,r2,81101d0c <bDdr2MemoryReadTest+0x26c>
			iNAccessLen = iNRemainedLen;
81101cf4:	e0bff217 	ldw	r2,-56(fp)
81101cf8:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101cfc:	e0ffe917 	ldw	r3,-92(fp)
81101d00:	e0bfef17 	ldw	r2,-68(fp)
81101d04:	1885283a 	div	r2,r3,r2
81101d08:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101d0c:	00a04534 	movhi	r2,33044
81101d10:	1080a204 	addi	r2,r2,648
81101d14:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101d18:	e03fe815 	stw	zero,-96(fp)
81101d1c:	00002b06 	br	81101dcc <bDdr2MemoryReadTest+0x32c>
			if (*pxSrc++ != *pxDes++) {
81101d20:	e0bfeb17 	ldw	r2,-84(fp)
81101d24:	10c00104 	addi	r3,r2,4
81101d28:	e0ffeb15 	stw	r3,-84(fp)
81101d2c:	10c00017 	ldw	r3,0(r2)
81101d30:	e0bfea17 	ldw	r2,-88(fp)
81101d34:	11000104 	addi	r4,r2,4
81101d38:	e13fea15 	stw	r4,-88(fp)
81101d3c:	10800017 	ldw	r2,0(r2)
81101d40:	18801f26 	beq	r3,r2,81101dc0 <bDdr2MemoryReadTest+0x320>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d44:	e0bfeb17 	ldw	r2,-84(fp)
81101d48:	10bfff04 	addi	r2,r2,-4
81101d4c:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d50:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d54:	00a04534 	movhi	r2,33044
81101d58:	1080a204 	addi	r2,r2,648
81101d5c:	e0ffe817 	ldw	r3,-96(fp)
81101d60:	18c7883a 	add	r3,r3,r3
81101d64:	18c7883a 	add	r3,r3,r3
81101d68:	10c5883a 	add	r2,r2,r3
81101d6c:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d70:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
81101d74:	e0ffed17 	ldw	r3,-76(fp)
81101d78:	e0bfef17 	ldw	r2,-68(fp)
81101d7c:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d80:	e0bfe817 	ldw	r2,-96(fp)
81101d84:	1885883a 	add	r2,r3,r2
81101d88:	d8800015 	stw	r2,0(sp)
81101d8c:	280f883a 	mov	r7,r5
81101d90:	200d883a 	mov	r6,r4
81101d94:	01604534 	movhi	r5,33044
81101d98:	296e1704 	addi	r5,r5,-18340
81101d9c:	01204534 	movhi	r4,33044
81101da0:	21006204 	addi	r4,r4,392
81101da4:	111282c0 	call	8111282c <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
81101da8:	d0a04d17 	ldw	r2,-32460(gp)
81101dac:	01604534 	movhi	r5,33044
81101db0:	29406204 	addi	r5,r5,392
81101db4:	1009883a 	mov	r4,r2
81101db8:	11110c40 	call	811110c4 <fprintf>
#endif
				bSuccess = FALSE;
81101dbc:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101dc0:	e0bfe817 	ldw	r2,-96(fp)
81101dc4:	10800044 	addi	r2,r2,1
81101dc8:	e0bfe815 	stw	r2,-96(fp)
81101dcc:	e0ffe817 	ldw	r3,-96(fp)
81101dd0:	e0bfec17 	ldw	r2,-80(fp)
81101dd4:	1880020e 	bge	r3,r2,81101de0 <bDdr2MemoryReadTest+0x340>
81101dd8:	e0bfe517 	ldw	r2,-108(fp)
81101ddc:	103fd01e 	bne	r2,zero,81101d20 <__reset+0xfb0e1d20>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101de0:	e0ffed17 	ldw	r3,-76(fp)
81101de4:	e0bfe917 	ldw	r2,-92(fp)
81101de8:	1885883a 	add	r2,r3,r2
81101dec:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101df0:	e0bfee17 	ldw	r2,-72(fp)
81101df4:	10800288 	cmpgei	r2,r2,10
81101df8:	1000191e 	bne	r2,zero,81101e60 <bDdr2MemoryReadTest+0x3c0>
81101dfc:	e0bfee17 	ldw	r2,-72(fp)
81101e00:	1085883a 	add	r2,r2,r2
81101e04:	1085883a 	add	r2,r2,r2
81101e08:	e0ffe504 	addi	r3,fp,-108
81101e0c:	1885883a 	add	r2,r3,r2
81101e10:	10800e04 	addi	r2,r2,56
81101e14:	10800017 	ldw	r2,0(r2)
81101e18:	e0ffed17 	ldw	r3,-76(fp)
81101e1c:	18801036 	bltu	r3,r2,81101e60 <bDdr2MemoryReadTest+0x3c0>
			iNProgressIndex++;
81101e20:	e0bfee17 	ldw	r2,-72(fp)
81101e24:	10800044 	addi	r2,r2,1
81101e28:	e0bfee15 	stw	r2,-72(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101e2c:	e0bfee17 	ldw	r2,-72(fp)
81101e30:	108002a4 	muli	r2,r2,10
81101e34:	100d883a 	mov	r6,r2
81101e38:	01604534 	movhi	r5,33044
81101e3c:	296dec04 	addi	r5,r5,-18512
81101e40:	01204534 	movhi	r4,33044
81101e44:	21006204 	addi	r4,r4,392
81101e48:	111282c0 	call	8111282c <sprintf>
			debug(fp, cDebugBuffer);
81101e4c:	d0a04d17 	ldw	r2,-32460(gp)
81101e50:	01604534 	movhi	r5,33044
81101e54:	29406204 	addi	r5,r5,392
81101e58:	1009883a 	mov	r4,r2
81101e5c:	11110c40 	call	811110c4 <fprintf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
81101e60:	e0bfe517 	ldw	r2,-108(fp)
81101e64:	10000326 	beq	r2,zero,81101e74 <bDdr2MemoryReadTest+0x3d4>
81101e68:	e0ffed17 	ldw	r3,-76(fp)
81101e6c:	e0bfe717 	ldw	r2,-100(fp)
81101e70:	18bf9936 	bltu	r3,r2,81101cd8 <__reset+0xfb0e1cd8>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101e74:	00a04534 	movhi	r2,33044
81101e78:	10806204 	addi	r2,r2,392
81101e7c:	00c00284 	movi	r3,10
81101e80:	10c00005 	stb	r3,0(r2)
81101e84:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101e88:	d0a04d17 	ldw	r2,-32460(gp)
81101e8c:	01604534 	movhi	r5,33044
81101e90:	29406204 	addi	r5,r5,392
81101e94:	1009883a 	mov	r4,r2
81101e98:	11110c40 	call	811110c4 <fprintf>
81101e9c:	d0e06b17 	ldw	r3,-32340(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101ea0:	e0bff117 	ldw	r2,-60(fp)
81101ea4:	1885c83a 	sub	r2,r3,r2
81101ea8:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
81101eac:	e0bfe517 	ldw	r2,-108(fp)
81101eb0:	10001e26 	beq	r2,zero,81101f2c <bDdr2MemoryReadTest+0x48c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101eb4:	e13ff017 	ldw	r4,-64(fp)
81101eb8:	11103000 	call	81110300 <__floatsisf>
81101ebc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101ec0:	d0a06a17 	ldw	r2,-32344(gp)
81101ec4:	1009883a 	mov	r4,r2
81101ec8:	111042c0 	call	8111042c <__floatunsisf>
81101ecc:	1007883a 	mov	r3,r2
81101ed0:	180b883a 	mov	r5,r3
81101ed4:	8009883a 	mov	r4,r16
81101ed8:	110fab40 	call	8110fab4 <__divsf3>
81101edc:	1007883a 	mov	r3,r2
81101ee0:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
81101ee4:	1009883a 	mov	r4,r2
81101ee8:	1110c440 	call	81110c44 <__extendsfdf2>
81101eec:	1009883a 	mov	r4,r2
81101ef0:	180b883a 	mov	r5,r3
81101ef4:	d9400015 	stw	r5,0(sp)
81101ef8:	200f883a 	mov	r7,r4
81101efc:	e1bfe717 	ldw	r6,-100(fp)
81101f00:	01604534 	movhi	r5,33044
81101f04:	296e2504 	addi	r5,r5,-18284
81101f08:	01204534 	movhi	r4,33044
81101f0c:	21006204 	addi	r4,r4,392
81101f10:	111282c0 	call	8111282c <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101f14:	d0a04d17 	ldw	r2,-32460(gp)
81101f18:	01604534 	movhi	r5,33044
81101f1c:	29406204 	addi	r5,r5,392
81101f20:	1009883a 	mov	r4,r2
81101f24:	11110c40 	call	811110c4 <fprintf>
81101f28:	00000f06 	br	81101f68 <bDdr2MemoryReadTest+0x4c8>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81101f2c:	00e04534 	movhi	r3,33044
81101f30:	18c06204 	addi	r3,r3,392
81101f34:	00a04534 	movhi	r2,33044
81101f38:	10ae3104 	addi	r2,r2,-18236
81101f3c:	1009883a 	mov	r4,r2
81101f40:	00800544 	movi	r2,21
81101f44:	100d883a 	mov	r6,r2
81101f48:	200b883a 	mov	r5,r4
81101f4c:	1809883a 	mov	r4,r3
81101f50:	11120c40 	call	811120c4 <memcpy>
		debug(fp, cDebugBuffer);
81101f54:	d0a04d17 	ldw	r2,-32460(gp)
81101f58:	01604534 	movhi	r5,33044
81101f5c:	29406204 	addi	r5,r5,392
81101f60:	1009883a 	mov	r4,r2
81101f64:	11110c40 	call	811110c4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101f68:	00a04534 	movhi	r2,33044
81101f6c:	10806204 	addi	r2,r2,392
81101f70:	00c00284 	movi	r3,10
81101f74:	10c00005 	stb	r3,0(r2)
81101f78:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101f7c:	d0a04d17 	ldw	r2,-32460(gp)
81101f80:	01604534 	movhi	r5,33044
81101f84:	29406204 	addi	r5,r5,392
81101f88:	1009883a 	mov	r4,r2
81101f8c:	11110c40 	call	811110c4 <fprintf>
#endif

	return bSuccess;
81101f90:	e0bfe517 	ldw	r2,-108(fp)
}
81101f94:	e6fffe04 	addi	sp,fp,-8
81101f98:	dfc00317 	ldw	ra,12(sp)
81101f9c:	df000217 	ldw	fp,8(sp)
81101fa0:	dc400117 	ldw	r17,4(sp)
81101fa4:	dc000017 	ldw	r16,0(sp)
81101fa8:	dec00404 	addi	sp,sp,16
81101fac:	f800283a 	ret

81101fb0 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81101fb0:	deffec04 	addi	sp,sp,-80
81101fb4:	de00012e 	bgeu	sp,et,81101fbc <bDdr2MemoryRandomWriteTest+0xc>
81101fb8:	003b68fa 	trap	3
81101fbc:	dfc01315 	stw	ra,76(sp)
81101fc0:	df001215 	stw	fp,72(sp)
81101fc4:	dcc01115 	stw	r19,68(sp)
81101fc8:	dc801015 	stw	r18,64(sp)
81101fcc:	dc400f15 	stw	r17,60(sp)
81101fd0:	dc000e15 	stw	r16,56(sp)
81101fd4:	df001204 	addi	fp,sp,72
81101fd8:	2005883a 	mov	r2,r4
81101fdc:	e17ffa15 	stw	r5,-24(fp)
81101fe0:	e1bffb15 	stw	r6,-20(fp)
81101fe4:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
81101fe8:	00e04534 	movhi	r3,33044
81101fec:	18c06204 	addi	r3,r3,392
81101ff0:	00a04534 	movhi	r2,33044
81101ff4:	10ae3704 	addi	r2,r2,-18212
81101ff8:	1009883a 	mov	r4,r2
81101ffc:	00800bc4 	movi	r2,47
81102000:	100d883a 	mov	r6,r2
81102004:	200b883a 	mov	r5,r4
81102008:	1809883a 	mov	r4,r3
8110200c:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
81102010:	d0a04d17 	ldw	r2,-32460(gp)
81102014:	01604534 	movhi	r5,33044
81102018:	29406204 	addi	r5,r5,392
8110201c:	1009883a 	mov	r4,r2
81102020:	11110c40 	call	811110c4 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102024:	00800044 	movi	r2,1
81102028:	e0bff415 	stw	r2,-48(fp)
	switch (ucMemoryId) {
8110202c:	e0bff903 	ldbu	r2,-28(fp)
81102030:	10c00060 	cmpeqi	r3,r2,1
81102034:	1800031e 	bne	r3,zero,81102044 <bDdr2MemoryRandomWriteTest+0x94>
81102038:	108000a0 	cmpeqi	r2,r2,2
8110203c:	1000081e 	bne	r2,zero,81102060 <bDdr2MemoryRandomWriteTest+0xb0>
81102040:	00000e06 	br	8110207c <bDdr2MemoryRandomWriteTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102044:	e0bff903 	ldbu	r2,-28(fp)
81102048:	1009883a 	mov	r4,r2
8110204c:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102050:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102054:	00a00034 	movhi	r2,32768
81102058:	e0bff015 	stw	r2,-64(fp)
		break;
8110205c:	00001906 	br	811020c4 <bDdr2MemoryRandomWriteTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102060:	e0bff903 	ldbu	r2,-28(fp)
81102064:	1009883a 	mov	r4,r2
81102068:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110206c:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81102070:	00a00034 	movhi	r2,32768
81102074:	e0bff015 	stw	r2,-64(fp)
		break;
81102078:	00001206 	br	811020c4 <bDdr2MemoryRandomWriteTest+0x114>
	default:
		bSuccess = FALSE;
8110207c:	e03ff415 	stw	zero,-48(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81102080:	00e04534 	movhi	r3,33044
81102084:	18c06204 	addi	r3,r3,392
81102088:	00a04534 	movhi	r2,33044
8110208c:	10abe804 	addi	r2,r2,-20576
81102090:	1009883a 	mov	r4,r2
81102094:	00800bc4 	movi	r2,47
81102098:	100d883a 	mov	r6,r2
8110209c:	200b883a 	mov	r5,r4
811020a0:	1809883a 	mov	r4,r3
811020a4:	11120c40 	call	811120c4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811020a8:	d0a04d17 	ldw	r2,-32460(gp)
811020ac:	01604534 	movhi	r5,33044
811020b0:	29406204 	addi	r5,r5,392
811020b4:	1009883a 	mov	r4,r2
811020b8:	11110c40 	call	811110c4 <fprintf>
		;
#endif
		return bSuccess;
811020bc:	e0bff417 	ldw	r2,-48(fp)
811020c0:	0000ce06 	br	811023fc <bDdr2MemoryRandomWriteTest+0x44c>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811020c4:	e0bff017 	ldw	r2,-64(fp)
811020c8:	1004d53a 	srli	r2,r2,20
811020cc:	100d883a 	mov	r6,r2
811020d0:	01604534 	movhi	r5,33044
811020d4:	296de104 	addi	r5,r5,-18556
811020d8:	01204534 	movhi	r4,33044
811020dc:	21006204 	addi	r4,r4,392
811020e0:	111282c0 	call	8111282c <sprintf>
	debug(fp, cDebugBuffer);
811020e4:	d0a04d17 	ldw	r2,-32460(gp)
811020e8:	01604534 	movhi	r5,33044
811020ec:	29406204 	addi	r5,r5,392
811020f0:	1009883a 	mov	r4,r2
811020f4:	11110c40 	call	811110c4 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811020f8:	d0a06b17 	ldw	r2,-32340(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
811020fc:	d0a03615 	stw	r2,-32552(gp)
	uliCurrentState = uliInitialState;
81102100:	d0a03617 	ldw	r2,-32552(gp)
81102104:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102108:	e0ffef17 	ldw	r3,-68(fp)
8110210c:	e0bff017 	ldw	r2,-64(fp)
81102110:	1885883a 	add	r2,r3,r2
81102114:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102118:	e0fff017 	ldw	r3,-64(fp)
8110211c:	00b33374 	movhi	r2,52429
81102120:	10b33344 	addi	r2,r2,-13107
81102124:	1888383a 	mulxuu	r4,r3,r2
81102128:	1885383a 	mul	r2,r3,r2
8110212c:	1025883a 	mov	r18,r2
81102130:	2027883a 	mov	r19,r4
81102134:	9806d13a 	srli	r3,r19,4
81102138:	e0bfef17 	ldw	r2,-68(fp)
8110213c:	1885883a 	add	r2,r3,r2
81102140:	e0bff215 	stw	r2,-56(fp)
	ucPercentage = 5;
81102144:	00800144 	movi	r2,5
81102148:	e0bff305 	stb	r2,-52(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
8110214c:	00e04534 	movhi	r3,33044
81102150:	18c06204 	addi	r3,r3,392
81102154:	00a04534 	movhi	r2,33044
81102158:	10ae4304 	addi	r2,r2,-18164
8110215c:	1009883a 	mov	r4,r2
81102160:	00800584 	movi	r2,22
81102164:	100d883a 	mov	r6,r2
81102168:	200b883a 	mov	r5,r4
8110216c:	1809883a 	mov	r4,r3
81102170:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
81102174:	d0a04d17 	ldw	r2,-32460(gp)
81102178:	01604534 	movhi	r5,33044
8110217c:	29406204 	addi	r5,r5,392
81102180:	1009883a 	mov	r4,r2
81102184:	11110c40 	call	811110c4 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
81102188:	e0bffa17 	ldw	r2,-24(fp)
8110218c:	10800058 	cmpnei	r2,r2,1
81102190:	10000a1e 	bne	r2,zero,811021bc <bDdr2MemoryRandomWriteTest+0x20c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
81102194:	01604534 	movhi	r5,33044
81102198:	296e4904 	addi	r5,r5,-18140
8110219c:	01204534 	movhi	r4,33044
811021a0:	21006204 	addi	r4,r4,392
811021a4:	111282c0 	call	8111282c <sprintf>
		debug(fp, cDebugBuffer);
811021a8:	d0a04d17 	ldw	r2,-32460(gp)
811021ac:	01604534 	movhi	r5,33044
811021b0:	29406204 	addi	r5,r5,392
811021b4:	1009883a 	mov	r4,r2
811021b8:	11110c40 	call	811110c4 <fprintf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
811021bc:	e03ff615 	stw	zero,-40(fp)
811021c0:	d0a06b17 	ldw	r2,-32340(gp)

	TimeStart = alt_nticks();
811021c4:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
811021c8:	e0bfef17 	ldw	r2,-68(fp)
811021cc:	e0bff115 	stw	r2,-60(fp)
811021d0:	00002c06 	br	81102284 <bDdr2MemoryRandomWriteTest+0x2d4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
811021d4:	e0bff804 	addi	r2,fp,-32
811021d8:	1009883a 	mov	r4,r2
811021dc:	11028bc0 	call	811028bc <uliXorshift32>
811021e0:	1007883a 	mov	r3,r2
811021e4:	e0bff117 	ldw	r2,-60(fp)
811021e8:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
811021ec:	e0bffa17 	ldw	r2,-24(fp)
811021f0:	10800060 	cmpeqi	r2,r2,1
811021f4:	1009883a 	mov	r4,r2
811021f8:	e0bff117 	ldw	r2,-60(fp)
811021fc:	e0fff217 	ldw	r3,-56(fp)
81102200:	1885803a 	cmpltu	r2,r3,r2
81102204:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
81102208:	10803fcc 	andi	r2,r2,255
8110220c:	10001a26 	beq	r2,zero,81102278 <bDdr2MemoryRandomWriteTest+0x2c8>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102210:	e0bff303 	ldbu	r2,-52(fp)
81102214:	100d883a 	mov	r6,r2
81102218:	01604534 	movhi	r5,33044
8110221c:	296e4b04 	addi	r5,r5,-18132
81102220:	01204534 	movhi	r4,33044
81102224:	21006204 	addi	r4,r4,392
81102228:	111282c0 	call	8111282c <sprintf>
			debug(fp, cDebugBuffer);
8110222c:	d0a04d17 	ldw	r2,-32460(gp)
81102230:	01604534 	movhi	r5,33044
81102234:	29406204 	addi	r5,r5,392
81102238:	1009883a 	mov	r4,r2
8110223c:	11110c40 	call	811110c4 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
81102240:	e0fff017 	ldw	r3,-64(fp)
81102244:	00b33374 	movhi	r2,52429
81102248:	10b33344 	addi	r2,r2,-13107
8110224c:	1888383a 	mulxuu	r4,r3,r2
81102250:	1885383a 	mul	r2,r3,r2
81102254:	1021883a 	mov	r16,r2
81102258:	2023883a 	mov	r17,r4
8110225c:	8804d13a 	srli	r2,r17,4
81102260:	e0fff217 	ldw	r3,-56(fp)
81102264:	1885883a 	add	r2,r3,r2
81102268:	e0bff215 	stw	r2,-56(fp)
			ucPercentage += 5;
8110226c:	e0bff303 	ldbu	r2,-52(fp)
81102270:	10800144 	addi	r2,r2,5
81102274:	e0bff305 	stb	r2,-52(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
81102278:	e0bff117 	ldw	r2,-60(fp)
8110227c:	10800104 	addi	r2,r2,4
81102280:	e0bff115 	stw	r2,-60(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
81102284:	e0fff117 	ldw	r3,-60(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
81102288:	e0bff517 	ldw	r2,-44(fp)
8110228c:	18bfd136 	bltu	r3,r2,811021d4 <__reset+0xfb0e21d4>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
81102290:	11269080 	call	81126908 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81102294:	e0bffa17 	ldw	r2,-24(fp)
81102298:	10800058 	cmpnei	r2,r2,1
8110229c:	10000a1e 	bne	r2,zero,811022c8 <bDdr2MemoryRandomWriteTest+0x318>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
811022a0:	01604534 	movhi	r5,33044
811022a4:	296e4e04 	addi	r5,r5,-18120
811022a8:	01204534 	movhi	r4,33044
811022ac:	21006204 	addi	r4,r4,392
811022b0:	111282c0 	call	8111282c <sprintf>
		debug(fp, cDebugBuffer);
811022b4:	d0a04d17 	ldw	r2,-32460(gp)
811022b8:	01604534 	movhi	r5,33044
811022bc:	29406204 	addi	r5,r5,392
811022c0:	1009883a 	mov	r4,r2
811022c4:	11110c40 	call	811110c4 <fprintf>
#endif
	}

	if (bSuccess) {
811022c8:	e0bff417 	ldw	r2,-48(fp)
811022cc:	10003126 	beq	r2,zero,81102394 <bDdr2MemoryRandomWriteTest+0x3e4>
		if (bTime == TRUE) {
811022d0:	e0bffb17 	ldw	r2,-20(fp)
811022d4:	10800058 	cmpnei	r2,r2,1
811022d8:	1000221e 	bne	r2,zero,81102364 <bDdr2MemoryRandomWriteTest+0x3b4>
811022dc:	d0e06b17 	ldw	r3,-32340(gp)
			TimeElapsed = alt_nticks() - TimeStart;
811022e0:	e0bff717 	ldw	r2,-36(fp)
811022e4:	1885c83a 	sub	r2,r3,r2
811022e8:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
811022ec:	e13ff617 	ldw	r4,-40(fp)
811022f0:	11103000 	call	81110300 <__floatsisf>
811022f4:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811022f8:	d0a06a17 	ldw	r2,-32344(gp)
811022fc:	1009883a 	mov	r4,r2
81102300:	111042c0 	call	8111042c <__floatunsisf>
81102304:	1007883a 	mov	r3,r2
81102308:	180b883a 	mov	r5,r3
8110230c:	8009883a 	mov	r4,r16
81102310:	110fab40 	call	8110fab4 <__divsf3>
81102314:	1007883a 	mov	r3,r2
81102318:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
8110231c:	1009883a 	mov	r4,r2
81102320:	1110c440 	call	81110c44 <__extendsfdf2>
81102324:	1009883a 	mov	r4,r2
81102328:	180b883a 	mov	r5,r3
8110232c:	d9400015 	stw	r5,0(sp)
81102330:	200f883a 	mov	r7,r4
81102334:	e1bff017 	ldw	r6,-64(fp)
81102338:	01604534 	movhi	r5,33044
8110233c:	296e5104 	addi	r5,r5,-18108
81102340:	01204534 	movhi	r4,33044
81102344:	21006204 	addi	r4,r4,392
81102348:	111282c0 	call	8111282c <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
8110234c:	d0a04d17 	ldw	r2,-32460(gp)
81102350:	01604534 	movhi	r5,33044
81102354:	29406204 	addi	r5,r5,392
81102358:	1009883a 	mov	r4,r2
8110235c:	11110c40 	call	811110c4 <fprintf>
81102360:	00001b06 	br	811023d0 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
81102364:	e1bff017 	ldw	r6,-64(fp)
81102368:	01604534 	movhi	r5,33044
8110236c:	296e5d04 	addi	r5,r5,-18060
81102370:	01204534 	movhi	r4,33044
81102374:	21006204 	addi	r4,r4,392
81102378:	111282c0 	call	8111282c <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
8110237c:	d0a04d17 	ldw	r2,-32460(gp)
81102380:	01604534 	movhi	r5,33044
81102384:	29406204 	addi	r5,r5,392
81102388:	1009883a 	mov	r4,r2
8110238c:	11110c40 	call	811110c4 <fprintf>
81102390:	00000f06 	br	811023d0 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81102394:	00e04534 	movhi	r3,33044
81102398:	18c06204 	addi	r3,r3,392
8110239c:	00a04534 	movhi	r2,33044
811023a0:	10adfa04 	addi	r2,r2,-18456
811023a4:	1009883a 	mov	r4,r2
811023a8:	00800584 	movi	r2,22
811023ac:	100d883a 	mov	r6,r2
811023b0:	200b883a 	mov	r5,r4
811023b4:	1809883a 	mov	r4,r3
811023b8:	11120c40 	call	811120c4 <memcpy>
		debug(fp, cDebugBuffer);
811023bc:	d0a04d17 	ldw	r2,-32460(gp)
811023c0:	01604534 	movhi	r5,33044
811023c4:	29406204 	addi	r5,r5,392
811023c8:	1009883a 	mov	r4,r2
811023cc:	11110c40 	call	811110c4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811023d0:	00a04534 	movhi	r2,33044
811023d4:	10806204 	addi	r2,r2,392
811023d8:	00c00284 	movi	r3,10
811023dc:	10c00005 	stb	r3,0(r2)
811023e0:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811023e4:	d0a04d17 	ldw	r2,-32460(gp)
811023e8:	01604534 	movhi	r5,33044
811023ec:	29406204 	addi	r5,r5,392
811023f0:	1009883a 	mov	r4,r2
811023f4:	11110c40 	call	811110c4 <fprintf>
#endif

	return bSuccess;
811023f8:	e0bff417 	ldw	r2,-48(fp)
}
811023fc:	e6fffc04 	addi	sp,fp,-16
81102400:	dfc00517 	ldw	ra,20(sp)
81102404:	df000417 	ldw	fp,16(sp)
81102408:	dcc00317 	ldw	r19,12(sp)
8110240c:	dc800217 	ldw	r18,8(sp)
81102410:	dc400117 	ldw	r17,4(sp)
81102414:	dc000017 	ldw	r16,0(sp)
81102418:	dec00604 	addi	sp,sp,24
8110241c:	f800283a 	ret

81102420 <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102420:	deffec04 	addi	sp,sp,-80
81102424:	de00012e 	bgeu	sp,et,8110242c <bDdr2MemoryRandomReadTest+0xc>
81102428:	003b68fa 	trap	3
8110242c:	dfc01315 	stw	ra,76(sp)
81102430:	df001215 	stw	fp,72(sp)
81102434:	dcc01115 	stw	r19,68(sp)
81102438:	dc801015 	stw	r18,64(sp)
8110243c:	dc400f15 	stw	r17,60(sp)
81102440:	dc000e15 	stw	r16,56(sp)
81102444:	df001204 	addi	fp,sp,72
81102448:	2005883a 	mov	r2,r4
8110244c:	e17ffa15 	stw	r5,-24(fp)
81102450:	e1bffb15 	stw	r6,-20(fp)
81102454:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
81102458:	00e04534 	movhi	r3,33044
8110245c:	18c06204 	addi	r3,r3,392
81102460:	00a04534 	movhi	r2,33044
81102464:	10ae6704 	addi	r2,r2,-18020
81102468:	1009883a 	mov	r4,r2
8110246c:	00800b84 	movi	r2,46
81102470:	100d883a 	mov	r6,r2
81102474:	200b883a 	mov	r5,r4
81102478:	1809883a 	mov	r4,r3
8110247c:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
81102480:	d0a04d17 	ldw	r2,-32460(gp)
81102484:	01604534 	movhi	r5,33044
81102488:	29406204 	addi	r5,r5,392
8110248c:	1009883a 	mov	r4,r2
81102490:	11110c40 	call	811110c4 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102494:	00800044 	movi	r2,1
81102498:	e0bfef15 	stw	r2,-68(fp)
	switch (ucMemoryId) {
8110249c:	e0bff903 	ldbu	r2,-28(fp)
811024a0:	10c00060 	cmpeqi	r3,r2,1
811024a4:	1800031e 	bne	r3,zero,811024b4 <bDdr2MemoryRandomReadTest+0x94>
811024a8:	108000a0 	cmpeqi	r2,r2,2
811024ac:	1000081e 	bne	r2,zero,811024d0 <bDdr2MemoryRandomReadTest+0xb0>
811024b0:	00000e06 	br	811024ec <bDdr2MemoryRandomReadTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811024b4:	e0bff903 	ldbu	r2,-28(fp)
811024b8:	1009883a 	mov	r4,r2
811024bc:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811024c0:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811024c4:	00a00034 	movhi	r2,32768
811024c8:	e0bff115 	stw	r2,-60(fp)
		break;
811024cc:	00001906 	br	81102534 <bDdr2MemoryRandomReadTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811024d0:	e0bff903 	ldbu	r2,-28(fp)
811024d4:	1009883a 	mov	r4,r2
811024d8:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811024dc:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811024e0:	00a00034 	movhi	r2,32768
811024e4:	e0bff115 	stw	r2,-60(fp)
		break;
811024e8:	00001206 	br	81102534 <bDdr2MemoryRandomReadTest+0x114>
	default:
		bSuccess = FALSE;
811024ec:	e03fef15 	stw	zero,-68(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811024f0:	00e04534 	movhi	r3,33044
811024f4:	18c06204 	addi	r3,r3,392
811024f8:	00a04534 	movhi	r2,33044
811024fc:	10abe804 	addi	r2,r2,-20576
81102500:	1009883a 	mov	r4,r2
81102504:	00800bc4 	movi	r2,47
81102508:	100d883a 	mov	r6,r2
8110250c:	200b883a 	mov	r5,r4
81102510:	1809883a 	mov	r4,r3
81102514:	11120c40 	call	811120c4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102518:	d0a04d17 	ldw	r2,-32460(gp)
8110251c:	01604534 	movhi	r5,33044
81102520:	29406204 	addi	r5,r5,392
81102524:	1009883a 	mov	r4,r2
81102528:	11110c40 	call	811110c4 <fprintf>
		;
#endif
		return bSuccess;
8110252c:	e0bfef17 	ldw	r2,-68(fp)
81102530:	0000d906 	br	81102898 <bDdr2MemoryRandomReadTest+0x478>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81102534:	e0bff117 	ldw	r2,-60(fp)
81102538:	1004d53a 	srli	r2,r2,20
8110253c:	100d883a 	mov	r6,r2
81102540:	01604534 	movhi	r5,33044
81102544:	296de104 	addi	r5,r5,-18556
81102548:	01204534 	movhi	r4,33044
8110254c:	21006204 	addi	r4,r4,392
81102550:	111282c0 	call	8111282c <sprintf>
	debug(fp, cDebugBuffer);
81102554:	d0a04d17 	ldw	r2,-32460(gp)
81102558:	01604534 	movhi	r5,33044
8110255c:	29406204 	addi	r5,r5,392
81102560:	1009883a 	mov	r4,r2
81102564:	11110c40 	call	811110c4 <fprintf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
81102568:	d0a03617 	ldw	r2,-32552(gp)
8110256c:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102570:	e0fff017 	ldw	r3,-64(fp)
81102574:	e0bff117 	ldw	r2,-60(fp)
81102578:	1885883a 	add	r2,r3,r2
8110257c:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102580:	e0fff117 	ldw	r3,-60(fp)
81102584:	00b33374 	movhi	r2,52429
81102588:	10b33344 	addi	r2,r2,-13107
8110258c:	1888383a 	mulxuu	r4,r3,r2
81102590:	1885383a 	mul	r2,r3,r2
81102594:	1025883a 	mov	r18,r2
81102598:	2027883a 	mov	r19,r4
8110259c:	9806d13a 	srli	r3,r19,4
811025a0:	e0bff017 	ldw	r2,-64(fp)
811025a4:	1885883a 	add	r2,r3,r2
811025a8:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
811025ac:	00800144 	movi	r2,5
811025b0:	e0bff405 	stb	r2,-48(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
811025b4:	00e04534 	movhi	r3,33044
811025b8:	18c06204 	addi	r3,r3,392
811025bc:	00a04534 	movhi	r2,33044
811025c0:	10ae7304 	addi	r2,r2,-17972
811025c4:	1009883a 	mov	r4,r2
811025c8:	00800604 	movi	r2,24
811025cc:	100d883a 	mov	r6,r2
811025d0:	200b883a 	mov	r5,r4
811025d4:	1809883a 	mov	r4,r3
811025d8:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
811025dc:	d0a04d17 	ldw	r2,-32460(gp)
811025e0:	01604534 	movhi	r5,33044
811025e4:	29406204 	addi	r5,r5,392
811025e8:	1009883a 	mov	r4,r2
811025ec:	11110c40 	call	811110c4 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
811025f0:	e0bffa17 	ldw	r2,-24(fp)
811025f4:	10800058 	cmpnei	r2,r2,1
811025f8:	10000a1e 	bne	r2,zero,81102624 <bDdr2MemoryRandomReadTest+0x204>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
811025fc:	01604534 	movhi	r5,33044
81102600:	296e4904 	addi	r5,r5,-18140
81102604:	01204534 	movhi	r4,33044
81102608:	21006204 	addi	r4,r4,392
8110260c:	111282c0 	call	8111282c <sprintf>
		debug(fp, cDebugBuffer);
81102610:	d0a04d17 	ldw	r2,-32460(gp)
81102614:	01604534 	movhi	r5,33044
81102618:	29406204 	addi	r5,r5,392
8110261c:	1009883a 	mov	r4,r2
81102620:	11110c40 	call	811110c4 <fprintf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
81102624:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102628:	d0a06b17 	ldw	r2,-32340(gp)

	TimeStart = alt_nticks();
8110262c:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
81102630:	e0bff017 	ldw	r2,-64(fp)
81102634:	e0bff215 	stw	r2,-56(fp)
81102638:	00003a06 	br	81102724 <bDdr2MemoryRandomReadTest+0x304>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
8110263c:	e0bff804 	addi	r2,fp,-32
81102640:	1009883a 	mov	r4,r2
81102644:	11028bc0 	call	811028bc <uliXorshift32>
81102648:	1007883a 	mov	r3,r2
8110264c:	e0bff217 	ldw	r2,-56(fp)
81102650:	10800017 	ldw	r2,0(r2)
81102654:	18801026 	beq	r3,r2,81102698 <bDdr2MemoryRandomReadTest+0x278>
			bSuccess = FALSE;
81102658:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
8110265c:	e0bffa17 	ldw	r2,-24(fp)
81102660:	10800058 	cmpnei	r2,r2,1
81102664:	10000c1e 	bne	r2,zero,81102698 <bDdr2MemoryRandomReadTest+0x278>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
81102668:	e0bff217 	ldw	r2,-56(fp)
8110266c:	100d883a 	mov	r6,r2
81102670:	01604534 	movhi	r5,33044
81102674:	296e7904 	addi	r5,r5,-17948
81102678:	01204534 	movhi	r4,33044
8110267c:	21006204 	addi	r4,r4,392
81102680:	111282c0 	call	8111282c <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
81102684:	d0a04d17 	ldw	r2,-32460(gp)
81102688:	01604534 	movhi	r5,33044
8110268c:	29406204 	addi	r5,r5,392
81102690:	1009883a 	mov	r4,r2
81102694:	11110c40 	call	811110c4 <fprintf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
81102698:	e0bffa17 	ldw	r2,-24(fp)
8110269c:	10800058 	cmpnei	r2,r2,1
811026a0:	10001d1e 	bne	r2,zero,81102718 <bDdr2MemoryRandomReadTest+0x2f8>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
811026a4:	e0bff217 	ldw	r2,-56(fp)
811026a8:	e0fff317 	ldw	r3,-52(fp)
811026ac:	18801a2e 	bgeu	r3,r2,81102718 <bDdr2MemoryRandomReadTest+0x2f8>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
811026b0:	e0bff403 	ldbu	r2,-48(fp)
811026b4:	100d883a 	mov	r6,r2
811026b8:	01604534 	movhi	r5,33044
811026bc:	296e4b04 	addi	r5,r5,-18132
811026c0:	01204534 	movhi	r4,33044
811026c4:	21006204 	addi	r4,r4,392
811026c8:	111282c0 	call	8111282c <sprintf>
			debug(fp, cDebugBuffer);
811026cc:	d0a04d17 	ldw	r2,-32460(gp)
811026d0:	01604534 	movhi	r5,33044
811026d4:	29406204 	addi	r5,r5,392
811026d8:	1009883a 	mov	r4,r2
811026dc:	11110c40 	call	811110c4 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
811026e0:	e0fff117 	ldw	r3,-60(fp)
811026e4:	00b33374 	movhi	r2,52429
811026e8:	10b33344 	addi	r2,r2,-13107
811026ec:	1888383a 	mulxuu	r4,r3,r2
811026f0:	1885383a 	mul	r2,r3,r2
811026f4:	1021883a 	mov	r16,r2
811026f8:	2023883a 	mov	r17,r4
811026fc:	8804d13a 	srli	r2,r17,4
81102700:	e0fff317 	ldw	r3,-52(fp)
81102704:	1885883a 	add	r2,r3,r2
81102708:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
8110270c:	e0bff403 	ldbu	r2,-48(fp)
81102710:	10800144 	addi	r2,r2,5
81102714:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
81102718:	e0bff217 	ldw	r2,-56(fp)
8110271c:	10800104 	addi	r2,r2,4
81102720:	e0bff215 	stw	r2,-56(fp)
81102724:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
81102728:	e0bff517 	ldw	r2,-44(fp)
8110272c:	18bfc336 	bltu	r3,r2,8110263c <__reset+0xfb0e263c>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
81102730:	e0bffa17 	ldw	r2,-24(fp)
81102734:	10800058 	cmpnei	r2,r2,1
81102738:	10000a1e 	bne	r2,zero,81102764 <bDdr2MemoryRandomReadTest+0x344>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
8110273c:	01604534 	movhi	r5,33044
81102740:	296e4e04 	addi	r5,r5,-18120
81102744:	01204534 	movhi	r4,33044
81102748:	21006204 	addi	r4,r4,392
8110274c:	111282c0 	call	8111282c <sprintf>
		debug(fp, cDebugBuffer);
81102750:	d0a04d17 	ldw	r2,-32460(gp)
81102754:	01604534 	movhi	r5,33044
81102758:	29406204 	addi	r5,r5,392
8110275c:	1009883a 	mov	r4,r2
81102760:	11110c40 	call	811110c4 <fprintf>
#endif
	}

	if (bSuccess) {
81102764:	e0bfef17 	ldw	r2,-68(fp)
81102768:	10003126 	beq	r2,zero,81102830 <bDdr2MemoryRandomReadTest+0x410>
		if (bTime == TRUE) {
8110276c:	e0bffb17 	ldw	r2,-20(fp)
81102770:	10800058 	cmpnei	r2,r2,1
81102774:	1000221e 	bne	r2,zero,81102800 <bDdr2MemoryRandomReadTest+0x3e0>
81102778:	d0e06b17 	ldw	r3,-32340(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8110277c:	e0bff717 	ldw	r2,-36(fp)
81102780:	1885c83a 	sub	r2,r3,r2
81102784:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
81102788:	e13ff617 	ldw	r4,-40(fp)
8110278c:	11103000 	call	81110300 <__floatsisf>
81102790:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102794:	d0a06a17 	ldw	r2,-32344(gp)
81102798:	1009883a 	mov	r4,r2
8110279c:	111042c0 	call	8111042c <__floatunsisf>
811027a0:	1007883a 	mov	r3,r2
811027a4:	180b883a 	mov	r5,r3
811027a8:	8009883a 	mov	r4,r16
811027ac:	110fab40 	call	8110fab4 <__divsf3>
811027b0:	1007883a 	mov	r3,r2
811027b4:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
811027b8:	1009883a 	mov	r4,r2
811027bc:	1110c440 	call	81110c44 <__extendsfdf2>
811027c0:	1009883a 	mov	r4,r2
811027c4:	180b883a 	mov	r5,r3
811027c8:	d9400015 	stw	r5,0(sp)
811027cc:	200f883a 	mov	r7,r4
811027d0:	e1bff117 	ldw	r6,-60(fp)
811027d4:	01604534 	movhi	r5,33044
811027d8:	296e8104 	addi	r5,r5,-17916
811027dc:	01204534 	movhi	r4,33044
811027e0:	21006204 	addi	r4,r4,392
811027e4:	111282c0 	call	8111282c <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
811027e8:	d0a04d17 	ldw	r2,-32460(gp)
811027ec:	01604534 	movhi	r5,33044
811027f0:	29406204 	addi	r5,r5,392
811027f4:	1009883a 	mov	r4,r2
811027f8:	11110c40 	call	811110c4 <fprintf>
811027fc:	00001b06 	br	8110286c <bDdr2MemoryRandomReadTest+0x44c>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
81102800:	e1bff117 	ldw	r6,-60(fp)
81102804:	01604534 	movhi	r5,33044
81102808:	296e8d04 	addi	r5,r5,-17868
8110280c:	01204534 	movhi	r4,33044
81102810:	21006204 	addi	r4,r4,392
81102814:	111282c0 	call	8111282c <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
81102818:	d0a04d17 	ldw	r2,-32460(gp)
8110281c:	01604534 	movhi	r5,33044
81102820:	29406204 	addi	r5,r5,392
81102824:	1009883a 	mov	r4,r2
81102828:	11110c40 	call	811110c4 <fprintf>
8110282c:	00000f06 	br	8110286c <bDdr2MemoryRandomReadTest+0x44c>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81102830:	00e04534 	movhi	r3,33044
81102834:	18c06204 	addi	r3,r3,392
81102838:	00a04534 	movhi	r2,33044
8110283c:	10ae3104 	addi	r2,r2,-18236
81102840:	1009883a 	mov	r4,r2
81102844:	00800544 	movi	r2,21
81102848:	100d883a 	mov	r6,r2
8110284c:	200b883a 	mov	r5,r4
81102850:	1809883a 	mov	r4,r3
81102854:	11120c40 	call	811120c4 <memcpy>
		debug(fp, cDebugBuffer);
81102858:	d0a04d17 	ldw	r2,-32460(gp)
8110285c:	01604534 	movhi	r5,33044
81102860:	29406204 	addi	r5,r5,392
81102864:	1009883a 	mov	r4,r2
81102868:	11110c40 	call	811110c4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8110286c:	00a04534 	movhi	r2,33044
81102870:	10806204 	addi	r2,r2,392
81102874:	00c00284 	movi	r3,10
81102878:	10c00005 	stb	r3,0(r2)
8110287c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102880:	d0a04d17 	ldw	r2,-32460(gp)
81102884:	01604534 	movhi	r5,33044
81102888:	29406204 	addi	r5,r5,392
8110288c:	1009883a 	mov	r4,r2
81102890:	11110c40 	call	811110c4 <fprintf>
#endif

	return bSuccess;
81102894:	e0bfef17 	ldw	r2,-68(fp)
}
81102898:	e6fffc04 	addi	sp,fp,-16
8110289c:	dfc00517 	ldw	ra,20(sp)
811028a0:	df000417 	ldw	fp,16(sp)
811028a4:	dcc00317 	ldw	r19,12(sp)
811028a8:	dc800217 	ldw	r18,8(sp)
811028ac:	dc400117 	ldw	r17,4(sp)
811028b0:	dc000017 	ldw	r16,0(sp)
811028b4:	dec00604 	addi	sp,sp,24
811028b8:	f800283a 	ret

811028bc <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
811028bc:	defffd04 	addi	sp,sp,-12
811028c0:	de00012e 	bgeu	sp,et,811028c8 <uliXorshift32+0xc>
811028c4:	003b68fa 	trap	3
811028c8:	df000215 	stw	fp,8(sp)
811028cc:	df000204 	addi	fp,sp,8
811028d0:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
811028d4:	e0bfff17 	ldw	r2,-4(fp)
811028d8:	10800017 	ldw	r2,0(r2)
811028dc:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
811028e0:	e0bffe17 	ldw	r2,-8(fp)
811028e4:	1004937a 	slli	r2,r2,13
811028e8:	e0fffe17 	ldw	r3,-8(fp)
811028ec:	1884f03a 	xor	r2,r3,r2
811028f0:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
811028f4:	e0bffe17 	ldw	r2,-8(fp)
811028f8:	1004d47a 	srli	r2,r2,17
811028fc:	e0fffe17 	ldw	r3,-8(fp)
81102900:	1884f03a 	xor	r2,r3,r2
81102904:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
81102908:	e0bffe17 	ldw	r2,-8(fp)
8110290c:	1004917a 	slli	r2,r2,5
81102910:	e0fffe17 	ldw	r3,-8(fp)
81102914:	1884f03a 	xor	r2,r3,r2
81102918:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
8110291c:	e0bfff17 	ldw	r2,-4(fp)
81102920:	e0fffe17 	ldw	r3,-8(fp)
81102924:	10c00015 	stw	r3,0(r2)

	return uliX;
81102928:	e0bffe17 	ldw	r2,-8(fp)
}
8110292c:	e037883a 	mov	sp,fp
81102930:	df000017 	ldw	fp,0(sp)
81102934:	dec00104 	addi	sp,sp,4
81102938:	f800283a 	ret

8110293c <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
8110293c:	defffb04 	addi	sp,sp,-20
81102940:	de00012e 	bgeu	sp,et,81102948 <DMA_OPEN_DEVICE+0xc>
81102944:	003b68fa 	trap	3
81102948:	dfc00415 	stw	ra,16(sp)
8110294c:	df000315 	stw	fp,12(sp)
81102950:	df000304 	addi	fp,sp,12
81102954:	e13ffe15 	stw	r4,-8(fp)
81102958:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
8110295c:	00800044 	movi	r2,1
81102960:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
81102964:	e13fff17 	ldw	r4,-4(fp)
81102968:	11396080 	call	81139608 <alt_msgdma_open>
8110296c:	1007883a 	mov	r3,r2
81102970:	e0bffe17 	ldw	r2,-8(fp)
81102974:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
81102978:	e0bffe17 	ldw	r2,-8(fp)
8110297c:	10800017 	ldw	r2,0(r2)
81102980:	1000011e 	bne	r2,zero,81102988 <DMA_OPEN_DEVICE+0x4c>
    bSuccess = FALSE;
81102984:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
81102988:	e0bffd17 	ldw	r2,-12(fp)
}
8110298c:	e037883a 	mov	sp,fp
81102990:	dfc00117 	ldw	ra,4(sp)
81102994:	df000017 	ldw	fp,0(sp)
81102998:	dec00204 	addi	sp,sp,8
8110299c:	f800283a 	ret

811029a0 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
811029a0:	defffc04 	addi	sp,sp,-16
811029a4:	de00012e 	bgeu	sp,et,811029ac <DMA_CONFIG+0xc>
811029a8:	003b68fa 	trap	3
811029ac:	df000315 	stw	fp,12(sp)
811029b0:	df000304 	addi	fp,sp,12
811029b4:	e13ffe15 	stw	r4,-8(fp)
811029b8:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
811029bc:	00800044 	movi	r2,1
811029c0:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
811029c4:	e0bffe17 	ldw	r2,-8(fp)
811029c8:	10800317 	ldw	r2,12(r2)
811029cc:	10800104 	addi	r2,r2,4
811029d0:	e0ffff17 	ldw	r3,-4(fp)
811029d4:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
811029d8:	e0bffd17 	ldw	r2,-12(fp)
}
811029dc:	e037883a 	mov	sp,fp
811029e0:	df000017 	ldw	fp,0(sp)
811029e4:	dec00104 	addi	sp,sp,4
811029e8:	f800283a 	ret

811029ec <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
811029ec:	defffd04 	addi	sp,sp,-12
811029f0:	de00012e 	bgeu	sp,et,811029f8 <DMA_BUSY+0xc>
811029f4:	003b68fa 	trap	3
811029f8:	df000215 	stw	fp,8(sp)
811029fc:	df000204 	addi	fp,sp,8
81102a00:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
81102a04:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81102a08:	e0bfff17 	ldw	r2,-4(fp)
81102a0c:	10800317 	ldw	r2,12(r2)
81102a10:	10800037 	ldwio	r2,0(r2)
81102a14:	1080004c 	andi	r2,r2,1
81102a18:	10000226 	beq	r2,zero,81102a24 <DMA_BUSY+0x38>
    bBusy = TRUE;
81102a1c:	00800044 	movi	r2,1
81102a20:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81102a24:	e0bffe17 	ldw	r2,-8(fp)
}
81102a28:	e037883a 	mov	sp,fp
81102a2c:	df000017 	ldw	fp,0(sp)
81102a30:	dec00104 	addi	sp,sp,4
81102a34:	f800283a 	ret

81102a38 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81102a38:	defffd04 	addi	sp,sp,-12
81102a3c:	de00012e 	bgeu	sp,et,81102a44 <DMA_DESCRIPTOR_BUFFER_FULL+0xc>
81102a40:	003b68fa 	trap	3
81102a44:	df000215 	stw	fp,8(sp)
81102a48:	df000204 	addi	fp,sp,8
81102a4c:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81102a50:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81102a54:	e0bfff17 	ldw	r2,-4(fp)
81102a58:	10800317 	ldw	r2,12(r2)
81102a5c:	10800037 	ldwio	r2,0(r2)
81102a60:	1080010c 	andi	r2,r2,4
81102a64:	10000226 	beq	r2,zero,81102a70 <DMA_DESCRIPTOR_BUFFER_FULL+0x38>
    bFull = TRUE;
81102a68:	00800044 	movi	r2,1
81102a6c:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81102a70:	e0bffe17 	ldw	r2,-8(fp)
}
81102a74:	e037883a 	mov	sp,fp
81102a78:	df000017 	ldw	fp,0(sp)
81102a7c:	dec00104 	addi	sp,sp,4
81102a80:	f800283a 	ret

81102a84 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81102a84:	defffd04 	addi	sp,sp,-12
81102a88:	de00012e 	bgeu	sp,et,81102a90 <DMA_DESCRIPTOR_BUFFER_EMPTY+0xc>
81102a8c:	003b68fa 	trap	3
81102a90:	df000215 	stw	fp,8(sp)
81102a94:	df000204 	addi	fp,sp,8
81102a98:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81102a9c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81102aa0:	e0bfff17 	ldw	r2,-4(fp)
81102aa4:	10800317 	ldw	r2,12(r2)
81102aa8:	10800037 	ldwio	r2,0(r2)
81102aac:	1080008c 	andi	r2,r2,2
81102ab0:	10000226 	beq	r2,zero,81102abc <DMA_DESCRIPTOR_BUFFER_EMPTY+0x38>
    bEmpty = TRUE;
81102ab4:	00800044 	movi	r2,1
81102ab8:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81102abc:	e0bffe17 	ldw	r2,-8(fp)
}
81102ac0:	e037883a 	mov	sp,fp
81102ac4:	df000017 	ldw	fp,0(sp)
81102ac8:	dec00104 	addi	sp,sp,4
81102acc:	f800283a 	ret

81102ad0 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102ad0:	defffa04 	addi	sp,sp,-24
81102ad4:	de00012e 	bgeu	sp,et,81102adc <DMA_DISPATCHER_STOP+0xc>
81102ad8:	003b68fa 	trap	3
81102adc:	dfc00515 	stw	ra,20(sp)
81102ae0:	df000415 	stw	fp,16(sp)
81102ae4:	df000404 	addi	fp,sp,16
81102ae8:	e13ffd15 	stw	r4,-12(fp)
81102aec:	e17ffe15 	stw	r5,-8(fp)
81102af0:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102af4:	00800044 	movi	r2,1
81102af8:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81102afc:	e0bffd17 	ldw	r2,-12(fp)
81102b00:	10800317 	ldw	r2,12(r2)
81102b04:	10800104 	addi	r2,r2,4
81102b08:	00c00044 	movi	r3,1
81102b0c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102b10:	e0bffe17 	ldw	r2,-8(fp)
81102b14:	10800058 	cmpnei	r2,r2,1
81102b18:	10000e1e 	bne	r2,zero,81102b54 <DMA_DISPATCHER_STOP+0x84>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b1c:	00000706 	br	81102b3c <DMA_DISPATCHER_STOP+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102b20:	e0bfff17 	ldw	r2,-4(fp)
81102b24:	1000031e 	bne	r2,zero,81102b34 <DMA_DISPATCHER_STOP+0x64>
        usleep(1);
81102b28:	01000044 	movi	r4,1
81102b2c:	112758c0 	call	8112758c <usleep>
81102b30:	00000206 	br	81102b3c <DMA_DISPATCHER_STOP+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102b34:	e13fff17 	ldw	r4,-4(fp)
81102b38:	112758c0 	call	8112758c <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b3c:	e0bffd17 	ldw	r2,-12(fp)
81102b40:	10800317 	ldw	r2,12(r2)
81102b44:	10800037 	ldwio	r2,0(r2)
81102b48:	1080080c 	andi	r2,r2,32
81102b4c:	103ff41e 	bne	r2,zero,81102b20 <__reset+0xfb0e2b20>
81102b50:	00000206 	br	81102b5c <DMA_DISPATCHER_STOP+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102b54:	e0bffc17 	ldw	r2,-16(fp)
81102b58:	00000106 	br	81102b60 <DMA_DISPATCHER_STOP+0x90>
  }
  
  return bSuccess;
81102b5c:	e0bffc17 	ldw	r2,-16(fp)
}
81102b60:	e037883a 	mov	sp,fp
81102b64:	dfc00117 	ldw	ra,4(sp)
81102b68:	df000017 	ldw	fp,0(sp)
81102b6c:	dec00204 	addi	sp,sp,8
81102b70:	f800283a 	ret

81102b74 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102b74:	defffa04 	addi	sp,sp,-24
81102b78:	de00012e 	bgeu	sp,et,81102b80 <DMA_DISPATCHER_RESET+0xc>
81102b7c:	003b68fa 	trap	3
81102b80:	dfc00515 	stw	ra,20(sp)
81102b84:	df000415 	stw	fp,16(sp)
81102b88:	df000404 	addi	fp,sp,16
81102b8c:	e13ffd15 	stw	r4,-12(fp)
81102b90:	e17ffe15 	stw	r5,-8(fp)
81102b94:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102b98:	00800044 	movi	r2,1
81102b9c:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81102ba0:	e0bffd17 	ldw	r2,-12(fp)
81102ba4:	10800317 	ldw	r2,12(r2)
81102ba8:	10800104 	addi	r2,r2,4
81102bac:	00c00084 	movi	r3,2
81102bb0:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102bb4:	e0bffe17 	ldw	r2,-8(fp)
81102bb8:	10800058 	cmpnei	r2,r2,1
81102bbc:	10000e1e 	bne	r2,zero,81102bf8 <DMA_DISPATCHER_RESET+0x84>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102bc0:	00000706 	br	81102be0 <DMA_DISPATCHER_RESET+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102bc4:	e0bfff17 	ldw	r2,-4(fp)
81102bc8:	1000031e 	bne	r2,zero,81102bd8 <DMA_DISPATCHER_RESET+0x64>
        usleep(1);
81102bcc:	01000044 	movi	r4,1
81102bd0:	112758c0 	call	8112758c <usleep>
81102bd4:	00000206 	br	81102be0 <DMA_DISPATCHER_RESET+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102bd8:	e13fff17 	ldw	r4,-4(fp)
81102bdc:	112758c0 	call	8112758c <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102be0:	e0bffd17 	ldw	r2,-12(fp)
81102be4:	10800317 	ldw	r2,12(r2)
81102be8:	10800037 	ldwio	r2,0(r2)
81102bec:	1080100c 	andi	r2,r2,64
81102bf0:	103ff41e 	bne	r2,zero,81102bc4 <__reset+0xfb0e2bc4>
81102bf4:	00000206 	br	81102c00 <DMA_DISPATCHER_RESET+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102bf8:	e0bffc17 	ldw	r2,-16(fp)
81102bfc:	00000106 	br	81102c04 <DMA_DISPATCHER_RESET+0x90>
  }
  
  return bSuccess;
81102c00:	e0bffc17 	ldw	r2,-16(fp)
}
81102c04:	e037883a 	mov	sp,fp
81102c08:	dfc00117 	ldw	ra,4(sp)
81102c0c:	df000017 	ldw	fp,0(sp)
81102c10:	dec00204 	addi	sp,sp,8
81102c14:	f800283a 	ret

81102c18 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102c18:	defff604 	addi	sp,sp,-40
81102c1c:	de00012e 	bgeu	sp,et,81102c24 <DMA_SINGLE_TRANSFER+0xc>
81102c20:	003b68fa 	trap	3
81102c24:	dfc00915 	stw	ra,36(sp)
81102c28:	df000815 	stw	fp,32(sp)
81102c2c:	dc000715 	stw	r16,28(sp)
81102c30:	df000804 	addi	fp,sp,32
81102c34:	e13ffb15 	stw	r4,-20(fp)
81102c38:	e17ffc15 	stw	r5,-16(fp)
81102c3c:	e1bffd15 	stw	r6,-12(fp)
81102c40:	e1fffe15 	stw	r7,-8(fp)
81102c44:	defff804 	addi	sp,sp,-32
81102c48:	d8800204 	addi	r2,sp,8
81102c4c:	108003c4 	addi	r2,r2,15
81102c50:	1004d13a 	srli	r2,r2,4
81102c54:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102c58:	00800044 	movi	r2,1
81102c5c:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81102c60:	e0fffc17 	ldw	r3,-16(fp)
81102c64:	e13ffd17 	ldw	r4,-12(fp)
81102c68:	e0800217 	ldw	r2,8(fp)
81102c6c:	d8800115 	stw	r2,4(sp)
81102c70:	e0bffe17 	ldw	r2,-8(fp)
81102c74:	d8800015 	stw	r2,0(sp)
81102c78:	200f883a 	mov	r7,r4
81102c7c:	180d883a 	mov	r6,r3
81102c80:	800b883a 	mov	r5,r16
81102c84:	e13ffb17 	ldw	r4,-20(fp)
81102c88:	11386040 	call	81138604 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102c8c:	10000326 	beq	r2,zero,81102c9c <DMA_SINGLE_TRANSFER+0x84>
    bSuccess = FALSE;
81102c90:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81102c94:	e0bffa17 	ldw	r2,-24(fp)
81102c98:	00001d06 	br	81102d10 <DMA_SINGLE_TRANSFER+0xf8>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102c9c:	800b883a 	mov	r5,r16
81102ca0:	e13ffb17 	ldw	r4,-20(fp)
81102ca4:	11398780 	call	81139878 <alt_msgdma_standard_descriptor_async_transfer>
81102ca8:	10000326 	beq	r2,zero,81102cb8 <DMA_SINGLE_TRANSFER+0xa0>
      bSuccess = FALSE;
81102cac:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81102cb0:	e0bffa17 	ldw	r2,-24(fp)
81102cb4:	00001606 	br	81102d10 <DMA_SINGLE_TRANSFER+0xf8>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102cb8:	e0bffa17 	ldw	r2,-24(fp)
81102cbc:	10800060 	cmpeqi	r2,r2,1
81102cc0:	1007883a 	mov	r3,r2
81102cc4:	e0800317 	ldw	r2,12(fp)
81102cc8:	10800060 	cmpeqi	r2,r2,1
81102ccc:	1884703a 	and	r2,r3,r2
81102cd0:	10803fcc 	andi	r2,r2,255
81102cd4:	10000d26 	beq	r2,zero,81102d0c <DMA_SINGLE_TRANSFER+0xf4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102cd8:	00000706 	br	81102cf8 <DMA_SINGLE_TRANSFER+0xe0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102cdc:	e0800417 	ldw	r2,16(fp)
81102ce0:	1000031e 	bne	r2,zero,81102cf0 <DMA_SINGLE_TRANSFER+0xd8>
        usleep(1000);
81102ce4:	0100fa04 	movi	r4,1000
81102ce8:	112758c0 	call	8112758c <usleep>
81102cec:	00000206 	br	81102cf8 <DMA_SINGLE_TRANSFER+0xe0>
      } else {
        usleep(WaitPeriodUs);
81102cf0:	e1000417 	ldw	r4,16(fp)
81102cf4:	112758c0 	call	8112758c <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102cf8:	e0bffb17 	ldw	r2,-20(fp)
81102cfc:	10800317 	ldw	r2,12(r2)
81102d00:	10800037 	ldwio	r2,0(r2)
81102d04:	1080004c 	andi	r2,r2,1
81102d08:	103ff41e 	bne	r2,zero,81102cdc <__reset+0xfb0e2cdc>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102d0c:	e0bffa17 	ldw	r2,-24(fp)
}
81102d10:	e6ffff04 	addi	sp,fp,-4
81102d14:	dfc00217 	ldw	ra,8(sp)
81102d18:	df000117 	ldw	fp,4(sp)
81102d1c:	dc000017 	ldw	r16,0(sp)
81102d20:	dec00304 	addi	sp,sp,12
81102d24:	f800283a 	ret

81102d28 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102d28:	defff504 	addi	sp,sp,-44
81102d2c:	de00012e 	bgeu	sp,et,81102d34 <DMA_MULTIPLE_TRANSFER+0xc>
81102d30:	003b68fa 	trap	3
81102d34:	dfc00a15 	stw	ra,40(sp)
81102d38:	df000915 	stw	fp,36(sp)
81102d3c:	dc000815 	stw	r16,32(sp)
81102d40:	df000904 	addi	fp,sp,36
81102d44:	e13ffb15 	stw	r4,-20(fp)
81102d48:	e17ffc15 	stw	r5,-16(fp)
81102d4c:	e1bffd15 	stw	r6,-12(fp)
81102d50:	3805883a 	mov	r2,r7
81102d54:	e0bffe05 	stb	r2,-8(fp)
81102d58:	defff804 	addi	sp,sp,-32
81102d5c:	d8800204 	addi	r2,sp,8
81102d60:	108003c4 	addi	r2,r2,15
81102d64:	1004d13a 	srli	r2,r2,4
81102d68:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102d6c:	00800044 	movi	r2,1
81102d70:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81102d74:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102d78:	00002506 	br	81102e10 <DMA_MULTIPLE_TRANSFER+0xe8>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81102d7c:	e0bffa03 	ldbu	r2,-24(fp)
81102d80:	1085883a 	add	r2,r2,r2
81102d84:	1085883a 	add	r2,r2,r2
81102d88:	1007883a 	mov	r3,r2
81102d8c:	e0bffc17 	ldw	r2,-16(fp)
81102d90:	10c5883a 	add	r2,r2,r3
81102d94:	10800017 	ldw	r2,0(r2)
81102d98:	1009883a 	mov	r4,r2
81102d9c:	e0bffa03 	ldbu	r2,-24(fp)
81102da0:	1085883a 	add	r2,r2,r2
81102da4:	1085883a 	add	r2,r2,r2
81102da8:	1007883a 	mov	r3,r2
81102dac:	e0bffd17 	ldw	r2,-12(fp)
81102db0:	10c5883a 	add	r2,r2,r3
81102db4:	10800017 	ldw	r2,0(r2)
81102db8:	1007883a 	mov	r3,r2
81102dbc:	e0800317 	ldw	r2,12(fp)
81102dc0:	10804034 	orhi	r2,r2,256
81102dc4:	d8800115 	stw	r2,4(sp)
81102dc8:	e0800217 	ldw	r2,8(fp)
81102dcc:	d8800015 	stw	r2,0(sp)
81102dd0:	180f883a 	mov	r7,r3
81102dd4:	200d883a 	mov	r6,r4
81102dd8:	800b883a 	mov	r5,r16
81102ddc:	e13ffb17 	ldw	r4,-20(fp)
81102de0:	11386040 	call	81138604 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102de4:	10000226 	beq	r2,zero,81102df0 <DMA_MULTIPLE_TRANSFER+0xc8>
      bSuccess = FALSE;
81102de8:	e03ff915 	stw	zero,-28(fp)
81102dec:	00000506 	br	81102e04 <DMA_MULTIPLE_TRANSFER+0xdc>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102df0:	800b883a 	mov	r5,r16
81102df4:	e13ffb17 	ldw	r4,-20(fp)
81102df8:	11398780 	call	81139878 <alt_msgdma_standard_descriptor_async_transfer>
81102dfc:	10000126 	beq	r2,zero,81102e04 <DMA_MULTIPLE_TRANSFER+0xdc>
        bSuccess = FALSE;
81102e00:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81102e04:	e0bffa03 	ldbu	r2,-24(fp)
81102e08:	10800044 	addi	r2,r2,1
81102e0c:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102e10:	e0bff917 	ldw	r2,-28(fp)
81102e14:	10800060 	cmpeqi	r2,r2,1
81102e18:	1009883a 	mov	r4,r2
81102e1c:	e0fffa03 	ldbu	r3,-24(fp)
81102e20:	e0bffe03 	ldbu	r2,-8(fp)
81102e24:	10bfffc4 	addi	r2,r2,-1
81102e28:	1884803a 	cmplt	r2,r3,r2
81102e2c:	2084703a 	and	r2,r4,r2
81102e30:	10803fcc 	andi	r2,r2,255
81102e34:	103fd11e 	bne	r2,zero,81102d7c <__reset+0xfb0e2d7c>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81102e38:	e0bff917 	ldw	r2,-28(fp)
81102e3c:	10800058 	cmpnei	r2,r2,1
81102e40:	1000211e 	bne	r2,zero,81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81102e44:	e0bffa03 	ldbu	r2,-24(fp)
81102e48:	1085883a 	add	r2,r2,r2
81102e4c:	1085883a 	add	r2,r2,r2
81102e50:	1007883a 	mov	r3,r2
81102e54:	e0bffc17 	ldw	r2,-16(fp)
81102e58:	10c5883a 	add	r2,r2,r3
81102e5c:	10800017 	ldw	r2,0(r2)
81102e60:	1009883a 	mov	r4,r2
81102e64:	e0bffa03 	ldbu	r2,-24(fp)
81102e68:	1085883a 	add	r2,r2,r2
81102e6c:	1085883a 	add	r2,r2,r2
81102e70:	1007883a 	mov	r3,r2
81102e74:	e0bffd17 	ldw	r2,-12(fp)
81102e78:	10c5883a 	add	r2,r2,r3
81102e7c:	10800017 	ldw	r2,0(r2)
81102e80:	1007883a 	mov	r3,r2
81102e84:	e0800317 	ldw	r2,12(fp)
81102e88:	d8800115 	stw	r2,4(sp)
81102e8c:	e0800217 	ldw	r2,8(fp)
81102e90:	d8800015 	stw	r2,0(sp)
81102e94:	180f883a 	mov	r7,r3
81102e98:	200d883a 	mov	r6,r4
81102e9c:	800b883a 	mov	r5,r16
81102ea0:	e13ffb17 	ldw	r4,-20(fp)
81102ea4:	11386040 	call	81138604 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102ea8:	10000226 	beq	r2,zero,81102eb4 <DMA_MULTIPLE_TRANSFER+0x18c>
      bSuccess = FALSE;
81102eac:	e03ff915 	stw	zero,-28(fp)
81102eb0:	00000506 	br	81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102eb4:	800b883a 	mov	r5,r16
81102eb8:	e13ffb17 	ldw	r4,-20(fp)
81102ebc:	11398780 	call	81139878 <alt_msgdma_standard_descriptor_async_transfer>
81102ec0:	10000126 	beq	r2,zero,81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
        bSuccess = FALSE;
81102ec4:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102ec8:	e0bff917 	ldw	r2,-28(fp)
81102ecc:	10800060 	cmpeqi	r2,r2,1
81102ed0:	1007883a 	mov	r3,r2
81102ed4:	e0800417 	ldw	r2,16(fp)
81102ed8:	10800060 	cmpeqi	r2,r2,1
81102edc:	1884703a 	and	r2,r3,r2
81102ee0:	10803fcc 	andi	r2,r2,255
81102ee4:	10000d26 	beq	r2,zero,81102f1c <DMA_MULTIPLE_TRANSFER+0x1f4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102ee8:	00000706 	br	81102f08 <DMA_MULTIPLE_TRANSFER+0x1e0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102eec:	e0800517 	ldw	r2,20(fp)
81102ef0:	1000031e 	bne	r2,zero,81102f00 <DMA_MULTIPLE_TRANSFER+0x1d8>
    	usleep(1000);
81102ef4:	0100fa04 	movi	r4,1000
81102ef8:	112758c0 	call	8112758c <usleep>
81102efc:	00000206 	br	81102f08 <DMA_MULTIPLE_TRANSFER+0x1e0>
      } else {
    	usleep(WaitPeriodUs);
81102f00:	e1000517 	ldw	r4,20(fp)
81102f04:	112758c0 	call	8112758c <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f08:	e0bffb17 	ldw	r2,-20(fp)
81102f0c:	10800317 	ldw	r2,12(r2)
81102f10:	10800037 	ldwio	r2,0(r2)
81102f14:	1080004c 	andi	r2,r2,1
81102f18:	103ff41e 	bne	r2,zero,81102eec <__reset+0xfb0e2eec>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102f1c:	e0bff917 	ldw	r2,-28(fp)
}
81102f20:	e6ffff04 	addi	sp,fp,-4
81102f24:	dfc00217 	ldw	ra,8(sp)
81102f28:	df000117 	ldw	fp,4(sp)
81102f2c:	dc000017 	ldw	r16,0(sp)
81102f30:	dec00304 	addi	sp,sp,12
81102f34:	f800283a 	ret

81102f38 <POWER_Read>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]) {
81102f38:	deffef04 	addi	sp,sp,-68
81102f3c:	de00012e 	bgeu	sp,et,81102f44 <POWER_Read+0xc>
81102f40:	003b68fa 	trap	3
81102f44:	dfc01015 	stw	ra,64(sp)
81102f48:	df000f15 	stw	fp,60(sp)
81102f4c:	df000f04 	addi	fp,sp,60
81102f50:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = TRUE;
81102f54:	00800044 	movi	r2,1
81102f58:	e0bff315 	stw	r2,-52(fp)
	int i, c, nPortIndex = 0;
81102f5c:	e03ff615 	stw	zero,-40(fp)
	int szPortNum[] = { POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM };
81102f60:	00800204 	movi	r2,8
81102f64:	e0bffc15 	stw	r2,-16(fp)
81102f68:	00800104 	movi	r2,4
81102f6c:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
81102f70:	00800044 	movi	r2,1
81102f74:	e0bff715 	stw	r2,-36(fp)
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
81102f78:	00800044 	movi	r2,1
81102f7c:	e0bff815 	stw	r2,-32(fp)
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
81102f80:	e03ff915 	stw	zero,-28(fp)
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102f84:	e03ff515 	stw	zero,-44(fp)
81102f88:	00009206 	br	811031d4 <POWER_Read+0x29c>
		NextChannel = 0;
81102f8c:	e03ffa05 	stb	zero,-24(fp)
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81102f90:	e0bff517 	ldw	r2,-44(fp)
81102f94:	10c03fcc 	andi	r3,r2,255
81102f98:	e13ffa03 	ldbu	r4,-24(fp)
81102f9c:	e0bfff17 	ldw	r2,-4(fp)
81102fa0:	d8800115 	stw	r2,4(sp)
81102fa4:	e0bff917 	ldw	r2,-28(fp)
81102fa8:	d8800015 	stw	r2,0(sp)
81102fac:	e1fff817 	ldw	r7,-32(fp)
81102fb0:	e1bff717 	ldw	r6,-36(fp)
81102fb4:	200b883a 	mov	r5,r4
81102fb8:	1809883a 	mov	r4,r3
81102fbc:	1106cc80 	call	81106cc8 <POWER_SPI_RW>
81102fc0:	e0bff315 	stw	r2,-52(fp)
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81102fc4:	e03ff415 	stw	zero,-48(fp)
81102fc8:	00007406 	br	8110319c <POWER_Read+0x264>
			NextChannel = i + 1;
81102fcc:	e0bff417 	ldw	r2,-48(fp)
81102fd0:	10800044 	addi	r2,r2,1
81102fd4:	e0bffa05 	stb	r2,-24(fp)
			bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81102fd8:	e0bff517 	ldw	r2,-44(fp)
81102fdc:	10c03fcc 	andi	r3,r2,255
81102fe0:	e13ffa03 	ldbu	r4,-24(fp)
81102fe4:	e0bffe04 	addi	r2,fp,-8
81102fe8:	d8800115 	stw	r2,4(sp)
81102fec:	e0bff917 	ldw	r2,-28(fp)
81102ff0:	d8800015 	stw	r2,0(sp)
81102ff4:	e1fff817 	ldw	r7,-32(fp)
81102ff8:	e1bff717 	ldw	r6,-36(fp)
81102ffc:	200b883a 	mov	r5,r4
81103000:	1809883a 	mov	r4,r3
81103004:	1106cc80 	call	81106cc8 <POWER_SPI_RW>
81103008:	e0bff315 	stw	r2,-52(fp)
			if (bSuccess) {
8110300c:	e0bff317 	ldw	r2,-52(fp)
81103010:	10005026 	beq	r2,zero,81103154 <POWER_Read+0x21c>
				HEAD = (Value32 >> 30) & 0x03;
81103014:	e0bffe17 	ldw	r2,-8(fp)
81103018:	1004d7ba 	srli	r2,r2,30
8110301c:	e0bffa45 	stb	r2,-23(fp)
				Channel = (Value32 >> 1) & 0x07;
81103020:	e0bffe17 	ldw	r2,-8(fp)
81103024:	1004d07a 	srli	r2,r2,1
81103028:	108001cc 	andi	r2,r2,7
8110302c:	e0bffa85 	stb	r2,-22(fp)
				SIGN = (Value32 >> 4) & 0x01;
81103030:	e0bffe17 	ldw	r2,-8(fp)
81103034:	1004d13a 	srli	r2,r2,4
81103038:	1080004c 	andi	r2,r2,1
8110303c:	e0bffac5 	stb	r2,-21(fp)
				SGL = (Value32 >> 5) & 0x01;
81103040:	e0bffe17 	ldw	r2,-8(fp)
81103044:	1004d17a 	srli	r2,r2,5
81103048:	1080004c 	andi	r2,r2,1
8110304c:	e0bffb05 	stb	r2,-20(fp)
				PARITY = Value32 & 0x01;
81103050:	e0bffe17 	ldw	r2,-8(fp)
81103054:	1080004c 	andi	r2,r2,1
81103058:	e0bffb45 	stb	r2,-19(fp)
				if (HEAD != 0) {
8110305c:	e0bffa43 	ldbu	r2,-23(fp)
81103060:	10000d26 	beq	r2,zero,81103098 <POWER_Read+0x160>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected HEAD\r\n", i);
81103064:	e1bff417 	ldw	r6,-48(fp)
81103068:	01604534 	movhi	r5,33044
8110306c:	296e9704 	addi	r5,r5,-17828
81103070:	01204534 	movhi	r4,33044
81103074:	21006204 	addi	r4,r4,392
81103078:	111282c0 	call	8111282c <sprintf>
					debug(fp, cDebugBuffer);
8110307c:	d0a04d17 	ldw	r2,-32460(gp)
81103080:	01604534 	movhi	r5,33044
81103084:	29406204 	addi	r5,r5,392
81103088:	1009883a 	mov	r4,r2
8110308c:	11110c40 	call	811110c4 <fprintf>
#endif
					bSuccess = FALSE;
81103090:	e03ff315 	stw	zero,-52(fp)
81103094:	00002206 	br	81103120 <POWER_Read+0x1e8>
				} else if (Channel != i) {
81103098:	e0fffa83 	ldbu	r3,-22(fp)
8110309c:	e0bff417 	ldw	r2,-48(fp)
811030a0:	18801026 	beq	r3,r2,811030e4 <POWER_Read+0x1ac>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer,
811030a4:	e0bffa83 	ldbu	r2,-22(fp)
811030a8:	d8800015 	stw	r2,0(sp)
811030ac:	e1fff417 	ldw	r7,-48(fp)
811030b0:	e1bff417 	ldw	r6,-48(fp)
811030b4:	01604534 	movhi	r5,33044
811030b8:	296e9d04 	addi	r5,r5,-17804
811030bc:	01204534 	movhi	r4,33044
811030c0:	21006204 	addi	r4,r4,392
811030c4:	111282c0 	call	8111282c <sprintf>
							"[%d]Unexpected Channel. Expected:%d, Read:%d\r\n",
							i, i, Channel);
					debug(fp, cDebugBuffer);
811030c8:	d0a04d17 	ldw	r2,-32460(gp)
811030cc:	01604534 	movhi	r5,33044
811030d0:	29406204 	addi	r5,r5,392
811030d4:	1009883a 	mov	r4,r2
811030d8:	11110c40 	call	811110c4 <fprintf>
#endif
					bSuccess = FALSE;
811030dc:	e03ff315 	stw	zero,-52(fp)
811030e0:	00000f06 	br	81103120 <POWER_Read+0x1e8>
				} else if (SIGN ^ bSIGN) {
811030e4:	e0fffac3 	ldbu	r3,-21(fp)
811030e8:	e0bff817 	ldw	r2,-32(fp)
811030ec:	18800c26 	beq	r3,r2,81103120 <POWER_Read+0x1e8>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected SIGN\r\n", i);
811030f0:	e1bff417 	ldw	r6,-48(fp)
811030f4:	01604534 	movhi	r5,33044
811030f8:	296ea904 	addi	r5,r5,-17756
811030fc:	01204534 	movhi	r4,33044
81103100:	21006204 	addi	r4,r4,392
81103104:	111282c0 	call	8111282c <sprintf>
					debug(fp, cDebugBuffer);
81103108:	d0a04d17 	ldw	r2,-32460(gp)
8110310c:	01604534 	movhi	r5,33044
81103110:	29406204 	addi	r5,r5,392
81103114:	1009883a 	mov	r4,r2
81103118:	11110c40 	call	811110c4 <fprintf>
#endif
					bSuccess = FALSE;
8110311c:	e03ff315 	stw	zero,-52(fp)
					sprintf(cDebugBuffer, "[%d]Unexpected SGL\r\n", i);
					debug(fp, cDebugBuffer);
#endif
					bSuccess = FALSE;
				}
				if (bSuccess)
81103120:	e0bff317 	ldw	r2,-52(fp)
81103124:	10001a26 	beq	r2,zero,81103190 <POWER_Read+0x258>
					szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81103128:	e0bff617 	ldw	r2,-40(fp)
8110312c:	10c00044 	addi	r3,r2,1
81103130:	e0fff615 	stw	r3,-40(fp)
81103134:	1085883a 	add	r2,r2,r2
81103138:	1085883a 	add	r2,r2,r2
8110313c:	1007883a 	mov	r3,r2
81103140:	e0bfff17 	ldw	r2,-4(fp)
81103144:	10c5883a 	add	r2,r2,r3
81103148:	e0fffe17 	ldw	r3,-8(fp)
8110314c:	10c00015 	stw	r3,0(r2)
81103150:	00000f06 	br	81103190 <POWER_Read+0x258>
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "SPI Read Error\r\n");
81103154:	00e04534 	movhi	r3,33044
81103158:	18c06204 	addi	r3,r3,392
8110315c:	00a04534 	movhi	r2,33044
81103160:	10aeaf04 	addi	r2,r2,-17732
81103164:	1009883a 	mov	r4,r2
81103168:	00800444 	movi	r2,17
8110316c:	100d883a 	mov	r6,r2
81103170:	200b883a 	mov	r5,r4
81103174:	1809883a 	mov	r4,r3
81103178:	11120c40 	call	811120c4 <memcpy>
				debug(fp, cDebugBuffer);
8110317c:	d0a04d17 	ldw	r2,-32460(gp)
81103180:	01604534 	movhi	r5,33044
81103184:	29406204 	addi	r5,r5,392
81103188:	1009883a 	mov	r4,r2
8110318c:	11110c40 	call	811110c4 <fprintf>
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
		NextChannel = 0;
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103190:	e0bff417 	ldw	r2,-48(fp)
81103194:	10800044 	addi	r2,r2,1
81103198:	e0bff415 	stw	r2,-48(fp)
8110319c:	e0bff517 	ldw	r2,-44(fp)
811031a0:	1085883a 	add	r2,r2,r2
811031a4:	1085883a 	add	r2,r2,r2
811031a8:	e0fff304 	addi	r3,fp,-52
811031ac:	1885883a 	add	r2,r3,r2
811031b0:	10800904 	addi	r2,r2,36
811031b4:	10800017 	ldw	r2,0(r2)
811031b8:	e0fff417 	ldw	r3,-48(fp)
811031bc:	1880020e 	bge	r3,r2,811031c8 <POWER_Read+0x290>
811031c0:	e0bff317 	ldw	r2,-52(fp)
811031c4:	103f811e 	bne	r2,zero,81102fcc <__reset+0xfb0e2fcc>
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
811031c8:	e0bff517 	ldw	r2,-44(fp)
811031cc:	10800044 	addi	r2,r2,1
811031d0:	e0bff515 	stw	r2,-44(fp)
811031d4:	e0bff517 	ldw	r2,-44(fp)
811031d8:	10800088 	cmpgei	r2,r2,2
811031dc:	1000021e 	bne	r2,zero,811031e8 <POWER_Read+0x2b0>
811031e0:	e0bff317 	ldw	r2,-52(fp)
811031e4:	103f691e 	bne	r2,zero,81102f8c <__reset+0xfb0e2f8c>
				debug(fp, cDebugBuffer);
#endif
			}
		} // for i
	} // for c
	return bSuccess;
811031e8:	e0bff317 	ldw	r2,-52(fp)
}
811031ec:	e037883a 	mov	sp,fp
811031f0:	dfc00117 	ldw	ra,4(sp)
811031f4:	df000017 	ldw	fp,0(sp)
811031f8:	dec00204 	addi	sp,sp,8
811031fc:	f800283a 	ret

81103200 <TEMP_Read>:

bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp) {
81103200:	defff904 	addi	sp,sp,-28
81103204:	de00012e 	bgeu	sp,et,8110320c <TEMP_Read+0xc>
81103208:	003b68fa 	trap	3
8110320c:	dfc00615 	stw	ra,24(sp)
81103210:	df000515 	stw	fp,20(sp)
81103214:	df000504 	addi	fp,sp,20
81103218:	e13ffe15 	stw	r4,-8(fp)
8110321c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
	const alt_u8 DeviceAddr = 0x30;
81103220:	00800c04 	movi	r2,48
81103224:	e0bffd85 	stb	r2,-10(fp)
	alt_8 FpgaTemp, BoardTemp;
	char Data;

	// read local temp
	bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00,
81103228:	e0bffd83 	ldbu	r2,-10(fp)
8110322c:	10c03fcc 	andi	r3,r2,255
81103230:	18c0201c 	xori	r3,r3,128
81103234:	18ffe004 	addi	r3,r3,-128
81103238:	e0bffdc4 	addi	r2,fp,-9
8110323c:	d8800015 	stw	r2,0(sp)
81103240:	000f883a 	mov	r7,zero
81103244:	180d883a 	mov	r6,r3
81103248:	01600034 	movhi	r5,32768
8110324c:	29426004 	addi	r5,r5,2432
81103250:	01200034 	movhi	r4,32768
81103254:	21026404 	addi	r4,r4,2448
81103258:	1105ac00 	call	81105ac0 <I2C_Read>
8110325c:	e0bffc15 	stw	r2,-16(fp)
			(alt_u8 *) &Data);
	if (bSuccess)
81103260:	e0bffc17 	ldw	r2,-16(fp)
81103264:	10000226 	beq	r2,zero,81103270 <TEMP_Read+0x70>
		BoardTemp = Data;
81103268:	e0bffdc3 	ldbu	r2,-9(fp)
8110326c:	e0bffd45 	stb	r2,-11(fp)

	// read remote temp
	if (bSuccess) {
81103270:	e0bffc17 	ldw	r2,-16(fp)
81103274:	10001226 	beq	r2,zero,811032c0 <TEMP_Read+0xc0>
		bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01,
81103278:	e0bffd83 	ldbu	r2,-10(fp)
8110327c:	10c03fcc 	andi	r3,r2,255
81103280:	18c0201c 	xori	r3,r3,128
81103284:	18ffe004 	addi	r3,r3,-128
81103288:	e0bffdc4 	addi	r2,fp,-9
8110328c:	d8800015 	stw	r2,0(sp)
81103290:	01c00044 	movi	r7,1
81103294:	180d883a 	mov	r6,r3
81103298:	01600034 	movhi	r5,32768
8110329c:	29426004 	addi	r5,r5,2432
811032a0:	01200034 	movhi	r4,32768
811032a4:	21026404 	addi	r4,r4,2448
811032a8:	1105ac00 	call	81105ac0 <I2C_Read>
811032ac:	e0bffc15 	stw	r2,-16(fp)
				(alt_u8 *) &Data);
		if (bSuccess)
811032b0:	e0bffc17 	ldw	r2,-16(fp)
811032b4:	10000226 	beq	r2,zero,811032c0 <TEMP_Read+0xc0>
			FpgaTemp = Data;
811032b8:	e0bffdc3 	ldbu	r2,-9(fp)
811032bc:	e0bffd05 	stb	r2,-12(fp)
	}
	//
	if (bSuccess) {
811032c0:	e0bffc17 	ldw	r2,-16(fp)
811032c4:	10000626 	beq	r2,zero,811032e0 <TEMP_Read+0xe0>
		*pFpgaTemp = FpgaTemp;
811032c8:	e0bffe17 	ldw	r2,-8(fp)
811032cc:	e0fffd03 	ldbu	r3,-12(fp)
811032d0:	10c00005 	stb	r3,0(r2)
		*pBoardTemp = BoardTemp;
811032d4:	e0bfff17 	ldw	r2,-4(fp)
811032d8:	e0fffd43 	ldbu	r3,-11(fp)
811032dc:	10c00005 	stb	r3,0(r2)
	}

	return bSuccess;
811032e0:	e0bffc17 	ldw	r2,-16(fp)
}
811032e4:	e037883a 	mov	sp,fp
811032e8:	dfc00117 	ldw	ra,4(sp)
811032ec:	df000017 	ldw	fp,0(sp)
811032f0:	dec00204 	addi	sp,sp,8
811032f4:	f800283a 	ret

811032f8 <sense_log_temp>:

bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp) {
811032f8:	defffb04 	addi	sp,sp,-20
811032fc:	de00012e 	bgeu	sp,et,81103304 <sense_log_temp+0xc>
81103300:	003b68fa 	trap	3
81103304:	dfc00415 	stw	ra,16(sp)
81103308:	df000315 	stw	fp,12(sp)
8110330c:	df000304 	addi	fp,sp,12
81103310:	e13ffe15 	stw	r4,-8(fp)
81103314:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	// show temp
	bSuccess = TEMP_Read((alt_8*) FpgaTemp, (alt_8*) BoardTemp);
81103318:	e17fff17 	ldw	r5,-4(fp)
8110331c:	e13ffe17 	ldw	r4,-8(fp)
81103320:	11032000 	call	81103200 <TEMP_Read>
81103324:	e0bffd15 	stw	r2,-12(fp)

	return (bSuccess);
81103328:	e0bffd17 	ldw	r2,-12(fp)
}
8110332c:	e037883a 	mov	sp,fp
81103330:	dfc00117 	ldw	ra,4(sp)
81103334:	df000017 	ldw	fp,0(sp)
81103338:	dec00204 	addi	sp,sp,8
8110333c:	f800283a 	ret

81103340 <sense_log>:

void sense_log(void) {
81103340:	deff0404 	addi	sp,sp,-1008
81103344:	de00012e 	bgeu	sp,et,8110334c <sense_log+0xc>
81103348:	003b68fa 	trap	3
8110334c:	dfc0fb15 	stw	ra,1004(sp)
81103350:	df00fa15 	stw	fp,1000(sp)
81103354:	dd40f915 	stw	r21,996(sp)
81103358:	dd00f815 	stw	r20,992(sp)
8110335c:	dcc0f715 	stw	r19,988(sp)
81103360:	dc80f615 	stw	r18,984(sp)
81103364:	dc40f515 	stw	r17,980(sp)
81103368:	dc00f415 	stw	r16,976(sp)
8110336c:	df00fa04 	addi	fp,sp,1000
	bool bSuccess;
	int i;
	const float fRef = 5.0; // 5.0V
81103370:	00902834 	movhi	r2,16544
81103374:	e0bf0e15 	stw	r2,-968(fp)
	float fVolDrop, fCurrent, fPower, fVol;
	alt_u32 szVol[POWER_PORT_NUM];
	alt_u32 SIG, MSB, RESULT;
	float szRes[] = { 0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
81103378:	008ed174 	movhi	r2,15173
8110337c:	10a6e984 	addi	r2,r2,-25690
81103380:	e0bf2215 	stw	r2,-888(fp)
81103384:	008ea0f4 	movhi	r2,14979
81103388:	10849bc4 	addi	r2,r2,4719
8110338c:	e0bf2315 	stw	r2,-884(fp)
81103390:	008ed174 	movhi	r2,15173
81103394:	10a6e984 	addi	r2,r2,-25690
81103398:	e0bf2415 	stw	r2,-880(fp)
8110339c:	008ed174 	movhi	r2,15173
811033a0:	10a6e984 	addi	r2,r2,-25690
811033a4:	e0bf2515 	stw	r2,-876(fp)
811033a8:	008ed174 	movhi	r2,15173
811033ac:	10a6e984 	addi	r2,r2,-25690
811033b0:	e0bf2615 	stw	r2,-872(fp)
811033b4:	008ed174 	movhi	r2,15173
811033b8:	10a6e984 	addi	r2,r2,-25690
811033bc:	e0bf2715 	stw	r2,-868(fp)
811033c0:	008ed174 	movhi	r2,15173
811033c4:	10a6e984 	addi	r2,r2,-25690
811033c8:	e0bf2815 	stw	r2,-864(fp)
811033cc:	008ed174 	movhi	r2,15173
811033d0:	10a6e984 	addi	r2,r2,-25690
811033d4:	e0bf2915 	stw	r2,-860(fp)
811033d8:	008ed174 	movhi	r2,15173
811033dc:	10a6e984 	addi	r2,r2,-25690
811033e0:	e0bf2a15 	stw	r2,-856(fp)
811033e4:	008ed174 	movhi	r2,15173
811033e8:	10a6e984 	addi	r2,r2,-25690
811033ec:	e0bf2b15 	stw	r2,-852(fp)
811033f0:	008ed174 	movhi	r2,15173
811033f4:	10a6e984 	addi	r2,r2,-25690
811033f8:	e0bf2c15 	stw	r2,-848(fp)
811033fc:	008ed174 	movhi	r2,15173
81103400:	10a6e984 	addi	r2,r2,-25690
81103404:	e0bf2d15 	stw	r2,-844(fp)
			0.003, 0.003, 0.003, 0.003 };
	float szRefVol[] = { 0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3,
81103408:	008fd9b4 	movhi	r2,16230
8110340c:	10999984 	addi	r2,r2,26214
81103410:	e0bf2e15 	stw	r2,-840(fp)
81103414:	008fd9b4 	movhi	r2,16230
81103418:	10999984 	addi	r2,r2,26214
8110341c:	e0bf2f15 	stw	r2,-836(fp)
81103420:	00901034 	movhi	r2,16448
81103424:	e0bf3015 	stw	r2,-832(fp)
81103428:	008fd9b4 	movhi	r2,16230
8110342c:	10999984 	addi	r2,r2,26214
81103430:	e0bf3115 	stw	r2,-828(fp)
81103434:	008ff9b4 	movhi	r2,16358
81103438:	10999984 	addi	r2,r2,26214
8110343c:	e0bf3215 	stw	r2,-824(fp)
81103440:	00900834 	movhi	r2,16416
81103444:	e0bf3315 	stw	r2,-820(fp)
81103448:	008ff9b4 	movhi	r2,16358
8110344c:	10999984 	addi	r2,r2,26214
81103450:	e0bf3415 	stw	r2,-816(fp)
81103454:	00900834 	movhi	r2,16416
81103458:	e0bf3515 	stw	r2,-812(fp)
8110345c:	008fe374 	movhi	r2,16269
81103460:	10b33344 	addi	r2,r2,-13107
81103464:	e0bf3615 	stw	r2,-808(fp)
81103468:	008fecf4 	movhi	r2,16307
8110346c:	108cccc4 	addi	r2,r2,13107
81103470:	e0bf3715 	stw	r2,-804(fp)
81103474:	009014f4 	movhi	r2,16467
81103478:	108cccc4 	addi	r2,r2,13107
8110347c:	e0bf3815 	stw	r2,-800(fp)
81103480:	00900834 	movhi	r2,16416
81103484:	e0bf3915 	stw	r2,-796(fp)
			2.5 };
	char szName[][64] = { "VCCD_PLL", "VCC0P9", "GPIO_VCCIOPD", "VCCHIP",
81103488:	00a04534 	movhi	r2,33044
8110348c:	10aee604 	addi	r2,r2,-17512
81103490:	e0ff3a04 	addi	r3,fp,-792
81103494:	1009883a 	mov	r4,r2
81103498:	0080c004 	movi	r2,768
8110349c:	100d883a 	mov	r6,r2
811034a0:	200b883a 	mov	r5,r4
811034a4:	1809883a 	mov	r4,r3
811034a8:	11120c40 	call	811120c4 <memcpy>
			"VCC1P8_34R", "HSMA_VCCIO", "VCC1P8_78R", "VCCA_PLL", "VCCL_GXB",
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
811034ac:	e0bf1604 	addi	r2,fp,-936
811034b0:	1009883a 	mov	r4,r2
811034b4:	1102f380 	call	81102f38 <POWER_Read>
811034b8:	e0bf0f15 	stw	r2,-964(fp)
	if (bSuccess) {
811034bc:	e0bf0f17 	ldw	r2,-964(fp)
811034c0:	10016026 	beq	r2,zero,81103a44 <sense_log+0x704>
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
811034c4:	e03f0c15 	stw	zero,-976(fp)
811034c8:	00014c06 	br	811039fc <sense_log+0x6bc>
			SIG = (szVol[i] >> 29) & 0x01;
811034cc:	e0bf0c17 	ldw	r2,-976(fp)
811034d0:	1085883a 	add	r2,r2,r2
811034d4:	1085883a 	add	r2,r2,r2
811034d8:	e0ff0c04 	addi	r3,fp,-976
811034dc:	1885883a 	add	r2,r3,r2
811034e0:	10800a04 	addi	r2,r2,40
811034e4:	10800017 	ldw	r2,0(r2)
811034e8:	1004d77a 	srli	r2,r2,29
811034ec:	1080004c 	andi	r2,r2,1
811034f0:	e0bf1015 	stw	r2,-960(fp)
			MSB = (szVol[i] >> 28) & 0x01;
811034f4:	e0bf0c17 	ldw	r2,-976(fp)
811034f8:	1085883a 	add	r2,r2,r2
811034fc:	1085883a 	add	r2,r2,r2
81103500:	e0ff0c04 	addi	r3,fp,-976
81103504:	1885883a 	add	r2,r3,r2
81103508:	10800a04 	addi	r2,r2,40
8110350c:	10800017 	ldw	r2,0(r2)
81103510:	1004d73a 	srli	r2,r2,28
81103514:	1080004c 	andi	r2,r2,1
81103518:	e0bf1115 	stw	r2,-956(fp)
			RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
8110351c:	e0bf0c17 	ldw	r2,-976(fp)
81103520:	1085883a 	add	r2,r2,r2
81103524:	1085883a 	add	r2,r2,r2
81103528:	e0ff0c04 	addi	r3,fp,-976
8110352c:	1885883a 	add	r2,r3,r2
81103530:	10800a04 	addi	r2,r2,40
81103534:	10800017 	ldw	r2,0(r2)
81103538:	1006d1ba 	srli	r3,r2,6
8110353c:	00801034 	movhi	r2,64
81103540:	10bfffc4 	addi	r2,r2,-1
81103544:	1884703a 	and	r2,r3,r2
81103548:	e0bf1215 	stw	r2,-952(fp)
			if (MSB == 0)
8110354c:	e0bf1117 	ldw	r2,-956(fp)
81103550:	1000091e 	bne	r2,zero,81103578 <sense_log+0x238>
				fVolDrop = (float) (RESULT) / (float) 0x400000;
81103554:	e13f1217 	ldw	r4,-952(fp)
81103558:	111042c0 	call	8111042c <__floatunsisf>
8110355c:	1007883a 	mov	r3,r2
81103560:	0152a034 	movhi	r5,19072
81103564:	1809883a 	mov	r4,r3
81103568:	110fab40 	call	8110fab4 <__divsf3>
8110356c:	1007883a 	mov	r3,r2
81103570:	e0ff0d15 	stw	r3,-972(fp)
81103574:	00000106 	br	8110357c <sense_log+0x23c>
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
81103578:	e03f0d15 	stw	zero,-972(fp)
			if (SIG && MSB) {
8110357c:	e0bf1017 	ldw	r2,-960(fp)
81103580:	10002626 	beq	r2,zero,8110361c <sense_log+0x2dc>
81103584:	e0bf1117 	ldw	r2,-956(fp)
81103588:	10002426 	beq	r2,zero,8110361c <sense_log+0x2dc>
				fVol = fRef * 0.5;
8110358c:	014fc034 	movhi	r5,16128
81103590:	e13f0e17 	ldw	r4,-968(fp)
81103594:	110fefc0 	call	8110fefc <__mulsf3>
81103598:	1007883a 	mov	r3,r2
8110359c:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
811035a0:	e0ff3a04 	addi	r3,fp,-792
811035a4:	e0bf0c17 	ldw	r2,-976(fp)
811035a8:	100491ba 	slli	r2,r2,6
811035ac:	18a1883a 	add	r16,r3,r2
811035b0:	e0bf0c17 	ldw	r2,-976(fp)
811035b4:	1085883a 	add	r2,r2,r2
811035b8:	1085883a 	add	r2,r2,r2
811035bc:	e0ff0c04 	addi	r3,fp,-976
811035c0:	1885883a 	add	r2,r3,r2
811035c4:	10800a04 	addi	r2,r2,40
811035c8:	10800017 	ldw	r2,0(r2)
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
			if (SIG && MSB) {
				fVol = fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
811035cc:	1023883a 	mov	r17,r2
811035d0:	e13f1317 	ldw	r4,-948(fp)
811035d4:	1110c440 	call	81110c44 <__extendsfdf2>
811035d8:	1009883a 	mov	r4,r2
811035dc:	180b883a 	mov	r5,r3
811035e0:	d9000015 	stw	r4,0(sp)
811035e4:	d9400115 	stw	r5,4(sp)
811035e8:	880f883a 	mov	r7,r17
811035ec:	800d883a 	mov	r6,r16
811035f0:	01604534 	movhi	r5,33044
811035f4:	296eb404 	addi	r5,r5,-17712
811035f8:	01204534 	movhi	r4,33044
811035fc:	21006204 	addi	r4,r4,392
81103600:	111282c0 	call	8111282c <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103604:	d0a04d17 	ldw	r2,-32460(gp)
81103608:	01604534 	movhi	r5,33044
8110360c:	29406204 	addi	r5,r5,392
81103610:	1009883a 	mov	r4,r2
81103614:	11110c40 	call	811110c4 <fprintf>
81103618:	0000f506 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (SIG && !MSB) {
8110361c:	e0bf1017 	ldw	r2,-960(fp)
81103620:	10006426 	beq	r2,zero,811037b4 <sense_log+0x474>
81103624:	e0bf1117 	ldw	r2,-956(fp)
81103628:	1000621e 	bne	r2,zero,811037b4 <sense_log+0x474>
				fVol = fRef * 0.5 * fVolDrop;
8110362c:	e13f0e17 	ldw	r4,-968(fp)
81103630:	1110c440 	call	81110c44 <__extendsfdf2>
81103634:	1011883a 	mov	r8,r2
81103638:	1813883a 	mov	r9,r3
8110363c:	000d883a 	mov	r6,zero
81103640:	01cff834 	movhi	r7,16352
81103644:	4009883a 	mov	r4,r8
81103648:	480b883a 	mov	r5,r9
8110364c:	11105240 	call	81110524 <__muldf3>
81103650:	1009883a 	mov	r4,r2
81103654:	180b883a 	mov	r5,r3
81103658:	2021883a 	mov	r16,r4
8110365c:	2823883a 	mov	r17,r5
81103660:	e13f0d17 	ldw	r4,-972(fp)
81103664:	1110c440 	call	81110c44 <__extendsfdf2>
81103668:	1009883a 	mov	r4,r2
8110366c:	180b883a 	mov	r5,r3
81103670:	200d883a 	mov	r6,r4
81103674:	280f883a 	mov	r7,r5
81103678:	8009883a 	mov	r4,r16
8110367c:	880b883a 	mov	r5,r17
81103680:	11105240 	call	81110524 <__muldf3>
81103684:	1009883a 	mov	r4,r2
81103688:	180b883a 	mov	r5,r3
8110368c:	2005883a 	mov	r2,r4
81103690:	2807883a 	mov	r3,r5
81103694:	1009883a 	mov	r4,r2
81103698:	180b883a 	mov	r5,r3
8110369c:	1110d5c0 	call	81110d5c <__truncdfsf2>
811036a0:	1007883a 	mov	r3,r2
811036a4:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
811036a8:	e0bf0c17 	ldw	r2,-976(fp)
811036ac:	1085883a 	add	r2,r2,r2
811036b0:	1085883a 	add	r2,r2,r2
811036b4:	e0ff0c04 	addi	r3,fp,-976
811036b8:	1885883a 	add	r2,r3,r2
811036bc:	10801604 	addi	r2,r2,88
811036c0:	10c00017 	ldw	r3,0(r2)
811036c4:	180b883a 	mov	r5,r3
811036c8:	e13f0d17 	ldw	r4,-972(fp)
811036cc:	110fab40 	call	8110fab4 <__divsf3>
811036d0:	1007883a 	mov	r3,r2
811036d4:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
811036d8:	e0bf0c17 	ldw	r2,-976(fp)
811036dc:	1085883a 	add	r2,r2,r2
811036e0:	1085883a 	add	r2,r2,r2
811036e4:	e0ff0c04 	addi	r3,fp,-976
811036e8:	1885883a 	add	r2,r3,r2
811036ec:	10802204 	addi	r2,r2,136
811036f0:	10c00017 	ldw	r3,0(r2)
811036f4:	e17f1417 	ldw	r5,-944(fp)
811036f8:	1809883a 	mov	r4,r3
811036fc:	110fefc0 	call	8110fefc <__mulsf3>
81103700:	1007883a 	mov	r3,r2
81103704:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103708:	e0ff3a04 	addi	r3,fp,-792
8110370c:	e0bf0c17 	ldw	r2,-976(fp)
81103710:	100491ba 	slli	r2,r2,6
81103714:	18a9883a 	add	r20,r3,r2
81103718:	e0bf0c17 	ldw	r2,-976(fp)
8110371c:	1085883a 	add	r2,r2,r2
81103720:	1085883a 	add	r2,r2,r2
81103724:	e0ff0c04 	addi	r3,fp,-976
81103728:	1885883a 	add	r2,r3,r2
8110372c:	10800a04 	addi	r2,r2,40
81103730:	10800017 	ldw	r2,0(r2)
			} else if (SIG && !MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81103734:	102b883a 	mov	r21,r2
81103738:	e13f0d17 	ldw	r4,-972(fp)
8110373c:	1110c440 	call	81110c44 <__extendsfdf2>
81103740:	1021883a 	mov	r16,r2
81103744:	1823883a 	mov	r17,r3
81103748:	e13f1417 	ldw	r4,-944(fp)
8110374c:	1110c440 	call	81110c44 <__extendsfdf2>
81103750:	1025883a 	mov	r18,r2
81103754:	1827883a 	mov	r19,r3
81103758:	e13f1517 	ldw	r4,-940(fp)
8110375c:	1110c440 	call	81110c44 <__extendsfdf2>
81103760:	1009883a 	mov	r4,r2
81103764:	180b883a 	mov	r5,r3
81103768:	d9000415 	stw	r4,16(sp)
8110376c:	d9400515 	stw	r5,20(sp)
81103770:	dc800215 	stw	r18,8(sp)
81103774:	dcc00315 	stw	r19,12(sp)
81103778:	dc000015 	stw	r16,0(sp)
8110377c:	dc400115 	stw	r17,4(sp)
81103780:	a80f883a 	mov	r7,r21
81103784:	a00d883a 	mov	r6,r20
81103788:	01604534 	movhi	r5,33044
8110378c:	296ebd04 	addi	r5,r5,-17676
81103790:	01204534 	movhi	r4,33044
81103794:	21006204 	addi	r4,r4,392
81103798:	111282c0 	call	8111282c <sprintf>
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
8110379c:	d0a04d17 	ldw	r2,-32460(gp)
811037a0:	01604534 	movhi	r5,33044
811037a4:	29406204 	addi	r5,r5,392
811037a8:	1009883a 	mov	r4,r2
811037ac:	11110c40 	call	811110c4 <fprintf>
811037b0:	00008f06 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (!SIG && MSB) {
811037b4:	e0bf1017 	ldw	r2,-960(fp)
811037b8:	1000641e 	bne	r2,zero,8110394c <sense_log+0x60c>
811037bc:	e0bf1117 	ldw	r2,-956(fp)
811037c0:	10006226 	beq	r2,zero,8110394c <sense_log+0x60c>
				fVol = fRef * 0.5 * fVolDrop;
811037c4:	e13f0e17 	ldw	r4,-968(fp)
811037c8:	1110c440 	call	81110c44 <__extendsfdf2>
811037cc:	1011883a 	mov	r8,r2
811037d0:	1813883a 	mov	r9,r3
811037d4:	000d883a 	mov	r6,zero
811037d8:	01cff834 	movhi	r7,16352
811037dc:	4009883a 	mov	r4,r8
811037e0:	480b883a 	mov	r5,r9
811037e4:	11105240 	call	81110524 <__muldf3>
811037e8:	1009883a 	mov	r4,r2
811037ec:	180b883a 	mov	r5,r3
811037f0:	2021883a 	mov	r16,r4
811037f4:	2823883a 	mov	r17,r5
811037f8:	e13f0d17 	ldw	r4,-972(fp)
811037fc:	1110c440 	call	81110c44 <__extendsfdf2>
81103800:	1009883a 	mov	r4,r2
81103804:	180b883a 	mov	r5,r3
81103808:	200d883a 	mov	r6,r4
8110380c:	280f883a 	mov	r7,r5
81103810:	8009883a 	mov	r4,r16
81103814:	880b883a 	mov	r5,r17
81103818:	11105240 	call	81110524 <__muldf3>
8110381c:	1009883a 	mov	r4,r2
81103820:	180b883a 	mov	r5,r3
81103824:	2005883a 	mov	r2,r4
81103828:	2807883a 	mov	r3,r5
8110382c:	1009883a 	mov	r4,r2
81103830:	180b883a 	mov	r5,r3
81103834:	1110d5c0 	call	81110d5c <__truncdfsf2>
81103838:	1007883a 	mov	r3,r2
8110383c:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
81103840:	e0bf0c17 	ldw	r2,-976(fp)
81103844:	1085883a 	add	r2,r2,r2
81103848:	1085883a 	add	r2,r2,r2
8110384c:	e0ff0c04 	addi	r3,fp,-976
81103850:	1885883a 	add	r2,r3,r2
81103854:	10801604 	addi	r2,r2,88
81103858:	10c00017 	ldw	r3,0(r2)
8110385c:	180b883a 	mov	r5,r3
81103860:	e13f0d17 	ldw	r4,-972(fp)
81103864:	110fab40 	call	8110fab4 <__divsf3>
81103868:	1007883a 	mov	r3,r2
8110386c:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
81103870:	e0bf0c17 	ldw	r2,-976(fp)
81103874:	1085883a 	add	r2,r2,r2
81103878:	1085883a 	add	r2,r2,r2
8110387c:	e0ff0c04 	addi	r3,fp,-976
81103880:	1885883a 	add	r2,r3,r2
81103884:	10802204 	addi	r2,r2,136
81103888:	10c00017 	ldw	r3,0(r2)
8110388c:	e17f1417 	ldw	r5,-944(fp)
81103890:	1809883a 	mov	r4,r3
81103894:	110fefc0 	call	8110fefc <__mulsf3>
81103898:	1007883a 	mov	r3,r2
8110389c:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
811038a0:	e0ff3a04 	addi	r3,fp,-792
811038a4:	e0bf0c17 	ldw	r2,-976(fp)
811038a8:	100491ba 	slli	r2,r2,6
811038ac:	18a9883a 	add	r20,r3,r2
811038b0:	e0bf0c17 	ldw	r2,-976(fp)
811038b4:	1085883a 	add	r2,r2,r2
811038b8:	1085883a 	add	r2,r2,r2
811038bc:	e0ff0c04 	addi	r3,fp,-976
811038c0:	1885883a 	add	r2,r3,r2
811038c4:	10800a04 	addi	r2,r2,40
811038c8:	10800017 	ldw	r2,0(r2)
			} else if (!SIG && MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811038cc:	102b883a 	mov	r21,r2
811038d0:	e13f0d17 	ldw	r4,-972(fp)
811038d4:	1110c440 	call	81110c44 <__extendsfdf2>
811038d8:	1021883a 	mov	r16,r2
811038dc:	1823883a 	mov	r17,r3
811038e0:	e13f1417 	ldw	r4,-944(fp)
811038e4:	1110c440 	call	81110c44 <__extendsfdf2>
811038e8:	1025883a 	mov	r18,r2
811038ec:	1827883a 	mov	r19,r3
811038f0:	e13f1517 	ldw	r4,-940(fp)
811038f4:	1110c440 	call	81110c44 <__extendsfdf2>
811038f8:	1009883a 	mov	r4,r2
811038fc:	180b883a 	mov	r5,r3
81103900:	d9000415 	stw	r4,16(sp)
81103904:	d9400515 	stw	r5,20(sp)
81103908:	dc800215 	stw	r18,8(sp)
8110390c:	dcc00315 	stw	r19,12(sp)
81103910:	dc000015 	stw	r16,0(sp)
81103914:	dc400115 	stw	r17,4(sp)
81103918:	a80f883a 	mov	r7,r21
8110391c:	a00d883a 	mov	r6,r20
81103920:	01604534 	movhi	r5,33044
81103924:	296ecd04 	addi	r5,r5,-17612
81103928:	01204534 	movhi	r4,33044
8110392c:	21006204 	addi	r4,r4,392
81103930:	111282c0 	call	8111282c <sprintf>
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
81103934:	d0a04d17 	ldw	r2,-32460(gp)
81103938:	01604534 	movhi	r5,33044
8110393c:	29406204 	addi	r5,r5,392
81103940:	1009883a 	mov	r4,r2
81103944:	11110c40 	call	811110c4 <fprintf>
81103948:	00002906 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (!SIG && !MSB) {
8110394c:	e0bf1017 	ldw	r2,-960(fp)
81103950:	1000271e 	bne	r2,zero,811039f0 <sense_log+0x6b0>
81103954:	e0bf1117 	ldw	r2,-956(fp)
81103958:	1000251e 	bne	r2,zero,811039f0 <sense_log+0x6b0>
				fVol = -fRef * 0.5;
8110395c:	e0bf0e17 	ldw	r2,-968(fp)
81103960:	10a0003c 	xorhi	r2,r2,32768
81103964:	014fc034 	movhi	r5,16128
81103968:	1009883a 	mov	r4,r2
8110396c:	110fefc0 	call	8110fefc <__mulsf3>
81103970:	1007883a 	mov	r3,r2
81103974:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81103978:	e0ff3a04 	addi	r3,fp,-792
8110397c:	e0bf0c17 	ldw	r2,-976(fp)
81103980:	100491ba 	slli	r2,r2,6
81103984:	18a1883a 	add	r16,r3,r2
81103988:	e0bf0c17 	ldw	r2,-976(fp)
8110398c:	1085883a 	add	r2,r2,r2
81103990:	1085883a 	add	r2,r2,r2
81103994:	e0ff0c04 	addi	r3,fp,-976
81103998:	1885883a 	add	r2,r3,r2
8110399c:	10800a04 	addi	r2,r2,40
811039a0:	10800017 	ldw	r2,0(r2)
				debug(fp, cDebugBuffer);
#endif
			} else if (!SIG && !MSB) {
				fVol = -fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
811039a4:	1023883a 	mov	r17,r2
811039a8:	e13f1317 	ldw	r4,-948(fp)
811039ac:	1110c440 	call	81110c44 <__extendsfdf2>
811039b0:	1009883a 	mov	r4,r2
811039b4:	180b883a 	mov	r5,r3
811039b8:	d9000015 	stw	r4,0(sp)
811039bc:	d9400115 	stw	r5,4(sp)
811039c0:	880f883a 	mov	r7,r17
811039c4:	800d883a 	mov	r6,r16
811039c8:	01604534 	movhi	r5,33044
811039cc:	296edd04 	addi	r5,r5,-17548
811039d0:	01204534 	movhi	r4,33044
811039d4:	21006204 	addi	r4,r4,392
811039d8:	111282c0 	call	8111282c <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
811039dc:	d0a04d17 	ldw	r2,-32460(gp)
811039e0:	01604534 	movhi	r5,33044
811039e4:	29406204 	addi	r5,r5,392
811039e8:	1009883a 	mov	r4,r2
811039ec:	11110c40 	call	811110c4 <fprintf>
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
	if (bSuccess) {
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
811039f0:	e0bf0c17 	ldw	r2,-976(fp)
811039f4:	10800044 	addi	r2,r2,1
811039f8:	e0bf0c15 	stw	r2,-976(fp)
811039fc:	e0bf0c17 	ldw	r2,-976(fp)
81103a00:	10800308 	cmpgei	r2,r2,12
81103a04:	1000021e 	bne	r2,zero,81103a10 <sense_log+0x6d0>
81103a08:	e0bf0f17 	ldw	r2,-964(fp)
81103a0c:	103eaf1e 	bne	r2,zero,811034cc <__reset+0xfb0e34cc>
				debug(fp, cDebugBuffer);
#endif
			}
		}
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "\r\n");
81103a10:	00a04534 	movhi	r2,33044
81103a14:	10806204 	addi	r2,r2,392
81103a18:	00c00344 	movi	r3,13
81103a1c:	10c00005 	stb	r3,0(r2)
81103a20:	00c00284 	movi	r3,10
81103a24:	10c00045 	stb	r3,1(r2)
81103a28:	10000085 	stb	zero,2(r2)
		debug(fp, cDebugBuffer);
81103a2c:	d0a04d17 	ldw	r2,-32460(gp)
81103a30:	01604534 	movhi	r5,33044
81103a34:	29406204 	addi	r5,r5,392
81103a38:	1009883a 	mov	r4,r2
81103a3c:	11110c40 	call	811110c4 <fprintf>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
		debug(fp, cDebugBuffer);
#endif
	}
}
81103a40:	00001606 	br	81103a9c <sense_log+0x75c>
		sprintf(cDebugBuffer, "\r\n");
		debug(fp, cDebugBuffer);
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
81103a44:	00a04534 	movhi	r2,33044
81103a48:	10806204 	addi	r2,r2,392
81103a4c:	00c01144 	movi	r3,69
81103a50:	10c00005 	stb	r3,0(r2)
81103a54:	00c01c84 	movi	r3,114
81103a58:	10c00045 	stb	r3,1(r2)
81103a5c:	00c01c84 	movi	r3,114
81103a60:	10c00085 	stb	r3,2(r2)
81103a64:	00c01bc4 	movi	r3,111
81103a68:	10c000c5 	stb	r3,3(r2)
81103a6c:	00c01c84 	movi	r3,114
81103a70:	10c00105 	stb	r3,4(r2)
81103a74:	00c00344 	movi	r3,13
81103a78:	10c00145 	stb	r3,5(r2)
81103a7c:	00c00284 	movi	r3,10
81103a80:	10c00185 	stb	r3,6(r2)
81103a84:	100001c5 	stb	zero,7(r2)
		debug(fp, cDebugBuffer);
81103a88:	d0a04d17 	ldw	r2,-32460(gp)
81103a8c:	01604534 	movhi	r5,33044
81103a90:	29406204 	addi	r5,r5,392
81103a94:	1009883a 	mov	r4,r2
81103a98:	11110c40 	call	811110c4 <fprintf>
#endif
	}
}
81103a9c:	0001883a 	nop
81103aa0:	e6fffa04 	addi	sp,fp,-24
81103aa4:	dfc00717 	ldw	ra,28(sp)
81103aa8:	df000617 	ldw	fp,24(sp)
81103aac:	dd400517 	ldw	r21,20(sp)
81103ab0:	dd000417 	ldw	r20,16(sp)
81103ab4:	dcc00317 	ldw	r19,12(sp)
81103ab8:	dc800217 	ldw	r18,8(sp)
81103abc:	dc400117 	ldw	r17,4(sp)
81103ac0:	dc000017 	ldw	r16,0(sp)
81103ac4:	dec00804 	addi	sp,sp,32
81103ac8:	f800283a 	ret

81103acc <bSdmaInitM1Dma>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
81103acc:	defffc04 	addi	sp,sp,-16
81103ad0:	de00012e 	bgeu	sp,et,81103ad8 <bSdmaInitM1Dma+0xc>
81103ad4:	003b68fa 	trap	3
81103ad8:	dfc00315 	stw	ra,12(sp)
81103adc:	df000215 	stw	fp,8(sp)
81103ae0:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103ae4:	00800044 	movi	r2,1
81103ae8:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103aec:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
81103af0:	01204534 	movhi	r4,33044
81103af4:	212fa604 	addi	r4,r4,-16744
81103af8:	11396080 	call	81139608 <alt_msgdma_open>
81103afc:	d0a03815 	stw	r2,-32544(gp)

	// check if the device was opened
	if (pxDmaM1Dev == NULL) {
81103b00:	d0a03817 	ldw	r2,-32544(gp)
81103b04:	1000021e 	bne	r2,zero,81103b10 <bSdmaInitM1Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103b08:	e03ffe15 	stw	zero,-8(fp)
81103b0c:	00001506 	br	81103b64 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
81103b10:	d0a03817 	ldw	r2,-32544(gp)
81103b14:	10800317 	ldw	r2,12(r2)
81103b18:	10800104 	addi	r2,r2,4
81103b1c:	00c00084 	movi	r3,2
81103b20:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b24:	00000a06 	br	81103b50 <bSdmaInitM1Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103b28:	01000044 	movi	r4,1
81103b2c:	112758c0 	call	8112758c <usleep>
			usiCounter++;
81103b30:	e0bfff0b 	ldhu	r2,-4(fp)
81103b34:	10800044 	addi	r2,r2,1
81103b38:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103b3c:	e0bfff0b 	ldhu	r2,-4(fp)
81103b40:	1084e230 	cmpltui	r2,r2,5000
81103b44:	1000021e 	bne	r2,zero,81103b50 <bSdmaInitM1Dma+0x84>
				bStatus = FALSE;
81103b48:	e03ffe15 	stw	zero,-8(fp)
				break;
81103b4c:	00000506 	br	81103b64 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b50:	d0a03817 	ldw	r2,-32544(gp)
81103b54:	10800317 	ldw	r2,12(r2)
81103b58:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103b5c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b60:	103ff11e 	bne	r2,zero,81103b28 <__reset+0xfb0e3b28>
				break;
			}
		}
	}

	return bStatus;
81103b64:	e0bffe17 	ldw	r2,-8(fp)
}
81103b68:	e037883a 	mov	sp,fp
81103b6c:	dfc00117 	ldw	ra,4(sp)
81103b70:	df000017 	ldw	fp,0(sp)
81103b74:	dec00204 	addi	sp,sp,8
81103b78:	f800283a 	ret

81103b7c <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
81103b7c:	defffc04 	addi	sp,sp,-16
81103b80:	de00012e 	bgeu	sp,et,81103b88 <bSdmaInitM2Dma+0xc>
81103b84:	003b68fa 	trap	3
81103b88:	dfc00315 	stw	ra,12(sp)
81103b8c:	df000215 	stw	fp,8(sp)
81103b90:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103b94:	00800044 	movi	r2,1
81103b98:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103b9c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
81103ba0:	01204534 	movhi	r4,33044
81103ba4:	212fab04 	addi	r4,r4,-16724
81103ba8:	11396080 	call	81139608 <alt_msgdma_open>
81103bac:	d0a03915 	stw	r2,-32540(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
81103bb0:	d0a03917 	ldw	r2,-32540(gp)
81103bb4:	1000021e 	bne	r2,zero,81103bc0 <bSdmaInitM2Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103bb8:	e03ffe15 	stw	zero,-8(fp)
81103bbc:	00001506 	br	81103c14 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
81103bc0:	d0a03917 	ldw	r2,-32540(gp)
81103bc4:	10800317 	ldw	r2,12(r2)
81103bc8:	10800104 	addi	r2,r2,4
81103bcc:	00c00084 	movi	r3,2
81103bd0:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103bd4:	00000a06 	br	81103c00 <bSdmaInitM2Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103bd8:	01000044 	movi	r4,1
81103bdc:	112758c0 	call	8112758c <usleep>
			usiCounter++;
81103be0:	e0bfff0b 	ldhu	r2,-4(fp)
81103be4:	10800044 	addi	r2,r2,1
81103be8:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103bec:	e0bfff0b 	ldhu	r2,-4(fp)
81103bf0:	1084e230 	cmpltui	r2,r2,5000
81103bf4:	1000021e 	bne	r2,zero,81103c00 <bSdmaInitM2Dma+0x84>
				bStatus = FALSE;
81103bf8:	e03ffe15 	stw	zero,-8(fp)
				break;
81103bfc:	00000506 	br	81103c14 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c00:	d0a03917 	ldw	r2,-32540(gp)
81103c04:	10800317 	ldw	r2,12(r2)
81103c08:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103c0c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c10:	103ff11e 	bne	r2,zero,81103bd8 <__reset+0xfb0e3bd8>
				break;
			}
		}
	}

	return bStatus;
81103c14:	e0bffe17 	ldw	r2,-8(fp)
}
81103c18:	e037883a 	mov	sp,fp
81103c1c:	dfc00117 	ldw	ra,4(sp)
81103c20:	df000017 	ldw	fp,0(sp)
81103c24:	dec00204 	addi	sp,sp,8
81103c28:	f800283a 	ret

81103c2c <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
81103c2c:	deffe904 	addi	sp,sp,-92
81103c30:	de00012e 	bgeu	sp,et,81103c38 <bSdmaDmaM1Transfer+0xc>
81103c34:	003b68fa 	trap	3
81103c38:	dfc01615 	stw	ra,88(sp)
81103c3c:	df001515 	stw	fp,84(sp)
81103c40:	dc001415 	stw	r16,80(sp)
81103c44:	df001504 	addi	fp,sp,84
81103c48:	e13ffb15 	stw	r4,-20(fp)
81103c4c:	2809883a 	mov	r4,r5
81103c50:	3007883a 	mov	r3,r6
81103c54:	3805883a 	mov	r2,r7
81103c58:	e13ffc0d 	sth	r4,-16(fp)
81103c5c:	e0fffd05 	stb	r3,-12(fp)
81103c60:	e0bffe05 	stb	r2,-8(fp)
81103c64:	defff004 	addi	sp,sp,-64
81103c68:	d8800904 	addi	r2,sp,36
81103c6c:	108007c4 	addi	r2,r2,31
81103c70:	1004d17a 	srli	r2,r2,5
81103c74:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81103c78:	00800044 	movi	r2,1
81103c7c:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81103c80:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81103c84:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81103c88:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
81103c8c:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103c90:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103c94:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103c98:	e0bffe03 	ldbu	r2,-8(fp)
81103c9c:	10c00268 	cmpgeui	r3,r2,9
81103ca0:	1800a51e 	bne	r3,zero,81103f38 <bSdmaDmaM1Transfer+0x30c>
81103ca4:	100690ba 	slli	r3,r2,2
81103ca8:	00a04434 	movhi	r2,33040
81103cac:	108f2f04 	addi	r2,r2,15548
81103cb0:	1885883a 	add	r2,r3,r2
81103cb4:	10800017 	ldw	r2,0(r2)
81103cb8:	1000683a 	jmp	r2
81103cbc:	81103f38 	rdprs	r4,r16,16636
81103cc0:	81103ce0 	cmpeqi	r4,r16,16627
81103cc4:	81103d24 	muli	r4,r16,16628
81103cc8:	81103d70 	cmpltui	r4,r16,16629
81103ccc:	81103dbc 	xorhi	r4,r16,16630
81103cd0:	81103e08 	cmpgei	r4,r16,16632
81103cd4:	81103e54 	ori	r4,r16,16633
81103cd8:	81103ea0 	cmpeqi	r4,r16,16634
81103cdc:	81103eec 	andhi	r4,r16,16635
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103ce0:	e0bffd03 	ldbu	r2,-12(fp)
81103ce4:	10000326 	beq	r2,zero,81103cf4 <bSdmaDmaM1Transfer+0xc8>
81103ce8:	10800060 	cmpeqi	r2,r2,1
81103cec:	1000051e 	bne	r2,zero,81103d04 <bSdmaDmaM1Transfer+0xd8>
81103cf0:	00000906 	br	81103d18 <bSdmaDmaM1Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103cf4:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103cf8:	00800044 	movi	r2,1
81103cfc:	e0bff715 	stw	r2,-36(fp)
			break;
81103d00:	00000706 	br	81103d20 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103d04:	00800074 	movhi	r2,1
81103d08:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103d0c:	00800044 	movi	r2,1
81103d10:	e0bff715 	stw	r2,-36(fp)
			break;
81103d14:	00000206 	br	81103d20 <bSdmaDmaM1Transfer+0xf4>
		default:
			bStatus = FALSE;
81103d18:	e03ff415 	stw	zero,-48(fp)
			break;
81103d1c:	0001883a 	nop
		}
		break;
81103d20:	00008706 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103d24:	e0bffd03 	ldbu	r2,-12(fp)
81103d28:	10000326 	beq	r2,zero,81103d38 <bSdmaDmaM1Transfer+0x10c>
81103d2c:	10800060 	cmpeqi	r2,r2,1
81103d30:	1000061e 	bne	r2,zero,81103d4c <bSdmaDmaM1Transfer+0x120>
81103d34:	00000b06 	br	81103d64 <bSdmaDmaM1Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103d38:	00880004 	movi	r2,8192
81103d3c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81103d40:	00800044 	movi	r2,1
81103d44:	e0bff715 	stw	r2,-36(fp)
			break;
81103d48:	00000806 	br	81103d6c <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
81103d4c:	00800074 	movhi	r2,1
81103d50:	10880004 	addi	r2,r2,8192
81103d54:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81103d58:	00800044 	movi	r2,1
81103d5c:	e0bff715 	stw	r2,-36(fp)
			break;
81103d60:	00000206 	br	81103d6c <bSdmaDmaM1Transfer+0x140>
		default:
			bStatus = FALSE;
81103d64:	e03ff415 	stw	zero,-48(fp)
			break;
81103d68:	0001883a 	nop
		}
		break;
81103d6c:	00007406 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81103d70:	e0bffd03 	ldbu	r2,-12(fp)
81103d74:	10000326 	beq	r2,zero,81103d84 <bSdmaDmaM1Transfer+0x158>
81103d78:	10800060 	cmpeqi	r2,r2,1
81103d7c:	1000061e 	bne	r2,zero,81103d98 <bSdmaDmaM1Transfer+0x16c>
81103d80:	00000b06 	br	81103db0 <bSdmaDmaM1Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81103d84:	00900004 	movi	r2,16384
81103d88:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
81103d8c:	00800044 	movi	r2,1
81103d90:	e0bff715 	stw	r2,-36(fp)
			break;
81103d94:	00000806 	br	81103db8 <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103d98:	00800074 	movhi	r2,1
81103d9c:	10900004 	addi	r2,r2,16384
81103da0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103da4:	00800044 	movi	r2,1
81103da8:	e0bff715 	stw	r2,-36(fp)
			break;
81103dac:	00000206 	br	81103db8 <bSdmaDmaM1Transfer+0x18c>
		default:
			bStatus = FALSE;
81103db0:	e03ff415 	stw	zero,-48(fp)
			break;
81103db4:	0001883a 	nop
		}
		break;
81103db8:	00006106 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103dbc:	e0bffd03 	ldbu	r2,-12(fp)
81103dc0:	10000326 	beq	r2,zero,81103dd0 <bSdmaDmaM1Transfer+0x1a4>
81103dc4:	10800060 	cmpeqi	r2,r2,1
81103dc8:	1000061e 	bne	r2,zero,81103de4 <bSdmaDmaM1Transfer+0x1b8>
81103dcc:	00000b06 	br	81103dfc <bSdmaDmaM1Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103dd0:	00980004 	movi	r2,24576
81103dd4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103dd8:	00800044 	movi	r2,1
81103ddc:	e0bff715 	stw	r2,-36(fp)
			break;
81103de0:	00000806 	br	81103e04 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103de4:	00800074 	movhi	r2,1
81103de8:	10980004 	addi	r2,r2,24576
81103dec:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103df0:	00800044 	movi	r2,1
81103df4:	e0bff715 	stw	r2,-36(fp)
			break;
81103df8:	00000206 	br	81103e04 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bStatus = FALSE;
81103dfc:	e03ff415 	stw	zero,-48(fp)
			break;
81103e00:	0001883a 	nop
		}
		break;
81103e04:	00004e06 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103e08:	e0bffd03 	ldbu	r2,-12(fp)
81103e0c:	10000326 	beq	r2,zero,81103e1c <bSdmaDmaM1Transfer+0x1f0>
81103e10:	10800060 	cmpeqi	r2,r2,1
81103e14:	1000061e 	bne	r2,zero,81103e30 <bSdmaDmaM1Transfer+0x204>
81103e18:	00000b06 	br	81103e48 <bSdmaDmaM1Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
81103e1c:	00a00014 	movui	r2,32768
81103e20:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103e24:	00800044 	movi	r2,1
81103e28:	e0bff715 	stw	r2,-36(fp)
			break;
81103e2c:	00000806 	br	81103e50 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81103e30:	008000b4 	movhi	r2,2
81103e34:	10a00004 	addi	r2,r2,-32768
81103e38:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
81103e3c:	00800044 	movi	r2,1
81103e40:	e0bff715 	stw	r2,-36(fp)
			break;
81103e44:	00000206 	br	81103e50 <bSdmaDmaM1Transfer+0x224>
		default:
			bStatus = FALSE;
81103e48:	e03ff415 	stw	zero,-48(fp)
			break;
81103e4c:	0001883a 	nop
		}
		break;
81103e50:	00003b06 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81103e54:	e0bffd03 	ldbu	r2,-12(fp)
81103e58:	10000326 	beq	r2,zero,81103e68 <bSdmaDmaM1Transfer+0x23c>
81103e5c:	10800060 	cmpeqi	r2,r2,1
81103e60:	1000061e 	bne	r2,zero,81103e7c <bSdmaDmaM1Transfer+0x250>
81103e64:	00000b06 	br	81103e94 <bSdmaDmaM1Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81103e68:	00a80014 	movui	r2,40960
81103e6c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81103e70:	00800044 	movi	r2,1
81103e74:	e0bff715 	stw	r2,-36(fp)
			break;
81103e78:	00000806 	br	81103e9c <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103e7c:	008000b4 	movhi	r2,2
81103e80:	10a80004 	addi	r2,r2,-24576
81103e84:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103e88:	00800044 	movi	r2,1
81103e8c:	e0bff715 	stw	r2,-36(fp)
			break;
81103e90:	00000206 	br	81103e9c <bSdmaDmaM1Transfer+0x270>
		default:
			bStatus = FALSE;
81103e94:	e03ff415 	stw	zero,-48(fp)
			break;
81103e98:	0001883a 	nop
		}
		break;
81103e9c:	00002806 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103ea0:	e0bffd03 	ldbu	r2,-12(fp)
81103ea4:	10000326 	beq	r2,zero,81103eb4 <bSdmaDmaM1Transfer+0x288>
81103ea8:	10800060 	cmpeqi	r2,r2,1
81103eac:	1000061e 	bne	r2,zero,81103ec8 <bSdmaDmaM1Transfer+0x29c>
81103eb0:	00000b06 	br	81103ee0 <bSdmaDmaM1Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103eb4:	00b00014 	movui	r2,49152
81103eb8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
81103ebc:	00800044 	movi	r2,1
81103ec0:	e0bff715 	stw	r2,-36(fp)
			break;
81103ec4:	00000806 	br	81103ee8 <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103ec8:	008000b4 	movhi	r2,2
81103ecc:	10b00004 	addi	r2,r2,-16384
81103ed0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103ed4:	00800044 	movi	r2,1
81103ed8:	e0bff715 	stw	r2,-36(fp)
			break;
81103edc:	00000206 	br	81103ee8 <bSdmaDmaM1Transfer+0x2bc>
		default:
			bStatus = FALSE;
81103ee0:	e03ff415 	stw	zero,-48(fp)
			break;
81103ee4:	0001883a 	nop
		}
		break;
81103ee8:	00001506 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103eec:	e0bffd03 	ldbu	r2,-12(fp)
81103ef0:	10000326 	beq	r2,zero,81103f00 <bSdmaDmaM1Transfer+0x2d4>
81103ef4:	10800060 	cmpeqi	r2,r2,1
81103ef8:	1000061e 	bne	r2,zero,81103f14 <bSdmaDmaM1Transfer+0x2e8>
81103efc:	00000b06 	br	81103f2c <bSdmaDmaM1Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103f00:	00b80014 	movui	r2,57344
81103f04:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103f08:	00800044 	movi	r2,1
81103f0c:	e0bff715 	stw	r2,-36(fp)
			break;
81103f10:	00000806 	br	81103f34 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103f14:	008000b4 	movhi	r2,2
81103f18:	10b80004 	addi	r2,r2,-8192
81103f1c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103f20:	00800044 	movi	r2,1
81103f24:	e0bff715 	stw	r2,-36(fp)
			break;
81103f28:	00000206 	br	81103f34 <bSdmaDmaM1Transfer+0x308>
		default:
			bStatus = FALSE;
81103f2c:	e03ff415 	stw	zero,-48(fp)
			break;
81103f30:	0001883a 	nop
		}
		break;
81103f34:	00000206 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	default:
		bStatus = FALSE;
81103f38:	e03ff415 	stw	zero,-48(fp)
		break;
81103f3c:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW
81103f40:	e0bffb17 	ldw	r2,-20(fp)
81103f44:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81103f48:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81103f4c:	e0bff417 	ldw	r2,-48(fp)
81103f50:	10003b26 	beq	r2,zero,81104040 <bSdmaDmaM1Transfer+0x414>
		if (pxDmaM1Dev == NULL) {
81103f54:	d0a03817 	ldw	r2,-32544(gp)
81103f58:	1000021e 	bne	r2,zero,81103f64 <bSdmaDmaM1Transfer+0x338>
			bStatus = FALSE;
81103f5c:	e03ff415 	stw	zero,-48(fp)
81103f60:	00003706 	br	81104040 <bSdmaDmaM1Transfer+0x414>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103f64:	e03ff50d 	sth	zero,-44(fp)
81103f68:	00003206 	br	81104034 <bSdmaDmaM1Transfer+0x408>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103f6c:	01000044 	movi	r4,1
81103f70:	11266bc0 	call	811266bc <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103f74:	d0a03817 	ldw	r2,-32544(gp)
81103f78:	10800317 	ldw	r2,12(r2)
81103f7c:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81103f80:	1080010c 	andi	r2,r2,4
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103f84:	103ff91e 	bne	r2,zero,81103f6c <__reset+0xfb0e3f6c>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
81103f88:	d2203817 	ldw	r8,-32544(gp)
81103f8c:	e17ff817 	ldw	r5,-32(fp)
81103f90:	e1bff617 	ldw	r6,-40(fp)
81103f94:	e0bff917 	ldw	r2,-28(fp)
81103f98:	e0fff717 	ldw	r3,-36(fp)
81103f9c:	01000044 	movi	r4,1
81103fa0:	d9000815 	stw	r4,32(sp)
81103fa4:	01000044 	movi	r4,1
81103fa8:	d9000715 	stw	r4,28(sp)
81103fac:	01000044 	movi	r4,1
81103fb0:	d9000615 	stw	r4,24(sp)
81103fb4:	01000044 	movi	r4,1
81103fb8:	d9000515 	stw	r4,20(sp)
81103fbc:	01000044 	movi	r4,1
81103fc0:	d9000415 	stw	r4,16(sp)
81103fc4:	d8c00315 	stw	r3,12(sp)
81103fc8:	d8800215 	stw	r2,8(sp)
81103fcc:	e0bffa17 	ldw	r2,-24(fp)
81103fd0:	d8800115 	stw	r2,4(sp)
81103fd4:	00802204 	movi	r2,136
81103fd8:	d8800015 	stw	r2,0(sp)
81103fdc:	300f883a 	mov	r7,r6
81103fe0:	280d883a 	mov	r6,r5
81103fe4:	800b883a 	mov	r5,r16
81103fe8:	4009883a 	mov	r4,r8
81103fec:	1106b800 	call	81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>
81103ff0:	10000226 	beq	r2,zero,81103ffc <bSdmaDmaM1Transfer+0x3d0>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81103ff4:	e03ff415 	stw	zero,-48(fp)
					break;
81103ff8:	00001106 	br	81104040 <bSdmaDmaM1Transfer+0x414>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM1Dev,
81103ffc:	d0a03817 	ldw	r2,-32544(gp)
81104000:	800b883a 	mov	r5,r16
81104004:	1009883a 	mov	r4,r2
81104008:	1106c840 	call	81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>
8110400c:	10000226 	beq	r2,zero,81104018 <bSdmaDmaM1Transfer+0x3ec>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104010:	e03ff415 	stw	zero,-48(fp)
						break;
81104014:	00000a06 	br	81104040 <bSdmaDmaM1Transfer+0x414>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104018:	e0bff817 	ldw	r2,-32(fp)
8110401c:	10802204 	addi	r2,r2,136
81104020:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81104024:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104028:	e0bff50b 	ldhu	r2,-44(fp)
8110402c:	10800044 	addi	r2,r2,1
81104030:	e0bff50d 	sth	r2,-44(fp)
81104034:	e0fff50b 	ldhu	r3,-44(fp)
81104038:	e0bffc0b 	ldhu	r2,-16(fp)
8110403c:	18bfcd36 	bltu	r3,r2,81103f74 <__reset+0xfb0e3f74>
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81104040:	e0bff417 	ldw	r2,-48(fp)
}
81104044:	e6ffff04 	addi	sp,fp,-4
81104048:	dfc00217 	ldw	ra,8(sp)
8110404c:	df000117 	ldw	fp,4(sp)
81104050:	dc000017 	ldw	r16,0(sp)
81104054:	dec00304 	addi	sp,sp,12
81104058:	f800283a 	ret

8110405c <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
8110405c:	deffe904 	addi	sp,sp,-92
81104060:	de00012e 	bgeu	sp,et,81104068 <bSdmaDmaM2Transfer+0xc>
81104064:	003b68fa 	trap	3
81104068:	dfc01615 	stw	ra,88(sp)
8110406c:	df001515 	stw	fp,84(sp)
81104070:	dc001415 	stw	r16,80(sp)
81104074:	df001504 	addi	fp,sp,84
81104078:	e13ffb15 	stw	r4,-20(fp)
8110407c:	2809883a 	mov	r4,r5
81104080:	3007883a 	mov	r3,r6
81104084:	3805883a 	mov	r2,r7
81104088:	e13ffc0d 	sth	r4,-16(fp)
8110408c:	e0fffd05 	stb	r3,-12(fp)
81104090:	e0bffe05 	stb	r2,-8(fp)
81104094:	defff004 	addi	sp,sp,-64
81104098:	d8800904 	addi	r2,sp,36
8110409c:	108007c4 	addi	r2,r2,31
811040a0:	1004d17a 	srli	r2,r2,5
811040a4:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
811040a8:	00800044 	movi	r2,1
811040ac:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
811040b0:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
811040b4:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
811040b8:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
811040bc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
811040c0:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
811040c4:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
811040c8:	e0bffe03 	ldbu	r2,-8(fp)
811040cc:	10c00268 	cmpgeui	r3,r2,9
811040d0:	1800a51e 	bne	r3,zero,81104368 <bSdmaDmaM2Transfer+0x30c>
811040d4:	100690ba 	slli	r3,r2,2
811040d8:	00a04434 	movhi	r2,33040
811040dc:	10903b04 	addi	r2,r2,16620
811040e0:	1885883a 	add	r2,r3,r2
811040e4:	10800017 	ldw	r2,0(r2)
811040e8:	1000683a 	jmp	r2
811040ec:	81104368 	cmpgeui	r4,r16,16653
811040f0:	81104110 	cmplti	r4,r16,16644
811040f4:	81104154 	ori	r4,r16,16645
811040f8:	811041a0 	cmpeqi	r4,r16,16646
811040fc:	811041ec 	andhi	r4,r16,16647
81104100:	81104238 	rdprs	r4,r16,16648
81104104:	81104284 	addi	r4,r16,16650
81104108:	811042d0 	cmplti	r4,r16,16651
8110410c:	8110431c 	xori	r4,r16,16652
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81104110:	e0bffd03 	ldbu	r2,-12(fp)
81104114:	10000326 	beq	r2,zero,81104124 <bSdmaDmaM2Transfer+0xc8>
81104118:	10800060 	cmpeqi	r2,r2,1
8110411c:	1000051e 	bne	r2,zero,81104134 <bSdmaDmaM2Transfer+0xd8>
81104120:	00000906 	br	81104148 <bSdmaDmaM2Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81104124:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81104128:	00800044 	movi	r2,1
8110412c:	e0bff715 	stw	r2,-36(fp)
			break;
81104130:	00000706 	br	81104150 <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81104134:	00800074 	movhi	r2,1
81104138:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
8110413c:	00800044 	movi	r2,1
81104140:	e0bff715 	stw	r2,-36(fp)
			break;
81104144:	00000206 	br	81104150 <bSdmaDmaM2Transfer+0xf4>
		default:
			bStatus = FALSE;
81104148:	e03ff415 	stw	zero,-48(fp)
			break;
8110414c:	0001883a 	nop
		}
		break;
81104150:	00008706 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81104154:	e0bffd03 	ldbu	r2,-12(fp)
81104158:	10000326 	beq	r2,zero,81104168 <bSdmaDmaM2Transfer+0x10c>
8110415c:	10800060 	cmpeqi	r2,r2,1
81104160:	1000061e 	bne	r2,zero,8110417c <bSdmaDmaM2Transfer+0x120>
81104164:	00000b06 	br	81104194 <bSdmaDmaM2Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81104168:	00880004 	movi	r2,8192
8110416c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81104170:	00800044 	movi	r2,1
81104174:	e0bff715 	stw	r2,-36(fp)
			break;
81104178:	00000806 	br	8110419c <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
8110417c:	00800074 	movhi	r2,1
81104180:	10880004 	addi	r2,r2,8192
81104184:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81104188:	00800044 	movi	r2,1
8110418c:	e0bff715 	stw	r2,-36(fp)
			break;
81104190:	00000206 	br	8110419c <bSdmaDmaM2Transfer+0x140>
		default:
			bStatus = FALSE;
81104194:	e03ff415 	stw	zero,-48(fp)
			break;
81104198:	0001883a 	nop
		}
		break;
8110419c:	00007406 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
811041a0:	e0bffd03 	ldbu	r2,-12(fp)
811041a4:	10000326 	beq	r2,zero,811041b4 <bSdmaDmaM2Transfer+0x158>
811041a8:	10800060 	cmpeqi	r2,r2,1
811041ac:	1000061e 	bne	r2,zero,811041c8 <bSdmaDmaM2Transfer+0x16c>
811041b0:	00000b06 	br	811041e0 <bSdmaDmaM2Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
811041b4:	00900004 	movi	r2,16384
811041b8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
811041bc:	00800044 	movi	r2,1
811041c0:	e0bff715 	stw	r2,-36(fp)
			break;
811041c4:	00000806 	br	811041e8 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
811041c8:	00800074 	movhi	r2,1
811041cc:	10900004 	addi	r2,r2,16384
811041d0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
811041d4:	00800044 	movi	r2,1
811041d8:	e0bff715 	stw	r2,-36(fp)
			break;
811041dc:	00000206 	br	811041e8 <bSdmaDmaM2Transfer+0x18c>
		default:
			bStatus = FALSE;
811041e0:	e03ff415 	stw	zero,-48(fp)
			break;
811041e4:	0001883a 	nop
		}
		break;
811041e8:	00006106 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
811041ec:	e0bffd03 	ldbu	r2,-12(fp)
811041f0:	10000326 	beq	r2,zero,81104200 <bSdmaDmaM2Transfer+0x1a4>
811041f4:	10800060 	cmpeqi	r2,r2,1
811041f8:	1000061e 	bne	r2,zero,81104214 <bSdmaDmaM2Transfer+0x1b8>
811041fc:	00000b06 	br	8110422c <bSdmaDmaM2Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81104200:	00980004 	movi	r2,24576
81104204:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81104208:	00800044 	movi	r2,1
8110420c:	e0bff715 	stw	r2,-36(fp)
			break;
81104210:	00000806 	br	81104234 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81104214:	00800074 	movhi	r2,1
81104218:	10980004 	addi	r2,r2,24576
8110421c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81104220:	00800044 	movi	r2,1
81104224:	e0bff715 	stw	r2,-36(fp)
			break;
81104228:	00000206 	br	81104234 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bStatus = FALSE;
8110422c:	e03ff415 	stw	zero,-48(fp)
			break;
81104230:	0001883a 	nop
		}
		break;
81104234:	00004e06 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81104238:	e0bffd03 	ldbu	r2,-12(fp)
8110423c:	10000326 	beq	r2,zero,8110424c <bSdmaDmaM2Transfer+0x1f0>
81104240:	10800060 	cmpeqi	r2,r2,1
81104244:	1000061e 	bne	r2,zero,81104260 <bSdmaDmaM2Transfer+0x204>
81104248:	00000b06 	br	81104278 <bSdmaDmaM2Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
8110424c:	00a00014 	movui	r2,32768
81104250:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81104254:	00800044 	movi	r2,1
81104258:	e0bff715 	stw	r2,-36(fp)
			break;
8110425c:	00000806 	br	81104280 <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81104260:	008000b4 	movhi	r2,2
81104264:	10a00004 	addi	r2,r2,-32768
81104268:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
8110426c:	00800044 	movi	r2,1
81104270:	e0bff715 	stw	r2,-36(fp)
			break;
81104274:	00000206 	br	81104280 <bSdmaDmaM2Transfer+0x224>
		default:
			bStatus = FALSE;
81104278:	e03ff415 	stw	zero,-48(fp)
			break;
8110427c:	0001883a 	nop
		}
		break;
81104280:	00003b06 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81104284:	e0bffd03 	ldbu	r2,-12(fp)
81104288:	10000326 	beq	r2,zero,81104298 <bSdmaDmaM2Transfer+0x23c>
8110428c:	10800060 	cmpeqi	r2,r2,1
81104290:	1000061e 	bne	r2,zero,811042ac <bSdmaDmaM2Transfer+0x250>
81104294:	00000b06 	br	811042c4 <bSdmaDmaM2Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81104298:	00a80014 	movui	r2,40960
8110429c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
811042a0:	00800044 	movi	r2,1
811042a4:	e0bff715 	stw	r2,-36(fp)
			break;
811042a8:	00000806 	br	811042cc <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
811042ac:	008000b4 	movhi	r2,2
811042b0:	10a80004 	addi	r2,r2,-24576
811042b4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
811042b8:	00800044 	movi	r2,1
811042bc:	e0bff715 	stw	r2,-36(fp)
			break;
811042c0:	00000206 	br	811042cc <bSdmaDmaM2Transfer+0x270>
		default:
			bStatus = FALSE;
811042c4:	e03ff415 	stw	zero,-48(fp)
			break;
811042c8:	0001883a 	nop
		}
		break;
811042cc:	00002806 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
811042d0:	e0bffd03 	ldbu	r2,-12(fp)
811042d4:	10000326 	beq	r2,zero,811042e4 <bSdmaDmaM2Transfer+0x288>
811042d8:	10800060 	cmpeqi	r2,r2,1
811042dc:	1000061e 	bne	r2,zero,811042f8 <bSdmaDmaM2Transfer+0x29c>
811042e0:	00000b06 	br	81104310 <bSdmaDmaM2Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
811042e4:	00b00014 	movui	r2,49152
811042e8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
811042ec:	00800044 	movi	r2,1
811042f0:	e0bff715 	stw	r2,-36(fp)
			break;
811042f4:	00000806 	br	81104318 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
811042f8:	008000b4 	movhi	r2,2
811042fc:	10b00004 	addi	r2,r2,-16384
81104300:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81104304:	00800044 	movi	r2,1
81104308:	e0bff715 	stw	r2,-36(fp)
			break;
8110430c:	00000206 	br	81104318 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bStatus = FALSE;
81104310:	e03ff415 	stw	zero,-48(fp)
			break;
81104314:	0001883a 	nop
		}
		break;
81104318:	00001506 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
8110431c:	e0bffd03 	ldbu	r2,-12(fp)
81104320:	10000326 	beq	r2,zero,81104330 <bSdmaDmaM2Transfer+0x2d4>
81104324:	10800060 	cmpeqi	r2,r2,1
81104328:	1000061e 	bne	r2,zero,81104344 <bSdmaDmaM2Transfer+0x2e8>
8110432c:	00000b06 	br	8110435c <bSdmaDmaM2Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81104330:	00b80014 	movui	r2,57344
81104334:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81104338:	00800044 	movi	r2,1
8110433c:	e0bff715 	stw	r2,-36(fp)
			break;
81104340:	00000806 	br	81104364 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81104344:	008000b4 	movhi	r2,2
81104348:	10b80004 	addi	r2,r2,-8192
8110434c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81104350:	00800044 	movi	r2,1
81104354:	e0bff715 	stw	r2,-36(fp)
			break;
81104358:	00000206 	br	81104364 <bSdmaDmaM2Transfer+0x308>
		default:
			bStatus = FALSE;
8110435c:	e03ff415 	stw	zero,-48(fp)
			break;
81104360:	0001883a 	nop
		}
		break;
81104364:	00000206 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	default:
		bStatus = FALSE;
81104368:	e03ff415 	stw	zero,-48(fp)
		break;
8110436c:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
81104370:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bStatus = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
81104374:	00a00034 	movhi	r2,32768
81104378:	1885883a 	add	r2,r3,r2
8110437c:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
81104380:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81104384:	e0bff417 	ldw	r2,-48(fp)
81104388:	10003b26 	beq	r2,zero,81104478 <bSdmaDmaM2Transfer+0x41c>
		if (pxDmaM2Dev == NULL) {
8110438c:	d0a03917 	ldw	r2,-32540(gp)
81104390:	1000021e 	bne	r2,zero,8110439c <bSdmaDmaM2Transfer+0x340>
			bStatus = FALSE;
81104394:	e03ff415 	stw	zero,-48(fp)
81104398:	00003706 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
8110439c:	e03ff50d 	sth	zero,-44(fp)
811043a0:	00003206 	br	8110446c <bSdmaDmaM2Transfer+0x410>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
811043a4:	01000044 	movi	r4,1
811043a8:	11266bc0 	call	811266bc <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
811043ac:	d0a03917 	ldw	r2,-32540(gp)
811043b0:	10800317 	ldw	r2,12(r2)
811043b4:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
811043b8:	1080010c 	andi	r2,r2,4
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
811043bc:	103ff91e 	bne	r2,zero,811043a4 <__reset+0xfb0e43a4>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
811043c0:	d2203917 	ldw	r8,-32540(gp)
811043c4:	e17ff817 	ldw	r5,-32(fp)
811043c8:	e1bff617 	ldw	r6,-40(fp)
811043cc:	e0bff917 	ldw	r2,-28(fp)
811043d0:	e0fff717 	ldw	r3,-36(fp)
811043d4:	01000044 	movi	r4,1
811043d8:	d9000815 	stw	r4,32(sp)
811043dc:	01000044 	movi	r4,1
811043e0:	d9000715 	stw	r4,28(sp)
811043e4:	01000044 	movi	r4,1
811043e8:	d9000615 	stw	r4,24(sp)
811043ec:	01000044 	movi	r4,1
811043f0:	d9000515 	stw	r4,20(sp)
811043f4:	01000044 	movi	r4,1
811043f8:	d9000415 	stw	r4,16(sp)
811043fc:	d8c00315 	stw	r3,12(sp)
81104400:	d8800215 	stw	r2,8(sp)
81104404:	e0bffa17 	ldw	r2,-24(fp)
81104408:	d8800115 	stw	r2,4(sp)
8110440c:	00802204 	movi	r2,136
81104410:	d8800015 	stw	r2,0(sp)
81104414:	300f883a 	mov	r7,r6
81104418:	280d883a 	mov	r6,r5
8110441c:	800b883a 	mov	r5,r16
81104420:	4009883a 	mov	r4,r8
81104424:	1106b800 	call	81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104428:	10000226 	beq	r2,zero,81104434 <bSdmaDmaM2Transfer+0x3d8>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
8110442c:	e03ff415 	stw	zero,-48(fp)
					break;
81104430:	00001106 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
81104434:	d0a03917 	ldw	r2,-32540(gp)
81104438:	800b883a 	mov	r5,r16
8110443c:	1009883a 	mov	r4,r2
81104440:	1106c840 	call	81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>
81104444:	10000226 	beq	r2,zero,81104450 <bSdmaDmaM2Transfer+0x3f4>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104448:	e03ff415 	stw	zero,-48(fp)
						break;
8110444c:	00000a06 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104450:	e0bff817 	ldw	r2,-32(fp)
81104454:	10802204 	addi	r2,r2,136
81104458:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
8110445c:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104460:	e0bff50b 	ldhu	r2,-44(fp)
81104464:	10800044 	addi	r2,r2,1
81104468:	e0bff50d 	sth	r2,-44(fp)
8110446c:	e0fff50b 	ldhu	r3,-44(fp)
81104470:	e0bffc0b 	ldhu	r2,-16(fp)
81104474:	18bfcd36 	bltu	r3,r2,811043ac <__reset+0xfb0e43ac>
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81104478:	e0bff417 	ldw	r2,-48(fp)
}
8110447c:	e6ffff04 	addi	sp,fp,-4
81104480:	dfc00217 	ldw	ra,8(sp)
81104484:	df000117 	ldw	fp,4(sp)
81104488:	dc000017 	ldw	r16,0(sp)
8110448c:	dec00304 	addi	sp,sp,12
81104490:	f800283a 	ret

81104494 <vFeebCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFeebCh1HandleIrq(void* pvContext) {
81104494:	defffc04 	addi	sp,sp,-16
81104498:	de00012e 	bgeu	sp,et,811044a0 <vFeebCh1HandleIrq+0xc>
8110449c:	003b68fa 	trap	3
811044a0:	dfc00315 	stw	ra,12(sp)
811044a4:	df000215 	stw	fp,8(sp)
811044a8:	df000204 	addi	fp,sp,8
811044ac:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811044b0:	e0bfff17 	ldw	r2,-4(fp)
811044b4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh1IrqFlagClrBufferEmpty();
811044b8:	11046940 	call	81104694 <vFeebCh1IrqFlagClrBufferEmpty>
}
811044bc:	0001883a 	nop
811044c0:	e037883a 	mov	sp,fp
811044c4:	dfc00117 	ldw	ra,4(sp)
811044c8:	df000017 	ldw	fp,0(sp)
811044cc:	dec00204 	addi	sp,sp,8
811044d0:	f800283a 	ret

811044d4 <vFeebCh2HandleIrq>:

void vFeebCh2HandleIrq(void* pvContext) {
811044d4:	defffc04 	addi	sp,sp,-16
811044d8:	de00012e 	bgeu	sp,et,811044e0 <vFeebCh2HandleIrq+0xc>
811044dc:	003b68fa 	trap	3
811044e0:	dfc00315 	stw	ra,12(sp)
811044e4:	df000215 	stw	fp,8(sp)
811044e8:	df000204 	addi	fp,sp,8
811044ec:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811044f0:	e0bfff17 	ldw	r2,-4(fp)
811044f4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh2IrqFlagClrBufferEmpty();
811044f8:	11046d80 	call	811046d8 <vFeebCh2IrqFlagClrBufferEmpty>
}
811044fc:	0001883a 	nop
81104500:	e037883a 	mov	sp,fp
81104504:	dfc00117 	ldw	ra,4(sp)
81104508:	df000017 	ldw	fp,0(sp)
8110450c:	dec00204 	addi	sp,sp,8
81104510:	f800283a 	ret

81104514 <vFeebCh3HandleIrq>:

void vFeebCh3HandleIrq(void* pvContext) {
81104514:	defffc04 	addi	sp,sp,-16
81104518:	de00012e 	bgeu	sp,et,81104520 <vFeebCh3HandleIrq+0xc>
8110451c:	003b68fa 	trap	3
81104520:	dfc00315 	stw	ra,12(sp)
81104524:	df000215 	stw	fp,8(sp)
81104528:	df000204 	addi	fp,sp,8
8110452c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104530:	e0bfff17 	ldw	r2,-4(fp)
81104534:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh3IrqFlagClrBufferEmpty();
81104538:	110471c0 	call	8110471c <vFeebCh3IrqFlagClrBufferEmpty>
}
8110453c:	0001883a 	nop
81104540:	e037883a 	mov	sp,fp
81104544:	dfc00117 	ldw	ra,4(sp)
81104548:	df000017 	ldw	fp,0(sp)
8110454c:	dec00204 	addi	sp,sp,8
81104550:	f800283a 	ret

81104554 <vFeebCh4HandleIrq>:

void vFeebCh4HandleIrq(void* pvContext) {
81104554:	defffc04 	addi	sp,sp,-16
81104558:	de00012e 	bgeu	sp,et,81104560 <vFeebCh4HandleIrq+0xc>
8110455c:	003b68fa 	trap	3
81104560:	dfc00315 	stw	ra,12(sp)
81104564:	df000215 	stw	fp,8(sp)
81104568:	df000204 	addi	fp,sp,8
8110456c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104570:	e0bfff17 	ldw	r2,-4(fp)
81104574:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh4IrqFlagClrBufferEmpty();
81104578:	11047600 	call	81104760 <vFeebCh4IrqFlagClrBufferEmpty>
}
8110457c:	0001883a 	nop
81104580:	e037883a 	mov	sp,fp
81104584:	dfc00117 	ldw	ra,4(sp)
81104588:	df000017 	ldw	fp,0(sp)
8110458c:	dec00204 	addi	sp,sp,8
81104590:	f800283a 	ret

81104594 <vFeebCh5HandleIrq>:

void vFeebCh5HandleIrq(void* pvContext) {
81104594:	defffc04 	addi	sp,sp,-16
81104598:	de00012e 	bgeu	sp,et,811045a0 <vFeebCh5HandleIrq+0xc>
8110459c:	003b68fa 	trap	3
811045a0:	dfc00315 	stw	ra,12(sp)
811045a4:	df000215 	stw	fp,8(sp)
811045a8:	df000204 	addi	fp,sp,8
811045ac:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045b0:	e0bfff17 	ldw	r2,-4(fp)
811045b4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh5IrqFlagClrBufferEmpty();
811045b8:	11047a40 	call	811047a4 <vFeebCh5IrqFlagClrBufferEmpty>
}
811045bc:	0001883a 	nop
811045c0:	e037883a 	mov	sp,fp
811045c4:	dfc00117 	ldw	ra,4(sp)
811045c8:	df000017 	ldw	fp,0(sp)
811045cc:	dec00204 	addi	sp,sp,8
811045d0:	f800283a 	ret

811045d4 <vFeebCh6HandleIrq>:

void vFeebCh6HandleIrq(void* pvContext) {
811045d4:	defffc04 	addi	sp,sp,-16
811045d8:	de00012e 	bgeu	sp,et,811045e0 <vFeebCh6HandleIrq+0xc>
811045dc:	003b68fa 	trap	3
811045e0:	dfc00315 	stw	ra,12(sp)
811045e4:	df000215 	stw	fp,8(sp)
811045e8:	df000204 	addi	fp,sp,8
811045ec:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045f0:	e0bfff17 	ldw	r2,-4(fp)
811045f4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	vFeebCh6IrqFlagClrBufferEmpty();
811045f8:	11047e80 	call	811047e8 <vFeebCh6IrqFlagClrBufferEmpty>
}
811045fc:	0001883a 	nop
81104600:	e037883a 	mov	sp,fp
81104604:	dfc00117 	ldw	ra,4(sp)
81104608:	df000017 	ldw	fp,0(sp)
8110460c:	dec00204 	addi	sp,sp,8
81104610:	f800283a 	ret

81104614 <vFeebCh7HandleIrq>:

void vFeebCh7HandleIrq(void* pvContext) {
81104614:	defffc04 	addi	sp,sp,-16
81104618:	de00012e 	bgeu	sp,et,81104620 <vFeebCh7HandleIrq+0xc>
8110461c:	003b68fa 	trap	3
81104620:	dfc00315 	stw	ra,12(sp)
81104624:	df000215 	stw	fp,8(sp)
81104628:	df000204 	addi	fp,sp,8
8110462c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104630:	e0bfff17 	ldw	r2,-4(fp)
81104634:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh7IrqFlagClrBufferEmpty();
81104638:	110482c0 	call	8110482c <vFeebCh7IrqFlagClrBufferEmpty>
}
8110463c:	0001883a 	nop
81104640:	e037883a 	mov	sp,fp
81104644:	dfc00117 	ldw	ra,4(sp)
81104648:	df000017 	ldw	fp,0(sp)
8110464c:	dec00204 	addi	sp,sp,8
81104650:	f800283a 	ret

81104654 <vFeebCh8HandleIrq>:

void vFeebCh8HandleIrq(void* pvContext) {
81104654:	defffc04 	addi	sp,sp,-16
81104658:	de00012e 	bgeu	sp,et,81104660 <vFeebCh8HandleIrq+0xc>
8110465c:	003b68fa 	trap	3
81104660:	dfc00315 	stw	ra,12(sp)
81104664:	df000215 	stw	fp,8(sp)
81104668:	df000204 	addi	fp,sp,8
8110466c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104670:	e0bfff17 	ldw	r2,-4(fp)
81104674:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh8IrqFlagClrBufferEmpty();
81104678:	11048700 	call	81104870 <vFeebCh8IrqFlagClrBufferEmpty>
}
8110467c:	0001883a 	nop
81104680:	e037883a 	mov	sp,fp
81104684:	dfc00117 	ldw	ra,4(sp)
81104688:	df000017 	ldw	fp,0(sp)
8110468c:	dec00204 	addi	sp,sp,8
81104690:	f800283a 	ret

81104694 <vFeebCh1IrqFlagClrBufferEmpty>:

void vFeebCh1IrqFlagClrBufferEmpty(void) {
81104694:	defffe04 	addi	sp,sp,-8
81104698:	de00012e 	bgeu	sp,et,811046a0 <vFeebCh1IrqFlagClrBufferEmpty+0xc>
8110469c:	003b68fa 	trap	3
811046a0:	dfc00115 	stw	ra,4(sp)
811046a4:	df000015 	stw	fp,0(sp)
811046a8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811046ac:	01800044 	movi	r6,1
811046b0:	01400144 	movi	r5,5
811046b4:	01204834 	movhi	r4,33056
811046b8:	210b0004 	addi	r4,r4,11264
811046bc:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811046c0:	0001883a 	nop
811046c4:	e037883a 	mov	sp,fp
811046c8:	dfc00117 	ldw	ra,4(sp)
811046cc:	df000017 	ldw	fp,0(sp)
811046d0:	dec00204 	addi	sp,sp,8
811046d4:	f800283a 	ret

811046d8 <vFeebCh2IrqFlagClrBufferEmpty>:

void vFeebCh2IrqFlagClrBufferEmpty(void) {
811046d8:	defffe04 	addi	sp,sp,-8
811046dc:	de00012e 	bgeu	sp,et,811046e4 <vFeebCh2IrqFlagClrBufferEmpty+0xc>
811046e0:	003b68fa 	trap	3
811046e4:	dfc00115 	stw	ra,4(sp)
811046e8:	df000015 	stw	fp,0(sp)
811046ec:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811046f0:	01800044 	movi	r6,1
811046f4:	01400144 	movi	r5,5
811046f8:	01204834 	movhi	r4,33056
811046fc:	210a0004 	addi	r4,r4,10240
81104700:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104704:	0001883a 	nop
81104708:	e037883a 	mov	sp,fp
8110470c:	dfc00117 	ldw	ra,4(sp)
81104710:	df000017 	ldw	fp,0(sp)
81104714:	dec00204 	addi	sp,sp,8
81104718:	f800283a 	ret

8110471c <vFeebCh3IrqFlagClrBufferEmpty>:

void vFeebCh3IrqFlagClrBufferEmpty(void) {
8110471c:	defffe04 	addi	sp,sp,-8
81104720:	de00012e 	bgeu	sp,et,81104728 <vFeebCh3IrqFlagClrBufferEmpty+0xc>
81104724:	003b68fa 	trap	3
81104728:	dfc00115 	stw	ra,4(sp)
8110472c:	df000015 	stw	fp,0(sp)
81104730:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104734:	01800044 	movi	r6,1
81104738:	01400144 	movi	r5,5
8110473c:	01204834 	movhi	r4,33056
81104740:	21090004 	addi	r4,r4,9216
81104744:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104748:	0001883a 	nop
8110474c:	e037883a 	mov	sp,fp
81104750:	dfc00117 	ldw	ra,4(sp)
81104754:	df000017 	ldw	fp,0(sp)
81104758:	dec00204 	addi	sp,sp,8
8110475c:	f800283a 	ret

81104760 <vFeebCh4IrqFlagClrBufferEmpty>:

void vFeebCh4IrqFlagClrBufferEmpty(void) {
81104760:	defffe04 	addi	sp,sp,-8
81104764:	de00012e 	bgeu	sp,et,8110476c <vFeebCh4IrqFlagClrBufferEmpty+0xc>
81104768:	003b68fa 	trap	3
8110476c:	dfc00115 	stw	ra,4(sp)
81104770:	df000015 	stw	fp,0(sp)
81104774:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104778:	01800044 	movi	r6,1
8110477c:	01400144 	movi	r5,5
81104780:	01204834 	movhi	r4,33056
81104784:	21080004 	addi	r4,r4,8192
81104788:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110478c:	0001883a 	nop
81104790:	e037883a 	mov	sp,fp
81104794:	dfc00117 	ldw	ra,4(sp)
81104798:	df000017 	ldw	fp,0(sp)
8110479c:	dec00204 	addi	sp,sp,8
811047a0:	f800283a 	ret

811047a4 <vFeebCh5IrqFlagClrBufferEmpty>:

void vFeebCh5IrqFlagClrBufferEmpty(void) {
811047a4:	defffe04 	addi	sp,sp,-8
811047a8:	de00012e 	bgeu	sp,et,811047b0 <vFeebCh5IrqFlagClrBufferEmpty+0xc>
811047ac:	003b68fa 	trap	3
811047b0:	dfc00115 	stw	ra,4(sp)
811047b4:	df000015 	stw	fp,0(sp)
811047b8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
811047bc:	01800044 	movi	r6,1
811047c0:	01400144 	movi	r5,5
811047c4:	01204834 	movhi	r4,33056
811047c8:	21070004 	addi	r4,r4,7168
811047cc:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047d0:	0001883a 	nop
811047d4:	e037883a 	mov	sp,fp
811047d8:	dfc00117 	ldw	ra,4(sp)
811047dc:	df000017 	ldw	fp,0(sp)
811047e0:	dec00204 	addi	sp,sp,8
811047e4:	f800283a 	ret

811047e8 <vFeebCh6IrqFlagClrBufferEmpty>:

void vFeebCh6IrqFlagClrBufferEmpty(void) {
811047e8:	defffe04 	addi	sp,sp,-8
811047ec:	de00012e 	bgeu	sp,et,811047f4 <vFeebCh6IrqFlagClrBufferEmpty+0xc>
811047f0:	003b68fa 	trap	3
811047f4:	dfc00115 	stw	ra,4(sp)
811047f8:	df000015 	stw	fp,0(sp)
811047fc:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104800:	01800044 	movi	r6,1
81104804:	01400144 	movi	r5,5
81104808:	01204834 	movhi	r4,33056
8110480c:	21060004 	addi	r4,r4,6144
81104810:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104814:	0001883a 	nop
81104818:	e037883a 	mov	sp,fp
8110481c:	dfc00117 	ldw	ra,4(sp)
81104820:	df000017 	ldw	fp,0(sp)
81104824:	dec00204 	addi	sp,sp,8
81104828:	f800283a 	ret

8110482c <vFeebCh7IrqFlagClrBufferEmpty>:

void vFeebCh7IrqFlagClrBufferEmpty(void) {
8110482c:	defffe04 	addi	sp,sp,-8
81104830:	de00012e 	bgeu	sp,et,81104838 <vFeebCh7IrqFlagClrBufferEmpty+0xc>
81104834:	003b68fa 	trap	3
81104838:	dfc00115 	stw	ra,4(sp)
8110483c:	df000015 	stw	fp,0(sp)
81104840:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104844:	01800044 	movi	r6,1
81104848:	01400144 	movi	r5,5
8110484c:	01204834 	movhi	r4,33056
81104850:	21050004 	addi	r4,r4,5120
81104854:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104858:	0001883a 	nop
8110485c:	e037883a 	mov	sp,fp
81104860:	dfc00117 	ldw	ra,4(sp)
81104864:	df000017 	ldw	fp,0(sp)
81104868:	dec00204 	addi	sp,sp,8
8110486c:	f800283a 	ret

81104870 <vFeebCh8IrqFlagClrBufferEmpty>:

void vFeebCh8IrqFlagClrBufferEmpty(void) {
81104870:	defffe04 	addi	sp,sp,-8
81104874:	de00012e 	bgeu	sp,et,8110487c <vFeebCh8IrqFlagClrBufferEmpty+0xc>
81104878:	003b68fa 	trap	3
8110487c:	dfc00115 	stw	ra,4(sp)
81104880:	df000015 	stw	fp,0(sp)
81104884:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104888:	01800044 	movi	r6,1
8110488c:	01400144 	movi	r5,5
81104890:	01204834 	movhi	r4,33056
81104894:	21040004 	addi	r4,r4,4096
81104898:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110489c:	0001883a 	nop
811048a0:	e037883a 	mov	sp,fp
811048a4:	dfc00117 	ldw	ra,4(sp)
811048a8:	df000017 	ldw	fp,0(sp)
811048ac:	dec00204 	addi	sp,sp,8
811048b0:	f800283a 	ret

811048b4 <bFeebCh1IrqFlagBufferEmpty>:

bool bFeebCh1IrqFlagBufferEmpty(void) {
811048b4:	defffd04 	addi	sp,sp,-12
811048b8:	de00012e 	bgeu	sp,et,811048c0 <bFeebCh1IrqFlagBufferEmpty+0xc>
811048bc:	003b68fa 	trap	3
811048c0:	dfc00215 	stw	ra,8(sp)
811048c4:	df000115 	stw	fp,4(sp)
811048c8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811048cc:	01400144 	movi	r5,5
811048d0:	01204834 	movhi	r4,33056
811048d4:	210b0004 	addi	r4,r4,11264
811048d8:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811048dc:	1080004c 	andi	r2,r2,1
}

bool bFeebCh1IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811048e0:	10000326 	beq	r2,zero,811048f0 <bFeebCh1IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811048e4:	00800044 	movi	r2,1
811048e8:	e0bfff15 	stw	r2,-4(fp)
811048ec:	00000106 	br	811048f4 <bFeebCh1IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811048f0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811048f4:	e0bfff17 	ldw	r2,-4(fp)
}
811048f8:	e037883a 	mov	sp,fp
811048fc:	dfc00117 	ldw	ra,4(sp)
81104900:	df000017 	ldw	fp,0(sp)
81104904:	dec00204 	addi	sp,sp,8
81104908:	f800283a 	ret

8110490c <bFeebCh2IrqFlagBufferEmpty>:

bool bFeebCh2IrqFlagBufferEmpty(void) {
8110490c:	defffd04 	addi	sp,sp,-12
81104910:	de00012e 	bgeu	sp,et,81104918 <bFeebCh2IrqFlagBufferEmpty+0xc>
81104914:	003b68fa 	trap	3
81104918:	dfc00215 	stw	ra,8(sp)
8110491c:	df000115 	stw	fp,4(sp)
81104920:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104924:	01400144 	movi	r5,5
81104928:	01204834 	movhi	r4,33056
8110492c:	210a0004 	addi	r4,r4,10240
81104930:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104934:	1080004c 	andi	r2,r2,1
}

bool bFeebCh2IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104938:	10000326 	beq	r2,zero,81104948 <bFeebCh2IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
8110493c:	00800044 	movi	r2,1
81104940:	e0bfff15 	stw	r2,-4(fp)
81104944:	00000106 	br	8110494c <bFeebCh2IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104948:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
8110494c:	e0bfff17 	ldw	r2,-4(fp)
}
81104950:	e037883a 	mov	sp,fp
81104954:	dfc00117 	ldw	ra,4(sp)
81104958:	df000017 	ldw	fp,0(sp)
8110495c:	dec00204 	addi	sp,sp,8
81104960:	f800283a 	ret

81104964 <bFeebCh3IrqFlagBufferEmpty>:

bool bFeebCh3IrqFlagBufferEmpty(void) {
81104964:	defffd04 	addi	sp,sp,-12
81104968:	de00012e 	bgeu	sp,et,81104970 <bFeebCh3IrqFlagBufferEmpty+0xc>
8110496c:	003b68fa 	trap	3
81104970:	dfc00215 	stw	ra,8(sp)
81104974:	df000115 	stw	fp,4(sp)
81104978:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
8110497c:	01400144 	movi	r5,5
81104980:	01204834 	movhi	r4,33056
81104984:	21090004 	addi	r4,r4,9216
81104988:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110498c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh3IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104990:	10000326 	beq	r2,zero,811049a0 <bFeebCh3IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104994:	00800044 	movi	r2,1
81104998:	e0bfff15 	stw	r2,-4(fp)
8110499c:	00000106 	br	811049a4 <bFeebCh3IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049a0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049a4:	e0bfff17 	ldw	r2,-4(fp)
}
811049a8:	e037883a 	mov	sp,fp
811049ac:	dfc00117 	ldw	ra,4(sp)
811049b0:	df000017 	ldw	fp,0(sp)
811049b4:	dec00204 	addi	sp,sp,8
811049b8:	f800283a 	ret

811049bc <bFeebCh4IrqFlagBufferEmpty>:

bool bFeebCh4IrqFlagBufferEmpty(void) {
811049bc:	defffd04 	addi	sp,sp,-12
811049c0:	de00012e 	bgeu	sp,et,811049c8 <bFeebCh4IrqFlagBufferEmpty+0xc>
811049c4:	003b68fa 	trap	3
811049c8:	dfc00215 	stw	ra,8(sp)
811049cc:	df000115 	stw	fp,4(sp)
811049d0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811049d4:	01400144 	movi	r5,5
811049d8:	01204834 	movhi	r4,33056
811049dc:	21080004 	addi	r4,r4,8192
811049e0:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049e4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh4IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811049e8:	10000326 	beq	r2,zero,811049f8 <bFeebCh4IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811049ec:	00800044 	movi	r2,1
811049f0:	e0bfff15 	stw	r2,-4(fp)
811049f4:	00000106 	br	811049fc <bFeebCh4IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049f8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049fc:	e0bfff17 	ldw	r2,-4(fp)
}
81104a00:	e037883a 	mov	sp,fp
81104a04:	dfc00117 	ldw	ra,4(sp)
81104a08:	df000017 	ldw	fp,0(sp)
81104a0c:	dec00204 	addi	sp,sp,8
81104a10:	f800283a 	ret

81104a14 <bFeebCh5IrqFlagBufferEmpty>:

bool bFeebCh5IrqFlagBufferEmpty(void) {
81104a14:	defffd04 	addi	sp,sp,-12
81104a18:	de00012e 	bgeu	sp,et,81104a20 <bFeebCh5IrqFlagBufferEmpty+0xc>
81104a1c:	003b68fa 	trap	3
81104a20:	dfc00215 	stw	ra,8(sp)
81104a24:	df000115 	stw	fp,4(sp)
81104a28:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a2c:	01400144 	movi	r5,5
81104a30:	01204834 	movhi	r4,33056
81104a34:	21070004 	addi	r4,r4,7168
81104a38:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a3c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh5IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a40:	10000326 	beq	r2,zero,81104a50 <bFeebCh5IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a44:	00800044 	movi	r2,1
81104a48:	e0bfff15 	stw	r2,-4(fp)
81104a4c:	00000106 	br	81104a54 <bFeebCh5IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a50:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a54:	e0bfff17 	ldw	r2,-4(fp)
}
81104a58:	e037883a 	mov	sp,fp
81104a5c:	dfc00117 	ldw	ra,4(sp)
81104a60:	df000017 	ldw	fp,0(sp)
81104a64:	dec00204 	addi	sp,sp,8
81104a68:	f800283a 	ret

81104a6c <bFeebCh6IrqFlagBufferEmpty>:

bool bFeebCh6IrqFlagBufferEmpty(void) {
81104a6c:	defffd04 	addi	sp,sp,-12
81104a70:	de00012e 	bgeu	sp,et,81104a78 <bFeebCh6IrqFlagBufferEmpty+0xc>
81104a74:	003b68fa 	trap	3
81104a78:	dfc00215 	stw	ra,8(sp)
81104a7c:	df000115 	stw	fp,4(sp)
81104a80:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104a84:	01400144 	movi	r5,5
81104a88:	01204834 	movhi	r4,33056
81104a8c:	21060004 	addi	r4,r4,6144
81104a90:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a94:	1080004c 	andi	r2,r2,1
}

bool bFeebCh6IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104a98:	10000326 	beq	r2,zero,81104aa8 <bFeebCh6IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a9c:	00800044 	movi	r2,1
81104aa0:	e0bfff15 	stw	r2,-4(fp)
81104aa4:	00000106 	br	81104aac <bFeebCh6IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104aa8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104aac:	e0bfff17 	ldw	r2,-4(fp)
}
81104ab0:	e037883a 	mov	sp,fp
81104ab4:	dfc00117 	ldw	ra,4(sp)
81104ab8:	df000017 	ldw	fp,0(sp)
81104abc:	dec00204 	addi	sp,sp,8
81104ac0:	f800283a 	ret

81104ac4 <bFeebCh7IrqFlagBufferEmpty>:

bool bFeebCh7IrqFlagBufferEmpty(void) {
81104ac4:	defffd04 	addi	sp,sp,-12
81104ac8:	de00012e 	bgeu	sp,et,81104ad0 <bFeebCh7IrqFlagBufferEmpty+0xc>
81104acc:	003b68fa 	trap	3
81104ad0:	dfc00215 	stw	ra,8(sp)
81104ad4:	df000115 	stw	fp,4(sp)
81104ad8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104adc:	01400144 	movi	r5,5
81104ae0:	01204834 	movhi	r4,33056
81104ae4:	21050004 	addi	r4,r4,5120
81104ae8:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104aec:	1080004c 	andi	r2,r2,1
}

bool bFeebCh7IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104af0:	10000326 	beq	r2,zero,81104b00 <bFeebCh7IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104af4:	00800044 	movi	r2,1
81104af8:	e0bfff15 	stw	r2,-4(fp)
81104afc:	00000106 	br	81104b04 <bFeebCh7IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b00:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b04:	e0bfff17 	ldw	r2,-4(fp)
}
81104b08:	e037883a 	mov	sp,fp
81104b0c:	dfc00117 	ldw	ra,4(sp)
81104b10:	df000017 	ldw	fp,0(sp)
81104b14:	dec00204 	addi	sp,sp,8
81104b18:	f800283a 	ret

81104b1c <bFeebCh8IrqFlagBufferEmpty>:

bool bFeebCh8IrqFlagBufferEmpty(void) {
81104b1c:	defffd04 	addi	sp,sp,-12
81104b20:	de00012e 	bgeu	sp,et,81104b28 <bFeebCh8IrqFlagBufferEmpty+0xc>
81104b24:	003b68fa 	trap	3
81104b28:	dfc00215 	stw	ra,8(sp)
81104b2c:	df000115 	stw	fp,4(sp)
81104b30:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104b34:	01400144 	movi	r5,5
81104b38:	01204834 	movhi	r4,33056
81104b3c:	21040004 	addi	r4,r4,4096
81104b40:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b44:	1080004c 	andi	r2,r2,1
}

bool bFeebCh8IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104b48:	10000326 	beq	r2,zero,81104b58 <bFeebCh8IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b4c:	00800044 	movi	r2,1
81104b50:	e0bfff15 	stw	r2,-4(fp)
81104b54:	00000106 	br	81104b5c <bFeebCh8IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b58:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b5c:	e0bfff17 	ldw	r2,-4(fp)
}
81104b60:	e037883a 	mov	sp,fp
81104b64:	dfc00117 	ldw	ra,4(sp)
81104b68:	df000017 	ldw	fp,0(sp)
81104b6c:	dec00204 	addi	sp,sp,8
81104b70:	f800283a 	ret

81104b74 <vFeebInitIrq>:

void vFeebInitIrq(alt_u8 ucCommCh) {
81104b74:	defffc04 	addi	sp,sp,-16
81104b78:	de00012e 	bgeu	sp,et,81104b80 <vFeebInitIrq+0xc>
81104b7c:	003b68fa 	trap	3
81104b80:	dfc00315 	stw	ra,12(sp)
81104b84:	df000215 	stw	fp,8(sp)
81104b88:	df000204 	addi	fp,sp,8
81104b8c:	2005883a 	mov	r2,r4
81104b90:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81104b94:	e0bfff03 	ldbu	r2,-4(fp)
81104b98:	10c00268 	cmpgeui	r3,r2,9
81104b9c:	18004f1e 	bne	r3,zero,81104cdc <vFeebInitIrq+0x168>
81104ba0:	100690ba 	slli	r3,r2,2
81104ba4:	00a04434 	movhi	r2,33040
81104ba8:	1092ee04 	addi	r2,r2,19384
81104bac:	1885883a 	add	r2,r3,r2
81104bb0:	10800017 	ldw	r2,0(r2)
81104bb4:	1000683a 	jmp	r2
81104bb8:	81104cdc 	xori	r4,r16,16691
81104bbc:	81104bdc 	xori	r4,r16,16687
81104bc0:	81104bfc 	xorhi	r4,r16,16687
81104bc4:	81104c1c 	xori	r4,r16,16688
81104bc8:	81104c3c 	xorhi	r4,r16,16688
81104bcc:	81104c5c 	xori	r4,r16,16689
81104bd0:	81104c7c 	xorhi	r4,r16,16689
81104bd4:	81104c9c 	xori	r4,r16,16690
81104bd8:	81104cbc 	xorhi	r4,r16,16690
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
81104bdc:	d0a03d04 	addi	r2,gp,-32524
81104be0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, pvHoldContext,
81104be4:	01a04434 	movhi	r6,33040
81104be8:	31912504 	addi	r6,r6,17556
81104bec:	e17ffe17 	ldw	r5,-8(fp)
81104bf0:	01000084 	movi	r4,2
81104bf4:	1126a600 	call	81126a60 <alt_irq_register>
				vFeebCh1HandleIrq);
		break;
81104bf8:	00003806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
81104bfc:	d0a03e04 	addi	r2,gp,-32520
81104c00:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, pvHoldContext,
81104c04:	01a04434 	movhi	r6,33040
81104c08:	31913504 	addi	r6,r6,17620
81104c0c:	e17ffe17 	ldw	r5,-8(fp)
81104c10:	010000c4 	movi	r4,3
81104c14:	1126a600 	call	81126a60 <alt_irq_register>
				vFeebCh2HandleIrq);
		break;
81104c18:	00003006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
81104c1c:	d0a03f04 	addi	r2,gp,-32516
81104c20:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, pvHoldContext,
81104c24:	01a04434 	movhi	r6,33040
81104c28:	31914504 	addi	r6,r6,17684
81104c2c:	e17ffe17 	ldw	r5,-8(fp)
81104c30:	01000104 	movi	r4,4
81104c34:	1126a600 	call	81126a60 <alt_irq_register>
				vFeebCh3HandleIrq);
		break;
81104c38:	00002806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
81104c3c:	d0a04004 	addi	r2,gp,-32512
81104c40:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, pvHoldContext,
81104c44:	01a04434 	movhi	r6,33040
81104c48:	31915504 	addi	r6,r6,17748
81104c4c:	e17ffe17 	ldw	r5,-8(fp)
81104c50:	01000204 	movi	r4,8
81104c54:	1126a600 	call	81126a60 <alt_irq_register>
				vFeebCh4HandleIrq);
		break;
81104c58:	00002006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
81104c5c:	d0a04104 	addi	r2,gp,-32508
81104c60:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, pvHoldContext,
81104c64:	01a04434 	movhi	r6,33040
81104c68:	31916504 	addi	r6,r6,17812
81104c6c:	e17ffe17 	ldw	r5,-8(fp)
81104c70:	010001c4 	movi	r4,7
81104c74:	1126a600 	call	81126a60 <alt_irq_register>
				vFeebCh5HandleIrq);
		break;
81104c78:	00001806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
81104c7c:	d0a04204 	addi	r2,gp,-32504
81104c80:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, pvHoldContext,
81104c84:	01a04434 	movhi	r6,33040
81104c88:	31917504 	addi	r6,r6,17876
81104c8c:	e17ffe17 	ldw	r5,-8(fp)
81104c90:	01000184 	movi	r4,6
81104c94:	1126a600 	call	81126a60 <alt_irq_register>
				vFeebCh6HandleIrq);
		break;
81104c98:	00001006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
81104c9c:	d0a04304 	addi	r2,gp,-32500
81104ca0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, pvHoldContext,
81104ca4:	01a04434 	movhi	r6,33040
81104ca8:	31918504 	addi	r6,r6,17940
81104cac:	e17ffe17 	ldw	r5,-8(fp)
81104cb0:	01000144 	movi	r4,5
81104cb4:	1126a600 	call	81126a60 <alt_irq_register>
				vFeebCh7HandleIrq);
		break;
81104cb8:	00000806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
81104cbc:	d0a04404 	addi	r2,gp,-32496
81104cc0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, pvHoldContext,
81104cc4:	01a04434 	movhi	r6,33040
81104cc8:	31919504 	addi	r6,r6,18004
81104ccc:	e17ffe17 	ldw	r5,-8(fp)
81104cd0:	01000244 	movi	r4,9
81104cd4:	1126a600 	call	81126a60 <alt_irq_register>
				vFeebCh8HandleIrq);
		break;
81104cd8:	0001883a 	nop
	}
}
81104cdc:	0001883a 	nop
81104ce0:	e037883a 	mov	sp,fp
81104ce4:	dfc00117 	ldw	ra,4(sp)
81104ce8:	df000017 	ldw	fp,0(sp)
81104cec:	dec00204 	addi	sp,sp,8
81104cf0:	f800283a 	ret

81104cf4 <bFeebSetIrqControl>:

bool bFeebSetIrqControl(TFeebChannel *pxFeebCh) {
81104cf4:	defffb04 	addi	sp,sp,-20
81104cf8:	de00012e 	bgeu	sp,et,81104d00 <bFeebSetIrqControl+0xc>
81104cfc:	003b68fa 	trap	3
81104d00:	dfc00415 	stw	ra,16(sp)
81104d04:	df000315 	stw	fp,12(sp)
81104d08:	df000304 	addi	fp,sp,12
81104d0c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104d10:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104d14:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104d18:	e0bfff17 	ldw	r2,-4(fp)
81104d1c:	10002426 	beq	r2,zero,81104db0 <bFeebSetIrqControl+0xbc>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104d20:	e0bfff17 	ldw	r2,-4(fp)
81104d24:	10800017 	ldw	r2,0(r2)
81104d28:	01400104 	movi	r5,4
81104d2c:	1009883a 	mov	r4,r2
81104d30:	110512c0 	call	8110512c <uliFeebReadReg>
81104d34:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (pxFeebCh->xIrqControl.bLeftBufferEmptyEn) {
81104d38:	e0bfff17 	ldw	r2,-4(fp)
81104d3c:	10800217 	ldw	r2,8(r2)
81104d40:	10000426 	beq	r2,zero,81104d54 <bFeebSetIrqControl+0x60>
			uliReg |= COMM_IRQ_L_BUFFER_EMPTY_EN_MSK;
81104d44:	e0bffe17 	ldw	r2,-8(fp)
81104d48:	10804014 	ori	r2,r2,256
81104d4c:	e0bffe15 	stw	r2,-8(fp)
81104d50:	00000406 	br	81104d64 <bFeebSetIrqControl+0x70>
		} else {
			uliReg &= (~COMM_IRQ_L_BUFFER_EMPTY_EN_MSK);
81104d54:	e0fffe17 	ldw	r3,-8(fp)
81104d58:	00bfbfc4 	movi	r2,-257
81104d5c:	1884703a 	and	r2,r3,r2
81104d60:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxFeebCh->xIrqControl.bRightBufferEmptyEn) {
81104d64:	e0bfff17 	ldw	r2,-4(fp)
81104d68:	10800317 	ldw	r2,12(r2)
81104d6c:	10000426 	beq	r2,zero,81104d80 <bFeebSetIrqControl+0x8c>
			uliReg |= COMM_IRQ_R_BUFFER_EMPTY_EN_MSK;
81104d70:	e0bffe17 	ldw	r2,-8(fp)
81104d74:	10800054 	ori	r2,r2,1
81104d78:	e0bffe15 	stw	r2,-8(fp)
81104d7c:	00000406 	br	81104d90 <bFeebSetIrqControl+0x9c>
		} else {
			uliReg &= (~COMM_IRQ_R_BUFFER_EMPTY_EN_MSK);
81104d80:	e0fffe17 	ldw	r3,-8(fp)
81104d84:	00bfff84 	movi	r2,-2
81104d88:	1884703a 	and	r2,r3,r2
81104d8c:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_IRQ_CTRL_REG_OFFSET,
81104d90:	e0bfff17 	ldw	r2,-4(fp)
81104d94:	10800017 	ldw	r2,0(r2)
81104d98:	e1bffe17 	ldw	r6,-8(fp)
81104d9c:	01400104 	movi	r5,4
81104da0:	1009883a 	mov	r4,r2
81104da4:	11050d80 	call	811050d8 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104da8:	00800044 	movi	r2,1
81104dac:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104db0:	e0bffd17 	ldw	r2,-12(fp)
}
81104db4:	e037883a 	mov	sp,fp
81104db8:	dfc00117 	ldw	ra,4(sp)
81104dbc:	df000017 	ldw	fp,0(sp)
81104dc0:	dec00204 	addi	sp,sp,8
81104dc4:	f800283a 	ret

81104dc8 <bFeebGetIrqControl>:

bool bFeebGetIrqControl(TFeebChannel *pxFeebCh) {
81104dc8:	defffb04 	addi	sp,sp,-20
81104dcc:	de00012e 	bgeu	sp,et,81104dd4 <bFeebGetIrqControl+0xc>
81104dd0:	003b68fa 	trap	3
81104dd4:	dfc00415 	stw	ra,16(sp)
81104dd8:	df000315 	stw	fp,12(sp)
81104ddc:	df000304 	addi	fp,sp,12
81104de0:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104de4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104de8:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104dec:	e0bfff17 	ldw	r2,-4(fp)
81104df0:	10001a26 	beq	r2,zero,81104e5c <bFeebGetIrqControl+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104df4:	e0bfff17 	ldw	r2,-4(fp)
81104df8:	10800017 	ldw	r2,0(r2)
81104dfc:	01400104 	movi	r5,4
81104e00:	1009883a 	mov	r4,r2
81104e04:	110512c0 	call	8110512c <uliFeebReadReg>
81104e08:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (uliReg & COMM_IRQ_L_BUFFER_EMPTY_EN_MSK) {
81104e0c:	e0bffe17 	ldw	r2,-8(fp)
81104e10:	1080400c 	andi	r2,r2,256
81104e14:	10000426 	beq	r2,zero,81104e28 <bFeebGetIrqControl+0x60>
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = TRUE;
81104e18:	e0bfff17 	ldw	r2,-4(fp)
81104e1c:	00c00044 	movi	r3,1
81104e20:	10c00215 	stw	r3,8(r2)
81104e24:	00000206 	br	81104e30 <bFeebGetIrqControl+0x68>
		} else {
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = FALSE;
81104e28:	e0bfff17 	ldw	r2,-4(fp)
81104e2c:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_IRQ_R_BUFFER_EMPTY_EN_MSK) {
81104e30:	e0bffe17 	ldw	r2,-8(fp)
81104e34:	1080004c 	andi	r2,r2,1
81104e38:	10000426 	beq	r2,zero,81104e4c <bFeebGetIrqControl+0x84>
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = TRUE;
81104e3c:	e0bfff17 	ldw	r2,-4(fp)
81104e40:	00c00044 	movi	r3,1
81104e44:	10c00315 	stw	r3,12(r2)
81104e48:	00000206 	br	81104e54 <bFeebGetIrqControl+0x8c>
		} else {
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = FALSE;
81104e4c:	e0bfff17 	ldw	r2,-4(fp)
81104e50:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
81104e54:	00800044 	movi	r2,1
81104e58:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104e5c:	e0bffd17 	ldw	r2,-12(fp)
}
81104e60:	e037883a 	mov	sp,fp
81104e64:	dfc00117 	ldw	ra,4(sp)
81104e68:	df000017 	ldw	fp,0(sp)
81104e6c:	dec00204 	addi	sp,sp,8
81104e70:	f800283a 	ret

81104e74 <bFeebGetIrqFlags>:

bool bFeebGetIrqFlags(TFeebChannel *pxFeebCh) {
81104e74:	defffb04 	addi	sp,sp,-20
81104e78:	de00012e 	bgeu	sp,et,81104e80 <bFeebGetIrqFlags+0xc>
81104e7c:	003b68fa 	trap	3
81104e80:	dfc00415 	stw	ra,16(sp)
81104e84:	df000315 	stw	fp,12(sp)
81104e88:	df000304 	addi	fp,sp,12
81104e8c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104e90:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104e94:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104e98:	e0bfff17 	ldw	r2,-4(fp)
81104e9c:	10001126 	beq	r2,zero,81104ee4 <bFeebGetIrqFlags+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104ea0:	e0bfff17 	ldw	r2,-4(fp)
81104ea4:	10800017 	ldw	r2,0(r2)
81104ea8:	01400144 	movi	r5,5
81104eac:	1009883a 	mov	r4,r2
81104eb0:	110512c0 	call	8110512c <uliFeebReadReg>
81104eb4:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAG_REG_OFFSET);

		if (uliReg & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104eb8:	e0bffe17 	ldw	r2,-8(fp)
81104ebc:	1080004c 	andi	r2,r2,1
81104ec0:	10000426 	beq	r2,zero,81104ed4 <bFeebGetIrqFlags+0x60>
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = TRUE;
81104ec4:	e0bfff17 	ldw	r2,-4(fp)
81104ec8:	00c00044 	movi	r3,1
81104ecc:	10c00415 	stw	r3,16(r2)
81104ed0:	00000206 	br	81104edc <bFeebGetIrqFlags+0x68>
		} else {
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = FALSE;
81104ed4:	e0bfff17 	ldw	r2,-4(fp)
81104ed8:	10000415 	stw	zero,16(r2)
		}

		bStatus = TRUE;
81104edc:	00800044 	movi	r2,1
81104ee0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ee4:	e0bffd17 	ldw	r2,-12(fp)
}
81104ee8:	e037883a 	mov	sp,fp
81104eec:	dfc00117 	ldw	ra,4(sp)
81104ef0:	df000017 	ldw	fp,0(sp)
81104ef4:	dec00204 	addi	sp,sp,8
81104ef8:	f800283a 	ret

81104efc <bFeebSetWindowing>:

bool bFeebSetWindowing(TFeebChannel *pxFeebCh) {
81104efc:	defffb04 	addi	sp,sp,-20
81104f00:	de00012e 	bgeu	sp,et,81104f08 <bFeebSetWindowing+0xc>
81104f04:	003b68fa 	trap	3
81104f08:	dfc00415 	stw	ra,16(sp)
81104f0c:	df000315 	stw	fp,12(sp)
81104f10:	df000304 	addi	fp,sp,12
81104f14:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f18:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f1c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f20:	e0bfff17 	ldw	r2,-4(fp)
81104f24:	10001926 	beq	r2,zero,81104f8c <bFeebSetWindowing+0x90>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f28:	e0bfff17 	ldw	r2,-4(fp)
81104f2c:	10800017 	ldw	r2,0(r2)
81104f30:	000b883a 	mov	r5,zero
81104f34:	1009883a 	mov	r4,r2
81104f38:	110512c0 	call	8110512c <uliFeebReadReg>
81104f3c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxFeebCh->xWindowingConfig.bMasking) {
81104f40:	e0bfff17 	ldw	r2,-4(fp)
81104f44:	10800117 	ldw	r2,4(r2)
81104f48:	10000426 	beq	r2,zero,81104f5c <bFeebSetWindowing+0x60>
			uliReg |= COMM_CTRL_MASKING_EN_MSK;
81104f4c:	e0bffe17 	ldw	r2,-8(fp)
81104f50:	10804014 	ori	r2,r2,256
81104f54:	e0bffe15 	stw	r2,-8(fp)
81104f58:	00000406 	br	81104f6c <bFeebSetWindowing+0x70>
		} else {
			uliReg &= (~COMM_CTRL_MASKING_EN_MSK);
81104f5c:	e0fffe17 	ldw	r3,-8(fp)
81104f60:	00bfbfc4 	movi	r2,-257
81104f64:	1884703a 	and	r2,r3,r2
81104f68:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81104f6c:	e0bfff17 	ldw	r2,-4(fp)
81104f70:	10800017 	ldw	r2,0(r2)
81104f74:	e1bffe17 	ldw	r6,-8(fp)
81104f78:	000b883a 	mov	r5,zero
81104f7c:	1009883a 	mov	r4,r2
81104f80:	11050d80 	call	811050d8 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104f84:	00800044 	movi	r2,1
81104f88:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104f8c:	e0bffd17 	ldw	r2,-12(fp)
}
81104f90:	e037883a 	mov	sp,fp
81104f94:	dfc00117 	ldw	ra,4(sp)
81104f98:	df000017 	ldw	fp,0(sp)
81104f9c:	dec00204 	addi	sp,sp,8
81104fa0:	f800283a 	ret

81104fa4 <bFeebGetWindowing>:

bool bFeebGetWindowing(TFeebChannel *pxFeebCh) {
81104fa4:	defffb04 	addi	sp,sp,-20
81104fa8:	de00012e 	bgeu	sp,et,81104fb0 <bFeebGetWindowing+0xc>
81104fac:	003b68fa 	trap	3
81104fb0:	dfc00415 	stw	ra,16(sp)
81104fb4:	df000315 	stw	fp,12(sp)
81104fb8:	df000304 	addi	fp,sp,12
81104fbc:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104fc0:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104fc4:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104fc8:	e0bfff17 	ldw	r2,-4(fp)
81104fcc:	10001126 	beq	r2,zero,81105014 <bFeebGetWindowing+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104fd0:	e0bfff17 	ldw	r2,-4(fp)
81104fd4:	10800017 	ldw	r2,0(r2)
81104fd8:	000b883a 	mov	r5,zero
81104fdc:	1009883a 	mov	r4,r2
81104fe0:	110512c0 	call	8110512c <uliFeebReadReg>
81104fe4:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_MASKING_EN_MSK) {
81104fe8:	e0bffe17 	ldw	r2,-8(fp)
81104fec:	1080400c 	andi	r2,r2,256
81104ff0:	10000426 	beq	r2,zero,81105004 <bFeebGetWindowing+0x60>
			pxFeebCh->xWindowingConfig.bMasking = TRUE;
81104ff4:	e0bfff17 	ldw	r2,-4(fp)
81104ff8:	00c00044 	movi	r3,1
81104ffc:	10c00115 	stw	r3,4(r2)
81105000:	00000206 	br	8110500c <bFeebGetWindowing+0x68>
		} else {
			pxFeebCh->xWindowingConfig.bMasking = FALSE;
81105004:	e0bfff17 	ldw	r2,-4(fp)
81105008:	10000115 	stw	zero,4(r2)
		}

		bStatus = TRUE;
8110500c:	00800044 	movi	r2,1
81105010:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105014:	e0bffd17 	ldw	r2,-12(fp)
}
81105018:	e037883a 	mov	sp,fp
8110501c:	dfc00117 	ldw	ra,4(sp)
81105020:	df000017 	ldw	fp,0(sp)
81105024:	dec00204 	addi	sp,sp,8
81105028:	f800283a 	ret

8110502c <bFeebGetBuffersStatus>:

bool bFeebGetBuffersStatus(TFeebChannel *pxFeebCh) {
8110502c:	defffb04 	addi	sp,sp,-20
81105030:	de00012e 	bgeu	sp,et,81105038 <bFeebGetBuffersStatus+0xc>
81105034:	003b68fa 	trap	3
81105038:	dfc00415 	stw	ra,16(sp)
8110503c:	df000315 	stw	fp,12(sp)
81105040:	df000304 	addi	fp,sp,12
81105044:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105048:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110504c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105050:	e0bfff17 	ldw	r2,-4(fp)
81105054:	10001a26 	beq	r2,zero,811050c0 <bFeebGetBuffersStatus+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105058:	e0bfff17 	ldw	r2,-4(fp)
8110505c:	10800017 	ldw	r2,0(r2)
81105060:	01400184 	movi	r5,6
81105064:	1009883a 	mov	r4,r2
81105068:	110512c0 	call	8110512c <uliFeebReadReg>
8110506c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_BUFFER_REG_OFFSET);

		if (uliReg & COMM_BUFF_STAT_L_BUFF_EPY_MSK) {
81105070:	e0bffe17 	ldw	r2,-8(fp)
81105074:	1080400c 	andi	r2,r2,256
81105078:	10000426 	beq	r2,zero,8110508c <bFeebGetBuffersStatus+0x60>
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = TRUE;
8110507c:	e0bfff17 	ldw	r2,-4(fp)
81105080:	00c00044 	movi	r3,1
81105084:	10c00515 	stw	r3,20(r2)
81105088:	00000206 	br	81105094 <bFeebGetBuffersStatus+0x68>
		} else {
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = FALSE;
8110508c:	e0bfff17 	ldw	r2,-4(fp)
81105090:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_BUFF_STAT_R_BUFF_EPY_MSK) {
81105094:	e0bffe17 	ldw	r2,-8(fp)
81105098:	1080004c 	andi	r2,r2,1
8110509c:	10000426 	beq	r2,zero,811050b0 <bFeebGetBuffersStatus+0x84>
			pxFeebCh->xBufferStatus.bRightBufferEmpty = TRUE;
811050a0:	e0bfff17 	ldw	r2,-4(fp)
811050a4:	00c00044 	movi	r3,1
811050a8:	10c00615 	stw	r3,24(r2)
811050ac:	00000206 	br	811050b8 <bFeebGetBuffersStatus+0x8c>
		} else {
			pxFeebCh->xBufferStatus.bRightBufferEmpty = FALSE;
811050b0:	e0bfff17 	ldw	r2,-4(fp)
811050b4:	10000615 	stw	zero,24(r2)
		}

		bStatus = TRUE;
811050b8:	00800044 	movi	r2,1
811050bc:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811050c0:	e0bffd17 	ldw	r2,-12(fp)
}
811050c4:	e037883a 	mov	sp,fp
811050c8:	dfc00117 	ldw	ra,4(sp)
811050cc:	df000017 	ldw	fp,0(sp)
811050d0:	dec00204 	addi	sp,sp,8
811050d4:	f800283a 	ret

811050d8 <vFeebWriteReg>:

//! [public functions]

//! [private functions]
static void vFeebWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
811050d8:	defffc04 	addi	sp,sp,-16
811050dc:	de00012e 	bgeu	sp,et,811050e4 <vFeebWriteReg+0xc>
811050e0:	003b68fa 	trap	3
811050e4:	df000315 	stw	fp,12(sp)
811050e8:	df000304 	addi	fp,sp,12
811050ec:	e13ffd15 	stw	r4,-12(fp)
811050f0:	e17ffe15 	stw	r5,-8(fp)
811050f4:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
811050f8:	e0bffe17 	ldw	r2,-8(fp)
811050fc:	1085883a 	add	r2,r2,r2
81105100:	1085883a 	add	r2,r2,r2
81105104:	1007883a 	mov	r3,r2
81105108:	e0bffd17 	ldw	r2,-12(fp)
8110510c:	10c5883a 	add	r2,r2,r3
81105110:	e0ffff17 	ldw	r3,-4(fp)
81105114:	10c00015 	stw	r3,0(r2)
}
81105118:	0001883a 	nop
8110511c:	e037883a 	mov	sp,fp
81105120:	df000017 	ldw	fp,0(sp)
81105124:	dec00104 	addi	sp,sp,4
81105128:	f800283a 	ret

8110512c <uliFeebReadReg>:

static alt_u32 uliFeebReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110512c:	defffc04 	addi	sp,sp,-16
81105130:	de00012e 	bgeu	sp,et,81105138 <uliFeebReadReg+0xc>
81105134:	003b68fa 	trap	3
81105138:	df000315 	stw	fp,12(sp)
8110513c:	df000304 	addi	fp,sp,12
81105140:	e13ffe15 	stw	r4,-8(fp)
81105144:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81105148:	e0bfff17 	ldw	r2,-4(fp)
8110514c:	1085883a 	add	r2,r2,r2
81105150:	1085883a 	add	r2,r2,r2
81105154:	1007883a 	mov	r3,r2
81105158:	e0bffe17 	ldw	r2,-8(fp)
8110515c:	10c5883a 	add	r2,r2,r3
81105160:	10800017 	ldw	r2,0(r2)
81105164:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105168:	e0bffd17 	ldw	r2,-12(fp)
}
8110516c:	e037883a 	mov	sp,fp
81105170:	df000017 	ldw	fp,0(sp)
81105174:	dec00104 	addi	sp,sp,4
81105178:	f800283a 	ret

8110517c <bSpwcSetLink>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSpwcSetLink(TSpwcChannel *pxSpwcCh) {
8110517c:	defffb04 	addi	sp,sp,-20
81105180:	de00012e 	bgeu	sp,et,81105188 <bSpwcSetLink+0xc>
81105184:	003b68fa 	trap	3
81105188:	dfc00415 	stw	ra,16(sp)
8110518c:	df000315 	stw	fp,12(sp)
81105190:	df000304 	addi	fp,sp,12
81105194:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105198:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110519c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811051a0:	e0bfff17 	ldw	r2,-4(fp)
811051a4:	10002f26 	beq	r2,zero,81105264 <bSpwcSetLink+0xe8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811051a8:	e0bfff17 	ldw	r2,-4(fp)
811051ac:	10800017 	ldw	r2,0(r2)
811051b0:	000b883a 	mov	r5,zero
811051b4:	1009883a 	mov	r4,r2
811051b8:	11056dc0 	call	811056dc <uliSpwcReadReg>
811051bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxSpwcCh->xLinkConfig.bAutostart) {
811051c0:	e0bfff17 	ldw	r2,-4(fp)
811051c4:	10800117 	ldw	r2,4(r2)
811051c8:	10000426 	beq	r2,zero,811051dc <bSpwcSetLink+0x60>
			uliReg |= COMM_CTRL_LINK_AUTOSTART_MSK;
811051cc:	e0bffe17 	ldw	r2,-8(fp)
811051d0:	10800114 	ori	r2,r2,4
811051d4:	e0bffe15 	stw	r2,-8(fp)
811051d8:	00000406 	br	811051ec <bSpwcSetLink+0x70>
		} else {
			uliReg &= (~COMM_CTRL_LINK_AUTOSTART_MSK);
811051dc:	e0fffe17 	ldw	r3,-8(fp)
811051e0:	00bffec4 	movi	r2,-5
811051e4:	1884703a 	and	r2,r3,r2
811051e8:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bStart) {
811051ec:	e0bfff17 	ldw	r2,-4(fp)
811051f0:	10800217 	ldw	r2,8(r2)
811051f4:	10000426 	beq	r2,zero,81105208 <bSpwcSetLink+0x8c>
			uliReg |= COMM_CTRL_LINK_START_MSK;
811051f8:	e0bffe17 	ldw	r2,-8(fp)
811051fc:	10800094 	ori	r2,r2,2
81105200:	e0bffe15 	stw	r2,-8(fp)
81105204:	00000406 	br	81105218 <bSpwcSetLink+0x9c>
		} else {
			uliReg &= (~COMM_CTRL_LINK_START_MSK);
81105208:	e0fffe17 	ldw	r3,-8(fp)
8110520c:	00bfff44 	movi	r2,-3
81105210:	1884703a 	and	r2,r3,r2
81105214:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bDisconnect) {
81105218:	e0bfff17 	ldw	r2,-4(fp)
8110521c:	10800317 	ldw	r2,12(r2)
81105220:	10000426 	beq	r2,zero,81105234 <bSpwcSetLink+0xb8>
			uliReg |= COMM_CTRL_LINK_DISCONNECT_MSK;
81105224:	e0bffe17 	ldw	r2,-8(fp)
81105228:	10800054 	ori	r2,r2,1
8110522c:	e0bffe15 	stw	r2,-8(fp)
81105230:	00000406 	br	81105244 <bSpwcSetLink+0xc8>
		} else {
			uliReg &= (~COMM_CTRL_LINK_DISCONNECT_MSK);
81105234:	e0fffe17 	ldw	r3,-8(fp)
81105238:	00bfff84 	movi	r2,-2
8110523c:	1884703a 	and	r2,r3,r2
81105240:	e0bffe15 	stw	r2,-8(fp)
		}

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81105244:	e0bfff17 	ldw	r2,-4(fp)
81105248:	10800017 	ldw	r2,0(r2)
8110524c:	e1bffe17 	ldw	r6,-8(fp)
81105250:	000b883a 	mov	r5,zero
81105254:	1009883a 	mov	r4,r2
81105258:	11056880 	call	81105688 <vSpwcWriteReg>
				uliReg);
		bStatus = TRUE;
8110525c:	00800044 	movi	r2,1
81105260:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105264:	e0bffd17 	ldw	r2,-12(fp)
}
81105268:	e037883a 	mov	sp,fp
8110526c:	dfc00117 	ldw	ra,4(sp)
81105270:	df000017 	ldw	fp,0(sp)
81105274:	dec00204 	addi	sp,sp,8
81105278:	f800283a 	ret

8110527c <bSpwcGetLink>:

bool bSpwcGetLink(TSpwcChannel *pxSpwcCh) {
8110527c:	defffb04 	addi	sp,sp,-20
81105280:	de00012e 	bgeu	sp,et,81105288 <bSpwcGetLink+0xc>
81105284:	003b68fa 	trap	3
81105288:	dfc00415 	stw	ra,16(sp)
8110528c:	df000315 	stw	fp,12(sp)
81105290:	df000304 	addi	fp,sp,12
81105294:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105298:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110529c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811052a0:	e0bfff17 	ldw	r2,-4(fp)
811052a4:	10002326 	beq	r2,zero,81105334 <bSpwcGetLink+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811052a8:	e0bfff17 	ldw	r2,-4(fp)
811052ac:	10800017 	ldw	r2,0(r2)
811052b0:	000b883a 	mov	r5,zero
811052b4:	1009883a 	mov	r4,r2
811052b8:	11056dc0 	call	811056dc <uliSpwcReadReg>
811052bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_LINK_AUTOSTART_MSK) {
811052c0:	e0bffe17 	ldw	r2,-8(fp)
811052c4:	1080010c 	andi	r2,r2,4
811052c8:	10000426 	beq	r2,zero,811052dc <bSpwcGetLink+0x60>
			pxSpwcCh->xLinkConfig.bAutostart = TRUE;
811052cc:	e0bfff17 	ldw	r2,-4(fp)
811052d0:	00c00044 	movi	r3,1
811052d4:	10c00115 	stw	r3,4(r2)
811052d8:	00000206 	br	811052e4 <bSpwcGetLink+0x68>
		} else {
			pxSpwcCh->xLinkConfig.bAutostart = FALSE;
811052dc:	e0bfff17 	ldw	r2,-4(fp)
811052e0:	10000115 	stw	zero,4(r2)
		}
		if (uliReg & COMM_CTRL_LINK_START_MSK) {
811052e4:	e0bffe17 	ldw	r2,-8(fp)
811052e8:	1080008c 	andi	r2,r2,2
811052ec:	10000426 	beq	r2,zero,81105300 <bSpwcGetLink+0x84>
			pxSpwcCh->xLinkConfig.bStart = TRUE;
811052f0:	e0bfff17 	ldw	r2,-4(fp)
811052f4:	00c00044 	movi	r3,1
811052f8:	10c00215 	stw	r3,8(r2)
811052fc:	00000206 	br	81105308 <bSpwcGetLink+0x8c>
		} else {
			pxSpwcCh->xLinkConfig.bStart = FALSE;
81105300:	e0bfff17 	ldw	r2,-4(fp)
81105304:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_CTRL_LINK_DISCONNECT_MSK) {
81105308:	e0bffe17 	ldw	r2,-8(fp)
8110530c:	1080004c 	andi	r2,r2,1
81105310:	10000426 	beq	r2,zero,81105324 <bSpwcGetLink+0xa8>
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
81105314:	e0bfff17 	ldw	r2,-4(fp)
81105318:	00c00044 	movi	r3,1
8110531c:	10c00315 	stw	r3,12(r2)
81105320:	00000206 	br	8110532c <bSpwcGetLink+0xb0>
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
81105324:	e0bfff17 	ldw	r2,-4(fp)
81105328:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
8110532c:	00800044 	movi	r2,1
81105330:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105334:	e0bffd17 	ldw	r2,-12(fp)
}
81105338:	e037883a 	mov	sp,fp
8110533c:	dfc00117 	ldw	ra,4(sp)
81105340:	df000017 	ldw	fp,0(sp)
81105344:	dec00204 	addi	sp,sp,8
81105348:	f800283a 	ret

8110534c <bSpwcGetLinkError>:

bool bSpwcGetLinkError(TSpwcChannel *pxSpwcCh) {
8110534c:	defffb04 	addi	sp,sp,-20
81105350:	de00012e 	bgeu	sp,et,81105358 <bSpwcGetLinkError+0xc>
81105354:	003b68fa 	trap	3
81105358:	dfc00415 	stw	ra,16(sp)
8110535c:	df000315 	stw	fp,12(sp)
81105360:	df000304 	addi	fp,sp,12
81105364:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105368:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110536c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105370:	e0bfff17 	ldw	r2,-4(fp)
81105374:	10002c26 	beq	r2,zero,81105428 <bSpwcGetLinkError+0xdc>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105378:	e0bfff17 	ldw	r2,-4(fp)
8110537c:	10800017 	ldw	r2,0(r2)
81105380:	01400044 	movi	r5,1
81105384:	1009883a 	mov	r4,r2
81105388:	11056dc0 	call	811056dc <uliSpwcReadReg>
8110538c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_DISC_ERR_MSK) {
81105390:	e0bffe17 	ldw	r2,-8(fp)
81105394:	1082000c 	andi	r2,r2,2048
81105398:	10000426 	beq	r2,zero,811053ac <bSpwcGetLinkError+0x60>
			pxSpwcCh->xLinkError.bDisconnect = TRUE;
8110539c:	e0bfff17 	ldw	r2,-4(fp)
811053a0:	00c00044 	movi	r3,1
811053a4:	10c00415 	stw	r3,16(r2)
811053a8:	00000206 	br	811053b4 <bSpwcGetLinkError+0x68>
		} else {
			pxSpwcCh->xLinkError.bDisconnect = FALSE;
811053ac:	e0bfff17 	ldw	r2,-4(fp)
811053b0:	10000415 	stw	zero,16(r2)
		}
		if (uliReg & COMM_STAT_LINK_PAR_ERR_MSK) {
811053b4:	e0bffe17 	ldw	r2,-8(fp)
811053b8:	1081000c 	andi	r2,r2,1024
811053bc:	10000426 	beq	r2,zero,811053d0 <bSpwcGetLinkError+0x84>
			pxSpwcCh->xLinkError.bParity = TRUE;
811053c0:	e0bfff17 	ldw	r2,-4(fp)
811053c4:	00c00044 	movi	r3,1
811053c8:	10c00515 	stw	r3,20(r2)
811053cc:	00000206 	br	811053d8 <bSpwcGetLinkError+0x8c>
		} else {
			pxSpwcCh->xLinkError.bParity = FALSE;
811053d0:	e0bfff17 	ldw	r2,-4(fp)
811053d4:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_STAT_LINK_ESC_ERR_MSK) {
811053d8:	e0bffe17 	ldw	r2,-8(fp)
811053dc:	1080800c 	andi	r2,r2,512
811053e0:	10000426 	beq	r2,zero,811053f4 <bSpwcGetLinkError+0xa8>
			pxSpwcCh->xLinkError.bEscape = TRUE;
811053e4:	e0bfff17 	ldw	r2,-4(fp)
811053e8:	00c00044 	movi	r3,1
811053ec:	10c00615 	stw	r3,24(r2)
811053f0:	00000206 	br	811053fc <bSpwcGetLinkError+0xb0>
		} else {
			pxSpwcCh->xLinkError.bEscape = FALSE;
811053f4:	e0bfff17 	ldw	r2,-4(fp)
811053f8:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_STAT_LINK_CRED_ERR_MSK) {
811053fc:	e0bffe17 	ldw	r2,-8(fp)
81105400:	1080400c 	andi	r2,r2,256
81105404:	10000426 	beq	r2,zero,81105418 <bSpwcGetLinkError+0xcc>
			pxSpwcCh->xLinkError.bCredit = TRUE;
81105408:	e0bfff17 	ldw	r2,-4(fp)
8110540c:	00c00044 	movi	r3,1
81105410:	10c00715 	stw	r3,28(r2)
81105414:	00000206 	br	81105420 <bSpwcGetLinkError+0xd4>
		} else {
			pxSpwcCh->xLinkError.bCredit = FALSE;
81105418:	e0bfff17 	ldw	r2,-4(fp)
8110541c:	10000715 	stw	zero,28(r2)
		}

		bStatus = TRUE;
81105420:	00800044 	movi	r2,1
81105424:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105428:	e0bffd17 	ldw	r2,-12(fp)
}
8110542c:	e037883a 	mov	sp,fp
81105430:	dfc00117 	ldw	ra,4(sp)
81105434:	df000017 	ldw	fp,0(sp)
81105438:	dec00204 	addi	sp,sp,8
8110543c:	f800283a 	ret

81105440 <bSpwcGetLinkStatus>:

bool bSpwcGetLinkStatus(TSpwcChannel *pxSpwcCh) {
81105440:	defffb04 	addi	sp,sp,-20
81105444:	de00012e 	bgeu	sp,et,8110544c <bSpwcGetLinkStatus+0xc>
81105448:	003b68fa 	trap	3
8110544c:	dfc00415 	stw	ra,16(sp)
81105450:	df000315 	stw	fp,12(sp)
81105454:	df000304 	addi	fp,sp,12
81105458:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
8110545c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105460:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105464:	e0bfff17 	ldw	r2,-4(fp)
81105468:	10002326 	beq	r2,zero,811054f8 <bSpwcGetLinkStatus+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
8110546c:	e0bfff17 	ldw	r2,-4(fp)
81105470:	10800017 	ldw	r2,0(r2)
81105474:	01400044 	movi	r5,1
81105478:	1009883a 	mov	r4,r2
8110547c:	11056dc0 	call	811056dc <uliSpwcReadReg>
81105480:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_STARTED_MSK) {
81105484:	e0bffe17 	ldw	r2,-8(fp)
81105488:	1080010c 	andi	r2,r2,4
8110548c:	10000426 	beq	r2,zero,811054a0 <bSpwcGetLinkStatus+0x60>
			pxSpwcCh->xLinkStatus.bStarted = TRUE;
81105490:	e0bfff17 	ldw	r2,-4(fp)
81105494:	00c00044 	movi	r3,1
81105498:	10c00815 	stw	r3,32(r2)
8110549c:	00000206 	br	811054a8 <bSpwcGetLinkStatus+0x68>
		} else {
			pxSpwcCh->xLinkStatus.bStarted = FALSE;
811054a0:	e0bfff17 	ldw	r2,-4(fp)
811054a4:	10000815 	stw	zero,32(r2)
		}
		if (uliReg & COMM_STAT_LINK_CONNECTING_MSK) {
811054a8:	e0bffe17 	ldw	r2,-8(fp)
811054ac:	1080008c 	andi	r2,r2,2
811054b0:	10000426 	beq	r2,zero,811054c4 <bSpwcGetLinkStatus+0x84>
			pxSpwcCh->xLinkStatus.bConnecting = TRUE;
811054b4:	e0bfff17 	ldw	r2,-4(fp)
811054b8:	00c00044 	movi	r3,1
811054bc:	10c00915 	stw	r3,36(r2)
811054c0:	00000206 	br	811054cc <bSpwcGetLinkStatus+0x8c>
		} else {
			pxSpwcCh->xLinkStatus.bConnecting = FALSE;
811054c4:	e0bfff17 	ldw	r2,-4(fp)
811054c8:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_STAT_LINK_RUNNING_MSK) {
811054cc:	e0bffe17 	ldw	r2,-8(fp)
811054d0:	1080004c 	andi	r2,r2,1
811054d4:	10000426 	beq	r2,zero,811054e8 <bSpwcGetLinkStatus+0xa8>
			pxSpwcCh->xLinkStatus.bRunning = TRUE;
811054d8:	e0bfff17 	ldw	r2,-4(fp)
811054dc:	00c00044 	movi	r3,1
811054e0:	10c00a15 	stw	r3,40(r2)
811054e4:	00000206 	br	811054f0 <bSpwcGetLinkStatus+0xb0>
		} else {
			pxSpwcCh->xLinkStatus.bRunning = FALSE;
811054e8:	e0bfff17 	ldw	r2,-4(fp)
811054ec:	10000a15 	stw	zero,40(r2)
		}

		bStatus = TRUE;
811054f0:	00800044 	movi	r2,1
811054f4:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811054f8:	e0bffd17 	ldw	r2,-12(fp)
}
811054fc:	e037883a 	mov	sp,fp
81105500:	dfc00117 	ldw	ra,4(sp)
81105504:	df000017 	ldw	fp,0(sp)
81105508:	dec00204 	addi	sp,sp,8
8110550c:	f800283a 	ret

81105510 <bSpwcInitCh>:

bool bSpwcInitCh(TSpwcChannel *pxSpwcCh, alt_u8 ucCommCh) {
81105510:	defffb04 	addi	sp,sp,-20
81105514:	de00012e 	bgeu	sp,et,8110551c <bSpwcInitCh+0xc>
81105518:	003b68fa 	trap	3
8110551c:	dfc00415 	stw	ra,16(sp)
81105520:	df000315 	stw	fp,12(sp)
81105524:	df000304 	addi	fp,sp,12
81105528:	e13ffe15 	stw	r4,-8(fp)
8110552c:	2805883a 	mov	r2,r5
81105530:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
81105534:	e03ffd15 	stw	zero,-12(fp)

	if (pxSpwcCh != NULL) {
81105538:	e0bffe17 	ldw	r2,-8(fp)
8110553c:	10004c26 	beq	r2,zero,81105670 <bSpwcInitCh+0x160>
		bStatus = TRUE;
81105540:	00800044 	movi	r2,1
81105544:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
81105548:	e0bfff03 	ldbu	r2,-4(fp)
8110554c:	10c00268 	cmpgeui	r3,r2,9
81105550:	1800371e 	bne	r3,zero,81105630 <bSpwcInitCh+0x120>
81105554:	100690ba 	slli	r3,r2,2
81105558:	00a04434 	movhi	r2,33040
8110555c:	10955b04 	addi	r2,r2,21868
81105560:	1885883a 	add	r2,r3,r2
81105564:	10800017 	ldw	r2,0(r2)
81105568:	1000683a 	jmp	r2
8110556c:	81105630 	cmpltui	r4,r16,16728
81105570:	81105590 	cmplti	r4,r16,16726
81105574:	811055a4 	muli	r4,r16,16726
81105578:	811055b8 	rdprs	r4,r16,16726
8110557c:	811055cc 	andi	r4,r16,16727
81105580:	811055e0 	cmpeqi	r4,r16,16727
81105584:	811055f4 	orhi	r4,r16,16727
81105588:	81105608 	cmpgei	r4,r16,16728
8110558c:	8110561c 	xori	r4,r16,16728
		case eCommSpwCh1:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81105590:	e0fffe17 	ldw	r3,-8(fp)
81105594:	00a04834 	movhi	r2,33056
81105598:	108b0004 	addi	r2,r2,11264
8110559c:	18800015 	stw	r2,0(r3)
			break;
811055a0:	00002506 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh2:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
811055a4:	e0fffe17 	ldw	r3,-8(fp)
811055a8:	00a04834 	movhi	r2,33056
811055ac:	108a0004 	addi	r2,r2,10240
811055b0:	18800015 	stw	r2,0(r3)
			break;
811055b4:	00002006 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh3:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
811055b8:	e0fffe17 	ldw	r3,-8(fp)
811055bc:	00a04834 	movhi	r2,33056
811055c0:	10890004 	addi	r2,r2,9216
811055c4:	18800015 	stw	r2,0(r3)
			break;
811055c8:	00001b06 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh4:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
811055cc:	e0fffe17 	ldw	r3,-8(fp)
811055d0:	00a04834 	movhi	r2,33056
811055d4:	10880004 	addi	r2,r2,8192
811055d8:	18800015 	stw	r2,0(r3)
			break;
811055dc:	00001606 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh5:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
811055e0:	e0fffe17 	ldw	r3,-8(fp)
811055e4:	00a04834 	movhi	r2,33056
811055e8:	10870004 	addi	r2,r2,7168
811055ec:	18800015 	stw	r2,0(r3)
			break;
811055f0:	00001106 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh6:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
811055f4:	e0fffe17 	ldw	r3,-8(fp)
811055f8:	00a04834 	movhi	r2,33056
811055fc:	10860004 	addi	r2,r2,6144
81105600:	18800015 	stw	r2,0(r3)
			break;
81105604:	00000c06 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh7:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81105608:	e0fffe17 	ldw	r3,-8(fp)
8110560c:	00a04834 	movhi	r2,33056
81105610:	10850004 	addi	r2,r2,5120
81105614:	18800015 	stw	r2,0(r3)
			break;
81105618:	00000706 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh8:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
8110561c:	e0fffe17 	ldw	r3,-8(fp)
81105620:	00a04834 	movhi	r2,33056
81105624:	10840004 	addi	r2,r2,4096
81105628:	18800015 	stw	r2,0(r3)
			break;
8110562c:	00000206 	br	81105638 <bSpwcInitCh+0x128>
		default:
			bStatus = FALSE;
81105630:	e03ffd15 	stw	zero,-12(fp)
			break;
81105634:	0001883a 	nop
		}

		if (bStatus) {
81105638:	e0bffd17 	ldw	r2,-12(fp)
8110563c:	10000c26 	beq	r2,zero,81105670 <bSpwcInitCh+0x160>
//			if (!bFeebGetWindowing(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
			if (!bSpwcGetLink(pxSpwcCh)) {
81105640:	e13ffe17 	ldw	r4,-8(fp)
81105644:	110527c0 	call	8110527c <bSpwcGetLink>
81105648:	1000011e 	bne	r2,zero,81105650 <bSpwcInitCh+0x140>
				bStatus = FALSE;
8110564c:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkError(pxSpwcCh)) {
81105650:	e13ffe17 	ldw	r4,-8(fp)
81105654:	110534c0 	call	8110534c <bSpwcGetLinkError>
81105658:	1000011e 	bne	r2,zero,81105660 <bSpwcInitCh+0x150>
				bStatus = FALSE;
8110565c:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkStatus(pxSpwcCh)) {
81105660:	e13ffe17 	ldw	r4,-8(fp)
81105664:	11054400 	call	81105440 <bSpwcGetLinkStatus>
81105668:	1000011e 	bne	r2,zero,81105670 <bSpwcInitCh+0x160>
				bStatus = FALSE;
8110566c:	e03ffd15 	stw	zero,-12(fp)
//			if (!bFeebGetBuffersStatus(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
		}
	}
	return bStatus;
81105670:	e0bffd17 	ldw	r2,-12(fp)
}
81105674:	e037883a 	mov	sp,fp
81105678:	dfc00117 	ldw	ra,4(sp)
8110567c:	df000017 	ldw	fp,0(sp)
81105680:	dec00204 	addi	sp,sp,8
81105684:	f800283a 	ret

81105688 <vSpwcWriteReg>:
//! [public functions]

//! [private functions]
static void vSpwcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81105688:	defffc04 	addi	sp,sp,-16
8110568c:	de00012e 	bgeu	sp,et,81105694 <vSpwcWriteReg+0xc>
81105690:	003b68fa 	trap	3
81105694:	df000315 	stw	fp,12(sp)
81105698:	df000304 	addi	fp,sp,12
8110569c:	e13ffd15 	stw	r4,-12(fp)
811056a0:	e17ffe15 	stw	r5,-8(fp)
811056a4:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
811056a8:	e0bffe17 	ldw	r2,-8(fp)
811056ac:	1085883a 	add	r2,r2,r2
811056b0:	1085883a 	add	r2,r2,r2
811056b4:	1007883a 	mov	r3,r2
811056b8:	e0bffd17 	ldw	r2,-12(fp)
811056bc:	10c5883a 	add	r2,r2,r3
811056c0:	e0ffff17 	ldw	r3,-4(fp)
811056c4:	10c00015 	stw	r3,0(r2)
}
811056c8:	0001883a 	nop
811056cc:	e037883a 	mov	sp,fp
811056d0:	df000017 	ldw	fp,0(sp)
811056d4:	dec00104 	addi	sp,sp,4
811056d8:	f800283a 	ret

811056dc <uliSpwcReadReg>:

static alt_u32 uliSpwcReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
811056dc:	defffc04 	addi	sp,sp,-16
811056e0:	de00012e 	bgeu	sp,et,811056e8 <uliSpwcReadReg+0xc>
811056e4:	003b68fa 	trap	3
811056e8:	df000315 	stw	fp,12(sp)
811056ec:	df000304 	addi	fp,sp,12
811056f0:	e13ffe15 	stw	r4,-8(fp)
811056f4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811056f8:	e0bfff17 	ldw	r2,-4(fp)
811056fc:	1085883a 	add	r2,r2,r2
81105700:	1085883a 	add	r2,r2,r2
81105704:	1007883a 	mov	r3,r2
81105708:	e0bffe17 	ldw	r2,-8(fp)
8110570c:	10c5883a 	add	r2,r2,r3
81105710:	10800017 	ldw	r2,0(r2)
81105714:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105718:	e0bffd17 	ldw	r2,-12(fp)
}
8110571c:	e037883a 	mov	sp,fp
81105720:	df000017 	ldw	fp,0(sp)
81105724:	dec00104 	addi	sp,sp,4
81105728:	f800283a 	ret

8110572c <bEnableIsoDrivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bEnableIsoDrivers(void)
{
8110572c:	defffe04 	addi	sp,sp,-8
81105730:	de00012e 	bgeu	sp,et,81105738 <bEnableIsoDrivers+0xc>
81105734:	003b68fa 	trap	3
81105738:	dfc00115 	stw	ra,4(sp)
8110573c:	df000015 	stw	fp,0(sp)
81105740:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_EN_ISO_DRIVERS_MSK);
81105744:	01400204 	movi	r5,8
81105748:	01000044 	movi	r4,1
8110574c:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
81105750:	00800044 	movi	r2,1
}
81105754:	e037883a 	mov	sp,fp
81105758:	dfc00117 	ldw	ra,4(sp)
8110575c:	df000017 	ldw	fp,0(sp)
81105760:	dec00204 	addi	sp,sp,8
81105764:	f800283a 	ret

81105768 <bDisableIsoDrivers>:

bool bDisableIsoDrivers(void)
{
81105768:	defffe04 	addi	sp,sp,-8
8110576c:	de00012e 	bgeu	sp,et,81105774 <bDisableIsoDrivers+0xc>
81105770:	003b68fa 	trap	3
81105774:	dfc00115 	stw	ra,4(sp)
81105778:	df000015 	stw	fp,0(sp)
8110577c:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_EN_ISO_DRIVERS_MSK);
81105780:	01400204 	movi	r5,8
81105784:	0009883a 	mov	r4,zero
81105788:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
8110578c:	00800044 	movi	r2,1
}
81105790:	e037883a 	mov	sp,fp
81105794:	dfc00117 	ldw	ra,4(sp)
81105798:	df000017 	ldw	fp,0(sp)
8110579c:	dec00204 	addi	sp,sp,8
811057a0:	f800283a 	ret

811057a4 <bEnableLvdsBoard>:

bool bEnableLvdsBoard(void)
{
811057a4:	defffe04 	addi	sp,sp,-8
811057a8:	de00012e 	bgeu	sp,et,811057b0 <bEnableLvdsBoard+0xc>
811057ac:	003b68fa 	trap	3
811057b0:	dfc00115 	stw	ra,4(sp)
811057b4:	df000015 	stw	fp,0(sp)
811057b8:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PWDN_MSK);
811057bc:	01400104 	movi	r5,4
811057c0:	01000044 	movi	r4,1
811057c4:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
811057c8:	00800044 	movi	r2,1
}
811057cc:	e037883a 	mov	sp,fp
811057d0:	dfc00117 	ldw	ra,4(sp)
811057d4:	df000017 	ldw	fp,0(sp)
811057d8:	dec00204 	addi	sp,sp,8
811057dc:	f800283a 	ret

811057e0 <bDisableLvdsBoard>:

bool bDisableLvdsBoard(void)
{
811057e0:	defffe04 	addi	sp,sp,-8
811057e4:	de00012e 	bgeu	sp,et,811057ec <bDisableLvdsBoard+0xc>
811057e8:	003b68fa 	trap	3
811057ec:	dfc00115 	stw	ra,4(sp)
811057f0:	df000015 	stw	fp,0(sp)
811057f4:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PWDN_MSK);
811057f8:	01400104 	movi	r5,4
811057fc:	0009883a 	mov	r4,zero
81105800:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
81105804:	00800044 	movi	r2,1
}
81105808:	e037883a 	mov	sp,fp
8110580c:	dfc00117 	ldw	ra,4(sp)
81105810:	df000017 	ldw	fp,0(sp)
81105814:	dec00204 	addi	sp,sp,8
81105818:	f800283a 	ret

8110581c <bSetPreEmphasys>:

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
8110581c:	defffd04 	addi	sp,sp,-12
81105820:	de00012e 	bgeu	sp,et,81105828 <bSetPreEmphasys+0xc>
81105824:	003b68fa 	trap	3
81105828:	dfc00215 	stw	ra,8(sp)
8110582c:	df000115 	stw	fp,4(sp)
81105830:	df000104 	addi	fp,sp,4
81105834:	2005883a 	mov	r2,r4
81105838:	e0bfff05 	stb	r2,-4(fp)
  switch (ucPemLevel) {
8110583c:	e0bfff03 	ldbu	r2,-4(fp)
81105840:	10c00060 	cmpeqi	r3,r2,1
81105844:	18000d1e 	bne	r3,zero,8110587c <bSetPreEmphasys+0x60>
81105848:	10c00088 	cmpgei	r3,r2,2
8110584c:	1800021e 	bne	r3,zero,81105858 <bSetPreEmphasys+0x3c>
81105850:	10000626 	beq	r2,zero,8110586c <bSetPreEmphasys+0x50>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105854:	00001b06 	br	811058c4 <bSetPreEmphasys+0xa8>
  return  TRUE;
}

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
81105858:	10c000a0 	cmpeqi	r3,r2,2
8110585c:	18000e1e 	bne	r3,zero,81105898 <bSetPreEmphasys+0x7c>
81105860:	108000e0 	cmpeqi	r2,r2,3
81105864:	1000131e 	bne	r2,zero,811058b4 <bSetPreEmphasys+0x98>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105868:	00001606 	br	811058c4 <bSetPreEmphasys+0xa8>

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
    case LVDS_PEM_OFF:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
8110586c:	014000c4 	movi	r5,3
81105870:	0009883a 	mov	r4,zero
81105874:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
81105878:	00001206 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_LO:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK);
8110587c:	01400084 	movi	r5,2
81105880:	0009883a 	mov	r4,zero
81105884:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM0_MSK);
81105888:	01400044 	movi	r5,1
8110588c:	01000044 	movi	r4,1
81105890:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
81105894:	00000b06 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_MID:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM0_MSK);
81105898:	01400044 	movi	r5,1
8110589c:	0009883a 	mov	r4,zero
811058a0:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM1_MSK);
811058a4:	01400084 	movi	r5,2
811058a8:	01000044 	movi	r4,1
811058ac:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
811058b0:	00000406 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
811058b4:	014000c4 	movi	r5,3
811058b8:	01000044 	movi	r4,1
811058bc:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
811058c0:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
811058c4:	00800044 	movi	r2,1
}
811058c8:	e037883a 	mov	sp,fp
811058cc:	dfc00117 	ldw	ra,4(sp)
811058d0:	df000017 	ldw	fp,0(sp)
811058d4:	dec00204 	addi	sp,sp,8
811058d8:	f800283a 	ret

811058dc <bCtrlIoLvdsDrive>:
 * @param [in] ulliMask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
static bool bCtrlIoLvdsDrive(bool bOnOff, alt_u8 ucMask)
{
811058dc:	defffd04 	addi	sp,sp,-12
811058e0:	de00012e 	bgeu	sp,et,811058e8 <bCtrlIoLvdsDrive+0xc>
811058e4:	003b68fa 	trap	3
811058e8:	df000215 	stw	fp,8(sp)
811058ec:	df000204 	addi	fp,sp,8
811058f0:	e13ffe15 	stw	r4,-8(fp)
811058f4:	2805883a 	mov	r2,r5
811058f8:	e0bfff05 	stb	r2,-4(fp)
  if (bOnOff == LVDS_IO_OFF) {
811058fc:	e0bffe17 	ldw	r2,-8(fp)
81105900:	1000071e 	bne	r2,zero,81105920 <bCtrlIoLvdsDrive+0x44>
	 ucIoValue &= (~ucMask);
81105904:	e0bfff03 	ldbu	r2,-4(fp)
81105908:	0084303a 	nor	r2,zero,r2
8110590c:	1007883a 	mov	r3,r2
81105910:	d0a00103 	ldbu	r2,-32764(gp)
81105914:	1884703a 	and	r2,r3,r2
81105918:	d0a00105 	stb	r2,-32764(gp)
8110591c:	00000406 	br	81105930 <bCtrlIoLvdsDrive+0x54>
  }
  else {
	 ucIoValue |= ucMask;
81105920:	d0e00103 	ldbu	r3,-32764(gp)
81105924:	e0bfff03 	ldbu	r2,-4(fp)
81105928:	1884b03a 	or	r2,r3,r2
8110592c:	d0a00105 	stb	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LVDS_CTRL_IO_LVDS_ADDR_BASE, ucIoValue);
81105930:	d0a00103 	ldbu	r2,-32764(gp)
81105934:	10c03fcc 	andi	r3,r2,255
81105938:	00a00034 	movhi	r2,32768
8110593c:	10822804 	addi	r2,r2,2208
81105940:	10c00035 	stwio	r3,0(r2)
  return TRUE;
81105944:	00800044 	movi	r2,1
}
81105948:	e037883a 	mov	sp,fp
8110594c:	df000017 	ldw	fp,0(sp)
81105950:	dec00104 	addi	sp,sp,4
81105954:	f800283a 	ret

81105958 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
81105958:	defffa04 	addi	sp,sp,-24
8110595c:	de00012e 	bgeu	sp,et,81105964 <I2C_TestAdress+0xc>
81105960:	003b68fa 	trap	3
81105964:	dfc00515 	stw	ra,20(sp)
81105968:	df000415 	stw	fp,16(sp)
8110596c:	df000404 	addi	fp,sp,16
81105970:	e13ffd15 	stw	r4,-12(fp)
81105974:	e17ffe15 	stw	r5,-8(fp)
81105978:	3005883a 	mov	r2,r6
8110597c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105980:	00800044 	movi	r2,1
81105984:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105988:	e17ffe17 	ldw	r5,-8(fp)
8110598c:	e13ffd17 	ldw	r4,-12(fp)
81105990:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105994:	e0bfff03 	ldbu	r2,-4(fp)
81105998:	10803fcc 	andi	r2,r2,255
8110599c:	100d883a 	mov	r6,r2
811059a0:	e17ffe17 	ldw	r5,-8(fp)
811059a4:	e13ffd17 	ldw	r4,-12(fp)
811059a8:	1105e3c0 	call	81105e3c <i2c_write>
811059ac:	1000011e 	bne	r2,zero,811059b4 <I2C_TestAdress+0x5c>
        bSuccess = FALSE;
811059b0:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811059b4:	e17ffe17 	ldw	r5,-8(fp)
811059b8:	e13ffd17 	ldw	r4,-12(fp)
811059bc:	1105dbc0 	call	81105dbc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
811059c0:	0106d604 	movi	r4,7000
811059c4:	112758c0 	call	8112758c <usleep>
    
    return bSuccess;
811059c8:	e0bffc17 	ldw	r2,-16(fp)

}
811059cc:	e037883a 	mov	sp,fp
811059d0:	dfc00117 	ldw	ra,4(sp)
811059d4:	df000017 	ldw	fp,0(sp)
811059d8:	dec00204 	addi	sp,sp,8
811059dc:	f800283a 	ret

811059e0 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
811059e0:	defff804 	addi	sp,sp,-32
811059e4:	de00012e 	bgeu	sp,et,811059ec <I2C_Write+0xc>
811059e8:	003b68fa 	trap	3
811059ec:	dfc00715 	stw	ra,28(sp)
811059f0:	df000615 	stw	fp,24(sp)
811059f4:	df000604 	addi	fp,sp,24
811059f8:	e13ffb15 	stw	r4,-20(fp)
811059fc:	e17ffc15 	stw	r5,-16(fp)
81105a00:	3009883a 	mov	r4,r6
81105a04:	3807883a 	mov	r3,r7
81105a08:	e0800217 	ldw	r2,8(fp)
81105a0c:	e13ffd05 	stb	r4,-12(fp)
81105a10:	e0fffe05 	stb	r3,-8(fp)
81105a14:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105a18:	00800044 	movi	r2,1
81105a1c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105a20:	e17ffc17 	ldw	r5,-16(fp)
81105a24:	e13ffb17 	ldw	r4,-20(fp)
81105a28:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a2c:	e0bffd03 	ldbu	r2,-12(fp)
81105a30:	10803fcc 	andi	r2,r2,255
81105a34:	100d883a 	mov	r6,r2
81105a38:	e17ffc17 	ldw	r5,-16(fp)
81105a3c:	e13ffb17 	ldw	r4,-20(fp)
81105a40:	1105e3c0 	call	81105e3c <i2c_write>
81105a44:	1000011e 	bne	r2,zero,81105a4c <I2C_Write+0x6c>
        bSuccess = FALSE;
81105a48:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105a4c:	e0bffa17 	ldw	r2,-24(fp)
81105a50:	10000726 	beq	r2,zero,81105a70 <I2C_Write+0x90>
81105a54:	e0bffe03 	ldbu	r2,-8(fp)
81105a58:	100d883a 	mov	r6,r2
81105a5c:	e17ffc17 	ldw	r5,-16(fp)
81105a60:	e13ffb17 	ldw	r4,-20(fp)
81105a64:	1105e3c0 	call	81105e3c <i2c_write>
81105a68:	1000011e 	bne	r2,zero,81105a70 <I2C_Write+0x90>
        bSuccess = FALSE;
81105a6c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105a70:	e0bffa17 	ldw	r2,-24(fp)
81105a74:	10000726 	beq	r2,zero,81105a94 <I2C_Write+0xb4>
81105a78:	e0bfff03 	ldbu	r2,-4(fp)
81105a7c:	100d883a 	mov	r6,r2
81105a80:	e17ffc17 	ldw	r5,-16(fp)
81105a84:	e13ffb17 	ldw	r4,-20(fp)
81105a88:	1105e3c0 	call	81105e3c <i2c_write>
81105a8c:	1000011e 	bne	r2,zero,81105a94 <I2C_Write+0xb4>
        bSuccess = FALSE;
81105a90:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105a94:	e17ffc17 	ldw	r5,-16(fp)
81105a98:	e13ffb17 	ldw	r4,-20(fp)
81105a9c:	1105dbc0 	call	81105dbc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105aa0:	0106d604 	movi	r4,7000
81105aa4:	112758c0 	call	8112758c <usleep>
    
    return bSuccess;
81105aa8:	e0bffa17 	ldw	r2,-24(fp)

}
81105aac:	e037883a 	mov	sp,fp
81105ab0:	dfc00117 	ldw	ra,4(sp)
81105ab4:	df000017 	ldw	fp,0(sp)
81105ab8:	dec00204 	addi	sp,sp,8
81105abc:	f800283a 	ret

81105ac0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105ac0:	defff904 	addi	sp,sp,-28
81105ac4:	de00012e 	bgeu	sp,et,81105acc <I2C_Read+0xc>
81105ac8:	003b68fa 	trap	3
81105acc:	dfc00615 	stw	ra,24(sp)
81105ad0:	df000515 	stw	fp,20(sp)
81105ad4:	df000504 	addi	fp,sp,20
81105ad8:	e13ffc15 	stw	r4,-16(fp)
81105adc:	e17ffd15 	stw	r5,-12(fp)
81105ae0:	3007883a 	mov	r3,r6
81105ae4:	3805883a 	mov	r2,r7
81105ae8:	e0fffe05 	stb	r3,-8(fp)
81105aec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105af0:	00800044 	movi	r2,1
81105af4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105af8:	e17ffd17 	ldw	r5,-12(fp)
81105afc:	e13ffc17 	ldw	r4,-16(fp)
81105b00:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105b04:	e0bffe03 	ldbu	r2,-8(fp)
81105b08:	10803fcc 	andi	r2,r2,255
81105b0c:	100d883a 	mov	r6,r2
81105b10:	e17ffd17 	ldw	r5,-12(fp)
81105b14:	e13ffc17 	ldw	r4,-16(fp)
81105b18:	1105e3c0 	call	81105e3c <i2c_write>
81105b1c:	1000011e 	bne	r2,zero,81105b24 <I2C_Read+0x64>
        bSuccess = FALSE;
81105b20:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105b24:	e0bffb17 	ldw	r2,-20(fp)
81105b28:	10000726 	beq	r2,zero,81105b48 <I2C_Read+0x88>
81105b2c:	e0bfff03 	ldbu	r2,-4(fp)
81105b30:	100d883a 	mov	r6,r2
81105b34:	e17ffd17 	ldw	r5,-12(fp)
81105b38:	e13ffc17 	ldw	r4,-16(fp)
81105b3c:	1105e3c0 	call	81105e3c <i2c_write>
81105b40:	1000011e 	bne	r2,zero,81105b48 <I2C_Read+0x88>
        bSuccess = FALSE;
81105b44:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81105b48:	e17ffd17 	ldw	r5,-12(fp)
81105b4c:	e13ffc17 	ldw	r4,-16(fp)
81105b50:	1105d280 	call	81105d28 <i2c_start>
    DeviceAddr |= 1; // Read
81105b54:	e0bffe03 	ldbu	r2,-8(fp)
81105b58:	10800054 	ori	r2,r2,1
81105b5c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105b60:	e0bffb17 	ldw	r2,-20(fp)
81105b64:	10000826 	beq	r2,zero,81105b88 <I2C_Read+0xc8>
81105b68:	e0bffe03 	ldbu	r2,-8(fp)
81105b6c:	10803fcc 	andi	r2,r2,255
81105b70:	100d883a 	mov	r6,r2
81105b74:	e17ffd17 	ldw	r5,-12(fp)
81105b78:	e13ffc17 	ldw	r4,-16(fp)
81105b7c:	1105e3c0 	call	81105e3c <i2c_write>
81105b80:	1000011e 	bne	r2,zero,81105b88 <I2C_Read+0xc8>
        bSuccess = FALSE;
81105b84:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105b88:	e0bffb17 	ldw	r2,-20(fp)
81105b8c:	10000526 	beq	r2,zero,81105ba4 <I2C_Read+0xe4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105b90:	000f883a 	mov	r7,zero
81105b94:	e1800217 	ldw	r6,8(fp)
81105b98:	e17ffd17 	ldw	r5,-12(fp)
81105b9c:	e13ffc17 	ldw	r4,-16(fp)
81105ba0:	1105f740 	call	81105f74 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105ba4:	e17ffd17 	ldw	r5,-12(fp)
81105ba8:	e13ffc17 	ldw	r4,-16(fp)
81105bac:	1105dbc0 	call	81105dbc <i2c_stop>
    
    return bSuccess;
81105bb0:	e0bffb17 	ldw	r2,-20(fp)
}
81105bb4:	e037883a 	mov	sp,fp
81105bb8:	dfc00117 	ldw	ra,4(sp)
81105bbc:	df000017 	ldw	fp,0(sp)
81105bc0:	dec00204 	addi	sp,sp,8
81105bc4:	f800283a 	ret

81105bc8 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81105bc8:	defff604 	addi	sp,sp,-40
81105bcc:	de00012e 	bgeu	sp,et,81105bd4 <I2C_MultipleRead+0xc>
81105bd0:	003b68fa 	trap	3
81105bd4:	dfc00915 	stw	ra,36(sp)
81105bd8:	df000815 	stw	fp,32(sp)
81105bdc:	df000804 	addi	fp,sp,32
81105be0:	e13ffb15 	stw	r4,-20(fp)
81105be4:	e17ffc15 	stw	r5,-16(fp)
81105be8:	3007883a 	mov	r3,r6
81105bec:	e1fffe15 	stw	r7,-8(fp)
81105bf0:	e0800217 	ldw	r2,8(fp)
81105bf4:	e0fffd05 	stb	r3,-12(fp)
81105bf8:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81105bfc:	00800044 	movi	r2,1
81105c00:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81105c04:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105c08:	e17ffc17 	ldw	r5,-16(fp)
81105c0c:	e13ffb17 	ldw	r4,-20(fp)
81105c10:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105c14:	e0bffd03 	ldbu	r2,-12(fp)
81105c18:	10803fcc 	andi	r2,r2,255
81105c1c:	100d883a 	mov	r6,r2
81105c20:	e17ffc17 	ldw	r5,-16(fp)
81105c24:	e13ffb17 	ldw	r4,-20(fp)
81105c28:	1105e3c0 	call	81105e3c <i2c_write>
81105c2c:	1000011e 	bne	r2,zero,81105c34 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
81105c30:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105c34:	e0bff917 	ldw	r2,-28(fp)
81105c38:	10000726 	beq	r2,zero,81105c58 <I2C_MultipleRead+0x90>
81105c3c:	e0bffa03 	ldbu	r2,-24(fp)
81105c40:	100d883a 	mov	r6,r2
81105c44:	e17ffc17 	ldw	r5,-16(fp)
81105c48:	e13ffb17 	ldw	r4,-20(fp)
81105c4c:	1105e3c0 	call	81105e3c <i2c_write>
81105c50:	1000011e 	bne	r2,zero,81105c58 <I2C_MultipleRead+0x90>
        bSuccess = FALSE;
81105c54:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81105c58:	e0bff917 	ldw	r2,-28(fp)
81105c5c:	10000326 	beq	r2,zero,81105c6c <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
81105c60:	e17ffc17 	ldw	r5,-16(fp)
81105c64:	e13ffb17 	ldw	r4,-20(fp)
81105c68:	1105d280 	call	81105d28 <i2c_start>
    DeviceAddr |= 1; // Read
81105c6c:	e0bffd03 	ldbu	r2,-12(fp)
81105c70:	10800054 	ori	r2,r2,1
81105c74:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105c78:	e0bff917 	ldw	r2,-28(fp)
81105c7c:	10000826 	beq	r2,zero,81105ca0 <I2C_MultipleRead+0xd8>
81105c80:	e0bffd03 	ldbu	r2,-12(fp)
81105c84:	10803fcc 	andi	r2,r2,255
81105c88:	100d883a 	mov	r6,r2
81105c8c:	e17ffc17 	ldw	r5,-16(fp)
81105c90:	e13ffb17 	ldw	r4,-20(fp)
81105c94:	1105e3c0 	call	81105e3c <i2c_write>
81105c98:	1000011e 	bne	r2,zero,81105ca0 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
81105c9c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105ca0:	e0bff917 	ldw	r2,-28(fp)
81105ca4:	10001726 	beq	r2,zero,81105d04 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
81105ca8:	e03ff815 	stw	zero,-32(fp)
81105cac:	00001006 	br	81105cf0 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105cb0:	e0bff817 	ldw	r2,-32(fp)
81105cb4:	e0fffe17 	ldw	r3,-8(fp)
81105cb8:	1889883a 	add	r4,r3,r2
81105cbc:	e0bfff0b 	ldhu	r2,-4(fp)
81105cc0:	10ffffc4 	addi	r3,r2,-1
81105cc4:	e0bff817 	ldw	r2,-32(fp)
81105cc8:	1884c03a 	cmpne	r2,r3,r2
81105ccc:	10803fcc 	andi	r2,r2,255
81105cd0:	100f883a 	mov	r7,r2
81105cd4:	200d883a 	mov	r6,r4
81105cd8:	e17ffc17 	ldw	r5,-16(fp)
81105cdc:	e13ffb17 	ldw	r4,-20(fp)
81105ce0:	1105f740 	call	81105f74 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81105ce4:	e0bff817 	ldw	r2,-32(fp)
81105ce8:	10800044 	addi	r2,r2,1
81105cec:	e0bff815 	stw	r2,-32(fp)
81105cf0:	e0bfff0b 	ldhu	r2,-4(fp)
81105cf4:	e0fff817 	ldw	r3,-32(fp)
81105cf8:	1880020e 	bge	r3,r2,81105d04 <I2C_MultipleRead+0x13c>
81105cfc:	e0bff917 	ldw	r2,-28(fp)
81105d00:	103feb1e 	bne	r2,zero,81105cb0 <__reset+0xfb0e5cb0>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81105d04:	e17ffc17 	ldw	r5,-16(fp)
81105d08:	e13ffb17 	ldw	r4,-20(fp)
81105d0c:	1105dbc0 	call	81105dbc <i2c_stop>
    
    return bSuccess;    
81105d10:	e0bff917 	ldw	r2,-28(fp)
    
}
81105d14:	e037883a 	mov	sp,fp
81105d18:	dfc00117 	ldw	ra,4(sp)
81105d1c:	df000017 	ldw	fp,0(sp)
81105d20:	dec00204 	addi	sp,sp,8
81105d24:	f800283a 	ret

81105d28 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105d28:	defffc04 	addi	sp,sp,-16
81105d2c:	de00012e 	bgeu	sp,et,81105d34 <i2c_start+0xc>
81105d30:	003b68fa 	trap	3
81105d34:	dfc00315 	stw	ra,12(sp)
81105d38:	df000215 	stw	fp,8(sp)
81105d3c:	df000204 	addi	fp,sp,8
81105d40:	e13ffe15 	stw	r4,-8(fp)
81105d44:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105d48:	e0bfff17 	ldw	r2,-4(fp)
81105d4c:	10800104 	addi	r2,r2,4
81105d50:	1007883a 	mov	r3,r2
81105d54:	00800044 	movi	r2,1
81105d58:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81105d5c:	e0bfff17 	ldw	r2,-4(fp)
81105d60:	00c00044 	movi	r3,1
81105d64:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81105d68:	e0bffe17 	ldw	r2,-8(fp)
81105d6c:	00c00044 	movi	r3,1
81105d70:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105d74:	01000044 	movi	r4,1
81105d78:	112758c0 	call	8112758c <usleep>
     
    SDA_LOW(data_base); // data low
81105d7c:	e0bfff17 	ldw	r2,-4(fp)
81105d80:	0007883a 	mov	r3,zero
81105d84:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81105d88:	01000044 	movi	r4,1
81105d8c:	112758c0 	call	8112758c <usleep>
    SCL_LOW(clk_base); // clock low
81105d90:	e0bffe17 	ldw	r2,-8(fp)
81105d94:	0007883a 	mov	r3,zero
81105d98:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105d9c:	01000044 	movi	r4,1
81105da0:	112758c0 	call	8112758c <usleep>
}
81105da4:	0001883a 	nop
81105da8:	e037883a 	mov	sp,fp
81105dac:	dfc00117 	ldw	ra,4(sp)
81105db0:	df000017 	ldw	fp,0(sp)
81105db4:	dec00204 	addi	sp,sp,8
81105db8:	f800283a 	ret

81105dbc <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81105dbc:	defffc04 	addi	sp,sp,-16
81105dc0:	de00012e 	bgeu	sp,et,81105dc8 <i2c_stop+0xc>
81105dc4:	003b68fa 	trap	3
81105dc8:	dfc00315 	stw	ra,12(sp)
81105dcc:	df000215 	stw	fp,8(sp)
81105dd0:	df000204 	addi	fp,sp,8
81105dd4:	e13ffe15 	stw	r4,-8(fp)
81105dd8:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105ddc:	e0bfff17 	ldw	r2,-4(fp)
81105de0:	10800104 	addi	r2,r2,4
81105de4:	1007883a 	mov	r3,r2
81105de8:	00800044 	movi	r2,1
81105dec:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105df0:	e0bfff17 	ldw	r2,-4(fp)
81105df4:	0007883a 	mov	r3,zero
81105df8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81105dfc:	e0bffe17 	ldw	r2,-8(fp)
81105e00:	00c00044 	movi	r3,1
81105e04:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81105e08:	01000044 	movi	r4,1
81105e0c:	112758c0 	call	8112758c <usleep>
    SDA_HIGH(data_base); // data high
81105e10:	e0bfff17 	ldw	r2,-4(fp)
81105e14:	00c00044 	movi	r3,1
81105e18:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81105e1c:	01000044 	movi	r4,1
81105e20:	112758c0 	call	8112758c <usleep>
    

    
}
81105e24:	0001883a 	nop
81105e28:	e037883a 	mov	sp,fp
81105e2c:	dfc00117 	ldw	ra,4(sp)
81105e30:	df000017 	ldw	fp,0(sp)
81105e34:	dec00204 	addi	sp,sp,8
81105e38:	f800283a 	ret

81105e3c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105e3c:	defff804 	addi	sp,sp,-32
81105e40:	de00012e 	bgeu	sp,et,81105e48 <i2c_write+0xc>
81105e44:	003b68fa 	trap	3
81105e48:	dfc00715 	stw	ra,28(sp)
81105e4c:	df000615 	stw	fp,24(sp)
81105e50:	df000604 	addi	fp,sp,24
81105e54:	e13ffd15 	stw	r4,-12(fp)
81105e58:	e17ffe15 	stw	r5,-8(fp)
81105e5c:	3005883a 	mov	r2,r6
81105e60:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105e64:	00bfe004 	movi	r2,-128
81105e68:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81105e6c:	e0bffe17 	ldw	r2,-8(fp)
81105e70:	10800104 	addi	r2,r2,4
81105e74:	1007883a 	mov	r3,r2
81105e78:	00800044 	movi	r2,1
81105e7c:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105e80:	e03ffb15 	stw	zero,-20(fp)
81105e84:	00001f06 	br	81105f04 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81105e88:	e0bffd17 	ldw	r2,-12(fp)
81105e8c:	0007883a 	mov	r3,zero
81105e90:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105e94:	e0ffff03 	ldbu	r3,-4(fp)
81105e98:	e0bffa03 	ldbu	r2,-24(fp)
81105e9c:	1884703a 	and	r2,r3,r2
81105ea0:	10803fcc 	andi	r2,r2,255
81105ea4:	10000426 	beq	r2,zero,81105eb8 <i2c_write+0x7c>
            SDA_HIGH(data_base);
81105ea8:	e0bffe17 	ldw	r2,-8(fp)
81105eac:	00c00044 	movi	r3,1
81105eb0:	10c00035 	stwio	r3,0(r2)
81105eb4:	00000306 	br	81105ec4 <i2c_write+0x88>
        }else{    
            SDA_LOW(data_base);
81105eb8:	e0bffe17 	ldw	r2,-8(fp)
81105ebc:	0007883a 	mov	r3,zero
81105ec0:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105ec4:	e0bffa03 	ldbu	r2,-24(fp)
81105ec8:	1004d07a 	srli	r2,r2,1
81105ecc:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105ed0:	e0bffd17 	ldw	r2,-12(fp)
81105ed4:	00c00044 	movi	r3,1
81105ed8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105edc:	01000044 	movi	r4,1
81105ee0:	112758c0 	call	8112758c <usleep>
        SCL_LOW(clk_base);
81105ee4:	e0bffd17 	ldw	r2,-12(fp)
81105ee8:	0007883a 	mov	r3,zero
81105eec:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105ef0:	01000044 	movi	r4,1
81105ef4:	112758c0 	call	8112758c <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81105ef8:	e0bffb17 	ldw	r2,-20(fp)
81105efc:	10800044 	addi	r2,r2,1
81105f00:	e0bffb15 	stw	r2,-20(fp)
81105f04:	e0bffb17 	ldw	r2,-20(fp)
81105f08:	10800210 	cmplti	r2,r2,8
81105f0c:	103fde1e 	bne	r2,zero,81105e88 <__reset+0xfb0e5e88>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81105f10:	e0bffe17 	ldw	r2,-8(fp)
81105f14:	10800104 	addi	r2,r2,4
81105f18:	0007883a 	mov	r3,zero
81105f1c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81105f20:	e0bffd17 	ldw	r2,-12(fp)
81105f24:	00c00044 	movi	r3,1
81105f28:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81105f2c:	01000044 	movi	r4,1
81105f30:	112758c0 	call	8112758c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81105f34:	e0bffe17 	ldw	r2,-8(fp)
81105f38:	10800037 	ldwio	r2,0(r2)
81105f3c:	1005003a 	cmpeq	r2,r2,zero
81105f40:	10803fcc 	andi	r2,r2,255
81105f44:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105f48:	e0bffd17 	ldw	r2,-12(fp)
81105f4c:	0007883a 	mov	r3,zero
81105f50:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105f54:	01000044 	movi	r4,1
81105f58:	112758c0 	call	8112758c <usleep>
    return bAck;
81105f5c:	e0bffc17 	ldw	r2,-16(fp)
}    
81105f60:	e037883a 	mov	sp,fp
81105f64:	dfc00117 	ldw	ra,4(sp)
81105f68:	df000017 	ldw	fp,0(sp)
81105f6c:	dec00204 	addi	sp,sp,8
81105f70:	f800283a 	ret

81105f74 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105f74:	defff804 	addi	sp,sp,-32
81105f78:	de00012e 	bgeu	sp,et,81105f80 <i2c_read+0xc>
81105f7c:	003b68fa 	trap	3
81105f80:	dfc00715 	stw	ra,28(sp)
81105f84:	df000615 	stw	fp,24(sp)
81105f88:	df000604 	addi	fp,sp,24
81105f8c:	e13ffc15 	stw	r4,-16(fp)
81105f90:	e17ffd15 	stw	r5,-12(fp)
81105f94:	e1bffe15 	stw	r6,-8(fp)
81105f98:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
81105f9c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81105fa0:	e0bffd17 	ldw	r2,-12(fp)
81105fa4:	10800104 	addi	r2,r2,4
81105fa8:	0007883a 	mov	r3,zero
81105fac:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81105fb0:	e0bffc17 	ldw	r2,-16(fp)
81105fb4:	0007883a 	mov	r3,zero
81105fb8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105fbc:	01000044 	movi	r4,1
81105fc0:	112758c0 	call	8112758c <usleep>

    for(i=0;i<8;i++){
81105fc4:	e03ffb15 	stw	zero,-20(fp)
81105fc8:	00001606 	br	81106024 <i2c_read+0xb0>
        Data <<= 1;
81105fcc:	e0bffa03 	ldbu	r2,-24(fp)
81105fd0:	1085883a 	add	r2,r2,r2
81105fd4:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81105fd8:	e0bffc17 	ldw	r2,-16(fp)
81105fdc:	00c00044 	movi	r3,1
81105fe0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105fe4:	01000044 	movi	r4,1
81105fe8:	112758c0 	call	8112758c <usleep>
        if (SDA_READ(data_base))  // read data   
81105fec:	e0bffd17 	ldw	r2,-12(fp)
81105ff0:	10800037 	ldwio	r2,0(r2)
81105ff4:	10000326 	beq	r2,zero,81106004 <i2c_read+0x90>
            Data |= 0x01;
81105ff8:	e0bffa03 	ldbu	r2,-24(fp)
81105ffc:	10800054 	ori	r2,r2,1
81106000:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
81106004:	e0bffc17 	ldw	r2,-16(fp)
81106008:	0007883a 	mov	r3,zero
8110600c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106010:	01000044 	movi	r4,1
81106014:	112758c0 	call	8112758c <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81106018:	e0bffb17 	ldw	r2,-20(fp)
8110601c:	10800044 	addi	r2,r2,1
81106020:	e0bffb15 	stw	r2,-20(fp)
81106024:	e0bffb17 	ldw	r2,-20(fp)
81106028:	10800210 	cmplti	r2,r2,8
8110602c:	103fe71e 	bne	r2,zero,81105fcc <__reset+0xfb0e5fcc>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
81106030:	e0bffc17 	ldw	r2,-16(fp)
81106034:	0007883a 	mov	r3,zero
81106038:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
8110603c:	e0bffd17 	ldw	r2,-12(fp)
81106040:	10800104 	addi	r2,r2,4
81106044:	1007883a 	mov	r3,r2
81106048:	00800044 	movi	r2,1
8110604c:	18800035 	stwio	r2,0(r3)
    if (bAck)
81106050:	e0bfff17 	ldw	r2,-4(fp)
81106054:	10000426 	beq	r2,zero,81106068 <i2c_read+0xf4>
        SDA_LOW(data_base);
81106058:	e0bffd17 	ldw	r2,-12(fp)
8110605c:	0007883a 	mov	r3,zero
81106060:	10c00035 	stwio	r3,0(r2)
81106064:	00000306 	br	81106074 <i2c_read+0x100>
    else
        SDA_HIGH(data_base);
81106068:	e0bffd17 	ldw	r2,-12(fp)
8110606c:	00c00044 	movi	r3,1
81106070:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
81106074:	e0bffc17 	ldw	r2,-16(fp)
81106078:	00c00044 	movi	r3,1
8110607c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
81106080:	01000044 	movi	r4,1
81106084:	112758c0 	call	8112758c <usleep>
    SCL_LOW(clk_base); // clock low
81106088:	e0bffc17 	ldw	r2,-16(fp)
8110608c:	0007883a 	mov	r3,zero
81106090:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81106094:	01000044 	movi	r4,1
81106098:	112758c0 	call	8112758c <usleep>
    SDA_LOW(data_base);  // data low
8110609c:	e0bffd17 	ldw	r2,-12(fp)
811060a0:	0007883a 	mov	r3,zero
811060a4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
811060a8:	01000044 	movi	r4,1
811060ac:	112758c0 	call	8112758c <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
811060b0:	e0bffe17 	ldw	r2,-8(fp)
811060b4:	e0fffa03 	ldbu	r3,-24(fp)
811060b8:	10c00005 	stb	r3,0(r2)
}
811060bc:	0001883a 	nop
811060c0:	e037883a 	mov	sp,fp
811060c4:	dfc00117 	ldw	ra,4(sp)
811060c8:	df000017 	ldw	fp,0(sp)
811060cc:	dec00204 	addi	sp,sp,8
811060d0:	f800283a 	ret

811060d4 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
811060d4:	defffd04 	addi	sp,sp,-12
811060d8:	de00012e 	bgeu	sp,et,811060e0 <bSetBoardLeds+0xc>
811060dc:	003b68fa 	trap	3
811060e0:	df000215 	stw	fp,8(sp)
811060e4:	df000204 	addi	fp,sp,8
811060e8:	e13ffe15 	stw	r4,-8(fp)
811060ec:	2805883a 	mov	r2,r5
811060f0:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
811060f4:	e0bffe17 	ldw	r2,-8(fp)
811060f8:	10800058 	cmpnei	r2,r2,1
811060fc:	1000071e 	bne	r2,zero,8110611c <bSetBoardLeds+0x48>
	LedsBoardControl &= (~LedsMask);
81106100:	e0bfff03 	ldbu	r2,-4(fp)
81106104:	0084303a 	nor	r2,zero,r2
81106108:	1007883a 	mov	r3,r2
8110610c:	d0a04503 	ldbu	r2,-32492(gp)
81106110:	1884703a 	and	r2,r3,r2
81106114:	d0a04505 	stb	r2,-32492(gp)
81106118:	00000406 	br	8110612c <bSetBoardLeds+0x58>
  } else {
	LedsBoardControl |= LedsMask;
8110611c:	d0e04503 	ldbu	r3,-32492(gp)
81106120:	e0bfff03 	ldbu	r2,-4(fp)
81106124:	1884b03a 	or	r2,r3,r2
81106128:	d0a04505 	stb	r2,-32492(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110612c:	d0a04503 	ldbu	r2,-32492(gp)
81106130:	10c03fcc 	andi	r3,r2,255
81106134:	00a00034 	movhi	r2,32768
81106138:	10827404 	addi	r2,r2,2512
8110613c:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81106140:	00800044 	movi	r2,1
}
81106144:	e037883a 	mov	sp,fp
81106148:	df000017 	ldw	fp,0(sp)
8110614c:	dec00104 	addi	sp,sp,4
81106150:	f800283a 	ret

81106154 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
81106154:	defffd04 	addi	sp,sp,-12
81106158:	de00012e 	bgeu	sp,et,81106160 <bSetPainelLeds+0xc>
8110615c:	003b68fa 	trap	3
81106160:	df000215 	stw	fp,8(sp)
81106164:	df000204 	addi	fp,sp,8
81106168:	e13ffe15 	stw	r4,-8(fp)
8110616c:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
81106170:	e0bffe17 	ldw	r2,-8(fp)
81106174:	10800058 	cmpnei	r2,r2,1
81106178:	1000051e 	bne	r2,zero,81106190 <bSetPainelLeds+0x3c>
	LedsPainelControl |= LedsMask;
8110617c:	d0e00217 	ldw	r3,-32760(gp)
81106180:	e0bfff17 	ldw	r2,-4(fp)
81106184:	1884b03a 	or	r2,r3,r2
81106188:	d0a00215 	stw	r2,-32760(gp)
8110618c:	00000506 	br	811061a4 <bSetPainelLeds+0x50>
  } else {
	LedsPainelControl &= (~LedsMask);
81106190:	e0bfff17 	ldw	r2,-4(fp)
81106194:	0086303a 	nor	r3,zero,r2
81106198:	d0a00217 	ldw	r2,-32760(gp)
8110619c:	1884703a 	and	r2,r3,r2
811061a0:	d0a00215 	stw	r2,-32760(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
811061a4:	d0a00217 	ldw	r2,-32760(gp)
811061a8:	1007883a 	mov	r3,r2
811061ac:	00a00034 	movhi	r2,32768
811061b0:	10824004 	addi	r2,r2,2304
811061b4:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811061b8:	00800044 	movi	r2,1
}
811061bc:	e037883a 	mov	sp,fp
811061c0:	df000017 	ldw	fp,0(sp)
811061c4:	dec00104 	addi	sp,sp,4
811061c8:	f800283a 	ret

811061cc <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
811061cc:	defffc04 	addi	sp,sp,-16
811061d0:	de00012e 	bgeu	sp,et,811061d8 <msgdma_write_extended_descriptor+0xc>
811061d4:	003b68fa 	trap	3
811061d8:	df000315 	stw	fp,12(sp)
811061dc:	df000304 	addi	fp,sp,12
811061e0:	e13ffd15 	stw	r4,-12(fp)
811061e4:	e17ffe15 	stw	r5,-8(fp)
811061e8:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
811061ec:	e0bffd17 	ldw	r2,-12(fp)
811061f0:	10800037 	ldwio	r2,0(r2)
811061f4:	1080010c 	andi	r2,r2,4
811061f8:	10000226 	beq	r2,zero,81106204 <msgdma_write_extended_descriptor+0x38>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
811061fc:	00bff904 	movi	r2,-28
81106200:	00003d06 	br	811062f8 <msgdma_write_extended_descriptor+0x12c>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
81106204:	e0bfff17 	ldw	r2,-4(fp)
81106208:	10800017 	ldw	r2,0(r2)
8110620c:	1007883a 	mov	r3,r2
81106210:	e0bffe17 	ldw	r2,-8(fp)
81106214:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
81106218:	e0bffe17 	ldw	r2,-8(fp)
8110621c:	10800104 	addi	r2,r2,4
81106220:	e0ffff17 	ldw	r3,-4(fp)
81106224:	18c00117 	ldw	r3,4(r3)
81106228:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
8110622c:	e0bffe17 	ldw	r2,-8(fp)
81106230:	10800204 	addi	r2,r2,8
81106234:	e0ffff17 	ldw	r3,-4(fp)
81106238:	18c00217 	ldw	r3,8(r3)
8110623c:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
81106240:	e0bffe17 	ldw	r2,-8(fp)
81106244:	10800304 	addi	r2,r2,12
81106248:	e0ffff17 	ldw	r3,-4(fp)
8110624c:	18c0030b 	ldhu	r3,12(r3)
81106250:	18ffffcc 	andi	r3,r3,65535
81106254:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
81106258:	e0bffe17 	ldw	r2,-8(fp)
8110625c:	10800384 	addi	r2,r2,14
81106260:	e0ffff17 	ldw	r3,-4(fp)
81106264:	18c00383 	ldbu	r3,14(r3)
81106268:	18c03fcc 	andi	r3,r3,255
8110626c:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
81106270:	e0bffe17 	ldw	r2,-8(fp)
81106274:	108003c4 	addi	r2,r2,15
81106278:	e0ffff17 	ldw	r3,-4(fp)
8110627c:	18c003c3 	ldbu	r3,15(r3)
81106280:	18c03fcc 	andi	r3,r3,255
81106284:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
81106288:	e0bffe17 	ldw	r2,-8(fp)
8110628c:	10800404 	addi	r2,r2,16
81106290:	e0ffff17 	ldw	r3,-4(fp)
81106294:	18c0040b 	ldhu	r3,16(r3)
81106298:	18ffffcc 	andi	r3,r3,65535
8110629c:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
811062a0:	e0bffe17 	ldw	r2,-8(fp)
811062a4:	10800484 	addi	r2,r2,18
811062a8:	e0ffff17 	ldw	r3,-4(fp)
811062ac:	18c0048b 	ldhu	r3,18(r3)
811062b0:	18ffffcc 	andi	r3,r3,65535
811062b4:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
811062b8:	e0bffe17 	ldw	r2,-8(fp)
811062bc:	10800504 	addi	r2,r2,20
811062c0:	e0ffff17 	ldw	r3,-4(fp)
811062c4:	18c00517 	ldw	r3,20(r3)
811062c8:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
811062cc:	e0bffe17 	ldw	r2,-8(fp)
811062d0:	10800604 	addi	r2,r2,24
811062d4:	e0ffff17 	ldw	r3,-4(fp)
811062d8:	18c00617 	ldw	r3,24(r3)
811062dc:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
811062e0:	e0bffe17 	ldw	r2,-8(fp)
811062e4:	10800704 	addi	r2,r2,28
811062e8:	e0ffff17 	ldw	r3,-4(fp)
811062ec:	18c00717 	ldw	r3,28(r3)
811062f0:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
811062f4:	0005883a 	mov	r2,zero
}
811062f8:	e037883a 	mov	sp,fp
811062fc:	df000017 	ldw	fp,0(sp)
81106300:	dec00104 	addi	sp,sp,4
81106304:	f800283a 	ret

81106308 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81106308:	defff604 	addi	sp,sp,-40
8110630c:	de00012e 	bgeu	sp,et,81106314 <msgdma_construct_extended_descriptor+0xc>
81106310:	003b68fa 	trap	3
81106314:	df000915 	stw	fp,36(sp)
81106318:	df000904 	addi	fp,sp,36
8110631c:	e13ff715 	stw	r4,-36(fp)
81106320:	e17ff815 	stw	r5,-32(fp)
81106324:	e1bff915 	stw	r6,-28(fp)
81106328:	e1fffa15 	stw	r7,-24(fp)
8110632c:	e1800517 	ldw	r6,20(fp)
81106330:	e1400617 	ldw	r5,24(fp)
81106334:	e1000717 	ldw	r4,28(fp)
81106338:	e0c00817 	ldw	r3,32(fp)
8110633c:	e0800917 	ldw	r2,36(fp)
81106340:	e1bffb0d 	sth	r6,-20(fp)
81106344:	e17ffc05 	stb	r5,-16(fp)
81106348:	e13ffd05 	stb	r4,-12(fp)
8110634c:	e0fffe0d 	sth	r3,-8(fp)
81106350:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
81106354:	e0bff717 	ldw	r2,-36(fp)
81106358:	10c01217 	ldw	r3,72(r2)
8110635c:	e0800117 	ldw	r2,4(fp)
81106360:	18801936 	bltu	r3,r2,811063c8 <msgdma_construct_extended_descriptor+0xc0>
81106364:	e13ff717 	ldw	r4,-36(fp)
81106368:	20801317 	ldw	r2,76(r4)
8110636c:	20c01417 	ldw	r3,80(r4)
81106370:	e13ffe0b 	ldhu	r4,-8(fp)
81106374:	213fffcc 	andi	r4,r4,65535
81106378:	2015883a 	mov	r10,r4
8110637c:	0017883a 	mov	r11,zero
81106380:	1ac01136 	bltu	r3,r11,811063c8 <msgdma_construct_extended_descriptor+0xc0>
81106384:	58c0011e 	bne	r11,r3,8110638c <msgdma_construct_extended_descriptor+0x84>
81106388:	12800f36 	bltu	r2,r10,811063c8 <msgdma_construct_extended_descriptor+0xc0>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
8110638c:	e13ff717 	ldw	r4,-36(fp)
81106390:	20801317 	ldw	r2,76(r4)
81106394:	20c01417 	ldw	r3,80(r4)
81106398:	e13fff0b 	ldhu	r4,-4(fp)
8110639c:	213fffcc 	andi	r4,r4,65535
811063a0:	2011883a 	mov	r8,r4
811063a4:	0013883a 	mov	r9,zero
811063a8:	1a400736 	bltu	r3,r9,811063c8 <msgdma_construct_extended_descriptor+0xc0>
811063ac:	48c0011e 	bne	r9,r3,811063b4 <msgdma_construct_extended_descriptor+0xac>
811063b0:	12000536 	bltu	r2,r8,811063c8 <msgdma_construct_extended_descriptor+0xc0>
811063b4:	e0bff717 	ldw	r2,-36(fp)
811063b8:	10801703 	ldbu	r2,92(r2)
811063bc:	10803fcc 	andi	r2,r2,255
811063c0:	10800060 	cmpeqi	r2,r2,1
811063c4:	1000021e 	bne	r2,zero,811063d0 <msgdma_construct_extended_descriptor+0xc8>
		return -EINVAL;
811063c8:	00bffa84 	movi	r2,-22
811063cc:	00002306 	br	8110645c <msgdma_construct_extended_descriptor+0x154>
	}

	descriptor->read_address_low = read_address;
811063d0:	e0bff817 	ldw	r2,-32(fp)
811063d4:	e0fff917 	ldw	r3,-28(fp)
811063d8:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
811063dc:	e0bff817 	ldw	r2,-32(fp)
811063e0:	e0fffa17 	ldw	r3,-24(fp)
811063e4:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
811063e8:	e0bff817 	ldw	r2,-32(fp)
811063ec:	e0c00117 	ldw	r3,4(fp)
811063f0:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
811063f4:	e0bff817 	ldw	r2,-32(fp)
811063f8:	e0fffb0b 	ldhu	r3,-20(fp)
811063fc:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81106400:	e0bff817 	ldw	r2,-32(fp)
81106404:	e0fffc03 	ldbu	r3,-16(fp)
81106408:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
8110640c:	e0bff817 	ldw	r2,-32(fp)
81106410:	e0fffd03 	ldbu	r3,-12(fp)
81106414:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81106418:	e0bff817 	ldw	r2,-32(fp)
8110641c:	e0fffe0b 	ldhu	r3,-8(fp)
81106420:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
81106424:	e0bff817 	ldw	r2,-32(fp)
81106428:	e0ffff0b 	ldhu	r3,-4(fp)
8110642c:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
81106430:	e0bff817 	ldw	r2,-32(fp)
81106434:	e0c00317 	ldw	r3,12(fp)
81106438:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
8110643c:	e0bff817 	ldw	r2,-32(fp)
81106440:	e0c00417 	ldw	r3,16(fp)
81106444:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81106448:	e0800217 	ldw	r2,8(fp)
8110644c:	10e00034 	orhi	r3,r2,32768
81106450:	e0bff817 	ldw	r2,-32(fp)
81106454:	10c00715 	stw	r3,28(r2)

	return 0;
81106458:	0005883a 	mov	r2,zero

}
8110645c:	e037883a 	mov	sp,fp
81106460:	df000017 	ldw	fp,0(sp)
81106464:	dec00104 	addi	sp,sp,4
81106468:	f800283a 	ret

8110646c <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
8110646c:	deffee04 	addi	sp,sp,-72
81106470:	de00012e 	bgeu	sp,et,81106478 <msgdma_descriptor_async_transfer+0xc>
81106474:	003b68fa 	trap	3
81106478:	dfc01115 	stw	ra,68(sp)
8110647c:	df001015 	stw	fp,64(sp)
81106480:	df001004 	addi	fp,sp,64
81106484:	e13ffd15 	stw	r4,-12(fp)
81106488:	e17ffe15 	stw	r5,-8(fp)
8110648c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106490:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81106494:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81106498:	e03ff00d 	sth	zero,-64(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110649c:	e0bffd17 	ldw	r2,-12(fp)
811064a0:	10800317 	ldw	r2,12(r2)
811064a4:	10800204 	addi	r2,r2,8
811064a8:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
811064ac:	10bfffcc 	andi	r2,r2,65535
811064b0:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811064b4:	e0bffd17 	ldw	r2,-12(fp)
811064b8:	10800317 	ldw	r2,12(r2)
811064bc:	10800204 	addi	r2,r2,8
811064c0:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
811064c4:	1004d43a 	srli	r2,r2,16
811064c8:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811064cc:	e0bffd17 	ldw	r2,-12(fp)
811064d0:	10800917 	ldw	r2,36(r2)
811064d4:	e0fff417 	ldw	r3,-48(fp)
811064d8:	1880042e 	bgeu	r3,r2,811064ec <msgdma_descriptor_async_transfer+0x80>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
811064dc:	e0bffd17 	ldw	r2,-12(fp)
811064e0:	10800917 	ldw	r2,36(r2)
811064e4:	e0fff317 	ldw	r3,-52(fp)
811064e8:	18800236 	bltu	r3,r2,811064f4 <msgdma_descriptor_async_transfer+0x88>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
811064ec:	00bff904 	movi	r2,-28
811064f0:	00009f06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
811064f4:	e0bffd17 	ldw	r2,-12(fp)
811064f8:	10801817 	ldw	r2,96(r2)
811064fc:	e0bff615 	stw	r2,-40(fp)
81106500:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81106504:	e0bffc0b 	ldhu	r2,-16(fp)
81106508:	e0fffc84 	addi	r3,fp,-14
8110650c:	180d883a 	mov	r6,r3
81106510:	100b883a 	mov	r5,r2
81106514:	e13ff617 	ldw	r4,-40(fp)
81106518:	112e4080 	call	8112e408 <OSSemPend>

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8110651c:	00800804 	movi	r2,32
81106520:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106524:	0005303a 	rdctl	r2,status
81106528:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110652c:	e0fff717 	ldw	r3,-36(fp)
81106530:	00bfff84 	movi	r2,-2
81106534:	1884703a 	and	r2,r3,r2
81106538:	1001703a 	wrctl	status,r2
  
  return context;
8110653c:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106540:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106544:	e0bffd17 	ldw	r2,-12(fp)
81106548:	10800317 	ldw	r2,12(r2)
8110654c:	10800104 	addi	r2,r2,4
81106550:	e0fff117 	ldw	r3,-60(fp)
81106554:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106558:	e0bffd17 	ldw	r2,-12(fp)
8110655c:	10800317 	ldw	r2,12(r2)
81106560:	e0fffd17 	ldw	r3,-12(fp)
81106564:	18c00317 	ldw	r3,12(r3)
81106568:	18c00037 	ldwio	r3,0(r3)
8110656c:	10c00035 	stwio	r3,0(r2)
81106570:	e0bff217 	ldw	r2,-56(fp)
81106574:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106578:	e0bffb17 	ldw	r2,-20(fp)
8110657c:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
81106580:	e0bffe17 	ldw	r2,-8(fp)
81106584:	10001026 	beq	r2,zero,811065c8 <msgdma_descriptor_async_transfer+0x15c>
81106588:	e0bfff17 	ldw	r2,-4(fp)
8110658c:	10000e1e 	bne	r2,zero,811065c8 <msgdma_descriptor_async_transfer+0x15c>
		counter = 0; /* reset counter */
81106590:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106594:	d0a04d17 	ldw	r2,-32460(gp)
81106598:	100f883a 	mov	r7,r2
8110659c:	01800784 	movi	r6,30
811065a0:	01400044 	movi	r5,1
811065a4:	01204534 	movhi	r4,33044
811065a8:	212fb004 	addi	r4,r4,-16704
811065ac:	11116b00 	call	811116b0 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811065b0:	e0bffd17 	ldw	r2,-12(fp)
811065b4:	10801817 	ldw	r2,96(r2)
811065b8:	1009883a 	mov	r4,r2
811065bc:	112e7900 	call	8112e790 <OSSemPost>

		return -ETIME;
811065c0:	00bff084 	movi	r2,-62
811065c4:	00006a06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
	} else if (NULL == standard_desc && NULL != extended_desc) {
811065c8:	e0bffe17 	ldw	r2,-8(fp)
811065cc:	1000231e 	bne	r2,zero,8110665c <msgdma_descriptor_async_transfer+0x1f0>
811065d0:	e0bfff17 	ldw	r2,-4(fp)
811065d4:	10002126 	beq	r2,zero,8110665c <msgdma_descriptor_async_transfer+0x1f0>
		counter = 0; /* reset counter */
811065d8:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811065dc:	00001506 	br	81106634 <msgdma_descriptor_async_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
811065e0:	01000044 	movi	r4,1
811065e4:	11266bc0 	call	811266bc <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811065e8:	e0bff00b 	ldhu	r2,-64(fp)
811065ec:	1084e230 	cmpltui	r2,r2,5000
811065f0:	10000d1e 	bne	r2,zero,81106628 <msgdma_descriptor_async_transfer+0x1bc>
			{
#ifdef DEBUG_ON
				debug(fp,
811065f4:	d0a04d17 	ldw	r2,-32460(gp)
811065f8:	100f883a 	mov	r7,r2
811065fc:	01801544 	movi	r6,85
81106600:	01400044 	movi	r5,1
81106604:	01204534 	movhi	r4,33044
81106608:	212fb804 	addi	r4,r4,-16672
8110660c:	11116b00 	call	811116b0 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
81106610:	e0bffd17 	ldw	r2,-12(fp)
81106614:	10801817 	ldw	r2,96(r2)
81106618:	1009883a 	mov	r4,r2
8110661c:	112e7900 	call	8112e790 <OSSemPost>

				return -ETIME;
81106620:	00bff084 	movi	r2,-62
81106624:	00005206 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
			}
			counter++;
81106628:	e0bff00b 	ldhu	r2,-64(fp)
8110662c:	10800044 	addi	r2,r2,1
81106630:	e0bff00d 	sth	r2,-64(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81106634:	e0bffd17 	ldw	r2,-12(fp)
81106638:	10c00317 	ldw	r3,12(r2)
8110663c:	e0bffd17 	ldw	r2,-12(fp)
81106640:	10800417 	ldw	r2,16(r2)
81106644:	e1bfff17 	ldw	r6,-4(fp)
81106648:	100b883a 	mov	r5,r2
8110664c:	1809883a 	mov	r4,r3
81106650:	11061cc0 	call	811061cc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106654:	103fe21e 	bne	r2,zero,811065e0 <__reset+0xfb0e65e0>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106658:	00000606 	br	81106674 <msgdma_descriptor_async_transfer+0x208>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110665c:	e0bffd17 	ldw	r2,-12(fp)
81106660:	10801817 	ldw	r2,96(r2)
81106664:	1009883a 	mov	r4,r2
81106668:	112e7900 	call	8112e790 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
8110666c:	00bfffc4 	movi	r2,-1
81106670:	00003f06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
81106674:	e0bffd17 	ldw	r2,-12(fp)
81106678:	10800b17 	ldw	r2,44(r2)
8110667c:	10001c26 	beq	r2,zero,811066f0 <msgdma_descriptor_async_transfer+0x284>

		control |= (dev->control |
81106680:	e0bffd17 	ldw	r2,-12(fp)
81106684:	10c00d17 	ldw	r3,52(r2)
81106688:	e0bff117 	ldw	r2,-60(fp)
8110668c:	1884b03a 	or	r2,r3,r2
81106690:	10800514 	ori	r2,r2,20
81106694:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81106698:	e0fff117 	ldw	r3,-60(fp)
8110669c:	00bff7c4 	movi	r2,-33
811066a0:	1884703a 	and	r2,r3,r2
811066a4:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811066a8:	0005303a 	rdctl	r2,status
811066ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811066b0:	e0fff917 	ldw	r3,-28(fp)
811066b4:	00bfff84 	movi	r2,-2
811066b8:	1884703a 	and	r2,r3,r2
811066bc:	1001703a 	wrctl	status,r2
  
  return context;
811066c0:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
811066c4:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811066c8:	e0bffd17 	ldw	r2,-12(fp)
811066cc:	10800317 	ldw	r2,12(r2)
811066d0:	10800104 	addi	r2,r2,4
811066d4:	e0fff117 	ldw	r3,-60(fp)
811066d8:	10c00035 	stwio	r3,0(r2)
811066dc:	e0bff217 	ldw	r2,-56(fp)
811066e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811066e4:	e0bff517 	ldw	r2,-44(fp)
811066e8:	1001703a 	wrctl	status,r2
811066ec:	00001b06 	br	8110675c <msgdma_descriptor_async_transfer+0x2f0>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
811066f0:	e0bffd17 	ldw	r2,-12(fp)
811066f4:	10c00d17 	ldw	r3,52(r2)
811066f8:	e0bff117 	ldw	r2,-60(fp)
811066fc:	1884b03a 	or	r2,r3,r2
81106700:	10800114 	ori	r2,r2,4
81106704:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
81106708:	e0fff117 	ldw	r3,-60(fp)
8110670c:	00bff3c4 	movi	r2,-49
81106710:	1884703a 	and	r2,r3,r2
81106714:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106718:	0005303a 	rdctl	r2,status
8110671c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106720:	e0fffa17 	ldw	r3,-24(fp)
81106724:	00bfff84 	movi	r2,-2
81106728:	1884703a 	and	r2,r3,r2
8110672c:	1001703a 	wrctl	status,r2
  
  return context;
81106730:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81106734:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106738:	e0bffd17 	ldw	r2,-12(fp)
8110673c:	10800317 	ldw	r2,12(r2)
81106740:	10800104 	addi	r2,r2,4
81106744:	e0fff117 	ldw	r3,-60(fp)
81106748:	10c00035 	stwio	r3,0(r2)
8110674c:	e0bff217 	ldw	r2,-56(fp)
81106750:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106754:	e0bff817 	ldw	r2,-32(fp)
81106758:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
8110675c:	e0bffd17 	ldw	r2,-12(fp)
81106760:	10801817 	ldw	r2,96(r2)
81106764:	1009883a 	mov	r4,r2
81106768:	112e7900 	call	8112e790 <OSSemPost>

	return 0;
8110676c:	0005883a 	mov	r2,zero
}
81106770:	e037883a 	mov	sp,fp
81106774:	dfc00117 	ldw	ra,4(sp)
81106778:	df000017 	ldw	fp,0(sp)
8110677c:	dec00204 	addi	sp,sp,8
81106780:	f800283a 	ret

81106784 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
81106784:	deffee04 	addi	sp,sp,-72
81106788:	de00012e 	bgeu	sp,et,81106790 <msgdma_descriptor_sync_transfer+0xc>
8110678c:	003b68fa 	trap	3
81106790:	dfc01115 	stw	ra,68(sp)
81106794:	df001015 	stw	fp,64(sp)
81106798:	df001004 	addi	fp,sp,64
8110679c:	e13ffd15 	stw	r4,-12(fp)
811067a0:	e17ffe15 	stw	r5,-8(fp)
811067a4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
811067a8:	e03ff415 	stw	zero,-48(fp)
	alt_irq_context context = 0;
811067ac:	e03ff515 	stw	zero,-44(fp)
	alt_u32 csr_status = 0;
811067b0:	e03ff015 	stw	zero,-64(fp)
	alt_u16 counter = 0;
811067b4:	e03ff10d 	sth	zero,-60(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811067b8:	e0bffd17 	ldw	r2,-12(fp)
811067bc:	10800317 	ldw	r2,12(r2)
811067c0:	10800204 	addi	r2,r2,8
811067c4:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
811067c8:	10bfffcc 	andi	r2,r2,65535
811067cc:	e0bff215 	stw	r2,-56(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811067d0:	e0bffd17 	ldw	r2,-12(fp)
811067d4:	10800317 	ldw	r2,12(r2)
811067d8:	10800204 	addi	r2,r2,8
811067dc:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
811067e0:	1004d43a 	srli	r2,r2,16
811067e4:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
811067e8:	00807804 	movi	r2,480
811067ec:	e0bff615 	stw	r2,-40(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811067f0:	00001d06 	br	81106868 <msgdma_descriptor_sync_transfer+0xe4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
811067f4:	01000044 	movi	r4,1
811067f8:	11266bc0 	call	811266bc <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811067fc:	e0bff10b 	ldhu	r2,-60(fp)
81106800:	1084e230 	cmpltui	r2,r2,5000
81106804:	1000091e 	bne	r2,zero,8110682c <msgdma_descriptor_sync_transfer+0xa8>
		{
#ifdef DEBUG_ON
			debug(fp,
81106808:	d0a04d17 	ldw	r2,-32460(gp)
8110680c:	100f883a 	mov	r7,r2
81106810:	01801304 	movi	r6,76
81106814:	01400044 	movi	r5,1
81106818:	01204534 	movhi	r4,33044
8110681c:	212fce04 	addi	r4,r4,-16584
81106820:	11116b00 	call	811116b0 <fwrite>
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
81106824:	00bff084 	movi	r2,-62
81106828:	0000d006 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
8110682c:	e0bff10b 	ldhu	r2,-60(fp)
81106830:	10800044 	addi	r2,r2,1
81106834:	e0bff10d 	sth	r2,-60(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106838:	e0bffd17 	ldw	r2,-12(fp)
8110683c:	10800317 	ldw	r2,12(r2)
81106840:	10800204 	addi	r2,r2,8
81106844:	10800037 	ldwio	r2,0(r2)
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
81106848:	10bfffcc 	andi	r2,r2,65535
8110684c:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106850:	e0bffd17 	ldw	r2,-12(fp)
81106854:	10800317 	ldw	r2,12(r2)
81106858:	10800204 	addi	r2,r2,8
8110685c:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
81106860:	1004d43a 	srli	r2,r2,16
81106864:	e0bff315 	stw	r2,-52(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81106868:	e0bffd17 	ldw	r2,-12(fp)
8110686c:	10800917 	ldw	r2,36(r2)
81106870:	e0fff317 	ldw	r3,-52(fp)
81106874:	18bfdf2e 	bgeu	r3,r2,811067f4 <__reset+0xfb0e67f4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
81106878:	e0bffd17 	ldw	r2,-12(fp)
8110687c:	10800917 	ldw	r2,36(r2)
81106880:	e0fff217 	ldw	r3,-56(fp)
81106884:	18bfdb2e 	bgeu	r3,r2,811067f4 <__reset+0xfb0e67f4>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
81106888:	e0bffd17 	ldw	r2,-12(fp)
8110688c:	10801817 	ldw	r2,96(r2)
81106890:	e0bff815 	stw	r2,-32(fp)
81106894:	e03ffc0d 	sth	zero,-16(fp)
81106898:	e0bffc0b 	ldhu	r2,-16(fp)
8110689c:	e0fffc84 	addi	r3,fp,-14
811068a0:	180d883a 	mov	r6,r3
811068a4:	100b883a 	mov	r5,r2
811068a8:	e13ff817 	ldw	r4,-32(fp)
811068ac:	112e4080 	call	8112e408 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811068b0:	0005303a 	rdctl	r2,status
811068b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811068b8:	e0fffb17 	ldw	r3,-20(fp)
811068bc:	00bfff84 	movi	r2,-2
811068c0:	1884703a 	and	r2,r3,r2
811068c4:	1001703a 	wrctl	status,r2
  
  return context;
811068c8:	e0bffb17 	ldw	r2,-20(fp)

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811068cc:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811068d0:	e0bffd17 	ldw	r2,-12(fp)
811068d4:	10800317 	ldw	r2,12(r2)
811068d8:	10800104 	addi	r2,r2,4
811068dc:	00c00804 	movi	r3,32
811068e0:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811068e4:	e0bffd17 	ldw	r2,-12(fp)
811068e8:	10800317 	ldw	r2,12(r2)
811068ec:	e0fffd17 	ldw	r3,-12(fp)
811068f0:	18c00317 	ldw	r3,12(r3)
811068f4:	18c00037 	ldwio	r3,0(r3)
811068f8:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
811068fc:	e0bffe17 	ldw	r2,-8(fp)
81106900:	10001026 	beq	r2,zero,81106944 <msgdma_descriptor_sync_transfer+0x1c0>
81106904:	e0bfff17 	ldw	r2,-4(fp)
81106908:	10000e1e 	bne	r2,zero,81106944 <msgdma_descriptor_sync_transfer+0x1c0>
		counter = 0; /* reset counter */
8110690c:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106910:	d0a04d17 	ldw	r2,-32460(gp)
81106914:	100f883a 	mov	r7,r2
81106918:	01800784 	movi	r6,30
8110691c:	01400044 	movi	r5,1
81106920:	01204534 	movhi	r4,33044
81106924:	212fb004 	addi	r4,r4,-16704
81106928:	11116b00 	call	811116b0 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110692c:	e0bffd17 	ldw	r2,-12(fp)
81106930:	10801817 	ldw	r2,96(r2)
81106934:	1009883a 	mov	r4,r2
81106938:	112e7900 	call	8112e790 <OSSemPost>

		return -ETIME;
8110693c:	00bff084 	movi	r2,-62
81106940:	00008a06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106944:	e0bffe17 	ldw	r2,-8(fp)
81106948:	1000231e 	bne	r2,zero,811069d8 <msgdma_descriptor_sync_transfer+0x254>
8110694c:	e0bfff17 	ldw	r2,-4(fp)
81106950:	10002126 	beq	r2,zero,811069d8 <msgdma_descriptor_sync_transfer+0x254>
		counter = 0; /* reset counter */
81106954:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106958:	00001506 	br	811069b0 <msgdma_descriptor_sync_transfer+0x22c>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
8110695c:	01000044 	movi	r4,1
81106960:	11266bc0 	call	811266bc <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106964:	e0bff10b 	ldhu	r2,-60(fp)
81106968:	1084e230 	cmpltui	r2,r2,5000
8110696c:	10000d1e 	bne	r2,zero,811069a4 <msgdma_descriptor_sync_transfer+0x220>
			{
#ifdef DEBUG_ON
				debug(fp,
81106970:	d0a04d17 	ldw	r2,-32460(gp)
81106974:	100f883a 	mov	r7,r2
81106978:	01801004 	movi	r6,64
8110697c:	01400044 	movi	r5,1
81106980:	01204534 	movhi	r4,33044
81106984:	212fe204 	addi	r4,r4,-16504
81106988:	11116b00 	call	811116b0 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
8110698c:	e0bffd17 	ldw	r2,-12(fp)
81106990:	10801817 	ldw	r2,96(r2)
81106994:	1009883a 	mov	r4,r2
81106998:	112e7900 	call	8112e790 <OSSemPost>

				return -ETIME;
8110699c:	00bff084 	movi	r2,-62
811069a0:	00007206 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
			}
			counter++;
811069a4:	e0bff10b 	ldhu	r2,-60(fp)
811069a8:	10800044 	addi	r2,r2,1
811069ac:	e0bff10d 	sth	r2,-60(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
811069b0:	e0bffd17 	ldw	r2,-12(fp)
811069b4:	10c00317 	ldw	r3,12(r2)
811069b8:	e0bffd17 	ldw	r2,-12(fp)
811069bc:	10800417 	ldw	r2,16(r2)
811069c0:	e1bfff17 	ldw	r6,-4(fp)
811069c4:	100b883a 	mov	r5,r2
811069c8:	1809883a 	mov	r4,r3
811069cc:	11061cc0 	call	811061cc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811069d0:	103fe21e 	bne	r2,zero,8110695c <__reset+0xfb0e695c>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
811069d4:	00000606 	br	811069f0 <msgdma_descriptor_sync_transfer+0x26c>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811069d8:	e0bffd17 	ldw	r2,-12(fp)
811069dc:	10801817 	ldw	r2,96(r2)
811069e0:	1009883a 	mov	r4,r2
811069e4:	112e7900 	call	8112e790 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
811069e8:	00bfffc4 	movi	r2,-1
811069ec:	00005f06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811069f0:	e0bffd17 	ldw	r2,-12(fp)
811069f4:	10800317 	ldw	r2,12(r2)
811069f8:	10800104 	addi	r2,r2,4
811069fc:	e0fffd17 	ldw	r3,-12(fp)
81106a00:	19000d17 	ldw	r4,52(r3)
81106a04:	00fff2c4 	movi	r3,-53
81106a08:	20c6703a 	and	r3,r4,r3
81106a0c:	18c00114 	ori	r3,r3,4
81106a10:	10c00035 	stwio	r3,0(r2)
81106a14:	e0bff517 	ldw	r2,-44(fp)
81106a18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106a1c:	e0bff717 	ldw	r2,-36(fp)
81106a20:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
81106a24:	e03ff10d 	sth	zero,-60(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a28:	e0bffd17 	ldw	r2,-12(fp)
81106a2c:	10800317 	ldw	r2,12(r2)
81106a30:	10800037 	ldwio	r2,0(r2)
81106a34:	e0bff015 	stw	r2,-64(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106a38:	00001906 	br	81106aa0 <msgdma_descriptor_sync_transfer+0x31c>
		alt_busy_sleep(1); /* delay 1us */
81106a3c:	01000044 	movi	r4,1
81106a40:	11266bc0 	call	811266bc <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106a44:	e0bff10b 	ldhu	r2,-60(fp)
81106a48:	1084e230 	cmpltui	r2,r2,5000
81106a4c:	10000d1e 	bne	r2,zero,81106a84 <msgdma_descriptor_sync_transfer+0x300>
		{
#ifdef DEBUG_ON
			debug(fp,
81106a50:	d0a04d17 	ldw	r2,-32460(gp)
81106a54:	100f883a 	mov	r7,r2
81106a58:	01801184 	movi	r6,70
81106a5c:	01400044 	movi	r5,1
81106a60:	01204534 	movhi	r4,33044
81106a64:	212ff304 	addi	r4,r4,-16436
81106a68:	11116b00 	call	811116b0 <fwrite>

			/*
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);
81106a6c:	e0bffd17 	ldw	r2,-12(fp)
81106a70:	10801817 	ldw	r2,96(r2)
81106a74:	1009883a 	mov	r4,r2
81106a78:	112e7900 	call	8112e790 <OSSemPost>

			return -ETIME;
81106a7c:	00bff084 	movi	r2,-62
81106a80:	00003a06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
81106a84:	e0bff10b 	ldhu	r2,-60(fp)
81106a88:	10800044 	addi	r2,r2,1
81106a8c:	e0bff10d 	sth	r2,-60(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a90:	e0bffd17 	ldw	r2,-12(fp)
81106a94:	10800317 	ldw	r2,12(r2)
81106a98:	10800037 	ldwio	r2,0(r2)
81106a9c:	e0bff015 	stw	r2,-64(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106aa0:	e0fff017 	ldw	r3,-64(fp)
81106aa4:	e0bff617 	ldw	r2,-40(fp)
81106aa8:	1884703a 	and	r2,r3,r2
81106aac:	1000031e 	bne	r2,zero,81106abc <msgdma_descriptor_sync_transfer+0x338>
81106ab0:	e0bff017 	ldw	r2,-64(fp)
81106ab4:	1080004c 	andi	r2,r2,1
81106ab8:	103fe01e 	bne	r2,zero,81106a3c <__reset+0xfb0e6a3c>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81106abc:	e0fff017 	ldw	r3,-64(fp)
81106ac0:	e0bff617 	ldw	r2,-40(fp)
81106ac4:	1884703a 	and	r2,r3,r2
81106ac8:	10000626 	beq	r2,zero,81106ae4 <msgdma_descriptor_sync_transfer+0x360>
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106acc:	e0bffd17 	ldw	r2,-12(fp)
81106ad0:	10801817 	ldw	r2,96(r2)
81106ad4:	1009883a 	mov	r4,r2
81106ad8:	112e7900 	call	8112e790 <OSSemPost>

		return error;
81106adc:	e0bff617 	ldw	r2,-40(fp)
81106ae0:	00002206 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
81106ae4:	e0bffd17 	ldw	r2,-12(fp)
81106ae8:	10800317 	ldw	r2,12(r2)
81106aec:	10800104 	addi	r2,r2,4
81106af0:	10800037 	ldwio	r2,0(r2)
81106af4:	10800814 	ori	r2,r2,32
81106af8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106afc:	0005303a 	rdctl	r2,status
81106b00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106b04:	e0fffa17 	ldw	r3,-24(fp)
81106b08:	00bfff84 	movi	r2,-2
81106b0c:	1884703a 	and	r2,r3,r2
81106b10:	1001703a 	wrctl	status,r2
  
  return context;
81106b14:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106b18:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106b1c:	e0bffd17 	ldw	r2,-12(fp)
81106b20:	10800317 	ldw	r2,12(r2)
81106b24:	10800104 	addi	r2,r2,4
81106b28:	e0fff417 	ldw	r3,-48(fp)
81106b2c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106b30:	e0bffd17 	ldw	r2,-12(fp)
81106b34:	10800317 	ldw	r2,12(r2)
81106b38:	e0fffd17 	ldw	r3,-12(fp)
81106b3c:	18c00317 	ldw	r3,12(r3)
81106b40:	18c00037 	ldwio	r3,0(r3)
81106b44:	10c00035 	stwio	r3,0(r2)
81106b48:	e0bff517 	ldw	r2,-44(fp)
81106b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106b50:	e0bff917 	ldw	r2,-28(fp)
81106b54:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
81106b58:	e0bffd17 	ldw	r2,-12(fp)
81106b5c:	10801817 	ldw	r2,96(r2)
81106b60:	1009883a 	mov	r4,r2
81106b64:	112e7900 	call	8112e790 <OSSemPost>

	return 0;
81106b68:	0005883a 	mov	r2,zero

}
81106b6c:	e037883a 	mov	sp,fp
81106b70:	dfc00117 	ldw	ra,4(sp)
81106b74:	df000017 	ldw	fp,0(sp)
81106b78:	dec00204 	addi	sp,sp,8
81106b7c:	f800283a 	ret

81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
81106b80:	deffec04 	addi	sp,sp,-80
81106b84:	de00012e 	bgeu	sp,et,81106b8c <iMsgdmaConstructExtendedMmToMmDescriptor+0xc>
81106b88:	003b68fa 	trap	3
81106b8c:	dfc01315 	stw	ra,76(sp)
81106b90:	df001215 	stw	fp,72(sp)
81106b94:	df001204 	addi	fp,sp,72
81106b98:	e13ff715 	stw	r4,-36(fp)
81106b9c:	e17ff815 	stw	r5,-32(fp)
81106ba0:	e1bff915 	stw	r6,-28(fp)
81106ba4:	e1fffa15 	stw	r7,-24(fp)
81106ba8:	e1800617 	ldw	r6,24(fp)
81106bac:	e1400717 	ldw	r5,28(fp)
81106bb0:	e1000817 	ldw	r4,32(fp)
81106bb4:	e0c00917 	ldw	r3,36(fp)
81106bb8:	e0800a17 	ldw	r2,40(fp)
81106bbc:	e1bffb0d 	sth	r6,-20(fp)
81106bc0:	e17ffc05 	stb	r5,-16(fp)
81106bc4:	e13ffd05 	stb	r4,-12(fp)
81106bc8:	e0fffe0d 	sth	r3,-8(fp)
81106bcc:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
81106bd0:	e0bffb0b 	ldhu	r2,-20(fp)
81106bd4:	e0fffc03 	ldbu	r3,-16(fp)
81106bd8:	e13ffd03 	ldbu	r4,-12(fp)
81106bdc:	e17ffe0b 	ldhu	r5,-8(fp)
81106be0:	e1bfff0b 	ldhu	r6,-4(fp)
81106be4:	d9800815 	stw	r6,32(sp)
81106be8:	d9400715 	stw	r5,28(sp)
81106bec:	d9000615 	stw	r4,24(sp)
81106bf0:	d8c00515 	stw	r3,20(sp)
81106bf4:	d8800415 	stw	r2,16(sp)
81106bf8:	e0800517 	ldw	r2,20(fp)
81106bfc:	d8800315 	stw	r2,12(sp)
81106c00:	e0800417 	ldw	r2,16(fp)
81106c04:	d8800215 	stw	r2,8(sp)
81106c08:	e0800317 	ldw	r2,12(fp)
81106c0c:	d8800115 	stw	r2,4(sp)
81106c10:	e0800217 	ldw	r2,8(fp)
81106c14:	d8800015 	stw	r2,0(sp)
81106c18:	e1fffa17 	ldw	r7,-24(fp)
81106c1c:	e1bff917 	ldw	r6,-28(fp)
81106c20:	e17ff817 	ldw	r5,-32(fp)
81106c24:	e13ff717 	ldw	r4,-36(fp)
81106c28:	11063080 	call	81106308 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
81106c2c:	e037883a 	mov	sp,fp
81106c30:	dfc00117 	ldw	ra,4(sp)
81106c34:	df000017 	ldw	fp,0(sp)
81106c38:	dec00204 	addi	sp,sp,8
81106c3c:	f800283a 	ret

81106c40 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106c40:	defffc04 	addi	sp,sp,-16
81106c44:	de00012e 	bgeu	sp,et,81106c4c <iMsgdmaExtendedDescriptorAsyncTransfer+0xc>
81106c48:	003b68fa 	trap	3
81106c4c:	dfc00315 	stw	ra,12(sp)
81106c50:	df000215 	stw	fp,8(sp)
81106c54:	df000204 	addi	fp,sp,8
81106c58:	e13ffe15 	stw	r4,-8(fp)
81106c5c:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
81106c60:	e1bfff17 	ldw	r6,-4(fp)
81106c64:	000b883a 	mov	r5,zero
81106c68:	e13ffe17 	ldw	r4,-8(fp)
81106c6c:	110646c0 	call	8110646c <msgdma_descriptor_async_transfer>
}
81106c70:	e037883a 	mov	sp,fp
81106c74:	dfc00117 	ldw	ra,4(sp)
81106c78:	df000017 	ldw	fp,0(sp)
81106c7c:	dec00204 	addi	sp,sp,8
81106c80:	f800283a 	ret

81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106c84:	defffc04 	addi	sp,sp,-16
81106c88:	de00012e 	bgeu	sp,et,81106c90 <iMsgdmaExtendedDescriptorSyncTransfer+0xc>
81106c8c:	003b68fa 	trap	3
81106c90:	dfc00315 	stw	ra,12(sp)
81106c94:	df000215 	stw	fp,8(sp)
81106c98:	df000204 	addi	fp,sp,8
81106c9c:	e13ffe15 	stw	r4,-8(fp)
81106ca0:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
81106ca4:	e1bfff17 	ldw	r6,-4(fp)
81106ca8:	000b883a 	mov	r5,zero
81106cac:	e13ffe17 	ldw	r4,-8(fp)
81106cb0:	11067840 	call	81106784 <msgdma_descriptor_sync_transfer>
}
81106cb4:	e037883a 	mov	sp,fp
81106cb8:	dfc00117 	ldw	ra,4(sp)
81106cbc:	df000017 	ldw	fp,0(sp)
81106cc0:	dec00204 	addi	sp,sp,8
81106cc4:	f800283a 	ret

81106cc8 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
81106cc8:	defff204 	addi	sp,sp,-56
81106ccc:	de00012e 	bgeu	sp,et,81106cd4 <POWER_SPI_RW+0xc>
81106cd0:	003b68fa 	trap	3
81106cd4:	dfc00d15 	stw	ra,52(sp)
81106cd8:	df000c15 	stw	fp,48(sp)
81106cdc:	df000c04 	addi	fp,sp,48
81106ce0:	2007883a 	mov	r3,r4
81106ce4:	2805883a 	mov	r2,r5
81106ce8:	e1bffe15 	stw	r6,-8(fp)
81106cec:	e1ffff15 	stw	r7,-4(fp)
81106cf0:	e0fffc05 	stb	r3,-16(fp)
81106cf4:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
81106cf8:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
81106cfc:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
81106d00:	008003f4 	movhi	r2,15
81106d04:	10909004 	addi	r2,r2,16960
81106d08:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
81106d0c:	00bfe004 	movi	r2,-128
81106d10:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
81106d14:	e0bffe17 	ldw	r2,-8(fp)
81106d18:	10000226 	beq	r2,zero,81106d24 <POWER_SPI_RW+0x5c>
81106d1c:	00800804 	movi	r2,32
81106d20:	00000106 	br	81106d28 <POWER_SPI_RW+0x60>
81106d24:	0005883a 	mov	r2,zero
81106d28:	e0fff403 	ldbu	r3,-48(fp)
81106d2c:	10c4b03a 	or	r2,r2,r3
81106d30:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
81106d34:	e0800217 	ldw	r2,8(fp)
81106d38:	10000226 	beq	r2,zero,81106d44 <POWER_SPI_RW+0x7c>
81106d3c:	00800404 	movi	r2,16
81106d40:	00000106 	br	81106d48 <POWER_SPI_RW+0x80>
81106d44:	0005883a 	mov	r2,zero
81106d48:	e0fff403 	ldbu	r3,-48(fp)
81106d4c:	10c4b03a 	or	r2,r2,r3
81106d50:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
81106d54:	e0bfff17 	ldw	r2,-4(fp)
81106d58:	10000226 	beq	r2,zero,81106d64 <POWER_SPI_RW+0x9c>
81106d5c:	00800204 	movi	r2,8
81106d60:	00000106 	br	81106d68 <POWER_SPI_RW+0xa0>
81106d64:	0005883a 	mov	r2,zero
81106d68:	e0fff403 	ldbu	r3,-48(fp)
81106d6c:	10c4b03a 	or	r2,r2,r3
81106d70:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
81106d74:	e0bffd03 	ldbu	r2,-12(fp)
81106d78:	108001cc 	andi	r2,r2,7
81106d7c:	1007883a 	mov	r3,r2
81106d80:	e0bff403 	ldbu	r2,-48(fp)
81106d84:	1884b03a 	or	r2,r3,r2
81106d88:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
81106d8c:	0007883a 	mov	r3,zero
81106d90:	00a00034 	movhi	r2,32768
81106d94:	10824404 	addi	r2,r2,2320
81106d98:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
81106d9c:	0007883a 	mov	r3,zero
81106da0:	00a00034 	movhi	r2,32768
81106da4:	10824c04 	addi	r2,r2,2352
81106da8:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
81106dac:	e0bffc03 	ldbu	r2,-16(fp)
81106db0:	1000021e 	bne	r2,zero,81106dbc <POWER_SPI_RW+0xf4>
81106db4:	00c00084 	movi	r3,2
81106db8:	00000106 	br	81106dc0 <POWER_SPI_RW+0xf8>
81106dbc:	00c00044 	movi	r3,1
81106dc0:	00a00034 	movhi	r2,32768
81106dc4:	10824804 	addi	r2,r2,2336
81106dc8:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
81106dcc:	010003c4 	movi	r4,15
81106dd0:	112758c0 	call	8112758c <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106dd4:	00000306 	br	81106de4 <POWER_SPI_RW+0x11c>
		nWait++;
81106dd8:	e0bff817 	ldw	r2,-32(fp)
81106ddc:	10800044 	addi	r2,r2,1
81106de0:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106de4:	00a00034 	movhi	r2,32768
81106de8:	10825404 	addi	r2,r2,2384
81106dec:	10800037 	ldwio	r2,0(r2)
81106df0:	1080004c 	andi	r2,r2,1
81106df4:	10000326 	beq	r2,zero,81106e04 <POWER_SPI_RW+0x13c>
81106df8:	e0fff817 	ldw	r3,-32(fp)
81106dfc:	e0bffa17 	ldw	r2,-24(fp)
81106e00:	18bff516 	blt	r3,r2,81106dd8 <__reset+0xfb0e6dd8>
		nWait++;
	}

	if (SPI_SDO) {
81106e04:	00a00034 	movhi	r2,32768
81106e08:	10825404 	addi	r2,r2,2384
81106e0c:	10800037 	ldwio	r2,0(r2)
81106e10:	1080004c 	andi	r2,r2,1
81106e14:	10000626 	beq	r2,zero,81106e30 <POWER_SPI_RW+0x168>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
81106e18:	00c000c4 	movi	r3,3
81106e1c:	00a00034 	movhi	r2,32768
81106e20:	10824804 	addi	r2,r2,2336
81106e24:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG_ON
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
81106e28:	0005883a 	mov	r2,zero
81106e2c:	0000db06 	br	8110719c <POWER_SPI_RW+0x4d4>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106e30:	e03ff715 	stw	zero,-36(fp)
81106e34:	00002406 	br	81106ec8 <POWER_SPI_RW+0x200>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
81106e38:	e0bff403 	ldbu	r2,-48(fp)
81106e3c:	10803fcc 	andi	r2,r2,255
81106e40:	1004d1fa 	srli	r2,r2,7
81106e44:	10c03fcc 	andi	r3,r2,255
81106e48:	00a00034 	movhi	r2,32768
81106e4c:	10825004 	addi	r2,r2,2368
81106e50:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106e54:	e0bff403 	ldbu	r2,-48(fp)
81106e58:	1085883a 	add	r2,r2,r2
81106e5c:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81106e60:	e0bff517 	ldw	r2,-44(fp)
81106e64:	1085883a 	add	r2,r2,r2
81106e68:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81106e6c:	00a00034 	movhi	r2,32768
81106e70:	10825404 	addi	r2,r2,2384
81106e74:	10800037 	ldwio	r2,0(r2)
81106e78:	1080004c 	andi	r2,r2,1
81106e7c:	1007883a 	mov	r3,r2
81106e80:	e0bff517 	ldw	r2,-44(fp)
81106e84:	10c4b03a 	or	r2,r2,r3
81106e88:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106e8c:	00c00044 	movi	r3,1
81106e90:	00a00034 	movhi	r2,32768
81106e94:	10824c04 	addi	r2,r2,2352
81106e98:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106e9c:	010003c4 	movi	r4,15
81106ea0:	112758c0 	call	8112758c <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106ea4:	0007883a 	mov	r3,zero
81106ea8:	00a00034 	movhi	r2,32768
81106eac:	10824c04 	addi	r2,r2,2352
81106eb0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106eb4:	010003c4 	movi	r4,15
81106eb8:	112758c0 	call	8112758c <usleep>
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106ebc:	e0bff717 	ldw	r2,-36(fp)
81106ec0:	10800044 	addi	r2,r2,1
81106ec4:	e0bff715 	stw	r2,-36(fp)
81106ec8:	e0bff717 	ldw	r2,-36(fp)
81106ecc:	10800090 	cmplti	r2,r2,2
81106ed0:	103fd91e 	bne	r2,zero,81106e38 <__reset+0xfb0e6e38>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106ed4:	e03ff715 	stw	zero,-36(fp)
81106ed8:	00002406 	br	81106f6c <POWER_SPI_RW+0x2a4>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
81106edc:	e0bff403 	ldbu	r2,-48(fp)
81106ee0:	10803fcc 	andi	r2,r2,255
81106ee4:	1004d1fa 	srli	r2,r2,7
81106ee8:	10c03fcc 	andi	r3,r2,255
81106eec:	00a00034 	movhi	r2,32768
81106ef0:	10825004 	addi	r2,r2,2368
81106ef4:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106ef8:	e0bff403 	ldbu	r2,-48(fp)
81106efc:	1085883a 	add	r2,r2,r2
81106f00:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81106f04:	e0bff517 	ldw	r2,-44(fp)
81106f08:	1085883a 	add	r2,r2,r2
81106f0c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81106f10:	00a00034 	movhi	r2,32768
81106f14:	10825404 	addi	r2,r2,2384
81106f18:	10800037 	ldwio	r2,0(r2)
81106f1c:	1080004c 	andi	r2,r2,1
81106f20:	1007883a 	mov	r3,r2
81106f24:	e0bff517 	ldw	r2,-44(fp)
81106f28:	10c4b03a 	or	r2,r2,r3
81106f2c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106f30:	00c00044 	movi	r3,1
81106f34:	00a00034 	movhi	r2,32768
81106f38:	10824c04 	addi	r2,r2,2352
81106f3c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f40:	010003c4 	movi	r4,15
81106f44:	112758c0 	call	8112758c <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106f48:	0007883a 	mov	r3,zero
81106f4c:	00a00034 	movhi	r2,32768
81106f50:	10824c04 	addi	r2,r2,2352
81106f54:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f58:	010003c4 	movi	r4,15
81106f5c:	112758c0 	call	8112758c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106f60:	e0bff717 	ldw	r2,-36(fp)
81106f64:	10800044 	addi	r2,r2,1
81106f68:	e0bff715 	stw	r2,-36(fp)
81106f6c:	e0bff717 	ldw	r2,-36(fp)
81106f70:	10800210 	cmplti	r2,r2,8
81106f74:	103fd91e 	bne	r2,zero,81106edc <__reset+0xfb0e6edc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106f78:	e03ff715 	stw	zero,-36(fp)
81106f7c:	00001a06 	br	81106fe8 <POWER_SPI_RW+0x320>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81106f80:	e0bff517 	ldw	r2,-44(fp)
81106f84:	1085883a 	add	r2,r2,r2
81106f88:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106f8c:	00a00034 	movhi	r2,32768
81106f90:	10825404 	addi	r2,r2,2384
81106f94:	10800037 	ldwio	r2,0(r2)
81106f98:	1080004c 	andi	r2,r2,1
81106f9c:	1007883a 	mov	r3,r2
81106fa0:	e0bff517 	ldw	r2,-44(fp)
81106fa4:	10c4b03a 	or	r2,r2,r3
81106fa8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106fac:	00c00044 	movi	r3,1
81106fb0:	00a00034 	movhi	r2,32768
81106fb4:	10824c04 	addi	r2,r2,2352
81106fb8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fbc:	010003c4 	movi	r4,15
81106fc0:	112758c0 	call	8112758c <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106fc4:	0007883a 	mov	r3,zero
81106fc8:	00a00034 	movhi	r2,32768
81106fcc:	10824c04 	addi	r2,r2,2352
81106fd0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fd4:	010003c4 	movi	r4,15
81106fd8:	112758c0 	call	8112758c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106fdc:	e0bff717 	ldw	r2,-36(fp)
81106fe0:	10800044 	addi	r2,r2,1
81106fe4:	e0bff715 	stw	r2,-36(fp)
81106fe8:	e0bff717 	ldw	r2,-36(fp)
81106fec:	10800210 	cmplti	r2,r2,8
81106ff0:	103fe31e 	bne	r2,zero,81106f80 <__reset+0xfb0e6f80>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81106ff4:	e03ff715 	stw	zero,-36(fp)
81106ff8:	00001a06 	br	81107064 <POWER_SPI_RW+0x39c>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
81106ffc:	e0bff517 	ldw	r2,-44(fp)
81107000:	1085883a 	add	r2,r2,r2
81107004:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
81107008:	00a00034 	movhi	r2,32768
8110700c:	10825404 	addi	r2,r2,2384
81107010:	10800037 	ldwio	r2,0(r2)
81107014:	1080004c 	andi	r2,r2,1
81107018:	1007883a 	mov	r3,r2
8110701c:	e0bff517 	ldw	r2,-44(fp)
81107020:	10c4b03a 	or	r2,r2,r3
81107024:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107028:	00c00044 	movi	r3,1
8110702c:	00a00034 	movhi	r2,32768
81107030:	10824c04 	addi	r2,r2,2352
81107034:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107038:	010003c4 	movi	r4,15
8110703c:	112758c0 	call	8112758c <usleep>
		SPI_SCK(0); //sck=0; // clock low
81107040:	0007883a 	mov	r3,zero
81107044:	00a00034 	movhi	r2,32768
81107048:	10824c04 	addi	r2,r2,2352
8110704c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107050:	010003c4 	movi	r4,15
81107054:	112758c0 	call	8112758c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81107058:	e0bff717 	ldw	r2,-36(fp)
8110705c:	10800044 	addi	r2,r2,1
81107060:	e0bff715 	stw	r2,-36(fp)
81107064:	e0bff717 	ldw	r2,-36(fp)
81107068:	10800210 	cmplti	r2,r2,8
8110706c:	103fe31e 	bne	r2,zero,81106ffc <__reset+0xfb0e6ffc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
81107070:	e03ff715 	stw	zero,-36(fp)
81107074:	00001a06 	br	811070e0 <POWER_SPI_RW+0x418>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81107078:	e0bff517 	ldw	r2,-44(fp)
8110707c:	1085883a 	add	r2,r2,r2
81107080:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81107084:	00a00034 	movhi	r2,32768
81107088:	10825404 	addi	r2,r2,2384
8110708c:	10800037 	ldwio	r2,0(r2)
81107090:	1080004c 	andi	r2,r2,1
81107094:	1007883a 	mov	r3,r2
81107098:	e0bff517 	ldw	r2,-44(fp)
8110709c:	10c4b03a 	or	r2,r2,r3
811070a0:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
811070a4:	00c00044 	movi	r3,1
811070a8:	00a00034 	movhi	r2,32768
811070ac:	10824c04 	addi	r2,r2,2352
811070b0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070b4:	010003c4 	movi	r4,15
811070b8:	112758c0 	call	8112758c <usleep>
		SPI_SCK(0); //sck=0; // clock low
811070bc:	0007883a 	mov	r3,zero
811070c0:	00a00034 	movhi	r2,32768
811070c4:	10824c04 	addi	r2,r2,2352
811070c8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070cc:	010003c4 	movi	r4,15
811070d0:	112758c0 	call	8112758c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
811070d4:	e0bff717 	ldw	r2,-36(fp)
811070d8:	10800044 	addi	r2,r2,1
811070dc:	e0bff715 	stw	r2,-36(fp)
811070e0:	e0bff717 	ldw	r2,-36(fp)
811070e4:	10800190 	cmplti	r2,r2,6
811070e8:	103fe31e 	bne	r2,zero,81107078 <__reset+0xfb0e7078>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
811070ec:	00c00044 	movi	r3,1
811070f0:	00a00034 	movhi	r2,32768
811070f4:	10824c04 	addi	r2,r2,2352
811070f8:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
811070fc:	010003c4 	movi	r4,15
81107100:	112758c0 	call	8112758c <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
81107104:	00c000c4 	movi	r3,3
81107108:	00a00034 	movhi	r2,32768
8110710c:	10824804 	addi	r2,r2,2336
81107110:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
81107114:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
81107118:	00800044 	movi	r2,1
8110711c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
81107120:	e03ff715 	stw	zero,-36(fp)
81107124:	00000d06 	br	8110715c <POWER_SPI_RW+0x494>
		if ((Value32 & Mask32) == 0x00) {
81107128:	e0fff517 	ldw	r3,-44(fp)
8110712c:	e0bff617 	ldw	r2,-40(fp)
81107130:	1884703a 	and	r2,r3,r2
81107134:	1000031e 	bne	r2,zero,81107144 <POWER_SPI_RW+0x47c>
			nZeroCnt++;
81107138:	e0bff917 	ldw	r2,-28(fp)
8110713c:	10800044 	addi	r2,r2,1
81107140:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
81107144:	e0bff617 	ldw	r2,-40(fp)
81107148:	1085883a 	add	r2,r2,r2
8110714c:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
81107150:	e0bff717 	ldw	r2,-36(fp)
81107154:	10800044 	addi	r2,r2,1
81107158:	e0bff715 	stw	r2,-36(fp)
8110715c:	e0bff717 	ldw	r2,-36(fp)
81107160:	10800810 	cmplti	r2,r2,32
81107164:	103ff01e 	bne	r2,zero,81107128 <__reset+0xfb0e7128>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
81107168:	e0bff917 	ldw	r2,-28(fp)
8110716c:	1080004c 	andi	r2,r2,1
81107170:	1005003a 	cmpeq	r2,r2,zero
81107174:	10803fcc 	andi	r2,r2,255
81107178:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
8110717c:	e0bffb17 	ldw	r2,-20(fp)
81107180:	1000021e 	bne	r2,zero,8110718c <POWER_SPI_RW+0x4c4>
#ifdef DEBUG_ON
//		debug(fp, "Parity Check Error \r\n");
#endif
		return FALSE;
81107184:	0005883a 	mov	r2,zero
81107188:	00000406 	br	8110719c <POWER_SPI_RW+0x4d4>
	}

	*pValue = Value32;
8110718c:	e0800317 	ldw	r2,12(fp)
81107190:	e0fff517 	ldw	r3,-44(fp)
81107194:	10c00015 	stw	r3,0(r2)

	return bSuccess;
81107198:	e0bffb17 	ldw	r2,-20(fp)
}
8110719c:	e037883a 	mov	sp,fp
811071a0:	dfc00117 	ldw	ra,4(sp)
811071a4:	df000017 	ldw	fp,0(sp)
811071a8:	dec00204 	addi	sp,sp,8
811071ac:	f800283a 	ret

811071b0 <vRstcSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcSimucamReset(alt_u16 usiRstCnt) {
811071b0:	defffc04 	addi	sp,sp,-16
811071b4:	de00012e 	bgeu	sp,et,811071bc <vRstcSimucamReset+0xc>
811071b8:	003b68fa 	trap	3
811071bc:	dfc00315 	stw	ra,12(sp)
811071c0:	df000215 	stw	fp,8(sp)
811071c4:	df000204 	addi	fp,sp,8
811071c8:	2005883a 	mov	r2,r4
811071cc:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 uliReg = 0;
811071d0:	e03ffe15 	stw	zero,-8(fp)

	uliReg |= (alt_u32) (usiRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
811071d4:	e0bfff0b 	ldhu	r2,-4(fp)
811071d8:	e0fffe17 	ldw	r3,-8(fp)
811071dc:	1884b03a 	or	r2,r3,r2
811071e0:	e0bffe15 	stw	r2,-8(fp)
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
811071e4:	e0bffe17 	ldw	r2,-8(fp)
811071e8:	10800074 	orhi	r2,r2,1
811071ec:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811071f0:	e1bffe17 	ldw	r6,-8(fp)
811071f4:	000b883a 	mov	r5,zero
811071f8:	01200034 	movhi	r4,32768
811071fc:	21020004 	addi	r4,r4,2048
81107200:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
}
81107204:	0001883a 	nop
81107208:	e037883a 	mov	sp,fp
8110720c:	dfc00117 	ldw	ra,4(sp)
81107210:	df000017 	ldw	fp,0(sp)
81107214:	dec00204 	addi	sp,sp,8
81107218:	f800283a 	ret

8110721c <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8110721c:	defffc04 	addi	sp,sp,-16
81107220:	de00012e 	bgeu	sp,et,81107228 <vRstcReleaseDeviceReset+0xc>
81107224:	003b68fa 	trap	3
81107228:	dfc00315 	stw	ra,12(sp)
8110722c:	df000215 	stw	fp,8(sp)
81107230:	df000204 	addi	fp,sp,8
81107234:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
81107238:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
8110723c:	01400044 	movi	r5,1
81107240:	01200034 	movhi	r4,32768
81107244:	21020004 	addi	r4,r4,2048
81107248:	11073540 	call	81107354 <uliRstReadReg>
8110724c:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
81107250:	e0bfff17 	ldw	r2,-4(fp)
81107254:	0084303a 	nor	r2,zero,r2
81107258:	e0fffe17 	ldw	r3,-8(fp)
8110725c:	1884703a 	and	r2,r3,r2
81107260:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107264:	e1bffe17 	ldw	r6,-8(fp)
81107268:	01400044 	movi	r5,1
8110726c:	01200034 	movhi	r4,32768
81107270:	21020004 	addi	r4,r4,2048
81107274:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
81107278:	0001883a 	nop
8110727c:	e037883a 	mov	sp,fp
81107280:	dfc00117 	ldw	ra,4(sp)
81107284:	df000017 	ldw	fp,0(sp)
81107288:	dec00204 	addi	sp,sp,8
8110728c:	f800283a 	ret

81107290 <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
81107290:	defffc04 	addi	sp,sp,-16
81107294:	de00012e 	bgeu	sp,et,8110729c <vRstcHoldDeviceReset+0xc>
81107298:	003b68fa 	trap	3
8110729c:	dfc00315 	stw	ra,12(sp)
811072a0:	df000215 	stw	fp,8(sp)
811072a4:	df000204 	addi	fp,sp,8
811072a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
811072ac:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072b0:	01400044 	movi	r5,1
811072b4:	01200034 	movhi	r4,32768
811072b8:	21020004 	addi	r4,r4,2048
811072bc:	11073540 	call	81107354 <uliRstReadReg>
811072c0:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
811072c4:	e0fffe17 	ldw	r3,-8(fp)
811072c8:	e0bfff17 	ldw	r2,-4(fp)
811072cc:	1884b03a 	or	r2,r3,r2
811072d0:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072d4:	e1bffe17 	ldw	r6,-8(fp)
811072d8:	01400044 	movi	r5,1
811072dc:	01200034 	movhi	r4,32768
811072e0:	21020004 	addi	r4,r4,2048
811072e4:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
811072e8:	0001883a 	nop
811072ec:	e037883a 	mov	sp,fp
811072f0:	dfc00117 	ldw	ra,4(sp)
811072f4:	df000017 	ldw	fp,0(sp)
811072f8:	dec00204 	addi	sp,sp,8
811072fc:	f800283a 	ret

81107300 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81107300:	defffc04 	addi	sp,sp,-16
81107304:	de00012e 	bgeu	sp,et,8110730c <vRstcWriteReg+0xc>
81107308:	003b68fa 	trap	3
8110730c:	df000315 	stw	fp,12(sp)
81107310:	df000304 	addi	fp,sp,12
81107314:	e13ffd15 	stw	r4,-12(fp)
81107318:	e17ffe15 	stw	r5,-8(fp)
8110731c:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81107320:	e0bffe17 	ldw	r2,-8(fp)
81107324:	1085883a 	add	r2,r2,r2
81107328:	1085883a 	add	r2,r2,r2
8110732c:	1007883a 	mov	r3,r2
81107330:	e0bffd17 	ldw	r2,-12(fp)
81107334:	10c5883a 	add	r2,r2,r3
81107338:	e0ffff17 	ldw	r3,-4(fp)
8110733c:	10c00015 	stw	r3,0(r2)
}
81107340:	0001883a 	nop
81107344:	e037883a 	mov	sp,fp
81107348:	df000017 	ldw	fp,0(sp)
8110734c:	dec00104 	addi	sp,sp,4
81107350:	f800283a 	ret

81107354 <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
81107354:	defffc04 	addi	sp,sp,-16
81107358:	de00012e 	bgeu	sp,et,81107360 <uliRstReadReg+0xc>
8110735c:	003b68fa 	trap	3
81107360:	df000315 	stw	fp,12(sp)
81107364:	df000304 	addi	fp,sp,12
81107368:	e13ffe15 	stw	r4,-8(fp)
8110736c:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81107370:	e0bfff17 	ldw	r2,-4(fp)
81107374:	1085883a 	add	r2,r2,r2
81107378:	1085883a 	add	r2,r2,r2
8110737c:	1007883a 	mov	r3,r2
81107380:	e0bffe17 	ldw	r2,-8(fp)
81107384:	10c5883a 	add	r2,r2,r3
81107388:	10800017 	ldw	r2,0(r2)
8110738c:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81107390:	e0bffd17 	ldw	r2,-12(fp)
}
81107394:	e037883a 	mov	sp,fp
81107398:	df000017 	ldw	fp,0(sp)
8110739c:	dec00104 	addi	sp,sp,4
811073a0:	f800283a 	ret

811073a4 <v_spi_start>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

void v_spi_start(void){
811073a4:	defffe04 	addi	sp,sp,-8
811073a8:	de00012e 	bgeu	sp,et,811073b0 <v_spi_start+0xc>
811073ac:	003b68fa 	trap	3
811073b0:	dfc00115 	stw	ra,4(sp)
811073b4:	df000015 	stw	fp,0(sp)
811073b8:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
811073bc:	0007883a 	mov	r3,zero
811073c0:	00a00034 	movhi	r2,32768
811073c4:	10823004 	addi	r2,r2,2240
811073c8:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
811073cc:	0007883a 	mov	r3,zero
811073d0:	00a00034 	movhi	r2,32768
811073d4:	10822c04 	addi	r2,r2,2224
811073d8:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
811073dc:	01002584 	movi	r4,150
811073e0:	112758c0 	call	8112758c <usleep>
}
811073e4:	0001883a 	nop
811073e8:	e037883a 	mov	sp,fp
811073ec:	dfc00117 	ldw	ra,4(sp)
811073f0:	df000017 	ldw	fp,0(sp)
811073f4:	dec00204 	addi	sp,sp,8
811073f8:	f800283a 	ret

811073fc <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
811073fc:	defffc04 	addi	sp,sp,-16
81107400:	de00012e 	bgeu	sp,et,81107408 <v_spi_send_byte+0xc>
81107404:	003b68fa 	trap	3
81107408:	dfc00315 	stw	ra,12(sp)
8110740c:	df000215 	stw	fp,8(sp)
81107410:	df000204 	addi	fp,sp,8
81107414:	2005883a 	mov	r2,r4
81107418:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
8110741c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
81107420:	00bfe004 	movi	r2,-128
81107424:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81107428:	e03ffe05 	stb	zero,-8(fp)
8110742c:	00001b06 	br	8110749c <v_spi_send_byte+0xa0>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
81107430:	e0ffff03 	ldbu	r3,-4(fp)
81107434:	e0bffe43 	ldbu	r2,-7(fp)
81107438:	1884703a 	and	r2,r3,r2
8110743c:	10803fcc 	andi	r2,r2,255
81107440:	1004c03a 	cmpne	r2,r2,zero
81107444:	10c03fcc 	andi	r3,r2,255
81107448:	00a00034 	movhi	r2,32768
8110744c:	10823404 	addi	r2,r2,2256
81107450:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
81107454:	e0bffe43 	ldbu	r2,-7(fp)
81107458:	1004d07a 	srli	r2,r2,1
8110745c:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
81107460:	00c00044 	movi	r3,1
81107464:	00a00034 	movhi	r2,32768
81107468:	10823004 	addi	r2,r2,2240
8110746c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107470:	01002584 	movi	r4,150
81107474:	112758c0 	call	8112758c <usleep>
        SPI_SCK(0);//sck=0; // clock low
81107478:	0007883a 	mov	r3,zero
8110747c:	00a00034 	movhi	r2,32768
81107480:	10823004 	addi	r2,r2,2240
81107484:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107488:	01002584 	movi	r4,150
8110748c:	112758c0 	call	8112758c <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81107490:	e0bffe03 	ldbu	r2,-8(fp)
81107494:	10800044 	addi	r2,r2,1
81107498:	e0bffe05 	stb	r2,-8(fp)
8110749c:	e0bffe03 	ldbu	r2,-8(fp)
811074a0:	10800230 	cmpltui	r2,r2,8
811074a4:	103fe21e 	bne	r2,zero,81107430 <__reset+0xfb0e7430>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
811074a8:	0001883a 	nop
811074ac:	e037883a 	mov	sp,fp
811074b0:	dfc00117 	ldw	ra,4(sp)
811074b4:	df000017 	ldw	fp,0(sp)
811074b8:	dec00204 	addi	sp,sp,8
811074bc:	f800283a 	ret

811074c0 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
811074c0:	defffd04 	addi	sp,sp,-12
811074c4:	de00012e 	bgeu	sp,et,811074cc <uc_spi_get_byte+0xc>
811074c8:	003b68fa 	trap	3
811074cc:	dfc00215 	stw	ra,8(sp)
811074d0:	df000115 	stw	fp,4(sp)
811074d4:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
811074d8:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
811074dc:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
811074e0:	e03fff05 	stb	zero,-4(fp)
811074e4:	00001a06 	br	81107550 <uc_spi_get_byte+0x90>
    {
        uc_data <<= 1;
811074e8:	e0bfff43 	ldbu	r2,-3(fp)
811074ec:	1085883a 	add	r2,r2,r2
811074f0:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
811074f4:	00a00034 	movhi	r2,32768
811074f8:	10823804 	addi	r2,r2,2272
811074fc:	10800037 	ldwio	r2,0(r2)
81107500:	1080004c 	andi	r2,r2,1
81107504:	1007883a 	mov	r3,r2
81107508:	e0bfff43 	ldbu	r2,-3(fp)
8110750c:	1884b03a 	or	r2,r3,r2
81107510:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
81107514:	00c00044 	movi	r3,1
81107518:	00a00034 	movhi	r2,32768
8110751c:	10823004 	addi	r2,r2,2240
81107520:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107524:	01002584 	movi	r4,150
81107528:	112758c0 	call	8112758c <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110752c:	0007883a 	mov	r3,zero
81107530:	00a00034 	movhi	r2,32768
81107534:	10823004 	addi	r2,r2,2240
81107538:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110753c:	01002584 	movi	r4,150
81107540:	112758c0 	call	8112758c <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
81107544:	e0bfff03 	ldbu	r2,-4(fp)
81107548:	10800044 	addi	r2,r2,1
8110754c:	e0bfff05 	stb	r2,-4(fp)
81107550:	e0bfff03 	ldbu	r2,-4(fp)
81107554:	10800230 	cmpltui	r2,r2,8
81107558:	103fe31e 	bne	r2,zero,811074e8 <__reset+0xfb0e74e8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
8110755c:	e0bfff43 	ldbu	r2,-3(fp)
}
81107560:	e037883a 	mov	sp,fp
81107564:	dfc00117 	ldw	ra,4(sp)
81107568:	df000017 	ldw	fp,0(sp)
8110756c:	dec00204 	addi	sp,sp,8
81107570:	f800283a 	ret

81107574 <v_spi_end>:

void v_spi_end(void){
81107574:	defffe04 	addi	sp,sp,-8
81107578:	de00012e 	bgeu	sp,et,81107580 <v_spi_end+0xc>
8110757c:	003b68fa 	trap	3
81107580:	dfc00115 	stw	ra,4(sp)
81107584:	df000015 	stw	fp,0(sp)
81107588:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
8110758c:	0007883a 	mov	r3,zero
81107590:	00a00034 	movhi	r2,32768
81107594:	10823004 	addi	r2,r2,2240
81107598:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110759c:	01002584 	movi	r4,150
811075a0:	112758c0 	call	8112758c <usleep>
    SPI_CS_N(1);
811075a4:	00c00044 	movi	r3,1
811075a8:	00a00034 	movhi	r2,32768
811075ac:	10822c04 	addi	r2,r2,2224
811075b0:	10c00035 	stwio	r3,0(r2)
}
811075b4:	0001883a 	nop
811075b8:	e037883a 	mov	sp,fp
811075bc:	dfc00117 	ldw	ra,4(sp)
811075c0:	df000017 	ldw	fp,0(sp)
811075c4:	dec00204 	addi	sp,sp,8
811075c8:	f800283a 	ret

811075cc <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
811075cc:	defff604 	addi	sp,sp,-40
811075d0:	de00012e 	bgeu	sp,et,811075d8 <RTCC_SPI_R_MAC+0xc>
811075d4:	003b68fa 	trap	3
811075d8:	dfc00915 	stw	ra,36(sp)
811075dc:	df000815 	stw	fp,32(sp)
811075e0:	df000804 	addi	fp,sp,32
811075e4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811075e8:	e03ffc15 	stw	zero,-16(fp)

    alt_u8 uc_EUI48_B0 = 0;
811075ec:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 uc_EUI48_B1 = 0;
811075f0:	e03ffd45 	stb	zero,-11(fp)
    alt_u8 uc_EUI48_B2 = 0;
811075f4:	e03ffd85 	stb	zero,-10(fp)
    alt_u8 uc_EUI48_B3 = 0;
811075f8:	e03ffdc5 	stb	zero,-9(fp)
    alt_u8 uc_EUI48_B4 = 0;
811075fc:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_EUI48_B5 = 0;
81107600:	e03ffe45 	stb	zero,-7(fp)

//    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
81107604:	00800084 	movi	r2,2
81107608:	e0bffe85 	stb	r2,-6(fp)
//    const alt_u8 uc_EUI48_B2_addr = 0x04;
//    const alt_u8 uc_EUI48_B3_addr = 0x05;
//    const alt_u8 uc_EUI48_B4_addr = 0x06;
//    const alt_u8 uc_EUI48_B5_addr = 0x07;

    const alt_u8 uc_IDREAD_cmd = 0x33;
8110760c:	00800cc4 	movi	r2,51
81107610:	e0bffec5 	stb	r2,-5(fp)

//    int i = 0;
    
    // Start Communication
    v_spi_start();
81107614:	11073a40 	call	811073a4 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81107618:	e0bffec3 	ldbu	r2,-5(fp)
8110761c:	1009883a 	mov	r4,r2
81107620:	11073fc0 	call	811073fc <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81107624:	e0bffe83 	ldbu	r2,-6(fp)
81107628:	1009883a 	mov	r4,r2
8110762c:	11073fc0 	call	811073fc <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
81107630:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107634:	e0bffd05 	stb	r2,-12(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
81107638:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110763c:	e0bffd45 	stb	r2,-11(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81107640:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107644:	e0bffd85 	stb	r2,-10(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
81107648:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110764c:	e0bffdc5 	stb	r2,-9(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81107650:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107654:	e0bffe05 	stb	r2,-8(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
81107658:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110765c:	e0bffe45 	stb	r2,-7(fp)

    // End communication
    v_spi_end();
81107660:	11075740 	call	81107574 <v_spi_end>

    bSuccess = TRUE;
81107664:	00800044 	movi	r2,1
81107668:	e0bffc15 	stw	r2,-16(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
8110766c:	e0bfff17 	ldw	r2,-4(fp)
81107670:	e0fffd03 	ldbu	r3,-12(fp)
81107674:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
81107678:	e0bfff17 	ldw	r2,-4(fp)
8110767c:	10800044 	addi	r2,r2,1
81107680:	e0fffd43 	ldbu	r3,-11(fp)
81107684:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
81107688:	e0bfff17 	ldw	r2,-4(fp)
8110768c:	10800084 	addi	r2,r2,2
81107690:	e0fffd83 	ldbu	r3,-10(fp)
81107694:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81107698:	e0bfff17 	ldw	r2,-4(fp)
8110769c:	108000c4 	addi	r2,r2,3
811076a0:	e0fffdc3 	ldbu	r3,-9(fp)
811076a4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
811076a8:	e0bfff17 	ldw	r2,-4(fp)
811076ac:	10800104 	addi	r2,r2,4
811076b0:	e0fffe03 	ldbu	r3,-8(fp)
811076b4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
811076b8:	e0bfff17 	ldw	r2,-4(fp)
811076bc:	10800144 	addi	r2,r2,5
811076c0:	e0fffe43 	ldbu	r3,-7(fp)
811076c4:	10c00005 	stb	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
811076c8:	e1bffd03 	ldbu	r6,-12(fp)
811076cc:	e1fffd43 	ldbu	r7,-11(fp)
811076d0:	e0bffd83 	ldbu	r2,-10(fp)
811076d4:	e0fffdc3 	ldbu	r3,-9(fp)
811076d8:	e13ffe03 	ldbu	r4,-8(fp)
811076dc:	e17ffe43 	ldbu	r5,-7(fp)
811076e0:	d9400315 	stw	r5,12(sp)
811076e4:	d9000215 	stw	r4,8(sp)
811076e8:	d8c00115 	stw	r3,4(sp)
811076ec:	d8800015 	stw	r2,0(sp)
811076f0:	01604534 	movhi	r5,33044
811076f4:	29700504 	addi	r5,r5,-16364
811076f8:	01204534 	movhi	r4,33044
811076fc:	21006204 	addi	r4,r4,392
81107700:	111282c0 	call	8111282c <sprintf>
	debug(fp, cDebugBuffer);
81107704:	d0a04d17 	ldw	r2,-32460(gp)
81107708:	01604534 	movhi	r5,33044
8110770c:	29406204 	addi	r5,r5,392
81107710:	1009883a 	mov	r4,r2
81107714:	11110c40 	call	811110c4 <fprintf>
#endif

    return bSuccess;
81107718:	e0bffc17 	ldw	r2,-16(fp)
}
8110771c:	e037883a 	mov	sp,fp
81107720:	dfc00117 	ldw	ra,4(sp)
81107724:	df000017 	ldw	fp,0(sp)
81107728:	dec00204 	addi	sp,sp,8
8110772c:	f800283a 	ret

81107730 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
81107730:	defffd04 	addi	sp,sp,-12
81107734:	de00012e 	bgeu	sp,et,8110773c <bSSDisplayConfig+0xc>
81107738:	003b68fa 	trap	3
8110773c:	df000215 	stw	fp,8(sp)
81107740:	df000204 	addi	fp,sp,8
81107744:	2005883a 	mov	r2,r4
81107748:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
8110774c:	e0bfff03 	ldbu	r2,-4(fp)
81107750:	10c00168 	cmpgeui	r3,r2,5
81107754:	18001c1e 	bne	r3,zero,811077c8 <bSSDisplayConfig+0x98>
81107758:	100690ba 	slli	r3,r2,2
8110775c:	00a04434 	movhi	r2,33040
81107760:	109ddc04 	addi	r2,r2,30576
81107764:	1885883a 	add	r2,r3,r2
81107768:	10800017 	ldw	r2,0(r2)
8110776c:	1000683a 	jmp	r2
81107770:	81107784 	addi	r4,r16,16862
81107774:	81107790 	cmplti	r4,r16,16862
81107778:	8110779c 	xori	r4,r16,16862
8110777c:	811077b0 	cmpltui	r4,r16,16862
81107780:	811077c0 	call	8811077c <__reset+0x20f077c>
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
81107784:	00800cc4 	movi	r2,51
81107788:	d0a04545 	stb	r2,-32491(gp)
	    break;
8110778c:	00001006 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81107790:	00801544 	movi	r2,85
81107794:	d0a04545 	stb	r2,-32491(gp)
	    break;
81107798:	00000d06 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
8110779c:	d0e04543 	ldbu	r3,-32491(gp)
811077a0:	00bff744 	movi	r2,-35
811077a4:	1884703a 	and	r2,r3,r2
811077a8:	d0a04545 	stb	r2,-32491(gp)
	    break;
811077ac:	00000806 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
811077b0:	d0a04543 	ldbu	r2,-32491(gp)
811077b4:	10800894 	ori	r2,r2,34
811077b8:	d0a04545 	stb	r2,-32491(gp)
	    break;
811077bc:	00000406 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
811077c0:	d0204545 	stb	zero,-32491(gp)
	    break;
811077c4:	00000206 	br	811077d0 <bSSDisplayConfig+0xa0>
		
		default:
		    return FALSE;
811077c8:	0005883a 	mov	r2,zero
811077cc:	00000806 	br	811077f0 <bSSDisplayConfig+0xc0>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
811077d0:	00a00034 	movhi	r2,32768
811077d4:	10828404 	addi	r2,r2,2576
811077d8:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
811077dc:	d0a04543 	ldbu	r2,-32491(gp)
811077e0:	10c03fcc 	andi	r3,r2,255
811077e4:	e0bffe17 	ldw	r2,-8(fp)
811077e8:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811077ec:	00800044 	movi	r2,1
}
811077f0:	e037883a 	mov	sp,fp
811077f4:	df000017 	ldw	fp,0(sp)
811077f8:	dec00104 	addi	sp,sp,4
811077fc:	f800283a 	ret

81107800 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
81107800:	defffd04 	addi	sp,sp,-12
81107804:	de00012e 	bgeu	sp,et,8110780c <bSSDisplayUpdate+0xc>
81107808:	003b68fa 	trap	3
8110780c:	df000215 	stw	fp,8(sp)
81107810:	df000204 	addi	fp,sp,8
81107814:	2005883a 	mov	r2,r4
81107818:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
8110781c:	00a00034 	movhi	r2,32768
81107820:	10828404 	addi	r2,r2,2576
81107824:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81107828:	e0bffe17 	ldw	r2,-8(fp)
8110782c:	10800104 	addi	r2,r2,4
81107830:	e0ffff03 	ldbu	r3,-4(fp)
81107834:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81107838:	00800044 	movi	r2,1
}
8110783c:	e037883a 	mov	sp,fp
81107840:	df000017 	ldw	fp,0(sp)
81107844:	dec00104 	addi	sp,sp,4
81107848:	f800283a 	ret

8110784c <vSyncHandleIrq>:
 *
 * @param [in] void* context
 *
 * @retval void
 */
void vSyncHandleIrq(void* pvContext) {
8110784c:	defffd04 	addi	sp,sp,-12
81107850:	de00012e 	bgeu	sp,et,81107858 <vSyncHandleIrq+0xc>
81107854:	003b68fa 	trap	3
81107858:	df000215 	stw	fp,8(sp)
8110785c:	df000204 	addi	fp,sp,8
81107860:	e13fff15 	stw	r4,-4(fp)
	// Cast pvContext to viHoldContext's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81107864:	e0bfff17 	ldw	r2,-4(fp)
81107868:	e0bffe15 	stw	r2,-8(fp)
	// Use pvContext value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vucN += 1;
8110786c:	d0a04703 	ldbu	r2,-32484(gp)
81107870:	10800044 	addi	r2,r2,1
81107874:	d0a04705 	stb	r2,-32484(gp)
}
81107878:	0001883a 	nop
8110787c:	e037883a 	mov	sp,fp
81107880:	df000017 	ldw	fp,0(sp)
81107884:	dec00104 	addi	sp,sp,4
81107888:	f800283a 	ret

8110788c <vSyncInitIrq>:
 *
 * @param [in] void
 *
 * @retval void
 */
void vSyncInitIrq(void) {
8110788c:	defffd04 	addi	sp,sp,-12
81107890:	de00012e 	bgeu	sp,et,81107898 <vSyncInitIrq+0xc>
81107894:	003b68fa 	trap	3
81107898:	dfc00215 	stw	ra,8(sp)
8110789c:	df000115 	stw	fp,4(sp)
811078a0:	df000104 	addi	fp,sp,4
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	void* hold_context_ptr = (void*) &viHoldContext;
811078a4:	d0a04604 	addi	r2,gp,-32488
811078a8:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(SYNC_IRQ, hold_context_ptr, vSyncHandleIrq);
811078ac:	01a04434 	movhi	r6,33040
811078b0:	319e1304 	addi	r6,r6,30796
811078b4:	e17fff17 	ldw	r5,-4(fp)
811078b8:	01000284 	movi	r4,10
811078bc:	1126a600 	call	81126a60 <alt_irq_register>
}
811078c0:	0001883a 	nop
811078c4:	e037883a 	mov	sp,fp
811078c8:	dfc00117 	ldw	ra,4(sp)
811078cc:	df000017 	ldw	fp,0(sp)
811078d0:	dec00204 	addi	sp,sp,8
811078d4:	f800283a 	ret

811078d8 <bSyncStatusExtnIrq>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncStatusExtnIrq(void) {
811078d8:	defffc04 	addi	sp,sp,-16
811078dc:	de00012e 	bgeu	sp,et,811078e4 <bSyncStatusExtnIrq+0xc>
811078e0:	003b68fa 	trap	3
811078e4:	dfc00315 	stw	ra,12(sp)
811078e8:	df000215 	stw	fp,8(sp)
811078ec:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811078f0:	0009883a 	mov	r4,zero
811078f4:	11086880 	call	81108688 <uliSyncReadReg>
811078f8:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_STAT_EXTN_IRQ_MSK) {
811078fc:	e0bfff17 	ldw	r2,-4(fp)
81107900:	1000030e 	bge	r2,zero,81107910 <bSyncStatusExtnIrq+0x38>
		bResult = TRUE;
81107904:	00800044 	movi	r2,1
81107908:	e0bffe15 	stw	r2,-8(fp)
8110790c:	00000106 	br	81107914 <bSyncStatusExtnIrq+0x3c>
	} else {
		bResult = FALSE;
81107910:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81107914:	e0bffe17 	ldw	r2,-8(fp)
}
81107918:	e037883a 	mov	sp,fp
8110791c:	dfc00117 	ldw	ra,4(sp)
81107920:	df000017 	ldw	fp,0(sp)
81107924:	dec00204 	addi	sp,sp,8
81107928:	f800283a 	ret

8110792c <ucSyncStatusState>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusState(void) {
8110792c:	defffc04 	addi	sp,sp,-16
81107930:	de00012e 	bgeu	sp,et,81107938 <ucSyncStatusState+0xc>
81107934:	003b68fa 	trap	3
81107938:	dfc00315 	stw	ra,12(sp)
8110793c:	df000215 	stw	fp,8(sp)
81107940:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107944:	0009883a 	mov	r4,zero
81107948:	11086880 	call	81108688 <uliSyncReadReg>
8110794c:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_STATE_MSK) >> 16);
81107950:	e0bffe17 	ldw	r2,-8(fp)
81107954:	10803fec 	andhi	r2,r2,255
81107958:	1004d43a 	srli	r2,r2,16
8110795c:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107960:	e0bfff03 	ldbu	r2,-4(fp)
}
81107964:	e037883a 	mov	sp,fp
81107968:	dfc00117 	ldw	ra,4(sp)
8110796c:	df000017 	ldw	fp,0(sp)
81107970:	dec00204 	addi	sp,sp,8
81107974:	f800283a 	ret

81107978 <ucSyncStatusErrorCode>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusErrorCode(void) {
81107978:	defffc04 	addi	sp,sp,-16
8110797c:	de00012e 	bgeu	sp,et,81107984 <ucSyncStatusErrorCode+0xc>
81107980:	003b68fa 	trap	3
81107984:	dfc00315 	stw	ra,12(sp)
81107988:	df000215 	stw	fp,8(sp)
8110798c:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107990:	0009883a 	mov	r4,zero
81107994:	11086880 	call	81108688 <uliSyncReadReg>
81107998:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_ERROR_CODE_MSK) >> 8);
8110799c:	e0bffe17 	ldw	r2,-8(fp)
811079a0:	10bfc00c 	andi	r2,r2,65280
811079a4:	1004d23a 	srli	r2,r2,8
811079a8:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079ac:	e0bfff03 	ldbu	r2,-4(fp)
}
811079b0:	e037883a 	mov	sp,fp
811079b4:	dfc00117 	ldw	ra,4(sp)
811079b8:	df000017 	ldw	fp,0(sp)
811079bc:	dec00204 	addi	sp,sp,8
811079c0:	f800283a 	ret

811079c4 <ucSyncStatusCycleNumber>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusCycleNumber(void) {
811079c4:	defffc04 	addi	sp,sp,-16
811079c8:	de00012e 	bgeu	sp,et,811079d0 <ucSyncStatusCycleNumber+0xc>
811079cc:	003b68fa 	trap	3
811079d0:	dfc00315 	stw	ra,12(sp)
811079d4:	df000215 	stw	fp,8(sp)
811079d8:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811079dc:	0009883a 	mov	r4,zero
811079e0:	11086880 	call	81108688 <uliSyncReadReg>
811079e4:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_CYCLE_NUMBER_MSK) >> 0);
811079e8:	e0bffe17 	ldw	r2,-8(fp)
811079ec:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079f0:	e0bfff03 	ldbu	r2,-4(fp)
}
811079f4:	e037883a 	mov	sp,fp
811079f8:	dfc00117 	ldw	ra,4(sp)
811079fc:	df000017 	ldw	fp,0(sp)
81107a00:	dec00204 	addi	sp,sp,8
81107a04:	f800283a 	ret

81107a08 <bSyncSetMbt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetMbt(alt_u32 uliValue) {
81107a08:	defffd04 	addi	sp,sp,-12
81107a0c:	de00012e 	bgeu	sp,et,81107a14 <bSyncSetMbt+0xc>
81107a10:	003b68fa 	trap	3
81107a14:	dfc00215 	stw	ra,8(sp)
81107a18:	df000115 	stw	fp,4(sp)
81107a1c:	df000104 	addi	fp,sp,4
81107a20:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_MBT_REG_OFFSET, uliValue);
81107a24:	e17fff17 	ldw	r5,-4(fp)
81107a28:	01000104 	movi	r4,4
81107a2c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107a30:	00800044 	movi	r2,1
}
81107a34:	e037883a 	mov	sp,fp
81107a38:	dfc00117 	ldw	ra,4(sp)
81107a3c:	df000017 	ldw	fp,0(sp)
81107a40:	dec00204 	addi	sp,sp,8
81107a44:	f800283a 	ret

81107a48 <bSyncSetBt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetBt(alt_u32 uliValue) {
81107a48:	defffd04 	addi	sp,sp,-12
81107a4c:	de00012e 	bgeu	sp,et,81107a54 <bSyncSetBt+0xc>
81107a50:	003b68fa 	trap	3
81107a54:	dfc00215 	stw	ra,8(sp)
81107a58:	df000115 	stw	fp,4(sp)
81107a5c:	df000104 	addi	fp,sp,4
81107a60:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_BT_REG_OFFSET, uliValue);
81107a64:	e17fff17 	ldw	r5,-4(fp)
81107a68:	01000144 	movi	r4,5
81107a6c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107a70:	00800044 	movi	r2,1
}
81107a74:	e037883a 	mov	sp,fp
81107a78:	dfc00117 	ldw	ra,4(sp)
81107a7c:	df000017 	ldw	fp,0(sp)
81107a80:	dec00204 	addi	sp,sp,8
81107a84:	f800283a 	ret

81107a88 <bSyncSetPer>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetPer(alt_u32 uliValue) {
81107a88:	defffd04 	addi	sp,sp,-12
81107a8c:	de00012e 	bgeu	sp,et,81107a94 <bSyncSetPer+0xc>
81107a90:	003b68fa 	trap	3
81107a94:	dfc00215 	stw	ra,8(sp)
81107a98:	df000115 	stw	fp,4(sp)
81107a9c:	df000104 	addi	fp,sp,4
81107aa0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_PER_REG_OFFSET, uliValue);
81107aa4:	e17fff17 	ldw	r5,-4(fp)
81107aa8:	01000184 	movi	r4,6
81107aac:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107ab0:	00800044 	movi	r2,1
}
81107ab4:	e037883a 	mov	sp,fp
81107ab8:	dfc00117 	ldw	ra,4(sp)
81107abc:	df000017 	ldw	fp,0(sp)
81107ac0:	dec00204 	addi	sp,sp,8
81107ac4:	f800283a 	ret

81107ac8 <bSyncSetOst>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetOst(alt_u32 uliValue) {
81107ac8:	defffd04 	addi	sp,sp,-12
81107acc:	de00012e 	bgeu	sp,et,81107ad4 <bSyncSetOst+0xc>
81107ad0:	003b68fa 	trap	3
81107ad4:	dfc00215 	stw	ra,8(sp)
81107ad8:	df000115 	stw	fp,4(sp)
81107adc:	df000104 	addi	fp,sp,4
81107ae0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_OST_REG_OFFSET, uliValue);
81107ae4:	e17fff17 	ldw	r5,-4(fp)
81107ae8:	010001c4 	movi	r4,7
81107aec:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107af0:	00800044 	movi	r2,1
}
81107af4:	e037883a 	mov	sp,fp
81107af8:	dfc00117 	ldw	ra,4(sp)
81107afc:	df000017 	ldw	fp,0(sp)
81107b00:	dec00204 	addi	sp,sp,8
81107b04:	f800283a 	ret

81107b08 <bSyncSetPolarity>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncSetPolarity(bool bValue) {
81107b08:	defffc04 	addi	sp,sp,-16
81107b0c:	de00012e 	bgeu	sp,et,81107b14 <bSyncSetPolarity+0xc>
81107b10:	003b68fa 	trap	3
81107b14:	dfc00315 	stw	ra,12(sp)
81107b18:	df000215 	stw	fp,8(sp)
81107b1c:	df000204 	addi	fp,sp,8
81107b20:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b24:	01000204 	movi	r4,8
81107b28:	11086880 	call	81108688 <uliSyncReadReg>
81107b2c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107b30:	e0bfff17 	ldw	r2,-4(fp)
81107b34:	1000051e 	bne	r2,zero,81107b4c <bSyncSetPolarity+0x44>
		uliAux &= ~SYNC_CONFIG_GEN_POLARITY_MSK;
81107b38:	e0fffe17 	ldw	r3,-8(fp)
81107b3c:	00bfbfc4 	movi	r2,-257
81107b40:	1884703a 	and	r2,r3,r2
81107b44:	e0bffe15 	stw	r2,-8(fp)
81107b48:	00000306 	br	81107b58 <bSyncSetPolarity+0x50>
	} else {
		uliAux |= SYNC_CONFIG_GEN_POLARITY_MSK;
81107b4c:	e0bffe17 	ldw	r2,-8(fp)
81107b50:	10804014 	ori	r2,r2,256
81107b54:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107b58:	e17ffe17 	ldw	r5,-8(fp)
81107b5c:	01000204 	movi	r4,8
81107b60:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107b64:	00800044 	movi	r2,1
}
81107b68:	e037883a 	mov	sp,fp
81107b6c:	dfc00117 	ldw	ra,4(sp)
81107b70:	df000017 	ldw	fp,0(sp)
81107b74:	dec00204 	addi	sp,sp,8
81107b78:	f800283a 	ret

81107b7c <bSyncSetNCycles>:
 *
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
bool bSyncSetNCycles(alt_u8 ucValue) {
81107b7c:	defffc04 	addi	sp,sp,-16
81107b80:	de00012e 	bgeu	sp,et,81107b88 <bSyncSetNCycles+0xc>
81107b84:	003b68fa 	trap	3
81107b88:	dfc00315 	stw	ra,12(sp)
81107b8c:	df000215 	stw	fp,8(sp)
81107b90:	df000204 	addi	fp,sp,8
81107b94:	2005883a 	mov	r2,r4
81107b98:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b9c:	01000204 	movi	r4,8
81107ba0:	11086880 	call	81108688 <uliSyncReadReg>
81107ba4:	e0bffe15 	stw	r2,-8(fp)
	uliAux &= ~SYNC_CONFIG_GEN_N_CYCLES_MSK;
81107ba8:	e0fffe17 	ldw	r3,-8(fp)
81107bac:	00bfc004 	movi	r2,-256
81107bb0:	1884703a 	and	r2,r3,r2
81107bb4:	e0bffe15 	stw	r2,-8(fp)
	uliAux |= (alt_u32) ucValue;
81107bb8:	e0bfff03 	ldbu	r2,-4(fp)
81107bbc:	e0fffe17 	ldw	r3,-8(fp)
81107bc0:	1884b03a 	or	r2,r3,r2
81107bc4:	e0bffe15 	stw	r2,-8(fp)

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107bc8:	e17ffe17 	ldw	r5,-8(fp)
81107bcc:	01000204 	movi	r4,8
81107bd0:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107bd4:	00800044 	movi	r2,1
}
81107bd8:	e037883a 	mov	sp,fp
81107bdc:	dfc00117 	ldw	ra,4(sp)
81107be0:	df000017 	ldw	fp,0(sp)
81107be4:	dec00204 	addi	sp,sp,8
81107be8:	f800283a 	ret

81107bec <uliSyncGetMbt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetMbt(void) {
81107bec:	defffd04 	addi	sp,sp,-12
81107bf0:	de00012e 	bgeu	sp,et,81107bf8 <uliSyncGetMbt+0xc>
81107bf4:	003b68fa 	trap	3
81107bf8:	dfc00215 	stw	ra,8(sp)
81107bfc:	df000115 	stw	fp,4(sp)
81107c00:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_MBT_REG_OFFSET);
81107c04:	01000104 	movi	r4,4
81107c08:	11086880 	call	81108688 <uliSyncReadReg>
81107c0c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c10:	e0bfff17 	ldw	r2,-4(fp)
}
81107c14:	e037883a 	mov	sp,fp
81107c18:	dfc00117 	ldw	ra,4(sp)
81107c1c:	df000017 	ldw	fp,0(sp)
81107c20:	dec00204 	addi	sp,sp,8
81107c24:	f800283a 	ret

81107c28 <uliSyncGetBt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetBt(void) {
81107c28:	defffd04 	addi	sp,sp,-12
81107c2c:	de00012e 	bgeu	sp,et,81107c34 <uliSyncGetBt+0xc>
81107c30:	003b68fa 	trap	3
81107c34:	dfc00215 	stw	ra,8(sp)
81107c38:	df000115 	stw	fp,4(sp)
81107c3c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_BT_REG_OFFSET);
81107c40:	01000144 	movi	r4,5
81107c44:	11086880 	call	81108688 <uliSyncReadReg>
81107c48:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c4c:	e0bfff17 	ldw	r2,-4(fp)
}
81107c50:	e037883a 	mov	sp,fp
81107c54:	dfc00117 	ldw	ra,4(sp)
81107c58:	df000017 	ldw	fp,0(sp)
81107c5c:	dec00204 	addi	sp,sp,8
81107c60:	f800283a 	ret

81107c64 <uliSyncGetPer>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetPer(void) {
81107c64:	defffd04 	addi	sp,sp,-12
81107c68:	de00012e 	bgeu	sp,et,81107c70 <uliSyncGetPer+0xc>
81107c6c:	003b68fa 	trap	3
81107c70:	dfc00215 	stw	ra,8(sp)
81107c74:	df000115 	stw	fp,4(sp)
81107c78:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_PER_REG_OFFSET);
81107c7c:	01000184 	movi	r4,6
81107c80:	11086880 	call	81108688 <uliSyncReadReg>
81107c84:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c88:	e0bfff17 	ldw	r2,-4(fp)
}
81107c8c:	e037883a 	mov	sp,fp
81107c90:	dfc00117 	ldw	ra,4(sp)
81107c94:	df000017 	ldw	fp,0(sp)
81107c98:	dec00204 	addi	sp,sp,8
81107c9c:	f800283a 	ret

81107ca0 <uliSyncGetOst>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetOst(void) {
81107ca0:	defffd04 	addi	sp,sp,-12
81107ca4:	de00012e 	bgeu	sp,et,81107cac <uliSyncGetOst+0xc>
81107ca8:	003b68fa 	trap	3
81107cac:	dfc00215 	stw	ra,8(sp)
81107cb0:	df000115 	stw	fp,4(sp)
81107cb4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_OST_REG_OFFSET);
81107cb8:	010001c4 	movi	r4,7
81107cbc:	11086880 	call	81108688 <uliSyncReadReg>
81107cc0:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cc4:	e0bfff17 	ldw	r2,-4(fp)
}
81107cc8:	e037883a 	mov	sp,fp
81107ccc:	dfc00117 	ldw	ra,4(sp)
81107cd0:	df000017 	ldw	fp,0(sp)
81107cd4:	dec00204 	addi	sp,sp,8
81107cd8:	f800283a 	ret

81107cdc <uliSyncGetGeneral>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetGeneral(void) {
81107cdc:	defffd04 	addi	sp,sp,-12
81107ce0:	de00012e 	bgeu	sp,et,81107ce8 <uliSyncGetGeneral+0xc>
81107ce4:	003b68fa 	trap	3
81107ce8:	dfc00215 	stw	ra,8(sp)
81107cec:	df000115 	stw	fp,4(sp)
81107cf0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107cf4:	01000204 	movi	r4,8
81107cf8:	11086880 	call	81108688 <uliSyncReadReg>
81107cfc:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d00:	e0bfff17 	ldw	r2,-4(fp)
}
81107d04:	e037883a 	mov	sp,fp
81107d08:	dfc00117 	ldw	ra,4(sp)
81107d0c:	df000017 	ldw	fp,0(sp)
81107d10:	dec00204 	addi	sp,sp,8
81107d14:	f800283a 	ret

81107d18 <bSyncErrInj>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncErrInj(alt_u32 uliValue) {
81107d18:	defffd04 	addi	sp,sp,-12
81107d1c:	de00012e 	bgeu	sp,et,81107d24 <bSyncErrInj+0xc>
81107d20:	003b68fa 	trap	3
81107d24:	dfc00215 	stw	ra,8(sp)
81107d28:	df000115 	stw	fp,4(sp)
81107d2c:	df000104 	addi	fp,sp,4
81107d30:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_ERR_INJ_REG_OFFSET, uliValue);
81107d34:	e17fff17 	ldw	r5,-4(fp)
81107d38:	01000244 	movi	r4,9
81107d3c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107d40:	00800044 	movi	r2,1
}
81107d44:	e037883a 	mov	sp,fp
81107d48:	dfc00117 	ldw	ra,4(sp)
81107d4c:	df000017 	ldw	fp,0(sp)
81107d50:	dec00204 	addi	sp,sp,8
81107d54:	f800283a 	ret

81107d58 <bSyncCtrExtnIrq>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrExtnIrq(bool bValue) {
81107d58:	defffc04 	addi	sp,sp,-16
81107d5c:	de00012e 	bgeu	sp,et,81107d64 <bSyncCtrExtnIrq+0xc>
81107d60:	003b68fa 	trap	3
81107d64:	dfc00315 	stw	ra,12(sp)
81107d68:	df000215 	stw	fp,8(sp)
81107d6c:	df000204 	addi	fp,sp,8
81107d70:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107d74:	01000284 	movi	r4,10
81107d78:	11086880 	call	81108688 <uliSyncReadReg>
81107d7c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107d80:	e0bfff17 	ldw	r2,-4(fp)
81107d84:	1000061e 	bne	r2,zero,81107da0 <bSyncCtrExtnIrq+0x48>
		uliAux &= ~SYNC_CTR_EXTN_INT_MSK;
81107d88:	e0fffe17 	ldw	r3,-8(fp)
81107d8c:	00a00034 	movhi	r2,32768
81107d90:	10bfffc4 	addi	r2,r2,-1
81107d94:	1884703a 	and	r2,r3,r2
81107d98:	e0bffe15 	stw	r2,-8(fp)
81107d9c:	00000306 	br	81107dac <bSyncCtrExtnIrq+0x54>
	} else {
		uliAux |= SYNC_CTR_EXTN_INT_MSK;
81107da0:	e0bffe17 	ldw	r2,-8(fp)
81107da4:	10a00034 	orhi	r2,r2,32768
81107da8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107dac:	e17ffe17 	ldw	r5,-8(fp)
81107db0:	01000284 	movi	r4,10
81107db4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107db8:	00800044 	movi	r2,1
}
81107dbc:	e037883a 	mov	sp,fp
81107dc0:	dfc00117 	ldw	ra,4(sp)
81107dc4:	df000017 	ldw	fp,0(sp)
81107dc8:	dec00204 	addi	sp,sp,8
81107dcc:	f800283a 	ret

81107dd0 <bSyncCtrStart>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrStart(void) {
81107dd0:	defffd04 	addi	sp,sp,-12
81107dd4:	de00012e 	bgeu	sp,et,81107ddc <bSyncCtrStart+0xc>
81107dd8:	003b68fa 	trap	3
81107ddc:	dfc00215 	stw	ra,8(sp)
81107de0:	df000115 	stw	fp,4(sp)
81107de4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107de8:	01000284 	movi	r4,10
81107dec:	11086880 	call	81108688 <uliSyncReadReg>
81107df0:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_START_MSK;
81107df4:	e0bfff17 	ldw	r2,-4(fp)
81107df8:	10800234 	orhi	r2,r2,8
81107dfc:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e00:	e17fff17 	ldw	r5,-4(fp)
81107e04:	01000284 	movi	r4,10
81107e08:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107e0c:	00800044 	movi	r2,1
}
81107e10:	e037883a 	mov	sp,fp
81107e14:	dfc00117 	ldw	ra,4(sp)
81107e18:	df000017 	ldw	fp,0(sp)
81107e1c:	dec00204 	addi	sp,sp,8
81107e20:	f800283a 	ret

81107e24 <bSyncCtrReset>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrReset(void) {
81107e24:	defffd04 	addi	sp,sp,-12
81107e28:	de00012e 	bgeu	sp,et,81107e30 <bSyncCtrReset+0xc>
81107e2c:	003b68fa 	trap	3
81107e30:	dfc00215 	stw	ra,8(sp)
81107e34:	df000115 	stw	fp,4(sp)
81107e38:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e3c:	01000284 	movi	r4,10
81107e40:	11086880 	call	81108688 <uliSyncReadReg>
81107e44:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_RESET_MSK;
81107e48:	e0bfff17 	ldw	r2,-4(fp)
81107e4c:	10800134 	orhi	r2,r2,4
81107e50:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e54:	e17fff17 	ldw	r5,-4(fp)
81107e58:	01000284 	movi	r4,10
81107e5c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107e60:	00800044 	movi	r2,1
}
81107e64:	e037883a 	mov	sp,fp
81107e68:	dfc00117 	ldw	ra,4(sp)
81107e6c:	df000017 	ldw	fp,0(sp)
81107e70:	dec00204 	addi	sp,sp,8
81107e74:	f800283a 	ret

81107e78 <bSyncCtrOneShot>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrOneShot(void) {
81107e78:	defffd04 	addi	sp,sp,-12
81107e7c:	de00012e 	bgeu	sp,et,81107e84 <bSyncCtrOneShot+0xc>
81107e80:	003b68fa 	trap	3
81107e84:	dfc00215 	stw	ra,8(sp)
81107e88:	df000115 	stw	fp,4(sp)
81107e8c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e90:	01000284 	movi	r4,10
81107e94:	11086880 	call	81108688 <uliSyncReadReg>
81107e98:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ONE_SHOT_MSK;
81107e9c:	e0bfff17 	ldw	r2,-4(fp)
81107ea0:	108000b4 	orhi	r2,r2,2
81107ea4:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107ea8:	e17fff17 	ldw	r5,-4(fp)
81107eac:	01000284 	movi	r4,10
81107eb0:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107eb4:	00800044 	movi	r2,1
}
81107eb8:	e037883a 	mov	sp,fp
81107ebc:	dfc00117 	ldw	ra,4(sp)
81107ec0:	df000017 	ldw	fp,0(sp)
81107ec4:	dec00204 	addi	sp,sp,8
81107ec8:	f800283a 	ret

81107ecc <bSyncCtrErrInj>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrErrInj(void) {
81107ecc:	defffd04 	addi	sp,sp,-12
81107ed0:	de00012e 	bgeu	sp,et,81107ed8 <bSyncCtrErrInj+0xc>
81107ed4:	003b68fa 	trap	3
81107ed8:	dfc00215 	stw	ra,8(sp)
81107edc:	df000115 	stw	fp,4(sp)
81107ee0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107ee4:	01000284 	movi	r4,10
81107ee8:	11086880 	call	81108688 <uliSyncReadReg>
81107eec:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ERR_INJ_MSK;
81107ef0:	e0bfff17 	ldw	r2,-4(fp)
81107ef4:	10800074 	orhi	r2,r2,1
81107ef8:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107efc:	e17fff17 	ldw	r5,-4(fp)
81107f00:	01000284 	movi	r4,10
81107f04:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107f08:	00800044 	movi	r2,1
}
81107f0c:	e037883a 	mov	sp,fp
81107f10:	dfc00117 	ldw	ra,4(sp)
81107f14:	df000017 	ldw	fp,0(sp)
81107f18:	dec00204 	addi	sp,sp,8
81107f1c:	f800283a 	ret

81107f20 <bSyncCtrSyncOutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrSyncOutEnable(bool bValue) {
81107f20:	defffc04 	addi	sp,sp,-16
81107f24:	de00012e 	bgeu	sp,et,81107f2c <bSyncCtrSyncOutEnable+0xc>
81107f28:	003b68fa 	trap	3
81107f2c:	dfc00315 	stw	ra,12(sp)
81107f30:	df000215 	stw	fp,8(sp)
81107f34:	df000204 	addi	fp,sp,8
81107f38:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f3c:	01000284 	movi	r4,10
81107f40:	11086880 	call	81108688 <uliSyncReadReg>
81107f44:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107f48:	e0bfff17 	ldw	r2,-4(fp)
81107f4c:	1000051e 	bne	r2,zero,81107f64 <bSyncCtrSyncOutEnable+0x44>
		uliAux &= ~SYNC_CTR_SYNC_OUT_EN_MSK;
81107f50:	e0fffe17 	ldw	r3,-8(fp)
81107f54:	00bfbfc4 	movi	r2,-257
81107f58:	1884703a 	and	r2,r3,r2
81107f5c:	e0bffe15 	stw	r2,-8(fp)
81107f60:	00000306 	br	81107f70 <bSyncCtrSyncOutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_SYNC_OUT_EN_MSK;
81107f64:	e0bffe17 	ldw	r2,-8(fp)
81107f68:	10804014 	ori	r2,r2,256
81107f6c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f70:	e17ffe17 	ldw	r5,-8(fp)
81107f74:	01000284 	movi	r4,10
81107f78:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107f7c:	00800044 	movi	r2,1
}
81107f80:	e037883a 	mov	sp,fp
81107f84:	dfc00117 	ldw	ra,4(sp)
81107f88:	df000017 	ldw	fp,0(sp)
81107f8c:	dec00204 	addi	sp,sp,8
81107f90:	f800283a 	ret

81107f94 <bSyncCtrCh1OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh1OutEnable(bool bValue) {
81107f94:	defffc04 	addi	sp,sp,-16
81107f98:	de00012e 	bgeu	sp,et,81107fa0 <bSyncCtrCh1OutEnable+0xc>
81107f9c:	003b68fa 	trap	3
81107fa0:	dfc00315 	stw	ra,12(sp)
81107fa4:	df000215 	stw	fp,8(sp)
81107fa8:	df000204 	addi	fp,sp,8
81107fac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107fb0:	01000284 	movi	r4,10
81107fb4:	11086880 	call	81108688 <uliSyncReadReg>
81107fb8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107fbc:	e0bfff17 	ldw	r2,-4(fp)
81107fc0:	1000051e 	bne	r2,zero,81107fd8 <bSyncCtrCh1OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHA_EN_MSK;
81107fc4:	e0fffe17 	ldw	r3,-8(fp)
81107fc8:	00bfff84 	movi	r2,-2
81107fcc:	1884703a 	and	r2,r3,r2
81107fd0:	e0bffe15 	stw	r2,-8(fp)
81107fd4:	00000306 	br	81107fe4 <bSyncCtrCh1OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHA_EN_MSK;
81107fd8:	e0bffe17 	ldw	r2,-8(fp)
81107fdc:	10800054 	ori	r2,r2,1
81107fe0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107fe4:	e17ffe17 	ldw	r5,-8(fp)
81107fe8:	01000284 	movi	r4,10
81107fec:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107ff0:	00800044 	movi	r2,1
}
81107ff4:	e037883a 	mov	sp,fp
81107ff8:	dfc00117 	ldw	ra,4(sp)
81107ffc:	df000017 	ldw	fp,0(sp)
81108000:	dec00204 	addi	sp,sp,8
81108004:	f800283a 	ret

81108008 <bSyncCtrCh2OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh2OutEnable(bool bValue) {
81108008:	defffc04 	addi	sp,sp,-16
8110800c:	de00012e 	bgeu	sp,et,81108014 <bSyncCtrCh2OutEnable+0xc>
81108010:	003b68fa 	trap	3
81108014:	dfc00315 	stw	ra,12(sp)
81108018:	df000215 	stw	fp,8(sp)
8110801c:	df000204 	addi	fp,sp,8
81108020:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108024:	01000284 	movi	r4,10
81108028:	11086880 	call	81108688 <uliSyncReadReg>
8110802c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108030:	e0bfff17 	ldw	r2,-4(fp)
81108034:	1000051e 	bne	r2,zero,8110804c <bSyncCtrCh2OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHB_EN_MSK;
81108038:	e0fffe17 	ldw	r3,-8(fp)
8110803c:	00bfff44 	movi	r2,-3
81108040:	1884703a 	and	r2,r3,r2
81108044:	e0bffe15 	stw	r2,-8(fp)
81108048:	00000306 	br	81108058 <bSyncCtrCh2OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHB_EN_MSK;
8110804c:	e0bffe17 	ldw	r2,-8(fp)
81108050:	10800094 	ori	r2,r2,2
81108054:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108058:	e17ffe17 	ldw	r5,-8(fp)
8110805c:	01000284 	movi	r4,10
81108060:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108064:	00800044 	movi	r2,1
}
81108068:	e037883a 	mov	sp,fp
8110806c:	dfc00117 	ldw	ra,4(sp)
81108070:	df000017 	ldw	fp,0(sp)
81108074:	dec00204 	addi	sp,sp,8
81108078:	f800283a 	ret

8110807c <bSyncCtrCh3OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh3OutEnable(bool bValue) {
8110807c:	defffc04 	addi	sp,sp,-16
81108080:	de00012e 	bgeu	sp,et,81108088 <bSyncCtrCh3OutEnable+0xc>
81108084:	003b68fa 	trap	3
81108088:	dfc00315 	stw	ra,12(sp)
8110808c:	df000215 	stw	fp,8(sp)
81108090:	df000204 	addi	fp,sp,8
81108094:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108098:	01000284 	movi	r4,10
8110809c:	11086880 	call	81108688 <uliSyncReadReg>
811080a0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811080a4:	e0bfff17 	ldw	r2,-4(fp)
811080a8:	1000051e 	bne	r2,zero,811080c0 <bSyncCtrCh3OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHC_EN_MSK;
811080ac:	e0fffe17 	ldw	r3,-8(fp)
811080b0:	00bffec4 	movi	r2,-5
811080b4:	1884703a 	and	r2,r3,r2
811080b8:	e0bffe15 	stw	r2,-8(fp)
811080bc:	00000306 	br	811080cc <bSyncCtrCh3OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHC_EN_MSK;
811080c0:	e0bffe17 	ldw	r2,-8(fp)
811080c4:	10800114 	ori	r2,r2,4
811080c8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811080cc:	e17ffe17 	ldw	r5,-8(fp)
811080d0:	01000284 	movi	r4,10
811080d4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811080d8:	00800044 	movi	r2,1
}
811080dc:	e037883a 	mov	sp,fp
811080e0:	dfc00117 	ldw	ra,4(sp)
811080e4:	df000017 	ldw	fp,0(sp)
811080e8:	dec00204 	addi	sp,sp,8
811080ec:	f800283a 	ret

811080f0 <bSyncCtrCh4OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh4OutEnable(bool bValue) {
811080f0:	defffc04 	addi	sp,sp,-16
811080f4:	de00012e 	bgeu	sp,et,811080fc <bSyncCtrCh4OutEnable+0xc>
811080f8:	003b68fa 	trap	3
811080fc:	dfc00315 	stw	ra,12(sp)
81108100:	df000215 	stw	fp,8(sp)
81108104:	df000204 	addi	fp,sp,8
81108108:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110810c:	01000284 	movi	r4,10
81108110:	11086880 	call	81108688 <uliSyncReadReg>
81108114:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108118:	e0bfff17 	ldw	r2,-4(fp)
8110811c:	1000051e 	bne	r2,zero,81108134 <bSyncCtrCh4OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHD_EN_MSK;
81108120:	e0fffe17 	ldw	r3,-8(fp)
81108124:	00bffdc4 	movi	r2,-9
81108128:	1884703a 	and	r2,r3,r2
8110812c:	e0bffe15 	stw	r2,-8(fp)
81108130:	00000306 	br	81108140 <bSyncCtrCh4OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHD_EN_MSK;
81108134:	e0bffe17 	ldw	r2,-8(fp)
81108138:	10800214 	ori	r2,r2,8
8110813c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108140:	e17ffe17 	ldw	r5,-8(fp)
81108144:	01000284 	movi	r4,10
81108148:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
8110814c:	00800044 	movi	r2,1
}
81108150:	e037883a 	mov	sp,fp
81108154:	dfc00117 	ldw	ra,4(sp)
81108158:	df000017 	ldw	fp,0(sp)
8110815c:	dec00204 	addi	sp,sp,8
81108160:	f800283a 	ret

81108164 <bSyncCtrCh5OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh5OutEnable(bool bValue) {
81108164:	defffc04 	addi	sp,sp,-16
81108168:	de00012e 	bgeu	sp,et,81108170 <bSyncCtrCh5OutEnable+0xc>
8110816c:	003b68fa 	trap	3
81108170:	dfc00315 	stw	ra,12(sp)
81108174:	df000215 	stw	fp,8(sp)
81108178:	df000204 	addi	fp,sp,8
8110817c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108180:	01000284 	movi	r4,10
81108184:	11086880 	call	81108688 <uliSyncReadReg>
81108188:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110818c:	e0bfff17 	ldw	r2,-4(fp)
81108190:	1000051e 	bne	r2,zero,811081a8 <bSyncCtrCh5OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHE_EN_MSK;
81108194:	e0fffe17 	ldw	r3,-8(fp)
81108198:	00bffbc4 	movi	r2,-17
8110819c:	1884703a 	and	r2,r3,r2
811081a0:	e0bffe15 	stw	r2,-8(fp)
811081a4:	00000306 	br	811081b4 <bSyncCtrCh5OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHE_EN_MSK;
811081a8:	e0bffe17 	ldw	r2,-8(fp)
811081ac:	10800414 	ori	r2,r2,16
811081b0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811081b4:	e17ffe17 	ldw	r5,-8(fp)
811081b8:	01000284 	movi	r4,10
811081bc:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811081c0:	00800044 	movi	r2,1
}
811081c4:	e037883a 	mov	sp,fp
811081c8:	dfc00117 	ldw	ra,4(sp)
811081cc:	df000017 	ldw	fp,0(sp)
811081d0:	dec00204 	addi	sp,sp,8
811081d4:	f800283a 	ret

811081d8 <bSyncCtrCh6OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh6OutEnable(bool bValue) {
811081d8:	defffc04 	addi	sp,sp,-16
811081dc:	de00012e 	bgeu	sp,et,811081e4 <bSyncCtrCh6OutEnable+0xc>
811081e0:	003b68fa 	trap	3
811081e4:	dfc00315 	stw	ra,12(sp)
811081e8:	df000215 	stw	fp,8(sp)
811081ec:	df000204 	addi	fp,sp,8
811081f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811081f4:	01000284 	movi	r4,10
811081f8:	11086880 	call	81108688 <uliSyncReadReg>
811081fc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108200:	e0bfff17 	ldw	r2,-4(fp)
81108204:	1000051e 	bne	r2,zero,8110821c <bSyncCtrCh6OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHF_EN_MSK;
81108208:	e0fffe17 	ldw	r3,-8(fp)
8110820c:	00bff7c4 	movi	r2,-33
81108210:	1884703a 	and	r2,r3,r2
81108214:	e0bffe15 	stw	r2,-8(fp)
81108218:	00000306 	br	81108228 <bSyncCtrCh6OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHF_EN_MSK;
8110821c:	e0bffe17 	ldw	r2,-8(fp)
81108220:	10800814 	ori	r2,r2,32
81108224:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108228:	e17ffe17 	ldw	r5,-8(fp)
8110822c:	01000284 	movi	r4,10
81108230:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108234:	00800044 	movi	r2,1
}
81108238:	e037883a 	mov	sp,fp
8110823c:	dfc00117 	ldw	ra,4(sp)
81108240:	df000017 	ldw	fp,0(sp)
81108244:	dec00204 	addi	sp,sp,8
81108248:	f800283a 	ret

8110824c <bSyncCtrCh7OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh7OutEnable(bool bValue) {
8110824c:	defffc04 	addi	sp,sp,-16
81108250:	de00012e 	bgeu	sp,et,81108258 <bSyncCtrCh7OutEnable+0xc>
81108254:	003b68fa 	trap	3
81108258:	dfc00315 	stw	ra,12(sp)
8110825c:	df000215 	stw	fp,8(sp)
81108260:	df000204 	addi	fp,sp,8
81108264:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108268:	01000284 	movi	r4,10
8110826c:	11086880 	call	81108688 <uliSyncReadReg>
81108270:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108274:	e0bfff17 	ldw	r2,-4(fp)
81108278:	1000051e 	bne	r2,zero,81108290 <bSyncCtrCh7OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHG_EN_MSK;
8110827c:	e0fffe17 	ldw	r3,-8(fp)
81108280:	00bfefc4 	movi	r2,-65
81108284:	1884703a 	and	r2,r3,r2
81108288:	e0bffe15 	stw	r2,-8(fp)
8110828c:	00000306 	br	8110829c <bSyncCtrCh7OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHG_EN_MSK;
81108290:	e0bffe17 	ldw	r2,-8(fp)
81108294:	10801014 	ori	r2,r2,64
81108298:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110829c:	e17ffe17 	ldw	r5,-8(fp)
811082a0:	01000284 	movi	r4,10
811082a4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811082a8:	00800044 	movi	r2,1
}
811082ac:	e037883a 	mov	sp,fp
811082b0:	dfc00117 	ldw	ra,4(sp)
811082b4:	df000017 	ldw	fp,0(sp)
811082b8:	dec00204 	addi	sp,sp,8
811082bc:	f800283a 	ret

811082c0 <bSyncCtrCh8OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh8OutEnable(bool bValue) {
811082c0:	defffc04 	addi	sp,sp,-16
811082c4:	de00012e 	bgeu	sp,et,811082cc <bSyncCtrCh8OutEnable+0xc>
811082c8:	003b68fa 	trap	3
811082cc:	dfc00315 	stw	ra,12(sp)
811082d0:	df000215 	stw	fp,8(sp)
811082d4:	df000204 	addi	fp,sp,8
811082d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811082dc:	01000284 	movi	r4,10
811082e0:	11086880 	call	81108688 <uliSyncReadReg>
811082e4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811082e8:	e0bfff17 	ldw	r2,-4(fp)
811082ec:	1000051e 	bne	r2,zero,81108304 <bSyncCtrCh8OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHH_EN_MSK;
811082f0:	e0fffe17 	ldw	r3,-8(fp)
811082f4:	00bfdfc4 	movi	r2,-129
811082f8:	1884703a 	and	r2,r3,r2
811082fc:	e0bffe15 	stw	r2,-8(fp)
81108300:	00000306 	br	81108310 <bSyncCtrCh8OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHH_EN_MSK;
81108304:	e0bffe17 	ldw	r2,-8(fp)
81108308:	10802014 	ori	r2,r2,128
8110830c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108310:	e17ffe17 	ldw	r5,-8(fp)
81108314:	01000284 	movi	r4,10
81108318:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
8110831c:	00800044 	movi	r2,1
}
81108320:	e037883a 	mov	sp,fp
81108324:	dfc00117 	ldw	ra,4(sp)
81108328:	df000017 	ldw	fp,0(sp)
8110832c:	dec00204 	addi	sp,sp,8
81108330:	f800283a 	ret

81108334 <bSyncIrqEnableError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableError(bool bValue) {
81108334:	defffc04 	addi	sp,sp,-16
81108338:	de00012e 	bgeu	sp,et,81108340 <bSyncIrqEnableError+0xc>
8110833c:	003b68fa 	trap	3
81108340:	dfc00315 	stw	ra,12(sp)
81108344:	df000215 	stw	fp,8(sp)
81108348:	df000204 	addi	fp,sp,8
8110834c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
81108350:	01000044 	movi	r4,1
81108354:	11086880 	call	81108688 <uliSyncReadReg>
81108358:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110835c:	e0bfff17 	ldw	r2,-4(fp)
81108360:	1000051e 	bne	r2,zero,81108378 <bSyncIrqEnableError+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_ERROR_MSK;
81108364:	e0fffe17 	ldw	r3,-8(fp)
81108368:	00bfff44 	movi	r2,-3
8110836c:	1884703a 	and	r2,r3,r2
81108370:	e0bffe15 	stw	r2,-8(fp)
81108374:	00000306 	br	81108384 <bSyncIrqEnableError+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_ERROR_MSK;
81108378:	e0bffe17 	ldw	r2,-8(fp)
8110837c:	10800094 	ori	r2,r2,2
81108380:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
81108384:	e17ffe17 	ldw	r5,-8(fp)
81108388:	01000044 	movi	r4,1
8110838c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108390:	00800044 	movi	r2,1
}
81108394:	e037883a 	mov	sp,fp
81108398:	dfc00117 	ldw	ra,4(sp)
8110839c:	df000017 	ldw	fp,0(sp)
811083a0:	dec00204 	addi	sp,sp,8
811083a4:	f800283a 	ret

811083a8 <bSyncIrqEnableBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableBlank(bool bValue) {
811083a8:	defffc04 	addi	sp,sp,-16
811083ac:	de00012e 	bgeu	sp,et,811083b4 <bSyncIrqEnableBlank+0xc>
811083b0:	003b68fa 	trap	3
811083b4:	dfc00315 	stw	ra,12(sp)
811083b8:	df000215 	stw	fp,8(sp)
811083bc:	df000204 	addi	fp,sp,8
811083c0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
811083c4:	01000044 	movi	r4,1
811083c8:	11086880 	call	81108688 <uliSyncReadReg>
811083cc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811083d0:	e0bfff17 	ldw	r2,-4(fp)
811083d4:	1000051e 	bne	r2,zero,811083ec <bSyncIrqEnableBlank+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_BLANK_MSK;
811083d8:	e0fffe17 	ldw	r3,-8(fp)
811083dc:	00bfff84 	movi	r2,-2
811083e0:	1884703a 	and	r2,r3,r2
811083e4:	e0bffe15 	stw	r2,-8(fp)
811083e8:	00000306 	br	811083f8 <bSyncIrqEnableBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_BLANK_MSK;
811083ec:	e0bffe17 	ldw	r2,-8(fp)
811083f0:	10800054 	ori	r2,r2,1
811083f4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
811083f8:	e17ffe17 	ldw	r5,-8(fp)
811083fc:	01000044 	movi	r4,1
81108400:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108404:	00800044 	movi	r2,1
}
81108408:	e037883a 	mov	sp,fp
8110840c:	dfc00117 	ldw	ra,4(sp)
81108410:	df000017 	ldw	fp,0(sp)
81108414:	dec00204 	addi	sp,sp,8
81108418:	f800283a 	ret

8110841c <bSyncIrqFlagClrError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrError(bool bValue) {
8110841c:	defffc04 	addi	sp,sp,-16
81108420:	de00012e 	bgeu	sp,et,81108428 <bSyncIrqFlagClrError+0xc>
81108424:	003b68fa 	trap	3
81108428:	dfc00315 	stw	ra,12(sp)
8110842c:	df000215 	stw	fp,8(sp)
81108430:	df000204 	addi	fp,sp,8
81108434:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
81108438:	01000084 	movi	r4,2
8110843c:	11086880 	call	81108688 <uliSyncReadReg>
81108440:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108444:	e0bfff17 	ldw	r2,-4(fp)
81108448:	1000051e 	bne	r2,zero,81108460 <bSyncIrqFlagClrError+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_ERROR_MSK;
8110844c:	e0fffe17 	ldw	r3,-8(fp)
81108450:	00bfff44 	movi	r2,-3
81108454:	1884703a 	and	r2,r3,r2
81108458:	e0bffe15 	stw	r2,-8(fp)
8110845c:	00000306 	br	8110846c <bSyncIrqFlagClrError+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_ERROR_MSK;
81108460:	e0bffe17 	ldw	r2,-8(fp)
81108464:	10800094 	ori	r2,r2,2
81108468:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
8110846c:	e17ffe17 	ldw	r5,-8(fp)
81108470:	01000084 	movi	r4,2
81108474:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108478:	00800044 	movi	r2,1
}
8110847c:	e037883a 	mov	sp,fp
81108480:	dfc00117 	ldw	ra,4(sp)
81108484:	df000017 	ldw	fp,0(sp)
81108488:	dec00204 	addi	sp,sp,8
8110848c:	f800283a 	ret

81108490 <bSyncIrqFlagClrBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrBlank(bool bValue) {
81108490:	defffc04 	addi	sp,sp,-16
81108494:	de00012e 	bgeu	sp,et,8110849c <bSyncIrqFlagClrBlank+0xc>
81108498:	003b68fa 	trap	3
8110849c:	dfc00315 	stw	ra,12(sp)
811084a0:	df000215 	stw	fp,8(sp)
811084a4:	df000204 	addi	fp,sp,8
811084a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
811084ac:	01000084 	movi	r4,2
811084b0:	11086880 	call	81108688 <uliSyncReadReg>
811084b4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811084b8:	e0bfff17 	ldw	r2,-4(fp)
811084bc:	1000051e 	bne	r2,zero,811084d4 <bSyncIrqFlagClrBlank+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811084c0:	e0fffe17 	ldw	r3,-8(fp)
811084c4:	00bfff84 	movi	r2,-2
811084c8:	1884703a 	and	r2,r3,r2
811084cc:	e0bffe15 	stw	r2,-8(fp)
811084d0:	00000306 	br	811084e0 <bSyncIrqFlagClrBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811084d4:	e0bffe17 	ldw	r2,-8(fp)
811084d8:	10800054 	ori	r2,r2,1
811084dc:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
811084e0:	e17ffe17 	ldw	r5,-8(fp)
811084e4:	01000084 	movi	r4,2
811084e8:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811084ec:	00800044 	movi	r2,1
}
811084f0:	e037883a 	mov	sp,fp
811084f4:	dfc00117 	ldw	ra,4(sp)
811084f8:	df000017 	ldw	fp,0(sp)
811084fc:	dec00204 	addi	sp,sp,8
81108500:	f800283a 	ret

81108504 <bSyncIrqFlagError>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagError(void) {
81108504:	defffc04 	addi	sp,sp,-16
81108508:	de00012e 	bgeu	sp,et,81108510 <bSyncIrqFlagError+0xc>
8110850c:	003b68fa 	trap	3
81108510:	dfc00315 	stw	ra,12(sp)
81108514:	df000215 	stw	fp,8(sp)
81108518:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
8110851c:	010000c4 	movi	r4,3
81108520:	11086880 	call	81108688 <uliSyncReadReg>
81108524:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_ERROR_MSK) {
81108528:	e0bfff17 	ldw	r2,-4(fp)
8110852c:	1080008c 	andi	r2,r2,2
81108530:	10000326 	beq	r2,zero,81108540 <bSyncIrqFlagError+0x3c>
		bResult = TRUE;
81108534:	00800044 	movi	r2,1
81108538:	e0bffe15 	stw	r2,-8(fp)
8110853c:	00000106 	br	81108544 <bSyncIrqFlagError+0x40>
	} else {
		bResult = FALSE;
81108540:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81108544:	e0bffe17 	ldw	r2,-8(fp)
}
81108548:	e037883a 	mov	sp,fp
8110854c:	dfc00117 	ldw	ra,4(sp)
81108550:	df000017 	ldw	fp,0(sp)
81108554:	dec00204 	addi	sp,sp,8
81108558:	f800283a 	ret

8110855c <bSyncIrqFlagBlank>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagBlank(void) {
8110855c:	defffc04 	addi	sp,sp,-16
81108560:	de00012e 	bgeu	sp,et,81108568 <bSyncIrqFlagBlank+0xc>
81108564:	003b68fa 	trap	3
81108568:	dfc00315 	stw	ra,12(sp)
8110856c:	df000215 	stw	fp,8(sp)
81108570:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
81108574:	010000c4 	movi	r4,3
81108578:	11086880 	call	81108688 <uliSyncReadReg>
8110857c:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_BLANK_MSK) {
81108580:	e0bfff17 	ldw	r2,-4(fp)
81108584:	1080004c 	andi	r2,r2,1
81108588:	10000326 	beq	r2,zero,81108598 <bSyncIrqFlagBlank+0x3c>
		bResult = TRUE;
8110858c:	00800044 	movi	r2,1
81108590:	e0bffe15 	stw	r2,-8(fp)
81108594:	00000106 	br	8110859c <bSyncIrqFlagBlank+0x40>
	} else {
		bResult = FALSE;
81108598:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110859c:	e0bffe17 	ldw	r2,-8(fp)
}
811085a0:	e037883a 	mov	sp,fp
811085a4:	dfc00117 	ldw	ra,4(sp)
811085a8:	df000017 	ldw	fp,0(sp)
811085ac:	dec00204 	addi	sp,sp,8
811085b0:	f800283a 	ret

811085b4 <uliSyncGetCtr>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetCtr(void) {
811085b4:	defffd04 	addi	sp,sp,-12
811085b8:	de00012e 	bgeu	sp,et,811085c0 <uliSyncGetCtr+0xc>
811085bc:	003b68fa 	trap	3
811085c0:	dfc00215 	stw	ra,8(sp)
811085c4:	df000115 	stw	fp,4(sp)
811085c8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811085cc:	01000284 	movi	r4,10
811085d0:	11086880 	call	81108688 <uliSyncReadReg>
811085d4:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
811085d8:	e0bfff17 	ldw	r2,-4(fp)
}
811085dc:	e037883a 	mov	sp,fp
811085e0:	dfc00117 	ldw	ra,4(sp)
811085e4:	df000017 	ldw	fp,0(sp)
811085e8:	dec00204 	addi	sp,sp,8
811085ec:	f800283a 	ret

811085f0 <uliSyncReadStatus>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncReadStatus(void) {
811085f0:	defffd04 	addi	sp,sp,-12
811085f4:	de00012e 	bgeu	sp,et,811085fc <uliSyncReadStatus+0xc>
811085f8:	003b68fa 	trap	3
811085fc:	dfc00215 	stw	ra,8(sp)
81108600:	df000115 	stw	fp,4(sp)
81108604:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81108608:	0009883a 	mov	r4,zero
8110860c:	11086880 	call	81108688 <uliSyncReadReg>
81108610:	e0bfff15 	stw	r2,-4(fp)
	return aux;
81108614:	e0bfff17 	ldw	r2,-4(fp)
}
81108618:	e037883a 	mov	sp,fp
8110861c:	dfc00117 	ldw	ra,4(sp)
81108620:	df000017 	ldw	fp,0(sp)
81108624:	dec00204 	addi	sp,sp,8
81108628:	f800283a 	ret

8110862c <bSyncWriteReg>:
 * @param [in] alt_u32 offset
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
static bool bSyncWriteReg(alt_u32 uliOffset, alt_u32 uliValue) {
8110862c:	defffc04 	addi	sp,sp,-16
81108630:	de00012e 	bgeu	sp,et,81108638 <bSyncWriteReg+0xc>
81108634:	003b68fa 	trap	3
81108638:	df000315 	stw	fp,12(sp)
8110863c:	df000304 	addi	fp,sp,12
81108640:	e13ffe15 	stw	r4,-8(fp)
81108644:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81108648:	00a00034 	movhi	r2,32768
8110864c:	10810004 	addi	r2,r2,1024
81108650:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + uliOffset) = uliValue;
81108654:	e0bffe17 	ldw	r2,-8(fp)
81108658:	1085883a 	add	r2,r2,r2
8110865c:	1085883a 	add	r2,r2,r2
81108660:	1007883a 	mov	r3,r2
81108664:	e0bffd17 	ldw	r2,-12(fp)
81108668:	10c5883a 	add	r2,r2,r3
8110866c:	e0ffff17 	ldw	r3,-4(fp)
81108670:	10c00015 	stw	r3,0(r2)
	return TRUE;
81108674:	00800044 	movi	r2,1
}
81108678:	e037883a 	mov	sp,fp
8110867c:	df000017 	ldw	fp,0(sp)
81108680:	dec00104 	addi	sp,sp,4
81108684:	f800283a 	ret

81108688 <uliSyncReadReg>:
 *
 * @param [in] alt_u32 offset
 *
 * @retval alt_u32 value -> reg
 */
static alt_u32 uliSyncReadReg(alt_u32 uliOffset) {
81108688:	defffc04 	addi	sp,sp,-16
8110868c:	de00012e 	bgeu	sp,et,81108694 <uliSyncReadReg+0xc>
81108690:	003b68fa 	trap	3
81108694:	df000315 	stw	fp,12(sp)
81108698:	df000304 	addi	fp,sp,12
8110869c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
811086a0:	00a00034 	movhi	r2,32768
811086a4:	10810004 	addi	r2,r2,1024
811086a8:	e0bffd15 	stw	r2,-12(fp)
	value = *(p_addr + uliOffset);
811086ac:	e0bfff17 	ldw	r2,-4(fp)
811086b0:	1085883a 	add	r2,r2,r2
811086b4:	1085883a 	add	r2,r2,r2
811086b8:	1007883a 	mov	r3,r2
811086bc:	e0bffd17 	ldw	r2,-12(fp)
811086c0:	10c5883a 	add	r2,r2,r3
811086c4:	10800017 	ldw	r2,0(r2)
811086c8:	e0bffe15 	stw	r2,-8(fp)
	return value;
811086cc:	e0bffe17 	ldw	r2,-8(fp)
}
811086d0:	e037883a 	mov	sp,fp
811086d4:	df000017 	ldw	fp,0(sp)
811086d8:	dec00104 	addi	sp,sp,4
811086dc:	f800283a 	ret

811086e0 <vFeeTask>:

#include "fee_task.h"



void vFeeTask(void *task_data) {
811086e0:	defffd04 	addi	sp,sp,-12
811086e4:	de00012e 	bgeu	sp,et,811086ec <vFeeTask+0xc>
811086e8:	003b68fa 	trap	3
811086ec:	df000215 	stw	fp,8(sp)
811086f0:	df000204 	addi	fp,sp,8
811086f4:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
811086f8:	e03ffe15 	stw	zero,-8(fp)

		// Check sync ?
			// mudar de estado se isso estiver agendado


}
811086fc:	0001883a 	nop
81108700:	e037883a 	mov	sp,fp
81108704:	df000017 	ldw	fp,0(sp)
81108708:	dec00104 	addi	sp,sp,4
8110870c:	f800283a 	ret

81108710 <vInAckHandlerTask>:


#include "in_ack_handler_task.h"


void vInAckHandlerTask(void *task_data) {
81108710:	defff704 	addi	sp,sp,-36
81108714:	de00012e 	bgeu	sp,et,8110871c <vInAckHandlerTask+0xc>
81108718:	003b68fa 	trap	3
8110871c:	dfc00815 	stw	ra,32(sp)
81108720:	df000715 	stw	fp,28(sp)
81108724:	df000704 	addi	fp,sp,28
81108728:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
8110872c:	e03ff915 	stw	zero,-28(fp)
    bool bFinished32 = FALSE;
81108730:	e03ffa15 	stw	zero,-24(fp)
    bool bFinished64 = FALSE;
81108734:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished128 = FALSE;
81108738:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    INT8U ucReturnMutex;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucCountRetries = 0;
8110873c:	e03ffe05 	stb	zero,-8(fp)
    unsigned char i = 0;
81108740:	e03ffe45 	stb	zero,-7(fp)

	#ifdef DEBUG_ON
		debug(fp,"vReceiverAckTask, enter task.\n");
81108744:	d0a04d17 	ldw	r2,-32460(gp)
81108748:	100f883a 	mov	r7,r2
8110874c:	01800784 	movi	r6,30
81108750:	01400044 	movi	r5,1
81108754:	01204534 	movhi	r4,33044
81108758:	21301404 	addi	r4,r4,-16304
8110875c:	11116b00 	call	811116b0 <fwrite>
	#endif

	eReceiverAckState = sRAConfiguring;
81108760:	e03ffd15 	stw	zero,-12(fp)

	for(;;){

		switch (eReceiverAckState) {
81108764:	e0bffd17 	ldw	r2,-12(fp)
81108768:	10c00060 	cmpeqi	r3,r2,1
8110876c:	1800071e 	bne	r3,zero,8110878c <vInAckHandlerTask+0x7c>
81108770:	0080032e 	bgeu	zero,r2,81108780 <vInAckHandlerTask+0x70>
81108774:	108000a0 	cmpeqi	r2,r2,2
81108778:	10005a1e 	bne	r2,zero,811088e4 <vInAckHandlerTask+0x1d4>
                    vFailFoundBufferRetransmission();
                }
                eReceiverAckState = sRAGettingACK;
				break;
			default:
				break;
8110877c:	00012806 	br	81108c20 <vInAckHandlerTask+0x510>
	for(;;){

		switch (eReceiverAckState) {
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
81108780:	00800044 	movi	r2,1
81108784:	e0bffd15 	stw	r2,-12(fp)
				break;
81108788:	00012506 	br	81108c20 <vInAckHandlerTask+0x510>
            case sRAGettingACK:
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
8110878c:	d0a05117 	ldw	r2,-32444(gp)
81108790:	e0fffec4 	addi	r3,fp,-5
81108794:	180d883a 	mov	r6,r3
81108798:	000b883a 	mov	r5,zero
8110879c:	1009883a 	mov	r4,r2
811087a0:	112e4080 	call	8112e408 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
811087a4:	e0bffec3 	ldbu	r2,-5(fp)
811087a8:	10803fcc 	andi	r2,r2,255
811087ac:	10004b1e 	bne	r2,zero,811088dc <vInAckHandlerTask+0x1cc>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
811087b0:	d0a05017 	ldw	r2,-32448(gp)
811087b4:	e0fffec4 	addi	r3,fp,-5
811087b8:	180d883a 	mov	r6,r3
811087bc:	000b883a 	mov	r5,zero
811087c0:	1009883a 	mov	r4,r2
811087c4:	112c3fc0 	call	8112c3fc <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
811087c8:	e0bffec3 	ldbu	r2,-5(fp)
811087cc:	10803fcc 	andi	r2,r2,255
811087d0:	1000401e 	bne	r2,zero,811088d4 <vInAckHandlerTask+0x1c4>

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811087d4:	e03ffe45 	stb	zero,-7(fp)
811087d8:	00003706 	br	811088b8 <vInAckHandlerTask+0x1a8>
                        {
                            
                            if ( xReceivedACK[i].cType != 0 ) {
811087dc:	e0fffe43 	ldbu	r3,-7(fp)
811087e0:	00a04574 	movhi	r2,33045
811087e4:	10b38e04 	addi	r2,r2,-12744
811087e8:	18c7883a 	add	r3,r3,r3
811087ec:	18c7883a 	add	r3,r3,r3
811087f0:	10c5883a 	add	r2,r2,r3
811087f4:	10800003 	ldbu	r2,0(r2)
811087f8:	10803fcc 	andi	r2,r2,255
811087fc:	1080201c 	xori	r2,r2,128
81108800:	10bfe004 	addi	r2,r2,-128
81108804:	10002926 	beq	r2,zero,811088ac <vInAckHandlerTask+0x19c>

                                /*  Is it a NACK? */
                                if ( xReceivedACK[i].cType != NACK_CHAR ) {
81108808:	e0fffe43 	ldbu	r3,-7(fp)
8110880c:	00a04574 	movhi	r2,33045
81108810:	10b38e04 	addi	r2,r2,-12744
81108814:	18c7883a 	add	r3,r3,r3
81108818:	18c7883a 	add	r3,r3,r3
8110881c:	10c5883a 	add	r2,r2,r3
81108820:	10800003 	ldbu	r2,0(r2)
81108824:	10803fcc 	andi	r2,r2,255
81108828:	1080201c 	xori	r2,r2,128
8110882c:	10bfe004 	addi	r2,r2,-128
81108830:	108008e0 	cmpeqi	r2,r2,35
81108834:	10000d1e 	bne	r2,zero,8110886c <vInAckHandlerTask+0x15c>
                                    /* Locate the message, copy for the local variable in order to free the mutex. */
                                    xRAckLocal = xReceivedACK[i];
81108838:	e0fffe43 	ldbu	r3,-7(fp)
8110883c:	00a04574 	movhi	r2,33045
81108840:	10b38e04 	addi	r2,r2,-12744
81108844:	18c7883a 	add	r3,r3,r3
81108848:	18c7883a 	add	r3,r3,r3
8110884c:	10c5883a 	add	r2,r2,r3
81108850:	10c0000b 	ldhu	r3,0(r2)
81108854:	d0e0478d 	sth	r3,-32482(gp)
81108858:	1080008b 	ldhu	r2,2(r2)
8110885c:	d0a0480d 	sth	r2,-32480(gp)
                                    eReceiverAckState = sRACleanningBuffer;
81108860:	00800084 	movi	r2,2
81108864:	e0bffd15 	stw	r2,-12(fp)
                                    break;
81108868:	00001606 	br	811088c4 <vInAckHandlerTask+0x1b4>
                                } else {
                                    /*  Yes is a NACK, do nothing. The packet will be retransmited after timeout, since we can't know which message
                                        was not transmited, is too much expensive retransmit all "waiting ack" packets. So, do nothing, excet clear the pipe buffer*/
                                    #ifdef DEBUG_ON
                                        debug(fp,"NACK received.");
8110886c:	d0a04d17 	ldw	r2,-32460(gp)
81108870:	100f883a 	mov	r7,r2
81108874:	01800384 	movi	r6,14
81108878:	01400044 	movi	r5,1
8110887c:	01204534 	movhi	r4,33044
81108880:	21301c04 	addi	r4,r4,-16272
81108884:	11116b00 	call	811116b0 <fwrite>
                                    #endif
                                    eReceiverAckState = sRAGettingACK;
81108888:	00800044 	movi	r2,1
8110888c:	e0bffd15 	stw	r2,-12(fp)
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
81108890:	e0fffe43 	ldbu	r3,-7(fp)
81108894:	00a04574 	movhi	r2,33045
81108898:	10b38e04 	addi	r2,r2,-12744
8110889c:	18c7883a 	add	r3,r3,r3
811088a0:	18c7883a 	add	r3,r3,r3
811088a4:	10c5883a 	add	r2,r2,r3
811088a8:	10000005 	stb	zero,0(r2)

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811088ac:	e0bffe43 	ldbu	r2,-7(fp)
811088b0:	10800044 	addi	r2,r2,1
811088b4:	e0bffe45 	stb	r2,-7(fp)
811088b8:	e0bffe43 	ldbu	r2,-7(fp)
811088bc:	10800130 	cmpltui	r2,r2,4
811088c0:	103fc61e 	bne	r2,zero,811087dc <__reset+0xfb0e87dc>
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                            }

                        }
                        OSMutexPost(xMutexReceivedACK);
811088c4:	d0a05017 	ldw	r2,-32448(gp)
811088c8:	1009883a 	mov	r4,r2
811088cc:	112c9a00 	call	8112c9a0 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088d0:	0000d306 	br	81108c20 <vInAckHandlerTask+0x510>
                        }
                        OSMutexPost(xMutexReceivedACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexReceiverTask();
811088d4:	110da780 	call	8110da78 <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088d8:	0000d106 	br	81108c20 <vInAckHandlerTask+0x510>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
811088dc:	110da100 	call	8110da10 <vFailGetCountSemaphoreReceiverTask>
                }
                break;
811088e0:	0000cf06 	br	81108c20 <vInAckHandlerTask+0x510>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */

                bFound = FALSE;
811088e4:	e03ff915 	stw	zero,-28(fp)
                bFinished32=FALSE;
811088e8:	e03ffa15 	stw	zero,-24(fp)
                bFinished64=FALSE;
811088ec:	e03ffb15 	stw	zero,-20(fp)
                bFinished128=FALSE;
811088f0:	e03ffc15 	stw	zero,-16(fp)
                ucCountRetries = 0;
811088f4:	e03ffe05 	stb	zero,-8(fp)
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
811088f8:	0000b806 	br	81108bdc <vInAckHandlerTask+0x4cc>

                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
811088fc:	e0bff917 	ldw	r2,-28(fp)
81108900:	1000371e 	bne	r2,zero,811089e0 <vInAckHandlerTask+0x2d0>
81108904:	e0bffa17 	ldw	r2,-24(fp)
81108908:	1000351e 	bne	r2,zero,811089e0 <vInAckHandlerTask+0x2d0>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
8110890c:	d0a05517 	ldw	r2,-32428(gp)
81108910:	e0fffec4 	addi	r3,fp,-5
81108914:	180b883a 	mov	r5,r3
81108918:	1009883a 	mov	r4,r2
8110891c:	112bd7c0 	call	8112bd7c <OSMutexAccept>
81108920:	e0bffe85 	stb	r2,-6(fp)
                        if ( error_code == OS_NO_ERR ) {
81108924:	e0bffec3 	ldbu	r2,-5(fp)
81108928:	10803fcc 	andi	r2,r2,255
8110892c:	10002c1e 	bne	r2,zero,811089e0 <vInAckHandlerTask+0x2d0>
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
81108930:	e03ffe45 	stb	zero,-7(fp)
81108934:	00002006 	br	811089b8 <vInAckHandlerTask+0x2a8>
                            {
                                if ( xBuffer32[i].usiId == xRAckLocal.usiId ) {
81108938:	e0fffe43 	ldbu	r3,-7(fp)
8110893c:	00a04534 	movhi	r2,33044
81108940:	109aff04 	addi	r2,r2,27644
81108944:	18c009a4 	muli	r3,r3,38
81108948:	10c5883a 	add	r2,r2,r3
8110894c:	10800804 	addi	r2,r2,32
81108950:	10c0000b 	ldhu	r3,0(r2)
81108954:	d0a0480b 	ldhu	r2,-32480(gp)
81108958:	18ffffcc 	andi	r3,r3,65535
8110895c:	10bfffcc 	andi	r2,r2,65535
81108960:	1880121e 	bne	r3,r2,811089ac <vInAckHandlerTask+0x29c>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer32[i].usiId = 0;
81108964:	e0fffe43 	ldbu	r3,-7(fp)
81108968:	00a04534 	movhi	r2,33044
8110896c:	109aff04 	addi	r2,r2,27644
81108970:	18c009a4 	muli	r3,r3,38
81108974:	10c5883a 	add	r2,r2,r3
81108978:	10800804 	addi	r2,r2,32
8110897c:	1000000d 	sth	zero,0(r2)
                                    bFound = TRUE;
81108980:	00800044 	movi	r2,1
81108984:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer32);
81108988:	d0a05817 	ldw	r2,-32416(gp)
8110898c:	1009883a 	mov	r4,r2
81108990:	112e7900 	call	8112e790 <OSSemPost>
81108994:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108998:	e0bffec3 	ldbu	r2,-5(fp)
8110899c:	10803fcc 	andi	r2,r2,255
811089a0:	10000926 	beq	r2,zero,811089c8 <vInAckHandlerTask+0x2b8>
                                        vFailSetCountSemaphorexBuffer32();
811089a4:	110dcc40 	call	8110dcc4 <vFailSetCountSemaphorexBuffer32>
                                    }
                                    break;
811089a8:	00000706 	br	811089c8 <vInAckHandlerTask+0x2b8>
                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
                        if ( error_code == OS_NO_ERR ) {
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
811089ac:	e0bffe43 	ldbu	r2,-7(fp)
811089b0:	10800044 	addi	r2,r2,1
811089b4:	e0bffe45 	stb	r2,-7(fp)
811089b8:	e0bffe43 	ldbu	r2,-7(fp)
811089bc:	10800230 	cmpltui	r2,r2,8
811089c0:	103fdd1e 	bne	r2,zero,81108938 <__reset+0xfb0e8938>
811089c4:	00000106 	br	811089cc <vInAckHandlerTask+0x2bc>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer32);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer32();
                                    }
                                    break;
811089c8:	0001883a 	nop
                                }
                            }
                            OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
811089cc:	d0a05517 	ldw	r2,-32428(gp)
811089d0:	1009883a 	mov	r4,r2
811089d4:	112c9a00 	call	8112c9a0 <OSMutexPost>
                            bFinished32 = TRUE;
811089d8:	00800044 	movi	r2,1
811089dc:	e0bffa15 	stw	r2,-24(fp)
                        }
                    }


                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
811089e0:	e0bff917 	ldw	r2,-28(fp)
811089e4:	1000371e 	bne	r2,zero,81108ac4 <vInAckHandlerTask+0x3b4>
811089e8:	e0bffb17 	ldw	r2,-20(fp)
811089ec:	1000351e 	bne	r2,zero,81108ac4 <vInAckHandlerTask+0x3b4>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
811089f0:	d0a05917 	ldw	r2,-32412(gp)
811089f4:	e0fffec4 	addi	r3,fp,-5
811089f8:	180b883a 	mov	r5,r3
811089fc:	1009883a 	mov	r4,r2
81108a00:	112bd7c0 	call	8112bd7c <OSMutexAccept>
81108a04:	e0bffe85 	stb	r2,-6(fp)
                        if ( error_code == OS_NO_ERR ) {
81108a08:	e0bffec3 	ldbu	r2,-5(fp)
81108a0c:	10803fcc 	andi	r2,r2,255
81108a10:	10002c1e 	bne	r2,zero,81108ac4 <vInAckHandlerTask+0x3b4>
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81108a14:	e03ffe45 	stb	zero,-7(fp)
81108a18:	00002006 	br	81108a9c <vInAckHandlerTask+0x38c>
                            {
                                if ( xBuffer64[i].usiId == xRAckLocal.usiId ) {
81108a1c:	e0fffe43 	ldbu	r3,-7(fp)
81108a20:	00a04534 	movhi	r2,33044
81108a24:	1089a204 	addi	r2,r2,9864
81108a28:	18c011a4 	muli	r3,r3,70
81108a2c:	10c5883a 	add	r2,r2,r3
81108a30:	10801004 	addi	r2,r2,64
81108a34:	10c0000b 	ldhu	r3,0(r2)
81108a38:	d0a0480b 	ldhu	r2,-32480(gp)
81108a3c:	18ffffcc 	andi	r3,r3,65535
81108a40:	10bfffcc 	andi	r2,r2,65535
81108a44:	1880121e 	bne	r3,r2,81108a90 <vInAckHandlerTask+0x380>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer64[i].usiId = 0;
81108a48:	e0fffe43 	ldbu	r3,-7(fp)
81108a4c:	00a04534 	movhi	r2,33044
81108a50:	1089a204 	addi	r2,r2,9864
81108a54:	18c011a4 	muli	r3,r3,70
81108a58:	10c5883a 	add	r2,r2,r3
81108a5c:	10801004 	addi	r2,r2,64
81108a60:	1000000d 	sth	zero,0(r2)

                                    bFound = TRUE;
81108a64:	00800044 	movi	r2,1
81108a68:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer64);
81108a6c:	d0a04a17 	ldw	r2,-32472(gp)
81108a70:	1009883a 	mov	r4,r2
81108a74:	112e7900 	call	8112e790 <OSSemPost>
81108a78:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108a7c:	e0bffec3 	ldbu	r2,-5(fp)
81108a80:	10803fcc 	andi	r2,r2,255
81108a84:	10000926 	beq	r2,zero,81108aac <vInAckHandlerTask+0x39c>
                                        vFailSetCountSemaphorexBuffer64();
81108a88:	110dd2c0 	call	8110dd2c <vFailSetCountSemaphorexBuffer64>
                                    }
                                    break;
81108a8c:	00000706 	br	81108aac <vInAckHandlerTask+0x39c>
                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
                        if ( error_code == OS_NO_ERR ) {
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81108a90:	e0bffe43 	ldbu	r2,-7(fp)
81108a94:	10800044 	addi	r2,r2,1
81108a98:	e0bffe45 	stb	r2,-7(fp)
81108a9c:	e0bffe43 	ldbu	r2,-7(fp)
81108aa0:	10800130 	cmpltui	r2,r2,4
81108aa4:	103fdd1e 	bne	r2,zero,81108a1c <__reset+0xfb0e8a1c>
81108aa8:	00000106 	br	81108ab0 <vInAckHandlerTask+0x3a0>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer64);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer64();
                                    }
                                    break;
81108aac:	0001883a 	nop
                                }
                            }
                            OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64*/
81108ab0:	d0a05917 	ldw	r2,-32412(gp)
81108ab4:	1009883a 	mov	r4,r2
81108ab8:	112c9a00 	call	8112c9a0 <OSMutexPost>
                            bFinished64 = TRUE;
81108abc:	00800044 	movi	r2,1
81108ac0:	e0bffb15 	stw	r2,-20(fp)
                        }
                    }

                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
81108ac4:	e0bff917 	ldw	r2,-28(fp)
81108ac8:	1000371e 	bne	r2,zero,81108ba8 <vInAckHandlerTask+0x498>
81108acc:	e0bffc17 	ldw	r2,-16(fp)
81108ad0:	1000351e 	bne	r2,zero,81108ba8 <vInAckHandlerTask+0x498>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
81108ad4:	d0a05717 	ldw	r2,-32420(gp)
81108ad8:	e0fffec4 	addi	r3,fp,-5
81108adc:	180b883a 	mov	r5,r3
81108ae0:	1009883a 	mov	r4,r2
81108ae4:	112bd7c0 	call	8112bd7c <OSMutexAccept>
81108ae8:	e0bffe85 	stb	r2,-6(fp)
                        if ( error_code == OS_NO_ERR ) {
81108aec:	e0bffec3 	ldbu	r2,-5(fp)
81108af0:	10803fcc 	andi	r2,r2,255
81108af4:	10002c1e 	bne	r2,zero,81108ba8 <vInAckHandlerTask+0x498>
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81108af8:	e03ffe45 	stb	zero,-7(fp)
81108afc:	00002006 	br	81108b80 <vInAckHandlerTask+0x470>
                            {
                                if ( xBuffer128[i].usiId == xRAckLocal.usiId ) {
81108b00:	e0fffe43 	ldbu	r3,-7(fp)
81108b04:	00a04574 	movhi	r2,33045
81108b08:	10b34b04 	addi	r2,r2,-13012
81108b0c:	18c021a4 	muli	r3,r3,134
81108b10:	10c5883a 	add	r2,r2,r3
81108b14:	10802004 	addi	r2,r2,128
81108b18:	10c0000b 	ldhu	r3,0(r2)
81108b1c:	d0a0480b 	ldhu	r2,-32480(gp)
81108b20:	18ffffcc 	andi	r3,r3,65535
81108b24:	10bfffcc 	andi	r2,r2,65535
81108b28:	1880121e 	bne	r3,r2,81108b74 <vInAckHandlerTask+0x464>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer128[i].usiId = 0;
81108b2c:	e0fffe43 	ldbu	r3,-7(fp)
81108b30:	00a04574 	movhi	r2,33045
81108b34:	10b34b04 	addi	r2,r2,-13012
81108b38:	18c021a4 	muli	r3,r3,134
81108b3c:	10c5883a 	add	r2,r2,r3
81108b40:	10802004 	addi	r2,r2,128
81108b44:	1000000d 	sth	zero,0(r2)
                                    bFound = TRUE;
81108b48:	00800044 	movi	r2,1
81108b4c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer128);
81108b50:	d0a04e17 	ldw	r2,-32456(gp)
81108b54:	1009883a 	mov	r4,r2
81108b58:	112e7900 	call	8112e790 <OSSemPost>
81108b5c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108b60:	e0bffec3 	ldbu	r2,-5(fp)
81108b64:	10803fcc 	andi	r2,r2,255
81108b68:	10000926 	beq	r2,zero,81108b90 <vInAckHandlerTask+0x480>
                                        vFailSetCountSemaphorexBuffer128();
81108b6c:	110dd940 	call	8110dd94 <vFailSetCountSemaphorexBuffer128>
                                    }
                                    break;
81108b70:	00000706 	br	81108b90 <vInAckHandlerTask+0x480>
                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
                        if ( error_code == OS_NO_ERR ) {
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81108b74:	e0bffe43 	ldbu	r2,-7(fp)
81108b78:	10800044 	addi	r2,r2,1
81108b7c:	e0bffe45 	stb	r2,-7(fp)
81108b80:	e0bffe43 	ldbu	r2,-7(fp)
81108b84:	108000b0 	cmpltui	r2,r2,2
81108b88:	103fdd1e 	bne	r2,zero,81108b00 <__reset+0xfb0e8b00>
81108b8c:	00000106 	br	81108b94 <vInAckHandlerTask+0x484>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer128);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer128();
                                    }
                                    break;
81108b90:	0001883a 	nop
                                }
                            }
                            OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81108b94:	d0a05717 	ldw	r2,-32420(gp)
81108b98:	1009883a 	mov	r4,r2
81108b9c:	112c9a00 	call	8112c9a0 <OSMutexPost>
                            bFinished128 = TRUE;
81108ba0:	00800044 	movi	r2,1
81108ba4:	e0bffc15 	stw	r2,-16(fp)
                        }
                    }
                    /* Check if finish the search, if not probably some mutex is in use, so put the task to sleep for some time*/
                    if ( ( bFound == FALSE ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) )) {
81108ba8:	e0bff917 	ldw	r2,-28(fp)
81108bac:	10000b1e 	bne	r2,zero,81108bdc <vInAckHandlerTask+0x4cc>
81108bb0:	e0bffa17 	ldw	r2,-24(fp)
81108bb4:	10000426 	beq	r2,zero,81108bc8 <vInAckHandlerTask+0x4b8>
81108bb8:	e0bffb17 	ldw	r2,-20(fp)
81108bbc:	10000226 	beq	r2,zero,81108bc8 <vInAckHandlerTask+0x4b8>
81108bc0:	e0bffc17 	ldw	r2,-16(fp)
81108bc4:	1000051e 	bne	r2,zero,81108bdc <vInAckHandlerTask+0x4cc>
                        OSTimeDly(5); /* Make this task sleep for 5 ticks*/
81108bc8:	01000144 	movi	r4,5
81108bcc:	11302940 	call	81130294 <OSTimeDly>
                        ucCountRetries++;
81108bd0:	e0bffe03 	ldbu	r2,-8(fp)
81108bd4:	10800044 	addi	r2,r2,1
81108bd8:	e0bffe05 	stb	r2,-8(fp)
                bFinished32=FALSE;
                bFinished64=FALSE;
                bFinished128=FALSE;
                ucCountRetries = 0;
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
81108bdc:	e0bff917 	ldw	r2,-28(fp)
81108be0:	1000091e 	bne	r2,zero,81108c08 <vInAckHandlerTask+0x4f8>
81108be4:	e0bffe03 	ldbu	r2,-8(fp)
81108be8:	108001a8 	cmpgeui	r2,r2,6
81108bec:	1000061e 	bne	r2,zero,81108c08 <vInAckHandlerTask+0x4f8>
81108bf0:	e0bffa17 	ldw	r2,-24(fp)
81108bf4:	103f4126 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
81108bf8:	e0bffb17 	ldw	r2,-20(fp)
81108bfc:	103f3f26 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
81108c00:	e0bffc17 	ldw	r2,-16(fp)
81108c04:	103f3d26 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
                        OSTimeDly(5); /* Make this task sleep for 5 ticks*/
                        ucCountRetries++;
                    }
                }
                
                if (bFound == FALSE) {
81108c08:	e0bff917 	ldw	r2,-28(fp)
81108c0c:	1000011e 	bne	r2,zero,81108c14 <vInAckHandlerTask+0x504>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
81108c10:	110ddfc0 	call	8110ddfc <vFailFoundBufferRetransmission>
                }
                eReceiverAckState = sRAGettingACK;
81108c14:	00800044 	movi	r2,1
81108c18:	e0bffd15 	stw	r2,-12(fp)
				break;
81108c1c:	0001883a 	nop
			default:
				break;
		}
	}
81108c20:	003ed006 	br	81108764 <__reset+0xfb0e8764>

81108c24 <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81108c24:	defff704 	addi	sp,sp,-36
81108c28:	de00012e 	bgeu	sp,et,81108c30 <vInitialTask+0xc>
81108c2c:	003b68fa 	trap	3
81108c30:	dfc00815 	stw	ra,32(sp)
81108c34:	df000715 	stw	fp,28(sp)
81108c38:	df000704 	addi	fp,sp,28
81108c3c:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81108c40:	e03ffe05 	stb	zero,-8(fp)

	/* READ: Create the task that is responsible to READ UART buffer */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vReceiverUartTask,
81108c44:	00800104 	movi	r2,4
81108c48:	d8800415 	stw	r2,16(sp)
81108c4c:	d8000315 	stw	zero,12(sp)
81108c50:	00820004 	movi	r2,2048
81108c54:	d8800215 	stw	r2,8(sp)
81108c58:	00a04534 	movhi	r2,33044
81108c5c:	109b4b04 	addi	r2,r2,27948
81108c60:	d8800115 	stw	r2,4(sp)
81108c64:	00800784 	movi	r2,30
81108c68:	d8800015 	stw	r2,0(sp)
81108c6c:	01c00784 	movi	r7,30
81108c70:	01a04574 	movhi	r6,33045
81108c74:	31a34a04 	addi	r6,r6,-29400
81108c78:	000b883a 	mov	r5,zero
81108c7c:	01204474 	movhi	r4,33041
81108c80:	21278104 	addi	r4,r4,-25084
81108c84:	112f1740 	call	8112f174 <OSTaskCreateExt>
81108c88:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108c8c:	e0bffe03 	ldbu	r2,-8(fp)
81108c90:	10803fcc 	andi	r2,r2,255
81108c94:	10000526 	beq	r2,zero,81108cac <vInitialTask+0x88>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108c98:	e0bffe03 	ldbu	r2,-8(fp)
81108c9c:	10803fcc 	andi	r2,r2,255
81108ca0:	1009883a 	mov	r4,r2
81108ca4:	110d68c0 	call	8110d68c <printErrorTask>
		#endif
		vFailReceiverCreate();
81108ca8:	110dbe00 	call	8110dbe0 <vFailReceiverCreate>
	}


	/* Create the task that is responsible to parse all received messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vParserCommTask,
81108cac:	00800104 	movi	r2,4
81108cb0:	d8800415 	stw	r2,16(sp)
81108cb4:	d8000315 	stw	zero,12(sp)
81108cb8:	00820004 	movi	r2,2048
81108cbc:	d8800215 	stw	r2,8(sp)
81108cc0:	00a04574 	movhi	r2,33045
81108cc4:	10b39204 	addi	r2,r2,-12728
81108cc8:	d8800115 	stw	r2,4(sp)
81108ccc:	00800684 	movi	r2,26
81108cd0:	d8800015 	stw	r2,0(sp)
81108cd4:	01c00684 	movi	r7,26
81108cd8:	01a04574 	movhi	r6,33045
81108cdc:	31bb9104 	addi	r6,r6,-4540
81108ce0:	000b883a 	mov	r5,zero
81108ce4:	01204474 	movhi	r4,33041
81108ce8:	21248104 	addi	r4,r4,-28156
81108cec:	112f1740 	call	8112f174 <OSTaskCreateExt>
81108cf0:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108cf4:	e0bffe03 	ldbu	r2,-8(fp)
81108cf8:	10803fcc 	andi	r2,r2,255
81108cfc:	10000526 	beq	r2,zero,81108d14 <vInitialTask+0xf0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108d00:	e0bffe03 	ldbu	r2,-8(fp)
81108d04:	10803fcc 	andi	r2,r2,255
81108d08:	1009883a 	mov	r4,r2
81108d0c:	110d68c0 	call	8110d68c <printErrorTask>
		#endif
		vFailParserCommTaskCreate();
81108d10:	110e1a40 	call	8110e1a4 <vFailParserCommTaskCreate>
	}


	/* Create the task that is responsible to handle incomming ack packet */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInAckHandlerTask,
81108d14:	00800104 	movi	r2,4
81108d18:	d8800415 	stw	r2,16(sp)
81108d1c:	d8000315 	stw	zero,12(sp)
81108d20:	00820004 	movi	r2,2048
81108d24:	d8800215 	stw	r2,8(sp)
81108d28:	00a04534 	movhi	r2,33044
81108d2c:	1081a204 	addi	r2,r2,1672
81108d30:	d8800115 	stw	r2,4(sp)
81108d34:	008005c4 	movi	r2,23
81108d38:	d8800015 	stw	r2,0(sp)
81108d3c:	01c005c4 	movi	r7,23
81108d40:	01a04534 	movhi	r6,33044
81108d44:	3189a104 	addi	r6,r6,9860
81108d48:	000b883a 	mov	r5,zero
81108d4c:	01204474 	movhi	r4,33041
81108d50:	2121c404 	addi	r4,r4,-30960
81108d54:	112f1740 	call	8112f174 <OSTaskCreateExt>
81108d58:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108d5c:	e0bffe03 	ldbu	r2,-8(fp)
81108d60:	10803fcc 	andi	r2,r2,255
81108d64:	10000526 	beq	r2,zero,81108d7c <vInitialTask+0x158>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108d68:	e0bffe03 	ldbu	r2,-8(fp)
81108d6c:	10803fcc 	andi	r2,r2,255
81108d70:	1009883a 	mov	r4,r2
81108d74:	110d68c0 	call	8110d68c <printErrorTask>
		#endif
		vFailInAckHandlerTaskCreate();
81108d78:	110e1f00 	call	8110e1f0 <vFailInAckHandlerTaskCreate>



	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vOutAckHandlerTask,
81108d7c:	00800104 	movi	r2,4
81108d80:	d8800415 	stw	r2,16(sp)
81108d84:	d8000315 	stw	zero,12(sp)
81108d88:	00820004 	movi	r2,2048
81108d8c:	d8800215 	stw	r2,8(sp)
81108d90:	00a04574 	movhi	r2,33045
81108d94:	10a34b04 	addi	r2,r2,-29396
81108d98:	d8800115 	stw	r2,4(sp)
81108d9c:	00800644 	movi	r2,25
81108da0:	d8800015 	stw	r2,0(sp)
81108da4:	01c00644 	movi	r7,25
81108da8:	01a04574 	movhi	r6,33045
81108dac:	31ab4a04 	addi	r6,r6,-21208
81108db0:	000b883a 	mov	r5,zero
81108db4:	01204474 	movhi	r4,33041
81108db8:	2123d104 	addi	r4,r4,-28860
81108dbc:	112f1740 	call	8112f174 <OSTaskCreateExt>
81108dc0:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108dc4:	e0bffe03 	ldbu	r2,-8(fp)
81108dc8:	10803fcc 	andi	r2,r2,255
81108dcc:	10000526 	beq	r2,zero,81108de4 <vInitialTask+0x1c0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108dd0:	e0bffe03 	ldbu	r2,-8(fp)
81108dd4:	10803fcc 	andi	r2,r2,255
81108dd8:	1009883a 	mov	r4,r2
81108ddc:	110d68c0 	call	8110d68c <printErrorTask>
		#endif
		vFailOutAckHandlerTaskCreate();
81108de0:	110e23c0 	call	8110e23c <vFailOutAckHandlerTaskCreate>
	}


	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vTimeoutCheckerTask,
81108de4:	00800104 	movi	r2,4
81108de8:	d8800415 	stw	r2,16(sp)
81108dec:	d8000315 	stw	zero,12(sp)
81108df0:	00820004 	movi	r2,2048
81108df4:	d8800215 	stw	r2,8(sp)
81108df8:	00a04534 	movhi	r2,33044
81108dfc:	1092ff04 	addi	r2,r2,19452
81108e00:	d8800115 	stw	r2,4(sp)
81108e04:	00800704 	movi	r2,28
81108e08:	d8800015 	stw	r2,0(sp)
81108e0c:	01c00704 	movi	r7,28
81108e10:	01a04534 	movhi	r6,33044
81108e14:	319afe04 	addi	r6,r6,27640
81108e18:	000b883a 	mov	r5,zero
81108e1c:	01204474 	movhi	r4,33041
81108e20:	212a8704 	addi	r4,r4,-21988
81108e24:	112f1740 	call	8112f174 <OSTaskCreateExt>
81108e28:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108e2c:	e0bffe03 	ldbu	r2,-8(fp)
81108e30:	10803fcc 	andi	r2,r2,255
81108e34:	10000526 	beq	r2,zero,81108e4c <vInitialTask+0x228>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108e38:	e0bffe03 	ldbu	r2,-8(fp)
81108e3c:	10803fcc 	andi	r2,r2,255
81108e40:	1009883a 	mov	r4,r2
81108e44:	110d68c0 	call	8110d68c <printErrorTask>
		#endif
		vFailTimeoutCheckerTaskCreate();
81108e48:	110e3200 	call	8110e320 <vFailTimeoutCheckerTaskCreate>



	/* SEND: Create the task that is responsible to SEND UART packets */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vSenderComTask,
81108e4c:	00800104 	movi	r2,4
81108e50:	d8800415 	stw	r2,16(sp)
81108e54:	d8000315 	stw	zero,12(sp)
81108e58:	00820004 	movi	r2,2048
81108e5c:	d8800215 	stw	r2,8(sp)
81108e60:	00a04534 	movhi	r2,33044
81108e64:	1089e804 	addi	r2,r2,10144
81108e68:	d8800115 	stw	r2,4(sp)
81108e6c:	00800604 	movi	r2,24
81108e70:	d8800015 	stw	r2,0(sp)
81108e74:	01c00604 	movi	r7,24
81108e78:	01a04534 	movhi	r6,33044
81108e7c:	3191e704 	addi	r6,r6,18332
81108e80:	000b883a 	mov	r5,zero
81108e84:	01204474 	movhi	r4,33041
81108e88:	212a2e04 	addi	r4,r4,-22344
81108e8c:	112f1740 	call	8112f174 <OSTaskCreateExt>
81108e90:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108e94:	e0bffe03 	ldbu	r2,-8(fp)
81108e98:	10803fcc 	andi	r2,r2,255
81108e9c:	10000526 	beq	r2,zero,81108eb4 <vInitialTask+0x290>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108ea0:	e0bffe03 	ldbu	r2,-8(fp)
81108ea4:	10803fcc 	andi	r2,r2,255
81108ea8:	1009883a 	mov	r4,r2
81108eac:	110d68c0 	call	8110d68c <printErrorTask>
		#endif
		vFailSenderCreate();
81108eb0:	110dc2c0 	call	8110dc2c <vFailSenderCreate>
	}

	/*	This is the timer that's trigger the task that implements the timeout/retransmission logic*/
	OSTmrStart ((OS_TMR *)xTimerRetransmission, (INT8U  *)&error_code);
81108eb4:	d0a05617 	ldw	r2,-32424(gp)
81108eb8:	e17ffe04 	addi	r5,fp,-8
81108ebc:	1009883a 	mov	r4,r2
81108ec0:	1130e940 	call	81130e94 <OSTmrStart>
	if ( error_code != OS_ERR_NONE) {
81108ec4:	e0bffe03 	ldbu	r2,-8(fp)
81108ec8:	10803fcc 	andi	r2,r2,255
81108ecc:	10000126 	beq	r2,zero,81108ed4 <vInitialTask+0x2b0>
		/*	Could not create the timer that syncs the task that is responsible to retransmit the packets*/
		vFailStartTimerRetransmission();
81108ed0:	110e5dc0 	call	8110e5dc <vFailStartTimerRetransmission>




	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
81108ed4:	01003fc4 	movi	r4,255
81108ed8:	112f3600 	call	8112f360 <OSTaskDel>
81108edc:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
81108ee0:	e0bffe03 	ldbu	r2,-8(fp)
81108ee4:	10803fcc 	andi	r2,r2,255
81108ee8:	10001026 	beq	r2,zero,81108f2c <vInitialTask+0x308>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108eec:	e0bffe03 	ldbu	r2,-8(fp)
81108ef0:	10803fcc 	andi	r2,r2,255
81108ef4:	1009883a 	mov	r4,r2
81108ef8:	110d68c0 	call	8110d68c <printErrorTask>
		#endif
		vFailDeleteInitialization();
81108efc:	110dc780 	call	8110dc78 <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
81108f00:	014009c4 	movi	r5,39
81108f04:	01000044 	movi	r4,1
81108f08:	112eac80 	call	8112eac8 <OSTaskChangePrio>

		for(;;) { /* Correct Program Flow should never get here */
			OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
81108f0c:	01003fc4 	movi	r4,255
81108f10:	112f3600 	call	8112f360 <OSTaskDel>
			OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
81108f14:	000f883a 	mov	r7,zero
81108f18:	01800284 	movi	r6,10
81108f1c:	000b883a 	mov	r5,zero
81108f20:	0009883a 	mov	r4,zero
81108f24:	11303a00 	call	811303a0 <OSTimeDlyHMSM>
		}
81108f28:	003ff806 	br	81108f0c <__reset+0xfb0e8f0c>
	}

}
81108f2c:	0001883a 	nop
81108f30:	e037883a 	mov	sp,fp
81108f34:	dfc00117 	ldw	ra,4(sp)
81108f38:	df000017 	ldw	fp,0(sp)
81108f3c:	dec00204 	addi	sp,sp,8
81108f40:	f800283a 	ret

81108f44 <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
81108f44:	defff604 	addi	sp,sp,-40
81108f48:	de00012e 	bgeu	sp,et,81108f50 <vOutAckHandlerTask+0xc>
81108f4c:	003b68fa 	trap	3
81108f50:	dfc00915 	stw	ra,36(sp)
81108f54:	df000815 	stw	fp,32(sp)
81108f58:	df000804 	addi	fp,sp,32
81108f5c:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
81108f60:	e03ff815 	stw	zero,-32(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
81108f64:	e03ffb15 	stw	zero,-20(fp)
81108f68:	e03ffc15 	stw	zero,-16(fp)
81108f6c:	e03ffd15 	stw	zero,-12(fp)
81108f70:	e03ffe15 	stw	zero,-8(fp)
    unsigned char ucCountRetries = 0;
81108f74:	e03ffa05 	stb	zero,-24(fp)
    unsigned char crc = 0;
81108f78:	e03ffa85 	stb	zero,-22(fp)

	#ifdef DEBUG_ON
		debug(fp,"vSenderAckTask, enter task.\n");
81108f7c:	d0a04d17 	ldw	r2,-32460(gp)
81108f80:	100f883a 	mov	r7,r2
81108f84:	01800704 	movi	r6,28
81108f88:	01400044 	movi	r5,1
81108f8c:	01204534 	movhi	r4,33044
81108f90:	21302004 	addi	r4,r4,-16256
81108f94:	11116b00 	call	811116b0 <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
81108f98:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
81108f9c:	e0bff917 	ldw	r2,-28(fp)
81108fa0:	10c00060 	cmpeqi	r3,r2,1
81108fa4:	1800071e 	bne	r3,zero,81108fc4 <vOutAckHandlerTask+0x80>
81108fa8:	0080032e 	bgeu	zero,r2,81108fb8 <vOutAckHandlerTask+0x74>
81108fac:	108000a0 	cmpeqi	r2,r2,2
81108fb0:	1000451e 	bne	r2,zero,811090c8 <vOutAckHandlerTask+0x184>
                    vFailGetMutexTxUARTSenderTask();
                }
                eSenderAckState = sSAGettingACK;
				break;
			default:
				break;
81108fb4:	00009206 	br	81109200 <vOutAckHandlerTask+0x2bc>
	for(;;){

		switch (eSenderAckState) {
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
81108fb8:	00800044 	movi	r2,1
81108fbc:	e0bff915 	stw	r2,-28(fp)
				break;
81108fc0:	00008f06 	br	81109200 <vOutAckHandlerTask+0x2bc>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                OSSemPend(xSemCountSenderACK, 0, &error_code);
81108fc4:	d0a04c17 	ldw	r2,-32464(gp)
81108fc8:	e0fffac4 	addi	r3,fp,-21
81108fcc:	180d883a 	mov	r6,r3
81108fd0:	000b883a 	mov	r5,zero
81108fd4:	1009883a 	mov	r4,r2
81108fd8:	112e4080 	call	8112e408 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
81108fdc:	e0bffac3 	ldbu	r2,-21(fp)
81108fe0:	10803fcc 	andi	r2,r2,255
81108fe4:	1000361e 	bne	r2,zero,811090c0 <vOutAckHandlerTask+0x17c>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
81108fe8:	d0a05a17 	ldw	r2,-32408(gp)
81108fec:	e0fffac4 	addi	r3,fp,-21
81108ff0:	180d883a 	mov	r6,r3
81108ff4:	000b883a 	mov	r5,zero
81108ff8:	1009883a 	mov	r4,r2
81108ffc:	112c3fc0 	call	8112c3fc <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81109000:	e0bffac3 	ldbu	r2,-21(fp)
81109004:	10803fcc 	andi	r2,r2,255
81109008:	10002b1e 	bne	r2,zero,811090b8 <vOutAckHandlerTask+0x174>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110900c:	e03ffa45 	stb	zero,-23(fp)
81109010:	00002206 	br	8110909c <vOutAckHandlerTask+0x158>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
81109014:	e0fffa43 	ldbu	r3,-23(fp)
81109018:	00a04574 	movhi	r2,33045
8110901c:	10bb9204 	addi	r2,r2,-4536
81109020:	18c7883a 	add	r3,r3,r3
81109024:	18c7883a 	add	r3,r3,r3
81109028:	10c5883a 	add	r2,r2,r3
8110902c:	10800003 	ldbu	r2,0(r2)
81109030:	10803fcc 	andi	r2,r2,255
81109034:	1080201c 	xori	r2,r2,128
81109038:	10bfe004 	addi	r2,r2,-128
8110903c:	10001426 	beq	r2,zero,81109090 <vOutAckHandlerTask+0x14c>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
81109040:	e0fffa43 	ldbu	r3,-23(fp)
81109044:	00a04574 	movhi	r2,33045
81109048:	10bb9204 	addi	r2,r2,-4536
8110904c:	18c7883a 	add	r3,r3,r3
81109050:	18c7883a 	add	r3,r3,r3
81109054:	10c5883a 	add	r2,r2,r3
81109058:	10c0000b 	ldhu	r3,0(r2)
8110905c:	d0e0488d 	sth	r3,-32478(gp)
81109060:	1080008b 	ldhu	r2,2(r2)
81109064:	d0a0490d 	sth	r2,-32476(gp)
                                eSenderAckState = sSASending;
81109068:	00800084 	movi	r2,2
8110906c:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
81109070:	e0fffa43 	ldbu	r3,-23(fp)
81109074:	00a04574 	movhi	r2,33045
81109078:	10bb9204 	addi	r2,r2,-4536
8110907c:	18c7883a 	add	r3,r3,r3
81109080:	18c7883a 	add	r3,r3,r3
81109084:	10c5883a 	add	r2,r2,r3
81109088:	10000005 	stb	zero,0(r2)
                                break;
8110908c:	00000606 	br	811090a8 <vOutAckHandlerTask+0x164>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81109090:	e0bffa43 	ldbu	r2,-23(fp)
81109094:	10800044 	addi	r2,r2,1
81109098:	e0bffa45 	stb	r2,-23(fp)
8110909c:	e0bffa43 	ldbu	r2,-23(fp)
811090a0:	10800130 	cmpltui	r2,r2,4
811090a4:	103fdb1e 	bne	r2,zero,81109014 <__reset+0xfb0e9014>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
811090a8:	d0a05a17 	ldw	r2,-32408(gp)
811090ac:	1009883a 	mov	r4,r2
811090b0:	112c9a00 	call	8112c9a0 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811090b4:	00005206 	br	81109200 <vOutAckHandlerTask+0x2bc>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
811090b8:	110d9a80 	call	8110d9a8 <vFailGetMutexSenderTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811090bc:	00005006 	br	81109200 <vOutAckHandlerTask+0x2bc>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
811090c0:	110d9400 	call	8110d940 <vFailGetCountSemaphoreSenderTask>
                }
                break;
811090c4:	00004e06 	br	81109200 <vOutAckHandlerTask+0x2bc>
			case sSASending:

                /* First check if is an NACK packet that should be sent */
                if ( xSAckLocal.cType != '#' ) {
811090c8:	d0a04883 	ldbu	r2,-32478(gp)
811090cc:	10803fcc 	andi	r2,r2,255
811090d0:	1080201c 	xori	r2,r2,128
811090d4:	10bfe004 	addi	r2,r2,-128
811090d8:	108008e0 	cmpeqi	r2,r2,35
811090dc:	1000201e 	bne	r2,zero,81109160 <vOutAckHandlerTask+0x21c>
                    /* In this state has a parsed ack packet in the variable xSAckLocal
                    we just need to calc the crc8 and create the uart packet to send. */
                    sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
811090e0:	d0a048c3 	ldbu	r2,-32477(gp)
811090e4:	10c03fcc 	andi	r3,r2,255
811090e8:	18c0201c 	xori	r3,r3,128
811090ec:	18ffe004 	addi	r3,r3,-128
811090f0:	d0a0490b 	ldhu	r2,-32476(gp)
811090f4:	113fffcc 	andi	r4,r2,65535
811090f8:	e0bffb04 	addi	r2,fp,-20
811090fc:	200f883a 	mov	r7,r4
81109100:	180d883a 	mov	r6,r3
81109104:	01604534 	movhi	r5,33044
81109108:	29702804 	addi	r5,r5,-16224
8110910c:	1009883a 	mov	r4,r2
81109110:	111282c0 	call	8111282c <sprintf>
                    crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
81109114:	e0bffb04 	addi	r2,fp,-20
81109118:	1009883a 	mov	r4,r2
8110911c:	1112a400 	call	81112a40 <strlen>
81109120:	1007883a 	mov	r3,r2
81109124:	e0bffb04 	addi	r2,fp,-20
81109128:	180b883a 	mov	r5,r3
8110912c:	1009883a 	mov	r4,r2
81109130:	110d6300 	call	8110d630 <ucCrc8wInit>
81109134:	e0bffa85 	stb	r2,-22(fp)
                    sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
81109138:	e13ffa83 	ldbu	r4,-22(fp)
8110913c:	e0fffb04 	addi	r3,fp,-20
81109140:	e0bffb04 	addi	r2,fp,-20
81109144:	200f883a 	mov	r7,r4
81109148:	180d883a 	mov	r6,r3
8110914c:	01604534 	movhi	r5,33044
81109150:	29702a04 	addi	r5,r5,-16216
81109154:	1009883a 	mov	r4,r2
81109158:	111282c0 	call	8111282c <sprintf>
8110915c:	00000606 	br	81109178 <vOutAckHandlerTask+0x234>
                } else {
                    /* Nack */
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
81109160:	e0fffb04 	addi	r3,fp,-20
81109164:	008d0d74 	movhi	r2,13365
81109168:	109f08c4 	addi	r2,r2,31779
8110916c:	18800015 	stw	r2,0(r3)
81109170:	00800ec4 	movi	r2,59
81109174:	1880010d 	sth	r2,4(r3)
                }

                bSuccess = FALSE;
81109178:	e03ff815 	stw	zero,-32(fp)
                ucCountRetries = 0;
8110917c:	e03ffa05 	stb	zero,-24(fp)
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
81109180:	00001406 	br	811091d4 <vOutAckHandlerTask+0x290>

                    OSMutexPend(xTxUARTMutex, 5, &error_code); /* Wait 5 ticks = 5 ms */
81109184:	d0a05b17 	ldw	r2,-32404(gp)
81109188:	e0fffac4 	addi	r3,fp,-21
8110918c:	180d883a 	mov	r6,r3
81109190:	01400144 	movi	r5,5
81109194:	1009883a 	mov	r4,r2
81109198:	112c3fc0 	call	8112c3fc <OSMutexPend>
                    if ( error_code == OS_NO_ERR ) {
8110919c:	e0bffac3 	ldbu	r2,-21(fp)
811091a0:	10803fcc 	andi	r2,r2,255
811091a4:	1000081e 	bne	r2,zero,811091c8 <vOutAckHandlerTask+0x284>
                        puts(cBufferAck);
811091a8:	e0bffb04 	addi	r2,fp,-20
811091ac:	1009883a 	mov	r4,r2
811091b0:	11124e80 	call	811124e8 <puts>
                        OSMutexPost(xTxUARTMutex);
811091b4:	d0a05b17 	ldw	r2,-32404(gp)
811091b8:	1009883a 	mov	r4,r2
811091bc:	112c9a00 	call	8112c9a0 <OSMutexPost>
                        bSuccess = TRUE;
811091c0:	00800044 	movi	r2,1
811091c4:	e0bff815 	stw	r2,-32(fp)
                    }
                    ucCountRetries++;
811091c8:	e0bffa03 	ldbu	r2,-24(fp)
811091cc:	10800044 	addi	r2,r2,1
811091d0:	e0bffa05 	stb	r2,-24(fp)
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
                }

                bSuccess = FALSE;
                ucCountRetries = 0;
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
811091d4:	e0bff817 	ldw	r2,-32(fp)
811091d8:	1000031e 	bne	r2,zero,811091e8 <vOutAckHandlerTask+0x2a4>
811091dc:	e0bffa03 	ldbu	r2,-24(fp)
811091e0:	108001b0 	cmpltui	r2,r2,6
811091e4:	103fe71e 	bne	r2,zero,81109184 <__reset+0xfb0e9184>
                        bSuccess = TRUE;
                    }
                    ucCountRetries++;
                }

                if (bSuccess == FALSE) {
811091e8:	e0bff817 	ldw	r2,-32(fp)
811091ec:	1000011e 	bne	r2,zero,811091f4 <vOutAckHandlerTask+0x2b0>
                    /* Could not use the uart tx buffer to send the ack*/
                    vFailGetMutexTxUARTSenderTask();
811091f0:	110dae00 	call	8110dae0 <vFailGetMutexTxUARTSenderTask>
                }
                eSenderAckState = sSAGettingACK;
811091f4:	00800044 	movi	r2,1
811091f8:	e0bff915 	stw	r2,-28(fp)
				break;
811091fc:	0001883a 	nop
			default:
				break;
		}
	}
81109200:	003f6606 	br	81108f9c <__reset+0xfb0e8f9c>

81109204 <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
81109204:	deffd504 	addi	sp,sp,-172
81109208:	de00012e 	bgeu	sp,et,81109210 <vParserCommTask+0xc>
8110920c:	003b68fa 	trap	3
81109210:	dfc02a15 	stw	ra,168(sp)
81109214:	df002915 	stw	fp,164(sp)
81109218:	df002904 	addi	fp,sp,164
8110921c:	e13fff15 	stw	r4,-4(fp)
	unsigned short int usiTypeL;
	unsigned short int usiSubTypeL;
	unsigned short int usiPUSidL;
	unsigned short int usiFeeInstL;
	bool bSuccess = FALSE;
81109220:	e03fdd15 	stw	zero,-140(fp)
	#ifdef DEBUG_ON
		char cPUSDebug[128];
	#endif

	#ifdef DEBUG_ON
		debug(fp,"vParserCommTask, enter task.\n");
81109224:	d0a04d17 	ldw	r2,-32460(gp)
81109228:	100f883a 	mov	r7,r2
8110922c:	01800744 	movi	r6,29
81109230:	01400044 	movi	r5,1
81109234:	01204534 	movhi	r4,33044
81109238:	21302d04 	addi	r4,r4,-16204
8110923c:	11116b00 	call	811116b0 <fwrite>
	#endif

	eParserMode = sConfiguring;
81109240:	e03fdc15 	stw	zero,-144(fp)

	for(;;){

		switch (eParserMode) {
81109244:	e0bfdc17 	ldw	r2,-144(fp)
81109248:	108001a8 	cmpgeui	r2,r2,6
8110924c:	10027a1e 	bne	r2,zero,81109c38 <vParserCommTask+0xa34>
81109250:	e0bfdc17 	ldw	r2,-144(fp)
81109254:	100690ba 	slli	r3,r2,2
81109258:	00a04474 	movhi	r2,33041
8110925c:	10a49b04 	addi	r2,r2,-28052
81109260:	1885883a 	add	r2,r3,r2
81109264:	10800017 	ldw	r2,0(r2)
81109268:	1000683a 	jmp	r2
8110926c:	81109284 	addi	r4,r16,16970
81109270:	81109290 	cmplti	r4,r16,16970
81109274:	8110935c 	xori	r4,r16,16973
81109278:	811093f0 	cmpltui	r4,r16,16975
8110927c:	81109548 	cmpgei	r4,r16,16981
81109280:	811095a0 	cmpeqi	r4,r16,16982
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingConn;
81109284:	00800044 	movi	r2,1
81109288:	e0bfdc15 	stw	r2,-144(fp)
				break;
8110928c:	00026e06 	br	81109c48 <vParserCommTask+0xa44>
			case sWaitingConn:

				bSuccess = FALSE;
81109290:	e03fdd15 	stw	zero,-140(fp)
				eParserMode = sWaitingConn;
81109294:	00800044 	movi	r2,1
81109298:	e0bfdc15 	stw	r2,-144(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
8110929c:	d0a04f17 	ldw	r2,-32452(gp)
811092a0:	e0ffde84 	addi	r3,fp,-134
811092a4:	180d883a 	mov	r6,r3
811092a8:	000b883a 	mov	r5,zero
811092ac:	1009883a 	mov	r4,r2
811092b0:	112e4080 	call	8112e408 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
811092b4:	e0bfde83 	ldbu	r2,-134(fp)
811092b8:	10803fcc 	andi	r2,r2,255
811092bc:	1000251e 	bne	r2,zero,81109354 <vParserCommTask+0x150>
					/* There's command waiting to be threat */

					/* Should post the semaphore to the Sender Task stop to send the Initialization message (Request Status) */
					error_code = OSSemPost(xSemCommInit);
811092c0:	d0a04b17 	ldw	r2,-32468(gp)
811092c4:	1009883a 	mov	r4,r2
811092c8:	112e7900 	call	8112e790 <OSSemPost>
811092cc:	e0bfde85 	stb	r2,-134(fp)
                    if ( error_code == OS_ERR_NONE ) {
811092d0:	e0bfde83 	ldbu	r2,-134(fp)
811092d4:	10803fcc 	andi	r2,r2,255
811092d8:	1000171e 	bne	r2,zero,81109338 <vParserCommTask+0x134>

                    	bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
811092dc:	01204534 	movhi	r4,33044
811092e0:	21003204 	addi	r4,r4,200
811092e4:	1109c4c0 	call	81109c4c <getPreParsedPacket>
811092e8:	e0bfdd15 	stw	r2,-140(fp)
                    	if (bSuccess == TRUE) {
811092ec:	e0bfdd17 	ldw	r2,-140(fp)
811092f0:	10800058 	cmpnei	r2,r2,1
811092f4:	10000e1e 	bne	r2,zero,81109330 <vParserCommTask+0x12c>
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
811092f8:	00a04534 	movhi	r2,33044
811092fc:	10803204 	addi	r2,r2,200
81109300:	10800103 	ldbu	r2,4(r2)
81109304:	10803fcc 	andi	r2,r2,255
81109308:	1080201c 	xori	r2,r2,128
8110930c:	10bfe004 	addi	r2,r2,-128
81109310:	10800858 	cmpnei	r2,r2,33
81109314:	1000031e 	bne	r2,zero,81109324 <vParserCommTask+0x120>
                            	eParserMode = sReplyParsing;
81109318:	00800104 	movi	r2,4
8110931c:	e0bfdc15 	stw	r2,-144(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109320:	00024806 	br	81109c44 <vParserCommTask+0xa40>
                    	if (bSuccess == TRUE) {
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
81109324:	008000c4 	movi	r2,3
81109328:	e0bfdc15 	stw	r2,-144(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
8110932c:	00024506 	br	81109c44 <vParserCommTask+0xa40>
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
                    	} else {
							/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
							vNoContentInPreParsedBuffer();
81109330:	110df340 	call	8110df34 <vNoContentInPreParsedBuffer>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109334:	00024306 	br	81109c44 <vParserCommTask+0xa40>
							vNoContentInPreParsedBuffer();
						}
                    } else {
						/*  Could not post the semaphore that indicates that NUC is connected and send a message.
							this a very IMPORTANT signalization!*/
                    	bSuccess = bTrySendSemaphoreCommInit();
81109338:	1109d640 	call	81109d64 <bTrySendSemaphoreCommInit>
8110933c:	e0bfdd15 	stw	r2,-140(fp)
						if (bSuccess == TRUE) {
81109340:	e0bfdd17 	ldw	r2,-140(fp)
81109344:	10800058 	cmpnei	r2,r2,1
81109348:	10023e1e 	bne	r2,zero,81109c44 <vParserCommTask+0xa40>
							vFailSendxSemCommInit();
8110934c:	110d7f40 	call	8110d7f4 <vFailSendxSemCommInit>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109350:	00023c06 	br	81109c44 <vParserCommTask+0xa40>
						if (bSuccess == TRUE) {
							vFailSendxSemCommInit();
						}
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
81109354:	110de640 	call	8110de64 <vFailGetCountSemaphorePreParsedBuffer>
				}

				break;
81109358:	00023a06 	br	81109c44 <vParserCommTask+0xa40>
			case sWaitingMessage:

				bSuccess = FALSE;
8110935c:	e03fdd15 	stw	zero,-140(fp)
				eParserMode = sWaitingMessage;
81109360:	00800084 	movi	r2,2
81109364:	e0bfdc15 	stw	r2,-144(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81109368:	d0a04f17 	ldw	r2,-32452(gp)
8110936c:	e0ffde84 	addi	r3,fp,-134
81109370:	180d883a 	mov	r6,r3
81109374:	000b883a 	mov	r5,zero
81109378:	1009883a 	mov	r4,r2
8110937c:	112e4080 	call	8112e408 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
81109380:	e0bfde83 	ldbu	r2,-134(fp)
81109384:	10803fcc 	andi	r2,r2,255
81109388:	1000171e 	bne	r2,zero,811093e8 <vParserCommTask+0x1e4>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
8110938c:	01204534 	movhi	r4,33044
81109390:	21003204 	addi	r4,r4,200
81109394:	1109c4c0 	call	81109c4c <getPreParsedPacket>
81109398:	e0bfdd15 	stw	r2,-140(fp)
					if (bSuccess == TRUE) {
8110939c:	e0bfdd17 	ldw	r2,-140(fp)
811093a0:	10800058 	cmpnei	r2,r2,1
811093a4:	10000e1e 	bne	r2,zero,811093e0 <vParserCommTask+0x1dc>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
811093a8:	00a04534 	movhi	r2,33044
811093ac:	10803204 	addi	r2,r2,200
811093b0:	10800103 	ldbu	r2,4(r2)
811093b4:	10803fcc 	andi	r2,r2,255
811093b8:	1080201c 	xori	r2,r2,128
811093bc:	10bfe004 	addi	r2,r2,-128
811093c0:	10800858 	cmpnei	r2,r2,33
811093c4:	1000031e 	bne	r2,zero,811093d4 <vParserCommTask+0x1d0>
							eParserMode = sReplyParsing;
811093c8:	00800104 	movi	r2,4
811093cc:	e0bfdc15 	stw	r2,-144(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811093d0:	00021d06 	br	81109c48 <vParserCommTask+0xa44>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
811093d4:	008000c4 	movi	r2,3
811093d8:	e0bfdc15 	stw	r2,-144(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811093dc:	00021a06 	br	81109c48 <vParserCommTask+0xa44>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
811093e0:	110df340 	call	8110df34 <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811093e4:	00021806 	br	81109c48 <vParserCommTask+0xa44>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
811093e8:	110de640 	call	8110de64 <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
811093ec:	00021606 	br	81109c48 <vParserCommTask+0xa44>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cCommand)
811093f0:	00a04534 	movhi	r2,33044
811093f4:	10803204 	addi	r2,r2,200
811093f8:	10800143 	ldbu	r2,5(r2)
811093fc:	10803fcc 	andi	r2,r2,255
81109400:	1080201c 	xori	r2,r2,128
81109404:	10bfe004 	addi	r2,r2,-128
81109408:	10c01120 	cmpeqi	r3,r2,68
8110940c:	1800081e 	bne	r3,zero,81109430 <vParserCommTask+0x22c>
81109410:	10c01420 	cmpeqi	r3,r2,80
81109414:	18000a1e 	bne	r3,zero,81109440 <vParserCommTask+0x23c>
81109418:	108010e0 	cmpeqi	r2,r2,67
8110941c:	10004626 	beq	r2,zero,81109538 <vParserCommTask+0x334>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
							vSendEthConf();
81109420:	110c3380 	call	8110c338 <vSendEthConf>
							eParserMode = sWaitingMessage;
81109424:	00800084 	movi	r2,2
81109428:	e0bfdc15 	stw	r2,-144(fp)
						break;
8110942c:	00004506 	br	81109544 <vParserCommTask+0x340>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
81109430:	110c5c80 	call	8110c5c8 <vSendTurnOff>
						eParserMode = sWaitingMessage;
81109434:	00800084 	movi	r2,2
81109438:	e0bfdc15 	stw	r2,-144(fp)
                        break;						
8110943c:	00004106 	br	81109544 <vParserCommTask+0x340>
                    case PUS_CMD: /*PUS command to MEB - TC*/

						#ifdef DEBUG_ON
							debug(fp,"PUS Received:\n");
81109440:	d0a04d17 	ldw	r2,-32460(gp)
81109444:	100f883a 	mov	r7,r2
81109448:	01800384 	movi	r6,14
8110944c:	01400044 	movi	r5,1
81109450:	01204534 	movhi	r4,33044
81109454:	21303504 	addi	r4,r4,-16172
81109458:	11116b00 	call	811116b0 <fwrite>
							memset(cPUSDebug,0,128);
8110945c:	e0bfdec4 	addi	r2,fp,-133
81109460:	01802004 	movi	r6,128
81109464:	000b883a 	mov	r5,zero
81109468:	1009883a 	mov	r4,r2
8110946c:	11122140 	call	81112214 <memset>
							sprintf(cPUSDebug, "TC-> pid: %hu; pcat: %hu; srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", PreParsedLocal.usiValues[1], PreParsedLocal.usiValues[2], PreParsedLocal.usiValues[3], PreParsedLocal.usiValues[4], PreParsedLocal.usiValues[5]);
81109470:	00a04534 	movhi	r2,33044
81109474:	10803204 	addi	r2,r2,200
81109478:	1080028b 	ldhu	r2,10(r2)
8110947c:	117fffcc 	andi	r5,r2,65535
81109480:	00a04534 	movhi	r2,33044
81109484:	10803204 	addi	r2,r2,200
81109488:	1080030b 	ldhu	r2,12(r2)
8110948c:	11bfffcc 	andi	r6,r2,65535
81109490:	00a04534 	movhi	r2,33044
81109494:	10803204 	addi	r2,r2,200
81109498:	1080038b 	ldhu	r2,14(r2)
8110949c:	10ffffcc 	andi	r3,r2,65535
811094a0:	00a04534 	movhi	r2,33044
811094a4:	10803204 	addi	r2,r2,200
811094a8:	1080040b 	ldhu	r2,16(r2)
811094ac:	113fffcc 	andi	r4,r2,65535
811094b0:	00a04534 	movhi	r2,33044
811094b4:	10803204 	addi	r2,r2,200
811094b8:	1080048b 	ldhu	r2,18(r2)
811094bc:	10bfffcc 	andi	r2,r2,65535
811094c0:	e23fdec4 	addi	r8,fp,-133
811094c4:	d8800215 	stw	r2,8(sp)
811094c8:	d9000115 	stw	r4,4(sp)
811094cc:	d8c00015 	stw	r3,0(sp)
811094d0:	300f883a 	mov	r7,r6
811094d4:	280d883a 	mov	r6,r5
811094d8:	01604534 	movhi	r5,33044
811094dc:	29703904 	addi	r5,r5,-16156
811094e0:	4009883a 	mov	r4,r8
811094e4:	111282c0 	call	8111282c <sprintf>
							debug(fp, cPUSDebug );
811094e8:	d0a04d17 	ldw	r2,-32460(gp)
811094ec:	e0ffdec4 	addi	r3,fp,-133
811094f0:	180b883a 	mov	r5,r3
811094f4:	1009883a 	mov	r4,r2
811094f8:	11110c40 	call	811110c4 <fprintf>
						#endif
	
						usiTypeL = PreParsedLocal.usiValues[3];
811094fc:	00a04534 	movhi	r2,33044
81109500:	10803204 	addi	r2,r2,200
81109504:	1080038b 	ldhu	r2,14(r2)
81109508:	e0bfda0d 	sth	r2,-152(fp)
						usiSubTypeL = PreParsedLocal.usiValues[4];
8110950c:	00a04534 	movhi	r2,33044
81109510:	10803204 	addi	r2,r2,200
81109514:	1080040b 	ldhu	r2,16(r2)
81109518:	e0bfda8d 	sth	r2,-150(fp)
						usiPUSidL = PreParsedLocal.usiValues[5];
8110951c:	00a04534 	movhi	r2,33044
81109520:	10803204 	addi	r2,r2,200
81109524:	1080048b 	ldhu	r2,18(r2)
81109528:	e0bfdb0d 	sth	r2,-148(fp)

						eParserMode = sPusHandling;
8110952c:	00800144 	movi	r2,5
81109530:	e0bfdc15 	stw	r2,-144(fp)
                        break;						
81109534:	00000306 	br	81109544 <vParserCommTask+0x340>
					default:
						eParserMode = sWaitingMessage;
81109538:	00800084 	movi	r2,2
8110953c:	e0bfdc15 	stw	r2,-144(fp)
						break;
81109540:	0001883a 	nop
				}
				break;
81109544:	0001c006 	br	81109c48 <vParserCommTask+0xa44>
			case sReplyParsing:

                switch ( usiTypeL )
81109548:	e0bfda0b 	ldhu	r2,-152(fp)
8110954c:	10c01220 	cmpeqi	r3,r2,72
81109550:	18000c1e 	bne	r3,zero,81109584 <vParserCommTask+0x380>
81109554:	10c014e0 	cmpeqi	r3,r2,83
81109558:	1800031e 	bne	r3,zero,81109568 <vParserCommTask+0x364>
8110955c:	10801120 	cmpeqi	r2,r2,68
81109560:	1000041e 	bne	r2,zero,81109574 <vParserCommTask+0x370>
81109564:	00000a06 	br	81109590 <vParserCommTask+0x38c>
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						eParserMode = sWaitingMessage;
81109568:	00800084 	movi	r2,2
8110956c:	e0bfdc15 	stw	r2,-144(fp)
                        break;
81109570:	00000a06 	br	8110959c <vParserCommTask+0x398>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
81109574:	110c5c80 	call	8110c5c8 <vSendTurnOff>
						eParserMode = sWaitingMessage;
81109578:	00800084 	movi	r2,2
8110957c:	e0bfdc15 	stw	r2,-144(fp)
                        break;
81109580:	00000606 	br	8110959c <vParserCommTask+0x398>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						eParserMode = sWaitingMessage;
81109584:	00800084 	movi	r2,2
81109588:	e0bfdc15 	stw	r2,-144(fp)
                        break;
8110958c:	00000306 	br	8110959c <vParserCommTask+0x398>
                    default:
						eParserMode = sWaitingMessage;
81109590:	00800084 	movi	r2,2
81109594:	e0bfdc15 	stw	r2,-144(fp)
                        break;
81109598:	0001883a 	nop
                }
				break;
8110959c:	0001aa06 	br	81109c48 <vParserCommTask+0xa44>
			case sPusHandling:
				eParserMode = sWaitingMessage;
811095a0:	00800084 	movi	r2,2
811095a4:	e0bfdc15 	stw	r2,-144(fp)
				
                switch ( usiTypeL )
811095a8:	e0bfda0b 	ldhu	r2,-152(fp)
811095ac:	10c03ea0 	cmpeqi	r3,r2,250
811095b0:	18002e1e 	bne	r3,zero,8110966c <vParserCommTask+0x468>
811095b4:	10c03ec8 	cmpgei	r3,r2,251
811095b8:	1800031e 	bne	r3,zero,811095c8 <vParserCommTask+0x3c4>
811095bc:	10800460 	cmpeqi	r2,r2,17
811095c0:	1000061e 	bne	r2,zero,811095dc <vParserCommTask+0x3d8>
811095c4:	00019806 	br	81109c28 <vParserCommTask+0xa24>
811095c8:	10c03ee0 	cmpeqi	r3,r2,251
811095cc:	1800621e 	bne	r3,zero,81109758 <vParserCommTask+0x554>
811095d0:	10803f20 	cmpeqi	r2,r2,252
811095d4:	1000ba1e 	bne	r2,zero,811098c0 <vParserCommTask+0x6bc>
811095d8:	00019306 	br	81109c28 <vParserCommTask+0xa24>
                {
                    case 17: /* srv-Type = 17 */
						switch ( usiSubTypeL )
811095dc:	e0bfda8b 	ldhu	r2,-150(fp)
811095e0:	10800060 	cmpeqi	r2,r2,1
811095e4:	10000826 	beq	r2,zero,81109608 <vParserCommTask+0x404>
						{
							case 1: /* TC_SCAM_TEST_CONNECTION */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_TEST_CONNECTION\n");
811095e8:	d0a04d17 	ldw	r2,-32460(gp)
811095ec:	100f883a 	mov	r7,r2
811095f0:	01800604 	movi	r6,24
811095f4:	01400044 	movi	r5,1
811095f8:	01204534 	movhi	r4,33044
811095fc:	21304c04 	addi	r4,r4,-16080
81109600:	11116b00 	call	811116b0 <fwrite>
								#endif


								break;
81109604:	00001806 	br	81109668 <vParserCommTask+0x464>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109608:	e0bfdec4 	addi	r2,fp,-133
8110960c:	01802004 	movi	r6,128
81109610:	000b883a 	mov	r5,zero
81109614:	1009883a 	mov	r4,r2
81109618:	11122140 	call	81112214 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
8110961c:	e13fda0b 	ldhu	r4,-152(fp)
81109620:	e17fda8b 	ldhu	r5,-150(fp)
81109624:	e0bfdb0b 	ldhu	r2,-148(fp)
81109628:	e0ffdec4 	addi	r3,fp,-133
8110962c:	d8800015 	stw	r2,0(sp)
81109630:	280f883a 	mov	r7,r5
81109634:	200d883a 	mov	r6,r4
81109638:	01604534 	movhi	r5,33044
8110963c:	29705304 	addi	r5,r5,-16052
81109640:	1809883a 	mov	r4,r3
81109644:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109648:	d0a04d17 	ldw	r2,-32460(gp)
8110964c:	e0ffdec4 	addi	r3,fp,-133
81109650:	180b883a 	mov	r5,r3
81109654:	1009883a 	mov	r4,r2
81109658:	11110c40 	call	811110c4 <fprintf>
								#endif
								eParserMode = sWaitingMessage;
8110965c:	00800084 	movi	r2,2
81109660:	e0bfdc15 	stw	r2,-144(fp)
								break;
81109664:	0001883a 	nop
						}
                        break;
81109668:	00017206 	br	81109c34 <vParserCommTask+0xa30>
                    case 250: /* srv-Type = 250 */
						switch ( usiSubTypeL )
8110966c:	e0bfda8b 	ldhu	r2,-150(fp)
81109670:	10c00f20 	cmpeqi	r3,r2,60
81109674:	18000f1e 	bne	r3,zero,811096b4 <vParserCommTask+0x4b0>
81109678:	10c00f60 	cmpeqi	r3,r2,61
8110967c:	1800151e 	bne	r3,zero,811096d4 <vParserCommTask+0x4d0>
81109680:	10800ee0 	cmpeqi	r2,r2,59
81109684:	10001b26 	beq	r2,zero,811096f4 <vParserCommTask+0x4f0>
						{
							case 59: /* TC_SCAM_RESET */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RESET\n");
81109688:	d0a04d17 	ldw	r2,-32460(gp)
8110968c:	100f883a 	mov	r7,r2
81109690:	01800384 	movi	r6,14
81109694:	01400044 	movi	r5,1
81109698:	01204534 	movhi	r4,33044
8110969c:	21306304 	addi	r4,r4,-15988
811096a0:	11116b00 	call	811116b0 <fwrite>
								#endif

								vSendLog("TC_SCAM_RESET");
811096a4:	01204534 	movhi	r4,33044
811096a8:	21306704 	addi	r4,r4,-15972
811096ac:	110c6e00 	call	8110c6e0 <vSendLog>
								//vLogWriteNUC("TC_SCAM_RESET");

								break;
811096b0:	00002806 	br	81109754 <vParserCommTask+0x550>
							case 60: /* TC_SCAM_CONFIG */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_CONFIG\n");
811096b4:	d0a04d17 	ldw	r2,-32460(gp)
811096b8:	100f883a 	mov	r7,r2
811096bc:	018003c4 	movi	r6,15
811096c0:	01400044 	movi	r5,1
811096c4:	01204534 	movhi	r4,33044
811096c8:	21306b04 	addi	r4,r4,-15956
811096cc:	11116b00 	call	811116b0 <fwrite>
								#endif


								break;
811096d0:	00002006 	br	81109754 <vParserCommTask+0x550>
							case 61: /* TC_SCAM_RUN */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RUN\n");
811096d4:	d0a04d17 	ldw	r2,-32460(gp)
811096d8:	100f883a 	mov	r7,r2
811096dc:	01800304 	movi	r6,12
811096e0:	01400044 	movi	r5,1
811096e4:	01204534 	movhi	r4,33044
811096e8:	21306f04 	addi	r4,r4,-15940
811096ec:	11116b00 	call	811116b0 <fwrite>
								#endif


								break;
811096f0:	00001806 	br	81109754 <vParserCommTask+0x550>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811096f4:	e0bfdec4 	addi	r2,fp,-133
811096f8:	01802004 	movi	r6,128
811096fc:	000b883a 	mov	r5,zero
81109700:	1009883a 	mov	r4,r2
81109704:	11122140 	call	81112214 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109708:	e13fda0b 	ldhu	r4,-152(fp)
8110970c:	e17fda8b 	ldhu	r5,-150(fp)
81109710:	e0bfdb0b 	ldhu	r2,-148(fp)
81109714:	e0ffdec4 	addi	r3,fp,-133
81109718:	d8800015 	stw	r2,0(sp)
8110971c:	280f883a 	mov	r7,r5
81109720:	200d883a 	mov	r6,r4
81109724:	01604534 	movhi	r5,33044
81109728:	29705304 	addi	r5,r5,-16052
8110972c:	1809883a 	mov	r4,r3
81109730:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109734:	d0a04d17 	ldw	r2,-32460(gp)
81109738:	e0ffdec4 	addi	r3,fp,-133
8110973c:	180b883a 	mov	r5,r3
81109740:	1009883a 	mov	r4,r2
81109744:	11110c40 	call	811110c4 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
81109748:	00800084 	movi	r2,2
8110974c:	e0bfdc15 	stw	r2,-144(fp)
								break;
81109750:	0001883a 	nop
						}
                        break;
81109754:	00013706 	br	81109c34 <vParserCommTask+0xa30>
                    case 251: /* srv-Type = 251 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
81109758:	00a04534 	movhi	r2,33044
8110975c:	10803204 	addi	r2,r2,200
81109760:	1080050b 	ldhu	r2,20(r2)
81109764:	e0bfde0d 	sth	r2,-136(fp)

						switch ( usiSubTypeL )
81109768:	e0bfda8b 	ldhu	r2,-150(fp)
8110976c:	10c000a0 	cmpeqi	r3,r2,2
81109770:	1800161e 	bne	r3,zero,811097cc <vParserCommTask+0x5c8>
81109774:	10c00160 	cmpeqi	r3,r2,5
81109778:	1800261e 	bne	r3,zero,81109814 <vParserCommTask+0x610>
8110977c:	10800060 	cmpeqi	r2,r2,1
81109780:	10003626 	beq	r2,zero,8110985c <vParserCommTask+0x658>
						{
							case 1: /* TC_SCAM_FEE_CONFIG_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109784:	e0bfdec4 	addi	r2,fp,-133
81109788:	01802004 	movi	r6,128
8110978c:	000b883a 	mov	r5,zero
81109790:	1009883a 	mov	r4,r2
81109794:	11122140 	call	81112214 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CONFIG_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
81109798:	e0ffde0b 	ldhu	r3,-136(fp)
8110979c:	e0bfdec4 	addi	r2,fp,-133
811097a0:	180d883a 	mov	r6,r3
811097a4:	01604534 	movhi	r5,33044
811097a8:	29707304 	addi	r5,r5,-15924
811097ac:	1009883a 	mov	r4,r2
811097b0:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
811097b4:	d0a04d17 	ldw	r2,-32460(gp)
811097b8:	e0ffdec4 	addi	r3,fp,-133
811097bc:	180b883a 	mov	r5,r3
811097c0:	1009883a 	mov	r4,r2
811097c4:	11110c40 	call	811110c4 <fprintf>
								#endif							


								break;
811097c8:	00003c06 	br	811098bc <vParserCommTask+0x6b8>
							case 2: /* TC_SCAM_FEE_STANDBY_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811097cc:	e0bfdec4 	addi	r2,fp,-133
811097d0:	01802004 	movi	r6,128
811097d4:	000b883a 	mov	r5,zero
811097d8:	1009883a 	mov	r4,r2
811097dc:	11122140 	call	81112214 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_STANDBY_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
811097e0:	e0ffde0b 	ldhu	r3,-136(fp)
811097e4:	e0bfdec4 	addi	r2,fp,-133
811097e8:	180d883a 	mov	r6,r3
811097ec:	01604534 	movhi	r5,33044
811097f0:	29707f04 	addi	r5,r5,-15876
811097f4:	1009883a 	mov	r4,r2
811097f8:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
811097fc:	d0a04d17 	ldw	r2,-32460(gp)
81109800:	e0ffdec4 	addi	r3,fp,-133
81109804:	180b883a 	mov	r5,r3
81109808:	1009883a 	mov	r4,r2
8110980c:	11110c40 	call	811110c4 <fprintf>
								#endif


								break;
81109810:	00002a06 	br	811098bc <vParserCommTask+0x6b8>
							case 5: /* TC_SCAM_FEE_CALIBRATION_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109814:	e0bfdec4 	addi	r2,fp,-133
81109818:	01802004 	movi	r6,128
8110981c:	000b883a 	mov	r5,zero
81109820:	1009883a 	mov	r4,r2
81109824:	11122140 	call	81112214 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CALIBRATION_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
81109828:	e0ffde0b 	ldhu	r3,-136(fp)
8110982c:	e0bfdec4 	addi	r2,fp,-133
81109830:	180d883a 	mov	r6,r3
81109834:	01604534 	movhi	r5,33044
81109838:	29708b04 	addi	r5,r5,-15828
8110983c:	1009883a 	mov	r4,r2
81109840:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109844:	d0a04d17 	ldw	r2,-32460(gp)
81109848:	e0ffdec4 	addi	r3,fp,-133
8110984c:	180b883a 	mov	r5,r3
81109850:	1009883a 	mov	r4,r2
81109854:	11110c40 	call	811110c4 <fprintf>
								#endif


								break;
81109858:	00001806 	br	811098bc <vParserCommTask+0x6b8>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110985c:	e0bfdec4 	addi	r2,fp,-133
81109860:	01802004 	movi	r6,128
81109864:	000b883a 	mov	r5,zero
81109868:	1009883a 	mov	r4,r2
8110986c:	11122140 	call	81112214 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109870:	e13fda0b 	ldhu	r4,-152(fp)
81109874:	e17fda8b 	ldhu	r5,-150(fp)
81109878:	e0bfdb0b 	ldhu	r2,-148(fp)
8110987c:	e0ffdec4 	addi	r3,fp,-133
81109880:	d8800015 	stw	r2,0(sp)
81109884:	280f883a 	mov	r7,r5
81109888:	200d883a 	mov	r6,r4
8110988c:	01604534 	movhi	r5,33044
81109890:	29705304 	addi	r5,r5,-16052
81109894:	1809883a 	mov	r4,r3
81109898:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
8110989c:	d0a04d17 	ldw	r2,-32460(gp)
811098a0:	e0ffdec4 	addi	r3,fp,-133
811098a4:	180b883a 	mov	r5,r3
811098a8:	1009883a 	mov	r4,r2
811098ac:	11110c40 	call	811110c4 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
811098b0:	00800084 	movi	r2,2
811098b4:	e0bfdc15 	stw	r2,-144(fp)
								break;
811098b8:	0001883a 	nop
						}
                        break;
811098bc:	0000dd06 	br	81109c34 <vParserCommTask+0xa30>
					case 252: /* srv-Type = 252 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
811098c0:	00a04534 	movhi	r2,33044
811098c4:	10803204 	addi	r2,r2,200
811098c8:	1080050b 	ldhu	r2,20(r2)
811098cc:	e0bfde0d 	sth	r2,-136(fp)

						switch ( usiSubTypeL )
811098d0:	e0bfda8b 	ldhu	r2,-150(fp)
811098d4:	10c000e0 	cmpeqi	r3,r2,3
811098d8:	18000a1e 	bne	r3,zero,81109904 <vParserCommTask+0x700>
811098dc:	10c00108 	cmpgei	r3,r2,4
811098e0:	1800031e 	bne	r3,zero,811098f0 <vParserCommTask+0x6ec>
811098e4:	108000a0 	cmpeqi	r2,r2,2
811098e8:	10003c1e 	bne	r2,zero,811099dc <vParserCommTask+0x7d8>
811098ec:	0000b506 	br	81109bc4 <vParserCommTask+0x9c0>
811098f0:	10c00120 	cmpeqi	r3,r2,4
811098f4:	1800151e 	bne	r3,zero,8110994c <vParserCommTask+0x748>
811098f8:	10800160 	cmpeqi	r2,r2,5
811098fc:	1000251e 	bne	r2,zero,81109994 <vParserCommTask+0x790>
81109900:	0000b006 	br	81109bc4 <vParserCommTask+0x9c0>
						{					
							case 3: /* TC_SCAM_SPW_LINK_ENABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109904:	e0bfdec4 	addi	r2,fp,-133
81109908:	01802004 	movi	r6,128
8110990c:	000b883a 	mov	r5,zero
81109910:	1009883a 	mov	r4,r2
81109914:	11122140 	call	81112214 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_ENABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109918:	e0ffde0b 	ldhu	r3,-136(fp)
8110991c:	e0bfdec4 	addi	r2,fp,-133
81109920:	180d883a 	mov	r6,r3
81109924:	01604534 	movhi	r5,33044
81109928:	29709804 	addi	r5,r5,-15776
8110992c:	1009883a 	mov	r4,r2
81109930:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109934:	d0a04d17 	ldw	r2,-32460(gp)
81109938:	e0ffdec4 	addi	r3,fp,-133
8110993c:	180b883a 	mov	r5,r3
81109940:	1009883a 	mov	r4,r2
81109944:	11110c40 	call	811110c4 <fprintf>
								#endif


								break;
81109948:	0000b606 	br	81109c24 <vParserCommTask+0xa20>
							case 4: /* TC_SCAM_SPW_LINK_DISABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110994c:	e0bfdec4 	addi	r2,fp,-133
81109950:	01802004 	movi	r6,128
81109954:	000b883a 	mov	r5,zero
81109958:	1009883a 	mov	r4,r2
8110995c:	11122140 	call	81112214 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_DISABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109960:	e0ffde0b 	ldhu	r3,-136(fp)
81109964:	e0bfdec4 	addi	r2,fp,-133
81109968:	180d883a 	mov	r6,r3
8110996c:	01604534 	movhi	r5,33044
81109970:	2970a504 	addi	r5,r5,-15724
81109974:	1009883a 	mov	r4,r2
81109978:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
8110997c:	d0a04d17 	ldw	r2,-32460(gp)
81109980:	e0ffdec4 	addi	r3,fp,-133
81109984:	180b883a 	mov	r5,r3
81109988:	1009883a 	mov	r4,r2
8110998c:	11110c40 	call	811110c4 <fprintf>
								#endif


								break;
81109990:	0000a406 	br	81109c24 <vParserCommTask+0xa20>
							case 5: /* TC_SCAM_SPW_LINK_RESET */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109994:	e0bfdec4 	addi	r2,fp,-133
81109998:	01802004 	movi	r6,128
8110999c:	000b883a 	mov	r5,zero
811099a0:	1009883a 	mov	r4,r2
811099a4:	11122140 	call	81112214 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_RESET-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
811099a8:	e0ffde0b 	ldhu	r3,-136(fp)
811099ac:	e0bfdec4 	addi	r2,fp,-133
811099b0:	180d883a 	mov	r6,r3
811099b4:	01604534 	movhi	r5,33044
811099b8:	2970b204 	addi	r5,r5,-15672
811099bc:	1009883a 	mov	r4,r2
811099c0:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
811099c4:	d0a04d17 	ldw	r2,-32460(gp)
811099c8:	e0ffdec4 	addi	r3,fp,-133
811099cc:	180b883a 	mov	r5,r3
811099d0:	1009883a 	mov	r4,r2
811099d4:	11110c40 	call	811110c4 <fprintf>
								#endif


								break;
811099d8:	00009206 	br	81109c24 <vParserCommTask+0xa20>
							case 2: /* TC_SCAM_SPW_RMAP_CONFIG_UPDATE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811099dc:	e0bfdec4 	addi	r2,fp,-133
811099e0:	01802004 	movi	r6,128
811099e4:	000b883a 	mov	r5,zero
811099e8:	1009883a 	mov	r4,r2
811099ec:	11122140 	call	81112214 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_RMAP_CONFIG_UPDATE->\n");
811099f0:	e0ffdec4 	addi	r3,fp,-133
811099f4:	00a04534 	movhi	r2,33044
811099f8:	10b0be04 	addi	r2,r2,-15624
811099fc:	1009883a 	mov	r4,r2
81109a00:	00800884 	movi	r2,34
81109a04:	100d883a 	mov	r6,r2
81109a08:	200b883a 	mov	r5,r4
81109a0c:	1809883a 	mov	r4,r3
81109a10:	11120c40 	call	811120c4 <memcpy>
									debug(fp, cPUSDebug );
81109a14:	d0a04d17 	ldw	r2,-32460(gp)
81109a18:	e0ffdec4 	addi	r3,fp,-133
81109a1c:	180b883a 	mov	r5,r3
81109a20:	1009883a 	mov	r4,r2
81109a24:	11110c40 	call	811110c4 <fprintf>
									sprintf(cPUSDebug, "- FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109a28:	e0ffde0b 	ldhu	r3,-136(fp)
81109a2c:	e0bfdec4 	addi	r2,fp,-133
81109a30:	180d883a 	mov	r6,r3
81109a34:	01604534 	movhi	r5,33044
81109a38:	2970c704 	addi	r5,r5,-15588
81109a3c:	1009883a 	mov	r4,r2
81109a40:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109a44:	d0a04d17 	ldw	r2,-32460(gp)
81109a48:	e0ffdec4 	addi	r3,fp,-133
81109a4c:	180b883a 	mov	r5,r3
81109a50:	1009883a 	mov	r4,r2
81109a54:	11110c40 	call	811110c4 <fprintf>
									sprintf(cPUSDebug, "- MODE: %hu;\n", PreParsedLocal.usiValues[7] );
81109a58:	00a04534 	movhi	r2,33044
81109a5c:	10803204 	addi	r2,r2,200
81109a60:	1080058b 	ldhu	r2,22(r2)
81109a64:	10ffffcc 	andi	r3,r2,65535
81109a68:	e0bfdec4 	addi	r2,fp,-133
81109a6c:	180d883a 	mov	r6,r3
81109a70:	01604534 	movhi	r5,33044
81109a74:	2970ce04 	addi	r5,r5,-15560
81109a78:	1009883a 	mov	r4,r2
81109a7c:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109a80:	d0a04d17 	ldw	r2,-32460(gp)
81109a84:	e0ffdec4 	addi	r3,fp,-133
81109a88:	180b883a 	mov	r5,r3
81109a8c:	1009883a 	mov	r4,r2
81109a90:	11110c40 	call	811110c4 <fprintf>
									sprintf(cPUSDebug, "- LINK_SPEED: %hu;\n", PreParsedLocal.usiValues[8] );
81109a94:	00a04534 	movhi	r2,33044
81109a98:	10803204 	addi	r2,r2,200
81109a9c:	1080060b 	ldhu	r2,24(r2)
81109aa0:	10ffffcc 	andi	r3,r2,65535
81109aa4:	e0bfdec4 	addi	r2,fp,-133
81109aa8:	180d883a 	mov	r6,r3
81109aac:	01604534 	movhi	r5,33044
81109ab0:	2970d204 	addi	r5,r5,-15544
81109ab4:	1009883a 	mov	r4,r2
81109ab8:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109abc:	d0a04d17 	ldw	r2,-32460(gp)
81109ac0:	e0ffdec4 	addi	r3,fp,-133
81109ac4:	180b883a 	mov	r5,r3
81109ac8:	1009883a 	mov	r4,r2
81109acc:	11110c40 	call	811110c4 <fprintf>
									sprintf(cPUSDebug, "- LOGICAL_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[9] );
81109ad0:	00a04534 	movhi	r2,33044
81109ad4:	10803204 	addi	r2,r2,200
81109ad8:	1080068b 	ldhu	r2,26(r2)
81109adc:	10ffffcc 	andi	r3,r2,65535
81109ae0:	e0bfdec4 	addi	r2,fp,-133
81109ae4:	180d883a 	mov	r6,r3
81109ae8:	01604534 	movhi	r5,33044
81109aec:	2970d704 	addi	r5,r5,-15524
81109af0:	1009883a 	mov	r4,r2
81109af4:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109af8:	d0a04d17 	ldw	r2,-32460(gp)
81109afc:	e0ffdec4 	addi	r3,fp,-133
81109b00:	180b883a 	mov	r5,r3
81109b04:	1009883a 	mov	r4,r2
81109b08:	11110c40 	call	811110c4 <fprintf>
									sprintf(cPUSDebug, "- DEST_NODE_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[10] );
81109b0c:	00a04534 	movhi	r2,33044
81109b10:	10803204 	addi	r2,r2,200
81109b14:	1080070b 	ldhu	r2,28(r2)
81109b18:	10ffffcc 	andi	r3,r2,65535
81109b1c:	e0bfdec4 	addi	r2,fp,-133
81109b20:	180d883a 	mov	r6,r3
81109b24:	01604534 	movhi	r5,33044
81109b28:	2970de04 	addi	r5,r5,-15496
81109b2c:	1009883a 	mov	r4,r2
81109b30:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109b34:	d0a04d17 	ldw	r2,-32460(gp)
81109b38:	e0ffdec4 	addi	r3,fp,-133
81109b3c:	180b883a 	mov	r5,r3
81109b40:	1009883a 	mov	r4,r2
81109b44:	11110c40 	call	811110c4 <fprintf>
									sprintf(cPUSDebug, "- TIME_CODE_GEN: %hu;\n", PreParsedLocal.usiValues[11] );
81109b48:	00a04534 	movhi	r2,33044
81109b4c:	10803204 	addi	r2,r2,200
81109b50:	1080078b 	ldhu	r2,30(r2)
81109b54:	10ffffcc 	andi	r3,r2,65535
81109b58:	e0bfdec4 	addi	r2,fp,-133
81109b5c:	180d883a 	mov	r6,r3
81109b60:	01604534 	movhi	r5,33044
81109b64:	2970e504 	addi	r5,r5,-15468
81109b68:	1009883a 	mov	r4,r2
81109b6c:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109b70:	d0a04d17 	ldw	r2,-32460(gp)
81109b74:	e0ffdec4 	addi	r3,fp,-133
81109b78:	180b883a 	mov	r5,r3
81109b7c:	1009883a 	mov	r4,r2
81109b80:	11110c40 	call	811110c4 <fprintf>
									sprintf(cPUSDebug, "- RMAP_KEY: 0x%02X;\n", PreParsedLocal.usiValues[12] );
81109b84:	00a04534 	movhi	r2,33044
81109b88:	10803204 	addi	r2,r2,200
81109b8c:	1080080b 	ldhu	r2,32(r2)
81109b90:	10ffffcc 	andi	r3,r2,65535
81109b94:	e0bfdec4 	addi	r2,fp,-133
81109b98:	180d883a 	mov	r6,r3
81109b9c:	01604534 	movhi	r5,33044
81109ba0:	2970eb04 	addi	r5,r5,-15444
81109ba4:	1009883a 	mov	r4,r2
81109ba8:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109bac:	d0a04d17 	ldw	r2,-32460(gp)
81109bb0:	e0ffdec4 	addi	r3,fp,-133
81109bb4:	180b883a 	mov	r5,r3
81109bb8:	1009883a 	mov	r4,r2
81109bbc:	11110c40 	call	811110c4 <fprintf>
								#endif



								break;
81109bc0:	00001806 	br	81109c24 <vParserCommTask+0xa20>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109bc4:	e0bfdec4 	addi	r2,fp,-133
81109bc8:	01802004 	movi	r6,128
81109bcc:	000b883a 	mov	r5,zero
81109bd0:	1009883a 	mov	r4,r2
81109bd4:	11122140 	call	81112214 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109bd8:	e13fda0b 	ldhu	r4,-152(fp)
81109bdc:	e17fda8b 	ldhu	r5,-150(fp)
81109be0:	e0bfdb0b 	ldhu	r2,-148(fp)
81109be4:	e0ffdec4 	addi	r3,fp,-133
81109be8:	d8800015 	stw	r2,0(sp)
81109bec:	280f883a 	mov	r7,r5
81109bf0:	200d883a 	mov	r6,r4
81109bf4:	01604534 	movhi	r5,33044
81109bf8:	29705304 	addi	r5,r5,-16052
81109bfc:	1809883a 	mov	r4,r3
81109c00:	111282c0 	call	8111282c <sprintf>
									debug(fp, cPUSDebug );
81109c04:	d0a04d17 	ldw	r2,-32460(gp)
81109c08:	e0ffdec4 	addi	r3,fp,-133
81109c0c:	180b883a 	mov	r5,r3
81109c10:	1009883a 	mov	r4,r2
81109c14:	11110c40 	call	811110c4 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
81109c18:	00800084 	movi	r2,2
81109c1c:	e0bfdc15 	stw	r2,-144(fp)
								break;
81109c20:	0001883a 	nop
						}
                        break;
81109c24:	00000306 	br	81109c34 <vParserCommTask+0xa30>
                    default:
						eParserMode = sWaitingMessage;
81109c28:	00800084 	movi	r2,2
81109c2c:	e0bfdc15 	stw	r2,-144(fp)
                        break;
81109c30:	0001883a 	nop
                }
				break;				
81109c34:	00000406 	br	81109c48 <vParserCommTask+0xa44>
			default:
				eParserMode = sWaitingMessage;
81109c38:	00800084 	movi	r2,2
81109c3c:	e0bfdc15 	stw	r2,-144(fp)
				break;
81109c40:	00000106 	br	81109c48 <vParserCommTask+0xa44>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109c44:	0001883a 	nop
				break;				
			default:
				eParserMode = sWaitingMessage;
				break;
		}
	}
81109c48:	003d7e06 	br	81109244 <__reset+0xfb0e9244>

81109c4c <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
81109c4c:	defffb04 	addi	sp,sp,-20
81109c50:	de00012e 	bgeu	sp,et,81109c58 <getPreParsedPacket+0xc>
81109c54:	003b68fa 	trap	3
81109c58:	dfc00415 	stw	ra,16(sp)
81109c5c:	df000315 	stw	fp,12(sp)
81109c60:	df000304 	addi	fp,sp,12
81109c64:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109c68:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
81109c6c:	d0a05417 	ldw	r2,-32432(gp)
81109c70:	e0fffe44 	addi	r3,fp,-7
81109c74:	180d883a 	mov	r6,r3
81109c78:	000b883a 	mov	r5,zero
81109c7c:	1009883a 	mov	r4,r2
81109c80:	112c3fc0 	call	8112c3fc <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
81109c84:	e0bffe43 	ldbu	r2,-7(fp)
81109c88:	10803fcc 	andi	r2,r2,255
81109c8c:	10002e1e 	bne	r2,zero,81109d48 <getPreParsedPacket+0xfc>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81109c90:	e03ffe05 	stb	zero,-8(fp)
81109c94:	00002506 	br	81109d2c <getPreParsedPacket+0xe0>
		{
            if ( xPreParsed[i].cType != 0 ) {
81109c98:	e0fffe03 	ldbu	r3,-8(fp)
81109c9c:	00a04574 	movhi	r2,33045
81109ca0:	10bb9604 	addi	r2,r2,-4520
81109ca4:	18c01324 	muli	r3,r3,76
81109ca8:	10c5883a 	add	r2,r2,r3
81109cac:	10800104 	addi	r2,r2,4
81109cb0:	10800003 	ldbu	r2,0(r2)
81109cb4:	10803fcc 	andi	r2,r2,255
81109cb8:	1080201c 	xori	r2,r2,128
81109cbc:	10bfe004 	addi	r2,r2,-128
81109cc0:	10001726 	beq	r2,zero,81109d20 <getPreParsedPacket+0xd4>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
81109cc4:	e0fffe03 	ldbu	r3,-8(fp)
81109cc8:	e13fff17 	ldw	r4,-4(fp)
81109ccc:	00a04574 	movhi	r2,33045
81109cd0:	10bb9604 	addi	r2,r2,-4520
81109cd4:	18c01324 	muli	r3,r3,76
81109cd8:	10c5883a 	add	r2,r2,r3
81109cdc:	2007883a 	mov	r3,r4
81109ce0:	1009883a 	mov	r4,r2
81109ce4:	00801304 	movi	r2,76
81109ce8:	100d883a 	mov	r6,r2
81109cec:	200b883a 	mov	r5,r4
81109cf0:	1809883a 	mov	r4,r3
81109cf4:	11120c40 	call	811120c4 <memcpy>
                bSuccess = TRUE;
81109cf8:	00800044 	movi	r2,1
81109cfc:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
81109d00:	e0fffe03 	ldbu	r3,-8(fp)
81109d04:	00a04574 	movhi	r2,33045
81109d08:	10bb9604 	addi	r2,r2,-4520
81109d0c:	18c01324 	muli	r3,r3,76
81109d10:	10c5883a 	add	r2,r2,r3
81109d14:	10800104 	addi	r2,r2,4
81109d18:	10000005 	stb	zero,0(r2)
                break;
81109d1c:	00000606 	br	81109d38 <getPreParsedPacket+0xec>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81109d20:	e0bffe03 	ldbu	r2,-8(fp)
81109d24:	10800044 	addi	r2,r2,1
81109d28:	e0bffe05 	stb	r2,-8(fp)
81109d2c:	e0bffe03 	ldbu	r2,-8(fp)
81109d30:	10800130 	cmpltui	r2,r2,4
81109d34:	103fd81e 	bne	r2,zero,81109c98 <__reset+0xfb0e9c98>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
81109d38:	d0a05417 	ldw	r2,-32432(gp)
81109d3c:	1009883a 	mov	r4,r2
81109d40:	112c9a00 	call	8112c9a0 <OSMutexPost>
81109d44:	00000106 	br	81109d4c <getPreParsedPacket+0x100>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
81109d48:	110decc0 	call	8110decc <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
81109d4c:	e0bffd17 	ldw	r2,-12(fp)
}
81109d50:	e037883a 	mov	sp,fp
81109d54:	dfc00117 	ldw	ra,4(sp)
81109d58:	df000017 	ldw	fp,0(sp)
81109d5c:	dec00204 	addi	sp,sp,8
81109d60:	f800283a 	ret

81109d64 <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
81109d64:	defffc04 	addi	sp,sp,-16
81109d68:	de00012e 	bgeu	sp,et,81109d70 <bTrySendSemaphoreCommInit+0xc>
81109d6c:	003b68fa 	trap	3
81109d70:	dfc00315 	stw	ra,12(sp)
81109d74:	df000215 	stw	fp,8(sp)
81109d78:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
81109d7c:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
81109d80:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
81109d84:	d0a04d17 	ldw	r2,-32460(gp)
81109d88:	100f883a 	mov	r7,r2
81109d8c:	01800e84 	movi	r6,58
81109d90:	01400044 	movi	r5,1
81109d94:	01204534 	movhi	r4,33044
81109d98:	2130f104 	addi	r4,r4,-15420
81109d9c:	11116b00 	call	811116b0 <fwrite>
	#endif

	ucCountRetries = 0;
81109da0:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
81109da4:	e0bfff03 	ldbu	r2,-4(fp)
81109da8:	10800044 	addi	r2,r2,1
81109dac:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
81109db0:	01000c84 	movi	r4,50
81109db4:	11302940 	call	81130294 <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
81109db8:	d0a04b17 	ldw	r2,-32468(gp)
81109dbc:	1009883a 	mov	r4,r2
81109dc0:	112e7900 	call	8112e790 <OSSemPost>
81109dc4:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
81109dc8:	e0bfff43 	ldbu	r2,-3(fp)
81109dcc:	10000326 	beq	r2,zero,81109ddc <bTrySendSemaphoreCommInit+0x78>
81109dd0:	e0bfff03 	ldbu	r2,-4(fp)
81109dd4:	108002f0 	cmpltui	r2,r2,11
81109dd8:	103ff21e 	bne	r2,zero,81109da4 <__reset+0xfb0e9da4>

	if ( error_code == OS_ERR_NONE ) {
81109ddc:	e0bfff43 	ldbu	r2,-3(fp)
81109de0:	1000021e 	bne	r2,zero,81109dec <bTrySendSemaphoreCommInit+0x88>
		bSuccess = TRUE;
81109de4:	00800044 	movi	r2,1
81109de8:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
81109dec:	e0bffe17 	ldw	r2,-8(fp)
}
81109df0:	e037883a 	mov	sp,fp
81109df4:	dfc00117 	ldw	ra,4(sp)
81109df8:	df000017 	ldw	fp,0(sp)
81109dfc:	dec00204 	addi	sp,sp,8
81109e00:	f800283a 	ret

81109e04 <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
81109e04:	deffeb04 	addi	sp,sp,-84
81109e08:	de00012e 	bgeu	sp,et,81109e10 <vReceiverUartTask+0xc>
81109e0c:	003b68fa 	trap	3
81109e10:	dfc01415 	stw	ra,80(sp)
81109e14:	df001315 	stw	fp,76(sp)
81109e18:	df001304 	addi	fp,sp,76
81109e1c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109e20:	e03fee15 	stw	zero,-72(fp)
    char cReceiveBuffer[SIZE_RCV_BUFFER];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"vFastReaderRX, enter task.\n");
81109e24:	d0a04d17 	ldw	r2,-32460(gp)
81109e28:	100f883a 	mov	r7,r2
81109e2c:	018006c4 	movi	r6,27
81109e30:	01400044 	movi	r5,1
81109e34:	01204534 	movhi	r4,33044
81109e38:	21310004 	addi	r4,r4,-15360
81109e3c:	11116b00 	call	811116b0 <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
81109e40:	e03fed15 	stw	zero,-76(fp)

    for(;;) {

        switch (eReaderRXMode)
81109e44:	e0bfed17 	ldw	r2,-76(fp)
81109e48:	10c00060 	cmpeqi	r3,r2,1
81109e4c:	1800091e 	bne	r3,zero,81109e74 <vReceiverUartTask+0x70>
81109e50:	0080052e 	bgeu	zero,r2,81109e68 <vReceiverUartTask+0x64>
81109e54:	10c000a0 	cmpeqi	r3,r2,2
81109e58:	1800451e 	bne	r3,zero,81109f70 <vReceiverUartTask+0x16c>
81109e5c:	108000e0 	cmpeqi	r2,r2,3
81109e60:	1000561e 	bne	r2,zero,81109fbc <vReceiverUartTask+0x1b8>
81109e64:	00005f06 	br	81109fe4 <vReceiverUartTask+0x1e0>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
81109e68:	00800044 	movi	r2,1
81109e6c:	e0bfed15 	stw	r2,-76(fp)
                break;
81109e70:	00005f06 	br	81109ff0 <vReceiverUartTask+0x1ec>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
81109e74:	e0bfef04 	addi	r2,fp,-68
81109e78:	01801004 	movi	r6,64
81109e7c:	000b883a 	mov	r5,zero
81109e80:	1009883a 	mov	r4,r2
81109e84:	11122140 	call	81112214 <memset>
                scanf("%s", cReceiveBuffer);
81109e88:	e0bfef04 	addi	r2,fp,-68
81109e8c:	100b883a 	mov	r5,r2
81109e90:	01204534 	movhi	r4,33044
81109e94:	21310704 	addi	r4,r4,-15332
81109e98:	11127500 	call	81112750 <scanf>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedReader );
81109e9c:	e0bfef04 	addi	r2,fp,-68
81109ea0:	01604534 	movhi	r5,33044
81109ea4:	29404504 	addi	r5,r5,276
81109ea8:	1009883a 	mov	r4,r2
81109eac:	1109ff40 	call	81109ff4 <bPreParser>
81109eb0:	e0bfee15 	stw	r2,-72(fp)

                if ( bSuccess == TRUE ) {
81109eb4:	e0bfee17 	ldw	r2,-72(fp)
81109eb8:	10800058 	cmpnei	r2,r2,1
81109ebc:	1000161e 	bne	r2,zero,81109f18 <vReceiverUartTask+0x114>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
81109ec0:	00a04534 	movhi	r2,33044
81109ec4:	10804504 	addi	r2,r2,276
81109ec8:	10800103 	ldbu	r2,4(r2)
81109ecc:	10803fcc 	andi	r2,r2,255
81109ed0:	1080201c 	xori	r2,r2,128
81109ed4:	10bfe004 	addi	r2,r2,-128
81109ed8:	10800fe0 	cmpeqi	r2,r2,63
81109edc:	1000081e 	bne	r2,zero,81109f00 <vReceiverUartTask+0xfc>
81109ee0:	00a04534 	movhi	r2,33044
81109ee4:	10804504 	addi	r2,r2,276
81109ee8:	10800103 	ldbu	r2,4(r2)
81109eec:	10803fcc 	andi	r2,r2,255
81109ef0:	1080201c 	xori	r2,r2,128
81109ef4:	10bfe004 	addi	r2,r2,-128
81109ef8:	10800858 	cmpnei	r2,r2,33
81109efc:	1000031e 	bne	r2,zero,81109f0c <vReceiverUartTask+0x108>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
81109f00:	00800084 	movi	r2,2
81109f04:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81109f08:	00003906 	br	81109ff0 <vReceiverUartTask+0x1ec>
                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        eReaderRXMode = sSendToACKReceiver;
81109f0c:	008000c4 	movi	r2,3
81109f10:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81109f14:	00003606 	br	81109ff0 <vReceiverUartTask+0x1ec>
                        eReaderRXMode = sSendToACKReceiver;
                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
81109f18:	00a04534 	movhi	r2,33044
81109f1c:	10804504 	addi	r2,r2,276
81109f20:	00c008c4 	movi	r3,35
81109f24:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = ')';
81109f28:	00a04534 	movhi	r2,33044
81109f2c:	10804504 	addi	r2,r2,276
81109f30:	00c00a44 	movi	r3,41
81109f34:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
81109f38:	00a04534 	movhi	r2,33044
81109f3c:	10804504 	addi	r2,r2,276
81109f40:	00c00044 	movi	r3,1
81109f44:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
81109f48:	01204534 	movhi	r4,33044
81109f4c:	21004504 	addi	r4,r4,276
81109f50:	110a5680 	call	8110a568 <setPreAckSenderFreePos>
81109f54:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
81109f58:	e0bfee17 	ldw	r2,-72(fp)
81109f5c:	1000011e 	bne	r2,zero,81109f64 <vReceiverUartTask+0x160>
                        vFailSendNack();
81109f60:	110e0040 	call	8110e004 <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
81109f64:	00800044 	movi	r2,1
81109f68:	e0bfed15 	stw	r2,-76(fp)
                }

                break;
81109f6c:	00002006 	br	81109ff0 <vReceiverUartTask+0x1ec>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
81109f70:	01204534 	movhi	r4,33044
81109f74:	21004504 	addi	r4,r4,276
81109f78:	110a5680 	call	8110a568 <setPreAckSenderFreePos>
81109f7c:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == TRUE ) {
81109f80:	e0bfee17 	ldw	r2,-72(fp)
81109f84:	10800058 	cmpnei	r2,r2,1
81109f88:	1000081e 	bne	r2,zero,81109fac <vReceiverUartTask+0x1a8>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
81109f8c:	01204534 	movhi	r4,33044
81109f90:	21004504 	addi	r4,r4,276
81109f94:	110a4040 	call	8110a404 <setPreParsedFreePos>
81109f98:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
81109f9c:	e0bfee17 	ldw	r2,-72(fp)
81109fa0:	1000031e 	bne	r2,zero,81109fb0 <vReceiverUartTask+0x1ac>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
81109fa4:	110e0d40 	call	8110e0d4 <vFailSetPreParsedBuffer>
81109fa8:	00000106 	br	81109fb0 <vReceiverUartTask+0x1ac>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
81109fac:	110e06c0 	call	8110e06c <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
81109fb0:	00800044 	movi	r2,1
81109fb4:	e0bfed15 	stw	r2,-76(fp)
                break;
81109fb8:	00000d06 	br	81109ff0 <vReceiverUartTask+0x1ec>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
81109fbc:	01204534 	movhi	r4,33044
81109fc0:	21004504 	addi	r4,r4,276
81109fc4:	110a7100 	call	8110a710 <setPreAckReceiverFreePos>
81109fc8:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == FALSE ) {
81109fcc:	e0bfee17 	ldw	r2,-72(fp)
81109fd0:	1000011e 	bne	r2,zero,81109fd8 <vReceiverUartTask+0x1d4>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
81109fd4:	110e13c0 	call	8110e13c <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
81109fd8:	00800044 	movi	r2,1
81109fdc:	e0bfed15 	stw	r2,-76(fp)
                break;
81109fe0:	00000306 	br	81109ff0 <vReceiverUartTask+0x1ec>
            default:
                eReaderRXMode = sGetRxUart;
81109fe4:	00800044 	movi	r2,1
81109fe8:	e0bfed15 	stw	r2,-76(fp)
                break;
81109fec:	0001883a 	nop
        }

    }
81109ff0:	003f9406 	br	81109e44 <__reset+0xfb0e9e44>

81109ff4 <bPreParser>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParser( char *buffer, tPreParsed *xPerParcedBuffer )
{
81109ff4:	defff204 	addi	sp,sp,-56
81109ff8:	de00012e 	bgeu	sp,et,8110a000 <bPreParser+0xc>
81109ffc:	003b68fa 	trap	3
8110a000:	dfc00d15 	stw	ra,52(sp)
8110a004:	df000c15 	stw	fp,48(sp)
8110a008:	dc000b15 	stw	r16,44(sp)
8110a00c:	df000c04 	addi	fp,sp,48
8110a010:	e13ffd15 	stw	r4,-12(fp)
8110a014:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
8110a018:	e03ff415 	stw	zero,-48(fp)
    short int siStrLen, siTeminador, siIniReq, siIniResp, siIniACK, siIniNACK, siCRC;
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */

    siStrLen = strlen(buffer);
8110a01c:	e13ffd17 	ldw	r4,-12(fp)
8110a020:	1112a400 	call	81112a40 <strlen>
8110a024:	e0bff70d 	sth	r2,-36(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
8110a028:	01400ec4 	movi	r5,59
8110a02c:	e13ffd17 	ldw	r4,-12(fp)
8110a030:	110c8300 	call	8110c830 <siPosStr>
8110a034:	e0bff78d 	sth	r2,-34(fp)
    siIniACK = siPosStr(buffer, ACK_CHAR);
8110a038:	01401004 	movi	r5,64
8110a03c:	e13ffd17 	ldw	r4,-12(fp)
8110a040:	110c8300 	call	8110c830 <siPosStr>
8110a044:	e0bff80d 	sth	r2,-32(fp)
    siIniNACK = siPosStr(buffer, NACK_CHAR);
8110a048:	014008c4 	movi	r5,35
8110a04c:	e13ffd17 	ldw	r4,-12(fp)
8110a050:	110c8300 	call	8110c830 <siPosStr>
8110a054:	e0bff88d 	sth	r2,-30(fp)
    siIniACK = min_sim(siIniACK, siIniNACK);
8110a058:	e17ff80b 	ldhu	r5,-32(fp)
8110a05c:	e0bff88b 	ldhu	r2,-30(fp)
8110a060:	10ffffcc 	andi	r3,r2,65535
8110a064:	18e0001c 	xori	r3,r3,32768
8110a068:	18e00004 	addi	r3,r3,-32768
8110a06c:	293fffcc 	andi	r4,r5,65535
8110a070:	2120001c 	xori	r4,r4,32768
8110a074:	21200004 	addi	r4,r4,-32768
8110a078:	20c0010e 	bge	r4,r3,8110a080 <bPreParser+0x8c>
8110a07c:	2805883a 	mov	r2,r5
8110a080:	e0bff80d 	sth	r2,-32(fp)
    siIniReq = siPosStr(buffer, START_REQUEST_CHAR);
8110a084:	01400fc4 	movi	r5,63
8110a088:	e13ffd17 	ldw	r4,-12(fp)
8110a08c:	110c8300 	call	8110c830 <siPosStr>
8110a090:	e0bff90d 	sth	r2,-28(fp)
    siIniResp = siPosStr(buffer, START_REPLY_CHAR);
8110a094:	01400844 	movi	r5,33
8110a098:	e13ffd17 	ldw	r4,-12(fp)
8110a09c:	110c8300 	call	8110c830 <siPosStr>
8110a0a0:	e0bff98d 	sth	r2,-26(fp)
    siIniReq = min_sim(siIniReq, siIniResp);
8110a0a4:	e17ff90b 	ldhu	r5,-28(fp)
8110a0a8:	e0bff98b 	ldhu	r2,-26(fp)
8110a0ac:	10ffffcc 	andi	r3,r2,65535
8110a0b0:	18e0001c 	xori	r3,r3,32768
8110a0b4:	18e00004 	addi	r3,r3,-32768
8110a0b8:	293fffcc 	andi	r4,r5,65535
8110a0bc:	2120001c 	xori	r4,r4,32768
8110a0c0:	21200004 	addi	r4,r4,-32768
8110a0c4:	20c0010e 	bge	r4,r3,8110a0cc <bPreParser+0xd8>
8110a0c8:	2805883a 	mov	r2,r5
8110a0cc:	e0bff90d 	sth	r2,-28(fp)
    siIniReq = min_sim(siIniReq, siIniACK);
8110a0d0:	e17ff90b 	ldhu	r5,-28(fp)
8110a0d4:	e0bff80b 	ldhu	r2,-32(fp)
8110a0d8:	10ffffcc 	andi	r3,r2,65535
8110a0dc:	18e0001c 	xori	r3,r3,32768
8110a0e0:	18e00004 	addi	r3,r3,-32768
8110a0e4:	293fffcc 	andi	r4,r5,65535
8110a0e8:	2120001c 	xori	r4,r4,32768
8110a0ec:	21200004 	addi	r4,r4,-32768
8110a0f0:	20c0010e 	bge	r4,r3,8110a0f8 <bPreParser+0x104>
8110a0f4:	2805883a 	mov	r2,r5
8110a0f8:	e0bff90d 	sth	r2,-28(fp)
    siCRC = siPosStr(buffer, SEPARATOR_CRC);
8110a0fc:	01401f04 	movi	r5,124
8110a100:	e13ffd17 	ldw	r4,-12(fp)
8110a104:	110c8300 	call	8110c830 <siPosStr>
8110a108:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there is [!|?] , |, ; in the packet*/
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {
8110a10c:	e0fff78f 	ldh	r3,-34(fp)
8110a110:	e0bff70f 	ldh	r2,-36(fp)
8110a114:	10bfffc4 	addi	r2,r2,-1
8110a118:	1880ac1e 	bne	r3,r2,8110a3cc <bPreParser+0x3d8>
8110a11c:	e0fffa0f 	ldh	r3,-24(fp)
8110a120:	e0bff78f 	ldh	r2,-34(fp)
8110a124:	1880a90e 	bge	r3,r2,8110a3cc <bPreParser+0x3d8>
8110a128:	e0fff90f 	ldh	r3,-28(fp)
8110a12c:	e0bffa0f 	ldh	r2,-24(fp)
8110a130:	1880a60e 	bge	r3,r2,8110a3cc <bPreParser+0x3d8>

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
8110a134:	e0bff90f 	ldh	r2,-28(fp)
8110a138:	e0fffd17 	ldw	r3,-12(fp)
8110a13c:	1889883a 	add	r4,r3,r2
8110a140:	e0fffa0f 	ldh	r3,-24(fp)
8110a144:	e0bff90f 	ldh	r2,-28(fp)
8110a148:	1885c83a 	sub	r2,r3,r2
8110a14c:	100b883a 	mov	r5,r2
8110a150:	110d6300 	call	8110d630 <ucCrc8wInit>
8110a154:	1007883a 	mov	r3,r2
8110a158:	e0bffe17 	ldw	r2,-8(fp)
8110a15c:	10c01205 	stb	r3,72(r2)
        xPerParcedBuffer->cType = buffer[siIniReq];
8110a160:	e0bff90f 	ldh	r2,-28(fp)
8110a164:	e0fffd17 	ldw	r3,-12(fp)
8110a168:	1885883a 	add	r2,r3,r2
8110a16c:	10c00003 	ldbu	r3,0(r2)
8110a170:	e0bffe17 	ldw	r2,-8(fp)
8110a174:	10c00105 	stb	r3,4(r2)

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a178:	e0bffe17 	ldw	r2,-8(fp)
8110a17c:	10800103 	ldbu	r2,4(r2)
8110a180:	10803fcc 	andi	r2,r2,255
8110a184:	1080201c 	xori	r2,r2,128
8110a188:	10bfe004 	addi	r2,r2,-128
8110a18c:	108008d8 	cmpnei	r2,r2,35
8110a190:	1000091e 	bne	r2,zero,8110a1b8 <bPreParser+0x1c4>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
8110a194:	e0bffe17 	ldw	r2,-8(fp)
8110a198:	00c00d84 	movi	r3,54
8110a19c:	10c01245 	stb	r3,73(r2)
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
8110a1a0:	e0bffe17 	ldw	r2,-8(fp)
8110a1a4:	00c00d84 	movi	r3,54
8110a1a8:	10c01205 	stb	r3,72(r2)
            bSuccess = TRUE;
8110a1ac:	00800044 	movi	r2,1
8110a1b0:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a1b4:	00008606 	br	8110a3d0 <bPreParser+0x3dc>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
            bSuccess = TRUE;
        } else {
            xPerParcedBuffer->cCommand = buffer[siIniReq+1];
8110a1b8:	e0bff90f 	ldh	r2,-28(fp)
8110a1bc:	10800044 	addi	r2,r2,1
8110a1c0:	e0fffd17 	ldw	r3,-12(fp)
8110a1c4:	1885883a 	add	r2,r3,r2
8110a1c8:	10c00003 	ldbu	r3,0(r2)
8110a1cc:	e0bffe17 	ldw	r2,-8(fp)
8110a1d0:	10c00145 	stb	r3,5(r2)
            xPerParcedBuffer->ucNofBytes = 0;
8110a1d4:	e0bffe17 	ldw	r2,-8(fp)
8110a1d8:	10000185 	stb	zero,6(r2)
            memset( xPerParcedBuffer->usiValues , 0 , SIZE_UCVALUES);
8110a1dc:	e0bffe17 	ldw	r2,-8(fp)
8110a1e0:	10800204 	addi	r2,r2,8
8110a1e4:	01800804 	movi	r6,32
8110a1e8:	000b883a 	mov	r5,zero
8110a1ec:	1009883a 	mov	r4,r2
8110a1f0:	11122140 	call	81112214 <memset>

            i = siIniReq + 3; /* "?C:i..." */
8110a1f4:	e0bff90b 	ldhu	r2,-28(fp)
8110a1f8:	108000c4 	addi	r2,r2,3
8110a1fc:	e0bff505 	stb	r2,-44(fp)
            do {
                p_inteiro = inteiro;
8110a200:	e0bffac4 	addi	r2,fp,-21
8110a204:	e0bff615 	stw	r2,-40(fp)
                memset( &(inteiro) , 0 , sizeof( inteiro ) );
8110a208:	e0bffac4 	addi	r2,fp,-21
8110a20c:	01800184 	movi	r6,6
8110a210:	000b883a 	mov	r5,zero
8110a214:	1009883a 	mov	r4,r2
8110a218:	11122140 	call	81112214 <memset>
                do {
                    c = buffer[i];
8110a21c:	e0bff503 	ldbu	r2,-44(fp)
8110a220:	e0fffd17 	ldw	r3,-12(fp)
8110a224:	1885883a 	add	r2,r3,r2
8110a228:	10800003 	ldbu	r2,0(r2)
8110a22c:	e0bffa85 	stb	r2,-22(fp)
                    if ( isdigit( c ) ) {
8110a230:	d0e00317 	ldw	r3,-32756(gp)
8110a234:	e0bffa87 	ldb	r2,-22(fp)
8110a238:	10800044 	addi	r2,r2,1
8110a23c:	1885883a 	add	r2,r3,r2
8110a240:	10800003 	ldbu	r2,0(r2)
8110a244:	10803fcc 	andi	r2,r2,255
8110a248:	1080010c 	andi	r2,r2,4
8110a24c:	10000626 	beq	r2,zero,8110a268 <bPreParser+0x274>
                        (*p_inteiro) = c;
8110a250:	e0bff617 	ldw	r2,-40(fp)
8110a254:	e0fffa83 	ldbu	r3,-22(fp)
8110a258:	10c00005 	stb	r3,0(r2)
                        p_inteiro++;
8110a25c:	e0bff617 	ldw	r2,-40(fp)
8110a260:	10800044 	addi	r2,r2,1
8110a264:	e0bff615 	stw	r2,-40(fp)
                    }
                    i++;
8110a268:	e0bff503 	ldbu	r2,-44(fp)
8110a26c:	10800044 	addi	r2,r2,1
8110a270:	e0bff505 	stb	r2,-44(fp)
                } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
8110a274:	e0bff70f 	ldh	r2,-36(fp)
8110a278:	e0fff503 	ldbu	r3,-44(fp)
8110a27c:	1880090e 	bge	r3,r2,8110a2a4 <bPreParser+0x2b0>
8110a280:	e0bffa87 	ldb	r2,-22(fp)
8110a284:	10800ea0 	cmpeqi	r2,r2,58
8110a288:	1000061e 	bne	r2,zero,8110a2a4 <bPreParser+0x2b0>
8110a28c:	e0bffa87 	ldb	r2,-22(fp)
8110a290:	10800ee0 	cmpeqi	r2,r2,59
8110a294:	1000031e 	bne	r2,zero,8110a2a4 <bPreParser+0x2b0>
8110a298:	e0bffa87 	ldb	r2,-22(fp)
8110a29c:	10801f18 	cmpnei	r2,r2,124
8110a2a0:	103fde1e 	bne	r2,zero,8110a21c <__reset+0xfb0ea21c>
                (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a2a4:	e0bff617 	ldw	r2,-40(fp)
8110a2a8:	00c00284 	movi	r3,10
8110a2ac:	10c00005 	stb	r3,0(r2)

                if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
8110a2b0:	e0bffa87 	ldb	r2,-22(fp)
8110a2b4:	10800ea0 	cmpeqi	r2,r2,58
8110a2b8:	1000031e 	bne	r2,zero,8110a2c8 <bPreParser+0x2d4>
8110a2bc:	e0bffa87 	ldb	r2,-22(fp)
8110a2c0:	10801f18 	cmpnei	r2,r2,124
8110a2c4:	10001a1e 	bne	r2,zero,8110a330 <bPreParser+0x33c>
                    xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
8110a2c8:	e0bffe17 	ldw	r2,-8(fp)
8110a2cc:	10800183 	ldbu	r2,6(r2)
8110a2d0:	10803fcc 	andi	r2,r2,255
8110a2d4:	10800828 	cmpgeui	r2,r2,32
8110a2d8:	1000041e 	bne	r2,zero,8110a2ec <bPreParser+0x2f8>
8110a2dc:	e0bffe17 	ldw	r2,-8(fp)
8110a2e0:	10800183 	ldbu	r2,6(r2)
8110a2e4:	14003fcc 	andi	r16,r2,255
8110a2e8:	00000106 	br	8110a2f0 <bPreParser+0x2fc>
8110a2ec:	04000804 	movi	r16,32
8110a2f0:	e0bffac4 	addi	r2,fp,-21
8110a2f4:	1009883a 	mov	r4,r2
8110a2f8:	1110f680 	call	81110f68 <atoi>
8110a2fc:	1009883a 	mov	r4,r2
8110a300:	e0fffe17 	ldw	r3,-8(fp)
8110a304:	80800104 	addi	r2,r16,4
8110a308:	1085883a 	add	r2,r2,r2
8110a30c:	1885883a 	add	r2,r3,r2
8110a310:	1100000d 	sth	r4,0(r2)
                    xPerParcedBuffer->ucNofBytes++;
8110a314:	e0bffe17 	ldw	r2,-8(fp)
8110a318:	10800183 	ldbu	r2,6(r2)
8110a31c:	10800044 	addi	r2,r2,1
8110a320:	1007883a 	mov	r3,r2
8110a324:	e0bffe17 	ldw	r2,-8(fp)
8110a328:	10c00185 	stb	r3,6(r2)
8110a32c:	00000906 	br	8110a354 <bPreParser+0x360>
                }
                else if ( c == FINAL_CHAR )
8110a330:	e0bffa87 	ldb	r2,-22(fp)
8110a334:	10800ed8 	cmpnei	r2,r2,59
8110a338:	1000061e 	bne	r2,zero,8110a354 <bPreParser+0x360>
                {
                    xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
8110a33c:	e0bffac4 	addi	r2,fp,-21
8110a340:	1009883a 	mov	r4,r2
8110a344:	1110f680 	call	81110f68 <atoi>
8110a348:	1007883a 	mov	r3,r2
8110a34c:	e0bffe17 	ldw	r2,-8(fp)
8110a350:	10c01245 	stb	r3,73(r2)
                }

            } while ( (c != FINAL_CHAR) && (siStrLen>i) );
8110a354:	e0bffa87 	ldb	r2,-22(fp)
8110a358:	10800ee0 	cmpeqi	r2,r2,59
8110a35c:	1000031e 	bne	r2,zero,8110a36c <bPreParser+0x378>
8110a360:	e0bff70f 	ldh	r2,-36(fp)
8110a364:	e0fff503 	ldbu	r3,-44(fp)
8110a368:	18bfa516 	blt	r3,r2,8110a200 <__reset+0xfb0ea200>

            if ( c == FINAL_CHAR )
8110a36c:	e0bffa87 	ldb	r2,-22(fp)
8110a370:	10800ed8 	cmpnei	r2,r2,59
8110a374:	1000131e 	bne	r2,zero,8110a3c4 <bPreParser+0x3d0>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
8110a378:	e0bffe17 	ldw	r2,-8(fp)
8110a37c:	10c01243 	ldbu	r3,73(r2)
8110a380:	e0bffe17 	ldw	r2,-8(fp)
8110a384:	10801203 	ldbu	r2,72(r2)
8110a388:	18c03fcc 	andi	r3,r3,255
8110a38c:	10803fcc 	andi	r2,r2,255
8110a390:	1880031e 	bne	r3,r2,8110a3a0 <bPreParser+0x3ac>
                    bSuccess = TRUE;
8110a394:	00800044 	movi	r2,1
8110a398:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a39c:	00000c06 	br	8110a3d0 <bPreParser+0x3dc>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
                    bSuccess = TRUE;
                } else {
                    /* Wrong CRC */
                    #ifdef DEBUG_ON
                        debug(fp,"Wrong CRC. Pre Parsed.\n");
8110a3a0:	d0a04d17 	ldw	r2,-32460(gp)
8110a3a4:	100f883a 	mov	r7,r2
8110a3a8:	018005c4 	movi	r6,23
8110a3ac:	01400044 	movi	r5,1
8110a3b0:	01204534 	movhi	r4,33044
8110a3b4:	21310804 	addi	r4,r4,-15328
8110a3b8:	11116b00 	call	811116b0 <fwrite>
                    #endif
                    bSuccess = FALSE;
8110a3bc:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a3c0:	00000306 	br	8110a3d0 <bPreParser+0x3dc>
                    #endif
                    bSuccess = FALSE;
                }

            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
8110a3c4:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a3c8:	00000106 	br	8110a3d0 <bPreParser+0x3dc>
            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
            }
    } else {
        /*Malformed Packet*/
        bSuccess = FALSE;
8110a3cc:	e03ff415 	stw	zero,-48(fp)
    }
    memset(buffer,0,strlen(buffer));
8110a3d0:	e13ffd17 	ldw	r4,-12(fp)
8110a3d4:	1112a400 	call	81112a40 <strlen>
8110a3d8:	100d883a 	mov	r6,r2
8110a3dc:	000b883a 	mov	r5,zero
8110a3e0:	e13ffd17 	ldw	r4,-12(fp)
8110a3e4:	11122140 	call	81112214 <memset>

    return bSuccess;
8110a3e8:	e0bff417 	ldw	r2,-48(fp)
}
8110a3ec:	e6ffff04 	addi	sp,fp,-4
8110a3f0:	dfc00217 	ldw	ra,8(sp)
8110a3f4:	df000117 	ldw	fp,4(sp)
8110a3f8:	dc000017 	ldw	r16,0(sp)
8110a3fc:	dec00304 	addi	sp,sp,12
8110a400:	f800283a 	ret

8110a404 <setPreParsedFreePos>:

/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
8110a404:	defffb04 	addi	sp,sp,-20
8110a408:	de00012e 	bgeu	sp,et,8110a410 <setPreParsedFreePos+0xc>
8110a40c:	003b68fa 	trap	3
8110a410:	dfc00415 	stw	ra,16(sp)
8110a414:	df000315 	stw	fp,12(sp)
8110a418:	df000304 	addi	fp,sp,12
8110a41c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a420:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
8110a424:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
8110a428:	e03ffe05 	stb	zero,-8(fp)
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a42c:	00004306 	br	8110a53c <setPreParsedFreePos+0x138>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
8110a430:	d0a05417 	ldw	r2,-32432(gp)
8110a434:	e0fffe84 	addi	r3,fp,-6
8110a438:	180d883a 	mov	r6,r3
8110a43c:	01400084 	movi	r5,2
8110a440:	1009883a 	mov	r4,r2
8110a444:	112c3fc0 	call	8112c3fc <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
8110a448:	e0bffe83 	ldbu	r2,-6(fp)
8110a44c:	10803fcc 	andi	r2,r2,255
8110a450:	1000371e 	bne	r2,zero,8110a530 <setPreParsedFreePos+0x12c>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
8110a454:	e03ffe45 	stb	zero,-7(fp)
8110a458:	00002e06 	br	8110a514 <setPreParsedFreePos+0x110>
            {
                if ( xPreParsed[i].cType == 0 ) {
8110a45c:	e0fffe43 	ldbu	r3,-7(fp)
8110a460:	00a04574 	movhi	r2,33045
8110a464:	10bb9604 	addi	r2,r2,-4520
8110a468:	18c01324 	muli	r3,r3,76
8110a46c:	10c5883a 	add	r2,r2,r3
8110a470:	10800104 	addi	r2,r2,4
8110a474:	10800003 	ldbu	r2,0(r2)
8110a478:	10803fcc 	andi	r2,r2,255
8110a47c:	1080201c 	xori	r2,r2,128
8110a480:	10bfe004 	addi	r2,r2,-128
8110a484:	1000201e 	bne	r2,zero,8110a508 <setPreParsedFreePos+0x104>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xPreParsed[i] = (*xPrePReader);
8110a488:	e0fffe43 	ldbu	r3,-7(fp)
8110a48c:	00a04574 	movhi	r2,33045
8110a490:	10bb9604 	addi	r2,r2,-4520
8110a494:	18c01324 	muli	r3,r3,76
8110a498:	10c7883a 	add	r3,r2,r3
8110a49c:	e0bfff17 	ldw	r2,-4(fp)
8110a4a0:	1009883a 	mov	r4,r2
8110a4a4:	00801304 	movi	r2,76
8110a4a8:	100d883a 	mov	r6,r2
8110a4ac:	200b883a 	mov	r5,r4
8110a4b0:	1809883a 	mov	r4,r3
8110a4b4:	11120c40 	call	811120c4 <memcpy>
                    error_code = OSSemPost(xSemCountPreParsed);
8110a4b8:	d0a04f17 	ldw	r2,-32452(gp)
8110a4bc:	1009883a 	mov	r4,r2
8110a4c0:	112e7900 	call	8112e790 <OSSemPost>
8110a4c4:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
8110a4c8:	e0bffe83 	ldbu	r2,-6(fp)
8110a4cc:	10803fcc 	andi	r2,r2,255
8110a4d0:	1000031e 	bne	r2,zero,8110a4e0 <setPreParsedFreePos+0xdc>
                        bSuccess = TRUE;
8110a4d4:	00800044 	movi	r2,1
8110a4d8:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreParsedSemaphore();
                        xPreParsed[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
8110a4dc:	00001006 	br	8110a520 <setPreParsedFreePos+0x11c>
                    xPreParsed[i] = (*xPrePReader);
                    error_code = OSSemPost(xSemCountPreParsed);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreParsedSemaphore();
8110a4e0:	110d85c0 	call	8110d85c <vFailSendPreParsedSemaphore>
                        xPreParsed[i].cType = 0;
8110a4e4:	e0fffe43 	ldbu	r3,-7(fp)
8110a4e8:	00a04574 	movhi	r2,33045
8110a4ec:	10bb9604 	addi	r2,r2,-4520
8110a4f0:	18c01324 	muli	r3,r3,76
8110a4f4:	10c5883a 	add	r2,r2,r3
8110a4f8:	10800104 	addi	r2,r2,4
8110a4fc:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
8110a500:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110a504:	00000606 	br	8110a520 <setPreParsedFreePos+0x11c>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
8110a508:	e0bffe43 	ldbu	r2,-7(fp)
8110a50c:	10800044 	addi	r2,r2,1
8110a510:	e0bffe45 	stb	r2,-7(fp)
8110a514:	e0bffe43 	ldbu	r2,-7(fp)
8110a518:	10800130 	cmpltui	r2,r2,4
8110a51c:	103fcf1e 	bne	r2,zero,8110a45c <__reset+0xfb0ea45c>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexPreParsed);
8110a520:	d0a05417 	ldw	r2,-32432(gp)
8110a524:	1009883a 	mov	r4,r2
8110a528:	112c9a00 	call	8112c9a0 <OSMutexPost>
8110a52c:	00000306 	br	8110a53c <setPreParsedFreePos+0x138>
        } else {
            ucCountRetries++;
8110a530:	e0bffe03 	ldbu	r2,-8(fp)
8110a534:	10800044 	addi	r2,r2,1
8110a538:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a53c:	e0bffd17 	ldw	r2,-12(fp)
8110a540:	1000031e 	bne	r2,zero,8110a550 <setPreParsedFreePos+0x14c>
8110a544:	e0bffe03 	ldbu	r2,-8(fp)
8110a548:	108000b0 	cmpltui	r2,r2,2
8110a54c:	103fb81e 	bne	r2,zero,8110a430 <__reset+0xfb0ea430>
            OSMutexPost(xMutexPreParsed);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
8110a550:	e0bffd17 	ldw	r2,-12(fp)
}
8110a554:	e037883a 	mov	sp,fp
8110a558:	dfc00117 	ldw	ra,4(sp)
8110a55c:	df000017 	ldw	fp,0(sp)
8110a560:	dec00204 	addi	sp,sp,8
8110a564:	f800283a 	ret

8110a568 <setPreAckSenderFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
8110a568:	defffb04 	addi	sp,sp,-20
8110a56c:	de00012e 	bgeu	sp,et,8110a574 <setPreAckSenderFreePos+0xc>
8110a570:	003b68fa 	trap	3
8110a574:	dfc00415 	stw	ra,16(sp)
8110a578:	df000315 	stw	fp,12(sp)
8110a57c:	df000304 	addi	fp,sp,12
8110a580:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a584:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
8110a588:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
8110a58c:	e03ffe05 	stb	zero,-8(fp)
    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a590:	00005406 	br	8110a6e4 <setPreAckSenderFreePos+0x17c>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
8110a594:	d0a05a17 	ldw	r2,-32408(gp)
8110a598:	e0fffe84 	addi	r3,fp,-6
8110a59c:	180d883a 	mov	r6,r3
8110a5a0:	01400104 	movi	r5,4
8110a5a4:	1009883a 	mov	r4,r2
8110a5a8:	112c3fc0 	call	8112c3fc <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
8110a5ac:	e0bffe83 	ldbu	r2,-6(fp)
8110a5b0:	10803fcc 	andi	r2,r2,255
8110a5b4:	1000481e 	bne	r2,zero,8110a6d8 <setPreAckSenderFreePos+0x170>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110a5b8:	e03ffe45 	stb	zero,-7(fp)
8110a5bc:	00003f06 	br	8110a6bc <setPreAckSenderFreePos+0x154>
            {
                if ( xSenderACK[i].cType == 0 ) {
8110a5c0:	e0fffe43 	ldbu	r3,-7(fp)
8110a5c4:	00a04574 	movhi	r2,33045
8110a5c8:	10bb9204 	addi	r2,r2,-4536
8110a5cc:	18c7883a 	add	r3,r3,r3
8110a5d0:	18c7883a 	add	r3,r3,r3
8110a5d4:	10c5883a 	add	r2,r2,r3
8110a5d8:	10800003 	ldbu	r2,0(r2)
8110a5dc:	10803fcc 	andi	r2,r2,255
8110a5e0:	1080201c 	xori	r2,r2,128
8110a5e4:	10bfe004 	addi	r2,r2,-128
8110a5e8:	1000311e 	bne	r2,zero,8110a6b0 <setPreAckSenderFreePos+0x148>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xSenderACK[i].cType = xPrePReader->cType;
8110a5ec:	e0fffe43 	ldbu	r3,-7(fp)
8110a5f0:	e0bfff17 	ldw	r2,-4(fp)
8110a5f4:	11000103 	ldbu	r4,4(r2)
8110a5f8:	00a04574 	movhi	r2,33045
8110a5fc:	10bb9204 	addi	r2,r2,-4536
8110a600:	18c7883a 	add	r3,r3,r3
8110a604:	18c7883a 	add	r3,r3,r3
8110a608:	10c5883a 	add	r2,r2,r3
8110a60c:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].cCommand = xPrePReader->cCommand;
8110a610:	e0fffe43 	ldbu	r3,-7(fp)
8110a614:	e0bfff17 	ldw	r2,-4(fp)
8110a618:	11000143 	ldbu	r4,5(r2)
8110a61c:	00a04574 	movhi	r2,33045
8110a620:	10bb9204 	addi	r2,r2,-4536
8110a624:	18c7883a 	add	r3,r3,r3
8110a628:	18c7883a 	add	r3,r3,r3
8110a62c:	10c5883a 	add	r2,r2,r3
8110a630:	10800044 	addi	r2,r2,1
8110a634:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
8110a638:	e0fffe43 	ldbu	r3,-7(fp)
8110a63c:	e0bfff17 	ldw	r2,-4(fp)
8110a640:	1100020b 	ldhu	r4,8(r2)
8110a644:	00a04574 	movhi	r2,33045
8110a648:	10bb9204 	addi	r2,r2,-4536
8110a64c:	18c7883a 	add	r3,r3,r3
8110a650:	18c7883a 	add	r3,r3,r3
8110a654:	10c5883a 	add	r2,r2,r3
8110a658:	10800084 	addi	r2,r2,2
8110a65c:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountSenderACK);
8110a660:	d0a04c17 	ldw	r2,-32464(gp)
8110a664:	1009883a 	mov	r4,r2
8110a668:	112e7900 	call	8112e790 <OSSemPost>
8110a66c:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
8110a670:	e0bffe83 	ldbu	r2,-6(fp)
8110a674:	10803fcc 	andi	r2,r2,255
8110a678:	1000031e 	bne	r2,zero,8110a688 <setPreAckSenderFreePos+0x120>
                        bSuccess = TRUE;
8110a67c:	00800044 	movi	r2,1
8110a680:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckSenderSemaphore();
                        xSenderACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
8110a684:	00001006 	br	8110a6c8 <setPreAckSenderFreePos+0x160>

                    error_code = OSSemPost(xSemCountSenderACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckSenderSemaphore();
8110a688:	110d8f40 	call	8110d8f4 <vFailSendPreAckSenderSemaphore>
                        xSenderACK[i].cType = 0;
8110a68c:	e0fffe43 	ldbu	r3,-7(fp)
8110a690:	00a04574 	movhi	r2,33045
8110a694:	10bb9204 	addi	r2,r2,-4536
8110a698:	18c7883a 	add	r3,r3,r3
8110a69c:	18c7883a 	add	r3,r3,r3
8110a6a0:	10c5883a 	add	r2,r2,r3
8110a6a4:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
8110a6a8:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110a6ac:	00000606 	br	8110a6c8 <setPreAckSenderFreePos+0x160>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110a6b0:	e0bffe43 	ldbu	r2,-7(fp)
8110a6b4:	10800044 	addi	r2,r2,1
8110a6b8:	e0bffe45 	stb	r2,-7(fp)
8110a6bc:	e0bffe43 	ldbu	r2,-7(fp)
8110a6c0:	10800130 	cmpltui	r2,r2,4
8110a6c4:	103fbe1e 	bne	r2,zero,8110a5c0 <__reset+0xfb0ea5c0>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexSenderACK);
8110a6c8:	d0a05a17 	ldw	r2,-32408(gp)
8110a6cc:	1009883a 	mov	r4,r2
8110a6d0:	112c9a00 	call	8112c9a0 <OSMutexPost>
8110a6d4:	00000306 	br	8110a6e4 <setPreAckSenderFreePos+0x17c>
        } else {
            ucCountRetries++;
8110a6d8:	e0bffe03 	ldbu	r2,-8(fp)
8110a6dc:	10800044 	addi	r2,r2,1
8110a6e0:	e0bffe05 	stb	r2,-8(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a6e4:	e0bffd17 	ldw	r2,-12(fp)
8110a6e8:	1000031e 	bne	r2,zero,8110a6f8 <setPreAckSenderFreePos+0x190>
8110a6ec:	e0bffe03 	ldbu	r2,-8(fp)
8110a6f0:	108000b0 	cmpltui	r2,r2,2
8110a6f4:	103fa71e 	bne	r2,zero,8110a594 <__reset+0xfb0ea594>
            OSMutexPost(xMutexSenderACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
8110a6f8:	e0bffd17 	ldw	r2,-12(fp)
}
8110a6fc:	e037883a 	mov	sp,fp
8110a700:	dfc00117 	ldw	ra,4(sp)
8110a704:	df000017 	ldw	fp,0(sp)
8110a708:	dec00204 	addi	sp,sp,8
8110a70c:	f800283a 	ret

8110a710 <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
8110a710:	defffb04 	addi	sp,sp,-20
8110a714:	de00012e 	bgeu	sp,et,8110a71c <setPreAckReceiverFreePos+0xc>
8110a718:	003b68fa 	trap	3
8110a71c:	dfc00415 	stw	ra,16(sp)
8110a720:	df000315 	stw	fp,12(sp)
8110a724:	df000304 	addi	fp,sp,12
8110a728:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a72c:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
8110a730:	e03ffe05 	stb	zero,-8(fp)

    ucCountRetries = 0;
8110a734:	e03ffe05 	stb	zero,-8(fp)
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a738:	00005406 	br	8110a88c <setPreAckReceiverFreePos+0x17c>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
8110a73c:	d0a05017 	ldw	r2,-32448(gp)
8110a740:	e0fffe84 	addi	r3,fp,-6
8110a744:	180d883a 	mov	r6,r3
8110a748:	01400084 	movi	r5,2
8110a74c:	1009883a 	mov	r4,r2
8110a750:	112c3fc0 	call	8112c3fc <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
8110a754:	e0bffe83 	ldbu	r2,-6(fp)
8110a758:	10803fcc 	andi	r2,r2,255
8110a75c:	1000481e 	bne	r2,zero,8110a880 <setPreAckReceiverFreePos+0x170>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
8110a760:	e03ffe45 	stb	zero,-7(fp)
8110a764:	00003f06 	br	8110a864 <setPreAckReceiverFreePos+0x154>
            {
                if ( xReceivedACK[i].cType == 0 ) {
8110a768:	e0fffe43 	ldbu	r3,-7(fp)
8110a76c:	00a04574 	movhi	r2,33045
8110a770:	10b38e04 	addi	r2,r2,-12744
8110a774:	18c7883a 	add	r3,r3,r3
8110a778:	18c7883a 	add	r3,r3,r3
8110a77c:	10c5883a 	add	r2,r2,r3
8110a780:	10800003 	ldbu	r2,0(r2)
8110a784:	10803fcc 	andi	r2,r2,255
8110a788:	1080201c 	xori	r2,r2,128
8110a78c:	10bfe004 	addi	r2,r2,-128
8110a790:	1000311e 	bne	r2,zero,8110a858 <setPreAckReceiverFreePos+0x148>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xReceivedACK[i].cType = xPrePReader->cType;
8110a794:	e0fffe43 	ldbu	r3,-7(fp)
8110a798:	e0bfff17 	ldw	r2,-4(fp)
8110a79c:	11000103 	ldbu	r4,4(r2)
8110a7a0:	00a04574 	movhi	r2,33045
8110a7a4:	10b38e04 	addi	r2,r2,-12744
8110a7a8:	18c7883a 	add	r3,r3,r3
8110a7ac:	18c7883a 	add	r3,r3,r3
8110a7b0:	10c5883a 	add	r2,r2,r3
8110a7b4:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].cCommand = xPrePReader->cCommand;
8110a7b8:	e0fffe43 	ldbu	r3,-7(fp)
8110a7bc:	e0bfff17 	ldw	r2,-4(fp)
8110a7c0:	11000143 	ldbu	r4,5(r2)
8110a7c4:	00a04574 	movhi	r2,33045
8110a7c8:	10b38e04 	addi	r2,r2,-12744
8110a7cc:	18c7883a 	add	r3,r3,r3
8110a7d0:	18c7883a 	add	r3,r3,r3
8110a7d4:	10c5883a 	add	r2,r2,r3
8110a7d8:	10800044 	addi	r2,r2,1
8110a7dc:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].usiId = xPrePReader->usiValues[0];
8110a7e0:	e0fffe43 	ldbu	r3,-7(fp)
8110a7e4:	e0bfff17 	ldw	r2,-4(fp)
8110a7e8:	1100020b 	ldhu	r4,8(r2)
8110a7ec:	00a04574 	movhi	r2,33045
8110a7f0:	10b38e04 	addi	r2,r2,-12744
8110a7f4:	18c7883a 	add	r3,r3,r3
8110a7f8:	18c7883a 	add	r3,r3,r3
8110a7fc:	10c5883a 	add	r2,r2,r3
8110a800:	10800084 	addi	r2,r2,2
8110a804:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountReceivedACK);
8110a808:	d0a05117 	ldw	r2,-32444(gp)
8110a80c:	1009883a 	mov	r4,r2
8110a810:	112e7900 	call	8112e790 <OSSemPost>
8110a814:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
8110a818:	e0bffe83 	ldbu	r2,-6(fp)
8110a81c:	10803fcc 	andi	r2,r2,255
8110a820:	1000031e 	bne	r2,zero,8110a830 <setPreAckReceiverFreePos+0x120>
                        bSuccess = TRUE;
8110a824:	00800044 	movi	r2,1
8110a828:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckReceiverSemaphore();
                        xReceivedACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
8110a82c:	00001006 	br	8110a870 <setPreAckReceiverFreePos+0x160>

                    error_code = OSSemPost(xSemCountReceivedACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckReceiverSemaphore();
8110a830:	110d8a80 	call	8110d8a8 <vFailSendPreAckReceiverSemaphore>
                        xReceivedACK[i].cType = 0;
8110a834:	e0fffe43 	ldbu	r3,-7(fp)
8110a838:	00a04574 	movhi	r2,33045
8110a83c:	10b38e04 	addi	r2,r2,-12744
8110a840:	18c7883a 	add	r3,r3,r3
8110a844:	18c7883a 	add	r3,r3,r3
8110a848:	10c5883a 	add	r2,r2,r3
8110a84c:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
8110a850:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110a854:	00000606 	br	8110a870 <setPreAckReceiverFreePos+0x160>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
8110a858:	e0bffe43 	ldbu	r2,-7(fp)
8110a85c:	10800044 	addi	r2,r2,1
8110a860:	e0bffe45 	stb	r2,-7(fp)
8110a864:	e0bffe43 	ldbu	r2,-7(fp)
8110a868:	10800130 	cmpltui	r2,r2,4
8110a86c:	103fbe1e 	bne	r2,zero,8110a768 <__reset+0xfb0ea768>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexReceivedACK);
8110a870:	d0a05017 	ldw	r2,-32448(gp)
8110a874:	1009883a 	mov	r4,r2
8110a878:	112c9a00 	call	8112c9a0 <OSMutexPost>
8110a87c:	00000306 	br	8110a88c <setPreAckReceiverFreePos+0x17c>
        } else {
            ucCountRetries++;
8110a880:	e0bffe03 	ldbu	r2,-8(fp)
8110a884:	10800044 	addi	r2,r2,1
8110a888:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    ucCountRetries = 0;
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a88c:	e0bffd17 	ldw	r2,-12(fp)
8110a890:	1000031e 	bne	r2,zero,8110a8a0 <setPreAckReceiverFreePos+0x190>
8110a894:	e0bffe03 	ldbu	r2,-8(fp)
8110a898:	108000b0 	cmpltui	r2,r2,2
8110a89c:	103fa71e 	bne	r2,zero,8110a73c <__reset+0xfb0ea73c>
            OSMutexPost(xMutexReceivedACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
8110a8a0:	e0bffd17 	ldw	r2,-12(fp)
}
8110a8a4:	e037883a 	mov	sp,fp
8110a8a8:	dfc00117 	ldw	ra,4(sp)
8110a8ac:	df000017 	ldw	fp,0(sp)
8110a8b0:	dec00204 	addi	sp,sp,8
8110a8b4:	f800283a 	ret

8110a8b8 <vSenderComTask>:

#include "sender_com_task.h"


void vSenderComTask(void *task_data)
{
8110a8b8:	defffb04 	addi	sp,sp,-20
8110a8bc:	de00012e 	bgeu	sp,et,8110a8c4 <vSenderComTask+0xc>
8110a8c0:	003b68fa 	trap	3
8110a8c4:	dfc00415 	stw	ra,16(sp)
8110a8c8:	df000315 	stw	fp,12(sp)
8110a8cc:	df000304 	addi	fp,sp,12
8110a8d0:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    int desligarEm = 0;
8110a8d4:	e03ffe15 	stw	zero,-8(fp)

    eSenderMode = sConfiguringSender;
8110a8d8:	e03ffd15 	stw	zero,-12(fp)

    #ifdef DEBUG_ON
        debug(fp,"vSenderComTask, enter task.\n");
8110a8dc:	d0a04d17 	ldw	r2,-32460(gp)
8110a8e0:	100f883a 	mov	r7,r2
8110a8e4:	01800704 	movi	r6,28
8110a8e8:	01400044 	movi	r5,1
8110a8ec:	01204534 	movhi	r4,33044
8110a8f0:	21310e04 	addi	r4,r4,-15304
8110a8f4:	11116b00 	call	811116b0 <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
8110a8f8:	e0bffd17 	ldw	r2,-12(fp)
8110a8fc:	10c00060 	cmpeqi	r3,r2,1
8110a900:	1800091e 	bne	r3,zero,8110a928 <vSenderComTask+0x70>
8110a904:	0080052e 	bgeu	zero,r2,8110a91c <vSenderComTask+0x64>
8110a908:	10c000a0 	cmpeqi	r3,r2,2
8110a90c:	1800351e 	bne	r3,zero,8110a9e4 <vSenderComTask+0x12c>
8110a910:	10800160 	cmpeqi	r2,r2,5
8110a914:	10001c1e 	bne	r2,zero,8110a988 <vSenderComTask+0xd0>
8110a918:	00002a06 	br	8110a9c4 <vSenderComTask+0x10c>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
8110a91c:	00800044 	movi	r2,1
8110a920:	e0bffd15 	stw	r2,-12(fp)
                break;
8110a924:	00003006 	br	8110a9e8 <vSenderComTask+0x130>
            case sStartingConnSender:

                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
8110a928:	d0a04b17 	ldw	r2,-32468(gp)
8110a92c:	1009883a 	mov	r4,r2
8110a930:	112e0280 	call	8112e028 <OSSemAccept>
8110a934:	10bfffcc 	andi	r2,r2,65535
8110a938:	10000326 	beq	r2,zero,8110a948 <vSenderComTask+0x90>
                    eSenderMode = sDummySender;
8110a93c:	00800144 	movi	r2,5
8110a940:	e0bffd15 	stw	r2,-12(fp)
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }

                break;
8110a944:	00002806 	br	8110a9e8 <vSenderComTask+0x130>
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
                    eSenderMode = sDummySender;
                } else {
					#ifdef DEBUG_ON
						debug(fp,"Sending start sequence\n");
8110a948:	d0a04d17 	ldw	r2,-32460(gp)
8110a94c:	100f883a 	mov	r7,r2
8110a950:	018005c4 	movi	r6,23
8110a954:	01400044 	movi	r5,1
8110a958:	01204534 	movhi	r4,33044
8110a95c:	21311604 	addi	r4,r4,-15272
8110a960:	11116b00 	call	811116b0 <fwrite>
					#endif
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
8110a964:	01204534 	movhi	r4,33044
8110a968:	21311c04 	addi	r4,r4,-15248
8110a96c:	11124e80 	call	811124e8 <puts>
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
8110a970:	000f883a 	mov	r7,zero
8110a974:	01800144 	movi	r6,5
8110a978:	000b883a 	mov	r5,zero
8110a97c:	0009883a 	mov	r4,zero
8110a980:	11303a00 	call	811303a0 <OSTimeDlyHMSM>
                }

                break;
8110a984:	00001806 	br	8110a9e8 <vSenderComTask+0x130>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
8110a988:	00800144 	movi	r2,5
8110a98c:	e0bffd15 	stw	r2,-12(fp)


#ifdef DEBUG_ON
	debug(fp,"sDummySender\n");
8110a990:	d0a04d17 	ldw	r2,-32460(gp)
8110a994:	100f883a 	mov	r7,r2
8110a998:	01800344 	movi	r6,13
8110a99c:	01400044 	movi	r5,1
8110a9a0:	01204534 	movhi	r4,33044
8110a9a4:	21311f04 	addi	r4,r4,-15236
8110a9a8:	11116b00 	call	811116b0 <fwrite>
#endif
				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
8110a9ac:	000f883a 	mov	r7,zero
8110a9b0:	01800284 	movi	r6,10
8110a9b4:	000b883a 	mov	r5,zero
8110a9b8:	0009883a 	mov	r4,zero
8110a9bc:	11303a00 	call	811303a0 <OSTimeDlyHMSM>
                break;
8110a9c0:	00000906 	br	8110a9e8 <vSenderComTask+0x130>
            default:
#ifdef DEBUG_ON
	debug(fp,"sender default\n");
8110a9c4:	d0a04d17 	ldw	r2,-32460(gp)
8110a9c8:	100f883a 	mov	r7,r2
8110a9cc:	018003c4 	movi	r6,15
8110a9d0:	01400044 	movi	r5,1
8110a9d4:	01204534 	movhi	r4,33044
8110a9d8:	21312304 	addi	r4,r4,-15220
8110a9dc:	11116b00 	call	811116b0 <fwrite>
#endif
                break;
8110a9e0:	00000106 	br	8110a9e8 <vSenderComTask+0x130>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
8110a9e4:	0001883a 	nop
	debug(fp,"sender default\n");
#endif
                break;
        }

    }
8110a9e8:	003fc306 	br	8110a8f8 <__reset+0xfb0ea8f8>

8110a9ec <vSimMebTask>:


#include "sim_meb_task.h"


void vSimMebTask(void *task_data) {
8110a9ec:	defffd04 	addi	sp,sp,-12
8110a9f0:	de00012e 	bgeu	sp,et,8110a9f8 <vSimMebTask+0xc>
8110a9f4:	003b68fa 	trap	3
8110a9f8:	df000215 	stw	fp,8(sp)
8110a9fc:	df000204 	addi	fp,sp,8
8110aa00:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
8110aa04:	e03ffe15 	stw	zero,-8(fp)


	//SIMUCAM MAIN TASK


}
8110aa08:	0001883a 	nop
8110aa0c:	e037883a 	mov	sp,fp
8110aa10:	df000017 	ldw	fp,0(sp)
8110aa14:	dec00104 	addi	sp,sp,4
8110aa18:	f800283a 	ret

8110aa1c <vTimeoutCheckerTask>:

#include "timeout_checker_ack_task.h"


/* Could impact in the overall performance of the system due to need many shared resources (many mutexes) */
void vTimeoutCheckerTask(void *task_data) {
8110aa1c:	defff504 	addi	sp,sp,-44
8110aa20:	de00012e 	bgeu	sp,et,8110aa28 <vTimeoutCheckerTask+0xc>
8110aa24:	003b68fa 	trap	3
8110aa28:	dfc00a15 	stw	ra,40(sp)
8110aa2c:	df000915 	stw	fp,36(sp)
8110aa30:	df000904 	addi	fp,sp,36
8110aa34:	e13fff15 	stw	r4,-4(fp)
    bool bFinished32 = FALSE;
8110aa38:	e03ff715 	stw	zero,-36(fp)
    bool bFinished64 = FALSE;
8110aa3c:	e03ff815 	stw	zero,-32(fp)
    bool bFinished128 = FALSE;
8110aa40:	e03ff915 	stw	zero,-28(fp)
	INT8U error_code;
    unsigned char ucCountRetries = 0;
8110aa44:	e03ffa05 	stb	zero,-24(fp)
    unsigned char i = 0, k =0;
8110aa48:	e03ffa45 	stb	zero,-23(fp)
8110aa4c:	e03ffa85 	stb	zero,-22(fp)
	unsigned char ucRetransB32[N_32];
	unsigned char ucRetransB64[N_64];
	unsigned char ucRetransB128[N_128];

    #ifdef DEBUG_ON
        debug(fp,"vTimeoutCheckerTask, enter task.\n");
8110aa50:	d0a04d17 	ldw	r2,-32460(gp)
8110aa54:	100f883a 	mov	r7,r2
8110aa58:	01800844 	movi	r6,33
8110aa5c:	01400044 	movi	r5,1
8110aa60:	01204534 	movhi	r4,33044
8110aa64:	21312704 	addi	r4,r4,-15204
8110aa68:	11116b00 	call	811116b0 <fwrite>
    #endif

    for (;;) {
        /* This semaphore is used to sync the Timer used for check timeout and this task that is for actualy implement the logic of the timeout for the communication*/
        OSSemPend(xSemTimeoutChecker, 0, &error_code);
8110aa6c:	d0a05217 	ldw	r2,-32440(gp)
8110aa70:	e0fffac4 	addi	r3,fp,-21
8110aa74:	180d883a 	mov	r6,r3
8110aa78:	000b883a 	mov	r5,zero
8110aa7c:	1009883a 	mov	r4,r2
8110aa80:	112e4080 	call	8112e408 <OSSemPend>
        if ( error_code == OS_NO_ERR ) {
8110aa84:	e0bffac3 	ldbu	r2,-21(fp)
8110aa88:	10803fcc 	andi	r2,r2,255
8110aa8c:	1002191e 	bne	r2,zero,8110b2f4 <vTimeoutCheckerTask+0x8d8>
            /*  Time to check all the (re)transmission buffers in order to retransmit if any message got timeout*/

            /*  Writing 0xFF in the buffer to check after if there is any scheduled retransmission
                If there is some, the valur will be between 0 and <max buffer size>*/
            memset(ucRetransB32, 255, N_32);
8110aa90:	e0bffb04 	addi	r2,fp,-20
8110aa94:	01800204 	movi	r6,8
8110aa98:	01403fc4 	movi	r5,255
8110aa9c:	1009883a 	mov	r4,r2
8110aaa0:	11122140 	call	81112214 <memset>
            memset(ucRetransB64, 255, N_64);
8110aaa4:	e0bffd04 	addi	r2,fp,-12
8110aaa8:	01800104 	movi	r6,4
8110aaac:	01403fc4 	movi	r5,255
8110aab0:	1009883a 	mov	r4,r2
8110aab4:	11122140 	call	81112214 <memset>
            memset(ucRetransB128, 255, N_128);
8110aab8:	e0bffe04 	addi	r2,fp,-8
8110aabc:	01800084 	movi	r6,2
8110aac0:	01403fc4 	movi	r5,255
8110aac4:	1009883a 	mov	r4,r2
8110aac8:	11122140 	call	81112214 <memset>

            bFinished32=FALSE;
8110aacc:	e03ff715 	stw	zero,-36(fp)
            bFinished64=FALSE;
8110aad0:	e03ff815 	stw	zero,-32(fp)
            bFinished128=FALSE;
8110aad4:	e03ff915 	stw	zero,-28(fp)
            ucCountRetries = 0;
8110aad8:	e03ffa05 	stb	zero,-24(fp)

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
8110aadc:	00011a06 	br	8110af48 <vTimeoutCheckerTask+0x52c>

                if ( bFinished32 == FALSE ) {
8110aae0:	e0bff717 	ldw	r2,-36(fp)
8110aae4:	10005b1e 	bne	r2,zero,8110ac54 <vTimeoutCheckerTask+0x238>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110aae8:	d0a05517 	ldw	r2,-32428(gp)
8110aaec:	e0fffac4 	addi	r3,fp,-21
8110aaf0:	180d883a 	mov	r6,r3
8110aaf4:	01400084 	movi	r5,2
8110aaf8:	1009883a 	mov	r4,r2
8110aafc:	112c3fc0 	call	8112c3fc <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110ab00:	e0bffac3 	ldbu	r2,-21(fp)
8110ab04:	10803fcc 	andi	r2,r2,255
8110ab08:	1000521e 	bne	r2,zero,8110ac54 <vTimeoutCheckerTask+0x238>
                        /*Search for the id*/
                        k = 0;
8110ab0c:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_32; i++)
8110ab10:	e03ffa45 	stb	zero,-23(fp)
8110ab14:	00004706 	br	8110ac34 <vTimeoutCheckerTask+0x218>
                        {
                            if ( xBuffer32[i].usiId != 0 ) {
8110ab18:	e0fffa43 	ldbu	r3,-23(fp)
8110ab1c:	00a04534 	movhi	r2,33044
8110ab20:	109aff04 	addi	r2,r2,27644
8110ab24:	18c009a4 	muli	r3,r3,38
8110ab28:	10c5883a 	add	r2,r2,r3
8110ab2c:	10800804 	addi	r2,r2,32
8110ab30:	1080000b 	ldhu	r2,0(r2)
8110ab34:	10bfffcc 	andi	r2,r2,65535
8110ab38:	10003b26 	beq	r2,zero,8110ac28 <vTimeoutCheckerTask+0x20c>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer32[i].ucNofRetries < 1 ) {
8110ab3c:	e0fffa43 	ldbu	r3,-23(fp)
8110ab40:	00a04534 	movhi	r2,33044
8110ab44:	109aff04 	addi	r2,r2,27644
8110ab48:	18c009a4 	muli	r3,r3,38
8110ab4c:	10c5883a 	add	r2,r2,r3
8110ab50:	10800904 	addi	r2,r2,36
8110ab54:	10800003 	ldbu	r2,0(r2)
8110ab58:	10803fcc 	andi	r2,r2,255
8110ab5c:	1000101e 	bne	r2,zero,8110aba0 <vTimeoutCheckerTask+0x184>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer32[i].usiId = 0;
8110ab60:	e0fffa43 	ldbu	r3,-23(fp)
8110ab64:	00a04534 	movhi	r2,33044
8110ab68:	109aff04 	addi	r2,r2,27644
8110ab6c:	18c009a4 	muli	r3,r3,38
8110ab70:	10c5883a 	add	r2,r2,r3
8110ab74:	10800804 	addi	r2,r2,32
8110ab78:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer32);
8110ab7c:	d0a05817 	ldw	r2,-32416(gp)
8110ab80:	1009883a 	mov	r4,r2
8110ab84:	112e7900 	call	8112e790 <OSSemPost>
8110ab88:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110ab8c:	e0bffac3 	ldbu	r2,-21(fp)
8110ab90:	10803fcc 	andi	r2,r2,255
8110ab94:	10002426 	beq	r2,zero,8110ac28 <vTimeoutCheckerTask+0x20c>
                                        vFailSetCountSemaphorexBuffer32();
8110ab98:	110dcc40 	call	8110dcc4 <vFailSetCountSemaphorexBuffer32>
8110ab9c:	00002206 	br	8110ac28 <vTimeoutCheckerTask+0x20c>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer32[i].usiTimeOut--;
8110aba0:	e0fffa43 	ldbu	r3,-23(fp)
8110aba4:	00a04534 	movhi	r2,33044
8110aba8:	109aff04 	addi	r2,r2,27644
8110abac:	190009a4 	muli	r4,r3,38
8110abb0:	1105883a 	add	r2,r2,r4
8110abb4:	10800884 	addi	r2,r2,34
8110abb8:	1080000b 	ldhu	r2,0(r2)
8110abbc:	10bfffc4 	addi	r2,r2,-1
8110abc0:	1009883a 	mov	r4,r2
8110abc4:	00a04534 	movhi	r2,33044
8110abc8:	109aff04 	addi	r2,r2,27644
8110abcc:	18c009a4 	muli	r3,r3,38
8110abd0:	10c5883a 	add	r2,r2,r3
8110abd4:	10800884 	addi	r2,r2,34
8110abd8:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer32[i].usiTimeOut < 1 ) {
8110abdc:	e0fffa43 	ldbu	r3,-23(fp)
8110abe0:	00a04534 	movhi	r2,33044
8110abe4:	109aff04 	addi	r2,r2,27644
8110abe8:	18c009a4 	muli	r3,r3,38
8110abec:	10c5883a 	add	r2,r2,r3
8110abf0:	10800884 	addi	r2,r2,34
8110abf4:	1080000b 	ldhu	r2,0(r2)
8110abf8:	10bfffcc 	andi	r2,r2,65535
8110abfc:	10a0001c 	xori	r2,r2,32768
8110ac00:	10a00004 	addi	r2,r2,-32768
8110ac04:	00800816 	blt	zero,r2,8110ac28 <vTimeoutCheckerTask+0x20c>
                                        /* Schedule to retransmit */
                                        ucRetransB32[k] = i;
8110ac08:	e0bffa83 	ldbu	r2,-22(fp)
8110ac0c:	e0fffb04 	addi	r3,fp,-20
8110ac10:	1885883a 	add	r2,r3,r2
8110ac14:	e0fffa43 	ldbu	r3,-23(fp)
8110ac18:	10c00005 	stb	r3,0(r2)
                                        k++;
8110ac1c:	e0bffa83 	ldbu	r2,-22(fp)
8110ac20:	10800044 	addi	r2,r2,1
8110ac24:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_32; i++)
8110ac28:	e0bffa43 	ldbu	r2,-23(fp)
8110ac2c:	10800044 	addi	r2,r2,1
8110ac30:	e0bffa45 	stb	r2,-23(fp)
8110ac34:	e0bffa43 	ldbu	r2,-23(fp)
8110ac38:	10800230 	cmpltui	r2,r2,8
8110ac3c:	103fb61e 	bne	r2,zero,8110ab18 <__reset+0xfb0eab18>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110ac40:	d0a05517 	ldw	r2,-32428(gp)
8110ac44:	1009883a 	mov	r4,r2
8110ac48:	112c9a00 	call	8112c9a0 <OSMutexPost>
                        bFinished32 = TRUE;
8110ac4c:	00800044 	movi	r2,1
8110ac50:	e0bff715 	stw	r2,-36(fp)
                    }
                }

                if ( bFinished64 == FALSE ) {
8110ac54:	e0bff817 	ldw	r2,-32(fp)
8110ac58:	10005b1e 	bne	r2,zero,8110adc8 <vTimeoutCheckerTask+0x3ac>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110ac5c:	d0a05917 	ldw	r2,-32412(gp)
8110ac60:	e0fffac4 	addi	r3,fp,-21
8110ac64:	180d883a 	mov	r6,r3
8110ac68:	01400084 	movi	r5,2
8110ac6c:	1009883a 	mov	r4,r2
8110ac70:	112c3fc0 	call	8112c3fc <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110ac74:	e0bffac3 	ldbu	r2,-21(fp)
8110ac78:	10803fcc 	andi	r2,r2,255
8110ac7c:	1000521e 	bne	r2,zero,8110adc8 <vTimeoutCheckerTask+0x3ac>
                        /*Search for the id*/
                        k = 0;
8110ac80:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_64; i++)
8110ac84:	e03ffa45 	stb	zero,-23(fp)
8110ac88:	00004706 	br	8110ada8 <vTimeoutCheckerTask+0x38c>
                        {
                            if ( xBuffer64[i].usiId != 0 ) {
8110ac8c:	e0fffa43 	ldbu	r3,-23(fp)
8110ac90:	00a04534 	movhi	r2,33044
8110ac94:	1089a204 	addi	r2,r2,9864
8110ac98:	18c011a4 	muli	r3,r3,70
8110ac9c:	10c5883a 	add	r2,r2,r3
8110aca0:	10801004 	addi	r2,r2,64
8110aca4:	1080000b 	ldhu	r2,0(r2)
8110aca8:	10bfffcc 	andi	r2,r2,65535
8110acac:	10003b26 	beq	r2,zero,8110ad9c <vTimeoutCheckerTask+0x380>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer64[i].ucNofRetries < 1 ) {
8110acb0:	e0fffa43 	ldbu	r3,-23(fp)
8110acb4:	00a04534 	movhi	r2,33044
8110acb8:	1089a204 	addi	r2,r2,9864
8110acbc:	18c011a4 	muli	r3,r3,70
8110acc0:	10c5883a 	add	r2,r2,r3
8110acc4:	10801104 	addi	r2,r2,68
8110acc8:	10800003 	ldbu	r2,0(r2)
8110accc:	10803fcc 	andi	r2,r2,255
8110acd0:	1000101e 	bne	r2,zero,8110ad14 <vTimeoutCheckerTask+0x2f8>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer64[i].usiId = 0;
8110acd4:	e0fffa43 	ldbu	r3,-23(fp)
8110acd8:	00a04534 	movhi	r2,33044
8110acdc:	1089a204 	addi	r2,r2,9864
8110ace0:	18c011a4 	muli	r3,r3,70
8110ace4:	10c5883a 	add	r2,r2,r3
8110ace8:	10801004 	addi	r2,r2,64
8110acec:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer64);
8110acf0:	d0a04a17 	ldw	r2,-32472(gp)
8110acf4:	1009883a 	mov	r4,r2
8110acf8:	112e7900 	call	8112e790 <OSSemPost>
8110acfc:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110ad00:	e0bffac3 	ldbu	r2,-21(fp)
8110ad04:	10803fcc 	andi	r2,r2,255
8110ad08:	10002426 	beq	r2,zero,8110ad9c <vTimeoutCheckerTask+0x380>
                                        vFailSetCountSemaphorexBuffer64();
8110ad0c:	110dd2c0 	call	8110dd2c <vFailSetCountSemaphorexBuffer64>
8110ad10:	00002206 	br	8110ad9c <vTimeoutCheckerTask+0x380>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer64[i].usiTimeOut--;
8110ad14:	e0fffa43 	ldbu	r3,-23(fp)
8110ad18:	00a04534 	movhi	r2,33044
8110ad1c:	1089a204 	addi	r2,r2,9864
8110ad20:	190011a4 	muli	r4,r3,70
8110ad24:	1105883a 	add	r2,r2,r4
8110ad28:	10801084 	addi	r2,r2,66
8110ad2c:	1080000b 	ldhu	r2,0(r2)
8110ad30:	10bfffc4 	addi	r2,r2,-1
8110ad34:	1009883a 	mov	r4,r2
8110ad38:	00a04534 	movhi	r2,33044
8110ad3c:	1089a204 	addi	r2,r2,9864
8110ad40:	18c011a4 	muli	r3,r3,70
8110ad44:	10c5883a 	add	r2,r2,r3
8110ad48:	10801084 	addi	r2,r2,66
8110ad4c:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer64[i].usiTimeOut < 1 ) {
8110ad50:	e0fffa43 	ldbu	r3,-23(fp)
8110ad54:	00a04534 	movhi	r2,33044
8110ad58:	1089a204 	addi	r2,r2,9864
8110ad5c:	18c011a4 	muli	r3,r3,70
8110ad60:	10c5883a 	add	r2,r2,r3
8110ad64:	10801084 	addi	r2,r2,66
8110ad68:	1080000b 	ldhu	r2,0(r2)
8110ad6c:	10bfffcc 	andi	r2,r2,65535
8110ad70:	10a0001c 	xori	r2,r2,32768
8110ad74:	10a00004 	addi	r2,r2,-32768
8110ad78:	00800816 	blt	zero,r2,8110ad9c <vTimeoutCheckerTask+0x380>
                                        /* Schedule to retransmit */
                                        ucRetransB64[k] = i;
8110ad7c:	e0bffa83 	ldbu	r2,-22(fp)
8110ad80:	e0fffd04 	addi	r3,fp,-12
8110ad84:	1885883a 	add	r2,r3,r2
8110ad88:	e0fffa43 	ldbu	r3,-23(fp)
8110ad8c:	10c00005 	stb	r3,0(r2)
                                        k++;
8110ad90:	e0bffa83 	ldbu	r2,-22(fp)
8110ad94:	10800044 	addi	r2,r2,1
8110ad98:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_64; i++)
8110ad9c:	e0bffa43 	ldbu	r2,-23(fp)
8110ada0:	10800044 	addi	r2,r2,1
8110ada4:	e0bffa45 	stb	r2,-23(fp)
8110ada8:	e0bffa43 	ldbu	r2,-23(fp)
8110adac:	10800130 	cmpltui	r2,r2,4
8110adb0:	103fb61e 	bne	r2,zero,8110ac8c <__reset+0xfb0eac8c>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer32*/
8110adb4:	d0a05917 	ldw	r2,-32412(gp)
8110adb8:	1009883a 	mov	r4,r2
8110adbc:	112c9a00 	call	8112c9a0 <OSMutexPost>
                        bFinished64 = TRUE;
8110adc0:	00800044 	movi	r2,1
8110adc4:	e0bff815 	stw	r2,-32(fp)
                    }
                }

                if ( bFinished128 == FALSE ) {
8110adc8:	e0bff917 	ldw	r2,-28(fp)
8110adcc:	10005b1e 	bne	r2,zero,8110af3c <vTimeoutCheckerTask+0x520>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110add0:	d0a05717 	ldw	r2,-32420(gp)
8110add4:	e0fffac4 	addi	r3,fp,-21
8110add8:	180d883a 	mov	r6,r3
8110addc:	01400084 	movi	r5,2
8110ade0:	1009883a 	mov	r4,r2
8110ade4:	112c3fc0 	call	8112c3fc <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110ade8:	e0bffac3 	ldbu	r2,-21(fp)
8110adec:	10803fcc 	andi	r2,r2,255
8110adf0:	1000521e 	bne	r2,zero,8110af3c <vTimeoutCheckerTask+0x520>
                        /*Search for the id*/
                        k = 0;
8110adf4:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_128; i++)
8110adf8:	e03ffa45 	stb	zero,-23(fp)
8110adfc:	00004706 	br	8110af1c <vTimeoutCheckerTask+0x500>
                        {
                            if ( xBuffer128[i].usiId != 0 ) {
8110ae00:	e0fffa43 	ldbu	r3,-23(fp)
8110ae04:	00a04574 	movhi	r2,33045
8110ae08:	10b34b04 	addi	r2,r2,-13012
8110ae0c:	18c021a4 	muli	r3,r3,134
8110ae10:	10c5883a 	add	r2,r2,r3
8110ae14:	10802004 	addi	r2,r2,128
8110ae18:	1080000b 	ldhu	r2,0(r2)
8110ae1c:	10bfffcc 	andi	r2,r2,65535
8110ae20:	10003b26 	beq	r2,zero,8110af10 <vTimeoutCheckerTask+0x4f4>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer128[i].ucNofRetries < 1 ) {
8110ae24:	e0fffa43 	ldbu	r3,-23(fp)
8110ae28:	00a04574 	movhi	r2,33045
8110ae2c:	10b34b04 	addi	r2,r2,-13012
8110ae30:	18c021a4 	muli	r3,r3,134
8110ae34:	10c5883a 	add	r2,r2,r3
8110ae38:	10802104 	addi	r2,r2,132
8110ae3c:	10800003 	ldbu	r2,0(r2)
8110ae40:	10803fcc 	andi	r2,r2,255
8110ae44:	1000101e 	bne	r2,zero,8110ae88 <vTimeoutCheckerTask+0x46c>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer128[i].usiId = 0;
8110ae48:	e0fffa43 	ldbu	r3,-23(fp)
8110ae4c:	00a04574 	movhi	r2,33045
8110ae50:	10b34b04 	addi	r2,r2,-13012
8110ae54:	18c021a4 	muli	r3,r3,134
8110ae58:	10c5883a 	add	r2,r2,r3
8110ae5c:	10802004 	addi	r2,r2,128
8110ae60:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer128);
8110ae64:	d0a04e17 	ldw	r2,-32456(gp)
8110ae68:	1009883a 	mov	r4,r2
8110ae6c:	112e7900 	call	8112e790 <OSSemPost>
8110ae70:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110ae74:	e0bffac3 	ldbu	r2,-21(fp)
8110ae78:	10803fcc 	andi	r2,r2,255
8110ae7c:	10002426 	beq	r2,zero,8110af10 <vTimeoutCheckerTask+0x4f4>
                                        vFailSetCountSemaphorexBuffer128();
8110ae80:	110dd940 	call	8110dd94 <vFailSetCountSemaphorexBuffer128>
8110ae84:	00002206 	br	8110af10 <vTimeoutCheckerTask+0x4f4>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer128[i].usiTimeOut--;
8110ae88:	e0fffa43 	ldbu	r3,-23(fp)
8110ae8c:	00a04574 	movhi	r2,33045
8110ae90:	10b34b04 	addi	r2,r2,-13012
8110ae94:	190021a4 	muli	r4,r3,134
8110ae98:	1105883a 	add	r2,r2,r4
8110ae9c:	10802084 	addi	r2,r2,130
8110aea0:	1080000b 	ldhu	r2,0(r2)
8110aea4:	10bfffc4 	addi	r2,r2,-1
8110aea8:	1009883a 	mov	r4,r2
8110aeac:	00a04574 	movhi	r2,33045
8110aeb0:	10b34b04 	addi	r2,r2,-13012
8110aeb4:	18c021a4 	muli	r3,r3,134
8110aeb8:	10c5883a 	add	r2,r2,r3
8110aebc:	10802084 	addi	r2,r2,130
8110aec0:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer128[i].usiTimeOut < 1 ) {
8110aec4:	e0fffa43 	ldbu	r3,-23(fp)
8110aec8:	00a04574 	movhi	r2,33045
8110aecc:	10b34b04 	addi	r2,r2,-13012
8110aed0:	18c021a4 	muli	r3,r3,134
8110aed4:	10c5883a 	add	r2,r2,r3
8110aed8:	10802084 	addi	r2,r2,130
8110aedc:	1080000b 	ldhu	r2,0(r2)
8110aee0:	10bfffcc 	andi	r2,r2,65535
8110aee4:	10a0001c 	xori	r2,r2,32768
8110aee8:	10a00004 	addi	r2,r2,-32768
8110aeec:	00800816 	blt	zero,r2,8110af10 <vTimeoutCheckerTask+0x4f4>
                                        /* Schedule to retransmit */
                                        ucRetransB128[k] = i;
8110aef0:	e0bffa83 	ldbu	r2,-22(fp)
8110aef4:	e0fffe04 	addi	r3,fp,-8
8110aef8:	1885883a 	add	r2,r3,r2
8110aefc:	e0fffa43 	ldbu	r3,-23(fp)
8110af00:	10c00005 	stb	r3,0(r2)
                                        k++;
8110af04:	e0bffa83 	ldbu	r2,-22(fp)
8110af08:	10800044 	addi	r2,r2,1
8110af0c:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_128; i++)
8110af10:	e0bffa43 	ldbu	r2,-23(fp)
8110af14:	10800044 	addi	r2,r2,1
8110af18:	e0bffa45 	stb	r2,-23(fp)
8110af1c:	e0bffa43 	ldbu	r2,-23(fp)
8110af20:	108000b0 	cmpltui	r2,r2,2
8110af24:	103fb61e 	bne	r2,zero,8110ae00 <__reset+0xfb0eae00>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer32*/
8110af28:	d0a05717 	ldw	r2,-32420(gp)
8110af2c:	1009883a 	mov	r4,r2
8110af30:	112c9a00 	call	8112c9a0 <OSMutexPost>
                        bFinished128 = TRUE;
8110af34:	00800044 	movi	r2,1
8110af38:	e0bff915 	stw	r2,-28(fp)
                    }
                }
                ucCountRetries++;
8110af3c:	e0bffa03 	ldbu	r2,-24(fp)
8110af40:	10800044 	addi	r2,r2,1
8110af44:	e0bffa05 	stb	r2,-24(fp)
            bFinished64=FALSE;
            bFinished128=FALSE;
            ucCountRetries = 0;

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
8110af48:	e0bffa03 	ldbu	r2,-24(fp)
8110af4c:	108001a8 	cmpgeui	r2,r2,6
8110af50:	1000061e 	bne	r2,zero,8110af6c <vTimeoutCheckerTask+0x550>
8110af54:	e0bff717 	ldw	r2,-36(fp)
8110af58:	103ee126 	beq	r2,zero,8110aae0 <__reset+0xfb0eaae0>
8110af5c:	e0bff817 	ldw	r2,-32(fp)
8110af60:	103edf26 	beq	r2,zero,8110aae0 <__reset+0xfb0eaae0>
8110af64:	e0bff917 	ldw	r2,-28(fp)
8110af68:	103edd26 	beq	r2,zero,8110aae0 <__reset+0xfb0eaae0>
                }
                ucCountRetries++;
            }

            /*  Check if could not check some of the (re)transmission buffer*/
            if ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) {
8110af6c:	e0bff717 	ldw	r2,-36(fp)
8110af70:	10000426 	beq	r2,zero,8110af84 <vTimeoutCheckerTask+0x568>
8110af74:	e0bff817 	ldw	r2,-32(fp)
8110af78:	10000226 	beq	r2,zero,8110af84 <vTimeoutCheckerTask+0x568>
8110af7c:	e0bff917 	ldw	r2,-28(fp)
8110af80:	1000011e 	bne	r2,zero,8110af88 <vTimeoutCheckerTask+0x56c>
                /*  Could not check all (re)transmission buffer, only show message for now. There's no hard impact to thesystem
                    but we need to know that is occourring*/
                vCouldNotCheckBufferTimeOutFunction();
8110af84:	110e2d40 	call	8110e2d4 <vCouldNotCheckBufferTimeOutFunction>
            /*  Retransmit could slow down the system in the worst case, because need to get more than one mutex at same time
                this also could impact in various task that need the mutex also, as this operation may be rare
                before try to get all mutexes, will check if there is anything in the scheduler buffers (ucRetransB32,ucRetransB64,ucRetransB128). */
                
            /*  Most part of the time this will be false, and many processing and kernell resources will be saved with this verification*/
            if ( (ucRetransB32[0] != 255) || (ucRetransB64[0] != 255) || (ucRetransB128[0] != 255) ) {
8110af88:	e0bffb03 	ldbu	r2,-20(fp)
8110af8c:	10803fcc 	andi	r2,r2,255
8110af90:	10803fd8 	cmpnei	r2,r2,255
8110af94:	1000081e 	bne	r2,zero,8110afb8 <vTimeoutCheckerTask+0x59c>
8110af98:	e0bffd03 	ldbu	r2,-12(fp)
8110af9c:	10803fcc 	andi	r2,r2,255
8110afa0:	10803fd8 	cmpnei	r2,r2,255
8110afa4:	1000041e 	bne	r2,zero,8110afb8 <vTimeoutCheckerTask+0x59c>
8110afa8:	e0bffe03 	ldbu	r2,-8(fp)
8110afac:	10803fcc 	andi	r2,r2,255
8110afb0:	10803fe0 	cmpeqi	r2,r2,255
8110afb4:	103ead1e 	bne	r2,zero,8110aa6c <__reset+0xfb0eaa6c>
                /*  This operation will try to use the UART TX buffer, so after get the mutex it will remain for almost 3 or 4 ticks in the worst case.
                    In order to avoid that all the system lost the access to the communication for more time, and to minimize the priority inversion
                    if we can't get the mutex for the buffer32, buffer 64 or buffer128, we continue and in the next cycle of checkout it will try to re-send finaly. */                

                /*  Sleep for 50 ticks (50 milli) in the worst case*/
                OSMutexPend(xTxUARTMutex, 50, &error_code); /* Wait 50 ticks = 50 ms */
8110afb8:	d0a05b17 	ldw	r2,-32404(gp)
8110afbc:	e0fffac4 	addi	r3,fp,-21
8110afc0:	180d883a 	mov	r6,r3
8110afc4:	01400c84 	movi	r5,50
8110afc8:	1009883a 	mov	r4,r2
8110afcc:	112c3fc0 	call	8112c3fc <OSMutexPend>
                if ( error_code == OS_NO_ERR ) {
8110afd0:	e0bffac3 	ldbu	r2,-21(fp)
8110afd4:	10803fcc 	andi	r2,r2,255
8110afd8:	1000c41e 	bne	r2,zero,8110b2ec <vTimeoutCheckerTask+0x8d0>


                    if ( ucRetransB32[0] != 255 ) {
8110afdc:	e0bffb03 	ldbu	r2,-20(fp)
8110afe0:	10803fcc 	andi	r2,r2,255
8110afe4:	10803fe0 	cmpeqi	r2,r2,255
8110afe8:	10003c1e 	bne	r2,zero,8110b0dc <vTimeoutCheckerTask+0x6c0>
                        OSMutexPend(xMutexBuffer32, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110afec:	d0a05517 	ldw	r2,-32428(gp)
8110aff0:	e0fffac4 	addi	r3,fp,-21
8110aff4:	180d883a 	mov	r6,r3
8110aff8:	01400044 	movi	r5,1
8110affc:	1009883a 	mov	r4,r2
8110b000:	112c3fc0 	call	8112c3fc <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110b004:	e0bffac3 	ldbu	r2,-21(fp)
8110b008:	10803fcc 	andi	r2,r2,255
8110b00c:	1000321e 	bne	r2,zero,8110b0d8 <vTimeoutCheckerTask+0x6bc>
                            k = 0;
8110b010:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB32[k];
8110b014:	e0bffa83 	ldbu	r2,-22(fp)
8110b018:	e0fffb04 	addi	r3,fp,-20
8110b01c:	1885883a 	add	r2,r3,r2
8110b020:	10800003 	ldbu	r2,0(r2)
8110b024:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer32[i].ucNofRetries--;
8110b028:	e0fffa43 	ldbu	r3,-23(fp)
8110b02c:	00a04534 	movhi	r2,33044
8110b030:	109aff04 	addi	r2,r2,27644
8110b034:	190009a4 	muli	r4,r3,38
8110b038:	1105883a 	add	r2,r2,r4
8110b03c:	10800904 	addi	r2,r2,36
8110b040:	10800003 	ldbu	r2,0(r2)
8110b044:	10bfffc4 	addi	r2,r2,-1
8110b048:	1009883a 	mov	r4,r2
8110b04c:	00a04534 	movhi	r2,33044
8110b050:	109aff04 	addi	r2,r2,27644
8110b054:	18c009a4 	muli	r3,r3,38
8110b058:	10c5883a 	add	r2,r2,r3
8110b05c:	10800904 	addi	r2,r2,36
8110b060:	11000005 	stb	r4,0(r2)
                                xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110b064:	e0fffa43 	ldbu	r3,-23(fp)
8110b068:	00a04534 	movhi	r2,33044
8110b06c:	109aff04 	addi	r2,r2,27644
8110b070:	18c009a4 	muli	r3,r3,38
8110b074:	10c5883a 	add	r2,r2,r3
8110b078:	10800884 	addi	r2,r2,34
8110b07c:	00c00104 	movi	r3,4
8110b080:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer32[i].buffer);                                
8110b084:	e0bffa43 	ldbu	r2,-23(fp)
8110b088:	10c009a4 	muli	r3,r2,38
8110b08c:	00a04534 	movhi	r2,33044
8110b090:	109aff04 	addi	r2,r2,27644
8110b094:	1885883a 	add	r2,r3,r2
8110b098:	1009883a 	mov	r4,r2
8110b09c:	11124e80 	call	811124e8 <puts>
                                k++;
8110b0a0:	e0bffa83 	ldbu	r2,-22(fp)
8110b0a4:	10800044 	addi	r2,r2,1
8110b0a8:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB32[k] != 255 );                       
8110b0ac:	e0bffa83 	ldbu	r2,-22(fp)
8110b0b0:	e0fffb04 	addi	r3,fp,-20
8110b0b4:	1885883a 	add	r2,r3,r2
8110b0b8:	10800003 	ldbu	r2,0(r2)
8110b0bc:	10803fcc 	andi	r2,r2,255
8110b0c0:	10803fd8 	cmpnei	r2,r2,255
8110b0c4:	103fd31e 	bne	r2,zero,8110b014 <__reset+0xfb0eb014>

                            OSMutexPost(xMutexBuffer32);
8110b0c8:	d0a05517 	ldw	r2,-32428(gp)
8110b0cc:	1009883a 	mov	r4,r2
8110b0d0:	112c9a00 	call	8112c9a0 <OSMutexPost>
8110b0d4:	00000106 	br	8110b0dc <vTimeoutCheckerTask+0x6c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB32TimeoutTask();
8110b0d8:	110e4a40 	call	8110e4a4 <vCouldNotRetransmitB32TimeoutTask>
                        }
                    }

                    if ( ucRetransB64[0] != 255 ) {
8110b0dc:	e0bffd03 	ldbu	r2,-12(fp)
8110b0e0:	10803fcc 	andi	r2,r2,255
8110b0e4:	10803fe0 	cmpeqi	r2,r2,255
8110b0e8:	10003c1e 	bne	r2,zero,8110b1dc <vTimeoutCheckerTask+0x7c0>
                        OSMutexPend(xMutexBuffer64, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110b0ec:	d0a05917 	ldw	r2,-32412(gp)
8110b0f0:	e0fffac4 	addi	r3,fp,-21
8110b0f4:	180d883a 	mov	r6,r3
8110b0f8:	01400044 	movi	r5,1
8110b0fc:	1009883a 	mov	r4,r2
8110b100:	112c3fc0 	call	8112c3fc <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110b104:	e0bffac3 	ldbu	r2,-21(fp)
8110b108:	10803fcc 	andi	r2,r2,255
8110b10c:	1000321e 	bne	r2,zero,8110b1d8 <vTimeoutCheckerTask+0x7bc>
                            k = 0;
8110b110:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB64[k];
8110b114:	e0bffa83 	ldbu	r2,-22(fp)
8110b118:	e0fffd04 	addi	r3,fp,-12
8110b11c:	1885883a 	add	r2,r3,r2
8110b120:	10800003 	ldbu	r2,0(r2)
8110b124:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer64[i].ucNofRetries--;
8110b128:	e0fffa43 	ldbu	r3,-23(fp)
8110b12c:	00a04534 	movhi	r2,33044
8110b130:	1089a204 	addi	r2,r2,9864
8110b134:	190011a4 	muli	r4,r3,70
8110b138:	1105883a 	add	r2,r2,r4
8110b13c:	10801104 	addi	r2,r2,68
8110b140:	10800003 	ldbu	r2,0(r2)
8110b144:	10bfffc4 	addi	r2,r2,-1
8110b148:	1009883a 	mov	r4,r2
8110b14c:	00a04534 	movhi	r2,33044
8110b150:	1089a204 	addi	r2,r2,9864
8110b154:	18c011a4 	muli	r3,r3,70
8110b158:	10c5883a 	add	r2,r2,r3
8110b15c:	10801104 	addi	r2,r2,68
8110b160:	11000005 	stb	r4,0(r2)
                                xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
8110b164:	e0fffa43 	ldbu	r3,-23(fp)
8110b168:	00a04534 	movhi	r2,33044
8110b16c:	1089a204 	addi	r2,r2,9864
8110b170:	18c011a4 	muli	r3,r3,70
8110b174:	10c5883a 	add	r2,r2,r3
8110b178:	10801084 	addi	r2,r2,66
8110b17c:	00c00104 	movi	r3,4
8110b180:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer64[i].buffer);                                
8110b184:	e0bffa43 	ldbu	r2,-23(fp)
8110b188:	10c011a4 	muli	r3,r2,70
8110b18c:	00a04534 	movhi	r2,33044
8110b190:	1089a204 	addi	r2,r2,9864
8110b194:	1885883a 	add	r2,r3,r2
8110b198:	1009883a 	mov	r4,r2
8110b19c:	11124e80 	call	811124e8 <puts>
                                k++;
8110b1a0:	e0bffa83 	ldbu	r2,-22(fp)
8110b1a4:	10800044 	addi	r2,r2,1
8110b1a8:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB64[k] != 255 );
8110b1ac:	e0bffa83 	ldbu	r2,-22(fp)
8110b1b0:	e0fffd04 	addi	r3,fp,-12
8110b1b4:	1885883a 	add	r2,r3,r2
8110b1b8:	10800003 	ldbu	r2,0(r2)
8110b1bc:	10803fcc 	andi	r2,r2,255
8110b1c0:	10803fd8 	cmpnei	r2,r2,255
8110b1c4:	103fd31e 	bne	r2,zero,8110b114 <__reset+0xfb0eb114>

                            OSMutexPost(xMutexBuffer64);
8110b1c8:	d0a05917 	ldw	r2,-32412(gp)
8110b1cc:	1009883a 	mov	r4,r2
8110b1d0:	112c9a00 	call	8112c9a0 <OSMutexPost>
8110b1d4:	00000106 	br	8110b1dc <vTimeoutCheckerTask+0x7c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB64TimeoutTask();
8110b1d8:	110e50c0 	call	8110e50c <vCouldNotRetransmitB64TimeoutTask>
                        }    
                    }

                    if ( ucRetransB128[0] != 255 ) {
8110b1dc:	e0bffe03 	ldbu	r2,-8(fp)
8110b1e0:	10803fcc 	andi	r2,r2,255
8110b1e4:	10803fe0 	cmpeqi	r2,r2,255
8110b1e8:	10003c1e 	bne	r2,zero,8110b2dc <vTimeoutCheckerTask+0x8c0>
                        OSMutexPend(xMutexBuffer128, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110b1ec:	d0a05717 	ldw	r2,-32420(gp)
8110b1f0:	e0fffac4 	addi	r3,fp,-21
8110b1f4:	180d883a 	mov	r6,r3
8110b1f8:	01400044 	movi	r5,1
8110b1fc:	1009883a 	mov	r4,r2
8110b200:	112c3fc0 	call	8112c3fc <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110b204:	e0bffac3 	ldbu	r2,-21(fp)
8110b208:	10803fcc 	andi	r2,r2,255
8110b20c:	1000321e 	bne	r2,zero,8110b2d8 <vTimeoutCheckerTask+0x8bc>
                            k = 0;
8110b210:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB128[k];
8110b214:	e0bffa83 	ldbu	r2,-22(fp)
8110b218:	e0fffe04 	addi	r3,fp,-8
8110b21c:	1885883a 	add	r2,r3,r2
8110b220:	10800003 	ldbu	r2,0(r2)
8110b224:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer128[i].ucNofRetries--;
8110b228:	e0fffa43 	ldbu	r3,-23(fp)
8110b22c:	00a04574 	movhi	r2,33045
8110b230:	10b34b04 	addi	r2,r2,-13012
8110b234:	190021a4 	muli	r4,r3,134
8110b238:	1105883a 	add	r2,r2,r4
8110b23c:	10802104 	addi	r2,r2,132
8110b240:	10800003 	ldbu	r2,0(r2)
8110b244:	10bfffc4 	addi	r2,r2,-1
8110b248:	1009883a 	mov	r4,r2
8110b24c:	00a04574 	movhi	r2,33045
8110b250:	10b34b04 	addi	r2,r2,-13012
8110b254:	18c021a4 	muli	r3,r3,134
8110b258:	10c5883a 	add	r2,r2,r3
8110b25c:	10802104 	addi	r2,r2,132
8110b260:	11000005 	stb	r4,0(r2)
                                xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110b264:	e0fffa43 	ldbu	r3,-23(fp)
8110b268:	00a04574 	movhi	r2,33045
8110b26c:	10b34b04 	addi	r2,r2,-13012
8110b270:	18c021a4 	muli	r3,r3,134
8110b274:	10c5883a 	add	r2,r2,r3
8110b278:	10802084 	addi	r2,r2,130
8110b27c:	00c00104 	movi	r3,4
8110b280:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer128[i].buffer);                                
8110b284:	e0bffa43 	ldbu	r2,-23(fp)
8110b288:	10c021a4 	muli	r3,r2,134
8110b28c:	00a04574 	movhi	r2,33045
8110b290:	10b34b04 	addi	r2,r2,-13012
8110b294:	1885883a 	add	r2,r3,r2
8110b298:	1009883a 	mov	r4,r2
8110b29c:	11124e80 	call	811124e8 <puts>
                                k++;
8110b2a0:	e0bffa83 	ldbu	r2,-22(fp)
8110b2a4:	10800044 	addi	r2,r2,1
8110b2a8:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB128[k] != 255 );
8110b2ac:	e0bffa83 	ldbu	r2,-22(fp)
8110b2b0:	e0fffe04 	addi	r3,fp,-8
8110b2b4:	1885883a 	add	r2,r3,r2
8110b2b8:	10800003 	ldbu	r2,0(r2)
8110b2bc:	10803fcc 	andi	r2,r2,255
8110b2c0:	10803fd8 	cmpnei	r2,r2,255
8110b2c4:	103fd31e 	bne	r2,zero,8110b214 <__reset+0xfb0eb214>

                            OSMutexPost(xMutexBuffer128);
8110b2c8:	d0a05717 	ldw	r2,-32420(gp)
8110b2cc:	1009883a 	mov	r4,r2
8110b2d0:	112c9a00 	call	8112c9a0 <OSMutexPost>
8110b2d4:	00000106 	br	8110b2dc <vTimeoutCheckerTask+0x8c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB128TimeoutTask();
8110b2d8:	110e5740 	call	8110e574 <vCouldNotRetransmitB128TimeoutTask>
                        }
                    }                    
                    OSMutexPost(xTxUARTMutex);
8110b2dc:	d0a05b17 	ldw	r2,-32404(gp)
8110b2e0:	1009883a 	mov	r4,r2
8110b2e4:	112c9a00 	call	8112c9a0 <OSMutexPost>
8110b2e8:	003de006 	br	8110aa6c <__reset+0xfb0eaa6c>
                } else {
                    /*  Couldn't get access to the UART tx buffer, there is no big impact to the system. So next cycle it may be transmited.
                        This is not a reason to exit the execution of all Simucam.*/
                    vFailCouldNotRetransmitTimeoutTask();
8110b2ec:	110e43c0 	call	8110e43c <vFailCouldNotRetransmitTimeoutTask>
8110b2f0:	003dde06 	br	8110aa6c <__reset+0xfb0eaa6c>
                }
            }

        } else {
            /* Should not get here, is a blocking semaphore for sync.*/
            vFailGetBlockingSemTimeoutTask();
8110b2f4:	110e36c0 	call	8110e36c <vFailGetBlockingSemTimeoutTask>
        }
    }
8110b2f8:	003ddc06 	br	8110aa6c <__reset+0xfb0eaa6c>

8110b2fc <bResourcesInitRTOS>:
 */
TSimucam_MEB xSimMebStruct;

/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void )
{
8110b2fc:	defff904 	addi	sp,sp,-28
8110b300:	de00012e 	bgeu	sp,et,8110b308 <bResourcesInitRTOS+0xc>
8110b304:	003b68fa 	trap	3
8110b308:	dfc00615 	stw	ra,24(sp)
8110b30c:	df000515 	stw	fp,20(sp)
8110b310:	df000504 	addi	fp,sp,20
	bool bSuccess = TRUE;
8110b314:	00800044 	movi	r2,1
8110b318:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
8110b31c:	0009883a 	mov	r4,zero
8110b320:	112e0e00 	call	8112e0e0 <OSSemCreate>
8110b324:	d0a04b15 	stw	r2,-32468(gp)
	if (!xSemCommInit) {
8110b328:	d0a04b17 	ldw	r2,-32468(gp)
8110b32c:	1000021e 	bne	r2,zero,8110b338 <bResourcesInitRTOS+0x3c>
		vFailCreateSemaphoreResources();
8110b330:	110d75c0 	call	8110d75c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b334:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
8110b338:	e0bfff04 	addi	r2,fp,-4
8110b33c:	100b883a 	mov	r5,r2
8110b340:	010000c4 	movi	r4,3
8110b344:	112bf280 	call	8112bf28 <OSMutexCreate>
8110b348:	d0a05b15 	stw	r2,-32404(gp)
	if ( err != OS_ERR_NONE ) {
8110b34c:	e0bfff03 	ldbu	r2,-4(fp)
8110b350:	10803fcc 	andi	r2,r2,255
8110b354:	10000526 	beq	r2,zero,8110b36c <bResourcesInitRTOS+0x70>
		vFailCreateMutexSResources(err);
8110b358:	e0bfff03 	ldbu	r2,-4(fp)
8110b35c:	10803fcc 	andi	r2,r2,255
8110b360:	1009883a 	mov	r4,r2
8110b364:	110d6fc0 	call	8110d6fc <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b368:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
8110b36c:	e0bfff04 	addi	r2,fp,-4
8110b370:	100b883a 	mov	r5,r2
8110b374:	01000184 	movi	r4,6
8110b378:	112bf280 	call	8112bf28 <OSMutexCreate>
8110b37c:	d0a05715 	stw	r2,-32420(gp)
	if ( err != OS_ERR_NONE ) {
8110b380:	e0bfff03 	ldbu	r2,-4(fp)
8110b384:	10803fcc 	andi	r2,r2,255
8110b388:	10000526 	beq	r2,zero,8110b3a0 <bResourcesInitRTOS+0xa4>
		vFailCreateMutexSResources(err);
8110b38c:	e0bfff03 	ldbu	r2,-4(fp)
8110b390:	10803fcc 	andi	r2,r2,255
8110b394:	1009883a 	mov	r4,r2
8110b398:	110d6fc0 	call	8110d6fc <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b39c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
8110b3a0:	e0bfff04 	addi	r2,fp,-4
8110b3a4:	100b883a 	mov	r5,r2
8110b3a8:	010001c4 	movi	r4,7
8110b3ac:	112bf280 	call	8112bf28 <OSMutexCreate>
8110b3b0:	d0a05915 	stw	r2,-32412(gp)
	if ( err != OS_ERR_NONE ) {
8110b3b4:	e0bfff03 	ldbu	r2,-4(fp)
8110b3b8:	10803fcc 	andi	r2,r2,255
8110b3bc:	10000526 	beq	r2,zero,8110b3d4 <bResourcesInitRTOS+0xd8>
		vFailCreateMutexSResources(err);
8110b3c0:	e0bfff03 	ldbu	r2,-4(fp)
8110b3c4:	10803fcc 	andi	r2,r2,255
8110b3c8:	1009883a 	mov	r4,r2
8110b3cc:	110d6fc0 	call	8110d6fc <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b3d0:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
8110b3d4:	e0bfff04 	addi	r2,fp,-4
8110b3d8:	100b883a 	mov	r5,r2
8110b3dc:	01000204 	movi	r4,8
8110b3e0:	112bf280 	call	8112bf28 <OSMutexCreate>
8110b3e4:	d0a05515 	stw	r2,-32428(gp)
	if ( err != OS_ERR_NONE ) {
8110b3e8:	e0bfff03 	ldbu	r2,-4(fp)
8110b3ec:	10803fcc 	andi	r2,r2,255
8110b3f0:	10000526 	beq	r2,zero,8110b408 <bResourcesInitRTOS+0x10c>
		vFailCreateMutexSResources(err);
8110b3f4:	e0bfff03 	ldbu	r2,-4(fp)
8110b3f8:	10803fcc 	andi	r2,r2,255
8110b3fc:	1009883a 	mov	r4,r2
8110b400:	110d6fc0 	call	8110d6fc <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b404:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	xSemCountBuffer128 = OSSemCreate(N_128);
8110b408:	01000084 	movi	r4,2
8110b40c:	112e0e00 	call	8112e0e0 <OSSemCreate>
8110b410:	d0a04e15 	stw	r2,-32456(gp)
	if (!xSemCountBuffer128) {
8110b414:	d0a04e17 	ldw	r2,-32456(gp)
8110b418:	1000021e 	bne	r2,zero,8110b424 <bResourcesInitRTOS+0x128>
		vFailCreateSemaphoreResources();
8110b41c:	110d75c0 	call	8110d75c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b420:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	xSemCountBuffer64 = OSSemCreate(N_64);
8110b424:	01000104 	movi	r4,4
8110b428:	112e0e00 	call	8112e0e0 <OSSemCreate>
8110b42c:	d0a04a15 	stw	r2,-32472(gp)
	if (!xSemCountBuffer64) {
8110b430:	d0a04a17 	ldw	r2,-32472(gp)
8110b434:	1000021e 	bne	r2,zero,8110b440 <bResourcesInitRTOS+0x144>
		vFailCreateSemaphoreResources();
8110b438:	110d75c0 	call	8110d75c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b43c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	xSemCountBuffer32 = OSSemCreate(N_32);
8110b440:	01000204 	movi	r4,8
8110b444:	112e0e00 	call	8112e0e0 <OSSemCreate>
8110b448:	d0a05815 	stw	r2,-32416(gp)
	if (!xSemCountBuffer32) {
8110b44c:	d0a05817 	ldw	r2,-32416(gp)
8110b450:	1000021e 	bne	r2,zero,8110b45c <bResourcesInitRTOS+0x160>
		vFailCreateSemaphoreResources();
8110b454:	110d75c0 	call	8110d75c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b458:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
8110b45c:	e0bfff04 	addi	r2,fp,-4
8110b460:	100b883a 	mov	r5,r2
8110b464:	01000144 	movi	r4,5
8110b468:	112bf280 	call	8112bf28 <OSMutexCreate>
8110b46c:	d0a05015 	stw	r2,-32448(gp)
	if ( err != OS_ERR_NONE ) {
8110b470:	e0bfff03 	ldbu	r2,-4(fp)
8110b474:	10803fcc 	andi	r2,r2,255
8110b478:	10000526 	beq	r2,zero,8110b490 <bResourcesInitRTOS+0x194>
		vFailCreateMutexSResources(err);
8110b47c:	e0bfff03 	ldbu	r2,-4(fp)
8110b480:	10803fcc 	andi	r2,r2,255
8110b484:	1009883a 	mov	r4,r2
8110b488:	110d6fc0 	call	8110d6fc <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b48c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
8110b490:	e0bfff04 	addi	r2,fp,-4
8110b494:	100b883a 	mov	r5,r2
8110b498:	01000244 	movi	r4,9
8110b49c:	112bf280 	call	8112bf28 <OSMutexCreate>
8110b4a0:	d0a05415 	stw	r2,-32432(gp)
	if ( err != OS_ERR_NONE ) {
8110b4a4:	e0bfff03 	ldbu	r2,-4(fp)
8110b4a8:	10803fcc 	andi	r2,r2,255
8110b4ac:	10000526 	beq	r2,zero,8110b4c4 <bResourcesInitRTOS+0x1c8>
		vFailCreateMutexSResources(err);
8110b4b0:	e0bfff03 	ldbu	r2,-4(fp)
8110b4b4:	10803fcc 	andi	r2,r2,255
8110b4b8:	1009883a 	mov	r4,r2
8110b4bc:	110d6fc0 	call	8110d6fc <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b4c0:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
8110b4c4:	0009883a 	mov	r4,zero
8110b4c8:	112e0e00 	call	8112e0e0 <OSSemCreate>
8110b4cc:	d0a05115 	stw	r2,-32444(gp)
	if (!xSemCountReceivedACK) {
8110b4d0:	d0a05117 	ldw	r2,-32444(gp)
8110b4d4:	1000021e 	bne	r2,zero,8110b4e0 <bResourcesInitRTOS+0x1e4>
		vFailCreateSemaphoreResources();
8110b4d8:	110d75c0 	call	8110d75c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b4dc:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
8110b4e0:	0009883a 	mov	r4,zero
8110b4e4:	112e0e00 	call	8112e0e0 <OSSemCreate>
8110b4e8:	d0a04f15 	stw	r2,-32452(gp)
	if (!xSemCountPreParsed) {
8110b4ec:	d0a04f17 	ldw	r2,-32452(gp)
8110b4f0:	1000021e 	bne	r2,zero,8110b4fc <bResourcesInitRTOS+0x200>
		vFailCreateSemaphoreResources();
8110b4f4:	110d75c0 	call	8110d75c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b4f8:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/
	xSemCountSenderACK = OSSemCreate(0);
8110b4fc:	0009883a 	mov	r4,zero
8110b500:	112e0e00 	call	8112e0e0 <OSSemCreate>
8110b504:	d0a04c15 	stw	r2,-32464(gp)
	if (!xSemCountSenderACK) {
8110b508:	d0a04c17 	ldw	r2,-32464(gp)
8110b50c:	1000021e 	bne	r2,zero,8110b518 <bResourcesInitRTOS+0x21c>
		vFailCreateSemaphoreResources();
8110b510:	110d75c0 	call	8110d75c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b514:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
8110b518:	e0bfff04 	addi	r2,fp,-4
8110b51c:	100b883a 	mov	r5,r2
8110b520:	01000104 	movi	r4,4
8110b524:	112bf280 	call	8112bf28 <OSMutexCreate>
8110b528:	d0a05a15 	stw	r2,-32408(gp)
	if ( err != OS_ERR_NONE ) {
8110b52c:	e0bfff03 	ldbu	r2,-4(fp)
8110b530:	10803fcc 	andi	r2,r2,255
8110b534:	10000526 	beq	r2,zero,8110b54c <bResourcesInitRTOS+0x250>
		vFailCreateMutexSResources(err);
8110b538:	e0bfff03 	ldbu	r2,-4(fp)
8110b53c:	10803fcc 	andi	r2,r2,255
8110b540:	1009883a 	mov	r4,r2
8110b544:	110d6fc0 	call	8110d6fc <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b548:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemTimeoutChecker = OSSemCreate(0);
8110b54c:	0009883a 	mov	r4,zero
8110b550:	112e0e00 	call	8112e0e0 <OSSemCreate>
8110b554:	d0a05215 	stw	r2,-32440(gp)
	if (!xSemTimeoutChecker) {
8110b558:	d0a05217 	ldw	r2,-32440(gp)
8110b55c:	1000021e 	bne	r2,zero,8110b568 <bResourcesInitRTOS+0x26c>
		vFailCreateSemaphoreResources();
8110b560:	110d75c0 	call	8110d75c <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b564:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Create the timer that will be used to count the timeout for the retransmission*/
	xTimerRetransmission = OSTmrCreate(	(INT32U         )DLY_TIMER,  /* 200 ticks = 200 millisec */
8110b568:	e0bfff04 	addi	r2,fp,-4
8110b56c:	d8800215 	stw	r2,8(sp)
8110b570:	00a04534 	movhi	r2,33044
8110b574:	10b13004 	addi	r2,r2,-15168
8110b578:	d8800115 	stw	r2,4(sp)
8110b57c:	d8000015 	stw	zero,0(sp)
8110b580:	01e04474 	movhi	r7,33041
8110b584:	39f22004 	addi	r7,r7,-14208
8110b588:	01800084 	movi	r6,2
8110b58c:	01400144 	movi	r5,5
8110b590:	01003204 	movi	r4,200
8110b594:	11307ac0 	call	811307ac <OSTmrCreate>
8110b598:	d0a05615 	stw	r2,-32424(gp)
										(INT8U          )OS_TMR_OPT_PERIODIC,
										(OS_TMR_CALLBACK)vTimeoutCheck,
										(void          *)0,
										(INT8U         *)"timer timeout",
										(INT8U         *)&err);	
	if ( err != OS_ERR_NONE ) {
8110b59c:	e0bfff03 	ldbu	r2,-4(fp)
8110b5a0:	10803fcc 	andi	r2,r2,255
8110b5a4:	10000226 	beq	r2,zero,8110b5b0 <bResourcesInitRTOS+0x2b4>
		vFailCreateTimerRetransmisison();
8110b5a8:	110e2880 	call	8110e288 <vFailCreateTimerRetransmisison>
		bSuccess = FALSE;
8110b5ac:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
8110b5b0:	e0bffe17 	ldw	r2,-8(fp)
}
8110b5b4:	e037883a 	mov	sp,fp
8110b5b8:	dfc00117 	ldw	ra,4(sp)
8110b5bc:	df000017 	ldw	fp,0(sp)
8110b5c0:	dec00204 	addi	sp,sp,8
8110b5c4:	f800283a 	ret

8110b5c8 <vVariablesInitialization>:

void vVariablesInitialization ( void ) {
8110b5c8:	deffff04 	addi	sp,sp,-4
8110b5cc:	de00012e 	bgeu	sp,et,8110b5d4 <vVariablesInitialization+0xc>
8110b5d0:	003b68fa 	trap	3
8110b5d4:	df000015 	stw	fp,0(sp)
8110b5d8:	d839883a 	mov	fp,sp
	usiIdCMD = 1;
8110b5dc:	00800044 	movi	r2,1
8110b5e0:	d0a0530d 	sth	r2,-32436(gp)
}
8110b5e4:	0001883a 	nop
8110b5e8:	e037883a 	mov	sp,fp
8110b5ec:	df000017 	ldw	fp,0(sp)
8110b5f0:	dec00104 	addi	sp,sp,4
8110b5f4:	f800283a 	ret

8110b5f8 <main>:



/* Entry point */
int main(void)
{
8110b5f8:	defff704 	addi	sp,sp,-36
8110b5fc:	de00012e 	bgeu	sp,et,8110b604 <main+0xc>
8110b600:	003b68fa 	trap	3
8110b604:	dfc00815 	stw	ra,32(sp)
8110b608:	df000715 	stw	fp,28(sp)
8110b60c:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
8110b610:	e03ffe15 	stw	zero,-8(fp)
	
	/* Clear the RTOS timer */
	OSTimeSet(0);
8110b614:	0009883a 	mov	r4,zero
8110b618:	11307440 	call	81130744 <OSTimeSet>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
8110b61c:	01604534 	movhi	r5,33044
8110b620:	29713404 	addi	r5,r5,-15152
8110b624:	01204534 	movhi	r4,33044
8110b628:	21313504 	addi	r4,r4,-15148
8110b62c:	111107c0 	call	8111107c <fopen>
8110b630:	d0a04d15 	stw	r2,-32460(gp)
	#endif	

	#ifdef DEBUG_ON
		debug(fp, "Main entry point.\n");
8110b634:	d0a04d17 	ldw	r2,-32460(gp)
8110b638:	100f883a 	mov	r7,r2
8110b63c:	01800484 	movi	r6,18
8110b640:	01400044 	movi	r5,1
8110b644:	01204534 	movhi	r4,33044
8110b648:	21313a04 	addi	r4,r4,-15128
8110b64c:	11116b00 	call	811116b0 <fwrite>
	#endif


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
8110b650:	110ed640 	call	8110ed64 <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
8110b654:	110f6300 	call	8110f630 <bTestSimucamCriticalHW>
8110b658:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b65c:	e0bffe17 	ldw	r2,-8(fp)
8110b660:	1000031e 	bne	r2,zero,8110b670 <main+0x78>
		vFailTestCriticasParts();
8110b664:	110d7a80 	call	8110d7a8 <vFailTestCriticasParts>
		return -1;
8110b668:	00bfffc4 	movi	r2,-1
8110b66c:	00003d06 	br	8110b764 <main+0x16c>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
8110b670:	110f47c0 	call	8110f47c <bInitializeSDCard>
8110b674:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b678:	e0bffe17 	ldw	r2,-8(fp)
8110b67c:	1000031e 	bne	r2,zero,8110b68c <main+0x94>
		vFailTestCriticasParts();
8110b680:	110d7a80 	call	8110d7a8 <vFailTestCriticasParts>
		return -1;
8110b684:	00bfffc4 	movi	r2,-1
8110b688:	00003606 	br	8110b764 <main+0x16c>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
8110b68c:	110c8d00 	call	8110c8d0 <vLoadDefaultETHConf>
8110b690:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b694:	e0bffe17 	ldw	r2,-8(fp)
8110b698:	1000091e 	bne	r2,zero,8110b6c0 <main+0xc8>
		/* Default configuration for eth connection loaded */
		#ifdef DEBUG_ON
			debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
8110b69c:	d0a04d17 	ldw	r2,-32460(gp)
8110b6a0:	100f883a 	mov	r7,r2
8110b6a4:	01801644 	movi	r6,89
8110b6a8:	01400044 	movi	r5,1
8110b6ac:	01204534 	movhi	r4,33044
8110b6b0:	21313f04 	addi	r4,r4,-15108
8110b6b4:	11116b00 	call	811116b0 <fwrite>
		#endif
		return -1;
8110b6b8:	00bfffc4 	movi	r2,-1
8110b6bc:	00002906 	br	8110b764 <main+0x16c>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
8110b6c0:	110d25c0 	call	8110d25c <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
8110b6c4:	110b2fc0 	call	8110b2fc <bResourcesInitRTOS>
8110b6c8:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110b6cc:	e0bffe17 	ldw	r2,-8(fp)
8110b6d0:	1000091e 	bne	r2,zero,8110b6f8 <main+0x100>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't allocate resources for RTOS. (exit) \n");
8110b6d4:	d0a04d17 	ldw	r2,-32460(gp)
8110b6d8:	100f883a 	mov	r7,r2
8110b6dc:	01800ac4 	movi	r6,43
8110b6e0:	01400044 	movi	r5,1
8110b6e4:	01204534 	movhi	r4,33044
8110b6e8:	21315604 	addi	r4,r4,-15016
8110b6ec:	11116b00 	call	811116b0 <fwrite>
		return -1;
8110b6f0:	00bfffc4 	movi	r2,-1
8110b6f4:	00001b06 	br	8110b764 <main+0x16c>
	}

	/* Start the structure of control of the Simucam Application, including all FEEs instances */
	vSimucamStructureInit( &xSimMebStruct );
8110b6f8:	01204534 	movhi	r4,33044
8110b6fc:	2111e804 	addi	r4,r4,18336
8110b700:	110ee940 	call	8110ee94 <vSimucamStructureInit>

	/* Creating the initialization task*/
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInitialTask,
8110b704:	00800104 	movi	r2,4
8110b708:	d8800415 	stw	r2,16(sp)
8110b70c:	d8000315 	stw	zero,12(sp)
8110b710:	00820004 	movi	r2,2048
8110b714:	d8800215 	stw	r2,8(sp)
8110b718:	00a04574 	movhi	r2,33045
8110b71c:	10ab4b04 	addi	r2,r2,-21204
8110b720:	d8800115 	stw	r2,4(sp)
8110b724:	00800044 	movi	r2,1
8110b728:	d8800015 	stw	r2,0(sp)
8110b72c:	01c00044 	movi	r7,1
8110b730:	01a04574 	movhi	r6,33045
8110b734:	31b34a04 	addi	r6,r6,-13016
8110b738:	000b883a 	mov	r5,zero
8110b73c:	01204474 	movhi	r4,33041
8110b740:	21230904 	addi	r4,r4,-29660
8110b744:	112f1740 	call	8112f174 <OSTaskCreateExt>
8110b748:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
8110b74c:	e0bfff03 	ldbu	r2,-4(fp)
8110b750:	1000021e 	bne	r2,zero,8110b75c <main+0x164>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
8110b754:	11286f40 	call	811286f4 <OSStart>
8110b758:	00000106 	br	8110b760 <main+0x168>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
8110b75c:	110db940 	call	8110db94 <vFailInitialization>
	}
  
	return 0;
8110b760:	0005883a 	mov	r2,zero
}
8110b764:	e037883a 	mov	sp,fp
8110b768:	dfc00117 	ldw	ra,4(sp)
8110b76c:	df000017 	ldw	fp,0(sp)
8110b770:	dec00204 	addi	sp,sp,8
8110b774:	f800283a 	ret

8110b778 <vCCDLoadDefaultValues>:
 */

#include "ccd.h"


void vCCDLoadDefaultValues( TCcdInfos *ccdDef ) {
8110b778:	defffe04 	addi	sp,sp,-8
8110b77c:	de00012e 	bgeu	sp,et,8110b784 <vCCDLoadDefaultValues+0xc>
8110b780:	003b68fa 	trap	3
8110b784:	df000115 	stw	fp,4(sp)
8110b788:	df000104 	addi	fp,sp,4
8110b78c:	e13fff15 	stw	r4,-4(fp)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadCcdDefsSDCard();

	ccdDef->usiHeight = 4510;
8110b790:	e0bfff17 	ldw	r2,-4(fp)
8110b794:	00c46784 	movi	r3,4510
8110b798:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = 30;
8110b79c:	e0bfff17 	ldw	r2,-4(fp)
8110b7a0:	00c00784 	movi	r3,30
8110b7a4:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = 2255;
8110b7a8:	e0bfff17 	ldw	r2,-4(fp)
8110b7ac:	00c233c4 	movi	r3,2255
8110b7b0:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = 15;
8110b7b4:	e0bfff17 	ldw	r2,-4(fp)
8110b7b8:	00c003c4 	movi	r3,15
8110b7bc:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = 25;
8110b7c0:	e0bfff17 	ldw	r2,-4(fp)
8110b7c4:	00c00644 	movi	r3,25
8110b7c8:	10c0000d 	sth	r3,0(r2)
}
8110b7cc:	0001883a 	nop
8110b7d0:	e037883a 	mov	sp,fp
8110b7d4:	df000017 	ldw	fp,0(sp)
8110b7d8:	dec00104 	addi	sp,sp,4
8110b7dc:	f800283a 	ret

8110b7e0 <vCCDChangeValues>:

/* Only in NFEE_CONFIG of NFEE_STAND_BY */
/* Used to change de values of the CCD definitions from any source */
void vCCDChangeValues( TCcdInfos *ccdDef, unsigned short int usiHeight, unsigned short int usiOLN, unsigned short int usiHalfWidth,
                                unsigned short int usiSOverscanN, unsigned short int usiSPrescanN  ) {
8110b7e0:	defff904 	addi	sp,sp,-28
8110b7e4:	de00012e 	bgeu	sp,et,8110b7ec <vCCDChangeValues+0xc>
8110b7e8:	003b68fa 	trap	3
8110b7ec:	df000615 	stw	fp,24(sp)
8110b7f0:	df000604 	addi	fp,sp,24
8110b7f4:	e13ffa15 	stw	r4,-24(fp)
8110b7f8:	2811883a 	mov	r8,r5
8110b7fc:	300b883a 	mov	r5,r6
8110b800:	3809883a 	mov	r4,r7
8110b804:	e0c00117 	ldw	r3,4(fp)
8110b808:	e0800217 	ldw	r2,8(fp)
8110b80c:	e23ffb0d 	sth	r8,-20(fp)
8110b810:	e17ffc0d 	sth	r5,-16(fp)
8110b814:	e13ffd0d 	sth	r4,-12(fp)
8110b818:	e0fffe0d 	sth	r3,-8(fp)
8110b81c:	e0bfff0d 	sth	r2,-4(fp)

	ccdDef->usiHeight = usiHeight;
8110b820:	e0bffa17 	ldw	r2,-24(fp)
8110b824:	e0fffb0b 	ldhu	r3,-20(fp)
8110b828:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = usiOLN;
8110b82c:	e0bffa17 	ldw	r2,-24(fp)
8110b830:	e0fffc0b 	ldhu	r3,-16(fp)
8110b834:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = usiHalfWidth;
8110b838:	e0bffa17 	ldw	r2,-24(fp)
8110b83c:	e0fffd0b 	ldhu	r3,-12(fp)
8110b840:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = usiSOverscanN;
8110b844:	e0bffa17 	ldw	r2,-24(fp)
8110b848:	e0fffe0b 	ldhu	r3,-8(fp)
8110b84c:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = usiSPrescanN;
8110b850:	e0bffa17 	ldw	r2,-24(fp)
8110b854:	e0ffff0b 	ldhu	r3,-4(fp)
8110b858:	10c0000d 	sth	r3,0(r2)
}
8110b85c:	0001883a 	nop
8110b860:	e037883a 	mov	sp,fp
8110b864:	df000017 	ldw	fp,0(sp)
8110b868:	dec00104 	addi	sp,sp,4
8110b86c:	f800283a 	ret

8110b870 <bSendUART128>:




/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART128 ( char *cBuffer, short int siIdMessage ) {
8110b870:	deffd804 	addi	sp,sp,-160
8110b874:	de00012e 	bgeu	sp,et,8110b87c <bSendUART128+0xc>
8110b878:	003b68fa 	trap	3
8110b87c:	dfc02715 	stw	ra,156(sp)
8110b880:	df002615 	stw	fp,152(sp)
8110b884:	df002604 	addi	fp,sp,152
8110b888:	e13ffe15 	stw	r4,-8(fp)
8110b88c:	2805883a 	mov	r2,r5
8110b890:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110b894:	e03fda05 	stb	zero,-152(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110b898:	e03fda45 	stb	zero,-151(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110b89c:	e03fda85 	stb	zero,-150(fp)
	unsigned char i = 0;
8110b8a0:	e03fdac5 	stb	zero,-149(fp)
	bool bSuccess = FALSE;
8110b8a4:	e03fdb15 	stw	zero,-148(fp)
	char cLocalBuffer128[128];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer128, cBuffer, 128);
8110b8a8:	e0fffe17 	ldw	r3,-8(fp)
8110b8ac:	e0bfdd44 	addi	r2,fp,-139
8110b8b0:	1809883a 	mov	r4,r3
8110b8b4:	00c02004 	movi	r3,128
8110b8b8:	180d883a 	mov	r6,r3
8110b8bc:	200b883a 	mov	r5,r4
8110b8c0:	1009883a 	mov	r4,r2
8110b8c4:	11120c40 	call	811120c4 <memcpy>
	bSuccess = FALSE;
8110b8c8:	e03fdb15 	stw	zero,-148(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110b8cc:	e03fda05 	stb	zero,-152(fp)
	do
	{
		ucCountRetriesSem++;
8110b8d0:	e0bfda03 	ldbu	r2,-152(fp)
8110b8d4:	10800044 	addi	r2,r2,1
8110b8d8:	e0bfda05 	stb	r2,-152(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110b8dc:	d0a04e17 	ldw	r2,-32456(gp)
8110b8e0:	e0ffdc84 	addi	r3,fp,-142
8110b8e4:	180d883a 	mov	r6,r3
8110b8e8:	01401904 	movi	r5,100
8110b8ec:	1009883a 	mov	r4,r2
8110b8f0:	112e4080 	call	8112e408 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110b8f4:	e0bfdc83 	ldbu	r2,-142(fp)
8110b8f8:	10803fcc 	andi	r2,r2,255
8110b8fc:	1000b61e 	bne	r2,zero,8110bbd8 <bSendUART128+0x368>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110b900:	e03fda85 	stb	zero,-150(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110b904:	e0bfda83 	ldbu	r2,-150(fp)
8110b908:	10800044 	addi	r2,r2,1
8110b90c:	e0bfda85 	stb	r2,-150(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110b910:	d0a05b17 	ldw	r2,-32404(gp)
8110b914:	e0ffdd04 	addi	r3,fp,-140
8110b918:	180d883a 	mov	r6,r3
8110b91c:	01400144 	movi	r5,5
8110b920:	1009883a 	mov	r4,r2
8110b924:	112c3fc0 	call	8112c3fc <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110b928:	e0bfdd03 	ldbu	r2,-140(fp)
8110b92c:	10803fcc 	andi	r2,r2,255
8110b930:	1000991e 	bne	r2,zero,8110bb98 <bSendUART128+0x328>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer128);
8110b934:	e0bfdd44 	addi	r2,fp,-139
8110b938:	1009883a 	mov	r4,r2
8110b93c:	11124e80 	call	811124e8 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110b940:	d0a05717 	ldw	r2,-32420(gp)
8110b944:	e0ffdcc4 	addi	r3,fp,-141
8110b948:	180b883a 	mov	r5,r3
8110b94c:	1009883a 	mov	r4,r2
8110b950:	112bd7c0 	call	8112bd7c <OSMutexAccept>
8110b954:	e0bfdc05 	stb	r2,-144(fp)
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
8110b958:	e0bfdcc3 	ldbu	r2,-141(fp)
8110b95c:	10803fcc 	andi	r2,r2,255
8110b960:	10003a1e 	bne	r2,zero,8110ba4c <bSendUART128+0x1dc>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
8110b964:	e03fdac5 	stb	zero,-149(fp)
8110b968:	00003206 	br	8110ba34 <bSendUART128+0x1c4>
						{
							if ( xBuffer128[i].usiId == 0 ) {
8110b96c:	e0ffdac3 	ldbu	r3,-149(fp)
8110b970:	00a04574 	movhi	r2,33045
8110b974:	10b34b04 	addi	r2,r2,-13012
8110b978:	18c021a4 	muli	r3,r3,134
8110b97c:	10c5883a 	add	r2,r2,r3
8110b980:	10802004 	addi	r2,r2,128
8110b984:	1080000b 	ldhu	r2,0(r2)
8110b988:	10bfffcc 	andi	r2,r2,65535
8110b98c:	1000261e 	bne	r2,zero,8110ba28 <bSendUART128+0x1b8>
								/* Found a free place */
								bSuccess = TRUE;
8110b990:	00800044 	movi	r2,1
8110b994:	e0bfdb15 	stw	r2,-148(fp)
								memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
8110b998:	e0bfdac3 	ldbu	r2,-149(fp)
8110b99c:	10c021a4 	muli	r3,r2,134
8110b9a0:	00a04574 	movhi	r2,33045
8110b9a4:	10b34b04 	addi	r2,r2,-13012
8110b9a8:	1885883a 	add	r2,r3,r2
8110b9ac:	1009883a 	mov	r4,r2
8110b9b0:	e0bfdd44 	addi	r2,fp,-139
8110b9b4:	00c02004 	movi	r3,128
8110b9b8:	180d883a 	mov	r6,r3
8110b9bc:	100b883a 	mov	r5,r2
8110b9c0:	11120c40 	call	811120c4 <memcpy>
								xBuffer128[i].usiId = siIdMessage;
8110b9c4:	e13fdac3 	ldbu	r4,-149(fp)
8110b9c8:	e0ffff0b 	ldhu	r3,-4(fp)
8110b9cc:	00a04574 	movhi	r2,33045
8110b9d0:	10b34b04 	addi	r2,r2,-13012
8110b9d4:	210021a4 	muli	r4,r4,134
8110b9d8:	1105883a 	add	r2,r2,r4
8110b9dc:	10802004 	addi	r2,r2,128
8110b9e0:	10c0000d 	sth	r3,0(r2)
								xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
8110b9e4:	e0ffdac3 	ldbu	r3,-149(fp)
8110b9e8:	00a04574 	movhi	r2,33045
8110b9ec:	10b34b04 	addi	r2,r2,-13012
8110b9f0:	18c021a4 	muli	r3,r3,134
8110b9f4:	10c5883a 	add	r2,r2,r3
8110b9f8:	10802104 	addi	r2,r2,132
8110b9fc:	00c000c4 	movi	r3,3
8110ba00:	10c00005 	stb	r3,0(r2)
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110ba04:	e0ffdac3 	ldbu	r3,-149(fp)
8110ba08:	00a04574 	movhi	r2,33045
8110ba0c:	10b34b04 	addi	r2,r2,-13012
8110ba10:	18c021a4 	muli	r3,r3,134
8110ba14:	10c5883a 	add	r2,r2,r3
8110ba18:	10802084 	addi	r2,r2,130
8110ba1c:	00c00104 	movi	r3,4
8110ba20:	10c0000d 	sth	r3,0(r2)
								break;
8110ba24:	00000606 	br	8110ba40 <bSendUART128+0x1d0>
					puts(cLocalBuffer128);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
8110ba28:	e0bfdac3 	ldbu	r2,-149(fp)
8110ba2c:	10800044 	addi	r2,r2,1
8110ba30:	e0bfdac5 	stb	r2,-149(fp)
8110ba34:	e0bfdac3 	ldbu	r2,-149(fp)
8110ba38:	108000b0 	cmpltui	r2,r2,2
8110ba3c:	103fcb1e 	bne	r2,zero,8110b96c <__reset+0xfb0eb96c>
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110ba40:	d0a05717 	ldw	r2,-32420(gp)
8110ba44:	1009883a 	mov	r4,r2
8110ba48:	112c9a00 	call	8112c9a0 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110ba4c:	d0a05b17 	ldw	r2,-32404(gp)
8110ba50:	1009883a 	mov	r4,r2
8110ba54:	112c9a00 	call	8112c9a0 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110ba58:	e0bfdb17 	ldw	r2,-148(fp)
8110ba5c:	10800060 	cmpeqi	r2,r2,1
8110ba60:	10004d1e 	bne	r2,zero,8110bb98 <bSendUART128+0x328>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110ba64:	e03fda45 	stb	zero,-151(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110ba68:	e0bfda43 	ldbu	r2,-151(fp)
8110ba6c:	10800044 	addi	r2,r2,1
8110ba70:	e0bfda45 	stb	r2,-151(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110ba74:	d0a05717 	ldw	r2,-32420(gp)
8110ba78:	e0ffdcc4 	addi	r3,fp,-141
8110ba7c:	180d883a 	mov	r6,r3
8110ba80:	01400144 	movi	r5,5
8110ba84:	1009883a 	mov	r4,r2
8110ba88:	112c3fc0 	call	8112c3fc <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110ba8c:	e0bfdcc3 	ldbu	r2,-141(fp)
8110ba90:	10803fcc 	andi	r2,r2,255
8110ba94:	10003a1e 	bne	r2,zero,8110bb80 <bSendUART128+0x310>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
8110ba98:	e03fdac5 	stb	zero,-149(fp)
8110ba9c:	00003206 	br	8110bb68 <bSendUART128+0x2f8>
								{
									if ( xBuffer128[i].usiId == 0 ) {
8110baa0:	e0ffdac3 	ldbu	r3,-149(fp)
8110baa4:	00a04574 	movhi	r2,33045
8110baa8:	10b34b04 	addi	r2,r2,-13012
8110baac:	18c021a4 	muli	r3,r3,134
8110bab0:	10c5883a 	add	r2,r2,r3
8110bab4:	10802004 	addi	r2,r2,128
8110bab8:	1080000b 	ldhu	r2,0(r2)
8110babc:	10bfffcc 	andi	r2,r2,65535
8110bac0:	1000261e 	bne	r2,zero,8110bb5c <bSendUART128+0x2ec>
										/* Found a free place */
										bSuccess = TRUE;
8110bac4:	00800044 	movi	r2,1
8110bac8:	e0bfdb15 	stw	r2,-148(fp)
										memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
8110bacc:	e0bfdac3 	ldbu	r2,-149(fp)
8110bad0:	10c021a4 	muli	r3,r2,134
8110bad4:	00a04574 	movhi	r2,33045
8110bad8:	10b34b04 	addi	r2,r2,-13012
8110badc:	1885883a 	add	r2,r3,r2
8110bae0:	1009883a 	mov	r4,r2
8110bae4:	e0bfdd44 	addi	r2,fp,-139
8110bae8:	00c02004 	movi	r3,128
8110baec:	180d883a 	mov	r6,r3
8110baf0:	100b883a 	mov	r5,r2
8110baf4:	11120c40 	call	811120c4 <memcpy>
										xBuffer128[i].usiId = siIdMessage;
8110baf8:	e13fdac3 	ldbu	r4,-149(fp)
8110bafc:	e0ffff0b 	ldhu	r3,-4(fp)
8110bb00:	00a04574 	movhi	r2,33045
8110bb04:	10b34b04 	addi	r2,r2,-13012
8110bb08:	210021a4 	muli	r4,r4,134
8110bb0c:	1105883a 	add	r2,r2,r4
8110bb10:	10802004 	addi	r2,r2,128
8110bb14:	10c0000d 	sth	r3,0(r2)
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
8110bb18:	e0ffdac3 	ldbu	r3,-149(fp)
8110bb1c:	00a04574 	movhi	r2,33045
8110bb20:	10b34b04 	addi	r2,r2,-13012
8110bb24:	18c021a4 	muli	r3,r3,134
8110bb28:	10c5883a 	add	r2,r2,r3
8110bb2c:	10802104 	addi	r2,r2,132
8110bb30:	00c000c4 	movi	r3,3
8110bb34:	10c00005 	stb	r3,0(r2)
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110bb38:	e0ffdac3 	ldbu	r3,-149(fp)
8110bb3c:	00a04574 	movhi	r2,33045
8110bb40:	10b34b04 	addi	r2,r2,-13012
8110bb44:	18c021a4 	muli	r3,r3,134
8110bb48:	10c5883a 	add	r2,r2,r3
8110bb4c:	10802084 	addi	r2,r2,130
8110bb50:	00c00104 	movi	r3,4
8110bb54:	10c0000d 	sth	r3,0(r2)
										break;
8110bb58:	00000606 	br	8110bb74 <bSendUART128+0x304>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
8110bb5c:	e0bfdac3 	ldbu	r2,-149(fp)
8110bb60:	10800044 	addi	r2,r2,1
8110bb64:	e0bfdac5 	stb	r2,-149(fp)
8110bb68:	e0bfdac3 	ldbu	r2,-149(fp)
8110bb6c:	108000b0 	cmpltui	r2,r2,2
8110bb70:	103fcb1e 	bne	r2,zero,8110baa0 <__reset+0xfb0ebaa0>
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110bb74:	d0a05717 	ldw	r2,-32420(gp)
8110bb78:	1009883a 	mov	r4,r2
8110bb7c:	112c9a00 	call	8112c9a0 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) && ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110bb80:	e0bfdcc3 	ldbu	r2,-141(fp)
8110bb84:	10803fcc 	andi	r2,r2,255
8110bb88:	10000326 	beq	r2,zero,8110bb98 <bSendUART128+0x328>
8110bb8c:	e0bfda43 	ldbu	r2,-151(fp)
8110bb90:	10800130 	cmpltui	r2,r2,4
8110bb94:	103fb41e 	bne	r2,zero,8110ba68 <__reset+0xfb0eba68>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) && ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110bb98:	e0bfdd03 	ldbu	r2,-140(fp)
8110bb9c:	10803fcc 	andi	r2,r2,255
8110bba0:	10000326 	beq	r2,zero,8110bbb0 <bSendUART128+0x340>
8110bba4:	e0bfda83 	ldbu	r2,-150(fp)
8110bba8:	10800130 	cmpltui	r2,r2,4
8110bbac:	103f551e 	bne	r2,zero,8110b904 <__reset+0xfb0eb904>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110bbb0:	e0bfdb17 	ldw	r2,-148(fp)
8110bbb4:	10800060 	cmpeqi	r2,r2,1
8110bbb8:	1000071e 	bne	r2,zero,8110bbd8 <bSendUART128+0x368>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer128);
8110bbbc:	d0a04e17 	ldw	r2,-32456(gp)
8110bbc0:	1009883a 	mov	r4,r2
8110bbc4:	112e7900 	call	8112e790 <OSSemPost>
8110bbc8:	e0bfdc45 	stb	r2,-143(fp)
				if ( error_code != OS_ERR_NONE ) {
8110bbcc:	e0bfdc43 	ldbu	r2,-143(fp)
8110bbd0:	10000126 	beq	r2,zero,8110bbd8 <bSendUART128+0x368>
					vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110bbd4:	110dd940 	call	8110dd94 <vFailSetCountSemaphorexBuffer128>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) && ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110bbd8:	e0bfdc83 	ldbu	r2,-142(fp)
8110bbdc:	10803fcc 	andi	r2,r2,255
8110bbe0:	10000326 	beq	r2,zero,8110bbf0 <bSendUART128+0x380>
8110bbe4:	e0bfda03 	ldbu	r2,-152(fp)
8110bbe8:	108001b0 	cmpltui	r2,r2,6
8110bbec:	103f381e 	bne	r2,zero,8110b8d0 <__reset+0xfb0eb8d0>

	return bSuccess;
8110bbf0:	e0bfdb17 	ldw	r2,-148(fp)
}
8110bbf4:	e037883a 	mov	sp,fp
8110bbf8:	dfc00117 	ldw	ra,4(sp)
8110bbfc:	df000017 	ldw	fp,0(sp)
8110bc00:	dec00204 	addi	sp,sp,8
8110bc04:	f800283a 	ret

8110bc08 <bSendUART64>:



/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART64 ( char *cBuffer, short int siIdMessage ) {
8110bc08:	deffe804 	addi	sp,sp,-96
8110bc0c:	de00012e 	bgeu	sp,et,8110bc14 <bSendUART64+0xc>
8110bc10:	003b68fa 	trap	3
8110bc14:	dfc01715 	stw	ra,92(sp)
8110bc18:	df001615 	stw	fp,88(sp)
8110bc1c:	df001604 	addi	fp,sp,88
8110bc20:	e13ffe15 	stw	r4,-8(fp)
8110bc24:	2805883a 	mov	r2,r5
8110bc28:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110bc2c:	e03fea05 	stb	zero,-88(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110bc30:	e03fea45 	stb	zero,-87(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110bc34:	e03fea85 	stb	zero,-86(fp)
	unsigned char i = 0;
8110bc38:	e03feac5 	stb	zero,-85(fp)
	bool bSuccess = FALSE;
8110bc3c:	e03feb15 	stw	zero,-84(fp)
	char cLocalBuffer64[64];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer64, cBuffer, 64);
8110bc40:	e0fffe17 	ldw	r3,-8(fp)
8110bc44:	e0bfed44 	addi	r2,fp,-75
8110bc48:	1809883a 	mov	r4,r3
8110bc4c:	00c01004 	movi	r3,64
8110bc50:	180d883a 	mov	r6,r3
8110bc54:	200b883a 	mov	r5,r4
8110bc58:	1009883a 	mov	r4,r2
8110bc5c:	11120c40 	call	811120c4 <memcpy>
	bSuccess = FALSE;
8110bc60:	e03feb15 	stw	zero,-84(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110bc64:	e03fea05 	stb	zero,-88(fp)
	do
	{
		ucCountRetriesSem++;
8110bc68:	e0bfea03 	ldbu	r2,-88(fp)
8110bc6c:	10800044 	addi	r2,r2,1
8110bc70:	e0bfea05 	stb	r2,-88(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer64, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110bc74:	d0a04a17 	ldw	r2,-32472(gp)
8110bc78:	e0ffec84 	addi	r3,fp,-78
8110bc7c:	180d883a 	mov	r6,r3
8110bc80:	01401904 	movi	r5,100
8110bc84:	1009883a 	mov	r4,r2
8110bc88:	112e4080 	call	8112e408 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110bc8c:	e0bfec83 	ldbu	r2,-78(fp)
8110bc90:	10803fcc 	andi	r2,r2,255
8110bc94:	1000b61e 	bne	r2,zero,8110bf70 <bSendUART64+0x368>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110bc98:	e03fea85 	stb	zero,-86(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110bc9c:	e0bfea83 	ldbu	r2,-86(fp)
8110bca0:	10800044 	addi	r2,r2,1
8110bca4:	e0bfea85 	stb	r2,-86(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110bca8:	d0a05b17 	ldw	r2,-32404(gp)
8110bcac:	e0ffed04 	addi	r3,fp,-76
8110bcb0:	180d883a 	mov	r6,r3
8110bcb4:	01400144 	movi	r5,5
8110bcb8:	1009883a 	mov	r4,r2
8110bcbc:	112c3fc0 	call	8112c3fc <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110bcc0:	e0bfed03 	ldbu	r2,-76(fp)
8110bcc4:	10803fcc 	andi	r2,r2,255
8110bcc8:	1000991e 	bne	r2,zero,8110bf30 <bSendUART64+0x328>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer64);
8110bccc:	e0bfed44 	addi	r2,fp,-75
8110bcd0:	1009883a 	mov	r4,r2
8110bcd4:	11124e80 	call	811124e8 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer64, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110bcd8:	d0a05917 	ldw	r2,-32412(gp)
8110bcdc:	e0ffecc4 	addi	r3,fp,-77
8110bce0:	180b883a 	mov	r5,r3
8110bce4:	1009883a 	mov	r4,r2
8110bce8:	112bd7c0 	call	8112bd7c <OSMutexAccept>
8110bcec:	e0bfec05 	stb	r2,-80(fp)
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
8110bcf0:	e0bfecc3 	ldbu	r2,-77(fp)
8110bcf4:	10803fcc 	andi	r2,r2,255
8110bcf8:	10003a1e 	bne	r2,zero,8110bde4 <bSendUART64+0x1dc>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_64; i++)
8110bcfc:	e03feac5 	stb	zero,-85(fp)
8110bd00:	00003206 	br	8110bdcc <bSendUART64+0x1c4>
						{
							if ( xBuffer64[i].usiId == 0 ) {
8110bd04:	e0ffeac3 	ldbu	r3,-85(fp)
8110bd08:	00a04534 	movhi	r2,33044
8110bd0c:	1089a204 	addi	r2,r2,9864
8110bd10:	18c011a4 	muli	r3,r3,70
8110bd14:	10c5883a 	add	r2,r2,r3
8110bd18:	10801004 	addi	r2,r2,64
8110bd1c:	1080000b 	ldhu	r2,0(r2)
8110bd20:	10bfffcc 	andi	r2,r2,65535
8110bd24:	1000261e 	bne	r2,zero,8110bdc0 <bSendUART64+0x1b8>
								/* Found a free place */
								bSuccess = TRUE;
8110bd28:	00800044 	movi	r2,1
8110bd2c:	e0bfeb15 	stw	r2,-84(fp)
								memcpy(xBuffer64[i].buffer, cLocalBuffer64, 64);
8110bd30:	e0bfeac3 	ldbu	r2,-85(fp)
8110bd34:	10c011a4 	muli	r3,r2,70
8110bd38:	00a04534 	movhi	r2,33044
8110bd3c:	1089a204 	addi	r2,r2,9864
8110bd40:	1885883a 	add	r2,r3,r2
8110bd44:	1009883a 	mov	r4,r2
8110bd48:	e0bfed44 	addi	r2,fp,-75
8110bd4c:	00c01004 	movi	r3,64
8110bd50:	180d883a 	mov	r6,r3
8110bd54:	100b883a 	mov	r5,r2
8110bd58:	11120c40 	call	811120c4 <memcpy>
								xBuffer64[i].usiId = siIdMessage;
8110bd5c:	e13feac3 	ldbu	r4,-85(fp)
8110bd60:	e0ffff0b 	ldhu	r3,-4(fp)
8110bd64:	00a04534 	movhi	r2,33044
8110bd68:	1089a204 	addi	r2,r2,9864
8110bd6c:	210011a4 	muli	r4,r4,70
8110bd70:	1105883a 	add	r2,r2,r4
8110bd74:	10801004 	addi	r2,r2,64
8110bd78:	10c0000d 	sth	r3,0(r2)
								xBuffer64[i].ucNofRetries = N_RETRIES_COMM;
8110bd7c:	e0ffeac3 	ldbu	r3,-85(fp)
8110bd80:	00a04534 	movhi	r2,33044
8110bd84:	1089a204 	addi	r2,r2,9864
8110bd88:	18c011a4 	muli	r3,r3,70
8110bd8c:	10c5883a 	add	r2,r2,r3
8110bd90:	10801104 	addi	r2,r2,68
8110bd94:	00c000c4 	movi	r3,3
8110bd98:	10c00005 	stb	r3,0(r2)
								xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
8110bd9c:	e0ffeac3 	ldbu	r3,-85(fp)
8110bda0:	00a04534 	movhi	r2,33044
8110bda4:	1089a204 	addi	r2,r2,9864
8110bda8:	18c011a4 	muli	r3,r3,70
8110bdac:	10c5883a 	add	r2,r2,r3
8110bdb0:	10801084 	addi	r2,r2,66
8110bdb4:	00c00104 	movi	r3,4
8110bdb8:	10c0000d 	sth	r3,0(r2)
								break;
8110bdbc:	00000606 	br	8110bdd8 <bSendUART64+0x1d0>
					puts(cLocalBuffer64);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer64, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_64; i++)
8110bdc0:	e0bfeac3 	ldbu	r2,-85(fp)
8110bdc4:	10800044 	addi	r2,r2,1
8110bdc8:	e0bfeac5 	stb	r2,-85(fp)
8110bdcc:	e0bfeac3 	ldbu	r2,-85(fp)
8110bdd0:	10800130 	cmpltui	r2,r2,4
8110bdd4:	103fcb1e 	bne	r2,zero,8110bd04 <__reset+0xfb0ebd04>
								xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer128*/
8110bdd8:	d0a05917 	ldw	r2,-32412(gp)
8110bddc:	1009883a 	mov	r4,r2
8110bde0:	112c9a00 	call	8112c9a0 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110bde4:	d0a05b17 	ldw	r2,-32404(gp)
8110bde8:	1009883a 	mov	r4,r2
8110bdec:	112c9a00 	call	8112c9a0 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110bdf0:	e0bfeb17 	ldw	r2,-84(fp)
8110bdf4:	10800060 	cmpeqi	r2,r2,1
8110bdf8:	10004d1e 	bne	r2,zero,8110bf30 <bSendUART64+0x328>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110bdfc:	e03fea45 	stb	zero,-87(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110be00:	e0bfea43 	ldbu	r2,-87(fp)
8110be04:	10800044 	addi	r2,r2,1
8110be08:	e0bfea45 	stb	r2,-87(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer64, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110be0c:	d0a05917 	ldw	r2,-32412(gp)
8110be10:	e0ffecc4 	addi	r3,fp,-77
8110be14:	180d883a 	mov	r6,r3
8110be18:	01400144 	movi	r5,5
8110be1c:	1009883a 	mov	r4,r2
8110be20:	112c3fc0 	call	8112c3fc <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110be24:	e0bfecc3 	ldbu	r2,-77(fp)
8110be28:	10803fcc 	andi	r2,r2,255
8110be2c:	10003a1e 	bne	r2,zero,8110bf18 <bSendUART64+0x310>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_64; i++)
8110be30:	e03feac5 	stb	zero,-85(fp)
8110be34:	00003206 	br	8110bf00 <bSendUART64+0x2f8>
								{
									if ( xBuffer64[i].usiId == 0 ) {
8110be38:	e0ffeac3 	ldbu	r3,-85(fp)
8110be3c:	00a04534 	movhi	r2,33044
8110be40:	1089a204 	addi	r2,r2,9864
8110be44:	18c011a4 	muli	r3,r3,70
8110be48:	10c5883a 	add	r2,r2,r3
8110be4c:	10801004 	addi	r2,r2,64
8110be50:	1080000b 	ldhu	r2,0(r2)
8110be54:	10bfffcc 	andi	r2,r2,65535
8110be58:	1000261e 	bne	r2,zero,8110bef4 <bSendUART64+0x2ec>
										/* Found a free place */
										bSuccess = TRUE;
8110be5c:	00800044 	movi	r2,1
8110be60:	e0bfeb15 	stw	r2,-84(fp)
										memcpy(xBuffer64[i].buffer, cLocalBuffer64, 64);
8110be64:	e0bfeac3 	ldbu	r2,-85(fp)
8110be68:	10c011a4 	muli	r3,r2,70
8110be6c:	00a04534 	movhi	r2,33044
8110be70:	1089a204 	addi	r2,r2,9864
8110be74:	1885883a 	add	r2,r3,r2
8110be78:	1009883a 	mov	r4,r2
8110be7c:	e0bfed44 	addi	r2,fp,-75
8110be80:	00c01004 	movi	r3,64
8110be84:	180d883a 	mov	r6,r3
8110be88:	100b883a 	mov	r5,r2
8110be8c:	11120c40 	call	811120c4 <memcpy>
										xBuffer64[i].usiId = siIdMessage;
8110be90:	e13feac3 	ldbu	r4,-85(fp)
8110be94:	e0ffff0b 	ldhu	r3,-4(fp)
8110be98:	00a04534 	movhi	r2,33044
8110be9c:	1089a204 	addi	r2,r2,9864
8110bea0:	210011a4 	muli	r4,r4,70
8110bea4:	1105883a 	add	r2,r2,r4
8110bea8:	10801004 	addi	r2,r2,64
8110beac:	10c0000d 	sth	r3,0(r2)
										xBuffer64[i].ucNofRetries = N_RETRIES_COMM;
8110beb0:	e0ffeac3 	ldbu	r3,-85(fp)
8110beb4:	00a04534 	movhi	r2,33044
8110beb8:	1089a204 	addi	r2,r2,9864
8110bebc:	18c011a4 	muli	r3,r3,70
8110bec0:	10c5883a 	add	r2,r2,r3
8110bec4:	10801104 	addi	r2,r2,68
8110bec8:	00c000c4 	movi	r3,3
8110becc:	10c00005 	stb	r3,0(r2)
										xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
8110bed0:	e0ffeac3 	ldbu	r3,-85(fp)
8110bed4:	00a04534 	movhi	r2,33044
8110bed8:	1089a204 	addi	r2,r2,9864
8110bedc:	18c011a4 	muli	r3,r3,70
8110bee0:	10c5883a 	add	r2,r2,r3
8110bee4:	10801084 	addi	r2,r2,66
8110bee8:	00c00104 	movi	r3,4
8110beec:	10c0000d 	sth	r3,0(r2)
										break;
8110bef0:	00000606 	br	8110bf0c <bSendUART64+0x304>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer64, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_64; i++)
8110bef4:	e0bfeac3 	ldbu	r2,-85(fp)
8110bef8:	10800044 	addi	r2,r2,1
8110befc:	e0bfeac5 	stb	r2,-85(fp)
8110bf00:	e0bfeac3 	ldbu	r2,-85(fp)
8110bf04:	10800130 	cmpltui	r2,r2,4
8110bf08:	103fcb1e 	bne	r2,zero,8110be38 <__reset+0xfb0ebe38>
										xBuffer64[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64*/
8110bf0c:	d0a05917 	ldw	r2,-32412(gp)
8110bf10:	1009883a 	mov	r4,r2
8110bf14:	112c9a00 	call	8112c9a0 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) && ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110bf18:	e0bfecc3 	ldbu	r2,-77(fp)
8110bf1c:	10803fcc 	andi	r2,r2,255
8110bf20:	10000326 	beq	r2,zero,8110bf30 <bSendUART64+0x328>
8110bf24:	e0bfea43 	ldbu	r2,-87(fp)
8110bf28:	10800130 	cmpltui	r2,r2,4
8110bf2c:	103fb41e 	bne	r2,zero,8110be00 <__reset+0xfb0ebe00>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) && ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110bf30:	e0bfed03 	ldbu	r2,-76(fp)
8110bf34:	10803fcc 	andi	r2,r2,255
8110bf38:	10000326 	beq	r2,zero,8110bf48 <bSendUART64+0x340>
8110bf3c:	e0bfea83 	ldbu	r2,-86(fp)
8110bf40:	10800130 	cmpltui	r2,r2,4
8110bf44:	103f551e 	bne	r2,zero,8110bc9c <__reset+0xfb0ebc9c>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110bf48:	e0bfeb17 	ldw	r2,-84(fp)
8110bf4c:	10800060 	cmpeqi	r2,r2,1
8110bf50:	1000071e 	bne	r2,zero,8110bf70 <bSendUART64+0x368>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer64);
8110bf54:	d0a04a17 	ldw	r2,-32472(gp)
8110bf58:	1009883a 	mov	r4,r2
8110bf5c:	112e7900 	call	8112e790 <OSSemPost>
8110bf60:	e0bfec45 	stb	r2,-79(fp)
				if ( error_code != OS_ERR_NONE ) {
8110bf64:	e0bfec43 	ldbu	r2,-79(fp)
8110bf68:	10000126 	beq	r2,zero,8110bf70 <bSendUART64+0x368>
					vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110bf6c:	110dd2c0 	call	8110dd2c <vFailSetCountSemaphorexBuffer64>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) && ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110bf70:	e0bfec83 	ldbu	r2,-78(fp)
8110bf74:	10803fcc 	andi	r2,r2,255
8110bf78:	10000326 	beq	r2,zero,8110bf88 <bSendUART64+0x380>
8110bf7c:	e0bfea03 	ldbu	r2,-88(fp)
8110bf80:	108001b0 	cmpltui	r2,r2,6
8110bf84:	103f381e 	bne	r2,zero,8110bc68 <__reset+0xfb0ebc68>

	return bSuccess;
8110bf88:	e0bfeb17 	ldw	r2,-84(fp)
}
8110bf8c:	e037883a 	mov	sp,fp
8110bf90:	dfc00117 	ldw	ra,4(sp)
8110bf94:	df000017 	ldw	fp,0(sp)
8110bf98:	dec00204 	addi	sp,sp,8
8110bf9c:	f800283a 	ret

8110bfa0 <bSendUART32>:

/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART32 ( char *cBuffer, short int siIdMessage ) {
8110bfa0:	defff004 	addi	sp,sp,-64
8110bfa4:	de00012e 	bgeu	sp,et,8110bfac <bSendUART32+0xc>
8110bfa8:	003b68fa 	trap	3
8110bfac:	dfc00f15 	stw	ra,60(sp)
8110bfb0:	df000e15 	stw	fp,56(sp)
8110bfb4:	df000e04 	addi	fp,sp,56
8110bfb8:	e13ffe15 	stw	r4,-8(fp)
8110bfbc:	2805883a 	mov	r2,r5
8110bfc0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110bfc4:	e03ff205 	stb	zero,-56(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110bfc8:	e03ff245 	stb	zero,-55(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110bfcc:	e03ff285 	stb	zero,-54(fp)
	unsigned char i = 0;
8110bfd0:	e03ff2c5 	stb	zero,-53(fp)
	bool bSuccess = FALSE;
8110bfd4:	e03ff315 	stw	zero,-52(fp)
	char cLocalBuffer32[32];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer32, cBuffer, 32);
8110bfd8:	e0fffe17 	ldw	r3,-8(fp)
8110bfdc:	e0bff544 	addi	r2,fp,-43
8110bfe0:	1809883a 	mov	r4,r3
8110bfe4:	00c00804 	movi	r3,32
8110bfe8:	180d883a 	mov	r6,r3
8110bfec:	200b883a 	mov	r5,r4
8110bff0:	1009883a 	mov	r4,r2
8110bff4:	11120c40 	call	811120c4 <memcpy>
	bSuccess = FALSE;
8110bff8:	e03ff315 	stw	zero,-52(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110bffc:	e03ff205 	stb	zero,-56(fp)
	do
	{
		ucCountRetriesSem++;
8110c000:	e0bff203 	ldbu	r2,-56(fp)
8110c004:	10800044 	addi	r2,r2,1
8110c008:	e0bff205 	stb	r2,-56(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer32, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110c00c:	d0a05817 	ldw	r2,-32416(gp)
8110c010:	e0fff484 	addi	r3,fp,-46
8110c014:	180d883a 	mov	r6,r3
8110c018:	01401904 	movi	r5,100
8110c01c:	1009883a 	mov	r4,r2
8110c020:	112e4080 	call	8112e408 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110c024:	e0bff483 	ldbu	r2,-46(fp)
8110c028:	10803fcc 	andi	r2,r2,255
8110c02c:	1000b61e 	bne	r2,zero,8110c308 <bSendUART32+0x368>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110c030:	e03ff285 	stb	zero,-54(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110c034:	e0bff283 	ldbu	r2,-54(fp)
8110c038:	10800044 	addi	r2,r2,1
8110c03c:	e0bff285 	stb	r2,-54(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110c040:	d0a05b17 	ldw	r2,-32404(gp)
8110c044:	e0fff504 	addi	r3,fp,-44
8110c048:	180d883a 	mov	r6,r3
8110c04c:	01400144 	movi	r5,5
8110c050:	1009883a 	mov	r4,r2
8110c054:	112c3fc0 	call	8112c3fc <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110c058:	e0bff503 	ldbu	r2,-44(fp)
8110c05c:	10803fcc 	andi	r2,r2,255
8110c060:	1000991e 	bne	r2,zero,8110c2c8 <bSendUART32+0x328>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer32);
8110c064:	e0bff544 	addi	r2,fp,-43
8110c068:	1009883a 	mov	r4,r2
8110c06c:	11124e80 	call	811124e8 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer32, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110c070:	d0a05517 	ldw	r2,-32428(gp)
8110c074:	e0fff4c4 	addi	r3,fp,-45
8110c078:	180b883a 	mov	r5,r3
8110c07c:	1009883a 	mov	r4,r2
8110c080:	112bd7c0 	call	8112bd7c <OSMutexAccept>
8110c084:	e0bff405 	stb	r2,-48(fp)
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
8110c088:	e0bff4c3 	ldbu	r2,-45(fp)
8110c08c:	10803fcc 	andi	r2,r2,255
8110c090:	10003a1e 	bne	r2,zero,8110c17c <bSendUART32+0x1dc>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_32; i++)
8110c094:	e03ff2c5 	stb	zero,-53(fp)
8110c098:	00003206 	br	8110c164 <bSendUART32+0x1c4>
						{
							if ( xBuffer32[i].usiId == 0 ) {
8110c09c:	e0fff2c3 	ldbu	r3,-53(fp)
8110c0a0:	00a04534 	movhi	r2,33044
8110c0a4:	109aff04 	addi	r2,r2,27644
8110c0a8:	18c009a4 	muli	r3,r3,38
8110c0ac:	10c5883a 	add	r2,r2,r3
8110c0b0:	10800804 	addi	r2,r2,32
8110c0b4:	1080000b 	ldhu	r2,0(r2)
8110c0b8:	10bfffcc 	andi	r2,r2,65535
8110c0bc:	1000261e 	bne	r2,zero,8110c158 <bSendUART32+0x1b8>
								/* Found a free place */
								bSuccess = TRUE;
8110c0c0:	00800044 	movi	r2,1
8110c0c4:	e0bff315 	stw	r2,-52(fp)
								memcpy(xBuffer32[i].buffer, cLocalBuffer32, 32);
8110c0c8:	e0bff2c3 	ldbu	r2,-53(fp)
8110c0cc:	10c009a4 	muli	r3,r2,38
8110c0d0:	00a04534 	movhi	r2,33044
8110c0d4:	109aff04 	addi	r2,r2,27644
8110c0d8:	1885883a 	add	r2,r3,r2
8110c0dc:	1009883a 	mov	r4,r2
8110c0e0:	e0bff544 	addi	r2,fp,-43
8110c0e4:	00c00804 	movi	r3,32
8110c0e8:	180d883a 	mov	r6,r3
8110c0ec:	100b883a 	mov	r5,r2
8110c0f0:	11120c40 	call	811120c4 <memcpy>
								xBuffer32[i].usiId = siIdMessage;
8110c0f4:	e13ff2c3 	ldbu	r4,-53(fp)
8110c0f8:	e0ffff0b 	ldhu	r3,-4(fp)
8110c0fc:	00a04534 	movhi	r2,33044
8110c100:	109aff04 	addi	r2,r2,27644
8110c104:	210009a4 	muli	r4,r4,38
8110c108:	1105883a 	add	r2,r2,r4
8110c10c:	10800804 	addi	r2,r2,32
8110c110:	10c0000d 	sth	r3,0(r2)
								xBuffer32[i].ucNofRetries = N_RETRIES_COMM;
8110c114:	e0fff2c3 	ldbu	r3,-53(fp)
8110c118:	00a04534 	movhi	r2,33044
8110c11c:	109aff04 	addi	r2,r2,27644
8110c120:	18c009a4 	muli	r3,r3,38
8110c124:	10c5883a 	add	r2,r2,r3
8110c128:	10800904 	addi	r2,r2,36
8110c12c:	00c000c4 	movi	r3,3
8110c130:	10c00005 	stb	r3,0(r2)
								xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110c134:	e0fff2c3 	ldbu	r3,-53(fp)
8110c138:	00a04534 	movhi	r2,33044
8110c13c:	109aff04 	addi	r2,r2,27644
8110c140:	18c009a4 	muli	r3,r3,38
8110c144:	10c5883a 	add	r2,r2,r3
8110c148:	10800884 	addi	r2,r2,34
8110c14c:	00c00104 	movi	r3,4
8110c150:	10c0000d 	sth	r3,0(r2)
								break;
8110c154:	00000606 	br	8110c170 <bSendUART32+0x1d0>
					puts(cLocalBuffer32);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer32, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) { 
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_32; i++)
8110c158:	e0bff2c3 	ldbu	r2,-53(fp)
8110c15c:	10800044 	addi	r2,r2,1
8110c160:	e0bff2c5 	stb	r2,-53(fp)
8110c164:	e0bff2c3 	ldbu	r2,-53(fp)
8110c168:	10800230 	cmpltui	r2,r2,8
8110c16c:	103fcb1e 	bne	r2,zero,8110c09c <__reset+0xfb0ec09c>
								xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110c170:	d0a05517 	ldw	r2,-32428(gp)
8110c174:	1009883a 	mov	r4,r2
8110c178:	112c9a00 	call	8112c9a0 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110c17c:	d0a05b17 	ldw	r2,-32404(gp)
8110c180:	1009883a 	mov	r4,r2
8110c184:	112c9a00 	call	8112c9a0 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110c188:	e0bff317 	ldw	r2,-52(fp)
8110c18c:	10800060 	cmpeqi	r2,r2,1
8110c190:	10004d1e 	bne	r2,zero,8110c2c8 <bSendUART32+0x328>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110c194:	e03ff245 	stb	zero,-55(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110c198:	e0bff243 	ldbu	r2,-55(fp)
8110c19c:	10800044 	addi	r2,r2,1
8110c1a0:	e0bff245 	stb	r2,-55(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer32, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110c1a4:	d0a05517 	ldw	r2,-32428(gp)
8110c1a8:	e0fff4c4 	addi	r3,fp,-45
8110c1ac:	180d883a 	mov	r6,r3
8110c1b0:	01400144 	movi	r5,5
8110c1b4:	1009883a 	mov	r4,r2
8110c1b8:	112c3fc0 	call	8112c3fc <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110c1bc:	e0bff4c3 	ldbu	r2,-45(fp)
8110c1c0:	10803fcc 	andi	r2,r2,255
8110c1c4:	10003a1e 	bne	r2,zero,8110c2b0 <bSendUART32+0x310>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_32; i++)
8110c1c8:	e03ff2c5 	stb	zero,-53(fp)
8110c1cc:	00003206 	br	8110c298 <bSendUART32+0x2f8>
								{
									if ( xBuffer32[i].usiId == 0 ) {
8110c1d0:	e0fff2c3 	ldbu	r3,-53(fp)
8110c1d4:	00a04534 	movhi	r2,33044
8110c1d8:	109aff04 	addi	r2,r2,27644
8110c1dc:	18c009a4 	muli	r3,r3,38
8110c1e0:	10c5883a 	add	r2,r2,r3
8110c1e4:	10800804 	addi	r2,r2,32
8110c1e8:	1080000b 	ldhu	r2,0(r2)
8110c1ec:	10bfffcc 	andi	r2,r2,65535
8110c1f0:	1000261e 	bne	r2,zero,8110c28c <bSendUART32+0x2ec>
										/* Found a free place */
										bSuccess = TRUE;
8110c1f4:	00800044 	movi	r2,1
8110c1f8:	e0bff315 	stw	r2,-52(fp)
										memcpy(xBuffer32[i].buffer, cLocalBuffer32, 32);
8110c1fc:	e0bff2c3 	ldbu	r2,-53(fp)
8110c200:	10c009a4 	muli	r3,r2,38
8110c204:	00a04534 	movhi	r2,33044
8110c208:	109aff04 	addi	r2,r2,27644
8110c20c:	1885883a 	add	r2,r3,r2
8110c210:	1009883a 	mov	r4,r2
8110c214:	e0bff544 	addi	r2,fp,-43
8110c218:	00c00804 	movi	r3,32
8110c21c:	180d883a 	mov	r6,r3
8110c220:	100b883a 	mov	r5,r2
8110c224:	11120c40 	call	811120c4 <memcpy>
										xBuffer32[i].usiId = siIdMessage;
8110c228:	e13ff2c3 	ldbu	r4,-53(fp)
8110c22c:	e0ffff0b 	ldhu	r3,-4(fp)
8110c230:	00a04534 	movhi	r2,33044
8110c234:	109aff04 	addi	r2,r2,27644
8110c238:	210009a4 	muli	r4,r4,38
8110c23c:	1105883a 	add	r2,r2,r4
8110c240:	10800804 	addi	r2,r2,32
8110c244:	10c0000d 	sth	r3,0(r2)
										xBuffer32[i].ucNofRetries = N_RETRIES_COMM;
8110c248:	e0fff2c3 	ldbu	r3,-53(fp)
8110c24c:	00a04534 	movhi	r2,33044
8110c250:	109aff04 	addi	r2,r2,27644
8110c254:	18c009a4 	muli	r3,r3,38
8110c258:	10c5883a 	add	r2,r2,r3
8110c25c:	10800904 	addi	r2,r2,36
8110c260:	00c000c4 	movi	r3,3
8110c264:	10c00005 	stb	r3,0(r2)
										xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110c268:	e0fff2c3 	ldbu	r3,-53(fp)
8110c26c:	00a04534 	movhi	r2,33044
8110c270:	109aff04 	addi	r2,r2,27644
8110c274:	18c009a4 	muli	r3,r3,38
8110c278:	10c5883a 	add	r2,r2,r3
8110c27c:	10800884 	addi	r2,r2,34
8110c280:	00c00104 	movi	r3,4
8110c284:	10c0000d 	sth	r3,0(r2)
										break;
8110c288:	00000606 	br	8110c2a4 <bSendUART32+0x304>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer32, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_32; i++)
8110c28c:	e0bff2c3 	ldbu	r2,-53(fp)
8110c290:	10800044 	addi	r2,r2,1
8110c294:	e0bff2c5 	stb	r2,-53(fp)
8110c298:	e0bff2c3 	ldbu	r2,-53(fp)
8110c29c:	10800230 	cmpltui	r2,r2,8
8110c2a0:	103fcb1e 	bne	r2,zero,8110c1d0 <__reset+0xfb0ec1d0>
										xBuffer32[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110c2a4:	d0a05517 	ldw	r2,-32428(gp)
8110c2a8:	1009883a 	mov	r4,r2
8110c2ac:	112c9a00 	call	8112c9a0 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) && ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110c2b0:	e0bff4c3 	ldbu	r2,-45(fp)
8110c2b4:	10803fcc 	andi	r2,r2,255
8110c2b8:	10000326 	beq	r2,zero,8110c2c8 <bSendUART32+0x328>
8110c2bc:	e0bff243 	ldbu	r2,-55(fp)
8110c2c0:	10800130 	cmpltui	r2,r2,4
8110c2c4:	103fb41e 	bne	r2,zero,8110c198 <__reset+0xfb0ec198>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) && ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110c2c8:	e0bff503 	ldbu	r2,-44(fp)
8110c2cc:	10803fcc 	andi	r2,r2,255
8110c2d0:	10000326 	beq	r2,zero,8110c2e0 <bSendUART32+0x340>
8110c2d4:	e0bff283 	ldbu	r2,-54(fp)
8110c2d8:	10800130 	cmpltui	r2,r2,4
8110c2dc:	103f551e 	bne	r2,zero,8110c034 <__reset+0xfb0ec034>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110c2e0:	e0bff317 	ldw	r2,-52(fp)
8110c2e4:	10800060 	cmpeqi	r2,r2,1
8110c2e8:	1000071e 	bne	r2,zero,8110c308 <bSendUART32+0x368>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer32);
8110c2ec:	d0a05817 	ldw	r2,-32416(gp)
8110c2f0:	1009883a 	mov	r4,r2
8110c2f4:	112e7900 	call	8112e790 <OSSemPost>
8110c2f8:	e0bff445 	stb	r2,-47(fp)
				if ( error_code != OS_ERR_NONE ) {
8110c2fc:	e0bff443 	ldbu	r2,-47(fp)
8110c300:	10000126 	beq	r2,zero,8110c308 <bSendUART32+0x368>
					vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c304:	110dd2c0 	call	8110dd2c <vFailSetCountSemaphorexBuffer64>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) && ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110c308:	e0bff483 	ldbu	r2,-46(fp)
8110c30c:	10803fcc 	andi	r2,r2,255
8110c310:	10000326 	beq	r2,zero,8110c320 <bSendUART32+0x380>
8110c314:	e0bff203 	ldbu	r2,-56(fp)
8110c318:	108001b0 	cmpltui	r2,r2,6
8110c31c:	103f381e 	bne	r2,zero,8110c000 <__reset+0xfb0ec000>

	return bSuccess;
8110c320:	e0bff317 	ldw	r2,-52(fp)
}
8110c324:	e037883a 	mov	sp,fp
8110c328:	dfc00117 	ldw	ra,4(sp)
8110c32c:	df000017 	ldw	fp,0(sp)
8110c330:	dec00204 	addi	sp,sp,8
8110c334:	f800283a 	ret

8110c338 <vSendEthConf>:



void vSendEthConf ( void ) {
8110c338:	deffc304 	addi	sp,sp,-244
8110c33c:	de00012e 	bgeu	sp,et,8110c344 <vSendEthConf+0xc>
8110c340:	003b68fa 	trap	3
8110c344:	dfc03c15 	stw	ra,240(sp)
8110c348:	df003b15 	stw	fp,236(sp)
8110c34c:	dd403a15 	stw	r21,232(sp)
8110c350:	dd003915 	stw	r20,228(sp)
8110c354:	dcc03815 	stw	r19,224(sp)
8110c358:	dc803715 	stw	r18,220(sp)
8110c35c:	dc403615 	stw	r17,216(sp)
8110c360:	dc003515 	stw	r16,212(sp)
8110c364:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
8110c368:	e03fd98d 	sth	zero,-154(fp)
8110c36c:	e03fda0d 	sth	zero,-152(fp)
8110c370:	e0bfda84 	addi	r2,fp,-150
8110c374:	00c01f04 	movi	r3,124
8110c378:	180d883a 	mov	r6,r3
8110c37c:	000b883a 	mov	r5,zero
8110c380:	1009883a 	mov	r4,r2
8110c384:	11122140 	call	81112214 <memset>
    unsigned char crc = 0;
8110c388:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110c38c:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110c390:	110c7e00 	call	8110c7e0 <usiGetIdCMD>
8110c394:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c398:	e57fd90b 	ldhu	r21,-156(fp)
8110c39c:	00a04574 	movhi	r2,33045
8110c3a0:	10bbe204 	addi	r2,r2,-4216
8110c3a4:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c3a8:	00a04574 	movhi	r2,33045
8110c3ac:	10bbe204 	addi	r2,r2,-4216
8110c3b0:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c3b4:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c3b8:	00a04574 	movhi	r2,33045
8110c3bc:	10bbe204 	addi	r2,r2,-4216
8110c3c0:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c3c4:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c3c8:	00a04574 	movhi	r2,33045
8110c3cc:	10bbe204 	addi	r2,r2,-4216
8110c3d0:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c3d4:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110c3d8:	00a04574 	movhi	r2,33045
8110c3dc:	10bbe204 	addi	r2,r2,-4216
8110c3e0:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c3e4:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110c3e8:	00a04574 	movhi	r2,33045
8110c3ec:	10bbe204 	addi	r2,r2,-4216
8110c3f0:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c3f4:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110c3f8:	00a04574 	movhi	r2,33045
8110c3fc:	10bbe204 	addi	r2,r2,-4216
8110c400:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c404:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110c408:	00a04574 	movhi	r2,33045
8110c40c:	10bbe204 	addi	r2,r2,-4216
8110c410:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c414:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110c418:	00a04574 	movhi	r2,33045
8110c41c:	10bbe204 	addi	r2,r2,-4216
8110c420:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c424:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110c428:	00a04574 	movhi	r2,33045
8110c42c:	10bbe204 	addi	r2,r2,-4216
8110c430:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c434:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110c438:	00a04574 	movhi	r2,33045
8110c43c:	10bbe204 	addi	r2,r2,-4216
8110c440:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c444:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110c448:	00a04574 	movhi	r2,33045
8110c44c:	10bbe204 	addi	r2,r2,-4216
8110c450:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c454:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110c458:	00a04574 	movhi	r2,33045
8110c45c:	10bbe204 	addi	r2,r2,-4216
8110c460:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c464:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110c468:	00a04574 	movhi	r2,33045
8110c46c:	10bbe204 	addi	r2,r2,-4216
8110c470:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c474:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110c478:	00a04574 	movhi	r2,33045
8110c47c:	10bbe204 	addi	r2,r2,-4216
8110c480:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c484:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110c488:	00a04574 	movhi	r2,33045
8110c48c:	10bbe204 	addi	r2,r2,-4216
8110c490:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c494:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110c498:	00a04574 	movhi	r2,33045
8110c49c:	10bbe204 	addi	r2,r2,-4216
8110c4a0:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c4a4:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
8110c4a8:	00a04574 	movhi	r2,33045
8110c4ac:	10bbe204 	addi	r2,r2,-4216
8110c4b0:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110c4b4:	10bfffcc 	andi	r2,r2,65535
8110c4b8:	e53fd984 	addi	r20,fp,-154
8110c4bc:	d8801115 	stw	r2,68(sp)
8110c4c0:	dcc01015 	stw	r19,64(sp)
8110c4c4:	dc800f15 	stw	r18,60(sp)
8110c4c8:	dc400e15 	stw	r17,56(sp)
8110c4cc:	dc000d15 	stw	r16,52(sp)
8110c4d0:	dbc00c15 	stw	r15,48(sp)
8110c4d4:	db800b15 	stw	r14,44(sp)
8110c4d8:	db400a15 	stw	r13,40(sp)
8110c4dc:	db000915 	stw	r12,36(sp)
8110c4e0:	dac00815 	stw	r11,32(sp)
8110c4e4:	da800715 	stw	r10,28(sp)
8110c4e8:	da400615 	stw	r9,24(sp)
8110c4ec:	da000515 	stw	r8,20(sp)
8110c4f0:	d9c00415 	stw	r7,16(sp)
8110c4f4:	d9800315 	stw	r6,12(sp)
8110c4f8:	d9400215 	stw	r5,8(sp)
8110c4fc:	d9000115 	stw	r4,4(sp)
8110c500:	d8c00015 	stw	r3,0(sp)
8110c504:	a80f883a 	mov	r7,r21
8110c508:	018010c4 	movi	r6,67
8110c50c:	01604534 	movhi	r5,33044
8110c510:	29716104 	addi	r5,r5,-14972
8110c514:	a009883a 	mov	r4,r20
8110c518:	111282c0 	call	8111282c <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
8110c51c:	e0bfd984 	addi	r2,fp,-154
8110c520:	1009883a 	mov	r4,r2
8110c524:	1112a400 	call	81112a40 <strlen>
8110c528:	1007883a 	mov	r3,r2
8110c52c:	e0bfd984 	addi	r2,fp,-154
8110c530:	180b883a 	mov	r5,r3
8110c534:	1009883a 	mov	r4,r2
8110c538:	110d6300 	call	8110d630 <ucCrc8wInit>
8110c53c:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
8110c540:	e13fd703 	ldbu	r4,-164(fp)
8110c544:	e0ffd984 	addi	r3,fp,-154
8110c548:	e0bfd984 	addi	r2,fp,-154
8110c54c:	200f883a 	mov	r7,r4
8110c550:	180d883a 	mov	r6,r3
8110c554:	01604534 	movhi	r5,33044
8110c558:	29717904 	addi	r5,r5,-14876
8110c55c:	1009883a 	mov	r4,r2
8110c560:	111282c0 	call	8111282c <sprintf>

	bSuccees = bSendUART128(cBufferETH, usiIdCMDLocal);
8110c564:	e0bfd90b 	ldhu	r2,-156(fp)
8110c568:	10ffffcc 	andi	r3,r2,65535
8110c56c:	18e0001c 	xori	r3,r3,32768
8110c570:	18e00004 	addi	r3,r3,-32768
8110c574:	e0bfd984 	addi	r2,fp,-154
8110c578:	180b883a 	mov	r5,r3
8110c57c:	1009883a 	mov	r4,r2
8110c580:	110b8700 	call	8110b870 <bSendUART128>
8110c584:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
8110c588:	e0bfd817 	ldw	r2,-160(fp)
8110c58c:	10800060 	cmpeqi	r2,r2,1
8110c590:	1000011e 	bne	r2,zero,8110c598 <vSendEthConf+0x260>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
8110c594:	110df9c0 	call	8110df9c <vCouldNotSendEthConfUART>
	}
}
8110c598:	0001883a 	nop
8110c59c:	e6fffa04 	addi	sp,fp,-24
8110c5a0:	dfc00717 	ldw	ra,28(sp)
8110c5a4:	df000617 	ldw	fp,24(sp)
8110c5a8:	dd400517 	ldw	r21,20(sp)
8110c5ac:	dd000417 	ldw	r20,16(sp)
8110c5b0:	dcc00317 	ldw	r19,12(sp)
8110c5b4:	dc800217 	ldw	r18,8(sp)
8110c5b8:	dc400117 	ldw	r17,4(sp)
8110c5bc:	dc000017 	ldw	r16,0(sp)
8110c5c0:	dec00804 	addi	sp,sp,32
8110c5c4:	f800283a 	ret

8110c5c8 <vSendTurnOff>:

void vSendTurnOff ( void ) {
8110c5c8:	defff304 	addi	sp,sp,-52
8110c5cc:	de00012e 	bgeu	sp,et,8110c5d4 <vSendTurnOff+0xc>
8110c5d0:	003b68fa 	trap	3
8110c5d4:	dfc00c15 	stw	ra,48(sp)
8110c5d8:	df000b15 	stw	fp,44(sp)
8110c5dc:	df000b04 	addi	fp,sp,44
    char cBufferTurnOff[32] = "";
8110c5e0:	e03ff78d 	sth	zero,-34(fp)
8110c5e4:	e03ff80d 	sth	zero,-32(fp)
8110c5e8:	e03ff88d 	sth	zero,-30(fp)
8110c5ec:	e03ff90d 	sth	zero,-28(fp)
8110c5f0:	e03ff98d 	sth	zero,-26(fp)
8110c5f4:	e03ffa0d 	sth	zero,-24(fp)
8110c5f8:	e03ffa8d 	sth	zero,-22(fp)
8110c5fc:	e03ffb0d 	sth	zero,-20(fp)
8110c600:	e03ffb8d 	sth	zero,-18(fp)
8110c604:	e03ffc0d 	sth	zero,-16(fp)
8110c608:	e03ffc8d 	sth	zero,-14(fp)
8110c60c:	e03ffd0d 	sth	zero,-12(fp)
8110c610:	e03ffd8d 	sth	zero,-10(fp)
8110c614:	e03ffe0d 	sth	zero,-8(fp)
8110c618:	e03ffe8d 	sth	zero,-6(fp)
8110c61c:	e03fff0d 	sth	zero,-4(fp)
    unsigned char crc = 0;
8110c620:	e03ff505 	stb	zero,-44(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110c624:	e03ff615 	stw	zero,-40(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110c628:	110c7e00 	call	8110c7e0 <usiGetIdCMD>
8110c62c:	e0bff70d 	sth	r2,-36(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferTurnOff, TURNOFF_SPRINTF, usiIdCMDLocal);
8110c630:	e0fff70b 	ldhu	r3,-36(fp)
8110c634:	e0bff784 	addi	r2,fp,-34
8110c638:	180d883a 	mov	r6,r3
8110c63c:	01604534 	movhi	r5,33044
8110c640:	29717c04 	addi	r5,r5,-14864
8110c644:	1009883a 	mov	r4,r2
8110c648:	111282c0 	call	8111282c <sprintf>
    crc = ucCrc8wInit( cBufferTurnOff , strlen(cBufferTurnOff));
8110c64c:	e0bff784 	addi	r2,fp,-34
8110c650:	1009883a 	mov	r4,r2
8110c654:	1112a400 	call	81112a40 <strlen>
8110c658:	1007883a 	mov	r3,r2
8110c65c:	e0bff784 	addi	r2,fp,-34
8110c660:	180b883a 	mov	r5,r3
8110c664:	1009883a 	mov	r4,r2
8110c668:	110d6300 	call	8110d630 <ucCrc8wInit>
8110c66c:	e0bff505 	stb	r2,-44(fp)
    sprintf(cBufferTurnOff, "%s|%hhu;", cBufferTurnOff, crc );
8110c670:	e13ff503 	ldbu	r4,-44(fp)
8110c674:	e0fff784 	addi	r3,fp,-34
8110c678:	e0bff784 	addi	r2,fp,-34
8110c67c:	200f883a 	mov	r7,r4
8110c680:	180d883a 	mov	r6,r3
8110c684:	01604534 	movhi	r5,33044
8110c688:	29717904 	addi	r5,r5,-14876
8110c68c:	1009883a 	mov	r4,r2
8110c690:	111282c0 	call	8111282c <sprintf>

	bSuccees = bSendUART32(cBufferTurnOff, usiIdCMDLocal);
8110c694:	e0bff70b 	ldhu	r2,-36(fp)
8110c698:	10ffffcc 	andi	r3,r2,65535
8110c69c:	18e0001c 	xori	r3,r3,32768
8110c6a0:	18e00004 	addi	r3,r3,-32768
8110c6a4:	e0bff784 	addi	r2,fp,-34
8110c6a8:	180b883a 	mov	r5,r3
8110c6ac:	1009883a 	mov	r4,r2
8110c6b0:	110bfa00 	call	8110bfa0 <bSendUART32>
8110c6b4:	e0bff615 	stw	r2,-40(fp)

	if ( bSuccees != TRUE ) {
8110c6b8:	e0bff617 	ldw	r2,-40(fp)
8110c6bc:	10800060 	cmpeqi	r2,r2,1
8110c6c0:	1000011e 	bne	r2,zero,8110c6c8 <vSendTurnOff+0x100>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTurnOff();
8110c6c4:	110e6440 	call	8110e644 <vCouldNotSendTurnOff>
	}
}
8110c6c8:	0001883a 	nop
8110c6cc:	e037883a 	mov	sp,fp
8110c6d0:	dfc00117 	ldw	ra,4(sp)
8110c6d4:	df000017 	ldw	fp,0(sp)
8110c6d8:	dec00204 	addi	sp,sp,8
8110c6dc:	f800283a 	ret

8110c6e0 <vSendLog>:

void vSendLog ( const char * cDataIn ) {
8110c6e0:	deffda04 	addi	sp,sp,-152
8110c6e4:	de00012e 	bgeu	sp,et,8110c6ec <vSendLog+0xc>
8110c6e8:	003b68fa 	trap	3
8110c6ec:	dfc02515 	stw	ra,148(sp)
8110c6f0:	df002415 	stw	fp,144(sp)
8110c6f4:	df002404 	addi	fp,sp,144
8110c6f8:	e13fff15 	stw	r4,-4(fp)
    char cBufferLog[128] = "";
8110c6fc:	e03fde8d 	sth	zero,-134(fp)
8110c700:	e03fdf0d 	sth	zero,-132(fp)
8110c704:	e0bfdf84 	addi	r2,fp,-130
8110c708:	00c01f04 	movi	r3,124
8110c70c:	180d883a 	mov	r6,r3
8110c710:	000b883a 	mov	r5,zero
8110c714:	1009883a 	mov	r4,r2
8110c718:	11122140 	call	81112214 <memset>
    unsigned char crc = 0;
8110c71c:	e03fdc05 	stb	zero,-144(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110c720:	e03fdd15 	stw	zero,-140(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110c724:	110c7e00 	call	8110c7e0 <usiGetIdCMD>
8110c728:	e0bfde0d 	sth	r2,-136(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferLog, LOG_SPRINTF, usiIdCMDLocal, cDataIn);
8110c72c:	e0ffde0b 	ldhu	r3,-136(fp)
8110c730:	e0bfde84 	addi	r2,fp,-134
8110c734:	e1ffff17 	ldw	r7,-4(fp)
8110c738:	180d883a 	mov	r6,r3
8110c73c:	01604534 	movhi	r5,33044
8110c740:	29717e04 	addi	r5,r5,-14856
8110c744:	1009883a 	mov	r4,r2
8110c748:	111282c0 	call	8111282c <sprintf>
    crc = ucCrc8wInit( cBufferLog , strlen(cBufferLog));
8110c74c:	e0bfde84 	addi	r2,fp,-134
8110c750:	1009883a 	mov	r4,r2
8110c754:	1112a400 	call	81112a40 <strlen>
8110c758:	1007883a 	mov	r3,r2
8110c75c:	e0bfde84 	addi	r2,fp,-134
8110c760:	180b883a 	mov	r5,r3
8110c764:	1009883a 	mov	r4,r2
8110c768:	110d6300 	call	8110d630 <ucCrc8wInit>
8110c76c:	e0bfdc05 	stb	r2,-144(fp)
    sprintf(cBufferLog, "%s|%hhu;", cBufferLog, crc );
8110c770:	e13fdc03 	ldbu	r4,-144(fp)
8110c774:	e0ffde84 	addi	r3,fp,-134
8110c778:	e0bfde84 	addi	r2,fp,-134
8110c77c:	200f883a 	mov	r7,r4
8110c780:	180d883a 	mov	r6,r3
8110c784:	01604534 	movhi	r5,33044
8110c788:	29717904 	addi	r5,r5,-14876
8110c78c:	1009883a 	mov	r4,r2
8110c790:	111282c0 	call	8111282c <sprintf>

	bSuccees = bSendUART128(cBufferLog, usiIdCMDLocal);
8110c794:	e0bfde0b 	ldhu	r2,-136(fp)
8110c798:	10ffffcc 	andi	r3,r2,65535
8110c79c:	18e0001c 	xori	r3,r3,32768
8110c7a0:	18e00004 	addi	r3,r3,-32768
8110c7a4:	e0bfde84 	addi	r2,fp,-134
8110c7a8:	180b883a 	mov	r5,r3
8110c7ac:	1009883a 	mov	r4,r2
8110c7b0:	110b8700 	call	8110b870 <bSendUART128>
8110c7b4:	e0bfdd15 	stw	r2,-140(fp)

	if ( bSuccees != TRUE ) {
8110c7b8:	e0bfdd17 	ldw	r2,-140(fp)
8110c7bc:	10800060 	cmpeqi	r2,r2,1
8110c7c0:	1000011e 	bne	r2,zero,8110c7c8 <vSendLog+0xe8>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendLog();
8110c7c4:	110e6ac0 	call	8110e6ac <vCouldNotSendLog>
	}
}
8110c7c8:	0001883a 	nop
8110c7cc:	e037883a 	mov	sp,fp
8110c7d0:	dfc00117 	ldw	ra,4(sp)
8110c7d4:	df000017 	ldw	fp,0(sp)
8110c7d8:	dec00204 	addi	sp,sp,8
8110c7dc:	f800283a 	ret

8110c7e0 <usiGetIdCMD>:

unsigned short int usiGetIdCMD ( void ) {
8110c7e0:	deffff04 	addi	sp,sp,-4
8110c7e4:	de00012e 	bgeu	sp,et,8110c7ec <usiGetIdCMD+0xc>
8110c7e8:	003b68fa 	trap	3
8110c7ec:	df000015 	stw	fp,0(sp)
8110c7f0:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
8110c7f4:	d0a0530b 	ldhu	r2,-32436(gp)
8110c7f8:	10ffffcc 	andi	r3,r2,65535
8110c7fc:	00bfffd4 	movui	r2,65535
8110c800:	1880031e 	bne	r3,r2,8110c810 <usiGetIdCMD+0x30>
        usiIdCMD = 1;
8110c804:	00800044 	movi	r2,1
8110c808:	d0a0530d 	sth	r2,-32436(gp)
8110c80c:	00000306 	br	8110c81c <usiGetIdCMD+0x3c>
    else
        usiIdCMD++;
8110c810:	d0a0530b 	ldhu	r2,-32436(gp)
8110c814:	10800044 	addi	r2,r2,1
8110c818:	d0a0530d 	sth	r2,-32436(gp)
    return usiIdCMD;
8110c81c:	d0a0530b 	ldhu	r2,-32436(gp)
}
8110c820:	e037883a 	mov	sp,fp
8110c824:	df000017 	ldw	fp,0(sp)
8110c828:	dec00104 	addi	sp,sp,4
8110c82c:	f800283a 	ret

8110c830 <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
8110c830:	defffb04 	addi	sp,sp,-20
8110c834:	de00012e 	bgeu	sp,et,8110c83c <siPosStr+0xc>
8110c838:	003b68fa 	trap	3
8110c83c:	dfc00415 	stw	ra,16(sp)
8110c840:	df000315 	stw	fp,12(sp)
8110c844:	df000304 	addi	fp,sp,12
8110c848:	e13ffe15 	stw	r4,-8(fp)
8110c84c:	2805883a 	mov	r2,r5
8110c850:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
8110c854:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
8110c858:	e0bfff03 	ldbu	r2,-4(fp)
8110c85c:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
8110c860:	e17ffd04 	addi	r5,fp,-12
8110c864:	e13ffe17 	ldw	r4,-8(fp)
8110c868:	11129f40 	call	811129f4 <strcspn>
}
8110c86c:	e037883a 	mov	sp,fp
8110c870:	dfc00117 	ldw	ra,4(sp)
8110c874:	df000017 	ldw	fp,0(sp)
8110c878:	dec00204 	addi	sp,sp,8
8110c87c:	f800283a 	ret

8110c880 <vTimeoutCheck>:


void vTimeoutCheck (void *p_arg)
{
8110c880:	defffc04 	addi	sp,sp,-16
8110c884:	de00012e 	bgeu	sp,et,8110c88c <vTimeoutCheck+0xc>
8110c888:	003b68fa 	trap	3
8110c88c:	dfc00315 	stw	ra,12(sp)
8110c890:	df000215 	stw	fp,8(sp)
8110c894:	df000204 	addi	fp,sp,8
8110c898:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;

	/* Time to check the (re)transmission buffers, posting a semaphore to sync the task that will threat timeout logic (vTimeoutCheckerTask) */
	error_code = OSSemPost(xSemTimeoutChecker);
8110c89c:	d0a05217 	ldw	r2,-32440(gp)
8110c8a0:	1009883a 	mov	r4,r2
8110c8a4:	112e7900 	call	8112e790 <OSSemPost>
8110c8a8:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE ) {
8110c8ac:	e0bffe03 	ldbu	r2,-8(fp)
8110c8b0:	10000126 	beq	r2,zero,8110c8b8 <vTimeoutCheck+0x38>
		vFailPostBlockingSemTimeoutTask();
8110c8b4:	110e3d40 	call	8110e3d4 <vFailPostBlockingSemTimeoutTask>
	}
}
8110c8b8:	0001883a 	nop
8110c8bc:	e037883a 	mov	sp,fp
8110c8c0:	dfc00117 	ldw	ra,4(sp)
8110c8c4:	df000017 	ldw	fp,0(sp)
8110c8c8:	dec00204 	addi	sp,sp,8
8110c8cc:	f800283a 	ret

8110c8d0 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
8110c8d0:	defff504 	addi	sp,sp,-44
8110c8d4:	de00012e 	bgeu	sp,et,8110c8dc <vLoadDefaultETHConf+0xc>
8110c8d8:	003b68fa 	trap	3
8110c8dc:	dfc00a15 	stw	ra,40(sp)
8110c8e0:	df000915 	stw	fp,36(sp)
8110c8e4:	dc000815 	stw	r16,32(sp)
8110c8e8:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
8110c8ec:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
8110c8f0:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
8110c8f4:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
8110c8f8:	d0a05c17 	ldw	r2,-32400(gp)
8110c8fc:	10800058 	cmpnei	r2,r2,1
8110c900:	1001f61e 	bne	r2,zero,8110d0dc <vLoadDefaultETHConf+0x80c>
8110c904:	110f41c0 	call	8110f41c <bSDcardIsPresent>
8110c908:	1001f426 	beq	r2,zero,8110d0dc <vLoadDefaultETHConf+0x80c>
8110c90c:	110f44c0 	call	8110f44c <bSDcardFAT16Check>
8110c910:	1001f226 	beq	r2,zero,8110d0dc <vLoadDefaultETHConf+0x80c>

		siFile = siOpenFile( ETH_FILE_NAME );
8110c914:	01204534 	movhi	r4,33044
8110c918:	21318104 	addi	r4,r4,-14844
8110c91c:	110f5740 	call	8110f574 <siOpenFile>
8110c920:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
8110c924:	e0bffc0f 	ldh	r2,-16(fp)
8110c928:	1001e816 	blt	r2,zero,8110d0cc <vLoadDefaultETHConf+0x7fc>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
8110c92c:	e0bffd04 	addi	r2,fp,-12
8110c930:	01800204 	movi	r6,8
8110c934:	01400284 	movi	r5,10
8110c938:	1009883a 	mov	r4,r2
8110c93c:	11122140 	call	81112214 <memset>
			p_inteiro = inteiro;
8110c940:	e0bffd04 	addi	r2,fp,-12
8110c944:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
8110c948:	e0bffc0f 	ldh	r2,-16(fp)
8110c94c:	1009883a 	mov	r4,r2
8110c950:	110f5f00 	call	8110f5f0 <cGetNextChar>
8110c954:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
8110c958:	e0bff947 	ldb	r2,-27(fp)
8110c95c:	10800084 	addi	r2,r2,2
8110c960:	10c015a8 	cmpgeui	r3,r2,86
8110c964:	1801cf1e 	bne	r3,zero,8110d0a4 <vLoadDefaultETHConf+0x7d4>
8110c968:	100690ba 	slli	r3,r2,2
8110c96c:	00a04474 	movhi	r2,33041
8110c970:	10b26004 	addi	r2,r2,-13952
8110c974:	1885883a 	add	r2,r3,r2
8110c978:	10800017 	ldw	r2,0(r2)
8110c97c:	1000683a 	jmp	r2
8110c980:	8110cb18 	cmpnei	r4,r16,17196
8110c984:	8110cb0c 	andi	r4,r16,17196
8110c988:	8110d0a4 	muli	r4,r16,17218
8110c98c:	8110d0a4 	muli	r4,r16,17218
8110c990:	8110d0a4 	muli	r4,r16,17218
8110c994:	8110d0a4 	muli	r4,r16,17218
8110c998:	8110d0a4 	muli	r4,r16,17218
8110c99c:	8110d0a4 	muli	r4,r16,17218
8110c9a0:	8110d0a4 	muli	r4,r16,17218
8110c9a4:	8110d0a4 	muli	r4,r16,17218
8110c9a8:	8110d0a4 	muli	r4,r16,17218
8110c9ac:	8110d0a4 	muli	r4,r16,17218
8110c9b0:	8110d0bc 	xorhi	r4,r16,17218
8110c9b4:	8110d0a4 	muli	r4,r16,17218
8110c9b8:	8110d0a4 	muli	r4,r16,17218
8110c9bc:	8110d0bc 	xorhi	r4,r16,17218
8110c9c0:	8110d0a4 	muli	r4,r16,17218
8110c9c4:	8110d0a4 	muli	r4,r16,17218
8110c9c8:	8110d0a4 	muli	r4,r16,17218
8110c9cc:	8110d0a4 	muli	r4,r16,17218
8110c9d0:	8110d0a4 	muli	r4,r16,17218
8110c9d4:	8110d0a4 	muli	r4,r16,17218
8110c9d8:	8110d0a4 	muli	r4,r16,17218
8110c9dc:	8110d0a4 	muli	r4,r16,17218
8110c9e0:	8110d0a4 	muli	r4,r16,17218
8110c9e4:	8110d0a4 	muli	r4,r16,17218
8110c9e8:	8110d0a4 	muli	r4,r16,17218
8110c9ec:	8110d0a4 	muli	r4,r16,17218
8110c9f0:	8110d0a4 	muli	r4,r16,17218
8110c9f4:	8110d0a4 	muli	r4,r16,17218
8110c9f8:	8110d0a4 	muli	r4,r16,17218
8110c9fc:	8110d0a4 	muli	r4,r16,17218
8110ca00:	8110d0a4 	muli	r4,r16,17218
8110ca04:	8110d0a4 	muli	r4,r16,17218
8110ca08:	8110d0bc 	xorhi	r4,r16,17218
8110ca0c:	8110d0a4 	muli	r4,r16,17218
8110ca10:	8110d0a4 	muli	r4,r16,17218
8110ca14:	8110d0a4 	muli	r4,r16,17218
8110ca18:	8110d0a4 	muli	r4,r16,17218
8110ca1c:	8110d0a4 	muli	r4,r16,17218
8110ca20:	8110d0a4 	muli	r4,r16,17218
8110ca24:	8110cad8 	cmpnei	r4,r16,17195
8110ca28:	8110d0a4 	muli	r4,r16,17218
8110ca2c:	8110d0a4 	muli	r4,r16,17218
8110ca30:	8110d0a4 	muli	r4,r16,17218
8110ca34:	8110d0a4 	muli	r4,r16,17218
8110ca38:	8110d0a4 	muli	r4,r16,17218
8110ca3c:	8110d0a4 	muli	r4,r16,17218
8110ca40:	8110d0a4 	muli	r4,r16,17218
8110ca44:	8110d0a4 	muli	r4,r16,17218
8110ca48:	8110d0a4 	muli	r4,r16,17218
8110ca4c:	8110d0a4 	muli	r4,r16,17218
8110ca50:	8110d0a4 	muli	r4,r16,17218
8110ca54:	8110d0a4 	muli	r4,r16,17218
8110ca58:	8110d0a4 	muli	r4,r16,17218
8110ca5c:	8110d0a4 	muli	r4,r16,17218
8110ca60:	8110d0a4 	muli	r4,r16,17218
8110ca64:	8110d0a4 	muli	r4,r16,17218
8110ca68:	8110d0a4 	muli	r4,r16,17218
8110ca6c:	8110d0a4 	muli	r4,r16,17218
8110ca70:	8110d0a4 	muli	r4,r16,17218
8110ca74:	8110d0a4 	muli	r4,r16,17218
8110ca78:	8110d06c 	andhi	r4,r16,17217
8110ca7c:	8110d0a4 	muli	r4,r16,17218
8110ca80:	8110d0a4 	muli	r4,r16,17218
8110ca84:	8110d0a4 	muli	r4,r16,17218
8110ca88:	8110d0a4 	muli	r4,r16,17218
8110ca8c:	8110d0a4 	muli	r4,r16,17218
8110ca90:	8110d0a4 	muli	r4,r16,17218
8110ca94:	8110d0a4 	muli	r4,r16,17218
8110ca98:	8110ce6c 	andhi	r4,r16,17209
8110ca9c:	8110d0a4 	muli	r4,r16,17218
8110caa0:	8110d0a4 	muli	r4,r16,17218
8110caa4:	8110cccc 	andi	r4,r16,17203
8110caa8:	8110cfc4 	addi	r4,r16,17215
8110caac:	8110cc00 	call	88110cc0 <__reset+0x20f0cc0>
8110cab0:	8110d0a4 	muli	r4,r16,17218
8110cab4:	8110d0a4 	muli	r4,r16,17218
8110cab8:	8110d0a4 	muli	r4,r16,17218
8110cabc:	8110cb30 	cmpltui	r4,r16,17196
8110cac0:	8110d0a4 	muli	r4,r16,17218
8110cac4:	8110d0a4 	muli	r4,r16,17218
8110cac8:	8110cf3c 	xorhi	r4,r16,17212
8110cacc:	8110d0a4 	muli	r4,r16,17218
8110cad0:	8110d0a4 	muli	r4,r16,17218
8110cad4:	8110cd9c 	xori	r4,r16,17206
					case 39:// single quote '
						c = cGetNextChar(siFile);
8110cad8:	e0bffc0f 	ldh	r2,-16(fp)
8110cadc:	1009883a 	mov	r4,r2
8110cae0:	110f5f00 	call	8110f5f0 <cGetNextChar>
8110cae4:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
8110cae8:	00000406 	br	8110cafc <vLoadDefaultETHConf+0x22c>
							c = cGetNextChar(siFile);
8110caec:	e0bffc0f 	ldh	r2,-16(fp)
8110caf0:	1009883a 	mov	r4,r2
8110caf4:	110f5f00 	call	8110f5f0 <cGetNextChar>
8110caf8:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
8110cafc:	e0bff947 	ldb	r2,-27(fp)
8110cb00:	108009d8 	cmpnei	r2,r2,39
8110cb04:	103ff91e 	bne	r2,zero,8110caec <__reset+0xfb0ecaec>
							c = cGetNextChar(siFile);
						}
						break;
8110cb08:	00016d06 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
					case -1: 	//EOF
						bEOF = TRUE;
8110cb0c:	00800044 	movi	r2,1
8110cb10:	e0bff815 	stw	r2,-32(fp)
						break;
8110cb14:	00016a06 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
					case -2: 	//EOF
						printf("Problem with SDCard");
8110cb18:	01204534 	movhi	r4,33044
8110cb1c:	21318304 	addi	r4,r4,-14836
8110cb20:	11123dc0 	call	811123dc <printf>
						bEOF = TRUE;
8110cb24:	00800044 	movi	r2,1
8110cb28:	e0bff815 	stw	r2,-32(fp)
						break;
8110cb2c:	00016406 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
8110cb30:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110cb34:	e0bffc0f 	ldh	r2,-16(fp)
8110cb38:	1009883a 	mov	r4,r2
8110cb3c:	110f5f00 	call	8110f5f0 <cGetNextChar>
8110cb40:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110cb44:	d0e00317 	ldw	r3,-32756(gp)
8110cb48:	e0bff947 	ldb	r2,-27(fp)
8110cb4c:	10800044 	addi	r2,r2,1
8110cb50:	1885883a 	add	r2,r3,r2
8110cb54:	10800003 	ldbu	r2,0(r2)
8110cb58:	10803fcc 	andi	r2,r2,255
8110cb5c:	1080010c 	andi	r2,r2,4
8110cb60:	10000626 	beq	r2,zero,8110cb7c <vLoadDefaultETHConf+0x2ac>
									(*p_inteiro) = c;
8110cb64:	e0bffa17 	ldw	r2,-24(fp)
8110cb68:	e0fff943 	ldbu	r3,-27(fp)
8110cb6c:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110cb70:	e0bffa17 	ldw	r2,-24(fp)
8110cb74:	10800044 	addi	r2,r2,1
8110cb78:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
8110cb7c:	e0bff947 	ldb	r2,-27(fp)
8110cb80:	10800ea0 	cmpeqi	r2,r2,58
8110cb84:	1000031e 	bne	r2,zero,8110cb94 <vLoadDefaultETHConf+0x2c4>
8110cb88:	e0bff947 	ldb	r2,-27(fp)
8110cb8c:	10800ed8 	cmpnei	r2,r2,59
8110cb90:	103fe81e 	bne	r2,zero,8110cb34 <__reset+0xfb0ecb34>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110cb94:	e0bffa17 	ldw	r2,-24(fp)
8110cb98:	00c00284 	movi	r3,10
8110cb9c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
8110cba0:	e0bff903 	ldbu	r2,-28(fp)
8110cba4:	10800168 	cmpgeui	r2,r2,5
8110cba8:	1000021e 	bne	r2,zero,8110cbb4 <vLoadDefaultETHConf+0x2e4>
8110cbac:	e43ff903 	ldbu	r16,-28(fp)
8110cbb0:	00000106 	br	8110cbb8 <vLoadDefaultETHConf+0x2e8>
8110cbb4:	04000144 	movi	r16,5
8110cbb8:	e0bffd04 	addi	r2,fp,-12
8110cbbc:	1009883a 	mov	r4,r2
8110cbc0:	1110f680 	call	81110f68 <atoi>
8110cbc4:	1007883a 	mov	r3,r2
8110cbc8:	00a04574 	movhi	r2,33045
8110cbcc:	10bbe204 	addi	r2,r2,-4216
8110cbd0:	1405883a 	add	r2,r2,r16
8110cbd4:	10800404 	addi	r2,r2,16
8110cbd8:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110cbdc:	e0bffd04 	addi	r2,fp,-12
8110cbe0:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110cbe4:	e0bff903 	ldbu	r2,-28(fp)
8110cbe8:	10800044 	addi	r2,r2,1
8110cbec:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110cbf0:	e0bff947 	ldb	r2,-27(fp)
8110cbf4:	10800ed8 	cmpnei	r2,r2,59
8110cbf8:	103fce1e 	bne	r2,zero,8110cb34 <__reset+0xfb0ecb34>

						break;
8110cbfc:	00013006 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
					case 'I':

						ucParser = 0;
8110cc00:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110cc04:	e0bffc0f 	ldh	r2,-16(fp)
8110cc08:	1009883a 	mov	r4,r2
8110cc0c:	110f5f00 	call	8110f5f0 <cGetNextChar>
8110cc10:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110cc14:	d0e00317 	ldw	r3,-32756(gp)
8110cc18:	e0bff947 	ldb	r2,-27(fp)
8110cc1c:	10800044 	addi	r2,r2,1
8110cc20:	1885883a 	add	r2,r3,r2
8110cc24:	10800003 	ldbu	r2,0(r2)
8110cc28:	10803fcc 	andi	r2,r2,255
8110cc2c:	1080010c 	andi	r2,r2,4
8110cc30:	10000626 	beq	r2,zero,8110cc4c <vLoadDefaultETHConf+0x37c>
									(*p_inteiro) = c;
8110cc34:	e0bffa17 	ldw	r2,-24(fp)
8110cc38:	e0fff943 	ldbu	r3,-27(fp)
8110cc3c:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110cc40:	e0bffa17 	ldw	r2,-24(fp)
8110cc44:	10800044 	addi	r2,r2,1
8110cc48:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110cc4c:	e0bff947 	ldb	r2,-27(fp)
8110cc50:	10800ba0 	cmpeqi	r2,r2,46
8110cc54:	1000031e 	bne	r2,zero,8110cc64 <vLoadDefaultETHConf+0x394>
8110cc58:	e0bff947 	ldb	r2,-27(fp)
8110cc5c:	10800ed8 	cmpnei	r2,r2,59
8110cc60:	103fe81e 	bne	r2,zero,8110cc04 <__reset+0xfb0ecc04>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110cc64:	e0bffa17 	ldw	r2,-24(fp)
8110cc68:	00c00284 	movi	r3,10
8110cc6c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
8110cc70:	e0bff903 	ldbu	r2,-28(fp)
8110cc74:	108000e8 	cmpgeui	r2,r2,3
8110cc78:	1000021e 	bne	r2,zero,8110cc84 <vLoadDefaultETHConf+0x3b4>
8110cc7c:	e43ff903 	ldbu	r16,-28(fp)
8110cc80:	00000106 	br	8110cc88 <vLoadDefaultETHConf+0x3b8>
8110cc84:	040000c4 	movi	r16,3
8110cc88:	e0bffd04 	addi	r2,fp,-12
8110cc8c:	1009883a 	mov	r4,r2
8110cc90:	1110f680 	call	81110f68 <atoi>
8110cc94:	1007883a 	mov	r3,r2
8110cc98:	00a04574 	movhi	r2,33045
8110cc9c:	10bbe204 	addi	r2,r2,-4216
8110cca0:	1405883a 	add	r2,r2,r16
8110cca4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110cca8:	e0bffd04 	addi	r2,fp,-12
8110ccac:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110ccb0:	e0bff903 	ldbu	r2,-28(fp)
8110ccb4:	10800044 	addi	r2,r2,1
8110ccb8:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110ccbc:	e0bff947 	ldb	r2,-27(fp)
8110ccc0:	10800ed8 	cmpnei	r2,r2,59
8110ccc4:	103fcf1e 	bne	r2,zero,8110cc04 <__reset+0xfb0ecc04>

						break;
8110ccc8:	0000fd06 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
					case 'G':

						ucParser = 0;
8110cccc:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110ccd0:	e0bffc0f 	ldh	r2,-16(fp)
8110ccd4:	1009883a 	mov	r4,r2
8110ccd8:	110f5f00 	call	8110f5f0 <cGetNextChar>
8110ccdc:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110cce0:	d0e00317 	ldw	r3,-32756(gp)
8110cce4:	e0bff947 	ldb	r2,-27(fp)
8110cce8:	10800044 	addi	r2,r2,1
8110ccec:	1885883a 	add	r2,r3,r2
8110ccf0:	10800003 	ldbu	r2,0(r2)
8110ccf4:	10803fcc 	andi	r2,r2,255
8110ccf8:	1080010c 	andi	r2,r2,4
8110ccfc:	10000626 	beq	r2,zero,8110cd18 <vLoadDefaultETHConf+0x448>
									(*p_inteiro) = c;
8110cd00:	e0bffa17 	ldw	r2,-24(fp)
8110cd04:	e0fff943 	ldbu	r3,-27(fp)
8110cd08:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110cd0c:	e0bffa17 	ldw	r2,-24(fp)
8110cd10:	10800044 	addi	r2,r2,1
8110cd14:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110cd18:	e0bff947 	ldb	r2,-27(fp)
8110cd1c:	10800ba0 	cmpeqi	r2,r2,46
8110cd20:	1000031e 	bne	r2,zero,8110cd30 <vLoadDefaultETHConf+0x460>
8110cd24:	e0bff947 	ldb	r2,-27(fp)
8110cd28:	10800ed8 	cmpnei	r2,r2,59
8110cd2c:	103fe81e 	bne	r2,zero,8110ccd0 <__reset+0xfb0eccd0>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110cd30:	e0bffa17 	ldw	r2,-24(fp)
8110cd34:	00c00284 	movi	r3,10
8110cd38:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
8110cd3c:	e0bff903 	ldbu	r2,-28(fp)
8110cd40:	108000e8 	cmpgeui	r2,r2,3
8110cd44:	1000021e 	bne	r2,zero,8110cd50 <vLoadDefaultETHConf+0x480>
8110cd48:	e43ff903 	ldbu	r16,-28(fp)
8110cd4c:	00000106 	br	8110cd54 <vLoadDefaultETHConf+0x484>
8110cd50:	040000c4 	movi	r16,3
8110cd54:	e0bffd04 	addi	r2,fp,-12
8110cd58:	1009883a 	mov	r4,r2
8110cd5c:	1110f680 	call	81110f68 <atoi>
8110cd60:	1007883a 	mov	r3,r2
8110cd64:	00a04574 	movhi	r2,33045
8110cd68:	10bbe204 	addi	r2,r2,-4216
8110cd6c:	1405883a 	add	r2,r2,r16
8110cd70:	10800104 	addi	r2,r2,4
8110cd74:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110cd78:	e0bffd04 	addi	r2,fp,-12
8110cd7c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110cd80:	e0bff903 	ldbu	r2,-28(fp)
8110cd84:	10800044 	addi	r2,r2,1
8110cd88:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110cd8c:	e0bff947 	ldb	r2,-27(fp)
8110cd90:	10800ed8 	cmpnei	r2,r2,59
8110cd94:	103fce1e 	bne	r2,zero,8110ccd0 <__reset+0xfb0eccd0>

						break;
8110cd98:	0000c906 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
					case 'S':

						ucParser = 0;
8110cd9c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110cda0:	e0bffc0f 	ldh	r2,-16(fp)
8110cda4:	1009883a 	mov	r4,r2
8110cda8:	110f5f00 	call	8110f5f0 <cGetNextChar>
8110cdac:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110cdb0:	d0e00317 	ldw	r3,-32756(gp)
8110cdb4:	e0bff947 	ldb	r2,-27(fp)
8110cdb8:	10800044 	addi	r2,r2,1
8110cdbc:	1885883a 	add	r2,r3,r2
8110cdc0:	10800003 	ldbu	r2,0(r2)
8110cdc4:	10803fcc 	andi	r2,r2,255
8110cdc8:	1080010c 	andi	r2,r2,4
8110cdcc:	10000626 	beq	r2,zero,8110cde8 <vLoadDefaultETHConf+0x518>
									(*p_inteiro) = c;
8110cdd0:	e0bffa17 	ldw	r2,-24(fp)
8110cdd4:	e0fff943 	ldbu	r3,-27(fp)
8110cdd8:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110cddc:	e0bffa17 	ldw	r2,-24(fp)
8110cde0:	10800044 	addi	r2,r2,1
8110cde4:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110cde8:	e0bff947 	ldb	r2,-27(fp)
8110cdec:	10800ba0 	cmpeqi	r2,r2,46
8110cdf0:	1000031e 	bne	r2,zero,8110ce00 <vLoadDefaultETHConf+0x530>
8110cdf4:	e0bff947 	ldb	r2,-27(fp)
8110cdf8:	10800ed8 	cmpnei	r2,r2,59
8110cdfc:	103fe81e 	bne	r2,zero,8110cda0 <__reset+0xfb0ecda0>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110ce00:	e0bffa17 	ldw	r2,-24(fp)
8110ce04:	00c00284 	movi	r3,10
8110ce08:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
8110ce0c:	e0bff903 	ldbu	r2,-28(fp)
8110ce10:	108000e8 	cmpgeui	r2,r2,3
8110ce14:	1000021e 	bne	r2,zero,8110ce20 <vLoadDefaultETHConf+0x550>
8110ce18:	e43ff903 	ldbu	r16,-28(fp)
8110ce1c:	00000106 	br	8110ce24 <vLoadDefaultETHConf+0x554>
8110ce20:	040000c4 	movi	r16,3
8110ce24:	e0bffd04 	addi	r2,fp,-12
8110ce28:	1009883a 	mov	r4,r2
8110ce2c:	1110f680 	call	81110f68 <atoi>
8110ce30:	1007883a 	mov	r3,r2
8110ce34:	00a04574 	movhi	r2,33045
8110ce38:	10bbe204 	addi	r2,r2,-4216
8110ce3c:	1405883a 	add	r2,r2,r16
8110ce40:	10800204 	addi	r2,r2,8
8110ce44:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110ce48:	e0bffd04 	addi	r2,fp,-12
8110ce4c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110ce50:	e0bff903 	ldbu	r2,-28(fp)
8110ce54:	10800044 	addi	r2,r2,1
8110ce58:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110ce5c:	e0bff947 	ldb	r2,-27(fp)
8110ce60:	10800ed8 	cmpnei	r2,r2,59
8110ce64:	103fce1e 	bne	r2,zero,8110cda0 <__reset+0xfb0ecda0>

						break;
8110ce68:	00009506 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
					case 'D':

						ucParser = 0;
8110ce6c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110ce70:	e0bffc0f 	ldh	r2,-16(fp)
8110ce74:	1009883a 	mov	r4,r2
8110ce78:	110f5f00 	call	8110f5f0 <cGetNextChar>
8110ce7c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110ce80:	d0e00317 	ldw	r3,-32756(gp)
8110ce84:	e0bff947 	ldb	r2,-27(fp)
8110ce88:	10800044 	addi	r2,r2,1
8110ce8c:	1885883a 	add	r2,r3,r2
8110ce90:	10800003 	ldbu	r2,0(r2)
8110ce94:	10803fcc 	andi	r2,r2,255
8110ce98:	1080010c 	andi	r2,r2,4
8110ce9c:	10000626 	beq	r2,zero,8110ceb8 <vLoadDefaultETHConf+0x5e8>
									(*p_inteiro) = c;
8110cea0:	e0bffa17 	ldw	r2,-24(fp)
8110cea4:	e0fff943 	ldbu	r3,-27(fp)
8110cea8:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110ceac:	e0bffa17 	ldw	r2,-24(fp)
8110ceb0:	10800044 	addi	r2,r2,1
8110ceb4:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110ceb8:	e0bff947 	ldb	r2,-27(fp)
8110cebc:	10800ba0 	cmpeqi	r2,r2,46
8110cec0:	1000031e 	bne	r2,zero,8110ced0 <vLoadDefaultETHConf+0x600>
8110cec4:	e0bff947 	ldb	r2,-27(fp)
8110cec8:	10800ed8 	cmpnei	r2,r2,59
8110cecc:	103fe81e 	bne	r2,zero,8110ce70 <__reset+0xfb0ece70>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110ced0:	e0bffa17 	ldw	r2,-24(fp)
8110ced4:	00c00284 	movi	r3,10
8110ced8:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
8110cedc:	e0bff903 	ldbu	r2,-28(fp)
8110cee0:	108000e8 	cmpgeui	r2,r2,3
8110cee4:	1000021e 	bne	r2,zero,8110cef0 <vLoadDefaultETHConf+0x620>
8110cee8:	e43ff903 	ldbu	r16,-28(fp)
8110ceec:	00000106 	br	8110cef4 <vLoadDefaultETHConf+0x624>
8110cef0:	040000c4 	movi	r16,3
8110cef4:	e0bffd04 	addi	r2,fp,-12
8110cef8:	1009883a 	mov	r4,r2
8110cefc:	1110f680 	call	81110f68 <atoi>
8110cf00:	1007883a 	mov	r3,r2
8110cf04:	00a04574 	movhi	r2,33045
8110cf08:	10bbe204 	addi	r2,r2,-4216
8110cf0c:	1405883a 	add	r2,r2,r16
8110cf10:	10800304 	addi	r2,r2,12
8110cf14:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110cf18:	e0bffd04 	addi	r2,fp,-12
8110cf1c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110cf20:	e0bff903 	ldbu	r2,-28(fp)
8110cf24:	10800044 	addi	r2,r2,1
8110cf28:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110cf2c:	e0bff947 	ldb	r2,-27(fp)
8110cf30:	10800ed8 	cmpnei	r2,r2,59
8110cf34:	103fce1e 	bne	r2,zero,8110ce70 <__reset+0xfb0ece70>

						break;						
8110cf38:	00006106 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
					case 'P':

						do {
							c = cGetNextChar(siFile);
8110cf3c:	e0bffc0f 	ldh	r2,-16(fp)
8110cf40:	1009883a 	mov	r4,r2
8110cf44:	110f5f00 	call	8110f5f0 <cGetNextChar>
8110cf48:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110cf4c:	d0e00317 	ldw	r3,-32756(gp)
8110cf50:	e0bff947 	ldb	r2,-27(fp)
8110cf54:	10800044 	addi	r2,r2,1
8110cf58:	1885883a 	add	r2,r3,r2
8110cf5c:	10800003 	ldbu	r2,0(r2)
8110cf60:	10803fcc 	andi	r2,r2,255
8110cf64:	1080010c 	andi	r2,r2,4
8110cf68:	10000626 	beq	r2,zero,8110cf84 <vLoadDefaultETHConf+0x6b4>
								(*p_inteiro) = c;
8110cf6c:	e0bffa17 	ldw	r2,-24(fp)
8110cf70:	e0fff943 	ldbu	r3,-27(fp)
8110cf74:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110cf78:	e0bffa17 	ldw	r2,-24(fp)
8110cf7c:	10800044 	addi	r2,r2,1
8110cf80:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110cf84:	e0bff947 	ldb	r2,-27(fp)
8110cf88:	10800ed8 	cmpnei	r2,r2,59
8110cf8c:	103feb1e 	bne	r2,zero,8110cf3c <__reset+0xfb0ecf3c>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110cf90:	e0bffa17 	ldw	r2,-24(fp)
8110cf94:	00c00284 	movi	r3,10
8110cf98:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
8110cf9c:	e0bffd04 	addi	r2,fp,-12
8110cfa0:	1009883a 	mov	r4,r2
8110cfa4:	1110f680 	call	81110f68 <atoi>
8110cfa8:	1007883a 	mov	r3,r2
8110cfac:	00a04574 	movhi	r2,33045
8110cfb0:	10bbe204 	addi	r2,r2,-4216
8110cfb4:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110cfb8:	e0bffd04 	addi	r2,fp,-12
8110cfbc:	e0bffa15 	stw	r2,-24(fp)

						break;
8110cfc0:	00003f06 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110cfc4:	e0bffc0f 	ldh	r2,-16(fp)
8110cfc8:	1009883a 	mov	r4,r2
8110cfcc:	110f5f00 	call	8110f5f0 <cGetNextChar>
8110cfd0:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110cfd4:	d0e00317 	ldw	r3,-32756(gp)
8110cfd8:	e0bff947 	ldb	r2,-27(fp)
8110cfdc:	10800044 	addi	r2,r2,1
8110cfe0:	1885883a 	add	r2,r3,r2
8110cfe4:	10800003 	ldbu	r2,0(r2)
8110cfe8:	10803fcc 	andi	r2,r2,255
8110cfec:	1080010c 	andi	r2,r2,4
8110cff0:	10000626 	beq	r2,zero,8110d00c <vLoadDefaultETHConf+0x73c>
								(*p_inteiro) = c;
8110cff4:	e0bffa17 	ldw	r2,-24(fp)
8110cff8:	e0fff943 	ldbu	r3,-27(fp)
8110cffc:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110d000:	e0bffa17 	ldw	r2,-24(fp)
8110d004:	10800044 	addi	r2,r2,1
8110d008:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110d00c:	e0bff947 	ldb	r2,-27(fp)
8110d010:	10800ed8 	cmpnei	r2,r2,59
8110d014:	103feb1e 	bne	r2,zero,8110cfc4 <__reset+0xfb0ecfc4>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d018:	e0bffa17 	ldw	r2,-24(fp)
8110d01c:	00c00284 	movi	r3,10
8110d020:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
8110d024:	e0bffd04 	addi	r2,fp,-12
8110d028:	1009883a 	mov	r4,r2
8110d02c:	1110f680 	call	81110f68 <atoi>
8110d030:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
8110d034:	e0bffc8f 	ldh	r2,-14(fp)
8110d038:	10800058 	cmpnei	r2,r2,1
8110d03c:	1000051e 	bne	r2,zero,8110d054 <vLoadDefaultETHConf+0x784>
							xConfEth.bDHCP = TRUE;
8110d040:	00a04574 	movhi	r2,33045
8110d044:	10bbe204 	addi	r2,r2,-4216
8110d048:	00c00044 	movi	r3,1
8110d04c:	10c00615 	stw	r3,24(r2)
8110d050:	00000306 	br	8110d060 <vLoadDefaultETHConf+0x790>
						else
							xConfEth.bDHCP = FALSE;
8110d054:	00a04574 	movhi	r2,33045
8110d058:	10bbe204 	addi	r2,r2,-4216
8110d05c:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110d060:	e0bffd04 	addi	r2,fp,-12
8110d064:	e0bffa15 	stw	r2,-24(fp)

						break;
8110d068:	00001506 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
8110d06c:	e0bffc0f 	ldh	r2,-16(fp)
8110d070:	1009883a 	mov	r4,r2
8110d074:	110f5b00 	call	8110f5b0 <siCloseFile>
8110d078:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
8110d07c:	e0bffb17 	ldw	r2,-20(fp)
8110d080:	1000031e 	bne	r2,zero,8110d090 <vLoadDefaultETHConf+0x7c0>
							printf("Problema em fechar o arquivo\n");
8110d084:	01204534 	movhi	r4,33044
8110d088:	21318804 	addi	r4,r4,-14816
8110d08c:	11124e80 	call	811124e8 <puts>

						/* End of Parser File */
						bEOF = TRUE;
8110d090:	00800044 	movi	r2,1
8110d094:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
8110d098:	00800044 	movi	r2,1
8110d09c:	e0bff715 	stw	r2,-36(fp)
						break;
8110d0a0:	00000706 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110d0a4:	e0bff947 	ldb	r2,-27(fp)
8110d0a8:	100b883a 	mov	r5,r2
8110d0ac:	01204534 	movhi	r4,33044
8110d0b0:	21319004 	addi	r4,r4,-14784
8110d0b4:	11123dc0 	call	811123dc <printf>
						break;
8110d0b8:	00000106 	br	8110d0c0 <vLoadDefaultETHConf+0x7f0>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
8110d0bc:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
8110d0c0:	e0bff817 	ldw	r2,-32(fp)
8110d0c4:	103e2026 	beq	r2,zero,8110c948 <__reset+0xfb0ec948>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110d0c8:	00000706 	br	8110d0e8 <vLoadDefaultETHConf+0x818>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
8110d0cc:	01204534 	movhi	r4,33044
8110d0d0:	21319d04 	addi	r4,r4,-14732
8110d0d4:	11124e80 	call	811124e8 <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110d0d8:	00000306 	br	8110d0e8 <vLoadDefaultETHConf+0x818>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
8110d0dc:	01204534 	movhi	r4,33044
8110d0e0:	2131a604 	addi	r4,r4,-14696
8110d0e4:	11124e80 	call	811124e8 <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
8110d0e8:	e0bff717 	ldw	r2,-36(fp)
8110d0ec:	1000541e 	bne	r2,zero,8110d240 <vLoadDefaultETHConf+0x970>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
8110d0f0:	01204534 	movhi	r4,33044
8110d0f4:	2131a904 	addi	r4,r4,-14684
8110d0f8:	11124e80 	call	811124e8 <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
8110d0fc:	01604534 	movhi	r5,33044
8110d100:	29718104 	addi	r5,r5,-14844
8110d104:	01204534 	movhi	r4,33044
8110d108:	2131bd04 	addi	r4,r4,-14604
8110d10c:	11123dc0 	call	811123dc <printf>


		xConfEth.siPortPUS = 17000;
8110d110:	00a04574 	movhi	r2,33045
8110d114:	10bbe204 	addi	r2,r2,-4216
8110d118:	00d09a04 	movi	r3,17000
8110d11c:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
8110d120:	00a04574 	movhi	r2,33045
8110d124:	10bbe204 	addi	r2,r2,-4216
8110d128:	00fff004 	movi	r3,-64
8110d12c:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
8110d130:	00a04574 	movhi	r2,33045
8110d134:	10bbe204 	addi	r2,r2,-4216
8110d138:	00ffea04 	movi	r3,-88
8110d13c:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
8110d140:	00a04574 	movhi	r2,33045
8110d144:	10bbe204 	addi	r2,r2,-4216
8110d148:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
8110d14c:	00a04574 	movhi	r2,33045
8110d150:	10bbe204 	addi	r2,r2,-4216
8110d154:	00c00144 	movi	r3,5
8110d158:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
8110d15c:	00a04574 	movhi	r2,33045
8110d160:	10bbe204 	addi	r2,r2,-4216
8110d164:	00fff004 	movi	r3,-64
8110d168:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
8110d16c:	00a04574 	movhi	r2,33045
8110d170:	10bbe204 	addi	r2,r2,-4216
8110d174:	00ffea04 	movi	r3,-88
8110d178:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
8110d17c:	00a04574 	movhi	r2,33045
8110d180:	10bbe204 	addi	r2,r2,-4216
8110d184:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
8110d188:	00a04574 	movhi	r2,33045
8110d18c:	10bbe204 	addi	r2,r2,-4216
8110d190:	00c00044 	movi	r3,1
8110d194:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
8110d198:	00a04574 	movhi	r2,33045
8110d19c:	10bbe204 	addi	r2,r2,-4216
8110d1a0:	00ffffc4 	movi	r3,-1
8110d1a4:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
8110d1a8:	00a04574 	movhi	r2,33045
8110d1ac:	10bbe204 	addi	r2,r2,-4216
8110d1b0:	00ffffc4 	movi	r3,-1
8110d1b4:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
8110d1b8:	00a04574 	movhi	r2,33045
8110d1bc:	10bbe204 	addi	r2,r2,-4216
8110d1c0:	00ffffc4 	movi	r3,-1
8110d1c4:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
8110d1c8:	00a04574 	movhi	r2,33045
8110d1cc:	10bbe204 	addi	r2,r2,-4216
8110d1d0:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110d1d4:	00a04574 	movhi	r2,33045
8110d1d8:	10bbe204 	addi	r2,r2,-4216
8110d1dc:	00ffff04 	movi	r3,-4
8110d1e0:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110d1e4:	00a04574 	movhi	r2,33045
8110d1e8:	10bbe204 	addi	r2,r2,-4216
8110d1ec:	00fffdc4 	movi	r3,-9
8110d1f0:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110d1f4:	00a04574 	movhi	r2,33045
8110d1f8:	10bbe204 	addi	r2,r2,-4216
8110d1fc:	00c018c4 	movi	r3,99
8110d200:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
8110d204:	00a04574 	movhi	r2,33045
8110d208:	10bbe204 	addi	r2,r2,-4216
8110d20c:	00c01344 	movi	r3,77
8110d210:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
8110d214:	00a04574 	movhi	r2,33045
8110d218:	10bbe204 	addi	r2,r2,-4216
8110d21c:	00c007c4 	movi	r3,31
8110d220:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
8110d224:	00a04574 	movhi	r2,33045
8110d228:	10bbe204 	addi	r2,r2,-4216
8110d22c:	00c01084 	movi	r3,66
8110d230:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
8110d234:	00a04574 	movhi	r2,33045
8110d238:	10bbe204 	addi	r2,r2,-4216
8110d23c:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
8110d240:	e0bff717 	ldw	r2,-36(fp)
}
8110d244:	e6ffff04 	addi	sp,fp,-4
8110d248:	dfc00217 	ldw	ra,8(sp)
8110d24c:	df000117 	ldw	fp,4(sp)
8110d250:	dc000017 	ldw	r16,0(sp)
8110d254:	dec00304 	addi	sp,sp,12
8110d258:	f800283a 	ret

8110d25c <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
8110d25c:	defff004 	addi	sp,sp,-64
8110d260:	de00012e 	bgeu	sp,et,8110d268 <vShowEthConfig+0xc>
8110d264:	003b68fa 	trap	3
8110d268:	dfc00f15 	stw	ra,60(sp)
8110d26c:	df000e15 	stw	fp,56(sp)
8110d270:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
8110d274:	d0a04d17 	ldw	r2,-32460(gp)
8110d278:	100f883a 	mov	r7,r2
8110d27c:	018007c4 	movi	r6,31
8110d280:	01400044 	movi	r5,1
8110d284:	01204534 	movhi	r4,33044
8110d288:	2131c304 	addi	r4,r4,-14580
8110d28c:	11116b00 	call	811116b0 <fwrite>

		memset(buffer,0,40);
8110d290:	01800a04 	movi	r6,40
8110d294:	000b883a 	mov	r5,zero
8110d298:	e13ff604 	addi	r4,fp,-40
8110d29c:	11122140 	call	81112214 <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
8110d2a0:	00a04574 	movhi	r2,33045
8110d2a4:	10bbe204 	addi	r2,r2,-4216
8110d2a8:	10800403 	ldbu	r2,16(r2)
8110d2ac:	11803fcc 	andi	r6,r2,255
8110d2b0:	00a04574 	movhi	r2,33045
8110d2b4:	10bbe204 	addi	r2,r2,-4216
8110d2b8:	10800443 	ldbu	r2,17(r2)
8110d2bc:	11c03fcc 	andi	r7,r2,255
8110d2c0:	00a04574 	movhi	r2,33045
8110d2c4:	10bbe204 	addi	r2,r2,-4216
8110d2c8:	10800483 	ldbu	r2,18(r2)
8110d2cc:	10c03fcc 	andi	r3,r2,255
8110d2d0:	00a04574 	movhi	r2,33045
8110d2d4:	10bbe204 	addi	r2,r2,-4216
8110d2d8:	108004c3 	ldbu	r2,19(r2)
8110d2dc:	11003fcc 	andi	r4,r2,255
8110d2e0:	00a04574 	movhi	r2,33045
8110d2e4:	10bbe204 	addi	r2,r2,-4216
8110d2e8:	10800503 	ldbu	r2,20(r2)
8110d2ec:	11403fcc 	andi	r5,r2,255
8110d2f0:	00a04574 	movhi	r2,33045
8110d2f4:	10bbe204 	addi	r2,r2,-4216
8110d2f8:	10800543 	ldbu	r2,21(r2)
8110d2fc:	10803fcc 	andi	r2,r2,255
8110d300:	d8800315 	stw	r2,12(sp)
8110d304:	d9400215 	stw	r5,8(sp)
8110d308:	d9000115 	stw	r4,4(sp)
8110d30c:	d8c00015 	stw	r3,0(sp)
8110d310:	01604534 	movhi	r5,33044
8110d314:	2971cb04 	addi	r5,r5,-14548
8110d318:	e13ff604 	addi	r4,fp,-40
8110d31c:	111282c0 	call	8111282c <sprintf>
		debug(fp, buffer );
8110d320:	d0a04d17 	ldw	r2,-32460(gp)
8110d324:	e17ff604 	addi	r5,fp,-40
8110d328:	1009883a 	mov	r4,r2
8110d32c:	11110c40 	call	811110c4 <fprintf>

		memset(buffer,0,40);
8110d330:	01800a04 	movi	r6,40
8110d334:	000b883a 	mov	r5,zero
8110d338:	e13ff604 	addi	r4,fp,-40
8110d33c:	11122140 	call	81112214 <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
8110d340:	00a04574 	movhi	r2,33045
8110d344:	10bbe204 	addi	r2,r2,-4216
8110d348:	10800003 	ldbu	r2,0(r2)
8110d34c:	11003fcc 	andi	r4,r2,255
8110d350:	00a04574 	movhi	r2,33045
8110d354:	10bbe204 	addi	r2,r2,-4216
8110d358:	10800043 	ldbu	r2,1(r2)
8110d35c:	11403fcc 	andi	r5,r2,255
8110d360:	00a04574 	movhi	r2,33045
8110d364:	10bbe204 	addi	r2,r2,-4216
8110d368:	10800083 	ldbu	r2,2(r2)
8110d36c:	10c03fcc 	andi	r3,r2,255
8110d370:	00a04574 	movhi	r2,33045
8110d374:	10bbe204 	addi	r2,r2,-4216
8110d378:	108000c3 	ldbu	r2,3(r2)
8110d37c:	10803fcc 	andi	r2,r2,255
8110d380:	d8800115 	stw	r2,4(sp)
8110d384:	d8c00015 	stw	r3,0(sp)
8110d388:	280f883a 	mov	r7,r5
8110d38c:	200d883a 	mov	r6,r4
8110d390:	01604534 	movhi	r5,33044
8110d394:	2971d404 	addi	r5,r5,-14512
8110d398:	e13ff604 	addi	r4,fp,-40
8110d39c:	111282c0 	call	8111282c <sprintf>
		debug(fp, buffer );
8110d3a0:	d0a04d17 	ldw	r2,-32460(gp)
8110d3a4:	e17ff604 	addi	r5,fp,-40
8110d3a8:	1009883a 	mov	r4,r2
8110d3ac:	11110c40 	call	811110c4 <fprintf>

		memset(buffer,0,40);
8110d3b0:	01800a04 	movi	r6,40
8110d3b4:	000b883a 	mov	r5,zero
8110d3b8:	e13ff604 	addi	r4,fp,-40
8110d3bc:	11122140 	call	81112214 <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
8110d3c0:	00a04574 	movhi	r2,33045
8110d3c4:	10bbe204 	addi	r2,r2,-4216
8110d3c8:	10800103 	ldbu	r2,4(r2)
8110d3cc:	11003fcc 	andi	r4,r2,255
8110d3d0:	00a04574 	movhi	r2,33045
8110d3d4:	10bbe204 	addi	r2,r2,-4216
8110d3d8:	10800143 	ldbu	r2,5(r2)
8110d3dc:	11403fcc 	andi	r5,r2,255
8110d3e0:	00a04574 	movhi	r2,33045
8110d3e4:	10bbe204 	addi	r2,r2,-4216
8110d3e8:	10800183 	ldbu	r2,6(r2)
8110d3ec:	10c03fcc 	andi	r3,r2,255
8110d3f0:	00a04574 	movhi	r2,33045
8110d3f4:	10bbe204 	addi	r2,r2,-4216
8110d3f8:	108001c3 	ldbu	r2,7(r2)
8110d3fc:	10803fcc 	andi	r2,r2,255
8110d400:	d8800115 	stw	r2,4(sp)
8110d404:	d8c00015 	stw	r3,0(sp)
8110d408:	280f883a 	mov	r7,r5
8110d40c:	200d883a 	mov	r6,r4
8110d410:	01604534 	movhi	r5,33044
8110d414:	2971da04 	addi	r5,r5,-14488
8110d418:	e13ff604 	addi	r4,fp,-40
8110d41c:	111282c0 	call	8111282c <sprintf>
		debug(fp, buffer );
8110d420:	d0a04d17 	ldw	r2,-32460(gp)
8110d424:	e17ff604 	addi	r5,fp,-40
8110d428:	1009883a 	mov	r4,r2
8110d42c:	11110c40 	call	811110c4 <fprintf>

		memset(buffer,0,40);
8110d430:	01800a04 	movi	r6,40
8110d434:	000b883a 	mov	r5,zero
8110d438:	e13ff604 	addi	r4,fp,-40
8110d43c:	11122140 	call	81112214 <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
8110d440:	00a04574 	movhi	r2,33045
8110d444:	10bbe204 	addi	r2,r2,-4216
8110d448:	10800203 	ldbu	r2,8(r2)
8110d44c:	11003fcc 	andi	r4,r2,255
8110d450:	00a04574 	movhi	r2,33045
8110d454:	10bbe204 	addi	r2,r2,-4216
8110d458:	10800243 	ldbu	r2,9(r2)
8110d45c:	11403fcc 	andi	r5,r2,255
8110d460:	00a04574 	movhi	r2,33045
8110d464:	10bbe204 	addi	r2,r2,-4216
8110d468:	10800283 	ldbu	r2,10(r2)
8110d46c:	10c03fcc 	andi	r3,r2,255
8110d470:	00a04574 	movhi	r2,33045
8110d474:	10bbe204 	addi	r2,r2,-4216
8110d478:	108002c3 	ldbu	r2,11(r2)
8110d47c:	10803fcc 	andi	r2,r2,255
8110d480:	d8800115 	stw	r2,4(sp)
8110d484:	d8c00015 	stw	r3,0(sp)
8110d488:	280f883a 	mov	r7,r5
8110d48c:	200d883a 	mov	r6,r4
8110d490:	01604534 	movhi	r5,33044
8110d494:	2971e104 	addi	r5,r5,-14460
8110d498:	e13ff604 	addi	r4,fp,-40
8110d49c:	111282c0 	call	8111282c <sprintf>
		debug(fp, buffer );
8110d4a0:	d0a04d17 	ldw	r2,-32460(gp)
8110d4a4:	e17ff604 	addi	r5,fp,-40
8110d4a8:	1009883a 	mov	r4,r2
8110d4ac:	11110c40 	call	811110c4 <fprintf>

		memset(buffer,0,40);
8110d4b0:	01800a04 	movi	r6,40
8110d4b4:	000b883a 	mov	r5,zero
8110d4b8:	e13ff604 	addi	r4,fp,-40
8110d4bc:	11122140 	call	81112214 <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
8110d4c0:	00a04574 	movhi	r2,33045
8110d4c4:	10bbe204 	addi	r2,r2,-4216
8110d4c8:	10800303 	ldbu	r2,12(r2)
8110d4cc:	11003fcc 	andi	r4,r2,255
8110d4d0:	00a04574 	movhi	r2,33045
8110d4d4:	10bbe204 	addi	r2,r2,-4216
8110d4d8:	10800343 	ldbu	r2,13(r2)
8110d4dc:	11403fcc 	andi	r5,r2,255
8110d4e0:	00a04574 	movhi	r2,33045
8110d4e4:	10bbe204 	addi	r2,r2,-4216
8110d4e8:	10800383 	ldbu	r2,14(r2)
8110d4ec:	10c03fcc 	andi	r3,r2,255
8110d4f0:	00a04574 	movhi	r2,33045
8110d4f4:	10bbe204 	addi	r2,r2,-4216
8110d4f8:	108003c3 	ldbu	r2,15(r2)
8110d4fc:	10803fcc 	andi	r2,r2,255
8110d500:	d8800115 	stw	r2,4(sp)
8110d504:	d8c00015 	stw	r3,0(sp)
8110d508:	280f883a 	mov	r7,r5
8110d50c:	200d883a 	mov	r6,r4
8110d510:	01604534 	movhi	r5,33044
8110d514:	2971e804 	addi	r5,r5,-14432
8110d518:	e13ff604 	addi	r4,fp,-40
8110d51c:	111282c0 	call	8111282c <sprintf>
		debug(fp, buffer );
8110d520:	d0a04d17 	ldw	r2,-32460(gp)
8110d524:	e17ff604 	addi	r5,fp,-40
8110d528:	1009883a 	mov	r4,r2
8110d52c:	11110c40 	call	811110c4 <fprintf>

		memset(buffer,0,40);
8110d530:	01800a04 	movi	r6,40
8110d534:	000b883a 	mov	r5,zero
8110d538:	e13ff604 	addi	r4,fp,-40
8110d53c:	11122140 	call	81112214 <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
8110d540:	00a04574 	movhi	r2,33045
8110d544:	10bbe204 	addi	r2,r2,-4216
8110d548:	1080058b 	ldhu	r2,22(r2)
8110d54c:	10bfffcc 	andi	r2,r2,65535
8110d550:	100d883a 	mov	r6,r2
8110d554:	01604534 	movhi	r5,33044
8110d558:	2971ef04 	addi	r5,r5,-14404
8110d55c:	e13ff604 	addi	r4,fp,-40
8110d560:	111282c0 	call	8111282c <sprintf>
		debug(fp, buffer );
8110d564:	d0a04d17 	ldw	r2,-32460(gp)
8110d568:	e17ff604 	addi	r5,fp,-40
8110d56c:	1009883a 	mov	r4,r2
8110d570:	11110c40 	call	811110c4 <fprintf>

	}
8110d574:	0001883a 	nop
8110d578:	e037883a 	mov	sp,fp
8110d57c:	dfc00117 	ldw	ra,4(sp)
8110d580:	df000017 	ldw	fp,0(sp)
8110d584:	dec00204 	addi	sp,sp,8
8110d588:	f800283a 	ret

8110d58c <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
8110d58c:	defffb04 	addi	sp,sp,-20
8110d590:	de00012e 	bgeu	sp,et,8110d598 <ucCrc8+0xc>
8110d594:	003b68fa 	trap	3
8110d598:	df000415 	stw	fp,16(sp)
8110d59c:	df000404 	addi	fp,sp,16
8110d5a0:	e13ffd15 	stw	r4,-12(fp)
8110d5a4:	e17ffe15 	stw	r5,-8(fp)
8110d5a8:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
8110d5ac:	e0bffe17 	ldw	r2,-8(fp)
8110d5b0:	1000021e 	bne	r2,zero,8110d5bc <ucCrc8+0x30>
        return 0;
8110d5b4:	0005883a 	mov	r2,zero
8110d5b8:	00001906 	br	8110d620 <ucCrc8+0x94>
    crc &= 0xff;
8110d5bc:	e0bffd17 	ldw	r2,-12(fp)
8110d5c0:	10803fcc 	andi	r2,r2,255
8110d5c4:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
8110d5c8:	e0fffe17 	ldw	r3,-8(fp)
8110d5cc:	e0bfff17 	ldw	r2,-4(fp)
8110d5d0:	1885883a 	add	r2,r3,r2
8110d5d4:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
8110d5d8:	00000d06 	br	8110d610 <ucCrc8+0x84>
        crc = crc8_table[crc ^ *data++];
8110d5dc:	e0bffe17 	ldw	r2,-8(fp)
8110d5e0:	10c00044 	addi	r3,r2,1
8110d5e4:	e0fffe15 	stw	r3,-8(fp)
8110d5e8:	10800003 	ldbu	r2,0(r2)
8110d5ec:	10c03fcc 	andi	r3,r2,255
8110d5f0:	e0bffd17 	ldw	r2,-12(fp)
8110d5f4:	1886f03a 	xor	r3,r3,r2
8110d5f8:	00a04534 	movhi	r2,33044
8110d5fc:	10b1f2c4 	addi	r2,r2,-14389
8110d600:	10c5883a 	add	r2,r2,r3
8110d604:	10800003 	ldbu	r2,0(r2)
8110d608:	10803fcc 	andi	r2,r2,255
8110d60c:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110d610:	e0fffe17 	ldw	r3,-8(fp)
8110d614:	e0bffc17 	ldw	r2,-16(fp)
8110d618:	18bff036 	bltu	r3,r2,8110d5dc <__reset+0xfb0ed5dc>
        crc = crc8_table[crc ^ *data++];
    return crc;
8110d61c:	e0bffd17 	ldw	r2,-12(fp)
}
8110d620:	e037883a 	mov	sp,fp
8110d624:	df000017 	ldw	fp,0(sp)
8110d628:	dec00104 	addi	sp,sp,4
8110d62c:	f800283a 	ret

8110d630 <ucCrc8wInit>:

unsigned char ucCrc8wInit(char const *data, size_t len)
{
8110d630:	defffb04 	addi	sp,sp,-20
8110d634:	de00012e 	bgeu	sp,et,8110d63c <ucCrc8wInit+0xc>
8110d638:	003b68fa 	trap	3
8110d63c:	dfc00415 	stw	ra,16(sp)
8110d640:	df000315 	stw	fp,12(sp)
8110d644:	df000304 	addi	fp,sp,12
8110d648:	e13ffe15 	stw	r4,-8(fp)
8110d64c:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;
	crc = ucCrc8(0, NULL, 0);
8110d650:	000d883a 	mov	r6,zero
8110d654:	000b883a 	mov	r5,zero
8110d658:	0009883a 	mov	r4,zero
8110d65c:	110d58c0 	call	8110d58c <ucCrc8>
8110d660:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, (unsigned char const *)data, len);
8110d664:	e0bffd03 	ldbu	r2,-12(fp)
8110d668:	e1bfff17 	ldw	r6,-4(fp)
8110d66c:	e17ffe17 	ldw	r5,-8(fp)
8110d670:	1009883a 	mov	r4,r2
8110d674:	110d58c0 	call	8110d58c <ucCrc8>
}
8110d678:	e037883a 	mov	sp,fp
8110d67c:	dfc00117 	ldw	ra,4(sp)
8110d680:	df000017 	ldw	fp,0(sp)
8110d684:	dec00204 	addi	sp,sp,8
8110d688:	f800283a 	ret

8110d68c <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
8110d68c:	defff904 	addi	sp,sp,-28
8110d690:	de00012e 	bgeu	sp,et,8110d698 <printErrorTask+0xc>
8110d694:	003b68fa 	trap	3
8110d698:	dfc00615 	stw	ra,24(sp)
8110d69c:	df000515 	stw	fp,20(sp)
8110d6a0:	df000504 	addi	fp,sp,20
8110d6a4:	2005883a 	mov	r2,r4
8110d6a8:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
8110d6ac:	e03ffb15 	stw	zero,-20(fp)
8110d6b0:	e03ffc15 	stw	zero,-16(fp)
8110d6b4:	e03ffd15 	stw	zero,-12(fp)
8110d6b8:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
8110d6bc:	e0bfff03 	ldbu	r2,-4(fp)
8110d6c0:	100d883a 	mov	r6,r2
8110d6c4:	01604534 	movhi	r5,33044
8110d6c8:	29723304 	addi	r5,r5,-14132
8110d6cc:	e13ffb04 	addi	r4,fp,-20
8110d6d0:	111282c0 	call	8111282c <sprintf>
		debug(fp, buffer);
8110d6d4:	d0a04d17 	ldw	r2,-32460(gp)
8110d6d8:	e17ffb04 	addi	r5,fp,-20
8110d6dc:	1009883a 	mov	r4,r2
8110d6e0:	11110c40 	call	811110c4 <fprintf>
	}
8110d6e4:	0001883a 	nop
8110d6e8:	e037883a 	mov	sp,fp
8110d6ec:	dfc00117 	ldw	ra,4(sp)
8110d6f0:	df000017 	ldw	fp,0(sp)
8110d6f4:	dec00204 	addi	sp,sp,8
8110d6f8:	f800283a 	ret

8110d6fc <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
8110d6fc:	defffd04 	addi	sp,sp,-12
8110d700:	de00012e 	bgeu	sp,et,8110d708 <vFailCreateMutexSResources+0xc>
8110d704:	003b68fa 	trap	3
8110d708:	dfc00215 	stw	ra,8(sp)
8110d70c:	df000115 	stw	fp,4(sp)
8110d710:	df000104 	addi	fp,sp,4
8110d714:	2005883a 	mov	r2,r4
8110d718:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)\n");
8110d71c:	d0a04d17 	ldw	r2,-32460(gp)
8110d720:	100f883a 	mov	r7,r2
8110d724:	018008c4 	movi	r6,35
8110d728:	01400044 	movi	r5,1
8110d72c:	01204534 	movhi	r4,33044
8110d730:	21323604 	addi	r4,r4,-14120
8110d734:	11116b00 	call	811116b0 <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
8110d738:	e0bfff03 	ldbu	r2,-4(fp)
8110d73c:	1009883a 	mov	r4,r2
8110d740:	110d68c0 	call	8110d68c <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d744:	0001883a 	nop
8110d748:	e037883a 	mov	sp,fp
8110d74c:	dfc00117 	ldw	ra,4(sp)
8110d750:	df000017 	ldw	fp,0(sp)
8110d754:	dec00204 	addi	sp,sp,8
8110d758:	f800283a 	ret

8110d75c <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
8110d75c:	defffe04 	addi	sp,sp,-8
8110d760:	de00012e 	bgeu	sp,et,8110d768 <vFailCreateSemaphoreResources+0xc>
8110d764:	003b68fa 	trap	3
8110d768:	dfc00115 	stw	ra,4(sp)
8110d76c:	df000015 	stw	fp,0(sp)
8110d770:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)\n");
8110d774:	d0a04d17 	ldw	r2,-32460(gp)
8110d778:	100f883a 	mov	r7,r2
8110d77c:	01800984 	movi	r6,38
8110d780:	01400044 	movi	r5,1
8110d784:	01204534 	movhi	r4,33044
8110d788:	21323f04 	addi	r4,r4,-14084
8110d78c:	11116b00 	call	811116b0 <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d790:	0001883a 	nop
8110d794:	e037883a 	mov	sp,fp
8110d798:	dfc00117 	ldw	ra,4(sp)
8110d79c:	df000017 	ldw	fp,0(sp)
8110d7a0:	dec00204 	addi	sp,sp,8
8110d7a4:	f800283a 	ret

8110d7a8 <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
8110d7a8:	defffe04 	addi	sp,sp,-8
8110d7ac:	de00012e 	bgeu	sp,et,8110d7b4 <vFailTestCriticasParts+0xc>
8110d7b0:	003b68fa 	trap	3
8110d7b4:	dfc00115 	stw	ra,4(sp)
8110d7b8:	df000015 	stw	fp,0(sp)
8110d7bc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)\n");
8110d7c0:	d0a04d17 	ldw	r2,-32460(gp)
8110d7c4:	100f883a 	mov	r7,r2
8110d7c8:	018007c4 	movi	r6,31
8110d7cc:	01400044 	movi	r5,1
8110d7d0:	01204534 	movhi	r4,33044
8110d7d4:	21324904 	addi	r4,r4,-14044
8110d7d8:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d7dc:	0001883a 	nop
8110d7e0:	e037883a 	mov	sp,fp
8110d7e4:	dfc00117 	ldw	ra,4(sp)
8110d7e8:	df000017 	ldw	fp,0(sp)
8110d7ec:	dec00204 	addi	sp,sp,8
8110d7f0:	f800283a 	ret

8110d7f4 <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
8110d7f4:	defffe04 	addi	sp,sp,-8
8110d7f8:	de00012e 	bgeu	sp,et,8110d800 <vFailSendxSemCommInit+0xc>
8110d7fc:	003b68fa 	trap	3
8110d800:	dfc00115 	stw	ra,4(sp)
8110d804:	df000015 	stw	fp,0(sp)
8110d808:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
8110d80c:	d0a04d17 	ldw	r2,-32460(gp)
8110d810:	100f883a 	mov	r7,r2
8110d814:	01800744 	movi	r6,29
8110d818:	01400044 	movi	r5,1
8110d81c:	01204534 	movhi	r4,33044
8110d820:	21325104 	addi	r4,r4,-14012
8110d824:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)\n");
8110d828:	d0a04d17 	ldw	r2,-32460(gp)
8110d82c:	100f883a 	mov	r7,r2
8110d830:	01800a44 	movi	r6,41
8110d834:	01400044 	movi	r5,1
8110d838:	01204534 	movhi	r4,33044
8110d83c:	21325904 	addi	r4,r4,-13980
8110d840:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d844:	0001883a 	nop
8110d848:	e037883a 	mov	sp,fp
8110d84c:	dfc00117 	ldw	ra,4(sp)
8110d850:	df000017 	ldw	fp,0(sp)
8110d854:	dec00204 	addi	sp,sp,8
8110d858:	f800283a 	ret

8110d85c <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
8110d85c:	defffe04 	addi	sp,sp,-8
8110d860:	de00012e 	bgeu	sp,et,8110d868 <vFailSendPreParsedSemaphore+0xc>
8110d864:	003b68fa 	trap	3
8110d868:	dfc00115 	stw	ra,4(sp)
8110d86c:	df000015 	stw	fp,0(sp)
8110d870:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)\n");
8110d874:	d0a04d17 	ldw	r2,-32460(gp)
8110d878:	100f883a 	mov	r7,r2
8110d87c:	01800904 	movi	r6,36
8110d880:	01400044 	movi	r5,1
8110d884:	01204534 	movhi	r4,33044
8110d888:	21326404 	addi	r4,r4,-13936
8110d88c:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d890:	0001883a 	nop
8110d894:	e037883a 	mov	sp,fp
8110d898:	dfc00117 	ldw	ra,4(sp)
8110d89c:	df000017 	ldw	fp,0(sp)
8110d8a0:	dec00204 	addi	sp,sp,8
8110d8a4:	f800283a 	ret

8110d8a8 <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110d8a8:	defffe04 	addi	sp,sp,-8
8110d8ac:	de00012e 	bgeu	sp,et,8110d8b4 <vFailSendPreAckReceiverSemaphore+0xc>
8110d8b0:	003b68fa 	trap	3
8110d8b4:	dfc00115 	stw	ra,4(sp)
8110d8b8:	df000015 	stw	fp,0(sp)
8110d8bc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)\n");
8110d8c0:	d0a04d17 	ldw	r2,-32460(gp)
8110d8c4:	100f883a 	mov	r7,r2
8110d8c8:	01800a44 	movi	r6,41
8110d8cc:	01400044 	movi	r5,1
8110d8d0:	01204534 	movhi	r4,33044
8110d8d4:	21326e04 	addi	r4,r4,-13896
8110d8d8:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d8dc:	0001883a 	nop
8110d8e0:	e037883a 	mov	sp,fp
8110d8e4:	dfc00117 	ldw	ra,4(sp)
8110d8e8:	df000017 	ldw	fp,0(sp)
8110d8ec:	dec00204 	addi	sp,sp,8
8110d8f0:	f800283a 	ret

8110d8f4 <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110d8f4:	defffe04 	addi	sp,sp,-8
8110d8f8:	de00012e 	bgeu	sp,et,8110d900 <vFailSendPreAckSenderSemaphore+0xc>
8110d8fc:	003b68fa 	trap	3
8110d900:	dfc00115 	stw	ra,4(sp)
8110d904:	df000015 	stw	fp,0(sp)
8110d908:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)\n");
8110d90c:	d0a04d17 	ldw	r2,-32460(gp)
8110d910:	100f883a 	mov	r7,r2
8110d914:	018009c4 	movi	r6,39
8110d918:	01400044 	movi	r5,1
8110d91c:	01204534 	movhi	r4,33044
8110d920:	21327904 	addi	r4,r4,-13852
8110d924:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d928:	0001883a 	nop
8110d92c:	e037883a 	mov	sp,fp
8110d930:	dfc00117 	ldw	ra,4(sp)
8110d934:	df000017 	ldw	fp,0(sp)
8110d938:	dec00204 	addi	sp,sp,8
8110d93c:	f800283a 	ret

8110d940 <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110d940:	defffe04 	addi	sp,sp,-8
8110d944:	de00012e 	bgeu	sp,et,8110d94c <vFailGetCountSemaphoreSenderTask+0xc>
8110d948:	003b68fa 	trap	3
8110d94c:	dfc00115 	stw	ra,4(sp)
8110d950:	df000015 	stw	fp,0(sp)
8110d954:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)\n");
8110d958:	d0a04d17 	ldw	r2,-32460(gp)
8110d95c:	100f883a 	mov	r7,r2
8110d960:	01800a44 	movi	r6,41
8110d964:	01400044 	movi	r5,1
8110d968:	01204534 	movhi	r4,33044
8110d96c:	21328304 	addi	r4,r4,-13812
8110d970:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110d974:	d0a04d17 	ldw	r2,-32460(gp)
8110d978:	100f883a 	mov	r7,r2
8110d97c:	01801104 	movi	r6,68
8110d980:	01400044 	movi	r5,1
8110d984:	01204534 	movhi	r4,33044
8110d988:	21328e04 	addi	r4,r4,-13768
8110d98c:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d990:	0001883a 	nop
8110d994:	e037883a 	mov	sp,fp
8110d998:	dfc00117 	ldw	ra,4(sp)
8110d99c:	df000017 	ldw	fp,0(sp)
8110d9a0:	dec00204 	addi	sp,sp,8
8110d9a4:	f800283a 	ret

8110d9a8 <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110d9a8:	defffe04 	addi	sp,sp,-8
8110d9ac:	de00012e 	bgeu	sp,et,8110d9b4 <vFailGetMutexSenderTask+0xc>
8110d9b0:	003b68fa 	trap	3
8110d9b4:	dfc00115 	stw	ra,4(sp)
8110d9b8:	df000015 	stw	fp,0(sp)
8110d9bc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)\n");
8110d9c0:	d0a04d17 	ldw	r2,-32460(gp)
8110d9c4:	100f883a 	mov	r7,r2
8110d9c8:	01800804 	movi	r6,32
8110d9cc:	01400044 	movi	r5,1
8110d9d0:	01204534 	movhi	r4,33044
8110d9d4:	2132a004 	addi	r4,r4,-13696
8110d9d8:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110d9dc:	d0a04d17 	ldw	r2,-32460(gp)
8110d9e0:	100f883a 	mov	r7,r2
8110d9e4:	01801084 	movi	r6,66
8110d9e8:	01400044 	movi	r5,1
8110d9ec:	01204534 	movhi	r4,33044
8110d9f0:	2132a904 	addi	r4,r4,-13660
8110d9f4:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d9f8:	0001883a 	nop
8110d9fc:	e037883a 	mov	sp,fp
8110da00:	dfc00117 	ldw	ra,4(sp)
8110da04:	df000017 	ldw	fp,0(sp)
8110da08:	dec00204 	addi	sp,sp,8
8110da0c:	f800283a 	ret

8110da10 <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110da10:	defffe04 	addi	sp,sp,-8
8110da14:	de00012e 	bgeu	sp,et,8110da1c <vFailGetCountSemaphoreReceiverTask+0xc>
8110da18:	003b68fa 	trap	3
8110da1c:	dfc00115 	stw	ra,4(sp)
8110da20:	df000015 	stw	fp,0(sp)
8110da24:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)\n");
8110da28:	d0a04d17 	ldw	r2,-32460(gp)
8110da2c:	100f883a 	mov	r7,r2
8110da30:	01800ac4 	movi	r6,43
8110da34:	01400044 	movi	r5,1
8110da38:	01204534 	movhi	r4,33044
8110da3c:	2132ba04 	addi	r4,r4,-13592
8110da40:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110da44:	d0a04d17 	ldw	r2,-32460(gp)
8110da48:	100f883a 	mov	r7,r2
8110da4c:	01801184 	movi	r6,70
8110da50:	01400044 	movi	r5,1
8110da54:	01204534 	movhi	r4,33044
8110da58:	2132c504 	addi	r4,r4,-13548
8110da5c:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110da60:	0001883a 	nop
8110da64:	e037883a 	mov	sp,fp
8110da68:	dfc00117 	ldw	ra,4(sp)
8110da6c:	df000017 	ldw	fp,0(sp)
8110da70:	dec00204 	addi	sp,sp,8
8110da74:	f800283a 	ret

8110da78 <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110da78:	defffe04 	addi	sp,sp,-8
8110da7c:	de00012e 	bgeu	sp,et,8110da84 <vFailGetMutexReceiverTask+0xc>
8110da80:	003b68fa 	trap	3
8110da84:	dfc00115 	stw	ra,4(sp)
8110da88:	df000015 	stw	fp,0(sp)
8110da8c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)\n");
8110da90:	d0a04d17 	ldw	r2,-32460(gp)
8110da94:	100f883a 	mov	r7,r2
8110da98:	01800884 	movi	r6,34
8110da9c:	01400044 	movi	r5,1
8110daa0:	01204534 	movhi	r4,33044
8110daa4:	2132d704 	addi	r4,r4,-13476
8110daa8:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110daac:	d0a04d17 	ldw	r2,-32460(gp)
8110dab0:	100f883a 	mov	r7,r2
8110dab4:	01801104 	movi	r6,68
8110dab8:	01400044 	movi	r5,1
8110dabc:	01204534 	movhi	r4,33044
8110dac0:	2132e004 	addi	r4,r4,-13440
8110dac4:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110dac8:	0001883a 	nop
8110dacc:	e037883a 	mov	sp,fp
8110dad0:	dfc00117 	ldw	ra,4(sp)
8110dad4:	df000017 	ldw	fp,0(sp)
8110dad8:	dec00204 	addi	sp,sp,8
8110dadc:	f800283a 	ret

8110dae0 <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110dae0:	defffe04 	addi	sp,sp,-8
8110dae4:	de00012e 	bgeu	sp,et,8110daec <vFailGetMutexTxUARTSenderTask+0xc>
8110dae8:	003b68fa 	trap	3
8110daec:	dfc00115 	stw	ra,4(sp)
8110daf0:	df000015 	stw	fp,0(sp)
8110daf4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)\n");
8110daf8:	d0a04d17 	ldw	r2,-32460(gp)
8110dafc:	100f883a 	mov	r7,r2
8110db00:	01800984 	movi	r6,38
8110db04:	01400044 	movi	r5,1
8110db08:	01204534 	movhi	r4,33044
8110db0c:	2132f204 	addi	r4,r4,-13368
8110db10:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110db14:	d0a04d17 	ldw	r2,-32460(gp)
8110db18:	100f883a 	mov	r7,r2
8110db1c:	01801044 	movi	r6,65
8110db20:	01400044 	movi	r5,1
8110db24:	01204534 	movhi	r4,33044
8110db28:	2132fc04 	addi	r4,r4,-13328
8110db2c:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110db30:	0001883a 	nop
8110db34:	e037883a 	mov	sp,fp
8110db38:	dfc00117 	ldw	ra,4(sp)
8110db3c:	df000017 	ldw	fp,0(sp)
8110db40:	dec00204 	addi	sp,sp,8
8110db44:	f800283a 	ret

8110db48 <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110db48:	defffe04 	addi	sp,sp,-8
8110db4c:	de00012e 	bgeu	sp,et,8110db54 <vFailGetMacRTC+0xc>
8110db50:	003b68fa 	trap	3
8110db54:	dfc00115 	stw	ra,4(sp)
8110db58:	df000015 	stw	fp,0(sp)
8110db5c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC\n");
8110db60:	d0a04d17 	ldw	r2,-32460(gp)
8110db64:	100f883a 	mov	r7,r2
8110db68:	018003c4 	movi	r6,15
8110db6c:	01400044 	movi	r5,1
8110db70:	01204534 	movhi	r4,33044
8110db74:	21330d04 	addi	r4,r4,-13260
8110db78:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110db7c:	0001883a 	nop
8110db80:	e037883a 	mov	sp,fp
8110db84:	dfc00117 	ldw	ra,4(sp)
8110db88:	df000017 	ldw	fp,0(sp)
8110db8c:	dec00204 	addi	sp,sp,8
8110db90:	f800283a 	ret

8110db94 <vFailInitialization>:


void vFailInitialization( void )
{
8110db94:	defffe04 	addi	sp,sp,-8
8110db98:	de00012e 	bgeu	sp,et,8110dba0 <vFailInitialization+0xc>
8110db9c:	003b68fa 	trap	3
8110dba0:	dfc00115 	stw	ra,4(sp)
8110dba4:	df000015 	stw	fp,0(sp)
8110dba8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization\n");
8110dbac:	d0a04d17 	ldw	r2,-32460(gp)
8110dbb0:	100f883a 	mov	r7,r2
8110dbb4:	01800504 	movi	r6,20
8110dbb8:	01400044 	movi	r5,1
8110dbbc:	01204534 	movhi	r4,33044
8110dbc0:	21331104 	addi	r4,r4,-13244
8110dbc4:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110dbc8:	0001883a 	nop
8110dbcc:	e037883a 	mov	sp,fp
8110dbd0:	dfc00117 	ldw	ra,4(sp)
8110dbd4:	df000017 	ldw	fp,0(sp)
8110dbd8:	dec00204 	addi	sp,sp,8
8110dbdc:	f800283a 	ret

8110dbe0 <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110dbe0:	defffe04 	addi	sp,sp,-8
8110dbe4:	de00012e 	bgeu	sp,et,8110dbec <vFailReceiverCreate+0xc>
8110dbe8:	003b68fa 	trap	3
8110dbec:	dfc00115 	stw	ra,4(sp)
8110dbf0:	df000015 	stw	fp,0(sp)
8110dbf4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask\n");
8110dbf8:	d0a04d17 	ldw	r2,-32460(gp)
8110dbfc:	100f883a 	mov	r7,r2
8110dc00:	01800484 	movi	r6,18
8110dc04:	01400044 	movi	r5,1
8110dc08:	01204534 	movhi	r4,33044
8110dc0c:	21331704 	addi	r4,r4,-13220
8110dc10:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110dc14:	0001883a 	nop
8110dc18:	e037883a 	mov	sp,fp
8110dc1c:	dfc00117 	ldw	ra,4(sp)
8110dc20:	df000017 	ldw	fp,0(sp)
8110dc24:	dec00204 	addi	sp,sp,8
8110dc28:	f800283a 	ret

8110dc2c <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110dc2c:	defffe04 	addi	sp,sp,-8
8110dc30:	de00012e 	bgeu	sp,et,8110dc38 <vFailSenderCreate+0xc>
8110dc34:	003b68fa 	trap	3
8110dc38:	dfc00115 	stw	ra,4(sp)
8110dc3c:	df000015 	stw	fp,0(sp)
8110dc40:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate\n");
8110dc44:	d0a04d17 	ldw	r2,-32460(gp)
8110dc48:	100f883a 	mov	r7,r2
8110dc4c:	01800484 	movi	r6,18
8110dc50:	01400044 	movi	r5,1
8110dc54:	01204534 	movhi	r4,33044
8110dc58:	21331c04 	addi	r4,r4,-13200
8110dc5c:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110dc60:	0001883a 	nop
8110dc64:	e037883a 	mov	sp,fp
8110dc68:	dfc00117 	ldw	ra,4(sp)
8110dc6c:	df000017 	ldw	fp,0(sp)
8110dc70:	dec00204 	addi	sp,sp,8
8110dc74:	f800283a 	ret

8110dc78 <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110dc78:	defffe04 	addi	sp,sp,-8
8110dc7c:	de00012e 	bgeu	sp,et,8110dc84 <vFailDeleteInitialization+0xc>
8110dc80:	003b68fa 	trap	3
8110dc84:	dfc00115 	stw	ra,4(sp)
8110dc88:	df000015 	stw	fp,0(sp)
8110dc8c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization\n");
8110dc90:	d0a04d17 	ldw	r2,-32460(gp)
8110dc94:	100f883a 	mov	r7,r2
8110dc98:	01800684 	movi	r6,26
8110dc9c:	01400044 	movi	r5,1
8110dca0:	01204534 	movhi	r4,33044
8110dca4:	21332104 	addi	r4,r4,-13180
8110dca8:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110dcac:	0001883a 	nop
8110dcb0:	e037883a 	mov	sp,fp
8110dcb4:	dfc00117 	ldw	ra,4(sp)
8110dcb8:	df000017 	ldw	fp,0(sp)
8110dcbc:	dec00204 	addi	sp,sp,8
8110dcc0:	f800283a 	ret

8110dcc4 <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110dcc4:	defffe04 	addi	sp,sp,-8
8110dcc8:	de00012e 	bgeu	sp,et,8110dcd0 <vFailSetCountSemaphorexBuffer32+0xc>
8110dccc:	003b68fa 	trap	3
8110dcd0:	dfc00115 	stw	ra,4(sp)
8110dcd4:	df000015 	stw	fp,0(sp)
8110dcd8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)\n");
8110dcdc:	d0a04d17 	ldw	r2,-32460(gp)
8110dce0:	100f883a 	mov	r7,r2
8110dce4:	01800a04 	movi	r6,40
8110dce8:	01400044 	movi	r5,1
8110dcec:	01204534 	movhi	r4,33044
8110dcf0:	21332804 	addi	r4,r4,-13152
8110dcf4:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110dcf8:	d0a04d17 	ldw	r2,-32460(gp)
8110dcfc:	100f883a 	mov	r7,r2
8110dd00:	018008c4 	movi	r6,35
8110dd04:	01400044 	movi	r5,1
8110dd08:	01204534 	movhi	r4,33044
8110dd0c:	21333304 	addi	r4,r4,-13108
8110dd10:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110dd14:	0001883a 	nop
8110dd18:	e037883a 	mov	sp,fp
8110dd1c:	dfc00117 	ldw	ra,4(sp)
8110dd20:	df000017 	ldw	fp,0(sp)
8110dd24:	dec00204 	addi	sp,sp,8
8110dd28:	f800283a 	ret

8110dd2c <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110dd2c:	defffe04 	addi	sp,sp,-8
8110dd30:	de00012e 	bgeu	sp,et,8110dd38 <vFailSetCountSemaphorexBuffer64+0xc>
8110dd34:	003b68fa 	trap	3
8110dd38:	dfc00115 	stw	ra,4(sp)
8110dd3c:	df000015 	stw	fp,0(sp)
8110dd40:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)\n");
8110dd44:	d0a04d17 	ldw	r2,-32460(gp)
8110dd48:	100f883a 	mov	r7,r2
8110dd4c:	01800a04 	movi	r6,40
8110dd50:	01400044 	movi	r5,1
8110dd54:	01204534 	movhi	r4,33044
8110dd58:	21333c04 	addi	r4,r4,-13072
8110dd5c:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110dd60:	d0a04d17 	ldw	r2,-32460(gp)
8110dd64:	100f883a 	mov	r7,r2
8110dd68:	018008c4 	movi	r6,35
8110dd6c:	01400044 	movi	r5,1
8110dd70:	01204534 	movhi	r4,33044
8110dd74:	21333304 	addi	r4,r4,-13108
8110dd78:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110dd7c:	0001883a 	nop
8110dd80:	e037883a 	mov	sp,fp
8110dd84:	dfc00117 	ldw	ra,4(sp)
8110dd88:	df000017 	ldw	fp,0(sp)
8110dd8c:	dec00204 	addi	sp,sp,8
8110dd90:	f800283a 	ret

8110dd94 <vFailSetCountSemaphorexBuffer128>:

void vFailSetCountSemaphorexBuffer128( void )
{
8110dd94:	defffe04 	addi	sp,sp,-8
8110dd98:	de00012e 	bgeu	sp,et,8110dda0 <vFailSetCountSemaphorexBuffer128+0xc>
8110dd9c:	003b68fa 	trap	3
8110dda0:	dfc00115 	stw	ra,4(sp)
8110dda4:	df000015 	stw	fp,0(sp)
8110dda8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)\n");
8110ddac:	d0a04d17 	ldw	r2,-32460(gp)
8110ddb0:	100f883a 	mov	r7,r2
8110ddb4:	01800a44 	movi	r6,41
8110ddb8:	01400044 	movi	r5,1
8110ddbc:	01204534 	movhi	r4,33044
8110ddc0:	21334704 	addi	r4,r4,-13028
8110ddc4:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110ddc8:	d0a04d17 	ldw	r2,-32460(gp)
8110ddcc:	100f883a 	mov	r7,r2
8110ddd0:	018008c4 	movi	r6,35
8110ddd4:	01400044 	movi	r5,1
8110ddd8:	01204534 	movhi	r4,33044
8110dddc:	21333304 	addi	r4,r4,-13108
8110dde0:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110dde4:	0001883a 	nop
8110dde8:	e037883a 	mov	sp,fp
8110ddec:	dfc00117 	ldw	ra,4(sp)
8110ddf0:	df000017 	ldw	fp,0(sp)
8110ddf4:	dec00204 	addi	sp,sp,8
8110ddf8:	f800283a 	ret

8110ddfc <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
8110ddfc:	defffe04 	addi	sp,sp,-8
8110de00:	de00012e 	bgeu	sp,et,8110de08 <vFailFoundBufferRetransmission+0xc>
8110de04:	003b68fa 	trap	3
8110de08:	dfc00115 	stw	ra,4(sp)
8110de0c:	df000015 	stw	fp,0(sp)
8110de10:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailFoundBufferRetransmission. (exit)\n");
8110de14:	d0a04d17 	ldw	r2,-32460(gp)
8110de18:	100f883a 	mov	r7,r2
8110de1c:	018009c4 	movi	r6,39
8110de20:	01400044 	movi	r5,1
8110de24:	01204534 	movhi	r4,33044
8110de28:	21335204 	addi	r4,r4,-12984
8110de2c:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(vReceiverAckTask)\n");
8110de30:	d0a04d17 	ldw	r2,-32460(gp)
8110de34:	100f883a 	mov	r7,r2
8110de38:	01801284 	movi	r6,74
8110de3c:	01400044 	movi	r5,1
8110de40:	01204534 	movhi	r4,33044
8110de44:	21335c04 	addi	r4,r4,-12944
8110de48:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110de4c:	0001883a 	nop
8110de50:	e037883a 	mov	sp,fp
8110de54:	dfc00117 	ldw	ra,4(sp)
8110de58:	df000017 	ldw	fp,0(sp)
8110de5c:	dec00204 	addi	sp,sp,8
8110de60:	f800283a 	ret

8110de64 <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
8110de64:	defffe04 	addi	sp,sp,-8
8110de68:	de00012e 	bgeu	sp,et,8110de70 <vFailGetCountSemaphorePreParsedBuffer+0xc>
8110de6c:	003b68fa 	trap	3
8110de70:	dfc00115 	stw	ra,4(sp)
8110de74:	df000015 	stw	fp,0(sp)
8110de78:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)\n");
8110de7c:	d0a04d17 	ldw	r2,-32460(gp)
8110de80:	100f883a 	mov	r7,r2
8110de84:	01800b84 	movi	r6,46
8110de88:	01400044 	movi	r5,1
8110de8c:	01204534 	movhi	r4,33044
8110de90:	21336f04 	addi	r4,r4,-12868
8110de94:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8110de98:	d0a04d17 	ldw	r2,-32460(gp)
8110de9c:	100f883a 	mov	r7,r2
8110dea0:	018010c4 	movi	r6,67
8110dea4:	01400044 	movi	r5,1
8110dea8:	01204534 	movhi	r4,33044
8110deac:	21337b04 	addi	r4,r4,-12820
8110deb0:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110deb4:	0001883a 	nop
8110deb8:	e037883a 	mov	sp,fp
8110debc:	dfc00117 	ldw	ra,4(sp)
8110dec0:	df000017 	ldw	fp,0(sp)
8110dec4:	dec00204 	addi	sp,sp,8
8110dec8:	f800283a 	ret

8110decc <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
8110decc:	defffe04 	addi	sp,sp,-8
8110ded0:	de00012e 	bgeu	sp,et,8110ded8 <vFailGetxMutexPreParsedParserRxTask+0xc>
8110ded4:	003b68fa 	trap	3
8110ded8:	dfc00115 	stw	ra,4(sp)
8110dedc:	df000015 	stw	fp,0(sp)
8110dee0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)\n");
8110dee4:	d0a04d17 	ldw	r2,-32460(gp)
8110dee8:	100f883a 	mov	r7,r2
8110deec:	01800b04 	movi	r6,44
8110def0:	01400044 	movi	r5,1
8110def4:	01204534 	movhi	r4,33044
8110def8:	21338c04 	addi	r4,r4,-12752
8110defc:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
8110df00:	d0a04d17 	ldw	r2,-32460(gp)
8110df04:	100f883a 	mov	r7,r2
8110df08:	01800fc4 	movi	r6,63
8110df0c:	01400044 	movi	r5,1
8110df10:	01204534 	movhi	r4,33044
8110df14:	21339804 	addi	r4,r4,-12704
8110df18:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110df1c:	0001883a 	nop
8110df20:	e037883a 	mov	sp,fp
8110df24:	dfc00117 	ldw	ra,4(sp)
8110df28:	df000017 	ldw	fp,0(sp)
8110df2c:	dec00204 	addi	sp,sp,8
8110df30:	f800283a 	ret

8110df34 <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
8110df34:	defffe04 	addi	sp,sp,-8
8110df38:	de00012e 	bgeu	sp,et,8110df40 <vNoContentInPreParsedBuffer+0xc>
8110df3c:	003b68fa 	trap	3
8110df40:	dfc00115 	stw	ra,4(sp)
8110df44:	df000015 	stw	fp,0(sp)
8110df48:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)\n");
8110df4c:	d0a04d17 	ldw	r2,-32460(gp)
8110df50:	100f883a 	mov	r7,r2
8110df54:	01800904 	movi	r6,36
8110df58:	01400044 	movi	r5,1
8110df5c:	01204534 	movhi	r4,33044
8110df60:	2133a804 	addi	r4,r4,-12640
8110df64:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8110df68:	d0a04d17 	ldw	r2,-32460(gp)
8110df6c:	100f883a 	mov	r7,r2
8110df70:	01801684 	movi	r6,90
8110df74:	01400044 	movi	r5,1
8110df78:	01204534 	movhi	r4,33044
8110df7c:	2133b204 	addi	r4,r4,-12600
8110df80:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110df84:	0001883a 	nop
8110df88:	e037883a 	mov	sp,fp
8110df8c:	dfc00117 	ldw	ra,4(sp)
8110df90:	df000017 	ldw	fp,0(sp)
8110df94:	dec00204 	addi	sp,sp,8
8110df98:	f800283a 	ret

8110df9c <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
8110df9c:	defffe04 	addi	sp,sp,-8
8110dfa0:	de00012e 	bgeu	sp,et,8110dfa8 <vCouldNotSendEthConfUART+0xc>
8110dfa4:	003b68fa 	trap	3
8110dfa8:	dfc00115 	stw	ra,4(sp)
8110dfac:	df000015 	stw	fp,0(sp)
8110dfb0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)\n");
8110dfb4:	d0a04d17 	ldw	r2,-32460(gp)
8110dfb8:	100f883a 	mov	r7,r2
8110dfbc:	01800844 	movi	r6,33
8110dfc0:	01400044 	movi	r5,1
8110dfc4:	01204534 	movhi	r4,33044
8110dfc8:	2133c904 	addi	r4,r4,-12508
8110dfcc:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
8110dfd0:	d0a04d17 	ldw	r2,-32460(gp)
8110dfd4:	100f883a 	mov	r7,r2
8110dfd8:	01801784 	movi	r6,94
8110dfdc:	01400044 	movi	r5,1
8110dfe0:	01204534 	movhi	r4,33044
8110dfe4:	2133d204 	addi	r4,r4,-12472
8110dfe8:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110dfec:	0001883a 	nop
8110dff0:	e037883a 	mov	sp,fp
8110dff4:	dfc00117 	ldw	ra,4(sp)
8110dff8:	df000017 	ldw	fp,0(sp)
8110dffc:	dec00204 	addi	sp,sp,8
8110e000:	f800283a 	ret

8110e004 <vFailSendNack>:

void vFailSendNack( void )
{
8110e004:	defffe04 	addi	sp,sp,-8
8110e008:	de00012e 	bgeu	sp,et,8110e010 <vFailSendNack+0xc>
8110e00c:	003b68fa 	trap	3
8110e010:	dfc00115 	stw	ra,4(sp)
8110e014:	df000015 	stw	fp,0(sp)
8110e018:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)\n");
8110e01c:	d0a04d17 	ldw	r2,-32460(gp)
8110e020:	100f883a 	mov	r7,r2
8110e024:	01800584 	movi	r6,22
8110e028:	01400044 	movi	r5,1
8110e02c:	01204534 	movhi	r4,33044
8110e030:	2133ea04 	addi	r4,r4,-12376
8110e034:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
8110e038:	d0a04d17 	ldw	r2,-32460(gp)
8110e03c:	100f883a 	mov	r7,r2
8110e040:	01800a84 	movi	r6,42
8110e044:	01400044 	movi	r5,1
8110e048:	01204534 	movhi	r4,33044
8110e04c:	2133f004 	addi	r4,r4,-12352
8110e050:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e054:	0001883a 	nop
8110e058:	e037883a 	mov	sp,fp
8110e05c:	dfc00117 	ldw	ra,4(sp)
8110e060:	df000017 	ldw	fp,0(sp)
8110e064:	dec00204 	addi	sp,sp,8
8110e068:	f800283a 	ret

8110e06c <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
8110e06c:	defffe04 	addi	sp,sp,-8
8110e070:	de00012e 	bgeu	sp,et,8110e078 <vFailSetPreAckSenderBuffer+0xc>
8110e074:	003b68fa 	trap	3
8110e078:	dfc00115 	stw	ra,4(sp)
8110e07c:	df000015 	stw	fp,0(sp)
8110e080:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)\n");
8110e084:	d0a04d17 	ldw	r2,-32460(gp)
8110e088:	100f883a 	mov	r7,r2
8110e08c:	018008c4 	movi	r6,35
8110e090:	01400044 	movi	r5,1
8110e094:	01204534 	movhi	r4,33044
8110e098:	2133fb04 	addi	r4,r4,-12308
8110e09c:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
8110e0a0:	d0a04d17 	ldw	r2,-32460(gp)
8110e0a4:	100f883a 	mov	r7,r2
8110e0a8:	01801584 	movi	r6,86
8110e0ac:	01400044 	movi	r5,1
8110e0b0:	01204534 	movhi	r4,33044
8110e0b4:	21340404 	addi	r4,r4,-12272
8110e0b8:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e0bc:	0001883a 	nop
8110e0c0:	e037883a 	mov	sp,fp
8110e0c4:	dfc00117 	ldw	ra,4(sp)
8110e0c8:	df000017 	ldw	fp,0(sp)
8110e0cc:	dec00204 	addi	sp,sp,8
8110e0d0:	f800283a 	ret

8110e0d4 <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
8110e0d4:	defffe04 	addi	sp,sp,-8
8110e0d8:	de00012e 	bgeu	sp,et,8110e0e0 <vFailSetPreParsedBuffer+0xc>
8110e0dc:	003b68fa 	trap	3
8110e0e0:	dfc00115 	stw	ra,4(sp)
8110e0e4:	df000015 	stw	fp,0(sp)
8110e0e8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)\n");
8110e0ec:	d0a04d17 	ldw	r2,-32460(gp)
8110e0f0:	100f883a 	mov	r7,r2
8110e0f4:	01800804 	movi	r6,32
8110e0f8:	01400044 	movi	r5,1
8110e0fc:	01204534 	movhi	r4,33044
8110e100:	21341a04 	addi	r4,r4,-12184
8110e104:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
8110e108:	d0a04d17 	ldw	r2,-32460(gp)
8110e10c:	100f883a 	mov	r7,r2
8110e110:	018013c4 	movi	r6,79
8110e114:	01400044 	movi	r5,1
8110e118:	01204534 	movhi	r4,33044
8110e11c:	21342304 	addi	r4,r4,-12148
8110e120:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e124:	0001883a 	nop
8110e128:	e037883a 	mov	sp,fp
8110e12c:	dfc00117 	ldw	ra,4(sp)
8110e130:	df000017 	ldw	fp,0(sp)
8110e134:	dec00204 	addi	sp,sp,8
8110e138:	f800283a 	ret

8110e13c <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
8110e13c:	defffe04 	addi	sp,sp,-8
8110e140:	de00012e 	bgeu	sp,et,8110e148 <vFailSetPreAckReceiverBuffer+0xc>
8110e144:	003b68fa 	trap	3
8110e148:	dfc00115 	stw	ra,4(sp)
8110e14c:	df000015 	stw	fp,0(sp)
8110e150:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)\n");
8110e154:	d0a04d17 	ldw	r2,-32460(gp)
8110e158:	100f883a 	mov	r7,r2
8110e15c:	01800944 	movi	r6,37
8110e160:	01400044 	movi	r5,1
8110e164:	01204534 	movhi	r4,33044
8110e168:	21343704 	addi	r4,r4,-12068
8110e16c:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
8110e170:	d0a04d17 	ldw	r2,-32460(gp)
8110e174:	100f883a 	mov	r7,r2
8110e178:	018015c4 	movi	r6,87
8110e17c:	01400044 	movi	r5,1
8110e180:	01204534 	movhi	r4,33044
8110e184:	21344104 	addi	r4,r4,-12028
8110e188:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e18c:	0001883a 	nop
8110e190:	e037883a 	mov	sp,fp
8110e194:	dfc00117 	ldw	ra,4(sp)
8110e198:	df000017 	ldw	fp,0(sp)
8110e19c:	dec00204 	addi	sp,sp,8
8110e1a0:	f800283a 	ret

8110e1a4 <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
8110e1a4:	defffe04 	addi	sp,sp,-8
8110e1a8:	de00012e 	bgeu	sp,et,8110e1b0 <vFailParserCommTaskCreate+0xc>
8110e1ac:	003b68fa 	trap	3
8110e1b0:	dfc00115 	stw	ra,4(sp)
8110e1b4:	df000015 	stw	fp,0(sp)
8110e1b8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate\n");
8110e1bc:	d0a04d17 	ldw	r2,-32460(gp)
8110e1c0:	100f883a 	mov	r7,r2
8110e1c4:	01800684 	movi	r6,26
8110e1c8:	01400044 	movi	r5,1
8110e1cc:	01204534 	movhi	r4,33044
8110e1d0:	21345704 	addi	r4,r4,-11940
8110e1d4:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110e1d8:	0001883a 	nop
8110e1dc:	e037883a 	mov	sp,fp
8110e1e0:	dfc00117 	ldw	ra,4(sp)
8110e1e4:	df000017 	ldw	fp,0(sp)
8110e1e8:	dec00204 	addi	sp,sp,8
8110e1ec:	f800283a 	ret

8110e1f0 <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
8110e1f0:	defffe04 	addi	sp,sp,-8
8110e1f4:	de00012e 	bgeu	sp,et,8110e1fc <vFailInAckHandlerTaskCreate+0xc>
8110e1f8:	003b68fa 	trap	3
8110e1fc:	dfc00115 	stw	ra,4(sp)
8110e200:	df000015 	stw	fp,0(sp)
8110e204:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
8110e208:	d0a04d17 	ldw	r2,-32460(gp)
8110e20c:	100f883a 	mov	r7,r2
8110e210:	01800704 	movi	r6,28
8110e214:	01400044 	movi	r5,1
8110e218:	01204534 	movhi	r4,33044
8110e21c:	21345e04 	addi	r4,r4,-11912
8110e220:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110e224:	0001883a 	nop
8110e228:	e037883a 	mov	sp,fp
8110e22c:	dfc00117 	ldw	ra,4(sp)
8110e230:	df000017 	ldw	fp,0(sp)
8110e234:	dec00204 	addi	sp,sp,8
8110e238:	f800283a 	ret

8110e23c <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
8110e23c:	defffe04 	addi	sp,sp,-8
8110e240:	de00012e 	bgeu	sp,et,8110e248 <vFailOutAckHandlerTaskCreate+0xc>
8110e244:	003b68fa 	trap	3
8110e248:	dfc00115 	stw	ra,4(sp)
8110e24c:	df000015 	stw	fp,0(sp)
8110e250:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
8110e254:	d0a04d17 	ldw	r2,-32460(gp)
8110e258:	100f883a 	mov	r7,r2
8110e25c:	01800704 	movi	r6,28
8110e260:	01400044 	movi	r5,1
8110e264:	01204534 	movhi	r4,33044
8110e268:	21345e04 	addi	r4,r4,-11912
8110e26c:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110e270:	0001883a 	nop
8110e274:	e037883a 	mov	sp,fp
8110e278:	dfc00117 	ldw	ra,4(sp)
8110e27c:	df000017 	ldw	fp,0(sp)
8110e280:	dec00204 	addi	sp,sp,8
8110e284:	f800283a 	ret

8110e288 <vFailCreateTimerRetransmisison>:


void vFailCreateTimerRetransmisison( void )
{
8110e288:	defffe04 	addi	sp,sp,-8
8110e28c:	de00012e 	bgeu	sp,et,8110e294 <vFailCreateTimerRetransmisison+0xc>
8110e290:	003b68fa 	trap	3
8110e294:	dfc00115 	stw	ra,4(sp)
8110e298:	df000015 	stw	fp,0(sp)
8110e29c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateTimerRetransmisison\n");
8110e2a0:	d0a04d17 	ldw	r2,-32460(gp)
8110e2a4:	100f883a 	mov	r7,r2
8110e2a8:	018007c4 	movi	r6,31
8110e2ac:	01400044 	movi	r5,1
8110e2b0:	01204534 	movhi	r4,33044
8110e2b4:	21346604 	addi	r4,r4,-11880
8110e2b8:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110e2bc:	0001883a 	nop
8110e2c0:	e037883a 	mov	sp,fp
8110e2c4:	dfc00117 	ldw	ra,4(sp)
8110e2c8:	df000017 	ldw	fp,0(sp)
8110e2cc:	dec00204 	addi	sp,sp,8
8110e2d0:	f800283a 	ret

8110e2d4 <vCouldNotCheckBufferTimeOutFunction>:


void vCouldNotCheckBufferTimeOutFunction( void )
{
8110e2d4:	defffe04 	addi	sp,sp,-8
8110e2d8:	de00012e 	bgeu	sp,et,8110e2e0 <vCouldNotCheckBufferTimeOutFunction+0xc>
8110e2dc:	003b68fa 	trap	3
8110e2e0:	dfc00115 	stw	ra,4(sp)
8110e2e4:	df000015 	stw	fp,0(sp)
8110e2e8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotCheckBufferTimeOutFunction\n");
8110e2ec:	d0a04d17 	ldw	r2,-32460(gp)
8110e2f0:	100f883a 	mov	r7,r2
8110e2f4:	01800904 	movi	r6,36
8110e2f8:	01400044 	movi	r5,1
8110e2fc:	01204534 	movhi	r4,33044
8110e300:	21346e04 	addi	r4,r4,-11848
8110e304:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110e308:	0001883a 	nop
8110e30c:	e037883a 	mov	sp,fp
8110e310:	dfc00117 	ldw	ra,4(sp)
8110e314:	df000017 	ldw	fp,0(sp)
8110e318:	dec00204 	addi	sp,sp,8
8110e31c:	f800283a 	ret

8110e320 <vFailTimeoutCheckerTaskCreate>:

void vFailTimeoutCheckerTaskCreate( void )
{
8110e320:	defffe04 	addi	sp,sp,-8
8110e324:	de00012e 	bgeu	sp,et,8110e32c <vFailTimeoutCheckerTaskCreate+0xc>
8110e328:	003b68fa 	trap	3
8110e32c:	dfc00115 	stw	ra,4(sp)
8110e330:	df000015 	stw	fp,0(sp)
8110e334:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTimeoutCheckerTaskCreate\n");
8110e338:	d0a04d17 	ldw	r2,-32460(gp)
8110e33c:	100f883a 	mov	r7,r2
8110e340:	01800784 	movi	r6,30
8110e344:	01400044 	movi	r5,1
8110e348:	01204534 	movhi	r4,33044
8110e34c:	21347804 	addi	r4,r4,-11808
8110e350:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110e354:	0001883a 	nop
8110e358:	e037883a 	mov	sp,fp
8110e35c:	dfc00117 	ldw	ra,4(sp)
8110e360:	df000017 	ldw	fp,0(sp)
8110e364:	dec00204 	addi	sp,sp,8
8110e368:	f800283a 	ret

8110e36c <vFailGetBlockingSemTimeoutTask>:


void vFailGetBlockingSemTimeoutTask( void )
{
8110e36c:	defffe04 	addi	sp,sp,-8
8110e370:	de00012e 	bgeu	sp,et,8110e378 <vFailGetBlockingSemTimeoutTask+0xc>
8110e374:	003b68fa 	trap	3
8110e378:	dfc00115 	stw	ra,4(sp)
8110e37c:	df000015 	stw	fp,0(sp)
8110e380:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetBlockingSemTimeoutTask. (exit)\n");
8110e384:	d0a04d17 	ldw	r2,-32460(gp)
8110e388:	100f883a 	mov	r7,r2
8110e38c:	018009c4 	movi	r6,39
8110e390:	01400044 	movi	r5,1
8110e394:	01204534 	movhi	r4,33044
8110e398:	21348004 	addi	r4,r4,-11776
8110e39c:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Retrun from a blocking (0) OSSemPend with a error.\n");
8110e3a0:	d0a04d17 	ldw	r2,-32460(gp)
8110e3a4:	100f883a 	mov	r7,r2
8110e3a8:	01800cc4 	movi	r6,51
8110e3ac:	01400044 	movi	r5,1
8110e3b0:	01204534 	movhi	r4,33044
8110e3b4:	21348a04 	addi	r4,r4,-11736
8110e3b8:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e3bc:	0001883a 	nop
8110e3c0:	e037883a 	mov	sp,fp
8110e3c4:	dfc00117 	ldw	ra,4(sp)
8110e3c8:	df000017 	ldw	fp,0(sp)
8110e3cc:	dec00204 	addi	sp,sp,8
8110e3d0:	f800283a 	ret

8110e3d4 <vFailPostBlockingSemTimeoutTask>:

void vFailPostBlockingSemTimeoutTask( void )
{
8110e3d4:	defffe04 	addi	sp,sp,-8
8110e3d8:	de00012e 	bgeu	sp,et,8110e3e0 <vFailPostBlockingSemTimeoutTask+0xc>
8110e3dc:	003b68fa 	trap	3
8110e3e0:	dfc00115 	stw	ra,4(sp)
8110e3e4:	df000015 	stw	fp,0(sp)
8110e3e8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailPostBlockingSemTimeoutTask. (exit)\n");
8110e3ec:	d0a04d17 	ldw	r2,-32460(gp)
8110e3f0:	100f883a 	mov	r7,r2
8110e3f4:	01800a04 	movi	r6,40
8110e3f8:	01400044 	movi	r5,1
8110e3fc:	01204534 	movhi	r4,33044
8110e400:	21349704 	addi	r4,r4,-11684
8110e404:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not Post the semaphore for the TimeoutTask.\n");
8110e408:	d0a04d17 	ldw	r2,-32460(gp)
8110e40c:	100f883a 	mov	r7,r2
8110e410:	01800c84 	movi	r6,50
8110e414:	01400044 	movi	r5,1
8110e418:	01204534 	movhi	r4,33044
8110e41c:	2134a204 	addi	r4,r4,-11640
8110e420:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e424:	0001883a 	nop
8110e428:	e037883a 	mov	sp,fp
8110e42c:	dfc00117 	ldw	ra,4(sp)
8110e430:	df000017 	ldw	fp,0(sp)
8110e434:	dec00204 	addi	sp,sp,8
8110e438:	f800283a 	ret

8110e43c <vFailCouldNotRetransmitTimeoutTask>:


void vFailCouldNotRetransmitTimeoutTask( void )
{
8110e43c:	defffe04 	addi	sp,sp,-8
8110e440:	de00012e 	bgeu	sp,et,8110e448 <vFailCouldNotRetransmitTimeoutTask+0xc>
8110e444:	003b68fa 	trap	3
8110e448:	dfc00115 	stw	ra,4(sp)
8110e44c:	df000015 	stw	fp,0(sp)
8110e450:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCouldNotRetransmitTimeoutTask. (exit)\n");
8110e454:	d0a04d17 	ldw	r2,-32460(gp)
8110e458:	100f883a 	mov	r7,r2
8110e45c:	01800ac4 	movi	r6,43
8110e460:	01400044 	movi	r5,1
8110e464:	01204534 	movhi	r4,33044
8110e468:	2134af04 	addi	r4,r4,-11588
8110e46c:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"After sleep for 50 ticks, could not get access to the tx uart. No retransmission occurs.\n");
8110e470:	d0a04d17 	ldw	r2,-32460(gp)
8110e474:	100f883a 	mov	r7,r2
8110e478:	01801644 	movi	r6,89
8110e47c:	01400044 	movi	r5,1
8110e480:	01204534 	movhi	r4,33044
8110e484:	2134ba04 	addi	r4,r4,-11544
8110e488:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e48c:	0001883a 	nop
8110e490:	e037883a 	mov	sp,fp
8110e494:	dfc00117 	ldw	ra,4(sp)
8110e498:	df000017 	ldw	fp,0(sp)
8110e49c:	dec00204 	addi	sp,sp,8
8110e4a0:	f800283a 	ret

8110e4a4 <vCouldNotRetransmitB32TimeoutTask>:


void vCouldNotRetransmitB32TimeoutTask( void )
{
8110e4a4:	defffe04 	addi	sp,sp,-8
8110e4a8:	de00012e 	bgeu	sp,et,8110e4b0 <vCouldNotRetransmitB32TimeoutTask+0xc>
8110e4ac:	003b68fa 	trap	3
8110e4b0:	dfc00115 	stw	ra,4(sp)
8110e4b4:	df000015 	stw	fp,0(sp)
8110e4b8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB32TimeoutTask. (exit)\n");
8110e4bc:	d0a04d17 	ldw	r2,-32460(gp)
8110e4c0:	100f883a 	mov	r7,r2
8110e4c4:	01800a84 	movi	r6,42
8110e4c8:	01400044 	movi	r5,1
8110e4cc:	01204534 	movhi	r4,33044
8110e4d0:	2134d104 	addi	r4,r4,-11452
8110e4d4:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (32).\n");
8110e4d8:	d0a04d17 	ldw	r2,-32460(gp)
8110e4dc:	100f883a 	mov	r7,r2
8110e4e0:	01801444 	movi	r6,81
8110e4e4:	01400044 	movi	r5,1
8110e4e8:	01204534 	movhi	r4,33044
8110e4ec:	2134dc04 	addi	r4,r4,-11408
8110e4f0:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e4f4:	0001883a 	nop
8110e4f8:	e037883a 	mov	sp,fp
8110e4fc:	dfc00117 	ldw	ra,4(sp)
8110e500:	df000017 	ldw	fp,0(sp)
8110e504:	dec00204 	addi	sp,sp,8
8110e508:	f800283a 	ret

8110e50c <vCouldNotRetransmitB64TimeoutTask>:

void vCouldNotRetransmitB64TimeoutTask( void )
{
8110e50c:	defffe04 	addi	sp,sp,-8
8110e510:	de00012e 	bgeu	sp,et,8110e518 <vCouldNotRetransmitB64TimeoutTask+0xc>
8110e514:	003b68fa 	trap	3
8110e518:	dfc00115 	stw	ra,4(sp)
8110e51c:	df000015 	stw	fp,0(sp)
8110e520:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB64TimeoutTask. (exit)\n");
8110e524:	d0a04d17 	ldw	r2,-32460(gp)
8110e528:	100f883a 	mov	r7,r2
8110e52c:	01800a84 	movi	r6,42
8110e530:	01400044 	movi	r5,1
8110e534:	01204534 	movhi	r4,33044
8110e538:	2134f104 	addi	r4,r4,-11324
8110e53c:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (64).\n");
8110e540:	d0a04d17 	ldw	r2,-32460(gp)
8110e544:	100f883a 	mov	r7,r2
8110e548:	01801444 	movi	r6,81
8110e54c:	01400044 	movi	r5,1
8110e550:	01204534 	movhi	r4,33044
8110e554:	2134fc04 	addi	r4,r4,-11280
8110e558:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e55c:	0001883a 	nop
8110e560:	e037883a 	mov	sp,fp
8110e564:	dfc00117 	ldw	ra,4(sp)
8110e568:	df000017 	ldw	fp,0(sp)
8110e56c:	dec00204 	addi	sp,sp,8
8110e570:	f800283a 	ret

8110e574 <vCouldNotRetransmitB128TimeoutTask>:

void vCouldNotRetransmitB128TimeoutTask( void )
{
8110e574:	defffe04 	addi	sp,sp,-8
8110e578:	de00012e 	bgeu	sp,et,8110e580 <vCouldNotRetransmitB128TimeoutTask+0xc>
8110e57c:	003b68fa 	trap	3
8110e580:	dfc00115 	stw	ra,4(sp)
8110e584:	df000015 	stw	fp,0(sp)
8110e588:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB128TimeoutTask. (exit)\n");
8110e58c:	d0a04d17 	ldw	r2,-32460(gp)
8110e590:	100f883a 	mov	r7,r2
8110e594:	01800ac4 	movi	r6,43
8110e598:	01400044 	movi	r5,1
8110e59c:	01204534 	movhi	r4,33044
8110e5a0:	21351104 	addi	r4,r4,-11196
8110e5a4:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (128).\n");
8110e5a8:	d0a04d17 	ldw	r2,-32460(gp)
8110e5ac:	100f883a 	mov	r7,r2
8110e5b0:	01801484 	movi	r6,82
8110e5b4:	01400044 	movi	r5,1
8110e5b8:	01204534 	movhi	r4,33044
8110e5bc:	21351c04 	addi	r4,r4,-11152
8110e5c0:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e5c4:	0001883a 	nop
8110e5c8:	e037883a 	mov	sp,fp
8110e5cc:	dfc00117 	ldw	ra,4(sp)
8110e5d0:	df000017 	ldw	fp,0(sp)
8110e5d4:	dec00204 	addi	sp,sp,8
8110e5d8:	f800283a 	ret

8110e5dc <vFailStartTimerRetransmission>:


void vFailStartTimerRetransmission( void )
{
8110e5dc:	defffe04 	addi	sp,sp,-8
8110e5e0:	de00012e 	bgeu	sp,et,8110e5e8 <vFailStartTimerRetransmission+0xc>
8110e5e4:	003b68fa 	trap	3
8110e5e8:	dfc00115 	stw	ra,4(sp)
8110e5ec:	df000015 	stw	fp,0(sp)
8110e5f0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailStartTimerRetransmission. (exit)\n");
8110e5f4:	d0a04d17 	ldw	r2,-32460(gp)
8110e5f8:	100f883a 	mov	r7,r2
8110e5fc:	01800984 	movi	r6,38
8110e600:	01400044 	movi	r5,1
8110e604:	01204534 	movhi	r4,33044
8110e608:	21353104 	addi	r4,r4,-11068
8110e60c:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Fail trying to start the timer xTimerRetransmission.\n");
8110e610:	d0a04d17 	ldw	r2,-32460(gp)
8110e614:	100f883a 	mov	r7,r2
8110e618:	01800d44 	movi	r6,53
8110e61c:	01400044 	movi	r5,1
8110e620:	01204534 	movhi	r4,33044
8110e624:	21353b04 	addi	r4,r4,-11028
8110e628:	11116b00 	call	811116b0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e62c:	0001883a 	nop
8110e630:	e037883a 	mov	sp,fp
8110e634:	dfc00117 	ldw	ra,4(sp)
8110e638:	df000017 	ldw	fp,0(sp)
8110e63c:	dec00204 	addi	sp,sp,8
8110e640:	f800283a 	ret

8110e644 <vCouldNotSendTurnOff>:


void vCouldNotSendTurnOff( void )
{
8110e644:	defffe04 	addi	sp,sp,-8
8110e648:	de00012e 	bgeu	sp,et,8110e650 <vCouldNotSendTurnOff+0xc>
8110e64c:	003b68fa 	trap	3
8110e650:	dfc00115 	stw	ra,4(sp)
8110e654:	df000015 	stw	fp,0(sp)
8110e658:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTurnOff. (exit)\n");
8110e65c:	d0a04d17 	ldw	r2,-32460(gp)
8110e660:	100f883a 	mov	r7,r2
8110e664:	01800744 	movi	r6,29
8110e668:	01400044 	movi	r5,1
8110e66c:	01204534 	movhi	r4,33044
8110e670:	21354904 	addi	r4,r4,-10972
8110e674:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the turn off command. \n");
8110e678:	d0a04d17 	ldw	r2,-32460(gp)
8110e67c:	100f883a 	mov	r7,r2
8110e680:	01800984 	movi	r6,38
8110e684:	01400044 	movi	r5,1
8110e688:	01204534 	movhi	r4,33044
8110e68c:	21355104 	addi	r4,r4,-10940
8110e690:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e694:	0001883a 	nop
8110e698:	e037883a 	mov	sp,fp
8110e69c:	dfc00117 	ldw	ra,4(sp)
8110e6a0:	df000017 	ldw	fp,0(sp)
8110e6a4:	dec00204 	addi	sp,sp,8
8110e6a8:	f800283a 	ret

8110e6ac <vCouldNotSendLog>:


void vCouldNotSendLog( void )
{
8110e6ac:	defffe04 	addi	sp,sp,-8
8110e6b0:	de00012e 	bgeu	sp,et,8110e6b8 <vCouldNotSendLog+0xc>
8110e6b4:	003b68fa 	trap	3
8110e6b8:	dfc00115 	stw	ra,4(sp)
8110e6bc:	df000015 	stw	fp,0(sp)
8110e6c0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendLog. (exit)\n");
8110e6c4:	d0a04d17 	ldw	r2,-32460(gp)
8110e6c8:	100f883a 	mov	r7,r2
8110e6cc:	01800644 	movi	r6,25
8110e6d0:	01400044 	movi	r5,1
8110e6d4:	01204534 	movhi	r4,33044
8110e6d8:	21355b04 	addi	r4,r4,-10900
8110e6dc:	11116b00 	call	811116b0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send log packet to NUC. \n");
8110e6e0:	d0a04d17 	ldw	r2,-32460(gp)
8110e6e4:	100f883a 	mov	r7,r2
8110e6e8:	018008c4 	movi	r6,35
8110e6ec:	01400044 	movi	r5,1
8110e6f0:	01204534 	movhi	r4,33044
8110e6f4:	21356204 	addi	r4,r4,-10872
8110e6f8:	11116b00 	call	811116b0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e6fc:	0001883a 	nop
8110e700:	e037883a 	mov	sp,fp
8110e704:	dfc00117 	ldw	ra,4(sp)
8110e708:	df000017 	ldw	fp,0(sp)
8110e70c:	dec00204 	addi	sp,sp,8
8110e710:	f800283a 	ret

8110e714 <vNFeeNotInUse>:
 *      Author: Tiago-Low
 */

#include "fee.h"

void vNFeeNotInUse( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110e714:	defffd04 	addi	sp,sp,-12
8110e718:	de00012e 	bgeu	sp,et,8110e720 <vNFeeNotInUse+0xc>
8110e71c:	003b68fa 	trap	3
8110e720:	df000215 	stw	fp,8(sp)
8110e724:	df000204 	addi	fp,sp,8
8110e728:	e13ffe15 	stw	r4,-8(fp)
8110e72c:	2805883a 	mov	r2,r5
8110e730:	e0bfff05 	stb	r2,-4(fp)

    /* NFEE id [0..7] */
    pxNfeeL->ucId = ucIdNFEE;
8110e734:	e0bffe17 	ldw	r2,-8(fp)
8110e738:	e0ffff03 	ldbu	r3,-4(fp)
8110e73c:	10c00005 	stb	r3,0(r2)
    pxNfeeL->xControl.bEnabled = FALSE;
8110e740:	e0bffe17 	ldw	r2,-8(fp)
8110e744:	10002015 	stw	zero,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110e748:	e0bffe17 	ldw	r2,-8(fp)
8110e74c:	10002115 	stw	zero,132(r2)
}
8110e750:	0001883a 	nop
8110e754:	e037883a 	mov	sp,fp
8110e758:	df000017 	ldw	fp,0(sp)
8110e75c:	dec00104 	addi	sp,sp,4
8110e760:	f800283a 	ret

8110e764 <vNFeeStructureInit>:


/* Initialize the structure of control of NFEE with the default Configurations */
void vNFeeStructureInit( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110e764:	defffb04 	addi	sp,sp,-20
8110e768:	de00012e 	bgeu	sp,et,8110e770 <vNFeeStructureInit+0xc>
8110e76c:	003b68fa 	trap	3
8110e770:	dfc00415 	stw	ra,16(sp)
8110e774:	df000315 	stw	fp,12(sp)
8110e778:	df000304 	addi	fp,sp,12
8110e77c:	e13ffe15 	stw	r4,-8(fp)
8110e780:	2805883a 	mov	r2,r5
8110e784:	e0bfff05 	stb	r2,-4(fp)
    unsigned char ucIL = 0;
8110e788:	e03ffd05 	stb	zero,-12(fp)

    /* NFEE id [0..5] */
    pxNfeeL->ucId = ucIdNFEE;
8110e78c:	e0bffe17 	ldw	r2,-8(fp)
8110e790:	e0ffff03 	ldbu	r3,-4(fp)
8110e794:	10c00005 	stb	r3,0(r2)

    /* Load the default values of the CCDs regarding pixels configuration */
    vCCDLoadDefaultValues(&pxNfeeL->xCcdInfo);
8110e798:	e0bffe17 	ldw	r2,-8(fp)
8110e79c:	10802804 	addi	r2,r2,160
8110e7a0:	1009883a 	mov	r4,r2
8110e7a4:	110b7780 	call	8110b778 <vCCDLoadDefaultValues>

    /* Update the values of memory mapping for this FEE */
    vUpdateMemMapFEE(pxNfeeL);
8110e7a8:	e13ffe17 	ldw	r4,-8(fp)
8110e7ac:	110e83c0 	call	8110e83c <vUpdateMemMapFEE>

    /* Initilizing control variables */
    pxNfeeL->xControl.bEnabled = TRUE;
8110e7b0:	e0bffe17 	ldw	r2,-8(fp)
8110e7b4:	00c00044 	movi	r3,1
8110e7b8:	10c02015 	stw	r3,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110e7bc:	e0bffe17 	ldw	r2,-8(fp)
8110e7c0:	10002115 	stw	zero,132(r2)
    /* The NFEE initialize in the Config mode by default */
    pxNfeeL->xControl.eMode = sFeeConfig;    
8110e7c4:	e0bffe17 	ldw	r2,-8(fp)
8110e7c8:	10002615 	stw	zero,152(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110e7cc:	e03ffd05 	stb	zero,-12(fp)
8110e7d0:	00000906 	br	8110e7f8 <vNFeeStructureInit+0x94>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
8110e7d4:	e0bffd03 	ldbu	r2,-12(fp)
8110e7d8:	e0fffe17 	ldw	r3,-8(fp)
8110e7dc:	1885883a 	add	r2,r3,r2
8110e7e0:	10802504 	addi	r2,r2,148
8110e7e4:	e0fffd03 	ldbu	r3,-12(fp)
8110e7e8:	10c00005 	stb	r3,0(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110e7ec:	e0bffd03 	ldbu	r2,-12(fp)
8110e7f0:	10800044 	addi	r2,r2,1
8110e7f4:	e0bffd05 	stb	r2,-12(fp)
8110e7f8:	e0bffd03 	ldbu	r2,-12(fp)
8110e7fc:	10800130 	cmpltui	r2,r2,4
8110e800:	103ff41e 	bne	r2,zero,8110e7d4 <__reset+0xfb0ee7d4>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
    /* The default side is left */
    pxNfeeL->xControl.eSide = sLeft;
8110e804:	e0bffe17 	ldw	r2,-8(fp)
8110e808:	10002715 	stw	zero,156(r2)
    pxNfeeL->xControl.bEchoing = FALSE;
8110e80c:	e0bffe17 	ldw	r2,-8(fp)
8110e810:	10002315 	stw	zero,140(r2)
    pxNfeeL->xControl.bLogging = FALSE;
8110e814:	e0bffe17 	ldw	r2,-8(fp)
8110e818:	10002215 	stw	zero,136(r2)
    pxNfeeL->xControl.bChannelEnable = FALSE;
8110e81c:	e0bffe17 	ldw	r2,-8(fp)
8110e820:	10002415 	stw	zero,144(r2)

}
8110e824:	0001883a 	nop
8110e828:	e037883a 	mov	sp,fp
8110e82c:	dfc00117 	ldw	ra,4(sp)
8110e830:	df000017 	ldw	fp,0(sp)
8110e834:	dec00204 	addi	sp,sp,8
8110e838:	f800283a 	ret

8110e83c <vUpdateMemMapFEE>:

/* Update the memory mapping for the FEE due to the CCD informations */
void vUpdateMemMapFEE( TNFee *pxNfeeL ) {
8110e83c:	defff404 	addi	sp,sp,-48
8110e840:	de00012e 	bgeu	sp,et,8110e848 <vUpdateMemMapFEE+0xc>
8110e844:	003b68fa 	trap	3
8110e848:	df000b15 	stw	fp,44(sp)
8110e84c:	df000b04 	addi	fp,sp,44
8110e850:	e13fff15 	stw	r4,-4(fp)
    unsigned long ulTotalSizeL = 0; /* pixels */
8110e854:	e03ff915 	stw	zero,-28(fp)
    unsigned long ulMemLinesL = 0; /* mem lines */
8110e858:	e03ff515 	stw	zero,-44(fp)
    unsigned long ulTotalMemLinesL = 0;
8110e85c:	e03ffa15 	stw	zero,-24(fp)
    unsigned long ulMemLeftBytesL = 0; /* bytes */
8110e860:	e03ffb15 	stw	zero,-20(fp)
    unsigned long ulMemLeftLinesL = 0; /* mem lines */
8110e864:	e03ffc15 	stw	zero,-16(fp)
    unsigned long ulMaskMemLinesL = 0; /* mem lines */
8110e868:	e03ff615 	stw	zero,-40(fp)
    unsigned char ucPixelsInLastBlockL = 0;
8110e86c:	e03ff705 	stb	zero,-36(fp)
    unsigned char ucShiftsL = 0;
8110e870:	e03ffd05 	stb	zero,-12(fp)
    unsigned char ucIL = 0;
8110e874:	e03ff745 	stb	zero,-35(fp)
    unsigned long ulLastOffset = 0;
8110e878:	e03ff815 	stw	zero,-32(fp)
    unsigned long ulStepHalfCCD = 0;
8110e87c:	e03ffe15 	stw	zero,-8(fp)


    /* Size of the footprint of the CCD in the DDR memory */
    pxNfeeL->xMemMap.ulTotalBytes = ( OFFSET_STEP_FEE );
8110e880:	e17fff17 	ldw	r5,-4(fp)
8110e884:	01035a34 	movhi	r4,3432
8110e888:	21348c04 	addi	r4,r4,-11728
8110e88c:	29000215 	stw	r4,8(r5)

    /* Offset of the FEE in the DDR memory */
    pxNfeeL->xMemMap.ulOffsetRoot = OFFSET_STEP_FEE * pxNfeeL->ucId;
8110e890:	e13fff17 	ldw	r4,-4(fp)
8110e894:	21000003 	ldbu	r4,0(r4)
8110e898:	21403fcc 	andi	r5,r4,255
8110e89c:	01035a34 	movhi	r4,3432
8110e8a0:	21348c04 	addi	r4,r4,-11728
8110e8a4:	2909383a 	mul	r4,r5,r4
8110e8a8:	200b883a 	mov	r5,r4
8110e8ac:	e13fff17 	ldw	r4,-4(fp)
8110e8b0:	21400115 	stw	r5,4(r4)

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;
8110e8b4:	e13fff17 	ldw	r4,-4(fp)
8110e8b8:	21400117 	ldw	r5,4(r4)
8110e8bc:	01033234 	movhi	r4,3272
8110e8c0:	21348c04 	addi	r4,r4,-11728
8110e8c4:	290b883a 	add	r5,r5,r4
8110e8c8:	e13fff17 	ldw	r4,-4(fp)
8110e8cc:	21400315 	stw	r5,12(r4)

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110e8d0:	e13fff17 	ldw	r4,-4(fp)
8110e8d4:	21002a0b 	ldhu	r4,168(r4)
8110e8d8:	217fffcc 	andi	r5,r4,65535
8110e8dc:	e13fff17 	ldw	r4,-4(fp)
8110e8e0:	2100290b 	ldhu	r4,164(r4)
8110e8e4:	213fffcc 	andi	r4,r4,65535
8110e8e8:	290b883a 	add	r5,r5,r4
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );
8110e8ec:	e13fff17 	ldw	r4,-4(fp)
8110e8f0:	2100298b 	ldhu	r4,166(r4)
8110e8f4:	21bfffcc 	andi	r6,r4,65535
8110e8f8:	e13fff17 	ldw	r4,-4(fp)
8110e8fc:	2100288b 	ldhu	r4,162(r4)
8110e900:	213fffcc 	andi	r4,r4,65535
8110e904:	310d883a 	add	r6,r6,r4
8110e908:	e13fff17 	ldw	r4,-4(fp)
8110e90c:	2100280b 	ldhu	r4,160(r4)
8110e910:	213fffcc 	andi	r4,r4,65535
8110e914:	3109883a 	add	r4,r6,r4

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110e918:	2909383a 	mul	r4,r5,r4
8110e91c:	e13ff915 	stw	r4,-28(fp)
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );

    /* Total size in Bytes of a half CCD */
    pxNfeeL->xMemMap.xCommon.usiTotalBytes = ulTotalSizeL * BYTES_PER_PIXEL;
8110e920:	e13ff917 	ldw	r4,-28(fp)
8110e924:	2109883a 	add	r4,r4,r4
8110e928:	200b883a 	mov	r5,r4
8110e92c:	e13fff17 	ldw	r4,-4(fp)
8110e930:	2140048d 	sth	r5,18(r4)

    /* Total of Memory lines (64 bits memory) */
    ulMemLinesL = (unsigned long) pxNfeeL->xMemMap.xCommon.usiTotalBytes / BYTES_PER_MEM_LINE;
8110e934:	e13fff17 	ldw	r4,-4(fp)
8110e938:	2100048b 	ldhu	r4,18(r4)
8110e93c:	213fffcc 	andi	r4,r4,65535
8110e940:	2008d0fa 	srli	r4,r4,3
8110e944:	213fffcc 	andi	r4,r4,65535
8110e948:	e13ff515 	stw	r4,-44(fp)
    ulMemLeftBytesL = pxNfeeL->xMemMap.xCommon.usiTotalBytes % BYTES_PER_MEM_LINE;   /* Word memory Alignment check: how much bytes left not align in the last word of the memory */
8110e94c:	e13fff17 	ldw	r4,-4(fp)
8110e950:	2100048b 	ldhu	r4,18(r4)
8110e954:	213fffcc 	andi	r4,r4,65535
8110e958:	210001cc 	andi	r4,r4,7
8110e95c:	e13ffb15 	stw	r4,-20(fp)
    if ( ulMemLeftBytesL > 0 ) {
8110e960:	e13ffb17 	ldw	r4,-20(fp)
8110e964:	20001326 	beq	r4,zero,8110e9b4 <vUpdateMemMapFEE+0x178>
        ulMemLinesL = ulMemLinesL + 1;
8110e968:	e13ff517 	ldw	r4,-44(fp)
8110e96c:	21000044 	addi	r4,r4,1
8110e970:	e13ff515 	stw	r4,-44(fp)
        pxNfeeL->xMemMap.xCommon.usiTotalBytes = pxNfeeL->xMemMap.xCommon.usiTotalBytes - ulMemLeftBytesL + BYTES_PER_MEM_LINE; /* Add a full line, after will be filled with zero padding */
8110e974:	e13fff17 	ldw	r4,-4(fp)
8110e978:	2100048b 	ldhu	r4,18(r4)
8110e97c:	e17ffb17 	ldw	r5,-20(fp)
8110e980:	2149c83a 	sub	r4,r4,r5
8110e984:	21000204 	addi	r4,r4,8
8110e988:	200b883a 	mov	r5,r4
8110e98c:	e13fff17 	ldw	r4,-4(fp)
8110e990:	2140048d 	sth	r5,18(r4)
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = BYTES_PER_MEM_LINE - ulMemLeftBytesL;
8110e994:	e13ffb17 	ldw	r4,-20(fp)
8110e998:	200b883a 	mov	r5,r4
8110e99c:	01000204 	movi	r4,8
8110e9a0:	2149c83a 	sub	r4,r4,r5
8110e9a4:	200b883a 	mov	r5,r4
8110e9a8:	e13fff17 	ldw	r4,-4(fp)
8110e9ac:	21400505 	stb	r5,20(r4)
8110e9b0:	00000206 	br	8110e9bc <vUpdateMemMapFEE+0x180>
    } else {
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = 0;
8110e9b4:	e13fff17 	ldw	r4,-4(fp)
8110e9b8:	20000505 	stb	zero,20(r4)
    }

    /* At this point we have mapping the pixel in the CCD and calculate the zero padding for the last WORD of the line memory of the half ccd */

    /* For every 16 mem line will be 1 mask mem line */
    ulMaskMemLinesL = (unsigned long) ulMemLinesL / BLOCK_MEM_SIZE;
8110e9bc:	e13ff517 	ldw	r4,-44(fp)
8110e9c0:	2008d13a 	srli	r4,r4,4
8110e9c4:	e13ff615 	stw	r4,-40(fp)
    ulMemLeftLinesL = ulMemLinesL % BLOCK_MEM_SIZE;
8110e9c8:	e13ff517 	ldw	r4,-44(fp)
8110e9cc:	210003cc 	andi	r4,r4,15
8110e9d0:	e13ffc15 	stw	r4,-16(fp)
    if ( ulMemLeftLinesL >= 1 ) {
8110e9d4:	e13ffc17 	ldw	r4,-16(fp)
8110e9d8:	20000b26 	beq	r4,zero,8110ea08 <vUpdateMemMapFEE+0x1cc>
        ulMaskMemLinesL = ulMaskMemLinesL + 1;
8110e9dc:	e13ff617 	ldw	r4,-40(fp)
8110e9e0:	21000044 	addi	r4,r4,1
8110e9e4:	e13ff615 	stw	r4,-40(fp)
        ulTotalMemLinesL = ( ulMemLinesL - ulMemLeftLinesL + BLOCK_MEM_SIZE ) + ulMaskMemLinesL; /* One extra 16 sized block, will be filled with zero padding the ret os spare lines */
8110e9e8:	e17ff517 	ldw	r5,-44(fp)
8110e9ec:	e13ffc17 	ldw	r4,-16(fp)
8110e9f0:	290bc83a 	sub	r5,r5,r4
8110e9f4:	e13ff617 	ldw	r4,-40(fp)
8110e9f8:	2909883a 	add	r4,r5,r4
8110e9fc:	21000404 	addi	r4,r4,16
8110ea00:	e13ffa15 	stw	r4,-24(fp)
8110ea04:	00000406 	br	8110ea18 <vUpdateMemMapFEE+0x1dc>
    } else {
        ulTotalMemLinesL = ulMemLinesL + ulMaskMemLinesL;
8110ea08:	e17ff517 	ldw	r5,-44(fp)
8110ea0c:	e13ff617 	ldw	r4,-40(fp)
8110ea10:	2909883a 	add	r4,r5,r4
8110ea14:	e13ffa15 	stw	r4,-24(fp)
    }

    /* Calculating how is the final mask with zero padding */
    if ( ulMemLeftBytesL >= 1 ) {
8110ea18:	e13ffb17 	ldw	r4,-20(fp)
8110ea1c:	20000926 	beq	r4,zero,8110ea44 <vUpdateMemMapFEE+0x208>
        ucPixelsInLastBlockL = (unsigned char) (( ulMemLeftLinesL * PIXEL_PER_MEM_LINE ) + (unsigned int) ( ulMemLeftBytesL / BYTES_PER_PIXEL ));
8110ea20:	e13ffc17 	ldw	r4,-16(fp)
8110ea24:	2109883a 	add	r4,r4,r4
8110ea28:	2109883a 	add	r4,r4,r4
8110ea2c:	200b883a 	mov	r5,r4
8110ea30:	e13ffb17 	ldw	r4,-20(fp)
8110ea34:	2008d07a 	srli	r4,r4,1
8110ea38:	2909883a 	add	r4,r5,r4
8110ea3c:	e13ff705 	stb	r4,-36(fp)
8110ea40:	00000406 	br	8110ea54 <vUpdateMemMapFEE+0x218>
    } else {
        ucPixelsInLastBlockL = (unsigned char) ( ulMemLeftLinesL * PIXEL_PER_MEM_LINE );
8110ea44:	e13ffc17 	ldw	r4,-16(fp)
8110ea48:	2109883a 	add	r4,r4,r4
8110ea4c:	2109883a 	add	r4,r4,r4
8110ea50:	e13ff705 	stb	r4,-36(fp)
    }

    /* 16 * 4 = 64 - (number of pixels in the last block)) */
    ucShiftsL = ( BLOCK_MEM_SIZE * PIXEL_PER_MEM_LINE ) - ucPixelsInLastBlockL;
8110ea54:	e13ff703 	ldbu	r4,-36(fp)
8110ea58:	01401004 	movi	r5,64
8110ea5c:	2909c83a 	sub	r4,r5,r4
8110ea60:	e13ffd05 	stb	r4,-12(fp)

    /* WARNING: Verify the memory alocation (endianess) */
    pxNfeeL->xMemMap.xCommon.ucPaddingMask.ullWord = (unsigned long long)(0xFFFFFFFFFFFFFFFF >> ucShiftsL);
8110ea64:	e13ffd03 	ldbu	r4,-12(fp)
8110ea68:	217ff804 	addi	r5,r4,-32
8110ea6c:	28000416 	blt	r5,zero,8110ea80 <vUpdateMemMapFEE+0x244>
8110ea70:	013fffc4 	movi	r4,-1
8110ea74:	2144d83a 	srl	r2,r4,r5
8110ea78:	0007883a 	mov	r3,zero
8110ea7c:	00000a06 	br	8110eaa8 <vUpdateMemMapFEE+0x26c>
8110ea80:	017fffc4 	movi	r5,-1
8110ea84:	280c907a 	slli	r6,r5,1
8110ea88:	014007c4 	movi	r5,31
8110ea8c:	290bc83a 	sub	r5,r5,r4
8110ea90:	314a983a 	sll	r5,r6,r5
8110ea94:	01bfffc4 	movi	r6,-1
8110ea98:	3104d83a 	srl	r2,r6,r4
8110ea9c:	2884b03a 	or	r2,r5,r2
8110eaa0:	017fffc4 	movi	r5,-1
8110eaa4:	2906d83a 	srl	r3,r5,r4
8110eaa8:	e13fff17 	ldw	r4,-4(fp)
8110eaac:	20800615 	stw	r2,24(r4)
8110eab0:	20c00715 	stw	r3,28(r4)

    /* Number of block is te same as the number of line masks in the memory */
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;
8110eab4:	e0bff617 	ldw	r2,-40(fp)
8110eab8:	1007883a 	mov	r3,r2
8110eabc:	e0bfff17 	ldw	r2,-4(fp)
8110eac0:	10c0040d 	sth	r3,16(r2)

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
8110eac4:	e0bfff17 	ldw	r2,-4(fp)
8110eac8:	10c00117 	ldw	r3,4(r2)
8110eacc:	008004b4 	movhi	r2,18
8110ead0:	10a40004 	addi	r2,r2,-28672
8110ead4:	1885883a 	add	r2,r3,r2
8110ead8:	e0bff815 	stw	r2,-32(fp)
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
8110eadc:	e0bfff17 	ldw	r2,-4(fp)
8110eae0:	1080048b 	ldhu	r2,18(r2)
8110eae4:	10ffffcc 	andi	r3,r2,65535
8110eae8:	008000b4 	movhi	r2,2
8110eaec:	10a40004 	addi	r2,r2,-28672
8110eaf0:	1885883a 	add	r2,r3,r2
8110eaf4:	e0bffe15 	stw	r2,-8(fp)
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110eaf8:	e03ff745 	stb	zero,-35(fp)
8110eafc:	00001906 	br	8110eb64 <vUpdateMemMapFEE+0x328>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
8110eb00:	e0bff743 	ldbu	r2,-35(fp)
8110eb04:	e0ffff17 	ldw	r3,-4(fp)
8110eb08:	10800624 	muli	r2,r2,24
8110eb0c:	1885883a 	add	r2,r3,r2
8110eb10:	10800804 	addi	r2,r2,32
8110eb14:	e0fff817 	ldw	r3,-32(fp)
8110eb18:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110eb1c:	e0fff817 	ldw	r3,-32(fp)
8110eb20:	e0bffe17 	ldw	r2,-8(fp)
8110eb24:	1885883a 	add	r2,r3,r2
8110eb28:	e0bff815 	stw	r2,-32(fp)
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
8110eb2c:	e0bff743 	ldbu	r2,-35(fp)
8110eb30:	e0ffff17 	ldw	r3,-4(fp)
8110eb34:	10800624 	muli	r2,r2,24
8110eb38:	1885883a 	add	r2,r3,r2
8110eb3c:	10800b04 	addi	r2,r2,44
8110eb40:	e0fff817 	ldw	r3,-32(fp)
8110eb44:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110eb48:	e0fff817 	ldw	r3,-32(fp)
8110eb4c:	e0bffe17 	ldw	r2,-8(fp)
8110eb50:	1885883a 	add	r2,r3,r2
8110eb54:	e0bff815 	stw	r2,-32(fp)
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110eb58:	e0bff743 	ldbu	r2,-35(fp)
8110eb5c:	10800044 	addi	r2,r2,1
8110eb60:	e0bff745 	stb	r2,-35(fp)
8110eb64:	e0bff743 	ldbu	r2,-35(fp)
8110eb68:	10800130 	cmpltui	r2,r2,4
8110eb6c:	103fe41e 	bne	r2,zero,8110eb00 <__reset+0xfb0eeb00>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
    }
}
8110eb70:	0001883a 	nop
8110eb74:	e037883a 	mov	sp,fp
8110eb78:	df000017 	ldw	fp,0(sp)
8110eb7c:	dec00104 	addi	sp,sp,4
8110eb80:	f800283a 	ret

8110eb84 <vFeeSpwRMAPLoadDefault>:

/* Load the default configuration of the SPW/RMAP */
void vFeeSpwRMAPLoadDefault( TNFee *pxNfeeL ) {
8110eb84:	defffe04 	addi	sp,sp,-8
8110eb88:	de00012e 	bgeu	sp,et,8110eb90 <vFeeSpwRMAPLoadDefault+0xc>
8110eb8c:	003b68fa 	trap	3
8110eb90:	df000115 	stw	fp,4(sp)
8110eb94:	df000104 	addi	fp,sp,4
8110eb98:	e13fff15 	stw	r4,-4(fp)
    //bGetSpwRmapSDCard();
    //todo: For now is hardcoded
    //todo: Verificar qual a estrutura usar para as configurações
}
8110eb9c:	0001883a 	nop
8110eba0:	e037883a 	mov	sp,fp
8110eba4:	df000017 	ldw	fp,0(sp)
8110eba8:	dec00104 	addi	sp,sp,4
8110ebac:	f800283a 	ret

8110ebb0 <vFeeSpwRMAPChangeConfig>:

/* Only in NFEE_CONFIG */
/* Change the active configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeConfig( TNFee *pxNfeeL ) {
8110ebb0:	defffe04 	addi	sp,sp,-8
8110ebb4:	de00012e 	bgeu	sp,et,8110ebbc <vFeeSpwRMAPChangeConfig+0xc>
8110ebb8:	003b68fa 	trap	3
8110ebbc:	df000115 	stw	fp,4(sp)
8110ebc0:	df000104 	addi	fp,sp,4
8110ebc4:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar qual a estrutura usar para as configurações
}
8110ebc8:	0001883a 	nop
8110ebcc:	e037883a 	mov	sp,fp
8110ebd0:	df000017 	ldw	fp,0(sp)
8110ebd4:	dec00104 	addi	sp,sp,4
8110ebd8:	f800283a 	ret

8110ebdc <vFeeSpwRMAPChangeDefault>:

/* Only in NFEE_CONFIG */
/* Change the default configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeDefault( TNFee *pxNfeeL ) {
8110ebdc:	defffe04 	addi	sp,sp,-8
8110ebe0:	de00012e 	bgeu	sp,et,8110ebe8 <vFeeSpwRMAPChangeDefault+0xc>
8110ebe4:	003b68fa 	trap	3
8110ebe8:	df000115 	stw	fp,4(sp)
8110ebec:	df000104 	addi	fp,sp,4
8110ebf0:	e13fff15 	stw	r4,-4(fp)
    //bSaveSpwRmapSDCard();
    //todo: Verificar qual a estrutura usar para as configurações, enviar o numero do FEE tbm
}
8110ebf4:	0001883a 	nop
8110ebf8:	e037883a 	mov	sp,fp
8110ebfc:	df000017 	ldw	fp,0(sp)
8110ec00:	dec00104 	addi	sp,sp,4
8110ec04:	f800283a 	ret

8110ec08 <cFeeSpwChannelEnable>:

/* Any mode */
/* Enable SPW channel for the FEE */
void cFeeSpwChannelEnable( TNFee *pxNfeeL ) {
8110ec08:	defffe04 	addi	sp,sp,-8
8110ec0c:	de00012e 	bgeu	sp,et,8110ec14 <cFeeSpwChannelEnable+0xc>
8110ec10:	003b68fa 	trap	3
8110ec14:	df000115 	stw	fp,4(sp)
8110ec18:	df000104 	addi	fp,sp,4
8110ec1c:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110ec20:	0001883a 	nop
8110ec24:	e037883a 	mov	sp,fp
8110ec28:	df000017 	ldw	fp,0(sp)
8110ec2c:	dec00104 	addi	sp,sp,4
8110ec30:	f800283a 	ret

8110ec34 <cFeeSpwChannelDisable>:

/* Any mode */
/* Disable SPW channel for the FEE */
void cFeeSpwChannelDisable( TNFee *pxNfeeL ) {
8110ec34:	defffe04 	addi	sp,sp,-8
8110ec38:	de00012e 	bgeu	sp,et,8110ec40 <cFeeSpwChannelDisable+0xc>
8110ec3c:	003b68fa 	trap	3
8110ec40:	df000115 	stw	fp,4(sp)
8110ec44:	df000104 	addi	fp,sp,4
8110ec48:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110ec4c:	0001883a 	nop
8110ec50:	e037883a 	mov	sp,fp
8110ec54:	df000017 	ldw	fp,0(sp)
8110ec58:	dec00104 	addi	sp,sp,4
8110ec5c:	f800283a 	ret

8110ec60 <cFeeRMAPDump>:

/* Any mode */
/* Dump and send using PUS the RMAP Configuration areas [NFEESIM-UR-699] */
void cFeeRMAPDump( TNFee *pxNfeeL ) {
8110ec60:	defffe04 	addi	sp,sp,-8
8110ec64:	de00012e 	bgeu	sp,et,8110ec6c <cFeeRMAPDump+0xc>
8110ec68:	003b68fa 	trap	3
8110ec6c:	df000115 	stw	fp,4(sp)
8110ec70:	df000104 	addi	fp,sp,4
8110ec74:	e13fff15 	stw	r4,-4(fp)

    //todo: ler as areas de memoria do RMAP e enviar via ethernet

}
8110ec78:	0001883a 	nop
8110ec7c:	e037883a 	mov	sp,fp
8110ec80:	df000017 	ldw	fp,0(sp)
8110ec84:	dec00104 	addi	sp,sp,4
8110ec88:	f800283a 	ret

8110ec8c <cFeeRMAPEchoingEnable>:

/* Any mode */
/* Allow the user to activate the echo mode for RMAP [NFEESIM-UR-588]  */
void cFeeRMAPEchoingEnable( TNFee *pxNfeeL ) {
8110ec8c:	defffe04 	addi	sp,sp,-8
8110ec90:	de00012e 	bgeu	sp,et,8110ec98 <cFeeRMAPEchoingEnable+0xc>
8110ec94:	003b68fa 	trap	3
8110ec98:	df000115 	stw	fp,4(sp)
8110ec9c:	df000104 	addi	fp,sp,4
8110eca0:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = TRUE;
8110eca4:	e0bfff17 	ldw	r2,-4(fp)
8110eca8:	00c00044 	movi	r3,1
8110ecac:	10c02315 	stw	r3,140(r2)
}
8110ecb0:	0001883a 	nop
8110ecb4:	e037883a 	mov	sp,fp
8110ecb8:	df000017 	ldw	fp,0(sp)
8110ecbc:	dec00104 	addi	sp,sp,4
8110ecc0:	f800283a 	ret

8110ecc4 <cFeeRMAPEchoingDisable>:

/* Any mode */
/* Allow the user to disable the echo mode for RMAP [NFEESIM-UR-589]  */
void cFeeRMAPEchoingDisable( TNFee *pxNfeeL ) {
8110ecc4:	defffe04 	addi	sp,sp,-8
8110ecc8:	de00012e 	bgeu	sp,et,8110ecd0 <cFeeRMAPEchoingDisable+0xc>
8110eccc:	003b68fa 	trap	3
8110ecd0:	df000115 	stw	fp,4(sp)
8110ecd4:	df000104 	addi	fp,sp,4
8110ecd8:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = FALSE;
8110ecdc:	e0bfff17 	ldw	r2,-4(fp)
8110ece0:	10002315 	stw	zero,140(r2)
}
8110ece4:	0001883a 	nop
8110ece8:	e037883a 	mov	sp,fp
8110ecec:	df000017 	ldw	fp,0(sp)
8110ecf0:	dec00104 	addi	sp,sp,4
8110ecf4:	f800283a 	ret

8110ecf8 <cFeeRMAPLogEnable>:

/* Any mode */
/* Allow the user to activate the log of RMAP [NFEESIM-UR-588]  */
void cFeeRMAPLogEnable( TNFee *pxNfeeL ) {
8110ecf8:	defffe04 	addi	sp,sp,-8
8110ecfc:	de00012e 	bgeu	sp,et,8110ed04 <cFeeRMAPLogEnable+0xc>
8110ed00:	003b68fa 	trap	3
8110ed04:	df000115 	stw	fp,4(sp)
8110ed08:	df000104 	addi	fp,sp,4
8110ed0c:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = TRUE;
8110ed10:	e0bfff17 	ldw	r2,-4(fp)
8110ed14:	00c00044 	movi	r3,1
8110ed18:	10c02215 	stw	r3,136(r2)
}
8110ed1c:	0001883a 	nop
8110ed20:	e037883a 	mov	sp,fp
8110ed24:	df000017 	ldw	fp,0(sp)
8110ed28:	dec00104 	addi	sp,sp,4
8110ed2c:	f800283a 	ret

8110ed30 <cFeeRMAPLogDisable>:

/* Any mode */
/* Allow the user to disable the log of RMAP [NFEESIM-UR-589]  */
void cFeeRMAPLogDisable( TNFee *pxNfeeL ) {
8110ed30:	defffe04 	addi	sp,sp,-8
8110ed34:	de00012e 	bgeu	sp,et,8110ed3c <cFeeRMAPLogDisable+0xc>
8110ed38:	003b68fa 	trap	3
8110ed3c:	df000115 	stw	fp,4(sp)
8110ed40:	df000104 	addi	fp,sp,4
8110ed44:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = FALSE;
8110ed48:	e0bfff17 	ldw	r2,-4(fp)
8110ed4c:	10002215 	stw	zero,136(r2)
}
8110ed50:	0001883a 	nop
8110ed54:	e037883a 	mov	sp,fp
8110ed58:	df000017 	ldw	fp,0(sp)
8110ed5c:	dec00104 	addi	sp,sp,4
8110ed60:	f800283a 	ret

8110ed64 <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
8110ed64:	defffe04 	addi	sp,sp,-8
8110ed68:	de00012e 	bgeu	sp,et,8110ed70 <vInitSimucamBasicHW+0xc>
8110ed6c:	003b68fa 	trap	3
8110ed70:	dfc00115 	stw	ra,4(sp)
8110ed74:	df000015 	stw	fp,0(sp)
8110ed78:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110ed7c:	01403fc4 	movi	r5,255
8110ed80:	0009883a 	mov	r4,zero
8110ed84:	11060d40 	call	811060d4 <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
8110ed88:	01400834 	movhi	r5,32
8110ed8c:	297fffc4 	addi	r5,r5,-1
8110ed90:	0009883a 	mov	r4,zero
8110ed94:	11061540 	call	81106154 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
8110ed98:	01400074 	movhi	r5,1
8110ed9c:	01000044 	movi	r4,1
8110eda0:	11061540 	call	81106154 <bSetPainelLeds>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
8110eda4:	0009883a 	mov	r4,zero
8110eda8:	11077300 	call	81107730 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
8110edac:	0009883a 	mov	r4,zero
8110edb0:	11078000 	call	81107800 <bSSDisplayUpdate>

}
8110edb4:	0001883a 	nop
8110edb8:	e037883a 	mov	sp,fp
8110edbc:	dfc00117 	ldw	ra,4(sp)
8110edc0:	df000017 	ldw	fp,0(sp)
8110edc4:	dec00204 	addi	sp,sp,8
8110edc8:	f800283a 	ret

8110edcc <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
8110edcc:	defffd04 	addi	sp,sp,-12
8110edd0:	de00012e 	bgeu	sp,et,8110edd8 <bLogWriteSDCard+0xc>
8110edd4:	003b68fa 	trap	3
8110edd8:	df000215 	stw	fp,8(sp)
8110eddc:	df000204 	addi	fp,sp,8
8110ede0:	e13ffe15 	stw	r4,-8(fp)
8110ede4:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
8110ede8:	00800044 	movi	r2,1
}
8110edec:	e037883a 	mov	sp,fp
8110edf0:	df000017 	ldw	fp,0(sp)
8110edf4:	dec00104 	addi	sp,sp,4
8110edf8:	f800283a 	ret

8110edfc <vLogWriteNUC>:

/* Prefer to use directly vSendLog, if there's any error use this function */
void vLogWriteNUC ( const char * cDataIn )
{
8110edfc:	deffe004 	addi	sp,sp,-128
8110ee00:	de00012e 	bgeu	sp,et,8110ee08 <vLogWriteNUC+0xc>
8110ee04:	003b68fa 	trap	3
8110ee08:	dfc01f15 	stw	ra,124(sp)
8110ee0c:	df001e15 	stw	fp,120(sp)
8110ee10:	df001e04 	addi	fp,sp,120
8110ee14:	e13fff15 	stw	r4,-4(fp)
	char cTemp[114] = "";
8110ee18:	e03fe215 	stw	zero,-120(fp)
8110ee1c:	e0bfe304 	addi	r2,fp,-116
8110ee20:	00c01b84 	movi	r3,110
8110ee24:	180d883a 	mov	r6,r3
8110ee28:	000b883a 	mov	r5,zero
8110ee2c:	1009883a 	mov	r4,r2
8110ee30:	11122140 	call	81112214 <memset>
	memset(cTemp,0,114);
8110ee34:	01801c84 	movi	r6,114
8110ee38:	000b883a 	mov	r5,zero
8110ee3c:	e13fe204 	addi	r4,fp,-120
8110ee40:	11122140 	call	81112214 <memset>
	memcpy(cTemp,cDataIn, min_sim( strlen(cDataIn), 113 ) ); /* 113 to let a zero terminator in the worst case (truc the message) */
8110ee44:	e13fff17 	ldw	r4,-4(fp)
8110ee48:	1112a400 	call	81112a40 <strlen>
8110ee4c:	10801c68 	cmpgeui	r2,r2,113
8110ee50:	1000031e 	bne	r2,zero,8110ee60 <vLogWriteNUC+0x64>
8110ee54:	e13fff17 	ldw	r4,-4(fp)
8110ee58:	1112a400 	call	81112a40 <strlen>
8110ee5c:	00000106 	br	8110ee64 <vLogWriteNUC+0x68>
8110ee60:	00801c44 	movi	r2,113
8110ee64:	100d883a 	mov	r6,r2
8110ee68:	e17fff17 	ldw	r5,-4(fp)
8110ee6c:	e13fe204 	addi	r4,fp,-120
8110ee70:	11120c40 	call	811120c4 <memcpy>
	vSendLog ( cDataIn );
8110ee74:	e13fff17 	ldw	r4,-4(fp)
8110ee78:	110c6e00 	call	8110c6e0 <vSendLog>
}
8110ee7c:	0001883a 	nop
8110ee80:	e037883a 	mov	sp,fp
8110ee84:	dfc00117 	ldw	ra,4(sp)
8110ee88:	df000017 	ldw	fp,0(sp)
8110ee8c:	dec00204 	addi	sp,sp,8
8110ee90:	f800283a 	ret

8110ee94 <vSimucamStructureInit>:
 */


#include "meb.h"

void vSimucamStructureInit( TSimucam_MEB *xMeb ) {
8110ee94:	defffc04 	addi	sp,sp,-16
8110ee98:	de00012e 	bgeu	sp,et,8110eea0 <vSimucamStructureInit+0xc>
8110ee9c:	003b68fa 	trap	3
8110eea0:	dfc00315 	stw	ra,12(sp)
8110eea4:	df000215 	stw	fp,8(sp)
8110eea8:	df000204 	addi	fp,sp,8
8110eeac:	e13fff15 	stw	r4,-4(fp)
    unsigned char ucIL = 0;
8110eeb0:	e03ffe05 	stb	zero,-8(fp)

    // LoadTypeOfFeeSDCard();
    // todo: Load from SDCard for now is Hardcoded to Normal FEE
    xMeb->eType = sNormalFEE;
8110eeb4:	e0bfff17 	ldw	r2,-4(fp)
8110eeb8:	10000015 	stw	zero,0(r2)
    
    /* Simucam start in the Meb Config Mode */
    xMeb->eMode = sMebConfig;
8110eebc:	e0bfff17 	ldw	r2,-4(fp)
8110eec0:	10000115 	stw	zero,4(r2)

    /* Load EP */
    vLoadDefaultEPValue( xMeb );
8110eec4:	e13fff17 	ldw	r4,-4(fp)
8110eec8:	110f0300 	call	8110f030 <vLoadDefaultEPValue>
    /* Load RT */
    vLoadDefaultRTValue( xMeb );
8110eecc:	e13fff17 	ldw	r4,-4(fp)
8110eed0:	110f0d40 	call	8110f0d4 <vLoadDefaultRTValue>
    /* Load SyncSource */
    vLoadDefaultSyncSource( xMeb );
8110eed4:	e13fff17 	ldw	r4,-4(fp)
8110eed8:	110f17c0 	call	8110f17c <vLoadDefaultSyncSource>
    /* Reset TimeCode */
    vResetTimeCode( xMeb );
8110eedc:	e13fff17 	ldw	r4,-4(fp)
8110eee0:	110f25c0 	call	8110f25c <vResetTimeCode>
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xMeb );
8110eee4:	e13fff17 	ldw	r4,-4(fp)
8110eee8:	110f3340 	call	8110f334 <vLoadDefaultIdNFEEMaster>
    /* Load Default Config for Auto Reset Mode */
    vLoadDefaultAutoResetSync( xMeb );
8110eeec:	e13fff17 	ldw	r4,-4(fp)
8110eef0:	110f2900 	call	8110f290 <vLoadDefaultAutoResetSync>

    // LoadNumberOfNFeesSDCard();
    /* todo: Load from SDCard for now is Hardcoded for 4 instances of NFEE */
    xMeb->ucNofFeesInUse = 2;
8110eef4:	e0bfff17 	ldw	r2,-4(fp)
8110eef8:	00c00084 	movi	r3,2
8110eefc:	10c00205 	stb	r3,8(r2)

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
8110ef00:	e0bfff17 	ldw	r2,-4(fp)
8110ef04:	10800017 	ldw	r2,0(r2)
8110ef08:	1000391e 	bne	r2,zero,8110eff0 <vSimucamStructureInit+0x15c>
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110ef0c:	e03ffe05 	stb	zero,-8(fp)
8110ef10:	00003306 	br	8110efe0 <vSimucamStructureInit+0x14c>
            if ( ucIL < xMeb->ucNofFeesInUse ) {
8110ef14:	e0bfff17 	ldw	r2,-4(fp)
8110ef18:	10800203 	ldbu	r2,8(r2)
8110ef1c:	10803fcc 	andi	r2,r2,255
8110ef20:	e0fffe03 	ldbu	r3,-8(fp)
8110ef24:	18800a2e 	bgeu	r3,r2,8110ef50 <vSimucamStructureInit+0xbc>
                vNFeeStructureInit( &xMeb->xNfee[ ucIL ], ucIL);
8110ef28:	e0bffe03 	ldbu	r2,-8(fp)
8110ef2c:	10802b24 	muli	r2,r2,172
8110ef30:	10800304 	addi	r2,r2,12
8110ef34:	e0ffff17 	ldw	r3,-4(fp)
8110ef38:	1885883a 	add	r2,r3,r2
8110ef3c:	e0fffe03 	ldbu	r3,-8(fp)
8110ef40:	180b883a 	mov	r5,r3
8110ef44:	1009883a 	mov	r4,r2
8110ef48:	110e7640 	call	8110e764 <vNFeeStructureInit>
8110ef4c:	00000906 	br	8110ef74 <vSimucamStructureInit+0xe0>
            } else {
                vNFeeNotInUse( &xMeb->xNfee[ ucIL ], ucIL);
8110ef50:	e0bffe03 	ldbu	r2,-8(fp)
8110ef54:	10802b24 	muli	r2,r2,172
8110ef58:	10800304 	addi	r2,r2,12
8110ef5c:	e0ffff17 	ldw	r3,-4(fp)
8110ef60:	1885883a 	add	r2,r3,r2
8110ef64:	e0fffe03 	ldbu	r3,-8(fp)
8110ef68:	180b883a 	mov	r5,r3
8110ef6c:	1009883a 	mov	r4,r2
8110ef70:	110e7140 	call	8110e714 <vNFeeNotInUse>
            }
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
8110ef74:	e0bffe03 	ldbu	r2,-8(fp)
8110ef78:	e0fffe03 	ldbu	r3,-8(fp)
8110ef7c:	18c02b24 	muli	r3,r3,172
8110ef80:	18c02304 	addi	r3,r3,140
8110ef84:	e13fff17 	ldw	r4,-4(fp)
8110ef88:	20c7883a 	add	r3,r4,r3
8110ef8c:	e13fff17 	ldw	r4,-4(fp)
8110ef90:	108042c4 	addi	r2,r2,267
8110ef94:	1085883a 	add	r2,r2,r2
8110ef98:	1085883a 	add	r2,r2,r2
8110ef9c:	2085883a 	add	r2,r4,r2
8110efa0:	10c00015 	stw	r3,0(r2)
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
8110efa4:	e0bffe03 	ldbu	r2,-8(fp)
8110efa8:	e0fffe03 	ldbu	r3,-8(fp)
8110efac:	18c02b24 	muli	r3,r3,172
8110efb0:	18c02404 	addi	r3,r3,144
8110efb4:	e13fff17 	ldw	r4,-4(fp)
8110efb8:	20c7883a 	add	r3,r4,r3
8110efbc:	e13fff17 	ldw	r4,-4(fp)
8110efc0:	10804444 	addi	r2,r2,273
8110efc4:	1085883a 	add	r2,r2,r2
8110efc8:	1085883a 	add	r2,r2,r2
8110efcc:	2085883a 	add	r2,r4,r2
8110efd0:	10c00015 	stw	r3,0(r2)
    xMeb->ucNofFeesInUse = 2;

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110efd4:	e0bffe03 	ldbu	r2,-8(fp)
8110efd8:	10800044 	addi	r2,r2,1
8110efdc:	e0bffe05 	stb	r2,-8(fp)
8110efe0:	e0bffe03 	ldbu	r2,-8(fp)
8110efe4:	108001b0 	cmpltui	r2,r2,6
8110efe8:	103fca1e 	bne	r2,zero,8110ef14 <__reset+0xfb0eef14>
8110efec:	00000806 	br	8110f010 <vSimucamStructureInit+0x17c>
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
        }
    } else {
        /* Are Fast Fee instances */
        for ( ucIL = 0; ucIL < N_OF_FastFEE; ucIL++ ) {
8110eff0:	e03ffe05 	stb	zero,-8(fp)
8110eff4:	00000306 	br	8110f004 <vSimucamStructureInit+0x170>
8110eff8:	e0bffe03 	ldbu	r2,-8(fp)
8110effc:	10800044 	addi	r2,r2,1
8110f000:	e0bffe05 	stb	r2,-8(fp)
8110f004:	e0bffe03 	ldbu	r2,-8(fp)
8110f008:	108000b0 	cmpltui	r2,r2,2
8110f00c:	103ffa1e 	bne	r2,zero,8110eff8 <__reset+0xfb0eeff8>
            }            
        }
    }

    /* Reseting swap memory mechanism */
    xMeb->ucActualDDR = 0;
8110f010:	e0bfff17 	ldw	r2,-4(fp)
8110f014:	10010505 	stb	zero,1044(r2)

    /* At this point all structures that manage the aplication of Simucam and FEE are initialized, the tasks could start now */


}
8110f018:	0001883a 	nop
8110f01c:	e037883a 	mov	sp,fp
8110f020:	dfc00117 	ldw	ra,4(sp)
8110f024:	df000017 	ldw	fp,0(sp)
8110f028:	dec00204 	addi	sp,sp,8
8110f02c:	f800283a 	ret

8110f030 <vLoadDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultEPValue( TSimucam_MEB *xMeb ) {
8110f030:	defffe04 	addi	sp,sp,-8
8110f034:	de00012e 	bgeu	sp,et,8110f03c <vLoadDefaultEPValue+0xc>
8110f038:	003b68fa 	trap	3
8110f03c:	df000115 	stw	fp,4(sp)
8110f040:	df000104 	addi	fp,sp,4
8110f044:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucEP = 25;
8110f048:	e0bfff17 	ldw	r2,-4(fp)
8110f04c:	00d07234 	movhi	r3,16840
8110f050:	10c10615 	stw	r3,1048(r2)
}
8110f054:	0001883a 	nop
8110f058:	e037883a 	mov	sp,fp
8110f05c:	df000017 	ldw	fp,0(sp)
8110f060:	dec00104 	addi	sp,sp,4
8110f064:	f800283a 	ret

8110f068 <vChangeEPValue>:

/* Only in MEB_CONFIG */
/* Change the active value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110f068:	defffd04 	addi	sp,sp,-12
8110f06c:	de00012e 	bgeu	sp,et,8110f074 <vChangeEPValue+0xc>
8110f070:	003b68fa 	trap	3
8110f074:	df000215 	stw	fp,8(sp)
8110f078:	df000204 	addi	fp,sp,8
8110f07c:	e13ffe15 	stw	r4,-8(fp)
8110f080:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucEP = ucValue;
8110f084:	e0bffe17 	ldw	r2,-8(fp)
8110f088:	e0ffff17 	ldw	r3,-4(fp)
8110f08c:	10c10615 	stw	r3,1048(r2)
}
8110f090:	0001883a 	nop
8110f094:	e037883a 	mov	sp,fp
8110f098:	df000017 	ldw	fp,0(sp)
8110f09c:	dec00104 	addi	sp,sp,4
8110f0a0:	f800283a 	ret

8110f0a4 <vChangeDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Change the default value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeDefaultEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110f0a4:	defffd04 	addi	sp,sp,-12
8110f0a8:	de00012e 	bgeu	sp,et,8110f0b0 <vChangeDefaultEPValue+0xc>
8110f0ac:	003b68fa 	trap	3
8110f0b0:	df000215 	stw	fp,8(sp)
8110f0b4:	df000204 	addi	fp,sp,8
8110f0b8:	e13ffe15 	stw	r4,-8(fp)
8110f0bc:	e17fff15 	stw	r5,-4(fp)
    //bSaveEPSDCard(ucValue);
}
8110f0c0:	0001883a 	nop
8110f0c4:	e037883a 	mov	sp,fp
8110f0c8:	df000017 	ldw	fp,0(sp)
8110f0cc:	dec00104 	addi	sp,sp,4
8110f0d0:	f800283a 	ret

8110f0d4 <vLoadDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultRTValue( TSimucam_MEB *xMeb ) {
8110f0d4:	defffe04 	addi	sp,sp,-8
8110f0d8:	de00012e 	bgeu	sp,et,8110f0e0 <vLoadDefaultRTValue+0xc>
8110f0dc:	003b68fa 	trap	3
8110f0e0:	df000115 	stw	fp,4(sp)
8110f0e4:	df000104 	addi	fp,sp,4
8110f0e8:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucRT = 3.9;
8110f0ec:	e0ffff17 	ldw	r3,-4(fp)
8110f0f0:	00901eb4 	movhi	r2,16506
8110f0f4:	10a66684 	addi	r2,r2,-26214
8110f0f8:	18810715 	stw	r2,1052(r3)
}
8110f0fc:	0001883a 	nop
8110f100:	e037883a 	mov	sp,fp
8110f104:	df000017 	ldw	fp,0(sp)
8110f108:	dec00104 	addi	sp,sp,4
8110f10c:	f800283a 	ret

8110f110 <vChangeRTValue>:

/* Only in MEB_CONFIG */
/* Change the active value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110f110:	defffd04 	addi	sp,sp,-12
8110f114:	de00012e 	bgeu	sp,et,8110f11c <vChangeRTValue+0xc>
8110f118:	003b68fa 	trap	3
8110f11c:	df000215 	stw	fp,8(sp)
8110f120:	df000204 	addi	fp,sp,8
8110f124:	e13ffe15 	stw	r4,-8(fp)
8110f128:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucRT = ucValue;
8110f12c:	e0bffe17 	ldw	r2,-8(fp)
8110f130:	e0ffff17 	ldw	r3,-4(fp)
8110f134:	10c10715 	stw	r3,1052(r2)
}
8110f138:	0001883a 	nop
8110f13c:	e037883a 	mov	sp,fp
8110f140:	df000017 	ldw	fp,0(sp)
8110f144:	dec00104 	addi	sp,sp,4
8110f148:	f800283a 	ret

8110f14c <vChangeDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Change the default value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeDefaultRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110f14c:	defffd04 	addi	sp,sp,-12
8110f150:	de00012e 	bgeu	sp,et,8110f158 <vChangeDefaultRTValue+0xc>
8110f154:	003b68fa 	trap	3
8110f158:	df000215 	stw	fp,8(sp)
8110f15c:	df000204 	addi	fp,sp,8
8110f160:	e13ffe15 	stw	r4,-8(fp)
8110f164:	e17fff15 	stw	r5,-4(fp)
    //bSaveRTSDCard(ucValue);
}
8110f168:	0001883a 	nop
8110f16c:	e037883a 	mov	sp,fp
8110f170:	df000017 	ldw	fp,0(sp)
8110f174:	dec00104 	addi	sp,sp,4
8110f178:	f800283a 	ret

8110f17c <vLoadDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Load Default Config Sync - Internal or external */
void vLoadDefaultSyncSource( TSimucam_MEB *xMeb ) {
8110f17c:	defffe04 	addi	sp,sp,-8
8110f180:	de00012e 	bgeu	sp,et,8110f188 <vLoadDefaultSyncSource+0xc>
8110f184:	003b68fa 	trap	3
8110f188:	df000115 	stw	fp,4(sp)
8110f18c:	df000104 	addi	fp,sp,4
8110f190:	e13fff15 	stw	r4,-4(fp)
    //bGetSyncSourceSDCard();
    //todo: For now is hardcoded
    xMeb->eSync = sInternal;
8110f194:	e0bfff17 	ldw	r2,-4(fp)
8110f198:	10010815 	stw	zero,1056(r2)
}
8110f19c:	0001883a 	nop
8110f1a0:	e037883a 	mov	sp,fp
8110f1a4:	df000017 	ldw	fp,0(sp)
8110f1a8:	dec00104 	addi	sp,sp,4
8110f1ac:	f800283a 	ret

8110f1b0 <vChangeSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Active Config Sync - Internal or external */
void vChangeSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110f1b0:	defffd04 	addi	sp,sp,-12
8110f1b4:	de00012e 	bgeu	sp,et,8110f1bc <vChangeSyncSource+0xc>
8110f1b8:	003b68fa 	trap	3
8110f1bc:	df000215 	stw	fp,8(sp)
8110f1c0:	df000204 	addi	fp,sp,8
8110f1c4:	e13ffe15 	stw	r4,-8(fp)
8110f1c8:	e17fff15 	stw	r5,-4(fp)
    xMeb->eSync = eSource;
8110f1cc:	e0bffe17 	ldw	r2,-8(fp)
8110f1d0:	e0ffff17 	ldw	r3,-4(fp)
8110f1d4:	10c10815 	stw	r3,1056(r2)
}
8110f1d8:	0001883a 	nop
8110f1dc:	e037883a 	mov	sp,fp
8110f1e0:	df000017 	ldw	fp,0(sp)
8110f1e4:	dec00104 	addi	sp,sp,4
8110f1e8:	f800283a 	ret

8110f1ec <vChangeDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Default Config Sync - Internal or external */
void vChangeDefaultSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110f1ec:	defffd04 	addi	sp,sp,-12
8110f1f0:	de00012e 	bgeu	sp,et,8110f1f8 <vChangeDefaultSyncSource+0xc>
8110f1f4:	003b68fa 	trap	3
8110f1f8:	df000215 	stw	fp,8(sp)
8110f1fc:	df000204 	addi	fp,sp,8
8110f200:	e13ffe15 	stw	r4,-8(fp)
8110f204:	e17fff15 	stw	r5,-4(fp)
    //bSaveSyncSourceSDCard(eSource);
}
8110f208:	0001883a 	nop
8110f20c:	e037883a 	mov	sp,fp
8110f210:	df000017 	ldw	fp,0(sp)
8110f214:	dec00104 	addi	sp,sp,4
8110f218:	f800283a 	ret

8110f21c <vSetTimeCode>:

/* Any mode */
/* Set the time code of the Simucam */
void vSetTimeCode( TSimucam_MEB *xMeb, unsigned char ucTime ) {
8110f21c:	defffd04 	addi	sp,sp,-12
8110f220:	de00012e 	bgeu	sp,et,8110f228 <vSetTimeCode+0xc>
8110f224:	003b68fa 	trap	3
8110f228:	df000215 	stw	fp,8(sp)
8110f22c:	df000204 	addi	fp,sp,8
8110f230:	e13ffe15 	stw	r4,-8(fp)
8110f234:	2805883a 	mov	r2,r5
8110f238:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucTimeCode = ucTime;
8110f23c:	e0bffe17 	ldw	r2,-8(fp)
8110f240:	e0ffff03 	ldbu	r3,-4(fp)
8110f244:	10c10905 	stb	r3,1060(r2)
}
8110f248:	0001883a 	nop
8110f24c:	e037883a 	mov	sp,fp
8110f250:	df000017 	ldw	fp,0(sp)
8110f254:	dec00104 	addi	sp,sp,4
8110f258:	f800283a 	ret

8110f25c <vResetTimeCode>:

/* Reset the time code of the Simucam */
void vResetTimeCode( TSimucam_MEB *xMeb ) {
8110f25c:	defffe04 	addi	sp,sp,-8
8110f260:	de00012e 	bgeu	sp,et,8110f268 <vResetTimeCode+0xc>
8110f264:	003b68fa 	trap	3
8110f268:	df000115 	stw	fp,4(sp)
8110f26c:	df000104 	addi	fp,sp,4
8110f270:	e13fff15 	stw	r4,-4(fp)
    xMeb->ucTimeCode = 0;
8110f274:	e0bfff17 	ldw	r2,-4(fp)
8110f278:	10010905 	stb	zero,1060(r2)
}
8110f27c:	0001883a 	nop
8110f280:	e037883a 	mov	sp,fp
8110f284:	df000017 	ldw	fp,0(sp)
8110f288:	dec00104 	addi	sp,sp,4
8110f28c:	f800283a 	ret

8110f290 <vLoadDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Load Default Config for AutoResetSync */
void vLoadDefaultAutoResetSync( TSimucam_MEB *xMeb ) {
8110f290:	defffe04 	addi	sp,sp,-8
8110f294:	de00012e 	bgeu	sp,et,8110f29c <vLoadDefaultAutoResetSync+0xc>
8110f298:	003b68fa 	trap	3
8110f29c:	df000115 	stw	fp,4(sp)
8110f2a0:	df000104 	addi	fp,sp,4
8110f2a4:	e13fff15 	stw	r4,-4(fp)
    //bGetAutoResetSyncSDCard();
    //todo: For now is hardcoded
    xMeb->bAutoRestSyncMode = TRUE;
8110f2a8:	e0bfff17 	ldw	r2,-4(fp)
8110f2ac:	00c00044 	movi	r3,1
8110f2b0:	10c10a15 	stw	r3,1064(r2)
}
8110f2b4:	0001883a 	nop
8110f2b8:	e037883a 	mov	sp,fp
8110f2bc:	df000017 	ldw	fp,0(sp)
8110f2c0:	dec00104 	addi	sp,sp,4
8110f2c4:	f800283a 	ret

8110f2c8 <vChangeAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Config for AutoResetSync*/
void vChangeAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110f2c8:	defffd04 	addi	sp,sp,-12
8110f2cc:	de00012e 	bgeu	sp,et,8110f2d4 <vChangeAutoResetSync+0xc>
8110f2d0:	003b68fa 	trap	3
8110f2d4:	df000215 	stw	fp,8(sp)
8110f2d8:	df000204 	addi	fp,sp,8
8110f2dc:	e13ffe15 	stw	r4,-8(fp)
8110f2e0:	e17fff15 	stw	r5,-4(fp)
    xMeb->bAutoRestSyncMode = bAutoReset;
8110f2e4:	e0bffe17 	ldw	r2,-8(fp)
8110f2e8:	e0ffff17 	ldw	r3,-4(fp)
8110f2ec:	10c10a15 	stw	r3,1064(r2)
}
8110f2f0:	0001883a 	nop
8110f2f4:	e037883a 	mov	sp,fp
8110f2f8:	df000017 	ldw	fp,0(sp)
8110f2fc:	dec00104 	addi	sp,sp,4
8110f300:	f800283a 	ret

8110f304 <vChangeDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Default Config for AutoResetSync */
void vChangeDefaultAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110f304:	defffd04 	addi	sp,sp,-12
8110f308:	de00012e 	bgeu	sp,et,8110f310 <vChangeDefaultAutoResetSync+0xc>
8110f30c:	003b68fa 	trap	3
8110f310:	df000215 	stw	fp,8(sp)
8110f314:	df000204 	addi	fp,sp,8
8110f318:	e13ffe15 	stw	r4,-8(fp)
8110f31c:	e17fff15 	stw	r5,-4(fp)
    //bSaveAutoResetSyncSDCard(bAutoReset);
}
8110f320:	0001883a 	nop
8110f324:	e037883a 	mov	sp,fp
8110f328:	df000017 	ldw	fp,0(sp)
8110f32c:	dec00104 	addi	sp,sp,4
8110f330:	f800283a 	ret

8110f334 <vLoadDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Load Default Config for IdNFEEMaster */
void vLoadDefaultIdNFEEMaster( TSimucam_MEB *xMeb ) {
8110f334:	defffe04 	addi	sp,sp,-8
8110f338:	de00012e 	bgeu	sp,et,8110f340 <vLoadDefaultIdNFEEMaster+0xc>
8110f33c:	003b68fa 	trap	3
8110f340:	df000115 	stw	fp,4(sp)
8110f344:	df000104 	addi	fp,sp,4
8110f348:	e13fff15 	stw	r4,-4(fp)
    //bGetIdNFEEMasterSDCard();
    //todo: For now is hardcoded
    xMeb->ucIdNFEEMaster = 0;
8110f34c:	e0bfff17 	ldw	r2,-4(fp)
8110f350:	10010945 	stb	zero,1061(r2)
}
8110f354:	0001883a 	nop
8110f358:	e037883a 	mov	sp,fp
8110f35c:	df000017 	ldw	fp,0(sp)
8110f360:	dec00104 	addi	sp,sp,4
8110f364:	f800283a 	ret

8110f368 <vChangeIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Config for IdNFEEMaster*/
void vChangeIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110f368:	defffd04 	addi	sp,sp,-12
8110f36c:	de00012e 	bgeu	sp,et,8110f374 <vChangeIdNFEEMaster+0xc>
8110f370:	003b68fa 	trap	3
8110f374:	df000215 	stw	fp,8(sp)
8110f378:	df000204 	addi	fp,sp,8
8110f37c:	e13ffe15 	stw	r4,-8(fp)
8110f380:	2805883a 	mov	r2,r5
8110f384:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucIdNFEEMaster = ucIdMaster;
8110f388:	e0bffe17 	ldw	r2,-8(fp)
8110f38c:	e0ffff03 	ldbu	r3,-4(fp)
8110f390:	10c10945 	stb	r3,1061(r2)
}
8110f394:	0001883a 	nop
8110f398:	e037883a 	mov	sp,fp
8110f39c:	df000017 	ldw	fp,0(sp)
8110f3a0:	dec00104 	addi	sp,sp,4
8110f3a4:	f800283a 	ret

8110f3a8 <vChangeDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Default Config for IdNFEEMaster */
void vChangeDefaultIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110f3a8:	defffd04 	addi	sp,sp,-12
8110f3ac:	de00012e 	bgeu	sp,et,8110f3b4 <vChangeDefaultIdNFEEMaster+0xc>
8110f3b0:	003b68fa 	trap	3
8110f3b4:	df000215 	stw	fp,8(sp)
8110f3b8:	df000204 	addi	fp,sp,8
8110f3bc:	e13ffe15 	stw	r4,-8(fp)
8110f3c0:	2805883a 	mov	r2,r5
8110f3c4:	e0bfff05 	stb	r2,-4(fp)
    //bSaveIdNFEEMasterSDCard(ucIdMaster);
}
8110f3c8:	0001883a 	nop
8110f3cc:	e037883a 	mov	sp,fp
8110f3d0:	df000017 	ldw	fp,0(sp)
8110f3d4:	dec00104 	addi	sp,sp,4
8110f3d8:	f800283a 	ret

8110f3dc <vSyncReset>:

/* Any mode */
/* Synchronization Reset */
void vSyncReset( TSimucam_MEB *xMeb, float ufSynchDelay ) {
8110f3dc:	defffc04 	addi	sp,sp,-16
8110f3e0:	de00012e 	bgeu	sp,et,8110f3e8 <vSyncReset+0xc>
8110f3e4:	003b68fa 	trap	3
8110f3e8:	dfc00315 	stw	ra,12(sp)
8110f3ec:	df000215 	stw	fp,8(sp)
8110f3f0:	df000204 	addi	fp,sp,8
8110f3f4:	e13ffe15 	stw	r4,-8(fp)
8110f3f8:	e17fff15 	stw	r5,-4(fp)
    // Stop all transmission

    // Put all NFEE in Stand-by mode, if not in Config mode

    // Reset the time code
    vResetTimeCode(xMeb);
8110f3fc:	e13ffe17 	ldw	r4,-8(fp)
8110f400:	110f25c0 	call	8110f25c <vResetTimeCode>

    // Release a synchronization signal

    // Start new cycle

}
8110f404:	0001883a 	nop
8110f408:	e037883a 	mov	sp,fp
8110f40c:	dfc00117 	ldw	ra,4(sp)
8110f410:	df000017 	ldw	fp,0(sp)
8110f414:	dec00204 	addi	sp,sp,8
8110f418:	f800283a 	ret

8110f41c <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
8110f41c:	defffe04 	addi	sp,sp,-8
8110f420:	de00012e 	bgeu	sp,et,8110f428 <bSDcardIsPresent+0xc>
8110f424:	003b68fa 	trap	3
8110f428:	dfc00115 	stw	ra,4(sp)
8110f42c:	df000015 	stw	fp,0(sp)
8110f430:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
8110f434:	11348480 	call	81134848 <alt_up_sd_card_is_Present>
}
8110f438:	e037883a 	mov	sp,fp
8110f43c:	dfc00117 	ldw	ra,4(sp)
8110f440:	df000017 	ldw	fp,0(sp)
8110f444:	dec00204 	addi	sp,sp,8
8110f448:	f800283a 	ret

8110f44c <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
8110f44c:	defffe04 	addi	sp,sp,-8
8110f450:	de00012e 	bgeu	sp,et,8110f458 <bSDcardFAT16Check+0xc>
8110f454:	003b68fa 	trap	3
8110f458:	dfc00115 	stw	ra,4(sp)
8110f45c:	df000015 	stw	fp,0(sp)
8110f460:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
8110f464:	11349140 	call	81134914 <alt_up_sd_card_is_FAT16>
}
8110f468:	e037883a 	mov	sp,fp
8110f46c:	dfc00117 	ldw	ra,4(sp)
8110f470:	df000017 	ldw	fp,0(sp)
8110f474:	dec00204 	addi	sp,sp,8
8110f478:	f800283a 	ret

8110f47c <bInitializeSDCard>:

bool bInitializeSDCard( void ){
8110f47c:	defffd04 	addi	sp,sp,-12
8110f480:	de00012e 	bgeu	sp,et,8110f488 <bInitializeSDCard+0xc>
8110f484:	003b68fa 	trap	3
8110f488:	dfc00215 	stw	ra,8(sp)
8110f48c:	df000115 	stw	fp,4(sp)
8110f490:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
8110f494:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
8110f498:	d0205d15 	stw	zero,-32396(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
8110f49c:	01204534 	movhi	r4,33044
8110f4a0:	21356b04 	addi	r4,r4,-10836
8110f4a4:	11347840 	call	81134784 <alt_up_sd_card_open_dev>
8110f4a8:	d0a05d15 	stw	r2,-32396(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
8110f4ac:	d0a05d17 	ldw	r2,-32396(gp)
8110f4b0:	10002226 	beq	r2,zero,8110f53c <bInitializeSDCard+0xc0>

		bSucess = bSDcardIsPresent();
8110f4b4:	110f41c0 	call	8110f41c <bSDcardIsPresent>
8110f4b8:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
8110f4bc:	e0bfff17 	ldw	r2,-4(fp)
8110f4c0:	10001626 	beq	r2,zero,8110f51c <bInitializeSDCard+0xa0>
			bSucess = bSDcardFAT16Check();
8110f4c4:	110f44c0 	call	8110f44c <bSDcardFAT16Check>
8110f4c8:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
8110f4cc:	e0bfff17 	ldw	r2,-4(fp)
8110f4d0:	10000a26 	beq	r2,zero,8110f4fc <bInitializeSDCard+0x80>
				xSdHandle.connected = TRUE;
8110f4d4:	00800044 	movi	r2,1
8110f4d8:	d0a05c15 	stw	r2,-32400(gp)
				debug(fp, "SD is up.\r\n");
8110f4dc:	d0a04d17 	ldw	r2,-32460(gp)
8110f4e0:	100f883a 	mov	r7,r2
8110f4e4:	018002c4 	movi	r6,11
8110f4e8:	01400044 	movi	r5,1
8110f4ec:	01204534 	movhi	r4,33044
8110f4f0:	21357604 	addi	r4,r4,-10792
8110f4f4:	11116b00 	call	811116b0 <fwrite>
8110f4f8:	00001806 	br	8110f55c <bInitializeSDCard+0xe0>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
8110f4fc:	d0a04d17 	ldw	r2,-32460(gp)
8110f500:	100f883a 	mov	r7,r2
8110f504:	01800984 	movi	r6,38
8110f508:	01400044 	movi	r5,1
8110f50c:	01204534 	movhi	r4,33044
8110f510:	21357904 	addi	r4,r4,-10780
8110f514:	11116b00 	call	811116b0 <fwrite>
8110f518:	00001006 	br	8110f55c <bInitializeSDCard+0xe0>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
8110f51c:	d0a04d17 	ldw	r2,-32460(gp)
8110f520:	100f883a 	mov	r7,r2
8110f524:	01800744 	movi	r6,29
8110f528:	01400044 	movi	r5,1
8110f52c:	01204534 	movhi	r4,33044
8110f530:	21358304 	addi	r4,r4,-10740
8110f534:	11116b00 	call	811116b0 <fwrite>
8110f538:	00000806 	br	8110f55c <bInitializeSDCard+0xe0>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
8110f53c:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
8110f540:	d0a04d17 	ldw	r2,-32460(gp)
8110f544:	100f883a 	mov	r7,r2
8110f548:	018008c4 	movi	r6,35
8110f54c:	01400044 	movi	r5,1
8110f550:	01204534 	movhi	r4,33044
8110f554:	21358b04 	addi	r4,r4,-10708
8110f558:	11116b00 	call	811116b0 <fwrite>
	}

	return bSucess;
8110f55c:	e0bfff17 	ldw	r2,-4(fp)
}
8110f560:	e037883a 	mov	sp,fp
8110f564:	dfc00117 	ldw	ra,4(sp)
8110f568:	df000017 	ldw	fp,0(sp)
8110f56c:	dec00204 	addi	sp,sp,8
8110f570:	f800283a 	ret

8110f574 <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
8110f574:	defffd04 	addi	sp,sp,-12
8110f578:	de00012e 	bgeu	sp,et,8110f580 <siOpenFile+0xc>
8110f57c:	003b68fa 	trap	3
8110f580:	dfc00215 	stw	ra,8(sp)
8110f584:	df000115 	stw	fp,4(sp)
8110f588:	df000104 	addi	fp,sp,4
8110f58c:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
8110f590:	000b883a 	mov	r5,zero
8110f594:	e13fff17 	ldw	r4,-4(fp)
8110f598:	1134e200 	call	81134e20 <alt_up_sd_card_fopen>
}
8110f59c:	e037883a 	mov	sp,fp
8110f5a0:	dfc00117 	ldw	ra,4(sp)
8110f5a4:	df000017 	ldw	fp,0(sp)
8110f5a8:	dec00204 	addi	sp,sp,8
8110f5ac:	f800283a 	ret

8110f5b0 <siCloseFile>:

bool siCloseFile( short int file_handle ) {
8110f5b0:	defffd04 	addi	sp,sp,-12
8110f5b4:	de00012e 	bgeu	sp,et,8110f5bc <siCloseFile+0xc>
8110f5b8:	003b68fa 	trap	3
8110f5bc:	dfc00215 	stw	ra,8(sp)
8110f5c0:	df000115 	stw	fp,4(sp)
8110f5c4:	df000104 	addi	fp,sp,4
8110f5c8:	2005883a 	mov	r2,r4
8110f5cc:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
8110f5d0:	e0bfff0f 	ldh	r2,-4(fp)
8110f5d4:	1009883a 	mov	r4,r2
8110f5d8:	1135c6c0 	call	81135c6c <alt_up_sd_card_fclose>
}
8110f5dc:	e037883a 	mov	sp,fp
8110f5e0:	dfc00117 	ldw	ra,4(sp)
8110f5e4:	df000017 	ldw	fp,0(sp)
8110f5e8:	dec00204 	addi	sp,sp,8
8110f5ec:	f800283a 	ret

8110f5f0 <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
8110f5f0:	defffd04 	addi	sp,sp,-12
8110f5f4:	de00012e 	bgeu	sp,et,8110f5fc <cGetNextChar+0xc>
8110f5f8:	003b68fa 	trap	3
8110f5fc:	dfc00215 	stw	ra,8(sp)
8110f600:	df000115 	stw	fp,4(sp)
8110f604:	df000104 	addi	fp,sp,4
8110f608:	2005883a 	mov	r2,r4
8110f60c:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
8110f610:	e0bfff0f 	ldh	r2,-4(fp)
8110f614:	1009883a 	mov	r4,r2
8110f618:	11352c40 	call	811352c4 <alt_up_sd_card_read>
}
8110f61c:	e037883a 	mov	sp,fp
8110f620:	dfc00117 	ldw	ra,4(sp)
8110f624:	df000017 	ldw	fp,0(sp)
8110f628:	dec00204 	addi	sp,sp,8
8110f62c:	f800283a 	ret

8110f630 <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
8110f630:	deffff04 	addi	sp,sp,-4
8110f634:	de00012e 	bgeu	sp,et,8110f63c <bTestSimucamCriticalHW+0xc>
8110f638:	003b68fa 	trap	3
8110f63c:	df000015 	stw	fp,0(sp)
8110f640:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
8110f644:	00800044 	movi	r2,1
}
8110f648:	e037883a 	mov	sp,fp
8110f64c:	df000017 	ldw	fp,0(sp)
8110f650:	dec00104 	addi	sp,sp,4
8110f654:	f800283a 	ret

8110f658 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
8110f658:	defffc04 	addi	sp,sp,-16
8110f65c:	de00012e 	bgeu	sp,et,8110f664 <_reg_write+0xc>
8110f660:	003b68fa 	trap	3
8110f664:	df000315 	stw	fp,12(sp)
8110f668:	df000304 	addi	fp,sp,12
8110f66c:	e13ffd15 	stw	r4,-12(fp)
8110f670:	e17ffe15 	stw	r5,-8(fp)
8110f674:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
8110f678:	e0bffe17 	ldw	r2,-8(fp)
8110f67c:	1085883a 	add	r2,r2,r2
8110f680:	1085883a 	add	r2,r2,r2
8110f684:	1007883a 	mov	r3,r2
8110f688:	e0bffd17 	ldw	r2,-12(fp)
8110f68c:	1885883a 	add	r2,r3,r2
8110f690:	1007883a 	mov	r3,r2
8110f694:	e0bfff17 	ldw	r2,-4(fp)
8110f698:	18800035 	stwio	r2,0(r3)
	return 1;
8110f69c:	00800044 	movi	r2,1

}
8110f6a0:	e037883a 	mov	sp,fp
8110f6a4:	df000017 	ldw	fp,0(sp)
8110f6a8:	dec00104 	addi	sp,sp,4
8110f6ac:	f800283a 	ret

8110f6b0 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
8110f6b0:	defffc04 	addi	sp,sp,-16
8110f6b4:	de00012e 	bgeu	sp,et,8110f6bc <_reg_read+0xc>
8110f6b8:	003b68fa 	trap	3
8110f6bc:	df000315 	stw	fp,12(sp)
8110f6c0:	df000304 	addi	fp,sp,12
8110f6c4:	e13ffd15 	stw	r4,-12(fp)
8110f6c8:	e17ffe15 	stw	r5,-8(fp)
8110f6cc:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
8110f6d0:	e0bffe17 	ldw	r2,-8(fp)
8110f6d4:	1085883a 	add	r2,r2,r2
8110f6d8:	1085883a 	add	r2,r2,r2
8110f6dc:	1007883a 	mov	r3,r2
8110f6e0:	e0bffd17 	ldw	r2,-12(fp)
8110f6e4:	1885883a 	add	r2,r3,r2
8110f6e8:	10c00037 	ldwio	r3,0(r2)
8110f6ec:	e0bfff17 	ldw	r2,-4(fp)
8110f6f0:	10c00015 	stw	r3,0(r2)
	return 1;
8110f6f4:	00800044 	movi	r2,1

}
8110f6f8:	e037883a 	mov	sp,fp
8110f6fc:	df000017 	ldw	fp,0(sp)
8110f700:	dec00104 	addi	sp,sp,4
8110f704:	f800283a 	ret

8110f708 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
8110f708:	defffa04 	addi	sp,sp,-24
8110f70c:	de00012e 	bgeu	sp,et,8110f714 <_print_codec_status+0xc>
8110f710:	003b68fa 	trap	3
8110f714:	dfc00515 	stw	ra,20(sp)
8110f718:	df000415 	stw	fp,16(sp)
8110f71c:	df000404 	addi	fp,sp,16
8110f720:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
8110f724:	e0bfff17 	ldw	r2,-4(fp)
8110f728:	1005d1ba 	srai	r2,r2,6
8110f72c:	1080004c 	andi	r2,r2,1
8110f730:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
8110f734:	e0bfff17 	ldw	r2,-4(fp)
8110f738:	1005d17a 	srai	r2,r2,5
8110f73c:	1080004c 	andi	r2,r2,1
8110f740:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
8110f744:	e0bfff17 	ldw	r2,-4(fp)
8110f748:	1005d13a 	srai	r2,r2,4
8110f74c:	1080004c 	andi	r2,r2,1
8110f750:	e0bffe15 	stw	r2,-8(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "-------- link status \n");
8110f754:	00e04534 	movhi	r3,33044
8110f758:	18c06204 	addi	r3,r3,392
8110f75c:	00a04534 	movhi	r2,33044
8110f760:	10b59404 	addi	r2,r2,-10672
8110f764:	1009883a 	mov	r4,r2
8110f768:	008005c4 	movi	r2,23
8110f76c:	100d883a 	mov	r6,r2
8110f770:	200b883a 	mov	r5,r4
8110f774:	1809883a 	mov	r4,r3
8110f778:	11120c40 	call	811120c4 <memcpy>
	debug(fp, cDebugBuffer);
8110f77c:	d0a04d17 	ldw	r2,-32460(gp)
8110f780:	01604534 	movhi	r5,33044
8110f784:	29406204 	addi	r5,r5,392
8110f788:	1009883a 	mov	r4,r2
8110f78c:	11110c40 	call	811110c4 <fprintf>
	sprintf(cDebugBuffer, "Link started    : %s \n", (started == 1) ? "S" : "N");
8110f790:	e0bffc17 	ldw	r2,-16(fp)
8110f794:	10800058 	cmpnei	r2,r2,1
8110f798:	1000031e 	bne	r2,zero,8110f7a8 <_print_codec_status+0xa0>
8110f79c:	00a04534 	movhi	r2,33044
8110f7a0:	10b59a04 	addi	r2,r2,-10648
8110f7a4:	00000206 	br	8110f7b0 <_print_codec_status+0xa8>
8110f7a8:	00a04534 	movhi	r2,33044
8110f7ac:	10b59b04 	addi	r2,r2,-10644
8110f7b0:	100d883a 	mov	r6,r2
8110f7b4:	01604534 	movhi	r5,33044
8110f7b8:	29759c04 	addi	r5,r5,-10640
8110f7bc:	01204534 	movhi	r4,33044
8110f7c0:	21006204 	addi	r4,r4,392
8110f7c4:	111282c0 	call	8111282c <sprintf>
	debug(fp, cDebugBuffer);
8110f7c8:	d0a04d17 	ldw	r2,-32460(gp)
8110f7cc:	01604534 	movhi	r5,33044
8110f7d0:	29406204 	addi	r5,r5,392
8110f7d4:	1009883a 	mov	r4,r2
8110f7d8:	11110c40 	call	811110c4 <fprintf>
	sprintf(cDebugBuffer, "Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8110f7dc:	e0bffd17 	ldw	r2,-12(fp)
8110f7e0:	10800058 	cmpnei	r2,r2,1
8110f7e4:	1000031e 	bne	r2,zero,8110f7f4 <_print_codec_status+0xec>
8110f7e8:	00a04534 	movhi	r2,33044
8110f7ec:	10b59a04 	addi	r2,r2,-10648
8110f7f0:	00000206 	br	8110f7fc <_print_codec_status+0xf4>
8110f7f4:	00a04534 	movhi	r2,33044
8110f7f8:	10b59b04 	addi	r2,r2,-10644
8110f7fc:	100d883a 	mov	r6,r2
8110f800:	01604534 	movhi	r5,33044
8110f804:	2975a204 	addi	r5,r5,-10616
8110f808:	01204534 	movhi	r4,33044
8110f80c:	21006204 	addi	r4,r4,392
8110f810:	111282c0 	call	8111282c <sprintf>
	debug(fp, cDebugBuffer);
8110f814:	d0a04d17 	ldw	r2,-32460(gp)
8110f818:	01604534 	movhi	r5,33044
8110f81c:	29406204 	addi	r5,r5,392
8110f820:	1009883a 	mov	r4,r2
8110f824:	11110c40 	call	811110c4 <fprintf>
	sprintf(cDebugBuffer, "Link running    : %s \n", (running == 1) ? "S" : "N");
8110f828:	e0bffe17 	ldw	r2,-8(fp)
8110f82c:	10800058 	cmpnei	r2,r2,1
8110f830:	1000031e 	bne	r2,zero,8110f840 <_print_codec_status+0x138>
8110f834:	00a04534 	movhi	r2,33044
8110f838:	10b59a04 	addi	r2,r2,-10648
8110f83c:	00000206 	br	8110f848 <_print_codec_status+0x140>
8110f840:	00a04534 	movhi	r2,33044
8110f844:	10b59b04 	addi	r2,r2,-10644
8110f848:	100d883a 	mov	r6,r2
8110f84c:	01604534 	movhi	r5,33044
8110f850:	2975a804 	addi	r5,r5,-10592
8110f854:	01204534 	movhi	r4,33044
8110f858:	21006204 	addi	r4,r4,392
8110f85c:	111282c0 	call	8111282c <sprintf>
	debug(fp, cDebugBuffer);
8110f860:	d0a04d17 	ldw	r2,-32460(gp)
8110f864:	01604534 	movhi	r5,33044
8110f868:	29406204 	addi	r5,r5,392
8110f86c:	1009883a 	mov	r4,r2
8110f870:	11110c40 	call	811110c4 <fprintf>
	sprintf(cDebugBuffer, "--------  \n");
8110f874:	00a04534 	movhi	r2,33044
8110f878:	10806204 	addi	r2,r2,392
8110f87c:	00c00b44 	movi	r3,45
8110f880:	10c00005 	stb	r3,0(r2)
8110f884:	00c00b44 	movi	r3,45
8110f888:	10c00045 	stb	r3,1(r2)
8110f88c:	00c00b44 	movi	r3,45
8110f890:	10c00085 	stb	r3,2(r2)
8110f894:	00c00b44 	movi	r3,45
8110f898:	10c000c5 	stb	r3,3(r2)
8110f89c:	00c00b44 	movi	r3,45
8110f8a0:	10c00105 	stb	r3,4(r2)
8110f8a4:	00c00b44 	movi	r3,45
8110f8a8:	10c00145 	stb	r3,5(r2)
8110f8ac:	00c00b44 	movi	r3,45
8110f8b0:	10c00185 	stb	r3,6(r2)
8110f8b4:	00c00b44 	movi	r3,45
8110f8b8:	10c001c5 	stb	r3,7(r2)
8110f8bc:	00c00804 	movi	r3,32
8110f8c0:	10c00205 	stb	r3,8(r2)
8110f8c4:	00c00804 	movi	r3,32
8110f8c8:	10c00245 	stb	r3,9(r2)
8110f8cc:	00c00284 	movi	r3,10
8110f8d0:	10c00285 	stb	r3,10(r2)
8110f8d4:	100002c5 	stb	zero,11(r2)
	debug(fp, cDebugBuffer);
8110f8d8:	d0a04d17 	ldw	r2,-32460(gp)
8110f8dc:	01604534 	movhi	r5,33044
8110f8e0:	29406204 	addi	r5,r5,392
8110f8e4:	1009883a 	mov	r4,r2
8110f8e8:	11110c40 	call	811110c4 <fprintf>
#endif
}
8110f8ec:	0001883a 	nop
8110f8f0:	e037883a 	mov	sp,fp
8110f8f4:	dfc00117 	ldw	ra,4(sp)
8110f8f8:	df000017 	ldw	fp,0(sp)
8110f8fc:	dec00204 	addi	sp,sp,8
8110f900:	f800283a 	ret

8110f904 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
8110f904:	defffb04 	addi	sp,sp,-20
8110f908:	de00012e 	bgeu	sp,et,8110f910 <_split_codec_status+0xc>
8110f90c:	003b68fa 	trap	3
8110f910:	df000415 	stw	fp,16(sp)
8110f914:	df000404 	addi	fp,sp,16
8110f918:	e13ffc15 	stw	r4,-16(fp)
8110f91c:	e17ffd15 	stw	r5,-12(fp)
8110f920:	e1bffe15 	stw	r6,-8(fp)
8110f924:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
8110f928:	e0bffc17 	ldw	r2,-16(fp)
8110f92c:	1005d1ba 	srai	r2,r2,6
8110f930:	10c0004c 	andi	r3,r2,1
8110f934:	e0bffd17 	ldw	r2,-12(fp)
8110f938:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8110f93c:	e0bffc17 	ldw	r2,-16(fp)
8110f940:	1005d17a 	srai	r2,r2,5
8110f944:	10c0004c 	andi	r3,r2,1
8110f948:	e0bffe17 	ldw	r2,-8(fp)
8110f94c:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
8110f950:	e0bffc17 	ldw	r2,-16(fp)
8110f954:	1005d13a 	srai	r2,r2,4
8110f958:	10c0004c 	andi	r3,r2,1
8110f95c:	e0bfff17 	ldw	r2,-4(fp)
8110f960:	10c00015 	stw	r3,0(r2)
}
8110f964:	0001883a 	nop
8110f968:	e037883a 	mov	sp,fp
8110f96c:	df000017 	ldw	fp,0(sp)
8110f970:	dec00104 	addi	sp,sp,4
8110f974:	f800283a 	ret

8110f978 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
alt_u8 aatoh(alt_u8 *buffer) {
8110f978:	defffc04 	addi	sp,sp,-16
8110f97c:	de00012e 	bgeu	sp,et,8110f984 <aatoh+0xc>
8110f980:	003b68fa 	trap	3
8110f984:	df000315 	stw	fp,12(sp)
8110f988:	df000304 	addi	fp,sp,12
8110f98c:	e13fff15 	stw	r4,-4(fp)
	alt_u8* a;
	alt_u8 v;
	a = buffer;
8110f990:	e0bfff17 	ldw	r2,-4(fp)
8110f994:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110f998:	e0bffd17 	ldw	r2,-12(fp)
8110f99c:	10c00003 	ldbu	r3,0(r2)
8110f9a0:	e0bffd17 	ldw	r2,-12(fp)
8110f9a4:	10800003 	ldbu	r2,0(r2)
8110f9a8:	10803fcc 	andi	r2,r2,255
8110f9ac:	10800eb0 	cmpltui	r2,r2,58
8110f9b0:	1000021e 	bne	r2,zero,8110f9bc <aatoh+0x44>
8110f9b4:	00800dc4 	movi	r2,55
8110f9b8:	00000106 	br	8110f9c0 <aatoh+0x48>
8110f9bc:	00800c04 	movi	r2,48
8110f9c0:	1885c83a 	sub	r2,r3,r2
8110f9c4:	1004913a 	slli	r2,r2,4
8110f9c8:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
8110f9cc:	e0bffd17 	ldw	r2,-12(fp)
8110f9d0:	10800044 	addi	r2,r2,1
8110f9d4:	10c00003 	ldbu	r3,0(r2)
8110f9d8:	e0bffd17 	ldw	r2,-12(fp)
8110f9dc:	10800044 	addi	r2,r2,1
8110f9e0:	10800003 	ldbu	r2,0(r2)
 */
alt_u8 aatoh(alt_u8 *buffer) {
	alt_u8* a;
	alt_u8 v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110f9e4:	10803fcc 	andi	r2,r2,255
8110f9e8:	10800eb0 	cmpltui	r2,r2,58
8110f9ec:	1000021e 	bne	r2,zero,8110f9f8 <aatoh+0x80>
8110f9f0:	00800dc4 	movi	r2,55
8110f9f4:	00000106 	br	8110f9fc <aatoh+0x84>
8110f9f8:	00800c04 	movi	r2,48
8110f9fc:	1885c83a 	sub	r2,r3,r2
8110fa00:	2085883a 	add	r2,r4,r2
8110fa04:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
8110fa08:	e0bffe03 	ldbu	r2,-8(fp)
}
8110fa0c:	e037883a 	mov	sp,fp
8110fa10:	df000017 	ldw	fp,0(sp)
8110fa14:	dec00104 	addi	sp,sp,4
8110fa18:	f800283a 	ret

8110fa1c <Verif_Error>:
 * *
 * @retval int
 *
 */

alt_u8 Verif_Error(alt_u8 error_code) {
8110fa1c:	defffd04 	addi	sp,sp,-12
8110fa20:	de00012e 	bgeu	sp,et,8110fa28 <Verif_Error+0xc>
8110fa24:	003b68fa 	trap	3
8110fa28:	dfc00215 	stw	ra,8(sp)
8110fa2c:	df000115 	stw	fp,4(sp)
8110fa30:	df000104 	addi	fp,sp,4
8110fa34:	2005883a 	mov	r2,r4
8110fa38:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
8110fa3c:	e0bfff03 	ldbu	r2,-4(fp)
8110fa40:	1000091e 	bne	r2,zero,8110fa68 <Verif_Error+0x4c>
#ifdef DEBUG_ON
	debug(fp, "ERROR\n\r");
8110fa44:	d0a04d17 	ldw	r2,-32460(gp)
8110fa48:	100f883a 	mov	r7,r2
8110fa4c:	018001c4 	movi	r6,7
8110fa50:	01400044 	movi	r5,1
8110fa54:	01204534 	movhi	r4,33044
8110fa58:	2135ae04 	addi	r4,r4,-10568
8110fa5c:	11116b00 	call	811116b0 <fwrite>
#endif
		return 0;
8110fa60:	0005883a 	mov	r2,zero
8110fa64:	00000106 	br	8110fa6c <Verif_Error+0x50>
	} else
		return 1;
8110fa68:	00800044 	movi	r2,1
}
8110fa6c:	e037883a 	mov	sp,fp
8110fa70:	dfc00117 	ldw	ra,4(sp)
8110fa74:	df000017 	ldw	fp,0(sp)
8110fa78:	dec00204 	addi	sp,sp,8
8110fa7c:	f800283a 	ret

8110fa80 <toInt>:
 * *
 * @retval int
 *
 */

alt_u8 toInt(alt_u8 ascii) {
8110fa80:	defffe04 	addi	sp,sp,-8
8110fa84:	de00012e 	bgeu	sp,et,8110fa8c <toInt+0xc>
8110fa88:	003b68fa 	trap	3
8110fa8c:	df000115 	stw	fp,4(sp)
8110fa90:	df000104 	addi	fp,sp,4
8110fa94:	2005883a 	mov	r2,r4
8110fa98:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
8110fa9c:	e0bfff03 	ldbu	r2,-4(fp)
8110faa0:	10bff404 	addi	r2,r2,-48
}
8110faa4:	e037883a 	mov	sp,fp
8110faa8:	df000017 	ldw	fp,0(sp)
8110faac:	dec00104 	addi	sp,sp,4
8110fab0:	f800283a 	ret

8110fab4 <__divsf3>:
8110fab4:	defff504 	addi	sp,sp,-44
8110fab8:	200cd5fa 	srli	r6,r4,23
8110fabc:	de00012e 	bgeu	sp,et,8110fac4 <__divsf3+0x10>
8110fac0:	003b68fa 	trap	3
8110fac4:	dcc00415 	stw	r19,16(sp)
8110fac8:	2026d7fa 	srli	r19,r4,31
8110facc:	00c02034 	movhi	r3,128
8110fad0:	dd800715 	stw	r22,28(sp)
8110fad4:	dd000515 	stw	r20,20(sp)
8110fad8:	dc800315 	stw	r18,12(sp)
8110fadc:	18ffffc4 	addi	r3,r3,-1
8110fae0:	dfc00a15 	stw	ra,40(sp)
8110fae4:	df000915 	stw	fp,36(sp)
8110fae8:	ddc00815 	stw	r23,32(sp)
8110faec:	dd400615 	stw	r21,24(sp)
8110faf0:	dc400215 	stw	r17,8(sp)
8110faf4:	dc000115 	stw	r16,4(sp)
8110faf8:	35003fcc 	andi	r20,r6,255
8110fafc:	1924703a 	and	r18,r3,r4
8110fb00:	9d803fcc 	andi	r22,r19,255
8110fb04:	a0005226 	beq	r20,zero,8110fc50 <__divsf3+0x19c>
8110fb08:	00803fc4 	movi	r2,255
8110fb0c:	a0802e26 	beq	r20,r2,8110fbc8 <__divsf3+0x114>
8110fb10:	91002034 	orhi	r4,r18,128
8110fb14:	202490fa 	slli	r18,r4,3
8110fb18:	a53fe044 	addi	r20,r20,-127
8110fb1c:	0021883a 	mov	r16,zero
8110fb20:	002f883a 	mov	r23,zero
8110fb24:	280cd5fa 	srli	r6,r5,23
8110fb28:	282ad7fa 	srli	r21,r5,31
8110fb2c:	00c02034 	movhi	r3,128
8110fb30:	18ffffc4 	addi	r3,r3,-1
8110fb34:	31803fcc 	andi	r6,r6,255
8110fb38:	1962703a 	and	r17,r3,r5
8110fb3c:	af003fcc 	andi	fp,r21,255
8110fb40:	30004a26 	beq	r6,zero,8110fc6c <__divsf3+0x1b8>
8110fb44:	00803fc4 	movi	r2,255
8110fb48:	30804526 	beq	r6,r2,8110fc60 <__divsf3+0x1ac>
8110fb4c:	89402034 	orhi	r5,r17,128
8110fb50:	282290fa 	slli	r17,r5,3
8110fb54:	31bfe044 	addi	r6,r6,-127
8110fb58:	000b883a 	mov	r5,zero
8110fb5c:	2c20b03a 	or	r16,r5,r16
8110fb60:	802090ba 	slli	r16,r16,2
8110fb64:	00a04474 	movhi	r2,33041
8110fb68:	10bee204 	addi	r2,r2,-1144
8110fb6c:	80a1883a 	add	r16,r16,r2
8110fb70:	81000017 	ldw	r4,0(r16)
8110fb74:	9d46f03a 	xor	r3,r19,r21
8110fb78:	180f883a 	mov	r7,r3
8110fb7c:	18803fcc 	andi	r2,r3,255
8110fb80:	a18dc83a 	sub	r6,r20,r6
8110fb84:	2000683a 	jmp	r4
8110fb88:	8110fd6c 	andhi	r4,r16,17397
8110fb8c:	8110fbf0 	cmpltui	r4,r16,17391
8110fb90:	8110fd60 	cmpeqi	r4,r16,17397
8110fb94:	8110fbdc 	xori	r4,r16,17391
8110fb98:	8110fd60 	cmpeqi	r4,r16,17397
8110fb9c:	8110fd38 	rdprs	r4,r16,17396
8110fba0:	8110fd60 	cmpeqi	r4,r16,17397
8110fba4:	8110fbdc 	xori	r4,r16,17391
8110fba8:	8110fbf0 	cmpltui	r4,r16,17391
8110fbac:	8110fbf0 	cmpltui	r4,r16,17391
8110fbb0:	8110fd38 	rdprs	r4,r16,17396
8110fbb4:	8110fbdc 	xori	r4,r16,17391
8110fbb8:	8110fe4c 	andi	r4,r16,17401
8110fbbc:	8110fe4c 	andi	r4,r16,17401
8110fbc0:	8110fe4c 	andi	r4,r16,17401
8110fbc4:	8110fe00 	call	88110fe0 <__reset+0x20f0fe0>
8110fbc8:	9000581e 	bne	r18,zero,8110fd2c <__divsf3+0x278>
8110fbcc:	04000204 	movi	r16,8
8110fbd0:	05c00084 	movi	r23,2
8110fbd4:	003fd306 	br	8110fb24 <__reset+0xfb0efb24>
8110fbd8:	0023883a 	mov	r17,zero
8110fbdc:	e02d883a 	mov	r22,fp
8110fbe0:	282f883a 	mov	r23,r5
8110fbe4:	00800084 	movi	r2,2
8110fbe8:	b8808f1e 	bne	r23,r2,8110fe28 <__divsf3+0x374>
8110fbec:	b005883a 	mov	r2,r22
8110fbf0:	11c0004c 	andi	r7,r2,1
8110fbf4:	013fffc4 	movi	r4,-1
8110fbf8:	000d883a 	mov	r6,zero
8110fbfc:	21003fcc 	andi	r4,r4,255
8110fc00:	200895fa 	slli	r4,r4,23
8110fc04:	38803fcc 	andi	r2,r7,255
8110fc08:	00c02034 	movhi	r3,128
8110fc0c:	100497fa 	slli	r2,r2,31
8110fc10:	18ffffc4 	addi	r3,r3,-1
8110fc14:	30c6703a 	and	r3,r6,r3
8110fc18:	1906b03a 	or	r3,r3,r4
8110fc1c:	1884b03a 	or	r2,r3,r2
8110fc20:	dfc00a17 	ldw	ra,40(sp)
8110fc24:	df000917 	ldw	fp,36(sp)
8110fc28:	ddc00817 	ldw	r23,32(sp)
8110fc2c:	dd800717 	ldw	r22,28(sp)
8110fc30:	dd400617 	ldw	r21,24(sp)
8110fc34:	dd000517 	ldw	r20,20(sp)
8110fc38:	dcc00417 	ldw	r19,16(sp)
8110fc3c:	dc800317 	ldw	r18,12(sp)
8110fc40:	dc400217 	ldw	r17,8(sp)
8110fc44:	dc000117 	ldw	r16,4(sp)
8110fc48:	dec00b04 	addi	sp,sp,44
8110fc4c:	f800283a 	ret
8110fc50:	90002b1e 	bne	r18,zero,8110fd00 <__divsf3+0x24c>
8110fc54:	04000104 	movi	r16,4
8110fc58:	05c00044 	movi	r23,1
8110fc5c:	003fb106 	br	8110fb24 <__reset+0xfb0efb24>
8110fc60:	8800251e 	bne	r17,zero,8110fcf8 <__divsf3+0x244>
8110fc64:	01400084 	movi	r5,2
8110fc68:	00000206 	br	8110fc74 <__divsf3+0x1c0>
8110fc6c:	88001a1e 	bne	r17,zero,8110fcd8 <__divsf3+0x224>
8110fc70:	01400044 	movi	r5,1
8110fc74:	8160b03a 	or	r16,r16,r5
8110fc78:	802090ba 	slli	r16,r16,2
8110fc7c:	00e04474 	movhi	r3,33041
8110fc80:	18ff2604 	addi	r3,r3,-872
8110fc84:	80e1883a 	add	r16,r16,r3
8110fc88:	80c00017 	ldw	r3,0(r16)
8110fc8c:	9d44f03a 	xor	r2,r19,r21
8110fc90:	a18dc83a 	sub	r6,r20,r6
8110fc94:	1800683a 	jmp	r3
8110fc98:	8110fbf0 	cmpltui	r4,r16,17391
8110fc9c:	8110fbf0 	cmpltui	r4,r16,17391
8110fca0:	8110fe3c 	xorhi	r4,r16,17400
8110fca4:	8110fbd8 	cmpnei	r4,r16,17391
8110fca8:	8110fe3c 	xorhi	r4,r16,17400
8110fcac:	8110fd38 	rdprs	r4,r16,17396
8110fcb0:	8110fe3c 	xorhi	r4,r16,17400
8110fcb4:	8110fbd8 	cmpnei	r4,r16,17391
8110fcb8:	8110fbf0 	cmpltui	r4,r16,17391
8110fcbc:	8110fbf0 	cmpltui	r4,r16,17391
8110fcc0:	8110fd38 	rdprs	r4,r16,17396
8110fcc4:	8110fbd8 	cmpnei	r4,r16,17391
8110fcc8:	8110fe4c 	andi	r4,r16,17401
8110fccc:	8110fe4c 	andi	r4,r16,17401
8110fcd0:	8110fe4c 	andi	r4,r16,17401
8110fcd4:	8110fe64 	muli	r4,r16,17401
8110fcd8:	8809883a 	mov	r4,r17
8110fcdc:	1110f040 	call	81110f04 <__clzsi2>
8110fce0:	10fffec4 	addi	r3,r2,-5
8110fce4:	10801d84 	addi	r2,r2,118
8110fce8:	88e2983a 	sll	r17,r17,r3
8110fcec:	008dc83a 	sub	r6,zero,r2
8110fcf0:	000b883a 	mov	r5,zero
8110fcf4:	003f9906 	br	8110fb5c <__reset+0xfb0efb5c>
8110fcf8:	014000c4 	movi	r5,3
8110fcfc:	003f9706 	br	8110fb5c <__reset+0xfb0efb5c>
8110fd00:	9009883a 	mov	r4,r18
8110fd04:	d9400015 	stw	r5,0(sp)
8110fd08:	1110f040 	call	81110f04 <__clzsi2>
8110fd0c:	10fffec4 	addi	r3,r2,-5
8110fd10:	11801d84 	addi	r6,r2,118
8110fd14:	90e4983a 	sll	r18,r18,r3
8110fd18:	01a9c83a 	sub	r20,zero,r6
8110fd1c:	0021883a 	mov	r16,zero
8110fd20:	002f883a 	mov	r23,zero
8110fd24:	d9400017 	ldw	r5,0(sp)
8110fd28:	003f7e06 	br	8110fb24 <__reset+0xfb0efb24>
8110fd2c:	04000304 	movi	r16,12
8110fd30:	05c000c4 	movi	r23,3
8110fd34:	003f7b06 	br	8110fb24 <__reset+0xfb0efb24>
8110fd38:	01802034 	movhi	r6,128
8110fd3c:	000f883a 	mov	r7,zero
8110fd40:	31bfffc4 	addi	r6,r6,-1
8110fd44:	013fffc4 	movi	r4,-1
8110fd48:	003fac06 	br	8110fbfc <__reset+0xfb0efbfc>
8110fd4c:	01400044 	movi	r5,1
8110fd50:	2909c83a 	sub	r4,r5,r4
8110fd54:	00c006c4 	movi	r3,27
8110fd58:	19004b0e 	bge	r3,r4,8110fe88 <__divsf3+0x3d4>
8110fd5c:	114e703a 	and	r7,r2,r5
8110fd60:	0009883a 	mov	r4,zero
8110fd64:	000d883a 	mov	r6,zero
8110fd68:	003fa406 	br	8110fbfc <__reset+0xfb0efbfc>
8110fd6c:	9006917a 	slli	r3,r18,5
8110fd70:	8822917a 	slli	r17,r17,5
8110fd74:	1c40372e 	bgeu	r3,r17,8110fe54 <__divsf3+0x3a0>
8110fd78:	31bfffc4 	addi	r6,r6,-1
8110fd7c:	010006c4 	movi	r4,27
8110fd80:	000b883a 	mov	r5,zero
8110fd84:	180f883a 	mov	r7,r3
8110fd88:	294b883a 	add	r5,r5,r5
8110fd8c:	18c7883a 	add	r3,r3,r3
8110fd90:	38000116 	blt	r7,zero,8110fd98 <__divsf3+0x2e4>
8110fd94:	1c400236 	bltu	r3,r17,8110fda0 <__divsf3+0x2ec>
8110fd98:	1c47c83a 	sub	r3,r3,r17
8110fd9c:	29400054 	ori	r5,r5,1
8110fda0:	213fffc4 	addi	r4,r4,-1
8110fda4:	203ff71e 	bne	r4,zero,8110fd84 <__reset+0xfb0efd84>
8110fda8:	1806c03a 	cmpne	r3,r3,zero
8110fdac:	1962b03a 	or	r17,r3,r5
8110fdb0:	31001fc4 	addi	r4,r6,127
8110fdb4:	013fe50e 	bge	zero,r4,8110fd4c <__reset+0xfb0efd4c>
8110fdb8:	88c001cc 	andi	r3,r17,7
8110fdbc:	18000426 	beq	r3,zero,8110fdd0 <__divsf3+0x31c>
8110fdc0:	88c003cc 	andi	r3,r17,15
8110fdc4:	01400104 	movi	r5,4
8110fdc8:	19400126 	beq	r3,r5,8110fdd0 <__divsf3+0x31c>
8110fdcc:	8963883a 	add	r17,r17,r5
8110fdd0:	88c2002c 	andhi	r3,r17,2048
8110fdd4:	18000426 	beq	r3,zero,8110fde8 <__divsf3+0x334>
8110fdd8:	00fe0034 	movhi	r3,63488
8110fddc:	18ffffc4 	addi	r3,r3,-1
8110fde0:	31002004 	addi	r4,r6,128
8110fde4:	88e2703a 	and	r17,r17,r3
8110fde8:	00c03f84 	movi	r3,254
8110fdec:	193f8016 	blt	r3,r4,8110fbf0 <__reset+0xfb0efbf0>
8110fdf0:	880c91ba 	slli	r6,r17,6
8110fdf4:	11c0004c 	andi	r7,r2,1
8110fdf8:	300cd27a 	srli	r6,r6,9
8110fdfc:	003f7f06 	br	8110fbfc <__reset+0xfb0efbfc>
8110fe00:	9080102c 	andhi	r2,r18,64
8110fe04:	10000226 	beq	r2,zero,8110fe10 <__divsf3+0x35c>
8110fe08:	8880102c 	andhi	r2,r17,64
8110fe0c:	10001826 	beq	r2,zero,8110fe70 <__divsf3+0x3bc>
8110fe10:	00802034 	movhi	r2,128
8110fe14:	91801034 	orhi	r6,r18,64
8110fe18:	10bfffc4 	addi	r2,r2,-1
8110fe1c:	980f883a 	mov	r7,r19
8110fe20:	308c703a 	and	r6,r6,r2
8110fe24:	003fc706 	br	8110fd44 <__reset+0xfb0efd44>
8110fe28:	008000c4 	movi	r2,3
8110fe2c:	b8802d26 	beq	r23,r2,8110fee4 <__divsf3+0x430>
8110fe30:	00c00044 	movi	r3,1
8110fe34:	b005883a 	mov	r2,r22
8110fe38:	b8ffdd1e 	bne	r23,r3,8110fdb0 <__reset+0xfb0efdb0>
8110fe3c:	11c0004c 	andi	r7,r2,1
8110fe40:	0009883a 	mov	r4,zero
8110fe44:	000d883a 	mov	r6,zero
8110fe48:	003f6c06 	br	8110fbfc <__reset+0xfb0efbfc>
8110fe4c:	9023883a 	mov	r17,r18
8110fe50:	003f6406 	br	8110fbe4 <__reset+0xfb0efbe4>
8110fe54:	1c47c83a 	sub	r3,r3,r17
8110fe58:	01000684 	movi	r4,26
8110fe5c:	01400044 	movi	r5,1
8110fe60:	003fc806 	br	8110fd84 <__reset+0xfb0efd84>
8110fe64:	9080102c 	andhi	r2,r18,64
8110fe68:	103fe926 	beq	r2,zero,8110fe10 <__reset+0xfb0efe10>
8110fe6c:	0023883a 	mov	r17,zero
8110fe70:	00802034 	movhi	r2,128
8110fe74:	89801034 	orhi	r6,r17,64
8110fe78:	10bfffc4 	addi	r2,r2,-1
8110fe7c:	a80f883a 	mov	r7,r21
8110fe80:	308c703a 	and	r6,r6,r2
8110fe84:	003faf06 	br	8110fd44 <__reset+0xfb0efd44>
8110fe88:	01c00804 	movi	r7,32
8110fe8c:	390fc83a 	sub	r7,r7,r4
8110fe90:	89ce983a 	sll	r7,r17,r7
8110fe94:	890ad83a 	srl	r5,r17,r4
8110fe98:	380ec03a 	cmpne	r7,r7,zero
8110fe9c:	29cab03a 	or	r5,r5,r7
8110fea0:	28c001cc 	andi	r3,r5,7
8110fea4:	18000426 	beq	r3,zero,8110feb8 <__divsf3+0x404>
8110fea8:	28c003cc 	andi	r3,r5,15
8110feac:	01000104 	movi	r4,4
8110feb0:	19000126 	beq	r3,r4,8110feb8 <__divsf3+0x404>
8110feb4:	290b883a 	add	r5,r5,r4
8110feb8:	28c1002c 	andhi	r3,r5,1024
8110febc:	18000426 	beq	r3,zero,8110fed0 <__divsf3+0x41c>
8110fec0:	11c0004c 	andi	r7,r2,1
8110fec4:	01000044 	movi	r4,1
8110fec8:	000d883a 	mov	r6,zero
8110fecc:	003f4b06 	br	8110fbfc <__reset+0xfb0efbfc>
8110fed0:	280a91ba 	slli	r5,r5,6
8110fed4:	11c0004c 	andi	r7,r2,1
8110fed8:	0009883a 	mov	r4,zero
8110fedc:	280cd27a 	srli	r6,r5,9
8110fee0:	003f4606 	br	8110fbfc <__reset+0xfb0efbfc>
8110fee4:	00802034 	movhi	r2,128
8110fee8:	89801034 	orhi	r6,r17,64
8110feec:	10bfffc4 	addi	r2,r2,-1
8110fef0:	b00f883a 	mov	r7,r22
8110fef4:	308c703a 	and	r6,r6,r2
8110fef8:	003f9206 	br	8110fd44 <__reset+0xfb0efd44>

8110fefc <__mulsf3>:
8110fefc:	defff504 	addi	sp,sp,-44
8110ff00:	de00012e 	bgeu	sp,et,8110ff08 <__mulsf3+0xc>
8110ff04:	003b68fa 	trap	3
8110ff08:	dc000115 	stw	r16,4(sp)
8110ff0c:	2020d5fa 	srli	r16,r4,23
8110ff10:	dd400615 	stw	r21,24(sp)
8110ff14:	202ad7fa 	srli	r21,r4,31
8110ff18:	dc800315 	stw	r18,12(sp)
8110ff1c:	04802034 	movhi	r18,128
8110ff20:	df000915 	stw	fp,36(sp)
8110ff24:	dd000515 	stw	r20,20(sp)
8110ff28:	94bfffc4 	addi	r18,r18,-1
8110ff2c:	dfc00a15 	stw	ra,40(sp)
8110ff30:	ddc00815 	stw	r23,32(sp)
8110ff34:	dd800715 	stw	r22,28(sp)
8110ff38:	dcc00415 	stw	r19,16(sp)
8110ff3c:	dc400215 	stw	r17,8(sp)
8110ff40:	84003fcc 	andi	r16,r16,255
8110ff44:	9124703a 	and	r18,r18,r4
8110ff48:	a829883a 	mov	r20,r21
8110ff4c:	af003fcc 	andi	fp,r21,255
8110ff50:	80005426 	beq	r16,zero,811100a4 <__mulsf3+0x1a8>
8110ff54:	00803fc4 	movi	r2,255
8110ff58:	80802f26 	beq	r16,r2,81110018 <__mulsf3+0x11c>
8110ff5c:	91002034 	orhi	r4,r18,128
8110ff60:	202490fa 	slli	r18,r4,3
8110ff64:	843fe044 	addi	r16,r16,-127
8110ff68:	0023883a 	mov	r17,zero
8110ff6c:	002f883a 	mov	r23,zero
8110ff70:	2804d5fa 	srli	r2,r5,23
8110ff74:	282cd7fa 	srli	r22,r5,31
8110ff78:	01002034 	movhi	r4,128
8110ff7c:	213fffc4 	addi	r4,r4,-1
8110ff80:	10803fcc 	andi	r2,r2,255
8110ff84:	2166703a 	and	r19,r4,r5
8110ff88:	b1803fcc 	andi	r6,r22,255
8110ff8c:	10004c26 	beq	r2,zero,811100c0 <__mulsf3+0x1c4>
8110ff90:	00c03fc4 	movi	r3,255
8110ff94:	10c04726 	beq	r2,r3,811100b4 <__mulsf3+0x1b8>
8110ff98:	99002034 	orhi	r4,r19,128
8110ff9c:	202690fa 	slli	r19,r4,3
8110ffa0:	10bfe044 	addi	r2,r2,-127
8110ffa4:	0007883a 	mov	r3,zero
8110ffa8:	80a1883a 	add	r16,r16,r2
8110ffac:	010003c4 	movi	r4,15
8110ffb0:	1c44b03a 	or	r2,r3,r17
8110ffb4:	b56af03a 	xor	r21,r22,r21
8110ffb8:	81c00044 	addi	r7,r16,1
8110ffbc:	20806b36 	bltu	r4,r2,8111016c <__mulsf3+0x270>
8110ffc0:	100490ba 	slli	r2,r2,2
8110ffc4:	01204474 	movhi	r4,33041
8110ffc8:	213ff604 	addi	r4,r4,-40
8110ffcc:	1105883a 	add	r2,r2,r4
8110ffd0:	10800017 	ldw	r2,0(r2)
8110ffd4:	1000683a 	jmp	r2
8110ffd8:	8111016c 	andhi	r4,r16,17413
8110ffdc:	8111002c 	andhi	r4,r16,17408
8110ffe0:	8111002c 	andhi	r4,r16,17408
8110ffe4:	81110028 	cmpgeui	r4,r16,17408
8110ffe8:	81110150 	cmplti	r4,r16,17413
8110ffec:	81110150 	cmplti	r4,r16,17413
8110fff0:	8111013c 	xorhi	r4,r16,17412
8110fff4:	81110028 	cmpgeui	r4,r16,17408
8110fff8:	81110150 	cmplti	r4,r16,17413
8110fffc:	8111013c 	xorhi	r4,r16,17412
81110000:	81110150 	cmplti	r4,r16,17413
81110004:	81110028 	cmpgeui	r4,r16,17408
81110008:	8111015c 	xori	r4,r16,17413
8111000c:	8111015c 	xori	r4,r16,17413
81110010:	8111015c 	xori	r4,r16,17413
81110014:	81110238 	rdprs	r4,r16,17416
81110018:	90003b1e 	bne	r18,zero,81110108 <__mulsf3+0x20c>
8111001c:	04400204 	movi	r17,8
81110020:	05c00084 	movi	r23,2
81110024:	003fd206 	br	8110ff70 <__reset+0xfb0eff70>
81110028:	302b883a 	mov	r21,r6
8111002c:	00800084 	movi	r2,2
81110030:	18802626 	beq	r3,r2,811100cc <__mulsf3+0x1d0>
81110034:	008000c4 	movi	r2,3
81110038:	1880ab26 	beq	r3,r2,811102e8 <__mulsf3+0x3ec>
8111003c:	00800044 	movi	r2,1
81110040:	1880a21e 	bne	r3,r2,811102cc <__mulsf3+0x3d0>
81110044:	a829883a 	mov	r20,r21
81110048:	0007883a 	mov	r3,zero
8111004c:	0009883a 	mov	r4,zero
81110050:	18803fcc 	andi	r2,r3,255
81110054:	100695fa 	slli	r3,r2,23
81110058:	a0803fcc 	andi	r2,r20,255
8111005c:	100a97fa 	slli	r5,r2,31
81110060:	00802034 	movhi	r2,128
81110064:	10bfffc4 	addi	r2,r2,-1
81110068:	2084703a 	and	r2,r4,r2
8111006c:	10c4b03a 	or	r2,r2,r3
81110070:	1144b03a 	or	r2,r2,r5
81110074:	dfc00a17 	ldw	ra,40(sp)
81110078:	df000917 	ldw	fp,36(sp)
8111007c:	ddc00817 	ldw	r23,32(sp)
81110080:	dd800717 	ldw	r22,28(sp)
81110084:	dd400617 	ldw	r21,24(sp)
81110088:	dd000517 	ldw	r20,20(sp)
8111008c:	dcc00417 	ldw	r19,16(sp)
81110090:	dc800317 	ldw	r18,12(sp)
81110094:	dc400217 	ldw	r17,8(sp)
81110098:	dc000117 	ldw	r16,4(sp)
8111009c:	dec00b04 	addi	sp,sp,44
811100a0:	f800283a 	ret
811100a4:	90000d1e 	bne	r18,zero,811100dc <__mulsf3+0x1e0>
811100a8:	04400104 	movi	r17,4
811100ac:	05c00044 	movi	r23,1
811100b0:	003faf06 	br	8110ff70 <__reset+0xfb0eff70>
811100b4:	9806c03a 	cmpne	r3,r19,zero
811100b8:	18c00084 	addi	r3,r3,2
811100bc:	003fba06 	br	8110ffa8 <__reset+0xfb0effa8>
811100c0:	9800141e 	bne	r19,zero,81110114 <__mulsf3+0x218>
811100c4:	00c00044 	movi	r3,1
811100c8:	003fb706 	br	8110ffa8 <__reset+0xfb0effa8>
811100cc:	a829883a 	mov	r20,r21
811100d0:	00ffffc4 	movi	r3,-1
811100d4:	0009883a 	mov	r4,zero
811100d8:	003fdd06 	br	81110050 <__reset+0xfb0f0050>
811100dc:	9009883a 	mov	r4,r18
811100e0:	d9400015 	stw	r5,0(sp)
811100e4:	1110f040 	call	81110f04 <__clzsi2>
811100e8:	10fffec4 	addi	r3,r2,-5
811100ec:	10801d84 	addi	r2,r2,118
811100f0:	90e4983a 	sll	r18,r18,r3
811100f4:	00a1c83a 	sub	r16,zero,r2
811100f8:	0023883a 	mov	r17,zero
811100fc:	002f883a 	mov	r23,zero
81110100:	d9400017 	ldw	r5,0(sp)
81110104:	003f9a06 	br	8110ff70 <__reset+0xfb0eff70>
81110108:	04400304 	movi	r17,12
8111010c:	05c000c4 	movi	r23,3
81110110:	003f9706 	br	8110ff70 <__reset+0xfb0eff70>
81110114:	9809883a 	mov	r4,r19
81110118:	d9800015 	stw	r6,0(sp)
8111011c:	1110f040 	call	81110f04 <__clzsi2>
81110120:	10fffec4 	addi	r3,r2,-5
81110124:	10801d84 	addi	r2,r2,118
81110128:	98e6983a 	sll	r19,r19,r3
8111012c:	0085c83a 	sub	r2,zero,r2
81110130:	0007883a 	mov	r3,zero
81110134:	d9800017 	ldw	r6,0(sp)
81110138:	003f9b06 	br	8110ffa8 <__reset+0xfb0effa8>
8111013c:	01002034 	movhi	r4,128
81110140:	0029883a 	mov	r20,zero
81110144:	213fffc4 	addi	r4,r4,-1
81110148:	00ffffc4 	movi	r3,-1
8111014c:	003fc006 	br	81110050 <__reset+0xfb0f0050>
81110150:	9027883a 	mov	r19,r18
81110154:	b807883a 	mov	r3,r23
81110158:	003fb406 	br	8111002c <__reset+0xfb0f002c>
8111015c:	9027883a 	mov	r19,r18
81110160:	e02b883a 	mov	r21,fp
81110164:	b807883a 	mov	r3,r23
81110168:	003fb006 	br	8111002c <__reset+0xfb0f002c>
8111016c:	9004d43a 	srli	r2,r18,16
81110170:	9810d43a 	srli	r8,r19,16
81110174:	94bfffcc 	andi	r18,r18,65535
81110178:	993fffcc 	andi	r4,r19,65535
8111017c:	910d383a 	mul	r6,r18,r4
81110180:	20a7383a 	mul	r19,r4,r2
81110184:	9225383a 	mul	r18,r18,r8
81110188:	3006d43a 	srli	r3,r6,16
8111018c:	1211383a 	mul	r8,r2,r8
81110190:	94e5883a 	add	r18,r18,r19
81110194:	1c87883a 	add	r3,r3,r18
81110198:	1cc0022e 	bgeu	r3,r19,811101a4 <__mulsf3+0x2a8>
8111019c:	00800074 	movhi	r2,1
811101a0:	4091883a 	add	r8,r8,r2
811101a4:	1804943a 	slli	r2,r3,16
811101a8:	31bfffcc 	andi	r6,r6,65535
811101ac:	1806d43a 	srli	r3,r3,16
811101b0:	1185883a 	add	r2,r2,r6
811101b4:	102691ba 	slli	r19,r2,6
811101b8:	1a07883a 	add	r3,r3,r8
811101bc:	1004d6ba 	srli	r2,r2,26
811101c0:	180891ba 	slli	r4,r3,6
811101c4:	9826c03a 	cmpne	r19,r19,zero
811101c8:	9884b03a 	or	r2,r19,r2
811101cc:	1126b03a 	or	r19,r2,r4
811101d0:	9882002c 	andhi	r2,r19,2048
811101d4:	10000426 	beq	r2,zero,811101e8 <__mulsf3+0x2ec>
811101d8:	9804d07a 	srli	r2,r19,1
811101dc:	9900004c 	andi	r4,r19,1
811101e0:	3821883a 	mov	r16,r7
811101e4:	1126b03a 	or	r19,r2,r4
811101e8:	80c01fc4 	addi	r3,r16,127
811101ec:	00c0210e 	bge	zero,r3,81110274 <__mulsf3+0x378>
811101f0:	988001cc 	andi	r2,r19,7
811101f4:	10000426 	beq	r2,zero,81110208 <__mulsf3+0x30c>
811101f8:	988003cc 	andi	r2,r19,15
811101fc:	01000104 	movi	r4,4
81110200:	11000126 	beq	r2,r4,81110208 <__mulsf3+0x30c>
81110204:	9927883a 	add	r19,r19,r4
81110208:	9882002c 	andhi	r2,r19,2048
8111020c:	10000426 	beq	r2,zero,81110220 <__mulsf3+0x324>
81110210:	00be0034 	movhi	r2,63488
81110214:	10bfffc4 	addi	r2,r2,-1
81110218:	80c02004 	addi	r3,r16,128
8111021c:	98a6703a 	and	r19,r19,r2
81110220:	00803f84 	movi	r2,254
81110224:	10ffa916 	blt	r2,r3,811100cc <__reset+0xfb0f00cc>
81110228:	980891ba 	slli	r4,r19,6
8111022c:	a829883a 	mov	r20,r21
81110230:	2008d27a 	srli	r4,r4,9
81110234:	003f8606 	br	81110050 <__reset+0xfb0f0050>
81110238:	9080102c 	andhi	r2,r18,64
8111023c:	10000826 	beq	r2,zero,81110260 <__mulsf3+0x364>
81110240:	9880102c 	andhi	r2,r19,64
81110244:	1000061e 	bne	r2,zero,81110260 <__mulsf3+0x364>
81110248:	00802034 	movhi	r2,128
8111024c:	99001034 	orhi	r4,r19,64
81110250:	10bfffc4 	addi	r2,r2,-1
81110254:	b029883a 	mov	r20,r22
81110258:	2088703a 	and	r4,r4,r2
8111025c:	003fba06 	br	81110148 <__reset+0xfb0f0148>
81110260:	00802034 	movhi	r2,128
81110264:	91001034 	orhi	r4,r18,64
81110268:	10bfffc4 	addi	r2,r2,-1
8111026c:	2088703a 	and	r4,r4,r2
81110270:	003fb506 	br	81110148 <__reset+0xfb0f0148>
81110274:	00800044 	movi	r2,1
81110278:	10c7c83a 	sub	r3,r2,r3
8111027c:	008006c4 	movi	r2,27
81110280:	10ff7016 	blt	r2,r3,81110044 <__reset+0xfb0f0044>
81110284:	00800804 	movi	r2,32
81110288:	10c5c83a 	sub	r2,r2,r3
8111028c:	9884983a 	sll	r2,r19,r2
81110290:	98c6d83a 	srl	r3,r19,r3
81110294:	1004c03a 	cmpne	r2,r2,zero
81110298:	1884b03a 	or	r2,r3,r2
8111029c:	10c001cc 	andi	r3,r2,7
811102a0:	18000426 	beq	r3,zero,811102b4 <__mulsf3+0x3b8>
811102a4:	10c003cc 	andi	r3,r2,15
811102a8:	01000104 	movi	r4,4
811102ac:	19000126 	beq	r3,r4,811102b4 <__mulsf3+0x3b8>
811102b0:	1105883a 	add	r2,r2,r4
811102b4:	10c1002c 	andhi	r3,r2,1024
811102b8:	18000626 	beq	r3,zero,811102d4 <__mulsf3+0x3d8>
811102bc:	a829883a 	mov	r20,r21
811102c0:	00c00044 	movi	r3,1
811102c4:	0009883a 	mov	r4,zero
811102c8:	003f6106 	br	81110050 <__reset+0xfb0f0050>
811102cc:	3821883a 	mov	r16,r7
811102d0:	003fc506 	br	811101e8 <__reset+0xfb0f01e8>
811102d4:	100491ba 	slli	r2,r2,6
811102d8:	a829883a 	mov	r20,r21
811102dc:	0007883a 	mov	r3,zero
811102e0:	1008d27a 	srli	r4,r2,9
811102e4:	003f5a06 	br	81110050 <__reset+0xfb0f0050>
811102e8:	00802034 	movhi	r2,128
811102ec:	99001034 	orhi	r4,r19,64
811102f0:	10bfffc4 	addi	r2,r2,-1
811102f4:	a829883a 	mov	r20,r21
811102f8:	2088703a 	and	r4,r4,r2
811102fc:	003f9206 	br	81110148 <__reset+0xfb0f0148>

81110300 <__floatsisf>:
81110300:	defffd04 	addi	sp,sp,-12
81110304:	de00012e 	bgeu	sp,et,8111030c <__floatsisf+0xc>
81110308:	003b68fa 	trap	3
8111030c:	dfc00215 	stw	ra,8(sp)
81110310:	dc400115 	stw	r17,4(sp)
81110314:	dc000015 	stw	r16,0(sp)
81110318:	20003526 	beq	r4,zero,811103f0 <__floatsisf+0xf0>
8111031c:	2021883a 	mov	r16,r4
81110320:	2022d7fa 	srli	r17,r4,31
81110324:	20003616 	blt	r4,zero,81110400 <__floatsisf+0x100>
81110328:	8009883a 	mov	r4,r16
8111032c:	1110f040 	call	81110f04 <__clzsi2>
81110330:	00c02784 	movi	r3,158
81110334:	1887c83a 	sub	r3,r3,r2
81110338:	01002584 	movi	r4,150
8111033c:	20c01416 	blt	r4,r3,81110390 <__floatsisf+0x90>
81110340:	20c9c83a 	sub	r4,r4,r3
81110344:	8120983a 	sll	r16,r16,r4
81110348:	00802034 	movhi	r2,128
8111034c:	10bfffc4 	addi	r2,r2,-1
81110350:	8809883a 	mov	r4,r17
81110354:	80a0703a 	and	r16,r16,r2
81110358:	18803fcc 	andi	r2,r3,255
8111035c:	100695fa 	slli	r3,r2,23
81110360:	20803fcc 	andi	r2,r4,255
81110364:	100897fa 	slli	r4,r2,31
81110368:	00802034 	movhi	r2,128
8111036c:	10bfffc4 	addi	r2,r2,-1
81110370:	8084703a 	and	r2,r16,r2
81110374:	10c4b03a 	or	r2,r2,r3
81110378:	1104b03a 	or	r2,r2,r4
8111037c:	dfc00217 	ldw	ra,8(sp)
81110380:	dc400117 	ldw	r17,4(sp)
81110384:	dc000017 	ldw	r16,0(sp)
81110388:	dec00304 	addi	sp,sp,12
8111038c:	f800283a 	ret
81110390:	01002644 	movi	r4,153
81110394:	20c01c16 	blt	r4,r3,81110408 <__floatsisf+0x108>
81110398:	20c9c83a 	sub	r4,r4,r3
8111039c:	8120983a 	sll	r16,r16,r4
811103a0:	013f0034 	movhi	r4,64512
811103a4:	213fffc4 	addi	r4,r4,-1
811103a8:	814001cc 	andi	r5,r16,7
811103ac:	8108703a 	and	r4,r16,r4
811103b0:	28000426 	beq	r5,zero,811103c4 <__floatsisf+0xc4>
811103b4:	840003cc 	andi	r16,r16,15
811103b8:	01400104 	movi	r5,4
811103bc:	81400126 	beq	r16,r5,811103c4 <__floatsisf+0xc4>
811103c0:	2149883a 	add	r4,r4,r5
811103c4:	2141002c 	andhi	r5,r4,1024
811103c8:	28000526 	beq	r5,zero,811103e0 <__floatsisf+0xe0>
811103cc:	00c027c4 	movi	r3,159
811103d0:	1887c83a 	sub	r3,r3,r2
811103d4:	00bf0034 	movhi	r2,64512
811103d8:	10bfffc4 	addi	r2,r2,-1
811103dc:	2088703a 	and	r4,r4,r2
811103e0:	202091ba 	slli	r16,r4,6
811103e4:	8809883a 	mov	r4,r17
811103e8:	8020d27a 	srli	r16,r16,9
811103ec:	003fda06 	br	81110358 <__reset+0xfb0f0358>
811103f0:	0009883a 	mov	r4,zero
811103f4:	0007883a 	mov	r3,zero
811103f8:	0021883a 	mov	r16,zero
811103fc:	003fd606 	br	81110358 <__reset+0xfb0f0358>
81110400:	0121c83a 	sub	r16,zero,r4
81110404:	003fc806 	br	81110328 <__reset+0xfb0f0328>
81110408:	01002e44 	movi	r4,185
8111040c:	20c9c83a 	sub	r4,r4,r3
81110410:	01400144 	movi	r5,5
81110414:	8108983a 	sll	r4,r16,r4
81110418:	288bc83a 	sub	r5,r5,r2
8111041c:	8160d83a 	srl	r16,r16,r5
81110420:	2008c03a 	cmpne	r4,r4,zero
81110424:	8120b03a 	or	r16,r16,r4
81110428:	003fdd06 	br	811103a0 <__reset+0xfb0f03a0>

8111042c <__floatunsisf>:
8111042c:	defffe04 	addi	sp,sp,-8
81110430:	de00012e 	bgeu	sp,et,81110438 <__floatunsisf+0xc>
81110434:	003b68fa 	trap	3
81110438:	dfc00115 	stw	ra,4(sp)
8111043c:	dc000015 	stw	r16,0(sp)
81110440:	20002c26 	beq	r4,zero,811104f4 <__floatunsisf+0xc8>
81110444:	2021883a 	mov	r16,r4
81110448:	1110f040 	call	81110f04 <__clzsi2>
8111044c:	00c02784 	movi	r3,158
81110450:	1887c83a 	sub	r3,r3,r2
81110454:	01002584 	movi	r4,150
81110458:	20c00f16 	blt	r4,r3,81110498 <__floatunsisf+0x6c>
8111045c:	20c9c83a 	sub	r4,r4,r3
81110460:	8108983a 	sll	r4,r16,r4
81110464:	00802034 	movhi	r2,128
81110468:	10bfffc4 	addi	r2,r2,-1
8111046c:	2088703a 	and	r4,r4,r2
81110470:	18803fcc 	andi	r2,r3,255
81110474:	100695fa 	slli	r3,r2,23
81110478:	00802034 	movhi	r2,128
8111047c:	10bfffc4 	addi	r2,r2,-1
81110480:	2084703a 	and	r2,r4,r2
81110484:	10c4b03a 	or	r2,r2,r3
81110488:	dfc00117 	ldw	ra,4(sp)
8111048c:	dc000017 	ldw	r16,0(sp)
81110490:	dec00204 	addi	sp,sp,8
81110494:	f800283a 	ret
81110498:	01002644 	movi	r4,153
8111049c:	20c01816 	blt	r4,r3,81110500 <__floatunsisf+0xd4>
811104a0:	20c9c83a 	sub	r4,r4,r3
811104a4:	8108983a 	sll	r4,r16,r4
811104a8:	017f0034 	movhi	r5,64512
811104ac:	297fffc4 	addi	r5,r5,-1
811104b0:	218001cc 	andi	r6,r4,7
811104b4:	214a703a 	and	r5,r4,r5
811104b8:	30000426 	beq	r6,zero,811104cc <__floatunsisf+0xa0>
811104bc:	210003cc 	andi	r4,r4,15
811104c0:	01800104 	movi	r6,4
811104c4:	21800126 	beq	r4,r6,811104cc <__floatunsisf+0xa0>
811104c8:	298b883a 	add	r5,r5,r6
811104cc:	2901002c 	andhi	r4,r5,1024
811104d0:	20000526 	beq	r4,zero,811104e8 <__floatunsisf+0xbc>
811104d4:	00c027c4 	movi	r3,159
811104d8:	1887c83a 	sub	r3,r3,r2
811104dc:	00bf0034 	movhi	r2,64512
811104e0:	10bfffc4 	addi	r2,r2,-1
811104e4:	288a703a 	and	r5,r5,r2
811104e8:	280891ba 	slli	r4,r5,6
811104ec:	2008d27a 	srli	r4,r4,9
811104f0:	003fdf06 	br	81110470 <__reset+0xfb0f0470>
811104f4:	0007883a 	mov	r3,zero
811104f8:	0009883a 	mov	r4,zero
811104fc:	003fdc06 	br	81110470 <__reset+0xfb0f0470>
81110500:	01402e44 	movi	r5,185
81110504:	28cbc83a 	sub	r5,r5,r3
81110508:	01000144 	movi	r4,5
8111050c:	2089c83a 	sub	r4,r4,r2
81110510:	814a983a 	sll	r5,r16,r5
81110514:	8108d83a 	srl	r4,r16,r4
81110518:	2820c03a 	cmpne	r16,r5,zero
8111051c:	2408b03a 	or	r4,r4,r16
81110520:	003fe106 	br	811104a8 <__reset+0xfb0f04a8>

81110524 <__muldf3>:
81110524:	defff304 	addi	sp,sp,-52
81110528:	2804d53a 	srli	r2,r5,20
8111052c:	de00012e 	bgeu	sp,et,81110534 <__muldf3+0x10>
81110530:	003b68fa 	trap	3
81110534:	dd800915 	stw	r22,36(sp)
81110538:	282cd7fa 	srli	r22,r5,31
8111053c:	dc000315 	stw	r16,12(sp)
81110540:	04000434 	movhi	r16,16
81110544:	dd400815 	stw	r21,32(sp)
81110548:	dc800515 	stw	r18,20(sp)
8111054c:	843fffc4 	addi	r16,r16,-1
81110550:	dfc00c15 	stw	ra,48(sp)
81110554:	df000b15 	stw	fp,44(sp)
81110558:	ddc00a15 	stw	r23,40(sp)
8111055c:	dd000715 	stw	r20,28(sp)
81110560:	dcc00615 	stw	r19,24(sp)
81110564:	dc400415 	stw	r17,16(sp)
81110568:	1481ffcc 	andi	r18,r2,2047
8111056c:	2c20703a 	and	r16,r5,r16
81110570:	b02b883a 	mov	r21,r22
81110574:	b2403fcc 	andi	r9,r22,255
81110578:	90006026 	beq	r18,zero,811106fc <__muldf3+0x1d8>
8111057c:	0081ffc4 	movi	r2,2047
81110580:	2029883a 	mov	r20,r4
81110584:	90803626 	beq	r18,r2,81110660 <__muldf3+0x13c>
81110588:	80800434 	orhi	r2,r16,16
8111058c:	100490fa 	slli	r2,r2,3
81110590:	2020d77a 	srli	r16,r4,29
81110594:	202890fa 	slli	r20,r4,3
81110598:	94bf0044 	addi	r18,r18,-1023
8111059c:	80a0b03a 	or	r16,r16,r2
811105a0:	0027883a 	mov	r19,zero
811105a4:	0039883a 	mov	fp,zero
811105a8:	3804d53a 	srli	r2,r7,20
811105ac:	382ed7fa 	srli	r23,r7,31
811105b0:	04400434 	movhi	r17,16
811105b4:	8c7fffc4 	addi	r17,r17,-1
811105b8:	1081ffcc 	andi	r2,r2,2047
811105bc:	3011883a 	mov	r8,r6
811105c0:	3c62703a 	and	r17,r7,r17
811105c4:	ba803fcc 	andi	r10,r23,255
811105c8:	10006d26 	beq	r2,zero,81110780 <__muldf3+0x25c>
811105cc:	00c1ffc4 	movi	r3,2047
811105d0:	10c06526 	beq	r2,r3,81110768 <__muldf3+0x244>
811105d4:	88c00434 	orhi	r3,r17,16
811105d8:	180690fa 	slli	r3,r3,3
811105dc:	3022d77a 	srli	r17,r6,29
811105e0:	301090fa 	slli	r8,r6,3
811105e4:	10bf0044 	addi	r2,r2,-1023
811105e8:	88e2b03a 	or	r17,r17,r3
811105ec:	000b883a 	mov	r5,zero
811105f0:	9085883a 	add	r2,r18,r2
811105f4:	2cc8b03a 	or	r4,r5,r19
811105f8:	00c003c4 	movi	r3,15
811105fc:	bdacf03a 	xor	r22,r23,r22
81110600:	12c00044 	addi	r11,r2,1
81110604:	19009936 	bltu	r3,r4,8111086c <__muldf3+0x348>
81110608:	200890ba 	slli	r4,r4,2
8111060c:	00e04474 	movhi	r3,33041
81110610:	18c18804 	addi	r3,r3,1568
81110614:	20c9883a 	add	r4,r4,r3
81110618:	20c00017 	ldw	r3,0(r4)
8111061c:	1800683a 	jmp	r3
81110620:	8111086c 	andhi	r4,r16,17441
81110624:	81110680 	call	88111068 <__reset+0x20f1068>
81110628:	81110680 	call	88111068 <__reset+0x20f1068>
8111062c:	8111067c 	xorhi	r4,r16,17433
81110630:	81110848 	cmpgei	r4,r16,17441
81110634:	81110848 	cmpgei	r4,r16,17441
81110638:	81110830 	cmpltui	r4,r16,17440
8111063c:	8111067c 	xorhi	r4,r16,17433
81110640:	81110848 	cmpgei	r4,r16,17441
81110644:	81110830 	cmpltui	r4,r16,17440
81110648:	81110848 	cmpgei	r4,r16,17441
8111064c:	8111067c 	xorhi	r4,r16,17433
81110650:	81110858 	cmpnei	r4,r16,17441
81110654:	81110858 	cmpnei	r4,r16,17441
81110658:	81110858 	cmpnei	r4,r16,17441
8111065c:	81110a74 	orhi	r4,r16,17449
81110660:	2404b03a 	or	r2,r4,r16
81110664:	10006f1e 	bne	r2,zero,81110824 <__muldf3+0x300>
81110668:	04c00204 	movi	r19,8
8111066c:	0021883a 	mov	r16,zero
81110670:	0029883a 	mov	r20,zero
81110674:	07000084 	movi	fp,2
81110678:	003fcb06 	br	811105a8 <__reset+0xfb0f05a8>
8111067c:	502d883a 	mov	r22,r10
81110680:	00800084 	movi	r2,2
81110684:	28805726 	beq	r5,r2,811107e4 <__muldf3+0x2c0>
81110688:	008000c4 	movi	r2,3
8111068c:	28816626 	beq	r5,r2,81110c28 <__muldf3+0x704>
81110690:	00800044 	movi	r2,1
81110694:	2881411e 	bne	r5,r2,81110b9c <__muldf3+0x678>
81110698:	b02b883a 	mov	r21,r22
8111069c:	0005883a 	mov	r2,zero
811106a0:	000b883a 	mov	r5,zero
811106a4:	0029883a 	mov	r20,zero
811106a8:	1004953a 	slli	r2,r2,20
811106ac:	a8c03fcc 	andi	r3,r21,255
811106b0:	04400434 	movhi	r17,16
811106b4:	8c7fffc4 	addi	r17,r17,-1
811106b8:	180697fa 	slli	r3,r3,31
811106bc:	2c4a703a 	and	r5,r5,r17
811106c0:	288ab03a 	or	r5,r5,r2
811106c4:	28c6b03a 	or	r3,r5,r3
811106c8:	a005883a 	mov	r2,r20
811106cc:	dfc00c17 	ldw	ra,48(sp)
811106d0:	df000b17 	ldw	fp,44(sp)
811106d4:	ddc00a17 	ldw	r23,40(sp)
811106d8:	dd800917 	ldw	r22,36(sp)
811106dc:	dd400817 	ldw	r21,32(sp)
811106e0:	dd000717 	ldw	r20,28(sp)
811106e4:	dcc00617 	ldw	r19,24(sp)
811106e8:	dc800517 	ldw	r18,20(sp)
811106ec:	dc400417 	ldw	r17,16(sp)
811106f0:	dc000317 	ldw	r16,12(sp)
811106f4:	dec00d04 	addi	sp,sp,52
811106f8:	f800283a 	ret
811106fc:	2404b03a 	or	r2,r4,r16
81110700:	2027883a 	mov	r19,r4
81110704:	10004226 	beq	r2,zero,81110810 <__muldf3+0x2ec>
81110708:	8000fc26 	beq	r16,zero,81110afc <__muldf3+0x5d8>
8111070c:	8009883a 	mov	r4,r16
81110710:	d9800215 	stw	r6,8(sp)
81110714:	d9c00015 	stw	r7,0(sp)
81110718:	da400115 	stw	r9,4(sp)
8111071c:	1110f040 	call	81110f04 <__clzsi2>
81110720:	d9800217 	ldw	r6,8(sp)
81110724:	d9c00017 	ldw	r7,0(sp)
81110728:	da400117 	ldw	r9,4(sp)
8111072c:	113ffd44 	addi	r4,r2,-11
81110730:	00c00704 	movi	r3,28
81110734:	1900ed16 	blt	r3,r4,81110aec <__muldf3+0x5c8>
81110738:	00c00744 	movi	r3,29
8111073c:	147ffe04 	addi	r17,r2,-8
81110740:	1907c83a 	sub	r3,r3,r4
81110744:	8460983a 	sll	r16,r16,r17
81110748:	98c6d83a 	srl	r3,r19,r3
8111074c:	9c68983a 	sll	r20,r19,r17
81110750:	1c20b03a 	or	r16,r3,r16
81110754:	1080fcc4 	addi	r2,r2,1011
81110758:	00a5c83a 	sub	r18,zero,r2
8111075c:	0027883a 	mov	r19,zero
81110760:	0039883a 	mov	fp,zero
81110764:	003f9006 	br	811105a8 <__reset+0xfb0f05a8>
81110768:	3446b03a 	or	r3,r6,r17
8111076c:	1800261e 	bne	r3,zero,81110808 <__muldf3+0x2e4>
81110770:	0023883a 	mov	r17,zero
81110774:	0011883a 	mov	r8,zero
81110778:	01400084 	movi	r5,2
8111077c:	003f9c06 	br	811105f0 <__reset+0xfb0f05f0>
81110780:	3446b03a 	or	r3,r6,r17
81110784:	18001c26 	beq	r3,zero,811107f8 <__muldf3+0x2d4>
81110788:	8800ce26 	beq	r17,zero,81110ac4 <__muldf3+0x5a0>
8111078c:	8809883a 	mov	r4,r17
81110790:	d9800215 	stw	r6,8(sp)
81110794:	da400115 	stw	r9,4(sp)
81110798:	da800015 	stw	r10,0(sp)
8111079c:	1110f040 	call	81110f04 <__clzsi2>
811107a0:	d9800217 	ldw	r6,8(sp)
811107a4:	da400117 	ldw	r9,4(sp)
811107a8:	da800017 	ldw	r10,0(sp)
811107ac:	113ffd44 	addi	r4,r2,-11
811107b0:	00c00704 	movi	r3,28
811107b4:	1900bf16 	blt	r3,r4,81110ab4 <__muldf3+0x590>
811107b8:	00c00744 	movi	r3,29
811107bc:	123ffe04 	addi	r8,r2,-8
811107c0:	1907c83a 	sub	r3,r3,r4
811107c4:	8a22983a 	sll	r17,r17,r8
811107c8:	30c6d83a 	srl	r3,r6,r3
811107cc:	3210983a 	sll	r8,r6,r8
811107d0:	1c62b03a 	or	r17,r3,r17
811107d4:	1080fcc4 	addi	r2,r2,1011
811107d8:	0085c83a 	sub	r2,zero,r2
811107dc:	000b883a 	mov	r5,zero
811107e0:	003f8306 	br	811105f0 <__reset+0xfb0f05f0>
811107e4:	b02b883a 	mov	r21,r22
811107e8:	0081ffc4 	movi	r2,2047
811107ec:	000b883a 	mov	r5,zero
811107f0:	0029883a 	mov	r20,zero
811107f4:	003fac06 	br	811106a8 <__reset+0xfb0f06a8>
811107f8:	0023883a 	mov	r17,zero
811107fc:	0011883a 	mov	r8,zero
81110800:	01400044 	movi	r5,1
81110804:	003f7a06 	br	811105f0 <__reset+0xfb0f05f0>
81110808:	014000c4 	movi	r5,3
8111080c:	003f7806 	br	811105f0 <__reset+0xfb0f05f0>
81110810:	04c00104 	movi	r19,4
81110814:	0021883a 	mov	r16,zero
81110818:	0029883a 	mov	r20,zero
8111081c:	07000044 	movi	fp,1
81110820:	003f6106 	br	811105a8 <__reset+0xfb0f05a8>
81110824:	04c00304 	movi	r19,12
81110828:	070000c4 	movi	fp,3
8111082c:	003f5e06 	br	811105a8 <__reset+0xfb0f05a8>
81110830:	01400434 	movhi	r5,16
81110834:	002b883a 	mov	r21,zero
81110838:	297fffc4 	addi	r5,r5,-1
8111083c:	053fffc4 	movi	r20,-1
81110840:	0081ffc4 	movi	r2,2047
81110844:	003f9806 	br	811106a8 <__reset+0xfb0f06a8>
81110848:	8023883a 	mov	r17,r16
8111084c:	a011883a 	mov	r8,r20
81110850:	e00b883a 	mov	r5,fp
81110854:	003f8a06 	br	81110680 <__reset+0xfb0f0680>
81110858:	8023883a 	mov	r17,r16
8111085c:	a011883a 	mov	r8,r20
81110860:	482d883a 	mov	r22,r9
81110864:	e00b883a 	mov	r5,fp
81110868:	003f8506 	br	81110680 <__reset+0xfb0f0680>
8111086c:	a00ad43a 	srli	r5,r20,16
81110870:	401ad43a 	srli	r13,r8,16
81110874:	a53fffcc 	andi	r20,r20,65535
81110878:	423fffcc 	andi	r8,r8,65535
8111087c:	4519383a 	mul	r12,r8,r20
81110880:	4147383a 	mul	r3,r8,r5
81110884:	6d09383a 	mul	r4,r13,r20
81110888:	600cd43a 	srli	r6,r12,16
8111088c:	2b5d383a 	mul	r14,r5,r13
81110890:	20c9883a 	add	r4,r4,r3
81110894:	310d883a 	add	r6,r6,r4
81110898:	30c0022e 	bgeu	r6,r3,811108a4 <__muldf3+0x380>
8111089c:	00c00074 	movhi	r3,1
811108a0:	70dd883a 	add	r14,r14,r3
811108a4:	8826d43a 	srli	r19,r17,16
811108a8:	8bffffcc 	andi	r15,r17,65535
811108ac:	7d23383a 	mul	r17,r15,r20
811108b0:	7949383a 	mul	r4,r15,r5
811108b4:	9d29383a 	mul	r20,r19,r20
811108b8:	8814d43a 	srli	r10,r17,16
811108bc:	3012943a 	slli	r9,r6,16
811108c0:	a129883a 	add	r20,r20,r4
811108c4:	633fffcc 	andi	r12,r12,65535
811108c8:	5515883a 	add	r10,r10,r20
811108cc:	3006d43a 	srli	r3,r6,16
811108d0:	4b13883a 	add	r9,r9,r12
811108d4:	2ccb383a 	mul	r5,r5,r19
811108d8:	5100022e 	bgeu	r10,r4,811108e4 <__muldf3+0x3c0>
811108dc:	01000074 	movhi	r4,1
811108e0:	290b883a 	add	r5,r5,r4
811108e4:	802ad43a 	srli	r21,r16,16
811108e8:	843fffcc 	andi	r16,r16,65535
811108ec:	440d383a 	mul	r6,r8,r16
811108f0:	4565383a 	mul	r18,r8,r21
811108f4:	8349383a 	mul	r4,r16,r13
811108f8:	500e943a 	slli	r7,r10,16
811108fc:	3010d43a 	srli	r8,r6,16
81110900:	5028d43a 	srli	r20,r10,16
81110904:	2489883a 	add	r4,r4,r18
81110908:	8abfffcc 	andi	r10,r17,65535
8111090c:	3a95883a 	add	r10,r7,r10
81110910:	4119883a 	add	r12,r8,r4
81110914:	a169883a 	add	r20,r20,r5
81110918:	1a87883a 	add	r3,r3,r10
8111091c:	6d5b383a 	mul	r13,r13,r21
81110920:	6480022e 	bgeu	r12,r18,8111092c <__muldf3+0x408>
81110924:	01000074 	movhi	r4,1
81110928:	691b883a 	add	r13,r13,r4
8111092c:	7c25383a 	mul	r18,r15,r16
81110930:	7d4b383a 	mul	r5,r15,r21
81110934:	84cf383a 	mul	r7,r16,r19
81110938:	901ed43a 	srli	r15,r18,16
8111093c:	6008d43a 	srli	r4,r12,16
81110940:	6010943a 	slli	r8,r12,16
81110944:	394f883a 	add	r7,r7,r5
81110948:	333fffcc 	andi	r12,r6,65535
8111094c:	79df883a 	add	r15,r15,r7
81110950:	235b883a 	add	r13,r4,r13
81110954:	9d63383a 	mul	r17,r19,r21
81110958:	4309883a 	add	r4,r8,r12
8111095c:	7940022e 	bgeu	r15,r5,81110968 <__muldf3+0x444>
81110960:	01400074 	movhi	r5,1
81110964:	8963883a 	add	r17,r17,r5
81110968:	780a943a 	slli	r5,r15,16
8111096c:	91bfffcc 	andi	r6,r18,65535
81110970:	70c7883a 	add	r3,r14,r3
81110974:	298d883a 	add	r6,r5,r6
81110978:	1a8f803a 	cmpltu	r7,r3,r10
8111097c:	350b883a 	add	r5,r6,r20
81110980:	20c7883a 	add	r3,r4,r3
81110984:	3955883a 	add	r10,r7,r5
81110988:	1909803a 	cmpltu	r4,r3,r4
8111098c:	6a91883a 	add	r8,r13,r10
81110990:	780cd43a 	srli	r6,r15,16
81110994:	2219883a 	add	r12,r4,r8
81110998:	2d0b803a 	cmpltu	r5,r5,r20
8111099c:	51cf803a 	cmpltu	r7,r10,r7
811109a0:	29ceb03a 	or	r7,r5,r7
811109a4:	4351803a 	cmpltu	r8,r8,r13
811109a8:	610b803a 	cmpltu	r5,r12,r4
811109ac:	4148b03a 	or	r4,r8,r5
811109b0:	398f883a 	add	r7,r7,r6
811109b4:	3909883a 	add	r4,r7,r4
811109b8:	1810927a 	slli	r8,r3,9
811109bc:	2449883a 	add	r4,r4,r17
811109c0:	2008927a 	slli	r4,r4,9
811109c4:	6022d5fa 	srli	r17,r12,23
811109c8:	1806d5fa 	srli	r3,r3,23
811109cc:	4252b03a 	or	r9,r8,r9
811109d0:	600a927a 	slli	r5,r12,9
811109d4:	4810c03a 	cmpne	r8,r9,zero
811109d8:	2462b03a 	or	r17,r4,r17
811109dc:	40c6b03a 	or	r3,r8,r3
811109e0:	8900402c 	andhi	r4,r17,256
811109e4:	1950b03a 	or	r8,r3,r5
811109e8:	20000726 	beq	r4,zero,81110a08 <__muldf3+0x4e4>
811109ec:	4006d07a 	srli	r3,r8,1
811109f0:	880497fa 	slli	r2,r17,31
811109f4:	4200004c 	andi	r8,r8,1
811109f8:	8822d07a 	srli	r17,r17,1
811109fc:	1a10b03a 	or	r8,r3,r8
81110a00:	1210b03a 	or	r8,r2,r8
81110a04:	5805883a 	mov	r2,r11
81110a08:	1140ffc4 	addi	r5,r2,1023
81110a0c:	0140440e 	bge	zero,r5,81110b20 <__muldf3+0x5fc>
81110a10:	40c001cc 	andi	r3,r8,7
81110a14:	18000726 	beq	r3,zero,81110a34 <__muldf3+0x510>
81110a18:	40c003cc 	andi	r3,r8,15
81110a1c:	01000104 	movi	r4,4
81110a20:	19000426 	beq	r3,r4,81110a34 <__muldf3+0x510>
81110a24:	4107883a 	add	r3,r8,r4
81110a28:	1a11803a 	cmpltu	r8,r3,r8
81110a2c:	8a23883a 	add	r17,r17,r8
81110a30:	1811883a 	mov	r8,r3
81110a34:	88c0402c 	andhi	r3,r17,256
81110a38:	18000426 	beq	r3,zero,81110a4c <__muldf3+0x528>
81110a3c:	11410004 	addi	r5,r2,1024
81110a40:	00bfc034 	movhi	r2,65280
81110a44:	10bfffc4 	addi	r2,r2,-1
81110a48:	88a2703a 	and	r17,r17,r2
81110a4c:	0081ff84 	movi	r2,2046
81110a50:	117f6416 	blt	r2,r5,811107e4 <__reset+0xfb0f07e4>
81110a54:	8828977a 	slli	r20,r17,29
81110a58:	4010d0fa 	srli	r8,r8,3
81110a5c:	8822927a 	slli	r17,r17,9
81110a60:	2881ffcc 	andi	r2,r5,2047
81110a64:	a228b03a 	or	r20,r20,r8
81110a68:	880ad33a 	srli	r5,r17,12
81110a6c:	b02b883a 	mov	r21,r22
81110a70:	003f0d06 	br	811106a8 <__reset+0xfb0f06a8>
81110a74:	8080022c 	andhi	r2,r16,8
81110a78:	10000926 	beq	r2,zero,81110aa0 <__muldf3+0x57c>
81110a7c:	8880022c 	andhi	r2,r17,8
81110a80:	1000071e 	bne	r2,zero,81110aa0 <__muldf3+0x57c>
81110a84:	00800434 	movhi	r2,16
81110a88:	89400234 	orhi	r5,r17,8
81110a8c:	10bfffc4 	addi	r2,r2,-1
81110a90:	b82b883a 	mov	r21,r23
81110a94:	288a703a 	and	r5,r5,r2
81110a98:	4029883a 	mov	r20,r8
81110a9c:	003f6806 	br	81110840 <__reset+0xfb0f0840>
81110aa0:	00800434 	movhi	r2,16
81110aa4:	81400234 	orhi	r5,r16,8
81110aa8:	10bfffc4 	addi	r2,r2,-1
81110aac:	288a703a 	and	r5,r5,r2
81110ab0:	003f6306 	br	81110840 <__reset+0xfb0f0840>
81110ab4:	147ff604 	addi	r17,r2,-40
81110ab8:	3462983a 	sll	r17,r6,r17
81110abc:	0011883a 	mov	r8,zero
81110ac0:	003f4406 	br	811107d4 <__reset+0xfb0f07d4>
81110ac4:	3009883a 	mov	r4,r6
81110ac8:	d9800215 	stw	r6,8(sp)
81110acc:	da400115 	stw	r9,4(sp)
81110ad0:	da800015 	stw	r10,0(sp)
81110ad4:	1110f040 	call	81110f04 <__clzsi2>
81110ad8:	10800804 	addi	r2,r2,32
81110adc:	da800017 	ldw	r10,0(sp)
81110ae0:	da400117 	ldw	r9,4(sp)
81110ae4:	d9800217 	ldw	r6,8(sp)
81110ae8:	003f3006 	br	811107ac <__reset+0xfb0f07ac>
81110aec:	143ff604 	addi	r16,r2,-40
81110af0:	9c20983a 	sll	r16,r19,r16
81110af4:	0029883a 	mov	r20,zero
81110af8:	003f1606 	br	81110754 <__reset+0xfb0f0754>
81110afc:	d9800215 	stw	r6,8(sp)
81110b00:	d9c00015 	stw	r7,0(sp)
81110b04:	da400115 	stw	r9,4(sp)
81110b08:	1110f040 	call	81110f04 <__clzsi2>
81110b0c:	10800804 	addi	r2,r2,32
81110b10:	da400117 	ldw	r9,4(sp)
81110b14:	d9c00017 	ldw	r7,0(sp)
81110b18:	d9800217 	ldw	r6,8(sp)
81110b1c:	003f0306 	br	8111072c <__reset+0xfb0f072c>
81110b20:	00c00044 	movi	r3,1
81110b24:	1947c83a 	sub	r3,r3,r5
81110b28:	00800e04 	movi	r2,56
81110b2c:	10feda16 	blt	r2,r3,81110698 <__reset+0xfb0f0698>
81110b30:	008007c4 	movi	r2,31
81110b34:	10c01b16 	blt	r2,r3,81110ba4 <__muldf3+0x680>
81110b38:	00800804 	movi	r2,32
81110b3c:	10c5c83a 	sub	r2,r2,r3
81110b40:	888a983a 	sll	r5,r17,r2
81110b44:	40c8d83a 	srl	r4,r8,r3
81110b48:	4084983a 	sll	r2,r8,r2
81110b4c:	88e2d83a 	srl	r17,r17,r3
81110b50:	2906b03a 	or	r3,r5,r4
81110b54:	1004c03a 	cmpne	r2,r2,zero
81110b58:	1886b03a 	or	r3,r3,r2
81110b5c:	188001cc 	andi	r2,r3,7
81110b60:	10000726 	beq	r2,zero,81110b80 <__muldf3+0x65c>
81110b64:	188003cc 	andi	r2,r3,15
81110b68:	01000104 	movi	r4,4
81110b6c:	11000426 	beq	r2,r4,81110b80 <__muldf3+0x65c>
81110b70:	1805883a 	mov	r2,r3
81110b74:	10c00104 	addi	r3,r2,4
81110b78:	1885803a 	cmpltu	r2,r3,r2
81110b7c:	88a3883a 	add	r17,r17,r2
81110b80:	8880202c 	andhi	r2,r17,128
81110b84:	10001c26 	beq	r2,zero,81110bf8 <__muldf3+0x6d4>
81110b88:	b02b883a 	mov	r21,r22
81110b8c:	00800044 	movi	r2,1
81110b90:	000b883a 	mov	r5,zero
81110b94:	0029883a 	mov	r20,zero
81110b98:	003ec306 	br	811106a8 <__reset+0xfb0f06a8>
81110b9c:	5805883a 	mov	r2,r11
81110ba0:	003f9906 	br	81110a08 <__reset+0xfb0f0a08>
81110ba4:	00bff844 	movi	r2,-31
81110ba8:	1145c83a 	sub	r2,r2,r5
81110bac:	8888d83a 	srl	r4,r17,r2
81110bb0:	00800804 	movi	r2,32
81110bb4:	18801a26 	beq	r3,r2,81110c20 <__muldf3+0x6fc>
81110bb8:	00801004 	movi	r2,64
81110bbc:	10c5c83a 	sub	r2,r2,r3
81110bc0:	8884983a 	sll	r2,r17,r2
81110bc4:	1204b03a 	or	r2,r2,r8
81110bc8:	1004c03a 	cmpne	r2,r2,zero
81110bcc:	2084b03a 	or	r2,r4,r2
81110bd0:	144001cc 	andi	r17,r2,7
81110bd4:	88000d1e 	bne	r17,zero,81110c0c <__muldf3+0x6e8>
81110bd8:	000b883a 	mov	r5,zero
81110bdc:	1028d0fa 	srli	r20,r2,3
81110be0:	b02b883a 	mov	r21,r22
81110be4:	0005883a 	mov	r2,zero
81110be8:	a468b03a 	or	r20,r20,r17
81110bec:	003eae06 	br	811106a8 <__reset+0xfb0f06a8>
81110bf0:	1007883a 	mov	r3,r2
81110bf4:	0023883a 	mov	r17,zero
81110bf8:	880a927a 	slli	r5,r17,9
81110bfc:	1805883a 	mov	r2,r3
81110c00:	8822977a 	slli	r17,r17,29
81110c04:	280ad33a 	srli	r5,r5,12
81110c08:	003ff406 	br	81110bdc <__reset+0xfb0f0bdc>
81110c0c:	10c003cc 	andi	r3,r2,15
81110c10:	01000104 	movi	r4,4
81110c14:	193ff626 	beq	r3,r4,81110bf0 <__reset+0xfb0f0bf0>
81110c18:	0023883a 	mov	r17,zero
81110c1c:	003fd506 	br	81110b74 <__reset+0xfb0f0b74>
81110c20:	0005883a 	mov	r2,zero
81110c24:	003fe706 	br	81110bc4 <__reset+0xfb0f0bc4>
81110c28:	00800434 	movhi	r2,16
81110c2c:	89400234 	orhi	r5,r17,8
81110c30:	10bfffc4 	addi	r2,r2,-1
81110c34:	b02b883a 	mov	r21,r22
81110c38:	288a703a 	and	r5,r5,r2
81110c3c:	4029883a 	mov	r20,r8
81110c40:	003eff06 	br	81110840 <__reset+0xfb0f0840>

81110c44 <__extendsfdf2>:
81110c44:	200ad5fa 	srli	r5,r4,23
81110c48:	defffd04 	addi	sp,sp,-12
81110c4c:	de00012e 	bgeu	sp,et,81110c54 <__extendsfdf2+0x10>
81110c50:	003b68fa 	trap	3
81110c54:	29403fcc 	andi	r5,r5,255
81110c58:	dc400115 	stw	r17,4(sp)
81110c5c:	29800044 	addi	r6,r5,1
81110c60:	04402034 	movhi	r17,128
81110c64:	dc000015 	stw	r16,0(sp)
81110c68:	8c7fffc4 	addi	r17,r17,-1
81110c6c:	dfc00215 	stw	ra,8(sp)
81110c70:	31803fcc 	andi	r6,r6,255
81110c74:	00800044 	movi	r2,1
81110c78:	8922703a 	and	r17,r17,r4
81110c7c:	2020d7fa 	srli	r16,r4,31
81110c80:	1180110e 	bge	r2,r6,81110cc8 <__extendsfdf2+0x84>
81110c84:	880cd0fa 	srli	r6,r17,3
81110c88:	8822977a 	slli	r17,r17,29
81110c8c:	2940e004 	addi	r5,r5,896
81110c90:	2941ffcc 	andi	r5,r5,2047
81110c94:	2804953a 	slli	r2,r5,20
81110c98:	01400434 	movhi	r5,16
81110c9c:	800697fa 	slli	r3,r16,31
81110ca0:	297fffc4 	addi	r5,r5,-1
81110ca4:	314a703a 	and	r5,r6,r5
81110ca8:	288ab03a 	or	r5,r5,r2
81110cac:	28c6b03a 	or	r3,r5,r3
81110cb0:	8805883a 	mov	r2,r17
81110cb4:	dfc00217 	ldw	ra,8(sp)
81110cb8:	dc400117 	ldw	r17,4(sp)
81110cbc:	dc000017 	ldw	r16,0(sp)
81110cc0:	dec00304 	addi	sp,sp,12
81110cc4:	f800283a 	ret
81110cc8:	2800111e 	bne	r5,zero,81110d10 <__extendsfdf2+0xcc>
81110ccc:	88001c26 	beq	r17,zero,81110d40 <__extendsfdf2+0xfc>
81110cd0:	8809883a 	mov	r4,r17
81110cd4:	1110f040 	call	81110f04 <__clzsi2>
81110cd8:	00c00284 	movi	r3,10
81110cdc:	18801b16 	blt	r3,r2,81110d4c <__extendsfdf2+0x108>
81110ce0:	018002c4 	movi	r6,11
81110ce4:	308dc83a 	sub	r6,r6,r2
81110ce8:	11000544 	addi	r4,r2,21
81110cec:	8986d83a 	srl	r3,r17,r6
81110cf0:	8922983a 	sll	r17,r17,r4
81110cf4:	0180e244 	movi	r6,905
81110cf8:	01400434 	movhi	r5,16
81110cfc:	3085c83a 	sub	r2,r6,r2
81110d00:	297fffc4 	addi	r5,r5,-1
81110d04:	194c703a 	and	r6,r3,r5
81110d08:	1141ffcc 	andi	r5,r2,2047
81110d0c:	003fe006 	br	81110c90 <__reset+0xfb0f0c90>
81110d10:	88000826 	beq	r17,zero,81110d34 <__extendsfdf2+0xf0>
81110d14:	880cd0fa 	srli	r6,r17,3
81110d18:	00800434 	movhi	r2,16
81110d1c:	10bfffc4 	addi	r2,r2,-1
81110d20:	31800234 	orhi	r6,r6,8
81110d24:	8822977a 	slli	r17,r17,29
81110d28:	308c703a 	and	r6,r6,r2
81110d2c:	0141ffc4 	movi	r5,2047
81110d30:	003fd706 	br	81110c90 <__reset+0xfb0f0c90>
81110d34:	0141ffc4 	movi	r5,2047
81110d38:	000d883a 	mov	r6,zero
81110d3c:	003fd406 	br	81110c90 <__reset+0xfb0f0c90>
81110d40:	000b883a 	mov	r5,zero
81110d44:	000d883a 	mov	r6,zero
81110d48:	003fd106 	br	81110c90 <__reset+0xfb0f0c90>
81110d4c:	11bffd44 	addi	r6,r2,-11
81110d50:	8986983a 	sll	r3,r17,r6
81110d54:	0023883a 	mov	r17,zero
81110d58:	003fe606 	br	81110cf4 <__reset+0xfb0f0cf4>

81110d5c <__truncdfsf2>:
81110d5c:	2810d53a 	srli	r8,r5,20
81110d60:	01c00434 	movhi	r7,16
81110d64:	39ffffc4 	addi	r7,r7,-1
81110d68:	29ce703a 	and	r7,r5,r7
81110d6c:	4201ffcc 	andi	r8,r8,2047
81110d70:	380e90fa 	slli	r7,r7,3
81110d74:	200cd77a 	srli	r6,r4,29
81110d78:	42400044 	addi	r9,r8,1
81110d7c:	4a41ffcc 	andi	r9,r9,2047
81110d80:	00c00044 	movi	r3,1
81110d84:	280ad7fa 	srli	r5,r5,31
81110d88:	31ceb03a 	or	r7,r6,r7
81110d8c:	200490fa 	slli	r2,r4,3
81110d90:	1a40230e 	bge	r3,r9,81110e20 <__truncdfsf2+0xc4>
81110d94:	40ff2004 	addi	r3,r8,-896
81110d98:	01803f84 	movi	r6,254
81110d9c:	30c01516 	blt	r6,r3,81110df4 <__truncdfsf2+0x98>
81110da0:	00c0380e 	bge	zero,r3,81110e84 <__truncdfsf2+0x128>
81110da4:	200c91ba 	slli	r6,r4,6
81110da8:	380e90fa 	slli	r7,r7,3
81110dac:	1004d77a 	srli	r2,r2,29
81110db0:	300cc03a 	cmpne	r6,r6,zero
81110db4:	31ccb03a 	or	r6,r6,r7
81110db8:	308cb03a 	or	r6,r6,r2
81110dbc:	308001cc 	andi	r2,r6,7
81110dc0:	10000426 	beq	r2,zero,81110dd4 <__truncdfsf2+0x78>
81110dc4:	308003cc 	andi	r2,r6,15
81110dc8:	01000104 	movi	r4,4
81110dcc:	11000126 	beq	r2,r4,81110dd4 <__truncdfsf2+0x78>
81110dd0:	31800104 	addi	r6,r6,4
81110dd4:	3081002c 	andhi	r2,r6,1024
81110dd8:	10001626 	beq	r2,zero,81110e34 <__truncdfsf2+0xd8>
81110ddc:	18c00044 	addi	r3,r3,1
81110de0:	00803fc4 	movi	r2,255
81110de4:	18800326 	beq	r3,r2,81110df4 <__truncdfsf2+0x98>
81110de8:	300c91ba 	slli	r6,r6,6
81110dec:	300cd27a 	srli	r6,r6,9
81110df0:	00000206 	br	81110dfc <__truncdfsf2+0xa0>
81110df4:	00ffffc4 	movi	r3,-1
81110df8:	000d883a 	mov	r6,zero
81110dfc:	18c03fcc 	andi	r3,r3,255
81110e00:	180895fa 	slli	r4,r3,23
81110e04:	00c02034 	movhi	r3,128
81110e08:	280a97fa 	slli	r5,r5,31
81110e0c:	18ffffc4 	addi	r3,r3,-1
81110e10:	30c6703a 	and	r3,r6,r3
81110e14:	1906b03a 	or	r3,r3,r4
81110e18:	1944b03a 	or	r2,r3,r5
81110e1c:	f800283a 	ret
81110e20:	40000b1e 	bne	r8,zero,81110e50 <__truncdfsf2+0xf4>
81110e24:	388cb03a 	or	r6,r7,r2
81110e28:	0007883a 	mov	r3,zero
81110e2c:	30000426 	beq	r6,zero,81110e40 <__truncdfsf2+0xe4>
81110e30:	01800144 	movi	r6,5
81110e34:	00803fc4 	movi	r2,255
81110e38:	300cd0fa 	srli	r6,r6,3
81110e3c:	18800a26 	beq	r3,r2,81110e68 <__truncdfsf2+0x10c>
81110e40:	00802034 	movhi	r2,128
81110e44:	10bfffc4 	addi	r2,r2,-1
81110e48:	308c703a 	and	r6,r6,r2
81110e4c:	003feb06 	br	81110dfc <__reset+0xfb0f0dfc>
81110e50:	3888b03a 	or	r4,r7,r2
81110e54:	203fe726 	beq	r4,zero,81110df4 <__reset+0xfb0f0df4>
81110e58:	380c90fa 	slli	r6,r7,3
81110e5c:	00c03fc4 	movi	r3,255
81110e60:	31808034 	orhi	r6,r6,512
81110e64:	003fd506 	br	81110dbc <__reset+0xfb0f0dbc>
81110e68:	303fe226 	beq	r6,zero,81110df4 <__reset+0xfb0f0df4>
81110e6c:	00802034 	movhi	r2,128
81110e70:	31801034 	orhi	r6,r6,64
81110e74:	10bfffc4 	addi	r2,r2,-1
81110e78:	00ffffc4 	movi	r3,-1
81110e7c:	308c703a 	and	r6,r6,r2
81110e80:	003fde06 	br	81110dfc <__reset+0xfb0f0dfc>
81110e84:	013ffa44 	movi	r4,-23
81110e88:	19000e16 	blt	r3,r4,81110ec4 <__truncdfsf2+0x168>
81110e8c:	01000784 	movi	r4,30
81110e90:	20c9c83a 	sub	r4,r4,r3
81110e94:	018007c4 	movi	r6,31
81110e98:	39c02034 	orhi	r7,r7,128
81110e9c:	31000b16 	blt	r6,r4,81110ecc <__truncdfsf2+0x170>
81110ea0:	423f2084 	addi	r8,r8,-894
81110ea4:	120c983a 	sll	r6,r2,r8
81110ea8:	3a0e983a 	sll	r7,r7,r8
81110eac:	1104d83a 	srl	r2,r2,r4
81110eb0:	300cc03a 	cmpne	r6,r6,zero
81110eb4:	31ceb03a 	or	r7,r6,r7
81110eb8:	388cb03a 	or	r6,r7,r2
81110ebc:	0007883a 	mov	r3,zero
81110ec0:	003fbe06 	br	81110dbc <__reset+0xfb0f0dbc>
81110ec4:	0007883a 	mov	r3,zero
81110ec8:	003fd906 	br	81110e30 <__reset+0xfb0f0e30>
81110ecc:	01bfff84 	movi	r6,-2
81110ed0:	30cdc83a 	sub	r6,r6,r3
81110ed4:	00c00804 	movi	r3,32
81110ed8:	398cd83a 	srl	r6,r7,r6
81110edc:	20c00726 	beq	r4,r3,81110efc <__truncdfsf2+0x1a0>
81110ee0:	423f2884 	addi	r8,r8,-862
81110ee4:	3a0e983a 	sll	r7,r7,r8
81110ee8:	3884b03a 	or	r2,r7,r2
81110eec:	1004c03a 	cmpne	r2,r2,zero
81110ef0:	118cb03a 	or	r6,r2,r6
81110ef4:	0007883a 	mov	r3,zero
81110ef8:	003fb006 	br	81110dbc <__reset+0xfb0f0dbc>
81110efc:	000f883a 	mov	r7,zero
81110f00:	003ff906 	br	81110ee8 <__reset+0xfb0f0ee8>

81110f04 <__clzsi2>:
81110f04:	00bfffd4 	movui	r2,65535
81110f08:	11000536 	bltu	r2,r4,81110f20 <__clzsi2+0x1c>
81110f0c:	00803fc4 	movi	r2,255
81110f10:	11000f36 	bltu	r2,r4,81110f50 <__clzsi2+0x4c>
81110f14:	00800804 	movi	r2,32
81110f18:	0007883a 	mov	r3,zero
81110f1c:	00000506 	br	81110f34 <__clzsi2+0x30>
81110f20:	00804034 	movhi	r2,256
81110f24:	10bfffc4 	addi	r2,r2,-1
81110f28:	11000c2e 	bgeu	r2,r4,81110f5c <__clzsi2+0x58>
81110f2c:	00800204 	movi	r2,8
81110f30:	00c00604 	movi	r3,24
81110f34:	20c8d83a 	srl	r4,r4,r3
81110f38:	00e04534 	movhi	r3,33044
81110f3c:	18f5b004 	addi	r3,r3,-10560
81110f40:	1909883a 	add	r4,r3,r4
81110f44:	20c00003 	ldbu	r3,0(r4)
81110f48:	10c5c83a 	sub	r2,r2,r3
81110f4c:	f800283a 	ret
81110f50:	00800604 	movi	r2,24
81110f54:	00c00204 	movi	r3,8
81110f58:	003ff606 	br	81110f34 <__reset+0xfb0f0f34>
81110f5c:	00800404 	movi	r2,16
81110f60:	1007883a 	mov	r3,r2
81110f64:	003ff306 	br	81110f34 <__reset+0xfb0f0f34>

81110f68 <atoi>:
81110f68:	01800284 	movi	r6,10
81110f6c:	000b883a 	mov	r5,zero
81110f70:	1112d181 	jmpi	81112d18 <strtol>

81110f74 <_atoi_r>:
81110f74:	01c00284 	movi	r7,10
81110f78:	000d883a 	mov	r6,zero
81110f7c:	1112ad81 	jmpi	81112ad8 <_strtol_r>

81110f80 <_fopen_r>:
81110f80:	defffa04 	addi	sp,sp,-24
81110f84:	3005883a 	mov	r2,r6
81110f88:	de00012e 	bgeu	sp,et,81110f90 <_fopen_r+0x10>
81110f8c:	003b68fa 	trap	3
81110f90:	d80d883a 	mov	r6,sp
81110f94:	dcc00415 	stw	r19,16(sp)
81110f98:	2827883a 	mov	r19,r5
81110f9c:	100b883a 	mov	r5,r2
81110fa0:	dc800315 	stw	r18,12(sp)
81110fa4:	dfc00515 	stw	ra,20(sp)
81110fa8:	dc400215 	stw	r17,8(sp)
81110fac:	dc000115 	stw	r16,4(sp)
81110fb0:	2025883a 	mov	r18,r4
81110fb4:	111abc00 	call	8111abc0 <__sflags>
81110fb8:	10002726 	beq	r2,zero,81111058 <_fopen_r+0xd8>
81110fbc:	9009883a 	mov	r4,r18
81110fc0:	1023883a 	mov	r17,r2
81110fc4:	111aa380 	call	8111aa38 <__sfp>
81110fc8:	1021883a 	mov	r16,r2
81110fcc:	10002226 	beq	r2,zero,81111058 <_fopen_r+0xd8>
81110fd0:	d9800017 	ldw	r6,0(sp)
81110fd4:	01c06d84 	movi	r7,438
81110fd8:	980b883a 	mov	r5,r19
81110fdc:	9009883a 	mov	r4,r18
81110fe0:	111233c0 	call	8111233c <_open_r>
81110fe4:	10001916 	blt	r2,zero,8111104c <_fopen_r+0xcc>
81110fe8:	8080038d 	sth	r2,14(r16)
81110fec:	00a04474 	movhi	r2,33041
81110ff0:	108a2804 	addi	r2,r2,10400
81110ff4:	80800815 	stw	r2,32(r16)
81110ff8:	00a04474 	movhi	r2,33041
81110ffc:	108a4104 	addi	r2,r2,10500
81111000:	80800915 	stw	r2,36(r16)
81111004:	00a04474 	movhi	r2,33041
81111008:	108a6204 	addi	r2,r2,10632
8111100c:	80800a15 	stw	r2,40(r16)
81111010:	00a04474 	movhi	r2,33041
81111014:	108a7b04 	addi	r2,r2,10732
81111018:	8440030d 	sth	r17,12(r16)
8111101c:	84000715 	stw	r16,28(r16)
81111020:	80800b15 	stw	r2,44(r16)
81111024:	8c40400c 	andi	r17,r17,256
81111028:	88000d1e 	bne	r17,zero,81111060 <_fopen_r+0xe0>
8111102c:	8005883a 	mov	r2,r16
81111030:	dfc00517 	ldw	ra,20(sp)
81111034:	dcc00417 	ldw	r19,16(sp)
81111038:	dc800317 	ldw	r18,12(sp)
8111103c:	dc400217 	ldw	r17,8(sp)
81111040:	dc000117 	ldw	r16,4(sp)
81111044:	dec00604 	addi	sp,sp,24
81111048:	f800283a 	ret
8111104c:	111ab800 	call	8111ab80 <__sfp_lock_acquire>
81111050:	8000030d 	sth	zero,12(r16)
81111054:	111ab840 	call	8111ab84 <__sfp_lock_release>
81111058:	0005883a 	mov	r2,zero
8111105c:	003ff406 	br	81111030 <__reset+0xfb0f1030>
81111060:	01c00084 	movi	r7,2
81111064:	000d883a 	mov	r6,zero
81111068:	800b883a 	mov	r5,r16
8111106c:	9009883a 	mov	r4,r18
81111070:	11110f00 	call	811110f0 <_fseek_r>
81111074:	8005883a 	mov	r2,r16
81111078:	003fed06 	br	81111030 <__reset+0xfb0f1030>

8111107c <fopen>:
8111107c:	00a04534 	movhi	r2,33044
81111080:	10bf9d04 	addi	r2,r2,-396
81111084:	280d883a 	mov	r6,r5
81111088:	200b883a 	mov	r5,r4
8111108c:	11000017 	ldw	r4,0(r2)
81111090:	1110f801 	jmpi	81110f80 <_fopen_r>

81111094 <_fprintf_r>:
81111094:	defffe04 	addi	sp,sp,-8
81111098:	2809883a 	mov	r4,r5
8111109c:	300b883a 	mov	r5,r6
811110a0:	de00012e 	bgeu	sp,et,811110a8 <_fprintf_r+0x14>
811110a4:	003b68fa 	trap	3
811110a8:	dfc00015 	stw	ra,0(sp)
811110ac:	d9c00115 	stw	r7,4(sp)
811110b0:	d9800104 	addi	r6,sp,4
811110b4:	11171140 	call	81117114 <__vfprintf_internal>
811110b8:	dfc00017 	ldw	ra,0(sp)
811110bc:	dec00204 	addi	sp,sp,8
811110c0:	f800283a 	ret

811110c4 <fprintf>:
811110c4:	defffd04 	addi	sp,sp,-12
811110c8:	de00012e 	bgeu	sp,et,811110d0 <fprintf+0xc>
811110cc:	003b68fa 	trap	3
811110d0:	dfc00015 	stw	ra,0(sp)
811110d4:	d9800115 	stw	r6,4(sp)
811110d8:	d9c00215 	stw	r7,8(sp)
811110dc:	d9800104 	addi	r6,sp,4
811110e0:	11171140 	call	81117114 <__vfprintf_internal>
811110e4:	dfc00017 	ldw	ra,0(sp)
811110e8:	dec00304 	addi	sp,sp,12
811110ec:	f800283a 	ret

811110f0 <_fseek_r>:
811110f0:	11111101 	jmpi	81111110 <_fseeko_r>

811110f4 <fseek>:
811110f4:	00a04534 	movhi	r2,33044
811110f8:	10bf9d04 	addi	r2,r2,-396
811110fc:	300f883a 	mov	r7,r6
81111100:	280d883a 	mov	r6,r5
81111104:	200b883a 	mov	r5,r4
81111108:	11000017 	ldw	r4,0(r2)
8111110c:	11111101 	jmpi	81111110 <_fseeko_r>

81111110 <_fseeko_r>:
81111110:	deffe804 	addi	sp,sp,-96
81111114:	de00012e 	bgeu	sp,et,8111111c <_fseeko_r+0xc>
81111118:	003b68fa 	trap	3
8111111c:	dd401415 	stw	r21,80(sp)
81111120:	dc801115 	stw	r18,68(sp)
81111124:	dc401015 	stw	r17,64(sp)
81111128:	dc000f15 	stw	r16,60(sp)
8111112c:	dfc01715 	stw	ra,92(sp)
81111130:	ddc01615 	stw	r23,88(sp)
81111134:	dd801515 	stw	r22,84(sp)
81111138:	dd001315 	stw	r20,76(sp)
8111113c:	dcc01215 	stw	r19,72(sp)
81111140:	2023883a 	mov	r17,r4
81111144:	2821883a 	mov	r16,r5
81111148:	302b883a 	mov	r21,r6
8111114c:	3825883a 	mov	r18,r7
81111150:	20000226 	beq	r4,zero,8111115c <_fseeko_r+0x4c>
81111154:	20800e17 	ldw	r2,56(r4)
81111158:	10005a26 	beq	r2,zero,811112c4 <_fseeko_r+0x1b4>
8111115c:	8080030b 	ldhu	r2,12(r16)
81111160:	00c04204 	movi	r3,264
81111164:	1080420c 	andi	r2,r2,264
81111168:	10c05b26 	beq	r2,r3,811112d8 <_fseeko_r+0x1c8>
8111116c:	85000a17 	ldw	r20,40(r16)
81111170:	a000f626 	beq	r20,zero,8111154c <_fseeko_r+0x43c>
81111174:	00800044 	movi	r2,1
81111178:	90803e26 	beq	r18,r2,81111274 <_fseeko_r+0x164>
8111117c:	00800084 	movi	r2,2
81111180:	90801026 	beq	r18,r2,811111c4 <_fseeko_r+0xb4>
81111184:	90000f26 	beq	r18,zero,811111c4 <_fseeko_r+0xb4>
81111188:	00800584 	movi	r2,22
8111118c:	88800015 	stw	r2,0(r17)
81111190:	04ffffc4 	movi	r19,-1
81111194:	9805883a 	mov	r2,r19
81111198:	dfc01717 	ldw	ra,92(sp)
8111119c:	ddc01617 	ldw	r23,88(sp)
811111a0:	dd801517 	ldw	r22,84(sp)
811111a4:	dd401417 	ldw	r21,80(sp)
811111a8:	dd001317 	ldw	r20,76(sp)
811111ac:	dcc01217 	ldw	r19,72(sp)
811111b0:	dc801117 	ldw	r18,68(sp)
811111b4:	dc401017 	ldw	r17,64(sp)
811111b8:	dc000f17 	ldw	r16,60(sp)
811111bc:	dec01804 	addi	sp,sp,96
811111c0:	f800283a 	ret
811111c4:	80800417 	ldw	r2,16(r16)
811111c8:	002f883a 	mov	r23,zero
811111cc:	0027883a 	mov	r19,zero
811111d0:	1000cb26 	beq	r2,zero,81111500 <_fseeko_r+0x3f0>
811111d4:	8080030b 	ldhu	r2,12(r16)
811111d8:	10c2068c 	andi	r3,r2,2074
811111dc:	1800071e 	bne	r3,zero,811111fc <_fseeko_r+0xec>
811111e0:	10c1000c 	andi	r3,r2,1024
811111e4:	1800451e 	bne	r3,zero,811112fc <_fseeko_r+0x1ec>
811111e8:	00e04474 	movhi	r3,33041
811111ec:	18ca6204 	addi	r3,r3,10632
811111f0:	a0c0b726 	beq	r20,r3,811114d0 <_fseeko_r+0x3c0>
811111f4:	10820014 	ori	r2,r2,2048
811111f8:	8080030d 	sth	r2,12(r16)
811111fc:	800b883a 	mov	r5,r16
81111200:	8809883a 	mov	r4,r17
81111204:	111a7740 	call	8111a774 <_fflush_r>
81111208:	1027883a 	mov	r19,r2
8111120c:	103fe01e 	bne	r2,zero,81111190 <__reset+0xfb0f1190>
81111210:	81400717 	ldw	r5,28(r16)
81111214:	900f883a 	mov	r7,r18
81111218:	a80d883a 	mov	r6,r21
8111121c:	8809883a 	mov	r4,r17
81111220:	a03ee83a 	callr	r20
81111224:	00ffffc4 	movi	r3,-1
81111228:	10ffd926 	beq	r2,r3,81111190 <__reset+0xfb0f1190>
8111122c:	81400c17 	ldw	r5,48(r16)
81111230:	28000526 	beq	r5,zero,81111248 <_fseeko_r+0x138>
81111234:	80801004 	addi	r2,r16,64
81111238:	28800226 	beq	r5,r2,81111244 <_fseeko_r+0x134>
8111123c:	8809883a 	mov	r4,r17
81111240:	111b0080 	call	8111b008 <_free_r>
81111244:	80000c15 	stw	zero,48(r16)
81111248:	8080030b 	ldhu	r2,12(r16)
8111124c:	80c00417 	ldw	r3,16(r16)
81111250:	80000115 	stw	zero,4(r16)
81111254:	10bdf7cc 	andi	r2,r2,63455
81111258:	80c00015 	stw	r3,0(r16)
8111125c:	8080030d 	sth	r2,12(r16)
81111260:	01800204 	movi	r6,8
81111264:	000b883a 	mov	r5,zero
81111268:	81001704 	addi	r4,r16,92
8111126c:	11122140 	call	81112214 <memset>
81111270:	003fc806 	br	81111194 <__reset+0xfb0f1194>
81111274:	800b883a 	mov	r5,r16
81111278:	8809883a 	mov	r4,r17
8111127c:	111a7740 	call	8111a774 <_fflush_r>
81111280:	8080030b 	ldhu	r2,12(r16)
81111284:	10c4000c 	andi	r3,r2,4096
81111288:	18008726 	beq	r3,zero,811114a8 <_fseeko_r+0x398>
8111128c:	84c01417 	ldw	r19,80(r16)
81111290:	10c0010c 	andi	r3,r2,4
81111294:	1800431e 	bne	r3,zero,811113a4 <_fseeko_r+0x294>
81111298:	1080020c 	andi	r2,r2,8
8111129c:	10008026 	beq	r2,zero,811114a0 <_fseeko_r+0x390>
811112a0:	80c00017 	ldw	r3,0(r16)
811112a4:	80800417 	ldw	r2,16(r16)
811112a8:	18000226 	beq	r3,zero,811112b4 <_fseeko_r+0x1a4>
811112ac:	1887c83a 	sub	r3,r3,r2
811112b0:	98e7883a 	add	r19,r19,r3
811112b4:	aceb883a 	add	r21,r21,r19
811112b8:	05c00044 	movi	r23,1
811112bc:	0025883a 	mov	r18,zero
811112c0:	003fc306 	br	811111d0 <__reset+0xfb0f11d0>
811112c4:	111ab700 	call	8111ab70 <__sinit>
811112c8:	8080030b 	ldhu	r2,12(r16)
811112cc:	00c04204 	movi	r3,264
811112d0:	1080420c 	andi	r2,r2,264
811112d4:	10ffa51e 	bne	r2,r3,8111116c <__reset+0xfb0f116c>
811112d8:	800b883a 	mov	r5,r16
811112dc:	8809883a 	mov	r4,r17
811112e0:	111a7740 	call	8111a774 <_fflush_r>
811112e4:	003fa106 	br	8111116c <__reset+0xfb0f116c>
811112e8:	8080030b 	ldhu	r2,12(r16)
811112ec:	00c10004 	movi	r3,1024
811112f0:	80c01315 	stw	r3,76(r16)
811112f4:	10c4b03a 	or	r2,r2,r3
811112f8:	8080030d 	sth	r2,12(r16)
811112fc:	9000311e 	bne	r18,zero,811113c4 <_fseeko_r+0x2b4>
81111300:	a82d883a 	mov	r22,r21
81111304:	b800371e 	bne	r23,zero,811113e4 <_fseeko_r+0x2d4>
81111308:	8080030b 	ldhu	r2,12(r16)
8111130c:	1084000c 	andi	r2,r2,4096
81111310:	10007f26 	beq	r2,zero,81111510 <_fseeko_r+0x400>
81111314:	80801417 	ldw	r2,80(r16)
81111318:	81800117 	ldw	r6,4(r16)
8111131c:	81400c17 	ldw	r5,48(r16)
81111320:	11a7c83a 	sub	r19,r2,r6
81111324:	28008226 	beq	r5,zero,81111530 <_fseeko_r+0x420>
81111328:	81c00f17 	ldw	r7,60(r16)
8111132c:	99e7c83a 	sub	r19,r19,r7
81111330:	81000e17 	ldw	r4,56(r16)
81111334:	80800417 	ldw	r2,16(r16)
81111338:	99a7883a 	add	r19,r19,r6
8111133c:	2087c83a 	sub	r3,r4,r2
81111340:	98e7c83a 	sub	r19,r19,r3
81111344:	38c7883a 	add	r3,r7,r3
81111348:	b4c02b16 	blt	r22,r19,811113f8 <_fseeko_r+0x2e8>
8111134c:	98c9883a 	add	r4,r19,r3
81111350:	b100292e 	bgeu	r22,r4,811113f8 <_fseeko_r+0x2e8>
81111354:	b4e7c83a 	sub	r19,r22,r19
81111358:	14c5883a 	add	r2,r2,r19
8111135c:	1ce7c83a 	sub	r19,r3,r19
81111360:	80800015 	stw	r2,0(r16)
81111364:	84c00115 	stw	r19,4(r16)
81111368:	28000526 	beq	r5,zero,81111380 <_fseeko_r+0x270>
8111136c:	80801004 	addi	r2,r16,64
81111370:	28800226 	beq	r5,r2,8111137c <_fseeko_r+0x26c>
81111374:	8809883a 	mov	r4,r17
81111378:	111b0080 	call	8111b008 <_free_r>
8111137c:	80000c15 	stw	zero,48(r16)
81111380:	8080030b 	ldhu	r2,12(r16)
81111384:	01800204 	movi	r6,8
81111388:	000b883a 	mov	r5,zero
8111138c:	10bff7cc 	andi	r2,r2,65503
81111390:	8080030d 	sth	r2,12(r16)
81111394:	81001704 	addi	r4,r16,92
81111398:	11122140 	call	81112214 <memset>
8111139c:	0027883a 	mov	r19,zero
811113a0:	003f7c06 	br	81111194 <__reset+0xfb0f1194>
811113a4:	80c00117 	ldw	r3,4(r16)
811113a8:	80800c17 	ldw	r2,48(r16)
811113ac:	98e7c83a 	sub	r19,r19,r3
811113b0:	10003b26 	beq	r2,zero,811114a0 <_fseeko_r+0x390>
811113b4:	80c00f17 	ldw	r3,60(r16)
811113b8:	80800417 	ldw	r2,16(r16)
811113bc:	98e7c83a 	sub	r19,r19,r3
811113c0:	003fbc06 	br	811112b4 <__reset+0xfb0f12b4>
811113c4:	8140038f 	ldh	r5,14(r16)
811113c8:	d80d883a 	mov	r6,sp
811113cc:	8809883a 	mov	r4,r17
811113d0:	11115780 	call	81111578 <_fstat_r>
811113d4:	103f891e 	bne	r2,zero,811111fc <__reset+0xfb0f11fc>
811113d8:	dd800417 	ldw	r22,16(sp)
811113dc:	adad883a 	add	r22,r21,r22
811113e0:	b83fc926 	beq	r23,zero,81111308 <__reset+0xfb0f1308>
811113e4:	81400c17 	ldw	r5,48(r16)
811113e8:	81800117 	ldw	r6,4(r16)
811113ec:	28005026 	beq	r5,zero,81111530 <_fseeko_r+0x420>
811113f0:	81c00f17 	ldw	r7,60(r16)
811113f4:	003fce06 	br	81111330 <__reset+0xfb0f1330>
811113f8:	84c01317 	ldw	r19,76(r16)
811113fc:	81400717 	ldw	r5,28(r16)
81111400:	000f883a 	mov	r7,zero
81111404:	04e7c83a 	sub	r19,zero,r19
81111408:	9da6703a 	and	r19,r19,r22
8111140c:	980d883a 	mov	r6,r19
81111410:	8809883a 	mov	r4,r17
81111414:	a03ee83a 	callr	r20
81111418:	00ffffc4 	movi	r3,-1
8111141c:	10ff7726 	beq	r2,r3,811111fc <__reset+0xfb0f11fc>
81111420:	80800417 	ldw	r2,16(r16)
81111424:	81400c17 	ldw	r5,48(r16)
81111428:	80000115 	stw	zero,4(r16)
8111142c:	80800015 	stw	r2,0(r16)
81111430:	28000526 	beq	r5,zero,81111448 <_fseeko_r+0x338>
81111434:	80801004 	addi	r2,r16,64
81111438:	28800226 	beq	r5,r2,81111444 <_fseeko_r+0x334>
8111143c:	8809883a 	mov	r4,r17
81111440:	111b0080 	call	8111b008 <_free_r>
81111444:	80000c15 	stw	zero,48(r16)
81111448:	8080030b 	ldhu	r2,12(r16)
8111144c:	b4e7c83a 	sub	r19,r22,r19
81111450:	10bff7cc 	andi	r2,r2,65503
81111454:	8080030d 	sth	r2,12(r16)
81111458:	98000b26 	beq	r19,zero,81111488 <_fseeko_r+0x378>
8111145c:	800b883a 	mov	r5,r16
81111460:	8809883a 	mov	r4,r17
81111464:	11125180 	call	81112518 <__srefill_r>
81111468:	103f641e 	bne	r2,zero,811111fc <__reset+0xfb0f11fc>
8111146c:	80800117 	ldw	r2,4(r16)
81111470:	14ff6236 	bltu	r2,r19,811111fc <__reset+0xfb0f11fc>
81111474:	80c00017 	ldw	r3,0(r16)
81111478:	14c5c83a 	sub	r2,r2,r19
8111147c:	80800115 	stw	r2,4(r16)
81111480:	1ce7883a 	add	r19,r3,r19
81111484:	84c00015 	stw	r19,0(r16)
81111488:	01800204 	movi	r6,8
8111148c:	000b883a 	mov	r5,zero
81111490:	81001704 	addi	r4,r16,92
81111494:	11122140 	call	81112214 <memset>
81111498:	0027883a 	mov	r19,zero
8111149c:	003f3d06 	br	81111194 <__reset+0xfb0f1194>
811114a0:	80800417 	ldw	r2,16(r16)
811114a4:	003f8306 	br	811112b4 <__reset+0xfb0f12b4>
811114a8:	81400717 	ldw	r5,28(r16)
811114ac:	900f883a 	mov	r7,r18
811114b0:	000d883a 	mov	r6,zero
811114b4:	8809883a 	mov	r4,r17
811114b8:	a03ee83a 	callr	r20
811114bc:	1027883a 	mov	r19,r2
811114c0:	00bfffc4 	movi	r2,-1
811114c4:	98bf3226 	beq	r19,r2,81111190 <__reset+0xfb0f1190>
811114c8:	8080030b 	ldhu	r2,12(r16)
811114cc:	003f7006 	br	81111290 <__reset+0xfb0f1290>
811114d0:	8140038f 	ldh	r5,14(r16)
811114d4:	283f4716 	blt	r5,zero,811111f4 <__reset+0xfb0f11f4>
811114d8:	d80d883a 	mov	r6,sp
811114dc:	8809883a 	mov	r4,r17
811114e0:	11115780 	call	81111578 <_fstat_r>
811114e4:	1000041e 	bne	r2,zero,811114f8 <_fseeko_r+0x3e8>
811114e8:	d8800117 	ldw	r2,4(sp)
811114ec:	00e00014 	movui	r3,32768
811114f0:	10bc000c 	andi	r2,r2,61440
811114f4:	10ff7c26 	beq	r2,r3,811112e8 <__reset+0xfb0f12e8>
811114f8:	8080030b 	ldhu	r2,12(r16)
811114fc:	003f3d06 	br	811111f4 <__reset+0xfb0f11f4>
81111500:	800b883a 	mov	r5,r16
81111504:	8809883a 	mov	r4,r17
81111508:	11116ec0 	call	811116ec <__smakebuf_r>
8111150c:	003f3106 	br	811111d4 <__reset+0xfb0f11d4>
81111510:	81400717 	ldw	r5,28(r16)
81111514:	01c00044 	movi	r7,1
81111518:	000d883a 	mov	r6,zero
8111151c:	8809883a 	mov	r4,r17
81111520:	a03ee83a 	callr	r20
81111524:	00ffffc4 	movi	r3,-1
81111528:	10ff7b1e 	bne	r2,r3,81111318 <__reset+0xfb0f1318>
8111152c:	003f3306 	br	811111fc <__reset+0xfb0f11fc>
81111530:	80c00017 	ldw	r3,0(r16)
81111534:	80800417 	ldw	r2,16(r16)
81111538:	000b883a 	mov	r5,zero
8111153c:	1887c83a 	sub	r3,r3,r2
81111540:	98e7c83a 	sub	r19,r19,r3
81111544:	30c7883a 	add	r3,r6,r3
81111548:	003f7f06 	br	81111348 <__reset+0xfb0f1348>
8111154c:	00800744 	movi	r2,29
81111550:	88800015 	stw	r2,0(r17)
81111554:	04ffffc4 	movi	r19,-1
81111558:	003f0e06 	br	81111194 <__reset+0xfb0f1194>

8111155c <fseeko>:
8111155c:	00a04534 	movhi	r2,33044
81111560:	10bf9d04 	addi	r2,r2,-396
81111564:	300f883a 	mov	r7,r6
81111568:	280d883a 	mov	r6,r5
8111156c:	200b883a 	mov	r5,r4
81111570:	11000017 	ldw	r4,0(r2)
81111574:	11111101 	jmpi	81111110 <_fseeko_r>

81111578 <_fstat_r>:
81111578:	defffd04 	addi	sp,sp,-12
8111157c:	de00012e 	bgeu	sp,et,81111584 <_fstat_r+0xc>
81111580:	003b68fa 	trap	3
81111584:	2805883a 	mov	r2,r5
81111588:	dc000015 	stw	r16,0(sp)
8111158c:	04204534 	movhi	r16,33044
81111590:	dc400115 	stw	r17,4(sp)
81111594:	843ff604 	addi	r16,r16,-40
81111598:	2023883a 	mov	r17,r4
8111159c:	300b883a 	mov	r5,r6
811115a0:	1009883a 	mov	r4,r2
811115a4:	dfc00215 	stw	ra,8(sp)
811115a8:	80000015 	stw	zero,0(r16)
811115ac:	11269a80 	call	811269a8 <fstat>
811115b0:	00ffffc4 	movi	r3,-1
811115b4:	10c00526 	beq	r2,r3,811115cc <_fstat_r+0x54>
811115b8:	dfc00217 	ldw	ra,8(sp)
811115bc:	dc400117 	ldw	r17,4(sp)
811115c0:	dc000017 	ldw	r16,0(sp)
811115c4:	dec00304 	addi	sp,sp,12
811115c8:	f800283a 	ret
811115cc:	80c00017 	ldw	r3,0(r16)
811115d0:	183ff926 	beq	r3,zero,811115b8 <__reset+0xfb0f15b8>
811115d4:	88c00015 	stw	r3,0(r17)
811115d8:	003ff706 	br	811115b8 <__reset+0xfb0f15b8>

811115dc <_fwrite_r>:
811115dc:	defff504 	addi	sp,sp,-44
811115e0:	de00012e 	bgeu	sp,et,811115e8 <_fwrite_r+0xc>
811115e4:	003b68fa 	trap	3
811115e8:	dc800815 	stw	r18,32(sp)
811115ec:	39a5383a 	mul	r18,r7,r6
811115f0:	d8800304 	addi	r2,sp,12
811115f4:	d8800015 	stw	r2,0(sp)
811115f8:	00800044 	movi	r2,1
811115fc:	dcc00915 	stw	r19,36(sp)
81111600:	dc400715 	stw	r17,28(sp)
81111604:	dc000615 	stw	r16,24(sp)
81111608:	d9400315 	stw	r5,12(sp)
8111160c:	dfc00a15 	stw	ra,40(sp)
81111610:	dc800415 	stw	r18,16(sp)
81111614:	dc800215 	stw	r18,8(sp)
81111618:	d8800115 	stw	r2,4(sp)
8111161c:	3027883a 	mov	r19,r6
81111620:	3821883a 	mov	r16,r7
81111624:	2023883a 	mov	r17,r4
81111628:	d9400b17 	ldw	r5,44(sp)
8111162c:	20000226 	beq	r4,zero,81111638 <_fwrite_r+0x5c>
81111630:	20800e17 	ldw	r2,56(r4)
81111634:	10001a26 	beq	r2,zero,811116a0 <_fwrite_r+0xc4>
81111638:	2880030b 	ldhu	r2,12(r5)
8111163c:	10c8000c 	andi	r3,r2,8192
81111640:	1800061e 	bne	r3,zero,8111165c <_fwrite_r+0x80>
81111644:	29001917 	ldw	r4,100(r5)
81111648:	00f7ffc4 	movi	r3,-8193
8111164c:	10880014 	ori	r2,r2,8192
81111650:	20c6703a 	and	r3,r4,r3
81111654:	2880030d 	sth	r2,12(r5)
81111658:	28c01915 	stw	r3,100(r5)
8111165c:	d80d883a 	mov	r6,sp
81111660:	8809883a 	mov	r4,r17
81111664:	111b3200 	call	8111b320 <__sfvwrite_r>
81111668:	10000b26 	beq	r2,zero,81111698 <_fwrite_r+0xbc>
8111166c:	d9000217 	ldw	r4,8(sp)
81111670:	980b883a 	mov	r5,r19
81111674:	9109c83a 	sub	r4,r18,r4
81111678:	11244f00 	call	811244f0 <__udivsi3>
8111167c:	dfc00a17 	ldw	ra,40(sp)
81111680:	dcc00917 	ldw	r19,36(sp)
81111684:	dc800817 	ldw	r18,32(sp)
81111688:	dc400717 	ldw	r17,28(sp)
8111168c:	dc000617 	ldw	r16,24(sp)
81111690:	dec00b04 	addi	sp,sp,44
81111694:	f800283a 	ret
81111698:	8005883a 	mov	r2,r16
8111169c:	003ff706 	br	8111167c <__reset+0xfb0f167c>
811116a0:	d9400515 	stw	r5,20(sp)
811116a4:	111ab700 	call	8111ab70 <__sinit>
811116a8:	d9400517 	ldw	r5,20(sp)
811116ac:	003fe206 	br	81111638 <__reset+0xfb0f1638>

811116b0 <fwrite>:
811116b0:	defffe04 	addi	sp,sp,-8
811116b4:	00a04534 	movhi	r2,33044
811116b8:	de00012e 	bgeu	sp,et,811116c0 <fwrite+0x10>
811116bc:	003b68fa 	trap	3
811116c0:	10bf9d04 	addi	r2,r2,-396
811116c4:	d9c00015 	stw	r7,0(sp)
811116c8:	300f883a 	mov	r7,r6
811116cc:	280d883a 	mov	r6,r5
811116d0:	200b883a 	mov	r5,r4
811116d4:	11000017 	ldw	r4,0(r2)
811116d8:	dfc00115 	stw	ra,4(sp)
811116dc:	11115dc0 	call	811115dc <_fwrite_r>
811116e0:	dfc00117 	ldw	ra,4(sp)
811116e4:	dec00204 	addi	sp,sp,8
811116e8:	f800283a 	ret

811116ec <__smakebuf_r>:
811116ec:	2880030b 	ldhu	r2,12(r5)
811116f0:	10c0008c 	andi	r3,r2,2
811116f4:	1800431e 	bne	r3,zero,81111804 <__smakebuf_r+0x118>
811116f8:	deffec04 	addi	sp,sp,-80
811116fc:	de00012e 	bgeu	sp,et,81111704 <__smakebuf_r+0x18>
81111700:	003b68fa 	trap	3
81111704:	dc000f15 	stw	r16,60(sp)
81111708:	2821883a 	mov	r16,r5
8111170c:	2940038f 	ldh	r5,14(r5)
81111710:	dc401015 	stw	r17,64(sp)
81111714:	dfc01315 	stw	ra,76(sp)
81111718:	dcc01215 	stw	r19,72(sp)
8111171c:	dc801115 	stw	r18,68(sp)
81111720:	2023883a 	mov	r17,r4
81111724:	28001c16 	blt	r5,zero,81111798 <__smakebuf_r+0xac>
81111728:	d80d883a 	mov	r6,sp
8111172c:	11115780 	call	81111578 <_fstat_r>
81111730:	10001816 	blt	r2,zero,81111794 <__smakebuf_r+0xa8>
81111734:	d8800117 	ldw	r2,4(sp)
81111738:	00e00014 	movui	r3,32768
8111173c:	10bc000c 	andi	r2,r2,61440
81111740:	14c80020 	cmpeqi	r19,r2,8192
81111744:	10c03726 	beq	r2,r3,81111824 <__smakebuf_r+0x138>
81111748:	80c0030b 	ldhu	r3,12(r16)
8111174c:	18c20014 	ori	r3,r3,2048
81111750:	80c0030d 	sth	r3,12(r16)
81111754:	00c80004 	movi	r3,8192
81111758:	10c0521e 	bne	r2,r3,811118a4 <__smakebuf_r+0x1b8>
8111175c:	8140038f 	ldh	r5,14(r16)
81111760:	8809883a 	mov	r4,r17
81111764:	111b97c0 	call	8111b97c <_isatty_r>
81111768:	10004c26 	beq	r2,zero,8111189c <__smakebuf_r+0x1b0>
8111176c:	8080030b 	ldhu	r2,12(r16)
81111770:	80c010c4 	addi	r3,r16,67
81111774:	80c00015 	stw	r3,0(r16)
81111778:	10800054 	ori	r2,r2,1
8111177c:	8080030d 	sth	r2,12(r16)
81111780:	00800044 	movi	r2,1
81111784:	80c00415 	stw	r3,16(r16)
81111788:	80800515 	stw	r2,20(r16)
8111178c:	04810004 	movi	r18,1024
81111790:	00000706 	br	811117b0 <__smakebuf_r+0xc4>
81111794:	8080030b 	ldhu	r2,12(r16)
81111798:	10c0200c 	andi	r3,r2,128
8111179c:	18001f1e 	bne	r3,zero,8111181c <__smakebuf_r+0x130>
811117a0:	04810004 	movi	r18,1024
811117a4:	10820014 	ori	r2,r2,2048
811117a8:	8080030d 	sth	r2,12(r16)
811117ac:	0027883a 	mov	r19,zero
811117b0:	900b883a 	mov	r5,r18
811117b4:	8809883a 	mov	r4,r17
811117b8:	11118b00 	call	811118b0 <_malloc_r>
811117bc:	10002c26 	beq	r2,zero,81111870 <__smakebuf_r+0x184>
811117c0:	80c0030b 	ldhu	r3,12(r16)
811117c4:	012044b4 	movhi	r4,33042
811117c8:	212a0404 	addi	r4,r4,-22512
811117cc:	89000f15 	stw	r4,60(r17)
811117d0:	18c02014 	ori	r3,r3,128
811117d4:	80c0030d 	sth	r3,12(r16)
811117d8:	80800015 	stw	r2,0(r16)
811117dc:	80800415 	stw	r2,16(r16)
811117e0:	84800515 	stw	r18,20(r16)
811117e4:	98001a1e 	bne	r19,zero,81111850 <__smakebuf_r+0x164>
811117e8:	dfc01317 	ldw	ra,76(sp)
811117ec:	dcc01217 	ldw	r19,72(sp)
811117f0:	dc801117 	ldw	r18,68(sp)
811117f4:	dc401017 	ldw	r17,64(sp)
811117f8:	dc000f17 	ldw	r16,60(sp)
811117fc:	dec01404 	addi	sp,sp,80
81111800:	f800283a 	ret
81111804:	288010c4 	addi	r2,r5,67
81111808:	28800015 	stw	r2,0(r5)
8111180c:	28800415 	stw	r2,16(r5)
81111810:	00800044 	movi	r2,1
81111814:	28800515 	stw	r2,20(r5)
81111818:	f800283a 	ret
8111181c:	04801004 	movi	r18,64
81111820:	003fe006 	br	811117a4 <__reset+0xfb0f17a4>
81111824:	81000a17 	ldw	r4,40(r16)
81111828:	00e04474 	movhi	r3,33041
8111182c:	18ca6204 	addi	r3,r3,10632
81111830:	20ffc51e 	bne	r4,r3,81111748 <__reset+0xfb0f1748>
81111834:	8080030b 	ldhu	r2,12(r16)
81111838:	04810004 	movi	r18,1024
8111183c:	84801315 	stw	r18,76(r16)
81111840:	1484b03a 	or	r2,r2,r18
81111844:	8080030d 	sth	r2,12(r16)
81111848:	0027883a 	mov	r19,zero
8111184c:	003fd806 	br	811117b0 <__reset+0xfb0f17b0>
81111850:	8140038f 	ldh	r5,14(r16)
81111854:	8809883a 	mov	r4,r17
81111858:	111b97c0 	call	8111b97c <_isatty_r>
8111185c:	103fe226 	beq	r2,zero,811117e8 <__reset+0xfb0f17e8>
81111860:	8080030b 	ldhu	r2,12(r16)
81111864:	10800054 	ori	r2,r2,1
81111868:	8080030d 	sth	r2,12(r16)
8111186c:	003fde06 	br	811117e8 <__reset+0xfb0f17e8>
81111870:	8080030b 	ldhu	r2,12(r16)
81111874:	10c0800c 	andi	r3,r2,512
81111878:	183fdb1e 	bne	r3,zero,811117e8 <__reset+0xfb0f17e8>
8111187c:	10800094 	ori	r2,r2,2
81111880:	80c010c4 	addi	r3,r16,67
81111884:	8080030d 	sth	r2,12(r16)
81111888:	00800044 	movi	r2,1
8111188c:	80c00015 	stw	r3,0(r16)
81111890:	80c00415 	stw	r3,16(r16)
81111894:	80800515 	stw	r2,20(r16)
81111898:	003fd306 	br	811117e8 <__reset+0xfb0f17e8>
8111189c:	04810004 	movi	r18,1024
811118a0:	003fc306 	br	811117b0 <__reset+0xfb0f17b0>
811118a4:	0027883a 	mov	r19,zero
811118a8:	04810004 	movi	r18,1024
811118ac:	003fc006 	br	811117b0 <__reset+0xfb0f17b0>

811118b0 <_malloc_r>:
811118b0:	defff504 	addi	sp,sp,-44
811118b4:	de00012e 	bgeu	sp,et,811118bc <_malloc_r+0xc>
811118b8:	003b68fa 	trap	3
811118bc:	288002c4 	addi	r2,r5,11
811118c0:	dc800315 	stw	r18,12(sp)
811118c4:	dfc00a15 	stw	ra,40(sp)
811118c8:	df000915 	stw	fp,36(sp)
811118cc:	ddc00815 	stw	r23,32(sp)
811118d0:	dd800715 	stw	r22,28(sp)
811118d4:	dd400615 	stw	r21,24(sp)
811118d8:	dd000515 	stw	r20,20(sp)
811118dc:	dcc00415 	stw	r19,16(sp)
811118e0:	dc400215 	stw	r17,8(sp)
811118e4:	dc000115 	stw	r16,4(sp)
811118e8:	00c00584 	movi	r3,22
811118ec:	2025883a 	mov	r18,r4
811118f0:	18807f2e 	bgeu	r3,r2,81111af0 <_malloc_r+0x240>
811118f4:	047ffe04 	movi	r17,-8
811118f8:	1462703a 	and	r17,r2,r17
811118fc:	8800a316 	blt	r17,zero,81111b8c <_malloc_r+0x2dc>
81111900:	8940a236 	bltu	r17,r5,81111b8c <_malloc_r+0x2dc>
81111904:	11279400 	call	81127940 <__malloc_lock>
81111908:	00807dc4 	movi	r2,503
8111190c:	1441e92e 	bgeu	r2,r17,811120b4 <_malloc_r+0x804>
81111910:	8804d27a 	srli	r2,r17,9
81111914:	1000a126 	beq	r2,zero,81111b9c <_malloc_r+0x2ec>
81111918:	00c00104 	movi	r3,4
8111191c:	18811e36 	bltu	r3,r2,81111d98 <_malloc_r+0x4e8>
81111920:	8804d1ba 	srli	r2,r17,6
81111924:	12000e44 	addi	r8,r2,57
81111928:	11c00e04 	addi	r7,r2,56
8111192c:	4209883a 	add	r4,r8,r8
81111930:	04e04534 	movhi	r19,33044
81111934:	2109883a 	add	r4,r4,r4
81111938:	9cf98204 	addi	r19,r19,-6648
8111193c:	2109883a 	add	r4,r4,r4
81111940:	9909883a 	add	r4,r19,r4
81111944:	24000117 	ldw	r16,4(r4)
81111948:	213ffe04 	addi	r4,r4,-8
8111194c:	24009726 	beq	r4,r16,81111bac <_malloc_r+0x2fc>
81111950:	80800117 	ldw	r2,4(r16)
81111954:	01bfff04 	movi	r6,-4
81111958:	014003c4 	movi	r5,15
8111195c:	1184703a 	and	r2,r2,r6
81111960:	1447c83a 	sub	r3,r2,r17
81111964:	28c00716 	blt	r5,r3,81111984 <_malloc_r+0xd4>
81111968:	1800920e 	bge	r3,zero,81111bb4 <_malloc_r+0x304>
8111196c:	84000317 	ldw	r16,12(r16)
81111970:	24008e26 	beq	r4,r16,81111bac <_malloc_r+0x2fc>
81111974:	80800117 	ldw	r2,4(r16)
81111978:	1184703a 	and	r2,r2,r6
8111197c:	1447c83a 	sub	r3,r2,r17
81111980:	28fff90e 	bge	r5,r3,81111968 <__reset+0xfb0f1968>
81111984:	3809883a 	mov	r4,r7
81111988:	01a04534 	movhi	r6,33044
8111198c:	9c000417 	ldw	r16,16(r19)
81111990:	31b98204 	addi	r6,r6,-6648
81111994:	32000204 	addi	r8,r6,8
81111998:	82013426 	beq	r16,r8,81111e6c <_malloc_r+0x5bc>
8111199c:	80c00117 	ldw	r3,4(r16)
811119a0:	00bfff04 	movi	r2,-4
811119a4:	188e703a 	and	r7,r3,r2
811119a8:	3c45c83a 	sub	r2,r7,r17
811119ac:	00c003c4 	movi	r3,15
811119b0:	18811f16 	blt	r3,r2,81111e30 <_malloc_r+0x580>
811119b4:	32000515 	stw	r8,20(r6)
811119b8:	32000415 	stw	r8,16(r6)
811119bc:	10007f0e 	bge	r2,zero,81111bbc <_malloc_r+0x30c>
811119c0:	00807fc4 	movi	r2,511
811119c4:	11c0fd36 	bltu	r2,r7,81111dbc <_malloc_r+0x50c>
811119c8:	3806d0fa 	srli	r3,r7,3
811119cc:	01c00044 	movi	r7,1
811119d0:	30800117 	ldw	r2,4(r6)
811119d4:	19400044 	addi	r5,r3,1
811119d8:	294b883a 	add	r5,r5,r5
811119dc:	1807d0ba 	srai	r3,r3,2
811119e0:	294b883a 	add	r5,r5,r5
811119e4:	294b883a 	add	r5,r5,r5
811119e8:	298b883a 	add	r5,r5,r6
811119ec:	38c6983a 	sll	r3,r7,r3
811119f0:	29c00017 	ldw	r7,0(r5)
811119f4:	2a7ffe04 	addi	r9,r5,-8
811119f8:	1886b03a 	or	r3,r3,r2
811119fc:	82400315 	stw	r9,12(r16)
81111a00:	81c00215 	stw	r7,8(r16)
81111a04:	30c00115 	stw	r3,4(r6)
81111a08:	2c000015 	stw	r16,0(r5)
81111a0c:	3c000315 	stw	r16,12(r7)
81111a10:	2005d0ba 	srai	r2,r4,2
81111a14:	01400044 	movi	r5,1
81111a18:	288a983a 	sll	r5,r5,r2
81111a1c:	19406f36 	bltu	r3,r5,81111bdc <_malloc_r+0x32c>
81111a20:	28c4703a 	and	r2,r5,r3
81111a24:	10000a1e 	bne	r2,zero,81111a50 <_malloc_r+0x1a0>
81111a28:	00bfff04 	movi	r2,-4
81111a2c:	294b883a 	add	r5,r5,r5
81111a30:	2088703a 	and	r4,r4,r2
81111a34:	28c4703a 	and	r2,r5,r3
81111a38:	21000104 	addi	r4,r4,4
81111a3c:	1000041e 	bne	r2,zero,81111a50 <_malloc_r+0x1a0>
81111a40:	294b883a 	add	r5,r5,r5
81111a44:	28c4703a 	and	r2,r5,r3
81111a48:	21000104 	addi	r4,r4,4
81111a4c:	103ffc26 	beq	r2,zero,81111a40 <__reset+0xfb0f1a40>
81111a50:	02bfff04 	movi	r10,-4
81111a54:	024003c4 	movi	r9,15
81111a58:	21800044 	addi	r6,r4,1
81111a5c:	318d883a 	add	r6,r6,r6
81111a60:	318d883a 	add	r6,r6,r6
81111a64:	318d883a 	add	r6,r6,r6
81111a68:	998d883a 	add	r6,r19,r6
81111a6c:	333ffe04 	addi	r12,r6,-8
81111a70:	2017883a 	mov	r11,r4
81111a74:	31800104 	addi	r6,r6,4
81111a78:	34000017 	ldw	r16,0(r6)
81111a7c:	31fffd04 	addi	r7,r6,-12
81111a80:	81c0041e 	bne	r16,r7,81111a94 <_malloc_r+0x1e4>
81111a84:	0000fb06 	br	81111e74 <_malloc_r+0x5c4>
81111a88:	1801030e 	bge	r3,zero,81111e98 <_malloc_r+0x5e8>
81111a8c:	84000317 	ldw	r16,12(r16)
81111a90:	81c0f826 	beq	r16,r7,81111e74 <_malloc_r+0x5c4>
81111a94:	80800117 	ldw	r2,4(r16)
81111a98:	1284703a 	and	r2,r2,r10
81111a9c:	1447c83a 	sub	r3,r2,r17
81111aa0:	48fff90e 	bge	r9,r3,81111a88 <__reset+0xfb0f1a88>
81111aa4:	80800317 	ldw	r2,12(r16)
81111aa8:	81000217 	ldw	r4,8(r16)
81111aac:	89400054 	ori	r5,r17,1
81111ab0:	81400115 	stw	r5,4(r16)
81111ab4:	20800315 	stw	r2,12(r4)
81111ab8:	11000215 	stw	r4,8(r2)
81111abc:	8463883a 	add	r17,r16,r17
81111ac0:	9c400515 	stw	r17,20(r19)
81111ac4:	9c400415 	stw	r17,16(r19)
81111ac8:	18800054 	ori	r2,r3,1
81111acc:	88800115 	stw	r2,4(r17)
81111ad0:	8a000315 	stw	r8,12(r17)
81111ad4:	8a000215 	stw	r8,8(r17)
81111ad8:	88e3883a 	add	r17,r17,r3
81111adc:	88c00015 	stw	r3,0(r17)
81111ae0:	9009883a 	mov	r4,r18
81111ae4:	1127a680 	call	81127a68 <__malloc_unlock>
81111ae8:	80800204 	addi	r2,r16,8
81111aec:	00001b06 	br	81111b5c <_malloc_r+0x2ac>
81111af0:	04400404 	movi	r17,16
81111af4:	89402536 	bltu	r17,r5,81111b8c <_malloc_r+0x2dc>
81111af8:	11279400 	call	81127940 <__malloc_lock>
81111afc:	00800184 	movi	r2,6
81111b00:	01000084 	movi	r4,2
81111b04:	04e04534 	movhi	r19,33044
81111b08:	1085883a 	add	r2,r2,r2
81111b0c:	9cf98204 	addi	r19,r19,-6648
81111b10:	1085883a 	add	r2,r2,r2
81111b14:	9885883a 	add	r2,r19,r2
81111b18:	14000117 	ldw	r16,4(r2)
81111b1c:	10fffe04 	addi	r3,r2,-8
81111b20:	80c0d926 	beq	r16,r3,81111e88 <_malloc_r+0x5d8>
81111b24:	80c00117 	ldw	r3,4(r16)
81111b28:	81000317 	ldw	r4,12(r16)
81111b2c:	00bfff04 	movi	r2,-4
81111b30:	1884703a 	and	r2,r3,r2
81111b34:	81400217 	ldw	r5,8(r16)
81111b38:	8085883a 	add	r2,r16,r2
81111b3c:	10c00117 	ldw	r3,4(r2)
81111b40:	29000315 	stw	r4,12(r5)
81111b44:	21400215 	stw	r5,8(r4)
81111b48:	18c00054 	ori	r3,r3,1
81111b4c:	10c00115 	stw	r3,4(r2)
81111b50:	9009883a 	mov	r4,r18
81111b54:	1127a680 	call	81127a68 <__malloc_unlock>
81111b58:	80800204 	addi	r2,r16,8
81111b5c:	dfc00a17 	ldw	ra,40(sp)
81111b60:	df000917 	ldw	fp,36(sp)
81111b64:	ddc00817 	ldw	r23,32(sp)
81111b68:	dd800717 	ldw	r22,28(sp)
81111b6c:	dd400617 	ldw	r21,24(sp)
81111b70:	dd000517 	ldw	r20,20(sp)
81111b74:	dcc00417 	ldw	r19,16(sp)
81111b78:	dc800317 	ldw	r18,12(sp)
81111b7c:	dc400217 	ldw	r17,8(sp)
81111b80:	dc000117 	ldw	r16,4(sp)
81111b84:	dec00b04 	addi	sp,sp,44
81111b88:	f800283a 	ret
81111b8c:	00800304 	movi	r2,12
81111b90:	90800015 	stw	r2,0(r18)
81111b94:	0005883a 	mov	r2,zero
81111b98:	003ff006 	br	81111b5c <__reset+0xfb0f1b5c>
81111b9c:	01002004 	movi	r4,128
81111ba0:	02001004 	movi	r8,64
81111ba4:	01c00fc4 	movi	r7,63
81111ba8:	003f6106 	br	81111930 <__reset+0xfb0f1930>
81111bac:	4009883a 	mov	r4,r8
81111bb0:	003f7506 	br	81111988 <__reset+0xfb0f1988>
81111bb4:	81000317 	ldw	r4,12(r16)
81111bb8:	003fde06 	br	81111b34 <__reset+0xfb0f1b34>
81111bbc:	81c5883a 	add	r2,r16,r7
81111bc0:	11400117 	ldw	r5,4(r2)
81111bc4:	9009883a 	mov	r4,r18
81111bc8:	29400054 	ori	r5,r5,1
81111bcc:	11400115 	stw	r5,4(r2)
81111bd0:	1127a680 	call	81127a68 <__malloc_unlock>
81111bd4:	80800204 	addi	r2,r16,8
81111bd8:	003fe006 	br	81111b5c <__reset+0xfb0f1b5c>
81111bdc:	9c000217 	ldw	r16,8(r19)
81111be0:	00bfff04 	movi	r2,-4
81111be4:	85800117 	ldw	r22,4(r16)
81111be8:	b0ac703a 	and	r22,r22,r2
81111bec:	b4400336 	bltu	r22,r17,81111bfc <_malloc_r+0x34c>
81111bf0:	b445c83a 	sub	r2,r22,r17
81111bf4:	00c003c4 	movi	r3,15
81111bf8:	18805d16 	blt	r3,r2,81111d70 <_malloc_r+0x4c0>
81111bfc:	05e04534 	movhi	r23,33044
81111c00:	00a04534 	movhi	r2,33044
81111c04:	10bff904 	addi	r2,r2,-28
81111c08:	bdff9e04 	addi	r23,r23,-392
81111c0c:	15400017 	ldw	r21,0(r2)
81111c10:	b8c00017 	ldw	r3,0(r23)
81111c14:	00bfffc4 	movi	r2,-1
81111c18:	858d883a 	add	r6,r16,r22
81111c1c:	8d6b883a 	add	r21,r17,r21
81111c20:	1880ea26 	beq	r3,r2,81111fcc <_malloc_r+0x71c>
81111c24:	ad4403c4 	addi	r21,r21,4111
81111c28:	00bc0004 	movi	r2,-4096
81111c2c:	a8aa703a 	and	r21,r21,r2
81111c30:	a80b883a 	mov	r5,r21
81111c34:	9009883a 	mov	r4,r18
81111c38:	d9800015 	stw	r6,0(sp)
81111c3c:	11126f40 	call	811126f4 <_sbrk_r>
81111c40:	1029883a 	mov	r20,r2
81111c44:	00bfffc4 	movi	r2,-1
81111c48:	d9800017 	ldw	r6,0(sp)
81111c4c:	a080e826 	beq	r20,r2,81111ff0 <_malloc_r+0x740>
81111c50:	a180a636 	bltu	r20,r6,81111eec <_malloc_r+0x63c>
81111c54:	07204534 	movhi	fp,33044
81111c58:	e7005804 	addi	fp,fp,352
81111c5c:	e0800017 	ldw	r2,0(fp)
81111c60:	a887883a 	add	r3,r21,r2
81111c64:	e0c00015 	stw	r3,0(fp)
81111c68:	3500e626 	beq	r6,r20,81112004 <_malloc_r+0x754>
81111c6c:	b9000017 	ldw	r4,0(r23)
81111c70:	00bfffc4 	movi	r2,-1
81111c74:	2080ee26 	beq	r4,r2,81112030 <_malloc_r+0x780>
81111c78:	a185c83a 	sub	r2,r20,r6
81111c7c:	10c5883a 	add	r2,r2,r3
81111c80:	e0800015 	stw	r2,0(fp)
81111c84:	a0c001cc 	andi	r3,r20,7
81111c88:	1800bc26 	beq	r3,zero,81111f7c <_malloc_r+0x6cc>
81111c8c:	a0e9c83a 	sub	r20,r20,r3
81111c90:	00840204 	movi	r2,4104
81111c94:	a5000204 	addi	r20,r20,8
81111c98:	10c7c83a 	sub	r3,r2,r3
81111c9c:	a545883a 	add	r2,r20,r21
81111ca0:	1083ffcc 	andi	r2,r2,4095
81111ca4:	18abc83a 	sub	r21,r3,r2
81111ca8:	a80b883a 	mov	r5,r21
81111cac:	9009883a 	mov	r4,r18
81111cb0:	11126f40 	call	811126f4 <_sbrk_r>
81111cb4:	00ffffc4 	movi	r3,-1
81111cb8:	10c0e126 	beq	r2,r3,81112040 <_malloc_r+0x790>
81111cbc:	1505c83a 	sub	r2,r2,r20
81111cc0:	1545883a 	add	r2,r2,r21
81111cc4:	10800054 	ori	r2,r2,1
81111cc8:	e0c00017 	ldw	r3,0(fp)
81111ccc:	9d000215 	stw	r20,8(r19)
81111cd0:	a0800115 	stw	r2,4(r20)
81111cd4:	a8c7883a 	add	r3,r21,r3
81111cd8:	e0c00015 	stw	r3,0(fp)
81111cdc:	84c00e26 	beq	r16,r19,81111d18 <_malloc_r+0x468>
81111ce0:	018003c4 	movi	r6,15
81111ce4:	3580a72e 	bgeu	r6,r22,81111f84 <_malloc_r+0x6d4>
81111ce8:	81400117 	ldw	r5,4(r16)
81111cec:	013ffe04 	movi	r4,-8
81111cf0:	b0bffd04 	addi	r2,r22,-12
81111cf4:	1104703a 	and	r2,r2,r4
81111cf8:	2900004c 	andi	r4,r5,1
81111cfc:	2088b03a 	or	r4,r4,r2
81111d00:	81000115 	stw	r4,4(r16)
81111d04:	01400144 	movi	r5,5
81111d08:	8089883a 	add	r4,r16,r2
81111d0c:	21400115 	stw	r5,4(r4)
81111d10:	21400215 	stw	r5,8(r4)
81111d14:	3080cd36 	bltu	r6,r2,8111204c <_malloc_r+0x79c>
81111d18:	00a04534 	movhi	r2,33044
81111d1c:	10bff804 	addi	r2,r2,-32
81111d20:	11000017 	ldw	r4,0(r2)
81111d24:	20c0012e 	bgeu	r4,r3,81111d2c <_malloc_r+0x47c>
81111d28:	10c00015 	stw	r3,0(r2)
81111d2c:	00a04534 	movhi	r2,33044
81111d30:	10bff704 	addi	r2,r2,-36
81111d34:	11000017 	ldw	r4,0(r2)
81111d38:	9c000217 	ldw	r16,8(r19)
81111d3c:	20c0012e 	bgeu	r4,r3,81111d44 <_malloc_r+0x494>
81111d40:	10c00015 	stw	r3,0(r2)
81111d44:	80c00117 	ldw	r3,4(r16)
81111d48:	00bfff04 	movi	r2,-4
81111d4c:	1886703a 	and	r3,r3,r2
81111d50:	1c45c83a 	sub	r2,r3,r17
81111d54:	1c400236 	bltu	r3,r17,81111d60 <_malloc_r+0x4b0>
81111d58:	00c003c4 	movi	r3,15
81111d5c:	18800416 	blt	r3,r2,81111d70 <_malloc_r+0x4c0>
81111d60:	9009883a 	mov	r4,r18
81111d64:	1127a680 	call	81127a68 <__malloc_unlock>
81111d68:	0005883a 	mov	r2,zero
81111d6c:	003f7b06 	br	81111b5c <__reset+0xfb0f1b5c>
81111d70:	88c00054 	ori	r3,r17,1
81111d74:	80c00115 	stw	r3,4(r16)
81111d78:	8463883a 	add	r17,r16,r17
81111d7c:	10800054 	ori	r2,r2,1
81111d80:	9c400215 	stw	r17,8(r19)
81111d84:	88800115 	stw	r2,4(r17)
81111d88:	9009883a 	mov	r4,r18
81111d8c:	1127a680 	call	81127a68 <__malloc_unlock>
81111d90:	80800204 	addi	r2,r16,8
81111d94:	003f7106 	br	81111b5c <__reset+0xfb0f1b5c>
81111d98:	00c00504 	movi	r3,20
81111d9c:	18804a2e 	bgeu	r3,r2,81111ec8 <_malloc_r+0x618>
81111da0:	00c01504 	movi	r3,84
81111da4:	18806e36 	bltu	r3,r2,81111f60 <_malloc_r+0x6b0>
81111da8:	8804d33a 	srli	r2,r17,12
81111dac:	12001bc4 	addi	r8,r2,111
81111db0:	11c01b84 	addi	r7,r2,110
81111db4:	4209883a 	add	r4,r8,r8
81111db8:	003edd06 	br	81111930 <__reset+0xfb0f1930>
81111dbc:	3804d27a 	srli	r2,r7,9
81111dc0:	00c00104 	movi	r3,4
81111dc4:	1880442e 	bgeu	r3,r2,81111ed8 <_malloc_r+0x628>
81111dc8:	00c00504 	movi	r3,20
81111dcc:	18808136 	bltu	r3,r2,81111fd4 <_malloc_r+0x724>
81111dd0:	11401704 	addi	r5,r2,92
81111dd4:	10c016c4 	addi	r3,r2,91
81111dd8:	294b883a 	add	r5,r5,r5
81111ddc:	294b883a 	add	r5,r5,r5
81111de0:	294b883a 	add	r5,r5,r5
81111de4:	994b883a 	add	r5,r19,r5
81111de8:	28800017 	ldw	r2,0(r5)
81111dec:	01a04534 	movhi	r6,33044
81111df0:	297ffe04 	addi	r5,r5,-8
81111df4:	31b98204 	addi	r6,r6,-6648
81111df8:	28806526 	beq	r5,r2,81111f90 <_malloc_r+0x6e0>
81111dfc:	01bfff04 	movi	r6,-4
81111e00:	10c00117 	ldw	r3,4(r2)
81111e04:	1986703a 	and	r3,r3,r6
81111e08:	38c0022e 	bgeu	r7,r3,81111e14 <_malloc_r+0x564>
81111e0c:	10800217 	ldw	r2,8(r2)
81111e10:	28bffb1e 	bne	r5,r2,81111e00 <__reset+0xfb0f1e00>
81111e14:	11400317 	ldw	r5,12(r2)
81111e18:	98c00117 	ldw	r3,4(r19)
81111e1c:	81400315 	stw	r5,12(r16)
81111e20:	80800215 	stw	r2,8(r16)
81111e24:	2c000215 	stw	r16,8(r5)
81111e28:	14000315 	stw	r16,12(r2)
81111e2c:	003ef806 	br	81111a10 <__reset+0xfb0f1a10>
81111e30:	88c00054 	ori	r3,r17,1
81111e34:	80c00115 	stw	r3,4(r16)
81111e38:	8463883a 	add	r17,r16,r17
81111e3c:	34400515 	stw	r17,20(r6)
81111e40:	34400415 	stw	r17,16(r6)
81111e44:	10c00054 	ori	r3,r2,1
81111e48:	8a000315 	stw	r8,12(r17)
81111e4c:	8a000215 	stw	r8,8(r17)
81111e50:	88c00115 	stw	r3,4(r17)
81111e54:	88a3883a 	add	r17,r17,r2
81111e58:	88800015 	stw	r2,0(r17)
81111e5c:	9009883a 	mov	r4,r18
81111e60:	1127a680 	call	81127a68 <__malloc_unlock>
81111e64:	80800204 	addi	r2,r16,8
81111e68:	003f3c06 	br	81111b5c <__reset+0xfb0f1b5c>
81111e6c:	30c00117 	ldw	r3,4(r6)
81111e70:	003ee706 	br	81111a10 <__reset+0xfb0f1a10>
81111e74:	5ac00044 	addi	r11,r11,1
81111e78:	588000cc 	andi	r2,r11,3
81111e7c:	31800204 	addi	r6,r6,8
81111e80:	103efd1e 	bne	r2,zero,81111a78 <__reset+0xfb0f1a78>
81111e84:	00002406 	br	81111f18 <_malloc_r+0x668>
81111e88:	14000317 	ldw	r16,12(r2)
81111e8c:	143f251e 	bne	r2,r16,81111b24 <__reset+0xfb0f1b24>
81111e90:	21000084 	addi	r4,r4,2
81111e94:	003ebc06 	br	81111988 <__reset+0xfb0f1988>
81111e98:	8085883a 	add	r2,r16,r2
81111e9c:	10c00117 	ldw	r3,4(r2)
81111ea0:	81000317 	ldw	r4,12(r16)
81111ea4:	81400217 	ldw	r5,8(r16)
81111ea8:	18c00054 	ori	r3,r3,1
81111eac:	10c00115 	stw	r3,4(r2)
81111eb0:	29000315 	stw	r4,12(r5)
81111eb4:	21400215 	stw	r5,8(r4)
81111eb8:	9009883a 	mov	r4,r18
81111ebc:	1127a680 	call	81127a68 <__malloc_unlock>
81111ec0:	80800204 	addi	r2,r16,8
81111ec4:	003f2506 	br	81111b5c <__reset+0xfb0f1b5c>
81111ec8:	12001704 	addi	r8,r2,92
81111ecc:	11c016c4 	addi	r7,r2,91
81111ed0:	4209883a 	add	r4,r8,r8
81111ed4:	003e9606 	br	81111930 <__reset+0xfb0f1930>
81111ed8:	3804d1ba 	srli	r2,r7,6
81111edc:	11400e44 	addi	r5,r2,57
81111ee0:	10c00e04 	addi	r3,r2,56
81111ee4:	294b883a 	add	r5,r5,r5
81111ee8:	003fbc06 	br	81111ddc <__reset+0xfb0f1ddc>
81111eec:	84ff5926 	beq	r16,r19,81111c54 <__reset+0xfb0f1c54>
81111ef0:	00a04534 	movhi	r2,33044
81111ef4:	10b98204 	addi	r2,r2,-6648
81111ef8:	14000217 	ldw	r16,8(r2)
81111efc:	00bfff04 	movi	r2,-4
81111f00:	80c00117 	ldw	r3,4(r16)
81111f04:	1886703a 	and	r3,r3,r2
81111f08:	003f9106 	br	81111d50 <__reset+0xfb0f1d50>
81111f0c:	60800217 	ldw	r2,8(r12)
81111f10:	213fffc4 	addi	r4,r4,-1
81111f14:	1300651e 	bne	r2,r12,811120ac <_malloc_r+0x7fc>
81111f18:	208000cc 	andi	r2,r4,3
81111f1c:	633ffe04 	addi	r12,r12,-8
81111f20:	103ffa1e 	bne	r2,zero,81111f0c <__reset+0xfb0f1f0c>
81111f24:	98800117 	ldw	r2,4(r19)
81111f28:	0146303a 	nor	r3,zero,r5
81111f2c:	1884703a 	and	r2,r3,r2
81111f30:	98800115 	stw	r2,4(r19)
81111f34:	294b883a 	add	r5,r5,r5
81111f38:	117f2836 	bltu	r2,r5,81111bdc <__reset+0xfb0f1bdc>
81111f3c:	283f2726 	beq	r5,zero,81111bdc <__reset+0xfb0f1bdc>
81111f40:	2886703a 	and	r3,r5,r2
81111f44:	5809883a 	mov	r4,r11
81111f48:	183ec31e 	bne	r3,zero,81111a58 <__reset+0xfb0f1a58>
81111f4c:	294b883a 	add	r5,r5,r5
81111f50:	2886703a 	and	r3,r5,r2
81111f54:	21000104 	addi	r4,r4,4
81111f58:	183ffc26 	beq	r3,zero,81111f4c <__reset+0xfb0f1f4c>
81111f5c:	003ebe06 	br	81111a58 <__reset+0xfb0f1a58>
81111f60:	00c05504 	movi	r3,340
81111f64:	18801236 	bltu	r3,r2,81111fb0 <_malloc_r+0x700>
81111f68:	8804d3fa 	srli	r2,r17,15
81111f6c:	12001e04 	addi	r8,r2,120
81111f70:	11c01dc4 	addi	r7,r2,119
81111f74:	4209883a 	add	r4,r8,r8
81111f78:	003e6d06 	br	81111930 <__reset+0xfb0f1930>
81111f7c:	00c40004 	movi	r3,4096
81111f80:	003f4606 	br	81111c9c <__reset+0xfb0f1c9c>
81111f84:	00800044 	movi	r2,1
81111f88:	a0800115 	stw	r2,4(r20)
81111f8c:	003f7406 	br	81111d60 <__reset+0xfb0f1d60>
81111f90:	1805d0ba 	srai	r2,r3,2
81111f94:	01c00044 	movi	r7,1
81111f98:	30c00117 	ldw	r3,4(r6)
81111f9c:	388e983a 	sll	r7,r7,r2
81111fa0:	2805883a 	mov	r2,r5
81111fa4:	38c6b03a 	or	r3,r7,r3
81111fa8:	30c00115 	stw	r3,4(r6)
81111fac:	003f9b06 	br	81111e1c <__reset+0xfb0f1e1c>
81111fb0:	00c15504 	movi	r3,1364
81111fb4:	18801a36 	bltu	r3,r2,81112020 <_malloc_r+0x770>
81111fb8:	8804d4ba 	srli	r2,r17,18
81111fbc:	12001f44 	addi	r8,r2,125
81111fc0:	11c01f04 	addi	r7,r2,124
81111fc4:	4209883a 	add	r4,r8,r8
81111fc8:	003e5906 	br	81111930 <__reset+0xfb0f1930>
81111fcc:	ad400404 	addi	r21,r21,16
81111fd0:	003f1706 	br	81111c30 <__reset+0xfb0f1c30>
81111fd4:	00c01504 	movi	r3,84
81111fd8:	18802336 	bltu	r3,r2,81112068 <_malloc_r+0x7b8>
81111fdc:	3804d33a 	srli	r2,r7,12
81111fe0:	11401bc4 	addi	r5,r2,111
81111fe4:	10c01b84 	addi	r3,r2,110
81111fe8:	294b883a 	add	r5,r5,r5
81111fec:	003f7b06 	br	81111ddc <__reset+0xfb0f1ddc>
81111ff0:	9c000217 	ldw	r16,8(r19)
81111ff4:	00bfff04 	movi	r2,-4
81111ff8:	80c00117 	ldw	r3,4(r16)
81111ffc:	1886703a 	and	r3,r3,r2
81112000:	003f5306 	br	81111d50 <__reset+0xfb0f1d50>
81112004:	3083ffcc 	andi	r2,r6,4095
81112008:	103f181e 	bne	r2,zero,81111c6c <__reset+0xfb0f1c6c>
8111200c:	99000217 	ldw	r4,8(r19)
81112010:	b545883a 	add	r2,r22,r21
81112014:	10800054 	ori	r2,r2,1
81112018:	20800115 	stw	r2,4(r4)
8111201c:	003f3e06 	br	81111d18 <__reset+0xfb0f1d18>
81112020:	01003f84 	movi	r4,254
81112024:	02001fc4 	movi	r8,127
81112028:	01c01f84 	movi	r7,126
8111202c:	003e4006 	br	81111930 <__reset+0xfb0f1930>
81112030:	00a04534 	movhi	r2,33044
81112034:	10bf9e04 	addi	r2,r2,-392
81112038:	15000015 	stw	r20,0(r2)
8111203c:	003f1106 	br	81111c84 <__reset+0xfb0f1c84>
81112040:	00800044 	movi	r2,1
81112044:	002b883a 	mov	r21,zero
81112048:	003f1f06 	br	81111cc8 <__reset+0xfb0f1cc8>
8111204c:	81400204 	addi	r5,r16,8
81112050:	9009883a 	mov	r4,r18
81112054:	111b0080 	call	8111b008 <_free_r>
81112058:	00a04534 	movhi	r2,33044
8111205c:	10805804 	addi	r2,r2,352
81112060:	10c00017 	ldw	r3,0(r2)
81112064:	003f2c06 	br	81111d18 <__reset+0xfb0f1d18>
81112068:	00c05504 	movi	r3,340
8111206c:	18800536 	bltu	r3,r2,81112084 <_malloc_r+0x7d4>
81112070:	3804d3fa 	srli	r2,r7,15
81112074:	11401e04 	addi	r5,r2,120
81112078:	10c01dc4 	addi	r3,r2,119
8111207c:	294b883a 	add	r5,r5,r5
81112080:	003f5606 	br	81111ddc <__reset+0xfb0f1ddc>
81112084:	00c15504 	movi	r3,1364
81112088:	18800536 	bltu	r3,r2,811120a0 <_malloc_r+0x7f0>
8111208c:	3804d4ba 	srli	r2,r7,18
81112090:	11401f44 	addi	r5,r2,125
81112094:	10c01f04 	addi	r3,r2,124
81112098:	294b883a 	add	r5,r5,r5
8111209c:	003f4f06 	br	81111ddc <__reset+0xfb0f1ddc>
811120a0:	01403f84 	movi	r5,254
811120a4:	00c01f84 	movi	r3,126
811120a8:	003f4c06 	br	81111ddc <__reset+0xfb0f1ddc>
811120ac:	98800117 	ldw	r2,4(r19)
811120b0:	003fa006 	br	81111f34 <__reset+0xfb0f1f34>
811120b4:	8808d0fa 	srli	r4,r17,3
811120b8:	20800044 	addi	r2,r4,1
811120bc:	1085883a 	add	r2,r2,r2
811120c0:	003e9006 	br	81111b04 <__reset+0xfb0f1b04>

811120c4 <memcpy>:
811120c4:	defffd04 	addi	sp,sp,-12
811120c8:	de00012e 	bgeu	sp,et,811120d0 <memcpy+0xc>
811120cc:	003b68fa 	trap	3
811120d0:	00c003c4 	movi	r3,15
811120d4:	dfc00215 	stw	ra,8(sp)
811120d8:	dc400115 	stw	r17,4(sp)
811120dc:	dc000015 	stw	r16,0(sp)
811120e0:	2005883a 	mov	r2,r4
811120e4:	1980452e 	bgeu	r3,r6,811121fc <memcpy+0x138>
811120e8:	2906b03a 	or	r3,r5,r4
811120ec:	18c000cc 	andi	r3,r3,3
811120f0:	1800441e 	bne	r3,zero,81112204 <memcpy+0x140>
811120f4:	347ffc04 	addi	r17,r6,-16
811120f8:	8822d13a 	srli	r17,r17,4
811120fc:	28c00104 	addi	r3,r5,4
81112100:	23400104 	addi	r13,r4,4
81112104:	8820913a 	slli	r16,r17,4
81112108:	2b000204 	addi	r12,r5,8
8111210c:	22c00204 	addi	r11,r4,8
81112110:	84000504 	addi	r16,r16,20
81112114:	2a800304 	addi	r10,r5,12
81112118:	22400304 	addi	r9,r4,12
8111211c:	2c21883a 	add	r16,r5,r16
81112120:	2811883a 	mov	r8,r5
81112124:	200f883a 	mov	r7,r4
81112128:	41000017 	ldw	r4,0(r8)
8111212c:	1fc00017 	ldw	ra,0(r3)
81112130:	63c00017 	ldw	r15,0(r12)
81112134:	39000015 	stw	r4,0(r7)
81112138:	53800017 	ldw	r14,0(r10)
8111213c:	6fc00015 	stw	ra,0(r13)
81112140:	5bc00015 	stw	r15,0(r11)
81112144:	4b800015 	stw	r14,0(r9)
81112148:	18c00404 	addi	r3,r3,16
8111214c:	39c00404 	addi	r7,r7,16
81112150:	42000404 	addi	r8,r8,16
81112154:	6b400404 	addi	r13,r13,16
81112158:	63000404 	addi	r12,r12,16
8111215c:	5ac00404 	addi	r11,r11,16
81112160:	52800404 	addi	r10,r10,16
81112164:	4a400404 	addi	r9,r9,16
81112168:	1c3fef1e 	bne	r3,r16,81112128 <__reset+0xfb0f2128>
8111216c:	89c00044 	addi	r7,r17,1
81112170:	380e913a 	slli	r7,r7,4
81112174:	310003cc 	andi	r4,r6,15
81112178:	02c000c4 	movi	r11,3
8111217c:	11c7883a 	add	r3,r2,r7
81112180:	29cb883a 	add	r5,r5,r7
81112184:	5900212e 	bgeu	r11,r4,8111220c <memcpy+0x148>
81112188:	1813883a 	mov	r9,r3
8111218c:	2811883a 	mov	r8,r5
81112190:	200f883a 	mov	r7,r4
81112194:	42800017 	ldw	r10,0(r8)
81112198:	4a400104 	addi	r9,r9,4
8111219c:	39ffff04 	addi	r7,r7,-4
811121a0:	4abfff15 	stw	r10,-4(r9)
811121a4:	42000104 	addi	r8,r8,4
811121a8:	59fffa36 	bltu	r11,r7,81112194 <__reset+0xfb0f2194>
811121ac:	213fff04 	addi	r4,r4,-4
811121b0:	2008d0ba 	srli	r4,r4,2
811121b4:	318000cc 	andi	r6,r6,3
811121b8:	21000044 	addi	r4,r4,1
811121bc:	2109883a 	add	r4,r4,r4
811121c0:	2109883a 	add	r4,r4,r4
811121c4:	1907883a 	add	r3,r3,r4
811121c8:	290b883a 	add	r5,r5,r4
811121cc:	30000626 	beq	r6,zero,811121e8 <memcpy+0x124>
811121d0:	198d883a 	add	r6,r3,r6
811121d4:	29c00003 	ldbu	r7,0(r5)
811121d8:	18c00044 	addi	r3,r3,1
811121dc:	29400044 	addi	r5,r5,1
811121e0:	19ffffc5 	stb	r7,-1(r3)
811121e4:	19bffb1e 	bne	r3,r6,811121d4 <__reset+0xfb0f21d4>
811121e8:	dfc00217 	ldw	ra,8(sp)
811121ec:	dc400117 	ldw	r17,4(sp)
811121f0:	dc000017 	ldw	r16,0(sp)
811121f4:	dec00304 	addi	sp,sp,12
811121f8:	f800283a 	ret
811121fc:	2007883a 	mov	r3,r4
81112200:	003ff206 	br	811121cc <__reset+0xfb0f21cc>
81112204:	2007883a 	mov	r3,r4
81112208:	003ff106 	br	811121d0 <__reset+0xfb0f21d0>
8111220c:	200d883a 	mov	r6,r4
81112210:	003fee06 	br	811121cc <__reset+0xfb0f21cc>

81112214 <memset>:
81112214:	20c000cc 	andi	r3,r4,3
81112218:	2005883a 	mov	r2,r4
8111221c:	18004426 	beq	r3,zero,81112330 <memset+0x11c>
81112220:	31ffffc4 	addi	r7,r6,-1
81112224:	30004026 	beq	r6,zero,81112328 <memset+0x114>
81112228:	2813883a 	mov	r9,r5
8111222c:	200d883a 	mov	r6,r4
81112230:	2007883a 	mov	r3,r4
81112234:	00000406 	br	81112248 <memset+0x34>
81112238:	3a3fffc4 	addi	r8,r7,-1
8111223c:	31800044 	addi	r6,r6,1
81112240:	38003926 	beq	r7,zero,81112328 <memset+0x114>
81112244:	400f883a 	mov	r7,r8
81112248:	18c00044 	addi	r3,r3,1
8111224c:	32400005 	stb	r9,0(r6)
81112250:	1a0000cc 	andi	r8,r3,3
81112254:	403ff81e 	bne	r8,zero,81112238 <__reset+0xfb0f2238>
81112258:	010000c4 	movi	r4,3
8111225c:	21c02d2e 	bgeu	r4,r7,81112314 <memset+0x100>
81112260:	29003fcc 	andi	r4,r5,255
81112264:	200c923a 	slli	r6,r4,8
81112268:	3108b03a 	or	r4,r6,r4
8111226c:	200c943a 	slli	r6,r4,16
81112270:	218cb03a 	or	r6,r4,r6
81112274:	010003c4 	movi	r4,15
81112278:	21c0182e 	bgeu	r4,r7,811122dc <memset+0xc8>
8111227c:	3b3ffc04 	addi	r12,r7,-16
81112280:	6018d13a 	srli	r12,r12,4
81112284:	1a000104 	addi	r8,r3,4
81112288:	1ac00204 	addi	r11,r3,8
8111228c:	6008913a 	slli	r4,r12,4
81112290:	1a800304 	addi	r10,r3,12
81112294:	1813883a 	mov	r9,r3
81112298:	21000504 	addi	r4,r4,20
8111229c:	1909883a 	add	r4,r3,r4
811122a0:	49800015 	stw	r6,0(r9)
811122a4:	41800015 	stw	r6,0(r8)
811122a8:	59800015 	stw	r6,0(r11)
811122ac:	51800015 	stw	r6,0(r10)
811122b0:	42000404 	addi	r8,r8,16
811122b4:	4a400404 	addi	r9,r9,16
811122b8:	5ac00404 	addi	r11,r11,16
811122bc:	52800404 	addi	r10,r10,16
811122c0:	413ff71e 	bne	r8,r4,811122a0 <__reset+0xfb0f22a0>
811122c4:	63000044 	addi	r12,r12,1
811122c8:	6018913a 	slli	r12,r12,4
811122cc:	39c003cc 	andi	r7,r7,15
811122d0:	010000c4 	movi	r4,3
811122d4:	1b07883a 	add	r3,r3,r12
811122d8:	21c00e2e 	bgeu	r4,r7,81112314 <memset+0x100>
811122dc:	1813883a 	mov	r9,r3
811122e0:	3811883a 	mov	r8,r7
811122e4:	010000c4 	movi	r4,3
811122e8:	49800015 	stw	r6,0(r9)
811122ec:	423fff04 	addi	r8,r8,-4
811122f0:	4a400104 	addi	r9,r9,4
811122f4:	223ffc36 	bltu	r4,r8,811122e8 <__reset+0xfb0f22e8>
811122f8:	393fff04 	addi	r4,r7,-4
811122fc:	2008d0ba 	srli	r4,r4,2
81112300:	39c000cc 	andi	r7,r7,3
81112304:	21000044 	addi	r4,r4,1
81112308:	2109883a 	add	r4,r4,r4
8111230c:	2109883a 	add	r4,r4,r4
81112310:	1907883a 	add	r3,r3,r4
81112314:	38000526 	beq	r7,zero,8111232c <memset+0x118>
81112318:	19cf883a 	add	r7,r3,r7
8111231c:	19400005 	stb	r5,0(r3)
81112320:	18c00044 	addi	r3,r3,1
81112324:	38fffd1e 	bne	r7,r3,8111231c <__reset+0xfb0f231c>
81112328:	f800283a 	ret
8111232c:	f800283a 	ret
81112330:	2007883a 	mov	r3,r4
81112334:	300f883a 	mov	r7,r6
81112338:	003fc706 	br	81112258 <__reset+0xfb0f2258>

8111233c <_open_r>:
8111233c:	defffd04 	addi	sp,sp,-12
81112340:	de00012e 	bgeu	sp,et,81112348 <_open_r+0xc>
81112344:	003b68fa 	trap	3
81112348:	2805883a 	mov	r2,r5
8111234c:	dc000015 	stw	r16,0(sp)
81112350:	04204534 	movhi	r16,33044
81112354:	dc400115 	stw	r17,4(sp)
81112358:	300b883a 	mov	r5,r6
8111235c:	843ff604 	addi	r16,r16,-40
81112360:	2023883a 	mov	r17,r4
81112364:	380d883a 	mov	r6,r7
81112368:	1009883a 	mov	r4,r2
8111236c:	dfc00215 	stw	ra,8(sp)
81112370:	80000015 	stw	zero,0(r16)
81112374:	1126fcc0 	call	81126fcc <open>
81112378:	00ffffc4 	movi	r3,-1
8111237c:	10c00526 	beq	r2,r3,81112394 <_open_r+0x58>
81112380:	dfc00217 	ldw	ra,8(sp)
81112384:	dc400117 	ldw	r17,4(sp)
81112388:	dc000017 	ldw	r16,0(sp)
8111238c:	dec00304 	addi	sp,sp,12
81112390:	f800283a 	ret
81112394:	80c00017 	ldw	r3,0(r16)
81112398:	183ff926 	beq	r3,zero,81112380 <__reset+0xfb0f2380>
8111239c:	88c00015 	stw	r3,0(r17)
811123a0:	003ff706 	br	81112380 <__reset+0xfb0f2380>

811123a4 <_printf_r>:
811123a4:	defffd04 	addi	sp,sp,-12
811123a8:	2805883a 	mov	r2,r5
811123ac:	de00012e 	bgeu	sp,et,811123b4 <_printf_r+0x10>
811123b0:	003b68fa 	trap	3
811123b4:	dfc00015 	stw	ra,0(sp)
811123b8:	d9800115 	stw	r6,4(sp)
811123bc:	d9c00215 	stw	r7,8(sp)
811123c0:	21400217 	ldw	r5,8(r4)
811123c4:	d9c00104 	addi	r7,sp,4
811123c8:	100d883a 	mov	r6,r2
811123cc:	1114f140 	call	81114f14 <___vfprintf_internal_r>
811123d0:	dfc00017 	ldw	ra,0(sp)
811123d4:	dec00304 	addi	sp,sp,12
811123d8:	f800283a 	ret

811123dc <printf>:
811123dc:	defffc04 	addi	sp,sp,-16
811123e0:	de00012e 	bgeu	sp,et,811123e8 <printf+0xc>
811123e4:	003b68fa 	trap	3
811123e8:	dfc00015 	stw	ra,0(sp)
811123ec:	d9400115 	stw	r5,4(sp)
811123f0:	d9800215 	stw	r6,8(sp)
811123f4:	d9c00315 	stw	r7,12(sp)
811123f8:	00a04534 	movhi	r2,33044
811123fc:	10bf9d04 	addi	r2,r2,-396
81112400:	10800017 	ldw	r2,0(r2)
81112404:	200b883a 	mov	r5,r4
81112408:	d9800104 	addi	r6,sp,4
8111240c:	11000217 	ldw	r4,8(r2)
81112410:	11171140 	call	81117114 <__vfprintf_internal>
81112414:	dfc00017 	ldw	ra,0(sp)
81112418:	dec00404 	addi	sp,sp,16
8111241c:	f800283a 	ret

81112420 <_puts_r>:
81112420:	defff604 	addi	sp,sp,-40
81112424:	de00012e 	bgeu	sp,et,8111242c <_puts_r+0xc>
81112428:	003b68fa 	trap	3
8111242c:	dc000715 	stw	r16,28(sp)
81112430:	2021883a 	mov	r16,r4
81112434:	2809883a 	mov	r4,r5
81112438:	dc400815 	stw	r17,32(sp)
8111243c:	dfc00915 	stw	ra,36(sp)
81112440:	2823883a 	mov	r17,r5
81112444:	1112a400 	call	81112a40 <strlen>
81112448:	10c00044 	addi	r3,r2,1
8111244c:	d8800115 	stw	r2,4(sp)
81112450:	00a04534 	movhi	r2,33044
81112454:	10b69204 	addi	r2,r2,-9656
81112458:	d8800215 	stw	r2,8(sp)
8111245c:	00800044 	movi	r2,1
81112460:	d8800315 	stw	r2,12(sp)
81112464:	00800084 	movi	r2,2
81112468:	dc400015 	stw	r17,0(sp)
8111246c:	d8c00615 	stw	r3,24(sp)
81112470:	dec00415 	stw	sp,16(sp)
81112474:	d8800515 	stw	r2,20(sp)
81112478:	80000226 	beq	r16,zero,81112484 <_puts_r+0x64>
8111247c:	80800e17 	ldw	r2,56(r16)
81112480:	10001426 	beq	r2,zero,811124d4 <_puts_r+0xb4>
81112484:	81400217 	ldw	r5,8(r16)
81112488:	2880030b 	ldhu	r2,12(r5)
8111248c:	10c8000c 	andi	r3,r2,8192
81112490:	1800061e 	bne	r3,zero,811124ac <_puts_r+0x8c>
81112494:	29001917 	ldw	r4,100(r5)
81112498:	00f7ffc4 	movi	r3,-8193
8111249c:	10880014 	ori	r2,r2,8192
811124a0:	20c6703a 	and	r3,r4,r3
811124a4:	2880030d 	sth	r2,12(r5)
811124a8:	28c01915 	stw	r3,100(r5)
811124ac:	d9800404 	addi	r6,sp,16
811124b0:	8009883a 	mov	r4,r16
811124b4:	111b3200 	call	8111b320 <__sfvwrite_r>
811124b8:	1000091e 	bne	r2,zero,811124e0 <_puts_r+0xc0>
811124bc:	00800284 	movi	r2,10
811124c0:	dfc00917 	ldw	ra,36(sp)
811124c4:	dc400817 	ldw	r17,32(sp)
811124c8:	dc000717 	ldw	r16,28(sp)
811124cc:	dec00a04 	addi	sp,sp,40
811124d0:	f800283a 	ret
811124d4:	8009883a 	mov	r4,r16
811124d8:	111ab700 	call	8111ab70 <__sinit>
811124dc:	003fe906 	br	81112484 <__reset+0xfb0f2484>
811124e0:	00bfffc4 	movi	r2,-1
811124e4:	003ff606 	br	811124c0 <__reset+0xfb0f24c0>

811124e8 <puts>:
811124e8:	00a04534 	movhi	r2,33044
811124ec:	10bf9d04 	addi	r2,r2,-396
811124f0:	200b883a 	mov	r5,r4
811124f4:	11000017 	ldw	r4,0(r2)
811124f8:	11124201 	jmpi	81112420 <_puts_r>

811124fc <lflush>:
811124fc:	2080030b 	ldhu	r2,12(r4)
81112500:	00c00244 	movi	r3,9
81112504:	1080024c 	andi	r2,r2,9
81112508:	10c00226 	beq	r2,r3,81112514 <lflush+0x18>
8111250c:	0005883a 	mov	r2,zero
81112510:	f800283a 	ret
81112514:	111a7d81 	jmpi	8111a7d8 <fflush>

81112518 <__srefill_r>:
81112518:	defffc04 	addi	sp,sp,-16
8111251c:	de00012e 	bgeu	sp,et,81112524 <__srefill_r+0xc>
81112520:	003b68fa 	trap	3
81112524:	dc400115 	stw	r17,4(sp)
81112528:	dc000015 	stw	r16,0(sp)
8111252c:	dfc00315 	stw	ra,12(sp)
81112530:	dc800215 	stw	r18,8(sp)
81112534:	2023883a 	mov	r17,r4
81112538:	2821883a 	mov	r16,r5
8111253c:	20000226 	beq	r4,zero,81112548 <__srefill_r+0x30>
81112540:	20800e17 	ldw	r2,56(r4)
81112544:	10003c26 	beq	r2,zero,81112638 <__srefill_r+0x120>
81112548:	80c0030b 	ldhu	r3,12(r16)
8111254c:	1908000c 	andi	r4,r3,8192
81112550:	1805883a 	mov	r2,r3
81112554:	2000071e 	bne	r4,zero,81112574 <__srefill_r+0x5c>
81112558:	81001917 	ldw	r4,100(r16)
8111255c:	18880014 	ori	r2,r3,8192
81112560:	00f7ffc4 	movi	r3,-8193
81112564:	20c8703a 	and	r4,r4,r3
81112568:	8080030d 	sth	r2,12(r16)
8111256c:	1007883a 	mov	r3,r2
81112570:	81001915 	stw	r4,100(r16)
81112574:	80000115 	stw	zero,4(r16)
81112578:	1100080c 	andi	r4,r2,32
8111257c:	2000571e 	bne	r4,zero,811126dc <__srefill_r+0x1c4>
81112580:	1100010c 	andi	r4,r2,4
81112584:	20001f26 	beq	r4,zero,81112604 <__srefill_r+0xec>
81112588:	81400c17 	ldw	r5,48(r16)
8111258c:	28000826 	beq	r5,zero,811125b0 <__srefill_r+0x98>
81112590:	80801004 	addi	r2,r16,64
81112594:	28800226 	beq	r5,r2,811125a0 <__srefill_r+0x88>
81112598:	8809883a 	mov	r4,r17
8111259c:	111b0080 	call	8111b008 <_free_r>
811125a0:	80800f17 	ldw	r2,60(r16)
811125a4:	80000c15 	stw	zero,48(r16)
811125a8:	80800115 	stw	r2,4(r16)
811125ac:	1000391e 	bne	r2,zero,81112694 <__srefill_r+0x17c>
811125b0:	80800417 	ldw	r2,16(r16)
811125b4:	10004b26 	beq	r2,zero,811126e4 <__srefill_r+0x1cc>
811125b8:	8480030b 	ldhu	r18,12(r16)
811125bc:	908000cc 	andi	r2,r18,3
811125c0:	10001f1e 	bne	r2,zero,81112640 <__srefill_r+0x128>
811125c4:	81800417 	ldw	r6,16(r16)
811125c8:	80800817 	ldw	r2,32(r16)
811125cc:	81c00517 	ldw	r7,20(r16)
811125d0:	81400717 	ldw	r5,28(r16)
811125d4:	81800015 	stw	r6,0(r16)
811125d8:	8809883a 	mov	r4,r17
811125dc:	103ee83a 	callr	r2
811125e0:	80800115 	stw	r2,4(r16)
811125e4:	00800e0e 	bge	zero,r2,81112620 <__srefill_r+0x108>
811125e8:	0005883a 	mov	r2,zero
811125ec:	dfc00317 	ldw	ra,12(sp)
811125f0:	dc800217 	ldw	r18,8(sp)
811125f4:	dc400117 	ldw	r17,4(sp)
811125f8:	dc000017 	ldw	r16,0(sp)
811125fc:	dec00404 	addi	sp,sp,16
81112600:	f800283a 	ret
81112604:	1100040c 	andi	r4,r2,16
81112608:	20003026 	beq	r4,zero,811126cc <__srefill_r+0x1b4>
8111260c:	1080020c 	andi	r2,r2,8
81112610:	1000241e 	bne	r2,zero,811126a4 <__srefill_r+0x18c>
81112614:	18c00114 	ori	r3,r3,4
81112618:	80c0030d 	sth	r3,12(r16)
8111261c:	003fe406 	br	811125b0 <__reset+0xfb0f25b0>
81112620:	80c0030b 	ldhu	r3,12(r16)
81112624:	1000161e 	bne	r2,zero,81112680 <__srefill_r+0x168>
81112628:	18c00814 	ori	r3,r3,32
8111262c:	00bfffc4 	movi	r2,-1
81112630:	80c0030d 	sth	r3,12(r16)
81112634:	003fed06 	br	811125ec <__reset+0xfb0f25ec>
81112638:	111ab700 	call	8111ab70 <__sinit>
8111263c:	003fc206 	br	81112548 <__reset+0xfb0f2548>
81112640:	00a04534 	movhi	r2,33044
81112644:	10bf9c04 	addi	r2,r2,-400
81112648:	11000017 	ldw	r4,0(r2)
8111264c:	01604474 	movhi	r5,33041
81112650:	00800044 	movi	r2,1
81112654:	29493f04 	addi	r5,r5,9468
81112658:	8080030d 	sth	r2,12(r16)
8111265c:	111b7e40 	call	8111b7e4 <_fwalk>
81112660:	00800244 	movi	r2,9
81112664:	8480030d 	sth	r18,12(r16)
81112668:	9480024c 	andi	r18,r18,9
8111266c:	90bfd51e 	bne	r18,r2,811125c4 <__reset+0xfb0f25c4>
81112670:	800b883a 	mov	r5,r16
81112674:	8809883a 	mov	r4,r17
81112678:	111a5500 	call	8111a550 <__sflush_r>
8111267c:	003fd106 	br	811125c4 <__reset+0xfb0f25c4>
81112680:	18c01014 	ori	r3,r3,64
81112684:	80000115 	stw	zero,4(r16)
81112688:	00bfffc4 	movi	r2,-1
8111268c:	80c0030d 	sth	r3,12(r16)
81112690:	003fd606 	br	811125ec <__reset+0xfb0f25ec>
81112694:	80c00e17 	ldw	r3,56(r16)
81112698:	0005883a 	mov	r2,zero
8111269c:	80c00015 	stw	r3,0(r16)
811126a0:	003fd206 	br	811125ec <__reset+0xfb0f25ec>
811126a4:	800b883a 	mov	r5,r16
811126a8:	8809883a 	mov	r4,r17
811126ac:	111a7740 	call	8111a774 <_fflush_r>
811126b0:	10000a1e 	bne	r2,zero,811126dc <__srefill_r+0x1c4>
811126b4:	8080030b 	ldhu	r2,12(r16)
811126b8:	00fffdc4 	movi	r3,-9
811126bc:	80000215 	stw	zero,8(r16)
811126c0:	1886703a 	and	r3,r3,r2
811126c4:	80000615 	stw	zero,24(r16)
811126c8:	003fd206 	br	81112614 <__reset+0xfb0f2614>
811126cc:	00800244 	movi	r2,9
811126d0:	88800015 	stw	r2,0(r17)
811126d4:	18c01014 	ori	r3,r3,64
811126d8:	80c0030d 	sth	r3,12(r16)
811126dc:	00bfffc4 	movi	r2,-1
811126e0:	003fc206 	br	811125ec <__reset+0xfb0f25ec>
811126e4:	800b883a 	mov	r5,r16
811126e8:	8809883a 	mov	r4,r17
811126ec:	11116ec0 	call	811116ec <__smakebuf_r>
811126f0:	003fb106 	br	811125b8 <__reset+0xfb0f25b8>

811126f4 <_sbrk_r>:
811126f4:	defffd04 	addi	sp,sp,-12
811126f8:	de00012e 	bgeu	sp,et,81112700 <_sbrk_r+0xc>
811126fc:	003b68fa 	trap	3
81112700:	dc000015 	stw	r16,0(sp)
81112704:	04204534 	movhi	r16,33044
81112708:	dc400115 	stw	r17,4(sp)
8111270c:	843ff604 	addi	r16,r16,-40
81112710:	2023883a 	mov	r17,r4
81112714:	2809883a 	mov	r4,r5
81112718:	dfc00215 	stw	ra,8(sp)
8111271c:	80000015 	stw	zero,0(r16)
81112720:	11272dc0 	call	811272dc <sbrk>
81112724:	00ffffc4 	movi	r3,-1
81112728:	10c00526 	beq	r2,r3,81112740 <_sbrk_r+0x4c>
8111272c:	dfc00217 	ldw	ra,8(sp)
81112730:	dc400117 	ldw	r17,4(sp)
81112734:	dc000017 	ldw	r16,0(sp)
81112738:	dec00304 	addi	sp,sp,12
8111273c:	f800283a 	ret
81112740:	80c00017 	ldw	r3,0(r16)
81112744:	183ff926 	beq	r3,zero,8111272c <__reset+0xfb0f272c>
81112748:	88c00015 	stw	r3,0(r17)
8111274c:	003ff706 	br	8111272c <__reset+0xfb0f272c>

81112750 <scanf>:
81112750:	defffc04 	addi	sp,sp,-16
81112754:	de00012e 	bgeu	sp,et,8111275c <scanf+0xc>
81112758:	003b68fa 	trap	3
8111275c:	dfc00015 	stw	ra,0(sp)
81112760:	d9400115 	stw	r5,4(sp)
81112764:	d9800215 	stw	r6,8(sp)
81112768:	d9c00315 	stw	r7,12(sp)
8111276c:	00a04534 	movhi	r2,33044
81112770:	10bf9d04 	addi	r2,r2,-396
81112774:	200d883a 	mov	r6,r4
81112778:	11000017 	ldw	r4,0(r2)
8111277c:	d9c00104 	addi	r7,sp,4
81112780:	21400117 	ldw	r5,4(r4)
81112784:	1118a440 	call	81118a44 <_vfscanf_r>
81112788:	dfc00017 	ldw	ra,0(sp)
8111278c:	dec00404 	addi	sp,sp,16
81112790:	f800283a 	ret

81112794 <_scanf_r>:
81112794:	defffd04 	addi	sp,sp,-12
81112798:	2805883a 	mov	r2,r5
8111279c:	de00012e 	bgeu	sp,et,811127a4 <_scanf_r+0x10>
811127a0:	003b68fa 	trap	3
811127a4:	dfc00015 	stw	ra,0(sp)
811127a8:	d9800115 	stw	r6,4(sp)
811127ac:	d9c00215 	stw	r7,8(sp)
811127b0:	21400117 	ldw	r5,4(r4)
811127b4:	d9c00104 	addi	r7,sp,4
811127b8:	100d883a 	mov	r6,r2
811127bc:	1118a440 	call	81118a44 <_vfscanf_r>
811127c0:	dfc00017 	ldw	ra,0(sp)
811127c4:	dec00304 	addi	sp,sp,12
811127c8:	f800283a 	ret

811127cc <_sprintf_r>:
811127cc:	deffe404 	addi	sp,sp,-112
811127d0:	2807883a 	mov	r3,r5
811127d4:	de00012e 	bgeu	sp,et,811127dc <_sprintf_r+0x10>
811127d8:	003b68fa 	trap	3
811127dc:	dfc01a15 	stw	ra,104(sp)
811127e0:	d9c01b15 	stw	r7,108(sp)
811127e4:	00a00034 	movhi	r2,32768
811127e8:	10bfffc4 	addi	r2,r2,-1
811127ec:	02008204 	movi	r8,520
811127f0:	d8800215 	stw	r2,8(sp)
811127f4:	d8800515 	stw	r2,20(sp)
811127f8:	d9c01b04 	addi	r7,sp,108
811127fc:	d80b883a 	mov	r5,sp
81112800:	00bfffc4 	movi	r2,-1
81112804:	d8c00015 	stw	r3,0(sp)
81112808:	d8c00415 	stw	r3,16(sp)
8111280c:	da00030d 	sth	r8,12(sp)
81112810:	d880038d 	sth	r2,14(sp)
81112814:	1112d340 	call	81112d34 <___svfprintf_internal_r>
81112818:	d8c00017 	ldw	r3,0(sp)
8111281c:	18000005 	stb	zero,0(r3)
81112820:	dfc01a17 	ldw	ra,104(sp)
81112824:	dec01c04 	addi	sp,sp,112
81112828:	f800283a 	ret

8111282c <sprintf>:
8111282c:	deffe304 	addi	sp,sp,-116
81112830:	2007883a 	mov	r3,r4
81112834:	de00012e 	bgeu	sp,et,8111283c <sprintf+0x10>
81112838:	003b68fa 	trap	3
8111283c:	dfc01a15 	stw	ra,104(sp)
81112840:	d9801b15 	stw	r6,108(sp)
81112844:	d9c01c15 	stw	r7,112(sp)
81112848:	01204534 	movhi	r4,33044
8111284c:	213f9d04 	addi	r4,r4,-396
81112850:	21000017 	ldw	r4,0(r4)
81112854:	00a00034 	movhi	r2,32768
81112858:	10bfffc4 	addi	r2,r2,-1
8111285c:	280d883a 	mov	r6,r5
81112860:	02008204 	movi	r8,520
81112864:	d8800215 	stw	r2,8(sp)
81112868:	d8800515 	stw	r2,20(sp)
8111286c:	d9c01b04 	addi	r7,sp,108
81112870:	d80b883a 	mov	r5,sp
81112874:	00bfffc4 	movi	r2,-1
81112878:	d8c00015 	stw	r3,0(sp)
8111287c:	d8c00415 	stw	r3,16(sp)
81112880:	da00030d 	sth	r8,12(sp)
81112884:	d880038d 	sth	r2,14(sp)
81112888:	1112d340 	call	81112d34 <___svfprintf_internal_r>
8111288c:	d8c00017 	ldw	r3,0(sp)
81112890:	18000005 	stb	zero,0(r3)
81112894:	dfc01a17 	ldw	ra,104(sp)
81112898:	dec01d04 	addi	sp,sp,116
8111289c:	f800283a 	ret

811128a0 <__sread>:
811128a0:	defffe04 	addi	sp,sp,-8
811128a4:	de00012e 	bgeu	sp,et,811128ac <__sread+0xc>
811128a8:	003b68fa 	trap	3
811128ac:	dc000015 	stw	r16,0(sp)
811128b0:	2821883a 	mov	r16,r5
811128b4:	2940038f 	ldh	r5,14(r5)
811128b8:	dfc00115 	stw	ra,4(sp)
811128bc:	111d0340 	call	8111d034 <_read_r>
811128c0:	10000716 	blt	r2,zero,811128e0 <__sread+0x40>
811128c4:	80c01417 	ldw	r3,80(r16)
811128c8:	1887883a 	add	r3,r3,r2
811128cc:	80c01415 	stw	r3,80(r16)
811128d0:	dfc00117 	ldw	ra,4(sp)
811128d4:	dc000017 	ldw	r16,0(sp)
811128d8:	dec00204 	addi	sp,sp,8
811128dc:	f800283a 	ret
811128e0:	80c0030b 	ldhu	r3,12(r16)
811128e4:	18fbffcc 	andi	r3,r3,61439
811128e8:	80c0030d 	sth	r3,12(r16)
811128ec:	dfc00117 	ldw	ra,4(sp)
811128f0:	dc000017 	ldw	r16,0(sp)
811128f4:	dec00204 	addi	sp,sp,8
811128f8:	f800283a 	ret

811128fc <__seofread>:
811128fc:	0005883a 	mov	r2,zero
81112900:	f800283a 	ret

81112904 <__swrite>:
81112904:	defffb04 	addi	sp,sp,-20
81112908:	de00012e 	bgeu	sp,et,81112910 <__swrite+0xc>
8111290c:	003b68fa 	trap	3
81112910:	2880030b 	ldhu	r2,12(r5)
81112914:	dcc00315 	stw	r19,12(sp)
81112918:	dc800215 	stw	r18,8(sp)
8111291c:	dc400115 	stw	r17,4(sp)
81112920:	dc000015 	stw	r16,0(sp)
81112924:	dfc00415 	stw	ra,16(sp)
81112928:	10c0400c 	andi	r3,r2,256
8111292c:	2821883a 	mov	r16,r5
81112930:	2023883a 	mov	r17,r4
81112934:	3025883a 	mov	r18,r6
81112938:	3827883a 	mov	r19,r7
8111293c:	18000526 	beq	r3,zero,81112954 <__swrite+0x50>
81112940:	2940038f 	ldh	r5,14(r5)
81112944:	01c00084 	movi	r7,2
81112948:	000d883a 	mov	r6,zero
8111294c:	111baec0 	call	8111baec <_lseek_r>
81112950:	8080030b 	ldhu	r2,12(r16)
81112954:	8140038f 	ldh	r5,14(r16)
81112958:	10bbffcc 	andi	r2,r2,61439
8111295c:	980f883a 	mov	r7,r19
81112960:	900d883a 	mov	r6,r18
81112964:	8809883a 	mov	r4,r17
81112968:	8080030d 	sth	r2,12(r16)
8111296c:	dfc00417 	ldw	ra,16(sp)
81112970:	dcc00317 	ldw	r19,12(sp)
81112974:	dc800217 	ldw	r18,8(sp)
81112978:	dc400117 	ldw	r17,4(sp)
8111297c:	dc000017 	ldw	r16,0(sp)
81112980:	dec00504 	addi	sp,sp,20
81112984:	1118a981 	jmpi	81118a98 <_write_r>

81112988 <__sseek>:
81112988:	defffe04 	addi	sp,sp,-8
8111298c:	de00012e 	bgeu	sp,et,81112994 <__sseek+0xc>
81112990:	003b68fa 	trap	3
81112994:	dc000015 	stw	r16,0(sp)
81112998:	2821883a 	mov	r16,r5
8111299c:	2940038f 	ldh	r5,14(r5)
811129a0:	dfc00115 	stw	ra,4(sp)
811129a4:	111baec0 	call	8111baec <_lseek_r>
811129a8:	00ffffc4 	movi	r3,-1
811129ac:	10c00826 	beq	r2,r3,811129d0 <__sseek+0x48>
811129b0:	80c0030b 	ldhu	r3,12(r16)
811129b4:	80801415 	stw	r2,80(r16)
811129b8:	18c40014 	ori	r3,r3,4096
811129bc:	80c0030d 	sth	r3,12(r16)
811129c0:	dfc00117 	ldw	ra,4(sp)
811129c4:	dc000017 	ldw	r16,0(sp)
811129c8:	dec00204 	addi	sp,sp,8
811129cc:	f800283a 	ret
811129d0:	80c0030b 	ldhu	r3,12(r16)
811129d4:	18fbffcc 	andi	r3,r3,61439
811129d8:	80c0030d 	sth	r3,12(r16)
811129dc:	dfc00117 	ldw	ra,4(sp)
811129e0:	dc000017 	ldw	r16,0(sp)
811129e4:	dec00204 	addi	sp,sp,8
811129e8:	f800283a 	ret

811129ec <__sclose>:
811129ec:	2940038f 	ldh	r5,14(r5)
811129f0:	1118c5c1 	jmpi	81118c5c <_close_r>

811129f4 <strcspn>:
811129f4:	21c00007 	ldb	r7,0(r4)
811129f8:	38000f26 	beq	r7,zero,81112a38 <strcspn+0x44>
811129fc:	2a000007 	ldb	r8,0(r5)
81112a00:	2005883a 	mov	r2,r4
81112a04:	40000726 	beq	r8,zero,81112a24 <strcspn+0x30>
81112a08:	3a000926 	beq	r7,r8,81112a30 <strcspn+0x3c>
81112a0c:	2807883a 	mov	r3,r5
81112a10:	00000106 	br	81112a18 <strcspn+0x24>
81112a14:	31c00626 	beq	r6,r7,81112a30 <strcspn+0x3c>
81112a18:	18c00044 	addi	r3,r3,1
81112a1c:	19800007 	ldb	r6,0(r3)
81112a20:	303ffc1e 	bne	r6,zero,81112a14 <__reset+0xfb0f2a14>
81112a24:	10800044 	addi	r2,r2,1
81112a28:	11c00007 	ldb	r7,0(r2)
81112a2c:	383ff51e 	bne	r7,zero,81112a04 <__reset+0xfb0f2a04>
81112a30:	1105c83a 	sub	r2,r2,r4
81112a34:	f800283a 	ret
81112a38:	0005883a 	mov	r2,zero
81112a3c:	f800283a 	ret

81112a40 <strlen>:
81112a40:	208000cc 	andi	r2,r4,3
81112a44:	10002026 	beq	r2,zero,81112ac8 <strlen+0x88>
81112a48:	20800007 	ldb	r2,0(r4)
81112a4c:	10002026 	beq	r2,zero,81112ad0 <strlen+0x90>
81112a50:	2005883a 	mov	r2,r4
81112a54:	00000206 	br	81112a60 <strlen+0x20>
81112a58:	10c00007 	ldb	r3,0(r2)
81112a5c:	18001826 	beq	r3,zero,81112ac0 <strlen+0x80>
81112a60:	10800044 	addi	r2,r2,1
81112a64:	10c000cc 	andi	r3,r2,3
81112a68:	183ffb1e 	bne	r3,zero,81112a58 <__reset+0xfb0f2a58>
81112a6c:	10c00017 	ldw	r3,0(r2)
81112a70:	01ffbff4 	movhi	r7,65279
81112a74:	39ffbfc4 	addi	r7,r7,-257
81112a78:	00ca303a 	nor	r5,zero,r3
81112a7c:	01a02074 	movhi	r6,32897
81112a80:	19c7883a 	add	r3,r3,r7
81112a84:	31a02004 	addi	r6,r6,-32640
81112a88:	1946703a 	and	r3,r3,r5
81112a8c:	1986703a 	and	r3,r3,r6
81112a90:	1800091e 	bne	r3,zero,81112ab8 <strlen+0x78>
81112a94:	10800104 	addi	r2,r2,4
81112a98:	10c00017 	ldw	r3,0(r2)
81112a9c:	19cb883a 	add	r5,r3,r7
81112aa0:	00c6303a 	nor	r3,zero,r3
81112aa4:	28c6703a 	and	r3,r5,r3
81112aa8:	1986703a 	and	r3,r3,r6
81112aac:	183ff926 	beq	r3,zero,81112a94 <__reset+0xfb0f2a94>
81112ab0:	00000106 	br	81112ab8 <strlen+0x78>
81112ab4:	10800044 	addi	r2,r2,1
81112ab8:	10c00007 	ldb	r3,0(r2)
81112abc:	183ffd1e 	bne	r3,zero,81112ab4 <__reset+0xfb0f2ab4>
81112ac0:	1105c83a 	sub	r2,r2,r4
81112ac4:	f800283a 	ret
81112ac8:	2005883a 	mov	r2,r4
81112acc:	003fe706 	br	81112a6c <__reset+0xfb0f2a6c>
81112ad0:	0005883a 	mov	r2,zero
81112ad4:	f800283a 	ret

81112ad8 <_strtol_r>:
81112ad8:	00a04534 	movhi	r2,33044
81112adc:	defff404 	addi	sp,sp,-48
81112ae0:	10bf9b04 	addi	r2,r2,-404
81112ae4:	de00012e 	bgeu	sp,et,81112aec <_strtol_r+0x14>
81112ae8:	003b68fa 	trap	3
81112aec:	dd400715 	stw	r21,28(sp)
81112af0:	15400017 	ldw	r21,0(r2)
81112af4:	dd800815 	stw	r22,32(sp)
81112af8:	dd000615 	stw	r20,24(sp)
81112afc:	dcc00515 	stw	r19,20(sp)
81112b00:	d9000015 	stw	r4,0(sp)
81112b04:	dfc00b15 	stw	ra,44(sp)
81112b08:	df000a15 	stw	fp,40(sp)
81112b0c:	ddc00915 	stw	r23,36(sp)
81112b10:	dc800415 	stw	r18,16(sp)
81112b14:	dc400315 	stw	r17,12(sp)
81112b18:	dc000215 	stw	r16,8(sp)
81112b1c:	2829883a 	mov	r20,r5
81112b20:	3027883a 	mov	r19,r6
81112b24:	382d883a 	mov	r22,r7
81112b28:	2809883a 	mov	r4,r5
81112b2c:	24000003 	ldbu	r16,0(r4)
81112b30:	24400044 	addi	r17,r4,1
81112b34:	2007883a 	mov	r3,r4
81112b38:	ac05883a 	add	r2,r21,r16
81112b3c:	10800043 	ldbu	r2,1(r2)
81112b40:	8809883a 	mov	r4,r17
81112b44:	1080020c 	andi	r2,r2,8
81112b48:	103ff81e 	bne	r2,zero,81112b2c <__reset+0xfb0f2b2c>
81112b4c:	00800b44 	movi	r2,45
81112b50:	80805826 	beq	r16,r2,81112cb4 <_strtol_r+0x1dc>
81112b54:	00800ac4 	movi	r2,43
81112b58:	80805a26 	beq	r16,r2,81112cc4 <_strtol_r+0x1ec>
81112b5c:	0039883a 	mov	fp,zero
81112b60:	b0004426 	beq	r22,zero,81112c74 <_strtol_r+0x19c>
81112b64:	00800404 	movi	r2,16
81112b68:	b0806026 	beq	r22,r2,81112cec <_strtol_r+0x214>
81112b6c:	b02f883a 	mov	r23,r22
81112b70:	00a00034 	movhi	r2,32768
81112b74:	e025003a 	cmpeq	r18,fp,zero
81112b78:	14a5c83a 	sub	r18,r2,r18
81112b7c:	b80b883a 	mov	r5,r23
81112b80:	9009883a 	mov	r4,r18
81112b84:	11245540 	call	81124554 <__umodsi3>
81112b88:	b80b883a 	mov	r5,r23
81112b8c:	9009883a 	mov	r4,r18
81112b90:	d8800115 	stw	r2,4(sp)
81112b94:	11244f00 	call	811244f0 <__udivsi3>
81112b98:	ac07883a 	add	r3,r21,r16
81112b9c:	18c00043 	ldbu	r3,1(r3)
81112ba0:	880b883a 	mov	r5,r17
81112ba4:	000d883a 	mov	r6,zero
81112ba8:	1a00010c 	andi	r8,r3,4
81112bac:	0009883a 	mov	r4,zero
81112bb0:	02800044 	movi	r10,1
81112bb4:	027fffc4 	movi	r9,-1
81112bb8:	d9c00117 	ldw	r7,4(sp)
81112bbc:	40000e26 	beq	r8,zero,81112bf8 <_strtol_r+0x120>
81112bc0:	843ff404 	addi	r16,r16,-48
81112bc4:	8580120e 	bge	r16,r22,81112c10 <_strtol_r+0x138>
81112bc8:	32400526 	beq	r6,r9,81112be0 <_strtol_r+0x108>
81112bcc:	11002536 	bltu	r2,r4,81112c64 <_strtol_r+0x18c>
81112bd0:	20802326 	beq	r4,r2,81112c60 <_strtol_r+0x188>
81112bd4:	25c9383a 	mul	r4,r4,r23
81112bd8:	01800044 	movi	r6,1
81112bdc:	8109883a 	add	r4,r16,r4
81112be0:	2c000003 	ldbu	r16,0(r5)
81112be4:	29400044 	addi	r5,r5,1
81112be8:	ac07883a 	add	r3,r21,r16
81112bec:	18c00043 	ldbu	r3,1(r3)
81112bf0:	1a00010c 	andi	r8,r3,4
81112bf4:	403ff21e 	bne	r8,zero,81112bc0 <__reset+0xfb0f2bc0>
81112bf8:	18c000cc 	andi	r3,r3,3
81112bfc:	18000426 	beq	r3,zero,81112c10 <_strtol_r+0x138>
81112c00:	1a801a26 	beq	r3,r10,81112c6c <_strtol_r+0x194>
81112c04:	00c015c4 	movi	r3,87
81112c08:	80e1c83a 	sub	r16,r16,r3
81112c0c:	85bfee16 	blt	r16,r22,81112bc8 <__reset+0xfb0f2bc8>
81112c10:	00bfffc4 	movi	r2,-1
81112c14:	30801e26 	beq	r6,r2,81112c90 <_strtol_r+0x1b8>
81112c18:	e0001b1e 	bne	fp,zero,81112c88 <_strtol_r+0x1b0>
81112c1c:	2005883a 	mov	r2,r4
81112c20:	98000326 	beq	r19,zero,81112c30 <_strtol_r+0x158>
81112c24:	3000211e 	bne	r6,zero,81112cac <_strtol_r+0x1d4>
81112c28:	a00b883a 	mov	r5,r20
81112c2c:	99400015 	stw	r5,0(r19)
81112c30:	dfc00b17 	ldw	ra,44(sp)
81112c34:	df000a17 	ldw	fp,40(sp)
81112c38:	ddc00917 	ldw	r23,36(sp)
81112c3c:	dd800817 	ldw	r22,32(sp)
81112c40:	dd400717 	ldw	r21,28(sp)
81112c44:	dd000617 	ldw	r20,24(sp)
81112c48:	dcc00517 	ldw	r19,20(sp)
81112c4c:	dc800417 	ldw	r18,16(sp)
81112c50:	dc400317 	ldw	r17,12(sp)
81112c54:	dc000217 	ldw	r16,8(sp)
81112c58:	dec00c04 	addi	sp,sp,48
81112c5c:	f800283a 	ret
81112c60:	3c3fdc0e 	bge	r7,r16,81112bd4 <__reset+0xfb0f2bd4>
81112c64:	01bfffc4 	movi	r6,-1
81112c68:	003fdd06 	br	81112be0 <__reset+0xfb0f2be0>
81112c6c:	00c00dc4 	movi	r3,55
81112c70:	003fe506 	br	81112c08 <__reset+0xfb0f2c08>
81112c74:	00800c04 	movi	r2,48
81112c78:	80801626 	beq	r16,r2,81112cd4 <_strtol_r+0x1fc>
81112c7c:	05800284 	movi	r22,10
81112c80:	b02f883a 	mov	r23,r22
81112c84:	003fba06 	br	81112b70 <__reset+0xfb0f2b70>
81112c88:	0109c83a 	sub	r4,zero,r4
81112c8c:	003fe306 	br	81112c1c <__reset+0xfb0f2c1c>
81112c90:	d9000017 	ldw	r4,0(sp)
81112c94:	00c00884 	movi	r3,34
81112c98:	e005003a 	cmpeq	r2,fp,zero
81112c9c:	20c00015 	stw	r3,0(r4)
81112ca0:	00e00034 	movhi	r3,32768
81112ca4:	1885c83a 	sub	r2,r3,r2
81112ca8:	983fe126 	beq	r19,zero,81112c30 <__reset+0xfb0f2c30>
81112cac:	297fffc4 	addi	r5,r5,-1
81112cb0:	003fde06 	br	81112c2c <__reset+0xfb0f2c2c>
81112cb4:	1c400084 	addi	r17,r3,2
81112cb8:	1c000043 	ldbu	r16,1(r3)
81112cbc:	07000044 	movi	fp,1
81112cc0:	003fa706 	br	81112b60 <__reset+0xfb0f2b60>
81112cc4:	1c400084 	addi	r17,r3,2
81112cc8:	1c000043 	ldbu	r16,1(r3)
81112ccc:	0039883a 	mov	fp,zero
81112cd0:	003fa306 	br	81112b60 <__reset+0xfb0f2b60>
81112cd4:	88800003 	ldbu	r2,0(r17)
81112cd8:	00c01604 	movi	r3,88
81112cdc:	108037cc 	andi	r2,r2,223
81112ce0:	10c00826 	beq	r2,r3,81112d04 <_strtol_r+0x22c>
81112ce4:	05800204 	movi	r22,8
81112ce8:	003fa006 	br	81112b6c <__reset+0xfb0f2b6c>
81112cec:	00800c04 	movi	r2,48
81112cf0:	80bf9e1e 	bne	r16,r2,81112b6c <__reset+0xfb0f2b6c>
81112cf4:	88800003 	ldbu	r2,0(r17)
81112cf8:	00c01604 	movi	r3,88
81112cfc:	108037cc 	andi	r2,r2,223
81112d00:	10ff9a1e 	bne	r2,r3,81112b6c <__reset+0xfb0f2b6c>
81112d04:	05c00404 	movi	r23,16
81112d08:	8c000043 	ldbu	r16,1(r17)
81112d0c:	b82d883a 	mov	r22,r23
81112d10:	8c400084 	addi	r17,r17,2
81112d14:	003f9606 	br	81112b70 <__reset+0xfb0f2b70>

81112d18 <strtol>:
81112d18:	00a04534 	movhi	r2,33044
81112d1c:	10bf9d04 	addi	r2,r2,-396
81112d20:	300f883a 	mov	r7,r6
81112d24:	280d883a 	mov	r6,r5
81112d28:	200b883a 	mov	r5,r4
81112d2c:	11000017 	ldw	r4,0(r2)
81112d30:	1112ad81 	jmpi	81112ad8 <_strtol_r>

81112d34 <___svfprintf_internal_r>:
81112d34:	deffb704 	addi	sp,sp,-292
81112d38:	de00012e 	bgeu	sp,et,81112d40 <___svfprintf_internal_r+0xc>
81112d3c:	003b68fa 	trap	3
81112d40:	dfc04815 	stw	ra,288(sp)
81112d44:	ddc04615 	stw	r23,280(sp)
81112d48:	d9402c15 	stw	r5,176(sp)
81112d4c:	d9003915 	stw	r4,228(sp)
81112d50:	302f883a 	mov	r23,r6
81112d54:	d9c02d15 	stw	r7,180(sp)
81112d58:	df004715 	stw	fp,284(sp)
81112d5c:	dd804515 	stw	r22,276(sp)
81112d60:	dd404415 	stw	r21,272(sp)
81112d64:	dd004315 	stw	r20,268(sp)
81112d68:	dcc04215 	stw	r19,264(sp)
81112d6c:	dc804115 	stw	r18,260(sp)
81112d70:	dc404015 	stw	r17,256(sp)
81112d74:	dc003f15 	stw	r16,252(sp)
81112d78:	111babc0 	call	8111babc <_localeconv_r>
81112d7c:	10800017 	ldw	r2,0(r2)
81112d80:	1009883a 	mov	r4,r2
81112d84:	d8803415 	stw	r2,208(sp)
81112d88:	1112a400 	call	81112a40 <strlen>
81112d8c:	d8c02c17 	ldw	r3,176(sp)
81112d90:	d8803815 	stw	r2,224(sp)
81112d94:	1880030b 	ldhu	r2,12(r3)
81112d98:	1080200c 	andi	r2,r2,128
81112d9c:	10000226 	beq	r2,zero,81112da8 <___svfprintf_internal_r+0x74>
81112da0:	18800417 	ldw	r2,16(r3)
81112da4:	10067f26 	beq	r2,zero,811147a4 <___svfprintf_internal_r+0x1a70>
81112da8:	dcc03917 	ldw	r19,228(sp)
81112dac:	d8c00404 	addi	r3,sp,16
81112db0:	05604534 	movhi	r21,33044
81112db4:	d9001e04 	addi	r4,sp,120
81112db8:	ad76a384 	addi	r21,r21,-9586
81112dbc:	d8c01e15 	stw	r3,120(sp)
81112dc0:	d8002015 	stw	zero,128(sp)
81112dc4:	d8001f15 	stw	zero,124(sp)
81112dc8:	d8003315 	stw	zero,204(sp)
81112dcc:	d8003615 	stw	zero,216(sp)
81112dd0:	d8003715 	stw	zero,220(sp)
81112dd4:	1811883a 	mov	r8,r3
81112dd8:	d8003a15 	stw	zero,232(sp)
81112ddc:	d8003b15 	stw	zero,236(sp)
81112de0:	d8002f15 	stw	zero,188(sp)
81112de4:	d9002815 	stw	r4,160(sp)
81112de8:	b8800007 	ldb	r2,0(r23)
81112dec:	10026726 	beq	r2,zero,8111378c <___svfprintf_internal_r+0xa58>
81112df0:	00c00944 	movi	r3,37
81112df4:	b821883a 	mov	r16,r23
81112df8:	10c0021e 	bne	r2,r3,81112e04 <___svfprintf_internal_r+0xd0>
81112dfc:	00001406 	br	81112e50 <___svfprintf_internal_r+0x11c>
81112e00:	10c00326 	beq	r2,r3,81112e10 <___svfprintf_internal_r+0xdc>
81112e04:	84000044 	addi	r16,r16,1
81112e08:	80800007 	ldb	r2,0(r16)
81112e0c:	103ffc1e 	bne	r2,zero,81112e00 <__reset+0xfb0f2e00>
81112e10:	85e3c83a 	sub	r17,r16,r23
81112e14:	88000e26 	beq	r17,zero,81112e50 <___svfprintf_internal_r+0x11c>
81112e18:	d8c02017 	ldw	r3,128(sp)
81112e1c:	d8801f17 	ldw	r2,124(sp)
81112e20:	45c00015 	stw	r23,0(r8)
81112e24:	1c47883a 	add	r3,r3,r17
81112e28:	10800044 	addi	r2,r2,1
81112e2c:	d8c02015 	stw	r3,128(sp)
81112e30:	44400115 	stw	r17,4(r8)
81112e34:	d8801f15 	stw	r2,124(sp)
81112e38:	00c001c4 	movi	r3,7
81112e3c:	18809716 	blt	r3,r2,8111309c <___svfprintf_internal_r+0x368>
81112e40:	42000204 	addi	r8,r8,8
81112e44:	d9402f17 	ldw	r5,188(sp)
81112e48:	2c4b883a 	add	r5,r5,r17
81112e4c:	d9402f15 	stw	r5,188(sp)
81112e50:	80800007 	ldb	r2,0(r16)
81112e54:	10009826 	beq	r2,zero,811130b8 <___svfprintf_internal_r+0x384>
81112e58:	84400047 	ldb	r17,1(r16)
81112e5c:	00bfffc4 	movi	r2,-1
81112e60:	85c00044 	addi	r23,r16,1
81112e64:	d8002785 	stb	zero,158(sp)
81112e68:	0007883a 	mov	r3,zero
81112e6c:	000f883a 	mov	r7,zero
81112e70:	d8802915 	stw	r2,164(sp)
81112e74:	d8003115 	stw	zero,196(sp)
81112e78:	0025883a 	mov	r18,zero
81112e7c:	01401604 	movi	r5,88
81112e80:	01800244 	movi	r6,9
81112e84:	02800a84 	movi	r10,42
81112e88:	02401b04 	movi	r9,108
81112e8c:	bdc00044 	addi	r23,r23,1
81112e90:	88bff804 	addi	r2,r17,-32
81112e94:	2882f036 	bltu	r5,r2,81113a58 <___svfprintf_internal_r+0xd24>
81112e98:	100490ba 	slli	r2,r2,2
81112e9c:	01204474 	movhi	r4,33041
81112ea0:	210bac04 	addi	r4,r4,11952
81112ea4:	1105883a 	add	r2,r2,r4
81112ea8:	10800017 	ldw	r2,0(r2)
81112eac:	1000683a 	jmp	r2
81112eb0:	811139c0 	call	8811139c <__reset+0x20f139c>
81112eb4:	81113a58 	cmpnei	r4,r16,17641
81112eb8:	81113a58 	cmpnei	r4,r16,17641
81112ebc:	811139b4 	orhi	r4,r16,17638
81112ec0:	81113a58 	cmpnei	r4,r16,17641
81112ec4:	81113a58 	cmpnei	r4,r16,17641
81112ec8:	81113a58 	cmpnei	r4,r16,17641
81112ecc:	81113a58 	cmpnei	r4,r16,17641
81112ed0:	81113a58 	cmpnei	r4,r16,17641
81112ed4:	81113a58 	cmpnei	r4,r16,17641
81112ed8:	81113114 	ori	r4,r16,17604
81112edc:	811138f0 	cmpltui	r4,r16,17635
81112ee0:	81113a58 	cmpnei	r4,r16,17641
81112ee4:	81113024 	muli	r4,r16,17600
81112ee8:	8111313c 	xorhi	r4,r16,17604
81112eec:	81113a58 	cmpnei	r4,r16,17641
81112ef0:	811131b0 	cmpltui	r4,r16,17606
81112ef4:	8111317c 	xorhi	r4,r16,17605
81112ef8:	8111317c 	xorhi	r4,r16,17605
81112efc:	8111317c 	xorhi	r4,r16,17605
81112f00:	8111317c 	xorhi	r4,r16,17605
81112f04:	8111317c 	xorhi	r4,r16,17605
81112f08:	8111317c 	xorhi	r4,r16,17605
81112f0c:	8111317c 	xorhi	r4,r16,17605
81112f10:	8111317c 	xorhi	r4,r16,17605
81112f14:	8111317c 	xorhi	r4,r16,17605
81112f18:	81113a58 	cmpnei	r4,r16,17641
81112f1c:	81113a58 	cmpnei	r4,r16,17641
81112f20:	81113a58 	cmpnei	r4,r16,17641
81112f24:	81113a58 	cmpnei	r4,r16,17641
81112f28:	81113a58 	cmpnei	r4,r16,17641
81112f2c:	81113a58 	cmpnei	r4,r16,17641
81112f30:	81113a58 	cmpnei	r4,r16,17641
81112f34:	81113a58 	cmpnei	r4,r16,17641
81112f38:	81113a58 	cmpnei	r4,r16,17641
81112f3c:	81113a58 	cmpnei	r4,r16,17641
81112f40:	81113268 	cmpgeui	r4,r16,17609
81112f44:	811131bc 	xorhi	r4,r16,17606
81112f48:	81113a58 	cmpnei	r4,r16,17641
81112f4c:	811131bc 	xorhi	r4,r16,17606
81112f50:	81113a58 	cmpnei	r4,r16,17641
81112f54:	81113a58 	cmpnei	r4,r16,17641
81112f58:	81113a58 	cmpnei	r4,r16,17641
81112f5c:	81113a58 	cmpnei	r4,r16,17641
81112f60:	8111325c 	xori	r4,r16,17609
81112f64:	81113a58 	cmpnei	r4,r16,17641
81112f68:	81113a58 	cmpnei	r4,r16,17641
81112f6c:	81113324 	muli	r4,r16,17612
81112f70:	81113a58 	cmpnei	r4,r16,17641
81112f74:	81113a58 	cmpnei	r4,r16,17641
81112f78:	81113a58 	cmpnei	r4,r16,17641
81112f7c:	81113a58 	cmpnei	r4,r16,17641
81112f80:	81113a58 	cmpnei	r4,r16,17641
81112f84:	81113794 	ori	r4,r16,17630
81112f88:	81113a58 	cmpnei	r4,r16,17641
81112f8c:	81113a58 	cmpnei	r4,r16,17641
81112f90:	811137f4 	orhi	r4,r16,17631
81112f94:	81113a58 	cmpnei	r4,r16,17641
81112f98:	81113a58 	cmpnei	r4,r16,17641
81112f9c:	81113a58 	cmpnei	r4,r16,17641
81112fa0:	81113a58 	cmpnei	r4,r16,17641
81112fa4:	81113a58 	cmpnei	r4,r16,17641
81112fa8:	81113a58 	cmpnei	r4,r16,17641
81112fac:	81113a58 	cmpnei	r4,r16,17641
81112fb0:	81113a58 	cmpnei	r4,r16,17641
81112fb4:	81113a58 	cmpnei	r4,r16,17641
81112fb8:	81113a58 	cmpnei	r4,r16,17641
81112fbc:	811138a4 	muli	r4,r16,17634
81112fc0:	811139e0 	cmpeqi	r4,r16,17639
81112fc4:	811131bc 	xorhi	r4,r16,17606
81112fc8:	811131bc 	xorhi	r4,r16,17606
81112fcc:	811131bc 	xorhi	r4,r16,17606
81112fd0:	81113a34 	orhi	r4,r16,17640
81112fd4:	811139e0 	cmpeqi	r4,r16,17639
81112fd8:	81113a58 	cmpnei	r4,r16,17641
81112fdc:	81113a58 	cmpnei	r4,r16,17641
81112fe0:	811139f0 	cmpltui	r4,r16,17639
81112fe4:	81113a58 	cmpnei	r4,r16,17641
81112fe8:	81113a00 	call	881113a0 <__reset+0x20f13a0>
81112fec:	811138e0 	cmpeqi	r4,r16,17635
81112ff0:	81113030 	cmpltui	r4,r16,17600
81112ff4:	81113900 	call	88111390 <__reset+0x20f1390>
81112ff8:	81113a58 	cmpnei	r4,r16,17641
81112ffc:	8111390c 	andi	r4,r16,17636
81113000:	81113a58 	cmpnei	r4,r16,17641
81113004:	81113968 	cmpgeui	r4,r16,17637
81113008:	81113a58 	cmpnei	r4,r16,17641
8111300c:	81113a58 	cmpnei	r4,r16,17641
81113010:	81113978 	rdprs	r4,r16,17637
81113014:	d9003117 	ldw	r4,196(sp)
81113018:	d8802d15 	stw	r2,180(sp)
8111301c:	0109c83a 	sub	r4,zero,r4
81113020:	d9003115 	stw	r4,196(sp)
81113024:	94800114 	ori	r18,r18,4
81113028:	bc400007 	ldb	r17,0(r23)
8111302c:	003f9706 	br	81112e8c <__reset+0xfb0f2e8c>
81113030:	00800c04 	movi	r2,48
81113034:	d9002d17 	ldw	r4,180(sp)
81113038:	d9402917 	ldw	r5,164(sp)
8111303c:	d8802705 	stb	r2,156(sp)
81113040:	00801e04 	movi	r2,120
81113044:	d8802745 	stb	r2,157(sp)
81113048:	d8002785 	stb	zero,158(sp)
8111304c:	20c00104 	addi	r3,r4,4
81113050:	25000017 	ldw	r20,0(r4)
81113054:	002d883a 	mov	r22,zero
81113058:	90800094 	ori	r2,r18,2
8111305c:	28028616 	blt	r5,zero,81113a78 <___svfprintf_internal_r+0xd44>
81113060:	00bfdfc4 	movi	r2,-129
81113064:	90a4703a 	and	r18,r18,r2
81113068:	d8c02d15 	stw	r3,180(sp)
8111306c:	94800094 	ori	r18,r18,2
81113070:	a002731e 	bne	r20,zero,81113a40 <___svfprintf_internal_r+0xd0c>
81113074:	00a04534 	movhi	r2,33044
81113078:	10b69c04 	addi	r2,r2,-9616
8111307c:	d8803a15 	stw	r2,232(sp)
81113080:	04401e04 	movi	r17,120
81113084:	d8c02917 	ldw	r3,164(sp)
81113088:	0039883a 	mov	fp,zero
8111308c:	1801d526 	beq	r3,zero,811137e4 <___svfprintf_internal_r+0xab0>
81113090:	0029883a 	mov	r20,zero
81113094:	002d883a 	mov	r22,zero
81113098:	0001f106 	br	81113860 <___svfprintf_internal_r+0xb2c>
8111309c:	d9402c17 	ldw	r5,176(sp)
811130a0:	d9801e04 	addi	r6,sp,120
811130a4:	9809883a 	mov	r4,r19
811130a8:	111f7f40 	call	8111f7f4 <__ssprint_r>
811130ac:	1000081e 	bne	r2,zero,811130d0 <___svfprintf_internal_r+0x39c>
811130b0:	da000404 	addi	r8,sp,16
811130b4:	003f6306 	br	81112e44 <__reset+0xfb0f2e44>
811130b8:	d8802017 	ldw	r2,128(sp)
811130bc:	10000426 	beq	r2,zero,811130d0 <___svfprintf_internal_r+0x39c>
811130c0:	d9402c17 	ldw	r5,176(sp)
811130c4:	d9003917 	ldw	r4,228(sp)
811130c8:	d9801e04 	addi	r6,sp,120
811130cc:	111f7f40 	call	8111f7f4 <__ssprint_r>
811130d0:	d8802c17 	ldw	r2,176(sp)
811130d4:	10c0030b 	ldhu	r3,12(r2)
811130d8:	d8802f17 	ldw	r2,188(sp)
811130dc:	18c0100c 	andi	r3,r3,64
811130e0:	1805f51e 	bne	r3,zero,811148b8 <___svfprintf_internal_r+0x1b84>
811130e4:	dfc04817 	ldw	ra,288(sp)
811130e8:	df004717 	ldw	fp,284(sp)
811130ec:	ddc04617 	ldw	r23,280(sp)
811130f0:	dd804517 	ldw	r22,276(sp)
811130f4:	dd404417 	ldw	r21,272(sp)
811130f8:	dd004317 	ldw	r20,268(sp)
811130fc:	dcc04217 	ldw	r19,264(sp)
81113100:	dc804117 	ldw	r18,260(sp)
81113104:	dc404017 	ldw	r17,256(sp)
81113108:	dc003f17 	ldw	r16,252(sp)
8111310c:	dec04904 	addi	sp,sp,292
81113110:	f800283a 	ret
81113114:	d8802d17 	ldw	r2,180(sp)
81113118:	d9002d17 	ldw	r4,180(sp)
8111311c:	10800017 	ldw	r2,0(r2)
81113120:	d8803115 	stw	r2,196(sp)
81113124:	20800104 	addi	r2,r4,4
81113128:	d9003117 	ldw	r4,196(sp)
8111312c:	203fb916 	blt	r4,zero,81113014 <__reset+0xfb0f3014>
81113130:	d8802d15 	stw	r2,180(sp)
81113134:	bc400007 	ldb	r17,0(r23)
81113138:	003f5406 	br	81112e8c <__reset+0xfb0f2e8c>
8111313c:	bc400007 	ldb	r17,0(r23)
81113140:	bac00044 	addi	r11,r23,1
81113144:	8a873926 	beq	r17,r10,81114e2c <___svfprintf_internal_r+0x20f8>
81113148:	88bff404 	addi	r2,r17,-48
8111314c:	0009883a 	mov	r4,zero
81113150:	30868836 	bltu	r6,r2,81114b74 <___svfprintf_internal_r+0x1e40>
81113154:	5c400007 	ldb	r17,0(r11)
81113158:	210002a4 	muli	r4,r4,10
8111315c:	5dc00044 	addi	r23,r11,1
81113160:	b817883a 	mov	r11,r23
81113164:	2089883a 	add	r4,r4,r2
81113168:	88bff404 	addi	r2,r17,-48
8111316c:	30bff92e 	bgeu	r6,r2,81113154 <__reset+0xfb0f3154>
81113170:	2005d716 	blt	r4,zero,811148d0 <___svfprintf_internal_r+0x1b9c>
81113174:	d9002915 	stw	r4,164(sp)
81113178:	003f4506 	br	81112e90 <__reset+0xfb0f2e90>
8111317c:	b809883a 	mov	r4,r23
81113180:	d8003115 	stw	zero,196(sp)
81113184:	88bff404 	addi	r2,r17,-48
81113188:	0017883a 	mov	r11,zero
8111318c:	24400007 	ldb	r17,0(r4)
81113190:	5ac002a4 	muli	r11,r11,10
81113194:	bdc00044 	addi	r23,r23,1
81113198:	b809883a 	mov	r4,r23
8111319c:	12d7883a 	add	r11,r2,r11
811131a0:	88bff404 	addi	r2,r17,-48
811131a4:	30bff92e 	bgeu	r6,r2,8111318c <__reset+0xfb0f318c>
811131a8:	dac03115 	stw	r11,196(sp)
811131ac:	003f3806 	br	81112e90 <__reset+0xfb0f2e90>
811131b0:	94802014 	ori	r18,r18,128
811131b4:	bc400007 	ldb	r17,0(r23)
811131b8:	003f3406 	br	81112e8c <__reset+0xfb0f2e8c>
811131bc:	18c03fcc 	andi	r3,r3,255
811131c0:	1807471e 	bne	r3,zero,81114ee0 <___svfprintf_internal_r+0x21ac>
811131c4:	9080020c 	andi	r2,r18,8
811131c8:	10047d26 	beq	r2,zero,811143c0 <___svfprintf_internal_r+0x168c>
811131cc:	d8c02d17 	ldw	r3,180(sp)
811131d0:	d9002d17 	ldw	r4,180(sp)
811131d4:	d9402d17 	ldw	r5,180(sp)
811131d8:	18c00017 	ldw	r3,0(r3)
811131dc:	21000117 	ldw	r4,4(r4)
811131e0:	29400204 	addi	r5,r5,8
811131e4:	d8c03615 	stw	r3,216(sp)
811131e8:	d9003715 	stw	r4,220(sp)
811131ec:	d9402d15 	stw	r5,180(sp)
811131f0:	d9003617 	ldw	r4,216(sp)
811131f4:	d9403717 	ldw	r5,220(sp)
811131f8:	da003e15 	stw	r8,248(sp)
811131fc:	04000044 	movi	r16,1
81113200:	111d6080 	call	8111d608 <__fpclassifyd>
81113204:	da003e17 	ldw	r8,248(sp)
81113208:	14044b1e 	bne	r2,r16,81114338 <___svfprintf_internal_r+0x1604>
8111320c:	d9003617 	ldw	r4,216(sp)
81113210:	d9403717 	ldw	r5,220(sp)
81113214:	000d883a 	mov	r6,zero
81113218:	000f883a 	mov	r7,zero
8111321c:	1125ab00 	call	81125ab0 <__ledf2>
81113220:	da003e17 	ldw	r8,248(sp)
81113224:	1005f316 	blt	r2,zero,811149f4 <___svfprintf_internal_r+0x1cc0>
81113228:	df002783 	ldbu	fp,158(sp)
8111322c:	008011c4 	movi	r2,71
81113230:	1445590e 	bge	r2,r17,81114798 <___svfprintf_internal_r+0x1a64>
81113234:	04204534 	movhi	r16,33044
81113238:	84369404 	addi	r16,r16,-9648
8111323c:	00c000c4 	movi	r3,3
81113240:	00bfdfc4 	movi	r2,-129
81113244:	d8c02a15 	stw	r3,168(sp)
81113248:	90a4703a 	and	r18,r18,r2
8111324c:	d8c02e15 	stw	r3,184(sp)
81113250:	d8002915 	stw	zero,164(sp)
81113254:	d8003215 	stw	zero,200(sp)
81113258:	00006606 	br	811133f4 <___svfprintf_internal_r+0x6c0>
8111325c:	94800214 	ori	r18,r18,8
81113260:	bc400007 	ldb	r17,0(r23)
81113264:	003f0906 	br	81112e8c <__reset+0xfb0f2e8c>
81113268:	18c03fcc 	andi	r3,r3,255
8111326c:	1807181e 	bne	r3,zero,81114ed0 <___svfprintf_internal_r+0x219c>
81113270:	94800414 	ori	r18,r18,16
81113274:	9080080c 	andi	r2,r18,32
81113278:	10039626 	beq	r2,zero,811140d4 <___svfprintf_internal_r+0x13a0>
8111327c:	d9402d17 	ldw	r5,180(sp)
81113280:	28800117 	ldw	r2,4(r5)
81113284:	2d000017 	ldw	r20,0(r5)
81113288:	29400204 	addi	r5,r5,8
8111328c:	d9402d15 	stw	r5,180(sp)
81113290:	102d883a 	mov	r22,r2
81113294:	10039816 	blt	r2,zero,811140f8 <___svfprintf_internal_r+0x13c4>
81113298:	d9402917 	ldw	r5,164(sp)
8111329c:	df002783 	ldbu	fp,158(sp)
811132a0:	2803ab16 	blt	r5,zero,81114150 <___svfprintf_internal_r+0x141c>
811132a4:	00ffdfc4 	movi	r3,-129
811132a8:	a584b03a 	or	r2,r20,r22
811132ac:	90e4703a 	and	r18,r18,r3
811132b0:	10014a26 	beq	r2,zero,811137dc <___svfprintf_internal_r+0xaa8>
811132b4:	b0034b26 	beq	r22,zero,81113fe4 <___svfprintf_internal_r+0x12b0>
811132b8:	dc402a15 	stw	r17,168(sp)
811132bc:	dc001e04 	addi	r16,sp,120
811132c0:	b023883a 	mov	r17,r22
811132c4:	402d883a 	mov	r22,r8
811132c8:	a009883a 	mov	r4,r20
811132cc:	880b883a 	mov	r5,r17
811132d0:	01800284 	movi	r6,10
811132d4:	000f883a 	mov	r7,zero
811132d8:	1123eb80 	call	81123eb8 <__umoddi3>
811132dc:	10800c04 	addi	r2,r2,48
811132e0:	843fffc4 	addi	r16,r16,-1
811132e4:	a009883a 	mov	r4,r20
811132e8:	880b883a 	mov	r5,r17
811132ec:	80800005 	stb	r2,0(r16)
811132f0:	01800284 	movi	r6,10
811132f4:	000f883a 	mov	r7,zero
811132f8:	11239380 	call	81123938 <__udivdi3>
811132fc:	1029883a 	mov	r20,r2
81113300:	10c4b03a 	or	r2,r2,r3
81113304:	1823883a 	mov	r17,r3
81113308:	103fef1e 	bne	r2,zero,811132c8 <__reset+0xfb0f32c8>
8111330c:	d8c02817 	ldw	r3,160(sp)
81113310:	dc402a17 	ldw	r17,168(sp)
81113314:	b011883a 	mov	r8,r22
81113318:	1c07c83a 	sub	r3,r3,r16
8111331c:	d8c02e15 	stw	r3,184(sp)
81113320:	00002e06 	br	811133dc <___svfprintf_internal_r+0x6a8>
81113324:	18c03fcc 	andi	r3,r3,255
81113328:	1806e71e 	bne	r3,zero,81114ec8 <___svfprintf_internal_r+0x2194>
8111332c:	94800414 	ori	r18,r18,16
81113330:	9080080c 	andi	r2,r18,32
81113334:	1002d426 	beq	r2,zero,81113e88 <___svfprintf_internal_r+0x1154>
81113338:	d9402d17 	ldw	r5,180(sp)
8111333c:	d8c02917 	ldw	r3,164(sp)
81113340:	d8002785 	stb	zero,158(sp)
81113344:	28800204 	addi	r2,r5,8
81113348:	2d000017 	ldw	r20,0(r5)
8111334c:	2d800117 	ldw	r22,4(r5)
81113350:	18041516 	blt	r3,zero,811143a8 <___svfprintf_internal_r+0x1674>
81113354:	013fdfc4 	movi	r4,-129
81113358:	a586b03a 	or	r3,r20,r22
8111335c:	d8802d15 	stw	r2,180(sp)
81113360:	9124703a 	and	r18,r18,r4
81113364:	1802d51e 	bne	r3,zero,81113ebc <___svfprintf_internal_r+0x1188>
81113368:	d9402917 	ldw	r5,164(sp)
8111336c:	0039883a 	mov	fp,zero
81113370:	2806be26 	beq	r5,zero,81114e6c <___svfprintf_internal_r+0x2138>
81113374:	0029883a 	mov	r20,zero
81113378:	002d883a 	mov	r22,zero
8111337c:	dc001e04 	addi	r16,sp,120
81113380:	a006d0fa 	srli	r3,r20,3
81113384:	b008977a 	slli	r4,r22,29
81113388:	b02cd0fa 	srli	r22,r22,3
8111338c:	a50001cc 	andi	r20,r20,7
81113390:	a0800c04 	addi	r2,r20,48
81113394:	843fffc4 	addi	r16,r16,-1
81113398:	20e8b03a 	or	r20,r4,r3
8111339c:	80800005 	stb	r2,0(r16)
811133a0:	a586b03a 	or	r3,r20,r22
811133a4:	183ff61e 	bne	r3,zero,81113380 <__reset+0xfb0f3380>
811133a8:	90c0004c 	andi	r3,r18,1
811133ac:	18013926 	beq	r3,zero,81113894 <___svfprintf_internal_r+0xb60>
811133b0:	10803fcc 	andi	r2,r2,255
811133b4:	1080201c 	xori	r2,r2,128
811133b8:	10bfe004 	addi	r2,r2,-128
811133bc:	00c00c04 	movi	r3,48
811133c0:	10c13426 	beq	r2,r3,81113894 <___svfprintf_internal_r+0xb60>
811133c4:	80ffffc5 	stb	r3,-1(r16)
811133c8:	d8c02817 	ldw	r3,160(sp)
811133cc:	80bfffc4 	addi	r2,r16,-1
811133d0:	1021883a 	mov	r16,r2
811133d4:	1887c83a 	sub	r3,r3,r2
811133d8:	d8c02e15 	stw	r3,184(sp)
811133dc:	d8802e17 	ldw	r2,184(sp)
811133e0:	d9002917 	ldw	r4,164(sp)
811133e4:	1100010e 	bge	r2,r4,811133ec <___svfprintf_internal_r+0x6b8>
811133e8:	2005883a 	mov	r2,r4
811133ec:	d8802a15 	stw	r2,168(sp)
811133f0:	d8003215 	stw	zero,200(sp)
811133f4:	e7003fcc 	andi	fp,fp,255
811133f8:	e700201c 	xori	fp,fp,128
811133fc:	e73fe004 	addi	fp,fp,-128
81113400:	e0000326 	beq	fp,zero,81113410 <___svfprintf_internal_r+0x6dc>
81113404:	d8c02a17 	ldw	r3,168(sp)
81113408:	18c00044 	addi	r3,r3,1
8111340c:	d8c02a15 	stw	r3,168(sp)
81113410:	90c0008c 	andi	r3,r18,2
81113414:	d8c02b15 	stw	r3,172(sp)
81113418:	18000326 	beq	r3,zero,81113428 <___svfprintf_internal_r+0x6f4>
8111341c:	d8c02a17 	ldw	r3,168(sp)
81113420:	18c00084 	addi	r3,r3,2
81113424:	d8c02a15 	stw	r3,168(sp)
81113428:	90c0210c 	andi	r3,r18,132
8111342c:	d8c03015 	stw	r3,192(sp)
81113430:	1801a11e 	bne	r3,zero,81113ab8 <___svfprintf_internal_r+0xd84>
81113434:	d9003117 	ldw	r4,196(sp)
81113438:	d8c02a17 	ldw	r3,168(sp)
8111343c:	20e9c83a 	sub	r20,r4,r3
81113440:	05019d0e 	bge	zero,r20,81113ab8 <___svfprintf_internal_r+0xd84>
81113444:	02400404 	movi	r9,16
81113448:	d8c02017 	ldw	r3,128(sp)
8111344c:	d8801f17 	ldw	r2,124(sp)
81113450:	4d051b0e 	bge	r9,r20,811148c0 <___svfprintf_internal_r+0x1b8c>
81113454:	01604534 	movhi	r5,33044
81113458:	2976a784 	addi	r5,r5,-9570
8111345c:	dc403c15 	stw	r17,240(sp)
81113460:	d9403515 	stw	r5,212(sp)
81113464:	a023883a 	mov	r17,r20
81113468:	482d883a 	mov	r22,r9
8111346c:	9029883a 	mov	r20,r18
81113470:	070001c4 	movi	fp,7
81113474:	8025883a 	mov	r18,r16
81113478:	dc002c17 	ldw	r16,176(sp)
8111347c:	00000306 	br	8111348c <___svfprintf_internal_r+0x758>
81113480:	8c7ffc04 	addi	r17,r17,-16
81113484:	42000204 	addi	r8,r8,8
81113488:	b440130e 	bge	r22,r17,811134d8 <___svfprintf_internal_r+0x7a4>
8111348c:	01204534 	movhi	r4,33044
81113490:	18c00404 	addi	r3,r3,16
81113494:	10800044 	addi	r2,r2,1
81113498:	2136a784 	addi	r4,r4,-9570
8111349c:	41000015 	stw	r4,0(r8)
811134a0:	45800115 	stw	r22,4(r8)
811134a4:	d8c02015 	stw	r3,128(sp)
811134a8:	d8801f15 	stw	r2,124(sp)
811134ac:	e0bff40e 	bge	fp,r2,81113480 <__reset+0xfb0f3480>
811134b0:	d9801e04 	addi	r6,sp,120
811134b4:	800b883a 	mov	r5,r16
811134b8:	9809883a 	mov	r4,r19
811134bc:	111f7f40 	call	8111f7f4 <__ssprint_r>
811134c0:	103f031e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
811134c4:	8c7ffc04 	addi	r17,r17,-16
811134c8:	d8c02017 	ldw	r3,128(sp)
811134cc:	d8801f17 	ldw	r2,124(sp)
811134d0:	da000404 	addi	r8,sp,16
811134d4:	b47fed16 	blt	r22,r17,8111348c <__reset+0xfb0f348c>
811134d8:	9021883a 	mov	r16,r18
811134dc:	a025883a 	mov	r18,r20
811134e0:	8829883a 	mov	r20,r17
811134e4:	dc403c17 	ldw	r17,240(sp)
811134e8:	d9403517 	ldw	r5,212(sp)
811134ec:	a0c7883a 	add	r3,r20,r3
811134f0:	10800044 	addi	r2,r2,1
811134f4:	41400015 	stw	r5,0(r8)
811134f8:	45000115 	stw	r20,4(r8)
811134fc:	d8c02015 	stw	r3,128(sp)
81113500:	d8801f15 	stw	r2,124(sp)
81113504:	010001c4 	movi	r4,7
81113508:	20829f16 	blt	r4,r2,81113f88 <___svfprintf_internal_r+0x1254>
8111350c:	df002787 	ldb	fp,158(sp)
81113510:	42000204 	addi	r8,r8,8
81113514:	e0000c26 	beq	fp,zero,81113548 <___svfprintf_internal_r+0x814>
81113518:	d8801f17 	ldw	r2,124(sp)
8111351c:	d9002784 	addi	r4,sp,158
81113520:	18c00044 	addi	r3,r3,1
81113524:	10800044 	addi	r2,r2,1
81113528:	41000015 	stw	r4,0(r8)
8111352c:	01000044 	movi	r4,1
81113530:	41000115 	stw	r4,4(r8)
81113534:	d8c02015 	stw	r3,128(sp)
81113538:	d8801f15 	stw	r2,124(sp)
8111353c:	010001c4 	movi	r4,7
81113540:	20823816 	blt	r4,r2,81113e24 <___svfprintf_internal_r+0x10f0>
81113544:	42000204 	addi	r8,r8,8
81113548:	d8802b17 	ldw	r2,172(sp)
8111354c:	10000c26 	beq	r2,zero,81113580 <___svfprintf_internal_r+0x84c>
81113550:	d8801f17 	ldw	r2,124(sp)
81113554:	d9002704 	addi	r4,sp,156
81113558:	18c00084 	addi	r3,r3,2
8111355c:	10800044 	addi	r2,r2,1
81113560:	41000015 	stw	r4,0(r8)
81113564:	01000084 	movi	r4,2
81113568:	41000115 	stw	r4,4(r8)
8111356c:	d8c02015 	stw	r3,128(sp)
81113570:	d8801f15 	stw	r2,124(sp)
81113574:	010001c4 	movi	r4,7
81113578:	20823216 	blt	r4,r2,81113e44 <___svfprintf_internal_r+0x1110>
8111357c:	42000204 	addi	r8,r8,8
81113580:	d9003017 	ldw	r4,192(sp)
81113584:	00802004 	movi	r2,128
81113588:	20819726 	beq	r4,r2,81113be8 <___svfprintf_internal_r+0xeb4>
8111358c:	d9402917 	ldw	r5,164(sp)
81113590:	d8802e17 	ldw	r2,184(sp)
81113594:	28adc83a 	sub	r22,r5,r2
81113598:	05802f0e 	bge	zero,r22,81113658 <___svfprintf_internal_r+0x924>
8111359c:	07000404 	movi	fp,16
811135a0:	d8801f17 	ldw	r2,124(sp)
811135a4:	e583c00e 	bge	fp,r22,811144a8 <___svfprintf_internal_r+0x1774>
811135a8:	01604534 	movhi	r5,33044
811135ac:	2976a384 	addi	r5,r5,-9586
811135b0:	dc402915 	stw	r17,164(sp)
811135b4:	d9402b15 	stw	r5,172(sp)
811135b8:	b023883a 	mov	r17,r22
811135bc:	050001c4 	movi	r20,7
811135c0:	902d883a 	mov	r22,r18
811135c4:	8025883a 	mov	r18,r16
811135c8:	dc002c17 	ldw	r16,176(sp)
811135cc:	00000306 	br	811135dc <___svfprintf_internal_r+0x8a8>
811135d0:	8c7ffc04 	addi	r17,r17,-16
811135d4:	42000204 	addi	r8,r8,8
811135d8:	e440110e 	bge	fp,r17,81113620 <___svfprintf_internal_r+0x8ec>
811135dc:	18c00404 	addi	r3,r3,16
811135e0:	10800044 	addi	r2,r2,1
811135e4:	45400015 	stw	r21,0(r8)
811135e8:	47000115 	stw	fp,4(r8)
811135ec:	d8c02015 	stw	r3,128(sp)
811135f0:	d8801f15 	stw	r2,124(sp)
811135f4:	a0bff60e 	bge	r20,r2,811135d0 <__reset+0xfb0f35d0>
811135f8:	d9801e04 	addi	r6,sp,120
811135fc:	800b883a 	mov	r5,r16
81113600:	9809883a 	mov	r4,r19
81113604:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113608:	103eb11e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
8111360c:	8c7ffc04 	addi	r17,r17,-16
81113610:	d8c02017 	ldw	r3,128(sp)
81113614:	d8801f17 	ldw	r2,124(sp)
81113618:	da000404 	addi	r8,sp,16
8111361c:	e47fef16 	blt	fp,r17,811135dc <__reset+0xfb0f35dc>
81113620:	9021883a 	mov	r16,r18
81113624:	b025883a 	mov	r18,r22
81113628:	882d883a 	mov	r22,r17
8111362c:	dc402917 	ldw	r17,164(sp)
81113630:	d9002b17 	ldw	r4,172(sp)
81113634:	1d87883a 	add	r3,r3,r22
81113638:	10800044 	addi	r2,r2,1
8111363c:	41000015 	stw	r4,0(r8)
81113640:	45800115 	stw	r22,4(r8)
81113644:	d8c02015 	stw	r3,128(sp)
81113648:	d8801f15 	stw	r2,124(sp)
8111364c:	010001c4 	movi	r4,7
81113650:	2081ec16 	blt	r4,r2,81113e04 <___svfprintf_internal_r+0x10d0>
81113654:	42000204 	addi	r8,r8,8
81113658:	9080400c 	andi	r2,r18,256
8111365c:	1001181e 	bne	r2,zero,81113ac0 <___svfprintf_internal_r+0xd8c>
81113660:	d9402e17 	ldw	r5,184(sp)
81113664:	d8801f17 	ldw	r2,124(sp)
81113668:	44000015 	stw	r16,0(r8)
8111366c:	1947883a 	add	r3,r3,r5
81113670:	10800044 	addi	r2,r2,1
81113674:	41400115 	stw	r5,4(r8)
81113678:	d8c02015 	stw	r3,128(sp)
8111367c:	d8801f15 	stw	r2,124(sp)
81113680:	010001c4 	movi	r4,7
81113684:	2081d116 	blt	r4,r2,81113dcc <___svfprintf_internal_r+0x1098>
81113688:	42000204 	addi	r8,r8,8
8111368c:	9480010c 	andi	r18,r18,4
81113690:	90003226 	beq	r18,zero,8111375c <___svfprintf_internal_r+0xa28>
81113694:	d9403117 	ldw	r5,196(sp)
81113698:	d8802a17 	ldw	r2,168(sp)
8111369c:	28a1c83a 	sub	r16,r5,r2
811136a0:	04002e0e 	bge	zero,r16,8111375c <___svfprintf_internal_r+0xa28>
811136a4:	04400404 	movi	r17,16
811136a8:	d8801f17 	ldw	r2,124(sp)
811136ac:	8c04b90e 	bge	r17,r16,81114994 <___svfprintf_internal_r+0x1c60>
811136b0:	01604534 	movhi	r5,33044
811136b4:	2976a784 	addi	r5,r5,-9570
811136b8:	d9403515 	stw	r5,212(sp)
811136bc:	048001c4 	movi	r18,7
811136c0:	dd002c17 	ldw	r20,176(sp)
811136c4:	00000306 	br	811136d4 <___svfprintf_internal_r+0x9a0>
811136c8:	843ffc04 	addi	r16,r16,-16
811136cc:	42000204 	addi	r8,r8,8
811136d0:	8c00130e 	bge	r17,r16,81113720 <___svfprintf_internal_r+0x9ec>
811136d4:	01204534 	movhi	r4,33044
811136d8:	18c00404 	addi	r3,r3,16
811136dc:	10800044 	addi	r2,r2,1
811136e0:	2136a784 	addi	r4,r4,-9570
811136e4:	41000015 	stw	r4,0(r8)
811136e8:	44400115 	stw	r17,4(r8)
811136ec:	d8c02015 	stw	r3,128(sp)
811136f0:	d8801f15 	stw	r2,124(sp)
811136f4:	90bff40e 	bge	r18,r2,811136c8 <__reset+0xfb0f36c8>
811136f8:	d9801e04 	addi	r6,sp,120
811136fc:	a00b883a 	mov	r5,r20
81113700:	9809883a 	mov	r4,r19
81113704:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113708:	103e711e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
8111370c:	843ffc04 	addi	r16,r16,-16
81113710:	d8c02017 	ldw	r3,128(sp)
81113714:	d8801f17 	ldw	r2,124(sp)
81113718:	da000404 	addi	r8,sp,16
8111371c:	8c3fed16 	blt	r17,r16,811136d4 <__reset+0xfb0f36d4>
81113720:	d9403517 	ldw	r5,212(sp)
81113724:	1c07883a 	add	r3,r3,r16
81113728:	10800044 	addi	r2,r2,1
8111372c:	41400015 	stw	r5,0(r8)
81113730:	44000115 	stw	r16,4(r8)
81113734:	d8c02015 	stw	r3,128(sp)
81113738:	d8801f15 	stw	r2,124(sp)
8111373c:	010001c4 	movi	r4,7
81113740:	2080060e 	bge	r4,r2,8111375c <___svfprintf_internal_r+0xa28>
81113744:	d9402c17 	ldw	r5,176(sp)
81113748:	d9801e04 	addi	r6,sp,120
8111374c:	9809883a 	mov	r4,r19
81113750:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113754:	103e5e1e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81113758:	d8c02017 	ldw	r3,128(sp)
8111375c:	d8803117 	ldw	r2,196(sp)
81113760:	d9002a17 	ldw	r4,168(sp)
81113764:	1100010e 	bge	r2,r4,8111376c <___svfprintf_internal_r+0xa38>
81113768:	2005883a 	mov	r2,r4
8111376c:	d9402f17 	ldw	r5,188(sp)
81113770:	288b883a 	add	r5,r5,r2
81113774:	d9402f15 	stw	r5,188(sp)
81113778:	18019c1e 	bne	r3,zero,81113dec <___svfprintf_internal_r+0x10b8>
8111377c:	b8800007 	ldb	r2,0(r23)
81113780:	d8001f15 	stw	zero,124(sp)
81113784:	da000404 	addi	r8,sp,16
81113788:	103d991e 	bne	r2,zero,81112df0 <__reset+0xfb0f2df0>
8111378c:	b821883a 	mov	r16,r23
81113790:	003daf06 	br	81112e50 <__reset+0xfb0f2e50>
81113794:	18c03fcc 	andi	r3,r3,255
81113798:	1805c71e 	bne	r3,zero,81114eb8 <___svfprintf_internal_r+0x2184>
8111379c:	94800414 	ori	r18,r18,16
811137a0:	9080080c 	andi	r2,r18,32
811137a4:	10020126 	beq	r2,zero,81113fac <___svfprintf_internal_r+0x1278>
811137a8:	d8802d17 	ldw	r2,180(sp)
811137ac:	d9002917 	ldw	r4,164(sp)
811137b0:	d8002785 	stb	zero,158(sp)
811137b4:	10c00204 	addi	r3,r2,8
811137b8:	15000017 	ldw	r20,0(r2)
811137bc:	15800117 	ldw	r22,4(r2)
811137c0:	20038e16 	blt	r4,zero,811145fc <___svfprintf_internal_r+0x18c8>
811137c4:	013fdfc4 	movi	r4,-129
811137c8:	a584b03a 	or	r2,r20,r22
811137cc:	d8c02d15 	stw	r3,180(sp)
811137d0:	9124703a 	and	r18,r18,r4
811137d4:	0039883a 	mov	fp,zero
811137d8:	103eb61e 	bne	r2,zero,811132b4 <__reset+0xfb0f32b4>
811137dc:	d8802917 	ldw	r2,164(sp)
811137e0:	1002c81e 	bne	r2,zero,81114304 <___svfprintf_internal_r+0x15d0>
811137e4:	d8002915 	stw	zero,164(sp)
811137e8:	d8002e15 	stw	zero,184(sp)
811137ec:	dc001e04 	addi	r16,sp,120
811137f0:	003efa06 	br	811133dc <__reset+0xfb0f33dc>
811137f4:	18c03fcc 	andi	r3,r3,255
811137f8:	1805ad1e 	bne	r3,zero,81114eb0 <___svfprintf_internal_r+0x217c>
811137fc:	01604534 	movhi	r5,33044
81113800:	29769704 	addi	r5,r5,-9636
81113804:	d9403a15 	stw	r5,232(sp)
81113808:	9080080c 	andi	r2,r18,32
8111380c:	10006126 	beq	r2,zero,81113994 <___svfprintf_internal_r+0xc60>
81113810:	d8802d17 	ldw	r2,180(sp)
81113814:	15000017 	ldw	r20,0(r2)
81113818:	15800117 	ldw	r22,4(r2)
8111381c:	10800204 	addi	r2,r2,8
81113820:	d8802d15 	stw	r2,180(sp)
81113824:	9080004c 	andi	r2,r18,1
81113828:	10018e26 	beq	r2,zero,81113e64 <___svfprintf_internal_r+0x1130>
8111382c:	a584b03a 	or	r2,r20,r22
81113830:	10030926 	beq	r2,zero,81114458 <___svfprintf_internal_r+0x1724>
81113834:	d8c02917 	ldw	r3,164(sp)
81113838:	00800c04 	movi	r2,48
8111383c:	d8802705 	stb	r2,156(sp)
81113840:	dc402745 	stb	r17,157(sp)
81113844:	d8002785 	stb	zero,158(sp)
81113848:	90800094 	ori	r2,r18,2
8111384c:	18048716 	blt	r3,zero,81114a6c <___svfprintf_internal_r+0x1d38>
81113850:	00bfdfc4 	movi	r2,-129
81113854:	90a4703a 	and	r18,r18,r2
81113858:	94800094 	ori	r18,r18,2
8111385c:	0039883a 	mov	fp,zero
81113860:	d9003a17 	ldw	r4,232(sp)
81113864:	dc001e04 	addi	r16,sp,120
81113868:	a08003cc 	andi	r2,r20,15
8111386c:	b006973a 	slli	r3,r22,28
81113870:	2085883a 	add	r2,r4,r2
81113874:	a028d13a 	srli	r20,r20,4
81113878:	10800003 	ldbu	r2,0(r2)
8111387c:	b02cd13a 	srli	r22,r22,4
81113880:	843fffc4 	addi	r16,r16,-1
81113884:	1d28b03a 	or	r20,r3,r20
81113888:	80800005 	stb	r2,0(r16)
8111388c:	a584b03a 	or	r2,r20,r22
81113890:	103ff51e 	bne	r2,zero,81113868 <__reset+0xfb0f3868>
81113894:	d8c02817 	ldw	r3,160(sp)
81113898:	1c07c83a 	sub	r3,r3,r16
8111389c:	d8c02e15 	stw	r3,184(sp)
811138a0:	003ece06 	br	811133dc <__reset+0xfb0f33dc>
811138a4:	d8c02d17 	ldw	r3,180(sp)
811138a8:	d9002d17 	ldw	r4,180(sp)
811138ac:	d8002785 	stb	zero,158(sp)
811138b0:	18800017 	ldw	r2,0(r3)
811138b4:	21000104 	addi	r4,r4,4
811138b8:	00c00044 	movi	r3,1
811138bc:	d8c02a15 	stw	r3,168(sp)
811138c0:	d8801405 	stb	r2,80(sp)
811138c4:	d9002d15 	stw	r4,180(sp)
811138c8:	d8c02e15 	stw	r3,184(sp)
811138cc:	d8002915 	stw	zero,164(sp)
811138d0:	d8003215 	stw	zero,200(sp)
811138d4:	dc001404 	addi	r16,sp,80
811138d8:	0039883a 	mov	fp,zero
811138dc:	003ecc06 	br	81113410 <__reset+0xfb0f3410>
811138e0:	18c03fcc 	andi	r3,r3,255
811138e4:	183e9226 	beq	r3,zero,81113330 <__reset+0xfb0f3330>
811138e8:	d9c02785 	stb	r7,158(sp)
811138ec:	003e9006 	br	81113330 <__reset+0xfb0f3330>
811138f0:	00c00044 	movi	r3,1
811138f4:	01c00ac4 	movi	r7,43
811138f8:	bc400007 	ldb	r17,0(r23)
811138fc:	003d6306 	br	81112e8c <__reset+0xfb0f2e8c>
81113900:	94800814 	ori	r18,r18,32
81113904:	bc400007 	ldb	r17,0(r23)
81113908:	003d6006 	br	81112e8c <__reset+0xfb0f2e8c>
8111390c:	d8c02d17 	ldw	r3,180(sp)
81113910:	d8002785 	stb	zero,158(sp)
81113914:	1c000017 	ldw	r16,0(r3)
81113918:	1d000104 	addi	r20,r3,4
8111391c:	80040f26 	beq	r16,zero,8111495c <___svfprintf_internal_r+0x1c28>
81113920:	d9002917 	ldw	r4,164(sp)
81113924:	2003dc16 	blt	r4,zero,81114898 <___svfprintf_internal_r+0x1b64>
81113928:	200d883a 	mov	r6,r4
8111392c:	000b883a 	mov	r5,zero
81113930:	8009883a 	mov	r4,r16
81113934:	da003e15 	stw	r8,248(sp)
81113938:	111bd980 	call	8111bd98 <memchr>
8111393c:	da003e17 	ldw	r8,248(sp)
81113940:	10045826 	beq	r2,zero,81114aa4 <___svfprintf_internal_r+0x1d70>
81113944:	1405c83a 	sub	r2,r2,r16
81113948:	d8802e15 	stw	r2,184(sp)
8111394c:	1003d816 	blt	r2,zero,811148b0 <___svfprintf_internal_r+0x1b7c>
81113950:	df002783 	ldbu	fp,158(sp)
81113954:	d8802a15 	stw	r2,168(sp)
81113958:	dd002d15 	stw	r20,180(sp)
8111395c:	d8002915 	stw	zero,164(sp)
81113960:	d8003215 	stw	zero,200(sp)
81113964:	003ea306 	br	811133f4 <__reset+0xfb0f33f4>
81113968:	18c03fcc 	andi	r3,r3,255
8111396c:	183f8c26 	beq	r3,zero,811137a0 <__reset+0xfb0f37a0>
81113970:	d9c02785 	stb	r7,158(sp)
81113974:	003f8a06 	br	811137a0 <__reset+0xfb0f37a0>
81113978:	18c03fcc 	andi	r3,r3,255
8111397c:	1805631e 	bne	r3,zero,81114f0c <___svfprintf_internal_r+0x21d8>
81113980:	01604534 	movhi	r5,33044
81113984:	29769c04 	addi	r5,r5,-9616
81113988:	d9403a15 	stw	r5,232(sp)
8111398c:	9080080c 	andi	r2,r18,32
81113990:	103f9f1e 	bne	r2,zero,81113810 <__reset+0xfb0f3810>
81113994:	9080040c 	andi	r2,r18,16
81113998:	10029c26 	beq	r2,zero,8111440c <___svfprintf_internal_r+0x16d8>
8111399c:	d8c02d17 	ldw	r3,180(sp)
811139a0:	002d883a 	mov	r22,zero
811139a4:	1d000017 	ldw	r20,0(r3)
811139a8:	18c00104 	addi	r3,r3,4
811139ac:	d8c02d15 	stw	r3,180(sp)
811139b0:	003f9c06 	br	81113824 <__reset+0xfb0f3824>
811139b4:	94800054 	ori	r18,r18,1
811139b8:	bc400007 	ldb	r17,0(r23)
811139bc:	003d3306 	br	81112e8c <__reset+0xfb0f2e8c>
811139c0:	38803fcc 	andi	r2,r7,255
811139c4:	1080201c 	xori	r2,r2,128
811139c8:	10bfe004 	addi	r2,r2,-128
811139cc:	1002971e 	bne	r2,zero,8111442c <___svfprintf_internal_r+0x16f8>
811139d0:	00c00044 	movi	r3,1
811139d4:	01c00804 	movi	r7,32
811139d8:	bc400007 	ldb	r17,0(r23)
811139dc:	003d2b06 	br	81112e8c <__reset+0xfb0f2e8c>
811139e0:	18c03fcc 	andi	r3,r3,255
811139e4:	183e2326 	beq	r3,zero,81113274 <__reset+0xfb0f3274>
811139e8:	d9c02785 	stb	r7,158(sp)
811139ec:	003e2106 	br	81113274 <__reset+0xfb0f3274>
811139f0:	bc400007 	ldb	r17,0(r23)
811139f4:	8a430426 	beq	r17,r9,81114608 <___svfprintf_internal_r+0x18d4>
811139f8:	94800414 	ori	r18,r18,16
811139fc:	003d2306 	br	81112e8c <__reset+0xfb0f2e8c>
81113a00:	18c03fcc 	andi	r3,r3,255
81113a04:	18053f1e 	bne	r3,zero,81114f04 <___svfprintf_internal_r+0x21d0>
81113a08:	9080080c 	andi	r2,r18,32
81113a0c:	10028926 	beq	r2,zero,81114434 <___svfprintf_internal_r+0x1700>
81113a10:	d9402d17 	ldw	r5,180(sp)
81113a14:	d9002f17 	ldw	r4,188(sp)
81113a18:	28800017 	ldw	r2,0(r5)
81113a1c:	2007d7fa 	srai	r3,r4,31
81113a20:	29400104 	addi	r5,r5,4
81113a24:	d9402d15 	stw	r5,180(sp)
81113a28:	11000015 	stw	r4,0(r2)
81113a2c:	10c00115 	stw	r3,4(r2)
81113a30:	003ced06 	br	81112de8 <__reset+0xfb0f2de8>
81113a34:	94801014 	ori	r18,r18,64
81113a38:	bc400007 	ldb	r17,0(r23)
81113a3c:	003d1306 	br	81112e8c <__reset+0xfb0f2e8c>
81113a40:	01204534 	movhi	r4,33044
81113a44:	21369c04 	addi	r4,r4,-9616
81113a48:	0039883a 	mov	fp,zero
81113a4c:	d9003a15 	stw	r4,232(sp)
81113a50:	04401e04 	movi	r17,120
81113a54:	003f8206 	br	81113860 <__reset+0xfb0f3860>
81113a58:	18c03fcc 	andi	r3,r3,255
81113a5c:	1805221e 	bne	r3,zero,81114ee8 <___svfprintf_internal_r+0x21b4>
81113a60:	883d9526 	beq	r17,zero,811130b8 <__reset+0xfb0f30b8>
81113a64:	00c00044 	movi	r3,1
81113a68:	d8c02a15 	stw	r3,168(sp)
81113a6c:	dc401405 	stb	r17,80(sp)
81113a70:	d8002785 	stb	zero,158(sp)
81113a74:	003f9406 	br	811138c8 <__reset+0xfb0f38c8>
81113a78:	01204534 	movhi	r4,33044
81113a7c:	21369c04 	addi	r4,r4,-9616
81113a80:	d9003a15 	stw	r4,232(sp)
81113a84:	d8c02d15 	stw	r3,180(sp)
81113a88:	1025883a 	mov	r18,r2
81113a8c:	04401e04 	movi	r17,120
81113a90:	a584b03a 	or	r2,r20,r22
81113a94:	1000fa1e 	bne	r2,zero,81113e80 <___svfprintf_internal_r+0x114c>
81113a98:	0039883a 	mov	fp,zero
81113a9c:	00800084 	movi	r2,2
81113aa0:	10803fcc 	andi	r2,r2,255
81113aa4:	00c00044 	movi	r3,1
81113aa8:	10c21626 	beq	r2,r3,81114304 <___svfprintf_internal_r+0x15d0>
81113aac:	00c00084 	movi	r3,2
81113ab0:	10fe301e 	bne	r2,r3,81113374 <__reset+0xfb0f3374>
81113ab4:	003d7606 	br	81113090 <__reset+0xfb0f3090>
81113ab8:	d8c02017 	ldw	r3,128(sp)
81113abc:	003e9506 	br	81113514 <__reset+0xfb0f3514>
81113ac0:	00801944 	movi	r2,101
81113ac4:	14407c0e 	bge	r2,r17,81113cb8 <___svfprintf_internal_r+0xf84>
81113ac8:	d9003617 	ldw	r4,216(sp)
81113acc:	d9403717 	ldw	r5,220(sp)
81113ad0:	000d883a 	mov	r6,zero
81113ad4:	000f883a 	mov	r7,zero
81113ad8:	d8c03d15 	stw	r3,244(sp)
81113adc:	da003e15 	stw	r8,248(sp)
81113ae0:	112594c0 	call	8112594c <__eqdf2>
81113ae4:	d8c03d17 	ldw	r3,244(sp)
81113ae8:	da003e17 	ldw	r8,248(sp)
81113aec:	1000f51e 	bne	r2,zero,81113ec4 <___svfprintf_internal_r+0x1190>
81113af0:	d8801f17 	ldw	r2,124(sp)
81113af4:	01204534 	movhi	r4,33044
81113af8:	2136a304 	addi	r4,r4,-9588
81113afc:	18c00044 	addi	r3,r3,1
81113b00:	10800044 	addi	r2,r2,1
81113b04:	41000015 	stw	r4,0(r8)
81113b08:	01000044 	movi	r4,1
81113b0c:	41000115 	stw	r4,4(r8)
81113b10:	d8c02015 	stw	r3,128(sp)
81113b14:	d8801f15 	stw	r2,124(sp)
81113b18:	010001c4 	movi	r4,7
81113b1c:	20826616 	blt	r4,r2,811144b8 <___svfprintf_internal_r+0x1784>
81113b20:	42000204 	addi	r8,r8,8
81113b24:	d8802617 	ldw	r2,152(sp)
81113b28:	d9403317 	ldw	r5,204(sp)
81113b2c:	11400216 	blt	r2,r5,81113b38 <___svfprintf_internal_r+0xe04>
81113b30:	9080004c 	andi	r2,r18,1
81113b34:	103ed526 	beq	r2,zero,8111368c <__reset+0xfb0f368c>
81113b38:	d8803817 	ldw	r2,224(sp)
81113b3c:	d9003417 	ldw	r4,208(sp)
81113b40:	d9403817 	ldw	r5,224(sp)
81113b44:	1887883a 	add	r3,r3,r2
81113b48:	d8801f17 	ldw	r2,124(sp)
81113b4c:	41000015 	stw	r4,0(r8)
81113b50:	41400115 	stw	r5,4(r8)
81113b54:	10800044 	addi	r2,r2,1
81113b58:	d8c02015 	stw	r3,128(sp)
81113b5c:	d8801f15 	stw	r2,124(sp)
81113b60:	010001c4 	movi	r4,7
81113b64:	2082af16 	blt	r4,r2,81114624 <___svfprintf_internal_r+0x18f0>
81113b68:	42000204 	addi	r8,r8,8
81113b6c:	d8803317 	ldw	r2,204(sp)
81113b70:	143fffc4 	addi	r16,r2,-1
81113b74:	043ec50e 	bge	zero,r16,8111368c <__reset+0xfb0f368c>
81113b78:	04400404 	movi	r17,16
81113b7c:	d8801f17 	ldw	r2,124(sp)
81113b80:	8c00860e 	bge	r17,r16,81113d9c <___svfprintf_internal_r+0x1068>
81113b84:	01604534 	movhi	r5,33044
81113b88:	2976a384 	addi	r5,r5,-9586
81113b8c:	d9402b15 	stw	r5,172(sp)
81113b90:	058001c4 	movi	r22,7
81113b94:	dd002c17 	ldw	r20,176(sp)
81113b98:	00000306 	br	81113ba8 <___svfprintf_internal_r+0xe74>
81113b9c:	42000204 	addi	r8,r8,8
81113ba0:	843ffc04 	addi	r16,r16,-16
81113ba4:	8c00800e 	bge	r17,r16,81113da8 <___svfprintf_internal_r+0x1074>
81113ba8:	18c00404 	addi	r3,r3,16
81113bac:	10800044 	addi	r2,r2,1
81113bb0:	45400015 	stw	r21,0(r8)
81113bb4:	44400115 	stw	r17,4(r8)
81113bb8:	d8c02015 	stw	r3,128(sp)
81113bbc:	d8801f15 	stw	r2,124(sp)
81113bc0:	b0bff60e 	bge	r22,r2,81113b9c <__reset+0xfb0f3b9c>
81113bc4:	d9801e04 	addi	r6,sp,120
81113bc8:	a00b883a 	mov	r5,r20
81113bcc:	9809883a 	mov	r4,r19
81113bd0:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113bd4:	103d3e1e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81113bd8:	d8c02017 	ldw	r3,128(sp)
81113bdc:	d8801f17 	ldw	r2,124(sp)
81113be0:	da000404 	addi	r8,sp,16
81113be4:	003fee06 	br	81113ba0 <__reset+0xfb0f3ba0>
81113be8:	d9403117 	ldw	r5,196(sp)
81113bec:	d8802a17 	ldw	r2,168(sp)
81113bf0:	28adc83a 	sub	r22,r5,r2
81113bf4:	05be650e 	bge	zero,r22,8111358c <__reset+0xfb0f358c>
81113bf8:	07000404 	movi	fp,16
81113bfc:	d8801f17 	ldw	r2,124(sp)
81113c00:	e583a20e 	bge	fp,r22,81114a8c <___svfprintf_internal_r+0x1d58>
81113c04:	01604534 	movhi	r5,33044
81113c08:	2976a384 	addi	r5,r5,-9586
81113c0c:	dc403015 	stw	r17,192(sp)
81113c10:	d9402b15 	stw	r5,172(sp)
81113c14:	b023883a 	mov	r17,r22
81113c18:	050001c4 	movi	r20,7
81113c1c:	902d883a 	mov	r22,r18
81113c20:	8025883a 	mov	r18,r16
81113c24:	dc002c17 	ldw	r16,176(sp)
81113c28:	00000306 	br	81113c38 <___svfprintf_internal_r+0xf04>
81113c2c:	8c7ffc04 	addi	r17,r17,-16
81113c30:	42000204 	addi	r8,r8,8
81113c34:	e440110e 	bge	fp,r17,81113c7c <___svfprintf_internal_r+0xf48>
81113c38:	18c00404 	addi	r3,r3,16
81113c3c:	10800044 	addi	r2,r2,1
81113c40:	45400015 	stw	r21,0(r8)
81113c44:	47000115 	stw	fp,4(r8)
81113c48:	d8c02015 	stw	r3,128(sp)
81113c4c:	d8801f15 	stw	r2,124(sp)
81113c50:	a0bff60e 	bge	r20,r2,81113c2c <__reset+0xfb0f3c2c>
81113c54:	d9801e04 	addi	r6,sp,120
81113c58:	800b883a 	mov	r5,r16
81113c5c:	9809883a 	mov	r4,r19
81113c60:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113c64:	103d1a1e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81113c68:	8c7ffc04 	addi	r17,r17,-16
81113c6c:	d8c02017 	ldw	r3,128(sp)
81113c70:	d8801f17 	ldw	r2,124(sp)
81113c74:	da000404 	addi	r8,sp,16
81113c78:	e47fef16 	blt	fp,r17,81113c38 <__reset+0xfb0f3c38>
81113c7c:	9021883a 	mov	r16,r18
81113c80:	b025883a 	mov	r18,r22
81113c84:	882d883a 	mov	r22,r17
81113c88:	dc403017 	ldw	r17,192(sp)
81113c8c:	d9002b17 	ldw	r4,172(sp)
81113c90:	1d87883a 	add	r3,r3,r22
81113c94:	10800044 	addi	r2,r2,1
81113c98:	41000015 	stw	r4,0(r8)
81113c9c:	45800115 	stw	r22,4(r8)
81113ca0:	d8c02015 	stw	r3,128(sp)
81113ca4:	d8801f15 	stw	r2,124(sp)
81113ca8:	010001c4 	movi	r4,7
81113cac:	20819a16 	blt	r4,r2,81114318 <___svfprintf_internal_r+0x15e4>
81113cb0:	42000204 	addi	r8,r8,8
81113cb4:	003e3506 	br	8111358c <__reset+0xfb0f358c>
81113cb8:	d9403317 	ldw	r5,204(sp)
81113cbc:	00800044 	movi	r2,1
81113cc0:	18c00044 	addi	r3,r3,1
81113cc4:	1141710e 	bge	r2,r5,8111428c <___svfprintf_internal_r+0x1558>
81113cc8:	dc401f17 	ldw	r17,124(sp)
81113ccc:	00800044 	movi	r2,1
81113cd0:	40800115 	stw	r2,4(r8)
81113cd4:	8c400044 	addi	r17,r17,1
81113cd8:	44000015 	stw	r16,0(r8)
81113cdc:	d8c02015 	stw	r3,128(sp)
81113ce0:	dc401f15 	stw	r17,124(sp)
81113ce4:	008001c4 	movi	r2,7
81113ce8:	14417416 	blt	r2,r17,811142bc <___svfprintf_internal_r+0x1588>
81113cec:	42000204 	addi	r8,r8,8
81113cf0:	d8803817 	ldw	r2,224(sp)
81113cf4:	d9003417 	ldw	r4,208(sp)
81113cf8:	8c400044 	addi	r17,r17,1
81113cfc:	10c7883a 	add	r3,r2,r3
81113d00:	40800115 	stw	r2,4(r8)
81113d04:	41000015 	stw	r4,0(r8)
81113d08:	d8c02015 	stw	r3,128(sp)
81113d0c:	dc401f15 	stw	r17,124(sp)
81113d10:	008001c4 	movi	r2,7
81113d14:	14417216 	blt	r2,r17,811142e0 <___svfprintf_internal_r+0x15ac>
81113d18:	45800204 	addi	r22,r8,8
81113d1c:	d9003617 	ldw	r4,216(sp)
81113d20:	d9403717 	ldw	r5,220(sp)
81113d24:	000d883a 	mov	r6,zero
81113d28:	000f883a 	mov	r7,zero
81113d2c:	d8c03d15 	stw	r3,244(sp)
81113d30:	112594c0 	call	8112594c <__eqdf2>
81113d34:	d8c03d17 	ldw	r3,244(sp)
81113d38:	1000b326 	beq	r2,zero,81114008 <___svfprintf_internal_r+0x12d4>
81113d3c:	d9403317 	ldw	r5,204(sp)
81113d40:	84000044 	addi	r16,r16,1
81113d44:	8c400044 	addi	r17,r17,1
81113d48:	28bfffc4 	addi	r2,r5,-1
81113d4c:	1887883a 	add	r3,r3,r2
81113d50:	b0800115 	stw	r2,4(r22)
81113d54:	b4000015 	stw	r16,0(r22)
81113d58:	d8c02015 	stw	r3,128(sp)
81113d5c:	dc401f15 	stw	r17,124(sp)
81113d60:	008001c4 	movi	r2,7
81113d64:	1440d216 	blt	r2,r17,811140b0 <___svfprintf_internal_r+0x137c>
81113d68:	b5800204 	addi	r22,r22,8
81113d6c:	d9003b17 	ldw	r4,236(sp)
81113d70:	df0022c4 	addi	fp,sp,139
81113d74:	8c400044 	addi	r17,r17,1
81113d78:	20c7883a 	add	r3,r4,r3
81113d7c:	b7000015 	stw	fp,0(r22)
81113d80:	b1000115 	stw	r4,4(r22)
81113d84:	d8c02015 	stw	r3,128(sp)
81113d88:	dc401f15 	stw	r17,124(sp)
81113d8c:	008001c4 	movi	r2,7
81113d90:	14400e16 	blt	r2,r17,81113dcc <___svfprintf_internal_r+0x1098>
81113d94:	b2000204 	addi	r8,r22,8
81113d98:	003e3c06 	br	8111368c <__reset+0xfb0f368c>
81113d9c:	01204534 	movhi	r4,33044
81113da0:	2136a384 	addi	r4,r4,-9586
81113da4:	d9002b15 	stw	r4,172(sp)
81113da8:	d9002b17 	ldw	r4,172(sp)
81113dac:	1c07883a 	add	r3,r3,r16
81113db0:	44000115 	stw	r16,4(r8)
81113db4:	41000015 	stw	r4,0(r8)
81113db8:	10800044 	addi	r2,r2,1
81113dbc:	d8c02015 	stw	r3,128(sp)
81113dc0:	d8801f15 	stw	r2,124(sp)
81113dc4:	010001c4 	movi	r4,7
81113dc8:	20be2f0e 	bge	r4,r2,81113688 <__reset+0xfb0f3688>
81113dcc:	d9402c17 	ldw	r5,176(sp)
81113dd0:	d9801e04 	addi	r6,sp,120
81113dd4:	9809883a 	mov	r4,r19
81113dd8:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113ddc:	103cbc1e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81113de0:	d8c02017 	ldw	r3,128(sp)
81113de4:	da000404 	addi	r8,sp,16
81113de8:	003e2806 	br	8111368c <__reset+0xfb0f368c>
81113dec:	d9402c17 	ldw	r5,176(sp)
81113df0:	d9801e04 	addi	r6,sp,120
81113df4:	9809883a 	mov	r4,r19
81113df8:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113dfc:	103e5f26 	beq	r2,zero,8111377c <__reset+0xfb0f377c>
81113e00:	003cb306 	br	811130d0 <__reset+0xfb0f30d0>
81113e04:	d9402c17 	ldw	r5,176(sp)
81113e08:	d9801e04 	addi	r6,sp,120
81113e0c:	9809883a 	mov	r4,r19
81113e10:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113e14:	103cae1e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81113e18:	d8c02017 	ldw	r3,128(sp)
81113e1c:	da000404 	addi	r8,sp,16
81113e20:	003e0d06 	br	81113658 <__reset+0xfb0f3658>
81113e24:	d9402c17 	ldw	r5,176(sp)
81113e28:	d9801e04 	addi	r6,sp,120
81113e2c:	9809883a 	mov	r4,r19
81113e30:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113e34:	103ca61e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81113e38:	d8c02017 	ldw	r3,128(sp)
81113e3c:	da000404 	addi	r8,sp,16
81113e40:	003dc106 	br	81113548 <__reset+0xfb0f3548>
81113e44:	d9402c17 	ldw	r5,176(sp)
81113e48:	d9801e04 	addi	r6,sp,120
81113e4c:	9809883a 	mov	r4,r19
81113e50:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113e54:	103c9e1e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81113e58:	d8c02017 	ldw	r3,128(sp)
81113e5c:	da000404 	addi	r8,sp,16
81113e60:	003dc706 	br	81113580 <__reset+0xfb0f3580>
81113e64:	d8802917 	ldw	r2,164(sp)
81113e68:	d8002785 	stb	zero,158(sp)
81113e6c:	103f0816 	blt	r2,zero,81113a90 <__reset+0xfb0f3a90>
81113e70:	00ffdfc4 	movi	r3,-129
81113e74:	a584b03a 	or	r2,r20,r22
81113e78:	90e4703a 	and	r18,r18,r3
81113e7c:	103c8126 	beq	r2,zero,81113084 <__reset+0xfb0f3084>
81113e80:	0039883a 	mov	fp,zero
81113e84:	003e7606 	br	81113860 <__reset+0xfb0f3860>
81113e88:	9080040c 	andi	r2,r18,16
81113e8c:	10013d26 	beq	r2,zero,81114384 <___svfprintf_internal_r+0x1650>
81113e90:	d9002d17 	ldw	r4,180(sp)
81113e94:	d9402917 	ldw	r5,164(sp)
81113e98:	d8002785 	stb	zero,158(sp)
81113e9c:	20800104 	addi	r2,r4,4
81113ea0:	25000017 	ldw	r20,0(r4)
81113ea4:	002d883a 	mov	r22,zero
81113ea8:	28013f16 	blt	r5,zero,811143a8 <___svfprintf_internal_r+0x1674>
81113eac:	00ffdfc4 	movi	r3,-129
81113eb0:	d8802d15 	stw	r2,180(sp)
81113eb4:	90e4703a 	and	r18,r18,r3
81113eb8:	a03d2b26 	beq	r20,zero,81113368 <__reset+0xfb0f3368>
81113ebc:	0039883a 	mov	fp,zero
81113ec0:	003d2e06 	br	8111337c <__reset+0xfb0f337c>
81113ec4:	dc402617 	ldw	r17,152(sp)
81113ec8:	0441830e 	bge	zero,r17,811144d8 <___svfprintf_internal_r+0x17a4>
81113ecc:	dc403217 	ldw	r17,200(sp)
81113ed0:	d8803317 	ldw	r2,204(sp)
81113ed4:	1440010e 	bge	r2,r17,81113edc <___svfprintf_internal_r+0x11a8>
81113ed8:	1023883a 	mov	r17,r2
81113edc:	04400a0e 	bge	zero,r17,81113f08 <___svfprintf_internal_r+0x11d4>
81113ee0:	d8801f17 	ldw	r2,124(sp)
81113ee4:	1c47883a 	add	r3,r3,r17
81113ee8:	44000015 	stw	r16,0(r8)
81113eec:	10800044 	addi	r2,r2,1
81113ef0:	44400115 	stw	r17,4(r8)
81113ef4:	d8c02015 	stw	r3,128(sp)
81113ef8:	d8801f15 	stw	r2,124(sp)
81113efc:	010001c4 	movi	r4,7
81113f00:	20827516 	blt	r4,r2,811148d8 <___svfprintf_internal_r+0x1ba4>
81113f04:	42000204 	addi	r8,r8,8
81113f08:	88027b16 	blt	r17,zero,811148f8 <___svfprintf_internal_r+0x1bc4>
81113f0c:	d9003217 	ldw	r4,200(sp)
81113f10:	2463c83a 	sub	r17,r4,r17
81113f14:	0440990e 	bge	zero,r17,8111417c <___svfprintf_internal_r+0x1448>
81113f18:	05800404 	movi	r22,16
81113f1c:	d8801f17 	ldw	r2,124(sp)
81113f20:	b441530e 	bge	r22,r17,81114470 <___svfprintf_internal_r+0x173c>
81113f24:	01204534 	movhi	r4,33044
81113f28:	2136a384 	addi	r4,r4,-9586
81113f2c:	d9002b15 	stw	r4,172(sp)
81113f30:	070001c4 	movi	fp,7
81113f34:	dd002c17 	ldw	r20,176(sp)
81113f38:	00000306 	br	81113f48 <___svfprintf_internal_r+0x1214>
81113f3c:	42000204 	addi	r8,r8,8
81113f40:	8c7ffc04 	addi	r17,r17,-16
81113f44:	b4414d0e 	bge	r22,r17,8111447c <___svfprintf_internal_r+0x1748>
81113f48:	18c00404 	addi	r3,r3,16
81113f4c:	10800044 	addi	r2,r2,1
81113f50:	45400015 	stw	r21,0(r8)
81113f54:	45800115 	stw	r22,4(r8)
81113f58:	d8c02015 	stw	r3,128(sp)
81113f5c:	d8801f15 	stw	r2,124(sp)
81113f60:	e0bff60e 	bge	fp,r2,81113f3c <__reset+0xfb0f3f3c>
81113f64:	d9801e04 	addi	r6,sp,120
81113f68:	a00b883a 	mov	r5,r20
81113f6c:	9809883a 	mov	r4,r19
81113f70:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113f74:	103c561e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81113f78:	d8c02017 	ldw	r3,128(sp)
81113f7c:	d8801f17 	ldw	r2,124(sp)
81113f80:	da000404 	addi	r8,sp,16
81113f84:	003fee06 	br	81113f40 <__reset+0xfb0f3f40>
81113f88:	d9402c17 	ldw	r5,176(sp)
81113f8c:	d9801e04 	addi	r6,sp,120
81113f90:	9809883a 	mov	r4,r19
81113f94:	111f7f40 	call	8111f7f4 <__ssprint_r>
81113f98:	103c4d1e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81113f9c:	d8c02017 	ldw	r3,128(sp)
81113fa0:	df002787 	ldb	fp,158(sp)
81113fa4:	da000404 	addi	r8,sp,16
81113fa8:	003d5a06 	br	81113514 <__reset+0xfb0f3514>
81113fac:	9080040c 	andi	r2,r18,16
81113fb0:	10005c26 	beq	r2,zero,81114124 <___svfprintf_internal_r+0x13f0>
81113fb4:	d9402d17 	ldw	r5,180(sp)
81113fb8:	d8c02917 	ldw	r3,164(sp)
81113fbc:	d8002785 	stb	zero,158(sp)
81113fc0:	28800104 	addi	r2,r5,4
81113fc4:	2d000017 	ldw	r20,0(r5)
81113fc8:	002d883a 	mov	r22,zero
81113fcc:	18005e16 	blt	r3,zero,81114148 <___svfprintf_internal_r+0x1414>
81113fd0:	00ffdfc4 	movi	r3,-129
81113fd4:	d8802d15 	stw	r2,180(sp)
81113fd8:	90e4703a 	and	r18,r18,r3
81113fdc:	0039883a 	mov	fp,zero
81113fe0:	a03dfe26 	beq	r20,zero,811137dc <__reset+0xfb0f37dc>
81113fe4:	00800244 	movi	r2,9
81113fe8:	153cb336 	bltu	r2,r20,811132b8 <__reset+0xfb0f32b8>
81113fec:	a5000c04 	addi	r20,r20,48
81113ff0:	dc001dc4 	addi	r16,sp,119
81113ff4:	dd001dc5 	stb	r20,119(sp)
81113ff8:	d8c02817 	ldw	r3,160(sp)
81113ffc:	1c07c83a 	sub	r3,r3,r16
81114000:	d8c02e15 	stw	r3,184(sp)
81114004:	003cf506 	br	811133dc <__reset+0xfb0f33dc>
81114008:	d8803317 	ldw	r2,204(sp)
8111400c:	143fffc4 	addi	r16,r2,-1
81114010:	043f560e 	bge	zero,r16,81113d6c <__reset+0xfb0f3d6c>
81114014:	07000404 	movi	fp,16
81114018:	e403530e 	bge	fp,r16,81114d68 <___svfprintf_internal_r+0x2034>
8111401c:	01604534 	movhi	r5,33044
81114020:	2976a384 	addi	r5,r5,-9586
81114024:	d9402b15 	stw	r5,172(sp)
81114028:	01c001c4 	movi	r7,7
8111402c:	dd002c17 	ldw	r20,176(sp)
81114030:	00000306 	br	81114040 <___svfprintf_internal_r+0x130c>
81114034:	843ffc04 	addi	r16,r16,-16
81114038:	b5800204 	addi	r22,r22,8
8111403c:	e400130e 	bge	fp,r16,8111408c <___svfprintf_internal_r+0x1358>
81114040:	18c00404 	addi	r3,r3,16
81114044:	8c400044 	addi	r17,r17,1
81114048:	b5400015 	stw	r21,0(r22)
8111404c:	b7000115 	stw	fp,4(r22)
81114050:	d8c02015 	stw	r3,128(sp)
81114054:	dc401f15 	stw	r17,124(sp)
81114058:	3c7ff60e 	bge	r7,r17,81114034 <__reset+0xfb0f4034>
8111405c:	d9801e04 	addi	r6,sp,120
81114060:	a00b883a 	mov	r5,r20
81114064:	9809883a 	mov	r4,r19
81114068:	d9c03d15 	stw	r7,244(sp)
8111406c:	111f7f40 	call	8111f7f4 <__ssprint_r>
81114070:	d9c03d17 	ldw	r7,244(sp)
81114074:	103c161e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81114078:	843ffc04 	addi	r16,r16,-16
8111407c:	d8c02017 	ldw	r3,128(sp)
81114080:	dc401f17 	ldw	r17,124(sp)
81114084:	dd800404 	addi	r22,sp,16
81114088:	e43fed16 	blt	fp,r16,81114040 <__reset+0xfb0f4040>
8111408c:	d8802b17 	ldw	r2,172(sp)
81114090:	1c07883a 	add	r3,r3,r16
81114094:	8c400044 	addi	r17,r17,1
81114098:	b0800015 	stw	r2,0(r22)
8111409c:	b4000115 	stw	r16,4(r22)
811140a0:	d8c02015 	stw	r3,128(sp)
811140a4:	dc401f15 	stw	r17,124(sp)
811140a8:	008001c4 	movi	r2,7
811140ac:	147f2e0e 	bge	r2,r17,81113d68 <__reset+0xfb0f3d68>
811140b0:	d9402c17 	ldw	r5,176(sp)
811140b4:	d9801e04 	addi	r6,sp,120
811140b8:	9809883a 	mov	r4,r19
811140bc:	111f7f40 	call	8111f7f4 <__ssprint_r>
811140c0:	103c031e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
811140c4:	d8c02017 	ldw	r3,128(sp)
811140c8:	dc401f17 	ldw	r17,124(sp)
811140cc:	dd800404 	addi	r22,sp,16
811140d0:	003f2606 	br	81113d6c <__reset+0xfb0f3d6c>
811140d4:	9080040c 	andi	r2,r18,16
811140d8:	1000c326 	beq	r2,zero,811143e8 <___svfprintf_internal_r+0x16b4>
811140dc:	d8802d17 	ldw	r2,180(sp)
811140e0:	15000017 	ldw	r20,0(r2)
811140e4:	10800104 	addi	r2,r2,4
811140e8:	d8802d15 	stw	r2,180(sp)
811140ec:	a02dd7fa 	srai	r22,r20,31
811140f0:	b005883a 	mov	r2,r22
811140f4:	103c680e 	bge	r2,zero,81113298 <__reset+0xfb0f3298>
811140f8:	0529c83a 	sub	r20,zero,r20
811140fc:	a004c03a 	cmpne	r2,r20,zero
81114100:	05adc83a 	sub	r22,zero,r22
81114104:	b0adc83a 	sub	r22,r22,r2
81114108:	d8802917 	ldw	r2,164(sp)
8111410c:	07000b44 	movi	fp,45
81114110:	df002785 	stb	fp,158(sp)
81114114:	10022e16 	blt	r2,zero,811149d0 <___svfprintf_internal_r+0x1c9c>
81114118:	00bfdfc4 	movi	r2,-129
8111411c:	90a4703a 	and	r18,r18,r2
81114120:	003c6406 	br	811132b4 <__reset+0xfb0f32b4>
81114124:	9080100c 	andi	r2,r18,64
81114128:	d8002785 	stb	zero,158(sp)
8111412c:	10012526 	beq	r2,zero,811145c4 <___svfprintf_internal_r+0x1890>
81114130:	d9002d17 	ldw	r4,180(sp)
81114134:	d9402917 	ldw	r5,164(sp)
81114138:	002d883a 	mov	r22,zero
8111413c:	20800104 	addi	r2,r4,4
81114140:	2500000b 	ldhu	r20,0(r4)
81114144:	283fa20e 	bge	r5,zero,81113fd0 <__reset+0xfb0f3fd0>
81114148:	d8802d15 	stw	r2,180(sp)
8111414c:	0039883a 	mov	fp,zero
81114150:	a584b03a 	or	r2,r20,r22
81114154:	103c571e 	bne	r2,zero,811132b4 <__reset+0xfb0f32b4>
81114158:	00800044 	movi	r2,1
8111415c:	003e5006 	br	81113aa0 <__reset+0xfb0f3aa0>
81114160:	d9402c17 	ldw	r5,176(sp)
81114164:	d9801e04 	addi	r6,sp,120
81114168:	9809883a 	mov	r4,r19
8111416c:	111f7f40 	call	8111f7f4 <__ssprint_r>
81114170:	103bd71e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81114174:	d8c02017 	ldw	r3,128(sp)
81114178:	da000404 	addi	r8,sp,16
8111417c:	d9003217 	ldw	r4,200(sp)
81114180:	d8802617 	ldw	r2,152(sp)
81114184:	d9403317 	ldw	r5,204(sp)
81114188:	8123883a 	add	r17,r16,r4
8111418c:	11400216 	blt	r2,r5,81114198 <___svfprintf_internal_r+0x1464>
81114190:	9100004c 	andi	r4,r18,1
81114194:	20000d26 	beq	r4,zero,811141cc <___svfprintf_internal_r+0x1498>
81114198:	d9003817 	ldw	r4,224(sp)
8111419c:	d9403417 	ldw	r5,208(sp)
811141a0:	1907883a 	add	r3,r3,r4
811141a4:	d9001f17 	ldw	r4,124(sp)
811141a8:	41400015 	stw	r5,0(r8)
811141ac:	d9403817 	ldw	r5,224(sp)
811141b0:	21000044 	addi	r4,r4,1
811141b4:	d8c02015 	stw	r3,128(sp)
811141b8:	41400115 	stw	r5,4(r8)
811141bc:	d9001f15 	stw	r4,124(sp)
811141c0:	014001c4 	movi	r5,7
811141c4:	2901dc16 	blt	r5,r4,81114938 <___svfprintf_internal_r+0x1c04>
811141c8:	42000204 	addi	r8,r8,8
811141cc:	d9003317 	ldw	r4,204(sp)
811141d0:	8121883a 	add	r16,r16,r4
811141d4:	2085c83a 	sub	r2,r4,r2
811141d8:	8461c83a 	sub	r16,r16,r17
811141dc:	1400010e 	bge	r2,r16,811141e4 <___svfprintf_internal_r+0x14b0>
811141e0:	1021883a 	mov	r16,r2
811141e4:	04000a0e 	bge	zero,r16,81114210 <___svfprintf_internal_r+0x14dc>
811141e8:	d9001f17 	ldw	r4,124(sp)
811141ec:	1c07883a 	add	r3,r3,r16
811141f0:	44400015 	stw	r17,0(r8)
811141f4:	21000044 	addi	r4,r4,1
811141f8:	44000115 	stw	r16,4(r8)
811141fc:	d8c02015 	stw	r3,128(sp)
81114200:	d9001f15 	stw	r4,124(sp)
81114204:	014001c4 	movi	r5,7
81114208:	2901e616 	blt	r5,r4,811149a4 <___svfprintf_internal_r+0x1c70>
8111420c:	42000204 	addi	r8,r8,8
81114210:	8001f616 	blt	r16,zero,811149ec <___svfprintf_internal_r+0x1cb8>
81114214:	1421c83a 	sub	r16,r2,r16
81114218:	043d1c0e 	bge	zero,r16,8111368c <__reset+0xfb0f368c>
8111421c:	04400404 	movi	r17,16
81114220:	d8801f17 	ldw	r2,124(sp)
81114224:	8c3edd0e 	bge	r17,r16,81113d9c <__reset+0xfb0f3d9c>
81114228:	01604534 	movhi	r5,33044
8111422c:	2976a384 	addi	r5,r5,-9586
81114230:	d9402b15 	stw	r5,172(sp)
81114234:	058001c4 	movi	r22,7
81114238:	dd002c17 	ldw	r20,176(sp)
8111423c:	00000306 	br	8111424c <___svfprintf_internal_r+0x1518>
81114240:	42000204 	addi	r8,r8,8
81114244:	843ffc04 	addi	r16,r16,-16
81114248:	8c3ed70e 	bge	r17,r16,81113da8 <__reset+0xfb0f3da8>
8111424c:	18c00404 	addi	r3,r3,16
81114250:	10800044 	addi	r2,r2,1
81114254:	45400015 	stw	r21,0(r8)
81114258:	44400115 	stw	r17,4(r8)
8111425c:	d8c02015 	stw	r3,128(sp)
81114260:	d8801f15 	stw	r2,124(sp)
81114264:	b0bff60e 	bge	r22,r2,81114240 <__reset+0xfb0f4240>
81114268:	d9801e04 	addi	r6,sp,120
8111426c:	a00b883a 	mov	r5,r20
81114270:	9809883a 	mov	r4,r19
81114274:	111f7f40 	call	8111f7f4 <__ssprint_r>
81114278:	103b951e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
8111427c:	d8c02017 	ldw	r3,128(sp)
81114280:	d8801f17 	ldw	r2,124(sp)
81114284:	da000404 	addi	r8,sp,16
81114288:	003fee06 	br	81114244 <__reset+0xfb0f4244>
8111428c:	9088703a 	and	r4,r18,r2
81114290:	203e8d1e 	bne	r4,zero,81113cc8 <__reset+0xfb0f3cc8>
81114294:	dc401f17 	ldw	r17,124(sp)
81114298:	40800115 	stw	r2,4(r8)
8111429c:	44000015 	stw	r16,0(r8)
811142a0:	8c400044 	addi	r17,r17,1
811142a4:	d8c02015 	stw	r3,128(sp)
811142a8:	dc401f15 	stw	r17,124(sp)
811142ac:	008001c4 	movi	r2,7
811142b0:	147f7f16 	blt	r2,r17,811140b0 <__reset+0xfb0f40b0>
811142b4:	45800204 	addi	r22,r8,8
811142b8:	003eac06 	br	81113d6c <__reset+0xfb0f3d6c>
811142bc:	d9402c17 	ldw	r5,176(sp)
811142c0:	d9801e04 	addi	r6,sp,120
811142c4:	9809883a 	mov	r4,r19
811142c8:	111f7f40 	call	8111f7f4 <__ssprint_r>
811142cc:	103b801e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
811142d0:	d8c02017 	ldw	r3,128(sp)
811142d4:	dc401f17 	ldw	r17,124(sp)
811142d8:	da000404 	addi	r8,sp,16
811142dc:	003e8406 	br	81113cf0 <__reset+0xfb0f3cf0>
811142e0:	d9402c17 	ldw	r5,176(sp)
811142e4:	d9801e04 	addi	r6,sp,120
811142e8:	9809883a 	mov	r4,r19
811142ec:	111f7f40 	call	8111f7f4 <__ssprint_r>
811142f0:	103b771e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
811142f4:	d8c02017 	ldw	r3,128(sp)
811142f8:	dc401f17 	ldw	r17,124(sp)
811142fc:	dd800404 	addi	r22,sp,16
81114300:	003e8606 	br	81113d1c <__reset+0xfb0f3d1c>
81114304:	0029883a 	mov	r20,zero
81114308:	a5000c04 	addi	r20,r20,48
8111430c:	dc001dc4 	addi	r16,sp,119
81114310:	dd001dc5 	stb	r20,119(sp)
81114314:	003f3806 	br	81113ff8 <__reset+0xfb0f3ff8>
81114318:	d9402c17 	ldw	r5,176(sp)
8111431c:	d9801e04 	addi	r6,sp,120
81114320:	9809883a 	mov	r4,r19
81114324:	111f7f40 	call	8111f7f4 <__ssprint_r>
81114328:	103b691e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
8111432c:	d8c02017 	ldw	r3,128(sp)
81114330:	da000404 	addi	r8,sp,16
81114334:	003c9506 	br	8111358c <__reset+0xfb0f358c>
81114338:	d9003617 	ldw	r4,216(sp)
8111433c:	d9403717 	ldw	r5,220(sp)
81114340:	da003e15 	stw	r8,248(sp)
81114344:	111d6080 	call	8111d608 <__fpclassifyd>
81114348:	da003e17 	ldw	r8,248(sp)
8111434c:	1000bd1e 	bne	r2,zero,81114644 <___svfprintf_internal_r+0x1910>
81114350:	008011c4 	movi	r2,71
81114354:	14411e0e 	bge	r2,r17,811147d0 <___svfprintf_internal_r+0x1a9c>
81114358:	04204534 	movhi	r16,33044
8111435c:	84369604 	addi	r16,r16,-9640
81114360:	00c000c4 	movi	r3,3
81114364:	00bfdfc4 	movi	r2,-129
81114368:	d8c02a15 	stw	r3,168(sp)
8111436c:	90a4703a 	and	r18,r18,r2
81114370:	df002783 	ldbu	fp,158(sp)
81114374:	d8c02e15 	stw	r3,184(sp)
81114378:	d8002915 	stw	zero,164(sp)
8111437c:	d8003215 	stw	zero,200(sp)
81114380:	003c1c06 	br	811133f4 <__reset+0xfb0f33f4>
81114384:	9080100c 	andi	r2,r18,64
81114388:	d8002785 	stb	zero,158(sp)
8111438c:	10009426 	beq	r2,zero,811145e0 <___svfprintf_internal_r+0x18ac>
81114390:	d8c02d17 	ldw	r3,180(sp)
81114394:	d9002917 	ldw	r4,164(sp)
81114398:	002d883a 	mov	r22,zero
8111439c:	18800104 	addi	r2,r3,4
811143a0:	1d00000b 	ldhu	r20,0(r3)
811143a4:	203ec10e 	bge	r4,zero,81113eac <__reset+0xfb0f3eac>
811143a8:	a586b03a 	or	r3,r20,r22
811143ac:	d8802d15 	stw	r2,180(sp)
811143b0:	183ec21e 	bne	r3,zero,81113ebc <__reset+0xfb0f3ebc>
811143b4:	0039883a 	mov	fp,zero
811143b8:	0005883a 	mov	r2,zero
811143bc:	003db806 	br	81113aa0 <__reset+0xfb0f3aa0>
811143c0:	d8802d17 	ldw	r2,180(sp)
811143c4:	d8c02d17 	ldw	r3,180(sp)
811143c8:	d9002d17 	ldw	r4,180(sp)
811143cc:	10800017 	ldw	r2,0(r2)
811143d0:	18c00117 	ldw	r3,4(r3)
811143d4:	21000204 	addi	r4,r4,8
811143d8:	d8803615 	stw	r2,216(sp)
811143dc:	d8c03715 	stw	r3,220(sp)
811143e0:	d9002d15 	stw	r4,180(sp)
811143e4:	003b8206 	br	811131f0 <__reset+0xfb0f31f0>
811143e8:	9080100c 	andi	r2,r18,64
811143ec:	10010726 	beq	r2,zero,8111480c <___svfprintf_internal_r+0x1ad8>
811143f0:	d8c02d17 	ldw	r3,180(sp)
811143f4:	1d00000f 	ldh	r20,0(r3)
811143f8:	18c00104 	addi	r3,r3,4
811143fc:	d8c02d15 	stw	r3,180(sp)
81114400:	a02dd7fa 	srai	r22,r20,31
81114404:	b005883a 	mov	r2,r22
81114408:	003ba206 	br	81113294 <__reset+0xfb0f3294>
8111440c:	9080100c 	andi	r2,r18,64
81114410:	10010526 	beq	r2,zero,81114828 <___svfprintf_internal_r+0x1af4>
81114414:	d9002d17 	ldw	r4,180(sp)
81114418:	002d883a 	mov	r22,zero
8111441c:	2500000b 	ldhu	r20,0(r4)
81114420:	21000104 	addi	r4,r4,4
81114424:	d9002d15 	stw	r4,180(sp)
81114428:	003cfe06 	br	81113824 <__reset+0xfb0f3824>
8111442c:	bc400007 	ldb	r17,0(r23)
81114430:	003a9606 	br	81112e8c <__reset+0xfb0f2e8c>
81114434:	9080040c 	andi	r2,r18,16
81114438:	10010126 	beq	r2,zero,81114840 <___svfprintf_internal_r+0x1b0c>
8111443c:	d9402d17 	ldw	r5,180(sp)
81114440:	d8c02f17 	ldw	r3,188(sp)
81114444:	28800017 	ldw	r2,0(r5)
81114448:	29400104 	addi	r5,r5,4
8111444c:	d9402d15 	stw	r5,180(sp)
81114450:	10c00015 	stw	r3,0(r2)
81114454:	003a6406 	br	81112de8 <__reset+0xfb0f2de8>
81114458:	d9002917 	ldw	r4,164(sp)
8111445c:	d8002785 	stb	zero,158(sp)
81114460:	203d8d16 	blt	r4,zero,81113a98 <__reset+0xfb0f3a98>
81114464:	00bfdfc4 	movi	r2,-129
81114468:	90a4703a 	and	r18,r18,r2
8111446c:	003b0506 	br	81113084 <__reset+0xfb0f3084>
81114470:	01604534 	movhi	r5,33044
81114474:	2976a384 	addi	r5,r5,-9586
81114478:	d9402b15 	stw	r5,172(sp)
8111447c:	d9402b17 	ldw	r5,172(sp)
81114480:	1c47883a 	add	r3,r3,r17
81114484:	10800044 	addi	r2,r2,1
81114488:	41400015 	stw	r5,0(r8)
8111448c:	44400115 	stw	r17,4(r8)
81114490:	d8c02015 	stw	r3,128(sp)
81114494:	d8801f15 	stw	r2,124(sp)
81114498:	010001c4 	movi	r4,7
8111449c:	20bf3016 	blt	r4,r2,81114160 <__reset+0xfb0f4160>
811144a0:	42000204 	addi	r8,r8,8
811144a4:	003f3506 	br	8111417c <__reset+0xfb0f417c>
811144a8:	01204534 	movhi	r4,33044
811144ac:	2136a384 	addi	r4,r4,-9586
811144b0:	d9002b15 	stw	r4,172(sp)
811144b4:	003c5e06 	br	81113630 <__reset+0xfb0f3630>
811144b8:	d9402c17 	ldw	r5,176(sp)
811144bc:	d9801e04 	addi	r6,sp,120
811144c0:	9809883a 	mov	r4,r19
811144c4:	111f7f40 	call	8111f7f4 <__ssprint_r>
811144c8:	103b011e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
811144cc:	d8c02017 	ldw	r3,128(sp)
811144d0:	da000404 	addi	r8,sp,16
811144d4:	003d9306 	br	81113b24 <__reset+0xfb0f3b24>
811144d8:	d8801f17 	ldw	r2,124(sp)
811144dc:	01604534 	movhi	r5,33044
811144e0:	01000044 	movi	r4,1
811144e4:	18c00044 	addi	r3,r3,1
811144e8:	10800044 	addi	r2,r2,1
811144ec:	2976a304 	addi	r5,r5,-9588
811144f0:	41000115 	stw	r4,4(r8)
811144f4:	41400015 	stw	r5,0(r8)
811144f8:	d8c02015 	stw	r3,128(sp)
811144fc:	d8801f15 	stw	r2,124(sp)
81114500:	010001c4 	movi	r4,7
81114504:	2080b516 	blt	r4,r2,811147dc <___svfprintf_internal_r+0x1aa8>
81114508:	42000204 	addi	r8,r8,8
8111450c:	8800041e 	bne	r17,zero,81114520 <___svfprintf_internal_r+0x17ec>
81114510:	d8803317 	ldw	r2,204(sp)
81114514:	1000021e 	bne	r2,zero,81114520 <___svfprintf_internal_r+0x17ec>
81114518:	9080004c 	andi	r2,r18,1
8111451c:	103c5b26 	beq	r2,zero,8111368c <__reset+0xfb0f368c>
81114520:	d9003817 	ldw	r4,224(sp)
81114524:	d8801f17 	ldw	r2,124(sp)
81114528:	d9403417 	ldw	r5,208(sp)
8111452c:	20c7883a 	add	r3,r4,r3
81114530:	10800044 	addi	r2,r2,1
81114534:	41000115 	stw	r4,4(r8)
81114538:	41400015 	stw	r5,0(r8)
8111453c:	d8c02015 	stw	r3,128(sp)
81114540:	d8801f15 	stw	r2,124(sp)
81114544:	010001c4 	movi	r4,7
81114548:	20818016 	blt	r4,r2,81114b4c <___svfprintf_internal_r+0x1e18>
8111454c:	42000204 	addi	r8,r8,8
81114550:	0463c83a 	sub	r17,zero,r17
81114554:	0440cb0e 	bge	zero,r17,81114884 <___svfprintf_internal_r+0x1b50>
81114558:	05800404 	movi	r22,16
8111455c:	b440e80e 	bge	r22,r17,81114900 <___svfprintf_internal_r+0x1bcc>
81114560:	01604534 	movhi	r5,33044
81114564:	2976a384 	addi	r5,r5,-9586
81114568:	d9402b15 	stw	r5,172(sp)
8111456c:	070001c4 	movi	fp,7
81114570:	dd002c17 	ldw	r20,176(sp)
81114574:	00000306 	br	81114584 <___svfprintf_internal_r+0x1850>
81114578:	42000204 	addi	r8,r8,8
8111457c:	8c7ffc04 	addi	r17,r17,-16
81114580:	b440e20e 	bge	r22,r17,8111490c <___svfprintf_internal_r+0x1bd8>
81114584:	18c00404 	addi	r3,r3,16
81114588:	10800044 	addi	r2,r2,1
8111458c:	45400015 	stw	r21,0(r8)
81114590:	45800115 	stw	r22,4(r8)
81114594:	d8c02015 	stw	r3,128(sp)
81114598:	d8801f15 	stw	r2,124(sp)
8111459c:	e0bff60e 	bge	fp,r2,81114578 <__reset+0xfb0f4578>
811145a0:	d9801e04 	addi	r6,sp,120
811145a4:	a00b883a 	mov	r5,r20
811145a8:	9809883a 	mov	r4,r19
811145ac:	111f7f40 	call	8111f7f4 <__ssprint_r>
811145b0:	103ac71e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
811145b4:	d8c02017 	ldw	r3,128(sp)
811145b8:	d8801f17 	ldw	r2,124(sp)
811145bc:	da000404 	addi	r8,sp,16
811145c0:	003fee06 	br	8111457c <__reset+0xfb0f457c>
811145c4:	d8c02d17 	ldw	r3,180(sp)
811145c8:	d9002917 	ldw	r4,164(sp)
811145cc:	002d883a 	mov	r22,zero
811145d0:	18800104 	addi	r2,r3,4
811145d4:	1d000017 	ldw	r20,0(r3)
811145d8:	203e7d0e 	bge	r4,zero,81113fd0 <__reset+0xfb0f3fd0>
811145dc:	003eda06 	br	81114148 <__reset+0xfb0f4148>
811145e0:	d9402d17 	ldw	r5,180(sp)
811145e4:	d8c02917 	ldw	r3,164(sp)
811145e8:	002d883a 	mov	r22,zero
811145ec:	28800104 	addi	r2,r5,4
811145f0:	2d000017 	ldw	r20,0(r5)
811145f4:	183e2d0e 	bge	r3,zero,81113eac <__reset+0xfb0f3eac>
811145f8:	003f6b06 	br	811143a8 <__reset+0xfb0f43a8>
811145fc:	d8c02d15 	stw	r3,180(sp)
81114600:	0039883a 	mov	fp,zero
81114604:	003ed206 	br	81114150 <__reset+0xfb0f4150>
81114608:	bc400043 	ldbu	r17,1(r23)
8111460c:	94800814 	ori	r18,r18,32
81114610:	bdc00044 	addi	r23,r23,1
81114614:	8c403fcc 	andi	r17,r17,255
81114618:	8c40201c 	xori	r17,r17,128
8111461c:	8c7fe004 	addi	r17,r17,-128
81114620:	003a1a06 	br	81112e8c <__reset+0xfb0f2e8c>
81114624:	d9402c17 	ldw	r5,176(sp)
81114628:	d9801e04 	addi	r6,sp,120
8111462c:	9809883a 	mov	r4,r19
81114630:	111f7f40 	call	8111f7f4 <__ssprint_r>
81114634:	103aa61e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81114638:	d8c02017 	ldw	r3,128(sp)
8111463c:	da000404 	addi	r8,sp,16
81114640:	003d4a06 	br	81113b6c <__reset+0xfb0f3b6c>
81114644:	d9002917 	ldw	r4,164(sp)
81114648:	05bff7c4 	movi	r22,-33
8111464c:	00bfffc4 	movi	r2,-1
81114650:	8dac703a 	and	r22,r17,r22
81114654:	20806a26 	beq	r4,r2,81114800 <___svfprintf_internal_r+0x1acc>
81114658:	008011c4 	movi	r2,71
8111465c:	b0813726 	beq	r22,r2,81114b3c <___svfprintf_internal_r+0x1e08>
81114660:	d9003717 	ldw	r4,220(sp)
81114664:	90c04014 	ori	r3,r18,256
81114668:	d8c02b15 	stw	r3,172(sp)
8111466c:	20015d16 	blt	r4,zero,81114be4 <___svfprintf_internal_r+0x1eb0>
81114670:	dd003717 	ldw	r20,220(sp)
81114674:	d8002a05 	stb	zero,168(sp)
81114678:	00801984 	movi	r2,102
8111467c:	88814026 	beq	r17,r2,81114b80 <___svfprintf_internal_r+0x1e4c>
81114680:	00801184 	movi	r2,70
81114684:	88817126 	beq	r17,r2,81114c4c <___svfprintf_internal_r+0x1f18>
81114688:	00801144 	movi	r2,69
8111468c:	b0816226 	beq	r22,r2,81114c18 <___svfprintf_internal_r+0x1ee4>
81114690:	d8c02917 	ldw	r3,164(sp)
81114694:	d8802104 	addi	r2,sp,132
81114698:	d8800315 	stw	r2,12(sp)
8111469c:	d9403617 	ldw	r5,216(sp)
811146a0:	d8802504 	addi	r2,sp,148
811146a4:	d8800215 	stw	r2,8(sp)
811146a8:	d8802604 	addi	r2,sp,152
811146ac:	d8c00015 	stw	r3,0(sp)
811146b0:	d8800115 	stw	r2,4(sp)
811146b4:	01c00084 	movi	r7,2
811146b8:	a00d883a 	mov	r6,r20
811146bc:	9809883a 	mov	r4,r19
811146c0:	d8c03d15 	stw	r3,244(sp)
811146c4:	da003e15 	stw	r8,248(sp)
811146c8:	1118ec00 	call	81118ec0 <_dtoa_r>
811146cc:	1021883a 	mov	r16,r2
811146d0:	008019c4 	movi	r2,103
811146d4:	d8c03d17 	ldw	r3,244(sp)
811146d8:	da003e17 	ldw	r8,248(sp)
811146dc:	8880e726 	beq	r17,r2,81114a7c <___svfprintf_internal_r+0x1d48>
811146e0:	008011c4 	movi	r2,71
811146e4:	8880d426 	beq	r17,r2,81114a38 <___svfprintf_internal_r+0x1d04>
811146e8:	80f9883a 	add	fp,r16,r3
811146ec:	d9003617 	ldw	r4,216(sp)
811146f0:	000d883a 	mov	r6,zero
811146f4:	000f883a 	mov	r7,zero
811146f8:	a00b883a 	mov	r5,r20
811146fc:	da003e15 	stw	r8,248(sp)
81114700:	112594c0 	call	8112594c <__eqdf2>
81114704:	da003e17 	ldw	r8,248(sp)
81114708:	1000e426 	beq	r2,zero,81114a9c <___svfprintf_internal_r+0x1d68>
8111470c:	d8802117 	ldw	r2,132(sp)
81114710:	1700062e 	bgeu	r2,fp,8111472c <___svfprintf_internal_r+0x19f8>
81114714:	01000c04 	movi	r4,48
81114718:	10c00044 	addi	r3,r2,1
8111471c:	d8c02115 	stw	r3,132(sp)
81114720:	11000005 	stb	r4,0(r2)
81114724:	d8802117 	ldw	r2,132(sp)
81114728:	173ffb36 	bltu	r2,fp,81114718 <__reset+0xfb0f4718>
8111472c:	1405c83a 	sub	r2,r2,r16
81114730:	d8803315 	stw	r2,204(sp)
81114734:	008011c4 	movi	r2,71
81114738:	b080c526 	beq	r22,r2,81114a50 <___svfprintf_internal_r+0x1d1c>
8111473c:	00801944 	movi	r2,101
81114740:	1441d90e 	bge	r2,r17,81114ea8 <___svfprintf_internal_r+0x2174>
81114744:	d8c02617 	ldw	r3,152(sp)
81114748:	00801984 	movi	r2,102
8111474c:	d8c03215 	stw	r3,200(sp)
81114750:	88813426 	beq	r17,r2,81114c24 <___svfprintf_internal_r+0x1ef0>
81114754:	d8c03217 	ldw	r3,200(sp)
81114758:	d9003317 	ldw	r4,204(sp)
8111475c:	19012516 	blt	r3,r4,81114bf4 <___svfprintf_internal_r+0x1ec0>
81114760:	9480004c 	andi	r18,r18,1
81114764:	9001841e 	bne	r18,zero,81114d78 <___svfprintf_internal_r+0x2044>
81114768:	1805883a 	mov	r2,r3
8111476c:	1801cc16 	blt	r3,zero,81114ea0 <___svfprintf_internal_r+0x216c>
81114770:	d8c03217 	ldw	r3,200(sp)
81114774:	044019c4 	movi	r17,103
81114778:	d8c02e15 	stw	r3,184(sp)
8111477c:	df002a07 	ldb	fp,168(sp)
81114780:	e000a61e 	bne	fp,zero,81114a1c <___svfprintf_internal_r+0x1ce8>
81114784:	df002783 	ldbu	fp,158(sp)
81114788:	d8802a15 	stw	r2,168(sp)
8111478c:	dc802b17 	ldw	r18,172(sp)
81114790:	d8002915 	stw	zero,164(sp)
81114794:	003b1706 	br	811133f4 <__reset+0xfb0f33f4>
81114798:	04204534 	movhi	r16,33044
8111479c:	84369304 	addi	r16,r16,-9652
811147a0:	003aa606 	br	8111323c <__reset+0xfb0f323c>
811147a4:	d9003917 	ldw	r4,228(sp)
811147a8:	04001004 	movi	r16,64
811147ac:	800b883a 	mov	r5,r16
811147b0:	11118b00 	call	811118b0 <_malloc_r>
811147b4:	d9002c17 	ldw	r4,176(sp)
811147b8:	20800015 	stw	r2,0(r4)
811147bc:	20800415 	stw	r2,16(r4)
811147c0:	1001cb26 	beq	r2,zero,81114ef0 <___svfprintf_internal_r+0x21bc>
811147c4:	d8802c17 	ldw	r2,176(sp)
811147c8:	14000515 	stw	r16,20(r2)
811147cc:	00397606 	br	81112da8 <__reset+0xfb0f2da8>
811147d0:	04204534 	movhi	r16,33044
811147d4:	84369504 	addi	r16,r16,-9644
811147d8:	003ee106 	br	81114360 <__reset+0xfb0f4360>
811147dc:	d9402c17 	ldw	r5,176(sp)
811147e0:	d9801e04 	addi	r6,sp,120
811147e4:	9809883a 	mov	r4,r19
811147e8:	111f7f40 	call	8111f7f4 <__ssprint_r>
811147ec:	103a381e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
811147f0:	dc402617 	ldw	r17,152(sp)
811147f4:	d8c02017 	ldw	r3,128(sp)
811147f8:	da000404 	addi	r8,sp,16
811147fc:	003f4306 	br	8111450c <__reset+0xfb0f450c>
81114800:	01400184 	movi	r5,6
81114804:	d9402915 	stw	r5,164(sp)
81114808:	003f9506 	br	81114660 <__reset+0xfb0f4660>
8111480c:	d9002d17 	ldw	r4,180(sp)
81114810:	25000017 	ldw	r20,0(r4)
81114814:	21000104 	addi	r4,r4,4
81114818:	d9002d15 	stw	r4,180(sp)
8111481c:	a02dd7fa 	srai	r22,r20,31
81114820:	b005883a 	mov	r2,r22
81114824:	003a9b06 	br	81113294 <__reset+0xfb0f3294>
81114828:	d9402d17 	ldw	r5,180(sp)
8111482c:	002d883a 	mov	r22,zero
81114830:	2d000017 	ldw	r20,0(r5)
81114834:	29400104 	addi	r5,r5,4
81114838:	d9402d15 	stw	r5,180(sp)
8111483c:	003bf906 	br	81113824 <__reset+0xfb0f3824>
81114840:	9480100c 	andi	r18,r18,64
81114844:	90006e26 	beq	r18,zero,81114a00 <___svfprintf_internal_r+0x1ccc>
81114848:	d9002d17 	ldw	r4,180(sp)
8111484c:	d9402f17 	ldw	r5,188(sp)
81114850:	20800017 	ldw	r2,0(r4)
81114854:	21000104 	addi	r4,r4,4
81114858:	d9002d15 	stw	r4,180(sp)
8111485c:	1140000d 	sth	r5,0(r2)
81114860:	00396106 	br	81112de8 <__reset+0xfb0f2de8>
81114864:	d9402c17 	ldw	r5,176(sp)
81114868:	d9801e04 	addi	r6,sp,120
8111486c:	9809883a 	mov	r4,r19
81114870:	111f7f40 	call	8111f7f4 <__ssprint_r>
81114874:	103a161e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81114878:	d8c02017 	ldw	r3,128(sp)
8111487c:	d8801f17 	ldw	r2,124(sp)
81114880:	da000404 	addi	r8,sp,16
81114884:	d9403317 	ldw	r5,204(sp)
81114888:	10800044 	addi	r2,r2,1
8111488c:	44000015 	stw	r16,0(r8)
81114890:	28c7883a 	add	r3,r5,r3
81114894:	003b7706 	br	81113674 <__reset+0xfb0f3674>
81114898:	8009883a 	mov	r4,r16
8111489c:	da003e15 	stw	r8,248(sp)
811148a0:	1112a400 	call	81112a40 <strlen>
811148a4:	d8802e15 	stw	r2,184(sp)
811148a8:	da003e17 	ldw	r8,248(sp)
811148ac:	103c280e 	bge	r2,zero,81113950 <__reset+0xfb0f3950>
811148b0:	0005883a 	mov	r2,zero
811148b4:	003c2606 	br	81113950 <__reset+0xfb0f3950>
811148b8:	00bfffc4 	movi	r2,-1
811148bc:	003a0906 	br	811130e4 <__reset+0xfb0f30e4>
811148c0:	01204534 	movhi	r4,33044
811148c4:	2136a784 	addi	r4,r4,-9570
811148c8:	d9003515 	stw	r4,212(sp)
811148cc:	003b0606 	br	811134e8 <__reset+0xfb0f34e8>
811148d0:	013fffc4 	movi	r4,-1
811148d4:	003a2706 	br	81113174 <__reset+0xfb0f3174>
811148d8:	d9402c17 	ldw	r5,176(sp)
811148dc:	d9801e04 	addi	r6,sp,120
811148e0:	9809883a 	mov	r4,r19
811148e4:	111f7f40 	call	8111f7f4 <__ssprint_r>
811148e8:	1039f91e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
811148ec:	d8c02017 	ldw	r3,128(sp)
811148f0:	da000404 	addi	r8,sp,16
811148f4:	003d8406 	br	81113f08 <__reset+0xfb0f3f08>
811148f8:	0023883a 	mov	r17,zero
811148fc:	003d8306 	br	81113f0c <__reset+0xfb0f3f0c>
81114900:	01204534 	movhi	r4,33044
81114904:	2136a384 	addi	r4,r4,-9586
81114908:	d9002b15 	stw	r4,172(sp)
8111490c:	d9002b17 	ldw	r4,172(sp)
81114910:	1c47883a 	add	r3,r3,r17
81114914:	10800044 	addi	r2,r2,1
81114918:	41000015 	stw	r4,0(r8)
8111491c:	44400115 	stw	r17,4(r8)
81114920:	d8c02015 	stw	r3,128(sp)
81114924:	d8801f15 	stw	r2,124(sp)
81114928:	010001c4 	movi	r4,7
8111492c:	20bfcd16 	blt	r4,r2,81114864 <__reset+0xfb0f4864>
81114930:	42000204 	addi	r8,r8,8
81114934:	003fd306 	br	81114884 <__reset+0xfb0f4884>
81114938:	d9402c17 	ldw	r5,176(sp)
8111493c:	d9801e04 	addi	r6,sp,120
81114940:	9809883a 	mov	r4,r19
81114944:	111f7f40 	call	8111f7f4 <__ssprint_r>
81114948:	1039e11e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
8111494c:	d8802617 	ldw	r2,152(sp)
81114950:	d8c02017 	ldw	r3,128(sp)
81114954:	da000404 	addi	r8,sp,16
81114958:	003e1c06 	br	811141cc <__reset+0xfb0f41cc>
8111495c:	d8802917 	ldw	r2,164(sp)
81114960:	00c00184 	movi	r3,6
81114964:	1880012e 	bgeu	r3,r2,8111496c <___svfprintf_internal_r+0x1c38>
81114968:	1805883a 	mov	r2,r3
8111496c:	d8802e15 	stw	r2,184(sp)
81114970:	1000f316 	blt	r2,zero,81114d40 <___svfprintf_internal_r+0x200c>
81114974:	04204534 	movhi	r16,33044
81114978:	d8802a15 	stw	r2,168(sp)
8111497c:	dd002d15 	stw	r20,180(sp)
81114980:	d8002915 	stw	zero,164(sp)
81114984:	d8003215 	stw	zero,200(sp)
81114988:	8436a104 	addi	r16,r16,-9596
8111498c:	0039883a 	mov	fp,zero
81114990:	003a9f06 	br	81113410 <__reset+0xfb0f3410>
81114994:	01204534 	movhi	r4,33044
81114998:	2136a784 	addi	r4,r4,-9570
8111499c:	d9003515 	stw	r4,212(sp)
811149a0:	003b5f06 	br	81113720 <__reset+0xfb0f3720>
811149a4:	d9402c17 	ldw	r5,176(sp)
811149a8:	d9801e04 	addi	r6,sp,120
811149ac:	9809883a 	mov	r4,r19
811149b0:	111f7f40 	call	8111f7f4 <__ssprint_r>
811149b4:	1039c61e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
811149b8:	d8802617 	ldw	r2,152(sp)
811149bc:	d9403317 	ldw	r5,204(sp)
811149c0:	d8c02017 	ldw	r3,128(sp)
811149c4:	da000404 	addi	r8,sp,16
811149c8:	2885c83a 	sub	r2,r5,r2
811149cc:	003e1006 	br	81114210 <__reset+0xfb0f4210>
811149d0:	00800044 	movi	r2,1
811149d4:	10803fcc 	andi	r2,r2,255
811149d8:	00c00044 	movi	r3,1
811149dc:	10fa3526 	beq	r2,r3,811132b4 <__reset+0xfb0f32b4>
811149e0:	00c00084 	movi	r3,2
811149e4:	10fb9e26 	beq	r2,r3,81113860 <__reset+0xfb0f3860>
811149e8:	003a6406 	br	8111337c <__reset+0xfb0f337c>
811149ec:	0021883a 	mov	r16,zero
811149f0:	003e0806 	br	81114214 <__reset+0xfb0f4214>
811149f4:	07000b44 	movi	fp,45
811149f8:	df002785 	stb	fp,158(sp)
811149fc:	003a0b06 	br	8111322c <__reset+0xfb0f322c>
81114a00:	d8c02d17 	ldw	r3,180(sp)
81114a04:	d9002f17 	ldw	r4,188(sp)
81114a08:	18800017 	ldw	r2,0(r3)
81114a0c:	18c00104 	addi	r3,r3,4
81114a10:	d8c02d15 	stw	r3,180(sp)
81114a14:	11000015 	stw	r4,0(r2)
81114a18:	0038f306 	br	81112de8 <__reset+0xfb0f2de8>
81114a1c:	00c00b44 	movi	r3,45
81114a20:	d8c02785 	stb	r3,158(sp)
81114a24:	d8802a15 	stw	r2,168(sp)
81114a28:	dc802b17 	ldw	r18,172(sp)
81114a2c:	d8002915 	stw	zero,164(sp)
81114a30:	07000b44 	movi	fp,45
81114a34:	003a7306 	br	81113404 <__reset+0xfb0f3404>
81114a38:	9080004c 	andi	r2,r18,1
81114a3c:	1000941e 	bne	r2,zero,81114c90 <___svfprintf_internal_r+0x1f5c>
81114a40:	d8802117 	ldw	r2,132(sp)
81114a44:	1405c83a 	sub	r2,r2,r16
81114a48:	d8803315 	stw	r2,204(sp)
81114a4c:	b441161e 	bne	r22,r17,81114ea8 <___svfprintf_internal_r+0x2174>
81114a50:	dd802617 	ldw	r22,152(sp)
81114a54:	00bfff44 	movi	r2,-3
81114a58:	b0801a16 	blt	r22,r2,81114ac4 <___svfprintf_internal_r+0x1d90>
81114a5c:	d9402917 	ldw	r5,164(sp)
81114a60:	2d801816 	blt	r5,r22,81114ac4 <___svfprintf_internal_r+0x1d90>
81114a64:	dd803215 	stw	r22,200(sp)
81114a68:	003f3a06 	br	81114754 <__reset+0xfb0f4754>
81114a6c:	1025883a 	mov	r18,r2
81114a70:	0039883a 	mov	fp,zero
81114a74:	00800084 	movi	r2,2
81114a78:	003fd606 	br	811149d4 <__reset+0xfb0f49d4>
81114a7c:	9080004c 	andi	r2,r18,1
81114a80:	103f191e 	bne	r2,zero,811146e8 <__reset+0xfb0f46e8>
81114a84:	d8802117 	ldw	r2,132(sp)
81114a88:	003f2806 	br	8111472c <__reset+0xfb0f472c>
81114a8c:	01204534 	movhi	r4,33044
81114a90:	2136a384 	addi	r4,r4,-9586
81114a94:	d9002b15 	stw	r4,172(sp)
81114a98:	003c7c06 	br	81113c8c <__reset+0xfb0f3c8c>
81114a9c:	e005883a 	mov	r2,fp
81114aa0:	003f2206 	br	8111472c <__reset+0xfb0f472c>
81114aa4:	d9402917 	ldw	r5,164(sp)
81114aa8:	df002783 	ldbu	fp,158(sp)
81114aac:	dd002d15 	stw	r20,180(sp)
81114ab0:	d9402a15 	stw	r5,168(sp)
81114ab4:	d9402e15 	stw	r5,184(sp)
81114ab8:	d8002915 	stw	zero,164(sp)
81114abc:	d8003215 	stw	zero,200(sp)
81114ac0:	003a4c06 	br	811133f4 <__reset+0xfb0f33f4>
81114ac4:	8c7fff84 	addi	r17,r17,-2
81114ac8:	b5bfffc4 	addi	r22,r22,-1
81114acc:	dd802615 	stw	r22,152(sp)
81114ad0:	dc4022c5 	stb	r17,139(sp)
81114ad4:	b000c316 	blt	r22,zero,81114de4 <___svfprintf_internal_r+0x20b0>
81114ad8:	00800ac4 	movi	r2,43
81114adc:	d8802305 	stb	r2,140(sp)
81114ae0:	00800244 	movi	r2,9
81114ae4:	15806e16 	blt	r2,r22,81114ca0 <___svfprintf_internal_r+0x1f6c>
81114ae8:	00800c04 	movi	r2,48
81114aec:	b5800c04 	addi	r22,r22,48
81114af0:	d8802345 	stb	r2,141(sp)
81114af4:	dd802385 	stb	r22,142(sp)
81114af8:	d88023c4 	addi	r2,sp,143
81114afc:	df0022c4 	addi	fp,sp,139
81114b00:	d8c03317 	ldw	r3,204(sp)
81114b04:	1739c83a 	sub	fp,r2,fp
81114b08:	d9003317 	ldw	r4,204(sp)
81114b0c:	e0c7883a 	add	r3,fp,r3
81114b10:	df003b15 	stw	fp,236(sp)
81114b14:	d8c02e15 	stw	r3,184(sp)
81114b18:	00800044 	movi	r2,1
81114b1c:	1100b70e 	bge	r2,r4,81114dfc <___svfprintf_internal_r+0x20c8>
81114b20:	d8c02e17 	ldw	r3,184(sp)
81114b24:	18c00044 	addi	r3,r3,1
81114b28:	d8c02e15 	stw	r3,184(sp)
81114b2c:	1805883a 	mov	r2,r3
81114b30:	1800b016 	blt	r3,zero,81114df4 <___svfprintf_internal_r+0x20c0>
81114b34:	d8003215 	stw	zero,200(sp)
81114b38:	003f1006 	br	8111477c <__reset+0xfb0f477c>
81114b3c:	d8802917 	ldw	r2,164(sp)
81114b40:	103ec71e 	bne	r2,zero,81114660 <__reset+0xfb0f4660>
81114b44:	dc002915 	stw	r16,164(sp)
81114b48:	003ec506 	br	81114660 <__reset+0xfb0f4660>
81114b4c:	d9402c17 	ldw	r5,176(sp)
81114b50:	d9801e04 	addi	r6,sp,120
81114b54:	9809883a 	mov	r4,r19
81114b58:	111f7f40 	call	8111f7f4 <__ssprint_r>
81114b5c:	10395c1e 	bne	r2,zero,811130d0 <__reset+0xfb0f30d0>
81114b60:	dc402617 	ldw	r17,152(sp)
81114b64:	d8c02017 	ldw	r3,128(sp)
81114b68:	d8801f17 	ldw	r2,124(sp)
81114b6c:	da000404 	addi	r8,sp,16
81114b70:	003e7706 	br	81114550 <__reset+0xfb0f4550>
81114b74:	582f883a 	mov	r23,r11
81114b78:	d8002915 	stw	zero,164(sp)
81114b7c:	0038c406 	br	81112e90 <__reset+0xfb0f2e90>
81114b80:	d8c02917 	ldw	r3,164(sp)
81114b84:	d8802104 	addi	r2,sp,132
81114b88:	d8800315 	stw	r2,12(sp)
81114b8c:	d9403617 	ldw	r5,216(sp)
81114b90:	d8802504 	addi	r2,sp,148
81114b94:	d8800215 	stw	r2,8(sp)
81114b98:	d8802604 	addi	r2,sp,152
81114b9c:	d8c00015 	stw	r3,0(sp)
81114ba0:	9809883a 	mov	r4,r19
81114ba4:	d8800115 	stw	r2,4(sp)
81114ba8:	01c000c4 	movi	r7,3
81114bac:	a00d883a 	mov	r6,r20
81114bb0:	da003e15 	stw	r8,248(sp)
81114bb4:	1118ec00 	call	81118ec0 <_dtoa_r>
81114bb8:	d9002917 	ldw	r4,164(sp)
81114bbc:	da003e17 	ldw	r8,248(sp)
81114bc0:	1021883a 	mov	r16,r2
81114bc4:	1139883a 	add	fp,r2,r4
81114bc8:	2007883a 	mov	r3,r4
81114bcc:	81000007 	ldb	r4,0(r16)
81114bd0:	00800c04 	movi	r2,48
81114bd4:	20806f26 	beq	r4,r2,81114d94 <___svfprintf_internal_r+0x2060>
81114bd8:	d8c02617 	ldw	r3,152(sp)
81114bdc:	e0f9883a 	add	fp,fp,r3
81114be0:	003ec206 	br	811146ec <__reset+0xfb0f46ec>
81114be4:	00c00b44 	movi	r3,45
81114be8:	2520003c 	xorhi	r20,r4,32768
81114bec:	d8c02a05 	stb	r3,168(sp)
81114bf0:	003ea106 	br	81114678 <__reset+0xfb0f4678>
81114bf4:	d8c03217 	ldw	r3,200(sp)
81114bf8:	00c0890e 	bge	zero,r3,81114e20 <___svfprintf_internal_r+0x20ec>
81114bfc:	00800044 	movi	r2,1
81114c00:	d9003317 	ldw	r4,204(sp)
81114c04:	1105883a 	add	r2,r2,r4
81114c08:	d8802e15 	stw	r2,184(sp)
81114c0c:	10005f16 	blt	r2,zero,81114d8c <___svfprintf_internal_r+0x2058>
81114c10:	044019c4 	movi	r17,103
81114c14:	003ed906 	br	8111477c <__reset+0xfb0f477c>
81114c18:	d9002917 	ldw	r4,164(sp)
81114c1c:	20c00044 	addi	r3,r4,1
81114c20:	003e9c06 	br	81114694 <__reset+0xfb0f4694>
81114c24:	d9002917 	ldw	r4,164(sp)
81114c28:	00c0680e 	bge	zero,r3,81114dcc <___svfprintf_internal_r+0x2098>
81114c2c:	2000461e 	bne	r4,zero,81114d48 <___svfprintf_internal_r+0x2014>
81114c30:	9480004c 	andi	r18,r18,1
81114c34:	9000441e 	bne	r18,zero,81114d48 <___svfprintf_internal_r+0x2014>
81114c38:	1805883a 	mov	r2,r3
81114c3c:	1800a016 	blt	r3,zero,81114ec0 <___svfprintf_internal_r+0x218c>
81114c40:	d8c03217 	ldw	r3,200(sp)
81114c44:	d8c02e15 	stw	r3,184(sp)
81114c48:	003ecc06 	br	8111477c <__reset+0xfb0f477c>
81114c4c:	d9402917 	ldw	r5,164(sp)
81114c50:	d8802104 	addi	r2,sp,132
81114c54:	d8800315 	stw	r2,12(sp)
81114c58:	d9400015 	stw	r5,0(sp)
81114c5c:	d8802504 	addi	r2,sp,148
81114c60:	d9403617 	ldw	r5,216(sp)
81114c64:	d8800215 	stw	r2,8(sp)
81114c68:	d8802604 	addi	r2,sp,152
81114c6c:	d8800115 	stw	r2,4(sp)
81114c70:	01c000c4 	movi	r7,3
81114c74:	a00d883a 	mov	r6,r20
81114c78:	9809883a 	mov	r4,r19
81114c7c:	da003e15 	stw	r8,248(sp)
81114c80:	1118ec00 	call	81118ec0 <_dtoa_r>
81114c84:	d8c02917 	ldw	r3,164(sp)
81114c88:	da003e17 	ldw	r8,248(sp)
81114c8c:	1021883a 	mov	r16,r2
81114c90:	00801184 	movi	r2,70
81114c94:	80f9883a 	add	fp,r16,r3
81114c98:	88bfcc26 	beq	r17,r2,81114bcc <__reset+0xfb0f4bcc>
81114c9c:	003e9306 	br	811146ec <__reset+0xfb0f46ec>
81114ca0:	df0022c4 	addi	fp,sp,139
81114ca4:	dc002915 	stw	r16,164(sp)
81114ca8:	9829883a 	mov	r20,r19
81114cac:	e021883a 	mov	r16,fp
81114cb0:	4027883a 	mov	r19,r8
81114cb4:	b009883a 	mov	r4,r22
81114cb8:	01400284 	movi	r5,10
81114cbc:	112447c0 	call	8112447c <__modsi3>
81114cc0:	10800c04 	addi	r2,r2,48
81114cc4:	843fffc4 	addi	r16,r16,-1
81114cc8:	b009883a 	mov	r4,r22
81114ccc:	01400284 	movi	r5,10
81114cd0:	80800005 	stb	r2,0(r16)
81114cd4:	11243f80 	call	811243f8 <__divsi3>
81114cd8:	102d883a 	mov	r22,r2
81114cdc:	00800244 	movi	r2,9
81114ce0:	15bff416 	blt	r2,r22,81114cb4 <__reset+0xfb0f4cb4>
81114ce4:	9811883a 	mov	r8,r19
81114ce8:	b0800c04 	addi	r2,r22,48
81114cec:	a027883a 	mov	r19,r20
81114cf0:	8029883a 	mov	r20,r16
81114cf4:	a17fffc4 	addi	r5,r20,-1
81114cf8:	a0bfffc5 	stb	r2,-1(r20)
81114cfc:	dc002917 	ldw	r16,164(sp)
81114d00:	2f00752e 	bgeu	r5,fp,81114ed8 <___svfprintf_internal_r+0x21a4>
81114d04:	d9c02384 	addi	r7,sp,142
81114d08:	3d0fc83a 	sub	r7,r7,r20
81114d0c:	d9002344 	addi	r4,sp,141
81114d10:	e1cf883a 	add	r7,fp,r7
81114d14:	00000106 	br	81114d1c <___svfprintf_internal_r+0x1fe8>
81114d18:	28800003 	ldbu	r2,0(r5)
81114d1c:	20800005 	stb	r2,0(r4)
81114d20:	21000044 	addi	r4,r4,1
81114d24:	29400044 	addi	r5,r5,1
81114d28:	21fffb1e 	bne	r4,r7,81114d18 <__reset+0xfb0f4d18>
81114d2c:	d8802304 	addi	r2,sp,140
81114d30:	1505c83a 	sub	r2,r2,r20
81114d34:	d8c02344 	addi	r3,sp,141
81114d38:	1885883a 	add	r2,r3,r2
81114d3c:	003f7006 	br	81114b00 <__reset+0xfb0f4b00>
81114d40:	0005883a 	mov	r2,zero
81114d44:	003f0b06 	br	81114974 <__reset+0xfb0f4974>
81114d48:	d9002917 	ldw	r4,164(sp)
81114d4c:	d8c03217 	ldw	r3,200(sp)
81114d50:	20800044 	addi	r2,r4,1
81114d54:	1885883a 	add	r2,r3,r2
81114d58:	d8802e15 	stw	r2,184(sp)
81114d5c:	103e870e 	bge	r2,zero,8111477c <__reset+0xfb0f477c>
81114d60:	0005883a 	mov	r2,zero
81114d64:	003e8506 	br	8111477c <__reset+0xfb0f477c>
81114d68:	01204534 	movhi	r4,33044
81114d6c:	2136a384 	addi	r4,r4,-9586
81114d70:	d9002b15 	stw	r4,172(sp)
81114d74:	003cc506 	br	8111408c <__reset+0xfb0f408c>
81114d78:	d8c03217 	ldw	r3,200(sp)
81114d7c:	18c00044 	addi	r3,r3,1
81114d80:	d8c02e15 	stw	r3,184(sp)
81114d84:	1805883a 	mov	r2,r3
81114d88:	183fa10e 	bge	r3,zero,81114c10 <__reset+0xfb0f4c10>
81114d8c:	0005883a 	mov	r2,zero
81114d90:	003f9f06 	br	81114c10 <__reset+0xfb0f4c10>
81114d94:	d9003617 	ldw	r4,216(sp)
81114d98:	000d883a 	mov	r6,zero
81114d9c:	000f883a 	mov	r7,zero
81114da0:	a00b883a 	mov	r5,r20
81114da4:	d8c03d15 	stw	r3,244(sp)
81114da8:	da003e15 	stw	r8,248(sp)
81114dac:	112594c0 	call	8112594c <__eqdf2>
81114db0:	d8c03d17 	ldw	r3,244(sp)
81114db4:	da003e17 	ldw	r8,248(sp)
81114db8:	103f8726 	beq	r2,zero,81114bd8 <__reset+0xfb0f4bd8>
81114dbc:	00800044 	movi	r2,1
81114dc0:	10c7c83a 	sub	r3,r2,r3
81114dc4:	d8c02615 	stw	r3,152(sp)
81114dc8:	003f8406 	br	81114bdc <__reset+0xfb0f4bdc>
81114dcc:	20000e1e 	bne	r4,zero,81114e08 <___svfprintf_internal_r+0x20d4>
81114dd0:	9480004c 	andi	r18,r18,1
81114dd4:	90000c1e 	bne	r18,zero,81114e08 <___svfprintf_internal_r+0x20d4>
81114dd8:	00800044 	movi	r2,1
81114ddc:	d8802e15 	stw	r2,184(sp)
81114de0:	003e6606 	br	8111477c <__reset+0xfb0f477c>
81114de4:	00800b44 	movi	r2,45
81114de8:	05adc83a 	sub	r22,zero,r22
81114dec:	d8802305 	stb	r2,140(sp)
81114df0:	003f3b06 	br	81114ae0 <__reset+0xfb0f4ae0>
81114df4:	0005883a 	mov	r2,zero
81114df8:	003f4e06 	br	81114b34 <__reset+0xfb0f4b34>
81114dfc:	90a4703a 	and	r18,r18,r2
81114e00:	903f4a26 	beq	r18,zero,81114b2c <__reset+0xfb0f4b2c>
81114e04:	003f4606 	br	81114b20 <__reset+0xfb0f4b20>
81114e08:	d8c02917 	ldw	r3,164(sp)
81114e0c:	18c00084 	addi	r3,r3,2
81114e10:	d8c02e15 	stw	r3,184(sp)
81114e14:	1805883a 	mov	r2,r3
81114e18:	183e580e 	bge	r3,zero,8111477c <__reset+0xfb0f477c>
81114e1c:	003fd006 	br	81114d60 <__reset+0xfb0f4d60>
81114e20:	00800084 	movi	r2,2
81114e24:	10c5c83a 	sub	r2,r2,r3
81114e28:	003f7506 	br	81114c00 <__reset+0xfb0f4c00>
81114e2c:	d8802d17 	ldw	r2,180(sp)
81114e30:	d9002d17 	ldw	r4,180(sp)
81114e34:	bc400043 	ldbu	r17,1(r23)
81114e38:	10800017 	ldw	r2,0(r2)
81114e3c:	582f883a 	mov	r23,r11
81114e40:	d8802915 	stw	r2,164(sp)
81114e44:	20800104 	addi	r2,r4,4
81114e48:	d9002917 	ldw	r4,164(sp)
81114e4c:	d8802d15 	stw	r2,180(sp)
81114e50:	203df00e 	bge	r4,zero,81114614 <__reset+0xfb0f4614>
81114e54:	8c403fcc 	andi	r17,r17,255
81114e58:	00bfffc4 	movi	r2,-1
81114e5c:	8c40201c 	xori	r17,r17,128
81114e60:	d8802915 	stw	r2,164(sp)
81114e64:	8c7fe004 	addi	r17,r17,-128
81114e68:	00380806 	br	81112e8c <__reset+0xfb0f2e8c>
81114e6c:	9080004c 	andi	r2,r18,1
81114e70:	0039883a 	mov	fp,zero
81114e74:	10000726 	beq	r2,zero,81114e94 <___svfprintf_internal_r+0x2160>
81114e78:	d8c02817 	ldw	r3,160(sp)
81114e7c:	dc001dc4 	addi	r16,sp,119
81114e80:	00800c04 	movi	r2,48
81114e84:	1c07c83a 	sub	r3,r3,r16
81114e88:	d8801dc5 	stb	r2,119(sp)
81114e8c:	d8c02e15 	stw	r3,184(sp)
81114e90:	00395206 	br	811133dc <__reset+0xfb0f33dc>
81114e94:	d8002e15 	stw	zero,184(sp)
81114e98:	dc001e04 	addi	r16,sp,120
81114e9c:	00394f06 	br	811133dc <__reset+0xfb0f33dc>
81114ea0:	0005883a 	mov	r2,zero
81114ea4:	003e3206 	br	81114770 <__reset+0xfb0f4770>
81114ea8:	dd802617 	ldw	r22,152(sp)
81114eac:	003f0606 	br	81114ac8 <__reset+0xfb0f4ac8>
81114eb0:	d9c02785 	stb	r7,158(sp)
81114eb4:	003a5106 	br	811137fc <__reset+0xfb0f37fc>
81114eb8:	d9c02785 	stb	r7,158(sp)
81114ebc:	003a3706 	br	8111379c <__reset+0xfb0f379c>
81114ec0:	0005883a 	mov	r2,zero
81114ec4:	003f5e06 	br	81114c40 <__reset+0xfb0f4c40>
81114ec8:	d9c02785 	stb	r7,158(sp)
81114ecc:	00391706 	br	8111332c <__reset+0xfb0f332c>
81114ed0:	d9c02785 	stb	r7,158(sp)
81114ed4:	0038e606 	br	81113270 <__reset+0xfb0f3270>
81114ed8:	d8802344 	addi	r2,sp,141
81114edc:	003f0806 	br	81114b00 <__reset+0xfb0f4b00>
81114ee0:	d9c02785 	stb	r7,158(sp)
81114ee4:	0038b706 	br	811131c4 <__reset+0xfb0f31c4>
81114ee8:	d9c02785 	stb	r7,158(sp)
81114eec:	003adc06 	br	81113a60 <__reset+0xfb0f3a60>
81114ef0:	d9403917 	ldw	r5,228(sp)
81114ef4:	00800304 	movi	r2,12
81114ef8:	28800015 	stw	r2,0(r5)
81114efc:	00bfffc4 	movi	r2,-1
81114f00:	00387806 	br	811130e4 <__reset+0xfb0f30e4>
81114f04:	d9c02785 	stb	r7,158(sp)
81114f08:	003abf06 	br	81113a08 <__reset+0xfb0f3a08>
81114f0c:	d9c02785 	stb	r7,158(sp)
81114f10:	003a9b06 	br	81113980 <__reset+0xfb0f3980>

81114f14 <___vfprintf_internal_r>:
81114f14:	deffb804 	addi	sp,sp,-288
81114f18:	de00012e 	bgeu	sp,et,81114f20 <___vfprintf_internal_r+0xc>
81114f1c:	003b68fa 	trap	3
81114f20:	dfc04715 	stw	ra,284(sp)
81114f24:	ddc04515 	stw	r23,276(sp)
81114f28:	dd404315 	stw	r21,268(sp)
81114f2c:	d9002c15 	stw	r4,176(sp)
81114f30:	282f883a 	mov	r23,r5
81114f34:	302b883a 	mov	r21,r6
81114f38:	d9c02d15 	stw	r7,180(sp)
81114f3c:	df004615 	stw	fp,280(sp)
81114f40:	dd804415 	stw	r22,272(sp)
81114f44:	dd004215 	stw	r20,264(sp)
81114f48:	dcc04115 	stw	r19,260(sp)
81114f4c:	dc804015 	stw	r18,256(sp)
81114f50:	dc403f15 	stw	r17,252(sp)
81114f54:	dc003e15 	stw	r16,248(sp)
81114f58:	111babc0 	call	8111babc <_localeconv_r>
81114f5c:	10800017 	ldw	r2,0(r2)
81114f60:	1009883a 	mov	r4,r2
81114f64:	d8803415 	stw	r2,208(sp)
81114f68:	1112a400 	call	81112a40 <strlen>
81114f6c:	d8803715 	stw	r2,220(sp)
81114f70:	d8802c17 	ldw	r2,176(sp)
81114f74:	10000226 	beq	r2,zero,81114f80 <___vfprintf_internal_r+0x6c>
81114f78:	10800e17 	ldw	r2,56(r2)
81114f7c:	1000f926 	beq	r2,zero,81115364 <___vfprintf_internal_r+0x450>
81114f80:	b880030b 	ldhu	r2,12(r23)
81114f84:	10c8000c 	andi	r3,r2,8192
81114f88:	1800061e 	bne	r3,zero,81114fa4 <___vfprintf_internal_r+0x90>
81114f8c:	b9001917 	ldw	r4,100(r23)
81114f90:	00f7ffc4 	movi	r3,-8193
81114f94:	10880014 	ori	r2,r2,8192
81114f98:	20c6703a 	and	r3,r4,r3
81114f9c:	b880030d 	sth	r2,12(r23)
81114fa0:	b8c01915 	stw	r3,100(r23)
81114fa4:	10c0020c 	andi	r3,r2,8
81114fa8:	1800c126 	beq	r3,zero,811152b0 <___vfprintf_internal_r+0x39c>
81114fac:	b8c00417 	ldw	r3,16(r23)
81114fb0:	1800bf26 	beq	r3,zero,811152b0 <___vfprintf_internal_r+0x39c>
81114fb4:	1080068c 	andi	r2,r2,26
81114fb8:	00c00284 	movi	r3,10
81114fbc:	10c0c426 	beq	r2,r3,811152d0 <___vfprintf_internal_r+0x3bc>
81114fc0:	d8c00404 	addi	r3,sp,16
81114fc4:	05204534 	movhi	r20,33044
81114fc8:	d9001e04 	addi	r4,sp,120
81114fcc:	a536ab84 	addi	r20,r20,-9554
81114fd0:	d8c01e15 	stw	r3,120(sp)
81114fd4:	d8002015 	stw	zero,128(sp)
81114fd8:	d8001f15 	stw	zero,124(sp)
81114fdc:	d8003315 	stw	zero,204(sp)
81114fe0:	d8003615 	stw	zero,216(sp)
81114fe4:	d8003815 	stw	zero,224(sp)
81114fe8:	1811883a 	mov	r8,r3
81114fec:	d8003915 	stw	zero,228(sp)
81114ff0:	d8003a15 	stw	zero,232(sp)
81114ff4:	d8002f15 	stw	zero,188(sp)
81114ff8:	d9002815 	stw	r4,160(sp)
81114ffc:	a8800007 	ldb	r2,0(r21)
81115000:	10027b26 	beq	r2,zero,811159f0 <___vfprintf_internal_r+0xadc>
81115004:	00c00944 	movi	r3,37
81115008:	a821883a 	mov	r16,r21
8111500c:	10c0021e 	bne	r2,r3,81115018 <___vfprintf_internal_r+0x104>
81115010:	00001406 	br	81115064 <___vfprintf_internal_r+0x150>
81115014:	10c00326 	beq	r2,r3,81115024 <___vfprintf_internal_r+0x110>
81115018:	84000044 	addi	r16,r16,1
8111501c:	80800007 	ldb	r2,0(r16)
81115020:	103ffc1e 	bne	r2,zero,81115014 <__reset+0xfb0f5014>
81115024:	8563c83a 	sub	r17,r16,r21
81115028:	88000e26 	beq	r17,zero,81115064 <___vfprintf_internal_r+0x150>
8111502c:	d8c02017 	ldw	r3,128(sp)
81115030:	d8801f17 	ldw	r2,124(sp)
81115034:	45400015 	stw	r21,0(r8)
81115038:	1c47883a 	add	r3,r3,r17
8111503c:	10800044 	addi	r2,r2,1
81115040:	d8c02015 	stw	r3,128(sp)
81115044:	44400115 	stw	r17,4(r8)
81115048:	d8801f15 	stw	r2,124(sp)
8111504c:	00c001c4 	movi	r3,7
81115050:	1880a716 	blt	r3,r2,811152f0 <___vfprintf_internal_r+0x3dc>
81115054:	42000204 	addi	r8,r8,8
81115058:	d9402f17 	ldw	r5,188(sp)
8111505c:	2c4b883a 	add	r5,r5,r17
81115060:	d9402f15 	stw	r5,188(sp)
81115064:	80800007 	ldb	r2,0(r16)
81115068:	1000a826 	beq	r2,zero,8111530c <___vfprintf_internal_r+0x3f8>
8111506c:	84400047 	ldb	r17,1(r16)
81115070:	00bfffc4 	movi	r2,-1
81115074:	85400044 	addi	r21,r16,1
81115078:	d8002785 	stb	zero,158(sp)
8111507c:	0007883a 	mov	r3,zero
81115080:	000f883a 	mov	r7,zero
81115084:	d8802915 	stw	r2,164(sp)
81115088:	d8003115 	stw	zero,196(sp)
8111508c:	0025883a 	mov	r18,zero
81115090:	01401604 	movi	r5,88
81115094:	01800244 	movi	r6,9
81115098:	02800a84 	movi	r10,42
8111509c:	02401b04 	movi	r9,108
811150a0:	ad400044 	addi	r21,r21,1
811150a4:	88bff804 	addi	r2,r17,-32
811150a8:	28830436 	bltu	r5,r2,81115cbc <___vfprintf_internal_r+0xda8>
811150ac:	100490ba 	slli	r2,r2,2
811150b0:	01204474 	movhi	r4,33041
811150b4:	21143104 	addi	r4,r4,20676
811150b8:	1105883a 	add	r2,r2,r4
811150bc:	10800017 	ldw	r2,0(r2)
811150c0:	1000683a 	jmp	r2
811150c4:	81115bdc 	xori	r4,r16,17775
811150c8:	81115cbc 	xorhi	r4,r16,17778
811150cc:	81115cbc 	xorhi	r4,r16,17778
811150d0:	81115bfc 	xorhi	r4,r16,17775
811150d4:	81115cbc 	xorhi	r4,r16,17778
811150d8:	81115cbc 	xorhi	r4,r16,17778
811150dc:	81115cbc 	xorhi	r4,r16,17778
811150e0:	81115cbc 	xorhi	r4,r16,17778
811150e4:	81115cbc 	xorhi	r4,r16,17778
811150e8:	81115cbc 	xorhi	r4,r16,17778
811150ec:	81115370 	cmpltui	r4,r16,17741
811150f0:	81115b18 	cmpnei	r4,r16,17772
811150f4:	81115cbc 	xorhi	r4,r16,17778
811150f8:	81115238 	rdprs	r4,r16,17736
811150fc:	81115398 	cmpnei	r4,r16,17742
81115100:	81115cbc 	xorhi	r4,r16,17778
81115104:	811153d8 	cmpnei	r4,r16,17743
81115108:	811153e4 	muli	r4,r16,17743
8111510c:	811153e4 	muli	r4,r16,17743
81115110:	811153e4 	muli	r4,r16,17743
81115114:	811153e4 	muli	r4,r16,17743
81115118:	811153e4 	muli	r4,r16,17743
8111511c:	811153e4 	muli	r4,r16,17743
81115120:	811153e4 	muli	r4,r16,17743
81115124:	811153e4 	muli	r4,r16,17743
81115128:	811153e4 	muli	r4,r16,17743
8111512c:	81115cbc 	xorhi	r4,r16,17778
81115130:	81115cbc 	xorhi	r4,r16,17778
81115134:	81115cbc 	xorhi	r4,r16,17778
81115138:	81115cbc 	xorhi	r4,r16,17778
8111513c:	81115cbc 	xorhi	r4,r16,17778
81115140:	81115cbc 	xorhi	r4,r16,17778
81115144:	81115cbc 	xorhi	r4,r16,17778
81115148:	81115cbc 	xorhi	r4,r16,17778
8111514c:	81115cbc 	xorhi	r4,r16,17778
81115150:	81115cbc 	xorhi	r4,r16,17778
81115154:	81115418 	cmpnei	r4,r16,17744
81115158:	811154d4 	ori	r4,r16,17747
8111515c:	81115cbc 	xorhi	r4,r16,17778
81115160:	811154d4 	ori	r4,r16,17747
81115164:	81115cbc 	xorhi	r4,r16,17778
81115168:	81115cbc 	xorhi	r4,r16,17778
8111516c:	81115cbc 	xorhi	r4,r16,17778
81115170:	81115cbc 	xorhi	r4,r16,17778
81115174:	81115574 	orhi	r4,r16,17749
81115178:	81115cbc 	xorhi	r4,r16,17778
8111517c:	81115cbc 	xorhi	r4,r16,17778
81115180:	81115580 	call	88111558 <__reset+0x20f1558>
81115184:	81115cbc 	xorhi	r4,r16,17778
81115188:	81115cbc 	xorhi	r4,r16,17778
8111518c:	81115cbc 	xorhi	r4,r16,17778
81115190:	81115cbc 	xorhi	r4,r16,17778
81115194:	81115cbc 	xorhi	r4,r16,17778
81115198:	811159f8 	rdprs	r4,r16,17767
8111519c:	81115cbc 	xorhi	r4,r16,17778
811151a0:	81115cbc 	xorhi	r4,r16,17778
811151a4:	81115a58 	cmpnei	r4,r16,17769
811151a8:	81115cbc 	xorhi	r4,r16,17778
811151ac:	81115cbc 	xorhi	r4,r16,17778
811151b0:	81115cbc 	xorhi	r4,r16,17778
811151b4:	81115cbc 	xorhi	r4,r16,17778
811151b8:	81115cbc 	xorhi	r4,r16,17778
811151bc:	81115cbc 	xorhi	r4,r16,17778
811151c0:	81115cbc 	xorhi	r4,r16,17778
811151c4:	81115cbc 	xorhi	r4,r16,17778
811151c8:	81115cbc 	xorhi	r4,r16,17778
811151cc:	81115cbc 	xorhi	r4,r16,17778
811151d0:	81115c68 	cmpgeui	r4,r16,17777
811151d4:	81115c08 	cmpgei	r4,r16,17776
811151d8:	811154d4 	ori	r4,r16,17747
811151dc:	811154d4 	ori	r4,r16,17747
811151e0:	811154d4 	ori	r4,r16,17747
811151e4:	81115c18 	cmpnei	r4,r16,17776
811151e8:	81115c08 	cmpgei	r4,r16,17776
811151ec:	81115cbc 	xorhi	r4,r16,17778
811151f0:	81115cbc 	xorhi	r4,r16,17778
811151f4:	81115c24 	muli	r4,r16,17776
811151f8:	81115cbc 	xorhi	r4,r16,17778
811151fc:	81115c34 	orhi	r4,r16,17776
81115200:	81115b08 	cmpgei	r4,r16,17772
81115204:	81115244 	addi	r4,r16,17737
81115208:	81115b28 	cmpgeui	r4,r16,17772
8111520c:	81115cbc 	xorhi	r4,r16,17778
81115210:	81115b34 	orhi	r4,r16,17772
81115214:	81115cbc 	xorhi	r4,r16,17778
81115218:	81115b90 	cmplti	r4,r16,17774
8111521c:	81115cbc 	xorhi	r4,r16,17778
81115220:	81115cbc 	xorhi	r4,r16,17778
81115224:	81115ba0 	cmpeqi	r4,r16,17774
81115228:	d9003117 	ldw	r4,196(sp)
8111522c:	d8802d15 	stw	r2,180(sp)
81115230:	0109c83a 	sub	r4,zero,r4
81115234:	d9003115 	stw	r4,196(sp)
81115238:	94800114 	ori	r18,r18,4
8111523c:	ac400007 	ldb	r17,0(r21)
81115240:	003f9706 	br	811150a0 <__reset+0xfb0f50a0>
81115244:	00800c04 	movi	r2,48
81115248:	d9002d17 	ldw	r4,180(sp)
8111524c:	d9402917 	ldw	r5,164(sp)
81115250:	d8802705 	stb	r2,156(sp)
81115254:	00801e04 	movi	r2,120
81115258:	d8802745 	stb	r2,157(sp)
8111525c:	d8002785 	stb	zero,158(sp)
81115260:	20c00104 	addi	r3,r4,4
81115264:	24c00017 	ldw	r19,0(r4)
81115268:	002d883a 	mov	r22,zero
8111526c:	90800094 	ori	r2,r18,2
81115270:	28029a16 	blt	r5,zero,81115cdc <___vfprintf_internal_r+0xdc8>
81115274:	00bfdfc4 	movi	r2,-129
81115278:	90a4703a 	and	r18,r18,r2
8111527c:	d8c02d15 	stw	r3,180(sp)
81115280:	94800094 	ori	r18,r18,2
81115284:	9802871e 	bne	r19,zero,81115ca4 <___vfprintf_internal_r+0xd90>
81115288:	00a04534 	movhi	r2,33044
8111528c:	10b69c04 	addi	r2,r2,-9616
81115290:	d8803915 	stw	r2,228(sp)
81115294:	04401e04 	movi	r17,120
81115298:	d8802917 	ldw	r2,164(sp)
8111529c:	0039883a 	mov	fp,zero
811152a0:	1001e926 	beq	r2,zero,81115a48 <___vfprintf_internal_r+0xb34>
811152a4:	0027883a 	mov	r19,zero
811152a8:	002d883a 	mov	r22,zero
811152ac:	00020506 	br	81115ac4 <___vfprintf_internal_r+0xbb0>
811152b0:	d9002c17 	ldw	r4,176(sp)
811152b4:	b80b883a 	mov	r5,r23
811152b8:	1118b000 	call	81118b00 <__swsetup_r>
811152bc:	1005ac1e 	bne	r2,zero,81116970 <___vfprintf_internal_r+0x1a5c>
811152c0:	b880030b 	ldhu	r2,12(r23)
811152c4:	00c00284 	movi	r3,10
811152c8:	1080068c 	andi	r2,r2,26
811152cc:	10ff3c1e 	bne	r2,r3,81114fc0 <__reset+0xfb0f4fc0>
811152d0:	b880038f 	ldh	r2,14(r23)
811152d4:	103f3a16 	blt	r2,zero,81114fc0 <__reset+0xfb0f4fc0>
811152d8:	d9c02d17 	ldw	r7,180(sp)
811152dc:	d9002c17 	ldw	r4,176(sp)
811152e0:	a80d883a 	mov	r6,r21
811152e4:	b80b883a 	mov	r5,r23
811152e8:	11171300 	call	81117130 <__sbprintf>
811152ec:	00001106 	br	81115334 <___vfprintf_internal_r+0x420>
811152f0:	d9002c17 	ldw	r4,176(sp)
811152f4:	d9801e04 	addi	r6,sp,120
811152f8:	b80b883a 	mov	r5,r23
811152fc:	1120fa40 	call	81120fa4 <__sprint_r>
81115300:	1000081e 	bne	r2,zero,81115324 <___vfprintf_internal_r+0x410>
81115304:	da000404 	addi	r8,sp,16
81115308:	003f5306 	br	81115058 <__reset+0xfb0f5058>
8111530c:	d8802017 	ldw	r2,128(sp)
81115310:	10000426 	beq	r2,zero,81115324 <___vfprintf_internal_r+0x410>
81115314:	d9002c17 	ldw	r4,176(sp)
81115318:	d9801e04 	addi	r6,sp,120
8111531c:	b80b883a 	mov	r5,r23
81115320:	1120fa40 	call	81120fa4 <__sprint_r>
81115324:	b880030b 	ldhu	r2,12(r23)
81115328:	1080100c 	andi	r2,r2,64
8111532c:	1005901e 	bne	r2,zero,81116970 <___vfprintf_internal_r+0x1a5c>
81115330:	d8802f17 	ldw	r2,188(sp)
81115334:	dfc04717 	ldw	ra,284(sp)
81115338:	df004617 	ldw	fp,280(sp)
8111533c:	ddc04517 	ldw	r23,276(sp)
81115340:	dd804417 	ldw	r22,272(sp)
81115344:	dd404317 	ldw	r21,268(sp)
81115348:	dd004217 	ldw	r20,264(sp)
8111534c:	dcc04117 	ldw	r19,260(sp)
81115350:	dc804017 	ldw	r18,256(sp)
81115354:	dc403f17 	ldw	r17,252(sp)
81115358:	dc003e17 	ldw	r16,248(sp)
8111535c:	dec04804 	addi	sp,sp,288
81115360:	f800283a 	ret
81115364:	d9002c17 	ldw	r4,176(sp)
81115368:	111ab700 	call	8111ab70 <__sinit>
8111536c:	003f0406 	br	81114f80 <__reset+0xfb0f4f80>
81115370:	d8802d17 	ldw	r2,180(sp)
81115374:	d9002d17 	ldw	r4,180(sp)
81115378:	10800017 	ldw	r2,0(r2)
8111537c:	d8803115 	stw	r2,196(sp)
81115380:	20800104 	addi	r2,r4,4
81115384:	d9003117 	ldw	r4,196(sp)
81115388:	203fa716 	blt	r4,zero,81115228 <__reset+0xfb0f5228>
8111538c:	d8802d15 	stw	r2,180(sp)
81115390:	ac400007 	ldb	r17,0(r21)
81115394:	003f4206 	br	811150a0 <__reset+0xfb0f50a0>
81115398:	ac400007 	ldb	r17,0(r21)
8111539c:	aac00044 	addi	r11,r21,1
811153a0:	8a872826 	beq	r17,r10,81117044 <___vfprintf_internal_r+0x2130>
811153a4:	88bff404 	addi	r2,r17,-48
811153a8:	0009883a 	mov	r4,zero
811153ac:	30867d36 	bltu	r6,r2,81116da4 <___vfprintf_internal_r+0x1e90>
811153b0:	5c400007 	ldb	r17,0(r11)
811153b4:	210002a4 	muli	r4,r4,10
811153b8:	5d400044 	addi	r21,r11,1
811153bc:	a817883a 	mov	r11,r21
811153c0:	2089883a 	add	r4,r4,r2
811153c4:	88bff404 	addi	r2,r17,-48
811153c8:	30bff92e 	bgeu	r6,r2,811153b0 <__reset+0xfb0f53b0>
811153cc:	2005c916 	blt	r4,zero,81116af4 <___vfprintf_internal_r+0x1be0>
811153d0:	d9002915 	stw	r4,164(sp)
811153d4:	003f3306 	br	811150a4 <__reset+0xfb0f50a4>
811153d8:	94802014 	ori	r18,r18,128
811153dc:	ac400007 	ldb	r17,0(r21)
811153e0:	003f2f06 	br	811150a0 <__reset+0xfb0f50a0>
811153e4:	a809883a 	mov	r4,r21
811153e8:	d8003115 	stw	zero,196(sp)
811153ec:	88bff404 	addi	r2,r17,-48
811153f0:	0017883a 	mov	r11,zero
811153f4:	24400007 	ldb	r17,0(r4)
811153f8:	5ac002a4 	muli	r11,r11,10
811153fc:	ad400044 	addi	r21,r21,1
81115400:	a809883a 	mov	r4,r21
81115404:	12d7883a 	add	r11,r2,r11
81115408:	88bff404 	addi	r2,r17,-48
8111540c:	30bff92e 	bgeu	r6,r2,811153f4 <__reset+0xfb0f53f4>
81115410:	dac03115 	stw	r11,196(sp)
81115414:	003f2306 	br	811150a4 <__reset+0xfb0f50a4>
81115418:	18c03fcc 	andi	r3,r3,255
8111541c:	18072b1e 	bne	r3,zero,811170cc <___vfprintf_internal_r+0x21b8>
81115420:	94800414 	ori	r18,r18,16
81115424:	9080080c 	andi	r2,r18,32
81115428:	10037b26 	beq	r2,zero,81116218 <___vfprintf_internal_r+0x1304>
8111542c:	d9402d17 	ldw	r5,180(sp)
81115430:	28800117 	ldw	r2,4(r5)
81115434:	2cc00017 	ldw	r19,0(r5)
81115438:	29400204 	addi	r5,r5,8
8111543c:	d9402d15 	stw	r5,180(sp)
81115440:	102d883a 	mov	r22,r2
81115444:	10044b16 	blt	r2,zero,81116574 <___vfprintf_internal_r+0x1660>
81115448:	d9402917 	ldw	r5,164(sp)
8111544c:	df002783 	ldbu	fp,158(sp)
81115450:	2803bc16 	blt	r5,zero,81116344 <___vfprintf_internal_r+0x1430>
81115454:	00ffdfc4 	movi	r3,-129
81115458:	9d84b03a 	or	r2,r19,r22
8111545c:	90e4703a 	and	r18,r18,r3
81115460:	10017726 	beq	r2,zero,81115a40 <___vfprintf_internal_r+0xb2c>
81115464:	b0038326 	beq	r22,zero,81116274 <___vfprintf_internal_r+0x1360>
81115468:	dc402a15 	stw	r17,168(sp)
8111546c:	dc001e04 	addi	r16,sp,120
81115470:	b023883a 	mov	r17,r22
81115474:	402d883a 	mov	r22,r8
81115478:	9809883a 	mov	r4,r19
8111547c:	880b883a 	mov	r5,r17
81115480:	01800284 	movi	r6,10
81115484:	000f883a 	mov	r7,zero
81115488:	1123eb80 	call	81123eb8 <__umoddi3>
8111548c:	10800c04 	addi	r2,r2,48
81115490:	843fffc4 	addi	r16,r16,-1
81115494:	9809883a 	mov	r4,r19
81115498:	880b883a 	mov	r5,r17
8111549c:	80800005 	stb	r2,0(r16)
811154a0:	01800284 	movi	r6,10
811154a4:	000f883a 	mov	r7,zero
811154a8:	11239380 	call	81123938 <__udivdi3>
811154ac:	1027883a 	mov	r19,r2
811154b0:	10c4b03a 	or	r2,r2,r3
811154b4:	1823883a 	mov	r17,r3
811154b8:	103fef1e 	bne	r2,zero,81115478 <__reset+0xfb0f5478>
811154bc:	d8c02817 	ldw	r3,160(sp)
811154c0:	dc402a17 	ldw	r17,168(sp)
811154c4:	b011883a 	mov	r8,r22
811154c8:	1c07c83a 	sub	r3,r3,r16
811154cc:	d8c02e15 	stw	r3,184(sp)
811154d0:	00005906 	br	81115638 <___vfprintf_internal_r+0x724>
811154d4:	18c03fcc 	andi	r3,r3,255
811154d8:	1806fa1e 	bne	r3,zero,811170c4 <___vfprintf_internal_r+0x21b0>
811154dc:	9080020c 	andi	r2,r18,8
811154e0:	10048a26 	beq	r2,zero,8111670c <___vfprintf_internal_r+0x17f8>
811154e4:	d8c02d17 	ldw	r3,180(sp)
811154e8:	d9002d17 	ldw	r4,180(sp)
811154ec:	d9402d17 	ldw	r5,180(sp)
811154f0:	18c00017 	ldw	r3,0(r3)
811154f4:	21000117 	ldw	r4,4(r4)
811154f8:	29400204 	addi	r5,r5,8
811154fc:	d8c03615 	stw	r3,216(sp)
81115500:	d9003815 	stw	r4,224(sp)
81115504:	d9402d15 	stw	r5,180(sp)
81115508:	d9003617 	ldw	r4,216(sp)
8111550c:	d9403817 	ldw	r5,224(sp)
81115510:	da003d15 	stw	r8,244(sp)
81115514:	04000044 	movi	r16,1
81115518:	111d6080 	call	8111d608 <__fpclassifyd>
8111551c:	da003d17 	ldw	r8,244(sp)
81115520:	14041f1e 	bne	r2,r16,811165a0 <___vfprintf_internal_r+0x168c>
81115524:	d9003617 	ldw	r4,216(sp)
81115528:	d9403817 	ldw	r5,224(sp)
8111552c:	000d883a 	mov	r6,zero
81115530:	000f883a 	mov	r7,zero
81115534:	1125ab00 	call	81125ab0 <__ledf2>
81115538:	da003d17 	ldw	r8,244(sp)
8111553c:	1005be16 	blt	r2,zero,81116c38 <___vfprintf_internal_r+0x1d24>
81115540:	df002783 	ldbu	fp,158(sp)
81115544:	008011c4 	movi	r2,71
81115548:	1445330e 	bge	r2,r17,81116a18 <___vfprintf_internal_r+0x1b04>
8111554c:	04204534 	movhi	r16,33044
81115550:	84369404 	addi	r16,r16,-9648
81115554:	00c000c4 	movi	r3,3
81115558:	00bfdfc4 	movi	r2,-129
8111555c:	d8c02a15 	stw	r3,168(sp)
81115560:	90a4703a 	and	r18,r18,r2
81115564:	d8c02e15 	stw	r3,184(sp)
81115568:	d8002915 	stw	zero,164(sp)
8111556c:	d8003215 	stw	zero,200(sp)
81115570:	00003706 	br	81115650 <___vfprintf_internal_r+0x73c>
81115574:	94800214 	ori	r18,r18,8
81115578:	ac400007 	ldb	r17,0(r21)
8111557c:	003ec806 	br	811150a0 <__reset+0xfb0f50a0>
81115580:	18c03fcc 	andi	r3,r3,255
81115584:	1806db1e 	bne	r3,zero,811170f4 <___vfprintf_internal_r+0x21e0>
81115588:	94800414 	ori	r18,r18,16
8111558c:	9080080c 	andi	r2,r18,32
81115590:	1002d826 	beq	r2,zero,811160f4 <___vfprintf_internal_r+0x11e0>
81115594:	d9402d17 	ldw	r5,180(sp)
81115598:	d8c02917 	ldw	r3,164(sp)
8111559c:	d8002785 	stb	zero,158(sp)
811155a0:	28800204 	addi	r2,r5,8
811155a4:	2cc00017 	ldw	r19,0(r5)
811155a8:	2d800117 	ldw	r22,4(r5)
811155ac:	18048f16 	blt	r3,zero,811167ec <___vfprintf_internal_r+0x18d8>
811155b0:	013fdfc4 	movi	r4,-129
811155b4:	9d86b03a 	or	r3,r19,r22
811155b8:	d8802d15 	stw	r2,180(sp)
811155bc:	9124703a 	and	r18,r18,r4
811155c0:	1802d91e 	bne	r3,zero,81116128 <___vfprintf_internal_r+0x1214>
811155c4:	d8c02917 	ldw	r3,164(sp)
811155c8:	0039883a 	mov	fp,zero
811155cc:	1805c326 	beq	r3,zero,81116cdc <___vfprintf_internal_r+0x1dc8>
811155d0:	0027883a 	mov	r19,zero
811155d4:	002d883a 	mov	r22,zero
811155d8:	dc001e04 	addi	r16,sp,120
811155dc:	9806d0fa 	srli	r3,r19,3
811155e0:	b008977a 	slli	r4,r22,29
811155e4:	b02cd0fa 	srli	r22,r22,3
811155e8:	9cc001cc 	andi	r19,r19,7
811155ec:	98800c04 	addi	r2,r19,48
811155f0:	843fffc4 	addi	r16,r16,-1
811155f4:	20e6b03a 	or	r19,r4,r3
811155f8:	80800005 	stb	r2,0(r16)
811155fc:	9d86b03a 	or	r3,r19,r22
81115600:	183ff61e 	bne	r3,zero,811155dc <__reset+0xfb0f55dc>
81115604:	90c0004c 	andi	r3,r18,1
81115608:	18013b26 	beq	r3,zero,81115af8 <___vfprintf_internal_r+0xbe4>
8111560c:	10803fcc 	andi	r2,r2,255
81115610:	1080201c 	xori	r2,r2,128
81115614:	10bfe004 	addi	r2,r2,-128
81115618:	00c00c04 	movi	r3,48
8111561c:	10c13626 	beq	r2,r3,81115af8 <___vfprintf_internal_r+0xbe4>
81115620:	80ffffc5 	stb	r3,-1(r16)
81115624:	d8c02817 	ldw	r3,160(sp)
81115628:	80bfffc4 	addi	r2,r16,-1
8111562c:	1021883a 	mov	r16,r2
81115630:	1887c83a 	sub	r3,r3,r2
81115634:	d8c02e15 	stw	r3,184(sp)
81115638:	d8802e17 	ldw	r2,184(sp)
8111563c:	d9002917 	ldw	r4,164(sp)
81115640:	1100010e 	bge	r2,r4,81115648 <___vfprintf_internal_r+0x734>
81115644:	2005883a 	mov	r2,r4
81115648:	d8802a15 	stw	r2,168(sp)
8111564c:	d8003215 	stw	zero,200(sp)
81115650:	e7003fcc 	andi	fp,fp,255
81115654:	e700201c 	xori	fp,fp,128
81115658:	e73fe004 	addi	fp,fp,-128
8111565c:	e0000326 	beq	fp,zero,8111566c <___vfprintf_internal_r+0x758>
81115660:	d8c02a17 	ldw	r3,168(sp)
81115664:	18c00044 	addi	r3,r3,1
81115668:	d8c02a15 	stw	r3,168(sp)
8111566c:	90c0008c 	andi	r3,r18,2
81115670:	d8c02b15 	stw	r3,172(sp)
81115674:	18000326 	beq	r3,zero,81115684 <___vfprintf_internal_r+0x770>
81115678:	d8c02a17 	ldw	r3,168(sp)
8111567c:	18c00084 	addi	r3,r3,2
81115680:	d8c02a15 	stw	r3,168(sp)
81115684:	90c0210c 	andi	r3,r18,132
81115688:	d8c03015 	stw	r3,192(sp)
8111568c:	1801a31e 	bne	r3,zero,81115d1c <___vfprintf_internal_r+0xe08>
81115690:	d9003117 	ldw	r4,196(sp)
81115694:	d8c02a17 	ldw	r3,168(sp)
81115698:	20e7c83a 	sub	r19,r4,r3
8111569c:	04c19f0e 	bge	zero,r19,81115d1c <___vfprintf_internal_r+0xe08>
811156a0:	02400404 	movi	r9,16
811156a4:	d8c02017 	ldw	r3,128(sp)
811156a8:	d8801f17 	ldw	r2,124(sp)
811156ac:	4cc50d0e 	bge	r9,r19,81116ae4 <___vfprintf_internal_r+0x1bd0>
811156b0:	01604534 	movhi	r5,33044
811156b4:	2976af84 	addi	r5,r5,-9538
811156b8:	dc403b15 	stw	r17,236(sp)
811156bc:	d9403515 	stw	r5,212(sp)
811156c0:	9823883a 	mov	r17,r19
811156c4:	482d883a 	mov	r22,r9
811156c8:	9027883a 	mov	r19,r18
811156cc:	070001c4 	movi	fp,7
811156d0:	8025883a 	mov	r18,r16
811156d4:	dc002c17 	ldw	r16,176(sp)
811156d8:	00000306 	br	811156e8 <___vfprintf_internal_r+0x7d4>
811156dc:	8c7ffc04 	addi	r17,r17,-16
811156e0:	42000204 	addi	r8,r8,8
811156e4:	b440130e 	bge	r22,r17,81115734 <___vfprintf_internal_r+0x820>
811156e8:	01204534 	movhi	r4,33044
811156ec:	18c00404 	addi	r3,r3,16
811156f0:	10800044 	addi	r2,r2,1
811156f4:	2136af84 	addi	r4,r4,-9538
811156f8:	41000015 	stw	r4,0(r8)
811156fc:	45800115 	stw	r22,4(r8)
81115700:	d8c02015 	stw	r3,128(sp)
81115704:	d8801f15 	stw	r2,124(sp)
81115708:	e0bff40e 	bge	fp,r2,811156dc <__reset+0xfb0f56dc>
8111570c:	d9801e04 	addi	r6,sp,120
81115710:	b80b883a 	mov	r5,r23
81115714:	8009883a 	mov	r4,r16
81115718:	1120fa40 	call	81120fa4 <__sprint_r>
8111571c:	103f011e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81115720:	8c7ffc04 	addi	r17,r17,-16
81115724:	d8c02017 	ldw	r3,128(sp)
81115728:	d8801f17 	ldw	r2,124(sp)
8111572c:	da000404 	addi	r8,sp,16
81115730:	b47fed16 	blt	r22,r17,811156e8 <__reset+0xfb0f56e8>
81115734:	9021883a 	mov	r16,r18
81115738:	9825883a 	mov	r18,r19
8111573c:	8827883a 	mov	r19,r17
81115740:	dc403b17 	ldw	r17,236(sp)
81115744:	d9403517 	ldw	r5,212(sp)
81115748:	98c7883a 	add	r3,r19,r3
8111574c:	10800044 	addi	r2,r2,1
81115750:	41400015 	stw	r5,0(r8)
81115754:	44c00115 	stw	r19,4(r8)
81115758:	d8c02015 	stw	r3,128(sp)
8111575c:	d8801f15 	stw	r2,124(sp)
81115760:	010001c4 	movi	r4,7
81115764:	2082a316 	blt	r4,r2,811161f4 <___vfprintf_internal_r+0x12e0>
81115768:	df002787 	ldb	fp,158(sp)
8111576c:	42000204 	addi	r8,r8,8
81115770:	e0000c26 	beq	fp,zero,811157a4 <___vfprintf_internal_r+0x890>
81115774:	d8801f17 	ldw	r2,124(sp)
81115778:	d9002784 	addi	r4,sp,158
8111577c:	18c00044 	addi	r3,r3,1
81115780:	10800044 	addi	r2,r2,1
81115784:	41000015 	stw	r4,0(r8)
81115788:	01000044 	movi	r4,1
8111578c:	41000115 	stw	r4,4(r8)
81115790:	d8c02015 	stw	r3,128(sp)
81115794:	d8801f15 	stw	r2,124(sp)
81115798:	010001c4 	movi	r4,7
8111579c:	20823c16 	blt	r4,r2,81116090 <___vfprintf_internal_r+0x117c>
811157a0:	42000204 	addi	r8,r8,8
811157a4:	d8802b17 	ldw	r2,172(sp)
811157a8:	10000c26 	beq	r2,zero,811157dc <___vfprintf_internal_r+0x8c8>
811157ac:	d8801f17 	ldw	r2,124(sp)
811157b0:	d9002704 	addi	r4,sp,156
811157b4:	18c00084 	addi	r3,r3,2
811157b8:	10800044 	addi	r2,r2,1
811157bc:	41000015 	stw	r4,0(r8)
811157c0:	01000084 	movi	r4,2
811157c4:	41000115 	stw	r4,4(r8)
811157c8:	d8c02015 	stw	r3,128(sp)
811157cc:	d8801f15 	stw	r2,124(sp)
811157d0:	010001c4 	movi	r4,7
811157d4:	20823616 	blt	r4,r2,811160b0 <___vfprintf_internal_r+0x119c>
811157d8:	42000204 	addi	r8,r8,8
811157dc:	d9003017 	ldw	r4,192(sp)
811157e0:	00802004 	movi	r2,128
811157e4:	20819926 	beq	r4,r2,81115e4c <___vfprintf_internal_r+0xf38>
811157e8:	d9402917 	ldw	r5,164(sp)
811157ec:	d8802e17 	ldw	r2,184(sp)
811157f0:	28adc83a 	sub	r22,r5,r2
811157f4:	0580310e 	bge	zero,r22,811158bc <___vfprintf_internal_r+0x9a8>
811157f8:	07000404 	movi	fp,16
811157fc:	d8801f17 	ldw	r2,124(sp)
81115800:	e584140e 	bge	fp,r22,81116854 <___vfprintf_internal_r+0x1940>
81115804:	01604534 	movhi	r5,33044
81115808:	2976ab84 	addi	r5,r5,-9554
8111580c:	dc402915 	stw	r17,164(sp)
81115810:	d9402b15 	stw	r5,172(sp)
81115814:	b023883a 	mov	r17,r22
81115818:	04c001c4 	movi	r19,7
8111581c:	a82d883a 	mov	r22,r21
81115820:	902b883a 	mov	r21,r18
81115824:	8025883a 	mov	r18,r16
81115828:	dc002c17 	ldw	r16,176(sp)
8111582c:	00000306 	br	8111583c <___vfprintf_internal_r+0x928>
81115830:	8c7ffc04 	addi	r17,r17,-16
81115834:	42000204 	addi	r8,r8,8
81115838:	e440110e 	bge	fp,r17,81115880 <___vfprintf_internal_r+0x96c>
8111583c:	18c00404 	addi	r3,r3,16
81115840:	10800044 	addi	r2,r2,1
81115844:	45000015 	stw	r20,0(r8)
81115848:	47000115 	stw	fp,4(r8)
8111584c:	d8c02015 	stw	r3,128(sp)
81115850:	d8801f15 	stw	r2,124(sp)
81115854:	98bff60e 	bge	r19,r2,81115830 <__reset+0xfb0f5830>
81115858:	d9801e04 	addi	r6,sp,120
8111585c:	b80b883a 	mov	r5,r23
81115860:	8009883a 	mov	r4,r16
81115864:	1120fa40 	call	81120fa4 <__sprint_r>
81115868:	103eae1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
8111586c:	8c7ffc04 	addi	r17,r17,-16
81115870:	d8c02017 	ldw	r3,128(sp)
81115874:	d8801f17 	ldw	r2,124(sp)
81115878:	da000404 	addi	r8,sp,16
8111587c:	e47fef16 	blt	fp,r17,8111583c <__reset+0xfb0f583c>
81115880:	9021883a 	mov	r16,r18
81115884:	a825883a 	mov	r18,r21
81115888:	b02b883a 	mov	r21,r22
8111588c:	882d883a 	mov	r22,r17
81115890:	dc402917 	ldw	r17,164(sp)
81115894:	d9002b17 	ldw	r4,172(sp)
81115898:	1d87883a 	add	r3,r3,r22
8111589c:	10800044 	addi	r2,r2,1
811158a0:	41000015 	stw	r4,0(r8)
811158a4:	45800115 	stw	r22,4(r8)
811158a8:	d8c02015 	stw	r3,128(sp)
811158ac:	d8801f15 	stw	r2,124(sp)
811158b0:	010001c4 	movi	r4,7
811158b4:	2081ee16 	blt	r4,r2,81116070 <___vfprintf_internal_r+0x115c>
811158b8:	42000204 	addi	r8,r8,8
811158bc:	9080400c 	andi	r2,r18,256
811158c0:	1001181e 	bne	r2,zero,81115d24 <___vfprintf_internal_r+0xe10>
811158c4:	d9402e17 	ldw	r5,184(sp)
811158c8:	d8801f17 	ldw	r2,124(sp)
811158cc:	44000015 	stw	r16,0(r8)
811158d0:	1947883a 	add	r3,r3,r5
811158d4:	10800044 	addi	r2,r2,1
811158d8:	41400115 	stw	r5,4(r8)
811158dc:	d8c02015 	stw	r3,128(sp)
811158e0:	d8801f15 	stw	r2,124(sp)
811158e4:	010001c4 	movi	r4,7
811158e8:	2081d316 	blt	r4,r2,81116038 <___vfprintf_internal_r+0x1124>
811158ec:	42000204 	addi	r8,r8,8
811158f0:	9480010c 	andi	r18,r18,4
811158f4:	90003226 	beq	r18,zero,811159c0 <___vfprintf_internal_r+0xaac>
811158f8:	d9403117 	ldw	r5,196(sp)
811158fc:	d8802a17 	ldw	r2,168(sp)
81115900:	28a1c83a 	sub	r16,r5,r2
81115904:	04002e0e 	bge	zero,r16,811159c0 <___vfprintf_internal_r+0xaac>
81115908:	04400404 	movi	r17,16
8111590c:	d8801f17 	ldw	r2,124(sp)
81115910:	8c04a20e 	bge	r17,r16,81116b9c <___vfprintf_internal_r+0x1c88>
81115914:	01604534 	movhi	r5,33044
81115918:	2976af84 	addi	r5,r5,-9538
8111591c:	d9403515 	stw	r5,212(sp)
81115920:	048001c4 	movi	r18,7
81115924:	dcc02c17 	ldw	r19,176(sp)
81115928:	00000306 	br	81115938 <___vfprintf_internal_r+0xa24>
8111592c:	843ffc04 	addi	r16,r16,-16
81115930:	42000204 	addi	r8,r8,8
81115934:	8c00130e 	bge	r17,r16,81115984 <___vfprintf_internal_r+0xa70>
81115938:	01204534 	movhi	r4,33044
8111593c:	18c00404 	addi	r3,r3,16
81115940:	10800044 	addi	r2,r2,1
81115944:	2136af84 	addi	r4,r4,-9538
81115948:	41000015 	stw	r4,0(r8)
8111594c:	44400115 	stw	r17,4(r8)
81115950:	d8c02015 	stw	r3,128(sp)
81115954:	d8801f15 	stw	r2,124(sp)
81115958:	90bff40e 	bge	r18,r2,8111592c <__reset+0xfb0f592c>
8111595c:	d9801e04 	addi	r6,sp,120
81115960:	b80b883a 	mov	r5,r23
81115964:	9809883a 	mov	r4,r19
81115968:	1120fa40 	call	81120fa4 <__sprint_r>
8111596c:	103e6d1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81115970:	843ffc04 	addi	r16,r16,-16
81115974:	d8c02017 	ldw	r3,128(sp)
81115978:	d8801f17 	ldw	r2,124(sp)
8111597c:	da000404 	addi	r8,sp,16
81115980:	8c3fed16 	blt	r17,r16,81115938 <__reset+0xfb0f5938>
81115984:	d9403517 	ldw	r5,212(sp)
81115988:	1c07883a 	add	r3,r3,r16
8111598c:	10800044 	addi	r2,r2,1
81115990:	41400015 	stw	r5,0(r8)
81115994:	44000115 	stw	r16,4(r8)
81115998:	d8c02015 	stw	r3,128(sp)
8111599c:	d8801f15 	stw	r2,124(sp)
811159a0:	010001c4 	movi	r4,7
811159a4:	2080060e 	bge	r4,r2,811159c0 <___vfprintf_internal_r+0xaac>
811159a8:	d9002c17 	ldw	r4,176(sp)
811159ac:	d9801e04 	addi	r6,sp,120
811159b0:	b80b883a 	mov	r5,r23
811159b4:	1120fa40 	call	81120fa4 <__sprint_r>
811159b8:	103e5a1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
811159bc:	d8c02017 	ldw	r3,128(sp)
811159c0:	d8803117 	ldw	r2,196(sp)
811159c4:	d9002a17 	ldw	r4,168(sp)
811159c8:	1100010e 	bge	r2,r4,811159d0 <___vfprintf_internal_r+0xabc>
811159cc:	2005883a 	mov	r2,r4
811159d0:	d9402f17 	ldw	r5,188(sp)
811159d4:	288b883a 	add	r5,r5,r2
811159d8:	d9402f15 	stw	r5,188(sp)
811159dc:	18019e1e 	bne	r3,zero,81116058 <___vfprintf_internal_r+0x1144>
811159e0:	a8800007 	ldb	r2,0(r21)
811159e4:	d8001f15 	stw	zero,124(sp)
811159e8:	da000404 	addi	r8,sp,16
811159ec:	103d851e 	bne	r2,zero,81115004 <__reset+0xfb0f5004>
811159f0:	a821883a 	mov	r16,r21
811159f4:	003d9b06 	br	81115064 <__reset+0xfb0f5064>
811159f8:	18c03fcc 	andi	r3,r3,255
811159fc:	1805c11e 	bne	r3,zero,81117104 <___vfprintf_internal_r+0x21f0>
81115a00:	94800414 	ori	r18,r18,16
81115a04:	9080080c 	andi	r2,r18,32
81115a08:	10020c26 	beq	r2,zero,8111623c <___vfprintf_internal_r+0x1328>
81115a0c:	d8802d17 	ldw	r2,180(sp)
81115a10:	d9002917 	ldw	r4,164(sp)
81115a14:	d8002785 	stb	zero,158(sp)
81115a18:	10c00204 	addi	r3,r2,8
81115a1c:	14c00017 	ldw	r19,0(r2)
81115a20:	15800117 	ldw	r22,4(r2)
81115a24:	20040f16 	blt	r4,zero,81116a64 <___vfprintf_internal_r+0x1b50>
81115a28:	013fdfc4 	movi	r4,-129
81115a2c:	9d84b03a 	or	r2,r19,r22
81115a30:	d8c02d15 	stw	r3,180(sp)
81115a34:	9124703a 	and	r18,r18,r4
81115a38:	0039883a 	mov	fp,zero
81115a3c:	103e891e 	bne	r2,zero,81115464 <__reset+0xfb0f5464>
81115a40:	d9002917 	ldw	r4,164(sp)
81115a44:	2002c11e 	bne	r4,zero,8111654c <___vfprintf_internal_r+0x1638>
81115a48:	d8002915 	stw	zero,164(sp)
81115a4c:	d8002e15 	stw	zero,184(sp)
81115a50:	dc001e04 	addi	r16,sp,120
81115a54:	003ef806 	br	81115638 <__reset+0xfb0f5638>
81115a58:	18c03fcc 	andi	r3,r3,255
81115a5c:	18059d1e 	bne	r3,zero,811170d4 <___vfprintf_internal_r+0x21c0>
81115a60:	01604534 	movhi	r5,33044
81115a64:	29769704 	addi	r5,r5,-9636
81115a68:	d9403915 	stw	r5,228(sp)
81115a6c:	9080080c 	andi	r2,r18,32
81115a70:	10005226 	beq	r2,zero,81115bbc <___vfprintf_internal_r+0xca8>
81115a74:	d8802d17 	ldw	r2,180(sp)
81115a78:	14c00017 	ldw	r19,0(r2)
81115a7c:	15800117 	ldw	r22,4(r2)
81115a80:	10800204 	addi	r2,r2,8
81115a84:	d8802d15 	stw	r2,180(sp)
81115a88:	9080004c 	andi	r2,r18,1
81115a8c:	10019026 	beq	r2,zero,811160d0 <___vfprintf_internal_r+0x11bc>
81115a90:	9d84b03a 	or	r2,r19,r22
81115a94:	10036926 	beq	r2,zero,8111683c <___vfprintf_internal_r+0x1928>
81115a98:	d8c02917 	ldw	r3,164(sp)
81115a9c:	00800c04 	movi	r2,48
81115aa0:	d8802705 	stb	r2,156(sp)
81115aa4:	dc402745 	stb	r17,157(sp)
81115aa8:	d8002785 	stb	zero,158(sp)
81115aac:	90800094 	ori	r2,r18,2
81115ab0:	18045d16 	blt	r3,zero,81116c28 <___vfprintf_internal_r+0x1d14>
81115ab4:	00bfdfc4 	movi	r2,-129
81115ab8:	90a4703a 	and	r18,r18,r2
81115abc:	94800094 	ori	r18,r18,2
81115ac0:	0039883a 	mov	fp,zero
81115ac4:	d9003917 	ldw	r4,228(sp)
81115ac8:	dc001e04 	addi	r16,sp,120
81115acc:	988003cc 	andi	r2,r19,15
81115ad0:	b006973a 	slli	r3,r22,28
81115ad4:	2085883a 	add	r2,r4,r2
81115ad8:	9826d13a 	srli	r19,r19,4
81115adc:	10800003 	ldbu	r2,0(r2)
81115ae0:	b02cd13a 	srli	r22,r22,4
81115ae4:	843fffc4 	addi	r16,r16,-1
81115ae8:	1ce6b03a 	or	r19,r3,r19
81115aec:	80800005 	stb	r2,0(r16)
81115af0:	9d84b03a 	or	r2,r19,r22
81115af4:	103ff51e 	bne	r2,zero,81115acc <__reset+0xfb0f5acc>
81115af8:	d8c02817 	ldw	r3,160(sp)
81115afc:	1c07c83a 	sub	r3,r3,r16
81115b00:	d8c02e15 	stw	r3,184(sp)
81115b04:	003ecc06 	br	81115638 <__reset+0xfb0f5638>
81115b08:	18c03fcc 	andi	r3,r3,255
81115b0c:	183e9f26 	beq	r3,zero,8111558c <__reset+0xfb0f558c>
81115b10:	d9c02785 	stb	r7,158(sp)
81115b14:	003e9d06 	br	8111558c <__reset+0xfb0f558c>
81115b18:	00c00044 	movi	r3,1
81115b1c:	01c00ac4 	movi	r7,43
81115b20:	ac400007 	ldb	r17,0(r21)
81115b24:	003d5e06 	br	811150a0 <__reset+0xfb0f50a0>
81115b28:	94800814 	ori	r18,r18,32
81115b2c:	ac400007 	ldb	r17,0(r21)
81115b30:	003d5b06 	br	811150a0 <__reset+0xfb0f50a0>
81115b34:	d8c02d17 	ldw	r3,180(sp)
81115b38:	d8002785 	stb	zero,158(sp)
81115b3c:	1c000017 	ldw	r16,0(r3)
81115b40:	1cc00104 	addi	r19,r3,4
81115b44:	80041926 	beq	r16,zero,81116bac <___vfprintf_internal_r+0x1c98>
81115b48:	d9002917 	ldw	r4,164(sp)
81115b4c:	2003d016 	blt	r4,zero,81116a90 <___vfprintf_internal_r+0x1b7c>
81115b50:	200d883a 	mov	r6,r4
81115b54:	000b883a 	mov	r5,zero
81115b58:	8009883a 	mov	r4,r16
81115b5c:	da003d15 	stw	r8,244(sp)
81115b60:	111bd980 	call	8111bd98 <memchr>
81115b64:	da003d17 	ldw	r8,244(sp)
81115b68:	10045426 	beq	r2,zero,81116cbc <___vfprintf_internal_r+0x1da8>
81115b6c:	1405c83a 	sub	r2,r2,r16
81115b70:	d8802e15 	stw	r2,184(sp)
81115b74:	1003cc16 	blt	r2,zero,81116aa8 <___vfprintf_internal_r+0x1b94>
81115b78:	df002783 	ldbu	fp,158(sp)
81115b7c:	d8802a15 	stw	r2,168(sp)
81115b80:	dcc02d15 	stw	r19,180(sp)
81115b84:	d8002915 	stw	zero,164(sp)
81115b88:	d8003215 	stw	zero,200(sp)
81115b8c:	003eb006 	br	81115650 <__reset+0xfb0f5650>
81115b90:	18c03fcc 	andi	r3,r3,255
81115b94:	183f9b26 	beq	r3,zero,81115a04 <__reset+0xfb0f5a04>
81115b98:	d9c02785 	stb	r7,158(sp)
81115b9c:	003f9906 	br	81115a04 <__reset+0xfb0f5a04>
81115ba0:	18c03fcc 	andi	r3,r3,255
81115ba4:	1805551e 	bne	r3,zero,811170fc <___vfprintf_internal_r+0x21e8>
81115ba8:	01604534 	movhi	r5,33044
81115bac:	29769c04 	addi	r5,r5,-9616
81115bb0:	d9403915 	stw	r5,228(sp)
81115bb4:	9080080c 	andi	r2,r18,32
81115bb8:	103fae1e 	bne	r2,zero,81115a74 <__reset+0xfb0f5a74>
81115bbc:	9080040c 	andi	r2,r18,16
81115bc0:	1002de26 	beq	r2,zero,8111673c <___vfprintf_internal_r+0x1828>
81115bc4:	d8c02d17 	ldw	r3,180(sp)
81115bc8:	002d883a 	mov	r22,zero
81115bcc:	1cc00017 	ldw	r19,0(r3)
81115bd0:	18c00104 	addi	r3,r3,4
81115bd4:	d8c02d15 	stw	r3,180(sp)
81115bd8:	003fab06 	br	81115a88 <__reset+0xfb0f5a88>
81115bdc:	38803fcc 	andi	r2,r7,255
81115be0:	1080201c 	xori	r2,r2,128
81115be4:	10bfe004 	addi	r2,r2,-128
81115be8:	1002d21e 	bne	r2,zero,81116734 <___vfprintf_internal_r+0x1820>
81115bec:	00c00044 	movi	r3,1
81115bf0:	01c00804 	movi	r7,32
81115bf4:	ac400007 	ldb	r17,0(r21)
81115bf8:	003d2906 	br	811150a0 <__reset+0xfb0f50a0>
81115bfc:	94800054 	ori	r18,r18,1
81115c00:	ac400007 	ldb	r17,0(r21)
81115c04:	003d2606 	br	811150a0 <__reset+0xfb0f50a0>
81115c08:	18c03fcc 	andi	r3,r3,255
81115c0c:	183e0526 	beq	r3,zero,81115424 <__reset+0xfb0f5424>
81115c10:	d9c02785 	stb	r7,158(sp)
81115c14:	003e0306 	br	81115424 <__reset+0xfb0f5424>
81115c18:	94801014 	ori	r18,r18,64
81115c1c:	ac400007 	ldb	r17,0(r21)
81115c20:	003d1f06 	br	811150a0 <__reset+0xfb0f50a0>
81115c24:	ac400007 	ldb	r17,0(r21)
81115c28:	8a438726 	beq	r17,r9,81116a48 <___vfprintf_internal_r+0x1b34>
81115c2c:	94800414 	ori	r18,r18,16
81115c30:	003d1b06 	br	811150a0 <__reset+0xfb0f50a0>
81115c34:	18c03fcc 	andi	r3,r3,255
81115c38:	1805341e 	bne	r3,zero,8111710c <___vfprintf_internal_r+0x21f8>
81115c3c:	9080080c 	andi	r2,r18,32
81115c40:	1002cd26 	beq	r2,zero,81116778 <___vfprintf_internal_r+0x1864>
81115c44:	d9402d17 	ldw	r5,180(sp)
81115c48:	d9002f17 	ldw	r4,188(sp)
81115c4c:	28800017 	ldw	r2,0(r5)
81115c50:	2007d7fa 	srai	r3,r4,31
81115c54:	29400104 	addi	r5,r5,4
81115c58:	d9402d15 	stw	r5,180(sp)
81115c5c:	11000015 	stw	r4,0(r2)
81115c60:	10c00115 	stw	r3,4(r2)
81115c64:	003ce506 	br	81114ffc <__reset+0xfb0f4ffc>
81115c68:	d8c02d17 	ldw	r3,180(sp)
81115c6c:	d9002d17 	ldw	r4,180(sp)
81115c70:	d8002785 	stb	zero,158(sp)
81115c74:	18800017 	ldw	r2,0(r3)
81115c78:	21000104 	addi	r4,r4,4
81115c7c:	00c00044 	movi	r3,1
81115c80:	d8c02a15 	stw	r3,168(sp)
81115c84:	d8801405 	stb	r2,80(sp)
81115c88:	d9002d15 	stw	r4,180(sp)
81115c8c:	d8c02e15 	stw	r3,184(sp)
81115c90:	d8002915 	stw	zero,164(sp)
81115c94:	d8003215 	stw	zero,200(sp)
81115c98:	dc001404 	addi	r16,sp,80
81115c9c:	0039883a 	mov	fp,zero
81115ca0:	003e7206 	br	8111566c <__reset+0xfb0f566c>
81115ca4:	01204534 	movhi	r4,33044
81115ca8:	21369c04 	addi	r4,r4,-9616
81115cac:	0039883a 	mov	fp,zero
81115cb0:	d9003915 	stw	r4,228(sp)
81115cb4:	04401e04 	movi	r17,120
81115cb8:	003f8206 	br	81115ac4 <__reset+0xfb0f5ac4>
81115cbc:	18c03fcc 	andi	r3,r3,255
81115cc0:	1805061e 	bne	r3,zero,811170dc <___vfprintf_internal_r+0x21c8>
81115cc4:	883d9126 	beq	r17,zero,8111530c <__reset+0xfb0f530c>
81115cc8:	00c00044 	movi	r3,1
81115ccc:	d8c02a15 	stw	r3,168(sp)
81115cd0:	dc401405 	stb	r17,80(sp)
81115cd4:	d8002785 	stb	zero,158(sp)
81115cd8:	003fec06 	br	81115c8c <__reset+0xfb0f5c8c>
81115cdc:	01604534 	movhi	r5,33044
81115ce0:	29769c04 	addi	r5,r5,-9616
81115ce4:	d9403915 	stw	r5,228(sp)
81115ce8:	d8c02d15 	stw	r3,180(sp)
81115cec:	1025883a 	mov	r18,r2
81115cf0:	04401e04 	movi	r17,120
81115cf4:	9d84b03a 	or	r2,r19,r22
81115cf8:	1000fc1e 	bne	r2,zero,811160ec <___vfprintf_internal_r+0x11d8>
81115cfc:	0039883a 	mov	fp,zero
81115d00:	00800084 	movi	r2,2
81115d04:	10803fcc 	andi	r2,r2,255
81115d08:	00c00044 	movi	r3,1
81115d0c:	10c20f26 	beq	r2,r3,8111654c <___vfprintf_internal_r+0x1638>
81115d10:	00c00084 	movi	r3,2
81115d14:	10fd6326 	beq	r2,r3,811152a4 <__reset+0xfb0f52a4>
81115d18:	003e2d06 	br	811155d0 <__reset+0xfb0f55d0>
81115d1c:	d8c02017 	ldw	r3,128(sp)
81115d20:	003e9306 	br	81115770 <__reset+0xfb0f5770>
81115d24:	00801944 	movi	r2,101
81115d28:	14407e0e 	bge	r2,r17,81115f24 <___vfprintf_internal_r+0x1010>
81115d2c:	d9003617 	ldw	r4,216(sp)
81115d30:	d9403817 	ldw	r5,224(sp)
81115d34:	000d883a 	mov	r6,zero
81115d38:	000f883a 	mov	r7,zero
81115d3c:	d8c03c15 	stw	r3,240(sp)
81115d40:	da003d15 	stw	r8,244(sp)
81115d44:	112594c0 	call	8112594c <__eqdf2>
81115d48:	d8c03c17 	ldw	r3,240(sp)
81115d4c:	da003d17 	ldw	r8,244(sp)
81115d50:	1000f71e 	bne	r2,zero,81116130 <___vfprintf_internal_r+0x121c>
81115d54:	d8801f17 	ldw	r2,124(sp)
81115d58:	01204534 	movhi	r4,33044
81115d5c:	2136a304 	addi	r4,r4,-9588
81115d60:	18c00044 	addi	r3,r3,1
81115d64:	10800044 	addi	r2,r2,1
81115d68:	41000015 	stw	r4,0(r8)
81115d6c:	01000044 	movi	r4,1
81115d70:	41000115 	stw	r4,4(r8)
81115d74:	d8c02015 	stw	r3,128(sp)
81115d78:	d8801f15 	stw	r2,124(sp)
81115d7c:	010001c4 	movi	r4,7
81115d80:	2082b816 	blt	r4,r2,81116864 <___vfprintf_internal_r+0x1950>
81115d84:	42000204 	addi	r8,r8,8
81115d88:	d8802617 	ldw	r2,152(sp)
81115d8c:	d9403317 	ldw	r5,204(sp)
81115d90:	11400216 	blt	r2,r5,81115d9c <___vfprintf_internal_r+0xe88>
81115d94:	9080004c 	andi	r2,r18,1
81115d98:	103ed526 	beq	r2,zero,811158f0 <__reset+0xfb0f58f0>
81115d9c:	d8803717 	ldw	r2,220(sp)
81115da0:	d9003417 	ldw	r4,208(sp)
81115da4:	d9403717 	ldw	r5,220(sp)
81115da8:	1887883a 	add	r3,r3,r2
81115dac:	d8801f17 	ldw	r2,124(sp)
81115db0:	41000015 	stw	r4,0(r8)
81115db4:	41400115 	stw	r5,4(r8)
81115db8:	10800044 	addi	r2,r2,1
81115dbc:	d8c02015 	stw	r3,128(sp)
81115dc0:	d8801f15 	stw	r2,124(sp)
81115dc4:	010001c4 	movi	r4,7
81115dc8:	20832916 	blt	r4,r2,81116a70 <___vfprintf_internal_r+0x1b5c>
81115dcc:	42000204 	addi	r8,r8,8
81115dd0:	d8803317 	ldw	r2,204(sp)
81115dd4:	143fffc4 	addi	r16,r2,-1
81115dd8:	043ec50e 	bge	zero,r16,811158f0 <__reset+0xfb0f58f0>
81115ddc:	04400404 	movi	r17,16
81115de0:	d8801f17 	ldw	r2,124(sp)
81115de4:	8c00880e 	bge	r17,r16,81116008 <___vfprintf_internal_r+0x10f4>
81115de8:	01604534 	movhi	r5,33044
81115dec:	2976ab84 	addi	r5,r5,-9554
81115df0:	d9402b15 	stw	r5,172(sp)
81115df4:	058001c4 	movi	r22,7
81115df8:	dcc02c17 	ldw	r19,176(sp)
81115dfc:	00000306 	br	81115e0c <___vfprintf_internal_r+0xef8>
81115e00:	42000204 	addi	r8,r8,8
81115e04:	843ffc04 	addi	r16,r16,-16
81115e08:	8c00820e 	bge	r17,r16,81116014 <___vfprintf_internal_r+0x1100>
81115e0c:	18c00404 	addi	r3,r3,16
81115e10:	10800044 	addi	r2,r2,1
81115e14:	45000015 	stw	r20,0(r8)
81115e18:	44400115 	stw	r17,4(r8)
81115e1c:	d8c02015 	stw	r3,128(sp)
81115e20:	d8801f15 	stw	r2,124(sp)
81115e24:	b0bff60e 	bge	r22,r2,81115e00 <__reset+0xfb0f5e00>
81115e28:	d9801e04 	addi	r6,sp,120
81115e2c:	b80b883a 	mov	r5,r23
81115e30:	9809883a 	mov	r4,r19
81115e34:	1120fa40 	call	81120fa4 <__sprint_r>
81115e38:	103d3a1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81115e3c:	d8c02017 	ldw	r3,128(sp)
81115e40:	d8801f17 	ldw	r2,124(sp)
81115e44:	da000404 	addi	r8,sp,16
81115e48:	003fee06 	br	81115e04 <__reset+0xfb0f5e04>
81115e4c:	d9403117 	ldw	r5,196(sp)
81115e50:	d8802a17 	ldw	r2,168(sp)
81115e54:	28adc83a 	sub	r22,r5,r2
81115e58:	05be630e 	bge	zero,r22,811157e8 <__reset+0xfb0f57e8>
81115e5c:	07000404 	movi	fp,16
81115e60:	d8801f17 	ldw	r2,124(sp)
81115e64:	e5838f0e 	bge	fp,r22,81116ca4 <___vfprintf_internal_r+0x1d90>
81115e68:	01604534 	movhi	r5,33044
81115e6c:	2976ab84 	addi	r5,r5,-9554
81115e70:	dc403015 	stw	r17,192(sp)
81115e74:	d9402b15 	stw	r5,172(sp)
81115e78:	b023883a 	mov	r17,r22
81115e7c:	04c001c4 	movi	r19,7
81115e80:	a82d883a 	mov	r22,r21
81115e84:	902b883a 	mov	r21,r18
81115e88:	8025883a 	mov	r18,r16
81115e8c:	dc002c17 	ldw	r16,176(sp)
81115e90:	00000306 	br	81115ea0 <___vfprintf_internal_r+0xf8c>
81115e94:	8c7ffc04 	addi	r17,r17,-16
81115e98:	42000204 	addi	r8,r8,8
81115e9c:	e440110e 	bge	fp,r17,81115ee4 <___vfprintf_internal_r+0xfd0>
81115ea0:	18c00404 	addi	r3,r3,16
81115ea4:	10800044 	addi	r2,r2,1
81115ea8:	45000015 	stw	r20,0(r8)
81115eac:	47000115 	stw	fp,4(r8)
81115eb0:	d8c02015 	stw	r3,128(sp)
81115eb4:	d8801f15 	stw	r2,124(sp)
81115eb8:	98bff60e 	bge	r19,r2,81115e94 <__reset+0xfb0f5e94>
81115ebc:	d9801e04 	addi	r6,sp,120
81115ec0:	b80b883a 	mov	r5,r23
81115ec4:	8009883a 	mov	r4,r16
81115ec8:	1120fa40 	call	81120fa4 <__sprint_r>
81115ecc:	103d151e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81115ed0:	8c7ffc04 	addi	r17,r17,-16
81115ed4:	d8c02017 	ldw	r3,128(sp)
81115ed8:	d8801f17 	ldw	r2,124(sp)
81115edc:	da000404 	addi	r8,sp,16
81115ee0:	e47fef16 	blt	fp,r17,81115ea0 <__reset+0xfb0f5ea0>
81115ee4:	9021883a 	mov	r16,r18
81115ee8:	a825883a 	mov	r18,r21
81115eec:	b02b883a 	mov	r21,r22
81115ef0:	882d883a 	mov	r22,r17
81115ef4:	dc403017 	ldw	r17,192(sp)
81115ef8:	d9002b17 	ldw	r4,172(sp)
81115efc:	1d87883a 	add	r3,r3,r22
81115f00:	10800044 	addi	r2,r2,1
81115f04:	41000015 	stw	r4,0(r8)
81115f08:	45800115 	stw	r22,4(r8)
81115f0c:	d8c02015 	stw	r3,128(sp)
81115f10:	d8801f15 	stw	r2,124(sp)
81115f14:	010001c4 	movi	r4,7
81115f18:	20818e16 	blt	r4,r2,81116554 <___vfprintf_internal_r+0x1640>
81115f1c:	42000204 	addi	r8,r8,8
81115f20:	003e3106 	br	811157e8 <__reset+0xfb0f57e8>
81115f24:	d9403317 	ldw	r5,204(sp)
81115f28:	00800044 	movi	r2,1
81115f2c:	18c00044 	addi	r3,r3,1
81115f30:	1141530e 	bge	r2,r5,81116480 <___vfprintf_internal_r+0x156c>
81115f34:	dc401f17 	ldw	r17,124(sp)
81115f38:	00800044 	movi	r2,1
81115f3c:	40800115 	stw	r2,4(r8)
81115f40:	8c400044 	addi	r17,r17,1
81115f44:	44000015 	stw	r16,0(r8)
81115f48:	d8c02015 	stw	r3,128(sp)
81115f4c:	dc401f15 	stw	r17,124(sp)
81115f50:	008001c4 	movi	r2,7
81115f54:	14416b16 	blt	r2,r17,81116504 <___vfprintf_internal_r+0x15f0>
81115f58:	42000204 	addi	r8,r8,8
81115f5c:	d8803717 	ldw	r2,220(sp)
81115f60:	d9003417 	ldw	r4,208(sp)
81115f64:	8c400044 	addi	r17,r17,1
81115f68:	10c7883a 	add	r3,r2,r3
81115f6c:	40800115 	stw	r2,4(r8)
81115f70:	41000015 	stw	r4,0(r8)
81115f74:	d8c02015 	stw	r3,128(sp)
81115f78:	dc401f15 	stw	r17,124(sp)
81115f7c:	008001c4 	movi	r2,7
81115f80:	14416916 	blt	r2,r17,81116528 <___vfprintf_internal_r+0x1614>
81115f84:	45800204 	addi	r22,r8,8
81115f88:	d9003617 	ldw	r4,216(sp)
81115f8c:	d9403817 	ldw	r5,224(sp)
81115f90:	000d883a 	mov	r6,zero
81115f94:	000f883a 	mov	r7,zero
81115f98:	d8c03c15 	stw	r3,240(sp)
81115f9c:	112594c0 	call	8112594c <__eqdf2>
81115fa0:	d8c03c17 	ldw	r3,240(sp)
81115fa4:	1000bc26 	beq	r2,zero,81116298 <___vfprintf_internal_r+0x1384>
81115fa8:	d9403317 	ldw	r5,204(sp)
81115fac:	84000044 	addi	r16,r16,1
81115fb0:	8c400044 	addi	r17,r17,1
81115fb4:	28bfffc4 	addi	r2,r5,-1
81115fb8:	1887883a 	add	r3,r3,r2
81115fbc:	b0800115 	stw	r2,4(r22)
81115fc0:	b4000015 	stw	r16,0(r22)
81115fc4:	d8c02015 	stw	r3,128(sp)
81115fc8:	dc401f15 	stw	r17,124(sp)
81115fcc:	008001c4 	movi	r2,7
81115fd0:	14414316 	blt	r2,r17,811164e0 <___vfprintf_internal_r+0x15cc>
81115fd4:	b5800204 	addi	r22,r22,8
81115fd8:	d9003a17 	ldw	r4,232(sp)
81115fdc:	df0022c4 	addi	fp,sp,139
81115fe0:	8c400044 	addi	r17,r17,1
81115fe4:	20c7883a 	add	r3,r4,r3
81115fe8:	b7000015 	stw	fp,0(r22)
81115fec:	b1000115 	stw	r4,4(r22)
81115ff0:	d8c02015 	stw	r3,128(sp)
81115ff4:	dc401f15 	stw	r17,124(sp)
81115ff8:	008001c4 	movi	r2,7
81115ffc:	14400e16 	blt	r2,r17,81116038 <___vfprintf_internal_r+0x1124>
81116000:	b2000204 	addi	r8,r22,8
81116004:	003e3a06 	br	811158f0 <__reset+0xfb0f58f0>
81116008:	01204534 	movhi	r4,33044
8111600c:	2136ab84 	addi	r4,r4,-9554
81116010:	d9002b15 	stw	r4,172(sp)
81116014:	d9002b17 	ldw	r4,172(sp)
81116018:	1c07883a 	add	r3,r3,r16
8111601c:	44000115 	stw	r16,4(r8)
81116020:	41000015 	stw	r4,0(r8)
81116024:	10800044 	addi	r2,r2,1
81116028:	d8c02015 	stw	r3,128(sp)
8111602c:	d8801f15 	stw	r2,124(sp)
81116030:	010001c4 	movi	r4,7
81116034:	20be2d0e 	bge	r4,r2,811158ec <__reset+0xfb0f58ec>
81116038:	d9002c17 	ldw	r4,176(sp)
8111603c:	d9801e04 	addi	r6,sp,120
81116040:	b80b883a 	mov	r5,r23
81116044:	1120fa40 	call	81120fa4 <__sprint_r>
81116048:	103cb61e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
8111604c:	d8c02017 	ldw	r3,128(sp)
81116050:	da000404 	addi	r8,sp,16
81116054:	003e2606 	br	811158f0 <__reset+0xfb0f58f0>
81116058:	d9002c17 	ldw	r4,176(sp)
8111605c:	d9801e04 	addi	r6,sp,120
81116060:	b80b883a 	mov	r5,r23
81116064:	1120fa40 	call	81120fa4 <__sprint_r>
81116068:	103e5d26 	beq	r2,zero,811159e0 <__reset+0xfb0f59e0>
8111606c:	003cad06 	br	81115324 <__reset+0xfb0f5324>
81116070:	d9002c17 	ldw	r4,176(sp)
81116074:	d9801e04 	addi	r6,sp,120
81116078:	b80b883a 	mov	r5,r23
8111607c:	1120fa40 	call	81120fa4 <__sprint_r>
81116080:	103ca81e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116084:	d8c02017 	ldw	r3,128(sp)
81116088:	da000404 	addi	r8,sp,16
8111608c:	003e0b06 	br	811158bc <__reset+0xfb0f58bc>
81116090:	d9002c17 	ldw	r4,176(sp)
81116094:	d9801e04 	addi	r6,sp,120
81116098:	b80b883a 	mov	r5,r23
8111609c:	1120fa40 	call	81120fa4 <__sprint_r>
811160a0:	103ca01e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
811160a4:	d8c02017 	ldw	r3,128(sp)
811160a8:	da000404 	addi	r8,sp,16
811160ac:	003dbd06 	br	811157a4 <__reset+0xfb0f57a4>
811160b0:	d9002c17 	ldw	r4,176(sp)
811160b4:	d9801e04 	addi	r6,sp,120
811160b8:	b80b883a 	mov	r5,r23
811160bc:	1120fa40 	call	81120fa4 <__sprint_r>
811160c0:	103c981e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
811160c4:	d8c02017 	ldw	r3,128(sp)
811160c8:	da000404 	addi	r8,sp,16
811160cc:	003dc306 	br	811157dc <__reset+0xfb0f57dc>
811160d0:	d8802917 	ldw	r2,164(sp)
811160d4:	d8002785 	stb	zero,158(sp)
811160d8:	103f0616 	blt	r2,zero,81115cf4 <__reset+0xfb0f5cf4>
811160dc:	00ffdfc4 	movi	r3,-129
811160e0:	9d84b03a 	or	r2,r19,r22
811160e4:	90e4703a 	and	r18,r18,r3
811160e8:	103c6b26 	beq	r2,zero,81115298 <__reset+0xfb0f5298>
811160ec:	0039883a 	mov	fp,zero
811160f0:	003e7406 	br	81115ac4 <__reset+0xfb0f5ac4>
811160f4:	9080040c 	andi	r2,r18,16
811160f8:	1001b326 	beq	r2,zero,811167c8 <___vfprintf_internal_r+0x18b4>
811160fc:	d9002d17 	ldw	r4,180(sp)
81116100:	d9402917 	ldw	r5,164(sp)
81116104:	d8002785 	stb	zero,158(sp)
81116108:	20800104 	addi	r2,r4,4
8111610c:	24c00017 	ldw	r19,0(r4)
81116110:	002d883a 	mov	r22,zero
81116114:	2801b516 	blt	r5,zero,811167ec <___vfprintf_internal_r+0x18d8>
81116118:	00ffdfc4 	movi	r3,-129
8111611c:	d8802d15 	stw	r2,180(sp)
81116120:	90e4703a 	and	r18,r18,r3
81116124:	983d2726 	beq	r19,zero,811155c4 <__reset+0xfb0f55c4>
81116128:	0039883a 	mov	fp,zero
8111612c:	003d2a06 	br	811155d8 <__reset+0xfb0f55d8>
81116130:	dc402617 	ldw	r17,152(sp)
81116134:	0441d30e 	bge	zero,r17,81116884 <___vfprintf_internal_r+0x1970>
81116138:	dc403217 	ldw	r17,200(sp)
8111613c:	d8803317 	ldw	r2,204(sp)
81116140:	1440010e 	bge	r2,r17,81116148 <___vfprintf_internal_r+0x1234>
81116144:	1023883a 	mov	r17,r2
81116148:	04400a0e 	bge	zero,r17,81116174 <___vfprintf_internal_r+0x1260>
8111614c:	d8801f17 	ldw	r2,124(sp)
81116150:	1c47883a 	add	r3,r3,r17
81116154:	44000015 	stw	r16,0(r8)
81116158:	10800044 	addi	r2,r2,1
8111615c:	44400115 	stw	r17,4(r8)
81116160:	d8c02015 	stw	r3,128(sp)
81116164:	d8801f15 	stw	r2,124(sp)
81116168:	010001c4 	movi	r4,7
8111616c:	20826516 	blt	r4,r2,81116b04 <___vfprintf_internal_r+0x1bf0>
81116170:	42000204 	addi	r8,r8,8
81116174:	88026116 	blt	r17,zero,81116afc <___vfprintf_internal_r+0x1be8>
81116178:	d9003217 	ldw	r4,200(sp)
8111617c:	2463c83a 	sub	r17,r4,r17
81116180:	04407b0e 	bge	zero,r17,81116370 <___vfprintf_internal_r+0x145c>
81116184:	05800404 	movi	r22,16
81116188:	d8801f17 	ldw	r2,124(sp)
8111618c:	b4419d0e 	bge	r22,r17,81116804 <___vfprintf_internal_r+0x18f0>
81116190:	01204534 	movhi	r4,33044
81116194:	2136ab84 	addi	r4,r4,-9554
81116198:	d9002b15 	stw	r4,172(sp)
8111619c:	070001c4 	movi	fp,7
811161a0:	dcc02c17 	ldw	r19,176(sp)
811161a4:	00000306 	br	811161b4 <___vfprintf_internal_r+0x12a0>
811161a8:	42000204 	addi	r8,r8,8
811161ac:	8c7ffc04 	addi	r17,r17,-16
811161b0:	b441970e 	bge	r22,r17,81116810 <___vfprintf_internal_r+0x18fc>
811161b4:	18c00404 	addi	r3,r3,16
811161b8:	10800044 	addi	r2,r2,1
811161bc:	45000015 	stw	r20,0(r8)
811161c0:	45800115 	stw	r22,4(r8)
811161c4:	d8c02015 	stw	r3,128(sp)
811161c8:	d8801f15 	stw	r2,124(sp)
811161cc:	e0bff60e 	bge	fp,r2,811161a8 <__reset+0xfb0f61a8>
811161d0:	d9801e04 	addi	r6,sp,120
811161d4:	b80b883a 	mov	r5,r23
811161d8:	9809883a 	mov	r4,r19
811161dc:	1120fa40 	call	81120fa4 <__sprint_r>
811161e0:	103c501e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
811161e4:	d8c02017 	ldw	r3,128(sp)
811161e8:	d8801f17 	ldw	r2,124(sp)
811161ec:	da000404 	addi	r8,sp,16
811161f0:	003fee06 	br	811161ac <__reset+0xfb0f61ac>
811161f4:	d9002c17 	ldw	r4,176(sp)
811161f8:	d9801e04 	addi	r6,sp,120
811161fc:	b80b883a 	mov	r5,r23
81116200:	1120fa40 	call	81120fa4 <__sprint_r>
81116204:	103c471e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116208:	d8c02017 	ldw	r3,128(sp)
8111620c:	df002787 	ldb	fp,158(sp)
81116210:	da000404 	addi	r8,sp,16
81116214:	003d5606 	br	81115770 <__reset+0xfb0f5770>
81116218:	9080040c 	andi	r2,r18,16
8111621c:	10016126 	beq	r2,zero,811167a4 <___vfprintf_internal_r+0x1890>
81116220:	d8802d17 	ldw	r2,180(sp)
81116224:	14c00017 	ldw	r19,0(r2)
81116228:	10800104 	addi	r2,r2,4
8111622c:	d8802d15 	stw	r2,180(sp)
81116230:	982dd7fa 	srai	r22,r19,31
81116234:	b005883a 	mov	r2,r22
81116238:	003c8206 	br	81115444 <__reset+0xfb0f5444>
8111623c:	9080040c 	andi	r2,r18,16
81116240:	10003526 	beq	r2,zero,81116318 <___vfprintf_internal_r+0x1404>
81116244:	d9402d17 	ldw	r5,180(sp)
81116248:	d8c02917 	ldw	r3,164(sp)
8111624c:	d8002785 	stb	zero,158(sp)
81116250:	28800104 	addi	r2,r5,4
81116254:	2cc00017 	ldw	r19,0(r5)
81116258:	002d883a 	mov	r22,zero
8111625c:	18003716 	blt	r3,zero,8111633c <___vfprintf_internal_r+0x1428>
81116260:	00ffdfc4 	movi	r3,-129
81116264:	d8802d15 	stw	r2,180(sp)
81116268:	90e4703a 	and	r18,r18,r3
8111626c:	0039883a 	mov	fp,zero
81116270:	983df326 	beq	r19,zero,81115a40 <__reset+0xfb0f5a40>
81116274:	00800244 	movi	r2,9
81116278:	14fc7b36 	bltu	r2,r19,81115468 <__reset+0xfb0f5468>
8111627c:	d8c02817 	ldw	r3,160(sp)
81116280:	dc001dc4 	addi	r16,sp,119
81116284:	9cc00c04 	addi	r19,r19,48
81116288:	1c07c83a 	sub	r3,r3,r16
8111628c:	dcc01dc5 	stb	r19,119(sp)
81116290:	d8c02e15 	stw	r3,184(sp)
81116294:	003ce806 	br	81115638 <__reset+0xfb0f5638>
81116298:	d8803317 	ldw	r2,204(sp)
8111629c:	143fffc4 	addi	r16,r2,-1
811162a0:	043f4d0e 	bge	zero,r16,81115fd8 <__reset+0xfb0f5fd8>
811162a4:	07000404 	movi	fp,16
811162a8:	e400810e 	bge	fp,r16,811164b0 <___vfprintf_internal_r+0x159c>
811162ac:	01604534 	movhi	r5,33044
811162b0:	2976ab84 	addi	r5,r5,-9554
811162b4:	d9402b15 	stw	r5,172(sp)
811162b8:	01c001c4 	movi	r7,7
811162bc:	dcc02c17 	ldw	r19,176(sp)
811162c0:	00000306 	br	811162d0 <___vfprintf_internal_r+0x13bc>
811162c4:	b5800204 	addi	r22,r22,8
811162c8:	843ffc04 	addi	r16,r16,-16
811162cc:	e4007b0e 	bge	fp,r16,811164bc <___vfprintf_internal_r+0x15a8>
811162d0:	18c00404 	addi	r3,r3,16
811162d4:	8c400044 	addi	r17,r17,1
811162d8:	b5000015 	stw	r20,0(r22)
811162dc:	b7000115 	stw	fp,4(r22)
811162e0:	d8c02015 	stw	r3,128(sp)
811162e4:	dc401f15 	stw	r17,124(sp)
811162e8:	3c7ff60e 	bge	r7,r17,811162c4 <__reset+0xfb0f62c4>
811162ec:	d9801e04 	addi	r6,sp,120
811162f0:	b80b883a 	mov	r5,r23
811162f4:	9809883a 	mov	r4,r19
811162f8:	d9c03c15 	stw	r7,240(sp)
811162fc:	1120fa40 	call	81120fa4 <__sprint_r>
81116300:	d9c03c17 	ldw	r7,240(sp)
81116304:	103c071e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116308:	d8c02017 	ldw	r3,128(sp)
8111630c:	dc401f17 	ldw	r17,124(sp)
81116310:	dd800404 	addi	r22,sp,16
81116314:	003fec06 	br	811162c8 <__reset+0xfb0f62c8>
81116318:	9080100c 	andi	r2,r18,64
8111631c:	d8002785 	stb	zero,158(sp)
81116320:	10010e26 	beq	r2,zero,8111675c <___vfprintf_internal_r+0x1848>
81116324:	d9002d17 	ldw	r4,180(sp)
81116328:	d9402917 	ldw	r5,164(sp)
8111632c:	002d883a 	mov	r22,zero
81116330:	20800104 	addi	r2,r4,4
81116334:	24c0000b 	ldhu	r19,0(r4)
81116338:	283fc90e 	bge	r5,zero,81116260 <__reset+0xfb0f6260>
8111633c:	d8802d15 	stw	r2,180(sp)
81116340:	0039883a 	mov	fp,zero
81116344:	9d84b03a 	or	r2,r19,r22
81116348:	103c461e 	bne	r2,zero,81115464 <__reset+0xfb0f5464>
8111634c:	00800044 	movi	r2,1
81116350:	003e6c06 	br	81115d04 <__reset+0xfb0f5d04>
81116354:	d9002c17 	ldw	r4,176(sp)
81116358:	d9801e04 	addi	r6,sp,120
8111635c:	b80b883a 	mov	r5,r23
81116360:	1120fa40 	call	81120fa4 <__sprint_r>
81116364:	103bef1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116368:	d8c02017 	ldw	r3,128(sp)
8111636c:	da000404 	addi	r8,sp,16
81116370:	d9003217 	ldw	r4,200(sp)
81116374:	d8802617 	ldw	r2,152(sp)
81116378:	d9403317 	ldw	r5,204(sp)
8111637c:	8123883a 	add	r17,r16,r4
81116380:	11400216 	blt	r2,r5,8111638c <___vfprintf_internal_r+0x1478>
81116384:	9100004c 	andi	r4,r18,1
81116388:	20000d26 	beq	r4,zero,811163c0 <___vfprintf_internal_r+0x14ac>
8111638c:	d9003717 	ldw	r4,220(sp)
81116390:	d9403417 	ldw	r5,208(sp)
81116394:	1907883a 	add	r3,r3,r4
81116398:	d9001f17 	ldw	r4,124(sp)
8111639c:	41400015 	stw	r5,0(r8)
811163a0:	d9403717 	ldw	r5,220(sp)
811163a4:	21000044 	addi	r4,r4,1
811163a8:	d8c02015 	stw	r3,128(sp)
811163ac:	41400115 	stw	r5,4(r8)
811163b0:	d9001f15 	stw	r4,124(sp)
811163b4:	014001c4 	movi	r5,7
811163b8:	2901e816 	blt	r5,r4,81116b5c <___vfprintf_internal_r+0x1c48>
811163bc:	42000204 	addi	r8,r8,8
811163c0:	d9003317 	ldw	r4,204(sp)
811163c4:	8121883a 	add	r16,r16,r4
811163c8:	2085c83a 	sub	r2,r4,r2
811163cc:	8461c83a 	sub	r16,r16,r17
811163d0:	1400010e 	bge	r2,r16,811163d8 <___vfprintf_internal_r+0x14c4>
811163d4:	1021883a 	mov	r16,r2
811163d8:	04000a0e 	bge	zero,r16,81116404 <___vfprintf_internal_r+0x14f0>
811163dc:	d9001f17 	ldw	r4,124(sp)
811163e0:	1c07883a 	add	r3,r3,r16
811163e4:	44400015 	stw	r17,0(r8)
811163e8:	21000044 	addi	r4,r4,1
811163ec:	44000115 	stw	r16,4(r8)
811163f0:	d8c02015 	stw	r3,128(sp)
811163f4:	d9001f15 	stw	r4,124(sp)
811163f8:	014001c4 	movi	r5,7
811163fc:	2901fb16 	blt	r5,r4,81116bec <___vfprintf_internal_r+0x1cd8>
81116400:	42000204 	addi	r8,r8,8
81116404:	8001f716 	blt	r16,zero,81116be4 <___vfprintf_internal_r+0x1cd0>
81116408:	1421c83a 	sub	r16,r2,r16
8111640c:	043d380e 	bge	zero,r16,811158f0 <__reset+0xfb0f58f0>
81116410:	04400404 	movi	r17,16
81116414:	d8801f17 	ldw	r2,124(sp)
81116418:	8c3efb0e 	bge	r17,r16,81116008 <__reset+0xfb0f6008>
8111641c:	01604534 	movhi	r5,33044
81116420:	2976ab84 	addi	r5,r5,-9554
81116424:	d9402b15 	stw	r5,172(sp)
81116428:	058001c4 	movi	r22,7
8111642c:	dcc02c17 	ldw	r19,176(sp)
81116430:	00000306 	br	81116440 <___vfprintf_internal_r+0x152c>
81116434:	42000204 	addi	r8,r8,8
81116438:	843ffc04 	addi	r16,r16,-16
8111643c:	8c3ef50e 	bge	r17,r16,81116014 <__reset+0xfb0f6014>
81116440:	18c00404 	addi	r3,r3,16
81116444:	10800044 	addi	r2,r2,1
81116448:	45000015 	stw	r20,0(r8)
8111644c:	44400115 	stw	r17,4(r8)
81116450:	d8c02015 	stw	r3,128(sp)
81116454:	d8801f15 	stw	r2,124(sp)
81116458:	b0bff60e 	bge	r22,r2,81116434 <__reset+0xfb0f6434>
8111645c:	d9801e04 	addi	r6,sp,120
81116460:	b80b883a 	mov	r5,r23
81116464:	9809883a 	mov	r4,r19
81116468:	1120fa40 	call	81120fa4 <__sprint_r>
8111646c:	103bad1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116470:	d8c02017 	ldw	r3,128(sp)
81116474:	d8801f17 	ldw	r2,124(sp)
81116478:	da000404 	addi	r8,sp,16
8111647c:	003fee06 	br	81116438 <__reset+0xfb0f6438>
81116480:	9088703a 	and	r4,r18,r2
81116484:	203eab1e 	bne	r4,zero,81115f34 <__reset+0xfb0f5f34>
81116488:	dc401f17 	ldw	r17,124(sp)
8111648c:	40800115 	stw	r2,4(r8)
81116490:	44000015 	stw	r16,0(r8)
81116494:	8c400044 	addi	r17,r17,1
81116498:	d8c02015 	stw	r3,128(sp)
8111649c:	dc401f15 	stw	r17,124(sp)
811164a0:	008001c4 	movi	r2,7
811164a4:	14400e16 	blt	r2,r17,811164e0 <___vfprintf_internal_r+0x15cc>
811164a8:	45800204 	addi	r22,r8,8
811164ac:	003eca06 	br	81115fd8 <__reset+0xfb0f5fd8>
811164b0:	01204534 	movhi	r4,33044
811164b4:	2136ab84 	addi	r4,r4,-9554
811164b8:	d9002b15 	stw	r4,172(sp)
811164bc:	d8802b17 	ldw	r2,172(sp)
811164c0:	1c07883a 	add	r3,r3,r16
811164c4:	8c400044 	addi	r17,r17,1
811164c8:	b0800015 	stw	r2,0(r22)
811164cc:	b4000115 	stw	r16,4(r22)
811164d0:	d8c02015 	stw	r3,128(sp)
811164d4:	dc401f15 	stw	r17,124(sp)
811164d8:	008001c4 	movi	r2,7
811164dc:	147ebd0e 	bge	r2,r17,81115fd4 <__reset+0xfb0f5fd4>
811164e0:	d9002c17 	ldw	r4,176(sp)
811164e4:	d9801e04 	addi	r6,sp,120
811164e8:	b80b883a 	mov	r5,r23
811164ec:	1120fa40 	call	81120fa4 <__sprint_r>
811164f0:	103b8c1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
811164f4:	d8c02017 	ldw	r3,128(sp)
811164f8:	dc401f17 	ldw	r17,124(sp)
811164fc:	dd800404 	addi	r22,sp,16
81116500:	003eb506 	br	81115fd8 <__reset+0xfb0f5fd8>
81116504:	d9002c17 	ldw	r4,176(sp)
81116508:	d9801e04 	addi	r6,sp,120
8111650c:	b80b883a 	mov	r5,r23
81116510:	1120fa40 	call	81120fa4 <__sprint_r>
81116514:	103b831e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116518:	d8c02017 	ldw	r3,128(sp)
8111651c:	dc401f17 	ldw	r17,124(sp)
81116520:	da000404 	addi	r8,sp,16
81116524:	003e8d06 	br	81115f5c <__reset+0xfb0f5f5c>
81116528:	d9002c17 	ldw	r4,176(sp)
8111652c:	d9801e04 	addi	r6,sp,120
81116530:	b80b883a 	mov	r5,r23
81116534:	1120fa40 	call	81120fa4 <__sprint_r>
81116538:	103b7a1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
8111653c:	d8c02017 	ldw	r3,128(sp)
81116540:	dc401f17 	ldw	r17,124(sp)
81116544:	dd800404 	addi	r22,sp,16
81116548:	003e8f06 	br	81115f88 <__reset+0xfb0f5f88>
8111654c:	0027883a 	mov	r19,zero
81116550:	003f4a06 	br	8111627c <__reset+0xfb0f627c>
81116554:	d9002c17 	ldw	r4,176(sp)
81116558:	d9801e04 	addi	r6,sp,120
8111655c:	b80b883a 	mov	r5,r23
81116560:	1120fa40 	call	81120fa4 <__sprint_r>
81116564:	103b6f1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116568:	d8c02017 	ldw	r3,128(sp)
8111656c:	da000404 	addi	r8,sp,16
81116570:	003c9d06 	br	811157e8 <__reset+0xfb0f57e8>
81116574:	04e7c83a 	sub	r19,zero,r19
81116578:	9804c03a 	cmpne	r2,r19,zero
8111657c:	05adc83a 	sub	r22,zero,r22
81116580:	b0adc83a 	sub	r22,r22,r2
81116584:	d8802917 	ldw	r2,164(sp)
81116588:	07000b44 	movi	fp,45
8111658c:	df002785 	stb	fp,158(sp)
81116590:	10017b16 	blt	r2,zero,81116b80 <___vfprintf_internal_r+0x1c6c>
81116594:	00bfdfc4 	movi	r2,-129
81116598:	90a4703a 	and	r18,r18,r2
8111659c:	003bb106 	br	81115464 <__reset+0xfb0f5464>
811165a0:	d9003617 	ldw	r4,216(sp)
811165a4:	d9403817 	ldw	r5,224(sp)
811165a8:	da003d15 	stw	r8,244(sp)
811165ac:	111d6080 	call	8111d608 <__fpclassifyd>
811165b0:	da003d17 	ldw	r8,244(sp)
811165b4:	1000f026 	beq	r2,zero,81116978 <___vfprintf_internal_r+0x1a64>
811165b8:	d9002917 	ldw	r4,164(sp)
811165bc:	05bff7c4 	movi	r22,-33
811165c0:	00bfffc4 	movi	r2,-1
811165c4:	8dac703a 	and	r22,r17,r22
811165c8:	20820026 	beq	r4,r2,81116dcc <___vfprintf_internal_r+0x1eb8>
811165cc:	008011c4 	movi	r2,71
811165d0:	b081f726 	beq	r22,r2,81116db0 <___vfprintf_internal_r+0x1e9c>
811165d4:	d9003817 	ldw	r4,224(sp)
811165d8:	90c04014 	ori	r3,r18,256
811165dc:	d8c02b15 	stw	r3,172(sp)
811165e0:	20021516 	blt	r4,zero,81116e38 <___vfprintf_internal_r+0x1f24>
811165e4:	dcc03817 	ldw	r19,224(sp)
811165e8:	d8002a05 	stb	zero,168(sp)
811165ec:	00801984 	movi	r2,102
811165f0:	8881f926 	beq	r17,r2,81116dd8 <___vfprintf_internal_r+0x1ec4>
811165f4:	00801184 	movi	r2,70
811165f8:	88821c26 	beq	r17,r2,81116e6c <___vfprintf_internal_r+0x1f58>
811165fc:	00801144 	movi	r2,69
81116600:	b081ef26 	beq	r22,r2,81116dc0 <___vfprintf_internal_r+0x1eac>
81116604:	d8c02917 	ldw	r3,164(sp)
81116608:	d8802104 	addi	r2,sp,132
8111660c:	d8800315 	stw	r2,12(sp)
81116610:	d9403617 	ldw	r5,216(sp)
81116614:	d8802504 	addi	r2,sp,148
81116618:	d9002c17 	ldw	r4,176(sp)
8111661c:	d8800215 	stw	r2,8(sp)
81116620:	d8802604 	addi	r2,sp,152
81116624:	d8c00015 	stw	r3,0(sp)
81116628:	d8800115 	stw	r2,4(sp)
8111662c:	01c00084 	movi	r7,2
81116630:	980d883a 	mov	r6,r19
81116634:	d8c03c15 	stw	r3,240(sp)
81116638:	da003d15 	stw	r8,244(sp)
8111663c:	1118ec00 	call	81118ec0 <_dtoa_r>
81116640:	1021883a 	mov	r16,r2
81116644:	008019c4 	movi	r2,103
81116648:	d8c03c17 	ldw	r3,240(sp)
8111664c:	da003d17 	ldw	r8,244(sp)
81116650:	88817126 	beq	r17,r2,81116c18 <___vfprintf_internal_r+0x1d04>
81116654:	008011c4 	movi	r2,71
81116658:	88829226 	beq	r17,r2,811170a4 <___vfprintf_internal_r+0x2190>
8111665c:	80f9883a 	add	fp,r16,r3
81116660:	d9003617 	ldw	r4,216(sp)
81116664:	000d883a 	mov	r6,zero
81116668:	000f883a 	mov	r7,zero
8111666c:	980b883a 	mov	r5,r19
81116670:	da003d15 	stw	r8,244(sp)
81116674:	112594c0 	call	8112594c <__eqdf2>
81116678:	da003d17 	ldw	r8,244(sp)
8111667c:	10018d26 	beq	r2,zero,81116cb4 <___vfprintf_internal_r+0x1da0>
81116680:	d8802117 	ldw	r2,132(sp)
81116684:	1700062e 	bgeu	r2,fp,811166a0 <___vfprintf_internal_r+0x178c>
81116688:	01000c04 	movi	r4,48
8111668c:	10c00044 	addi	r3,r2,1
81116690:	d8c02115 	stw	r3,132(sp)
81116694:	11000005 	stb	r4,0(r2)
81116698:	d8802117 	ldw	r2,132(sp)
8111669c:	173ffb36 	bltu	r2,fp,8111668c <__reset+0xfb0f668c>
811166a0:	1405c83a 	sub	r2,r2,r16
811166a4:	d8803315 	stw	r2,204(sp)
811166a8:	008011c4 	movi	r2,71
811166ac:	b0817626 	beq	r22,r2,81116c88 <___vfprintf_internal_r+0x1d74>
811166b0:	00801944 	movi	r2,101
811166b4:	1442810e 	bge	r2,r17,811170bc <___vfprintf_internal_r+0x21a8>
811166b8:	d8c02617 	ldw	r3,152(sp)
811166bc:	00801984 	movi	r2,102
811166c0:	d8c03215 	stw	r3,200(sp)
811166c4:	8881fe26 	beq	r17,r2,81116ec0 <___vfprintf_internal_r+0x1fac>
811166c8:	d8c03217 	ldw	r3,200(sp)
811166cc:	d9003317 	ldw	r4,204(sp)
811166d0:	1901dd16 	blt	r3,r4,81116e48 <___vfprintf_internal_r+0x1f34>
811166d4:	9480004c 	andi	r18,r18,1
811166d8:	90022b1e 	bne	r18,zero,81116f88 <___vfprintf_internal_r+0x2074>
811166dc:	1805883a 	mov	r2,r3
811166e0:	18028016 	blt	r3,zero,811170e4 <___vfprintf_internal_r+0x21d0>
811166e4:	d8c03217 	ldw	r3,200(sp)
811166e8:	044019c4 	movi	r17,103
811166ec:	d8c02e15 	stw	r3,184(sp)
811166f0:	df002a07 	ldb	fp,168(sp)
811166f4:	e001531e 	bne	fp,zero,81116c44 <___vfprintf_internal_r+0x1d30>
811166f8:	df002783 	ldbu	fp,158(sp)
811166fc:	d8802a15 	stw	r2,168(sp)
81116700:	dc802b17 	ldw	r18,172(sp)
81116704:	d8002915 	stw	zero,164(sp)
81116708:	003bd106 	br	81115650 <__reset+0xfb0f5650>
8111670c:	d8802d17 	ldw	r2,180(sp)
81116710:	d8c02d17 	ldw	r3,180(sp)
81116714:	d9002d17 	ldw	r4,180(sp)
81116718:	10800017 	ldw	r2,0(r2)
8111671c:	18c00117 	ldw	r3,4(r3)
81116720:	21000204 	addi	r4,r4,8
81116724:	d8803615 	stw	r2,216(sp)
81116728:	d8c03815 	stw	r3,224(sp)
8111672c:	d9002d15 	stw	r4,180(sp)
81116730:	003b7506 	br	81115508 <__reset+0xfb0f5508>
81116734:	ac400007 	ldb	r17,0(r21)
81116738:	003a5906 	br	811150a0 <__reset+0xfb0f50a0>
8111673c:	9080100c 	andi	r2,r18,64
81116740:	1000a826 	beq	r2,zero,811169e4 <___vfprintf_internal_r+0x1ad0>
81116744:	d9002d17 	ldw	r4,180(sp)
81116748:	002d883a 	mov	r22,zero
8111674c:	24c0000b 	ldhu	r19,0(r4)
81116750:	21000104 	addi	r4,r4,4
81116754:	d9002d15 	stw	r4,180(sp)
81116758:	003ccb06 	br	81115a88 <__reset+0xfb0f5a88>
8111675c:	d8c02d17 	ldw	r3,180(sp)
81116760:	d9002917 	ldw	r4,164(sp)
81116764:	002d883a 	mov	r22,zero
81116768:	18800104 	addi	r2,r3,4
8111676c:	1cc00017 	ldw	r19,0(r3)
81116770:	203ebb0e 	bge	r4,zero,81116260 <__reset+0xfb0f6260>
81116774:	003ef106 	br	8111633c <__reset+0xfb0f633c>
81116778:	9080040c 	andi	r2,r18,16
8111677c:	1000921e 	bne	r2,zero,811169c8 <___vfprintf_internal_r+0x1ab4>
81116780:	9480100c 	andi	r18,r18,64
81116784:	90013926 	beq	r18,zero,81116c6c <___vfprintf_internal_r+0x1d58>
81116788:	d9002d17 	ldw	r4,180(sp)
8111678c:	d9402f17 	ldw	r5,188(sp)
81116790:	20800017 	ldw	r2,0(r4)
81116794:	21000104 	addi	r4,r4,4
81116798:	d9002d15 	stw	r4,180(sp)
8111679c:	1140000d 	sth	r5,0(r2)
811167a0:	003a1606 	br	81114ffc <__reset+0xfb0f4ffc>
811167a4:	9080100c 	andi	r2,r18,64
811167a8:	10008026 	beq	r2,zero,811169ac <___vfprintf_internal_r+0x1a98>
811167ac:	d8c02d17 	ldw	r3,180(sp)
811167b0:	1cc0000f 	ldh	r19,0(r3)
811167b4:	18c00104 	addi	r3,r3,4
811167b8:	d8c02d15 	stw	r3,180(sp)
811167bc:	982dd7fa 	srai	r22,r19,31
811167c0:	b005883a 	mov	r2,r22
811167c4:	003b1f06 	br	81115444 <__reset+0xfb0f5444>
811167c8:	9080100c 	andi	r2,r18,64
811167cc:	d8002785 	stb	zero,158(sp)
811167d0:	10008a1e 	bne	r2,zero,811169fc <___vfprintf_internal_r+0x1ae8>
811167d4:	d9402d17 	ldw	r5,180(sp)
811167d8:	d8c02917 	ldw	r3,164(sp)
811167dc:	002d883a 	mov	r22,zero
811167e0:	28800104 	addi	r2,r5,4
811167e4:	2cc00017 	ldw	r19,0(r5)
811167e8:	183e4b0e 	bge	r3,zero,81116118 <__reset+0xfb0f6118>
811167ec:	9d86b03a 	or	r3,r19,r22
811167f0:	d8802d15 	stw	r2,180(sp)
811167f4:	183e4c1e 	bne	r3,zero,81116128 <__reset+0xfb0f6128>
811167f8:	0039883a 	mov	fp,zero
811167fc:	0005883a 	mov	r2,zero
81116800:	003d4006 	br	81115d04 <__reset+0xfb0f5d04>
81116804:	01604534 	movhi	r5,33044
81116808:	2976ab84 	addi	r5,r5,-9554
8111680c:	d9402b15 	stw	r5,172(sp)
81116810:	d9402b17 	ldw	r5,172(sp)
81116814:	1c47883a 	add	r3,r3,r17
81116818:	10800044 	addi	r2,r2,1
8111681c:	41400015 	stw	r5,0(r8)
81116820:	44400115 	stw	r17,4(r8)
81116824:	d8c02015 	stw	r3,128(sp)
81116828:	d8801f15 	stw	r2,124(sp)
8111682c:	010001c4 	movi	r4,7
81116830:	20bec816 	blt	r4,r2,81116354 <__reset+0xfb0f6354>
81116834:	42000204 	addi	r8,r8,8
81116838:	003ecd06 	br	81116370 <__reset+0xfb0f6370>
8111683c:	d9002917 	ldw	r4,164(sp)
81116840:	d8002785 	stb	zero,158(sp)
81116844:	203d2d16 	blt	r4,zero,81115cfc <__reset+0xfb0f5cfc>
81116848:	00bfdfc4 	movi	r2,-129
8111684c:	90a4703a 	and	r18,r18,r2
81116850:	003a9106 	br	81115298 <__reset+0xfb0f5298>
81116854:	01204534 	movhi	r4,33044
81116858:	2136ab84 	addi	r4,r4,-9554
8111685c:	d9002b15 	stw	r4,172(sp)
81116860:	003c0c06 	br	81115894 <__reset+0xfb0f5894>
81116864:	d9002c17 	ldw	r4,176(sp)
81116868:	d9801e04 	addi	r6,sp,120
8111686c:	b80b883a 	mov	r5,r23
81116870:	1120fa40 	call	81120fa4 <__sprint_r>
81116874:	103aab1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116878:	d8c02017 	ldw	r3,128(sp)
8111687c:	da000404 	addi	r8,sp,16
81116880:	003d4106 	br	81115d88 <__reset+0xfb0f5d88>
81116884:	d8801f17 	ldw	r2,124(sp)
81116888:	01604534 	movhi	r5,33044
8111688c:	01000044 	movi	r4,1
81116890:	18c00044 	addi	r3,r3,1
81116894:	10800044 	addi	r2,r2,1
81116898:	2976a304 	addi	r5,r5,-9588
8111689c:	41000115 	stw	r4,4(r8)
811168a0:	41400015 	stw	r5,0(r8)
811168a4:	d8c02015 	stw	r3,128(sp)
811168a8:	d8801f15 	stw	r2,124(sp)
811168ac:	010001c4 	movi	r4,7
811168b0:	20805c16 	blt	r4,r2,81116a24 <___vfprintf_internal_r+0x1b10>
811168b4:	42000204 	addi	r8,r8,8
811168b8:	8800041e 	bne	r17,zero,811168cc <___vfprintf_internal_r+0x19b8>
811168bc:	d8803317 	ldw	r2,204(sp)
811168c0:	1000021e 	bne	r2,zero,811168cc <___vfprintf_internal_r+0x19b8>
811168c4:	9080004c 	andi	r2,r18,1
811168c8:	103c0926 	beq	r2,zero,811158f0 <__reset+0xfb0f58f0>
811168cc:	d9003717 	ldw	r4,220(sp)
811168d0:	d8801f17 	ldw	r2,124(sp)
811168d4:	d9403417 	ldw	r5,208(sp)
811168d8:	20c7883a 	add	r3,r4,r3
811168dc:	10800044 	addi	r2,r2,1
811168e0:	41000115 	stw	r4,4(r8)
811168e4:	41400015 	stw	r5,0(r8)
811168e8:	d8c02015 	stw	r3,128(sp)
811168ec:	d8801f15 	stw	r2,124(sp)
811168f0:	010001c4 	movi	r4,7
811168f4:	20812116 	blt	r4,r2,81116d7c <___vfprintf_internal_r+0x1e68>
811168f8:	42000204 	addi	r8,r8,8
811168fc:	0463c83a 	sub	r17,zero,r17
81116900:	0440730e 	bge	zero,r17,81116ad0 <___vfprintf_internal_r+0x1bbc>
81116904:	05800404 	movi	r22,16
81116908:	b440860e 	bge	r22,r17,81116b24 <___vfprintf_internal_r+0x1c10>
8111690c:	01604534 	movhi	r5,33044
81116910:	2976ab84 	addi	r5,r5,-9554
81116914:	d9402b15 	stw	r5,172(sp)
81116918:	070001c4 	movi	fp,7
8111691c:	dcc02c17 	ldw	r19,176(sp)
81116920:	00000306 	br	81116930 <___vfprintf_internal_r+0x1a1c>
81116924:	42000204 	addi	r8,r8,8
81116928:	8c7ffc04 	addi	r17,r17,-16
8111692c:	b440800e 	bge	r22,r17,81116b30 <___vfprintf_internal_r+0x1c1c>
81116930:	18c00404 	addi	r3,r3,16
81116934:	10800044 	addi	r2,r2,1
81116938:	45000015 	stw	r20,0(r8)
8111693c:	45800115 	stw	r22,4(r8)
81116940:	d8c02015 	stw	r3,128(sp)
81116944:	d8801f15 	stw	r2,124(sp)
81116948:	e0bff60e 	bge	fp,r2,81116924 <__reset+0xfb0f6924>
8111694c:	d9801e04 	addi	r6,sp,120
81116950:	b80b883a 	mov	r5,r23
81116954:	9809883a 	mov	r4,r19
81116958:	1120fa40 	call	81120fa4 <__sprint_r>
8111695c:	103a711e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116960:	d8c02017 	ldw	r3,128(sp)
81116964:	d8801f17 	ldw	r2,124(sp)
81116968:	da000404 	addi	r8,sp,16
8111696c:	003fee06 	br	81116928 <__reset+0xfb0f6928>
81116970:	00bfffc4 	movi	r2,-1
81116974:	003a6f06 	br	81115334 <__reset+0xfb0f5334>
81116978:	008011c4 	movi	r2,71
8111697c:	1440b816 	blt	r2,r17,81116c60 <___vfprintf_internal_r+0x1d4c>
81116980:	04204534 	movhi	r16,33044
81116984:	84369504 	addi	r16,r16,-9644
81116988:	00c000c4 	movi	r3,3
8111698c:	00bfdfc4 	movi	r2,-129
81116990:	d8c02a15 	stw	r3,168(sp)
81116994:	90a4703a 	and	r18,r18,r2
81116998:	df002783 	ldbu	fp,158(sp)
8111699c:	d8c02e15 	stw	r3,184(sp)
811169a0:	d8002915 	stw	zero,164(sp)
811169a4:	d8003215 	stw	zero,200(sp)
811169a8:	003b2906 	br	81115650 <__reset+0xfb0f5650>
811169ac:	d9002d17 	ldw	r4,180(sp)
811169b0:	24c00017 	ldw	r19,0(r4)
811169b4:	21000104 	addi	r4,r4,4
811169b8:	d9002d15 	stw	r4,180(sp)
811169bc:	982dd7fa 	srai	r22,r19,31
811169c0:	b005883a 	mov	r2,r22
811169c4:	003a9f06 	br	81115444 <__reset+0xfb0f5444>
811169c8:	d9402d17 	ldw	r5,180(sp)
811169cc:	d8c02f17 	ldw	r3,188(sp)
811169d0:	28800017 	ldw	r2,0(r5)
811169d4:	29400104 	addi	r5,r5,4
811169d8:	d9402d15 	stw	r5,180(sp)
811169dc:	10c00015 	stw	r3,0(r2)
811169e0:	00398606 	br	81114ffc <__reset+0xfb0f4ffc>
811169e4:	d9402d17 	ldw	r5,180(sp)
811169e8:	002d883a 	mov	r22,zero
811169ec:	2cc00017 	ldw	r19,0(r5)
811169f0:	29400104 	addi	r5,r5,4
811169f4:	d9402d15 	stw	r5,180(sp)
811169f8:	003c2306 	br	81115a88 <__reset+0xfb0f5a88>
811169fc:	d8c02d17 	ldw	r3,180(sp)
81116a00:	d9002917 	ldw	r4,164(sp)
81116a04:	002d883a 	mov	r22,zero
81116a08:	18800104 	addi	r2,r3,4
81116a0c:	1cc0000b 	ldhu	r19,0(r3)
81116a10:	203dc10e 	bge	r4,zero,81116118 <__reset+0xfb0f6118>
81116a14:	003f7506 	br	811167ec <__reset+0xfb0f67ec>
81116a18:	04204534 	movhi	r16,33044
81116a1c:	84369304 	addi	r16,r16,-9652
81116a20:	003acc06 	br	81115554 <__reset+0xfb0f5554>
81116a24:	d9002c17 	ldw	r4,176(sp)
81116a28:	d9801e04 	addi	r6,sp,120
81116a2c:	b80b883a 	mov	r5,r23
81116a30:	1120fa40 	call	81120fa4 <__sprint_r>
81116a34:	103a3b1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116a38:	dc402617 	ldw	r17,152(sp)
81116a3c:	d8c02017 	ldw	r3,128(sp)
81116a40:	da000404 	addi	r8,sp,16
81116a44:	003f9c06 	br	811168b8 <__reset+0xfb0f68b8>
81116a48:	ac400043 	ldbu	r17,1(r21)
81116a4c:	94800814 	ori	r18,r18,32
81116a50:	ad400044 	addi	r21,r21,1
81116a54:	8c403fcc 	andi	r17,r17,255
81116a58:	8c40201c 	xori	r17,r17,128
81116a5c:	8c7fe004 	addi	r17,r17,-128
81116a60:	00398f06 	br	811150a0 <__reset+0xfb0f50a0>
81116a64:	d8c02d15 	stw	r3,180(sp)
81116a68:	0039883a 	mov	fp,zero
81116a6c:	003e3506 	br	81116344 <__reset+0xfb0f6344>
81116a70:	d9002c17 	ldw	r4,176(sp)
81116a74:	d9801e04 	addi	r6,sp,120
81116a78:	b80b883a 	mov	r5,r23
81116a7c:	1120fa40 	call	81120fa4 <__sprint_r>
81116a80:	103a281e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116a84:	d8c02017 	ldw	r3,128(sp)
81116a88:	da000404 	addi	r8,sp,16
81116a8c:	003cd006 	br	81115dd0 <__reset+0xfb0f5dd0>
81116a90:	8009883a 	mov	r4,r16
81116a94:	da003d15 	stw	r8,244(sp)
81116a98:	1112a400 	call	81112a40 <strlen>
81116a9c:	d8802e15 	stw	r2,184(sp)
81116aa0:	da003d17 	ldw	r8,244(sp)
81116aa4:	103c340e 	bge	r2,zero,81115b78 <__reset+0xfb0f5b78>
81116aa8:	0005883a 	mov	r2,zero
81116aac:	003c3206 	br	81115b78 <__reset+0xfb0f5b78>
81116ab0:	d9002c17 	ldw	r4,176(sp)
81116ab4:	d9801e04 	addi	r6,sp,120
81116ab8:	b80b883a 	mov	r5,r23
81116abc:	1120fa40 	call	81120fa4 <__sprint_r>
81116ac0:	103a181e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116ac4:	d8c02017 	ldw	r3,128(sp)
81116ac8:	d8801f17 	ldw	r2,124(sp)
81116acc:	da000404 	addi	r8,sp,16
81116ad0:	d9403317 	ldw	r5,204(sp)
81116ad4:	10800044 	addi	r2,r2,1
81116ad8:	44000015 	stw	r16,0(r8)
81116adc:	28c7883a 	add	r3,r5,r3
81116ae0:	003b7d06 	br	811158d8 <__reset+0xfb0f58d8>
81116ae4:	01204534 	movhi	r4,33044
81116ae8:	2136af84 	addi	r4,r4,-9538
81116aec:	d9003515 	stw	r4,212(sp)
81116af0:	003b1406 	br	81115744 <__reset+0xfb0f5744>
81116af4:	013fffc4 	movi	r4,-1
81116af8:	003a3506 	br	811153d0 <__reset+0xfb0f53d0>
81116afc:	0023883a 	mov	r17,zero
81116b00:	003d9d06 	br	81116178 <__reset+0xfb0f6178>
81116b04:	d9002c17 	ldw	r4,176(sp)
81116b08:	d9801e04 	addi	r6,sp,120
81116b0c:	b80b883a 	mov	r5,r23
81116b10:	1120fa40 	call	81120fa4 <__sprint_r>
81116b14:	103a031e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116b18:	d8c02017 	ldw	r3,128(sp)
81116b1c:	da000404 	addi	r8,sp,16
81116b20:	003d9406 	br	81116174 <__reset+0xfb0f6174>
81116b24:	01204534 	movhi	r4,33044
81116b28:	2136ab84 	addi	r4,r4,-9554
81116b2c:	d9002b15 	stw	r4,172(sp)
81116b30:	d9002b17 	ldw	r4,172(sp)
81116b34:	1c47883a 	add	r3,r3,r17
81116b38:	10800044 	addi	r2,r2,1
81116b3c:	41000015 	stw	r4,0(r8)
81116b40:	44400115 	stw	r17,4(r8)
81116b44:	d8c02015 	stw	r3,128(sp)
81116b48:	d8801f15 	stw	r2,124(sp)
81116b4c:	010001c4 	movi	r4,7
81116b50:	20bfd716 	blt	r4,r2,81116ab0 <__reset+0xfb0f6ab0>
81116b54:	42000204 	addi	r8,r8,8
81116b58:	003fdd06 	br	81116ad0 <__reset+0xfb0f6ad0>
81116b5c:	d9002c17 	ldw	r4,176(sp)
81116b60:	d9801e04 	addi	r6,sp,120
81116b64:	b80b883a 	mov	r5,r23
81116b68:	1120fa40 	call	81120fa4 <__sprint_r>
81116b6c:	1039ed1e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116b70:	d8802617 	ldw	r2,152(sp)
81116b74:	d8c02017 	ldw	r3,128(sp)
81116b78:	da000404 	addi	r8,sp,16
81116b7c:	003e1006 	br	811163c0 <__reset+0xfb0f63c0>
81116b80:	00800044 	movi	r2,1
81116b84:	10803fcc 	andi	r2,r2,255
81116b88:	00c00044 	movi	r3,1
81116b8c:	10fa3526 	beq	r2,r3,81115464 <__reset+0xfb0f5464>
81116b90:	00c00084 	movi	r3,2
81116b94:	10fbcb26 	beq	r2,r3,81115ac4 <__reset+0xfb0f5ac4>
81116b98:	003a8f06 	br	811155d8 <__reset+0xfb0f55d8>
81116b9c:	01204534 	movhi	r4,33044
81116ba0:	2136af84 	addi	r4,r4,-9538
81116ba4:	d9003515 	stw	r4,212(sp)
81116ba8:	003b7606 	br	81115984 <__reset+0xfb0f5984>
81116bac:	d8802917 	ldw	r2,164(sp)
81116bb0:	00c00184 	movi	r3,6
81116bb4:	1880012e 	bgeu	r3,r2,81116bbc <___vfprintf_internal_r+0x1ca8>
81116bb8:	1805883a 	mov	r2,r3
81116bbc:	d8802e15 	stw	r2,184(sp)
81116bc0:	1000ef16 	blt	r2,zero,81116f80 <___vfprintf_internal_r+0x206c>
81116bc4:	04204534 	movhi	r16,33044
81116bc8:	d8802a15 	stw	r2,168(sp)
81116bcc:	dcc02d15 	stw	r19,180(sp)
81116bd0:	d8002915 	stw	zero,164(sp)
81116bd4:	d8003215 	stw	zero,200(sp)
81116bd8:	8436a104 	addi	r16,r16,-9596
81116bdc:	0039883a 	mov	fp,zero
81116be0:	003aa206 	br	8111566c <__reset+0xfb0f566c>
81116be4:	0021883a 	mov	r16,zero
81116be8:	003e0706 	br	81116408 <__reset+0xfb0f6408>
81116bec:	d9002c17 	ldw	r4,176(sp)
81116bf0:	d9801e04 	addi	r6,sp,120
81116bf4:	b80b883a 	mov	r5,r23
81116bf8:	1120fa40 	call	81120fa4 <__sprint_r>
81116bfc:	1039c91e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116c00:	d8802617 	ldw	r2,152(sp)
81116c04:	d9403317 	ldw	r5,204(sp)
81116c08:	d8c02017 	ldw	r3,128(sp)
81116c0c:	da000404 	addi	r8,sp,16
81116c10:	2885c83a 	sub	r2,r5,r2
81116c14:	003dfb06 	br	81116404 <__reset+0xfb0f6404>
81116c18:	9080004c 	andi	r2,r18,1
81116c1c:	103e8f1e 	bne	r2,zero,8111665c <__reset+0xfb0f665c>
81116c20:	d8802117 	ldw	r2,132(sp)
81116c24:	003e9e06 	br	811166a0 <__reset+0xfb0f66a0>
81116c28:	1025883a 	mov	r18,r2
81116c2c:	0039883a 	mov	fp,zero
81116c30:	00800084 	movi	r2,2
81116c34:	003fd306 	br	81116b84 <__reset+0xfb0f6b84>
81116c38:	07000b44 	movi	fp,45
81116c3c:	df002785 	stb	fp,158(sp)
81116c40:	003a4006 	br	81115544 <__reset+0xfb0f5544>
81116c44:	00c00b44 	movi	r3,45
81116c48:	d8c02785 	stb	r3,158(sp)
81116c4c:	d8802a15 	stw	r2,168(sp)
81116c50:	dc802b17 	ldw	r18,172(sp)
81116c54:	d8002915 	stw	zero,164(sp)
81116c58:	07000b44 	movi	fp,45
81116c5c:	003a8006 	br	81115660 <__reset+0xfb0f5660>
81116c60:	04204534 	movhi	r16,33044
81116c64:	84369604 	addi	r16,r16,-9640
81116c68:	003f4706 	br	81116988 <__reset+0xfb0f6988>
81116c6c:	d8c02d17 	ldw	r3,180(sp)
81116c70:	d9002f17 	ldw	r4,188(sp)
81116c74:	18800017 	ldw	r2,0(r3)
81116c78:	18c00104 	addi	r3,r3,4
81116c7c:	d8c02d15 	stw	r3,180(sp)
81116c80:	11000015 	stw	r4,0(r2)
81116c84:	0038dd06 	br	81114ffc <__reset+0xfb0f4ffc>
81116c88:	dd802617 	ldw	r22,152(sp)
81116c8c:	00bfff44 	movi	r2,-3
81116c90:	b0801c16 	blt	r22,r2,81116d04 <___vfprintf_internal_r+0x1df0>
81116c94:	d9402917 	ldw	r5,164(sp)
81116c98:	2d801a16 	blt	r5,r22,81116d04 <___vfprintf_internal_r+0x1df0>
81116c9c:	dd803215 	stw	r22,200(sp)
81116ca0:	003e8906 	br	811166c8 <__reset+0xfb0f66c8>
81116ca4:	01204534 	movhi	r4,33044
81116ca8:	2136ab84 	addi	r4,r4,-9554
81116cac:	d9002b15 	stw	r4,172(sp)
81116cb0:	003c9106 	br	81115ef8 <__reset+0xfb0f5ef8>
81116cb4:	e005883a 	mov	r2,fp
81116cb8:	003e7906 	br	811166a0 <__reset+0xfb0f66a0>
81116cbc:	d9402917 	ldw	r5,164(sp)
81116cc0:	df002783 	ldbu	fp,158(sp)
81116cc4:	dcc02d15 	stw	r19,180(sp)
81116cc8:	d9402a15 	stw	r5,168(sp)
81116ccc:	d9402e15 	stw	r5,184(sp)
81116cd0:	d8002915 	stw	zero,164(sp)
81116cd4:	d8003215 	stw	zero,200(sp)
81116cd8:	003a5d06 	br	81115650 <__reset+0xfb0f5650>
81116cdc:	9080004c 	andi	r2,r18,1
81116ce0:	0039883a 	mov	fp,zero
81116ce4:	10000426 	beq	r2,zero,81116cf8 <___vfprintf_internal_r+0x1de4>
81116ce8:	00800c04 	movi	r2,48
81116cec:	dc001dc4 	addi	r16,sp,119
81116cf0:	d8801dc5 	stb	r2,119(sp)
81116cf4:	003b8006 	br	81115af8 <__reset+0xfb0f5af8>
81116cf8:	d8002e15 	stw	zero,184(sp)
81116cfc:	dc001e04 	addi	r16,sp,120
81116d00:	003a4d06 	br	81115638 <__reset+0xfb0f5638>
81116d04:	8c7fff84 	addi	r17,r17,-2
81116d08:	b5bfffc4 	addi	r22,r22,-1
81116d0c:	dd802615 	stw	r22,152(sp)
81116d10:	dc4022c5 	stb	r17,139(sp)
81116d14:	b000bf16 	blt	r22,zero,81117014 <___vfprintf_internal_r+0x2100>
81116d18:	00800ac4 	movi	r2,43
81116d1c:	d8802305 	stb	r2,140(sp)
81116d20:	00800244 	movi	r2,9
81116d24:	15807016 	blt	r2,r22,81116ee8 <___vfprintf_internal_r+0x1fd4>
81116d28:	00800c04 	movi	r2,48
81116d2c:	b5800c04 	addi	r22,r22,48
81116d30:	d8802345 	stb	r2,141(sp)
81116d34:	dd802385 	stb	r22,142(sp)
81116d38:	d88023c4 	addi	r2,sp,143
81116d3c:	df0022c4 	addi	fp,sp,139
81116d40:	d8c03317 	ldw	r3,204(sp)
81116d44:	1739c83a 	sub	fp,r2,fp
81116d48:	d9003317 	ldw	r4,204(sp)
81116d4c:	e0c7883a 	add	r3,fp,r3
81116d50:	df003a15 	stw	fp,232(sp)
81116d54:	d8c02e15 	stw	r3,184(sp)
81116d58:	00800044 	movi	r2,1
81116d5c:	1100b30e 	bge	r2,r4,8111702c <___vfprintf_internal_r+0x2118>
81116d60:	d8c02e17 	ldw	r3,184(sp)
81116d64:	18c00044 	addi	r3,r3,1
81116d68:	d8c02e15 	stw	r3,184(sp)
81116d6c:	1805883a 	mov	r2,r3
81116d70:	1800ac16 	blt	r3,zero,81117024 <___vfprintf_internal_r+0x2110>
81116d74:	d8003215 	stw	zero,200(sp)
81116d78:	003e5d06 	br	811166f0 <__reset+0xfb0f66f0>
81116d7c:	d9002c17 	ldw	r4,176(sp)
81116d80:	d9801e04 	addi	r6,sp,120
81116d84:	b80b883a 	mov	r5,r23
81116d88:	1120fa40 	call	81120fa4 <__sprint_r>
81116d8c:	1039651e 	bne	r2,zero,81115324 <__reset+0xfb0f5324>
81116d90:	dc402617 	ldw	r17,152(sp)
81116d94:	d8c02017 	ldw	r3,128(sp)
81116d98:	d8801f17 	ldw	r2,124(sp)
81116d9c:	da000404 	addi	r8,sp,16
81116da0:	003ed606 	br	811168fc <__reset+0xfb0f68fc>
81116da4:	582b883a 	mov	r21,r11
81116da8:	d8002915 	stw	zero,164(sp)
81116dac:	0038bd06 	br	811150a4 <__reset+0xfb0f50a4>
81116db0:	d8802917 	ldw	r2,164(sp)
81116db4:	103e071e 	bne	r2,zero,811165d4 <__reset+0xfb0f65d4>
81116db8:	dc002915 	stw	r16,164(sp)
81116dbc:	003e0506 	br	811165d4 <__reset+0xfb0f65d4>
81116dc0:	d9002917 	ldw	r4,164(sp)
81116dc4:	20c00044 	addi	r3,r4,1
81116dc8:	003e0f06 	br	81116608 <__reset+0xfb0f6608>
81116dcc:	01400184 	movi	r5,6
81116dd0:	d9402915 	stw	r5,164(sp)
81116dd4:	003dff06 	br	811165d4 <__reset+0xfb0f65d4>
81116dd8:	d8802104 	addi	r2,sp,132
81116ddc:	d8800315 	stw	r2,12(sp)
81116de0:	d8802504 	addi	r2,sp,148
81116de4:	d8800215 	stw	r2,8(sp)
81116de8:	d8802604 	addi	r2,sp,152
81116dec:	d8800115 	stw	r2,4(sp)
81116df0:	d8802917 	ldw	r2,164(sp)
81116df4:	d9403617 	ldw	r5,216(sp)
81116df8:	d9002c17 	ldw	r4,176(sp)
81116dfc:	d8800015 	stw	r2,0(sp)
81116e00:	01c000c4 	movi	r7,3
81116e04:	980d883a 	mov	r6,r19
81116e08:	da003d15 	stw	r8,244(sp)
81116e0c:	1118ec00 	call	81118ec0 <_dtoa_r>
81116e10:	d8c02917 	ldw	r3,164(sp)
81116e14:	da003d17 	ldw	r8,244(sp)
81116e18:	1021883a 	mov	r16,r2
81116e1c:	10f9883a 	add	fp,r2,r3
81116e20:	81000007 	ldb	r4,0(r16)
81116e24:	00800c04 	movi	r2,48
81116e28:	20805e26 	beq	r4,r2,81116fa4 <___vfprintf_internal_r+0x2090>
81116e2c:	d8c02617 	ldw	r3,152(sp)
81116e30:	e0f9883a 	add	fp,fp,r3
81116e34:	003e0a06 	br	81116660 <__reset+0xfb0f6660>
81116e38:	00c00b44 	movi	r3,45
81116e3c:	24e0003c 	xorhi	r19,r4,32768
81116e40:	d8c02a05 	stb	r3,168(sp)
81116e44:	003de906 	br	811165ec <__reset+0xfb0f65ec>
81116e48:	d8c03217 	ldw	r3,200(sp)
81116e4c:	00c07a0e 	bge	zero,r3,81117038 <___vfprintf_internal_r+0x2124>
81116e50:	00800044 	movi	r2,1
81116e54:	d9003317 	ldw	r4,204(sp)
81116e58:	1105883a 	add	r2,r2,r4
81116e5c:	d8802e15 	stw	r2,184(sp)
81116e60:	10004e16 	blt	r2,zero,81116f9c <___vfprintf_internal_r+0x2088>
81116e64:	044019c4 	movi	r17,103
81116e68:	003e2106 	br	811166f0 <__reset+0xfb0f66f0>
81116e6c:	d9002917 	ldw	r4,164(sp)
81116e70:	d8802104 	addi	r2,sp,132
81116e74:	d8800315 	stw	r2,12(sp)
81116e78:	d9000015 	stw	r4,0(sp)
81116e7c:	d8802504 	addi	r2,sp,148
81116e80:	d9403617 	ldw	r5,216(sp)
81116e84:	d9002c17 	ldw	r4,176(sp)
81116e88:	d8800215 	stw	r2,8(sp)
81116e8c:	d8802604 	addi	r2,sp,152
81116e90:	d8800115 	stw	r2,4(sp)
81116e94:	01c000c4 	movi	r7,3
81116e98:	980d883a 	mov	r6,r19
81116e9c:	da003d15 	stw	r8,244(sp)
81116ea0:	1118ec00 	call	81118ec0 <_dtoa_r>
81116ea4:	d8c02917 	ldw	r3,164(sp)
81116ea8:	da003d17 	ldw	r8,244(sp)
81116eac:	1021883a 	mov	r16,r2
81116eb0:	00801184 	movi	r2,70
81116eb4:	80f9883a 	add	fp,r16,r3
81116eb8:	88bfd926 	beq	r17,r2,81116e20 <__reset+0xfb0f6e20>
81116ebc:	003de806 	br	81116660 <__reset+0xfb0f6660>
81116ec0:	d9002917 	ldw	r4,164(sp)
81116ec4:	00c04d0e 	bge	zero,r3,81116ffc <___vfprintf_internal_r+0x20e8>
81116ec8:	2000441e 	bne	r4,zero,81116fdc <___vfprintf_internal_r+0x20c8>
81116ecc:	9480004c 	andi	r18,r18,1
81116ed0:	9000421e 	bne	r18,zero,81116fdc <___vfprintf_internal_r+0x20c8>
81116ed4:	1805883a 	mov	r2,r3
81116ed8:	18007016 	blt	r3,zero,8111709c <___vfprintf_internal_r+0x2188>
81116edc:	d8c03217 	ldw	r3,200(sp)
81116ee0:	d8c02e15 	stw	r3,184(sp)
81116ee4:	003e0206 	br	811166f0 <__reset+0xfb0f66f0>
81116ee8:	df0022c4 	addi	fp,sp,139
81116eec:	dc002915 	stw	r16,164(sp)
81116ef0:	4027883a 	mov	r19,r8
81116ef4:	e021883a 	mov	r16,fp
81116ef8:	b009883a 	mov	r4,r22
81116efc:	01400284 	movi	r5,10
81116f00:	112447c0 	call	8112447c <__modsi3>
81116f04:	10800c04 	addi	r2,r2,48
81116f08:	843fffc4 	addi	r16,r16,-1
81116f0c:	b009883a 	mov	r4,r22
81116f10:	01400284 	movi	r5,10
81116f14:	80800005 	stb	r2,0(r16)
81116f18:	11243f80 	call	811243f8 <__divsi3>
81116f1c:	102d883a 	mov	r22,r2
81116f20:	00800244 	movi	r2,9
81116f24:	15bff416 	blt	r2,r22,81116ef8 <__reset+0xfb0f6ef8>
81116f28:	9811883a 	mov	r8,r19
81116f2c:	b0800c04 	addi	r2,r22,48
81116f30:	8027883a 	mov	r19,r16
81116f34:	997fffc4 	addi	r5,r19,-1
81116f38:	98bfffc5 	stb	r2,-1(r19)
81116f3c:	dc002917 	ldw	r16,164(sp)
81116f40:	2f006a2e 	bgeu	r5,fp,811170ec <___vfprintf_internal_r+0x21d8>
81116f44:	d9c02384 	addi	r7,sp,142
81116f48:	3ccfc83a 	sub	r7,r7,r19
81116f4c:	d9002344 	addi	r4,sp,141
81116f50:	e1cf883a 	add	r7,fp,r7
81116f54:	00000106 	br	81116f5c <___vfprintf_internal_r+0x2048>
81116f58:	28800003 	ldbu	r2,0(r5)
81116f5c:	20800005 	stb	r2,0(r4)
81116f60:	21000044 	addi	r4,r4,1
81116f64:	29400044 	addi	r5,r5,1
81116f68:	393ffb1e 	bne	r7,r4,81116f58 <__reset+0xfb0f6f58>
81116f6c:	d8802304 	addi	r2,sp,140
81116f70:	14c5c83a 	sub	r2,r2,r19
81116f74:	d8c02344 	addi	r3,sp,141
81116f78:	1885883a 	add	r2,r3,r2
81116f7c:	003f7006 	br	81116d40 <__reset+0xfb0f6d40>
81116f80:	0005883a 	mov	r2,zero
81116f84:	003f0f06 	br	81116bc4 <__reset+0xfb0f6bc4>
81116f88:	d8c03217 	ldw	r3,200(sp)
81116f8c:	18c00044 	addi	r3,r3,1
81116f90:	d8c02e15 	stw	r3,184(sp)
81116f94:	1805883a 	mov	r2,r3
81116f98:	183fb20e 	bge	r3,zero,81116e64 <__reset+0xfb0f6e64>
81116f9c:	0005883a 	mov	r2,zero
81116fa0:	003fb006 	br	81116e64 <__reset+0xfb0f6e64>
81116fa4:	d9003617 	ldw	r4,216(sp)
81116fa8:	000d883a 	mov	r6,zero
81116fac:	000f883a 	mov	r7,zero
81116fb0:	980b883a 	mov	r5,r19
81116fb4:	d8c03c15 	stw	r3,240(sp)
81116fb8:	da003d15 	stw	r8,244(sp)
81116fbc:	112594c0 	call	8112594c <__eqdf2>
81116fc0:	d8c03c17 	ldw	r3,240(sp)
81116fc4:	da003d17 	ldw	r8,244(sp)
81116fc8:	103f9826 	beq	r2,zero,81116e2c <__reset+0xfb0f6e2c>
81116fcc:	00800044 	movi	r2,1
81116fd0:	10c7c83a 	sub	r3,r2,r3
81116fd4:	d8c02615 	stw	r3,152(sp)
81116fd8:	003f9506 	br	81116e30 <__reset+0xfb0f6e30>
81116fdc:	d9002917 	ldw	r4,164(sp)
81116fe0:	d8c03217 	ldw	r3,200(sp)
81116fe4:	20800044 	addi	r2,r4,1
81116fe8:	1885883a 	add	r2,r3,r2
81116fec:	d8802e15 	stw	r2,184(sp)
81116ff0:	103dbf0e 	bge	r2,zero,811166f0 <__reset+0xfb0f66f0>
81116ff4:	0005883a 	mov	r2,zero
81116ff8:	003dbd06 	br	811166f0 <__reset+0xfb0f66f0>
81116ffc:	2000211e 	bne	r4,zero,81117084 <___vfprintf_internal_r+0x2170>
81117000:	9480004c 	andi	r18,r18,1
81117004:	90001f1e 	bne	r18,zero,81117084 <___vfprintf_internal_r+0x2170>
81117008:	00800044 	movi	r2,1
8111700c:	d8802e15 	stw	r2,184(sp)
81117010:	003db706 	br	811166f0 <__reset+0xfb0f66f0>
81117014:	00800b44 	movi	r2,45
81117018:	05adc83a 	sub	r22,zero,r22
8111701c:	d8802305 	stb	r2,140(sp)
81117020:	003f3f06 	br	81116d20 <__reset+0xfb0f6d20>
81117024:	0005883a 	mov	r2,zero
81117028:	003f5206 	br	81116d74 <__reset+0xfb0f6d74>
8111702c:	90a4703a 	and	r18,r18,r2
81117030:	903f4e26 	beq	r18,zero,81116d6c <__reset+0xfb0f6d6c>
81117034:	003f4a06 	br	81116d60 <__reset+0xfb0f6d60>
81117038:	00800084 	movi	r2,2
8111703c:	10c5c83a 	sub	r2,r2,r3
81117040:	003f8406 	br	81116e54 <__reset+0xfb0f6e54>
81117044:	d8802d17 	ldw	r2,180(sp)
81117048:	d9002d17 	ldw	r4,180(sp)
8111704c:	ac400043 	ldbu	r17,1(r21)
81117050:	10800017 	ldw	r2,0(r2)
81117054:	582b883a 	mov	r21,r11
81117058:	d8802915 	stw	r2,164(sp)
8111705c:	20800104 	addi	r2,r4,4
81117060:	d9002917 	ldw	r4,164(sp)
81117064:	d8802d15 	stw	r2,180(sp)
81117068:	203e7a0e 	bge	r4,zero,81116a54 <__reset+0xfb0f6a54>
8111706c:	8c403fcc 	andi	r17,r17,255
81117070:	00bfffc4 	movi	r2,-1
81117074:	8c40201c 	xori	r17,r17,128
81117078:	d8802915 	stw	r2,164(sp)
8111707c:	8c7fe004 	addi	r17,r17,-128
81117080:	00380706 	br	811150a0 <__reset+0xfb0f50a0>
81117084:	d8c02917 	ldw	r3,164(sp)
81117088:	18c00084 	addi	r3,r3,2
8111708c:	d8c02e15 	stw	r3,184(sp)
81117090:	1805883a 	mov	r2,r3
81117094:	183d960e 	bge	r3,zero,811166f0 <__reset+0xfb0f66f0>
81117098:	003fd606 	br	81116ff4 <__reset+0xfb0f6ff4>
8111709c:	0005883a 	mov	r2,zero
811170a0:	003f8e06 	br	81116edc <__reset+0xfb0f6edc>
811170a4:	9080004c 	andi	r2,r18,1
811170a8:	103f811e 	bne	r2,zero,81116eb0 <__reset+0xfb0f6eb0>
811170ac:	d8802117 	ldw	r2,132(sp)
811170b0:	1405c83a 	sub	r2,r2,r16
811170b4:	d8803315 	stw	r2,204(sp)
811170b8:	b47ef326 	beq	r22,r17,81116c88 <__reset+0xfb0f6c88>
811170bc:	dd802617 	ldw	r22,152(sp)
811170c0:	003f1106 	br	81116d08 <__reset+0xfb0f6d08>
811170c4:	d9c02785 	stb	r7,158(sp)
811170c8:	00390406 	br	811154dc <__reset+0xfb0f54dc>
811170cc:	d9c02785 	stb	r7,158(sp)
811170d0:	0038d306 	br	81115420 <__reset+0xfb0f5420>
811170d4:	d9c02785 	stb	r7,158(sp)
811170d8:	003a6106 	br	81115a60 <__reset+0xfb0f5a60>
811170dc:	d9c02785 	stb	r7,158(sp)
811170e0:	003af806 	br	81115cc4 <__reset+0xfb0f5cc4>
811170e4:	0005883a 	mov	r2,zero
811170e8:	003d7e06 	br	811166e4 <__reset+0xfb0f66e4>
811170ec:	d8802344 	addi	r2,sp,141
811170f0:	003f1306 	br	81116d40 <__reset+0xfb0f6d40>
811170f4:	d9c02785 	stb	r7,158(sp)
811170f8:	00392306 	br	81115588 <__reset+0xfb0f5588>
811170fc:	d9c02785 	stb	r7,158(sp)
81117100:	003aa906 	br	81115ba8 <__reset+0xfb0f5ba8>
81117104:	d9c02785 	stb	r7,158(sp)
81117108:	003a3d06 	br	81115a00 <__reset+0xfb0f5a00>
8111710c:	d9c02785 	stb	r7,158(sp)
81117110:	003aca06 	br	81115c3c <__reset+0xfb0f5c3c>

81117114 <__vfprintf_internal>:
81117114:	00a04534 	movhi	r2,33044
81117118:	10bf9d04 	addi	r2,r2,-396
8111711c:	300f883a 	mov	r7,r6
81117120:	280d883a 	mov	r6,r5
81117124:	200b883a 	mov	r5,r4
81117128:	11000017 	ldw	r4,0(r2)
8111712c:	1114f141 	jmpi	81114f14 <___vfprintf_internal_r>

81117130 <__sbprintf>:
81117130:	defee204 	addi	sp,sp,-1144
81117134:	de00012e 	bgeu	sp,et,8111713c <__sbprintf+0xc>
81117138:	003b68fa 	trap	3
8111713c:	2880030b 	ldhu	r2,12(r5)
81117140:	2ac01917 	ldw	r11,100(r5)
81117144:	2a80038b 	ldhu	r10,14(r5)
81117148:	2a400717 	ldw	r9,28(r5)
8111714c:	2a000917 	ldw	r8,36(r5)
81117150:	00c10004 	movi	r3,1024
81117154:	dc011a15 	stw	r16,1128(sp)
81117158:	10bfff4c 	andi	r2,r2,65533
8111715c:	2821883a 	mov	r16,r5
81117160:	d8cb883a 	add	r5,sp,r3
81117164:	dc811c15 	stw	r18,1136(sp)
81117168:	dc411b15 	stw	r17,1132(sp)
8111716c:	dfc11d15 	stw	ra,1140(sp)
81117170:	2025883a 	mov	r18,r4
81117174:	d881030d 	sth	r2,1036(sp)
81117178:	dac11915 	stw	r11,1124(sp)
8111717c:	da81038d 	sth	r10,1038(sp)
81117180:	da410715 	stw	r9,1052(sp)
81117184:	da010915 	stw	r8,1060(sp)
81117188:	dec10015 	stw	sp,1024(sp)
8111718c:	dec10415 	stw	sp,1040(sp)
81117190:	d8c10215 	stw	r3,1032(sp)
81117194:	d8c10515 	stw	r3,1044(sp)
81117198:	d8010615 	stw	zero,1048(sp)
8111719c:	1114f140 	call	81114f14 <___vfprintf_internal_r>
811171a0:	1023883a 	mov	r17,r2
811171a4:	10000416 	blt	r2,zero,811171b8 <__sbprintf+0x88>
811171a8:	d9410004 	addi	r5,sp,1024
811171ac:	9009883a 	mov	r4,r18
811171b0:	111a7740 	call	8111a774 <_fflush_r>
811171b4:	10000d1e 	bne	r2,zero,811171ec <__sbprintf+0xbc>
811171b8:	d881030b 	ldhu	r2,1036(sp)
811171bc:	1080100c 	andi	r2,r2,64
811171c0:	10000326 	beq	r2,zero,811171d0 <__sbprintf+0xa0>
811171c4:	8080030b 	ldhu	r2,12(r16)
811171c8:	10801014 	ori	r2,r2,64
811171cc:	8080030d 	sth	r2,12(r16)
811171d0:	8805883a 	mov	r2,r17
811171d4:	dfc11d17 	ldw	ra,1140(sp)
811171d8:	dc811c17 	ldw	r18,1136(sp)
811171dc:	dc411b17 	ldw	r17,1132(sp)
811171e0:	dc011a17 	ldw	r16,1128(sp)
811171e4:	dec11e04 	addi	sp,sp,1144
811171e8:	f800283a 	ret
811171ec:	047fffc4 	movi	r17,-1
811171f0:	003ff106 	br	811171b8 <__reset+0xfb0f71b8>

811171f4 <__svfscanf_r>:
811171f4:	deff4b04 	addi	sp,sp,-724
811171f8:	de00012e 	bgeu	sp,et,81117200 <__svfscanf_r+0xc>
811171fc:	003b68fa 	trap	3
81117200:	2880030b 	ldhu	r2,12(r5)
81117204:	df00b315 	stw	fp,716(sp)
81117208:	dd80b115 	stw	r22,708(sp)
8111720c:	dfc0b415 	stw	ra,720(sp)
81117210:	ddc0b215 	stw	r23,712(sp)
81117214:	dd40b015 	stw	r21,704(sp)
81117218:	dd00af15 	stw	r20,700(sp)
8111721c:	dcc0ae15 	stw	r19,696(sp)
81117220:	dc80ad15 	stw	r18,692(sp)
81117224:	dc40ac15 	stw	r17,688(sp)
81117228:	dc00ab15 	stw	r16,684(sp)
8111722c:	10c8000c 	andi	r3,r2,8192
81117230:	d9c09c15 	stw	r7,624(sp)
81117234:	2839883a 	mov	fp,r5
81117238:	202d883a 	mov	r22,r4
8111723c:	1800061e 	bne	r3,zero,81117258 <__svfscanf_r+0x64>
81117240:	29001917 	ldw	r4,100(r5)
81117244:	00f7ffc4 	movi	r3,-8193
81117248:	10880014 	ori	r2,r2,8192
8111724c:	20c6703a 	and	r3,r4,r3
81117250:	2880030d 	sth	r2,12(r5)
81117254:	28c01915 	stw	r3,100(r5)
81117258:	30800003 	ldbu	r2,0(r6)
8111725c:	0021883a 	mov	r16,zero
81117260:	05e04534 	movhi	r23,33044
81117264:	d800a115 	stw	zero,644(sp)
81117268:	d8009e15 	stw	zero,632(sp)
8111726c:	d800a015 	stw	zero,640(sp)
81117270:	d8809b15 	stw	r2,620(sp)
81117274:	bdff9b04 	addi	r23,r23,-404
81117278:	8025883a 	mov	r18,r16
8111727c:	35000044 	addi	r20,r6,1
81117280:	10001e26 	beq	r2,zero,811172fc <__svfscanf_r+0x108>
81117284:	b9c00017 	ldw	r7,0(r23)
81117288:	3887883a 	add	r3,r7,r2
8111728c:	18c00043 	ldbu	r3,1(r3)
81117290:	18c0020c 	andi	r3,r3,8
81117294:	18001b26 	beq	r3,zero,81117304 <__svfscanf_r+0x110>
81117298:	e0800117 	ldw	r2,4(fp)
8111729c:	00800e0e 	bge	zero,r2,811172d8 <__svfscanf_r+0xe4>
811172a0:	e0c00017 	ldw	r3,0(fp)
811172a4:	b9000017 	ldw	r4,0(r23)
811172a8:	18800003 	ldbu	r2,0(r3)
811172ac:	2085883a 	add	r2,r4,r2
811172b0:	10800043 	ldbu	r2,1(r2)
811172b4:	1080020c 	andi	r2,r2,8
811172b8:	10000b26 	beq	r2,zero,811172e8 <__svfscanf_r+0xf4>
811172bc:	e0800117 	ldw	r2,4(fp)
811172c0:	18c00044 	addi	r3,r3,1
811172c4:	e0c00015 	stw	r3,0(fp)
811172c8:	10bfffc4 	addi	r2,r2,-1
811172cc:	e0800115 	stw	r2,4(fp)
811172d0:	94800044 	addi	r18,r18,1
811172d4:	00bff216 	blt	zero,r2,811172a0 <__reset+0xfb0f72a0>
811172d8:	e00b883a 	mov	r5,fp
811172dc:	b009883a 	mov	r4,r22
811172e0:	11125180 	call	81112518 <__srefill_r>
811172e4:	103fee26 	beq	r2,zero,811172a0 <__reset+0xfb0f72a0>
811172e8:	a00d883a 	mov	r6,r20
811172ec:	30800003 	ldbu	r2,0(r6)
811172f0:	35000044 	addi	r20,r6,1
811172f4:	d8809b15 	stw	r2,620(sp)
811172f8:	103fe21e 	bne	r2,zero,81117284 <__reset+0xfb0f7284>
811172fc:	d880a017 	ldw	r2,640(sp)
81117300:	00009906 	br	81117568 <__svfscanf_r+0x374>
81117304:	00c00944 	movi	r3,37
81117308:	10c0881e 	bne	r2,r3,8111752c <__svfscanf_r+0x338>
8111730c:	30c00043 	ldbu	r3,1(r6)
81117310:	0023883a 	mov	r17,zero
81117314:	0027883a 	mov	r19,zero
81117318:	01001e04 	movi	r4,120
8111731c:	01401b04 	movi	r5,108
81117320:	a1800044 	addi	r6,r20,1
81117324:	20c0a236 	bltu	r4,r3,811175b0 <__svfscanf_r+0x3bc>
81117328:	180490ba 	slli	r2,r3,2
8111732c:	02204474 	movhi	r8,33041
81117330:	421cd004 	addi	r8,r8,29504
81117334:	1205883a 	add	r2,r2,r8
81117338:	10800017 	ldw	r2,0(r2)
8111733c:	1000683a 	jmp	r2
81117340:	81117564 	muli	r4,r16,17877
81117344:	811175b0 	cmpltui	r4,r16,17878
81117348:	811175b0 	cmpltui	r4,r16,17878
8111734c:	811175b0 	cmpltui	r4,r16,17878
81117350:	811175b0 	cmpltui	r4,r16,17878
81117354:	811175b0 	cmpltui	r4,r16,17878
81117358:	811175b0 	cmpltui	r4,r16,17878
8111735c:	811175b0 	cmpltui	r4,r16,17878
81117360:	811175b0 	cmpltui	r4,r16,17878
81117364:	811175b0 	cmpltui	r4,r16,17878
81117368:	811175b0 	cmpltui	r4,r16,17878
8111736c:	811175b0 	cmpltui	r4,r16,17878
81117370:	811175b0 	cmpltui	r4,r16,17878
81117374:	811175b0 	cmpltui	r4,r16,17878
81117378:	811175b0 	cmpltui	r4,r16,17878
8111737c:	811175b0 	cmpltui	r4,r16,17878
81117380:	811175b0 	cmpltui	r4,r16,17878
81117384:	811175b0 	cmpltui	r4,r16,17878
81117388:	811175b0 	cmpltui	r4,r16,17878
8111738c:	811175b0 	cmpltui	r4,r16,17878
81117390:	811175b0 	cmpltui	r4,r16,17878
81117394:	811175b0 	cmpltui	r4,r16,17878
81117398:	811175b0 	cmpltui	r4,r16,17878
8111739c:	811175b0 	cmpltui	r4,r16,17878
811173a0:	811175b0 	cmpltui	r4,r16,17878
811173a4:	811175b0 	cmpltui	r4,r16,17878
811173a8:	811175b0 	cmpltui	r4,r16,17878
811173ac:	811175b0 	cmpltui	r4,r16,17878
811173b0:	811175b0 	cmpltui	r4,r16,17878
811173b4:	811175b0 	cmpltui	r4,r16,17878
811173b8:	811175b0 	cmpltui	r4,r16,17878
811173bc:	811175b0 	cmpltui	r4,r16,17878
811173c0:	811175b0 	cmpltui	r4,r16,17878
811173c4:	811175b0 	cmpltui	r4,r16,17878
811173c8:	811175b0 	cmpltui	r4,r16,17878
811173cc:	811175b0 	cmpltui	r4,r16,17878
811173d0:	811175b0 	cmpltui	r4,r16,17878
811173d4:	81117524 	muli	r4,r16,17876
811173d8:	811175b0 	cmpltui	r4,r16,17878
811173dc:	811175b0 	cmpltui	r4,r16,17878
811173e0:	811175b0 	cmpltui	r4,r16,17878
811173e4:	811175b0 	cmpltui	r4,r16,17878
811173e8:	81117598 	cmpnei	r4,r16,17878
811173ec:	811175b0 	cmpltui	r4,r16,17878
811173f0:	811175b0 	cmpltui	r4,r16,17878
811173f4:	811175b0 	cmpltui	r4,r16,17878
811173f8:	811175b0 	cmpltui	r4,r16,17878
811173fc:	811175b0 	cmpltui	r4,r16,17878
81117400:	811176cc 	andi	r4,r16,17883
81117404:	811176cc 	andi	r4,r16,17883
81117408:	811176cc 	andi	r4,r16,17883
8111740c:	811176cc 	andi	r4,r16,17883
81117410:	811176cc 	andi	r4,r16,17883
81117414:	811176cc 	andi	r4,r16,17883
81117418:	811176cc 	andi	r4,r16,17883
8111741c:	811176cc 	andi	r4,r16,17883
81117420:	811176cc 	andi	r4,r16,17883
81117424:	811176cc 	andi	r4,r16,17883
81117428:	811175b0 	cmpltui	r4,r16,17878
8111742c:	811175b0 	cmpltui	r4,r16,17878
81117430:	811175b0 	cmpltui	r4,r16,17878
81117434:	811175b0 	cmpltui	r4,r16,17878
81117438:	811175b0 	cmpltui	r4,r16,17878
8111743c:	811175b0 	cmpltui	r4,r16,17878
81117440:	811175b0 	cmpltui	r4,r16,17878
81117444:	811175b0 	cmpltui	r4,r16,17878
81117448:	811175b0 	cmpltui	r4,r16,17878
8111744c:	811175b0 	cmpltui	r4,r16,17878
81117450:	811176a0 	cmpeqi	r4,r16,17882
81117454:	81117750 	cmplti	r4,r16,17885
81117458:	811175b0 	cmpltui	r4,r16,17878
8111745c:	81117750 	cmplti	r4,r16,17885
81117460:	811175b0 	cmpltui	r4,r16,17878
81117464:	811175b0 	cmpltui	r4,r16,17878
81117468:	811175b0 	cmpltui	r4,r16,17878
8111746c:	811175b0 	cmpltui	r4,r16,17878
81117470:	8111773c 	xorhi	r4,r16,17884
81117474:	811175b0 	cmpltui	r4,r16,17878
81117478:	811175b0 	cmpltui	r4,r16,17878
8111747c:	81117710 	cmplti	r4,r16,17884
81117480:	811175b0 	cmpltui	r4,r16,17878
81117484:	811175b0 	cmpltui	r4,r16,17878
81117488:	811175b0 	cmpltui	r4,r16,17878
8111748c:	811175b0 	cmpltui	r4,r16,17878
81117490:	811175b0 	cmpltui	r4,r16,17878
81117494:	811175b0 	cmpltui	r4,r16,17878
81117498:	811175b0 	cmpltui	r4,r16,17878
8111749c:	811175b0 	cmpltui	r4,r16,17878
811174a0:	811176e8 	cmpgeui	r4,r16,17883
811174a4:	811175b0 	cmpltui	r4,r16,17878
811174a8:	811175b0 	cmpltui	r4,r16,17878
811174ac:	81117884 	addi	r4,r16,17890
811174b0:	811175b0 	cmpltui	r4,r16,17878
811174b4:	811175b0 	cmpltui	r4,r16,17878
811174b8:	811175b0 	cmpltui	r4,r16,17878
811174bc:	811175b0 	cmpltui	r4,r16,17878
811174c0:	811175b0 	cmpltui	r4,r16,17878
811174c4:	811175b0 	cmpltui	r4,r16,17878
811174c8:	811175b0 	cmpltui	r4,r16,17878
811174cc:	81117808 	cmpgei	r4,r16,17888
811174d0:	811177e0 	cmpeqi	r4,r16,17887
811174d4:	81117750 	cmplti	r4,r16,17885
811174d8:	81117750 	cmplti	r4,r16,17885
811174dc:	81117750 	cmplti	r4,r16,17885
811174e0:	811177cc 	andi	r4,r16,17887
811174e4:	81117910 	cmplti	r4,r16,17892
811174e8:	811175b0 	cmpltui	r4,r16,17878
811174ec:	811175b0 	cmpltui	r4,r16,17878
811174f0:	811177b8 	rdprs	r4,r16,17886
811174f4:	811175b0 	cmpltui	r4,r16,17878
811174f8:	81117788 	cmpgei	r4,r16,17886
811174fc:	81117764 	muli	r4,r16,17885
81117500:	81117674 	orhi	r4,r16,17881
81117504:	811175b0 	cmpltui	r4,r16,17878
81117508:	811175b0 	cmpltui	r4,r16,17878
8111750c:	81117660 	cmpeqi	r4,r16,17881
81117510:	811175b0 	cmpltui	r4,r16,17878
81117514:	811175e8 	cmpgeui	r4,r16,17879
81117518:	811175b0 	cmpltui	r4,r16,17878
8111751c:	811175b0 	cmpltui	r4,r16,17878
81117520:	811176e8 	cmpgeui	r4,r16,17883
81117524:	d9809d15 	stw	r6,628(sp)
81117528:	3029883a 	mov	r20,r6
8111752c:	e0800117 	ldw	r2,4(fp)
81117530:	0081aa0e 	bge	zero,r2,81117bdc <__svfscanf_r+0x9e8>
81117534:	e0800017 	ldw	r2,0(fp)
81117538:	a0ffffc3 	ldbu	r3,-1(r20)
8111753c:	11000003 	ldbu	r4,0(r2)
81117540:	20ff6e1e 	bne	r4,r3,811172fc <__reset+0xfb0f72fc>
81117544:	e0c00117 	ldw	r3,4(fp)
81117548:	10800044 	addi	r2,r2,1
8111754c:	e0800015 	stw	r2,0(fp)
81117550:	18bfffc4 	addi	r2,r3,-1
81117554:	e0800115 	stw	r2,4(fp)
81117558:	94800044 	addi	r18,r18,1
8111755c:	a00d883a 	mov	r6,r20
81117560:	003f6206 	br	811172ec <__reset+0xfb0f72ec>
81117564:	00bfffc4 	movi	r2,-1
81117568:	dfc0b417 	ldw	ra,720(sp)
8111756c:	df00b317 	ldw	fp,716(sp)
81117570:	ddc0b217 	ldw	r23,712(sp)
81117574:	dd80b117 	ldw	r22,708(sp)
81117578:	dd40b017 	ldw	r21,704(sp)
8111757c:	dd00af17 	ldw	r20,700(sp)
81117580:	dcc0ae17 	ldw	r19,696(sp)
81117584:	dc80ad17 	ldw	r18,692(sp)
81117588:	dc40ac17 	ldw	r17,688(sp)
8111758c:	dc00ab17 	ldw	r16,684(sp)
81117590:	dec0b504 	addi	sp,sp,724
81117594:	f800283a 	ret
81117598:	a0800043 	ldbu	r2,1(r20)
8111759c:	3029883a 	mov	r20,r6
811175a0:	8c400414 	ori	r17,r17,16
811175a4:	10c03fcc 	andi	r3,r2,255
811175a8:	a1800044 	addi	r6,r20,1
811175ac:	20ff5e2e 	bgeu	r4,r3,81117328 <__reset+0xfb0f7328>
811175b0:	38c7883a 	add	r3,r7,r3
811175b4:	18800043 	ldbu	r2,1(r3)
811175b8:	d9809d15 	stw	r6,628(sp)
811175bc:	00c00044 	movi	r3,1
811175c0:	108000cc 	andi	r2,r2,3
811175c4:	10c18f26 	beq	r2,r3,81117c04 <__svfscanf_r+0xa10>
811175c8:	e0800117 	ldw	r2,4(fp)
811175cc:	00808716 	blt	zero,r2,811177ec <__svfscanf_r+0x5f8>
811175d0:	e00b883a 	mov	r5,fp
811175d4:	b009883a 	mov	r4,r22
811175d8:	11125180 	call	81112518 <__srefill_r>
811175dc:	1001431e 	bne	r2,zero,81117aec <__svfscanf_r+0x8f8>
811175e0:	b9c00017 	ldw	r7,0(r23)
811175e4:	00008106 	br	811177ec <__svfscanf_r+0x5f8>
811175e8:	e0800117 	ldw	r2,4(fp)
811175ec:	d9809d15 	stw	r6,628(sp)
811175f0:	0081a30e 	bge	zero,r2,81117c80 <__svfscanf_r+0xa8c>
811175f4:	00a044b4 	movhi	r2,33042
811175f8:	10bca904 	addi	r2,r2,-3420
811175fc:	02000284 	movi	r8,10
81117600:	d880a115 	stw	r2,644(sp)
81117604:	da009e15 	stw	r8,632(sp)
81117608:	050000c4 	movi	r20,3
8111760c:	e0c00017 	ldw	r3,0(fp)
81117610:	00000206 	br	8111761c <__svfscanf_r+0x428>
81117614:	18c00044 	addi	r3,r3,1
81117618:	e0c00015 	stw	r3,0(fp)
8111761c:	19000003 	ldbu	r4,0(r3)
81117620:	20803fcc 	andi	r2,r4,255
81117624:	3885883a 	add	r2,r7,r2
81117628:	10800043 	ldbu	r2,1(r2)
8111762c:	1140020c 	andi	r5,r2,8
81117630:	2801ab26 	beq	r5,zero,81117ce0 <__svfscanf_r+0xaec>
81117634:	e0800117 	ldw	r2,4(fp)
81117638:	94800044 	addi	r18,r18,1
8111763c:	10bfffc4 	addi	r2,r2,-1
81117640:	e0800115 	stw	r2,4(fp)
81117644:	00bff316 	blt	zero,r2,81117614 <__reset+0xfb0f7614>
81117648:	e00b883a 	mov	r5,fp
8111764c:	b009883a 	mov	r4,r22
81117650:	11125180 	call	81112518 <__srefill_r>
81117654:	1001251e 	bne	r2,zero,81117aec <__svfscanf_r+0x8f8>
81117658:	b9c00017 	ldw	r7,0(r23)
8111765c:	003feb06 	br	8111760c <__reset+0xfb0f760c>
81117660:	e0800117 	ldw	r2,4(fp)
81117664:	d9809d15 	stw	r6,628(sp)
81117668:	00818b0e 	bge	zero,r2,81117c98 <__svfscanf_r+0xaa4>
8111766c:	05000084 	movi	r20,2
81117670:	003fe606 	br	8111760c <__reset+0xfb0f760c>
81117674:	e0800117 	ldw	r2,4(fp)
81117678:	d9809d15 	stw	r6,628(sp)
8111767c:	8c408814 	ori	r17,r17,544
81117680:	00801d0e 	bge	zero,r2,811176f8 <__svfscanf_r+0x504>
81117684:	00a044b4 	movhi	r2,33042
81117688:	10bca904 	addi	r2,r2,-3420
8111768c:	02000404 	movi	r8,16
81117690:	d880a115 	stw	r2,644(sp)
81117694:	da009e15 	stw	r8,632(sp)
81117698:	050000c4 	movi	r20,3
8111769c:	003fdb06 	br	8111760c <__reset+0xfb0f760c>
811176a0:	e0800117 	ldw	r2,4(fp)
811176a4:	d9809d15 	stw	r6,628(sp)
811176a8:	8c400054 	ori	r17,r17,1
811176ac:	00bfc80e 	bge	zero,r2,811175d0 <__reset+0xfb0f75d0>
811176b0:	00e04474 	movhi	r3,33041
811176b4:	18cab604 	addi	r3,r3,10968
811176b8:	02000284 	movi	r8,10
811176bc:	d8c0a115 	stw	r3,644(sp)
811176c0:	da009e15 	stw	r8,632(sp)
811176c4:	050000c4 	movi	r20,3
811176c8:	003fd006 	br	8111760c <__reset+0xfb0f760c>
811176cc:	9cc002a4 	muli	r19,r19,10
811176d0:	a0800043 	ldbu	r2,1(r20)
811176d4:	3029883a 	mov	r20,r6
811176d8:	98e7883a 	add	r19,r19,r3
811176dc:	9cfff404 	addi	r19,r19,-48
811176e0:	10c03fcc 	andi	r3,r2,255
811176e4:	003f0e06 	br	81117320 <__reset+0xfb0f7320>
811176e8:	e0800117 	ldw	r2,4(fp)
811176ec:	d9809d15 	stw	r6,628(sp)
811176f0:	8c408014 	ori	r17,r17,512
811176f4:	00bfe316 	blt	zero,r2,81117684 <__reset+0xfb0f7684>
811176f8:	e00b883a 	mov	r5,fp
811176fc:	b009883a 	mov	r4,r22
81117700:	11125180 	call	81112518 <__srefill_r>
81117704:	1000f91e 	bne	r2,zero,81117aec <__svfscanf_r+0x8f8>
81117708:	b9c00017 	ldw	r7,0(r23)
8111770c:	003fdd06 	br	81117684 <__reset+0xfb0f7684>
81117710:	e0800117 	ldw	r2,4(fp)
81117714:	d9809d15 	stw	r6,628(sp)
81117718:	8c400054 	ori	r17,r17,1
8111771c:	0080140e 	bge	zero,r2,81117770 <__svfscanf_r+0x57c>
81117720:	00a044b4 	movhi	r2,33042
81117724:	10bca904 	addi	r2,r2,-3420
81117728:	02000204 	movi	r8,8
8111772c:	d880a115 	stw	r2,644(sp)
81117730:	da009e15 	stw	r8,632(sp)
81117734:	050000c4 	movi	r20,3
81117738:	003fb406 	br	8111760c <__reset+0xfb0f760c>
8111773c:	a0800043 	ldbu	r2,1(r20)
81117740:	8c400094 	ori	r17,r17,2
81117744:	3029883a 	mov	r20,r6
81117748:	10c03fcc 	andi	r3,r2,255
8111774c:	003ef406 	br	81117320 <__reset+0xfb0f7320>
81117750:	e0800117 	ldw	r2,4(fp)
81117754:	d9809d15 	stw	r6,628(sp)
81117758:	0081420e 	bge	zero,r2,81117c64 <__svfscanf_r+0xa70>
8111775c:	05000104 	movi	r20,4
81117760:	003faa06 	br	8111760c <__reset+0xfb0f760c>
81117764:	e0800117 	ldw	r2,4(fp)
81117768:	d9809d15 	stw	r6,628(sp)
8111776c:	00bfec16 	blt	zero,r2,81117720 <__reset+0xfb0f7720>
81117770:	e00b883a 	mov	r5,fp
81117774:	b009883a 	mov	r4,r22
81117778:	11125180 	call	81112518 <__srefill_r>
8111777c:	1000db1e 	bne	r2,zero,81117aec <__svfscanf_r+0x8f8>
81117780:	b9c00017 	ldw	r7,0(r23)
81117784:	003fe606 	br	81117720 <__reset+0xfb0f7720>
81117788:	d9809d15 	stw	r6,628(sp)
8111778c:	8880040c 	andi	r2,r17,16
81117790:	10009c1e 	bne	r2,zero,81117a04 <__svfscanf_r+0x810>
81117794:	8880010c 	andi	r2,r17,4
81117798:	10011e26 	beq	r2,zero,81117c14 <__svfscanf_r+0xa20>
8111779c:	da009c17 	ldw	r8,624(sp)
811177a0:	3029883a 	mov	r20,r6
811177a4:	40800017 	ldw	r2,0(r8)
811177a8:	42000104 	addi	r8,r8,4
811177ac:	da009c15 	stw	r8,624(sp)
811177b0:	1480000d 	sth	r18,0(r2)
811177b4:	003ecc06 	br	811172e8 <__reset+0xfb0f72e8>
811177b8:	a0c00043 	ldbu	r3,1(r20)
811177bc:	19410c26 	beq	r3,r5,81117bf0 <__svfscanf_r+0x9fc>
811177c0:	8c400054 	ori	r17,r17,1
811177c4:	3029883a 	mov	r20,r6
811177c8:	003ed506 	br	81117320 <__reset+0xfb0f7320>
811177cc:	a0800043 	ldbu	r2,1(r20)
811177d0:	8c400114 	ori	r17,r17,4
811177d4:	3029883a 	mov	r20,r6
811177d8:	10c03fcc 	andi	r3,r2,255
811177dc:	003ed006 	br	81117320 <__reset+0xfb0f7320>
811177e0:	e0800117 	ldw	r2,4(fp)
811177e4:	d9809d15 	stw	r6,628(sp)
811177e8:	00bf790e 	bge	zero,r2,811175d0 <__reset+0xfb0f75d0>
811177ec:	00a04474 	movhi	r2,33041
811177f0:	108ab604 	addi	r2,r2,10968
811177f4:	02000284 	movi	r8,10
811177f8:	d880a115 	stw	r2,644(sp)
811177fc:	da009e15 	stw	r8,632(sp)
81117800:	050000c4 	movi	r20,3
81117804:	003f8106 	br	8111760c <__reset+0xfb0f760c>
81117808:	e0800117 	ldw	r2,4(fp)
8111780c:	d9809d15 	stw	r6,628(sp)
81117810:	0080c40e 	bge	zero,r2,81117b24 <__svfscanf_r+0x930>
81117814:	9800011e 	bne	r19,zero,8111781c <__svfscanf_r+0x628>
81117818:	04c00044 	movi	r19,1
8111781c:	8880004c 	andi	r2,r17,1
81117820:	1000441e 	bne	r2,zero,81117934 <__svfscanf_r+0x740>
81117824:	8c40040c 	andi	r17,r17,16
81117828:	8800da26 	beq	r17,zero,81117b94 <__svfscanf_r+0x9a0>
8111782c:	0021883a 	mov	r16,zero
81117830:	00000806 	br	81117854 <__svfscanf_r+0x660>
81117834:	1887883a 	add	r3,r3,r2
81117838:	e00b883a 	mov	r5,fp
8111783c:	b009883a 	mov	r4,r22
81117840:	e0c00015 	stw	r3,0(fp)
81117844:	80a1883a 	add	r16,r16,r2
81117848:	98a7c83a 	sub	r19,r19,r2
8111784c:	11125180 	call	81112518 <__srefill_r>
81117850:	1000ca1e 	bne	r2,zero,81117b7c <__svfscanf_r+0x988>
81117854:	e0800117 	ldw	r2,4(fp)
81117858:	e0c00017 	ldw	r3,0(fp)
8111785c:	14fff516 	blt	r2,r19,81117834 <__reset+0xfb0f7834>
81117860:	14c5c83a 	sub	r2,r2,r19
81117864:	1cd5883a 	add	r10,r3,r19
81117868:	84e1883a 	add	r16,r16,r19
8111786c:	e0800115 	stw	r2,4(fp)
81117870:	e2800015 	stw	r10,0(fp)
81117874:	dd009d17 	ldw	r20,628(sp)
81117878:	9425883a 	add	r18,r18,r16
8111787c:	a00d883a 	mov	r6,r20
81117880:	003e9a06 	br	811172ec <__reset+0xfb0f72ec>
81117884:	300b883a 	mov	r5,r6
81117888:	d9005884 	addi	r4,sp,354
8111788c:	d9809d15 	stw	r6,628(sp)
81117890:	111d67c0 	call	8111d67c <__sccl>
81117894:	1029883a 	mov	r20,r2
81117898:	e0800117 	ldw	r2,4(fp)
8111789c:	0081050e 	bge	zero,r2,81117cb4 <__svfscanf_r+0xac0>
811178a0:	e1000017 	ldw	r4,0(fp)
811178a4:	20800003 	ldbu	r2,0(r4)
811178a8:	98005926 	beq	r19,zero,81117a10 <__svfscanf_r+0x81c>
811178ac:	8c40040c 	andi	r17,r17,16
811178b0:	88005a26 	beq	r17,zero,81117a1c <__svfscanf_r+0x828>
811178b4:	9823883a 	mov	r17,r19
811178b8:	0021883a 	mov	r16,zero
811178bc:	00000106 	br	811178c4 <__svfscanf_r+0x6d0>
811178c0:	20800003 	ldbu	r2,0(r4)
811178c4:	10803fcc 	andi	r2,r2,255
811178c8:	d8c05884 	addi	r3,sp,354
811178cc:	1885883a 	add	r2,r3,r2
811178d0:	10800007 	ldb	r2,0(r2)
811178d4:	1000ad26 	beq	r2,zero,81117b8c <__svfscanf_r+0x998>
811178d8:	e0800117 	ldw	r2,4(fp)
811178dc:	21000044 	addi	r4,r4,1
811178e0:	84000044 	addi	r16,r16,1
811178e4:	10bfffc4 	addi	r2,r2,-1
811178e8:	e0800115 	stw	r2,4(fp)
811178ec:	e1000015 	stw	r4,0(fp)
811178f0:	84c0a026 	beq	r16,r19,81117b74 <__svfscanf_r+0x980>
811178f4:	00bff216 	blt	zero,r2,811178c0 <__reset+0xfb0f78c0>
811178f8:	e00b883a 	mov	r5,fp
811178fc:	b009883a 	mov	r4,r22
81117900:	11125180 	call	81112518 <__srefill_r>
81117904:	10009a1e 	bne	r2,zero,81117b70 <__svfscanf_r+0x97c>
81117908:	e1000017 	ldw	r4,0(fp)
8111790c:	003fec06 	br	811178c0 <__reset+0xfb0f78c0>
81117910:	e0800117 	ldw	r2,4(fp)
81117914:	d9809d15 	stw	r6,628(sp)
81117918:	0080eb0e 	bge	zero,r2,81117cc8 <__svfscanf_r+0xad4>
8111791c:	00a04474 	movhi	r2,33041
81117920:	108ab604 	addi	r2,r2,10968
81117924:	d880a115 	stw	r2,644(sp)
81117928:	d8009e15 	stw	zero,632(sp)
8111792c:	050000c4 	movi	r20,3
81117930:	003f3606 	br	8111760c <__reset+0xfb0f760c>
81117934:	dd409904 	addi	r21,sp,612
81117938:	8c40040c 	andi	r17,r17,16
8111793c:	01800204 	movi	r6,8
81117940:	000b883a 	mov	r5,zero
81117944:	a809883a 	mov	r4,r21
81117948:	dc409f15 	stw	r17,636(sp)
8111794c:	11122140 	call	81112214 <memset>
81117950:	dc409f17 	ldw	r17,636(sp)
81117954:	88006e26 	beq	r17,zero,81117b10 <__svfscanf_r+0x91c>
81117958:	0029883a 	mov	r20,zero
8111795c:	0023883a 	mov	r17,zero
81117960:	111ba980 	call	8111ba98 <__locale_mb_cur_max>
81117964:	14406126 	beq	r2,r17,81117aec <__svfscanf_r+0x8f8>
81117968:	e0800017 	ldw	r2,0(fp)
8111796c:	e0c00117 	ldw	r3,4(fp)
81117970:	d9000104 	addi	r4,sp,4
81117974:	12000003 	ldbu	r8,0(r2)
81117978:	18ffffc4 	addi	r3,r3,-1
8111797c:	10800044 	addi	r2,r2,1
81117980:	e0c00115 	stw	r3,4(fp)
81117984:	e0800015 	stw	r2,0(fp)
81117988:	8c000044 	addi	r16,r17,1
8111798c:	dd400015 	stw	r21,0(sp)
81117990:	2463883a 	add	r17,r4,r17
81117994:	200d883a 	mov	r6,r4
81117998:	a00b883a 	mov	r5,r20
8111799c:	800f883a 	mov	r7,r16
811179a0:	b009883a 	mov	r4,r22
811179a4:	8a000005 	stb	r8,0(r17)
811179a8:	111bb540 	call	8111bb54 <_mbrtowc_r>
811179ac:	017fffc4 	movi	r5,-1
811179b0:	11404e26 	beq	r2,r5,81117aec <__svfscanf_r+0x8f8>
811179b4:	1000601e 	bne	r2,zero,81117b38 <__svfscanf_r+0x944>
811179b8:	da009f17 	ldw	r8,636(sp)
811179bc:	4000641e 	bne	r8,zero,81117b50 <__svfscanf_r+0x95c>
811179c0:	a0000015 	stw	zero,0(r20)
811179c4:	9425883a 	add	r18,r18,r16
811179c8:	9967883a 	add	r19,r19,r5
811179cc:	a5000104 	addi	r20,r20,4
811179d0:	e0800117 	ldw	r2,4(fp)
811179d4:	0023883a 	mov	r17,zero
811179d8:	00804b16 	blt	zero,r2,81117b08 <__svfscanf_r+0x914>
811179dc:	e00b883a 	mov	r5,fp
811179e0:	b009883a 	mov	r4,r22
811179e4:	11125180 	call	81112518 <__srefill_r>
811179e8:	10004726 	beq	r2,zero,81117b08 <__svfscanf_r+0x914>
811179ec:	88003f1e 	bne	r17,zero,81117aec <__svfscanf_r+0x8f8>
811179f0:	d8c09f17 	ldw	r3,636(sp)
811179f4:	1800031e 	bne	r3,zero,81117a04 <__svfscanf_r+0x810>
811179f8:	da00a017 	ldw	r8,640(sp)
811179fc:	42000044 	addi	r8,r8,1
81117a00:	da00a015 	stw	r8,640(sp)
81117a04:	dd009d17 	ldw	r20,628(sp)
81117a08:	a00d883a 	mov	r6,r20
81117a0c:	003e3706 	br	811172ec <__reset+0xfb0f72ec>
81117a10:	8c40040c 	andi	r17,r17,16
81117a14:	04ffffc4 	movi	r19,-1
81117a18:	883fa61e 	bne	r17,zero,811178b4 <__reset+0xfb0f78b4>
81117a1c:	da009c17 	ldw	r8,624(sp)
81117a20:	9abfffc4 	addi	r10,r19,-1
81117a24:	44000017 	ldw	r16,0(r8)
81117a28:	44400104 	addi	r17,r8,4
81117a2c:	8007883a 	mov	r3,r16
81117a30:	82ab883a 	add	r21,r16,r10
81117a34:	00000306 	br	81117a44 <__svfscanf_r+0x850>
81117a38:	e1000017 	ldw	r4,0(fp)
81117a3c:	9807883a 	mov	r3,r19
81117a40:	20800003 	ldbu	r2,0(r4)
81117a44:	10803fcc 	andi	r2,r2,255
81117a48:	d9405884 	addi	r5,sp,354
81117a4c:	2885883a 	add	r2,r5,r2
81117a50:	10800007 	ldb	r2,0(r2)
81117a54:	10004b26 	beq	r2,zero,81117b84 <__svfscanf_r+0x990>
81117a58:	e0800117 	ldw	r2,4(fp)
81117a5c:	21400044 	addi	r5,r4,1
81117a60:	e1400015 	stw	r5,0(fp)
81117a64:	10bfffc4 	addi	r2,r2,-1
81117a68:	e0800115 	stw	r2,4(fp)
81117a6c:	20800003 	ldbu	r2,0(r4)
81117a70:	1cc00044 	addi	r19,r3,1
81117a74:	18800005 	stb	r2,0(r3)
81117a78:	1d400726 	beq	r3,r21,81117a98 <__svfscanf_r+0x8a4>
81117a7c:	e0800117 	ldw	r2,4(fp)
81117a80:	00bfed16 	blt	zero,r2,81117a38 <__reset+0xfb0f7a38>
81117a84:	e00b883a 	mov	r5,fp
81117a88:	b009883a 	mov	r4,r22
81117a8c:	11125180 	call	81112518 <__srefill_r>
81117a90:	103fe926 	beq	r2,zero,81117a38 <__reset+0xfb0f7a38>
81117a94:	84c01526 	beq	r16,r19,81117aec <__svfscanf_r+0x8f8>
81117a98:	9c21c83a 	sub	r16,r19,r16
81117a9c:	803e1726 	beq	r16,zero,811172fc <__reset+0xfb0f72fc>
81117aa0:	da00a017 	ldw	r8,640(sp)
81117aa4:	98000005 	stb	zero,0(r19)
81117aa8:	dc409c15 	stw	r17,624(sp)
81117aac:	42000044 	addi	r8,r8,1
81117ab0:	da00a015 	stw	r8,640(sp)
81117ab4:	9425883a 	add	r18,r18,r16
81117ab8:	a00d883a 	mov	r6,r20
81117abc:	003e0b06 	br	811172ec <__reset+0xfb0f72ec>
81117ac0:	017fff84 	movi	r5,-2
81117ac4:	11439b1e 	bne	r2,r5,81118934 <__svfscanf_r+0x1740>
81117ac8:	8821883a 	mov	r16,r17
81117acc:	e0800117 	ldw	r2,4(fp)
81117ad0:	0082e516 	blt	zero,r2,81118668 <__svfscanf_r+0x1474>
81117ad4:	e00b883a 	mov	r5,fp
81117ad8:	b009883a 	mov	r4,r22
81117adc:	11125180 	call	81112518 <__srefill_r>
81117ae0:	1002e126 	beq	r2,zero,81118668 <__svfscanf_r+0x1474>
81117ae4:	dc409f17 	ldw	r17,636(sp)
81117ae8:	8002e826 	beq	r16,zero,8111868c <__svfscanf_r+0x1498>
81117aec:	da00a017 	ldw	r8,640(sp)
81117af0:	403e9c26 	beq	r8,zero,81117564 <__reset+0xfb0f7564>
81117af4:	e080030b 	ldhu	r2,12(fp)
81117af8:	1080100c 	andi	r2,r2,64
81117afc:	103e991e 	bne	r2,zero,81117564 <__reset+0xfb0f7564>
81117b00:	4005883a 	mov	r2,r8
81117b04:	003e9806 	br	81117568 <__reset+0xfb0f7568>
81117b08:	983f951e 	bne	r19,zero,81117960 <__reset+0xfb0f7960>
81117b0c:	003fb806 	br	811179f0 <__reset+0xfb0f79f0>
81117b10:	da009c17 	ldw	r8,624(sp)
81117b14:	45000017 	ldw	r20,0(r8)
81117b18:	42000104 	addi	r8,r8,4
81117b1c:	da009c15 	stw	r8,624(sp)
81117b20:	003f8e06 	br	8111795c <__reset+0xfb0f795c>
81117b24:	e00b883a 	mov	r5,fp
81117b28:	b009883a 	mov	r4,r22
81117b2c:	11125180 	call	81112518 <__srefill_r>
81117b30:	103f3826 	beq	r2,zero,81117814 <__reset+0xfb0f7814>
81117b34:	003fed06 	br	81117aec <__reset+0xfb0f7aec>
81117b38:	00ffff84 	movi	r3,-2
81117b3c:	10c0071e 	bne	r2,r3,81117b5c <__svfscanf_r+0x968>
81117b40:	e0800117 	ldw	r2,4(fp)
81117b44:	8023883a 	mov	r17,r16
81117b48:	00bf8516 	blt	zero,r2,81117960 <__reset+0xfb0f7960>
81117b4c:	003fa306 	br	811179dc <__reset+0xfb0f79dc>
81117b50:	9425883a 	add	r18,r18,r16
81117b54:	9cffffc4 	addi	r19,r19,-1
81117b58:	003f9d06 	br	811179d0 <__reset+0xfb0f79d0>
81117b5c:	da009f17 	ldw	r8,636(sp)
81117b60:	9425883a 	add	r18,r18,r16
81117b64:	9cffffc4 	addi	r19,r19,-1
81117b68:	403f9826 	beq	r8,zero,811179cc <__reset+0xfb0f79cc>
81117b6c:	003f9806 	br	811179d0 <__reset+0xfb0f79d0>
81117b70:	8023883a 	mov	r17,r16
81117b74:	8821883a 	mov	r16,r17
81117b78:	003fce06 	br	81117ab4 <__reset+0xfb0f7ab4>
81117b7c:	803f3d1e 	bne	r16,zero,81117874 <__reset+0xfb0f7874>
81117b80:	003fda06 	br	81117aec <__reset+0xfb0f7aec>
81117b84:	1827883a 	mov	r19,r3
81117b88:	003fc306 	br	81117a98 <__reset+0xfb0f7a98>
81117b8c:	803fc91e 	bne	r16,zero,81117ab4 <__reset+0xfb0f7ab4>
81117b90:	003dda06 	br	811172fc <__reset+0xfb0f72fc>
81117b94:	da009c17 	ldw	r8,624(sp)
81117b98:	df000015 	stw	fp,0(sp)
81117b9c:	980f883a 	mov	r7,r19
81117ba0:	41400017 	ldw	r5,0(r8)
81117ba4:	01800044 	movi	r6,1
81117ba8:	b009883a 	mov	r4,r22
81117bac:	111ac6c0 	call	8111ac6c <_fread_r>
81117bb0:	da009c17 	ldw	r8,624(sp)
81117bb4:	40c00104 	addi	r3,r8,4
81117bb8:	103fcc26 	beq	r2,zero,81117aec <__reset+0xfb0f7aec>
81117bbc:	da00a017 	ldw	r8,640(sp)
81117bc0:	dd009d17 	ldw	r20,628(sp)
81117bc4:	90a5883a 	add	r18,r18,r2
81117bc8:	42000044 	addi	r8,r8,1
81117bcc:	da00a015 	stw	r8,640(sp)
81117bd0:	d8c09c15 	stw	r3,624(sp)
81117bd4:	a00d883a 	mov	r6,r20
81117bd8:	003dc406 	br	811172ec <__reset+0xfb0f72ec>
81117bdc:	e00b883a 	mov	r5,fp
81117be0:	b009883a 	mov	r4,r22
81117be4:	11125180 	call	81112518 <__srefill_r>
81117be8:	103e5226 	beq	r2,zero,81117534 <__reset+0xfb0f7534>
81117bec:	003fbf06 	br	81117aec <__reset+0xfb0f7aec>
81117bf0:	a0800083 	ldbu	r2,2(r20)
81117bf4:	8c400094 	ori	r17,r17,2
81117bf8:	a5000084 	addi	r20,r20,2
81117bfc:	10c03fcc 	andi	r3,r2,255
81117c00:	003dc706 	br	81117320 <__reset+0xfb0f7320>
81117c04:	e0800117 	ldw	r2,4(fp)
81117c08:	88e2b03a 	or	r17,r17,r3
81117c0c:	00bef716 	blt	zero,r2,811177ec <__reset+0xfb0f77ec>
81117c10:	003e6f06 	br	811175d0 <__reset+0xfb0f75d0>
81117c14:	8880004c 	andi	r2,r17,1
81117c18:	10000b1e 	bne	r2,zero,81117c48 <__svfscanf_r+0xa54>
81117c1c:	8c40008c 	andi	r17,r17,2
81117c20:	88000926 	beq	r17,zero,81117c48 <__svfscanf_r+0xa54>
81117c24:	da009c17 	ldw	r8,624(sp)
81117c28:	9007d7fa 	srai	r3,r18,31
81117c2c:	dd009d17 	ldw	r20,628(sp)
81117c30:	40800017 	ldw	r2,0(r8)
81117c34:	42000104 	addi	r8,r8,4
81117c38:	da009c15 	stw	r8,624(sp)
81117c3c:	14800015 	stw	r18,0(r2)
81117c40:	10c00115 	stw	r3,4(r2)
81117c44:	003da806 	br	811172e8 <__reset+0xfb0f72e8>
81117c48:	da009c17 	ldw	r8,624(sp)
81117c4c:	dd009d17 	ldw	r20,628(sp)
81117c50:	40800017 	ldw	r2,0(r8)
81117c54:	42000104 	addi	r8,r8,4
81117c58:	da009c15 	stw	r8,624(sp)
81117c5c:	14800015 	stw	r18,0(r2)
81117c60:	003da106 	br	811172e8 <__reset+0xfb0f72e8>
81117c64:	e00b883a 	mov	r5,fp
81117c68:	b009883a 	mov	r4,r22
81117c6c:	11125180 	call	81112518 <__srefill_r>
81117c70:	103f9e1e 	bne	r2,zero,81117aec <__reset+0xfb0f7aec>
81117c74:	b9c00017 	ldw	r7,0(r23)
81117c78:	05000104 	movi	r20,4
81117c7c:	003e6306 	br	8111760c <__reset+0xfb0f760c>
81117c80:	e00b883a 	mov	r5,fp
81117c84:	b009883a 	mov	r4,r22
81117c88:	11125180 	call	81112518 <__srefill_r>
81117c8c:	103f971e 	bne	r2,zero,81117aec <__reset+0xfb0f7aec>
81117c90:	b9c00017 	ldw	r7,0(r23)
81117c94:	003e5706 	br	811175f4 <__reset+0xfb0f75f4>
81117c98:	e00b883a 	mov	r5,fp
81117c9c:	b009883a 	mov	r4,r22
81117ca0:	11125180 	call	81112518 <__srefill_r>
81117ca4:	103f911e 	bne	r2,zero,81117aec <__reset+0xfb0f7aec>
81117ca8:	b9c00017 	ldw	r7,0(r23)
81117cac:	05000084 	movi	r20,2
81117cb0:	003e5606 	br	8111760c <__reset+0xfb0f760c>
81117cb4:	e00b883a 	mov	r5,fp
81117cb8:	b009883a 	mov	r4,r22
81117cbc:	11125180 	call	81112518 <__srefill_r>
81117cc0:	103ef726 	beq	r2,zero,811178a0 <__reset+0xfb0f78a0>
81117cc4:	003f8906 	br	81117aec <__reset+0xfb0f7aec>
81117cc8:	e00b883a 	mov	r5,fp
81117ccc:	b009883a 	mov	r4,r22
81117cd0:	11125180 	call	81112518 <__srefill_r>
81117cd4:	103f851e 	bne	r2,zero,81117aec <__reset+0xfb0f7aec>
81117cd8:	b9c00017 	ldw	r7,0(r23)
81117cdc:	003f0f06 	br	8111791c <__reset+0xfb0f791c>
81117ce0:	014000c4 	movi	r5,3
81117ce4:	a1414a26 	beq	r20,r5,81118210 <__svfscanf_r+0x101c>
81117ce8:	01000104 	movi	r4,4
81117cec:	a101f11e 	bne	r20,r4,811184b4 <__svfscanf_r+0x12c0>
81117cf0:	b009883a 	mov	r4,r22
81117cf4:	111babc0 	call	8111babc <_localeconv_r>
81117cf8:	10800017 	ldw	r2,0(r2)
81117cfc:	98ffffc4 	addi	r3,r19,-1
81117d00:	d880a315 	stw	r2,652(sp)
81117d04:	00805704 	movi	r2,348
81117d08:	10c21e2e 	bgeu	r2,r3,81118584 <__svfscanf_r+0x1390>
81117d0c:	9cffa8c4 	addi	r19,r19,-349
81117d10:	dcc0a215 	stw	r19,648(sp)
81117d14:	04c05744 	movi	r19,349
81117d18:	8d01e014 	ori	r20,r17,1920
81117d1c:	0023883a 	mov	r17,zero
81117d20:	dc000104 	addi	r16,sp,4
81117d24:	8805883a 	mov	r2,r17
81117d28:	0019883a 	mov	r12,zero
81117d2c:	8023883a 	mov	r17,r16
81117d30:	b007883a 	mov	r3,r22
81117d34:	9821883a 	mov	r16,r19
81117d38:	002b883a 	mov	r21,zero
81117d3c:	d800a515 	stw	zero,660(sp)
81117d40:	d800a415 	stw	zero,656(sp)
81117d44:	d8009f15 	stw	zero,636(sp)
81117d48:	01c01384 	movi	r7,78
81117d4c:	602d883a 	mov	r22,r12
81117d50:	1027883a 	mov	r19,r2
81117d54:	e1000017 	ldw	r4,0(fp)
81117d58:	21400003 	ldbu	r5,0(r4)
81117d5c:	28bff544 	addi	r2,r5,-43
81117d60:	10803fcc 	andi	r2,r2,255
81117d64:	38810e36 	bltu	r7,r2,811181a0 <__svfscanf_r+0xfac>
81117d68:	100490ba 	slli	r2,r2,2
81117d6c:	01a04474 	movhi	r6,33041
81117d70:	319f6004 	addi	r6,r6,32128
81117d74:	1185883a 	add	r2,r2,r6
81117d78:	10800017 	ldw	r2,0(r2)
81117d7c:	1000683a 	jmp	r2
81117d80:	81118078 	rdprs	r4,r16,17921
81117d84:	811181a0 	cmpeqi	r4,r16,17926
81117d88:	81118078 	rdprs	r4,r16,17921
81117d8c:	811181a0 	cmpeqi	r4,r16,17926
81117d90:	811181a0 	cmpeqi	r4,r16,17926
81117d94:	8111804c 	andi	r4,r16,17921
81117d98:	81117ebc 	xorhi	r4,r16,17914
81117d9c:	81117ebc 	xorhi	r4,r16,17914
81117da0:	81117ebc 	xorhi	r4,r16,17914
81117da4:	81117ebc 	xorhi	r4,r16,17914
81117da8:	81117ebc 	xorhi	r4,r16,17914
81117dac:	81117ebc 	xorhi	r4,r16,17914
81117db0:	81117ebc 	xorhi	r4,r16,17914
81117db4:	81117ebc 	xorhi	r4,r16,17914
81117db8:	81117ebc 	xorhi	r4,r16,17914
81117dbc:	811181a0 	cmpeqi	r4,r16,17926
81117dc0:	811181a0 	cmpeqi	r4,r16,17926
81117dc4:	811181a0 	cmpeqi	r4,r16,17926
81117dc8:	811181a0 	cmpeqi	r4,r16,17926
81117dcc:	811181a0 	cmpeqi	r4,r16,17926
81117dd0:	811181a0 	cmpeqi	r4,r16,17926
81117dd4:	811181a0 	cmpeqi	r4,r16,17926
81117dd8:	81118190 	cmplti	r4,r16,17926
81117ddc:	811181a0 	cmpeqi	r4,r16,17926
81117de0:	811181a0 	cmpeqi	r4,r16,17926
81117de4:	811181a0 	cmpeqi	r4,r16,17926
81117de8:	8111814c 	andi	r4,r16,17925
81117dec:	81118130 	cmpltui	r4,r16,17924
81117df0:	811181a0 	cmpeqi	r4,r16,17926
81117df4:	811181a0 	cmpeqi	r4,r16,17926
81117df8:	811180fc 	xorhi	r4,r16,17923
81117dfc:	811181a0 	cmpeqi	r4,r16,17926
81117e00:	811181a0 	cmpeqi	r4,r16,17926
81117e04:	811181a0 	cmpeqi	r4,r16,17926
81117e08:	811181a0 	cmpeqi	r4,r16,17926
81117e0c:	811180c4 	addi	r4,r16,17923
81117e10:	811181a0 	cmpeqi	r4,r16,17926
81117e14:	811181a0 	cmpeqi	r4,r16,17926
81117e18:	811181a0 	cmpeqi	r4,r16,17926
81117e1c:	811181a0 	cmpeqi	r4,r16,17926
81117e20:	811181a0 	cmpeqi	r4,r16,17926
81117e24:	811180a8 	cmpgeui	r4,r16,17922
81117e28:	811181a0 	cmpeqi	r4,r16,17926
81117e2c:	811181a0 	cmpeqi	r4,r16,17926
81117e30:	811181a0 	cmpeqi	r4,r16,17926
81117e34:	811181a0 	cmpeqi	r4,r16,17926
81117e38:	8111808c 	andi	r4,r16,17922
81117e3c:	811181a0 	cmpeqi	r4,r16,17926
81117e40:	811181a0 	cmpeqi	r4,r16,17926
81117e44:	811181a0 	cmpeqi	r4,r16,17926
81117e48:	811181a0 	cmpeqi	r4,r16,17926
81117e4c:	811181a0 	cmpeqi	r4,r16,17926
81117e50:	811181a0 	cmpeqi	r4,r16,17926
81117e54:	811181a0 	cmpeqi	r4,r16,17926
81117e58:	81118190 	cmplti	r4,r16,17926
81117e5c:	811181a0 	cmpeqi	r4,r16,17926
81117e60:	811181a0 	cmpeqi	r4,r16,17926
81117e64:	811181a0 	cmpeqi	r4,r16,17926
81117e68:	8111814c 	andi	r4,r16,17925
81117e6c:	81118130 	cmpltui	r4,r16,17924
81117e70:	811181a0 	cmpeqi	r4,r16,17926
81117e74:	811181a0 	cmpeqi	r4,r16,17926
81117e78:	811180fc 	xorhi	r4,r16,17923
81117e7c:	811181a0 	cmpeqi	r4,r16,17926
81117e80:	811181a0 	cmpeqi	r4,r16,17926
81117e84:	811181a0 	cmpeqi	r4,r16,17926
81117e88:	811181a0 	cmpeqi	r4,r16,17926
81117e8c:	811180c4 	addi	r4,r16,17923
81117e90:	811181a0 	cmpeqi	r4,r16,17926
81117e94:	811181a0 	cmpeqi	r4,r16,17926
81117e98:	811181a0 	cmpeqi	r4,r16,17926
81117e9c:	811181a0 	cmpeqi	r4,r16,17926
81117ea0:	811181a0 	cmpeqi	r4,r16,17926
81117ea4:	811180a8 	cmpgeui	r4,r16,17922
81117ea8:	811181a0 	cmpeqi	r4,r16,17926
81117eac:	811181a0 	cmpeqi	r4,r16,17926
81117eb0:	811181a0 	cmpeqi	r4,r16,17926
81117eb4:	811181a0 	cmpeqi	r4,r16,17926
81117eb8:	8111808c 	andi	r4,r16,17922
81117ebc:	a8803fcc 	andi	r2,r21,255
81117ec0:	1080201c 	xori	r2,r2,128
81117ec4:	10bfe004 	addi	r2,r2,-128
81117ec8:	b085883a 	add	r2,r22,r2
81117ecc:	10000d1e 	bne	r2,zero,81117f04 <__svfscanf_r+0xd10>
81117ed0:	00bf9fc4 	movi	r2,-385
81117ed4:	a0a8703a 	and	r20,r20,r2
81117ed8:	89400005 	stb	r5,0(r17)
81117edc:	8c400044 	addi	r17,r17,1
81117ee0:	e0800117 	ldw	r2,4(fp)
81117ee4:	843fffc4 	addi	r16,r16,-1
81117ee8:	94800044 	addi	r18,r18,1
81117eec:	10bfffc4 	addi	r2,r2,-1
81117ef0:	e0800115 	stw	r2,4(fp)
81117ef4:	0080b40e 	bge	zero,r2,811181c8 <__svfscanf_r+0xfd4>
81117ef8:	21000044 	addi	r4,r4,1
81117efc:	e1000015 	stw	r4,0(fp)
81117f00:	803f941e 	bne	r16,zero,81117d54 <__reset+0xfb0f7d54>
81117f04:	8821883a 	mov	r16,r17
81117f08:	b019883a 	mov	r12,r22
81117f0c:	9823883a 	mov	r17,r19
81117f10:	182d883a 	mov	r22,r3
81117f14:	9801961e 	bne	r19,zero,81118570 <__svfscanf_r+0x137c>
81117f18:	633fffc4 	addi	r12,r12,-1
81117f1c:	00800044 	movi	r2,1
81117f20:	1302882e 	bgeu	r2,r12,81118944 <__svfscanf_r+0x1750>
81117f24:	a8803fcc 	andi	r2,r21,255
81117f28:	1080201c 	xori	r2,r2,128
81117f2c:	10bfe004 	addi	r2,r2,-128
81117f30:	113fffc4 	addi	r4,r2,-1
81117f34:	01400184 	movi	r5,6
81117f38:	29001136 	bltu	r5,r4,81117f80 <__svfscanf_r+0xd8c>
81117f3c:	01000084 	movi	r4,2
81117f40:	2082900e 	bge	r4,r2,81118984 <__svfscanf_r+0x1790>
81117f44:	00c000c4 	movi	r3,3
81117f48:	10c00d26 	beq	r2,r3,81117f80 <__svfscanf_r+0xd8c>
81117f4c:	9425c83a 	sub	r18,r18,r16
81117f50:	1827883a 	mov	r19,r3
81117f54:	843fffc4 	addi	r16,r16,-1
81117f58:	81400007 	ldb	r5,0(r16)
81117f5c:	e00d883a 	mov	r6,fp
81117f60:	b009883a 	mov	r4,r22
81117f64:	1120cec0 	call	81120cec <_ungetc_r>
81117f68:	a8bfffc4 	addi	r2,r21,-1
81117f6c:	10c03fcc 	andi	r3,r2,255
81117f70:	8493883a 	add	r9,r16,r18
81117f74:	102b883a 	mov	r21,r2
81117f78:	98fff636 	bltu	r19,r3,81117f54 <__reset+0xfb0f7f54>
81117f7c:	4825883a 	mov	r18,r9
81117f80:	a080400c 	andi	r2,r20,256
81117f84:	10001426 	beq	r2,zero,81117fd8 <__svfscanf_r+0xde4>
81117f88:	a081000c 	andi	r2,r20,1024
81117f8c:	1002571e 	bne	r2,zero,811188ec <__svfscanf_r+0x16f8>
81117f90:	817fffc7 	ldb	r5,-1(r16)
81117f94:	00801944 	movi	r2,101
81117f98:	84ffffc4 	addi	r19,r16,-1
81117f9c:	957fffc4 	addi	r21,r18,-1
81117fa0:	28800826 	beq	r5,r2,81117fc4 <__svfscanf_r+0xdd0>
81117fa4:	00801144 	movi	r2,69
81117fa8:	28800626 	beq	r5,r2,81117fc4 <__svfscanf_r+0xdd0>
81117fac:	e00d883a 	mov	r6,fp
81117fb0:	b009883a 	mov	r4,r22
81117fb4:	1120cec0 	call	81120cec <_ungetc_r>
81117fb8:	817fff87 	ldb	r5,-2(r16)
81117fbc:	84ffff84 	addi	r19,r16,-2
81117fc0:	957fff84 	addi	r21,r18,-2
81117fc4:	e00d883a 	mov	r6,fp
81117fc8:	b009883a 	mov	r4,r22
81117fcc:	1120cec0 	call	81120cec <_ungetc_r>
81117fd0:	a825883a 	mov	r18,r21
81117fd4:	9821883a 	mov	r16,r19
81117fd8:	a080040c 	andi	r2,r20,16
81117fdc:	103e891e 	bne	r2,zero,81117a04 <__reset+0xfb0f7a04>
81117fe0:	80000005 	stb	zero,0(r16)
81117fe4:	a081800c 	andi	r2,r20,1536
81117fe8:	01010004 	movi	r4,1024
81117fec:	1101dd26 	beq	r2,r4,81118764 <__svfscanf_r+0x1570>
81117ff0:	da00a417 	ldw	r8,656(sp)
81117ff4:	4001e71e 	bne	r8,zero,81118794 <__svfscanf_r+0x15a0>
81117ff8:	000d883a 	mov	r6,zero
81117ffc:	d9400104 	addi	r5,sp,4
81118000:	b009883a 	mov	r4,r22
81118004:	111d89c0 	call	8111d89c <_strtod_r>
81118008:	1021883a 	mov	r16,r2
8111800c:	a080004c 	andi	r2,r20,1
81118010:	1000021e 	bne	r2,zero,8111801c <__svfscanf_r+0xe28>
81118014:	a2c0008c 	andi	r11,r20,2
81118018:	5801e826 	beq	r11,zero,811187bc <__svfscanf_r+0x15c8>
8111801c:	da009c17 	ldw	r8,624(sp)
81118020:	40800017 	ldw	r2,0(r8)
81118024:	42000104 	addi	r8,r8,4
81118028:	da009c15 	stw	r8,624(sp)
8111802c:	14000015 	stw	r16,0(r2)
81118030:	10c00115 	stw	r3,4(r2)
81118034:	da00a017 	ldw	r8,640(sp)
81118038:	dd009d17 	ldw	r20,628(sp)
8111803c:	42000044 	addi	r8,r8,1
81118040:	da00a015 	stw	r8,640(sp)
81118044:	a00d883a 	mov	r6,r20
81118048:	003ca806 	br	811172ec <__reset+0xfb0f72ec>
8111804c:	a080400c 	andi	r2,r20,256
81118050:	103f9a26 	beq	r2,zero,81117ebc <__reset+0xfb0f7ebc>
81118054:	da00a217 	ldw	r8,648(sp)
81118058:	00bfdfc4 	movi	r2,-129
8111805c:	a0a8703a 	and	r20,r20,r2
81118060:	9cc00044 	addi	r19,r19,1
81118064:	403f9e26 	beq	r8,zero,81117ee0 <__reset+0xfb0f7ee0>
81118068:	423fffc4 	addi	r8,r8,-1
8111806c:	da00a215 	stw	r8,648(sp)
81118070:	84000044 	addi	r16,r16,1
81118074:	003f9a06 	br	81117ee0 <__reset+0xfb0f7ee0>
81118078:	a080200c 	andi	r2,r20,128
8111807c:	103fa126 	beq	r2,zero,81117f04 <__reset+0xfb0f7f04>
81118080:	00bfdfc4 	movi	r2,-129
81118084:	a0a8703a 	and	r20,r20,r2
81118088:	003f9306 	br	81117ed8 <__reset+0xfb0f7ed8>
8111808c:	a8803fcc 	andi	r2,r21,255
81118090:	1080201c 	xori	r2,r2,128
81118094:	10bfe004 	addi	r2,r2,-128
81118098:	020001c4 	movi	r8,7
8111809c:	123f991e 	bne	r2,r8,81117f04 <__reset+0xfb0f7f04>
811180a0:	05400204 	movi	r21,8
811180a4:	003f8c06 	br	81117ed8 <__reset+0xfb0f7ed8>
811180a8:	a8803fcc 	andi	r2,r21,255
811180ac:	1080201c 	xori	r2,r2,128
811180b0:	10bfe004 	addi	r2,r2,-128
811180b4:	01800184 	movi	r6,6
811180b8:	11bf921e 	bne	r2,r6,81117f04 <__reset+0xfb0f7f04>
811180bc:	054001c4 	movi	r21,7
811180c0:	003f8506 	br	81117ed8 <__reset+0xfb0f7ed8>
811180c4:	b000491e 	bne	r22,zero,811181ec <__svfscanf_r+0xff8>
811180c8:	9800031e 	bne	r19,zero,811180d8 <__svfscanf_r+0xee4>
811180cc:	a081c00c 	andi	r2,r20,1792
811180d0:	0181c004 	movi	r6,1792
811180d4:	11819f26 	beq	r2,r6,81118754 <__svfscanf_r+0x1560>
811180d8:	a8803fcc 	andi	r2,r21,255
811180dc:	1080201c 	xori	r2,r2,128
811180e0:	10bfe004 	addi	r2,r2,-128
811180e4:	01800044 	movi	r6,1
811180e8:	11800226 	beq	r2,r6,811180f4 <__svfscanf_r+0xf00>
811180ec:	01800104 	movi	r6,4
811180f0:	11bf841e 	bne	r2,r6,81117f04 <__reset+0xfb0f7f04>
811180f4:	ad400044 	addi	r21,r21,1
811180f8:	003f7706 	br	81117ed8 <__reset+0xfb0f7ed8>
811180fc:	a8803fcc 	andi	r2,r21,255
81118100:	1080201c 	xori	r2,r2,128
81118104:	10bfe004 	addi	r2,r2,-128
81118108:	10003c1e 	bne	r2,zero,811181fc <__svfscanf_r+0x1008>
8111810c:	9801141e 	bne	r19,zero,81118560 <__svfscanf_r+0x136c>
81118110:	a081c00c 	andi	r2,r20,1792
81118114:	0181c004 	movi	r6,1792
81118118:	11818226 	beq	r2,r6,81118724 <__svfscanf_r+0x1530>
8111811c:	8821883a 	mov	r16,r17
81118120:	b019883a 	mov	r12,r22
81118124:	9823883a 	mov	r17,r19
81118128:	182d883a 	mov	r22,r3
8111812c:	003f7a06 	br	81117f18 <__reset+0xfb0f7f18>
81118130:	a8803fcc 	andi	r2,r21,255
81118134:	1080201c 	xori	r2,r2,128
81118138:	10bfe004 	addi	r2,r2,-128
8111813c:	01800084 	movi	r6,2
81118140:	11bf701e 	bne	r2,r6,81117f04 <__reset+0xfb0f7f04>
81118144:	054000c4 	movi	r21,3
81118148:	003f6306 	br	81117ed8 <__reset+0xfb0f7ed8>
8111814c:	a081400c 	andi	r2,r20,1280
81118150:	01810004 	movi	r6,1024
81118154:	11800326 	beq	r2,r6,81118164 <__svfscanf_r+0xf70>
81118158:	a184703a 	and	r2,r20,r6
8111815c:	103f6926 	beq	r2,zero,81117f04 <__reset+0xfb0f7f04>
81118160:	983fee26 	beq	r19,zero,8111811c <__reset+0xfb0f811c>
81118164:	a080800c 	andi	r2,r20,512
81118168:	1000041e 	bne	r2,zero,8111817c <__svfscanf_r+0xf88>
8111816c:	da009f17 	ldw	r8,636(sp)
81118170:	dc40a515 	stw	r17,660(sp)
81118174:	9a27c83a 	sub	r19,r19,r8
81118178:	dcc0a415 	stw	r19,656(sp)
8111817c:	00be1fc4 	movi	r2,-1921
81118180:	a0a8703a 	and	r20,r20,r2
81118184:	a5006014 	ori	r20,r20,384
81118188:	0027883a 	mov	r19,zero
8111818c:	003f5206 	br	81117ed8 <__reset+0xfb0f7ed8>
81118190:	00800044 	movi	r2,1
81118194:	b0bf5b1e 	bne	r22,r2,81117f04 <__reset+0xfb0f7f04>
81118198:	05800084 	movi	r22,2
8111819c:	003f4e06 	br	81117ed8 <__reset+0xfb0f7ed8>
811181a0:	d980a317 	ldw	r6,652(sp)
811181a4:	30800003 	ldbu	r2,0(r6)
811181a8:	29803fcc 	andi	r6,r5,255
811181ac:	30bf551e 	bne	r6,r2,81117f04 <__reset+0xfb0f7f04>
811181b0:	a080800c 	andi	r2,r20,512
811181b4:	103f5326 	beq	r2,zero,81117f04 <__reset+0xfb0f7f04>
811181b8:	023f5fc4 	movi	r8,-641
811181bc:	a228703a 	and	r20,r20,r8
811181c0:	dcc09f15 	stw	r19,636(sp)
811181c4:	003f4406 	br	81117ed8 <__reset+0xfb0f7ed8>
811181c8:	1809883a 	mov	r4,r3
811181cc:	e00b883a 	mov	r5,fp
811181d0:	d8c0a615 	stw	r3,664(sp)
811181d4:	d9c0aa15 	stw	r7,680(sp)
811181d8:	11125180 	call	81112518 <__srefill_r>
811181dc:	d8c0a617 	ldw	r3,664(sp)
811181e0:	d9c0aa17 	ldw	r7,680(sp)
811181e4:	103f4626 	beq	r2,zero,81117f00 <__reset+0xfb0f7f00>
811181e8:	003f4606 	br	81117f04 <__reset+0xfb0f7f04>
811181ec:	00800084 	movi	r2,2
811181f0:	b0bfb91e 	bne	r22,r2,811180d8 <__reset+0xfb0f80d8>
811181f4:	058000c4 	movi	r22,3
811181f8:	003f3706 	br	81117ed8 <__reset+0xfb0f7ed8>
811181fc:	018000c4 	movi	r6,3
81118200:	11bfbc26 	beq	r2,r6,811180f4 <__reset+0xfb0f80f4>
81118204:	01800144 	movi	r6,5
81118208:	11bfba26 	beq	r2,r6,811180f4 <__reset+0xfb0f80f4>
8111820c:	003f3d06 	br	81117f04 <__reset+0xfb0f7f04>
81118210:	98bfffc4 	addi	r2,r19,-1
81118214:	01405704 	movi	r5,348
81118218:	2880d82e 	bgeu	r5,r2,8111857c <__svfscanf_r+0x1388>
8111821c:	99ffa8c4 	addi	r7,r19,-349
81118220:	04c05744 	movi	r19,349
81118224:	8c436014 	ori	r17,r17,3456
81118228:	9013883a 	mov	r9,r18
8111822c:	8825883a 	mov	r18,r17
81118230:	dc409e17 	ldw	r17,632(sp)
81118234:	0029883a 	mov	r20,zero
81118238:	dc000104 	addi	r16,sp,4
8111823c:	05401344 	movi	r21,77
81118240:	02c08004 	movi	r11,512
81118244:	01bf7fc4 	movi	r6,-513
81118248:	023fdfc4 	movi	r8,-129
8111824c:	20bff544 	addi	r2,r4,-43
81118250:	10803fcc 	andi	r2,r2,255
81118254:	a8807236 	bltu	r21,r2,81118420 <__svfscanf_r+0x122c>
81118258:	100490ba 	slli	r2,r2,2
8111825c:	016044b4 	movhi	r5,33042
81118260:	29609c04 	addi	r5,r5,-32144
81118264:	1145883a 	add	r2,r2,r5
81118268:	10800017 	ldw	r2,0(r2)
8111826c:	1000683a 	jmp	r2
81118270:	811184a4 	muli	r4,r16,17938
81118274:	81118420 	cmpeqi	r4,r16,17936
81118278:	811184a4 	muli	r4,r16,17938
8111827c:	81118420 	cmpeqi	r4,r16,17936
81118280:	81118420 	cmpeqi	r4,r16,17936
81118284:	8111847c 	xorhi	r4,r16,17937
81118288:	8111845c 	xori	r4,r16,17937
8111828c:	8111845c 	xori	r4,r16,17937
81118290:	8111845c 	xori	r4,r16,17937
81118294:	8111845c 	xori	r4,r16,17937
81118298:	8111845c 	xori	r4,r16,17937
8111829c:	8111845c 	xori	r4,r16,17937
811182a0:	8111845c 	xori	r4,r16,17937
811182a4:	81118404 	addi	r4,r16,17936
811182a8:	81118404 	addi	r4,r16,17936
811182ac:	81118420 	cmpeqi	r4,r16,17936
811182b0:	81118420 	cmpeqi	r4,r16,17936
811182b4:	81118420 	cmpeqi	r4,r16,17936
811182b8:	81118420 	cmpeqi	r4,r16,17936
811182bc:	81118420 	cmpeqi	r4,r16,17936
811182c0:	81118420 	cmpeqi	r4,r16,17936
811182c4:	81118420 	cmpeqi	r4,r16,17936
811182c8:	811183f0 	cmpltui	r4,r16,17935
811182cc:	811183f0 	cmpltui	r4,r16,17935
811182d0:	811183f0 	cmpltui	r4,r16,17935
811182d4:	811183f0 	cmpltui	r4,r16,17935
811182d8:	811183f0 	cmpltui	r4,r16,17935
811182dc:	811183f0 	cmpltui	r4,r16,17935
811182e0:	81118420 	cmpeqi	r4,r16,17936
811182e4:	81118420 	cmpeqi	r4,r16,17936
811182e8:	81118420 	cmpeqi	r4,r16,17936
811182ec:	81118420 	cmpeqi	r4,r16,17936
811182f0:	81118420 	cmpeqi	r4,r16,17936
811182f4:	81118420 	cmpeqi	r4,r16,17936
811182f8:	81118420 	cmpeqi	r4,r16,17936
811182fc:	81118420 	cmpeqi	r4,r16,17936
81118300:	81118420 	cmpeqi	r4,r16,17936
81118304:	81118420 	cmpeqi	r4,r16,17936
81118308:	81118420 	cmpeqi	r4,r16,17936
8111830c:	81118420 	cmpeqi	r4,r16,17936
81118310:	81118420 	cmpeqi	r4,r16,17936
81118314:	81118420 	cmpeqi	r4,r16,17936
81118318:	81118420 	cmpeqi	r4,r16,17936
8111831c:	81118420 	cmpeqi	r4,r16,17936
81118320:	81118420 	cmpeqi	r4,r16,17936
81118324:	811183a8 	cmpgeui	r4,r16,17934
81118328:	81118420 	cmpeqi	r4,r16,17936
8111832c:	81118420 	cmpeqi	r4,r16,17936
81118330:	81118420 	cmpeqi	r4,r16,17936
81118334:	81118420 	cmpeqi	r4,r16,17936
81118338:	81118420 	cmpeqi	r4,r16,17936
8111833c:	81118420 	cmpeqi	r4,r16,17936
81118340:	81118420 	cmpeqi	r4,r16,17936
81118344:	81118420 	cmpeqi	r4,r16,17936
81118348:	811183f0 	cmpltui	r4,r16,17935
8111834c:	811183f0 	cmpltui	r4,r16,17935
81118350:	811183f0 	cmpltui	r4,r16,17935
81118354:	811183f0 	cmpltui	r4,r16,17935
81118358:	811183f0 	cmpltui	r4,r16,17935
8111835c:	811183f0 	cmpltui	r4,r16,17935
81118360:	81118420 	cmpeqi	r4,r16,17936
81118364:	81118420 	cmpeqi	r4,r16,17936
81118368:	81118420 	cmpeqi	r4,r16,17936
8111836c:	81118420 	cmpeqi	r4,r16,17936
81118370:	81118420 	cmpeqi	r4,r16,17936
81118374:	81118420 	cmpeqi	r4,r16,17936
81118378:	81118420 	cmpeqi	r4,r16,17936
8111837c:	81118420 	cmpeqi	r4,r16,17936
81118380:	81118420 	cmpeqi	r4,r16,17936
81118384:	81118420 	cmpeqi	r4,r16,17936
81118388:	81118420 	cmpeqi	r4,r16,17936
8111838c:	81118420 	cmpeqi	r4,r16,17936
81118390:	81118420 	cmpeqi	r4,r16,17936
81118394:	81118420 	cmpeqi	r4,r16,17936
81118398:	81118420 	cmpeqi	r4,r16,17936
8111839c:	81118420 	cmpeqi	r4,r16,17936
811183a0:	81118420 	cmpeqi	r4,r16,17936
811183a4:	811183a8 	cmpgeui	r4,r16,17934
811183a8:	9081800c 	andi	r2,r18,1536
811183ac:	12c01c1e 	bne	r2,r11,81118420 <__svfscanf_r+0x122c>
811183b0:	91a4703a 	and	r18,r18,r6
811183b4:	94814014 	ori	r18,r18,1280
811183b8:	04400404 	movi	r17,16
811183bc:	81000005 	stb	r4,0(r16)
811183c0:	84000044 	addi	r16,r16,1
811183c4:	e0800117 	ldw	r2,4(fp)
811183c8:	10bfffc4 	addi	r2,r2,-1
811183cc:	e0800115 	stw	r2,4(fp)
811183d0:	0080540e 	bge	zero,r2,81118524 <__svfscanf_r+0x1330>
811183d4:	18c00044 	addi	r3,r3,1
811183d8:	e0c00015 	stw	r3,0(fp)
811183dc:	9cffffc4 	addi	r19,r19,-1
811183e0:	98000f26 	beq	r19,zero,81118420 <__svfscanf_r+0x122c>
811183e4:	e0c00017 	ldw	r3,0(fp)
811183e8:	19000003 	ldbu	r4,0(r3)
811183ec:	003f9706 	br	8111824c <__reset+0xfb0f824c>
811183f0:	00800284 	movi	r2,10
811183f4:	14400a0e 	bge	r2,r17,81118420 <__svfscanf_r+0x122c>
811183f8:	00bd1fc4 	movi	r2,-2945
811183fc:	90a4703a 	and	r18,r18,r2
81118400:	003fee06 	br	811183bc <__reset+0xfb0f83bc>
81118404:	01604534 	movhi	r5,33044
81118408:	8c63883a 	add	r17,r17,r17
8111840c:	2976b584 	addi	r5,r5,-9514
81118410:	2c45883a 	add	r2,r5,r17
81118414:	1440000f 	ldh	r17,0(r2)
81118418:	00800204 	movi	r2,8
8111841c:	147ff616 	blt	r2,r17,811183f8 <__reset+0xfb0f83f8>
81118420:	dc409e15 	stw	r17,632(sp)
81118424:	9023883a 	mov	r17,r18
81118428:	8880400c 	andi	r2,r17,256
8111842c:	4825883a 	mov	r18,r9
81118430:	10000426 	beq	r2,zero,81118444 <__svfscanf_r+0x1250>
81118434:	d9800104 	addi	r6,sp,4
81118438:	3400be36 	bltu	r6,r16,81118734 <__svfscanf_r+0x1540>
8111843c:	da000104 	addi	r8,sp,4
81118440:	443bae26 	beq	r8,r16,811172fc <__reset+0xfb0f72fc>
81118444:	8880040c 	andi	r2,r17,16
81118448:	10009326 	beq	r2,zero,81118698 <__svfscanf_r+0x14a4>
8111844c:	d8800104 	addi	r2,sp,4
81118450:	80a1c83a 	sub	r16,r16,r2
81118454:	8521883a 	add	r16,r16,r20
81118458:	003d0606 	br	81117874 <__reset+0xfb0f7874>
8111845c:	01604534 	movhi	r5,33044
81118460:	8c63883a 	add	r17,r17,r17
81118464:	2976b584 	addi	r5,r5,-9514
81118468:	2c45883a 	add	r2,r5,r17
8111846c:	1440000f 	ldh	r17,0(r2)
81118470:	00bd1fc4 	movi	r2,-2945
81118474:	90a4703a 	and	r18,r18,r2
81118478:	003fd006 	br	811183bc <__reset+0xfb0f83bc>
8111847c:	9082000c 	andi	r2,r18,2048
81118480:	103fce26 	beq	r2,zero,811183bc <__reset+0xfb0f83bc>
81118484:	8800021e 	bne	r17,zero,81118490 <__svfscanf_r+0x129c>
81118488:	94808014 	ori	r18,r18,512
8111848c:	04400204 	movi	r17,8
81118490:	9081000c 	andi	r2,r18,1024
81118494:	10009426 	beq	r2,zero,811186e8 <__svfscanf_r+0x14f4>
81118498:	00be9fc4 	movi	r2,-1409
8111849c:	90a4703a 	and	r18,r18,r2
811184a0:	003fc606 	br	811183bc <__reset+0xfb0f83bc>
811184a4:	9080200c 	andi	r2,r18,128
811184a8:	103fdd26 	beq	r2,zero,81118420 <__reset+0xfb0f8420>
811184ac:	9224703a 	and	r18,r18,r8
811184b0:	003fc206 	br	811183bc <__reset+0xfb0f83bc>
811184b4:	9800011e 	bne	r19,zero,811184bc <__svfscanf_r+0x12c8>
811184b8:	04ffffc4 	movi	r19,-1
811184bc:	8900004c 	andi	r4,r17,1
811184c0:	20005b1e 	bne	r4,zero,81118630 <__svfscanf_r+0x143c>
811184c4:	8c40040c 	andi	r17,r17,16
811184c8:	88003026 	beq	r17,zero,8111858c <__svfscanf_r+0x1398>
811184cc:	0021883a 	mov	r16,zero
811184d0:	00000306 	br	811184e0 <__svfscanf_r+0x12ec>
811184d4:	18800003 	ldbu	r2,0(r3)
811184d8:	3885883a 	add	r2,r7,r2
811184dc:	10800043 	ldbu	r2,1(r2)
811184e0:	1080020c 	andi	r2,r2,8
811184e4:	103ce31e 	bne	r2,zero,81117874 <__reset+0xfb0f7874>
811184e8:	e0800117 	ldw	r2,4(fp)
811184ec:	18c00044 	addi	r3,r3,1
811184f0:	84000044 	addi	r16,r16,1
811184f4:	10bfffc4 	addi	r2,r2,-1
811184f8:	e0800115 	stw	r2,4(fp)
811184fc:	e0c00015 	stw	r3,0(fp)
81118500:	84fcdc26 	beq	r16,r19,81117874 <__reset+0xfb0f7874>
81118504:	00bff316 	blt	zero,r2,811184d4 <__reset+0xfb0f84d4>
81118508:	e00b883a 	mov	r5,fp
8111850c:	b009883a 	mov	r4,r22
81118510:	11125180 	call	81112518 <__srefill_r>
81118514:	103cd71e 	bne	r2,zero,81117874 <__reset+0xfb0f7874>
81118518:	b9c00017 	ldw	r7,0(r23)
8111851c:	e0c00017 	ldw	r3,0(fp)
81118520:	003fec06 	br	811184d4 <__reset+0xfb0f84d4>
81118524:	e00b883a 	mov	r5,fp
81118528:	b009883a 	mov	r4,r22
8111852c:	d980a715 	stw	r6,668(sp)
81118530:	d9c0aa15 	stw	r7,680(sp)
81118534:	da00a815 	stw	r8,672(sp)
81118538:	da40a915 	stw	r9,676(sp)
8111853c:	dac0a615 	stw	r11,664(sp)
81118540:	11125180 	call	81112518 <__srefill_r>
81118544:	d980a717 	ldw	r6,668(sp)
81118548:	d9c0aa17 	ldw	r7,680(sp)
8111854c:	da00a817 	ldw	r8,672(sp)
81118550:	da40a917 	ldw	r9,676(sp)
81118554:	dac0a617 	ldw	r11,664(sp)
81118558:	103fa026 	beq	r2,zero,811183dc <__reset+0xfb0f83dc>
8111855c:	003fb006 	br	81118420 <__reset+0xfb0f8420>
81118560:	8821883a 	mov	r16,r17
81118564:	b019883a 	mov	r12,r22
81118568:	9823883a 	mov	r17,r19
8111856c:	182d883a 	mov	r22,r3
81118570:	00bfbfc4 	movi	r2,-257
81118574:	a0a8703a 	and	r20,r20,r2
81118578:	003e6706 	br	81117f18 <__reset+0xfb0f7f18>
8111857c:	000f883a 	mov	r7,zero
81118580:	003f2806 	br	81118224 <__reset+0xfb0f8224>
81118584:	d800a215 	stw	zero,648(sp)
81118588:	003de306 	br	81117d18 <__reset+0xfb0f7d18>
8111858c:	da009c17 	ldw	r8,624(sp)
81118590:	9abfffc4 	addi	r10,r19,-1
81118594:	44400017 	ldw	r17,0(r8)
81118598:	44000104 	addi	r16,r8,4
8111859c:	880b883a 	mov	r5,r17
811185a0:	8aa9883a 	add	r20,r17,r10
811185a4:	00000606 	br	811185c0 <__svfscanf_r+0x13cc>
811185a8:	e0c00017 	ldw	r3,0(fp)
811185ac:	b9000017 	ldw	r4,0(r23)
811185b0:	a80b883a 	mov	r5,r21
811185b4:	18800003 	ldbu	r2,0(r3)
811185b8:	2085883a 	add	r2,r4,r2
811185bc:	10800043 	ldbu	r2,1(r2)
811185c0:	1080020c 	andi	r2,r2,8
811185c4:	1000551e 	bne	r2,zero,8111871c <__svfscanf_r+0x1528>
811185c8:	e0800117 	ldw	r2,4(fp)
811185cc:	19000044 	addi	r4,r3,1
811185d0:	e1000015 	stw	r4,0(fp)
811185d4:	10bfffc4 	addi	r2,r2,-1
811185d8:	e0800115 	stw	r2,4(fp)
811185dc:	18800003 	ldbu	r2,0(r3)
811185e0:	2d400044 	addi	r21,r5,1
811185e4:	a827883a 	mov	r19,r21
811185e8:	28800005 	stb	r2,0(r5)
811185ec:	2d000626 	beq	r5,r20,81118608 <__svfscanf_r+0x1414>
811185f0:	e0800117 	ldw	r2,4(fp)
811185f4:	00bfec16 	blt	zero,r2,811185a8 <__reset+0xfb0f85a8>
811185f8:	e00b883a 	mov	r5,fp
811185fc:	b009883a 	mov	r4,r22
81118600:	11125180 	call	81112518 <__srefill_r>
81118604:	103fe826 	beq	r2,zero,811185a8 <__reset+0xfb0f85a8>
81118608:	da00a017 	ldw	r8,640(sp)
8111860c:	dd009d17 	ldw	r20,628(sp)
81118610:	9c63c83a 	sub	r17,r19,r17
81118614:	42000044 	addi	r8,r8,1
81118618:	98000005 	stb	zero,0(r19)
8111861c:	9465883a 	add	r18,r18,r17
81118620:	da00a015 	stw	r8,640(sp)
81118624:	dc009c15 	stw	r16,624(sp)
81118628:	a00d883a 	mov	r6,r20
8111862c:	003b2f06 	br	811172ec <__reset+0xfb0f72ec>
81118630:	dd409904 	addi	r21,sp,612
81118634:	8c40040c 	andi	r17,r17,16
81118638:	01800204 	movi	r6,8
8111863c:	000b883a 	mov	r5,zero
81118640:	a809883a 	mov	r4,r21
81118644:	11122140 	call	81112214 <memset>
81118648:	8800401e 	bne	r17,zero,8111874c <__svfscanf_r+0x1558>
8111864c:	da009c17 	ldw	r8,624(sp)
81118650:	45000017 	ldw	r20,0(r8)
81118654:	42000104 	addi	r8,r8,4
81118658:	da009c15 	stw	r8,624(sp)
8111865c:	000d883a 	mov	r6,zero
81118660:	3021883a 	mov	r16,r6
81118664:	dc409f15 	stw	r17,636(sp)
81118668:	e0800017 	ldw	r2,0(fp)
8111866c:	b8c00017 	ldw	r3,0(r23)
81118670:	10800003 	ldbu	r2,0(r2)
81118674:	1885883a 	add	r2,r3,r2
81118678:	10800043 	ldbu	r2,1(r2)
8111867c:	1080020c 	andi	r2,r2,8
81118680:	1000011e 	bne	r2,zero,81118688 <__svfscanf_r+0x1494>
81118684:	9800701e 	bne	r19,zero,81118848 <__svfscanf_r+0x1654>
81118688:	dc409f17 	ldw	r17,636(sp)
8111868c:	883cdd1e 	bne	r17,zero,81117a04 <__reset+0xfb0f7a04>
81118690:	a0000015 	stw	zero,0(r20)
81118694:	003cd806 	br	811179f8 <__reset+0xfb0f79f8>
81118698:	d9c09e17 	ldw	r7,632(sp)
8111869c:	da00a117 	ldw	r8,644(sp)
811186a0:	000d883a 	mov	r6,zero
811186a4:	d9400104 	addi	r5,sp,4
811186a8:	b009883a 	mov	r4,r22
811186ac:	80000005 	stb	zero,0(r16)
811186b0:	403ee83a 	callr	r8
811186b4:	88c0080c 	andi	r3,r17,32
811186b8:	1800121e 	bne	r3,zero,81118704 <__svfscanf_r+0x1510>
811186bc:	88c0010c 	andi	r3,r17,4
811186c0:	18004d26 	beq	r3,zero,811187f8 <__svfscanf_r+0x1604>
811186c4:	da009c17 	ldw	r8,624(sp)
811186c8:	40c00017 	ldw	r3,0(r8)
811186cc:	42000104 	addi	r8,r8,4
811186d0:	da009c15 	stw	r8,624(sp)
811186d4:	1880000d 	sth	r2,0(r3)
811186d8:	da00a017 	ldw	r8,640(sp)
811186dc:	42000044 	addi	r8,r8,1
811186e0:	da00a015 	stw	r8,640(sp)
811186e4:	003f5906 	br	8111844c <__reset+0xfb0f844c>
811186e8:	00bf1fc4 	movi	r2,-897
811186ec:	90a4703a 	and	r18,r18,r2
811186f0:	38000226 	beq	r7,zero,811186fc <__svfscanf_r+0x1508>
811186f4:	39ffffc4 	addi	r7,r7,-1
811186f8:	9cc00044 	addi	r19,r19,1
811186fc:	a5000044 	addi	r20,r20,1
81118700:	003f3006 	br	811183c4 <__reset+0xfb0f83c4>
81118704:	da009c17 	ldw	r8,624(sp)
81118708:	40c00017 	ldw	r3,0(r8)
8111870c:	42000104 	addi	r8,r8,4
81118710:	da009c15 	stw	r8,624(sp)
81118714:	18800015 	stw	r2,0(r3)
81118718:	003fef06 	br	811186d8 <__reset+0xfb0f86d8>
8111871c:	2827883a 	mov	r19,r5
81118720:	003fb906 	br	81118608 <__reset+0xfb0f8608>
81118724:	01be1fc4 	movi	r6,-1921
81118728:	a1a8703a 	and	r20,r20,r6
8111872c:	05400044 	movi	r21,1
81118730:	003de906 	br	81117ed8 <__reset+0xfb0f7ed8>
81118734:	817fffc7 	ldb	r5,-1(r16)
81118738:	e00d883a 	mov	r6,fp
8111873c:	b009883a 	mov	r4,r22
81118740:	843fffc4 	addi	r16,r16,-1
81118744:	1120cec0 	call	81120cec <_ungetc_r>
81118748:	003f3c06 	br	8111843c <__reset+0xfb0f843c>
8111874c:	dd009b04 	addi	r20,sp,620
81118750:	003fc206 	br	8111865c <__reset+0xfb0f865c>
81118754:	00be1fc4 	movi	r2,-1921
81118758:	a0a8703a 	and	r20,r20,r2
8111875c:	05800044 	movi	r22,1
81118760:	003ddd06 	br	81117ed8 <__reset+0xfb0f7ed8>
81118764:	d8c09f17 	ldw	r3,636(sp)
81118768:	88e3c83a 	sub	r17,r17,r3
8111876c:	044dc83a 	sub	r6,zero,r17
81118770:	883e2126 	beq	r17,zero,81117ff8 <__reset+0xfb0f7ff8>
81118774:	d88055c4 	addi	r2,sp,343
81118778:	80800136 	bltu	r16,r2,81118780 <__svfscanf_r+0x158c>
8111877c:	dc005584 	addi	r16,sp,342
81118780:	01604534 	movhi	r5,33044
81118784:	2976b404 	addi	r5,r5,-9520
81118788:	8009883a 	mov	r4,r16
8111878c:	111282c0 	call	8111282c <sprintf>
81118790:	003e1906 	br	81117ff8 <__reset+0xfb0f7ff8>
81118794:	d8c0a517 	ldw	r3,660(sp)
81118798:	000d883a 	mov	r6,zero
8111879c:	01c00284 	movi	r7,10
811187a0:	19400044 	addi	r5,r3,1
811187a4:	b009883a 	mov	r4,r22
811187a8:	1112ad80 	call	81112ad8 <_strtol_r>
811187ac:	da00a417 	ldw	r8,656(sp)
811187b0:	dc00a517 	ldw	r16,660(sp)
811187b4:	120dc83a 	sub	r6,r2,r8
811187b8:	003fee06 	br	81118774 <__reset+0xfb0f8774>
811187bc:	da009c17 	ldw	r8,624(sp)
811187c0:	180b883a 	mov	r5,r3
811187c4:	8009883a 	mov	r4,r16
811187c8:	45000017 	ldw	r20,0(r8)
811187cc:	44400104 	addi	r17,r8,4
811187d0:	d8c0a615 	stw	r3,664(sp)
811187d4:	111d6080 	call	8111d608 <__fpclassifyd>
811187d8:	d8c0a617 	ldw	r3,664(sp)
811187dc:	10006426 	beq	r2,zero,81118970 <__svfscanf_r+0x177c>
811187e0:	8009883a 	mov	r4,r16
811187e4:	180b883a 	mov	r5,r3
811187e8:	1110d5c0 	call	81110d5c <__truncdfsf2>
811187ec:	a0800015 	stw	r2,0(r20)
811187f0:	dc409c15 	stw	r17,624(sp)
811187f4:	003e0f06 	br	81118034 <__reset+0xfb0f8034>
811187f8:	88c0004c 	andi	r3,r17,1
811187fc:	183fc11e 	bne	r3,zero,81118704 <__reset+0xfb0f8704>
81118800:	8c40008c 	andi	r17,r17,2
81118804:	883fbf26 	beq	r17,zero,81118704 <__reset+0xfb0f8704>
81118808:	da00a117 	ldw	r8,644(sp)
8111880c:	00a044b4 	movhi	r2,33042
81118810:	10bca904 	addi	r2,r2,-3420
81118814:	d9c09e17 	ldw	r7,632(sp)
81118818:	000d883a 	mov	r6,zero
8111881c:	d9400104 	addi	r5,sp,4
81118820:	b009883a 	mov	r4,r22
81118824:	40806226 	beq	r8,r2,811189b0 <__svfscanf_r+0x17bc>
81118828:	111efbc0 	call	8111efbc <_strtoll_r>
8111882c:	da009c17 	ldw	r8,624(sp)
81118830:	41000017 	ldw	r4,0(r8)
81118834:	42000104 	addi	r8,r8,4
81118838:	da009c15 	stw	r8,624(sp)
8111883c:	20800015 	stw	r2,0(r4)
81118840:	20c00115 	stw	r3,4(r4)
81118844:	003fa406 	br	811186d8 <__reset+0xfb0f86d8>
81118848:	111ba980 	call	8111ba98 <__locale_mb_cur_max>
8111884c:	80bca726 	beq	r16,r2,81117aec <__reset+0xfb0f7aec>
81118850:	e0800017 	ldw	r2,0(fp)
81118854:	e1000117 	ldw	r4,4(fp)
81118858:	d8c00104 	addi	r3,sp,4
8111885c:	12000003 	ldbu	r8,0(r2)
81118860:	213fffc4 	addi	r4,r4,-1
81118864:	10800044 	addi	r2,r2,1
81118868:	e1000115 	stw	r4,4(fp)
8111886c:	e0800015 	stw	r2,0(fp)
81118870:	84400044 	addi	r17,r16,1
81118874:	dd400015 	stw	r21,0(sp)
81118878:	1c21883a 	add	r16,r3,r16
8111887c:	b009883a 	mov	r4,r22
81118880:	880f883a 	mov	r7,r17
81118884:	180d883a 	mov	r6,r3
81118888:	a00b883a 	mov	r5,r20
8111888c:	82000005 	stb	r8,0(r16)
81118890:	111bb540 	call	8111bb54 <_mbrtowc_r>
81118894:	013fffc4 	movi	r4,-1
81118898:	113c9426 	beq	r2,r4,81117aec <__reset+0xfb0f7aec>
8111889c:	103c881e 	bne	r2,zero,81117ac0 <__reset+0xfb0f7ac0>
811188a0:	a0000015 	stw	zero,0(r20)
811188a4:	0009883a 	mov	r4,zero
811188a8:	111b9d80 	call	8111b9d8 <iswspace>
811188ac:	10001a26 	beq	r2,zero,81118918 <__svfscanf_r+0x1724>
811188b0:	8821883a 	mov	r16,r17
811188b4:	dc409f17 	ldw	r17,636(sp)
811188b8:	803f7426 	beq	r16,zero,8111868c <__reset+0xfb0f868c>
811188bc:	843fffc4 	addi	r16,r16,-1
811188c0:	d9800104 	addi	r6,sp,4
811188c4:	342b883a 	add	r21,r6,r16
811188c8:	00000106 	br	811188d0 <__svfscanf_r+0x16dc>
811188cc:	843fffc4 	addi	r16,r16,-1
811188d0:	a9400003 	ldbu	r5,0(r21)
811188d4:	e00d883a 	mov	r6,fp
811188d8:	b009883a 	mov	r4,r22
811188dc:	1120cec0 	call	81120cec <_ungetc_r>
811188e0:	ad7fffc4 	addi	r21,r21,-1
811188e4:	803ff91e 	bne	r16,zero,811188cc <__reset+0xfb0f88cc>
811188e8:	003f6806 	br	8111868c <__reset+0xfb0f868c>
811188ec:	d9800104 	addi	r6,sp,4
811188f0:	802b883a 	mov	r21,r16
811188f4:	343a812e 	bgeu	r6,r16,811172fc <__reset+0xfb0f72fc>
811188f8:	ad7fffc4 	addi	r21,r21,-1
811188fc:	a9400007 	ldb	r5,0(r21)
81118900:	e00d883a 	mov	r6,fp
81118904:	b009883a 	mov	r4,r22
81118908:	1120cec0 	call	81120cec <_ungetc_r>
8111890c:	da000104 	addi	r8,sp,4
81118910:	457ff91e 	bne	r8,r21,811188f8 <__reset+0xfb0f88f8>
81118914:	003a7906 	br	811172fc <__reset+0xfb0f72fc>
81118918:	da009f17 	ldw	r8,636(sp)
8111891c:	9465883a 	add	r18,r18,r17
81118920:	9cffffc4 	addi	r19,r19,-1
81118924:	4000051e 	bne	r8,zero,8111893c <__svfscanf_r+0x1748>
81118928:	a5000104 	addi	r20,r20,4
8111892c:	0021883a 	mov	r16,zero
81118930:	003c6606 	br	81117acc <__reset+0xfb0f7acc>
81118934:	a1000017 	ldw	r4,0(r20)
81118938:	003fdb06 	br	811188a8 <__reset+0xfb0f88a8>
8111893c:	0021883a 	mov	r16,zero
81118940:	003c6206 	br	81117acc <__reset+0xfb0f7acc>
81118944:	d8800104 	addi	r2,sp,4
81118948:	802b883a 	mov	r21,r16
8111894c:	143a6b2e 	bgeu	r2,r16,811172fc <__reset+0xfb0f72fc>
81118950:	ad7fffc4 	addi	r21,r21,-1
81118954:	a9400007 	ldb	r5,0(r21)
81118958:	e00d883a 	mov	r6,fp
8111895c:	b009883a 	mov	r4,r22
81118960:	1120cec0 	call	81120cec <_ungetc_r>
81118964:	d8c00104 	addi	r3,sp,4
81118968:	1d7ff91e 	bne	r3,r21,81118950 <__reset+0xfb0f8950>
8111896c:	003a6306 	br	811172fc <__reset+0xfb0f72fc>
81118970:	0009883a 	mov	r4,zero
81118974:	111d74c0 	call	8111d74c <nanf>
81118978:	a0800015 	stw	r2,0(r20)
8111897c:	dc409c15 	stw	r17,624(sp)
81118980:	003dac06 	br	81118034 <__reset+0xfb0f8034>
81118984:	d9000104 	addi	r4,sp,4
81118988:	802b883a 	mov	r21,r16
8111898c:	243a5b2e 	bgeu	r4,r16,811172fc <__reset+0xfb0f72fc>
81118990:	ad7fffc4 	addi	r21,r21,-1
81118994:	a9400007 	ldb	r5,0(r21)
81118998:	e00d883a 	mov	r6,fp
8111899c:	b009883a 	mov	r4,r22
811189a0:	1120cec0 	call	81120cec <_ungetc_r>
811189a4:	d9400104 	addi	r5,sp,4
811189a8:	2d7ff91e 	bne	r5,r21,81118990 <__reset+0xfb0f8990>
811189ac:	003a5306 	br	811172fc <__reset+0xfb0f72fc>
811189b0:	111f5140 	call	8111f514 <_strtoull_r>
811189b4:	003f9d06 	br	8111882c <__reset+0xfb0f882c>

811189b8 <vfscanf>:
811189b8:	00a04534 	movhi	r2,33044
811189bc:	defffb04 	addi	sp,sp,-20
811189c0:	10bf9d04 	addi	r2,r2,-396
811189c4:	de00012e 	bgeu	sp,et,811189cc <vfscanf+0x14>
811189c8:	003b68fa 	trap	3
811189cc:	dc000215 	stw	r16,8(sp)
811189d0:	14000017 	ldw	r16,0(r2)
811189d4:	dc400315 	stw	r17,12(sp)
811189d8:	dfc00415 	stw	ra,16(sp)
811189dc:	2023883a 	mov	r17,r4
811189e0:	80000826 	beq	r16,zero,81118a04 <vfscanf+0x4c>
811189e4:	80800e17 	ldw	r2,56(r16)
811189e8:	1000061e 	bne	r2,zero,81118a04 <vfscanf+0x4c>
811189ec:	8009883a 	mov	r4,r16
811189f0:	d9400015 	stw	r5,0(sp)
811189f4:	d9800115 	stw	r6,4(sp)
811189f8:	111ab700 	call	8111ab70 <__sinit>
811189fc:	d9800117 	ldw	r6,4(sp)
81118a00:	d9400017 	ldw	r5,0(sp)
81118a04:	300f883a 	mov	r7,r6
81118a08:	8009883a 	mov	r4,r16
81118a0c:	280d883a 	mov	r6,r5
81118a10:	880b883a 	mov	r5,r17
81118a14:	dfc00417 	ldw	ra,16(sp)
81118a18:	dc400317 	ldw	r17,12(sp)
81118a1c:	dc000217 	ldw	r16,8(sp)
81118a20:	dec00504 	addi	sp,sp,20
81118a24:	11171f41 	jmpi	811171f4 <__svfscanf_r>

81118a28 <__svfscanf>:
81118a28:	00a04534 	movhi	r2,33044
81118a2c:	10bf9d04 	addi	r2,r2,-396
81118a30:	300f883a 	mov	r7,r6
81118a34:	280d883a 	mov	r6,r5
81118a38:	200b883a 	mov	r5,r4
81118a3c:	11000017 	ldw	r4,0(r2)
81118a40:	11171f41 	jmpi	811171f4 <__svfscanf_r>

81118a44 <_vfscanf_r>:
81118a44:	defffb04 	addi	sp,sp,-20
81118a48:	de00012e 	bgeu	sp,et,81118a50 <_vfscanf_r+0xc>
81118a4c:	003b68fa 	trap	3
81118a50:	dc000315 	stw	r16,12(sp)
81118a54:	dfc00415 	stw	ra,16(sp)
81118a58:	2021883a 	mov	r16,r4
81118a5c:	20000926 	beq	r4,zero,81118a84 <_vfscanf_r+0x40>
81118a60:	20800e17 	ldw	r2,56(r4)
81118a64:	1000071e 	bne	r2,zero,81118a84 <_vfscanf_r+0x40>
81118a68:	d9400015 	stw	r5,0(sp)
81118a6c:	d9800115 	stw	r6,4(sp)
81118a70:	d9c00215 	stw	r7,8(sp)
81118a74:	111ab700 	call	8111ab70 <__sinit>
81118a78:	d9c00217 	ldw	r7,8(sp)
81118a7c:	d9800117 	ldw	r6,4(sp)
81118a80:	d9400017 	ldw	r5,0(sp)
81118a84:	8009883a 	mov	r4,r16
81118a88:	dfc00417 	ldw	ra,16(sp)
81118a8c:	dc000317 	ldw	r16,12(sp)
81118a90:	dec00504 	addi	sp,sp,20
81118a94:	11171f41 	jmpi	811171f4 <__svfscanf_r>

81118a98 <_write_r>:
81118a98:	defffd04 	addi	sp,sp,-12
81118a9c:	de00012e 	bgeu	sp,et,81118aa4 <_write_r+0xc>
81118aa0:	003b68fa 	trap	3
81118aa4:	2805883a 	mov	r2,r5
81118aa8:	dc000015 	stw	r16,0(sp)
81118aac:	04204534 	movhi	r16,33044
81118ab0:	dc400115 	stw	r17,4(sp)
81118ab4:	300b883a 	mov	r5,r6
81118ab8:	843ff604 	addi	r16,r16,-40
81118abc:	2023883a 	mov	r17,r4
81118ac0:	380d883a 	mov	r6,r7
81118ac4:	1009883a 	mov	r4,r2
81118ac8:	dfc00215 	stw	ra,8(sp)
81118acc:	80000015 	stw	zero,0(r16)
81118ad0:	112770c0 	call	8112770c <write>
81118ad4:	00ffffc4 	movi	r3,-1
81118ad8:	10c00526 	beq	r2,r3,81118af0 <_write_r+0x58>
81118adc:	dfc00217 	ldw	ra,8(sp)
81118ae0:	dc400117 	ldw	r17,4(sp)
81118ae4:	dc000017 	ldw	r16,0(sp)
81118ae8:	dec00304 	addi	sp,sp,12
81118aec:	f800283a 	ret
81118af0:	80c00017 	ldw	r3,0(r16)
81118af4:	183ff926 	beq	r3,zero,81118adc <__reset+0xfb0f8adc>
81118af8:	88c00015 	stw	r3,0(r17)
81118afc:	003ff706 	br	81118adc <__reset+0xfb0f8adc>

81118b00 <__swsetup_r>:
81118b00:	00a04534 	movhi	r2,33044
81118b04:	defffd04 	addi	sp,sp,-12
81118b08:	10bf9d04 	addi	r2,r2,-396
81118b0c:	de00012e 	bgeu	sp,et,81118b14 <__swsetup_r+0x14>
81118b10:	003b68fa 	trap	3
81118b14:	dc400115 	stw	r17,4(sp)
81118b18:	2023883a 	mov	r17,r4
81118b1c:	11000017 	ldw	r4,0(r2)
81118b20:	dc000015 	stw	r16,0(sp)
81118b24:	dfc00215 	stw	ra,8(sp)
81118b28:	2821883a 	mov	r16,r5
81118b2c:	20000226 	beq	r4,zero,81118b38 <__swsetup_r+0x38>
81118b30:	20800e17 	ldw	r2,56(r4)
81118b34:	10003126 	beq	r2,zero,81118bfc <__swsetup_r+0xfc>
81118b38:	8080030b 	ldhu	r2,12(r16)
81118b3c:	10c0020c 	andi	r3,r2,8
81118b40:	1009883a 	mov	r4,r2
81118b44:	18000f26 	beq	r3,zero,81118b84 <__swsetup_r+0x84>
81118b48:	80c00417 	ldw	r3,16(r16)
81118b4c:	18001526 	beq	r3,zero,81118ba4 <__swsetup_r+0xa4>
81118b50:	1100004c 	andi	r4,r2,1
81118b54:	20001c1e 	bne	r4,zero,81118bc8 <__swsetup_r+0xc8>
81118b58:	1080008c 	andi	r2,r2,2
81118b5c:	1000291e 	bne	r2,zero,81118c04 <__swsetup_r+0x104>
81118b60:	80800517 	ldw	r2,20(r16)
81118b64:	80800215 	stw	r2,8(r16)
81118b68:	18001c26 	beq	r3,zero,81118bdc <__swsetup_r+0xdc>
81118b6c:	0005883a 	mov	r2,zero
81118b70:	dfc00217 	ldw	ra,8(sp)
81118b74:	dc400117 	ldw	r17,4(sp)
81118b78:	dc000017 	ldw	r16,0(sp)
81118b7c:	dec00304 	addi	sp,sp,12
81118b80:	f800283a 	ret
81118b84:	2080040c 	andi	r2,r4,16
81118b88:	10002e26 	beq	r2,zero,81118c44 <__swsetup_r+0x144>
81118b8c:	2080010c 	andi	r2,r4,4
81118b90:	10001e1e 	bne	r2,zero,81118c0c <__swsetup_r+0x10c>
81118b94:	80c00417 	ldw	r3,16(r16)
81118b98:	20800214 	ori	r2,r4,8
81118b9c:	8080030d 	sth	r2,12(r16)
81118ba0:	183feb1e 	bne	r3,zero,81118b50 <__reset+0xfb0f8b50>
81118ba4:	1100a00c 	andi	r4,r2,640
81118ba8:	01408004 	movi	r5,512
81118bac:	217fe826 	beq	r4,r5,81118b50 <__reset+0xfb0f8b50>
81118bb0:	800b883a 	mov	r5,r16
81118bb4:	8809883a 	mov	r4,r17
81118bb8:	11116ec0 	call	811116ec <__smakebuf_r>
81118bbc:	8080030b 	ldhu	r2,12(r16)
81118bc0:	80c00417 	ldw	r3,16(r16)
81118bc4:	003fe206 	br	81118b50 <__reset+0xfb0f8b50>
81118bc8:	80800517 	ldw	r2,20(r16)
81118bcc:	80000215 	stw	zero,8(r16)
81118bd0:	0085c83a 	sub	r2,zero,r2
81118bd4:	80800615 	stw	r2,24(r16)
81118bd8:	183fe41e 	bne	r3,zero,81118b6c <__reset+0xfb0f8b6c>
81118bdc:	80c0030b 	ldhu	r3,12(r16)
81118be0:	0005883a 	mov	r2,zero
81118be4:	1900200c 	andi	r4,r3,128
81118be8:	203fe126 	beq	r4,zero,81118b70 <__reset+0xfb0f8b70>
81118bec:	18c01014 	ori	r3,r3,64
81118bf0:	80c0030d 	sth	r3,12(r16)
81118bf4:	00bfffc4 	movi	r2,-1
81118bf8:	003fdd06 	br	81118b70 <__reset+0xfb0f8b70>
81118bfc:	111ab700 	call	8111ab70 <__sinit>
81118c00:	003fcd06 	br	81118b38 <__reset+0xfb0f8b38>
81118c04:	0005883a 	mov	r2,zero
81118c08:	003fd606 	br	81118b64 <__reset+0xfb0f8b64>
81118c0c:	81400c17 	ldw	r5,48(r16)
81118c10:	28000626 	beq	r5,zero,81118c2c <__swsetup_r+0x12c>
81118c14:	80801004 	addi	r2,r16,64
81118c18:	28800326 	beq	r5,r2,81118c28 <__swsetup_r+0x128>
81118c1c:	8809883a 	mov	r4,r17
81118c20:	111b0080 	call	8111b008 <_free_r>
81118c24:	8100030b 	ldhu	r4,12(r16)
81118c28:	80000c15 	stw	zero,48(r16)
81118c2c:	80c00417 	ldw	r3,16(r16)
81118c30:	00bff6c4 	movi	r2,-37
81118c34:	1108703a 	and	r4,r2,r4
81118c38:	80000115 	stw	zero,4(r16)
81118c3c:	80c00015 	stw	r3,0(r16)
81118c40:	003fd506 	br	81118b98 <__reset+0xfb0f8b98>
81118c44:	00800244 	movi	r2,9
81118c48:	88800015 	stw	r2,0(r17)
81118c4c:	20801014 	ori	r2,r4,64
81118c50:	8080030d 	sth	r2,12(r16)
81118c54:	00bfffc4 	movi	r2,-1
81118c58:	003fc506 	br	81118b70 <__reset+0xfb0f8b70>

81118c5c <_close_r>:
81118c5c:	defffd04 	addi	sp,sp,-12
81118c60:	de00012e 	bgeu	sp,et,81118c68 <_close_r+0xc>
81118c64:	003b68fa 	trap	3
81118c68:	dc000015 	stw	r16,0(sp)
81118c6c:	04204534 	movhi	r16,33044
81118c70:	dc400115 	stw	r17,4(sp)
81118c74:	843ff604 	addi	r16,r16,-40
81118c78:	2023883a 	mov	r17,r4
81118c7c:	2809883a 	mov	r4,r5
81118c80:	dfc00215 	stw	ra,8(sp)
81118c84:	80000015 	stw	zero,0(r16)
81118c88:	11268300 	call	81126830 <close>
81118c8c:	00ffffc4 	movi	r3,-1
81118c90:	10c00526 	beq	r2,r3,81118ca8 <_close_r+0x4c>
81118c94:	dfc00217 	ldw	ra,8(sp)
81118c98:	dc400117 	ldw	r17,4(sp)
81118c9c:	dc000017 	ldw	r16,0(sp)
81118ca0:	dec00304 	addi	sp,sp,12
81118ca4:	f800283a 	ret
81118ca8:	80c00017 	ldw	r3,0(r16)
81118cac:	183ff926 	beq	r3,zero,81118c94 <__reset+0xfb0f8c94>
81118cb0:	88c00015 	stw	r3,0(r17)
81118cb4:	003ff706 	br	81118c94 <__reset+0xfb0f8c94>

81118cb8 <quorem>:
81118cb8:	defff704 	addi	sp,sp,-36
81118cbc:	de00012e 	bgeu	sp,et,81118cc4 <quorem+0xc>
81118cc0:	003b68fa 	trap	3
81118cc4:	dc800215 	stw	r18,8(sp)
81118cc8:	20800417 	ldw	r2,16(r4)
81118ccc:	2c800417 	ldw	r18,16(r5)
81118cd0:	dfc00815 	stw	ra,32(sp)
81118cd4:	ddc00715 	stw	r23,28(sp)
81118cd8:	dd800615 	stw	r22,24(sp)
81118cdc:	dd400515 	stw	r21,20(sp)
81118ce0:	dd000415 	stw	r20,16(sp)
81118ce4:	dcc00315 	stw	r19,12(sp)
81118ce8:	dc400115 	stw	r17,4(sp)
81118cec:	dc000015 	stw	r16,0(sp)
81118cf0:	14807116 	blt	r2,r18,81118eb8 <quorem+0x200>
81118cf4:	94bfffc4 	addi	r18,r18,-1
81118cf8:	94ad883a 	add	r22,r18,r18
81118cfc:	b5ad883a 	add	r22,r22,r22
81118d00:	2c400504 	addi	r17,r5,20
81118d04:	8da9883a 	add	r20,r17,r22
81118d08:	25400504 	addi	r21,r4,20
81118d0c:	282f883a 	mov	r23,r5
81118d10:	adad883a 	add	r22,r21,r22
81118d14:	a1400017 	ldw	r5,0(r20)
81118d18:	2021883a 	mov	r16,r4
81118d1c:	b1000017 	ldw	r4,0(r22)
81118d20:	29400044 	addi	r5,r5,1
81118d24:	11244f00 	call	811244f0 <__udivsi3>
81118d28:	1027883a 	mov	r19,r2
81118d2c:	10002c26 	beq	r2,zero,81118de0 <quorem+0x128>
81118d30:	a813883a 	mov	r9,r21
81118d34:	880b883a 	mov	r5,r17
81118d38:	0009883a 	mov	r4,zero
81118d3c:	000d883a 	mov	r6,zero
81118d40:	2a000017 	ldw	r8,0(r5)
81118d44:	49c00017 	ldw	r7,0(r9)
81118d48:	29400104 	addi	r5,r5,4
81118d4c:	40bfffcc 	andi	r2,r8,65535
81118d50:	14c5383a 	mul	r2,r2,r19
81118d54:	4010d43a 	srli	r8,r8,16
81118d58:	38ffffcc 	andi	r3,r7,65535
81118d5c:	1105883a 	add	r2,r2,r4
81118d60:	1008d43a 	srli	r4,r2,16
81118d64:	44d1383a 	mul	r8,r8,r19
81118d68:	198d883a 	add	r6,r3,r6
81118d6c:	10ffffcc 	andi	r3,r2,65535
81118d70:	30c7c83a 	sub	r3,r6,r3
81118d74:	380ed43a 	srli	r7,r7,16
81118d78:	4105883a 	add	r2,r8,r4
81118d7c:	180dd43a 	srai	r6,r3,16
81118d80:	113fffcc 	andi	r4,r2,65535
81118d84:	390fc83a 	sub	r7,r7,r4
81118d88:	398d883a 	add	r6,r7,r6
81118d8c:	300e943a 	slli	r7,r6,16
81118d90:	18ffffcc 	andi	r3,r3,65535
81118d94:	1008d43a 	srli	r4,r2,16
81118d98:	38ceb03a 	or	r7,r7,r3
81118d9c:	49c00015 	stw	r7,0(r9)
81118da0:	300dd43a 	srai	r6,r6,16
81118da4:	4a400104 	addi	r9,r9,4
81118da8:	a17fe52e 	bgeu	r20,r5,81118d40 <__reset+0xfb0f8d40>
81118dac:	b0800017 	ldw	r2,0(r22)
81118db0:	10000b1e 	bne	r2,zero,81118de0 <quorem+0x128>
81118db4:	b0bfff04 	addi	r2,r22,-4
81118db8:	a880082e 	bgeu	r21,r2,81118ddc <quorem+0x124>
81118dbc:	b0ffff17 	ldw	r3,-4(r22)
81118dc0:	18000326 	beq	r3,zero,81118dd0 <quorem+0x118>
81118dc4:	00000506 	br	81118ddc <quorem+0x124>
81118dc8:	10c00017 	ldw	r3,0(r2)
81118dcc:	1800031e 	bne	r3,zero,81118ddc <quorem+0x124>
81118dd0:	10bfff04 	addi	r2,r2,-4
81118dd4:	94bfffc4 	addi	r18,r18,-1
81118dd8:	a8bffb36 	bltu	r21,r2,81118dc8 <__reset+0xfb0f8dc8>
81118ddc:	84800415 	stw	r18,16(r16)
81118de0:	b80b883a 	mov	r5,r23
81118de4:	8009883a 	mov	r4,r16
81118de8:	111c8d80 	call	8111c8d8 <__mcmp>
81118dec:	10002616 	blt	r2,zero,81118e88 <quorem+0x1d0>
81118df0:	9cc00044 	addi	r19,r19,1
81118df4:	a805883a 	mov	r2,r21
81118df8:	000b883a 	mov	r5,zero
81118dfc:	11000017 	ldw	r4,0(r2)
81118e00:	89800017 	ldw	r6,0(r17)
81118e04:	10800104 	addi	r2,r2,4
81118e08:	20ffffcc 	andi	r3,r4,65535
81118e0c:	194b883a 	add	r5,r3,r5
81118e10:	30ffffcc 	andi	r3,r6,65535
81118e14:	28c7c83a 	sub	r3,r5,r3
81118e18:	300cd43a 	srli	r6,r6,16
81118e1c:	2008d43a 	srli	r4,r4,16
81118e20:	180bd43a 	srai	r5,r3,16
81118e24:	18ffffcc 	andi	r3,r3,65535
81118e28:	2189c83a 	sub	r4,r4,r6
81118e2c:	2149883a 	add	r4,r4,r5
81118e30:	200c943a 	slli	r6,r4,16
81118e34:	8c400104 	addi	r17,r17,4
81118e38:	200bd43a 	srai	r5,r4,16
81118e3c:	30c6b03a 	or	r3,r6,r3
81118e40:	10ffff15 	stw	r3,-4(r2)
81118e44:	a47fed2e 	bgeu	r20,r17,81118dfc <__reset+0xfb0f8dfc>
81118e48:	9485883a 	add	r2,r18,r18
81118e4c:	1085883a 	add	r2,r2,r2
81118e50:	a887883a 	add	r3,r21,r2
81118e54:	18800017 	ldw	r2,0(r3)
81118e58:	10000b1e 	bne	r2,zero,81118e88 <quorem+0x1d0>
81118e5c:	18bfff04 	addi	r2,r3,-4
81118e60:	a880082e 	bgeu	r21,r2,81118e84 <quorem+0x1cc>
81118e64:	18ffff17 	ldw	r3,-4(r3)
81118e68:	18000326 	beq	r3,zero,81118e78 <quorem+0x1c0>
81118e6c:	00000506 	br	81118e84 <quorem+0x1cc>
81118e70:	10c00017 	ldw	r3,0(r2)
81118e74:	1800031e 	bne	r3,zero,81118e84 <quorem+0x1cc>
81118e78:	10bfff04 	addi	r2,r2,-4
81118e7c:	94bfffc4 	addi	r18,r18,-1
81118e80:	a8bffb36 	bltu	r21,r2,81118e70 <__reset+0xfb0f8e70>
81118e84:	84800415 	stw	r18,16(r16)
81118e88:	9805883a 	mov	r2,r19
81118e8c:	dfc00817 	ldw	ra,32(sp)
81118e90:	ddc00717 	ldw	r23,28(sp)
81118e94:	dd800617 	ldw	r22,24(sp)
81118e98:	dd400517 	ldw	r21,20(sp)
81118e9c:	dd000417 	ldw	r20,16(sp)
81118ea0:	dcc00317 	ldw	r19,12(sp)
81118ea4:	dc800217 	ldw	r18,8(sp)
81118ea8:	dc400117 	ldw	r17,4(sp)
81118eac:	dc000017 	ldw	r16,0(sp)
81118eb0:	dec00904 	addi	sp,sp,36
81118eb4:	f800283a 	ret
81118eb8:	0005883a 	mov	r2,zero
81118ebc:	003ff306 	br	81118e8c <__reset+0xfb0f8e8c>

81118ec0 <_dtoa_r>:
81118ec0:	deffde04 	addi	sp,sp,-136
81118ec4:	de00012e 	bgeu	sp,et,81118ecc <_dtoa_r+0xc>
81118ec8:	003b68fa 	trap	3
81118ecc:	20801017 	ldw	r2,64(r4)
81118ed0:	df002015 	stw	fp,128(sp)
81118ed4:	dcc01b15 	stw	r19,108(sp)
81118ed8:	dc801a15 	stw	r18,104(sp)
81118edc:	dc401915 	stw	r17,100(sp)
81118ee0:	dc001815 	stw	r16,96(sp)
81118ee4:	dfc02115 	stw	ra,132(sp)
81118ee8:	ddc01f15 	stw	r23,124(sp)
81118eec:	dd801e15 	stw	r22,120(sp)
81118ef0:	dd401d15 	stw	r21,116(sp)
81118ef4:	dd001c15 	stw	r20,112(sp)
81118ef8:	d9c00315 	stw	r7,12(sp)
81118efc:	2039883a 	mov	fp,r4
81118f00:	3023883a 	mov	r17,r6
81118f04:	2825883a 	mov	r18,r5
81118f08:	dc002417 	ldw	r16,144(sp)
81118f0c:	3027883a 	mov	r19,r6
81118f10:	10000826 	beq	r2,zero,81118f34 <_dtoa_r+0x74>
81118f14:	21801117 	ldw	r6,68(r4)
81118f18:	00c00044 	movi	r3,1
81118f1c:	100b883a 	mov	r5,r2
81118f20:	1986983a 	sll	r3,r3,r6
81118f24:	11800115 	stw	r6,4(r2)
81118f28:	10c00215 	stw	r3,8(r2)
81118f2c:	111c0880 	call	8111c088 <_Bfree>
81118f30:	e0001015 	stw	zero,64(fp)
81118f34:	88002e16 	blt	r17,zero,81118ff0 <_dtoa_r+0x130>
81118f38:	80000015 	stw	zero,0(r16)
81118f3c:	889ffc2c 	andhi	r2,r17,32752
81118f40:	00dffc34 	movhi	r3,32752
81118f44:	10c01c26 	beq	r2,r3,81118fb8 <_dtoa_r+0xf8>
81118f48:	000d883a 	mov	r6,zero
81118f4c:	000f883a 	mov	r7,zero
81118f50:	9009883a 	mov	r4,r18
81118f54:	980b883a 	mov	r5,r19
81118f58:	112594c0 	call	8112594c <__eqdf2>
81118f5c:	10002b1e 	bne	r2,zero,8111900c <_dtoa_r+0x14c>
81118f60:	d9c02317 	ldw	r7,140(sp)
81118f64:	00800044 	movi	r2,1
81118f68:	38800015 	stw	r2,0(r7)
81118f6c:	d8802517 	ldw	r2,148(sp)
81118f70:	10019e26 	beq	r2,zero,811195ec <_dtoa_r+0x72c>
81118f74:	d8c02517 	ldw	r3,148(sp)
81118f78:	00a04534 	movhi	r2,33044
81118f7c:	10b6a344 	addi	r2,r2,-9587
81118f80:	18800015 	stw	r2,0(r3)
81118f84:	10bfffc4 	addi	r2,r2,-1
81118f88:	dfc02117 	ldw	ra,132(sp)
81118f8c:	df002017 	ldw	fp,128(sp)
81118f90:	ddc01f17 	ldw	r23,124(sp)
81118f94:	dd801e17 	ldw	r22,120(sp)
81118f98:	dd401d17 	ldw	r21,116(sp)
81118f9c:	dd001c17 	ldw	r20,112(sp)
81118fa0:	dcc01b17 	ldw	r19,108(sp)
81118fa4:	dc801a17 	ldw	r18,104(sp)
81118fa8:	dc401917 	ldw	r17,100(sp)
81118fac:	dc001817 	ldw	r16,96(sp)
81118fb0:	dec02204 	addi	sp,sp,136
81118fb4:	f800283a 	ret
81118fb8:	d8c02317 	ldw	r3,140(sp)
81118fbc:	0089c3c4 	movi	r2,9999
81118fc0:	18800015 	stw	r2,0(r3)
81118fc4:	90017726 	beq	r18,zero,811195a4 <_dtoa_r+0x6e4>
81118fc8:	00a04534 	movhi	r2,33044
81118fcc:	10b6c104 	addi	r2,r2,-9468
81118fd0:	d9002517 	ldw	r4,148(sp)
81118fd4:	203fec26 	beq	r4,zero,81118f88 <__reset+0xfb0f8f88>
81118fd8:	10c000c7 	ldb	r3,3(r2)
81118fdc:	1801781e 	bne	r3,zero,811195c0 <_dtoa_r+0x700>
81118fe0:	10c000c4 	addi	r3,r2,3
81118fe4:	d9802517 	ldw	r6,148(sp)
81118fe8:	30c00015 	stw	r3,0(r6)
81118fec:	003fe606 	br	81118f88 <__reset+0xfb0f8f88>
81118ff0:	04e00034 	movhi	r19,32768
81118ff4:	9cffffc4 	addi	r19,r19,-1
81118ff8:	00800044 	movi	r2,1
81118ffc:	8ce6703a 	and	r19,r17,r19
81119000:	80800015 	stw	r2,0(r16)
81119004:	9823883a 	mov	r17,r19
81119008:	003fcc06 	br	81118f3c <__reset+0xfb0f8f3c>
8111900c:	d8800204 	addi	r2,sp,8
81119010:	d8800015 	stw	r2,0(sp)
81119014:	d9c00104 	addi	r7,sp,4
81119018:	900b883a 	mov	r5,r18
8111901c:	980d883a 	mov	r6,r19
81119020:	e009883a 	mov	r4,fp
81119024:	8820d53a 	srli	r16,r17,20
81119028:	111ccb40 	call	8111ccb4 <__d2b>
8111902c:	d8800915 	stw	r2,36(sp)
81119030:	8001651e 	bne	r16,zero,811195c8 <_dtoa_r+0x708>
81119034:	dd800217 	ldw	r22,8(sp)
81119038:	dc000117 	ldw	r16,4(sp)
8111903c:	00800804 	movi	r2,32
81119040:	b421883a 	add	r16,r22,r16
81119044:	80c10c84 	addi	r3,r16,1074
81119048:	10c2d10e 	bge	r2,r3,81119b90 <_dtoa_r+0xcd0>
8111904c:	00801004 	movi	r2,64
81119050:	81010484 	addi	r4,r16,1042
81119054:	10c7c83a 	sub	r3,r2,r3
81119058:	9108d83a 	srl	r4,r18,r4
8111905c:	88e2983a 	sll	r17,r17,r3
81119060:	2448b03a 	or	r4,r4,r17
81119064:	112660c0 	call	8112660c <__floatunsidf>
81119068:	017f8434 	movhi	r5,65040
8111906c:	01800044 	movi	r6,1
81119070:	1009883a 	mov	r4,r2
81119074:	194b883a 	add	r5,r3,r5
81119078:	843fffc4 	addi	r16,r16,-1
8111907c:	d9801115 	stw	r6,68(sp)
81119080:	000d883a 	mov	r6,zero
81119084:	01cffe34 	movhi	r7,16376
81119088:	1125ba40 	call	81125ba4 <__subdf3>
8111908c:	0198dbf4 	movhi	r6,25455
81119090:	01cff4f4 	movhi	r7,16339
81119094:	3190d844 	addi	r6,r6,17249
81119098:	39e1e9c4 	addi	r7,r7,-30809
8111909c:	1009883a 	mov	r4,r2
811190a0:	180b883a 	mov	r5,r3
811190a4:	11105240 	call	81110524 <__muldf3>
811190a8:	01a2d874 	movhi	r6,35681
811190ac:	01cff1f4 	movhi	r7,16327
811190b0:	31b22cc4 	addi	r6,r6,-14157
811190b4:	39e28a04 	addi	r7,r7,-30168
811190b8:	180b883a 	mov	r5,r3
811190bc:	1009883a 	mov	r4,r2
811190c0:	11247a80 	call	811247a8 <__adddf3>
811190c4:	8009883a 	mov	r4,r16
811190c8:	1029883a 	mov	r20,r2
811190cc:	1823883a 	mov	r17,r3
811190d0:	11265280 	call	81126528 <__floatsidf>
811190d4:	019427f4 	movhi	r6,20639
811190d8:	01cff4f4 	movhi	r7,16339
811190dc:	319e7ec4 	addi	r6,r6,31227
811190e0:	39d104c4 	addi	r7,r7,17427
811190e4:	1009883a 	mov	r4,r2
811190e8:	180b883a 	mov	r5,r3
811190ec:	11105240 	call	81110524 <__muldf3>
811190f0:	100d883a 	mov	r6,r2
811190f4:	180f883a 	mov	r7,r3
811190f8:	a009883a 	mov	r4,r20
811190fc:	880b883a 	mov	r5,r17
81119100:	11247a80 	call	811247a8 <__adddf3>
81119104:	1009883a 	mov	r4,r2
81119108:	180b883a 	mov	r5,r3
8111910c:	1029883a 	mov	r20,r2
81119110:	1823883a 	mov	r17,r3
81119114:	11264a80 	call	811264a8 <__fixdfsi>
81119118:	000d883a 	mov	r6,zero
8111911c:	000f883a 	mov	r7,zero
81119120:	a009883a 	mov	r4,r20
81119124:	880b883a 	mov	r5,r17
81119128:	d8800515 	stw	r2,20(sp)
8111912c:	1125ab00 	call	81125ab0 <__ledf2>
81119130:	10028716 	blt	r2,zero,81119b50 <_dtoa_r+0xc90>
81119134:	d8c00517 	ldw	r3,20(sp)
81119138:	00800584 	movi	r2,22
8111913c:	10c27536 	bltu	r2,r3,81119b14 <_dtoa_r+0xc54>
81119140:	180490fa 	slli	r2,r3,3
81119144:	00e04534 	movhi	r3,33044
81119148:	18f6dc04 	addi	r3,r3,-9360
8111914c:	1885883a 	add	r2,r3,r2
81119150:	11000017 	ldw	r4,0(r2)
81119154:	11400117 	ldw	r5,4(r2)
81119158:	900d883a 	mov	r6,r18
8111915c:	980f883a 	mov	r7,r19
81119160:	11259d40 	call	811259d4 <__gedf2>
81119164:	00828d0e 	bge	zero,r2,81119b9c <_dtoa_r+0xcdc>
81119168:	d9000517 	ldw	r4,20(sp)
8111916c:	d8000e15 	stw	zero,56(sp)
81119170:	213fffc4 	addi	r4,r4,-1
81119174:	d9000515 	stw	r4,20(sp)
81119178:	b42dc83a 	sub	r22,r22,r16
8111917c:	b5bfffc4 	addi	r22,r22,-1
81119180:	b0026f16 	blt	r22,zero,81119b40 <_dtoa_r+0xc80>
81119184:	d8000815 	stw	zero,32(sp)
81119188:	d9c00517 	ldw	r7,20(sp)
8111918c:	38026416 	blt	r7,zero,81119b20 <_dtoa_r+0xc60>
81119190:	b1ed883a 	add	r22,r22,r7
81119194:	d9c00d15 	stw	r7,52(sp)
81119198:	d8000a15 	stw	zero,40(sp)
8111919c:	d9800317 	ldw	r6,12(sp)
811191a0:	00800244 	movi	r2,9
811191a4:	11811436 	bltu	r2,r6,811195f8 <_dtoa_r+0x738>
811191a8:	00800144 	movi	r2,5
811191ac:	1184e10e 	bge	r2,r6,8111a534 <_dtoa_r+0x1674>
811191b0:	31bfff04 	addi	r6,r6,-4
811191b4:	d9800315 	stw	r6,12(sp)
811191b8:	0023883a 	mov	r17,zero
811191bc:	d9800317 	ldw	r6,12(sp)
811191c0:	008000c4 	movi	r2,3
811191c4:	30836726 	beq	r6,r2,81119f64 <_dtoa_r+0x10a4>
811191c8:	1183410e 	bge	r2,r6,81119ed0 <_dtoa_r+0x1010>
811191cc:	d9c00317 	ldw	r7,12(sp)
811191d0:	00800104 	movi	r2,4
811191d4:	38827c26 	beq	r7,r2,81119bc8 <_dtoa_r+0xd08>
811191d8:	00800144 	movi	r2,5
811191dc:	3884c41e 	bne	r7,r2,8111a4f0 <_dtoa_r+0x1630>
811191e0:	00800044 	movi	r2,1
811191e4:	d8800b15 	stw	r2,44(sp)
811191e8:	d8c00517 	ldw	r3,20(sp)
811191ec:	d9002217 	ldw	r4,136(sp)
811191f0:	1907883a 	add	r3,r3,r4
811191f4:	19800044 	addi	r6,r3,1
811191f8:	d8c00c15 	stw	r3,48(sp)
811191fc:	d9800615 	stw	r6,24(sp)
81119200:	0183a40e 	bge	zero,r6,8111a094 <_dtoa_r+0x11d4>
81119204:	d9800617 	ldw	r6,24(sp)
81119208:	3021883a 	mov	r16,r6
8111920c:	e0001115 	stw	zero,68(fp)
81119210:	008005c4 	movi	r2,23
81119214:	1184c92e 	bgeu	r2,r6,8111a53c <_dtoa_r+0x167c>
81119218:	00c00044 	movi	r3,1
8111921c:	00800104 	movi	r2,4
81119220:	1085883a 	add	r2,r2,r2
81119224:	11000504 	addi	r4,r2,20
81119228:	180b883a 	mov	r5,r3
8111922c:	18c00044 	addi	r3,r3,1
81119230:	313ffb2e 	bgeu	r6,r4,81119220 <__reset+0xfb0f9220>
81119234:	e1401115 	stw	r5,68(fp)
81119238:	e009883a 	mov	r4,fp
8111923c:	111bfd80 	call	8111bfd8 <_Balloc>
81119240:	d8800715 	stw	r2,28(sp)
81119244:	e0801015 	stw	r2,64(fp)
81119248:	00800384 	movi	r2,14
8111924c:	1400f736 	bltu	r2,r16,8111962c <_dtoa_r+0x76c>
81119250:	8800f626 	beq	r17,zero,8111962c <_dtoa_r+0x76c>
81119254:	d9c00517 	ldw	r7,20(sp)
81119258:	01c39a0e 	bge	zero,r7,8111a0c4 <_dtoa_r+0x1204>
8111925c:	388003cc 	andi	r2,r7,15
81119260:	100490fa 	slli	r2,r2,3
81119264:	382bd13a 	srai	r21,r7,4
81119268:	00e04534 	movhi	r3,33044
8111926c:	18f6dc04 	addi	r3,r3,-9360
81119270:	1885883a 	add	r2,r3,r2
81119274:	a8c0040c 	andi	r3,r21,16
81119278:	12400017 	ldw	r9,0(r2)
8111927c:	12000117 	ldw	r8,4(r2)
81119280:	18037926 	beq	r3,zero,8111a068 <_dtoa_r+0x11a8>
81119284:	00a04534 	movhi	r2,33044
81119288:	10b6d204 	addi	r2,r2,-9400
8111928c:	11800817 	ldw	r6,32(r2)
81119290:	11c00917 	ldw	r7,36(r2)
81119294:	9009883a 	mov	r4,r18
81119298:	980b883a 	mov	r5,r19
8111929c:	da001715 	stw	r8,92(sp)
811192a0:	da401615 	stw	r9,88(sp)
811192a4:	112505c0 	call	8112505c <__divdf3>
811192a8:	da001717 	ldw	r8,92(sp)
811192ac:	da401617 	ldw	r9,88(sp)
811192b0:	ad4003cc 	andi	r21,r21,15
811192b4:	040000c4 	movi	r16,3
811192b8:	1023883a 	mov	r17,r2
811192bc:	1829883a 	mov	r20,r3
811192c0:	a8001126 	beq	r21,zero,81119308 <_dtoa_r+0x448>
811192c4:	05e04534 	movhi	r23,33044
811192c8:	bdf6d204 	addi	r23,r23,-9400
811192cc:	4805883a 	mov	r2,r9
811192d0:	4007883a 	mov	r3,r8
811192d4:	a980004c 	andi	r6,r21,1
811192d8:	1009883a 	mov	r4,r2
811192dc:	a82bd07a 	srai	r21,r21,1
811192e0:	180b883a 	mov	r5,r3
811192e4:	30000426 	beq	r6,zero,811192f8 <_dtoa_r+0x438>
811192e8:	b9800017 	ldw	r6,0(r23)
811192ec:	b9c00117 	ldw	r7,4(r23)
811192f0:	84000044 	addi	r16,r16,1
811192f4:	11105240 	call	81110524 <__muldf3>
811192f8:	bdc00204 	addi	r23,r23,8
811192fc:	a83ff51e 	bne	r21,zero,811192d4 <__reset+0xfb0f92d4>
81119300:	1013883a 	mov	r9,r2
81119304:	1811883a 	mov	r8,r3
81119308:	480d883a 	mov	r6,r9
8111930c:	400f883a 	mov	r7,r8
81119310:	8809883a 	mov	r4,r17
81119314:	a00b883a 	mov	r5,r20
81119318:	112505c0 	call	8112505c <__divdf3>
8111931c:	d8800f15 	stw	r2,60(sp)
81119320:	d8c01015 	stw	r3,64(sp)
81119324:	d8c00e17 	ldw	r3,56(sp)
81119328:	18000626 	beq	r3,zero,81119344 <_dtoa_r+0x484>
8111932c:	d9000f17 	ldw	r4,60(sp)
81119330:	d9401017 	ldw	r5,64(sp)
81119334:	000d883a 	mov	r6,zero
81119338:	01cffc34 	movhi	r7,16368
8111933c:	1125ab00 	call	81125ab0 <__ledf2>
81119340:	10040b16 	blt	r2,zero,8111a370 <_dtoa_r+0x14b0>
81119344:	8009883a 	mov	r4,r16
81119348:	11265280 	call	81126528 <__floatsidf>
8111934c:	d9800f17 	ldw	r6,60(sp)
81119350:	d9c01017 	ldw	r7,64(sp)
81119354:	1009883a 	mov	r4,r2
81119358:	180b883a 	mov	r5,r3
8111935c:	11105240 	call	81110524 <__muldf3>
81119360:	000d883a 	mov	r6,zero
81119364:	01d00734 	movhi	r7,16412
81119368:	1009883a 	mov	r4,r2
8111936c:	180b883a 	mov	r5,r3
81119370:	11247a80 	call	811247a8 <__adddf3>
81119374:	1021883a 	mov	r16,r2
81119378:	d8800617 	ldw	r2,24(sp)
8111937c:	047f3034 	movhi	r17,64704
81119380:	1c63883a 	add	r17,r3,r17
81119384:	10031826 	beq	r2,zero,81119fe8 <_dtoa_r+0x1128>
81119388:	d8c00517 	ldw	r3,20(sp)
8111938c:	db000617 	ldw	r12,24(sp)
81119390:	d8c01315 	stw	r3,76(sp)
81119394:	d9000b17 	ldw	r4,44(sp)
81119398:	20038f26 	beq	r4,zero,8111a1d8 <_dtoa_r+0x1318>
8111939c:	60bfffc4 	addi	r2,r12,-1
811193a0:	100490fa 	slli	r2,r2,3
811193a4:	00e04534 	movhi	r3,33044
811193a8:	18f6dc04 	addi	r3,r3,-9360
811193ac:	1885883a 	add	r2,r3,r2
811193b0:	11800017 	ldw	r6,0(r2)
811193b4:	11c00117 	ldw	r7,4(r2)
811193b8:	d8800717 	ldw	r2,28(sp)
811193bc:	0009883a 	mov	r4,zero
811193c0:	014ff834 	movhi	r5,16352
811193c4:	db001615 	stw	r12,88(sp)
811193c8:	15c00044 	addi	r23,r2,1
811193cc:	112505c0 	call	8112505c <__divdf3>
811193d0:	800d883a 	mov	r6,r16
811193d4:	880f883a 	mov	r7,r17
811193d8:	1009883a 	mov	r4,r2
811193dc:	180b883a 	mov	r5,r3
811193e0:	1125ba40 	call	81125ba4 <__subdf3>
811193e4:	d9401017 	ldw	r5,64(sp)
811193e8:	d9000f17 	ldw	r4,60(sp)
811193ec:	102b883a 	mov	r21,r2
811193f0:	d8c01215 	stw	r3,72(sp)
811193f4:	11264a80 	call	811264a8 <__fixdfsi>
811193f8:	1009883a 	mov	r4,r2
811193fc:	1029883a 	mov	r20,r2
81119400:	11265280 	call	81126528 <__floatsidf>
81119404:	d9000f17 	ldw	r4,60(sp)
81119408:	d9401017 	ldw	r5,64(sp)
8111940c:	100d883a 	mov	r6,r2
81119410:	180f883a 	mov	r7,r3
81119414:	1125ba40 	call	81125ba4 <__subdf3>
81119418:	1823883a 	mov	r17,r3
8111941c:	d8c00717 	ldw	r3,28(sp)
81119420:	d9401217 	ldw	r5,72(sp)
81119424:	a2000c04 	addi	r8,r20,48
81119428:	1021883a 	mov	r16,r2
8111942c:	1a000005 	stb	r8,0(r3)
81119430:	800d883a 	mov	r6,r16
81119434:	880f883a 	mov	r7,r17
81119438:	a809883a 	mov	r4,r21
8111943c:	4029883a 	mov	r20,r8
81119440:	11259d40 	call	811259d4 <__gedf2>
81119444:	00841d16 	blt	zero,r2,8111a4bc <_dtoa_r+0x15fc>
81119448:	800d883a 	mov	r6,r16
8111944c:	880f883a 	mov	r7,r17
81119450:	0009883a 	mov	r4,zero
81119454:	014ffc34 	movhi	r5,16368
81119458:	1125ba40 	call	81125ba4 <__subdf3>
8111945c:	d9401217 	ldw	r5,72(sp)
81119460:	100d883a 	mov	r6,r2
81119464:	180f883a 	mov	r7,r3
81119468:	a809883a 	mov	r4,r21
8111946c:	11259d40 	call	811259d4 <__gedf2>
81119470:	db001617 	ldw	r12,88(sp)
81119474:	00840e16 	blt	zero,r2,8111a4b0 <_dtoa_r+0x15f0>
81119478:	00800044 	movi	r2,1
8111947c:	13006b0e 	bge	r2,r12,8111962c <_dtoa_r+0x76c>
81119480:	d9000717 	ldw	r4,28(sp)
81119484:	dd800f15 	stw	r22,60(sp)
81119488:	dcc01015 	stw	r19,64(sp)
8111948c:	2319883a 	add	r12,r4,r12
81119490:	dcc01217 	ldw	r19,72(sp)
81119494:	602d883a 	mov	r22,r12
81119498:	dc801215 	stw	r18,72(sp)
8111949c:	b825883a 	mov	r18,r23
811194a0:	00000906 	br	811194c8 <_dtoa_r+0x608>
811194a4:	1125ba40 	call	81125ba4 <__subdf3>
811194a8:	a80d883a 	mov	r6,r21
811194ac:	980f883a 	mov	r7,r19
811194b0:	1009883a 	mov	r4,r2
811194b4:	180b883a 	mov	r5,r3
811194b8:	1125ab00 	call	81125ab0 <__ledf2>
811194bc:	1003e816 	blt	r2,zero,8111a460 <_dtoa_r+0x15a0>
811194c0:	b825883a 	mov	r18,r23
811194c4:	bd83e926 	beq	r23,r22,8111a46c <_dtoa_r+0x15ac>
811194c8:	a809883a 	mov	r4,r21
811194cc:	980b883a 	mov	r5,r19
811194d0:	000d883a 	mov	r6,zero
811194d4:	01d00934 	movhi	r7,16420
811194d8:	11105240 	call	81110524 <__muldf3>
811194dc:	000d883a 	mov	r6,zero
811194e0:	01d00934 	movhi	r7,16420
811194e4:	8009883a 	mov	r4,r16
811194e8:	880b883a 	mov	r5,r17
811194ec:	102b883a 	mov	r21,r2
811194f0:	1827883a 	mov	r19,r3
811194f4:	11105240 	call	81110524 <__muldf3>
811194f8:	180b883a 	mov	r5,r3
811194fc:	1009883a 	mov	r4,r2
81119500:	1821883a 	mov	r16,r3
81119504:	1023883a 	mov	r17,r2
81119508:	11264a80 	call	811264a8 <__fixdfsi>
8111950c:	1009883a 	mov	r4,r2
81119510:	1029883a 	mov	r20,r2
81119514:	11265280 	call	81126528 <__floatsidf>
81119518:	8809883a 	mov	r4,r17
8111951c:	800b883a 	mov	r5,r16
81119520:	100d883a 	mov	r6,r2
81119524:	180f883a 	mov	r7,r3
81119528:	1125ba40 	call	81125ba4 <__subdf3>
8111952c:	a5000c04 	addi	r20,r20,48
81119530:	a80d883a 	mov	r6,r21
81119534:	980f883a 	mov	r7,r19
81119538:	1009883a 	mov	r4,r2
8111953c:	180b883a 	mov	r5,r3
81119540:	95000005 	stb	r20,0(r18)
81119544:	1021883a 	mov	r16,r2
81119548:	1823883a 	mov	r17,r3
8111954c:	1125ab00 	call	81125ab0 <__ledf2>
81119550:	bdc00044 	addi	r23,r23,1
81119554:	800d883a 	mov	r6,r16
81119558:	880f883a 	mov	r7,r17
8111955c:	0009883a 	mov	r4,zero
81119560:	014ffc34 	movhi	r5,16368
81119564:	103fcf0e 	bge	r2,zero,811194a4 <__reset+0xfb0f94a4>
81119568:	d8c01317 	ldw	r3,76(sp)
8111956c:	d8c00515 	stw	r3,20(sp)
81119570:	d9400917 	ldw	r5,36(sp)
81119574:	e009883a 	mov	r4,fp
81119578:	111c0880 	call	8111c088 <_Bfree>
8111957c:	d9000517 	ldw	r4,20(sp)
81119580:	d9802317 	ldw	r6,140(sp)
81119584:	d9c02517 	ldw	r7,148(sp)
81119588:	b8000005 	stb	zero,0(r23)
8111958c:	20800044 	addi	r2,r4,1
81119590:	30800015 	stw	r2,0(r6)
81119594:	3802aa26 	beq	r7,zero,8111a040 <_dtoa_r+0x1180>
81119598:	3dc00015 	stw	r23,0(r7)
8111959c:	d8800717 	ldw	r2,28(sp)
811195a0:	003e7906 	br	81118f88 <__reset+0xfb0f8f88>
811195a4:	00800434 	movhi	r2,16
811195a8:	10bfffc4 	addi	r2,r2,-1
811195ac:	88a2703a 	and	r17,r17,r2
811195b0:	883e851e 	bne	r17,zero,81118fc8 <__reset+0xfb0f8fc8>
811195b4:	00a04534 	movhi	r2,33044
811195b8:	10b6be04 	addi	r2,r2,-9480
811195bc:	003e8406 	br	81118fd0 <__reset+0xfb0f8fd0>
811195c0:	10c00204 	addi	r3,r2,8
811195c4:	003e8706 	br	81118fe4 <__reset+0xfb0f8fe4>
811195c8:	01400434 	movhi	r5,16
811195cc:	297fffc4 	addi	r5,r5,-1
811195d0:	994a703a 	and	r5,r19,r5
811195d4:	9009883a 	mov	r4,r18
811195d8:	843f0044 	addi	r16,r16,-1023
811195dc:	294ffc34 	orhi	r5,r5,16368
811195e0:	dd800217 	ldw	r22,8(sp)
811195e4:	d8001115 	stw	zero,68(sp)
811195e8:	003ea506 	br	81119080 <__reset+0xfb0f9080>
811195ec:	00a04534 	movhi	r2,33044
811195f0:	10b6a304 	addi	r2,r2,-9588
811195f4:	003e6406 	br	81118f88 <__reset+0xfb0f8f88>
811195f8:	e0001115 	stw	zero,68(fp)
811195fc:	000b883a 	mov	r5,zero
81119600:	e009883a 	mov	r4,fp
81119604:	111bfd80 	call	8111bfd8 <_Balloc>
81119608:	01bfffc4 	movi	r6,-1
8111960c:	01c00044 	movi	r7,1
81119610:	d8800715 	stw	r2,28(sp)
81119614:	d9800c15 	stw	r6,48(sp)
81119618:	e0801015 	stw	r2,64(fp)
8111961c:	d8000315 	stw	zero,12(sp)
81119620:	d9c00b15 	stw	r7,44(sp)
81119624:	d9800615 	stw	r6,24(sp)
81119628:	d8002215 	stw	zero,136(sp)
8111962c:	d8800117 	ldw	r2,4(sp)
81119630:	10008916 	blt	r2,zero,81119858 <_dtoa_r+0x998>
81119634:	d9000517 	ldw	r4,20(sp)
81119638:	00c00384 	movi	r3,14
8111963c:	19008616 	blt	r3,r4,81119858 <_dtoa_r+0x998>
81119640:	200490fa 	slli	r2,r4,3
81119644:	00e04534 	movhi	r3,33044
81119648:	d9802217 	ldw	r6,136(sp)
8111964c:	18f6dc04 	addi	r3,r3,-9360
81119650:	1885883a 	add	r2,r3,r2
81119654:	14000017 	ldw	r16,0(r2)
81119658:	14400117 	ldw	r17,4(r2)
8111965c:	30016316 	blt	r6,zero,81119bec <_dtoa_r+0xd2c>
81119660:	800d883a 	mov	r6,r16
81119664:	880f883a 	mov	r7,r17
81119668:	9009883a 	mov	r4,r18
8111966c:	980b883a 	mov	r5,r19
81119670:	112505c0 	call	8112505c <__divdf3>
81119674:	180b883a 	mov	r5,r3
81119678:	1009883a 	mov	r4,r2
8111967c:	11264a80 	call	811264a8 <__fixdfsi>
81119680:	1009883a 	mov	r4,r2
81119684:	102b883a 	mov	r21,r2
81119688:	11265280 	call	81126528 <__floatsidf>
8111968c:	800d883a 	mov	r6,r16
81119690:	880f883a 	mov	r7,r17
81119694:	1009883a 	mov	r4,r2
81119698:	180b883a 	mov	r5,r3
8111969c:	11105240 	call	81110524 <__muldf3>
811196a0:	100d883a 	mov	r6,r2
811196a4:	180f883a 	mov	r7,r3
811196a8:	9009883a 	mov	r4,r18
811196ac:	980b883a 	mov	r5,r19
811196b0:	1125ba40 	call	81125ba4 <__subdf3>
811196b4:	d9c00717 	ldw	r7,28(sp)
811196b8:	1009883a 	mov	r4,r2
811196bc:	a8800c04 	addi	r2,r21,48
811196c0:	38800005 	stb	r2,0(r7)
811196c4:	3dc00044 	addi	r23,r7,1
811196c8:	d9c00617 	ldw	r7,24(sp)
811196cc:	01800044 	movi	r6,1
811196d0:	180b883a 	mov	r5,r3
811196d4:	2005883a 	mov	r2,r4
811196d8:	39803826 	beq	r7,r6,811197bc <_dtoa_r+0x8fc>
811196dc:	000d883a 	mov	r6,zero
811196e0:	01d00934 	movhi	r7,16420
811196e4:	11105240 	call	81110524 <__muldf3>
811196e8:	000d883a 	mov	r6,zero
811196ec:	000f883a 	mov	r7,zero
811196f0:	1009883a 	mov	r4,r2
811196f4:	180b883a 	mov	r5,r3
811196f8:	1025883a 	mov	r18,r2
811196fc:	1827883a 	mov	r19,r3
81119700:	112594c0 	call	8112594c <__eqdf2>
81119704:	103f9a26 	beq	r2,zero,81119570 <__reset+0xfb0f9570>
81119708:	d9c00617 	ldw	r7,24(sp)
8111970c:	d8c00717 	ldw	r3,28(sp)
81119710:	b829883a 	mov	r20,r23
81119714:	38bfffc4 	addi	r2,r7,-1
81119718:	18ad883a 	add	r22,r3,r2
8111971c:	00000a06 	br	81119748 <_dtoa_r+0x888>
81119720:	11105240 	call	81110524 <__muldf3>
81119724:	000d883a 	mov	r6,zero
81119728:	000f883a 	mov	r7,zero
8111972c:	1009883a 	mov	r4,r2
81119730:	180b883a 	mov	r5,r3
81119734:	1025883a 	mov	r18,r2
81119738:	1827883a 	mov	r19,r3
8111973c:	b829883a 	mov	r20,r23
81119740:	112594c0 	call	8112594c <__eqdf2>
81119744:	103f8a26 	beq	r2,zero,81119570 <__reset+0xfb0f9570>
81119748:	800d883a 	mov	r6,r16
8111974c:	880f883a 	mov	r7,r17
81119750:	9009883a 	mov	r4,r18
81119754:	980b883a 	mov	r5,r19
81119758:	112505c0 	call	8112505c <__divdf3>
8111975c:	180b883a 	mov	r5,r3
81119760:	1009883a 	mov	r4,r2
81119764:	11264a80 	call	811264a8 <__fixdfsi>
81119768:	1009883a 	mov	r4,r2
8111976c:	102b883a 	mov	r21,r2
81119770:	11265280 	call	81126528 <__floatsidf>
81119774:	800d883a 	mov	r6,r16
81119778:	880f883a 	mov	r7,r17
8111977c:	1009883a 	mov	r4,r2
81119780:	180b883a 	mov	r5,r3
81119784:	11105240 	call	81110524 <__muldf3>
81119788:	100d883a 	mov	r6,r2
8111978c:	180f883a 	mov	r7,r3
81119790:	9009883a 	mov	r4,r18
81119794:	980b883a 	mov	r5,r19
81119798:	1125ba40 	call	81125ba4 <__subdf3>
8111979c:	aa000c04 	addi	r8,r21,48
811197a0:	a2000005 	stb	r8,0(r20)
811197a4:	000d883a 	mov	r6,zero
811197a8:	01d00934 	movhi	r7,16420
811197ac:	1009883a 	mov	r4,r2
811197b0:	180b883a 	mov	r5,r3
811197b4:	a5c00044 	addi	r23,r20,1
811197b8:	b53fd91e 	bne	r22,r20,81119720 <__reset+0xfb0f9720>
811197bc:	100d883a 	mov	r6,r2
811197c0:	180f883a 	mov	r7,r3
811197c4:	1009883a 	mov	r4,r2
811197c8:	180b883a 	mov	r5,r3
811197cc:	11247a80 	call	811247a8 <__adddf3>
811197d0:	100d883a 	mov	r6,r2
811197d4:	180f883a 	mov	r7,r3
811197d8:	8009883a 	mov	r4,r16
811197dc:	880b883a 	mov	r5,r17
811197e0:	1027883a 	mov	r19,r2
811197e4:	1825883a 	mov	r18,r3
811197e8:	1125ab00 	call	81125ab0 <__ledf2>
811197ec:	10000816 	blt	r2,zero,81119810 <_dtoa_r+0x950>
811197f0:	980d883a 	mov	r6,r19
811197f4:	900f883a 	mov	r7,r18
811197f8:	8009883a 	mov	r4,r16
811197fc:	880b883a 	mov	r5,r17
81119800:	112594c0 	call	8112594c <__eqdf2>
81119804:	103f5a1e 	bne	r2,zero,81119570 <__reset+0xfb0f9570>
81119808:	ad40004c 	andi	r21,r21,1
8111980c:	a83f5826 	beq	r21,zero,81119570 <__reset+0xfb0f9570>
81119810:	bd3fffc3 	ldbu	r20,-1(r23)
81119814:	b8bfffc4 	addi	r2,r23,-1
81119818:	1007883a 	mov	r3,r2
8111981c:	01400e44 	movi	r5,57
81119820:	d9800717 	ldw	r6,28(sp)
81119824:	00000506 	br	8111983c <_dtoa_r+0x97c>
81119828:	18ffffc4 	addi	r3,r3,-1
8111982c:	11824726 	beq	r2,r6,8111a14c <_dtoa_r+0x128c>
81119830:	1d000003 	ldbu	r20,0(r3)
81119834:	102f883a 	mov	r23,r2
81119838:	10bfffc4 	addi	r2,r2,-1
8111983c:	a1003fcc 	andi	r4,r20,255
81119840:	2100201c 	xori	r4,r4,128
81119844:	213fe004 	addi	r4,r4,-128
81119848:	217ff726 	beq	r4,r5,81119828 <__reset+0xfb0f9828>
8111984c:	a2000044 	addi	r8,r20,1
81119850:	12000005 	stb	r8,0(r2)
81119854:	003f4606 	br	81119570 <__reset+0xfb0f9570>
81119858:	d9000b17 	ldw	r4,44(sp)
8111985c:	2000c826 	beq	r4,zero,81119b80 <_dtoa_r+0xcc0>
81119860:	d9800317 	ldw	r6,12(sp)
81119864:	00c00044 	movi	r3,1
81119868:	1980f90e 	bge	r3,r6,81119c50 <_dtoa_r+0xd90>
8111986c:	d8800617 	ldw	r2,24(sp)
81119870:	d8c00a17 	ldw	r3,40(sp)
81119874:	157fffc4 	addi	r21,r2,-1
81119878:	1d41f316 	blt	r3,r21,8111a048 <_dtoa_r+0x1188>
8111987c:	1d6bc83a 	sub	r21,r3,r21
81119880:	d9c00617 	ldw	r7,24(sp)
81119884:	3802aa16 	blt	r7,zero,8111a330 <_dtoa_r+0x1470>
81119888:	dd000817 	ldw	r20,32(sp)
8111988c:	d8800617 	ldw	r2,24(sp)
81119890:	d8c00817 	ldw	r3,32(sp)
81119894:	01400044 	movi	r5,1
81119898:	e009883a 	mov	r4,fp
8111989c:	1887883a 	add	r3,r3,r2
811198a0:	d8c00815 	stw	r3,32(sp)
811198a4:	b0ad883a 	add	r22,r22,r2
811198a8:	111c3fc0 	call	8111c3fc <__i2b>
811198ac:	1023883a 	mov	r17,r2
811198b0:	a0000826 	beq	r20,zero,811198d4 <_dtoa_r+0xa14>
811198b4:	0580070e 	bge	zero,r22,811198d4 <_dtoa_r+0xa14>
811198b8:	a005883a 	mov	r2,r20
811198bc:	b500b916 	blt	r22,r20,81119ba4 <_dtoa_r+0xce4>
811198c0:	d9000817 	ldw	r4,32(sp)
811198c4:	a0a9c83a 	sub	r20,r20,r2
811198c8:	b0adc83a 	sub	r22,r22,r2
811198cc:	2089c83a 	sub	r4,r4,r2
811198d0:	d9000815 	stw	r4,32(sp)
811198d4:	d9800a17 	ldw	r6,40(sp)
811198d8:	0181810e 	bge	zero,r6,81119ee0 <_dtoa_r+0x1020>
811198dc:	d9c00b17 	ldw	r7,44(sp)
811198e0:	3800b326 	beq	r7,zero,81119bb0 <_dtoa_r+0xcf0>
811198e4:	a800b226 	beq	r21,zero,81119bb0 <_dtoa_r+0xcf0>
811198e8:	880b883a 	mov	r5,r17
811198ec:	a80d883a 	mov	r6,r21
811198f0:	e009883a 	mov	r4,fp
811198f4:	111c6400 	call	8111c640 <__pow5mult>
811198f8:	d9800917 	ldw	r6,36(sp)
811198fc:	100b883a 	mov	r5,r2
81119900:	e009883a 	mov	r4,fp
81119904:	1023883a 	mov	r17,r2
81119908:	111c4400 	call	8111c440 <__multiply>
8111990c:	1021883a 	mov	r16,r2
81119910:	d8800a17 	ldw	r2,40(sp)
81119914:	d9400917 	ldw	r5,36(sp)
81119918:	e009883a 	mov	r4,fp
8111991c:	1545c83a 	sub	r2,r2,r21
81119920:	d8800a15 	stw	r2,40(sp)
81119924:	111c0880 	call	8111c088 <_Bfree>
81119928:	d8c00a17 	ldw	r3,40(sp)
8111992c:	18009f1e 	bne	r3,zero,81119bac <_dtoa_r+0xcec>
81119930:	05c00044 	movi	r23,1
81119934:	e009883a 	mov	r4,fp
81119938:	b80b883a 	mov	r5,r23
8111993c:	111c3fc0 	call	8111c3fc <__i2b>
81119940:	d9000d17 	ldw	r4,52(sp)
81119944:	102b883a 	mov	r21,r2
81119948:	2000ce26 	beq	r4,zero,81119c84 <_dtoa_r+0xdc4>
8111994c:	200d883a 	mov	r6,r4
81119950:	100b883a 	mov	r5,r2
81119954:	e009883a 	mov	r4,fp
81119958:	111c6400 	call	8111c640 <__pow5mult>
8111995c:	d9800317 	ldw	r6,12(sp)
81119960:	102b883a 	mov	r21,r2
81119964:	b981810e 	bge	r23,r6,81119f6c <_dtoa_r+0x10ac>
81119968:	0027883a 	mov	r19,zero
8111996c:	a8800417 	ldw	r2,16(r21)
81119970:	05c00804 	movi	r23,32
81119974:	10800104 	addi	r2,r2,4
81119978:	1085883a 	add	r2,r2,r2
8111997c:	1085883a 	add	r2,r2,r2
81119980:	a885883a 	add	r2,r21,r2
81119984:	11000017 	ldw	r4,0(r2)
81119988:	111c2e40 	call	8111c2e4 <__hi0bits>
8111998c:	b885c83a 	sub	r2,r23,r2
81119990:	1585883a 	add	r2,r2,r22
81119994:	108007cc 	andi	r2,r2,31
81119998:	1000b326 	beq	r2,zero,81119c68 <_dtoa_r+0xda8>
8111999c:	00c00804 	movi	r3,32
811199a0:	1887c83a 	sub	r3,r3,r2
811199a4:	01000104 	movi	r4,4
811199a8:	20c2cd0e 	bge	r4,r3,8111a4e0 <_dtoa_r+0x1620>
811199ac:	00c00704 	movi	r3,28
811199b0:	1885c83a 	sub	r2,r3,r2
811199b4:	d8c00817 	ldw	r3,32(sp)
811199b8:	a0a9883a 	add	r20,r20,r2
811199bc:	b0ad883a 	add	r22,r22,r2
811199c0:	1887883a 	add	r3,r3,r2
811199c4:	d8c00815 	stw	r3,32(sp)
811199c8:	d9800817 	ldw	r6,32(sp)
811199cc:	0180040e 	bge	zero,r6,811199e0 <_dtoa_r+0xb20>
811199d0:	800b883a 	mov	r5,r16
811199d4:	e009883a 	mov	r4,fp
811199d8:	111c7880 	call	8111c788 <__lshift>
811199dc:	1021883a 	mov	r16,r2
811199e0:	0580050e 	bge	zero,r22,811199f8 <_dtoa_r+0xb38>
811199e4:	a80b883a 	mov	r5,r21
811199e8:	b00d883a 	mov	r6,r22
811199ec:	e009883a 	mov	r4,fp
811199f0:	111c7880 	call	8111c788 <__lshift>
811199f4:	102b883a 	mov	r21,r2
811199f8:	d9c00e17 	ldw	r7,56(sp)
811199fc:	3801211e 	bne	r7,zero,81119e84 <_dtoa_r+0xfc4>
81119a00:	d9800617 	ldw	r6,24(sp)
81119a04:	0181380e 	bge	zero,r6,81119ee8 <_dtoa_r+0x1028>
81119a08:	d8c00b17 	ldw	r3,44(sp)
81119a0c:	1800ab1e 	bne	r3,zero,81119cbc <_dtoa_r+0xdfc>
81119a10:	dc800717 	ldw	r18,28(sp)
81119a14:	dcc00617 	ldw	r19,24(sp)
81119a18:	9029883a 	mov	r20,r18
81119a1c:	00000206 	br	81119a28 <_dtoa_r+0xb68>
81119a20:	111c0b00 	call	8111c0b0 <__multadd>
81119a24:	1021883a 	mov	r16,r2
81119a28:	a80b883a 	mov	r5,r21
81119a2c:	8009883a 	mov	r4,r16
81119a30:	1118cb80 	call	81118cb8 <quorem>
81119a34:	10800c04 	addi	r2,r2,48
81119a38:	90800005 	stb	r2,0(r18)
81119a3c:	94800044 	addi	r18,r18,1
81119a40:	9507c83a 	sub	r3,r18,r20
81119a44:	000f883a 	mov	r7,zero
81119a48:	01800284 	movi	r6,10
81119a4c:	800b883a 	mov	r5,r16
81119a50:	e009883a 	mov	r4,fp
81119a54:	1cfff216 	blt	r3,r19,81119a20 <__reset+0xfb0f9a20>
81119a58:	1011883a 	mov	r8,r2
81119a5c:	d8800617 	ldw	r2,24(sp)
81119a60:	0082370e 	bge	zero,r2,8111a340 <_dtoa_r+0x1480>
81119a64:	d9000717 	ldw	r4,28(sp)
81119a68:	0025883a 	mov	r18,zero
81119a6c:	20af883a 	add	r23,r4,r2
81119a70:	01800044 	movi	r6,1
81119a74:	800b883a 	mov	r5,r16
81119a78:	e009883a 	mov	r4,fp
81119a7c:	da001715 	stw	r8,92(sp)
81119a80:	111c7880 	call	8111c788 <__lshift>
81119a84:	a80b883a 	mov	r5,r21
81119a88:	1009883a 	mov	r4,r2
81119a8c:	d8800915 	stw	r2,36(sp)
81119a90:	111c8d80 	call	8111c8d8 <__mcmp>
81119a94:	da001717 	ldw	r8,92(sp)
81119a98:	0081800e 	bge	zero,r2,8111a09c <_dtoa_r+0x11dc>
81119a9c:	b93fffc3 	ldbu	r4,-1(r23)
81119aa0:	b8bfffc4 	addi	r2,r23,-1
81119aa4:	1007883a 	mov	r3,r2
81119aa8:	01800e44 	movi	r6,57
81119aac:	d9c00717 	ldw	r7,28(sp)
81119ab0:	00000506 	br	81119ac8 <_dtoa_r+0xc08>
81119ab4:	18ffffc4 	addi	r3,r3,-1
81119ab8:	11c12326 	beq	r2,r7,81119f48 <_dtoa_r+0x1088>
81119abc:	19000003 	ldbu	r4,0(r3)
81119ac0:	102f883a 	mov	r23,r2
81119ac4:	10bfffc4 	addi	r2,r2,-1
81119ac8:	21403fcc 	andi	r5,r4,255
81119acc:	2940201c 	xori	r5,r5,128
81119ad0:	297fe004 	addi	r5,r5,-128
81119ad4:	29bff726 	beq	r5,r6,81119ab4 <__reset+0xfb0f9ab4>
81119ad8:	21000044 	addi	r4,r4,1
81119adc:	11000005 	stb	r4,0(r2)
81119ae0:	a80b883a 	mov	r5,r21
81119ae4:	e009883a 	mov	r4,fp
81119ae8:	111c0880 	call	8111c088 <_Bfree>
81119aec:	883ea026 	beq	r17,zero,81119570 <__reset+0xfb0f9570>
81119af0:	90000426 	beq	r18,zero,81119b04 <_dtoa_r+0xc44>
81119af4:	94400326 	beq	r18,r17,81119b04 <_dtoa_r+0xc44>
81119af8:	900b883a 	mov	r5,r18
81119afc:	e009883a 	mov	r4,fp
81119b00:	111c0880 	call	8111c088 <_Bfree>
81119b04:	880b883a 	mov	r5,r17
81119b08:	e009883a 	mov	r4,fp
81119b0c:	111c0880 	call	8111c088 <_Bfree>
81119b10:	003e9706 	br	81119570 <__reset+0xfb0f9570>
81119b14:	01800044 	movi	r6,1
81119b18:	d9800e15 	stw	r6,56(sp)
81119b1c:	003d9606 	br	81119178 <__reset+0xfb0f9178>
81119b20:	d8800817 	ldw	r2,32(sp)
81119b24:	d8c00517 	ldw	r3,20(sp)
81119b28:	d8000d15 	stw	zero,52(sp)
81119b2c:	10c5c83a 	sub	r2,r2,r3
81119b30:	00c9c83a 	sub	r4,zero,r3
81119b34:	d8800815 	stw	r2,32(sp)
81119b38:	d9000a15 	stw	r4,40(sp)
81119b3c:	003d9706 	br	8111919c <__reset+0xfb0f919c>
81119b40:	05adc83a 	sub	r22,zero,r22
81119b44:	dd800815 	stw	r22,32(sp)
81119b48:	002d883a 	mov	r22,zero
81119b4c:	003d8e06 	br	81119188 <__reset+0xfb0f9188>
81119b50:	d9000517 	ldw	r4,20(sp)
81119b54:	11265280 	call	81126528 <__floatsidf>
81119b58:	100d883a 	mov	r6,r2
81119b5c:	180f883a 	mov	r7,r3
81119b60:	a009883a 	mov	r4,r20
81119b64:	880b883a 	mov	r5,r17
81119b68:	112594c0 	call	8112594c <__eqdf2>
81119b6c:	103d7126 	beq	r2,zero,81119134 <__reset+0xfb0f9134>
81119b70:	d9c00517 	ldw	r7,20(sp)
81119b74:	39ffffc4 	addi	r7,r7,-1
81119b78:	d9c00515 	stw	r7,20(sp)
81119b7c:	003d6d06 	br	81119134 <__reset+0xfb0f9134>
81119b80:	dd400a17 	ldw	r21,40(sp)
81119b84:	dd000817 	ldw	r20,32(sp)
81119b88:	0023883a 	mov	r17,zero
81119b8c:	003f4806 	br	811198b0 <__reset+0xfb0f98b0>
81119b90:	10e3c83a 	sub	r17,r2,r3
81119b94:	9448983a 	sll	r4,r18,r17
81119b98:	003d3206 	br	81119064 <__reset+0xfb0f9064>
81119b9c:	d8000e15 	stw	zero,56(sp)
81119ba0:	003d7506 	br	81119178 <__reset+0xfb0f9178>
81119ba4:	b005883a 	mov	r2,r22
81119ba8:	003f4506 	br	811198c0 <__reset+0xfb0f98c0>
81119bac:	dc000915 	stw	r16,36(sp)
81119bb0:	d9800a17 	ldw	r6,40(sp)
81119bb4:	d9400917 	ldw	r5,36(sp)
81119bb8:	e009883a 	mov	r4,fp
81119bbc:	111c6400 	call	8111c640 <__pow5mult>
81119bc0:	1021883a 	mov	r16,r2
81119bc4:	003f5a06 	br	81119930 <__reset+0xfb0f9930>
81119bc8:	01c00044 	movi	r7,1
81119bcc:	d9c00b15 	stw	r7,44(sp)
81119bd0:	d8802217 	ldw	r2,136(sp)
81119bd4:	0081280e 	bge	zero,r2,8111a078 <_dtoa_r+0x11b8>
81119bd8:	100d883a 	mov	r6,r2
81119bdc:	1021883a 	mov	r16,r2
81119be0:	d8800c15 	stw	r2,48(sp)
81119be4:	d8800615 	stw	r2,24(sp)
81119be8:	003d8806 	br	8111920c <__reset+0xfb0f920c>
81119bec:	d8800617 	ldw	r2,24(sp)
81119bf0:	00be9b16 	blt	zero,r2,81119660 <__reset+0xfb0f9660>
81119bf4:	10010f1e 	bne	r2,zero,8111a034 <_dtoa_r+0x1174>
81119bf8:	880b883a 	mov	r5,r17
81119bfc:	000d883a 	mov	r6,zero
81119c00:	01d00534 	movhi	r7,16404
81119c04:	8009883a 	mov	r4,r16
81119c08:	11105240 	call	81110524 <__muldf3>
81119c0c:	900d883a 	mov	r6,r18
81119c10:	980f883a 	mov	r7,r19
81119c14:	1009883a 	mov	r4,r2
81119c18:	180b883a 	mov	r5,r3
81119c1c:	11259d40 	call	811259d4 <__gedf2>
81119c20:	002b883a 	mov	r21,zero
81119c24:	0023883a 	mov	r17,zero
81119c28:	1000bf16 	blt	r2,zero,81119f28 <_dtoa_r+0x1068>
81119c2c:	d9802217 	ldw	r6,136(sp)
81119c30:	ddc00717 	ldw	r23,28(sp)
81119c34:	018c303a 	nor	r6,zero,r6
81119c38:	d9800515 	stw	r6,20(sp)
81119c3c:	a80b883a 	mov	r5,r21
81119c40:	e009883a 	mov	r4,fp
81119c44:	111c0880 	call	8111c088 <_Bfree>
81119c48:	883e4926 	beq	r17,zero,81119570 <__reset+0xfb0f9570>
81119c4c:	003fad06 	br	81119b04 <__reset+0xfb0f9b04>
81119c50:	d9c01117 	ldw	r7,68(sp)
81119c54:	3801bc26 	beq	r7,zero,8111a348 <_dtoa_r+0x1488>
81119c58:	10810cc4 	addi	r2,r2,1075
81119c5c:	dd400a17 	ldw	r21,40(sp)
81119c60:	dd000817 	ldw	r20,32(sp)
81119c64:	003f0a06 	br	81119890 <__reset+0xfb0f9890>
81119c68:	00800704 	movi	r2,28
81119c6c:	d9000817 	ldw	r4,32(sp)
81119c70:	a0a9883a 	add	r20,r20,r2
81119c74:	b0ad883a 	add	r22,r22,r2
81119c78:	2089883a 	add	r4,r4,r2
81119c7c:	d9000815 	stw	r4,32(sp)
81119c80:	003f5106 	br	811199c8 <__reset+0xfb0f99c8>
81119c84:	d8c00317 	ldw	r3,12(sp)
81119c88:	b8c1fc0e 	bge	r23,r3,8111a47c <_dtoa_r+0x15bc>
81119c8c:	0027883a 	mov	r19,zero
81119c90:	b805883a 	mov	r2,r23
81119c94:	003f3e06 	br	81119990 <__reset+0xfb0f9990>
81119c98:	880b883a 	mov	r5,r17
81119c9c:	e009883a 	mov	r4,fp
81119ca0:	000f883a 	mov	r7,zero
81119ca4:	01800284 	movi	r6,10
81119ca8:	111c0b00 	call	8111c0b0 <__multadd>
81119cac:	d9000c17 	ldw	r4,48(sp)
81119cb0:	1023883a 	mov	r17,r2
81119cb4:	0102040e 	bge	zero,r4,8111a4c8 <_dtoa_r+0x1608>
81119cb8:	d9000615 	stw	r4,24(sp)
81119cbc:	0500050e 	bge	zero,r20,81119cd4 <_dtoa_r+0xe14>
81119cc0:	880b883a 	mov	r5,r17
81119cc4:	a00d883a 	mov	r6,r20
81119cc8:	e009883a 	mov	r4,fp
81119ccc:	111c7880 	call	8111c788 <__lshift>
81119cd0:	1023883a 	mov	r17,r2
81119cd4:	9801241e 	bne	r19,zero,8111a168 <_dtoa_r+0x12a8>
81119cd8:	8829883a 	mov	r20,r17
81119cdc:	d9000617 	ldw	r4,24(sp)
81119ce0:	dcc00717 	ldw	r19,28(sp)
81119ce4:	9480004c 	andi	r18,r18,1
81119ce8:	20bfffc4 	addi	r2,r4,-1
81119cec:	9885883a 	add	r2,r19,r2
81119cf0:	d8800415 	stw	r2,16(sp)
81119cf4:	dc800615 	stw	r18,24(sp)
81119cf8:	a80b883a 	mov	r5,r21
81119cfc:	8009883a 	mov	r4,r16
81119d00:	1118cb80 	call	81118cb8 <quorem>
81119d04:	880b883a 	mov	r5,r17
81119d08:	8009883a 	mov	r4,r16
81119d0c:	102f883a 	mov	r23,r2
81119d10:	111c8d80 	call	8111c8d8 <__mcmp>
81119d14:	a80b883a 	mov	r5,r21
81119d18:	a00d883a 	mov	r6,r20
81119d1c:	e009883a 	mov	r4,fp
81119d20:	102d883a 	mov	r22,r2
81119d24:	111c9380 	call	8111c938 <__mdiff>
81119d28:	1007883a 	mov	r3,r2
81119d2c:	10800317 	ldw	r2,12(r2)
81119d30:	bc800c04 	addi	r18,r23,48
81119d34:	180b883a 	mov	r5,r3
81119d38:	10004e1e 	bne	r2,zero,81119e74 <_dtoa_r+0xfb4>
81119d3c:	8009883a 	mov	r4,r16
81119d40:	d8c01615 	stw	r3,88(sp)
81119d44:	111c8d80 	call	8111c8d8 <__mcmp>
81119d48:	d8c01617 	ldw	r3,88(sp)
81119d4c:	e009883a 	mov	r4,fp
81119d50:	d8801615 	stw	r2,88(sp)
81119d54:	180b883a 	mov	r5,r3
81119d58:	111c0880 	call	8111c088 <_Bfree>
81119d5c:	d8801617 	ldw	r2,88(sp)
81119d60:	1000041e 	bne	r2,zero,81119d74 <_dtoa_r+0xeb4>
81119d64:	d9800317 	ldw	r6,12(sp)
81119d68:	3000021e 	bne	r6,zero,81119d74 <_dtoa_r+0xeb4>
81119d6c:	d8c00617 	ldw	r3,24(sp)
81119d70:	18003726 	beq	r3,zero,81119e50 <_dtoa_r+0xf90>
81119d74:	b0002016 	blt	r22,zero,81119df8 <_dtoa_r+0xf38>
81119d78:	b000041e 	bne	r22,zero,81119d8c <_dtoa_r+0xecc>
81119d7c:	d9000317 	ldw	r4,12(sp)
81119d80:	2000021e 	bne	r4,zero,81119d8c <_dtoa_r+0xecc>
81119d84:	d8c00617 	ldw	r3,24(sp)
81119d88:	18001b26 	beq	r3,zero,81119df8 <_dtoa_r+0xf38>
81119d8c:	00810716 	blt	zero,r2,8111a1ac <_dtoa_r+0x12ec>
81119d90:	d8c00417 	ldw	r3,16(sp)
81119d94:	9d800044 	addi	r22,r19,1
81119d98:	9c800005 	stb	r18,0(r19)
81119d9c:	b02f883a 	mov	r23,r22
81119da0:	98c10626 	beq	r19,r3,8111a1bc <_dtoa_r+0x12fc>
81119da4:	800b883a 	mov	r5,r16
81119da8:	000f883a 	mov	r7,zero
81119dac:	01800284 	movi	r6,10
81119db0:	e009883a 	mov	r4,fp
81119db4:	111c0b00 	call	8111c0b0 <__multadd>
81119db8:	1021883a 	mov	r16,r2
81119dbc:	000f883a 	mov	r7,zero
81119dc0:	01800284 	movi	r6,10
81119dc4:	880b883a 	mov	r5,r17
81119dc8:	e009883a 	mov	r4,fp
81119dcc:	8d002526 	beq	r17,r20,81119e64 <_dtoa_r+0xfa4>
81119dd0:	111c0b00 	call	8111c0b0 <__multadd>
81119dd4:	a00b883a 	mov	r5,r20
81119dd8:	000f883a 	mov	r7,zero
81119ddc:	01800284 	movi	r6,10
81119de0:	e009883a 	mov	r4,fp
81119de4:	1023883a 	mov	r17,r2
81119de8:	111c0b00 	call	8111c0b0 <__multadd>
81119dec:	1029883a 	mov	r20,r2
81119df0:	b027883a 	mov	r19,r22
81119df4:	003fc006 	br	81119cf8 <__reset+0xfb0f9cf8>
81119df8:	9011883a 	mov	r8,r18
81119dfc:	00800e0e 	bge	zero,r2,81119e38 <_dtoa_r+0xf78>
81119e00:	800b883a 	mov	r5,r16
81119e04:	01800044 	movi	r6,1
81119e08:	e009883a 	mov	r4,fp
81119e0c:	da001715 	stw	r8,92(sp)
81119e10:	111c7880 	call	8111c788 <__lshift>
81119e14:	a80b883a 	mov	r5,r21
81119e18:	1009883a 	mov	r4,r2
81119e1c:	1021883a 	mov	r16,r2
81119e20:	111c8d80 	call	8111c8d8 <__mcmp>
81119e24:	da001717 	ldw	r8,92(sp)
81119e28:	0081960e 	bge	zero,r2,8111a484 <_dtoa_r+0x15c4>
81119e2c:	00800e44 	movi	r2,57
81119e30:	40817026 	beq	r8,r2,8111a3f4 <_dtoa_r+0x1534>
81119e34:	ba000c44 	addi	r8,r23,49
81119e38:	8825883a 	mov	r18,r17
81119e3c:	9dc00044 	addi	r23,r19,1
81119e40:	9a000005 	stb	r8,0(r19)
81119e44:	a023883a 	mov	r17,r20
81119e48:	dc000915 	stw	r16,36(sp)
81119e4c:	003f2406 	br	81119ae0 <__reset+0xfb0f9ae0>
81119e50:	00800e44 	movi	r2,57
81119e54:	9011883a 	mov	r8,r18
81119e58:	90816626 	beq	r18,r2,8111a3f4 <_dtoa_r+0x1534>
81119e5c:	05bff516 	blt	zero,r22,81119e34 <__reset+0xfb0f9e34>
81119e60:	003ff506 	br	81119e38 <__reset+0xfb0f9e38>
81119e64:	111c0b00 	call	8111c0b0 <__multadd>
81119e68:	1023883a 	mov	r17,r2
81119e6c:	1029883a 	mov	r20,r2
81119e70:	003fdf06 	br	81119df0 <__reset+0xfb0f9df0>
81119e74:	e009883a 	mov	r4,fp
81119e78:	111c0880 	call	8111c088 <_Bfree>
81119e7c:	00800044 	movi	r2,1
81119e80:	003fbc06 	br	81119d74 <__reset+0xfb0f9d74>
81119e84:	a80b883a 	mov	r5,r21
81119e88:	8009883a 	mov	r4,r16
81119e8c:	111c8d80 	call	8111c8d8 <__mcmp>
81119e90:	103edb0e 	bge	r2,zero,81119a00 <__reset+0xfb0f9a00>
81119e94:	800b883a 	mov	r5,r16
81119e98:	000f883a 	mov	r7,zero
81119e9c:	01800284 	movi	r6,10
81119ea0:	e009883a 	mov	r4,fp
81119ea4:	111c0b00 	call	8111c0b0 <__multadd>
81119ea8:	1021883a 	mov	r16,r2
81119eac:	d8800517 	ldw	r2,20(sp)
81119eb0:	d8c00b17 	ldw	r3,44(sp)
81119eb4:	10bfffc4 	addi	r2,r2,-1
81119eb8:	d8800515 	stw	r2,20(sp)
81119ebc:	183f761e 	bne	r3,zero,81119c98 <__reset+0xfb0f9c98>
81119ec0:	d9000c17 	ldw	r4,48(sp)
81119ec4:	0101730e 	bge	zero,r4,8111a494 <_dtoa_r+0x15d4>
81119ec8:	d9000615 	stw	r4,24(sp)
81119ecc:	003ed006 	br	81119a10 <__reset+0xfb0f9a10>
81119ed0:	00800084 	movi	r2,2
81119ed4:	3081861e 	bne	r6,r2,8111a4f0 <_dtoa_r+0x1630>
81119ed8:	d8000b15 	stw	zero,44(sp)
81119edc:	003f3c06 	br	81119bd0 <__reset+0xfb0f9bd0>
81119ee0:	dc000917 	ldw	r16,36(sp)
81119ee4:	003e9206 	br	81119930 <__reset+0xfb0f9930>
81119ee8:	d9c00317 	ldw	r7,12(sp)
81119eec:	00800084 	movi	r2,2
81119ef0:	11fec50e 	bge	r2,r7,81119a08 <__reset+0xfb0f9a08>
81119ef4:	d9000617 	ldw	r4,24(sp)
81119ef8:	20013c1e 	bne	r4,zero,8111a3ec <_dtoa_r+0x152c>
81119efc:	a80b883a 	mov	r5,r21
81119f00:	000f883a 	mov	r7,zero
81119f04:	01800144 	movi	r6,5
81119f08:	e009883a 	mov	r4,fp
81119f0c:	111c0b00 	call	8111c0b0 <__multadd>
81119f10:	100b883a 	mov	r5,r2
81119f14:	8009883a 	mov	r4,r16
81119f18:	102b883a 	mov	r21,r2
81119f1c:	111c8d80 	call	8111c8d8 <__mcmp>
81119f20:	dc000915 	stw	r16,36(sp)
81119f24:	00bf410e 	bge	zero,r2,81119c2c <__reset+0xfb0f9c2c>
81119f28:	d9c00717 	ldw	r7,28(sp)
81119f2c:	00800c44 	movi	r2,49
81119f30:	38800005 	stb	r2,0(r7)
81119f34:	d8800517 	ldw	r2,20(sp)
81119f38:	3dc00044 	addi	r23,r7,1
81119f3c:	10800044 	addi	r2,r2,1
81119f40:	d8800515 	stw	r2,20(sp)
81119f44:	003f3d06 	br	81119c3c <__reset+0xfb0f9c3c>
81119f48:	d9800517 	ldw	r6,20(sp)
81119f4c:	d9c00717 	ldw	r7,28(sp)
81119f50:	00800c44 	movi	r2,49
81119f54:	31800044 	addi	r6,r6,1
81119f58:	d9800515 	stw	r6,20(sp)
81119f5c:	38800005 	stb	r2,0(r7)
81119f60:	003edf06 	br	81119ae0 <__reset+0xfb0f9ae0>
81119f64:	d8000b15 	stw	zero,44(sp)
81119f68:	003c9f06 	br	811191e8 <__reset+0xfb0f91e8>
81119f6c:	903e7e1e 	bne	r18,zero,81119968 <__reset+0xfb0f9968>
81119f70:	00800434 	movhi	r2,16
81119f74:	10bfffc4 	addi	r2,r2,-1
81119f78:	9884703a 	and	r2,r19,r2
81119f7c:	1000ea1e 	bne	r2,zero,8111a328 <_dtoa_r+0x1468>
81119f80:	9cdffc2c 	andhi	r19,r19,32752
81119f84:	9800e826 	beq	r19,zero,8111a328 <_dtoa_r+0x1468>
81119f88:	d9c00817 	ldw	r7,32(sp)
81119f8c:	b5800044 	addi	r22,r22,1
81119f90:	04c00044 	movi	r19,1
81119f94:	39c00044 	addi	r7,r7,1
81119f98:	d9c00815 	stw	r7,32(sp)
81119f9c:	d8800d17 	ldw	r2,52(sp)
81119fa0:	103e721e 	bne	r2,zero,8111996c <__reset+0xfb0f996c>
81119fa4:	00800044 	movi	r2,1
81119fa8:	003e7906 	br	81119990 <__reset+0xfb0f9990>
81119fac:	8009883a 	mov	r4,r16
81119fb0:	11265280 	call	81126528 <__floatsidf>
81119fb4:	d9800f17 	ldw	r6,60(sp)
81119fb8:	d9c01017 	ldw	r7,64(sp)
81119fbc:	1009883a 	mov	r4,r2
81119fc0:	180b883a 	mov	r5,r3
81119fc4:	11105240 	call	81110524 <__muldf3>
81119fc8:	000d883a 	mov	r6,zero
81119fcc:	01d00734 	movhi	r7,16412
81119fd0:	1009883a 	mov	r4,r2
81119fd4:	180b883a 	mov	r5,r3
81119fd8:	11247a80 	call	811247a8 <__adddf3>
81119fdc:	047f3034 	movhi	r17,64704
81119fe0:	1021883a 	mov	r16,r2
81119fe4:	1c63883a 	add	r17,r3,r17
81119fe8:	d9000f17 	ldw	r4,60(sp)
81119fec:	d9401017 	ldw	r5,64(sp)
81119ff0:	000d883a 	mov	r6,zero
81119ff4:	01d00534 	movhi	r7,16404
81119ff8:	1125ba40 	call	81125ba4 <__subdf3>
81119ffc:	800d883a 	mov	r6,r16
8111a000:	880f883a 	mov	r7,r17
8111a004:	1009883a 	mov	r4,r2
8111a008:	180b883a 	mov	r5,r3
8111a00c:	102b883a 	mov	r21,r2
8111a010:	1829883a 	mov	r20,r3
8111a014:	11259d40 	call	811259d4 <__gedf2>
8111a018:	00806c16 	blt	zero,r2,8111a1cc <_dtoa_r+0x130c>
8111a01c:	89e0003c 	xorhi	r7,r17,32768
8111a020:	800d883a 	mov	r6,r16
8111a024:	a809883a 	mov	r4,r21
8111a028:	a00b883a 	mov	r5,r20
8111a02c:	1125ab00 	call	81125ab0 <__ledf2>
8111a030:	103d7e0e 	bge	r2,zero,8111962c <__reset+0xfb0f962c>
8111a034:	002b883a 	mov	r21,zero
8111a038:	0023883a 	mov	r17,zero
8111a03c:	003efb06 	br	81119c2c <__reset+0xfb0f9c2c>
8111a040:	d8800717 	ldw	r2,28(sp)
8111a044:	003bd006 	br	81118f88 <__reset+0xfb0f8f88>
8111a048:	d9000a17 	ldw	r4,40(sp)
8111a04c:	d9800d17 	ldw	r6,52(sp)
8111a050:	dd400a15 	stw	r21,40(sp)
8111a054:	a905c83a 	sub	r2,r21,r4
8111a058:	308d883a 	add	r6,r6,r2
8111a05c:	d9800d15 	stw	r6,52(sp)
8111a060:	002b883a 	mov	r21,zero
8111a064:	003e0606 	br	81119880 <__reset+0xfb0f9880>
8111a068:	9023883a 	mov	r17,r18
8111a06c:	9829883a 	mov	r20,r19
8111a070:	04000084 	movi	r16,2
8111a074:	003c9206 	br	811192c0 <__reset+0xfb0f92c0>
8111a078:	04000044 	movi	r16,1
8111a07c:	dc000c15 	stw	r16,48(sp)
8111a080:	dc000615 	stw	r16,24(sp)
8111a084:	dc002215 	stw	r16,136(sp)
8111a088:	e0001115 	stw	zero,68(fp)
8111a08c:	000b883a 	mov	r5,zero
8111a090:	003c6906 	br	81119238 <__reset+0xfb0f9238>
8111a094:	3021883a 	mov	r16,r6
8111a098:	003ffb06 	br	8111a088 <__reset+0xfb0fa088>
8111a09c:	1000021e 	bne	r2,zero,8111a0a8 <_dtoa_r+0x11e8>
8111a0a0:	4200004c 	andi	r8,r8,1
8111a0a4:	403e7d1e 	bne	r8,zero,81119a9c <__reset+0xfb0f9a9c>
8111a0a8:	01000c04 	movi	r4,48
8111a0ac:	00000106 	br	8111a0b4 <_dtoa_r+0x11f4>
8111a0b0:	102f883a 	mov	r23,r2
8111a0b4:	b8bfffc4 	addi	r2,r23,-1
8111a0b8:	10c00007 	ldb	r3,0(r2)
8111a0bc:	193ffc26 	beq	r3,r4,8111a0b0 <__reset+0xfb0fa0b0>
8111a0c0:	003e8706 	br	81119ae0 <__reset+0xfb0f9ae0>
8111a0c4:	d8800517 	ldw	r2,20(sp)
8111a0c8:	00a3c83a 	sub	r17,zero,r2
8111a0cc:	8800a426 	beq	r17,zero,8111a360 <_dtoa_r+0x14a0>
8111a0d0:	888003cc 	andi	r2,r17,15
8111a0d4:	100490fa 	slli	r2,r2,3
8111a0d8:	00e04534 	movhi	r3,33044
8111a0dc:	18f6dc04 	addi	r3,r3,-9360
8111a0e0:	1885883a 	add	r2,r3,r2
8111a0e4:	11800017 	ldw	r6,0(r2)
8111a0e8:	11c00117 	ldw	r7,4(r2)
8111a0ec:	9009883a 	mov	r4,r18
8111a0f0:	980b883a 	mov	r5,r19
8111a0f4:	8823d13a 	srai	r17,r17,4
8111a0f8:	11105240 	call	81110524 <__muldf3>
8111a0fc:	d8800f15 	stw	r2,60(sp)
8111a100:	d8c01015 	stw	r3,64(sp)
8111a104:	8800e826 	beq	r17,zero,8111a4a8 <_dtoa_r+0x15e8>
8111a108:	05204534 	movhi	r20,33044
8111a10c:	a536d204 	addi	r20,r20,-9400
8111a110:	04000084 	movi	r16,2
8111a114:	8980004c 	andi	r6,r17,1
8111a118:	1009883a 	mov	r4,r2
8111a11c:	8823d07a 	srai	r17,r17,1
8111a120:	180b883a 	mov	r5,r3
8111a124:	30000426 	beq	r6,zero,8111a138 <_dtoa_r+0x1278>
8111a128:	a1800017 	ldw	r6,0(r20)
8111a12c:	a1c00117 	ldw	r7,4(r20)
8111a130:	84000044 	addi	r16,r16,1
8111a134:	11105240 	call	81110524 <__muldf3>
8111a138:	a5000204 	addi	r20,r20,8
8111a13c:	883ff51e 	bne	r17,zero,8111a114 <__reset+0xfb0fa114>
8111a140:	d8800f15 	stw	r2,60(sp)
8111a144:	d8c01015 	stw	r3,64(sp)
8111a148:	003c7606 	br	81119324 <__reset+0xfb0f9324>
8111a14c:	00c00c04 	movi	r3,48
8111a150:	10c00005 	stb	r3,0(r2)
8111a154:	d8c00517 	ldw	r3,20(sp)
8111a158:	bd3fffc3 	ldbu	r20,-1(r23)
8111a15c:	18c00044 	addi	r3,r3,1
8111a160:	d8c00515 	stw	r3,20(sp)
8111a164:	003db906 	br	8111984c <__reset+0xfb0f984c>
8111a168:	89400117 	ldw	r5,4(r17)
8111a16c:	e009883a 	mov	r4,fp
8111a170:	111bfd80 	call	8111bfd8 <_Balloc>
8111a174:	89800417 	ldw	r6,16(r17)
8111a178:	89400304 	addi	r5,r17,12
8111a17c:	11000304 	addi	r4,r2,12
8111a180:	31800084 	addi	r6,r6,2
8111a184:	318d883a 	add	r6,r6,r6
8111a188:	318d883a 	add	r6,r6,r6
8111a18c:	1027883a 	mov	r19,r2
8111a190:	11120c40 	call	811120c4 <memcpy>
8111a194:	01800044 	movi	r6,1
8111a198:	980b883a 	mov	r5,r19
8111a19c:	e009883a 	mov	r4,fp
8111a1a0:	111c7880 	call	8111c788 <__lshift>
8111a1a4:	1029883a 	mov	r20,r2
8111a1a8:	003ecc06 	br	81119cdc <__reset+0xfb0f9cdc>
8111a1ac:	00800e44 	movi	r2,57
8111a1b0:	90809026 	beq	r18,r2,8111a3f4 <_dtoa_r+0x1534>
8111a1b4:	92000044 	addi	r8,r18,1
8111a1b8:	003f1f06 	br	81119e38 <__reset+0xfb0f9e38>
8111a1bc:	9011883a 	mov	r8,r18
8111a1c0:	8825883a 	mov	r18,r17
8111a1c4:	a023883a 	mov	r17,r20
8111a1c8:	003e2906 	br	81119a70 <__reset+0xfb0f9a70>
8111a1cc:	002b883a 	mov	r21,zero
8111a1d0:	0023883a 	mov	r17,zero
8111a1d4:	003f5406 	br	81119f28 <__reset+0xfb0f9f28>
8111a1d8:	61bfffc4 	addi	r6,r12,-1
8111a1dc:	300490fa 	slli	r2,r6,3
8111a1e0:	00e04534 	movhi	r3,33044
8111a1e4:	18f6dc04 	addi	r3,r3,-9360
8111a1e8:	1885883a 	add	r2,r3,r2
8111a1ec:	11000017 	ldw	r4,0(r2)
8111a1f0:	11400117 	ldw	r5,4(r2)
8111a1f4:	d8800717 	ldw	r2,28(sp)
8111a1f8:	880f883a 	mov	r7,r17
8111a1fc:	d9801215 	stw	r6,72(sp)
8111a200:	800d883a 	mov	r6,r16
8111a204:	db001615 	stw	r12,88(sp)
8111a208:	15c00044 	addi	r23,r2,1
8111a20c:	11105240 	call	81110524 <__muldf3>
8111a210:	d9401017 	ldw	r5,64(sp)
8111a214:	d9000f17 	ldw	r4,60(sp)
8111a218:	d8c01515 	stw	r3,84(sp)
8111a21c:	d8801415 	stw	r2,80(sp)
8111a220:	11264a80 	call	811264a8 <__fixdfsi>
8111a224:	1009883a 	mov	r4,r2
8111a228:	1021883a 	mov	r16,r2
8111a22c:	11265280 	call	81126528 <__floatsidf>
8111a230:	d9000f17 	ldw	r4,60(sp)
8111a234:	d9401017 	ldw	r5,64(sp)
8111a238:	100d883a 	mov	r6,r2
8111a23c:	180f883a 	mov	r7,r3
8111a240:	1125ba40 	call	81125ba4 <__subdf3>
8111a244:	1829883a 	mov	r20,r3
8111a248:	d8c00717 	ldw	r3,28(sp)
8111a24c:	84000c04 	addi	r16,r16,48
8111a250:	1023883a 	mov	r17,r2
8111a254:	1c000005 	stb	r16,0(r3)
8111a258:	db001617 	ldw	r12,88(sp)
8111a25c:	00800044 	movi	r2,1
8111a260:	60802226 	beq	r12,r2,8111a2ec <_dtoa_r+0x142c>
8111a264:	d9c00717 	ldw	r7,28(sp)
8111a268:	8805883a 	mov	r2,r17
8111a26c:	b82b883a 	mov	r21,r23
8111a270:	3b19883a 	add	r12,r7,r12
8111a274:	6023883a 	mov	r17,r12
8111a278:	a007883a 	mov	r3,r20
8111a27c:	dc800f15 	stw	r18,60(sp)
8111a280:	000d883a 	mov	r6,zero
8111a284:	01d00934 	movhi	r7,16420
8111a288:	1009883a 	mov	r4,r2
8111a28c:	180b883a 	mov	r5,r3
8111a290:	11105240 	call	81110524 <__muldf3>
8111a294:	180b883a 	mov	r5,r3
8111a298:	1009883a 	mov	r4,r2
8111a29c:	1829883a 	mov	r20,r3
8111a2a0:	1025883a 	mov	r18,r2
8111a2a4:	11264a80 	call	811264a8 <__fixdfsi>
8111a2a8:	1009883a 	mov	r4,r2
8111a2ac:	1021883a 	mov	r16,r2
8111a2b0:	11265280 	call	81126528 <__floatsidf>
8111a2b4:	100d883a 	mov	r6,r2
8111a2b8:	180f883a 	mov	r7,r3
8111a2bc:	9009883a 	mov	r4,r18
8111a2c0:	a00b883a 	mov	r5,r20
8111a2c4:	84000c04 	addi	r16,r16,48
8111a2c8:	1125ba40 	call	81125ba4 <__subdf3>
8111a2cc:	ad400044 	addi	r21,r21,1
8111a2d0:	ac3fffc5 	stb	r16,-1(r21)
8111a2d4:	ac7fea1e 	bne	r21,r17,8111a280 <__reset+0xfb0fa280>
8111a2d8:	1023883a 	mov	r17,r2
8111a2dc:	d8801217 	ldw	r2,72(sp)
8111a2e0:	dc800f17 	ldw	r18,60(sp)
8111a2e4:	1829883a 	mov	r20,r3
8111a2e8:	b8af883a 	add	r23,r23,r2
8111a2ec:	d9001417 	ldw	r4,80(sp)
8111a2f0:	d9401517 	ldw	r5,84(sp)
8111a2f4:	000d883a 	mov	r6,zero
8111a2f8:	01cff834 	movhi	r7,16352
8111a2fc:	11247a80 	call	811247a8 <__adddf3>
8111a300:	880d883a 	mov	r6,r17
8111a304:	a00f883a 	mov	r7,r20
8111a308:	1009883a 	mov	r4,r2
8111a30c:	180b883a 	mov	r5,r3
8111a310:	1125ab00 	call	81125ab0 <__ledf2>
8111a314:	10003e0e 	bge	r2,zero,8111a410 <_dtoa_r+0x1550>
8111a318:	d9001317 	ldw	r4,76(sp)
8111a31c:	bd3fffc3 	ldbu	r20,-1(r23)
8111a320:	d9000515 	stw	r4,20(sp)
8111a324:	003d3b06 	br	81119814 <__reset+0xfb0f9814>
8111a328:	0027883a 	mov	r19,zero
8111a32c:	003f1b06 	br	81119f9c <__reset+0xfb0f9f9c>
8111a330:	d8800817 	ldw	r2,32(sp)
8111a334:	11e9c83a 	sub	r20,r2,r7
8111a338:	0005883a 	mov	r2,zero
8111a33c:	003d5406 	br	81119890 <__reset+0xfb0f9890>
8111a340:	00800044 	movi	r2,1
8111a344:	003dc706 	br	81119a64 <__reset+0xfb0f9a64>
8111a348:	d8c00217 	ldw	r3,8(sp)
8111a34c:	00800d84 	movi	r2,54
8111a350:	dd400a17 	ldw	r21,40(sp)
8111a354:	10c5c83a 	sub	r2,r2,r3
8111a358:	dd000817 	ldw	r20,32(sp)
8111a35c:	003d4c06 	br	81119890 <__reset+0xfb0f9890>
8111a360:	dc800f15 	stw	r18,60(sp)
8111a364:	dcc01015 	stw	r19,64(sp)
8111a368:	04000084 	movi	r16,2
8111a36c:	003bed06 	br	81119324 <__reset+0xfb0f9324>
8111a370:	d9000617 	ldw	r4,24(sp)
8111a374:	203f0d26 	beq	r4,zero,81119fac <__reset+0xfb0f9fac>
8111a378:	d9800c17 	ldw	r6,48(sp)
8111a37c:	01bcab0e 	bge	zero,r6,8111962c <__reset+0xfb0f962c>
8111a380:	d9401017 	ldw	r5,64(sp)
8111a384:	d9000f17 	ldw	r4,60(sp)
8111a388:	000d883a 	mov	r6,zero
8111a38c:	01d00934 	movhi	r7,16420
8111a390:	11105240 	call	81110524 <__muldf3>
8111a394:	81000044 	addi	r4,r16,1
8111a398:	d8800f15 	stw	r2,60(sp)
8111a39c:	d8c01015 	stw	r3,64(sp)
8111a3a0:	11265280 	call	81126528 <__floatsidf>
8111a3a4:	d9800f17 	ldw	r6,60(sp)
8111a3a8:	d9c01017 	ldw	r7,64(sp)
8111a3ac:	1009883a 	mov	r4,r2
8111a3b0:	180b883a 	mov	r5,r3
8111a3b4:	11105240 	call	81110524 <__muldf3>
8111a3b8:	01d00734 	movhi	r7,16412
8111a3bc:	000d883a 	mov	r6,zero
8111a3c0:	1009883a 	mov	r4,r2
8111a3c4:	180b883a 	mov	r5,r3
8111a3c8:	11247a80 	call	811247a8 <__adddf3>
8111a3cc:	d9c00517 	ldw	r7,20(sp)
8111a3d0:	047f3034 	movhi	r17,64704
8111a3d4:	1021883a 	mov	r16,r2
8111a3d8:	39ffffc4 	addi	r7,r7,-1
8111a3dc:	d9c01315 	stw	r7,76(sp)
8111a3e0:	1c63883a 	add	r17,r3,r17
8111a3e4:	db000c17 	ldw	r12,48(sp)
8111a3e8:	003bea06 	br	81119394 <__reset+0xfb0f9394>
8111a3ec:	dc000915 	stw	r16,36(sp)
8111a3f0:	003e0e06 	br	81119c2c <__reset+0xfb0f9c2c>
8111a3f4:	01000e44 	movi	r4,57
8111a3f8:	8825883a 	mov	r18,r17
8111a3fc:	9dc00044 	addi	r23,r19,1
8111a400:	99000005 	stb	r4,0(r19)
8111a404:	a023883a 	mov	r17,r20
8111a408:	dc000915 	stw	r16,36(sp)
8111a40c:	003da406 	br	81119aa0 <__reset+0xfb0f9aa0>
8111a410:	d9801417 	ldw	r6,80(sp)
8111a414:	d9c01517 	ldw	r7,84(sp)
8111a418:	0009883a 	mov	r4,zero
8111a41c:	014ff834 	movhi	r5,16352
8111a420:	1125ba40 	call	81125ba4 <__subdf3>
8111a424:	880d883a 	mov	r6,r17
8111a428:	a00f883a 	mov	r7,r20
8111a42c:	1009883a 	mov	r4,r2
8111a430:	180b883a 	mov	r5,r3
8111a434:	11259d40 	call	811259d4 <__gedf2>
8111a438:	00bc7c0e 	bge	zero,r2,8111962c <__reset+0xfb0f962c>
8111a43c:	01000c04 	movi	r4,48
8111a440:	00000106 	br	8111a448 <_dtoa_r+0x1588>
8111a444:	102f883a 	mov	r23,r2
8111a448:	b8bfffc4 	addi	r2,r23,-1
8111a44c:	10c00007 	ldb	r3,0(r2)
8111a450:	193ffc26 	beq	r3,r4,8111a444 <__reset+0xfb0fa444>
8111a454:	d9801317 	ldw	r6,76(sp)
8111a458:	d9800515 	stw	r6,20(sp)
8111a45c:	003c4406 	br	81119570 <__reset+0xfb0f9570>
8111a460:	d9801317 	ldw	r6,76(sp)
8111a464:	d9800515 	stw	r6,20(sp)
8111a468:	003cea06 	br	81119814 <__reset+0xfb0f9814>
8111a46c:	dd800f17 	ldw	r22,60(sp)
8111a470:	dcc01017 	ldw	r19,64(sp)
8111a474:	dc801217 	ldw	r18,72(sp)
8111a478:	003c6c06 	br	8111962c <__reset+0xfb0f962c>
8111a47c:	903e031e 	bne	r18,zero,81119c8c <__reset+0xfb0f9c8c>
8111a480:	003ebb06 	br	81119f70 <__reset+0xfb0f9f70>
8111a484:	103e6c1e 	bne	r2,zero,81119e38 <__reset+0xfb0f9e38>
8111a488:	4080004c 	andi	r2,r8,1
8111a48c:	103e6a26 	beq	r2,zero,81119e38 <__reset+0xfb0f9e38>
8111a490:	003e6606 	br	81119e2c <__reset+0xfb0f9e2c>
8111a494:	d8c00317 	ldw	r3,12(sp)
8111a498:	00800084 	movi	r2,2
8111a49c:	10c02916 	blt	r2,r3,8111a544 <_dtoa_r+0x1684>
8111a4a0:	d9000c17 	ldw	r4,48(sp)
8111a4a4:	003e8806 	br	81119ec8 <__reset+0xfb0f9ec8>
8111a4a8:	04000084 	movi	r16,2
8111a4ac:	003b9d06 	br	81119324 <__reset+0xfb0f9324>
8111a4b0:	d9001317 	ldw	r4,76(sp)
8111a4b4:	d9000515 	stw	r4,20(sp)
8111a4b8:	003cd606 	br	81119814 <__reset+0xfb0f9814>
8111a4bc:	d8801317 	ldw	r2,76(sp)
8111a4c0:	d8800515 	stw	r2,20(sp)
8111a4c4:	003c2a06 	br	81119570 <__reset+0xfb0f9570>
8111a4c8:	d9800317 	ldw	r6,12(sp)
8111a4cc:	00800084 	movi	r2,2
8111a4d0:	11801516 	blt	r2,r6,8111a528 <_dtoa_r+0x1668>
8111a4d4:	d9c00c17 	ldw	r7,48(sp)
8111a4d8:	d9c00615 	stw	r7,24(sp)
8111a4dc:	003df706 	br	81119cbc <__reset+0xfb0f9cbc>
8111a4e0:	193d3926 	beq	r3,r4,811199c8 <__reset+0xfb0f99c8>
8111a4e4:	00c00f04 	movi	r3,60
8111a4e8:	1885c83a 	sub	r2,r3,r2
8111a4ec:	003ddf06 	br	81119c6c <__reset+0xfb0f9c6c>
8111a4f0:	e009883a 	mov	r4,fp
8111a4f4:	e0001115 	stw	zero,68(fp)
8111a4f8:	000b883a 	mov	r5,zero
8111a4fc:	111bfd80 	call	8111bfd8 <_Balloc>
8111a500:	d8800715 	stw	r2,28(sp)
8111a504:	d8c00717 	ldw	r3,28(sp)
8111a508:	00bfffc4 	movi	r2,-1
8111a50c:	01000044 	movi	r4,1
8111a510:	d8800c15 	stw	r2,48(sp)
8111a514:	e0c01015 	stw	r3,64(fp)
8111a518:	d9000b15 	stw	r4,44(sp)
8111a51c:	d8800615 	stw	r2,24(sp)
8111a520:	d8002215 	stw	zero,136(sp)
8111a524:	003c4106 	br	8111962c <__reset+0xfb0f962c>
8111a528:	d8c00c17 	ldw	r3,48(sp)
8111a52c:	d8c00615 	stw	r3,24(sp)
8111a530:	003e7006 	br	81119ef4 <__reset+0xfb0f9ef4>
8111a534:	04400044 	movi	r17,1
8111a538:	003b2006 	br	811191bc <__reset+0xfb0f91bc>
8111a53c:	000b883a 	mov	r5,zero
8111a540:	003b3d06 	br	81119238 <__reset+0xfb0f9238>
8111a544:	d8800c17 	ldw	r2,48(sp)
8111a548:	d8800615 	stw	r2,24(sp)
8111a54c:	003e6906 	br	81119ef4 <__reset+0xfb0f9ef4>

8111a550 <__sflush_r>:
8111a550:	defffb04 	addi	sp,sp,-20
8111a554:	de00012e 	bgeu	sp,et,8111a55c <__sflush_r+0xc>
8111a558:	003b68fa 	trap	3
8111a55c:	2880030b 	ldhu	r2,12(r5)
8111a560:	dcc00315 	stw	r19,12(sp)
8111a564:	dc400115 	stw	r17,4(sp)
8111a568:	dfc00415 	stw	ra,16(sp)
8111a56c:	dc800215 	stw	r18,8(sp)
8111a570:	dc000015 	stw	r16,0(sp)
8111a574:	10c0020c 	andi	r3,r2,8
8111a578:	2823883a 	mov	r17,r5
8111a57c:	2027883a 	mov	r19,r4
8111a580:	1800311e 	bne	r3,zero,8111a648 <__sflush_r+0xf8>
8111a584:	28c00117 	ldw	r3,4(r5)
8111a588:	10820014 	ori	r2,r2,2048
8111a58c:	2880030d 	sth	r2,12(r5)
8111a590:	00c04b0e 	bge	zero,r3,8111a6c0 <__sflush_r+0x170>
8111a594:	8a000a17 	ldw	r8,40(r17)
8111a598:	40002326 	beq	r8,zero,8111a628 <__sflush_r+0xd8>
8111a59c:	9c000017 	ldw	r16,0(r19)
8111a5a0:	10c4000c 	andi	r3,r2,4096
8111a5a4:	98000015 	stw	zero,0(r19)
8111a5a8:	18004826 	beq	r3,zero,8111a6cc <__sflush_r+0x17c>
8111a5ac:	89801417 	ldw	r6,80(r17)
8111a5b0:	10c0010c 	andi	r3,r2,4
8111a5b4:	18000626 	beq	r3,zero,8111a5d0 <__sflush_r+0x80>
8111a5b8:	88c00117 	ldw	r3,4(r17)
8111a5bc:	88800c17 	ldw	r2,48(r17)
8111a5c0:	30cdc83a 	sub	r6,r6,r3
8111a5c4:	10000226 	beq	r2,zero,8111a5d0 <__sflush_r+0x80>
8111a5c8:	88800f17 	ldw	r2,60(r17)
8111a5cc:	308dc83a 	sub	r6,r6,r2
8111a5d0:	89400717 	ldw	r5,28(r17)
8111a5d4:	000f883a 	mov	r7,zero
8111a5d8:	9809883a 	mov	r4,r19
8111a5dc:	403ee83a 	callr	r8
8111a5e0:	00ffffc4 	movi	r3,-1
8111a5e4:	10c04426 	beq	r2,r3,8111a6f8 <__sflush_r+0x1a8>
8111a5e8:	88c0030b 	ldhu	r3,12(r17)
8111a5ec:	89000417 	ldw	r4,16(r17)
8111a5f0:	88000115 	stw	zero,4(r17)
8111a5f4:	197dffcc 	andi	r5,r3,63487
8111a5f8:	8940030d 	sth	r5,12(r17)
8111a5fc:	89000015 	stw	r4,0(r17)
8111a600:	18c4000c 	andi	r3,r3,4096
8111a604:	18002c1e 	bne	r3,zero,8111a6b8 <__sflush_r+0x168>
8111a608:	89400c17 	ldw	r5,48(r17)
8111a60c:	9c000015 	stw	r16,0(r19)
8111a610:	28000526 	beq	r5,zero,8111a628 <__sflush_r+0xd8>
8111a614:	88801004 	addi	r2,r17,64
8111a618:	28800226 	beq	r5,r2,8111a624 <__sflush_r+0xd4>
8111a61c:	9809883a 	mov	r4,r19
8111a620:	111b0080 	call	8111b008 <_free_r>
8111a624:	88000c15 	stw	zero,48(r17)
8111a628:	0005883a 	mov	r2,zero
8111a62c:	dfc00417 	ldw	ra,16(sp)
8111a630:	dcc00317 	ldw	r19,12(sp)
8111a634:	dc800217 	ldw	r18,8(sp)
8111a638:	dc400117 	ldw	r17,4(sp)
8111a63c:	dc000017 	ldw	r16,0(sp)
8111a640:	dec00504 	addi	sp,sp,20
8111a644:	f800283a 	ret
8111a648:	2c800417 	ldw	r18,16(r5)
8111a64c:	903ff626 	beq	r18,zero,8111a628 <__reset+0xfb0fa628>
8111a650:	2c000017 	ldw	r16,0(r5)
8111a654:	108000cc 	andi	r2,r2,3
8111a658:	2c800015 	stw	r18,0(r5)
8111a65c:	84a1c83a 	sub	r16,r16,r18
8111a660:	1000131e 	bne	r2,zero,8111a6b0 <__sflush_r+0x160>
8111a664:	28800517 	ldw	r2,20(r5)
8111a668:	88800215 	stw	r2,8(r17)
8111a66c:	04000316 	blt	zero,r16,8111a67c <__sflush_r+0x12c>
8111a670:	003fed06 	br	8111a628 <__reset+0xfb0fa628>
8111a674:	90a5883a 	add	r18,r18,r2
8111a678:	043feb0e 	bge	zero,r16,8111a628 <__reset+0xfb0fa628>
8111a67c:	88800917 	ldw	r2,36(r17)
8111a680:	89400717 	ldw	r5,28(r17)
8111a684:	800f883a 	mov	r7,r16
8111a688:	900d883a 	mov	r6,r18
8111a68c:	9809883a 	mov	r4,r19
8111a690:	103ee83a 	callr	r2
8111a694:	80a1c83a 	sub	r16,r16,r2
8111a698:	00bff616 	blt	zero,r2,8111a674 <__reset+0xfb0fa674>
8111a69c:	88c0030b 	ldhu	r3,12(r17)
8111a6a0:	00bfffc4 	movi	r2,-1
8111a6a4:	18c01014 	ori	r3,r3,64
8111a6a8:	88c0030d 	sth	r3,12(r17)
8111a6ac:	003fdf06 	br	8111a62c <__reset+0xfb0fa62c>
8111a6b0:	0005883a 	mov	r2,zero
8111a6b4:	003fec06 	br	8111a668 <__reset+0xfb0fa668>
8111a6b8:	88801415 	stw	r2,80(r17)
8111a6bc:	003fd206 	br	8111a608 <__reset+0xfb0fa608>
8111a6c0:	28c00f17 	ldw	r3,60(r5)
8111a6c4:	00ffb316 	blt	zero,r3,8111a594 <__reset+0xfb0fa594>
8111a6c8:	003fd706 	br	8111a628 <__reset+0xfb0fa628>
8111a6cc:	89400717 	ldw	r5,28(r17)
8111a6d0:	000d883a 	mov	r6,zero
8111a6d4:	01c00044 	movi	r7,1
8111a6d8:	9809883a 	mov	r4,r19
8111a6dc:	403ee83a 	callr	r8
8111a6e0:	100d883a 	mov	r6,r2
8111a6e4:	00bfffc4 	movi	r2,-1
8111a6e8:	30801426 	beq	r6,r2,8111a73c <__sflush_r+0x1ec>
8111a6ec:	8880030b 	ldhu	r2,12(r17)
8111a6f0:	8a000a17 	ldw	r8,40(r17)
8111a6f4:	003fae06 	br	8111a5b0 <__reset+0xfb0fa5b0>
8111a6f8:	98c00017 	ldw	r3,0(r19)
8111a6fc:	183fba26 	beq	r3,zero,8111a5e8 <__reset+0xfb0fa5e8>
8111a700:	01000744 	movi	r4,29
8111a704:	19000626 	beq	r3,r4,8111a720 <__sflush_r+0x1d0>
8111a708:	01000584 	movi	r4,22
8111a70c:	19000426 	beq	r3,r4,8111a720 <__sflush_r+0x1d0>
8111a710:	88c0030b 	ldhu	r3,12(r17)
8111a714:	18c01014 	ori	r3,r3,64
8111a718:	88c0030d 	sth	r3,12(r17)
8111a71c:	003fc306 	br	8111a62c <__reset+0xfb0fa62c>
8111a720:	8880030b 	ldhu	r2,12(r17)
8111a724:	88c00417 	ldw	r3,16(r17)
8111a728:	88000115 	stw	zero,4(r17)
8111a72c:	10bdffcc 	andi	r2,r2,63487
8111a730:	8880030d 	sth	r2,12(r17)
8111a734:	88c00015 	stw	r3,0(r17)
8111a738:	003fb306 	br	8111a608 <__reset+0xfb0fa608>
8111a73c:	98800017 	ldw	r2,0(r19)
8111a740:	103fea26 	beq	r2,zero,8111a6ec <__reset+0xfb0fa6ec>
8111a744:	00c00744 	movi	r3,29
8111a748:	10c00226 	beq	r2,r3,8111a754 <__sflush_r+0x204>
8111a74c:	00c00584 	movi	r3,22
8111a750:	10c0031e 	bne	r2,r3,8111a760 <__sflush_r+0x210>
8111a754:	9c000015 	stw	r16,0(r19)
8111a758:	0005883a 	mov	r2,zero
8111a75c:	003fb306 	br	8111a62c <__reset+0xfb0fa62c>
8111a760:	88c0030b 	ldhu	r3,12(r17)
8111a764:	3005883a 	mov	r2,r6
8111a768:	18c01014 	ori	r3,r3,64
8111a76c:	88c0030d 	sth	r3,12(r17)
8111a770:	003fae06 	br	8111a62c <__reset+0xfb0fa62c>

8111a774 <_fflush_r>:
8111a774:	defffd04 	addi	sp,sp,-12
8111a778:	de00012e 	bgeu	sp,et,8111a780 <_fflush_r+0xc>
8111a77c:	003b68fa 	trap	3
8111a780:	dc000115 	stw	r16,4(sp)
8111a784:	dfc00215 	stw	ra,8(sp)
8111a788:	2021883a 	mov	r16,r4
8111a78c:	20000226 	beq	r4,zero,8111a798 <_fflush_r+0x24>
8111a790:	20800e17 	ldw	r2,56(r4)
8111a794:	10000c26 	beq	r2,zero,8111a7c8 <_fflush_r+0x54>
8111a798:	2880030f 	ldh	r2,12(r5)
8111a79c:	1000051e 	bne	r2,zero,8111a7b4 <_fflush_r+0x40>
8111a7a0:	0005883a 	mov	r2,zero
8111a7a4:	dfc00217 	ldw	ra,8(sp)
8111a7a8:	dc000117 	ldw	r16,4(sp)
8111a7ac:	dec00304 	addi	sp,sp,12
8111a7b0:	f800283a 	ret
8111a7b4:	8009883a 	mov	r4,r16
8111a7b8:	dfc00217 	ldw	ra,8(sp)
8111a7bc:	dc000117 	ldw	r16,4(sp)
8111a7c0:	dec00304 	addi	sp,sp,12
8111a7c4:	111a5501 	jmpi	8111a550 <__sflush_r>
8111a7c8:	d9400015 	stw	r5,0(sp)
8111a7cc:	111ab700 	call	8111ab70 <__sinit>
8111a7d0:	d9400017 	ldw	r5,0(sp)
8111a7d4:	003ff006 	br	8111a798 <__reset+0xfb0fa798>

8111a7d8 <fflush>:
8111a7d8:	20000526 	beq	r4,zero,8111a7f0 <fflush+0x18>
8111a7dc:	00a04534 	movhi	r2,33044
8111a7e0:	10bf9d04 	addi	r2,r2,-396
8111a7e4:	200b883a 	mov	r5,r4
8111a7e8:	11000017 	ldw	r4,0(r2)
8111a7ec:	111a7741 	jmpi	8111a774 <_fflush_r>
8111a7f0:	00a04534 	movhi	r2,33044
8111a7f4:	10bf9c04 	addi	r2,r2,-400
8111a7f8:	11000017 	ldw	r4,0(r2)
8111a7fc:	016044b4 	movhi	r5,33042
8111a800:	2969dd04 	addi	r5,r5,-22668
8111a804:	111b8b01 	jmpi	8111b8b0 <_fwalk_reent>

8111a808 <__fp_unlock>:
8111a808:	0005883a 	mov	r2,zero
8111a80c:	f800283a 	ret

8111a810 <_cleanup_r>:
8111a810:	016044b4 	movhi	r5,33042
8111a814:	29497304 	addi	r5,r5,9676
8111a818:	111b8b01 	jmpi	8111b8b0 <_fwalk_reent>

8111a81c <__sinit.part.1>:
8111a81c:	defff704 	addi	sp,sp,-36
8111a820:	00e044b4 	movhi	r3,33042
8111a824:	de00012e 	bgeu	sp,et,8111a82c <__sinit.part.1+0x10>
8111a828:	003b68fa 	trap	3
8111a82c:	18ea0404 	addi	r3,r3,-22512
8111a830:	dfc00815 	stw	ra,32(sp)
8111a834:	ddc00715 	stw	r23,28(sp)
8111a838:	dd800615 	stw	r22,24(sp)
8111a83c:	dd400515 	stw	r21,20(sp)
8111a840:	dd000415 	stw	r20,16(sp)
8111a844:	dcc00315 	stw	r19,12(sp)
8111a848:	dc800215 	stw	r18,8(sp)
8111a84c:	dc400115 	stw	r17,4(sp)
8111a850:	dc000015 	stw	r16,0(sp)
8111a854:	24000117 	ldw	r16,4(r4)
8111a858:	20c00f15 	stw	r3,60(r4)
8111a85c:	2080bb04 	addi	r2,r4,748
8111a860:	00c000c4 	movi	r3,3
8111a864:	20c0b915 	stw	r3,740(r4)
8111a868:	2080ba15 	stw	r2,744(r4)
8111a86c:	2000b815 	stw	zero,736(r4)
8111a870:	05c00204 	movi	r23,8
8111a874:	00800104 	movi	r2,4
8111a878:	2025883a 	mov	r18,r4
8111a87c:	b80d883a 	mov	r6,r23
8111a880:	81001704 	addi	r4,r16,92
8111a884:	000b883a 	mov	r5,zero
8111a888:	80000015 	stw	zero,0(r16)
8111a88c:	80000115 	stw	zero,4(r16)
8111a890:	80000215 	stw	zero,8(r16)
8111a894:	8080030d 	sth	r2,12(r16)
8111a898:	80001915 	stw	zero,100(r16)
8111a89c:	8000038d 	sth	zero,14(r16)
8111a8a0:	80000415 	stw	zero,16(r16)
8111a8a4:	80000515 	stw	zero,20(r16)
8111a8a8:	80000615 	stw	zero,24(r16)
8111a8ac:	11122140 	call	81112214 <memset>
8111a8b0:	05a04474 	movhi	r22,33041
8111a8b4:	94400217 	ldw	r17,8(r18)
8111a8b8:	05604474 	movhi	r21,33041
8111a8bc:	05204474 	movhi	r20,33041
8111a8c0:	04e04474 	movhi	r19,33041
8111a8c4:	b58a2804 	addi	r22,r22,10400
8111a8c8:	ad4a4104 	addi	r21,r21,10500
8111a8cc:	a50a6204 	addi	r20,r20,10632
8111a8d0:	9cca7b04 	addi	r19,r19,10732
8111a8d4:	85800815 	stw	r22,32(r16)
8111a8d8:	85400915 	stw	r21,36(r16)
8111a8dc:	85000a15 	stw	r20,40(r16)
8111a8e0:	84c00b15 	stw	r19,44(r16)
8111a8e4:	84000715 	stw	r16,28(r16)
8111a8e8:	00800284 	movi	r2,10
8111a8ec:	8880030d 	sth	r2,12(r17)
8111a8f0:	00800044 	movi	r2,1
8111a8f4:	b80d883a 	mov	r6,r23
8111a8f8:	89001704 	addi	r4,r17,92
8111a8fc:	000b883a 	mov	r5,zero
8111a900:	88000015 	stw	zero,0(r17)
8111a904:	88000115 	stw	zero,4(r17)
8111a908:	88000215 	stw	zero,8(r17)
8111a90c:	88001915 	stw	zero,100(r17)
8111a910:	8880038d 	sth	r2,14(r17)
8111a914:	88000415 	stw	zero,16(r17)
8111a918:	88000515 	stw	zero,20(r17)
8111a91c:	88000615 	stw	zero,24(r17)
8111a920:	11122140 	call	81112214 <memset>
8111a924:	94000317 	ldw	r16,12(r18)
8111a928:	00800484 	movi	r2,18
8111a92c:	8c400715 	stw	r17,28(r17)
8111a930:	8d800815 	stw	r22,32(r17)
8111a934:	8d400915 	stw	r21,36(r17)
8111a938:	8d000a15 	stw	r20,40(r17)
8111a93c:	8cc00b15 	stw	r19,44(r17)
8111a940:	8080030d 	sth	r2,12(r16)
8111a944:	00800084 	movi	r2,2
8111a948:	80000015 	stw	zero,0(r16)
8111a94c:	80000115 	stw	zero,4(r16)
8111a950:	80000215 	stw	zero,8(r16)
8111a954:	80001915 	stw	zero,100(r16)
8111a958:	8080038d 	sth	r2,14(r16)
8111a95c:	80000415 	stw	zero,16(r16)
8111a960:	80000515 	stw	zero,20(r16)
8111a964:	80000615 	stw	zero,24(r16)
8111a968:	b80d883a 	mov	r6,r23
8111a96c:	000b883a 	mov	r5,zero
8111a970:	81001704 	addi	r4,r16,92
8111a974:	11122140 	call	81112214 <memset>
8111a978:	00800044 	movi	r2,1
8111a97c:	84000715 	stw	r16,28(r16)
8111a980:	85800815 	stw	r22,32(r16)
8111a984:	85400915 	stw	r21,36(r16)
8111a988:	85000a15 	stw	r20,40(r16)
8111a98c:	84c00b15 	stw	r19,44(r16)
8111a990:	90800e15 	stw	r2,56(r18)
8111a994:	dfc00817 	ldw	ra,32(sp)
8111a998:	ddc00717 	ldw	r23,28(sp)
8111a99c:	dd800617 	ldw	r22,24(sp)
8111a9a0:	dd400517 	ldw	r21,20(sp)
8111a9a4:	dd000417 	ldw	r20,16(sp)
8111a9a8:	dcc00317 	ldw	r19,12(sp)
8111a9ac:	dc800217 	ldw	r18,8(sp)
8111a9b0:	dc400117 	ldw	r17,4(sp)
8111a9b4:	dc000017 	ldw	r16,0(sp)
8111a9b8:	dec00904 	addi	sp,sp,36
8111a9bc:	f800283a 	ret

8111a9c0 <__fp_lock>:
8111a9c0:	0005883a 	mov	r2,zero
8111a9c4:	f800283a 	ret

8111a9c8 <__sfmoreglue>:
8111a9c8:	defffc04 	addi	sp,sp,-16
8111a9cc:	de00012e 	bgeu	sp,et,8111a9d4 <__sfmoreglue+0xc>
8111a9d0:	003b68fa 	trap	3
8111a9d4:	dc400115 	stw	r17,4(sp)
8111a9d8:	2c7fffc4 	addi	r17,r5,-1
8111a9dc:	8c401a24 	muli	r17,r17,104
8111a9e0:	dc800215 	stw	r18,8(sp)
8111a9e4:	2825883a 	mov	r18,r5
8111a9e8:	89401d04 	addi	r5,r17,116
8111a9ec:	dc000015 	stw	r16,0(sp)
8111a9f0:	dfc00315 	stw	ra,12(sp)
8111a9f4:	11118b00 	call	811118b0 <_malloc_r>
8111a9f8:	1021883a 	mov	r16,r2
8111a9fc:	10000726 	beq	r2,zero,8111aa1c <__sfmoreglue+0x54>
8111aa00:	11000304 	addi	r4,r2,12
8111aa04:	10000015 	stw	zero,0(r2)
8111aa08:	14800115 	stw	r18,4(r2)
8111aa0c:	11000215 	stw	r4,8(r2)
8111aa10:	89801a04 	addi	r6,r17,104
8111aa14:	000b883a 	mov	r5,zero
8111aa18:	11122140 	call	81112214 <memset>
8111aa1c:	8005883a 	mov	r2,r16
8111aa20:	dfc00317 	ldw	ra,12(sp)
8111aa24:	dc800217 	ldw	r18,8(sp)
8111aa28:	dc400117 	ldw	r17,4(sp)
8111aa2c:	dc000017 	ldw	r16,0(sp)
8111aa30:	dec00404 	addi	sp,sp,16
8111aa34:	f800283a 	ret

8111aa38 <__sfp>:
8111aa38:	defffb04 	addi	sp,sp,-20
8111aa3c:	de00012e 	bgeu	sp,et,8111aa44 <__sfp+0xc>
8111aa40:	003b68fa 	trap	3
8111aa44:	dc000015 	stw	r16,0(sp)
8111aa48:	04204534 	movhi	r16,33044
8111aa4c:	843f9c04 	addi	r16,r16,-400
8111aa50:	dcc00315 	stw	r19,12(sp)
8111aa54:	2027883a 	mov	r19,r4
8111aa58:	81000017 	ldw	r4,0(r16)
8111aa5c:	dfc00415 	stw	ra,16(sp)
8111aa60:	dc800215 	stw	r18,8(sp)
8111aa64:	20800e17 	ldw	r2,56(r4)
8111aa68:	dc400115 	stw	r17,4(sp)
8111aa6c:	1000021e 	bne	r2,zero,8111aa78 <__sfp+0x40>
8111aa70:	111a81c0 	call	8111a81c <__sinit.part.1>
8111aa74:	81000017 	ldw	r4,0(r16)
8111aa78:	2480b804 	addi	r18,r4,736
8111aa7c:	047fffc4 	movi	r17,-1
8111aa80:	91000117 	ldw	r4,4(r18)
8111aa84:	94000217 	ldw	r16,8(r18)
8111aa88:	213fffc4 	addi	r4,r4,-1
8111aa8c:	20000a16 	blt	r4,zero,8111aab8 <__sfp+0x80>
8111aa90:	8080030f 	ldh	r2,12(r16)
8111aa94:	10000c26 	beq	r2,zero,8111aac8 <__sfp+0x90>
8111aa98:	80c01d04 	addi	r3,r16,116
8111aa9c:	00000206 	br	8111aaa8 <__sfp+0x70>
8111aaa0:	18bfe60f 	ldh	r2,-104(r3)
8111aaa4:	10000826 	beq	r2,zero,8111aac8 <__sfp+0x90>
8111aaa8:	213fffc4 	addi	r4,r4,-1
8111aaac:	1c3ffd04 	addi	r16,r3,-12
8111aab0:	18c01a04 	addi	r3,r3,104
8111aab4:	247ffa1e 	bne	r4,r17,8111aaa0 <__reset+0xfb0faaa0>
8111aab8:	90800017 	ldw	r2,0(r18)
8111aabc:	10001d26 	beq	r2,zero,8111ab34 <__sfp+0xfc>
8111aac0:	1025883a 	mov	r18,r2
8111aac4:	003fee06 	br	8111aa80 <__reset+0xfb0faa80>
8111aac8:	00bfffc4 	movi	r2,-1
8111aacc:	8080038d 	sth	r2,14(r16)
8111aad0:	00800044 	movi	r2,1
8111aad4:	8080030d 	sth	r2,12(r16)
8111aad8:	80001915 	stw	zero,100(r16)
8111aadc:	80000015 	stw	zero,0(r16)
8111aae0:	80000215 	stw	zero,8(r16)
8111aae4:	80000115 	stw	zero,4(r16)
8111aae8:	80000415 	stw	zero,16(r16)
8111aaec:	80000515 	stw	zero,20(r16)
8111aaf0:	80000615 	stw	zero,24(r16)
8111aaf4:	01800204 	movi	r6,8
8111aaf8:	000b883a 	mov	r5,zero
8111aafc:	81001704 	addi	r4,r16,92
8111ab00:	11122140 	call	81112214 <memset>
8111ab04:	8005883a 	mov	r2,r16
8111ab08:	80000c15 	stw	zero,48(r16)
8111ab0c:	80000d15 	stw	zero,52(r16)
8111ab10:	80001115 	stw	zero,68(r16)
8111ab14:	80001215 	stw	zero,72(r16)
8111ab18:	dfc00417 	ldw	ra,16(sp)
8111ab1c:	dcc00317 	ldw	r19,12(sp)
8111ab20:	dc800217 	ldw	r18,8(sp)
8111ab24:	dc400117 	ldw	r17,4(sp)
8111ab28:	dc000017 	ldw	r16,0(sp)
8111ab2c:	dec00504 	addi	sp,sp,20
8111ab30:	f800283a 	ret
8111ab34:	01400104 	movi	r5,4
8111ab38:	9809883a 	mov	r4,r19
8111ab3c:	111a9c80 	call	8111a9c8 <__sfmoreglue>
8111ab40:	90800015 	stw	r2,0(r18)
8111ab44:	103fde1e 	bne	r2,zero,8111aac0 <__reset+0xfb0faac0>
8111ab48:	00800304 	movi	r2,12
8111ab4c:	98800015 	stw	r2,0(r19)
8111ab50:	0005883a 	mov	r2,zero
8111ab54:	003ff006 	br	8111ab18 <__reset+0xfb0fab18>

8111ab58 <_cleanup>:
8111ab58:	00a04534 	movhi	r2,33044
8111ab5c:	10bf9c04 	addi	r2,r2,-400
8111ab60:	11000017 	ldw	r4,0(r2)
8111ab64:	016044b4 	movhi	r5,33042
8111ab68:	29497304 	addi	r5,r5,9676
8111ab6c:	111b8b01 	jmpi	8111b8b0 <_fwalk_reent>

8111ab70 <__sinit>:
8111ab70:	20800e17 	ldw	r2,56(r4)
8111ab74:	10000126 	beq	r2,zero,8111ab7c <__sinit+0xc>
8111ab78:	f800283a 	ret
8111ab7c:	111a81c1 	jmpi	8111a81c <__sinit.part.1>

8111ab80 <__sfp_lock_acquire>:
8111ab80:	f800283a 	ret

8111ab84 <__sfp_lock_release>:
8111ab84:	f800283a 	ret

8111ab88 <__sinit_lock_acquire>:
8111ab88:	f800283a 	ret

8111ab8c <__sinit_lock_release>:
8111ab8c:	f800283a 	ret

8111ab90 <__fp_lock_all>:
8111ab90:	00a04534 	movhi	r2,33044
8111ab94:	10bf9d04 	addi	r2,r2,-396
8111ab98:	11000017 	ldw	r4,0(r2)
8111ab9c:	016044b4 	movhi	r5,33042
8111aba0:	296a7004 	addi	r5,r5,-22080
8111aba4:	111b7e41 	jmpi	8111b7e4 <_fwalk>

8111aba8 <__fp_unlock_all>:
8111aba8:	00a04534 	movhi	r2,33044
8111abac:	10bf9d04 	addi	r2,r2,-396
8111abb0:	11000017 	ldw	r4,0(r2)
8111abb4:	016044b4 	movhi	r5,33042
8111abb8:	296a0204 	addi	r5,r5,-22520
8111abbc:	111b7e41 	jmpi	8111b7e4 <_fwalk>

8111abc0 <__sflags>:
8111abc0:	28800007 	ldb	r2,0(r5)
8111abc4:	00c01c84 	movi	r3,114
8111abc8:	10c02426 	beq	r2,r3,8111ac5c <__sflags+0x9c>
8111abcc:	00c01dc4 	movi	r3,119
8111abd0:	10c01e26 	beq	r2,r3,8111ac4c <__sflags+0x8c>
8111abd4:	00c01844 	movi	r3,97
8111abd8:	10c00426 	beq	r2,r3,8111abec <__sflags+0x2c>
8111abdc:	00800584 	movi	r2,22
8111abe0:	20800015 	stw	r2,0(r4)
8111abe4:	0005883a 	mov	r2,zero
8111abe8:	f800283a 	ret
8111abec:	02c08204 	movi	r11,520
8111abf0:	01000044 	movi	r4,1
8111abf4:	00804204 	movi	r2,264
8111abf8:	01c00ac4 	movi	r7,43
8111abfc:	02bff8c4 	movi	r10,-29
8111ac00:	027fff04 	movi	r9,-4
8111ac04:	02001e04 	movi	r8,120
8111ac08:	29400044 	addi	r5,r5,1
8111ac0c:	28c00007 	ldb	r3,0(r5)
8111ac10:	18000626 	beq	r3,zero,8111ac2c <__sflags+0x6c>
8111ac14:	19c00826 	beq	r3,r7,8111ac38 <__sflags+0x78>
8111ac18:	1a3ffb1e 	bne	r3,r8,8111ac08 <__reset+0xfb0fac08>
8111ac1c:	29400044 	addi	r5,r5,1
8111ac20:	28c00007 	ldb	r3,0(r5)
8111ac24:	21020014 	ori	r4,r4,2048
8111ac28:	183ffa1e 	bne	r3,zero,8111ac14 <__reset+0xfb0fac14>
8111ac2c:	22c8b03a 	or	r4,r4,r11
8111ac30:	31000015 	stw	r4,0(r6)
8111ac34:	f800283a 	ret
8111ac38:	1284703a 	and	r2,r2,r10
8111ac3c:	2248703a 	and	r4,r4,r9
8111ac40:	10800414 	ori	r2,r2,16
8111ac44:	21000094 	ori	r4,r4,2
8111ac48:	003fef06 	br	8111ac08 <__reset+0xfb0fac08>
8111ac4c:	02c18004 	movi	r11,1536
8111ac50:	01000044 	movi	r4,1
8111ac54:	00800204 	movi	r2,8
8111ac58:	003fe706 	br	8111abf8 <__reset+0xfb0fabf8>
8111ac5c:	0017883a 	mov	r11,zero
8111ac60:	0009883a 	mov	r4,zero
8111ac64:	00800104 	movi	r2,4
8111ac68:	003fe306 	br	8111abf8 <__reset+0xfb0fabf8>

8111ac6c <_fread_r>:
8111ac6c:	defff404 	addi	sp,sp,-48
8111ac70:	de00012e 	bgeu	sp,et,8111ac78 <_fread_r+0xc>
8111ac74:	003b68fa 	trap	3
8111ac78:	dd800815 	stw	r22,32(sp)
8111ac7c:	39ad383a 	mul	r22,r7,r6
8111ac80:	dc000215 	stw	r16,8(sp)
8111ac84:	dfc00b15 	stw	ra,44(sp)
8111ac88:	df000a15 	stw	fp,40(sp)
8111ac8c:	ddc00915 	stw	r23,36(sp)
8111ac90:	dd400715 	stw	r21,28(sp)
8111ac94:	dd000615 	stw	r20,24(sp)
8111ac98:	dcc00515 	stw	r19,20(sp)
8111ac9c:	dc800415 	stw	r18,16(sp)
8111aca0:	dc400315 	stw	r17,12(sp)
8111aca4:	dc000c17 	ldw	r16,48(sp)
8111aca8:	b0003b26 	beq	r22,zero,8111ad98 <_fread_r+0x12c>
8111acac:	302f883a 	mov	r23,r6
8111acb0:	382b883a 	mov	r21,r7
8111acb4:	2029883a 	mov	r20,r4
8111acb8:	2827883a 	mov	r19,r5
8111acbc:	20000226 	beq	r4,zero,8111acc8 <_fread_r+0x5c>
8111acc0:	20800e17 	ldw	r2,56(r4)
8111acc4:	10006e26 	beq	r2,zero,8111ae80 <_fread_r+0x214>
8111acc8:	8080030b 	ldhu	r2,12(r16)
8111accc:	10c8000c 	andi	r3,r2,8192
8111acd0:	1800061e 	bne	r3,zero,8111acec <_fread_r+0x80>
8111acd4:	81001917 	ldw	r4,100(r16)
8111acd8:	00f7ffc4 	movi	r3,-8193
8111acdc:	10880014 	ori	r2,r2,8192
8111ace0:	20c6703a 	and	r3,r4,r3
8111ace4:	8080030d 	sth	r2,12(r16)
8111ace8:	80c01915 	stw	r3,100(r16)
8111acec:	84400117 	ldw	r17,4(r16)
8111acf0:	88005f16 	blt	r17,zero,8111ae70 <_fread_r+0x204>
8111acf4:	8809883a 	mov	r4,r17
8111acf8:	1080008c 	andi	r2,r2,2
8111acfc:	1000281e 	bne	r2,zero,8111ada0 <_fread_r+0x134>
8111ad00:	b025883a 	mov	r18,r22
8111ad04:	00000b06 	br	8111ad34 <_fread_r+0xc8>
8111ad08:	11120c40 	call	811120c4 <memcpy>
8111ad0c:	80800017 	ldw	r2,0(r16)
8111ad10:	9c67883a 	add	r19,r19,r17
8111ad14:	9465c83a 	sub	r18,r18,r17
8111ad18:	1463883a 	add	r17,r2,r17
8111ad1c:	800b883a 	mov	r5,r16
8111ad20:	a009883a 	mov	r4,r20
8111ad24:	84400015 	stw	r17,0(r16)
8111ad28:	11125180 	call	81112518 <__srefill_r>
8111ad2c:	10004c1e 	bne	r2,zero,8111ae60 <_fread_r+0x1f4>
8111ad30:	84400117 	ldw	r17,4(r16)
8111ad34:	880d883a 	mov	r6,r17
8111ad38:	9809883a 	mov	r4,r19
8111ad3c:	81400017 	ldw	r5,0(r16)
8111ad40:	8cbff136 	bltu	r17,r18,8111ad08 <__reset+0xfb0fad08>
8111ad44:	900d883a 	mov	r6,r18
8111ad48:	11120c40 	call	811120c4 <memcpy>
8111ad4c:	80c00117 	ldw	r3,4(r16)
8111ad50:	81000017 	ldw	r4,0(r16)
8111ad54:	a805883a 	mov	r2,r21
8111ad58:	1c87c83a 	sub	r3,r3,r18
8111ad5c:	24a5883a 	add	r18,r4,r18
8111ad60:	80c00115 	stw	r3,4(r16)
8111ad64:	84800015 	stw	r18,0(r16)
8111ad68:	dfc00b17 	ldw	ra,44(sp)
8111ad6c:	df000a17 	ldw	fp,40(sp)
8111ad70:	ddc00917 	ldw	r23,36(sp)
8111ad74:	dd800817 	ldw	r22,32(sp)
8111ad78:	dd400717 	ldw	r21,28(sp)
8111ad7c:	dd000617 	ldw	r20,24(sp)
8111ad80:	dcc00517 	ldw	r19,20(sp)
8111ad84:	dc800417 	ldw	r18,16(sp)
8111ad88:	dc400317 	ldw	r17,12(sp)
8111ad8c:	dc000217 	ldw	r16,8(sp)
8111ad90:	dec00c04 	addi	sp,sp,48
8111ad94:	f800283a 	ret
8111ad98:	0005883a 	mov	r2,zero
8111ad9c:	003ff206 	br	8111ad68 <__reset+0xfb0fad68>
8111ada0:	b007883a 	mov	r3,r22
8111ada4:	2580012e 	bgeu	r4,r22,8111adac <_fread_r+0x140>
8111ada8:	2007883a 	mov	r3,r4
8111adac:	81400017 	ldw	r5,0(r16)
8111adb0:	180d883a 	mov	r6,r3
8111adb4:	9809883a 	mov	r4,r19
8111adb8:	d8c00115 	stw	r3,4(sp)
8111adbc:	11120c40 	call	811120c4 <memcpy>
8111adc0:	d8c00117 	ldw	r3,4(sp)
8111adc4:	84400017 	ldw	r17,0(r16)
8111adc8:	80800117 	ldw	r2,4(r16)
8111adcc:	81400c17 	ldw	r5,48(r16)
8111add0:	88e3883a 	add	r17,r17,r3
8111add4:	10c5c83a 	sub	r2,r2,r3
8111add8:	84400015 	stw	r17,0(r16)
8111addc:	80800115 	stw	r2,4(r16)
8111ade0:	b0e5c83a 	sub	r18,r22,r3
8111ade4:	28002b26 	beq	r5,zero,8111ae94 <_fread_r+0x228>
8111ade8:	90002b26 	beq	r18,zero,8111ae98 <_fread_r+0x22c>
8111adec:	80801004 	addi	r2,r16,64
8111adf0:	28800526 	beq	r5,r2,8111ae08 <_fread_r+0x19c>
8111adf4:	a009883a 	mov	r4,r20
8111adf8:	d8c00115 	stw	r3,4(sp)
8111adfc:	111b0080 	call	8111b008 <_free_r>
8111ae00:	d8c00117 	ldw	r3,4(sp)
8111ae04:	84400017 	ldw	r17,0(r16)
8111ae08:	80000c15 	stw	zero,48(r16)
8111ae0c:	80800517 	ldw	r2,20(r16)
8111ae10:	87000417 	ldw	fp,16(r16)
8111ae14:	98e7883a 	add	r19,r19,r3
8111ae18:	d8800015 	stw	r2,0(sp)
8111ae1c:	00000106 	br	8111ae24 <_fread_r+0x1b8>
8111ae20:	90001d26 	beq	r18,zero,8111ae98 <_fread_r+0x22c>
8111ae24:	84c00415 	stw	r19,16(r16)
8111ae28:	84800515 	stw	r18,20(r16)
8111ae2c:	84c00015 	stw	r19,0(r16)
8111ae30:	a009883a 	mov	r4,r20
8111ae34:	800b883a 	mov	r5,r16
8111ae38:	11125180 	call	81112518 <__srefill_r>
8111ae3c:	d9000017 	ldw	r4,0(sp)
8111ae40:	80c00117 	ldw	r3,4(r16)
8111ae44:	87000415 	stw	fp,16(r16)
8111ae48:	81000515 	stw	r4,20(r16)
8111ae4c:	84400015 	stw	r17,0(r16)
8111ae50:	80000115 	stw	zero,4(r16)
8111ae54:	90e5c83a 	sub	r18,r18,r3
8111ae58:	98e7883a 	add	r19,r19,r3
8111ae5c:	103ff026 	beq	r2,zero,8111ae20 <__reset+0xfb0fae20>
8111ae60:	b80b883a 	mov	r5,r23
8111ae64:	b489c83a 	sub	r4,r22,r18
8111ae68:	11244f00 	call	811244f0 <__udivsi3>
8111ae6c:	003fbe06 	br	8111ad68 <__reset+0xfb0fad68>
8111ae70:	80000115 	stw	zero,4(r16)
8111ae74:	0009883a 	mov	r4,zero
8111ae78:	0023883a 	mov	r17,zero
8111ae7c:	003f9e06 	br	8111acf8 <__reset+0xfb0facf8>
8111ae80:	111ab700 	call	8111ab70 <__sinit>
8111ae84:	8080030b 	ldhu	r2,12(r16)
8111ae88:	10c8000c 	andi	r3,r2,8192
8111ae8c:	183f971e 	bne	r3,zero,8111acec <__reset+0xfb0facec>
8111ae90:	003f9006 	br	8111acd4 <__reset+0xfb0facd4>
8111ae94:	903fdd1e 	bne	r18,zero,8111ae0c <__reset+0xfb0fae0c>
8111ae98:	a805883a 	mov	r2,r21
8111ae9c:	003fb206 	br	8111ad68 <__reset+0xfb0fad68>

8111aea0 <fread>:
8111aea0:	defffe04 	addi	sp,sp,-8
8111aea4:	00a04534 	movhi	r2,33044
8111aea8:	de00012e 	bgeu	sp,et,8111aeb0 <fread+0x10>
8111aeac:	003b68fa 	trap	3
8111aeb0:	10bf9d04 	addi	r2,r2,-396
8111aeb4:	d9c00015 	stw	r7,0(sp)
8111aeb8:	300f883a 	mov	r7,r6
8111aebc:	280d883a 	mov	r6,r5
8111aec0:	200b883a 	mov	r5,r4
8111aec4:	11000017 	ldw	r4,0(r2)
8111aec8:	dfc00115 	stw	ra,4(sp)
8111aecc:	111ac6c0 	call	8111ac6c <_fread_r>
8111aed0:	dfc00117 	ldw	ra,4(sp)
8111aed4:	dec00204 	addi	sp,sp,8
8111aed8:	f800283a 	ret

8111aedc <_malloc_trim_r>:
8111aedc:	defffb04 	addi	sp,sp,-20
8111aee0:	de00012e 	bgeu	sp,et,8111aee8 <_malloc_trim_r+0xc>
8111aee4:	003b68fa 	trap	3
8111aee8:	dcc00315 	stw	r19,12(sp)
8111aeec:	04e04534 	movhi	r19,33044
8111aef0:	dc800215 	stw	r18,8(sp)
8111aef4:	dc400115 	stw	r17,4(sp)
8111aef8:	dc000015 	stw	r16,0(sp)
8111aefc:	dfc00415 	stw	ra,16(sp)
8111af00:	2821883a 	mov	r16,r5
8111af04:	9cf98204 	addi	r19,r19,-6648
8111af08:	2025883a 	mov	r18,r4
8111af0c:	11279400 	call	81127940 <__malloc_lock>
8111af10:	98800217 	ldw	r2,8(r19)
8111af14:	14400117 	ldw	r17,4(r2)
8111af18:	00bfff04 	movi	r2,-4
8111af1c:	88a2703a 	and	r17,r17,r2
8111af20:	8c21c83a 	sub	r16,r17,r16
8111af24:	8403fbc4 	addi	r16,r16,4079
8111af28:	8020d33a 	srli	r16,r16,12
8111af2c:	0083ffc4 	movi	r2,4095
8111af30:	843fffc4 	addi	r16,r16,-1
8111af34:	8020933a 	slli	r16,r16,12
8111af38:	1400060e 	bge	r2,r16,8111af54 <_malloc_trim_r+0x78>
8111af3c:	000b883a 	mov	r5,zero
8111af40:	9009883a 	mov	r4,r18
8111af44:	11126f40 	call	811126f4 <_sbrk_r>
8111af48:	98c00217 	ldw	r3,8(r19)
8111af4c:	1c47883a 	add	r3,r3,r17
8111af50:	10c00a26 	beq	r2,r3,8111af7c <_malloc_trim_r+0xa0>
8111af54:	9009883a 	mov	r4,r18
8111af58:	1127a680 	call	81127a68 <__malloc_unlock>
8111af5c:	0005883a 	mov	r2,zero
8111af60:	dfc00417 	ldw	ra,16(sp)
8111af64:	dcc00317 	ldw	r19,12(sp)
8111af68:	dc800217 	ldw	r18,8(sp)
8111af6c:	dc400117 	ldw	r17,4(sp)
8111af70:	dc000017 	ldw	r16,0(sp)
8111af74:	dec00504 	addi	sp,sp,20
8111af78:	f800283a 	ret
8111af7c:	040bc83a 	sub	r5,zero,r16
8111af80:	9009883a 	mov	r4,r18
8111af84:	11126f40 	call	811126f4 <_sbrk_r>
8111af88:	00ffffc4 	movi	r3,-1
8111af8c:	10c00d26 	beq	r2,r3,8111afc4 <_malloc_trim_r+0xe8>
8111af90:	00e04534 	movhi	r3,33044
8111af94:	18c05804 	addi	r3,r3,352
8111af98:	18800017 	ldw	r2,0(r3)
8111af9c:	99000217 	ldw	r4,8(r19)
8111afa0:	8c23c83a 	sub	r17,r17,r16
8111afa4:	8c400054 	ori	r17,r17,1
8111afa8:	1421c83a 	sub	r16,r2,r16
8111afac:	24400115 	stw	r17,4(r4)
8111afb0:	9009883a 	mov	r4,r18
8111afb4:	1c000015 	stw	r16,0(r3)
8111afb8:	1127a680 	call	81127a68 <__malloc_unlock>
8111afbc:	00800044 	movi	r2,1
8111afc0:	003fe706 	br	8111af60 <__reset+0xfb0faf60>
8111afc4:	000b883a 	mov	r5,zero
8111afc8:	9009883a 	mov	r4,r18
8111afcc:	11126f40 	call	811126f4 <_sbrk_r>
8111afd0:	99000217 	ldw	r4,8(r19)
8111afd4:	014003c4 	movi	r5,15
8111afd8:	1107c83a 	sub	r3,r2,r4
8111afdc:	28ffdd0e 	bge	r5,r3,8111af54 <__reset+0xfb0faf54>
8111afe0:	01604534 	movhi	r5,33044
8111afe4:	297f9e04 	addi	r5,r5,-392
8111afe8:	29400017 	ldw	r5,0(r5)
8111afec:	18c00054 	ori	r3,r3,1
8111aff0:	20c00115 	stw	r3,4(r4)
8111aff4:	00e04534 	movhi	r3,33044
8111aff8:	1145c83a 	sub	r2,r2,r5
8111affc:	18c05804 	addi	r3,r3,352
8111b000:	18800015 	stw	r2,0(r3)
8111b004:	003fd306 	br	8111af54 <__reset+0xfb0faf54>

8111b008 <_free_r>:
8111b008:	28004326 	beq	r5,zero,8111b118 <_free_r+0x110>
8111b00c:	defffd04 	addi	sp,sp,-12
8111b010:	de00012e 	bgeu	sp,et,8111b018 <_free_r+0x10>
8111b014:	003b68fa 	trap	3
8111b018:	dc400115 	stw	r17,4(sp)
8111b01c:	dc000015 	stw	r16,0(sp)
8111b020:	2023883a 	mov	r17,r4
8111b024:	2821883a 	mov	r16,r5
8111b028:	dfc00215 	stw	ra,8(sp)
8111b02c:	11279400 	call	81127940 <__malloc_lock>
8111b030:	81ffff17 	ldw	r7,-4(r16)
8111b034:	00bfff84 	movi	r2,-2
8111b038:	01204534 	movhi	r4,33044
8111b03c:	81bffe04 	addi	r6,r16,-8
8111b040:	3884703a 	and	r2,r7,r2
8111b044:	21398204 	addi	r4,r4,-6648
8111b048:	308b883a 	add	r5,r6,r2
8111b04c:	2a400117 	ldw	r9,4(r5)
8111b050:	22000217 	ldw	r8,8(r4)
8111b054:	00ffff04 	movi	r3,-4
8111b058:	48c6703a 	and	r3,r9,r3
8111b05c:	2a005726 	beq	r5,r8,8111b1bc <_free_r+0x1b4>
8111b060:	28c00115 	stw	r3,4(r5)
8111b064:	39c0004c 	andi	r7,r7,1
8111b068:	3800091e 	bne	r7,zero,8111b090 <_free_r+0x88>
8111b06c:	823ffe17 	ldw	r8,-8(r16)
8111b070:	22400204 	addi	r9,r4,8
8111b074:	320dc83a 	sub	r6,r6,r8
8111b078:	31c00217 	ldw	r7,8(r6)
8111b07c:	1205883a 	add	r2,r2,r8
8111b080:	3a406526 	beq	r7,r9,8111b218 <_free_r+0x210>
8111b084:	32000317 	ldw	r8,12(r6)
8111b088:	3a000315 	stw	r8,12(r7)
8111b08c:	41c00215 	stw	r7,8(r8)
8111b090:	28cf883a 	add	r7,r5,r3
8111b094:	39c00117 	ldw	r7,4(r7)
8111b098:	39c0004c 	andi	r7,r7,1
8111b09c:	38003a26 	beq	r7,zero,8111b188 <_free_r+0x180>
8111b0a0:	10c00054 	ori	r3,r2,1
8111b0a4:	30c00115 	stw	r3,4(r6)
8111b0a8:	3087883a 	add	r3,r6,r2
8111b0ac:	18800015 	stw	r2,0(r3)
8111b0b0:	00c07fc4 	movi	r3,511
8111b0b4:	18801936 	bltu	r3,r2,8111b11c <_free_r+0x114>
8111b0b8:	1004d0fa 	srli	r2,r2,3
8111b0bc:	01c00044 	movi	r7,1
8111b0c0:	21400117 	ldw	r5,4(r4)
8111b0c4:	10c00044 	addi	r3,r2,1
8111b0c8:	18c7883a 	add	r3,r3,r3
8111b0cc:	1005d0ba 	srai	r2,r2,2
8111b0d0:	18c7883a 	add	r3,r3,r3
8111b0d4:	18c7883a 	add	r3,r3,r3
8111b0d8:	1907883a 	add	r3,r3,r4
8111b0dc:	3884983a 	sll	r2,r7,r2
8111b0e0:	19c00017 	ldw	r7,0(r3)
8111b0e4:	1a3ffe04 	addi	r8,r3,-8
8111b0e8:	1144b03a 	or	r2,r2,r5
8111b0ec:	32000315 	stw	r8,12(r6)
8111b0f0:	31c00215 	stw	r7,8(r6)
8111b0f4:	20800115 	stw	r2,4(r4)
8111b0f8:	19800015 	stw	r6,0(r3)
8111b0fc:	39800315 	stw	r6,12(r7)
8111b100:	8809883a 	mov	r4,r17
8111b104:	dfc00217 	ldw	ra,8(sp)
8111b108:	dc400117 	ldw	r17,4(sp)
8111b10c:	dc000017 	ldw	r16,0(sp)
8111b110:	dec00304 	addi	sp,sp,12
8111b114:	1127a681 	jmpi	81127a68 <__malloc_unlock>
8111b118:	f800283a 	ret
8111b11c:	100ad27a 	srli	r5,r2,9
8111b120:	00c00104 	movi	r3,4
8111b124:	19404a36 	bltu	r3,r5,8111b250 <_free_r+0x248>
8111b128:	100ad1ba 	srli	r5,r2,6
8111b12c:	28c00e44 	addi	r3,r5,57
8111b130:	18c7883a 	add	r3,r3,r3
8111b134:	29400e04 	addi	r5,r5,56
8111b138:	18c7883a 	add	r3,r3,r3
8111b13c:	18c7883a 	add	r3,r3,r3
8111b140:	1909883a 	add	r4,r3,r4
8111b144:	20c00017 	ldw	r3,0(r4)
8111b148:	01e04534 	movhi	r7,33044
8111b14c:	213ffe04 	addi	r4,r4,-8
8111b150:	39f98204 	addi	r7,r7,-6648
8111b154:	20c04426 	beq	r4,r3,8111b268 <_free_r+0x260>
8111b158:	01ffff04 	movi	r7,-4
8111b15c:	19400117 	ldw	r5,4(r3)
8111b160:	29ca703a 	and	r5,r5,r7
8111b164:	1140022e 	bgeu	r2,r5,8111b170 <_free_r+0x168>
8111b168:	18c00217 	ldw	r3,8(r3)
8111b16c:	20fffb1e 	bne	r4,r3,8111b15c <__reset+0xfb0fb15c>
8111b170:	19000317 	ldw	r4,12(r3)
8111b174:	31000315 	stw	r4,12(r6)
8111b178:	30c00215 	stw	r3,8(r6)
8111b17c:	21800215 	stw	r6,8(r4)
8111b180:	19800315 	stw	r6,12(r3)
8111b184:	003fde06 	br	8111b100 <__reset+0xfb0fb100>
8111b188:	29c00217 	ldw	r7,8(r5)
8111b18c:	10c5883a 	add	r2,r2,r3
8111b190:	00e04534 	movhi	r3,33044
8111b194:	18f98404 	addi	r3,r3,-6640
8111b198:	38c03b26 	beq	r7,r3,8111b288 <_free_r+0x280>
8111b19c:	2a000317 	ldw	r8,12(r5)
8111b1a0:	11400054 	ori	r5,r2,1
8111b1a4:	3087883a 	add	r3,r6,r2
8111b1a8:	3a000315 	stw	r8,12(r7)
8111b1ac:	41c00215 	stw	r7,8(r8)
8111b1b0:	31400115 	stw	r5,4(r6)
8111b1b4:	18800015 	stw	r2,0(r3)
8111b1b8:	003fbd06 	br	8111b0b0 <__reset+0xfb0fb0b0>
8111b1bc:	39c0004c 	andi	r7,r7,1
8111b1c0:	10c5883a 	add	r2,r2,r3
8111b1c4:	3800071e 	bne	r7,zero,8111b1e4 <_free_r+0x1dc>
8111b1c8:	81fffe17 	ldw	r7,-8(r16)
8111b1cc:	31cdc83a 	sub	r6,r6,r7
8111b1d0:	30c00317 	ldw	r3,12(r6)
8111b1d4:	31400217 	ldw	r5,8(r6)
8111b1d8:	11c5883a 	add	r2,r2,r7
8111b1dc:	28c00315 	stw	r3,12(r5)
8111b1e0:	19400215 	stw	r5,8(r3)
8111b1e4:	10c00054 	ori	r3,r2,1
8111b1e8:	30c00115 	stw	r3,4(r6)
8111b1ec:	00e04534 	movhi	r3,33044
8111b1f0:	18ff9f04 	addi	r3,r3,-388
8111b1f4:	18c00017 	ldw	r3,0(r3)
8111b1f8:	21800215 	stw	r6,8(r4)
8111b1fc:	10ffc036 	bltu	r2,r3,8111b100 <__reset+0xfb0fb100>
8111b200:	00a04534 	movhi	r2,33044
8111b204:	10bff904 	addi	r2,r2,-28
8111b208:	11400017 	ldw	r5,0(r2)
8111b20c:	8809883a 	mov	r4,r17
8111b210:	111aedc0 	call	8111aedc <_malloc_trim_r>
8111b214:	003fba06 	br	8111b100 <__reset+0xfb0fb100>
8111b218:	28c9883a 	add	r4,r5,r3
8111b21c:	21000117 	ldw	r4,4(r4)
8111b220:	2100004c 	andi	r4,r4,1
8111b224:	2000391e 	bne	r4,zero,8111b30c <_free_r+0x304>
8111b228:	29c00217 	ldw	r7,8(r5)
8111b22c:	29000317 	ldw	r4,12(r5)
8111b230:	1885883a 	add	r2,r3,r2
8111b234:	10c00054 	ori	r3,r2,1
8111b238:	39000315 	stw	r4,12(r7)
8111b23c:	21c00215 	stw	r7,8(r4)
8111b240:	30c00115 	stw	r3,4(r6)
8111b244:	308d883a 	add	r6,r6,r2
8111b248:	30800015 	stw	r2,0(r6)
8111b24c:	003fac06 	br	8111b100 <__reset+0xfb0fb100>
8111b250:	00c00504 	movi	r3,20
8111b254:	19401536 	bltu	r3,r5,8111b2ac <_free_r+0x2a4>
8111b258:	28c01704 	addi	r3,r5,92
8111b25c:	18c7883a 	add	r3,r3,r3
8111b260:	294016c4 	addi	r5,r5,91
8111b264:	003fb406 	br	8111b138 <__reset+0xfb0fb138>
8111b268:	280bd0ba 	srai	r5,r5,2
8111b26c:	00c00044 	movi	r3,1
8111b270:	38800117 	ldw	r2,4(r7)
8111b274:	194a983a 	sll	r5,r3,r5
8111b278:	2007883a 	mov	r3,r4
8111b27c:	2884b03a 	or	r2,r5,r2
8111b280:	38800115 	stw	r2,4(r7)
8111b284:	003fbb06 	br	8111b174 <__reset+0xfb0fb174>
8111b288:	21800515 	stw	r6,20(r4)
8111b28c:	21800415 	stw	r6,16(r4)
8111b290:	10c00054 	ori	r3,r2,1
8111b294:	31c00315 	stw	r7,12(r6)
8111b298:	31c00215 	stw	r7,8(r6)
8111b29c:	30c00115 	stw	r3,4(r6)
8111b2a0:	308d883a 	add	r6,r6,r2
8111b2a4:	30800015 	stw	r2,0(r6)
8111b2a8:	003f9506 	br	8111b100 <__reset+0xfb0fb100>
8111b2ac:	00c01504 	movi	r3,84
8111b2b0:	19400536 	bltu	r3,r5,8111b2c8 <_free_r+0x2c0>
8111b2b4:	100ad33a 	srli	r5,r2,12
8111b2b8:	28c01bc4 	addi	r3,r5,111
8111b2bc:	18c7883a 	add	r3,r3,r3
8111b2c0:	29401b84 	addi	r5,r5,110
8111b2c4:	003f9c06 	br	8111b138 <__reset+0xfb0fb138>
8111b2c8:	00c05504 	movi	r3,340
8111b2cc:	19400536 	bltu	r3,r5,8111b2e4 <_free_r+0x2dc>
8111b2d0:	100ad3fa 	srli	r5,r2,15
8111b2d4:	28c01e04 	addi	r3,r5,120
8111b2d8:	18c7883a 	add	r3,r3,r3
8111b2dc:	29401dc4 	addi	r5,r5,119
8111b2e0:	003f9506 	br	8111b138 <__reset+0xfb0fb138>
8111b2e4:	00c15504 	movi	r3,1364
8111b2e8:	19400536 	bltu	r3,r5,8111b300 <_free_r+0x2f8>
8111b2ec:	100ad4ba 	srli	r5,r2,18
8111b2f0:	28c01f44 	addi	r3,r5,125
8111b2f4:	18c7883a 	add	r3,r3,r3
8111b2f8:	29401f04 	addi	r5,r5,124
8111b2fc:	003f8e06 	br	8111b138 <__reset+0xfb0fb138>
8111b300:	00c03f84 	movi	r3,254
8111b304:	01401f84 	movi	r5,126
8111b308:	003f8b06 	br	8111b138 <__reset+0xfb0fb138>
8111b30c:	10c00054 	ori	r3,r2,1
8111b310:	30c00115 	stw	r3,4(r6)
8111b314:	308d883a 	add	r6,r6,r2
8111b318:	30800015 	stw	r2,0(r6)
8111b31c:	003f7806 	br	8111b100 <__reset+0xfb0fb100>

8111b320 <__sfvwrite_r>:
8111b320:	30800217 	ldw	r2,8(r6)
8111b324:	10006926 	beq	r2,zero,8111b4cc <__sfvwrite_r+0x1ac>
8111b328:	defff404 	addi	sp,sp,-48
8111b32c:	de00012e 	bgeu	sp,et,8111b334 <__sfvwrite_r+0x14>
8111b330:	003b68fa 	trap	3
8111b334:	28c0030b 	ldhu	r3,12(r5)
8111b338:	dd400715 	stw	r21,28(sp)
8111b33c:	dd000615 	stw	r20,24(sp)
8111b340:	dc000215 	stw	r16,8(sp)
8111b344:	dfc00b15 	stw	ra,44(sp)
8111b348:	df000a15 	stw	fp,40(sp)
8111b34c:	ddc00915 	stw	r23,36(sp)
8111b350:	dd800815 	stw	r22,32(sp)
8111b354:	dcc00515 	stw	r19,20(sp)
8111b358:	dc800415 	stw	r18,16(sp)
8111b35c:	dc400315 	stw	r17,12(sp)
8111b360:	1880020c 	andi	r2,r3,8
8111b364:	2821883a 	mov	r16,r5
8111b368:	202b883a 	mov	r21,r4
8111b36c:	3029883a 	mov	r20,r6
8111b370:	10002726 	beq	r2,zero,8111b410 <__sfvwrite_r+0xf0>
8111b374:	28800417 	ldw	r2,16(r5)
8111b378:	10002526 	beq	r2,zero,8111b410 <__sfvwrite_r+0xf0>
8111b37c:	1880008c 	andi	r2,r3,2
8111b380:	a4400017 	ldw	r17,0(r20)
8111b384:	10002a26 	beq	r2,zero,8111b430 <__sfvwrite_r+0x110>
8111b388:	05a00034 	movhi	r22,32768
8111b38c:	0027883a 	mov	r19,zero
8111b390:	0025883a 	mov	r18,zero
8111b394:	b5bf0004 	addi	r22,r22,-1024
8111b398:	980d883a 	mov	r6,r19
8111b39c:	a809883a 	mov	r4,r21
8111b3a0:	90004626 	beq	r18,zero,8111b4bc <__sfvwrite_r+0x19c>
8111b3a4:	900f883a 	mov	r7,r18
8111b3a8:	b480022e 	bgeu	r22,r18,8111b3b4 <__sfvwrite_r+0x94>
8111b3ac:	01e00034 	movhi	r7,32768
8111b3b0:	39ff0004 	addi	r7,r7,-1024
8111b3b4:	80800917 	ldw	r2,36(r16)
8111b3b8:	81400717 	ldw	r5,28(r16)
8111b3bc:	103ee83a 	callr	r2
8111b3c0:	0080570e 	bge	zero,r2,8111b520 <__sfvwrite_r+0x200>
8111b3c4:	a0c00217 	ldw	r3,8(r20)
8111b3c8:	98a7883a 	add	r19,r19,r2
8111b3cc:	90a5c83a 	sub	r18,r18,r2
8111b3d0:	1885c83a 	sub	r2,r3,r2
8111b3d4:	a0800215 	stw	r2,8(r20)
8111b3d8:	103fef1e 	bne	r2,zero,8111b398 <__reset+0xfb0fb398>
8111b3dc:	0005883a 	mov	r2,zero
8111b3e0:	dfc00b17 	ldw	ra,44(sp)
8111b3e4:	df000a17 	ldw	fp,40(sp)
8111b3e8:	ddc00917 	ldw	r23,36(sp)
8111b3ec:	dd800817 	ldw	r22,32(sp)
8111b3f0:	dd400717 	ldw	r21,28(sp)
8111b3f4:	dd000617 	ldw	r20,24(sp)
8111b3f8:	dcc00517 	ldw	r19,20(sp)
8111b3fc:	dc800417 	ldw	r18,16(sp)
8111b400:	dc400317 	ldw	r17,12(sp)
8111b404:	dc000217 	ldw	r16,8(sp)
8111b408:	dec00c04 	addi	sp,sp,48
8111b40c:	f800283a 	ret
8111b410:	800b883a 	mov	r5,r16
8111b414:	a809883a 	mov	r4,r21
8111b418:	1118b000 	call	81118b00 <__swsetup_r>
8111b41c:	1000eb1e 	bne	r2,zero,8111b7cc <__sfvwrite_r+0x4ac>
8111b420:	80c0030b 	ldhu	r3,12(r16)
8111b424:	a4400017 	ldw	r17,0(r20)
8111b428:	1880008c 	andi	r2,r3,2
8111b42c:	103fd61e 	bne	r2,zero,8111b388 <__reset+0xfb0fb388>
8111b430:	1880004c 	andi	r2,r3,1
8111b434:	10003f1e 	bne	r2,zero,8111b534 <__sfvwrite_r+0x214>
8111b438:	0039883a 	mov	fp,zero
8111b43c:	0025883a 	mov	r18,zero
8111b440:	90001a26 	beq	r18,zero,8111b4ac <__sfvwrite_r+0x18c>
8111b444:	1880800c 	andi	r2,r3,512
8111b448:	84c00217 	ldw	r19,8(r16)
8111b44c:	10002126 	beq	r2,zero,8111b4d4 <__sfvwrite_r+0x1b4>
8111b450:	982f883a 	mov	r23,r19
8111b454:	94c09336 	bltu	r18,r19,8111b6a4 <__sfvwrite_r+0x384>
8111b458:	1881200c 	andi	r2,r3,1152
8111b45c:	10009e1e 	bne	r2,zero,8111b6d8 <__sfvwrite_r+0x3b8>
8111b460:	81000017 	ldw	r4,0(r16)
8111b464:	b80d883a 	mov	r6,r23
8111b468:	e00b883a 	mov	r5,fp
8111b46c:	111be7c0 	call	8111be7c <memmove>
8111b470:	80c00217 	ldw	r3,8(r16)
8111b474:	81000017 	ldw	r4,0(r16)
8111b478:	9005883a 	mov	r2,r18
8111b47c:	1ce7c83a 	sub	r19,r3,r19
8111b480:	25cf883a 	add	r7,r4,r23
8111b484:	84c00215 	stw	r19,8(r16)
8111b488:	81c00015 	stw	r7,0(r16)
8111b48c:	a0c00217 	ldw	r3,8(r20)
8111b490:	e0b9883a 	add	fp,fp,r2
8111b494:	90a5c83a 	sub	r18,r18,r2
8111b498:	18a7c83a 	sub	r19,r3,r2
8111b49c:	a4c00215 	stw	r19,8(r20)
8111b4a0:	983fce26 	beq	r19,zero,8111b3dc <__reset+0xfb0fb3dc>
8111b4a4:	80c0030b 	ldhu	r3,12(r16)
8111b4a8:	903fe61e 	bne	r18,zero,8111b444 <__reset+0xfb0fb444>
8111b4ac:	8f000017 	ldw	fp,0(r17)
8111b4b0:	8c800117 	ldw	r18,4(r17)
8111b4b4:	8c400204 	addi	r17,r17,8
8111b4b8:	003fe106 	br	8111b440 <__reset+0xfb0fb440>
8111b4bc:	8cc00017 	ldw	r19,0(r17)
8111b4c0:	8c800117 	ldw	r18,4(r17)
8111b4c4:	8c400204 	addi	r17,r17,8
8111b4c8:	003fb306 	br	8111b398 <__reset+0xfb0fb398>
8111b4cc:	0005883a 	mov	r2,zero
8111b4d0:	f800283a 	ret
8111b4d4:	81000017 	ldw	r4,0(r16)
8111b4d8:	80800417 	ldw	r2,16(r16)
8111b4dc:	11005736 	bltu	r2,r4,8111b63c <__sfvwrite_r+0x31c>
8111b4e0:	85c00517 	ldw	r23,20(r16)
8111b4e4:	95c05536 	bltu	r18,r23,8111b63c <__sfvwrite_r+0x31c>
8111b4e8:	00a00034 	movhi	r2,32768
8111b4ec:	10bfffc4 	addi	r2,r2,-1
8111b4f0:	9009883a 	mov	r4,r18
8111b4f4:	1480012e 	bgeu	r2,r18,8111b4fc <__sfvwrite_r+0x1dc>
8111b4f8:	1009883a 	mov	r4,r2
8111b4fc:	b80b883a 	mov	r5,r23
8111b500:	11243f80 	call	811243f8 <__divsi3>
8111b504:	15cf383a 	mul	r7,r2,r23
8111b508:	81400717 	ldw	r5,28(r16)
8111b50c:	80800917 	ldw	r2,36(r16)
8111b510:	e00d883a 	mov	r6,fp
8111b514:	a809883a 	mov	r4,r21
8111b518:	103ee83a 	callr	r2
8111b51c:	00bfdb16 	blt	zero,r2,8111b48c <__reset+0xfb0fb48c>
8111b520:	8080030b 	ldhu	r2,12(r16)
8111b524:	10801014 	ori	r2,r2,64
8111b528:	8080030d 	sth	r2,12(r16)
8111b52c:	00bfffc4 	movi	r2,-1
8111b530:	003fab06 	br	8111b3e0 <__reset+0xfb0fb3e0>
8111b534:	0027883a 	mov	r19,zero
8111b538:	0011883a 	mov	r8,zero
8111b53c:	0039883a 	mov	fp,zero
8111b540:	0025883a 	mov	r18,zero
8111b544:	90001f26 	beq	r18,zero,8111b5c4 <__sfvwrite_r+0x2a4>
8111b548:	40005a26 	beq	r8,zero,8111b6b4 <__sfvwrite_r+0x394>
8111b54c:	982d883a 	mov	r22,r19
8111b550:	94c0012e 	bgeu	r18,r19,8111b558 <__sfvwrite_r+0x238>
8111b554:	902d883a 	mov	r22,r18
8111b558:	81000017 	ldw	r4,0(r16)
8111b55c:	80800417 	ldw	r2,16(r16)
8111b560:	b02f883a 	mov	r23,r22
8111b564:	81c00517 	ldw	r7,20(r16)
8111b568:	1100032e 	bgeu	r2,r4,8111b578 <__sfvwrite_r+0x258>
8111b56c:	80c00217 	ldw	r3,8(r16)
8111b570:	38c7883a 	add	r3,r7,r3
8111b574:	1d801816 	blt	r3,r22,8111b5d8 <__sfvwrite_r+0x2b8>
8111b578:	b1c03e16 	blt	r22,r7,8111b674 <__sfvwrite_r+0x354>
8111b57c:	80800917 	ldw	r2,36(r16)
8111b580:	81400717 	ldw	r5,28(r16)
8111b584:	e00d883a 	mov	r6,fp
8111b588:	da000115 	stw	r8,4(sp)
8111b58c:	a809883a 	mov	r4,r21
8111b590:	103ee83a 	callr	r2
8111b594:	102f883a 	mov	r23,r2
8111b598:	da000117 	ldw	r8,4(sp)
8111b59c:	00bfe00e 	bge	zero,r2,8111b520 <__reset+0xfb0fb520>
8111b5a0:	9de7c83a 	sub	r19,r19,r23
8111b5a4:	98001f26 	beq	r19,zero,8111b624 <__sfvwrite_r+0x304>
8111b5a8:	a0800217 	ldw	r2,8(r20)
8111b5ac:	e5f9883a 	add	fp,fp,r23
8111b5b0:	95e5c83a 	sub	r18,r18,r23
8111b5b4:	15efc83a 	sub	r23,r2,r23
8111b5b8:	a5c00215 	stw	r23,8(r20)
8111b5bc:	b83f8726 	beq	r23,zero,8111b3dc <__reset+0xfb0fb3dc>
8111b5c0:	903fe11e 	bne	r18,zero,8111b548 <__reset+0xfb0fb548>
8111b5c4:	8f000017 	ldw	fp,0(r17)
8111b5c8:	8c800117 	ldw	r18,4(r17)
8111b5cc:	0011883a 	mov	r8,zero
8111b5d0:	8c400204 	addi	r17,r17,8
8111b5d4:	003fdb06 	br	8111b544 <__reset+0xfb0fb544>
8111b5d8:	180d883a 	mov	r6,r3
8111b5dc:	e00b883a 	mov	r5,fp
8111b5e0:	da000115 	stw	r8,4(sp)
8111b5e4:	d8c00015 	stw	r3,0(sp)
8111b5e8:	111be7c0 	call	8111be7c <memmove>
8111b5ec:	d8c00017 	ldw	r3,0(sp)
8111b5f0:	80800017 	ldw	r2,0(r16)
8111b5f4:	800b883a 	mov	r5,r16
8111b5f8:	a809883a 	mov	r4,r21
8111b5fc:	10c5883a 	add	r2,r2,r3
8111b600:	80800015 	stw	r2,0(r16)
8111b604:	d8c00015 	stw	r3,0(sp)
8111b608:	111a7740 	call	8111a774 <_fflush_r>
8111b60c:	d8c00017 	ldw	r3,0(sp)
8111b610:	da000117 	ldw	r8,4(sp)
8111b614:	103fc21e 	bne	r2,zero,8111b520 <__reset+0xfb0fb520>
8111b618:	182f883a 	mov	r23,r3
8111b61c:	9de7c83a 	sub	r19,r19,r23
8111b620:	983fe11e 	bne	r19,zero,8111b5a8 <__reset+0xfb0fb5a8>
8111b624:	800b883a 	mov	r5,r16
8111b628:	a809883a 	mov	r4,r21
8111b62c:	111a7740 	call	8111a774 <_fflush_r>
8111b630:	103fbb1e 	bne	r2,zero,8111b520 <__reset+0xfb0fb520>
8111b634:	0011883a 	mov	r8,zero
8111b638:	003fdb06 	br	8111b5a8 <__reset+0xfb0fb5a8>
8111b63c:	94c0012e 	bgeu	r18,r19,8111b644 <__sfvwrite_r+0x324>
8111b640:	9027883a 	mov	r19,r18
8111b644:	980d883a 	mov	r6,r19
8111b648:	e00b883a 	mov	r5,fp
8111b64c:	111be7c0 	call	8111be7c <memmove>
8111b650:	80800217 	ldw	r2,8(r16)
8111b654:	80c00017 	ldw	r3,0(r16)
8111b658:	14c5c83a 	sub	r2,r2,r19
8111b65c:	1cc7883a 	add	r3,r3,r19
8111b660:	80800215 	stw	r2,8(r16)
8111b664:	80c00015 	stw	r3,0(r16)
8111b668:	10004326 	beq	r2,zero,8111b778 <__sfvwrite_r+0x458>
8111b66c:	9805883a 	mov	r2,r19
8111b670:	003f8606 	br	8111b48c <__reset+0xfb0fb48c>
8111b674:	b00d883a 	mov	r6,r22
8111b678:	e00b883a 	mov	r5,fp
8111b67c:	da000115 	stw	r8,4(sp)
8111b680:	111be7c0 	call	8111be7c <memmove>
8111b684:	80800217 	ldw	r2,8(r16)
8111b688:	80c00017 	ldw	r3,0(r16)
8111b68c:	da000117 	ldw	r8,4(sp)
8111b690:	1585c83a 	sub	r2,r2,r22
8111b694:	1dad883a 	add	r22,r3,r22
8111b698:	80800215 	stw	r2,8(r16)
8111b69c:	85800015 	stw	r22,0(r16)
8111b6a0:	003fbf06 	br	8111b5a0 <__reset+0xfb0fb5a0>
8111b6a4:	81000017 	ldw	r4,0(r16)
8111b6a8:	9027883a 	mov	r19,r18
8111b6ac:	902f883a 	mov	r23,r18
8111b6b0:	003f6c06 	br	8111b464 <__reset+0xfb0fb464>
8111b6b4:	900d883a 	mov	r6,r18
8111b6b8:	01400284 	movi	r5,10
8111b6bc:	e009883a 	mov	r4,fp
8111b6c0:	111bd980 	call	8111bd98 <memchr>
8111b6c4:	10003e26 	beq	r2,zero,8111b7c0 <__sfvwrite_r+0x4a0>
8111b6c8:	10800044 	addi	r2,r2,1
8111b6cc:	1727c83a 	sub	r19,r2,fp
8111b6d0:	02000044 	movi	r8,1
8111b6d4:	003f9d06 	br	8111b54c <__reset+0xfb0fb54c>
8111b6d8:	80800517 	ldw	r2,20(r16)
8111b6dc:	81400417 	ldw	r5,16(r16)
8111b6e0:	81c00017 	ldw	r7,0(r16)
8111b6e4:	10a7883a 	add	r19,r2,r2
8111b6e8:	9885883a 	add	r2,r19,r2
8111b6ec:	1026d7fa 	srli	r19,r2,31
8111b6f0:	396dc83a 	sub	r22,r7,r5
8111b6f4:	b1000044 	addi	r4,r22,1
8111b6f8:	9885883a 	add	r2,r19,r2
8111b6fc:	1027d07a 	srai	r19,r2,1
8111b700:	2485883a 	add	r2,r4,r18
8111b704:	980d883a 	mov	r6,r19
8111b708:	9880022e 	bgeu	r19,r2,8111b714 <__sfvwrite_r+0x3f4>
8111b70c:	1027883a 	mov	r19,r2
8111b710:	100d883a 	mov	r6,r2
8111b714:	18c1000c 	andi	r3,r3,1024
8111b718:	18001c26 	beq	r3,zero,8111b78c <__sfvwrite_r+0x46c>
8111b71c:	300b883a 	mov	r5,r6
8111b720:	a809883a 	mov	r4,r21
8111b724:	11118b00 	call	811118b0 <_malloc_r>
8111b728:	102f883a 	mov	r23,r2
8111b72c:	10002926 	beq	r2,zero,8111b7d4 <__sfvwrite_r+0x4b4>
8111b730:	81400417 	ldw	r5,16(r16)
8111b734:	b00d883a 	mov	r6,r22
8111b738:	1009883a 	mov	r4,r2
8111b73c:	11120c40 	call	811120c4 <memcpy>
8111b740:	8080030b 	ldhu	r2,12(r16)
8111b744:	00fedfc4 	movi	r3,-1153
8111b748:	10c4703a 	and	r2,r2,r3
8111b74c:	10802014 	ori	r2,r2,128
8111b750:	8080030d 	sth	r2,12(r16)
8111b754:	bd89883a 	add	r4,r23,r22
8111b758:	9d8fc83a 	sub	r7,r19,r22
8111b75c:	85c00415 	stw	r23,16(r16)
8111b760:	84c00515 	stw	r19,20(r16)
8111b764:	81000015 	stw	r4,0(r16)
8111b768:	9027883a 	mov	r19,r18
8111b76c:	81c00215 	stw	r7,8(r16)
8111b770:	902f883a 	mov	r23,r18
8111b774:	003f3b06 	br	8111b464 <__reset+0xfb0fb464>
8111b778:	800b883a 	mov	r5,r16
8111b77c:	a809883a 	mov	r4,r21
8111b780:	111a7740 	call	8111a774 <_fflush_r>
8111b784:	103fb926 	beq	r2,zero,8111b66c <__reset+0xfb0fb66c>
8111b788:	003f6506 	br	8111b520 <__reset+0xfb0fb520>
8111b78c:	a809883a 	mov	r4,r21
8111b790:	111d09c0 	call	8111d09c <_realloc_r>
8111b794:	102f883a 	mov	r23,r2
8111b798:	103fee1e 	bne	r2,zero,8111b754 <__reset+0xfb0fb754>
8111b79c:	81400417 	ldw	r5,16(r16)
8111b7a0:	a809883a 	mov	r4,r21
8111b7a4:	111b0080 	call	8111b008 <_free_r>
8111b7a8:	8080030b 	ldhu	r2,12(r16)
8111b7ac:	00ffdfc4 	movi	r3,-129
8111b7b0:	1884703a 	and	r2,r3,r2
8111b7b4:	00c00304 	movi	r3,12
8111b7b8:	a8c00015 	stw	r3,0(r21)
8111b7bc:	003f5906 	br	8111b524 <__reset+0xfb0fb524>
8111b7c0:	94c00044 	addi	r19,r18,1
8111b7c4:	02000044 	movi	r8,1
8111b7c8:	003f6006 	br	8111b54c <__reset+0xfb0fb54c>
8111b7cc:	00bfffc4 	movi	r2,-1
8111b7d0:	003f0306 	br	8111b3e0 <__reset+0xfb0fb3e0>
8111b7d4:	00800304 	movi	r2,12
8111b7d8:	a8800015 	stw	r2,0(r21)
8111b7dc:	8080030b 	ldhu	r2,12(r16)
8111b7e0:	003f5006 	br	8111b524 <__reset+0xfb0fb524>

8111b7e4 <_fwalk>:
8111b7e4:	defff704 	addi	sp,sp,-36
8111b7e8:	de00012e 	bgeu	sp,et,8111b7f0 <_fwalk+0xc>
8111b7ec:	003b68fa 	trap	3
8111b7f0:	dd000415 	stw	r20,16(sp)
8111b7f4:	dfc00815 	stw	ra,32(sp)
8111b7f8:	ddc00715 	stw	r23,28(sp)
8111b7fc:	dd800615 	stw	r22,24(sp)
8111b800:	dd400515 	stw	r21,20(sp)
8111b804:	dcc00315 	stw	r19,12(sp)
8111b808:	dc800215 	stw	r18,8(sp)
8111b80c:	dc400115 	stw	r17,4(sp)
8111b810:	dc000015 	stw	r16,0(sp)
8111b814:	2500b804 	addi	r20,r4,736
8111b818:	a0002326 	beq	r20,zero,8111b8a8 <_fwalk+0xc4>
8111b81c:	282b883a 	mov	r21,r5
8111b820:	002f883a 	mov	r23,zero
8111b824:	05800044 	movi	r22,1
8111b828:	04ffffc4 	movi	r19,-1
8111b82c:	a4400117 	ldw	r17,4(r20)
8111b830:	a4800217 	ldw	r18,8(r20)
8111b834:	8c7fffc4 	addi	r17,r17,-1
8111b838:	88000d16 	blt	r17,zero,8111b870 <_fwalk+0x8c>
8111b83c:	94000304 	addi	r16,r18,12
8111b840:	94800384 	addi	r18,r18,14
8111b844:	8080000b 	ldhu	r2,0(r16)
8111b848:	8c7fffc4 	addi	r17,r17,-1
8111b84c:	813ffd04 	addi	r4,r16,-12
8111b850:	b080042e 	bgeu	r22,r2,8111b864 <_fwalk+0x80>
8111b854:	9080000f 	ldh	r2,0(r18)
8111b858:	14c00226 	beq	r2,r19,8111b864 <_fwalk+0x80>
8111b85c:	a83ee83a 	callr	r21
8111b860:	b8aeb03a 	or	r23,r23,r2
8111b864:	84001a04 	addi	r16,r16,104
8111b868:	94801a04 	addi	r18,r18,104
8111b86c:	8cfff51e 	bne	r17,r19,8111b844 <__reset+0xfb0fb844>
8111b870:	a5000017 	ldw	r20,0(r20)
8111b874:	a03fed1e 	bne	r20,zero,8111b82c <__reset+0xfb0fb82c>
8111b878:	b805883a 	mov	r2,r23
8111b87c:	dfc00817 	ldw	ra,32(sp)
8111b880:	ddc00717 	ldw	r23,28(sp)
8111b884:	dd800617 	ldw	r22,24(sp)
8111b888:	dd400517 	ldw	r21,20(sp)
8111b88c:	dd000417 	ldw	r20,16(sp)
8111b890:	dcc00317 	ldw	r19,12(sp)
8111b894:	dc800217 	ldw	r18,8(sp)
8111b898:	dc400117 	ldw	r17,4(sp)
8111b89c:	dc000017 	ldw	r16,0(sp)
8111b8a0:	dec00904 	addi	sp,sp,36
8111b8a4:	f800283a 	ret
8111b8a8:	002f883a 	mov	r23,zero
8111b8ac:	003ff206 	br	8111b878 <__reset+0xfb0fb878>

8111b8b0 <_fwalk_reent>:
8111b8b0:	defff704 	addi	sp,sp,-36
8111b8b4:	de00012e 	bgeu	sp,et,8111b8bc <_fwalk_reent+0xc>
8111b8b8:	003b68fa 	trap	3
8111b8bc:	dd000415 	stw	r20,16(sp)
8111b8c0:	dfc00815 	stw	ra,32(sp)
8111b8c4:	ddc00715 	stw	r23,28(sp)
8111b8c8:	dd800615 	stw	r22,24(sp)
8111b8cc:	dd400515 	stw	r21,20(sp)
8111b8d0:	dcc00315 	stw	r19,12(sp)
8111b8d4:	dc800215 	stw	r18,8(sp)
8111b8d8:	dc400115 	stw	r17,4(sp)
8111b8dc:	dc000015 	stw	r16,0(sp)
8111b8e0:	2500b804 	addi	r20,r4,736
8111b8e4:	a0002326 	beq	r20,zero,8111b974 <_fwalk_reent+0xc4>
8111b8e8:	282b883a 	mov	r21,r5
8111b8ec:	2027883a 	mov	r19,r4
8111b8f0:	002f883a 	mov	r23,zero
8111b8f4:	05800044 	movi	r22,1
8111b8f8:	04bfffc4 	movi	r18,-1
8111b8fc:	a4400117 	ldw	r17,4(r20)
8111b900:	a4000217 	ldw	r16,8(r20)
8111b904:	8c7fffc4 	addi	r17,r17,-1
8111b908:	88000c16 	blt	r17,zero,8111b93c <_fwalk_reent+0x8c>
8111b90c:	84000304 	addi	r16,r16,12
8111b910:	8080000b 	ldhu	r2,0(r16)
8111b914:	8c7fffc4 	addi	r17,r17,-1
8111b918:	817ffd04 	addi	r5,r16,-12
8111b91c:	b080052e 	bgeu	r22,r2,8111b934 <_fwalk_reent+0x84>
8111b920:	8080008f 	ldh	r2,2(r16)
8111b924:	9809883a 	mov	r4,r19
8111b928:	14800226 	beq	r2,r18,8111b934 <_fwalk_reent+0x84>
8111b92c:	a83ee83a 	callr	r21
8111b930:	b8aeb03a 	or	r23,r23,r2
8111b934:	84001a04 	addi	r16,r16,104
8111b938:	8cbff51e 	bne	r17,r18,8111b910 <__reset+0xfb0fb910>
8111b93c:	a5000017 	ldw	r20,0(r20)
8111b940:	a03fee1e 	bne	r20,zero,8111b8fc <__reset+0xfb0fb8fc>
8111b944:	b805883a 	mov	r2,r23
8111b948:	dfc00817 	ldw	ra,32(sp)
8111b94c:	ddc00717 	ldw	r23,28(sp)
8111b950:	dd800617 	ldw	r22,24(sp)
8111b954:	dd400517 	ldw	r21,20(sp)
8111b958:	dd000417 	ldw	r20,16(sp)
8111b95c:	dcc00317 	ldw	r19,12(sp)
8111b960:	dc800217 	ldw	r18,8(sp)
8111b964:	dc400117 	ldw	r17,4(sp)
8111b968:	dc000017 	ldw	r16,0(sp)
8111b96c:	dec00904 	addi	sp,sp,36
8111b970:	f800283a 	ret
8111b974:	002f883a 	mov	r23,zero
8111b978:	003ff206 	br	8111b944 <__reset+0xfb0fb944>

8111b97c <_isatty_r>:
8111b97c:	defffd04 	addi	sp,sp,-12
8111b980:	de00012e 	bgeu	sp,et,8111b988 <_isatty_r+0xc>
8111b984:	003b68fa 	trap	3
8111b988:	dc000015 	stw	r16,0(sp)
8111b98c:	04204534 	movhi	r16,33044
8111b990:	dc400115 	stw	r17,4(sp)
8111b994:	843ff604 	addi	r16,r16,-40
8111b998:	2023883a 	mov	r17,r4
8111b99c:	2809883a 	mov	r4,r5
8111b9a0:	dfc00215 	stw	ra,8(sp)
8111b9a4:	80000015 	stw	zero,0(r16)
8111b9a8:	1126c2c0 	call	81126c2c <isatty>
8111b9ac:	00ffffc4 	movi	r3,-1
8111b9b0:	10c00526 	beq	r2,r3,8111b9c8 <_isatty_r+0x4c>
8111b9b4:	dfc00217 	ldw	ra,8(sp)
8111b9b8:	dc400117 	ldw	r17,4(sp)
8111b9bc:	dc000017 	ldw	r16,0(sp)
8111b9c0:	dec00304 	addi	sp,sp,12
8111b9c4:	f800283a 	ret
8111b9c8:	80c00017 	ldw	r3,0(r16)
8111b9cc:	183ff926 	beq	r3,zero,8111b9b4 <__reset+0xfb0fb9b4>
8111b9d0:	88c00015 	stw	r3,0(r17)
8111b9d4:	003ff706 	br	8111b9b4 <__reset+0xfb0fb9b4>

8111b9d8 <iswspace>:
8111b9d8:	00803fc4 	movi	r2,255
8111b9dc:	11000836 	bltu	r2,r4,8111ba00 <iswspace+0x28>
8111b9e0:	00a04534 	movhi	r2,33044
8111b9e4:	10bf9b04 	addi	r2,r2,-404
8111b9e8:	10800017 	ldw	r2,0(r2)
8111b9ec:	1109883a 	add	r4,r2,r4
8111b9f0:	20800043 	ldbu	r2,1(r4)
8111b9f4:	1080020c 	andi	r2,r2,8
8111b9f8:	10803fcc 	andi	r2,r2,255
8111b9fc:	f800283a 	ret
8111ba00:	0005883a 	mov	r2,zero
8111ba04:	f800283a 	ret

8111ba08 <_setlocale_r>:
8111ba08:	30001d26 	beq	r6,zero,8111ba80 <_setlocale_r+0x78>
8111ba0c:	01604534 	movhi	r5,33044
8111ba10:	defffe04 	addi	sp,sp,-8
8111ba14:	2976c204 	addi	r5,r5,-9464
8111ba18:	3009883a 	mov	r4,r6
8111ba1c:	de00012e 	bgeu	sp,et,8111ba24 <_setlocale_r+0x1c>
8111ba20:	003b68fa 	trap	3
8111ba24:	dc000015 	stw	r16,0(sp)
8111ba28:	dfc00115 	stw	ra,4(sp)
8111ba2c:	3021883a 	mov	r16,r6
8111ba30:	111d7540 	call	8111d754 <strcmp>
8111ba34:	1000061e 	bne	r2,zero,8111ba50 <_setlocale_r+0x48>
8111ba38:	00a04534 	movhi	r2,33044
8111ba3c:	10b69104 	addi	r2,r2,-9660
8111ba40:	dfc00117 	ldw	ra,4(sp)
8111ba44:	dc000017 	ldw	r16,0(sp)
8111ba48:	dec00204 	addi	sp,sp,8
8111ba4c:	f800283a 	ret
8111ba50:	01604534 	movhi	r5,33044
8111ba54:	29769104 	addi	r5,r5,-9660
8111ba58:	8009883a 	mov	r4,r16
8111ba5c:	111d7540 	call	8111d754 <strcmp>
8111ba60:	103ff526 	beq	r2,zero,8111ba38 <__reset+0xfb0fba38>
8111ba64:	01604534 	movhi	r5,33044
8111ba68:	29769b04 	addi	r5,r5,-9620
8111ba6c:	8009883a 	mov	r4,r16
8111ba70:	111d7540 	call	8111d754 <strcmp>
8111ba74:	103ff026 	beq	r2,zero,8111ba38 <__reset+0xfb0fba38>
8111ba78:	0005883a 	mov	r2,zero
8111ba7c:	003ff006 	br	8111ba40 <__reset+0xfb0fba40>
8111ba80:	00a04534 	movhi	r2,33044
8111ba84:	10b69104 	addi	r2,r2,-9660
8111ba88:	f800283a 	ret

8111ba8c <__locale_charset>:
8111ba8c:	00a04534 	movhi	r2,33044
8111ba90:	10ba8c04 	addi	r2,r2,-5584
8111ba94:	f800283a 	ret

8111ba98 <__locale_mb_cur_max>:
8111ba98:	00a04534 	movhi	r2,33044
8111ba9c:	10bfa004 	addi	r2,r2,-384
8111baa0:	10800017 	ldw	r2,0(r2)
8111baa4:	f800283a 	ret

8111baa8 <__locale_msgcharset>:
8111baa8:	00a04534 	movhi	r2,33044
8111baac:	10ba8404 	addi	r2,r2,-5616
8111bab0:	f800283a 	ret

8111bab4 <__locale_cjk_lang>:
8111bab4:	0005883a 	mov	r2,zero
8111bab8:	f800283a 	ret

8111babc <_localeconv_r>:
8111babc:	00a04534 	movhi	r2,33044
8111bac0:	10ba9404 	addi	r2,r2,-5552
8111bac4:	f800283a 	ret

8111bac8 <setlocale>:
8111bac8:	00a04534 	movhi	r2,33044
8111bacc:	10bf9d04 	addi	r2,r2,-396
8111bad0:	280d883a 	mov	r6,r5
8111bad4:	200b883a 	mov	r5,r4
8111bad8:	11000017 	ldw	r4,0(r2)
8111badc:	111ba081 	jmpi	8111ba08 <_setlocale_r>

8111bae0 <localeconv>:
8111bae0:	00a04534 	movhi	r2,33044
8111bae4:	10ba9404 	addi	r2,r2,-5552
8111bae8:	f800283a 	ret

8111baec <_lseek_r>:
8111baec:	defffd04 	addi	sp,sp,-12
8111baf0:	de00012e 	bgeu	sp,et,8111baf8 <_lseek_r+0xc>
8111baf4:	003b68fa 	trap	3
8111baf8:	2805883a 	mov	r2,r5
8111bafc:	dc000015 	stw	r16,0(sp)
8111bb00:	04204534 	movhi	r16,33044
8111bb04:	dc400115 	stw	r17,4(sp)
8111bb08:	300b883a 	mov	r5,r6
8111bb0c:	843ff604 	addi	r16,r16,-40
8111bb10:	2023883a 	mov	r17,r4
8111bb14:	380d883a 	mov	r6,r7
8111bb18:	1009883a 	mov	r4,r2
8111bb1c:	dfc00215 	stw	ra,8(sp)
8111bb20:	80000015 	stw	zero,0(r16)
8111bb24:	1126d1c0 	call	81126d1c <lseek>
8111bb28:	00ffffc4 	movi	r3,-1
8111bb2c:	10c00526 	beq	r2,r3,8111bb44 <_lseek_r+0x58>
8111bb30:	dfc00217 	ldw	ra,8(sp)
8111bb34:	dc400117 	ldw	r17,4(sp)
8111bb38:	dc000017 	ldw	r16,0(sp)
8111bb3c:	dec00304 	addi	sp,sp,12
8111bb40:	f800283a 	ret
8111bb44:	80c00017 	ldw	r3,0(r16)
8111bb48:	183ff926 	beq	r3,zero,8111bb30 <__reset+0xfb0fbb30>
8111bb4c:	88c00015 	stw	r3,0(r17)
8111bb50:	003ff706 	br	8111bb30 <__reset+0xfb0fbb30>

8111bb54 <_mbrtowc_r>:
8111bb54:	defff704 	addi	sp,sp,-36
8111bb58:	00a04534 	movhi	r2,33044
8111bb5c:	de00012e 	bgeu	sp,et,8111bb64 <_mbrtowc_r+0x10>
8111bb60:	003b68fa 	trap	3
8111bb64:	10bfa104 	addi	r2,r2,-380
8111bb68:	dc800715 	stw	r18,28(sp)
8111bb6c:	dc400615 	stw	r17,24(sp)
8111bb70:	dc000515 	stw	r16,20(sp)
8111bb74:	dfc00815 	stw	ra,32(sp)
8111bb78:	2021883a 	mov	r16,r4
8111bb7c:	dc400917 	ldw	r17,36(sp)
8111bb80:	14800017 	ldw	r18,0(r2)
8111bb84:	30001626 	beq	r6,zero,8111bbe0 <_mbrtowc_r+0x8c>
8111bb88:	d9400215 	stw	r5,8(sp)
8111bb8c:	d9800315 	stw	r6,12(sp)
8111bb90:	d9c00415 	stw	r7,16(sp)
8111bb94:	111ba8c0 	call	8111ba8c <__locale_charset>
8111bb98:	d9c00417 	ldw	r7,16(sp)
8111bb9c:	d9800317 	ldw	r6,12(sp)
8111bba0:	d9400217 	ldw	r5,8(sp)
8111bba4:	d8800015 	stw	r2,0(sp)
8111bba8:	dc400115 	stw	r17,4(sp)
8111bbac:	8009883a 	mov	r4,r16
8111bbb0:	903ee83a 	callr	r18
8111bbb4:	00ffffc4 	movi	r3,-1
8111bbb8:	10c0031e 	bne	r2,r3,8111bbc8 <_mbrtowc_r+0x74>
8111bbbc:	88000015 	stw	zero,0(r17)
8111bbc0:	00c02284 	movi	r3,138
8111bbc4:	80c00015 	stw	r3,0(r16)
8111bbc8:	dfc00817 	ldw	ra,32(sp)
8111bbcc:	dc800717 	ldw	r18,28(sp)
8111bbd0:	dc400617 	ldw	r17,24(sp)
8111bbd4:	dc000517 	ldw	r16,20(sp)
8111bbd8:	dec00904 	addi	sp,sp,36
8111bbdc:	f800283a 	ret
8111bbe0:	111ba8c0 	call	8111ba8c <__locale_charset>
8111bbe4:	01a04534 	movhi	r6,33044
8111bbe8:	31b69b04 	addi	r6,r6,-9620
8111bbec:	dc400115 	stw	r17,4(sp)
8111bbf0:	d8800015 	stw	r2,0(sp)
8111bbf4:	01c00044 	movi	r7,1
8111bbf8:	000b883a 	mov	r5,zero
8111bbfc:	8009883a 	mov	r4,r16
8111bc00:	903ee83a 	callr	r18
8111bc04:	003feb06 	br	8111bbb4 <__reset+0xfb0fbbb4>

8111bc08 <mbrtowc>:
8111bc08:	defff704 	addi	sp,sp,-36
8111bc0c:	00a04534 	movhi	r2,33044
8111bc10:	de00012e 	bgeu	sp,et,8111bc18 <mbrtowc+0x10>
8111bc14:	003b68fa 	trap	3
8111bc18:	10bf9d04 	addi	r2,r2,-396
8111bc1c:	dc800415 	stw	r18,16(sp)
8111bc20:	dc400315 	stw	r17,12(sp)
8111bc24:	dfc00815 	stw	ra,32(sp)
8111bc28:	dd400715 	stw	r21,28(sp)
8111bc2c:	dd000615 	stw	r20,24(sp)
8111bc30:	dcc00515 	stw	r19,20(sp)
8111bc34:	dc000215 	stw	r16,8(sp)
8111bc38:	3825883a 	mov	r18,r7
8111bc3c:	14400017 	ldw	r17,0(r2)
8111bc40:	28001c26 	beq	r5,zero,8111bcb4 <mbrtowc+0xac>
8111bc44:	00a04534 	movhi	r2,33044
8111bc48:	10bfa104 	addi	r2,r2,-380
8111bc4c:	15400017 	ldw	r21,0(r2)
8111bc50:	2821883a 	mov	r16,r5
8111bc54:	2027883a 	mov	r19,r4
8111bc58:	3029883a 	mov	r20,r6
8111bc5c:	111ba8c0 	call	8111ba8c <__locale_charset>
8111bc60:	d8800015 	stw	r2,0(sp)
8111bc64:	dc800115 	stw	r18,4(sp)
8111bc68:	a00f883a 	mov	r7,r20
8111bc6c:	800d883a 	mov	r6,r16
8111bc70:	980b883a 	mov	r5,r19
8111bc74:	8809883a 	mov	r4,r17
8111bc78:	a83ee83a 	callr	r21
8111bc7c:	00ffffc4 	movi	r3,-1
8111bc80:	10c0031e 	bne	r2,r3,8111bc90 <mbrtowc+0x88>
8111bc84:	90000015 	stw	zero,0(r18)
8111bc88:	00c02284 	movi	r3,138
8111bc8c:	88c00015 	stw	r3,0(r17)
8111bc90:	dfc00817 	ldw	ra,32(sp)
8111bc94:	dd400717 	ldw	r21,28(sp)
8111bc98:	dd000617 	ldw	r20,24(sp)
8111bc9c:	dcc00517 	ldw	r19,20(sp)
8111bca0:	dc800417 	ldw	r18,16(sp)
8111bca4:	dc400317 	ldw	r17,12(sp)
8111bca8:	dc000217 	ldw	r16,8(sp)
8111bcac:	dec00904 	addi	sp,sp,36
8111bcb0:	f800283a 	ret
8111bcb4:	00a04534 	movhi	r2,33044
8111bcb8:	10bfa104 	addi	r2,r2,-380
8111bcbc:	14000017 	ldw	r16,0(r2)
8111bcc0:	111ba8c0 	call	8111ba8c <__locale_charset>
8111bcc4:	01a04534 	movhi	r6,33044
8111bcc8:	31b69b04 	addi	r6,r6,-9620
8111bccc:	dc800115 	stw	r18,4(sp)
8111bcd0:	d8800015 	stw	r2,0(sp)
8111bcd4:	01c00044 	movi	r7,1
8111bcd8:	000b883a 	mov	r5,zero
8111bcdc:	8809883a 	mov	r4,r17
8111bce0:	803ee83a 	callr	r16
8111bce4:	003fe506 	br	8111bc7c <__reset+0xfb0fbc7c>

8111bce8 <__ascii_mbtowc>:
8111bce8:	deffff04 	addi	sp,sp,-4
8111bcec:	de00012e 	bgeu	sp,et,8111bcf4 <__ascii_mbtowc+0xc>
8111bcf0:	003b68fa 	trap	3
8111bcf4:	28000826 	beq	r5,zero,8111bd18 <__ascii_mbtowc+0x30>
8111bcf8:	30000926 	beq	r6,zero,8111bd20 <__ascii_mbtowc+0x38>
8111bcfc:	38000b26 	beq	r7,zero,8111bd2c <__ascii_mbtowc+0x44>
8111bd00:	30800003 	ldbu	r2,0(r6)
8111bd04:	28800015 	stw	r2,0(r5)
8111bd08:	30800003 	ldbu	r2,0(r6)
8111bd0c:	1004c03a 	cmpne	r2,r2,zero
8111bd10:	dec00104 	addi	sp,sp,4
8111bd14:	f800283a 	ret
8111bd18:	d80b883a 	mov	r5,sp
8111bd1c:	303ff71e 	bne	r6,zero,8111bcfc <__reset+0xfb0fbcfc>
8111bd20:	0005883a 	mov	r2,zero
8111bd24:	dec00104 	addi	sp,sp,4
8111bd28:	f800283a 	ret
8111bd2c:	00bfff84 	movi	r2,-2
8111bd30:	003ff706 	br	8111bd10 <__reset+0xfb0fbd10>

8111bd34 <_mbtowc_r>:
8111bd34:	00a04534 	movhi	r2,33044
8111bd38:	defff804 	addi	sp,sp,-32
8111bd3c:	10bfa104 	addi	r2,r2,-380
8111bd40:	de00012e 	bgeu	sp,et,8111bd48 <_mbtowc_r+0x14>
8111bd44:	003b68fa 	trap	3
8111bd48:	dfc00715 	stw	ra,28(sp)
8111bd4c:	dc000615 	stw	r16,24(sp)
8111bd50:	14000017 	ldw	r16,0(r2)
8111bd54:	d9000215 	stw	r4,8(sp)
8111bd58:	d9400315 	stw	r5,12(sp)
8111bd5c:	d9800415 	stw	r6,16(sp)
8111bd60:	d9c00515 	stw	r7,20(sp)
8111bd64:	111ba8c0 	call	8111ba8c <__locale_charset>
8111bd68:	d8800015 	stw	r2,0(sp)
8111bd6c:	d8800817 	ldw	r2,32(sp)
8111bd70:	d9c00517 	ldw	r7,20(sp)
8111bd74:	d9800417 	ldw	r6,16(sp)
8111bd78:	d9400317 	ldw	r5,12(sp)
8111bd7c:	d9000217 	ldw	r4,8(sp)
8111bd80:	d8800115 	stw	r2,4(sp)
8111bd84:	803ee83a 	callr	r16
8111bd88:	dfc00717 	ldw	ra,28(sp)
8111bd8c:	dc000617 	ldw	r16,24(sp)
8111bd90:	dec00804 	addi	sp,sp,32
8111bd94:	f800283a 	ret

8111bd98 <memchr>:
8111bd98:	208000cc 	andi	r2,r4,3
8111bd9c:	280f883a 	mov	r7,r5
8111bda0:	10003426 	beq	r2,zero,8111be74 <memchr+0xdc>
8111bda4:	30bfffc4 	addi	r2,r6,-1
8111bda8:	30001a26 	beq	r6,zero,8111be14 <memchr+0x7c>
8111bdac:	20c00003 	ldbu	r3,0(r4)
8111bdb0:	29803fcc 	andi	r6,r5,255
8111bdb4:	30c0051e 	bne	r6,r3,8111bdcc <memchr+0x34>
8111bdb8:	00001806 	br	8111be1c <memchr+0x84>
8111bdbc:	10001526 	beq	r2,zero,8111be14 <memchr+0x7c>
8111bdc0:	20c00003 	ldbu	r3,0(r4)
8111bdc4:	10bfffc4 	addi	r2,r2,-1
8111bdc8:	30c01426 	beq	r6,r3,8111be1c <memchr+0x84>
8111bdcc:	21000044 	addi	r4,r4,1
8111bdd0:	20c000cc 	andi	r3,r4,3
8111bdd4:	183ff91e 	bne	r3,zero,8111bdbc <__reset+0xfb0fbdbc>
8111bdd8:	020000c4 	movi	r8,3
8111bddc:	40801136 	bltu	r8,r2,8111be24 <memchr+0x8c>
8111bde0:	10000c26 	beq	r2,zero,8111be14 <memchr+0x7c>
8111bde4:	20c00003 	ldbu	r3,0(r4)
8111bde8:	29403fcc 	andi	r5,r5,255
8111bdec:	28c00b26 	beq	r5,r3,8111be1c <memchr+0x84>
8111bdf0:	20c00044 	addi	r3,r4,1
8111bdf4:	39803fcc 	andi	r6,r7,255
8111bdf8:	2089883a 	add	r4,r4,r2
8111bdfc:	00000306 	br	8111be0c <memchr+0x74>
8111be00:	18c00044 	addi	r3,r3,1
8111be04:	197fffc3 	ldbu	r5,-1(r3)
8111be08:	31400526 	beq	r6,r5,8111be20 <memchr+0x88>
8111be0c:	1805883a 	mov	r2,r3
8111be10:	20fffb1e 	bne	r4,r3,8111be00 <__reset+0xfb0fbe00>
8111be14:	0005883a 	mov	r2,zero
8111be18:	f800283a 	ret
8111be1c:	2005883a 	mov	r2,r4
8111be20:	f800283a 	ret
8111be24:	28c03fcc 	andi	r3,r5,255
8111be28:	1812923a 	slli	r9,r3,8
8111be2c:	02ffbff4 	movhi	r11,65279
8111be30:	02a02074 	movhi	r10,32897
8111be34:	48d2b03a 	or	r9,r9,r3
8111be38:	4806943a 	slli	r3,r9,16
8111be3c:	5affbfc4 	addi	r11,r11,-257
8111be40:	52a02004 	addi	r10,r10,-32640
8111be44:	48d2b03a 	or	r9,r9,r3
8111be48:	20c00017 	ldw	r3,0(r4)
8111be4c:	48c6f03a 	xor	r3,r9,r3
8111be50:	1acd883a 	add	r6,r3,r11
8111be54:	00c6303a 	nor	r3,zero,r3
8111be58:	30c6703a 	and	r3,r6,r3
8111be5c:	1a86703a 	and	r3,r3,r10
8111be60:	183fe01e 	bne	r3,zero,8111bde4 <__reset+0xfb0fbde4>
8111be64:	10bfff04 	addi	r2,r2,-4
8111be68:	21000104 	addi	r4,r4,4
8111be6c:	40bff636 	bltu	r8,r2,8111be48 <__reset+0xfb0fbe48>
8111be70:	003fdb06 	br	8111bde0 <__reset+0xfb0fbde0>
8111be74:	3005883a 	mov	r2,r6
8111be78:	003fd706 	br	8111bdd8 <__reset+0xfb0fbdd8>

8111be7c <memmove>:
8111be7c:	2005883a 	mov	r2,r4
8111be80:	29000b2e 	bgeu	r5,r4,8111beb0 <memmove+0x34>
8111be84:	298f883a 	add	r7,r5,r6
8111be88:	21c0092e 	bgeu	r4,r7,8111beb0 <memmove+0x34>
8111be8c:	2187883a 	add	r3,r4,r6
8111be90:	198bc83a 	sub	r5,r3,r6
8111be94:	30004826 	beq	r6,zero,8111bfb8 <memmove+0x13c>
8111be98:	39ffffc4 	addi	r7,r7,-1
8111be9c:	39000003 	ldbu	r4,0(r7)
8111bea0:	18ffffc4 	addi	r3,r3,-1
8111bea4:	19000005 	stb	r4,0(r3)
8111bea8:	28fffb1e 	bne	r5,r3,8111be98 <__reset+0xfb0fbe98>
8111beac:	f800283a 	ret
8111beb0:	00c003c4 	movi	r3,15
8111beb4:	1980412e 	bgeu	r3,r6,8111bfbc <memmove+0x140>
8111beb8:	2886b03a 	or	r3,r5,r2
8111bebc:	18c000cc 	andi	r3,r3,3
8111bec0:	1800401e 	bne	r3,zero,8111bfc4 <memmove+0x148>
8111bec4:	33fffc04 	addi	r15,r6,-16
8111bec8:	781ed13a 	srli	r15,r15,4
8111becc:	28c00104 	addi	r3,r5,4
8111bed0:	13400104 	addi	r13,r2,4
8111bed4:	781c913a 	slli	r14,r15,4
8111bed8:	2b000204 	addi	r12,r5,8
8111bedc:	12c00204 	addi	r11,r2,8
8111bee0:	73800504 	addi	r14,r14,20
8111bee4:	2a800304 	addi	r10,r5,12
8111bee8:	12400304 	addi	r9,r2,12
8111beec:	2b9d883a 	add	r14,r5,r14
8111bef0:	2811883a 	mov	r8,r5
8111bef4:	100f883a 	mov	r7,r2
8111bef8:	41000017 	ldw	r4,0(r8)
8111befc:	39c00404 	addi	r7,r7,16
8111bf00:	18c00404 	addi	r3,r3,16
8111bf04:	393ffc15 	stw	r4,-16(r7)
8111bf08:	193ffc17 	ldw	r4,-16(r3)
8111bf0c:	6b400404 	addi	r13,r13,16
8111bf10:	5ac00404 	addi	r11,r11,16
8111bf14:	693ffc15 	stw	r4,-16(r13)
8111bf18:	61000017 	ldw	r4,0(r12)
8111bf1c:	4a400404 	addi	r9,r9,16
8111bf20:	42000404 	addi	r8,r8,16
8111bf24:	593ffc15 	stw	r4,-16(r11)
8111bf28:	51000017 	ldw	r4,0(r10)
8111bf2c:	63000404 	addi	r12,r12,16
8111bf30:	52800404 	addi	r10,r10,16
8111bf34:	493ffc15 	stw	r4,-16(r9)
8111bf38:	1bbfef1e 	bne	r3,r14,8111bef8 <__reset+0xfb0fbef8>
8111bf3c:	79000044 	addi	r4,r15,1
8111bf40:	2008913a 	slli	r4,r4,4
8111bf44:	328003cc 	andi	r10,r6,15
8111bf48:	02c000c4 	movi	r11,3
8111bf4c:	1107883a 	add	r3,r2,r4
8111bf50:	290b883a 	add	r5,r5,r4
8111bf54:	5a801e2e 	bgeu	r11,r10,8111bfd0 <memmove+0x154>
8111bf58:	1813883a 	mov	r9,r3
8111bf5c:	2811883a 	mov	r8,r5
8111bf60:	500f883a 	mov	r7,r10
8111bf64:	41000017 	ldw	r4,0(r8)
8111bf68:	4a400104 	addi	r9,r9,4
8111bf6c:	39ffff04 	addi	r7,r7,-4
8111bf70:	493fff15 	stw	r4,-4(r9)
8111bf74:	42000104 	addi	r8,r8,4
8111bf78:	59fffa36 	bltu	r11,r7,8111bf64 <__reset+0xfb0fbf64>
8111bf7c:	513fff04 	addi	r4,r10,-4
8111bf80:	2008d0ba 	srli	r4,r4,2
8111bf84:	318000cc 	andi	r6,r6,3
8111bf88:	21000044 	addi	r4,r4,1
8111bf8c:	2109883a 	add	r4,r4,r4
8111bf90:	2109883a 	add	r4,r4,r4
8111bf94:	1907883a 	add	r3,r3,r4
8111bf98:	290b883a 	add	r5,r5,r4
8111bf9c:	30000b26 	beq	r6,zero,8111bfcc <memmove+0x150>
8111bfa0:	198d883a 	add	r6,r3,r6
8111bfa4:	29c00003 	ldbu	r7,0(r5)
8111bfa8:	18c00044 	addi	r3,r3,1
8111bfac:	29400044 	addi	r5,r5,1
8111bfb0:	19ffffc5 	stb	r7,-1(r3)
8111bfb4:	19bffb1e 	bne	r3,r6,8111bfa4 <__reset+0xfb0fbfa4>
8111bfb8:	f800283a 	ret
8111bfbc:	1007883a 	mov	r3,r2
8111bfc0:	003ff606 	br	8111bf9c <__reset+0xfb0fbf9c>
8111bfc4:	1007883a 	mov	r3,r2
8111bfc8:	003ff506 	br	8111bfa0 <__reset+0xfb0fbfa0>
8111bfcc:	f800283a 	ret
8111bfd0:	500d883a 	mov	r6,r10
8111bfd4:	003ff106 	br	8111bf9c <__reset+0xfb0fbf9c>

8111bfd8 <_Balloc>:
8111bfd8:	defffc04 	addi	sp,sp,-16
8111bfdc:	de00012e 	bgeu	sp,et,8111bfe4 <_Balloc+0xc>
8111bfe0:	003b68fa 	trap	3
8111bfe4:	20801317 	ldw	r2,76(r4)
8111bfe8:	dc400115 	stw	r17,4(sp)
8111bfec:	dc000015 	stw	r16,0(sp)
8111bff0:	dfc00315 	stw	ra,12(sp)
8111bff4:	dc800215 	stw	r18,8(sp)
8111bff8:	2023883a 	mov	r17,r4
8111bffc:	2821883a 	mov	r16,r5
8111c000:	10000f26 	beq	r2,zero,8111c040 <_Balloc+0x68>
8111c004:	8407883a 	add	r3,r16,r16
8111c008:	18c7883a 	add	r3,r3,r3
8111c00c:	10c7883a 	add	r3,r2,r3
8111c010:	18800017 	ldw	r2,0(r3)
8111c014:	10001126 	beq	r2,zero,8111c05c <_Balloc+0x84>
8111c018:	11000017 	ldw	r4,0(r2)
8111c01c:	19000015 	stw	r4,0(r3)
8111c020:	10000415 	stw	zero,16(r2)
8111c024:	10000315 	stw	zero,12(r2)
8111c028:	dfc00317 	ldw	ra,12(sp)
8111c02c:	dc800217 	ldw	r18,8(sp)
8111c030:	dc400117 	ldw	r17,4(sp)
8111c034:	dc000017 	ldw	r16,0(sp)
8111c038:	dec00404 	addi	sp,sp,16
8111c03c:	f800283a 	ret
8111c040:	01800844 	movi	r6,33
8111c044:	01400104 	movi	r5,4
8111c048:	11225000 	call	81122500 <_calloc_r>
8111c04c:	88801315 	stw	r2,76(r17)
8111c050:	103fec1e 	bne	r2,zero,8111c004 <__reset+0xfb0fc004>
8111c054:	0005883a 	mov	r2,zero
8111c058:	003ff306 	br	8111c028 <__reset+0xfb0fc028>
8111c05c:	01400044 	movi	r5,1
8111c060:	2c24983a 	sll	r18,r5,r16
8111c064:	8809883a 	mov	r4,r17
8111c068:	91800144 	addi	r6,r18,5
8111c06c:	318d883a 	add	r6,r6,r6
8111c070:	318d883a 	add	r6,r6,r6
8111c074:	11225000 	call	81122500 <_calloc_r>
8111c078:	103ff626 	beq	r2,zero,8111c054 <__reset+0xfb0fc054>
8111c07c:	14000115 	stw	r16,4(r2)
8111c080:	14800215 	stw	r18,8(r2)
8111c084:	003fe606 	br	8111c020 <__reset+0xfb0fc020>

8111c088 <_Bfree>:
8111c088:	28000826 	beq	r5,zero,8111c0ac <_Bfree+0x24>
8111c08c:	28c00117 	ldw	r3,4(r5)
8111c090:	20801317 	ldw	r2,76(r4)
8111c094:	18c7883a 	add	r3,r3,r3
8111c098:	18c7883a 	add	r3,r3,r3
8111c09c:	10c5883a 	add	r2,r2,r3
8111c0a0:	10c00017 	ldw	r3,0(r2)
8111c0a4:	28c00015 	stw	r3,0(r5)
8111c0a8:	11400015 	stw	r5,0(r2)
8111c0ac:	f800283a 	ret

8111c0b0 <__multadd>:
8111c0b0:	defffa04 	addi	sp,sp,-24
8111c0b4:	de00012e 	bgeu	sp,et,8111c0bc <__multadd+0xc>
8111c0b8:	003b68fa 	trap	3
8111c0bc:	0011883a 	mov	r8,zero
8111c0c0:	dc800315 	stw	r18,12(sp)
8111c0c4:	dc400215 	stw	r17,8(sp)
8111c0c8:	dc000115 	stw	r16,4(sp)
8111c0cc:	2823883a 	mov	r17,r5
8111c0d0:	2c000417 	ldw	r16,16(r5)
8111c0d4:	dfc00515 	stw	ra,20(sp)
8111c0d8:	dcc00415 	stw	r19,16(sp)
8111c0dc:	2025883a 	mov	r18,r4
8111c0e0:	29400504 	addi	r5,r5,20
8111c0e4:	28c00017 	ldw	r3,0(r5)
8111c0e8:	29400104 	addi	r5,r5,4
8111c0ec:	42000044 	addi	r8,r8,1
8111c0f0:	18bfffcc 	andi	r2,r3,65535
8111c0f4:	1185383a 	mul	r2,r2,r6
8111c0f8:	1806d43a 	srli	r3,r3,16
8111c0fc:	11cf883a 	add	r7,r2,r7
8111c100:	3808d43a 	srli	r4,r7,16
8111c104:	1987383a 	mul	r3,r3,r6
8111c108:	38bfffcc 	andi	r2,r7,65535
8111c10c:	1907883a 	add	r3,r3,r4
8111c110:	1808943a 	slli	r4,r3,16
8111c114:	180ed43a 	srli	r7,r3,16
8111c118:	2085883a 	add	r2,r4,r2
8111c11c:	28bfff15 	stw	r2,-4(r5)
8111c120:	443ff016 	blt	r8,r16,8111c0e4 <__reset+0xfb0fc0e4>
8111c124:	38000926 	beq	r7,zero,8111c14c <__multadd+0x9c>
8111c128:	88800217 	ldw	r2,8(r17)
8111c12c:	80800f0e 	bge	r16,r2,8111c16c <__multadd+0xbc>
8111c130:	80800144 	addi	r2,r16,5
8111c134:	1085883a 	add	r2,r2,r2
8111c138:	1085883a 	add	r2,r2,r2
8111c13c:	8885883a 	add	r2,r17,r2
8111c140:	11c00015 	stw	r7,0(r2)
8111c144:	84000044 	addi	r16,r16,1
8111c148:	8c000415 	stw	r16,16(r17)
8111c14c:	8805883a 	mov	r2,r17
8111c150:	dfc00517 	ldw	ra,20(sp)
8111c154:	dcc00417 	ldw	r19,16(sp)
8111c158:	dc800317 	ldw	r18,12(sp)
8111c15c:	dc400217 	ldw	r17,8(sp)
8111c160:	dc000117 	ldw	r16,4(sp)
8111c164:	dec00604 	addi	sp,sp,24
8111c168:	f800283a 	ret
8111c16c:	89400117 	ldw	r5,4(r17)
8111c170:	9009883a 	mov	r4,r18
8111c174:	d9c00015 	stw	r7,0(sp)
8111c178:	29400044 	addi	r5,r5,1
8111c17c:	111bfd80 	call	8111bfd8 <_Balloc>
8111c180:	89800417 	ldw	r6,16(r17)
8111c184:	89400304 	addi	r5,r17,12
8111c188:	11000304 	addi	r4,r2,12
8111c18c:	31800084 	addi	r6,r6,2
8111c190:	318d883a 	add	r6,r6,r6
8111c194:	318d883a 	add	r6,r6,r6
8111c198:	1027883a 	mov	r19,r2
8111c19c:	11120c40 	call	811120c4 <memcpy>
8111c1a0:	d9c00017 	ldw	r7,0(sp)
8111c1a4:	88000a26 	beq	r17,zero,8111c1d0 <__multadd+0x120>
8111c1a8:	88c00117 	ldw	r3,4(r17)
8111c1ac:	90801317 	ldw	r2,76(r18)
8111c1b0:	18c7883a 	add	r3,r3,r3
8111c1b4:	18c7883a 	add	r3,r3,r3
8111c1b8:	10c5883a 	add	r2,r2,r3
8111c1bc:	10c00017 	ldw	r3,0(r2)
8111c1c0:	88c00015 	stw	r3,0(r17)
8111c1c4:	14400015 	stw	r17,0(r2)
8111c1c8:	9823883a 	mov	r17,r19
8111c1cc:	003fd806 	br	8111c130 <__reset+0xfb0fc130>
8111c1d0:	9823883a 	mov	r17,r19
8111c1d4:	003fd606 	br	8111c130 <__reset+0xfb0fc130>

8111c1d8 <__s2b>:
8111c1d8:	defff904 	addi	sp,sp,-28
8111c1dc:	de00012e 	bgeu	sp,et,8111c1e4 <__s2b+0xc>
8111c1e0:	003b68fa 	trap	3
8111c1e4:	dc400115 	stw	r17,4(sp)
8111c1e8:	dc000015 	stw	r16,0(sp)
8111c1ec:	2023883a 	mov	r17,r4
8111c1f0:	2821883a 	mov	r16,r5
8111c1f4:	39000204 	addi	r4,r7,8
8111c1f8:	01400244 	movi	r5,9
8111c1fc:	dcc00315 	stw	r19,12(sp)
8111c200:	dc800215 	stw	r18,8(sp)
8111c204:	dfc00615 	stw	ra,24(sp)
8111c208:	dd400515 	stw	r21,20(sp)
8111c20c:	dd000415 	stw	r20,16(sp)
8111c210:	3825883a 	mov	r18,r7
8111c214:	3027883a 	mov	r19,r6
8111c218:	11243f80 	call	811243f8 <__divsi3>
8111c21c:	00c00044 	movi	r3,1
8111c220:	000b883a 	mov	r5,zero
8111c224:	1880030e 	bge	r3,r2,8111c234 <__s2b+0x5c>
8111c228:	18c7883a 	add	r3,r3,r3
8111c22c:	29400044 	addi	r5,r5,1
8111c230:	18bffd16 	blt	r3,r2,8111c228 <__reset+0xfb0fc228>
8111c234:	8809883a 	mov	r4,r17
8111c238:	111bfd80 	call	8111bfd8 <_Balloc>
8111c23c:	d8c00717 	ldw	r3,28(sp)
8111c240:	10c00515 	stw	r3,20(r2)
8111c244:	00c00044 	movi	r3,1
8111c248:	10c00415 	stw	r3,16(r2)
8111c24c:	00c00244 	movi	r3,9
8111c250:	1cc0210e 	bge	r3,r19,8111c2d8 <__s2b+0x100>
8111c254:	80eb883a 	add	r21,r16,r3
8111c258:	a829883a 	mov	r20,r21
8111c25c:	84e1883a 	add	r16,r16,r19
8111c260:	a1c00007 	ldb	r7,0(r20)
8111c264:	01800284 	movi	r6,10
8111c268:	a5000044 	addi	r20,r20,1
8111c26c:	100b883a 	mov	r5,r2
8111c270:	39fff404 	addi	r7,r7,-48
8111c274:	8809883a 	mov	r4,r17
8111c278:	111c0b00 	call	8111c0b0 <__multadd>
8111c27c:	a43ff81e 	bne	r20,r16,8111c260 <__reset+0xfb0fc260>
8111c280:	ace1883a 	add	r16,r21,r19
8111c284:	843ffe04 	addi	r16,r16,-8
8111c288:	9c800a0e 	bge	r19,r18,8111c2b4 <__s2b+0xdc>
8111c28c:	94e5c83a 	sub	r18,r18,r19
8111c290:	84a5883a 	add	r18,r16,r18
8111c294:	81c00007 	ldb	r7,0(r16)
8111c298:	01800284 	movi	r6,10
8111c29c:	84000044 	addi	r16,r16,1
8111c2a0:	100b883a 	mov	r5,r2
8111c2a4:	39fff404 	addi	r7,r7,-48
8111c2a8:	8809883a 	mov	r4,r17
8111c2ac:	111c0b00 	call	8111c0b0 <__multadd>
8111c2b0:	84bff81e 	bne	r16,r18,8111c294 <__reset+0xfb0fc294>
8111c2b4:	dfc00617 	ldw	ra,24(sp)
8111c2b8:	dd400517 	ldw	r21,20(sp)
8111c2bc:	dd000417 	ldw	r20,16(sp)
8111c2c0:	dcc00317 	ldw	r19,12(sp)
8111c2c4:	dc800217 	ldw	r18,8(sp)
8111c2c8:	dc400117 	ldw	r17,4(sp)
8111c2cc:	dc000017 	ldw	r16,0(sp)
8111c2d0:	dec00704 	addi	sp,sp,28
8111c2d4:	f800283a 	ret
8111c2d8:	84000284 	addi	r16,r16,10
8111c2dc:	1827883a 	mov	r19,r3
8111c2e0:	003fe906 	br	8111c288 <__reset+0xfb0fc288>

8111c2e4 <__hi0bits>:
8111c2e4:	20bfffec 	andhi	r2,r4,65535
8111c2e8:	1000141e 	bne	r2,zero,8111c33c <__hi0bits+0x58>
8111c2ec:	2008943a 	slli	r4,r4,16
8111c2f0:	00800404 	movi	r2,16
8111c2f4:	20ffc02c 	andhi	r3,r4,65280
8111c2f8:	1800021e 	bne	r3,zero,8111c304 <__hi0bits+0x20>
8111c2fc:	2008923a 	slli	r4,r4,8
8111c300:	10800204 	addi	r2,r2,8
8111c304:	20fc002c 	andhi	r3,r4,61440
8111c308:	1800021e 	bne	r3,zero,8111c314 <__hi0bits+0x30>
8111c30c:	2008913a 	slli	r4,r4,4
8111c310:	10800104 	addi	r2,r2,4
8111c314:	20f0002c 	andhi	r3,r4,49152
8111c318:	1800031e 	bne	r3,zero,8111c328 <__hi0bits+0x44>
8111c31c:	2109883a 	add	r4,r4,r4
8111c320:	10800084 	addi	r2,r2,2
8111c324:	2109883a 	add	r4,r4,r4
8111c328:	20000316 	blt	r4,zero,8111c338 <__hi0bits+0x54>
8111c32c:	2110002c 	andhi	r4,r4,16384
8111c330:	2000041e 	bne	r4,zero,8111c344 <__hi0bits+0x60>
8111c334:	00800804 	movi	r2,32
8111c338:	f800283a 	ret
8111c33c:	0005883a 	mov	r2,zero
8111c340:	003fec06 	br	8111c2f4 <__reset+0xfb0fc2f4>
8111c344:	10800044 	addi	r2,r2,1
8111c348:	f800283a 	ret

8111c34c <__lo0bits>:
8111c34c:	20c00017 	ldw	r3,0(r4)
8111c350:	188001cc 	andi	r2,r3,7
8111c354:	10000826 	beq	r2,zero,8111c378 <__lo0bits+0x2c>
8111c358:	1880004c 	andi	r2,r3,1
8111c35c:	1000211e 	bne	r2,zero,8111c3e4 <__lo0bits+0x98>
8111c360:	1880008c 	andi	r2,r3,2
8111c364:	1000211e 	bne	r2,zero,8111c3ec <__lo0bits+0xa0>
8111c368:	1806d0ba 	srli	r3,r3,2
8111c36c:	00800084 	movi	r2,2
8111c370:	20c00015 	stw	r3,0(r4)
8111c374:	f800283a 	ret
8111c378:	18bfffcc 	andi	r2,r3,65535
8111c37c:	10001326 	beq	r2,zero,8111c3cc <__lo0bits+0x80>
8111c380:	0005883a 	mov	r2,zero
8111c384:	19403fcc 	andi	r5,r3,255
8111c388:	2800021e 	bne	r5,zero,8111c394 <__lo0bits+0x48>
8111c38c:	1806d23a 	srli	r3,r3,8
8111c390:	10800204 	addi	r2,r2,8
8111c394:	194003cc 	andi	r5,r3,15
8111c398:	2800021e 	bne	r5,zero,8111c3a4 <__lo0bits+0x58>
8111c39c:	1806d13a 	srli	r3,r3,4
8111c3a0:	10800104 	addi	r2,r2,4
8111c3a4:	194000cc 	andi	r5,r3,3
8111c3a8:	2800021e 	bne	r5,zero,8111c3b4 <__lo0bits+0x68>
8111c3ac:	1806d0ba 	srli	r3,r3,2
8111c3b0:	10800084 	addi	r2,r2,2
8111c3b4:	1940004c 	andi	r5,r3,1
8111c3b8:	2800081e 	bne	r5,zero,8111c3dc <__lo0bits+0x90>
8111c3bc:	1806d07a 	srli	r3,r3,1
8111c3c0:	1800051e 	bne	r3,zero,8111c3d8 <__lo0bits+0x8c>
8111c3c4:	00800804 	movi	r2,32
8111c3c8:	f800283a 	ret
8111c3cc:	1806d43a 	srli	r3,r3,16
8111c3d0:	00800404 	movi	r2,16
8111c3d4:	003feb06 	br	8111c384 <__reset+0xfb0fc384>
8111c3d8:	10800044 	addi	r2,r2,1
8111c3dc:	20c00015 	stw	r3,0(r4)
8111c3e0:	f800283a 	ret
8111c3e4:	0005883a 	mov	r2,zero
8111c3e8:	f800283a 	ret
8111c3ec:	1806d07a 	srli	r3,r3,1
8111c3f0:	00800044 	movi	r2,1
8111c3f4:	20c00015 	stw	r3,0(r4)
8111c3f8:	f800283a 	ret

8111c3fc <__i2b>:
8111c3fc:	defffd04 	addi	sp,sp,-12
8111c400:	de00012e 	bgeu	sp,et,8111c408 <__i2b+0xc>
8111c404:	003b68fa 	trap	3
8111c408:	dc000015 	stw	r16,0(sp)
8111c40c:	04000044 	movi	r16,1
8111c410:	dc400115 	stw	r17,4(sp)
8111c414:	2823883a 	mov	r17,r5
8111c418:	800b883a 	mov	r5,r16
8111c41c:	dfc00215 	stw	ra,8(sp)
8111c420:	111bfd80 	call	8111bfd8 <_Balloc>
8111c424:	14400515 	stw	r17,20(r2)
8111c428:	14000415 	stw	r16,16(r2)
8111c42c:	dfc00217 	ldw	ra,8(sp)
8111c430:	dc400117 	ldw	r17,4(sp)
8111c434:	dc000017 	ldw	r16,0(sp)
8111c438:	dec00304 	addi	sp,sp,12
8111c43c:	f800283a 	ret

8111c440 <__multiply>:
8111c440:	defffa04 	addi	sp,sp,-24
8111c444:	de00012e 	bgeu	sp,et,8111c44c <__multiply+0xc>
8111c448:	003b68fa 	trap	3
8111c44c:	dcc00315 	stw	r19,12(sp)
8111c450:	dc800215 	stw	r18,8(sp)
8111c454:	34c00417 	ldw	r19,16(r6)
8111c458:	2c800417 	ldw	r18,16(r5)
8111c45c:	dd000415 	stw	r20,16(sp)
8111c460:	dc400115 	stw	r17,4(sp)
8111c464:	dfc00515 	stw	ra,20(sp)
8111c468:	dc000015 	stw	r16,0(sp)
8111c46c:	2829883a 	mov	r20,r5
8111c470:	3023883a 	mov	r17,r6
8111c474:	94c0050e 	bge	r18,r19,8111c48c <__multiply+0x4c>
8111c478:	9007883a 	mov	r3,r18
8111c47c:	3029883a 	mov	r20,r6
8111c480:	9825883a 	mov	r18,r19
8111c484:	2823883a 	mov	r17,r5
8111c488:	1827883a 	mov	r19,r3
8111c48c:	a0800217 	ldw	r2,8(r20)
8111c490:	94e1883a 	add	r16,r18,r19
8111c494:	a1400117 	ldw	r5,4(r20)
8111c498:	1400010e 	bge	r2,r16,8111c4a0 <__multiply+0x60>
8111c49c:	29400044 	addi	r5,r5,1
8111c4a0:	111bfd80 	call	8111bfd8 <_Balloc>
8111c4a4:	8415883a 	add	r10,r16,r16
8111c4a8:	12c00504 	addi	r11,r2,20
8111c4ac:	5295883a 	add	r10,r10,r10
8111c4b0:	5a95883a 	add	r10,r11,r10
8111c4b4:	5807883a 	mov	r3,r11
8111c4b8:	5a80032e 	bgeu	r11,r10,8111c4c8 <__multiply+0x88>
8111c4bc:	18000015 	stw	zero,0(r3)
8111c4c0:	18c00104 	addi	r3,r3,4
8111c4c4:	1abffd36 	bltu	r3,r10,8111c4bc <__reset+0xfb0fc4bc>
8111c4c8:	9ce7883a 	add	r19,r19,r19
8111c4cc:	94a5883a 	add	r18,r18,r18
8111c4d0:	89800504 	addi	r6,r17,20
8111c4d4:	9ce7883a 	add	r19,r19,r19
8111c4d8:	a3400504 	addi	r13,r20,20
8111c4dc:	94a5883a 	add	r18,r18,r18
8111c4e0:	34d9883a 	add	r12,r6,r19
8111c4e4:	6c93883a 	add	r9,r13,r18
8111c4e8:	3300422e 	bgeu	r6,r12,8111c5f4 <__multiply+0x1b4>
8111c4ec:	37c00017 	ldw	ra,0(r6)
8111c4f0:	fbffffcc 	andi	r15,ra,65535
8111c4f4:	78001b26 	beq	r15,zero,8111c564 <__multiply+0x124>
8111c4f8:	5811883a 	mov	r8,r11
8111c4fc:	681d883a 	mov	r14,r13
8111c500:	000f883a 	mov	r7,zero
8111c504:	71000017 	ldw	r4,0(r14)
8111c508:	40c00017 	ldw	r3,0(r8)
8111c50c:	73800104 	addi	r14,r14,4
8111c510:	217fffcc 	andi	r5,r4,65535
8111c514:	2bcb383a 	mul	r5,r5,r15
8111c518:	2008d43a 	srli	r4,r4,16
8111c51c:	1c7fffcc 	andi	r17,r3,65535
8111c520:	2c4b883a 	add	r5,r5,r17
8111c524:	29cb883a 	add	r5,r5,r7
8111c528:	23c9383a 	mul	r4,r4,r15
8111c52c:	1806d43a 	srli	r3,r3,16
8111c530:	280ed43a 	srli	r7,r5,16
8111c534:	297fffcc 	andi	r5,r5,65535
8111c538:	20c7883a 	add	r3,r4,r3
8111c53c:	19c7883a 	add	r3,r3,r7
8111c540:	1808943a 	slli	r4,r3,16
8111c544:	4023883a 	mov	r17,r8
8111c548:	180ed43a 	srli	r7,r3,16
8111c54c:	214ab03a 	or	r5,r4,r5
8111c550:	41400015 	stw	r5,0(r8)
8111c554:	42000104 	addi	r8,r8,4
8111c558:	727fea36 	bltu	r14,r9,8111c504 <__reset+0xfb0fc504>
8111c55c:	89c00115 	stw	r7,4(r17)
8111c560:	37c00017 	ldw	ra,0(r6)
8111c564:	f83ed43a 	srli	ra,ra,16
8111c568:	f8001f26 	beq	ra,zero,8111c5e8 <__multiply+0x1a8>
8111c56c:	58c00017 	ldw	r3,0(r11)
8111c570:	681d883a 	mov	r14,r13
8111c574:	581f883a 	mov	r15,r11
8111c578:	1811883a 	mov	r8,r3
8111c57c:	5825883a 	mov	r18,r11
8111c580:	000f883a 	mov	r7,zero
8111c584:	00000106 	br	8111c58c <__multiply+0x14c>
8111c588:	8825883a 	mov	r18,r17
8111c58c:	7140000b 	ldhu	r5,0(r14)
8111c590:	4010d43a 	srli	r8,r8,16
8111c594:	193fffcc 	andi	r4,r3,65535
8111c598:	2fcb383a 	mul	r5,r5,ra
8111c59c:	7bc00104 	addi	r15,r15,4
8111c5a0:	73800104 	addi	r14,r14,4
8111c5a4:	2a0b883a 	add	r5,r5,r8
8111c5a8:	29cb883a 	add	r5,r5,r7
8111c5ac:	2806943a 	slli	r3,r5,16
8111c5b0:	94400104 	addi	r17,r18,4
8111c5b4:	280ad43a 	srli	r5,r5,16
8111c5b8:	1908b03a 	or	r4,r3,r4
8111c5bc:	793fff15 	stw	r4,-4(r15)
8111c5c0:	70ffff17 	ldw	r3,-4(r14)
8111c5c4:	8a000017 	ldw	r8,0(r17)
8111c5c8:	1806d43a 	srli	r3,r3,16
8111c5cc:	413fffcc 	andi	r4,r8,65535
8111c5d0:	1fc7383a 	mul	r3,r3,ra
8111c5d4:	1907883a 	add	r3,r3,r4
8111c5d8:	1947883a 	add	r3,r3,r5
8111c5dc:	180ed43a 	srli	r7,r3,16
8111c5e0:	727fe936 	bltu	r14,r9,8111c588 <__reset+0xfb0fc588>
8111c5e4:	90c00115 	stw	r3,4(r18)
8111c5e8:	31800104 	addi	r6,r6,4
8111c5ec:	5ac00104 	addi	r11,r11,4
8111c5f0:	333fbe36 	bltu	r6,r12,8111c4ec <__reset+0xfb0fc4ec>
8111c5f4:	0400090e 	bge	zero,r16,8111c61c <__multiply+0x1dc>
8111c5f8:	50ffff17 	ldw	r3,-4(r10)
8111c5fc:	52bfff04 	addi	r10,r10,-4
8111c600:	18000326 	beq	r3,zero,8111c610 <__multiply+0x1d0>
8111c604:	00000506 	br	8111c61c <__multiply+0x1dc>
8111c608:	50c00017 	ldw	r3,0(r10)
8111c60c:	1800031e 	bne	r3,zero,8111c61c <__multiply+0x1dc>
8111c610:	843fffc4 	addi	r16,r16,-1
8111c614:	52bfff04 	addi	r10,r10,-4
8111c618:	803ffb1e 	bne	r16,zero,8111c608 <__reset+0xfb0fc608>
8111c61c:	14000415 	stw	r16,16(r2)
8111c620:	dfc00517 	ldw	ra,20(sp)
8111c624:	dd000417 	ldw	r20,16(sp)
8111c628:	dcc00317 	ldw	r19,12(sp)
8111c62c:	dc800217 	ldw	r18,8(sp)
8111c630:	dc400117 	ldw	r17,4(sp)
8111c634:	dc000017 	ldw	r16,0(sp)
8111c638:	dec00604 	addi	sp,sp,24
8111c63c:	f800283a 	ret

8111c640 <__pow5mult>:
8111c640:	defffa04 	addi	sp,sp,-24
8111c644:	de00012e 	bgeu	sp,et,8111c64c <__pow5mult+0xc>
8111c648:	003b68fa 	trap	3
8111c64c:	308000cc 	andi	r2,r6,3
8111c650:	dcc00315 	stw	r19,12(sp)
8111c654:	dc000015 	stw	r16,0(sp)
8111c658:	dfc00515 	stw	ra,20(sp)
8111c65c:	dd000415 	stw	r20,16(sp)
8111c660:	dc800215 	stw	r18,8(sp)
8111c664:	dc400115 	stw	r17,4(sp)
8111c668:	3021883a 	mov	r16,r6
8111c66c:	2027883a 	mov	r19,r4
8111c670:	10002f1e 	bne	r2,zero,8111c730 <__pow5mult+0xf0>
8111c674:	2825883a 	mov	r18,r5
8111c678:	8021d0ba 	srai	r16,r16,2
8111c67c:	80001a26 	beq	r16,zero,8111c6e8 <__pow5mult+0xa8>
8111c680:	9c401217 	ldw	r17,72(r19)
8111c684:	8800061e 	bne	r17,zero,8111c6a0 <__pow5mult+0x60>
8111c688:	00003406 	br	8111c75c <__pow5mult+0x11c>
8111c68c:	8021d07a 	srai	r16,r16,1
8111c690:	80001526 	beq	r16,zero,8111c6e8 <__pow5mult+0xa8>
8111c694:	88800017 	ldw	r2,0(r17)
8111c698:	10001c26 	beq	r2,zero,8111c70c <__pow5mult+0xcc>
8111c69c:	1023883a 	mov	r17,r2
8111c6a0:	8080004c 	andi	r2,r16,1
8111c6a4:	103ff926 	beq	r2,zero,8111c68c <__reset+0xfb0fc68c>
8111c6a8:	880d883a 	mov	r6,r17
8111c6ac:	900b883a 	mov	r5,r18
8111c6b0:	9809883a 	mov	r4,r19
8111c6b4:	111c4400 	call	8111c440 <__multiply>
8111c6b8:	90001b26 	beq	r18,zero,8111c728 <__pow5mult+0xe8>
8111c6bc:	91000117 	ldw	r4,4(r18)
8111c6c0:	98c01317 	ldw	r3,76(r19)
8111c6c4:	8021d07a 	srai	r16,r16,1
8111c6c8:	2109883a 	add	r4,r4,r4
8111c6cc:	2109883a 	add	r4,r4,r4
8111c6d0:	1907883a 	add	r3,r3,r4
8111c6d4:	19000017 	ldw	r4,0(r3)
8111c6d8:	91000015 	stw	r4,0(r18)
8111c6dc:	1c800015 	stw	r18,0(r3)
8111c6e0:	1025883a 	mov	r18,r2
8111c6e4:	803feb1e 	bne	r16,zero,8111c694 <__reset+0xfb0fc694>
8111c6e8:	9005883a 	mov	r2,r18
8111c6ec:	dfc00517 	ldw	ra,20(sp)
8111c6f0:	dd000417 	ldw	r20,16(sp)
8111c6f4:	dcc00317 	ldw	r19,12(sp)
8111c6f8:	dc800217 	ldw	r18,8(sp)
8111c6fc:	dc400117 	ldw	r17,4(sp)
8111c700:	dc000017 	ldw	r16,0(sp)
8111c704:	dec00604 	addi	sp,sp,24
8111c708:	f800283a 	ret
8111c70c:	880d883a 	mov	r6,r17
8111c710:	880b883a 	mov	r5,r17
8111c714:	9809883a 	mov	r4,r19
8111c718:	111c4400 	call	8111c440 <__multiply>
8111c71c:	88800015 	stw	r2,0(r17)
8111c720:	10000015 	stw	zero,0(r2)
8111c724:	003fdd06 	br	8111c69c <__reset+0xfb0fc69c>
8111c728:	1025883a 	mov	r18,r2
8111c72c:	003fd706 	br	8111c68c <__reset+0xfb0fc68c>
8111c730:	10bfffc4 	addi	r2,r2,-1
8111c734:	1085883a 	add	r2,r2,r2
8111c738:	00e04534 	movhi	r3,33044
8111c73c:	18f6c504 	addi	r3,r3,-9452
8111c740:	1085883a 	add	r2,r2,r2
8111c744:	1885883a 	add	r2,r3,r2
8111c748:	11800017 	ldw	r6,0(r2)
8111c74c:	000f883a 	mov	r7,zero
8111c750:	111c0b00 	call	8111c0b0 <__multadd>
8111c754:	1025883a 	mov	r18,r2
8111c758:	003fc706 	br	8111c678 <__reset+0xfb0fc678>
8111c75c:	05000044 	movi	r20,1
8111c760:	a00b883a 	mov	r5,r20
8111c764:	9809883a 	mov	r4,r19
8111c768:	111bfd80 	call	8111bfd8 <_Balloc>
8111c76c:	1023883a 	mov	r17,r2
8111c770:	00809c44 	movi	r2,625
8111c774:	88800515 	stw	r2,20(r17)
8111c778:	8d000415 	stw	r20,16(r17)
8111c77c:	9c401215 	stw	r17,72(r19)
8111c780:	88000015 	stw	zero,0(r17)
8111c784:	003fc606 	br	8111c6a0 <__reset+0xfb0fc6a0>

8111c788 <__lshift>:
8111c788:	defff904 	addi	sp,sp,-28
8111c78c:	de00012e 	bgeu	sp,et,8111c794 <__lshift+0xc>
8111c790:	003b68fa 	trap	3
8111c794:	dd400515 	stw	r21,20(sp)
8111c798:	dcc00315 	stw	r19,12(sp)
8111c79c:	302bd17a 	srai	r21,r6,5
8111c7a0:	2cc00417 	ldw	r19,16(r5)
8111c7a4:	28800217 	ldw	r2,8(r5)
8111c7a8:	dd000415 	stw	r20,16(sp)
8111c7ac:	ace7883a 	add	r19,r21,r19
8111c7b0:	dc800215 	stw	r18,8(sp)
8111c7b4:	dc400115 	stw	r17,4(sp)
8111c7b8:	dc000015 	stw	r16,0(sp)
8111c7bc:	dfc00615 	stw	ra,24(sp)
8111c7c0:	9c000044 	addi	r16,r19,1
8111c7c4:	2823883a 	mov	r17,r5
8111c7c8:	3029883a 	mov	r20,r6
8111c7cc:	2025883a 	mov	r18,r4
8111c7d0:	29400117 	ldw	r5,4(r5)
8111c7d4:	1400030e 	bge	r2,r16,8111c7e4 <__lshift+0x5c>
8111c7d8:	1085883a 	add	r2,r2,r2
8111c7dc:	29400044 	addi	r5,r5,1
8111c7e0:	143ffd16 	blt	r2,r16,8111c7d8 <__reset+0xfb0fc7d8>
8111c7e4:	9009883a 	mov	r4,r18
8111c7e8:	111bfd80 	call	8111bfd8 <_Balloc>
8111c7ec:	10c00504 	addi	r3,r2,20
8111c7f0:	0540070e 	bge	zero,r21,8111c810 <__lshift+0x88>
8111c7f4:	ad6b883a 	add	r21,r21,r21
8111c7f8:	ad6b883a 	add	r21,r21,r21
8111c7fc:	1809883a 	mov	r4,r3
8111c800:	1d47883a 	add	r3,r3,r21
8111c804:	20000015 	stw	zero,0(r4)
8111c808:	21000104 	addi	r4,r4,4
8111c80c:	193ffd1e 	bne	r3,r4,8111c804 <__reset+0xfb0fc804>
8111c810:	8a000417 	ldw	r8,16(r17)
8111c814:	89000504 	addi	r4,r17,20
8111c818:	a18007cc 	andi	r6,r20,31
8111c81c:	4211883a 	add	r8,r8,r8
8111c820:	4211883a 	add	r8,r8,r8
8111c824:	2211883a 	add	r8,r4,r8
8111c828:	30002326 	beq	r6,zero,8111c8b8 <__lshift+0x130>
8111c82c:	02400804 	movi	r9,32
8111c830:	4993c83a 	sub	r9,r9,r6
8111c834:	000b883a 	mov	r5,zero
8111c838:	21c00017 	ldw	r7,0(r4)
8111c83c:	1815883a 	mov	r10,r3
8111c840:	18c00104 	addi	r3,r3,4
8111c844:	398e983a 	sll	r7,r7,r6
8111c848:	21000104 	addi	r4,r4,4
8111c84c:	394ab03a 	or	r5,r7,r5
8111c850:	197fff15 	stw	r5,-4(r3)
8111c854:	217fff17 	ldw	r5,-4(r4)
8111c858:	2a4ad83a 	srl	r5,r5,r9
8111c85c:	223ff636 	bltu	r4,r8,8111c838 <__reset+0xfb0fc838>
8111c860:	51400115 	stw	r5,4(r10)
8111c864:	28001a1e 	bne	r5,zero,8111c8d0 <__lshift+0x148>
8111c868:	843fffc4 	addi	r16,r16,-1
8111c86c:	14000415 	stw	r16,16(r2)
8111c870:	88000826 	beq	r17,zero,8111c894 <__lshift+0x10c>
8111c874:	89000117 	ldw	r4,4(r17)
8111c878:	90c01317 	ldw	r3,76(r18)
8111c87c:	2109883a 	add	r4,r4,r4
8111c880:	2109883a 	add	r4,r4,r4
8111c884:	1907883a 	add	r3,r3,r4
8111c888:	19000017 	ldw	r4,0(r3)
8111c88c:	89000015 	stw	r4,0(r17)
8111c890:	1c400015 	stw	r17,0(r3)
8111c894:	dfc00617 	ldw	ra,24(sp)
8111c898:	dd400517 	ldw	r21,20(sp)
8111c89c:	dd000417 	ldw	r20,16(sp)
8111c8a0:	dcc00317 	ldw	r19,12(sp)
8111c8a4:	dc800217 	ldw	r18,8(sp)
8111c8a8:	dc400117 	ldw	r17,4(sp)
8111c8ac:	dc000017 	ldw	r16,0(sp)
8111c8b0:	dec00704 	addi	sp,sp,28
8111c8b4:	f800283a 	ret
8111c8b8:	21400017 	ldw	r5,0(r4)
8111c8bc:	18c00104 	addi	r3,r3,4
8111c8c0:	21000104 	addi	r4,r4,4
8111c8c4:	197fff15 	stw	r5,-4(r3)
8111c8c8:	223ffb36 	bltu	r4,r8,8111c8b8 <__reset+0xfb0fc8b8>
8111c8cc:	003fe606 	br	8111c868 <__reset+0xfb0fc868>
8111c8d0:	9c000084 	addi	r16,r19,2
8111c8d4:	003fe406 	br	8111c868 <__reset+0xfb0fc868>

8111c8d8 <__mcmp>:
8111c8d8:	20800417 	ldw	r2,16(r4)
8111c8dc:	28c00417 	ldw	r3,16(r5)
8111c8e0:	10c5c83a 	sub	r2,r2,r3
8111c8e4:	1000111e 	bne	r2,zero,8111c92c <__mcmp+0x54>
8111c8e8:	18c7883a 	add	r3,r3,r3
8111c8ec:	18c7883a 	add	r3,r3,r3
8111c8f0:	21000504 	addi	r4,r4,20
8111c8f4:	29400504 	addi	r5,r5,20
8111c8f8:	20c5883a 	add	r2,r4,r3
8111c8fc:	28cb883a 	add	r5,r5,r3
8111c900:	00000106 	br	8111c908 <__mcmp+0x30>
8111c904:	20800a2e 	bgeu	r4,r2,8111c930 <__mcmp+0x58>
8111c908:	10bfff04 	addi	r2,r2,-4
8111c90c:	297fff04 	addi	r5,r5,-4
8111c910:	11800017 	ldw	r6,0(r2)
8111c914:	28c00017 	ldw	r3,0(r5)
8111c918:	30fffa26 	beq	r6,r3,8111c904 <__reset+0xfb0fc904>
8111c91c:	30c00236 	bltu	r6,r3,8111c928 <__mcmp+0x50>
8111c920:	00800044 	movi	r2,1
8111c924:	f800283a 	ret
8111c928:	00bfffc4 	movi	r2,-1
8111c92c:	f800283a 	ret
8111c930:	0005883a 	mov	r2,zero
8111c934:	f800283a 	ret

8111c938 <__mdiff>:
8111c938:	defffa04 	addi	sp,sp,-24
8111c93c:	de00012e 	bgeu	sp,et,8111c944 <__mdiff+0xc>
8111c940:	003b68fa 	trap	3
8111c944:	28c00417 	ldw	r3,16(r5)
8111c948:	30800417 	ldw	r2,16(r6)
8111c94c:	dcc00315 	stw	r19,12(sp)
8111c950:	dc800215 	stw	r18,8(sp)
8111c954:	dfc00515 	stw	ra,20(sp)
8111c958:	dd000415 	stw	r20,16(sp)
8111c95c:	dc400115 	stw	r17,4(sp)
8111c960:	dc000015 	stw	r16,0(sp)
8111c964:	1887c83a 	sub	r3,r3,r2
8111c968:	2825883a 	mov	r18,r5
8111c96c:	3027883a 	mov	r19,r6
8111c970:	1800141e 	bne	r3,zero,8111c9c4 <__mdiff+0x8c>
8111c974:	1085883a 	add	r2,r2,r2
8111c978:	1085883a 	add	r2,r2,r2
8111c97c:	2a000504 	addi	r8,r5,20
8111c980:	34000504 	addi	r16,r6,20
8111c984:	4087883a 	add	r3,r8,r2
8111c988:	8085883a 	add	r2,r16,r2
8111c98c:	00000106 	br	8111c994 <__mdiff+0x5c>
8111c990:	40c0592e 	bgeu	r8,r3,8111caf8 <__mdiff+0x1c0>
8111c994:	18ffff04 	addi	r3,r3,-4
8111c998:	10bfff04 	addi	r2,r2,-4
8111c99c:	19c00017 	ldw	r7,0(r3)
8111c9a0:	11400017 	ldw	r5,0(r2)
8111c9a4:	397ffa26 	beq	r7,r5,8111c990 <__reset+0xfb0fc990>
8111c9a8:	3940592e 	bgeu	r7,r5,8111cb10 <__mdiff+0x1d8>
8111c9ac:	9005883a 	mov	r2,r18
8111c9b0:	4023883a 	mov	r17,r8
8111c9b4:	9825883a 	mov	r18,r19
8111c9b8:	05000044 	movi	r20,1
8111c9bc:	1027883a 	mov	r19,r2
8111c9c0:	00000406 	br	8111c9d4 <__mdiff+0x9c>
8111c9c4:	18005616 	blt	r3,zero,8111cb20 <__mdiff+0x1e8>
8111c9c8:	34400504 	addi	r17,r6,20
8111c9cc:	2c000504 	addi	r16,r5,20
8111c9d0:	0029883a 	mov	r20,zero
8111c9d4:	91400117 	ldw	r5,4(r18)
8111c9d8:	111bfd80 	call	8111bfd8 <_Balloc>
8111c9dc:	92400417 	ldw	r9,16(r18)
8111c9e0:	9b000417 	ldw	r12,16(r19)
8111c9e4:	12c00504 	addi	r11,r2,20
8111c9e8:	4a51883a 	add	r8,r9,r9
8111c9ec:	6319883a 	add	r12,r12,r12
8111c9f0:	4211883a 	add	r8,r8,r8
8111c9f4:	6319883a 	add	r12,r12,r12
8111c9f8:	15000315 	stw	r20,12(r2)
8111c9fc:	8211883a 	add	r8,r16,r8
8111ca00:	8b19883a 	add	r12,r17,r12
8111ca04:	0007883a 	mov	r3,zero
8111ca08:	81400017 	ldw	r5,0(r16)
8111ca0c:	89c00017 	ldw	r7,0(r17)
8111ca10:	59800104 	addi	r6,r11,4
8111ca14:	293fffcc 	andi	r4,r5,65535
8111ca18:	20c7883a 	add	r3,r4,r3
8111ca1c:	393fffcc 	andi	r4,r7,65535
8111ca20:	1909c83a 	sub	r4,r3,r4
8111ca24:	280ad43a 	srli	r5,r5,16
8111ca28:	380ed43a 	srli	r7,r7,16
8111ca2c:	2007d43a 	srai	r3,r4,16
8111ca30:	213fffcc 	andi	r4,r4,65535
8111ca34:	29cbc83a 	sub	r5,r5,r7
8111ca38:	28c7883a 	add	r3,r5,r3
8111ca3c:	180a943a 	slli	r5,r3,16
8111ca40:	8c400104 	addi	r17,r17,4
8111ca44:	84000104 	addi	r16,r16,4
8111ca48:	2908b03a 	or	r4,r5,r4
8111ca4c:	59000015 	stw	r4,0(r11)
8111ca50:	1807d43a 	srai	r3,r3,16
8111ca54:	3015883a 	mov	r10,r6
8111ca58:	3017883a 	mov	r11,r6
8111ca5c:	8b3fea36 	bltu	r17,r12,8111ca08 <__reset+0xfb0fca08>
8111ca60:	8200162e 	bgeu	r16,r8,8111cabc <__mdiff+0x184>
8111ca64:	8017883a 	mov	r11,r16
8111ca68:	59400017 	ldw	r5,0(r11)
8111ca6c:	31800104 	addi	r6,r6,4
8111ca70:	5ac00104 	addi	r11,r11,4
8111ca74:	293fffcc 	andi	r4,r5,65535
8111ca78:	20c7883a 	add	r3,r4,r3
8111ca7c:	280ed43a 	srli	r7,r5,16
8111ca80:	180bd43a 	srai	r5,r3,16
8111ca84:	193fffcc 	andi	r4,r3,65535
8111ca88:	3947883a 	add	r3,r7,r5
8111ca8c:	180a943a 	slli	r5,r3,16
8111ca90:	1807d43a 	srai	r3,r3,16
8111ca94:	2908b03a 	or	r4,r5,r4
8111ca98:	313fff15 	stw	r4,-4(r6)
8111ca9c:	5a3ff236 	bltu	r11,r8,8111ca68 <__reset+0xfb0fca68>
8111caa0:	0406303a 	nor	r3,zero,r16
8111caa4:	1a07883a 	add	r3,r3,r8
8111caa8:	1806d0ba 	srli	r3,r3,2
8111caac:	18c00044 	addi	r3,r3,1
8111cab0:	18c7883a 	add	r3,r3,r3
8111cab4:	18c7883a 	add	r3,r3,r3
8111cab8:	50d5883a 	add	r10,r10,r3
8111cabc:	50ffff04 	addi	r3,r10,-4
8111cac0:	2000041e 	bne	r4,zero,8111cad4 <__mdiff+0x19c>
8111cac4:	18ffff04 	addi	r3,r3,-4
8111cac8:	19000017 	ldw	r4,0(r3)
8111cacc:	4a7fffc4 	addi	r9,r9,-1
8111cad0:	203ffc26 	beq	r4,zero,8111cac4 <__reset+0xfb0fcac4>
8111cad4:	12400415 	stw	r9,16(r2)
8111cad8:	dfc00517 	ldw	ra,20(sp)
8111cadc:	dd000417 	ldw	r20,16(sp)
8111cae0:	dcc00317 	ldw	r19,12(sp)
8111cae4:	dc800217 	ldw	r18,8(sp)
8111cae8:	dc400117 	ldw	r17,4(sp)
8111caec:	dc000017 	ldw	r16,0(sp)
8111caf0:	dec00604 	addi	sp,sp,24
8111caf4:	f800283a 	ret
8111caf8:	000b883a 	mov	r5,zero
8111cafc:	111bfd80 	call	8111bfd8 <_Balloc>
8111cb00:	00c00044 	movi	r3,1
8111cb04:	10c00415 	stw	r3,16(r2)
8111cb08:	10000515 	stw	zero,20(r2)
8111cb0c:	003ff206 	br	8111cad8 <__reset+0xfb0fcad8>
8111cb10:	8023883a 	mov	r17,r16
8111cb14:	0029883a 	mov	r20,zero
8111cb18:	4021883a 	mov	r16,r8
8111cb1c:	003fad06 	br	8111c9d4 <__reset+0xfb0fc9d4>
8111cb20:	9005883a 	mov	r2,r18
8111cb24:	94400504 	addi	r17,r18,20
8111cb28:	9c000504 	addi	r16,r19,20
8111cb2c:	9825883a 	mov	r18,r19
8111cb30:	05000044 	movi	r20,1
8111cb34:	1027883a 	mov	r19,r2
8111cb38:	003fa606 	br	8111c9d4 <__reset+0xfb0fc9d4>

8111cb3c <__ulp>:
8111cb3c:	295ffc2c 	andhi	r5,r5,32752
8111cb40:	00bf3034 	movhi	r2,64704
8111cb44:	2887883a 	add	r3,r5,r2
8111cb48:	00c0020e 	bge	zero,r3,8111cb54 <__ulp+0x18>
8111cb4c:	0005883a 	mov	r2,zero
8111cb50:	f800283a 	ret
8111cb54:	00c7c83a 	sub	r3,zero,r3
8111cb58:	1807d53a 	srai	r3,r3,20
8111cb5c:	008004c4 	movi	r2,19
8111cb60:	10c00b0e 	bge	r2,r3,8111cb90 <__ulp+0x54>
8111cb64:	18bffb04 	addi	r2,r3,-20
8111cb68:	01000784 	movi	r4,30
8111cb6c:	0007883a 	mov	r3,zero
8111cb70:	20800516 	blt	r4,r2,8111cb88 <__ulp+0x4c>
8111cb74:	010007c4 	movi	r4,31
8111cb78:	2089c83a 	sub	r4,r4,r2
8111cb7c:	00800044 	movi	r2,1
8111cb80:	1104983a 	sll	r2,r2,r4
8111cb84:	f800283a 	ret
8111cb88:	00800044 	movi	r2,1
8111cb8c:	f800283a 	ret
8111cb90:	01400234 	movhi	r5,8
8111cb94:	28c7d83a 	sra	r3,r5,r3
8111cb98:	0005883a 	mov	r2,zero
8111cb9c:	f800283a 	ret

8111cba0 <__b2d>:
8111cba0:	defffa04 	addi	sp,sp,-24
8111cba4:	de00012e 	bgeu	sp,et,8111cbac <__b2d+0xc>
8111cba8:	003b68fa 	trap	3
8111cbac:	dc000015 	stw	r16,0(sp)
8111cbb0:	24000417 	ldw	r16,16(r4)
8111cbb4:	dc400115 	stw	r17,4(sp)
8111cbb8:	24400504 	addi	r17,r4,20
8111cbbc:	8421883a 	add	r16,r16,r16
8111cbc0:	8421883a 	add	r16,r16,r16
8111cbc4:	8c21883a 	add	r16,r17,r16
8111cbc8:	dc800215 	stw	r18,8(sp)
8111cbcc:	84bfff17 	ldw	r18,-4(r16)
8111cbd0:	dd000415 	stw	r20,16(sp)
8111cbd4:	dcc00315 	stw	r19,12(sp)
8111cbd8:	9009883a 	mov	r4,r18
8111cbdc:	2829883a 	mov	r20,r5
8111cbe0:	dfc00515 	stw	ra,20(sp)
8111cbe4:	111c2e40 	call	8111c2e4 <__hi0bits>
8111cbe8:	00c00804 	movi	r3,32
8111cbec:	1889c83a 	sub	r4,r3,r2
8111cbf0:	a1000015 	stw	r4,0(r20)
8111cbf4:	01000284 	movi	r4,10
8111cbf8:	84ffff04 	addi	r19,r16,-4
8111cbfc:	20801216 	blt	r4,r2,8111cc48 <__b2d+0xa8>
8111cc00:	018002c4 	movi	r6,11
8111cc04:	308dc83a 	sub	r6,r6,r2
8111cc08:	9186d83a 	srl	r3,r18,r6
8111cc0c:	18cffc34 	orhi	r3,r3,16368
8111cc10:	8cc0212e 	bgeu	r17,r19,8111cc98 <__b2d+0xf8>
8111cc14:	813ffe17 	ldw	r4,-8(r16)
8111cc18:	218cd83a 	srl	r6,r4,r6
8111cc1c:	10800544 	addi	r2,r2,21
8111cc20:	9084983a 	sll	r2,r18,r2
8111cc24:	1184b03a 	or	r2,r2,r6
8111cc28:	dfc00517 	ldw	ra,20(sp)
8111cc2c:	dd000417 	ldw	r20,16(sp)
8111cc30:	dcc00317 	ldw	r19,12(sp)
8111cc34:	dc800217 	ldw	r18,8(sp)
8111cc38:	dc400117 	ldw	r17,4(sp)
8111cc3c:	dc000017 	ldw	r16,0(sp)
8111cc40:	dec00604 	addi	sp,sp,24
8111cc44:	f800283a 	ret
8111cc48:	8cc00f2e 	bgeu	r17,r19,8111cc88 <__b2d+0xe8>
8111cc4c:	117ffd44 	addi	r5,r2,-11
8111cc50:	80bffe17 	ldw	r2,-8(r16)
8111cc54:	28000e26 	beq	r5,zero,8111cc90 <__b2d+0xf0>
8111cc58:	1949c83a 	sub	r4,r3,r5
8111cc5c:	9164983a 	sll	r18,r18,r5
8111cc60:	1106d83a 	srl	r3,r2,r4
8111cc64:	81bffe04 	addi	r6,r16,-8
8111cc68:	948ffc34 	orhi	r18,r18,16368
8111cc6c:	90c6b03a 	or	r3,r18,r3
8111cc70:	89800e2e 	bgeu	r17,r6,8111ccac <__b2d+0x10c>
8111cc74:	81bffd17 	ldw	r6,-12(r16)
8111cc78:	1144983a 	sll	r2,r2,r5
8111cc7c:	310ad83a 	srl	r5,r6,r4
8111cc80:	2884b03a 	or	r2,r5,r2
8111cc84:	003fe806 	br	8111cc28 <__reset+0xfb0fcc28>
8111cc88:	10bffd44 	addi	r2,r2,-11
8111cc8c:	1000041e 	bne	r2,zero,8111cca0 <__b2d+0x100>
8111cc90:	90cffc34 	orhi	r3,r18,16368
8111cc94:	003fe406 	br	8111cc28 <__reset+0xfb0fcc28>
8111cc98:	000d883a 	mov	r6,zero
8111cc9c:	003fdf06 	br	8111cc1c <__reset+0xfb0fcc1c>
8111cca0:	90a4983a 	sll	r18,r18,r2
8111cca4:	0005883a 	mov	r2,zero
8111cca8:	003ff906 	br	8111cc90 <__reset+0xfb0fcc90>
8111ccac:	1144983a 	sll	r2,r2,r5
8111ccb0:	003fdd06 	br	8111cc28 <__reset+0xfb0fcc28>

8111ccb4 <__d2b>:
8111ccb4:	defff804 	addi	sp,sp,-32
8111ccb8:	de00012e 	bgeu	sp,et,8111ccc0 <__d2b+0xc>
8111ccbc:	003b68fa 	trap	3
8111ccc0:	dc000215 	stw	r16,8(sp)
8111ccc4:	3021883a 	mov	r16,r6
8111ccc8:	dc400315 	stw	r17,12(sp)
8111cccc:	8022907a 	slli	r17,r16,1
8111ccd0:	dd000615 	stw	r20,24(sp)
8111ccd4:	2829883a 	mov	r20,r5
8111ccd8:	01400044 	movi	r5,1
8111ccdc:	dcc00515 	stw	r19,20(sp)
8111cce0:	dc800415 	stw	r18,16(sp)
8111cce4:	dfc00715 	stw	ra,28(sp)
8111cce8:	3825883a 	mov	r18,r7
8111ccec:	8822d57a 	srli	r17,r17,21
8111ccf0:	111bfd80 	call	8111bfd8 <_Balloc>
8111ccf4:	1027883a 	mov	r19,r2
8111ccf8:	00800434 	movhi	r2,16
8111ccfc:	10bfffc4 	addi	r2,r2,-1
8111cd00:	808c703a 	and	r6,r16,r2
8111cd04:	88000126 	beq	r17,zero,8111cd0c <__d2b+0x58>
8111cd08:	31800434 	orhi	r6,r6,16
8111cd0c:	d9800015 	stw	r6,0(sp)
8111cd10:	a0002426 	beq	r20,zero,8111cda4 <__d2b+0xf0>
8111cd14:	d9000104 	addi	r4,sp,4
8111cd18:	dd000115 	stw	r20,4(sp)
8111cd1c:	111c34c0 	call	8111c34c <__lo0bits>
8111cd20:	d8c00017 	ldw	r3,0(sp)
8111cd24:	10002f1e 	bne	r2,zero,8111cde4 <__d2b+0x130>
8111cd28:	d9000117 	ldw	r4,4(sp)
8111cd2c:	99000515 	stw	r4,20(r19)
8111cd30:	1821003a 	cmpeq	r16,r3,zero
8111cd34:	01000084 	movi	r4,2
8111cd38:	2421c83a 	sub	r16,r4,r16
8111cd3c:	98c00615 	stw	r3,24(r19)
8111cd40:	9c000415 	stw	r16,16(r19)
8111cd44:	88001f1e 	bne	r17,zero,8111cdc4 <__d2b+0x110>
8111cd48:	10bef384 	addi	r2,r2,-1074
8111cd4c:	90800015 	stw	r2,0(r18)
8111cd50:	00900034 	movhi	r2,16384
8111cd54:	10bfffc4 	addi	r2,r2,-1
8111cd58:	8085883a 	add	r2,r16,r2
8111cd5c:	1085883a 	add	r2,r2,r2
8111cd60:	1085883a 	add	r2,r2,r2
8111cd64:	9885883a 	add	r2,r19,r2
8111cd68:	11000517 	ldw	r4,20(r2)
8111cd6c:	8020917a 	slli	r16,r16,5
8111cd70:	111c2e40 	call	8111c2e4 <__hi0bits>
8111cd74:	d8c00817 	ldw	r3,32(sp)
8111cd78:	8085c83a 	sub	r2,r16,r2
8111cd7c:	18800015 	stw	r2,0(r3)
8111cd80:	9805883a 	mov	r2,r19
8111cd84:	dfc00717 	ldw	ra,28(sp)
8111cd88:	dd000617 	ldw	r20,24(sp)
8111cd8c:	dcc00517 	ldw	r19,20(sp)
8111cd90:	dc800417 	ldw	r18,16(sp)
8111cd94:	dc400317 	ldw	r17,12(sp)
8111cd98:	dc000217 	ldw	r16,8(sp)
8111cd9c:	dec00804 	addi	sp,sp,32
8111cda0:	f800283a 	ret
8111cda4:	d809883a 	mov	r4,sp
8111cda8:	111c34c0 	call	8111c34c <__lo0bits>
8111cdac:	d8c00017 	ldw	r3,0(sp)
8111cdb0:	04000044 	movi	r16,1
8111cdb4:	9c000415 	stw	r16,16(r19)
8111cdb8:	98c00515 	stw	r3,20(r19)
8111cdbc:	10800804 	addi	r2,r2,32
8111cdc0:	883fe126 	beq	r17,zero,8111cd48 <__reset+0xfb0fcd48>
8111cdc4:	00c00d44 	movi	r3,53
8111cdc8:	8c7ef344 	addi	r17,r17,-1075
8111cdcc:	88a3883a 	add	r17,r17,r2
8111cdd0:	1885c83a 	sub	r2,r3,r2
8111cdd4:	d8c00817 	ldw	r3,32(sp)
8111cdd8:	94400015 	stw	r17,0(r18)
8111cddc:	18800015 	stw	r2,0(r3)
8111cde0:	003fe706 	br	8111cd80 <__reset+0xfb0fcd80>
8111cde4:	01000804 	movi	r4,32
8111cde8:	2089c83a 	sub	r4,r4,r2
8111cdec:	1908983a 	sll	r4,r3,r4
8111cdf0:	d9400117 	ldw	r5,4(sp)
8111cdf4:	1886d83a 	srl	r3,r3,r2
8111cdf8:	2148b03a 	or	r4,r4,r5
8111cdfc:	99000515 	stw	r4,20(r19)
8111ce00:	d8c00015 	stw	r3,0(sp)
8111ce04:	003fca06 	br	8111cd30 <__reset+0xfb0fcd30>

8111ce08 <__ratio>:
8111ce08:	defff904 	addi	sp,sp,-28
8111ce0c:	de00012e 	bgeu	sp,et,8111ce14 <__ratio+0xc>
8111ce10:	003b68fa 	trap	3
8111ce14:	dc400315 	stw	r17,12(sp)
8111ce18:	2823883a 	mov	r17,r5
8111ce1c:	d9400104 	addi	r5,sp,4
8111ce20:	dfc00615 	stw	ra,24(sp)
8111ce24:	dcc00515 	stw	r19,20(sp)
8111ce28:	dc800415 	stw	r18,16(sp)
8111ce2c:	2027883a 	mov	r19,r4
8111ce30:	dc000215 	stw	r16,8(sp)
8111ce34:	111cba00 	call	8111cba0 <__b2d>
8111ce38:	d80b883a 	mov	r5,sp
8111ce3c:	8809883a 	mov	r4,r17
8111ce40:	1025883a 	mov	r18,r2
8111ce44:	1821883a 	mov	r16,r3
8111ce48:	111cba00 	call	8111cba0 <__b2d>
8111ce4c:	8a000417 	ldw	r8,16(r17)
8111ce50:	99000417 	ldw	r4,16(r19)
8111ce54:	d9400117 	ldw	r5,4(sp)
8111ce58:	2209c83a 	sub	r4,r4,r8
8111ce5c:	2010917a 	slli	r8,r4,5
8111ce60:	d9000017 	ldw	r4,0(sp)
8111ce64:	2909c83a 	sub	r4,r5,r4
8111ce68:	4109883a 	add	r4,r8,r4
8111ce6c:	01000e0e 	bge	zero,r4,8111cea8 <__ratio+0xa0>
8111ce70:	2008953a 	slli	r4,r4,20
8111ce74:	2421883a 	add	r16,r4,r16
8111ce78:	100d883a 	mov	r6,r2
8111ce7c:	180f883a 	mov	r7,r3
8111ce80:	9009883a 	mov	r4,r18
8111ce84:	800b883a 	mov	r5,r16
8111ce88:	112505c0 	call	8112505c <__divdf3>
8111ce8c:	dfc00617 	ldw	ra,24(sp)
8111ce90:	dcc00517 	ldw	r19,20(sp)
8111ce94:	dc800417 	ldw	r18,16(sp)
8111ce98:	dc400317 	ldw	r17,12(sp)
8111ce9c:	dc000217 	ldw	r16,8(sp)
8111cea0:	dec00704 	addi	sp,sp,28
8111cea4:	f800283a 	ret
8111cea8:	2008953a 	slli	r4,r4,20
8111ceac:	1907c83a 	sub	r3,r3,r4
8111ceb0:	003ff106 	br	8111ce78 <__reset+0xfb0fce78>

8111ceb4 <_mprec_log10>:
8111ceb4:	defffe04 	addi	sp,sp,-8
8111ceb8:	de00012e 	bgeu	sp,et,8111cec0 <_mprec_log10+0xc>
8111cebc:	003b68fa 	trap	3
8111cec0:	008005c4 	movi	r2,23
8111cec4:	dc000015 	stw	r16,0(sp)
8111cec8:	dfc00115 	stw	ra,4(sp)
8111cecc:	2021883a 	mov	r16,r4
8111ced0:	11000d0e 	bge	r2,r4,8111cf08 <_mprec_log10+0x54>
8111ced4:	0005883a 	mov	r2,zero
8111ced8:	00cffc34 	movhi	r3,16368
8111cedc:	843fffc4 	addi	r16,r16,-1
8111cee0:	000d883a 	mov	r6,zero
8111cee4:	01d00934 	movhi	r7,16420
8111cee8:	1009883a 	mov	r4,r2
8111ceec:	180b883a 	mov	r5,r3
8111cef0:	11105240 	call	81110524 <__muldf3>
8111cef4:	803ff91e 	bne	r16,zero,8111cedc <__reset+0xfb0fcedc>
8111cef8:	dfc00117 	ldw	ra,4(sp)
8111cefc:	dc000017 	ldw	r16,0(sp)
8111cf00:	dec00204 	addi	sp,sp,8
8111cf04:	f800283a 	ret
8111cf08:	202090fa 	slli	r16,r4,3
8111cf0c:	00a04534 	movhi	r2,33044
8111cf10:	10b6dc04 	addi	r2,r2,-9360
8111cf14:	1421883a 	add	r16,r2,r16
8111cf18:	80800017 	ldw	r2,0(r16)
8111cf1c:	80c00117 	ldw	r3,4(r16)
8111cf20:	dfc00117 	ldw	ra,4(sp)
8111cf24:	dc000017 	ldw	r16,0(sp)
8111cf28:	dec00204 	addi	sp,sp,8
8111cf2c:	f800283a 	ret

8111cf30 <__copybits>:
8111cf30:	297fffc4 	addi	r5,r5,-1
8111cf34:	280fd17a 	srai	r7,r5,5
8111cf38:	30c00417 	ldw	r3,16(r6)
8111cf3c:	30800504 	addi	r2,r6,20
8111cf40:	39c00044 	addi	r7,r7,1
8111cf44:	18c7883a 	add	r3,r3,r3
8111cf48:	39cf883a 	add	r7,r7,r7
8111cf4c:	18c7883a 	add	r3,r3,r3
8111cf50:	39cf883a 	add	r7,r7,r7
8111cf54:	10c7883a 	add	r3,r2,r3
8111cf58:	21cf883a 	add	r7,r4,r7
8111cf5c:	10c00d2e 	bgeu	r2,r3,8111cf94 <__copybits+0x64>
8111cf60:	200b883a 	mov	r5,r4
8111cf64:	12000017 	ldw	r8,0(r2)
8111cf68:	29400104 	addi	r5,r5,4
8111cf6c:	10800104 	addi	r2,r2,4
8111cf70:	2a3fff15 	stw	r8,-4(r5)
8111cf74:	10fffb36 	bltu	r2,r3,8111cf64 <__reset+0xfb0fcf64>
8111cf78:	1985c83a 	sub	r2,r3,r6
8111cf7c:	10bffac4 	addi	r2,r2,-21
8111cf80:	1004d0ba 	srli	r2,r2,2
8111cf84:	10800044 	addi	r2,r2,1
8111cf88:	1085883a 	add	r2,r2,r2
8111cf8c:	1085883a 	add	r2,r2,r2
8111cf90:	2089883a 	add	r4,r4,r2
8111cf94:	21c0032e 	bgeu	r4,r7,8111cfa4 <__copybits+0x74>
8111cf98:	20000015 	stw	zero,0(r4)
8111cf9c:	21000104 	addi	r4,r4,4
8111cfa0:	21fffd36 	bltu	r4,r7,8111cf98 <__reset+0xfb0fcf98>
8111cfa4:	f800283a 	ret

8111cfa8 <__any_on>:
8111cfa8:	20c00417 	ldw	r3,16(r4)
8111cfac:	2805d17a 	srai	r2,r5,5
8111cfb0:	21000504 	addi	r4,r4,20
8111cfb4:	18800d0e 	bge	r3,r2,8111cfec <__any_on+0x44>
8111cfb8:	18c7883a 	add	r3,r3,r3
8111cfbc:	18c7883a 	add	r3,r3,r3
8111cfc0:	20c7883a 	add	r3,r4,r3
8111cfc4:	20c0192e 	bgeu	r4,r3,8111d02c <__any_on+0x84>
8111cfc8:	18bfff17 	ldw	r2,-4(r3)
8111cfcc:	18ffff04 	addi	r3,r3,-4
8111cfd0:	1000041e 	bne	r2,zero,8111cfe4 <__any_on+0x3c>
8111cfd4:	20c0142e 	bgeu	r4,r3,8111d028 <__any_on+0x80>
8111cfd8:	18ffff04 	addi	r3,r3,-4
8111cfdc:	19400017 	ldw	r5,0(r3)
8111cfe0:	283ffc26 	beq	r5,zero,8111cfd4 <__reset+0xfb0fcfd4>
8111cfe4:	00800044 	movi	r2,1
8111cfe8:	f800283a 	ret
8111cfec:	10c00a0e 	bge	r2,r3,8111d018 <__any_on+0x70>
8111cff0:	1085883a 	add	r2,r2,r2
8111cff4:	1085883a 	add	r2,r2,r2
8111cff8:	294007cc 	andi	r5,r5,31
8111cffc:	2087883a 	add	r3,r4,r2
8111d000:	283ff026 	beq	r5,zero,8111cfc4 <__reset+0xfb0fcfc4>
8111d004:	19800017 	ldw	r6,0(r3)
8111d008:	3144d83a 	srl	r2,r6,r5
8111d00c:	114a983a 	sll	r5,r2,r5
8111d010:	317ff41e 	bne	r6,r5,8111cfe4 <__reset+0xfb0fcfe4>
8111d014:	003feb06 	br	8111cfc4 <__reset+0xfb0fcfc4>
8111d018:	1085883a 	add	r2,r2,r2
8111d01c:	1085883a 	add	r2,r2,r2
8111d020:	2087883a 	add	r3,r4,r2
8111d024:	003fe706 	br	8111cfc4 <__reset+0xfb0fcfc4>
8111d028:	f800283a 	ret
8111d02c:	0005883a 	mov	r2,zero
8111d030:	f800283a 	ret

8111d034 <_read_r>:
8111d034:	defffd04 	addi	sp,sp,-12
8111d038:	de00012e 	bgeu	sp,et,8111d040 <_read_r+0xc>
8111d03c:	003b68fa 	trap	3
8111d040:	2805883a 	mov	r2,r5
8111d044:	dc000015 	stw	r16,0(sp)
8111d048:	04204534 	movhi	r16,33044
8111d04c:	dc400115 	stw	r17,4(sp)
8111d050:	300b883a 	mov	r5,r6
8111d054:	843ff604 	addi	r16,r16,-40
8111d058:	2023883a 	mov	r17,r4
8111d05c:	380d883a 	mov	r6,r7
8111d060:	1009883a 	mov	r4,r2
8111d064:	dfc00215 	stw	ra,8(sp)
8111d068:	80000015 	stw	zero,0(r16)
8111d06c:	112716c0 	call	8112716c <read>
8111d070:	00ffffc4 	movi	r3,-1
8111d074:	10c00526 	beq	r2,r3,8111d08c <_read_r+0x58>
8111d078:	dfc00217 	ldw	ra,8(sp)
8111d07c:	dc400117 	ldw	r17,4(sp)
8111d080:	dc000017 	ldw	r16,0(sp)
8111d084:	dec00304 	addi	sp,sp,12
8111d088:	f800283a 	ret
8111d08c:	80c00017 	ldw	r3,0(r16)
8111d090:	183ff926 	beq	r3,zero,8111d078 <__reset+0xfb0fd078>
8111d094:	88c00015 	stw	r3,0(r17)
8111d098:	003ff706 	br	8111d078 <__reset+0xfb0fd078>

8111d09c <_realloc_r>:
8111d09c:	defff604 	addi	sp,sp,-40
8111d0a0:	de00012e 	bgeu	sp,et,8111d0a8 <_realloc_r+0xc>
8111d0a4:	003b68fa 	trap	3
8111d0a8:	dc800215 	stw	r18,8(sp)
8111d0ac:	dfc00915 	stw	ra,36(sp)
8111d0b0:	df000815 	stw	fp,32(sp)
8111d0b4:	ddc00715 	stw	r23,28(sp)
8111d0b8:	dd800615 	stw	r22,24(sp)
8111d0bc:	dd400515 	stw	r21,20(sp)
8111d0c0:	dd000415 	stw	r20,16(sp)
8111d0c4:	dcc00315 	stw	r19,12(sp)
8111d0c8:	dc400115 	stw	r17,4(sp)
8111d0cc:	dc000015 	stw	r16,0(sp)
8111d0d0:	3025883a 	mov	r18,r6
8111d0d4:	2800b726 	beq	r5,zero,8111d3b4 <_realloc_r+0x318>
8111d0d8:	282b883a 	mov	r21,r5
8111d0dc:	2029883a 	mov	r20,r4
8111d0e0:	11279400 	call	81127940 <__malloc_lock>
8111d0e4:	a8bfff17 	ldw	r2,-4(r21)
8111d0e8:	043fff04 	movi	r16,-4
8111d0ec:	90c002c4 	addi	r3,r18,11
8111d0f0:	01000584 	movi	r4,22
8111d0f4:	acfffe04 	addi	r19,r21,-8
8111d0f8:	1420703a 	and	r16,r2,r16
8111d0fc:	20c0332e 	bgeu	r4,r3,8111d1cc <_realloc_r+0x130>
8111d100:	047ffe04 	movi	r17,-8
8111d104:	1c62703a 	and	r17,r3,r17
8111d108:	8807883a 	mov	r3,r17
8111d10c:	88005816 	blt	r17,zero,8111d270 <_realloc_r+0x1d4>
8111d110:	8c805736 	bltu	r17,r18,8111d270 <_realloc_r+0x1d4>
8111d114:	80c0300e 	bge	r16,r3,8111d1d8 <_realloc_r+0x13c>
8111d118:	07204534 	movhi	fp,33044
8111d11c:	e7398204 	addi	fp,fp,-6648
8111d120:	e1c00217 	ldw	r7,8(fp)
8111d124:	9c09883a 	add	r4,r19,r16
8111d128:	22000117 	ldw	r8,4(r4)
8111d12c:	21c06326 	beq	r4,r7,8111d2bc <_realloc_r+0x220>
8111d130:	017fff84 	movi	r5,-2
8111d134:	414a703a 	and	r5,r8,r5
8111d138:	214b883a 	add	r5,r4,r5
8111d13c:	29800117 	ldw	r6,4(r5)
8111d140:	3180004c 	andi	r6,r6,1
8111d144:	30003f26 	beq	r6,zero,8111d244 <_realloc_r+0x1a8>
8111d148:	1080004c 	andi	r2,r2,1
8111d14c:	10008326 	beq	r2,zero,8111d35c <_realloc_r+0x2c0>
8111d150:	900b883a 	mov	r5,r18
8111d154:	a009883a 	mov	r4,r20
8111d158:	11118b00 	call	811118b0 <_malloc_r>
8111d15c:	1025883a 	mov	r18,r2
8111d160:	10011e26 	beq	r2,zero,8111d5dc <_realloc_r+0x540>
8111d164:	a93fff17 	ldw	r4,-4(r21)
8111d168:	10fffe04 	addi	r3,r2,-8
8111d16c:	00bfff84 	movi	r2,-2
8111d170:	2084703a 	and	r2,r4,r2
8111d174:	9885883a 	add	r2,r19,r2
8111d178:	1880ee26 	beq	r3,r2,8111d534 <_realloc_r+0x498>
8111d17c:	81bfff04 	addi	r6,r16,-4
8111d180:	00800904 	movi	r2,36
8111d184:	1180b836 	bltu	r2,r6,8111d468 <_realloc_r+0x3cc>
8111d188:	00c004c4 	movi	r3,19
8111d18c:	19809636 	bltu	r3,r6,8111d3e8 <_realloc_r+0x34c>
8111d190:	9005883a 	mov	r2,r18
8111d194:	a807883a 	mov	r3,r21
8111d198:	19000017 	ldw	r4,0(r3)
8111d19c:	11000015 	stw	r4,0(r2)
8111d1a0:	19000117 	ldw	r4,4(r3)
8111d1a4:	11000115 	stw	r4,4(r2)
8111d1a8:	18c00217 	ldw	r3,8(r3)
8111d1ac:	10c00215 	stw	r3,8(r2)
8111d1b0:	a80b883a 	mov	r5,r21
8111d1b4:	a009883a 	mov	r4,r20
8111d1b8:	111b0080 	call	8111b008 <_free_r>
8111d1bc:	a009883a 	mov	r4,r20
8111d1c0:	1127a680 	call	81127a68 <__malloc_unlock>
8111d1c4:	9005883a 	mov	r2,r18
8111d1c8:	00001206 	br	8111d214 <_realloc_r+0x178>
8111d1cc:	00c00404 	movi	r3,16
8111d1d0:	1823883a 	mov	r17,r3
8111d1d4:	003fce06 	br	8111d110 <__reset+0xfb0fd110>
8111d1d8:	a825883a 	mov	r18,r21
8111d1dc:	8445c83a 	sub	r2,r16,r17
8111d1e0:	00c003c4 	movi	r3,15
8111d1e4:	18802636 	bltu	r3,r2,8111d280 <_realloc_r+0x1e4>
8111d1e8:	99800117 	ldw	r6,4(r19)
8111d1ec:	9c07883a 	add	r3,r19,r16
8111d1f0:	3180004c 	andi	r6,r6,1
8111d1f4:	3420b03a 	or	r16,r6,r16
8111d1f8:	9c000115 	stw	r16,4(r19)
8111d1fc:	18800117 	ldw	r2,4(r3)
8111d200:	10800054 	ori	r2,r2,1
8111d204:	18800115 	stw	r2,4(r3)
8111d208:	a009883a 	mov	r4,r20
8111d20c:	1127a680 	call	81127a68 <__malloc_unlock>
8111d210:	9005883a 	mov	r2,r18
8111d214:	dfc00917 	ldw	ra,36(sp)
8111d218:	df000817 	ldw	fp,32(sp)
8111d21c:	ddc00717 	ldw	r23,28(sp)
8111d220:	dd800617 	ldw	r22,24(sp)
8111d224:	dd400517 	ldw	r21,20(sp)
8111d228:	dd000417 	ldw	r20,16(sp)
8111d22c:	dcc00317 	ldw	r19,12(sp)
8111d230:	dc800217 	ldw	r18,8(sp)
8111d234:	dc400117 	ldw	r17,4(sp)
8111d238:	dc000017 	ldw	r16,0(sp)
8111d23c:	dec00a04 	addi	sp,sp,40
8111d240:	f800283a 	ret
8111d244:	017fff04 	movi	r5,-4
8111d248:	414a703a 	and	r5,r8,r5
8111d24c:	814d883a 	add	r6,r16,r5
8111d250:	30c01f16 	blt	r6,r3,8111d2d0 <_realloc_r+0x234>
8111d254:	20800317 	ldw	r2,12(r4)
8111d258:	20c00217 	ldw	r3,8(r4)
8111d25c:	a825883a 	mov	r18,r21
8111d260:	3021883a 	mov	r16,r6
8111d264:	18800315 	stw	r2,12(r3)
8111d268:	10c00215 	stw	r3,8(r2)
8111d26c:	003fdb06 	br	8111d1dc <__reset+0xfb0fd1dc>
8111d270:	00800304 	movi	r2,12
8111d274:	a0800015 	stw	r2,0(r20)
8111d278:	0005883a 	mov	r2,zero
8111d27c:	003fe506 	br	8111d214 <__reset+0xfb0fd214>
8111d280:	98c00117 	ldw	r3,4(r19)
8111d284:	9c4b883a 	add	r5,r19,r17
8111d288:	11000054 	ori	r4,r2,1
8111d28c:	18c0004c 	andi	r3,r3,1
8111d290:	1c62b03a 	or	r17,r3,r17
8111d294:	9c400115 	stw	r17,4(r19)
8111d298:	29000115 	stw	r4,4(r5)
8111d29c:	2885883a 	add	r2,r5,r2
8111d2a0:	10c00117 	ldw	r3,4(r2)
8111d2a4:	29400204 	addi	r5,r5,8
8111d2a8:	a009883a 	mov	r4,r20
8111d2ac:	18c00054 	ori	r3,r3,1
8111d2b0:	10c00115 	stw	r3,4(r2)
8111d2b4:	111b0080 	call	8111b008 <_free_r>
8111d2b8:	003fd306 	br	8111d208 <__reset+0xfb0fd208>
8111d2bc:	017fff04 	movi	r5,-4
8111d2c0:	414a703a 	and	r5,r8,r5
8111d2c4:	89800404 	addi	r6,r17,16
8111d2c8:	8151883a 	add	r8,r16,r5
8111d2cc:	4180590e 	bge	r8,r6,8111d434 <_realloc_r+0x398>
8111d2d0:	1080004c 	andi	r2,r2,1
8111d2d4:	103f9e1e 	bne	r2,zero,8111d150 <__reset+0xfb0fd150>
8111d2d8:	adbffe17 	ldw	r22,-8(r21)
8111d2dc:	00bfff04 	movi	r2,-4
8111d2e0:	9dadc83a 	sub	r22,r19,r22
8111d2e4:	b1800117 	ldw	r6,4(r22)
8111d2e8:	3084703a 	and	r2,r6,r2
8111d2ec:	20002026 	beq	r4,zero,8111d370 <_realloc_r+0x2d4>
8111d2f0:	80af883a 	add	r23,r16,r2
8111d2f4:	b96f883a 	add	r23,r23,r5
8111d2f8:	21c05f26 	beq	r4,r7,8111d478 <_realloc_r+0x3dc>
8111d2fc:	b8c01c16 	blt	r23,r3,8111d370 <_realloc_r+0x2d4>
8111d300:	20800317 	ldw	r2,12(r4)
8111d304:	20c00217 	ldw	r3,8(r4)
8111d308:	81bfff04 	addi	r6,r16,-4
8111d30c:	01000904 	movi	r4,36
8111d310:	18800315 	stw	r2,12(r3)
8111d314:	10c00215 	stw	r3,8(r2)
8111d318:	b0c00217 	ldw	r3,8(r22)
8111d31c:	b0800317 	ldw	r2,12(r22)
8111d320:	b4800204 	addi	r18,r22,8
8111d324:	18800315 	stw	r2,12(r3)
8111d328:	10c00215 	stw	r3,8(r2)
8111d32c:	21801b36 	bltu	r4,r6,8111d39c <_realloc_r+0x300>
8111d330:	008004c4 	movi	r2,19
8111d334:	1180352e 	bgeu	r2,r6,8111d40c <_realloc_r+0x370>
8111d338:	a8800017 	ldw	r2,0(r21)
8111d33c:	b0800215 	stw	r2,8(r22)
8111d340:	a8800117 	ldw	r2,4(r21)
8111d344:	b0800315 	stw	r2,12(r22)
8111d348:	008006c4 	movi	r2,27
8111d34c:	11807f36 	bltu	r2,r6,8111d54c <_realloc_r+0x4b0>
8111d350:	b0800404 	addi	r2,r22,16
8111d354:	ad400204 	addi	r21,r21,8
8111d358:	00002d06 	br	8111d410 <_realloc_r+0x374>
8111d35c:	adbffe17 	ldw	r22,-8(r21)
8111d360:	00bfff04 	movi	r2,-4
8111d364:	9dadc83a 	sub	r22,r19,r22
8111d368:	b1000117 	ldw	r4,4(r22)
8111d36c:	2084703a 	and	r2,r4,r2
8111d370:	b03f7726 	beq	r22,zero,8111d150 <__reset+0xfb0fd150>
8111d374:	80af883a 	add	r23,r16,r2
8111d378:	b8ff7516 	blt	r23,r3,8111d150 <__reset+0xfb0fd150>
8111d37c:	b0800317 	ldw	r2,12(r22)
8111d380:	b0c00217 	ldw	r3,8(r22)
8111d384:	81bfff04 	addi	r6,r16,-4
8111d388:	01000904 	movi	r4,36
8111d38c:	18800315 	stw	r2,12(r3)
8111d390:	10c00215 	stw	r3,8(r2)
8111d394:	b4800204 	addi	r18,r22,8
8111d398:	21bfe52e 	bgeu	r4,r6,8111d330 <__reset+0xfb0fd330>
8111d39c:	a80b883a 	mov	r5,r21
8111d3a0:	9009883a 	mov	r4,r18
8111d3a4:	111be7c0 	call	8111be7c <memmove>
8111d3a8:	b821883a 	mov	r16,r23
8111d3ac:	b027883a 	mov	r19,r22
8111d3b0:	003f8a06 	br	8111d1dc <__reset+0xfb0fd1dc>
8111d3b4:	300b883a 	mov	r5,r6
8111d3b8:	dfc00917 	ldw	ra,36(sp)
8111d3bc:	df000817 	ldw	fp,32(sp)
8111d3c0:	ddc00717 	ldw	r23,28(sp)
8111d3c4:	dd800617 	ldw	r22,24(sp)
8111d3c8:	dd400517 	ldw	r21,20(sp)
8111d3cc:	dd000417 	ldw	r20,16(sp)
8111d3d0:	dcc00317 	ldw	r19,12(sp)
8111d3d4:	dc800217 	ldw	r18,8(sp)
8111d3d8:	dc400117 	ldw	r17,4(sp)
8111d3dc:	dc000017 	ldw	r16,0(sp)
8111d3e0:	dec00a04 	addi	sp,sp,40
8111d3e4:	11118b01 	jmpi	811118b0 <_malloc_r>
8111d3e8:	a8c00017 	ldw	r3,0(r21)
8111d3ec:	90c00015 	stw	r3,0(r18)
8111d3f0:	a8c00117 	ldw	r3,4(r21)
8111d3f4:	90c00115 	stw	r3,4(r18)
8111d3f8:	00c006c4 	movi	r3,27
8111d3fc:	19804536 	bltu	r3,r6,8111d514 <_realloc_r+0x478>
8111d400:	90800204 	addi	r2,r18,8
8111d404:	a8c00204 	addi	r3,r21,8
8111d408:	003f6306 	br	8111d198 <__reset+0xfb0fd198>
8111d40c:	9005883a 	mov	r2,r18
8111d410:	a8c00017 	ldw	r3,0(r21)
8111d414:	b821883a 	mov	r16,r23
8111d418:	b027883a 	mov	r19,r22
8111d41c:	10c00015 	stw	r3,0(r2)
8111d420:	a8c00117 	ldw	r3,4(r21)
8111d424:	10c00115 	stw	r3,4(r2)
8111d428:	a8c00217 	ldw	r3,8(r21)
8111d42c:	10c00215 	stw	r3,8(r2)
8111d430:	003f6a06 	br	8111d1dc <__reset+0xfb0fd1dc>
8111d434:	9c67883a 	add	r19,r19,r17
8111d438:	4445c83a 	sub	r2,r8,r17
8111d43c:	e4c00215 	stw	r19,8(fp)
8111d440:	10800054 	ori	r2,r2,1
8111d444:	98800115 	stw	r2,4(r19)
8111d448:	a8bfff17 	ldw	r2,-4(r21)
8111d44c:	a009883a 	mov	r4,r20
8111d450:	1080004c 	andi	r2,r2,1
8111d454:	1462b03a 	or	r17,r2,r17
8111d458:	ac7fff15 	stw	r17,-4(r21)
8111d45c:	1127a680 	call	81127a68 <__malloc_unlock>
8111d460:	a805883a 	mov	r2,r21
8111d464:	003f6b06 	br	8111d214 <__reset+0xfb0fd214>
8111d468:	a80b883a 	mov	r5,r21
8111d46c:	9009883a 	mov	r4,r18
8111d470:	111be7c0 	call	8111be7c <memmove>
8111d474:	003f4e06 	br	8111d1b0 <__reset+0xfb0fd1b0>
8111d478:	89000404 	addi	r4,r17,16
8111d47c:	b93fbc16 	blt	r23,r4,8111d370 <__reset+0xfb0fd370>
8111d480:	b0800317 	ldw	r2,12(r22)
8111d484:	b0c00217 	ldw	r3,8(r22)
8111d488:	81bfff04 	addi	r6,r16,-4
8111d48c:	01000904 	movi	r4,36
8111d490:	18800315 	stw	r2,12(r3)
8111d494:	10c00215 	stw	r3,8(r2)
8111d498:	b4800204 	addi	r18,r22,8
8111d49c:	21804336 	bltu	r4,r6,8111d5ac <_realloc_r+0x510>
8111d4a0:	008004c4 	movi	r2,19
8111d4a4:	11803f2e 	bgeu	r2,r6,8111d5a4 <_realloc_r+0x508>
8111d4a8:	a8800017 	ldw	r2,0(r21)
8111d4ac:	b0800215 	stw	r2,8(r22)
8111d4b0:	a8800117 	ldw	r2,4(r21)
8111d4b4:	b0800315 	stw	r2,12(r22)
8111d4b8:	008006c4 	movi	r2,27
8111d4bc:	11803f36 	bltu	r2,r6,8111d5bc <_realloc_r+0x520>
8111d4c0:	b0800404 	addi	r2,r22,16
8111d4c4:	ad400204 	addi	r21,r21,8
8111d4c8:	a8c00017 	ldw	r3,0(r21)
8111d4cc:	10c00015 	stw	r3,0(r2)
8111d4d0:	a8c00117 	ldw	r3,4(r21)
8111d4d4:	10c00115 	stw	r3,4(r2)
8111d4d8:	a8c00217 	ldw	r3,8(r21)
8111d4dc:	10c00215 	stw	r3,8(r2)
8111d4e0:	b447883a 	add	r3,r22,r17
8111d4e4:	bc45c83a 	sub	r2,r23,r17
8111d4e8:	e0c00215 	stw	r3,8(fp)
8111d4ec:	10800054 	ori	r2,r2,1
8111d4f0:	18800115 	stw	r2,4(r3)
8111d4f4:	b0800117 	ldw	r2,4(r22)
8111d4f8:	a009883a 	mov	r4,r20
8111d4fc:	1080004c 	andi	r2,r2,1
8111d500:	1462b03a 	or	r17,r2,r17
8111d504:	b4400115 	stw	r17,4(r22)
8111d508:	1127a680 	call	81127a68 <__malloc_unlock>
8111d50c:	9005883a 	mov	r2,r18
8111d510:	003f4006 	br	8111d214 <__reset+0xfb0fd214>
8111d514:	a8c00217 	ldw	r3,8(r21)
8111d518:	90c00215 	stw	r3,8(r18)
8111d51c:	a8c00317 	ldw	r3,12(r21)
8111d520:	90c00315 	stw	r3,12(r18)
8111d524:	30801126 	beq	r6,r2,8111d56c <_realloc_r+0x4d0>
8111d528:	90800404 	addi	r2,r18,16
8111d52c:	a8c00404 	addi	r3,r21,16
8111d530:	003f1906 	br	8111d198 <__reset+0xfb0fd198>
8111d534:	90ffff17 	ldw	r3,-4(r18)
8111d538:	00bfff04 	movi	r2,-4
8111d53c:	a825883a 	mov	r18,r21
8111d540:	1884703a 	and	r2,r3,r2
8111d544:	80a1883a 	add	r16,r16,r2
8111d548:	003f2406 	br	8111d1dc <__reset+0xfb0fd1dc>
8111d54c:	a8800217 	ldw	r2,8(r21)
8111d550:	b0800415 	stw	r2,16(r22)
8111d554:	a8800317 	ldw	r2,12(r21)
8111d558:	b0800515 	stw	r2,20(r22)
8111d55c:	31000a26 	beq	r6,r4,8111d588 <_realloc_r+0x4ec>
8111d560:	b0800604 	addi	r2,r22,24
8111d564:	ad400404 	addi	r21,r21,16
8111d568:	003fa906 	br	8111d410 <__reset+0xfb0fd410>
8111d56c:	a9000417 	ldw	r4,16(r21)
8111d570:	90800604 	addi	r2,r18,24
8111d574:	a8c00604 	addi	r3,r21,24
8111d578:	91000415 	stw	r4,16(r18)
8111d57c:	a9000517 	ldw	r4,20(r21)
8111d580:	91000515 	stw	r4,20(r18)
8111d584:	003f0406 	br	8111d198 <__reset+0xfb0fd198>
8111d588:	a8c00417 	ldw	r3,16(r21)
8111d58c:	ad400604 	addi	r21,r21,24
8111d590:	b0800804 	addi	r2,r22,32
8111d594:	b0c00615 	stw	r3,24(r22)
8111d598:	a8ffff17 	ldw	r3,-4(r21)
8111d59c:	b0c00715 	stw	r3,28(r22)
8111d5a0:	003f9b06 	br	8111d410 <__reset+0xfb0fd410>
8111d5a4:	9005883a 	mov	r2,r18
8111d5a8:	003fc706 	br	8111d4c8 <__reset+0xfb0fd4c8>
8111d5ac:	a80b883a 	mov	r5,r21
8111d5b0:	9009883a 	mov	r4,r18
8111d5b4:	111be7c0 	call	8111be7c <memmove>
8111d5b8:	003fc906 	br	8111d4e0 <__reset+0xfb0fd4e0>
8111d5bc:	a8800217 	ldw	r2,8(r21)
8111d5c0:	b0800415 	stw	r2,16(r22)
8111d5c4:	a8800317 	ldw	r2,12(r21)
8111d5c8:	b0800515 	stw	r2,20(r22)
8111d5cc:	31000726 	beq	r6,r4,8111d5ec <_realloc_r+0x550>
8111d5d0:	b0800604 	addi	r2,r22,24
8111d5d4:	ad400404 	addi	r21,r21,16
8111d5d8:	003fbb06 	br	8111d4c8 <__reset+0xfb0fd4c8>
8111d5dc:	a009883a 	mov	r4,r20
8111d5e0:	1127a680 	call	81127a68 <__malloc_unlock>
8111d5e4:	0005883a 	mov	r2,zero
8111d5e8:	003f0a06 	br	8111d214 <__reset+0xfb0fd214>
8111d5ec:	a8c00417 	ldw	r3,16(r21)
8111d5f0:	ad400604 	addi	r21,r21,24
8111d5f4:	b0800804 	addi	r2,r22,32
8111d5f8:	b0c00615 	stw	r3,24(r22)
8111d5fc:	a8ffff17 	ldw	r3,-4(r21)
8111d600:	b0c00715 	stw	r3,28(r22)
8111d604:	003fb006 	br	8111d4c8 <__reset+0xfb0fd4c8>

8111d608 <__fpclassifyd>:
8111d608:	00a00034 	movhi	r2,32768
8111d60c:	10bfffc4 	addi	r2,r2,-1
8111d610:	2884703a 	and	r2,r5,r2
8111d614:	10000726 	beq	r2,zero,8111d634 <__fpclassifyd+0x2c>
8111d618:	00fffc34 	movhi	r3,65520
8111d61c:	019ff834 	movhi	r6,32736
8111d620:	28c7883a 	add	r3,r5,r3
8111d624:	31bfffc4 	addi	r6,r6,-1
8111d628:	30c00536 	bltu	r6,r3,8111d640 <__fpclassifyd+0x38>
8111d62c:	00800104 	movi	r2,4
8111d630:	f800283a 	ret
8111d634:	2000021e 	bne	r4,zero,8111d640 <__fpclassifyd+0x38>
8111d638:	00800084 	movi	r2,2
8111d63c:	f800283a 	ret
8111d640:	00dffc34 	movhi	r3,32752
8111d644:	019ff834 	movhi	r6,32736
8111d648:	28cb883a 	add	r5,r5,r3
8111d64c:	31bfffc4 	addi	r6,r6,-1
8111d650:	317ff62e 	bgeu	r6,r5,8111d62c <__reset+0xfb0fd62c>
8111d654:	01400434 	movhi	r5,16
8111d658:	297fffc4 	addi	r5,r5,-1
8111d65c:	28800236 	bltu	r5,r2,8111d668 <__fpclassifyd+0x60>
8111d660:	008000c4 	movi	r2,3
8111d664:	f800283a 	ret
8111d668:	10c00226 	beq	r2,r3,8111d674 <__fpclassifyd+0x6c>
8111d66c:	0005883a 	mov	r2,zero
8111d670:	f800283a 	ret
8111d674:	2005003a 	cmpeq	r2,r4,zero
8111d678:	f800283a 	ret

8111d67c <__sccl>:
8111d67c:	2a000003 	ldbu	r8,0(r5)
8111d680:	00801784 	movi	r2,94
8111d684:	40802a26 	beq	r8,r2,8111d730 <__sccl+0xb4>
8111d688:	29400044 	addi	r5,r5,1
8111d68c:	000f883a 	mov	r7,zero
8111d690:	0013883a 	mov	r9,zero
8111d694:	2007883a 	mov	r3,r4
8111d698:	21804004 	addi	r6,r4,256
8111d69c:	19c00005 	stb	r7,0(r3)
8111d6a0:	18c00044 	addi	r3,r3,1
8111d6a4:	19bffd1e 	bne	r3,r6,8111d69c <__reset+0xfb0fd69c>
8111d6a8:	40001126 	beq	r8,zero,8111d6f0 <__sccl+0x74>
8111d6ac:	00800044 	movi	r2,1
8111d6b0:	124fc83a 	sub	r7,r2,r9
8111d6b4:	02800b44 	movi	r10,45
8111d6b8:	02c01744 	movi	r11,93
8111d6bc:	2205883a 	add	r2,r4,r8
8111d6c0:	11c00005 	stb	r7,0(r2)
8111d6c4:	28800044 	addi	r2,r5,1
8111d6c8:	28c00003 	ldbu	r3,0(r5)
8111d6cc:	1a800a26 	beq	r3,r10,8111d6f8 <__sccl+0x7c>
8111d6d0:	1ac00426 	beq	r3,r11,8111d6e4 <__sccl+0x68>
8111d6d4:	18000426 	beq	r3,zero,8111d6e8 <__sccl+0x6c>
8111d6d8:	1811883a 	mov	r8,r3
8111d6dc:	100b883a 	mov	r5,r2
8111d6e0:	003ff606 	br	8111d6bc <__reset+0xfb0fd6bc>
8111d6e4:	f800283a 	ret
8111d6e8:	2805883a 	mov	r2,r5
8111d6ec:	f800283a 	ret
8111d6f0:	28bfffc4 	addi	r2,r5,-1
8111d6f4:	f800283a 	ret
8111d6f8:	12400003 	ldbu	r9,0(r2)
8111d6fc:	4ac01126 	beq	r9,r11,8111d744 <__sccl+0xc8>
8111d700:	4a001016 	blt	r9,r8,8111d744 <__sccl+0xc8>
8111d704:	41800044 	addi	r6,r8,1
8111d708:	29400084 	addi	r5,r5,2
8111d70c:	2187883a 	add	r3,r4,r6
8111d710:	00000106 	br	8111d718 <__sccl+0x9c>
8111d714:	31800044 	addi	r6,r6,1
8111d718:	19c00005 	stb	r7,0(r3)
8111d71c:	3011883a 	mov	r8,r6
8111d720:	18c00044 	addi	r3,r3,1
8111d724:	327ffb16 	blt	r6,r9,8111d714 <__reset+0xfb0fd714>
8111d728:	10800084 	addi	r2,r2,2
8111d72c:	003fe606 	br	8111d6c8 <__reset+0xfb0fd6c8>
8111d730:	2a000043 	ldbu	r8,1(r5)
8111d734:	01c00044 	movi	r7,1
8111d738:	29400084 	addi	r5,r5,2
8111d73c:	02400044 	movi	r9,1
8111d740:	003fd406 	br	8111d694 <__reset+0xfb0fd694>
8111d744:	5011883a 	mov	r8,r10
8111d748:	003fe406 	br	8111d6dc <__reset+0xfb0fd6dc>

8111d74c <nanf>:
8111d74c:	009ff034 	movhi	r2,32704
8111d750:	f800283a 	ret

8111d754 <strcmp>:
8111d754:	2144b03a 	or	r2,r4,r5
8111d758:	108000cc 	andi	r2,r2,3
8111d75c:	1000171e 	bne	r2,zero,8111d7bc <strcmp+0x68>
8111d760:	20800017 	ldw	r2,0(r4)
8111d764:	28c00017 	ldw	r3,0(r5)
8111d768:	10c0141e 	bne	r2,r3,8111d7bc <strcmp+0x68>
8111d76c:	027fbff4 	movhi	r9,65279
8111d770:	4a7fbfc4 	addi	r9,r9,-257
8111d774:	0086303a 	nor	r3,zero,r2
8111d778:	02202074 	movhi	r8,32897
8111d77c:	1245883a 	add	r2,r2,r9
8111d780:	42202004 	addi	r8,r8,-32640
8111d784:	10c4703a 	and	r2,r2,r3
8111d788:	1204703a 	and	r2,r2,r8
8111d78c:	10000226 	beq	r2,zero,8111d798 <strcmp+0x44>
8111d790:	00002306 	br	8111d820 <strcmp+0xcc>
8111d794:	1000221e 	bne	r2,zero,8111d820 <strcmp+0xcc>
8111d798:	21000104 	addi	r4,r4,4
8111d79c:	20c00017 	ldw	r3,0(r4)
8111d7a0:	29400104 	addi	r5,r5,4
8111d7a4:	29800017 	ldw	r6,0(r5)
8111d7a8:	1a4f883a 	add	r7,r3,r9
8111d7ac:	00c4303a 	nor	r2,zero,r3
8111d7b0:	3884703a 	and	r2,r7,r2
8111d7b4:	1204703a 	and	r2,r2,r8
8111d7b8:	19bff626 	beq	r3,r6,8111d794 <__reset+0xfb0fd794>
8111d7bc:	20800003 	ldbu	r2,0(r4)
8111d7c0:	10c03fcc 	andi	r3,r2,255
8111d7c4:	18c0201c 	xori	r3,r3,128
8111d7c8:	18ffe004 	addi	r3,r3,-128
8111d7cc:	18000c26 	beq	r3,zero,8111d800 <strcmp+0xac>
8111d7d0:	29800007 	ldb	r6,0(r5)
8111d7d4:	19800326 	beq	r3,r6,8111d7e4 <strcmp+0x90>
8111d7d8:	00001306 	br	8111d828 <strcmp+0xd4>
8111d7dc:	29800007 	ldb	r6,0(r5)
8111d7e0:	11800b1e 	bne	r2,r6,8111d810 <strcmp+0xbc>
8111d7e4:	21000044 	addi	r4,r4,1
8111d7e8:	20c00003 	ldbu	r3,0(r4)
8111d7ec:	29400044 	addi	r5,r5,1
8111d7f0:	18803fcc 	andi	r2,r3,255
8111d7f4:	1080201c 	xori	r2,r2,128
8111d7f8:	10bfe004 	addi	r2,r2,-128
8111d7fc:	103ff71e 	bne	r2,zero,8111d7dc <__reset+0xfb0fd7dc>
8111d800:	0007883a 	mov	r3,zero
8111d804:	28800003 	ldbu	r2,0(r5)
8111d808:	1885c83a 	sub	r2,r3,r2
8111d80c:	f800283a 	ret
8111d810:	28800003 	ldbu	r2,0(r5)
8111d814:	18c03fcc 	andi	r3,r3,255
8111d818:	1885c83a 	sub	r2,r3,r2
8111d81c:	f800283a 	ret
8111d820:	0005883a 	mov	r2,zero
8111d824:	f800283a 	ret
8111d828:	10c03fcc 	andi	r3,r2,255
8111d82c:	003ff506 	br	8111d804 <__reset+0xfb0fd804>

8111d830 <sulp>:
8111d830:	defffd04 	addi	sp,sp,-12
8111d834:	de00012e 	bgeu	sp,et,8111d83c <sulp+0xc>
8111d838:	003b68fa 	trap	3
8111d83c:	dc400115 	stw	r17,4(sp)
8111d840:	3023883a 	mov	r17,r6
8111d844:	dc000015 	stw	r16,0(sp)
8111d848:	dfc00215 	stw	ra,8(sp)
8111d84c:	2821883a 	mov	r16,r5
8111d850:	111cb3c0 	call	8111cb3c <__ulp>
8111d854:	88000c26 	beq	r17,zero,8111d888 <sulp+0x58>
8111d858:	841ffc2c 	andhi	r16,r16,32752
8111d85c:	8020d53a 	srli	r16,r16,20
8111d860:	01c01ac4 	movi	r7,107
8111d864:	3c21c83a 	sub	r16,r7,r16
8111d868:	0400070e 	bge	zero,r16,8111d888 <sulp+0x58>
8111d86c:	8020953a 	slli	r16,r16,20
8111d870:	01cffc34 	movhi	r7,16368
8111d874:	000d883a 	mov	r6,zero
8111d878:	81cf883a 	add	r7,r16,r7
8111d87c:	1009883a 	mov	r4,r2
8111d880:	180b883a 	mov	r5,r3
8111d884:	11105240 	call	81110524 <__muldf3>
8111d888:	dfc00217 	ldw	ra,8(sp)
8111d88c:	dc400117 	ldw	r17,4(sp)
8111d890:	dc000017 	ldw	r16,0(sp)
8111d894:	dec00304 	addi	sp,sp,12
8111d898:	f800283a 	ret

8111d89c <_strtod_r>:
8111d89c:	deffe204 	addi	sp,sp,-120
8111d8a0:	de00012e 	bgeu	sp,et,8111d8a8 <_strtod_r+0xc>
8111d8a4:	003b68fa 	trap	3
8111d8a8:	ddc01b15 	stw	r23,108(sp)
8111d8ac:	dd001815 	stw	r20,96(sp)
8111d8b0:	dc801615 	stw	r18,88(sp)
8111d8b4:	dc401515 	stw	r17,84(sp)
8111d8b8:	dc001415 	stw	r16,80(sp)
8111d8bc:	d9400615 	stw	r5,24(sp)
8111d8c0:	dfc01d15 	stw	ra,116(sp)
8111d8c4:	df001c15 	stw	fp,112(sp)
8111d8c8:	dd801a15 	stw	r22,104(sp)
8111d8cc:	dd401915 	stw	r21,100(sp)
8111d8d0:	dcc01715 	stw	r19,92(sp)
8111d8d4:	2021883a 	mov	r16,r4
8111d8d8:	d8000515 	stw	zero,20(sp)
8111d8dc:	2809883a 	mov	r4,r5
8111d8e0:	20800003 	ldbu	r2,0(r4)
8111d8e4:	01e044b4 	movhi	r7,33042
8111d8e8:	282f883a 	mov	r23,r5
8111d8ec:	10c03fcc 	andi	r3,r2,255
8111d8f0:	01400b44 	movi	r5,45
8111d8f4:	39f64604 	addi	r7,r7,-9960
8111d8f8:	3029883a 	mov	r20,r6
8111d8fc:	0025883a 	mov	r18,zero
8111d900:	0023883a 	mov	r17,zero
8111d904:	28c0ba36 	bltu	r5,r3,8111dbf0 <_strtod_r+0x354>
8111d908:	180690ba 	slli	r3,r3,2
8111d90c:	19c7883a 	add	r3,r3,r7
8111d910:	18c00017 	ldw	r3,0(r3)
8111d914:	1800683a 	jmp	r3
8111d918:	8111d9d8 	cmpnei	r4,r16,18279
8111d91c:	8111dbf0 	cmpltui	r4,r16,18287
8111d920:	8111dbf0 	cmpltui	r4,r16,18287
8111d924:	8111dbf0 	cmpltui	r4,r16,18287
8111d928:	8111dbf0 	cmpltui	r4,r16,18287
8111d92c:	8111dbf0 	cmpltui	r4,r16,18287
8111d930:	8111dbf0 	cmpltui	r4,r16,18287
8111d934:	8111dbf0 	cmpltui	r4,r16,18287
8111d938:	8111dbf0 	cmpltui	r4,r16,18287
8111d93c:	8111dbdc 	xori	r4,r16,18287
8111d940:	8111dbdc 	xori	r4,r16,18287
8111d944:	8111dbdc 	xori	r4,r16,18287
8111d948:	8111dbdc 	xori	r4,r16,18287
8111d94c:	8111dbdc 	xori	r4,r16,18287
8111d950:	8111dbf0 	cmpltui	r4,r16,18287
8111d954:	8111dbf0 	cmpltui	r4,r16,18287
8111d958:	8111dbf0 	cmpltui	r4,r16,18287
8111d95c:	8111dbf0 	cmpltui	r4,r16,18287
8111d960:	8111dbf0 	cmpltui	r4,r16,18287
8111d964:	8111dbf0 	cmpltui	r4,r16,18287
8111d968:	8111dbf0 	cmpltui	r4,r16,18287
8111d96c:	8111dbf0 	cmpltui	r4,r16,18287
8111d970:	8111dbf0 	cmpltui	r4,r16,18287
8111d974:	8111dbf0 	cmpltui	r4,r16,18287
8111d978:	8111dbf0 	cmpltui	r4,r16,18287
8111d97c:	8111dbf0 	cmpltui	r4,r16,18287
8111d980:	8111dbf0 	cmpltui	r4,r16,18287
8111d984:	8111dbf0 	cmpltui	r4,r16,18287
8111d988:	8111dbf0 	cmpltui	r4,r16,18287
8111d98c:	8111dbf0 	cmpltui	r4,r16,18287
8111d990:	8111dbf0 	cmpltui	r4,r16,18287
8111d994:	8111dbf0 	cmpltui	r4,r16,18287
8111d998:	8111dbdc 	xori	r4,r16,18287
8111d99c:	8111dbf0 	cmpltui	r4,r16,18287
8111d9a0:	8111dbf0 	cmpltui	r4,r16,18287
8111d9a4:	8111dbf0 	cmpltui	r4,r16,18287
8111d9a8:	8111dbf0 	cmpltui	r4,r16,18287
8111d9ac:	8111dbf0 	cmpltui	r4,r16,18287
8111d9b0:	8111dbf0 	cmpltui	r4,r16,18287
8111d9b4:	8111dbf0 	cmpltui	r4,r16,18287
8111d9b8:	8111dbf0 	cmpltui	r4,r16,18287
8111d9bc:	8111dbf0 	cmpltui	r4,r16,18287
8111d9c0:	8111dbf0 	cmpltui	r4,r16,18287
8111d9c4:	8111da30 	cmpltui	r4,r16,18280
8111d9c8:	8111dbf0 	cmpltui	r4,r16,18287
8111d9cc:	8111dbd0 	cmplti	r4,r16,18287
8111d9d0:	00801244 	movi	r2,73
8111d9d4:	88843526 	beq	r17,r2,8111eaac <_strtod_r+0x1210>
8111d9d8:	002b883a 	mov	r21,zero
8111d9dc:	002d883a 	mov	r22,zero
8111d9e0:	a0000526 	beq	r20,zero,8111d9f8 <_strtod_r+0x15c>
8111d9e4:	d8000715 	stw	zero,28(sp)
8111d9e8:	a5c00015 	stw	r23,0(r20)
8111d9ec:	d9000717 	ldw	r4,28(sp)
8111d9f0:	20000126 	beq	r4,zero,8111d9f8 <_strtod_r+0x15c>
8111d9f4:	b5a0003c 	xorhi	r22,r22,32768
8111d9f8:	a805883a 	mov	r2,r21
8111d9fc:	b007883a 	mov	r3,r22
8111da00:	dfc01d17 	ldw	ra,116(sp)
8111da04:	df001c17 	ldw	fp,112(sp)
8111da08:	ddc01b17 	ldw	r23,108(sp)
8111da0c:	dd801a17 	ldw	r22,104(sp)
8111da10:	dd401917 	ldw	r21,100(sp)
8111da14:	dd001817 	ldw	r20,96(sp)
8111da18:	dcc01717 	ldw	r19,92(sp)
8111da1c:	dc801617 	ldw	r18,88(sp)
8111da20:	dc401517 	ldw	r17,84(sp)
8111da24:	dc001417 	ldw	r16,80(sp)
8111da28:	dec01e04 	addi	sp,sp,120
8111da2c:	f800283a 	ret
8111da30:	d8000715 	stw	zero,28(sp)
8111da34:	24c00044 	addi	r19,r4,1
8111da38:	dcc00615 	stw	r19,24(sp)
8111da3c:	20800043 	ldbu	r2,1(r4)
8111da40:	10c03fcc 	andi	r3,r2,255
8111da44:	18c0201c 	xori	r3,r3,128
8111da48:	18ffe004 	addi	r3,r3,-128
8111da4c:	183fe226 	beq	r3,zero,8111d9d8 <__reset+0xfb0fd9d8>
8111da50:	11403fcc 	andi	r5,r2,255
8111da54:	2940201c 	xori	r5,r5,128
8111da58:	297fe004 	addi	r5,r5,-128
8111da5c:	00c00c04 	movi	r3,48
8111da60:	28c0e526 	beq	r5,r3,8111ddf8 <_strtod_r+0x55c>
8111da64:	dcc00815 	stw	r19,32(sp)
8111da68:	0025883a 	mov	r18,zero
8111da6c:	10fff404 	addi	r3,r2,-48
8111da70:	18c03fcc 	andi	r3,r3,255
8111da74:	01000244 	movi	r4,9
8111da78:	20c37536 	bltu	r4,r3,8111e850 <_strtod_r+0xfb4>
8111da7c:	dd400817 	ldw	r21,32(sp)
8111da80:	0027883a 	mov	r19,zero
8111da84:	0039883a 	mov	fp,zero
8111da88:	002d883a 	mov	r22,zero
8111da8c:	01400204 	movi	r5,8
8111da90:	2d805a16 	blt	r5,r22,8111dbfc <_strtod_r+0x360>
8111da94:	e70002a4 	muli	fp,fp,10
8111da98:	10c03fcc 	andi	r3,r2,255
8111da9c:	18c0201c 	xori	r3,r3,128
8111daa0:	18ffe004 	addi	r3,r3,-128
8111daa4:	e0f9883a 	add	fp,fp,r3
8111daa8:	e73ff404 	addi	fp,fp,-48
8111daac:	ad400044 	addi	r21,r21,1
8111dab0:	dd400615 	stw	r21,24(sp)
8111dab4:	a8800003 	ldbu	r2,0(r21)
8111dab8:	b5800044 	addi	r22,r22,1
8111dabc:	10fff404 	addi	r3,r2,-48
8111dac0:	18c03fcc 	andi	r3,r3,255
8111dac4:	20fff22e 	bgeu	r4,r3,8111da90 <__reset+0xfb0fda90>
8111dac8:	14403fcc 	andi	r17,r2,255
8111dacc:	8c40201c 	xori	r17,r17,128
8111dad0:	8c7fe004 	addi	r17,r17,-128
8111dad4:	8009883a 	mov	r4,r16
8111dad8:	111babc0 	call	8111babc <_localeconv_r>
8111dadc:	11400017 	ldw	r5,0(r2)
8111dae0:	8009883a 	mov	r4,r16
8111dae4:	d9401315 	stw	r5,76(sp)
8111dae8:	111babc0 	call	8111babc <_localeconv_r>
8111daec:	11000017 	ldw	r4,0(r2)
8111daf0:	1112a400 	call	81112a40 <strlen>
8111daf4:	d9401317 	ldw	r5,76(sp)
8111daf8:	100d883a 	mov	r6,r2
8111dafc:	a809883a 	mov	r4,r21
8111db00:	112348c0 	call	8112348c <strncmp>
8111db04:	1000ce26 	beq	r2,zero,8111de40 <_strtod_r+0x5a4>
8111db08:	b013883a 	mov	r9,r22
8111db0c:	000b883a 	mov	r5,zero
8111db10:	0015883a 	mov	r10,zero
8111db14:	0017883a 	mov	r11,zero
8111db18:	00801944 	movi	r2,101
8111db1c:	88807826 	beq	r17,r2,8111dd00 <_strtod_r+0x464>
8111db20:	00801144 	movi	r2,69
8111db24:	88807626 	beq	r17,r2,8111dd00 <_strtod_r+0x464>
8111db28:	002b883a 	mov	r21,zero
8111db2c:	48003d1e 	bne	r9,zero,8111dc24 <_strtod_r+0x388>
8111db30:	2800391e 	bne	r5,zero,8111dc18 <_strtod_r+0x37c>
8111db34:	9000381e 	bne	r18,zero,8111dc18 <_strtod_r+0x37c>
8111db38:	583fa71e 	bne	r11,zero,8111d9d8 <__reset+0xfb0fd9d8>
8111db3c:	00801384 	movi	r2,78
8111db40:	88800526 	beq	r17,r2,8111db58 <_strtod_r+0x2bc>
8111db44:	147fa20e 	bge	r2,r17,8111d9d0 <__reset+0xfb0fd9d0>
8111db48:	00801a44 	movi	r2,105
8111db4c:	8883d726 	beq	r17,r2,8111eaac <_strtod_r+0x1210>
8111db50:	00801b84 	movi	r2,110
8111db54:	88bfa01e 	bne	r17,r2,8111d9d8 <__reset+0xfb0fd9d8>
8111db58:	01604534 	movhi	r5,33044
8111db5c:	d9000617 	ldw	r4,24(sp)
8111db60:	29771104 	addi	r5,r5,-9148
8111db64:	01c00644 	movi	r7,25
8111db68:	00000b06 	br	8111db98 <_strtod_r+0x2fc>
8111db6c:	21000044 	addi	r4,r4,1
8111db70:	20800003 	ldbu	r2,0(r4)
8111db74:	10ffefc4 	addi	r3,r2,-65
8111db78:	10803fcc 	andi	r2,r2,255
8111db7c:	1080201c 	xori	r2,r2,128
8111db80:	18c03fcc 	andi	r3,r3,255
8111db84:	10bfe004 	addi	r2,r2,-128
8111db88:	38c00136 	bltu	r7,r3,8111db90 <_strtod_r+0x2f4>
8111db8c:	10800804 	addi	r2,r2,32
8111db90:	29400044 	addi	r5,r5,1
8111db94:	11bf901e 	bne	r2,r6,8111d9d8 <__reset+0xfb0fd9d8>
8111db98:	29800007 	ldb	r6,0(r5)
8111db9c:	303ff31e 	bne	r6,zero,8111db6c <__reset+0xfb0fdb6c>
8111dba0:	20800044 	addi	r2,r4,1
8111dba4:	d8800615 	stw	r2,24(sp)
8111dba8:	20c00047 	ldb	r3,1(r4)
8111dbac:	00800a04 	movi	r2,40
8111dbb0:	18849d26 	beq	r3,r2,8111ee28 <_strtod_r+0x158c>
8111dbb4:	047ffe34 	movhi	r17,65528
8111dbb8:	0025883a 	mov	r18,zero
8111dbbc:	902b883a 	mov	r21,r18
8111dbc0:	882d883a 	mov	r22,r17
8111dbc4:	a03f8926 	beq	r20,zero,8111d9ec <__reset+0xfb0fd9ec>
8111dbc8:	ddc00617 	ldw	r23,24(sp)
8111dbcc:	003f8606 	br	8111d9e8 <__reset+0xfb0fd9e8>
8111dbd0:	00800044 	movi	r2,1
8111dbd4:	d8800715 	stw	r2,28(sp)
8111dbd8:	003f9606 	br	8111da34 <__reset+0xfb0fda34>
8111dbdc:	21000044 	addi	r4,r4,1
8111dbe0:	d9000615 	stw	r4,24(sp)
8111dbe4:	20800003 	ldbu	r2,0(r4)
8111dbe8:	10c03fcc 	andi	r3,r2,255
8111dbec:	28ff462e 	bgeu	r5,r3,8111d908 <__reset+0xfb0fd908>
8111dbf0:	2027883a 	mov	r19,r4
8111dbf4:	d8000715 	stw	zero,28(sp)
8111dbf8:	003f9506 	br	8111da50 <__reset+0xfb0fda50>
8111dbfc:	9cc002a4 	muli	r19,r19,10
8111dc00:	10803fcc 	andi	r2,r2,255
8111dc04:	1080201c 	xori	r2,r2,128
8111dc08:	10bfe004 	addi	r2,r2,-128
8111dc0c:	9885883a 	add	r2,r19,r2
8111dc10:	14fff404 	addi	r19,r2,-48
8111dc14:	003fa506 	br	8111daac <__reset+0xfb0fdaac>
8111dc18:	002b883a 	mov	r21,zero
8111dc1c:	002d883a 	mov	r22,zero
8111dc20:	003fe806 	br	8111dbc4 <__reset+0xfb0fdbc4>
8111dc24:	aaabc83a 	sub	r21,r21,r10
8111dc28:	b000011e 	bne	r22,zero,8111dc30 <_strtod_r+0x394>
8111dc2c:	482d883a 	mov	r22,r9
8111dc30:	00800404 	movi	r2,16
8111dc34:	482f883a 	mov	r23,r9
8111dc38:	1240010e 	bge	r2,r9,8111dc40 <_strtod_r+0x3a4>
8111dc3c:	102f883a 	mov	r23,r2
8111dc40:	e009883a 	mov	r4,fp
8111dc44:	da401315 	stw	r9,76(sp)
8111dc48:	112660c0 	call	8112660c <__floatunsidf>
8111dc4c:	1025883a 	mov	r18,r2
8111dc50:	00800244 	movi	r2,9
8111dc54:	1823883a 	mov	r17,r3
8111dc58:	da401317 	ldw	r9,76(sp)
8111dc5c:	15c0160e 	bge	r2,r23,8111dcb8 <_strtod_r+0x41c>
8111dc60:	b8bffdc4 	addi	r2,r23,-9
8111dc64:	100490fa 	slli	r2,r2,3
8111dc68:	180b883a 	mov	r5,r3
8111dc6c:	00e04534 	movhi	r3,33044
8111dc70:	18f6dc04 	addi	r3,r3,-9360
8111dc74:	1885883a 	add	r2,r3,r2
8111dc78:	11800017 	ldw	r6,0(r2)
8111dc7c:	11c00117 	ldw	r7,4(r2)
8111dc80:	9009883a 	mov	r4,r18
8111dc84:	11105240 	call	81110524 <__muldf3>
8111dc88:	9809883a 	mov	r4,r19
8111dc8c:	1025883a 	mov	r18,r2
8111dc90:	1823883a 	mov	r17,r3
8111dc94:	112660c0 	call	8112660c <__floatunsidf>
8111dc98:	9009883a 	mov	r4,r18
8111dc9c:	880b883a 	mov	r5,r17
8111dca0:	100d883a 	mov	r6,r2
8111dca4:	180f883a 	mov	r7,r3
8111dca8:	11247a80 	call	811247a8 <__adddf3>
8111dcac:	da401317 	ldw	r9,76(sp)
8111dcb0:	1025883a 	mov	r18,r2
8111dcb4:	1823883a 	mov	r17,r3
8111dcb8:	008003c4 	movi	r2,15
8111dcbc:	12407b16 	blt	r2,r9,8111deac <_strtod_r+0x610>
8111dcc0:	a83fbe26 	beq	r21,zero,8111dbbc <__reset+0xfb0fdbbc>
8111dcc4:	0543670e 	bge	zero,r21,8111ea64 <_strtod_r+0x11c8>
8111dcc8:	00c00584 	movi	r3,22
8111dccc:	1d42e816 	blt	r3,r21,8111e870 <_strtod_r+0xfd4>
8111dcd0:	a82a90fa 	slli	r21,r21,3
8111dcd4:	00a04534 	movhi	r2,33044
8111dcd8:	10b6dc04 	addi	r2,r2,-9360
8111dcdc:	1545883a 	add	r2,r2,r21
8111dce0:	11000017 	ldw	r4,0(r2)
8111dce4:	11400117 	ldw	r5,4(r2)
8111dce8:	900d883a 	mov	r6,r18
8111dcec:	880f883a 	mov	r7,r17
8111dcf0:	11105240 	call	81110524 <__muldf3>
8111dcf4:	102b883a 	mov	r21,r2
8111dcf8:	182d883a 	mov	r22,r3
8111dcfc:	003fb106 	br	8111dbc4 <__reset+0xfb0fdbc4>
8111dd00:	4801b526 	beq	r9,zero,8111e3d8 <_strtod_r+0xb3c>
8111dd04:	ddc00617 	ldw	r23,24(sp)
8111dd08:	00c00ac4 	movi	r3,43
8111dd0c:	b8800044 	addi	r2,r23,1
8111dd10:	d8800615 	stw	r2,24(sp)
8111dd14:	b8800047 	ldb	r2,1(r23)
8111dd18:	10c1e926 	beq	r2,r3,8111e4c0 <_strtod_r+0xc24>
8111dd1c:	00c00b44 	movi	r3,45
8111dd20:	10c1ec26 	beq	r2,r3,8111e4d4 <_strtod_r+0xc38>
8111dd24:	1023883a 	mov	r17,r2
8111dd28:	0019883a 	mov	r12,zero
8111dd2c:	88bff404 	addi	r2,r17,-48
8111dd30:	00c00244 	movi	r3,9
8111dd34:	1881b736 	bltu	r3,r2,8111e414 <_strtod_r+0xb78>
8111dd38:	00800c04 	movi	r2,48
8111dd3c:	8880071e 	bne	r17,r2,8111dd5c <_strtod_r+0x4c0>
8111dd40:	d8800617 	ldw	r2,24(sp)
8111dd44:	8807883a 	mov	r3,r17
8111dd48:	10800044 	addi	r2,r2,1
8111dd4c:	d8800615 	stw	r2,24(sp)
8111dd50:	14400007 	ldb	r17,0(r2)
8111dd54:	10800044 	addi	r2,r2,1
8111dd58:	88fffc26 	beq	r17,r3,8111dd4c <__reset+0xfb0fdd4c>
8111dd5c:	88bff3c4 	addi	r2,r17,-49
8111dd60:	00c00204 	movi	r3,8
8111dd64:	18bf7036 	bltu	r3,r2,8111db28 <__reset+0xfb0fdb28>
8111dd68:	db800617 	ldw	r14,24(sp)
8111dd6c:	88bff404 	addi	r2,r17,-48
8111dd70:	03400244 	movi	r13,9
8111dd74:	71c00044 	addi	r7,r14,1
8111dd78:	d9c00615 	stw	r7,24(sp)
8111dd7c:	74400043 	ldbu	r17,1(r14)
8111dd80:	88fff404 	addi	r3,r17,-48
8111dd84:	8c403fcc 	andi	r17,r17,255
8111dd88:	8c40201c 	xori	r17,r17,128
8111dd8c:	18c03fcc 	andi	r3,r3,255
8111dd90:	8c7fe004 	addi	r17,r17,-128
8111dd94:	68c00e36 	bltu	r13,r3,8111ddd0 <_strtod_r+0x534>
8111dd98:	71000084 	addi	r4,r14,2
8111dd9c:	d9000615 	stw	r4,24(sp)
8111dda0:	108002a4 	muli	r2,r2,10
8111dda4:	21800003 	ldbu	r6,0(r4)
8111dda8:	200f883a 	mov	r7,r4
8111ddac:	1463883a 	add	r17,r2,r17
8111ddb0:	30fff404 	addi	r3,r6,-48
8111ddb4:	88bff404 	addi	r2,r17,-48
8111ddb8:	34403fcc 	andi	r17,r6,255
8111ddbc:	8c40201c 	xori	r17,r17,128
8111ddc0:	18c03fcc 	andi	r3,r3,255
8111ddc4:	8c7fe004 	addi	r17,r17,-128
8111ddc8:	21000044 	addi	r4,r4,1
8111ddcc:	68fff32e 	bgeu	r13,r3,8111dd9c <__reset+0xfb0fdd9c>
8111ddd0:	3b8fc83a 	sub	r7,r7,r14
8111ddd4:	00c00204 	movi	r3,8
8111ddd8:	19c29716 	blt	r3,r7,8111e838 <_strtod_r+0xf9c>
8111dddc:	102b883a 	mov	r21,r2
8111dde0:	009387c4 	movi	r2,19999
8111dde4:	1540010e 	bge	r2,r21,8111ddec <_strtod_r+0x550>
8111dde8:	102b883a 	mov	r21,r2
8111ddec:	603f4f26 	beq	r12,zero,8111db2c <__reset+0xfb0fdb2c>
8111ddf0:	056bc83a 	sub	r21,zero,r21
8111ddf4:	003f4d06 	br	8111db2c <__reset+0xfb0fdb2c>
8111ddf8:	98800047 	ldb	r2,1(r19)
8111ddfc:	00c01604 	movi	r3,88
8111de00:	10c1de26 	beq	r2,r3,8111e57c <_strtod_r+0xce0>
8111de04:	00c01e04 	movi	r3,120
8111de08:	10c1dc26 	beq	r2,r3,8111e57c <_strtod_r+0xce0>
8111de0c:	98c00044 	addi	r3,r19,1
8111de10:	1827883a 	mov	r19,r3
8111de14:	d8c00615 	stw	r3,24(sp)
8111de18:	18c00044 	addi	r3,r3,1
8111de1c:	18bfffc3 	ldbu	r2,-1(r3)
8111de20:	11003fcc 	andi	r4,r2,255
8111de24:	2100201c 	xori	r4,r4,128
8111de28:	213fe004 	addi	r4,r4,-128
8111de2c:	217ff826 	beq	r4,r5,8111de10 <__reset+0xfb0fde10>
8111de30:	203f7926 	beq	r4,zero,8111dc18 <__reset+0xfb0fdc18>
8111de34:	dcc00815 	stw	r19,32(sp)
8111de38:	04800044 	movi	r18,1
8111de3c:	003f0b06 	br	8111da6c <__reset+0xfb0fda6c>
8111de40:	8009883a 	mov	r4,r16
8111de44:	111babc0 	call	8111babc <_localeconv_r>
8111de48:	11000017 	ldw	r4,0(r2)
8111de4c:	1112a400 	call	81112a40 <strlen>
8111de50:	d8c00617 	ldw	r3,24(sp)
8111de54:	1885883a 	add	r2,r3,r2
8111de58:	d8800615 	stw	r2,24(sp)
8111de5c:	14400007 	ldb	r17,0(r2)
8111de60:	b001881e 	bne	r22,zero,8111e484 <_strtod_r+0xbe8>
8111de64:	00c00c04 	movi	r3,48
8111de68:	88c3391e 	bne	r17,r3,8111eb50 <_strtod_r+0x12b4>
8111de6c:	10c00044 	addi	r3,r2,1
8111de70:	8809883a 	mov	r4,r17
8111de74:	d8c00615 	stw	r3,24(sp)
8111de78:	1c400007 	ldb	r17,0(r3)
8111de7c:	188bc83a 	sub	r5,r3,r2
8111de80:	18c00044 	addi	r3,r3,1
8111de84:	893ffb26 	beq	r17,r4,8111de74 <__reset+0xfb0fde74>
8111de88:	88bff3c4 	addi	r2,r17,-49
8111de8c:	00c00204 	movi	r3,8
8111de90:	1882e72e 	bgeu	r3,r2,8111ea30 <_strtod_r+0x1194>
8111de94:	00801944 	movi	r2,101
8111de98:	88814d26 	beq	r17,r2,8111e3d0 <_strtod_r+0xb34>
8111de9c:	0013883a 	mov	r9,zero
8111dea0:	0015883a 	mov	r10,zero
8111dea4:	02c00044 	movi	r11,1
8111dea8:	003f1d06 	br	8111db20 <__reset+0xfb0fdb20>
8111deac:	4defc83a 	sub	r23,r9,r23
8111deb0:	bd6f883a 	add	r23,r23,r21
8111deb4:	05c21e0e 	bge	zero,r23,8111e730 <_strtod_r+0xe94>
8111deb8:	b88003cc 	andi	r2,r23,15
8111debc:	10000d26 	beq	r2,zero,8111def4 <_strtod_r+0x658>
8111dec0:	100490fa 	slli	r2,r2,3
8111dec4:	00e04534 	movhi	r3,33044
8111dec8:	18f6dc04 	addi	r3,r3,-9360
8111decc:	1885883a 	add	r2,r3,r2
8111ded0:	11000017 	ldw	r4,0(r2)
8111ded4:	11400117 	ldw	r5,4(r2)
8111ded8:	900d883a 	mov	r6,r18
8111dedc:	880f883a 	mov	r7,r17
8111dee0:	da401315 	stw	r9,76(sp)
8111dee4:	11105240 	call	81110524 <__muldf3>
8111dee8:	da401317 	ldw	r9,76(sp)
8111deec:	1025883a 	mov	r18,r2
8111def0:	1823883a 	mov	r17,r3
8111def4:	023ffc04 	movi	r8,-16
8111def8:	ba10703a 	and	r8,r23,r8
8111defc:	40003c26 	beq	r8,zero,8111dff0 <_strtod_r+0x754>
8111df00:	00804d04 	movi	r2,308
8111df04:	1201cd16 	blt	r2,r8,8111e63c <_strtod_r+0xda0>
8111df08:	4011d13a 	srai	r8,r8,4
8111df0c:	03000044 	movi	r12,1
8111df10:	62037c0e 	bge	r12,r8,8111ed04 <_strtod_r+0x1468>
8111df14:	01204534 	movhi	r4,33044
8111df18:	2136d204 	addi	r4,r4,-9400
8111df1c:	2015883a 	mov	r10,r4
8111df20:	0027883a 	mov	r19,zero
8111df24:	d9000915 	stw	r4,36(sp)
8111df28:	9005883a 	mov	r2,r18
8111df2c:	8807883a 	mov	r3,r17
8111df30:	dc000c15 	stw	r16,48(sp)
8111df34:	dc800e15 	stw	r18,56(sp)
8111df38:	9821883a 	mov	r16,r19
8111df3c:	0009883a 	mov	r4,zero
8111df40:	8827883a 	mov	r19,r17
8111df44:	602f883a 	mov	r23,r12
8111df48:	da400a15 	stw	r9,40(sp)
8111df4c:	5025883a 	mov	r18,r10
8111df50:	4023883a 	mov	r17,r8
8111df54:	8980004c 	andi	r6,r17,1
8111df58:	30000626 	beq	r6,zero,8111df74 <_strtod_r+0x6d8>
8111df5c:	91800017 	ldw	r6,0(r18)
8111df60:	91c00117 	ldw	r7,4(r18)
8111df64:	1009883a 	mov	r4,r2
8111df68:	180b883a 	mov	r5,r3
8111df6c:	11105240 	call	81110524 <__muldf3>
8111df70:	01000044 	movi	r4,1
8111df74:	8823d07a 	srai	r17,r17,1
8111df78:	84000044 	addi	r16,r16,1
8111df7c:	94800204 	addi	r18,r18,8
8111df80:	8dfff41e 	bne	r17,r23,8111df54 <__reset+0xfb0fdf54>
8111df84:	21003fcc 	andi	r4,r4,255
8111df88:	9823883a 	mov	r17,r19
8111df8c:	da400a17 	ldw	r9,40(sp)
8111df90:	8027883a 	mov	r19,r16
8111df94:	dc800e17 	ldw	r18,56(sp)
8111df98:	dc000c17 	ldw	r16,48(sp)
8111df9c:	2003b11e 	bne	r4,zero,8111ee64 <_strtod_r+0x15c8>
8111dfa0:	981690fa 	slli	r11,r19,3
8111dfa4:	d8800917 	ldw	r2,36(sp)
8111dfa8:	01ff2c34 	movhi	r7,64688
8111dfac:	900d883a 	mov	r6,r18
8111dfb0:	12ef883a 	add	r23,r2,r11
8111dfb4:	b9000017 	ldw	r4,0(r23)
8111dfb8:	b9400117 	ldw	r5,4(r23)
8111dfbc:	89cf883a 	add	r7,r17,r7
8111dfc0:	da401315 	stw	r9,76(sp)
8111dfc4:	11105240 	call	81110524 <__muldf3>
8111dfc8:	1025883a 	mov	r18,r2
8111dfcc:	011f2834 	movhi	r4,31904
8111dfd0:	189ffc2c 	andhi	r2,r3,32752
8111dfd4:	da401317 	ldw	r9,76(sp)
8111dfd8:	20819836 	bltu	r4,r2,8111e63c <_strtod_r+0xda0>
8111dfdc:	011f2434 	movhi	r4,31888
8111dfe0:	2083382e 	bgeu	r4,r2,8111ecc4 <_strtod_r+0x1428>
8111dfe4:	045ffc34 	movhi	r17,32752
8111dfe8:	8c7fffc4 	addi	r17,r17,-1
8111dfec:	04bfffc4 	movi	r18,-1
8111dff0:	d8000915 	stw	zero,36(sp)
8111dff4:	d9400817 	ldw	r5,32(sp)
8111dff8:	df000015 	stw	fp,0(sp)
8111dffc:	480f883a 	mov	r7,r9
8111e000:	b00d883a 	mov	r6,r22
8111e004:	8009883a 	mov	r4,r16
8111e008:	111c1d80 	call	8111c1d8 <__s2b>
8111e00c:	d8800815 	stw	r2,32(sp)
8111e010:	10018a26 	beq	r2,zero,8111e63c <_strtod_r+0xda0>
8111e014:	a807d7fa 	srai	r3,r21,31
8111e018:	0545c83a 	sub	r2,zero,r21
8111e01c:	dd400a15 	stw	r21,40(sp)
8111e020:	1886703a 	and	r3,r3,r2
8111e024:	d8c00c15 	stw	r3,48(sp)
8111e028:	a8013516 	blt	r21,zero,8111e500 <_strtod_r+0xc64>
8111e02c:	d9400817 	ldw	r5,32(sp)
8111e030:	0011883a 	mov	r8,zero
8111e034:	0027883a 	mov	r19,zero
8111e038:	29400304 	addi	r5,r5,12
8111e03c:	d9400f15 	stw	r5,60(sp)
8111e040:	402b883a 	mov	r21,r8
8111e044:	dd001215 	stw	r20,72(sp)
8111e048:	d8800817 	ldw	r2,32(sp)
8111e04c:	8009883a 	mov	r4,r16
8111e050:	11400117 	ldw	r5,4(r2)
8111e054:	111bfd80 	call	8111bfd8 <_Balloc>
8111e058:	1029883a 	mov	r20,r2
8111e05c:	10012d26 	beq	r2,zero,8111e514 <_strtod_r+0xc78>
8111e060:	d8c00817 	ldw	r3,32(sp)
8111e064:	d9400f17 	ldw	r5,60(sp)
8111e068:	11000304 	addi	r4,r2,12
8111e06c:	19800417 	ldw	r6,16(r3)
8111e070:	31800084 	addi	r6,r6,2
8111e074:	318d883a 	add	r6,r6,r6
8111e078:	318d883a 	add	r6,r6,r6
8111e07c:	11120c40 	call	811120c4 <memcpy>
8111e080:	d9000204 	addi	r4,sp,8
8111e084:	d9000015 	stw	r4,0(sp)
8111e088:	d9c00404 	addi	r7,sp,16
8111e08c:	900b883a 	mov	r5,r18
8111e090:	880d883a 	mov	r6,r17
8111e094:	8009883a 	mov	r4,r16
8111e098:	111ccb40 	call	8111ccb4 <__d2b>
8111e09c:	d8800515 	stw	r2,20(sp)
8111e0a0:	dc801115 	stw	r18,68(sp)
8111e0a4:	dc401015 	stw	r17,64(sp)
8111e0a8:	10027c26 	beq	r2,zero,8111ea9c <_strtod_r+0x1200>
8111e0ac:	01400044 	movi	r5,1
8111e0b0:	8009883a 	mov	r4,r16
8111e0b4:	111c3fc0 	call	8111c3fc <__i2b>
8111e0b8:	1027883a 	mov	r19,r2
8111e0bc:	10011526 	beq	r2,zero,8111e514 <_strtod_r+0xc78>
8111e0c0:	d8800417 	ldw	r2,16(sp)
8111e0c4:	1000c816 	blt	r2,zero,8111e3e8 <_strtod_r+0xb4c>
8111e0c8:	d9400c17 	ldw	r5,48(sp)
8111e0cc:	d9000a17 	ldw	r4,40(sp)
8111e0d0:	28ad883a 	add	r22,r5,r2
8111e0d4:	d9400917 	ldw	r5,36(sp)
8111e0d8:	df000217 	ldw	fp,8(sp)
8111e0dc:	05ff0084 	movi	r23,-1022
8111e0e0:	1147c83a 	sub	r3,r2,r5
8111e0e4:	1f07883a 	add	r3,r3,fp
8111e0e8:	00800d84 	movi	r2,54
8111e0ec:	18ffffc4 	addi	r3,r3,-1
8111e0f0:	1739c83a 	sub	fp,r2,fp
8111e0f4:	1dc0a50e 	bge	r3,r23,8111e38c <_strtod_r+0xaf0>
8111e0f8:	b8efc83a 	sub	r23,r23,r3
8111e0fc:	008007c4 	movi	r2,31
8111e100:	e5f9c83a 	sub	fp,fp,r23
8111e104:	15c0bc16 	blt	r2,r23,8111e3f8 <_strtod_r+0xb5c>
8111e108:	00800044 	movi	r2,1
8111e10c:	15c4983a 	sll	r2,r2,r23
8111e110:	d8000b15 	stw	zero,44(sp)
8111e114:	d8800d15 	stw	r2,52(sp)
8111e118:	2707883a 	add	r3,r4,fp
8111e11c:	d9000917 	ldw	r4,36(sp)
8111e120:	b739883a 	add	fp,r22,fp
8111e124:	20ef883a 	add	r23,r4,r3
8111e128:	b009883a 	mov	r4,r22
8111e12c:	e580010e 	bge	fp,r22,8111e134 <_strtod_r+0x898>
8111e130:	e009883a 	mov	r4,fp
8111e134:	b805883a 	mov	r2,r23
8111e138:	25c0010e 	bge	r4,r23,8111e140 <_strtod_r+0x8a4>
8111e13c:	2005883a 	mov	r2,r4
8111e140:	0080030e 	bge	zero,r2,8111e150 <_strtod_r+0x8b4>
8111e144:	e0b9c83a 	sub	fp,fp,r2
8111e148:	b8afc83a 	sub	r23,r23,r2
8111e14c:	b0adc83a 	sub	r22,r22,r2
8111e150:	d9400c17 	ldw	r5,48(sp)
8111e154:	28001126 	beq	r5,zero,8111e19c <_strtod_r+0x900>
8111e158:	280d883a 	mov	r6,r5
8111e15c:	8009883a 	mov	r4,r16
8111e160:	980b883a 	mov	r5,r19
8111e164:	111c6400 	call	8111c640 <__pow5mult>
8111e168:	1027883a 	mov	r19,r2
8111e16c:	1000e926 	beq	r2,zero,8111e514 <_strtod_r+0xc78>
8111e170:	d9800517 	ldw	r6,20(sp)
8111e174:	100b883a 	mov	r5,r2
8111e178:	8009883a 	mov	r4,r16
8111e17c:	111c4400 	call	8111c440 <__multiply>
8111e180:	1000e426 	beq	r2,zero,8111e514 <_strtod_r+0xc78>
8111e184:	d9400517 	ldw	r5,20(sp)
8111e188:	8009883a 	mov	r4,r16
8111e18c:	d8801315 	stw	r2,76(sp)
8111e190:	111c0880 	call	8111c088 <_Bfree>
8111e194:	d8801317 	ldw	r2,76(sp)
8111e198:	d8800515 	stw	r2,20(sp)
8111e19c:	0700060e 	bge	zero,fp,8111e1b8 <_strtod_r+0x91c>
8111e1a0:	d9400517 	ldw	r5,20(sp)
8111e1a4:	e00d883a 	mov	r6,fp
8111e1a8:	8009883a 	mov	r4,r16
8111e1ac:	111c7880 	call	8111c788 <__lshift>
8111e1b0:	d8800515 	stw	r2,20(sp)
8111e1b4:	10023926 	beq	r2,zero,8111ea9c <_strtod_r+0x1200>
8111e1b8:	d8800a17 	ldw	r2,40(sp)
8111e1bc:	10000626 	beq	r2,zero,8111e1d8 <_strtod_r+0x93c>
8111e1c0:	d9800a17 	ldw	r6,40(sp)
8111e1c4:	a00b883a 	mov	r5,r20
8111e1c8:	8009883a 	mov	r4,r16
8111e1cc:	111c6400 	call	8111c640 <__pow5mult>
8111e1d0:	1029883a 	mov	r20,r2
8111e1d4:	1000cf26 	beq	r2,zero,8111e514 <_strtod_r+0xc78>
8111e1d8:	05c0060e 	bge	zero,r23,8111e1f4 <_strtod_r+0x958>
8111e1dc:	a00b883a 	mov	r5,r20
8111e1e0:	b80d883a 	mov	r6,r23
8111e1e4:	8009883a 	mov	r4,r16
8111e1e8:	111c7880 	call	8111c788 <__lshift>
8111e1ec:	1029883a 	mov	r20,r2
8111e1f0:	1000c826 	beq	r2,zero,8111e514 <_strtod_r+0xc78>
8111e1f4:	0580060e 	bge	zero,r22,8111e210 <_strtod_r+0x974>
8111e1f8:	980b883a 	mov	r5,r19
8111e1fc:	b00d883a 	mov	r6,r22
8111e200:	8009883a 	mov	r4,r16
8111e204:	111c7880 	call	8111c788 <__lshift>
8111e208:	1027883a 	mov	r19,r2
8111e20c:	1000c126 	beq	r2,zero,8111e514 <_strtod_r+0xc78>
8111e210:	d9400517 	ldw	r5,20(sp)
8111e214:	a00d883a 	mov	r6,r20
8111e218:	8009883a 	mov	r4,r16
8111e21c:	111c9380 	call	8111c938 <__mdiff>
8111e220:	102b883a 	mov	r21,r2
8111e224:	1000bb26 	beq	r2,zero,8111e514 <_strtod_r+0xc78>
8111e228:	10c00317 	ldw	r3,12(r2)
8111e22c:	980b883a 	mov	r5,r19
8111e230:	10000315 	stw	zero,12(r2)
8111e234:	1009883a 	mov	r4,r2
8111e238:	d8c00e15 	stw	r3,56(sp)
8111e23c:	111c8d80 	call	8111c8d8 <__mcmp>
8111e240:	10027616 	blt	r2,zero,8111ec1c <_strtod_r+0x1380>
8111e244:	10024426 	beq	r2,zero,8111eb58 <_strtod_r+0x12bc>
8111e248:	980b883a 	mov	r5,r19
8111e24c:	a809883a 	mov	r4,r21
8111e250:	111ce080 	call	8111ce08 <__ratio>
8111e254:	000d883a 	mov	r6,zero
8111e258:	01d00034 	movhi	r7,16384
8111e25c:	1009883a 	mov	r4,r2
8111e260:	180b883a 	mov	r5,r3
8111e264:	102f883a 	mov	r23,r2
8111e268:	182d883a 	mov	r22,r3
8111e26c:	1125ab00 	call	81125ab0 <__ledf2>
8111e270:	00804a16 	blt	zero,r2,8111e39c <_strtod_r+0xb00>
8111e274:	d9400e17 	ldw	r5,56(sp)
8111e278:	28006b26 	beq	r5,zero,8111e428 <_strtod_r+0xb8c>
8111e27c:	058ffc34 	movhi	r22,16368
8111e280:	d8000b15 	stw	zero,44(sp)
8111e284:	d8000d15 	stw	zero,52(sp)
8111e288:	b02f883a 	mov	r23,r22
8111e28c:	8f1ffc2c 	andhi	fp,r17,32752
8111e290:	009ff834 	movhi	r2,32736
8111e294:	e080cd26 	beq	fp,r2,8111e5cc <_strtod_r+0xd30>
8111e298:	d9400917 	ldw	r5,36(sp)
8111e29c:	28001a26 	beq	r5,zero,8111e308 <_strtod_r+0xa6c>
8111e2a0:	0081a834 	movhi	r2,1696
8111e2a4:	17001836 	bltu	r2,fp,8111e308 <_strtod_r+0xa6c>
8111e2a8:	d9000d17 	ldw	r4,52(sp)
8111e2ac:	01d07834 	movhi	r7,16864
8111e2b0:	39ffffc4 	addi	r7,r7,-1
8111e2b4:	01bff034 	movhi	r6,65472
8111e2b8:	b80b883a 	mov	r5,r23
8111e2bc:	1125ab00 	call	81125ab0 <__ledf2>
8111e2c0:	00800e16 	blt	zero,r2,8111e2fc <_strtod_r+0xa60>
8111e2c4:	d9000d17 	ldw	r4,52(sp)
8111e2c8:	b80b883a 	mov	r5,r23
8111e2cc:	11238bc0 	call	811238bc <__fixunsdfsi>
8111e2d0:	10018126 	beq	r2,zero,8111e8d8 <_strtod_r+0x103c>
8111e2d4:	1009883a 	mov	r4,r2
8111e2d8:	112660c0 	call	8112660c <__floatunsidf>
8111e2dc:	d8800d15 	stw	r2,52(sp)
8111e2e0:	182f883a 	mov	r23,r3
8111e2e4:	d8800e17 	ldw	r2,56(sp)
8111e2e8:	1001791e 	bne	r2,zero,8111e8d0 <_strtod_r+0x1034>
8111e2ec:	ba20003c 	xorhi	r8,r23,32768
8111e2f0:	d8c00d17 	ldw	r3,52(sp)
8111e2f4:	402d883a 	mov	r22,r8
8111e2f8:	d8c00b15 	stw	r3,44(sp)
8111e2fc:	0081ac34 	movhi	r2,1712
8111e300:	b091883a 	add	r8,r22,r2
8111e304:	472dc83a 	sub	r22,r8,fp
8111e308:	9009883a 	mov	r4,r18
8111e30c:	880b883a 	mov	r5,r17
8111e310:	111cb3c0 	call	8111cb3c <__ulp>
8111e314:	d9000b17 	ldw	r4,44(sp)
8111e318:	b00b883a 	mov	r5,r22
8111e31c:	100d883a 	mov	r6,r2
8111e320:	180f883a 	mov	r7,r3
8111e324:	11105240 	call	81110524 <__muldf3>
8111e328:	900d883a 	mov	r6,r18
8111e32c:	880f883a 	mov	r7,r17
8111e330:	1009883a 	mov	r4,r2
8111e334:	180b883a 	mov	r5,r3
8111e338:	11247a80 	call	811247a8 <__adddf3>
8111e33c:	1025883a 	mov	r18,r2
8111e340:	1823883a 	mov	r17,r3
8111e344:	182d883a 	mov	r22,r3
8111e348:	d9000917 	ldw	r4,36(sp)
8111e34c:	2000021e 	bne	r4,zero,8111e358 <_strtod_r+0xabc>
8111e350:	b09ffc2c 	andhi	r2,r22,32752
8111e354:	e080be26 	beq	fp,r2,8111e650 <_strtod_r+0xdb4>
8111e358:	d9400517 	ldw	r5,20(sp)
8111e35c:	8009883a 	mov	r4,r16
8111e360:	111c0880 	call	8111c088 <_Bfree>
8111e364:	a00b883a 	mov	r5,r20
8111e368:	8009883a 	mov	r4,r16
8111e36c:	111c0880 	call	8111c088 <_Bfree>
8111e370:	980b883a 	mov	r5,r19
8111e374:	8009883a 	mov	r4,r16
8111e378:	111c0880 	call	8111c088 <_Bfree>
8111e37c:	a80b883a 	mov	r5,r21
8111e380:	8009883a 	mov	r4,r16
8111e384:	111c0880 	call	8111c088 <_Bfree>
8111e388:	003f2f06 	br	8111e048 <__reset+0xfb0fe048>
8111e38c:	00c00044 	movi	r3,1
8111e390:	d8000b15 	stw	zero,44(sp)
8111e394:	d8c00d15 	stw	r3,52(sp)
8111e398:	003f5f06 	br	8111e118 <__reset+0xfb0fe118>
8111e39c:	b809883a 	mov	r4,r23
8111e3a0:	000d883a 	mov	r6,zero
8111e3a4:	01cff834 	movhi	r7,16352
8111e3a8:	b00b883a 	mov	r5,r22
8111e3ac:	11105240 	call	81110524 <__muldf3>
8111e3b0:	d9000e17 	ldw	r4,56(sp)
8111e3b4:	d8800d15 	stw	r2,52(sp)
8111e3b8:	182f883a 	mov	r23,r3
8111e3bc:	2000181e 	bne	r4,zero,8111e420 <_strtod_r+0xb84>
8111e3c0:	1a20003c 	xorhi	r8,r3,32768
8111e3c4:	d8800b15 	stw	r2,44(sp)
8111e3c8:	402d883a 	mov	r22,r8
8111e3cc:	003faf06 	br	8111e28c <__reset+0xfb0fe28c>
8111e3d0:	0015883a 	mov	r10,zero
8111e3d4:	02c00044 	movi	r11,1
8111e3d8:	2800011e 	bne	r5,zero,8111e3e0 <_strtod_r+0xb44>
8111e3dc:	903d7e26 	beq	r18,zero,8111d9d8 <__reset+0xfb0fd9d8>
8111e3e0:	0013883a 	mov	r9,zero
8111e3e4:	003e4706 	br	8111dd04 <__reset+0xfb0fdd04>
8111e3e8:	d8c00a17 	ldw	r3,40(sp)
8111e3ec:	dd800c17 	ldw	r22,48(sp)
8111e3f0:	1889c83a 	sub	r4,r3,r2
8111e3f4:	003f3706 	br	8111e0d4 <__reset+0xfb0fe0d4>
8111e3f8:	00bef884 	movi	r2,-1054
8111e3fc:	05c00044 	movi	r23,1
8111e400:	10c5c83a 	sub	r2,r2,r3
8111e404:	b884983a 	sll	r2,r23,r2
8111e408:	ddc00d15 	stw	r23,52(sp)
8111e40c:	d8800b15 	stw	r2,44(sp)
8111e410:	003f4106 	br	8111e118 <__reset+0xfb0fe118>
8111e414:	ddc00615 	stw	r23,24(sp)
8111e418:	002b883a 	mov	r21,zero
8111e41c:	003dc306 	br	8111db2c <__reset+0xfb0fdb2c>
8111e420:	1811883a 	mov	r8,r3
8111e424:	003fe706 	br	8111e3c4 <__reset+0xfb0fe3c4>
8111e428:	90002e1e 	bne	r18,zero,8111e4e4 <_strtod_r+0xc48>
8111e42c:	00c00434 	movhi	r3,16
8111e430:	18ffffc4 	addi	r3,r3,-1
8111e434:	88c4703a 	and	r2,r17,r3
8111e438:	10002c1e 	bne	r2,zero,8111e4ec <_strtod_r+0xc50>
8111e43c:	000d883a 	mov	r6,zero
8111e440:	01cffc34 	movhi	r7,16368
8111e444:	b809883a 	mov	r4,r23
8111e448:	b00b883a 	mov	r5,r22
8111e44c:	1125ab00 	call	81125ab0 <__ledf2>
8111e450:	10021716 	blt	r2,zero,8111ecb0 <_strtod_r+0x1414>
8111e454:	b809883a 	mov	r4,r23
8111e458:	b00b883a 	mov	r5,r22
8111e45c:	000d883a 	mov	r6,zero
8111e460:	01cff834 	movhi	r7,16352
8111e464:	11105240 	call	81110524 <__muldf3>
8111e468:	d8800d15 	stw	r2,52(sp)
8111e46c:	182f883a 	mov	r23,r3
8111e470:	102d883a 	mov	r22,r2
8111e474:	1a20003c 	xorhi	r8,r3,32768
8111e478:	dd800b15 	stw	r22,44(sp)
8111e47c:	402d883a 	mov	r22,r8
8111e480:	003f8206 	br	8111e28c <__reset+0xfb0fe28c>
8111e484:	b013883a 	mov	r9,r22
8111e488:	000b883a 	mov	r5,zero
8111e48c:	0015883a 	mov	r10,zero
8111e490:	893ff404 	addi	r4,r17,-48
8111e494:	00800244 	movi	r2,9
8111e498:	11001036 	bltu	r2,r4,8111e4dc <_strtod_r+0xc40>
8111e49c:	28c00044 	addi	r3,r5,1
8111e4a0:	2023883a 	mov	r17,r4
8111e4a4:	20014d1e 	bne	r4,zero,8111e9dc <_strtod_r+0x1140>
8111e4a8:	d9800617 	ldw	r6,24(sp)
8111e4ac:	180b883a 	mov	r5,r3
8111e4b0:	30800044 	addi	r2,r6,1
8111e4b4:	d8800615 	stw	r2,24(sp)
8111e4b8:	34400047 	ldb	r17,1(r6)
8111e4bc:	003ff406 	br	8111e490 <__reset+0xfb0fe490>
8111e4c0:	0019883a 	mov	r12,zero
8111e4c4:	b8800084 	addi	r2,r23,2
8111e4c8:	d8800615 	stw	r2,24(sp)
8111e4cc:	bc400087 	ldb	r17,2(r23)
8111e4d0:	003e1606 	br	8111dd2c <__reset+0xfb0fdd2c>
8111e4d4:	03000044 	movi	r12,1
8111e4d8:	003ffa06 	br	8111e4c4 <__reset+0xfb0fe4c4>
8111e4dc:	02c00044 	movi	r11,1
8111e4e0:	003d8d06 	br	8111db18 <__reset+0xfb0fdb18>
8111e4e4:	00800044 	movi	r2,1
8111e4e8:	9080fe26 	beq	r18,r2,8111e8e4 <_strtod_r+0x1048>
8111e4ec:	d8000b15 	stw	zero,44(sp)
8111e4f0:	05affc34 	movhi	r22,49136
8111e4f4:	d8000d15 	stw	zero,52(sp)
8111e4f8:	05cffc34 	movhi	r23,16368
8111e4fc:	003f6306 	br	8111e28c <__reset+0xfb0fe28c>
8111e500:	d8000a15 	stw	zero,40(sp)
8111e504:	003ec906 	br	8111e02c <__reset+0xfb0fe02c>
8111e508:	d9001117 	ldw	r4,68(sp)
8111e50c:	00bfffc4 	movi	r2,-1
8111e510:	2080461e 	bne	r4,r2,8111e62c <_strtod_r+0xd90>
8111e514:	dd000a15 	stw	r20,40(sp)
8111e518:	dd001217 	ldw	r20,72(sp)
8111e51c:	a811883a 	mov	r8,r21
8111e520:	d8800517 	ldw	r2,20(sp)
8111e524:	00c00884 	movi	r3,34
8111e528:	80c00015 	stw	r3,0(r16)
8111e52c:	002b883a 	mov	r21,zero
8111e530:	059ffc34 	movhi	r22,32752
8111e534:	100b883a 	mov	r5,r2
8111e538:	8009883a 	mov	r4,r16
8111e53c:	da001315 	stw	r8,76(sp)
8111e540:	111c0880 	call	8111c088 <_Bfree>
8111e544:	d9400a17 	ldw	r5,40(sp)
8111e548:	8009883a 	mov	r4,r16
8111e54c:	111c0880 	call	8111c088 <_Bfree>
8111e550:	980b883a 	mov	r5,r19
8111e554:	8009883a 	mov	r4,r16
8111e558:	111c0880 	call	8111c088 <_Bfree>
8111e55c:	d9400817 	ldw	r5,32(sp)
8111e560:	8009883a 	mov	r4,r16
8111e564:	111c0880 	call	8111c088 <_Bfree>
8111e568:	da001317 	ldw	r8,76(sp)
8111e56c:	8009883a 	mov	r4,r16
8111e570:	400b883a 	mov	r5,r8
8111e574:	111c0880 	call	8111c088 <_Bfree>
8111e578:	003d9206 	br	8111dbc4 <__reset+0xfb0fdbc4>
8111e57c:	d8c00717 	ldw	r3,28(sp)
8111e580:	d8800504 	addi	r2,sp,20
8111e584:	01a04534 	movhi	r6,33044
8111e588:	31b71704 	addi	r6,r6,-9124
8111e58c:	d8c00115 	stw	r3,4(sp)
8111e590:	d8800015 	stw	r2,0(sp)
8111e594:	d9c00404 	addi	r7,sp,16
8111e598:	d9400604 	addi	r5,sp,24
8111e59c:	8009883a 	mov	r4,r16
8111e5a0:	11229f00 	call	811229f0 <__gethex>
8111e5a4:	154001cc 	andi	r21,r2,7
8111e5a8:	a83d9b26 	beq	r21,zero,8111dc18 <__reset+0xfb0fdc18>
8111e5ac:	00c00184 	movi	r3,6
8111e5b0:	a8c0d61e 	bne	r21,r3,8111e90c <_strtod_r+0x1070>
8111e5b4:	9cc00044 	addi	r19,r19,1
8111e5b8:	dcc00615 	stw	r19,24(sp)
8111e5bc:	002b883a 	mov	r21,zero
8111e5c0:	002d883a 	mov	r22,zero
8111e5c4:	d8000715 	stw	zero,28(sp)
8111e5c8:	003d7e06 	br	8111dbc4 <__reset+0xfb0fdbc4>
8111e5cc:	00bf2c34 	movhi	r2,64688
8111e5d0:	88a3883a 	add	r17,r17,r2
8111e5d4:	9009883a 	mov	r4,r18
8111e5d8:	880b883a 	mov	r5,r17
8111e5dc:	111cb3c0 	call	8111cb3c <__ulp>
8111e5e0:	d9000b17 	ldw	r4,44(sp)
8111e5e4:	100d883a 	mov	r6,r2
8111e5e8:	180f883a 	mov	r7,r3
8111e5ec:	b00b883a 	mov	r5,r22
8111e5f0:	11105240 	call	81110524 <__muldf3>
8111e5f4:	900d883a 	mov	r6,r18
8111e5f8:	180b883a 	mov	r5,r3
8111e5fc:	880f883a 	mov	r7,r17
8111e600:	1009883a 	mov	r4,r2
8111e604:	11247a80 	call	811247a8 <__adddf3>
8111e608:	015f2834 	movhi	r5,31904
8111e60c:	1025883a 	mov	r18,r2
8111e610:	297fffc4 	addi	r5,r5,-1
8111e614:	189ffc2c 	andhi	r2,r3,32752
8111e618:	2880892e 	bgeu	r5,r2,8111e840 <_strtod_r+0xfa4>
8111e61c:	d8801017 	ldw	r2,64(sp)
8111e620:	00dffc34 	movhi	r3,32752
8111e624:	18ffffc4 	addi	r3,r3,-1
8111e628:	10ffb726 	beq	r2,r3,8111e508 <__reset+0xfb0fe508>
8111e62c:	045ffc34 	movhi	r17,32752
8111e630:	8c7fffc4 	addi	r17,r17,-1
8111e634:	04bfffc4 	movi	r18,-1
8111e638:	003f4706 	br	8111e358 <__reset+0xfb0fe358>
8111e63c:	00800884 	movi	r2,34
8111e640:	80800015 	stw	r2,0(r16)
8111e644:	002b883a 	mov	r21,zero
8111e648:	059ffc34 	movhi	r22,32752
8111e64c:	003d5d06 	br	8111dbc4 <__reset+0xfb0fdbc4>
8111e650:	d9000d17 	ldw	r4,52(sp)
8111e654:	b80b883a 	mov	r5,r23
8111e658:	11264a80 	call	811264a8 <__fixdfsi>
8111e65c:	1009883a 	mov	r4,r2
8111e660:	11265280 	call	81126528 <__floatsidf>
8111e664:	d9000d17 	ldw	r4,52(sp)
8111e668:	b80b883a 	mov	r5,r23
8111e66c:	100d883a 	mov	r6,r2
8111e670:	180f883a 	mov	r7,r3
8111e674:	1125ba40 	call	81125ba4 <__subdf3>
8111e678:	d9400e17 	ldw	r5,56(sp)
8111e67c:	1039883a 	mov	fp,r2
8111e680:	182f883a 	mov	r23,r3
8111e684:	2800141e 	bne	r5,zero,8111e6d8 <_strtod_r+0xe3c>
8111e688:	9000131e 	bne	r18,zero,8111e6d8 <_strtod_r+0xe3c>
8111e68c:	00800434 	movhi	r2,16
8111e690:	10bfffc4 	addi	r2,r2,-1
8111e694:	b0ac703a 	and	r22,r22,r2
8111e698:	b0000f1e 	bne	r22,zero,8111e6d8 <_strtod_r+0xe3c>
8111e69c:	01a52834 	movhi	r6,38048
8111e6a0:	01cff434 	movhi	r7,16336
8111e6a4:	318d6544 	addi	r6,r6,13717
8111e6a8:	39ffffc4 	addi	r7,r7,-1
8111e6ac:	e009883a 	mov	r4,fp
8111e6b0:	180b883a 	mov	r5,r3
8111e6b4:	1125ab00 	call	81125ab0 <__ledf2>
8111e6b8:	103f270e 	bge	r2,zero,8111e358 <__reset+0xfb0fe358>
8111e6bc:	dd000a15 	stw	r20,40(sp)
8111e6c0:	a811883a 	mov	r8,r21
8111e6c4:	dd001217 	ldw	r20,72(sp)
8111e6c8:	d8800517 	ldw	r2,20(sp)
8111e6cc:	002b883a 	mov	r21,zero
8111e6d0:	882d883a 	mov	r22,r17
8111e6d4:	003f9706 	br	8111e534 <__reset+0xfb0fe534>
8111e6d8:	01a52834 	movhi	r6,38048
8111e6dc:	01cff834 	movhi	r7,16352
8111e6e0:	318d6544 	addi	r6,r6,13717
8111e6e4:	39ffffc4 	addi	r7,r7,-1
8111e6e8:	e009883a 	mov	r4,fp
8111e6ec:	b80b883a 	mov	r5,r23
8111e6f0:	1125ab00 	call	81125ab0 <__ledf2>
8111e6f4:	10000716 	blt	r2,zero,8111e714 <_strtod_r+0xe78>
8111e6f8:	018d6c34 	movhi	r6,13744
8111e6fc:	31b94d44 	addi	r6,r6,-6859
8111e700:	01cff834 	movhi	r7,16352
8111e704:	e009883a 	mov	r4,fp
8111e708:	b80b883a 	mov	r5,r23
8111e70c:	11259d40 	call	811259d4 <__gedf2>
8111e710:	00bf110e 	bge	zero,r2,8111e358 <__reset+0xfb0fe358>
8111e714:	dd000a15 	stw	r20,40(sp)
8111e718:	a811883a 	mov	r8,r21
8111e71c:	dd001217 	ldw	r20,72(sp)
8111e720:	d8800517 	ldw	r2,20(sp)
8111e724:	902b883a 	mov	r21,r18
8111e728:	882d883a 	mov	r22,r17
8111e72c:	003f8106 	br	8111e534 <__reset+0xfb0fe534>
8111e730:	b83e2f26 	beq	r23,zero,8111dff0 <__reset+0xfb0fdff0>
8111e734:	05efc83a 	sub	r23,zero,r23
8111e738:	b88003cc 	andi	r2,r23,15
8111e73c:	10000d26 	beq	r2,zero,8111e774 <_strtod_r+0xed8>
8111e740:	100490fa 	slli	r2,r2,3
8111e744:	00e04534 	movhi	r3,33044
8111e748:	18f6dc04 	addi	r3,r3,-9360
8111e74c:	1885883a 	add	r2,r3,r2
8111e750:	11800017 	ldw	r6,0(r2)
8111e754:	11c00117 	ldw	r7,4(r2)
8111e758:	9009883a 	mov	r4,r18
8111e75c:	880b883a 	mov	r5,r17
8111e760:	da401315 	stw	r9,76(sp)
8111e764:	112505c0 	call	8112505c <__divdf3>
8111e768:	da401317 	ldw	r9,76(sp)
8111e76c:	1025883a 	mov	r18,r2
8111e770:	1823883a 	mov	r17,r3
8111e774:	b82fd13a 	srai	r23,r23,4
8111e778:	b83e1d26 	beq	r23,zero,8111dff0 <__reset+0xfb0fdff0>
8111e77c:	008007c4 	movi	r2,31
8111e780:	15c02816 	blt	r2,r23,8111e824 <_strtod_r+0xf88>
8111e784:	b880040c 	andi	r2,r23,16
8111e788:	10019726 	beq	r2,zero,8111ede8 <_strtod_r+0x154c>
8111e78c:	05c1880e 	bge	zero,r23,8111edb0 <_strtod_r+0x1514>
8111e790:	00c01a84 	movi	r3,106
8111e794:	d8c00915 	stw	r3,36(sp)
8111e798:	04e04534 	movhi	r19,33044
8111e79c:	9cf71c04 	addi	r19,r19,-9104
8111e7a0:	8807883a 	mov	r3,r17
8111e7a4:	9005883a 	mov	r2,r18
8111e7a8:	8023883a 	mov	r17,r16
8111e7ac:	0009883a 	mov	r4,zero
8111e7b0:	9821883a 	mov	r16,r19
8111e7b4:	da400a15 	stw	r9,40(sp)
8111e7b8:	1827883a 	mov	r19,r3
8111e7bc:	b980004c 	andi	r6,r23,1
8111e7c0:	30000626 	beq	r6,zero,8111e7dc <_strtod_r+0xf40>
8111e7c4:	81800017 	ldw	r6,0(r16)
8111e7c8:	81c00117 	ldw	r7,4(r16)
8111e7cc:	1009883a 	mov	r4,r2
8111e7d0:	180b883a 	mov	r5,r3
8111e7d4:	11105240 	call	81110524 <__muldf3>
8111e7d8:	01000044 	movi	r4,1
8111e7dc:	b82fd07a 	srai	r23,r23,1
8111e7e0:	84000204 	addi	r16,r16,8
8111e7e4:	b83ff51e 	bne	r23,zero,8111e7bc <__reset+0xfb0fe7bc>
8111e7e8:	21003fcc 	andi	r4,r4,255
8111e7ec:	8821883a 	mov	r16,r17
8111e7f0:	da400a17 	ldw	r9,40(sp)
8111e7f4:	9823883a 	mov	r17,r19
8111e7f8:	2001a51e 	bne	r4,zero,8111ee90 <_strtod_r+0x15f4>
8111e7fc:	d9000917 	ldw	r4,36(sp)
8111e800:	20016d1e 	bne	r4,zero,8111edb8 <_strtod_r+0x151c>
8111e804:	000d883a 	mov	r6,zero
8111e808:	000f883a 	mov	r7,zero
8111e80c:	9009883a 	mov	r4,r18
8111e810:	880b883a 	mov	r5,r17
8111e814:	da401315 	stw	r9,76(sp)
8111e818:	112594c0 	call	8112594c <__eqdf2>
8111e81c:	da401317 	ldw	r9,76(sp)
8111e820:	103df41e 	bne	r2,zero,8111dff4 <__reset+0xfb0fdff4>
8111e824:	00800884 	movi	r2,34
8111e828:	80800015 	stw	r2,0(r16)
8111e82c:	002b883a 	mov	r21,zero
8111e830:	002d883a 	mov	r22,zero
8111e834:	003ce306 	br	8111dbc4 <__reset+0xfb0fdbc4>
8111e838:	055387c4 	movi	r21,19999
8111e83c:	003d6b06 	br	8111ddec <__reset+0xfb0fddec>
8111e840:	0440d434 	movhi	r17,848
8111e844:	1c63883a 	add	r17,r3,r17
8111e848:	882d883a 	mov	r22,r17
8111e84c:	003ebe06 	br	8111e348 <__reset+0xfb0fe348>
8111e850:	14403fcc 	andi	r17,r2,255
8111e854:	8c40201c 	xori	r17,r17,128
8111e858:	8c7fe004 	addi	r17,r17,-128
8111e85c:	dd400817 	ldw	r21,32(sp)
8111e860:	0027883a 	mov	r19,zero
8111e864:	0039883a 	mov	fp,zero
8111e868:	002d883a 	mov	r22,zero
8111e86c:	003c9906 	br	8111dad4 <__reset+0xfb0fdad4>
8111e870:	00c00944 	movi	r3,37
8111e874:	1a47c83a 	sub	r3,r3,r9
8111e878:	1d7d8c16 	blt	r3,r21,8111deac <__reset+0xfb0fdeac>
8111e87c:	1261c83a 	sub	r16,r2,r9
8111e880:	800490fa 	slli	r2,r16,3
8111e884:	04e04534 	movhi	r19,33044
8111e888:	9cf6dc04 	addi	r19,r19,-9360
8111e88c:	9885883a 	add	r2,r19,r2
8111e890:	11000017 	ldw	r4,0(r2)
8111e894:	11400117 	ldw	r5,4(r2)
8111e898:	900d883a 	mov	r6,r18
8111e89c:	880f883a 	mov	r7,r17
8111e8a0:	11105240 	call	81110524 <__muldf3>
8111e8a4:	ac0dc83a 	sub	r6,r21,r16
8111e8a8:	300c90fa 	slli	r6,r6,3
8111e8ac:	1009883a 	mov	r4,r2
8111e8b0:	180b883a 	mov	r5,r3
8111e8b4:	9985883a 	add	r2,r19,r6
8111e8b8:	11800017 	ldw	r6,0(r2)
8111e8bc:	11c00117 	ldw	r7,4(r2)
8111e8c0:	11105240 	call	81110524 <__muldf3>
8111e8c4:	102b883a 	mov	r21,r2
8111e8c8:	182d883a 	mov	r22,r3
8111e8cc:	003cbd06 	br	8111dbc4 <__reset+0xfb0fdbc4>
8111e8d0:	b811883a 	mov	r8,r23
8111e8d4:	003e8606 	br	8111e2f0 <__reset+0xfb0fe2f0>
8111e8d8:	d8000d15 	stw	zero,52(sp)
8111e8dc:	05cffc34 	movhi	r23,16368
8111e8e0:	003e8006 	br	8111e2e4 <__reset+0xfb0fe2e4>
8111e8e4:	883f011e 	bne	r17,zero,8111e4ec <__reset+0xfb0fe4ec>
8111e8e8:	dd000a15 	stw	r20,40(sp)
8111e8ec:	dd001217 	ldw	r20,72(sp)
8111e8f0:	a811883a 	mov	r8,r21
8111e8f4:	00800884 	movi	r2,34
8111e8f8:	80800015 	stw	r2,0(r16)
8111e8fc:	002b883a 	mov	r21,zero
8111e900:	d8800517 	ldw	r2,20(sp)
8111e904:	002d883a 	mov	r22,zero
8111e908:	003f0a06 	br	8111e534 <__reset+0xfb0fe534>
8111e90c:	d9800517 	ldw	r6,20(sp)
8111e910:	30000826 	beq	r6,zero,8111e934 <_strtod_r+0x1098>
8111e914:	01400d44 	movi	r5,53
8111e918:	d9000204 	addi	r4,sp,8
8111e91c:	d8801315 	stw	r2,76(sp)
8111e920:	111cf300 	call	8111cf30 <__copybits>
8111e924:	d9400517 	ldw	r5,20(sp)
8111e928:	8009883a 	mov	r4,r16
8111e92c:	111c0880 	call	8111c088 <_Bfree>
8111e930:	d8801317 	ldw	r2,76(sp)
8111e934:	00c00184 	movi	r3,6
8111e938:	1d400f36 	bltu	r3,r21,8111e978 <_strtod_r+0x10dc>
8111e93c:	a82a90ba 	slli	r21,r21,2
8111e940:	00e044b4 	movhi	r3,33042
8111e944:	18fa5504 	addi	r3,r3,-5804
8111e948:	a8eb883a 	add	r21,r21,r3
8111e94c:	a8c00017 	ldw	r3,0(r21)
8111e950:	1800683a 	jmp	r3
8111e954:	8111e9d0 	cmplti	r4,r16,18343
8111e958:	8111e9a8 	cmpgeui	r4,r16,18342
8111e95c:	8111e98c 	andi	r4,r16,18342
8111e960:	8111e970 	cmpltui	r4,r16,18341
8111e964:	8111e998 	cmpnei	r4,r16,18342
8111e968:	8111e9a8 	cmpgeui	r4,r16,18342
8111e96c:	8111e9d0 	cmplti	r4,r16,18343
8111e970:	045ffc34 	movhi	r17,32752
8111e974:	0025883a 	mov	r18,zero
8111e978:	1080020c 	andi	r2,r2,8
8111e97c:	902b883a 	mov	r21,r18
8111e980:	103c8f26 	beq	r2,zero,8111dbc0 <__reset+0xfb0fdbc0>
8111e984:	8da00034 	orhi	r22,r17,32768
8111e988:	003c8e06 	br	8111dbc4 <__reset+0xfb0fdbc4>
8111e98c:	dc800217 	ldw	r18,8(sp)
8111e990:	dc400317 	ldw	r17,12(sp)
8111e994:	003ff806 	br	8111e978 <__reset+0xfb0fe978>
8111e998:	04600034 	movhi	r17,32768
8111e99c:	8c7fffc4 	addi	r17,r17,-1
8111e9a0:	04bfffc4 	movi	r18,-1
8111e9a4:	003ff406 	br	8111e978 <__reset+0xfb0fe978>
8111e9a8:	d8c00417 	ldw	r3,16(sp)
8111e9ac:	dc400317 	ldw	r17,12(sp)
8111e9b0:	013ffc34 	movhi	r4,65520
8111e9b4:	18c10cc4 	addi	r3,r3,1075
8111e9b8:	1806953a 	slli	r3,r3,20
8111e9bc:	213fffc4 	addi	r4,r4,-1
8111e9c0:	8922703a 	and	r17,r17,r4
8111e9c4:	dc800217 	ldw	r18,8(sp)
8111e9c8:	88e2b03a 	or	r17,r17,r3
8111e9cc:	003fea06 	br	8111e978 <__reset+0xfb0fe978>
8111e9d0:	0023883a 	mov	r17,zero
8111e9d4:	0025883a 	mov	r18,zero
8111e9d8:	003fe706 	br	8111e978 <__reset+0xfb0fe978>
8111e9dc:	01800044 	movi	r6,1
8111e9e0:	50d5883a 	add	r10,r10,r3
8111e9e4:	2a4b883a 	add	r5,r5,r9
8111e9e8:	19811a26 	beq	r3,r6,8111ee54 <_strtod_r+0x15b8>
8111e9ec:	01800204 	movi	r6,8
8111e9f0:	01c00404 	movi	r7,16
8111e9f4:	4a400044 	addi	r9,r9,1
8111e9f8:	48bfffc4 	addi	r2,r9,-1
8111e9fc:	30801616 	blt	r6,r2,8111ea58 <_strtod_r+0x11bc>
8111ea00:	e70002a4 	muli	fp,fp,10
8111ea04:	497ffb1e 	bne	r9,r5,8111e9f4 <__reset+0xfb0fe9f4>
8111ea08:	d9800617 	ldw	r6,24(sp)
8111ea0c:	4a400044 	addi	r9,r9,1
8111ea10:	00c00204 	movi	r3,8
8111ea14:	19400c0e 	bge	r3,r5,8111ea48 <_strtod_r+0x11ac>
8111ea18:	00800404 	movi	r2,16
8111ea1c:	000b883a 	mov	r5,zero
8111ea20:	127ea316 	blt	r2,r9,8111e4b0 <__reset+0xfb0fe4b0>
8111ea24:	988002a4 	muli	r2,r19,10
8111ea28:	20a7883a 	add	r19,r4,r2
8111ea2c:	003ea006 	br	8111e4b0 <__reset+0xfb0fe4b0>
8111ea30:	d8800617 	ldw	r2,24(sp)
8111ea34:	8c7ff404 	addi	r17,r17,-48
8111ea38:	2a800044 	addi	r10,r5,1
8111ea3c:	d8800815 	stw	r2,32(sp)
8111ea40:	100d883a 	mov	r6,r2
8111ea44:	02400044 	movi	r9,1
8111ea48:	e08002a4 	muli	r2,fp,10
8111ea4c:	000b883a 	mov	r5,zero
8111ea50:	88b9883a 	add	fp,r17,r2
8111ea54:	003e9606 	br	8111e4b0 <__reset+0xfb0fe4b0>
8111ea58:	3a7fea16 	blt	r7,r9,8111ea04 <__reset+0xfb0fea04>
8111ea5c:	9cc002a4 	muli	r19,r19,10
8111ea60:	003fe806 	br	8111ea04 <__reset+0xfb0fea04>
8111ea64:	00bffa84 	movi	r2,-22
8111ea68:	a8bd1016 	blt	r21,r2,8111deac <__reset+0xfb0fdeac>
8111ea6c:	a82a90fa 	slli	r21,r21,3
8111ea70:	00a04534 	movhi	r2,33044
8111ea74:	10b6dc04 	addi	r2,r2,-9360
8111ea78:	1545c83a 	sub	r2,r2,r21
8111ea7c:	11800017 	ldw	r6,0(r2)
8111ea80:	11c00117 	ldw	r7,4(r2)
8111ea84:	9009883a 	mov	r4,r18
8111ea88:	880b883a 	mov	r5,r17
8111ea8c:	112505c0 	call	8112505c <__divdf3>
8111ea90:	102b883a 	mov	r21,r2
8111ea94:	182d883a 	mov	r22,r3
8111ea98:	003c4a06 	br	8111dbc4 <__reset+0xfb0fdbc4>
8111ea9c:	dd000a15 	stw	r20,40(sp)
8111eaa0:	a811883a 	mov	r8,r21
8111eaa4:	dd001217 	ldw	r20,72(sp)
8111eaa8:	003e9e06 	br	8111e524 <__reset+0xfb0fe524>
8111eaac:	01604534 	movhi	r5,33044
8111eab0:	d9000617 	ldw	r4,24(sp)
8111eab4:	29770e04 	addi	r5,r5,-9160
8111eab8:	01c00644 	movi	r7,25
8111eabc:	00000b06 	br	8111eaec <_strtod_r+0x1250>
8111eac0:	21000044 	addi	r4,r4,1
8111eac4:	20800003 	ldbu	r2,0(r4)
8111eac8:	10ffefc4 	addi	r3,r2,-65
8111eacc:	10803fcc 	andi	r2,r2,255
8111ead0:	1080201c 	xori	r2,r2,128
8111ead4:	18c03fcc 	andi	r3,r3,255
8111ead8:	10bfe004 	addi	r2,r2,-128
8111eadc:	38c00136 	bltu	r7,r3,8111eae4 <_strtod_r+0x1248>
8111eae0:	10800804 	addi	r2,r2,32
8111eae4:	29400044 	addi	r5,r5,1
8111eae8:	11bbbb1e 	bne	r2,r6,8111d9d8 <__reset+0xfb0fd9d8>
8111eaec:	29800007 	ldb	r6,0(r5)
8111eaf0:	303ff31e 	bne	r6,zero,8111eac0 <__reset+0xfb0feac0>
8111eaf4:	01a04534 	movhi	r6,33044
8111eaf8:	d9000615 	stw	r4,24(sp)
8111eafc:	31b70f04 	addi	r6,r6,-9156
8111eb00:	200b883a 	mov	r5,r4
8111eb04:	02000644 	movi	r8,25
8111eb08:	00000a06 	br	8111eb34 <_strtod_r+0x1298>
8111eb0c:	28800003 	ldbu	r2,0(r5)
8111eb10:	10ffefc4 	addi	r3,r2,-65
8111eb14:	10803fcc 	andi	r2,r2,255
8111eb18:	1080201c 	xori	r2,r2,128
8111eb1c:	18c03fcc 	andi	r3,r3,255
8111eb20:	10bfe004 	addi	r2,r2,-128
8111eb24:	40c00136 	bltu	r8,r3,8111eb2c <_strtod_r+0x1290>
8111eb28:	10800804 	addi	r2,r2,32
8111eb2c:	31800044 	addi	r6,r6,1
8111eb30:	11c0711e 	bne	r2,r7,8111ecf8 <_strtod_r+0x145c>
8111eb34:	31c00007 	ldb	r7,0(r6)
8111eb38:	29400044 	addi	r5,r5,1
8111eb3c:	383ff31e 	bne	r7,zero,8111eb0c <__reset+0xfb0feb0c>
8111eb40:	d9400615 	stw	r5,24(sp)
8111eb44:	045ffc34 	movhi	r17,32752
8111eb48:	0025883a 	mov	r18,zero
8111eb4c:	003c1b06 	br	8111dbbc <__reset+0xfb0fdbbc>
8111eb50:	000b883a 	mov	r5,zero
8111eb54:	003ccc06 	br	8111de88 <__reset+0xfb0fde88>
8111eb58:	d9400e17 	ldw	r5,56(sp)
8111eb5c:	dd000a15 	stw	r20,40(sp)
8111eb60:	00800434 	movhi	r2,16
8111eb64:	a811883a 	mov	r8,r21
8111eb68:	dd001217 	ldw	r20,72(sp)
8111eb6c:	dd401117 	ldw	r21,68(sp)
8111eb70:	dd801017 	ldw	r22,64(sp)
8111eb74:	10bfffc4 	addi	r2,r2,-1
8111eb78:	28005626 	beq	r5,zero,8111ecd4 <_strtod_r+0x1438>
8111eb7c:	8886703a 	and	r3,r17,r2
8111eb80:	18807826 	beq	r3,r2,8111ed64 <_strtod_r+0x14c8>
8111eb84:	d8c00b17 	ldw	r3,44(sp)
8111eb88:	18005726 	beq	r3,zero,8111ece8 <_strtod_r+0x144c>
8111eb8c:	1c44703a 	and	r2,r3,r17
8111eb90:	10000f26 	beq	r2,zero,8111ebd0 <_strtod_r+0x1334>
8111eb94:	d9000e17 	ldw	r4,56(sp)
8111eb98:	d9800917 	ldw	r6,36(sp)
8111eb9c:	20005e26 	beq	r4,zero,8111ed18 <_strtod_r+0x147c>
8111eba0:	9009883a 	mov	r4,r18
8111eba4:	880b883a 	mov	r5,r17
8111eba8:	da001315 	stw	r8,76(sp)
8111ebac:	111d8300 	call	8111d830 <sulp>
8111ebb0:	100d883a 	mov	r6,r2
8111ebb4:	180f883a 	mov	r7,r3
8111ebb8:	9009883a 	mov	r4,r18
8111ebbc:	880b883a 	mov	r5,r17
8111ebc0:	11247a80 	call	811247a8 <__adddf3>
8111ebc4:	da001317 	ldw	r8,76(sp)
8111ebc8:	102b883a 	mov	r21,r2
8111ebcc:	182d883a 	mov	r22,r3
8111ebd0:	d8c00917 	ldw	r3,36(sp)
8111ebd4:	18000f26 	beq	r3,zero,8111ec14 <_strtod_r+0x1378>
8111ebd8:	a809883a 	mov	r4,r21
8111ebdc:	b00b883a 	mov	r5,r22
8111ebe0:	000d883a 	mov	r6,zero
8111ebe4:	01ce5434 	movhi	r7,14672
8111ebe8:	da001315 	stw	r8,76(sp)
8111ebec:	11105240 	call	81110524 <__muldf3>
8111ebf0:	102b883a 	mov	r21,r2
8111ebf4:	182d883a 	mov	r22,r3
8111ebf8:	da001317 	ldw	r8,76(sp)
8111ebfc:	1800051e 	bne	r3,zero,8111ec14 <_strtod_r+0x1378>
8111ec00:	d8800517 	ldw	r2,20(sp)
8111ec04:	a83e4b1e 	bne	r21,zero,8111e534 <__reset+0xfb0fe534>
8111ec08:	00c00884 	movi	r3,34
8111ec0c:	80c00015 	stw	r3,0(r16)
8111ec10:	003e4806 	br	8111e534 <__reset+0xfb0fe534>
8111ec14:	d8800517 	ldw	r2,20(sp)
8111ec18:	003e4606 	br	8111e534 <__reset+0xfb0fe534>
8111ec1c:	d9000e17 	ldw	r4,56(sp)
8111ec20:	dd000a15 	stw	r20,40(sp)
8111ec24:	a811883a 	mov	r8,r21
8111ec28:	dd001217 	ldw	r20,72(sp)
8111ec2c:	dd401117 	ldw	r21,68(sp)
8111ec30:	dd801017 	ldw	r22,64(sp)
8111ec34:	203fe61e 	bne	r4,zero,8111ebd0 <__reset+0xfb0febd0>
8111ec38:	903fe51e 	bne	r18,zero,8111ebd0 <__reset+0xfb0febd0>
8111ec3c:	00800434 	movhi	r2,16
8111ec40:	10bfffc4 	addi	r2,r2,-1
8111ec44:	8884703a 	and	r2,r17,r2
8111ec48:	103fe11e 	bne	r2,zero,8111ebd0 <__reset+0xfb0febd0>
8111ec4c:	8ddffc2c 	andhi	r23,r17,32752
8111ec50:	0081ac34 	movhi	r2,1712
8111ec54:	15ffde2e 	bgeu	r2,r23,8111ebd0 <__reset+0xfb0febd0>
8111ec58:	40800517 	ldw	r2,20(r8)
8111ec5c:	1000031e 	bne	r2,zero,8111ec6c <_strtod_r+0x13d0>
8111ec60:	40800417 	ldw	r2,16(r8)
8111ec64:	00c00044 	movi	r3,1
8111ec68:	18bfd90e 	bge	r3,r2,8111ebd0 <__reset+0xfb0febd0>
8111ec6c:	400b883a 	mov	r5,r8
8111ec70:	01800044 	movi	r6,1
8111ec74:	8009883a 	mov	r4,r16
8111ec78:	111c7880 	call	8111c788 <__lshift>
8111ec7c:	980b883a 	mov	r5,r19
8111ec80:	1009883a 	mov	r4,r2
8111ec84:	d8801315 	stw	r2,76(sp)
8111ec88:	111c8d80 	call	8111c8d8 <__mcmp>
8111ec8c:	da001317 	ldw	r8,76(sp)
8111ec90:	00bfcf0e 	bge	zero,r2,8111ebd0 <__reset+0xfb0febd0>
8111ec94:	d8c00917 	ldw	r3,36(sp)
8111ec98:	18005c26 	beq	r3,zero,8111ee0c <_strtod_r+0x1570>
8111ec9c:	0081ac34 	movhi	r2,1712
8111eca0:	15c05a16 	blt	r2,r23,8111ee0c <_strtod_r+0x1570>
8111eca4:	0080dc34 	movhi	r2,880
8111eca8:	15ffcb16 	blt	r2,r23,8111ebd8 <__reset+0xfb0febd8>
8111ecac:	003f1106 	br	8111e8f4 <__reset+0xfb0fe8f4>
8111ecb0:	002d883a 	mov	r22,zero
8111ecb4:	022ff834 	movhi	r8,49120
8111ecb8:	d8000d15 	stw	zero,52(sp)
8111ecbc:	05cff834 	movhi	r23,16352
8111ecc0:	003ded06 	br	8111e478 <__reset+0xfb0fe478>
8111ecc4:	0440d434 	movhi	r17,848
8111ecc8:	1c63883a 	add	r17,r3,r17
8111eccc:	d8000915 	stw	zero,36(sp)
8111ecd0:	003cc806 	br	8111dff4 <__reset+0xfb0fdff4>
8111ecd4:	8884703a 	and	r2,r17,r2
8111ecd8:	103faa1e 	bne	r2,zero,8111eb84 <__reset+0xfb0feb84>
8111ecdc:	903fa91e 	bne	r18,zero,8111eb84 <__reset+0xfb0feb84>
8111ece0:	8ddffc2c 	andhi	r23,r17,32752
8111ece4:	003feb06 	br	8111ec94 <__reset+0xfb0fec94>
8111ece8:	d8c00d17 	ldw	r3,52(sp)
8111ecec:	1cae703a 	and	r23,r3,r18
8111ecf0:	b83fb726 	beq	r23,zero,8111ebd0 <__reset+0xfb0febd0>
8111ecf4:	003fa706 	br	8111eb94 <__reset+0xfb0feb94>
8111ecf8:	21000044 	addi	r4,r4,1
8111ecfc:	d9000615 	stw	r4,24(sp)
8111ed00:	003f9006 	br	8111eb44 <__reset+0xfb0feb44>
8111ed04:	01604534 	movhi	r5,33044
8111ed08:	2976d204 	addi	r5,r5,-9400
8111ed0c:	d9400915 	stw	r5,36(sp)
8111ed10:	0027883a 	mov	r19,zero
8111ed14:	003ca206 	br	8111dfa0 <__reset+0xfb0fdfa0>
8111ed18:	9009883a 	mov	r4,r18
8111ed1c:	880b883a 	mov	r5,r17
8111ed20:	da001315 	stw	r8,76(sp)
8111ed24:	111d8300 	call	8111d830 <sulp>
8111ed28:	100d883a 	mov	r6,r2
8111ed2c:	180f883a 	mov	r7,r3
8111ed30:	9009883a 	mov	r4,r18
8111ed34:	880b883a 	mov	r5,r17
8111ed38:	1125ba40 	call	81125ba4 <__subdf3>
8111ed3c:	000d883a 	mov	r6,zero
8111ed40:	000f883a 	mov	r7,zero
8111ed44:	1009883a 	mov	r4,r2
8111ed48:	180b883a 	mov	r5,r3
8111ed4c:	102b883a 	mov	r21,r2
8111ed50:	182d883a 	mov	r22,r3
8111ed54:	112594c0 	call	8112594c <__eqdf2>
8111ed58:	da001317 	ldw	r8,76(sp)
8111ed5c:	103ee526 	beq	r2,zero,8111e8f4 <__reset+0xfb0fe8f4>
8111ed60:	003f9b06 	br	8111ebd0 <__reset+0xfb0febd0>
8111ed64:	d8800917 	ldw	r2,36(sp)
8111ed68:	10002226 	beq	r2,zero,8111edf4 <_strtod_r+0x1558>
8111ed6c:	889ffc2c 	andhi	r2,r17,32752
8111ed70:	00c1a834 	movhi	r3,1696
8111ed74:	18801f36 	bltu	r3,r2,8111edf4 <_strtod_r+0x1558>
8111ed78:	1004d53a 	srli	r2,r2,20
8111ed7c:	00c01ac4 	movi	r3,107
8111ed80:	1887c83a 	sub	r3,r3,r2
8111ed84:	00bfffc4 	movi	r2,-1
8111ed88:	10c4983a 	sll	r2,r2,r3
8111ed8c:	14bf7d1e 	bne	r2,r18,8111eb84 <__reset+0xfb0feb84>
8111ed90:	00dffc34 	movhi	r3,32752
8111ed94:	18ffffc4 	addi	r3,r3,-1
8111ed98:	88c03526 	beq	r17,r3,8111ee70 <_strtod_r+0x15d4>
8111ed9c:	8c5ffc2c 	andhi	r17,r17,32752
8111eda0:	00800434 	movhi	r2,16
8111eda4:	002b883a 	mov	r21,zero
8111eda8:	88ad883a 	add	r22,r17,r2
8111edac:	003f8806 	br	8111ebd0 <__reset+0xfb0febd0>
8111edb0:	01401a84 	movi	r5,106
8111edb4:	d9400915 	stw	r5,36(sp)
8111edb8:	8ddffc2c 	andhi	r23,r17,32752
8111edbc:	b82ed53a 	srli	r23,r23,20
8111edc0:	00801ac4 	movi	r2,107
8111edc4:	15c5c83a 	sub	r2,r2,r23
8111edc8:	00be8e0e 	bge	zero,r2,8111e804 <__reset+0xfb0fe804>
8111edcc:	00c007c4 	movi	r3,31
8111edd0:	18800a0e 	bge	r3,r2,8111edfc <_strtod_r+0x1560>
8111edd4:	00c00d04 	movi	r3,52
8111edd8:	0025883a 	mov	r18,zero
8111eddc:	1880270e 	bge	r3,r2,8111ee7c <_strtod_r+0x15e0>
8111ede0:	0440dc34 	movhi	r17,880
8111ede4:	003e8706 	br	8111e804 <__reset+0xfb0fe804>
8111ede8:	d8000915 	stw	zero,36(sp)
8111edec:	05fe6a16 	blt	zero,r23,8111e798 <__reset+0xfb0fe798>
8111edf0:	003e8406 	br	8111e804 <__reset+0xfb0fe804>
8111edf4:	00bfffc4 	movi	r2,-1
8111edf8:	003fe406 	br	8111ed8c <__reset+0xfb0fed8c>
8111edfc:	00ffffc4 	movi	r3,-1
8111ee00:	1884983a 	sll	r2,r3,r2
8111ee04:	14a4703a 	and	r18,r2,r18
8111ee08:	003e7e06 	br	8111e804 <__reset+0xfb0fe804>
8111ee0c:	00bffc34 	movhi	r2,65520
8111ee10:	b8af883a 	add	r23,r23,r2
8111ee14:	057fffc4 	movi	r21,-1
8111ee18:	00800434 	movhi	r2,16
8111ee1c:	1545883a 	add	r2,r2,r21
8111ee20:	b8acb03a 	or	r22,r23,r2
8111ee24:	003f6a06 	br	8111ebd0 <__reset+0xfb0febd0>
8111ee28:	01604534 	movhi	r5,33044
8111ee2c:	29771204 	addi	r5,r5,-9144
8111ee30:	d9800204 	addi	r6,sp,8
8111ee34:	d9000604 	addi	r4,sp,24
8111ee38:	11232280 	call	81123228 <__hexnan>
8111ee3c:	00c00144 	movi	r3,5
8111ee40:	10fb5c1e 	bne	r2,r3,8111dbb4 <__reset+0xfb0fdbb4>
8111ee44:	dc400317 	ldw	r17,12(sp)
8111ee48:	dc800217 	ldw	r18,8(sp)
8111ee4c:	8c5ffc34 	orhi	r17,r17,32752
8111ee50:	003b5a06 	br	8111dbbc <__reset+0xfb0fdbbc>
8111ee54:	480b883a 	mov	r5,r9
8111ee58:	d9800617 	ldw	r6,24(sp)
8111ee5c:	4a400044 	addi	r9,r9,1
8111ee60:	003eeb06 	br	8111ea10 <__reset+0xfb0fea10>
8111ee64:	1025883a 	mov	r18,r2
8111ee68:	1823883a 	mov	r17,r3
8111ee6c:	003c4c06 	br	8111dfa0 <__reset+0xfb0fdfa0>
8111ee70:	00ffffc4 	movi	r3,-1
8111ee74:	10ffc91e 	bne	r2,r3,8111ed9c <__reset+0xfb0fed9c>
8111ee78:	003da906 	br	8111e520 <__reset+0xfb0fe520>
8111ee7c:	10bff804 	addi	r2,r2,-32
8111ee80:	00ffffc4 	movi	r3,-1
8111ee84:	1884983a 	sll	r2,r3,r2
8111ee88:	1462703a 	and	r17,r2,r17
8111ee8c:	003e5d06 	br	8111e804 <__reset+0xfb0fe804>
8111ee90:	1025883a 	mov	r18,r2
8111ee94:	1823883a 	mov	r17,r3
8111ee98:	003e5806 	br	8111e7fc <__reset+0xfb0fe7fc>

8111ee9c <strtod>:
8111ee9c:	00a04534 	movhi	r2,33044
8111eea0:	10bf9d04 	addi	r2,r2,-396
8111eea4:	280d883a 	mov	r6,r5
8111eea8:	200b883a 	mov	r5,r4
8111eeac:	11000017 	ldw	r4,0(r2)
8111eeb0:	111d89c1 	jmpi	8111d89c <_strtod_r>

8111eeb4 <strtof>:
8111eeb4:	defffb04 	addi	sp,sp,-20
8111eeb8:	de00012e 	bgeu	sp,et,8111eec0 <strtof+0xc>
8111eebc:	003b68fa 	trap	3
8111eec0:	dcc00315 	stw	r19,12(sp)
8111eec4:	04e04534 	movhi	r19,33044
8111eec8:	9cff9d04 	addi	r19,r19,-396
8111eecc:	280d883a 	mov	r6,r5
8111eed0:	200b883a 	mov	r5,r4
8111eed4:	99000017 	ldw	r4,0(r19)
8111eed8:	dfc00415 	stw	ra,16(sp)
8111eedc:	dc800215 	stw	r18,8(sp)
8111eee0:	dc400115 	stw	r17,4(sp)
8111eee4:	dc000015 	stw	r16,0(sp)
8111eee8:	111d89c0 	call	8111d89c <_strtod_r>
8111eeec:	1009883a 	mov	r4,r2
8111eef0:	180b883a 	mov	r5,r3
8111eef4:	1025883a 	mov	r18,r2
8111eef8:	1823883a 	mov	r17,r3
8111eefc:	1110d5c0 	call	81110d5c <__truncdfsf2>
8111ef00:	000b883a 	mov	r5,zero
8111ef04:	1009883a 	mov	r4,r2
8111ef08:	1021883a 	mov	r16,r2
8111ef0c:	11245ac0 	call	811245ac <__eqsf2>
8111ef10:	1000111e 	bne	r2,zero,8111ef58 <strtof+0xa4>
8111ef14:	000d883a 	mov	r6,zero
8111ef18:	000f883a 	mov	r7,zero
8111ef1c:	9009883a 	mov	r4,r18
8111ef20:	880b883a 	mov	r5,r17
8111ef24:	112594c0 	call	8112594c <__eqdf2>
8111ef28:	10000b26 	beq	r2,zero,8111ef58 <strtof+0xa4>
8111ef2c:	98800017 	ldw	r2,0(r19)
8111ef30:	00c00884 	movi	r3,34
8111ef34:	10c00015 	stw	r3,0(r2)
8111ef38:	8005883a 	mov	r2,r16
8111ef3c:	dfc00417 	ldw	ra,16(sp)
8111ef40:	dcc00317 	ldw	r19,12(sp)
8111ef44:	dc800217 	ldw	r18,8(sp)
8111ef48:	dc400117 	ldw	r17,4(sp)
8111ef4c:	dc000017 	ldw	r16,0(sp)
8111ef50:	dec00504 	addi	sp,sp,20
8111ef54:	f800283a 	ret
8111ef58:	015fe034 	movhi	r5,32640
8111ef5c:	297fffc4 	addi	r5,r5,-1
8111ef60:	8009883a 	mov	r4,r16
8111ef64:	11246240 	call	81124624 <__gesf2>
8111ef68:	0080070e 	bge	zero,r2,8111ef88 <strtof+0xd4>
8111ef6c:	01dffc34 	movhi	r7,32752
8111ef70:	39ffffc4 	addi	r7,r7,-1
8111ef74:	01bfffc4 	movi	r6,-1
8111ef78:	9009883a 	mov	r4,r18
8111ef7c:	880b883a 	mov	r5,r17
8111ef80:	11259d40 	call	811259d4 <__gedf2>
8111ef84:	00bfe90e 	bge	zero,r2,8111ef2c <__reset+0xfb0fef2c>
8111ef88:	017fe034 	movhi	r5,65408
8111ef8c:	297fffc4 	addi	r5,r5,-1
8111ef90:	8009883a 	mov	r4,r16
8111ef94:	11246e00 	call	811246e0 <__lesf2>
8111ef98:	103fe70e 	bge	r2,zero,8111ef38 <__reset+0xfb0fef38>
8111ef9c:	01fffc34 	movhi	r7,65520
8111efa0:	39ffffc4 	addi	r7,r7,-1
8111efa4:	01bfffc4 	movi	r6,-1
8111efa8:	9009883a 	mov	r4,r18
8111efac:	880b883a 	mov	r5,r17
8111efb0:	1125ab00 	call	81125ab0 <__ledf2>
8111efb4:	103fdd0e 	bge	r2,zero,8111ef2c <__reset+0xfb0fef2c>
8111efb8:	003fdf06 	br	8111ef38 <__reset+0xfb0fef38>

8111efbc <_strtoll_r>:
8111efbc:	00a04534 	movhi	r2,33044
8111efc0:	defff304 	addi	sp,sp,-52
8111efc4:	10bf9b04 	addi	r2,r2,-404
8111efc8:	de00012e 	bgeu	sp,et,8111efd0 <_strtoll_r+0x14>
8111efcc:	003b68fa 	trap	3
8111efd0:	dc800515 	stw	r18,20(sp)
8111efd4:	14800017 	ldw	r18,0(r2)
8111efd8:	dd800915 	stw	r22,36(sp)
8111efdc:	dd400815 	stw	r21,32(sp)
8111efe0:	dcc00615 	stw	r19,24(sp)
8111efe4:	d9000015 	stw	r4,0(sp)
8111efe8:	dfc00c15 	stw	ra,48(sp)
8111efec:	df000b15 	stw	fp,44(sp)
8111eff0:	ddc00a15 	stw	r23,40(sp)
8111eff4:	dd000715 	stw	r20,28(sp)
8111eff8:	dc400415 	stw	r17,16(sp)
8111effc:	dc000315 	stw	r16,12(sp)
8111f000:	282d883a 	mov	r22,r5
8111f004:	302b883a 	mov	r21,r6
8111f008:	3827883a 	mov	r19,r7
8111f00c:	2809883a 	mov	r4,r5
8111f010:	24000003 	ldbu	r16,0(r4)
8111f014:	24400044 	addi	r17,r4,1
8111f018:	2007883a 	mov	r3,r4
8111f01c:	9405883a 	add	r2,r18,r16
8111f020:	10800043 	ldbu	r2,1(r2)
8111f024:	8809883a 	mov	r4,r17
8111f028:	1080020c 	andi	r2,r2,8
8111f02c:	103ff81e 	bne	r2,zero,8111f010 <__reset+0xfb0ff010>
8111f030:	00800b44 	movi	r2,45
8111f034:	80807826 	beq	r16,r2,8111f218 <_strtoll_r+0x25c>
8111f038:	00800ac4 	movi	r2,43
8111f03c:	80807a26 	beq	r16,r2,8111f228 <_strtoll_r+0x26c>
8111f040:	0039883a 	mov	fp,zero
8111f044:	98004e26 	beq	r19,zero,8111f180 <_strtoll_r+0x1c4>
8111f048:	00800404 	movi	r2,16
8111f04c:	98808226 	beq	r19,r2,8111f258 <_strtoll_r+0x29c>
8111f050:	982fd7fa 	srai	r23,r19,31
8111f054:	9829883a 	mov	r20,r19
8111f058:	e0004f26 	beq	fp,zero,8111f198 <_strtoll_r+0x1dc>
8111f05c:	0017883a 	mov	r11,zero
8111f060:	02a00034 	movhi	r10,32768
8111f064:	5809883a 	mov	r4,r11
8111f068:	500b883a 	mov	r5,r10
8111f06c:	a00d883a 	mov	r6,r20
8111f070:	b80f883a 	mov	r7,r23
8111f074:	da800215 	stw	r10,8(sp)
8111f078:	dac00115 	stw	r11,4(sp)
8111f07c:	1123eb80 	call	81123eb8 <__umoddi3>
8111f080:	dac00117 	ldw	r11,4(sp)
8111f084:	da800217 	ldw	r10,8(sp)
8111f088:	a00d883a 	mov	r6,r20
8111f08c:	5809883a 	mov	r4,r11
8111f090:	500b883a 	mov	r5,r10
8111f094:	b80f883a 	mov	r7,r23
8111f098:	d8800115 	stw	r2,4(sp)
8111f09c:	11239380 	call	81123938 <__udivdi3>
8111f0a0:	9409883a 	add	r4,r18,r16
8111f0a4:	21000043 	ldbu	r4,1(r4)
8111f0a8:	1019883a 	mov	r12,r2
8111f0ac:	880b883a 	mov	r5,r17
8111f0b0:	2240010c 	andi	r9,r4,4
8111f0b4:	0015883a 	mov	r10,zero
8111f0b8:	000d883a 	mov	r6,zero
8111f0bc:	000f883a 	mov	r7,zero
8111f0c0:	03400044 	movi	r13,1
8111f0c4:	02ffffc4 	movi	r11,-1
8111f0c8:	da000117 	ldw	r8,4(sp)
8111f0cc:	48000d26 	beq	r9,zero,8111f104 <_strtoll_r+0x148>
8111f0d0:	843ff404 	addi	r16,r16,-48
8111f0d4:	84c0110e 	bge	r16,r19,8111f11c <_strtoll_r+0x160>
8111f0d8:	52c00426 	beq	r10,r11,8111f0ec <_strtoll_r+0x130>
8111f0dc:	19c00236 	bltu	r3,r7,8111f0e8 <_strtoll_r+0x12c>
8111f0e0:	38c0311e 	bne	r7,r3,8111f1a8 <_strtoll_r+0x1ec>
8111f0e4:	6180302e 	bgeu	r12,r6,8111f1a8 <_strtoll_r+0x1ec>
8111f0e8:	02bfffc4 	movi	r10,-1
8111f0ec:	2c000003 	ldbu	r16,0(r5)
8111f0f0:	29400044 	addi	r5,r5,1
8111f0f4:	9409883a 	add	r4,r18,r16
8111f0f8:	21000043 	ldbu	r4,1(r4)
8111f0fc:	2240010c 	andi	r9,r4,4
8111f100:	483ff31e 	bne	r9,zero,8111f0d0 <__reset+0xfb0ff0d0>
8111f104:	210000cc 	andi	r4,r4,3
8111f108:	20000426 	beq	r4,zero,8111f11c <_strtoll_r+0x160>
8111f10c:	23403426 	beq	r4,r13,8111f1e0 <_strtoll_r+0x224>
8111f110:	008015c4 	movi	r2,87
8111f114:	80a1c83a 	sub	r16,r16,r2
8111f118:	84ffef16 	blt	r16,r19,8111f0d8 <__reset+0xfb0ff0d8>
8111f11c:	00bfffc4 	movi	r2,-1
8111f120:	50803426 	beq	r10,r2,8111f1f4 <_strtoll_r+0x238>
8111f124:	e0000426 	beq	fp,zero,8111f138 <_strtoll_r+0x17c>
8111f128:	018dc83a 	sub	r6,zero,r6
8111f12c:	3004c03a 	cmpne	r2,r6,zero
8111f130:	01e1c83a 	sub	r16,zero,r7
8111f134:	808fc83a 	sub	r7,r16,r2
8111f138:	3005883a 	mov	r2,r6
8111f13c:	3807883a 	mov	r3,r7
8111f140:	a8000326 	beq	r21,zero,8111f150 <_strtoll_r+0x194>
8111f144:	5000321e 	bne	r10,zero,8111f210 <_strtoll_r+0x254>
8111f148:	b00b883a 	mov	r5,r22
8111f14c:	a9400015 	stw	r5,0(r21)
8111f150:	dfc00c17 	ldw	ra,48(sp)
8111f154:	df000b17 	ldw	fp,44(sp)
8111f158:	ddc00a17 	ldw	r23,40(sp)
8111f15c:	dd800917 	ldw	r22,36(sp)
8111f160:	dd400817 	ldw	r21,32(sp)
8111f164:	dd000717 	ldw	r20,28(sp)
8111f168:	dcc00617 	ldw	r19,24(sp)
8111f16c:	dc800517 	ldw	r18,20(sp)
8111f170:	dc400417 	ldw	r17,16(sp)
8111f174:	dc000317 	ldw	r16,12(sp)
8111f178:	dec00d04 	addi	sp,sp,52
8111f17c:	f800283a 	ret
8111f180:	00800c04 	movi	r2,48
8111f184:	80802c26 	beq	r16,r2,8111f238 <_strtoll_r+0x27c>
8111f188:	05000284 	movi	r20,10
8111f18c:	002f883a 	mov	r23,zero
8111f190:	a027883a 	mov	r19,r20
8111f194:	e03fb11e 	bne	fp,zero,8111f05c <__reset+0xfb0ff05c>
8111f198:	02a00034 	movhi	r10,32768
8111f19c:	52bfffc4 	addi	r10,r10,-1
8111f1a0:	02ffffc4 	movi	r11,-1
8111f1a4:	003faf06 	br	8111f064 <__reset+0xfb0ff064>
8111f1a8:	33000f26 	beq	r6,r12,8111f1e8 <_strtoll_r+0x22c>
8111f1ac:	b985383a 	mul	r2,r23,r6
8111f1b0:	3d0f383a 	mul	r7,r7,r20
8111f1b4:	3508383a 	mulxuu	r4,r6,r20
8111f1b8:	350d383a 	mul	r6,r6,r20
8111f1bc:	8013d7fa 	srai	r9,r16,31
8111f1c0:	388f883a 	add	r7,r7,r2
8111f1c4:	818d883a 	add	r6,r16,r6
8111f1c8:	390f883a 	add	r7,r7,r4
8111f1cc:	3421803a 	cmpltu	r16,r6,r16
8111f1d0:	49cf883a 	add	r7,r9,r7
8111f1d4:	81cf883a 	add	r7,r16,r7
8111f1d8:	02800044 	movi	r10,1
8111f1dc:	003fc306 	br	8111f0ec <__reset+0xfb0ff0ec>
8111f1e0:	00800dc4 	movi	r2,55
8111f1e4:	003fcb06 	br	8111f114 <__reset+0xfb0ff114>
8111f1e8:	38fff01e 	bne	r7,r3,8111f1ac <__reset+0xfb0ff1ac>
8111f1ec:	443fbe16 	blt	r8,r16,8111f0e8 <__reset+0xfb0ff0e8>
8111f1f0:	003fee06 	br	8111f1ac <__reset+0xfb0ff1ac>
8111f1f4:	e0002426 	beq	fp,zero,8111f288 <_strtoll_r+0x2cc>
8111f1f8:	0005883a 	mov	r2,zero
8111f1fc:	00e00034 	movhi	r3,32768
8111f200:	d9800017 	ldw	r6,0(sp)
8111f204:	01000884 	movi	r4,34
8111f208:	31000015 	stw	r4,0(r6)
8111f20c:	a83fd026 	beq	r21,zero,8111f150 <__reset+0xfb0ff150>
8111f210:	297fffc4 	addi	r5,r5,-1
8111f214:	003fcd06 	br	8111f14c <__reset+0xfb0ff14c>
8111f218:	1c400084 	addi	r17,r3,2
8111f21c:	1c000043 	ldbu	r16,1(r3)
8111f220:	07000044 	movi	fp,1
8111f224:	003f8706 	br	8111f044 <__reset+0xfb0ff044>
8111f228:	1c400084 	addi	r17,r3,2
8111f22c:	1c000043 	ldbu	r16,1(r3)
8111f230:	0039883a 	mov	fp,zero
8111f234:	003f8306 	br	8111f044 <__reset+0xfb0ff044>
8111f238:	88800003 	ldbu	r2,0(r17)
8111f23c:	00c01604 	movi	r3,88
8111f240:	108037cc 	andi	r2,r2,223
8111f244:	10c00a26 	beq	r2,r3,8111f270 <_strtoll_r+0x2b4>
8111f248:	05000204 	movi	r20,8
8111f24c:	002f883a 	mov	r23,zero
8111f250:	a027883a 	mov	r19,r20
8111f254:	003f8006 	br	8111f058 <__reset+0xfb0ff058>
8111f258:	00800c04 	movi	r2,48
8111f25c:	80800e1e 	bne	r16,r2,8111f298 <_strtoll_r+0x2dc>
8111f260:	88800003 	ldbu	r2,0(r17)
8111f264:	00c01604 	movi	r3,88
8111f268:	108037cc 	andi	r2,r2,223
8111f26c:	10c00a1e 	bne	r2,r3,8111f298 <_strtoll_r+0x2dc>
8111f270:	05000404 	movi	r20,16
8111f274:	8c000043 	ldbu	r16,1(r17)
8111f278:	002f883a 	mov	r23,zero
8111f27c:	8c400084 	addi	r17,r17,2
8111f280:	a027883a 	mov	r19,r20
8111f284:	003f7406 	br	8111f058 <__reset+0xfb0ff058>
8111f288:	00e00034 	movhi	r3,32768
8111f28c:	18ffffc4 	addi	r3,r3,-1
8111f290:	5005883a 	mov	r2,r10
8111f294:	003fda06 	br	8111f200 <__reset+0xfb0ff200>
8111f298:	9829883a 	mov	r20,r19
8111f29c:	002f883a 	mov	r23,zero
8111f2a0:	003f6d06 	br	8111f058 <__reset+0xfb0ff058>

8111f2a4 <_strtoul_r>:
8111f2a4:	00a04534 	movhi	r2,33044
8111f2a8:	defff604 	addi	sp,sp,-40
8111f2ac:	10bf9b04 	addi	r2,r2,-404
8111f2b0:	de00012e 	bgeu	sp,et,8111f2b8 <_strtoul_r+0x14>
8111f2b4:	003b68fa 	trap	3
8111f2b8:	dc800315 	stw	r18,12(sp)
8111f2bc:	14800017 	ldw	r18,0(r2)
8111f2c0:	dd400615 	stw	r21,24(sp)
8111f2c4:	dd000515 	stw	r20,20(sp)
8111f2c8:	dcc00415 	stw	r19,16(sp)
8111f2cc:	2029883a 	mov	r20,r4
8111f2d0:	dfc00915 	stw	ra,36(sp)
8111f2d4:	ddc00815 	stw	r23,32(sp)
8111f2d8:	dd800715 	stw	r22,28(sp)
8111f2dc:	dc400215 	stw	r17,8(sp)
8111f2e0:	dc000115 	stw	r16,4(sp)
8111f2e4:	2827883a 	mov	r19,r5
8111f2e8:	382b883a 	mov	r21,r7
8111f2ec:	2809883a 	mov	r4,r5
8111f2f0:	24000003 	ldbu	r16,0(r4)
8111f2f4:	24400044 	addi	r17,r4,1
8111f2f8:	2007883a 	mov	r3,r4
8111f2fc:	9405883a 	add	r2,r18,r16
8111f300:	10800043 	ldbu	r2,1(r2)
8111f304:	8809883a 	mov	r4,r17
8111f308:	1080020c 	andi	r2,r2,8
8111f30c:	103ff81e 	bne	r2,zero,8111f2f0 <__reset+0xfb0ff2f0>
8111f310:	00800b44 	movi	r2,45
8111f314:	80805326 	beq	r16,r2,8111f464 <_strtoul_r+0x1c0>
8111f318:	00800ac4 	movi	r2,43
8111f31c:	80805526 	beq	r16,r2,8111f474 <_strtoul_r+0x1d0>
8111f320:	002f883a 	mov	r23,zero
8111f324:	a8000f26 	beq	r21,zero,8111f364 <_strtoul_r+0xc0>
8111f328:	00800404 	movi	r2,16
8111f32c:	a8805f26 	beq	r21,r2,8111f4ac <_strtoul_r+0x208>
8111f330:	013fffc4 	movi	r4,-1
8111f334:	a80b883a 	mov	r5,r21
8111f338:	d9800015 	stw	r6,0(sp)
8111f33c:	11244f00 	call	811244f0 <__udivsi3>
8111f340:	a80b883a 	mov	r5,r21
8111f344:	013fffc4 	movi	r4,-1
8111f348:	102d883a 	mov	r22,r2
8111f34c:	11245540 	call	81124554 <__umodsi3>
8111f350:	d9800017 	ldw	r6,0(sp)
8111f354:	1019883a 	mov	r12,r2
8111f358:	a817883a 	mov	r11,r21
8111f35c:	b00f883a 	mov	r7,r22
8111f360:	00000706 	br	8111f380 <_strtoul_r+0xdc>
8111f364:	00800c04 	movi	r2,48
8111f368:	80804626 	beq	r16,r2,8111f484 <_strtoul_r+0x1e0>
8111f36c:	05400284 	movi	r21,10
8111f370:	01c666b4 	movhi	r7,6554
8111f374:	03000144 	movi	r12,5
8111f378:	39e66644 	addi	r7,r7,-26215
8111f37c:	a817883a 	mov	r11,r21
8111f380:	9407883a 	add	r3,r18,r16
8111f384:	18c00043 	ldbu	r3,1(r3)
8111f388:	8809883a 	mov	r4,r17
8111f38c:	0011883a 	mov	r8,zero
8111f390:	1940010c 	andi	r5,r3,4
8111f394:	0005883a 	mov	r2,zero
8111f398:	02800044 	movi	r10,1
8111f39c:	027fffc4 	movi	r9,-1
8111f3a0:	28000e26 	beq	r5,zero,8111f3dc <_strtoul_r+0x138>
8111f3a4:	843ff404 	addi	r16,r16,-48
8111f3a8:	8540120e 	bge	r16,r21,8111f3f4 <_strtoul_r+0x150>
8111f3ac:	42400526 	beq	r8,r9,8111f3c4 <_strtoul_r+0x120>
8111f3b0:	38802236 	bltu	r7,r2,8111f43c <_strtoul_r+0x198>
8111f3b4:	11c02026 	beq	r2,r7,8111f438 <_strtoul_r+0x194>
8111f3b8:	12c5383a 	mul	r2,r2,r11
8111f3bc:	02000044 	movi	r8,1
8111f3c0:	8085883a 	add	r2,r16,r2
8111f3c4:	24000003 	ldbu	r16,0(r4)
8111f3c8:	21000044 	addi	r4,r4,1
8111f3cc:	9407883a 	add	r3,r18,r16
8111f3d0:	18c00043 	ldbu	r3,1(r3)
8111f3d4:	1940010c 	andi	r5,r3,4
8111f3d8:	283ff21e 	bne	r5,zero,8111f3a4 <__reset+0xfb0ff3a4>
8111f3dc:	18c000cc 	andi	r3,r3,3
8111f3e0:	18000426 	beq	r3,zero,8111f3f4 <_strtoul_r+0x150>
8111f3e4:	1a801726 	beq	r3,r10,8111f444 <_strtoul_r+0x1a0>
8111f3e8:	00c015c4 	movi	r3,87
8111f3ec:	80e1c83a 	sub	r16,r16,r3
8111f3f0:	857fee16 	blt	r16,r21,8111f3ac <__reset+0xfb0ff3ac>
8111f3f4:	40001516 	blt	r8,zero,8111f44c <_strtoul_r+0x1a8>
8111f3f8:	b8000126 	beq	r23,zero,8111f400 <_strtoul_r+0x15c>
8111f3fc:	0085c83a 	sub	r2,zero,r2
8111f400:	30000226 	beq	r6,zero,8111f40c <_strtoul_r+0x168>
8111f404:	4000151e 	bne	r8,zero,8111f45c <_strtoul_r+0x1b8>
8111f408:	34c00015 	stw	r19,0(r6)
8111f40c:	dfc00917 	ldw	ra,36(sp)
8111f410:	ddc00817 	ldw	r23,32(sp)
8111f414:	dd800717 	ldw	r22,28(sp)
8111f418:	dd400617 	ldw	r21,24(sp)
8111f41c:	dd000517 	ldw	r20,20(sp)
8111f420:	dcc00417 	ldw	r19,16(sp)
8111f424:	dc800317 	ldw	r18,12(sp)
8111f428:	dc400217 	ldw	r17,8(sp)
8111f42c:	dc000117 	ldw	r16,4(sp)
8111f430:	dec00a04 	addi	sp,sp,40
8111f434:	f800283a 	ret
8111f438:	643fdf0e 	bge	r12,r16,8111f3b8 <__reset+0xfb0ff3b8>
8111f43c:	023fffc4 	movi	r8,-1
8111f440:	003fe006 	br	8111f3c4 <__reset+0xfb0ff3c4>
8111f444:	00c00dc4 	movi	r3,55
8111f448:	003fe806 	br	8111f3ec <__reset+0xfb0ff3ec>
8111f44c:	00800884 	movi	r2,34
8111f450:	a0800015 	stw	r2,0(r20)
8111f454:	00bfffc4 	movi	r2,-1
8111f458:	303fec26 	beq	r6,zero,8111f40c <__reset+0xfb0ff40c>
8111f45c:	24ffffc4 	addi	r19,r4,-1
8111f460:	003fe906 	br	8111f408 <__reset+0xfb0ff408>
8111f464:	1c400084 	addi	r17,r3,2
8111f468:	1c000043 	ldbu	r16,1(r3)
8111f46c:	05c00044 	movi	r23,1
8111f470:	003fac06 	br	8111f324 <__reset+0xfb0ff324>
8111f474:	1c400084 	addi	r17,r3,2
8111f478:	1c000043 	ldbu	r16,1(r3)
8111f47c:	002f883a 	mov	r23,zero
8111f480:	003fa806 	br	8111f324 <__reset+0xfb0ff324>
8111f484:	88800003 	ldbu	r2,0(r17)
8111f488:	00c01604 	movi	r3,88
8111f48c:	108037cc 	andi	r2,r2,223
8111f490:	10c00c26 	beq	r2,r3,8111f4c4 <_strtoul_r+0x220>
8111f494:	05400204 	movi	r21,8
8111f498:	01c80034 	movhi	r7,8192
8111f49c:	030001c4 	movi	r12,7
8111f4a0:	39ffffc4 	addi	r7,r7,-1
8111f4a4:	a817883a 	mov	r11,r21
8111f4a8:	003fb506 	br	8111f380 <__reset+0xfb0ff380>
8111f4ac:	00800c04 	movi	r2,48
8111f4b0:	80800c1e 	bne	r16,r2,8111f4e4 <_strtoul_r+0x240>
8111f4b4:	88800003 	ldbu	r2,0(r17)
8111f4b8:	00c01604 	movi	r3,88
8111f4bc:	108037cc 	andi	r2,r2,223
8111f4c0:	10c0081e 	bne	r2,r3,8111f4e4 <_strtoul_r+0x240>
8111f4c4:	02c00404 	movi	r11,16
8111f4c8:	05840034 	movhi	r22,4096
8111f4cc:	8c000043 	ldbu	r16,1(r17)
8111f4d0:	030003c4 	movi	r12,15
8111f4d4:	8c400084 	addi	r17,r17,2
8111f4d8:	b5bfffc4 	addi	r22,r22,-1
8111f4dc:	582b883a 	mov	r21,r11
8111f4e0:	003f9e06 	br	8111f35c <__reset+0xfb0ff35c>
8111f4e4:	01c40034 	movhi	r7,4096
8111f4e8:	030003c4 	movi	r12,15
8111f4ec:	39ffffc4 	addi	r7,r7,-1
8111f4f0:	a817883a 	mov	r11,r21
8111f4f4:	003fa206 	br	8111f380 <__reset+0xfb0ff380>

8111f4f8 <strtoul>:
8111f4f8:	00a04534 	movhi	r2,33044
8111f4fc:	10bf9d04 	addi	r2,r2,-396
8111f500:	300f883a 	mov	r7,r6
8111f504:	280d883a 	mov	r6,r5
8111f508:	200b883a 	mov	r5,r4
8111f50c:	11000017 	ldw	r4,0(r2)
8111f510:	111f2a41 	jmpi	8111f2a4 <_strtoul_r>

8111f514 <_strtoull_r>:
8111f514:	00a04534 	movhi	r2,33044
8111f518:	defff404 	addi	sp,sp,-48
8111f51c:	10bf9b04 	addi	r2,r2,-404
8111f520:	de00012e 	bgeu	sp,et,8111f528 <_strtoull_r+0x14>
8111f524:	003b68fa 	trap	3
8111f528:	dc400315 	stw	r17,12(sp)
8111f52c:	14400017 	ldw	r17,0(r2)
8111f530:	dd400715 	stw	r21,28(sp)
8111f534:	dd000615 	stw	r20,24(sp)
8111f538:	dcc00515 	stw	r19,20(sp)
8111f53c:	dc800415 	stw	r18,16(sp)
8111f540:	dfc00b15 	stw	ra,44(sp)
8111f544:	df000a15 	stw	fp,40(sp)
8111f548:	ddc00915 	stw	r23,36(sp)
8111f54c:	dd800815 	stw	r22,32(sp)
8111f550:	dc000215 	stw	r16,8(sp)
8111f554:	2827883a 	mov	r19,r5
8111f558:	202b883a 	mov	r21,r4
8111f55c:	3029883a 	mov	r20,r6
8111f560:	3825883a 	mov	r18,r7
8111f564:	2807883a 	mov	r3,r5
8111f568:	1c000003 	ldbu	r16,0(r3)
8111f56c:	1f000044 	addi	fp,r3,1
8111f570:	1809883a 	mov	r4,r3
8111f574:	8c05883a 	add	r2,r17,r16
8111f578:	10800043 	ldbu	r2,1(r2)
8111f57c:	e007883a 	mov	r3,fp
8111f580:	1080020c 	andi	r2,r2,8
8111f584:	103ff81e 	bne	r2,zero,8111f568 <__reset+0xfb0ff568>
8111f588:	00800b44 	movi	r2,45
8111f58c:	80806e26 	beq	r16,r2,8111f748 <_strtoull_r+0x234>
8111f590:	00800ac4 	movi	r2,43
8111f594:	80807026 	beq	r16,r2,8111f758 <_strtoull_r+0x244>
8111f598:	002f883a 	mov	r23,zero
8111f59c:	90001426 	beq	r18,zero,8111f5f0 <_strtoull_r+0xdc>
8111f5a0:	00800404 	movi	r2,16
8111f5a4:	90807c26 	beq	r18,r2,8111f798 <_strtoull_r+0x284>
8111f5a8:	902dd7fa 	srai	r22,r18,31
8111f5ac:	013fffc4 	movi	r4,-1
8111f5b0:	200b883a 	mov	r5,r4
8111f5b4:	900d883a 	mov	r6,r18
8111f5b8:	b00f883a 	mov	r7,r22
8111f5bc:	11239380 	call	81123938 <__udivdi3>
8111f5c0:	013fffc4 	movi	r4,-1
8111f5c4:	900d883a 	mov	r6,r18
8111f5c8:	b00f883a 	mov	r7,r22
8111f5cc:	200b883a 	mov	r5,r4
8111f5d0:	d8c00115 	stw	r3,4(sp)
8111f5d4:	d8800015 	stw	r2,0(sp)
8111f5d8:	1123eb80 	call	81123eb8 <__umoddi3>
8111f5dc:	101b883a 	mov	r13,r2
8111f5e0:	9015883a 	mov	r10,r18
8111f5e4:	dac00017 	ldw	r11,0(sp)
8111f5e8:	da000117 	ldw	r8,4(sp)
8111f5ec:	00000a06 	br	8111f618 <_strtoull_r+0x104>
8111f5f0:	00800c04 	movi	r2,48
8111f5f4:	80805c26 	beq	r16,r2,8111f768 <_strtoull_r+0x254>
8111f5f8:	02800284 	movi	r10,10
8111f5fc:	02e666b4 	movhi	r11,39322
8111f600:	020666b4 	movhi	r8,6554
8111f604:	03400144 	movi	r13,5
8111f608:	5ae66644 	addi	r11,r11,-26215
8111f60c:	42266644 	addi	r8,r8,-26215
8111f610:	002d883a 	mov	r22,zero
8111f614:	5025883a 	mov	r18,r10
8111f618:	8c0b883a 	add	r5,r17,r16
8111f61c:	29400043 	ldbu	r5,1(r5)
8111f620:	e009883a 	mov	r4,fp
8111f624:	000f883a 	mov	r7,zero
8111f628:	2980010c 	andi	r6,r5,4
8111f62c:	0005883a 	mov	r2,zero
8111f630:	0007883a 	mov	r3,zero
8111f634:	03000044 	movi	r12,1
8111f638:	027fffc4 	movi	r9,-1
8111f63c:	30000d26 	beq	r6,zero,8111f674 <_strtoull_r+0x160>
8111f640:	843ff404 	addi	r16,r16,-48
8111f644:	8480110e 	bge	r16,r18,8111f68c <_strtoull_r+0x178>
8111f648:	3a400426 	beq	r7,r9,8111f65c <_strtoull_r+0x148>
8111f64c:	40c00236 	bltu	r8,r3,8111f658 <_strtoull_r+0x144>
8111f650:	1a00231e 	bne	r3,r8,8111f6e0 <_strtoull_r+0x1cc>
8111f654:	5880222e 	bgeu	r11,r2,8111f6e0 <_strtoull_r+0x1cc>
8111f658:	01ffffc4 	movi	r7,-1
8111f65c:	24000003 	ldbu	r16,0(r4)
8111f660:	21000044 	addi	r4,r4,1
8111f664:	8c0b883a 	add	r5,r17,r16
8111f668:	29400043 	ldbu	r5,1(r5)
8111f66c:	2980010c 	andi	r6,r5,4
8111f670:	303ff31e 	bne	r6,zero,8111f640 <__reset+0xfb0ff640>
8111f674:	294000cc 	andi	r5,r5,3
8111f678:	28000426 	beq	r5,zero,8111f68c <_strtoull_r+0x178>
8111f67c:	2b002626 	beq	r5,r12,8111f718 <_strtoull_r+0x204>
8111f680:	014015c4 	movi	r5,87
8111f684:	8161c83a 	sub	r16,r16,r5
8111f688:	84bfef16 	blt	r16,r18,8111f648 <__reset+0xfb0ff648>
8111f68c:	38002716 	blt	r7,zero,8111f72c <_strtoull_r+0x218>
8111f690:	b8000426 	beq	r23,zero,8111f6a4 <_strtoull_r+0x190>
8111f694:	0085c83a 	sub	r2,zero,r2
8111f698:	100ac03a 	cmpne	r5,r2,zero
8111f69c:	00e1c83a 	sub	r16,zero,r3
8111f6a0:	8147c83a 	sub	r3,r16,r5
8111f6a4:	a0000226 	beq	r20,zero,8111f6b0 <_strtoull_r+0x19c>
8111f6a8:	3800251e 	bne	r7,zero,8111f740 <_strtoull_r+0x22c>
8111f6ac:	a4c00015 	stw	r19,0(r20)
8111f6b0:	dfc00b17 	ldw	ra,44(sp)
8111f6b4:	df000a17 	ldw	fp,40(sp)
8111f6b8:	ddc00917 	ldw	r23,36(sp)
8111f6bc:	dd800817 	ldw	r22,32(sp)
8111f6c0:	dd400717 	ldw	r21,28(sp)
8111f6c4:	dd000617 	ldw	r20,24(sp)
8111f6c8:	dcc00517 	ldw	r19,20(sp)
8111f6cc:	dc800417 	ldw	r18,16(sp)
8111f6d0:	dc400317 	ldw	r17,12(sp)
8111f6d4:	dc000217 	ldw	r16,8(sp)
8111f6d8:	dec00c04 	addi	sp,sp,48
8111f6dc:	f800283a 	ret
8111f6e0:	12c00f26 	beq	r2,r11,8111f720 <_strtoull_r+0x20c>
8111f6e4:	b08d383a 	mul	r6,r22,r2
8111f6e8:	1a87383a 	mul	r3,r3,r10
8111f6ec:	128a383a 	mulxuu	r5,r2,r10
8111f6f0:	1285383a 	mul	r2,r2,r10
8111f6f4:	800fd7fa 	srai	r7,r16,31
8111f6f8:	1987883a 	add	r3,r3,r6
8111f6fc:	8085883a 	add	r2,r16,r2
8111f700:	1947883a 	add	r3,r3,r5
8111f704:	38c7883a 	add	r3,r7,r3
8111f708:	1421803a 	cmpltu	r16,r2,r16
8111f70c:	80c7883a 	add	r3,r16,r3
8111f710:	01c00044 	movi	r7,1
8111f714:	003fd106 	br	8111f65c <__reset+0xfb0ff65c>
8111f718:	01400dc4 	movi	r5,55
8111f71c:	003fd906 	br	8111f684 <__reset+0xfb0ff684>
8111f720:	1a3ff01e 	bne	r3,r8,8111f6e4 <__reset+0xfb0ff6e4>
8111f724:	6c3fcc16 	blt	r13,r16,8111f658 <__reset+0xfb0ff658>
8111f728:	003fee06 	br	8111f6e4 <__reset+0xfb0ff6e4>
8111f72c:	00800884 	movi	r2,34
8111f730:	a8800015 	stw	r2,0(r21)
8111f734:	00bfffc4 	movi	r2,-1
8111f738:	1007883a 	mov	r3,r2
8111f73c:	a03fdc26 	beq	r20,zero,8111f6b0 <__reset+0xfb0ff6b0>
8111f740:	24ffffc4 	addi	r19,r4,-1
8111f744:	003fd906 	br	8111f6ac <__reset+0xfb0ff6ac>
8111f748:	27000084 	addi	fp,r4,2
8111f74c:	24000043 	ldbu	r16,1(r4)
8111f750:	05c00044 	movi	r23,1
8111f754:	003f9106 	br	8111f59c <__reset+0xfb0ff59c>
8111f758:	27000084 	addi	fp,r4,2
8111f75c:	24000043 	ldbu	r16,1(r4)
8111f760:	002f883a 	mov	r23,zero
8111f764:	003f8d06 	br	8111f59c <__reset+0xfb0ff59c>
8111f768:	e0800003 	ldbu	r2,0(fp)
8111f76c:	00c01604 	movi	r3,88
8111f770:	108037cc 	andi	r2,r2,223
8111f774:	10c00e26 	beq	r2,r3,8111f7b0 <_strtoull_r+0x29c>
8111f778:	02800204 	movi	r10,8
8111f77c:	02ffffc4 	movi	r11,-1
8111f780:	02080034 	movhi	r8,8192
8111f784:	034001c4 	movi	r13,7
8111f788:	42d1883a 	add	r8,r8,r11
8111f78c:	002d883a 	mov	r22,zero
8111f790:	5025883a 	mov	r18,r10
8111f794:	003fa006 	br	8111f618 <__reset+0xfb0ff618>
8111f798:	00800c04 	movi	r2,48
8111f79c:	80800e1e 	bne	r16,r2,8111f7d8 <_strtoull_r+0x2c4>
8111f7a0:	e0800003 	ldbu	r2,0(fp)
8111f7a4:	00c01604 	movi	r3,88
8111f7a8:	108037cc 	andi	r2,r2,223
8111f7ac:	10c00a1e 	bne	r2,r3,8111f7d8 <_strtoull_r+0x2c4>
8111f7b0:	02800404 	movi	r10,16
8111f7b4:	02ffffc4 	movi	r11,-1
8111f7b8:	02040034 	movhi	r8,4096
8111f7bc:	e4000043 	ldbu	r16,1(fp)
8111f7c0:	034003c4 	movi	r13,15
8111f7c4:	e7000084 	addi	fp,fp,2
8111f7c8:	42d1883a 	add	r8,r8,r11
8111f7cc:	002d883a 	mov	r22,zero
8111f7d0:	5025883a 	mov	r18,r10
8111f7d4:	003f9006 	br	8111f618 <__reset+0xfb0ff618>
8111f7d8:	02ffffc4 	movi	r11,-1
8111f7dc:	02040034 	movhi	r8,4096
8111f7e0:	034003c4 	movi	r13,15
8111f7e4:	42d1883a 	add	r8,r8,r11
8111f7e8:	9015883a 	mov	r10,r18
8111f7ec:	002d883a 	mov	r22,zero
8111f7f0:	003f8906 	br	8111f618 <__reset+0xfb0ff618>

8111f7f4 <__ssprint_r>:
8111f7f4:	defff604 	addi	sp,sp,-40
8111f7f8:	de00012e 	bgeu	sp,et,8111f800 <__ssprint_r+0xc>
8111f7fc:	003b68fa 	trap	3
8111f800:	30800217 	ldw	r2,8(r6)
8111f804:	dc800215 	stw	r18,8(sp)
8111f808:	dfc00915 	stw	ra,36(sp)
8111f80c:	df000815 	stw	fp,32(sp)
8111f810:	ddc00715 	stw	r23,28(sp)
8111f814:	dd800615 	stw	r22,24(sp)
8111f818:	dd400515 	stw	r21,20(sp)
8111f81c:	dd000415 	stw	r20,16(sp)
8111f820:	dcc00315 	stw	r19,12(sp)
8111f824:	dc400115 	stw	r17,4(sp)
8111f828:	dc000015 	stw	r16,0(sp)
8111f82c:	3025883a 	mov	r18,r6
8111f830:	10005826 	beq	r2,zero,8111f994 <__ssprint_r+0x1a0>
8111f834:	2027883a 	mov	r19,r4
8111f838:	35c00017 	ldw	r23,0(r6)
8111f83c:	29000017 	ldw	r4,0(r5)
8111f840:	28800217 	ldw	r2,8(r5)
8111f844:	2823883a 	mov	r17,r5
8111f848:	0039883a 	mov	fp,zero
8111f84c:	0021883a 	mov	r16,zero
8111f850:	80003926 	beq	r16,zero,8111f938 <__ssprint_r+0x144>
8111f854:	102b883a 	mov	r21,r2
8111f858:	102d883a 	mov	r22,r2
8111f85c:	80803a36 	bltu	r16,r2,8111f948 <__ssprint_r+0x154>
8111f860:	88c0030b 	ldhu	r3,12(r17)
8111f864:	1881200c 	andi	r2,r3,1152
8111f868:	10002626 	beq	r2,zero,8111f904 <__ssprint_r+0x110>
8111f86c:	88800517 	ldw	r2,20(r17)
8111f870:	89400417 	ldw	r5,16(r17)
8111f874:	81800044 	addi	r6,r16,1
8111f878:	108f883a 	add	r7,r2,r2
8111f87c:	3885883a 	add	r2,r7,r2
8111f880:	100ed7fa 	srli	r7,r2,31
8111f884:	216dc83a 	sub	r22,r4,r5
8111f888:	3589883a 	add	r4,r6,r22
8111f88c:	3885883a 	add	r2,r7,r2
8111f890:	102bd07a 	srai	r21,r2,1
8111f894:	a80d883a 	mov	r6,r21
8111f898:	a900022e 	bgeu	r21,r4,8111f8a4 <__ssprint_r+0xb0>
8111f89c:	202b883a 	mov	r21,r4
8111f8a0:	200d883a 	mov	r6,r4
8111f8a4:	18c1000c 	andi	r3,r3,1024
8111f8a8:	18002a26 	beq	r3,zero,8111f954 <__ssprint_r+0x160>
8111f8ac:	300b883a 	mov	r5,r6
8111f8b0:	9809883a 	mov	r4,r19
8111f8b4:	11118b00 	call	811118b0 <_malloc_r>
8111f8b8:	1029883a 	mov	r20,r2
8111f8bc:	10002c26 	beq	r2,zero,8111f970 <__ssprint_r+0x17c>
8111f8c0:	89400417 	ldw	r5,16(r17)
8111f8c4:	b00d883a 	mov	r6,r22
8111f8c8:	1009883a 	mov	r4,r2
8111f8cc:	11120c40 	call	811120c4 <memcpy>
8111f8d0:	8880030b 	ldhu	r2,12(r17)
8111f8d4:	00fedfc4 	movi	r3,-1153
8111f8d8:	10c4703a 	and	r2,r2,r3
8111f8dc:	10802014 	ori	r2,r2,128
8111f8e0:	8880030d 	sth	r2,12(r17)
8111f8e4:	a589883a 	add	r4,r20,r22
8111f8e8:	adadc83a 	sub	r22,r21,r22
8111f8ec:	8d400515 	stw	r21,20(r17)
8111f8f0:	8d800215 	stw	r22,8(r17)
8111f8f4:	8d000415 	stw	r20,16(r17)
8111f8f8:	89000015 	stw	r4,0(r17)
8111f8fc:	802b883a 	mov	r21,r16
8111f900:	802d883a 	mov	r22,r16
8111f904:	b00d883a 	mov	r6,r22
8111f908:	e00b883a 	mov	r5,fp
8111f90c:	111be7c0 	call	8111be7c <memmove>
8111f910:	88800217 	ldw	r2,8(r17)
8111f914:	89000017 	ldw	r4,0(r17)
8111f918:	90c00217 	ldw	r3,8(r18)
8111f91c:	1545c83a 	sub	r2,r2,r21
8111f920:	2589883a 	add	r4,r4,r22
8111f924:	88800215 	stw	r2,8(r17)
8111f928:	89000015 	stw	r4,0(r17)
8111f92c:	1c21c83a 	sub	r16,r3,r16
8111f930:	94000215 	stw	r16,8(r18)
8111f934:	80001726 	beq	r16,zero,8111f994 <__ssprint_r+0x1a0>
8111f938:	bf000017 	ldw	fp,0(r23)
8111f93c:	bc000117 	ldw	r16,4(r23)
8111f940:	bdc00204 	addi	r23,r23,8
8111f944:	003fc206 	br	8111f850 <__reset+0xfb0ff850>
8111f948:	802b883a 	mov	r21,r16
8111f94c:	802d883a 	mov	r22,r16
8111f950:	003fec06 	br	8111f904 <__reset+0xfb0ff904>
8111f954:	9809883a 	mov	r4,r19
8111f958:	111d09c0 	call	8111d09c <_realloc_r>
8111f95c:	1029883a 	mov	r20,r2
8111f960:	103fe01e 	bne	r2,zero,8111f8e4 <__reset+0xfb0ff8e4>
8111f964:	89400417 	ldw	r5,16(r17)
8111f968:	9809883a 	mov	r4,r19
8111f96c:	111b0080 	call	8111b008 <_free_r>
8111f970:	88c0030b 	ldhu	r3,12(r17)
8111f974:	00800304 	movi	r2,12
8111f978:	98800015 	stw	r2,0(r19)
8111f97c:	18c01014 	ori	r3,r3,64
8111f980:	88c0030d 	sth	r3,12(r17)
8111f984:	00bfffc4 	movi	r2,-1
8111f988:	90000215 	stw	zero,8(r18)
8111f98c:	90000115 	stw	zero,4(r18)
8111f990:	00000206 	br	8111f99c <__ssprint_r+0x1a8>
8111f994:	90000115 	stw	zero,4(r18)
8111f998:	0005883a 	mov	r2,zero
8111f99c:	dfc00917 	ldw	ra,36(sp)
8111f9a0:	df000817 	ldw	fp,32(sp)
8111f9a4:	ddc00717 	ldw	r23,28(sp)
8111f9a8:	dd800617 	ldw	r22,24(sp)
8111f9ac:	dd400517 	ldw	r21,20(sp)
8111f9b0:	dd000417 	ldw	r20,16(sp)
8111f9b4:	dcc00317 	ldw	r19,12(sp)
8111f9b8:	dc800217 	ldw	r18,8(sp)
8111f9bc:	dc400117 	ldw	r17,4(sp)
8111f9c0:	dc000017 	ldw	r16,0(sp)
8111f9c4:	dec00a04 	addi	sp,sp,40
8111f9c8:	f800283a 	ret

8111f9cc <___svfiprintf_internal_r>:
8111f9cc:	deffc804 	addi	sp,sp,-224
8111f9d0:	de00012e 	bgeu	sp,et,8111f9d8 <___svfiprintf_internal_r+0xc>
8111f9d4:	003b68fa 	trap	3
8111f9d8:	2880030b 	ldhu	r2,12(r5)
8111f9dc:	dcc03115 	stw	r19,196(sp)
8111f9e0:	dfc03715 	stw	ra,220(sp)
8111f9e4:	df003615 	stw	fp,216(sp)
8111f9e8:	ddc03515 	stw	r23,212(sp)
8111f9ec:	dd803415 	stw	r22,208(sp)
8111f9f0:	dd403315 	stw	r21,204(sp)
8111f9f4:	dd003215 	stw	r20,200(sp)
8111f9f8:	dc803015 	stw	r18,192(sp)
8111f9fc:	dc402f15 	stw	r17,188(sp)
8111fa00:	dc002e15 	stw	r16,184(sp)
8111fa04:	d9402715 	stw	r5,156(sp)
8111fa08:	d9002a15 	stw	r4,168(sp)
8111fa0c:	1080200c 	andi	r2,r2,128
8111fa10:	d9c02315 	stw	r7,140(sp)
8111fa14:	3027883a 	mov	r19,r6
8111fa18:	10000226 	beq	r2,zero,8111fa24 <___svfiprintf_internal_r+0x58>
8111fa1c:	28800417 	ldw	r2,16(r5)
8111fa20:	10041d26 	beq	r2,zero,81120a98 <___svfiprintf_internal_r+0x10cc>
8111fa24:	dac01a04 	addi	r11,sp,104
8111fa28:	dac01e15 	stw	r11,120(sp)
8111fa2c:	d8801e17 	ldw	r2,120(sp)
8111fa30:	dac019c4 	addi	r11,sp,103
8111fa34:	dd402a17 	ldw	r21,168(sp)
8111fa38:	ddc02717 	ldw	r23,156(sp)
8111fa3c:	05a04534 	movhi	r22,33044
8111fa40:	05204534 	movhi	r20,33044
8111fa44:	dac01f15 	stw	r11,124(sp)
8111fa48:	12d7c83a 	sub	r11,r2,r11
8111fa4c:	b5b72a04 	addi	r22,r22,-9048
8111fa50:	a5372604 	addi	r20,r20,-9064
8111fa54:	dec01a15 	stw	sp,104(sp)
8111fa58:	d8001c15 	stw	zero,112(sp)
8111fa5c:	d8001b15 	stw	zero,108(sp)
8111fa60:	d811883a 	mov	r8,sp
8111fa64:	d8002915 	stw	zero,164(sp)
8111fa68:	d8002515 	stw	zero,148(sp)
8111fa6c:	dac02b15 	stw	r11,172(sp)
8111fa70:	98800007 	ldb	r2,0(r19)
8111fa74:	1002dd26 	beq	r2,zero,811205ec <___svfiprintf_internal_r+0xc20>
8111fa78:	00c00944 	movi	r3,37
8111fa7c:	9823883a 	mov	r17,r19
8111fa80:	10c0021e 	bne	r2,r3,8111fa8c <___svfiprintf_internal_r+0xc0>
8111fa84:	00001406 	br	8111fad8 <___svfiprintf_internal_r+0x10c>
8111fa88:	10c00326 	beq	r2,r3,8111fa98 <___svfiprintf_internal_r+0xcc>
8111fa8c:	8c400044 	addi	r17,r17,1
8111fa90:	88800007 	ldb	r2,0(r17)
8111fa94:	103ffc1e 	bne	r2,zero,8111fa88 <__reset+0xfb0ffa88>
8111fa98:	8ce1c83a 	sub	r16,r17,r19
8111fa9c:	80000e26 	beq	r16,zero,8111fad8 <___svfiprintf_internal_r+0x10c>
8111faa0:	d8c01c17 	ldw	r3,112(sp)
8111faa4:	d8801b17 	ldw	r2,108(sp)
8111faa8:	44c00015 	stw	r19,0(r8)
8111faac:	1c07883a 	add	r3,r3,r16
8111fab0:	10800044 	addi	r2,r2,1
8111fab4:	d8c01c15 	stw	r3,112(sp)
8111fab8:	44000115 	stw	r16,4(r8)
8111fabc:	d8801b15 	stw	r2,108(sp)
8111fac0:	00c001c4 	movi	r3,7
8111fac4:	18831e16 	blt	r3,r2,81120740 <___svfiprintf_internal_r+0xd74>
8111fac8:	42000204 	addi	r8,r8,8
8111facc:	dac02517 	ldw	r11,148(sp)
8111fad0:	5c17883a 	add	r11,r11,r16
8111fad4:	dac02515 	stw	r11,148(sp)
8111fad8:	88800007 	ldb	r2,0(r17)
8111fadc:	1002c526 	beq	r2,zero,811205f4 <___svfiprintf_internal_r+0xc28>
8111fae0:	88c00047 	ldb	r3,1(r17)
8111fae4:	8cc00044 	addi	r19,r17,1
8111fae8:	d8001d85 	stb	zero,118(sp)
8111faec:	0009883a 	mov	r4,zero
8111faf0:	000f883a 	mov	r7,zero
8111faf4:	043fffc4 	movi	r16,-1
8111faf8:	d8002415 	stw	zero,144(sp)
8111fafc:	0025883a 	mov	r18,zero
8111fb00:	01401604 	movi	r5,88
8111fb04:	01800244 	movi	r6,9
8111fb08:	02800a84 	movi	r10,42
8111fb0c:	02401b04 	movi	r9,108
8111fb10:	9cc00044 	addi	r19,r19,1
8111fb14:	18bff804 	addi	r2,r3,-32
8111fb18:	2881dd36 	bltu	r5,r2,81120290 <___svfiprintf_internal_r+0x8c4>
8111fb1c:	100490ba 	slli	r2,r2,2
8111fb20:	02e044b4 	movhi	r11,33042
8111fb24:	5afecd04 	addi	r11,r11,-1228
8111fb28:	12c5883a 	add	r2,r2,r11
8111fb2c:	10800017 	ldw	r2,0(r2)
8111fb30:	1000683a 	jmp	r2
8111fb34:	8111fd30 	cmpltui	r4,r16,18420
8111fb38:	81120290 	cmplti	r4,r16,18442
8111fb3c:	81120290 	cmplti	r4,r16,18442
8111fb40:	8111fd24 	muli	r4,r16,18420
8111fb44:	81120290 	cmplti	r4,r16,18442
8111fb48:	81120290 	cmplti	r4,r16,18442
8111fb4c:	81120290 	cmplti	r4,r16,18442
8111fb50:	81120290 	cmplti	r4,r16,18442
8111fb54:	81120290 	cmplti	r4,r16,18442
8111fb58:	81120290 	cmplti	r4,r16,18442
8111fb5c:	8111fc98 	cmpnei	r4,r16,18418
8111fb60:	8111fe74 	orhi	r4,r16,18425
8111fb64:	81120290 	cmplti	r4,r16,18442
8111fb68:	8111fcc4 	addi	r4,r16,18419
8111fb6c:	811202c4 	addi	r4,r16,18443
8111fb70:	81120290 	cmplti	r4,r16,18442
8111fb74:	811202b8 	rdprs	r4,r16,18442
8111fb78:	81120258 	cmpnei	r4,r16,18441
8111fb7c:	81120258 	cmpnei	r4,r16,18441
8111fb80:	81120258 	cmpnei	r4,r16,18441
8111fb84:	81120258 	cmpnei	r4,r16,18441
8111fb88:	81120258 	cmpnei	r4,r16,18441
8111fb8c:	81120258 	cmpnei	r4,r16,18441
8111fb90:	81120258 	cmpnei	r4,r16,18441
8111fb94:	81120258 	cmpnei	r4,r16,18441
8111fb98:	81120258 	cmpnei	r4,r16,18441
8111fb9c:	81120290 	cmplti	r4,r16,18442
8111fba0:	81120290 	cmplti	r4,r16,18442
8111fba4:	81120290 	cmplti	r4,r16,18442
8111fba8:	81120290 	cmplti	r4,r16,18442
8111fbac:	81120290 	cmplti	r4,r16,18442
8111fbb0:	81120290 	cmplti	r4,r16,18442
8111fbb4:	81120290 	cmplti	r4,r16,18442
8111fbb8:	81120290 	cmplti	r4,r16,18442
8111fbbc:	81120290 	cmplti	r4,r16,18442
8111fbc0:	81120290 	cmplti	r4,r16,18442
8111fbc4:	811201f4 	orhi	r4,r16,18439
8111fbc8:	81120290 	cmplti	r4,r16,18442
8111fbcc:	81120290 	cmplti	r4,r16,18442
8111fbd0:	81120290 	cmplti	r4,r16,18442
8111fbd4:	81120290 	cmplti	r4,r16,18442
8111fbd8:	81120290 	cmplti	r4,r16,18442
8111fbdc:	81120290 	cmplti	r4,r16,18442
8111fbe0:	81120290 	cmplti	r4,r16,18442
8111fbe4:	81120290 	cmplti	r4,r16,18442
8111fbe8:	81120290 	cmplti	r4,r16,18442
8111fbec:	81120290 	cmplti	r4,r16,18442
8111fbf0:	8112036c 	andhi	r4,r16,18445
8111fbf4:	81120290 	cmplti	r4,r16,18442
8111fbf8:	81120290 	cmplti	r4,r16,18442
8111fbfc:	81120290 	cmplti	r4,r16,18442
8111fc00:	81120290 	cmplti	r4,r16,18442
8111fc04:	81120290 	cmplti	r4,r16,18442
8111fc08:	81120304 	addi	r4,r16,18444
8111fc0c:	81120290 	cmplti	r4,r16,18442
8111fc10:	81120290 	cmplti	r4,r16,18442
8111fc14:	81120038 	rdprs	r4,r16,18432
8111fc18:	81120290 	cmplti	r4,r16,18442
8111fc1c:	81120290 	cmplti	r4,r16,18442
8111fc20:	81120290 	cmplti	r4,r16,18442
8111fc24:	81120290 	cmplti	r4,r16,18442
8111fc28:	81120290 	cmplti	r4,r16,18442
8111fc2c:	81120290 	cmplti	r4,r16,18442
8111fc30:	81120290 	cmplti	r4,r16,18442
8111fc34:	81120290 	cmplti	r4,r16,18442
8111fc38:	81120290 	cmplti	r4,r16,18442
8111fc3c:	81120290 	cmplti	r4,r16,18442
8111fc40:	8111ff28 	cmpgeui	r4,r16,18428
8111fc44:	811200d4 	ori	r4,r16,18435
8111fc48:	81120290 	cmplti	r4,r16,18442
8111fc4c:	81120290 	cmplti	r4,r16,18442
8111fc50:	81120290 	cmplti	r4,r16,18442
8111fc54:	811200c8 	cmpgei	r4,r16,18435
8111fc58:	811200d4 	ori	r4,r16,18435
8111fc5c:	81120290 	cmplti	r4,r16,18442
8111fc60:	81120290 	cmplti	r4,r16,18442
8111fc64:	811200b8 	rdprs	r4,r16,18434
8111fc68:	81120290 	cmplti	r4,r16,18442
8111fc6c:	8112007c 	xorhi	r4,r16,18433
8111fc70:	8111fe84 	addi	r4,r16,18426
8111fc74:	8111fcd0 	cmplti	r4,r16,18419
8111fc78:	811201e8 	cmpgeui	r4,r16,18439
8111fc7c:	81120290 	cmplti	r4,r16,18442
8111fc80:	8112019c 	xori	r4,r16,18438
8111fc84:	81120290 	cmplti	r4,r16,18442
8111fc88:	8111fdf4 	orhi	r4,r16,18423
8111fc8c:	81120290 	cmplti	r4,r16,18442
8111fc90:	81120290 	cmplti	r4,r16,18442
8111fc94:	8111fd50 	cmplti	r4,r16,18421
8111fc98:	dac02317 	ldw	r11,140(sp)
8111fc9c:	5ac00017 	ldw	r11,0(r11)
8111fca0:	dac02415 	stw	r11,144(sp)
8111fca4:	dac02317 	ldw	r11,140(sp)
8111fca8:	58800104 	addi	r2,r11,4
8111fcac:	dac02417 	ldw	r11,144(sp)
8111fcb0:	5802e90e 	bge	r11,zero,81120858 <___svfiprintf_internal_r+0xe8c>
8111fcb4:	dac02417 	ldw	r11,144(sp)
8111fcb8:	d8802315 	stw	r2,140(sp)
8111fcbc:	02d7c83a 	sub	r11,zero,r11
8111fcc0:	dac02415 	stw	r11,144(sp)
8111fcc4:	94800114 	ori	r18,r18,4
8111fcc8:	98c00007 	ldb	r3,0(r19)
8111fccc:	003f9006 	br	8111fb10 <__reset+0xfb0ffb10>
8111fcd0:	00800c04 	movi	r2,48
8111fcd4:	dac02317 	ldw	r11,140(sp)
8111fcd8:	d8801d05 	stb	r2,116(sp)
8111fcdc:	00801e04 	movi	r2,120
8111fce0:	d8801d45 	stb	r2,117(sp)
8111fce4:	d8001d85 	stb	zero,118(sp)
8111fce8:	58c00104 	addi	r3,r11,4
8111fcec:	5f000017 	ldw	fp,0(r11)
8111fcf0:	0013883a 	mov	r9,zero
8111fcf4:	90800094 	ori	r2,r18,2
8111fcf8:	80032b16 	blt	r16,zero,811209a8 <___svfiprintf_internal_r+0xfdc>
8111fcfc:	00bfdfc4 	movi	r2,-129
8111fd00:	90a4703a 	and	r18,r18,r2
8111fd04:	d8c02315 	stw	r3,140(sp)
8111fd08:	94800094 	ori	r18,r18,2
8111fd0c:	e002dc26 	beq	fp,zero,81120880 <___svfiprintf_internal_r+0xeb4>
8111fd10:	01204534 	movhi	r4,33044
8111fd14:	21369c04 	addi	r4,r4,-9616
8111fd18:	0015883a 	mov	r10,zero
8111fd1c:	d9002915 	stw	r4,164(sp)
8111fd20:	00002306 	br	8111fdb0 <___svfiprintf_internal_r+0x3e4>
8111fd24:	94800054 	ori	r18,r18,1
8111fd28:	98c00007 	ldb	r3,0(r19)
8111fd2c:	003f7806 	br	8111fb10 <__reset+0xfb0ffb10>
8111fd30:	38803fcc 	andi	r2,r7,255
8111fd34:	1080201c 	xori	r2,r2,128
8111fd38:	10bfe004 	addi	r2,r2,-128
8111fd3c:	1002f31e 	bne	r2,zero,8112090c <___svfiprintf_internal_r+0xf40>
8111fd40:	01000044 	movi	r4,1
8111fd44:	01c00804 	movi	r7,32
8111fd48:	98c00007 	ldb	r3,0(r19)
8111fd4c:	003f7006 	br	8111fb10 <__reset+0xfb0ffb10>
8111fd50:	21003fcc 	andi	r4,r4,255
8111fd54:	2003aa1e 	bne	r4,zero,81120c00 <___svfiprintf_internal_r+0x1234>
8111fd58:	00a04534 	movhi	r2,33044
8111fd5c:	10b69c04 	addi	r2,r2,-9616
8111fd60:	d8802915 	stw	r2,164(sp)
8111fd64:	9080080c 	andi	r2,r18,32
8111fd68:	1000ba26 	beq	r2,zero,81120054 <___svfiprintf_internal_r+0x688>
8111fd6c:	dac02317 	ldw	r11,140(sp)
8111fd70:	5f000017 	ldw	fp,0(r11)
8111fd74:	5a400117 	ldw	r9,4(r11)
8111fd78:	5ac00204 	addi	r11,r11,8
8111fd7c:	dac02315 	stw	r11,140(sp)
8111fd80:	9080004c 	andi	r2,r18,1
8111fd84:	10029026 	beq	r2,zero,811207c8 <___svfiprintf_internal_r+0xdfc>
8111fd88:	e244b03a 	or	r2,fp,r9
8111fd8c:	1002d41e 	bne	r2,zero,811208e0 <___svfiprintf_internal_r+0xf14>
8111fd90:	d8001d85 	stb	zero,118(sp)
8111fd94:	80030b16 	blt	r16,zero,811209c4 <___svfiprintf_internal_r+0xff8>
8111fd98:	00bfdfc4 	movi	r2,-129
8111fd9c:	90a4703a 	and	r18,r18,r2
8111fda0:	0015883a 	mov	r10,zero
8111fda4:	80002426 	beq	r16,zero,8111fe38 <___svfiprintf_internal_r+0x46c>
8111fda8:	0039883a 	mov	fp,zero
8111fdac:	0013883a 	mov	r9,zero
8111fdb0:	d9002917 	ldw	r4,164(sp)
8111fdb4:	dc401a04 	addi	r17,sp,104
8111fdb8:	e08003cc 	andi	r2,fp,15
8111fdbc:	4806973a 	slli	r3,r9,28
8111fdc0:	2085883a 	add	r2,r4,r2
8111fdc4:	e038d13a 	srli	fp,fp,4
8111fdc8:	10800003 	ldbu	r2,0(r2)
8111fdcc:	4812d13a 	srli	r9,r9,4
8111fdd0:	8c7fffc4 	addi	r17,r17,-1
8111fdd4:	1f38b03a 	or	fp,r3,fp
8111fdd8:	88800005 	stb	r2,0(r17)
8111fddc:	e244b03a 	or	r2,fp,r9
8111fde0:	103ff51e 	bne	r2,zero,8111fdb8 <__reset+0xfb0ffdb8>
8111fde4:	dac01e17 	ldw	r11,120(sp)
8111fde8:	5c57c83a 	sub	r11,r11,r17
8111fdec:	dac02115 	stw	r11,132(sp)
8111fdf0:	00001406 	br	8111fe44 <___svfiprintf_internal_r+0x478>
8111fdf4:	21003fcc 	andi	r4,r4,255
8111fdf8:	2003741e 	bne	r4,zero,81120bcc <___svfiprintf_internal_r+0x1200>
8111fdfc:	9080080c 	andi	r2,r18,32
8111fe00:	10014526 	beq	r2,zero,81120318 <___svfiprintf_internal_r+0x94c>
8111fe04:	dac02317 	ldw	r11,140(sp)
8111fe08:	d8001d85 	stb	zero,118(sp)
8111fe0c:	58c00204 	addi	r3,r11,8
8111fe10:	5f000017 	ldw	fp,0(r11)
8111fe14:	5a400117 	ldw	r9,4(r11)
8111fe18:	8002d916 	blt	r16,zero,81120980 <___svfiprintf_internal_r+0xfb4>
8111fe1c:	013fdfc4 	movi	r4,-129
8111fe20:	e244b03a 	or	r2,fp,r9
8111fe24:	d8c02315 	stw	r3,140(sp)
8111fe28:	9124703a 	and	r18,r18,r4
8111fe2c:	0015883a 	mov	r10,zero
8111fe30:	1000b91e 	bne	r2,zero,81120118 <___svfiprintf_internal_r+0x74c>
8111fe34:	8002e61e 	bne	r16,zero,811209d0 <___svfiprintf_internal_r+0x1004>
8111fe38:	0021883a 	mov	r16,zero
8111fe3c:	d8002115 	stw	zero,132(sp)
8111fe40:	dc401a04 	addi	r17,sp,104
8111fe44:	d8c02117 	ldw	r3,132(sp)
8111fe48:	dc002015 	stw	r16,128(sp)
8111fe4c:	80c0010e 	bge	r16,r3,8111fe54 <___svfiprintf_internal_r+0x488>
8111fe50:	d8c02015 	stw	r3,128(sp)
8111fe54:	52803fcc 	andi	r10,r10,255
8111fe58:	5280201c 	xori	r10,r10,128
8111fe5c:	52bfe004 	addi	r10,r10,-128
8111fe60:	50003c26 	beq	r10,zero,8111ff54 <___svfiprintf_internal_r+0x588>
8111fe64:	dac02017 	ldw	r11,128(sp)
8111fe68:	5ac00044 	addi	r11,r11,1
8111fe6c:	dac02015 	stw	r11,128(sp)
8111fe70:	00003806 	br	8111ff54 <___svfiprintf_internal_r+0x588>
8111fe74:	01000044 	movi	r4,1
8111fe78:	01c00ac4 	movi	r7,43
8111fe7c:	98c00007 	ldb	r3,0(r19)
8111fe80:	003f2306 	br	8111fb10 <__reset+0xfb0ffb10>
8111fe84:	21003fcc 	andi	r4,r4,255
8111fe88:	2003481e 	bne	r4,zero,81120bac <___svfiprintf_internal_r+0x11e0>
8111fe8c:	9080080c 	andi	r2,r18,32
8111fe90:	10013b26 	beq	r2,zero,81120380 <___svfiprintf_internal_r+0x9b4>
8111fe94:	dac02317 	ldw	r11,140(sp)
8111fe98:	d8001d85 	stb	zero,118(sp)
8111fe9c:	58800204 	addi	r2,r11,8
8111fea0:	5f000017 	ldw	fp,0(r11)
8111fea4:	5a400117 	ldw	r9,4(r11)
8111fea8:	8002a816 	blt	r16,zero,8112094c <___svfiprintf_internal_r+0xf80>
8111feac:	013fdfc4 	movi	r4,-129
8111feb0:	e246b03a 	or	r3,fp,r9
8111feb4:	d8802315 	stw	r2,140(sp)
8111feb8:	9124703a 	and	r18,r18,r4
8111febc:	18013c26 	beq	r3,zero,811203b0 <___svfiprintf_internal_r+0x9e4>
8111fec0:	0015883a 	mov	r10,zero
8111fec4:	dc401a04 	addi	r17,sp,104
8111fec8:	e006d0fa 	srli	r3,fp,3
8111fecc:	4808977a 	slli	r4,r9,29
8111fed0:	4812d0fa 	srli	r9,r9,3
8111fed4:	e70001cc 	andi	fp,fp,7
8111fed8:	e0800c04 	addi	r2,fp,48
8111fedc:	8c7fffc4 	addi	r17,r17,-1
8111fee0:	20f8b03a 	or	fp,r4,r3
8111fee4:	88800005 	stb	r2,0(r17)
8111fee8:	e246b03a 	or	r3,fp,r9
8111feec:	183ff61e 	bne	r3,zero,8111fec8 <__reset+0xfb0ffec8>
8111fef0:	90c0004c 	andi	r3,r18,1
8111fef4:	1800a526 	beq	r3,zero,8112018c <___svfiprintf_internal_r+0x7c0>
8111fef8:	10803fcc 	andi	r2,r2,255
8111fefc:	1080201c 	xori	r2,r2,128
8111ff00:	10bfe004 	addi	r2,r2,-128
8111ff04:	00c00c04 	movi	r3,48
8111ff08:	10ffb626 	beq	r2,r3,8111fde4 <__reset+0xfb0ffde4>
8111ff0c:	88ffffc5 	stb	r3,-1(r17)
8111ff10:	d8c01e17 	ldw	r3,120(sp)
8111ff14:	88bfffc4 	addi	r2,r17,-1
8111ff18:	1023883a 	mov	r17,r2
8111ff1c:	1887c83a 	sub	r3,r3,r2
8111ff20:	d8c02115 	stw	r3,132(sp)
8111ff24:	003fc706 	br	8111fe44 <__reset+0xfb0ffe44>
8111ff28:	dac02317 	ldw	r11,140(sp)
8111ff2c:	00c00044 	movi	r3,1
8111ff30:	d8c02015 	stw	r3,128(sp)
8111ff34:	58800017 	ldw	r2,0(r11)
8111ff38:	5ac00104 	addi	r11,r11,4
8111ff3c:	d8001d85 	stb	zero,118(sp)
8111ff40:	d8801005 	stb	r2,64(sp)
8111ff44:	dac02315 	stw	r11,140(sp)
8111ff48:	d8c02115 	stw	r3,132(sp)
8111ff4c:	dc401004 	addi	r17,sp,64
8111ff50:	0021883a 	mov	r16,zero
8111ff54:	90c0008c 	andi	r3,r18,2
8111ff58:	d8c02215 	stw	r3,136(sp)
8111ff5c:	18000326 	beq	r3,zero,8111ff6c <___svfiprintf_internal_r+0x5a0>
8111ff60:	dac02017 	ldw	r11,128(sp)
8111ff64:	5ac00084 	addi	r11,r11,2
8111ff68:	dac02015 	stw	r11,128(sp)
8111ff6c:	90c0210c 	andi	r3,r18,132
8111ff70:	d8c02615 	stw	r3,152(sp)
8111ff74:	1801131e 	bne	r3,zero,811203c4 <___svfiprintf_internal_r+0x9f8>
8111ff78:	dac02417 	ldw	r11,144(sp)
8111ff7c:	d8c02017 	ldw	r3,128(sp)
8111ff80:	58f9c83a 	sub	fp,r11,r3
8111ff84:	07010f0e 	bge	zero,fp,811203c4 <___svfiprintf_internal_r+0x9f8>
8111ff88:	02400404 	movi	r9,16
8111ff8c:	d8c01c17 	ldw	r3,112(sp)
8111ff90:	d8801b17 	ldw	r2,108(sp)
8111ff94:	4f02d60e 	bge	r9,fp,81120af0 <___svfiprintf_internal_r+0x1124>
8111ff98:	01604534 	movhi	r5,33044
8111ff9c:	29772a04 	addi	r5,r5,-9048
8111ffa0:	d9402815 	stw	r5,160(sp)
8111ffa4:	028001c4 	movi	r10,7
8111ffa8:	00000306 	br	8111ffb8 <___svfiprintf_internal_r+0x5ec>
8111ffac:	e73ffc04 	addi	fp,fp,-16
8111ffb0:	42000204 	addi	r8,r8,8
8111ffb4:	4f00150e 	bge	r9,fp,8112000c <___svfiprintf_internal_r+0x640>
8111ffb8:	18c00404 	addi	r3,r3,16
8111ffbc:	10800044 	addi	r2,r2,1
8111ffc0:	45800015 	stw	r22,0(r8)
8111ffc4:	42400115 	stw	r9,4(r8)
8111ffc8:	d8c01c15 	stw	r3,112(sp)
8111ffcc:	d8801b15 	stw	r2,108(sp)
8111ffd0:	50bff60e 	bge	r10,r2,8111ffac <__reset+0xfb0fffac>
8111ffd4:	d9801a04 	addi	r6,sp,104
8111ffd8:	b80b883a 	mov	r5,r23
8111ffdc:	a809883a 	mov	r4,r21
8111ffe0:	da402c15 	stw	r9,176(sp)
8111ffe4:	da802d15 	stw	r10,180(sp)
8111ffe8:	111f7f40 	call	8111f7f4 <__ssprint_r>
8111ffec:	da402c17 	ldw	r9,176(sp)
8111fff0:	da802d17 	ldw	r10,180(sp)
8111fff4:	1001851e 	bne	r2,zero,8112060c <___svfiprintf_internal_r+0xc40>
8111fff8:	e73ffc04 	addi	fp,fp,-16
8111fffc:	d8c01c17 	ldw	r3,112(sp)
81120000:	d8801b17 	ldw	r2,108(sp)
81120004:	d811883a 	mov	r8,sp
81120008:	4f3feb16 	blt	r9,fp,8111ffb8 <__reset+0xfb0fffb8>
8112000c:	dac02817 	ldw	r11,160(sp)
81120010:	e0c7883a 	add	r3,fp,r3
81120014:	10800044 	addi	r2,r2,1
81120018:	42c00015 	stw	r11,0(r8)
8112001c:	47000115 	stw	fp,4(r8)
81120020:	d8c01c15 	stw	r3,112(sp)
81120024:	d8801b15 	stw	r2,108(sp)
81120028:	010001c4 	movi	r4,7
8112002c:	2081ee16 	blt	r4,r2,811207e8 <___svfiprintf_internal_r+0xe1c>
81120030:	42000204 	addi	r8,r8,8
81120034:	0000e506 	br	811203cc <___svfiprintf_internal_r+0xa00>
81120038:	21003fcc 	andi	r4,r4,255
8112003c:	2002dd1e 	bne	r4,zero,81120bb4 <___svfiprintf_internal_r+0x11e8>
81120040:	00a04534 	movhi	r2,33044
81120044:	10b69704 	addi	r2,r2,-9636
81120048:	d8802915 	stw	r2,164(sp)
8112004c:	9080080c 	andi	r2,r18,32
81120050:	103f461e 	bne	r2,zero,8111fd6c <__reset+0xfb0ffd6c>
81120054:	9080040c 	andi	r2,r18,16
81120058:	10022e1e 	bne	r2,zero,81120914 <___svfiprintf_internal_r+0xf48>
8112005c:	9080100c 	andi	r2,r18,64
81120060:	dac02317 	ldw	r11,140(sp)
81120064:	10027326 	beq	r2,zero,81120a34 <___svfiprintf_internal_r+0x1068>
81120068:	5f00000b 	ldhu	fp,0(r11)
8112006c:	5ac00104 	addi	r11,r11,4
81120070:	0013883a 	mov	r9,zero
81120074:	dac02315 	stw	r11,140(sp)
81120078:	003f4106 	br	8111fd80 <__reset+0xfb0ffd80>
8112007c:	21003fcc 	andi	r4,r4,255
81120080:	2002e11e 	bne	r4,zero,81120c08 <___svfiprintf_internal_r+0x123c>
81120084:	9080080c 	andi	r2,r18,32
81120088:	1002011e 	bne	r2,zero,81120890 <___svfiprintf_internal_r+0xec4>
8112008c:	9080040c 	andi	r2,r18,16
81120090:	10023e1e 	bne	r2,zero,8112098c <___svfiprintf_internal_r+0xfc0>
81120094:	9480100c 	andi	r18,r18,64
81120098:	90023c26 	beq	r18,zero,8112098c <___svfiprintf_internal_r+0xfc0>
8112009c:	dac02317 	ldw	r11,140(sp)
811200a0:	58800017 	ldw	r2,0(r11)
811200a4:	5ac00104 	addi	r11,r11,4
811200a8:	dac02315 	stw	r11,140(sp)
811200ac:	dac02517 	ldw	r11,148(sp)
811200b0:	12c0000d 	sth	r11,0(r2)
811200b4:	003e6e06 	br	8111fa70 <__reset+0xfb0ffa70>
811200b8:	98c00007 	ldb	r3,0(r19)
811200bc:	1a422926 	beq	r3,r9,81120964 <___svfiprintf_internal_r+0xf98>
811200c0:	94800414 	ori	r18,r18,16
811200c4:	003e9206 	br	8111fb10 <__reset+0xfb0ffb10>
811200c8:	94801014 	ori	r18,r18,64
811200cc:	98c00007 	ldb	r3,0(r19)
811200d0:	003e8f06 	br	8111fb10 <__reset+0xfb0ffb10>
811200d4:	21003fcc 	andi	r4,r4,255
811200d8:	2002c71e 	bne	r4,zero,81120bf8 <___svfiprintf_internal_r+0x122c>
811200dc:	9080080c 	andi	r2,r18,32
811200e0:	10004926 	beq	r2,zero,81120208 <___svfiprintf_internal_r+0x83c>
811200e4:	dac02317 	ldw	r11,140(sp)
811200e8:	58800117 	ldw	r2,4(r11)
811200ec:	5f000017 	ldw	fp,0(r11)
811200f0:	5ac00204 	addi	r11,r11,8
811200f4:	dac02315 	stw	r11,140(sp)
811200f8:	1013883a 	mov	r9,r2
811200fc:	10004b16 	blt	r2,zero,8112022c <___svfiprintf_internal_r+0x860>
81120100:	da801d83 	ldbu	r10,118(sp)
81120104:	8001cb16 	blt	r16,zero,81120834 <___svfiprintf_internal_r+0xe68>
81120108:	00ffdfc4 	movi	r3,-129
8112010c:	e244b03a 	or	r2,fp,r9
81120110:	90e4703a 	and	r18,r18,r3
81120114:	103f4726 	beq	r2,zero,8111fe34 <__reset+0xfb0ffe34>
81120118:	48008c26 	beq	r9,zero,8112034c <___svfiprintf_internal_r+0x980>
8112011c:	dc802015 	stw	r18,128(sp)
81120120:	dc002115 	stw	r16,132(sp)
81120124:	dc401a04 	addi	r17,sp,104
81120128:	e021883a 	mov	r16,fp
8112012c:	da002215 	stw	r8,136(sp)
81120130:	5039883a 	mov	fp,r10
81120134:	4825883a 	mov	r18,r9
81120138:	8009883a 	mov	r4,r16
8112013c:	900b883a 	mov	r5,r18
81120140:	01800284 	movi	r6,10
81120144:	000f883a 	mov	r7,zero
81120148:	1123eb80 	call	81123eb8 <__umoddi3>
8112014c:	10800c04 	addi	r2,r2,48
81120150:	8c7fffc4 	addi	r17,r17,-1
81120154:	8009883a 	mov	r4,r16
81120158:	900b883a 	mov	r5,r18
8112015c:	88800005 	stb	r2,0(r17)
81120160:	01800284 	movi	r6,10
81120164:	000f883a 	mov	r7,zero
81120168:	11239380 	call	81123938 <__udivdi3>
8112016c:	1021883a 	mov	r16,r2
81120170:	10c4b03a 	or	r2,r2,r3
81120174:	1825883a 	mov	r18,r3
81120178:	103fef1e 	bne	r2,zero,81120138 <__reset+0xfb100138>
8112017c:	dc802017 	ldw	r18,128(sp)
81120180:	dc002117 	ldw	r16,132(sp)
81120184:	da002217 	ldw	r8,136(sp)
81120188:	e015883a 	mov	r10,fp
8112018c:	d8c01e17 	ldw	r3,120(sp)
81120190:	1c47c83a 	sub	r3,r3,r17
81120194:	d8c02115 	stw	r3,132(sp)
81120198:	003f2a06 	br	8111fe44 <__reset+0xfb0ffe44>
8112019c:	dac02317 	ldw	r11,140(sp)
811201a0:	d8001d85 	stb	zero,118(sp)
811201a4:	5c400017 	ldw	r17,0(r11)
811201a8:	5f000104 	addi	fp,r11,4
811201ac:	88022f26 	beq	r17,zero,81120a6c <___svfiprintf_internal_r+0x10a0>
811201b0:	80022516 	blt	r16,zero,81120a48 <___svfiprintf_internal_r+0x107c>
811201b4:	800d883a 	mov	r6,r16
811201b8:	000b883a 	mov	r5,zero
811201bc:	8809883a 	mov	r4,r17
811201c0:	da002c15 	stw	r8,176(sp)
811201c4:	111bd980 	call	8111bd98 <memchr>
811201c8:	da002c17 	ldw	r8,176(sp)
811201cc:	10026426 	beq	r2,zero,81120b60 <___svfiprintf_internal_r+0x1194>
811201d0:	1445c83a 	sub	r2,r2,r17
811201d4:	d8802115 	stw	r2,132(sp)
811201d8:	da801d83 	ldbu	r10,118(sp)
811201dc:	df002315 	stw	fp,140(sp)
811201e0:	0021883a 	mov	r16,zero
811201e4:	003f1706 	br	8111fe44 <__reset+0xfb0ffe44>
811201e8:	94800814 	ori	r18,r18,32
811201ec:	98c00007 	ldb	r3,0(r19)
811201f0:	003e4706 	br	8111fb10 <__reset+0xfb0ffb10>
811201f4:	21003fcc 	andi	r4,r4,255
811201f8:	2002701e 	bne	r4,zero,81120bbc <___svfiprintf_internal_r+0x11f0>
811201fc:	94800414 	ori	r18,r18,16
81120200:	9080080c 	andi	r2,r18,32
81120204:	103fb71e 	bne	r2,zero,811200e4 <__reset+0xfb1000e4>
81120208:	9080040c 	andi	r2,r18,16
8112020c:	1001ab26 	beq	r2,zero,811208bc <___svfiprintf_internal_r+0xef0>
81120210:	dac02317 	ldw	r11,140(sp)
81120214:	5f000017 	ldw	fp,0(r11)
81120218:	5ac00104 	addi	r11,r11,4
8112021c:	dac02315 	stw	r11,140(sp)
81120220:	e013d7fa 	srai	r9,fp,31
81120224:	4805883a 	mov	r2,r9
81120228:	103fb50e 	bge	r2,zero,81120100 <__reset+0xfb100100>
8112022c:	0739c83a 	sub	fp,zero,fp
81120230:	02800b44 	movi	r10,45
81120234:	e004c03a 	cmpne	r2,fp,zero
81120238:	0253c83a 	sub	r9,zero,r9
8112023c:	da801d85 	stb	r10,118(sp)
81120240:	4893c83a 	sub	r9,r9,r2
81120244:	80023016 	blt	r16,zero,81120b08 <___svfiprintf_internal_r+0x113c>
81120248:	00bfdfc4 	movi	r2,-129
8112024c:	90a4703a 	and	r18,r18,r2
81120250:	483fb21e 	bne	r9,zero,8112011c <__reset+0xfb10011c>
81120254:	00003d06 	br	8112034c <___svfiprintf_internal_r+0x980>
81120258:	9817883a 	mov	r11,r19
8112025c:	d8002415 	stw	zero,144(sp)
81120260:	18bff404 	addi	r2,r3,-48
81120264:	0019883a 	mov	r12,zero
81120268:	58c00007 	ldb	r3,0(r11)
8112026c:	630002a4 	muli	r12,r12,10
81120270:	9cc00044 	addi	r19,r19,1
81120274:	9817883a 	mov	r11,r19
81120278:	1319883a 	add	r12,r2,r12
8112027c:	18bff404 	addi	r2,r3,-48
81120280:	30bff92e 	bgeu	r6,r2,81120268 <__reset+0xfb100268>
81120284:	db002415 	stw	r12,144(sp)
81120288:	18bff804 	addi	r2,r3,-32
8112028c:	28be232e 	bgeu	r5,r2,8111fb1c <__reset+0xfb0ffb1c>
81120290:	21003fcc 	andi	r4,r4,255
81120294:	20024b1e 	bne	r4,zero,81120bc4 <___svfiprintf_internal_r+0x11f8>
81120298:	1800d626 	beq	r3,zero,811205f4 <___svfiprintf_internal_r+0xc28>
8112029c:	02c00044 	movi	r11,1
811202a0:	dac02015 	stw	r11,128(sp)
811202a4:	d8c01005 	stb	r3,64(sp)
811202a8:	d8001d85 	stb	zero,118(sp)
811202ac:	dac02115 	stw	r11,132(sp)
811202b0:	dc401004 	addi	r17,sp,64
811202b4:	003f2606 	br	8111ff50 <__reset+0xfb0fff50>
811202b8:	94802014 	ori	r18,r18,128
811202bc:	98c00007 	ldb	r3,0(r19)
811202c0:	003e1306 	br	8111fb10 <__reset+0xfb0ffb10>
811202c4:	98c00007 	ldb	r3,0(r19)
811202c8:	9ac00044 	addi	r11,r19,1
811202cc:	1a822b26 	beq	r3,r10,81120b7c <___svfiprintf_internal_r+0x11b0>
811202d0:	18bff404 	addi	r2,r3,-48
811202d4:	0021883a 	mov	r16,zero
811202d8:	30821e36 	bltu	r6,r2,81120b54 <___svfiprintf_internal_r+0x1188>
811202dc:	58c00007 	ldb	r3,0(r11)
811202e0:	840002a4 	muli	r16,r16,10
811202e4:	5cc00044 	addi	r19,r11,1
811202e8:	9817883a 	mov	r11,r19
811202ec:	80a1883a 	add	r16,r16,r2
811202f0:	18bff404 	addi	r2,r3,-48
811202f4:	30bff92e 	bgeu	r6,r2,811202dc <__reset+0xfb1002dc>
811202f8:	803e060e 	bge	r16,zero,8111fb14 <__reset+0xfb0ffb14>
811202fc:	043fffc4 	movi	r16,-1
81120300:	003e0406 	br	8111fb14 <__reset+0xfb0ffb14>
81120304:	21003fcc 	andi	r4,r4,255
81120308:	2002371e 	bne	r4,zero,81120be8 <___svfiprintf_internal_r+0x121c>
8112030c:	94800414 	ori	r18,r18,16
81120310:	9080080c 	andi	r2,r18,32
81120314:	103ebb1e 	bne	r2,zero,8111fe04 <__reset+0xfb0ffe04>
81120318:	9080040c 	andi	r2,r18,16
8112031c:	10013b26 	beq	r2,zero,8112080c <___svfiprintf_internal_r+0xe40>
81120320:	dac02317 	ldw	r11,140(sp)
81120324:	d8001d85 	stb	zero,118(sp)
81120328:	0013883a 	mov	r9,zero
8112032c:	58800104 	addi	r2,r11,4
81120330:	5f000017 	ldw	fp,0(r11)
81120334:	80013d16 	blt	r16,zero,8112082c <___svfiprintf_internal_r+0xe60>
81120338:	00ffdfc4 	movi	r3,-129
8112033c:	d8802315 	stw	r2,140(sp)
81120340:	90e4703a 	and	r18,r18,r3
81120344:	0015883a 	mov	r10,zero
81120348:	e03eba26 	beq	fp,zero,8111fe34 <__reset+0xfb0ffe34>
8112034c:	00800244 	movi	r2,9
81120350:	173f7236 	bltu	r2,fp,8112011c <__reset+0xfb10011c>
81120354:	dac02b17 	ldw	r11,172(sp)
81120358:	e7000c04 	addi	fp,fp,48
8112035c:	df0019c5 	stb	fp,103(sp)
81120360:	dac02115 	stw	r11,132(sp)
81120364:	dc4019c4 	addi	r17,sp,103
81120368:	003eb606 	br	8111fe44 <__reset+0xfb0ffe44>
8112036c:	21003fcc 	andi	r4,r4,255
81120370:	20021f1e 	bne	r4,zero,81120bf0 <___svfiprintf_internal_r+0x1224>
81120374:	94800414 	ori	r18,r18,16
81120378:	9080080c 	andi	r2,r18,32
8112037c:	103ec51e 	bne	r2,zero,8111fe94 <__reset+0xfb0ffe94>
81120380:	9080040c 	andi	r2,r18,16
81120384:	10016926 	beq	r2,zero,8112092c <___svfiprintf_internal_r+0xf60>
81120388:	dac02317 	ldw	r11,140(sp)
8112038c:	d8001d85 	stb	zero,118(sp)
81120390:	0013883a 	mov	r9,zero
81120394:	58800104 	addi	r2,r11,4
81120398:	5f000017 	ldw	fp,0(r11)
8112039c:	80016b16 	blt	r16,zero,8112094c <___svfiprintf_internal_r+0xf80>
811203a0:	00ffdfc4 	movi	r3,-129
811203a4:	d8802315 	stw	r2,140(sp)
811203a8:	90e4703a 	and	r18,r18,r3
811203ac:	e03ec41e 	bne	fp,zero,8111fec0 <__reset+0xfb0ffec0>
811203b0:	0015883a 	mov	r10,zero
811203b4:	8001c226 	beq	r16,zero,81120ac0 <___svfiprintf_internal_r+0x10f4>
811203b8:	0039883a 	mov	fp,zero
811203bc:	0013883a 	mov	r9,zero
811203c0:	003ec006 	br	8111fec4 <__reset+0xfb0ffec4>
811203c4:	d8c01c17 	ldw	r3,112(sp)
811203c8:	d8801b17 	ldw	r2,108(sp)
811203cc:	d9001d87 	ldb	r4,118(sp)
811203d0:	20000b26 	beq	r4,zero,81120400 <___svfiprintf_internal_r+0xa34>
811203d4:	d9001d84 	addi	r4,sp,118
811203d8:	18c00044 	addi	r3,r3,1
811203dc:	10800044 	addi	r2,r2,1
811203e0:	41000015 	stw	r4,0(r8)
811203e4:	01000044 	movi	r4,1
811203e8:	41000115 	stw	r4,4(r8)
811203ec:	d8c01c15 	stw	r3,112(sp)
811203f0:	d8801b15 	stw	r2,108(sp)
811203f4:	010001c4 	movi	r4,7
811203f8:	2080e116 	blt	r4,r2,81120780 <___svfiprintf_internal_r+0xdb4>
811203fc:	42000204 	addi	r8,r8,8
81120400:	dac02217 	ldw	r11,136(sp)
81120404:	58000b26 	beq	r11,zero,81120434 <___svfiprintf_internal_r+0xa68>
81120408:	d9001d04 	addi	r4,sp,116
8112040c:	18c00084 	addi	r3,r3,2
81120410:	10800044 	addi	r2,r2,1
81120414:	41000015 	stw	r4,0(r8)
81120418:	01000084 	movi	r4,2
8112041c:	41000115 	stw	r4,4(r8)
81120420:	d8c01c15 	stw	r3,112(sp)
81120424:	d8801b15 	stw	r2,108(sp)
81120428:	010001c4 	movi	r4,7
8112042c:	2080dd16 	blt	r4,r2,811207a4 <___svfiprintf_internal_r+0xdd8>
81120430:	42000204 	addi	r8,r8,8
81120434:	dac02617 	ldw	r11,152(sp)
81120438:	01002004 	movi	r4,128
8112043c:	59008426 	beq	r11,r4,81120650 <___svfiprintf_internal_r+0xc84>
81120440:	dac02117 	ldw	r11,132(sp)
81120444:	82e1c83a 	sub	r16,r16,r11
81120448:	0400270e 	bge	zero,r16,811204e8 <___svfiprintf_internal_r+0xb1c>
8112044c:	01c00404 	movi	r7,16
81120450:	3c016a0e 	bge	r7,r16,811209fc <___svfiprintf_internal_r+0x1030>
81120454:	01604534 	movhi	r5,33044
81120458:	29772604 	addi	r5,r5,-9064
8112045c:	d9402215 	stw	r5,136(sp)
81120460:	070001c4 	movi	fp,7
81120464:	00000306 	br	81120474 <___svfiprintf_internal_r+0xaa8>
81120468:	843ffc04 	addi	r16,r16,-16
8112046c:	42000204 	addi	r8,r8,8
81120470:	3c00130e 	bge	r7,r16,811204c0 <___svfiprintf_internal_r+0xaf4>
81120474:	18c00404 	addi	r3,r3,16
81120478:	10800044 	addi	r2,r2,1
8112047c:	45000015 	stw	r20,0(r8)
81120480:	41c00115 	stw	r7,4(r8)
81120484:	d8c01c15 	stw	r3,112(sp)
81120488:	d8801b15 	stw	r2,108(sp)
8112048c:	e0bff60e 	bge	fp,r2,81120468 <__reset+0xfb100468>
81120490:	d9801a04 	addi	r6,sp,104
81120494:	b80b883a 	mov	r5,r23
81120498:	a809883a 	mov	r4,r21
8112049c:	d9c02c15 	stw	r7,176(sp)
811204a0:	111f7f40 	call	8111f7f4 <__ssprint_r>
811204a4:	d9c02c17 	ldw	r7,176(sp)
811204a8:	1000581e 	bne	r2,zero,8112060c <___svfiprintf_internal_r+0xc40>
811204ac:	843ffc04 	addi	r16,r16,-16
811204b0:	d8c01c17 	ldw	r3,112(sp)
811204b4:	d8801b17 	ldw	r2,108(sp)
811204b8:	d811883a 	mov	r8,sp
811204bc:	3c3fed16 	blt	r7,r16,81120474 <__reset+0xfb100474>
811204c0:	dac02217 	ldw	r11,136(sp)
811204c4:	1c07883a 	add	r3,r3,r16
811204c8:	10800044 	addi	r2,r2,1
811204cc:	42c00015 	stw	r11,0(r8)
811204d0:	44000115 	stw	r16,4(r8)
811204d4:	d8c01c15 	stw	r3,112(sp)
811204d8:	d8801b15 	stw	r2,108(sp)
811204dc:	010001c4 	movi	r4,7
811204e0:	20809e16 	blt	r4,r2,8112075c <___svfiprintf_internal_r+0xd90>
811204e4:	42000204 	addi	r8,r8,8
811204e8:	dac02117 	ldw	r11,132(sp)
811204ec:	10800044 	addi	r2,r2,1
811204f0:	44400015 	stw	r17,0(r8)
811204f4:	58c7883a 	add	r3,r11,r3
811204f8:	42c00115 	stw	r11,4(r8)
811204fc:	d8c01c15 	stw	r3,112(sp)
81120500:	d8801b15 	stw	r2,108(sp)
81120504:	010001c4 	movi	r4,7
81120508:	20807f16 	blt	r4,r2,81120708 <___svfiprintf_internal_r+0xd3c>
8112050c:	42000204 	addi	r8,r8,8
81120510:	9480010c 	andi	r18,r18,4
81120514:	90002926 	beq	r18,zero,811205bc <___svfiprintf_internal_r+0xbf0>
81120518:	dac02417 	ldw	r11,144(sp)
8112051c:	d8802017 	ldw	r2,128(sp)
81120520:	58a1c83a 	sub	r16,r11,r2
81120524:	0400250e 	bge	zero,r16,811205bc <___svfiprintf_internal_r+0xbf0>
81120528:	04400404 	movi	r17,16
8112052c:	d8801b17 	ldw	r2,108(sp)
81120530:	8c017c0e 	bge	r17,r16,81120b24 <___svfiprintf_internal_r+0x1158>
81120534:	01604534 	movhi	r5,33044
81120538:	29772a04 	addi	r5,r5,-9048
8112053c:	d9402815 	stw	r5,160(sp)
81120540:	048001c4 	movi	r18,7
81120544:	00000306 	br	81120554 <___svfiprintf_internal_r+0xb88>
81120548:	843ffc04 	addi	r16,r16,-16
8112054c:	42000204 	addi	r8,r8,8
81120550:	8c00110e 	bge	r17,r16,81120598 <___svfiprintf_internal_r+0xbcc>
81120554:	18c00404 	addi	r3,r3,16
81120558:	10800044 	addi	r2,r2,1
8112055c:	45800015 	stw	r22,0(r8)
81120560:	44400115 	stw	r17,4(r8)
81120564:	d8c01c15 	stw	r3,112(sp)
81120568:	d8801b15 	stw	r2,108(sp)
8112056c:	90bff60e 	bge	r18,r2,81120548 <__reset+0xfb100548>
81120570:	d9801a04 	addi	r6,sp,104
81120574:	b80b883a 	mov	r5,r23
81120578:	a809883a 	mov	r4,r21
8112057c:	111f7f40 	call	8111f7f4 <__ssprint_r>
81120580:	1000221e 	bne	r2,zero,8112060c <___svfiprintf_internal_r+0xc40>
81120584:	843ffc04 	addi	r16,r16,-16
81120588:	d8c01c17 	ldw	r3,112(sp)
8112058c:	d8801b17 	ldw	r2,108(sp)
81120590:	d811883a 	mov	r8,sp
81120594:	8c3fef16 	blt	r17,r16,81120554 <__reset+0xfb100554>
81120598:	dac02817 	ldw	r11,160(sp)
8112059c:	1c07883a 	add	r3,r3,r16
811205a0:	10800044 	addi	r2,r2,1
811205a4:	42c00015 	stw	r11,0(r8)
811205a8:	44000115 	stw	r16,4(r8)
811205ac:	d8c01c15 	stw	r3,112(sp)
811205b0:	d8801b15 	stw	r2,108(sp)
811205b4:	010001c4 	movi	r4,7
811205b8:	2080aa16 	blt	r4,r2,81120864 <___svfiprintf_internal_r+0xe98>
811205bc:	d8802417 	ldw	r2,144(sp)
811205c0:	dac02017 	ldw	r11,128(sp)
811205c4:	12c0010e 	bge	r2,r11,811205cc <___svfiprintf_internal_r+0xc00>
811205c8:	5805883a 	mov	r2,r11
811205cc:	dac02517 	ldw	r11,148(sp)
811205d0:	5897883a 	add	r11,r11,r2
811205d4:	dac02515 	stw	r11,148(sp)
811205d8:	1800531e 	bne	r3,zero,81120728 <___svfiprintf_internal_r+0xd5c>
811205dc:	98800007 	ldb	r2,0(r19)
811205e0:	d8001b15 	stw	zero,108(sp)
811205e4:	d811883a 	mov	r8,sp
811205e8:	103d231e 	bne	r2,zero,8111fa78 <__reset+0xfb0ffa78>
811205ec:	9823883a 	mov	r17,r19
811205f0:	003d3906 	br	8111fad8 <__reset+0xfb0ffad8>
811205f4:	d8801c17 	ldw	r2,112(sp)
811205f8:	10000426 	beq	r2,zero,8112060c <___svfiprintf_internal_r+0xc40>
811205fc:	d9402717 	ldw	r5,156(sp)
81120600:	d9002a17 	ldw	r4,168(sp)
81120604:	d9801a04 	addi	r6,sp,104
81120608:	111f7f40 	call	8111f7f4 <__ssprint_r>
8112060c:	dac02717 	ldw	r11,156(sp)
81120610:	d8802517 	ldw	r2,148(sp)
81120614:	58c0030b 	ldhu	r3,12(r11)
81120618:	18c0100c 	andi	r3,r3,64
8112061c:	1801381e 	bne	r3,zero,81120b00 <___svfiprintf_internal_r+0x1134>
81120620:	dfc03717 	ldw	ra,220(sp)
81120624:	df003617 	ldw	fp,216(sp)
81120628:	ddc03517 	ldw	r23,212(sp)
8112062c:	dd803417 	ldw	r22,208(sp)
81120630:	dd403317 	ldw	r21,204(sp)
81120634:	dd003217 	ldw	r20,200(sp)
81120638:	dcc03117 	ldw	r19,196(sp)
8112063c:	dc803017 	ldw	r18,192(sp)
81120640:	dc402f17 	ldw	r17,188(sp)
81120644:	dc002e17 	ldw	r16,184(sp)
81120648:	dec03804 	addi	sp,sp,224
8112064c:	f800283a 	ret
81120650:	dac02417 	ldw	r11,144(sp)
81120654:	d9002017 	ldw	r4,128(sp)
81120658:	5939c83a 	sub	fp,r11,r4
8112065c:	073f780e 	bge	zero,fp,81120440 <__reset+0xfb100440>
81120660:	02400404 	movi	r9,16
81120664:	4f01370e 	bge	r9,fp,81120b44 <___svfiprintf_internal_r+0x1178>
81120668:	02e04534 	movhi	r11,33044
8112066c:	5af72604 	addi	r11,r11,-9064
81120670:	dac02215 	stw	r11,136(sp)
81120674:	028001c4 	movi	r10,7
81120678:	00000306 	br	81120688 <___svfiprintf_internal_r+0xcbc>
8112067c:	e73ffc04 	addi	fp,fp,-16
81120680:	42000204 	addi	r8,r8,8
81120684:	4f00150e 	bge	r9,fp,811206dc <___svfiprintf_internal_r+0xd10>
81120688:	18c00404 	addi	r3,r3,16
8112068c:	10800044 	addi	r2,r2,1
81120690:	45000015 	stw	r20,0(r8)
81120694:	42400115 	stw	r9,4(r8)
81120698:	d8c01c15 	stw	r3,112(sp)
8112069c:	d8801b15 	stw	r2,108(sp)
811206a0:	50bff60e 	bge	r10,r2,8112067c <__reset+0xfb10067c>
811206a4:	d9801a04 	addi	r6,sp,104
811206a8:	b80b883a 	mov	r5,r23
811206ac:	a809883a 	mov	r4,r21
811206b0:	da402c15 	stw	r9,176(sp)
811206b4:	da802d15 	stw	r10,180(sp)
811206b8:	111f7f40 	call	8111f7f4 <__ssprint_r>
811206bc:	da402c17 	ldw	r9,176(sp)
811206c0:	da802d17 	ldw	r10,180(sp)
811206c4:	103fd11e 	bne	r2,zero,8112060c <__reset+0xfb10060c>
811206c8:	e73ffc04 	addi	fp,fp,-16
811206cc:	d8c01c17 	ldw	r3,112(sp)
811206d0:	d8801b17 	ldw	r2,108(sp)
811206d4:	d811883a 	mov	r8,sp
811206d8:	4f3feb16 	blt	r9,fp,81120688 <__reset+0xfb100688>
811206dc:	dac02217 	ldw	r11,136(sp)
811206e0:	1f07883a 	add	r3,r3,fp
811206e4:	10800044 	addi	r2,r2,1
811206e8:	42c00015 	stw	r11,0(r8)
811206ec:	47000115 	stw	fp,4(r8)
811206f0:	d8c01c15 	stw	r3,112(sp)
811206f4:	d8801b15 	stw	r2,108(sp)
811206f8:	010001c4 	movi	r4,7
811206fc:	2080b616 	blt	r4,r2,811209d8 <___svfiprintf_internal_r+0x100c>
81120700:	42000204 	addi	r8,r8,8
81120704:	003f4e06 	br	81120440 <__reset+0xfb100440>
81120708:	d9801a04 	addi	r6,sp,104
8112070c:	b80b883a 	mov	r5,r23
81120710:	a809883a 	mov	r4,r21
81120714:	111f7f40 	call	8111f7f4 <__ssprint_r>
81120718:	103fbc1e 	bne	r2,zero,8112060c <__reset+0xfb10060c>
8112071c:	d8c01c17 	ldw	r3,112(sp)
81120720:	d811883a 	mov	r8,sp
81120724:	003f7a06 	br	81120510 <__reset+0xfb100510>
81120728:	d9801a04 	addi	r6,sp,104
8112072c:	b80b883a 	mov	r5,r23
81120730:	a809883a 	mov	r4,r21
81120734:	111f7f40 	call	8111f7f4 <__ssprint_r>
81120738:	103fa826 	beq	r2,zero,811205dc <__reset+0xfb1005dc>
8112073c:	003fb306 	br	8112060c <__reset+0xfb10060c>
81120740:	d9801a04 	addi	r6,sp,104
81120744:	b80b883a 	mov	r5,r23
81120748:	a809883a 	mov	r4,r21
8112074c:	111f7f40 	call	8111f7f4 <__ssprint_r>
81120750:	103fae1e 	bne	r2,zero,8112060c <__reset+0xfb10060c>
81120754:	d811883a 	mov	r8,sp
81120758:	003cdc06 	br	8111facc <__reset+0xfb0ffacc>
8112075c:	d9801a04 	addi	r6,sp,104
81120760:	b80b883a 	mov	r5,r23
81120764:	a809883a 	mov	r4,r21
81120768:	111f7f40 	call	8111f7f4 <__ssprint_r>
8112076c:	103fa71e 	bne	r2,zero,8112060c <__reset+0xfb10060c>
81120770:	d8c01c17 	ldw	r3,112(sp)
81120774:	d8801b17 	ldw	r2,108(sp)
81120778:	d811883a 	mov	r8,sp
8112077c:	003f5a06 	br	811204e8 <__reset+0xfb1004e8>
81120780:	d9801a04 	addi	r6,sp,104
81120784:	b80b883a 	mov	r5,r23
81120788:	a809883a 	mov	r4,r21
8112078c:	111f7f40 	call	8111f7f4 <__ssprint_r>
81120790:	103f9e1e 	bne	r2,zero,8112060c <__reset+0xfb10060c>
81120794:	d8c01c17 	ldw	r3,112(sp)
81120798:	d8801b17 	ldw	r2,108(sp)
8112079c:	d811883a 	mov	r8,sp
811207a0:	003f1706 	br	81120400 <__reset+0xfb100400>
811207a4:	d9801a04 	addi	r6,sp,104
811207a8:	b80b883a 	mov	r5,r23
811207ac:	a809883a 	mov	r4,r21
811207b0:	111f7f40 	call	8111f7f4 <__ssprint_r>
811207b4:	103f951e 	bne	r2,zero,8112060c <__reset+0xfb10060c>
811207b8:	d8c01c17 	ldw	r3,112(sp)
811207bc:	d8801b17 	ldw	r2,108(sp)
811207c0:	d811883a 	mov	r8,sp
811207c4:	003f1b06 	br	81120434 <__reset+0xfb100434>
811207c8:	d8001d85 	stb	zero,118(sp)
811207cc:	80007b16 	blt	r16,zero,811209bc <___svfiprintf_internal_r+0xff0>
811207d0:	00ffdfc4 	movi	r3,-129
811207d4:	e244b03a 	or	r2,fp,r9
811207d8:	90e4703a 	and	r18,r18,r3
811207dc:	103d7026 	beq	r2,zero,8111fda0 <__reset+0xfb0ffda0>
811207e0:	0015883a 	mov	r10,zero
811207e4:	003d7206 	br	8111fdb0 <__reset+0xfb0ffdb0>
811207e8:	d9801a04 	addi	r6,sp,104
811207ec:	b80b883a 	mov	r5,r23
811207f0:	a809883a 	mov	r4,r21
811207f4:	111f7f40 	call	8111f7f4 <__ssprint_r>
811207f8:	103f841e 	bne	r2,zero,8112060c <__reset+0xfb10060c>
811207fc:	d8c01c17 	ldw	r3,112(sp)
81120800:	d8801b17 	ldw	r2,108(sp)
81120804:	d811883a 	mov	r8,sp
81120808:	003ef006 	br	811203cc <__reset+0xfb1003cc>
8112080c:	9080100c 	andi	r2,r18,64
81120810:	d8001d85 	stb	zero,118(sp)
81120814:	dac02317 	ldw	r11,140(sp)
81120818:	10008126 	beq	r2,zero,81120a20 <___svfiprintf_internal_r+0x1054>
8112081c:	58800104 	addi	r2,r11,4
81120820:	5f00000b 	ldhu	fp,0(r11)
81120824:	0013883a 	mov	r9,zero
81120828:	803ec30e 	bge	r16,zero,81120338 <__reset+0xfb100338>
8112082c:	d8802315 	stw	r2,140(sp)
81120830:	0015883a 	mov	r10,zero
81120834:	e244b03a 	or	r2,fp,r9
81120838:	103e371e 	bne	r2,zero,81120118 <__reset+0xfb100118>
8112083c:	00800044 	movi	r2,1
81120840:	10803fcc 	andi	r2,r2,255
81120844:	00c00044 	movi	r3,1
81120848:	10c06126 	beq	r2,r3,811209d0 <___svfiprintf_internal_r+0x1004>
8112084c:	00c00084 	movi	r3,2
81120850:	10fd5526 	beq	r2,r3,8111fda8 <__reset+0xfb0ffda8>
81120854:	003ed806 	br	811203b8 <__reset+0xfb1003b8>
81120858:	d8802315 	stw	r2,140(sp)
8112085c:	98c00007 	ldb	r3,0(r19)
81120860:	003cab06 	br	8111fb10 <__reset+0xfb0ffb10>
81120864:	d9801a04 	addi	r6,sp,104
81120868:	b80b883a 	mov	r5,r23
8112086c:	a809883a 	mov	r4,r21
81120870:	111f7f40 	call	8111f7f4 <__ssprint_r>
81120874:	103f651e 	bne	r2,zero,8112060c <__reset+0xfb10060c>
81120878:	d8c01c17 	ldw	r3,112(sp)
8112087c:	003f4f06 	br	811205bc <__reset+0xfb1005bc>
81120880:	00a04534 	movhi	r2,33044
81120884:	10b69c04 	addi	r2,r2,-9616
81120888:	d8802915 	stw	r2,164(sp)
8112088c:	003d4406 	br	8111fda0 <__reset+0xfb0ffda0>
81120890:	dac02317 	ldw	r11,140(sp)
81120894:	58800017 	ldw	r2,0(r11)
81120898:	dac02517 	ldw	r11,148(sp)
8112089c:	5807d7fa 	srai	r3,r11,31
811208a0:	dac02317 	ldw	r11,140(sp)
811208a4:	10c00115 	stw	r3,4(r2)
811208a8:	5ac00104 	addi	r11,r11,4
811208ac:	dac02315 	stw	r11,140(sp)
811208b0:	dac02517 	ldw	r11,148(sp)
811208b4:	12c00015 	stw	r11,0(r2)
811208b8:	003c6d06 	br	8111fa70 <__reset+0xfb0ffa70>
811208bc:	9080100c 	andi	r2,r18,64
811208c0:	dac02317 	ldw	r11,140(sp)
811208c4:	103e5326 	beq	r2,zero,81120214 <__reset+0xfb100214>
811208c8:	5f00000f 	ldh	fp,0(r11)
811208cc:	5ac00104 	addi	r11,r11,4
811208d0:	dac02315 	stw	r11,140(sp)
811208d4:	e013d7fa 	srai	r9,fp,31
811208d8:	4805883a 	mov	r2,r9
811208dc:	003e0706 	br	811200fc <__reset+0xfb1000fc>
811208e0:	00800c04 	movi	r2,48
811208e4:	d8801d05 	stb	r2,116(sp)
811208e8:	d8c01d45 	stb	r3,117(sp)
811208ec:	d8001d85 	stb	zero,118(sp)
811208f0:	90800094 	ori	r2,r18,2
811208f4:	80008f16 	blt	r16,zero,81120b34 <___svfiprintf_internal_r+0x1168>
811208f8:	00bfdfc4 	movi	r2,-129
811208fc:	90a4703a 	and	r18,r18,r2
81120900:	94800094 	ori	r18,r18,2
81120904:	0015883a 	mov	r10,zero
81120908:	003d2906 	br	8111fdb0 <__reset+0xfb0ffdb0>
8112090c:	98c00007 	ldb	r3,0(r19)
81120910:	003c7f06 	br	8111fb10 <__reset+0xfb0ffb10>
81120914:	dac02317 	ldw	r11,140(sp)
81120918:	0013883a 	mov	r9,zero
8112091c:	5f000017 	ldw	fp,0(r11)
81120920:	5ac00104 	addi	r11,r11,4
81120924:	dac02315 	stw	r11,140(sp)
81120928:	003d1506 	br	8111fd80 <__reset+0xfb0ffd80>
8112092c:	9080100c 	andi	r2,r18,64
81120930:	d8001d85 	stb	zero,118(sp)
81120934:	dac02317 	ldw	r11,140(sp)
81120938:	10003426 	beq	r2,zero,81120a0c <___svfiprintf_internal_r+0x1040>
8112093c:	58800104 	addi	r2,r11,4
81120940:	5f00000b 	ldhu	fp,0(r11)
81120944:	0013883a 	mov	r9,zero
81120948:	803e950e 	bge	r16,zero,811203a0 <__reset+0xfb1003a0>
8112094c:	e246b03a 	or	r3,fp,r9
81120950:	d8802315 	stw	r2,140(sp)
81120954:	183d5a1e 	bne	r3,zero,8111fec0 <__reset+0xfb0ffec0>
81120958:	0015883a 	mov	r10,zero
8112095c:	0005883a 	mov	r2,zero
81120960:	003fb706 	br	81120840 <__reset+0xfb100840>
81120964:	98c00043 	ldbu	r3,1(r19)
81120968:	94800814 	ori	r18,r18,32
8112096c:	9cc00044 	addi	r19,r19,1
81120970:	18c03fcc 	andi	r3,r3,255
81120974:	18c0201c 	xori	r3,r3,128
81120978:	18ffe004 	addi	r3,r3,-128
8112097c:	003c6406 	br	8111fb10 <__reset+0xfb0ffb10>
81120980:	d8c02315 	stw	r3,140(sp)
81120984:	0015883a 	mov	r10,zero
81120988:	003faa06 	br	81120834 <__reset+0xfb100834>
8112098c:	dac02317 	ldw	r11,140(sp)
81120990:	58800017 	ldw	r2,0(r11)
81120994:	5ac00104 	addi	r11,r11,4
81120998:	dac02315 	stw	r11,140(sp)
8112099c:	dac02517 	ldw	r11,148(sp)
811209a0:	12c00015 	stw	r11,0(r2)
811209a4:	003c3206 	br	8111fa70 <__reset+0xfb0ffa70>
811209a8:	01204534 	movhi	r4,33044
811209ac:	21369c04 	addi	r4,r4,-9616
811209b0:	d9002915 	stw	r4,164(sp)
811209b4:	d8c02315 	stw	r3,140(sp)
811209b8:	1025883a 	mov	r18,r2
811209bc:	e244b03a 	or	r2,fp,r9
811209c0:	103f871e 	bne	r2,zero,811207e0 <__reset+0xfb1007e0>
811209c4:	0015883a 	mov	r10,zero
811209c8:	00800084 	movi	r2,2
811209cc:	003f9c06 	br	81120840 <__reset+0xfb100840>
811209d0:	0039883a 	mov	fp,zero
811209d4:	003e5f06 	br	81120354 <__reset+0xfb100354>
811209d8:	d9801a04 	addi	r6,sp,104
811209dc:	b80b883a 	mov	r5,r23
811209e0:	a809883a 	mov	r4,r21
811209e4:	111f7f40 	call	8111f7f4 <__ssprint_r>
811209e8:	103f081e 	bne	r2,zero,8112060c <__reset+0xfb10060c>
811209ec:	d8c01c17 	ldw	r3,112(sp)
811209f0:	d8801b17 	ldw	r2,108(sp)
811209f4:	d811883a 	mov	r8,sp
811209f8:	003e9106 	br	81120440 <__reset+0xfb100440>
811209fc:	01204534 	movhi	r4,33044
81120a00:	21372604 	addi	r4,r4,-9064
81120a04:	d9002215 	stw	r4,136(sp)
81120a08:	003ead06 	br	811204c0 <__reset+0xfb1004c0>
81120a0c:	58800104 	addi	r2,r11,4
81120a10:	5f000017 	ldw	fp,0(r11)
81120a14:	0013883a 	mov	r9,zero
81120a18:	803e610e 	bge	r16,zero,811203a0 <__reset+0xfb1003a0>
81120a1c:	003fcb06 	br	8112094c <__reset+0xfb10094c>
81120a20:	58800104 	addi	r2,r11,4
81120a24:	5f000017 	ldw	fp,0(r11)
81120a28:	0013883a 	mov	r9,zero
81120a2c:	803e420e 	bge	r16,zero,81120338 <__reset+0xfb100338>
81120a30:	003f7e06 	br	8112082c <__reset+0xfb10082c>
81120a34:	5f000017 	ldw	fp,0(r11)
81120a38:	5ac00104 	addi	r11,r11,4
81120a3c:	0013883a 	mov	r9,zero
81120a40:	dac02315 	stw	r11,140(sp)
81120a44:	003cce06 	br	8111fd80 <__reset+0xfb0ffd80>
81120a48:	8809883a 	mov	r4,r17
81120a4c:	da002c15 	stw	r8,176(sp)
81120a50:	1112a400 	call	81112a40 <strlen>
81120a54:	d8802115 	stw	r2,132(sp)
81120a58:	da801d83 	ldbu	r10,118(sp)
81120a5c:	df002315 	stw	fp,140(sp)
81120a60:	0021883a 	mov	r16,zero
81120a64:	da002c17 	ldw	r8,176(sp)
81120a68:	003cf606 	br	8111fe44 <__reset+0xfb0ffe44>
81120a6c:	00800184 	movi	r2,6
81120a70:	1400012e 	bgeu	r2,r16,81120a78 <___svfiprintf_internal_r+0x10ac>
81120a74:	1021883a 	mov	r16,r2
81120a78:	dc002115 	stw	r16,132(sp)
81120a7c:	8005883a 	mov	r2,r16
81120a80:	80003c16 	blt	r16,zero,81120b74 <___svfiprintf_internal_r+0x11a8>
81120a84:	04604534 	movhi	r17,33044
81120a88:	d8802015 	stw	r2,128(sp)
81120a8c:	df002315 	stw	fp,140(sp)
81120a90:	8c76a104 	addi	r17,r17,-9596
81120a94:	003d2e06 	br	8111ff50 <__reset+0xfb0fff50>
81120a98:	04001004 	movi	r16,64
81120a9c:	800b883a 	mov	r5,r16
81120aa0:	11118b00 	call	811118b0 <_malloc_r>
81120aa4:	dac02717 	ldw	r11,156(sp)
81120aa8:	58800015 	stw	r2,0(r11)
81120aac:	58800415 	stw	r2,16(r11)
81120ab0:	10004826 	beq	r2,zero,81120bd4 <___svfiprintf_internal_r+0x1208>
81120ab4:	dac02717 	ldw	r11,156(sp)
81120ab8:	5c000515 	stw	r16,20(r11)
81120abc:	003bd906 	br	8111fa24 <__reset+0xfb0ffa24>
81120ac0:	9080004c 	andi	r2,r18,1
81120ac4:	0015883a 	mov	r10,zero
81120ac8:	10000626 	beq	r2,zero,81120ae4 <___svfiprintf_internal_r+0x1118>
81120acc:	dac02b17 	ldw	r11,172(sp)
81120ad0:	00800c04 	movi	r2,48
81120ad4:	d88019c5 	stb	r2,103(sp)
81120ad8:	dac02115 	stw	r11,132(sp)
81120adc:	dc4019c4 	addi	r17,sp,103
81120ae0:	003cd806 	br	8111fe44 <__reset+0xfb0ffe44>
81120ae4:	d8002115 	stw	zero,132(sp)
81120ae8:	dc401a04 	addi	r17,sp,104
81120aec:	003cd506 	br	8111fe44 <__reset+0xfb0ffe44>
81120af0:	01204534 	movhi	r4,33044
81120af4:	21372a04 	addi	r4,r4,-9048
81120af8:	d9002815 	stw	r4,160(sp)
81120afc:	003d4306 	br	8112000c <__reset+0xfb10000c>
81120b00:	00bfffc4 	movi	r2,-1
81120b04:	003ec606 	br	81120620 <__reset+0xfb100620>
81120b08:	00800044 	movi	r2,1
81120b0c:	10803fcc 	andi	r2,r2,255
81120b10:	00c00044 	movi	r3,1
81120b14:	10fd8026 	beq	r2,r3,81120118 <__reset+0xfb100118>
81120b18:	00c00084 	movi	r3,2
81120b1c:	10fca426 	beq	r2,r3,8111fdb0 <__reset+0xfb0ffdb0>
81120b20:	003ce806 	br	8111fec4 <__reset+0xfb0ffec4>
81120b24:	01204534 	movhi	r4,33044
81120b28:	21372a04 	addi	r4,r4,-9048
81120b2c:	d9002815 	stw	r4,160(sp)
81120b30:	003e9906 	br	81120598 <__reset+0xfb100598>
81120b34:	1025883a 	mov	r18,r2
81120b38:	0015883a 	mov	r10,zero
81120b3c:	00800084 	movi	r2,2
81120b40:	003ff206 	br	81120b0c <__reset+0xfb100b0c>
81120b44:	01604534 	movhi	r5,33044
81120b48:	29772604 	addi	r5,r5,-9064
81120b4c:	d9402215 	stw	r5,136(sp)
81120b50:	003ee206 	br	811206dc <__reset+0xfb1006dc>
81120b54:	5827883a 	mov	r19,r11
81120b58:	0021883a 	mov	r16,zero
81120b5c:	003bed06 	br	8111fb14 <__reset+0xfb0ffb14>
81120b60:	dc002115 	stw	r16,132(sp)
81120b64:	da801d83 	ldbu	r10,118(sp)
81120b68:	df002315 	stw	fp,140(sp)
81120b6c:	0021883a 	mov	r16,zero
81120b70:	003cb406 	br	8111fe44 <__reset+0xfb0ffe44>
81120b74:	0005883a 	mov	r2,zero
81120b78:	003fc206 	br	81120a84 <__reset+0xfb100a84>
81120b7c:	d8802317 	ldw	r2,140(sp)
81120b80:	98c00043 	ldbu	r3,1(r19)
81120b84:	5827883a 	mov	r19,r11
81120b88:	14000017 	ldw	r16,0(r2)
81120b8c:	10800104 	addi	r2,r2,4
81120b90:	d8802315 	stw	r2,140(sp)
81120b94:	803f760e 	bge	r16,zero,81120970 <__reset+0xfb100970>
81120b98:	18c03fcc 	andi	r3,r3,255
81120b9c:	18c0201c 	xori	r3,r3,128
81120ba0:	043fffc4 	movi	r16,-1
81120ba4:	18ffe004 	addi	r3,r3,-128
81120ba8:	003bd906 	br	8111fb10 <__reset+0xfb0ffb10>
81120bac:	d9c01d85 	stb	r7,118(sp)
81120bb0:	003cb606 	br	8111fe8c <__reset+0xfb0ffe8c>
81120bb4:	d9c01d85 	stb	r7,118(sp)
81120bb8:	003d2106 	br	81120040 <__reset+0xfb100040>
81120bbc:	d9c01d85 	stb	r7,118(sp)
81120bc0:	003d8e06 	br	811201fc <__reset+0xfb1001fc>
81120bc4:	d9c01d85 	stb	r7,118(sp)
81120bc8:	003db306 	br	81120298 <__reset+0xfb100298>
81120bcc:	d9c01d85 	stb	r7,118(sp)
81120bd0:	003c8a06 	br	8111fdfc <__reset+0xfb0ffdfc>
81120bd4:	dac02a17 	ldw	r11,168(sp)
81120bd8:	00800304 	movi	r2,12
81120bdc:	58800015 	stw	r2,0(r11)
81120be0:	00bfffc4 	movi	r2,-1
81120be4:	003e8e06 	br	81120620 <__reset+0xfb100620>
81120be8:	d9c01d85 	stb	r7,118(sp)
81120bec:	003dc706 	br	8112030c <__reset+0xfb10030c>
81120bf0:	d9c01d85 	stb	r7,118(sp)
81120bf4:	003ddf06 	br	81120374 <__reset+0xfb100374>
81120bf8:	d9c01d85 	stb	r7,118(sp)
81120bfc:	003d3706 	br	811200dc <__reset+0xfb1000dc>
81120c00:	d9c01d85 	stb	r7,118(sp)
81120c04:	003c5406 	br	8111fd58 <__reset+0xfb0ffd58>
81120c08:	d9c01d85 	stb	r7,118(sp)
81120c0c:	003d1d06 	br	81120084 <__reset+0xfb100084>

81120c10 <__submore>:
81120c10:	defffa04 	addi	sp,sp,-24
81120c14:	de00012e 	bgeu	sp,et,81120c1c <__submore+0xc>
81120c18:	003b68fa 	trap	3
81120c1c:	dc000015 	stw	r16,0(sp)
81120c20:	2821883a 	mov	r16,r5
81120c24:	29400c17 	ldw	r5,48(r5)
81120c28:	dfc00515 	stw	ra,20(sp)
81120c2c:	dd000415 	stw	r20,16(sp)
81120c30:	dcc00315 	stw	r19,12(sp)
81120c34:	dc800215 	stw	r18,8(sp)
81120c38:	dc400115 	stw	r17,4(sp)
81120c3c:	80801004 	addi	r2,r16,64
81120c40:	28801726 	beq	r5,r2,81120ca0 <__submore+0x90>
81120c44:	84400d17 	ldw	r17,52(r16)
81120c48:	8c67883a 	add	r19,r17,r17
81120c4c:	980d883a 	mov	r6,r19
81120c50:	111d09c0 	call	8111d09c <_realloc_r>
81120c54:	1025883a 	mov	r18,r2
81120c58:	10002226 	beq	r2,zero,81120ce4 <__submore+0xd4>
81120c5c:	1469883a 	add	r20,r2,r17
81120c60:	880d883a 	mov	r6,r17
81120c64:	100b883a 	mov	r5,r2
81120c68:	a009883a 	mov	r4,r20
81120c6c:	11120c40 	call	811120c4 <memcpy>
81120c70:	0005883a 	mov	r2,zero
81120c74:	85000015 	stw	r20,0(r16)
81120c78:	84800c15 	stw	r18,48(r16)
81120c7c:	84c00d15 	stw	r19,52(r16)
81120c80:	dfc00517 	ldw	ra,20(sp)
81120c84:	dd000417 	ldw	r20,16(sp)
81120c88:	dcc00317 	ldw	r19,12(sp)
81120c8c:	dc800217 	ldw	r18,8(sp)
81120c90:	dc400117 	ldw	r17,4(sp)
81120c94:	dc000017 	ldw	r16,0(sp)
81120c98:	dec00604 	addi	sp,sp,24
81120c9c:	f800283a 	ret
81120ca0:	04410004 	movi	r17,1024
81120ca4:	880b883a 	mov	r5,r17
81120ca8:	11118b00 	call	811118b0 <_malloc_r>
81120cac:	1007883a 	mov	r3,r2
81120cb0:	10000c26 	beq	r2,zero,81120ce4 <__submore+0xd4>
81120cb4:	80801083 	ldbu	r2,66(r16)
81120cb8:	80c00c15 	stw	r3,48(r16)
81120cbc:	84400d15 	stw	r17,52(r16)
81120cc0:	1880ffc5 	stb	r2,1023(r3)
81120cc4:	81401043 	ldbu	r5,65(r16)
81120cc8:	1900ff44 	addi	r4,r3,1021
81120ccc:	0005883a 	mov	r2,zero
81120cd0:	1940ff85 	stb	r5,1022(r3)
81120cd4:	81401003 	ldbu	r5,64(r16)
81120cd8:	1940ff45 	stb	r5,1021(r3)
81120cdc:	81000015 	stw	r4,0(r16)
81120ce0:	003fe706 	br	81120c80 <__reset+0xfb100c80>
81120ce4:	00bfffc4 	movi	r2,-1
81120ce8:	003fe506 	br	81120c80 <__reset+0xfb100c80>

81120cec <_ungetc_r>:
81120cec:	00bfffc4 	movi	r2,-1
81120cf0:	28806326 	beq	r5,r2,81120e80 <_ungetc_r+0x194>
81120cf4:	defffb04 	addi	sp,sp,-20
81120cf8:	de00012e 	bgeu	sp,et,81120d00 <_ungetc_r+0x14>
81120cfc:	003b68fa 	trap	3
81120d00:	dcc00315 	stw	r19,12(sp)
81120d04:	dc400115 	stw	r17,4(sp)
81120d08:	dc000015 	stw	r16,0(sp)
81120d0c:	dfc00415 	stw	ra,16(sp)
81120d10:	dc800215 	stw	r18,8(sp)
81120d14:	2023883a 	mov	r17,r4
81120d18:	3021883a 	mov	r16,r6
81120d1c:	2827883a 	mov	r19,r5
81120d20:	20000226 	beq	r4,zero,81120d2c <_ungetc_r+0x40>
81120d24:	20800e17 	ldw	r2,56(r4)
81120d28:	10002e26 	beq	r2,zero,81120de4 <_ungetc_r+0xf8>
81120d2c:	80c0030b 	ldhu	r3,12(r16)
81120d30:	1888000c 	andi	r2,r3,8192
81120d34:	1000051e 	bne	r2,zero,81120d4c <_ungetc_r+0x60>
81120d38:	81001917 	ldw	r4,100(r16)
81120d3c:	00b7ffc4 	movi	r2,-8193
81120d40:	18c80014 	ori	r3,r3,8192
81120d44:	2084703a 	and	r2,r4,r2
81120d48:	80801915 	stw	r2,100(r16)
81120d4c:	00bff7c4 	movi	r2,-33
81120d50:	1884703a 	and	r2,r3,r2
81120d54:	8080030d 	sth	r2,12(r16)
81120d58:	1900010c 	andi	r4,r3,4
81120d5c:	2000061e 	bne	r4,zero,81120d78 <_ungetc_r+0x8c>
81120d60:	1900040c 	andi	r4,r3,16
81120d64:	20001d26 	beq	r4,zero,81120ddc <_ungetc_r+0xf0>
81120d68:	18c0020c 	andi	r3,r3,8
81120d6c:	1800331e 	bne	r3,zero,81120e3c <_ungetc_r+0x150>
81120d70:	10800114 	ori	r2,r2,4
81120d74:	8080030d 	sth	r2,12(r16)
81120d78:	80800c17 	ldw	r2,48(r16)
81120d7c:	9c803fcc 	andi	r18,r19,255
81120d80:	10001a26 	beq	r2,zero,81120dec <_ungetc_r+0x100>
81120d84:	80c00117 	ldw	r3,4(r16)
81120d88:	80800d17 	ldw	r2,52(r16)
81120d8c:	18800f0e 	bge	r3,r2,81120dcc <_ungetc_r+0xe0>
81120d90:	80c00017 	ldw	r3,0(r16)
81120d94:	9005883a 	mov	r2,r18
81120d98:	193fffc4 	addi	r4,r3,-1
81120d9c:	81000015 	stw	r4,0(r16)
81120da0:	1cffffc5 	stb	r19,-1(r3)
81120da4:	80c00117 	ldw	r3,4(r16)
81120da8:	18c00044 	addi	r3,r3,1
81120dac:	80c00115 	stw	r3,4(r16)
81120db0:	dfc00417 	ldw	ra,16(sp)
81120db4:	dcc00317 	ldw	r19,12(sp)
81120db8:	dc800217 	ldw	r18,8(sp)
81120dbc:	dc400117 	ldw	r17,4(sp)
81120dc0:	dc000017 	ldw	r16,0(sp)
81120dc4:	dec00504 	addi	sp,sp,20
81120dc8:	f800283a 	ret
81120dcc:	800b883a 	mov	r5,r16
81120dd0:	8809883a 	mov	r4,r17
81120dd4:	1120c100 	call	81120c10 <__submore>
81120dd8:	103fed26 	beq	r2,zero,81120d90 <__reset+0xfb100d90>
81120ddc:	00bfffc4 	movi	r2,-1
81120de0:	003ff306 	br	81120db0 <__reset+0xfb100db0>
81120de4:	111ab700 	call	8111ab70 <__sinit>
81120de8:	003fd006 	br	81120d2c <__reset+0xfb100d2c>
81120dec:	80c00417 	ldw	r3,16(r16)
81120df0:	80800017 	ldw	r2,0(r16)
81120df4:	18000326 	beq	r3,zero,81120e04 <_ungetc_r+0x118>
81120df8:	1880022e 	bgeu	r3,r2,81120e04 <_ungetc_r+0x118>
81120dfc:	10ffffc3 	ldbu	r3,-1(r2)
81120e00:	90c01826 	beq	r18,r3,81120e64 <_ungetc_r+0x178>
81120e04:	81400117 	ldw	r5,4(r16)
81120e08:	80800e15 	stw	r2,56(r16)
81120e0c:	008000c4 	movi	r2,3
81120e10:	81001004 	addi	r4,r16,64
81120e14:	80c01084 	addi	r3,r16,66
81120e18:	80800d15 	stw	r2,52(r16)
81120e1c:	00800044 	movi	r2,1
81120e20:	80800115 	stw	r2,4(r16)
81120e24:	81400f15 	stw	r5,60(r16)
81120e28:	81000c15 	stw	r4,48(r16)
81120e2c:	84c01085 	stb	r19,66(r16)
81120e30:	80c00015 	stw	r3,0(r16)
81120e34:	9005883a 	mov	r2,r18
81120e38:	003fdd06 	br	81120db0 <__reset+0xfb100db0>
81120e3c:	800b883a 	mov	r5,r16
81120e40:	8809883a 	mov	r4,r17
81120e44:	111a7740 	call	8111a774 <_fflush_r>
81120e48:	103fe41e 	bne	r2,zero,81120ddc <__reset+0xfb100ddc>
81120e4c:	8080030b 	ldhu	r2,12(r16)
81120e50:	00fffdc4 	movi	r3,-9
81120e54:	80000215 	stw	zero,8(r16)
81120e58:	1884703a 	and	r2,r3,r2
81120e5c:	80000615 	stw	zero,24(r16)
81120e60:	003fc306 	br	81120d70 <__reset+0xfb100d70>
81120e64:	80c00117 	ldw	r3,4(r16)
81120e68:	10bfffc4 	addi	r2,r2,-1
81120e6c:	80800015 	stw	r2,0(r16)
81120e70:	18800044 	addi	r2,r3,1
81120e74:	80800115 	stw	r2,4(r16)
81120e78:	9005883a 	mov	r2,r18
81120e7c:	003fcc06 	br	81120db0 <__reset+0xfb100db0>
81120e80:	00bfffc4 	movi	r2,-1
81120e84:	f800283a 	ret

81120e88 <ungetc>:
81120e88:	00a04534 	movhi	r2,33044
81120e8c:	10bf9d04 	addi	r2,r2,-396
81120e90:	280d883a 	mov	r6,r5
81120e94:	200b883a 	mov	r5,r4
81120e98:	11000017 	ldw	r4,0(r2)
81120e9c:	1120cec1 	jmpi	81120cec <_ungetc_r>

81120ea0 <__sprint_r.part.0>:
81120ea0:	defff604 	addi	sp,sp,-40
81120ea4:	de00012e 	bgeu	sp,et,81120eac <__sprint_r.part.0+0xc>
81120ea8:	003b68fa 	trap	3
81120eac:	28801917 	ldw	r2,100(r5)
81120eb0:	dd400515 	stw	r21,20(sp)
81120eb4:	dfc00915 	stw	ra,36(sp)
81120eb8:	df000815 	stw	fp,32(sp)
81120ebc:	ddc00715 	stw	r23,28(sp)
81120ec0:	dd800615 	stw	r22,24(sp)
81120ec4:	dd000415 	stw	r20,16(sp)
81120ec8:	dcc00315 	stw	r19,12(sp)
81120ecc:	dc800215 	stw	r18,8(sp)
81120ed0:	dc400115 	stw	r17,4(sp)
81120ed4:	dc000015 	stw	r16,0(sp)
81120ed8:	1088000c 	andi	r2,r2,8192
81120edc:	302b883a 	mov	r21,r6
81120ee0:	10002e26 	beq	r2,zero,81120f9c <__sprint_r.part.0+0xfc>
81120ee4:	30800217 	ldw	r2,8(r6)
81120ee8:	35800017 	ldw	r22,0(r6)
81120eec:	10002926 	beq	r2,zero,81120f94 <__sprint_r.part.0+0xf4>
81120ef0:	2827883a 	mov	r19,r5
81120ef4:	2029883a 	mov	r20,r4
81120ef8:	b5c00104 	addi	r23,r22,4
81120efc:	04bfffc4 	movi	r18,-1
81120f00:	bc400017 	ldw	r17,0(r23)
81120f04:	b4000017 	ldw	r16,0(r22)
81120f08:	0039883a 	mov	fp,zero
81120f0c:	8822d0ba 	srli	r17,r17,2
81120f10:	8800031e 	bne	r17,zero,81120f20 <__sprint_r.part.0+0x80>
81120f14:	00001806 	br	81120f78 <__sprint_r.part.0+0xd8>
81120f18:	84000104 	addi	r16,r16,4
81120f1c:	8f001526 	beq	r17,fp,81120f74 <__sprint_r.part.0+0xd4>
81120f20:	81400017 	ldw	r5,0(r16)
81120f24:	980d883a 	mov	r6,r19
81120f28:	a009883a 	mov	r4,r20
81120f2c:	11228440 	call	81122844 <_fputwc_r>
81120f30:	e7000044 	addi	fp,fp,1
81120f34:	14bff81e 	bne	r2,r18,81120f18 <__reset+0xfb100f18>
81120f38:	9005883a 	mov	r2,r18
81120f3c:	a8000215 	stw	zero,8(r21)
81120f40:	a8000115 	stw	zero,4(r21)
81120f44:	dfc00917 	ldw	ra,36(sp)
81120f48:	df000817 	ldw	fp,32(sp)
81120f4c:	ddc00717 	ldw	r23,28(sp)
81120f50:	dd800617 	ldw	r22,24(sp)
81120f54:	dd400517 	ldw	r21,20(sp)
81120f58:	dd000417 	ldw	r20,16(sp)
81120f5c:	dcc00317 	ldw	r19,12(sp)
81120f60:	dc800217 	ldw	r18,8(sp)
81120f64:	dc400117 	ldw	r17,4(sp)
81120f68:	dc000017 	ldw	r16,0(sp)
81120f6c:	dec00a04 	addi	sp,sp,40
81120f70:	f800283a 	ret
81120f74:	a8800217 	ldw	r2,8(r21)
81120f78:	8c63883a 	add	r17,r17,r17
81120f7c:	8c63883a 	add	r17,r17,r17
81120f80:	1445c83a 	sub	r2,r2,r17
81120f84:	a8800215 	stw	r2,8(r21)
81120f88:	b5800204 	addi	r22,r22,8
81120f8c:	bdc00204 	addi	r23,r23,8
81120f90:	103fdb1e 	bne	r2,zero,81120f00 <__reset+0xfb100f00>
81120f94:	0005883a 	mov	r2,zero
81120f98:	003fe806 	br	81120f3c <__reset+0xfb100f3c>
81120f9c:	111b3200 	call	8111b320 <__sfvwrite_r>
81120fa0:	003fe606 	br	81120f3c <__reset+0xfb100f3c>

81120fa4 <__sprint_r>:
81120fa4:	30c00217 	ldw	r3,8(r6)
81120fa8:	18000126 	beq	r3,zero,81120fb0 <__sprint_r+0xc>
81120fac:	1120ea01 	jmpi	81120ea0 <__sprint_r.part.0>
81120fb0:	30000115 	stw	zero,4(r6)
81120fb4:	0005883a 	mov	r2,zero
81120fb8:	f800283a 	ret

81120fbc <___vfiprintf_internal_r>:
81120fbc:	deffc904 	addi	sp,sp,-220
81120fc0:	de00012e 	bgeu	sp,et,81120fc8 <___vfiprintf_internal_r+0xc>
81120fc4:	003b68fa 	trap	3
81120fc8:	df003515 	stw	fp,212(sp)
81120fcc:	dd003115 	stw	r20,196(sp)
81120fd0:	dfc03615 	stw	ra,216(sp)
81120fd4:	ddc03415 	stw	r23,208(sp)
81120fd8:	dd803315 	stw	r22,204(sp)
81120fdc:	dd403215 	stw	r21,200(sp)
81120fe0:	dcc03015 	stw	r19,192(sp)
81120fe4:	dc802f15 	stw	r18,188(sp)
81120fe8:	dc402e15 	stw	r17,184(sp)
81120fec:	dc002d15 	stw	r16,180(sp)
81120ff0:	d9002015 	stw	r4,128(sp)
81120ff4:	d9c02215 	stw	r7,136(sp)
81120ff8:	2829883a 	mov	r20,r5
81120ffc:	3039883a 	mov	fp,r6
81121000:	20000226 	beq	r4,zero,8112100c <___vfiprintf_internal_r+0x50>
81121004:	20800e17 	ldw	r2,56(r4)
81121008:	1000cf26 	beq	r2,zero,81121348 <___vfiprintf_internal_r+0x38c>
8112100c:	a080030b 	ldhu	r2,12(r20)
81121010:	10c8000c 	andi	r3,r2,8192
81121014:	1800061e 	bne	r3,zero,81121030 <___vfiprintf_internal_r+0x74>
81121018:	a1001917 	ldw	r4,100(r20)
8112101c:	00f7ffc4 	movi	r3,-8193
81121020:	10880014 	ori	r2,r2,8192
81121024:	20c6703a 	and	r3,r4,r3
81121028:	a080030d 	sth	r2,12(r20)
8112102c:	a0c01915 	stw	r3,100(r20)
81121030:	10c0020c 	andi	r3,r2,8
81121034:	1800a926 	beq	r3,zero,811212dc <___vfiprintf_internal_r+0x320>
81121038:	a0c00417 	ldw	r3,16(r20)
8112103c:	1800a726 	beq	r3,zero,811212dc <___vfiprintf_internal_r+0x320>
81121040:	1080068c 	andi	r2,r2,26
81121044:	00c00284 	movi	r3,10
81121048:	10c0ac26 	beq	r2,r3,811212fc <___vfiprintf_internal_r+0x340>
8112104c:	da801a04 	addi	r10,sp,104
81121050:	da801e15 	stw	r10,120(sp)
81121054:	d8801e17 	ldw	r2,120(sp)
81121058:	da8019c4 	addi	r10,sp,103
8112105c:	05a04534 	movhi	r22,33044
81121060:	05e04534 	movhi	r23,33044
81121064:	da801f15 	stw	r10,124(sp)
81121068:	1295c83a 	sub	r10,r2,r10
8112106c:	b5b73204 	addi	r22,r22,-9016
81121070:	bdf72e04 	addi	r23,r23,-9032
81121074:	dec01a15 	stw	sp,104(sp)
81121078:	d8001c15 	stw	zero,112(sp)
8112107c:	d8001b15 	stw	zero,108(sp)
81121080:	d8002615 	stw	zero,152(sp)
81121084:	d8002315 	stw	zero,140(sp)
81121088:	da802715 	stw	r10,156(sp)
8112108c:	d811883a 	mov	r8,sp
81121090:	dd002115 	stw	r20,132(sp)
81121094:	e021883a 	mov	r16,fp
81121098:	80800007 	ldb	r2,0(r16)
8112109c:	1003ea26 	beq	r2,zero,81122048 <___vfiprintf_internal_r+0x108c>
811210a0:	00c00944 	movi	r3,37
811210a4:	8025883a 	mov	r18,r16
811210a8:	10c0021e 	bne	r2,r3,811210b4 <___vfiprintf_internal_r+0xf8>
811210ac:	00001606 	br	81121108 <___vfiprintf_internal_r+0x14c>
811210b0:	10c00326 	beq	r2,r3,811210c0 <___vfiprintf_internal_r+0x104>
811210b4:	94800044 	addi	r18,r18,1
811210b8:	90800007 	ldb	r2,0(r18)
811210bc:	103ffc1e 	bne	r2,zero,811210b0 <__reset+0xfb1010b0>
811210c0:	9423c83a 	sub	r17,r18,r16
811210c4:	88001026 	beq	r17,zero,81121108 <___vfiprintf_internal_r+0x14c>
811210c8:	d8c01c17 	ldw	r3,112(sp)
811210cc:	d8801b17 	ldw	r2,108(sp)
811210d0:	44000015 	stw	r16,0(r8)
811210d4:	88c7883a 	add	r3,r17,r3
811210d8:	10800044 	addi	r2,r2,1
811210dc:	44400115 	stw	r17,4(r8)
811210e0:	d8c01c15 	stw	r3,112(sp)
811210e4:	d8801b15 	stw	r2,108(sp)
811210e8:	010001c4 	movi	r4,7
811210ec:	2080760e 	bge	r4,r2,811212c8 <___vfiprintf_internal_r+0x30c>
811210f0:	1803821e 	bne	r3,zero,81121efc <___vfiprintf_internal_r+0xf40>
811210f4:	da802317 	ldw	r10,140(sp)
811210f8:	d8001b15 	stw	zero,108(sp)
811210fc:	d811883a 	mov	r8,sp
81121100:	5455883a 	add	r10,r10,r17
81121104:	da802315 	stw	r10,140(sp)
81121108:	90800007 	ldb	r2,0(r18)
8112110c:	10044626 	beq	r2,zero,81122228 <___vfiprintf_internal_r+0x126c>
81121110:	90c00047 	ldb	r3,1(r18)
81121114:	94000044 	addi	r16,r18,1
81121118:	d8001d85 	stb	zero,118(sp)
8112111c:	0009883a 	mov	r4,zero
81121120:	000f883a 	mov	r7,zero
81121124:	027fffc4 	movi	r9,-1
81121128:	0023883a 	mov	r17,zero
8112112c:	0029883a 	mov	r20,zero
81121130:	01401604 	movi	r5,88
81121134:	01800244 	movi	r6,9
81121138:	03400a84 	movi	r13,42
8112113c:	03001b04 	movi	r12,108
81121140:	84000044 	addi	r16,r16,1
81121144:	18bff804 	addi	r2,r3,-32
81121148:	28827336 	bltu	r5,r2,81121b18 <___vfiprintf_internal_r+0xb5c>
8112114c:	100490ba 	slli	r2,r2,2
81121150:	02a044b4 	movhi	r10,33042
81121154:	52845904 	addi	r10,r10,4452
81121158:	1285883a 	add	r2,r2,r10
8112115c:	10800017 	ldw	r2,0(r2)
81121160:	1000683a 	jmp	r2
81121164:	8112184c 	andi	r4,r16,18529
81121168:	81121b18 	cmpnei	r4,r16,18540
8112116c:	81121b18 	cmpnei	r4,r16,18540
81121170:	8112186c 	andhi	r4,r16,18529
81121174:	81121b18 	cmpnei	r4,r16,18540
81121178:	81121b18 	cmpnei	r4,r16,18540
8112117c:	81121b18 	cmpnei	r4,r16,18540
81121180:	81121b18 	cmpnei	r4,r16,18540
81121184:	81121b18 	cmpnei	r4,r16,18540
81121188:	81121b18 	cmpnei	r4,r16,18540
8112118c:	81121a54 	ori	r4,r16,18537
81121190:	81121a70 	cmpltui	r4,r16,18537
81121194:	81121b18 	cmpnei	r4,r16,18540
81121198:	81121358 	cmpnei	r4,r16,18509
8112119c:	81121a80 	call	881121a8 <__reset+0x20f21a8>
811211a0:	81121b18 	cmpnei	r4,r16,18540
811211a4:	81121878 	rdprs	r4,r16,18529
811211a8:	81121884 	addi	r4,r16,18530
811211ac:	81121884 	addi	r4,r16,18530
811211b0:	81121884 	addi	r4,r16,18530
811211b4:	81121884 	addi	r4,r16,18530
811211b8:	81121884 	addi	r4,r16,18530
811211bc:	81121884 	addi	r4,r16,18530
811211c0:	81121884 	addi	r4,r16,18530
811211c4:	81121884 	addi	r4,r16,18530
811211c8:	81121884 	addi	r4,r16,18530
811211cc:	81121b18 	cmpnei	r4,r16,18540
811211d0:	81121b18 	cmpnei	r4,r16,18540
811211d4:	81121b18 	cmpnei	r4,r16,18540
811211d8:	81121b18 	cmpnei	r4,r16,18540
811211dc:	81121b18 	cmpnei	r4,r16,18540
811211e0:	81121b18 	cmpnei	r4,r16,18540
811211e4:	81121b18 	cmpnei	r4,r16,18540
811211e8:	81121b18 	cmpnei	r4,r16,18540
811211ec:	81121b18 	cmpnei	r4,r16,18540
811211f0:	81121b18 	cmpnei	r4,r16,18540
811211f4:	811218b0 	cmpltui	r4,r16,18530
811211f8:	81121b18 	cmpnei	r4,r16,18540
811211fc:	81121b18 	cmpnei	r4,r16,18540
81121200:	81121b18 	cmpnei	r4,r16,18540
81121204:	81121b18 	cmpnei	r4,r16,18540
81121208:	81121b18 	cmpnei	r4,r16,18540
8112120c:	81121b18 	cmpnei	r4,r16,18540
81121210:	81121b18 	cmpnei	r4,r16,18540
81121214:	81121b18 	cmpnei	r4,r16,18540
81121218:	81121b18 	cmpnei	r4,r16,18540
8112121c:	81121b18 	cmpnei	r4,r16,18540
81121220:	811218e8 	cmpgeui	r4,r16,18531
81121224:	81121b18 	cmpnei	r4,r16,18540
81121228:	81121b18 	cmpnei	r4,r16,18540
8112122c:	81121b18 	cmpnei	r4,r16,18540
81121230:	81121b18 	cmpnei	r4,r16,18540
81121234:	81121b18 	cmpnei	r4,r16,18540
81121238:	81121940 	call	88112194 <__reset+0x20f2194>
8112123c:	81121b18 	cmpnei	r4,r16,18540
81121240:	81121b18 	cmpnei	r4,r16,18540
81121244:	811219b0 	cmpltui	r4,r16,18534
81121248:	81121b18 	cmpnei	r4,r16,18540
8112124c:	81121b18 	cmpnei	r4,r16,18540
81121250:	81121b18 	cmpnei	r4,r16,18540
81121254:	81121b18 	cmpnei	r4,r16,18540
81121258:	81121b18 	cmpnei	r4,r16,18540
8112125c:	81121b18 	cmpnei	r4,r16,18540
81121260:	81121b18 	cmpnei	r4,r16,18540
81121264:	81121b18 	cmpnei	r4,r16,18540
81121268:	81121b18 	cmpnei	r4,r16,18540
8112126c:	81121b18 	cmpnei	r4,r16,18540
81121270:	8112175c 	xori	r4,r16,18525
81121274:	81121788 	cmpgei	r4,r16,18526
81121278:	81121b18 	cmpnei	r4,r16,18540
8112127c:	81121b18 	cmpnei	r4,r16,18540
81121280:	81121b18 	cmpnei	r4,r16,18540
81121284:	81121ac0 	call	881121ac <__reset+0x20f21ac>
81121288:	81121788 	cmpgei	r4,r16,18526
8112128c:	81121b18 	cmpnei	r4,r16,18540
81121290:	81121b18 	cmpnei	r4,r16,18540
81121294:	8112161c 	xori	r4,r16,18520
81121298:	81121b18 	cmpnei	r4,r16,18540
8112129c:	8112162c 	andhi	r4,r16,18520
811212a0:	81121668 	cmpgeui	r4,r16,18521
811212a4:	81121364 	muli	r4,r16,18509
811212a8:	81121610 	cmplti	r4,r16,18520
811212ac:	81121b18 	cmpnei	r4,r16,18540
811212b0:	811219ec 	andhi	r4,r16,18535
811212b4:	81121b18 	cmpnei	r4,r16,18540
811212b8:	81121a44 	addi	r4,r16,18537
811212bc:	81121b18 	cmpnei	r4,r16,18540
811212c0:	81121b18 	cmpnei	r4,r16,18540
811212c4:	81121708 	cmpgei	r4,r16,18524
811212c8:	42000204 	addi	r8,r8,8
811212cc:	da802317 	ldw	r10,140(sp)
811212d0:	5455883a 	add	r10,r10,r17
811212d4:	da802315 	stw	r10,140(sp)
811212d8:	003f8b06 	br	81121108 <__reset+0xfb101108>
811212dc:	d9002017 	ldw	r4,128(sp)
811212e0:	a00b883a 	mov	r5,r20
811212e4:	1118b000 	call	81118b00 <__swsetup_r>
811212e8:	1003b11e 	bne	r2,zero,811221b0 <___vfiprintf_internal_r+0x11f4>
811212ec:	a080030b 	ldhu	r2,12(r20)
811212f0:	00c00284 	movi	r3,10
811212f4:	1080068c 	andi	r2,r2,26
811212f8:	10ff541e 	bne	r2,r3,8112104c <__reset+0xfb10104c>
811212fc:	a080038f 	ldh	r2,14(r20)
81121300:	103f5216 	blt	r2,zero,8112104c <__reset+0xfb10104c>
81121304:	d9c02217 	ldw	r7,136(sp)
81121308:	d9002017 	ldw	r4,128(sp)
8112130c:	e00d883a 	mov	r6,fp
81121310:	a00b883a 	mov	r5,r20
81121314:	112243c0 	call	8112243c <__sbprintf>
81121318:	dfc03617 	ldw	ra,216(sp)
8112131c:	df003517 	ldw	fp,212(sp)
81121320:	ddc03417 	ldw	r23,208(sp)
81121324:	dd803317 	ldw	r22,204(sp)
81121328:	dd403217 	ldw	r21,200(sp)
8112132c:	dd003117 	ldw	r20,196(sp)
81121330:	dcc03017 	ldw	r19,192(sp)
81121334:	dc802f17 	ldw	r18,188(sp)
81121338:	dc402e17 	ldw	r17,184(sp)
8112133c:	dc002d17 	ldw	r16,180(sp)
81121340:	dec03704 	addi	sp,sp,220
81121344:	f800283a 	ret
81121348:	111ab700 	call	8111ab70 <__sinit>
8112134c:	003f2f06 	br	8112100c <__reset+0xfb10100c>
81121350:	0463c83a 	sub	r17,zero,r17
81121354:	d8802215 	stw	r2,136(sp)
81121358:	a5000114 	ori	r20,r20,4
8112135c:	80c00007 	ldb	r3,0(r16)
81121360:	003f7706 	br	81121140 <__reset+0xfb101140>
81121364:	00800c04 	movi	r2,48
81121368:	da802217 	ldw	r10,136(sp)
8112136c:	d8801d05 	stb	r2,116(sp)
81121370:	00801e04 	movi	r2,120
81121374:	d8801d45 	stb	r2,117(sp)
81121378:	d8001d85 	stb	zero,118(sp)
8112137c:	50c00104 	addi	r3,r10,4
81121380:	54800017 	ldw	r18,0(r10)
81121384:	0027883a 	mov	r19,zero
81121388:	a0800094 	ori	r2,r20,2
8112138c:	48030b16 	blt	r9,zero,81121fbc <___vfiprintf_internal_r+0x1000>
81121390:	00bfdfc4 	movi	r2,-129
81121394:	a096703a 	and	r11,r20,r2
81121398:	d8c02215 	stw	r3,136(sp)
8112139c:	5d000094 	ori	r20,r11,2
811213a0:	90032b1e 	bne	r18,zero,81122050 <___vfiprintf_internal_r+0x1094>
811213a4:	00a04534 	movhi	r2,33044
811213a8:	10b69c04 	addi	r2,r2,-9616
811213ac:	d8802615 	stw	r2,152(sp)
811213b0:	0039883a 	mov	fp,zero
811213b4:	48017b1e 	bne	r9,zero,811219a4 <___vfiprintf_internal_r+0x9e8>
811213b8:	0013883a 	mov	r9,zero
811213bc:	0027883a 	mov	r19,zero
811213c0:	dd401a04 	addi	r21,sp,104
811213c4:	4825883a 	mov	r18,r9
811213c8:	4cc0010e 	bge	r9,r19,811213d0 <___vfiprintf_internal_r+0x414>
811213cc:	9825883a 	mov	r18,r19
811213d0:	e7003fcc 	andi	fp,fp,255
811213d4:	e700201c 	xori	fp,fp,128
811213d8:	e73fe004 	addi	fp,fp,-128
811213dc:	e0000126 	beq	fp,zero,811213e4 <___vfiprintf_internal_r+0x428>
811213e0:	94800044 	addi	r18,r18,1
811213e4:	a380008c 	andi	r14,r20,2
811213e8:	70000126 	beq	r14,zero,811213f0 <___vfiprintf_internal_r+0x434>
811213ec:	94800084 	addi	r18,r18,2
811213f0:	a700210c 	andi	fp,r20,132
811213f4:	e001df1e 	bne	fp,zero,81121b74 <___vfiprintf_internal_r+0xbb8>
811213f8:	8c87c83a 	sub	r3,r17,r18
811213fc:	00c1dd0e 	bge	zero,r3,81121b74 <___vfiprintf_internal_r+0xbb8>
81121400:	01c00404 	movi	r7,16
81121404:	d8801c17 	ldw	r2,112(sp)
81121408:	38c3ad0e 	bge	r7,r3,811222c0 <___vfiprintf_internal_r+0x1304>
8112140c:	02a04534 	movhi	r10,33044
81121410:	52b73204 	addi	r10,r10,-9016
81121414:	dc002915 	stw	r16,164(sp)
81121418:	d9801b17 	ldw	r6,108(sp)
8112141c:	da802415 	stw	r10,144(sp)
81121420:	03c001c4 	movi	r15,7
81121424:	da402515 	stw	r9,148(sp)
81121428:	db802815 	stw	r14,160(sp)
8112142c:	1821883a 	mov	r16,r3
81121430:	00000506 	br	81121448 <___vfiprintf_internal_r+0x48c>
81121434:	31400084 	addi	r5,r6,2
81121438:	42000204 	addi	r8,r8,8
8112143c:	200d883a 	mov	r6,r4
81121440:	843ffc04 	addi	r16,r16,-16
81121444:	3c000d0e 	bge	r7,r16,8112147c <___vfiprintf_internal_r+0x4c0>
81121448:	10800404 	addi	r2,r2,16
8112144c:	31000044 	addi	r4,r6,1
81121450:	45800015 	stw	r22,0(r8)
81121454:	41c00115 	stw	r7,4(r8)
81121458:	d8801c15 	stw	r2,112(sp)
8112145c:	d9001b15 	stw	r4,108(sp)
81121460:	793ff40e 	bge	r15,r4,81121434 <__reset+0xfb101434>
81121464:	1001b51e 	bne	r2,zero,81121b3c <___vfiprintf_internal_r+0xb80>
81121468:	843ffc04 	addi	r16,r16,-16
8112146c:	000d883a 	mov	r6,zero
81121470:	01400044 	movi	r5,1
81121474:	d811883a 	mov	r8,sp
81121478:	3c3ff316 	blt	r7,r16,81121448 <__reset+0xfb101448>
8112147c:	8007883a 	mov	r3,r16
81121480:	da402517 	ldw	r9,148(sp)
81121484:	db802817 	ldw	r14,160(sp)
81121488:	dc002917 	ldw	r16,164(sp)
8112148c:	da802417 	ldw	r10,144(sp)
81121490:	1885883a 	add	r2,r3,r2
81121494:	40c00115 	stw	r3,4(r8)
81121498:	42800015 	stw	r10,0(r8)
8112149c:	d8801c15 	stw	r2,112(sp)
811214a0:	d9401b15 	stw	r5,108(sp)
811214a4:	00c001c4 	movi	r3,7
811214a8:	19426016 	blt	r3,r5,81121e2c <___vfiprintf_internal_r+0xe70>
811214ac:	d8c01d87 	ldb	r3,118(sp)
811214b0:	42000204 	addi	r8,r8,8
811214b4:	29000044 	addi	r4,r5,1
811214b8:	1801b31e 	bne	r3,zero,81121b88 <___vfiprintf_internal_r+0xbcc>
811214bc:	7001c026 	beq	r14,zero,81121bc0 <___vfiprintf_internal_r+0xc04>
811214c0:	d8c01d04 	addi	r3,sp,116
811214c4:	10800084 	addi	r2,r2,2
811214c8:	40c00015 	stw	r3,0(r8)
811214cc:	00c00084 	movi	r3,2
811214d0:	40c00115 	stw	r3,4(r8)
811214d4:	d8801c15 	stw	r2,112(sp)
811214d8:	d9001b15 	stw	r4,108(sp)
811214dc:	00c001c4 	movi	r3,7
811214e0:	1902650e 	bge	r3,r4,81121e78 <___vfiprintf_internal_r+0xebc>
811214e4:	10029a1e 	bne	r2,zero,81121f50 <___vfiprintf_internal_r+0xf94>
811214e8:	00c02004 	movi	r3,128
811214ec:	01000044 	movi	r4,1
811214f0:	000b883a 	mov	r5,zero
811214f4:	d811883a 	mov	r8,sp
811214f8:	e0c1b31e 	bne	fp,r3,81121bc8 <___vfiprintf_internal_r+0xc0c>
811214fc:	8cb9c83a 	sub	fp,r17,r18
81121500:	0701b10e 	bge	zero,fp,81121bc8 <___vfiprintf_internal_r+0xc0c>
81121504:	01c00404 	movi	r7,16
81121508:	3f03890e 	bge	r7,fp,81122330 <___vfiprintf_internal_r+0x1374>
8112150c:	00e04534 	movhi	r3,33044
81121510:	18f72e04 	addi	r3,r3,-9032
81121514:	d8c02415 	stw	r3,144(sp)
81121518:	8007883a 	mov	r3,r16
8112151c:	034001c4 	movi	r13,7
81121520:	e021883a 	mov	r16,fp
81121524:	da402515 	stw	r9,148(sp)
81121528:	1839883a 	mov	fp,r3
8112152c:	00000506 	br	81121544 <___vfiprintf_internal_r+0x588>
81121530:	29800084 	addi	r6,r5,2
81121534:	42000204 	addi	r8,r8,8
81121538:	180b883a 	mov	r5,r3
8112153c:	843ffc04 	addi	r16,r16,-16
81121540:	3c000d0e 	bge	r7,r16,81121578 <___vfiprintf_internal_r+0x5bc>
81121544:	10800404 	addi	r2,r2,16
81121548:	28c00044 	addi	r3,r5,1
8112154c:	45c00015 	stw	r23,0(r8)
81121550:	41c00115 	stw	r7,4(r8)
81121554:	d8801c15 	stw	r2,112(sp)
81121558:	d8c01b15 	stw	r3,108(sp)
8112155c:	68fff40e 	bge	r13,r3,81121530 <__reset+0xfb101530>
81121560:	1002241e 	bne	r2,zero,81121df4 <___vfiprintf_internal_r+0xe38>
81121564:	843ffc04 	addi	r16,r16,-16
81121568:	01800044 	movi	r6,1
8112156c:	000b883a 	mov	r5,zero
81121570:	d811883a 	mov	r8,sp
81121574:	3c3ff316 	blt	r7,r16,81121544 <__reset+0xfb101544>
81121578:	da402517 	ldw	r9,148(sp)
8112157c:	e007883a 	mov	r3,fp
81121580:	8039883a 	mov	fp,r16
81121584:	1821883a 	mov	r16,r3
81121588:	d8c02417 	ldw	r3,144(sp)
8112158c:	1705883a 	add	r2,r2,fp
81121590:	47000115 	stw	fp,4(r8)
81121594:	40c00015 	stw	r3,0(r8)
81121598:	d8801c15 	stw	r2,112(sp)
8112159c:	d9801b15 	stw	r6,108(sp)
811215a0:	00c001c4 	movi	r3,7
811215a4:	19827616 	blt	r3,r6,81121f80 <___vfiprintf_internal_r+0xfc4>
811215a8:	4cf9c83a 	sub	fp,r9,r19
811215ac:	42000204 	addi	r8,r8,8
811215b0:	31000044 	addi	r4,r6,1
811215b4:	300b883a 	mov	r5,r6
811215b8:	07018516 	blt	zero,fp,81121bd0 <___vfiprintf_internal_r+0xc14>
811215bc:	9885883a 	add	r2,r19,r2
811215c0:	45400015 	stw	r21,0(r8)
811215c4:	44c00115 	stw	r19,4(r8)
811215c8:	d8801c15 	stw	r2,112(sp)
811215cc:	d9001b15 	stw	r4,108(sp)
811215d0:	00c001c4 	movi	r3,7
811215d4:	1901dd0e 	bge	r3,r4,81121d4c <___vfiprintf_internal_r+0xd90>
811215d8:	1002401e 	bne	r2,zero,81121edc <___vfiprintf_internal_r+0xf20>
811215dc:	d8001b15 	stw	zero,108(sp)
811215e0:	a2c0010c 	andi	r11,r20,4
811215e4:	58000226 	beq	r11,zero,811215f0 <___vfiprintf_internal_r+0x634>
811215e8:	8ca7c83a 	sub	r19,r17,r18
811215ec:	04c2f216 	blt	zero,r19,811221b8 <___vfiprintf_internal_r+0x11fc>
811215f0:	8c80010e 	bge	r17,r18,811215f8 <___vfiprintf_internal_r+0x63c>
811215f4:	9023883a 	mov	r17,r18
811215f8:	da802317 	ldw	r10,140(sp)
811215fc:	5455883a 	add	r10,r10,r17
81121600:	da802315 	stw	r10,140(sp)
81121604:	d8001b15 	stw	zero,108(sp)
81121608:	d811883a 	mov	r8,sp
8112160c:	003ea206 	br	81121098 <__reset+0xfb101098>
81121610:	a5000814 	ori	r20,r20,32
81121614:	80c00007 	ldb	r3,0(r16)
81121618:	003ec906 	br	81121140 <__reset+0xfb101140>
8112161c:	80c00007 	ldb	r3,0(r16)
81121620:	1b030926 	beq	r3,r12,81122248 <___vfiprintf_internal_r+0x128c>
81121624:	a5000414 	ori	r20,r20,16
81121628:	003ec506 	br	81121140 <__reset+0xfb101140>
8112162c:	21003fcc 	andi	r4,r4,255
81121630:	20035e1e 	bne	r4,zero,811223ac <___vfiprintf_internal_r+0x13f0>
81121634:	a080080c 	andi	r2,r20,32
81121638:	1002a526 	beq	r2,zero,811220d0 <___vfiprintf_internal_r+0x1114>
8112163c:	da802217 	ldw	r10,136(sp)
81121640:	50800017 	ldw	r2,0(r10)
81121644:	da802317 	ldw	r10,140(sp)
81121648:	5007d7fa 	srai	r3,r10,31
8112164c:	da802217 	ldw	r10,136(sp)
81121650:	10c00115 	stw	r3,4(r2)
81121654:	52800104 	addi	r10,r10,4
81121658:	da802215 	stw	r10,136(sp)
8112165c:	da802317 	ldw	r10,140(sp)
81121660:	12800015 	stw	r10,0(r2)
81121664:	003e8c06 	br	81121098 <__reset+0xfb101098>
81121668:	21003fcc 	andi	r4,r4,255
8112166c:	2003511e 	bne	r4,zero,811223b4 <___vfiprintf_internal_r+0x13f8>
81121670:	a080080c 	andi	r2,r20,32
81121674:	1000a126 	beq	r2,zero,811218fc <___vfiprintf_internal_r+0x940>
81121678:	da802217 	ldw	r10,136(sp)
8112167c:	d8001d85 	stb	zero,118(sp)
81121680:	50800204 	addi	r2,r10,8
81121684:	54800017 	ldw	r18,0(r10)
81121688:	54c00117 	ldw	r19,4(r10)
8112168c:	4802b416 	blt	r9,zero,81122160 <___vfiprintf_internal_r+0x11a4>
81121690:	013fdfc4 	movi	r4,-129
81121694:	94c6b03a 	or	r3,r18,r19
81121698:	d8802215 	stw	r2,136(sp)
8112169c:	a128703a 	and	r20,r20,r4
811216a0:	1800a226 	beq	r3,zero,8112192c <___vfiprintf_internal_r+0x970>
811216a4:	0039883a 	mov	fp,zero
811216a8:	dd401a04 	addi	r21,sp,104
811216ac:	9006d0fa 	srli	r3,r18,3
811216b0:	9808977a 	slli	r4,r19,29
811216b4:	9826d0fa 	srli	r19,r19,3
811216b8:	948001cc 	andi	r18,r18,7
811216bc:	90800c04 	addi	r2,r18,48
811216c0:	ad7fffc4 	addi	r21,r21,-1
811216c4:	20e4b03a 	or	r18,r4,r3
811216c8:	a8800005 	stb	r2,0(r21)
811216cc:	94c6b03a 	or	r3,r18,r19
811216d0:	183ff61e 	bne	r3,zero,811216ac <__reset+0xfb1016ac>
811216d4:	a0c0004c 	andi	r3,r20,1
811216d8:	18005926 	beq	r3,zero,81121840 <___vfiprintf_internal_r+0x884>
811216dc:	10803fcc 	andi	r2,r2,255
811216e0:	1080201c 	xori	r2,r2,128
811216e4:	10bfe004 	addi	r2,r2,-128
811216e8:	00c00c04 	movi	r3,48
811216ec:	10c05426 	beq	r2,r3,81121840 <___vfiprintf_internal_r+0x884>
811216f0:	da801e17 	ldw	r10,120(sp)
811216f4:	a8bfffc4 	addi	r2,r21,-1
811216f8:	a8ffffc5 	stb	r3,-1(r21)
811216fc:	50a7c83a 	sub	r19,r10,r2
81121700:	102b883a 	mov	r21,r2
81121704:	003f2f06 	br	811213c4 <__reset+0xfb1013c4>
81121708:	21003fcc 	andi	r4,r4,255
8112170c:	2003421e 	bne	r4,zero,81122418 <___vfiprintf_internal_r+0x145c>
81121710:	00a04534 	movhi	r2,33044
81121714:	10b69c04 	addi	r2,r2,-9616
81121718:	d8802615 	stw	r2,152(sp)
8112171c:	a080080c 	andi	r2,r20,32
81121720:	1000aa26 	beq	r2,zero,811219cc <___vfiprintf_internal_r+0xa10>
81121724:	da802217 	ldw	r10,136(sp)
81121728:	54800017 	ldw	r18,0(r10)
8112172c:	54c00117 	ldw	r19,4(r10)
81121730:	52800204 	addi	r10,r10,8
81121734:	da802215 	stw	r10,136(sp)
81121738:	a080004c 	andi	r2,r20,1
8112173c:	1001d226 	beq	r2,zero,81121e88 <___vfiprintf_internal_r+0xecc>
81121740:	94c4b03a 	or	r2,r18,r19
81121744:	1002351e 	bne	r2,zero,8112201c <___vfiprintf_internal_r+0x1060>
81121748:	d8001d85 	stb	zero,118(sp)
8112174c:	48022216 	blt	r9,zero,81121fd8 <___vfiprintf_internal_r+0x101c>
81121750:	00bfdfc4 	movi	r2,-129
81121754:	a0a8703a 	and	r20,r20,r2
81121758:	003f1506 	br	811213b0 <__reset+0xfb1013b0>
8112175c:	da802217 	ldw	r10,136(sp)
81121760:	04800044 	movi	r18,1
81121764:	d8001d85 	stb	zero,118(sp)
81121768:	50800017 	ldw	r2,0(r10)
8112176c:	52800104 	addi	r10,r10,4
81121770:	da802215 	stw	r10,136(sp)
81121774:	d8801005 	stb	r2,64(sp)
81121778:	9027883a 	mov	r19,r18
8112177c:	dd401004 	addi	r21,sp,64
81121780:	0013883a 	mov	r9,zero
81121784:	003f1706 	br	811213e4 <__reset+0xfb1013e4>
81121788:	21003fcc 	andi	r4,r4,255
8112178c:	2003201e 	bne	r4,zero,81122410 <___vfiprintf_internal_r+0x1454>
81121790:	a080080c 	andi	r2,r20,32
81121794:	10004b26 	beq	r2,zero,811218c4 <___vfiprintf_internal_r+0x908>
81121798:	da802217 	ldw	r10,136(sp)
8112179c:	50800117 	ldw	r2,4(r10)
811217a0:	54800017 	ldw	r18,0(r10)
811217a4:	52800204 	addi	r10,r10,8
811217a8:	da802215 	stw	r10,136(sp)
811217ac:	1027883a 	mov	r19,r2
811217b0:	10022c16 	blt	r2,zero,81122064 <___vfiprintf_internal_r+0x10a8>
811217b4:	df001d83 	ldbu	fp,118(sp)
811217b8:	48007216 	blt	r9,zero,81121984 <___vfiprintf_internal_r+0x9c8>
811217bc:	00ffdfc4 	movi	r3,-129
811217c0:	94c4b03a 	or	r2,r18,r19
811217c4:	a0e8703a 	and	r20,r20,r3
811217c8:	1000cc26 	beq	r2,zero,81121afc <___vfiprintf_internal_r+0xb40>
811217cc:	98021026 	beq	r19,zero,81122010 <___vfiprintf_internal_r+0x1054>
811217d0:	dc402415 	stw	r17,144(sp)
811217d4:	dc002515 	stw	r16,148(sp)
811217d8:	9823883a 	mov	r17,r19
811217dc:	9021883a 	mov	r16,r18
811217e0:	dd401a04 	addi	r21,sp,104
811217e4:	4825883a 	mov	r18,r9
811217e8:	4027883a 	mov	r19,r8
811217ec:	8009883a 	mov	r4,r16
811217f0:	880b883a 	mov	r5,r17
811217f4:	01800284 	movi	r6,10
811217f8:	000f883a 	mov	r7,zero
811217fc:	1123eb80 	call	81123eb8 <__umoddi3>
81121800:	10800c04 	addi	r2,r2,48
81121804:	ad7fffc4 	addi	r21,r21,-1
81121808:	8009883a 	mov	r4,r16
8112180c:	880b883a 	mov	r5,r17
81121810:	a8800005 	stb	r2,0(r21)
81121814:	01800284 	movi	r6,10
81121818:	000f883a 	mov	r7,zero
8112181c:	11239380 	call	81123938 <__udivdi3>
81121820:	1021883a 	mov	r16,r2
81121824:	10c4b03a 	or	r2,r2,r3
81121828:	1823883a 	mov	r17,r3
8112182c:	103fef1e 	bne	r2,zero,811217ec <__reset+0xfb1017ec>
81121830:	dc402417 	ldw	r17,144(sp)
81121834:	dc002517 	ldw	r16,148(sp)
81121838:	9013883a 	mov	r9,r18
8112183c:	9811883a 	mov	r8,r19
81121840:	da801e17 	ldw	r10,120(sp)
81121844:	5567c83a 	sub	r19,r10,r21
81121848:	003ede06 	br	811213c4 <__reset+0xfb1013c4>
8112184c:	38803fcc 	andi	r2,r7,255
81121850:	1080201c 	xori	r2,r2,128
81121854:	10bfe004 	addi	r2,r2,-128
81121858:	1002371e 	bne	r2,zero,81122138 <___vfiprintf_internal_r+0x117c>
8112185c:	01000044 	movi	r4,1
81121860:	01c00804 	movi	r7,32
81121864:	80c00007 	ldb	r3,0(r16)
81121868:	003e3506 	br	81121140 <__reset+0xfb101140>
8112186c:	a5000054 	ori	r20,r20,1
81121870:	80c00007 	ldb	r3,0(r16)
81121874:	003e3206 	br	81121140 <__reset+0xfb101140>
81121878:	a5002014 	ori	r20,r20,128
8112187c:	80c00007 	ldb	r3,0(r16)
81121880:	003e2f06 	br	81121140 <__reset+0xfb101140>
81121884:	8015883a 	mov	r10,r16
81121888:	0023883a 	mov	r17,zero
8112188c:	18bff404 	addi	r2,r3,-48
81121890:	50c00007 	ldb	r3,0(r10)
81121894:	8c4002a4 	muli	r17,r17,10
81121898:	84000044 	addi	r16,r16,1
8112189c:	8015883a 	mov	r10,r16
811218a0:	1463883a 	add	r17,r2,r17
811218a4:	18bff404 	addi	r2,r3,-48
811218a8:	30bff92e 	bgeu	r6,r2,81121890 <__reset+0xfb101890>
811218ac:	003e2506 	br	81121144 <__reset+0xfb101144>
811218b0:	21003fcc 	andi	r4,r4,255
811218b4:	2002d41e 	bne	r4,zero,81122408 <___vfiprintf_internal_r+0x144c>
811218b8:	a5000414 	ori	r20,r20,16
811218bc:	a080080c 	andi	r2,r20,32
811218c0:	103fb51e 	bne	r2,zero,81121798 <__reset+0xfb101798>
811218c4:	a080040c 	andi	r2,r20,16
811218c8:	1001f826 	beq	r2,zero,811220ac <___vfiprintf_internal_r+0x10f0>
811218cc:	da802217 	ldw	r10,136(sp)
811218d0:	54800017 	ldw	r18,0(r10)
811218d4:	52800104 	addi	r10,r10,4
811218d8:	da802215 	stw	r10,136(sp)
811218dc:	9027d7fa 	srai	r19,r18,31
811218e0:	9805883a 	mov	r2,r19
811218e4:	003fb206 	br	811217b0 <__reset+0xfb1017b0>
811218e8:	21003fcc 	andi	r4,r4,255
811218ec:	2002c41e 	bne	r4,zero,81122400 <___vfiprintf_internal_r+0x1444>
811218f0:	a5000414 	ori	r20,r20,16
811218f4:	a080080c 	andi	r2,r20,32
811218f8:	103f5f1e 	bne	r2,zero,81121678 <__reset+0xfb101678>
811218fc:	a080040c 	andi	r2,r20,16
81121900:	10020f26 	beq	r2,zero,81122140 <___vfiprintf_internal_r+0x1184>
81121904:	da802217 	ldw	r10,136(sp)
81121908:	d8001d85 	stb	zero,118(sp)
8112190c:	0027883a 	mov	r19,zero
81121910:	50800104 	addi	r2,r10,4
81121914:	54800017 	ldw	r18,0(r10)
81121918:	48021116 	blt	r9,zero,81122160 <___vfiprintf_internal_r+0x11a4>
8112191c:	00ffdfc4 	movi	r3,-129
81121920:	d8802215 	stw	r2,136(sp)
81121924:	a0e8703a 	and	r20,r20,r3
81121928:	903f5e1e 	bne	r18,zero,811216a4 <__reset+0xfb1016a4>
8112192c:	0039883a 	mov	fp,zero
81121930:	4802a626 	beq	r9,zero,811223cc <___vfiprintf_internal_r+0x1410>
81121934:	0025883a 	mov	r18,zero
81121938:	0027883a 	mov	r19,zero
8112193c:	003f5a06 	br	811216a8 <__reset+0xfb1016a8>
81121940:	21003fcc 	andi	r4,r4,255
81121944:	20029f1e 	bne	r4,zero,811223c4 <___vfiprintf_internal_r+0x1408>
81121948:	a5000414 	ori	r20,r20,16
8112194c:	a080080c 	andi	r2,r20,32
81121950:	10005e1e 	bne	r2,zero,81121acc <___vfiprintf_internal_r+0xb10>
81121954:	a080040c 	andi	r2,r20,16
81121958:	1001a21e 	bne	r2,zero,81121fe4 <___vfiprintf_internal_r+0x1028>
8112195c:	a080100c 	andi	r2,r20,64
81121960:	d8001d85 	stb	zero,118(sp)
81121964:	da802217 	ldw	r10,136(sp)
81121968:	1002231e 	bne	r2,zero,811221f8 <___vfiprintf_internal_r+0x123c>
8112196c:	50800104 	addi	r2,r10,4
81121970:	54800017 	ldw	r18,0(r10)
81121974:	0027883a 	mov	r19,zero
81121978:	4801a00e 	bge	r9,zero,81121ffc <___vfiprintf_internal_r+0x1040>
8112197c:	d8802215 	stw	r2,136(sp)
81121980:	0039883a 	mov	fp,zero
81121984:	94c4b03a 	or	r2,r18,r19
81121988:	103f901e 	bne	r2,zero,811217cc <__reset+0xfb1017cc>
8112198c:	00800044 	movi	r2,1
81121990:	10803fcc 	andi	r2,r2,255
81121994:	00c00044 	movi	r3,1
81121998:	10c05926 	beq	r2,r3,81121b00 <___vfiprintf_internal_r+0xb44>
8112199c:	00c00084 	movi	r3,2
811219a0:	10ffe41e 	bne	r2,r3,81121934 <__reset+0xfb101934>
811219a4:	0025883a 	mov	r18,zero
811219a8:	0027883a 	mov	r19,zero
811219ac:	00013d06 	br	81121ea4 <___vfiprintf_internal_r+0xee8>
811219b0:	21003fcc 	andi	r4,r4,255
811219b4:	2002811e 	bne	r4,zero,811223bc <___vfiprintf_internal_r+0x1400>
811219b8:	00a04534 	movhi	r2,33044
811219bc:	10b69704 	addi	r2,r2,-9636
811219c0:	d8802615 	stw	r2,152(sp)
811219c4:	a080080c 	andi	r2,r20,32
811219c8:	103f561e 	bne	r2,zero,81121724 <__reset+0xfb101724>
811219cc:	a080040c 	andi	r2,r20,16
811219d0:	1001d126 	beq	r2,zero,81122118 <___vfiprintf_internal_r+0x115c>
811219d4:	da802217 	ldw	r10,136(sp)
811219d8:	0027883a 	mov	r19,zero
811219dc:	54800017 	ldw	r18,0(r10)
811219e0:	52800104 	addi	r10,r10,4
811219e4:	da802215 	stw	r10,136(sp)
811219e8:	003f5306 	br	81121738 <__reset+0xfb101738>
811219ec:	da802217 	ldw	r10,136(sp)
811219f0:	d8001d85 	stb	zero,118(sp)
811219f4:	55400017 	ldw	r21,0(r10)
811219f8:	50c00104 	addi	r3,r10,4
811219fc:	a8024226 	beq	r21,zero,81122308 <___vfiprintf_internal_r+0x134c>
81121a00:	48021816 	blt	r9,zero,81122264 <___vfiprintf_internal_r+0x12a8>
81121a04:	480d883a 	mov	r6,r9
81121a08:	000b883a 	mov	r5,zero
81121a0c:	a809883a 	mov	r4,r21
81121a10:	d8c02a15 	stw	r3,168(sp)
81121a14:	da002b15 	stw	r8,172(sp)
81121a18:	da402c15 	stw	r9,176(sp)
81121a1c:	111bd980 	call	8111bd98 <memchr>
81121a20:	d8c02a17 	ldw	r3,168(sp)
81121a24:	da002b17 	ldw	r8,172(sp)
81121a28:	da402c17 	ldw	r9,176(sp)
81121a2c:	10024826 	beq	r2,zero,81122350 <___vfiprintf_internal_r+0x1394>
81121a30:	1567c83a 	sub	r19,r2,r21
81121a34:	df001d83 	ldbu	fp,118(sp)
81121a38:	d8c02215 	stw	r3,136(sp)
81121a3c:	0013883a 	mov	r9,zero
81121a40:	003e6006 	br	811213c4 <__reset+0xfb1013c4>
81121a44:	21003fcc 	andi	r4,r4,255
81121a48:	203fc026 	beq	r4,zero,8112194c <__reset+0xfb10194c>
81121a4c:	d9c01d85 	stb	r7,118(sp)
81121a50:	003fbe06 	br	8112194c <__reset+0xfb10194c>
81121a54:	da802217 	ldw	r10,136(sp)
81121a58:	54400017 	ldw	r17,0(r10)
81121a5c:	50800104 	addi	r2,r10,4
81121a60:	883e3b16 	blt	r17,zero,81121350 <__reset+0xfb101350>
81121a64:	d8802215 	stw	r2,136(sp)
81121a68:	80c00007 	ldb	r3,0(r16)
81121a6c:	003db406 	br	81121140 <__reset+0xfb101140>
81121a70:	01000044 	movi	r4,1
81121a74:	01c00ac4 	movi	r7,43
81121a78:	80c00007 	ldb	r3,0(r16)
81121a7c:	003db006 	br	81121140 <__reset+0xfb101140>
81121a80:	80c00007 	ldb	r3,0(r16)
81121a84:	82800044 	addi	r10,r16,1
81121a88:	1b423c26 	beq	r3,r13,8112237c <___vfiprintf_internal_r+0x13c0>
81121a8c:	18bff404 	addi	r2,r3,-48
81121a90:	0013883a 	mov	r9,zero
81121a94:	30822b36 	bltu	r6,r2,81122344 <___vfiprintf_internal_r+0x1388>
81121a98:	50c00007 	ldb	r3,0(r10)
81121a9c:	4a4002a4 	muli	r9,r9,10
81121aa0:	54000044 	addi	r16,r10,1
81121aa4:	8015883a 	mov	r10,r16
81121aa8:	4893883a 	add	r9,r9,r2
81121aac:	18bff404 	addi	r2,r3,-48
81121ab0:	30bff92e 	bgeu	r6,r2,81121a98 <__reset+0xfb101a98>
81121ab4:	483da30e 	bge	r9,zero,81121144 <__reset+0xfb101144>
81121ab8:	027fffc4 	movi	r9,-1
81121abc:	003da106 	br	81121144 <__reset+0xfb101144>
81121ac0:	a5001014 	ori	r20,r20,64
81121ac4:	80c00007 	ldb	r3,0(r16)
81121ac8:	003d9d06 	br	81121140 <__reset+0xfb101140>
81121acc:	da802217 	ldw	r10,136(sp)
81121ad0:	d8001d85 	stb	zero,118(sp)
81121ad4:	50c00204 	addi	r3,r10,8
81121ad8:	54800017 	ldw	r18,0(r10)
81121adc:	54c00117 	ldw	r19,4(r10)
81121ae0:	4801ca16 	blt	r9,zero,8112220c <___vfiprintf_internal_r+0x1250>
81121ae4:	013fdfc4 	movi	r4,-129
81121ae8:	94c4b03a 	or	r2,r18,r19
81121aec:	d8c02215 	stw	r3,136(sp)
81121af0:	a128703a 	and	r20,r20,r4
81121af4:	0039883a 	mov	fp,zero
81121af8:	103f341e 	bne	r2,zero,811217cc <__reset+0xfb1017cc>
81121afc:	483e2e26 	beq	r9,zero,811213b8 <__reset+0xfb1013b8>
81121b00:	0025883a 	mov	r18,zero
81121b04:	94800c04 	addi	r18,r18,48
81121b08:	dc8019c5 	stb	r18,103(sp)
81121b0c:	dcc02717 	ldw	r19,156(sp)
81121b10:	dd4019c4 	addi	r21,sp,103
81121b14:	003e2b06 	br	811213c4 <__reset+0xfb1013c4>
81121b18:	21003fcc 	andi	r4,r4,255
81121b1c:	2002361e 	bne	r4,zero,811223f8 <___vfiprintf_internal_r+0x143c>
81121b20:	1801c126 	beq	r3,zero,81122228 <___vfiprintf_internal_r+0x126c>
81121b24:	04800044 	movi	r18,1
81121b28:	d8c01005 	stb	r3,64(sp)
81121b2c:	d8001d85 	stb	zero,118(sp)
81121b30:	9027883a 	mov	r19,r18
81121b34:	dd401004 	addi	r21,sp,64
81121b38:	003f1106 	br	81121780 <__reset+0xfb101780>
81121b3c:	d9402117 	ldw	r5,132(sp)
81121b40:	d9002017 	ldw	r4,128(sp)
81121b44:	d9801a04 	addi	r6,sp,104
81121b48:	d9c02b15 	stw	r7,172(sp)
81121b4c:	dbc02a15 	stw	r15,168(sp)
81121b50:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81121b54:	d9c02b17 	ldw	r7,172(sp)
81121b58:	dbc02a17 	ldw	r15,168(sp)
81121b5c:	10006d1e 	bne	r2,zero,81121d14 <___vfiprintf_internal_r+0xd58>
81121b60:	d9801b17 	ldw	r6,108(sp)
81121b64:	d8801c17 	ldw	r2,112(sp)
81121b68:	d811883a 	mov	r8,sp
81121b6c:	31400044 	addi	r5,r6,1
81121b70:	003e3306 	br	81121440 <__reset+0xfb101440>
81121b74:	d9401b17 	ldw	r5,108(sp)
81121b78:	d8801c17 	ldw	r2,112(sp)
81121b7c:	29000044 	addi	r4,r5,1
81121b80:	d8c01d87 	ldb	r3,118(sp)
81121b84:	183e4d26 	beq	r3,zero,811214bc <__reset+0xfb1014bc>
81121b88:	00c00044 	movi	r3,1
81121b8c:	d9401d84 	addi	r5,sp,118
81121b90:	10c5883a 	add	r2,r2,r3
81121b94:	41400015 	stw	r5,0(r8)
81121b98:	40c00115 	stw	r3,4(r8)
81121b9c:	d8801c15 	stw	r2,112(sp)
81121ba0:	d9001b15 	stw	r4,108(sp)
81121ba4:	014001c4 	movi	r5,7
81121ba8:	2900a90e 	bge	r5,r4,81121e50 <___vfiprintf_internal_r+0xe94>
81121bac:	1000da1e 	bne	r2,zero,81121f18 <___vfiprintf_internal_r+0xf5c>
81121bb0:	7000ab1e 	bne	r14,zero,81121e60 <___vfiprintf_internal_r+0xea4>
81121bb4:	000b883a 	mov	r5,zero
81121bb8:	1809883a 	mov	r4,r3
81121bbc:	d811883a 	mov	r8,sp
81121bc0:	00c02004 	movi	r3,128
81121bc4:	e0fe4d26 	beq	fp,r3,811214fc <__reset+0xfb1014fc>
81121bc8:	4cf9c83a 	sub	fp,r9,r19
81121bcc:	073e7b0e 	bge	zero,fp,811215bc <__reset+0xfb1015bc>
81121bd0:	01c00404 	movi	r7,16
81121bd4:	3f01900e 	bge	r7,fp,81122218 <___vfiprintf_internal_r+0x125c>
81121bd8:	00e04534 	movhi	r3,33044
81121bdc:	18f72e04 	addi	r3,r3,-9032
81121be0:	d8c02415 	stw	r3,144(sp)
81121be4:	034001c4 	movi	r13,7
81121be8:	00000506 	br	81121c00 <___vfiprintf_internal_r+0xc44>
81121bec:	29000084 	addi	r4,r5,2
81121bf0:	42000204 	addi	r8,r8,8
81121bf4:	180b883a 	mov	r5,r3
81121bf8:	e73ffc04 	addi	fp,fp,-16
81121bfc:	3f000d0e 	bge	r7,fp,81121c34 <___vfiprintf_internal_r+0xc78>
81121c00:	10800404 	addi	r2,r2,16
81121c04:	28c00044 	addi	r3,r5,1
81121c08:	45c00015 	stw	r23,0(r8)
81121c0c:	41c00115 	stw	r7,4(r8)
81121c10:	d8801c15 	stw	r2,112(sp)
81121c14:	d8c01b15 	stw	r3,108(sp)
81121c18:	68fff40e 	bge	r13,r3,81121bec <__reset+0xfb101bec>
81121c1c:	1000101e 	bne	r2,zero,81121c60 <___vfiprintf_internal_r+0xca4>
81121c20:	e73ffc04 	addi	fp,fp,-16
81121c24:	01000044 	movi	r4,1
81121c28:	000b883a 	mov	r5,zero
81121c2c:	d811883a 	mov	r8,sp
81121c30:	3f3ff316 	blt	r7,fp,81121c00 <__reset+0xfb101c00>
81121c34:	da802417 	ldw	r10,144(sp)
81121c38:	1705883a 	add	r2,r2,fp
81121c3c:	47000115 	stw	fp,4(r8)
81121c40:	42800015 	stw	r10,0(r8)
81121c44:	d8801c15 	stw	r2,112(sp)
81121c48:	d9001b15 	stw	r4,108(sp)
81121c4c:	00c001c4 	movi	r3,7
81121c50:	19003616 	blt	r3,r4,81121d2c <___vfiprintf_internal_r+0xd70>
81121c54:	42000204 	addi	r8,r8,8
81121c58:	21000044 	addi	r4,r4,1
81121c5c:	003e5706 	br	811215bc <__reset+0xfb1015bc>
81121c60:	d9402117 	ldw	r5,132(sp)
81121c64:	d9002017 	ldw	r4,128(sp)
81121c68:	d9801a04 	addi	r6,sp,104
81121c6c:	d9c02b15 	stw	r7,172(sp)
81121c70:	db402a15 	stw	r13,168(sp)
81121c74:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81121c78:	d9c02b17 	ldw	r7,172(sp)
81121c7c:	db402a17 	ldw	r13,168(sp)
81121c80:	1000241e 	bne	r2,zero,81121d14 <___vfiprintf_internal_r+0xd58>
81121c84:	d9401b17 	ldw	r5,108(sp)
81121c88:	d8801c17 	ldw	r2,112(sp)
81121c8c:	d811883a 	mov	r8,sp
81121c90:	29000044 	addi	r4,r5,1
81121c94:	003fd806 	br	81121bf8 <__reset+0xfb101bf8>
81121c98:	d9401b17 	ldw	r5,108(sp)
81121c9c:	00e04534 	movhi	r3,33044
81121ca0:	18f73204 	addi	r3,r3,-9016
81121ca4:	d8c02415 	stw	r3,144(sp)
81121ca8:	29400044 	addi	r5,r5,1
81121cac:	d8c02417 	ldw	r3,144(sp)
81121cb0:	14c5883a 	add	r2,r2,r19
81121cb4:	44c00115 	stw	r19,4(r8)
81121cb8:	40c00015 	stw	r3,0(r8)
81121cbc:	d8801c15 	stw	r2,112(sp)
81121cc0:	d9401b15 	stw	r5,108(sp)
81121cc4:	00c001c4 	movi	r3,7
81121cc8:	1940070e 	bge	r3,r5,81121ce8 <___vfiprintf_internal_r+0xd2c>
81121ccc:	103e4826 	beq	r2,zero,811215f0 <__reset+0xfb1015f0>
81121cd0:	d9402117 	ldw	r5,132(sp)
81121cd4:	d9002017 	ldw	r4,128(sp)
81121cd8:	d9801a04 	addi	r6,sp,104
81121cdc:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81121ce0:	10000c1e 	bne	r2,zero,81121d14 <___vfiprintf_internal_r+0xd58>
81121ce4:	d8801c17 	ldw	r2,112(sp)
81121ce8:	8c80010e 	bge	r17,r18,81121cf0 <___vfiprintf_internal_r+0xd34>
81121cec:	9023883a 	mov	r17,r18
81121cf0:	da802317 	ldw	r10,140(sp)
81121cf4:	5455883a 	add	r10,r10,r17
81121cf8:	da802315 	stw	r10,140(sp)
81121cfc:	103e4126 	beq	r2,zero,81121604 <__reset+0xfb101604>
81121d00:	d9402117 	ldw	r5,132(sp)
81121d04:	d9002017 	ldw	r4,128(sp)
81121d08:	d9801a04 	addi	r6,sp,104
81121d0c:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81121d10:	103e3c26 	beq	r2,zero,81121604 <__reset+0xfb101604>
81121d14:	dd002117 	ldw	r20,132(sp)
81121d18:	a080030b 	ldhu	r2,12(r20)
81121d1c:	1080100c 	andi	r2,r2,64
81121d20:	1001231e 	bne	r2,zero,811221b0 <___vfiprintf_internal_r+0x11f4>
81121d24:	d8802317 	ldw	r2,140(sp)
81121d28:	003d7b06 	br	81121318 <__reset+0xfb101318>
81121d2c:	1000991e 	bne	r2,zero,81121f94 <___vfiprintf_internal_r+0xfd8>
81121d30:	00c00044 	movi	r3,1
81121d34:	9805883a 	mov	r2,r19
81121d38:	dd400015 	stw	r21,0(sp)
81121d3c:	dcc00115 	stw	r19,4(sp)
81121d40:	dcc01c15 	stw	r19,112(sp)
81121d44:	d8c01b15 	stw	r3,108(sp)
81121d48:	d811883a 	mov	r8,sp
81121d4c:	42000204 	addi	r8,r8,8
81121d50:	a2c0010c 	andi	r11,r20,4
81121d54:	583fe426 	beq	r11,zero,81121ce8 <__reset+0xfb101ce8>
81121d58:	8ca7c83a 	sub	r19,r17,r18
81121d5c:	04ffe20e 	bge	zero,r19,81121ce8 <__reset+0xfb101ce8>
81121d60:	01c00404 	movi	r7,16
81121d64:	3cffcc0e 	bge	r7,r19,81121c98 <__reset+0xfb101c98>
81121d68:	02a04534 	movhi	r10,33044
81121d6c:	52b73204 	addi	r10,r10,-9016
81121d70:	d9001b17 	ldw	r4,108(sp)
81121d74:	da802415 	stw	r10,144(sp)
81121d78:	382b883a 	mov	r21,r7
81121d7c:	050001c4 	movi	r20,7
81121d80:	df002017 	ldw	fp,128(sp)
81121d84:	00000506 	br	81121d9c <___vfiprintf_internal_r+0xde0>
81121d88:	21400084 	addi	r5,r4,2
81121d8c:	42000204 	addi	r8,r8,8
81121d90:	1809883a 	mov	r4,r3
81121d94:	9cfffc04 	addi	r19,r19,-16
81121d98:	acffc40e 	bge	r21,r19,81121cac <__reset+0xfb101cac>
81121d9c:	10800404 	addi	r2,r2,16
81121da0:	20c00044 	addi	r3,r4,1
81121da4:	45800015 	stw	r22,0(r8)
81121da8:	45400115 	stw	r21,4(r8)
81121dac:	d8801c15 	stw	r2,112(sp)
81121db0:	d8c01b15 	stw	r3,108(sp)
81121db4:	a0fff40e 	bge	r20,r3,81121d88 <__reset+0xfb101d88>
81121db8:	1000041e 	bne	r2,zero,81121dcc <___vfiprintf_internal_r+0xe10>
81121dbc:	01400044 	movi	r5,1
81121dc0:	0009883a 	mov	r4,zero
81121dc4:	d811883a 	mov	r8,sp
81121dc8:	003ff206 	br	81121d94 <__reset+0xfb101d94>
81121dcc:	d9402117 	ldw	r5,132(sp)
81121dd0:	d9801a04 	addi	r6,sp,104
81121dd4:	e009883a 	mov	r4,fp
81121dd8:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81121ddc:	103fcd1e 	bne	r2,zero,81121d14 <__reset+0xfb101d14>
81121de0:	d9001b17 	ldw	r4,108(sp)
81121de4:	d8801c17 	ldw	r2,112(sp)
81121de8:	d811883a 	mov	r8,sp
81121dec:	21400044 	addi	r5,r4,1
81121df0:	003fe806 	br	81121d94 <__reset+0xfb101d94>
81121df4:	d9402117 	ldw	r5,132(sp)
81121df8:	d9002017 	ldw	r4,128(sp)
81121dfc:	d9801a04 	addi	r6,sp,104
81121e00:	d9c02b15 	stw	r7,172(sp)
81121e04:	db402a15 	stw	r13,168(sp)
81121e08:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81121e0c:	d9c02b17 	ldw	r7,172(sp)
81121e10:	db402a17 	ldw	r13,168(sp)
81121e14:	103fbf1e 	bne	r2,zero,81121d14 <__reset+0xfb101d14>
81121e18:	d9401b17 	ldw	r5,108(sp)
81121e1c:	d8801c17 	ldw	r2,112(sp)
81121e20:	d811883a 	mov	r8,sp
81121e24:	29800044 	addi	r6,r5,1
81121e28:	003dc406 	br	8112153c <__reset+0xfb10153c>
81121e2c:	1000d21e 	bne	r2,zero,81122178 <___vfiprintf_internal_r+0x11bc>
81121e30:	d8c01d87 	ldb	r3,118(sp)
81121e34:	18009526 	beq	r3,zero,8112208c <___vfiprintf_internal_r+0x10d0>
81121e38:	00800044 	movi	r2,1
81121e3c:	d8c01d84 	addi	r3,sp,118
81121e40:	1009883a 	mov	r4,r2
81121e44:	d8c00015 	stw	r3,0(sp)
81121e48:	d8800115 	stw	r2,4(sp)
81121e4c:	d811883a 	mov	r8,sp
81121e50:	200b883a 	mov	r5,r4
81121e54:	42000204 	addi	r8,r8,8
81121e58:	21000044 	addi	r4,r4,1
81121e5c:	003d9706 	br	811214bc <__reset+0xfb1014bc>
81121e60:	d9001d04 	addi	r4,sp,116
81121e64:	00800084 	movi	r2,2
81121e68:	d9000015 	stw	r4,0(sp)
81121e6c:	d8800115 	stw	r2,4(sp)
81121e70:	1809883a 	mov	r4,r3
81121e74:	d811883a 	mov	r8,sp
81121e78:	200b883a 	mov	r5,r4
81121e7c:	42000204 	addi	r8,r8,8
81121e80:	21000044 	addi	r4,r4,1
81121e84:	003f4e06 	br	81121bc0 <__reset+0xfb101bc0>
81121e88:	d8001d85 	stb	zero,118(sp)
81121e8c:	48005016 	blt	r9,zero,81121fd0 <___vfiprintf_internal_r+0x1014>
81121e90:	00ffdfc4 	movi	r3,-129
81121e94:	94c4b03a 	or	r2,r18,r19
81121e98:	a0e8703a 	and	r20,r20,r3
81121e9c:	103d4426 	beq	r2,zero,811213b0 <__reset+0xfb1013b0>
81121ea0:	0039883a 	mov	fp,zero
81121ea4:	d9002617 	ldw	r4,152(sp)
81121ea8:	dd401a04 	addi	r21,sp,104
81121eac:	908003cc 	andi	r2,r18,15
81121eb0:	9806973a 	slli	r3,r19,28
81121eb4:	2085883a 	add	r2,r4,r2
81121eb8:	9024d13a 	srli	r18,r18,4
81121ebc:	10800003 	ldbu	r2,0(r2)
81121ec0:	9826d13a 	srli	r19,r19,4
81121ec4:	ad7fffc4 	addi	r21,r21,-1
81121ec8:	1ca4b03a 	or	r18,r3,r18
81121ecc:	a8800005 	stb	r2,0(r21)
81121ed0:	94c4b03a 	or	r2,r18,r19
81121ed4:	103ff51e 	bne	r2,zero,81121eac <__reset+0xfb101eac>
81121ed8:	003e5906 	br	81121840 <__reset+0xfb101840>
81121edc:	d9402117 	ldw	r5,132(sp)
81121ee0:	d9002017 	ldw	r4,128(sp)
81121ee4:	d9801a04 	addi	r6,sp,104
81121ee8:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81121eec:	103f891e 	bne	r2,zero,81121d14 <__reset+0xfb101d14>
81121ef0:	d8801c17 	ldw	r2,112(sp)
81121ef4:	d811883a 	mov	r8,sp
81121ef8:	003f9506 	br	81121d50 <__reset+0xfb101d50>
81121efc:	d9402117 	ldw	r5,132(sp)
81121f00:	d9002017 	ldw	r4,128(sp)
81121f04:	d9801a04 	addi	r6,sp,104
81121f08:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81121f0c:	103f811e 	bne	r2,zero,81121d14 <__reset+0xfb101d14>
81121f10:	d811883a 	mov	r8,sp
81121f14:	003ced06 	br	811212cc <__reset+0xfb1012cc>
81121f18:	d9402117 	ldw	r5,132(sp)
81121f1c:	d9002017 	ldw	r4,128(sp)
81121f20:	d9801a04 	addi	r6,sp,104
81121f24:	da402c15 	stw	r9,176(sp)
81121f28:	db802a15 	stw	r14,168(sp)
81121f2c:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81121f30:	da402c17 	ldw	r9,176(sp)
81121f34:	db802a17 	ldw	r14,168(sp)
81121f38:	103f761e 	bne	r2,zero,81121d14 <__reset+0xfb101d14>
81121f3c:	d9401b17 	ldw	r5,108(sp)
81121f40:	d8801c17 	ldw	r2,112(sp)
81121f44:	d811883a 	mov	r8,sp
81121f48:	29000044 	addi	r4,r5,1
81121f4c:	003d5b06 	br	811214bc <__reset+0xfb1014bc>
81121f50:	d9402117 	ldw	r5,132(sp)
81121f54:	d9002017 	ldw	r4,128(sp)
81121f58:	d9801a04 	addi	r6,sp,104
81121f5c:	da402c15 	stw	r9,176(sp)
81121f60:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81121f64:	da402c17 	ldw	r9,176(sp)
81121f68:	103f6a1e 	bne	r2,zero,81121d14 <__reset+0xfb101d14>
81121f6c:	d9401b17 	ldw	r5,108(sp)
81121f70:	d8801c17 	ldw	r2,112(sp)
81121f74:	d811883a 	mov	r8,sp
81121f78:	29000044 	addi	r4,r5,1
81121f7c:	003f1006 	br	81121bc0 <__reset+0xfb101bc0>
81121f80:	1000c31e 	bne	r2,zero,81122290 <___vfiprintf_internal_r+0x12d4>
81121f84:	01000044 	movi	r4,1
81121f88:	000b883a 	mov	r5,zero
81121f8c:	d811883a 	mov	r8,sp
81121f90:	003f0d06 	br	81121bc8 <__reset+0xfb101bc8>
81121f94:	d9402117 	ldw	r5,132(sp)
81121f98:	d9002017 	ldw	r4,128(sp)
81121f9c:	d9801a04 	addi	r6,sp,104
81121fa0:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81121fa4:	103f5b1e 	bne	r2,zero,81121d14 <__reset+0xfb101d14>
81121fa8:	d9001b17 	ldw	r4,108(sp)
81121fac:	d8801c17 	ldw	r2,112(sp)
81121fb0:	d811883a 	mov	r8,sp
81121fb4:	21000044 	addi	r4,r4,1
81121fb8:	003d8006 	br	811215bc <__reset+0xfb1015bc>
81121fbc:	01204534 	movhi	r4,33044
81121fc0:	21369c04 	addi	r4,r4,-9616
81121fc4:	d9002615 	stw	r4,152(sp)
81121fc8:	d8c02215 	stw	r3,136(sp)
81121fcc:	1029883a 	mov	r20,r2
81121fd0:	94c4b03a 	or	r2,r18,r19
81121fd4:	103fb21e 	bne	r2,zero,81121ea0 <__reset+0xfb101ea0>
81121fd8:	0039883a 	mov	fp,zero
81121fdc:	00800084 	movi	r2,2
81121fe0:	003e6b06 	br	81121990 <__reset+0xfb101990>
81121fe4:	da802217 	ldw	r10,136(sp)
81121fe8:	d8001d85 	stb	zero,118(sp)
81121fec:	0027883a 	mov	r19,zero
81121ff0:	50800104 	addi	r2,r10,4
81121ff4:	54800017 	ldw	r18,0(r10)
81121ff8:	483e6016 	blt	r9,zero,8112197c <__reset+0xfb10197c>
81121ffc:	00ffdfc4 	movi	r3,-129
81122000:	d8802215 	stw	r2,136(sp)
81122004:	a0e8703a 	and	r20,r20,r3
81122008:	0039883a 	mov	fp,zero
8112200c:	903ebb26 	beq	r18,zero,81121afc <__reset+0xfb101afc>
81122010:	00800244 	movi	r2,9
81122014:	14bdee36 	bltu	r2,r18,811217d0 <__reset+0xfb1017d0>
81122018:	003eba06 	br	81121b04 <__reset+0xfb101b04>
8112201c:	00800c04 	movi	r2,48
81122020:	d8c01d45 	stb	r3,117(sp)
81122024:	d8801d05 	stb	r2,116(sp)
81122028:	d8001d85 	stb	zero,118(sp)
8112202c:	a0c00094 	ori	r3,r20,2
81122030:	4800a916 	blt	r9,zero,811222d8 <___vfiprintf_internal_r+0x131c>
81122034:	00bfdfc4 	movi	r2,-129
81122038:	a096703a 	and	r11,r20,r2
8112203c:	5d000094 	ori	r20,r11,2
81122040:	0039883a 	mov	fp,zero
81122044:	003f9706 	br	81121ea4 <__reset+0xfb101ea4>
81122048:	8025883a 	mov	r18,r16
8112204c:	003c2e06 	br	81121108 <__reset+0xfb101108>
81122050:	00a04534 	movhi	r2,33044
81122054:	10b69c04 	addi	r2,r2,-9616
81122058:	0039883a 	mov	fp,zero
8112205c:	d8802615 	stw	r2,152(sp)
81122060:	003f9006 	br	81121ea4 <__reset+0xfb101ea4>
81122064:	04a5c83a 	sub	r18,zero,r18
81122068:	07000b44 	movi	fp,45
8112206c:	9004c03a 	cmpne	r2,r18,zero
81122070:	04e7c83a 	sub	r19,zero,r19
81122074:	df001d85 	stb	fp,118(sp)
81122078:	98a7c83a 	sub	r19,r19,r2
8112207c:	48009f16 	blt	r9,zero,811222fc <___vfiprintf_internal_r+0x1340>
81122080:	00bfdfc4 	movi	r2,-129
81122084:	a0a8703a 	and	r20,r20,r2
81122088:	003dd006 	br	811217cc <__reset+0xfb1017cc>
8112208c:	70004c26 	beq	r14,zero,811221c0 <___vfiprintf_internal_r+0x1204>
81122090:	00800084 	movi	r2,2
81122094:	d8c01d04 	addi	r3,sp,116
81122098:	d8c00015 	stw	r3,0(sp)
8112209c:	d8800115 	stw	r2,4(sp)
811220a0:	01000044 	movi	r4,1
811220a4:	d811883a 	mov	r8,sp
811220a8:	003f7306 	br	81121e78 <__reset+0xfb101e78>
811220ac:	a080100c 	andi	r2,r20,64
811220b0:	da802217 	ldw	r10,136(sp)
811220b4:	103e0626 	beq	r2,zero,811218d0 <__reset+0xfb1018d0>
811220b8:	5480000f 	ldh	r18,0(r10)
811220bc:	52800104 	addi	r10,r10,4
811220c0:	da802215 	stw	r10,136(sp)
811220c4:	9027d7fa 	srai	r19,r18,31
811220c8:	9805883a 	mov	r2,r19
811220cc:	003db806 	br	811217b0 <__reset+0xfb1017b0>
811220d0:	a080040c 	andi	r2,r20,16
811220d4:	1000091e 	bne	r2,zero,811220fc <___vfiprintf_internal_r+0x1140>
811220d8:	a2c0100c 	andi	r11,r20,64
811220dc:	58000726 	beq	r11,zero,811220fc <___vfiprintf_internal_r+0x1140>
811220e0:	da802217 	ldw	r10,136(sp)
811220e4:	50800017 	ldw	r2,0(r10)
811220e8:	52800104 	addi	r10,r10,4
811220ec:	da802215 	stw	r10,136(sp)
811220f0:	da802317 	ldw	r10,140(sp)
811220f4:	1280000d 	sth	r10,0(r2)
811220f8:	003be706 	br	81121098 <__reset+0xfb101098>
811220fc:	da802217 	ldw	r10,136(sp)
81122100:	50800017 	ldw	r2,0(r10)
81122104:	52800104 	addi	r10,r10,4
81122108:	da802215 	stw	r10,136(sp)
8112210c:	da802317 	ldw	r10,140(sp)
81122110:	12800015 	stw	r10,0(r2)
81122114:	003be006 	br	81121098 <__reset+0xfb101098>
81122118:	a080100c 	andi	r2,r20,64
8112211c:	da802217 	ldw	r10,136(sp)
81122120:	10003026 	beq	r2,zero,811221e4 <___vfiprintf_internal_r+0x1228>
81122124:	5480000b 	ldhu	r18,0(r10)
81122128:	52800104 	addi	r10,r10,4
8112212c:	0027883a 	mov	r19,zero
81122130:	da802215 	stw	r10,136(sp)
81122134:	003d8006 	br	81121738 <__reset+0xfb101738>
81122138:	80c00007 	ldb	r3,0(r16)
8112213c:	003c0006 	br	81121140 <__reset+0xfb101140>
81122140:	a080100c 	andi	r2,r20,64
81122144:	d8001d85 	stb	zero,118(sp)
81122148:	da802217 	ldw	r10,136(sp)
8112214c:	1000201e 	bne	r2,zero,811221d0 <___vfiprintf_internal_r+0x1214>
81122150:	50800104 	addi	r2,r10,4
81122154:	54800017 	ldw	r18,0(r10)
81122158:	0027883a 	mov	r19,zero
8112215c:	483def0e 	bge	r9,zero,8112191c <__reset+0xfb10191c>
81122160:	94c6b03a 	or	r3,r18,r19
81122164:	d8802215 	stw	r2,136(sp)
81122168:	183d4e1e 	bne	r3,zero,811216a4 <__reset+0xfb1016a4>
8112216c:	0039883a 	mov	fp,zero
81122170:	0005883a 	mov	r2,zero
81122174:	003e0606 	br	81121990 <__reset+0xfb101990>
81122178:	d9402117 	ldw	r5,132(sp)
8112217c:	d9002017 	ldw	r4,128(sp)
81122180:	d9801a04 	addi	r6,sp,104
81122184:	da402c15 	stw	r9,176(sp)
81122188:	db802a15 	stw	r14,168(sp)
8112218c:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81122190:	da402c17 	ldw	r9,176(sp)
81122194:	db802a17 	ldw	r14,168(sp)
81122198:	103ede1e 	bne	r2,zero,81121d14 <__reset+0xfb101d14>
8112219c:	d9401b17 	ldw	r5,108(sp)
811221a0:	d8801c17 	ldw	r2,112(sp)
811221a4:	d811883a 	mov	r8,sp
811221a8:	29000044 	addi	r4,r5,1
811221ac:	003e7406 	br	81121b80 <__reset+0xfb101b80>
811221b0:	00bfffc4 	movi	r2,-1
811221b4:	003c5806 	br	81121318 <__reset+0xfb101318>
811221b8:	d811883a 	mov	r8,sp
811221bc:	003ee806 	br	81121d60 <__reset+0xfb101d60>
811221c0:	000b883a 	mov	r5,zero
811221c4:	01000044 	movi	r4,1
811221c8:	d811883a 	mov	r8,sp
811221cc:	003e7c06 	br	81121bc0 <__reset+0xfb101bc0>
811221d0:	50800104 	addi	r2,r10,4
811221d4:	5480000b 	ldhu	r18,0(r10)
811221d8:	0027883a 	mov	r19,zero
811221dc:	483dcf0e 	bge	r9,zero,8112191c <__reset+0xfb10191c>
811221e0:	003fdf06 	br	81122160 <__reset+0xfb102160>
811221e4:	54800017 	ldw	r18,0(r10)
811221e8:	52800104 	addi	r10,r10,4
811221ec:	0027883a 	mov	r19,zero
811221f0:	da802215 	stw	r10,136(sp)
811221f4:	003d5006 	br	81121738 <__reset+0xfb101738>
811221f8:	50800104 	addi	r2,r10,4
811221fc:	5480000b 	ldhu	r18,0(r10)
81122200:	0027883a 	mov	r19,zero
81122204:	483f7d0e 	bge	r9,zero,81121ffc <__reset+0xfb101ffc>
81122208:	003ddc06 	br	8112197c <__reset+0xfb10197c>
8112220c:	d8c02215 	stw	r3,136(sp)
81122210:	0039883a 	mov	fp,zero
81122214:	003ddb06 	br	81121984 <__reset+0xfb101984>
81122218:	02a04534 	movhi	r10,33044
8112221c:	52b72e04 	addi	r10,r10,-9032
81122220:	da802415 	stw	r10,144(sp)
81122224:	003e8306 	br	81121c34 <__reset+0xfb101c34>
81122228:	d8801c17 	ldw	r2,112(sp)
8112222c:	dd002117 	ldw	r20,132(sp)
81122230:	103eb926 	beq	r2,zero,81121d18 <__reset+0xfb101d18>
81122234:	d9002017 	ldw	r4,128(sp)
81122238:	d9801a04 	addi	r6,sp,104
8112223c:	a00b883a 	mov	r5,r20
81122240:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
81122244:	003eb406 	br	81121d18 <__reset+0xfb101d18>
81122248:	80c00043 	ldbu	r3,1(r16)
8112224c:	a5000814 	ori	r20,r20,32
81122250:	84000044 	addi	r16,r16,1
81122254:	18c03fcc 	andi	r3,r3,255
81122258:	18c0201c 	xori	r3,r3,128
8112225c:	18ffe004 	addi	r3,r3,-128
81122260:	003bb706 	br	81121140 <__reset+0xfb101140>
81122264:	a809883a 	mov	r4,r21
81122268:	d8c02a15 	stw	r3,168(sp)
8112226c:	da002b15 	stw	r8,172(sp)
81122270:	1112a400 	call	81112a40 <strlen>
81122274:	d8c02a17 	ldw	r3,168(sp)
81122278:	1027883a 	mov	r19,r2
8112227c:	df001d83 	ldbu	fp,118(sp)
81122280:	d8c02215 	stw	r3,136(sp)
81122284:	0013883a 	mov	r9,zero
81122288:	da002b17 	ldw	r8,172(sp)
8112228c:	003c4d06 	br	811213c4 <__reset+0xfb1013c4>
81122290:	d9402117 	ldw	r5,132(sp)
81122294:	d9002017 	ldw	r4,128(sp)
81122298:	d9801a04 	addi	r6,sp,104
8112229c:	da402c15 	stw	r9,176(sp)
811222a0:	1120ea00 	call	81120ea0 <__sprint_r.part.0>
811222a4:	da402c17 	ldw	r9,176(sp)
811222a8:	103e9a1e 	bne	r2,zero,81121d14 <__reset+0xfb101d14>
811222ac:	d9401b17 	ldw	r5,108(sp)
811222b0:	d8801c17 	ldw	r2,112(sp)
811222b4:	d811883a 	mov	r8,sp
811222b8:	29000044 	addi	r4,r5,1
811222bc:	003e4206 	br	81121bc8 <__reset+0xfb101bc8>
811222c0:	d9401b17 	ldw	r5,108(sp)
811222c4:	01204534 	movhi	r4,33044
811222c8:	21373204 	addi	r4,r4,-9016
811222cc:	d9002415 	stw	r4,144(sp)
811222d0:	29400044 	addi	r5,r5,1
811222d4:	003c6d06 	br	8112148c <__reset+0xfb10148c>
811222d8:	0039883a 	mov	fp,zero
811222dc:	00800084 	movi	r2,2
811222e0:	10803fcc 	andi	r2,r2,255
811222e4:	01000044 	movi	r4,1
811222e8:	11001e26 	beq	r2,r4,81122364 <___vfiprintf_internal_r+0x13a8>
811222ec:	01000084 	movi	r4,2
811222f0:	11001e1e 	bne	r2,r4,8112236c <___vfiprintf_internal_r+0x13b0>
811222f4:	1829883a 	mov	r20,r3
811222f8:	003eea06 	br	81121ea4 <__reset+0xfb101ea4>
811222fc:	a007883a 	mov	r3,r20
81122300:	00800044 	movi	r2,1
81122304:	003ff606 	br	811222e0 <__reset+0xfb1022e0>
81122308:	00800184 	movi	r2,6
8112230c:	1240012e 	bgeu	r2,r9,81122314 <___vfiprintf_internal_r+0x1358>
81122310:	1013883a 	mov	r9,r2
81122314:	4827883a 	mov	r19,r9
81122318:	4825883a 	mov	r18,r9
8112231c:	48001516 	blt	r9,zero,81122374 <___vfiprintf_internal_r+0x13b8>
81122320:	05604534 	movhi	r21,33044
81122324:	d8c02215 	stw	r3,136(sp)
81122328:	ad76a104 	addi	r21,r21,-9596
8112232c:	003d1406 	br	81121780 <__reset+0xfb101780>
81122330:	02a04534 	movhi	r10,33044
81122334:	52b72e04 	addi	r10,r10,-9032
81122338:	da802415 	stw	r10,144(sp)
8112233c:	200d883a 	mov	r6,r4
81122340:	003c9106 	br	81121588 <__reset+0xfb101588>
81122344:	5021883a 	mov	r16,r10
81122348:	0013883a 	mov	r9,zero
8112234c:	003b7d06 	br	81121144 <__reset+0xfb101144>
81122350:	4827883a 	mov	r19,r9
81122354:	df001d83 	ldbu	fp,118(sp)
81122358:	d8c02215 	stw	r3,136(sp)
8112235c:	0013883a 	mov	r9,zero
81122360:	003c1806 	br	811213c4 <__reset+0xfb1013c4>
81122364:	1829883a 	mov	r20,r3
81122368:	003d1806 	br	811217cc <__reset+0xfb1017cc>
8112236c:	1829883a 	mov	r20,r3
81122370:	003ccd06 	br	811216a8 <__reset+0xfb1016a8>
81122374:	0025883a 	mov	r18,zero
81122378:	003fe906 	br	81122320 <__reset+0xfb102320>
8112237c:	d8802217 	ldw	r2,136(sp)
81122380:	80c00043 	ldbu	r3,1(r16)
81122384:	5021883a 	mov	r16,r10
81122388:	12400017 	ldw	r9,0(r2)
8112238c:	10800104 	addi	r2,r2,4
81122390:	d8802215 	stw	r2,136(sp)
81122394:	483faf0e 	bge	r9,zero,81122254 <__reset+0xfb102254>
81122398:	18c03fcc 	andi	r3,r3,255
8112239c:	18c0201c 	xori	r3,r3,128
811223a0:	027fffc4 	movi	r9,-1
811223a4:	18ffe004 	addi	r3,r3,-128
811223a8:	003b6506 	br	81121140 <__reset+0xfb101140>
811223ac:	d9c01d85 	stb	r7,118(sp)
811223b0:	003ca006 	br	81121634 <__reset+0xfb101634>
811223b4:	d9c01d85 	stb	r7,118(sp)
811223b8:	003cad06 	br	81121670 <__reset+0xfb101670>
811223bc:	d9c01d85 	stb	r7,118(sp)
811223c0:	003d7d06 	br	811219b8 <__reset+0xfb1019b8>
811223c4:	d9c01d85 	stb	r7,118(sp)
811223c8:	003d5f06 	br	81121948 <__reset+0xfb101948>
811223cc:	a080004c 	andi	r2,r20,1
811223d0:	0039883a 	mov	fp,zero
811223d4:	10000526 	beq	r2,zero,811223ec <___vfiprintf_internal_r+0x1430>
811223d8:	00800c04 	movi	r2,48
811223dc:	d88019c5 	stb	r2,103(sp)
811223e0:	dcc02717 	ldw	r19,156(sp)
811223e4:	dd4019c4 	addi	r21,sp,103
811223e8:	003bf606 	br	811213c4 <__reset+0xfb1013c4>
811223ec:	0027883a 	mov	r19,zero
811223f0:	dd401a04 	addi	r21,sp,104
811223f4:	003bf306 	br	811213c4 <__reset+0xfb1013c4>
811223f8:	d9c01d85 	stb	r7,118(sp)
811223fc:	003dc806 	br	81121b20 <__reset+0xfb101b20>
81122400:	d9c01d85 	stb	r7,118(sp)
81122404:	003d3a06 	br	811218f0 <__reset+0xfb1018f0>
81122408:	d9c01d85 	stb	r7,118(sp)
8112240c:	003d2a06 	br	811218b8 <__reset+0xfb1018b8>
81122410:	d9c01d85 	stb	r7,118(sp)
81122414:	003cde06 	br	81121790 <__reset+0xfb101790>
81122418:	d9c01d85 	stb	r7,118(sp)
8112241c:	003cbc06 	br	81121710 <__reset+0xfb101710>

81122420 <__vfiprintf_internal>:
81122420:	00a04534 	movhi	r2,33044
81122424:	10bf9d04 	addi	r2,r2,-396
81122428:	300f883a 	mov	r7,r6
8112242c:	280d883a 	mov	r6,r5
81122430:	200b883a 	mov	r5,r4
81122434:	11000017 	ldw	r4,0(r2)
81122438:	1120fbc1 	jmpi	81120fbc <___vfiprintf_internal_r>

8112243c <__sbprintf>:
8112243c:	defee204 	addi	sp,sp,-1144
81122440:	de00012e 	bgeu	sp,et,81122448 <__sbprintf+0xc>
81122444:	003b68fa 	trap	3
81122448:	2880030b 	ldhu	r2,12(r5)
8112244c:	2ac01917 	ldw	r11,100(r5)
81122450:	2a80038b 	ldhu	r10,14(r5)
81122454:	2a400717 	ldw	r9,28(r5)
81122458:	2a000917 	ldw	r8,36(r5)
8112245c:	00c10004 	movi	r3,1024
81122460:	dc011a15 	stw	r16,1128(sp)
81122464:	10bfff4c 	andi	r2,r2,65533
81122468:	2821883a 	mov	r16,r5
8112246c:	d8cb883a 	add	r5,sp,r3
81122470:	dc811c15 	stw	r18,1136(sp)
81122474:	dc411b15 	stw	r17,1132(sp)
81122478:	dfc11d15 	stw	ra,1140(sp)
8112247c:	2025883a 	mov	r18,r4
81122480:	d881030d 	sth	r2,1036(sp)
81122484:	dac11915 	stw	r11,1124(sp)
81122488:	da81038d 	sth	r10,1038(sp)
8112248c:	da410715 	stw	r9,1052(sp)
81122490:	da010915 	stw	r8,1060(sp)
81122494:	dec10015 	stw	sp,1024(sp)
81122498:	dec10415 	stw	sp,1040(sp)
8112249c:	d8c10215 	stw	r3,1032(sp)
811224a0:	d8c10515 	stw	r3,1044(sp)
811224a4:	d8010615 	stw	zero,1048(sp)
811224a8:	1120fbc0 	call	81120fbc <___vfiprintf_internal_r>
811224ac:	1023883a 	mov	r17,r2
811224b0:	10000416 	blt	r2,zero,811224c4 <__sbprintf+0x88>
811224b4:	d9410004 	addi	r5,sp,1024
811224b8:	9009883a 	mov	r4,r18
811224bc:	111a7740 	call	8111a774 <_fflush_r>
811224c0:	10000d1e 	bne	r2,zero,811224f8 <__sbprintf+0xbc>
811224c4:	d881030b 	ldhu	r2,1036(sp)
811224c8:	1080100c 	andi	r2,r2,64
811224cc:	10000326 	beq	r2,zero,811224dc <__sbprintf+0xa0>
811224d0:	8080030b 	ldhu	r2,12(r16)
811224d4:	10801014 	ori	r2,r2,64
811224d8:	8080030d 	sth	r2,12(r16)
811224dc:	8805883a 	mov	r2,r17
811224e0:	dfc11d17 	ldw	ra,1140(sp)
811224e4:	dc811c17 	ldw	r18,1136(sp)
811224e8:	dc411b17 	ldw	r17,1132(sp)
811224ec:	dc011a17 	ldw	r16,1128(sp)
811224f0:	dec11e04 	addi	sp,sp,1144
811224f4:	f800283a 	ret
811224f8:	047fffc4 	movi	r17,-1
811224fc:	003ff106 	br	811224c4 <__reset+0xfb1024c4>

81122500 <_calloc_r>:
81122500:	298b383a 	mul	r5,r5,r6
81122504:	defffe04 	addi	sp,sp,-8
81122508:	de00012e 	bgeu	sp,et,81122510 <_calloc_r+0x10>
8112250c:	003b68fa 	trap	3
81122510:	dfc00115 	stw	ra,4(sp)
81122514:	dc000015 	stw	r16,0(sp)
81122518:	11118b00 	call	811118b0 <_malloc_r>
8112251c:	10002926 	beq	r2,zero,811225c4 <_calloc_r+0xc4>
81122520:	11bfff17 	ldw	r6,-4(r2)
81122524:	1021883a 	mov	r16,r2
81122528:	00bfff04 	movi	r2,-4
8112252c:	308c703a 	and	r6,r6,r2
81122530:	00c00904 	movi	r3,36
81122534:	308d883a 	add	r6,r6,r2
81122538:	19801636 	bltu	r3,r6,81122594 <_calloc_r+0x94>
8112253c:	008004c4 	movi	r2,19
81122540:	11800b2e 	bgeu	r2,r6,81122570 <_calloc_r+0x70>
81122544:	80000015 	stw	zero,0(r16)
81122548:	80000115 	stw	zero,4(r16)
8112254c:	008006c4 	movi	r2,27
81122550:	11801a2e 	bgeu	r2,r6,811225bc <_calloc_r+0xbc>
81122554:	80000215 	stw	zero,8(r16)
81122558:	80000315 	stw	zero,12(r16)
8112255c:	30c0151e 	bne	r6,r3,811225b4 <_calloc_r+0xb4>
81122560:	80000415 	stw	zero,16(r16)
81122564:	80800604 	addi	r2,r16,24
81122568:	80000515 	stw	zero,20(r16)
8112256c:	00000106 	br	81122574 <_calloc_r+0x74>
81122570:	8005883a 	mov	r2,r16
81122574:	10000015 	stw	zero,0(r2)
81122578:	10000115 	stw	zero,4(r2)
8112257c:	10000215 	stw	zero,8(r2)
81122580:	8005883a 	mov	r2,r16
81122584:	dfc00117 	ldw	ra,4(sp)
81122588:	dc000017 	ldw	r16,0(sp)
8112258c:	dec00204 	addi	sp,sp,8
81122590:	f800283a 	ret
81122594:	000b883a 	mov	r5,zero
81122598:	8009883a 	mov	r4,r16
8112259c:	11122140 	call	81112214 <memset>
811225a0:	8005883a 	mov	r2,r16
811225a4:	dfc00117 	ldw	ra,4(sp)
811225a8:	dc000017 	ldw	r16,0(sp)
811225ac:	dec00204 	addi	sp,sp,8
811225b0:	f800283a 	ret
811225b4:	80800404 	addi	r2,r16,16
811225b8:	003fee06 	br	81122574 <__reset+0xfb102574>
811225bc:	80800204 	addi	r2,r16,8
811225c0:	003fec06 	br	81122574 <__reset+0xfb102574>
811225c4:	0005883a 	mov	r2,zero
811225c8:	003fee06 	br	81122584 <__reset+0xfb102584>

811225cc <_fclose_r>:
811225cc:	28003b26 	beq	r5,zero,811226bc <_fclose_r+0xf0>
811225d0:	defffc04 	addi	sp,sp,-16
811225d4:	de00012e 	bgeu	sp,et,811225dc <_fclose_r+0x10>
811225d8:	003b68fa 	trap	3
811225dc:	dc400115 	stw	r17,4(sp)
811225e0:	dc000015 	stw	r16,0(sp)
811225e4:	dfc00315 	stw	ra,12(sp)
811225e8:	dc800215 	stw	r18,8(sp)
811225ec:	2023883a 	mov	r17,r4
811225f0:	2821883a 	mov	r16,r5
811225f4:	20000226 	beq	r4,zero,81122600 <_fclose_r+0x34>
811225f8:	20800e17 	ldw	r2,56(r4)
811225fc:	10002726 	beq	r2,zero,8112269c <_fclose_r+0xd0>
81122600:	8080030f 	ldh	r2,12(r16)
81122604:	1000071e 	bne	r2,zero,81122624 <_fclose_r+0x58>
81122608:	0005883a 	mov	r2,zero
8112260c:	dfc00317 	ldw	ra,12(sp)
81122610:	dc800217 	ldw	r18,8(sp)
81122614:	dc400117 	ldw	r17,4(sp)
81122618:	dc000017 	ldw	r16,0(sp)
8112261c:	dec00404 	addi	sp,sp,16
81122620:	f800283a 	ret
81122624:	800b883a 	mov	r5,r16
81122628:	8809883a 	mov	r4,r17
8112262c:	111a5500 	call	8111a550 <__sflush_r>
81122630:	1025883a 	mov	r18,r2
81122634:	80800b17 	ldw	r2,44(r16)
81122638:	10000426 	beq	r2,zero,8112264c <_fclose_r+0x80>
8112263c:	81400717 	ldw	r5,28(r16)
81122640:	8809883a 	mov	r4,r17
81122644:	103ee83a 	callr	r2
81122648:	10001616 	blt	r2,zero,811226a4 <_fclose_r+0xd8>
8112264c:	8080030b 	ldhu	r2,12(r16)
81122650:	1080200c 	andi	r2,r2,128
81122654:	1000151e 	bne	r2,zero,811226ac <_fclose_r+0xe0>
81122658:	81400c17 	ldw	r5,48(r16)
8112265c:	28000526 	beq	r5,zero,81122674 <_fclose_r+0xa8>
81122660:	80801004 	addi	r2,r16,64
81122664:	28800226 	beq	r5,r2,81122670 <_fclose_r+0xa4>
81122668:	8809883a 	mov	r4,r17
8112266c:	111b0080 	call	8111b008 <_free_r>
81122670:	80000c15 	stw	zero,48(r16)
81122674:	81401117 	ldw	r5,68(r16)
81122678:	28000326 	beq	r5,zero,81122688 <_fclose_r+0xbc>
8112267c:	8809883a 	mov	r4,r17
81122680:	111b0080 	call	8111b008 <_free_r>
81122684:	80001115 	stw	zero,68(r16)
81122688:	111ab800 	call	8111ab80 <__sfp_lock_acquire>
8112268c:	8000030d 	sth	zero,12(r16)
81122690:	111ab840 	call	8111ab84 <__sfp_lock_release>
81122694:	9005883a 	mov	r2,r18
81122698:	003fdc06 	br	8112260c <__reset+0xfb10260c>
8112269c:	111ab700 	call	8111ab70 <__sinit>
811226a0:	003fd706 	br	81122600 <__reset+0xfb102600>
811226a4:	04bfffc4 	movi	r18,-1
811226a8:	003fe806 	br	8112264c <__reset+0xfb10264c>
811226ac:	81400417 	ldw	r5,16(r16)
811226b0:	8809883a 	mov	r4,r17
811226b4:	111b0080 	call	8111b008 <_free_r>
811226b8:	003fe706 	br	81122658 <__reset+0xfb102658>
811226bc:	0005883a 	mov	r2,zero
811226c0:	f800283a 	ret

811226c4 <fclose>:
811226c4:	00a04534 	movhi	r2,33044
811226c8:	10bf9d04 	addi	r2,r2,-396
811226cc:	200b883a 	mov	r5,r4
811226d0:	11000017 	ldw	r4,0(r2)
811226d4:	11225cc1 	jmpi	811225cc <_fclose_r>

811226d8 <__fputwc>:
811226d8:	defff804 	addi	sp,sp,-32
811226dc:	de00012e 	bgeu	sp,et,811226e4 <__fputwc+0xc>
811226e0:	003b68fa 	trap	3
811226e4:	dcc00415 	stw	r19,16(sp)
811226e8:	dc800315 	stw	r18,12(sp)
811226ec:	dc000115 	stw	r16,4(sp)
811226f0:	dfc00715 	stw	ra,28(sp)
811226f4:	dd400615 	stw	r21,24(sp)
811226f8:	dd000515 	stw	r20,20(sp)
811226fc:	dc400215 	stw	r17,8(sp)
81122700:	2027883a 	mov	r19,r4
81122704:	2825883a 	mov	r18,r5
81122708:	3021883a 	mov	r16,r6
8112270c:	111ba980 	call	8111ba98 <__locale_mb_cur_max>
81122710:	00c00044 	movi	r3,1
81122714:	10c03e26 	beq	r2,r3,81122810 <__fputwc+0x138>
81122718:	81c01704 	addi	r7,r16,92
8112271c:	900d883a 	mov	r6,r18
81122720:	d80b883a 	mov	r5,sp
81122724:	9809883a 	mov	r4,r19
81122728:	11236bc0 	call	811236bc <_wcrtomb_r>
8112272c:	1029883a 	mov	r20,r2
81122730:	00bfffc4 	movi	r2,-1
81122734:	a0802026 	beq	r20,r2,811227b8 <__fputwc+0xe0>
81122738:	d9400003 	ldbu	r5,0(sp)
8112273c:	a0001c26 	beq	r20,zero,811227b0 <__fputwc+0xd8>
81122740:	0023883a 	mov	r17,zero
81122744:	05400284 	movi	r21,10
81122748:	00000906 	br	81122770 <__fputwc+0x98>
8112274c:	80800017 	ldw	r2,0(r16)
81122750:	11400005 	stb	r5,0(r2)
81122754:	80c00017 	ldw	r3,0(r16)
81122758:	18c00044 	addi	r3,r3,1
8112275c:	80c00015 	stw	r3,0(r16)
81122760:	8c400044 	addi	r17,r17,1
81122764:	dc45883a 	add	r2,sp,r17
81122768:	8d00112e 	bgeu	r17,r20,811227b0 <__fputwc+0xd8>
8112276c:	11400003 	ldbu	r5,0(r2)
81122770:	80c00217 	ldw	r3,8(r16)
81122774:	18ffffc4 	addi	r3,r3,-1
81122778:	80c00215 	stw	r3,8(r16)
8112277c:	183ff30e 	bge	r3,zero,8112274c <__reset+0xfb10274c>
81122780:	80800617 	ldw	r2,24(r16)
81122784:	18801916 	blt	r3,r2,811227ec <__fputwc+0x114>
81122788:	80800017 	ldw	r2,0(r16)
8112278c:	11400005 	stb	r5,0(r2)
81122790:	80800017 	ldw	r2,0(r16)
81122794:	10c00003 	ldbu	r3,0(r2)
81122798:	10800044 	addi	r2,r2,1
8112279c:	1d402326 	beq	r3,r21,8112282c <__fputwc+0x154>
811227a0:	80800015 	stw	r2,0(r16)
811227a4:	8c400044 	addi	r17,r17,1
811227a8:	dc45883a 	add	r2,sp,r17
811227ac:	8d3fef36 	bltu	r17,r20,8112276c <__reset+0xfb10276c>
811227b0:	9005883a 	mov	r2,r18
811227b4:	00000406 	br	811227c8 <__fputwc+0xf0>
811227b8:	80c0030b 	ldhu	r3,12(r16)
811227bc:	a005883a 	mov	r2,r20
811227c0:	18c01014 	ori	r3,r3,64
811227c4:	80c0030d 	sth	r3,12(r16)
811227c8:	dfc00717 	ldw	ra,28(sp)
811227cc:	dd400617 	ldw	r21,24(sp)
811227d0:	dd000517 	ldw	r20,20(sp)
811227d4:	dcc00417 	ldw	r19,16(sp)
811227d8:	dc800317 	ldw	r18,12(sp)
811227dc:	dc400217 	ldw	r17,8(sp)
811227e0:	dc000117 	ldw	r16,4(sp)
811227e4:	dec00804 	addi	sp,sp,32
811227e8:	f800283a 	ret
811227ec:	800d883a 	mov	r6,r16
811227f0:	29403fcc 	andi	r5,r5,255
811227f4:	9809883a 	mov	r4,r19
811227f8:	112355c0 	call	8112355c <__swbuf_r>
811227fc:	10bfffe0 	cmpeqi	r2,r2,-1
81122800:	10803fcc 	andi	r2,r2,255
81122804:	103fd626 	beq	r2,zero,81122760 <__reset+0xfb102760>
81122808:	00bfffc4 	movi	r2,-1
8112280c:	003fee06 	br	811227c8 <__reset+0xfb1027c8>
81122810:	90ffffc4 	addi	r3,r18,-1
81122814:	01003f84 	movi	r4,254
81122818:	20ffbf36 	bltu	r4,r3,81122718 <__reset+0xfb102718>
8112281c:	900b883a 	mov	r5,r18
81122820:	dc800005 	stb	r18,0(sp)
81122824:	1029883a 	mov	r20,r2
81122828:	003fc506 	br	81122740 <__reset+0xfb102740>
8112282c:	800d883a 	mov	r6,r16
81122830:	a80b883a 	mov	r5,r21
81122834:	9809883a 	mov	r4,r19
81122838:	112355c0 	call	8112355c <__swbuf_r>
8112283c:	10bfffe0 	cmpeqi	r2,r2,-1
81122840:	003fef06 	br	81122800 <__reset+0xfb102800>

81122844 <_fputwc_r>:
81122844:	3080030b 	ldhu	r2,12(r6)
81122848:	10c8000c 	andi	r3,r2,8192
8112284c:	1800051e 	bne	r3,zero,81122864 <_fputwc_r+0x20>
81122850:	30c01917 	ldw	r3,100(r6)
81122854:	10880014 	ori	r2,r2,8192
81122858:	3080030d 	sth	r2,12(r6)
8112285c:	18880014 	ori	r2,r3,8192
81122860:	30801915 	stw	r2,100(r6)
81122864:	11226d81 	jmpi	811226d8 <__fputwc>

81122868 <fputwc>:
81122868:	00a04534 	movhi	r2,33044
8112286c:	defffc04 	addi	sp,sp,-16
81122870:	10bf9d04 	addi	r2,r2,-396
81122874:	de00012e 	bgeu	sp,et,8112287c <fputwc+0x14>
81122878:	003b68fa 	trap	3
8112287c:	dc000115 	stw	r16,4(sp)
81122880:	14000017 	ldw	r16,0(r2)
81122884:	dc400215 	stw	r17,8(sp)
81122888:	dfc00315 	stw	ra,12(sp)
8112288c:	2023883a 	mov	r17,r4
81122890:	80000226 	beq	r16,zero,8112289c <fputwc+0x34>
81122894:	80800e17 	ldw	r2,56(r16)
81122898:	10001026 	beq	r2,zero,811228dc <fputwc+0x74>
8112289c:	2880030b 	ldhu	r2,12(r5)
811228a0:	10c8000c 	andi	r3,r2,8192
811228a4:	1800051e 	bne	r3,zero,811228bc <fputwc+0x54>
811228a8:	28c01917 	ldw	r3,100(r5)
811228ac:	10880014 	ori	r2,r2,8192
811228b0:	2880030d 	sth	r2,12(r5)
811228b4:	18880014 	ori	r2,r3,8192
811228b8:	28801915 	stw	r2,100(r5)
811228bc:	280d883a 	mov	r6,r5
811228c0:	8009883a 	mov	r4,r16
811228c4:	880b883a 	mov	r5,r17
811228c8:	dfc00317 	ldw	ra,12(sp)
811228cc:	dc400217 	ldw	r17,8(sp)
811228d0:	dc000117 	ldw	r16,4(sp)
811228d4:	dec00404 	addi	sp,sp,16
811228d8:	11226d81 	jmpi	811226d8 <__fputwc>
811228dc:	8009883a 	mov	r4,r16
811228e0:	d9400015 	stw	r5,0(sp)
811228e4:	111ab700 	call	8111ab70 <__sinit>
811228e8:	d9400017 	ldw	r5,0(sp)
811228ec:	003feb06 	br	8112289c <__reset+0xfb10289c>

811228f0 <rshift>:
811228f0:	2807d17a 	srai	r3,r5,5
811228f4:	20800417 	ldw	r2,16(r4)
811228f8:	22000504 	addi	r8,r4,20
811228fc:	1880250e 	bge	r3,r2,81122994 <rshift+0xa4>
81122900:	1085883a 	add	r2,r2,r2
81122904:	18c7883a 	add	r3,r3,r3
81122908:	1085883a 	add	r2,r2,r2
8112290c:	18c7883a 	add	r3,r3,r3
81122910:	294007cc 	andi	r5,r5,31
81122914:	4085883a 	add	r2,r8,r2
81122918:	40c7883a 	add	r3,r8,r3
8112291c:	28002026 	beq	r5,zero,811229a0 <rshift+0xb0>
81122920:	19800017 	ldw	r6,0(r3)
81122924:	02c00804 	movi	r11,32
81122928:	19c00104 	addi	r7,r3,4
8112292c:	5957c83a 	sub	r11,r11,r5
81122930:	314cd83a 	srl	r6,r6,r5
81122934:	38802c2e 	bgeu	r7,r2,811229e8 <rshift+0xf8>
81122938:	4015883a 	mov	r10,r8
8112293c:	3a400017 	ldw	r9,0(r7)
81122940:	52800104 	addi	r10,r10,4
81122944:	39c00104 	addi	r7,r7,4
81122948:	4ad2983a 	sll	r9,r9,r11
8112294c:	498cb03a 	or	r6,r9,r6
81122950:	51bfff15 	stw	r6,-4(r10)
81122954:	39bfff17 	ldw	r6,-4(r7)
81122958:	314cd83a 	srl	r6,r6,r5
8112295c:	38bff736 	bltu	r7,r2,8112293c <__reset+0xfb10293c>
81122960:	10c7c83a 	sub	r3,r2,r3
81122964:	18fffec4 	addi	r3,r3,-5
81122968:	1806d0ba 	srli	r3,r3,2
8112296c:	18c00044 	addi	r3,r3,1
81122970:	18c7883a 	add	r3,r3,r3
81122974:	18c7883a 	add	r3,r3,r3
81122978:	40c7883a 	add	r3,r8,r3
8112297c:	19800015 	stw	r6,0(r3)
81122980:	30000126 	beq	r6,zero,81122988 <rshift+0x98>
81122984:	18c00104 	addi	r3,r3,4
81122988:	1a05c83a 	sub	r2,r3,r8
8112298c:	1005d0ba 	srai	r2,r2,2
81122990:	00001206 	br	811229dc <rshift+0xec>
81122994:	20000415 	stw	zero,16(r4)
81122998:	20000515 	stw	zero,20(r4)
8112299c:	f800283a 	ret
811229a0:	18bffc2e 	bgeu	r3,r2,81122994 <__reset+0xfb102994>
811229a4:	180d883a 	mov	r6,r3
811229a8:	400b883a 	mov	r5,r8
811229ac:	31c00017 	ldw	r7,0(r6)
811229b0:	29400104 	addi	r5,r5,4
811229b4:	31800104 	addi	r6,r6,4
811229b8:	29ffff15 	stw	r7,-4(r5)
811229bc:	30bffb36 	bltu	r6,r2,811229ac <__reset+0xfb1029ac>
811229c0:	00c6303a 	nor	r3,zero,r3
811229c4:	1885883a 	add	r2,r3,r2
811229c8:	1004d0ba 	srli	r2,r2,2
811229cc:	10800044 	addi	r2,r2,1
811229d0:	1085883a 	add	r2,r2,r2
811229d4:	1085883a 	add	r2,r2,r2
811229d8:	1005d0ba 	srai	r2,r2,2
811229dc:	20800415 	stw	r2,16(r4)
811229e0:	103fed26 	beq	r2,zero,81122998 <__reset+0xfb102998>
811229e4:	f800283a 	ret
811229e8:	4007883a 	mov	r3,r8
811229ec:	003fe306 	br	8112297c <__reset+0xfb10297c>

811229f0 <__gethex>:
811229f0:	deffeb04 	addi	sp,sp,-84
811229f4:	de00012e 	bgeu	sp,et,811229fc <__gethex+0xc>
811229f8:	003b68fa 	trap	3
811229fc:	dfc01415 	stw	ra,80(sp)
81122a00:	dd801115 	stw	r22,68(sp)
81122a04:	dcc00e15 	stw	r19,56(sp)
81122a08:	dc800d15 	stw	r18,52(sp)
81122a0c:	2827883a 	mov	r19,r5
81122a10:	d9000115 	stw	r4,4(sp)
81122a14:	d9800015 	stw	r6,0(sp)
81122a18:	d9c00415 	stw	r7,16(sp)
81122a1c:	df001315 	stw	fp,76(sp)
81122a20:	ddc01215 	stw	r23,72(sp)
81122a24:	dd401015 	stw	r21,64(sp)
81122a28:	dd000f15 	stw	r20,60(sp)
81122a2c:	dc400c15 	stw	r17,48(sp)
81122a30:	dc000b15 	stw	r16,44(sp)
81122a34:	111babc0 	call	8111babc <_localeconv_r>
81122a38:	14800017 	ldw	r18,0(r2)
81122a3c:	9009883a 	mov	r4,r18
81122a40:	1112a400 	call	81112a40 <strlen>
81122a44:	98c00017 	ldw	r3,0(r19)
81122a48:	102d883a 	mov	r22,r2
81122a4c:	9085883a 	add	r2,r18,r2
81122a50:	10bfffc3 	ldbu	r2,-1(r2)
81122a54:	19000083 	ldbu	r4,2(r3)
81122a58:	d8800305 	stb	r2,12(sp)
81122a5c:	00800c04 	movi	r2,48
81122a60:	2081521e 	bne	r4,r2,81122fac <__gethex+0x5bc>
81122a64:	017fff84 	movi	r5,-2
81122a68:	188000c4 	addi	r2,r3,3
81122a6c:	28cbc83a 	sub	r5,r5,r3
81122a70:	200d883a 	mov	r6,r4
81122a74:	28a3883a 	add	r17,r5,r2
81122a78:	102b883a 	mov	r21,r2
81122a7c:	10800044 	addi	r2,r2,1
81122a80:	113fffc3 	ldbu	r4,-1(r2)
81122a84:	21bffb26 	beq	r4,r6,81122a74 <__reset+0xfb102a74>
81122a88:	05204534 	movhi	r20,33044
81122a8c:	a5373604 	addi	r20,r20,-9000
81122a90:	a109883a 	add	r4,r20,r4
81122a94:	20800003 	ldbu	r2,0(r4)
81122a98:	10008826 	beq	r2,zero,81122cbc <__gethex+0x2cc>
81122a9c:	a8800003 	ldbu	r2,0(r21)
81122aa0:	0015883a 	mov	r10,zero
81122aa4:	002f883a 	mov	r23,zero
81122aa8:	a085883a 	add	r2,r20,r2
81122aac:	10800003 	ldbu	r2,0(r2)
81122ab0:	a821883a 	mov	r16,r21
81122ab4:	10000526 	beq	r2,zero,81122acc <__gethex+0xdc>
81122ab8:	84000044 	addi	r16,r16,1
81122abc:	80800003 	ldbu	r2,0(r16)
81122ac0:	a085883a 	add	r2,r20,r2
81122ac4:	10800003 	ldbu	r2,0(r2)
81122ac8:	103ffb1e 	bne	r2,zero,81122ab8 <__reset+0xfb102ab8>
81122acc:	b00d883a 	mov	r6,r22
81122ad0:	900b883a 	mov	r5,r18
81122ad4:	8009883a 	mov	r4,r16
81122ad8:	da800a15 	stw	r10,40(sp)
81122adc:	112348c0 	call	8112348c <strncmp>
81122ae0:	da800a17 	ldw	r10,40(sp)
81122ae4:	1000031e 	bne	r2,zero,81122af4 <__gethex+0x104>
81122ae8:	b8015226 	beq	r23,zero,81123034 <__gethex+0x644>
81122aec:	80800003 	ldbu	r2,0(r16)
81122af0:	00000206 	br	81122afc <__gethex+0x10c>
81122af4:	80800003 	ldbu	r2,0(r16)
81122af8:	b8011f26 	beq	r23,zero,81122f78 <__gethex+0x588>
81122afc:	85efc83a 	sub	r23,r16,r23
81122b00:	bdef883a 	add	r23,r23,r23
81122b04:	bdef883a 	add	r23,r23,r23
81122b08:	05efc83a 	sub	r23,zero,r23
81122b0c:	10803fcc 	andi	r2,r2,255
81122b10:	01001404 	movi	r4,80
81122b14:	11008626 	beq	r2,r4,81122d30 <__gethex+0x340>
81122b18:	01001c04 	movi	r4,112
81122b1c:	11008426 	beq	r2,r4,81122d30 <__gethex+0x340>
81122b20:	8039883a 	mov	fp,r16
81122b24:	9c000015 	stw	r16,0(r19)
81122b28:	5000711e 	bne	r10,zero,81122cf0 <__gethex+0x300>
81122b2c:	e545c83a 	sub	r2,fp,r21
81122b30:	10bfffc4 	addi	r2,r2,-1
81122b34:	010001c4 	movi	r4,7
81122b38:	000b883a 	mov	r5,zero
81122b3c:	2080030e 	bge	r4,r2,81122b4c <__gethex+0x15c>
81122b40:	1005d07a 	srai	r2,r2,1
81122b44:	29400044 	addi	r5,r5,1
81122b48:	20bffd16 	blt	r4,r2,81122b40 <__reset+0xfb102b40>
81122b4c:	d9000117 	ldw	r4,4(sp)
81122b50:	111bfd80 	call	8111bfd8 <_Balloc>
81122b54:	10c00504 	addi	r3,r2,20
81122b58:	d8c00215 	stw	r3,8(sp)
81122b5c:	1021883a 	mov	r16,r2
81122b60:	af01732e 	bgeu	r21,fp,81123130 <__gethex+0x740>
81122b64:	dc400303 	ldbu	r17,12(sp)
81122b68:	03400044 	movi	r13,1
81122b6c:	1815883a 	mov	r10,r3
81122b70:	0013883a 	mov	r9,zero
81122b74:	0027883a 	mov	r19,zero
81122b78:	6d9bc83a 	sub	r13,r13,r22
81122b7c:	02c00804 	movi	r11,32
81122b80:	e0bfffc3 	ldbu	r2,-1(fp)
81122b84:	e3bfffc4 	addi	r14,fp,-1
81122b88:	88803026 	beq	r17,r2,81122c4c <__gethex+0x25c>
81122b8c:	9ac04526 	beq	r19,r11,81122ca4 <__gethex+0x2b4>
81122b90:	980b883a 	mov	r5,r19
81122b94:	9cc00104 	addi	r19,r19,4
81122b98:	e13fffc3 	ldbu	r4,-1(fp)
81122b9c:	7039883a 	mov	fp,r14
81122ba0:	a109883a 	add	r4,r20,r4
81122ba4:	20800003 	ldbu	r2,0(r4)
81122ba8:	108003cc 	andi	r2,r2,15
81122bac:	1144983a 	sll	r2,r2,r5
81122bb0:	4892b03a 	or	r9,r9,r2
81122bb4:	af3ff236 	bltu	r21,fp,81122b80 <__reset+0xfb102b80>
81122bb8:	d8c00217 	ldw	r3,8(sp)
81122bbc:	50800104 	addi	r2,r10,4
81122bc0:	52400015 	stw	r9,0(r10)
81122bc4:	10c5c83a 	sub	r2,r2,r3
81122bc8:	1005d0ba 	srai	r2,r2,2
81122bcc:	4809883a 	mov	r4,r9
81122bd0:	80800415 	stw	r2,16(r16)
81122bd4:	1022917a 	slli	r17,r2,5
81122bd8:	111c2e40 	call	8111c2e4 <__hi0bits>
81122bdc:	d8c00017 	ldw	r3,0(sp)
81122be0:	8885c83a 	sub	r2,r17,r2
81122be4:	1c800017 	ldw	r18,0(r3)
81122be8:	9080c716 	blt	r18,r2,81122f08 <__gethex+0x518>
81122bec:	1480e416 	blt	r2,r18,81122f80 <__gethex+0x590>
81122bf0:	0027883a 	mov	r19,zero
81122bf4:	d8c00017 	ldw	r3,0(sp)
81122bf8:	18800217 	ldw	r2,8(r3)
81122bfc:	15c08d16 	blt	r2,r23,81122e34 <__gethex+0x444>
81122c00:	d8c00017 	ldw	r3,0(sp)
81122c04:	18800117 	ldw	r2,4(r3)
81122c08:	b880aa0e 	bge	r23,r2,81122eb4 <__gethex+0x4c4>
81122c0c:	15efc83a 	sub	r23,r2,r23
81122c10:	bc80ed16 	blt	r23,r18,81122fc8 <__gethex+0x5d8>
81122c14:	18c00317 	ldw	r3,12(r3)
81122c18:	01000084 	movi	r4,2
81122c1c:	19014926 	beq	r3,r4,81123144 <__gethex+0x754>
81122c20:	010000c4 	movi	r4,3
81122c24:	19012e26 	beq	r3,r4,811230e0 <__gethex+0x6f0>
81122c28:	01000044 	movi	r4,1
81122c2c:	19014826 	beq	r3,r4,81123150 <__gethex+0x760>
81122c30:	d9000117 	ldw	r4,4(sp)
81122c34:	800b883a 	mov	r5,r16
81122c38:	111c0880 	call	8111c088 <_Bfree>
81122c3c:	d8801517 	ldw	r2,84(sp)
81122c40:	10000015 	stw	zero,0(r2)
81122c44:	00801404 	movi	r2,80
81122c48:	00002b06 	br	81122cf8 <__gethex+0x308>
81122c4c:	735f883a 	add	r15,r14,r13
81122c50:	7d7fce36 	bltu	r15,r21,81122b8c <__reset+0xfb102b8c>
81122c54:	7809883a 	mov	r4,r15
81122c58:	b00d883a 	mov	r6,r22
81122c5c:	900b883a 	mov	r5,r18
81122c60:	da400515 	stw	r9,20(sp)
81122c64:	da800a15 	stw	r10,40(sp)
81122c68:	dac00915 	stw	r11,36(sp)
81122c6c:	db400815 	stw	r13,32(sp)
81122c70:	db800615 	stw	r14,24(sp)
81122c74:	dbc00715 	stw	r15,28(sp)
81122c78:	112348c0 	call	8112348c <strncmp>
81122c7c:	da400517 	ldw	r9,20(sp)
81122c80:	da800a17 	ldw	r10,40(sp)
81122c84:	dac00917 	ldw	r11,36(sp)
81122c88:	db400817 	ldw	r13,32(sp)
81122c8c:	db800617 	ldw	r14,24(sp)
81122c90:	dbc00717 	ldw	r15,28(sp)
81122c94:	103fbd1e 	bne	r2,zero,81122b8c <__reset+0xfb102b8c>
81122c98:	7839883a 	mov	fp,r15
81122c9c:	af3fb836 	bltu	r21,fp,81122b80 <__reset+0xfb102b80>
81122ca0:	003fc506 	br	81122bb8 <__reset+0xfb102bb8>
81122ca4:	04c00104 	movi	r19,4
81122ca8:	52400015 	stw	r9,0(r10)
81122cac:	000b883a 	mov	r5,zero
81122cb0:	54d5883a 	add	r10,r10,r19
81122cb4:	0013883a 	mov	r9,zero
81122cb8:	003fb706 	br	81122b98 <__reset+0xfb102b98>
81122cbc:	b00d883a 	mov	r6,r22
81122cc0:	900b883a 	mov	r5,r18
81122cc4:	a809883a 	mov	r4,r21
81122cc8:	112348c0 	call	8112348c <strncmp>
81122ccc:	10006426 	beq	r2,zero,81122e60 <__gethex+0x470>
81122cd0:	a8800003 	ldbu	r2,0(r21)
81122cd4:	a821883a 	mov	r16,r21
81122cd8:	10803fcc 	andi	r2,r2,255
81122cdc:	01001404 	movi	r4,80
81122ce0:	11001126 	beq	r2,r4,81122d28 <__gethex+0x338>
81122ce4:	01001c04 	movi	r4,112
81122ce8:	11000f26 	beq	r2,r4,81122d28 <__gethex+0x338>
81122cec:	9c000015 	stw	r16,0(r19)
81122cf0:	8800831e 	bne	r17,zero,81122f00 <__gethex+0x510>
81122cf4:	00800184 	movi	r2,6
81122cf8:	dfc01417 	ldw	ra,80(sp)
81122cfc:	df001317 	ldw	fp,76(sp)
81122d00:	ddc01217 	ldw	r23,72(sp)
81122d04:	dd801117 	ldw	r22,68(sp)
81122d08:	dd401017 	ldw	r21,64(sp)
81122d0c:	dd000f17 	ldw	r20,60(sp)
81122d10:	dcc00e17 	ldw	r19,56(sp)
81122d14:	dc800d17 	ldw	r18,52(sp)
81122d18:	dc400c17 	ldw	r17,48(sp)
81122d1c:	dc000b17 	ldw	r16,44(sp)
81122d20:	dec01504 	addi	sp,sp,84
81122d24:	f800283a 	ret
81122d28:	002f883a 	mov	r23,zero
81122d2c:	02800044 	movi	r10,1
81122d30:	80800043 	ldbu	r2,1(r16)
81122d34:	01400ac4 	movi	r5,43
81122d38:	11003fcc 	andi	r4,r2,255
81122d3c:	21406e26 	beq	r4,r5,81122ef8 <__gethex+0x508>
81122d40:	01400b44 	movi	r5,45
81122d44:	21404226 	beq	r4,r5,81122e50 <__gethex+0x460>
81122d48:	81400044 	addi	r5,r16,1
81122d4c:	000d883a 	mov	r6,zero
81122d50:	10803fcc 	andi	r2,r2,255
81122d54:	a085883a 	add	r2,r20,r2
81122d58:	11000003 	ldbu	r4,0(r2)
81122d5c:	03000604 	movi	r12,24
81122d60:	20bfffc4 	addi	r2,r4,-1
81122d64:	10803fcc 	andi	r2,r2,255
81122d68:	60bf6d36 	bltu	r12,r2,81122b20 <__reset+0xfb102b20>
81122d6c:	2ac00043 	ldbu	r11,1(r5)
81122d70:	20803fcc 	andi	r2,r4,255
81122d74:	01204534 	movhi	r4,33044
81122d78:	21373604 	addi	r4,r4,-9000
81122d7c:	22c9883a 	add	r4,r4,r11
81122d80:	23400003 	ldbu	r13,0(r4)
81122d84:	10bffc04 	addi	r2,r2,-16
81122d88:	29400044 	addi	r5,r5,1
81122d8c:	693fffc4 	addi	r4,r13,-1
81122d90:	21003fcc 	andi	r4,r4,255
81122d94:	6b403fcc 	andi	r13,r13,255
81122d98:	61000b36 	bltu	r12,r4,81122dc8 <__gethex+0x3d8>
81122d9c:	29400044 	addi	r5,r5,1
81122da0:	29000003 	ldbu	r4,0(r5)
81122da4:	108002a4 	muli	r2,r2,10
81122da8:	a109883a 	add	r4,r20,r4
81122dac:	22c00003 	ldbu	r11,0(r4)
81122db0:	1345883a 	add	r2,r2,r13
81122db4:	10bffc04 	addi	r2,r2,-16
81122db8:	593fffc4 	addi	r4,r11,-1
81122dbc:	21003fcc 	andi	r4,r4,255
81122dc0:	5b403fcc 	andi	r13,r11,255
81122dc4:	613ff52e 	bgeu	r12,r4,81122d9c <__reset+0xfb102d9c>
81122dc8:	30000126 	beq	r6,zero,81122dd0 <__gethex+0x3e0>
81122dcc:	0085c83a 	sub	r2,zero,r2
81122dd0:	8039883a 	mov	fp,r16
81122dd4:	b8af883a 	add	r23,r23,r2
81122dd8:	2821883a 	mov	r16,r5
81122ddc:	003f5106 	br	81122b24 <__reset+0xfb102b24>
81122de0:	80800217 	ldw	r2,8(r16)
81122de4:	e080f00e 	bge	fp,r2,811231a8 <__gethex+0x7b8>
81122de8:	e007883a 	mov	r3,fp
81122dec:	18800144 	addi	r2,r3,5
81122df0:	1085883a 	add	r2,r2,r2
81122df4:	18c00044 	addi	r3,r3,1
81122df8:	1085883a 	add	r2,r2,r2
81122dfc:	8085883a 	add	r2,r16,r2
81122e00:	80c00415 	stw	r3,16(r16)
81122e04:	01000044 	movi	r4,1
81122e08:	11000015 	stw	r4,0(r2)
81122e0c:	00800084 	movi	r2,2
81122e10:	8880d826 	beq	r17,r2,81123174 <__gethex+0x784>
81122e14:	e0c0ac0e 	bge	fp,r3,811230c8 <__gethex+0x6d8>
81122e18:	01400044 	movi	r5,1
81122e1c:	8009883a 	mov	r4,r16
81122e20:	11228f00 	call	811228f0 <rshift>
81122e24:	d8c00017 	ldw	r3,0(sp)
81122e28:	bdc00044 	addi	r23,r23,1
81122e2c:	18800217 	ldw	r2,8(r3)
81122e30:	15c0a70e 	bge	r2,r23,811230d0 <__gethex+0x6e0>
81122e34:	d9000117 	ldw	r4,4(sp)
81122e38:	800b883a 	mov	r5,r16
81122e3c:	111c0880 	call	8111c088 <_Bfree>
81122e40:	d9001517 	ldw	r4,84(sp)
81122e44:	008028c4 	movi	r2,163
81122e48:	20000015 	stw	zero,0(r4)
81122e4c:	003faa06 	br	81122cf8 <__reset+0xfb102cf8>
81122e50:	01800044 	movi	r6,1
81122e54:	80800083 	ldbu	r2,2(r16)
81122e58:	81400084 	addi	r5,r16,2
81122e5c:	003fbc06 	br	81122d50 <__reset+0xfb102d50>
81122e60:	ada1883a 	add	r16,r21,r22
81122e64:	81000003 	ldbu	r4,0(r16)
81122e68:	21403fcc 	andi	r5,r4,255
81122e6c:	a145883a 	add	r2,r20,r5
81122e70:	10800003 	ldbu	r2,0(r2)
81122e74:	11803fcc 	andi	r6,r2,255
81122e78:	30004f26 	beq	r6,zero,81122fb8 <__gethex+0x5c8>
81122e7c:	00c00c04 	movi	r3,48
81122e80:	802b883a 	mov	r21,r16
81122e84:	28c0061e 	bne	r5,r3,81122ea0 <__gethex+0x4b0>
81122e88:	2809883a 	mov	r4,r5
81122e8c:	ad400044 	addi	r21,r21,1
81122e90:	a8800003 	ldbu	r2,0(r21)
81122e94:	113ffd26 	beq	r2,r4,81122e8c <__reset+0xfb102e8c>
81122e98:	a085883a 	add	r2,r20,r2
81122e9c:	10800003 	ldbu	r2,0(r2)
81122ea0:	10803fcc 	andi	r2,r2,255
81122ea4:	1015003a 	cmpeq	r10,r2,zero
81122ea8:	802f883a 	mov	r23,r16
81122eac:	04400044 	movi	r17,1
81122eb0:	003eff06 	br	81122ab0 <__reset+0xfb102ab0>
81122eb4:	04400044 	movi	r17,1
81122eb8:	98000926 	beq	r19,zero,81122ee0 <__gethex+0x4f0>
81122ebc:	d8c00017 	ldw	r3,0(sp)
81122ec0:	18800317 	ldw	r2,12(r3)
81122ec4:	00c00084 	movi	r3,2
81122ec8:	10c06826 	beq	r2,r3,8112306c <__gethex+0x67c>
81122ecc:	00c000c4 	movi	r3,3
81122ed0:	10c06a26 	beq	r2,r3,8112307c <__gethex+0x68c>
81122ed4:	00c00044 	movi	r3,1
81122ed8:	10c08d26 	beq	r2,r3,81123110 <__gethex+0x720>
81122edc:	8c400414 	ori	r17,r17,16
81122ee0:	d9001517 	ldw	r4,84(sp)
81122ee4:	d8c00417 	ldw	r3,16(sp)
81122ee8:	8805883a 	mov	r2,r17
81122eec:	24000015 	stw	r16,0(r4)
81122ef0:	1dc00015 	stw	r23,0(r3)
81122ef4:	003f8006 	br	81122cf8 <__reset+0xfb102cf8>
81122ef8:	000d883a 	mov	r6,zero
81122efc:	003fd506 	br	81122e54 <__reset+0xfb102e54>
81122f00:	0005883a 	mov	r2,zero
81122f04:	003f7c06 	br	81122cf8 <__reset+0xfb102cf8>
81122f08:	14a3c83a 	sub	r17,r2,r18
81122f0c:	880b883a 	mov	r5,r17
81122f10:	8009883a 	mov	r4,r16
81122f14:	111cfa80 	call	8111cfa8 <__any_on>
81122f18:	10002926 	beq	r2,zero,81122fc0 <__gethex+0x5d0>
81122f1c:	897fffc4 	addi	r5,r17,-1
81122f20:	2807d17a 	srai	r3,r5,5
81122f24:	d8800217 	ldw	r2,8(sp)
81122f28:	290007cc 	andi	r4,r5,31
81122f2c:	18c7883a 	add	r3,r3,r3
81122f30:	18c7883a 	add	r3,r3,r3
81122f34:	04c00044 	movi	r19,1
81122f38:	10c7883a 	add	r3,r2,r3
81122f3c:	9908983a 	sll	r4,r19,r4
81122f40:	18c00017 	ldw	r3,0(r3)
81122f44:	20c6703a 	and	r3,r4,r3
81122f48:	18000626 	beq	r3,zero,81122f64 <__gethex+0x574>
81122f4c:	99407b0e 	bge	r19,r5,8112313c <__gethex+0x74c>
81122f50:	897fff84 	addi	r5,r17,-2
81122f54:	8009883a 	mov	r4,r16
81122f58:	111cfa80 	call	8111cfa8 <__any_on>
81122f5c:	10007726 	beq	r2,zero,8112313c <__gethex+0x74c>
81122f60:	04c000c4 	movi	r19,3
81122f64:	880b883a 	mov	r5,r17
81122f68:	8009883a 	mov	r4,r16
81122f6c:	11228f00 	call	811228f0 <rshift>
81122f70:	bc6f883a 	add	r23,r23,r17
81122f74:	003f1f06 	br	81122bf4 <__reset+0xfb102bf4>
81122f78:	002f883a 	mov	r23,zero
81122f7c:	003ee306 	br	81122b0c <__reset+0xfb102b0c>
81122f80:	d9000117 	ldw	r4,4(sp)
81122f84:	90a3c83a 	sub	r17,r18,r2
81122f88:	800b883a 	mov	r5,r16
81122f8c:	880d883a 	mov	r6,r17
81122f90:	111c7880 	call	8111c788 <__lshift>
81122f94:	10c00504 	addi	r3,r2,20
81122f98:	1021883a 	mov	r16,r2
81122f9c:	bc6fc83a 	sub	r23,r23,r17
81122fa0:	d8c00215 	stw	r3,8(sp)
81122fa4:	0027883a 	mov	r19,zero
81122fa8:	003f1206 	br	81122bf4 <__reset+0xfb102bf4>
81122fac:	1d400084 	addi	r21,r3,2
81122fb0:	0023883a 	mov	r17,zero
81122fb4:	003eb406 	br	81122a88 <__reset+0xfb102a88>
81122fb8:	2005883a 	mov	r2,r4
81122fbc:	003f4606 	br	81122cd8 <__reset+0xfb102cd8>
81122fc0:	0027883a 	mov	r19,zero
81122fc4:	003fe706 	br	81122f64 <__reset+0xfb102f64>
81122fc8:	bc7fffc4 	addi	r17,r23,-1
81122fcc:	9800421e 	bne	r19,zero,811230d8 <__gethex+0x6e8>
81122fd0:	88000426 	beq	r17,zero,81122fe4 <__gethex+0x5f4>
81122fd4:	880b883a 	mov	r5,r17
81122fd8:	8009883a 	mov	r4,r16
81122fdc:	111cfa80 	call	8111cfa8 <__any_on>
81122fe0:	1027883a 	mov	r19,r2
81122fe4:	8805d17a 	srai	r2,r17,5
81122fe8:	d8c00217 	ldw	r3,8(sp)
81122fec:	8c4007cc 	andi	r17,r17,31
81122ff0:	1085883a 	add	r2,r2,r2
81122ff4:	1085883a 	add	r2,r2,r2
81122ff8:	1885883a 	add	r2,r3,r2
81122ffc:	00c00044 	movi	r3,1
81123000:	1c62983a 	sll	r17,r3,r17
81123004:	10800017 	ldw	r2,0(r2)
81123008:	8884703a 	and	r2,r17,r2
8112300c:	10000126 	beq	r2,zero,81123014 <__gethex+0x624>
81123010:	9cc00094 	ori	r19,r19,2
81123014:	b80b883a 	mov	r5,r23
81123018:	8009883a 	mov	r4,r16
8112301c:	11228f00 	call	811228f0 <rshift>
81123020:	d8c00017 	ldw	r3,0(sp)
81123024:	95e5c83a 	sub	r18,r18,r23
81123028:	04400084 	movi	r17,2
8112302c:	1dc00117 	ldw	r23,4(r3)
81123030:	003fa106 	br	81122eb8 <__reset+0xfb102eb8>
81123034:	85af883a 	add	r23,r16,r22
81123038:	b8800003 	ldbu	r2,0(r23)
8112303c:	b821883a 	mov	r16,r23
81123040:	11003fcc 	andi	r4,r2,255
81123044:	a109883a 	add	r4,r20,r4
81123048:	21000003 	ldbu	r4,0(r4)
8112304c:	203eaa26 	beq	r4,zero,81122af8 <__reset+0xfb102af8>
81123050:	84000044 	addi	r16,r16,1
81123054:	80800003 	ldbu	r2,0(r16)
81123058:	11003fcc 	andi	r4,r2,255
8112305c:	a109883a 	add	r4,r20,r4
81123060:	21000003 	ldbu	r4,0(r4)
81123064:	203ffa1e 	bne	r4,zero,81123050 <__reset+0xfb103050>
81123068:	003ea306 	br	81122af8 <__reset+0xfb102af8>
8112306c:	d9001617 	ldw	r4,88(sp)
81123070:	00800044 	movi	r2,1
81123074:	1109c83a 	sub	r4,r2,r4
81123078:	d9001615 	stw	r4,88(sp)
8112307c:	d8801617 	ldw	r2,88(sp)
81123080:	103f9626 	beq	r2,zero,81122edc <__reset+0xfb102edc>
81123084:	87000417 	ldw	fp,16(r16)
81123088:	d9800217 	ldw	r6,8(sp)
8112308c:	013fffc4 	movi	r4,-1
81123090:	e727883a 	add	r19,fp,fp
81123094:	9ce7883a 	add	r19,r19,r19
81123098:	3005883a 	mov	r2,r6
8112309c:	34cb883a 	add	r5,r6,r19
811230a0:	00000306 	br	811230b0 <__gethex+0x6c0>
811230a4:	10000015 	stw	zero,0(r2)
811230a8:	10800104 	addi	r2,r2,4
811230ac:	117f4c2e 	bgeu	r2,r5,81122de0 <__reset+0xfb102de0>
811230b0:	10c00017 	ldw	r3,0(r2)
811230b4:	193ffb26 	beq	r3,r4,811230a4 <__reset+0xfb1030a4>
811230b8:	18c00044 	addi	r3,r3,1
811230bc:	10c00015 	stw	r3,0(r2)
811230c0:	00800084 	movi	r2,2
811230c4:	88802b26 	beq	r17,r2,81123174 <__gethex+0x784>
811230c8:	948007cc 	andi	r18,r18,31
811230cc:	90002f1e 	bne	r18,zero,8112318c <__gethex+0x79c>
811230d0:	04400844 	movi	r17,33
811230d4:	003f8206 	br	81122ee0 <__reset+0xfb102ee0>
811230d8:	04c00044 	movi	r19,1
811230dc:	003fc106 	br	81122fe4 <__reset+0xfb102fe4>
811230e0:	d8c01617 	ldw	r3,88(sp)
811230e4:	183ed226 	beq	r3,zero,81122c30 <__reset+0xfb102c30>
811230e8:	d8c00417 	ldw	r3,16(sp)
811230ec:	d9001517 	ldw	r4,84(sp)
811230f0:	18800015 	stw	r2,0(r3)
811230f4:	d8c00217 	ldw	r3,8(sp)
811230f8:	00800044 	movi	r2,1
811230fc:	80800415 	stw	r2,16(r16)
81123100:	18800015 	stw	r2,0(r3)
81123104:	24000015 	stw	r16,0(r4)
81123108:	00801884 	movi	r2,98
8112310c:	003efa06 	br	81122cf8 <__reset+0xfb102cf8>
81123110:	9880008c 	andi	r2,r19,2
81123114:	103f7126 	beq	r2,zero,81122edc <__reset+0xfb102edc>
81123118:	d8c00217 	ldw	r3,8(sp)
8112311c:	18800017 	ldw	r2,0(r3)
81123120:	9884b03a 	or	r2,r19,r2
81123124:	1080004c 	andi	r2,r2,1
81123128:	103fd61e 	bne	r2,zero,81123084 <__reset+0xfb103084>
8112312c:	003f6b06 	br	81122edc <__reset+0xfb102edc>
81123130:	da800217 	ldw	r10,8(sp)
81123134:	0013883a 	mov	r9,zero
81123138:	003e9f06 	br	81122bb8 <__reset+0xfb102bb8>
8112313c:	04c00084 	movi	r19,2
81123140:	003f8806 	br	81122f64 <__reset+0xfb102f64>
81123144:	d9001617 	ldw	r4,88(sp)
81123148:	203fe726 	beq	r4,zero,811230e8 <__reset+0xfb1030e8>
8112314c:	003eb806 	br	81122c30 <__reset+0xfb102c30>
81123150:	95feb71e 	bne	r18,r23,81122c30 <__reset+0xfb102c30>
81123154:	1cbfe40e 	bge	r3,r18,811230e8 <__reset+0xfb1030e8>
81123158:	917fffc4 	addi	r5,r18,-1
8112315c:	8009883a 	mov	r4,r16
81123160:	111cfa80 	call	8111cfa8 <__any_on>
81123164:	103eb226 	beq	r2,zero,81122c30 <__reset+0xfb102c30>
81123168:	d8c00017 	ldw	r3,0(sp)
8112316c:	18800117 	ldw	r2,4(r3)
81123170:	003fdd06 	br	811230e8 <__reset+0xfb1030e8>
81123174:	d8c00017 	ldw	r3,0(sp)
81123178:	18800017 	ldw	r2,0(r3)
8112317c:	10bfffc4 	addi	r2,r2,-1
81123180:	90801c26 	beq	r18,r2,811231f4 <__gethex+0x804>
81123184:	04400884 	movi	r17,34
81123188:	003f5506 	br	81122ee0 <__reset+0xfb102ee0>
8112318c:	34c5883a 	add	r2,r6,r19
81123190:	113fff17 	ldw	r4,-4(r2)
81123194:	111c2e40 	call	8111c2e4 <__hi0bits>
81123198:	00c00804 	movi	r3,32
8112319c:	1ca5c83a 	sub	r18,r3,r18
811231a0:	14bfcb0e 	bge	r2,r18,811230d0 <__reset+0xfb1030d0>
811231a4:	003f1c06 	br	81122e18 <__reset+0xfb102e18>
811231a8:	81400117 	ldw	r5,4(r16)
811231ac:	d9000117 	ldw	r4,4(sp)
811231b0:	29400044 	addi	r5,r5,1
811231b4:	111bfd80 	call	8111bfd8 <_Balloc>
811231b8:	81800417 	ldw	r6,16(r16)
811231bc:	81400304 	addi	r5,r16,12
811231c0:	11000304 	addi	r4,r2,12
811231c4:	31800084 	addi	r6,r6,2
811231c8:	318d883a 	add	r6,r6,r6
811231cc:	318d883a 	add	r6,r6,r6
811231d0:	1029883a 	mov	r20,r2
811231d4:	11120c40 	call	811120c4 <memcpy>
811231d8:	d9000117 	ldw	r4,4(sp)
811231dc:	800b883a 	mov	r5,r16
811231e0:	a021883a 	mov	r16,r20
811231e4:	111c0880 	call	8111c088 <_Bfree>
811231e8:	a0c00417 	ldw	r3,16(r20)
811231ec:	a1800504 	addi	r6,r20,20
811231f0:	003efe06 	br	81122dec <__reset+0xfb102dec>
811231f4:	9005d17a 	srai	r2,r18,5
811231f8:	944007cc 	andi	r17,r18,31
811231fc:	1085883a 	add	r2,r2,r2
81123200:	1085883a 	add	r2,r2,r2
81123204:	3087883a 	add	r3,r6,r2
81123208:	00800044 	movi	r2,1
8112320c:	1462983a 	sll	r17,r2,r17
81123210:	18800017 	ldw	r2,0(r3)
81123214:	8884703a 	and	r2,r17,r2
81123218:	1022c03a 	cmpne	r17,r2,zero
8112321c:	00800884 	movi	r2,34
81123220:	1463c83a 	sub	r17,r2,r17
81123224:	003f2e06 	br	81122ee0 <__reset+0xfb102ee0>

81123228 <__hexnan>:
81123228:	defff904 	addi	sp,sp,-28
8112322c:	de00012e 	bgeu	sp,et,81123234 <__hexnan+0xc>
81123230:	003b68fa 	trap	3
81123234:	dc800215 	stw	r18,8(sp)
81123238:	2c800017 	ldw	r18,0(r5)
8112323c:	dfc00615 	stw	ra,24(sp)
81123240:	dd400515 	stw	r21,20(sp)
81123244:	901fd17a 	srai	r15,r18,5
81123248:	dd000415 	stw	r20,16(sp)
8112324c:	dcc00315 	stw	r19,12(sp)
81123250:	7bdf883a 	add	r15,r15,r15
81123254:	7bdf883a 	add	r15,r15,r15
81123258:	dc400115 	stw	r17,4(sp)
8112325c:	dc000015 	stw	r16,0(sp)
81123260:	948007cc 	andi	r18,r18,31
81123264:	33df883a 	add	r15,r6,r15
81123268:	90000126 	beq	r18,zero,81123270 <__hexnan+0x48>
8112326c:	7bc00104 	addi	r15,r15,4
81123270:	22000017 	ldw	r8,0(r4)
81123274:	7affff04 	addi	r11,r15,-4
81123278:	03a04534 	movhi	r14,33044
8112327c:	783fff15 	stw	zero,-4(r15)
81123280:	581b883a 	mov	r13,r11
81123284:	580b883a 	mov	r5,r11
81123288:	000f883a 	mov	r7,zero
8112328c:	003f883a 	mov	ra,zero
81123290:	0019883a 	mov	r12,zero
81123294:	73b73604 	addi	r14,r14,-9000
81123298:	04400204 	movi	r17,8
8112329c:	04000804 	movi	r16,32
811232a0:	04c001c4 	movi	r19,7
811232a4:	42000044 	addi	r8,r8,1
811232a8:	40c00003 	ldbu	r3,0(r8)
811232ac:	18001d26 	beq	r3,zero,81123324 <__hexnan+0xfc>
811232b0:	70c5883a 	add	r2,r14,r3
811232b4:	10800003 	ldbu	r2,0(r2)
811232b8:	12403fcc 	andi	r9,r2,255
811232bc:	4800301e 	bne	r9,zero,81123380 <__hexnan+0x158>
811232c0:	80c04236 	bltu	r16,r3,811233cc <__hexnan+0x1a4>
811232c4:	fb3ff70e 	bge	ra,r12,811232a4 <__reset+0xfb1032a4>
811232c8:	2b40112e 	bgeu	r5,r13,81123310 <__hexnan+0xe8>
811232cc:	99c01016 	blt	r19,r7,81123310 <__hexnan+0xe8>
811232d0:	89e9c83a 	sub	r20,r17,r7
811232d4:	a529883a 	add	r20,r20,r20
811232d8:	2a800017 	ldw	r10,0(r5)
811232dc:	a529883a 	add	r20,r20,r20
811232e0:	852bc83a 	sub	r21,r16,r20
811232e4:	28c00104 	addi	r3,r5,4
811232e8:	2805883a 	mov	r2,r5
811232ec:	19c00017 	ldw	r7,0(r3)
811232f0:	10800104 	addi	r2,r2,4
811232f4:	18c00104 	addi	r3,r3,4
811232f8:	3d52983a 	sll	r9,r7,r21
811232fc:	4a92b03a 	or	r9,r9,r10
81123300:	3d14d83a 	srl	r10,r7,r20
81123304:	127fff15 	stw	r9,-4(r2)
81123308:	1abfff15 	stw	r10,-4(r3)
8112330c:	137ff736 	bltu	r2,r13,811232ec <__reset+0xfb1032ec>
81123310:	31402836 	bltu	r6,r5,811233b4 <__hexnan+0x18c>
81123314:	42000044 	addi	r8,r8,1
81123318:	40c00003 	ldbu	r3,0(r8)
8112331c:	01c00204 	movi	r7,8
81123320:	183fe31e 	bne	r3,zero,811232b0 <__reset+0xfb1032b0>
81123324:	60002b26 	beq	r12,zero,811233d4 <__hexnan+0x1ac>
81123328:	2b40022e 	bgeu	r5,r13,81123334 <__hexnan+0x10c>
8112332c:	008001c4 	movi	r2,7
81123330:	11c0430e 	bge	r2,r7,81123440 <__hexnan+0x218>
81123334:	3140312e 	bgeu	r6,r5,811233fc <__hexnan+0x1d4>
81123338:	3007883a 	mov	r3,r6
8112333c:	29000017 	ldw	r4,0(r5)
81123340:	18800104 	addi	r2,r3,4
81123344:	29400104 	addi	r5,r5,4
81123348:	19000015 	stw	r4,0(r3)
8112334c:	1007883a 	mov	r3,r2
81123350:	597ffa2e 	bgeu	r11,r5,8112333c <__reset+0xfb10333c>
81123354:	10000015 	stw	zero,0(r2)
81123358:	10800104 	addi	r2,r2,4
8112335c:	58bffd2e 	bgeu	r11,r2,81123354 <__reset+0xfb103354>
81123360:	78bfff17 	ldw	r2,-4(r15)
81123364:	1000041e 	bne	r2,zero,81123378 <__hexnan+0x150>
81123368:	32c02d26 	beq	r6,r11,81123420 <__hexnan+0x1f8>
8112336c:	5affff04 	addi	r11,r11,-4
81123370:	58800017 	ldw	r2,0(r11)
81123374:	103ffc26 	beq	r2,zero,81123368 <__reset+0xfb103368>
81123378:	00800144 	movi	r2,5
8112337c:	00001606 	br	811233d8 <__hexnan+0x1b0>
81123380:	39c00044 	addi	r7,r7,1
81123384:	63000044 	addi	r12,r12,1
81123388:	89c0040e 	bge	r17,r7,8112339c <__hexnan+0x174>
8112338c:	317fc52e 	bgeu	r6,r5,811232a4 <__reset+0xfb1032a4>
81123390:	283fff15 	stw	zero,-4(r5)
81123394:	01c00044 	movi	r7,1
81123398:	297fff04 	addi	r5,r5,-4
8112339c:	28c00017 	ldw	r3,0(r5)
811233a0:	108003cc 	andi	r2,r2,15
811233a4:	1806913a 	slli	r3,r3,4
811233a8:	1884b03a 	or	r2,r3,r2
811233ac:	28800015 	stw	r2,0(r5)
811233b0:	003fbc06 	br	811232a4 <__reset+0xfb1032a4>
811233b4:	2b7fff04 	addi	r13,r5,-4
811233b8:	283fff15 	stw	zero,-4(r5)
811233bc:	603f883a 	mov	ra,r12
811233c0:	680b883a 	mov	r5,r13
811233c4:	000f883a 	mov	r7,zero
811233c8:	003fb606 	br	811232a4 <__reset+0xfb1032a4>
811233cc:	00800a44 	movi	r2,41
811233d0:	18801726 	beq	r3,r2,81123430 <__hexnan+0x208>
811233d4:	00800104 	movi	r2,4
811233d8:	dfc00617 	ldw	ra,24(sp)
811233dc:	dd400517 	ldw	r21,20(sp)
811233e0:	dd000417 	ldw	r20,16(sp)
811233e4:	dcc00317 	ldw	r19,12(sp)
811233e8:	dc800217 	ldw	r18,8(sp)
811233ec:	dc400117 	ldw	r17,4(sp)
811233f0:	dc000017 	ldw	r16,0(sp)
811233f4:	dec00704 	addi	sp,sp,28
811233f8:	f800283a 	ret
811233fc:	903fd826 	beq	r18,zero,81123360 <__reset+0xfb103360>
81123400:	00c00804 	movi	r3,32
81123404:	1ca5c83a 	sub	r18,r3,r18
81123408:	00ffffc4 	movi	r3,-1
8112340c:	78bfff17 	ldw	r2,-4(r15)
81123410:	1c86d83a 	srl	r3,r3,r18
81123414:	1884703a 	and	r2,r3,r2
81123418:	78bfff15 	stw	r2,-4(r15)
8112341c:	003fd106 	br	81123364 <__reset+0xfb103364>
81123420:	00800044 	movi	r2,1
81123424:	58800015 	stw	r2,0(r11)
81123428:	00800144 	movi	r2,5
8112342c:	003fea06 	br	811233d8 <__reset+0xfb1033d8>
81123430:	42000044 	addi	r8,r8,1
81123434:	22000015 	stw	r8,0(r4)
81123438:	603fbb1e 	bne	r12,zero,81123328 <__reset+0xfb103328>
8112343c:	003fe506 	br	811233d4 <__reset+0xfb1033d4>
81123440:	02400204 	movi	r9,8
81123444:	49d3c83a 	sub	r9,r9,r7
81123448:	4a53883a 	add	r9,r9,r9
8112344c:	2a000017 	ldw	r8,0(r5)
81123450:	4a53883a 	add	r9,r9,r9
81123454:	02800804 	movi	r10,32
81123458:	5255c83a 	sub	r10,r10,r9
8112345c:	28c00104 	addi	r3,r5,4
81123460:	2805883a 	mov	r2,r5
81123464:	19c00017 	ldw	r7,0(r3)
81123468:	10800104 	addi	r2,r2,4
8112346c:	18c00104 	addi	r3,r3,4
81123470:	3a88983a 	sll	r4,r7,r10
81123474:	2208b03a 	or	r4,r4,r8
81123478:	3a50d83a 	srl	r8,r7,r9
8112347c:	113fff15 	stw	r4,-4(r2)
81123480:	1a3fff15 	stw	r8,-4(r3)
81123484:	137ff736 	bltu	r2,r13,81123464 <__reset+0xfb103464>
81123488:	003faa06 	br	81123334 <__reset+0xfb103334>

8112348c <strncmp>:
8112348c:	30003126 	beq	r6,zero,81123554 <strncmp+0xc8>
81123490:	2144b03a 	or	r2,r4,r5
81123494:	108000cc 	andi	r2,r2,3
81123498:	10001e1e 	bne	r2,zero,81123514 <strncmp+0x88>
8112349c:	024000c4 	movi	r9,3
811234a0:	49801c2e 	bgeu	r9,r6,81123514 <strncmp+0x88>
811234a4:	20800017 	ldw	r2,0(r4)
811234a8:	28c00017 	ldw	r3,0(r5)
811234ac:	10c0191e 	bne	r2,r3,81123514 <strncmp+0x88>
811234b0:	31bfff04 	addi	r6,r6,-4
811234b4:	30002726 	beq	r6,zero,81123554 <strncmp+0xc8>
811234b8:	02ffbff4 	movhi	r11,65279
811234bc:	5affbfc4 	addi	r11,r11,-257
811234c0:	0086303a 	nor	r3,zero,r2
811234c4:	02a02074 	movhi	r10,32897
811234c8:	12c5883a 	add	r2,r2,r11
811234cc:	52a02004 	addi	r10,r10,-32640
811234d0:	10c4703a 	and	r2,r2,r3
811234d4:	1284703a 	and	r2,r2,r10
811234d8:	10000b26 	beq	r2,zero,81123508 <strncmp+0x7c>
811234dc:	00001d06 	br	81123554 <strncmp+0xc8>
811234e0:	20c00017 	ldw	r3,0(r4)
811234e4:	29c00017 	ldw	r7,0(r5)
811234e8:	1ad1883a 	add	r8,r3,r11
811234ec:	00c4303a 	nor	r2,zero,r3
811234f0:	4084703a 	and	r2,r8,r2
811234f4:	1284703a 	and	r2,r2,r10
811234f8:	19c0061e 	bne	r3,r7,81123514 <strncmp+0x88>
811234fc:	31bfff04 	addi	r6,r6,-4
81123500:	30001426 	beq	r6,zero,81123554 <strncmp+0xc8>
81123504:	1000131e 	bne	r2,zero,81123554 <strncmp+0xc8>
81123508:	21000104 	addi	r4,r4,4
8112350c:	29400104 	addi	r5,r5,4
81123510:	49bff336 	bltu	r9,r6,811234e0 <__reset+0xfb1034e0>
81123514:	28800007 	ldb	r2,0(r5)
81123518:	20c00007 	ldb	r3,0(r4)
8112351c:	31bfffc4 	addi	r6,r6,-1
81123520:	10c0081e 	bne	r2,r3,81123544 <strncmp+0xb8>
81123524:	30000b26 	beq	r6,zero,81123554 <strncmp+0xc8>
81123528:	10000a26 	beq	r2,zero,81123554 <strncmp+0xc8>
8112352c:	21000044 	addi	r4,r4,1
81123530:	29400044 	addi	r5,r5,1
81123534:	20800007 	ldb	r2,0(r4)
81123538:	28c00007 	ldb	r3,0(r5)
8112353c:	31bfffc4 	addi	r6,r6,-1
81123540:	10fff826 	beq	r2,r3,81123524 <__reset+0xfb103524>
81123544:	20800003 	ldbu	r2,0(r4)
81123548:	28c00003 	ldbu	r3,0(r5)
8112354c:	10c5c83a 	sub	r2,r2,r3
81123550:	f800283a 	ret
81123554:	0005883a 	mov	r2,zero
81123558:	f800283a 	ret

8112355c <__swbuf_r>:
8112355c:	defffb04 	addi	sp,sp,-20
81123560:	de00012e 	bgeu	sp,et,81123568 <__swbuf_r+0xc>
81123564:	003b68fa 	trap	3
81123568:	dcc00315 	stw	r19,12(sp)
8112356c:	dc800215 	stw	r18,8(sp)
81123570:	dc000015 	stw	r16,0(sp)
81123574:	dfc00415 	stw	ra,16(sp)
81123578:	dc400115 	stw	r17,4(sp)
8112357c:	2025883a 	mov	r18,r4
81123580:	2827883a 	mov	r19,r5
81123584:	3021883a 	mov	r16,r6
81123588:	20000226 	beq	r4,zero,81123594 <__swbuf_r+0x38>
8112358c:	20800e17 	ldw	r2,56(r4)
81123590:	10004226 	beq	r2,zero,8112369c <__swbuf_r+0x140>
81123594:	80800617 	ldw	r2,24(r16)
81123598:	8100030b 	ldhu	r4,12(r16)
8112359c:	80800215 	stw	r2,8(r16)
811235a0:	2080020c 	andi	r2,r4,8
811235a4:	10003626 	beq	r2,zero,81123680 <__swbuf_r+0x124>
811235a8:	80c00417 	ldw	r3,16(r16)
811235ac:	18003426 	beq	r3,zero,81123680 <__swbuf_r+0x124>
811235b0:	2088000c 	andi	r2,r4,8192
811235b4:	9c403fcc 	andi	r17,r19,255
811235b8:	10001a26 	beq	r2,zero,81123624 <__swbuf_r+0xc8>
811235bc:	80800017 	ldw	r2,0(r16)
811235c0:	81000517 	ldw	r4,20(r16)
811235c4:	10c7c83a 	sub	r3,r2,r3
811235c8:	1900200e 	bge	r3,r4,8112364c <__swbuf_r+0xf0>
811235cc:	18c00044 	addi	r3,r3,1
811235d0:	81000217 	ldw	r4,8(r16)
811235d4:	11400044 	addi	r5,r2,1
811235d8:	81400015 	stw	r5,0(r16)
811235dc:	213fffc4 	addi	r4,r4,-1
811235e0:	81000215 	stw	r4,8(r16)
811235e4:	14c00005 	stb	r19,0(r2)
811235e8:	80800517 	ldw	r2,20(r16)
811235ec:	10c01e26 	beq	r2,r3,81123668 <__swbuf_r+0x10c>
811235f0:	8080030b 	ldhu	r2,12(r16)
811235f4:	1080004c 	andi	r2,r2,1
811235f8:	10000226 	beq	r2,zero,81123604 <__swbuf_r+0xa8>
811235fc:	00800284 	movi	r2,10
81123600:	88801926 	beq	r17,r2,81123668 <__swbuf_r+0x10c>
81123604:	8805883a 	mov	r2,r17
81123608:	dfc00417 	ldw	ra,16(sp)
8112360c:	dcc00317 	ldw	r19,12(sp)
81123610:	dc800217 	ldw	r18,8(sp)
81123614:	dc400117 	ldw	r17,4(sp)
81123618:	dc000017 	ldw	r16,0(sp)
8112361c:	dec00504 	addi	sp,sp,20
81123620:	f800283a 	ret
81123624:	81401917 	ldw	r5,100(r16)
81123628:	00b7ffc4 	movi	r2,-8193
8112362c:	21080014 	ori	r4,r4,8192
81123630:	2884703a 	and	r2,r5,r2
81123634:	80801915 	stw	r2,100(r16)
81123638:	80800017 	ldw	r2,0(r16)
8112363c:	8100030d 	sth	r4,12(r16)
81123640:	81000517 	ldw	r4,20(r16)
81123644:	10c7c83a 	sub	r3,r2,r3
81123648:	193fe016 	blt	r3,r4,811235cc <__reset+0xfb1035cc>
8112364c:	800b883a 	mov	r5,r16
81123650:	9009883a 	mov	r4,r18
81123654:	111a7740 	call	8111a774 <_fflush_r>
81123658:	1000071e 	bne	r2,zero,81123678 <__swbuf_r+0x11c>
8112365c:	80800017 	ldw	r2,0(r16)
81123660:	00c00044 	movi	r3,1
81123664:	003fda06 	br	811235d0 <__reset+0xfb1035d0>
81123668:	800b883a 	mov	r5,r16
8112366c:	9009883a 	mov	r4,r18
81123670:	111a7740 	call	8111a774 <_fflush_r>
81123674:	103fe326 	beq	r2,zero,81123604 <__reset+0xfb103604>
81123678:	00bfffc4 	movi	r2,-1
8112367c:	003fe206 	br	81123608 <__reset+0xfb103608>
81123680:	800b883a 	mov	r5,r16
81123684:	9009883a 	mov	r4,r18
81123688:	1118b000 	call	81118b00 <__swsetup_r>
8112368c:	103ffa1e 	bne	r2,zero,81123678 <__reset+0xfb103678>
81123690:	8100030b 	ldhu	r4,12(r16)
81123694:	80c00417 	ldw	r3,16(r16)
81123698:	003fc506 	br	811235b0 <__reset+0xfb1035b0>
8112369c:	111ab700 	call	8111ab70 <__sinit>
811236a0:	003fbc06 	br	81123594 <__reset+0xfb103594>

811236a4 <__swbuf>:
811236a4:	00a04534 	movhi	r2,33044
811236a8:	10bf9d04 	addi	r2,r2,-396
811236ac:	280d883a 	mov	r6,r5
811236b0:	200b883a 	mov	r5,r4
811236b4:	11000017 	ldw	r4,0(r2)
811236b8:	112355c1 	jmpi	8112355c <__swbuf_r>

811236bc <_wcrtomb_r>:
811236bc:	defff604 	addi	sp,sp,-40
811236c0:	00a04534 	movhi	r2,33044
811236c4:	de00012e 	bgeu	sp,et,811236cc <_wcrtomb_r+0x10>
811236c8:	003b68fa 	trap	3
811236cc:	10bfa204 	addi	r2,r2,-376
811236d0:	dc800815 	stw	r18,32(sp)
811236d4:	dc400715 	stw	r17,28(sp)
811236d8:	dc000615 	stw	r16,24(sp)
811236dc:	dfc00915 	stw	ra,36(sp)
811236e0:	2021883a 	mov	r16,r4
811236e4:	3823883a 	mov	r17,r7
811236e8:	14800017 	ldw	r18,0(r2)
811236ec:	28001426 	beq	r5,zero,81123740 <_wcrtomb_r+0x84>
811236f0:	d9400415 	stw	r5,16(sp)
811236f4:	d9800515 	stw	r6,20(sp)
811236f8:	111ba8c0 	call	8111ba8c <__locale_charset>
811236fc:	d9800517 	ldw	r6,20(sp)
81123700:	d9400417 	ldw	r5,16(sp)
81123704:	100f883a 	mov	r7,r2
81123708:	dc400015 	stw	r17,0(sp)
8112370c:	8009883a 	mov	r4,r16
81123710:	903ee83a 	callr	r18
81123714:	00ffffc4 	movi	r3,-1
81123718:	10c0031e 	bne	r2,r3,81123728 <_wcrtomb_r+0x6c>
8112371c:	88000015 	stw	zero,0(r17)
81123720:	00c02284 	movi	r3,138
81123724:	80c00015 	stw	r3,0(r16)
81123728:	dfc00917 	ldw	ra,36(sp)
8112372c:	dc800817 	ldw	r18,32(sp)
81123730:	dc400717 	ldw	r17,28(sp)
81123734:	dc000617 	ldw	r16,24(sp)
81123738:	dec00a04 	addi	sp,sp,40
8112373c:	f800283a 	ret
81123740:	111ba8c0 	call	8111ba8c <__locale_charset>
81123744:	100f883a 	mov	r7,r2
81123748:	dc400015 	stw	r17,0(sp)
8112374c:	000d883a 	mov	r6,zero
81123750:	d9400104 	addi	r5,sp,4
81123754:	8009883a 	mov	r4,r16
81123758:	903ee83a 	callr	r18
8112375c:	003fed06 	br	81123714 <__reset+0xfb103714>

81123760 <wcrtomb>:
81123760:	defff604 	addi	sp,sp,-40
81123764:	00a04534 	movhi	r2,33044
81123768:	de00012e 	bgeu	sp,et,81123770 <wcrtomb+0x10>
8112376c:	003b68fa 	trap	3
81123770:	10bf9d04 	addi	r2,r2,-396
81123774:	dc800615 	stw	r18,24(sp)
81123778:	dc400515 	stw	r17,20(sp)
8112377c:	dfc00915 	stw	ra,36(sp)
81123780:	dd000815 	stw	r20,32(sp)
81123784:	dcc00715 	stw	r19,28(sp)
81123788:	dc000415 	stw	r16,16(sp)
8112378c:	3025883a 	mov	r18,r6
81123790:	14400017 	ldw	r17,0(r2)
81123794:	20001926 	beq	r4,zero,811237fc <wcrtomb+0x9c>
81123798:	00a04534 	movhi	r2,33044
8112379c:	10bfa204 	addi	r2,r2,-376
811237a0:	15000017 	ldw	r20,0(r2)
811237a4:	2021883a 	mov	r16,r4
811237a8:	2827883a 	mov	r19,r5
811237ac:	111ba8c0 	call	8111ba8c <__locale_charset>
811237b0:	100f883a 	mov	r7,r2
811237b4:	dc800015 	stw	r18,0(sp)
811237b8:	980d883a 	mov	r6,r19
811237bc:	800b883a 	mov	r5,r16
811237c0:	8809883a 	mov	r4,r17
811237c4:	a03ee83a 	callr	r20
811237c8:	00ffffc4 	movi	r3,-1
811237cc:	10c0031e 	bne	r2,r3,811237dc <wcrtomb+0x7c>
811237d0:	90000015 	stw	zero,0(r18)
811237d4:	00c02284 	movi	r3,138
811237d8:	88c00015 	stw	r3,0(r17)
811237dc:	dfc00917 	ldw	ra,36(sp)
811237e0:	dd000817 	ldw	r20,32(sp)
811237e4:	dcc00717 	ldw	r19,28(sp)
811237e8:	dc800617 	ldw	r18,24(sp)
811237ec:	dc400517 	ldw	r17,20(sp)
811237f0:	dc000417 	ldw	r16,16(sp)
811237f4:	dec00a04 	addi	sp,sp,40
811237f8:	f800283a 	ret
811237fc:	00a04534 	movhi	r2,33044
81123800:	10bfa204 	addi	r2,r2,-376
81123804:	14000017 	ldw	r16,0(r2)
81123808:	111ba8c0 	call	8111ba8c <__locale_charset>
8112380c:	100f883a 	mov	r7,r2
81123810:	dc800015 	stw	r18,0(sp)
81123814:	000d883a 	mov	r6,zero
81123818:	d9400104 	addi	r5,sp,4
8112381c:	8809883a 	mov	r4,r17
81123820:	803ee83a 	callr	r16
81123824:	003fe806 	br	811237c8 <__reset+0xfb1037c8>

81123828 <__ascii_wctomb>:
81123828:	28000526 	beq	r5,zero,81123840 <__ascii_wctomb+0x18>
8112382c:	00803fc4 	movi	r2,255
81123830:	11800536 	bltu	r2,r6,81123848 <__ascii_wctomb+0x20>
81123834:	29800005 	stb	r6,0(r5)
81123838:	00800044 	movi	r2,1
8112383c:	f800283a 	ret
81123840:	0005883a 	mov	r2,zero
81123844:	f800283a 	ret
81123848:	00802284 	movi	r2,138
8112384c:	20800015 	stw	r2,0(r4)
81123850:	00bfffc4 	movi	r2,-1
81123854:	f800283a 	ret

81123858 <_wctomb_r>:
81123858:	00a04534 	movhi	r2,33044
8112385c:	defff904 	addi	sp,sp,-28
81123860:	10bfa204 	addi	r2,r2,-376
81123864:	de00012e 	bgeu	sp,et,8112386c <_wctomb_r+0x14>
81123868:	003b68fa 	trap	3
8112386c:	dfc00615 	stw	ra,24(sp)
81123870:	dc400515 	stw	r17,20(sp)
81123874:	dc000415 	stw	r16,16(sp)
81123878:	3823883a 	mov	r17,r7
8112387c:	14000017 	ldw	r16,0(r2)
81123880:	d9000115 	stw	r4,4(sp)
81123884:	d9400215 	stw	r5,8(sp)
81123888:	d9800315 	stw	r6,12(sp)
8112388c:	111ba8c0 	call	8111ba8c <__locale_charset>
81123890:	d9800317 	ldw	r6,12(sp)
81123894:	d9400217 	ldw	r5,8(sp)
81123898:	d9000117 	ldw	r4,4(sp)
8112389c:	100f883a 	mov	r7,r2
811238a0:	dc400015 	stw	r17,0(sp)
811238a4:	803ee83a 	callr	r16
811238a8:	dfc00617 	ldw	ra,24(sp)
811238ac:	dc400517 	ldw	r17,20(sp)
811238b0:	dc000417 	ldw	r16,16(sp)
811238b4:	dec00704 	addi	sp,sp,28
811238b8:	f800283a 	ret

811238bc <__fixunsdfsi>:
811238bc:	defffd04 	addi	sp,sp,-12
811238c0:	000d883a 	mov	r6,zero
811238c4:	01d07834 	movhi	r7,16864
811238c8:	de00012e 	bgeu	sp,et,811238d0 <__fixunsdfsi+0x14>
811238cc:	003b68fa 	trap	3
811238d0:	dc400115 	stw	r17,4(sp)
811238d4:	dc000015 	stw	r16,0(sp)
811238d8:	dfc00215 	stw	ra,8(sp)
811238dc:	2023883a 	mov	r17,r4
811238e0:	2821883a 	mov	r16,r5
811238e4:	11259d40 	call	811259d4 <__gedf2>
811238e8:	1000080e 	bge	r2,zero,8112390c <__fixunsdfsi+0x50>
811238ec:	8809883a 	mov	r4,r17
811238f0:	800b883a 	mov	r5,r16
811238f4:	11264a80 	call	811264a8 <__fixdfsi>
811238f8:	dfc00217 	ldw	ra,8(sp)
811238fc:	dc400117 	ldw	r17,4(sp)
81123900:	dc000017 	ldw	r16,0(sp)
81123904:	dec00304 	addi	sp,sp,12
81123908:	f800283a 	ret
8112390c:	000d883a 	mov	r6,zero
81123910:	01d07834 	movhi	r7,16864
81123914:	8809883a 	mov	r4,r17
81123918:	800b883a 	mov	r5,r16
8112391c:	1125ba40 	call	81125ba4 <__subdf3>
81123920:	180b883a 	mov	r5,r3
81123924:	1009883a 	mov	r4,r2
81123928:	11264a80 	call	811264a8 <__fixdfsi>
8112392c:	00e00034 	movhi	r3,32768
81123930:	10c5883a 	add	r2,r2,r3
81123934:	003ff006 	br	811238f8 <__reset+0xfb1038f8>

81123938 <__udivdi3>:
81123938:	defff504 	addi	sp,sp,-44
8112393c:	de00012e 	bgeu	sp,et,81123944 <__udivdi3+0xc>
81123940:	003b68fa 	trap	3
81123944:	dcc00415 	stw	r19,16(sp)
81123948:	dc000115 	stw	r16,4(sp)
8112394c:	dfc00a15 	stw	ra,40(sp)
81123950:	df000915 	stw	fp,36(sp)
81123954:	ddc00815 	stw	r23,32(sp)
81123958:	dd800715 	stw	r22,28(sp)
8112395c:	dd400615 	stw	r21,24(sp)
81123960:	dd000515 	stw	r20,20(sp)
81123964:	dc800315 	stw	r18,12(sp)
81123968:	dc400215 	stw	r17,8(sp)
8112396c:	2027883a 	mov	r19,r4
81123970:	2821883a 	mov	r16,r5
81123974:	3800411e 	bne	r7,zero,81123a7c <__udivdi3+0x144>
81123978:	3023883a 	mov	r17,r6
8112397c:	2025883a 	mov	r18,r4
81123980:	2980522e 	bgeu	r5,r6,81123acc <__udivdi3+0x194>
81123984:	00bfffd4 	movui	r2,65535
81123988:	282d883a 	mov	r22,r5
8112398c:	1180a836 	bltu	r2,r6,81123c30 <__udivdi3+0x2f8>
81123990:	00803fc4 	movi	r2,255
81123994:	1185803a 	cmpltu	r2,r2,r6
81123998:	100490fa 	slli	r2,r2,3
8112399c:	3086d83a 	srl	r3,r6,r2
811239a0:	01204534 	movhi	r4,33044
811239a4:	2135b004 	addi	r4,r4,-10560
811239a8:	20c7883a 	add	r3,r4,r3
811239ac:	18c00003 	ldbu	r3,0(r3)
811239b0:	1885883a 	add	r2,r3,r2
811239b4:	00c00804 	movi	r3,32
811239b8:	1887c83a 	sub	r3,r3,r2
811239bc:	18000526 	beq	r3,zero,811239d4 <__udivdi3+0x9c>
811239c0:	80e0983a 	sll	r16,r16,r3
811239c4:	9884d83a 	srl	r2,r19,r2
811239c8:	30e2983a 	sll	r17,r6,r3
811239cc:	98e4983a 	sll	r18,r19,r3
811239d0:	142cb03a 	or	r22,r2,r16
811239d4:	882ad43a 	srli	r21,r17,16
811239d8:	b009883a 	mov	r4,r22
811239dc:	8d3fffcc 	andi	r20,r17,65535
811239e0:	a80b883a 	mov	r5,r21
811239e4:	11245540 	call	81124554 <__umodsi3>
811239e8:	b009883a 	mov	r4,r22
811239ec:	a80b883a 	mov	r5,r21
811239f0:	1027883a 	mov	r19,r2
811239f4:	11244f00 	call	811244f0 <__udivsi3>
811239f8:	102d883a 	mov	r22,r2
811239fc:	9826943a 	slli	r19,r19,16
81123a00:	9004d43a 	srli	r2,r18,16
81123a04:	a5a1383a 	mul	r16,r20,r22
81123a08:	14c4b03a 	or	r2,r2,r19
81123a0c:	1400052e 	bgeu	r2,r16,81123a24 <__udivdi3+0xec>
81123a10:	1445883a 	add	r2,r2,r17
81123a14:	b0ffffc4 	addi	r3,r22,-1
81123a18:	14400136 	bltu	r2,r17,81123a20 <__udivdi3+0xe8>
81123a1c:	14012336 	bltu	r2,r16,81123eac <__udivdi3+0x574>
81123a20:	182d883a 	mov	r22,r3
81123a24:	1421c83a 	sub	r16,r2,r16
81123a28:	a80b883a 	mov	r5,r21
81123a2c:	8009883a 	mov	r4,r16
81123a30:	11245540 	call	81124554 <__umodsi3>
81123a34:	1027883a 	mov	r19,r2
81123a38:	a80b883a 	mov	r5,r21
81123a3c:	8009883a 	mov	r4,r16
81123a40:	11244f00 	call	811244f0 <__udivsi3>
81123a44:	9826943a 	slli	r19,r19,16
81123a48:	a0a9383a 	mul	r20,r20,r2
81123a4c:	94bfffcc 	andi	r18,r18,65535
81123a50:	94e4b03a 	or	r18,r18,r19
81123a54:	9500052e 	bgeu	r18,r20,81123a6c <__udivdi3+0x134>
81123a58:	8ca5883a 	add	r18,r17,r18
81123a5c:	10ffffc4 	addi	r3,r2,-1
81123a60:	9440f136 	bltu	r18,r17,81123e28 <__udivdi3+0x4f0>
81123a64:	9500f02e 	bgeu	r18,r20,81123e28 <__udivdi3+0x4f0>
81123a68:	10bfff84 	addi	r2,r2,-2
81123a6c:	b00c943a 	slli	r6,r22,16
81123a70:	0007883a 	mov	r3,zero
81123a74:	3084b03a 	or	r2,r6,r2
81123a78:	00005906 	br	81123be0 <__udivdi3+0x2a8>
81123a7c:	29c05636 	bltu	r5,r7,81123bd8 <__udivdi3+0x2a0>
81123a80:	00bfffd4 	movui	r2,65535
81123a84:	11c0622e 	bgeu	r2,r7,81123c10 <__udivdi3+0x2d8>
81123a88:	00804034 	movhi	r2,256
81123a8c:	10bfffc4 	addi	r2,r2,-1
81123a90:	11c0ee36 	bltu	r2,r7,81123e4c <__udivdi3+0x514>
81123a94:	00800404 	movi	r2,16
81123a98:	3886d83a 	srl	r3,r7,r2
81123a9c:	01204534 	movhi	r4,33044
81123aa0:	2135b004 	addi	r4,r4,-10560
81123aa4:	20c7883a 	add	r3,r4,r3
81123aa8:	18c00003 	ldbu	r3,0(r3)
81123aac:	05400804 	movi	r21,32
81123ab0:	1885883a 	add	r2,r3,r2
81123ab4:	a8abc83a 	sub	r21,r21,r2
81123ab8:	a800621e 	bne	r21,zero,81123c44 <__udivdi3+0x30c>
81123abc:	3c00e936 	bltu	r7,r16,81123e64 <__udivdi3+0x52c>
81123ac0:	9985403a 	cmpgeu	r2,r19,r6
81123ac4:	0007883a 	mov	r3,zero
81123ac8:	00004506 	br	81123be0 <__udivdi3+0x2a8>
81123acc:	3000041e 	bne	r6,zero,81123ae0 <__udivdi3+0x1a8>
81123ad0:	000b883a 	mov	r5,zero
81123ad4:	01000044 	movi	r4,1
81123ad8:	11244f00 	call	811244f0 <__udivsi3>
81123adc:	1023883a 	mov	r17,r2
81123ae0:	00bfffd4 	movui	r2,65535
81123ae4:	14404e2e 	bgeu	r2,r17,81123c20 <__udivdi3+0x2e8>
81123ae8:	00804034 	movhi	r2,256
81123aec:	10bfffc4 	addi	r2,r2,-1
81123af0:	1440d836 	bltu	r2,r17,81123e54 <__udivdi3+0x51c>
81123af4:	00800404 	movi	r2,16
81123af8:	8886d83a 	srl	r3,r17,r2
81123afc:	01204534 	movhi	r4,33044
81123b00:	2135b004 	addi	r4,r4,-10560
81123b04:	20c7883a 	add	r3,r4,r3
81123b08:	18c00003 	ldbu	r3,0(r3)
81123b0c:	1885883a 	add	r2,r3,r2
81123b10:	00c00804 	movi	r3,32
81123b14:	1887c83a 	sub	r3,r3,r2
81123b18:	18008f1e 	bne	r3,zero,81123d58 <__udivdi3+0x420>
81123b1c:	882ad43a 	srli	r21,r17,16
81123b20:	8461c83a 	sub	r16,r16,r17
81123b24:	8d3fffcc 	andi	r20,r17,65535
81123b28:	00c00044 	movi	r3,1
81123b2c:	8009883a 	mov	r4,r16
81123b30:	a80b883a 	mov	r5,r21
81123b34:	d8c00015 	stw	r3,0(sp)
81123b38:	11245540 	call	81124554 <__umodsi3>
81123b3c:	8009883a 	mov	r4,r16
81123b40:	a80b883a 	mov	r5,r21
81123b44:	1027883a 	mov	r19,r2
81123b48:	11244f00 	call	811244f0 <__udivsi3>
81123b4c:	9826943a 	slli	r19,r19,16
81123b50:	9008d43a 	srli	r4,r18,16
81123b54:	1521383a 	mul	r16,r2,r20
81123b58:	102d883a 	mov	r22,r2
81123b5c:	24c8b03a 	or	r4,r4,r19
81123b60:	d8c00017 	ldw	r3,0(sp)
81123b64:	2400052e 	bgeu	r4,r16,81123b7c <__udivdi3+0x244>
81123b68:	2449883a 	add	r4,r4,r17
81123b6c:	b0bfffc4 	addi	r2,r22,-1
81123b70:	24400136 	bltu	r4,r17,81123b78 <__udivdi3+0x240>
81123b74:	2400ca36 	bltu	r4,r16,81123ea0 <__udivdi3+0x568>
81123b78:	102d883a 	mov	r22,r2
81123b7c:	2421c83a 	sub	r16,r4,r16
81123b80:	a80b883a 	mov	r5,r21
81123b84:	8009883a 	mov	r4,r16
81123b88:	d8c00015 	stw	r3,0(sp)
81123b8c:	11245540 	call	81124554 <__umodsi3>
81123b90:	1027883a 	mov	r19,r2
81123b94:	a80b883a 	mov	r5,r21
81123b98:	8009883a 	mov	r4,r16
81123b9c:	11244f00 	call	811244f0 <__udivsi3>
81123ba0:	9826943a 	slli	r19,r19,16
81123ba4:	1529383a 	mul	r20,r2,r20
81123ba8:	94bfffcc 	andi	r18,r18,65535
81123bac:	94e4b03a 	or	r18,r18,r19
81123bb0:	d8c00017 	ldw	r3,0(sp)
81123bb4:	9500052e 	bgeu	r18,r20,81123bcc <__udivdi3+0x294>
81123bb8:	8ca5883a 	add	r18,r17,r18
81123bbc:	113fffc4 	addi	r4,r2,-1
81123bc0:	94409736 	bltu	r18,r17,81123e20 <__udivdi3+0x4e8>
81123bc4:	9500962e 	bgeu	r18,r20,81123e20 <__udivdi3+0x4e8>
81123bc8:	10bfff84 	addi	r2,r2,-2
81123bcc:	b00c943a 	slli	r6,r22,16
81123bd0:	3084b03a 	or	r2,r6,r2
81123bd4:	00000206 	br	81123be0 <__udivdi3+0x2a8>
81123bd8:	0007883a 	mov	r3,zero
81123bdc:	0005883a 	mov	r2,zero
81123be0:	dfc00a17 	ldw	ra,40(sp)
81123be4:	df000917 	ldw	fp,36(sp)
81123be8:	ddc00817 	ldw	r23,32(sp)
81123bec:	dd800717 	ldw	r22,28(sp)
81123bf0:	dd400617 	ldw	r21,24(sp)
81123bf4:	dd000517 	ldw	r20,20(sp)
81123bf8:	dcc00417 	ldw	r19,16(sp)
81123bfc:	dc800317 	ldw	r18,12(sp)
81123c00:	dc400217 	ldw	r17,8(sp)
81123c04:	dc000117 	ldw	r16,4(sp)
81123c08:	dec00b04 	addi	sp,sp,44
81123c0c:	f800283a 	ret
81123c10:	00803fc4 	movi	r2,255
81123c14:	11c5803a 	cmpltu	r2,r2,r7
81123c18:	100490fa 	slli	r2,r2,3
81123c1c:	003f9e06 	br	81123a98 <__reset+0xfb103a98>
81123c20:	00803fc4 	movi	r2,255
81123c24:	1445803a 	cmpltu	r2,r2,r17
81123c28:	100490fa 	slli	r2,r2,3
81123c2c:	003fb206 	br	81123af8 <__reset+0xfb103af8>
81123c30:	00804034 	movhi	r2,256
81123c34:	10bfffc4 	addi	r2,r2,-1
81123c38:	11808836 	bltu	r2,r6,81123e5c <__udivdi3+0x524>
81123c3c:	00800404 	movi	r2,16
81123c40:	003f5606 	br	8112399c <__reset+0xfb10399c>
81123c44:	30aed83a 	srl	r23,r6,r2
81123c48:	3d4e983a 	sll	r7,r7,r21
81123c4c:	80acd83a 	srl	r22,r16,r2
81123c50:	9884d83a 	srl	r2,r19,r2
81123c54:	3deeb03a 	or	r23,r7,r23
81123c58:	b824d43a 	srli	r18,r23,16
81123c5c:	8560983a 	sll	r16,r16,r21
81123c60:	b009883a 	mov	r4,r22
81123c64:	900b883a 	mov	r5,r18
81123c68:	3568983a 	sll	r20,r6,r21
81123c6c:	1420b03a 	or	r16,r2,r16
81123c70:	11245540 	call	81124554 <__umodsi3>
81123c74:	b009883a 	mov	r4,r22
81123c78:	900b883a 	mov	r5,r18
81123c7c:	1023883a 	mov	r17,r2
81123c80:	11244f00 	call	811244f0 <__udivsi3>
81123c84:	8808943a 	slli	r4,r17,16
81123c88:	bf3fffcc 	andi	fp,r23,65535
81123c8c:	8006d43a 	srli	r3,r16,16
81123c90:	e0a3383a 	mul	r17,fp,r2
81123c94:	100d883a 	mov	r6,r2
81123c98:	1906b03a 	or	r3,r3,r4
81123c9c:	1c40042e 	bgeu	r3,r17,81123cb0 <__udivdi3+0x378>
81123ca0:	1dc7883a 	add	r3,r3,r23
81123ca4:	10bfffc4 	addi	r2,r2,-1
81123ca8:	1dc0752e 	bgeu	r3,r23,81123e80 <__udivdi3+0x548>
81123cac:	100d883a 	mov	r6,r2
81123cb0:	1c63c83a 	sub	r17,r3,r17
81123cb4:	900b883a 	mov	r5,r18
81123cb8:	8809883a 	mov	r4,r17
81123cbc:	d9800015 	stw	r6,0(sp)
81123cc0:	11245540 	call	81124554 <__umodsi3>
81123cc4:	102d883a 	mov	r22,r2
81123cc8:	8809883a 	mov	r4,r17
81123ccc:	900b883a 	mov	r5,r18
81123cd0:	11244f00 	call	811244f0 <__udivsi3>
81123cd4:	b02c943a 	slli	r22,r22,16
81123cd8:	e089383a 	mul	r4,fp,r2
81123cdc:	843fffcc 	andi	r16,r16,65535
81123ce0:	85a0b03a 	or	r16,r16,r22
81123ce4:	d9800017 	ldw	r6,0(sp)
81123ce8:	8100042e 	bgeu	r16,r4,81123cfc <__udivdi3+0x3c4>
81123cec:	85e1883a 	add	r16,r16,r23
81123cf0:	10ffffc4 	addi	r3,r2,-1
81123cf4:	85c05e2e 	bgeu	r16,r23,81123e70 <__udivdi3+0x538>
81123cf8:	1805883a 	mov	r2,r3
81123cfc:	300c943a 	slli	r6,r6,16
81123d00:	a17fffcc 	andi	r5,r20,65535
81123d04:	a028d43a 	srli	r20,r20,16
81123d08:	3084b03a 	or	r2,r6,r2
81123d0c:	10ffffcc 	andi	r3,r2,65535
81123d10:	100cd43a 	srli	r6,r2,16
81123d14:	194f383a 	mul	r7,r3,r5
81123d18:	1d07383a 	mul	r3,r3,r20
81123d1c:	314b383a 	mul	r5,r6,r5
81123d20:	3810d43a 	srli	r8,r7,16
81123d24:	8121c83a 	sub	r16,r16,r4
81123d28:	1947883a 	add	r3,r3,r5
81123d2c:	40c7883a 	add	r3,r8,r3
81123d30:	350d383a 	mul	r6,r6,r20
81123d34:	1940022e 	bgeu	r3,r5,81123d40 <__udivdi3+0x408>
81123d38:	01000074 	movhi	r4,1
81123d3c:	310d883a 	add	r6,r6,r4
81123d40:	1828d43a 	srli	r20,r3,16
81123d44:	a18d883a 	add	r6,r20,r6
81123d48:	81803e36 	bltu	r16,r6,81123e44 <__udivdi3+0x50c>
81123d4c:	81803826 	beq	r16,r6,81123e30 <__udivdi3+0x4f8>
81123d50:	0007883a 	mov	r3,zero
81123d54:	003fa206 	br	81123be0 <__reset+0xfb103be0>
81123d58:	88e2983a 	sll	r17,r17,r3
81123d5c:	80a8d83a 	srl	r20,r16,r2
81123d60:	80e0983a 	sll	r16,r16,r3
81123d64:	882ad43a 	srli	r21,r17,16
81123d68:	9884d83a 	srl	r2,r19,r2
81123d6c:	a009883a 	mov	r4,r20
81123d70:	a80b883a 	mov	r5,r21
81123d74:	142eb03a 	or	r23,r2,r16
81123d78:	98e4983a 	sll	r18,r19,r3
81123d7c:	11245540 	call	81124554 <__umodsi3>
81123d80:	a009883a 	mov	r4,r20
81123d84:	a80b883a 	mov	r5,r21
81123d88:	1021883a 	mov	r16,r2
81123d8c:	11244f00 	call	811244f0 <__udivsi3>
81123d90:	1039883a 	mov	fp,r2
81123d94:	8d3fffcc 	andi	r20,r17,65535
81123d98:	8020943a 	slli	r16,r16,16
81123d9c:	b804d43a 	srli	r2,r23,16
81123da0:	a72d383a 	mul	r22,r20,fp
81123da4:	1404b03a 	or	r2,r2,r16
81123da8:	1580062e 	bgeu	r2,r22,81123dc4 <__udivdi3+0x48c>
81123dac:	1445883a 	add	r2,r2,r17
81123db0:	e0ffffc4 	addi	r3,fp,-1
81123db4:	14403836 	bltu	r2,r17,81123e98 <__udivdi3+0x560>
81123db8:	1580372e 	bgeu	r2,r22,81123e98 <__udivdi3+0x560>
81123dbc:	e73fff84 	addi	fp,fp,-2
81123dc0:	1445883a 	add	r2,r2,r17
81123dc4:	15adc83a 	sub	r22,r2,r22
81123dc8:	a80b883a 	mov	r5,r21
81123dcc:	b009883a 	mov	r4,r22
81123dd0:	11245540 	call	81124554 <__umodsi3>
81123dd4:	1027883a 	mov	r19,r2
81123dd8:	b009883a 	mov	r4,r22
81123ddc:	a80b883a 	mov	r5,r21
81123de0:	11244f00 	call	811244f0 <__udivsi3>
81123de4:	9826943a 	slli	r19,r19,16
81123de8:	a0a1383a 	mul	r16,r20,r2
81123dec:	b93fffcc 	andi	r4,r23,65535
81123df0:	24c8b03a 	or	r4,r4,r19
81123df4:	2400062e 	bgeu	r4,r16,81123e10 <__udivdi3+0x4d8>
81123df8:	2449883a 	add	r4,r4,r17
81123dfc:	10ffffc4 	addi	r3,r2,-1
81123e00:	24402336 	bltu	r4,r17,81123e90 <__udivdi3+0x558>
81123e04:	2400222e 	bgeu	r4,r16,81123e90 <__udivdi3+0x558>
81123e08:	10bfff84 	addi	r2,r2,-2
81123e0c:	2449883a 	add	r4,r4,r17
81123e10:	e038943a 	slli	fp,fp,16
81123e14:	2421c83a 	sub	r16,r4,r16
81123e18:	e086b03a 	or	r3,fp,r2
81123e1c:	003f4306 	br	81123b2c <__reset+0xfb103b2c>
81123e20:	2005883a 	mov	r2,r4
81123e24:	003f6906 	br	81123bcc <__reset+0xfb103bcc>
81123e28:	1805883a 	mov	r2,r3
81123e2c:	003f0f06 	br	81123a6c <__reset+0xfb103a6c>
81123e30:	1806943a 	slli	r3,r3,16
81123e34:	9d66983a 	sll	r19,r19,r21
81123e38:	39ffffcc 	andi	r7,r7,65535
81123e3c:	19c7883a 	add	r3,r3,r7
81123e40:	98ffc32e 	bgeu	r19,r3,81123d50 <__reset+0xfb103d50>
81123e44:	10bfffc4 	addi	r2,r2,-1
81123e48:	003fc106 	br	81123d50 <__reset+0xfb103d50>
81123e4c:	00800604 	movi	r2,24
81123e50:	003f1106 	br	81123a98 <__reset+0xfb103a98>
81123e54:	00800604 	movi	r2,24
81123e58:	003f2706 	br	81123af8 <__reset+0xfb103af8>
81123e5c:	00800604 	movi	r2,24
81123e60:	003ece06 	br	8112399c <__reset+0xfb10399c>
81123e64:	0007883a 	mov	r3,zero
81123e68:	00800044 	movi	r2,1
81123e6c:	003f5c06 	br	81123be0 <__reset+0xfb103be0>
81123e70:	813fa12e 	bgeu	r16,r4,81123cf8 <__reset+0xfb103cf8>
81123e74:	10bfff84 	addi	r2,r2,-2
81123e78:	85e1883a 	add	r16,r16,r23
81123e7c:	003f9f06 	br	81123cfc <__reset+0xfb103cfc>
81123e80:	1c7f8a2e 	bgeu	r3,r17,81123cac <__reset+0xfb103cac>
81123e84:	31bfff84 	addi	r6,r6,-2
81123e88:	1dc7883a 	add	r3,r3,r23
81123e8c:	003f8806 	br	81123cb0 <__reset+0xfb103cb0>
81123e90:	1805883a 	mov	r2,r3
81123e94:	003fde06 	br	81123e10 <__reset+0xfb103e10>
81123e98:	1839883a 	mov	fp,r3
81123e9c:	003fc906 	br	81123dc4 <__reset+0xfb103dc4>
81123ea0:	b5bfff84 	addi	r22,r22,-2
81123ea4:	2449883a 	add	r4,r4,r17
81123ea8:	003f3406 	br	81123b7c <__reset+0xfb103b7c>
81123eac:	b5bfff84 	addi	r22,r22,-2
81123eb0:	1445883a 	add	r2,r2,r17
81123eb4:	003edb06 	br	81123a24 <__reset+0xfb103a24>

81123eb8 <__umoddi3>:
81123eb8:	defff404 	addi	sp,sp,-48
81123ebc:	de00012e 	bgeu	sp,et,81123ec4 <__umoddi3+0xc>
81123ec0:	003b68fa 	trap	3
81123ec4:	df000a15 	stw	fp,40(sp)
81123ec8:	dc400315 	stw	r17,12(sp)
81123ecc:	dc000215 	stw	r16,8(sp)
81123ed0:	dfc00b15 	stw	ra,44(sp)
81123ed4:	ddc00915 	stw	r23,36(sp)
81123ed8:	dd800815 	stw	r22,32(sp)
81123edc:	dd400715 	stw	r21,28(sp)
81123ee0:	dd000615 	stw	r20,24(sp)
81123ee4:	dcc00515 	stw	r19,20(sp)
81123ee8:	dc800415 	stw	r18,16(sp)
81123eec:	2021883a 	mov	r16,r4
81123ef0:	2823883a 	mov	r17,r5
81123ef4:	2839883a 	mov	fp,r5
81123ef8:	38003c1e 	bne	r7,zero,81123fec <__umoddi3+0x134>
81123efc:	3027883a 	mov	r19,r6
81123f00:	2029883a 	mov	r20,r4
81123f04:	2980512e 	bgeu	r5,r6,8112404c <__umoddi3+0x194>
81123f08:	00bfffd4 	movui	r2,65535
81123f0c:	11809a36 	bltu	r2,r6,81124178 <__umoddi3+0x2c0>
81123f10:	01003fc4 	movi	r4,255
81123f14:	2189803a 	cmpltu	r4,r4,r6
81123f18:	200890fa 	slli	r4,r4,3
81123f1c:	3104d83a 	srl	r2,r6,r4
81123f20:	00e04534 	movhi	r3,33044
81123f24:	18f5b004 	addi	r3,r3,-10560
81123f28:	1885883a 	add	r2,r3,r2
81123f2c:	10c00003 	ldbu	r3,0(r2)
81123f30:	00800804 	movi	r2,32
81123f34:	1909883a 	add	r4,r3,r4
81123f38:	1125c83a 	sub	r18,r2,r4
81123f3c:	90000526 	beq	r18,zero,81123f54 <__umoddi3+0x9c>
81123f40:	8ca2983a 	sll	r17,r17,r18
81123f44:	8108d83a 	srl	r4,r16,r4
81123f48:	34a6983a 	sll	r19,r6,r18
81123f4c:	84a8983a 	sll	r20,r16,r18
81123f50:	2478b03a 	or	fp,r4,r17
81123f54:	982ed43a 	srli	r23,r19,16
81123f58:	e009883a 	mov	r4,fp
81123f5c:	9dbfffcc 	andi	r22,r19,65535
81123f60:	b80b883a 	mov	r5,r23
81123f64:	11245540 	call	81124554 <__umodsi3>
81123f68:	e009883a 	mov	r4,fp
81123f6c:	b80b883a 	mov	r5,r23
81123f70:	102b883a 	mov	r21,r2
81123f74:	11244f00 	call	811244f0 <__udivsi3>
81123f78:	a806943a 	slli	r3,r21,16
81123f7c:	a008d43a 	srli	r4,r20,16
81123f80:	b085383a 	mul	r2,r22,r2
81123f84:	20c8b03a 	or	r4,r4,r3
81123f88:	2080032e 	bgeu	r4,r2,81123f98 <__umoddi3+0xe0>
81123f8c:	24c9883a 	add	r4,r4,r19
81123f90:	24c00136 	bltu	r4,r19,81123f98 <__umoddi3+0xe0>
81123f94:	20811036 	bltu	r4,r2,811243d8 <__umoddi3+0x520>
81123f98:	20abc83a 	sub	r21,r4,r2
81123f9c:	b80b883a 	mov	r5,r23
81123fa0:	a809883a 	mov	r4,r21
81123fa4:	11245540 	call	81124554 <__umodsi3>
81123fa8:	1023883a 	mov	r17,r2
81123fac:	b80b883a 	mov	r5,r23
81123fb0:	a809883a 	mov	r4,r21
81123fb4:	11244f00 	call	811244f0 <__udivsi3>
81123fb8:	8822943a 	slli	r17,r17,16
81123fbc:	b085383a 	mul	r2,r22,r2
81123fc0:	a0ffffcc 	andi	r3,r20,65535
81123fc4:	1c46b03a 	or	r3,r3,r17
81123fc8:	1880042e 	bgeu	r3,r2,81123fdc <__umoddi3+0x124>
81123fcc:	1cc7883a 	add	r3,r3,r19
81123fd0:	1cc00236 	bltu	r3,r19,81123fdc <__umoddi3+0x124>
81123fd4:	1880012e 	bgeu	r3,r2,81123fdc <__umoddi3+0x124>
81123fd8:	1cc7883a 	add	r3,r3,r19
81123fdc:	1885c83a 	sub	r2,r3,r2
81123fe0:	1484d83a 	srl	r2,r2,r18
81123fe4:	0007883a 	mov	r3,zero
81123fe8:	00004f06 	br	81124128 <__umoddi3+0x270>
81123fec:	29c04c36 	bltu	r5,r7,81124120 <__umoddi3+0x268>
81123ff0:	00bfffd4 	movui	r2,65535
81123ff4:	11c0582e 	bgeu	r2,r7,81124158 <__umoddi3+0x2a0>
81123ff8:	00804034 	movhi	r2,256
81123ffc:	10bfffc4 	addi	r2,r2,-1
81124000:	11c0e736 	bltu	r2,r7,811243a0 <__umoddi3+0x4e8>
81124004:	01000404 	movi	r4,16
81124008:	3904d83a 	srl	r2,r7,r4
8112400c:	00e04534 	movhi	r3,33044
81124010:	18f5b004 	addi	r3,r3,-10560
81124014:	1885883a 	add	r2,r3,r2
81124018:	14c00003 	ldbu	r19,0(r2)
8112401c:	00c00804 	movi	r3,32
81124020:	9927883a 	add	r19,r19,r4
81124024:	1ce9c83a 	sub	r20,r3,r19
81124028:	a000581e 	bne	r20,zero,8112418c <__umoddi3+0x2d4>
8112402c:	3c400136 	bltu	r7,r17,81124034 <__umoddi3+0x17c>
81124030:	8180eb36 	bltu	r16,r6,811243e0 <__umoddi3+0x528>
81124034:	8185c83a 	sub	r2,r16,r6
81124038:	89e3c83a 	sub	r17,r17,r7
8112403c:	8089803a 	cmpltu	r4,r16,r2
81124040:	8939c83a 	sub	fp,r17,r4
81124044:	e007883a 	mov	r3,fp
81124048:	00003706 	br	81124128 <__umoddi3+0x270>
8112404c:	3000041e 	bne	r6,zero,81124060 <__umoddi3+0x1a8>
81124050:	000b883a 	mov	r5,zero
81124054:	01000044 	movi	r4,1
81124058:	11244f00 	call	811244f0 <__udivsi3>
8112405c:	1027883a 	mov	r19,r2
81124060:	00bfffd4 	movui	r2,65535
81124064:	14c0402e 	bgeu	r2,r19,81124168 <__umoddi3+0x2b0>
81124068:	00804034 	movhi	r2,256
8112406c:	10bfffc4 	addi	r2,r2,-1
81124070:	14c0cd36 	bltu	r2,r19,811243a8 <__umoddi3+0x4f0>
81124074:	00800404 	movi	r2,16
81124078:	9886d83a 	srl	r3,r19,r2
8112407c:	01204534 	movhi	r4,33044
81124080:	2135b004 	addi	r4,r4,-10560
81124084:	20c7883a 	add	r3,r4,r3
81124088:	18c00003 	ldbu	r3,0(r3)
8112408c:	1887883a 	add	r3,r3,r2
81124090:	00800804 	movi	r2,32
81124094:	10e5c83a 	sub	r18,r2,r3
81124098:	9000901e 	bne	r18,zero,811242dc <__umoddi3+0x424>
8112409c:	982cd43a 	srli	r22,r19,16
811240a0:	8ce3c83a 	sub	r17,r17,r19
811240a4:	9d7fffcc 	andi	r21,r19,65535
811240a8:	b00b883a 	mov	r5,r22
811240ac:	8809883a 	mov	r4,r17
811240b0:	11245540 	call	81124554 <__umodsi3>
811240b4:	8809883a 	mov	r4,r17
811240b8:	b00b883a 	mov	r5,r22
811240bc:	1021883a 	mov	r16,r2
811240c0:	11244f00 	call	811244f0 <__udivsi3>
811240c4:	8006943a 	slli	r3,r16,16
811240c8:	a008d43a 	srli	r4,r20,16
811240cc:	1545383a 	mul	r2,r2,r21
811240d0:	20c8b03a 	or	r4,r4,r3
811240d4:	2080042e 	bgeu	r4,r2,811240e8 <__umoddi3+0x230>
811240d8:	24c9883a 	add	r4,r4,r19
811240dc:	24c00236 	bltu	r4,r19,811240e8 <__umoddi3+0x230>
811240e0:	2080012e 	bgeu	r4,r2,811240e8 <__umoddi3+0x230>
811240e4:	24c9883a 	add	r4,r4,r19
811240e8:	20a1c83a 	sub	r16,r4,r2
811240ec:	b00b883a 	mov	r5,r22
811240f0:	8009883a 	mov	r4,r16
811240f4:	11245540 	call	81124554 <__umodsi3>
811240f8:	1023883a 	mov	r17,r2
811240fc:	b00b883a 	mov	r5,r22
81124100:	8009883a 	mov	r4,r16
81124104:	11244f00 	call	811244f0 <__udivsi3>
81124108:	8822943a 	slli	r17,r17,16
8112410c:	1545383a 	mul	r2,r2,r21
81124110:	a53fffcc 	andi	r20,r20,65535
81124114:	a446b03a 	or	r3,r20,r17
81124118:	18bfb02e 	bgeu	r3,r2,81123fdc <__reset+0xfb103fdc>
8112411c:	003fab06 	br	81123fcc <__reset+0xfb103fcc>
81124120:	2005883a 	mov	r2,r4
81124124:	2807883a 	mov	r3,r5
81124128:	dfc00b17 	ldw	ra,44(sp)
8112412c:	df000a17 	ldw	fp,40(sp)
81124130:	ddc00917 	ldw	r23,36(sp)
81124134:	dd800817 	ldw	r22,32(sp)
81124138:	dd400717 	ldw	r21,28(sp)
8112413c:	dd000617 	ldw	r20,24(sp)
81124140:	dcc00517 	ldw	r19,20(sp)
81124144:	dc800417 	ldw	r18,16(sp)
81124148:	dc400317 	ldw	r17,12(sp)
8112414c:	dc000217 	ldw	r16,8(sp)
81124150:	dec00c04 	addi	sp,sp,48
81124154:	f800283a 	ret
81124158:	04c03fc4 	movi	r19,255
8112415c:	99c9803a 	cmpltu	r4,r19,r7
81124160:	200890fa 	slli	r4,r4,3
81124164:	003fa806 	br	81124008 <__reset+0xfb104008>
81124168:	00803fc4 	movi	r2,255
8112416c:	14c5803a 	cmpltu	r2,r2,r19
81124170:	100490fa 	slli	r2,r2,3
81124174:	003fc006 	br	81124078 <__reset+0xfb104078>
81124178:	00804034 	movhi	r2,256
8112417c:	10bfffc4 	addi	r2,r2,-1
81124180:	11808b36 	bltu	r2,r6,811243b0 <__umoddi3+0x4f8>
81124184:	01000404 	movi	r4,16
81124188:	003f6406 	br	81123f1c <__reset+0xfb103f1c>
8112418c:	34c4d83a 	srl	r2,r6,r19
81124190:	3d0e983a 	sll	r7,r7,r20
81124194:	8cf8d83a 	srl	fp,r17,r19
81124198:	8d10983a 	sll	r8,r17,r20
8112419c:	38aab03a 	or	r21,r7,r2
811241a0:	a82cd43a 	srli	r22,r21,16
811241a4:	84e2d83a 	srl	r17,r16,r19
811241a8:	e009883a 	mov	r4,fp
811241ac:	b00b883a 	mov	r5,r22
811241b0:	8a22b03a 	or	r17,r17,r8
811241b4:	3524983a 	sll	r18,r6,r20
811241b8:	11245540 	call	81124554 <__umodsi3>
811241bc:	e009883a 	mov	r4,fp
811241c0:	b00b883a 	mov	r5,r22
811241c4:	102f883a 	mov	r23,r2
811241c8:	11244f00 	call	811244f0 <__udivsi3>
811241cc:	100d883a 	mov	r6,r2
811241d0:	b808943a 	slli	r4,r23,16
811241d4:	aa3fffcc 	andi	r8,r21,65535
811241d8:	8804d43a 	srli	r2,r17,16
811241dc:	41af383a 	mul	r23,r8,r6
811241e0:	8520983a 	sll	r16,r16,r20
811241e4:	1104b03a 	or	r2,r2,r4
811241e8:	15c0042e 	bgeu	r2,r23,811241fc <__umoddi3+0x344>
811241ec:	1545883a 	add	r2,r2,r21
811241f0:	30ffffc4 	addi	r3,r6,-1
811241f4:	1540742e 	bgeu	r2,r21,811243c8 <__umoddi3+0x510>
811241f8:	180d883a 	mov	r6,r3
811241fc:	15efc83a 	sub	r23,r2,r23
81124200:	b00b883a 	mov	r5,r22
81124204:	b809883a 	mov	r4,r23
81124208:	d9800115 	stw	r6,4(sp)
8112420c:	da000015 	stw	r8,0(sp)
81124210:	11245540 	call	81124554 <__umodsi3>
81124214:	b00b883a 	mov	r5,r22
81124218:	b809883a 	mov	r4,r23
8112421c:	1039883a 	mov	fp,r2
81124220:	11244f00 	call	811244f0 <__udivsi3>
81124224:	da000017 	ldw	r8,0(sp)
81124228:	e038943a 	slli	fp,fp,16
8112422c:	100b883a 	mov	r5,r2
81124230:	4089383a 	mul	r4,r8,r2
81124234:	8a3fffcc 	andi	r8,r17,65535
81124238:	4710b03a 	or	r8,r8,fp
8112423c:	d9800117 	ldw	r6,4(sp)
81124240:	4100042e 	bgeu	r8,r4,81124254 <__umoddi3+0x39c>
81124244:	4551883a 	add	r8,r8,r21
81124248:	10bfffc4 	addi	r2,r2,-1
8112424c:	45405a2e 	bgeu	r8,r21,811243b8 <__umoddi3+0x500>
81124250:	100b883a 	mov	r5,r2
81124254:	300c943a 	slli	r6,r6,16
81124258:	91ffffcc 	andi	r7,r18,65535
8112425c:	9004d43a 	srli	r2,r18,16
81124260:	314cb03a 	or	r6,r6,r5
81124264:	317fffcc 	andi	r5,r6,65535
81124268:	300cd43a 	srli	r6,r6,16
8112426c:	29d3383a 	mul	r9,r5,r7
81124270:	288b383a 	mul	r5,r5,r2
81124274:	31cf383a 	mul	r7,r6,r7
81124278:	4806d43a 	srli	r3,r9,16
8112427c:	4111c83a 	sub	r8,r8,r4
81124280:	29cb883a 	add	r5,r5,r7
81124284:	194b883a 	add	r5,r3,r5
81124288:	3085383a 	mul	r2,r6,r2
8112428c:	29c0022e 	bgeu	r5,r7,81124298 <__umoddi3+0x3e0>
81124290:	00c00074 	movhi	r3,1
81124294:	10c5883a 	add	r2,r2,r3
81124298:	2808d43a 	srli	r4,r5,16
8112429c:	280a943a 	slli	r5,r5,16
811242a0:	4a7fffcc 	andi	r9,r9,65535
811242a4:	2085883a 	add	r2,r4,r2
811242a8:	2a4b883a 	add	r5,r5,r9
811242ac:	40803636 	bltu	r8,r2,81124388 <__umoddi3+0x4d0>
811242b0:	40804d26 	beq	r8,r2,811243e8 <__umoddi3+0x530>
811242b4:	4089c83a 	sub	r4,r8,r2
811242b8:	280f883a 	mov	r7,r5
811242bc:	81cfc83a 	sub	r7,r16,r7
811242c0:	81c7803a 	cmpltu	r3,r16,r7
811242c4:	20c7c83a 	sub	r3,r4,r3
811242c8:	1cc4983a 	sll	r2,r3,r19
811242cc:	3d0ed83a 	srl	r7,r7,r20
811242d0:	1d06d83a 	srl	r3,r3,r20
811242d4:	11c4b03a 	or	r2,r2,r7
811242d8:	003f9306 	br	81124128 <__reset+0xfb104128>
811242dc:	9ca6983a 	sll	r19,r19,r18
811242e0:	88e8d83a 	srl	r20,r17,r3
811242e4:	80c4d83a 	srl	r2,r16,r3
811242e8:	982cd43a 	srli	r22,r19,16
811242ec:	8ca2983a 	sll	r17,r17,r18
811242f0:	a009883a 	mov	r4,r20
811242f4:	b00b883a 	mov	r5,r22
811242f8:	1478b03a 	or	fp,r2,r17
811242fc:	11245540 	call	81124554 <__umodsi3>
81124300:	a009883a 	mov	r4,r20
81124304:	b00b883a 	mov	r5,r22
81124308:	1023883a 	mov	r17,r2
8112430c:	11244f00 	call	811244f0 <__udivsi3>
81124310:	9d7fffcc 	andi	r21,r19,65535
81124314:	880a943a 	slli	r5,r17,16
81124318:	e008d43a 	srli	r4,fp,16
8112431c:	a885383a 	mul	r2,r21,r2
81124320:	84a8983a 	sll	r20,r16,r18
81124324:	2148b03a 	or	r4,r4,r5
81124328:	2080042e 	bgeu	r4,r2,8112433c <__umoddi3+0x484>
8112432c:	24c9883a 	add	r4,r4,r19
81124330:	24c00236 	bltu	r4,r19,8112433c <__umoddi3+0x484>
81124334:	2080012e 	bgeu	r4,r2,8112433c <__umoddi3+0x484>
81124338:	24c9883a 	add	r4,r4,r19
8112433c:	20a3c83a 	sub	r17,r4,r2
81124340:	b00b883a 	mov	r5,r22
81124344:	8809883a 	mov	r4,r17
81124348:	11245540 	call	81124554 <__umodsi3>
8112434c:	102f883a 	mov	r23,r2
81124350:	8809883a 	mov	r4,r17
81124354:	b00b883a 	mov	r5,r22
81124358:	11244f00 	call	811244f0 <__udivsi3>
8112435c:	b82e943a 	slli	r23,r23,16
81124360:	a885383a 	mul	r2,r21,r2
81124364:	e13fffcc 	andi	r4,fp,65535
81124368:	25c8b03a 	or	r4,r4,r23
8112436c:	2080042e 	bgeu	r4,r2,81124380 <__umoddi3+0x4c8>
81124370:	24c9883a 	add	r4,r4,r19
81124374:	24c00236 	bltu	r4,r19,81124380 <__umoddi3+0x4c8>
81124378:	2080012e 	bgeu	r4,r2,81124380 <__umoddi3+0x4c8>
8112437c:	24c9883a 	add	r4,r4,r19
81124380:	20a3c83a 	sub	r17,r4,r2
81124384:	003f4806 	br	811240a8 <__reset+0xfb1040a8>
81124388:	2c8fc83a 	sub	r7,r5,r18
8112438c:	1545c83a 	sub	r2,r2,r21
81124390:	29cb803a 	cmpltu	r5,r5,r7
81124394:	1145c83a 	sub	r2,r2,r5
81124398:	4089c83a 	sub	r4,r8,r2
8112439c:	003fc706 	br	811242bc <__reset+0xfb1042bc>
811243a0:	01000604 	movi	r4,24
811243a4:	003f1806 	br	81124008 <__reset+0xfb104008>
811243a8:	00800604 	movi	r2,24
811243ac:	003f3206 	br	81124078 <__reset+0xfb104078>
811243b0:	01000604 	movi	r4,24
811243b4:	003ed906 	br	81123f1c <__reset+0xfb103f1c>
811243b8:	413fa52e 	bgeu	r8,r4,81124250 <__reset+0xfb104250>
811243bc:	297fff84 	addi	r5,r5,-2
811243c0:	4551883a 	add	r8,r8,r21
811243c4:	003fa306 	br	81124254 <__reset+0xfb104254>
811243c8:	15ff8b2e 	bgeu	r2,r23,811241f8 <__reset+0xfb1041f8>
811243cc:	31bfff84 	addi	r6,r6,-2
811243d0:	1545883a 	add	r2,r2,r21
811243d4:	003f8906 	br	811241fc <__reset+0xfb1041fc>
811243d8:	24c9883a 	add	r4,r4,r19
811243dc:	003eee06 	br	81123f98 <__reset+0xfb103f98>
811243e0:	8005883a 	mov	r2,r16
811243e4:	003f1706 	br	81124044 <__reset+0xfb104044>
811243e8:	817fe736 	bltu	r16,r5,81124388 <__reset+0xfb104388>
811243ec:	280f883a 	mov	r7,r5
811243f0:	0009883a 	mov	r4,zero
811243f4:	003fb106 	br	811242bc <__reset+0xfb1042bc>

811243f8 <__divsi3>:
811243f8:	20001b16 	blt	r4,zero,81124468 <__divsi3+0x70>
811243fc:	000f883a 	mov	r7,zero
81124400:	28001616 	blt	r5,zero,8112445c <__divsi3+0x64>
81124404:	200d883a 	mov	r6,r4
81124408:	29001a2e 	bgeu	r5,r4,81124474 <__divsi3+0x7c>
8112440c:	00800804 	movi	r2,32
81124410:	00c00044 	movi	r3,1
81124414:	00000106 	br	8112441c <__divsi3+0x24>
81124418:	10000d26 	beq	r2,zero,81124450 <__divsi3+0x58>
8112441c:	294b883a 	add	r5,r5,r5
81124420:	10bfffc4 	addi	r2,r2,-1
81124424:	18c7883a 	add	r3,r3,r3
81124428:	293ffb36 	bltu	r5,r4,81124418 <__reset+0xfb104418>
8112442c:	0005883a 	mov	r2,zero
81124430:	18000726 	beq	r3,zero,81124450 <__divsi3+0x58>
81124434:	0005883a 	mov	r2,zero
81124438:	31400236 	bltu	r6,r5,81124444 <__divsi3+0x4c>
8112443c:	314dc83a 	sub	r6,r6,r5
81124440:	10c4b03a 	or	r2,r2,r3
81124444:	1806d07a 	srli	r3,r3,1
81124448:	280ad07a 	srli	r5,r5,1
8112444c:	183ffa1e 	bne	r3,zero,81124438 <__reset+0xfb104438>
81124450:	38000126 	beq	r7,zero,81124458 <__divsi3+0x60>
81124454:	0085c83a 	sub	r2,zero,r2
81124458:	f800283a 	ret
8112445c:	014bc83a 	sub	r5,zero,r5
81124460:	39c0005c 	xori	r7,r7,1
81124464:	003fe706 	br	81124404 <__reset+0xfb104404>
81124468:	0109c83a 	sub	r4,zero,r4
8112446c:	01c00044 	movi	r7,1
81124470:	003fe306 	br	81124400 <__reset+0xfb104400>
81124474:	00c00044 	movi	r3,1
81124478:	003fee06 	br	81124434 <__reset+0xfb104434>

8112447c <__modsi3>:
8112447c:	20001716 	blt	r4,zero,811244dc <__modsi3+0x60>
81124480:	000f883a 	mov	r7,zero
81124484:	2005883a 	mov	r2,r4
81124488:	28001216 	blt	r5,zero,811244d4 <__modsi3+0x58>
8112448c:	2900162e 	bgeu	r5,r4,811244e8 <__modsi3+0x6c>
81124490:	01800804 	movi	r6,32
81124494:	00c00044 	movi	r3,1
81124498:	00000106 	br	811244a0 <__modsi3+0x24>
8112449c:	30000a26 	beq	r6,zero,811244c8 <__modsi3+0x4c>
811244a0:	294b883a 	add	r5,r5,r5
811244a4:	31bfffc4 	addi	r6,r6,-1
811244a8:	18c7883a 	add	r3,r3,r3
811244ac:	293ffb36 	bltu	r5,r4,8112449c <__reset+0xfb10449c>
811244b0:	18000526 	beq	r3,zero,811244c8 <__modsi3+0x4c>
811244b4:	1806d07a 	srli	r3,r3,1
811244b8:	11400136 	bltu	r2,r5,811244c0 <__modsi3+0x44>
811244bc:	1145c83a 	sub	r2,r2,r5
811244c0:	280ad07a 	srli	r5,r5,1
811244c4:	183ffb1e 	bne	r3,zero,811244b4 <__reset+0xfb1044b4>
811244c8:	38000126 	beq	r7,zero,811244d0 <__modsi3+0x54>
811244cc:	0085c83a 	sub	r2,zero,r2
811244d0:	f800283a 	ret
811244d4:	014bc83a 	sub	r5,zero,r5
811244d8:	003fec06 	br	8112448c <__reset+0xfb10448c>
811244dc:	0109c83a 	sub	r4,zero,r4
811244e0:	01c00044 	movi	r7,1
811244e4:	003fe706 	br	81124484 <__reset+0xfb104484>
811244e8:	00c00044 	movi	r3,1
811244ec:	003ff106 	br	811244b4 <__reset+0xfb1044b4>

811244f0 <__udivsi3>:
811244f0:	200d883a 	mov	r6,r4
811244f4:	2900152e 	bgeu	r5,r4,8112454c <__udivsi3+0x5c>
811244f8:	28001416 	blt	r5,zero,8112454c <__udivsi3+0x5c>
811244fc:	00800804 	movi	r2,32
81124500:	00c00044 	movi	r3,1
81124504:	00000206 	br	81124510 <__udivsi3+0x20>
81124508:	10000e26 	beq	r2,zero,81124544 <__udivsi3+0x54>
8112450c:	28000516 	blt	r5,zero,81124524 <__udivsi3+0x34>
81124510:	294b883a 	add	r5,r5,r5
81124514:	10bfffc4 	addi	r2,r2,-1
81124518:	18c7883a 	add	r3,r3,r3
8112451c:	293ffa36 	bltu	r5,r4,81124508 <__reset+0xfb104508>
81124520:	18000826 	beq	r3,zero,81124544 <__udivsi3+0x54>
81124524:	0005883a 	mov	r2,zero
81124528:	31400236 	bltu	r6,r5,81124534 <__udivsi3+0x44>
8112452c:	314dc83a 	sub	r6,r6,r5
81124530:	10c4b03a 	or	r2,r2,r3
81124534:	1806d07a 	srli	r3,r3,1
81124538:	280ad07a 	srli	r5,r5,1
8112453c:	183ffa1e 	bne	r3,zero,81124528 <__reset+0xfb104528>
81124540:	f800283a 	ret
81124544:	0005883a 	mov	r2,zero
81124548:	f800283a 	ret
8112454c:	00c00044 	movi	r3,1
81124550:	003ff406 	br	81124524 <__reset+0xfb104524>

81124554 <__umodsi3>:
81124554:	2005883a 	mov	r2,r4
81124558:	2900122e 	bgeu	r5,r4,811245a4 <__umodsi3+0x50>
8112455c:	28001116 	blt	r5,zero,811245a4 <__umodsi3+0x50>
81124560:	01800804 	movi	r6,32
81124564:	00c00044 	movi	r3,1
81124568:	00000206 	br	81124574 <__umodsi3+0x20>
8112456c:	30000c26 	beq	r6,zero,811245a0 <__umodsi3+0x4c>
81124570:	28000516 	blt	r5,zero,81124588 <__umodsi3+0x34>
81124574:	294b883a 	add	r5,r5,r5
81124578:	31bfffc4 	addi	r6,r6,-1
8112457c:	18c7883a 	add	r3,r3,r3
81124580:	293ffa36 	bltu	r5,r4,8112456c <__reset+0xfb10456c>
81124584:	18000626 	beq	r3,zero,811245a0 <__umodsi3+0x4c>
81124588:	1806d07a 	srli	r3,r3,1
8112458c:	11400136 	bltu	r2,r5,81124594 <__umodsi3+0x40>
81124590:	1145c83a 	sub	r2,r2,r5
81124594:	280ad07a 	srli	r5,r5,1
81124598:	183ffb1e 	bne	r3,zero,81124588 <__reset+0xfb104588>
8112459c:	f800283a 	ret
811245a0:	f800283a 	ret
811245a4:	00c00044 	movi	r3,1
811245a8:	003ff706 	br	81124588 <__reset+0xfb104588>

811245ac <__eqsf2>:
811245ac:	2006d5fa 	srli	r3,r4,23
811245b0:	280cd5fa 	srli	r6,r5,23
811245b4:	01c02034 	movhi	r7,128
811245b8:	39ffffc4 	addi	r7,r7,-1
811245bc:	18c03fcc 	andi	r3,r3,255
811245c0:	02003fc4 	movi	r8,255
811245c4:	3904703a 	and	r2,r7,r4
811245c8:	31803fcc 	andi	r6,r6,255
811245cc:	394e703a 	and	r7,r7,r5
811245d0:	2008d7fa 	srli	r4,r4,31
811245d4:	280ad7fa 	srli	r5,r5,31
811245d8:	1a000d26 	beq	r3,r8,81124610 <__eqsf2+0x64>
811245dc:	02003fc4 	movi	r8,255
811245e0:	32000826 	beq	r6,r8,81124604 <__eqsf2+0x58>
811245e4:	19800226 	beq	r3,r6,811245f0 <__eqsf2+0x44>
811245e8:	00800044 	movi	r2,1
811245ec:	f800283a 	ret
811245f0:	11fffd1e 	bne	r2,r7,811245e8 <__reset+0xfb1045e8>
811245f4:	21400926 	beq	r4,r5,8112461c <__eqsf2+0x70>
811245f8:	183ffb1e 	bne	r3,zero,811245e8 <__reset+0xfb1045e8>
811245fc:	1004c03a 	cmpne	r2,r2,zero
81124600:	f800283a 	ret
81124604:	383ff726 	beq	r7,zero,811245e4 <__reset+0xfb1045e4>
81124608:	00800044 	movi	r2,1
8112460c:	f800283a 	ret
81124610:	103ff226 	beq	r2,zero,811245dc <__reset+0xfb1045dc>
81124614:	00800044 	movi	r2,1
81124618:	f800283a 	ret
8112461c:	0005883a 	mov	r2,zero
81124620:	f800283a 	ret

81124624 <__gesf2>:
81124624:	2004d5fa 	srli	r2,r4,23
81124628:	2806d5fa 	srli	r3,r5,23
8112462c:	01802034 	movhi	r6,128
81124630:	31bfffc4 	addi	r6,r6,-1
81124634:	10803fcc 	andi	r2,r2,255
81124638:	01c03fc4 	movi	r7,255
8112463c:	3110703a 	and	r8,r6,r4
81124640:	18c03fcc 	andi	r3,r3,255
81124644:	314c703a 	and	r6,r6,r5
81124648:	2008d7fa 	srli	r4,r4,31
8112464c:	280ad7fa 	srli	r5,r5,31
81124650:	11c01926 	beq	r2,r7,811246b8 <__gesf2+0x94>
81124654:	01c03fc4 	movi	r7,255
81124658:	19c00f26 	beq	r3,r7,81124698 <__gesf2+0x74>
8112465c:	1000061e 	bne	r2,zero,81124678 <__gesf2+0x54>
81124660:	400f003a 	cmpeq	r7,r8,zero
81124664:	1800071e 	bne	r3,zero,81124684 <__gesf2+0x60>
81124668:	3000061e 	bne	r6,zero,81124684 <__gesf2+0x60>
8112466c:	0005883a 	mov	r2,zero
81124670:	40000e1e 	bne	r8,zero,811246ac <__gesf2+0x88>
81124674:	f800283a 	ret
81124678:	18000a1e 	bne	r3,zero,811246a4 <__gesf2+0x80>
8112467c:	30000b26 	beq	r6,zero,811246ac <__gesf2+0x88>
81124680:	000f883a 	mov	r7,zero
81124684:	29403fcc 	andi	r5,r5,255
81124688:	38000726 	beq	r7,zero,811246a8 <__gesf2+0x84>
8112468c:	28000826 	beq	r5,zero,811246b0 <__gesf2+0x8c>
81124690:	00800044 	movi	r2,1
81124694:	f800283a 	ret
81124698:	303ff026 	beq	r6,zero,8112465c <__reset+0xfb10465c>
8112469c:	00bfff84 	movi	r2,-2
811246a0:	f800283a 	ret
811246a4:	29403fcc 	andi	r5,r5,255
811246a8:	21400526 	beq	r4,r5,811246c0 <__gesf2+0x9c>
811246ac:	203ff826 	beq	r4,zero,81124690 <__reset+0xfb104690>
811246b0:	00bfffc4 	movi	r2,-1
811246b4:	f800283a 	ret
811246b8:	403fe626 	beq	r8,zero,81124654 <__reset+0xfb104654>
811246bc:	003ff706 	br	8112469c <__reset+0xfb10469c>
811246c0:	18bffa16 	blt	r3,r2,811246ac <__reset+0xfb1046ac>
811246c4:	10c00216 	blt	r2,r3,811246d0 <__gesf2+0xac>
811246c8:	323ff836 	bltu	r6,r8,811246ac <__reset+0xfb1046ac>
811246cc:	4180022e 	bgeu	r8,r6,811246d8 <__gesf2+0xb4>
811246d0:	203fef1e 	bne	r4,zero,81124690 <__reset+0xfb104690>
811246d4:	003ff606 	br	811246b0 <__reset+0xfb1046b0>
811246d8:	0005883a 	mov	r2,zero
811246dc:	f800283a 	ret

811246e0 <__lesf2>:
811246e0:	2004d5fa 	srli	r2,r4,23
811246e4:	280cd5fa 	srli	r6,r5,23
811246e8:	00c02034 	movhi	r3,128
811246ec:	18ffffc4 	addi	r3,r3,-1
811246f0:	10803fcc 	andi	r2,r2,255
811246f4:	01c03fc4 	movi	r7,255
811246f8:	1910703a 	and	r8,r3,r4
811246fc:	31803fcc 	andi	r6,r6,255
81124700:	1946703a 	and	r3,r3,r5
81124704:	2008d7fa 	srli	r4,r4,31
81124708:	280ad7fa 	srli	r5,r5,31
8112470c:	11c01b26 	beq	r2,r7,8112477c <__lesf2+0x9c>
81124710:	01c03fc4 	movi	r7,255
81124714:	31c01126 	beq	r6,r7,8112475c <__lesf2+0x7c>
81124718:	1000071e 	bne	r2,zero,81124738 <__lesf2+0x58>
8112471c:	400f003a 	cmpeq	r7,r8,zero
81124720:	21003fcc 	andi	r4,r4,255
81124724:	3000081e 	bne	r6,zero,81124748 <__lesf2+0x68>
81124728:	1800071e 	bne	r3,zero,81124748 <__lesf2+0x68>
8112472c:	0005883a 	mov	r2,zero
81124730:	40000f1e 	bne	r8,zero,81124770 <__lesf2+0x90>
81124734:	f800283a 	ret
81124738:	21003fcc 	andi	r4,r4,255
8112473c:	30000a1e 	bne	r6,zero,81124768 <__lesf2+0x88>
81124740:	18000b26 	beq	r3,zero,81124770 <__lesf2+0x90>
81124744:	000f883a 	mov	r7,zero
81124748:	29403fcc 	andi	r5,r5,255
8112474c:	38000726 	beq	r7,zero,8112476c <__lesf2+0x8c>
81124750:	28000826 	beq	r5,zero,81124774 <__lesf2+0x94>
81124754:	00800044 	movi	r2,1
81124758:	f800283a 	ret
8112475c:	183fee26 	beq	r3,zero,81124718 <__reset+0xfb104718>
81124760:	00800084 	movi	r2,2
81124764:	f800283a 	ret
81124768:	29403fcc 	andi	r5,r5,255
8112476c:	21400626 	beq	r4,r5,81124788 <__lesf2+0xa8>
81124770:	203ff826 	beq	r4,zero,81124754 <__reset+0xfb104754>
81124774:	00bfffc4 	movi	r2,-1
81124778:	f800283a 	ret
8112477c:	403fe426 	beq	r8,zero,81124710 <__reset+0xfb104710>
81124780:	00800084 	movi	r2,2
81124784:	f800283a 	ret
81124788:	30bff916 	blt	r6,r2,81124770 <__reset+0xfb104770>
8112478c:	11800216 	blt	r2,r6,81124798 <__lesf2+0xb8>
81124790:	1a3ff736 	bltu	r3,r8,81124770 <__reset+0xfb104770>
81124794:	40c0022e 	bgeu	r8,r3,811247a0 <__lesf2+0xc0>
81124798:	203fee1e 	bne	r4,zero,81124754 <__reset+0xfb104754>
8112479c:	003ff506 	br	81124774 <__reset+0xfb104774>
811247a0:	0005883a 	mov	r2,zero
811247a4:	f800283a 	ret

811247a8 <__adddf3>:
811247a8:	02c00434 	movhi	r11,16
811247ac:	5affffc4 	addi	r11,r11,-1
811247b0:	2806d7fa 	srli	r3,r5,31
811247b4:	2ad4703a 	and	r10,r5,r11
811247b8:	3ad2703a 	and	r9,r7,r11
811247bc:	3804d53a 	srli	r2,r7,20
811247c0:	3018d77a 	srli	r12,r6,29
811247c4:	280ad53a 	srli	r5,r5,20
811247c8:	501490fa 	slli	r10,r10,3
811247cc:	2010d77a 	srli	r8,r4,29
811247d0:	481290fa 	slli	r9,r9,3
811247d4:	380ed7fa 	srli	r7,r7,31
811247d8:	defffb04 	addi	sp,sp,-20
811247dc:	de00012e 	bgeu	sp,et,811247e4 <__adddf3+0x3c>
811247e0:	003b68fa 	trap	3
811247e4:	dc800215 	stw	r18,8(sp)
811247e8:	dc400115 	stw	r17,4(sp)
811247ec:	dc000015 	stw	r16,0(sp)
811247f0:	dfc00415 	stw	ra,16(sp)
811247f4:	dcc00315 	stw	r19,12(sp)
811247f8:	1c803fcc 	andi	r18,r3,255
811247fc:	2c01ffcc 	andi	r16,r5,2047
81124800:	5210b03a 	or	r8,r10,r8
81124804:	202290fa 	slli	r17,r4,3
81124808:	1081ffcc 	andi	r2,r2,2047
8112480c:	4b12b03a 	or	r9,r9,r12
81124810:	300c90fa 	slli	r6,r6,3
81124814:	91c07526 	beq	r18,r7,811249ec <__adddf3+0x244>
81124818:	8087c83a 	sub	r3,r16,r2
8112481c:	00c0ab0e 	bge	zero,r3,81124acc <__adddf3+0x324>
81124820:	10002a1e 	bne	r2,zero,811248cc <__adddf3+0x124>
81124824:	4984b03a 	or	r2,r9,r6
81124828:	1000961e 	bne	r2,zero,81124a84 <__adddf3+0x2dc>
8112482c:	888001cc 	andi	r2,r17,7
81124830:	10000726 	beq	r2,zero,81124850 <__adddf3+0xa8>
81124834:	888003cc 	andi	r2,r17,15
81124838:	00c00104 	movi	r3,4
8112483c:	10c00426 	beq	r2,r3,81124850 <__adddf3+0xa8>
81124840:	88c7883a 	add	r3,r17,r3
81124844:	1c63803a 	cmpltu	r17,r3,r17
81124848:	4451883a 	add	r8,r8,r17
8112484c:	1823883a 	mov	r17,r3
81124850:	4080202c 	andhi	r2,r8,128
81124854:	10005926 	beq	r2,zero,811249bc <__adddf3+0x214>
81124858:	84000044 	addi	r16,r16,1
8112485c:	0081ffc4 	movi	r2,2047
81124860:	8080ba26 	beq	r16,r2,81124b4c <__adddf3+0x3a4>
81124864:	00bfe034 	movhi	r2,65408
81124868:	10bfffc4 	addi	r2,r2,-1
8112486c:	4090703a 	and	r8,r8,r2
81124870:	4004977a 	slli	r2,r8,29
81124874:	4010927a 	slli	r8,r8,9
81124878:	8822d0fa 	srli	r17,r17,3
8112487c:	8401ffcc 	andi	r16,r16,2047
81124880:	4010d33a 	srli	r8,r8,12
81124884:	9007883a 	mov	r3,r18
81124888:	1444b03a 	or	r2,r2,r17
8112488c:	8401ffcc 	andi	r16,r16,2047
81124890:	8020953a 	slli	r16,r16,20
81124894:	18c03fcc 	andi	r3,r3,255
81124898:	01000434 	movhi	r4,16
8112489c:	213fffc4 	addi	r4,r4,-1
811248a0:	180697fa 	slli	r3,r3,31
811248a4:	4110703a 	and	r8,r8,r4
811248a8:	4410b03a 	or	r8,r8,r16
811248ac:	40c6b03a 	or	r3,r8,r3
811248b0:	dfc00417 	ldw	ra,16(sp)
811248b4:	dcc00317 	ldw	r19,12(sp)
811248b8:	dc800217 	ldw	r18,8(sp)
811248bc:	dc400117 	ldw	r17,4(sp)
811248c0:	dc000017 	ldw	r16,0(sp)
811248c4:	dec00504 	addi	sp,sp,20
811248c8:	f800283a 	ret
811248cc:	0081ffc4 	movi	r2,2047
811248d0:	80bfd626 	beq	r16,r2,8112482c <__reset+0xfb10482c>
811248d4:	4a402034 	orhi	r9,r9,128
811248d8:	00800e04 	movi	r2,56
811248dc:	10c09f16 	blt	r2,r3,81124b5c <__adddf3+0x3b4>
811248e0:	008007c4 	movi	r2,31
811248e4:	10c0c216 	blt	r2,r3,81124bf0 <__adddf3+0x448>
811248e8:	00800804 	movi	r2,32
811248ec:	10c5c83a 	sub	r2,r2,r3
811248f0:	488a983a 	sll	r5,r9,r2
811248f4:	30c8d83a 	srl	r4,r6,r3
811248f8:	3084983a 	sll	r2,r6,r2
811248fc:	48c6d83a 	srl	r3,r9,r3
81124900:	290cb03a 	or	r6,r5,r4
81124904:	1004c03a 	cmpne	r2,r2,zero
81124908:	308cb03a 	or	r6,r6,r2
8112490c:	898dc83a 	sub	r6,r17,r6
81124910:	89a3803a 	cmpltu	r17,r17,r6
81124914:	40d1c83a 	sub	r8,r8,r3
81124918:	4451c83a 	sub	r8,r8,r17
8112491c:	3023883a 	mov	r17,r6
81124920:	4080202c 	andhi	r2,r8,128
81124924:	10002326 	beq	r2,zero,811249b4 <__adddf3+0x20c>
81124928:	04c02034 	movhi	r19,128
8112492c:	9cffffc4 	addi	r19,r19,-1
81124930:	44e6703a 	and	r19,r8,r19
81124934:	98007626 	beq	r19,zero,81124b10 <__adddf3+0x368>
81124938:	9809883a 	mov	r4,r19
8112493c:	1110f040 	call	81110f04 <__clzsi2>
81124940:	10fffe04 	addi	r3,r2,-8
81124944:	010007c4 	movi	r4,31
81124948:	20c07716 	blt	r4,r3,81124b28 <__adddf3+0x380>
8112494c:	00800804 	movi	r2,32
81124950:	10c5c83a 	sub	r2,r2,r3
81124954:	8884d83a 	srl	r2,r17,r2
81124958:	98d0983a 	sll	r8,r19,r3
8112495c:	88e2983a 	sll	r17,r17,r3
81124960:	1204b03a 	or	r2,r2,r8
81124964:	1c007416 	blt	r3,r16,81124b38 <__adddf3+0x390>
81124968:	1c21c83a 	sub	r16,r3,r16
8112496c:	82000044 	addi	r8,r16,1
81124970:	00c007c4 	movi	r3,31
81124974:	1a009116 	blt	r3,r8,81124bbc <__adddf3+0x414>
81124978:	00c00804 	movi	r3,32
8112497c:	1a07c83a 	sub	r3,r3,r8
81124980:	8a08d83a 	srl	r4,r17,r8
81124984:	88e2983a 	sll	r17,r17,r3
81124988:	10c6983a 	sll	r3,r2,r3
8112498c:	1210d83a 	srl	r8,r2,r8
81124990:	8804c03a 	cmpne	r2,r17,zero
81124994:	1906b03a 	or	r3,r3,r4
81124998:	18a2b03a 	or	r17,r3,r2
8112499c:	0021883a 	mov	r16,zero
811249a0:	003fa206 	br	8112482c <__reset+0xfb10482c>
811249a4:	1890b03a 	or	r8,r3,r2
811249a8:	40017d26 	beq	r8,zero,81124fa0 <__adddf3+0x7f8>
811249ac:	1011883a 	mov	r8,r2
811249b0:	1823883a 	mov	r17,r3
811249b4:	888001cc 	andi	r2,r17,7
811249b8:	103f9e1e 	bne	r2,zero,81124834 <__reset+0xfb104834>
811249bc:	4004977a 	slli	r2,r8,29
811249c0:	8822d0fa 	srli	r17,r17,3
811249c4:	4010d0fa 	srli	r8,r8,3
811249c8:	9007883a 	mov	r3,r18
811249cc:	1444b03a 	or	r2,r2,r17
811249d0:	0101ffc4 	movi	r4,2047
811249d4:	81002426 	beq	r16,r4,81124a68 <__adddf3+0x2c0>
811249d8:	8120703a 	and	r16,r16,r4
811249dc:	01000434 	movhi	r4,16
811249e0:	213fffc4 	addi	r4,r4,-1
811249e4:	4110703a 	and	r8,r8,r4
811249e8:	003fa806 	br	8112488c <__reset+0xfb10488c>
811249ec:	8089c83a 	sub	r4,r16,r2
811249f0:	01005e0e 	bge	zero,r4,81124b6c <__adddf3+0x3c4>
811249f4:	10002b26 	beq	r2,zero,81124aa4 <__adddf3+0x2fc>
811249f8:	0081ffc4 	movi	r2,2047
811249fc:	80bf8b26 	beq	r16,r2,8112482c <__reset+0xfb10482c>
81124a00:	4a402034 	orhi	r9,r9,128
81124a04:	00800e04 	movi	r2,56
81124a08:	1100a40e 	bge	r2,r4,81124c9c <__adddf3+0x4f4>
81124a0c:	498cb03a 	or	r6,r9,r6
81124a10:	300ac03a 	cmpne	r5,r6,zero
81124a14:	0013883a 	mov	r9,zero
81124a18:	2c4b883a 	add	r5,r5,r17
81124a1c:	2c63803a 	cmpltu	r17,r5,r17
81124a20:	4a11883a 	add	r8,r9,r8
81124a24:	8a11883a 	add	r8,r17,r8
81124a28:	2823883a 	mov	r17,r5
81124a2c:	4080202c 	andhi	r2,r8,128
81124a30:	103fe026 	beq	r2,zero,811249b4 <__reset+0xfb1049b4>
81124a34:	84000044 	addi	r16,r16,1
81124a38:	0081ffc4 	movi	r2,2047
81124a3c:	8080d226 	beq	r16,r2,81124d88 <__adddf3+0x5e0>
81124a40:	00bfe034 	movhi	r2,65408
81124a44:	10bfffc4 	addi	r2,r2,-1
81124a48:	4090703a 	and	r8,r8,r2
81124a4c:	880ad07a 	srli	r5,r17,1
81124a50:	400897fa 	slli	r4,r8,31
81124a54:	88c0004c 	andi	r3,r17,1
81124a58:	28e2b03a 	or	r17,r5,r3
81124a5c:	4010d07a 	srli	r8,r8,1
81124a60:	2462b03a 	or	r17,r4,r17
81124a64:	003f7106 	br	8112482c <__reset+0xfb10482c>
81124a68:	4088b03a 	or	r4,r8,r2
81124a6c:	20014526 	beq	r4,zero,81124f84 <__adddf3+0x7dc>
81124a70:	01000434 	movhi	r4,16
81124a74:	42000234 	orhi	r8,r8,8
81124a78:	213fffc4 	addi	r4,r4,-1
81124a7c:	4110703a 	and	r8,r8,r4
81124a80:	003f8206 	br	8112488c <__reset+0xfb10488c>
81124a84:	18ffffc4 	addi	r3,r3,-1
81124a88:	1800491e 	bne	r3,zero,81124bb0 <__adddf3+0x408>
81124a8c:	898bc83a 	sub	r5,r17,r6
81124a90:	8963803a 	cmpltu	r17,r17,r5
81124a94:	4251c83a 	sub	r8,r8,r9
81124a98:	4451c83a 	sub	r8,r8,r17
81124a9c:	2823883a 	mov	r17,r5
81124aa0:	003f9f06 	br	81124920 <__reset+0xfb104920>
81124aa4:	4984b03a 	or	r2,r9,r6
81124aa8:	103f6026 	beq	r2,zero,8112482c <__reset+0xfb10482c>
81124aac:	213fffc4 	addi	r4,r4,-1
81124ab0:	2000931e 	bne	r4,zero,81124d00 <__adddf3+0x558>
81124ab4:	898d883a 	add	r6,r17,r6
81124ab8:	3463803a 	cmpltu	r17,r6,r17
81124abc:	4251883a 	add	r8,r8,r9
81124ac0:	8a11883a 	add	r8,r17,r8
81124ac4:	3023883a 	mov	r17,r6
81124ac8:	003fd806 	br	81124a2c <__reset+0xfb104a2c>
81124acc:	1800541e 	bne	r3,zero,81124c20 <__adddf3+0x478>
81124ad0:	80800044 	addi	r2,r16,1
81124ad4:	1081ffcc 	andi	r2,r2,2047
81124ad8:	00c00044 	movi	r3,1
81124adc:	1880a00e 	bge	r3,r2,81124d60 <__adddf3+0x5b8>
81124ae0:	8989c83a 	sub	r4,r17,r6
81124ae4:	8905803a 	cmpltu	r2,r17,r4
81124ae8:	4267c83a 	sub	r19,r8,r9
81124aec:	98a7c83a 	sub	r19,r19,r2
81124af0:	9880202c 	andhi	r2,r19,128
81124af4:	10006326 	beq	r2,zero,81124c84 <__adddf3+0x4dc>
81124af8:	3463c83a 	sub	r17,r6,r17
81124afc:	4a07c83a 	sub	r3,r9,r8
81124b00:	344d803a 	cmpltu	r6,r6,r17
81124b04:	19a7c83a 	sub	r19,r3,r6
81124b08:	3825883a 	mov	r18,r7
81124b0c:	983f8a1e 	bne	r19,zero,81124938 <__reset+0xfb104938>
81124b10:	8809883a 	mov	r4,r17
81124b14:	1110f040 	call	81110f04 <__clzsi2>
81124b18:	10800804 	addi	r2,r2,32
81124b1c:	10fffe04 	addi	r3,r2,-8
81124b20:	010007c4 	movi	r4,31
81124b24:	20ff890e 	bge	r4,r3,8112494c <__reset+0xfb10494c>
81124b28:	10bff604 	addi	r2,r2,-40
81124b2c:	8884983a 	sll	r2,r17,r2
81124b30:	0023883a 	mov	r17,zero
81124b34:	1c3f8c0e 	bge	r3,r16,81124968 <__reset+0xfb104968>
81124b38:	023fe034 	movhi	r8,65408
81124b3c:	423fffc4 	addi	r8,r8,-1
81124b40:	80e1c83a 	sub	r16,r16,r3
81124b44:	1210703a 	and	r8,r2,r8
81124b48:	003f3806 	br	8112482c <__reset+0xfb10482c>
81124b4c:	9007883a 	mov	r3,r18
81124b50:	0011883a 	mov	r8,zero
81124b54:	0005883a 	mov	r2,zero
81124b58:	003f4c06 	br	8112488c <__reset+0xfb10488c>
81124b5c:	498cb03a 	or	r6,r9,r6
81124b60:	300cc03a 	cmpne	r6,r6,zero
81124b64:	0007883a 	mov	r3,zero
81124b68:	003f6806 	br	8112490c <__reset+0xfb10490c>
81124b6c:	20009c1e 	bne	r4,zero,81124de0 <__adddf3+0x638>
81124b70:	80800044 	addi	r2,r16,1
81124b74:	1141ffcc 	andi	r5,r2,2047
81124b78:	01000044 	movi	r4,1
81124b7c:	2140670e 	bge	r4,r5,81124d1c <__adddf3+0x574>
81124b80:	0101ffc4 	movi	r4,2047
81124b84:	11007f26 	beq	r2,r4,81124d84 <__adddf3+0x5dc>
81124b88:	898d883a 	add	r6,r17,r6
81124b8c:	4247883a 	add	r3,r8,r9
81124b90:	3451803a 	cmpltu	r8,r6,r17
81124b94:	40d1883a 	add	r8,r8,r3
81124b98:	402297fa 	slli	r17,r8,31
81124b9c:	300cd07a 	srli	r6,r6,1
81124ba0:	4010d07a 	srli	r8,r8,1
81124ba4:	1021883a 	mov	r16,r2
81124ba8:	89a2b03a 	or	r17,r17,r6
81124bac:	003f1f06 	br	8112482c <__reset+0xfb10482c>
81124bb0:	0081ffc4 	movi	r2,2047
81124bb4:	80bf481e 	bne	r16,r2,811248d8 <__reset+0xfb1048d8>
81124bb8:	003f1c06 	br	8112482c <__reset+0xfb10482c>
81124bbc:	843ff844 	addi	r16,r16,-31
81124bc0:	01000804 	movi	r4,32
81124bc4:	1406d83a 	srl	r3,r2,r16
81124bc8:	41005026 	beq	r8,r4,81124d0c <__adddf3+0x564>
81124bcc:	01001004 	movi	r4,64
81124bd0:	2211c83a 	sub	r8,r4,r8
81124bd4:	1204983a 	sll	r2,r2,r8
81124bd8:	88a2b03a 	or	r17,r17,r2
81124bdc:	8822c03a 	cmpne	r17,r17,zero
81124be0:	1c62b03a 	or	r17,r3,r17
81124be4:	0011883a 	mov	r8,zero
81124be8:	0021883a 	mov	r16,zero
81124bec:	003f7106 	br	811249b4 <__reset+0xfb1049b4>
81124bf0:	193ff804 	addi	r4,r3,-32
81124bf4:	00800804 	movi	r2,32
81124bf8:	4908d83a 	srl	r4,r9,r4
81124bfc:	18804526 	beq	r3,r2,81124d14 <__adddf3+0x56c>
81124c00:	00801004 	movi	r2,64
81124c04:	10c5c83a 	sub	r2,r2,r3
81124c08:	4886983a 	sll	r3,r9,r2
81124c0c:	198cb03a 	or	r6,r3,r6
81124c10:	300cc03a 	cmpne	r6,r6,zero
81124c14:	218cb03a 	or	r6,r4,r6
81124c18:	0007883a 	mov	r3,zero
81124c1c:	003f3b06 	br	8112490c <__reset+0xfb10490c>
81124c20:	80002a26 	beq	r16,zero,81124ccc <__adddf3+0x524>
81124c24:	0101ffc4 	movi	r4,2047
81124c28:	11006826 	beq	r2,r4,81124dcc <__adddf3+0x624>
81124c2c:	00c7c83a 	sub	r3,zero,r3
81124c30:	42002034 	orhi	r8,r8,128
81124c34:	01000e04 	movi	r4,56
81124c38:	20c07c16 	blt	r4,r3,81124e2c <__adddf3+0x684>
81124c3c:	010007c4 	movi	r4,31
81124c40:	20c0da16 	blt	r4,r3,81124fac <__adddf3+0x804>
81124c44:	01000804 	movi	r4,32
81124c48:	20c9c83a 	sub	r4,r4,r3
81124c4c:	4114983a 	sll	r10,r8,r4
81124c50:	88cad83a 	srl	r5,r17,r3
81124c54:	8908983a 	sll	r4,r17,r4
81124c58:	40c6d83a 	srl	r3,r8,r3
81124c5c:	5162b03a 	or	r17,r10,r5
81124c60:	2008c03a 	cmpne	r4,r4,zero
81124c64:	8922b03a 	or	r17,r17,r4
81124c68:	3463c83a 	sub	r17,r6,r17
81124c6c:	48c7c83a 	sub	r3,r9,r3
81124c70:	344d803a 	cmpltu	r6,r6,r17
81124c74:	1991c83a 	sub	r8,r3,r6
81124c78:	1021883a 	mov	r16,r2
81124c7c:	3825883a 	mov	r18,r7
81124c80:	003f2706 	br	81124920 <__reset+0xfb104920>
81124c84:	24d0b03a 	or	r8,r4,r19
81124c88:	40001b1e 	bne	r8,zero,81124cf8 <__adddf3+0x550>
81124c8c:	0005883a 	mov	r2,zero
81124c90:	0007883a 	mov	r3,zero
81124c94:	0021883a 	mov	r16,zero
81124c98:	003f4d06 	br	811249d0 <__reset+0xfb1049d0>
81124c9c:	008007c4 	movi	r2,31
81124ca0:	11003c16 	blt	r2,r4,81124d94 <__adddf3+0x5ec>
81124ca4:	00800804 	movi	r2,32
81124ca8:	1105c83a 	sub	r2,r2,r4
81124cac:	488e983a 	sll	r7,r9,r2
81124cb0:	310ad83a 	srl	r5,r6,r4
81124cb4:	3084983a 	sll	r2,r6,r2
81124cb8:	4912d83a 	srl	r9,r9,r4
81124cbc:	394ab03a 	or	r5,r7,r5
81124cc0:	1004c03a 	cmpne	r2,r2,zero
81124cc4:	288ab03a 	or	r5,r5,r2
81124cc8:	003f5306 	br	81124a18 <__reset+0xfb104a18>
81124ccc:	4448b03a 	or	r4,r8,r17
81124cd0:	20003e26 	beq	r4,zero,81124dcc <__adddf3+0x624>
81124cd4:	00c6303a 	nor	r3,zero,r3
81124cd8:	18003a1e 	bne	r3,zero,81124dc4 <__adddf3+0x61c>
81124cdc:	3463c83a 	sub	r17,r6,r17
81124ce0:	4a07c83a 	sub	r3,r9,r8
81124ce4:	344d803a 	cmpltu	r6,r6,r17
81124ce8:	1991c83a 	sub	r8,r3,r6
81124cec:	1021883a 	mov	r16,r2
81124cf0:	3825883a 	mov	r18,r7
81124cf4:	003f0a06 	br	81124920 <__reset+0xfb104920>
81124cf8:	2023883a 	mov	r17,r4
81124cfc:	003f0d06 	br	81124934 <__reset+0xfb104934>
81124d00:	0081ffc4 	movi	r2,2047
81124d04:	80bf3f1e 	bne	r16,r2,81124a04 <__reset+0xfb104a04>
81124d08:	003ec806 	br	8112482c <__reset+0xfb10482c>
81124d0c:	0005883a 	mov	r2,zero
81124d10:	003fb106 	br	81124bd8 <__reset+0xfb104bd8>
81124d14:	0007883a 	mov	r3,zero
81124d18:	003fbc06 	br	81124c0c <__reset+0xfb104c0c>
81124d1c:	4444b03a 	or	r2,r8,r17
81124d20:	8000871e 	bne	r16,zero,81124f40 <__adddf3+0x798>
81124d24:	1000ba26 	beq	r2,zero,81125010 <__adddf3+0x868>
81124d28:	4984b03a 	or	r2,r9,r6
81124d2c:	103ebf26 	beq	r2,zero,8112482c <__reset+0xfb10482c>
81124d30:	8985883a 	add	r2,r17,r6
81124d34:	4247883a 	add	r3,r8,r9
81124d38:	1451803a 	cmpltu	r8,r2,r17
81124d3c:	40d1883a 	add	r8,r8,r3
81124d40:	40c0202c 	andhi	r3,r8,128
81124d44:	1023883a 	mov	r17,r2
81124d48:	183f1a26 	beq	r3,zero,811249b4 <__reset+0xfb1049b4>
81124d4c:	00bfe034 	movhi	r2,65408
81124d50:	10bfffc4 	addi	r2,r2,-1
81124d54:	2021883a 	mov	r16,r4
81124d58:	4090703a 	and	r8,r8,r2
81124d5c:	003eb306 	br	8112482c <__reset+0xfb10482c>
81124d60:	4444b03a 	or	r2,r8,r17
81124d64:	8000291e 	bne	r16,zero,81124e0c <__adddf3+0x664>
81124d68:	10004b1e 	bne	r2,zero,81124e98 <__adddf3+0x6f0>
81124d6c:	4990b03a 	or	r8,r9,r6
81124d70:	40008b26 	beq	r8,zero,81124fa0 <__adddf3+0x7f8>
81124d74:	4811883a 	mov	r8,r9
81124d78:	3023883a 	mov	r17,r6
81124d7c:	3825883a 	mov	r18,r7
81124d80:	003eaa06 	br	8112482c <__reset+0xfb10482c>
81124d84:	1021883a 	mov	r16,r2
81124d88:	0011883a 	mov	r8,zero
81124d8c:	0005883a 	mov	r2,zero
81124d90:	003f0f06 	br	811249d0 <__reset+0xfb1049d0>
81124d94:	217ff804 	addi	r5,r4,-32
81124d98:	00800804 	movi	r2,32
81124d9c:	494ad83a 	srl	r5,r9,r5
81124da0:	20807d26 	beq	r4,r2,81124f98 <__adddf3+0x7f0>
81124da4:	00801004 	movi	r2,64
81124da8:	1109c83a 	sub	r4,r2,r4
81124dac:	4912983a 	sll	r9,r9,r4
81124db0:	498cb03a 	or	r6,r9,r6
81124db4:	300cc03a 	cmpne	r6,r6,zero
81124db8:	298ab03a 	or	r5,r5,r6
81124dbc:	0013883a 	mov	r9,zero
81124dc0:	003f1506 	br	81124a18 <__reset+0xfb104a18>
81124dc4:	0101ffc4 	movi	r4,2047
81124dc8:	113f9a1e 	bne	r2,r4,81124c34 <__reset+0xfb104c34>
81124dcc:	4811883a 	mov	r8,r9
81124dd0:	3023883a 	mov	r17,r6
81124dd4:	1021883a 	mov	r16,r2
81124dd8:	3825883a 	mov	r18,r7
81124ddc:	003e9306 	br	8112482c <__reset+0xfb10482c>
81124de0:	8000161e 	bne	r16,zero,81124e3c <__adddf3+0x694>
81124de4:	444ab03a 	or	r5,r8,r17
81124de8:	28005126 	beq	r5,zero,81124f30 <__adddf3+0x788>
81124dec:	0108303a 	nor	r4,zero,r4
81124df0:	20004d1e 	bne	r4,zero,81124f28 <__adddf3+0x780>
81124df4:	89a3883a 	add	r17,r17,r6
81124df8:	4253883a 	add	r9,r8,r9
81124dfc:	898d803a 	cmpltu	r6,r17,r6
81124e00:	3251883a 	add	r8,r6,r9
81124e04:	1021883a 	mov	r16,r2
81124e08:	003f0806 	br	81124a2c <__reset+0xfb104a2c>
81124e0c:	1000301e 	bne	r2,zero,81124ed0 <__adddf3+0x728>
81124e10:	4984b03a 	or	r2,r9,r6
81124e14:	10007126 	beq	r2,zero,81124fdc <__adddf3+0x834>
81124e18:	4811883a 	mov	r8,r9
81124e1c:	3023883a 	mov	r17,r6
81124e20:	3825883a 	mov	r18,r7
81124e24:	0401ffc4 	movi	r16,2047
81124e28:	003e8006 	br	8112482c <__reset+0xfb10482c>
81124e2c:	4462b03a 	or	r17,r8,r17
81124e30:	8822c03a 	cmpne	r17,r17,zero
81124e34:	0007883a 	mov	r3,zero
81124e38:	003f8b06 	br	81124c68 <__reset+0xfb104c68>
81124e3c:	0141ffc4 	movi	r5,2047
81124e40:	11403b26 	beq	r2,r5,81124f30 <__adddf3+0x788>
81124e44:	0109c83a 	sub	r4,zero,r4
81124e48:	42002034 	orhi	r8,r8,128
81124e4c:	01400e04 	movi	r5,56
81124e50:	29006716 	blt	r5,r4,81124ff0 <__adddf3+0x848>
81124e54:	014007c4 	movi	r5,31
81124e58:	29007016 	blt	r5,r4,8112501c <__adddf3+0x874>
81124e5c:	01400804 	movi	r5,32
81124e60:	290bc83a 	sub	r5,r5,r4
81124e64:	4154983a 	sll	r10,r8,r5
81124e68:	890ed83a 	srl	r7,r17,r4
81124e6c:	894a983a 	sll	r5,r17,r5
81124e70:	4108d83a 	srl	r4,r8,r4
81124e74:	51e2b03a 	or	r17,r10,r7
81124e78:	280ac03a 	cmpne	r5,r5,zero
81124e7c:	8962b03a 	or	r17,r17,r5
81124e80:	89a3883a 	add	r17,r17,r6
81124e84:	2253883a 	add	r9,r4,r9
81124e88:	898d803a 	cmpltu	r6,r17,r6
81124e8c:	3251883a 	add	r8,r6,r9
81124e90:	1021883a 	mov	r16,r2
81124e94:	003ee506 	br	81124a2c <__reset+0xfb104a2c>
81124e98:	4984b03a 	or	r2,r9,r6
81124e9c:	103e6326 	beq	r2,zero,8112482c <__reset+0xfb10482c>
81124ea0:	8987c83a 	sub	r3,r17,r6
81124ea4:	88c9803a 	cmpltu	r4,r17,r3
81124ea8:	4245c83a 	sub	r2,r8,r9
81124eac:	1105c83a 	sub	r2,r2,r4
81124eb0:	1100202c 	andhi	r4,r2,128
81124eb4:	203ebb26 	beq	r4,zero,811249a4 <__reset+0xfb1049a4>
81124eb8:	3463c83a 	sub	r17,r6,r17
81124ebc:	4a07c83a 	sub	r3,r9,r8
81124ec0:	344d803a 	cmpltu	r6,r6,r17
81124ec4:	1991c83a 	sub	r8,r3,r6
81124ec8:	3825883a 	mov	r18,r7
81124ecc:	003e5706 	br	8112482c <__reset+0xfb10482c>
81124ed0:	4984b03a 	or	r2,r9,r6
81124ed4:	10002e26 	beq	r2,zero,81124f90 <__adddf3+0x7e8>
81124ed8:	4004d0fa 	srli	r2,r8,3
81124edc:	8822d0fa 	srli	r17,r17,3
81124ee0:	4010977a 	slli	r8,r8,29
81124ee4:	10c0022c 	andhi	r3,r2,8
81124ee8:	4462b03a 	or	r17,r8,r17
81124eec:	18000826 	beq	r3,zero,81124f10 <__adddf3+0x768>
81124ef0:	4808d0fa 	srli	r4,r9,3
81124ef4:	20c0022c 	andhi	r3,r4,8
81124ef8:	1800051e 	bne	r3,zero,81124f10 <__adddf3+0x768>
81124efc:	300cd0fa 	srli	r6,r6,3
81124f00:	4806977a 	slli	r3,r9,29
81124f04:	2005883a 	mov	r2,r4
81124f08:	3825883a 	mov	r18,r7
81124f0c:	19a2b03a 	or	r17,r3,r6
81124f10:	8810d77a 	srli	r8,r17,29
81124f14:	100490fa 	slli	r2,r2,3
81124f18:	882290fa 	slli	r17,r17,3
81124f1c:	0401ffc4 	movi	r16,2047
81124f20:	4090b03a 	or	r8,r8,r2
81124f24:	003e4106 	br	8112482c <__reset+0xfb10482c>
81124f28:	0141ffc4 	movi	r5,2047
81124f2c:	117fc71e 	bne	r2,r5,81124e4c <__reset+0xfb104e4c>
81124f30:	4811883a 	mov	r8,r9
81124f34:	3023883a 	mov	r17,r6
81124f38:	1021883a 	mov	r16,r2
81124f3c:	003e3b06 	br	8112482c <__reset+0xfb10482c>
81124f40:	10002f26 	beq	r2,zero,81125000 <__adddf3+0x858>
81124f44:	4984b03a 	or	r2,r9,r6
81124f48:	10001126 	beq	r2,zero,81124f90 <__adddf3+0x7e8>
81124f4c:	4004d0fa 	srli	r2,r8,3
81124f50:	8822d0fa 	srli	r17,r17,3
81124f54:	4010977a 	slli	r8,r8,29
81124f58:	10c0022c 	andhi	r3,r2,8
81124f5c:	4462b03a 	or	r17,r8,r17
81124f60:	183feb26 	beq	r3,zero,81124f10 <__reset+0xfb104f10>
81124f64:	4808d0fa 	srli	r4,r9,3
81124f68:	20c0022c 	andhi	r3,r4,8
81124f6c:	183fe81e 	bne	r3,zero,81124f10 <__reset+0xfb104f10>
81124f70:	300cd0fa 	srli	r6,r6,3
81124f74:	4806977a 	slli	r3,r9,29
81124f78:	2005883a 	mov	r2,r4
81124f7c:	19a2b03a 	or	r17,r3,r6
81124f80:	003fe306 	br	81124f10 <__reset+0xfb104f10>
81124f84:	0011883a 	mov	r8,zero
81124f88:	0005883a 	mov	r2,zero
81124f8c:	003e3f06 	br	8112488c <__reset+0xfb10488c>
81124f90:	0401ffc4 	movi	r16,2047
81124f94:	003e2506 	br	8112482c <__reset+0xfb10482c>
81124f98:	0013883a 	mov	r9,zero
81124f9c:	003f8406 	br	81124db0 <__reset+0xfb104db0>
81124fa0:	0005883a 	mov	r2,zero
81124fa4:	0007883a 	mov	r3,zero
81124fa8:	003e8906 	br	811249d0 <__reset+0xfb1049d0>
81124fac:	197ff804 	addi	r5,r3,-32
81124fb0:	01000804 	movi	r4,32
81124fb4:	414ad83a 	srl	r5,r8,r5
81124fb8:	19002426 	beq	r3,r4,8112504c <__adddf3+0x8a4>
81124fbc:	01001004 	movi	r4,64
81124fc0:	20c7c83a 	sub	r3,r4,r3
81124fc4:	40c6983a 	sll	r3,r8,r3
81124fc8:	1c46b03a 	or	r3,r3,r17
81124fcc:	1806c03a 	cmpne	r3,r3,zero
81124fd0:	28e2b03a 	or	r17,r5,r3
81124fd4:	0007883a 	mov	r3,zero
81124fd8:	003f2306 	br	81124c68 <__reset+0xfb104c68>
81124fdc:	0007883a 	mov	r3,zero
81124fe0:	5811883a 	mov	r8,r11
81124fe4:	00bfffc4 	movi	r2,-1
81124fe8:	0401ffc4 	movi	r16,2047
81124fec:	003e7806 	br	811249d0 <__reset+0xfb1049d0>
81124ff0:	4462b03a 	or	r17,r8,r17
81124ff4:	8822c03a 	cmpne	r17,r17,zero
81124ff8:	0009883a 	mov	r4,zero
81124ffc:	003fa006 	br	81124e80 <__reset+0xfb104e80>
81125000:	4811883a 	mov	r8,r9
81125004:	3023883a 	mov	r17,r6
81125008:	0401ffc4 	movi	r16,2047
8112500c:	003e0706 	br	8112482c <__reset+0xfb10482c>
81125010:	4811883a 	mov	r8,r9
81125014:	3023883a 	mov	r17,r6
81125018:	003e0406 	br	8112482c <__reset+0xfb10482c>
8112501c:	21fff804 	addi	r7,r4,-32
81125020:	01400804 	movi	r5,32
81125024:	41ced83a 	srl	r7,r8,r7
81125028:	21400a26 	beq	r4,r5,81125054 <__adddf3+0x8ac>
8112502c:	01401004 	movi	r5,64
81125030:	2909c83a 	sub	r4,r5,r4
81125034:	4108983a 	sll	r4,r8,r4
81125038:	2448b03a 	or	r4,r4,r17
8112503c:	2008c03a 	cmpne	r4,r4,zero
81125040:	3922b03a 	or	r17,r7,r4
81125044:	0009883a 	mov	r4,zero
81125048:	003f8d06 	br	81124e80 <__reset+0xfb104e80>
8112504c:	0007883a 	mov	r3,zero
81125050:	003fdd06 	br	81124fc8 <__reset+0xfb104fc8>
81125054:	0009883a 	mov	r4,zero
81125058:	003ff706 	br	81125038 <__reset+0xfb105038>

8112505c <__divdf3>:
8112505c:	defff204 	addi	sp,sp,-56
81125060:	de00012e 	bgeu	sp,et,81125068 <__divdf3+0xc>
81125064:	003b68fa 	trap	3
81125068:	dd400915 	stw	r21,36(sp)
8112506c:	282ad53a 	srli	r21,r5,20
81125070:	dd000815 	stw	r20,32(sp)
81125074:	2828d7fa 	srli	r20,r5,31
81125078:	dc000415 	stw	r16,16(sp)
8112507c:	04000434 	movhi	r16,16
81125080:	df000c15 	stw	fp,48(sp)
81125084:	843fffc4 	addi	r16,r16,-1
81125088:	dfc00d15 	stw	ra,52(sp)
8112508c:	ddc00b15 	stw	r23,44(sp)
81125090:	dd800a15 	stw	r22,40(sp)
81125094:	dcc00715 	stw	r19,28(sp)
81125098:	dc800615 	stw	r18,24(sp)
8112509c:	dc400515 	stw	r17,20(sp)
811250a0:	ad41ffcc 	andi	r21,r21,2047
811250a4:	2c20703a 	and	r16,r5,r16
811250a8:	a7003fcc 	andi	fp,r20,255
811250ac:	a8006126 	beq	r21,zero,81125234 <__divdf3+0x1d8>
811250b0:	0081ffc4 	movi	r2,2047
811250b4:	2025883a 	mov	r18,r4
811250b8:	a8803726 	beq	r21,r2,81125198 <__divdf3+0x13c>
811250bc:	80800434 	orhi	r2,r16,16
811250c0:	100490fa 	slli	r2,r2,3
811250c4:	2020d77a 	srli	r16,r4,29
811250c8:	202490fa 	slli	r18,r4,3
811250cc:	ad7f0044 	addi	r21,r21,-1023
811250d0:	80a0b03a 	or	r16,r16,r2
811250d4:	0027883a 	mov	r19,zero
811250d8:	0013883a 	mov	r9,zero
811250dc:	3804d53a 	srli	r2,r7,20
811250e0:	382cd7fa 	srli	r22,r7,31
811250e4:	04400434 	movhi	r17,16
811250e8:	8c7fffc4 	addi	r17,r17,-1
811250ec:	1081ffcc 	andi	r2,r2,2047
811250f0:	3011883a 	mov	r8,r6
811250f4:	3c62703a 	and	r17,r7,r17
811250f8:	b5c03fcc 	andi	r23,r22,255
811250fc:	10006c26 	beq	r2,zero,811252b0 <__divdf3+0x254>
81125100:	00c1ffc4 	movi	r3,2047
81125104:	10c06426 	beq	r2,r3,81125298 <__divdf3+0x23c>
81125108:	88c00434 	orhi	r3,r17,16
8112510c:	180690fa 	slli	r3,r3,3
81125110:	3022d77a 	srli	r17,r6,29
81125114:	301090fa 	slli	r8,r6,3
81125118:	10bf0044 	addi	r2,r2,-1023
8112511c:	88e2b03a 	or	r17,r17,r3
81125120:	000f883a 	mov	r7,zero
81125124:	a58cf03a 	xor	r6,r20,r22
81125128:	3cc8b03a 	or	r4,r7,r19
8112512c:	a8abc83a 	sub	r21,r21,r2
81125130:	008003c4 	movi	r2,15
81125134:	3007883a 	mov	r3,r6
81125138:	34c03fcc 	andi	r19,r6,255
8112513c:	11009036 	bltu	r2,r4,81125380 <__divdf3+0x324>
81125140:	200890ba 	slli	r4,r4,2
81125144:	00a044b4 	movhi	r2,33042
81125148:	10945604 	addi	r2,r2,20824
8112514c:	2089883a 	add	r4,r4,r2
81125150:	20800017 	ldw	r2,0(r4)
81125154:	1000683a 	jmp	r2
81125158:	81125380 	call	88112538 <__reset+0x20f2538>
8112515c:	811251d0 	cmplti	r4,r16,18759
81125160:	81125370 	cmpltui	r4,r16,18765
81125164:	811251c4 	addi	r4,r16,18759
81125168:	81125370 	cmpltui	r4,r16,18765
8112516c:	81125344 	addi	r4,r16,18765
81125170:	81125370 	cmpltui	r4,r16,18765
81125174:	811251c4 	addi	r4,r16,18759
81125178:	811251d0 	cmplti	r4,r16,18759
8112517c:	811251d0 	cmplti	r4,r16,18759
81125180:	81125344 	addi	r4,r16,18765
81125184:	811251c4 	addi	r4,r16,18759
81125188:	811251b4 	orhi	r4,r16,18758
8112518c:	811251b4 	orhi	r4,r16,18758
81125190:	811251b4 	orhi	r4,r16,18758
81125194:	81125664 	muli	r4,r16,18777
81125198:	2404b03a 	or	r2,r4,r16
8112519c:	1000661e 	bne	r2,zero,81125338 <__divdf3+0x2dc>
811251a0:	04c00204 	movi	r19,8
811251a4:	0021883a 	mov	r16,zero
811251a8:	0025883a 	mov	r18,zero
811251ac:	02400084 	movi	r9,2
811251b0:	003fca06 	br	811250dc <__reset+0xfb1050dc>
811251b4:	8023883a 	mov	r17,r16
811251b8:	9011883a 	mov	r8,r18
811251bc:	e02f883a 	mov	r23,fp
811251c0:	480f883a 	mov	r7,r9
811251c4:	00800084 	movi	r2,2
811251c8:	3881311e 	bne	r7,r2,81125690 <__divdf3+0x634>
811251cc:	b827883a 	mov	r19,r23
811251d0:	98c0004c 	andi	r3,r19,1
811251d4:	0081ffc4 	movi	r2,2047
811251d8:	000b883a 	mov	r5,zero
811251dc:	0025883a 	mov	r18,zero
811251e0:	1004953a 	slli	r2,r2,20
811251e4:	18c03fcc 	andi	r3,r3,255
811251e8:	04400434 	movhi	r17,16
811251ec:	8c7fffc4 	addi	r17,r17,-1
811251f0:	180697fa 	slli	r3,r3,31
811251f4:	2c4a703a 	and	r5,r5,r17
811251f8:	288ab03a 	or	r5,r5,r2
811251fc:	28c6b03a 	or	r3,r5,r3
81125200:	9005883a 	mov	r2,r18
81125204:	dfc00d17 	ldw	ra,52(sp)
81125208:	df000c17 	ldw	fp,48(sp)
8112520c:	ddc00b17 	ldw	r23,44(sp)
81125210:	dd800a17 	ldw	r22,40(sp)
81125214:	dd400917 	ldw	r21,36(sp)
81125218:	dd000817 	ldw	r20,32(sp)
8112521c:	dcc00717 	ldw	r19,28(sp)
81125220:	dc800617 	ldw	r18,24(sp)
81125224:	dc400517 	ldw	r17,20(sp)
81125228:	dc000417 	ldw	r16,16(sp)
8112522c:	dec00e04 	addi	sp,sp,56
81125230:	f800283a 	ret
81125234:	2404b03a 	or	r2,r4,r16
81125238:	2027883a 	mov	r19,r4
8112523c:	10003926 	beq	r2,zero,81125324 <__divdf3+0x2c8>
81125240:	80012e26 	beq	r16,zero,811256fc <__divdf3+0x6a0>
81125244:	8009883a 	mov	r4,r16
81125248:	d9800315 	stw	r6,12(sp)
8112524c:	d9c00215 	stw	r7,8(sp)
81125250:	1110f040 	call	81110f04 <__clzsi2>
81125254:	d9800317 	ldw	r6,12(sp)
81125258:	d9c00217 	ldw	r7,8(sp)
8112525c:	113ffd44 	addi	r4,r2,-11
81125260:	00c00704 	movi	r3,28
81125264:	19012116 	blt	r3,r4,811256ec <__divdf3+0x690>
81125268:	00c00744 	movi	r3,29
8112526c:	147ffe04 	addi	r17,r2,-8
81125270:	1907c83a 	sub	r3,r3,r4
81125274:	8460983a 	sll	r16,r16,r17
81125278:	98c6d83a 	srl	r3,r19,r3
8112527c:	9c64983a 	sll	r18,r19,r17
81125280:	1c20b03a 	or	r16,r3,r16
81125284:	1080fcc4 	addi	r2,r2,1011
81125288:	00abc83a 	sub	r21,zero,r2
8112528c:	0027883a 	mov	r19,zero
81125290:	0013883a 	mov	r9,zero
81125294:	003f9106 	br	811250dc <__reset+0xfb1050dc>
81125298:	3446b03a 	or	r3,r6,r17
8112529c:	18001f1e 	bne	r3,zero,8112531c <__divdf3+0x2c0>
811252a0:	0023883a 	mov	r17,zero
811252a4:	0011883a 	mov	r8,zero
811252a8:	01c00084 	movi	r7,2
811252ac:	003f9d06 	br	81125124 <__reset+0xfb105124>
811252b0:	3446b03a 	or	r3,r6,r17
811252b4:	18001526 	beq	r3,zero,8112530c <__divdf3+0x2b0>
811252b8:	88011b26 	beq	r17,zero,81125728 <__divdf3+0x6cc>
811252bc:	8809883a 	mov	r4,r17
811252c0:	d9800315 	stw	r6,12(sp)
811252c4:	da400115 	stw	r9,4(sp)
811252c8:	1110f040 	call	81110f04 <__clzsi2>
811252cc:	d9800317 	ldw	r6,12(sp)
811252d0:	da400117 	ldw	r9,4(sp)
811252d4:	113ffd44 	addi	r4,r2,-11
811252d8:	00c00704 	movi	r3,28
811252dc:	19010e16 	blt	r3,r4,81125718 <__divdf3+0x6bc>
811252e0:	00c00744 	movi	r3,29
811252e4:	123ffe04 	addi	r8,r2,-8
811252e8:	1907c83a 	sub	r3,r3,r4
811252ec:	8a22983a 	sll	r17,r17,r8
811252f0:	30c6d83a 	srl	r3,r6,r3
811252f4:	3210983a 	sll	r8,r6,r8
811252f8:	1c62b03a 	or	r17,r3,r17
811252fc:	1080fcc4 	addi	r2,r2,1011
81125300:	0085c83a 	sub	r2,zero,r2
81125304:	000f883a 	mov	r7,zero
81125308:	003f8606 	br	81125124 <__reset+0xfb105124>
8112530c:	0023883a 	mov	r17,zero
81125310:	0011883a 	mov	r8,zero
81125314:	01c00044 	movi	r7,1
81125318:	003f8206 	br	81125124 <__reset+0xfb105124>
8112531c:	01c000c4 	movi	r7,3
81125320:	003f8006 	br	81125124 <__reset+0xfb105124>
81125324:	04c00104 	movi	r19,4
81125328:	0021883a 	mov	r16,zero
8112532c:	0025883a 	mov	r18,zero
81125330:	02400044 	movi	r9,1
81125334:	003f6906 	br	811250dc <__reset+0xfb1050dc>
81125338:	04c00304 	movi	r19,12
8112533c:	024000c4 	movi	r9,3
81125340:	003f6606 	br	811250dc <__reset+0xfb1050dc>
81125344:	01400434 	movhi	r5,16
81125348:	0007883a 	mov	r3,zero
8112534c:	297fffc4 	addi	r5,r5,-1
81125350:	04bfffc4 	movi	r18,-1
81125354:	0081ffc4 	movi	r2,2047
81125358:	003fa106 	br	811251e0 <__reset+0xfb1051e0>
8112535c:	00c00044 	movi	r3,1
81125360:	1887c83a 	sub	r3,r3,r2
81125364:	01000e04 	movi	r4,56
81125368:	20c1210e 	bge	r4,r3,811257f0 <__divdf3+0x794>
8112536c:	98c0004c 	andi	r3,r19,1
81125370:	0005883a 	mov	r2,zero
81125374:	000b883a 	mov	r5,zero
81125378:	0025883a 	mov	r18,zero
8112537c:	003f9806 	br	811251e0 <__reset+0xfb1051e0>
81125380:	8c00fd36 	bltu	r17,r16,81125778 <__divdf3+0x71c>
81125384:	8440fb26 	beq	r16,r17,81125774 <__divdf3+0x718>
81125388:	8007883a 	mov	r3,r16
8112538c:	ad7fffc4 	addi	r21,r21,-1
81125390:	0021883a 	mov	r16,zero
81125394:	4004d63a 	srli	r2,r8,24
81125398:	8822923a 	slli	r17,r17,8
8112539c:	1809883a 	mov	r4,r3
811253a0:	402c923a 	slli	r22,r8,8
811253a4:	88b8b03a 	or	fp,r17,r2
811253a8:	e028d43a 	srli	r20,fp,16
811253ac:	d8c00015 	stw	r3,0(sp)
811253b0:	e5ffffcc 	andi	r23,fp,65535
811253b4:	a00b883a 	mov	r5,r20
811253b8:	11244f00 	call	811244f0 <__udivsi3>
811253bc:	d8c00017 	ldw	r3,0(sp)
811253c0:	a00b883a 	mov	r5,r20
811253c4:	d8800315 	stw	r2,12(sp)
811253c8:	1809883a 	mov	r4,r3
811253cc:	11245540 	call	81124554 <__umodsi3>
811253d0:	d9800317 	ldw	r6,12(sp)
811253d4:	1006943a 	slli	r3,r2,16
811253d8:	9004d43a 	srli	r2,r18,16
811253dc:	b9a3383a 	mul	r17,r23,r6
811253e0:	10c4b03a 	or	r2,r2,r3
811253e4:	1440062e 	bgeu	r2,r17,81125400 <__divdf3+0x3a4>
811253e8:	1705883a 	add	r2,r2,fp
811253ec:	30ffffc4 	addi	r3,r6,-1
811253f0:	1700ee36 	bltu	r2,fp,811257ac <__divdf3+0x750>
811253f4:	1440ed2e 	bgeu	r2,r17,811257ac <__divdf3+0x750>
811253f8:	31bfff84 	addi	r6,r6,-2
811253fc:	1705883a 	add	r2,r2,fp
81125400:	1463c83a 	sub	r17,r2,r17
81125404:	a00b883a 	mov	r5,r20
81125408:	8809883a 	mov	r4,r17
8112540c:	d9800315 	stw	r6,12(sp)
81125410:	11244f00 	call	811244f0 <__udivsi3>
81125414:	a00b883a 	mov	r5,r20
81125418:	8809883a 	mov	r4,r17
8112541c:	d8800215 	stw	r2,8(sp)
81125420:	11245540 	call	81124554 <__umodsi3>
81125424:	d9c00217 	ldw	r7,8(sp)
81125428:	1004943a 	slli	r2,r2,16
8112542c:	94bfffcc 	andi	r18,r18,65535
81125430:	b9d1383a 	mul	r8,r23,r7
81125434:	90a4b03a 	or	r18,r18,r2
81125438:	d9800317 	ldw	r6,12(sp)
8112543c:	9200062e 	bgeu	r18,r8,81125458 <__divdf3+0x3fc>
81125440:	9725883a 	add	r18,r18,fp
81125444:	38bfffc4 	addi	r2,r7,-1
81125448:	9700d636 	bltu	r18,fp,811257a4 <__divdf3+0x748>
8112544c:	9200d52e 	bgeu	r18,r8,811257a4 <__divdf3+0x748>
81125450:	39ffff84 	addi	r7,r7,-2
81125454:	9725883a 	add	r18,r18,fp
81125458:	3004943a 	slli	r2,r6,16
8112545c:	b012d43a 	srli	r9,r22,16
81125460:	b1bfffcc 	andi	r6,r22,65535
81125464:	11e2b03a 	or	r17,r2,r7
81125468:	8806d43a 	srli	r3,r17,16
8112546c:	893fffcc 	andi	r4,r17,65535
81125470:	218b383a 	mul	r5,r4,r6
81125474:	30c5383a 	mul	r2,r6,r3
81125478:	2249383a 	mul	r4,r4,r9
8112547c:	280ed43a 	srli	r7,r5,16
81125480:	9225c83a 	sub	r18,r18,r8
81125484:	2089883a 	add	r4,r4,r2
81125488:	3909883a 	add	r4,r7,r4
8112548c:	1a47383a 	mul	r3,r3,r9
81125490:	2080022e 	bgeu	r4,r2,8112549c <__divdf3+0x440>
81125494:	00800074 	movhi	r2,1
81125498:	1887883a 	add	r3,r3,r2
8112549c:	2004d43a 	srli	r2,r4,16
811254a0:	2008943a 	slli	r4,r4,16
811254a4:	297fffcc 	andi	r5,r5,65535
811254a8:	10c7883a 	add	r3,r2,r3
811254ac:	2149883a 	add	r4,r4,r5
811254b0:	90c0a536 	bltu	r18,r3,81125748 <__divdf3+0x6ec>
811254b4:	90c0bf26 	beq	r18,r3,811257b4 <__divdf3+0x758>
811254b8:	90c7c83a 	sub	r3,r18,r3
811254bc:	810fc83a 	sub	r7,r16,r4
811254c0:	81e5803a 	cmpltu	r18,r16,r7
811254c4:	1ca5c83a 	sub	r18,r3,r18
811254c8:	e480c126 	beq	fp,r18,811257d0 <__divdf3+0x774>
811254cc:	a00b883a 	mov	r5,r20
811254d0:	9009883a 	mov	r4,r18
811254d4:	d9800315 	stw	r6,12(sp)
811254d8:	d9c00215 	stw	r7,8(sp)
811254dc:	da400115 	stw	r9,4(sp)
811254e0:	11244f00 	call	811244f0 <__udivsi3>
811254e4:	a00b883a 	mov	r5,r20
811254e8:	9009883a 	mov	r4,r18
811254ec:	d8800015 	stw	r2,0(sp)
811254f0:	11245540 	call	81124554 <__umodsi3>
811254f4:	d9c00217 	ldw	r7,8(sp)
811254f8:	da000017 	ldw	r8,0(sp)
811254fc:	1006943a 	slli	r3,r2,16
81125500:	3804d43a 	srli	r2,r7,16
81125504:	ba21383a 	mul	r16,r23,r8
81125508:	d9800317 	ldw	r6,12(sp)
8112550c:	10c4b03a 	or	r2,r2,r3
81125510:	da400117 	ldw	r9,4(sp)
81125514:	1400062e 	bgeu	r2,r16,81125530 <__divdf3+0x4d4>
81125518:	1705883a 	add	r2,r2,fp
8112551c:	40ffffc4 	addi	r3,r8,-1
81125520:	1700ad36 	bltu	r2,fp,811257d8 <__divdf3+0x77c>
81125524:	1400ac2e 	bgeu	r2,r16,811257d8 <__divdf3+0x77c>
81125528:	423fff84 	addi	r8,r8,-2
8112552c:	1705883a 	add	r2,r2,fp
81125530:	1421c83a 	sub	r16,r2,r16
81125534:	a00b883a 	mov	r5,r20
81125538:	8009883a 	mov	r4,r16
8112553c:	d9800315 	stw	r6,12(sp)
81125540:	d9c00215 	stw	r7,8(sp)
81125544:	da000015 	stw	r8,0(sp)
81125548:	da400115 	stw	r9,4(sp)
8112554c:	11244f00 	call	811244f0 <__udivsi3>
81125550:	8009883a 	mov	r4,r16
81125554:	a00b883a 	mov	r5,r20
81125558:	1025883a 	mov	r18,r2
8112555c:	11245540 	call	81124554 <__umodsi3>
81125560:	d9c00217 	ldw	r7,8(sp)
81125564:	1004943a 	slli	r2,r2,16
81125568:	bcaf383a 	mul	r23,r23,r18
8112556c:	393fffcc 	andi	r4,r7,65535
81125570:	2088b03a 	or	r4,r4,r2
81125574:	d9800317 	ldw	r6,12(sp)
81125578:	da000017 	ldw	r8,0(sp)
8112557c:	da400117 	ldw	r9,4(sp)
81125580:	25c0062e 	bgeu	r4,r23,8112559c <__divdf3+0x540>
81125584:	2709883a 	add	r4,r4,fp
81125588:	90bfffc4 	addi	r2,r18,-1
8112558c:	27009436 	bltu	r4,fp,811257e0 <__divdf3+0x784>
81125590:	25c0932e 	bgeu	r4,r23,811257e0 <__divdf3+0x784>
81125594:	94bfff84 	addi	r18,r18,-2
81125598:	2709883a 	add	r4,r4,fp
8112559c:	4004943a 	slli	r2,r8,16
811255a0:	25efc83a 	sub	r23,r4,r23
811255a4:	1490b03a 	or	r8,r2,r18
811255a8:	4008d43a 	srli	r4,r8,16
811255ac:	40ffffcc 	andi	r3,r8,65535
811255b0:	30c5383a 	mul	r2,r6,r3
811255b4:	1a47383a 	mul	r3,r3,r9
811255b8:	310d383a 	mul	r6,r6,r4
811255bc:	100ad43a 	srli	r5,r2,16
811255c0:	4913383a 	mul	r9,r9,r4
811255c4:	1987883a 	add	r3,r3,r6
811255c8:	28c7883a 	add	r3,r5,r3
811255cc:	1980022e 	bgeu	r3,r6,811255d8 <__divdf3+0x57c>
811255d0:	01000074 	movhi	r4,1
811255d4:	4913883a 	add	r9,r9,r4
811255d8:	1808d43a 	srli	r4,r3,16
811255dc:	1806943a 	slli	r3,r3,16
811255e0:	10bfffcc 	andi	r2,r2,65535
811255e4:	2253883a 	add	r9,r4,r9
811255e8:	1887883a 	add	r3,r3,r2
811255ec:	ba403836 	bltu	r23,r9,811256d0 <__divdf3+0x674>
811255f0:	ba403626 	beq	r23,r9,811256cc <__divdf3+0x670>
811255f4:	42000054 	ori	r8,r8,1
811255f8:	a880ffc4 	addi	r2,r21,1023
811255fc:	00bf570e 	bge	zero,r2,8112535c <__reset+0xfb10535c>
81125600:	40c001cc 	andi	r3,r8,7
81125604:	18000726 	beq	r3,zero,81125624 <__divdf3+0x5c8>
81125608:	40c003cc 	andi	r3,r8,15
8112560c:	01000104 	movi	r4,4
81125610:	19000426 	beq	r3,r4,81125624 <__divdf3+0x5c8>
81125614:	4107883a 	add	r3,r8,r4
81125618:	1a11803a 	cmpltu	r8,r3,r8
8112561c:	8a23883a 	add	r17,r17,r8
81125620:	1811883a 	mov	r8,r3
81125624:	88c0402c 	andhi	r3,r17,256
81125628:	18000426 	beq	r3,zero,8112563c <__divdf3+0x5e0>
8112562c:	00ffc034 	movhi	r3,65280
81125630:	18ffffc4 	addi	r3,r3,-1
81125634:	a8810004 	addi	r2,r21,1024
81125638:	88e2703a 	and	r17,r17,r3
8112563c:	00c1ff84 	movi	r3,2046
81125640:	18bee316 	blt	r3,r2,811251d0 <__reset+0xfb1051d0>
81125644:	8824977a 	slli	r18,r17,29
81125648:	4010d0fa 	srli	r8,r8,3
8112564c:	8822927a 	slli	r17,r17,9
81125650:	1081ffcc 	andi	r2,r2,2047
81125654:	9224b03a 	or	r18,r18,r8
81125658:	880ad33a 	srli	r5,r17,12
8112565c:	98c0004c 	andi	r3,r19,1
81125660:	003edf06 	br	811251e0 <__reset+0xfb1051e0>
81125664:	8080022c 	andhi	r2,r16,8
81125668:	10001226 	beq	r2,zero,811256b4 <__divdf3+0x658>
8112566c:	8880022c 	andhi	r2,r17,8
81125670:	1000101e 	bne	r2,zero,811256b4 <__divdf3+0x658>
81125674:	00800434 	movhi	r2,16
81125678:	89400234 	orhi	r5,r17,8
8112567c:	10bfffc4 	addi	r2,r2,-1
81125680:	b007883a 	mov	r3,r22
81125684:	288a703a 	and	r5,r5,r2
81125688:	4025883a 	mov	r18,r8
8112568c:	003f3106 	br	81125354 <__reset+0xfb105354>
81125690:	008000c4 	movi	r2,3
81125694:	3880a626 	beq	r7,r2,81125930 <__divdf3+0x8d4>
81125698:	00800044 	movi	r2,1
8112569c:	3880521e 	bne	r7,r2,811257e8 <__divdf3+0x78c>
811256a0:	b807883a 	mov	r3,r23
811256a4:	0005883a 	mov	r2,zero
811256a8:	000b883a 	mov	r5,zero
811256ac:	0025883a 	mov	r18,zero
811256b0:	003ecb06 	br	811251e0 <__reset+0xfb1051e0>
811256b4:	00800434 	movhi	r2,16
811256b8:	81400234 	orhi	r5,r16,8
811256bc:	10bfffc4 	addi	r2,r2,-1
811256c0:	a007883a 	mov	r3,r20
811256c4:	288a703a 	and	r5,r5,r2
811256c8:	003f2206 	br	81125354 <__reset+0xfb105354>
811256cc:	183fca26 	beq	r3,zero,811255f8 <__reset+0xfb1055f8>
811256d0:	e5ef883a 	add	r23,fp,r23
811256d4:	40bfffc4 	addi	r2,r8,-1
811256d8:	bf00392e 	bgeu	r23,fp,811257c0 <__divdf3+0x764>
811256dc:	1011883a 	mov	r8,r2
811256e0:	ba7fc41e 	bne	r23,r9,811255f4 <__reset+0xfb1055f4>
811256e4:	b0ffc31e 	bne	r22,r3,811255f4 <__reset+0xfb1055f4>
811256e8:	003fc306 	br	811255f8 <__reset+0xfb1055f8>
811256ec:	143ff604 	addi	r16,r2,-40
811256f0:	9c20983a 	sll	r16,r19,r16
811256f4:	0025883a 	mov	r18,zero
811256f8:	003ee206 	br	81125284 <__reset+0xfb105284>
811256fc:	d9800315 	stw	r6,12(sp)
81125700:	d9c00215 	stw	r7,8(sp)
81125704:	1110f040 	call	81110f04 <__clzsi2>
81125708:	10800804 	addi	r2,r2,32
8112570c:	d9c00217 	ldw	r7,8(sp)
81125710:	d9800317 	ldw	r6,12(sp)
81125714:	003ed106 	br	8112525c <__reset+0xfb10525c>
81125718:	147ff604 	addi	r17,r2,-40
8112571c:	3462983a 	sll	r17,r6,r17
81125720:	0011883a 	mov	r8,zero
81125724:	003ef506 	br	811252fc <__reset+0xfb1052fc>
81125728:	3009883a 	mov	r4,r6
8112572c:	d9800315 	stw	r6,12(sp)
81125730:	da400115 	stw	r9,4(sp)
81125734:	1110f040 	call	81110f04 <__clzsi2>
81125738:	10800804 	addi	r2,r2,32
8112573c:	da400117 	ldw	r9,4(sp)
81125740:	d9800317 	ldw	r6,12(sp)
81125744:	003ee306 	br	811252d4 <__reset+0xfb1052d4>
81125748:	85a1883a 	add	r16,r16,r22
8112574c:	8585803a 	cmpltu	r2,r16,r22
81125750:	1705883a 	add	r2,r2,fp
81125754:	14a5883a 	add	r18,r2,r18
81125758:	88bfffc4 	addi	r2,r17,-1
8112575c:	e4800c2e 	bgeu	fp,r18,81125790 <__divdf3+0x734>
81125760:	90c03e36 	bltu	r18,r3,8112585c <__divdf3+0x800>
81125764:	1c806926 	beq	r3,r18,8112590c <__divdf3+0x8b0>
81125768:	90c7c83a 	sub	r3,r18,r3
8112576c:	1023883a 	mov	r17,r2
81125770:	003f5206 	br	811254bc <__reset+0xfb1054bc>
81125774:	923f0436 	bltu	r18,r8,81125388 <__reset+0xfb105388>
81125778:	800897fa 	slli	r4,r16,31
8112577c:	9004d07a 	srli	r2,r18,1
81125780:	8006d07a 	srli	r3,r16,1
81125784:	902097fa 	slli	r16,r18,31
81125788:	20a4b03a 	or	r18,r4,r2
8112578c:	003f0106 	br	81125394 <__reset+0xfb105394>
81125790:	e4bff51e 	bne	fp,r18,81125768 <__reset+0xfb105768>
81125794:	85bff22e 	bgeu	r16,r22,81125760 <__reset+0xfb105760>
81125798:	e0c7c83a 	sub	r3,fp,r3
8112579c:	1023883a 	mov	r17,r2
811257a0:	003f4606 	br	811254bc <__reset+0xfb1054bc>
811257a4:	100f883a 	mov	r7,r2
811257a8:	003f2b06 	br	81125458 <__reset+0xfb105458>
811257ac:	180d883a 	mov	r6,r3
811257b0:	003f1306 	br	81125400 <__reset+0xfb105400>
811257b4:	813fe436 	bltu	r16,r4,81125748 <__reset+0xfb105748>
811257b8:	0007883a 	mov	r3,zero
811257bc:	003f3f06 	br	811254bc <__reset+0xfb1054bc>
811257c0:	ba402c36 	bltu	r23,r9,81125874 <__divdf3+0x818>
811257c4:	4dc05426 	beq	r9,r23,81125918 <__divdf3+0x8bc>
811257c8:	1011883a 	mov	r8,r2
811257cc:	003f8906 	br	811255f4 <__reset+0xfb1055f4>
811257d0:	023fffc4 	movi	r8,-1
811257d4:	003f8806 	br	811255f8 <__reset+0xfb1055f8>
811257d8:	1811883a 	mov	r8,r3
811257dc:	003f5406 	br	81125530 <__reset+0xfb105530>
811257e0:	1025883a 	mov	r18,r2
811257e4:	003f6d06 	br	8112559c <__reset+0xfb10559c>
811257e8:	b827883a 	mov	r19,r23
811257ec:	003f8206 	br	811255f8 <__reset+0xfb1055f8>
811257f0:	010007c4 	movi	r4,31
811257f4:	20c02616 	blt	r4,r3,81125890 <__divdf3+0x834>
811257f8:	00800804 	movi	r2,32
811257fc:	10c5c83a 	sub	r2,r2,r3
81125800:	888a983a 	sll	r5,r17,r2
81125804:	40c8d83a 	srl	r4,r8,r3
81125808:	4084983a 	sll	r2,r8,r2
8112580c:	88e2d83a 	srl	r17,r17,r3
81125810:	2906b03a 	or	r3,r5,r4
81125814:	1004c03a 	cmpne	r2,r2,zero
81125818:	1886b03a 	or	r3,r3,r2
8112581c:	188001cc 	andi	r2,r3,7
81125820:	10000726 	beq	r2,zero,81125840 <__divdf3+0x7e4>
81125824:	188003cc 	andi	r2,r3,15
81125828:	01000104 	movi	r4,4
8112582c:	11000426 	beq	r2,r4,81125840 <__divdf3+0x7e4>
81125830:	1805883a 	mov	r2,r3
81125834:	10c00104 	addi	r3,r2,4
81125838:	1885803a 	cmpltu	r2,r3,r2
8112583c:	88a3883a 	add	r17,r17,r2
81125840:	8880202c 	andhi	r2,r17,128
81125844:	10002726 	beq	r2,zero,811258e4 <__divdf3+0x888>
81125848:	98c0004c 	andi	r3,r19,1
8112584c:	00800044 	movi	r2,1
81125850:	000b883a 	mov	r5,zero
81125854:	0025883a 	mov	r18,zero
81125858:	003e6106 	br	811251e0 <__reset+0xfb1051e0>
8112585c:	85a1883a 	add	r16,r16,r22
81125860:	8585803a 	cmpltu	r2,r16,r22
81125864:	1705883a 	add	r2,r2,fp
81125868:	14a5883a 	add	r18,r2,r18
8112586c:	8c7fff84 	addi	r17,r17,-2
81125870:	003f1106 	br	811254b8 <__reset+0xfb1054b8>
81125874:	b589883a 	add	r4,r22,r22
81125878:	25ad803a 	cmpltu	r22,r4,r22
8112587c:	b739883a 	add	fp,r22,fp
81125880:	40bfff84 	addi	r2,r8,-2
81125884:	bf2f883a 	add	r23,r23,fp
81125888:	202d883a 	mov	r22,r4
8112588c:	003f9306 	br	811256dc <__reset+0xfb1056dc>
81125890:	013ff844 	movi	r4,-31
81125894:	2085c83a 	sub	r2,r4,r2
81125898:	8888d83a 	srl	r4,r17,r2
8112589c:	00800804 	movi	r2,32
811258a0:	18802126 	beq	r3,r2,81125928 <__divdf3+0x8cc>
811258a4:	00801004 	movi	r2,64
811258a8:	10c5c83a 	sub	r2,r2,r3
811258ac:	8884983a 	sll	r2,r17,r2
811258b0:	1204b03a 	or	r2,r2,r8
811258b4:	1004c03a 	cmpne	r2,r2,zero
811258b8:	2084b03a 	or	r2,r4,r2
811258bc:	144001cc 	andi	r17,r2,7
811258c0:	88000d1e 	bne	r17,zero,811258f8 <__divdf3+0x89c>
811258c4:	000b883a 	mov	r5,zero
811258c8:	1024d0fa 	srli	r18,r2,3
811258cc:	98c0004c 	andi	r3,r19,1
811258d0:	0005883a 	mov	r2,zero
811258d4:	9464b03a 	or	r18,r18,r17
811258d8:	003e4106 	br	811251e0 <__reset+0xfb1051e0>
811258dc:	1007883a 	mov	r3,r2
811258e0:	0023883a 	mov	r17,zero
811258e4:	880a927a 	slli	r5,r17,9
811258e8:	1805883a 	mov	r2,r3
811258ec:	8822977a 	slli	r17,r17,29
811258f0:	280ad33a 	srli	r5,r5,12
811258f4:	003ff406 	br	811258c8 <__reset+0xfb1058c8>
811258f8:	10c003cc 	andi	r3,r2,15
811258fc:	01000104 	movi	r4,4
81125900:	193ff626 	beq	r3,r4,811258dc <__reset+0xfb1058dc>
81125904:	0023883a 	mov	r17,zero
81125908:	003fca06 	br	81125834 <__reset+0xfb105834>
8112590c:	813fd336 	bltu	r16,r4,8112585c <__reset+0xfb10585c>
81125910:	1023883a 	mov	r17,r2
81125914:	003fa806 	br	811257b8 <__reset+0xfb1057b8>
81125918:	b0ffd636 	bltu	r22,r3,81125874 <__reset+0xfb105874>
8112591c:	1011883a 	mov	r8,r2
81125920:	b0ff341e 	bne	r22,r3,811255f4 <__reset+0xfb1055f4>
81125924:	003f3406 	br	811255f8 <__reset+0xfb1055f8>
81125928:	0005883a 	mov	r2,zero
8112592c:	003fe006 	br	811258b0 <__reset+0xfb1058b0>
81125930:	00800434 	movhi	r2,16
81125934:	89400234 	orhi	r5,r17,8
81125938:	10bfffc4 	addi	r2,r2,-1
8112593c:	b807883a 	mov	r3,r23
81125940:	288a703a 	and	r5,r5,r2
81125944:	4025883a 	mov	r18,r8
81125948:	003e8206 	br	81125354 <__reset+0xfb105354>

8112594c <__eqdf2>:
8112594c:	2804d53a 	srli	r2,r5,20
81125950:	3806d53a 	srli	r3,r7,20
81125954:	02000434 	movhi	r8,16
81125958:	423fffc4 	addi	r8,r8,-1
8112595c:	1081ffcc 	andi	r2,r2,2047
81125960:	0281ffc4 	movi	r10,2047
81125964:	2a12703a 	and	r9,r5,r8
81125968:	18c1ffcc 	andi	r3,r3,2047
8112596c:	3a10703a 	and	r8,r7,r8
81125970:	280ad7fa 	srli	r5,r5,31
81125974:	380ed7fa 	srli	r7,r7,31
81125978:	12801026 	beq	r2,r10,811259bc <__eqdf2+0x70>
8112597c:	0281ffc4 	movi	r10,2047
81125980:	1a800a26 	beq	r3,r10,811259ac <__eqdf2+0x60>
81125984:	10c00226 	beq	r2,r3,81125990 <__eqdf2+0x44>
81125988:	00800044 	movi	r2,1
8112598c:	f800283a 	ret
81125990:	4a3ffd1e 	bne	r9,r8,81125988 <__reset+0xfb105988>
81125994:	21bffc1e 	bne	r4,r6,81125988 <__reset+0xfb105988>
81125998:	29c00c26 	beq	r5,r7,811259cc <__eqdf2+0x80>
8112599c:	103ffa1e 	bne	r2,zero,81125988 <__reset+0xfb105988>
811259a0:	2244b03a 	or	r2,r4,r9
811259a4:	1004c03a 	cmpne	r2,r2,zero
811259a8:	f800283a 	ret
811259ac:	3214b03a 	or	r10,r6,r8
811259b0:	503ff426 	beq	r10,zero,81125984 <__reset+0xfb105984>
811259b4:	00800044 	movi	r2,1
811259b8:	f800283a 	ret
811259bc:	2254b03a 	or	r10,r4,r9
811259c0:	503fee26 	beq	r10,zero,8112597c <__reset+0xfb10597c>
811259c4:	00800044 	movi	r2,1
811259c8:	f800283a 	ret
811259cc:	0005883a 	mov	r2,zero
811259d0:	f800283a 	ret

811259d4 <__gedf2>:
811259d4:	2804d53a 	srli	r2,r5,20
811259d8:	3806d53a 	srli	r3,r7,20
811259dc:	02000434 	movhi	r8,16
811259e0:	423fffc4 	addi	r8,r8,-1
811259e4:	1081ffcc 	andi	r2,r2,2047
811259e8:	0241ffc4 	movi	r9,2047
811259ec:	2a14703a 	and	r10,r5,r8
811259f0:	18c1ffcc 	andi	r3,r3,2047
811259f4:	3a10703a 	and	r8,r7,r8
811259f8:	280ad7fa 	srli	r5,r5,31
811259fc:	380ed7fa 	srli	r7,r7,31
81125a00:	12401d26 	beq	r2,r9,81125a78 <__gedf2+0xa4>
81125a04:	0241ffc4 	movi	r9,2047
81125a08:	1a401226 	beq	r3,r9,81125a54 <__gedf2+0x80>
81125a0c:	1000081e 	bne	r2,zero,81125a30 <__gedf2+0x5c>
81125a10:	2296b03a 	or	r11,r4,r10
81125a14:	5813003a 	cmpeq	r9,r11,zero
81125a18:	1800091e 	bne	r3,zero,81125a40 <__gedf2+0x6c>
81125a1c:	3218b03a 	or	r12,r6,r8
81125a20:	6000071e 	bne	r12,zero,81125a40 <__gedf2+0x6c>
81125a24:	0005883a 	mov	r2,zero
81125a28:	5800101e 	bne	r11,zero,81125a6c <__gedf2+0x98>
81125a2c:	f800283a 	ret
81125a30:	18000c1e 	bne	r3,zero,81125a64 <__gedf2+0x90>
81125a34:	3212b03a 	or	r9,r6,r8
81125a38:	48000c26 	beq	r9,zero,81125a6c <__gedf2+0x98>
81125a3c:	0013883a 	mov	r9,zero
81125a40:	39c03fcc 	andi	r7,r7,255
81125a44:	48000826 	beq	r9,zero,81125a68 <__gedf2+0x94>
81125a48:	38000926 	beq	r7,zero,81125a70 <__gedf2+0x9c>
81125a4c:	00800044 	movi	r2,1
81125a50:	f800283a 	ret
81125a54:	3212b03a 	or	r9,r6,r8
81125a58:	483fec26 	beq	r9,zero,81125a0c <__reset+0xfb105a0c>
81125a5c:	00bfff84 	movi	r2,-2
81125a60:	f800283a 	ret
81125a64:	39c03fcc 	andi	r7,r7,255
81125a68:	29c00626 	beq	r5,r7,81125a84 <__gedf2+0xb0>
81125a6c:	283ff726 	beq	r5,zero,81125a4c <__reset+0xfb105a4c>
81125a70:	00bfffc4 	movi	r2,-1
81125a74:	f800283a 	ret
81125a78:	2292b03a 	or	r9,r4,r10
81125a7c:	483fe126 	beq	r9,zero,81125a04 <__reset+0xfb105a04>
81125a80:	003ff606 	br	81125a5c <__reset+0xfb105a5c>
81125a84:	18bff916 	blt	r3,r2,81125a6c <__reset+0xfb105a6c>
81125a88:	10c00316 	blt	r2,r3,81125a98 <__gedf2+0xc4>
81125a8c:	42bff736 	bltu	r8,r10,81125a6c <__reset+0xfb105a6c>
81125a90:	52000326 	beq	r10,r8,81125aa0 <__gedf2+0xcc>
81125a94:	5200042e 	bgeu	r10,r8,81125aa8 <__gedf2+0xd4>
81125a98:	283fec1e 	bne	r5,zero,81125a4c <__reset+0xfb105a4c>
81125a9c:	003ff406 	br	81125a70 <__reset+0xfb105a70>
81125aa0:	313ff236 	bltu	r6,r4,81125a6c <__reset+0xfb105a6c>
81125aa4:	21bffc36 	bltu	r4,r6,81125a98 <__reset+0xfb105a98>
81125aa8:	0005883a 	mov	r2,zero
81125aac:	f800283a 	ret

81125ab0 <__ledf2>:
81125ab0:	2804d53a 	srli	r2,r5,20
81125ab4:	3810d53a 	srli	r8,r7,20
81125ab8:	00c00434 	movhi	r3,16
81125abc:	18ffffc4 	addi	r3,r3,-1
81125ac0:	1081ffcc 	andi	r2,r2,2047
81125ac4:	0241ffc4 	movi	r9,2047
81125ac8:	28d4703a 	and	r10,r5,r3
81125acc:	4201ffcc 	andi	r8,r8,2047
81125ad0:	38c6703a 	and	r3,r7,r3
81125ad4:	280ad7fa 	srli	r5,r5,31
81125ad8:	380ed7fa 	srli	r7,r7,31
81125adc:	12401f26 	beq	r2,r9,81125b5c <__ledf2+0xac>
81125ae0:	0241ffc4 	movi	r9,2047
81125ae4:	42401426 	beq	r8,r9,81125b38 <__ledf2+0x88>
81125ae8:	1000091e 	bne	r2,zero,81125b10 <__ledf2+0x60>
81125aec:	2296b03a 	or	r11,r4,r10
81125af0:	5813003a 	cmpeq	r9,r11,zero
81125af4:	29403fcc 	andi	r5,r5,255
81125af8:	40000a1e 	bne	r8,zero,81125b24 <__ledf2+0x74>
81125afc:	30d8b03a 	or	r12,r6,r3
81125b00:	6000081e 	bne	r12,zero,81125b24 <__ledf2+0x74>
81125b04:	0005883a 	mov	r2,zero
81125b08:	5800111e 	bne	r11,zero,81125b50 <__ledf2+0xa0>
81125b0c:	f800283a 	ret
81125b10:	29403fcc 	andi	r5,r5,255
81125b14:	40000c1e 	bne	r8,zero,81125b48 <__ledf2+0x98>
81125b18:	30d2b03a 	or	r9,r6,r3
81125b1c:	48000c26 	beq	r9,zero,81125b50 <__ledf2+0xa0>
81125b20:	0013883a 	mov	r9,zero
81125b24:	39c03fcc 	andi	r7,r7,255
81125b28:	48000826 	beq	r9,zero,81125b4c <__ledf2+0x9c>
81125b2c:	38001126 	beq	r7,zero,81125b74 <__ledf2+0xc4>
81125b30:	00800044 	movi	r2,1
81125b34:	f800283a 	ret
81125b38:	30d2b03a 	or	r9,r6,r3
81125b3c:	483fea26 	beq	r9,zero,81125ae8 <__reset+0xfb105ae8>
81125b40:	00800084 	movi	r2,2
81125b44:	f800283a 	ret
81125b48:	39c03fcc 	andi	r7,r7,255
81125b4c:	39400726 	beq	r7,r5,81125b6c <__ledf2+0xbc>
81125b50:	2800081e 	bne	r5,zero,81125b74 <__ledf2+0xc4>
81125b54:	00800044 	movi	r2,1
81125b58:	f800283a 	ret
81125b5c:	2292b03a 	or	r9,r4,r10
81125b60:	483fdf26 	beq	r9,zero,81125ae0 <__reset+0xfb105ae0>
81125b64:	00800084 	movi	r2,2
81125b68:	f800283a 	ret
81125b6c:	4080030e 	bge	r8,r2,81125b7c <__ledf2+0xcc>
81125b70:	383fef26 	beq	r7,zero,81125b30 <__reset+0xfb105b30>
81125b74:	00bfffc4 	movi	r2,-1
81125b78:	f800283a 	ret
81125b7c:	123feb16 	blt	r2,r8,81125b2c <__reset+0xfb105b2c>
81125b80:	1abff336 	bltu	r3,r10,81125b50 <__reset+0xfb105b50>
81125b84:	50c00326 	beq	r10,r3,81125b94 <__ledf2+0xe4>
81125b88:	50c0042e 	bgeu	r10,r3,81125b9c <__ledf2+0xec>
81125b8c:	283fe81e 	bne	r5,zero,81125b30 <__reset+0xfb105b30>
81125b90:	003ff806 	br	81125b74 <__reset+0xfb105b74>
81125b94:	313fee36 	bltu	r6,r4,81125b50 <__reset+0xfb105b50>
81125b98:	21bffc36 	bltu	r4,r6,81125b8c <__reset+0xfb105b8c>
81125b9c:	0005883a 	mov	r2,zero
81125ba0:	f800283a 	ret

81125ba4 <__subdf3>:
81125ba4:	02000434 	movhi	r8,16
81125ba8:	423fffc4 	addi	r8,r8,-1
81125bac:	defffb04 	addi	sp,sp,-20
81125bb0:	2a14703a 	and	r10,r5,r8
81125bb4:	3812d53a 	srli	r9,r7,20
81125bb8:	3a10703a 	and	r8,r7,r8
81125bbc:	de00012e 	bgeu	sp,et,81125bc4 <__subdf3+0x20>
81125bc0:	003b68fa 	trap	3
81125bc4:	2006d77a 	srli	r3,r4,29
81125bc8:	3004d77a 	srli	r2,r6,29
81125bcc:	dc000015 	stw	r16,0(sp)
81125bd0:	501490fa 	slli	r10,r10,3
81125bd4:	2820d53a 	srli	r16,r5,20
81125bd8:	401090fa 	slli	r8,r8,3
81125bdc:	dc800215 	stw	r18,8(sp)
81125be0:	dc400115 	stw	r17,4(sp)
81125be4:	dfc00415 	stw	ra,16(sp)
81125be8:	202290fa 	slli	r17,r4,3
81125bec:	dcc00315 	stw	r19,12(sp)
81125bf0:	4a41ffcc 	andi	r9,r9,2047
81125bf4:	0101ffc4 	movi	r4,2047
81125bf8:	2824d7fa 	srli	r18,r5,31
81125bfc:	8401ffcc 	andi	r16,r16,2047
81125c00:	50c6b03a 	or	r3,r10,r3
81125c04:	380ed7fa 	srli	r7,r7,31
81125c08:	408ab03a 	or	r5,r8,r2
81125c0c:	300c90fa 	slli	r6,r6,3
81125c10:	49009626 	beq	r9,r4,81125e6c <__subdf3+0x2c8>
81125c14:	39c0005c 	xori	r7,r7,1
81125c18:	8245c83a 	sub	r2,r16,r9
81125c1c:	3c807426 	beq	r7,r18,81125df0 <__subdf3+0x24c>
81125c20:	0080af0e 	bge	zero,r2,81125ee0 <__subdf3+0x33c>
81125c24:	48002a1e 	bne	r9,zero,81125cd0 <__subdf3+0x12c>
81125c28:	2988b03a 	or	r4,r5,r6
81125c2c:	20009a1e 	bne	r4,zero,81125e98 <__subdf3+0x2f4>
81125c30:	888001cc 	andi	r2,r17,7
81125c34:	10000726 	beq	r2,zero,81125c54 <__subdf3+0xb0>
81125c38:	888003cc 	andi	r2,r17,15
81125c3c:	01000104 	movi	r4,4
81125c40:	11000426 	beq	r2,r4,81125c54 <__subdf3+0xb0>
81125c44:	890b883a 	add	r5,r17,r4
81125c48:	2c63803a 	cmpltu	r17,r5,r17
81125c4c:	1c47883a 	add	r3,r3,r17
81125c50:	2823883a 	mov	r17,r5
81125c54:	1880202c 	andhi	r2,r3,128
81125c58:	10005926 	beq	r2,zero,81125dc0 <__subdf3+0x21c>
81125c5c:	84000044 	addi	r16,r16,1
81125c60:	0081ffc4 	movi	r2,2047
81125c64:	8080be26 	beq	r16,r2,81125f60 <__subdf3+0x3bc>
81125c68:	017fe034 	movhi	r5,65408
81125c6c:	297fffc4 	addi	r5,r5,-1
81125c70:	1946703a 	and	r3,r3,r5
81125c74:	1804977a 	slli	r2,r3,29
81125c78:	1806927a 	slli	r3,r3,9
81125c7c:	8822d0fa 	srli	r17,r17,3
81125c80:	8401ffcc 	andi	r16,r16,2047
81125c84:	180ad33a 	srli	r5,r3,12
81125c88:	9100004c 	andi	r4,r18,1
81125c8c:	1444b03a 	or	r2,r2,r17
81125c90:	80c1ffcc 	andi	r3,r16,2047
81125c94:	1820953a 	slli	r16,r3,20
81125c98:	20c03fcc 	andi	r3,r4,255
81125c9c:	180897fa 	slli	r4,r3,31
81125ca0:	00c00434 	movhi	r3,16
81125ca4:	18ffffc4 	addi	r3,r3,-1
81125ca8:	28c6703a 	and	r3,r5,r3
81125cac:	1c06b03a 	or	r3,r3,r16
81125cb0:	1906b03a 	or	r3,r3,r4
81125cb4:	dfc00417 	ldw	ra,16(sp)
81125cb8:	dcc00317 	ldw	r19,12(sp)
81125cbc:	dc800217 	ldw	r18,8(sp)
81125cc0:	dc400117 	ldw	r17,4(sp)
81125cc4:	dc000017 	ldw	r16,0(sp)
81125cc8:	dec00504 	addi	sp,sp,20
81125ccc:	f800283a 	ret
81125cd0:	0101ffc4 	movi	r4,2047
81125cd4:	813fd626 	beq	r16,r4,81125c30 <__reset+0xfb105c30>
81125cd8:	29402034 	orhi	r5,r5,128
81125cdc:	01000e04 	movi	r4,56
81125ce0:	2080a316 	blt	r4,r2,81125f70 <__subdf3+0x3cc>
81125ce4:	010007c4 	movi	r4,31
81125ce8:	2080c616 	blt	r4,r2,81126004 <__subdf3+0x460>
81125cec:	01000804 	movi	r4,32
81125cf0:	2089c83a 	sub	r4,r4,r2
81125cf4:	2910983a 	sll	r8,r5,r4
81125cf8:	308ed83a 	srl	r7,r6,r2
81125cfc:	3108983a 	sll	r4,r6,r4
81125d00:	2884d83a 	srl	r2,r5,r2
81125d04:	41ccb03a 	or	r6,r8,r7
81125d08:	2008c03a 	cmpne	r4,r4,zero
81125d0c:	310cb03a 	or	r6,r6,r4
81125d10:	898dc83a 	sub	r6,r17,r6
81125d14:	89a3803a 	cmpltu	r17,r17,r6
81125d18:	1887c83a 	sub	r3,r3,r2
81125d1c:	1c47c83a 	sub	r3,r3,r17
81125d20:	3023883a 	mov	r17,r6
81125d24:	1880202c 	andhi	r2,r3,128
81125d28:	10002326 	beq	r2,zero,81125db8 <__subdf3+0x214>
81125d2c:	04c02034 	movhi	r19,128
81125d30:	9cffffc4 	addi	r19,r19,-1
81125d34:	1ce6703a 	and	r19,r3,r19
81125d38:	98007a26 	beq	r19,zero,81125f24 <__subdf3+0x380>
81125d3c:	9809883a 	mov	r4,r19
81125d40:	1110f040 	call	81110f04 <__clzsi2>
81125d44:	113ffe04 	addi	r4,r2,-8
81125d48:	00c007c4 	movi	r3,31
81125d4c:	19007b16 	blt	r3,r4,81125f3c <__subdf3+0x398>
81125d50:	00800804 	movi	r2,32
81125d54:	1105c83a 	sub	r2,r2,r4
81125d58:	8884d83a 	srl	r2,r17,r2
81125d5c:	9906983a 	sll	r3,r19,r4
81125d60:	8922983a 	sll	r17,r17,r4
81125d64:	10c4b03a 	or	r2,r2,r3
81125d68:	24007816 	blt	r4,r16,81125f4c <__subdf3+0x3a8>
81125d6c:	2421c83a 	sub	r16,r4,r16
81125d70:	80c00044 	addi	r3,r16,1
81125d74:	010007c4 	movi	r4,31
81125d78:	20c09516 	blt	r4,r3,81125fd0 <__subdf3+0x42c>
81125d7c:	01400804 	movi	r5,32
81125d80:	28cbc83a 	sub	r5,r5,r3
81125d84:	88c8d83a 	srl	r4,r17,r3
81125d88:	8962983a 	sll	r17,r17,r5
81125d8c:	114a983a 	sll	r5,r2,r5
81125d90:	10c6d83a 	srl	r3,r2,r3
81125d94:	8804c03a 	cmpne	r2,r17,zero
81125d98:	290ab03a 	or	r5,r5,r4
81125d9c:	28a2b03a 	or	r17,r5,r2
81125da0:	0021883a 	mov	r16,zero
81125da4:	003fa206 	br	81125c30 <__reset+0xfb105c30>
81125da8:	2090b03a 	or	r8,r4,r2
81125dac:	40018e26 	beq	r8,zero,811263e8 <__subdf3+0x844>
81125db0:	1007883a 	mov	r3,r2
81125db4:	2023883a 	mov	r17,r4
81125db8:	888001cc 	andi	r2,r17,7
81125dbc:	103f9e1e 	bne	r2,zero,81125c38 <__reset+0xfb105c38>
81125dc0:	1804977a 	slli	r2,r3,29
81125dc4:	8822d0fa 	srli	r17,r17,3
81125dc8:	1810d0fa 	srli	r8,r3,3
81125dcc:	9100004c 	andi	r4,r18,1
81125dd0:	1444b03a 	or	r2,r2,r17
81125dd4:	00c1ffc4 	movi	r3,2047
81125dd8:	80c02826 	beq	r16,r3,81125e7c <__subdf3+0x2d8>
81125ddc:	01400434 	movhi	r5,16
81125de0:	297fffc4 	addi	r5,r5,-1
81125de4:	80e0703a 	and	r16,r16,r3
81125de8:	414a703a 	and	r5,r8,r5
81125dec:	003fa806 	br	81125c90 <__reset+0xfb105c90>
81125df0:	0080630e 	bge	zero,r2,81125f80 <__subdf3+0x3dc>
81125df4:	48003026 	beq	r9,zero,81125eb8 <__subdf3+0x314>
81125df8:	0101ffc4 	movi	r4,2047
81125dfc:	813f8c26 	beq	r16,r4,81125c30 <__reset+0xfb105c30>
81125e00:	29402034 	orhi	r5,r5,128
81125e04:	01000e04 	movi	r4,56
81125e08:	2080a90e 	bge	r4,r2,811260b0 <__subdf3+0x50c>
81125e0c:	298cb03a 	or	r6,r5,r6
81125e10:	3012c03a 	cmpne	r9,r6,zero
81125e14:	0005883a 	mov	r2,zero
81125e18:	4c53883a 	add	r9,r9,r17
81125e1c:	4c63803a 	cmpltu	r17,r9,r17
81125e20:	10c7883a 	add	r3,r2,r3
81125e24:	88c7883a 	add	r3,r17,r3
81125e28:	4823883a 	mov	r17,r9
81125e2c:	1880202c 	andhi	r2,r3,128
81125e30:	1000d026 	beq	r2,zero,81126174 <__subdf3+0x5d0>
81125e34:	84000044 	addi	r16,r16,1
81125e38:	0081ffc4 	movi	r2,2047
81125e3c:	8080fe26 	beq	r16,r2,81126238 <__subdf3+0x694>
81125e40:	00bfe034 	movhi	r2,65408
81125e44:	10bfffc4 	addi	r2,r2,-1
81125e48:	1886703a 	and	r3,r3,r2
81125e4c:	880ad07a 	srli	r5,r17,1
81125e50:	180497fa 	slli	r2,r3,31
81125e54:	8900004c 	andi	r4,r17,1
81125e58:	2922b03a 	or	r17,r5,r4
81125e5c:	1806d07a 	srli	r3,r3,1
81125e60:	1462b03a 	or	r17,r2,r17
81125e64:	3825883a 	mov	r18,r7
81125e68:	003f7106 	br	81125c30 <__reset+0xfb105c30>
81125e6c:	2984b03a 	or	r2,r5,r6
81125e70:	103f6826 	beq	r2,zero,81125c14 <__reset+0xfb105c14>
81125e74:	39c03fcc 	andi	r7,r7,255
81125e78:	003f6706 	br	81125c18 <__reset+0xfb105c18>
81125e7c:	4086b03a 	or	r3,r8,r2
81125e80:	18015226 	beq	r3,zero,811263cc <__subdf3+0x828>
81125e84:	00c00434 	movhi	r3,16
81125e88:	41400234 	orhi	r5,r8,8
81125e8c:	18ffffc4 	addi	r3,r3,-1
81125e90:	28ca703a 	and	r5,r5,r3
81125e94:	003f7e06 	br	81125c90 <__reset+0xfb105c90>
81125e98:	10bfffc4 	addi	r2,r2,-1
81125e9c:	1000491e 	bne	r2,zero,81125fc4 <__subdf3+0x420>
81125ea0:	898fc83a 	sub	r7,r17,r6
81125ea4:	89e3803a 	cmpltu	r17,r17,r7
81125ea8:	1947c83a 	sub	r3,r3,r5
81125eac:	1c47c83a 	sub	r3,r3,r17
81125eb0:	3823883a 	mov	r17,r7
81125eb4:	003f9b06 	br	81125d24 <__reset+0xfb105d24>
81125eb8:	2988b03a 	or	r4,r5,r6
81125ebc:	203f5c26 	beq	r4,zero,81125c30 <__reset+0xfb105c30>
81125ec0:	10bfffc4 	addi	r2,r2,-1
81125ec4:	1000931e 	bne	r2,zero,81126114 <__subdf3+0x570>
81125ec8:	898d883a 	add	r6,r17,r6
81125ecc:	3463803a 	cmpltu	r17,r6,r17
81125ed0:	1947883a 	add	r3,r3,r5
81125ed4:	88c7883a 	add	r3,r17,r3
81125ed8:	3023883a 	mov	r17,r6
81125edc:	003fd306 	br	81125e2c <__reset+0xfb105e2c>
81125ee0:	1000541e 	bne	r2,zero,81126034 <__subdf3+0x490>
81125ee4:	80800044 	addi	r2,r16,1
81125ee8:	1081ffcc 	andi	r2,r2,2047
81125eec:	01000044 	movi	r4,1
81125ef0:	2080a20e 	bge	r4,r2,8112617c <__subdf3+0x5d8>
81125ef4:	8989c83a 	sub	r4,r17,r6
81125ef8:	8905803a 	cmpltu	r2,r17,r4
81125efc:	1967c83a 	sub	r19,r3,r5
81125f00:	98a7c83a 	sub	r19,r19,r2
81125f04:	9880202c 	andhi	r2,r19,128
81125f08:	10006326 	beq	r2,zero,81126098 <__subdf3+0x4f4>
81125f0c:	3463c83a 	sub	r17,r6,r17
81125f10:	28c7c83a 	sub	r3,r5,r3
81125f14:	344d803a 	cmpltu	r6,r6,r17
81125f18:	19a7c83a 	sub	r19,r3,r6
81125f1c:	3825883a 	mov	r18,r7
81125f20:	983f861e 	bne	r19,zero,81125d3c <__reset+0xfb105d3c>
81125f24:	8809883a 	mov	r4,r17
81125f28:	1110f040 	call	81110f04 <__clzsi2>
81125f2c:	10800804 	addi	r2,r2,32
81125f30:	113ffe04 	addi	r4,r2,-8
81125f34:	00c007c4 	movi	r3,31
81125f38:	193f850e 	bge	r3,r4,81125d50 <__reset+0xfb105d50>
81125f3c:	10bff604 	addi	r2,r2,-40
81125f40:	8884983a 	sll	r2,r17,r2
81125f44:	0023883a 	mov	r17,zero
81125f48:	243f880e 	bge	r4,r16,81125d6c <__reset+0xfb105d6c>
81125f4c:	00ffe034 	movhi	r3,65408
81125f50:	18ffffc4 	addi	r3,r3,-1
81125f54:	8121c83a 	sub	r16,r16,r4
81125f58:	10c6703a 	and	r3,r2,r3
81125f5c:	003f3406 	br	81125c30 <__reset+0xfb105c30>
81125f60:	9100004c 	andi	r4,r18,1
81125f64:	000b883a 	mov	r5,zero
81125f68:	0005883a 	mov	r2,zero
81125f6c:	003f4806 	br	81125c90 <__reset+0xfb105c90>
81125f70:	298cb03a 	or	r6,r5,r6
81125f74:	300cc03a 	cmpne	r6,r6,zero
81125f78:	0005883a 	mov	r2,zero
81125f7c:	003f6406 	br	81125d10 <__reset+0xfb105d10>
81125f80:	10009a1e 	bne	r2,zero,811261ec <__subdf3+0x648>
81125f84:	82400044 	addi	r9,r16,1
81125f88:	4881ffcc 	andi	r2,r9,2047
81125f8c:	02800044 	movi	r10,1
81125f90:	5080670e 	bge	r10,r2,81126130 <__subdf3+0x58c>
81125f94:	0081ffc4 	movi	r2,2047
81125f98:	4880af26 	beq	r9,r2,81126258 <__subdf3+0x6b4>
81125f9c:	898d883a 	add	r6,r17,r6
81125fa0:	1945883a 	add	r2,r3,r5
81125fa4:	3447803a 	cmpltu	r3,r6,r17
81125fa8:	1887883a 	add	r3,r3,r2
81125fac:	182297fa 	slli	r17,r3,31
81125fb0:	300cd07a 	srli	r6,r6,1
81125fb4:	1806d07a 	srli	r3,r3,1
81125fb8:	4821883a 	mov	r16,r9
81125fbc:	89a2b03a 	or	r17,r17,r6
81125fc0:	003f1b06 	br	81125c30 <__reset+0xfb105c30>
81125fc4:	0101ffc4 	movi	r4,2047
81125fc8:	813f441e 	bne	r16,r4,81125cdc <__reset+0xfb105cdc>
81125fcc:	003f1806 	br	81125c30 <__reset+0xfb105c30>
81125fd0:	843ff844 	addi	r16,r16,-31
81125fd4:	01400804 	movi	r5,32
81125fd8:	1408d83a 	srl	r4,r2,r16
81125fdc:	19405026 	beq	r3,r5,81126120 <__subdf3+0x57c>
81125fe0:	01401004 	movi	r5,64
81125fe4:	28c7c83a 	sub	r3,r5,r3
81125fe8:	10c4983a 	sll	r2,r2,r3
81125fec:	88a2b03a 	or	r17,r17,r2
81125ff0:	8822c03a 	cmpne	r17,r17,zero
81125ff4:	2462b03a 	or	r17,r4,r17
81125ff8:	0007883a 	mov	r3,zero
81125ffc:	0021883a 	mov	r16,zero
81126000:	003f6d06 	br	81125db8 <__reset+0xfb105db8>
81126004:	11fff804 	addi	r7,r2,-32
81126008:	01000804 	movi	r4,32
8112600c:	29ced83a 	srl	r7,r5,r7
81126010:	11004526 	beq	r2,r4,81126128 <__subdf3+0x584>
81126014:	01001004 	movi	r4,64
81126018:	2089c83a 	sub	r4,r4,r2
8112601c:	2904983a 	sll	r2,r5,r4
81126020:	118cb03a 	or	r6,r2,r6
81126024:	300cc03a 	cmpne	r6,r6,zero
81126028:	398cb03a 	or	r6,r7,r6
8112602c:	0005883a 	mov	r2,zero
81126030:	003f3706 	br	81125d10 <__reset+0xfb105d10>
81126034:	80002a26 	beq	r16,zero,811260e0 <__subdf3+0x53c>
81126038:	0101ffc4 	movi	r4,2047
8112603c:	49006626 	beq	r9,r4,811261d8 <__subdf3+0x634>
81126040:	0085c83a 	sub	r2,zero,r2
81126044:	18c02034 	orhi	r3,r3,128
81126048:	01000e04 	movi	r4,56
8112604c:	20807e16 	blt	r4,r2,81126248 <__subdf3+0x6a4>
81126050:	010007c4 	movi	r4,31
81126054:	2080e716 	blt	r4,r2,811263f4 <__subdf3+0x850>
81126058:	01000804 	movi	r4,32
8112605c:	2089c83a 	sub	r4,r4,r2
81126060:	1914983a 	sll	r10,r3,r4
81126064:	8890d83a 	srl	r8,r17,r2
81126068:	8908983a 	sll	r4,r17,r4
8112606c:	1884d83a 	srl	r2,r3,r2
81126070:	5222b03a 	or	r17,r10,r8
81126074:	2006c03a 	cmpne	r3,r4,zero
81126078:	88e2b03a 	or	r17,r17,r3
8112607c:	3463c83a 	sub	r17,r6,r17
81126080:	2885c83a 	sub	r2,r5,r2
81126084:	344d803a 	cmpltu	r6,r6,r17
81126088:	1187c83a 	sub	r3,r2,r6
8112608c:	4821883a 	mov	r16,r9
81126090:	3825883a 	mov	r18,r7
81126094:	003f2306 	br	81125d24 <__reset+0xfb105d24>
81126098:	24d0b03a 	or	r8,r4,r19
8112609c:	40001b1e 	bne	r8,zero,8112610c <__subdf3+0x568>
811260a0:	0005883a 	mov	r2,zero
811260a4:	0009883a 	mov	r4,zero
811260a8:	0021883a 	mov	r16,zero
811260ac:	003f4906 	br	81125dd4 <__reset+0xfb105dd4>
811260b0:	010007c4 	movi	r4,31
811260b4:	20803a16 	blt	r4,r2,811261a0 <__subdf3+0x5fc>
811260b8:	01000804 	movi	r4,32
811260bc:	2089c83a 	sub	r4,r4,r2
811260c0:	2912983a 	sll	r9,r5,r4
811260c4:	3090d83a 	srl	r8,r6,r2
811260c8:	3108983a 	sll	r4,r6,r4
811260cc:	2884d83a 	srl	r2,r5,r2
811260d0:	4a12b03a 	or	r9,r9,r8
811260d4:	2008c03a 	cmpne	r4,r4,zero
811260d8:	4912b03a 	or	r9,r9,r4
811260dc:	003f4e06 	br	81125e18 <__reset+0xfb105e18>
811260e0:	1c48b03a 	or	r4,r3,r17
811260e4:	20003c26 	beq	r4,zero,811261d8 <__subdf3+0x634>
811260e8:	0084303a 	nor	r2,zero,r2
811260ec:	1000381e 	bne	r2,zero,811261d0 <__subdf3+0x62c>
811260f0:	3463c83a 	sub	r17,r6,r17
811260f4:	28c5c83a 	sub	r2,r5,r3
811260f8:	344d803a 	cmpltu	r6,r6,r17
811260fc:	1187c83a 	sub	r3,r2,r6
81126100:	4821883a 	mov	r16,r9
81126104:	3825883a 	mov	r18,r7
81126108:	003f0606 	br	81125d24 <__reset+0xfb105d24>
8112610c:	2023883a 	mov	r17,r4
81126110:	003f0906 	br	81125d38 <__reset+0xfb105d38>
81126114:	0101ffc4 	movi	r4,2047
81126118:	813f3a1e 	bne	r16,r4,81125e04 <__reset+0xfb105e04>
8112611c:	003ec406 	br	81125c30 <__reset+0xfb105c30>
81126120:	0005883a 	mov	r2,zero
81126124:	003fb106 	br	81125fec <__reset+0xfb105fec>
81126128:	0005883a 	mov	r2,zero
8112612c:	003fbc06 	br	81126020 <__reset+0xfb106020>
81126130:	1c44b03a 	or	r2,r3,r17
81126134:	80008e1e 	bne	r16,zero,81126370 <__subdf3+0x7cc>
81126138:	1000c826 	beq	r2,zero,8112645c <__subdf3+0x8b8>
8112613c:	2984b03a 	or	r2,r5,r6
81126140:	103ebb26 	beq	r2,zero,81125c30 <__reset+0xfb105c30>
81126144:	8989883a 	add	r4,r17,r6
81126148:	1945883a 	add	r2,r3,r5
8112614c:	2447803a 	cmpltu	r3,r4,r17
81126150:	1887883a 	add	r3,r3,r2
81126154:	1880202c 	andhi	r2,r3,128
81126158:	2023883a 	mov	r17,r4
8112615c:	103f1626 	beq	r2,zero,81125db8 <__reset+0xfb105db8>
81126160:	00bfe034 	movhi	r2,65408
81126164:	10bfffc4 	addi	r2,r2,-1
81126168:	5021883a 	mov	r16,r10
8112616c:	1886703a 	and	r3,r3,r2
81126170:	003eaf06 	br	81125c30 <__reset+0xfb105c30>
81126174:	3825883a 	mov	r18,r7
81126178:	003f0f06 	br	81125db8 <__reset+0xfb105db8>
8112617c:	1c44b03a 	or	r2,r3,r17
81126180:	8000251e 	bne	r16,zero,81126218 <__subdf3+0x674>
81126184:	1000661e 	bne	r2,zero,81126320 <__subdf3+0x77c>
81126188:	2990b03a 	or	r8,r5,r6
8112618c:	40009626 	beq	r8,zero,811263e8 <__subdf3+0x844>
81126190:	2807883a 	mov	r3,r5
81126194:	3023883a 	mov	r17,r6
81126198:	3825883a 	mov	r18,r7
8112619c:	003ea406 	br	81125c30 <__reset+0xfb105c30>
811261a0:	127ff804 	addi	r9,r2,-32
811261a4:	01000804 	movi	r4,32
811261a8:	2a52d83a 	srl	r9,r5,r9
811261ac:	11008c26 	beq	r2,r4,811263e0 <__subdf3+0x83c>
811261b0:	01001004 	movi	r4,64
811261b4:	2085c83a 	sub	r2,r4,r2
811261b8:	2884983a 	sll	r2,r5,r2
811261bc:	118cb03a 	or	r6,r2,r6
811261c0:	300cc03a 	cmpne	r6,r6,zero
811261c4:	4992b03a 	or	r9,r9,r6
811261c8:	0005883a 	mov	r2,zero
811261cc:	003f1206 	br	81125e18 <__reset+0xfb105e18>
811261d0:	0101ffc4 	movi	r4,2047
811261d4:	493f9c1e 	bne	r9,r4,81126048 <__reset+0xfb106048>
811261d8:	2807883a 	mov	r3,r5
811261dc:	3023883a 	mov	r17,r6
811261e0:	4821883a 	mov	r16,r9
811261e4:	3825883a 	mov	r18,r7
811261e8:	003e9106 	br	81125c30 <__reset+0xfb105c30>
811261ec:	80001f1e 	bne	r16,zero,8112626c <__subdf3+0x6c8>
811261f0:	1c48b03a 	or	r4,r3,r17
811261f4:	20005a26 	beq	r4,zero,81126360 <__subdf3+0x7bc>
811261f8:	0084303a 	nor	r2,zero,r2
811261fc:	1000561e 	bne	r2,zero,81126358 <__subdf3+0x7b4>
81126200:	89a3883a 	add	r17,r17,r6
81126204:	1945883a 	add	r2,r3,r5
81126208:	898d803a 	cmpltu	r6,r17,r6
8112620c:	3087883a 	add	r3,r6,r2
81126210:	4821883a 	mov	r16,r9
81126214:	003f0506 	br	81125e2c <__reset+0xfb105e2c>
81126218:	10002b1e 	bne	r2,zero,811262c8 <__subdf3+0x724>
8112621c:	2984b03a 	or	r2,r5,r6
81126220:	10008026 	beq	r2,zero,81126424 <__subdf3+0x880>
81126224:	2807883a 	mov	r3,r5
81126228:	3023883a 	mov	r17,r6
8112622c:	3825883a 	mov	r18,r7
81126230:	0401ffc4 	movi	r16,2047
81126234:	003e7e06 	br	81125c30 <__reset+0xfb105c30>
81126238:	3809883a 	mov	r4,r7
8112623c:	0011883a 	mov	r8,zero
81126240:	0005883a 	mov	r2,zero
81126244:	003ee306 	br	81125dd4 <__reset+0xfb105dd4>
81126248:	1c62b03a 	or	r17,r3,r17
8112624c:	8822c03a 	cmpne	r17,r17,zero
81126250:	0005883a 	mov	r2,zero
81126254:	003f8906 	br	8112607c <__reset+0xfb10607c>
81126258:	3809883a 	mov	r4,r7
8112625c:	4821883a 	mov	r16,r9
81126260:	0011883a 	mov	r8,zero
81126264:	0005883a 	mov	r2,zero
81126268:	003eda06 	br	81125dd4 <__reset+0xfb105dd4>
8112626c:	0101ffc4 	movi	r4,2047
81126270:	49003b26 	beq	r9,r4,81126360 <__subdf3+0x7bc>
81126274:	0085c83a 	sub	r2,zero,r2
81126278:	18c02034 	orhi	r3,r3,128
8112627c:	01000e04 	movi	r4,56
81126280:	20806e16 	blt	r4,r2,8112643c <__subdf3+0x898>
81126284:	010007c4 	movi	r4,31
81126288:	20807716 	blt	r4,r2,81126468 <__subdf3+0x8c4>
8112628c:	01000804 	movi	r4,32
81126290:	2089c83a 	sub	r4,r4,r2
81126294:	1914983a 	sll	r10,r3,r4
81126298:	8890d83a 	srl	r8,r17,r2
8112629c:	8908983a 	sll	r4,r17,r4
811262a0:	1884d83a 	srl	r2,r3,r2
811262a4:	5222b03a 	or	r17,r10,r8
811262a8:	2006c03a 	cmpne	r3,r4,zero
811262ac:	88e2b03a 	or	r17,r17,r3
811262b0:	89a3883a 	add	r17,r17,r6
811262b4:	1145883a 	add	r2,r2,r5
811262b8:	898d803a 	cmpltu	r6,r17,r6
811262bc:	3087883a 	add	r3,r6,r2
811262c0:	4821883a 	mov	r16,r9
811262c4:	003ed906 	br	81125e2c <__reset+0xfb105e2c>
811262c8:	2984b03a 	or	r2,r5,r6
811262cc:	10004226 	beq	r2,zero,811263d8 <__subdf3+0x834>
811262d0:	1808d0fa 	srli	r4,r3,3
811262d4:	8822d0fa 	srli	r17,r17,3
811262d8:	1806977a 	slli	r3,r3,29
811262dc:	2080022c 	andhi	r2,r4,8
811262e0:	1c62b03a 	or	r17,r3,r17
811262e4:	10000826 	beq	r2,zero,81126308 <__subdf3+0x764>
811262e8:	2812d0fa 	srli	r9,r5,3
811262ec:	4880022c 	andhi	r2,r9,8
811262f0:	1000051e 	bne	r2,zero,81126308 <__subdf3+0x764>
811262f4:	300cd0fa 	srli	r6,r6,3
811262f8:	2804977a 	slli	r2,r5,29
811262fc:	4809883a 	mov	r4,r9
81126300:	3825883a 	mov	r18,r7
81126304:	11a2b03a 	or	r17,r2,r6
81126308:	8806d77a 	srli	r3,r17,29
8112630c:	200890fa 	slli	r4,r4,3
81126310:	882290fa 	slli	r17,r17,3
81126314:	0401ffc4 	movi	r16,2047
81126318:	1906b03a 	or	r3,r3,r4
8112631c:	003e4406 	br	81125c30 <__reset+0xfb105c30>
81126320:	2984b03a 	or	r2,r5,r6
81126324:	103e4226 	beq	r2,zero,81125c30 <__reset+0xfb105c30>
81126328:	8989c83a 	sub	r4,r17,r6
8112632c:	8911803a 	cmpltu	r8,r17,r4
81126330:	1945c83a 	sub	r2,r3,r5
81126334:	1205c83a 	sub	r2,r2,r8
81126338:	1200202c 	andhi	r8,r2,128
8112633c:	403e9a26 	beq	r8,zero,81125da8 <__reset+0xfb105da8>
81126340:	3463c83a 	sub	r17,r6,r17
81126344:	28c5c83a 	sub	r2,r5,r3
81126348:	344d803a 	cmpltu	r6,r6,r17
8112634c:	1187c83a 	sub	r3,r2,r6
81126350:	3825883a 	mov	r18,r7
81126354:	003e3606 	br	81125c30 <__reset+0xfb105c30>
81126358:	0101ffc4 	movi	r4,2047
8112635c:	493fc71e 	bne	r9,r4,8112627c <__reset+0xfb10627c>
81126360:	2807883a 	mov	r3,r5
81126364:	3023883a 	mov	r17,r6
81126368:	4821883a 	mov	r16,r9
8112636c:	003e3006 	br	81125c30 <__reset+0xfb105c30>
81126370:	10003626 	beq	r2,zero,8112644c <__subdf3+0x8a8>
81126374:	2984b03a 	or	r2,r5,r6
81126378:	10001726 	beq	r2,zero,811263d8 <__subdf3+0x834>
8112637c:	1808d0fa 	srli	r4,r3,3
81126380:	8822d0fa 	srli	r17,r17,3
81126384:	1806977a 	slli	r3,r3,29
81126388:	2080022c 	andhi	r2,r4,8
8112638c:	1c62b03a 	or	r17,r3,r17
81126390:	10000726 	beq	r2,zero,811263b0 <__subdf3+0x80c>
81126394:	2812d0fa 	srli	r9,r5,3
81126398:	4880022c 	andhi	r2,r9,8
8112639c:	1000041e 	bne	r2,zero,811263b0 <__subdf3+0x80c>
811263a0:	300cd0fa 	srli	r6,r6,3
811263a4:	2804977a 	slli	r2,r5,29
811263a8:	4809883a 	mov	r4,r9
811263ac:	11a2b03a 	or	r17,r2,r6
811263b0:	8806d77a 	srli	r3,r17,29
811263b4:	200890fa 	slli	r4,r4,3
811263b8:	882290fa 	slli	r17,r17,3
811263bc:	3825883a 	mov	r18,r7
811263c0:	1906b03a 	or	r3,r3,r4
811263c4:	0401ffc4 	movi	r16,2047
811263c8:	003e1906 	br	81125c30 <__reset+0xfb105c30>
811263cc:	000b883a 	mov	r5,zero
811263d0:	0005883a 	mov	r2,zero
811263d4:	003e2e06 	br	81125c90 <__reset+0xfb105c90>
811263d8:	0401ffc4 	movi	r16,2047
811263dc:	003e1406 	br	81125c30 <__reset+0xfb105c30>
811263e0:	0005883a 	mov	r2,zero
811263e4:	003f7506 	br	811261bc <__reset+0xfb1061bc>
811263e8:	0005883a 	mov	r2,zero
811263ec:	0009883a 	mov	r4,zero
811263f0:	003e7806 	br	81125dd4 <__reset+0xfb105dd4>
811263f4:	123ff804 	addi	r8,r2,-32
811263f8:	01000804 	movi	r4,32
811263fc:	1a10d83a 	srl	r8,r3,r8
81126400:	11002526 	beq	r2,r4,81126498 <__subdf3+0x8f4>
81126404:	01001004 	movi	r4,64
81126408:	2085c83a 	sub	r2,r4,r2
8112640c:	1884983a 	sll	r2,r3,r2
81126410:	1444b03a 	or	r2,r2,r17
81126414:	1004c03a 	cmpne	r2,r2,zero
81126418:	40a2b03a 	or	r17,r8,r2
8112641c:	0005883a 	mov	r2,zero
81126420:	003f1606 	br	8112607c <__reset+0xfb10607c>
81126424:	02000434 	movhi	r8,16
81126428:	0009883a 	mov	r4,zero
8112642c:	423fffc4 	addi	r8,r8,-1
81126430:	00bfffc4 	movi	r2,-1
81126434:	0401ffc4 	movi	r16,2047
81126438:	003e6606 	br	81125dd4 <__reset+0xfb105dd4>
8112643c:	1c62b03a 	or	r17,r3,r17
81126440:	8822c03a 	cmpne	r17,r17,zero
81126444:	0005883a 	mov	r2,zero
81126448:	003f9906 	br	811262b0 <__reset+0xfb1062b0>
8112644c:	2807883a 	mov	r3,r5
81126450:	3023883a 	mov	r17,r6
81126454:	0401ffc4 	movi	r16,2047
81126458:	003df506 	br	81125c30 <__reset+0xfb105c30>
8112645c:	2807883a 	mov	r3,r5
81126460:	3023883a 	mov	r17,r6
81126464:	003df206 	br	81125c30 <__reset+0xfb105c30>
81126468:	123ff804 	addi	r8,r2,-32
8112646c:	01000804 	movi	r4,32
81126470:	1a10d83a 	srl	r8,r3,r8
81126474:	11000a26 	beq	r2,r4,811264a0 <__subdf3+0x8fc>
81126478:	01001004 	movi	r4,64
8112647c:	2085c83a 	sub	r2,r4,r2
81126480:	1884983a 	sll	r2,r3,r2
81126484:	1444b03a 	or	r2,r2,r17
81126488:	1004c03a 	cmpne	r2,r2,zero
8112648c:	40a2b03a 	or	r17,r8,r2
81126490:	0005883a 	mov	r2,zero
81126494:	003f8606 	br	811262b0 <__reset+0xfb1062b0>
81126498:	0005883a 	mov	r2,zero
8112649c:	003fdc06 	br	81126410 <__reset+0xfb106410>
811264a0:	0005883a 	mov	r2,zero
811264a4:	003ff706 	br	81126484 <__reset+0xfb106484>

811264a8 <__fixdfsi>:
811264a8:	280cd53a 	srli	r6,r5,20
811264ac:	00c00434 	movhi	r3,16
811264b0:	18ffffc4 	addi	r3,r3,-1
811264b4:	3181ffcc 	andi	r6,r6,2047
811264b8:	01c0ff84 	movi	r7,1022
811264bc:	28c6703a 	and	r3,r5,r3
811264c0:	280ad7fa 	srli	r5,r5,31
811264c4:	3980120e 	bge	r7,r6,81126510 <__fixdfsi+0x68>
811264c8:	00810744 	movi	r2,1053
811264cc:	11800c16 	blt	r2,r6,81126500 <__fixdfsi+0x58>
811264d0:	00810cc4 	movi	r2,1075
811264d4:	1185c83a 	sub	r2,r2,r6
811264d8:	01c007c4 	movi	r7,31
811264dc:	18c00434 	orhi	r3,r3,16
811264e0:	38800d16 	blt	r7,r2,81126518 <__fixdfsi+0x70>
811264e4:	31befb44 	addi	r6,r6,-1043
811264e8:	2084d83a 	srl	r2,r4,r2
811264ec:	1986983a 	sll	r3,r3,r6
811264f0:	1884b03a 	or	r2,r3,r2
811264f4:	28000726 	beq	r5,zero,81126514 <__fixdfsi+0x6c>
811264f8:	0085c83a 	sub	r2,zero,r2
811264fc:	f800283a 	ret
81126500:	00a00034 	movhi	r2,32768
81126504:	10bfffc4 	addi	r2,r2,-1
81126508:	2885883a 	add	r2,r5,r2
8112650c:	f800283a 	ret
81126510:	0005883a 	mov	r2,zero
81126514:	f800283a 	ret
81126518:	008104c4 	movi	r2,1043
8112651c:	1185c83a 	sub	r2,r2,r6
81126520:	1884d83a 	srl	r2,r3,r2
81126524:	003ff306 	br	811264f4 <__reset+0xfb1064f4>

81126528 <__floatsidf>:
81126528:	defffd04 	addi	sp,sp,-12
8112652c:	de00012e 	bgeu	sp,et,81126534 <__floatsidf+0xc>
81126530:	003b68fa 	trap	3
81126534:	dfc00215 	stw	ra,8(sp)
81126538:	dc400115 	stw	r17,4(sp)
8112653c:	dc000015 	stw	r16,0(sp)
81126540:	20002b26 	beq	r4,zero,811265f0 <__floatsidf+0xc8>
81126544:	2023883a 	mov	r17,r4
81126548:	2020d7fa 	srli	r16,r4,31
8112654c:	20002d16 	blt	r4,zero,81126604 <__floatsidf+0xdc>
81126550:	8809883a 	mov	r4,r17
81126554:	1110f040 	call	81110f04 <__clzsi2>
81126558:	01410784 	movi	r5,1054
8112655c:	288bc83a 	sub	r5,r5,r2
81126560:	01010cc4 	movi	r4,1075
81126564:	2149c83a 	sub	r4,r4,r5
81126568:	00c007c4 	movi	r3,31
8112656c:	1900160e 	bge	r3,r4,811265c8 <__floatsidf+0xa0>
81126570:	00c104c4 	movi	r3,1043
81126574:	1947c83a 	sub	r3,r3,r5
81126578:	88c6983a 	sll	r3,r17,r3
8112657c:	00800434 	movhi	r2,16
81126580:	10bfffc4 	addi	r2,r2,-1
81126584:	1886703a 	and	r3,r3,r2
81126588:	2941ffcc 	andi	r5,r5,2047
8112658c:	800d883a 	mov	r6,r16
81126590:	0005883a 	mov	r2,zero
81126594:	280a953a 	slli	r5,r5,20
81126598:	31803fcc 	andi	r6,r6,255
8112659c:	01000434 	movhi	r4,16
811265a0:	300c97fa 	slli	r6,r6,31
811265a4:	213fffc4 	addi	r4,r4,-1
811265a8:	1906703a 	and	r3,r3,r4
811265ac:	1946b03a 	or	r3,r3,r5
811265b0:	1986b03a 	or	r3,r3,r6
811265b4:	dfc00217 	ldw	ra,8(sp)
811265b8:	dc400117 	ldw	r17,4(sp)
811265bc:	dc000017 	ldw	r16,0(sp)
811265c0:	dec00304 	addi	sp,sp,12
811265c4:	f800283a 	ret
811265c8:	00c002c4 	movi	r3,11
811265cc:	1887c83a 	sub	r3,r3,r2
811265d0:	88c6d83a 	srl	r3,r17,r3
811265d4:	8904983a 	sll	r2,r17,r4
811265d8:	01000434 	movhi	r4,16
811265dc:	213fffc4 	addi	r4,r4,-1
811265e0:	2941ffcc 	andi	r5,r5,2047
811265e4:	1906703a 	and	r3,r3,r4
811265e8:	800d883a 	mov	r6,r16
811265ec:	003fe906 	br	81126594 <__reset+0xfb106594>
811265f0:	000d883a 	mov	r6,zero
811265f4:	000b883a 	mov	r5,zero
811265f8:	0007883a 	mov	r3,zero
811265fc:	0005883a 	mov	r2,zero
81126600:	003fe406 	br	81126594 <__reset+0xfb106594>
81126604:	0123c83a 	sub	r17,zero,r4
81126608:	003fd106 	br	81126550 <__reset+0xfb106550>

8112660c <__floatunsidf>:
8112660c:	defffe04 	addi	sp,sp,-8
81126610:	de00012e 	bgeu	sp,et,81126618 <__floatunsidf+0xc>
81126614:	003b68fa 	trap	3
81126618:	dc000015 	stw	r16,0(sp)
8112661c:	dfc00115 	stw	ra,4(sp)
81126620:	2021883a 	mov	r16,r4
81126624:	20002226 	beq	r4,zero,811266b0 <__floatunsidf+0xa4>
81126628:	1110f040 	call	81110f04 <__clzsi2>
8112662c:	01010784 	movi	r4,1054
81126630:	2089c83a 	sub	r4,r4,r2
81126634:	01810cc4 	movi	r6,1075
81126638:	310dc83a 	sub	r6,r6,r4
8112663c:	00c007c4 	movi	r3,31
81126640:	1980120e 	bge	r3,r6,8112668c <__floatunsidf+0x80>
81126644:	00c104c4 	movi	r3,1043
81126648:	1907c83a 	sub	r3,r3,r4
8112664c:	80ca983a 	sll	r5,r16,r3
81126650:	00800434 	movhi	r2,16
81126654:	10bfffc4 	addi	r2,r2,-1
81126658:	2101ffcc 	andi	r4,r4,2047
8112665c:	0021883a 	mov	r16,zero
81126660:	288a703a 	and	r5,r5,r2
81126664:	2008953a 	slli	r4,r4,20
81126668:	00c00434 	movhi	r3,16
8112666c:	18ffffc4 	addi	r3,r3,-1
81126670:	28c6703a 	and	r3,r5,r3
81126674:	8005883a 	mov	r2,r16
81126678:	1906b03a 	or	r3,r3,r4
8112667c:	dfc00117 	ldw	ra,4(sp)
81126680:	dc000017 	ldw	r16,0(sp)
81126684:	dec00204 	addi	sp,sp,8
81126688:	f800283a 	ret
8112668c:	00c002c4 	movi	r3,11
81126690:	188bc83a 	sub	r5,r3,r2
81126694:	814ad83a 	srl	r5,r16,r5
81126698:	00c00434 	movhi	r3,16
8112669c:	18ffffc4 	addi	r3,r3,-1
811266a0:	81a0983a 	sll	r16,r16,r6
811266a4:	2101ffcc 	andi	r4,r4,2047
811266a8:	28ca703a 	and	r5,r5,r3
811266ac:	003fed06 	br	81126664 <__reset+0xfb106664>
811266b0:	0009883a 	mov	r4,zero
811266b4:	000b883a 	mov	r5,zero
811266b8:	003fea06 	br	81126664 <__reset+0xfb106664>

811266bc <alt_busy_sleep>:
811266bc:	defffb04 	addi	sp,sp,-20
811266c0:	de00012e 	bgeu	sp,et,811266c8 <alt_busy_sleep+0xc>
811266c4:	003b68fa 	trap	3
811266c8:	df000415 	stw	fp,16(sp)
811266cc:	df000404 	addi	fp,sp,16
811266d0:	e13fff15 	stw	r4,-4(fp)
811266d4:	008000c4 	movi	r2,3
811266d8:	e0bffd15 	stw	r2,-12(fp)
811266dc:	e0fffd17 	ldw	r3,-12(fp)
811266e0:	008003f4 	movhi	r2,15
811266e4:	10909004 	addi	r2,r2,16960
811266e8:	1887383a 	mul	r3,r3,r2
811266ec:	00817db4 	movhi	r2,1526
811266f0:	10b84004 	addi	r2,r2,-7936
811266f4:	10c7203a 	divu	r3,r2,r3
811266f8:	00a00034 	movhi	r2,32768
811266fc:	10bfffc4 	addi	r2,r2,-1
81126700:	10c5203a 	divu	r2,r2,r3
81126704:	e0ffff17 	ldw	r3,-4(fp)
81126708:	1885203a 	divu	r2,r3,r2
8112670c:	e0bffe15 	stw	r2,-8(fp)
81126710:	e0bffe17 	ldw	r2,-8(fp)
81126714:	10002526 	beq	r2,zero,811267ac <alt_busy_sleep+0xf0>
81126718:	e03ffc15 	stw	zero,-16(fp)
8112671c:	00001406 	br	81126770 <alt_busy_sleep+0xb4>
81126720:	00a00034 	movhi	r2,32768
81126724:	10bfffc4 	addi	r2,r2,-1
81126728:	10bfffc4 	addi	r2,r2,-1
8112672c:	103ffe1e 	bne	r2,zero,81126728 <__reset+0xfb106728>
81126730:	e0fffd17 	ldw	r3,-12(fp)
81126734:	008003f4 	movhi	r2,15
81126738:	10909004 	addi	r2,r2,16960
8112673c:	1887383a 	mul	r3,r3,r2
81126740:	00817db4 	movhi	r2,1526
81126744:	10b84004 	addi	r2,r2,-7936
81126748:	10c7203a 	divu	r3,r2,r3
8112674c:	00a00034 	movhi	r2,32768
81126750:	10bfffc4 	addi	r2,r2,-1
81126754:	10c5203a 	divu	r2,r2,r3
81126758:	e0ffff17 	ldw	r3,-4(fp)
8112675c:	1885c83a 	sub	r2,r3,r2
81126760:	e0bfff15 	stw	r2,-4(fp)
81126764:	e0bffc17 	ldw	r2,-16(fp)
81126768:	10800044 	addi	r2,r2,1
8112676c:	e0bffc15 	stw	r2,-16(fp)
81126770:	e0fffc17 	ldw	r3,-16(fp)
81126774:	e0bffe17 	ldw	r2,-8(fp)
81126778:	18bfe916 	blt	r3,r2,81126720 <__reset+0xfb106720>
8112677c:	e0fffd17 	ldw	r3,-12(fp)
81126780:	008003f4 	movhi	r2,15
81126784:	10909004 	addi	r2,r2,16960
81126788:	1887383a 	mul	r3,r3,r2
8112678c:	00817db4 	movhi	r2,1526
81126790:	10b84004 	addi	r2,r2,-7936
81126794:	10c7203a 	divu	r3,r2,r3
81126798:	e0bfff17 	ldw	r2,-4(fp)
8112679c:	1885383a 	mul	r2,r3,r2
811267a0:	10bfffc4 	addi	r2,r2,-1
811267a4:	103ffe1e 	bne	r2,zero,811267a0 <__reset+0xfb1067a0>
811267a8:	00000b06 	br	811267d8 <alt_busy_sleep+0x11c>
811267ac:	e0fffd17 	ldw	r3,-12(fp)
811267b0:	008003f4 	movhi	r2,15
811267b4:	10909004 	addi	r2,r2,16960
811267b8:	1887383a 	mul	r3,r3,r2
811267bc:	00817db4 	movhi	r2,1526
811267c0:	10b84004 	addi	r2,r2,-7936
811267c4:	10c7203a 	divu	r3,r2,r3
811267c8:	e0bfff17 	ldw	r2,-4(fp)
811267cc:	1885383a 	mul	r2,r3,r2
811267d0:	10bfffc4 	addi	r2,r2,-1
811267d4:	00bffe16 	blt	zero,r2,811267d0 <__reset+0xfb1067d0>
811267d8:	0005883a 	mov	r2,zero
811267dc:	e037883a 	mov	sp,fp
811267e0:	df000017 	ldw	fp,0(sp)
811267e4:	dec00104 	addi	sp,sp,4
811267e8:	f800283a 	ret

811267ec <alt_get_errno>:
811267ec:	defffe04 	addi	sp,sp,-8
811267f0:	de00012e 	bgeu	sp,et,811267f8 <alt_get_errno+0xc>
811267f4:	003b68fa 	trap	3
811267f8:	dfc00115 	stw	ra,4(sp)
811267fc:	df000015 	stw	fp,0(sp)
81126800:	d839883a 	mov	fp,sp
81126804:	d0a01017 	ldw	r2,-32704(gp)
81126808:	10000326 	beq	r2,zero,81126818 <alt_get_errno+0x2c>
8112680c:	d0a01017 	ldw	r2,-32704(gp)
81126810:	103ee83a 	callr	r2
81126814:	00000106 	br	8112681c <alt_get_errno+0x30>
81126818:	d0a05e04 	addi	r2,gp,-32392
8112681c:	e037883a 	mov	sp,fp
81126820:	dfc00117 	ldw	ra,4(sp)
81126824:	df000017 	ldw	fp,0(sp)
81126828:	dec00204 	addi	sp,sp,8
8112682c:	f800283a 	ret

81126830 <close>:
81126830:	defffb04 	addi	sp,sp,-20
81126834:	de00012e 	bgeu	sp,et,8112683c <close+0xc>
81126838:	003b68fa 	trap	3
8112683c:	dfc00415 	stw	ra,16(sp)
81126840:	df000315 	stw	fp,12(sp)
81126844:	df000304 	addi	fp,sp,12
81126848:	e13fff15 	stw	r4,-4(fp)
8112684c:	e0bfff17 	ldw	r2,-4(fp)
81126850:	10000616 	blt	r2,zero,8112686c <close+0x3c>
81126854:	e0bfff17 	ldw	r2,-4(fp)
81126858:	10c00324 	muli	r3,r2,12
8112685c:	00a04534 	movhi	r2,33044
81126860:	10baac04 	addi	r2,r2,-5456
81126864:	1885883a 	add	r2,r3,r2
81126868:	00000106 	br	81126870 <close+0x40>
8112686c:	0005883a 	mov	r2,zero
81126870:	e0bffd15 	stw	r2,-12(fp)
81126874:	e0bffd17 	ldw	r2,-12(fp)
81126878:	10001926 	beq	r2,zero,811268e0 <close+0xb0>
8112687c:	e0bffd17 	ldw	r2,-12(fp)
81126880:	10800017 	ldw	r2,0(r2)
81126884:	10800417 	ldw	r2,16(r2)
81126888:	10000626 	beq	r2,zero,811268a4 <close+0x74>
8112688c:	e0bffd17 	ldw	r2,-12(fp)
81126890:	10800017 	ldw	r2,0(r2)
81126894:	10800417 	ldw	r2,16(r2)
81126898:	e13ffd17 	ldw	r4,-12(fp)
8112689c:	103ee83a 	callr	r2
811268a0:	00000106 	br	811268a8 <close+0x78>
811268a4:	0005883a 	mov	r2,zero
811268a8:	e0bffe15 	stw	r2,-8(fp)
811268ac:	e13fff17 	ldw	r4,-4(fp)
811268b0:	11272700 	call	81127270 <alt_release_fd>
811268b4:	e0bffe17 	ldw	r2,-8(fp)
811268b8:	1000070e 	bge	r2,zero,811268d8 <close+0xa8>
811268bc:	11267ec0 	call	811267ec <alt_get_errno>
811268c0:	1007883a 	mov	r3,r2
811268c4:	e0bffe17 	ldw	r2,-8(fp)
811268c8:	0085c83a 	sub	r2,zero,r2
811268cc:	18800015 	stw	r2,0(r3)
811268d0:	00bfffc4 	movi	r2,-1
811268d4:	00000706 	br	811268f4 <close+0xc4>
811268d8:	0005883a 	mov	r2,zero
811268dc:	00000506 	br	811268f4 <close+0xc4>
811268e0:	11267ec0 	call	811267ec <alt_get_errno>
811268e4:	1007883a 	mov	r3,r2
811268e8:	00801444 	movi	r2,81
811268ec:	18800015 	stw	r2,0(r3)
811268f0:	00bfffc4 	movi	r2,-1
811268f4:	e037883a 	mov	sp,fp
811268f8:	dfc00117 	ldw	ra,4(sp)
811268fc:	df000017 	ldw	fp,0(sp)
81126900:	dec00204 	addi	sp,sp,8
81126904:	f800283a 	ret

81126908 <alt_dcache_flush_all>:
81126908:	deffff04 	addi	sp,sp,-4
8112690c:	de00012e 	bgeu	sp,et,81126914 <alt_dcache_flush_all+0xc>
81126910:	003b68fa 	trap	3
81126914:	df000015 	stw	fp,0(sp)
81126918:	d839883a 	mov	fp,sp
8112691c:	0001883a 	nop
81126920:	e037883a 	mov	sp,fp
81126924:	df000017 	ldw	fp,0(sp)
81126928:	dec00104 	addi	sp,sp,4
8112692c:	f800283a 	ret

81126930 <alt_dev_null_write>:
81126930:	defffc04 	addi	sp,sp,-16
81126934:	de00012e 	bgeu	sp,et,8112693c <alt_dev_null_write+0xc>
81126938:	003b68fa 	trap	3
8112693c:	df000315 	stw	fp,12(sp)
81126940:	df000304 	addi	fp,sp,12
81126944:	e13ffd15 	stw	r4,-12(fp)
81126948:	e17ffe15 	stw	r5,-8(fp)
8112694c:	e1bfff15 	stw	r6,-4(fp)
81126950:	e0bfff17 	ldw	r2,-4(fp)
81126954:	e037883a 	mov	sp,fp
81126958:	df000017 	ldw	fp,0(sp)
8112695c:	dec00104 	addi	sp,sp,4
81126960:	f800283a 	ret

81126964 <alt_get_errno>:
81126964:	defffe04 	addi	sp,sp,-8
81126968:	de00012e 	bgeu	sp,et,81126970 <alt_get_errno+0xc>
8112696c:	003b68fa 	trap	3
81126970:	dfc00115 	stw	ra,4(sp)
81126974:	df000015 	stw	fp,0(sp)
81126978:	d839883a 	mov	fp,sp
8112697c:	d0a01017 	ldw	r2,-32704(gp)
81126980:	10000326 	beq	r2,zero,81126990 <alt_get_errno+0x2c>
81126984:	d0a01017 	ldw	r2,-32704(gp)
81126988:	103ee83a 	callr	r2
8112698c:	00000106 	br	81126994 <alt_get_errno+0x30>
81126990:	d0a05e04 	addi	r2,gp,-32392
81126994:	e037883a 	mov	sp,fp
81126998:	dfc00117 	ldw	ra,4(sp)
8112699c:	df000017 	ldw	fp,0(sp)
811269a0:	dec00204 	addi	sp,sp,8
811269a4:	f800283a 	ret

811269a8 <fstat>:
811269a8:	defffb04 	addi	sp,sp,-20
811269ac:	de00012e 	bgeu	sp,et,811269b4 <fstat+0xc>
811269b0:	003b68fa 	trap	3
811269b4:	dfc00415 	stw	ra,16(sp)
811269b8:	df000315 	stw	fp,12(sp)
811269bc:	df000304 	addi	fp,sp,12
811269c0:	e13ffe15 	stw	r4,-8(fp)
811269c4:	e17fff15 	stw	r5,-4(fp)
811269c8:	e0bffe17 	ldw	r2,-8(fp)
811269cc:	10000616 	blt	r2,zero,811269e8 <fstat+0x40>
811269d0:	e0bffe17 	ldw	r2,-8(fp)
811269d4:	10c00324 	muli	r3,r2,12
811269d8:	00a04534 	movhi	r2,33044
811269dc:	10baac04 	addi	r2,r2,-5456
811269e0:	1885883a 	add	r2,r3,r2
811269e4:	00000106 	br	811269ec <fstat+0x44>
811269e8:	0005883a 	mov	r2,zero
811269ec:	e0bffd15 	stw	r2,-12(fp)
811269f0:	e0bffd17 	ldw	r2,-12(fp)
811269f4:	10001026 	beq	r2,zero,81126a38 <fstat+0x90>
811269f8:	e0bffd17 	ldw	r2,-12(fp)
811269fc:	10800017 	ldw	r2,0(r2)
81126a00:	10800817 	ldw	r2,32(r2)
81126a04:	10000726 	beq	r2,zero,81126a24 <fstat+0x7c>
81126a08:	e0bffd17 	ldw	r2,-12(fp)
81126a0c:	10800017 	ldw	r2,0(r2)
81126a10:	10800817 	ldw	r2,32(r2)
81126a14:	e17fff17 	ldw	r5,-4(fp)
81126a18:	e13ffd17 	ldw	r4,-12(fp)
81126a1c:	103ee83a 	callr	r2
81126a20:	00000a06 	br	81126a4c <fstat+0xa4>
81126a24:	e0bfff17 	ldw	r2,-4(fp)
81126a28:	00c80004 	movi	r3,8192
81126a2c:	10c00115 	stw	r3,4(r2)
81126a30:	0005883a 	mov	r2,zero
81126a34:	00000506 	br	81126a4c <fstat+0xa4>
81126a38:	11269640 	call	81126964 <alt_get_errno>
81126a3c:	1007883a 	mov	r3,r2
81126a40:	00801444 	movi	r2,81
81126a44:	18800015 	stw	r2,0(r3)
81126a48:	00bfffc4 	movi	r2,-1
81126a4c:	e037883a 	mov	sp,fp
81126a50:	dfc00117 	ldw	ra,4(sp)
81126a54:	df000017 	ldw	fp,0(sp)
81126a58:	dec00204 	addi	sp,sp,8
81126a5c:	f800283a 	ret

81126a60 <alt_irq_register>:
81126a60:	defff004 	addi	sp,sp,-64
81126a64:	de00012e 	bgeu	sp,et,81126a6c <alt_irq_register+0xc>
81126a68:	003b68fa 	trap	3
81126a6c:	df000f15 	stw	fp,60(sp)
81126a70:	df000f04 	addi	fp,sp,60
81126a74:	e13ffd15 	stw	r4,-12(fp)
81126a78:	e17ffe15 	stw	r5,-8(fp)
81126a7c:	e1bfff15 	stw	r6,-4(fp)
81126a80:	00bffa84 	movi	r2,-22
81126a84:	e0bff115 	stw	r2,-60(fp)
81126a88:	e0bffd17 	ldw	r2,-12(fp)
81126a8c:	10800828 	cmpgeui	r2,r2,32
81126a90:	1000501e 	bne	r2,zero,81126bd4 <alt_irq_register+0x174>
81126a94:	0005303a 	rdctl	r2,status
81126a98:	e0bff615 	stw	r2,-40(fp)
81126a9c:	e0fff617 	ldw	r3,-40(fp)
81126aa0:	00bfff84 	movi	r2,-2
81126aa4:	1884703a 	and	r2,r3,r2
81126aa8:	1001703a 	wrctl	status,r2
81126aac:	e0bff617 	ldw	r2,-40(fp)
81126ab0:	e0bff315 	stw	r2,-52(fp)
81126ab4:	00a04574 	movhi	r2,33045
81126ab8:	108eda04 	addi	r2,r2,15208
81126abc:	e0fffd17 	ldw	r3,-12(fp)
81126ac0:	180690fa 	slli	r3,r3,3
81126ac4:	10c5883a 	add	r2,r2,r3
81126ac8:	e0ffff17 	ldw	r3,-4(fp)
81126acc:	10c00015 	stw	r3,0(r2)
81126ad0:	00a04574 	movhi	r2,33045
81126ad4:	108eda04 	addi	r2,r2,15208
81126ad8:	e0fffd17 	ldw	r3,-12(fp)
81126adc:	180690fa 	slli	r3,r3,3
81126ae0:	10c5883a 	add	r2,r2,r3
81126ae4:	10800104 	addi	r2,r2,4
81126ae8:	e0fffe17 	ldw	r3,-8(fp)
81126aec:	10c00015 	stw	r3,0(r2)
81126af0:	e0bfff17 	ldw	r2,-4(fp)
81126af4:	10001926 	beq	r2,zero,81126b5c <alt_irq_register+0xfc>
81126af8:	e0bffd17 	ldw	r2,-12(fp)
81126afc:	e0bff215 	stw	r2,-56(fp)
81126b00:	0005303a 	rdctl	r2,status
81126b04:	e0bff715 	stw	r2,-36(fp)
81126b08:	e0fff717 	ldw	r3,-36(fp)
81126b0c:	00bfff84 	movi	r2,-2
81126b10:	1884703a 	and	r2,r3,r2
81126b14:	1001703a 	wrctl	status,r2
81126b18:	e0bff717 	ldw	r2,-36(fp)
81126b1c:	e0bff815 	stw	r2,-32(fp)
81126b20:	00c00044 	movi	r3,1
81126b24:	e0bff217 	ldw	r2,-56(fp)
81126b28:	1884983a 	sll	r2,r3,r2
81126b2c:	1007883a 	mov	r3,r2
81126b30:	d0a06617 	ldw	r2,-32360(gp)
81126b34:	1884b03a 	or	r2,r3,r2
81126b38:	d0a06615 	stw	r2,-32360(gp)
81126b3c:	d0a06617 	ldw	r2,-32360(gp)
81126b40:	100170fa 	wrctl	ienable,r2
81126b44:	e0bff817 	ldw	r2,-32(fp)
81126b48:	e0bff915 	stw	r2,-28(fp)
81126b4c:	e0bff917 	ldw	r2,-28(fp)
81126b50:	1001703a 	wrctl	status,r2
81126b54:	0005883a 	mov	r2,zero
81126b58:	00001906 	br	81126bc0 <alt_irq_register+0x160>
81126b5c:	e0bffd17 	ldw	r2,-12(fp)
81126b60:	e0bff415 	stw	r2,-48(fp)
81126b64:	0005303a 	rdctl	r2,status
81126b68:	e0bffa15 	stw	r2,-24(fp)
81126b6c:	e0fffa17 	ldw	r3,-24(fp)
81126b70:	00bfff84 	movi	r2,-2
81126b74:	1884703a 	and	r2,r3,r2
81126b78:	1001703a 	wrctl	status,r2
81126b7c:	e0bffa17 	ldw	r2,-24(fp)
81126b80:	e0bffb15 	stw	r2,-20(fp)
81126b84:	00c00044 	movi	r3,1
81126b88:	e0bff417 	ldw	r2,-48(fp)
81126b8c:	1884983a 	sll	r2,r3,r2
81126b90:	0084303a 	nor	r2,zero,r2
81126b94:	1007883a 	mov	r3,r2
81126b98:	d0a06617 	ldw	r2,-32360(gp)
81126b9c:	1884703a 	and	r2,r3,r2
81126ba0:	d0a06615 	stw	r2,-32360(gp)
81126ba4:	d0a06617 	ldw	r2,-32360(gp)
81126ba8:	100170fa 	wrctl	ienable,r2
81126bac:	e0bffb17 	ldw	r2,-20(fp)
81126bb0:	e0bffc15 	stw	r2,-16(fp)
81126bb4:	e0bffc17 	ldw	r2,-16(fp)
81126bb8:	1001703a 	wrctl	status,r2
81126bbc:	0005883a 	mov	r2,zero
81126bc0:	e0bff115 	stw	r2,-60(fp)
81126bc4:	e0bff317 	ldw	r2,-52(fp)
81126bc8:	e0bff515 	stw	r2,-44(fp)
81126bcc:	e0bff517 	ldw	r2,-44(fp)
81126bd0:	1001703a 	wrctl	status,r2
81126bd4:	e0bff117 	ldw	r2,-60(fp)
81126bd8:	e037883a 	mov	sp,fp
81126bdc:	df000017 	ldw	fp,0(sp)
81126be0:	dec00104 	addi	sp,sp,4
81126be4:	f800283a 	ret

81126be8 <alt_get_errno>:
81126be8:	defffe04 	addi	sp,sp,-8
81126bec:	de00012e 	bgeu	sp,et,81126bf4 <alt_get_errno+0xc>
81126bf0:	003b68fa 	trap	3
81126bf4:	dfc00115 	stw	ra,4(sp)
81126bf8:	df000015 	stw	fp,0(sp)
81126bfc:	d839883a 	mov	fp,sp
81126c00:	d0a01017 	ldw	r2,-32704(gp)
81126c04:	10000326 	beq	r2,zero,81126c14 <alt_get_errno+0x2c>
81126c08:	d0a01017 	ldw	r2,-32704(gp)
81126c0c:	103ee83a 	callr	r2
81126c10:	00000106 	br	81126c18 <alt_get_errno+0x30>
81126c14:	d0a05e04 	addi	r2,gp,-32392
81126c18:	e037883a 	mov	sp,fp
81126c1c:	dfc00117 	ldw	ra,4(sp)
81126c20:	df000017 	ldw	fp,0(sp)
81126c24:	dec00204 	addi	sp,sp,8
81126c28:	f800283a 	ret

81126c2c <isatty>:
81126c2c:	deffed04 	addi	sp,sp,-76
81126c30:	de00012e 	bgeu	sp,et,81126c38 <isatty+0xc>
81126c34:	003b68fa 	trap	3
81126c38:	dfc01215 	stw	ra,72(sp)
81126c3c:	df001115 	stw	fp,68(sp)
81126c40:	df001104 	addi	fp,sp,68
81126c44:	e13fff15 	stw	r4,-4(fp)
81126c48:	e0bfff17 	ldw	r2,-4(fp)
81126c4c:	10000616 	blt	r2,zero,81126c68 <isatty+0x3c>
81126c50:	e0bfff17 	ldw	r2,-4(fp)
81126c54:	10c00324 	muli	r3,r2,12
81126c58:	00a04534 	movhi	r2,33044
81126c5c:	10baac04 	addi	r2,r2,-5456
81126c60:	1885883a 	add	r2,r3,r2
81126c64:	00000106 	br	81126c6c <isatty+0x40>
81126c68:	0005883a 	mov	r2,zero
81126c6c:	e0bfef15 	stw	r2,-68(fp)
81126c70:	e0bfef17 	ldw	r2,-68(fp)
81126c74:	10000e26 	beq	r2,zero,81126cb0 <isatty+0x84>
81126c78:	e0bfef17 	ldw	r2,-68(fp)
81126c7c:	10800017 	ldw	r2,0(r2)
81126c80:	10800817 	ldw	r2,32(r2)
81126c84:	1000021e 	bne	r2,zero,81126c90 <isatty+0x64>
81126c88:	00800044 	movi	r2,1
81126c8c:	00000d06 	br	81126cc4 <isatty+0x98>
81126c90:	e0bff004 	addi	r2,fp,-64
81126c94:	100b883a 	mov	r5,r2
81126c98:	e13fff17 	ldw	r4,-4(fp)
81126c9c:	11269a80 	call	811269a8 <fstat>
81126ca0:	e0bff117 	ldw	r2,-60(fp)
81126ca4:	10880020 	cmpeqi	r2,r2,8192
81126ca8:	10803fcc 	andi	r2,r2,255
81126cac:	00000506 	br	81126cc4 <isatty+0x98>
81126cb0:	1126be80 	call	81126be8 <alt_get_errno>
81126cb4:	1007883a 	mov	r3,r2
81126cb8:	00801444 	movi	r2,81
81126cbc:	18800015 	stw	r2,0(r3)
81126cc0:	0005883a 	mov	r2,zero
81126cc4:	e037883a 	mov	sp,fp
81126cc8:	dfc00117 	ldw	ra,4(sp)
81126ccc:	df000017 	ldw	fp,0(sp)
81126cd0:	dec00204 	addi	sp,sp,8
81126cd4:	f800283a 	ret

81126cd8 <alt_get_errno>:
81126cd8:	defffe04 	addi	sp,sp,-8
81126cdc:	de00012e 	bgeu	sp,et,81126ce4 <alt_get_errno+0xc>
81126ce0:	003b68fa 	trap	3
81126ce4:	dfc00115 	stw	ra,4(sp)
81126ce8:	df000015 	stw	fp,0(sp)
81126cec:	d839883a 	mov	fp,sp
81126cf0:	d0a01017 	ldw	r2,-32704(gp)
81126cf4:	10000326 	beq	r2,zero,81126d04 <alt_get_errno+0x2c>
81126cf8:	d0a01017 	ldw	r2,-32704(gp)
81126cfc:	103ee83a 	callr	r2
81126d00:	00000106 	br	81126d08 <alt_get_errno+0x30>
81126d04:	d0a05e04 	addi	r2,gp,-32392
81126d08:	e037883a 	mov	sp,fp
81126d0c:	dfc00117 	ldw	ra,4(sp)
81126d10:	df000017 	ldw	fp,0(sp)
81126d14:	dec00204 	addi	sp,sp,8
81126d18:	f800283a 	ret

81126d1c <lseek>:
81126d1c:	defff904 	addi	sp,sp,-28
81126d20:	de00012e 	bgeu	sp,et,81126d28 <lseek+0xc>
81126d24:	003b68fa 	trap	3
81126d28:	dfc00615 	stw	ra,24(sp)
81126d2c:	df000515 	stw	fp,20(sp)
81126d30:	df000504 	addi	fp,sp,20
81126d34:	e13ffd15 	stw	r4,-12(fp)
81126d38:	e17ffe15 	stw	r5,-8(fp)
81126d3c:	e1bfff15 	stw	r6,-4(fp)
81126d40:	e03ffb15 	stw	zero,-20(fp)
81126d44:	e0bffd17 	ldw	r2,-12(fp)
81126d48:	10000616 	blt	r2,zero,81126d64 <lseek+0x48>
81126d4c:	e0bffd17 	ldw	r2,-12(fp)
81126d50:	10c00324 	muli	r3,r2,12
81126d54:	00a04534 	movhi	r2,33044
81126d58:	10baac04 	addi	r2,r2,-5456
81126d5c:	1885883a 	add	r2,r3,r2
81126d60:	00000106 	br	81126d68 <lseek+0x4c>
81126d64:	0005883a 	mov	r2,zero
81126d68:	e0bffc15 	stw	r2,-16(fp)
81126d6c:	e0bffc17 	ldw	r2,-16(fp)
81126d70:	10001026 	beq	r2,zero,81126db4 <lseek+0x98>
81126d74:	e0bffc17 	ldw	r2,-16(fp)
81126d78:	10800017 	ldw	r2,0(r2)
81126d7c:	10800717 	ldw	r2,28(r2)
81126d80:	10000926 	beq	r2,zero,81126da8 <lseek+0x8c>
81126d84:	e0bffc17 	ldw	r2,-16(fp)
81126d88:	10800017 	ldw	r2,0(r2)
81126d8c:	10800717 	ldw	r2,28(r2)
81126d90:	e1bfff17 	ldw	r6,-4(fp)
81126d94:	e17ffe17 	ldw	r5,-8(fp)
81126d98:	e13ffc17 	ldw	r4,-16(fp)
81126d9c:	103ee83a 	callr	r2
81126da0:	e0bffb15 	stw	r2,-20(fp)
81126da4:	00000506 	br	81126dbc <lseek+0xa0>
81126da8:	00bfde84 	movi	r2,-134
81126dac:	e0bffb15 	stw	r2,-20(fp)
81126db0:	00000206 	br	81126dbc <lseek+0xa0>
81126db4:	00bfebc4 	movi	r2,-81
81126db8:	e0bffb15 	stw	r2,-20(fp)
81126dbc:	e0bffb17 	ldw	r2,-20(fp)
81126dc0:	1000070e 	bge	r2,zero,81126de0 <lseek+0xc4>
81126dc4:	1126cd80 	call	81126cd8 <alt_get_errno>
81126dc8:	1007883a 	mov	r3,r2
81126dcc:	e0bffb17 	ldw	r2,-20(fp)
81126dd0:	0085c83a 	sub	r2,zero,r2
81126dd4:	18800015 	stw	r2,0(r3)
81126dd8:	00bfffc4 	movi	r2,-1
81126ddc:	e0bffb15 	stw	r2,-20(fp)
81126de0:	e0bffb17 	ldw	r2,-20(fp)
81126de4:	e037883a 	mov	sp,fp
81126de8:	dfc00117 	ldw	ra,4(sp)
81126dec:	df000017 	ldw	fp,0(sp)
81126df0:	dec00204 	addi	sp,sp,8
81126df4:	f800283a 	ret

81126df8 <alt_main>:
81126df8:	defff904 	addi	sp,sp,-28
81126dfc:	de00012e 	bgeu	sp,et,81126e04 <alt_main+0xc>
81126e00:	003b68fa 	trap	3
81126e04:	dfc00615 	stw	ra,24(sp)
81126e08:	df000515 	stw	fp,20(sp)
81126e0c:	df000504 	addi	fp,sp,20
81126e10:	0009883a 	mov	r4,zero
81126e14:	11319300 	call	81131930 <alt_irq_init>
81126e18:	11283c40 	call	811283c4 <OSInit>
81126e1c:	01000044 	movi	r4,1
81126e20:	112e0e00 	call	8112e0e0 <OSSemCreate>
81126e24:	d0a06d15 	stw	r2,-32332(gp)
81126e28:	01000044 	movi	r4,1
81126e2c:	112e0e00 	call	8112e0e0 <OSSemCreate>
81126e30:	d0a06f15 	stw	r2,-32324(gp)
81126e34:	d0a06504 	addi	r2,gp,-32364
81126e38:	e0bffc15 	stw	r2,-16(fp)
81126e3c:	00800044 	movi	r2,1
81126e40:	e0bffd0d 	sth	r2,-12(fp)
81126e44:	e0bffd0b 	ldhu	r2,-12(fp)
81126e48:	1009883a 	mov	r4,r2
81126e4c:	112e0e00 	call	8112e0e0 <OSSemCreate>
81126e50:	1007883a 	mov	r3,r2
81126e54:	e0bffc17 	ldw	r2,-16(fp)
81126e58:	10c00015 	stw	r3,0(r2)
81126e5c:	11319700 	call	81131970 <alt_sys_init>
81126e60:	01a04534 	movhi	r6,33044
81126e64:	31b77904 	addi	r6,r6,-8732
81126e68:	01604534 	movhi	r5,33044
81126e6c:	29777e04 	addi	r5,r5,-8712
81126e70:	01204534 	movhi	r4,33044
81126e74:	21377e04 	addi	r4,r4,-8712
81126e78:	113a29c0 	call	8113a29c <alt_io_redirect>
81126e7c:	1139bac0 	call	81139bac <_do_ctors>
81126e80:	01204534 	movhi	r4,33044
81126e84:	21270504 	addi	r4,r4,-25580
81126e88:	113aa500 	call	8113aa50 <atexit>
81126e8c:	d0a06717 	ldw	r2,-32356(gp)
81126e90:	d0e06817 	ldw	r3,-32352(gp)
81126e94:	d1206917 	ldw	r4,-32348(gp)
81126e98:	200d883a 	mov	r6,r4
81126e9c:	180b883a 	mov	r5,r3
81126ea0:	1009883a 	mov	r4,r2
81126ea4:	110b5f80 	call	8110b5f8 <main>
81126ea8:	e0bffb15 	stw	r2,-20(fp)
81126eac:	01000044 	movi	r4,1
81126eb0:	11268300 	call	81126830 <close>
81126eb4:	e13ffb17 	ldw	r4,-20(fp)
81126eb8:	113aa640 	call	8113aa64 <exit>

81126ebc <alt_get_errno>:
81126ebc:	defffe04 	addi	sp,sp,-8
81126ec0:	de00012e 	bgeu	sp,et,81126ec8 <alt_get_errno+0xc>
81126ec4:	003b68fa 	trap	3
81126ec8:	dfc00115 	stw	ra,4(sp)
81126ecc:	df000015 	stw	fp,0(sp)
81126ed0:	d839883a 	mov	fp,sp
81126ed4:	d0a01017 	ldw	r2,-32704(gp)
81126ed8:	10000326 	beq	r2,zero,81126ee8 <alt_get_errno+0x2c>
81126edc:	d0a01017 	ldw	r2,-32704(gp)
81126ee0:	103ee83a 	callr	r2
81126ee4:	00000106 	br	81126eec <alt_get_errno+0x30>
81126ee8:	d0a05e04 	addi	r2,gp,-32392
81126eec:	e037883a 	mov	sp,fp
81126ef0:	dfc00117 	ldw	ra,4(sp)
81126ef4:	df000017 	ldw	fp,0(sp)
81126ef8:	dec00204 	addi	sp,sp,8
81126efc:	f800283a 	ret

81126f00 <alt_file_locked>:
81126f00:	defffd04 	addi	sp,sp,-12
81126f04:	de00012e 	bgeu	sp,et,81126f0c <alt_file_locked+0xc>
81126f08:	003b68fa 	trap	3
81126f0c:	df000215 	stw	fp,8(sp)
81126f10:	df000204 	addi	fp,sp,8
81126f14:	e13fff15 	stw	r4,-4(fp)
81126f18:	e0bfff17 	ldw	r2,-4(fp)
81126f1c:	10800217 	ldw	r2,8(r2)
81126f20:	10d00034 	orhi	r3,r2,16384
81126f24:	e0bfff17 	ldw	r2,-4(fp)
81126f28:	10c00215 	stw	r3,8(r2)
81126f2c:	e03ffe15 	stw	zero,-8(fp)
81126f30:	00001d06 	br	81126fa8 <alt_file_locked+0xa8>
81126f34:	00a04534 	movhi	r2,33044
81126f38:	10baac04 	addi	r2,r2,-5456
81126f3c:	e0fffe17 	ldw	r3,-8(fp)
81126f40:	18c00324 	muli	r3,r3,12
81126f44:	10c5883a 	add	r2,r2,r3
81126f48:	10c00017 	ldw	r3,0(r2)
81126f4c:	e0bfff17 	ldw	r2,-4(fp)
81126f50:	10800017 	ldw	r2,0(r2)
81126f54:	1880111e 	bne	r3,r2,81126f9c <alt_file_locked+0x9c>
81126f58:	00a04534 	movhi	r2,33044
81126f5c:	10baac04 	addi	r2,r2,-5456
81126f60:	e0fffe17 	ldw	r3,-8(fp)
81126f64:	18c00324 	muli	r3,r3,12
81126f68:	10c5883a 	add	r2,r2,r3
81126f6c:	10800204 	addi	r2,r2,8
81126f70:	10800017 	ldw	r2,0(r2)
81126f74:	1000090e 	bge	r2,zero,81126f9c <alt_file_locked+0x9c>
81126f78:	e0bffe17 	ldw	r2,-8(fp)
81126f7c:	10c00324 	muli	r3,r2,12
81126f80:	00a04534 	movhi	r2,33044
81126f84:	10baac04 	addi	r2,r2,-5456
81126f88:	1887883a 	add	r3,r3,r2
81126f8c:	e0bfff17 	ldw	r2,-4(fp)
81126f90:	18800226 	beq	r3,r2,81126f9c <alt_file_locked+0x9c>
81126f94:	00bffcc4 	movi	r2,-13
81126f98:	00000806 	br	81126fbc <alt_file_locked+0xbc>
81126f9c:	e0bffe17 	ldw	r2,-8(fp)
81126fa0:	10800044 	addi	r2,r2,1
81126fa4:	e0bffe15 	stw	r2,-8(fp)
81126fa8:	d0a00f17 	ldw	r2,-32708(gp)
81126fac:	1007883a 	mov	r3,r2
81126fb0:	e0bffe17 	ldw	r2,-8(fp)
81126fb4:	18bfdf2e 	bgeu	r3,r2,81126f34 <__reset+0xfb106f34>
81126fb8:	0005883a 	mov	r2,zero
81126fbc:	e037883a 	mov	sp,fp
81126fc0:	df000017 	ldw	fp,0(sp)
81126fc4:	dec00104 	addi	sp,sp,4
81126fc8:	f800283a 	ret

81126fcc <open>:
81126fcc:	defff604 	addi	sp,sp,-40
81126fd0:	de00012e 	bgeu	sp,et,81126fd8 <open+0xc>
81126fd4:	003b68fa 	trap	3
81126fd8:	dfc00915 	stw	ra,36(sp)
81126fdc:	df000815 	stw	fp,32(sp)
81126fe0:	df000804 	addi	fp,sp,32
81126fe4:	e13ffd15 	stw	r4,-12(fp)
81126fe8:	e17ffe15 	stw	r5,-8(fp)
81126fec:	e1bfff15 	stw	r6,-4(fp)
81126ff0:	00bfffc4 	movi	r2,-1
81126ff4:	e0bff915 	stw	r2,-28(fp)
81126ff8:	00bffb44 	movi	r2,-19
81126ffc:	e0bffa15 	stw	r2,-24(fp)
81127000:	e03ffb15 	stw	zero,-20(fp)
81127004:	d1600d04 	addi	r5,gp,-32716
81127008:	e13ffd17 	ldw	r4,-12(fp)
8112700c:	1139c7c0 	call	81139c7c <alt_find_dev>
81127010:	e0bff815 	stw	r2,-32(fp)
81127014:	e0bff817 	ldw	r2,-32(fp)
81127018:	1000051e 	bne	r2,zero,81127030 <open+0x64>
8112701c:	e13ffd17 	ldw	r4,-12(fp)
81127020:	1139d140 	call	81139d14 <alt_find_file>
81127024:	e0bff815 	stw	r2,-32(fp)
81127028:	00800044 	movi	r2,1
8112702c:	e0bffb15 	stw	r2,-20(fp)
81127030:	e0bff817 	ldw	r2,-32(fp)
81127034:	10002926 	beq	r2,zero,811270dc <open+0x110>
81127038:	e13ff817 	ldw	r4,-32(fp)
8112703c:	1139e240 	call	81139e24 <alt_get_fd>
81127040:	e0bff915 	stw	r2,-28(fp)
81127044:	e0bff917 	ldw	r2,-28(fp)
81127048:	1000030e 	bge	r2,zero,81127058 <open+0x8c>
8112704c:	e0bff917 	ldw	r2,-28(fp)
81127050:	e0bffa15 	stw	r2,-24(fp)
81127054:	00002306 	br	811270e4 <open+0x118>
81127058:	e0bff917 	ldw	r2,-28(fp)
8112705c:	10c00324 	muli	r3,r2,12
81127060:	00a04534 	movhi	r2,33044
81127064:	10baac04 	addi	r2,r2,-5456
81127068:	1885883a 	add	r2,r3,r2
8112706c:	e0bffc15 	stw	r2,-16(fp)
81127070:	e0fffe17 	ldw	r3,-8(fp)
81127074:	00900034 	movhi	r2,16384
81127078:	10bfffc4 	addi	r2,r2,-1
8112707c:	1886703a 	and	r3,r3,r2
81127080:	e0bffc17 	ldw	r2,-16(fp)
81127084:	10c00215 	stw	r3,8(r2)
81127088:	e0bffb17 	ldw	r2,-20(fp)
8112708c:	1000051e 	bne	r2,zero,811270a4 <open+0xd8>
81127090:	e13ffc17 	ldw	r4,-16(fp)
81127094:	1126f000 	call	81126f00 <alt_file_locked>
81127098:	e0bffa15 	stw	r2,-24(fp)
8112709c:	e0bffa17 	ldw	r2,-24(fp)
811270a0:	10001016 	blt	r2,zero,811270e4 <open+0x118>
811270a4:	e0bff817 	ldw	r2,-32(fp)
811270a8:	10800317 	ldw	r2,12(r2)
811270ac:	10000826 	beq	r2,zero,811270d0 <open+0x104>
811270b0:	e0bff817 	ldw	r2,-32(fp)
811270b4:	10800317 	ldw	r2,12(r2)
811270b8:	e1ffff17 	ldw	r7,-4(fp)
811270bc:	e1bffe17 	ldw	r6,-8(fp)
811270c0:	e17ffd17 	ldw	r5,-12(fp)
811270c4:	e13ffc17 	ldw	r4,-16(fp)
811270c8:	103ee83a 	callr	r2
811270cc:	00000106 	br	811270d4 <open+0x108>
811270d0:	0005883a 	mov	r2,zero
811270d4:	e0bffa15 	stw	r2,-24(fp)
811270d8:	00000206 	br	811270e4 <open+0x118>
811270dc:	00bffb44 	movi	r2,-19
811270e0:	e0bffa15 	stw	r2,-24(fp)
811270e4:	e0bffa17 	ldw	r2,-24(fp)
811270e8:	1000090e 	bge	r2,zero,81127110 <open+0x144>
811270ec:	e13ff917 	ldw	r4,-28(fp)
811270f0:	11272700 	call	81127270 <alt_release_fd>
811270f4:	1126ebc0 	call	81126ebc <alt_get_errno>
811270f8:	1007883a 	mov	r3,r2
811270fc:	e0bffa17 	ldw	r2,-24(fp)
81127100:	0085c83a 	sub	r2,zero,r2
81127104:	18800015 	stw	r2,0(r3)
81127108:	00bfffc4 	movi	r2,-1
8112710c:	00000106 	br	81127114 <open+0x148>
81127110:	e0bff917 	ldw	r2,-28(fp)
81127114:	e037883a 	mov	sp,fp
81127118:	dfc00117 	ldw	ra,4(sp)
8112711c:	df000017 	ldw	fp,0(sp)
81127120:	dec00204 	addi	sp,sp,8
81127124:	f800283a 	ret

81127128 <alt_get_errno>:
81127128:	defffe04 	addi	sp,sp,-8
8112712c:	de00012e 	bgeu	sp,et,81127134 <alt_get_errno+0xc>
81127130:	003b68fa 	trap	3
81127134:	dfc00115 	stw	ra,4(sp)
81127138:	df000015 	stw	fp,0(sp)
8112713c:	d839883a 	mov	fp,sp
81127140:	d0a01017 	ldw	r2,-32704(gp)
81127144:	10000326 	beq	r2,zero,81127154 <alt_get_errno+0x2c>
81127148:	d0a01017 	ldw	r2,-32704(gp)
8112714c:	103ee83a 	callr	r2
81127150:	00000106 	br	81127158 <alt_get_errno+0x30>
81127154:	d0a05e04 	addi	r2,gp,-32392
81127158:	e037883a 	mov	sp,fp
8112715c:	dfc00117 	ldw	ra,4(sp)
81127160:	df000017 	ldw	fp,0(sp)
81127164:	dec00204 	addi	sp,sp,8
81127168:	f800283a 	ret

8112716c <read>:
8112716c:	defff904 	addi	sp,sp,-28
81127170:	de00012e 	bgeu	sp,et,81127178 <read+0xc>
81127174:	003b68fa 	trap	3
81127178:	dfc00615 	stw	ra,24(sp)
8112717c:	df000515 	stw	fp,20(sp)
81127180:	df000504 	addi	fp,sp,20
81127184:	e13ffd15 	stw	r4,-12(fp)
81127188:	e17ffe15 	stw	r5,-8(fp)
8112718c:	e1bfff15 	stw	r6,-4(fp)
81127190:	e0bffd17 	ldw	r2,-12(fp)
81127194:	10000616 	blt	r2,zero,811271b0 <read+0x44>
81127198:	e0bffd17 	ldw	r2,-12(fp)
8112719c:	10c00324 	muli	r3,r2,12
811271a0:	00a04534 	movhi	r2,33044
811271a4:	10baac04 	addi	r2,r2,-5456
811271a8:	1885883a 	add	r2,r3,r2
811271ac:	00000106 	br	811271b4 <read+0x48>
811271b0:	0005883a 	mov	r2,zero
811271b4:	e0bffb15 	stw	r2,-20(fp)
811271b8:	e0bffb17 	ldw	r2,-20(fp)
811271bc:	10002226 	beq	r2,zero,81127248 <read+0xdc>
811271c0:	e0bffb17 	ldw	r2,-20(fp)
811271c4:	10800217 	ldw	r2,8(r2)
811271c8:	108000cc 	andi	r2,r2,3
811271cc:	10800060 	cmpeqi	r2,r2,1
811271d0:	1000181e 	bne	r2,zero,81127234 <read+0xc8>
811271d4:	e0bffb17 	ldw	r2,-20(fp)
811271d8:	10800017 	ldw	r2,0(r2)
811271dc:	10800517 	ldw	r2,20(r2)
811271e0:	10001426 	beq	r2,zero,81127234 <read+0xc8>
811271e4:	e0bffb17 	ldw	r2,-20(fp)
811271e8:	10800017 	ldw	r2,0(r2)
811271ec:	10800517 	ldw	r2,20(r2)
811271f0:	e0ffff17 	ldw	r3,-4(fp)
811271f4:	180d883a 	mov	r6,r3
811271f8:	e17ffe17 	ldw	r5,-8(fp)
811271fc:	e13ffb17 	ldw	r4,-20(fp)
81127200:	103ee83a 	callr	r2
81127204:	e0bffc15 	stw	r2,-16(fp)
81127208:	e0bffc17 	ldw	r2,-16(fp)
8112720c:	1000070e 	bge	r2,zero,8112722c <read+0xc0>
81127210:	11271280 	call	81127128 <alt_get_errno>
81127214:	1007883a 	mov	r3,r2
81127218:	e0bffc17 	ldw	r2,-16(fp)
8112721c:	0085c83a 	sub	r2,zero,r2
81127220:	18800015 	stw	r2,0(r3)
81127224:	00bfffc4 	movi	r2,-1
81127228:	00000c06 	br	8112725c <read+0xf0>
8112722c:	e0bffc17 	ldw	r2,-16(fp)
81127230:	00000a06 	br	8112725c <read+0xf0>
81127234:	11271280 	call	81127128 <alt_get_errno>
81127238:	1007883a 	mov	r3,r2
8112723c:	00800344 	movi	r2,13
81127240:	18800015 	stw	r2,0(r3)
81127244:	00000406 	br	81127258 <read+0xec>
81127248:	11271280 	call	81127128 <alt_get_errno>
8112724c:	1007883a 	mov	r3,r2
81127250:	00801444 	movi	r2,81
81127254:	18800015 	stw	r2,0(r3)
81127258:	00bfffc4 	movi	r2,-1
8112725c:	e037883a 	mov	sp,fp
81127260:	dfc00117 	ldw	ra,4(sp)
81127264:	df000017 	ldw	fp,0(sp)
81127268:	dec00204 	addi	sp,sp,8
8112726c:	f800283a 	ret

81127270 <alt_release_fd>:
81127270:	defffe04 	addi	sp,sp,-8
81127274:	de00012e 	bgeu	sp,et,8112727c <alt_release_fd+0xc>
81127278:	003b68fa 	trap	3
8112727c:	df000115 	stw	fp,4(sp)
81127280:	df000104 	addi	fp,sp,4
81127284:	e13fff15 	stw	r4,-4(fp)
81127288:	e0bfff17 	ldw	r2,-4(fp)
8112728c:	108000d0 	cmplti	r2,r2,3
81127290:	10000d1e 	bne	r2,zero,811272c8 <alt_release_fd+0x58>
81127294:	00a04534 	movhi	r2,33044
81127298:	10baac04 	addi	r2,r2,-5456
8112729c:	e0ffff17 	ldw	r3,-4(fp)
811272a0:	18c00324 	muli	r3,r3,12
811272a4:	10c5883a 	add	r2,r2,r3
811272a8:	10800204 	addi	r2,r2,8
811272ac:	10000015 	stw	zero,0(r2)
811272b0:	00a04534 	movhi	r2,33044
811272b4:	10baac04 	addi	r2,r2,-5456
811272b8:	e0ffff17 	ldw	r3,-4(fp)
811272bc:	18c00324 	muli	r3,r3,12
811272c0:	10c5883a 	add	r2,r2,r3
811272c4:	10000015 	stw	zero,0(r2)
811272c8:	0001883a 	nop
811272cc:	e037883a 	mov	sp,fp
811272d0:	df000017 	ldw	fp,0(sp)
811272d4:	dec00104 	addi	sp,sp,4
811272d8:	f800283a 	ret

811272dc <sbrk>:
811272dc:	defff604 	addi	sp,sp,-40
811272e0:	de00012e 	bgeu	sp,et,811272e8 <sbrk+0xc>
811272e4:	003b68fa 	trap	3
811272e8:	df000915 	stw	fp,36(sp)
811272ec:	df000904 	addi	fp,sp,36
811272f0:	e13fff15 	stw	r4,-4(fp)
811272f4:	0005303a 	rdctl	r2,status
811272f8:	e0bffe15 	stw	r2,-8(fp)
811272fc:	e0fffe17 	ldw	r3,-8(fp)
81127300:	00bfff84 	movi	r2,-2
81127304:	1884703a 	and	r2,r3,r2
81127308:	1001703a 	wrctl	status,r2
8112730c:	e0bffe17 	ldw	r2,-8(fp)
81127310:	e0bff815 	stw	r2,-32(fp)
81127314:	d0a01217 	ldw	r2,-32696(gp)
81127318:	10c000c4 	addi	r3,r2,3
8112731c:	00bfff04 	movi	r2,-4
81127320:	1884703a 	and	r2,r3,r2
81127324:	d0a01215 	stw	r2,-32696(gp)
81127328:	d0e01217 	ldw	r3,-32696(gp)
8112732c:	e0bfff17 	ldw	r2,-4(fp)
81127330:	1887883a 	add	r3,r3,r2
81127334:	00a04834 	movhi	r2,33056
81127338:	10a80004 	addi	r2,r2,-24576
8112733c:	10c0062e 	bgeu	r2,r3,81127358 <sbrk+0x7c>
81127340:	e0bff817 	ldw	r2,-32(fp)
81127344:	e0bff715 	stw	r2,-36(fp)
81127348:	e0bff717 	ldw	r2,-36(fp)
8112734c:	1001703a 	wrctl	status,r2
81127350:	00bfffc4 	movi	r2,-1
81127354:	00001c06 	br	811273c8 <sbrk+0xec>
81127358:	d0a01217 	ldw	r2,-32696(gp)
8112735c:	e0bffa15 	stw	r2,-24(fp)
81127360:	d0e01217 	ldw	r3,-32696(gp)
81127364:	e0bfff17 	ldw	r2,-4(fp)
81127368:	1885883a 	add	r2,r3,r2
8112736c:	d0a01215 	stw	r2,-32696(gp)
81127370:	c005883a 	mov	r2,et
81127374:	e0bff915 	stw	r2,-28(fp)
81127378:	e0fff917 	ldw	r3,-28(fp)
8112737c:	e0bffa17 	ldw	r2,-24(fp)
81127380:	18800c1e 	bne	r3,r2,811273b4 <sbrk+0xd8>
81127384:	d805883a 	mov	r2,sp
81127388:	e0bffb15 	stw	r2,-20(fp)
8112738c:	e0bffb17 	ldw	r2,-20(fp)
81127390:	d0e01217 	ldw	r3,-32696(gp)
81127394:	18800136 	bltu	r3,r2,8112739c <sbrk+0xc0>
81127398:	003da0fa 	break	3
8112739c:	d0a01217 	ldw	r2,-32696(gp)
811273a0:	e0bffc15 	stw	r2,-16(fp)
811273a4:	e0bffc17 	ldw	r2,-16(fp)
811273a8:	d0a00015 	stw	r2,-32768(gp)
811273ac:	e0bffc17 	ldw	r2,-16(fp)
811273b0:	1031883a 	mov	et,r2
811273b4:	e0bff817 	ldw	r2,-32(fp)
811273b8:	e0bffd15 	stw	r2,-12(fp)
811273bc:	e0bffd17 	ldw	r2,-12(fp)
811273c0:	1001703a 	wrctl	status,r2
811273c4:	e0bffa17 	ldw	r2,-24(fp)
811273c8:	e037883a 	mov	sp,fp
811273cc:	df000017 	ldw	fp,0(sp)
811273d0:	dec00104 	addi	sp,sp,4
811273d4:	f800283a 	ret

811273d8 <alt_alarm_stop>:
811273d8:	defffa04 	addi	sp,sp,-24
811273dc:	de00012e 	bgeu	sp,et,811273e4 <alt_alarm_stop+0xc>
811273e0:	003b68fa 	trap	3
811273e4:	df000515 	stw	fp,20(sp)
811273e8:	df000504 	addi	fp,sp,20
811273ec:	e13fff15 	stw	r4,-4(fp)
811273f0:	0005303a 	rdctl	r2,status
811273f4:	e0bffc15 	stw	r2,-16(fp)
811273f8:	e0fffc17 	ldw	r3,-16(fp)
811273fc:	00bfff84 	movi	r2,-2
81127400:	1884703a 	and	r2,r3,r2
81127404:	1001703a 	wrctl	status,r2
81127408:	e0bffc17 	ldw	r2,-16(fp)
8112740c:	e0bffb15 	stw	r2,-20(fp)
81127410:	e0bfff17 	ldw	r2,-4(fp)
81127414:	e0bffd15 	stw	r2,-12(fp)
81127418:	e0bffd17 	ldw	r2,-12(fp)
8112741c:	10800017 	ldw	r2,0(r2)
81127420:	e0fffd17 	ldw	r3,-12(fp)
81127424:	18c00117 	ldw	r3,4(r3)
81127428:	10c00115 	stw	r3,4(r2)
8112742c:	e0bffd17 	ldw	r2,-12(fp)
81127430:	10800117 	ldw	r2,4(r2)
81127434:	e0fffd17 	ldw	r3,-12(fp)
81127438:	18c00017 	ldw	r3,0(r3)
8112743c:	10c00015 	stw	r3,0(r2)
81127440:	e0bffd17 	ldw	r2,-12(fp)
81127444:	e0fffd17 	ldw	r3,-12(fp)
81127448:	10c00115 	stw	r3,4(r2)
8112744c:	e0bffd17 	ldw	r2,-12(fp)
81127450:	e0fffd17 	ldw	r3,-12(fp)
81127454:	10c00015 	stw	r3,0(r2)
81127458:	e0bffb17 	ldw	r2,-20(fp)
8112745c:	e0bffe15 	stw	r2,-8(fp)
81127460:	e0bffe17 	ldw	r2,-8(fp)
81127464:	1001703a 	wrctl	status,r2
81127468:	0001883a 	nop
8112746c:	e037883a 	mov	sp,fp
81127470:	df000017 	ldw	fp,0(sp)
81127474:	dec00104 	addi	sp,sp,4
81127478:	f800283a 	ret

8112747c <alt_tick>:
8112747c:	defffb04 	addi	sp,sp,-20
81127480:	de00012e 	bgeu	sp,et,81127488 <alt_tick+0xc>
81127484:	003b68fa 	trap	3
81127488:	dfc00415 	stw	ra,16(sp)
8112748c:	df000315 	stw	fp,12(sp)
81127490:	df000304 	addi	fp,sp,12
81127494:	d0a01317 	ldw	r2,-32692(gp)
81127498:	e0bffd15 	stw	r2,-12(fp)
8112749c:	d0a06b17 	ldw	r2,-32340(gp)
811274a0:	10800044 	addi	r2,r2,1
811274a4:	d0a06b15 	stw	r2,-32340(gp)
811274a8:	00002e06 	br	81127564 <alt_tick+0xe8>
811274ac:	e0bffd17 	ldw	r2,-12(fp)
811274b0:	10800017 	ldw	r2,0(r2)
811274b4:	e0bffe15 	stw	r2,-8(fp)
811274b8:	e0bffd17 	ldw	r2,-12(fp)
811274bc:	10800403 	ldbu	r2,16(r2)
811274c0:	10803fcc 	andi	r2,r2,255
811274c4:	10000426 	beq	r2,zero,811274d8 <alt_tick+0x5c>
811274c8:	d0a06b17 	ldw	r2,-32340(gp)
811274cc:	1000021e 	bne	r2,zero,811274d8 <alt_tick+0x5c>
811274d0:	e0bffd17 	ldw	r2,-12(fp)
811274d4:	10000405 	stb	zero,16(r2)
811274d8:	e0bffd17 	ldw	r2,-12(fp)
811274dc:	10800217 	ldw	r2,8(r2)
811274e0:	d0e06b17 	ldw	r3,-32340(gp)
811274e4:	18801d36 	bltu	r3,r2,8112755c <alt_tick+0xe0>
811274e8:	e0bffd17 	ldw	r2,-12(fp)
811274ec:	10800403 	ldbu	r2,16(r2)
811274f0:	10803fcc 	andi	r2,r2,255
811274f4:	1000191e 	bne	r2,zero,8112755c <alt_tick+0xe0>
811274f8:	e0bffd17 	ldw	r2,-12(fp)
811274fc:	10800317 	ldw	r2,12(r2)
81127500:	e0fffd17 	ldw	r3,-12(fp)
81127504:	18c00517 	ldw	r3,20(r3)
81127508:	1809883a 	mov	r4,r3
8112750c:	103ee83a 	callr	r2
81127510:	e0bfff15 	stw	r2,-4(fp)
81127514:	e0bfff17 	ldw	r2,-4(fp)
81127518:	1000031e 	bne	r2,zero,81127528 <alt_tick+0xac>
8112751c:	e13ffd17 	ldw	r4,-12(fp)
81127520:	11273d80 	call	811273d8 <alt_alarm_stop>
81127524:	00000d06 	br	8112755c <alt_tick+0xe0>
81127528:	e0bffd17 	ldw	r2,-12(fp)
8112752c:	10c00217 	ldw	r3,8(r2)
81127530:	e0bfff17 	ldw	r2,-4(fp)
81127534:	1887883a 	add	r3,r3,r2
81127538:	e0bffd17 	ldw	r2,-12(fp)
8112753c:	10c00215 	stw	r3,8(r2)
81127540:	e0bffd17 	ldw	r2,-12(fp)
81127544:	10c00217 	ldw	r3,8(r2)
81127548:	d0a06b17 	ldw	r2,-32340(gp)
8112754c:	1880032e 	bgeu	r3,r2,8112755c <alt_tick+0xe0>
81127550:	e0bffd17 	ldw	r2,-12(fp)
81127554:	00c00044 	movi	r3,1
81127558:	10c00405 	stb	r3,16(r2)
8112755c:	e0bffe17 	ldw	r2,-8(fp)
81127560:	e0bffd15 	stw	r2,-12(fp)
81127564:	e0fffd17 	ldw	r3,-12(fp)
81127568:	d0a01304 	addi	r2,gp,-32692
8112756c:	18bfcf1e 	bne	r3,r2,811274ac <__reset+0xfb1074ac>
81127570:	11288240 	call	81128824 <OSTimeTick>
81127574:	0001883a 	nop
81127578:	e037883a 	mov	sp,fp
8112757c:	dfc00117 	ldw	ra,4(sp)
81127580:	df000017 	ldw	fp,0(sp)
81127584:	dec00204 	addi	sp,sp,8
81127588:	f800283a 	ret

8112758c <usleep>:
8112758c:	defffb04 	addi	sp,sp,-20
81127590:	de00012e 	bgeu	sp,et,81127598 <usleep+0xc>
81127594:	003b68fa 	trap	3
81127598:	dfc00415 	stw	ra,16(sp)
8112759c:	df000315 	stw	fp,12(sp)
811275a0:	df000304 	addi	fp,sp,12
811275a4:	e13fff15 	stw	r4,-4(fp)
811275a8:	d0a07303 	ldbu	r2,-32308(gp)
811275ac:	10803fcc 	andi	r2,r2,255
811275b0:	1000031e 	bne	r2,zero,811275c0 <usleep+0x34>
811275b4:	e13fff17 	ldw	r4,-4(fp)
811275b8:	11266bc0 	call	811266bc <alt_busy_sleep>
811275bc:	00003d06 	br	811276b4 <usleep+0x128>
811275c0:	d0a06a17 	ldw	r2,-32344(gp)
811275c4:	e0bffe15 	stw	r2,-8(fp)
811275c8:	e0ffff17 	ldw	r3,-4(fp)
811275cc:	0090c734 	movhi	r2,17180
811275d0:	10b7a0c4 	addi	r2,r2,-8573
811275d4:	1888383a 	mulxuu	r4,r3,r2
811275d8:	1885383a 	mul	r2,r3,r2
811275dc:	1013883a 	mov	r9,r2
811275e0:	2015883a 	mov	r10,r4
811275e4:	5006d4ba 	srli	r3,r10,18
811275e8:	e0bffe17 	ldw	r2,-8(fp)
811275ec:	1893383a 	mul	r9,r3,r2
811275f0:	e0ffff17 	ldw	r3,-4(fp)
811275f4:	0090c734 	movhi	r2,17180
811275f8:	10b7a0c4 	addi	r2,r2,-8573
811275fc:	1888383a 	mulxuu	r4,r3,r2
81127600:	1885383a 	mul	r2,r3,r2
81127604:	100f883a 	mov	r7,r2
81127608:	2011883a 	mov	r8,r4
8112760c:	4004d4ba 	srli	r2,r8,18
81127610:	010003f4 	movhi	r4,15
81127614:	21109004 	addi	r4,r4,16960
81127618:	1105383a 	mul	r2,r2,r4
8112761c:	1885c83a 	sub	r2,r3,r2
81127620:	e0fffe17 	ldw	r3,-8(fp)
81127624:	10c7383a 	mul	r3,r2,r3
81127628:	0090c734 	movhi	r2,17180
8112762c:	10b7a0c4 	addi	r2,r2,-8573
81127630:	1888383a 	mulxuu	r4,r3,r2
81127634:	1885383a 	mul	r2,r3,r2
81127638:	100b883a 	mov	r5,r2
8112763c:	200d883a 	mov	r6,r4
81127640:	3004d4ba 	srli	r2,r6,18
81127644:	4885883a 	add	r2,r9,r2
81127648:	e0bffd15 	stw	r2,-12(fp)
8112764c:	00000706 	br	8112766c <usleep+0xe0>
81127650:	013fffd4 	movui	r4,65535
81127654:	11302940 	call	81130294 <OSTimeDly>
81127658:	e0fffd17 	ldw	r3,-12(fp)
8112765c:	00bffff4 	movhi	r2,65535
81127660:	10800044 	addi	r2,r2,1
81127664:	1885883a 	add	r2,r3,r2
81127668:	e0bffd15 	stw	r2,-12(fp)
8112766c:	e0bffd17 	ldw	r2,-12(fp)
81127670:	00ffffd4 	movui	r3,65535
81127674:	18bff636 	bltu	r3,r2,81127650 <__reset+0xfb107650>
81127678:	e0bffd17 	ldw	r2,-12(fp)
8112767c:	10bfffcc 	andi	r2,r2,65535
81127680:	1009883a 	mov	r4,r2
81127684:	11302940 	call	81130294 <OSTimeDly>
81127688:	008003f4 	movhi	r2,15
8112768c:	10909004 	addi	r2,r2,16960
81127690:	e0fffe17 	ldw	r3,-8(fp)
81127694:	10c7203a 	divu	r3,r2,r3
81127698:	e0bfff17 	ldw	r2,-4(fp)
8112769c:	10c9203a 	divu	r4,r2,r3
811276a0:	20c7383a 	mul	r3,r4,r3
811276a4:	10c5c83a 	sub	r2,r2,r3
811276a8:	1009883a 	mov	r4,r2
811276ac:	11266bc0 	call	811266bc <alt_busy_sleep>
811276b0:	0005883a 	mov	r2,zero
811276b4:	e037883a 	mov	sp,fp
811276b8:	dfc00117 	ldw	ra,4(sp)
811276bc:	df000017 	ldw	fp,0(sp)
811276c0:	dec00204 	addi	sp,sp,8
811276c4:	f800283a 	ret

811276c8 <alt_get_errno>:
811276c8:	defffe04 	addi	sp,sp,-8
811276cc:	de00012e 	bgeu	sp,et,811276d4 <alt_get_errno+0xc>
811276d0:	003b68fa 	trap	3
811276d4:	dfc00115 	stw	ra,4(sp)
811276d8:	df000015 	stw	fp,0(sp)
811276dc:	d839883a 	mov	fp,sp
811276e0:	d0a01017 	ldw	r2,-32704(gp)
811276e4:	10000326 	beq	r2,zero,811276f4 <alt_get_errno+0x2c>
811276e8:	d0a01017 	ldw	r2,-32704(gp)
811276ec:	103ee83a 	callr	r2
811276f0:	00000106 	br	811276f8 <alt_get_errno+0x30>
811276f4:	d0a05e04 	addi	r2,gp,-32392
811276f8:	e037883a 	mov	sp,fp
811276fc:	dfc00117 	ldw	ra,4(sp)
81127700:	df000017 	ldw	fp,0(sp)
81127704:	dec00204 	addi	sp,sp,8
81127708:	f800283a 	ret

8112770c <write>:
8112770c:	defff904 	addi	sp,sp,-28
81127710:	de00012e 	bgeu	sp,et,81127718 <write+0xc>
81127714:	003b68fa 	trap	3
81127718:	dfc00615 	stw	ra,24(sp)
8112771c:	df000515 	stw	fp,20(sp)
81127720:	df000504 	addi	fp,sp,20
81127724:	e13ffd15 	stw	r4,-12(fp)
81127728:	e17ffe15 	stw	r5,-8(fp)
8112772c:	e1bfff15 	stw	r6,-4(fp)
81127730:	e0bffd17 	ldw	r2,-12(fp)
81127734:	10000616 	blt	r2,zero,81127750 <write+0x44>
81127738:	e0bffd17 	ldw	r2,-12(fp)
8112773c:	10c00324 	muli	r3,r2,12
81127740:	00a04534 	movhi	r2,33044
81127744:	10baac04 	addi	r2,r2,-5456
81127748:	1885883a 	add	r2,r3,r2
8112774c:	00000106 	br	81127754 <write+0x48>
81127750:	0005883a 	mov	r2,zero
81127754:	e0bffb15 	stw	r2,-20(fp)
81127758:	e0bffb17 	ldw	r2,-20(fp)
8112775c:	10002126 	beq	r2,zero,811277e4 <write+0xd8>
81127760:	e0bffb17 	ldw	r2,-20(fp)
81127764:	10800217 	ldw	r2,8(r2)
81127768:	108000cc 	andi	r2,r2,3
8112776c:	10001826 	beq	r2,zero,811277d0 <write+0xc4>
81127770:	e0bffb17 	ldw	r2,-20(fp)
81127774:	10800017 	ldw	r2,0(r2)
81127778:	10800617 	ldw	r2,24(r2)
8112777c:	10001426 	beq	r2,zero,811277d0 <write+0xc4>
81127780:	e0bffb17 	ldw	r2,-20(fp)
81127784:	10800017 	ldw	r2,0(r2)
81127788:	10800617 	ldw	r2,24(r2)
8112778c:	e0ffff17 	ldw	r3,-4(fp)
81127790:	180d883a 	mov	r6,r3
81127794:	e17ffe17 	ldw	r5,-8(fp)
81127798:	e13ffb17 	ldw	r4,-20(fp)
8112779c:	103ee83a 	callr	r2
811277a0:	e0bffc15 	stw	r2,-16(fp)
811277a4:	e0bffc17 	ldw	r2,-16(fp)
811277a8:	1000070e 	bge	r2,zero,811277c8 <write+0xbc>
811277ac:	11276c80 	call	811276c8 <alt_get_errno>
811277b0:	1007883a 	mov	r3,r2
811277b4:	e0bffc17 	ldw	r2,-16(fp)
811277b8:	0085c83a 	sub	r2,zero,r2
811277bc:	18800015 	stw	r2,0(r3)
811277c0:	00bfffc4 	movi	r2,-1
811277c4:	00000c06 	br	811277f8 <write+0xec>
811277c8:	e0bffc17 	ldw	r2,-16(fp)
811277cc:	00000a06 	br	811277f8 <write+0xec>
811277d0:	11276c80 	call	811276c8 <alt_get_errno>
811277d4:	1007883a 	mov	r3,r2
811277d8:	00800344 	movi	r2,13
811277dc:	18800015 	stw	r2,0(r3)
811277e0:	00000406 	br	811277f4 <write+0xe8>
811277e4:	11276c80 	call	811276c8 <alt_get_errno>
811277e8:	1007883a 	mov	r3,r2
811277ec:	00801444 	movi	r2,81
811277f0:	18800015 	stw	r2,0(r3)
811277f4:	00bfffc4 	movi	r2,-1
811277f8:	e037883a 	mov	sp,fp
811277fc:	dfc00117 	ldw	ra,4(sp)
81127800:	df000017 	ldw	fp,0(sp)
81127804:	dec00204 	addi	sp,sp,8
81127808:	f800283a 	ret

8112780c <__env_lock>:
8112780c:	deffde04 	addi	sp,sp,-136
81127810:	de00012e 	bgeu	sp,et,81127818 <__env_lock+0xc>
81127814:	003b68fa 	trap	3
81127818:	dfc02115 	stw	ra,132(sp)
8112781c:	df002015 	stw	fp,128(sp)
81127820:	df002004 	addi	fp,sp,128
81127824:	e13fff15 	stw	r4,-4(fp)
81127828:	e0bfe104 	addi	r2,fp,-124
8112782c:	100b883a 	mov	r5,r2
81127830:	01003fc4 	movi	r4,255
81127834:	11300f00 	call	811300f0 <OSTaskQuery>
81127838:	e0bffe85 	stb	r2,-6(fp)
8112783c:	e0bffe83 	ldbu	r2,-6(fp)
81127840:	10803fcc 	andi	r2,r2,255
81127844:	10001e1e 	bne	r2,zero,811278c0 <__env_lock+0xb4>
81127848:	e0bfed83 	ldbu	r2,-74(fp)
8112784c:	10803fcc 	andi	r2,r2,255
81127850:	e0bfe015 	stw	r2,-128(fp)
81127854:	d0a06d17 	ldw	r2,-32332(gp)
81127858:	e0fffc04 	addi	r3,fp,-16
8112785c:	180b883a 	mov	r5,r3
81127860:	1009883a 	mov	r4,r2
81127864:	112e8a80 	call	8112e8a8 <OSSemQuery>
81127868:	e0bffe03 	ldbu	r2,-8(fp)
8112786c:	10803fcc 	andi	r2,r2,255
81127870:	10000726 	beq	r2,zero,81127890 <__env_lock+0x84>
81127874:	d0a01517 	ldw	r2,-32684(gp)
81127878:	e0ffe017 	ldw	r3,-128(fp)
8112787c:	1880041e 	bne	r3,r2,81127890 <__env_lock+0x84>
81127880:	d0a06c17 	ldw	r2,-32336(gp)
81127884:	10800044 	addi	r2,r2,1
81127888:	d0a06c15 	stw	r2,-32336(gp)
8112788c:	00000a06 	br	811278b8 <__env_lock+0xac>
81127890:	d0a06d17 	ldw	r2,-32332(gp)
81127894:	e0fffe84 	addi	r3,fp,-6
81127898:	180d883a 	mov	r6,r3
8112789c:	000b883a 	mov	r5,zero
811278a0:	1009883a 	mov	r4,r2
811278a4:	112e4080 	call	8112e408 <OSSemPend>
811278a8:	00800044 	movi	r2,1
811278ac:	d0a06c15 	stw	r2,-32336(gp)
811278b0:	e0bfe017 	ldw	r2,-128(fp)
811278b4:	d0a01515 	stw	r2,-32684(gp)
811278b8:	0001883a 	nop
811278bc:	00000106 	br	811278c4 <__env_lock+0xb8>
811278c0:	0001883a 	nop
811278c4:	e037883a 	mov	sp,fp
811278c8:	dfc00117 	ldw	ra,4(sp)
811278cc:	df000017 	ldw	fp,0(sp)
811278d0:	dec00204 	addi	sp,sp,8
811278d4:	f800283a 	ret

811278d8 <__env_unlock>:
811278d8:	defffd04 	addi	sp,sp,-12
811278dc:	de00012e 	bgeu	sp,et,811278e4 <__env_unlock+0xc>
811278e0:	003b68fa 	trap	3
811278e4:	dfc00215 	stw	ra,8(sp)
811278e8:	df000115 	stw	fp,4(sp)
811278ec:	df000104 	addi	fp,sp,4
811278f0:	e13fff15 	stw	r4,-4(fp)
811278f4:	d0a06c17 	ldw	r2,-32336(gp)
811278f8:	10000b26 	beq	r2,zero,81127928 <__env_unlock+0x50>
811278fc:	d0a06c17 	ldw	r2,-32336(gp)
81127900:	10bfffc4 	addi	r2,r2,-1
81127904:	d0a06c15 	stw	r2,-32336(gp)
81127908:	d0a06c17 	ldw	r2,-32336(gp)
8112790c:	1000071e 	bne	r2,zero,8112792c <__env_unlock+0x54>
81127910:	00bfffc4 	movi	r2,-1
81127914:	d0a01515 	stw	r2,-32684(gp)
81127918:	d0a06d17 	ldw	r2,-32332(gp)
8112791c:	1009883a 	mov	r4,r2
81127920:	112e7900 	call	8112e790 <OSSemPost>
81127924:	00000106 	br	8112792c <__env_unlock+0x54>
81127928:	0001883a 	nop
8112792c:	e037883a 	mov	sp,fp
81127930:	dfc00117 	ldw	ra,4(sp)
81127934:	df000017 	ldw	fp,0(sp)
81127938:	dec00204 	addi	sp,sp,8
8112793c:	f800283a 	ret

81127940 <__malloc_lock>:
81127940:	deffda04 	addi	sp,sp,-152
81127944:	de00012e 	bgeu	sp,et,8112794c <__malloc_lock+0xc>
81127948:	003b68fa 	trap	3
8112794c:	dfc02515 	stw	ra,148(sp)
81127950:	df002415 	stw	fp,144(sp)
81127954:	df002404 	addi	fp,sp,144
81127958:	e13fff15 	stw	r4,-4(fp)
8112795c:	e03fdc15 	stw	zero,-144(fp)
81127960:	d0a07303 	ldbu	r2,-32308(gp)
81127964:	10803fcc 	andi	r2,r2,255
81127968:	10800060 	cmpeqi	r2,r2,1
8112796c:	10003626 	beq	r2,zero,81127a48 <__malloc_lock+0x108>
81127970:	e0bfe104 	addi	r2,fp,-124
81127974:	100b883a 	mov	r5,r2
81127978:	01003fc4 	movi	r4,255
8112797c:	11300f00 	call	811300f0 <OSTaskQuery>
81127980:	e0bffe85 	stb	r2,-6(fp)
81127984:	e0bffe83 	ldbu	r2,-6(fp)
81127988:	10803fcc 	andi	r2,r2,255
8112798c:	1000301e 	bne	r2,zero,81127a50 <__malloc_lock+0x110>
81127990:	e0bfed83 	ldbu	r2,-74(fp)
81127994:	10803fcc 	andi	r2,r2,255
81127998:	e0bfdd15 	stw	r2,-140(fp)
8112799c:	d0a06f17 	ldw	r2,-32324(gp)
811279a0:	e0fffc04 	addi	r3,fp,-16
811279a4:	180b883a 	mov	r5,r3
811279a8:	1009883a 	mov	r4,r2
811279ac:	112e8a80 	call	8112e8a8 <OSSemQuery>
811279b0:	0005303a 	rdctl	r2,status
811279b4:	e0bfe015 	stw	r2,-128(fp)
811279b8:	e0ffe017 	ldw	r3,-128(fp)
811279bc:	00bfff84 	movi	r2,-2
811279c0:	1884703a 	and	r2,r3,r2
811279c4:	1001703a 	wrctl	status,r2
811279c8:	e0bfe017 	ldw	r2,-128(fp)
811279cc:	e0bfdc15 	stw	r2,-144(fp)
811279d0:	e0bffc0b 	ldhu	r2,-16(fp)
811279d4:	10bfffcc 	andi	r2,r2,65535
811279d8:	10000b1e 	bne	r2,zero,81127a08 <__malloc_lock+0xc8>
811279dc:	d0a01617 	ldw	r2,-32680(gp)
811279e0:	e0ffdd17 	ldw	r3,-140(fp)
811279e4:	1880081e 	bne	r3,r2,81127a08 <__malloc_lock+0xc8>
811279e8:	d0a06e17 	ldw	r2,-32328(gp)
811279ec:	10800044 	addi	r2,r2,1
811279f0:	d0a06e15 	stw	r2,-32328(gp)
811279f4:	e0bfdc17 	ldw	r2,-144(fp)
811279f8:	e0bfde15 	stw	r2,-136(fp)
811279fc:	e0bfde17 	ldw	r2,-136(fp)
81127a00:	1001703a 	wrctl	status,r2
81127a04:	00000e06 	br	81127a40 <__malloc_lock+0x100>
81127a08:	e0bfdc17 	ldw	r2,-144(fp)
81127a0c:	e0bfdf15 	stw	r2,-132(fp)
81127a10:	e0bfdf17 	ldw	r2,-132(fp)
81127a14:	1001703a 	wrctl	status,r2
81127a18:	d0a06f17 	ldw	r2,-32324(gp)
81127a1c:	e0fffe84 	addi	r3,fp,-6
81127a20:	180d883a 	mov	r6,r3
81127a24:	000b883a 	mov	r5,zero
81127a28:	1009883a 	mov	r4,r2
81127a2c:	112e4080 	call	8112e408 <OSSemPend>
81127a30:	00800044 	movi	r2,1
81127a34:	d0a06e15 	stw	r2,-32328(gp)
81127a38:	e0bfdd17 	ldw	r2,-140(fp)
81127a3c:	d0a01615 	stw	r2,-32680(gp)
81127a40:	0001883a 	nop
81127a44:	00000306 	br	81127a54 <__malloc_lock+0x114>
81127a48:	0001883a 	nop
81127a4c:	00000106 	br	81127a54 <__malloc_lock+0x114>
81127a50:	0001883a 	nop
81127a54:	e037883a 	mov	sp,fp
81127a58:	dfc00117 	ldw	ra,4(sp)
81127a5c:	df000017 	ldw	fp,0(sp)
81127a60:	dec00204 	addi	sp,sp,8
81127a64:	f800283a 	ret

81127a68 <__malloc_unlock>:
81127a68:	defff804 	addi	sp,sp,-32
81127a6c:	de00012e 	bgeu	sp,et,81127a74 <__malloc_unlock+0xc>
81127a70:	003b68fa 	trap	3
81127a74:	dfc00715 	stw	ra,28(sp)
81127a78:	df000615 	stw	fp,24(sp)
81127a7c:	df000604 	addi	fp,sp,24
81127a80:	e13fff15 	stw	r4,-4(fp)
81127a84:	e03ffa15 	stw	zero,-24(fp)
81127a88:	d0a07303 	ldbu	r2,-32308(gp)
81127a8c:	10803fcc 	andi	r2,r2,255
81127a90:	10800060 	cmpeqi	r2,r2,1
81127a94:	10002326 	beq	r2,zero,81127b24 <__malloc_unlock+0xbc>
81127a98:	0005303a 	rdctl	r2,status
81127a9c:	e0bffe15 	stw	r2,-8(fp)
81127aa0:	e0fffe17 	ldw	r3,-8(fp)
81127aa4:	00bfff84 	movi	r2,-2
81127aa8:	1884703a 	and	r2,r3,r2
81127aac:	1001703a 	wrctl	status,r2
81127ab0:	e0bffe17 	ldw	r2,-8(fp)
81127ab4:	e0bffa15 	stw	r2,-24(fp)
81127ab8:	d0a06e17 	ldw	r2,-32328(gp)
81127abc:	1000051e 	bne	r2,zero,81127ad4 <__malloc_unlock+0x6c>
81127ac0:	e0bffa17 	ldw	r2,-24(fp)
81127ac4:	e0bffb15 	stw	r2,-20(fp)
81127ac8:	e0bffb17 	ldw	r2,-20(fp)
81127acc:	1001703a 	wrctl	status,r2
81127ad0:	00001506 	br	81127b28 <__malloc_unlock+0xc0>
81127ad4:	d0a06e17 	ldw	r2,-32328(gp)
81127ad8:	10bfffc4 	addi	r2,r2,-1
81127adc:	d0a06e15 	stw	r2,-32328(gp)
81127ae0:	d0a06e17 	ldw	r2,-32328(gp)
81127ae4:	10000a1e 	bne	r2,zero,81127b10 <__malloc_unlock+0xa8>
81127ae8:	00bfffc4 	movi	r2,-1
81127aec:	d0a01615 	stw	r2,-32680(gp)
81127af0:	e0bffa17 	ldw	r2,-24(fp)
81127af4:	e0bffc15 	stw	r2,-16(fp)
81127af8:	e0bffc17 	ldw	r2,-16(fp)
81127afc:	1001703a 	wrctl	status,r2
81127b00:	d0a06f17 	ldw	r2,-32324(gp)
81127b04:	1009883a 	mov	r4,r2
81127b08:	112e7900 	call	8112e790 <OSSemPost>
81127b0c:	00000606 	br	81127b28 <__malloc_unlock+0xc0>
81127b10:	e0bffa17 	ldw	r2,-24(fp)
81127b14:	e0bffd15 	stw	r2,-12(fp)
81127b18:	e0bffd17 	ldw	r2,-12(fp)
81127b1c:	1001703a 	wrctl	status,r2
81127b20:	00000106 	br	81127b28 <__malloc_unlock+0xc0>
81127b24:	0001883a 	nop
81127b28:	e037883a 	mov	sp,fp
81127b2c:	dfc00117 	ldw	ra,4(sp)
81127b30:	df000017 	ldw	fp,0(sp)
81127b34:	dec00204 	addi	sp,sp,8
81127b38:	f800283a 	ret

81127b3c <OSEventNameGet>:
81127b3c:	defff704 	addi	sp,sp,-36
81127b40:	de00012e 	bgeu	sp,et,81127b48 <OSEventNameGet+0xc>
81127b44:	003b68fa 	trap	3
81127b48:	dfc00815 	stw	ra,32(sp)
81127b4c:	df000715 	stw	fp,28(sp)
81127b50:	df000704 	addi	fp,sp,28
81127b54:	e13ffd15 	stw	r4,-12(fp)
81127b58:	e17ffe15 	stw	r5,-8(fp)
81127b5c:	e1bfff15 	stw	r6,-4(fp)
81127b60:	e03ff915 	stw	zero,-28(fp)
81127b64:	e0bfff17 	ldw	r2,-4(fp)
81127b68:	1000021e 	bne	r2,zero,81127b74 <OSEventNameGet+0x38>
81127b6c:	0005883a 	mov	r2,zero
81127b70:	00003706 	br	81127c50 <OSEventNameGet+0x114>
81127b74:	e0bffd17 	ldw	r2,-12(fp)
81127b78:	1000051e 	bne	r2,zero,81127b90 <OSEventNameGet+0x54>
81127b7c:	e0bfff17 	ldw	r2,-4(fp)
81127b80:	00c00104 	movi	r3,4
81127b84:	10c00005 	stb	r3,0(r2)
81127b88:	0005883a 	mov	r2,zero
81127b8c:	00003006 	br	81127c50 <OSEventNameGet+0x114>
81127b90:	e0bffe17 	ldw	r2,-8(fp)
81127b94:	1000051e 	bne	r2,zero,81127bac <OSEventNameGet+0x70>
81127b98:	e0bfff17 	ldw	r2,-4(fp)
81127b9c:	00c00304 	movi	r3,12
81127ba0:	10c00005 	stb	r3,0(r2)
81127ba4:	0005883a 	mov	r2,zero
81127ba8:	00002906 	br	81127c50 <OSEventNameGet+0x114>
81127bac:	d0a08303 	ldbu	r2,-32244(gp)
81127bb0:	10803fcc 	andi	r2,r2,255
81127bb4:	10000526 	beq	r2,zero,81127bcc <OSEventNameGet+0x90>
81127bb8:	e0bfff17 	ldw	r2,-4(fp)
81127bbc:	00c00444 	movi	r3,17
81127bc0:	10c00005 	stb	r3,0(r2)
81127bc4:	0005883a 	mov	r2,zero
81127bc8:	00002106 	br	81127c50 <OSEventNameGet+0x114>
81127bcc:	e0bffd17 	ldw	r2,-12(fp)
81127bd0:	10800003 	ldbu	r2,0(r2)
81127bd4:	10803fcc 	andi	r2,r2,255
81127bd8:	10bfffc4 	addi	r2,r2,-1
81127bdc:	10800128 	cmpgeui	r2,r2,4
81127be0:	10000526 	beq	r2,zero,81127bf8 <OSEventNameGet+0xbc>
81127be4:	e0bfff17 	ldw	r2,-4(fp)
81127be8:	00c00044 	movi	r3,1
81127bec:	10c00005 	stb	r3,0(r2)
81127bf0:	0005883a 	mov	r2,zero
81127bf4:	00001606 	br	81127c50 <OSEventNameGet+0x114>
81127bf8:	0001883a 	nop
81127bfc:	0005303a 	rdctl	r2,status
81127c00:	e0bffb15 	stw	r2,-20(fp)
81127c04:	e0fffb17 	ldw	r3,-20(fp)
81127c08:	00bfff84 	movi	r2,-2
81127c0c:	1884703a 	and	r2,r3,r2
81127c10:	1001703a 	wrctl	status,r2
81127c14:	e0bffb17 	ldw	r2,-20(fp)
81127c18:	e0bff915 	stw	r2,-28(fp)
81127c1c:	e0bffd17 	ldw	r2,-12(fp)
81127c20:	10800444 	addi	r2,r2,17
81127c24:	100b883a 	mov	r5,r2
81127c28:	e13ffe17 	ldw	r4,-8(fp)
81127c2c:	11296ac0 	call	811296ac <OS_StrCopy>
81127c30:	e0bffa05 	stb	r2,-24(fp)
81127c34:	e0bff917 	ldw	r2,-28(fp)
81127c38:	e0bffc15 	stw	r2,-16(fp)
81127c3c:	e0bffc17 	ldw	r2,-16(fp)
81127c40:	1001703a 	wrctl	status,r2
81127c44:	e0bfff17 	ldw	r2,-4(fp)
81127c48:	10000005 	stb	zero,0(r2)
81127c4c:	e0bffa03 	ldbu	r2,-24(fp)
81127c50:	e037883a 	mov	sp,fp
81127c54:	dfc00117 	ldw	ra,4(sp)
81127c58:	df000017 	ldw	fp,0(sp)
81127c5c:	dec00204 	addi	sp,sp,8
81127c60:	f800283a 	ret

81127c64 <OSEventNameSet>:
81127c64:	defff604 	addi	sp,sp,-40
81127c68:	de00012e 	bgeu	sp,et,81127c70 <OSEventNameSet+0xc>
81127c6c:	003b68fa 	trap	3
81127c70:	dfc00915 	stw	ra,36(sp)
81127c74:	df000815 	stw	fp,32(sp)
81127c78:	df000804 	addi	fp,sp,32
81127c7c:	e13ffd15 	stw	r4,-12(fp)
81127c80:	e17ffe15 	stw	r5,-8(fp)
81127c84:	e1bfff15 	stw	r6,-4(fp)
81127c88:	e03ff815 	stw	zero,-32(fp)
81127c8c:	e0bfff17 	ldw	r2,-4(fp)
81127c90:	10004026 	beq	r2,zero,81127d94 <OSEventNameSet+0x130>
81127c94:	e0bffd17 	ldw	r2,-12(fp)
81127c98:	1000041e 	bne	r2,zero,81127cac <OSEventNameSet+0x48>
81127c9c:	e0bfff17 	ldw	r2,-4(fp)
81127ca0:	00c00104 	movi	r3,4
81127ca4:	10c00005 	stb	r3,0(r2)
81127ca8:	00003b06 	br	81127d98 <OSEventNameSet+0x134>
81127cac:	e0bffe17 	ldw	r2,-8(fp)
81127cb0:	1000041e 	bne	r2,zero,81127cc4 <OSEventNameSet+0x60>
81127cb4:	e0bfff17 	ldw	r2,-4(fp)
81127cb8:	00c00304 	movi	r3,12
81127cbc:	10c00005 	stb	r3,0(r2)
81127cc0:	00003506 	br	81127d98 <OSEventNameSet+0x134>
81127cc4:	d0a08303 	ldbu	r2,-32244(gp)
81127cc8:	10803fcc 	andi	r2,r2,255
81127ccc:	10000426 	beq	r2,zero,81127ce0 <OSEventNameSet+0x7c>
81127cd0:	e0bfff17 	ldw	r2,-4(fp)
81127cd4:	00c00484 	movi	r3,18
81127cd8:	10c00005 	stb	r3,0(r2)
81127cdc:	00002e06 	br	81127d98 <OSEventNameSet+0x134>
81127ce0:	e0bffd17 	ldw	r2,-12(fp)
81127ce4:	10800003 	ldbu	r2,0(r2)
81127ce8:	10803fcc 	andi	r2,r2,255
81127cec:	10bfffc4 	addi	r2,r2,-1
81127cf0:	10800128 	cmpgeui	r2,r2,4
81127cf4:	10000426 	beq	r2,zero,81127d08 <OSEventNameSet+0xa4>
81127cf8:	e0bfff17 	ldw	r2,-4(fp)
81127cfc:	00c00044 	movi	r3,1
81127d00:	10c00005 	stb	r3,0(r2)
81127d04:	00002406 	br	81127d98 <OSEventNameSet+0x134>
81127d08:	0001883a 	nop
81127d0c:	0005303a 	rdctl	r2,status
81127d10:	e0bffc15 	stw	r2,-16(fp)
81127d14:	e0fffc17 	ldw	r3,-16(fp)
81127d18:	00bfff84 	movi	r2,-2
81127d1c:	1884703a 	and	r2,r3,r2
81127d20:	1001703a 	wrctl	status,r2
81127d24:	e0bffc17 	ldw	r2,-16(fp)
81127d28:	e0bff815 	stw	r2,-32(fp)
81127d2c:	e13ffe17 	ldw	r4,-8(fp)
81127d30:	11297280 	call	81129728 <OS_StrLen>
81127d34:	e0bffa05 	stb	r2,-24(fp)
81127d38:	e0bffa03 	ldbu	r2,-24(fp)
81127d3c:	10800830 	cmpltui	r2,r2,32
81127d40:	1000081e 	bne	r2,zero,81127d64 <OSEventNameSet+0x100>
81127d44:	e0bff817 	ldw	r2,-32(fp)
81127d48:	e0bff915 	stw	r2,-28(fp)
81127d4c:	e0bff917 	ldw	r2,-28(fp)
81127d50:	1001703a 	wrctl	status,r2
81127d54:	e0bfff17 	ldw	r2,-4(fp)
81127d58:	00c002c4 	movi	r3,11
81127d5c:	10c00005 	stb	r3,0(r2)
81127d60:	00000d06 	br	81127d98 <OSEventNameSet+0x134>
81127d64:	e0bffd17 	ldw	r2,-12(fp)
81127d68:	10800444 	addi	r2,r2,17
81127d6c:	e17ffe17 	ldw	r5,-8(fp)
81127d70:	1009883a 	mov	r4,r2
81127d74:	11296ac0 	call	811296ac <OS_StrCopy>
81127d78:	e0bff817 	ldw	r2,-32(fp)
81127d7c:	e0bffb15 	stw	r2,-20(fp)
81127d80:	e0bffb17 	ldw	r2,-20(fp)
81127d84:	1001703a 	wrctl	status,r2
81127d88:	e0bfff17 	ldw	r2,-4(fp)
81127d8c:	10000005 	stb	zero,0(r2)
81127d90:	00000106 	br	81127d98 <OSEventNameSet+0x134>
81127d94:	0001883a 	nop
81127d98:	e037883a 	mov	sp,fp
81127d9c:	dfc00117 	ldw	ra,4(sp)
81127da0:	df000017 	ldw	fp,0(sp)
81127da4:	dec00204 	addi	sp,sp,8
81127da8:	f800283a 	ret

81127dac <OSEventPendMulti>:
81127dac:	deffed04 	addi	sp,sp,-76
81127db0:	de00012e 	bgeu	sp,et,81127db8 <OSEventPendMulti+0xc>
81127db4:	003b68fa 	trap	3
81127db8:	dfc01215 	stw	ra,72(sp)
81127dbc:	df001115 	stw	fp,68(sp)
81127dc0:	df001104 	addi	fp,sp,68
81127dc4:	e13ffc15 	stw	r4,-16(fp)
81127dc8:	e17ffd15 	stw	r5,-12(fp)
81127dcc:	e1bffe15 	stw	r6,-8(fp)
81127dd0:	3805883a 	mov	r2,r7
81127dd4:	e0bfff0d 	sth	r2,-4(fp)
81127dd8:	e03ff315 	stw	zero,-52(fp)
81127ddc:	e0800217 	ldw	r2,8(fp)
81127de0:	1000021e 	bne	r2,zero,81127dec <OSEventPendMulti+0x40>
81127de4:	0005883a 	mov	r2,zero
81127de8:	00017106 	br	811283b0 <OSEventPendMulti+0x604>
81127dec:	e0bffc17 	ldw	r2,-16(fp)
81127df0:	1000051e 	bne	r2,zero,81127e08 <OSEventPendMulti+0x5c>
81127df4:	e0800217 	ldw	r2,8(fp)
81127df8:	00c00104 	movi	r3,4
81127dfc:	10c00005 	stb	r3,0(r2)
81127e00:	0005883a 	mov	r2,zero
81127e04:	00016a06 	br	811283b0 <OSEventPendMulti+0x604>
81127e08:	e0bffd17 	ldw	r2,-12(fp)
81127e0c:	1000051e 	bne	r2,zero,81127e24 <OSEventPendMulti+0x78>
81127e10:	e0800217 	ldw	r2,8(fp)
81127e14:	00c00104 	movi	r3,4
81127e18:	10c00005 	stb	r3,0(r2)
81127e1c:	0005883a 	mov	r2,zero
81127e20:	00016306 	br	811283b0 <OSEventPendMulti+0x604>
81127e24:	e0bffe17 	ldw	r2,-8(fp)
81127e28:	1000051e 	bne	r2,zero,81127e40 <OSEventPendMulti+0x94>
81127e2c:	e0800217 	ldw	r2,8(fp)
81127e30:	00c00104 	movi	r3,4
81127e34:	10c00005 	stb	r3,0(r2)
81127e38:	0005883a 	mov	r2,zero
81127e3c:	00015c06 	br	811283b0 <OSEventPendMulti+0x604>
81127e40:	e0bffd17 	ldw	r2,-12(fp)
81127e44:	10000015 	stw	zero,0(r2)
81127e48:	e0bffc17 	ldw	r2,-16(fp)
81127e4c:	e0bfef15 	stw	r2,-68(fp)
81127e50:	e0bfef17 	ldw	r2,-68(fp)
81127e54:	10800017 	ldw	r2,0(r2)
81127e58:	e0bff015 	stw	r2,-64(fp)
81127e5c:	00001906 	br	81127ec4 <OSEventPendMulti+0x118>
81127e60:	e0bff017 	ldw	r2,-64(fp)
81127e64:	10800003 	ldbu	r2,0(r2)
81127e68:	10803fcc 	andi	r2,r2,255
81127e6c:	10c000a0 	cmpeqi	r3,r2,2
81127e70:	1800091e 	bne	r3,zero,81127e98 <OSEventPendMulti+0xec>
81127e74:	10c000e0 	cmpeqi	r3,r2,3
81127e78:	1800091e 	bne	r3,zero,81127ea0 <OSEventPendMulti+0xf4>
81127e7c:	10800060 	cmpeqi	r2,r2,1
81127e80:	1000091e 	bne	r2,zero,81127ea8 <OSEventPendMulti+0xfc>
81127e84:	e0800217 	ldw	r2,8(fp)
81127e88:	00c00044 	movi	r3,1
81127e8c:	10c00005 	stb	r3,0(r2)
81127e90:	0005883a 	mov	r2,zero
81127e94:	00014606 	br	811283b0 <OSEventPendMulti+0x604>
81127e98:	0001883a 	nop
81127e9c:	00000306 	br	81127eac <OSEventPendMulti+0x100>
81127ea0:	0001883a 	nop
81127ea4:	00000106 	br	81127eac <OSEventPendMulti+0x100>
81127ea8:	0001883a 	nop
81127eac:	e0bfef17 	ldw	r2,-68(fp)
81127eb0:	10800104 	addi	r2,r2,4
81127eb4:	e0bfef15 	stw	r2,-68(fp)
81127eb8:	e0bfef17 	ldw	r2,-68(fp)
81127ebc:	10800017 	ldw	r2,0(r2)
81127ec0:	e0bff015 	stw	r2,-64(fp)
81127ec4:	e0bff017 	ldw	r2,-64(fp)
81127ec8:	103fe51e 	bne	r2,zero,81127e60 <__reset+0xfb107e60>
81127ecc:	d0a08303 	ldbu	r2,-32244(gp)
81127ed0:	10803fcc 	andi	r2,r2,255
81127ed4:	10000526 	beq	r2,zero,81127eec <OSEventPendMulti+0x140>
81127ed8:	e0800217 	ldw	r2,8(fp)
81127edc:	00c00084 	movi	r3,2
81127ee0:	10c00005 	stb	r3,0(r2)
81127ee4:	0005883a 	mov	r2,zero
81127ee8:	00013106 	br	811283b0 <OSEventPendMulti+0x604>
81127eec:	d0a07103 	ldbu	r2,-32316(gp)
81127ef0:	10803fcc 	andi	r2,r2,255
81127ef4:	10000526 	beq	r2,zero,81127f0c <OSEventPendMulti+0x160>
81127ef8:	e0800217 	ldw	r2,8(fp)
81127efc:	00c00344 	movi	r3,13
81127f00:	10c00005 	stb	r3,0(r2)
81127f04:	0005883a 	mov	r2,zero
81127f08:	00012906 	br	811283b0 <OSEventPendMulti+0x604>
81127f0c:	0005303a 	rdctl	r2,status
81127f10:	e0bffb15 	stw	r2,-20(fp)
81127f14:	e0fffb17 	ldw	r3,-20(fp)
81127f18:	00bfff84 	movi	r2,-2
81127f1c:	1884703a 	and	r2,r3,r2
81127f20:	1001703a 	wrctl	status,r2
81127f24:	e0bffb17 	ldw	r2,-20(fp)
81127f28:	e0bff315 	stw	r2,-52(fp)
81127f2c:	e03ff105 	stb	zero,-60(fp)
81127f30:	e03ff18d 	sth	zero,-58(fp)
81127f34:	e03ff205 	stb	zero,-56(fp)
81127f38:	e0bffc17 	ldw	r2,-16(fp)
81127f3c:	e0bfef15 	stw	r2,-68(fp)
81127f40:	e0bfef17 	ldw	r2,-68(fp)
81127f44:	10800017 	ldw	r2,0(r2)
81127f48:	e0bff015 	stw	r2,-64(fp)
81127f4c:	00008106 	br	81128154 <OSEventPendMulti+0x3a8>
81127f50:	e0bff017 	ldw	r2,-64(fp)
81127f54:	10800003 	ldbu	r2,0(r2)
81127f58:	10803fcc 	andi	r2,r2,255
81127f5c:	10c000a0 	cmpeqi	r3,r2,2
81127f60:	18003c1e 	bne	r3,zero,81128054 <OSEventPendMulti+0x2a8>
81127f64:	10c000e0 	cmpeqi	r3,r2,3
81127f68:	1800031e 	bne	r3,zero,81127f78 <OSEventPendMulti+0x1cc>
81127f6c:	10800060 	cmpeqi	r2,r2,1
81127f70:	10001e1e 	bne	r2,zero,81127fec <OSEventPendMulti+0x240>
81127f74:	00006606 	br	81128110 <OSEventPendMulti+0x364>
81127f78:	e0bff017 	ldw	r2,-64(fp)
81127f7c:	1080020b 	ldhu	r2,8(r2)
81127f80:	10bfffcc 	andi	r2,r2,65535
81127f84:	10001526 	beq	r2,zero,81127fdc <OSEventPendMulti+0x230>
81127f88:	e0bff017 	ldw	r2,-64(fp)
81127f8c:	1080020b 	ldhu	r2,8(r2)
81127f90:	10bfffc4 	addi	r2,r2,-1
81127f94:	1007883a 	mov	r3,r2
81127f98:	e0bff017 	ldw	r2,-64(fp)
81127f9c:	10c0020d 	sth	r3,8(r2)
81127fa0:	e0bffd17 	ldw	r2,-12(fp)
81127fa4:	10c00104 	addi	r3,r2,4
81127fa8:	e0fffd15 	stw	r3,-12(fp)
81127fac:	e0fff017 	ldw	r3,-64(fp)
81127fb0:	10c00015 	stw	r3,0(r2)
81127fb4:	00800044 	movi	r2,1
81127fb8:	e0bff105 	stb	r2,-60(fp)
81127fbc:	e0bffe17 	ldw	r2,-8(fp)
81127fc0:	10c00104 	addi	r3,r2,4
81127fc4:	e0fffe15 	stw	r3,-8(fp)
81127fc8:	10000015 	stw	zero,0(r2)
81127fcc:	e0bff18b 	ldhu	r2,-58(fp)
81127fd0:	10800044 	addi	r2,r2,1
81127fd4:	e0bff18d 	sth	r2,-58(fp)
81127fd8:	00005806 	br	8112813c <OSEventPendMulti+0x390>
81127fdc:	e0bff203 	ldbu	r2,-56(fp)
81127fe0:	10800054 	ori	r2,r2,1
81127fe4:	e0bff205 	stb	r2,-56(fp)
81127fe8:	00005406 	br	8112813c <OSEventPendMulti+0x390>
81127fec:	e0bff017 	ldw	r2,-64(fp)
81127ff0:	10800117 	ldw	r2,4(r2)
81127ff4:	10001326 	beq	r2,zero,81128044 <OSEventPendMulti+0x298>
81127ff8:	e0bffe17 	ldw	r2,-8(fp)
81127ffc:	10c00104 	addi	r3,r2,4
81128000:	e0fffe15 	stw	r3,-8(fp)
81128004:	e0fff017 	ldw	r3,-64(fp)
81128008:	18c00117 	ldw	r3,4(r3)
8112800c:	10c00015 	stw	r3,0(r2)
81128010:	e0bff017 	ldw	r2,-64(fp)
81128014:	10000115 	stw	zero,4(r2)
81128018:	e0bffd17 	ldw	r2,-12(fp)
8112801c:	10c00104 	addi	r3,r2,4
81128020:	e0fffd15 	stw	r3,-12(fp)
81128024:	e0fff017 	ldw	r3,-64(fp)
81128028:	10c00015 	stw	r3,0(r2)
8112802c:	00800044 	movi	r2,1
81128030:	e0bff105 	stb	r2,-60(fp)
81128034:	e0bff18b 	ldhu	r2,-58(fp)
81128038:	10800044 	addi	r2,r2,1
8112803c:	e0bff18d 	sth	r2,-58(fp)
81128040:	00003e06 	br	8112813c <OSEventPendMulti+0x390>
81128044:	e0bff203 	ldbu	r2,-56(fp)
81128048:	10800094 	ori	r2,r2,2
8112804c:	e0bff205 	stb	r2,-56(fp)
81128050:	00003a06 	br	8112813c <OSEventPendMulti+0x390>
81128054:	e0bff017 	ldw	r2,-64(fp)
81128058:	10800117 	ldw	r2,4(r2)
8112805c:	e0bff515 	stw	r2,-44(fp)
81128060:	e0bff517 	ldw	r2,-44(fp)
81128064:	1080058b 	ldhu	r2,22(r2)
81128068:	10bfffcc 	andi	r2,r2,65535
8112806c:	10002426 	beq	r2,zero,81128100 <OSEventPendMulti+0x354>
81128070:	e0bffe17 	ldw	r2,-8(fp)
81128074:	10c00104 	addi	r3,r2,4
81128078:	e0fffe15 	stw	r3,-8(fp)
8112807c:	e0fff517 	ldw	r3,-44(fp)
81128080:	18c00417 	ldw	r3,16(r3)
81128084:	19400104 	addi	r5,r3,4
81128088:	e13ff517 	ldw	r4,-44(fp)
8112808c:	21400415 	stw	r5,16(r4)
81128090:	18c00017 	ldw	r3,0(r3)
81128094:	10c00015 	stw	r3,0(r2)
81128098:	e0bff517 	ldw	r2,-44(fp)
8112809c:	10c00417 	ldw	r3,16(r2)
811280a0:	e0bff517 	ldw	r2,-44(fp)
811280a4:	10800217 	ldw	r2,8(r2)
811280a8:	1880041e 	bne	r3,r2,811280bc <OSEventPendMulti+0x310>
811280ac:	e0bff517 	ldw	r2,-44(fp)
811280b0:	10c00117 	ldw	r3,4(r2)
811280b4:	e0bff517 	ldw	r2,-44(fp)
811280b8:	10c00415 	stw	r3,16(r2)
811280bc:	e0bff517 	ldw	r2,-44(fp)
811280c0:	1080058b 	ldhu	r2,22(r2)
811280c4:	10bfffc4 	addi	r2,r2,-1
811280c8:	1007883a 	mov	r3,r2
811280cc:	e0bff517 	ldw	r2,-44(fp)
811280d0:	10c0058d 	sth	r3,22(r2)
811280d4:	e0bffd17 	ldw	r2,-12(fp)
811280d8:	10c00104 	addi	r3,r2,4
811280dc:	e0fffd15 	stw	r3,-12(fp)
811280e0:	e0fff017 	ldw	r3,-64(fp)
811280e4:	10c00015 	stw	r3,0(r2)
811280e8:	00800044 	movi	r2,1
811280ec:	e0bff105 	stb	r2,-60(fp)
811280f0:	e0bff18b 	ldhu	r2,-58(fp)
811280f4:	10800044 	addi	r2,r2,1
811280f8:	e0bff18d 	sth	r2,-58(fp)
811280fc:	00000f06 	br	8112813c <OSEventPendMulti+0x390>
81128100:	e0bff203 	ldbu	r2,-56(fp)
81128104:	10800114 	ori	r2,r2,4
81128108:	e0bff205 	stb	r2,-56(fp)
8112810c:	00000b06 	br	8112813c <OSEventPendMulti+0x390>
81128110:	e0bff317 	ldw	r2,-52(fp)
81128114:	e0bff415 	stw	r2,-48(fp)
81128118:	e0bff417 	ldw	r2,-48(fp)
8112811c:	1001703a 	wrctl	status,r2
81128120:	e0bffd17 	ldw	r2,-12(fp)
81128124:	10000015 	stw	zero,0(r2)
81128128:	e0800217 	ldw	r2,8(fp)
8112812c:	00c00044 	movi	r3,1
81128130:	10c00005 	stb	r3,0(r2)
81128134:	e0bff18b 	ldhu	r2,-58(fp)
81128138:	00009d06 	br	811283b0 <OSEventPendMulti+0x604>
8112813c:	e0bfef17 	ldw	r2,-68(fp)
81128140:	10800104 	addi	r2,r2,4
81128144:	e0bfef15 	stw	r2,-68(fp)
81128148:	e0bfef17 	ldw	r2,-68(fp)
8112814c:	10800017 	ldw	r2,0(r2)
81128150:	e0bff015 	stw	r2,-64(fp)
81128154:	e0bff017 	ldw	r2,-64(fp)
81128158:	103f7d1e 	bne	r2,zero,81127f50 <__reset+0xfb107f50>
8112815c:	e0bff103 	ldbu	r2,-60(fp)
81128160:	10800058 	cmpnei	r2,r2,1
81128164:	10000a1e 	bne	r2,zero,81128190 <OSEventPendMulti+0x3e4>
81128168:	e0bffd17 	ldw	r2,-12(fp)
8112816c:	10000015 	stw	zero,0(r2)
81128170:	e0bff317 	ldw	r2,-52(fp)
81128174:	e0bff615 	stw	r2,-40(fp)
81128178:	e0bff617 	ldw	r2,-40(fp)
8112817c:	1001703a 	wrctl	status,r2
81128180:	e0800217 	ldw	r2,8(fp)
81128184:	10000005 	stb	zero,0(r2)
81128188:	e0bff18b 	ldhu	r2,-58(fp)
8112818c:	00008806 	br	811283b0 <OSEventPendMulti+0x604>
81128190:	d0a08417 	ldw	r2,-32240(gp)
81128194:	d0e08417 	ldw	r3,-32240(gp)
81128198:	19000c03 	ldbu	r4,48(r3)
8112819c:	e0fff203 	ldbu	r3,-56(fp)
811281a0:	20c6b03a 	or	r3,r4,r3
811281a4:	1809883a 	mov	r4,r3
811281a8:	00ffe004 	movi	r3,-128
811281ac:	20c6b03a 	or	r3,r4,r3
811281b0:	10c00c05 	stb	r3,48(r2)
811281b4:	d0a08417 	ldw	r2,-32240(gp)
811281b8:	10000c45 	stb	zero,49(r2)
811281bc:	d0a08417 	ldw	r2,-32240(gp)
811281c0:	e0ffff0b 	ldhu	r3,-4(fp)
811281c4:	10c00b8d 	sth	r3,46(r2)
811281c8:	e13ffc17 	ldw	r4,-16(fp)
811281cc:	1128d540 	call	81128d54 <OS_EventTaskWaitMulti>
811281d0:	e0bff317 	ldw	r2,-52(fp)
811281d4:	e0bff915 	stw	r2,-28(fp)
811281d8:	e0bff917 	ldw	r2,-28(fp)
811281dc:	1001703a 	wrctl	status,r2
811281e0:	11295580 	call	81129558 <OS_Sched>
811281e4:	0005303a 	rdctl	r2,status
811281e8:	e0bff715 	stw	r2,-36(fp)
811281ec:	e0fff717 	ldw	r3,-36(fp)
811281f0:	00bfff84 	movi	r2,-2
811281f4:	1884703a 	and	r2,r3,r2
811281f8:	1001703a 	wrctl	status,r2
811281fc:	e0bff717 	ldw	r2,-36(fp)
81128200:	e0bff315 	stw	r2,-52(fp)
81128204:	d0a08417 	ldw	r2,-32240(gp)
81128208:	10800c43 	ldbu	r2,49(r2)
8112820c:	10803fcc 	andi	r2,r2,255
81128210:	10000226 	beq	r2,zero,8112821c <OSEventPendMulti+0x470>
81128214:	108000a0 	cmpeqi	r2,r2,2
81128218:	10001826 	beq	r2,zero,8112827c <OSEventPendMulti+0x4d0>
8112821c:	d0a08417 	ldw	r2,-32240(gp)
81128220:	10800717 	ldw	r2,28(r2)
81128224:	e0bff015 	stw	r2,-64(fp)
81128228:	e0bff017 	ldw	r2,-64(fp)
8112822c:	10000b26 	beq	r2,zero,8112825c <OSEventPendMulti+0x4b0>
81128230:	e0bffd17 	ldw	r2,-12(fp)
81128234:	10c00104 	addi	r3,r2,4
81128238:	e0fffd15 	stw	r3,-12(fp)
8112823c:	e0fff017 	ldw	r3,-64(fp)
81128240:	10c00015 	stw	r3,0(r2)
81128244:	e0bffd17 	ldw	r2,-12(fp)
81128248:	10000015 	stw	zero,0(r2)
8112824c:	e0bff18b 	ldhu	r2,-58(fp)
81128250:	10800044 	addi	r2,r2,1
81128254:	e0bff18d 	sth	r2,-58(fp)
81128258:	00000d06 	br	81128290 <OSEventPendMulti+0x4e4>
8112825c:	d0a08417 	ldw	r2,-32240(gp)
81128260:	00c00044 	movi	r3,1
81128264:	10c00c45 	stb	r3,49(r2)
81128268:	d0a08417 	ldw	r2,-32240(gp)
8112826c:	e17ffc17 	ldw	r5,-16(fp)
81128270:	1009883a 	mov	r4,r2
81128274:	1128f6c0 	call	81128f6c <OS_EventTaskRemoveMulti>
81128278:	00000506 	br	81128290 <OSEventPendMulti+0x4e4>
8112827c:	d0a08417 	ldw	r2,-32240(gp)
81128280:	e17ffc17 	ldw	r5,-16(fp)
81128284:	1009883a 	mov	r4,r2
81128288:	1128f6c0 	call	81128f6c <OS_EventTaskRemoveMulti>
8112828c:	0001883a 	nop
81128290:	d0a08417 	ldw	r2,-32240(gp)
81128294:	10800c43 	ldbu	r2,49(r2)
81128298:	10803fcc 	andi	r2,r2,255
8112829c:	10000326 	beq	r2,zero,811282ac <OSEventPendMulti+0x500>
811282a0:	108000a0 	cmpeqi	r2,r2,2
811282a4:	1000231e 	bne	r2,zero,81128334 <OSEventPendMulti+0x588>
811282a8:	00002a06 	br	81128354 <OSEventPendMulti+0x5a8>
811282ac:	e0bff017 	ldw	r2,-64(fp)
811282b0:	10800003 	ldbu	r2,0(r2)
811282b4:	10803fcc 	andi	r2,r2,255
811282b8:	0080100e 	bge	zero,r2,811282fc <OSEventPendMulti+0x550>
811282bc:	10c000d0 	cmplti	r3,r2,3
811282c0:	1800071e 	bne	r3,zero,811282e0 <OSEventPendMulti+0x534>
811282c4:	108000e0 	cmpeqi	r2,r2,3
811282c8:	10000c26 	beq	r2,zero,811282fc <OSEventPendMulti+0x550>
811282cc:	e0bffe17 	ldw	r2,-8(fp)
811282d0:	10c00104 	addi	r3,r2,4
811282d4:	e0fffe15 	stw	r3,-8(fp)
811282d8:	10000015 	stw	zero,0(r2)
811282dc:	00001206 	br	81128328 <OSEventPendMulti+0x57c>
811282e0:	e0bffe17 	ldw	r2,-8(fp)
811282e4:	10c00104 	addi	r3,r2,4
811282e8:	e0fffe15 	stw	r3,-8(fp)
811282ec:	d0e08417 	ldw	r3,-32240(gp)
811282f0:	18c00917 	ldw	r3,36(r3)
811282f4:	10c00015 	stw	r3,0(r2)
811282f8:	00000b06 	br	81128328 <OSEventPendMulti+0x57c>
811282fc:	e0bff317 	ldw	r2,-52(fp)
81128300:	e0bff815 	stw	r2,-32(fp)
81128304:	e0bff817 	ldw	r2,-32(fp)
81128308:	1001703a 	wrctl	status,r2
8112830c:	e0bffd17 	ldw	r2,-12(fp)
81128310:	10000015 	stw	zero,0(r2)
81128314:	e0800217 	ldw	r2,8(fp)
81128318:	00c00044 	movi	r3,1
8112831c:	10c00005 	stb	r3,0(r2)
81128320:	e0bff18b 	ldhu	r2,-58(fp)
81128324:	00002206 	br	811283b0 <OSEventPendMulti+0x604>
81128328:	e0800217 	ldw	r2,8(fp)
8112832c:	10000005 	stb	zero,0(r2)
81128330:	00001006 	br	81128374 <OSEventPendMulti+0x5c8>
81128334:	e0bffe17 	ldw	r2,-8(fp)
81128338:	10c00104 	addi	r3,r2,4
8112833c:	e0fffe15 	stw	r3,-8(fp)
81128340:	10000015 	stw	zero,0(r2)
81128344:	e0800217 	ldw	r2,8(fp)
81128348:	00c00384 	movi	r3,14
8112834c:	10c00005 	stb	r3,0(r2)
81128350:	00000806 	br	81128374 <OSEventPendMulti+0x5c8>
81128354:	e0bffe17 	ldw	r2,-8(fp)
81128358:	10c00104 	addi	r3,r2,4
8112835c:	e0fffe15 	stw	r3,-8(fp)
81128360:	10000015 	stw	zero,0(r2)
81128364:	e0800217 	ldw	r2,8(fp)
81128368:	00c00284 	movi	r3,10
8112836c:	10c00005 	stb	r3,0(r2)
81128370:	0001883a 	nop
81128374:	d0a08417 	ldw	r2,-32240(gp)
81128378:	10000c05 	stb	zero,48(r2)
8112837c:	d0a08417 	ldw	r2,-32240(gp)
81128380:	10000c45 	stb	zero,49(r2)
81128384:	d0a08417 	ldw	r2,-32240(gp)
81128388:	10000715 	stw	zero,28(r2)
8112838c:	d0a08417 	ldw	r2,-32240(gp)
81128390:	10000815 	stw	zero,32(r2)
81128394:	d0a08417 	ldw	r2,-32240(gp)
81128398:	10000915 	stw	zero,36(r2)
8112839c:	e0bff317 	ldw	r2,-52(fp)
811283a0:	e0bffa15 	stw	r2,-24(fp)
811283a4:	e0bffa17 	ldw	r2,-24(fp)
811283a8:	1001703a 	wrctl	status,r2
811283ac:	e0bff18b 	ldhu	r2,-58(fp)
811283b0:	e037883a 	mov	sp,fp
811283b4:	dfc00117 	ldw	ra,4(sp)
811283b8:	df000017 	ldw	fp,0(sp)
811283bc:	dec00204 	addi	sp,sp,8
811283c0:	f800283a 	ret

811283c4 <OSInit>:
811283c4:	defffe04 	addi	sp,sp,-8
811283c8:	de00012e 	bgeu	sp,et,811283d0 <OSInit+0xc>
811283cc:	003b68fa 	trap	3
811283d0:	dfc00115 	stw	ra,4(sp)
811283d4:	df000015 	stw	fp,0(sp)
811283d8:	d839883a 	mov	fp,sp
811283dc:	113a9040 	call	8113a904 <OSInitHookBegin>
811283e0:	11291cc0 	call	811291cc <OS_InitMisc>
811283e4:	112921c0 	call	8112921c <OS_InitRdyList>
811283e8:	11293a00 	call	811293a0 <OS_InitTCBList>
811283ec:	11290e40 	call	811290e4 <OS_InitEventList>
811283f0:	112b3600 	call	8112b360 <OS_FlagInit>
811283f4:	112bca80 	call	8112bca8 <OS_MemInit>
811283f8:	112df780 	call	8112df78 <OS_QInit>
811283fc:	11292900 	call	81129290 <OS_InitTaskIdle>
81128400:	11293180 	call	81129318 <OS_InitTaskStat>
81128404:	113131c0 	call	8113131c <OSTmr_Init>
81128408:	113a9300 	call	8113a930 <OSInitHookEnd>
8112840c:	1129c7c0 	call	81129c7c <OSDebugInit>
81128410:	0001883a 	nop
81128414:	e037883a 	mov	sp,fp
81128418:	dfc00117 	ldw	ra,4(sp)
8112841c:	df000017 	ldw	fp,0(sp)
81128420:	dec00204 	addi	sp,sp,8
81128424:	f800283a 	ret

81128428 <OSIntEnter>:
81128428:	deffff04 	addi	sp,sp,-4
8112842c:	de00012e 	bgeu	sp,et,81128434 <OSIntEnter+0xc>
81128430:	003b68fa 	trap	3
81128434:	df000015 	stw	fp,0(sp)
81128438:	d839883a 	mov	fp,sp
8112843c:	d0a07303 	ldbu	r2,-32308(gp)
81128440:	10803fcc 	andi	r2,r2,255
81128444:	10800058 	cmpnei	r2,r2,1
81128448:	1000071e 	bne	r2,zero,81128468 <OSIntEnter+0x40>
8112844c:	d0a08303 	ldbu	r2,-32244(gp)
81128450:	10803fcc 	andi	r2,r2,255
81128454:	10803fe0 	cmpeqi	r2,r2,255
81128458:	1000031e 	bne	r2,zero,81128468 <OSIntEnter+0x40>
8112845c:	d0a08303 	ldbu	r2,-32244(gp)
81128460:	10800044 	addi	r2,r2,1
81128464:	d0a08305 	stb	r2,-32244(gp)
81128468:	0001883a 	nop
8112846c:	e037883a 	mov	sp,fp
81128470:	df000017 	ldw	fp,0(sp)
81128474:	dec00104 	addi	sp,sp,4
81128478:	f800283a 	ret

8112847c <OSIntExit>:
8112847c:	defffb04 	addi	sp,sp,-20
81128480:	de00012e 	bgeu	sp,et,81128488 <OSIntExit+0xc>
81128484:	003b68fa 	trap	3
81128488:	dfc00415 	stw	ra,16(sp)
8112848c:	df000315 	stw	fp,12(sp)
81128490:	df000304 	addi	fp,sp,12
81128494:	e03ffd15 	stw	zero,-12(fp)
81128498:	d0a07303 	ldbu	r2,-32308(gp)
8112849c:	10803fcc 	andi	r2,r2,255
811284a0:	10800058 	cmpnei	r2,r2,1
811284a4:	10002f1e 	bne	r2,zero,81128564 <OSIntExit+0xe8>
811284a8:	0005303a 	rdctl	r2,status
811284ac:	e0bfff15 	stw	r2,-4(fp)
811284b0:	e0ffff17 	ldw	r3,-4(fp)
811284b4:	00bfff84 	movi	r2,-2
811284b8:	1884703a 	and	r2,r3,r2
811284bc:	1001703a 	wrctl	status,r2
811284c0:	e0bfff17 	ldw	r2,-4(fp)
811284c4:	e0bffd15 	stw	r2,-12(fp)
811284c8:	d0a08303 	ldbu	r2,-32244(gp)
811284cc:	10803fcc 	andi	r2,r2,255
811284d0:	10000326 	beq	r2,zero,811284e0 <OSIntExit+0x64>
811284d4:	d0a08303 	ldbu	r2,-32244(gp)
811284d8:	10bfffc4 	addi	r2,r2,-1
811284dc:	d0a08305 	stb	r2,-32244(gp)
811284e0:	d0a08303 	ldbu	r2,-32244(gp)
811284e4:	10803fcc 	andi	r2,r2,255
811284e8:	10001a1e 	bne	r2,zero,81128554 <OSIntExit+0xd8>
811284ec:	d0a07103 	ldbu	r2,-32316(gp)
811284f0:	10803fcc 	andi	r2,r2,255
811284f4:	1000171e 	bne	r2,zero,81128554 <OSIntExit+0xd8>
811284f8:	11296300 	call	81129630 <OS_SchedNew>
811284fc:	d0e07583 	ldbu	r3,-32298(gp)
81128500:	d0a075c3 	ldbu	r2,-32297(gp)
81128504:	18c03fcc 	andi	r3,r3,255
81128508:	10803fcc 	andi	r2,r2,255
8112850c:	18801126 	beq	r3,r2,81128554 <OSIntExit+0xd8>
81128510:	d0a07583 	ldbu	r2,-32298(gp)
81128514:	10c03fcc 	andi	r3,r2,255
81128518:	00a04574 	movhi	r2,33045
8112851c:	108d5704 	addi	r2,r2,13660
81128520:	18c7883a 	add	r3,r3,r3
81128524:	18c7883a 	add	r3,r3,r3
81128528:	10c5883a 	add	r2,r2,r3
8112852c:	10800017 	ldw	r2,0(r2)
81128530:	d0a07e15 	stw	r2,-32264(gp)
81128534:	d0a07e17 	ldw	r2,-32264(gp)
81128538:	10c00e17 	ldw	r3,56(r2)
8112853c:	18c00044 	addi	r3,r3,1
81128540:	10c00e15 	stw	r3,56(r2)
81128544:	d0a07817 	ldw	r2,-32288(gp)
81128548:	10800044 	addi	r2,r2,1
8112854c:	d0a07815 	stw	r2,-32288(gp)
81128550:	113a5c40 	call	8113a5c4 <OSCtxSw>
81128554:	e0bffd17 	ldw	r2,-12(fp)
81128558:	e0bffe15 	stw	r2,-8(fp)
8112855c:	e0bffe17 	ldw	r2,-8(fp)
81128560:	1001703a 	wrctl	status,r2
81128564:	0001883a 	nop
81128568:	e037883a 	mov	sp,fp
8112856c:	dfc00117 	ldw	ra,4(sp)
81128570:	df000017 	ldw	fp,0(sp)
81128574:	dec00204 	addi	sp,sp,8
81128578:	f800283a 	ret

8112857c <OSSchedLock>:
8112857c:	defffc04 	addi	sp,sp,-16
81128580:	de00012e 	bgeu	sp,et,81128588 <OSSchedLock+0xc>
81128584:	003b68fa 	trap	3
81128588:	df000315 	stw	fp,12(sp)
8112858c:	df000304 	addi	fp,sp,12
81128590:	e03ffd15 	stw	zero,-12(fp)
81128594:	d0a07303 	ldbu	r2,-32308(gp)
81128598:	10803fcc 	andi	r2,r2,255
8112859c:	10800058 	cmpnei	r2,r2,1
811285a0:	1000161e 	bne	r2,zero,811285fc <OSSchedLock+0x80>
811285a4:	0005303a 	rdctl	r2,status
811285a8:	e0bfff15 	stw	r2,-4(fp)
811285ac:	e0ffff17 	ldw	r3,-4(fp)
811285b0:	00bfff84 	movi	r2,-2
811285b4:	1884703a 	and	r2,r3,r2
811285b8:	1001703a 	wrctl	status,r2
811285bc:	e0bfff17 	ldw	r2,-4(fp)
811285c0:	e0bffd15 	stw	r2,-12(fp)
811285c4:	d0a08303 	ldbu	r2,-32244(gp)
811285c8:	10803fcc 	andi	r2,r2,255
811285cc:	1000071e 	bne	r2,zero,811285ec <OSSchedLock+0x70>
811285d0:	d0a07103 	ldbu	r2,-32316(gp)
811285d4:	10803fcc 	andi	r2,r2,255
811285d8:	10803fe0 	cmpeqi	r2,r2,255
811285dc:	1000031e 	bne	r2,zero,811285ec <OSSchedLock+0x70>
811285e0:	d0a07103 	ldbu	r2,-32316(gp)
811285e4:	10800044 	addi	r2,r2,1
811285e8:	d0a07105 	stb	r2,-32316(gp)
811285ec:	e0bffd17 	ldw	r2,-12(fp)
811285f0:	e0bffe15 	stw	r2,-8(fp)
811285f4:	e0bffe17 	ldw	r2,-8(fp)
811285f8:	1001703a 	wrctl	status,r2
811285fc:	0001883a 	nop
81128600:	e037883a 	mov	sp,fp
81128604:	df000017 	ldw	fp,0(sp)
81128608:	dec00104 	addi	sp,sp,4
8112860c:	f800283a 	ret

81128610 <OSSchedUnlock>:
81128610:	defff804 	addi	sp,sp,-32
81128614:	de00012e 	bgeu	sp,et,8112861c <OSSchedUnlock+0xc>
81128618:	003b68fa 	trap	3
8112861c:	dfc00715 	stw	ra,28(sp)
81128620:	df000615 	stw	fp,24(sp)
81128624:	df000604 	addi	fp,sp,24
81128628:	e03ffa15 	stw	zero,-24(fp)
8112862c:	d0a07303 	ldbu	r2,-32308(gp)
81128630:	10803fcc 	andi	r2,r2,255
81128634:	10800058 	cmpnei	r2,r2,1
81128638:	1000281e 	bne	r2,zero,811286dc <OSSchedUnlock+0xcc>
8112863c:	0005303a 	rdctl	r2,status
81128640:	e0bfff15 	stw	r2,-4(fp)
81128644:	e0ffff17 	ldw	r3,-4(fp)
81128648:	00bfff84 	movi	r2,-2
8112864c:	1884703a 	and	r2,r3,r2
81128650:	1001703a 	wrctl	status,r2
81128654:	e0bfff17 	ldw	r2,-4(fp)
81128658:	e0bffa15 	stw	r2,-24(fp)
8112865c:	d0a07103 	ldbu	r2,-32316(gp)
81128660:	10803fcc 	andi	r2,r2,255
81128664:	10001926 	beq	r2,zero,811286cc <OSSchedUnlock+0xbc>
81128668:	d0a07103 	ldbu	r2,-32316(gp)
8112866c:	10bfffc4 	addi	r2,r2,-1
81128670:	d0a07105 	stb	r2,-32316(gp)
81128674:	d0a07103 	ldbu	r2,-32316(gp)
81128678:	10803fcc 	andi	r2,r2,255
8112867c:	10000e1e 	bne	r2,zero,811286b8 <OSSchedUnlock+0xa8>
81128680:	d0a08303 	ldbu	r2,-32244(gp)
81128684:	10803fcc 	andi	r2,r2,255
81128688:	1000061e 	bne	r2,zero,811286a4 <OSSchedUnlock+0x94>
8112868c:	e0bffa17 	ldw	r2,-24(fp)
81128690:	e0bffb15 	stw	r2,-20(fp)
81128694:	e0bffb17 	ldw	r2,-20(fp)
81128698:	1001703a 	wrctl	status,r2
8112869c:	11295580 	call	81129558 <OS_Sched>
811286a0:	00000e06 	br	811286dc <OSSchedUnlock+0xcc>
811286a4:	e0bffa17 	ldw	r2,-24(fp)
811286a8:	e0bffc15 	stw	r2,-16(fp)
811286ac:	e0bffc17 	ldw	r2,-16(fp)
811286b0:	1001703a 	wrctl	status,r2
811286b4:	00000906 	br	811286dc <OSSchedUnlock+0xcc>
811286b8:	e0bffa17 	ldw	r2,-24(fp)
811286bc:	e0bffd15 	stw	r2,-12(fp)
811286c0:	e0bffd17 	ldw	r2,-12(fp)
811286c4:	1001703a 	wrctl	status,r2
811286c8:	00000406 	br	811286dc <OSSchedUnlock+0xcc>
811286cc:	e0bffa17 	ldw	r2,-24(fp)
811286d0:	e0bffe15 	stw	r2,-8(fp)
811286d4:	e0bffe17 	ldw	r2,-8(fp)
811286d8:	1001703a 	wrctl	status,r2
811286dc:	0001883a 	nop
811286e0:	e037883a 	mov	sp,fp
811286e4:	dfc00117 	ldw	ra,4(sp)
811286e8:	df000017 	ldw	fp,0(sp)
811286ec:	dec00204 	addi	sp,sp,8
811286f0:	f800283a 	ret

811286f4 <OSStart>:
811286f4:	defffe04 	addi	sp,sp,-8
811286f8:	de00012e 	bgeu	sp,et,81128700 <OSStart+0xc>
811286fc:	003b68fa 	trap	3
81128700:	dfc00115 	stw	ra,4(sp)
81128704:	df000015 	stw	fp,0(sp)
81128708:	d839883a 	mov	fp,sp
8112870c:	d0a07303 	ldbu	r2,-32308(gp)
81128710:	10803fcc 	andi	r2,r2,255
81128714:	10000f1e 	bne	r2,zero,81128754 <OSStart+0x60>
81128718:	11296300 	call	81129630 <OS_SchedNew>
8112871c:	d0a07583 	ldbu	r2,-32298(gp)
81128720:	d0a075c5 	stb	r2,-32297(gp)
81128724:	d0a07583 	ldbu	r2,-32298(gp)
81128728:	10c03fcc 	andi	r3,r2,255
8112872c:	00a04574 	movhi	r2,33045
81128730:	108d5704 	addi	r2,r2,13660
81128734:	18c7883a 	add	r3,r3,r3
81128738:	18c7883a 	add	r3,r3,r3
8112873c:	10c5883a 	add	r2,r2,r3
81128740:	10800017 	ldw	r2,0(r2)
81128744:	d0a07e15 	stw	r2,-32264(gp)
81128748:	d0a07e17 	ldw	r2,-32264(gp)
8112874c:	d0a08415 	stw	r2,-32240(gp)
81128750:	113a6600 	call	8113a660 <OSStartHighRdy>
81128754:	0001883a 	nop
81128758:	e037883a 	mov	sp,fp
8112875c:	dfc00117 	ldw	ra,4(sp)
81128760:	df000017 	ldw	fp,0(sp)
81128764:	dec00204 	addi	sp,sp,8
81128768:	f800283a 	ret

8112876c <OSStatInit>:
8112876c:	defff904 	addi	sp,sp,-28
81128770:	de00012e 	bgeu	sp,et,81128778 <OSStatInit+0xc>
81128774:	003b68fa 	trap	3
81128778:	dfc00615 	stw	ra,24(sp)
8112877c:	df000515 	stw	fp,20(sp)
81128780:	df000504 	addi	fp,sp,20
81128784:	e03ffb15 	stw	zero,-20(fp)
81128788:	01000084 	movi	r4,2
8112878c:	11302940 	call	81130294 <OSTimeDly>
81128790:	0005303a 	rdctl	r2,status
81128794:	e0bffc15 	stw	r2,-16(fp)
81128798:	e0fffc17 	ldw	r3,-16(fp)
8112879c:	00bfff84 	movi	r2,-2
811287a0:	1884703a 	and	r2,r3,r2
811287a4:	1001703a 	wrctl	status,r2
811287a8:	e0bffc17 	ldw	r2,-16(fp)
811287ac:	e0bffb15 	stw	r2,-20(fp)
811287b0:	d0207415 	stw	zero,-32304(gp)
811287b4:	e0bffb17 	ldw	r2,-20(fp)
811287b8:	e0bffd15 	stw	r2,-12(fp)
811287bc:	e0bffd17 	ldw	r2,-12(fp)
811287c0:	1001703a 	wrctl	status,r2
811287c4:	01001904 	movi	r4,100
811287c8:	11302940 	call	81130294 <OSTimeDly>
811287cc:	0005303a 	rdctl	r2,status
811287d0:	e0bffe15 	stw	r2,-8(fp)
811287d4:	e0fffe17 	ldw	r3,-8(fp)
811287d8:	00bfff84 	movi	r2,-2
811287dc:	1884703a 	and	r2,r3,r2
811287e0:	1001703a 	wrctl	status,r2
811287e4:	e0bffe17 	ldw	r2,-8(fp)
811287e8:	e0bffb15 	stw	r2,-20(fp)
811287ec:	d0a07417 	ldw	r2,-32304(gp)
811287f0:	d0a07a15 	stw	r2,-32280(gp)
811287f4:	00800044 	movi	r2,1
811287f8:	d0a08905 	stb	r2,-32220(gp)
811287fc:	e0bffb17 	ldw	r2,-20(fp)
81128800:	e0bfff15 	stw	r2,-4(fp)
81128804:	e0bfff17 	ldw	r2,-4(fp)
81128808:	1001703a 	wrctl	status,r2
8112880c:	0001883a 	nop
81128810:	e037883a 	mov	sp,fp
81128814:	dfc00117 	ldw	ra,4(sp)
81128818:	df000017 	ldw	fp,0(sp)
8112881c:	dec00204 	addi	sp,sp,8
81128820:	f800283a 	ret

81128824 <OSTimeTick>:
81128824:	defff704 	addi	sp,sp,-36
81128828:	de00012e 	bgeu	sp,et,81128830 <OSTimeTick+0xc>
8112882c:	003b68fa 	trap	3
81128830:	dfc00815 	stw	ra,32(sp)
81128834:	df000715 	stw	fp,28(sp)
81128838:	df000704 	addi	fp,sp,28
8112883c:	e03ffb15 	stw	zero,-20(fp)
81128840:	113a8b00 	call	8113a8b0 <OSTimeTickHook>
81128844:	0005303a 	rdctl	r2,status
81128848:	e0bffd15 	stw	r2,-12(fp)
8112884c:	e0fffd17 	ldw	r3,-12(fp)
81128850:	00bfff84 	movi	r2,-2
81128854:	1884703a 	and	r2,r3,r2
81128858:	1001703a 	wrctl	status,r2
8112885c:	e0bffd17 	ldw	r2,-12(fp)
81128860:	e0bffb15 	stw	r2,-20(fp)
81128864:	d0a08617 	ldw	r2,-32232(gp)
81128868:	10800044 	addi	r2,r2,1
8112886c:	d0a08615 	stw	r2,-32232(gp)
81128870:	e0bffb17 	ldw	r2,-20(fp)
81128874:	e0bfff15 	stw	r2,-4(fp)
81128878:	e0bfff17 	ldw	r2,-4(fp)
8112887c:	1001703a 	wrctl	status,r2
81128880:	d0a07303 	ldbu	r2,-32308(gp)
81128884:	10803fcc 	andi	r2,r2,255
81128888:	10800058 	cmpnei	r2,r2,1
8112888c:	10006a1e 	bne	r2,zero,81128a38 <OSTimeTick+0x214>
81128890:	d0a07703 	ldbu	r2,-32292(gp)
81128894:	10803fcc 	andi	r2,r2,255
81128898:	10c00060 	cmpeqi	r3,r2,1
8112889c:	1800061e 	bne	r3,zero,811288b8 <OSTimeTick+0x94>
811288a0:	10c000a0 	cmpeqi	r3,r2,2
811288a4:	1800061e 	bne	r3,zero,811288c0 <OSTimeTick+0x9c>
811288a8:	10000a1e 	bne	r2,zero,811288d4 <OSTimeTick+0xb0>
811288ac:	00800044 	movi	r2,1
811288b0:	e0bffa05 	stb	r2,-24(fp)
811288b4:	00000b06 	br	811288e4 <OSTimeTick+0xc0>
811288b8:	e03ffa05 	stb	zero,-24(fp)
811288bc:	00000906 	br	811288e4 <OSTimeTick+0xc0>
811288c0:	00800044 	movi	r2,1
811288c4:	e0bffa05 	stb	r2,-24(fp)
811288c8:	00800044 	movi	r2,1
811288cc:	d0a07705 	stb	r2,-32292(gp)
811288d0:	00000406 	br	811288e4 <OSTimeTick+0xc0>
811288d4:	00800044 	movi	r2,1
811288d8:	e0bffa05 	stb	r2,-24(fp)
811288dc:	d0207705 	stb	zero,-32292(gp)
811288e0:	0001883a 	nop
811288e4:	e0bffa03 	ldbu	r2,-24(fp)
811288e8:	10005226 	beq	r2,zero,81128a34 <OSTimeTick+0x210>
811288ec:	d0a07617 	ldw	r2,-32296(gp)
811288f0:	e0bff915 	stw	r2,-28(fp)
811288f4:	00004906 	br	81128a1c <OSTimeTick+0x1f8>
811288f8:	0005303a 	rdctl	r2,status
811288fc:	e0bffc15 	stw	r2,-16(fp)
81128900:	e0fffc17 	ldw	r3,-16(fp)
81128904:	00bfff84 	movi	r2,-2
81128908:	1884703a 	and	r2,r3,r2
8112890c:	1001703a 	wrctl	status,r2
81128910:	e0bffc17 	ldw	r2,-16(fp)
81128914:	e0bffb15 	stw	r2,-20(fp)
81128918:	e0bff917 	ldw	r2,-28(fp)
8112891c:	10800b8b 	ldhu	r2,46(r2)
81128920:	10bfffcc 	andi	r2,r2,65535
81128924:	10003626 	beq	r2,zero,81128a00 <OSTimeTick+0x1dc>
81128928:	e0bff917 	ldw	r2,-28(fp)
8112892c:	10800b8b 	ldhu	r2,46(r2)
81128930:	10bfffc4 	addi	r2,r2,-1
81128934:	1007883a 	mov	r3,r2
81128938:	e0bff917 	ldw	r2,-28(fp)
8112893c:	10c00b8d 	sth	r3,46(r2)
81128940:	e0bff917 	ldw	r2,-28(fp)
81128944:	10800b8b 	ldhu	r2,46(r2)
81128948:	10bfffcc 	andi	r2,r2,65535
8112894c:	10002c1e 	bne	r2,zero,81128a00 <OSTimeTick+0x1dc>
81128950:	e0bff917 	ldw	r2,-28(fp)
81128954:	10800c03 	ldbu	r2,48(r2)
81128958:	10803fcc 	andi	r2,r2,255
8112895c:	10800dcc 	andi	r2,r2,55
81128960:	10000b26 	beq	r2,zero,81128990 <OSTimeTick+0x16c>
81128964:	e0bff917 	ldw	r2,-28(fp)
81128968:	10c00c03 	ldbu	r3,48(r2)
8112896c:	00bff204 	movi	r2,-56
81128970:	1884703a 	and	r2,r3,r2
81128974:	1007883a 	mov	r3,r2
81128978:	e0bff917 	ldw	r2,-28(fp)
8112897c:	10c00c05 	stb	r3,48(r2)
81128980:	e0bff917 	ldw	r2,-28(fp)
81128984:	00c00044 	movi	r3,1
81128988:	10c00c45 	stb	r3,49(r2)
8112898c:	00000206 	br	81128998 <OSTimeTick+0x174>
81128990:	e0bff917 	ldw	r2,-28(fp)
81128994:	10000c45 	stb	zero,49(r2)
81128998:	e0bff917 	ldw	r2,-28(fp)
8112899c:	10800c03 	ldbu	r2,48(r2)
811289a0:	10803fcc 	andi	r2,r2,255
811289a4:	1080020c 	andi	r2,r2,8
811289a8:	1000151e 	bne	r2,zero,81128a00 <OSTimeTick+0x1dc>
811289ac:	e0bff917 	ldw	r2,-28(fp)
811289b0:	10c00d83 	ldbu	r3,54(r2)
811289b4:	d0a08003 	ldbu	r2,-32256(gp)
811289b8:	1884b03a 	or	r2,r3,r2
811289bc:	d0a08005 	stb	r2,-32256(gp)
811289c0:	e0bff917 	ldw	r2,-28(fp)
811289c4:	10800d03 	ldbu	r2,52(r2)
811289c8:	10c03fcc 	andi	r3,r2,255
811289cc:	e0bff917 	ldw	r2,-28(fp)
811289d0:	10800d03 	ldbu	r2,52(r2)
811289d4:	11003fcc 	andi	r4,r2,255
811289d8:	d0a08044 	addi	r2,gp,-32255
811289dc:	2085883a 	add	r2,r4,r2
811289e0:	11000003 	ldbu	r4,0(r2)
811289e4:	e0bff917 	ldw	r2,-28(fp)
811289e8:	10800d43 	ldbu	r2,53(r2)
811289ec:	2084b03a 	or	r2,r4,r2
811289f0:	1009883a 	mov	r4,r2
811289f4:	d0a08044 	addi	r2,gp,-32255
811289f8:	1885883a 	add	r2,r3,r2
811289fc:	11000005 	stb	r4,0(r2)
81128a00:	e0bff917 	ldw	r2,-28(fp)
81128a04:	10800517 	ldw	r2,20(r2)
81128a08:	e0bff915 	stw	r2,-28(fp)
81128a0c:	e0bffb17 	ldw	r2,-20(fp)
81128a10:	e0bffe15 	stw	r2,-8(fp)
81128a14:	e0bffe17 	ldw	r2,-8(fp)
81128a18:	1001703a 	wrctl	status,r2
81128a1c:	e0bff917 	ldw	r2,-28(fp)
81128a20:	10800c83 	ldbu	r2,50(r2)
81128a24:	10803fcc 	andi	r2,r2,255
81128a28:	10800a18 	cmpnei	r2,r2,40
81128a2c:	103fb21e 	bne	r2,zero,811288f8 <__reset+0xfb1088f8>
81128a30:	00000106 	br	81128a38 <OSTimeTick+0x214>
81128a34:	0001883a 	nop
81128a38:	e037883a 	mov	sp,fp
81128a3c:	dfc00117 	ldw	ra,4(sp)
81128a40:	df000017 	ldw	fp,0(sp)
81128a44:	dec00204 	addi	sp,sp,8
81128a48:	f800283a 	ret

81128a4c <OSVersion>:
81128a4c:	deffff04 	addi	sp,sp,-4
81128a50:	de00012e 	bgeu	sp,et,81128a58 <OSVersion+0xc>
81128a54:	003b68fa 	trap	3
81128a58:	df000015 	stw	fp,0(sp)
81128a5c:	d839883a 	mov	fp,sp
81128a60:	00804784 	movi	r2,286
81128a64:	e037883a 	mov	sp,fp
81128a68:	df000017 	ldw	fp,0(sp)
81128a6c:	dec00104 	addi	sp,sp,4
81128a70:	f800283a 	ret

81128a74 <OS_Dummy>:
81128a74:	deffff04 	addi	sp,sp,-4
81128a78:	de00012e 	bgeu	sp,et,81128a80 <OS_Dummy+0xc>
81128a7c:	003b68fa 	trap	3
81128a80:	df000015 	stw	fp,0(sp)
81128a84:	d839883a 	mov	fp,sp
81128a88:	0001883a 	nop
81128a8c:	e037883a 	mov	sp,fp
81128a90:	df000017 	ldw	fp,0(sp)
81128a94:	dec00104 	addi	sp,sp,4
81128a98:	f800283a 	ret

81128a9c <OS_EventTaskRdy>:
81128a9c:	defff804 	addi	sp,sp,-32
81128aa0:	de00012e 	bgeu	sp,et,81128aa8 <OS_EventTaskRdy+0xc>
81128aa4:	003b68fa 	trap	3
81128aa8:	dfc00715 	stw	ra,28(sp)
81128aac:	df000615 	stw	fp,24(sp)
81128ab0:	df000604 	addi	fp,sp,24
81128ab4:	e13ffc15 	stw	r4,-16(fp)
81128ab8:	e17ffd15 	stw	r5,-12(fp)
81128abc:	3007883a 	mov	r3,r6
81128ac0:	3805883a 	mov	r2,r7
81128ac4:	e0fffe05 	stb	r3,-8(fp)
81128ac8:	e0bfff05 	stb	r2,-4(fp)
81128acc:	e0bffc17 	ldw	r2,-16(fp)
81128ad0:	10800283 	ldbu	r2,10(r2)
81128ad4:	10c03fcc 	andi	r3,r2,255
81128ad8:	00a04534 	movhi	r2,33044
81128adc:	10b78204 	addi	r2,r2,-8696
81128ae0:	10c5883a 	add	r2,r2,r3
81128ae4:	10800003 	ldbu	r2,0(r2)
81128ae8:	e0bffa05 	stb	r2,-24(fp)
81128aec:	e0bffa03 	ldbu	r2,-24(fp)
81128af0:	e0fffc17 	ldw	r3,-16(fp)
81128af4:	1885883a 	add	r2,r3,r2
81128af8:	108002c4 	addi	r2,r2,11
81128afc:	10800003 	ldbu	r2,0(r2)
81128b00:	10c03fcc 	andi	r3,r2,255
81128b04:	00a04534 	movhi	r2,33044
81128b08:	10b78204 	addi	r2,r2,-8696
81128b0c:	10c5883a 	add	r2,r2,r3
81128b10:	10800003 	ldbu	r2,0(r2)
81128b14:	e0bffa45 	stb	r2,-23(fp)
81128b18:	e0bffa03 	ldbu	r2,-24(fp)
81128b1c:	100490fa 	slli	r2,r2,3
81128b20:	1007883a 	mov	r3,r2
81128b24:	e0bffa43 	ldbu	r2,-23(fp)
81128b28:	1885883a 	add	r2,r3,r2
81128b2c:	e0bffa85 	stb	r2,-22(fp)
81128b30:	e0fffa83 	ldbu	r3,-22(fp)
81128b34:	00a04574 	movhi	r2,33045
81128b38:	108d5704 	addi	r2,r2,13660
81128b3c:	18c7883a 	add	r3,r3,r3
81128b40:	18c7883a 	add	r3,r3,r3
81128b44:	10c5883a 	add	r2,r2,r3
81128b48:	10800017 	ldw	r2,0(r2)
81128b4c:	e0bffb15 	stw	r2,-20(fp)
81128b50:	e0bffb17 	ldw	r2,-20(fp)
81128b54:	10000b8d 	sth	zero,46(r2)
81128b58:	e0bffb17 	ldw	r2,-20(fp)
81128b5c:	e0fffd17 	ldw	r3,-12(fp)
81128b60:	10c00915 	stw	r3,36(r2)
81128b64:	e0bffb17 	ldw	r2,-20(fp)
81128b68:	10800c03 	ldbu	r2,48(r2)
81128b6c:	1007883a 	mov	r3,r2
81128b70:	e0bffe03 	ldbu	r2,-8(fp)
81128b74:	0084303a 	nor	r2,zero,r2
81128b78:	1884703a 	and	r2,r3,r2
81128b7c:	1007883a 	mov	r3,r2
81128b80:	e0bffb17 	ldw	r2,-20(fp)
81128b84:	10c00c05 	stb	r3,48(r2)
81128b88:	e0bffb17 	ldw	r2,-20(fp)
81128b8c:	e0ffff03 	ldbu	r3,-4(fp)
81128b90:	10c00c45 	stb	r3,49(r2)
81128b94:	e0bffb17 	ldw	r2,-20(fp)
81128b98:	10800c03 	ldbu	r2,48(r2)
81128b9c:	10803fcc 	andi	r2,r2,255
81128ba0:	1080020c 	andi	r2,r2,8
81128ba4:	1000111e 	bne	r2,zero,81128bec <OS_EventTaskRdy+0x150>
81128ba8:	e0bffb17 	ldw	r2,-20(fp)
81128bac:	10c00d83 	ldbu	r3,54(r2)
81128bb0:	d0a08003 	ldbu	r2,-32256(gp)
81128bb4:	1884b03a 	or	r2,r3,r2
81128bb8:	d0a08005 	stb	r2,-32256(gp)
81128bbc:	e0fffa03 	ldbu	r3,-24(fp)
81128bc0:	e13ffa03 	ldbu	r4,-24(fp)
81128bc4:	d0a08044 	addi	r2,gp,-32255
81128bc8:	2085883a 	add	r2,r4,r2
81128bcc:	11000003 	ldbu	r4,0(r2)
81128bd0:	e0bffb17 	ldw	r2,-20(fp)
81128bd4:	10800d43 	ldbu	r2,53(r2)
81128bd8:	2084b03a 	or	r2,r4,r2
81128bdc:	1009883a 	mov	r4,r2
81128be0:	d0a08044 	addi	r2,gp,-32255
81128be4:	1885883a 	add	r2,r3,r2
81128be8:	11000005 	stb	r4,0(r2)
81128bec:	e17ffc17 	ldw	r5,-16(fp)
81128bf0:	e13ffb17 	ldw	r4,-20(fp)
81128bf4:	1128eac0 	call	81128eac <OS_EventTaskRemove>
81128bf8:	e0bffb17 	ldw	r2,-20(fp)
81128bfc:	10800817 	ldw	r2,32(r2)
81128c00:	10000826 	beq	r2,zero,81128c24 <OS_EventTaskRdy+0x188>
81128c04:	e0bffb17 	ldw	r2,-20(fp)
81128c08:	10800817 	ldw	r2,32(r2)
81128c0c:	100b883a 	mov	r5,r2
81128c10:	e13ffb17 	ldw	r4,-20(fp)
81128c14:	1128f6c0 	call	81128f6c <OS_EventTaskRemoveMulti>
81128c18:	e0bffb17 	ldw	r2,-20(fp)
81128c1c:	e0fffc17 	ldw	r3,-16(fp)
81128c20:	10c00715 	stw	r3,28(r2)
81128c24:	e0bffa83 	ldbu	r2,-22(fp)
81128c28:	e037883a 	mov	sp,fp
81128c2c:	dfc00117 	ldw	ra,4(sp)
81128c30:	df000017 	ldw	fp,0(sp)
81128c34:	dec00204 	addi	sp,sp,8
81128c38:	f800283a 	ret

81128c3c <OS_EventTaskWait>:
81128c3c:	defffd04 	addi	sp,sp,-12
81128c40:	de00012e 	bgeu	sp,et,81128c48 <OS_EventTaskWait+0xc>
81128c44:	003b68fa 	trap	3
81128c48:	df000215 	stw	fp,8(sp)
81128c4c:	df000204 	addi	fp,sp,8
81128c50:	e13fff15 	stw	r4,-4(fp)
81128c54:	d0a08417 	ldw	r2,-32240(gp)
81128c58:	e0ffff17 	ldw	r3,-4(fp)
81128c5c:	10c00715 	stw	r3,28(r2)
81128c60:	d0a08417 	ldw	r2,-32240(gp)
81128c64:	10800d03 	ldbu	r2,52(r2)
81128c68:	10803fcc 	andi	r2,r2,255
81128c6c:	d0e08417 	ldw	r3,-32240(gp)
81128c70:	18c00d03 	ldbu	r3,52(r3)
81128c74:	18c03fcc 	andi	r3,r3,255
81128c78:	e13fff17 	ldw	r4,-4(fp)
81128c7c:	20c7883a 	add	r3,r4,r3
81128c80:	18c002c4 	addi	r3,r3,11
81128c84:	19000003 	ldbu	r4,0(r3)
81128c88:	d0e08417 	ldw	r3,-32240(gp)
81128c8c:	18c00d43 	ldbu	r3,53(r3)
81128c90:	20c6b03a 	or	r3,r4,r3
81128c94:	1809883a 	mov	r4,r3
81128c98:	e0ffff17 	ldw	r3,-4(fp)
81128c9c:	1885883a 	add	r2,r3,r2
81128ca0:	108002c4 	addi	r2,r2,11
81128ca4:	11000005 	stb	r4,0(r2)
81128ca8:	e0bfff17 	ldw	r2,-4(fp)
81128cac:	10c00283 	ldbu	r3,10(r2)
81128cb0:	d0a08417 	ldw	r2,-32240(gp)
81128cb4:	10800d83 	ldbu	r2,54(r2)
81128cb8:	1884b03a 	or	r2,r3,r2
81128cbc:	1007883a 	mov	r3,r2
81128cc0:	e0bfff17 	ldw	r2,-4(fp)
81128cc4:	10c00285 	stb	r3,10(r2)
81128cc8:	d0a08417 	ldw	r2,-32240(gp)
81128ccc:	10800d03 	ldbu	r2,52(r2)
81128cd0:	e0bffe05 	stb	r2,-8(fp)
81128cd4:	e0fffe03 	ldbu	r3,-8(fp)
81128cd8:	e13ffe03 	ldbu	r4,-8(fp)
81128cdc:	d0a08044 	addi	r2,gp,-32255
81128ce0:	2085883a 	add	r2,r4,r2
81128ce4:	10800003 	ldbu	r2,0(r2)
81128ce8:	1009883a 	mov	r4,r2
81128cec:	d0a08417 	ldw	r2,-32240(gp)
81128cf0:	10800d43 	ldbu	r2,53(r2)
81128cf4:	0084303a 	nor	r2,zero,r2
81128cf8:	2084703a 	and	r2,r4,r2
81128cfc:	1009883a 	mov	r4,r2
81128d00:	d0a08044 	addi	r2,gp,-32255
81128d04:	1885883a 	add	r2,r3,r2
81128d08:	11000005 	stb	r4,0(r2)
81128d0c:	e0fffe03 	ldbu	r3,-8(fp)
81128d10:	d0a08044 	addi	r2,gp,-32255
81128d14:	1885883a 	add	r2,r3,r2
81128d18:	10800003 	ldbu	r2,0(r2)
81128d1c:	10803fcc 	andi	r2,r2,255
81128d20:	1000071e 	bne	r2,zero,81128d40 <OS_EventTaskWait+0x104>
81128d24:	d0a08417 	ldw	r2,-32240(gp)
81128d28:	10800d83 	ldbu	r2,54(r2)
81128d2c:	0084303a 	nor	r2,zero,r2
81128d30:	1007883a 	mov	r3,r2
81128d34:	d0a08003 	ldbu	r2,-32256(gp)
81128d38:	1884703a 	and	r2,r3,r2
81128d3c:	d0a08005 	stb	r2,-32256(gp)
81128d40:	0001883a 	nop
81128d44:	e037883a 	mov	sp,fp
81128d48:	df000017 	ldw	fp,0(sp)
81128d4c:	dec00104 	addi	sp,sp,4
81128d50:	f800283a 	ret

81128d54 <OS_EventTaskWaitMulti>:
81128d54:	defffb04 	addi	sp,sp,-20
81128d58:	de00012e 	bgeu	sp,et,81128d60 <OS_EventTaskWaitMulti+0xc>
81128d5c:	003b68fa 	trap	3
81128d60:	df000415 	stw	fp,16(sp)
81128d64:	df000404 	addi	fp,sp,16
81128d68:	e13fff15 	stw	r4,-4(fp)
81128d6c:	d0a08417 	ldw	r2,-32240(gp)
81128d70:	10000715 	stw	zero,28(r2)
81128d74:	d0a08417 	ldw	r2,-32240(gp)
81128d78:	e0ffff17 	ldw	r3,-4(fp)
81128d7c:	10c00815 	stw	r3,32(r2)
81128d80:	e0bfff17 	ldw	r2,-4(fp)
81128d84:	e0bffc15 	stw	r2,-16(fp)
81128d88:	e0bffc17 	ldw	r2,-16(fp)
81128d8c:	10800017 	ldw	r2,0(r2)
81128d90:	e0bffd15 	stw	r2,-12(fp)
81128d94:	00002006 	br	81128e18 <OS_EventTaskWaitMulti+0xc4>
81128d98:	d0a08417 	ldw	r2,-32240(gp)
81128d9c:	10800d03 	ldbu	r2,52(r2)
81128da0:	10803fcc 	andi	r2,r2,255
81128da4:	d0e08417 	ldw	r3,-32240(gp)
81128da8:	18c00d03 	ldbu	r3,52(r3)
81128dac:	18c03fcc 	andi	r3,r3,255
81128db0:	e13ffd17 	ldw	r4,-12(fp)
81128db4:	20c7883a 	add	r3,r4,r3
81128db8:	18c002c4 	addi	r3,r3,11
81128dbc:	19000003 	ldbu	r4,0(r3)
81128dc0:	d0e08417 	ldw	r3,-32240(gp)
81128dc4:	18c00d43 	ldbu	r3,53(r3)
81128dc8:	20c6b03a 	or	r3,r4,r3
81128dcc:	1809883a 	mov	r4,r3
81128dd0:	e0fffd17 	ldw	r3,-12(fp)
81128dd4:	1885883a 	add	r2,r3,r2
81128dd8:	108002c4 	addi	r2,r2,11
81128ddc:	11000005 	stb	r4,0(r2)
81128de0:	e0bffd17 	ldw	r2,-12(fp)
81128de4:	10c00283 	ldbu	r3,10(r2)
81128de8:	d0a08417 	ldw	r2,-32240(gp)
81128dec:	10800d83 	ldbu	r2,54(r2)
81128df0:	1884b03a 	or	r2,r3,r2
81128df4:	1007883a 	mov	r3,r2
81128df8:	e0bffd17 	ldw	r2,-12(fp)
81128dfc:	10c00285 	stb	r3,10(r2)
81128e00:	e0bffc17 	ldw	r2,-16(fp)
81128e04:	10800104 	addi	r2,r2,4
81128e08:	e0bffc15 	stw	r2,-16(fp)
81128e0c:	e0bffc17 	ldw	r2,-16(fp)
81128e10:	10800017 	ldw	r2,0(r2)
81128e14:	e0bffd15 	stw	r2,-12(fp)
81128e18:	e0bffd17 	ldw	r2,-12(fp)
81128e1c:	103fde1e 	bne	r2,zero,81128d98 <__reset+0xfb108d98>
81128e20:	d0a08417 	ldw	r2,-32240(gp)
81128e24:	10800d03 	ldbu	r2,52(r2)
81128e28:	e0bffe05 	stb	r2,-8(fp)
81128e2c:	e0fffe03 	ldbu	r3,-8(fp)
81128e30:	e13ffe03 	ldbu	r4,-8(fp)
81128e34:	d0a08044 	addi	r2,gp,-32255
81128e38:	2085883a 	add	r2,r4,r2
81128e3c:	10800003 	ldbu	r2,0(r2)
81128e40:	1009883a 	mov	r4,r2
81128e44:	d0a08417 	ldw	r2,-32240(gp)
81128e48:	10800d43 	ldbu	r2,53(r2)
81128e4c:	0084303a 	nor	r2,zero,r2
81128e50:	2084703a 	and	r2,r4,r2
81128e54:	1009883a 	mov	r4,r2
81128e58:	d0a08044 	addi	r2,gp,-32255
81128e5c:	1885883a 	add	r2,r3,r2
81128e60:	11000005 	stb	r4,0(r2)
81128e64:	e0fffe03 	ldbu	r3,-8(fp)
81128e68:	d0a08044 	addi	r2,gp,-32255
81128e6c:	1885883a 	add	r2,r3,r2
81128e70:	10800003 	ldbu	r2,0(r2)
81128e74:	10803fcc 	andi	r2,r2,255
81128e78:	1000071e 	bne	r2,zero,81128e98 <OS_EventTaskWaitMulti+0x144>
81128e7c:	d0a08417 	ldw	r2,-32240(gp)
81128e80:	10800d83 	ldbu	r2,54(r2)
81128e84:	0084303a 	nor	r2,zero,r2
81128e88:	1007883a 	mov	r3,r2
81128e8c:	d0a08003 	ldbu	r2,-32256(gp)
81128e90:	1884703a 	and	r2,r3,r2
81128e94:	d0a08005 	stb	r2,-32256(gp)
81128e98:	0001883a 	nop
81128e9c:	e037883a 	mov	sp,fp
81128ea0:	df000017 	ldw	fp,0(sp)
81128ea4:	dec00104 	addi	sp,sp,4
81128ea8:	f800283a 	ret

81128eac <OS_EventTaskRemove>:
81128eac:	defffc04 	addi	sp,sp,-16
81128eb0:	de00012e 	bgeu	sp,et,81128eb8 <OS_EventTaskRemove+0xc>
81128eb4:	003b68fa 	trap	3
81128eb8:	df000315 	stw	fp,12(sp)
81128ebc:	df000304 	addi	fp,sp,12
81128ec0:	e13ffe15 	stw	r4,-8(fp)
81128ec4:	e17fff15 	stw	r5,-4(fp)
81128ec8:	e0bffe17 	ldw	r2,-8(fp)
81128ecc:	10800d03 	ldbu	r2,52(r2)
81128ed0:	e0bffd05 	stb	r2,-12(fp)
81128ed4:	e0bffd03 	ldbu	r2,-12(fp)
81128ed8:	e0fffd03 	ldbu	r3,-12(fp)
81128edc:	e13fff17 	ldw	r4,-4(fp)
81128ee0:	20c7883a 	add	r3,r4,r3
81128ee4:	18c002c4 	addi	r3,r3,11
81128ee8:	18c00003 	ldbu	r3,0(r3)
81128eec:	1809883a 	mov	r4,r3
81128ef0:	e0fffe17 	ldw	r3,-8(fp)
81128ef4:	18c00d43 	ldbu	r3,53(r3)
81128ef8:	00c6303a 	nor	r3,zero,r3
81128efc:	20c6703a 	and	r3,r4,r3
81128f00:	1809883a 	mov	r4,r3
81128f04:	e0ffff17 	ldw	r3,-4(fp)
81128f08:	1885883a 	add	r2,r3,r2
81128f0c:	108002c4 	addi	r2,r2,11
81128f10:	11000005 	stb	r4,0(r2)
81128f14:	e0bffd03 	ldbu	r2,-12(fp)
81128f18:	e0ffff17 	ldw	r3,-4(fp)
81128f1c:	1885883a 	add	r2,r3,r2
81128f20:	108002c4 	addi	r2,r2,11
81128f24:	10800003 	ldbu	r2,0(r2)
81128f28:	10803fcc 	andi	r2,r2,255
81128f2c:	10000a1e 	bne	r2,zero,81128f58 <OS_EventTaskRemove+0xac>
81128f30:	e0bfff17 	ldw	r2,-4(fp)
81128f34:	10800283 	ldbu	r2,10(r2)
81128f38:	1007883a 	mov	r3,r2
81128f3c:	e0bffe17 	ldw	r2,-8(fp)
81128f40:	10800d83 	ldbu	r2,54(r2)
81128f44:	0084303a 	nor	r2,zero,r2
81128f48:	1884703a 	and	r2,r3,r2
81128f4c:	1007883a 	mov	r3,r2
81128f50:	e0bfff17 	ldw	r2,-4(fp)
81128f54:	10c00285 	stb	r3,10(r2)
81128f58:	0001883a 	nop
81128f5c:	e037883a 	mov	sp,fp
81128f60:	df000017 	ldw	fp,0(sp)
81128f64:	dec00104 	addi	sp,sp,4
81128f68:	f800283a 	ret

81128f6c <OS_EventTaskRemoveMulti>:
81128f6c:	defffa04 	addi	sp,sp,-24
81128f70:	de00012e 	bgeu	sp,et,81128f78 <OS_EventTaskRemoveMulti+0xc>
81128f74:	003b68fa 	trap	3
81128f78:	df000515 	stw	fp,20(sp)
81128f7c:	df000504 	addi	fp,sp,20
81128f80:	e13ffe15 	stw	r4,-8(fp)
81128f84:	e17fff15 	stw	r5,-4(fp)
81128f88:	e0bffe17 	ldw	r2,-8(fp)
81128f8c:	10800d03 	ldbu	r2,52(r2)
81128f90:	e0bffd05 	stb	r2,-12(fp)
81128f94:	e0bffe17 	ldw	r2,-8(fp)
81128f98:	10800d83 	ldbu	r2,54(r2)
81128f9c:	e0bffd45 	stb	r2,-11(fp)
81128fa0:	e0bffe17 	ldw	r2,-8(fp)
81128fa4:	10800d43 	ldbu	r2,53(r2)
81128fa8:	e0bffd85 	stb	r2,-10(fp)
81128fac:	e0bfff17 	ldw	r2,-4(fp)
81128fb0:	e0bffb15 	stw	r2,-20(fp)
81128fb4:	e0bffb17 	ldw	r2,-20(fp)
81128fb8:	10800017 	ldw	r2,0(r2)
81128fbc:	e0bffc15 	stw	r2,-16(fp)
81128fc0:	00002506 	br	81129058 <OS_EventTaskRemoveMulti+0xec>
81128fc4:	e0bffd03 	ldbu	r2,-12(fp)
81128fc8:	e0fffd03 	ldbu	r3,-12(fp)
81128fcc:	e13ffc17 	ldw	r4,-16(fp)
81128fd0:	20c7883a 	add	r3,r4,r3
81128fd4:	18c002c4 	addi	r3,r3,11
81128fd8:	18c00003 	ldbu	r3,0(r3)
81128fdc:	1809883a 	mov	r4,r3
81128fe0:	e0fffd83 	ldbu	r3,-10(fp)
81128fe4:	00c6303a 	nor	r3,zero,r3
81128fe8:	20c6703a 	and	r3,r4,r3
81128fec:	1809883a 	mov	r4,r3
81128ff0:	e0fffc17 	ldw	r3,-16(fp)
81128ff4:	1885883a 	add	r2,r3,r2
81128ff8:	108002c4 	addi	r2,r2,11
81128ffc:	11000005 	stb	r4,0(r2)
81129000:	e0bffd03 	ldbu	r2,-12(fp)
81129004:	e0fffc17 	ldw	r3,-16(fp)
81129008:	1885883a 	add	r2,r3,r2
8112900c:	108002c4 	addi	r2,r2,11
81129010:	10800003 	ldbu	r2,0(r2)
81129014:	10803fcc 	andi	r2,r2,255
81129018:	1000091e 	bne	r2,zero,81129040 <OS_EventTaskRemoveMulti+0xd4>
8112901c:	e0bffc17 	ldw	r2,-16(fp)
81129020:	10800283 	ldbu	r2,10(r2)
81129024:	1007883a 	mov	r3,r2
81129028:	e0bffd43 	ldbu	r2,-11(fp)
8112902c:	0084303a 	nor	r2,zero,r2
81129030:	1884703a 	and	r2,r3,r2
81129034:	1007883a 	mov	r3,r2
81129038:	e0bffc17 	ldw	r2,-16(fp)
8112903c:	10c00285 	stb	r3,10(r2)
81129040:	e0bffb17 	ldw	r2,-20(fp)
81129044:	10800104 	addi	r2,r2,4
81129048:	e0bffb15 	stw	r2,-20(fp)
8112904c:	e0bffb17 	ldw	r2,-20(fp)
81129050:	10800017 	ldw	r2,0(r2)
81129054:	e0bffc15 	stw	r2,-16(fp)
81129058:	e0bffc17 	ldw	r2,-16(fp)
8112905c:	103fd91e 	bne	r2,zero,81128fc4 <__reset+0xfb108fc4>
81129060:	0001883a 	nop
81129064:	e037883a 	mov	sp,fp
81129068:	df000017 	ldw	fp,0(sp)
8112906c:	dec00104 	addi	sp,sp,4
81129070:	f800283a 	ret

81129074 <OS_EventWaitListInit>:
81129074:	defffc04 	addi	sp,sp,-16
81129078:	de00012e 	bgeu	sp,et,81129080 <OS_EventWaitListInit+0xc>
8112907c:	003b68fa 	trap	3
81129080:	df000315 	stw	fp,12(sp)
81129084:	df000304 	addi	fp,sp,12
81129088:	e13fff15 	stw	r4,-4(fp)
8112908c:	e0bfff17 	ldw	r2,-4(fp)
81129090:	10000285 	stb	zero,10(r2)
81129094:	e0bfff17 	ldw	r2,-4(fp)
81129098:	108002c4 	addi	r2,r2,11
8112909c:	e0bffd15 	stw	r2,-12(fp)
811290a0:	e03ffe05 	stb	zero,-8(fp)
811290a4:	00000706 	br	811290c4 <OS_EventWaitListInit+0x50>
811290a8:	e0bffd17 	ldw	r2,-12(fp)
811290ac:	10c00044 	addi	r3,r2,1
811290b0:	e0fffd15 	stw	r3,-12(fp)
811290b4:	10000005 	stb	zero,0(r2)
811290b8:	e0bffe03 	ldbu	r2,-8(fp)
811290bc:	10800044 	addi	r2,r2,1
811290c0:	e0bffe05 	stb	r2,-8(fp)
811290c4:	e0bffe03 	ldbu	r2,-8(fp)
811290c8:	108001b0 	cmpltui	r2,r2,6
811290cc:	103ff61e 	bne	r2,zero,811290a8 <__reset+0xfb1090a8>
811290d0:	0001883a 	nop
811290d4:	e037883a 	mov	sp,fp
811290d8:	df000017 	ldw	fp,0(sp)
811290dc:	dec00104 	addi	sp,sp,4
811290e0:	f800283a 	ret

811290e4 <OS_InitEventList>:
811290e4:	defffb04 	addi	sp,sp,-20
811290e8:	de00012e 	bgeu	sp,et,811290f0 <OS_InitEventList+0xc>
811290ec:	003b68fa 	trap	3
811290f0:	dfc00415 	stw	ra,16(sp)
811290f4:	df000315 	stw	fp,12(sp)
811290f8:	df000304 	addi	fp,sp,12
811290fc:	01430c04 	movi	r5,3120
81129100:	01204574 	movhi	r4,33045
81129104:	2106b504 	addi	r4,r4,6868
81129108:	112948c0 	call	8112948c <OS_MemClr>
8112910c:	00a04574 	movhi	r2,33045
81129110:	1086b504 	addi	r2,r2,6868
81129114:	e0bffe15 	stw	r2,-8(fp)
81129118:	00a04574 	movhi	r2,33045
8112911c:	1086c204 	addi	r2,r2,6920
81129120:	e0bfff15 	stw	r2,-4(fp)
81129124:	e03ffd0d 	sth	zero,-12(fp)
81129128:	00001306 	br	81129178 <OS_InitEventList+0x94>
8112912c:	e0bffe17 	ldw	r2,-8(fp)
81129130:	10000005 	stb	zero,0(r2)
81129134:	e0bffe17 	ldw	r2,-8(fp)
81129138:	e0ffff17 	ldw	r3,-4(fp)
8112913c:	10c00115 	stw	r3,4(r2)
81129140:	e0bffe17 	ldw	r2,-8(fp)
81129144:	00c00fc4 	movi	r3,63
81129148:	10c00445 	stb	r3,17(r2)
8112914c:	e0bffe17 	ldw	r2,-8(fp)
81129150:	10000485 	stb	zero,18(r2)
81129154:	e0bffe17 	ldw	r2,-8(fp)
81129158:	10800d04 	addi	r2,r2,52
8112915c:	e0bffe15 	stw	r2,-8(fp)
81129160:	e0bfff17 	ldw	r2,-4(fp)
81129164:	10800d04 	addi	r2,r2,52
81129168:	e0bfff15 	stw	r2,-4(fp)
8112916c:	e0bffd0b 	ldhu	r2,-12(fp)
81129170:	10800044 	addi	r2,r2,1
81129174:	e0bffd0d 	sth	r2,-12(fp)
81129178:	e0bffd0b 	ldhu	r2,-12(fp)
8112917c:	10800ef0 	cmpltui	r2,r2,59
81129180:	103fea1e 	bne	r2,zero,8112912c <__reset+0xfb10912c>
81129184:	e0bffe17 	ldw	r2,-8(fp)
81129188:	10000005 	stb	zero,0(r2)
8112918c:	e0bffe17 	ldw	r2,-8(fp)
81129190:	10000115 	stw	zero,4(r2)
81129194:	e0bffe17 	ldw	r2,-8(fp)
81129198:	00c00fc4 	movi	r3,63
8112919c:	10c00445 	stb	r3,17(r2)
811291a0:	e0bffe17 	ldw	r2,-8(fp)
811291a4:	10000485 	stb	zero,18(r2)
811291a8:	00a04574 	movhi	r2,33045
811291ac:	1086b504 	addi	r2,r2,6868
811291b0:	d0a08215 	stw	r2,-32248(gp)
811291b4:	0001883a 	nop
811291b8:	e037883a 	mov	sp,fp
811291bc:	dfc00117 	ldw	ra,4(sp)
811291c0:	df000017 	ldw	fp,0(sp)
811291c4:	dec00204 	addi	sp,sp,8
811291c8:	f800283a 	ret

811291cc <OS_InitMisc>:
811291cc:	deffff04 	addi	sp,sp,-4
811291d0:	de00012e 	bgeu	sp,et,811291d8 <OS_InitMisc+0xc>
811291d4:	003b68fa 	trap	3
811291d8:	df000015 	stw	fp,0(sp)
811291dc:	d839883a 	mov	fp,sp
811291e0:	d0208615 	stw	zero,-32232(gp)
811291e4:	d0208305 	stb	zero,-32244(gp)
811291e8:	d0207105 	stb	zero,-32316(gp)
811291ec:	d0207c45 	stb	zero,-32271(gp)
811291f0:	d0207305 	stb	zero,-32308(gp)
811291f4:	d0207815 	stw	zero,-32288(gp)
811291f8:	d0207415 	stw	zero,-32304(gp)
811291fc:	d0208a15 	stw	zero,-32216(gp)
81129200:	d0207a15 	stw	zero,-32280(gp)
81129204:	d0208905 	stb	zero,-32220(gp)
81129208:	0001883a 	nop
8112920c:	e037883a 	mov	sp,fp
81129210:	df000017 	ldw	fp,0(sp)
81129214:	dec00104 	addi	sp,sp,4
81129218:	f800283a 	ret

8112921c <OS_InitRdyList>:
8112921c:	defffd04 	addi	sp,sp,-12
81129220:	de00012e 	bgeu	sp,et,81129228 <OS_InitRdyList+0xc>
81129224:	003b68fa 	trap	3
81129228:	df000215 	stw	fp,8(sp)
8112922c:	df000204 	addi	fp,sp,8
81129230:	d0208005 	stb	zero,-32256(gp)
81129234:	d0a08044 	addi	r2,gp,-32255
81129238:	e0bfff15 	stw	r2,-4(fp)
8112923c:	e03ffe05 	stb	zero,-8(fp)
81129240:	00000706 	br	81129260 <OS_InitRdyList+0x44>
81129244:	e0bfff17 	ldw	r2,-4(fp)
81129248:	10c00044 	addi	r3,r2,1
8112924c:	e0ffff15 	stw	r3,-4(fp)
81129250:	10000005 	stb	zero,0(r2)
81129254:	e0bffe03 	ldbu	r2,-8(fp)
81129258:	10800044 	addi	r2,r2,1
8112925c:	e0bffe05 	stb	r2,-8(fp)
81129260:	e0bffe03 	ldbu	r2,-8(fp)
81129264:	108001b0 	cmpltui	r2,r2,6
81129268:	103ff61e 	bne	r2,zero,81129244 <__reset+0xfb109244>
8112926c:	d02075c5 	stb	zero,-32297(gp)
81129270:	d0207585 	stb	zero,-32298(gp)
81129274:	d0207e15 	stw	zero,-32264(gp)
81129278:	d0208415 	stw	zero,-32240(gp)
8112927c:	0001883a 	nop
81129280:	e037883a 	mov	sp,fp
81129284:	df000017 	ldw	fp,0(sp)
81129288:	dec00104 	addi	sp,sp,4
8112928c:	f800283a 	ret

81129290 <OS_InitTaskIdle>:
81129290:	defff804 	addi	sp,sp,-32
81129294:	de00012e 	bgeu	sp,et,8112929c <OS_InitTaskIdle+0xc>
81129298:	003b68fa 	trap	3
8112929c:	dfc00715 	stw	ra,28(sp)
811292a0:	df000615 	stw	fp,24(sp)
811292a4:	df000604 	addi	fp,sp,24
811292a8:	008000c4 	movi	r2,3
811292ac:	d8800415 	stw	r2,16(sp)
811292b0:	d8000315 	stw	zero,12(sp)
811292b4:	00808004 	movi	r2,512
811292b8:	d8800215 	stw	r2,8(sp)
811292bc:	00a04574 	movhi	r2,33045
811292c0:	1084b504 	addi	r2,r2,4820
811292c4:	d8800115 	stw	r2,4(sp)
811292c8:	00bfffd4 	movui	r2,65535
811292cc:	d8800015 	stw	r2,0(sp)
811292d0:	01c00a04 	movi	r7,40
811292d4:	01a04574 	movhi	r6,33045
811292d8:	3186b404 	addi	r6,r6,6864
811292dc:	000b883a 	mov	r5,zero
811292e0:	012044f4 	movhi	r4,33043
811292e4:	2125e104 	addi	r4,r4,-26748
811292e8:	112f1740 	call	8112f174 <OSTaskCreateExt>
811292ec:	e1bfff04 	addi	r6,fp,-4
811292f0:	01604534 	movhi	r5,33044
811292f4:	2977c204 	addi	r5,r5,-8440
811292f8:	01000a04 	movi	r4,40
811292fc:	112f9a40 	call	8112f9a4 <OSTaskNameSet>
81129300:	0001883a 	nop
81129304:	e037883a 	mov	sp,fp
81129308:	dfc00117 	ldw	ra,4(sp)
8112930c:	df000017 	ldw	fp,0(sp)
81129310:	dec00204 	addi	sp,sp,8
81129314:	f800283a 	ret

81129318 <OS_InitTaskStat>:
81129318:	defff804 	addi	sp,sp,-32
8112931c:	de00012e 	bgeu	sp,et,81129324 <OS_InitTaskStat+0xc>
81129320:	003b68fa 	trap	3
81129324:	dfc00715 	stw	ra,28(sp)
81129328:	df000615 	stw	fp,24(sp)
8112932c:	df000604 	addi	fp,sp,24
81129330:	008000c4 	movi	r2,3
81129334:	d8800415 	stw	r2,16(sp)
81129338:	d8000315 	stw	zero,12(sp)
8112933c:	00808004 	movi	r2,512
81129340:	d8800215 	stw	r2,8(sp)
81129344:	00a04574 	movhi	r2,33045
81129348:	10803d04 	addi	r2,r2,244
8112934c:	d8800115 	stw	r2,4(sp)
81129350:	00bfff94 	movui	r2,65534
81129354:	d8800015 	stw	r2,0(sp)
81129358:	01c009c4 	movi	r7,39
8112935c:	01a04574 	movhi	r6,33045
81129360:	31823c04 	addi	r6,r6,2288
81129364:	000b883a 	mov	r5,zero
81129368:	012044f4 	movhi	r4,33043
8112936c:	2125fa04 	addi	r4,r4,-26648
81129370:	112f1740 	call	8112f174 <OSTaskCreateExt>
81129374:	e1bfff04 	addi	r6,fp,-4
81129378:	01604534 	movhi	r5,33044
8112937c:	2977c604 	addi	r5,r5,-8424
81129380:	010009c4 	movi	r4,39
81129384:	112f9a40 	call	8112f9a4 <OSTaskNameSet>
81129388:	0001883a 	nop
8112938c:	e037883a 	mov	sp,fp
81129390:	dfc00117 	ldw	ra,4(sp)
81129394:	df000017 	ldw	fp,0(sp)
81129398:	dec00204 	addi	sp,sp,8
8112939c:	f800283a 	ret

811293a0 <OS_InitTCBList>:
811293a0:	defffb04 	addi	sp,sp,-20
811293a4:	de00012e 	bgeu	sp,et,811293ac <OS_InitTCBList+0xc>
811293a8:	003b68fa 	trap	3
811293ac:	dfc00415 	stw	ra,16(sp)
811293b0:	df000315 	stw	fp,12(sp)
811293b4:	df000304 	addi	fp,sp,12
811293b8:	01439604 	movi	r5,3672
811293bc:	01204574 	movhi	r4,33045
811293c0:	2109c104 	addi	r4,r4,9988
811293c4:	112948c0 	call	8112948c <OS_MemClr>
811293c8:	01402904 	movi	r5,164
811293cc:	01204574 	movhi	r4,33045
811293d0:	210d5704 	addi	r4,r4,13660
811293d4:	112948c0 	call	8112948c <OS_MemClr>
811293d8:	00a04574 	movhi	r2,33045
811293dc:	1089c104 	addi	r2,r2,9988
811293e0:	e0bffe15 	stw	r2,-8(fp)
811293e4:	00a04574 	movhi	r2,33045
811293e8:	1089dc04 	addi	r2,r2,10096
811293ec:	e0bfff15 	stw	r2,-4(fp)
811293f0:	e03ffd05 	stb	zero,-12(fp)
811293f4:	00001106 	br	8112943c <OS_InitTCBList+0x9c>
811293f8:	e0bffe17 	ldw	r2,-8(fp)
811293fc:	e0ffff17 	ldw	r3,-4(fp)
81129400:	10c00515 	stw	r3,20(r2)
81129404:	e0bffe17 	ldw	r2,-8(fp)
81129408:	00c00fc4 	movi	r3,63
8112940c:	10c01305 	stb	r3,76(r2)
81129410:	e0bffe17 	ldw	r2,-8(fp)
81129414:	10001345 	stb	zero,77(r2)
81129418:	e0bffe17 	ldw	r2,-8(fp)
8112941c:	10801b04 	addi	r2,r2,108
81129420:	e0bffe15 	stw	r2,-8(fp)
81129424:	e0bfff17 	ldw	r2,-4(fp)
81129428:	10801b04 	addi	r2,r2,108
8112942c:	e0bfff15 	stw	r2,-4(fp)
81129430:	e0bffd03 	ldbu	r2,-12(fp)
81129434:	10800044 	addi	r2,r2,1
81129438:	e0bffd05 	stb	r2,-12(fp)
8112943c:	e0bffd03 	ldbu	r2,-12(fp)
81129440:	10800870 	cmpltui	r2,r2,33
81129444:	103fec1e 	bne	r2,zero,811293f8 <__reset+0xfb1093f8>
81129448:	e0bffe17 	ldw	r2,-8(fp)
8112944c:	10000515 	stw	zero,20(r2)
81129450:	e0bffe17 	ldw	r2,-8(fp)
81129454:	00c00fc4 	movi	r3,63
81129458:	10c01305 	stb	r3,76(r2)
8112945c:	e0bffe17 	ldw	r2,-8(fp)
81129460:	10001345 	stb	zero,77(r2)
81129464:	d0207615 	stw	zero,-32296(gp)
81129468:	00a04574 	movhi	r2,33045
8112946c:	1089c104 	addi	r2,r2,9988
81129470:	d0a07b15 	stw	r2,-32276(gp)
81129474:	0001883a 	nop
81129478:	e037883a 	mov	sp,fp
8112947c:	dfc00117 	ldw	ra,4(sp)
81129480:	df000017 	ldw	fp,0(sp)
81129484:	dec00204 	addi	sp,sp,8
81129488:	f800283a 	ret

8112948c <OS_MemClr>:
8112948c:	defffd04 	addi	sp,sp,-12
81129490:	de00012e 	bgeu	sp,et,81129498 <OS_MemClr+0xc>
81129494:	003b68fa 	trap	3
81129498:	df000215 	stw	fp,8(sp)
8112949c:	df000204 	addi	fp,sp,8
811294a0:	e13ffe15 	stw	r4,-8(fp)
811294a4:	2805883a 	mov	r2,r5
811294a8:	e0bfff0d 	sth	r2,-4(fp)
811294ac:	00000706 	br	811294cc <OS_MemClr+0x40>
811294b0:	e0bffe17 	ldw	r2,-8(fp)
811294b4:	10c00044 	addi	r3,r2,1
811294b8:	e0fffe15 	stw	r3,-8(fp)
811294bc:	10000005 	stb	zero,0(r2)
811294c0:	e0bfff0b 	ldhu	r2,-4(fp)
811294c4:	10bfffc4 	addi	r2,r2,-1
811294c8:	e0bfff0d 	sth	r2,-4(fp)
811294cc:	e0bfff0b 	ldhu	r2,-4(fp)
811294d0:	103ff71e 	bne	r2,zero,811294b0 <__reset+0xfb1094b0>
811294d4:	0001883a 	nop
811294d8:	e037883a 	mov	sp,fp
811294dc:	df000017 	ldw	fp,0(sp)
811294e0:	dec00104 	addi	sp,sp,4
811294e4:	f800283a 	ret

811294e8 <OS_MemCopy>:
811294e8:	defffc04 	addi	sp,sp,-16
811294ec:	de00012e 	bgeu	sp,et,811294f4 <OS_MemCopy+0xc>
811294f0:	003b68fa 	trap	3
811294f4:	df000315 	stw	fp,12(sp)
811294f8:	df000304 	addi	fp,sp,12
811294fc:	e13ffd15 	stw	r4,-12(fp)
81129500:	e17ffe15 	stw	r5,-8(fp)
81129504:	3005883a 	mov	r2,r6
81129508:	e0bfff0d 	sth	r2,-4(fp)
8112950c:	00000b06 	br	8112953c <OS_MemCopy+0x54>
81129510:	e0bffd17 	ldw	r2,-12(fp)
81129514:	10c00044 	addi	r3,r2,1
81129518:	e0fffd15 	stw	r3,-12(fp)
8112951c:	e0fffe17 	ldw	r3,-8(fp)
81129520:	19000044 	addi	r4,r3,1
81129524:	e13ffe15 	stw	r4,-8(fp)
81129528:	18c00003 	ldbu	r3,0(r3)
8112952c:	10c00005 	stb	r3,0(r2)
81129530:	e0bfff0b 	ldhu	r2,-4(fp)
81129534:	10bfffc4 	addi	r2,r2,-1
81129538:	e0bfff0d 	sth	r2,-4(fp)
8112953c:	e0bfff0b 	ldhu	r2,-4(fp)
81129540:	103ff31e 	bne	r2,zero,81129510 <__reset+0xfb109510>
81129544:	0001883a 	nop
81129548:	e037883a 	mov	sp,fp
8112954c:	df000017 	ldw	fp,0(sp)
81129550:	dec00104 	addi	sp,sp,4
81129554:	f800283a 	ret

81129558 <OS_Sched>:
81129558:	defffb04 	addi	sp,sp,-20
8112955c:	de00012e 	bgeu	sp,et,81129564 <OS_Sched+0xc>
81129560:	003b68fa 	trap	3
81129564:	dfc00415 	stw	ra,16(sp)
81129568:	df000315 	stw	fp,12(sp)
8112956c:	df000304 	addi	fp,sp,12
81129570:	e03ffd15 	stw	zero,-12(fp)
81129574:	0005303a 	rdctl	r2,status
81129578:	e0bfff15 	stw	r2,-4(fp)
8112957c:	e0ffff17 	ldw	r3,-4(fp)
81129580:	00bfff84 	movi	r2,-2
81129584:	1884703a 	and	r2,r3,r2
81129588:	1001703a 	wrctl	status,r2
8112958c:	e0bfff17 	ldw	r2,-4(fp)
81129590:	e0bffd15 	stw	r2,-12(fp)
81129594:	d0a08303 	ldbu	r2,-32244(gp)
81129598:	10803fcc 	andi	r2,r2,255
8112959c:	10001a1e 	bne	r2,zero,81129608 <OS_Sched+0xb0>
811295a0:	d0a07103 	ldbu	r2,-32316(gp)
811295a4:	10803fcc 	andi	r2,r2,255
811295a8:	1000171e 	bne	r2,zero,81129608 <OS_Sched+0xb0>
811295ac:	11296300 	call	81129630 <OS_SchedNew>
811295b0:	d0e07583 	ldbu	r3,-32298(gp)
811295b4:	d0a075c3 	ldbu	r2,-32297(gp)
811295b8:	18c03fcc 	andi	r3,r3,255
811295bc:	10803fcc 	andi	r2,r2,255
811295c0:	18801126 	beq	r3,r2,81129608 <OS_Sched+0xb0>
811295c4:	d0a07583 	ldbu	r2,-32298(gp)
811295c8:	10c03fcc 	andi	r3,r2,255
811295cc:	00a04574 	movhi	r2,33045
811295d0:	108d5704 	addi	r2,r2,13660
811295d4:	18c7883a 	add	r3,r3,r3
811295d8:	18c7883a 	add	r3,r3,r3
811295dc:	10c5883a 	add	r2,r2,r3
811295e0:	10800017 	ldw	r2,0(r2)
811295e4:	d0a07e15 	stw	r2,-32264(gp)
811295e8:	d0a07e17 	ldw	r2,-32264(gp)
811295ec:	10c00e17 	ldw	r3,56(r2)
811295f0:	18c00044 	addi	r3,r3,1
811295f4:	10c00e15 	stw	r3,56(r2)
811295f8:	d0a07817 	ldw	r2,-32288(gp)
811295fc:	10800044 	addi	r2,r2,1
81129600:	d0a07815 	stw	r2,-32288(gp)
81129604:	113a5c40 	call	8113a5c4 <OSCtxSw>
81129608:	e0bffd17 	ldw	r2,-12(fp)
8112960c:	e0bffe15 	stw	r2,-8(fp)
81129610:	e0bffe17 	ldw	r2,-8(fp)
81129614:	1001703a 	wrctl	status,r2
81129618:	0001883a 	nop
8112961c:	e037883a 	mov	sp,fp
81129620:	dfc00117 	ldw	ra,4(sp)
81129624:	df000017 	ldw	fp,0(sp)
81129628:	dec00204 	addi	sp,sp,8
8112962c:	f800283a 	ret

81129630 <OS_SchedNew>:
81129630:	defffe04 	addi	sp,sp,-8
81129634:	de00012e 	bgeu	sp,et,8112963c <OS_SchedNew+0xc>
81129638:	003b68fa 	trap	3
8112963c:	df000115 	stw	fp,4(sp)
81129640:	df000104 	addi	fp,sp,4
81129644:	d0a08003 	ldbu	r2,-32256(gp)
81129648:	10c03fcc 	andi	r3,r2,255
8112964c:	00a04534 	movhi	r2,33044
81129650:	10b78204 	addi	r2,r2,-8696
81129654:	10c5883a 	add	r2,r2,r3
81129658:	10800003 	ldbu	r2,0(r2)
8112965c:	e0bfff05 	stb	r2,-4(fp)
81129660:	e0bfff03 	ldbu	r2,-4(fp)
81129664:	100490fa 	slli	r2,r2,3
81129668:	1009883a 	mov	r4,r2
8112966c:	e0ffff03 	ldbu	r3,-4(fp)
81129670:	d0a08044 	addi	r2,gp,-32255
81129674:	1885883a 	add	r2,r3,r2
81129678:	10800003 	ldbu	r2,0(r2)
8112967c:	10c03fcc 	andi	r3,r2,255
81129680:	00a04534 	movhi	r2,33044
81129684:	10b78204 	addi	r2,r2,-8696
81129688:	10c5883a 	add	r2,r2,r3
8112968c:	10800003 	ldbu	r2,0(r2)
81129690:	2085883a 	add	r2,r4,r2
81129694:	d0a07585 	stb	r2,-32298(gp)
81129698:	0001883a 	nop
8112969c:	e037883a 	mov	sp,fp
811296a0:	df000017 	ldw	fp,0(sp)
811296a4:	dec00104 	addi	sp,sp,4
811296a8:	f800283a 	ret

811296ac <OS_StrCopy>:
811296ac:	defffc04 	addi	sp,sp,-16
811296b0:	de00012e 	bgeu	sp,et,811296b8 <OS_StrCopy+0xc>
811296b4:	003b68fa 	trap	3
811296b8:	df000315 	stw	fp,12(sp)
811296bc:	df000304 	addi	fp,sp,12
811296c0:	e13ffe15 	stw	r4,-8(fp)
811296c4:	e17fff15 	stw	r5,-4(fp)
811296c8:	e03ffd05 	stb	zero,-12(fp)
811296cc:	00000b06 	br	811296fc <OS_StrCopy+0x50>
811296d0:	e0bffe17 	ldw	r2,-8(fp)
811296d4:	10c00044 	addi	r3,r2,1
811296d8:	e0fffe15 	stw	r3,-8(fp)
811296dc:	e0ffff17 	ldw	r3,-4(fp)
811296e0:	19000044 	addi	r4,r3,1
811296e4:	e13fff15 	stw	r4,-4(fp)
811296e8:	18c00003 	ldbu	r3,0(r3)
811296ec:	10c00005 	stb	r3,0(r2)
811296f0:	e0bffd03 	ldbu	r2,-12(fp)
811296f4:	10800044 	addi	r2,r2,1
811296f8:	e0bffd05 	stb	r2,-12(fp)
811296fc:	e0bfff17 	ldw	r2,-4(fp)
81129700:	10800003 	ldbu	r2,0(r2)
81129704:	10803fcc 	andi	r2,r2,255
81129708:	103ff11e 	bne	r2,zero,811296d0 <__reset+0xfb1096d0>
8112970c:	e0bffe17 	ldw	r2,-8(fp)
81129710:	10000005 	stb	zero,0(r2)
81129714:	e0bffd03 	ldbu	r2,-12(fp)
81129718:	e037883a 	mov	sp,fp
8112971c:	df000017 	ldw	fp,0(sp)
81129720:	dec00104 	addi	sp,sp,4
81129724:	f800283a 	ret

81129728 <OS_StrLen>:
81129728:	defffd04 	addi	sp,sp,-12
8112972c:	de00012e 	bgeu	sp,et,81129734 <OS_StrLen+0xc>
81129730:	003b68fa 	trap	3
81129734:	df000215 	stw	fp,8(sp)
81129738:	df000204 	addi	fp,sp,8
8112973c:	e13fff15 	stw	r4,-4(fp)
81129740:	e03ffe05 	stb	zero,-8(fp)
81129744:	00000606 	br	81129760 <OS_StrLen+0x38>
81129748:	e0bfff17 	ldw	r2,-4(fp)
8112974c:	10800044 	addi	r2,r2,1
81129750:	e0bfff15 	stw	r2,-4(fp)
81129754:	e0bffe03 	ldbu	r2,-8(fp)
81129758:	10800044 	addi	r2,r2,1
8112975c:	e0bffe05 	stb	r2,-8(fp)
81129760:	e0bfff17 	ldw	r2,-4(fp)
81129764:	10800003 	ldbu	r2,0(r2)
81129768:	10803fcc 	andi	r2,r2,255
8112976c:	103ff61e 	bne	r2,zero,81129748 <__reset+0xfb109748>
81129770:	e0bffe03 	ldbu	r2,-8(fp)
81129774:	e037883a 	mov	sp,fp
81129778:	df000017 	ldw	fp,0(sp)
8112977c:	dec00104 	addi	sp,sp,4
81129780:	f800283a 	ret

81129784 <OS_TaskIdle>:
81129784:	defffa04 	addi	sp,sp,-24
81129788:	de00012e 	bgeu	sp,et,81129790 <OS_TaskIdle+0xc>
8112978c:	003b68fa 	trap	3
81129790:	dfc00515 	stw	ra,20(sp)
81129794:	df000415 	stw	fp,16(sp)
81129798:	df000404 	addi	fp,sp,16
8112979c:	e13fff15 	stw	r4,-4(fp)
811297a0:	e03ffc15 	stw	zero,-16(fp)
811297a4:	0005303a 	rdctl	r2,status
811297a8:	e0bffd15 	stw	r2,-12(fp)
811297ac:	e0fffd17 	ldw	r3,-12(fp)
811297b0:	00bfff84 	movi	r2,-2
811297b4:	1884703a 	and	r2,r3,r2
811297b8:	1001703a 	wrctl	status,r2
811297bc:	e0bffd17 	ldw	r2,-12(fp)
811297c0:	e0bffc15 	stw	r2,-16(fp)
811297c4:	d0a07417 	ldw	r2,-32304(gp)
811297c8:	10800044 	addi	r2,r2,1
811297cc:	d0a07415 	stw	r2,-32304(gp)
811297d0:	e0bffc17 	ldw	r2,-16(fp)
811297d4:	e0bffe15 	stw	r2,-8(fp)
811297d8:	e0bffe17 	ldw	r2,-8(fp)
811297dc:	1001703a 	wrctl	status,r2
811297e0:	113a9580 	call	8113a958 <OSTaskIdleHook>
811297e4:	003fef06 	br	811297a4 <__reset+0xfb1097a4>

811297e8 <OS_TaskStat>:
811297e8:	defff804 	addi	sp,sp,-32
811297ec:	de00012e 	bgeu	sp,et,811297f4 <OS_TaskStat+0xc>
811297f0:	003b68fa 	trap	3
811297f4:	dfc00715 	stw	ra,28(sp)
811297f8:	df000615 	stw	fp,24(sp)
811297fc:	dc400515 	stw	r17,20(sp)
81129800:	dc000415 	stw	r16,16(sp)
81129804:	df000604 	addi	fp,sp,24
81129808:	e13ffd15 	stw	r4,-12(fp)
8112980c:	e03ffa15 	stw	zero,-24(fp)
81129810:	00000206 	br	8112981c <OS_TaskStat+0x34>
81129814:	01003204 	movi	r4,200
81129818:	11302940 	call	81130294 <OSTimeDly>
8112981c:	d0a08903 	ldbu	r2,-32220(gp)
81129820:	10803fcc 	andi	r2,r2,255
81129824:	103ffb26 	beq	r2,zero,81129814 <__reset+0xfb109814>
81129828:	d0e07a17 	ldw	r3,-32280(gp)
8112982c:	00947b34 	movhi	r2,20972
81129830:	10a147c4 	addi	r2,r2,-31457
81129834:	1888383a 	mulxuu	r4,r3,r2
81129838:	1885383a 	mul	r2,r3,r2
8112983c:	1021883a 	mov	r16,r2
81129840:	2023883a 	mov	r17,r4
81129844:	8804d17a 	srli	r2,r17,5
81129848:	d0a07a15 	stw	r2,-32280(gp)
8112984c:	d0a07a17 	ldw	r2,-32280(gp)
81129850:	1000031e 	bne	r2,zero,81129860 <OS_TaskStat+0x78>
81129854:	d0207c05 	stb	zero,-32272(gp)
81129858:	01003fc4 	movi	r4,255
8112985c:	112ff040 	call	8112ff04 <OSTaskSuspend>
81129860:	0005303a 	rdctl	r2,status
81129864:	e0bffb15 	stw	r2,-20(fp)
81129868:	e0fffb17 	ldw	r3,-20(fp)
8112986c:	00bfff84 	movi	r2,-2
81129870:	1884703a 	and	r2,r3,r2
81129874:	1001703a 	wrctl	status,r2
81129878:	e0bffb17 	ldw	r2,-20(fp)
8112987c:	e0bffa15 	stw	r2,-24(fp)
81129880:	d0a07417 	ldw	r2,-32304(gp)
81129884:	d0a08a15 	stw	r2,-32216(gp)
81129888:	d0207415 	stw	zero,-32304(gp)
8112988c:	e0bffa17 	ldw	r2,-24(fp)
81129890:	e0bffc15 	stw	r2,-16(fp)
81129894:	e0bffc17 	ldw	r2,-16(fp)
81129898:	1001703a 	wrctl	status,r2
8112989c:	d0e08a17 	ldw	r3,-32216(gp)
811298a0:	d0a07a17 	ldw	r2,-32280(gp)
811298a4:	1885203a 	divu	r2,r3,r2
811298a8:	1007883a 	mov	r3,r2
811298ac:	00801904 	movi	r2,100
811298b0:	10c5c83a 	sub	r2,r2,r3
811298b4:	d0a07c05 	stb	r2,-32272(gp)
811298b8:	113a8880 	call	8113a888 <OSTaskStatHook>
811298bc:	11298cc0 	call	811298cc <OS_TaskStatStkChk>
811298c0:	01001904 	movi	r4,100
811298c4:	11302940 	call	81130294 <OSTimeDly>
811298c8:	003fe506 	br	81129860 <__reset+0xfb109860>

811298cc <OS_TaskStatStkChk>:
811298cc:	defffa04 	addi	sp,sp,-24
811298d0:	de00012e 	bgeu	sp,et,811298d8 <OS_TaskStatStkChk+0xc>
811298d4:	003b68fa 	trap	3
811298d8:	dfc00515 	stw	ra,20(sp)
811298dc:	df000415 	stw	fp,16(sp)
811298e0:	df000404 	addi	fp,sp,16
811298e4:	e03ffc05 	stb	zero,-16(fp)
811298e8:	00002406 	br	8112997c <OS_TaskStatStkChk+0xb0>
811298ec:	e0bffc03 	ldbu	r2,-16(fp)
811298f0:	e0fffe04 	addi	r3,fp,-8
811298f4:	180b883a 	mov	r5,r3
811298f8:	1009883a 	mov	r4,r2
811298fc:	112fd3c0 	call	8112fd3c <OSTaskStkChk>
81129900:	e0bffc45 	stb	r2,-15(fp)
81129904:	e0bffc43 	ldbu	r2,-15(fp)
81129908:	1000191e 	bne	r2,zero,81129970 <OS_TaskStatStkChk+0xa4>
8112990c:	e0fffc03 	ldbu	r3,-16(fp)
81129910:	00a04574 	movhi	r2,33045
81129914:	108d5704 	addi	r2,r2,13660
81129918:	18c7883a 	add	r3,r3,r3
8112991c:	18c7883a 	add	r3,r3,r3
81129920:	10c5883a 	add	r2,r2,r3
81129924:	10800017 	ldw	r2,0(r2)
81129928:	e0bffd15 	stw	r2,-12(fp)
8112992c:	e0bffd17 	ldw	r2,-12(fp)
81129930:	10000f26 	beq	r2,zero,81129970 <OS_TaskStatStkChk+0xa4>
81129934:	e0bffd17 	ldw	r2,-12(fp)
81129938:	10800060 	cmpeqi	r2,r2,1
8112993c:	10000c1e 	bne	r2,zero,81129970 <OS_TaskStatStkChk+0xa4>
81129940:	e0bffd17 	ldw	r2,-12(fp)
81129944:	10c00217 	ldw	r3,8(r2)
81129948:	e0bffd17 	ldw	r2,-12(fp)
8112994c:	10800317 	ldw	r2,12(r2)
81129950:	1085883a 	add	r2,r2,r2
81129954:	1085883a 	add	r2,r2,r2
81129958:	1887883a 	add	r3,r3,r2
8112995c:	e0bffd17 	ldw	r2,-12(fp)
81129960:	10c01115 	stw	r3,68(r2)
81129964:	e0ffff17 	ldw	r3,-4(fp)
81129968:	e0bffd17 	ldw	r2,-12(fp)
8112996c:	10c01215 	stw	r3,72(r2)
81129970:	e0bffc03 	ldbu	r2,-16(fp)
81129974:	10800044 	addi	r2,r2,1
81129978:	e0bffc05 	stb	r2,-16(fp)
8112997c:	e0bffc03 	ldbu	r2,-16(fp)
81129980:	10800a70 	cmpltui	r2,r2,41
81129984:	103fd91e 	bne	r2,zero,811298ec <__reset+0xfb1098ec>
81129988:	0001883a 	nop
8112998c:	e037883a 	mov	sp,fp
81129990:	dfc00117 	ldw	ra,4(sp)
81129994:	df000017 	ldw	fp,0(sp)
81129998:	dec00204 	addi	sp,sp,8
8112999c:	f800283a 	ret

811299a0 <OS_TCBInit>:
811299a0:	defff204 	addi	sp,sp,-56
811299a4:	de00012e 	bgeu	sp,et,811299ac <OS_TCBInit+0xc>
811299a8:	003b68fa 	trap	3
811299ac:	dfc00d15 	stw	ra,52(sp)
811299b0:	df000c15 	stw	fp,48(sp)
811299b4:	df000c04 	addi	fp,sp,48
811299b8:	e17ffc15 	stw	r5,-16(fp)
811299bc:	e1bffd15 	stw	r6,-12(fp)
811299c0:	3807883a 	mov	r3,r7
811299c4:	e0800417 	ldw	r2,16(fp)
811299c8:	e13ffb05 	stb	r4,-20(fp)
811299cc:	e0fffe0d 	sth	r3,-8(fp)
811299d0:	e0bfff0d 	sth	r2,-4(fp)
811299d4:	e03ff415 	stw	zero,-48(fp)
811299d8:	0005303a 	rdctl	r2,status
811299dc:	e0bffa15 	stw	r2,-24(fp)
811299e0:	e0fffa17 	ldw	r3,-24(fp)
811299e4:	00bfff84 	movi	r2,-2
811299e8:	1884703a 	and	r2,r3,r2
811299ec:	1001703a 	wrctl	status,r2
811299f0:	e0bffa17 	ldw	r2,-24(fp)
811299f4:	e0bff415 	stw	r2,-48(fp)
811299f8:	d0a07b17 	ldw	r2,-32276(gp)
811299fc:	e0bff615 	stw	r2,-40(fp)
81129a00:	e0bff617 	ldw	r2,-40(fp)
81129a04:	10009326 	beq	r2,zero,81129c54 <OS_TCBInit+0x2b4>
81129a08:	e0bff617 	ldw	r2,-40(fp)
81129a0c:	10800517 	ldw	r2,20(r2)
81129a10:	d0a07b15 	stw	r2,-32276(gp)
81129a14:	e0bff417 	ldw	r2,-48(fp)
81129a18:	e0bff815 	stw	r2,-32(fp)
81129a1c:	e0bff817 	ldw	r2,-32(fp)
81129a20:	1001703a 	wrctl	status,r2
81129a24:	e0bff617 	ldw	r2,-40(fp)
81129a28:	e0fffc17 	ldw	r3,-16(fp)
81129a2c:	10c00015 	stw	r3,0(r2)
81129a30:	e0bff617 	ldw	r2,-40(fp)
81129a34:	e0fffb03 	ldbu	r3,-20(fp)
81129a38:	10c00c85 	stb	r3,50(r2)
81129a3c:	e0bff617 	ldw	r2,-40(fp)
81129a40:	10000c05 	stb	zero,48(r2)
81129a44:	e0bff617 	ldw	r2,-40(fp)
81129a48:	10000c45 	stb	zero,49(r2)
81129a4c:	e0bff617 	ldw	r2,-40(fp)
81129a50:	10000b8d 	sth	zero,46(r2)
81129a54:	e0bff617 	ldw	r2,-40(fp)
81129a58:	e0c00317 	ldw	r3,12(fp)
81129a5c:	10c00115 	stw	r3,4(r2)
81129a60:	e0bff617 	ldw	r2,-40(fp)
81129a64:	e0c00217 	ldw	r3,8(fp)
81129a68:	10c00315 	stw	r3,12(r2)
81129a6c:	e0bff617 	ldw	r2,-40(fp)
81129a70:	e0fffd17 	ldw	r3,-12(fp)
81129a74:	10c00215 	stw	r3,8(r2)
81129a78:	e0bff617 	ldw	r2,-40(fp)
81129a7c:	e0ffff0b 	ldhu	r3,-4(fp)
81129a80:	10c0040d 	sth	r3,16(r2)
81129a84:	e0bff617 	ldw	r2,-40(fp)
81129a88:	e0fffe0b 	ldhu	r3,-8(fp)
81129a8c:	10c0048d 	sth	r3,18(r2)
81129a90:	e0bff617 	ldw	r2,-40(fp)
81129a94:	10000dc5 	stb	zero,55(r2)
81129a98:	e0bffb03 	ldbu	r2,-20(fp)
81129a9c:	1004d0fa 	srli	r2,r2,3
81129aa0:	1007883a 	mov	r3,r2
81129aa4:	e0bff617 	ldw	r2,-40(fp)
81129aa8:	10c00d05 	stb	r3,52(r2)
81129aac:	e0bffb03 	ldbu	r2,-20(fp)
81129ab0:	108001cc 	andi	r2,r2,7
81129ab4:	1007883a 	mov	r3,r2
81129ab8:	e0bff617 	ldw	r2,-40(fp)
81129abc:	10c00cc5 	stb	r3,51(r2)
81129ac0:	e0bff617 	ldw	r2,-40(fp)
81129ac4:	10800d03 	ldbu	r2,52(r2)
81129ac8:	10803fcc 	andi	r2,r2,255
81129acc:	00c00044 	movi	r3,1
81129ad0:	1884983a 	sll	r2,r3,r2
81129ad4:	1007883a 	mov	r3,r2
81129ad8:	e0bff617 	ldw	r2,-40(fp)
81129adc:	10c00d85 	stb	r3,54(r2)
81129ae0:	e0bff617 	ldw	r2,-40(fp)
81129ae4:	10800cc3 	ldbu	r2,51(r2)
81129ae8:	10803fcc 	andi	r2,r2,255
81129aec:	00c00044 	movi	r3,1
81129af0:	1884983a 	sll	r2,r3,r2
81129af4:	1007883a 	mov	r3,r2
81129af8:	e0bff617 	ldw	r2,-40(fp)
81129afc:	10c00d45 	stb	r3,53(r2)
81129b00:	e0bff617 	ldw	r2,-40(fp)
81129b04:	10000715 	stw	zero,28(r2)
81129b08:	e0bff617 	ldw	r2,-40(fp)
81129b0c:	10000815 	stw	zero,32(r2)
81129b10:	e0bff617 	ldw	r2,-40(fp)
81129b14:	10000a15 	stw	zero,40(r2)
81129b18:	e0bff617 	ldw	r2,-40(fp)
81129b1c:	10000915 	stw	zero,36(r2)
81129b20:	e0bff617 	ldw	r2,-40(fp)
81129b24:	10000e15 	stw	zero,56(r2)
81129b28:	e0bff617 	ldw	r2,-40(fp)
81129b2c:	10001015 	stw	zero,64(r2)
81129b30:	e0bff617 	ldw	r2,-40(fp)
81129b34:	10000f15 	stw	zero,60(r2)
81129b38:	e0bff617 	ldw	r2,-40(fp)
81129b3c:	10001115 	stw	zero,68(r2)
81129b40:	e0bff617 	ldw	r2,-40(fp)
81129b44:	10001215 	stw	zero,72(r2)
81129b48:	e0bff617 	ldw	r2,-40(fp)
81129b4c:	00c00fc4 	movi	r3,63
81129b50:	10c01305 	stb	r3,76(r2)
81129b54:	e0bff617 	ldw	r2,-40(fp)
81129b58:	10001345 	stb	zero,77(r2)
81129b5c:	e13ff617 	ldw	r4,-40(fp)
81129b60:	113a9800 	call	8113a980 <OSTCBInitHook>
81129b64:	e13ff617 	ldw	r4,-40(fp)
81129b68:	113a8080 	call	8113a808 <OSTaskCreateHook>
81129b6c:	0005303a 	rdctl	r2,status
81129b70:	e0bff515 	stw	r2,-44(fp)
81129b74:	e0fff517 	ldw	r3,-44(fp)
81129b78:	00bfff84 	movi	r2,-2
81129b7c:	1884703a 	and	r2,r3,r2
81129b80:	1001703a 	wrctl	status,r2
81129b84:	e0bff517 	ldw	r2,-44(fp)
81129b88:	e0bff415 	stw	r2,-48(fp)
81129b8c:	e0fffb03 	ldbu	r3,-20(fp)
81129b90:	00a04574 	movhi	r2,33045
81129b94:	108d5704 	addi	r2,r2,13660
81129b98:	18c7883a 	add	r3,r3,r3
81129b9c:	18c7883a 	add	r3,r3,r3
81129ba0:	10c5883a 	add	r2,r2,r3
81129ba4:	e0fff617 	ldw	r3,-40(fp)
81129ba8:	10c00015 	stw	r3,0(r2)
81129bac:	d0e07617 	ldw	r3,-32296(gp)
81129bb0:	e0bff617 	ldw	r2,-40(fp)
81129bb4:	10c00515 	stw	r3,20(r2)
81129bb8:	e0bff617 	ldw	r2,-40(fp)
81129bbc:	10000615 	stw	zero,24(r2)
81129bc0:	d0a07617 	ldw	r2,-32296(gp)
81129bc4:	10000326 	beq	r2,zero,81129bd4 <OS_TCBInit+0x234>
81129bc8:	d0a07617 	ldw	r2,-32296(gp)
81129bcc:	e0fff617 	ldw	r3,-40(fp)
81129bd0:	10c00615 	stw	r3,24(r2)
81129bd4:	e0bff617 	ldw	r2,-40(fp)
81129bd8:	d0a07615 	stw	r2,-32296(gp)
81129bdc:	e0bff617 	ldw	r2,-40(fp)
81129be0:	10c00d83 	ldbu	r3,54(r2)
81129be4:	d0a08003 	ldbu	r2,-32256(gp)
81129be8:	1884b03a 	or	r2,r3,r2
81129bec:	d0a08005 	stb	r2,-32256(gp)
81129bf0:	e0bff617 	ldw	r2,-40(fp)
81129bf4:	10800d03 	ldbu	r2,52(r2)
81129bf8:	10c03fcc 	andi	r3,r2,255
81129bfc:	e0bff617 	ldw	r2,-40(fp)
81129c00:	10800d03 	ldbu	r2,52(r2)
81129c04:	11003fcc 	andi	r4,r2,255
81129c08:	d0a08044 	addi	r2,gp,-32255
81129c0c:	2085883a 	add	r2,r4,r2
81129c10:	11000003 	ldbu	r4,0(r2)
81129c14:	e0bff617 	ldw	r2,-40(fp)
81129c18:	10800d43 	ldbu	r2,53(r2)
81129c1c:	2084b03a 	or	r2,r4,r2
81129c20:	1009883a 	mov	r4,r2
81129c24:	d0a08044 	addi	r2,gp,-32255
81129c28:	1885883a 	add	r2,r3,r2
81129c2c:	11000005 	stb	r4,0(r2)
81129c30:	d0a07c43 	ldbu	r2,-32271(gp)
81129c34:	10800044 	addi	r2,r2,1
81129c38:	d0a07c45 	stb	r2,-32271(gp)
81129c3c:	e0bff417 	ldw	r2,-48(fp)
81129c40:	e0bff715 	stw	r2,-36(fp)
81129c44:	e0bff717 	ldw	r2,-36(fp)
81129c48:	1001703a 	wrctl	status,r2
81129c4c:	0005883a 	mov	r2,zero
81129c50:	00000506 	br	81129c68 <OS_TCBInit+0x2c8>
81129c54:	e0bff417 	ldw	r2,-48(fp)
81129c58:	e0bff915 	stw	r2,-28(fp)
81129c5c:	e0bff917 	ldw	r2,-28(fp)
81129c60:	1001703a 	wrctl	status,r2
81129c64:	00801084 	movi	r2,66
81129c68:	e037883a 	mov	sp,fp
81129c6c:	dfc00117 	ldw	ra,4(sp)
81129c70:	df000017 	ldw	fp,0(sp)
81129c74:	dec00204 	addi	sp,sp,8
81129c78:	f800283a 	ret

81129c7c <OSDebugInit>:
81129c7c:	defffe04 	addi	sp,sp,-8
81129c80:	de00012e 	bgeu	sp,et,81129c88 <OSDebugInit+0xc>
81129c84:	003b68fa 	trap	3
81129c88:	df000115 	stw	fp,4(sp)
81129c8c:	df000104 	addi	fp,sp,4
81129c90:	d0a01704 	addi	r2,gp,-32676
81129c94:	e0bfff15 	stw	r2,-4(fp)
81129c98:	d0a01804 	addi	r2,gp,-32672
81129c9c:	e0bfff15 	stw	r2,-4(fp)
81129ca0:	d0a01984 	addi	r2,gp,-32666
81129ca4:	e0bfff15 	stw	r2,-4(fp)
81129ca8:	d0a01a04 	addi	r2,gp,-32664
81129cac:	e0bfff15 	stw	r2,-4(fp)
81129cb0:	d0a01904 	addi	r2,gp,-32668
81129cb4:	e0bfff15 	stw	r2,-4(fp)
81129cb8:	d0a01a84 	addi	r2,gp,-32662
81129cbc:	e0bfff15 	stw	r2,-4(fp)
81129cc0:	d0a01b04 	addi	r2,gp,-32660
81129cc4:	e0bfff15 	stw	r2,-4(fp)
81129cc8:	d0a01b84 	addi	r2,gp,-32658
81129ccc:	e0bfff15 	stw	r2,-4(fp)
81129cd0:	d0a01c04 	addi	r2,gp,-32656
81129cd4:	e0bfff15 	stw	r2,-4(fp)
81129cd8:	d0a01c84 	addi	r2,gp,-32654
81129cdc:	e0bfff15 	stw	r2,-4(fp)
81129ce0:	d0a01d04 	addi	r2,gp,-32652
81129ce4:	e0bfff15 	stw	r2,-4(fp)
81129ce8:	d0a01d84 	addi	r2,gp,-32650
81129cec:	e0bfff15 	stw	r2,-4(fp)
81129cf0:	d0a01e04 	addi	r2,gp,-32648
81129cf4:	e0bfff15 	stw	r2,-4(fp)
81129cf8:	d0a01e84 	addi	r2,gp,-32646
81129cfc:	e0bfff15 	stw	r2,-4(fp)
81129d00:	d0a01f04 	addi	r2,gp,-32644
81129d04:	e0bfff15 	stw	r2,-4(fp)
81129d08:	d0a01f84 	addi	r2,gp,-32642
81129d0c:	e0bfff15 	stw	r2,-4(fp)
81129d10:	d0a02004 	addi	r2,gp,-32640
81129d14:	e0bfff15 	stw	r2,-4(fp)
81129d18:	d0a02084 	addi	r2,gp,-32638
81129d1c:	e0bfff15 	stw	r2,-4(fp)
81129d20:	d0a02104 	addi	r2,gp,-32636
81129d24:	e0bfff15 	stw	r2,-4(fp)
81129d28:	d0a02184 	addi	r2,gp,-32634
81129d2c:	e0bfff15 	stw	r2,-4(fp)
81129d30:	d0a02204 	addi	r2,gp,-32632
81129d34:	e0bfff15 	stw	r2,-4(fp)
81129d38:	d0a02284 	addi	r2,gp,-32630
81129d3c:	e0bfff15 	stw	r2,-4(fp)
81129d40:	d0a02304 	addi	r2,gp,-32628
81129d44:	e0bfff15 	stw	r2,-4(fp)
81129d48:	d0a02384 	addi	r2,gp,-32626
81129d4c:	e0bfff15 	stw	r2,-4(fp)
81129d50:	d0a02404 	addi	r2,gp,-32624
81129d54:	e0bfff15 	stw	r2,-4(fp)
81129d58:	d0a02484 	addi	r2,gp,-32622
81129d5c:	e0bfff15 	stw	r2,-4(fp)
81129d60:	d0a02504 	addi	r2,gp,-32620
81129d64:	e0bfff15 	stw	r2,-4(fp)
81129d68:	d0a02584 	addi	r2,gp,-32618
81129d6c:	e0bfff15 	stw	r2,-4(fp)
81129d70:	d0a02604 	addi	r2,gp,-32616
81129d74:	e0bfff15 	stw	r2,-4(fp)
81129d78:	d0a02684 	addi	r2,gp,-32614
81129d7c:	e0bfff15 	stw	r2,-4(fp)
81129d80:	d0a02704 	addi	r2,gp,-32612
81129d84:	e0bfff15 	stw	r2,-4(fp)
81129d88:	d0a02784 	addi	r2,gp,-32610
81129d8c:	e0bfff15 	stw	r2,-4(fp)
81129d90:	d0a02804 	addi	r2,gp,-32608
81129d94:	e0bfff15 	stw	r2,-4(fp)
81129d98:	d0a02884 	addi	r2,gp,-32606
81129d9c:	e0bfff15 	stw	r2,-4(fp)
81129da0:	d0a02904 	addi	r2,gp,-32604
81129da4:	e0bfff15 	stw	r2,-4(fp)
81129da8:	d0a02984 	addi	r2,gp,-32602
81129dac:	e0bfff15 	stw	r2,-4(fp)
81129db0:	d0a02a04 	addi	r2,gp,-32600
81129db4:	e0bfff15 	stw	r2,-4(fp)
81129db8:	d0a02a84 	addi	r2,gp,-32598
81129dbc:	e0bfff15 	stw	r2,-4(fp)
81129dc0:	d0a02b04 	addi	r2,gp,-32596
81129dc4:	e0bfff15 	stw	r2,-4(fp)
81129dc8:	d0a02b84 	addi	r2,gp,-32594
81129dcc:	e0bfff15 	stw	r2,-4(fp)
81129dd0:	d0a02c04 	addi	r2,gp,-32592
81129dd4:	e0bfff15 	stw	r2,-4(fp)
81129dd8:	d0a02c84 	addi	r2,gp,-32590
81129ddc:	e0bfff15 	stw	r2,-4(fp)
81129de0:	d0a02d04 	addi	r2,gp,-32588
81129de4:	e0bfff15 	stw	r2,-4(fp)
81129de8:	d0a02d84 	addi	r2,gp,-32586
81129dec:	e0bfff15 	stw	r2,-4(fp)
81129df0:	00a04574 	movhi	r2,33045
81129df4:	10bcc904 	addi	r2,r2,-3292
81129df8:	e0bfff15 	stw	r2,-4(fp)
81129dfc:	00a04574 	movhi	r2,33045
81129e00:	10bbe904 	addi	r2,r2,-4188
81129e04:	e0bfff15 	stw	r2,-4(fp)
81129e08:	d0a02e84 	addi	r2,gp,-32582
81129e0c:	e0bfff15 	stw	r2,-4(fp)
81129e10:	d0a02f04 	addi	r2,gp,-32580
81129e14:	e0bfff15 	stw	r2,-4(fp)
81129e18:	d0a02f84 	addi	r2,gp,-32578
81129e1c:	e0bfff15 	stw	r2,-4(fp)
81129e20:	d0a03004 	addi	r2,gp,-32576
81129e24:	e0bfff15 	stw	r2,-4(fp)
81129e28:	d0a03084 	addi	r2,gp,-32574
81129e2c:	e0bfff15 	stw	r2,-4(fp)
81129e30:	d0a03104 	addi	r2,gp,-32572
81129e34:	e0bfff15 	stw	r2,-4(fp)
81129e38:	d0a03184 	addi	r2,gp,-32570
81129e3c:	e0bfff15 	stw	r2,-4(fp)
81129e40:	d0a03204 	addi	r2,gp,-32568
81129e44:	e0bfff15 	stw	r2,-4(fp)
81129e48:	d0a03284 	addi	r2,gp,-32566
81129e4c:	e0bfff15 	stw	r2,-4(fp)
81129e50:	d0a02e04 	addi	r2,gp,-32584
81129e54:	e0bfff15 	stw	r2,-4(fp)
81129e58:	d0a03304 	addi	r2,gp,-32564
81129e5c:	e0bfff15 	stw	r2,-4(fp)
81129e60:	0001883a 	nop
81129e64:	e037883a 	mov	sp,fp
81129e68:	df000017 	ldw	fp,0(sp)
81129e6c:	dec00104 	addi	sp,sp,4
81129e70:	f800283a 	ret

81129e74 <OSFlagAccept>:
81129e74:	defff204 	addi	sp,sp,-56
81129e78:	de00012e 	bgeu	sp,et,81129e80 <OSFlagAccept+0xc>
81129e7c:	003b68fa 	trap	3
81129e80:	df000d15 	stw	fp,52(sp)
81129e84:	df000d04 	addi	fp,sp,52
81129e88:	e13ffc15 	stw	r4,-16(fp)
81129e8c:	2807883a 	mov	r3,r5
81129e90:	3005883a 	mov	r2,r6
81129e94:	e1ffff15 	stw	r7,-4(fp)
81129e98:	e0fffd0d 	sth	r3,-12(fp)
81129e9c:	e0bffe05 	stb	r2,-8(fp)
81129ea0:	e03ff415 	stw	zero,-48(fp)
81129ea4:	e0bfff17 	ldw	r2,-4(fp)
81129ea8:	1000021e 	bne	r2,zero,81129eb4 <OSFlagAccept+0x40>
81129eac:	0005883a 	mov	r2,zero
81129eb0:	0000b006 	br	8112a174 <OSFlagAccept+0x300>
81129eb4:	e0bffc17 	ldw	r2,-16(fp)
81129eb8:	1000051e 	bne	r2,zero,81129ed0 <OSFlagAccept+0x5c>
81129ebc:	e0bfff17 	ldw	r2,-4(fp)
81129ec0:	00c01b84 	movi	r3,110
81129ec4:	10c00005 	stb	r3,0(r2)
81129ec8:	0005883a 	mov	r2,zero
81129ecc:	0000a906 	br	8112a174 <OSFlagAccept+0x300>
81129ed0:	e0bffc17 	ldw	r2,-16(fp)
81129ed4:	10800003 	ldbu	r2,0(r2)
81129ed8:	10803fcc 	andi	r2,r2,255
81129edc:	10800160 	cmpeqi	r2,r2,5
81129ee0:	1000051e 	bne	r2,zero,81129ef8 <OSFlagAccept+0x84>
81129ee4:	e0bfff17 	ldw	r2,-4(fp)
81129ee8:	00c00044 	movi	r3,1
81129eec:	10c00005 	stb	r3,0(r2)
81129ef0:	0005883a 	mov	r2,zero
81129ef4:	00009f06 	br	8112a174 <OSFlagAccept+0x300>
81129ef8:	e0fffe03 	ldbu	r3,-8(fp)
81129efc:	00bfe004 	movi	r2,-128
81129f00:	1884703a 	and	r2,r3,r2
81129f04:	e0bff505 	stb	r2,-44(fp)
81129f08:	e0bff503 	ldbu	r2,-44(fp)
81129f0c:	10000626 	beq	r2,zero,81129f28 <OSFlagAccept+0xb4>
81129f10:	e0bffe03 	ldbu	r2,-8(fp)
81129f14:	10801fcc 	andi	r2,r2,127
81129f18:	e0bffe05 	stb	r2,-8(fp)
81129f1c:	00800044 	movi	r2,1
81129f20:	e0bff385 	stb	r2,-50(fp)
81129f24:	00000106 	br	81129f2c <OSFlagAccept+0xb8>
81129f28:	e03ff385 	stb	zero,-50(fp)
81129f2c:	e0bfff17 	ldw	r2,-4(fp)
81129f30:	10000005 	stb	zero,0(r2)
81129f34:	0005303a 	rdctl	r2,status
81129f38:	e0bffb15 	stw	r2,-20(fp)
81129f3c:	e0fffb17 	ldw	r3,-20(fp)
81129f40:	00bfff84 	movi	r2,-2
81129f44:	1884703a 	and	r2,r3,r2
81129f48:	1001703a 	wrctl	status,r2
81129f4c:	e0bffb17 	ldw	r2,-20(fp)
81129f50:	e0bff415 	stw	r2,-48(fp)
81129f54:	e0bffe03 	ldbu	r2,-8(fp)
81129f58:	10c00060 	cmpeqi	r3,r2,1
81129f5c:	18005f1e 	bne	r3,zero,8112a0dc <OSFlagAccept+0x268>
81129f60:	10c00088 	cmpgei	r3,r2,2
81129f64:	1800021e 	bne	r3,zero,81129f70 <OSFlagAccept+0xfc>
81129f68:	10003f26 	beq	r2,zero,8112a068 <OSFlagAccept+0x1f4>
81129f6c:	00007706 	br	8112a14c <OSFlagAccept+0x2d8>
81129f70:	10c000a0 	cmpeqi	r3,r2,2
81129f74:	1800031e 	bne	r3,zero,81129f84 <OSFlagAccept+0x110>
81129f78:	108000e0 	cmpeqi	r2,r2,3
81129f7c:	10001e1e 	bne	r2,zero,81129ff8 <OSFlagAccept+0x184>
81129f80:	00007206 	br	8112a14c <OSFlagAccept+0x2d8>
81129f84:	e0bffc17 	ldw	r2,-16(fp)
81129f88:	10c0020b 	ldhu	r3,8(r2)
81129f8c:	e0bffd0b 	ldhu	r2,-12(fp)
81129f90:	1884703a 	and	r2,r3,r2
81129f94:	e0bff30d 	sth	r2,-52(fp)
81129f98:	e0fff30b 	ldhu	r3,-52(fp)
81129f9c:	e0bffd0b 	ldhu	r2,-12(fp)
81129fa0:	18800d1e 	bne	r3,r2,81129fd8 <OSFlagAccept+0x164>
81129fa4:	e0bff383 	ldbu	r2,-50(fp)
81129fa8:	10800058 	cmpnei	r2,r2,1
81129fac:	10000d1e 	bne	r2,zero,81129fe4 <OSFlagAccept+0x170>
81129fb0:	e0bffc17 	ldw	r2,-16(fp)
81129fb4:	1080020b 	ldhu	r2,8(r2)
81129fb8:	1007883a 	mov	r3,r2
81129fbc:	e0bff30b 	ldhu	r2,-52(fp)
81129fc0:	0084303a 	nor	r2,zero,r2
81129fc4:	1884703a 	and	r2,r3,r2
81129fc8:	1007883a 	mov	r3,r2
81129fcc:	e0bffc17 	ldw	r2,-16(fp)
81129fd0:	10c0020d 	sth	r3,8(r2)
81129fd4:	00000306 	br	81129fe4 <OSFlagAccept+0x170>
81129fd8:	e0bfff17 	ldw	r2,-4(fp)
81129fdc:	00c01c04 	movi	r3,112
81129fe0:	10c00005 	stb	r3,0(r2)
81129fe4:	e0bff417 	ldw	r2,-48(fp)
81129fe8:	e0bff615 	stw	r2,-40(fp)
81129fec:	e0bff617 	ldw	r2,-40(fp)
81129ff0:	1001703a 	wrctl	status,r2
81129ff4:	00005e06 	br	8112a170 <OSFlagAccept+0x2fc>
81129ff8:	e0bffc17 	ldw	r2,-16(fp)
81129ffc:	10c0020b 	ldhu	r3,8(r2)
8112a000:	e0bffd0b 	ldhu	r2,-12(fp)
8112a004:	1884703a 	and	r2,r3,r2
8112a008:	e0bff30d 	sth	r2,-52(fp)
8112a00c:	e0bff30b 	ldhu	r2,-52(fp)
8112a010:	10000d26 	beq	r2,zero,8112a048 <OSFlagAccept+0x1d4>
8112a014:	e0bff383 	ldbu	r2,-50(fp)
8112a018:	10800058 	cmpnei	r2,r2,1
8112a01c:	10000d1e 	bne	r2,zero,8112a054 <OSFlagAccept+0x1e0>
8112a020:	e0bffc17 	ldw	r2,-16(fp)
8112a024:	1080020b 	ldhu	r2,8(r2)
8112a028:	1007883a 	mov	r3,r2
8112a02c:	e0bff30b 	ldhu	r2,-52(fp)
8112a030:	0084303a 	nor	r2,zero,r2
8112a034:	1884703a 	and	r2,r3,r2
8112a038:	1007883a 	mov	r3,r2
8112a03c:	e0bffc17 	ldw	r2,-16(fp)
8112a040:	10c0020d 	sth	r3,8(r2)
8112a044:	00000306 	br	8112a054 <OSFlagAccept+0x1e0>
8112a048:	e0bfff17 	ldw	r2,-4(fp)
8112a04c:	00c01c04 	movi	r3,112
8112a050:	10c00005 	stb	r3,0(r2)
8112a054:	e0bff417 	ldw	r2,-48(fp)
8112a058:	e0bff715 	stw	r2,-36(fp)
8112a05c:	e0bff717 	ldw	r2,-36(fp)
8112a060:	1001703a 	wrctl	status,r2
8112a064:	00004206 	br	8112a170 <OSFlagAccept+0x2fc>
8112a068:	e0bffc17 	ldw	r2,-16(fp)
8112a06c:	1080020b 	ldhu	r2,8(r2)
8112a070:	0084303a 	nor	r2,zero,r2
8112a074:	1007883a 	mov	r3,r2
8112a078:	e0bffd0b 	ldhu	r2,-12(fp)
8112a07c:	1884703a 	and	r2,r3,r2
8112a080:	e0bff30d 	sth	r2,-52(fp)
8112a084:	e0fff30b 	ldhu	r3,-52(fp)
8112a088:	e0bffd0b 	ldhu	r2,-12(fp)
8112a08c:	18800b1e 	bne	r3,r2,8112a0bc <OSFlagAccept+0x248>
8112a090:	e0bff383 	ldbu	r2,-50(fp)
8112a094:	10800058 	cmpnei	r2,r2,1
8112a098:	10000b1e 	bne	r2,zero,8112a0c8 <OSFlagAccept+0x254>
8112a09c:	e0bffc17 	ldw	r2,-16(fp)
8112a0a0:	10c0020b 	ldhu	r3,8(r2)
8112a0a4:	e0bff30b 	ldhu	r2,-52(fp)
8112a0a8:	1884b03a 	or	r2,r3,r2
8112a0ac:	1007883a 	mov	r3,r2
8112a0b0:	e0bffc17 	ldw	r2,-16(fp)
8112a0b4:	10c0020d 	sth	r3,8(r2)
8112a0b8:	00000306 	br	8112a0c8 <OSFlagAccept+0x254>
8112a0bc:	e0bfff17 	ldw	r2,-4(fp)
8112a0c0:	00c01c04 	movi	r3,112
8112a0c4:	10c00005 	stb	r3,0(r2)
8112a0c8:	e0bff417 	ldw	r2,-48(fp)
8112a0cc:	e0bff815 	stw	r2,-32(fp)
8112a0d0:	e0bff817 	ldw	r2,-32(fp)
8112a0d4:	1001703a 	wrctl	status,r2
8112a0d8:	00002506 	br	8112a170 <OSFlagAccept+0x2fc>
8112a0dc:	e0bffc17 	ldw	r2,-16(fp)
8112a0e0:	1080020b 	ldhu	r2,8(r2)
8112a0e4:	0084303a 	nor	r2,zero,r2
8112a0e8:	1007883a 	mov	r3,r2
8112a0ec:	e0bffd0b 	ldhu	r2,-12(fp)
8112a0f0:	1884703a 	and	r2,r3,r2
8112a0f4:	e0bff30d 	sth	r2,-52(fp)
8112a0f8:	e0bff30b 	ldhu	r2,-52(fp)
8112a0fc:	10000b26 	beq	r2,zero,8112a12c <OSFlagAccept+0x2b8>
8112a100:	e0bff383 	ldbu	r2,-50(fp)
8112a104:	10800058 	cmpnei	r2,r2,1
8112a108:	10000b1e 	bne	r2,zero,8112a138 <OSFlagAccept+0x2c4>
8112a10c:	e0bffc17 	ldw	r2,-16(fp)
8112a110:	10c0020b 	ldhu	r3,8(r2)
8112a114:	e0bff30b 	ldhu	r2,-52(fp)
8112a118:	1884b03a 	or	r2,r3,r2
8112a11c:	1007883a 	mov	r3,r2
8112a120:	e0bffc17 	ldw	r2,-16(fp)
8112a124:	10c0020d 	sth	r3,8(r2)
8112a128:	00000306 	br	8112a138 <OSFlagAccept+0x2c4>
8112a12c:	e0bfff17 	ldw	r2,-4(fp)
8112a130:	00c01c04 	movi	r3,112
8112a134:	10c00005 	stb	r3,0(r2)
8112a138:	e0bff417 	ldw	r2,-48(fp)
8112a13c:	e0bff915 	stw	r2,-28(fp)
8112a140:	e0bff917 	ldw	r2,-28(fp)
8112a144:	1001703a 	wrctl	status,r2
8112a148:	00000906 	br	8112a170 <OSFlagAccept+0x2fc>
8112a14c:	e0bff417 	ldw	r2,-48(fp)
8112a150:	e0bffa15 	stw	r2,-24(fp)
8112a154:	e0bffa17 	ldw	r2,-24(fp)
8112a158:	1001703a 	wrctl	status,r2
8112a15c:	e03ff30d 	sth	zero,-52(fp)
8112a160:	e0bfff17 	ldw	r2,-4(fp)
8112a164:	00c01bc4 	movi	r3,111
8112a168:	10c00005 	stb	r3,0(r2)
8112a16c:	0001883a 	nop
8112a170:	e0bff30b 	ldhu	r2,-52(fp)
8112a174:	e037883a 	mov	sp,fp
8112a178:	df000017 	ldw	fp,0(sp)
8112a17c:	dec00104 	addi	sp,sp,4
8112a180:	f800283a 	ret

8112a184 <OSFlagCreate>:
8112a184:	defff804 	addi	sp,sp,-32
8112a188:	de00012e 	bgeu	sp,et,8112a190 <OSFlagCreate+0xc>
8112a18c:	003b68fa 	trap	3
8112a190:	df000715 	stw	fp,28(sp)
8112a194:	df000704 	addi	fp,sp,28
8112a198:	2005883a 	mov	r2,r4
8112a19c:	e17fff15 	stw	r5,-4(fp)
8112a1a0:	e0bffe0d 	sth	r2,-8(fp)
8112a1a4:	e03ff915 	stw	zero,-28(fp)
8112a1a8:	e0bfff17 	ldw	r2,-4(fp)
8112a1ac:	1000021e 	bne	r2,zero,8112a1b8 <OSFlagCreate+0x34>
8112a1b0:	0005883a 	mov	r2,zero
8112a1b4:	00003306 	br	8112a284 <OSFlagCreate+0x100>
8112a1b8:	d0a08303 	ldbu	r2,-32244(gp)
8112a1bc:	10803fcc 	andi	r2,r2,255
8112a1c0:	10000526 	beq	r2,zero,8112a1d8 <OSFlagCreate+0x54>
8112a1c4:	e0bfff17 	ldw	r2,-4(fp)
8112a1c8:	00c00404 	movi	r3,16
8112a1cc:	10c00005 	stb	r3,0(r2)
8112a1d0:	0005883a 	mov	r2,zero
8112a1d4:	00002b06 	br	8112a284 <OSFlagCreate+0x100>
8112a1d8:	0005303a 	rdctl	r2,status
8112a1dc:	e0bffd15 	stw	r2,-12(fp)
8112a1e0:	e0fffd17 	ldw	r3,-12(fp)
8112a1e4:	00bfff84 	movi	r2,-2
8112a1e8:	1884703a 	and	r2,r3,r2
8112a1ec:	1001703a 	wrctl	status,r2
8112a1f0:	e0bffd17 	ldw	r2,-12(fp)
8112a1f4:	e0bff915 	stw	r2,-28(fp)
8112a1f8:	d0a08817 	ldw	r2,-32224(gp)
8112a1fc:	e0bffb15 	stw	r2,-20(fp)
8112a200:	e0bffb17 	ldw	r2,-20(fp)
8112a204:	10001726 	beq	r2,zero,8112a264 <OSFlagCreate+0xe0>
8112a208:	d0a08817 	ldw	r2,-32224(gp)
8112a20c:	10800117 	ldw	r2,4(r2)
8112a210:	d0a08815 	stw	r2,-32224(gp)
8112a214:	e0bffb17 	ldw	r2,-20(fp)
8112a218:	00c00144 	movi	r3,5
8112a21c:	10c00005 	stb	r3,0(r2)
8112a220:	e0bffb17 	ldw	r2,-20(fp)
8112a224:	e0fffe0b 	ldhu	r3,-8(fp)
8112a228:	10c0020d 	sth	r3,8(r2)
8112a22c:	e0bffb17 	ldw	r2,-20(fp)
8112a230:	10000115 	stw	zero,4(r2)
8112a234:	e0bffb17 	ldw	r2,-20(fp)
8112a238:	00c00fc4 	movi	r3,63
8112a23c:	10c00285 	stb	r3,10(r2)
8112a240:	e0bffb17 	ldw	r2,-20(fp)
8112a244:	100002c5 	stb	zero,11(r2)
8112a248:	e0bff917 	ldw	r2,-28(fp)
8112a24c:	e0bffa15 	stw	r2,-24(fp)
8112a250:	e0bffa17 	ldw	r2,-24(fp)
8112a254:	1001703a 	wrctl	status,r2
8112a258:	e0bfff17 	ldw	r2,-4(fp)
8112a25c:	10000005 	stb	zero,0(r2)
8112a260:	00000706 	br	8112a280 <OSFlagCreate+0xfc>
8112a264:	e0bff917 	ldw	r2,-28(fp)
8112a268:	e0bffc15 	stw	r2,-16(fp)
8112a26c:	e0bffc17 	ldw	r2,-16(fp)
8112a270:	1001703a 	wrctl	status,r2
8112a274:	e0bfff17 	ldw	r2,-4(fp)
8112a278:	00c01c84 	movi	r3,114
8112a27c:	10c00005 	stb	r3,0(r2)
8112a280:	e0bffb17 	ldw	r2,-20(fp)
8112a284:	e037883a 	mov	sp,fp
8112a288:	df000017 	ldw	fp,0(sp)
8112a28c:	dec00104 	addi	sp,sp,4
8112a290:	f800283a 	ret

8112a294 <OSFlagDel>:
8112a294:	defff204 	addi	sp,sp,-56
8112a298:	de00012e 	bgeu	sp,et,8112a2a0 <OSFlagDel+0xc>
8112a29c:	003b68fa 	trap	3
8112a2a0:	dfc00d15 	stw	ra,52(sp)
8112a2a4:	df000c15 	stw	fp,48(sp)
8112a2a8:	df000c04 	addi	fp,sp,48
8112a2ac:	e13ffd15 	stw	r4,-12(fp)
8112a2b0:	2805883a 	mov	r2,r5
8112a2b4:	e1bfff15 	stw	r6,-4(fp)
8112a2b8:	e0bffe05 	stb	r2,-8(fp)
8112a2bc:	e03ff715 	stw	zero,-36(fp)
8112a2c0:	e0bfff17 	ldw	r2,-4(fp)
8112a2c4:	1000021e 	bne	r2,zero,8112a2d0 <OSFlagDel+0x3c>
8112a2c8:	e0bffd17 	ldw	r2,-12(fp)
8112a2cc:	00008006 	br	8112a4d0 <OSFlagDel+0x23c>
8112a2d0:	e0bffd17 	ldw	r2,-12(fp)
8112a2d4:	1000051e 	bne	r2,zero,8112a2ec <OSFlagDel+0x58>
8112a2d8:	e0bfff17 	ldw	r2,-4(fp)
8112a2dc:	00c01b84 	movi	r3,110
8112a2e0:	10c00005 	stb	r3,0(r2)
8112a2e4:	e0bffd17 	ldw	r2,-12(fp)
8112a2e8:	00007906 	br	8112a4d0 <OSFlagDel+0x23c>
8112a2ec:	d0a08303 	ldbu	r2,-32244(gp)
8112a2f0:	10803fcc 	andi	r2,r2,255
8112a2f4:	10000526 	beq	r2,zero,8112a30c <OSFlagDel+0x78>
8112a2f8:	e0bfff17 	ldw	r2,-4(fp)
8112a2fc:	00c003c4 	movi	r3,15
8112a300:	10c00005 	stb	r3,0(r2)
8112a304:	e0bffd17 	ldw	r2,-12(fp)
8112a308:	00007106 	br	8112a4d0 <OSFlagDel+0x23c>
8112a30c:	e0bffd17 	ldw	r2,-12(fp)
8112a310:	10800003 	ldbu	r2,0(r2)
8112a314:	10803fcc 	andi	r2,r2,255
8112a318:	10800160 	cmpeqi	r2,r2,5
8112a31c:	1000051e 	bne	r2,zero,8112a334 <OSFlagDel+0xa0>
8112a320:	e0bfff17 	ldw	r2,-4(fp)
8112a324:	00c00044 	movi	r3,1
8112a328:	10c00005 	stb	r3,0(r2)
8112a32c:	e0bffd17 	ldw	r2,-12(fp)
8112a330:	00006706 	br	8112a4d0 <OSFlagDel+0x23c>
8112a334:	0005303a 	rdctl	r2,status
8112a338:	e0bffc15 	stw	r2,-16(fp)
8112a33c:	e0fffc17 	ldw	r3,-16(fp)
8112a340:	00bfff84 	movi	r2,-2
8112a344:	1884703a 	and	r2,r3,r2
8112a348:	1001703a 	wrctl	status,r2
8112a34c:	e0bffc17 	ldw	r2,-16(fp)
8112a350:	e0bff715 	stw	r2,-36(fp)
8112a354:	e0bffd17 	ldw	r2,-12(fp)
8112a358:	10800117 	ldw	r2,4(r2)
8112a35c:	10000326 	beq	r2,zero,8112a36c <OSFlagDel+0xd8>
8112a360:	00800044 	movi	r2,1
8112a364:	e0bff405 	stb	r2,-48(fp)
8112a368:	00000106 	br	8112a370 <OSFlagDel+0xdc>
8112a36c:	e03ff405 	stb	zero,-48(fp)
8112a370:	e0bffe03 	ldbu	r2,-8(fp)
8112a374:	10000326 	beq	r2,zero,8112a384 <OSFlagDel+0xf0>
8112a378:	10800060 	cmpeqi	r2,r2,1
8112a37c:	1000231e 	bne	r2,zero,8112a40c <OSFlagDel+0x178>
8112a380:	00004806 	br	8112a4a4 <OSFlagDel+0x210>
8112a384:	e0bff403 	ldbu	r2,-48(fp)
8112a388:	1000161e 	bne	r2,zero,8112a3e4 <OSFlagDel+0x150>
8112a38c:	e0bffd17 	ldw	r2,-12(fp)
8112a390:	00c00fc4 	movi	r3,63
8112a394:	10c00285 	stb	r3,10(r2)
8112a398:	e0bffd17 	ldw	r2,-12(fp)
8112a39c:	100002c5 	stb	zero,11(r2)
8112a3a0:	e0bffd17 	ldw	r2,-12(fp)
8112a3a4:	10000005 	stb	zero,0(r2)
8112a3a8:	d0e08817 	ldw	r3,-32224(gp)
8112a3ac:	e0bffd17 	ldw	r2,-12(fp)
8112a3b0:	10c00115 	stw	r3,4(r2)
8112a3b4:	e0bffd17 	ldw	r2,-12(fp)
8112a3b8:	1000020d 	sth	zero,8(r2)
8112a3bc:	e0bffd17 	ldw	r2,-12(fp)
8112a3c0:	d0a08815 	stw	r2,-32224(gp)
8112a3c4:	e0bff717 	ldw	r2,-36(fp)
8112a3c8:	e0bff815 	stw	r2,-32(fp)
8112a3cc:	e0bff817 	ldw	r2,-32(fp)
8112a3d0:	1001703a 	wrctl	status,r2
8112a3d4:	e0bfff17 	ldw	r2,-4(fp)
8112a3d8:	10000005 	stb	zero,0(r2)
8112a3dc:	e03ff615 	stw	zero,-40(fp)
8112a3e0:	00003a06 	br	8112a4cc <OSFlagDel+0x238>
8112a3e4:	e0bff717 	ldw	r2,-36(fp)
8112a3e8:	e0bff915 	stw	r2,-28(fp)
8112a3ec:	e0bff917 	ldw	r2,-28(fp)
8112a3f0:	1001703a 	wrctl	status,r2
8112a3f4:	e0bfff17 	ldw	r2,-4(fp)
8112a3f8:	00c01244 	movi	r3,73
8112a3fc:	10c00005 	stb	r3,0(r2)
8112a400:	e0bffd17 	ldw	r2,-12(fp)
8112a404:	e0bff615 	stw	r2,-40(fp)
8112a408:	00003006 	br	8112a4cc <OSFlagDel+0x238>
8112a40c:	e0bffd17 	ldw	r2,-12(fp)
8112a410:	10800117 	ldw	r2,4(r2)
8112a414:	e0bff515 	stw	r2,-44(fp)
8112a418:	00000606 	br	8112a434 <OSFlagDel+0x1a0>
8112a41c:	000b883a 	mov	r5,zero
8112a420:	e13ff517 	ldw	r4,-44(fp)
8112a424:	112b4480 	call	8112b448 <OS_FlagTaskRdy>
8112a428:	e0bff517 	ldw	r2,-44(fp)
8112a42c:	10800017 	ldw	r2,0(r2)
8112a430:	e0bff515 	stw	r2,-44(fp)
8112a434:	e0bff517 	ldw	r2,-44(fp)
8112a438:	103ff81e 	bne	r2,zero,8112a41c <__reset+0xfb10a41c>
8112a43c:	e0bffd17 	ldw	r2,-12(fp)
8112a440:	00c00fc4 	movi	r3,63
8112a444:	10c00285 	stb	r3,10(r2)
8112a448:	e0bffd17 	ldw	r2,-12(fp)
8112a44c:	100002c5 	stb	zero,11(r2)
8112a450:	e0bffd17 	ldw	r2,-12(fp)
8112a454:	10000005 	stb	zero,0(r2)
8112a458:	d0e08817 	ldw	r3,-32224(gp)
8112a45c:	e0bffd17 	ldw	r2,-12(fp)
8112a460:	10c00115 	stw	r3,4(r2)
8112a464:	e0bffd17 	ldw	r2,-12(fp)
8112a468:	1000020d 	sth	zero,8(r2)
8112a46c:	e0bffd17 	ldw	r2,-12(fp)
8112a470:	d0a08815 	stw	r2,-32224(gp)
8112a474:	e0bff717 	ldw	r2,-36(fp)
8112a478:	e0bffa15 	stw	r2,-24(fp)
8112a47c:	e0bffa17 	ldw	r2,-24(fp)
8112a480:	1001703a 	wrctl	status,r2
8112a484:	e0bff403 	ldbu	r2,-48(fp)
8112a488:	10800058 	cmpnei	r2,r2,1
8112a48c:	1000011e 	bne	r2,zero,8112a494 <OSFlagDel+0x200>
8112a490:	11295580 	call	81129558 <OS_Sched>
8112a494:	e0bfff17 	ldw	r2,-4(fp)
8112a498:	10000005 	stb	zero,0(r2)
8112a49c:	e03ff615 	stw	zero,-40(fp)
8112a4a0:	00000a06 	br	8112a4cc <OSFlagDel+0x238>
8112a4a4:	e0bff717 	ldw	r2,-36(fp)
8112a4a8:	e0bffb15 	stw	r2,-20(fp)
8112a4ac:	e0bffb17 	ldw	r2,-20(fp)
8112a4b0:	1001703a 	wrctl	status,r2
8112a4b4:	e0bfff17 	ldw	r2,-4(fp)
8112a4b8:	00c001c4 	movi	r3,7
8112a4bc:	10c00005 	stb	r3,0(r2)
8112a4c0:	e0bffd17 	ldw	r2,-12(fp)
8112a4c4:	e0bff615 	stw	r2,-40(fp)
8112a4c8:	0001883a 	nop
8112a4cc:	e0bff617 	ldw	r2,-40(fp)
8112a4d0:	e037883a 	mov	sp,fp
8112a4d4:	dfc00117 	ldw	ra,4(sp)
8112a4d8:	df000017 	ldw	fp,0(sp)
8112a4dc:	dec00204 	addi	sp,sp,8
8112a4e0:	f800283a 	ret

8112a4e4 <OSFlagNameGet>:
8112a4e4:	defff604 	addi	sp,sp,-40
8112a4e8:	de00012e 	bgeu	sp,et,8112a4f0 <OSFlagNameGet+0xc>
8112a4ec:	003b68fa 	trap	3
8112a4f0:	dfc00915 	stw	ra,36(sp)
8112a4f4:	df000815 	stw	fp,32(sp)
8112a4f8:	df000804 	addi	fp,sp,32
8112a4fc:	e13ffd15 	stw	r4,-12(fp)
8112a500:	e17ffe15 	stw	r5,-8(fp)
8112a504:	e1bfff15 	stw	r6,-4(fp)
8112a508:	e03ff815 	stw	zero,-32(fp)
8112a50c:	e0bfff17 	ldw	r2,-4(fp)
8112a510:	1000021e 	bne	r2,zero,8112a51c <OSFlagNameGet+0x38>
8112a514:	0005883a 	mov	r2,zero
8112a518:	00003906 	br	8112a600 <OSFlagNameGet+0x11c>
8112a51c:	e0bffd17 	ldw	r2,-12(fp)
8112a520:	1000051e 	bne	r2,zero,8112a538 <OSFlagNameGet+0x54>
8112a524:	e0bfff17 	ldw	r2,-4(fp)
8112a528:	00c01b84 	movi	r3,110
8112a52c:	10c00005 	stb	r3,0(r2)
8112a530:	0005883a 	mov	r2,zero
8112a534:	00003206 	br	8112a600 <OSFlagNameGet+0x11c>
8112a538:	e0bffe17 	ldw	r2,-8(fp)
8112a53c:	1000051e 	bne	r2,zero,8112a554 <OSFlagNameGet+0x70>
8112a540:	e0bfff17 	ldw	r2,-4(fp)
8112a544:	00c00304 	movi	r3,12
8112a548:	10c00005 	stb	r3,0(r2)
8112a54c:	0005883a 	mov	r2,zero
8112a550:	00002b06 	br	8112a600 <OSFlagNameGet+0x11c>
8112a554:	d0a08303 	ldbu	r2,-32244(gp)
8112a558:	10803fcc 	andi	r2,r2,255
8112a55c:	10000526 	beq	r2,zero,8112a574 <OSFlagNameGet+0x90>
8112a560:	e0bfff17 	ldw	r2,-4(fp)
8112a564:	00c00444 	movi	r3,17
8112a568:	10c00005 	stb	r3,0(r2)
8112a56c:	0005883a 	mov	r2,zero
8112a570:	00002306 	br	8112a600 <OSFlagNameGet+0x11c>
8112a574:	0005303a 	rdctl	r2,status
8112a578:	e0bffc15 	stw	r2,-16(fp)
8112a57c:	e0fffc17 	ldw	r3,-16(fp)
8112a580:	00bfff84 	movi	r2,-2
8112a584:	1884703a 	and	r2,r3,r2
8112a588:	1001703a 	wrctl	status,r2
8112a58c:	e0bffc17 	ldw	r2,-16(fp)
8112a590:	e0bff815 	stw	r2,-32(fp)
8112a594:	e0bffd17 	ldw	r2,-12(fp)
8112a598:	10800003 	ldbu	r2,0(r2)
8112a59c:	10803fcc 	andi	r2,r2,255
8112a5a0:	10800160 	cmpeqi	r2,r2,5
8112a5a4:	1000091e 	bne	r2,zero,8112a5cc <OSFlagNameGet+0xe8>
8112a5a8:	e0bff817 	ldw	r2,-32(fp)
8112a5ac:	e0bff915 	stw	r2,-28(fp)
8112a5b0:	e0bff917 	ldw	r2,-28(fp)
8112a5b4:	1001703a 	wrctl	status,r2
8112a5b8:	e0bfff17 	ldw	r2,-4(fp)
8112a5bc:	00c00044 	movi	r3,1
8112a5c0:	10c00005 	stb	r3,0(r2)
8112a5c4:	0005883a 	mov	r2,zero
8112a5c8:	00000d06 	br	8112a600 <OSFlagNameGet+0x11c>
8112a5cc:	e0bffd17 	ldw	r2,-12(fp)
8112a5d0:	10800284 	addi	r2,r2,10
8112a5d4:	100b883a 	mov	r5,r2
8112a5d8:	e13ffe17 	ldw	r4,-8(fp)
8112a5dc:	11296ac0 	call	811296ac <OS_StrCopy>
8112a5e0:	e0bffb05 	stb	r2,-20(fp)
8112a5e4:	e0bff817 	ldw	r2,-32(fp)
8112a5e8:	e0bffa15 	stw	r2,-24(fp)
8112a5ec:	e0bffa17 	ldw	r2,-24(fp)
8112a5f0:	1001703a 	wrctl	status,r2
8112a5f4:	e0bfff17 	ldw	r2,-4(fp)
8112a5f8:	10000005 	stb	zero,0(r2)
8112a5fc:	e0bffb03 	ldbu	r2,-20(fp)
8112a600:	e037883a 	mov	sp,fp
8112a604:	dfc00117 	ldw	ra,4(sp)
8112a608:	df000017 	ldw	fp,0(sp)
8112a60c:	dec00204 	addi	sp,sp,8
8112a610:	f800283a 	ret

8112a614 <OSFlagNameSet>:
8112a614:	defff504 	addi	sp,sp,-44
8112a618:	de00012e 	bgeu	sp,et,8112a620 <OSFlagNameSet+0xc>
8112a61c:	003b68fa 	trap	3
8112a620:	dfc00a15 	stw	ra,40(sp)
8112a624:	df000915 	stw	fp,36(sp)
8112a628:	df000904 	addi	fp,sp,36
8112a62c:	e13ffd15 	stw	r4,-12(fp)
8112a630:	e17ffe15 	stw	r5,-8(fp)
8112a634:	e1bfff15 	stw	r6,-4(fp)
8112a638:	e03ff715 	stw	zero,-36(fp)
8112a63c:	e0bfff17 	ldw	r2,-4(fp)
8112a640:	10004326 	beq	r2,zero,8112a750 <OSFlagNameSet+0x13c>
8112a644:	e0bffd17 	ldw	r2,-12(fp)
8112a648:	1000041e 	bne	r2,zero,8112a65c <OSFlagNameSet+0x48>
8112a64c:	e0bfff17 	ldw	r2,-4(fp)
8112a650:	00c01b84 	movi	r3,110
8112a654:	10c00005 	stb	r3,0(r2)
8112a658:	00003e06 	br	8112a754 <OSFlagNameSet+0x140>
8112a65c:	e0bffe17 	ldw	r2,-8(fp)
8112a660:	1000041e 	bne	r2,zero,8112a674 <OSFlagNameSet+0x60>
8112a664:	e0bfff17 	ldw	r2,-4(fp)
8112a668:	00c00304 	movi	r3,12
8112a66c:	10c00005 	stb	r3,0(r2)
8112a670:	00003806 	br	8112a754 <OSFlagNameSet+0x140>
8112a674:	d0a08303 	ldbu	r2,-32244(gp)
8112a678:	10803fcc 	andi	r2,r2,255
8112a67c:	10000426 	beq	r2,zero,8112a690 <OSFlagNameSet+0x7c>
8112a680:	e0bfff17 	ldw	r2,-4(fp)
8112a684:	00c00484 	movi	r3,18
8112a688:	10c00005 	stb	r3,0(r2)
8112a68c:	00003106 	br	8112a754 <OSFlagNameSet+0x140>
8112a690:	0005303a 	rdctl	r2,status
8112a694:	e0bffc15 	stw	r2,-16(fp)
8112a698:	e0fffc17 	ldw	r3,-16(fp)
8112a69c:	00bfff84 	movi	r2,-2
8112a6a0:	1884703a 	and	r2,r3,r2
8112a6a4:	1001703a 	wrctl	status,r2
8112a6a8:	e0bffc17 	ldw	r2,-16(fp)
8112a6ac:	e0bff715 	stw	r2,-36(fp)
8112a6b0:	e0bffd17 	ldw	r2,-12(fp)
8112a6b4:	10800003 	ldbu	r2,0(r2)
8112a6b8:	10803fcc 	andi	r2,r2,255
8112a6bc:	10800160 	cmpeqi	r2,r2,5
8112a6c0:	1000081e 	bne	r2,zero,8112a6e4 <OSFlagNameSet+0xd0>
8112a6c4:	e0bff717 	ldw	r2,-36(fp)
8112a6c8:	e0bff815 	stw	r2,-32(fp)
8112a6cc:	e0bff817 	ldw	r2,-32(fp)
8112a6d0:	1001703a 	wrctl	status,r2
8112a6d4:	e0bfff17 	ldw	r2,-4(fp)
8112a6d8:	00c00044 	movi	r3,1
8112a6dc:	10c00005 	stb	r3,0(r2)
8112a6e0:	00001c06 	br	8112a754 <OSFlagNameSet+0x140>
8112a6e4:	e13ffe17 	ldw	r4,-8(fp)
8112a6e8:	11297280 	call	81129728 <OS_StrLen>
8112a6ec:	e0bffa05 	stb	r2,-24(fp)
8112a6f0:	e0bffa03 	ldbu	r2,-24(fp)
8112a6f4:	10800830 	cmpltui	r2,r2,32
8112a6f8:	1000081e 	bne	r2,zero,8112a71c <OSFlagNameSet+0x108>
8112a6fc:	e0bff717 	ldw	r2,-36(fp)
8112a700:	e0bff915 	stw	r2,-28(fp)
8112a704:	e0bff917 	ldw	r2,-28(fp)
8112a708:	1001703a 	wrctl	status,r2
8112a70c:	e0bfff17 	ldw	r2,-4(fp)
8112a710:	00c01cc4 	movi	r3,115
8112a714:	10c00005 	stb	r3,0(r2)
8112a718:	00000e06 	br	8112a754 <OSFlagNameSet+0x140>
8112a71c:	e0bffd17 	ldw	r2,-12(fp)
8112a720:	10800284 	addi	r2,r2,10
8112a724:	e17ffe17 	ldw	r5,-8(fp)
8112a728:	1009883a 	mov	r4,r2
8112a72c:	11296ac0 	call	811296ac <OS_StrCopy>
8112a730:	e0bff717 	ldw	r2,-36(fp)
8112a734:	e0bffb15 	stw	r2,-20(fp)
8112a738:	e0bffb17 	ldw	r2,-20(fp)
8112a73c:	1001703a 	wrctl	status,r2
8112a740:	e0bfff17 	ldw	r2,-4(fp)
8112a744:	10000005 	stb	zero,0(r2)
8112a748:	0001883a 	nop
8112a74c:	00000106 	br	8112a754 <OSFlagNameSet+0x140>
8112a750:	0001883a 	nop
8112a754:	e037883a 	mov	sp,fp
8112a758:	dfc00117 	ldw	ra,4(sp)
8112a75c:	df000017 	ldw	fp,0(sp)
8112a760:	dec00204 	addi	sp,sp,8
8112a764:	f800283a 	ret

8112a768 <OSFlagPend>:
8112a768:	deffe104 	addi	sp,sp,-124
8112a76c:	de00012e 	bgeu	sp,et,8112a774 <OSFlagPend+0xc>
8112a770:	003b68fa 	trap	3
8112a774:	dfc01e15 	stw	ra,120(sp)
8112a778:	df001d15 	stw	fp,116(sp)
8112a77c:	df001d04 	addi	fp,sp,116
8112a780:	e13ffc15 	stw	r4,-16(fp)
8112a784:	2809883a 	mov	r4,r5
8112a788:	3007883a 	mov	r3,r6
8112a78c:	3805883a 	mov	r2,r7
8112a790:	e13ffd0d 	sth	r4,-12(fp)
8112a794:	e0fffe05 	stb	r3,-8(fp)
8112a798:	e0bfff0d 	sth	r2,-4(fp)
8112a79c:	e03fe515 	stw	zero,-108(fp)
8112a7a0:	e0800217 	ldw	r2,8(fp)
8112a7a4:	1000021e 	bne	r2,zero,8112a7b0 <OSFlagPend+0x48>
8112a7a8:	0005883a 	mov	r2,zero
8112a7ac:	00015906 	br	8112ad14 <OSFlagPend+0x5ac>
8112a7b0:	e0bffc17 	ldw	r2,-16(fp)
8112a7b4:	1000051e 	bne	r2,zero,8112a7cc <OSFlagPend+0x64>
8112a7b8:	e0800217 	ldw	r2,8(fp)
8112a7bc:	00c01b84 	movi	r3,110
8112a7c0:	10c00005 	stb	r3,0(r2)
8112a7c4:	0005883a 	mov	r2,zero
8112a7c8:	00015206 	br	8112ad14 <OSFlagPend+0x5ac>
8112a7cc:	d0a08303 	ldbu	r2,-32244(gp)
8112a7d0:	10803fcc 	andi	r2,r2,255
8112a7d4:	10000526 	beq	r2,zero,8112a7ec <OSFlagPend+0x84>
8112a7d8:	e0800217 	ldw	r2,8(fp)
8112a7dc:	00c00084 	movi	r3,2
8112a7e0:	10c00005 	stb	r3,0(r2)
8112a7e4:	0005883a 	mov	r2,zero
8112a7e8:	00014a06 	br	8112ad14 <OSFlagPend+0x5ac>
8112a7ec:	d0a07103 	ldbu	r2,-32316(gp)
8112a7f0:	10803fcc 	andi	r2,r2,255
8112a7f4:	10000526 	beq	r2,zero,8112a80c <OSFlagPend+0xa4>
8112a7f8:	e0800217 	ldw	r2,8(fp)
8112a7fc:	00c00344 	movi	r3,13
8112a800:	10c00005 	stb	r3,0(r2)
8112a804:	0005883a 	mov	r2,zero
8112a808:	00014206 	br	8112ad14 <OSFlagPend+0x5ac>
8112a80c:	e0bffc17 	ldw	r2,-16(fp)
8112a810:	10800003 	ldbu	r2,0(r2)
8112a814:	10803fcc 	andi	r2,r2,255
8112a818:	10800160 	cmpeqi	r2,r2,5
8112a81c:	1000051e 	bne	r2,zero,8112a834 <OSFlagPend+0xcc>
8112a820:	e0800217 	ldw	r2,8(fp)
8112a824:	00c00044 	movi	r3,1
8112a828:	10c00005 	stb	r3,0(r2)
8112a82c:	0005883a 	mov	r2,zero
8112a830:	00013806 	br	8112ad14 <OSFlagPend+0x5ac>
8112a834:	e0fffe03 	ldbu	r3,-8(fp)
8112a838:	00bfe004 	movi	r2,-128
8112a83c:	1884703a 	and	r2,r3,r2
8112a840:	e0bfe605 	stb	r2,-104(fp)
8112a844:	e0bfe603 	ldbu	r2,-104(fp)
8112a848:	10000626 	beq	r2,zero,8112a864 <OSFlagPend+0xfc>
8112a84c:	e0bffe03 	ldbu	r2,-8(fp)
8112a850:	10801fcc 	andi	r2,r2,127
8112a854:	e0bffe05 	stb	r2,-8(fp)
8112a858:	00800044 	movi	r2,1
8112a85c:	e0bfe405 	stb	r2,-112(fp)
8112a860:	00000106 	br	8112a868 <OSFlagPend+0x100>
8112a864:	e03fe405 	stb	zero,-112(fp)
8112a868:	0005303a 	rdctl	r2,status
8112a86c:	e0bff615 	stw	r2,-40(fp)
8112a870:	e0fff617 	ldw	r3,-40(fp)
8112a874:	00bfff84 	movi	r2,-2
8112a878:	1884703a 	and	r2,r3,r2
8112a87c:	1001703a 	wrctl	status,r2
8112a880:	e0bff617 	ldw	r2,-40(fp)
8112a884:	e0bfe515 	stw	r2,-108(fp)
8112a888:	e0bffe03 	ldbu	r2,-8(fp)
8112a88c:	10c00060 	cmpeqi	r3,r2,1
8112a890:	1800921e 	bne	r3,zero,8112aadc <OSFlagPend+0x374>
8112a894:	10c00088 	cmpgei	r3,r2,2
8112a898:	1800021e 	bne	r3,zero,8112a8a4 <OSFlagPend+0x13c>
8112a89c:	10006126 	beq	r2,zero,8112aa24 <OSFlagPend+0x2bc>
8112a8a0:	0000bb06 	br	8112ab90 <OSFlagPend+0x428>
8112a8a4:	10c000a0 	cmpeqi	r3,r2,2
8112a8a8:	1800031e 	bne	r3,zero,8112a8b8 <OSFlagPend+0x150>
8112a8ac:	108000e0 	cmpeqi	r2,r2,3
8112a8b0:	10002f1e 	bne	r2,zero,8112a970 <OSFlagPend+0x208>
8112a8b4:	0000b606 	br	8112ab90 <OSFlagPend+0x428>
8112a8b8:	e0bffc17 	ldw	r2,-16(fp)
8112a8bc:	10c0020b 	ldhu	r3,8(r2)
8112a8c0:	e0bffd0b 	ldhu	r2,-12(fp)
8112a8c4:	1884703a 	and	r2,r3,r2
8112a8c8:	e0bfe80d 	sth	r2,-96(fp)
8112a8cc:	e0ffe80b 	ldhu	r3,-96(fp)
8112a8d0:	e0bffd0b 	ldhu	r2,-12(fp)
8112a8d4:	1880171e 	bne	r3,r2,8112a934 <OSFlagPend+0x1cc>
8112a8d8:	e0bfe403 	ldbu	r2,-112(fp)
8112a8dc:	10800058 	cmpnei	r2,r2,1
8112a8e0:	1000091e 	bne	r2,zero,8112a908 <OSFlagPend+0x1a0>
8112a8e4:	e0bffc17 	ldw	r2,-16(fp)
8112a8e8:	1080020b 	ldhu	r2,8(r2)
8112a8ec:	1007883a 	mov	r3,r2
8112a8f0:	e0bfe80b 	ldhu	r2,-96(fp)
8112a8f4:	0084303a 	nor	r2,zero,r2
8112a8f8:	1884703a 	and	r2,r3,r2
8112a8fc:	1007883a 	mov	r3,r2
8112a900:	e0bffc17 	ldw	r2,-16(fp)
8112a904:	10c0020d 	sth	r3,8(r2)
8112a908:	d0a08417 	ldw	r2,-32240(gp)
8112a90c:	e0ffe80b 	ldhu	r3,-96(fp)
8112a910:	10c00b0d 	sth	r3,44(r2)
8112a914:	e0bfe517 	ldw	r2,-108(fp)
8112a918:	e0bfe715 	stw	r2,-100(fp)
8112a91c:	e0bfe717 	ldw	r2,-100(fp)
8112a920:	1001703a 	wrctl	status,r2
8112a924:	e0800217 	ldw	r2,8(fp)
8112a928:	10000005 	stb	zero,0(r2)
8112a92c:	e0bfe80b 	ldhu	r2,-96(fp)
8112a930:	0000f806 	br	8112ad14 <OSFlagPend+0x5ac>
8112a934:	e13ffd0b 	ldhu	r4,-12(fp)
8112a938:	e17ffe03 	ldbu	r5,-8(fp)
8112a93c:	e0bfff0b 	ldhu	r2,-4(fp)
8112a940:	e0fff704 	addi	r3,fp,-36
8112a944:	d8800015 	stw	r2,0(sp)
8112a948:	280f883a 	mov	r7,r5
8112a94c:	200d883a 	mov	r6,r4
8112a950:	180b883a 	mov	r5,r3
8112a954:	e13ffc17 	ldw	r4,-16(fp)
8112a958:	112b1f80 	call	8112b1f8 <OS_FlagBlock>
8112a95c:	e0bfe517 	ldw	r2,-108(fp)
8112a960:	e0bfe915 	stw	r2,-92(fp)
8112a964:	e0bfe917 	ldw	r2,-92(fp)
8112a968:	1001703a 	wrctl	status,r2
8112a96c:	00009206 	br	8112abb8 <OSFlagPend+0x450>
8112a970:	e0bffc17 	ldw	r2,-16(fp)
8112a974:	10c0020b 	ldhu	r3,8(r2)
8112a978:	e0bffd0b 	ldhu	r2,-12(fp)
8112a97c:	1884703a 	and	r2,r3,r2
8112a980:	e0bfe80d 	sth	r2,-96(fp)
8112a984:	e0bfe80b 	ldhu	r2,-96(fp)
8112a988:	10001726 	beq	r2,zero,8112a9e8 <OSFlagPend+0x280>
8112a98c:	e0bfe403 	ldbu	r2,-112(fp)
8112a990:	10800058 	cmpnei	r2,r2,1
8112a994:	1000091e 	bne	r2,zero,8112a9bc <OSFlagPend+0x254>
8112a998:	e0bffc17 	ldw	r2,-16(fp)
8112a99c:	1080020b 	ldhu	r2,8(r2)
8112a9a0:	1007883a 	mov	r3,r2
8112a9a4:	e0bfe80b 	ldhu	r2,-96(fp)
8112a9a8:	0084303a 	nor	r2,zero,r2
8112a9ac:	1884703a 	and	r2,r3,r2
8112a9b0:	1007883a 	mov	r3,r2
8112a9b4:	e0bffc17 	ldw	r2,-16(fp)
8112a9b8:	10c0020d 	sth	r3,8(r2)
8112a9bc:	d0a08417 	ldw	r2,-32240(gp)
8112a9c0:	e0ffe80b 	ldhu	r3,-96(fp)
8112a9c4:	10c00b0d 	sth	r3,44(r2)
8112a9c8:	e0bfe517 	ldw	r2,-108(fp)
8112a9cc:	e0bfea15 	stw	r2,-88(fp)
8112a9d0:	e0bfea17 	ldw	r2,-88(fp)
8112a9d4:	1001703a 	wrctl	status,r2
8112a9d8:	e0800217 	ldw	r2,8(fp)
8112a9dc:	10000005 	stb	zero,0(r2)
8112a9e0:	e0bfe80b 	ldhu	r2,-96(fp)
8112a9e4:	0000cb06 	br	8112ad14 <OSFlagPend+0x5ac>
8112a9e8:	e13ffd0b 	ldhu	r4,-12(fp)
8112a9ec:	e17ffe03 	ldbu	r5,-8(fp)
8112a9f0:	e0bfff0b 	ldhu	r2,-4(fp)
8112a9f4:	e0fff704 	addi	r3,fp,-36
8112a9f8:	d8800015 	stw	r2,0(sp)
8112a9fc:	280f883a 	mov	r7,r5
8112aa00:	200d883a 	mov	r6,r4
8112aa04:	180b883a 	mov	r5,r3
8112aa08:	e13ffc17 	ldw	r4,-16(fp)
8112aa0c:	112b1f80 	call	8112b1f8 <OS_FlagBlock>
8112aa10:	e0bfe517 	ldw	r2,-108(fp)
8112aa14:	e0bfeb15 	stw	r2,-84(fp)
8112aa18:	e0bfeb17 	ldw	r2,-84(fp)
8112aa1c:	1001703a 	wrctl	status,r2
8112aa20:	00006506 	br	8112abb8 <OSFlagPend+0x450>
8112aa24:	e0bffc17 	ldw	r2,-16(fp)
8112aa28:	1080020b 	ldhu	r2,8(r2)
8112aa2c:	0084303a 	nor	r2,zero,r2
8112aa30:	1007883a 	mov	r3,r2
8112aa34:	e0bffd0b 	ldhu	r2,-12(fp)
8112aa38:	1884703a 	and	r2,r3,r2
8112aa3c:	e0bfe80d 	sth	r2,-96(fp)
8112aa40:	e0ffe80b 	ldhu	r3,-96(fp)
8112aa44:	e0bffd0b 	ldhu	r2,-12(fp)
8112aa48:	1880151e 	bne	r3,r2,8112aaa0 <OSFlagPend+0x338>
8112aa4c:	e0bfe403 	ldbu	r2,-112(fp)
8112aa50:	10800058 	cmpnei	r2,r2,1
8112aa54:	1000071e 	bne	r2,zero,8112aa74 <OSFlagPend+0x30c>
8112aa58:	e0bffc17 	ldw	r2,-16(fp)
8112aa5c:	10c0020b 	ldhu	r3,8(r2)
8112aa60:	e0bfe80b 	ldhu	r2,-96(fp)
8112aa64:	1884b03a 	or	r2,r3,r2
8112aa68:	1007883a 	mov	r3,r2
8112aa6c:	e0bffc17 	ldw	r2,-16(fp)
8112aa70:	10c0020d 	sth	r3,8(r2)
8112aa74:	d0a08417 	ldw	r2,-32240(gp)
8112aa78:	e0ffe80b 	ldhu	r3,-96(fp)
8112aa7c:	10c00b0d 	sth	r3,44(r2)
8112aa80:	e0bfe517 	ldw	r2,-108(fp)
8112aa84:	e0bfec15 	stw	r2,-80(fp)
8112aa88:	e0bfec17 	ldw	r2,-80(fp)
8112aa8c:	1001703a 	wrctl	status,r2
8112aa90:	e0800217 	ldw	r2,8(fp)
8112aa94:	10000005 	stb	zero,0(r2)
8112aa98:	e0bfe80b 	ldhu	r2,-96(fp)
8112aa9c:	00009d06 	br	8112ad14 <OSFlagPend+0x5ac>
8112aaa0:	e13ffd0b 	ldhu	r4,-12(fp)
8112aaa4:	e17ffe03 	ldbu	r5,-8(fp)
8112aaa8:	e0bfff0b 	ldhu	r2,-4(fp)
8112aaac:	e0fff704 	addi	r3,fp,-36
8112aab0:	d8800015 	stw	r2,0(sp)
8112aab4:	280f883a 	mov	r7,r5
8112aab8:	200d883a 	mov	r6,r4
8112aabc:	180b883a 	mov	r5,r3
8112aac0:	e13ffc17 	ldw	r4,-16(fp)
8112aac4:	112b1f80 	call	8112b1f8 <OS_FlagBlock>
8112aac8:	e0bfe517 	ldw	r2,-108(fp)
8112aacc:	e0bfed15 	stw	r2,-76(fp)
8112aad0:	e0bfed17 	ldw	r2,-76(fp)
8112aad4:	1001703a 	wrctl	status,r2
8112aad8:	00003706 	br	8112abb8 <OSFlagPend+0x450>
8112aadc:	e0bffc17 	ldw	r2,-16(fp)
8112aae0:	1080020b 	ldhu	r2,8(r2)
8112aae4:	0084303a 	nor	r2,zero,r2
8112aae8:	1007883a 	mov	r3,r2
8112aaec:	e0bffd0b 	ldhu	r2,-12(fp)
8112aaf0:	1884703a 	and	r2,r3,r2
8112aaf4:	e0bfe80d 	sth	r2,-96(fp)
8112aaf8:	e0bfe80b 	ldhu	r2,-96(fp)
8112aafc:	10001526 	beq	r2,zero,8112ab54 <OSFlagPend+0x3ec>
8112ab00:	e0bfe403 	ldbu	r2,-112(fp)
8112ab04:	10800058 	cmpnei	r2,r2,1
8112ab08:	1000071e 	bne	r2,zero,8112ab28 <OSFlagPend+0x3c0>
8112ab0c:	e0bffc17 	ldw	r2,-16(fp)
8112ab10:	10c0020b 	ldhu	r3,8(r2)
8112ab14:	e0bfe80b 	ldhu	r2,-96(fp)
8112ab18:	1884b03a 	or	r2,r3,r2
8112ab1c:	1007883a 	mov	r3,r2
8112ab20:	e0bffc17 	ldw	r2,-16(fp)
8112ab24:	10c0020d 	sth	r3,8(r2)
8112ab28:	d0a08417 	ldw	r2,-32240(gp)
8112ab2c:	e0ffe80b 	ldhu	r3,-96(fp)
8112ab30:	10c00b0d 	sth	r3,44(r2)
8112ab34:	e0bfe517 	ldw	r2,-108(fp)
8112ab38:	e0bfee15 	stw	r2,-72(fp)
8112ab3c:	e0bfee17 	ldw	r2,-72(fp)
8112ab40:	1001703a 	wrctl	status,r2
8112ab44:	e0800217 	ldw	r2,8(fp)
8112ab48:	10000005 	stb	zero,0(r2)
8112ab4c:	e0bfe80b 	ldhu	r2,-96(fp)
8112ab50:	00007006 	br	8112ad14 <OSFlagPend+0x5ac>
8112ab54:	e13ffd0b 	ldhu	r4,-12(fp)
8112ab58:	e17ffe03 	ldbu	r5,-8(fp)
8112ab5c:	e0bfff0b 	ldhu	r2,-4(fp)
8112ab60:	e0fff704 	addi	r3,fp,-36
8112ab64:	d8800015 	stw	r2,0(sp)
8112ab68:	280f883a 	mov	r7,r5
8112ab6c:	200d883a 	mov	r6,r4
8112ab70:	180b883a 	mov	r5,r3
8112ab74:	e13ffc17 	ldw	r4,-16(fp)
8112ab78:	112b1f80 	call	8112b1f8 <OS_FlagBlock>
8112ab7c:	e0bfe517 	ldw	r2,-108(fp)
8112ab80:	e0bfef15 	stw	r2,-68(fp)
8112ab84:	e0bfef17 	ldw	r2,-68(fp)
8112ab88:	1001703a 	wrctl	status,r2
8112ab8c:	00000a06 	br	8112abb8 <OSFlagPend+0x450>
8112ab90:	e0bfe517 	ldw	r2,-108(fp)
8112ab94:	e0bff015 	stw	r2,-64(fp)
8112ab98:	e0bff017 	ldw	r2,-64(fp)
8112ab9c:	1001703a 	wrctl	status,r2
8112aba0:	e03fe80d 	sth	zero,-96(fp)
8112aba4:	e0800217 	ldw	r2,8(fp)
8112aba8:	00c01bc4 	movi	r3,111
8112abac:	10c00005 	stb	r3,0(r2)
8112abb0:	e0bfe80b 	ldhu	r2,-96(fp)
8112abb4:	00005706 	br	8112ad14 <OSFlagPend+0x5ac>
8112abb8:	11295580 	call	81129558 <OS_Sched>
8112abbc:	0005303a 	rdctl	r2,status
8112abc0:	e0bff115 	stw	r2,-60(fp)
8112abc4:	e0fff117 	ldw	r3,-60(fp)
8112abc8:	00bfff84 	movi	r2,-2
8112abcc:	1884703a 	and	r2,r3,r2
8112abd0:	1001703a 	wrctl	status,r2
8112abd4:	e0bff117 	ldw	r2,-60(fp)
8112abd8:	e0bfe515 	stw	r2,-108(fp)
8112abdc:	d0a08417 	ldw	r2,-32240(gp)
8112abe0:	10800c43 	ldbu	r2,49(r2)
8112abe4:	10803fcc 	andi	r2,r2,255
8112abe8:	10001c26 	beq	r2,zero,8112ac5c <OSFlagPend+0x4f4>
8112abec:	d0a08417 	ldw	r2,-32240(gp)
8112abf0:	10800c43 	ldbu	r2,49(r2)
8112abf4:	e0bff305 	stb	r2,-52(fp)
8112abf8:	d0a08417 	ldw	r2,-32240(gp)
8112abfc:	10000c45 	stb	zero,49(r2)
8112ac00:	e0bff704 	addi	r2,fp,-36
8112ac04:	1009883a 	mov	r4,r2
8112ac08:	112b5440 	call	8112b544 <OS_FlagUnlink>
8112ac0c:	d0a08417 	ldw	r2,-32240(gp)
8112ac10:	10000c05 	stb	zero,48(r2)
8112ac14:	e0bfe517 	ldw	r2,-108(fp)
8112ac18:	e0bff215 	stw	r2,-56(fp)
8112ac1c:	e0bff217 	ldw	r2,-56(fp)
8112ac20:	1001703a 	wrctl	status,r2
8112ac24:	e03fe80d 	sth	zero,-96(fp)
8112ac28:	e0bff303 	ldbu	r2,-52(fp)
8112ac2c:	108000a0 	cmpeqi	r2,r2,2
8112ac30:	10000426 	beq	r2,zero,8112ac44 <OSFlagPend+0x4dc>
8112ac34:	e0800217 	ldw	r2,8(fp)
8112ac38:	00c00384 	movi	r3,14
8112ac3c:	10c00005 	stb	r3,0(r2)
8112ac40:	00000406 	br	8112ac54 <OSFlagPend+0x4ec>
8112ac44:	e0800217 	ldw	r2,8(fp)
8112ac48:	00c00284 	movi	r3,10
8112ac4c:	10c00005 	stb	r3,0(r2)
8112ac50:	0001883a 	nop
8112ac54:	e0bfe80b 	ldhu	r2,-96(fp)
8112ac58:	00002e06 	br	8112ad14 <OSFlagPend+0x5ac>
8112ac5c:	d0a08417 	ldw	r2,-32240(gp)
8112ac60:	10800b0b 	ldhu	r2,44(r2)
8112ac64:	e0bfe80d 	sth	r2,-96(fp)
8112ac68:	e0bfe403 	ldbu	r2,-112(fp)
8112ac6c:	10800058 	cmpnei	r2,r2,1
8112ac70:	1000211e 	bne	r2,zero,8112acf8 <OSFlagPend+0x590>
8112ac74:	e0bffe03 	ldbu	r2,-8(fp)
8112ac78:	10001616 	blt	r2,zero,8112acd4 <OSFlagPend+0x56c>
8112ac7c:	10c00090 	cmplti	r3,r2,2
8112ac80:	18000c1e 	bne	r3,zero,8112acb4 <OSFlagPend+0x54c>
8112ac84:	10800108 	cmpgei	r2,r2,4
8112ac88:	1000121e 	bne	r2,zero,8112acd4 <OSFlagPend+0x56c>
8112ac8c:	e0bffc17 	ldw	r2,-16(fp)
8112ac90:	1080020b 	ldhu	r2,8(r2)
8112ac94:	1007883a 	mov	r3,r2
8112ac98:	e0bfe80b 	ldhu	r2,-96(fp)
8112ac9c:	0084303a 	nor	r2,zero,r2
8112aca0:	1884703a 	and	r2,r3,r2
8112aca4:	1007883a 	mov	r3,r2
8112aca8:	e0bffc17 	ldw	r2,-16(fp)
8112acac:	10c0020d 	sth	r3,8(r2)
8112acb0:	00001106 	br	8112acf8 <OSFlagPend+0x590>
8112acb4:	e0bffc17 	ldw	r2,-16(fp)
8112acb8:	10c0020b 	ldhu	r3,8(r2)
8112acbc:	e0bfe80b 	ldhu	r2,-96(fp)
8112acc0:	1884b03a 	or	r2,r3,r2
8112acc4:	1007883a 	mov	r3,r2
8112acc8:	e0bffc17 	ldw	r2,-16(fp)
8112accc:	10c0020d 	sth	r3,8(r2)
8112acd0:	00000906 	br	8112acf8 <OSFlagPend+0x590>
8112acd4:	e0bfe517 	ldw	r2,-108(fp)
8112acd8:	e0bff415 	stw	r2,-48(fp)
8112acdc:	e0bff417 	ldw	r2,-48(fp)
8112ace0:	1001703a 	wrctl	status,r2
8112ace4:	e0800217 	ldw	r2,8(fp)
8112ace8:	00c01bc4 	movi	r3,111
8112acec:	10c00005 	stb	r3,0(r2)
8112acf0:	0005883a 	mov	r2,zero
8112acf4:	00000706 	br	8112ad14 <OSFlagPend+0x5ac>
8112acf8:	e0bfe517 	ldw	r2,-108(fp)
8112acfc:	e0bff515 	stw	r2,-44(fp)
8112ad00:	e0bff517 	ldw	r2,-44(fp)
8112ad04:	1001703a 	wrctl	status,r2
8112ad08:	e0800217 	ldw	r2,8(fp)
8112ad0c:	10000005 	stb	zero,0(r2)
8112ad10:	e0bfe80b 	ldhu	r2,-96(fp)
8112ad14:	e037883a 	mov	sp,fp
8112ad18:	dfc00117 	ldw	ra,4(sp)
8112ad1c:	df000017 	ldw	fp,0(sp)
8112ad20:	dec00204 	addi	sp,sp,8
8112ad24:	f800283a 	ret

8112ad28 <OSFlagPendGetFlagsRdy>:
8112ad28:	defffb04 	addi	sp,sp,-20
8112ad2c:	de00012e 	bgeu	sp,et,8112ad34 <OSFlagPendGetFlagsRdy+0xc>
8112ad30:	003b68fa 	trap	3
8112ad34:	df000415 	stw	fp,16(sp)
8112ad38:	df000404 	addi	fp,sp,16
8112ad3c:	e03ffc15 	stw	zero,-16(fp)
8112ad40:	0005303a 	rdctl	r2,status
8112ad44:	e0bffe15 	stw	r2,-8(fp)
8112ad48:	e0fffe17 	ldw	r3,-8(fp)
8112ad4c:	00bfff84 	movi	r2,-2
8112ad50:	1884703a 	and	r2,r3,r2
8112ad54:	1001703a 	wrctl	status,r2
8112ad58:	e0bffe17 	ldw	r2,-8(fp)
8112ad5c:	e0bffc15 	stw	r2,-16(fp)
8112ad60:	d0a08417 	ldw	r2,-32240(gp)
8112ad64:	10800b0b 	ldhu	r2,44(r2)
8112ad68:	e0bffd0d 	sth	r2,-12(fp)
8112ad6c:	e0bffc17 	ldw	r2,-16(fp)
8112ad70:	e0bfff15 	stw	r2,-4(fp)
8112ad74:	e0bfff17 	ldw	r2,-4(fp)
8112ad78:	1001703a 	wrctl	status,r2
8112ad7c:	e0bffd0b 	ldhu	r2,-12(fp)
8112ad80:	e037883a 	mov	sp,fp
8112ad84:	df000017 	ldw	fp,0(sp)
8112ad88:	dec00104 	addi	sp,sp,4
8112ad8c:	f800283a 	ret

8112ad90 <OSFlagPost>:
8112ad90:	deffef04 	addi	sp,sp,-68
8112ad94:	de00012e 	bgeu	sp,et,8112ad9c <OSFlagPost+0xc>
8112ad98:	003b68fa 	trap	3
8112ad9c:	dfc01015 	stw	ra,64(sp)
8112ada0:	df000f15 	stw	fp,60(sp)
8112ada4:	df000f04 	addi	fp,sp,60
8112ada8:	e13ffc15 	stw	r4,-16(fp)
8112adac:	2807883a 	mov	r3,r5
8112adb0:	3005883a 	mov	r2,r6
8112adb4:	e1ffff15 	stw	r7,-4(fp)
8112adb8:	e0fffd0d 	sth	r3,-12(fp)
8112adbc:	e0bffe05 	stb	r2,-8(fp)
8112adc0:	e03ff315 	stw	zero,-52(fp)
8112adc4:	e0bfff17 	ldw	r2,-4(fp)
8112adc8:	1000021e 	bne	r2,zero,8112add4 <OSFlagPost+0x44>
8112adcc:	0005883a 	mov	r2,zero
8112add0:	0000d106 	br	8112b118 <OSFlagPost+0x388>
8112add4:	e0bffc17 	ldw	r2,-16(fp)
8112add8:	1000051e 	bne	r2,zero,8112adf0 <OSFlagPost+0x60>
8112addc:	e0bfff17 	ldw	r2,-4(fp)
8112ade0:	00c01b84 	movi	r3,110
8112ade4:	10c00005 	stb	r3,0(r2)
8112ade8:	0005883a 	mov	r2,zero
8112adec:	0000ca06 	br	8112b118 <OSFlagPost+0x388>
8112adf0:	e0bffc17 	ldw	r2,-16(fp)
8112adf4:	10800003 	ldbu	r2,0(r2)
8112adf8:	10803fcc 	andi	r2,r2,255
8112adfc:	10800160 	cmpeqi	r2,r2,5
8112ae00:	1000051e 	bne	r2,zero,8112ae18 <OSFlagPost+0x88>
8112ae04:	e0bfff17 	ldw	r2,-4(fp)
8112ae08:	00c00044 	movi	r3,1
8112ae0c:	10c00005 	stb	r3,0(r2)
8112ae10:	0005883a 	mov	r2,zero
8112ae14:	0000c006 	br	8112b118 <OSFlagPost+0x388>
8112ae18:	0005303a 	rdctl	r2,status
8112ae1c:	e0bffb15 	stw	r2,-20(fp)
8112ae20:	e0fffb17 	ldw	r3,-20(fp)
8112ae24:	00bfff84 	movi	r2,-2
8112ae28:	1884703a 	and	r2,r3,r2
8112ae2c:	1001703a 	wrctl	status,r2
8112ae30:	e0bffb17 	ldw	r2,-20(fp)
8112ae34:	e0bff315 	stw	r2,-52(fp)
8112ae38:	e0bffe03 	ldbu	r2,-8(fp)
8112ae3c:	10000326 	beq	r2,zero,8112ae4c <OSFlagPost+0xbc>
8112ae40:	10800060 	cmpeqi	r2,r2,1
8112ae44:	10000b1e 	bne	r2,zero,8112ae74 <OSFlagPost+0xe4>
8112ae48:	00001206 	br	8112ae94 <OSFlagPost+0x104>
8112ae4c:	e0bffc17 	ldw	r2,-16(fp)
8112ae50:	1080020b 	ldhu	r2,8(r2)
8112ae54:	1007883a 	mov	r3,r2
8112ae58:	e0bffd0b 	ldhu	r2,-12(fp)
8112ae5c:	0084303a 	nor	r2,zero,r2
8112ae60:	1884703a 	and	r2,r3,r2
8112ae64:	1007883a 	mov	r3,r2
8112ae68:	e0bffc17 	ldw	r2,-16(fp)
8112ae6c:	10c0020d 	sth	r3,8(r2)
8112ae70:	00001106 	br	8112aeb8 <OSFlagPost+0x128>
8112ae74:	e0bffc17 	ldw	r2,-16(fp)
8112ae78:	10c0020b 	ldhu	r3,8(r2)
8112ae7c:	e0bffd0b 	ldhu	r2,-12(fp)
8112ae80:	1884b03a 	or	r2,r3,r2
8112ae84:	1007883a 	mov	r3,r2
8112ae88:	e0bffc17 	ldw	r2,-16(fp)
8112ae8c:	10c0020d 	sth	r3,8(r2)
8112ae90:	00000906 	br	8112aeb8 <OSFlagPost+0x128>
8112ae94:	e0bff317 	ldw	r2,-52(fp)
8112ae98:	e0bff415 	stw	r2,-48(fp)
8112ae9c:	e0bff417 	ldw	r2,-48(fp)
8112aea0:	1001703a 	wrctl	status,r2
8112aea4:	e0bfff17 	ldw	r2,-4(fp)
8112aea8:	00c01c44 	movi	r3,113
8112aeac:	10c00005 	stb	r3,0(r2)
8112aeb0:	0005883a 	mov	r2,zero
8112aeb4:	00009806 	br	8112b118 <OSFlagPost+0x388>
8112aeb8:	e03ff205 	stb	zero,-56(fp)
8112aebc:	e0bffc17 	ldw	r2,-16(fp)
8112aec0:	10800117 	ldw	r2,4(r2)
8112aec4:	e0bff115 	stw	r2,-60(fp)
8112aec8:	00007706 	br	8112b0a8 <OSFlagPost+0x318>
8112aecc:	e0bff117 	ldw	r2,-60(fp)
8112aed0:	10800483 	ldbu	r2,18(r2)
8112aed4:	10803fcc 	andi	r2,r2,255
8112aed8:	10c00060 	cmpeqi	r3,r2,1
8112aedc:	18004a1e 	bne	r3,zero,8112b008 <OSFlagPost+0x278>
8112aee0:	10c00088 	cmpgei	r3,r2,2
8112aee4:	1800021e 	bne	r3,zero,8112aef0 <OSFlagPost+0x160>
8112aee8:	10002f26 	beq	r2,zero,8112afa8 <OSFlagPost+0x218>
8112aeec:	00005b06 	br	8112b05c <OSFlagPost+0x2cc>
8112aef0:	10c000a0 	cmpeqi	r3,r2,2
8112aef4:	1800031e 	bne	r3,zero,8112af04 <OSFlagPost+0x174>
8112aef8:	108000e0 	cmpeqi	r2,r2,3
8112aefc:	1000171e 	bne	r2,zero,8112af5c <OSFlagPost+0x1cc>
8112af00:	00005606 	br	8112b05c <OSFlagPost+0x2cc>
8112af04:	e0bffc17 	ldw	r2,-16(fp)
8112af08:	10c0020b 	ldhu	r3,8(r2)
8112af0c:	e0bff117 	ldw	r2,-60(fp)
8112af10:	1080040b 	ldhu	r2,16(r2)
8112af14:	1884703a 	and	r2,r3,r2
8112af18:	e0bff60d 	sth	r2,-40(fp)
8112af1c:	e0bff117 	ldw	r2,-60(fp)
8112af20:	1080040b 	ldhu	r2,16(r2)
8112af24:	10ffffcc 	andi	r3,r2,65535
8112af28:	e0bff60b 	ldhu	r2,-40(fp)
8112af2c:	1880541e 	bne	r3,r2,8112b080 <OSFlagPost+0x2f0>
8112af30:	e0bff60b 	ldhu	r2,-40(fp)
8112af34:	100b883a 	mov	r5,r2
8112af38:	e13ff117 	ldw	r4,-60(fp)
8112af3c:	112b4480 	call	8112b448 <OS_FlagTaskRdy>
8112af40:	e0bff685 	stb	r2,-38(fp)
8112af44:	e0bff683 	ldbu	r2,-38(fp)
8112af48:	10800058 	cmpnei	r2,r2,1
8112af4c:	10004c1e 	bne	r2,zero,8112b080 <OSFlagPost+0x2f0>
8112af50:	00800044 	movi	r2,1
8112af54:	e0bff205 	stb	r2,-56(fp)
8112af58:	00004906 	br	8112b080 <OSFlagPost+0x2f0>
8112af5c:	e0bffc17 	ldw	r2,-16(fp)
8112af60:	10c0020b 	ldhu	r3,8(r2)
8112af64:	e0bff117 	ldw	r2,-60(fp)
8112af68:	1080040b 	ldhu	r2,16(r2)
8112af6c:	1884703a 	and	r2,r3,r2
8112af70:	e0bff60d 	sth	r2,-40(fp)
8112af74:	e0bff60b 	ldhu	r2,-40(fp)
8112af78:	10004326 	beq	r2,zero,8112b088 <OSFlagPost+0x2f8>
8112af7c:	e0bff60b 	ldhu	r2,-40(fp)
8112af80:	100b883a 	mov	r5,r2
8112af84:	e13ff117 	ldw	r4,-60(fp)
8112af88:	112b4480 	call	8112b448 <OS_FlagTaskRdy>
8112af8c:	e0bff685 	stb	r2,-38(fp)
8112af90:	e0bff683 	ldbu	r2,-38(fp)
8112af94:	10800058 	cmpnei	r2,r2,1
8112af98:	10003b1e 	bne	r2,zero,8112b088 <OSFlagPost+0x2f8>
8112af9c:	00800044 	movi	r2,1
8112afa0:	e0bff205 	stb	r2,-56(fp)
8112afa4:	00003806 	br	8112b088 <OSFlagPost+0x2f8>
8112afa8:	e0bffc17 	ldw	r2,-16(fp)
8112afac:	1080020b 	ldhu	r2,8(r2)
8112afb0:	0084303a 	nor	r2,zero,r2
8112afb4:	1007883a 	mov	r3,r2
8112afb8:	e0bff117 	ldw	r2,-60(fp)
8112afbc:	1080040b 	ldhu	r2,16(r2)
8112afc0:	1884703a 	and	r2,r3,r2
8112afc4:	e0bff60d 	sth	r2,-40(fp)
8112afc8:	e0bff117 	ldw	r2,-60(fp)
8112afcc:	1080040b 	ldhu	r2,16(r2)
8112afd0:	10ffffcc 	andi	r3,r2,65535
8112afd4:	e0bff60b 	ldhu	r2,-40(fp)
8112afd8:	18802d1e 	bne	r3,r2,8112b090 <OSFlagPost+0x300>
8112afdc:	e0bff60b 	ldhu	r2,-40(fp)
8112afe0:	100b883a 	mov	r5,r2
8112afe4:	e13ff117 	ldw	r4,-60(fp)
8112afe8:	112b4480 	call	8112b448 <OS_FlagTaskRdy>
8112afec:	e0bff685 	stb	r2,-38(fp)
8112aff0:	e0bff683 	ldbu	r2,-38(fp)
8112aff4:	10800058 	cmpnei	r2,r2,1
8112aff8:	1000251e 	bne	r2,zero,8112b090 <OSFlagPost+0x300>
8112affc:	00800044 	movi	r2,1
8112b000:	e0bff205 	stb	r2,-56(fp)
8112b004:	00002206 	br	8112b090 <OSFlagPost+0x300>
8112b008:	e0bffc17 	ldw	r2,-16(fp)
8112b00c:	1080020b 	ldhu	r2,8(r2)
8112b010:	0084303a 	nor	r2,zero,r2
8112b014:	1007883a 	mov	r3,r2
8112b018:	e0bff117 	ldw	r2,-60(fp)
8112b01c:	1080040b 	ldhu	r2,16(r2)
8112b020:	1884703a 	and	r2,r3,r2
8112b024:	e0bff60d 	sth	r2,-40(fp)
8112b028:	e0bff60b 	ldhu	r2,-40(fp)
8112b02c:	10001a26 	beq	r2,zero,8112b098 <OSFlagPost+0x308>
8112b030:	e0bff60b 	ldhu	r2,-40(fp)
8112b034:	100b883a 	mov	r5,r2
8112b038:	e13ff117 	ldw	r4,-60(fp)
8112b03c:	112b4480 	call	8112b448 <OS_FlagTaskRdy>
8112b040:	e0bff685 	stb	r2,-38(fp)
8112b044:	e0bff683 	ldbu	r2,-38(fp)
8112b048:	10800058 	cmpnei	r2,r2,1
8112b04c:	1000121e 	bne	r2,zero,8112b098 <OSFlagPost+0x308>
8112b050:	00800044 	movi	r2,1
8112b054:	e0bff205 	stb	r2,-56(fp)
8112b058:	00000f06 	br	8112b098 <OSFlagPost+0x308>
8112b05c:	e0bff317 	ldw	r2,-52(fp)
8112b060:	e0bff515 	stw	r2,-44(fp)
8112b064:	e0bff517 	ldw	r2,-44(fp)
8112b068:	1001703a 	wrctl	status,r2
8112b06c:	e0bfff17 	ldw	r2,-4(fp)
8112b070:	00c01bc4 	movi	r3,111
8112b074:	10c00005 	stb	r3,0(r2)
8112b078:	0005883a 	mov	r2,zero
8112b07c:	00002606 	br	8112b118 <OSFlagPost+0x388>
8112b080:	0001883a 	nop
8112b084:	00000506 	br	8112b09c <OSFlagPost+0x30c>
8112b088:	0001883a 	nop
8112b08c:	00000306 	br	8112b09c <OSFlagPost+0x30c>
8112b090:	0001883a 	nop
8112b094:	00000106 	br	8112b09c <OSFlagPost+0x30c>
8112b098:	0001883a 	nop
8112b09c:	e0bff117 	ldw	r2,-60(fp)
8112b0a0:	10800017 	ldw	r2,0(r2)
8112b0a4:	e0bff115 	stw	r2,-60(fp)
8112b0a8:	e0bff117 	ldw	r2,-60(fp)
8112b0ac:	103f871e 	bne	r2,zero,8112aecc <__reset+0xfb10aecc>
8112b0b0:	e0bff317 	ldw	r2,-52(fp)
8112b0b4:	e0bff715 	stw	r2,-36(fp)
8112b0b8:	e0bff717 	ldw	r2,-36(fp)
8112b0bc:	1001703a 	wrctl	status,r2
8112b0c0:	e0bff203 	ldbu	r2,-56(fp)
8112b0c4:	10800058 	cmpnei	r2,r2,1
8112b0c8:	1000011e 	bne	r2,zero,8112b0d0 <OSFlagPost+0x340>
8112b0cc:	11295580 	call	81129558 <OS_Sched>
8112b0d0:	0005303a 	rdctl	r2,status
8112b0d4:	e0bffa15 	stw	r2,-24(fp)
8112b0d8:	e0fffa17 	ldw	r3,-24(fp)
8112b0dc:	00bfff84 	movi	r2,-2
8112b0e0:	1884703a 	and	r2,r3,r2
8112b0e4:	1001703a 	wrctl	status,r2
8112b0e8:	e0bffa17 	ldw	r2,-24(fp)
8112b0ec:	e0bff315 	stw	r2,-52(fp)
8112b0f0:	e0bffc17 	ldw	r2,-16(fp)
8112b0f4:	1080020b 	ldhu	r2,8(r2)
8112b0f8:	e0bff90d 	sth	r2,-28(fp)
8112b0fc:	e0bff317 	ldw	r2,-52(fp)
8112b100:	e0bff815 	stw	r2,-32(fp)
8112b104:	e0bff817 	ldw	r2,-32(fp)
8112b108:	1001703a 	wrctl	status,r2
8112b10c:	e0bfff17 	ldw	r2,-4(fp)
8112b110:	10000005 	stb	zero,0(r2)
8112b114:	e0bff90b 	ldhu	r2,-28(fp)
8112b118:	e037883a 	mov	sp,fp
8112b11c:	dfc00117 	ldw	ra,4(sp)
8112b120:	df000017 	ldw	fp,0(sp)
8112b124:	dec00204 	addi	sp,sp,8
8112b128:	f800283a 	ret

8112b12c <OSFlagQuery>:
8112b12c:	defff904 	addi	sp,sp,-28
8112b130:	de00012e 	bgeu	sp,et,8112b138 <OSFlagQuery+0xc>
8112b134:	003b68fa 	trap	3
8112b138:	df000615 	stw	fp,24(sp)
8112b13c:	df000604 	addi	fp,sp,24
8112b140:	e13ffe15 	stw	r4,-8(fp)
8112b144:	e17fff15 	stw	r5,-4(fp)
8112b148:	e03ffa15 	stw	zero,-24(fp)
8112b14c:	e0bfff17 	ldw	r2,-4(fp)
8112b150:	1000021e 	bne	r2,zero,8112b15c <OSFlagQuery+0x30>
8112b154:	0005883a 	mov	r2,zero
8112b158:	00002306 	br	8112b1e8 <OSFlagQuery+0xbc>
8112b15c:	e0bffe17 	ldw	r2,-8(fp)
8112b160:	1000051e 	bne	r2,zero,8112b178 <OSFlagQuery+0x4c>
8112b164:	e0bfff17 	ldw	r2,-4(fp)
8112b168:	00c01b84 	movi	r3,110
8112b16c:	10c00005 	stb	r3,0(r2)
8112b170:	0005883a 	mov	r2,zero
8112b174:	00001c06 	br	8112b1e8 <OSFlagQuery+0xbc>
8112b178:	e0bffe17 	ldw	r2,-8(fp)
8112b17c:	10800003 	ldbu	r2,0(r2)
8112b180:	10803fcc 	andi	r2,r2,255
8112b184:	10800160 	cmpeqi	r2,r2,5
8112b188:	1000051e 	bne	r2,zero,8112b1a0 <OSFlagQuery+0x74>
8112b18c:	e0bfff17 	ldw	r2,-4(fp)
8112b190:	00c00044 	movi	r3,1
8112b194:	10c00005 	stb	r3,0(r2)
8112b198:	0005883a 	mov	r2,zero
8112b19c:	00001206 	br	8112b1e8 <OSFlagQuery+0xbc>
8112b1a0:	0005303a 	rdctl	r2,status
8112b1a4:	e0bffc15 	stw	r2,-16(fp)
8112b1a8:	e0fffc17 	ldw	r3,-16(fp)
8112b1ac:	00bfff84 	movi	r2,-2
8112b1b0:	1884703a 	and	r2,r3,r2
8112b1b4:	1001703a 	wrctl	status,r2
8112b1b8:	e0bffc17 	ldw	r2,-16(fp)
8112b1bc:	e0bffa15 	stw	r2,-24(fp)
8112b1c0:	e0bffe17 	ldw	r2,-8(fp)
8112b1c4:	1080020b 	ldhu	r2,8(r2)
8112b1c8:	e0bffb0d 	sth	r2,-20(fp)
8112b1cc:	e0bffa17 	ldw	r2,-24(fp)
8112b1d0:	e0bffd15 	stw	r2,-12(fp)
8112b1d4:	e0bffd17 	ldw	r2,-12(fp)
8112b1d8:	1001703a 	wrctl	status,r2
8112b1dc:	e0bfff17 	ldw	r2,-4(fp)
8112b1e0:	10000005 	stb	zero,0(r2)
8112b1e4:	e0bffb0b 	ldhu	r2,-20(fp)
8112b1e8:	e037883a 	mov	sp,fp
8112b1ec:	df000017 	ldw	fp,0(sp)
8112b1f0:	dec00104 	addi	sp,sp,4
8112b1f4:	f800283a 	ret

8112b1f8 <OS_FlagBlock>:
8112b1f8:	defff804 	addi	sp,sp,-32
8112b1fc:	de00012e 	bgeu	sp,et,8112b204 <OS_FlagBlock+0xc>
8112b200:	003b68fa 	trap	3
8112b204:	df000715 	stw	fp,28(sp)
8112b208:	df000704 	addi	fp,sp,28
8112b20c:	e13ffb15 	stw	r4,-20(fp)
8112b210:	e17ffc15 	stw	r5,-16(fp)
8112b214:	3009883a 	mov	r4,r6
8112b218:	3807883a 	mov	r3,r7
8112b21c:	e0800117 	ldw	r2,4(fp)
8112b220:	e13ffd0d 	sth	r4,-12(fp)
8112b224:	e0fffe05 	stb	r3,-8(fp)
8112b228:	e0bfff0d 	sth	r2,-4(fp)
8112b22c:	d0a08417 	ldw	r2,-32240(gp)
8112b230:	d0e08417 	ldw	r3,-32240(gp)
8112b234:	18c00c03 	ldbu	r3,48(r3)
8112b238:	18c00814 	ori	r3,r3,32
8112b23c:	10c00c05 	stb	r3,48(r2)
8112b240:	d0a08417 	ldw	r2,-32240(gp)
8112b244:	10000c45 	stb	zero,49(r2)
8112b248:	d0a08417 	ldw	r2,-32240(gp)
8112b24c:	e0ffff0b 	ldhu	r3,-4(fp)
8112b250:	10c00b8d 	sth	r3,46(r2)
8112b254:	d0a08417 	ldw	r2,-32240(gp)
8112b258:	e0fffc17 	ldw	r3,-16(fp)
8112b25c:	10c00a15 	stw	r3,40(r2)
8112b260:	e0bffc17 	ldw	r2,-16(fp)
8112b264:	e0fffd0b 	ldhu	r3,-12(fp)
8112b268:	10c0040d 	sth	r3,16(r2)
8112b26c:	e0bffc17 	ldw	r2,-16(fp)
8112b270:	e0fffe03 	ldbu	r3,-8(fp)
8112b274:	10c00485 	stb	r3,18(r2)
8112b278:	d0e08417 	ldw	r3,-32240(gp)
8112b27c:	e0bffc17 	ldw	r2,-16(fp)
8112b280:	10c00215 	stw	r3,8(r2)
8112b284:	e0bffb17 	ldw	r2,-20(fp)
8112b288:	10c00117 	ldw	r3,4(r2)
8112b28c:	e0bffc17 	ldw	r2,-16(fp)
8112b290:	10c00015 	stw	r3,0(r2)
8112b294:	e0bffc17 	ldw	r2,-16(fp)
8112b298:	10000115 	stw	zero,4(r2)
8112b29c:	e0bffc17 	ldw	r2,-16(fp)
8112b2a0:	e0fffb17 	ldw	r3,-20(fp)
8112b2a4:	10c00315 	stw	r3,12(r2)
8112b2a8:	e0bffb17 	ldw	r2,-20(fp)
8112b2ac:	10800117 	ldw	r2,4(r2)
8112b2b0:	e0bff915 	stw	r2,-28(fp)
8112b2b4:	e0bff917 	ldw	r2,-28(fp)
8112b2b8:	10000326 	beq	r2,zero,8112b2c8 <OS_FlagBlock+0xd0>
8112b2bc:	e0bff917 	ldw	r2,-28(fp)
8112b2c0:	e0fffc17 	ldw	r3,-16(fp)
8112b2c4:	10c00115 	stw	r3,4(r2)
8112b2c8:	e0bffb17 	ldw	r2,-20(fp)
8112b2cc:	e0fffc17 	ldw	r3,-16(fp)
8112b2d0:	10c00115 	stw	r3,4(r2)
8112b2d4:	d0a08417 	ldw	r2,-32240(gp)
8112b2d8:	10800d03 	ldbu	r2,52(r2)
8112b2dc:	e0bffa05 	stb	r2,-24(fp)
8112b2e0:	e0fffa03 	ldbu	r3,-24(fp)
8112b2e4:	e13ffa03 	ldbu	r4,-24(fp)
8112b2e8:	d0a08044 	addi	r2,gp,-32255
8112b2ec:	2085883a 	add	r2,r4,r2
8112b2f0:	10800003 	ldbu	r2,0(r2)
8112b2f4:	1009883a 	mov	r4,r2
8112b2f8:	d0a08417 	ldw	r2,-32240(gp)
8112b2fc:	10800d43 	ldbu	r2,53(r2)
8112b300:	0084303a 	nor	r2,zero,r2
8112b304:	2084703a 	and	r2,r4,r2
8112b308:	1009883a 	mov	r4,r2
8112b30c:	d0a08044 	addi	r2,gp,-32255
8112b310:	1885883a 	add	r2,r3,r2
8112b314:	11000005 	stb	r4,0(r2)
8112b318:	e0fffa03 	ldbu	r3,-24(fp)
8112b31c:	d0a08044 	addi	r2,gp,-32255
8112b320:	1885883a 	add	r2,r3,r2
8112b324:	10800003 	ldbu	r2,0(r2)
8112b328:	10803fcc 	andi	r2,r2,255
8112b32c:	1000071e 	bne	r2,zero,8112b34c <OS_FlagBlock+0x154>
8112b330:	d0a08417 	ldw	r2,-32240(gp)
8112b334:	10800d83 	ldbu	r2,54(r2)
8112b338:	0084303a 	nor	r2,zero,r2
8112b33c:	1007883a 	mov	r3,r2
8112b340:	d0a08003 	ldbu	r2,-32256(gp)
8112b344:	1884703a 	and	r2,r3,r2
8112b348:	d0a08005 	stb	r2,-32256(gp)
8112b34c:	0001883a 	nop
8112b350:	e037883a 	mov	sp,fp
8112b354:	df000017 	ldw	fp,0(sp)
8112b358:	dec00104 	addi	sp,sp,4
8112b35c:	f800283a 	ret

8112b360 <OS_FlagInit>:
8112b360:	defffb04 	addi	sp,sp,-20
8112b364:	de00012e 	bgeu	sp,et,8112b36c <OS_FlagInit+0xc>
8112b368:	003b68fa 	trap	3
8112b36c:	dfc00415 	stw	ra,16(sp)
8112b370:	df000315 	stw	fp,12(sp)
8112b374:	df000304 	addi	fp,sp,12
8112b378:	0140dc04 	movi	r5,880
8112b37c:	01204574 	movhi	r4,33045
8112b380:	213bed04 	addi	r4,r4,-4172
8112b384:	112948c0 	call	8112948c <OS_MemClr>
8112b388:	00a04574 	movhi	r2,33045
8112b38c:	10bbed04 	addi	r2,r2,-4172
8112b390:	e0bffe15 	stw	r2,-8(fp)
8112b394:	00a04574 	movhi	r2,33045
8112b398:	10bbf804 	addi	r2,r2,-4128
8112b39c:	e0bfff15 	stw	r2,-4(fp)
8112b3a0:	e03ffd0d 	sth	zero,-12(fp)
8112b3a4:	00001306 	br	8112b3f4 <OS_FlagInit+0x94>
8112b3a8:	e0bffe17 	ldw	r2,-8(fp)
8112b3ac:	10000005 	stb	zero,0(r2)
8112b3b0:	e0bffe17 	ldw	r2,-8(fp)
8112b3b4:	e0ffff17 	ldw	r3,-4(fp)
8112b3b8:	10c00115 	stw	r3,4(r2)
8112b3bc:	e0bffe17 	ldw	r2,-8(fp)
8112b3c0:	00c00fc4 	movi	r3,63
8112b3c4:	10c00285 	stb	r3,10(r2)
8112b3c8:	e0bffe17 	ldw	r2,-8(fp)
8112b3cc:	100002c5 	stb	zero,11(r2)
8112b3d0:	e0bffe17 	ldw	r2,-8(fp)
8112b3d4:	10800b04 	addi	r2,r2,44
8112b3d8:	e0bffe15 	stw	r2,-8(fp)
8112b3dc:	e0bfff17 	ldw	r2,-4(fp)
8112b3e0:	10800b04 	addi	r2,r2,44
8112b3e4:	e0bfff15 	stw	r2,-4(fp)
8112b3e8:	e0bffd0b 	ldhu	r2,-12(fp)
8112b3ec:	10800044 	addi	r2,r2,1
8112b3f0:	e0bffd0d 	sth	r2,-12(fp)
8112b3f4:	e0bffd0b 	ldhu	r2,-12(fp)
8112b3f8:	108004f0 	cmpltui	r2,r2,19
8112b3fc:	103fea1e 	bne	r2,zero,8112b3a8 <__reset+0xfb10b3a8>
8112b400:	e0bffe17 	ldw	r2,-8(fp)
8112b404:	10000005 	stb	zero,0(r2)
8112b408:	e0bffe17 	ldw	r2,-8(fp)
8112b40c:	10000115 	stw	zero,4(r2)
8112b410:	e0bffe17 	ldw	r2,-8(fp)
8112b414:	00c00fc4 	movi	r3,63
8112b418:	10c00285 	stb	r3,10(r2)
8112b41c:	e0bffe17 	ldw	r2,-8(fp)
8112b420:	100002c5 	stb	zero,11(r2)
8112b424:	00a04574 	movhi	r2,33045
8112b428:	10bbed04 	addi	r2,r2,-4172
8112b42c:	d0a08815 	stw	r2,-32224(gp)
8112b430:	0001883a 	nop
8112b434:	e037883a 	mov	sp,fp
8112b438:	dfc00117 	ldw	ra,4(sp)
8112b43c:	df000017 	ldw	fp,0(sp)
8112b440:	dec00204 	addi	sp,sp,8
8112b444:	f800283a 	ret

8112b448 <OS_FlagTaskRdy>:
8112b448:	defffa04 	addi	sp,sp,-24
8112b44c:	de00012e 	bgeu	sp,et,8112b454 <OS_FlagTaskRdy+0xc>
8112b450:	003b68fa 	trap	3
8112b454:	dfc00515 	stw	ra,20(sp)
8112b458:	df000415 	stw	fp,16(sp)
8112b45c:	df000404 	addi	fp,sp,16
8112b460:	e13ffe15 	stw	r4,-8(fp)
8112b464:	2805883a 	mov	r2,r5
8112b468:	e0bfff0d 	sth	r2,-4(fp)
8112b46c:	e0bffe17 	ldw	r2,-8(fp)
8112b470:	10800217 	ldw	r2,8(r2)
8112b474:	e0bffd15 	stw	r2,-12(fp)
8112b478:	e0bffd17 	ldw	r2,-12(fp)
8112b47c:	10000b8d 	sth	zero,46(r2)
8112b480:	e0bffd17 	ldw	r2,-12(fp)
8112b484:	e0ffff0b 	ldhu	r3,-4(fp)
8112b488:	10c00b0d 	sth	r3,44(r2)
8112b48c:	e0bffd17 	ldw	r2,-12(fp)
8112b490:	10c00c03 	ldbu	r3,48(r2)
8112b494:	00bff7c4 	movi	r2,-33
8112b498:	1884703a 	and	r2,r3,r2
8112b49c:	1007883a 	mov	r3,r2
8112b4a0:	e0bffd17 	ldw	r2,-12(fp)
8112b4a4:	10c00c05 	stb	r3,48(r2)
8112b4a8:	e0bffd17 	ldw	r2,-12(fp)
8112b4ac:	10000c45 	stb	zero,49(r2)
8112b4b0:	e0bffd17 	ldw	r2,-12(fp)
8112b4b4:	10800c03 	ldbu	r2,48(r2)
8112b4b8:	10803fcc 	andi	r2,r2,255
8112b4bc:	1000181e 	bne	r2,zero,8112b520 <OS_FlagTaskRdy+0xd8>
8112b4c0:	e0bffd17 	ldw	r2,-12(fp)
8112b4c4:	10c00d83 	ldbu	r3,54(r2)
8112b4c8:	d0a08003 	ldbu	r2,-32256(gp)
8112b4cc:	1884b03a 	or	r2,r3,r2
8112b4d0:	d0a08005 	stb	r2,-32256(gp)
8112b4d4:	e0bffd17 	ldw	r2,-12(fp)
8112b4d8:	10800d03 	ldbu	r2,52(r2)
8112b4dc:	10c03fcc 	andi	r3,r2,255
8112b4e0:	e0bffd17 	ldw	r2,-12(fp)
8112b4e4:	10800d03 	ldbu	r2,52(r2)
8112b4e8:	11003fcc 	andi	r4,r2,255
8112b4ec:	d0a08044 	addi	r2,gp,-32255
8112b4f0:	2085883a 	add	r2,r4,r2
8112b4f4:	11000003 	ldbu	r4,0(r2)
8112b4f8:	e0bffd17 	ldw	r2,-12(fp)
8112b4fc:	10800d43 	ldbu	r2,53(r2)
8112b500:	2084b03a 	or	r2,r4,r2
8112b504:	1009883a 	mov	r4,r2
8112b508:	d0a08044 	addi	r2,gp,-32255
8112b50c:	1885883a 	add	r2,r3,r2
8112b510:	11000005 	stb	r4,0(r2)
8112b514:	00800044 	movi	r2,1
8112b518:	e0bffc05 	stb	r2,-16(fp)
8112b51c:	00000106 	br	8112b524 <OS_FlagTaskRdy+0xdc>
8112b520:	e03ffc05 	stb	zero,-16(fp)
8112b524:	e13ffe17 	ldw	r4,-8(fp)
8112b528:	112b5440 	call	8112b544 <OS_FlagUnlink>
8112b52c:	e0bffc03 	ldbu	r2,-16(fp)
8112b530:	e037883a 	mov	sp,fp
8112b534:	dfc00117 	ldw	ra,4(sp)
8112b538:	df000017 	ldw	fp,0(sp)
8112b53c:	dec00204 	addi	sp,sp,8
8112b540:	f800283a 	ret

8112b544 <OS_FlagUnlink>:
8112b544:	defffa04 	addi	sp,sp,-24
8112b548:	de00012e 	bgeu	sp,et,8112b550 <OS_FlagUnlink+0xc>
8112b54c:	003b68fa 	trap	3
8112b550:	df000515 	stw	fp,20(sp)
8112b554:	df000504 	addi	fp,sp,20
8112b558:	e13fff15 	stw	r4,-4(fp)
8112b55c:	e0bfff17 	ldw	r2,-4(fp)
8112b560:	10800117 	ldw	r2,4(r2)
8112b564:	e0bffb15 	stw	r2,-20(fp)
8112b568:	e0bfff17 	ldw	r2,-4(fp)
8112b56c:	10800017 	ldw	r2,0(r2)
8112b570:	e0bffc15 	stw	r2,-16(fp)
8112b574:	e0bffb17 	ldw	r2,-20(fp)
8112b578:	10000b1e 	bne	r2,zero,8112b5a8 <OS_FlagUnlink+0x64>
8112b57c:	e0bfff17 	ldw	r2,-4(fp)
8112b580:	10800317 	ldw	r2,12(r2)
8112b584:	e0bffd15 	stw	r2,-12(fp)
8112b588:	e0bffd17 	ldw	r2,-12(fp)
8112b58c:	e0fffc17 	ldw	r3,-16(fp)
8112b590:	10c00115 	stw	r3,4(r2)
8112b594:	e0bffc17 	ldw	r2,-16(fp)
8112b598:	10000b26 	beq	r2,zero,8112b5c8 <OS_FlagUnlink+0x84>
8112b59c:	e0bffc17 	ldw	r2,-16(fp)
8112b5a0:	10000115 	stw	zero,4(r2)
8112b5a4:	00000806 	br	8112b5c8 <OS_FlagUnlink+0x84>
8112b5a8:	e0bffb17 	ldw	r2,-20(fp)
8112b5ac:	e0fffc17 	ldw	r3,-16(fp)
8112b5b0:	10c00015 	stw	r3,0(r2)
8112b5b4:	e0bffc17 	ldw	r2,-16(fp)
8112b5b8:	10000326 	beq	r2,zero,8112b5c8 <OS_FlagUnlink+0x84>
8112b5bc:	e0bffc17 	ldw	r2,-16(fp)
8112b5c0:	e0fffb17 	ldw	r3,-20(fp)
8112b5c4:	10c00115 	stw	r3,4(r2)
8112b5c8:	e0bfff17 	ldw	r2,-4(fp)
8112b5cc:	10800217 	ldw	r2,8(r2)
8112b5d0:	e0bffe15 	stw	r2,-8(fp)
8112b5d4:	e0bffe17 	ldw	r2,-8(fp)
8112b5d8:	10000a15 	stw	zero,40(r2)
8112b5dc:	0001883a 	nop
8112b5e0:	e037883a 	mov	sp,fp
8112b5e4:	df000017 	ldw	fp,0(sp)
8112b5e8:	dec00104 	addi	sp,sp,4
8112b5ec:	f800283a 	ret

8112b5f0 <OSMemCreate>:
8112b5f0:	defff404 	addi	sp,sp,-48
8112b5f4:	de00012e 	bgeu	sp,et,8112b5fc <OSMemCreate+0xc>
8112b5f8:	003b68fa 	trap	3
8112b5fc:	df000b15 	stw	fp,44(sp)
8112b600:	df000b04 	addi	fp,sp,44
8112b604:	e13ffc15 	stw	r4,-16(fp)
8112b608:	e17ffd15 	stw	r5,-12(fp)
8112b60c:	e1bffe15 	stw	r6,-8(fp)
8112b610:	e1ffff15 	stw	r7,-4(fp)
8112b614:	e03ff815 	stw	zero,-32(fp)
8112b618:	e0bfff17 	ldw	r2,-4(fp)
8112b61c:	1000021e 	bne	r2,zero,8112b628 <OSMemCreate+0x38>
8112b620:	0005883a 	mov	r2,zero
8112b624:	00006506 	br	8112b7bc <OSMemCreate+0x1cc>
8112b628:	e0bffc17 	ldw	r2,-16(fp)
8112b62c:	1000051e 	bne	r2,zero,8112b644 <OSMemCreate+0x54>
8112b630:	e0bfff17 	ldw	r2,-4(fp)
8112b634:	00c01884 	movi	r3,98
8112b638:	10c00005 	stb	r3,0(r2)
8112b63c:	0005883a 	mov	r2,zero
8112b640:	00005e06 	br	8112b7bc <OSMemCreate+0x1cc>
8112b644:	e0bffc17 	ldw	r2,-16(fp)
8112b648:	108000cc 	andi	r2,r2,3
8112b64c:	10000526 	beq	r2,zero,8112b664 <OSMemCreate+0x74>
8112b650:	e0bfff17 	ldw	r2,-4(fp)
8112b654:	00c01884 	movi	r3,98
8112b658:	10c00005 	stb	r3,0(r2)
8112b65c:	0005883a 	mov	r2,zero
8112b660:	00005606 	br	8112b7bc <OSMemCreate+0x1cc>
8112b664:	e0bffd17 	ldw	r2,-12(fp)
8112b668:	108000a8 	cmpgeui	r2,r2,2
8112b66c:	1000051e 	bne	r2,zero,8112b684 <OSMemCreate+0x94>
8112b670:	e0bfff17 	ldw	r2,-4(fp)
8112b674:	00c016c4 	movi	r3,91
8112b678:	10c00005 	stb	r3,0(r2)
8112b67c:	0005883a 	mov	r2,zero
8112b680:	00004e06 	br	8112b7bc <OSMemCreate+0x1cc>
8112b684:	e0bffe17 	ldw	r2,-8(fp)
8112b688:	10800128 	cmpgeui	r2,r2,4
8112b68c:	1000051e 	bne	r2,zero,8112b6a4 <OSMemCreate+0xb4>
8112b690:	e0bfff17 	ldw	r2,-4(fp)
8112b694:	00c01704 	movi	r3,92
8112b698:	10c00005 	stb	r3,0(r2)
8112b69c:	0005883a 	mov	r2,zero
8112b6a0:	00004606 	br	8112b7bc <OSMemCreate+0x1cc>
8112b6a4:	0005303a 	rdctl	r2,status
8112b6a8:	e0bffb15 	stw	r2,-20(fp)
8112b6ac:	e0fffb17 	ldw	r3,-20(fp)
8112b6b0:	00bfff84 	movi	r2,-2
8112b6b4:	1884703a 	and	r2,r3,r2
8112b6b8:	1001703a 	wrctl	status,r2
8112b6bc:	e0bffb17 	ldw	r2,-20(fp)
8112b6c0:	e0bff815 	stw	r2,-32(fp)
8112b6c4:	d0a07d17 	ldw	r2,-32268(gp)
8112b6c8:	e0bffa15 	stw	r2,-24(fp)
8112b6cc:	d0a07d17 	ldw	r2,-32268(gp)
8112b6d0:	10000326 	beq	r2,zero,8112b6e0 <OSMemCreate+0xf0>
8112b6d4:	d0a07d17 	ldw	r2,-32268(gp)
8112b6d8:	10800117 	ldw	r2,4(r2)
8112b6dc:	d0a07d15 	stw	r2,-32268(gp)
8112b6e0:	e0bff817 	ldw	r2,-32(fp)
8112b6e4:	e0bff915 	stw	r2,-28(fp)
8112b6e8:	e0bff917 	ldw	r2,-28(fp)
8112b6ec:	1001703a 	wrctl	status,r2
8112b6f0:	e0bffa17 	ldw	r2,-24(fp)
8112b6f4:	1000051e 	bne	r2,zero,8112b70c <OSMemCreate+0x11c>
8112b6f8:	e0bfff17 	ldw	r2,-4(fp)
8112b6fc:	00c01684 	movi	r3,90
8112b700:	10c00005 	stb	r3,0(r2)
8112b704:	0005883a 	mov	r2,zero
8112b708:	00002c06 	br	8112b7bc <OSMemCreate+0x1cc>
8112b70c:	e0bffc17 	ldw	r2,-16(fp)
8112b710:	e0bff615 	stw	r2,-40(fp)
8112b714:	e0fffc17 	ldw	r3,-16(fp)
8112b718:	e0bffe17 	ldw	r2,-8(fp)
8112b71c:	1885883a 	add	r2,r3,r2
8112b720:	e0bff515 	stw	r2,-44(fp)
8112b724:	e03ff715 	stw	zero,-36(fp)
8112b728:	00000c06 	br	8112b75c <OSMemCreate+0x16c>
8112b72c:	e0bff617 	ldw	r2,-40(fp)
8112b730:	e0fff517 	ldw	r3,-44(fp)
8112b734:	10c00015 	stw	r3,0(r2)
8112b738:	e0bff517 	ldw	r2,-44(fp)
8112b73c:	e0bff615 	stw	r2,-40(fp)
8112b740:	e0fff517 	ldw	r3,-44(fp)
8112b744:	e0bffe17 	ldw	r2,-8(fp)
8112b748:	1885883a 	add	r2,r3,r2
8112b74c:	e0bff515 	stw	r2,-44(fp)
8112b750:	e0bff717 	ldw	r2,-36(fp)
8112b754:	10800044 	addi	r2,r2,1
8112b758:	e0bff715 	stw	r2,-36(fp)
8112b75c:	e0bffd17 	ldw	r2,-12(fp)
8112b760:	10bfffc4 	addi	r2,r2,-1
8112b764:	e0fff717 	ldw	r3,-36(fp)
8112b768:	18bff036 	bltu	r3,r2,8112b72c <__reset+0xfb10b72c>
8112b76c:	e0bff617 	ldw	r2,-40(fp)
8112b770:	10000015 	stw	zero,0(r2)
8112b774:	e0bffa17 	ldw	r2,-24(fp)
8112b778:	e0fffc17 	ldw	r3,-16(fp)
8112b77c:	10c00015 	stw	r3,0(r2)
8112b780:	e0bffa17 	ldw	r2,-24(fp)
8112b784:	e0fffc17 	ldw	r3,-16(fp)
8112b788:	10c00115 	stw	r3,4(r2)
8112b78c:	e0bffa17 	ldw	r2,-24(fp)
8112b790:	e0fffd17 	ldw	r3,-12(fp)
8112b794:	10c00415 	stw	r3,16(r2)
8112b798:	e0bffa17 	ldw	r2,-24(fp)
8112b79c:	e0fffd17 	ldw	r3,-12(fp)
8112b7a0:	10c00315 	stw	r3,12(r2)
8112b7a4:	e0bffa17 	ldw	r2,-24(fp)
8112b7a8:	e0fffe17 	ldw	r3,-8(fp)
8112b7ac:	10c00215 	stw	r3,8(r2)
8112b7b0:	e0bfff17 	ldw	r2,-4(fp)
8112b7b4:	10000005 	stb	zero,0(r2)
8112b7b8:	e0bffa17 	ldw	r2,-24(fp)
8112b7bc:	e037883a 	mov	sp,fp
8112b7c0:	df000017 	ldw	fp,0(sp)
8112b7c4:	dec00104 	addi	sp,sp,4
8112b7c8:	f800283a 	ret

8112b7cc <OSMemGet>:
8112b7cc:	defff804 	addi	sp,sp,-32
8112b7d0:	de00012e 	bgeu	sp,et,8112b7d8 <OSMemGet+0xc>
8112b7d4:	003b68fa 	trap	3
8112b7d8:	df000715 	stw	fp,28(sp)
8112b7dc:	df000704 	addi	fp,sp,28
8112b7e0:	e13ffe15 	stw	r4,-8(fp)
8112b7e4:	e17fff15 	stw	r5,-4(fp)
8112b7e8:	e03ff915 	stw	zero,-28(fp)
8112b7ec:	e0bfff17 	ldw	r2,-4(fp)
8112b7f0:	1000021e 	bne	r2,zero,8112b7fc <OSMemGet+0x30>
8112b7f4:	0005883a 	mov	r2,zero
8112b7f8:	00002e06 	br	8112b8b4 <OSMemGet+0xe8>
8112b7fc:	e0bffe17 	ldw	r2,-8(fp)
8112b800:	1000051e 	bne	r2,zero,8112b818 <OSMemGet+0x4c>
8112b804:	e0bfff17 	ldw	r2,-4(fp)
8112b808:	00c01804 	movi	r3,96
8112b80c:	10c00005 	stb	r3,0(r2)
8112b810:	0005883a 	mov	r2,zero
8112b814:	00002706 	br	8112b8b4 <OSMemGet+0xe8>
8112b818:	0005303a 	rdctl	r2,status
8112b81c:	e0bffd15 	stw	r2,-12(fp)
8112b820:	e0fffd17 	ldw	r3,-12(fp)
8112b824:	00bfff84 	movi	r2,-2
8112b828:	1884703a 	and	r2,r3,r2
8112b82c:	1001703a 	wrctl	status,r2
8112b830:	e0bffd17 	ldw	r2,-12(fp)
8112b834:	e0bff915 	stw	r2,-28(fp)
8112b838:	e0bffe17 	ldw	r2,-8(fp)
8112b83c:	10800417 	ldw	r2,16(r2)
8112b840:	10001426 	beq	r2,zero,8112b894 <OSMemGet+0xc8>
8112b844:	e0bffe17 	ldw	r2,-8(fp)
8112b848:	10800117 	ldw	r2,4(r2)
8112b84c:	e0bffb15 	stw	r2,-20(fp)
8112b850:	e0bffb17 	ldw	r2,-20(fp)
8112b854:	10c00017 	ldw	r3,0(r2)
8112b858:	e0bffe17 	ldw	r2,-8(fp)
8112b85c:	10c00115 	stw	r3,4(r2)
8112b860:	e0bffe17 	ldw	r2,-8(fp)
8112b864:	10800417 	ldw	r2,16(r2)
8112b868:	10ffffc4 	addi	r3,r2,-1
8112b86c:	e0bffe17 	ldw	r2,-8(fp)
8112b870:	10c00415 	stw	r3,16(r2)
8112b874:	e0bff917 	ldw	r2,-28(fp)
8112b878:	e0bffa15 	stw	r2,-24(fp)
8112b87c:	e0bffa17 	ldw	r2,-24(fp)
8112b880:	1001703a 	wrctl	status,r2
8112b884:	e0bfff17 	ldw	r2,-4(fp)
8112b888:	10000005 	stb	zero,0(r2)
8112b88c:	e0bffb17 	ldw	r2,-20(fp)
8112b890:	00000806 	br	8112b8b4 <OSMemGet+0xe8>
8112b894:	e0bff917 	ldw	r2,-28(fp)
8112b898:	e0bffc15 	stw	r2,-16(fp)
8112b89c:	e0bffc17 	ldw	r2,-16(fp)
8112b8a0:	1001703a 	wrctl	status,r2
8112b8a4:	e0bfff17 	ldw	r2,-4(fp)
8112b8a8:	00c01744 	movi	r3,93
8112b8ac:	10c00005 	stb	r3,0(r2)
8112b8b0:	0005883a 	mov	r2,zero
8112b8b4:	e037883a 	mov	sp,fp
8112b8b8:	df000017 	ldw	fp,0(sp)
8112b8bc:	dec00104 	addi	sp,sp,4
8112b8c0:	f800283a 	ret

8112b8c4 <OSMemNameGet>:
8112b8c4:	defff704 	addi	sp,sp,-36
8112b8c8:	de00012e 	bgeu	sp,et,8112b8d0 <OSMemNameGet+0xc>
8112b8cc:	003b68fa 	trap	3
8112b8d0:	dfc00815 	stw	ra,32(sp)
8112b8d4:	df000715 	stw	fp,28(sp)
8112b8d8:	df000704 	addi	fp,sp,28
8112b8dc:	e13ffd15 	stw	r4,-12(fp)
8112b8e0:	e17ffe15 	stw	r5,-8(fp)
8112b8e4:	e1bfff15 	stw	r6,-4(fp)
8112b8e8:	e03ff915 	stw	zero,-28(fp)
8112b8ec:	e0bfff17 	ldw	r2,-4(fp)
8112b8f0:	1000021e 	bne	r2,zero,8112b8fc <OSMemNameGet+0x38>
8112b8f4:	0005883a 	mov	r2,zero
8112b8f8:	00002b06 	br	8112b9a8 <OSMemNameGet+0xe4>
8112b8fc:	e0bffd17 	ldw	r2,-12(fp)
8112b900:	1000051e 	bne	r2,zero,8112b918 <OSMemNameGet+0x54>
8112b904:	e0bfff17 	ldw	r2,-4(fp)
8112b908:	00c01804 	movi	r3,96
8112b90c:	10c00005 	stb	r3,0(r2)
8112b910:	0005883a 	mov	r2,zero
8112b914:	00002406 	br	8112b9a8 <OSMemNameGet+0xe4>
8112b918:	e0bffe17 	ldw	r2,-8(fp)
8112b91c:	1000051e 	bne	r2,zero,8112b934 <OSMemNameGet+0x70>
8112b920:	e0bfff17 	ldw	r2,-4(fp)
8112b924:	00c00304 	movi	r3,12
8112b928:	10c00005 	stb	r3,0(r2)
8112b92c:	0005883a 	mov	r2,zero
8112b930:	00001d06 	br	8112b9a8 <OSMemNameGet+0xe4>
8112b934:	d0a08303 	ldbu	r2,-32244(gp)
8112b938:	10803fcc 	andi	r2,r2,255
8112b93c:	10000526 	beq	r2,zero,8112b954 <OSMemNameGet+0x90>
8112b940:	e0bfff17 	ldw	r2,-4(fp)
8112b944:	00c00444 	movi	r3,17
8112b948:	10c00005 	stb	r3,0(r2)
8112b94c:	0005883a 	mov	r2,zero
8112b950:	00001506 	br	8112b9a8 <OSMemNameGet+0xe4>
8112b954:	0005303a 	rdctl	r2,status
8112b958:	e0bffb15 	stw	r2,-20(fp)
8112b95c:	e0fffb17 	ldw	r3,-20(fp)
8112b960:	00bfff84 	movi	r2,-2
8112b964:	1884703a 	and	r2,r3,r2
8112b968:	1001703a 	wrctl	status,r2
8112b96c:	e0bffb17 	ldw	r2,-20(fp)
8112b970:	e0bff915 	stw	r2,-28(fp)
8112b974:	e0bffd17 	ldw	r2,-12(fp)
8112b978:	10800504 	addi	r2,r2,20
8112b97c:	100b883a 	mov	r5,r2
8112b980:	e13ffe17 	ldw	r4,-8(fp)
8112b984:	11296ac0 	call	811296ac <OS_StrCopy>
8112b988:	e0bffa05 	stb	r2,-24(fp)
8112b98c:	e0bff917 	ldw	r2,-28(fp)
8112b990:	e0bffc15 	stw	r2,-16(fp)
8112b994:	e0bffc17 	ldw	r2,-16(fp)
8112b998:	1001703a 	wrctl	status,r2
8112b99c:	e0bfff17 	ldw	r2,-4(fp)
8112b9a0:	10000005 	stb	zero,0(r2)
8112b9a4:	e0bffa03 	ldbu	r2,-24(fp)
8112b9a8:	e037883a 	mov	sp,fp
8112b9ac:	dfc00117 	ldw	ra,4(sp)
8112b9b0:	df000017 	ldw	fp,0(sp)
8112b9b4:	dec00204 	addi	sp,sp,8
8112b9b8:	f800283a 	ret

8112b9bc <OSMemNameSet>:
8112b9bc:	defff604 	addi	sp,sp,-40
8112b9c0:	de00012e 	bgeu	sp,et,8112b9c8 <OSMemNameSet+0xc>
8112b9c4:	003b68fa 	trap	3
8112b9c8:	dfc00915 	stw	ra,36(sp)
8112b9cc:	df000815 	stw	fp,32(sp)
8112b9d0:	df000804 	addi	fp,sp,32
8112b9d4:	e13ffd15 	stw	r4,-12(fp)
8112b9d8:	e17ffe15 	stw	r5,-8(fp)
8112b9dc:	e1bfff15 	stw	r6,-4(fp)
8112b9e0:	e03ff815 	stw	zero,-32(fp)
8112b9e4:	e0bfff17 	ldw	r2,-4(fp)
8112b9e8:	10003526 	beq	r2,zero,8112bac0 <OSMemNameSet+0x104>
8112b9ec:	e0bffd17 	ldw	r2,-12(fp)
8112b9f0:	1000041e 	bne	r2,zero,8112ba04 <OSMemNameSet+0x48>
8112b9f4:	e0bfff17 	ldw	r2,-4(fp)
8112b9f8:	00c01804 	movi	r3,96
8112b9fc:	10c00005 	stb	r3,0(r2)
8112ba00:	00003006 	br	8112bac4 <OSMemNameSet+0x108>
8112ba04:	e0bffe17 	ldw	r2,-8(fp)
8112ba08:	1000041e 	bne	r2,zero,8112ba1c <OSMemNameSet+0x60>
8112ba0c:	e0bfff17 	ldw	r2,-4(fp)
8112ba10:	00c00304 	movi	r3,12
8112ba14:	10c00005 	stb	r3,0(r2)
8112ba18:	00002a06 	br	8112bac4 <OSMemNameSet+0x108>
8112ba1c:	d0a08303 	ldbu	r2,-32244(gp)
8112ba20:	10803fcc 	andi	r2,r2,255
8112ba24:	10000426 	beq	r2,zero,8112ba38 <OSMemNameSet+0x7c>
8112ba28:	e0bfff17 	ldw	r2,-4(fp)
8112ba2c:	00c00484 	movi	r3,18
8112ba30:	10c00005 	stb	r3,0(r2)
8112ba34:	00002306 	br	8112bac4 <OSMemNameSet+0x108>
8112ba38:	0005303a 	rdctl	r2,status
8112ba3c:	e0bffc15 	stw	r2,-16(fp)
8112ba40:	e0fffc17 	ldw	r3,-16(fp)
8112ba44:	00bfff84 	movi	r2,-2
8112ba48:	1884703a 	and	r2,r3,r2
8112ba4c:	1001703a 	wrctl	status,r2
8112ba50:	e0bffc17 	ldw	r2,-16(fp)
8112ba54:	e0bff815 	stw	r2,-32(fp)
8112ba58:	e13ffe17 	ldw	r4,-8(fp)
8112ba5c:	11297280 	call	81129728 <OS_StrLen>
8112ba60:	e0bffa05 	stb	r2,-24(fp)
8112ba64:	e0bffa03 	ldbu	r2,-24(fp)
8112ba68:	10800830 	cmpltui	r2,r2,32
8112ba6c:	1000081e 	bne	r2,zero,8112ba90 <OSMemNameSet+0xd4>
8112ba70:	e0bff817 	ldw	r2,-32(fp)
8112ba74:	e0bff915 	stw	r2,-28(fp)
8112ba78:	e0bff917 	ldw	r2,-28(fp)
8112ba7c:	1001703a 	wrctl	status,r2
8112ba80:	e0bfff17 	ldw	r2,-4(fp)
8112ba84:	00c018c4 	movi	r3,99
8112ba88:	10c00005 	stb	r3,0(r2)
8112ba8c:	00000d06 	br	8112bac4 <OSMemNameSet+0x108>
8112ba90:	e0bffd17 	ldw	r2,-12(fp)
8112ba94:	10800504 	addi	r2,r2,20
8112ba98:	e17ffe17 	ldw	r5,-8(fp)
8112ba9c:	1009883a 	mov	r4,r2
8112baa0:	11296ac0 	call	811296ac <OS_StrCopy>
8112baa4:	e0bff817 	ldw	r2,-32(fp)
8112baa8:	e0bffb15 	stw	r2,-20(fp)
8112baac:	e0bffb17 	ldw	r2,-20(fp)
8112bab0:	1001703a 	wrctl	status,r2
8112bab4:	e0bfff17 	ldw	r2,-4(fp)
8112bab8:	10000005 	stb	zero,0(r2)
8112babc:	00000106 	br	8112bac4 <OSMemNameSet+0x108>
8112bac0:	0001883a 	nop
8112bac4:	e037883a 	mov	sp,fp
8112bac8:	dfc00117 	ldw	ra,4(sp)
8112bacc:	df000017 	ldw	fp,0(sp)
8112bad0:	dec00204 	addi	sp,sp,8
8112bad4:	f800283a 	ret

8112bad8 <OSMemPut>:
8112bad8:	defff904 	addi	sp,sp,-28
8112badc:	de00012e 	bgeu	sp,et,8112bae4 <OSMemPut+0xc>
8112bae0:	003b68fa 	trap	3
8112bae4:	df000615 	stw	fp,24(sp)
8112bae8:	df000604 	addi	fp,sp,24
8112baec:	e13ffe15 	stw	r4,-8(fp)
8112baf0:	e17fff15 	stw	r5,-4(fp)
8112baf4:	e03ffa15 	stw	zero,-24(fp)
8112baf8:	e0bffe17 	ldw	r2,-8(fp)
8112bafc:	1000021e 	bne	r2,zero,8112bb08 <OSMemPut+0x30>
8112bb00:	00801804 	movi	r2,96
8112bb04:	00002806 	br	8112bba8 <OSMemPut+0xd0>
8112bb08:	e0bfff17 	ldw	r2,-4(fp)
8112bb0c:	1000021e 	bne	r2,zero,8112bb18 <OSMemPut+0x40>
8112bb10:	008017c4 	movi	r2,95
8112bb14:	00002406 	br	8112bba8 <OSMemPut+0xd0>
8112bb18:	0005303a 	rdctl	r2,status
8112bb1c:	e0bffd15 	stw	r2,-12(fp)
8112bb20:	e0fffd17 	ldw	r3,-12(fp)
8112bb24:	00bfff84 	movi	r2,-2
8112bb28:	1884703a 	and	r2,r3,r2
8112bb2c:	1001703a 	wrctl	status,r2
8112bb30:	e0bffd17 	ldw	r2,-12(fp)
8112bb34:	e0bffa15 	stw	r2,-24(fp)
8112bb38:	e0bffe17 	ldw	r2,-8(fp)
8112bb3c:	10c00417 	ldw	r3,16(r2)
8112bb40:	e0bffe17 	ldw	r2,-8(fp)
8112bb44:	10800317 	ldw	r2,12(r2)
8112bb48:	18800636 	bltu	r3,r2,8112bb64 <OSMemPut+0x8c>
8112bb4c:	e0bffa17 	ldw	r2,-24(fp)
8112bb50:	e0bffb15 	stw	r2,-20(fp)
8112bb54:	e0bffb17 	ldw	r2,-20(fp)
8112bb58:	1001703a 	wrctl	status,r2
8112bb5c:	00801784 	movi	r2,94
8112bb60:	00001106 	br	8112bba8 <OSMemPut+0xd0>
8112bb64:	e0bffe17 	ldw	r2,-8(fp)
8112bb68:	10c00117 	ldw	r3,4(r2)
8112bb6c:	e0bfff17 	ldw	r2,-4(fp)
8112bb70:	10c00015 	stw	r3,0(r2)
8112bb74:	e0bffe17 	ldw	r2,-8(fp)
8112bb78:	e0ffff17 	ldw	r3,-4(fp)
8112bb7c:	10c00115 	stw	r3,4(r2)
8112bb80:	e0bffe17 	ldw	r2,-8(fp)
8112bb84:	10800417 	ldw	r2,16(r2)
8112bb88:	10c00044 	addi	r3,r2,1
8112bb8c:	e0bffe17 	ldw	r2,-8(fp)
8112bb90:	10c00415 	stw	r3,16(r2)
8112bb94:	e0bffa17 	ldw	r2,-24(fp)
8112bb98:	e0bffc15 	stw	r2,-16(fp)
8112bb9c:	e0bffc17 	ldw	r2,-16(fp)
8112bba0:	1001703a 	wrctl	status,r2
8112bba4:	0005883a 	mov	r2,zero
8112bba8:	e037883a 	mov	sp,fp
8112bbac:	df000017 	ldw	fp,0(sp)
8112bbb0:	dec00104 	addi	sp,sp,4
8112bbb4:	f800283a 	ret

8112bbb8 <OSMemQuery>:
8112bbb8:	defffa04 	addi	sp,sp,-24
8112bbbc:	de00012e 	bgeu	sp,et,8112bbc4 <OSMemQuery+0xc>
8112bbc0:	003b68fa 	trap	3
8112bbc4:	df000515 	stw	fp,20(sp)
8112bbc8:	df000504 	addi	fp,sp,20
8112bbcc:	e13ffe15 	stw	r4,-8(fp)
8112bbd0:	e17fff15 	stw	r5,-4(fp)
8112bbd4:	e03ffb15 	stw	zero,-20(fp)
8112bbd8:	e0bffe17 	ldw	r2,-8(fp)
8112bbdc:	1000021e 	bne	r2,zero,8112bbe8 <OSMemQuery+0x30>
8112bbe0:	00801804 	movi	r2,96
8112bbe4:	00002c06 	br	8112bc98 <OSMemQuery+0xe0>
8112bbe8:	e0bfff17 	ldw	r2,-4(fp)
8112bbec:	1000021e 	bne	r2,zero,8112bbf8 <OSMemQuery+0x40>
8112bbf0:	00801844 	movi	r2,97
8112bbf4:	00002806 	br	8112bc98 <OSMemQuery+0xe0>
8112bbf8:	0005303a 	rdctl	r2,status
8112bbfc:	e0bffc15 	stw	r2,-16(fp)
8112bc00:	e0fffc17 	ldw	r3,-16(fp)
8112bc04:	00bfff84 	movi	r2,-2
8112bc08:	1884703a 	and	r2,r3,r2
8112bc0c:	1001703a 	wrctl	status,r2
8112bc10:	e0bffc17 	ldw	r2,-16(fp)
8112bc14:	e0bffb15 	stw	r2,-20(fp)
8112bc18:	e0bffe17 	ldw	r2,-8(fp)
8112bc1c:	10c00017 	ldw	r3,0(r2)
8112bc20:	e0bfff17 	ldw	r2,-4(fp)
8112bc24:	10c00015 	stw	r3,0(r2)
8112bc28:	e0bffe17 	ldw	r2,-8(fp)
8112bc2c:	10c00117 	ldw	r3,4(r2)
8112bc30:	e0bfff17 	ldw	r2,-4(fp)
8112bc34:	10c00115 	stw	r3,4(r2)
8112bc38:	e0bffe17 	ldw	r2,-8(fp)
8112bc3c:	10c00217 	ldw	r3,8(r2)
8112bc40:	e0bfff17 	ldw	r2,-4(fp)
8112bc44:	10c00215 	stw	r3,8(r2)
8112bc48:	e0bffe17 	ldw	r2,-8(fp)
8112bc4c:	10c00317 	ldw	r3,12(r2)
8112bc50:	e0bfff17 	ldw	r2,-4(fp)
8112bc54:	10c00315 	stw	r3,12(r2)
8112bc58:	e0bffe17 	ldw	r2,-8(fp)
8112bc5c:	10c00417 	ldw	r3,16(r2)
8112bc60:	e0bfff17 	ldw	r2,-4(fp)
8112bc64:	10c00415 	stw	r3,16(r2)
8112bc68:	e0bffb17 	ldw	r2,-20(fp)
8112bc6c:	e0bffd15 	stw	r2,-12(fp)
8112bc70:	e0bffd17 	ldw	r2,-12(fp)
8112bc74:	1001703a 	wrctl	status,r2
8112bc78:	e0bfff17 	ldw	r2,-4(fp)
8112bc7c:	10c00317 	ldw	r3,12(r2)
8112bc80:	e0bfff17 	ldw	r2,-4(fp)
8112bc84:	10800417 	ldw	r2,16(r2)
8112bc88:	1887c83a 	sub	r3,r3,r2
8112bc8c:	e0bfff17 	ldw	r2,-4(fp)
8112bc90:	10c00515 	stw	r3,20(r2)
8112bc94:	0005883a 	mov	r2,zero
8112bc98:	e037883a 	mov	sp,fp
8112bc9c:	df000017 	ldw	fp,0(sp)
8112bca0:	dec00104 	addi	sp,sp,4
8112bca4:	f800283a 	ret

8112bca8 <OS_MemInit>:
8112bca8:	defffc04 	addi	sp,sp,-16
8112bcac:	de00012e 	bgeu	sp,et,8112bcb4 <OS_MemInit+0xc>
8112bcb0:	003b68fa 	trap	3
8112bcb4:	dfc00315 	stw	ra,12(sp)
8112bcb8:	df000215 	stw	fp,8(sp)
8112bcbc:	df000204 	addi	fp,sp,8
8112bcc0:	01430c04 	movi	r5,3120
8112bcc4:	01204574 	movhi	r4,33045
8112bcc8:	213d3104 	addi	r4,r4,-2876
8112bccc:	112948c0 	call	8112948c <OS_MemClr>
8112bcd0:	00a04574 	movhi	r2,33045
8112bcd4:	10bd3104 	addi	r2,r2,-2876
8112bcd8:	e0bffe15 	stw	r2,-8(fp)
8112bcdc:	e03fff0d 	sth	zero,-4(fp)
8112bce0:	00001306 	br	8112bd30 <OS_MemInit+0x88>
8112bce4:	e0bfff0b 	ldhu	r2,-4(fp)
8112bce8:	10800044 	addi	r2,r2,1
8112bcec:	10c00d24 	muli	r3,r2,52
8112bcf0:	00a04574 	movhi	r2,33045
8112bcf4:	10bd3104 	addi	r2,r2,-2876
8112bcf8:	1887883a 	add	r3,r3,r2
8112bcfc:	e0bffe17 	ldw	r2,-8(fp)
8112bd00:	10c00115 	stw	r3,4(r2)
8112bd04:	e0bffe17 	ldw	r2,-8(fp)
8112bd08:	00c00fc4 	movi	r3,63
8112bd0c:	10c00505 	stb	r3,20(r2)
8112bd10:	e0bffe17 	ldw	r2,-8(fp)
8112bd14:	10000545 	stb	zero,21(r2)
8112bd18:	e0bffe17 	ldw	r2,-8(fp)
8112bd1c:	10800d04 	addi	r2,r2,52
8112bd20:	e0bffe15 	stw	r2,-8(fp)
8112bd24:	e0bfff0b 	ldhu	r2,-4(fp)
8112bd28:	10800044 	addi	r2,r2,1
8112bd2c:	e0bfff0d 	sth	r2,-4(fp)
8112bd30:	e0bfff0b 	ldhu	r2,-4(fp)
8112bd34:	10800ef0 	cmpltui	r2,r2,59
8112bd38:	103fea1e 	bne	r2,zero,8112bce4 <__reset+0xfb10bce4>
8112bd3c:	e0bffe17 	ldw	r2,-8(fp)
8112bd40:	10000115 	stw	zero,4(r2)
8112bd44:	e0bffe17 	ldw	r2,-8(fp)
8112bd48:	00c00fc4 	movi	r3,63
8112bd4c:	10c00505 	stb	r3,20(r2)
8112bd50:	e0bffe17 	ldw	r2,-8(fp)
8112bd54:	10000545 	stb	zero,21(r2)
8112bd58:	00a04574 	movhi	r2,33045
8112bd5c:	10bd3104 	addi	r2,r2,-2876
8112bd60:	d0a07d15 	stw	r2,-32268(gp)
8112bd64:	0001883a 	nop
8112bd68:	e037883a 	mov	sp,fp
8112bd6c:	dfc00117 	ldw	ra,4(sp)
8112bd70:	df000017 	ldw	fp,0(sp)
8112bd74:	dec00204 	addi	sp,sp,8
8112bd78:	f800283a 	ret

8112bd7c <OSMutexAccept>:
8112bd7c:	defff704 	addi	sp,sp,-36
8112bd80:	de00012e 	bgeu	sp,et,8112bd88 <OSMutexAccept+0xc>
8112bd84:	003b68fa 	trap	3
8112bd88:	df000815 	stw	fp,32(sp)
8112bd8c:	df000804 	addi	fp,sp,32
8112bd90:	e13ffe15 	stw	r4,-8(fp)
8112bd94:	e17fff15 	stw	r5,-4(fp)
8112bd98:	e03ff815 	stw	zero,-32(fp)
8112bd9c:	e0bfff17 	ldw	r2,-4(fp)
8112bda0:	1000021e 	bne	r2,zero,8112bdac <OSMutexAccept+0x30>
8112bda4:	0005883a 	mov	r2,zero
8112bda8:	00005b06 	br	8112bf18 <OSMutexAccept+0x19c>
8112bdac:	e0bffe17 	ldw	r2,-8(fp)
8112bdb0:	1000051e 	bne	r2,zero,8112bdc8 <OSMutexAccept+0x4c>
8112bdb4:	e0bfff17 	ldw	r2,-4(fp)
8112bdb8:	00c00104 	movi	r3,4
8112bdbc:	10c00005 	stb	r3,0(r2)
8112bdc0:	0005883a 	mov	r2,zero
8112bdc4:	00005406 	br	8112bf18 <OSMutexAccept+0x19c>
8112bdc8:	e0bffe17 	ldw	r2,-8(fp)
8112bdcc:	10800003 	ldbu	r2,0(r2)
8112bdd0:	10803fcc 	andi	r2,r2,255
8112bdd4:	10800120 	cmpeqi	r2,r2,4
8112bdd8:	1000051e 	bne	r2,zero,8112bdf0 <OSMutexAccept+0x74>
8112bddc:	e0bfff17 	ldw	r2,-4(fp)
8112bde0:	00c00044 	movi	r3,1
8112bde4:	10c00005 	stb	r3,0(r2)
8112bde8:	0005883a 	mov	r2,zero
8112bdec:	00004a06 	br	8112bf18 <OSMutexAccept+0x19c>
8112bdf0:	d0a08303 	ldbu	r2,-32244(gp)
8112bdf4:	10803fcc 	andi	r2,r2,255
8112bdf8:	10000526 	beq	r2,zero,8112be10 <OSMutexAccept+0x94>
8112bdfc:	e0bfff17 	ldw	r2,-4(fp)
8112be00:	00c00084 	movi	r3,2
8112be04:	10c00005 	stb	r3,0(r2)
8112be08:	0005883a 	mov	r2,zero
8112be0c:	00004206 	br	8112bf18 <OSMutexAccept+0x19c>
8112be10:	0005303a 	rdctl	r2,status
8112be14:	e0bffd15 	stw	r2,-12(fp)
8112be18:	e0fffd17 	ldw	r3,-12(fp)
8112be1c:	00bfff84 	movi	r2,-2
8112be20:	1884703a 	and	r2,r3,r2
8112be24:	1001703a 	wrctl	status,r2
8112be28:	e0bffd17 	ldw	r2,-12(fp)
8112be2c:	e0bff815 	stw	r2,-32(fp)
8112be30:	e0bffe17 	ldw	r2,-8(fp)
8112be34:	1080020b 	ldhu	r2,8(r2)
8112be38:	10bfffcc 	andi	r2,r2,65535
8112be3c:	1004d23a 	srli	r2,r2,8
8112be40:	e0bffa05 	stb	r2,-24(fp)
8112be44:	e0bffe17 	ldw	r2,-8(fp)
8112be48:	1080020b 	ldhu	r2,8(r2)
8112be4c:	10bfffcc 	andi	r2,r2,65535
8112be50:	10803fcc 	andi	r2,r2,255
8112be54:	10803fd8 	cmpnei	r2,r2,255
8112be58:	1000281e 	bne	r2,zero,8112befc <OSMutexAccept+0x180>
8112be5c:	e0bffe17 	ldw	r2,-8(fp)
8112be60:	10c0020b 	ldhu	r3,8(r2)
8112be64:	00bfc004 	movi	r2,-256
8112be68:	1884703a 	and	r2,r3,r2
8112be6c:	1007883a 	mov	r3,r2
8112be70:	e0bffe17 	ldw	r2,-8(fp)
8112be74:	10c0020d 	sth	r3,8(r2)
8112be78:	e0bffe17 	ldw	r2,-8(fp)
8112be7c:	10c0020b 	ldhu	r3,8(r2)
8112be80:	d0a08417 	ldw	r2,-32240(gp)
8112be84:	10800c83 	ldbu	r2,50(r2)
8112be88:	10803fcc 	andi	r2,r2,255
8112be8c:	1884b03a 	or	r2,r3,r2
8112be90:	1007883a 	mov	r3,r2
8112be94:	e0bffe17 	ldw	r2,-8(fp)
8112be98:	10c0020d 	sth	r3,8(r2)
8112be9c:	d0e08417 	ldw	r3,-32240(gp)
8112bea0:	e0bffe17 	ldw	r2,-8(fp)
8112bea4:	10c00115 	stw	r3,4(r2)
8112bea8:	d0a08417 	ldw	r2,-32240(gp)
8112beac:	10800c83 	ldbu	r2,50(r2)
8112beb0:	10803fcc 	andi	r2,r2,255
8112beb4:	e0fffa03 	ldbu	r3,-24(fp)
8112beb8:	18800836 	bltu	r3,r2,8112bedc <OSMutexAccept+0x160>
8112bebc:	e0bff817 	ldw	r2,-32(fp)
8112bec0:	e0bff915 	stw	r2,-28(fp)
8112bec4:	e0bff917 	ldw	r2,-28(fp)
8112bec8:	1001703a 	wrctl	status,r2
8112becc:	e0bfff17 	ldw	r2,-4(fp)
8112bed0:	00c01e04 	movi	r3,120
8112bed4:	10c00005 	stb	r3,0(r2)
8112bed8:	00000606 	br	8112bef4 <OSMutexAccept+0x178>
8112bedc:	e0bff817 	ldw	r2,-32(fp)
8112bee0:	e0bffb15 	stw	r2,-20(fp)
8112bee4:	e0bffb17 	ldw	r2,-20(fp)
8112bee8:	1001703a 	wrctl	status,r2
8112beec:	e0bfff17 	ldw	r2,-4(fp)
8112bef0:	10000005 	stb	zero,0(r2)
8112bef4:	00800044 	movi	r2,1
8112bef8:	00000706 	br	8112bf18 <OSMutexAccept+0x19c>
8112befc:	e0bff817 	ldw	r2,-32(fp)
8112bf00:	e0bffc15 	stw	r2,-16(fp)
8112bf04:	e0bffc17 	ldw	r2,-16(fp)
8112bf08:	1001703a 	wrctl	status,r2
8112bf0c:	e0bfff17 	ldw	r2,-4(fp)
8112bf10:	10000005 	stb	zero,0(r2)
8112bf14:	0005883a 	mov	r2,zero
8112bf18:	e037883a 	mov	sp,fp
8112bf1c:	df000017 	ldw	fp,0(sp)
8112bf20:	dec00104 	addi	sp,sp,4
8112bf24:	f800283a 	ret

8112bf28 <OSMutexCreate>:
8112bf28:	defff604 	addi	sp,sp,-40
8112bf2c:	de00012e 	bgeu	sp,et,8112bf34 <OSMutexCreate+0xc>
8112bf30:	003b68fa 	trap	3
8112bf34:	dfc00915 	stw	ra,36(sp)
8112bf38:	df000815 	stw	fp,32(sp)
8112bf3c:	df000804 	addi	fp,sp,32
8112bf40:	2005883a 	mov	r2,r4
8112bf44:	e17fff15 	stw	r5,-4(fp)
8112bf48:	e0bffe05 	stb	r2,-8(fp)
8112bf4c:	e03ff815 	stw	zero,-32(fp)
8112bf50:	e0bfff17 	ldw	r2,-4(fp)
8112bf54:	1000021e 	bne	r2,zero,8112bf60 <OSMutexCreate+0x38>
8112bf58:	0005883a 	mov	r2,zero
8112bf5c:	00006106 	br	8112c0e4 <OSMutexCreate+0x1bc>
8112bf60:	e0bffe03 	ldbu	r2,-8(fp)
8112bf64:	10800a30 	cmpltui	r2,r2,40
8112bf68:	1000051e 	bne	r2,zero,8112bf80 <OSMutexCreate+0x58>
8112bf6c:	e0bfff17 	ldw	r2,-4(fp)
8112bf70:	00c00a84 	movi	r3,42
8112bf74:	10c00005 	stb	r3,0(r2)
8112bf78:	0005883a 	mov	r2,zero
8112bf7c:	00005906 	br	8112c0e4 <OSMutexCreate+0x1bc>
8112bf80:	d0a08303 	ldbu	r2,-32244(gp)
8112bf84:	10803fcc 	andi	r2,r2,255
8112bf88:	10000526 	beq	r2,zero,8112bfa0 <OSMutexCreate+0x78>
8112bf8c:	e0bfff17 	ldw	r2,-4(fp)
8112bf90:	00c00404 	movi	r3,16
8112bf94:	10c00005 	stb	r3,0(r2)
8112bf98:	0005883a 	mov	r2,zero
8112bf9c:	00005106 	br	8112c0e4 <OSMutexCreate+0x1bc>
8112bfa0:	0005303a 	rdctl	r2,status
8112bfa4:	e0bffd15 	stw	r2,-12(fp)
8112bfa8:	e0fffd17 	ldw	r3,-12(fp)
8112bfac:	00bfff84 	movi	r2,-2
8112bfb0:	1884703a 	and	r2,r3,r2
8112bfb4:	1001703a 	wrctl	status,r2
8112bfb8:	e0bffd17 	ldw	r2,-12(fp)
8112bfbc:	e0bff815 	stw	r2,-32(fp)
8112bfc0:	e0fffe03 	ldbu	r3,-8(fp)
8112bfc4:	00a04574 	movhi	r2,33045
8112bfc8:	108d5704 	addi	r2,r2,13660
8112bfcc:	18c7883a 	add	r3,r3,r3
8112bfd0:	18c7883a 	add	r3,r3,r3
8112bfd4:	10c5883a 	add	r2,r2,r3
8112bfd8:	10800017 	ldw	r2,0(r2)
8112bfdc:	10000926 	beq	r2,zero,8112c004 <OSMutexCreate+0xdc>
8112bfe0:	e0bff817 	ldw	r2,-32(fp)
8112bfe4:	e0bff915 	stw	r2,-28(fp)
8112bfe8:	e0bff917 	ldw	r2,-28(fp)
8112bfec:	1001703a 	wrctl	status,r2
8112bff0:	e0bfff17 	ldw	r2,-4(fp)
8112bff4:	00c00a04 	movi	r3,40
8112bff8:	10c00005 	stb	r3,0(r2)
8112bffc:	0005883a 	mov	r2,zero
8112c000:	00003806 	br	8112c0e4 <OSMutexCreate+0x1bc>
8112c004:	e0fffe03 	ldbu	r3,-8(fp)
8112c008:	00a04574 	movhi	r2,33045
8112c00c:	108d5704 	addi	r2,r2,13660
8112c010:	18c7883a 	add	r3,r3,r3
8112c014:	18c7883a 	add	r3,r3,r3
8112c018:	10c5883a 	add	r2,r2,r3
8112c01c:	00c00044 	movi	r3,1
8112c020:	10c00015 	stw	r3,0(r2)
8112c024:	d0a08217 	ldw	r2,-32248(gp)
8112c028:	e0bffb15 	stw	r2,-20(fp)
8112c02c:	e0bffb17 	ldw	r2,-20(fp)
8112c030:	1000101e 	bne	r2,zero,8112c074 <OSMutexCreate+0x14c>
8112c034:	e0fffe03 	ldbu	r3,-8(fp)
8112c038:	00a04574 	movhi	r2,33045
8112c03c:	108d5704 	addi	r2,r2,13660
8112c040:	18c7883a 	add	r3,r3,r3
8112c044:	18c7883a 	add	r3,r3,r3
8112c048:	10c5883a 	add	r2,r2,r3
8112c04c:	10000015 	stw	zero,0(r2)
8112c050:	e0bff817 	ldw	r2,-32(fp)
8112c054:	e0bffa15 	stw	r2,-24(fp)
8112c058:	e0bffa17 	ldw	r2,-24(fp)
8112c05c:	1001703a 	wrctl	status,r2
8112c060:	e0bfff17 	ldw	r2,-4(fp)
8112c064:	00c00104 	movi	r3,4
8112c068:	10c00005 	stb	r3,0(r2)
8112c06c:	e0bffb17 	ldw	r2,-20(fp)
8112c070:	00001c06 	br	8112c0e4 <OSMutexCreate+0x1bc>
8112c074:	d0a08217 	ldw	r2,-32248(gp)
8112c078:	10800117 	ldw	r2,4(r2)
8112c07c:	d0a08215 	stw	r2,-32248(gp)
8112c080:	e0bff817 	ldw	r2,-32(fp)
8112c084:	e0bffc15 	stw	r2,-16(fp)
8112c088:	e0bffc17 	ldw	r2,-16(fp)
8112c08c:	1001703a 	wrctl	status,r2
8112c090:	e0bffb17 	ldw	r2,-20(fp)
8112c094:	00c00104 	movi	r3,4
8112c098:	10c00005 	stb	r3,0(r2)
8112c09c:	e0bffe03 	ldbu	r2,-8(fp)
8112c0a0:	1004923a 	slli	r2,r2,8
8112c0a4:	10803fd4 	ori	r2,r2,255
8112c0a8:	1007883a 	mov	r3,r2
8112c0ac:	e0bffb17 	ldw	r2,-20(fp)
8112c0b0:	10c0020d 	sth	r3,8(r2)
8112c0b4:	e0bffb17 	ldw	r2,-20(fp)
8112c0b8:	10000115 	stw	zero,4(r2)
8112c0bc:	e0bffb17 	ldw	r2,-20(fp)
8112c0c0:	00c00fc4 	movi	r3,63
8112c0c4:	10c00445 	stb	r3,17(r2)
8112c0c8:	e0bffb17 	ldw	r2,-20(fp)
8112c0cc:	10000485 	stb	zero,18(r2)
8112c0d0:	e13ffb17 	ldw	r4,-20(fp)
8112c0d4:	11290740 	call	81129074 <OS_EventWaitListInit>
8112c0d8:	e0bfff17 	ldw	r2,-4(fp)
8112c0dc:	10000005 	stb	zero,0(r2)
8112c0e0:	e0bffb17 	ldw	r2,-20(fp)
8112c0e4:	e037883a 	mov	sp,fp
8112c0e8:	dfc00117 	ldw	ra,4(sp)
8112c0ec:	df000017 	ldw	fp,0(sp)
8112c0f0:	dec00204 	addi	sp,sp,8
8112c0f4:	f800283a 	ret

8112c0f8 <OSMutexDel>:
8112c0f8:	defff004 	addi	sp,sp,-64
8112c0fc:	de00012e 	bgeu	sp,et,8112c104 <OSMutexDel+0xc>
8112c100:	003b68fa 	trap	3
8112c104:	dfc00f15 	stw	ra,60(sp)
8112c108:	df000e15 	stw	fp,56(sp)
8112c10c:	df000e04 	addi	fp,sp,56
8112c110:	e13ffd15 	stw	r4,-12(fp)
8112c114:	2805883a 	mov	r2,r5
8112c118:	e1bfff15 	stw	r6,-4(fp)
8112c11c:	e0bffe05 	stb	r2,-8(fp)
8112c120:	e03ff415 	stw	zero,-48(fp)
8112c124:	e0bfff17 	ldw	r2,-4(fp)
8112c128:	1000021e 	bne	r2,zero,8112c134 <OSMutexDel+0x3c>
8112c12c:	e0bffd17 	ldw	r2,-12(fp)
8112c130:	0000ad06 	br	8112c3e8 <OSMutexDel+0x2f0>
8112c134:	e0bffd17 	ldw	r2,-12(fp)
8112c138:	1000051e 	bne	r2,zero,8112c150 <OSMutexDel+0x58>
8112c13c:	e0bfff17 	ldw	r2,-4(fp)
8112c140:	00c00104 	movi	r3,4
8112c144:	10c00005 	stb	r3,0(r2)
8112c148:	e0bffd17 	ldw	r2,-12(fp)
8112c14c:	0000a606 	br	8112c3e8 <OSMutexDel+0x2f0>
8112c150:	e0bffd17 	ldw	r2,-12(fp)
8112c154:	10800003 	ldbu	r2,0(r2)
8112c158:	10803fcc 	andi	r2,r2,255
8112c15c:	10800120 	cmpeqi	r2,r2,4
8112c160:	1000051e 	bne	r2,zero,8112c178 <OSMutexDel+0x80>
8112c164:	e0bfff17 	ldw	r2,-4(fp)
8112c168:	00c00044 	movi	r3,1
8112c16c:	10c00005 	stb	r3,0(r2)
8112c170:	e0bffd17 	ldw	r2,-12(fp)
8112c174:	00009c06 	br	8112c3e8 <OSMutexDel+0x2f0>
8112c178:	d0a08303 	ldbu	r2,-32244(gp)
8112c17c:	10803fcc 	andi	r2,r2,255
8112c180:	10000526 	beq	r2,zero,8112c198 <OSMutexDel+0xa0>
8112c184:	e0bfff17 	ldw	r2,-4(fp)
8112c188:	00c003c4 	movi	r3,15
8112c18c:	10c00005 	stb	r3,0(r2)
8112c190:	e0bffd17 	ldw	r2,-12(fp)
8112c194:	00009406 	br	8112c3e8 <OSMutexDel+0x2f0>
8112c198:	0005303a 	rdctl	r2,status
8112c19c:	e0bffc15 	stw	r2,-16(fp)
8112c1a0:	e0fffc17 	ldw	r3,-16(fp)
8112c1a4:	00bfff84 	movi	r2,-2
8112c1a8:	1884703a 	and	r2,r3,r2
8112c1ac:	1001703a 	wrctl	status,r2
8112c1b0:	e0bffc17 	ldw	r2,-16(fp)
8112c1b4:	e0bff415 	stw	r2,-48(fp)
8112c1b8:	e0bffd17 	ldw	r2,-12(fp)
8112c1bc:	10800283 	ldbu	r2,10(r2)
8112c1c0:	10803fcc 	andi	r2,r2,255
8112c1c4:	10000326 	beq	r2,zero,8112c1d4 <OSMutexDel+0xdc>
8112c1c8:	00800044 	movi	r2,1
8112c1cc:	e0bff205 	stb	r2,-56(fp)
8112c1d0:	00000106 	br	8112c1d8 <OSMutexDel+0xe0>
8112c1d4:	e03ff205 	stb	zero,-56(fp)
8112c1d8:	e0bffe03 	ldbu	r2,-8(fp)
8112c1dc:	10000326 	beq	r2,zero,8112c1ec <OSMutexDel+0xf4>
8112c1e0:	10800060 	cmpeqi	r2,r2,1
8112c1e4:	10002f1e 	bne	r2,zero,8112c2a4 <OSMutexDel+0x1ac>
8112c1e8:	00007406 	br	8112c3bc <OSMutexDel+0x2c4>
8112c1ec:	e0bff203 	ldbu	r2,-56(fp)
8112c1f0:	1000221e 	bne	r2,zero,8112c27c <OSMutexDel+0x184>
8112c1f4:	e0bffd17 	ldw	r2,-12(fp)
8112c1f8:	00c00fc4 	movi	r3,63
8112c1fc:	10c00445 	stb	r3,17(r2)
8112c200:	e0bffd17 	ldw	r2,-12(fp)
8112c204:	10000485 	stb	zero,18(r2)
8112c208:	e0bffd17 	ldw	r2,-12(fp)
8112c20c:	1080020b 	ldhu	r2,8(r2)
8112c210:	10bfffcc 	andi	r2,r2,65535
8112c214:	1004d23a 	srli	r2,r2,8
8112c218:	e0bff605 	stb	r2,-40(fp)
8112c21c:	e0fff603 	ldbu	r3,-40(fp)
8112c220:	00a04574 	movhi	r2,33045
8112c224:	108d5704 	addi	r2,r2,13660
8112c228:	18c7883a 	add	r3,r3,r3
8112c22c:	18c7883a 	add	r3,r3,r3
8112c230:	10c5883a 	add	r2,r2,r3
8112c234:	10000015 	stw	zero,0(r2)
8112c238:	e0bffd17 	ldw	r2,-12(fp)
8112c23c:	10000005 	stb	zero,0(r2)
8112c240:	d0e08217 	ldw	r3,-32248(gp)
8112c244:	e0bffd17 	ldw	r2,-12(fp)
8112c248:	10c00115 	stw	r3,4(r2)
8112c24c:	e0bffd17 	ldw	r2,-12(fp)
8112c250:	1000020d 	sth	zero,8(r2)
8112c254:	e0bffd17 	ldw	r2,-12(fp)
8112c258:	d0a08215 	stw	r2,-32248(gp)
8112c25c:	e0bff417 	ldw	r2,-48(fp)
8112c260:	e0bff515 	stw	r2,-44(fp)
8112c264:	e0bff517 	ldw	r2,-44(fp)
8112c268:	1001703a 	wrctl	status,r2
8112c26c:	e0bfff17 	ldw	r2,-4(fp)
8112c270:	10000005 	stb	zero,0(r2)
8112c274:	e03ff315 	stw	zero,-52(fp)
8112c278:	00005a06 	br	8112c3e4 <OSMutexDel+0x2ec>
8112c27c:	e0bff417 	ldw	r2,-48(fp)
8112c280:	e0bff715 	stw	r2,-36(fp)
8112c284:	e0bff717 	ldw	r2,-36(fp)
8112c288:	1001703a 	wrctl	status,r2
8112c28c:	e0bfff17 	ldw	r2,-4(fp)
8112c290:	00c01244 	movi	r3,73
8112c294:	10c00005 	stb	r3,0(r2)
8112c298:	e0bffd17 	ldw	r2,-12(fp)
8112c29c:	e0bff315 	stw	r2,-52(fp)
8112c2a0:	00005006 	br	8112c3e4 <OSMutexDel+0x2ec>
8112c2a4:	e0bffd17 	ldw	r2,-12(fp)
8112c2a8:	1080020b 	ldhu	r2,8(r2)
8112c2ac:	10bfffcc 	andi	r2,r2,65535
8112c2b0:	1004d23a 	srli	r2,r2,8
8112c2b4:	e0bff605 	stb	r2,-40(fp)
8112c2b8:	e0bffd17 	ldw	r2,-12(fp)
8112c2bc:	1080020b 	ldhu	r2,8(r2)
8112c2c0:	e0bff905 	stb	r2,-28(fp)
8112c2c4:	e0bffd17 	ldw	r2,-12(fp)
8112c2c8:	10800117 	ldw	r2,4(r2)
8112c2cc:	e0bffa15 	stw	r2,-24(fp)
8112c2d0:	e0bffa17 	ldw	r2,-24(fp)
8112c2d4:	10000f26 	beq	r2,zero,8112c314 <OSMutexDel+0x21c>
8112c2d8:	e0bffa17 	ldw	r2,-24(fp)
8112c2dc:	10800c83 	ldbu	r2,50(r2)
8112c2e0:	10c03fcc 	andi	r3,r2,255
8112c2e4:	e0bff603 	ldbu	r2,-40(fp)
8112c2e8:	18800a1e 	bne	r3,r2,8112c314 <OSMutexDel+0x21c>
8112c2ec:	e0bff903 	ldbu	r2,-28(fp)
8112c2f0:	100b883a 	mov	r5,r2
8112c2f4:	e13ffa17 	ldw	r4,-24(fp)
8112c2f8:	112cd340 	call	8112cd34 <OSMutex_RdyAtPrio>
8112c2fc:	00000506 	br	8112c314 <OSMutexDel+0x21c>
8112c300:	000f883a 	mov	r7,zero
8112c304:	01800404 	movi	r6,16
8112c308:	000b883a 	mov	r5,zero
8112c30c:	e13ffd17 	ldw	r4,-12(fp)
8112c310:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112c314:	e0bffd17 	ldw	r2,-12(fp)
8112c318:	10800283 	ldbu	r2,10(r2)
8112c31c:	10803fcc 	andi	r2,r2,255
8112c320:	103ff71e 	bne	r2,zero,8112c300 <__reset+0xfb10c300>
8112c324:	e0bffd17 	ldw	r2,-12(fp)
8112c328:	00c00fc4 	movi	r3,63
8112c32c:	10c00445 	stb	r3,17(r2)
8112c330:	e0bffd17 	ldw	r2,-12(fp)
8112c334:	10000485 	stb	zero,18(r2)
8112c338:	e0bffd17 	ldw	r2,-12(fp)
8112c33c:	1080020b 	ldhu	r2,8(r2)
8112c340:	10bfffcc 	andi	r2,r2,65535
8112c344:	1004d23a 	srli	r2,r2,8
8112c348:	e0bff605 	stb	r2,-40(fp)
8112c34c:	e0fff603 	ldbu	r3,-40(fp)
8112c350:	00a04574 	movhi	r2,33045
8112c354:	108d5704 	addi	r2,r2,13660
8112c358:	18c7883a 	add	r3,r3,r3
8112c35c:	18c7883a 	add	r3,r3,r3
8112c360:	10c5883a 	add	r2,r2,r3
8112c364:	10000015 	stw	zero,0(r2)
8112c368:	e0bffd17 	ldw	r2,-12(fp)
8112c36c:	10000005 	stb	zero,0(r2)
8112c370:	d0e08217 	ldw	r3,-32248(gp)
8112c374:	e0bffd17 	ldw	r2,-12(fp)
8112c378:	10c00115 	stw	r3,4(r2)
8112c37c:	e0bffd17 	ldw	r2,-12(fp)
8112c380:	1000020d 	sth	zero,8(r2)
8112c384:	e0bffd17 	ldw	r2,-12(fp)
8112c388:	d0a08215 	stw	r2,-32248(gp)
8112c38c:	e0bff417 	ldw	r2,-48(fp)
8112c390:	e0bff815 	stw	r2,-32(fp)
8112c394:	e0bff817 	ldw	r2,-32(fp)
8112c398:	1001703a 	wrctl	status,r2
8112c39c:	e0bff203 	ldbu	r2,-56(fp)
8112c3a0:	10800058 	cmpnei	r2,r2,1
8112c3a4:	1000011e 	bne	r2,zero,8112c3ac <OSMutexDel+0x2b4>
8112c3a8:	11295580 	call	81129558 <OS_Sched>
8112c3ac:	e0bfff17 	ldw	r2,-4(fp)
8112c3b0:	10000005 	stb	zero,0(r2)
8112c3b4:	e03ff315 	stw	zero,-52(fp)
8112c3b8:	00000a06 	br	8112c3e4 <OSMutexDel+0x2ec>
8112c3bc:	e0bff417 	ldw	r2,-48(fp)
8112c3c0:	e0bffb15 	stw	r2,-20(fp)
8112c3c4:	e0bffb17 	ldw	r2,-20(fp)
8112c3c8:	1001703a 	wrctl	status,r2
8112c3cc:	e0bfff17 	ldw	r2,-4(fp)
8112c3d0:	00c001c4 	movi	r3,7
8112c3d4:	10c00005 	stb	r3,0(r2)
8112c3d8:	e0bffd17 	ldw	r2,-12(fp)
8112c3dc:	e0bff315 	stw	r2,-52(fp)
8112c3e0:	0001883a 	nop
8112c3e4:	e0bff317 	ldw	r2,-52(fp)
8112c3e8:	e037883a 	mov	sp,fp
8112c3ec:	dfc00117 	ldw	ra,4(sp)
8112c3f0:	df000017 	ldw	fp,0(sp)
8112c3f4:	dec00204 	addi	sp,sp,8
8112c3f8:	f800283a 	ret

8112c3fc <OSMutexPend>:
8112c3fc:	deffee04 	addi	sp,sp,-72
8112c400:	de00012e 	bgeu	sp,et,8112c408 <OSMutexPend+0xc>
8112c404:	003b68fa 	trap	3
8112c408:	dfc01115 	stw	ra,68(sp)
8112c40c:	df001015 	stw	fp,64(sp)
8112c410:	df001004 	addi	fp,sp,64
8112c414:	e13ffd15 	stw	r4,-12(fp)
8112c418:	2805883a 	mov	r2,r5
8112c41c:	e1bfff15 	stw	r6,-4(fp)
8112c420:	e0bffe0d 	sth	r2,-8(fp)
8112c424:	e03ff115 	stw	zero,-60(fp)
8112c428:	e0bfff17 	ldw	r2,-4(fp)
8112c42c:	10015626 	beq	r2,zero,8112c988 <OSMutexPend+0x58c>
8112c430:	e0bffd17 	ldw	r2,-12(fp)
8112c434:	1000041e 	bne	r2,zero,8112c448 <OSMutexPend+0x4c>
8112c438:	e0bfff17 	ldw	r2,-4(fp)
8112c43c:	00c00104 	movi	r3,4
8112c440:	10c00005 	stb	r3,0(r2)
8112c444:	00015106 	br	8112c98c <OSMutexPend+0x590>
8112c448:	e0bffd17 	ldw	r2,-12(fp)
8112c44c:	10800003 	ldbu	r2,0(r2)
8112c450:	10803fcc 	andi	r2,r2,255
8112c454:	10800120 	cmpeqi	r2,r2,4
8112c458:	1000041e 	bne	r2,zero,8112c46c <OSMutexPend+0x70>
8112c45c:	e0bfff17 	ldw	r2,-4(fp)
8112c460:	00c00044 	movi	r3,1
8112c464:	10c00005 	stb	r3,0(r2)
8112c468:	00014806 	br	8112c98c <OSMutexPend+0x590>
8112c46c:	d0a08303 	ldbu	r2,-32244(gp)
8112c470:	10803fcc 	andi	r2,r2,255
8112c474:	10000426 	beq	r2,zero,8112c488 <OSMutexPend+0x8c>
8112c478:	e0bfff17 	ldw	r2,-4(fp)
8112c47c:	00c00084 	movi	r3,2
8112c480:	10c00005 	stb	r3,0(r2)
8112c484:	00014106 	br	8112c98c <OSMutexPend+0x590>
8112c488:	d0a07103 	ldbu	r2,-32316(gp)
8112c48c:	10803fcc 	andi	r2,r2,255
8112c490:	10000426 	beq	r2,zero,8112c4a4 <OSMutexPend+0xa8>
8112c494:	e0bfff17 	ldw	r2,-4(fp)
8112c498:	00c00344 	movi	r3,13
8112c49c:	10c00005 	stb	r3,0(r2)
8112c4a0:	00013a06 	br	8112c98c <OSMutexPend+0x590>
8112c4a4:	0005303a 	rdctl	r2,status
8112c4a8:	e0bffc15 	stw	r2,-16(fp)
8112c4ac:	e0fffc17 	ldw	r3,-16(fp)
8112c4b0:	00bfff84 	movi	r2,-2
8112c4b4:	1884703a 	and	r2,r3,r2
8112c4b8:	1001703a 	wrctl	status,r2
8112c4bc:	e0bffc17 	ldw	r2,-16(fp)
8112c4c0:	e0bff115 	stw	r2,-60(fp)
8112c4c4:	e0bffd17 	ldw	r2,-12(fp)
8112c4c8:	1080020b 	ldhu	r2,8(r2)
8112c4cc:	10bfffcc 	andi	r2,r2,65535
8112c4d0:	1004d23a 	srli	r2,r2,8
8112c4d4:	e0bff305 	stb	r2,-52(fp)
8112c4d8:	e0bffd17 	ldw	r2,-12(fp)
8112c4dc:	1080020b 	ldhu	r2,8(r2)
8112c4e0:	10803fcc 	andi	r2,r2,255
8112c4e4:	10803fd8 	cmpnei	r2,r2,255
8112c4e8:	1000271e 	bne	r2,zero,8112c588 <OSMutexPend+0x18c>
8112c4ec:	e0bffd17 	ldw	r2,-12(fp)
8112c4f0:	10c0020b 	ldhu	r3,8(r2)
8112c4f4:	00bfc004 	movi	r2,-256
8112c4f8:	1884703a 	and	r2,r3,r2
8112c4fc:	1007883a 	mov	r3,r2
8112c500:	e0bffd17 	ldw	r2,-12(fp)
8112c504:	10c0020d 	sth	r3,8(r2)
8112c508:	e0bffd17 	ldw	r2,-12(fp)
8112c50c:	10c0020b 	ldhu	r3,8(r2)
8112c510:	d0a08417 	ldw	r2,-32240(gp)
8112c514:	10800c83 	ldbu	r2,50(r2)
8112c518:	10803fcc 	andi	r2,r2,255
8112c51c:	1884b03a 	or	r2,r3,r2
8112c520:	1007883a 	mov	r3,r2
8112c524:	e0bffd17 	ldw	r2,-12(fp)
8112c528:	10c0020d 	sth	r3,8(r2)
8112c52c:	d0e08417 	ldw	r3,-32240(gp)
8112c530:	e0bffd17 	ldw	r2,-12(fp)
8112c534:	10c00115 	stw	r3,4(r2)
8112c538:	d0a08417 	ldw	r2,-32240(gp)
8112c53c:	10800c83 	ldbu	r2,50(r2)
8112c540:	10803fcc 	andi	r2,r2,255
8112c544:	e0fff303 	ldbu	r3,-52(fp)
8112c548:	18800836 	bltu	r3,r2,8112c56c <OSMutexPend+0x170>
8112c54c:	e0bff117 	ldw	r2,-60(fp)
8112c550:	e0bff215 	stw	r2,-56(fp)
8112c554:	e0bff217 	ldw	r2,-56(fp)
8112c558:	1001703a 	wrctl	status,r2
8112c55c:	e0bfff17 	ldw	r2,-4(fp)
8112c560:	00c01e04 	movi	r3,120
8112c564:	10c00005 	stb	r3,0(r2)
8112c568:	00010806 	br	8112c98c <OSMutexPend+0x590>
8112c56c:	e0bff117 	ldw	r2,-60(fp)
8112c570:	e0bff415 	stw	r2,-48(fp)
8112c574:	e0bff417 	ldw	r2,-48(fp)
8112c578:	1001703a 	wrctl	status,r2
8112c57c:	e0bfff17 	ldw	r2,-4(fp)
8112c580:	10000005 	stb	zero,0(r2)
8112c584:	00010106 	br	8112c98c <OSMutexPend+0x590>
8112c588:	e0bffd17 	ldw	r2,-12(fp)
8112c58c:	1080020b 	ldhu	r2,8(r2)
8112c590:	e0bff605 	stb	r2,-40(fp)
8112c594:	e0bffd17 	ldw	r2,-12(fp)
8112c598:	10800117 	ldw	r2,4(r2)
8112c59c:	e0bff715 	stw	r2,-36(fp)
8112c5a0:	e0bff717 	ldw	r2,-36(fp)
8112c5a4:	10800c83 	ldbu	r2,50(r2)
8112c5a8:	10803fcc 	andi	r2,r2,255
8112c5ac:	e0fff303 	ldbu	r3,-52(fp)
8112c5b0:	1880b92e 	bgeu	r3,r2,8112c898 <OSMutexPend+0x49c>
8112c5b4:	d0a08417 	ldw	r2,-32240(gp)
8112c5b8:	10800c83 	ldbu	r2,50(r2)
8112c5bc:	10c03fcc 	andi	r3,r2,255
8112c5c0:	e0bff603 	ldbu	r2,-40(fp)
8112c5c4:	1880b42e 	bgeu	r3,r2,8112c898 <OSMutexPend+0x49c>
8112c5c8:	e0bff717 	ldw	r2,-36(fp)
8112c5cc:	10800d03 	ldbu	r2,52(r2)
8112c5d0:	e0bff805 	stb	r2,-32(fp)
8112c5d4:	e0fff803 	ldbu	r3,-32(fp)
8112c5d8:	d0a08044 	addi	r2,gp,-32255
8112c5dc:	1885883a 	add	r2,r3,r2
8112c5e0:	10c00003 	ldbu	r3,0(r2)
8112c5e4:	e0bff717 	ldw	r2,-36(fp)
8112c5e8:	10800d43 	ldbu	r2,53(r2)
8112c5ec:	1884703a 	and	r2,r3,r2
8112c5f0:	10803fcc 	andi	r2,r2,255
8112c5f4:	10001e26 	beq	r2,zero,8112c670 <OSMutexPend+0x274>
8112c5f8:	e0fff803 	ldbu	r3,-32(fp)
8112c5fc:	e13ff803 	ldbu	r4,-32(fp)
8112c600:	d0a08044 	addi	r2,gp,-32255
8112c604:	2085883a 	add	r2,r4,r2
8112c608:	10800003 	ldbu	r2,0(r2)
8112c60c:	1009883a 	mov	r4,r2
8112c610:	e0bff717 	ldw	r2,-36(fp)
8112c614:	10800d43 	ldbu	r2,53(r2)
8112c618:	0084303a 	nor	r2,zero,r2
8112c61c:	2084703a 	and	r2,r4,r2
8112c620:	1009883a 	mov	r4,r2
8112c624:	d0a08044 	addi	r2,gp,-32255
8112c628:	1885883a 	add	r2,r3,r2
8112c62c:	11000005 	stb	r4,0(r2)
8112c630:	e0fff803 	ldbu	r3,-32(fp)
8112c634:	d0a08044 	addi	r2,gp,-32255
8112c638:	1885883a 	add	r2,r3,r2
8112c63c:	10800003 	ldbu	r2,0(r2)
8112c640:	10803fcc 	andi	r2,r2,255
8112c644:	1000071e 	bne	r2,zero,8112c664 <OSMutexPend+0x268>
8112c648:	e0bff717 	ldw	r2,-36(fp)
8112c64c:	10800d83 	ldbu	r2,54(r2)
8112c650:	0084303a 	nor	r2,zero,r2
8112c654:	1007883a 	mov	r3,r2
8112c658:	d0a08003 	ldbu	r2,-32256(gp)
8112c65c:	1884703a 	and	r2,r3,r2
8112c660:	d0a08005 	stb	r2,-32256(gp)
8112c664:	00800044 	movi	r2,1
8112c668:	e0bff005 	stb	r2,-64(fp)
8112c66c:	00002a06 	br	8112c718 <OSMutexPend+0x31c>
8112c670:	e0bff717 	ldw	r2,-36(fp)
8112c674:	10800717 	ldw	r2,28(r2)
8112c678:	e0bff915 	stw	r2,-28(fp)
8112c67c:	e0bff917 	ldw	r2,-28(fp)
8112c680:	10002426 	beq	r2,zero,8112c714 <OSMutexPend+0x318>
8112c684:	e0bff717 	ldw	r2,-36(fp)
8112c688:	10800d03 	ldbu	r2,52(r2)
8112c68c:	10803fcc 	andi	r2,r2,255
8112c690:	e0fff717 	ldw	r3,-36(fp)
8112c694:	18c00d03 	ldbu	r3,52(r3)
8112c698:	18c03fcc 	andi	r3,r3,255
8112c69c:	e13ff917 	ldw	r4,-28(fp)
8112c6a0:	20c7883a 	add	r3,r4,r3
8112c6a4:	18c002c4 	addi	r3,r3,11
8112c6a8:	18c00003 	ldbu	r3,0(r3)
8112c6ac:	1809883a 	mov	r4,r3
8112c6b0:	e0fff717 	ldw	r3,-36(fp)
8112c6b4:	18c00d43 	ldbu	r3,53(r3)
8112c6b8:	00c6303a 	nor	r3,zero,r3
8112c6bc:	20c6703a 	and	r3,r4,r3
8112c6c0:	1809883a 	mov	r4,r3
8112c6c4:	e0fff917 	ldw	r3,-28(fp)
8112c6c8:	1887883a 	add	r3,r3,r2
8112c6cc:	18c002c4 	addi	r3,r3,11
8112c6d0:	19000005 	stb	r4,0(r3)
8112c6d4:	e0fff917 	ldw	r3,-28(fp)
8112c6d8:	1885883a 	add	r2,r3,r2
8112c6dc:	108002c4 	addi	r2,r2,11
8112c6e0:	10800003 	ldbu	r2,0(r2)
8112c6e4:	10803fcc 	andi	r2,r2,255
8112c6e8:	10000a1e 	bne	r2,zero,8112c714 <OSMutexPend+0x318>
8112c6ec:	e0bff917 	ldw	r2,-28(fp)
8112c6f0:	10800283 	ldbu	r2,10(r2)
8112c6f4:	1007883a 	mov	r3,r2
8112c6f8:	e0bff717 	ldw	r2,-36(fp)
8112c6fc:	10800d83 	ldbu	r2,54(r2)
8112c700:	0084303a 	nor	r2,zero,r2
8112c704:	1884703a 	and	r2,r3,r2
8112c708:	1007883a 	mov	r3,r2
8112c70c:	e0bff917 	ldw	r2,-28(fp)
8112c710:	10c00285 	stb	r3,10(r2)
8112c714:	e03ff005 	stb	zero,-64(fp)
8112c718:	e0bff717 	ldw	r2,-36(fp)
8112c71c:	e0fff303 	ldbu	r3,-52(fp)
8112c720:	10c00c85 	stb	r3,50(r2)
8112c724:	e0bff717 	ldw	r2,-36(fp)
8112c728:	10800c83 	ldbu	r2,50(r2)
8112c72c:	10803fcc 	andi	r2,r2,255
8112c730:	1004d0fa 	srli	r2,r2,3
8112c734:	1007883a 	mov	r3,r2
8112c738:	e0bff717 	ldw	r2,-36(fp)
8112c73c:	10c00d05 	stb	r3,52(r2)
8112c740:	e0bff717 	ldw	r2,-36(fp)
8112c744:	10800c83 	ldbu	r2,50(r2)
8112c748:	108001cc 	andi	r2,r2,7
8112c74c:	1007883a 	mov	r3,r2
8112c750:	e0bff717 	ldw	r2,-36(fp)
8112c754:	10c00cc5 	stb	r3,51(r2)
8112c758:	e0bff717 	ldw	r2,-36(fp)
8112c75c:	10800d03 	ldbu	r2,52(r2)
8112c760:	10803fcc 	andi	r2,r2,255
8112c764:	00c00044 	movi	r3,1
8112c768:	1884983a 	sll	r2,r3,r2
8112c76c:	1007883a 	mov	r3,r2
8112c770:	e0bff717 	ldw	r2,-36(fp)
8112c774:	10c00d85 	stb	r3,54(r2)
8112c778:	e0bff717 	ldw	r2,-36(fp)
8112c77c:	10800cc3 	ldbu	r2,51(r2)
8112c780:	10803fcc 	andi	r2,r2,255
8112c784:	00c00044 	movi	r3,1
8112c788:	1884983a 	sll	r2,r3,r2
8112c78c:	1007883a 	mov	r3,r2
8112c790:	e0bff717 	ldw	r2,-36(fp)
8112c794:	10c00d45 	stb	r3,53(r2)
8112c798:	e0bff003 	ldbu	r2,-64(fp)
8112c79c:	10800058 	cmpnei	r2,r2,1
8112c7a0:	1000161e 	bne	r2,zero,8112c7fc <OSMutexPend+0x400>
8112c7a4:	e0bff717 	ldw	r2,-36(fp)
8112c7a8:	10c00d83 	ldbu	r3,54(r2)
8112c7ac:	d0a08003 	ldbu	r2,-32256(gp)
8112c7b0:	1884b03a 	or	r2,r3,r2
8112c7b4:	d0a08005 	stb	r2,-32256(gp)
8112c7b8:	e0bff717 	ldw	r2,-36(fp)
8112c7bc:	10800d03 	ldbu	r2,52(r2)
8112c7c0:	10c03fcc 	andi	r3,r2,255
8112c7c4:	e0bff717 	ldw	r2,-36(fp)
8112c7c8:	10800d03 	ldbu	r2,52(r2)
8112c7cc:	11003fcc 	andi	r4,r2,255
8112c7d0:	d0a08044 	addi	r2,gp,-32255
8112c7d4:	2085883a 	add	r2,r4,r2
8112c7d8:	11000003 	ldbu	r4,0(r2)
8112c7dc:	e0bff717 	ldw	r2,-36(fp)
8112c7e0:	10800d43 	ldbu	r2,53(r2)
8112c7e4:	2084b03a 	or	r2,r4,r2
8112c7e8:	1009883a 	mov	r4,r2
8112c7ec:	d0a08044 	addi	r2,gp,-32255
8112c7f0:	1885883a 	add	r2,r3,r2
8112c7f4:	11000005 	stb	r4,0(r2)
8112c7f8:	00001f06 	br	8112c878 <OSMutexPend+0x47c>
8112c7fc:	e0bff717 	ldw	r2,-36(fp)
8112c800:	10800717 	ldw	r2,28(r2)
8112c804:	e0bff915 	stw	r2,-28(fp)
8112c808:	e0bff917 	ldw	r2,-28(fp)
8112c80c:	10001a26 	beq	r2,zero,8112c878 <OSMutexPend+0x47c>
8112c810:	e0bff917 	ldw	r2,-28(fp)
8112c814:	10c00283 	ldbu	r3,10(r2)
8112c818:	e0bff717 	ldw	r2,-36(fp)
8112c81c:	10800d83 	ldbu	r2,54(r2)
8112c820:	1884b03a 	or	r2,r3,r2
8112c824:	1007883a 	mov	r3,r2
8112c828:	e0bff917 	ldw	r2,-28(fp)
8112c82c:	10c00285 	stb	r3,10(r2)
8112c830:	e0bff717 	ldw	r2,-36(fp)
8112c834:	10800d03 	ldbu	r2,52(r2)
8112c838:	10803fcc 	andi	r2,r2,255
8112c83c:	e0fff717 	ldw	r3,-36(fp)
8112c840:	18c00d03 	ldbu	r3,52(r3)
8112c844:	18c03fcc 	andi	r3,r3,255
8112c848:	e13ff917 	ldw	r4,-28(fp)
8112c84c:	20c7883a 	add	r3,r4,r3
8112c850:	18c002c4 	addi	r3,r3,11
8112c854:	19000003 	ldbu	r4,0(r3)
8112c858:	e0fff717 	ldw	r3,-36(fp)
8112c85c:	18c00d43 	ldbu	r3,53(r3)
8112c860:	20c6b03a 	or	r3,r4,r3
8112c864:	1809883a 	mov	r4,r3
8112c868:	e0fff917 	ldw	r3,-28(fp)
8112c86c:	1885883a 	add	r2,r3,r2
8112c870:	108002c4 	addi	r2,r2,11
8112c874:	11000005 	stb	r4,0(r2)
8112c878:	e0fff303 	ldbu	r3,-52(fp)
8112c87c:	00a04574 	movhi	r2,33045
8112c880:	108d5704 	addi	r2,r2,13660
8112c884:	18c7883a 	add	r3,r3,r3
8112c888:	18c7883a 	add	r3,r3,r3
8112c88c:	10c5883a 	add	r2,r2,r3
8112c890:	e0fff717 	ldw	r3,-36(fp)
8112c894:	10c00015 	stw	r3,0(r2)
8112c898:	d0a08417 	ldw	r2,-32240(gp)
8112c89c:	d0e08417 	ldw	r3,-32240(gp)
8112c8a0:	18c00c03 	ldbu	r3,48(r3)
8112c8a4:	18c00414 	ori	r3,r3,16
8112c8a8:	10c00c05 	stb	r3,48(r2)
8112c8ac:	d0a08417 	ldw	r2,-32240(gp)
8112c8b0:	10000c45 	stb	zero,49(r2)
8112c8b4:	d0a08417 	ldw	r2,-32240(gp)
8112c8b8:	e0fffe0b 	ldhu	r3,-8(fp)
8112c8bc:	10c00b8d 	sth	r3,46(r2)
8112c8c0:	e13ffd17 	ldw	r4,-12(fp)
8112c8c4:	1128c3c0 	call	81128c3c <OS_EventTaskWait>
8112c8c8:	e0bff117 	ldw	r2,-60(fp)
8112c8cc:	e0bffb15 	stw	r2,-20(fp)
8112c8d0:	e0bffb17 	ldw	r2,-20(fp)
8112c8d4:	1001703a 	wrctl	status,r2
8112c8d8:	11295580 	call	81129558 <OS_Sched>
8112c8dc:	0005303a 	rdctl	r2,status
8112c8e0:	e0bff515 	stw	r2,-44(fp)
8112c8e4:	e0fff517 	ldw	r3,-44(fp)
8112c8e8:	00bfff84 	movi	r2,-2
8112c8ec:	1884703a 	and	r2,r3,r2
8112c8f0:	1001703a 	wrctl	status,r2
8112c8f4:	e0bff517 	ldw	r2,-44(fp)
8112c8f8:	e0bff115 	stw	r2,-60(fp)
8112c8fc:	d0a08417 	ldw	r2,-32240(gp)
8112c900:	10800c43 	ldbu	r2,49(r2)
8112c904:	10803fcc 	andi	r2,r2,255
8112c908:	10000326 	beq	r2,zero,8112c918 <OSMutexPend+0x51c>
8112c90c:	108000a0 	cmpeqi	r2,r2,2
8112c910:	1000041e 	bne	r2,zero,8112c924 <OSMutexPend+0x528>
8112c914:	00000706 	br	8112c934 <OSMutexPend+0x538>
8112c918:	e0bfff17 	ldw	r2,-4(fp)
8112c91c:	10000005 	stb	zero,0(r2)
8112c920:	00000c06 	br	8112c954 <OSMutexPend+0x558>
8112c924:	e0bfff17 	ldw	r2,-4(fp)
8112c928:	00c00384 	movi	r3,14
8112c92c:	10c00005 	stb	r3,0(r2)
8112c930:	00000806 	br	8112c954 <OSMutexPend+0x558>
8112c934:	d0a08417 	ldw	r2,-32240(gp)
8112c938:	e17ffd17 	ldw	r5,-12(fp)
8112c93c:	1009883a 	mov	r4,r2
8112c940:	1128eac0 	call	81128eac <OS_EventTaskRemove>
8112c944:	e0bfff17 	ldw	r2,-4(fp)
8112c948:	00c00284 	movi	r3,10
8112c94c:	10c00005 	stb	r3,0(r2)
8112c950:	0001883a 	nop
8112c954:	d0a08417 	ldw	r2,-32240(gp)
8112c958:	10000c05 	stb	zero,48(r2)
8112c95c:	d0a08417 	ldw	r2,-32240(gp)
8112c960:	10000c45 	stb	zero,49(r2)
8112c964:	d0a08417 	ldw	r2,-32240(gp)
8112c968:	10000715 	stw	zero,28(r2)
8112c96c:	d0a08417 	ldw	r2,-32240(gp)
8112c970:	10000815 	stw	zero,32(r2)
8112c974:	e0bff117 	ldw	r2,-60(fp)
8112c978:	e0bffa15 	stw	r2,-24(fp)
8112c97c:	e0bffa17 	ldw	r2,-24(fp)
8112c980:	1001703a 	wrctl	status,r2
8112c984:	00000106 	br	8112c98c <OSMutexPend+0x590>
8112c988:	0001883a 	nop
8112c98c:	e037883a 	mov	sp,fp
8112c990:	dfc00117 	ldw	ra,4(sp)
8112c994:	df000017 	ldw	fp,0(sp)
8112c998:	dec00204 	addi	sp,sp,8
8112c99c:	f800283a 	ret

8112c9a0 <OSMutexPost>:
8112c9a0:	defff604 	addi	sp,sp,-40
8112c9a4:	de00012e 	bgeu	sp,et,8112c9ac <OSMutexPost+0xc>
8112c9a8:	003b68fa 	trap	3
8112c9ac:	dfc00915 	stw	ra,36(sp)
8112c9b0:	df000815 	stw	fp,32(sp)
8112c9b4:	df000804 	addi	fp,sp,32
8112c9b8:	e13fff15 	stw	r4,-4(fp)
8112c9bc:	e03ff815 	stw	zero,-32(fp)
8112c9c0:	d0a08303 	ldbu	r2,-32244(gp)
8112c9c4:	10803fcc 	andi	r2,r2,255
8112c9c8:	10000226 	beq	r2,zero,8112c9d4 <OSMutexPost+0x34>
8112c9cc:	00800144 	movi	r2,5
8112c9d0:	00007606 	br	8112cbac <OSMutexPost+0x20c>
8112c9d4:	e0bfff17 	ldw	r2,-4(fp)
8112c9d8:	1000021e 	bne	r2,zero,8112c9e4 <OSMutexPost+0x44>
8112c9dc:	00800104 	movi	r2,4
8112c9e0:	00007206 	br	8112cbac <OSMutexPost+0x20c>
8112c9e4:	e0bfff17 	ldw	r2,-4(fp)
8112c9e8:	10800003 	ldbu	r2,0(r2)
8112c9ec:	10803fcc 	andi	r2,r2,255
8112c9f0:	10800120 	cmpeqi	r2,r2,4
8112c9f4:	1000021e 	bne	r2,zero,8112ca00 <OSMutexPost+0x60>
8112c9f8:	00800044 	movi	r2,1
8112c9fc:	00006b06 	br	8112cbac <OSMutexPost+0x20c>
8112ca00:	0005303a 	rdctl	r2,status
8112ca04:	e0bffe15 	stw	r2,-8(fp)
8112ca08:	e0fffe17 	ldw	r3,-8(fp)
8112ca0c:	00bfff84 	movi	r2,-2
8112ca10:	1884703a 	and	r2,r3,r2
8112ca14:	1001703a 	wrctl	status,r2
8112ca18:	e0bffe17 	ldw	r2,-8(fp)
8112ca1c:	e0bff815 	stw	r2,-32(fp)
8112ca20:	e0bfff17 	ldw	r2,-4(fp)
8112ca24:	1080020b 	ldhu	r2,8(r2)
8112ca28:	10bfffcc 	andi	r2,r2,65535
8112ca2c:	1004d23a 	srli	r2,r2,8
8112ca30:	e0bffa05 	stb	r2,-24(fp)
8112ca34:	e0bfff17 	ldw	r2,-4(fp)
8112ca38:	1080020b 	ldhu	r2,8(r2)
8112ca3c:	e0bffa45 	stb	r2,-23(fp)
8112ca40:	e0bfff17 	ldw	r2,-4(fp)
8112ca44:	10c00117 	ldw	r3,4(r2)
8112ca48:	d0a08417 	ldw	r2,-32240(gp)
8112ca4c:	18800626 	beq	r3,r2,8112ca68 <OSMutexPost+0xc8>
8112ca50:	e0bff817 	ldw	r2,-32(fp)
8112ca54:	e0bff915 	stw	r2,-28(fp)
8112ca58:	e0bff917 	ldw	r2,-28(fp)
8112ca5c:	1001703a 	wrctl	status,r2
8112ca60:	00801904 	movi	r2,100
8112ca64:	00005106 	br	8112cbac <OSMutexPost+0x20c>
8112ca68:	d0a08417 	ldw	r2,-32240(gp)
8112ca6c:	10800c83 	ldbu	r2,50(r2)
8112ca70:	10c03fcc 	andi	r3,r2,255
8112ca74:	e0bffa03 	ldbu	r2,-24(fp)
8112ca78:	1880051e 	bne	r3,r2,8112ca90 <OSMutexPost+0xf0>
8112ca7c:	d0a08417 	ldw	r2,-32240(gp)
8112ca80:	e0fffa43 	ldbu	r3,-23(fp)
8112ca84:	180b883a 	mov	r5,r3
8112ca88:	1009883a 	mov	r4,r2
8112ca8c:	112cd340 	call	8112cd34 <OSMutex_RdyAtPrio>
8112ca90:	e0fffa03 	ldbu	r3,-24(fp)
8112ca94:	00a04574 	movhi	r2,33045
8112ca98:	108d5704 	addi	r2,r2,13660
8112ca9c:	18c7883a 	add	r3,r3,r3
8112caa0:	18c7883a 	add	r3,r3,r3
8112caa4:	10c5883a 	add	r2,r2,r3
8112caa8:	00c00044 	movi	r3,1
8112caac:	10c00015 	stw	r3,0(r2)
8112cab0:	e0bfff17 	ldw	r2,-4(fp)
8112cab4:	10800283 	ldbu	r2,10(r2)
8112cab8:	10803fcc 	andi	r2,r2,255
8112cabc:	10002e26 	beq	r2,zero,8112cb78 <OSMutexPost+0x1d8>
8112cac0:	000f883a 	mov	r7,zero
8112cac4:	01800404 	movi	r6,16
8112cac8:	000b883a 	mov	r5,zero
8112cacc:	e13fff17 	ldw	r4,-4(fp)
8112cad0:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112cad4:	e0bffa45 	stb	r2,-23(fp)
8112cad8:	e0bfff17 	ldw	r2,-4(fp)
8112cadc:	10c0020b 	ldhu	r3,8(r2)
8112cae0:	00bfc004 	movi	r2,-256
8112cae4:	1884703a 	and	r2,r3,r2
8112cae8:	1007883a 	mov	r3,r2
8112caec:	e0bfff17 	ldw	r2,-4(fp)
8112caf0:	10c0020d 	sth	r3,8(r2)
8112caf4:	e0bfff17 	ldw	r2,-4(fp)
8112caf8:	10c0020b 	ldhu	r3,8(r2)
8112cafc:	e0bffa43 	ldbu	r2,-23(fp)
8112cb00:	1884b03a 	or	r2,r3,r2
8112cb04:	1007883a 	mov	r3,r2
8112cb08:	e0bfff17 	ldw	r2,-4(fp)
8112cb0c:	10c0020d 	sth	r3,8(r2)
8112cb10:	e0fffa43 	ldbu	r3,-23(fp)
8112cb14:	00a04574 	movhi	r2,33045
8112cb18:	108d5704 	addi	r2,r2,13660
8112cb1c:	18c7883a 	add	r3,r3,r3
8112cb20:	18c7883a 	add	r3,r3,r3
8112cb24:	10c5883a 	add	r2,r2,r3
8112cb28:	10c00017 	ldw	r3,0(r2)
8112cb2c:	e0bfff17 	ldw	r2,-4(fp)
8112cb30:	10c00115 	stw	r3,4(r2)
8112cb34:	e0bffa43 	ldbu	r2,-23(fp)
8112cb38:	e0fffa03 	ldbu	r3,-24(fp)
8112cb3c:	18800736 	bltu	r3,r2,8112cb5c <OSMutexPost+0x1bc>
8112cb40:	e0bff817 	ldw	r2,-32(fp)
8112cb44:	e0bffb15 	stw	r2,-20(fp)
8112cb48:	e0bffb17 	ldw	r2,-20(fp)
8112cb4c:	1001703a 	wrctl	status,r2
8112cb50:	11295580 	call	81129558 <OS_Sched>
8112cb54:	00801e04 	movi	r2,120
8112cb58:	00001406 	br	8112cbac <OSMutexPost+0x20c>
8112cb5c:	e0bff817 	ldw	r2,-32(fp)
8112cb60:	e0bffc15 	stw	r2,-16(fp)
8112cb64:	e0bffc17 	ldw	r2,-16(fp)
8112cb68:	1001703a 	wrctl	status,r2
8112cb6c:	11295580 	call	81129558 <OS_Sched>
8112cb70:	0005883a 	mov	r2,zero
8112cb74:	00000d06 	br	8112cbac <OSMutexPost+0x20c>
8112cb78:	e0bfff17 	ldw	r2,-4(fp)
8112cb7c:	1080020b 	ldhu	r2,8(r2)
8112cb80:	10803fd4 	ori	r2,r2,255
8112cb84:	1007883a 	mov	r3,r2
8112cb88:	e0bfff17 	ldw	r2,-4(fp)
8112cb8c:	10c0020d 	sth	r3,8(r2)
8112cb90:	e0bfff17 	ldw	r2,-4(fp)
8112cb94:	10000115 	stw	zero,4(r2)
8112cb98:	e0bff817 	ldw	r2,-32(fp)
8112cb9c:	e0bffd15 	stw	r2,-12(fp)
8112cba0:	e0bffd17 	ldw	r2,-12(fp)
8112cba4:	1001703a 	wrctl	status,r2
8112cba8:	0005883a 	mov	r2,zero
8112cbac:	e037883a 	mov	sp,fp
8112cbb0:	dfc00117 	ldw	ra,4(sp)
8112cbb4:	df000017 	ldw	fp,0(sp)
8112cbb8:	dec00204 	addi	sp,sp,8
8112cbbc:	f800283a 	ret

8112cbc0 <OSMutexQuery>:
8112cbc0:	defff704 	addi	sp,sp,-36
8112cbc4:	de00012e 	bgeu	sp,et,8112cbcc <OSMutexQuery+0xc>
8112cbc8:	003b68fa 	trap	3
8112cbcc:	df000815 	stw	fp,32(sp)
8112cbd0:	df000804 	addi	fp,sp,32
8112cbd4:	e13ffe15 	stw	r4,-8(fp)
8112cbd8:	e17fff15 	stw	r5,-4(fp)
8112cbdc:	e03ffb15 	stw	zero,-20(fp)
8112cbe0:	d0a08303 	ldbu	r2,-32244(gp)
8112cbe4:	10803fcc 	andi	r2,r2,255
8112cbe8:	10000226 	beq	r2,zero,8112cbf4 <OSMutexQuery+0x34>
8112cbec:	00800184 	movi	r2,6
8112cbf0:	00004c06 	br	8112cd24 <OSMutexQuery+0x164>
8112cbf4:	e0bffe17 	ldw	r2,-8(fp)
8112cbf8:	1000021e 	bne	r2,zero,8112cc04 <OSMutexQuery+0x44>
8112cbfc:	00800104 	movi	r2,4
8112cc00:	00004806 	br	8112cd24 <OSMutexQuery+0x164>
8112cc04:	e0bfff17 	ldw	r2,-4(fp)
8112cc08:	1000021e 	bne	r2,zero,8112cc14 <OSMutexQuery+0x54>
8112cc0c:	00800244 	movi	r2,9
8112cc10:	00004406 	br	8112cd24 <OSMutexQuery+0x164>
8112cc14:	e0bffe17 	ldw	r2,-8(fp)
8112cc18:	10800003 	ldbu	r2,0(r2)
8112cc1c:	10803fcc 	andi	r2,r2,255
8112cc20:	10800120 	cmpeqi	r2,r2,4
8112cc24:	1000021e 	bne	r2,zero,8112cc30 <OSMutexQuery+0x70>
8112cc28:	00800044 	movi	r2,1
8112cc2c:	00003d06 	br	8112cd24 <OSMutexQuery+0x164>
8112cc30:	0005303a 	rdctl	r2,status
8112cc34:	e0bffd15 	stw	r2,-12(fp)
8112cc38:	e0fffd17 	ldw	r3,-12(fp)
8112cc3c:	00bfff84 	movi	r2,-2
8112cc40:	1884703a 	and	r2,r3,r2
8112cc44:	1001703a 	wrctl	status,r2
8112cc48:	e0bffd17 	ldw	r2,-12(fp)
8112cc4c:	e0bffb15 	stw	r2,-20(fp)
8112cc50:	e0bffe17 	ldw	r2,-8(fp)
8112cc54:	1080020b 	ldhu	r2,8(r2)
8112cc58:	10bfffcc 	andi	r2,r2,65535
8112cc5c:	1004d23a 	srli	r2,r2,8
8112cc60:	1007883a 	mov	r3,r2
8112cc64:	e0bfff17 	ldw	r2,-4(fp)
8112cc68:	10c00245 	stb	r3,9(r2)
8112cc6c:	e0bffe17 	ldw	r2,-8(fp)
8112cc70:	1080020b 	ldhu	r2,8(r2)
8112cc74:	1007883a 	mov	r3,r2
8112cc78:	e0bfff17 	ldw	r2,-4(fp)
8112cc7c:	10c00205 	stb	r3,8(r2)
8112cc80:	e0bfff17 	ldw	r2,-4(fp)
8112cc84:	10800203 	ldbu	r2,8(r2)
8112cc88:	10803fcc 	andi	r2,r2,255
8112cc8c:	10803fd8 	cmpnei	r2,r2,255
8112cc90:	1000041e 	bne	r2,zero,8112cca4 <OSMutexQuery+0xe4>
8112cc94:	e0bfff17 	ldw	r2,-4(fp)
8112cc98:	00c00044 	movi	r3,1
8112cc9c:	10c001c5 	stb	r3,7(r2)
8112cca0:	00000206 	br	8112ccac <OSMutexQuery+0xec>
8112cca4:	e0bfff17 	ldw	r2,-4(fp)
8112cca8:	100001c5 	stb	zero,7(r2)
8112ccac:	e0bffe17 	ldw	r2,-8(fp)
8112ccb0:	10c00283 	ldbu	r3,10(r2)
8112ccb4:	e0bfff17 	ldw	r2,-4(fp)
8112ccb8:	10c00185 	stb	r3,6(r2)
8112ccbc:	e0bffe17 	ldw	r2,-8(fp)
8112ccc0:	108002c4 	addi	r2,r2,11
8112ccc4:	e0bff915 	stw	r2,-28(fp)
8112ccc8:	e0bfff17 	ldw	r2,-4(fp)
8112cccc:	e0bffa15 	stw	r2,-24(fp)
8112ccd0:	e03ff805 	stb	zero,-32(fp)
8112ccd4:	00000b06 	br	8112cd04 <OSMutexQuery+0x144>
8112ccd8:	e0bffa17 	ldw	r2,-24(fp)
8112ccdc:	10c00044 	addi	r3,r2,1
8112cce0:	e0fffa15 	stw	r3,-24(fp)
8112cce4:	e0fff917 	ldw	r3,-28(fp)
8112cce8:	19000044 	addi	r4,r3,1
8112ccec:	e13ff915 	stw	r4,-28(fp)
8112ccf0:	18c00003 	ldbu	r3,0(r3)
8112ccf4:	10c00005 	stb	r3,0(r2)
8112ccf8:	e0bff803 	ldbu	r2,-32(fp)
8112ccfc:	10800044 	addi	r2,r2,1
8112cd00:	e0bff805 	stb	r2,-32(fp)
8112cd04:	e0bff803 	ldbu	r2,-32(fp)
8112cd08:	108001b0 	cmpltui	r2,r2,6
8112cd0c:	103ff21e 	bne	r2,zero,8112ccd8 <__reset+0xfb10ccd8>
8112cd10:	e0bffb17 	ldw	r2,-20(fp)
8112cd14:	e0bffc15 	stw	r2,-16(fp)
8112cd18:	e0bffc17 	ldw	r2,-16(fp)
8112cd1c:	1001703a 	wrctl	status,r2
8112cd20:	0005883a 	mov	r2,zero
8112cd24:	e037883a 	mov	sp,fp
8112cd28:	df000017 	ldw	fp,0(sp)
8112cd2c:	dec00104 	addi	sp,sp,4
8112cd30:	f800283a 	ret

8112cd34 <OSMutex_RdyAtPrio>:
8112cd34:	defffc04 	addi	sp,sp,-16
8112cd38:	de00012e 	bgeu	sp,et,8112cd40 <OSMutex_RdyAtPrio+0xc>
8112cd3c:	003b68fa 	trap	3
8112cd40:	df000315 	stw	fp,12(sp)
8112cd44:	df000304 	addi	fp,sp,12
8112cd48:	e13ffe15 	stw	r4,-8(fp)
8112cd4c:	2805883a 	mov	r2,r5
8112cd50:	e0bfff05 	stb	r2,-4(fp)
8112cd54:	e0bffe17 	ldw	r2,-8(fp)
8112cd58:	10800d03 	ldbu	r2,52(r2)
8112cd5c:	e0bffd05 	stb	r2,-12(fp)
8112cd60:	e0fffd03 	ldbu	r3,-12(fp)
8112cd64:	e13ffd03 	ldbu	r4,-12(fp)
8112cd68:	d0a08044 	addi	r2,gp,-32255
8112cd6c:	2085883a 	add	r2,r4,r2
8112cd70:	10800003 	ldbu	r2,0(r2)
8112cd74:	1009883a 	mov	r4,r2
8112cd78:	e0bffe17 	ldw	r2,-8(fp)
8112cd7c:	10800d43 	ldbu	r2,53(r2)
8112cd80:	0084303a 	nor	r2,zero,r2
8112cd84:	2084703a 	and	r2,r4,r2
8112cd88:	1009883a 	mov	r4,r2
8112cd8c:	d0a08044 	addi	r2,gp,-32255
8112cd90:	1885883a 	add	r2,r3,r2
8112cd94:	11000005 	stb	r4,0(r2)
8112cd98:	e0fffd03 	ldbu	r3,-12(fp)
8112cd9c:	d0a08044 	addi	r2,gp,-32255
8112cda0:	1885883a 	add	r2,r3,r2
8112cda4:	10800003 	ldbu	r2,0(r2)
8112cda8:	10803fcc 	andi	r2,r2,255
8112cdac:	1000071e 	bne	r2,zero,8112cdcc <OSMutex_RdyAtPrio+0x98>
8112cdb0:	e0bffe17 	ldw	r2,-8(fp)
8112cdb4:	10800d83 	ldbu	r2,54(r2)
8112cdb8:	0084303a 	nor	r2,zero,r2
8112cdbc:	1007883a 	mov	r3,r2
8112cdc0:	d0a08003 	ldbu	r2,-32256(gp)
8112cdc4:	1884703a 	and	r2,r3,r2
8112cdc8:	d0a08005 	stb	r2,-32256(gp)
8112cdcc:	e0bffe17 	ldw	r2,-8(fp)
8112cdd0:	e0ffff03 	ldbu	r3,-4(fp)
8112cdd4:	10c00c85 	stb	r3,50(r2)
8112cdd8:	e0bfff03 	ldbu	r2,-4(fp)
8112cddc:	1004d0fa 	srli	r2,r2,3
8112cde0:	108001cc 	andi	r2,r2,7
8112cde4:	1007883a 	mov	r3,r2
8112cde8:	e0bffe17 	ldw	r2,-8(fp)
8112cdec:	10c00d05 	stb	r3,52(r2)
8112cdf0:	e0bfff03 	ldbu	r2,-4(fp)
8112cdf4:	108001cc 	andi	r2,r2,7
8112cdf8:	1007883a 	mov	r3,r2
8112cdfc:	e0bffe17 	ldw	r2,-8(fp)
8112ce00:	10c00cc5 	stb	r3,51(r2)
8112ce04:	e0bffe17 	ldw	r2,-8(fp)
8112ce08:	10800d03 	ldbu	r2,52(r2)
8112ce0c:	10803fcc 	andi	r2,r2,255
8112ce10:	00c00044 	movi	r3,1
8112ce14:	1884983a 	sll	r2,r3,r2
8112ce18:	1007883a 	mov	r3,r2
8112ce1c:	e0bffe17 	ldw	r2,-8(fp)
8112ce20:	10c00d85 	stb	r3,54(r2)
8112ce24:	e0bffe17 	ldw	r2,-8(fp)
8112ce28:	10800cc3 	ldbu	r2,51(r2)
8112ce2c:	10803fcc 	andi	r2,r2,255
8112ce30:	00c00044 	movi	r3,1
8112ce34:	1884983a 	sll	r2,r3,r2
8112ce38:	1007883a 	mov	r3,r2
8112ce3c:	e0bffe17 	ldw	r2,-8(fp)
8112ce40:	10c00d45 	stb	r3,53(r2)
8112ce44:	e0bffe17 	ldw	r2,-8(fp)
8112ce48:	10c00d83 	ldbu	r3,54(r2)
8112ce4c:	d0a08003 	ldbu	r2,-32256(gp)
8112ce50:	1884b03a 	or	r2,r3,r2
8112ce54:	d0a08005 	stb	r2,-32256(gp)
8112ce58:	e0bffe17 	ldw	r2,-8(fp)
8112ce5c:	10800d03 	ldbu	r2,52(r2)
8112ce60:	10c03fcc 	andi	r3,r2,255
8112ce64:	e0bffe17 	ldw	r2,-8(fp)
8112ce68:	10800d03 	ldbu	r2,52(r2)
8112ce6c:	11003fcc 	andi	r4,r2,255
8112ce70:	d0a08044 	addi	r2,gp,-32255
8112ce74:	2085883a 	add	r2,r4,r2
8112ce78:	11000003 	ldbu	r4,0(r2)
8112ce7c:	e0bffe17 	ldw	r2,-8(fp)
8112ce80:	10800d43 	ldbu	r2,53(r2)
8112ce84:	2084b03a 	or	r2,r4,r2
8112ce88:	1009883a 	mov	r4,r2
8112ce8c:	d0a08044 	addi	r2,gp,-32255
8112ce90:	1885883a 	add	r2,r3,r2
8112ce94:	11000005 	stb	r4,0(r2)
8112ce98:	e0ffff03 	ldbu	r3,-4(fp)
8112ce9c:	00a04574 	movhi	r2,33045
8112cea0:	108d5704 	addi	r2,r2,13660
8112cea4:	18c7883a 	add	r3,r3,r3
8112cea8:	18c7883a 	add	r3,r3,r3
8112ceac:	10c5883a 	add	r2,r2,r3
8112ceb0:	e0fffe17 	ldw	r3,-8(fp)
8112ceb4:	10c00015 	stw	r3,0(r2)
8112ceb8:	0001883a 	nop
8112cebc:	e037883a 	mov	sp,fp
8112cec0:	df000017 	ldw	fp,0(sp)
8112cec4:	dec00104 	addi	sp,sp,4
8112cec8:	f800283a 	ret

8112cecc <OSQAccept>:
8112cecc:	defff804 	addi	sp,sp,-32
8112ced0:	de00012e 	bgeu	sp,et,8112ced8 <OSQAccept+0xc>
8112ced4:	003b68fa 	trap	3
8112ced8:	df000715 	stw	fp,28(sp)
8112cedc:	df000704 	addi	fp,sp,28
8112cee0:	e13ffe15 	stw	r4,-8(fp)
8112cee4:	e17fff15 	stw	r5,-4(fp)
8112cee8:	e03ffa15 	stw	zero,-24(fp)
8112ceec:	e0bfff17 	ldw	r2,-4(fp)
8112cef0:	1000021e 	bne	r2,zero,8112cefc <OSQAccept+0x30>
8112cef4:	0005883a 	mov	r2,zero
8112cef8:	00004206 	br	8112d004 <OSQAccept+0x138>
8112cefc:	e0bffe17 	ldw	r2,-8(fp)
8112cf00:	1000051e 	bne	r2,zero,8112cf18 <OSQAccept+0x4c>
8112cf04:	e0bfff17 	ldw	r2,-4(fp)
8112cf08:	00c00104 	movi	r3,4
8112cf0c:	10c00005 	stb	r3,0(r2)
8112cf10:	0005883a 	mov	r2,zero
8112cf14:	00003b06 	br	8112d004 <OSQAccept+0x138>
8112cf18:	e0bffe17 	ldw	r2,-8(fp)
8112cf1c:	10800003 	ldbu	r2,0(r2)
8112cf20:	10803fcc 	andi	r2,r2,255
8112cf24:	108000a0 	cmpeqi	r2,r2,2
8112cf28:	1000051e 	bne	r2,zero,8112cf40 <OSQAccept+0x74>
8112cf2c:	e0bfff17 	ldw	r2,-4(fp)
8112cf30:	00c00044 	movi	r3,1
8112cf34:	10c00005 	stb	r3,0(r2)
8112cf38:	0005883a 	mov	r2,zero
8112cf3c:	00003106 	br	8112d004 <OSQAccept+0x138>
8112cf40:	0005303a 	rdctl	r2,status
8112cf44:	e0bffd15 	stw	r2,-12(fp)
8112cf48:	e0fffd17 	ldw	r3,-12(fp)
8112cf4c:	00bfff84 	movi	r2,-2
8112cf50:	1884703a 	and	r2,r3,r2
8112cf54:	1001703a 	wrctl	status,r2
8112cf58:	e0bffd17 	ldw	r2,-12(fp)
8112cf5c:	e0bffa15 	stw	r2,-24(fp)
8112cf60:	e0bffe17 	ldw	r2,-8(fp)
8112cf64:	10800117 	ldw	r2,4(r2)
8112cf68:	e0bffc15 	stw	r2,-16(fp)
8112cf6c:	e0bffc17 	ldw	r2,-16(fp)
8112cf70:	1080058b 	ldhu	r2,22(r2)
8112cf74:	10bfffcc 	andi	r2,r2,65535
8112cf78:	10001926 	beq	r2,zero,8112cfe0 <OSQAccept+0x114>
8112cf7c:	e0bffc17 	ldw	r2,-16(fp)
8112cf80:	10800417 	ldw	r2,16(r2)
8112cf84:	11000104 	addi	r4,r2,4
8112cf88:	e0fffc17 	ldw	r3,-16(fp)
8112cf8c:	19000415 	stw	r4,16(r3)
8112cf90:	10800017 	ldw	r2,0(r2)
8112cf94:	e0bff915 	stw	r2,-28(fp)
8112cf98:	e0bffc17 	ldw	r2,-16(fp)
8112cf9c:	1080058b 	ldhu	r2,22(r2)
8112cfa0:	10bfffc4 	addi	r2,r2,-1
8112cfa4:	1007883a 	mov	r3,r2
8112cfa8:	e0bffc17 	ldw	r2,-16(fp)
8112cfac:	10c0058d 	sth	r3,22(r2)
8112cfb0:	e0bffc17 	ldw	r2,-16(fp)
8112cfb4:	10c00417 	ldw	r3,16(r2)
8112cfb8:	e0bffc17 	ldw	r2,-16(fp)
8112cfbc:	10800217 	ldw	r2,8(r2)
8112cfc0:	1880041e 	bne	r3,r2,8112cfd4 <OSQAccept+0x108>
8112cfc4:	e0bffc17 	ldw	r2,-16(fp)
8112cfc8:	10c00117 	ldw	r3,4(r2)
8112cfcc:	e0bffc17 	ldw	r2,-16(fp)
8112cfd0:	10c00415 	stw	r3,16(r2)
8112cfd4:	e0bfff17 	ldw	r2,-4(fp)
8112cfd8:	10000005 	stb	zero,0(r2)
8112cfdc:	00000406 	br	8112cff0 <OSQAccept+0x124>
8112cfe0:	e0bfff17 	ldw	r2,-4(fp)
8112cfe4:	00c007c4 	movi	r3,31
8112cfe8:	10c00005 	stb	r3,0(r2)
8112cfec:	e03ff915 	stw	zero,-28(fp)
8112cff0:	e0bffa17 	ldw	r2,-24(fp)
8112cff4:	e0bffb15 	stw	r2,-20(fp)
8112cff8:	e0bffb17 	ldw	r2,-20(fp)
8112cffc:	1001703a 	wrctl	status,r2
8112d000:	e0bff917 	ldw	r2,-28(fp)
8112d004:	e037883a 	mov	sp,fp
8112d008:	df000017 	ldw	fp,0(sp)
8112d00c:	dec00104 	addi	sp,sp,4
8112d010:	f800283a 	ret

8112d014 <OSQCreate>:
8112d014:	defff404 	addi	sp,sp,-48
8112d018:	de00012e 	bgeu	sp,et,8112d020 <OSQCreate+0xc>
8112d01c:	003b68fa 	trap	3
8112d020:	dfc00b15 	stw	ra,44(sp)
8112d024:	df000a15 	stw	fp,40(sp)
8112d028:	df000a04 	addi	fp,sp,40
8112d02c:	e13ffe15 	stw	r4,-8(fp)
8112d030:	2805883a 	mov	r2,r5
8112d034:	e0bfff0d 	sth	r2,-4(fp)
8112d038:	e03ff715 	stw	zero,-36(fp)
8112d03c:	d0a08303 	ldbu	r2,-32244(gp)
8112d040:	10803fcc 	andi	r2,r2,255
8112d044:	10000226 	beq	r2,zero,8112d050 <OSQCreate+0x3c>
8112d048:	0005883a 	mov	r2,zero
8112d04c:	00005906 	br	8112d1b4 <OSQCreate+0x1a0>
8112d050:	0005303a 	rdctl	r2,status
8112d054:	e0bffd15 	stw	r2,-12(fp)
8112d058:	e0fffd17 	ldw	r3,-12(fp)
8112d05c:	00bfff84 	movi	r2,-2
8112d060:	1884703a 	and	r2,r3,r2
8112d064:	1001703a 	wrctl	status,r2
8112d068:	e0bffd17 	ldw	r2,-12(fp)
8112d06c:	e0bff715 	stw	r2,-36(fp)
8112d070:	d0a08217 	ldw	r2,-32248(gp)
8112d074:	e0bff615 	stw	r2,-40(fp)
8112d078:	d0a08217 	ldw	r2,-32248(gp)
8112d07c:	10000326 	beq	r2,zero,8112d08c <OSQCreate+0x78>
8112d080:	d0a08217 	ldw	r2,-32248(gp)
8112d084:	10800117 	ldw	r2,4(r2)
8112d088:	d0a08215 	stw	r2,-32248(gp)
8112d08c:	e0bff717 	ldw	r2,-36(fp)
8112d090:	e0bff815 	stw	r2,-32(fp)
8112d094:	e0bff817 	ldw	r2,-32(fp)
8112d098:	1001703a 	wrctl	status,r2
8112d09c:	e0bff617 	ldw	r2,-40(fp)
8112d0a0:	10004326 	beq	r2,zero,8112d1b0 <OSQCreate+0x19c>
8112d0a4:	0005303a 	rdctl	r2,status
8112d0a8:	e0bff915 	stw	r2,-28(fp)
8112d0ac:	e0fff917 	ldw	r3,-28(fp)
8112d0b0:	00bfff84 	movi	r2,-2
8112d0b4:	1884703a 	and	r2,r3,r2
8112d0b8:	1001703a 	wrctl	status,r2
8112d0bc:	e0bff917 	ldw	r2,-28(fp)
8112d0c0:	e0bff715 	stw	r2,-36(fp)
8112d0c4:	d0a07f17 	ldw	r2,-32260(gp)
8112d0c8:	e0bffb15 	stw	r2,-20(fp)
8112d0cc:	e0bffb17 	ldw	r2,-20(fp)
8112d0d0:	10002d26 	beq	r2,zero,8112d188 <OSQCreate+0x174>
8112d0d4:	d0a07f17 	ldw	r2,-32260(gp)
8112d0d8:	10800017 	ldw	r2,0(r2)
8112d0dc:	d0a07f15 	stw	r2,-32260(gp)
8112d0e0:	e0bff717 	ldw	r2,-36(fp)
8112d0e4:	e0bffa15 	stw	r2,-24(fp)
8112d0e8:	e0bffa17 	ldw	r2,-24(fp)
8112d0ec:	1001703a 	wrctl	status,r2
8112d0f0:	e0bffb17 	ldw	r2,-20(fp)
8112d0f4:	e0fffe17 	ldw	r3,-8(fp)
8112d0f8:	10c00115 	stw	r3,4(r2)
8112d0fc:	e0bfff0b 	ldhu	r2,-4(fp)
8112d100:	1085883a 	add	r2,r2,r2
8112d104:	1085883a 	add	r2,r2,r2
8112d108:	1007883a 	mov	r3,r2
8112d10c:	e0bffe17 	ldw	r2,-8(fp)
8112d110:	10c7883a 	add	r3,r2,r3
8112d114:	e0bffb17 	ldw	r2,-20(fp)
8112d118:	10c00215 	stw	r3,8(r2)
8112d11c:	e0bffb17 	ldw	r2,-20(fp)
8112d120:	e0fffe17 	ldw	r3,-8(fp)
8112d124:	10c00315 	stw	r3,12(r2)
8112d128:	e0bffb17 	ldw	r2,-20(fp)
8112d12c:	e0fffe17 	ldw	r3,-8(fp)
8112d130:	10c00415 	stw	r3,16(r2)
8112d134:	e0bffb17 	ldw	r2,-20(fp)
8112d138:	e0ffff0b 	ldhu	r3,-4(fp)
8112d13c:	10c0050d 	sth	r3,20(r2)
8112d140:	e0bffb17 	ldw	r2,-20(fp)
8112d144:	1000058d 	sth	zero,22(r2)
8112d148:	e0bff617 	ldw	r2,-40(fp)
8112d14c:	00c00084 	movi	r3,2
8112d150:	10c00005 	stb	r3,0(r2)
8112d154:	e0bff617 	ldw	r2,-40(fp)
8112d158:	1000020d 	sth	zero,8(r2)
8112d15c:	e0bff617 	ldw	r2,-40(fp)
8112d160:	e0fffb17 	ldw	r3,-20(fp)
8112d164:	10c00115 	stw	r3,4(r2)
8112d168:	e0bff617 	ldw	r2,-40(fp)
8112d16c:	00c00fc4 	movi	r3,63
8112d170:	10c00445 	stb	r3,17(r2)
8112d174:	e0bff617 	ldw	r2,-40(fp)
8112d178:	10000485 	stb	zero,18(r2)
8112d17c:	e13ff617 	ldw	r4,-40(fp)
8112d180:	11290740 	call	81129074 <OS_EventWaitListInit>
8112d184:	00000a06 	br	8112d1b0 <OSQCreate+0x19c>
8112d188:	d0e08217 	ldw	r3,-32248(gp)
8112d18c:	e0bff617 	ldw	r2,-40(fp)
8112d190:	10c00115 	stw	r3,4(r2)
8112d194:	e0bff617 	ldw	r2,-40(fp)
8112d198:	d0a08215 	stw	r2,-32248(gp)
8112d19c:	e0bff717 	ldw	r2,-36(fp)
8112d1a0:	e0bffc15 	stw	r2,-16(fp)
8112d1a4:	e0bffc17 	ldw	r2,-16(fp)
8112d1a8:	1001703a 	wrctl	status,r2
8112d1ac:	e03ff615 	stw	zero,-40(fp)
8112d1b0:	e0bff617 	ldw	r2,-40(fp)
8112d1b4:	e037883a 	mov	sp,fp
8112d1b8:	dfc00117 	ldw	ra,4(sp)
8112d1bc:	df000017 	ldw	fp,0(sp)
8112d1c0:	dec00204 	addi	sp,sp,8
8112d1c4:	f800283a 	ret

8112d1c8 <OSQDel>:
8112d1c8:	defff204 	addi	sp,sp,-56
8112d1cc:	de00012e 	bgeu	sp,et,8112d1d4 <OSQDel+0xc>
8112d1d0:	003b68fa 	trap	3
8112d1d4:	dfc00d15 	stw	ra,52(sp)
8112d1d8:	df000c15 	stw	fp,48(sp)
8112d1dc:	df000c04 	addi	fp,sp,48
8112d1e0:	e13ffd15 	stw	r4,-12(fp)
8112d1e4:	2805883a 	mov	r2,r5
8112d1e8:	e1bfff15 	stw	r6,-4(fp)
8112d1ec:	e0bffe05 	stb	r2,-8(fp)
8112d1f0:	e03ff615 	stw	zero,-40(fp)
8112d1f4:	e0bfff17 	ldw	r2,-4(fp)
8112d1f8:	1000021e 	bne	r2,zero,8112d204 <OSQDel+0x3c>
8112d1fc:	e0bffd17 	ldw	r2,-12(fp)
8112d200:	00008e06 	br	8112d43c <OSQDel+0x274>
8112d204:	e0bffd17 	ldw	r2,-12(fp)
8112d208:	1000051e 	bne	r2,zero,8112d220 <OSQDel+0x58>
8112d20c:	e0bfff17 	ldw	r2,-4(fp)
8112d210:	00c00104 	movi	r3,4
8112d214:	10c00005 	stb	r3,0(r2)
8112d218:	e0bffd17 	ldw	r2,-12(fp)
8112d21c:	00008706 	br	8112d43c <OSQDel+0x274>
8112d220:	e0bffd17 	ldw	r2,-12(fp)
8112d224:	10800003 	ldbu	r2,0(r2)
8112d228:	10803fcc 	andi	r2,r2,255
8112d22c:	108000a0 	cmpeqi	r2,r2,2
8112d230:	1000051e 	bne	r2,zero,8112d248 <OSQDel+0x80>
8112d234:	e0bfff17 	ldw	r2,-4(fp)
8112d238:	00c00044 	movi	r3,1
8112d23c:	10c00005 	stb	r3,0(r2)
8112d240:	e0bffd17 	ldw	r2,-12(fp)
8112d244:	00007d06 	br	8112d43c <OSQDel+0x274>
8112d248:	d0a08303 	ldbu	r2,-32244(gp)
8112d24c:	10803fcc 	andi	r2,r2,255
8112d250:	10000526 	beq	r2,zero,8112d268 <OSQDel+0xa0>
8112d254:	e0bfff17 	ldw	r2,-4(fp)
8112d258:	00c003c4 	movi	r3,15
8112d25c:	10c00005 	stb	r3,0(r2)
8112d260:	e0bffd17 	ldw	r2,-12(fp)
8112d264:	00007506 	br	8112d43c <OSQDel+0x274>
8112d268:	0005303a 	rdctl	r2,status
8112d26c:	e0bffc15 	stw	r2,-16(fp)
8112d270:	e0fffc17 	ldw	r3,-16(fp)
8112d274:	00bfff84 	movi	r2,-2
8112d278:	1884703a 	and	r2,r3,r2
8112d27c:	1001703a 	wrctl	status,r2
8112d280:	e0bffc17 	ldw	r2,-16(fp)
8112d284:	e0bff615 	stw	r2,-40(fp)
8112d288:	e0bffd17 	ldw	r2,-12(fp)
8112d28c:	10800283 	ldbu	r2,10(r2)
8112d290:	10803fcc 	andi	r2,r2,255
8112d294:	10000326 	beq	r2,zero,8112d2a4 <OSQDel+0xdc>
8112d298:	00800044 	movi	r2,1
8112d29c:	e0bff405 	stb	r2,-48(fp)
8112d2a0:	00000106 	br	8112d2a8 <OSQDel+0xe0>
8112d2a4:	e03ff405 	stb	zero,-48(fp)
8112d2a8:	e0bffe03 	ldbu	r2,-8(fp)
8112d2ac:	10000326 	beq	r2,zero,8112d2bc <OSQDel+0xf4>
8112d2b0:	10800060 	cmpeqi	r2,r2,1
8112d2b4:	1000301e 	bne	r2,zero,8112d378 <OSQDel+0x1b0>
8112d2b8:	00005506 	br	8112d410 <OSQDel+0x248>
8112d2bc:	e0bff403 	ldbu	r2,-48(fp)
8112d2c0:	10001e1e 	bne	r2,zero,8112d33c <OSQDel+0x174>
8112d2c4:	e0bffd17 	ldw	r2,-12(fp)
8112d2c8:	00c00fc4 	movi	r3,63
8112d2cc:	10c00445 	stb	r3,17(r2)
8112d2d0:	e0bffd17 	ldw	r2,-12(fp)
8112d2d4:	10000485 	stb	zero,18(r2)
8112d2d8:	e0bffd17 	ldw	r2,-12(fp)
8112d2dc:	10800117 	ldw	r2,4(r2)
8112d2e0:	e0bff815 	stw	r2,-32(fp)
8112d2e4:	d0e07f17 	ldw	r3,-32260(gp)
8112d2e8:	e0bff817 	ldw	r2,-32(fp)
8112d2ec:	10c00015 	stw	r3,0(r2)
8112d2f0:	e0bff817 	ldw	r2,-32(fp)
8112d2f4:	d0a07f15 	stw	r2,-32260(gp)
8112d2f8:	e0bffd17 	ldw	r2,-12(fp)
8112d2fc:	10000005 	stb	zero,0(r2)
8112d300:	d0e08217 	ldw	r3,-32248(gp)
8112d304:	e0bffd17 	ldw	r2,-12(fp)
8112d308:	10c00115 	stw	r3,4(r2)
8112d30c:	e0bffd17 	ldw	r2,-12(fp)
8112d310:	1000020d 	sth	zero,8(r2)
8112d314:	e0bffd17 	ldw	r2,-12(fp)
8112d318:	d0a08215 	stw	r2,-32248(gp)
8112d31c:	e0bff617 	ldw	r2,-40(fp)
8112d320:	e0bff715 	stw	r2,-36(fp)
8112d324:	e0bff717 	ldw	r2,-36(fp)
8112d328:	1001703a 	wrctl	status,r2
8112d32c:	e0bfff17 	ldw	r2,-4(fp)
8112d330:	10000005 	stb	zero,0(r2)
8112d334:	e03ff515 	stw	zero,-44(fp)
8112d338:	00003f06 	br	8112d438 <OSQDel+0x270>
8112d33c:	e0bff617 	ldw	r2,-40(fp)
8112d340:	e0bff915 	stw	r2,-28(fp)
8112d344:	e0bff917 	ldw	r2,-28(fp)
8112d348:	1001703a 	wrctl	status,r2
8112d34c:	e0bfff17 	ldw	r2,-4(fp)
8112d350:	00c01244 	movi	r3,73
8112d354:	10c00005 	stb	r3,0(r2)
8112d358:	e0bffd17 	ldw	r2,-12(fp)
8112d35c:	e0bff515 	stw	r2,-44(fp)
8112d360:	00003506 	br	8112d438 <OSQDel+0x270>
8112d364:	000f883a 	mov	r7,zero
8112d368:	01800104 	movi	r6,4
8112d36c:	000b883a 	mov	r5,zero
8112d370:	e13ffd17 	ldw	r4,-12(fp)
8112d374:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112d378:	e0bffd17 	ldw	r2,-12(fp)
8112d37c:	10800283 	ldbu	r2,10(r2)
8112d380:	10803fcc 	andi	r2,r2,255
8112d384:	103ff71e 	bne	r2,zero,8112d364 <__reset+0xfb10d364>
8112d388:	e0bffd17 	ldw	r2,-12(fp)
8112d38c:	00c00fc4 	movi	r3,63
8112d390:	10c00445 	stb	r3,17(r2)
8112d394:	e0bffd17 	ldw	r2,-12(fp)
8112d398:	10000485 	stb	zero,18(r2)
8112d39c:	e0bffd17 	ldw	r2,-12(fp)
8112d3a0:	10800117 	ldw	r2,4(r2)
8112d3a4:	e0bff815 	stw	r2,-32(fp)
8112d3a8:	d0e07f17 	ldw	r3,-32260(gp)
8112d3ac:	e0bff817 	ldw	r2,-32(fp)
8112d3b0:	10c00015 	stw	r3,0(r2)
8112d3b4:	e0bff817 	ldw	r2,-32(fp)
8112d3b8:	d0a07f15 	stw	r2,-32260(gp)
8112d3bc:	e0bffd17 	ldw	r2,-12(fp)
8112d3c0:	10000005 	stb	zero,0(r2)
8112d3c4:	d0e08217 	ldw	r3,-32248(gp)
8112d3c8:	e0bffd17 	ldw	r2,-12(fp)
8112d3cc:	10c00115 	stw	r3,4(r2)
8112d3d0:	e0bffd17 	ldw	r2,-12(fp)
8112d3d4:	1000020d 	sth	zero,8(r2)
8112d3d8:	e0bffd17 	ldw	r2,-12(fp)
8112d3dc:	d0a08215 	stw	r2,-32248(gp)
8112d3e0:	e0bff617 	ldw	r2,-40(fp)
8112d3e4:	e0bffa15 	stw	r2,-24(fp)
8112d3e8:	e0bffa17 	ldw	r2,-24(fp)
8112d3ec:	1001703a 	wrctl	status,r2
8112d3f0:	e0bff403 	ldbu	r2,-48(fp)
8112d3f4:	10800058 	cmpnei	r2,r2,1
8112d3f8:	1000011e 	bne	r2,zero,8112d400 <OSQDel+0x238>
8112d3fc:	11295580 	call	81129558 <OS_Sched>
8112d400:	e0bfff17 	ldw	r2,-4(fp)
8112d404:	10000005 	stb	zero,0(r2)
8112d408:	e03ff515 	stw	zero,-44(fp)
8112d40c:	00000a06 	br	8112d438 <OSQDel+0x270>
8112d410:	e0bff617 	ldw	r2,-40(fp)
8112d414:	e0bffb15 	stw	r2,-20(fp)
8112d418:	e0bffb17 	ldw	r2,-20(fp)
8112d41c:	1001703a 	wrctl	status,r2
8112d420:	e0bfff17 	ldw	r2,-4(fp)
8112d424:	00c001c4 	movi	r3,7
8112d428:	10c00005 	stb	r3,0(r2)
8112d42c:	e0bffd17 	ldw	r2,-12(fp)
8112d430:	e0bff515 	stw	r2,-44(fp)
8112d434:	0001883a 	nop
8112d438:	e0bff517 	ldw	r2,-44(fp)
8112d43c:	e037883a 	mov	sp,fp
8112d440:	dfc00117 	ldw	ra,4(sp)
8112d444:	df000017 	ldw	fp,0(sp)
8112d448:	dec00204 	addi	sp,sp,8
8112d44c:	f800283a 	ret

8112d450 <OSQFlush>:
8112d450:	defffa04 	addi	sp,sp,-24
8112d454:	de00012e 	bgeu	sp,et,8112d45c <OSQFlush+0xc>
8112d458:	003b68fa 	trap	3
8112d45c:	df000515 	stw	fp,20(sp)
8112d460:	df000504 	addi	fp,sp,20
8112d464:	e13fff15 	stw	r4,-4(fp)
8112d468:	e03ffb15 	stw	zero,-20(fp)
8112d46c:	e0bfff17 	ldw	r2,-4(fp)
8112d470:	1000021e 	bne	r2,zero,8112d47c <OSQFlush+0x2c>
8112d474:	00800104 	movi	r2,4
8112d478:	00002106 	br	8112d500 <OSQFlush+0xb0>
8112d47c:	e0bfff17 	ldw	r2,-4(fp)
8112d480:	10800003 	ldbu	r2,0(r2)
8112d484:	10803fcc 	andi	r2,r2,255
8112d488:	108000a0 	cmpeqi	r2,r2,2
8112d48c:	1000021e 	bne	r2,zero,8112d498 <OSQFlush+0x48>
8112d490:	00800044 	movi	r2,1
8112d494:	00001a06 	br	8112d500 <OSQFlush+0xb0>
8112d498:	0005303a 	rdctl	r2,status
8112d49c:	e0bffd15 	stw	r2,-12(fp)
8112d4a0:	e0fffd17 	ldw	r3,-12(fp)
8112d4a4:	00bfff84 	movi	r2,-2
8112d4a8:	1884703a 	and	r2,r3,r2
8112d4ac:	1001703a 	wrctl	status,r2
8112d4b0:	e0bffd17 	ldw	r2,-12(fp)
8112d4b4:	e0bffb15 	stw	r2,-20(fp)
8112d4b8:	e0bfff17 	ldw	r2,-4(fp)
8112d4bc:	10800117 	ldw	r2,4(r2)
8112d4c0:	e0bffc15 	stw	r2,-16(fp)
8112d4c4:	e0bffc17 	ldw	r2,-16(fp)
8112d4c8:	10c00117 	ldw	r3,4(r2)
8112d4cc:	e0bffc17 	ldw	r2,-16(fp)
8112d4d0:	10c00315 	stw	r3,12(r2)
8112d4d4:	e0bffc17 	ldw	r2,-16(fp)
8112d4d8:	10c00117 	ldw	r3,4(r2)
8112d4dc:	e0bffc17 	ldw	r2,-16(fp)
8112d4e0:	10c00415 	stw	r3,16(r2)
8112d4e4:	e0bffc17 	ldw	r2,-16(fp)
8112d4e8:	1000058d 	sth	zero,22(r2)
8112d4ec:	e0bffb17 	ldw	r2,-20(fp)
8112d4f0:	e0bffe15 	stw	r2,-8(fp)
8112d4f4:	e0bffe17 	ldw	r2,-8(fp)
8112d4f8:	1001703a 	wrctl	status,r2
8112d4fc:	0005883a 	mov	r2,zero
8112d500:	e037883a 	mov	sp,fp
8112d504:	df000017 	ldw	fp,0(sp)
8112d508:	dec00104 	addi	sp,sp,4
8112d50c:	f800283a 	ret

8112d510 <OSQPend>:
8112d510:	defff304 	addi	sp,sp,-52
8112d514:	de00012e 	bgeu	sp,et,8112d51c <OSQPend+0xc>
8112d518:	003b68fa 	trap	3
8112d51c:	dfc00c15 	stw	ra,48(sp)
8112d520:	df000b15 	stw	fp,44(sp)
8112d524:	df000b04 	addi	fp,sp,44
8112d528:	e13ffd15 	stw	r4,-12(fp)
8112d52c:	2805883a 	mov	r2,r5
8112d530:	e1bfff15 	stw	r6,-4(fp)
8112d534:	e0bffe0d 	sth	r2,-8(fp)
8112d538:	e03ff615 	stw	zero,-40(fp)
8112d53c:	e0bfff17 	ldw	r2,-4(fp)
8112d540:	1000021e 	bne	r2,zero,8112d54c <OSQPend+0x3c>
8112d544:	0005883a 	mov	r2,zero
8112d548:	00009106 	br	8112d790 <OSQPend+0x280>
8112d54c:	e0bffd17 	ldw	r2,-12(fp)
8112d550:	1000051e 	bne	r2,zero,8112d568 <OSQPend+0x58>
8112d554:	e0bfff17 	ldw	r2,-4(fp)
8112d558:	00c00104 	movi	r3,4
8112d55c:	10c00005 	stb	r3,0(r2)
8112d560:	0005883a 	mov	r2,zero
8112d564:	00008a06 	br	8112d790 <OSQPend+0x280>
8112d568:	e0bffd17 	ldw	r2,-12(fp)
8112d56c:	10800003 	ldbu	r2,0(r2)
8112d570:	10803fcc 	andi	r2,r2,255
8112d574:	108000a0 	cmpeqi	r2,r2,2
8112d578:	1000051e 	bne	r2,zero,8112d590 <OSQPend+0x80>
8112d57c:	e0bfff17 	ldw	r2,-4(fp)
8112d580:	00c00044 	movi	r3,1
8112d584:	10c00005 	stb	r3,0(r2)
8112d588:	0005883a 	mov	r2,zero
8112d58c:	00008006 	br	8112d790 <OSQPend+0x280>
8112d590:	d0a08303 	ldbu	r2,-32244(gp)
8112d594:	10803fcc 	andi	r2,r2,255
8112d598:	10000526 	beq	r2,zero,8112d5b0 <OSQPend+0xa0>
8112d59c:	e0bfff17 	ldw	r2,-4(fp)
8112d5a0:	00c00084 	movi	r3,2
8112d5a4:	10c00005 	stb	r3,0(r2)
8112d5a8:	0005883a 	mov	r2,zero
8112d5ac:	00007806 	br	8112d790 <OSQPend+0x280>
8112d5b0:	d0a07103 	ldbu	r2,-32316(gp)
8112d5b4:	10803fcc 	andi	r2,r2,255
8112d5b8:	10000526 	beq	r2,zero,8112d5d0 <OSQPend+0xc0>
8112d5bc:	e0bfff17 	ldw	r2,-4(fp)
8112d5c0:	00c00344 	movi	r3,13
8112d5c4:	10c00005 	stb	r3,0(r2)
8112d5c8:	0005883a 	mov	r2,zero
8112d5cc:	00007006 	br	8112d790 <OSQPend+0x280>
8112d5d0:	0005303a 	rdctl	r2,status
8112d5d4:	e0bffc15 	stw	r2,-16(fp)
8112d5d8:	e0fffc17 	ldw	r3,-16(fp)
8112d5dc:	00bfff84 	movi	r2,-2
8112d5e0:	1884703a 	and	r2,r3,r2
8112d5e4:	1001703a 	wrctl	status,r2
8112d5e8:	e0bffc17 	ldw	r2,-16(fp)
8112d5ec:	e0bff615 	stw	r2,-40(fp)
8112d5f0:	e0bffd17 	ldw	r2,-12(fp)
8112d5f4:	10800117 	ldw	r2,4(r2)
8112d5f8:	e0bff815 	stw	r2,-32(fp)
8112d5fc:	e0bff817 	ldw	r2,-32(fp)
8112d600:	1080058b 	ldhu	r2,22(r2)
8112d604:	10bfffcc 	andi	r2,r2,65535
8112d608:	10001e26 	beq	r2,zero,8112d684 <OSQPend+0x174>
8112d60c:	e0bff817 	ldw	r2,-32(fp)
8112d610:	10800417 	ldw	r2,16(r2)
8112d614:	11000104 	addi	r4,r2,4
8112d618:	e0fff817 	ldw	r3,-32(fp)
8112d61c:	19000415 	stw	r4,16(r3)
8112d620:	10800017 	ldw	r2,0(r2)
8112d624:	e0bff515 	stw	r2,-44(fp)
8112d628:	e0bff817 	ldw	r2,-32(fp)
8112d62c:	1080058b 	ldhu	r2,22(r2)
8112d630:	10bfffc4 	addi	r2,r2,-1
8112d634:	1007883a 	mov	r3,r2
8112d638:	e0bff817 	ldw	r2,-32(fp)
8112d63c:	10c0058d 	sth	r3,22(r2)
8112d640:	e0bff817 	ldw	r2,-32(fp)
8112d644:	10c00417 	ldw	r3,16(r2)
8112d648:	e0bff817 	ldw	r2,-32(fp)
8112d64c:	10800217 	ldw	r2,8(r2)
8112d650:	1880041e 	bne	r3,r2,8112d664 <OSQPend+0x154>
8112d654:	e0bff817 	ldw	r2,-32(fp)
8112d658:	10c00117 	ldw	r3,4(r2)
8112d65c:	e0bff817 	ldw	r2,-32(fp)
8112d660:	10c00415 	stw	r3,16(r2)
8112d664:	e0bff617 	ldw	r2,-40(fp)
8112d668:	e0bff715 	stw	r2,-36(fp)
8112d66c:	e0bff717 	ldw	r2,-36(fp)
8112d670:	1001703a 	wrctl	status,r2
8112d674:	e0bfff17 	ldw	r2,-4(fp)
8112d678:	10000005 	stb	zero,0(r2)
8112d67c:	e0bff517 	ldw	r2,-44(fp)
8112d680:	00004306 	br	8112d790 <OSQPend+0x280>
8112d684:	d0a08417 	ldw	r2,-32240(gp)
8112d688:	d0e08417 	ldw	r3,-32240(gp)
8112d68c:	18c00c03 	ldbu	r3,48(r3)
8112d690:	18c00114 	ori	r3,r3,4
8112d694:	10c00c05 	stb	r3,48(r2)
8112d698:	d0a08417 	ldw	r2,-32240(gp)
8112d69c:	10000c45 	stb	zero,49(r2)
8112d6a0:	d0a08417 	ldw	r2,-32240(gp)
8112d6a4:	e0fffe0b 	ldhu	r3,-8(fp)
8112d6a8:	10c00b8d 	sth	r3,46(r2)
8112d6ac:	e13ffd17 	ldw	r4,-12(fp)
8112d6b0:	1128c3c0 	call	81128c3c <OS_EventTaskWait>
8112d6b4:	e0bff617 	ldw	r2,-40(fp)
8112d6b8:	e0bffb15 	stw	r2,-20(fp)
8112d6bc:	e0bffb17 	ldw	r2,-20(fp)
8112d6c0:	1001703a 	wrctl	status,r2
8112d6c4:	11295580 	call	81129558 <OS_Sched>
8112d6c8:	0005303a 	rdctl	r2,status
8112d6cc:	e0bff915 	stw	r2,-28(fp)
8112d6d0:	e0fff917 	ldw	r3,-28(fp)
8112d6d4:	00bfff84 	movi	r2,-2
8112d6d8:	1884703a 	and	r2,r3,r2
8112d6dc:	1001703a 	wrctl	status,r2
8112d6e0:	e0bff917 	ldw	r2,-28(fp)
8112d6e4:	e0bff615 	stw	r2,-40(fp)
8112d6e8:	d0a08417 	ldw	r2,-32240(gp)
8112d6ec:	10800c43 	ldbu	r2,49(r2)
8112d6f0:	10803fcc 	andi	r2,r2,255
8112d6f4:	10000326 	beq	r2,zero,8112d704 <OSQPend+0x1f4>
8112d6f8:	108000a0 	cmpeqi	r2,r2,2
8112d6fc:	1000071e 	bne	r2,zero,8112d71c <OSQPend+0x20c>
8112d700:	00000b06 	br	8112d730 <OSQPend+0x220>
8112d704:	d0a08417 	ldw	r2,-32240(gp)
8112d708:	10800917 	ldw	r2,36(r2)
8112d70c:	e0bff515 	stw	r2,-44(fp)
8112d710:	e0bfff17 	ldw	r2,-4(fp)
8112d714:	10000005 	stb	zero,0(r2)
8112d718:	00000e06 	br	8112d754 <OSQPend+0x244>
8112d71c:	e03ff515 	stw	zero,-44(fp)
8112d720:	e0bfff17 	ldw	r2,-4(fp)
8112d724:	00c00384 	movi	r3,14
8112d728:	10c00005 	stb	r3,0(r2)
8112d72c:	00000906 	br	8112d754 <OSQPend+0x244>
8112d730:	d0a08417 	ldw	r2,-32240(gp)
8112d734:	e17ffd17 	ldw	r5,-12(fp)
8112d738:	1009883a 	mov	r4,r2
8112d73c:	1128eac0 	call	81128eac <OS_EventTaskRemove>
8112d740:	e03ff515 	stw	zero,-44(fp)
8112d744:	e0bfff17 	ldw	r2,-4(fp)
8112d748:	00c00284 	movi	r3,10
8112d74c:	10c00005 	stb	r3,0(r2)
8112d750:	0001883a 	nop
8112d754:	d0a08417 	ldw	r2,-32240(gp)
8112d758:	10000c05 	stb	zero,48(r2)
8112d75c:	d0a08417 	ldw	r2,-32240(gp)
8112d760:	10000c45 	stb	zero,49(r2)
8112d764:	d0a08417 	ldw	r2,-32240(gp)
8112d768:	10000715 	stw	zero,28(r2)
8112d76c:	d0a08417 	ldw	r2,-32240(gp)
8112d770:	10000815 	stw	zero,32(r2)
8112d774:	d0a08417 	ldw	r2,-32240(gp)
8112d778:	10000915 	stw	zero,36(r2)
8112d77c:	e0bff617 	ldw	r2,-40(fp)
8112d780:	e0bffa15 	stw	r2,-24(fp)
8112d784:	e0bffa17 	ldw	r2,-24(fp)
8112d788:	1001703a 	wrctl	status,r2
8112d78c:	e0bff517 	ldw	r2,-44(fp)
8112d790:	e037883a 	mov	sp,fp
8112d794:	dfc00117 	ldw	ra,4(sp)
8112d798:	df000017 	ldw	fp,0(sp)
8112d79c:	dec00204 	addi	sp,sp,8
8112d7a0:	f800283a 	ret

8112d7a4 <OSQPendAbort>:
8112d7a4:	defff604 	addi	sp,sp,-40
8112d7a8:	de00012e 	bgeu	sp,et,8112d7b0 <OSQPendAbort+0xc>
8112d7ac:	003b68fa 	trap	3
8112d7b0:	dfc00915 	stw	ra,36(sp)
8112d7b4:	df000815 	stw	fp,32(sp)
8112d7b8:	df000804 	addi	fp,sp,32
8112d7bc:	e13ffd15 	stw	r4,-12(fp)
8112d7c0:	2805883a 	mov	r2,r5
8112d7c4:	e1bfff15 	stw	r6,-4(fp)
8112d7c8:	e0bffe05 	stb	r2,-8(fp)
8112d7cc:	e03ff915 	stw	zero,-28(fp)
8112d7d0:	e0bfff17 	ldw	r2,-4(fp)
8112d7d4:	1000021e 	bne	r2,zero,8112d7e0 <OSQPendAbort+0x3c>
8112d7d8:	0005883a 	mov	r2,zero
8112d7dc:	00004906 	br	8112d904 <OSQPendAbort+0x160>
8112d7e0:	e0bffd17 	ldw	r2,-12(fp)
8112d7e4:	1000051e 	bne	r2,zero,8112d7fc <OSQPendAbort+0x58>
8112d7e8:	e0bfff17 	ldw	r2,-4(fp)
8112d7ec:	00c00104 	movi	r3,4
8112d7f0:	10c00005 	stb	r3,0(r2)
8112d7f4:	0005883a 	mov	r2,zero
8112d7f8:	00004206 	br	8112d904 <OSQPendAbort+0x160>
8112d7fc:	e0bffd17 	ldw	r2,-12(fp)
8112d800:	10800003 	ldbu	r2,0(r2)
8112d804:	10803fcc 	andi	r2,r2,255
8112d808:	108000a0 	cmpeqi	r2,r2,2
8112d80c:	1000051e 	bne	r2,zero,8112d824 <OSQPendAbort+0x80>
8112d810:	e0bfff17 	ldw	r2,-4(fp)
8112d814:	00c00044 	movi	r3,1
8112d818:	10c00005 	stb	r3,0(r2)
8112d81c:	0005883a 	mov	r2,zero
8112d820:	00003806 	br	8112d904 <OSQPendAbort+0x160>
8112d824:	0005303a 	rdctl	r2,status
8112d828:	e0bffc15 	stw	r2,-16(fp)
8112d82c:	e0fffc17 	ldw	r3,-16(fp)
8112d830:	00bfff84 	movi	r2,-2
8112d834:	1884703a 	and	r2,r3,r2
8112d838:	1001703a 	wrctl	status,r2
8112d83c:	e0bffc17 	ldw	r2,-16(fp)
8112d840:	e0bff915 	stw	r2,-28(fp)
8112d844:	e0bffd17 	ldw	r2,-12(fp)
8112d848:	10800283 	ldbu	r2,10(r2)
8112d84c:	10803fcc 	andi	r2,r2,255
8112d850:	10002526 	beq	r2,zero,8112d8e8 <OSQPendAbort+0x144>
8112d854:	e03ff805 	stb	zero,-32(fp)
8112d858:	e0bffe03 	ldbu	r2,-8(fp)
8112d85c:	10800060 	cmpeqi	r2,r2,1
8112d860:	10000e26 	beq	r2,zero,8112d89c <OSQPendAbort+0xf8>
8112d864:	00000806 	br	8112d888 <OSQPendAbort+0xe4>
8112d868:	01c00084 	movi	r7,2
8112d86c:	01800104 	movi	r6,4
8112d870:	000b883a 	mov	r5,zero
8112d874:	e13ffd17 	ldw	r4,-12(fp)
8112d878:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112d87c:	e0bff803 	ldbu	r2,-32(fp)
8112d880:	10800044 	addi	r2,r2,1
8112d884:	e0bff805 	stb	r2,-32(fp)
8112d888:	e0bffd17 	ldw	r2,-12(fp)
8112d88c:	10800283 	ldbu	r2,10(r2)
8112d890:	10803fcc 	andi	r2,r2,255
8112d894:	103ff41e 	bne	r2,zero,8112d868 <__reset+0xfb10d868>
8112d898:	00000906 	br	8112d8c0 <OSQPendAbort+0x11c>
8112d89c:	01c00084 	movi	r7,2
8112d8a0:	01800104 	movi	r6,4
8112d8a4:	000b883a 	mov	r5,zero
8112d8a8:	e13ffd17 	ldw	r4,-12(fp)
8112d8ac:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112d8b0:	e0bff803 	ldbu	r2,-32(fp)
8112d8b4:	10800044 	addi	r2,r2,1
8112d8b8:	e0bff805 	stb	r2,-32(fp)
8112d8bc:	0001883a 	nop
8112d8c0:	e0bff917 	ldw	r2,-28(fp)
8112d8c4:	e0bffa15 	stw	r2,-24(fp)
8112d8c8:	e0bffa17 	ldw	r2,-24(fp)
8112d8cc:	1001703a 	wrctl	status,r2
8112d8d0:	11295580 	call	81129558 <OS_Sched>
8112d8d4:	e0bfff17 	ldw	r2,-4(fp)
8112d8d8:	00c00384 	movi	r3,14
8112d8dc:	10c00005 	stb	r3,0(r2)
8112d8e0:	e0bff803 	ldbu	r2,-32(fp)
8112d8e4:	00000706 	br	8112d904 <OSQPendAbort+0x160>
8112d8e8:	e0bff917 	ldw	r2,-28(fp)
8112d8ec:	e0bffb15 	stw	r2,-20(fp)
8112d8f0:	e0bffb17 	ldw	r2,-20(fp)
8112d8f4:	1001703a 	wrctl	status,r2
8112d8f8:	e0bfff17 	ldw	r2,-4(fp)
8112d8fc:	10000005 	stb	zero,0(r2)
8112d900:	0005883a 	mov	r2,zero
8112d904:	e037883a 	mov	sp,fp
8112d908:	dfc00117 	ldw	ra,4(sp)
8112d90c:	df000017 	ldw	fp,0(sp)
8112d910:	dec00204 	addi	sp,sp,8
8112d914:	f800283a 	ret

8112d918 <OSQPost>:
8112d918:	defff604 	addi	sp,sp,-40
8112d91c:	de00012e 	bgeu	sp,et,8112d924 <OSQPost+0xc>
8112d920:	003b68fa 	trap	3
8112d924:	dfc00915 	stw	ra,36(sp)
8112d928:	df000815 	stw	fp,32(sp)
8112d92c:	df000804 	addi	fp,sp,32
8112d930:	e13ffe15 	stw	r4,-8(fp)
8112d934:	e17fff15 	stw	r5,-4(fp)
8112d938:	e03ff815 	stw	zero,-32(fp)
8112d93c:	e0bffe17 	ldw	r2,-8(fp)
8112d940:	1000021e 	bne	r2,zero,8112d94c <OSQPost+0x34>
8112d944:	00800104 	movi	r2,4
8112d948:	00004a06 	br	8112da74 <OSQPost+0x15c>
8112d94c:	e0bffe17 	ldw	r2,-8(fp)
8112d950:	10800003 	ldbu	r2,0(r2)
8112d954:	10803fcc 	andi	r2,r2,255
8112d958:	108000a0 	cmpeqi	r2,r2,2
8112d95c:	1000021e 	bne	r2,zero,8112d968 <OSQPost+0x50>
8112d960:	00800044 	movi	r2,1
8112d964:	00004306 	br	8112da74 <OSQPost+0x15c>
8112d968:	0005303a 	rdctl	r2,status
8112d96c:	e0bffd15 	stw	r2,-12(fp)
8112d970:	e0fffd17 	ldw	r3,-12(fp)
8112d974:	00bfff84 	movi	r2,-2
8112d978:	1884703a 	and	r2,r3,r2
8112d97c:	1001703a 	wrctl	status,r2
8112d980:	e0bffd17 	ldw	r2,-12(fp)
8112d984:	e0bff815 	stw	r2,-32(fp)
8112d988:	e0bffe17 	ldw	r2,-8(fp)
8112d98c:	10800283 	ldbu	r2,10(r2)
8112d990:	10803fcc 	andi	r2,r2,255
8112d994:	10000c26 	beq	r2,zero,8112d9c8 <OSQPost+0xb0>
8112d998:	000f883a 	mov	r7,zero
8112d99c:	01800104 	movi	r6,4
8112d9a0:	e17fff17 	ldw	r5,-4(fp)
8112d9a4:	e13ffe17 	ldw	r4,-8(fp)
8112d9a8:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112d9ac:	e0bff817 	ldw	r2,-32(fp)
8112d9b0:	e0bff915 	stw	r2,-28(fp)
8112d9b4:	e0bff917 	ldw	r2,-28(fp)
8112d9b8:	1001703a 	wrctl	status,r2
8112d9bc:	11295580 	call	81129558 <OS_Sched>
8112d9c0:	0005883a 	mov	r2,zero
8112d9c4:	00002b06 	br	8112da74 <OSQPost+0x15c>
8112d9c8:	e0bffe17 	ldw	r2,-8(fp)
8112d9cc:	10800117 	ldw	r2,4(r2)
8112d9d0:	e0bffb15 	stw	r2,-20(fp)
8112d9d4:	e0bffb17 	ldw	r2,-20(fp)
8112d9d8:	10c0058b 	ldhu	r3,22(r2)
8112d9dc:	e0bffb17 	ldw	r2,-20(fp)
8112d9e0:	1080050b 	ldhu	r2,20(r2)
8112d9e4:	18ffffcc 	andi	r3,r3,65535
8112d9e8:	10bfffcc 	andi	r2,r2,65535
8112d9ec:	18800636 	bltu	r3,r2,8112da08 <OSQPost+0xf0>
8112d9f0:	e0bff817 	ldw	r2,-32(fp)
8112d9f4:	e0bffa15 	stw	r2,-24(fp)
8112d9f8:	e0bffa17 	ldw	r2,-24(fp)
8112d9fc:	1001703a 	wrctl	status,r2
8112da00:	00800784 	movi	r2,30
8112da04:	00001b06 	br	8112da74 <OSQPost+0x15c>
8112da08:	e0bffb17 	ldw	r2,-20(fp)
8112da0c:	10800317 	ldw	r2,12(r2)
8112da10:	11000104 	addi	r4,r2,4
8112da14:	e0fffb17 	ldw	r3,-20(fp)
8112da18:	19000315 	stw	r4,12(r3)
8112da1c:	e0ffff17 	ldw	r3,-4(fp)
8112da20:	10c00015 	stw	r3,0(r2)
8112da24:	e0bffb17 	ldw	r2,-20(fp)
8112da28:	1080058b 	ldhu	r2,22(r2)
8112da2c:	10800044 	addi	r2,r2,1
8112da30:	1007883a 	mov	r3,r2
8112da34:	e0bffb17 	ldw	r2,-20(fp)
8112da38:	10c0058d 	sth	r3,22(r2)
8112da3c:	e0bffb17 	ldw	r2,-20(fp)
8112da40:	10c00317 	ldw	r3,12(r2)
8112da44:	e0bffb17 	ldw	r2,-20(fp)
8112da48:	10800217 	ldw	r2,8(r2)
8112da4c:	1880041e 	bne	r3,r2,8112da60 <OSQPost+0x148>
8112da50:	e0bffb17 	ldw	r2,-20(fp)
8112da54:	10c00117 	ldw	r3,4(r2)
8112da58:	e0bffb17 	ldw	r2,-20(fp)
8112da5c:	10c00315 	stw	r3,12(r2)
8112da60:	e0bff817 	ldw	r2,-32(fp)
8112da64:	e0bffc15 	stw	r2,-16(fp)
8112da68:	e0bffc17 	ldw	r2,-16(fp)
8112da6c:	1001703a 	wrctl	status,r2
8112da70:	0005883a 	mov	r2,zero
8112da74:	e037883a 	mov	sp,fp
8112da78:	dfc00117 	ldw	ra,4(sp)
8112da7c:	df000017 	ldw	fp,0(sp)
8112da80:	dec00204 	addi	sp,sp,8
8112da84:	f800283a 	ret

8112da88 <OSQPostFront>:
8112da88:	defff604 	addi	sp,sp,-40
8112da8c:	de00012e 	bgeu	sp,et,8112da94 <OSQPostFront+0xc>
8112da90:	003b68fa 	trap	3
8112da94:	dfc00915 	stw	ra,36(sp)
8112da98:	df000815 	stw	fp,32(sp)
8112da9c:	df000804 	addi	fp,sp,32
8112daa0:	e13ffe15 	stw	r4,-8(fp)
8112daa4:	e17fff15 	stw	r5,-4(fp)
8112daa8:	e03ff815 	stw	zero,-32(fp)
8112daac:	e0bffe17 	ldw	r2,-8(fp)
8112dab0:	1000021e 	bne	r2,zero,8112dabc <OSQPostFront+0x34>
8112dab4:	00800104 	movi	r2,4
8112dab8:	00004c06 	br	8112dbec <OSQPostFront+0x164>
8112dabc:	e0bffe17 	ldw	r2,-8(fp)
8112dac0:	10800003 	ldbu	r2,0(r2)
8112dac4:	10803fcc 	andi	r2,r2,255
8112dac8:	108000a0 	cmpeqi	r2,r2,2
8112dacc:	1000021e 	bne	r2,zero,8112dad8 <OSQPostFront+0x50>
8112dad0:	00800044 	movi	r2,1
8112dad4:	00004506 	br	8112dbec <OSQPostFront+0x164>
8112dad8:	0005303a 	rdctl	r2,status
8112dadc:	e0bffd15 	stw	r2,-12(fp)
8112dae0:	e0fffd17 	ldw	r3,-12(fp)
8112dae4:	00bfff84 	movi	r2,-2
8112dae8:	1884703a 	and	r2,r3,r2
8112daec:	1001703a 	wrctl	status,r2
8112daf0:	e0bffd17 	ldw	r2,-12(fp)
8112daf4:	e0bff815 	stw	r2,-32(fp)
8112daf8:	e0bffe17 	ldw	r2,-8(fp)
8112dafc:	10800283 	ldbu	r2,10(r2)
8112db00:	10803fcc 	andi	r2,r2,255
8112db04:	10000c26 	beq	r2,zero,8112db38 <OSQPostFront+0xb0>
8112db08:	000f883a 	mov	r7,zero
8112db0c:	01800104 	movi	r6,4
8112db10:	e17fff17 	ldw	r5,-4(fp)
8112db14:	e13ffe17 	ldw	r4,-8(fp)
8112db18:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112db1c:	e0bff817 	ldw	r2,-32(fp)
8112db20:	e0bff915 	stw	r2,-28(fp)
8112db24:	e0bff917 	ldw	r2,-28(fp)
8112db28:	1001703a 	wrctl	status,r2
8112db2c:	11295580 	call	81129558 <OS_Sched>
8112db30:	0005883a 	mov	r2,zero
8112db34:	00002d06 	br	8112dbec <OSQPostFront+0x164>
8112db38:	e0bffe17 	ldw	r2,-8(fp)
8112db3c:	10800117 	ldw	r2,4(r2)
8112db40:	e0bffb15 	stw	r2,-20(fp)
8112db44:	e0bffb17 	ldw	r2,-20(fp)
8112db48:	10c0058b 	ldhu	r3,22(r2)
8112db4c:	e0bffb17 	ldw	r2,-20(fp)
8112db50:	1080050b 	ldhu	r2,20(r2)
8112db54:	18ffffcc 	andi	r3,r3,65535
8112db58:	10bfffcc 	andi	r2,r2,65535
8112db5c:	18800636 	bltu	r3,r2,8112db78 <OSQPostFront+0xf0>
8112db60:	e0bff817 	ldw	r2,-32(fp)
8112db64:	e0bffa15 	stw	r2,-24(fp)
8112db68:	e0bffa17 	ldw	r2,-24(fp)
8112db6c:	1001703a 	wrctl	status,r2
8112db70:	00800784 	movi	r2,30
8112db74:	00001d06 	br	8112dbec <OSQPostFront+0x164>
8112db78:	e0bffb17 	ldw	r2,-20(fp)
8112db7c:	10c00417 	ldw	r3,16(r2)
8112db80:	e0bffb17 	ldw	r2,-20(fp)
8112db84:	10800117 	ldw	r2,4(r2)
8112db88:	1880041e 	bne	r3,r2,8112db9c <OSQPostFront+0x114>
8112db8c:	e0bffb17 	ldw	r2,-20(fp)
8112db90:	10c00217 	ldw	r3,8(r2)
8112db94:	e0bffb17 	ldw	r2,-20(fp)
8112db98:	10c00415 	stw	r3,16(r2)
8112db9c:	e0bffb17 	ldw	r2,-20(fp)
8112dba0:	10800417 	ldw	r2,16(r2)
8112dba4:	10ffff04 	addi	r3,r2,-4
8112dba8:	e0bffb17 	ldw	r2,-20(fp)
8112dbac:	10c00415 	stw	r3,16(r2)
8112dbb0:	e0bffb17 	ldw	r2,-20(fp)
8112dbb4:	10800417 	ldw	r2,16(r2)
8112dbb8:	e0ffff17 	ldw	r3,-4(fp)
8112dbbc:	10c00015 	stw	r3,0(r2)
8112dbc0:	e0bffb17 	ldw	r2,-20(fp)
8112dbc4:	1080058b 	ldhu	r2,22(r2)
8112dbc8:	10800044 	addi	r2,r2,1
8112dbcc:	1007883a 	mov	r3,r2
8112dbd0:	e0bffb17 	ldw	r2,-20(fp)
8112dbd4:	10c0058d 	sth	r3,22(r2)
8112dbd8:	e0bff817 	ldw	r2,-32(fp)
8112dbdc:	e0bffc15 	stw	r2,-16(fp)
8112dbe0:	e0bffc17 	ldw	r2,-16(fp)
8112dbe4:	1001703a 	wrctl	status,r2
8112dbe8:	0005883a 	mov	r2,zero
8112dbec:	e037883a 	mov	sp,fp
8112dbf0:	dfc00117 	ldw	ra,4(sp)
8112dbf4:	df000017 	ldw	fp,0(sp)
8112dbf8:	dec00204 	addi	sp,sp,8
8112dbfc:	f800283a 	ret

8112dc00 <OSQPostOpt>:
8112dc00:	defff504 	addi	sp,sp,-44
8112dc04:	de00012e 	bgeu	sp,et,8112dc0c <OSQPostOpt+0xc>
8112dc08:	003b68fa 	trap	3
8112dc0c:	dfc00a15 	stw	ra,40(sp)
8112dc10:	df000915 	stw	fp,36(sp)
8112dc14:	df000904 	addi	fp,sp,36
8112dc18:	e13ffd15 	stw	r4,-12(fp)
8112dc1c:	e17ffe15 	stw	r5,-8(fp)
8112dc20:	3005883a 	mov	r2,r6
8112dc24:	e0bfff05 	stb	r2,-4(fp)
8112dc28:	e03ff715 	stw	zero,-36(fp)
8112dc2c:	e0bffd17 	ldw	r2,-12(fp)
8112dc30:	1000021e 	bne	r2,zero,8112dc3c <OSQPostOpt+0x3c>
8112dc34:	00800104 	movi	r2,4
8112dc38:	00007106 	br	8112de00 <OSQPostOpt+0x200>
8112dc3c:	e0bffd17 	ldw	r2,-12(fp)
8112dc40:	10800003 	ldbu	r2,0(r2)
8112dc44:	10803fcc 	andi	r2,r2,255
8112dc48:	108000a0 	cmpeqi	r2,r2,2
8112dc4c:	1000021e 	bne	r2,zero,8112dc58 <OSQPostOpt+0x58>
8112dc50:	00800044 	movi	r2,1
8112dc54:	00006a06 	br	8112de00 <OSQPostOpt+0x200>
8112dc58:	0005303a 	rdctl	r2,status
8112dc5c:	e0bffc15 	stw	r2,-16(fp)
8112dc60:	e0fffc17 	ldw	r3,-16(fp)
8112dc64:	00bfff84 	movi	r2,-2
8112dc68:	1884703a 	and	r2,r3,r2
8112dc6c:	1001703a 	wrctl	status,r2
8112dc70:	e0bffc17 	ldw	r2,-16(fp)
8112dc74:	e0bff715 	stw	r2,-36(fp)
8112dc78:	e0bffd17 	ldw	r2,-12(fp)
8112dc7c:	10800283 	ldbu	r2,10(r2)
8112dc80:	10803fcc 	andi	r2,r2,255
8112dc84:	10001d26 	beq	r2,zero,8112dcfc <OSQPostOpt+0xfc>
8112dc88:	e0bfff03 	ldbu	r2,-4(fp)
8112dc8c:	1080004c 	andi	r2,r2,1
8112dc90:	10000b26 	beq	r2,zero,8112dcc0 <OSQPostOpt+0xc0>
8112dc94:	00000506 	br	8112dcac <OSQPostOpt+0xac>
8112dc98:	000f883a 	mov	r7,zero
8112dc9c:	01800104 	movi	r6,4
8112dca0:	e17ffe17 	ldw	r5,-8(fp)
8112dca4:	e13ffd17 	ldw	r4,-12(fp)
8112dca8:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112dcac:	e0bffd17 	ldw	r2,-12(fp)
8112dcb0:	10800283 	ldbu	r2,10(r2)
8112dcb4:	10803fcc 	andi	r2,r2,255
8112dcb8:	103ff71e 	bne	r2,zero,8112dc98 <__reset+0xfb10dc98>
8112dcbc:	00000506 	br	8112dcd4 <OSQPostOpt+0xd4>
8112dcc0:	000f883a 	mov	r7,zero
8112dcc4:	01800104 	movi	r6,4
8112dcc8:	e17ffe17 	ldw	r5,-8(fp)
8112dccc:	e13ffd17 	ldw	r4,-12(fp)
8112dcd0:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112dcd4:	e0bff717 	ldw	r2,-36(fp)
8112dcd8:	e0bff815 	stw	r2,-32(fp)
8112dcdc:	e0bff817 	ldw	r2,-32(fp)
8112dce0:	1001703a 	wrctl	status,r2
8112dce4:	e0bfff03 	ldbu	r2,-4(fp)
8112dce8:	1080010c 	andi	r2,r2,4
8112dcec:	1000011e 	bne	r2,zero,8112dcf4 <OSQPostOpt+0xf4>
8112dcf0:	11295580 	call	81129558 <OS_Sched>
8112dcf4:	0005883a 	mov	r2,zero
8112dcf8:	00004106 	br	8112de00 <OSQPostOpt+0x200>
8112dcfc:	e0bffd17 	ldw	r2,-12(fp)
8112dd00:	10800117 	ldw	r2,4(r2)
8112dd04:	e0bffa15 	stw	r2,-24(fp)
8112dd08:	e0bffa17 	ldw	r2,-24(fp)
8112dd0c:	10c0058b 	ldhu	r3,22(r2)
8112dd10:	e0bffa17 	ldw	r2,-24(fp)
8112dd14:	1080050b 	ldhu	r2,20(r2)
8112dd18:	18ffffcc 	andi	r3,r3,65535
8112dd1c:	10bfffcc 	andi	r2,r2,65535
8112dd20:	18800636 	bltu	r3,r2,8112dd3c <OSQPostOpt+0x13c>
8112dd24:	e0bff717 	ldw	r2,-36(fp)
8112dd28:	e0bff915 	stw	r2,-28(fp)
8112dd2c:	e0bff917 	ldw	r2,-28(fp)
8112dd30:	1001703a 	wrctl	status,r2
8112dd34:	00800784 	movi	r2,30
8112dd38:	00003106 	br	8112de00 <OSQPostOpt+0x200>
8112dd3c:	e0bfff03 	ldbu	r2,-4(fp)
8112dd40:	1080008c 	andi	r2,r2,2
8112dd44:	10001326 	beq	r2,zero,8112dd94 <OSQPostOpt+0x194>
8112dd48:	e0bffa17 	ldw	r2,-24(fp)
8112dd4c:	10c00417 	ldw	r3,16(r2)
8112dd50:	e0bffa17 	ldw	r2,-24(fp)
8112dd54:	10800117 	ldw	r2,4(r2)
8112dd58:	1880041e 	bne	r3,r2,8112dd6c <OSQPostOpt+0x16c>
8112dd5c:	e0bffa17 	ldw	r2,-24(fp)
8112dd60:	10c00217 	ldw	r3,8(r2)
8112dd64:	e0bffa17 	ldw	r2,-24(fp)
8112dd68:	10c00415 	stw	r3,16(r2)
8112dd6c:	e0bffa17 	ldw	r2,-24(fp)
8112dd70:	10800417 	ldw	r2,16(r2)
8112dd74:	10ffff04 	addi	r3,r2,-4
8112dd78:	e0bffa17 	ldw	r2,-24(fp)
8112dd7c:	10c00415 	stw	r3,16(r2)
8112dd80:	e0bffa17 	ldw	r2,-24(fp)
8112dd84:	10800417 	ldw	r2,16(r2)
8112dd88:	e0fffe17 	ldw	r3,-8(fp)
8112dd8c:	10c00015 	stw	r3,0(r2)
8112dd90:	00001006 	br	8112ddd4 <OSQPostOpt+0x1d4>
8112dd94:	e0bffa17 	ldw	r2,-24(fp)
8112dd98:	10800317 	ldw	r2,12(r2)
8112dd9c:	11000104 	addi	r4,r2,4
8112dda0:	e0fffa17 	ldw	r3,-24(fp)
8112dda4:	19000315 	stw	r4,12(r3)
8112dda8:	e0fffe17 	ldw	r3,-8(fp)
8112ddac:	10c00015 	stw	r3,0(r2)
8112ddb0:	e0bffa17 	ldw	r2,-24(fp)
8112ddb4:	10c00317 	ldw	r3,12(r2)
8112ddb8:	e0bffa17 	ldw	r2,-24(fp)
8112ddbc:	10800217 	ldw	r2,8(r2)
8112ddc0:	1880041e 	bne	r3,r2,8112ddd4 <OSQPostOpt+0x1d4>
8112ddc4:	e0bffa17 	ldw	r2,-24(fp)
8112ddc8:	10c00117 	ldw	r3,4(r2)
8112ddcc:	e0bffa17 	ldw	r2,-24(fp)
8112ddd0:	10c00315 	stw	r3,12(r2)
8112ddd4:	e0bffa17 	ldw	r2,-24(fp)
8112ddd8:	1080058b 	ldhu	r2,22(r2)
8112dddc:	10800044 	addi	r2,r2,1
8112dde0:	1007883a 	mov	r3,r2
8112dde4:	e0bffa17 	ldw	r2,-24(fp)
8112dde8:	10c0058d 	sth	r3,22(r2)
8112ddec:	e0bff717 	ldw	r2,-36(fp)
8112ddf0:	e0bffb15 	stw	r2,-20(fp)
8112ddf4:	e0bffb17 	ldw	r2,-20(fp)
8112ddf8:	1001703a 	wrctl	status,r2
8112ddfc:	0005883a 	mov	r2,zero
8112de00:	e037883a 	mov	sp,fp
8112de04:	dfc00117 	ldw	ra,4(sp)
8112de08:	df000017 	ldw	fp,0(sp)
8112de0c:	dec00204 	addi	sp,sp,8
8112de10:	f800283a 	ret

8112de14 <OSQQuery>:
8112de14:	defff604 	addi	sp,sp,-40
8112de18:	de00012e 	bgeu	sp,et,8112de20 <OSQQuery+0xc>
8112de1c:	003b68fa 	trap	3
8112de20:	df000915 	stw	fp,36(sp)
8112de24:	df000904 	addi	fp,sp,36
8112de28:	e13ffe15 	stw	r4,-8(fp)
8112de2c:	e17fff15 	stw	r5,-4(fp)
8112de30:	e03ffa15 	stw	zero,-24(fp)
8112de34:	e0bffe17 	ldw	r2,-8(fp)
8112de38:	1000021e 	bne	r2,zero,8112de44 <OSQQuery+0x30>
8112de3c:	00800104 	movi	r2,4
8112de40:	00004906 	br	8112df68 <OSQQuery+0x154>
8112de44:	e0bfff17 	ldw	r2,-4(fp)
8112de48:	1000021e 	bne	r2,zero,8112de54 <OSQQuery+0x40>
8112de4c:	00800244 	movi	r2,9
8112de50:	00004506 	br	8112df68 <OSQQuery+0x154>
8112de54:	e0bffe17 	ldw	r2,-8(fp)
8112de58:	10800003 	ldbu	r2,0(r2)
8112de5c:	10803fcc 	andi	r2,r2,255
8112de60:	108000a0 	cmpeqi	r2,r2,2
8112de64:	1000021e 	bne	r2,zero,8112de70 <OSQQuery+0x5c>
8112de68:	00800044 	movi	r2,1
8112de6c:	00003e06 	br	8112df68 <OSQQuery+0x154>
8112de70:	0005303a 	rdctl	r2,status
8112de74:	e0bffd15 	stw	r2,-12(fp)
8112de78:	e0fffd17 	ldw	r3,-12(fp)
8112de7c:	00bfff84 	movi	r2,-2
8112de80:	1884703a 	and	r2,r3,r2
8112de84:	1001703a 	wrctl	status,r2
8112de88:	e0bffd17 	ldw	r2,-12(fp)
8112de8c:	e0bffa15 	stw	r2,-24(fp)
8112de90:	e0bffe17 	ldw	r2,-8(fp)
8112de94:	10c00283 	ldbu	r3,10(r2)
8112de98:	e0bfff17 	ldw	r2,-4(fp)
8112de9c:	10c00385 	stb	r3,14(r2)
8112dea0:	e0bffe17 	ldw	r2,-8(fp)
8112dea4:	108002c4 	addi	r2,r2,11
8112dea8:	e0bff815 	stw	r2,-32(fp)
8112deac:	e0bfff17 	ldw	r2,-4(fp)
8112deb0:	10800204 	addi	r2,r2,8
8112deb4:	e0bff915 	stw	r2,-28(fp)
8112deb8:	e03ff705 	stb	zero,-36(fp)
8112debc:	00000b06 	br	8112deec <OSQQuery+0xd8>
8112dec0:	e0bff917 	ldw	r2,-28(fp)
8112dec4:	10c00044 	addi	r3,r2,1
8112dec8:	e0fff915 	stw	r3,-28(fp)
8112decc:	e0fff817 	ldw	r3,-32(fp)
8112ded0:	19000044 	addi	r4,r3,1
8112ded4:	e13ff815 	stw	r4,-32(fp)
8112ded8:	18c00003 	ldbu	r3,0(r3)
8112dedc:	10c00005 	stb	r3,0(r2)
8112dee0:	e0bff703 	ldbu	r2,-36(fp)
8112dee4:	10800044 	addi	r2,r2,1
8112dee8:	e0bff705 	stb	r2,-36(fp)
8112deec:	e0bff703 	ldbu	r2,-36(fp)
8112def0:	108001b0 	cmpltui	r2,r2,6
8112def4:	103ff21e 	bne	r2,zero,8112dec0 <__reset+0xfb10dec0>
8112def8:	e0bffe17 	ldw	r2,-8(fp)
8112defc:	10800117 	ldw	r2,4(r2)
8112df00:	e0bffc15 	stw	r2,-16(fp)
8112df04:	e0bffc17 	ldw	r2,-16(fp)
8112df08:	1080058b 	ldhu	r2,22(r2)
8112df0c:	10bfffcc 	andi	r2,r2,65535
8112df10:	10000626 	beq	r2,zero,8112df2c <OSQQuery+0x118>
8112df14:	e0bffc17 	ldw	r2,-16(fp)
8112df18:	10800417 	ldw	r2,16(r2)
8112df1c:	10c00017 	ldw	r3,0(r2)
8112df20:	e0bfff17 	ldw	r2,-4(fp)
8112df24:	10c00015 	stw	r3,0(r2)
8112df28:	00000206 	br	8112df34 <OSQQuery+0x120>
8112df2c:	e0bfff17 	ldw	r2,-4(fp)
8112df30:	10000015 	stw	zero,0(r2)
8112df34:	e0bffc17 	ldw	r2,-16(fp)
8112df38:	10c0058b 	ldhu	r3,22(r2)
8112df3c:	e0bfff17 	ldw	r2,-4(fp)
8112df40:	10c0010d 	sth	r3,4(r2)
8112df44:	e0bffc17 	ldw	r2,-16(fp)
8112df48:	10c0050b 	ldhu	r3,20(r2)
8112df4c:	e0bfff17 	ldw	r2,-4(fp)
8112df50:	10c0018d 	sth	r3,6(r2)
8112df54:	e0bffa17 	ldw	r2,-24(fp)
8112df58:	e0bffb15 	stw	r2,-20(fp)
8112df5c:	e0bffb17 	ldw	r2,-20(fp)
8112df60:	1001703a 	wrctl	status,r2
8112df64:	0005883a 	mov	r2,zero
8112df68:	e037883a 	mov	sp,fp
8112df6c:	df000017 	ldw	fp,0(sp)
8112df70:	dec00104 	addi	sp,sp,4
8112df74:	f800283a 	ret

8112df78 <OS_QInit>:
8112df78:	defffb04 	addi	sp,sp,-20
8112df7c:	de00012e 	bgeu	sp,et,8112df84 <OS_QInit+0xc>
8112df80:	003b68fa 	trap	3
8112df84:	dfc00415 	stw	ra,16(sp)
8112df88:	df000315 	stw	fp,12(sp)
8112df8c:	df000304 	addi	fp,sp,12
8112df90:	01407804 	movi	r5,480
8112df94:	01204574 	movhi	r4,33045
8112df98:	21023d04 	addi	r4,r4,2292
8112df9c:	112948c0 	call	8112948c <OS_MemClr>
8112dfa0:	00a04574 	movhi	r2,33045
8112dfa4:	10823d04 	addi	r2,r2,2292
8112dfa8:	e0bffe15 	stw	r2,-8(fp)
8112dfac:	00a04574 	movhi	r2,33045
8112dfb0:	10824304 	addi	r2,r2,2316
8112dfb4:	e0bfff15 	stw	r2,-4(fp)
8112dfb8:	e03ffd0d 	sth	zero,-12(fp)
8112dfbc:	00000c06 	br	8112dff0 <OS_QInit+0x78>
8112dfc0:	e0bffe17 	ldw	r2,-8(fp)
8112dfc4:	e0ffff17 	ldw	r3,-4(fp)
8112dfc8:	10c00015 	stw	r3,0(r2)
8112dfcc:	e0bffe17 	ldw	r2,-8(fp)
8112dfd0:	10800604 	addi	r2,r2,24
8112dfd4:	e0bffe15 	stw	r2,-8(fp)
8112dfd8:	e0bfff17 	ldw	r2,-4(fp)
8112dfdc:	10800604 	addi	r2,r2,24
8112dfe0:	e0bfff15 	stw	r2,-4(fp)
8112dfe4:	e0bffd0b 	ldhu	r2,-12(fp)
8112dfe8:	10800044 	addi	r2,r2,1
8112dfec:	e0bffd0d 	sth	r2,-12(fp)
8112dff0:	e0bffd0b 	ldhu	r2,-12(fp)
8112dff4:	108004f0 	cmpltui	r2,r2,19
8112dff8:	103ff11e 	bne	r2,zero,8112dfc0 <__reset+0xfb10dfc0>
8112dffc:	e0bffe17 	ldw	r2,-8(fp)
8112e000:	10000015 	stw	zero,0(r2)
8112e004:	00a04574 	movhi	r2,33045
8112e008:	10823d04 	addi	r2,r2,2292
8112e00c:	d0a07f15 	stw	r2,-32260(gp)
8112e010:	0001883a 	nop
8112e014:	e037883a 	mov	sp,fp
8112e018:	dfc00117 	ldw	ra,4(sp)
8112e01c:	df000017 	ldw	fp,0(sp)
8112e020:	dec00204 	addi	sp,sp,8
8112e024:	f800283a 	ret

8112e028 <OSSemAccept>:
8112e028:	defffa04 	addi	sp,sp,-24
8112e02c:	de00012e 	bgeu	sp,et,8112e034 <OSSemAccept+0xc>
8112e030:	003b68fa 	trap	3
8112e034:	df000515 	stw	fp,20(sp)
8112e038:	df000504 	addi	fp,sp,20
8112e03c:	e13fff15 	stw	r4,-4(fp)
8112e040:	e03ffb15 	stw	zero,-20(fp)
8112e044:	e0bfff17 	ldw	r2,-4(fp)
8112e048:	1000021e 	bne	r2,zero,8112e054 <OSSemAccept+0x2c>
8112e04c:	0005883a 	mov	r2,zero
8112e050:	00001f06 	br	8112e0d0 <OSSemAccept+0xa8>
8112e054:	e0bfff17 	ldw	r2,-4(fp)
8112e058:	10800003 	ldbu	r2,0(r2)
8112e05c:	10803fcc 	andi	r2,r2,255
8112e060:	108000e0 	cmpeqi	r2,r2,3
8112e064:	1000021e 	bne	r2,zero,8112e070 <OSSemAccept+0x48>
8112e068:	0005883a 	mov	r2,zero
8112e06c:	00001806 	br	8112e0d0 <OSSemAccept+0xa8>
8112e070:	0005303a 	rdctl	r2,status
8112e074:	e0bffe15 	stw	r2,-8(fp)
8112e078:	e0fffe17 	ldw	r3,-8(fp)
8112e07c:	00bfff84 	movi	r2,-2
8112e080:	1884703a 	and	r2,r3,r2
8112e084:	1001703a 	wrctl	status,r2
8112e088:	e0bffe17 	ldw	r2,-8(fp)
8112e08c:	e0bffb15 	stw	r2,-20(fp)
8112e090:	e0bfff17 	ldw	r2,-4(fp)
8112e094:	1080020b 	ldhu	r2,8(r2)
8112e098:	e0bffd0d 	sth	r2,-12(fp)
8112e09c:	e0bffd0b 	ldhu	r2,-12(fp)
8112e0a0:	10000626 	beq	r2,zero,8112e0bc <OSSemAccept+0x94>
8112e0a4:	e0bfff17 	ldw	r2,-4(fp)
8112e0a8:	1080020b 	ldhu	r2,8(r2)
8112e0ac:	10bfffc4 	addi	r2,r2,-1
8112e0b0:	1007883a 	mov	r3,r2
8112e0b4:	e0bfff17 	ldw	r2,-4(fp)
8112e0b8:	10c0020d 	sth	r3,8(r2)
8112e0bc:	e0bffb17 	ldw	r2,-20(fp)
8112e0c0:	e0bffc15 	stw	r2,-16(fp)
8112e0c4:	e0bffc17 	ldw	r2,-16(fp)
8112e0c8:	1001703a 	wrctl	status,r2
8112e0cc:	e0bffd0b 	ldhu	r2,-12(fp)
8112e0d0:	e037883a 	mov	sp,fp
8112e0d4:	df000017 	ldw	fp,0(sp)
8112e0d8:	dec00104 	addi	sp,sp,4
8112e0dc:	f800283a 	ret

8112e0e0 <OSSemCreate>:
8112e0e0:	defff904 	addi	sp,sp,-28
8112e0e4:	de00012e 	bgeu	sp,et,8112e0ec <OSSemCreate+0xc>
8112e0e8:	003b68fa 	trap	3
8112e0ec:	dfc00615 	stw	ra,24(sp)
8112e0f0:	df000515 	stw	fp,20(sp)
8112e0f4:	df000504 	addi	fp,sp,20
8112e0f8:	2005883a 	mov	r2,r4
8112e0fc:	e0bfff0d 	sth	r2,-4(fp)
8112e100:	e03ffb15 	stw	zero,-20(fp)
8112e104:	d0a08303 	ldbu	r2,-32244(gp)
8112e108:	10803fcc 	andi	r2,r2,255
8112e10c:	10000226 	beq	r2,zero,8112e118 <OSSemCreate+0x38>
8112e110:	0005883a 	mov	r2,zero
8112e114:	00002506 	br	8112e1ac <OSSemCreate+0xcc>
8112e118:	0005303a 	rdctl	r2,status
8112e11c:	e0bffe15 	stw	r2,-8(fp)
8112e120:	e0fffe17 	ldw	r3,-8(fp)
8112e124:	00bfff84 	movi	r2,-2
8112e128:	1884703a 	and	r2,r3,r2
8112e12c:	1001703a 	wrctl	status,r2
8112e130:	e0bffe17 	ldw	r2,-8(fp)
8112e134:	e0bffb15 	stw	r2,-20(fp)
8112e138:	d0a08217 	ldw	r2,-32248(gp)
8112e13c:	e0bffd15 	stw	r2,-12(fp)
8112e140:	d0a08217 	ldw	r2,-32248(gp)
8112e144:	10000326 	beq	r2,zero,8112e154 <OSSemCreate+0x74>
8112e148:	d0a08217 	ldw	r2,-32248(gp)
8112e14c:	10800117 	ldw	r2,4(r2)
8112e150:	d0a08215 	stw	r2,-32248(gp)
8112e154:	e0bffb17 	ldw	r2,-20(fp)
8112e158:	e0bffc15 	stw	r2,-16(fp)
8112e15c:	e0bffc17 	ldw	r2,-16(fp)
8112e160:	1001703a 	wrctl	status,r2
8112e164:	e0bffd17 	ldw	r2,-12(fp)
8112e168:	10000f26 	beq	r2,zero,8112e1a8 <OSSemCreate+0xc8>
8112e16c:	e0bffd17 	ldw	r2,-12(fp)
8112e170:	00c000c4 	movi	r3,3
8112e174:	10c00005 	stb	r3,0(r2)
8112e178:	e0bffd17 	ldw	r2,-12(fp)
8112e17c:	e0ffff0b 	ldhu	r3,-4(fp)
8112e180:	10c0020d 	sth	r3,8(r2)
8112e184:	e0bffd17 	ldw	r2,-12(fp)
8112e188:	10000115 	stw	zero,4(r2)
8112e18c:	e0bffd17 	ldw	r2,-12(fp)
8112e190:	00c00fc4 	movi	r3,63
8112e194:	10c00445 	stb	r3,17(r2)
8112e198:	e0bffd17 	ldw	r2,-12(fp)
8112e19c:	10000485 	stb	zero,18(r2)
8112e1a0:	e13ffd17 	ldw	r4,-12(fp)
8112e1a4:	11290740 	call	81129074 <OS_EventWaitListInit>
8112e1a8:	e0bffd17 	ldw	r2,-12(fp)
8112e1ac:	e037883a 	mov	sp,fp
8112e1b0:	dfc00117 	ldw	ra,4(sp)
8112e1b4:	df000017 	ldw	fp,0(sp)
8112e1b8:	dec00204 	addi	sp,sp,8
8112e1bc:	f800283a 	ret

8112e1c0 <OSSemDel>:
8112e1c0:	defff304 	addi	sp,sp,-52
8112e1c4:	de00012e 	bgeu	sp,et,8112e1cc <OSSemDel+0xc>
8112e1c8:	003b68fa 	trap	3
8112e1cc:	dfc00c15 	stw	ra,48(sp)
8112e1d0:	df000b15 	stw	fp,44(sp)
8112e1d4:	df000b04 	addi	fp,sp,44
8112e1d8:	e13ffd15 	stw	r4,-12(fp)
8112e1dc:	2805883a 	mov	r2,r5
8112e1e0:	e1bfff15 	stw	r6,-4(fp)
8112e1e4:	e0bffe05 	stb	r2,-8(fp)
8112e1e8:	e03ff715 	stw	zero,-36(fp)
8112e1ec:	e0bfff17 	ldw	r2,-4(fp)
8112e1f0:	1000021e 	bne	r2,zero,8112e1fc <OSSemDel+0x3c>
8112e1f4:	e0bffd17 	ldw	r2,-12(fp)
8112e1f8:	00007e06 	br	8112e3f4 <OSSemDel+0x234>
8112e1fc:	e0bffd17 	ldw	r2,-12(fp)
8112e200:	1000051e 	bne	r2,zero,8112e218 <OSSemDel+0x58>
8112e204:	e0bfff17 	ldw	r2,-4(fp)
8112e208:	00c00104 	movi	r3,4
8112e20c:	10c00005 	stb	r3,0(r2)
8112e210:	e0bffd17 	ldw	r2,-12(fp)
8112e214:	00007706 	br	8112e3f4 <OSSemDel+0x234>
8112e218:	e0bffd17 	ldw	r2,-12(fp)
8112e21c:	10800003 	ldbu	r2,0(r2)
8112e220:	10803fcc 	andi	r2,r2,255
8112e224:	108000e0 	cmpeqi	r2,r2,3
8112e228:	1000051e 	bne	r2,zero,8112e240 <OSSemDel+0x80>
8112e22c:	e0bfff17 	ldw	r2,-4(fp)
8112e230:	00c00044 	movi	r3,1
8112e234:	10c00005 	stb	r3,0(r2)
8112e238:	e0bffd17 	ldw	r2,-12(fp)
8112e23c:	00006d06 	br	8112e3f4 <OSSemDel+0x234>
8112e240:	d0a08303 	ldbu	r2,-32244(gp)
8112e244:	10803fcc 	andi	r2,r2,255
8112e248:	10000526 	beq	r2,zero,8112e260 <OSSemDel+0xa0>
8112e24c:	e0bfff17 	ldw	r2,-4(fp)
8112e250:	00c003c4 	movi	r3,15
8112e254:	10c00005 	stb	r3,0(r2)
8112e258:	e0bffd17 	ldw	r2,-12(fp)
8112e25c:	00006506 	br	8112e3f4 <OSSemDel+0x234>
8112e260:	0005303a 	rdctl	r2,status
8112e264:	e0bffc15 	stw	r2,-16(fp)
8112e268:	e0fffc17 	ldw	r3,-16(fp)
8112e26c:	00bfff84 	movi	r2,-2
8112e270:	1884703a 	and	r2,r3,r2
8112e274:	1001703a 	wrctl	status,r2
8112e278:	e0bffc17 	ldw	r2,-16(fp)
8112e27c:	e0bff715 	stw	r2,-36(fp)
8112e280:	e0bffd17 	ldw	r2,-12(fp)
8112e284:	10800283 	ldbu	r2,10(r2)
8112e288:	10803fcc 	andi	r2,r2,255
8112e28c:	10000326 	beq	r2,zero,8112e29c <OSSemDel+0xdc>
8112e290:	00800044 	movi	r2,1
8112e294:	e0bff505 	stb	r2,-44(fp)
8112e298:	00000106 	br	8112e2a0 <OSSemDel+0xe0>
8112e29c:	e03ff505 	stb	zero,-44(fp)
8112e2a0:	e0bffe03 	ldbu	r2,-8(fp)
8112e2a4:	10000326 	beq	r2,zero,8112e2b4 <OSSemDel+0xf4>
8112e2a8:	10800060 	cmpeqi	r2,r2,1
8112e2ac:	1000281e 	bne	r2,zero,8112e350 <OSSemDel+0x190>
8112e2b0:	00004506 	br	8112e3c8 <OSSemDel+0x208>
8112e2b4:	e0bff503 	ldbu	r2,-44(fp)
8112e2b8:	1000161e 	bne	r2,zero,8112e314 <OSSemDel+0x154>
8112e2bc:	e0bffd17 	ldw	r2,-12(fp)
8112e2c0:	00c00fc4 	movi	r3,63
8112e2c4:	10c00445 	stb	r3,17(r2)
8112e2c8:	e0bffd17 	ldw	r2,-12(fp)
8112e2cc:	10000485 	stb	zero,18(r2)
8112e2d0:	e0bffd17 	ldw	r2,-12(fp)
8112e2d4:	10000005 	stb	zero,0(r2)
8112e2d8:	d0e08217 	ldw	r3,-32248(gp)
8112e2dc:	e0bffd17 	ldw	r2,-12(fp)
8112e2e0:	10c00115 	stw	r3,4(r2)
8112e2e4:	e0bffd17 	ldw	r2,-12(fp)
8112e2e8:	1000020d 	sth	zero,8(r2)
8112e2ec:	e0bffd17 	ldw	r2,-12(fp)
8112e2f0:	d0a08215 	stw	r2,-32248(gp)
8112e2f4:	e0bff717 	ldw	r2,-36(fp)
8112e2f8:	e0bff815 	stw	r2,-32(fp)
8112e2fc:	e0bff817 	ldw	r2,-32(fp)
8112e300:	1001703a 	wrctl	status,r2
8112e304:	e0bfff17 	ldw	r2,-4(fp)
8112e308:	10000005 	stb	zero,0(r2)
8112e30c:	e03ff615 	stw	zero,-40(fp)
8112e310:	00003706 	br	8112e3f0 <OSSemDel+0x230>
8112e314:	e0bff717 	ldw	r2,-36(fp)
8112e318:	e0bff915 	stw	r2,-28(fp)
8112e31c:	e0bff917 	ldw	r2,-28(fp)
8112e320:	1001703a 	wrctl	status,r2
8112e324:	e0bfff17 	ldw	r2,-4(fp)
8112e328:	00c01244 	movi	r3,73
8112e32c:	10c00005 	stb	r3,0(r2)
8112e330:	e0bffd17 	ldw	r2,-12(fp)
8112e334:	e0bff615 	stw	r2,-40(fp)
8112e338:	00002d06 	br	8112e3f0 <OSSemDel+0x230>
8112e33c:	000f883a 	mov	r7,zero
8112e340:	01800044 	movi	r6,1
8112e344:	000b883a 	mov	r5,zero
8112e348:	e13ffd17 	ldw	r4,-12(fp)
8112e34c:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112e350:	e0bffd17 	ldw	r2,-12(fp)
8112e354:	10800283 	ldbu	r2,10(r2)
8112e358:	10803fcc 	andi	r2,r2,255
8112e35c:	103ff71e 	bne	r2,zero,8112e33c <__reset+0xfb10e33c>
8112e360:	e0bffd17 	ldw	r2,-12(fp)
8112e364:	00c00fc4 	movi	r3,63
8112e368:	10c00445 	stb	r3,17(r2)
8112e36c:	e0bffd17 	ldw	r2,-12(fp)
8112e370:	10000485 	stb	zero,18(r2)
8112e374:	e0bffd17 	ldw	r2,-12(fp)
8112e378:	10000005 	stb	zero,0(r2)
8112e37c:	d0e08217 	ldw	r3,-32248(gp)
8112e380:	e0bffd17 	ldw	r2,-12(fp)
8112e384:	10c00115 	stw	r3,4(r2)
8112e388:	e0bffd17 	ldw	r2,-12(fp)
8112e38c:	1000020d 	sth	zero,8(r2)
8112e390:	e0bffd17 	ldw	r2,-12(fp)
8112e394:	d0a08215 	stw	r2,-32248(gp)
8112e398:	e0bff717 	ldw	r2,-36(fp)
8112e39c:	e0bffa15 	stw	r2,-24(fp)
8112e3a0:	e0bffa17 	ldw	r2,-24(fp)
8112e3a4:	1001703a 	wrctl	status,r2
8112e3a8:	e0bff503 	ldbu	r2,-44(fp)
8112e3ac:	10800058 	cmpnei	r2,r2,1
8112e3b0:	1000011e 	bne	r2,zero,8112e3b8 <OSSemDel+0x1f8>
8112e3b4:	11295580 	call	81129558 <OS_Sched>
8112e3b8:	e0bfff17 	ldw	r2,-4(fp)
8112e3bc:	10000005 	stb	zero,0(r2)
8112e3c0:	e03ff615 	stw	zero,-40(fp)
8112e3c4:	00000a06 	br	8112e3f0 <OSSemDel+0x230>
8112e3c8:	e0bff717 	ldw	r2,-36(fp)
8112e3cc:	e0bffb15 	stw	r2,-20(fp)
8112e3d0:	e0bffb17 	ldw	r2,-20(fp)
8112e3d4:	1001703a 	wrctl	status,r2
8112e3d8:	e0bfff17 	ldw	r2,-4(fp)
8112e3dc:	00c001c4 	movi	r3,7
8112e3e0:	10c00005 	stb	r3,0(r2)
8112e3e4:	e0bffd17 	ldw	r2,-12(fp)
8112e3e8:	e0bff615 	stw	r2,-40(fp)
8112e3ec:	0001883a 	nop
8112e3f0:	e0bff617 	ldw	r2,-40(fp)
8112e3f4:	e037883a 	mov	sp,fp
8112e3f8:	dfc00117 	ldw	ra,4(sp)
8112e3fc:	df000017 	ldw	fp,0(sp)
8112e400:	dec00204 	addi	sp,sp,8
8112e404:	f800283a 	ret

8112e408 <OSSemPend>:
8112e408:	defff504 	addi	sp,sp,-44
8112e40c:	de00012e 	bgeu	sp,et,8112e414 <OSSemPend+0xc>
8112e410:	003b68fa 	trap	3
8112e414:	dfc00a15 	stw	ra,40(sp)
8112e418:	df000915 	stw	fp,36(sp)
8112e41c:	df000904 	addi	fp,sp,36
8112e420:	e13ffd15 	stw	r4,-12(fp)
8112e424:	2805883a 	mov	r2,r5
8112e428:	e1bfff15 	stw	r6,-4(fp)
8112e42c:	e0bffe0d 	sth	r2,-8(fp)
8112e430:	e03ff715 	stw	zero,-36(fp)
8112e434:	e0bfff17 	ldw	r2,-4(fp)
8112e438:	10007226 	beq	r2,zero,8112e604 <OSSemPend+0x1fc>
8112e43c:	e0bffd17 	ldw	r2,-12(fp)
8112e440:	1000041e 	bne	r2,zero,8112e454 <OSSemPend+0x4c>
8112e444:	e0bfff17 	ldw	r2,-4(fp)
8112e448:	00c00104 	movi	r3,4
8112e44c:	10c00005 	stb	r3,0(r2)
8112e450:	00006d06 	br	8112e608 <OSSemPend+0x200>
8112e454:	e0bffd17 	ldw	r2,-12(fp)
8112e458:	10800003 	ldbu	r2,0(r2)
8112e45c:	10803fcc 	andi	r2,r2,255
8112e460:	108000e0 	cmpeqi	r2,r2,3
8112e464:	1000041e 	bne	r2,zero,8112e478 <OSSemPend+0x70>
8112e468:	e0bfff17 	ldw	r2,-4(fp)
8112e46c:	00c00044 	movi	r3,1
8112e470:	10c00005 	stb	r3,0(r2)
8112e474:	00006406 	br	8112e608 <OSSemPend+0x200>
8112e478:	d0a08303 	ldbu	r2,-32244(gp)
8112e47c:	10803fcc 	andi	r2,r2,255
8112e480:	10000426 	beq	r2,zero,8112e494 <OSSemPend+0x8c>
8112e484:	e0bfff17 	ldw	r2,-4(fp)
8112e488:	00c00084 	movi	r3,2
8112e48c:	10c00005 	stb	r3,0(r2)
8112e490:	00005d06 	br	8112e608 <OSSemPend+0x200>
8112e494:	d0a07103 	ldbu	r2,-32316(gp)
8112e498:	10803fcc 	andi	r2,r2,255
8112e49c:	10000426 	beq	r2,zero,8112e4b0 <OSSemPend+0xa8>
8112e4a0:	e0bfff17 	ldw	r2,-4(fp)
8112e4a4:	00c00344 	movi	r3,13
8112e4a8:	10c00005 	stb	r3,0(r2)
8112e4ac:	00005606 	br	8112e608 <OSSemPend+0x200>
8112e4b0:	0005303a 	rdctl	r2,status
8112e4b4:	e0bffc15 	stw	r2,-16(fp)
8112e4b8:	e0fffc17 	ldw	r3,-16(fp)
8112e4bc:	00bfff84 	movi	r2,-2
8112e4c0:	1884703a 	and	r2,r3,r2
8112e4c4:	1001703a 	wrctl	status,r2
8112e4c8:	e0bffc17 	ldw	r2,-16(fp)
8112e4cc:	e0bff715 	stw	r2,-36(fp)
8112e4d0:	e0bffd17 	ldw	r2,-12(fp)
8112e4d4:	1080020b 	ldhu	r2,8(r2)
8112e4d8:	10bfffcc 	andi	r2,r2,65535
8112e4dc:	10000d26 	beq	r2,zero,8112e514 <OSSemPend+0x10c>
8112e4e0:	e0bffd17 	ldw	r2,-12(fp)
8112e4e4:	1080020b 	ldhu	r2,8(r2)
8112e4e8:	10bfffc4 	addi	r2,r2,-1
8112e4ec:	1007883a 	mov	r3,r2
8112e4f0:	e0bffd17 	ldw	r2,-12(fp)
8112e4f4:	10c0020d 	sth	r3,8(r2)
8112e4f8:	e0bff717 	ldw	r2,-36(fp)
8112e4fc:	e0bff815 	stw	r2,-32(fp)
8112e500:	e0bff817 	ldw	r2,-32(fp)
8112e504:	1001703a 	wrctl	status,r2
8112e508:	e0bfff17 	ldw	r2,-4(fp)
8112e50c:	10000005 	stb	zero,0(r2)
8112e510:	00003d06 	br	8112e608 <OSSemPend+0x200>
8112e514:	d0a08417 	ldw	r2,-32240(gp)
8112e518:	d0e08417 	ldw	r3,-32240(gp)
8112e51c:	18c00c03 	ldbu	r3,48(r3)
8112e520:	18c00054 	ori	r3,r3,1
8112e524:	10c00c05 	stb	r3,48(r2)
8112e528:	d0a08417 	ldw	r2,-32240(gp)
8112e52c:	10000c45 	stb	zero,49(r2)
8112e530:	d0a08417 	ldw	r2,-32240(gp)
8112e534:	e0fffe0b 	ldhu	r3,-8(fp)
8112e538:	10c00b8d 	sth	r3,46(r2)
8112e53c:	e13ffd17 	ldw	r4,-12(fp)
8112e540:	1128c3c0 	call	81128c3c <OS_EventTaskWait>
8112e544:	e0bff717 	ldw	r2,-36(fp)
8112e548:	e0bffb15 	stw	r2,-20(fp)
8112e54c:	e0bffb17 	ldw	r2,-20(fp)
8112e550:	1001703a 	wrctl	status,r2
8112e554:	11295580 	call	81129558 <OS_Sched>
8112e558:	0005303a 	rdctl	r2,status
8112e55c:	e0bff915 	stw	r2,-28(fp)
8112e560:	e0fff917 	ldw	r3,-28(fp)
8112e564:	00bfff84 	movi	r2,-2
8112e568:	1884703a 	and	r2,r3,r2
8112e56c:	1001703a 	wrctl	status,r2
8112e570:	e0bff917 	ldw	r2,-28(fp)
8112e574:	e0bff715 	stw	r2,-36(fp)
8112e578:	d0a08417 	ldw	r2,-32240(gp)
8112e57c:	10800c43 	ldbu	r2,49(r2)
8112e580:	10803fcc 	andi	r2,r2,255
8112e584:	10000326 	beq	r2,zero,8112e594 <OSSemPend+0x18c>
8112e588:	108000a0 	cmpeqi	r2,r2,2
8112e58c:	1000041e 	bne	r2,zero,8112e5a0 <OSSemPend+0x198>
8112e590:	00000706 	br	8112e5b0 <OSSemPend+0x1a8>
8112e594:	e0bfff17 	ldw	r2,-4(fp)
8112e598:	10000005 	stb	zero,0(r2)
8112e59c:	00000c06 	br	8112e5d0 <OSSemPend+0x1c8>
8112e5a0:	e0bfff17 	ldw	r2,-4(fp)
8112e5a4:	00c00384 	movi	r3,14
8112e5a8:	10c00005 	stb	r3,0(r2)
8112e5ac:	00000806 	br	8112e5d0 <OSSemPend+0x1c8>
8112e5b0:	d0a08417 	ldw	r2,-32240(gp)
8112e5b4:	e17ffd17 	ldw	r5,-12(fp)
8112e5b8:	1009883a 	mov	r4,r2
8112e5bc:	1128eac0 	call	81128eac <OS_EventTaskRemove>
8112e5c0:	e0bfff17 	ldw	r2,-4(fp)
8112e5c4:	00c00284 	movi	r3,10
8112e5c8:	10c00005 	stb	r3,0(r2)
8112e5cc:	0001883a 	nop
8112e5d0:	d0a08417 	ldw	r2,-32240(gp)
8112e5d4:	10000c05 	stb	zero,48(r2)
8112e5d8:	d0a08417 	ldw	r2,-32240(gp)
8112e5dc:	10000c45 	stb	zero,49(r2)
8112e5e0:	d0a08417 	ldw	r2,-32240(gp)
8112e5e4:	10000715 	stw	zero,28(r2)
8112e5e8:	d0a08417 	ldw	r2,-32240(gp)
8112e5ec:	10000815 	stw	zero,32(r2)
8112e5f0:	e0bff717 	ldw	r2,-36(fp)
8112e5f4:	e0bffa15 	stw	r2,-24(fp)
8112e5f8:	e0bffa17 	ldw	r2,-24(fp)
8112e5fc:	1001703a 	wrctl	status,r2
8112e600:	00000106 	br	8112e608 <OSSemPend+0x200>
8112e604:	0001883a 	nop
8112e608:	e037883a 	mov	sp,fp
8112e60c:	dfc00117 	ldw	ra,4(sp)
8112e610:	df000017 	ldw	fp,0(sp)
8112e614:	dec00204 	addi	sp,sp,8
8112e618:	f800283a 	ret

8112e61c <OSSemPendAbort>:
8112e61c:	defff604 	addi	sp,sp,-40
8112e620:	de00012e 	bgeu	sp,et,8112e628 <OSSemPendAbort+0xc>
8112e624:	003b68fa 	trap	3
8112e628:	dfc00915 	stw	ra,36(sp)
8112e62c:	df000815 	stw	fp,32(sp)
8112e630:	df000804 	addi	fp,sp,32
8112e634:	e13ffd15 	stw	r4,-12(fp)
8112e638:	2805883a 	mov	r2,r5
8112e63c:	e1bfff15 	stw	r6,-4(fp)
8112e640:	e0bffe05 	stb	r2,-8(fp)
8112e644:	e03ff915 	stw	zero,-28(fp)
8112e648:	e0bfff17 	ldw	r2,-4(fp)
8112e64c:	1000021e 	bne	r2,zero,8112e658 <OSSemPendAbort+0x3c>
8112e650:	0005883a 	mov	r2,zero
8112e654:	00004906 	br	8112e77c <OSSemPendAbort+0x160>
8112e658:	e0bffd17 	ldw	r2,-12(fp)
8112e65c:	1000051e 	bne	r2,zero,8112e674 <OSSemPendAbort+0x58>
8112e660:	e0bfff17 	ldw	r2,-4(fp)
8112e664:	00c00104 	movi	r3,4
8112e668:	10c00005 	stb	r3,0(r2)
8112e66c:	0005883a 	mov	r2,zero
8112e670:	00004206 	br	8112e77c <OSSemPendAbort+0x160>
8112e674:	e0bffd17 	ldw	r2,-12(fp)
8112e678:	10800003 	ldbu	r2,0(r2)
8112e67c:	10803fcc 	andi	r2,r2,255
8112e680:	108000e0 	cmpeqi	r2,r2,3
8112e684:	1000051e 	bne	r2,zero,8112e69c <OSSemPendAbort+0x80>
8112e688:	e0bfff17 	ldw	r2,-4(fp)
8112e68c:	00c00044 	movi	r3,1
8112e690:	10c00005 	stb	r3,0(r2)
8112e694:	0005883a 	mov	r2,zero
8112e698:	00003806 	br	8112e77c <OSSemPendAbort+0x160>
8112e69c:	0005303a 	rdctl	r2,status
8112e6a0:	e0bffc15 	stw	r2,-16(fp)
8112e6a4:	e0fffc17 	ldw	r3,-16(fp)
8112e6a8:	00bfff84 	movi	r2,-2
8112e6ac:	1884703a 	and	r2,r3,r2
8112e6b0:	1001703a 	wrctl	status,r2
8112e6b4:	e0bffc17 	ldw	r2,-16(fp)
8112e6b8:	e0bff915 	stw	r2,-28(fp)
8112e6bc:	e0bffd17 	ldw	r2,-12(fp)
8112e6c0:	10800283 	ldbu	r2,10(r2)
8112e6c4:	10803fcc 	andi	r2,r2,255
8112e6c8:	10002526 	beq	r2,zero,8112e760 <OSSemPendAbort+0x144>
8112e6cc:	e03ff805 	stb	zero,-32(fp)
8112e6d0:	e0bffe03 	ldbu	r2,-8(fp)
8112e6d4:	10800060 	cmpeqi	r2,r2,1
8112e6d8:	10000e26 	beq	r2,zero,8112e714 <OSSemPendAbort+0xf8>
8112e6dc:	00000806 	br	8112e700 <OSSemPendAbort+0xe4>
8112e6e0:	01c00084 	movi	r7,2
8112e6e4:	01800044 	movi	r6,1
8112e6e8:	000b883a 	mov	r5,zero
8112e6ec:	e13ffd17 	ldw	r4,-12(fp)
8112e6f0:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112e6f4:	e0bff803 	ldbu	r2,-32(fp)
8112e6f8:	10800044 	addi	r2,r2,1
8112e6fc:	e0bff805 	stb	r2,-32(fp)
8112e700:	e0bffd17 	ldw	r2,-12(fp)
8112e704:	10800283 	ldbu	r2,10(r2)
8112e708:	10803fcc 	andi	r2,r2,255
8112e70c:	103ff41e 	bne	r2,zero,8112e6e0 <__reset+0xfb10e6e0>
8112e710:	00000906 	br	8112e738 <OSSemPendAbort+0x11c>
8112e714:	01c00084 	movi	r7,2
8112e718:	01800044 	movi	r6,1
8112e71c:	000b883a 	mov	r5,zero
8112e720:	e13ffd17 	ldw	r4,-12(fp)
8112e724:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112e728:	e0bff803 	ldbu	r2,-32(fp)
8112e72c:	10800044 	addi	r2,r2,1
8112e730:	e0bff805 	stb	r2,-32(fp)
8112e734:	0001883a 	nop
8112e738:	e0bff917 	ldw	r2,-28(fp)
8112e73c:	e0bffa15 	stw	r2,-24(fp)
8112e740:	e0bffa17 	ldw	r2,-24(fp)
8112e744:	1001703a 	wrctl	status,r2
8112e748:	11295580 	call	81129558 <OS_Sched>
8112e74c:	e0bfff17 	ldw	r2,-4(fp)
8112e750:	00c00384 	movi	r3,14
8112e754:	10c00005 	stb	r3,0(r2)
8112e758:	e0bff803 	ldbu	r2,-32(fp)
8112e75c:	00000706 	br	8112e77c <OSSemPendAbort+0x160>
8112e760:	e0bff917 	ldw	r2,-28(fp)
8112e764:	e0bffb15 	stw	r2,-20(fp)
8112e768:	e0bffb17 	ldw	r2,-20(fp)
8112e76c:	1001703a 	wrctl	status,r2
8112e770:	e0bfff17 	ldw	r2,-4(fp)
8112e774:	10000005 	stb	zero,0(r2)
8112e778:	0005883a 	mov	r2,zero
8112e77c:	e037883a 	mov	sp,fp
8112e780:	dfc00117 	ldw	ra,4(sp)
8112e784:	df000017 	ldw	fp,0(sp)
8112e788:	dec00204 	addi	sp,sp,8
8112e78c:	f800283a 	ret

8112e790 <OSSemPost>:
8112e790:	defff804 	addi	sp,sp,-32
8112e794:	de00012e 	bgeu	sp,et,8112e79c <OSSemPost+0xc>
8112e798:	003b68fa 	trap	3
8112e79c:	dfc00715 	stw	ra,28(sp)
8112e7a0:	df000615 	stw	fp,24(sp)
8112e7a4:	df000604 	addi	fp,sp,24
8112e7a8:	e13fff15 	stw	r4,-4(fp)
8112e7ac:	e03ffa15 	stw	zero,-24(fp)
8112e7b0:	e0bfff17 	ldw	r2,-4(fp)
8112e7b4:	1000021e 	bne	r2,zero,8112e7c0 <OSSemPost+0x30>
8112e7b8:	00800104 	movi	r2,4
8112e7bc:	00003506 	br	8112e894 <OSSemPost+0x104>
8112e7c0:	e0bfff17 	ldw	r2,-4(fp)
8112e7c4:	10800003 	ldbu	r2,0(r2)
8112e7c8:	10803fcc 	andi	r2,r2,255
8112e7cc:	108000e0 	cmpeqi	r2,r2,3
8112e7d0:	1000021e 	bne	r2,zero,8112e7dc <OSSemPost+0x4c>
8112e7d4:	00800044 	movi	r2,1
8112e7d8:	00002e06 	br	8112e894 <OSSemPost+0x104>
8112e7dc:	0005303a 	rdctl	r2,status
8112e7e0:	e0bffe15 	stw	r2,-8(fp)
8112e7e4:	e0fffe17 	ldw	r3,-8(fp)
8112e7e8:	00bfff84 	movi	r2,-2
8112e7ec:	1884703a 	and	r2,r3,r2
8112e7f0:	1001703a 	wrctl	status,r2
8112e7f4:	e0bffe17 	ldw	r2,-8(fp)
8112e7f8:	e0bffa15 	stw	r2,-24(fp)
8112e7fc:	e0bfff17 	ldw	r2,-4(fp)
8112e800:	10800283 	ldbu	r2,10(r2)
8112e804:	10803fcc 	andi	r2,r2,255
8112e808:	10000c26 	beq	r2,zero,8112e83c <OSSemPost+0xac>
8112e80c:	000f883a 	mov	r7,zero
8112e810:	01800044 	movi	r6,1
8112e814:	000b883a 	mov	r5,zero
8112e818:	e13fff17 	ldw	r4,-4(fp)
8112e81c:	1128a9c0 	call	81128a9c <OS_EventTaskRdy>
8112e820:	e0bffa17 	ldw	r2,-24(fp)
8112e824:	e0bffb15 	stw	r2,-20(fp)
8112e828:	e0bffb17 	ldw	r2,-20(fp)
8112e82c:	1001703a 	wrctl	status,r2
8112e830:	11295580 	call	81129558 <OS_Sched>
8112e834:	0005883a 	mov	r2,zero
8112e838:	00001606 	br	8112e894 <OSSemPost+0x104>
8112e83c:	e0bfff17 	ldw	r2,-4(fp)
8112e840:	1080020b 	ldhu	r2,8(r2)
8112e844:	10ffffcc 	andi	r3,r2,65535
8112e848:	00bfffd4 	movui	r2,65535
8112e84c:	18800c26 	beq	r3,r2,8112e880 <OSSemPost+0xf0>
8112e850:	e0bfff17 	ldw	r2,-4(fp)
8112e854:	1080020b 	ldhu	r2,8(r2)
8112e858:	10800044 	addi	r2,r2,1
8112e85c:	1007883a 	mov	r3,r2
8112e860:	e0bfff17 	ldw	r2,-4(fp)
8112e864:	10c0020d 	sth	r3,8(r2)
8112e868:	e0bffa17 	ldw	r2,-24(fp)
8112e86c:	e0bffc15 	stw	r2,-16(fp)
8112e870:	e0bffc17 	ldw	r2,-16(fp)
8112e874:	1001703a 	wrctl	status,r2
8112e878:	0005883a 	mov	r2,zero
8112e87c:	00000506 	br	8112e894 <OSSemPost+0x104>
8112e880:	e0bffa17 	ldw	r2,-24(fp)
8112e884:	e0bffd15 	stw	r2,-12(fp)
8112e888:	e0bffd17 	ldw	r2,-12(fp)
8112e88c:	1001703a 	wrctl	status,r2
8112e890:	00800c84 	movi	r2,50
8112e894:	e037883a 	mov	sp,fp
8112e898:	dfc00117 	ldw	ra,4(sp)
8112e89c:	df000017 	ldw	fp,0(sp)
8112e8a0:	dec00204 	addi	sp,sp,8
8112e8a4:	f800283a 	ret

8112e8a8 <OSSemQuery>:
8112e8a8:	defff704 	addi	sp,sp,-36
8112e8ac:	de00012e 	bgeu	sp,et,8112e8b4 <OSSemQuery+0xc>
8112e8b0:	003b68fa 	trap	3
8112e8b4:	df000815 	stw	fp,32(sp)
8112e8b8:	df000804 	addi	fp,sp,32
8112e8bc:	e13ffe15 	stw	r4,-8(fp)
8112e8c0:	e17fff15 	stw	r5,-4(fp)
8112e8c4:	e03ffb15 	stw	zero,-20(fp)
8112e8c8:	e0bffe17 	ldw	r2,-8(fp)
8112e8cc:	1000021e 	bne	r2,zero,8112e8d8 <OSSemQuery+0x30>
8112e8d0:	00800104 	movi	r2,4
8112e8d4:	00003606 	br	8112e9b0 <OSSemQuery+0x108>
8112e8d8:	e0bfff17 	ldw	r2,-4(fp)
8112e8dc:	1000021e 	bne	r2,zero,8112e8e8 <OSSemQuery+0x40>
8112e8e0:	00800244 	movi	r2,9
8112e8e4:	00003206 	br	8112e9b0 <OSSemQuery+0x108>
8112e8e8:	e0bffe17 	ldw	r2,-8(fp)
8112e8ec:	10800003 	ldbu	r2,0(r2)
8112e8f0:	10803fcc 	andi	r2,r2,255
8112e8f4:	108000e0 	cmpeqi	r2,r2,3
8112e8f8:	1000021e 	bne	r2,zero,8112e904 <OSSemQuery+0x5c>
8112e8fc:	00800044 	movi	r2,1
8112e900:	00002b06 	br	8112e9b0 <OSSemQuery+0x108>
8112e904:	0005303a 	rdctl	r2,status
8112e908:	e0bffd15 	stw	r2,-12(fp)
8112e90c:	e0fffd17 	ldw	r3,-12(fp)
8112e910:	00bfff84 	movi	r2,-2
8112e914:	1884703a 	and	r2,r3,r2
8112e918:	1001703a 	wrctl	status,r2
8112e91c:	e0bffd17 	ldw	r2,-12(fp)
8112e920:	e0bffb15 	stw	r2,-20(fp)
8112e924:	e0bffe17 	ldw	r2,-8(fp)
8112e928:	10c00283 	ldbu	r3,10(r2)
8112e92c:	e0bfff17 	ldw	r2,-4(fp)
8112e930:	10c00205 	stb	r3,8(r2)
8112e934:	e0bffe17 	ldw	r2,-8(fp)
8112e938:	108002c4 	addi	r2,r2,11
8112e93c:	e0bff815 	stw	r2,-32(fp)
8112e940:	e0bfff17 	ldw	r2,-4(fp)
8112e944:	10800084 	addi	r2,r2,2
8112e948:	e0bff915 	stw	r2,-28(fp)
8112e94c:	e03ffa05 	stb	zero,-24(fp)
8112e950:	00000b06 	br	8112e980 <OSSemQuery+0xd8>
8112e954:	e0bff917 	ldw	r2,-28(fp)
8112e958:	10c00044 	addi	r3,r2,1
8112e95c:	e0fff915 	stw	r3,-28(fp)
8112e960:	e0fff817 	ldw	r3,-32(fp)
8112e964:	19000044 	addi	r4,r3,1
8112e968:	e13ff815 	stw	r4,-32(fp)
8112e96c:	18c00003 	ldbu	r3,0(r3)
8112e970:	10c00005 	stb	r3,0(r2)
8112e974:	e0bffa03 	ldbu	r2,-24(fp)
8112e978:	10800044 	addi	r2,r2,1
8112e97c:	e0bffa05 	stb	r2,-24(fp)
8112e980:	e0bffa03 	ldbu	r2,-24(fp)
8112e984:	108001b0 	cmpltui	r2,r2,6
8112e988:	103ff21e 	bne	r2,zero,8112e954 <__reset+0xfb10e954>
8112e98c:	e0bffe17 	ldw	r2,-8(fp)
8112e990:	10c0020b 	ldhu	r3,8(r2)
8112e994:	e0bfff17 	ldw	r2,-4(fp)
8112e998:	10c0000d 	sth	r3,0(r2)
8112e99c:	e0bffb17 	ldw	r2,-20(fp)
8112e9a0:	e0bffc15 	stw	r2,-16(fp)
8112e9a4:	e0bffc17 	ldw	r2,-16(fp)
8112e9a8:	1001703a 	wrctl	status,r2
8112e9ac:	0005883a 	mov	r2,zero
8112e9b0:	e037883a 	mov	sp,fp
8112e9b4:	df000017 	ldw	fp,0(sp)
8112e9b8:	dec00104 	addi	sp,sp,4
8112e9bc:	f800283a 	ret

8112e9c0 <OSSemSet>:
8112e9c0:	defff904 	addi	sp,sp,-28
8112e9c4:	de00012e 	bgeu	sp,et,8112e9cc <OSSemSet+0xc>
8112e9c8:	003b68fa 	trap	3
8112e9cc:	df000615 	stw	fp,24(sp)
8112e9d0:	df000604 	addi	fp,sp,24
8112e9d4:	e13ffd15 	stw	r4,-12(fp)
8112e9d8:	2805883a 	mov	r2,r5
8112e9dc:	e1bfff15 	stw	r6,-4(fp)
8112e9e0:	e0bffe0d 	sth	r2,-8(fp)
8112e9e4:	e03ffa15 	stw	zero,-24(fp)
8112e9e8:	e0bfff17 	ldw	r2,-4(fp)
8112e9ec:	10003126 	beq	r2,zero,8112eab4 <OSSemSet+0xf4>
8112e9f0:	e0bffd17 	ldw	r2,-12(fp)
8112e9f4:	1000041e 	bne	r2,zero,8112ea08 <OSSemSet+0x48>
8112e9f8:	e0bfff17 	ldw	r2,-4(fp)
8112e9fc:	00c00104 	movi	r3,4
8112ea00:	10c00005 	stb	r3,0(r2)
8112ea04:	00002c06 	br	8112eab8 <OSSemSet+0xf8>
8112ea08:	e0bffd17 	ldw	r2,-12(fp)
8112ea0c:	10800003 	ldbu	r2,0(r2)
8112ea10:	10803fcc 	andi	r2,r2,255
8112ea14:	108000e0 	cmpeqi	r2,r2,3
8112ea18:	1000041e 	bne	r2,zero,8112ea2c <OSSemSet+0x6c>
8112ea1c:	e0bfff17 	ldw	r2,-4(fp)
8112ea20:	00c00044 	movi	r3,1
8112ea24:	10c00005 	stb	r3,0(r2)
8112ea28:	00002306 	br	8112eab8 <OSSemSet+0xf8>
8112ea2c:	0005303a 	rdctl	r2,status
8112ea30:	e0bffc15 	stw	r2,-16(fp)
8112ea34:	e0fffc17 	ldw	r3,-16(fp)
8112ea38:	00bfff84 	movi	r2,-2
8112ea3c:	1884703a 	and	r2,r3,r2
8112ea40:	1001703a 	wrctl	status,r2
8112ea44:	e0bffc17 	ldw	r2,-16(fp)
8112ea48:	e0bffa15 	stw	r2,-24(fp)
8112ea4c:	e0bfff17 	ldw	r2,-4(fp)
8112ea50:	10000005 	stb	zero,0(r2)
8112ea54:	e0bffd17 	ldw	r2,-12(fp)
8112ea58:	1080020b 	ldhu	r2,8(r2)
8112ea5c:	10bfffcc 	andi	r2,r2,65535
8112ea60:	10000426 	beq	r2,zero,8112ea74 <OSSemSet+0xb4>
8112ea64:	e0bffd17 	ldw	r2,-12(fp)
8112ea68:	e0fffe0b 	ldhu	r3,-8(fp)
8112ea6c:	10c0020d 	sth	r3,8(r2)
8112ea70:	00000b06 	br	8112eaa0 <OSSemSet+0xe0>
8112ea74:	e0bffd17 	ldw	r2,-12(fp)
8112ea78:	10800283 	ldbu	r2,10(r2)
8112ea7c:	10803fcc 	andi	r2,r2,255
8112ea80:	1000041e 	bne	r2,zero,8112ea94 <OSSemSet+0xd4>
8112ea84:	e0bffd17 	ldw	r2,-12(fp)
8112ea88:	e0fffe0b 	ldhu	r3,-8(fp)
8112ea8c:	10c0020d 	sth	r3,8(r2)
8112ea90:	00000306 	br	8112eaa0 <OSSemSet+0xe0>
8112ea94:	e0bfff17 	ldw	r2,-4(fp)
8112ea98:	00c01244 	movi	r3,73
8112ea9c:	10c00005 	stb	r3,0(r2)
8112eaa0:	e0bffa17 	ldw	r2,-24(fp)
8112eaa4:	e0bffb15 	stw	r2,-20(fp)
8112eaa8:	e0bffb17 	ldw	r2,-20(fp)
8112eaac:	1001703a 	wrctl	status,r2
8112eab0:	00000106 	br	8112eab8 <OSSemSet+0xf8>
8112eab4:	0001883a 	nop
8112eab8:	e037883a 	mov	sp,fp
8112eabc:	df000017 	ldw	fp,0(sp)
8112eac0:	dec00104 	addi	sp,sp,4
8112eac4:	f800283a 	ret

8112eac8 <OSTaskChangePrio>:
8112eac8:	defff104 	addi	sp,sp,-60
8112eacc:	de00012e 	bgeu	sp,et,8112ead4 <OSTaskChangePrio+0xc>
8112ead0:	003b68fa 	trap	3
8112ead4:	dfc00e15 	stw	ra,56(sp)
8112ead8:	df000d15 	stw	fp,52(sp)
8112eadc:	df000d04 	addi	fp,sp,52
8112eae0:	2007883a 	mov	r3,r4
8112eae4:	2805883a 	mov	r2,r5
8112eae8:	e0fffe05 	stb	r3,-8(fp)
8112eaec:	e0bfff05 	stb	r2,-4(fp)
8112eaf0:	e03ff515 	stw	zero,-44(fp)
8112eaf4:	e0bffe03 	ldbu	r2,-8(fp)
8112eaf8:	10800a30 	cmpltui	r2,r2,40
8112eafc:	1000051e 	bne	r2,zero,8112eb14 <OSTaskChangePrio+0x4c>
8112eb00:	e0bffe03 	ldbu	r2,-8(fp)
8112eb04:	10803fe0 	cmpeqi	r2,r2,255
8112eb08:	1000021e 	bne	r2,zero,8112eb14 <OSTaskChangePrio+0x4c>
8112eb0c:	00800a84 	movi	r2,42
8112eb10:	00012606 	br	8112efac <OSTaskChangePrio+0x4e4>
8112eb14:	e0bfff03 	ldbu	r2,-4(fp)
8112eb18:	10800a30 	cmpltui	r2,r2,40
8112eb1c:	1000021e 	bne	r2,zero,8112eb28 <OSTaskChangePrio+0x60>
8112eb20:	00800a84 	movi	r2,42
8112eb24:	00012106 	br	8112efac <OSTaskChangePrio+0x4e4>
8112eb28:	0005303a 	rdctl	r2,status
8112eb2c:	e0bffd15 	stw	r2,-12(fp)
8112eb30:	e0fffd17 	ldw	r3,-12(fp)
8112eb34:	00bfff84 	movi	r2,-2
8112eb38:	1884703a 	and	r2,r3,r2
8112eb3c:	1001703a 	wrctl	status,r2
8112eb40:	e0bffd17 	ldw	r2,-12(fp)
8112eb44:	e0bff515 	stw	r2,-44(fp)
8112eb48:	e0ffff03 	ldbu	r3,-4(fp)
8112eb4c:	00a04574 	movhi	r2,33045
8112eb50:	108d5704 	addi	r2,r2,13660
8112eb54:	18c7883a 	add	r3,r3,r3
8112eb58:	18c7883a 	add	r3,r3,r3
8112eb5c:	10c5883a 	add	r2,r2,r3
8112eb60:	10800017 	ldw	r2,0(r2)
8112eb64:	10000626 	beq	r2,zero,8112eb80 <OSTaskChangePrio+0xb8>
8112eb68:	e0bff517 	ldw	r2,-44(fp)
8112eb6c:	e0bff615 	stw	r2,-40(fp)
8112eb70:	e0bff617 	ldw	r2,-40(fp)
8112eb74:	1001703a 	wrctl	status,r2
8112eb78:	00800a04 	movi	r2,40
8112eb7c:	00010b06 	br	8112efac <OSTaskChangePrio+0x4e4>
8112eb80:	e0bffe03 	ldbu	r2,-8(fp)
8112eb84:	10803fd8 	cmpnei	r2,r2,255
8112eb88:	1000031e 	bne	r2,zero,8112eb98 <OSTaskChangePrio+0xd0>
8112eb8c:	d0a08417 	ldw	r2,-32240(gp)
8112eb90:	10800c83 	ldbu	r2,50(r2)
8112eb94:	e0bffe05 	stb	r2,-8(fp)
8112eb98:	e0fffe03 	ldbu	r3,-8(fp)
8112eb9c:	00a04574 	movhi	r2,33045
8112eba0:	108d5704 	addi	r2,r2,13660
8112eba4:	18c7883a 	add	r3,r3,r3
8112eba8:	18c7883a 	add	r3,r3,r3
8112ebac:	10c5883a 	add	r2,r2,r3
8112ebb0:	10800017 	ldw	r2,0(r2)
8112ebb4:	e0bff815 	stw	r2,-32(fp)
8112ebb8:	e0bff817 	ldw	r2,-32(fp)
8112ebbc:	1000061e 	bne	r2,zero,8112ebd8 <OSTaskChangePrio+0x110>
8112ebc0:	e0bff517 	ldw	r2,-44(fp)
8112ebc4:	e0bff715 	stw	r2,-36(fp)
8112ebc8:	e0bff717 	ldw	r2,-36(fp)
8112ebcc:	1001703a 	wrctl	status,r2
8112ebd0:	00800a44 	movi	r2,41
8112ebd4:	0000f506 	br	8112efac <OSTaskChangePrio+0x4e4>
8112ebd8:	e0bff817 	ldw	r2,-32(fp)
8112ebdc:	10800058 	cmpnei	r2,r2,1
8112ebe0:	1000061e 	bne	r2,zero,8112ebfc <OSTaskChangePrio+0x134>
8112ebe4:	e0bff517 	ldw	r2,-44(fp)
8112ebe8:	e0bff915 	stw	r2,-28(fp)
8112ebec:	e0bff917 	ldw	r2,-28(fp)
8112ebf0:	1001703a 	wrctl	status,r2
8112ebf4:	008010c4 	movi	r2,67
8112ebf8:	0000ec06 	br	8112efac <OSTaskChangePrio+0x4e4>
8112ebfc:	e0bfff03 	ldbu	r2,-4(fp)
8112ec00:	1004d0fa 	srli	r2,r2,3
8112ec04:	e0bffb05 	stb	r2,-20(fp)
8112ec08:	e0bfff03 	ldbu	r2,-4(fp)
8112ec0c:	108001cc 	andi	r2,r2,7
8112ec10:	e0bffb45 	stb	r2,-19(fp)
8112ec14:	e0bffb03 	ldbu	r2,-20(fp)
8112ec18:	00c00044 	movi	r3,1
8112ec1c:	1884983a 	sll	r2,r3,r2
8112ec20:	e0bffb85 	stb	r2,-18(fp)
8112ec24:	e0bffb43 	ldbu	r2,-19(fp)
8112ec28:	00c00044 	movi	r3,1
8112ec2c:	1884983a 	sll	r2,r3,r2
8112ec30:	e0bffbc5 	stb	r2,-17(fp)
8112ec34:	e0fffe03 	ldbu	r3,-8(fp)
8112ec38:	00a04574 	movhi	r2,33045
8112ec3c:	108d5704 	addi	r2,r2,13660
8112ec40:	18c7883a 	add	r3,r3,r3
8112ec44:	18c7883a 	add	r3,r3,r3
8112ec48:	10c5883a 	add	r2,r2,r3
8112ec4c:	10000015 	stw	zero,0(r2)
8112ec50:	e0ffff03 	ldbu	r3,-4(fp)
8112ec54:	00a04574 	movhi	r2,33045
8112ec58:	108d5704 	addi	r2,r2,13660
8112ec5c:	18c7883a 	add	r3,r3,r3
8112ec60:	18c7883a 	add	r3,r3,r3
8112ec64:	10c5883a 	add	r2,r2,r3
8112ec68:	e0fff817 	ldw	r3,-32(fp)
8112ec6c:	10c00015 	stw	r3,0(r2)
8112ec70:	e0bff817 	ldw	r2,-32(fp)
8112ec74:	10800d03 	ldbu	r2,52(r2)
8112ec78:	e0bffc05 	stb	r2,-16(fp)
8112ec7c:	e0bff817 	ldw	r2,-32(fp)
8112ec80:	10800d83 	ldbu	r2,54(r2)
8112ec84:	e0bffc45 	stb	r2,-15(fp)
8112ec88:	e0bff817 	ldw	r2,-32(fp)
8112ec8c:	10800d43 	ldbu	r2,53(r2)
8112ec90:	e0bffc85 	stb	r2,-14(fp)
8112ec94:	e0fffc03 	ldbu	r3,-16(fp)
8112ec98:	d0a08044 	addi	r2,gp,-32255
8112ec9c:	1885883a 	add	r2,r3,r2
8112eca0:	10c00003 	ldbu	r3,0(r2)
8112eca4:	e0bffc83 	ldbu	r2,-14(fp)
8112eca8:	1884703a 	and	r2,r3,r2
8112ecac:	10803fcc 	andi	r2,r2,255
8112ecb0:	10002826 	beq	r2,zero,8112ed54 <OSTaskChangePrio+0x28c>
8112ecb4:	e0fffc03 	ldbu	r3,-16(fp)
8112ecb8:	e13ffc03 	ldbu	r4,-16(fp)
8112ecbc:	d0a08044 	addi	r2,gp,-32255
8112ecc0:	2085883a 	add	r2,r4,r2
8112ecc4:	10800003 	ldbu	r2,0(r2)
8112ecc8:	1009883a 	mov	r4,r2
8112eccc:	e0bffc83 	ldbu	r2,-14(fp)
8112ecd0:	0084303a 	nor	r2,zero,r2
8112ecd4:	2084703a 	and	r2,r4,r2
8112ecd8:	1009883a 	mov	r4,r2
8112ecdc:	d0a08044 	addi	r2,gp,-32255
8112ece0:	1885883a 	add	r2,r3,r2
8112ece4:	11000005 	stb	r4,0(r2)
8112ece8:	e0fffc03 	ldbu	r3,-16(fp)
8112ecec:	d0a08044 	addi	r2,gp,-32255
8112ecf0:	1885883a 	add	r2,r3,r2
8112ecf4:	10800003 	ldbu	r2,0(r2)
8112ecf8:	10803fcc 	andi	r2,r2,255
8112ecfc:	1000061e 	bne	r2,zero,8112ed18 <OSTaskChangePrio+0x250>
8112ed00:	e0bffc43 	ldbu	r2,-15(fp)
8112ed04:	0084303a 	nor	r2,zero,r2
8112ed08:	1007883a 	mov	r3,r2
8112ed0c:	d0a08003 	ldbu	r2,-32256(gp)
8112ed10:	1884703a 	and	r2,r3,r2
8112ed14:	d0a08005 	stb	r2,-32256(gp)
8112ed18:	d0e08003 	ldbu	r3,-32256(gp)
8112ed1c:	e0bffb83 	ldbu	r2,-18(fp)
8112ed20:	1884b03a 	or	r2,r3,r2
8112ed24:	d0a08005 	stb	r2,-32256(gp)
8112ed28:	e0fffb03 	ldbu	r3,-20(fp)
8112ed2c:	e13ffb03 	ldbu	r4,-20(fp)
8112ed30:	d0a08044 	addi	r2,gp,-32255
8112ed34:	2085883a 	add	r2,r4,r2
8112ed38:	11000003 	ldbu	r4,0(r2)
8112ed3c:	e0bffbc3 	ldbu	r2,-17(fp)
8112ed40:	2084b03a 	or	r2,r4,r2
8112ed44:	1009883a 	mov	r4,r2
8112ed48:	d0a08044 	addi	r2,gp,-32255
8112ed4c:	1885883a 	add	r2,r3,r2
8112ed50:	11000005 	stb	r4,0(r2)
8112ed54:	e0bff817 	ldw	r2,-32(fp)
8112ed58:	10800717 	ldw	r2,28(r2)
8112ed5c:	e0bff315 	stw	r2,-52(fp)
8112ed60:	e0bff317 	ldw	r2,-52(fp)
8112ed64:	10003326 	beq	r2,zero,8112ee34 <OSTaskChangePrio+0x36c>
8112ed68:	e0bffc03 	ldbu	r2,-16(fp)
8112ed6c:	e0fffc03 	ldbu	r3,-16(fp)
8112ed70:	e13ff317 	ldw	r4,-52(fp)
8112ed74:	20c7883a 	add	r3,r4,r3
8112ed78:	18c002c4 	addi	r3,r3,11
8112ed7c:	18c00003 	ldbu	r3,0(r3)
8112ed80:	1809883a 	mov	r4,r3
8112ed84:	e0fffc83 	ldbu	r3,-14(fp)
8112ed88:	00c6303a 	nor	r3,zero,r3
8112ed8c:	20c6703a 	and	r3,r4,r3
8112ed90:	1809883a 	mov	r4,r3
8112ed94:	e0fff317 	ldw	r3,-52(fp)
8112ed98:	1885883a 	add	r2,r3,r2
8112ed9c:	108002c4 	addi	r2,r2,11
8112eda0:	11000005 	stb	r4,0(r2)
8112eda4:	e0bffc03 	ldbu	r2,-16(fp)
8112eda8:	e0fff317 	ldw	r3,-52(fp)
8112edac:	1885883a 	add	r2,r3,r2
8112edb0:	108002c4 	addi	r2,r2,11
8112edb4:	10800003 	ldbu	r2,0(r2)
8112edb8:	10803fcc 	andi	r2,r2,255
8112edbc:	1000091e 	bne	r2,zero,8112ede4 <OSTaskChangePrio+0x31c>
8112edc0:	e0bff317 	ldw	r2,-52(fp)
8112edc4:	10800283 	ldbu	r2,10(r2)
8112edc8:	1007883a 	mov	r3,r2
8112edcc:	e0bffc43 	ldbu	r2,-15(fp)
8112edd0:	0084303a 	nor	r2,zero,r2
8112edd4:	1884703a 	and	r2,r3,r2
8112edd8:	1007883a 	mov	r3,r2
8112eddc:	e0bff317 	ldw	r2,-52(fp)
8112ede0:	10c00285 	stb	r3,10(r2)
8112ede4:	e0bff317 	ldw	r2,-52(fp)
8112ede8:	10c00283 	ldbu	r3,10(r2)
8112edec:	e0bffb83 	ldbu	r2,-18(fp)
8112edf0:	1884b03a 	or	r2,r3,r2
8112edf4:	1007883a 	mov	r3,r2
8112edf8:	e0bff317 	ldw	r2,-52(fp)
8112edfc:	10c00285 	stb	r3,10(r2)
8112ee00:	e0bffb03 	ldbu	r2,-20(fp)
8112ee04:	e0fffb03 	ldbu	r3,-20(fp)
8112ee08:	e13ff317 	ldw	r4,-52(fp)
8112ee0c:	20c7883a 	add	r3,r4,r3
8112ee10:	18c002c4 	addi	r3,r3,11
8112ee14:	19000003 	ldbu	r4,0(r3)
8112ee18:	e0fffbc3 	ldbu	r3,-17(fp)
8112ee1c:	20c6b03a 	or	r3,r4,r3
8112ee20:	1809883a 	mov	r4,r3
8112ee24:	e0fff317 	ldw	r3,-52(fp)
8112ee28:	1885883a 	add	r2,r3,r2
8112ee2c:	108002c4 	addi	r2,r2,11
8112ee30:	11000005 	stb	r4,0(r2)
8112ee34:	e0bff817 	ldw	r2,-32(fp)
8112ee38:	10800817 	ldw	r2,32(r2)
8112ee3c:	10004226 	beq	r2,zero,8112ef48 <OSTaskChangePrio+0x480>
8112ee40:	e0bff817 	ldw	r2,-32(fp)
8112ee44:	10800817 	ldw	r2,32(r2)
8112ee48:	e0bff415 	stw	r2,-48(fp)
8112ee4c:	e0bff417 	ldw	r2,-48(fp)
8112ee50:	10800017 	ldw	r2,0(r2)
8112ee54:	e0bff315 	stw	r2,-52(fp)
8112ee58:	00003906 	br	8112ef40 <OSTaskChangePrio+0x478>
8112ee5c:	e0bffc03 	ldbu	r2,-16(fp)
8112ee60:	e0fffc03 	ldbu	r3,-16(fp)
8112ee64:	e13ff317 	ldw	r4,-52(fp)
8112ee68:	20c7883a 	add	r3,r4,r3
8112ee6c:	18c002c4 	addi	r3,r3,11
8112ee70:	18c00003 	ldbu	r3,0(r3)
8112ee74:	1809883a 	mov	r4,r3
8112ee78:	e0fffc83 	ldbu	r3,-14(fp)
8112ee7c:	00c6303a 	nor	r3,zero,r3
8112ee80:	20c6703a 	and	r3,r4,r3
8112ee84:	1809883a 	mov	r4,r3
8112ee88:	e0fff317 	ldw	r3,-52(fp)
8112ee8c:	1885883a 	add	r2,r3,r2
8112ee90:	108002c4 	addi	r2,r2,11
8112ee94:	11000005 	stb	r4,0(r2)
8112ee98:	e0bffc03 	ldbu	r2,-16(fp)
8112ee9c:	e0fff317 	ldw	r3,-52(fp)
8112eea0:	1885883a 	add	r2,r3,r2
8112eea4:	108002c4 	addi	r2,r2,11
8112eea8:	10800003 	ldbu	r2,0(r2)
8112eeac:	10803fcc 	andi	r2,r2,255
8112eeb0:	1000091e 	bne	r2,zero,8112eed8 <OSTaskChangePrio+0x410>
8112eeb4:	e0bff317 	ldw	r2,-52(fp)
8112eeb8:	10800283 	ldbu	r2,10(r2)
8112eebc:	1007883a 	mov	r3,r2
8112eec0:	e0bffc43 	ldbu	r2,-15(fp)
8112eec4:	0084303a 	nor	r2,zero,r2
8112eec8:	1884703a 	and	r2,r3,r2
8112eecc:	1007883a 	mov	r3,r2
8112eed0:	e0bff317 	ldw	r2,-52(fp)
8112eed4:	10c00285 	stb	r3,10(r2)
8112eed8:	e0bff317 	ldw	r2,-52(fp)
8112eedc:	10c00283 	ldbu	r3,10(r2)
8112eee0:	e0bffb83 	ldbu	r2,-18(fp)
8112eee4:	1884b03a 	or	r2,r3,r2
8112eee8:	1007883a 	mov	r3,r2
8112eeec:	e0bff317 	ldw	r2,-52(fp)
8112eef0:	10c00285 	stb	r3,10(r2)
8112eef4:	e0bffb03 	ldbu	r2,-20(fp)
8112eef8:	e0fffb03 	ldbu	r3,-20(fp)
8112eefc:	e13ff317 	ldw	r4,-52(fp)
8112ef00:	20c7883a 	add	r3,r4,r3
8112ef04:	18c002c4 	addi	r3,r3,11
8112ef08:	19000003 	ldbu	r4,0(r3)
8112ef0c:	e0fffbc3 	ldbu	r3,-17(fp)
8112ef10:	20c6b03a 	or	r3,r4,r3
8112ef14:	1809883a 	mov	r4,r3
8112ef18:	e0fff317 	ldw	r3,-52(fp)
8112ef1c:	1885883a 	add	r2,r3,r2
8112ef20:	108002c4 	addi	r2,r2,11
8112ef24:	11000005 	stb	r4,0(r2)
8112ef28:	e0bff417 	ldw	r2,-48(fp)
8112ef2c:	10800104 	addi	r2,r2,4
8112ef30:	e0bff415 	stw	r2,-48(fp)
8112ef34:	e0bff417 	ldw	r2,-48(fp)
8112ef38:	10800017 	ldw	r2,0(r2)
8112ef3c:	e0bff315 	stw	r2,-52(fp)
8112ef40:	e0bff317 	ldw	r2,-52(fp)
8112ef44:	103fc51e 	bne	r2,zero,8112ee5c <__reset+0xfb10ee5c>
8112ef48:	e0bff817 	ldw	r2,-32(fp)
8112ef4c:	e0ffff03 	ldbu	r3,-4(fp)
8112ef50:	10c00c85 	stb	r3,50(r2)
8112ef54:	e0bff817 	ldw	r2,-32(fp)
8112ef58:	e0fffb03 	ldbu	r3,-20(fp)
8112ef5c:	10c00d05 	stb	r3,52(r2)
8112ef60:	e0bff817 	ldw	r2,-32(fp)
8112ef64:	e0fffb43 	ldbu	r3,-19(fp)
8112ef68:	10c00cc5 	stb	r3,51(r2)
8112ef6c:	e0bff817 	ldw	r2,-32(fp)
8112ef70:	e0fffb83 	ldbu	r3,-18(fp)
8112ef74:	10c00d85 	stb	r3,54(r2)
8112ef78:	e0bff817 	ldw	r2,-32(fp)
8112ef7c:	e0fffbc3 	ldbu	r3,-17(fp)
8112ef80:	10c00d45 	stb	r3,53(r2)
8112ef84:	e0bff517 	ldw	r2,-44(fp)
8112ef88:	e0bffa15 	stw	r2,-24(fp)
8112ef8c:	e0bffa17 	ldw	r2,-24(fp)
8112ef90:	1001703a 	wrctl	status,r2
8112ef94:	d0a07303 	ldbu	r2,-32308(gp)
8112ef98:	10803fcc 	andi	r2,r2,255
8112ef9c:	10800058 	cmpnei	r2,r2,1
8112efa0:	1000011e 	bne	r2,zero,8112efa8 <OSTaskChangePrio+0x4e0>
8112efa4:	11295580 	call	81129558 <OS_Sched>
8112efa8:	0005883a 	mov	r2,zero
8112efac:	e037883a 	mov	sp,fp
8112efb0:	dfc00117 	ldw	ra,4(sp)
8112efb4:	df000017 	ldw	fp,0(sp)
8112efb8:	dec00204 	addi	sp,sp,8
8112efbc:	f800283a 	ret

8112efc0 <OSTaskCreate>:
8112efc0:	deffee04 	addi	sp,sp,-72
8112efc4:	de00012e 	bgeu	sp,et,8112efcc <OSTaskCreate+0xc>
8112efc8:	003b68fa 	trap	3
8112efcc:	dfc01115 	stw	ra,68(sp)
8112efd0:	df001015 	stw	fp,64(sp)
8112efd4:	df001004 	addi	fp,sp,64
8112efd8:	e13ffc15 	stw	r4,-16(fp)
8112efdc:	e17ffd15 	stw	r5,-12(fp)
8112efe0:	e1bffe15 	stw	r6,-8(fp)
8112efe4:	3805883a 	mov	r2,r7
8112efe8:	e0bfff05 	stb	r2,-4(fp)
8112efec:	e03ff315 	stw	zero,-52(fp)
8112eff0:	e0bfff03 	ldbu	r2,-4(fp)
8112eff4:	10800a70 	cmpltui	r2,r2,41
8112eff8:	1000021e 	bne	r2,zero,8112f004 <OSTaskCreate+0x44>
8112effc:	00800a84 	movi	r2,42
8112f000:	00005706 	br	8112f160 <OSTaskCreate+0x1a0>
8112f004:	0005303a 	rdctl	r2,status
8112f008:	e0bffb15 	stw	r2,-20(fp)
8112f00c:	e0fffb17 	ldw	r3,-20(fp)
8112f010:	00bfff84 	movi	r2,-2
8112f014:	1884703a 	and	r2,r3,r2
8112f018:	1001703a 	wrctl	status,r2
8112f01c:	e0bffb17 	ldw	r2,-20(fp)
8112f020:	e0bff315 	stw	r2,-52(fp)
8112f024:	d0a08303 	ldbu	r2,-32244(gp)
8112f028:	10803fcc 	andi	r2,r2,255
8112f02c:	10000626 	beq	r2,zero,8112f048 <OSTaskCreate+0x88>
8112f030:	e0bff317 	ldw	r2,-52(fp)
8112f034:	e0bff415 	stw	r2,-48(fp)
8112f038:	e0bff417 	ldw	r2,-48(fp)
8112f03c:	1001703a 	wrctl	status,r2
8112f040:	00800f04 	movi	r2,60
8112f044:	00004606 	br	8112f160 <OSTaskCreate+0x1a0>
8112f048:	e0ffff03 	ldbu	r3,-4(fp)
8112f04c:	00a04574 	movhi	r2,33045
8112f050:	108d5704 	addi	r2,r2,13660
8112f054:	18c7883a 	add	r3,r3,r3
8112f058:	18c7883a 	add	r3,r3,r3
8112f05c:	10c5883a 	add	r2,r2,r3
8112f060:	10800017 	ldw	r2,0(r2)
8112f064:	1000391e 	bne	r2,zero,8112f14c <OSTaskCreate+0x18c>
8112f068:	e0ffff03 	ldbu	r3,-4(fp)
8112f06c:	00a04574 	movhi	r2,33045
8112f070:	108d5704 	addi	r2,r2,13660
8112f074:	18c7883a 	add	r3,r3,r3
8112f078:	18c7883a 	add	r3,r3,r3
8112f07c:	10c5883a 	add	r2,r2,r3
8112f080:	00c00044 	movi	r3,1
8112f084:	10c00015 	stw	r3,0(r2)
8112f088:	e0bff317 	ldw	r2,-52(fp)
8112f08c:	e0bff515 	stw	r2,-44(fp)
8112f090:	e0bff517 	ldw	r2,-44(fp)
8112f094:	1001703a 	wrctl	status,r2
8112f098:	000f883a 	mov	r7,zero
8112f09c:	e1bffe17 	ldw	r6,-8(fp)
8112f0a0:	e17ffd17 	ldw	r5,-12(fp)
8112f0a4:	e13ffc17 	ldw	r4,-16(fp)
8112f0a8:	113a6a40 	call	8113a6a4 <OSTaskStkInit>
8112f0ac:	e0bff715 	stw	r2,-36(fp)
8112f0b0:	e0bfff03 	ldbu	r2,-4(fp)
8112f0b4:	d8000215 	stw	zero,8(sp)
8112f0b8:	d8000115 	stw	zero,4(sp)
8112f0bc:	d8000015 	stw	zero,0(sp)
8112f0c0:	000f883a 	mov	r7,zero
8112f0c4:	000d883a 	mov	r6,zero
8112f0c8:	e17ff717 	ldw	r5,-36(fp)
8112f0cc:	1009883a 	mov	r4,r2
8112f0d0:	11299a00 	call	811299a0 <OS_TCBInit>
8112f0d4:	e0bff805 	stb	r2,-32(fp)
8112f0d8:	e0bff803 	ldbu	r2,-32(fp)
8112f0dc:	1000061e 	bne	r2,zero,8112f0f8 <OSTaskCreate+0x138>
8112f0e0:	d0a07303 	ldbu	r2,-32308(gp)
8112f0e4:	10803fcc 	andi	r2,r2,255
8112f0e8:	10800058 	cmpnei	r2,r2,1
8112f0ec:	1000151e 	bne	r2,zero,8112f144 <OSTaskCreate+0x184>
8112f0f0:	11295580 	call	81129558 <OS_Sched>
8112f0f4:	00001306 	br	8112f144 <OSTaskCreate+0x184>
8112f0f8:	0005303a 	rdctl	r2,status
8112f0fc:	e0bffa15 	stw	r2,-24(fp)
8112f100:	e0fffa17 	ldw	r3,-24(fp)
8112f104:	00bfff84 	movi	r2,-2
8112f108:	1884703a 	and	r2,r3,r2
8112f10c:	1001703a 	wrctl	status,r2
8112f110:	e0bffa17 	ldw	r2,-24(fp)
8112f114:	e0bff315 	stw	r2,-52(fp)
8112f118:	e0ffff03 	ldbu	r3,-4(fp)
8112f11c:	00a04574 	movhi	r2,33045
8112f120:	108d5704 	addi	r2,r2,13660
8112f124:	18c7883a 	add	r3,r3,r3
8112f128:	18c7883a 	add	r3,r3,r3
8112f12c:	10c5883a 	add	r2,r2,r3
8112f130:	10000015 	stw	zero,0(r2)
8112f134:	e0bff317 	ldw	r2,-52(fp)
8112f138:	e0bff615 	stw	r2,-40(fp)
8112f13c:	e0bff617 	ldw	r2,-40(fp)
8112f140:	1001703a 	wrctl	status,r2
8112f144:	e0bff803 	ldbu	r2,-32(fp)
8112f148:	00000506 	br	8112f160 <OSTaskCreate+0x1a0>
8112f14c:	e0bff317 	ldw	r2,-52(fp)
8112f150:	e0bff915 	stw	r2,-28(fp)
8112f154:	e0bff917 	ldw	r2,-28(fp)
8112f158:	1001703a 	wrctl	status,r2
8112f15c:	00800a04 	movi	r2,40
8112f160:	e037883a 	mov	sp,fp
8112f164:	dfc00117 	ldw	ra,4(sp)
8112f168:	df000017 	ldw	fp,0(sp)
8112f16c:	dec00204 	addi	sp,sp,8
8112f170:	f800283a 	ret

8112f174 <OSTaskCreateExt>:
8112f174:	deffec04 	addi	sp,sp,-80
8112f178:	de00012e 	bgeu	sp,et,8112f180 <OSTaskCreateExt+0xc>
8112f17c:	003b68fa 	trap	3
8112f180:	dfc01315 	stw	ra,76(sp)
8112f184:	df001215 	stw	fp,72(sp)
8112f188:	df001204 	addi	fp,sp,72
8112f18c:	e13ffa15 	stw	r4,-24(fp)
8112f190:	e17ffb15 	stw	r5,-20(fp)
8112f194:	e1bffc15 	stw	r6,-16(fp)
8112f198:	3809883a 	mov	r4,r7
8112f19c:	e0c00217 	ldw	r3,8(fp)
8112f1a0:	e0800617 	ldw	r2,24(fp)
8112f1a4:	e13ffd05 	stb	r4,-12(fp)
8112f1a8:	e0fffe0d 	sth	r3,-8(fp)
8112f1ac:	e0bfff0d 	sth	r2,-4(fp)
8112f1b0:	e03ff115 	stw	zero,-60(fp)
8112f1b4:	e0bffd03 	ldbu	r2,-12(fp)
8112f1b8:	10800a70 	cmpltui	r2,r2,41
8112f1bc:	1000021e 	bne	r2,zero,8112f1c8 <OSTaskCreateExt+0x54>
8112f1c0:	00800a84 	movi	r2,42
8112f1c4:	00006106 	br	8112f34c <OSTaskCreateExt+0x1d8>
8112f1c8:	0005303a 	rdctl	r2,status
8112f1cc:	e0bff915 	stw	r2,-28(fp)
8112f1d0:	e0fff917 	ldw	r3,-28(fp)
8112f1d4:	00bfff84 	movi	r2,-2
8112f1d8:	1884703a 	and	r2,r3,r2
8112f1dc:	1001703a 	wrctl	status,r2
8112f1e0:	e0bff917 	ldw	r2,-28(fp)
8112f1e4:	e0bff115 	stw	r2,-60(fp)
8112f1e8:	d0a08303 	ldbu	r2,-32244(gp)
8112f1ec:	10803fcc 	andi	r2,r2,255
8112f1f0:	10000626 	beq	r2,zero,8112f20c <OSTaskCreateExt+0x98>
8112f1f4:	e0bff117 	ldw	r2,-60(fp)
8112f1f8:	e0bff215 	stw	r2,-56(fp)
8112f1fc:	e0bff217 	ldw	r2,-56(fp)
8112f200:	1001703a 	wrctl	status,r2
8112f204:	00800f04 	movi	r2,60
8112f208:	00005006 	br	8112f34c <OSTaskCreateExt+0x1d8>
8112f20c:	e0fffd03 	ldbu	r3,-12(fp)
8112f210:	00a04574 	movhi	r2,33045
8112f214:	108d5704 	addi	r2,r2,13660
8112f218:	18c7883a 	add	r3,r3,r3
8112f21c:	18c7883a 	add	r3,r3,r3
8112f220:	10c5883a 	add	r2,r2,r3
8112f224:	10800017 	ldw	r2,0(r2)
8112f228:	1000431e 	bne	r2,zero,8112f338 <OSTaskCreateExt+0x1c4>
8112f22c:	e0fffd03 	ldbu	r3,-12(fp)
8112f230:	00a04574 	movhi	r2,33045
8112f234:	108d5704 	addi	r2,r2,13660
8112f238:	18c7883a 	add	r3,r3,r3
8112f23c:	18c7883a 	add	r3,r3,r3
8112f240:	10c5883a 	add	r2,r2,r3
8112f244:	00c00044 	movi	r3,1
8112f248:	10c00015 	stw	r3,0(r2)
8112f24c:	e0bff117 	ldw	r2,-60(fp)
8112f250:	e0bff315 	stw	r2,-52(fp)
8112f254:	e0bff317 	ldw	r2,-52(fp)
8112f258:	1001703a 	wrctl	status,r2
8112f25c:	e0bfff0b 	ldhu	r2,-4(fp)
8112f260:	100d883a 	mov	r6,r2
8112f264:	e1400417 	ldw	r5,16(fp)
8112f268:	e1000317 	ldw	r4,12(fp)
8112f26c:	113021c0 	call	8113021c <OS_TaskStkClr>
8112f270:	e0bfff0b 	ldhu	r2,-4(fp)
8112f274:	100f883a 	mov	r7,r2
8112f278:	e1bffc17 	ldw	r6,-16(fp)
8112f27c:	e17ffb17 	ldw	r5,-20(fp)
8112f280:	e13ffa17 	ldw	r4,-24(fp)
8112f284:	113a6a40 	call	8113a6a4 <OSTaskStkInit>
8112f288:	e0bff515 	stw	r2,-44(fp)
8112f28c:	e0fffd03 	ldbu	r3,-12(fp)
8112f290:	e13ffe0b 	ldhu	r4,-8(fp)
8112f294:	e0bfff0b 	ldhu	r2,-4(fp)
8112f298:	d8800215 	stw	r2,8(sp)
8112f29c:	e0800517 	ldw	r2,20(fp)
8112f2a0:	d8800115 	stw	r2,4(sp)
8112f2a4:	e0800417 	ldw	r2,16(fp)
8112f2a8:	d8800015 	stw	r2,0(sp)
8112f2ac:	200f883a 	mov	r7,r4
8112f2b0:	e1800317 	ldw	r6,12(fp)
8112f2b4:	e17ff517 	ldw	r5,-44(fp)
8112f2b8:	1809883a 	mov	r4,r3
8112f2bc:	11299a00 	call	811299a0 <OS_TCBInit>
8112f2c0:	e0bff605 	stb	r2,-40(fp)
8112f2c4:	e0bff603 	ldbu	r2,-40(fp)
8112f2c8:	1000061e 	bne	r2,zero,8112f2e4 <OSTaskCreateExt+0x170>
8112f2cc:	d0a07303 	ldbu	r2,-32308(gp)
8112f2d0:	10803fcc 	andi	r2,r2,255
8112f2d4:	10800058 	cmpnei	r2,r2,1
8112f2d8:	1000151e 	bne	r2,zero,8112f330 <OSTaskCreateExt+0x1bc>
8112f2dc:	11295580 	call	81129558 <OS_Sched>
8112f2e0:	00001306 	br	8112f330 <OSTaskCreateExt+0x1bc>
8112f2e4:	0005303a 	rdctl	r2,status
8112f2e8:	e0bff815 	stw	r2,-32(fp)
8112f2ec:	e0fff817 	ldw	r3,-32(fp)
8112f2f0:	00bfff84 	movi	r2,-2
8112f2f4:	1884703a 	and	r2,r3,r2
8112f2f8:	1001703a 	wrctl	status,r2
8112f2fc:	e0bff817 	ldw	r2,-32(fp)
8112f300:	e0bff115 	stw	r2,-60(fp)
8112f304:	e0fffd03 	ldbu	r3,-12(fp)
8112f308:	00a04574 	movhi	r2,33045
8112f30c:	108d5704 	addi	r2,r2,13660
8112f310:	18c7883a 	add	r3,r3,r3
8112f314:	18c7883a 	add	r3,r3,r3
8112f318:	10c5883a 	add	r2,r2,r3
8112f31c:	10000015 	stw	zero,0(r2)
8112f320:	e0bff117 	ldw	r2,-60(fp)
8112f324:	e0bff415 	stw	r2,-48(fp)
8112f328:	e0bff417 	ldw	r2,-48(fp)
8112f32c:	1001703a 	wrctl	status,r2
8112f330:	e0bff603 	ldbu	r2,-40(fp)
8112f334:	00000506 	br	8112f34c <OSTaskCreateExt+0x1d8>
8112f338:	e0bff117 	ldw	r2,-60(fp)
8112f33c:	e0bff715 	stw	r2,-36(fp)
8112f340:	e0bff717 	ldw	r2,-36(fp)
8112f344:	1001703a 	wrctl	status,r2
8112f348:	00800a04 	movi	r2,40
8112f34c:	e037883a 	mov	sp,fp
8112f350:	dfc00117 	ldw	ra,4(sp)
8112f354:	df000017 	ldw	fp,0(sp)
8112f358:	dec00204 	addi	sp,sp,8
8112f35c:	f800283a 	ret

8112f360 <OSTaskDel>:
8112f360:	defff404 	addi	sp,sp,-48
8112f364:	de00012e 	bgeu	sp,et,8112f36c <OSTaskDel+0xc>
8112f368:	003b68fa 	trap	3
8112f36c:	dfc00b15 	stw	ra,44(sp)
8112f370:	df000a15 	stw	fp,40(sp)
8112f374:	df000a04 	addi	fp,sp,40
8112f378:	2005883a 	mov	r2,r4
8112f37c:	e0bfff05 	stb	r2,-4(fp)
8112f380:	e03ff615 	stw	zero,-40(fp)
8112f384:	d0a08303 	ldbu	r2,-32244(gp)
8112f388:	10803fcc 	andi	r2,r2,255
8112f38c:	10000226 	beq	r2,zero,8112f398 <OSTaskDel+0x38>
8112f390:	00801004 	movi	r2,64
8112f394:	0000c006 	br	8112f698 <OSTaskDel+0x338>
8112f398:	e0bfff03 	ldbu	r2,-4(fp)
8112f39c:	10800a18 	cmpnei	r2,r2,40
8112f3a0:	1000021e 	bne	r2,zero,8112f3ac <OSTaskDel+0x4c>
8112f3a4:	00800f84 	movi	r2,62
8112f3a8:	0000bb06 	br	8112f698 <OSTaskDel+0x338>
8112f3ac:	e0bfff03 	ldbu	r2,-4(fp)
8112f3b0:	10800a30 	cmpltui	r2,r2,40
8112f3b4:	1000051e 	bne	r2,zero,8112f3cc <OSTaskDel+0x6c>
8112f3b8:	e0bfff03 	ldbu	r2,-4(fp)
8112f3bc:	10803fe0 	cmpeqi	r2,r2,255
8112f3c0:	1000021e 	bne	r2,zero,8112f3cc <OSTaskDel+0x6c>
8112f3c4:	00800a84 	movi	r2,42
8112f3c8:	0000b306 	br	8112f698 <OSTaskDel+0x338>
8112f3cc:	0005303a 	rdctl	r2,status
8112f3d0:	e0bffe15 	stw	r2,-8(fp)
8112f3d4:	e0fffe17 	ldw	r3,-8(fp)
8112f3d8:	00bfff84 	movi	r2,-2
8112f3dc:	1884703a 	and	r2,r3,r2
8112f3e0:	1001703a 	wrctl	status,r2
8112f3e4:	e0bffe17 	ldw	r2,-8(fp)
8112f3e8:	e0bff615 	stw	r2,-40(fp)
8112f3ec:	e0bfff03 	ldbu	r2,-4(fp)
8112f3f0:	10803fd8 	cmpnei	r2,r2,255
8112f3f4:	1000031e 	bne	r2,zero,8112f404 <OSTaskDel+0xa4>
8112f3f8:	d0a08417 	ldw	r2,-32240(gp)
8112f3fc:	10800c83 	ldbu	r2,50(r2)
8112f400:	e0bfff05 	stb	r2,-4(fp)
8112f404:	e0ffff03 	ldbu	r3,-4(fp)
8112f408:	00a04574 	movhi	r2,33045
8112f40c:	108d5704 	addi	r2,r2,13660
8112f410:	18c7883a 	add	r3,r3,r3
8112f414:	18c7883a 	add	r3,r3,r3
8112f418:	10c5883a 	add	r2,r2,r3
8112f41c:	10800017 	ldw	r2,0(r2)
8112f420:	e0bff815 	stw	r2,-32(fp)
8112f424:	e0bff817 	ldw	r2,-32(fp)
8112f428:	1000061e 	bne	r2,zero,8112f444 <OSTaskDel+0xe4>
8112f42c:	e0bff617 	ldw	r2,-40(fp)
8112f430:	e0bff715 	stw	r2,-36(fp)
8112f434:	e0bff717 	ldw	r2,-36(fp)
8112f438:	1001703a 	wrctl	status,r2
8112f43c:	008010c4 	movi	r2,67
8112f440:	00009506 	br	8112f698 <OSTaskDel+0x338>
8112f444:	e0bff817 	ldw	r2,-32(fp)
8112f448:	10800058 	cmpnei	r2,r2,1
8112f44c:	1000061e 	bne	r2,zero,8112f468 <OSTaskDel+0x108>
8112f450:	e0bff617 	ldw	r2,-40(fp)
8112f454:	e0bff915 	stw	r2,-28(fp)
8112f458:	e0bff917 	ldw	r2,-28(fp)
8112f45c:	1001703a 	wrctl	status,r2
8112f460:	00800f44 	movi	r2,61
8112f464:	00008c06 	br	8112f698 <OSTaskDel+0x338>
8112f468:	e0bff817 	ldw	r2,-32(fp)
8112f46c:	10800d03 	ldbu	r2,52(r2)
8112f470:	10c03fcc 	andi	r3,r2,255
8112f474:	e0bff817 	ldw	r2,-32(fp)
8112f478:	10800d03 	ldbu	r2,52(r2)
8112f47c:	11003fcc 	andi	r4,r2,255
8112f480:	d0a08044 	addi	r2,gp,-32255
8112f484:	2085883a 	add	r2,r4,r2
8112f488:	10800003 	ldbu	r2,0(r2)
8112f48c:	1009883a 	mov	r4,r2
8112f490:	e0bff817 	ldw	r2,-32(fp)
8112f494:	10800d43 	ldbu	r2,53(r2)
8112f498:	0084303a 	nor	r2,zero,r2
8112f49c:	2084703a 	and	r2,r4,r2
8112f4a0:	1009883a 	mov	r4,r2
8112f4a4:	d0a08044 	addi	r2,gp,-32255
8112f4a8:	1885883a 	add	r2,r3,r2
8112f4ac:	11000005 	stb	r4,0(r2)
8112f4b0:	e0bff817 	ldw	r2,-32(fp)
8112f4b4:	10800d03 	ldbu	r2,52(r2)
8112f4b8:	10c03fcc 	andi	r3,r2,255
8112f4bc:	d0a08044 	addi	r2,gp,-32255
8112f4c0:	1885883a 	add	r2,r3,r2
8112f4c4:	10800003 	ldbu	r2,0(r2)
8112f4c8:	10803fcc 	andi	r2,r2,255
8112f4cc:	1000071e 	bne	r2,zero,8112f4ec <OSTaskDel+0x18c>
8112f4d0:	e0bff817 	ldw	r2,-32(fp)
8112f4d4:	10800d83 	ldbu	r2,54(r2)
8112f4d8:	0084303a 	nor	r2,zero,r2
8112f4dc:	1007883a 	mov	r3,r2
8112f4e0:	d0a08003 	ldbu	r2,-32256(gp)
8112f4e4:	1884703a 	and	r2,r3,r2
8112f4e8:	d0a08005 	stb	r2,-32256(gp)
8112f4ec:	e0bff817 	ldw	r2,-32(fp)
8112f4f0:	10800717 	ldw	r2,28(r2)
8112f4f4:	10000526 	beq	r2,zero,8112f50c <OSTaskDel+0x1ac>
8112f4f8:	e0bff817 	ldw	r2,-32(fp)
8112f4fc:	10800717 	ldw	r2,28(r2)
8112f500:	100b883a 	mov	r5,r2
8112f504:	e13ff817 	ldw	r4,-32(fp)
8112f508:	1128eac0 	call	81128eac <OS_EventTaskRemove>
8112f50c:	e0bff817 	ldw	r2,-32(fp)
8112f510:	10800817 	ldw	r2,32(r2)
8112f514:	10000526 	beq	r2,zero,8112f52c <OSTaskDel+0x1cc>
8112f518:	e0bff817 	ldw	r2,-32(fp)
8112f51c:	10800817 	ldw	r2,32(r2)
8112f520:	100b883a 	mov	r5,r2
8112f524:	e13ff817 	ldw	r4,-32(fp)
8112f528:	1128f6c0 	call	81128f6c <OS_EventTaskRemoveMulti>
8112f52c:	e0bff817 	ldw	r2,-32(fp)
8112f530:	10800a17 	ldw	r2,40(r2)
8112f534:	e0bffb15 	stw	r2,-20(fp)
8112f538:	e0bffb17 	ldw	r2,-20(fp)
8112f53c:	10000226 	beq	r2,zero,8112f548 <OSTaskDel+0x1e8>
8112f540:	e13ffb17 	ldw	r4,-20(fp)
8112f544:	112b5440 	call	8112b544 <OS_FlagUnlink>
8112f548:	e0bff817 	ldw	r2,-32(fp)
8112f54c:	10000b8d 	sth	zero,46(r2)
8112f550:	e0bff817 	ldw	r2,-32(fp)
8112f554:	10000c05 	stb	zero,48(r2)
8112f558:	e0bff817 	ldw	r2,-32(fp)
8112f55c:	10000c45 	stb	zero,49(r2)
8112f560:	d0a07103 	ldbu	r2,-32316(gp)
8112f564:	10803fcc 	andi	r2,r2,255
8112f568:	10803fe0 	cmpeqi	r2,r2,255
8112f56c:	1000031e 	bne	r2,zero,8112f57c <OSTaskDel+0x21c>
8112f570:	d0a07103 	ldbu	r2,-32316(gp)
8112f574:	10800044 	addi	r2,r2,1
8112f578:	d0a07105 	stb	r2,-32316(gp)
8112f57c:	e0bff617 	ldw	r2,-40(fp)
8112f580:	e0bffd15 	stw	r2,-12(fp)
8112f584:	e0bffd17 	ldw	r2,-12(fp)
8112f588:	1001703a 	wrctl	status,r2
8112f58c:	1128a740 	call	81128a74 <OS_Dummy>
8112f590:	0005303a 	rdctl	r2,status
8112f594:	e0bffa15 	stw	r2,-24(fp)
8112f598:	e0fffa17 	ldw	r3,-24(fp)
8112f59c:	00bfff84 	movi	r2,-2
8112f5a0:	1884703a 	and	r2,r3,r2
8112f5a4:	1001703a 	wrctl	status,r2
8112f5a8:	e0bffa17 	ldw	r2,-24(fp)
8112f5ac:	e0bff615 	stw	r2,-40(fp)
8112f5b0:	d0a07103 	ldbu	r2,-32316(gp)
8112f5b4:	10803fcc 	andi	r2,r2,255
8112f5b8:	10000326 	beq	r2,zero,8112f5c8 <OSTaskDel+0x268>
8112f5bc:	d0a07103 	ldbu	r2,-32316(gp)
8112f5c0:	10bfffc4 	addi	r2,r2,-1
8112f5c4:	d0a07105 	stb	r2,-32316(gp)
8112f5c8:	e13ff817 	ldw	r4,-32(fp)
8112f5cc:	113a8340 	call	8113a834 <OSTaskDelHook>
8112f5d0:	d0a07c43 	ldbu	r2,-32271(gp)
8112f5d4:	10bfffc4 	addi	r2,r2,-1
8112f5d8:	d0a07c45 	stb	r2,-32271(gp)
8112f5dc:	e0ffff03 	ldbu	r3,-4(fp)
8112f5e0:	00a04574 	movhi	r2,33045
8112f5e4:	108d5704 	addi	r2,r2,13660
8112f5e8:	18c7883a 	add	r3,r3,r3
8112f5ec:	18c7883a 	add	r3,r3,r3
8112f5f0:	10c5883a 	add	r2,r2,r3
8112f5f4:	10000015 	stw	zero,0(r2)
8112f5f8:	e0bff817 	ldw	r2,-32(fp)
8112f5fc:	10800617 	ldw	r2,24(r2)
8112f600:	1000071e 	bne	r2,zero,8112f620 <OSTaskDel+0x2c0>
8112f604:	e0bff817 	ldw	r2,-32(fp)
8112f608:	10800517 	ldw	r2,20(r2)
8112f60c:	10000615 	stw	zero,24(r2)
8112f610:	e0bff817 	ldw	r2,-32(fp)
8112f614:	10800517 	ldw	r2,20(r2)
8112f618:	d0a07615 	stw	r2,-32296(gp)
8112f61c:	00000a06 	br	8112f648 <OSTaskDel+0x2e8>
8112f620:	e0bff817 	ldw	r2,-32(fp)
8112f624:	10800617 	ldw	r2,24(r2)
8112f628:	e0fff817 	ldw	r3,-32(fp)
8112f62c:	18c00517 	ldw	r3,20(r3)
8112f630:	10c00515 	stw	r3,20(r2)
8112f634:	e0bff817 	ldw	r2,-32(fp)
8112f638:	10800517 	ldw	r2,20(r2)
8112f63c:	e0fff817 	ldw	r3,-32(fp)
8112f640:	18c00617 	ldw	r3,24(r3)
8112f644:	10c00615 	stw	r3,24(r2)
8112f648:	d0e07b17 	ldw	r3,-32276(gp)
8112f64c:	e0bff817 	ldw	r2,-32(fp)
8112f650:	10c00515 	stw	r3,20(r2)
8112f654:	e0bff817 	ldw	r2,-32(fp)
8112f658:	d0a07b15 	stw	r2,-32276(gp)
8112f65c:	e0bff817 	ldw	r2,-32(fp)
8112f660:	00c00fc4 	movi	r3,63
8112f664:	10c01305 	stb	r3,76(r2)
8112f668:	e0bff817 	ldw	r2,-32(fp)
8112f66c:	10001345 	stb	zero,77(r2)
8112f670:	e0bff617 	ldw	r2,-40(fp)
8112f674:	e0bffc15 	stw	r2,-16(fp)
8112f678:	e0bffc17 	ldw	r2,-16(fp)
8112f67c:	1001703a 	wrctl	status,r2
8112f680:	d0a07303 	ldbu	r2,-32308(gp)
8112f684:	10803fcc 	andi	r2,r2,255
8112f688:	10800058 	cmpnei	r2,r2,1
8112f68c:	1000011e 	bne	r2,zero,8112f694 <OSTaskDel+0x334>
8112f690:	11295580 	call	81129558 <OS_Sched>
8112f694:	0005883a 	mov	r2,zero
8112f698:	e037883a 	mov	sp,fp
8112f69c:	dfc00117 	ldw	ra,4(sp)
8112f6a0:	df000017 	ldw	fp,0(sp)
8112f6a4:	dec00204 	addi	sp,sp,8
8112f6a8:	f800283a 	ret

8112f6ac <OSTaskDelReq>:
8112f6ac:	defff504 	addi	sp,sp,-44
8112f6b0:	de00012e 	bgeu	sp,et,8112f6b8 <OSTaskDelReq+0xc>
8112f6b4:	003b68fa 	trap	3
8112f6b8:	df000a15 	stw	fp,40(sp)
8112f6bc:	df000a04 	addi	fp,sp,40
8112f6c0:	2005883a 	mov	r2,r4
8112f6c4:	e0bfff05 	stb	r2,-4(fp)
8112f6c8:	e03ff615 	stw	zero,-40(fp)
8112f6cc:	e0bfff03 	ldbu	r2,-4(fp)
8112f6d0:	10800a18 	cmpnei	r2,r2,40
8112f6d4:	1000021e 	bne	r2,zero,8112f6e0 <OSTaskDelReq+0x34>
8112f6d8:	00800f84 	movi	r2,62
8112f6dc:	00004506 	br	8112f7f4 <OSTaskDelReq+0x148>
8112f6e0:	e0bfff03 	ldbu	r2,-4(fp)
8112f6e4:	10800a30 	cmpltui	r2,r2,40
8112f6e8:	1000051e 	bne	r2,zero,8112f700 <OSTaskDelReq+0x54>
8112f6ec:	e0bfff03 	ldbu	r2,-4(fp)
8112f6f0:	10803fe0 	cmpeqi	r2,r2,255
8112f6f4:	1000021e 	bne	r2,zero,8112f700 <OSTaskDelReq+0x54>
8112f6f8:	00800a84 	movi	r2,42
8112f6fc:	00003d06 	br	8112f7f4 <OSTaskDelReq+0x148>
8112f700:	e0bfff03 	ldbu	r2,-4(fp)
8112f704:	10803fd8 	cmpnei	r2,r2,255
8112f708:	1000111e 	bne	r2,zero,8112f750 <OSTaskDelReq+0xa4>
8112f70c:	0005303a 	rdctl	r2,status
8112f710:	e0bff915 	stw	r2,-28(fp)
8112f714:	e0fff917 	ldw	r3,-28(fp)
8112f718:	00bfff84 	movi	r2,-2
8112f71c:	1884703a 	and	r2,r3,r2
8112f720:	1001703a 	wrctl	status,r2
8112f724:	e0bff917 	ldw	r2,-28(fp)
8112f728:	e0bff615 	stw	r2,-40(fp)
8112f72c:	d0a08417 	ldw	r2,-32240(gp)
8112f730:	10800dc3 	ldbu	r2,55(r2)
8112f734:	e0bff805 	stb	r2,-32(fp)
8112f738:	e0bff617 	ldw	r2,-40(fp)
8112f73c:	e0bffe15 	stw	r2,-8(fp)
8112f740:	e0bffe17 	ldw	r2,-8(fp)
8112f744:	1001703a 	wrctl	status,r2
8112f748:	e0bff803 	ldbu	r2,-32(fp)
8112f74c:	00002906 	br	8112f7f4 <OSTaskDelReq+0x148>
8112f750:	0005303a 	rdctl	r2,status
8112f754:	e0bff715 	stw	r2,-36(fp)
8112f758:	e0fff717 	ldw	r3,-36(fp)
8112f75c:	00bfff84 	movi	r2,-2
8112f760:	1884703a 	and	r2,r3,r2
8112f764:	1001703a 	wrctl	status,r2
8112f768:	e0bff717 	ldw	r2,-36(fp)
8112f76c:	e0bff615 	stw	r2,-40(fp)
8112f770:	e0ffff03 	ldbu	r3,-4(fp)
8112f774:	00a04574 	movhi	r2,33045
8112f778:	108d5704 	addi	r2,r2,13660
8112f77c:	18c7883a 	add	r3,r3,r3
8112f780:	18c7883a 	add	r3,r3,r3
8112f784:	10c5883a 	add	r2,r2,r3
8112f788:	10800017 	ldw	r2,0(r2)
8112f78c:	e0bffb15 	stw	r2,-20(fp)
8112f790:	e0bffb17 	ldw	r2,-20(fp)
8112f794:	1000061e 	bne	r2,zero,8112f7b0 <OSTaskDelReq+0x104>
8112f798:	e0bff617 	ldw	r2,-40(fp)
8112f79c:	e0bffa15 	stw	r2,-24(fp)
8112f7a0:	e0bffa17 	ldw	r2,-24(fp)
8112f7a4:	1001703a 	wrctl	status,r2
8112f7a8:	008010c4 	movi	r2,67
8112f7ac:	00001106 	br	8112f7f4 <OSTaskDelReq+0x148>
8112f7b0:	e0bffb17 	ldw	r2,-20(fp)
8112f7b4:	10800058 	cmpnei	r2,r2,1
8112f7b8:	1000061e 	bne	r2,zero,8112f7d4 <OSTaskDelReq+0x128>
8112f7bc:	e0bff617 	ldw	r2,-40(fp)
8112f7c0:	e0bffc15 	stw	r2,-16(fp)
8112f7c4:	e0bffc17 	ldw	r2,-16(fp)
8112f7c8:	1001703a 	wrctl	status,r2
8112f7cc:	00800f44 	movi	r2,61
8112f7d0:	00000806 	br	8112f7f4 <OSTaskDelReq+0x148>
8112f7d4:	e0bffb17 	ldw	r2,-20(fp)
8112f7d8:	00c00fc4 	movi	r3,63
8112f7dc:	10c00dc5 	stb	r3,55(r2)
8112f7e0:	e0bff617 	ldw	r2,-40(fp)
8112f7e4:	e0bffd15 	stw	r2,-12(fp)
8112f7e8:	e0bffd17 	ldw	r2,-12(fp)
8112f7ec:	1001703a 	wrctl	status,r2
8112f7f0:	0005883a 	mov	r2,zero
8112f7f4:	e037883a 	mov	sp,fp
8112f7f8:	df000017 	ldw	fp,0(sp)
8112f7fc:	dec00104 	addi	sp,sp,4
8112f800:	f800283a 	ret

8112f804 <OSTaskNameGet>:
8112f804:	defff404 	addi	sp,sp,-48
8112f808:	de00012e 	bgeu	sp,et,8112f810 <OSTaskNameGet+0xc>
8112f80c:	003b68fa 	trap	3
8112f810:	dfc00b15 	stw	ra,44(sp)
8112f814:	df000a15 	stw	fp,40(sp)
8112f818:	df000a04 	addi	fp,sp,40
8112f81c:	2005883a 	mov	r2,r4
8112f820:	e17ffe15 	stw	r5,-8(fp)
8112f824:	e1bfff15 	stw	r6,-4(fp)
8112f828:	e0bffd05 	stb	r2,-12(fp)
8112f82c:	e03ff615 	stw	zero,-40(fp)
8112f830:	e0bfff17 	ldw	r2,-4(fp)
8112f834:	1000021e 	bne	r2,zero,8112f840 <OSTaskNameGet+0x3c>
8112f838:	0005883a 	mov	r2,zero
8112f83c:	00005406 	br	8112f990 <OSTaskNameGet+0x18c>
8112f840:	e0bffd03 	ldbu	r2,-12(fp)
8112f844:	10800a70 	cmpltui	r2,r2,41
8112f848:	1000081e 	bne	r2,zero,8112f86c <OSTaskNameGet+0x68>
8112f84c:	e0bffd03 	ldbu	r2,-12(fp)
8112f850:	10803fe0 	cmpeqi	r2,r2,255
8112f854:	1000051e 	bne	r2,zero,8112f86c <OSTaskNameGet+0x68>
8112f858:	e0bfff17 	ldw	r2,-4(fp)
8112f85c:	00c00a84 	movi	r3,42
8112f860:	10c00005 	stb	r3,0(r2)
8112f864:	0005883a 	mov	r2,zero
8112f868:	00004906 	br	8112f990 <OSTaskNameGet+0x18c>
8112f86c:	e0bffe17 	ldw	r2,-8(fp)
8112f870:	1000051e 	bne	r2,zero,8112f888 <OSTaskNameGet+0x84>
8112f874:	e0bfff17 	ldw	r2,-4(fp)
8112f878:	00c00304 	movi	r3,12
8112f87c:	10c00005 	stb	r3,0(r2)
8112f880:	0005883a 	mov	r2,zero
8112f884:	00004206 	br	8112f990 <OSTaskNameGet+0x18c>
8112f888:	d0a08303 	ldbu	r2,-32244(gp)
8112f88c:	10803fcc 	andi	r2,r2,255
8112f890:	10000526 	beq	r2,zero,8112f8a8 <OSTaskNameGet+0xa4>
8112f894:	e0bfff17 	ldw	r2,-4(fp)
8112f898:	00c00444 	movi	r3,17
8112f89c:	10c00005 	stb	r3,0(r2)
8112f8a0:	0005883a 	mov	r2,zero
8112f8a4:	00003a06 	br	8112f990 <OSTaskNameGet+0x18c>
8112f8a8:	0005303a 	rdctl	r2,status
8112f8ac:	e0bffc15 	stw	r2,-16(fp)
8112f8b0:	e0fffc17 	ldw	r3,-16(fp)
8112f8b4:	00bfff84 	movi	r2,-2
8112f8b8:	1884703a 	and	r2,r3,r2
8112f8bc:	1001703a 	wrctl	status,r2
8112f8c0:	e0bffc17 	ldw	r2,-16(fp)
8112f8c4:	e0bff615 	stw	r2,-40(fp)
8112f8c8:	e0bffd03 	ldbu	r2,-12(fp)
8112f8cc:	10803fd8 	cmpnei	r2,r2,255
8112f8d0:	1000031e 	bne	r2,zero,8112f8e0 <OSTaskNameGet+0xdc>
8112f8d4:	d0a08417 	ldw	r2,-32240(gp)
8112f8d8:	10800c83 	ldbu	r2,50(r2)
8112f8dc:	e0bffd05 	stb	r2,-12(fp)
8112f8e0:	e0fffd03 	ldbu	r3,-12(fp)
8112f8e4:	00a04574 	movhi	r2,33045
8112f8e8:	108d5704 	addi	r2,r2,13660
8112f8ec:	18c7883a 	add	r3,r3,r3
8112f8f0:	18c7883a 	add	r3,r3,r3
8112f8f4:	10c5883a 	add	r2,r2,r3
8112f8f8:	10800017 	ldw	r2,0(r2)
8112f8fc:	e0bff815 	stw	r2,-32(fp)
8112f900:	e0bff817 	ldw	r2,-32(fp)
8112f904:	1000091e 	bne	r2,zero,8112f92c <OSTaskNameGet+0x128>
8112f908:	e0bff617 	ldw	r2,-40(fp)
8112f90c:	e0bff715 	stw	r2,-36(fp)
8112f910:	e0bff717 	ldw	r2,-36(fp)
8112f914:	1001703a 	wrctl	status,r2
8112f918:	e0bfff17 	ldw	r2,-4(fp)
8112f91c:	00c010c4 	movi	r3,67
8112f920:	10c00005 	stb	r3,0(r2)
8112f924:	0005883a 	mov	r2,zero
8112f928:	00001906 	br	8112f990 <OSTaskNameGet+0x18c>
8112f92c:	e0bff817 	ldw	r2,-32(fp)
8112f930:	10800058 	cmpnei	r2,r2,1
8112f934:	1000091e 	bne	r2,zero,8112f95c <OSTaskNameGet+0x158>
8112f938:	e0bff617 	ldw	r2,-40(fp)
8112f93c:	e0bff915 	stw	r2,-28(fp)
8112f940:	e0bff917 	ldw	r2,-28(fp)
8112f944:	1001703a 	wrctl	status,r2
8112f948:	e0bfff17 	ldw	r2,-4(fp)
8112f94c:	00c010c4 	movi	r3,67
8112f950:	10c00005 	stb	r3,0(r2)
8112f954:	0005883a 	mov	r2,zero
8112f958:	00000d06 	br	8112f990 <OSTaskNameGet+0x18c>
8112f95c:	e0bff817 	ldw	r2,-32(fp)
8112f960:	10801304 	addi	r2,r2,76
8112f964:	100b883a 	mov	r5,r2
8112f968:	e13ffe17 	ldw	r4,-8(fp)
8112f96c:	11296ac0 	call	811296ac <OS_StrCopy>
8112f970:	e0bffb05 	stb	r2,-20(fp)
8112f974:	e0bff617 	ldw	r2,-40(fp)
8112f978:	e0bffa15 	stw	r2,-24(fp)
8112f97c:	e0bffa17 	ldw	r2,-24(fp)
8112f980:	1001703a 	wrctl	status,r2
8112f984:	e0bfff17 	ldw	r2,-4(fp)
8112f988:	10000005 	stb	zero,0(r2)
8112f98c:	e0bffb03 	ldbu	r2,-20(fp)
8112f990:	e037883a 	mov	sp,fp
8112f994:	dfc00117 	ldw	ra,4(sp)
8112f998:	df000017 	ldw	fp,0(sp)
8112f99c:	dec00204 	addi	sp,sp,8
8112f9a0:	f800283a 	ret

8112f9a4 <OSTaskNameSet>:
8112f9a4:	defff304 	addi	sp,sp,-52
8112f9a8:	de00012e 	bgeu	sp,et,8112f9b0 <OSTaskNameSet+0xc>
8112f9ac:	003b68fa 	trap	3
8112f9b0:	dfc00c15 	stw	ra,48(sp)
8112f9b4:	df000b15 	stw	fp,44(sp)
8112f9b8:	df000b04 	addi	fp,sp,44
8112f9bc:	2005883a 	mov	r2,r4
8112f9c0:	e17ffe15 	stw	r5,-8(fp)
8112f9c4:	e1bfff15 	stw	r6,-4(fp)
8112f9c8:	e0bffd05 	stb	r2,-12(fp)
8112f9cc:	e03ff515 	stw	zero,-44(fp)
8112f9d0:	e0bfff17 	ldw	r2,-4(fp)
8112f9d4:	10005c26 	beq	r2,zero,8112fb48 <OSTaskNameSet+0x1a4>
8112f9d8:	e0bffd03 	ldbu	r2,-12(fp)
8112f9dc:	10800a70 	cmpltui	r2,r2,41
8112f9e0:	1000071e 	bne	r2,zero,8112fa00 <OSTaskNameSet+0x5c>
8112f9e4:	e0bffd03 	ldbu	r2,-12(fp)
8112f9e8:	10803fe0 	cmpeqi	r2,r2,255
8112f9ec:	1000041e 	bne	r2,zero,8112fa00 <OSTaskNameSet+0x5c>
8112f9f0:	e0bfff17 	ldw	r2,-4(fp)
8112f9f4:	00c00a84 	movi	r3,42
8112f9f8:	10c00005 	stb	r3,0(r2)
8112f9fc:	00005306 	br	8112fb4c <OSTaskNameSet+0x1a8>
8112fa00:	e0bffe17 	ldw	r2,-8(fp)
8112fa04:	1000041e 	bne	r2,zero,8112fa18 <OSTaskNameSet+0x74>
8112fa08:	e0bfff17 	ldw	r2,-4(fp)
8112fa0c:	00c00304 	movi	r3,12
8112fa10:	10c00005 	stb	r3,0(r2)
8112fa14:	00004d06 	br	8112fb4c <OSTaskNameSet+0x1a8>
8112fa18:	d0a08303 	ldbu	r2,-32244(gp)
8112fa1c:	10803fcc 	andi	r2,r2,255
8112fa20:	10000426 	beq	r2,zero,8112fa34 <OSTaskNameSet+0x90>
8112fa24:	e0bfff17 	ldw	r2,-4(fp)
8112fa28:	00c00484 	movi	r3,18
8112fa2c:	10c00005 	stb	r3,0(r2)
8112fa30:	00004606 	br	8112fb4c <OSTaskNameSet+0x1a8>
8112fa34:	0005303a 	rdctl	r2,status
8112fa38:	e0bffc15 	stw	r2,-16(fp)
8112fa3c:	e0fffc17 	ldw	r3,-16(fp)
8112fa40:	00bfff84 	movi	r2,-2
8112fa44:	1884703a 	and	r2,r3,r2
8112fa48:	1001703a 	wrctl	status,r2
8112fa4c:	e0bffc17 	ldw	r2,-16(fp)
8112fa50:	e0bff515 	stw	r2,-44(fp)
8112fa54:	e0bffd03 	ldbu	r2,-12(fp)
8112fa58:	10803fd8 	cmpnei	r2,r2,255
8112fa5c:	1000031e 	bne	r2,zero,8112fa6c <OSTaskNameSet+0xc8>
8112fa60:	d0a08417 	ldw	r2,-32240(gp)
8112fa64:	10800c83 	ldbu	r2,50(r2)
8112fa68:	e0bffd05 	stb	r2,-12(fp)
8112fa6c:	e0fffd03 	ldbu	r3,-12(fp)
8112fa70:	00a04574 	movhi	r2,33045
8112fa74:	108d5704 	addi	r2,r2,13660
8112fa78:	18c7883a 	add	r3,r3,r3
8112fa7c:	18c7883a 	add	r3,r3,r3
8112fa80:	10c5883a 	add	r2,r2,r3
8112fa84:	10800017 	ldw	r2,0(r2)
8112fa88:	e0bff715 	stw	r2,-36(fp)
8112fa8c:	e0bff717 	ldw	r2,-36(fp)
8112fa90:	1000081e 	bne	r2,zero,8112fab4 <OSTaskNameSet+0x110>
8112fa94:	e0bff517 	ldw	r2,-44(fp)
8112fa98:	e0bff615 	stw	r2,-40(fp)
8112fa9c:	e0bff617 	ldw	r2,-40(fp)
8112faa0:	1001703a 	wrctl	status,r2
8112faa4:	e0bfff17 	ldw	r2,-4(fp)
8112faa8:	00c010c4 	movi	r3,67
8112faac:	10c00005 	stb	r3,0(r2)
8112fab0:	00002606 	br	8112fb4c <OSTaskNameSet+0x1a8>
8112fab4:	e0bff717 	ldw	r2,-36(fp)
8112fab8:	10800058 	cmpnei	r2,r2,1
8112fabc:	1000081e 	bne	r2,zero,8112fae0 <OSTaskNameSet+0x13c>
8112fac0:	e0bff517 	ldw	r2,-44(fp)
8112fac4:	e0bff815 	stw	r2,-32(fp)
8112fac8:	e0bff817 	ldw	r2,-32(fp)
8112facc:	1001703a 	wrctl	status,r2
8112fad0:	e0bfff17 	ldw	r2,-4(fp)
8112fad4:	00c010c4 	movi	r3,67
8112fad8:	10c00005 	stb	r3,0(r2)
8112fadc:	00001b06 	br	8112fb4c <OSTaskNameSet+0x1a8>
8112fae0:	e13ffe17 	ldw	r4,-8(fp)
8112fae4:	11297280 	call	81129728 <OS_StrLen>
8112fae8:	e0bffa05 	stb	r2,-24(fp)
8112faec:	e0bffa03 	ldbu	r2,-24(fp)
8112faf0:	10800830 	cmpltui	r2,r2,32
8112faf4:	1000081e 	bne	r2,zero,8112fb18 <OSTaskNameSet+0x174>
8112faf8:	e0bff517 	ldw	r2,-44(fp)
8112fafc:	e0bff915 	stw	r2,-28(fp)
8112fb00:	e0bff917 	ldw	r2,-28(fp)
8112fb04:	1001703a 	wrctl	status,r2
8112fb08:	e0bfff17 	ldw	r2,-4(fp)
8112fb0c:	00c01044 	movi	r3,65
8112fb10:	10c00005 	stb	r3,0(r2)
8112fb14:	00000d06 	br	8112fb4c <OSTaskNameSet+0x1a8>
8112fb18:	e0bff717 	ldw	r2,-36(fp)
8112fb1c:	10801304 	addi	r2,r2,76
8112fb20:	e17ffe17 	ldw	r5,-8(fp)
8112fb24:	1009883a 	mov	r4,r2
8112fb28:	11296ac0 	call	811296ac <OS_StrCopy>
8112fb2c:	e0bff517 	ldw	r2,-44(fp)
8112fb30:	e0bffb15 	stw	r2,-20(fp)
8112fb34:	e0bffb17 	ldw	r2,-20(fp)
8112fb38:	1001703a 	wrctl	status,r2
8112fb3c:	e0bfff17 	ldw	r2,-4(fp)
8112fb40:	10000005 	stb	zero,0(r2)
8112fb44:	00000106 	br	8112fb4c <OSTaskNameSet+0x1a8>
8112fb48:	0001883a 	nop
8112fb4c:	e037883a 	mov	sp,fp
8112fb50:	dfc00117 	ldw	ra,4(sp)
8112fb54:	df000017 	ldw	fp,0(sp)
8112fb58:	dec00204 	addi	sp,sp,8
8112fb5c:	f800283a 	ret

8112fb60 <OSTaskResume>:
8112fb60:	defff404 	addi	sp,sp,-48
8112fb64:	de00012e 	bgeu	sp,et,8112fb6c <OSTaskResume+0xc>
8112fb68:	003b68fa 	trap	3
8112fb6c:	dfc00b15 	stw	ra,44(sp)
8112fb70:	df000a15 	stw	fp,40(sp)
8112fb74:	df000a04 	addi	fp,sp,40
8112fb78:	2005883a 	mov	r2,r4
8112fb7c:	e0bfff05 	stb	r2,-4(fp)
8112fb80:	e03ff615 	stw	zero,-40(fp)
8112fb84:	e0bfff03 	ldbu	r2,-4(fp)
8112fb88:	10800a30 	cmpltui	r2,r2,40
8112fb8c:	1000021e 	bne	r2,zero,8112fb98 <OSTaskResume+0x38>
8112fb90:	00800a84 	movi	r2,42
8112fb94:	00006406 	br	8112fd28 <OSTaskResume+0x1c8>
8112fb98:	0005303a 	rdctl	r2,status
8112fb9c:	e0bffe15 	stw	r2,-8(fp)
8112fba0:	e0fffe17 	ldw	r3,-8(fp)
8112fba4:	00bfff84 	movi	r2,-2
8112fba8:	1884703a 	and	r2,r3,r2
8112fbac:	1001703a 	wrctl	status,r2
8112fbb0:	e0bffe17 	ldw	r2,-8(fp)
8112fbb4:	e0bff615 	stw	r2,-40(fp)
8112fbb8:	e0ffff03 	ldbu	r3,-4(fp)
8112fbbc:	00a04574 	movhi	r2,33045
8112fbc0:	108d5704 	addi	r2,r2,13660
8112fbc4:	18c7883a 	add	r3,r3,r3
8112fbc8:	18c7883a 	add	r3,r3,r3
8112fbcc:	10c5883a 	add	r2,r2,r3
8112fbd0:	10800017 	ldw	r2,0(r2)
8112fbd4:	e0bff815 	stw	r2,-32(fp)
8112fbd8:	e0bff817 	ldw	r2,-32(fp)
8112fbdc:	1000061e 	bne	r2,zero,8112fbf8 <OSTaskResume+0x98>
8112fbe0:	e0bff617 	ldw	r2,-40(fp)
8112fbe4:	e0bff715 	stw	r2,-36(fp)
8112fbe8:	e0bff717 	ldw	r2,-36(fp)
8112fbec:	1001703a 	wrctl	status,r2
8112fbf0:	00801184 	movi	r2,70
8112fbf4:	00004c06 	br	8112fd28 <OSTaskResume+0x1c8>
8112fbf8:	e0bff817 	ldw	r2,-32(fp)
8112fbfc:	10800058 	cmpnei	r2,r2,1
8112fc00:	1000061e 	bne	r2,zero,8112fc1c <OSTaskResume+0xbc>
8112fc04:	e0bff617 	ldw	r2,-40(fp)
8112fc08:	e0bff915 	stw	r2,-28(fp)
8112fc0c:	e0bff917 	ldw	r2,-28(fp)
8112fc10:	1001703a 	wrctl	status,r2
8112fc14:	008010c4 	movi	r2,67
8112fc18:	00004306 	br	8112fd28 <OSTaskResume+0x1c8>
8112fc1c:	e0bff817 	ldw	r2,-32(fp)
8112fc20:	10800c03 	ldbu	r2,48(r2)
8112fc24:	10803fcc 	andi	r2,r2,255
8112fc28:	1080020c 	andi	r2,r2,8
8112fc2c:	10003926 	beq	r2,zero,8112fd14 <OSTaskResume+0x1b4>
8112fc30:	e0bff817 	ldw	r2,-32(fp)
8112fc34:	10c00c03 	ldbu	r3,48(r2)
8112fc38:	00bffdc4 	movi	r2,-9
8112fc3c:	1884703a 	and	r2,r3,r2
8112fc40:	1007883a 	mov	r3,r2
8112fc44:	e0bff817 	ldw	r2,-32(fp)
8112fc48:	10c00c05 	stb	r3,48(r2)
8112fc4c:	e0bff817 	ldw	r2,-32(fp)
8112fc50:	10800c03 	ldbu	r2,48(r2)
8112fc54:	10803fcc 	andi	r2,r2,255
8112fc58:	1000281e 	bne	r2,zero,8112fcfc <OSTaskResume+0x19c>
8112fc5c:	e0bff817 	ldw	r2,-32(fp)
8112fc60:	10800b8b 	ldhu	r2,46(r2)
8112fc64:	10bfffcc 	andi	r2,r2,65535
8112fc68:	10001f1e 	bne	r2,zero,8112fce8 <OSTaskResume+0x188>
8112fc6c:	e0bff817 	ldw	r2,-32(fp)
8112fc70:	10c00d83 	ldbu	r3,54(r2)
8112fc74:	d0a08003 	ldbu	r2,-32256(gp)
8112fc78:	1884b03a 	or	r2,r3,r2
8112fc7c:	d0a08005 	stb	r2,-32256(gp)
8112fc80:	e0bff817 	ldw	r2,-32(fp)
8112fc84:	10800d03 	ldbu	r2,52(r2)
8112fc88:	10c03fcc 	andi	r3,r2,255
8112fc8c:	e0bff817 	ldw	r2,-32(fp)
8112fc90:	10800d03 	ldbu	r2,52(r2)
8112fc94:	11003fcc 	andi	r4,r2,255
8112fc98:	d0a08044 	addi	r2,gp,-32255
8112fc9c:	2085883a 	add	r2,r4,r2
8112fca0:	11000003 	ldbu	r4,0(r2)
8112fca4:	e0bff817 	ldw	r2,-32(fp)
8112fca8:	10800d43 	ldbu	r2,53(r2)
8112fcac:	2084b03a 	or	r2,r4,r2
8112fcb0:	1009883a 	mov	r4,r2
8112fcb4:	d0a08044 	addi	r2,gp,-32255
8112fcb8:	1885883a 	add	r2,r3,r2
8112fcbc:	11000005 	stb	r4,0(r2)
8112fcc0:	e0bff617 	ldw	r2,-40(fp)
8112fcc4:	e0bffa15 	stw	r2,-24(fp)
8112fcc8:	e0bffa17 	ldw	r2,-24(fp)
8112fccc:	1001703a 	wrctl	status,r2
8112fcd0:	d0a07303 	ldbu	r2,-32308(gp)
8112fcd4:	10803fcc 	andi	r2,r2,255
8112fcd8:	10800058 	cmpnei	r2,r2,1
8112fcdc:	10000b1e 	bne	r2,zero,8112fd0c <OSTaskResume+0x1ac>
8112fce0:	11295580 	call	81129558 <OS_Sched>
8112fce4:	00000906 	br	8112fd0c <OSTaskResume+0x1ac>
8112fce8:	e0bff617 	ldw	r2,-40(fp)
8112fcec:	e0bffb15 	stw	r2,-20(fp)
8112fcf0:	e0bffb17 	ldw	r2,-20(fp)
8112fcf4:	1001703a 	wrctl	status,r2
8112fcf8:	00000406 	br	8112fd0c <OSTaskResume+0x1ac>
8112fcfc:	e0bff617 	ldw	r2,-40(fp)
8112fd00:	e0bffc15 	stw	r2,-16(fp)
8112fd04:	e0bffc17 	ldw	r2,-16(fp)
8112fd08:	1001703a 	wrctl	status,r2
8112fd0c:	0005883a 	mov	r2,zero
8112fd10:	00000506 	br	8112fd28 <OSTaskResume+0x1c8>
8112fd14:	e0bff617 	ldw	r2,-40(fp)
8112fd18:	e0bffd15 	stw	r2,-12(fp)
8112fd1c:	e0bffd17 	ldw	r2,-12(fp)
8112fd20:	1001703a 	wrctl	status,r2
8112fd24:	00801104 	movi	r2,68
8112fd28:	e037883a 	mov	sp,fp
8112fd2c:	dfc00117 	ldw	ra,4(sp)
8112fd30:	df000017 	ldw	fp,0(sp)
8112fd34:	dec00204 	addi	sp,sp,8
8112fd38:	f800283a 	ret

8112fd3c <OSTaskStkChk>:
8112fd3c:	defff304 	addi	sp,sp,-52
8112fd40:	de00012e 	bgeu	sp,et,8112fd48 <OSTaskStkChk+0xc>
8112fd44:	003b68fa 	trap	3
8112fd48:	df000c15 	stw	fp,48(sp)
8112fd4c:	df000c04 	addi	fp,sp,48
8112fd50:	2005883a 	mov	r2,r4
8112fd54:	e17fff15 	stw	r5,-4(fp)
8112fd58:	e0bffe05 	stb	r2,-8(fp)
8112fd5c:	e03ff615 	stw	zero,-40(fp)
8112fd60:	e0bffe03 	ldbu	r2,-8(fp)
8112fd64:	10800a70 	cmpltui	r2,r2,41
8112fd68:	1000051e 	bne	r2,zero,8112fd80 <OSTaskStkChk+0x44>
8112fd6c:	e0bffe03 	ldbu	r2,-8(fp)
8112fd70:	10803fe0 	cmpeqi	r2,r2,255
8112fd74:	1000021e 	bne	r2,zero,8112fd80 <OSTaskStkChk+0x44>
8112fd78:	00800a84 	movi	r2,42
8112fd7c:	00005d06 	br	8112fef4 <OSTaskStkChk+0x1b8>
8112fd80:	e0bfff17 	ldw	r2,-4(fp)
8112fd84:	1000021e 	bne	r2,zero,8112fd90 <OSTaskStkChk+0x54>
8112fd88:	00800244 	movi	r2,9
8112fd8c:	00005906 	br	8112fef4 <OSTaskStkChk+0x1b8>
8112fd90:	e0bfff17 	ldw	r2,-4(fp)
8112fd94:	10000015 	stw	zero,0(r2)
8112fd98:	e0bfff17 	ldw	r2,-4(fp)
8112fd9c:	10000115 	stw	zero,4(r2)
8112fda0:	0005303a 	rdctl	r2,status
8112fda4:	e0bffd15 	stw	r2,-12(fp)
8112fda8:	e0fffd17 	ldw	r3,-12(fp)
8112fdac:	00bfff84 	movi	r2,-2
8112fdb0:	1884703a 	and	r2,r3,r2
8112fdb4:	1001703a 	wrctl	status,r2
8112fdb8:	e0bffd17 	ldw	r2,-12(fp)
8112fdbc:	e0bff615 	stw	r2,-40(fp)
8112fdc0:	e0bffe03 	ldbu	r2,-8(fp)
8112fdc4:	10803fd8 	cmpnei	r2,r2,255
8112fdc8:	1000031e 	bne	r2,zero,8112fdd8 <OSTaskStkChk+0x9c>
8112fdcc:	d0a08417 	ldw	r2,-32240(gp)
8112fdd0:	10800c83 	ldbu	r2,50(r2)
8112fdd4:	e0bffe05 	stb	r2,-8(fp)
8112fdd8:	e0fffe03 	ldbu	r3,-8(fp)
8112fddc:	00a04574 	movhi	r2,33045
8112fde0:	108d5704 	addi	r2,r2,13660
8112fde4:	18c7883a 	add	r3,r3,r3
8112fde8:	18c7883a 	add	r3,r3,r3
8112fdec:	10c5883a 	add	r2,r2,r3
8112fdf0:	10800017 	ldw	r2,0(r2)
8112fdf4:	e0bff815 	stw	r2,-32(fp)
8112fdf8:	e0bff817 	ldw	r2,-32(fp)
8112fdfc:	1000061e 	bne	r2,zero,8112fe18 <OSTaskStkChk+0xdc>
8112fe00:	e0bff617 	ldw	r2,-40(fp)
8112fe04:	e0bff715 	stw	r2,-36(fp)
8112fe08:	e0bff717 	ldw	r2,-36(fp)
8112fe0c:	1001703a 	wrctl	status,r2
8112fe10:	008010c4 	movi	r2,67
8112fe14:	00003706 	br	8112fef4 <OSTaskStkChk+0x1b8>
8112fe18:	e0bff817 	ldw	r2,-32(fp)
8112fe1c:	10800058 	cmpnei	r2,r2,1
8112fe20:	1000061e 	bne	r2,zero,8112fe3c <OSTaskStkChk+0x100>
8112fe24:	e0bff617 	ldw	r2,-40(fp)
8112fe28:	e0bff915 	stw	r2,-28(fp)
8112fe2c:	e0bff917 	ldw	r2,-28(fp)
8112fe30:	1001703a 	wrctl	status,r2
8112fe34:	008010c4 	movi	r2,67
8112fe38:	00002e06 	br	8112fef4 <OSTaskStkChk+0x1b8>
8112fe3c:	e0bff817 	ldw	r2,-32(fp)
8112fe40:	1080040b 	ldhu	r2,16(r2)
8112fe44:	10bfffcc 	andi	r2,r2,65535
8112fe48:	1080004c 	andi	r2,r2,1
8112fe4c:	1000061e 	bne	r2,zero,8112fe68 <OSTaskStkChk+0x12c>
8112fe50:	e0bff617 	ldw	r2,-40(fp)
8112fe54:	e0bffa15 	stw	r2,-24(fp)
8112fe58:	e0bffa17 	ldw	r2,-24(fp)
8112fe5c:	1001703a 	wrctl	status,r2
8112fe60:	00801144 	movi	r2,69
8112fe64:	00002306 	br	8112fef4 <OSTaskStkChk+0x1b8>
8112fe68:	e03ff515 	stw	zero,-44(fp)
8112fe6c:	e0bff817 	ldw	r2,-32(fp)
8112fe70:	10800317 	ldw	r2,12(r2)
8112fe74:	e0bffc15 	stw	r2,-16(fp)
8112fe78:	e0bff817 	ldw	r2,-32(fp)
8112fe7c:	10800217 	ldw	r2,8(r2)
8112fe80:	e0bff415 	stw	r2,-48(fp)
8112fe84:	e0bff617 	ldw	r2,-40(fp)
8112fe88:	e0bffb15 	stw	r2,-20(fp)
8112fe8c:	e0bffb17 	ldw	r2,-20(fp)
8112fe90:	1001703a 	wrctl	status,r2
8112fe94:	00000306 	br	8112fea4 <OSTaskStkChk+0x168>
8112fe98:	e0bff517 	ldw	r2,-44(fp)
8112fe9c:	10800044 	addi	r2,r2,1
8112fea0:	e0bff515 	stw	r2,-44(fp)
8112fea4:	e0bff417 	ldw	r2,-48(fp)
8112fea8:	10c00104 	addi	r3,r2,4
8112feac:	e0fff415 	stw	r3,-48(fp)
8112feb0:	10800017 	ldw	r2,0(r2)
8112feb4:	103ff826 	beq	r2,zero,8112fe98 <__reset+0xfb10fe98>
8112feb8:	e0bff517 	ldw	r2,-44(fp)
8112febc:	1085883a 	add	r2,r2,r2
8112fec0:	1085883a 	add	r2,r2,r2
8112fec4:	1007883a 	mov	r3,r2
8112fec8:	e0bfff17 	ldw	r2,-4(fp)
8112fecc:	10c00015 	stw	r3,0(r2)
8112fed0:	e0fffc17 	ldw	r3,-16(fp)
8112fed4:	e0bff517 	ldw	r2,-44(fp)
8112fed8:	1885c83a 	sub	r2,r3,r2
8112fedc:	1085883a 	add	r2,r2,r2
8112fee0:	1085883a 	add	r2,r2,r2
8112fee4:	1007883a 	mov	r3,r2
8112fee8:	e0bfff17 	ldw	r2,-4(fp)
8112feec:	10c00115 	stw	r3,4(r2)
8112fef0:	0005883a 	mov	r2,zero
8112fef4:	e037883a 	mov	sp,fp
8112fef8:	df000017 	ldw	fp,0(sp)
8112fefc:	dec00104 	addi	sp,sp,4
8112ff00:	f800283a 	ret

8112ff04 <OSTaskSuspend>:
8112ff04:	defff504 	addi	sp,sp,-44
8112ff08:	de00012e 	bgeu	sp,et,8112ff10 <OSTaskSuspend+0xc>
8112ff0c:	003b68fa 	trap	3
8112ff10:	dfc00a15 	stw	ra,40(sp)
8112ff14:	df000915 	stw	fp,36(sp)
8112ff18:	df000904 	addi	fp,sp,36
8112ff1c:	2005883a 	mov	r2,r4
8112ff20:	e0bfff05 	stb	r2,-4(fp)
8112ff24:	e03ff815 	stw	zero,-32(fp)
8112ff28:	e0bfff03 	ldbu	r2,-4(fp)
8112ff2c:	10800a18 	cmpnei	r2,r2,40
8112ff30:	1000021e 	bne	r2,zero,8112ff3c <OSTaskSuspend+0x38>
8112ff34:	008011c4 	movi	r2,71
8112ff38:	00006806 	br	811300dc <OSTaskSuspend+0x1d8>
8112ff3c:	e0bfff03 	ldbu	r2,-4(fp)
8112ff40:	10800a30 	cmpltui	r2,r2,40
8112ff44:	1000051e 	bne	r2,zero,8112ff5c <OSTaskSuspend+0x58>
8112ff48:	e0bfff03 	ldbu	r2,-4(fp)
8112ff4c:	10803fe0 	cmpeqi	r2,r2,255
8112ff50:	1000021e 	bne	r2,zero,8112ff5c <OSTaskSuspend+0x58>
8112ff54:	00800a84 	movi	r2,42
8112ff58:	00006006 	br	811300dc <OSTaskSuspend+0x1d8>
8112ff5c:	0005303a 	rdctl	r2,status
8112ff60:	e0bffe15 	stw	r2,-8(fp)
8112ff64:	e0fffe17 	ldw	r3,-8(fp)
8112ff68:	00bfff84 	movi	r2,-2
8112ff6c:	1884703a 	and	r2,r3,r2
8112ff70:	1001703a 	wrctl	status,r2
8112ff74:	e0bffe17 	ldw	r2,-8(fp)
8112ff78:	e0bff815 	stw	r2,-32(fp)
8112ff7c:	e0bfff03 	ldbu	r2,-4(fp)
8112ff80:	10803fd8 	cmpnei	r2,r2,255
8112ff84:	1000061e 	bne	r2,zero,8112ffa0 <OSTaskSuspend+0x9c>
8112ff88:	d0a08417 	ldw	r2,-32240(gp)
8112ff8c:	10800c83 	ldbu	r2,50(r2)
8112ff90:	e0bfff05 	stb	r2,-4(fp)
8112ff94:	00800044 	movi	r2,1
8112ff98:	e0bff705 	stb	r2,-36(fp)
8112ff9c:	00000906 	br	8112ffc4 <OSTaskSuspend+0xc0>
8112ffa0:	d0a08417 	ldw	r2,-32240(gp)
8112ffa4:	10800c83 	ldbu	r2,50(r2)
8112ffa8:	10c03fcc 	andi	r3,r2,255
8112ffac:	e0bfff03 	ldbu	r2,-4(fp)
8112ffb0:	1880031e 	bne	r3,r2,8112ffc0 <OSTaskSuspend+0xbc>
8112ffb4:	00800044 	movi	r2,1
8112ffb8:	e0bff705 	stb	r2,-36(fp)
8112ffbc:	00000106 	br	8112ffc4 <OSTaskSuspend+0xc0>
8112ffc0:	e03ff705 	stb	zero,-36(fp)
8112ffc4:	e0ffff03 	ldbu	r3,-4(fp)
8112ffc8:	00a04574 	movhi	r2,33045
8112ffcc:	108d5704 	addi	r2,r2,13660
8112ffd0:	18c7883a 	add	r3,r3,r3
8112ffd4:	18c7883a 	add	r3,r3,r3
8112ffd8:	10c5883a 	add	r2,r2,r3
8112ffdc:	10800017 	ldw	r2,0(r2)
8112ffe0:	e0bffa15 	stw	r2,-24(fp)
8112ffe4:	e0bffa17 	ldw	r2,-24(fp)
8112ffe8:	1000061e 	bne	r2,zero,81130004 <OSTaskSuspend+0x100>
8112ffec:	e0bff817 	ldw	r2,-32(fp)
8112fff0:	e0bff915 	stw	r2,-28(fp)
8112fff4:	e0bff917 	ldw	r2,-28(fp)
8112fff8:	1001703a 	wrctl	status,r2
8112fffc:	00801204 	movi	r2,72
81130000:	00003606 	br	811300dc <OSTaskSuspend+0x1d8>
81130004:	e0bffa17 	ldw	r2,-24(fp)
81130008:	10800058 	cmpnei	r2,r2,1
8113000c:	1000061e 	bne	r2,zero,81130028 <OSTaskSuspend+0x124>
81130010:	e0bff817 	ldw	r2,-32(fp)
81130014:	e0bffb15 	stw	r2,-20(fp)
81130018:	e0bffb17 	ldw	r2,-20(fp)
8113001c:	1001703a 	wrctl	status,r2
81130020:	008010c4 	movi	r2,67
81130024:	00002d06 	br	811300dc <OSTaskSuspend+0x1d8>
81130028:	e0bffa17 	ldw	r2,-24(fp)
8113002c:	10800d03 	ldbu	r2,52(r2)
81130030:	e0bffd05 	stb	r2,-12(fp)
81130034:	e0fffd03 	ldbu	r3,-12(fp)
81130038:	e13ffd03 	ldbu	r4,-12(fp)
8113003c:	d0a08044 	addi	r2,gp,-32255
81130040:	2085883a 	add	r2,r4,r2
81130044:	10800003 	ldbu	r2,0(r2)
81130048:	1009883a 	mov	r4,r2
8113004c:	e0bffa17 	ldw	r2,-24(fp)
81130050:	10800d43 	ldbu	r2,53(r2)
81130054:	0084303a 	nor	r2,zero,r2
81130058:	2084703a 	and	r2,r4,r2
8113005c:	1009883a 	mov	r4,r2
81130060:	d0a08044 	addi	r2,gp,-32255
81130064:	1885883a 	add	r2,r3,r2
81130068:	11000005 	stb	r4,0(r2)
8113006c:	e0fffd03 	ldbu	r3,-12(fp)
81130070:	d0a08044 	addi	r2,gp,-32255
81130074:	1885883a 	add	r2,r3,r2
81130078:	10800003 	ldbu	r2,0(r2)
8113007c:	10803fcc 	andi	r2,r2,255
81130080:	1000071e 	bne	r2,zero,811300a0 <OSTaskSuspend+0x19c>
81130084:	e0bffa17 	ldw	r2,-24(fp)
81130088:	10800d83 	ldbu	r2,54(r2)
8113008c:	0084303a 	nor	r2,zero,r2
81130090:	1007883a 	mov	r3,r2
81130094:	d0a08003 	ldbu	r2,-32256(gp)
81130098:	1884703a 	and	r2,r3,r2
8113009c:	d0a08005 	stb	r2,-32256(gp)
811300a0:	e0bffa17 	ldw	r2,-24(fp)
811300a4:	10800c03 	ldbu	r2,48(r2)
811300a8:	10800214 	ori	r2,r2,8
811300ac:	1007883a 	mov	r3,r2
811300b0:	e0bffa17 	ldw	r2,-24(fp)
811300b4:	10c00c05 	stb	r3,48(r2)
811300b8:	e0bff817 	ldw	r2,-32(fp)
811300bc:	e0bffc15 	stw	r2,-16(fp)
811300c0:	e0bffc17 	ldw	r2,-16(fp)
811300c4:	1001703a 	wrctl	status,r2
811300c8:	e0bff703 	ldbu	r2,-36(fp)
811300cc:	10800058 	cmpnei	r2,r2,1
811300d0:	1000011e 	bne	r2,zero,811300d8 <OSTaskSuspend+0x1d4>
811300d4:	11295580 	call	81129558 <OS_Sched>
811300d8:	0005883a 	mov	r2,zero
811300dc:	e037883a 	mov	sp,fp
811300e0:	dfc00117 	ldw	ra,4(sp)
811300e4:	df000017 	ldw	fp,0(sp)
811300e8:	dec00204 	addi	sp,sp,8
811300ec:	f800283a 	ret

811300f0 <OSTaskQuery>:
811300f0:	defff604 	addi	sp,sp,-40
811300f4:	de00012e 	bgeu	sp,et,811300fc <OSTaskQuery+0xc>
811300f8:	003b68fa 	trap	3
811300fc:	dfc00915 	stw	ra,36(sp)
81130100:	df000815 	stw	fp,32(sp)
81130104:	df000804 	addi	fp,sp,32
81130108:	2005883a 	mov	r2,r4
8113010c:	e17fff15 	stw	r5,-4(fp)
81130110:	e0bffe05 	stb	r2,-8(fp)
81130114:	e03ff815 	stw	zero,-32(fp)
81130118:	e0bffe03 	ldbu	r2,-8(fp)
8113011c:	10800a70 	cmpltui	r2,r2,41
81130120:	1000051e 	bne	r2,zero,81130138 <OSTaskQuery+0x48>
81130124:	e0bffe03 	ldbu	r2,-8(fp)
81130128:	10803fe0 	cmpeqi	r2,r2,255
8113012c:	1000021e 	bne	r2,zero,81130138 <OSTaskQuery+0x48>
81130130:	00800a84 	movi	r2,42
81130134:	00003406 	br	81130208 <OSTaskQuery+0x118>
81130138:	e0bfff17 	ldw	r2,-4(fp)
8113013c:	1000021e 	bne	r2,zero,81130148 <OSTaskQuery+0x58>
81130140:	00800244 	movi	r2,9
81130144:	00003006 	br	81130208 <OSTaskQuery+0x118>
81130148:	0005303a 	rdctl	r2,status
8113014c:	e0bffd15 	stw	r2,-12(fp)
81130150:	e0fffd17 	ldw	r3,-12(fp)
81130154:	00bfff84 	movi	r2,-2
81130158:	1884703a 	and	r2,r3,r2
8113015c:	1001703a 	wrctl	status,r2
81130160:	e0bffd17 	ldw	r2,-12(fp)
81130164:	e0bff815 	stw	r2,-32(fp)
81130168:	e0bffe03 	ldbu	r2,-8(fp)
8113016c:	10803fd8 	cmpnei	r2,r2,255
81130170:	1000031e 	bne	r2,zero,81130180 <OSTaskQuery+0x90>
81130174:	d0a08417 	ldw	r2,-32240(gp)
81130178:	10800c83 	ldbu	r2,50(r2)
8113017c:	e0bffe05 	stb	r2,-8(fp)
81130180:	e0fffe03 	ldbu	r3,-8(fp)
81130184:	00a04574 	movhi	r2,33045
81130188:	108d5704 	addi	r2,r2,13660
8113018c:	18c7883a 	add	r3,r3,r3
81130190:	18c7883a 	add	r3,r3,r3
81130194:	10c5883a 	add	r2,r2,r3
81130198:	10800017 	ldw	r2,0(r2)
8113019c:	e0bffa15 	stw	r2,-24(fp)
811301a0:	e0bffa17 	ldw	r2,-24(fp)
811301a4:	1000061e 	bne	r2,zero,811301c0 <OSTaskQuery+0xd0>
811301a8:	e0bff817 	ldw	r2,-32(fp)
811301ac:	e0bff915 	stw	r2,-28(fp)
811301b0:	e0bff917 	ldw	r2,-28(fp)
811301b4:	1001703a 	wrctl	status,r2
811301b8:	00800a44 	movi	r2,41
811301bc:	00001206 	br	81130208 <OSTaskQuery+0x118>
811301c0:	e0bffa17 	ldw	r2,-24(fp)
811301c4:	10800058 	cmpnei	r2,r2,1
811301c8:	1000061e 	bne	r2,zero,811301e4 <OSTaskQuery+0xf4>
811301cc:	e0bff817 	ldw	r2,-32(fp)
811301d0:	e0bffb15 	stw	r2,-20(fp)
811301d4:	e0bffb17 	ldw	r2,-20(fp)
811301d8:	1001703a 	wrctl	status,r2
811301dc:	008010c4 	movi	r2,67
811301e0:	00000906 	br	81130208 <OSTaskQuery+0x118>
811301e4:	01801b04 	movi	r6,108
811301e8:	e17ffa17 	ldw	r5,-24(fp)
811301ec:	e13fff17 	ldw	r4,-4(fp)
811301f0:	11294e80 	call	811294e8 <OS_MemCopy>
811301f4:	e0bff817 	ldw	r2,-32(fp)
811301f8:	e0bffc15 	stw	r2,-16(fp)
811301fc:	e0bffc17 	ldw	r2,-16(fp)
81130200:	1001703a 	wrctl	status,r2
81130204:	0005883a 	mov	r2,zero
81130208:	e037883a 	mov	sp,fp
8113020c:	dfc00117 	ldw	ra,4(sp)
81130210:	df000017 	ldw	fp,0(sp)
81130214:	dec00204 	addi	sp,sp,8
81130218:	f800283a 	ret

8113021c <OS_TaskStkClr>:
8113021c:	defffc04 	addi	sp,sp,-16
81130220:	de00012e 	bgeu	sp,et,81130228 <OS_TaskStkClr+0xc>
81130224:	003b68fa 	trap	3
81130228:	df000315 	stw	fp,12(sp)
8113022c:	df000304 	addi	fp,sp,12
81130230:	e13ffd15 	stw	r4,-12(fp)
81130234:	e17ffe15 	stw	r5,-8(fp)
81130238:	3005883a 	mov	r2,r6
8113023c:	e0bfff0d 	sth	r2,-4(fp)
81130240:	e0bfff0b 	ldhu	r2,-4(fp)
81130244:	1080004c 	andi	r2,r2,1
81130248:	10000d26 	beq	r2,zero,81130280 <OS_TaskStkClr+0x64>
8113024c:	e0bfff0b 	ldhu	r2,-4(fp)
81130250:	1080008c 	andi	r2,r2,2
81130254:	10000a26 	beq	r2,zero,81130280 <OS_TaskStkClr+0x64>
81130258:	00000706 	br	81130278 <OS_TaskStkClr+0x5c>
8113025c:	e0bffe17 	ldw	r2,-8(fp)
81130260:	10bfffc4 	addi	r2,r2,-1
81130264:	e0bffe15 	stw	r2,-8(fp)
81130268:	e0bffd17 	ldw	r2,-12(fp)
8113026c:	10c00104 	addi	r3,r2,4
81130270:	e0fffd15 	stw	r3,-12(fp)
81130274:	10000015 	stw	zero,0(r2)
81130278:	e0bffe17 	ldw	r2,-8(fp)
8113027c:	103ff71e 	bne	r2,zero,8113025c <__reset+0xfb11025c>
81130280:	0001883a 	nop
81130284:	e037883a 	mov	sp,fp
81130288:	df000017 	ldw	fp,0(sp)
8113028c:	dec00104 	addi	sp,sp,4
81130290:	f800283a 	ret

81130294 <OSTimeDly>:
81130294:	defff904 	addi	sp,sp,-28
81130298:	de00012e 	bgeu	sp,et,811302a0 <OSTimeDly+0xc>
8113029c:	003b68fa 	trap	3
811302a0:	dfc00615 	stw	ra,24(sp)
811302a4:	df000515 	stw	fp,20(sp)
811302a8:	df000504 	addi	fp,sp,20
811302ac:	2005883a 	mov	r2,r4
811302b0:	e0bfff0d 	sth	r2,-4(fp)
811302b4:	e03ffb15 	stw	zero,-20(fp)
811302b8:	d0a08303 	ldbu	r2,-32244(gp)
811302bc:	10803fcc 	andi	r2,r2,255
811302c0:	1000311e 	bne	r2,zero,81130388 <OSTimeDly+0xf4>
811302c4:	e0bfff0b 	ldhu	r2,-4(fp)
811302c8:	10003026 	beq	r2,zero,8113038c <OSTimeDly+0xf8>
811302cc:	0005303a 	rdctl	r2,status
811302d0:	e0bffe15 	stw	r2,-8(fp)
811302d4:	e0fffe17 	ldw	r3,-8(fp)
811302d8:	00bfff84 	movi	r2,-2
811302dc:	1884703a 	and	r2,r3,r2
811302e0:	1001703a 	wrctl	status,r2
811302e4:	e0bffe17 	ldw	r2,-8(fp)
811302e8:	e0bffb15 	stw	r2,-20(fp)
811302ec:	d0a08417 	ldw	r2,-32240(gp)
811302f0:	10800d03 	ldbu	r2,52(r2)
811302f4:	e0bffd05 	stb	r2,-12(fp)
811302f8:	e0fffd03 	ldbu	r3,-12(fp)
811302fc:	e13ffd03 	ldbu	r4,-12(fp)
81130300:	d0a08044 	addi	r2,gp,-32255
81130304:	2085883a 	add	r2,r4,r2
81130308:	10800003 	ldbu	r2,0(r2)
8113030c:	1009883a 	mov	r4,r2
81130310:	d0a08417 	ldw	r2,-32240(gp)
81130314:	10800d43 	ldbu	r2,53(r2)
81130318:	0084303a 	nor	r2,zero,r2
8113031c:	2084703a 	and	r2,r4,r2
81130320:	1009883a 	mov	r4,r2
81130324:	d0a08044 	addi	r2,gp,-32255
81130328:	1885883a 	add	r2,r3,r2
8113032c:	11000005 	stb	r4,0(r2)
81130330:	e0fffd03 	ldbu	r3,-12(fp)
81130334:	d0a08044 	addi	r2,gp,-32255
81130338:	1885883a 	add	r2,r3,r2
8113033c:	10800003 	ldbu	r2,0(r2)
81130340:	10803fcc 	andi	r2,r2,255
81130344:	1000071e 	bne	r2,zero,81130364 <OSTimeDly+0xd0>
81130348:	d0a08417 	ldw	r2,-32240(gp)
8113034c:	10800d83 	ldbu	r2,54(r2)
81130350:	0084303a 	nor	r2,zero,r2
81130354:	1007883a 	mov	r3,r2
81130358:	d0a08003 	ldbu	r2,-32256(gp)
8113035c:	1884703a 	and	r2,r3,r2
81130360:	d0a08005 	stb	r2,-32256(gp)
81130364:	d0a08417 	ldw	r2,-32240(gp)
81130368:	e0ffff0b 	ldhu	r3,-4(fp)
8113036c:	10c00b8d 	sth	r3,46(r2)
81130370:	e0bffb17 	ldw	r2,-20(fp)
81130374:	e0bffc15 	stw	r2,-16(fp)
81130378:	e0bffc17 	ldw	r2,-16(fp)
8113037c:	1001703a 	wrctl	status,r2
81130380:	11295580 	call	81129558 <OS_Sched>
81130384:	00000106 	br	8113038c <OSTimeDly+0xf8>
81130388:	0001883a 	nop
8113038c:	e037883a 	mov	sp,fp
81130390:	dfc00117 	ldw	ra,4(sp)
81130394:	df000017 	ldw	fp,0(sp)
81130398:	dec00204 	addi	sp,sp,8
8113039c:	f800283a 	ret

811303a0 <OSTimeDlyHMSM>:
811303a0:	defff804 	addi	sp,sp,-32
811303a4:	de00012e 	bgeu	sp,et,811303ac <OSTimeDlyHMSM+0xc>
811303a8:	003b68fa 	trap	3
811303ac:	dfc00715 	stw	ra,28(sp)
811303b0:	df000615 	stw	fp,24(sp)
811303b4:	df000604 	addi	fp,sp,24
811303b8:	2015883a 	mov	r10,r4
811303bc:	2809883a 	mov	r4,r5
811303c0:	3007883a 	mov	r3,r6
811303c4:	3805883a 	mov	r2,r7
811303c8:	e2bffc05 	stb	r10,-16(fp)
811303cc:	e13ffd05 	stb	r4,-12(fp)
811303d0:	e0fffe05 	stb	r3,-8(fp)
811303d4:	e0bfff0d 	sth	r2,-4(fp)
811303d8:	d0a08303 	ldbu	r2,-32244(gp)
811303dc:	10803fcc 	andi	r2,r2,255
811303e0:	10000226 	beq	r2,zero,811303ec <OSTimeDlyHMSM+0x4c>
811303e4:	00801544 	movi	r2,85
811303e8:	00004106 	br	811304f0 <OSTimeDlyHMSM+0x150>
811303ec:	e0bffc03 	ldbu	r2,-16(fp)
811303f0:	1000081e 	bne	r2,zero,81130414 <OSTimeDlyHMSM+0x74>
811303f4:	e0bffd03 	ldbu	r2,-12(fp)
811303f8:	1000061e 	bne	r2,zero,81130414 <OSTimeDlyHMSM+0x74>
811303fc:	e0bffe03 	ldbu	r2,-8(fp)
81130400:	1000041e 	bne	r2,zero,81130414 <OSTimeDlyHMSM+0x74>
81130404:	e0bfff0b 	ldhu	r2,-4(fp)
81130408:	1000021e 	bne	r2,zero,81130414 <OSTimeDlyHMSM+0x74>
8113040c:	00801504 	movi	r2,84
81130410:	00003706 	br	811304f0 <OSTimeDlyHMSM+0x150>
81130414:	e0bffd03 	ldbu	r2,-12(fp)
81130418:	10800f30 	cmpltui	r2,r2,60
8113041c:	1000021e 	bne	r2,zero,81130428 <OSTimeDlyHMSM+0x88>
81130420:	00801444 	movi	r2,81
81130424:	00003206 	br	811304f0 <OSTimeDlyHMSM+0x150>
81130428:	e0bffe03 	ldbu	r2,-8(fp)
8113042c:	10800f30 	cmpltui	r2,r2,60
81130430:	1000021e 	bne	r2,zero,8113043c <OSTimeDlyHMSM+0x9c>
81130434:	00801484 	movi	r2,82
81130438:	00002d06 	br	811304f0 <OSTimeDlyHMSM+0x150>
8113043c:	e0bfff0b 	ldhu	r2,-4(fp)
81130440:	1080fa30 	cmpltui	r2,r2,1000
81130444:	1000021e 	bne	r2,zero,81130450 <OSTimeDlyHMSM+0xb0>
81130448:	008014c4 	movi	r2,83
8113044c:	00002806 	br	811304f0 <OSTimeDlyHMSM+0x150>
81130450:	e0bffc03 	ldbu	r2,-16(fp)
81130454:	10c38424 	muli	r3,r2,3600
81130458:	e0bffd03 	ldbu	r2,-12(fp)
8113045c:	10800f24 	muli	r2,r2,60
81130460:	1887883a 	add	r3,r3,r2
81130464:	e0bffe03 	ldbu	r2,-8(fp)
81130468:	1885883a 	add	r2,r3,r2
8113046c:	1100fa24 	muli	r4,r2,1000
81130470:	e0bfff0b 	ldhu	r2,-4(fp)
81130474:	10c0fa24 	muli	r3,r2,1000
81130478:	008418b4 	movhi	r2,4194
8113047c:	109374c4 	addi	r2,r2,19923
81130480:	188a383a 	mulxuu	r5,r3,r2
81130484:	1885383a 	mul	r2,r3,r2
81130488:	1011883a 	mov	r8,r2
8113048c:	2813883a 	mov	r9,r5
81130490:	4804d1ba 	srli	r2,r9,6
81130494:	2085883a 	add	r2,r4,r2
81130498:	e0bffb15 	stw	r2,-20(fp)
8113049c:	e0bffb17 	ldw	r2,-20(fp)
811304a0:	1004d43a 	srli	r2,r2,16
811304a4:	e0bffa0d 	sth	r2,-24(fp)
811304a8:	e0bffb17 	ldw	r2,-20(fp)
811304ac:	10bfffcc 	andi	r2,r2,65535
811304b0:	e0bffb15 	stw	r2,-20(fp)
811304b4:	e0bffb17 	ldw	r2,-20(fp)
811304b8:	10bfffcc 	andi	r2,r2,65535
811304bc:	1009883a 	mov	r4,r2
811304c0:	11302940 	call	81130294 <OSTimeDly>
811304c4:	00000706 	br	811304e4 <OSTimeDlyHMSM+0x144>
811304c8:	01200014 	movui	r4,32768
811304cc:	11302940 	call	81130294 <OSTimeDly>
811304d0:	01200014 	movui	r4,32768
811304d4:	11302940 	call	81130294 <OSTimeDly>
811304d8:	e0bffa0b 	ldhu	r2,-24(fp)
811304dc:	10bfffc4 	addi	r2,r2,-1
811304e0:	e0bffa0d 	sth	r2,-24(fp)
811304e4:	e0bffa0b 	ldhu	r2,-24(fp)
811304e8:	103ff71e 	bne	r2,zero,811304c8 <__reset+0xfb1104c8>
811304ec:	0005883a 	mov	r2,zero
811304f0:	e037883a 	mov	sp,fp
811304f4:	dfc00117 	ldw	ra,4(sp)
811304f8:	df000017 	ldw	fp,0(sp)
811304fc:	dec00204 	addi	sp,sp,8
81130500:	f800283a 	ret

81130504 <OSTimeDlyResume>:
81130504:	defff504 	addi	sp,sp,-44
81130508:	de00012e 	bgeu	sp,et,81130510 <OSTimeDlyResume+0xc>
8113050c:	003b68fa 	trap	3
81130510:	dfc00a15 	stw	ra,40(sp)
81130514:	df000915 	stw	fp,36(sp)
81130518:	df000904 	addi	fp,sp,36
8113051c:	2005883a 	mov	r2,r4
81130520:	e0bfff05 	stb	r2,-4(fp)
81130524:	e03ff715 	stw	zero,-36(fp)
81130528:	e0bfff03 	ldbu	r2,-4(fp)
8113052c:	10800a30 	cmpltui	r2,r2,40
81130530:	1000021e 	bne	r2,zero,8113053c <OSTimeDlyResume+0x38>
81130534:	00800a84 	movi	r2,42
81130538:	00006406 	br	811306cc <OSTimeDlyResume+0x1c8>
8113053c:	0005303a 	rdctl	r2,status
81130540:	e0bffe15 	stw	r2,-8(fp)
81130544:	e0fffe17 	ldw	r3,-8(fp)
81130548:	00bfff84 	movi	r2,-2
8113054c:	1884703a 	and	r2,r3,r2
81130550:	1001703a 	wrctl	status,r2
81130554:	e0bffe17 	ldw	r2,-8(fp)
81130558:	e0bff715 	stw	r2,-36(fp)
8113055c:	e0ffff03 	ldbu	r3,-4(fp)
81130560:	00a04574 	movhi	r2,33045
81130564:	108d5704 	addi	r2,r2,13660
81130568:	18c7883a 	add	r3,r3,r3
8113056c:	18c7883a 	add	r3,r3,r3
81130570:	10c5883a 	add	r2,r2,r3
81130574:	10800017 	ldw	r2,0(r2)
81130578:	e0bff915 	stw	r2,-28(fp)
8113057c:	e0bff917 	ldw	r2,-28(fp)
81130580:	1000061e 	bne	r2,zero,8113059c <OSTimeDlyResume+0x98>
81130584:	e0bff717 	ldw	r2,-36(fp)
81130588:	e0bff815 	stw	r2,-32(fp)
8113058c:	e0bff817 	ldw	r2,-32(fp)
81130590:	1001703a 	wrctl	status,r2
81130594:	008010c4 	movi	r2,67
81130598:	00004c06 	br	811306cc <OSTimeDlyResume+0x1c8>
8113059c:	e0bff917 	ldw	r2,-28(fp)
811305a0:	10800058 	cmpnei	r2,r2,1
811305a4:	1000061e 	bne	r2,zero,811305c0 <OSTimeDlyResume+0xbc>
811305a8:	e0bff717 	ldw	r2,-36(fp)
811305ac:	e0bffa15 	stw	r2,-24(fp)
811305b0:	e0bffa17 	ldw	r2,-24(fp)
811305b4:	1001703a 	wrctl	status,r2
811305b8:	008010c4 	movi	r2,67
811305bc:	00004306 	br	811306cc <OSTimeDlyResume+0x1c8>
811305c0:	e0bff917 	ldw	r2,-28(fp)
811305c4:	10800b8b 	ldhu	r2,46(r2)
811305c8:	10bfffcc 	andi	r2,r2,65535
811305cc:	1000061e 	bne	r2,zero,811305e8 <OSTimeDlyResume+0xe4>
811305d0:	e0bff717 	ldw	r2,-36(fp)
811305d4:	e0bffb15 	stw	r2,-20(fp)
811305d8:	e0bffb17 	ldw	r2,-20(fp)
811305dc:	1001703a 	wrctl	status,r2
811305e0:	00801404 	movi	r2,80
811305e4:	00003906 	br	811306cc <OSTimeDlyResume+0x1c8>
811305e8:	e0bff917 	ldw	r2,-28(fp)
811305ec:	10000b8d 	sth	zero,46(r2)
811305f0:	e0bff917 	ldw	r2,-28(fp)
811305f4:	10800c03 	ldbu	r2,48(r2)
811305f8:	10803fcc 	andi	r2,r2,255
811305fc:	10800dcc 	andi	r2,r2,55
81130600:	10000b26 	beq	r2,zero,81130630 <OSTimeDlyResume+0x12c>
81130604:	e0bff917 	ldw	r2,-28(fp)
81130608:	10c00c03 	ldbu	r3,48(r2)
8113060c:	00bff204 	movi	r2,-56
81130610:	1884703a 	and	r2,r3,r2
81130614:	1007883a 	mov	r3,r2
81130618:	e0bff917 	ldw	r2,-28(fp)
8113061c:	10c00c05 	stb	r3,48(r2)
81130620:	e0bff917 	ldw	r2,-28(fp)
81130624:	00c00044 	movi	r3,1
81130628:	10c00c45 	stb	r3,49(r2)
8113062c:	00000206 	br	81130638 <OSTimeDlyResume+0x134>
81130630:	e0bff917 	ldw	r2,-28(fp)
81130634:	10000c45 	stb	zero,49(r2)
81130638:	e0bff917 	ldw	r2,-28(fp)
8113063c:	10800c03 	ldbu	r2,48(r2)
81130640:	10803fcc 	andi	r2,r2,255
81130644:	1080020c 	andi	r2,r2,8
81130648:	10001b1e 	bne	r2,zero,811306b8 <OSTimeDlyResume+0x1b4>
8113064c:	e0bff917 	ldw	r2,-28(fp)
81130650:	10c00d83 	ldbu	r3,54(r2)
81130654:	d0a08003 	ldbu	r2,-32256(gp)
81130658:	1884b03a 	or	r2,r3,r2
8113065c:	d0a08005 	stb	r2,-32256(gp)
81130660:	e0bff917 	ldw	r2,-28(fp)
81130664:	10800d03 	ldbu	r2,52(r2)
81130668:	10c03fcc 	andi	r3,r2,255
8113066c:	e0bff917 	ldw	r2,-28(fp)
81130670:	10800d03 	ldbu	r2,52(r2)
81130674:	11003fcc 	andi	r4,r2,255
81130678:	d0a08044 	addi	r2,gp,-32255
8113067c:	2085883a 	add	r2,r4,r2
81130680:	11000003 	ldbu	r4,0(r2)
81130684:	e0bff917 	ldw	r2,-28(fp)
81130688:	10800d43 	ldbu	r2,53(r2)
8113068c:	2084b03a 	or	r2,r4,r2
81130690:	1009883a 	mov	r4,r2
81130694:	d0a08044 	addi	r2,gp,-32255
81130698:	1885883a 	add	r2,r3,r2
8113069c:	11000005 	stb	r4,0(r2)
811306a0:	e0bff717 	ldw	r2,-36(fp)
811306a4:	e0bffc15 	stw	r2,-16(fp)
811306a8:	e0bffc17 	ldw	r2,-16(fp)
811306ac:	1001703a 	wrctl	status,r2
811306b0:	11295580 	call	81129558 <OS_Sched>
811306b4:	00000406 	br	811306c8 <OSTimeDlyResume+0x1c4>
811306b8:	e0bff717 	ldw	r2,-36(fp)
811306bc:	e0bffd15 	stw	r2,-12(fp)
811306c0:	e0bffd17 	ldw	r2,-12(fp)
811306c4:	1001703a 	wrctl	status,r2
811306c8:	0005883a 	mov	r2,zero
811306cc:	e037883a 	mov	sp,fp
811306d0:	dfc00117 	ldw	ra,4(sp)
811306d4:	df000017 	ldw	fp,0(sp)
811306d8:	dec00204 	addi	sp,sp,8
811306dc:	f800283a 	ret

811306e0 <OSTimeGet>:
811306e0:	defffb04 	addi	sp,sp,-20
811306e4:	de00012e 	bgeu	sp,et,811306ec <OSTimeGet+0xc>
811306e8:	003b68fa 	trap	3
811306ec:	df000415 	stw	fp,16(sp)
811306f0:	df000404 	addi	fp,sp,16
811306f4:	e03ffc15 	stw	zero,-16(fp)
811306f8:	0005303a 	rdctl	r2,status
811306fc:	e0bffe15 	stw	r2,-8(fp)
81130700:	e0fffe17 	ldw	r3,-8(fp)
81130704:	00bfff84 	movi	r2,-2
81130708:	1884703a 	and	r2,r3,r2
8113070c:	1001703a 	wrctl	status,r2
81130710:	e0bffe17 	ldw	r2,-8(fp)
81130714:	e0bffc15 	stw	r2,-16(fp)
81130718:	d0a08617 	ldw	r2,-32232(gp)
8113071c:	e0bffd15 	stw	r2,-12(fp)
81130720:	e0bffc17 	ldw	r2,-16(fp)
81130724:	e0bfff15 	stw	r2,-4(fp)
81130728:	e0bfff17 	ldw	r2,-4(fp)
8113072c:	1001703a 	wrctl	status,r2
81130730:	e0bffd17 	ldw	r2,-12(fp)
81130734:	e037883a 	mov	sp,fp
81130738:	df000017 	ldw	fp,0(sp)
8113073c:	dec00104 	addi	sp,sp,4
81130740:	f800283a 	ret

81130744 <OSTimeSet>:
81130744:	defffb04 	addi	sp,sp,-20
81130748:	de00012e 	bgeu	sp,et,81130750 <OSTimeSet+0xc>
8113074c:	003b68fa 	trap	3
81130750:	df000415 	stw	fp,16(sp)
81130754:	df000404 	addi	fp,sp,16
81130758:	e13fff15 	stw	r4,-4(fp)
8113075c:	e03ffc15 	stw	zero,-16(fp)
81130760:	0005303a 	rdctl	r2,status
81130764:	e0bffd15 	stw	r2,-12(fp)
81130768:	e0fffd17 	ldw	r3,-12(fp)
8113076c:	00bfff84 	movi	r2,-2
81130770:	1884703a 	and	r2,r3,r2
81130774:	1001703a 	wrctl	status,r2
81130778:	e0bffd17 	ldw	r2,-12(fp)
8113077c:	e0bffc15 	stw	r2,-16(fp)
81130780:	e0bfff17 	ldw	r2,-4(fp)
81130784:	d0a08615 	stw	r2,-32232(gp)
81130788:	e0bffc17 	ldw	r2,-16(fp)
8113078c:	e0bffe15 	stw	r2,-8(fp)
81130790:	e0bffe17 	ldw	r2,-8(fp)
81130794:	1001703a 	wrctl	status,r2
81130798:	0001883a 	nop
8113079c:	e037883a 	mov	sp,fp
811307a0:	df000017 	ldw	fp,0(sp)
811307a4:	dec00104 	addi	sp,sp,4
811307a8:	f800283a 	ret

811307ac <OSTmrCreate>:
811307ac:	defff804 	addi	sp,sp,-32
811307b0:	de00012e 	bgeu	sp,et,811307b8 <OSTmrCreate+0xc>
811307b4:	003b68fa 	trap	3
811307b8:	dfc00715 	stw	ra,28(sp)
811307bc:	df000615 	stw	fp,24(sp)
811307c0:	df000604 	addi	fp,sp,24
811307c4:	e13ffc15 	stw	r4,-16(fp)
811307c8:	e17ffd15 	stw	r5,-12(fp)
811307cc:	3005883a 	mov	r2,r6
811307d0:	e1ffff15 	stw	r7,-4(fp)
811307d4:	e0bffe05 	stb	r2,-8(fp)
811307d8:	e0800417 	ldw	r2,16(fp)
811307dc:	1000021e 	bne	r2,zero,811307e8 <OSTmrCreate+0x3c>
811307e0:	0005883a 	mov	r2,zero
811307e4:	00005d06 	br	8113095c <OSTmrCreate+0x1b0>
811307e8:	e0bffe03 	ldbu	r2,-8(fp)
811307ec:	10c00060 	cmpeqi	r3,r2,1
811307f0:	1800091e 	bne	r3,zero,81130818 <OSTmrCreate+0x6c>
811307f4:	108000a0 	cmpeqi	r2,r2,2
811307f8:	10000e26 	beq	r2,zero,81130834 <OSTmrCreate+0x88>
811307fc:	e0bffd17 	ldw	r2,-12(fp)
81130800:	1000111e 	bne	r2,zero,81130848 <OSTmrCreate+0x9c>
81130804:	e0800417 	ldw	r2,16(fp)
81130808:	00ffe0c4 	movi	r3,-125
8113080c:	10c00005 	stb	r3,0(r2)
81130810:	0005883a 	mov	r2,zero
81130814:	00005106 	br	8113095c <OSTmrCreate+0x1b0>
81130818:	e0bffc17 	ldw	r2,-16(fp)
8113081c:	10000c1e 	bne	r2,zero,81130850 <OSTmrCreate+0xa4>
81130820:	e0800417 	ldw	r2,16(fp)
81130824:	00ffe084 	movi	r3,-126
81130828:	10c00005 	stb	r3,0(r2)
8113082c:	0005883a 	mov	r2,zero
81130830:	00004a06 	br	8113095c <OSTmrCreate+0x1b0>
81130834:	e0800417 	ldw	r2,16(fp)
81130838:	00ffe104 	movi	r3,-124
8113083c:	10c00005 	stb	r3,0(r2)
81130840:	0005883a 	mov	r2,zero
81130844:	00004506 	br	8113095c <OSTmrCreate+0x1b0>
81130848:	0001883a 	nop
8113084c:	00000106 	br	81130854 <OSTmrCreate+0xa8>
81130850:	0001883a 	nop
81130854:	d0a08303 	ldbu	r2,-32244(gp)
81130858:	10803fcc 	andi	r2,r2,255
8113085c:	10000526 	beq	r2,zero,81130874 <OSTmrCreate+0xc8>
81130860:	e0800417 	ldw	r2,16(fp)
81130864:	00ffe2c4 	movi	r3,-117
81130868:	10c00005 	stb	r3,0(r2)
8113086c:	0005883a 	mov	r2,zero
81130870:	00003a06 	br	8113095c <OSTmrCreate+0x1b0>
81130874:	11317640 	call	81131764 <OSTmr_Lock>
81130878:	11312040 	call	81131204 <OSTmr_Alloc>
8113087c:	e0bffa15 	stw	r2,-24(fp)
81130880:	e0bffa17 	ldw	r2,-24(fp)
81130884:	1000061e 	bne	r2,zero,811308a0 <OSTmrCreate+0xf4>
81130888:	11317a80 	call	811317a8 <OSTmr_Unlock>
8113088c:	e0800417 	ldw	r2,16(fp)
81130890:	00ffe184 	movi	r3,-122
81130894:	10c00005 	stb	r3,0(r2)
81130898:	0005883a 	mov	r2,zero
8113089c:	00002f06 	br	8113095c <OSTmrCreate+0x1b0>
811308a0:	e0bffa17 	ldw	r2,-24(fp)
811308a4:	00c00044 	movi	r3,1
811308a8:	10c00c45 	stb	r3,49(r2)
811308ac:	e0bffa17 	ldw	r2,-24(fp)
811308b0:	e0fffc17 	ldw	r3,-16(fp)
811308b4:	10c00615 	stw	r3,24(r2)
811308b8:	e0bffa17 	ldw	r2,-24(fp)
811308bc:	e0fffd17 	ldw	r3,-12(fp)
811308c0:	10c00715 	stw	r3,28(r2)
811308c4:	e0bffa17 	ldw	r2,-24(fp)
811308c8:	e0fffe03 	ldbu	r3,-8(fp)
811308cc:	10c00c05 	stb	r3,48(r2)
811308d0:	e0bffa17 	ldw	r2,-24(fp)
811308d4:	e0ffff17 	ldw	r3,-4(fp)
811308d8:	10c00115 	stw	r3,4(r2)
811308dc:	e0bffa17 	ldw	r2,-24(fp)
811308e0:	e0c00217 	ldw	r3,8(fp)
811308e4:	10c00215 	stw	r3,8(r2)
811308e8:	e0800317 	ldw	r2,12(fp)
811308ec:	10001726 	beq	r2,zero,8113094c <OSTmrCreate+0x1a0>
811308f0:	e1000317 	ldw	r4,12(fp)
811308f4:	11297280 	call	81129728 <OS_StrLen>
811308f8:	e0bffb05 	stb	r2,-20(fp)
811308fc:	e0bffb03 	ldbu	r2,-20(fp)
81130900:	10800428 	cmpgeui	r2,r2,16
81130904:	1000061e 	bne	r2,zero,81130920 <OSTmrCreate+0x174>
81130908:	e0bffa17 	ldw	r2,-24(fp)
8113090c:	10800804 	addi	r2,r2,32
81130910:	e1400317 	ldw	r5,12(fp)
81130914:	1009883a 	mov	r4,r2
81130918:	11296ac0 	call	811296ac <OS_StrCopy>
8113091c:	00000b06 	br	8113094c <OSTmrCreate+0x1a0>
81130920:	e0bffa17 	ldw	r2,-24(fp)
81130924:	00c008c4 	movi	r3,35
81130928:	10c00805 	stb	r3,32(r2)
8113092c:	e0bffa17 	ldw	r2,-24(fp)
81130930:	10000845 	stb	zero,33(r2)
81130934:	e0800417 	ldw	r2,16(fp)
81130938:	00ffe304 	movi	r3,-116
8113093c:	10c00005 	stb	r3,0(r2)
81130940:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130944:	e0bffa17 	ldw	r2,-24(fp)
81130948:	00000406 	br	8113095c <OSTmrCreate+0x1b0>
8113094c:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130950:	e0800417 	ldw	r2,16(fp)
81130954:	10000005 	stb	zero,0(r2)
81130958:	e0bffa17 	ldw	r2,-24(fp)
8113095c:	e037883a 	mov	sp,fp
81130960:	dfc00117 	ldw	ra,4(sp)
81130964:	df000017 	ldw	fp,0(sp)
81130968:	dec00204 	addi	sp,sp,8
8113096c:	f800283a 	ret

81130970 <OSTmrDel>:
81130970:	defffc04 	addi	sp,sp,-16
81130974:	de00012e 	bgeu	sp,et,8113097c <OSTmrDel+0xc>
81130978:	003b68fa 	trap	3
8113097c:	dfc00315 	stw	ra,12(sp)
81130980:	df000215 	stw	fp,8(sp)
81130984:	df000204 	addi	fp,sp,8
81130988:	e13ffe15 	stw	r4,-8(fp)
8113098c:	e17fff15 	stw	r5,-4(fp)
81130990:	e0bfff17 	ldw	r2,-4(fp)
81130994:	1000021e 	bne	r2,zero,811309a0 <OSTmrDel+0x30>
81130998:	0005883a 	mov	r2,zero
8113099c:	00003f06 	br	81130a9c <OSTmrDel+0x12c>
811309a0:	e0bffe17 	ldw	r2,-8(fp)
811309a4:	1000051e 	bne	r2,zero,811309bc <OSTmrDel+0x4c>
811309a8:	e0bfff17 	ldw	r2,-4(fp)
811309ac:	00ffe284 	movi	r3,-118
811309b0:	10c00005 	stb	r3,0(r2)
811309b4:	0005883a 	mov	r2,zero
811309b8:	00003806 	br	81130a9c <OSTmrDel+0x12c>
811309bc:	e0bffe17 	ldw	r2,-8(fp)
811309c0:	10800003 	ldbu	r2,0(r2)
811309c4:	10803fcc 	andi	r2,r2,255
811309c8:	10801920 	cmpeqi	r2,r2,100
811309cc:	1000051e 	bne	r2,zero,811309e4 <OSTmrDel+0x74>
811309d0:	e0bfff17 	ldw	r2,-4(fp)
811309d4:	00ffe244 	movi	r3,-119
811309d8:	10c00005 	stb	r3,0(r2)
811309dc:	0005883a 	mov	r2,zero
811309e0:	00002e06 	br	81130a9c <OSTmrDel+0x12c>
811309e4:	d0a08303 	ldbu	r2,-32244(gp)
811309e8:	10803fcc 	andi	r2,r2,255
811309ec:	10000526 	beq	r2,zero,81130a04 <OSTmrDel+0x94>
811309f0:	e0bfff17 	ldw	r2,-4(fp)
811309f4:	00ffe2c4 	movi	r3,-117
811309f8:	10c00005 	stb	r3,0(r2)
811309fc:	0005883a 	mov	r2,zero
81130a00:	00002606 	br	81130a9c <OSTmrDel+0x12c>
81130a04:	11317640 	call	81131764 <OSTmr_Lock>
81130a08:	e0bffe17 	ldw	r2,-8(fp)
81130a0c:	10800c43 	ldbu	r2,49(r2)
81130a10:	10803fcc 	andi	r2,r2,255
81130a14:	10c000c8 	cmpgei	r3,r2,3
81130a18:	1800031e 	bne	r3,zero,81130a28 <OSTmrDel+0xb8>
81130a1c:	00800d16 	blt	zero,r2,81130a54 <OSTmrDel+0xe4>
81130a20:	10001326 	beq	r2,zero,81130a70 <OSTmrDel+0x100>
81130a24:	00001806 	br	81130a88 <OSTmrDel+0x118>
81130a28:	108000e0 	cmpeqi	r2,r2,3
81130a2c:	10001626 	beq	r2,zero,81130a88 <OSTmrDel+0x118>
81130a30:	e13ffe17 	ldw	r4,-8(fp)
81130a34:	11316680 	call	81131668 <OSTmr_Unlink>
81130a38:	e13ffe17 	ldw	r4,-8(fp)
81130a3c:	11312780 	call	81131278 <OSTmr_Free>
81130a40:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130a44:	e0bfff17 	ldw	r2,-4(fp)
81130a48:	10000005 	stb	zero,0(r2)
81130a4c:	00800044 	movi	r2,1
81130a50:	00001206 	br	81130a9c <OSTmrDel+0x12c>
81130a54:	e13ffe17 	ldw	r4,-8(fp)
81130a58:	11312780 	call	81131278 <OSTmr_Free>
81130a5c:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130a60:	e0bfff17 	ldw	r2,-4(fp)
81130a64:	10000005 	stb	zero,0(r2)
81130a68:	00800044 	movi	r2,1
81130a6c:	00000b06 	br	81130a9c <OSTmrDel+0x12c>
81130a70:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130a74:	e0bfff17 	ldw	r2,-4(fp)
81130a78:	00ffe1c4 	movi	r3,-121
81130a7c:	10c00005 	stb	r3,0(r2)
81130a80:	0005883a 	mov	r2,zero
81130a84:	00000506 	br	81130a9c <OSTmrDel+0x12c>
81130a88:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130a8c:	e0bfff17 	ldw	r2,-4(fp)
81130a90:	00ffe344 	movi	r3,-115
81130a94:	10c00005 	stb	r3,0(r2)
81130a98:	0005883a 	mov	r2,zero
81130a9c:	e037883a 	mov	sp,fp
81130aa0:	dfc00117 	ldw	ra,4(sp)
81130aa4:	df000017 	ldw	fp,0(sp)
81130aa8:	dec00204 	addi	sp,sp,8
81130aac:	f800283a 	ret

81130ab0 <OSTmrNameGet>:
81130ab0:	defffa04 	addi	sp,sp,-24
81130ab4:	de00012e 	bgeu	sp,et,81130abc <OSTmrNameGet+0xc>
81130ab8:	003b68fa 	trap	3
81130abc:	dfc00515 	stw	ra,20(sp)
81130ac0:	df000415 	stw	fp,16(sp)
81130ac4:	df000404 	addi	fp,sp,16
81130ac8:	e13ffd15 	stw	r4,-12(fp)
81130acc:	e17ffe15 	stw	r5,-8(fp)
81130ad0:	e1bfff15 	stw	r6,-4(fp)
81130ad4:	e0bfff17 	ldw	r2,-4(fp)
81130ad8:	1000021e 	bne	r2,zero,81130ae4 <OSTmrNameGet+0x34>
81130adc:	0005883a 	mov	r2,zero
81130ae0:	00003e06 	br	81130bdc <OSTmrNameGet+0x12c>
81130ae4:	e0bffe17 	ldw	r2,-8(fp)
81130ae8:	1000051e 	bne	r2,zero,81130b00 <OSTmrNameGet+0x50>
81130aec:	e0bfff17 	ldw	r2,-4(fp)
81130af0:	00ffe204 	movi	r3,-120
81130af4:	10c00005 	stb	r3,0(r2)
81130af8:	0005883a 	mov	r2,zero
81130afc:	00003706 	br	81130bdc <OSTmrNameGet+0x12c>
81130b00:	e0bffd17 	ldw	r2,-12(fp)
81130b04:	1000051e 	bne	r2,zero,81130b1c <OSTmrNameGet+0x6c>
81130b08:	e0bfff17 	ldw	r2,-4(fp)
81130b0c:	00ffe284 	movi	r3,-118
81130b10:	10c00005 	stb	r3,0(r2)
81130b14:	0005883a 	mov	r2,zero
81130b18:	00003006 	br	81130bdc <OSTmrNameGet+0x12c>
81130b1c:	e0bffd17 	ldw	r2,-12(fp)
81130b20:	10800003 	ldbu	r2,0(r2)
81130b24:	10803fcc 	andi	r2,r2,255
81130b28:	10801920 	cmpeqi	r2,r2,100
81130b2c:	1000051e 	bne	r2,zero,81130b44 <OSTmrNameGet+0x94>
81130b30:	e0bfff17 	ldw	r2,-4(fp)
81130b34:	00ffe244 	movi	r3,-119
81130b38:	10c00005 	stb	r3,0(r2)
81130b3c:	0005883a 	mov	r2,zero
81130b40:	00002606 	br	81130bdc <OSTmrNameGet+0x12c>
81130b44:	d0a08303 	ldbu	r2,-32244(gp)
81130b48:	10803fcc 	andi	r2,r2,255
81130b4c:	10000526 	beq	r2,zero,81130b64 <OSTmrNameGet+0xb4>
81130b50:	e0bfff17 	ldw	r2,-4(fp)
81130b54:	00c00444 	movi	r3,17
81130b58:	10c00005 	stb	r3,0(r2)
81130b5c:	0005883a 	mov	r2,zero
81130b60:	00001e06 	br	81130bdc <OSTmrNameGet+0x12c>
81130b64:	11317640 	call	81131764 <OSTmr_Lock>
81130b68:	e0bffd17 	ldw	r2,-12(fp)
81130b6c:	10800c43 	ldbu	r2,49(r2)
81130b70:	10803fcc 	andi	r2,r2,255
81130b74:	10000e26 	beq	r2,zero,81130bb0 <OSTmrNameGet+0x100>
81130b78:	10001316 	blt	r2,zero,81130bc8 <OSTmrNameGet+0x118>
81130b7c:	10800108 	cmpgei	r2,r2,4
81130b80:	1000111e 	bne	r2,zero,81130bc8 <OSTmrNameGet+0x118>
81130b84:	e0bffd17 	ldw	r2,-12(fp)
81130b88:	10800804 	addi	r2,r2,32
81130b8c:	100b883a 	mov	r5,r2
81130b90:	e13ffe17 	ldw	r4,-8(fp)
81130b94:	11296ac0 	call	811296ac <OS_StrCopy>
81130b98:	e0bffc05 	stb	r2,-16(fp)
81130b9c:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130ba0:	e0bfff17 	ldw	r2,-4(fp)
81130ba4:	10000005 	stb	zero,0(r2)
81130ba8:	e0bffc03 	ldbu	r2,-16(fp)
81130bac:	00000b06 	br	81130bdc <OSTmrNameGet+0x12c>
81130bb0:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130bb4:	e0bfff17 	ldw	r2,-4(fp)
81130bb8:	00ffe1c4 	movi	r3,-121
81130bbc:	10c00005 	stb	r3,0(r2)
81130bc0:	0005883a 	mov	r2,zero
81130bc4:	00000506 	br	81130bdc <OSTmrNameGet+0x12c>
81130bc8:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130bcc:	e0bfff17 	ldw	r2,-4(fp)
81130bd0:	00ffe344 	movi	r3,-115
81130bd4:	10c00005 	stb	r3,0(r2)
81130bd8:	0005883a 	mov	r2,zero
81130bdc:	e037883a 	mov	sp,fp
81130be0:	dfc00117 	ldw	ra,4(sp)
81130be4:	df000017 	ldw	fp,0(sp)
81130be8:	dec00204 	addi	sp,sp,8
81130bec:	f800283a 	ret

81130bf0 <OSTmrRemainGet>:
81130bf0:	defffb04 	addi	sp,sp,-20
81130bf4:	de00012e 	bgeu	sp,et,81130bfc <OSTmrRemainGet+0xc>
81130bf8:	003b68fa 	trap	3
81130bfc:	dfc00415 	stw	ra,16(sp)
81130c00:	df000315 	stw	fp,12(sp)
81130c04:	df000304 	addi	fp,sp,12
81130c08:	e13ffe15 	stw	r4,-8(fp)
81130c0c:	e17fff15 	stw	r5,-4(fp)
81130c10:	e0bfff17 	ldw	r2,-4(fp)
81130c14:	1000021e 	bne	r2,zero,81130c20 <OSTmrRemainGet+0x30>
81130c18:	0005883a 	mov	r2,zero
81130c1c:	00005d06 	br	81130d94 <OSTmrRemainGet+0x1a4>
81130c20:	e0bffe17 	ldw	r2,-8(fp)
81130c24:	1000051e 	bne	r2,zero,81130c3c <OSTmrRemainGet+0x4c>
81130c28:	e0bfff17 	ldw	r2,-4(fp)
81130c2c:	00ffe284 	movi	r3,-118
81130c30:	10c00005 	stb	r3,0(r2)
81130c34:	0005883a 	mov	r2,zero
81130c38:	00005606 	br	81130d94 <OSTmrRemainGet+0x1a4>
81130c3c:	e0bffe17 	ldw	r2,-8(fp)
81130c40:	10800003 	ldbu	r2,0(r2)
81130c44:	10803fcc 	andi	r2,r2,255
81130c48:	10801920 	cmpeqi	r2,r2,100
81130c4c:	1000051e 	bne	r2,zero,81130c64 <OSTmrRemainGet+0x74>
81130c50:	e0bfff17 	ldw	r2,-4(fp)
81130c54:	00ffe244 	movi	r3,-119
81130c58:	10c00005 	stb	r3,0(r2)
81130c5c:	0005883a 	mov	r2,zero
81130c60:	00004c06 	br	81130d94 <OSTmrRemainGet+0x1a4>
81130c64:	d0a08303 	ldbu	r2,-32244(gp)
81130c68:	10803fcc 	andi	r2,r2,255
81130c6c:	10000526 	beq	r2,zero,81130c84 <OSTmrRemainGet+0x94>
81130c70:	e0bfff17 	ldw	r2,-4(fp)
81130c74:	00ffe2c4 	movi	r3,-117
81130c78:	10c00005 	stb	r3,0(r2)
81130c7c:	0005883a 	mov	r2,zero
81130c80:	00004406 	br	81130d94 <OSTmrRemainGet+0x1a4>
81130c84:	11317640 	call	81131764 <OSTmr_Lock>
81130c88:	e0bffe17 	ldw	r2,-8(fp)
81130c8c:	10800c43 	ldbu	r2,49(r2)
81130c90:	10803fcc 	andi	r2,r2,255
81130c94:	10c00060 	cmpeqi	r3,r2,1
81130c98:	1800121e 	bne	r3,zero,81130ce4 <OSTmrRemainGet+0xf4>
81130c9c:	10c00088 	cmpgei	r3,r2,2
81130ca0:	1800021e 	bne	r3,zero,81130cac <OSTmrRemainGet+0xbc>
81130ca4:	10003026 	beq	r2,zero,81130d68 <OSTmrRemainGet+0x178>
81130ca8:	00003506 	br	81130d80 <OSTmrRemainGet+0x190>
81130cac:	10c000a0 	cmpeqi	r3,r2,2
81130cb0:	1800281e 	bne	r3,zero,81130d54 <OSTmrRemainGet+0x164>
81130cb4:	108000e0 	cmpeqi	r2,r2,3
81130cb8:	10003126 	beq	r2,zero,81130d80 <OSTmrRemainGet+0x190>
81130cbc:	e0bffe17 	ldw	r2,-8(fp)
81130cc0:	10c00517 	ldw	r3,20(r2)
81130cc4:	d0a08517 	ldw	r2,-32236(gp)
81130cc8:	1885c83a 	sub	r2,r3,r2
81130ccc:	e0bffd15 	stw	r2,-12(fp)
81130cd0:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130cd4:	e0bfff17 	ldw	r2,-4(fp)
81130cd8:	10000005 	stb	zero,0(r2)
81130cdc:	e0bffd17 	ldw	r2,-12(fp)
81130ce0:	00002c06 	br	81130d94 <OSTmrRemainGet+0x1a4>
81130ce4:	e0bffe17 	ldw	r2,-8(fp)
81130ce8:	10800c03 	ldbu	r2,48(r2)
81130cec:	10803fcc 	andi	r2,r2,255
81130cf0:	108000a0 	cmpeqi	r2,r2,2
81130cf4:	10000e26 	beq	r2,zero,81130d30 <OSTmrRemainGet+0x140>
81130cf8:	e0bffe17 	ldw	r2,-8(fp)
81130cfc:	10800617 	ldw	r2,24(r2)
81130d00:	1000041e 	bne	r2,zero,81130d14 <OSTmrRemainGet+0x124>
81130d04:	e0bffe17 	ldw	r2,-8(fp)
81130d08:	10800717 	ldw	r2,28(r2)
81130d0c:	e0bffd15 	stw	r2,-12(fp)
81130d10:	00000306 	br	81130d20 <OSTmrRemainGet+0x130>
81130d14:	e0bffe17 	ldw	r2,-8(fp)
81130d18:	10800617 	ldw	r2,24(r2)
81130d1c:	e0bffd15 	stw	r2,-12(fp)
81130d20:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130d24:	e0bfff17 	ldw	r2,-4(fp)
81130d28:	10000005 	stb	zero,0(r2)
81130d2c:	00000706 	br	81130d4c <OSTmrRemainGet+0x15c>
81130d30:	e0bffe17 	ldw	r2,-8(fp)
81130d34:	10800617 	ldw	r2,24(r2)
81130d38:	e0bffd15 	stw	r2,-12(fp)
81130d3c:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130d40:	e0bfff17 	ldw	r2,-4(fp)
81130d44:	10000005 	stb	zero,0(r2)
81130d48:	0001883a 	nop
81130d4c:	e0bffd17 	ldw	r2,-12(fp)
81130d50:	00001006 	br	81130d94 <OSTmrRemainGet+0x1a4>
81130d54:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130d58:	e0bfff17 	ldw	r2,-4(fp)
81130d5c:	10000005 	stb	zero,0(r2)
81130d60:	0005883a 	mov	r2,zero
81130d64:	00000b06 	br	81130d94 <OSTmrRemainGet+0x1a4>
81130d68:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130d6c:	e0bfff17 	ldw	r2,-4(fp)
81130d70:	00ffe1c4 	movi	r3,-121
81130d74:	10c00005 	stb	r3,0(r2)
81130d78:	0005883a 	mov	r2,zero
81130d7c:	00000506 	br	81130d94 <OSTmrRemainGet+0x1a4>
81130d80:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130d84:	e0bfff17 	ldw	r2,-4(fp)
81130d88:	00ffe344 	movi	r3,-115
81130d8c:	10c00005 	stb	r3,0(r2)
81130d90:	0005883a 	mov	r2,zero
81130d94:	e037883a 	mov	sp,fp
81130d98:	dfc00117 	ldw	ra,4(sp)
81130d9c:	df000017 	ldw	fp,0(sp)
81130da0:	dec00204 	addi	sp,sp,8
81130da4:	f800283a 	ret

81130da8 <OSTmrStateGet>:
81130da8:	defffb04 	addi	sp,sp,-20
81130dac:	de00012e 	bgeu	sp,et,81130db4 <OSTmrStateGet+0xc>
81130db0:	003b68fa 	trap	3
81130db4:	dfc00415 	stw	ra,16(sp)
81130db8:	df000315 	stw	fp,12(sp)
81130dbc:	df000304 	addi	fp,sp,12
81130dc0:	e13ffe15 	stw	r4,-8(fp)
81130dc4:	e17fff15 	stw	r5,-4(fp)
81130dc8:	e0bfff17 	ldw	r2,-4(fp)
81130dcc:	1000021e 	bne	r2,zero,81130dd8 <OSTmrStateGet+0x30>
81130dd0:	0005883a 	mov	r2,zero
81130dd4:	00002a06 	br	81130e80 <OSTmrStateGet+0xd8>
81130dd8:	e0bffe17 	ldw	r2,-8(fp)
81130ddc:	1000051e 	bne	r2,zero,81130df4 <OSTmrStateGet+0x4c>
81130de0:	e0bfff17 	ldw	r2,-4(fp)
81130de4:	00ffe284 	movi	r3,-118
81130de8:	10c00005 	stb	r3,0(r2)
81130dec:	0005883a 	mov	r2,zero
81130df0:	00002306 	br	81130e80 <OSTmrStateGet+0xd8>
81130df4:	e0bffe17 	ldw	r2,-8(fp)
81130df8:	10800003 	ldbu	r2,0(r2)
81130dfc:	10803fcc 	andi	r2,r2,255
81130e00:	10801920 	cmpeqi	r2,r2,100
81130e04:	1000051e 	bne	r2,zero,81130e1c <OSTmrStateGet+0x74>
81130e08:	e0bfff17 	ldw	r2,-4(fp)
81130e0c:	00ffe244 	movi	r3,-119
81130e10:	10c00005 	stb	r3,0(r2)
81130e14:	0005883a 	mov	r2,zero
81130e18:	00001906 	br	81130e80 <OSTmrStateGet+0xd8>
81130e1c:	d0a08303 	ldbu	r2,-32244(gp)
81130e20:	10803fcc 	andi	r2,r2,255
81130e24:	10000526 	beq	r2,zero,81130e3c <OSTmrStateGet+0x94>
81130e28:	e0bfff17 	ldw	r2,-4(fp)
81130e2c:	00ffe2c4 	movi	r3,-117
81130e30:	10c00005 	stb	r3,0(r2)
81130e34:	0005883a 	mov	r2,zero
81130e38:	00001106 	br	81130e80 <OSTmrStateGet+0xd8>
81130e3c:	11317640 	call	81131764 <OSTmr_Lock>
81130e40:	e0bffe17 	ldw	r2,-8(fp)
81130e44:	10800c43 	ldbu	r2,49(r2)
81130e48:	e0bffd05 	stb	r2,-12(fp)
81130e4c:	e0bffd03 	ldbu	r2,-12(fp)
81130e50:	1005883a 	mov	r2,r2
81130e54:	10800128 	cmpgeui	r2,r2,4
81130e58:	1000031e 	bne	r2,zero,81130e68 <OSTmrStateGet+0xc0>
81130e5c:	e0bfff17 	ldw	r2,-4(fp)
81130e60:	10000005 	stb	zero,0(r2)
81130e64:	00000406 	br	81130e78 <OSTmrStateGet+0xd0>
81130e68:	e0bfff17 	ldw	r2,-4(fp)
81130e6c:	00ffe344 	movi	r3,-115
81130e70:	10c00005 	stb	r3,0(r2)
81130e74:	0001883a 	nop
81130e78:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130e7c:	e0bffd03 	ldbu	r2,-12(fp)
81130e80:	e037883a 	mov	sp,fp
81130e84:	dfc00117 	ldw	ra,4(sp)
81130e88:	df000017 	ldw	fp,0(sp)
81130e8c:	dec00204 	addi	sp,sp,8
81130e90:	f800283a 	ret

81130e94 <OSTmrStart>:
81130e94:	defffc04 	addi	sp,sp,-16
81130e98:	de00012e 	bgeu	sp,et,81130ea0 <OSTmrStart+0xc>
81130e9c:	003b68fa 	trap	3
81130ea0:	dfc00315 	stw	ra,12(sp)
81130ea4:	df000215 	stw	fp,8(sp)
81130ea8:	df000204 	addi	fp,sp,8
81130eac:	e13ffe15 	stw	r4,-8(fp)
81130eb0:	e17fff15 	stw	r5,-4(fp)
81130eb4:	e0bfff17 	ldw	r2,-4(fp)
81130eb8:	1000021e 	bne	r2,zero,81130ec4 <OSTmrStart+0x30>
81130ebc:	0005883a 	mov	r2,zero
81130ec0:	00004106 	br	81130fc8 <OSTmrStart+0x134>
81130ec4:	e0bffe17 	ldw	r2,-8(fp)
81130ec8:	1000051e 	bne	r2,zero,81130ee0 <OSTmrStart+0x4c>
81130ecc:	e0bfff17 	ldw	r2,-4(fp)
81130ed0:	00ffe284 	movi	r3,-118
81130ed4:	10c00005 	stb	r3,0(r2)
81130ed8:	0005883a 	mov	r2,zero
81130edc:	00003a06 	br	81130fc8 <OSTmrStart+0x134>
81130ee0:	e0bffe17 	ldw	r2,-8(fp)
81130ee4:	10800003 	ldbu	r2,0(r2)
81130ee8:	10803fcc 	andi	r2,r2,255
81130eec:	10801920 	cmpeqi	r2,r2,100
81130ef0:	1000051e 	bne	r2,zero,81130f08 <OSTmrStart+0x74>
81130ef4:	e0bfff17 	ldw	r2,-4(fp)
81130ef8:	00ffe244 	movi	r3,-119
81130efc:	10c00005 	stb	r3,0(r2)
81130f00:	0005883a 	mov	r2,zero
81130f04:	00003006 	br	81130fc8 <OSTmrStart+0x134>
81130f08:	d0a08303 	ldbu	r2,-32244(gp)
81130f0c:	10803fcc 	andi	r2,r2,255
81130f10:	10000526 	beq	r2,zero,81130f28 <OSTmrStart+0x94>
81130f14:	e0bfff17 	ldw	r2,-4(fp)
81130f18:	00ffe2c4 	movi	r3,-117
81130f1c:	10c00005 	stb	r3,0(r2)
81130f20:	0005883a 	mov	r2,zero
81130f24:	00002806 	br	81130fc8 <OSTmrStart+0x134>
81130f28:	11317640 	call	81131764 <OSTmr_Lock>
81130f2c:	e0bffe17 	ldw	r2,-8(fp)
81130f30:	10800c43 	ldbu	r2,49(r2)
81130f34:	10803fcc 	andi	r2,r2,255
81130f38:	10c000c8 	cmpgei	r3,r2,3
81130f3c:	1800031e 	bne	r3,zero,81130f4c <OSTmrStart+0xb8>
81130f40:	00800e16 	blt	zero,r2,81130f7c <OSTmrStart+0xe8>
81130f44:	10001526 	beq	r2,zero,81130f9c <OSTmrStart+0x108>
81130f48:	00001a06 	br	81130fb4 <OSTmrStart+0x120>
81130f4c:	108000e0 	cmpeqi	r2,r2,3
81130f50:	10001826 	beq	r2,zero,81130fb4 <OSTmrStart+0x120>
81130f54:	e13ffe17 	ldw	r4,-8(fp)
81130f58:	11316680 	call	81131668 <OSTmr_Unlink>
81130f5c:	000b883a 	mov	r5,zero
81130f60:	e13ffe17 	ldw	r4,-8(fp)
81130f64:	11315180 	call	81131518 <OSTmr_Link>
81130f68:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130f6c:	e0bfff17 	ldw	r2,-4(fp)
81130f70:	10000005 	stb	zero,0(r2)
81130f74:	00800044 	movi	r2,1
81130f78:	00001306 	br	81130fc8 <OSTmrStart+0x134>
81130f7c:	000b883a 	mov	r5,zero
81130f80:	e13ffe17 	ldw	r4,-8(fp)
81130f84:	11315180 	call	81131518 <OSTmr_Link>
81130f88:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130f8c:	e0bfff17 	ldw	r2,-4(fp)
81130f90:	10000005 	stb	zero,0(r2)
81130f94:	00800044 	movi	r2,1
81130f98:	00000b06 	br	81130fc8 <OSTmrStart+0x134>
81130f9c:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130fa0:	e0bfff17 	ldw	r2,-4(fp)
81130fa4:	00ffe1c4 	movi	r3,-121
81130fa8:	10c00005 	stb	r3,0(r2)
81130fac:	0005883a 	mov	r2,zero
81130fb0:	00000506 	br	81130fc8 <OSTmrStart+0x134>
81130fb4:	11317a80 	call	811317a8 <OSTmr_Unlock>
81130fb8:	e0bfff17 	ldw	r2,-4(fp)
81130fbc:	00ffe344 	movi	r3,-115
81130fc0:	10c00005 	stb	r3,0(r2)
81130fc4:	0005883a 	mov	r2,zero
81130fc8:	e037883a 	mov	sp,fp
81130fcc:	dfc00117 	ldw	ra,4(sp)
81130fd0:	df000017 	ldw	fp,0(sp)
81130fd4:	dec00204 	addi	sp,sp,8
81130fd8:	f800283a 	ret

81130fdc <OSTmrStop>:
81130fdc:	defff904 	addi	sp,sp,-28
81130fe0:	de00012e 	bgeu	sp,et,81130fe8 <OSTmrStop+0xc>
81130fe4:	003b68fa 	trap	3
81130fe8:	dfc00615 	stw	ra,24(sp)
81130fec:	df000515 	stw	fp,20(sp)
81130ff0:	df000504 	addi	fp,sp,20
81130ff4:	e13ffc15 	stw	r4,-16(fp)
81130ff8:	2805883a 	mov	r2,r5
81130ffc:	e1bffe15 	stw	r6,-8(fp)
81131000:	e1ffff15 	stw	r7,-4(fp)
81131004:	e0bffd05 	stb	r2,-12(fp)
81131008:	e0bfff17 	ldw	r2,-4(fp)
8113100c:	1000021e 	bne	r2,zero,81131018 <OSTmrStop+0x3c>
81131010:	0005883a 	mov	r2,zero
81131014:	00006606 	br	811311b0 <OSTmrStop+0x1d4>
81131018:	e0bffc17 	ldw	r2,-16(fp)
8113101c:	1000051e 	bne	r2,zero,81131034 <OSTmrStop+0x58>
81131020:	e0bfff17 	ldw	r2,-4(fp)
81131024:	00ffe284 	movi	r3,-118
81131028:	10c00005 	stb	r3,0(r2)
8113102c:	0005883a 	mov	r2,zero
81131030:	00005f06 	br	811311b0 <OSTmrStop+0x1d4>
81131034:	e0bffc17 	ldw	r2,-16(fp)
81131038:	10800003 	ldbu	r2,0(r2)
8113103c:	10803fcc 	andi	r2,r2,255
81131040:	10801920 	cmpeqi	r2,r2,100
81131044:	1000051e 	bne	r2,zero,8113105c <OSTmrStop+0x80>
81131048:	e0bfff17 	ldw	r2,-4(fp)
8113104c:	00ffe244 	movi	r3,-119
81131050:	10c00005 	stb	r3,0(r2)
81131054:	0005883a 	mov	r2,zero
81131058:	00005506 	br	811311b0 <OSTmrStop+0x1d4>
8113105c:	d0a08303 	ldbu	r2,-32244(gp)
81131060:	10803fcc 	andi	r2,r2,255
81131064:	10000526 	beq	r2,zero,8113107c <OSTmrStop+0xa0>
81131068:	e0bfff17 	ldw	r2,-4(fp)
8113106c:	00ffe2c4 	movi	r3,-117
81131070:	10c00005 	stb	r3,0(r2)
81131074:	0005883a 	mov	r2,zero
81131078:	00004d06 	br	811311b0 <OSTmrStop+0x1d4>
8113107c:	11317640 	call	81131764 <OSTmr_Lock>
81131080:	e0bffc17 	ldw	r2,-16(fp)
81131084:	10800c43 	ldbu	r2,49(r2)
81131088:	10803fcc 	andi	r2,r2,255
8113108c:	10c000c8 	cmpgei	r3,r2,3
81131090:	1800031e 	bne	r3,zero,811310a0 <OSTmrStop+0xc4>
81131094:	00803516 	blt	zero,r2,8113116c <OSTmrStop+0x190>
81131098:	10003a26 	beq	r2,zero,81131184 <OSTmrStop+0x1a8>
8113109c:	00003f06 	br	8113119c <OSTmrStop+0x1c0>
811310a0:	108000e0 	cmpeqi	r2,r2,3
811310a4:	10003d26 	beq	r2,zero,8113119c <OSTmrStop+0x1c0>
811310a8:	e13ffc17 	ldw	r4,-16(fp)
811310ac:	11316680 	call	81131668 <OSTmr_Unlink>
811310b0:	e0bfff17 	ldw	r2,-4(fp)
811310b4:	10000005 	stb	zero,0(r2)
811310b8:	e0bffd03 	ldbu	r2,-12(fp)
811310bc:	10c000e0 	cmpeqi	r3,r2,3
811310c0:	1800041e 	bne	r3,zero,811310d4 <OSTmrStop+0xf8>
811310c4:	10c00120 	cmpeqi	r3,r2,4
811310c8:	1800121e 	bne	r3,zero,81131114 <OSTmrStop+0x138>
811310cc:	10002326 	beq	r2,zero,8113115c <OSTmrStop+0x180>
811310d0:	00001e06 	br	8113114c <OSTmrStop+0x170>
811310d4:	e0bffc17 	ldw	r2,-16(fp)
811310d8:	10800117 	ldw	r2,4(r2)
811310dc:	e0bffb15 	stw	r2,-20(fp)
811310e0:	e0bffb17 	ldw	r2,-20(fp)
811310e4:	10000726 	beq	r2,zero,81131104 <OSTmrStop+0x128>
811310e8:	e0bffc17 	ldw	r2,-16(fp)
811310ec:	10c00217 	ldw	r3,8(r2)
811310f0:	e0bffb17 	ldw	r2,-20(fp)
811310f4:	180b883a 	mov	r5,r3
811310f8:	e13ffc17 	ldw	r4,-16(fp)
811310fc:	103ee83a 	callr	r2
81131100:	00001706 	br	81131160 <OSTmrStop+0x184>
81131104:	e0bfff17 	ldw	r2,-4(fp)
81131108:	00ffe3c4 	movi	r3,-113
8113110c:	10c00005 	stb	r3,0(r2)
81131110:	00001306 	br	81131160 <OSTmrStop+0x184>
81131114:	e0bffc17 	ldw	r2,-16(fp)
81131118:	10800117 	ldw	r2,4(r2)
8113111c:	e0bffb15 	stw	r2,-20(fp)
81131120:	e0bffb17 	ldw	r2,-20(fp)
81131124:	10000526 	beq	r2,zero,8113113c <OSTmrStop+0x160>
81131128:	e0bffb17 	ldw	r2,-20(fp)
8113112c:	e17ffe17 	ldw	r5,-8(fp)
81131130:	e13ffc17 	ldw	r4,-16(fp)
81131134:	103ee83a 	callr	r2
81131138:	00000906 	br	81131160 <OSTmrStop+0x184>
8113113c:	e0bfff17 	ldw	r2,-4(fp)
81131140:	00ffe3c4 	movi	r3,-113
81131144:	10c00005 	stb	r3,0(r2)
81131148:	00000506 	br	81131160 <OSTmrStop+0x184>
8113114c:	e0bfff17 	ldw	r2,-4(fp)
81131150:	00ffe104 	movi	r3,-124
81131154:	10c00005 	stb	r3,0(r2)
81131158:	00000106 	br	81131160 <OSTmrStop+0x184>
8113115c:	0001883a 	nop
81131160:	11317a80 	call	811317a8 <OSTmr_Unlock>
81131164:	00800044 	movi	r2,1
81131168:	00001106 	br	811311b0 <OSTmrStop+0x1d4>
8113116c:	11317a80 	call	811317a8 <OSTmr_Unlock>
81131170:	e0bfff17 	ldw	r2,-4(fp)
81131174:	00ffe384 	movi	r3,-114
81131178:	10c00005 	stb	r3,0(r2)
8113117c:	00800044 	movi	r2,1
81131180:	00000b06 	br	811311b0 <OSTmrStop+0x1d4>
81131184:	11317a80 	call	811317a8 <OSTmr_Unlock>
81131188:	e0bfff17 	ldw	r2,-4(fp)
8113118c:	00ffe1c4 	movi	r3,-121
81131190:	10c00005 	stb	r3,0(r2)
81131194:	0005883a 	mov	r2,zero
81131198:	00000506 	br	811311b0 <OSTmrStop+0x1d4>
8113119c:	11317a80 	call	811317a8 <OSTmr_Unlock>
811311a0:	e0bfff17 	ldw	r2,-4(fp)
811311a4:	00ffe344 	movi	r3,-115
811311a8:	10c00005 	stb	r3,0(r2)
811311ac:	0005883a 	mov	r2,zero
811311b0:	e037883a 	mov	sp,fp
811311b4:	dfc00117 	ldw	ra,4(sp)
811311b8:	df000017 	ldw	fp,0(sp)
811311bc:	dec00204 	addi	sp,sp,8
811311c0:	f800283a 	ret

811311c4 <OSTmrSignal>:
811311c4:	defffd04 	addi	sp,sp,-12
811311c8:	de00012e 	bgeu	sp,et,811311d0 <OSTmrSignal+0xc>
811311cc:	003b68fa 	trap	3
811311d0:	dfc00215 	stw	ra,8(sp)
811311d4:	df000115 	stw	fp,4(sp)
811311d8:	df000104 	addi	fp,sp,4
811311dc:	d0a07217 	ldw	r2,-32312(gp)
811311e0:	1009883a 	mov	r4,r2
811311e4:	112e7900 	call	8112e790 <OSSemPost>
811311e8:	e0bfff05 	stb	r2,-4(fp)
811311ec:	e0bfff03 	ldbu	r2,-4(fp)
811311f0:	e037883a 	mov	sp,fp
811311f4:	dfc00117 	ldw	ra,4(sp)
811311f8:	df000017 	ldw	fp,0(sp)
811311fc:	dec00204 	addi	sp,sp,8
81131200:	f800283a 	ret

81131204 <OSTmr_Alloc>:
81131204:	defffe04 	addi	sp,sp,-8
81131208:	de00012e 	bgeu	sp,et,81131210 <OSTmr_Alloc+0xc>
8113120c:	003b68fa 	trap	3
81131210:	df000115 	stw	fp,4(sp)
81131214:	df000104 	addi	fp,sp,4
81131218:	d0a07017 	ldw	r2,-32320(gp)
8113121c:	1000021e 	bne	r2,zero,81131228 <OSTmr_Alloc+0x24>
81131220:	0005883a 	mov	r2,zero
81131224:	00001006 	br	81131268 <OSTmr_Alloc+0x64>
81131228:	d0a07017 	ldw	r2,-32320(gp)
8113122c:	e0bfff15 	stw	r2,-4(fp)
81131230:	e0bfff17 	ldw	r2,-4(fp)
81131234:	10800317 	ldw	r2,12(r2)
81131238:	d0a07015 	stw	r2,-32320(gp)
8113123c:	e0bfff17 	ldw	r2,-4(fp)
81131240:	10000315 	stw	zero,12(r2)
81131244:	e0bfff17 	ldw	r2,-4(fp)
81131248:	10000415 	stw	zero,16(r2)
8113124c:	d0a0750b 	ldhu	r2,-32300(gp)
81131250:	10800044 	addi	r2,r2,1
81131254:	d0a0750d 	sth	r2,-32300(gp)
81131258:	d0a0790b 	ldhu	r2,-32284(gp)
8113125c:	10bfffc4 	addi	r2,r2,-1
81131260:	d0a0790d 	sth	r2,-32284(gp)
81131264:	e0bfff17 	ldw	r2,-4(fp)
81131268:	e037883a 	mov	sp,fp
8113126c:	df000017 	ldw	fp,0(sp)
81131270:	dec00104 	addi	sp,sp,4
81131274:	f800283a 	ret

81131278 <OSTmr_Free>:
81131278:	defffe04 	addi	sp,sp,-8
8113127c:	de00012e 	bgeu	sp,et,81131284 <OSTmr_Free+0xc>
81131280:	003b68fa 	trap	3
81131284:	df000115 	stw	fp,4(sp)
81131288:	df000104 	addi	fp,sp,4
8113128c:	e13fff15 	stw	r4,-4(fp)
81131290:	e0bfff17 	ldw	r2,-4(fp)
81131294:	10000c45 	stb	zero,49(r2)
81131298:	e0bfff17 	ldw	r2,-4(fp)
8113129c:	10000c05 	stb	zero,48(r2)
811312a0:	e0bfff17 	ldw	r2,-4(fp)
811312a4:	10000715 	stw	zero,28(r2)
811312a8:	e0bfff17 	ldw	r2,-4(fp)
811312ac:	10000515 	stw	zero,20(r2)
811312b0:	e0bfff17 	ldw	r2,-4(fp)
811312b4:	10000115 	stw	zero,4(r2)
811312b8:	e0bfff17 	ldw	r2,-4(fp)
811312bc:	10000215 	stw	zero,8(r2)
811312c0:	e0bfff17 	ldw	r2,-4(fp)
811312c4:	00c00fc4 	movi	r3,63
811312c8:	10c00805 	stb	r3,32(r2)
811312cc:	e0bfff17 	ldw	r2,-4(fp)
811312d0:	10000845 	stb	zero,33(r2)
811312d4:	e0bfff17 	ldw	r2,-4(fp)
811312d8:	10000415 	stw	zero,16(r2)
811312dc:	d0e07017 	ldw	r3,-32320(gp)
811312e0:	e0bfff17 	ldw	r2,-4(fp)
811312e4:	10c00315 	stw	r3,12(r2)
811312e8:	e0bfff17 	ldw	r2,-4(fp)
811312ec:	d0a07015 	stw	r2,-32320(gp)
811312f0:	d0a0750b 	ldhu	r2,-32300(gp)
811312f4:	10bfffc4 	addi	r2,r2,-1
811312f8:	d0a0750d 	sth	r2,-32300(gp)
811312fc:	d0a0790b 	ldhu	r2,-32284(gp)
81131300:	10800044 	addi	r2,r2,1
81131304:	d0a0790d 	sth	r2,-32284(gp)
81131308:	0001883a 	nop
8113130c:	e037883a 	mov	sp,fp
81131310:	df000017 	ldw	fp,0(sp)
81131314:	dec00104 	addi	sp,sp,4
81131318:	f800283a 	ret

8113131c <OSTmr_Init>:
8113131c:	defffa04 	addi	sp,sp,-24
81131320:	de00012e 	bgeu	sp,et,81131328 <OSTmr_Init+0xc>
81131324:	003b68fa 	trap	3
81131328:	dfc00515 	stw	ra,20(sp)
8113132c:	df000415 	stw	fp,16(sp)
81131330:	df000404 	addi	fp,sp,16
81131334:	01406804 	movi	r5,416
81131338:	01204574 	movhi	r4,33045
8113133c:	213cc904 	addi	r4,r4,-3292
81131340:	112948c0 	call	8112948c <OS_MemClr>
81131344:	01400404 	movi	r5,16
81131348:	01204574 	movhi	r4,33045
8113134c:	213be904 	addi	r4,r4,-4188
81131350:	112948c0 	call	8112948c <OS_MemClr>
81131354:	00a04574 	movhi	r2,33045
81131358:	10bcc904 	addi	r2,r2,-3292
8113135c:	e0bffd15 	stw	r2,-12(fp)
81131360:	00a04574 	movhi	r2,33045
81131364:	10bcd604 	addi	r2,r2,-3240
81131368:	e0bffe15 	stw	r2,-8(fp)
8113136c:	e03ffc0d 	sth	zero,-16(fp)
81131370:	00001606 	br	811313cc <OSTmr_Init+0xb0>
81131374:	e0bffd17 	ldw	r2,-12(fp)
81131378:	00c01904 	movi	r3,100
8113137c:	10c00005 	stb	r3,0(r2)
81131380:	e0bffd17 	ldw	r2,-12(fp)
81131384:	10000c45 	stb	zero,49(r2)
81131388:	e0bffd17 	ldw	r2,-12(fp)
8113138c:	e0fffe17 	ldw	r3,-8(fp)
81131390:	10c00315 	stw	r3,12(r2)
81131394:	e0bffd17 	ldw	r2,-12(fp)
81131398:	00c00fc4 	movi	r3,63
8113139c:	10c00805 	stb	r3,32(r2)
811313a0:	e0bffd17 	ldw	r2,-12(fp)
811313a4:	10000845 	stb	zero,33(r2)
811313a8:	e0bffd17 	ldw	r2,-12(fp)
811313ac:	10800d04 	addi	r2,r2,52
811313b0:	e0bffd15 	stw	r2,-12(fp)
811313b4:	e0bffe17 	ldw	r2,-8(fp)
811313b8:	10800d04 	addi	r2,r2,52
811313bc:	e0bffe15 	stw	r2,-8(fp)
811313c0:	e0bffc0b 	ldhu	r2,-16(fp)
811313c4:	10800044 	addi	r2,r2,1
811313c8:	e0bffc0d 	sth	r2,-16(fp)
811313cc:	e0bffc0b 	ldhu	r2,-16(fp)
811313d0:	108001f0 	cmpltui	r2,r2,7
811313d4:	103fe71e 	bne	r2,zero,81131374 <__reset+0xfb111374>
811313d8:	e0bffd17 	ldw	r2,-12(fp)
811313dc:	00c01904 	movi	r3,100
811313e0:	10c00005 	stb	r3,0(r2)
811313e4:	e0bffd17 	ldw	r2,-12(fp)
811313e8:	10000c45 	stb	zero,49(r2)
811313ec:	e0bffd17 	ldw	r2,-12(fp)
811313f0:	10000315 	stw	zero,12(r2)
811313f4:	e0bffd17 	ldw	r2,-12(fp)
811313f8:	00c00fc4 	movi	r3,63
811313fc:	10c00805 	stb	r3,32(r2)
81131400:	e0bffd17 	ldw	r2,-12(fp)
81131404:	10000845 	stb	zero,33(r2)
81131408:	d0208515 	stw	zero,-32236(gp)
8113140c:	d020750d 	sth	zero,-32300(gp)
81131410:	00800204 	movi	r2,8
81131414:	d0a0790d 	sth	r2,-32284(gp)
81131418:	00a04574 	movhi	r2,33045
8113141c:	10bcc904 	addi	r2,r2,-3292
81131420:	d0a07015 	stw	r2,-32320(gp)
81131424:	01000044 	movi	r4,1
81131428:	112e0e00 	call	8112e0e0 <OSSemCreate>
8113142c:	d0a08715 	stw	r2,-32228(gp)
81131430:	0009883a 	mov	r4,zero
81131434:	112e0e00 	call	8112e0e0 <OSSemCreate>
81131438:	d0a07215 	stw	r2,-32312(gp)
8113143c:	d0a08717 	ldw	r2,-32228(gp)
81131440:	e0ffff04 	addi	r3,fp,-4
81131444:	180d883a 	mov	r6,r3
81131448:	01604534 	movhi	r5,33044
8113144c:	2977ca04 	addi	r5,r5,-8408
81131450:	1009883a 	mov	r4,r2
81131454:	1127c640 	call	81127c64 <OSEventNameSet>
81131458:	d0a07217 	ldw	r2,-32312(gp)
8113145c:	e0ffff04 	addi	r3,fp,-4
81131460:	180d883a 	mov	r6,r3
81131464:	01604534 	movhi	r5,33044
81131468:	2977cf04 	addi	r5,r5,-8388
8113146c:	1009883a 	mov	r4,r2
81131470:	1127c640 	call	81127c64 <OSEventNameSet>
81131474:	11314900 	call	81131490 <OSTmr_InitTask>
81131478:	0001883a 	nop
8113147c:	e037883a 	mov	sp,fp
81131480:	dfc00117 	ldw	ra,4(sp)
81131484:	df000017 	ldw	fp,0(sp)
81131488:	dec00204 	addi	sp,sp,8
8113148c:	f800283a 	ret

81131490 <OSTmr_InitTask>:
81131490:	defff804 	addi	sp,sp,-32
81131494:	de00012e 	bgeu	sp,et,8113149c <OSTmr_InitTask+0xc>
81131498:	003b68fa 	trap	3
8113149c:	dfc00715 	stw	ra,28(sp)
811314a0:	df000615 	stw	fp,24(sp)
811314a4:	df000604 	addi	fp,sp,24
811314a8:	008000c4 	movi	r2,3
811314ac:	d8800415 	stw	r2,16(sp)
811314b0:	d8000315 	stw	zero,12(sp)
811314b4:	00808004 	movi	r2,512
811314b8:	d8800215 	stw	r2,8(sp)
811314bc:	00a04574 	movhi	r2,33045
811314c0:	1082b504 	addi	r2,r2,2772
811314c4:	d8800115 	stw	r2,4(sp)
811314c8:	00bfff54 	movui	r2,65533
811314cc:	d8800015 	stw	r2,0(sp)
811314d0:	01c00484 	movi	r7,18
811314d4:	01a04574 	movhi	r6,33045
811314d8:	3184b404 	addi	r6,r6,4816
811314dc:	000b883a 	mov	r5,zero
811314e0:	012044f4 	movhi	r4,33043
811314e4:	2105f904 	addi	r4,r4,6116
811314e8:	112f1740 	call	8112f174 <OSTaskCreateExt>
811314ec:	e1bfff04 	addi	r6,fp,-4
811314f0:	01604534 	movhi	r5,33044
811314f4:	2977d404 	addi	r5,r5,-8368
811314f8:	01000484 	movi	r4,18
811314fc:	112f9a40 	call	8112f9a4 <OSTaskNameSet>
81131500:	0001883a 	nop
81131504:	e037883a 	mov	sp,fp
81131508:	dfc00117 	ldw	ra,4(sp)
8113150c:	df000017 	ldw	fp,0(sp)
81131510:	dec00204 	addi	sp,sp,8
81131514:	f800283a 	ret

81131518 <OSTmr_Link>:
81131518:	defffa04 	addi	sp,sp,-24
8113151c:	de00012e 	bgeu	sp,et,81131524 <OSTmr_Link+0xc>
81131520:	003b68fa 	trap	3
81131524:	df000515 	stw	fp,20(sp)
81131528:	df000504 	addi	fp,sp,20
8113152c:	e13ffe15 	stw	r4,-8(fp)
81131530:	2805883a 	mov	r2,r5
81131534:	e0bfff05 	stb	r2,-4(fp)
81131538:	e0bffe17 	ldw	r2,-8(fp)
8113153c:	00c000c4 	movi	r3,3
81131540:	10c00c45 	stb	r3,49(r2)
81131544:	e0bfff03 	ldbu	r2,-4(fp)
81131548:	10800058 	cmpnei	r2,r2,1
8113154c:	1000071e 	bne	r2,zero,8113156c <OSTmr_Link+0x54>
81131550:	e0bffe17 	ldw	r2,-8(fp)
81131554:	10c00717 	ldw	r3,28(r2)
81131558:	d0a08517 	ldw	r2,-32236(gp)
8113155c:	1887883a 	add	r3,r3,r2
81131560:	e0bffe17 	ldw	r2,-8(fp)
81131564:	10c00515 	stw	r3,20(r2)
81131568:	00001006 	br	811315ac <OSTmr_Link+0x94>
8113156c:	e0bffe17 	ldw	r2,-8(fp)
81131570:	10800617 	ldw	r2,24(r2)
81131574:	1000071e 	bne	r2,zero,81131594 <OSTmr_Link+0x7c>
81131578:	e0bffe17 	ldw	r2,-8(fp)
8113157c:	10c00717 	ldw	r3,28(r2)
81131580:	d0a08517 	ldw	r2,-32236(gp)
81131584:	1887883a 	add	r3,r3,r2
81131588:	e0bffe17 	ldw	r2,-8(fp)
8113158c:	10c00515 	stw	r3,20(r2)
81131590:	00000606 	br	811315ac <OSTmr_Link+0x94>
81131594:	e0bffe17 	ldw	r2,-8(fp)
81131598:	10c00617 	ldw	r3,24(r2)
8113159c:	d0a08517 	ldw	r2,-32236(gp)
811315a0:	1887883a 	add	r3,r3,r2
811315a4:	e0bffe17 	ldw	r2,-8(fp)
811315a8:	10c00515 	stw	r3,20(r2)
811315ac:	e0bffe17 	ldw	r2,-8(fp)
811315b0:	10800517 	ldw	r2,20(r2)
811315b4:	1080004c 	andi	r2,r2,1
811315b8:	e0bffb0d 	sth	r2,-20(fp)
811315bc:	e0bffb0b 	ldhu	r2,-20(fp)
811315c0:	100690fa 	slli	r3,r2,3
811315c4:	00a04574 	movhi	r2,33045
811315c8:	10bbe904 	addi	r2,r2,-4188
811315cc:	1885883a 	add	r2,r3,r2
811315d0:	e0bffc15 	stw	r2,-16(fp)
811315d4:	e0bffc17 	ldw	r2,-16(fp)
811315d8:	10800017 	ldw	r2,0(r2)
811315dc:	1000091e 	bne	r2,zero,81131604 <OSTmr_Link+0xec>
811315e0:	e0bffc17 	ldw	r2,-16(fp)
811315e4:	e0fffe17 	ldw	r3,-8(fp)
811315e8:	10c00015 	stw	r3,0(r2)
811315ec:	e0bffe17 	ldw	r2,-8(fp)
811315f0:	10000315 	stw	zero,12(r2)
811315f4:	e0bffc17 	ldw	r2,-16(fp)
811315f8:	00c00044 	movi	r3,1
811315fc:	10c0010d 	sth	r3,4(r2)
81131600:	00001206 	br	8113164c <OSTmr_Link+0x134>
81131604:	e0bffc17 	ldw	r2,-16(fp)
81131608:	10800017 	ldw	r2,0(r2)
8113160c:	e0bffd15 	stw	r2,-12(fp)
81131610:	e0bffc17 	ldw	r2,-16(fp)
81131614:	e0fffe17 	ldw	r3,-8(fp)
81131618:	10c00015 	stw	r3,0(r2)
8113161c:	e0bffe17 	ldw	r2,-8(fp)
81131620:	e0fffd17 	ldw	r3,-12(fp)
81131624:	10c00315 	stw	r3,12(r2)
81131628:	e0bffd17 	ldw	r2,-12(fp)
8113162c:	e0fffe17 	ldw	r3,-8(fp)
81131630:	10c00415 	stw	r3,16(r2)
81131634:	e0bffc17 	ldw	r2,-16(fp)
81131638:	1080010b 	ldhu	r2,4(r2)
8113163c:	10800044 	addi	r2,r2,1
81131640:	1007883a 	mov	r3,r2
81131644:	e0bffc17 	ldw	r2,-16(fp)
81131648:	10c0010d 	sth	r3,4(r2)
8113164c:	e0bffe17 	ldw	r2,-8(fp)
81131650:	10000415 	stw	zero,16(r2)
81131654:	0001883a 	nop
81131658:	e037883a 	mov	sp,fp
8113165c:	df000017 	ldw	fp,0(sp)
81131660:	dec00104 	addi	sp,sp,4
81131664:	f800283a 	ret

81131668 <OSTmr_Unlink>:
81131668:	defffa04 	addi	sp,sp,-24
8113166c:	de00012e 	bgeu	sp,et,81131674 <OSTmr_Unlink+0xc>
81131670:	003b68fa 	trap	3
81131674:	df000515 	stw	fp,20(sp)
81131678:	df000504 	addi	fp,sp,20
8113167c:	e13fff15 	stw	r4,-4(fp)
81131680:	e0bfff17 	ldw	r2,-4(fp)
81131684:	10800517 	ldw	r2,20(r2)
81131688:	1080004c 	andi	r2,r2,1
8113168c:	e0bffb0d 	sth	r2,-20(fp)
81131690:	e0bffb0b 	ldhu	r2,-20(fp)
81131694:	100690fa 	slli	r3,r2,3
81131698:	00a04574 	movhi	r2,33045
8113169c:	10bbe904 	addi	r2,r2,-4188
811316a0:	1885883a 	add	r2,r3,r2
811316a4:	e0bffc15 	stw	r2,-16(fp)
811316a8:	e0bffc17 	ldw	r2,-16(fp)
811316ac:	10c00017 	ldw	r3,0(r2)
811316b0:	e0bfff17 	ldw	r2,-4(fp)
811316b4:	18800b1e 	bne	r3,r2,811316e4 <OSTmr_Unlink+0x7c>
811316b8:	e0bfff17 	ldw	r2,-4(fp)
811316bc:	10800317 	ldw	r2,12(r2)
811316c0:	e0bffd15 	stw	r2,-12(fp)
811316c4:	e0bffc17 	ldw	r2,-16(fp)
811316c8:	e0fffd17 	ldw	r3,-12(fp)
811316cc:	10c00015 	stw	r3,0(r2)
811316d0:	e0bffd17 	ldw	r2,-12(fp)
811316d4:	10001126 	beq	r2,zero,8113171c <OSTmr_Unlink+0xb4>
811316d8:	e0bffd17 	ldw	r2,-12(fp)
811316dc:	10000415 	stw	zero,16(r2)
811316e0:	00000e06 	br	8113171c <OSTmr_Unlink+0xb4>
811316e4:	e0bfff17 	ldw	r2,-4(fp)
811316e8:	10800417 	ldw	r2,16(r2)
811316ec:	e0bffd15 	stw	r2,-12(fp)
811316f0:	e0bfff17 	ldw	r2,-4(fp)
811316f4:	10800317 	ldw	r2,12(r2)
811316f8:	e0bffe15 	stw	r2,-8(fp)
811316fc:	e0bffd17 	ldw	r2,-12(fp)
81131700:	e0fffe17 	ldw	r3,-8(fp)
81131704:	10c00315 	stw	r3,12(r2)
81131708:	e0bffe17 	ldw	r2,-8(fp)
8113170c:	10000326 	beq	r2,zero,8113171c <OSTmr_Unlink+0xb4>
81131710:	e0bffe17 	ldw	r2,-8(fp)
81131714:	e0fffd17 	ldw	r3,-12(fp)
81131718:	10c00415 	stw	r3,16(r2)
8113171c:	e0bfff17 	ldw	r2,-4(fp)
81131720:	00c00044 	movi	r3,1
81131724:	10c00c45 	stb	r3,49(r2)
81131728:	e0bfff17 	ldw	r2,-4(fp)
8113172c:	10000315 	stw	zero,12(r2)
81131730:	e0bfff17 	ldw	r2,-4(fp)
81131734:	10000415 	stw	zero,16(r2)
81131738:	e0bffc17 	ldw	r2,-16(fp)
8113173c:	1080010b 	ldhu	r2,4(r2)
81131740:	10bfffc4 	addi	r2,r2,-1
81131744:	1007883a 	mov	r3,r2
81131748:	e0bffc17 	ldw	r2,-16(fp)
8113174c:	10c0010d 	sth	r3,4(r2)
81131750:	0001883a 	nop
81131754:	e037883a 	mov	sp,fp
81131758:	df000017 	ldw	fp,0(sp)
8113175c:	dec00104 	addi	sp,sp,4
81131760:	f800283a 	ret

81131764 <OSTmr_Lock>:
81131764:	defffd04 	addi	sp,sp,-12
81131768:	de00012e 	bgeu	sp,et,81131770 <OSTmr_Lock+0xc>
8113176c:	003b68fa 	trap	3
81131770:	dfc00215 	stw	ra,8(sp)
81131774:	df000115 	stw	fp,4(sp)
81131778:	df000104 	addi	fp,sp,4
8113177c:	d0a08717 	ldw	r2,-32228(gp)
81131780:	e1bfff04 	addi	r6,fp,-4
81131784:	000b883a 	mov	r5,zero
81131788:	1009883a 	mov	r4,r2
8113178c:	112e4080 	call	8112e408 <OSSemPend>
81131790:	0001883a 	nop
81131794:	e037883a 	mov	sp,fp
81131798:	dfc00117 	ldw	ra,4(sp)
8113179c:	df000017 	ldw	fp,0(sp)
811317a0:	dec00204 	addi	sp,sp,8
811317a4:	f800283a 	ret

811317a8 <OSTmr_Unlock>:
811317a8:	defffe04 	addi	sp,sp,-8
811317ac:	de00012e 	bgeu	sp,et,811317b4 <OSTmr_Unlock+0xc>
811317b0:	003b68fa 	trap	3
811317b4:	dfc00115 	stw	ra,4(sp)
811317b8:	df000015 	stw	fp,0(sp)
811317bc:	d839883a 	mov	fp,sp
811317c0:	d0a08717 	ldw	r2,-32228(gp)
811317c4:	1009883a 	mov	r4,r2
811317c8:	112e7900 	call	8112e790 <OSSemPost>
811317cc:	0001883a 	nop
811317d0:	e037883a 	mov	sp,fp
811317d4:	dfc00117 	ldw	ra,4(sp)
811317d8:	df000017 	ldw	fp,0(sp)
811317dc:	dec00204 	addi	sp,sp,8
811317e0:	f800283a 	ret

811317e4 <OSTmr_Task>:
811317e4:	defff704 	addi	sp,sp,-36
811317e8:	de00012e 	bgeu	sp,et,811317f0 <OSTmr_Task+0xc>
811317ec:	003b68fa 	trap	3
811317f0:	dfc00815 	stw	ra,32(sp)
811317f4:	df000715 	stw	fp,28(sp)
811317f8:	df000704 	addi	fp,sp,28
811317fc:	e13fff15 	stw	r4,-4(fp)
81131800:	d0a07217 	ldw	r2,-32312(gp)
81131804:	e0fffe04 	addi	r3,fp,-8
81131808:	180d883a 	mov	r6,r3
8113180c:	000b883a 	mov	r5,zero
81131810:	1009883a 	mov	r4,r2
81131814:	112e4080 	call	8112e408 <OSSemPend>
81131818:	11317640 	call	81131764 <OSTmr_Lock>
8113181c:	d0a08517 	ldw	r2,-32236(gp)
81131820:	10800044 	addi	r2,r2,1
81131824:	d0a08515 	stw	r2,-32236(gp)
81131828:	d0a08517 	ldw	r2,-32236(gp)
8113182c:	1080004c 	andi	r2,r2,1
81131830:	e0bffa0d 	sth	r2,-24(fp)
81131834:	e0bffa0b 	ldhu	r2,-24(fp)
81131838:	100690fa 	slli	r3,r2,3
8113183c:	00a04574 	movhi	r2,33045
81131840:	10bbe904 	addi	r2,r2,-4188
81131844:	1885883a 	add	r2,r3,r2
81131848:	e0bffb15 	stw	r2,-20(fp)
8113184c:	e0bffb17 	ldw	r2,-20(fp)
81131850:	10800017 	ldw	r2,0(r2)
81131854:	e0bff915 	stw	r2,-28(fp)
81131858:	00002206 	br	811318e4 <OSTmr_Task+0x100>
8113185c:	e0bff917 	ldw	r2,-28(fp)
81131860:	10800317 	ldw	r2,12(r2)
81131864:	e0bffc15 	stw	r2,-16(fp)
81131868:	e0bff917 	ldw	r2,-28(fp)
8113186c:	10c00517 	ldw	r3,20(r2)
81131870:	d0a08517 	ldw	r2,-32236(gp)
81131874:	1880191e 	bne	r3,r2,811318dc <OSTmr_Task+0xf8>
81131878:	e0bff917 	ldw	r2,-28(fp)
8113187c:	10800117 	ldw	r2,4(r2)
81131880:	e0bffd15 	stw	r2,-12(fp)
81131884:	e0bffd17 	ldw	r2,-12(fp)
81131888:	10000626 	beq	r2,zero,811318a4 <OSTmr_Task+0xc0>
8113188c:	e0bff917 	ldw	r2,-28(fp)
81131890:	10c00217 	ldw	r3,8(r2)
81131894:	e0bffd17 	ldw	r2,-12(fp)
81131898:	180b883a 	mov	r5,r3
8113189c:	e13ff917 	ldw	r4,-28(fp)
811318a0:	103ee83a 	callr	r2
811318a4:	e13ff917 	ldw	r4,-28(fp)
811318a8:	11316680 	call	81131668 <OSTmr_Unlink>
811318ac:	e0bff917 	ldw	r2,-28(fp)
811318b0:	10800c03 	ldbu	r2,48(r2)
811318b4:	10803fcc 	andi	r2,r2,255
811318b8:	10800098 	cmpnei	r2,r2,2
811318bc:	1000041e 	bne	r2,zero,811318d0 <OSTmr_Task+0xec>
811318c0:	01400044 	movi	r5,1
811318c4:	e13ff917 	ldw	r4,-28(fp)
811318c8:	11315180 	call	81131518 <OSTmr_Link>
811318cc:	00000306 	br	811318dc <OSTmr_Task+0xf8>
811318d0:	e0bff917 	ldw	r2,-28(fp)
811318d4:	00c00084 	movi	r3,2
811318d8:	10c00c45 	stb	r3,49(r2)
811318dc:	e0bffc17 	ldw	r2,-16(fp)
811318e0:	e0bff915 	stw	r2,-28(fp)
811318e4:	e0bff917 	ldw	r2,-28(fp)
811318e8:	103fdc1e 	bne	r2,zero,8113185c <__reset+0xfb11185c>
811318ec:	11317a80 	call	811317a8 <OSTmr_Unlock>
811318f0:	003fc306 	br	81131800 <__reset+0xfb111800>

811318f4 <alt_dev_reg>:
811318f4:	defffd04 	addi	sp,sp,-12
811318f8:	de00012e 	bgeu	sp,et,81131900 <alt_dev_reg+0xc>
811318fc:	003b68fa 	trap	3
81131900:	dfc00215 	stw	ra,8(sp)
81131904:	df000115 	stw	fp,4(sp)
81131908:	df000104 	addi	fp,sp,4
8113190c:	e13fff15 	stw	r4,-4(fp)
81131910:	d1600d04 	addi	r5,gp,-32716
81131914:	e13fff17 	ldw	r4,-4(fp)
81131918:	1139b000 	call	81139b00 <alt_dev_llist_insert>
8113191c:	e037883a 	mov	sp,fp
81131920:	dfc00117 	ldw	ra,4(sp)
81131924:	df000017 	ldw	fp,0(sp)
81131928:	dec00204 	addi	sp,sp,8
8113192c:	f800283a 	ret

81131930 <alt_irq_init>:
81131930:	defffd04 	addi	sp,sp,-12
81131934:	de00012e 	bgeu	sp,et,8113193c <alt_irq_init+0xc>
81131938:	003b68fa 	trap	3
8113193c:	dfc00215 	stw	ra,8(sp)
81131940:	df000115 	stw	fp,4(sp)
81131944:	df000104 	addi	fp,sp,4
81131948:	e13fff15 	stw	r4,-4(fp)
8113194c:	113a5980 	call	8113a598 <altera_nios2_gen2_irq_init>
81131950:	00800044 	movi	r2,1
81131954:	1001703a 	wrctl	status,r2
81131958:	0001883a 	nop
8113195c:	e037883a 	mov	sp,fp
81131960:	dfc00117 	ldw	ra,4(sp)
81131964:	df000017 	ldw	fp,0(sp)
81131968:	dec00204 	addi	sp,sp,8
8113196c:	f800283a 	ret

81131970 <alt_sys_init>:
81131970:	defffe04 	addi	sp,sp,-8
81131974:	de00012e 	bgeu	sp,et,8113197c <alt_sys_init+0xc>
81131978:	003b68fa 	trap	3
8113197c:	dfc00115 	stw	ra,4(sp)
81131980:	df000015 	stw	fp,0(sp)
81131984:	d839883a 	mov	fp,sp
81131988:	01c0fa04 	movi	r7,1000
8113198c:	01800304 	movi	r6,12
81131990:	000b883a 	mov	r5,zero
81131994:	01200034 	movhi	r4,32768
81131998:	21022004 	addi	r4,r4,2176
8113199c:	1136c340 	call	81136c34 <alt_avalon_timer_sc_init>
811319a0:	018002c4 	movi	r6,11
811319a4:	000b883a 	mov	r5,zero
811319a8:	01204534 	movhi	r4,33044
811319ac:	213b1604 	addi	r4,r4,-5032
811319b0:	1135fb40 	call	81135fb4 <altera_avalon_jtag_uart_init>
811319b4:	01204534 	movhi	r4,33044
811319b8:	213b0c04 	addi	r4,r4,-5072
811319bc:	11318f40 	call	811318f4 <alt_dev_reg>
811319c0:	0001883a 	nop
811319c4:	018003c4 	movi	r6,15
811319c8:	000b883a 	mov	r5,zero
811319cc:	01204534 	movhi	r4,33044
811319d0:	213f3104 	addi	r4,r4,-828
811319d4:	1136de00 	call	81136de0 <altera_avalon_uart_init>
811319d8:	01204534 	movhi	r4,33044
811319dc:	213f2704 	addi	r4,r4,-868
811319e0:	11318f40 	call	811318f4 <alt_dev_reg>
811319e4:	00a04534 	movhi	r2,33044
811319e8:	10bf5b04 	addi	r2,r2,-660
811319ec:	10c00717 	ldw	r3,28(r2)
811319f0:	00a04534 	movhi	r2,33044
811319f4:	10bf5b04 	addi	r2,r2,-660
811319f8:	10800817 	ldw	r2,32(r2)
811319fc:	100d883a 	mov	r6,r2
81131a00:	180b883a 	mov	r5,r3
81131a04:	01204534 	movhi	r4,33044
81131a08:	213f5b04 	addi	r4,r4,-660
81131a0c:	11396680 	call	81139668 <alt_msgdma_init>
81131a10:	00a04534 	movhi	r2,33044
81131a14:	10bf7404 	addi	r2,r2,-560
81131a18:	10c00717 	ldw	r3,28(r2)
81131a1c:	00a04534 	movhi	r2,33044
81131a20:	10bf7404 	addi	r2,r2,-560
81131a24:	10800817 	ldw	r2,32(r2)
81131a28:	100d883a 	mov	r6,r2
81131a2c:	180b883a 	mov	r5,r3
81131a30:	01204534 	movhi	r4,33044
81131a34:	213f7404 	addi	r4,r4,-560
81131a38:	11396680 	call	81139668 <alt_msgdma_init>
81131a3c:	01204534 	movhi	r4,33044
81131a40:	213f8d04 	addi	r4,r4,-460
81131a44:	11318f40 	call	811318f4 <alt_dev_reg>
81131a48:	0001883a 	nop
81131a4c:	e037883a 	mov	sp,fp
81131a50:	dfc00117 	ldw	ra,4(sp)
81131a54:	df000017 	ldw	fp,0(sp)
81131a58:	dec00204 	addi	sp,sp,8
81131a5c:	f800283a 	ret

81131a60 <Write_Sector_Data>:
81131a60:	defffa04 	addi	sp,sp,-24
81131a64:	de00012e 	bgeu	sp,et,81131a6c <Write_Sector_Data+0xc>
81131a68:	003b68fa 	trap	3
81131a6c:	dfc00515 	stw	ra,20(sp)
81131a70:	df000415 	stw	fp,16(sp)
81131a74:	df000404 	addi	fp,sp,16
81131a78:	e13ffe15 	stw	r4,-8(fp)
81131a7c:	e17fff15 	stw	r5,-4(fp)
81131a80:	e03ffc15 	stw	zero,-16(fp)
81131a84:	11348480 	call	81134848 <alt_up_sd_card_is_Present>
81131a88:	10001e26 	beq	r2,zero,81131b04 <Write_Sector_Data+0xa4>
81131a8c:	00803fc4 	movi	r2,255
81131a90:	e0bffd0d 	sth	r2,-12(fp)
81131a94:	d0a09117 	ldw	r2,-32188(gp)
81131a98:	e13ffe17 	ldw	r4,-8(fp)
81131a9c:	e0ffff17 	ldw	r3,-4(fp)
81131aa0:	20c7883a 	add	r3,r4,r3
81131aa4:	1806927a 	slli	r3,r3,9
81131aa8:	10c00035 	stwio	r3,0(r2)
81131aac:	d0a09017 	ldw	r2,-32192(gp)
81131ab0:	00c00604 	movi	r3,24
81131ab4:	10c0002d 	sthio	r3,0(r2)
81131ab8:	d0a08d17 	ldw	r2,-32204(gp)
81131abc:	1080002b 	ldhuio	r2,0(r2)
81131ac0:	10bfffcc 	andi	r2,r2,65535
81131ac4:	e0bffd0d 	sth	r2,-12(fp)
81131ac8:	e0bffd0b 	ldhu	r2,-12(fp)
81131acc:	10bfffcc 	andi	r2,r2,65535
81131ad0:	1080010c 	andi	r2,r2,4
81131ad4:	103ff81e 	bne	r2,zero,81131ab8 <__reset+0xfb111ab8>
81131ad8:	e0bffd0b 	ldhu	r2,-12(fp)
81131adc:	10bfffcc 	andi	r2,r2,65535
81131ae0:	1080040c 	andi	r2,r2,16
81131ae4:	1000071e 	bne	r2,zero,81131b04 <Write_Sector_Data+0xa4>
81131ae8:	00800044 	movi	r2,1
81131aec:	e0bffc15 	stw	r2,-16(fp)
81131af0:	d0209615 	stw	zero,-32168(gp)
81131af4:	e0fffe17 	ldw	r3,-8(fp)
81131af8:	e0bfff17 	ldw	r2,-4(fp)
81131afc:	1885883a 	add	r2,r3,r2
81131b00:	d0a09715 	stw	r2,-32164(gp)
81131b04:	e0bffc17 	ldw	r2,-16(fp)
81131b08:	e037883a 	mov	sp,fp
81131b0c:	dfc00117 	ldw	ra,4(sp)
81131b10:	df000017 	ldw	fp,0(sp)
81131b14:	dec00204 	addi	sp,sp,8
81131b18:	f800283a 	ret

81131b1c <Save_Modified_Sector>:
81131b1c:	defffd04 	addi	sp,sp,-12
81131b20:	de00012e 	bgeu	sp,et,81131b28 <Save_Modified_Sector+0xc>
81131b24:	003b68fa 	trap	3
81131b28:	dfc00215 	stw	ra,8(sp)
81131b2c:	df000115 	stw	fp,4(sp)
81131b30:	df000104 	addi	fp,sp,4
81131b34:	00800044 	movi	r2,1
81131b38:	e0bfff15 	stw	r2,-4(fp)
81131b3c:	d0a09617 	ldw	r2,-32168(gp)
81131b40:	10000526 	beq	r2,zero,81131b58 <Save_Modified_Sector+0x3c>
81131b44:	d0a09717 	ldw	r2,-32164(gp)
81131b48:	000b883a 	mov	r5,zero
81131b4c:	1009883a 	mov	r4,r2
81131b50:	1131a600 	call	81131a60 <Write_Sector_Data>
81131b54:	e0bfff15 	stw	r2,-4(fp)
81131b58:	e0bfff17 	ldw	r2,-4(fp)
81131b5c:	e037883a 	mov	sp,fp
81131b60:	dfc00117 	ldw	ra,4(sp)
81131b64:	df000017 	ldw	fp,0(sp)
81131b68:	dec00204 	addi	sp,sp,8
81131b6c:	f800283a 	ret

81131b70 <Read_Sector_Data>:
81131b70:	defffa04 	addi	sp,sp,-24
81131b74:	de00012e 	bgeu	sp,et,81131b7c <Read_Sector_Data+0xc>
81131b78:	003b68fa 	trap	3
81131b7c:	dfc00515 	stw	ra,20(sp)
81131b80:	df000415 	stw	fp,16(sp)
81131b84:	df000404 	addi	fp,sp,16
81131b88:	e13ffe15 	stw	r4,-8(fp)
81131b8c:	e17fff15 	stw	r5,-4(fp)
81131b90:	e03ffc15 	stw	zero,-16(fp)
81131b94:	11348480 	call	81134848 <alt_up_sd_card_is_Present>
81131b98:	10002726 	beq	r2,zero,81131c38 <Read_Sector_Data+0xc8>
81131b9c:	00803fc4 	movi	r2,255
81131ba0:	e0bffd0d 	sth	r2,-12(fp)
81131ba4:	d0a09617 	ldw	r2,-32168(gp)
81131ba8:	10000726 	beq	r2,zero,81131bc8 <Read_Sector_Data+0x58>
81131bac:	d0a09717 	ldw	r2,-32164(gp)
81131bb0:	000b883a 	mov	r5,zero
81131bb4:	1009883a 	mov	r4,r2
81131bb8:	1131a600 	call	81131a60 <Write_Sector_Data>
81131bbc:	1000021e 	bne	r2,zero,81131bc8 <Read_Sector_Data+0x58>
81131bc0:	0005883a 	mov	r2,zero
81131bc4:	00001d06 	br	81131c3c <Read_Sector_Data+0xcc>
81131bc8:	d0a09117 	ldw	r2,-32188(gp)
81131bcc:	e13ffe17 	ldw	r4,-8(fp)
81131bd0:	e0ffff17 	ldw	r3,-4(fp)
81131bd4:	20c7883a 	add	r3,r4,r3
81131bd8:	1806927a 	slli	r3,r3,9
81131bdc:	10c00035 	stwio	r3,0(r2)
81131be0:	d0a09017 	ldw	r2,-32192(gp)
81131be4:	00c00444 	movi	r3,17
81131be8:	10c0002d 	sthio	r3,0(r2)
81131bec:	d0a08d17 	ldw	r2,-32204(gp)
81131bf0:	1080002b 	ldhuio	r2,0(r2)
81131bf4:	10bfffcc 	andi	r2,r2,65535
81131bf8:	e0bffd0d 	sth	r2,-12(fp)
81131bfc:	e0bffd0b 	ldhu	r2,-12(fp)
81131c00:	10bfffcc 	andi	r2,r2,65535
81131c04:	1080010c 	andi	r2,r2,4
81131c08:	103ff81e 	bne	r2,zero,81131bec <__reset+0xfb111bec>
81131c0c:	e0bffd0b 	ldhu	r2,-12(fp)
81131c10:	10bfffcc 	andi	r2,r2,65535
81131c14:	1080040c 	andi	r2,r2,16
81131c18:	1000071e 	bne	r2,zero,81131c38 <Read_Sector_Data+0xc8>
81131c1c:	00800044 	movi	r2,1
81131c20:	e0bffc15 	stw	r2,-16(fp)
81131c24:	d0209615 	stw	zero,-32168(gp)
81131c28:	e0fffe17 	ldw	r3,-8(fp)
81131c2c:	e0bfff17 	ldw	r2,-4(fp)
81131c30:	1885883a 	add	r2,r3,r2
81131c34:	d0a09715 	stw	r2,-32164(gp)
81131c38:	e0bffc17 	ldw	r2,-16(fp)
81131c3c:	e037883a 	mov	sp,fp
81131c40:	dfc00117 	ldw	ra,4(sp)
81131c44:	df000017 	ldw	fp,0(sp)
81131c48:	dec00204 	addi	sp,sp,8
81131c4c:	f800283a 	ret

81131c50 <get_cluster_flag>:
81131c50:	defffb04 	addi	sp,sp,-20
81131c54:	de00012e 	bgeu	sp,et,81131c5c <get_cluster_flag+0xc>
81131c58:	003b68fa 	trap	3
81131c5c:	dfc00415 	stw	ra,16(sp)
81131c60:	df000315 	stw	fp,12(sp)
81131c64:	df000304 	addi	fp,sp,12
81131c68:	e13ffe15 	stw	r4,-8(fp)
81131c6c:	e17fff15 	stw	r5,-4(fp)
81131c70:	e0bffe17 	ldw	r2,-8(fp)
81131c74:	1004d23a 	srli	r2,r2,8
81131c78:	d0e09317 	ldw	r3,-32180(gp)
81131c7c:	10c5883a 	add	r2,r2,r3
81131c80:	e0bffd15 	stw	r2,-12(fp)
81131c84:	00a04574 	movhi	r2,33045
81131c88:	108d8504 	addi	r2,r2,13844
81131c8c:	10801117 	ldw	r2,68(r2)
81131c90:	e0fffd17 	ldw	r3,-12(fp)
81131c94:	1885883a 	add	r2,r3,r2
81131c98:	e0bffd15 	stw	r2,-12(fp)
81131c9c:	d0a09717 	ldw	r2,-32164(gp)
81131ca0:	e0fffd17 	ldw	r3,-12(fp)
81131ca4:	18800726 	beq	r3,r2,81131cc4 <get_cluster_flag+0x74>
81131ca8:	e0bffd17 	ldw	r2,-12(fp)
81131cac:	000b883a 	mov	r5,zero
81131cb0:	1009883a 	mov	r4,r2
81131cb4:	1131b700 	call	81131b70 <Read_Sector_Data>
81131cb8:	1000021e 	bne	r2,zero,81131cc4 <get_cluster_flag+0x74>
81131cbc:	0005883a 	mov	r2,zero
81131cc0:	00000d06 	br	81131cf8 <get_cluster_flag+0xa8>
81131cc4:	e0bffe17 	ldw	r2,-8(fp)
81131cc8:	10803fcc 	andi	r2,r2,255
81131ccc:	1085883a 	add	r2,r2,r2
81131cd0:	1007883a 	mov	r3,r2
81131cd4:	d0a09517 	ldw	r2,-32172(gp)
81131cd8:	10800a17 	ldw	r2,40(r2)
81131cdc:	1885883a 	add	r2,r3,r2
81131ce0:	1080002b 	ldhuio	r2,0(r2)
81131ce4:	10bfffcc 	andi	r2,r2,65535
81131ce8:	1007883a 	mov	r3,r2
81131cec:	e0bfff17 	ldw	r2,-4(fp)
81131cf0:	10c0000d 	sth	r3,0(r2)
81131cf4:	00800044 	movi	r2,1
81131cf8:	e037883a 	mov	sp,fp
81131cfc:	dfc00117 	ldw	ra,4(sp)
81131d00:	df000017 	ldw	fp,0(sp)
81131d04:	dec00204 	addi	sp,sp,8
81131d08:	f800283a 	ret

81131d0c <mark_cluster>:
81131d0c:	defffa04 	addi	sp,sp,-24
81131d10:	de00012e 	bgeu	sp,et,81131d18 <mark_cluster+0xc>
81131d14:	003b68fa 	trap	3
81131d18:	dfc00515 	stw	ra,20(sp)
81131d1c:	df000415 	stw	fp,16(sp)
81131d20:	df000404 	addi	fp,sp,16
81131d24:	e13ffd15 	stw	r4,-12(fp)
81131d28:	2805883a 	mov	r2,r5
81131d2c:	e1bfff15 	stw	r6,-4(fp)
81131d30:	e0bffe0d 	sth	r2,-8(fp)
81131d34:	e0bffd17 	ldw	r2,-12(fp)
81131d38:	1004d23a 	srli	r2,r2,8
81131d3c:	d0e09317 	ldw	r3,-32180(gp)
81131d40:	10c5883a 	add	r2,r2,r3
81131d44:	e0bffc15 	stw	r2,-16(fp)
81131d48:	e0bfff17 	ldw	r2,-4(fp)
81131d4c:	10000726 	beq	r2,zero,81131d6c <mark_cluster+0x60>
81131d50:	00a04574 	movhi	r2,33045
81131d54:	108d8504 	addi	r2,r2,13844
81131d58:	10801117 	ldw	r2,68(r2)
81131d5c:	e0fffc17 	ldw	r3,-16(fp)
81131d60:	1885883a 	add	r2,r3,r2
81131d64:	e0bffc15 	stw	r2,-16(fp)
81131d68:	00000606 	br	81131d84 <mark_cluster+0x78>
81131d6c:	00a04574 	movhi	r2,33045
81131d70:	108d8504 	addi	r2,r2,13844
81131d74:	10801217 	ldw	r2,72(r2)
81131d78:	e0fffc17 	ldw	r3,-16(fp)
81131d7c:	1885883a 	add	r2,r3,r2
81131d80:	e0bffc15 	stw	r2,-16(fp)
81131d84:	d0a09717 	ldw	r2,-32164(gp)
81131d88:	e0fffc17 	ldw	r3,-16(fp)
81131d8c:	18800726 	beq	r3,r2,81131dac <mark_cluster+0xa0>
81131d90:	e0bffc17 	ldw	r2,-16(fp)
81131d94:	000b883a 	mov	r5,zero
81131d98:	1009883a 	mov	r4,r2
81131d9c:	1131b700 	call	81131b70 <Read_Sector_Data>
81131da0:	1000021e 	bne	r2,zero,81131dac <mark_cluster+0xa0>
81131da4:	0005883a 	mov	r2,zero
81131da8:	00000d06 	br	81131de0 <mark_cluster+0xd4>
81131dac:	e0bffd17 	ldw	r2,-12(fp)
81131db0:	10803fcc 	andi	r2,r2,255
81131db4:	1085883a 	add	r2,r2,r2
81131db8:	1007883a 	mov	r3,r2
81131dbc:	d0a09517 	ldw	r2,-32172(gp)
81131dc0:	10800a17 	ldw	r2,40(r2)
81131dc4:	1885883a 	add	r2,r3,r2
81131dc8:	1007883a 	mov	r3,r2
81131dcc:	e0bffe0f 	ldh	r2,-8(fp)
81131dd0:	1880002d 	sthio	r2,0(r3)
81131dd4:	00800044 	movi	r2,1
81131dd8:	d0a09615 	stw	r2,-32168(gp)
81131ddc:	00800044 	movi	r2,1
81131de0:	e037883a 	mov	sp,fp
81131de4:	dfc00117 	ldw	ra,4(sp)
81131de8:	df000017 	ldw	fp,0(sp)
81131dec:	dec00204 	addi	sp,sp,8
81131df0:	f800283a 	ret

81131df4 <Check_for_Master_Boot_Record>:
81131df4:	defff704 	addi	sp,sp,-36
81131df8:	de00012e 	bgeu	sp,et,81131e00 <Check_for_Master_Boot_Record+0xc>
81131dfc:	003b68fa 	trap	3
81131e00:	dfc00815 	stw	ra,32(sp)
81131e04:	df000715 	stw	fp,28(sp)
81131e08:	df000704 	addi	fp,sp,28
81131e0c:	e03ff915 	stw	zero,-28(fp)
81131e10:	000b883a 	mov	r5,zero
81131e14:	0009883a 	mov	r4,zero
81131e18:	1131b700 	call	81131b70 <Read_Sector_Data>
81131e1c:	10005a26 	beq	r2,zero,81131f88 <Check_for_Master_Boot_Record+0x194>
81131e20:	d0a09517 	ldw	r2,-32172(gp)
81131e24:	10800a17 	ldw	r2,40(r2)
81131e28:	10807f84 	addi	r2,r2,510
81131e2c:	1080002b 	ldhuio	r2,0(r2)
81131e30:	10bfffcc 	andi	r2,r2,65535
81131e34:	10bfffcc 	andi	r2,r2,65535
81131e38:	10a0001c 	xori	r2,r2,32768
81131e3c:	10a00004 	addi	r2,r2,-32768
81131e40:	e0bffb15 	stw	r2,-20(fp)
81131e44:	e0bffb17 	ldw	r2,-20(fp)
81131e48:	10ffffcc 	andi	r3,r2,65535
81131e4c:	00aa9554 	movui	r2,43605
81131e50:	18804d1e 	bne	r3,r2,81131f88 <Check_for_Master_Boot_Record+0x194>
81131e54:	e03ffa15 	stw	zero,-24(fp)
81131e58:	00004806 	br	81131f7c <Check_for_Master_Boot_Record+0x188>
81131e5c:	e0bffa17 	ldw	r2,-24(fp)
81131e60:	1004913a 	slli	r2,r2,4
81131e64:	10806f84 	addi	r2,r2,446
81131e68:	e0bffc15 	stw	r2,-16(fp)
81131e6c:	d0a09517 	ldw	r2,-32172(gp)
81131e70:	10c00a17 	ldw	r3,40(r2)
81131e74:	e0bffc17 	ldw	r2,-16(fp)
81131e78:	1885883a 	add	r2,r3,r2
81131e7c:	10800104 	addi	r2,r2,4
81131e80:	10800023 	ldbuio	r2,0(r2)
81131e84:	10803fcc 	andi	r2,r2,255
81131e88:	e0bffd05 	stb	r2,-12(fp)
81131e8c:	e0bffd07 	ldb	r2,-12(fp)
81131e90:	10800060 	cmpeqi	r2,r2,1
81131e94:	1000091e 	bne	r2,zero,81131ebc <Check_for_Master_Boot_Record+0xc8>
81131e98:	e0bffd07 	ldb	r2,-12(fp)
81131e9c:	10800120 	cmpeqi	r2,r2,4
81131ea0:	1000061e 	bne	r2,zero,81131ebc <Check_for_Master_Boot_Record+0xc8>
81131ea4:	e0bffd07 	ldb	r2,-12(fp)
81131ea8:	108001a0 	cmpeqi	r2,r2,6
81131eac:	1000031e 	bne	r2,zero,81131ebc <Check_for_Master_Boot_Record+0xc8>
81131eb0:	e0bffd07 	ldb	r2,-12(fp)
81131eb4:	10800398 	cmpnei	r2,r2,14
81131eb8:	10002d1e 	bne	r2,zero,81131f70 <Check_for_Master_Boot_Record+0x17c>
81131ebc:	d0a09517 	ldw	r2,-32172(gp)
81131ec0:	10c00a17 	ldw	r3,40(r2)
81131ec4:	e0bffc17 	ldw	r2,-16(fp)
81131ec8:	1885883a 	add	r2,r3,r2
81131ecc:	10800284 	addi	r2,r2,10
81131ed0:	1080002b 	ldhuio	r2,0(r2)
81131ed4:	10bfffcc 	andi	r2,r2,65535
81131ed8:	1006943a 	slli	r3,r2,16
81131edc:	d0a09517 	ldw	r2,-32172(gp)
81131ee0:	11000a17 	ldw	r4,40(r2)
81131ee4:	e0bffc17 	ldw	r2,-16(fp)
81131ee8:	2085883a 	add	r2,r4,r2
81131eec:	10800204 	addi	r2,r2,8
81131ef0:	1080002b 	ldhuio	r2,0(r2)
81131ef4:	10bfffcc 	andi	r2,r2,65535
81131ef8:	10bfffcc 	andi	r2,r2,65535
81131efc:	1884b03a 	or	r2,r3,r2
81131f00:	e0bffe15 	stw	r2,-8(fp)
81131f04:	d0a09517 	ldw	r2,-32172(gp)
81131f08:	10c00a17 	ldw	r3,40(r2)
81131f0c:	e0bffc17 	ldw	r2,-16(fp)
81131f10:	1885883a 	add	r2,r3,r2
81131f14:	10800384 	addi	r2,r2,14
81131f18:	1080002b 	ldhuio	r2,0(r2)
81131f1c:	10bfffcc 	andi	r2,r2,65535
81131f20:	1006943a 	slli	r3,r2,16
81131f24:	d0a09517 	ldw	r2,-32172(gp)
81131f28:	11000a17 	ldw	r4,40(r2)
81131f2c:	e0bffc17 	ldw	r2,-16(fp)
81131f30:	2085883a 	add	r2,r4,r2
81131f34:	10800304 	addi	r2,r2,12
81131f38:	1080002b 	ldhuio	r2,0(r2)
81131f3c:	10bfffcc 	andi	r2,r2,65535
81131f40:	10bfffcc 	andi	r2,r2,65535
81131f44:	1884b03a 	or	r2,r3,r2
81131f48:	e0bfff15 	stw	r2,-4(fp)
81131f4c:	e0bfff17 	ldw	r2,-4(fp)
81131f50:	0080070e 	bge	zero,r2,81131f70 <Check_for_Master_Boot_Record+0x17c>
81131f54:	00800044 	movi	r2,1
81131f58:	e0bff915 	stw	r2,-28(fp)
81131f5c:	e0bfff17 	ldw	r2,-4(fp)
81131f60:	d0a09415 	stw	r2,-32176(gp)
81131f64:	e0bffe17 	ldw	r2,-8(fp)
81131f68:	d0a09315 	stw	r2,-32180(gp)
81131f6c:	00000606 	br	81131f88 <Check_for_Master_Boot_Record+0x194>
81131f70:	e0bffa17 	ldw	r2,-24(fp)
81131f74:	10800044 	addi	r2,r2,1
81131f78:	e0bffa15 	stw	r2,-24(fp)
81131f7c:	e0bffa17 	ldw	r2,-24(fp)
81131f80:	10800110 	cmplti	r2,r2,4
81131f84:	103fb51e 	bne	r2,zero,81131e5c <__reset+0xfb111e5c>
81131f88:	e0bff917 	ldw	r2,-28(fp)
81131f8c:	e037883a 	mov	sp,fp
81131f90:	dfc00117 	ldw	ra,4(sp)
81131f94:	df000017 	ldw	fp,0(sp)
81131f98:	dec00204 	addi	sp,sp,8
81131f9c:	f800283a 	ret

81131fa0 <Read_File_Record_At_Offset>:
81131fa0:	defff804 	addi	sp,sp,-32
81131fa4:	de00012e 	bgeu	sp,et,81131fac <Read_File_Record_At_Offset+0xc>
81131fa8:	003b68fa 	trap	3
81131fac:	dfc00715 	stw	ra,28(sp)
81131fb0:	df000615 	stw	fp,24(sp)
81131fb4:	df000604 	addi	fp,sp,24
81131fb8:	e13ffc15 	stw	r4,-16(fp)
81131fbc:	e17ffd15 	stw	r5,-12(fp)
81131fc0:	e1bffe15 	stw	r6,-8(fp)
81131fc4:	e1ffff15 	stw	r7,-4(fp)
81131fc8:	e03ffa15 	stw	zero,-24(fp)
81131fcc:	e0bffc17 	ldw	r2,-16(fp)
81131fd0:	108007cc 	andi	r2,r2,31
81131fd4:	10008d1e 	bne	r2,zero,8113220c <Read_File_Record_At_Offset+0x26c>
81131fd8:	11348480 	call	81134848 <alt_up_sd_card_is_Present>
81131fdc:	10008b26 	beq	r2,zero,8113220c <Read_File_Record_At_Offset+0x26c>
81131fe0:	d0a08c17 	ldw	r2,-32208(gp)
81131fe4:	10008926 	beq	r2,zero,8113220c <Read_File_Record_At_Offset+0x26c>
81131fe8:	e03ffb15 	stw	zero,-20(fp)
81131fec:	00001106 	br	81132034 <Read_File_Record_At_Offset+0x94>
81131ff0:	e0fffc17 	ldw	r3,-16(fp)
81131ff4:	e0bffb17 	ldw	r2,-20(fp)
81131ff8:	1885883a 	add	r2,r3,r2
81131ffc:	1007883a 	mov	r3,r2
81132000:	d0a09517 	ldw	r2,-32172(gp)
81132004:	10800a17 	ldw	r2,40(r2)
81132008:	1885883a 	add	r2,r3,r2
8113200c:	10800023 	ldbuio	r2,0(r2)
81132010:	10803fcc 	andi	r2,r2,255
81132014:	1009883a 	mov	r4,r2
81132018:	e0fffd17 	ldw	r3,-12(fp)
8113201c:	e0bffb17 	ldw	r2,-20(fp)
81132020:	1885883a 	add	r2,r3,r2
81132024:	11000005 	stb	r4,0(r2)
81132028:	e0bffb17 	ldw	r2,-20(fp)
8113202c:	10800044 	addi	r2,r2,1
81132030:	e0bffb15 	stw	r2,-20(fp)
81132034:	e0bffb17 	ldw	r2,-20(fp)
81132038:	10800210 	cmplti	r2,r2,8
8113203c:	103fec1e 	bne	r2,zero,81131ff0 <__reset+0xfb111ff0>
81132040:	e03ffb15 	stw	zero,-20(fp)
81132044:	00001306 	br	81132094 <Read_File_Record_At_Offset+0xf4>
81132048:	e0fffc17 	ldw	r3,-16(fp)
8113204c:	e0bffb17 	ldw	r2,-20(fp)
81132050:	1885883a 	add	r2,r3,r2
81132054:	1007883a 	mov	r3,r2
81132058:	d0a09517 	ldw	r2,-32172(gp)
8113205c:	10800a17 	ldw	r2,40(r2)
81132060:	1885883a 	add	r2,r3,r2
81132064:	10800204 	addi	r2,r2,8
81132068:	10800023 	ldbuio	r2,0(r2)
8113206c:	10803fcc 	andi	r2,r2,255
81132070:	1009883a 	mov	r4,r2
81132074:	e0fffd17 	ldw	r3,-12(fp)
81132078:	e0bffb17 	ldw	r2,-20(fp)
8113207c:	1885883a 	add	r2,r3,r2
81132080:	10800204 	addi	r2,r2,8
81132084:	11000005 	stb	r4,0(r2)
81132088:	e0bffb17 	ldw	r2,-20(fp)
8113208c:	10800044 	addi	r2,r2,1
81132090:	e0bffb15 	stw	r2,-20(fp)
81132094:	e0bffb17 	ldw	r2,-20(fp)
81132098:	108000d0 	cmplti	r2,r2,3
8113209c:	103fea1e 	bne	r2,zero,81132048 <__reset+0xfb112048>
811320a0:	d0a09517 	ldw	r2,-32172(gp)
811320a4:	10c00a17 	ldw	r3,40(r2)
811320a8:	e0bffc17 	ldw	r2,-16(fp)
811320ac:	1885883a 	add	r2,r3,r2
811320b0:	108002c4 	addi	r2,r2,11
811320b4:	10800023 	ldbuio	r2,0(r2)
811320b8:	10803fcc 	andi	r2,r2,255
811320bc:	1007883a 	mov	r3,r2
811320c0:	e0bffd17 	ldw	r2,-12(fp)
811320c4:	10c002c5 	stb	r3,11(r2)
811320c8:	d0a09517 	ldw	r2,-32172(gp)
811320cc:	10c00a17 	ldw	r3,40(r2)
811320d0:	e0bffc17 	ldw	r2,-16(fp)
811320d4:	1885883a 	add	r2,r3,r2
811320d8:	10800384 	addi	r2,r2,14
811320dc:	1080002b 	ldhuio	r2,0(r2)
811320e0:	10bfffcc 	andi	r2,r2,65535
811320e4:	1007883a 	mov	r3,r2
811320e8:	e0bffd17 	ldw	r2,-12(fp)
811320ec:	10c0030d 	sth	r3,12(r2)
811320f0:	d0a09517 	ldw	r2,-32172(gp)
811320f4:	10c00a17 	ldw	r3,40(r2)
811320f8:	e0bffc17 	ldw	r2,-16(fp)
811320fc:	1885883a 	add	r2,r3,r2
81132100:	10800404 	addi	r2,r2,16
81132104:	1080002b 	ldhuio	r2,0(r2)
81132108:	10bfffcc 	andi	r2,r2,65535
8113210c:	1007883a 	mov	r3,r2
81132110:	e0bffd17 	ldw	r2,-12(fp)
81132114:	10c0038d 	sth	r3,14(r2)
81132118:	d0a09517 	ldw	r2,-32172(gp)
8113211c:	10c00a17 	ldw	r3,40(r2)
81132120:	e0bffc17 	ldw	r2,-16(fp)
81132124:	1885883a 	add	r2,r3,r2
81132128:	10800484 	addi	r2,r2,18
8113212c:	1080002b 	ldhuio	r2,0(r2)
81132130:	10bfffcc 	andi	r2,r2,65535
81132134:	1007883a 	mov	r3,r2
81132138:	e0bffd17 	ldw	r2,-12(fp)
8113213c:	10c0040d 	sth	r3,16(r2)
81132140:	d0a09517 	ldw	r2,-32172(gp)
81132144:	10c00a17 	ldw	r3,40(r2)
81132148:	e0bffc17 	ldw	r2,-16(fp)
8113214c:	1885883a 	add	r2,r3,r2
81132150:	10800584 	addi	r2,r2,22
81132154:	1080002b 	ldhuio	r2,0(r2)
81132158:	10bfffcc 	andi	r2,r2,65535
8113215c:	1007883a 	mov	r3,r2
81132160:	e0bffd17 	ldw	r2,-12(fp)
81132164:	10c0048d 	sth	r3,18(r2)
81132168:	d0a09517 	ldw	r2,-32172(gp)
8113216c:	10c00a17 	ldw	r3,40(r2)
81132170:	e0bffc17 	ldw	r2,-16(fp)
81132174:	1885883a 	add	r2,r3,r2
81132178:	10800604 	addi	r2,r2,24
8113217c:	1080002b 	ldhuio	r2,0(r2)
81132180:	10bfffcc 	andi	r2,r2,65535
81132184:	1007883a 	mov	r3,r2
81132188:	e0bffd17 	ldw	r2,-12(fp)
8113218c:	10c0050d 	sth	r3,20(r2)
81132190:	d0a09517 	ldw	r2,-32172(gp)
81132194:	10c00a17 	ldw	r3,40(r2)
81132198:	e0bffc17 	ldw	r2,-16(fp)
8113219c:	1885883a 	add	r2,r3,r2
811321a0:	10800684 	addi	r2,r2,26
811321a4:	1080002b 	ldhuio	r2,0(r2)
811321a8:	10bfffcc 	andi	r2,r2,65535
811321ac:	1007883a 	mov	r3,r2
811321b0:	e0bffd17 	ldw	r2,-12(fp)
811321b4:	10c0058d 	sth	r3,22(r2)
811321b8:	d0a09517 	ldw	r2,-32172(gp)
811321bc:	10c00a17 	ldw	r3,40(r2)
811321c0:	e0bffc17 	ldw	r2,-16(fp)
811321c4:	1885883a 	add	r2,r3,r2
811321c8:	10800704 	addi	r2,r2,28
811321cc:	10800037 	ldwio	r2,0(r2)
811321d0:	1007883a 	mov	r3,r2
811321d4:	e0bffd17 	ldw	r2,-12(fp)
811321d8:	10c00615 	stw	r3,24(r2)
811321dc:	e0bffd17 	ldw	r2,-12(fp)
811321e0:	e0fffe17 	ldw	r3,-8(fp)
811321e4:	10c00a15 	stw	r3,40(r2)
811321e8:	e0bffd17 	ldw	r2,-12(fp)
811321ec:	e0ffff17 	ldw	r3,-4(fp)
811321f0:	10c00b15 	stw	r3,44(r2)
811321f4:	e0bffc17 	ldw	r2,-16(fp)
811321f8:	1007883a 	mov	r3,r2
811321fc:	e0bffd17 	ldw	r2,-12(fp)
81132200:	10c00c0d 	sth	r3,48(r2)
81132204:	00800044 	movi	r2,1
81132208:	e0bffa15 	stw	r2,-24(fp)
8113220c:	e0bffa17 	ldw	r2,-24(fp)
81132210:	e037883a 	mov	sp,fp
81132214:	dfc00117 	ldw	ra,4(sp)
81132218:	df000017 	ldw	fp,0(sp)
8113221c:	dec00204 	addi	sp,sp,8
81132220:	f800283a 	ret

81132224 <Write_File_Record_At_Offset>:
81132224:	defff904 	addi	sp,sp,-28
81132228:	de00012e 	bgeu	sp,et,81132230 <Write_File_Record_At_Offset+0xc>
8113222c:	003b68fa 	trap	3
81132230:	dfc00615 	stw	ra,24(sp)
81132234:	df000515 	stw	fp,20(sp)
81132238:	df000504 	addi	fp,sp,20
8113223c:	e13ffe15 	stw	r4,-8(fp)
81132240:	e17fff15 	stw	r5,-4(fp)
81132244:	e03ffb15 	stw	zero,-20(fp)
81132248:	e0bffe17 	ldw	r2,-8(fp)
8113224c:	108007cc 	andi	r2,r2,31
81132250:	1000931e 	bne	r2,zero,811324a0 <Write_File_Record_At_Offset+0x27c>
81132254:	11348480 	call	81134848 <alt_up_sd_card_is_Present>
81132258:	10009126 	beq	r2,zero,811324a0 <Write_File_Record_At_Offset+0x27c>
8113225c:	d0a08c17 	ldw	r2,-32208(gp)
81132260:	10008f26 	beq	r2,zero,811324a0 <Write_File_Record_At_Offset+0x27c>
81132264:	e03ffc15 	stw	zero,-16(fp)
81132268:	00001f06 	br	811322e8 <Write_File_Record_At_Offset+0xc4>
8113226c:	e0bffc17 	ldw	r2,-16(fp)
81132270:	10800044 	addi	r2,r2,1
81132274:	e0ffff17 	ldw	r3,-4(fp)
81132278:	1885883a 	add	r2,r3,r2
8113227c:	10800003 	ldbu	r2,0(r2)
81132280:	10803fcc 	andi	r2,r2,255
81132284:	e0bffd0d 	sth	r2,-12(fp)
81132288:	e0bffd0f 	ldh	r2,-12(fp)
8113228c:	1004923a 	slli	r2,r2,8
81132290:	e0bffd0d 	sth	r2,-12(fp)
81132294:	e0ffff17 	ldw	r3,-4(fp)
81132298:	e0bffc17 	ldw	r2,-16(fp)
8113229c:	1885883a 	add	r2,r3,r2
811322a0:	10800003 	ldbu	r2,0(r2)
811322a4:	10c03fcc 	andi	r3,r2,255
811322a8:	e0bffd0b 	ldhu	r2,-12(fp)
811322ac:	1884b03a 	or	r2,r3,r2
811322b0:	e0bffd0d 	sth	r2,-12(fp)
811322b4:	e0fffe17 	ldw	r3,-8(fp)
811322b8:	e0bffc17 	ldw	r2,-16(fp)
811322bc:	1885883a 	add	r2,r3,r2
811322c0:	1007883a 	mov	r3,r2
811322c4:	d0a09517 	ldw	r2,-32172(gp)
811322c8:	10800a17 	ldw	r2,40(r2)
811322cc:	1885883a 	add	r2,r3,r2
811322d0:	1007883a 	mov	r3,r2
811322d4:	e0bffd0f 	ldh	r2,-12(fp)
811322d8:	1880002d 	sthio	r2,0(r3)
811322dc:	e0bffc17 	ldw	r2,-16(fp)
811322e0:	10800084 	addi	r2,r2,2
811322e4:	e0bffc15 	stw	r2,-16(fp)
811322e8:	e0bffc17 	ldw	r2,-16(fp)
811322ec:	10800210 	cmplti	r2,r2,8
811322f0:	103fde1e 	bne	r2,zero,8113226c <__reset+0xfb11226c>
811322f4:	e03ffc15 	stw	zero,-16(fp)
811322f8:	00001306 	br	81132348 <Write_File_Record_At_Offset+0x124>
811322fc:	e0fffe17 	ldw	r3,-8(fp)
81132300:	e0bffc17 	ldw	r2,-16(fp)
81132304:	1885883a 	add	r2,r3,r2
81132308:	1007883a 	mov	r3,r2
8113230c:	d0a09517 	ldw	r2,-32172(gp)
81132310:	10800a17 	ldw	r2,40(r2)
81132314:	1885883a 	add	r2,r3,r2
81132318:	10800204 	addi	r2,r2,8
8113231c:	1009883a 	mov	r4,r2
81132320:	e0ffff17 	ldw	r3,-4(fp)
81132324:	e0bffc17 	ldw	r2,-16(fp)
81132328:	1885883a 	add	r2,r3,r2
8113232c:	10800204 	addi	r2,r2,8
81132330:	10800003 	ldbu	r2,0(r2)
81132334:	10803fcc 	andi	r2,r2,255
81132338:	20800025 	stbio	r2,0(r4)
8113233c:	e0bffc17 	ldw	r2,-16(fp)
81132340:	10800044 	addi	r2,r2,1
81132344:	e0bffc15 	stw	r2,-16(fp)
81132348:	e0bffc17 	ldw	r2,-16(fp)
8113234c:	108000d0 	cmplti	r2,r2,3
81132350:	103fea1e 	bne	r2,zero,811322fc <__reset+0xfb1122fc>
81132354:	d0a09517 	ldw	r2,-32172(gp)
81132358:	10c00a17 	ldw	r3,40(r2)
8113235c:	e0bffe17 	ldw	r2,-8(fp)
81132360:	1885883a 	add	r2,r3,r2
81132364:	108002c4 	addi	r2,r2,11
81132368:	1007883a 	mov	r3,r2
8113236c:	e0bfff17 	ldw	r2,-4(fp)
81132370:	108002c3 	ldbu	r2,11(r2)
81132374:	10803fcc 	andi	r2,r2,255
81132378:	18800025 	stbio	r2,0(r3)
8113237c:	d0a09517 	ldw	r2,-32172(gp)
81132380:	10c00a17 	ldw	r3,40(r2)
81132384:	e0bffe17 	ldw	r2,-8(fp)
81132388:	1885883a 	add	r2,r3,r2
8113238c:	10800384 	addi	r2,r2,14
81132390:	1007883a 	mov	r3,r2
81132394:	e0bfff17 	ldw	r2,-4(fp)
81132398:	1080030b 	ldhu	r2,12(r2)
8113239c:	10bfffcc 	andi	r2,r2,65535
811323a0:	1880002d 	sthio	r2,0(r3)
811323a4:	d0a09517 	ldw	r2,-32172(gp)
811323a8:	10c00a17 	ldw	r3,40(r2)
811323ac:	e0bffe17 	ldw	r2,-8(fp)
811323b0:	1885883a 	add	r2,r3,r2
811323b4:	10800404 	addi	r2,r2,16
811323b8:	1007883a 	mov	r3,r2
811323bc:	e0bfff17 	ldw	r2,-4(fp)
811323c0:	1080038b 	ldhu	r2,14(r2)
811323c4:	10bfffcc 	andi	r2,r2,65535
811323c8:	1880002d 	sthio	r2,0(r3)
811323cc:	d0a09517 	ldw	r2,-32172(gp)
811323d0:	10c00a17 	ldw	r3,40(r2)
811323d4:	e0bffe17 	ldw	r2,-8(fp)
811323d8:	1885883a 	add	r2,r3,r2
811323dc:	10800484 	addi	r2,r2,18
811323e0:	1007883a 	mov	r3,r2
811323e4:	e0bfff17 	ldw	r2,-4(fp)
811323e8:	1080040b 	ldhu	r2,16(r2)
811323ec:	10bfffcc 	andi	r2,r2,65535
811323f0:	1880002d 	sthio	r2,0(r3)
811323f4:	d0a09517 	ldw	r2,-32172(gp)
811323f8:	10c00a17 	ldw	r3,40(r2)
811323fc:	e0bffe17 	ldw	r2,-8(fp)
81132400:	1885883a 	add	r2,r3,r2
81132404:	10800584 	addi	r2,r2,22
81132408:	1007883a 	mov	r3,r2
8113240c:	e0bfff17 	ldw	r2,-4(fp)
81132410:	1080048b 	ldhu	r2,18(r2)
81132414:	10bfffcc 	andi	r2,r2,65535
81132418:	1880002d 	sthio	r2,0(r3)
8113241c:	d0a09517 	ldw	r2,-32172(gp)
81132420:	10c00a17 	ldw	r3,40(r2)
81132424:	e0bffe17 	ldw	r2,-8(fp)
81132428:	1885883a 	add	r2,r3,r2
8113242c:	10800604 	addi	r2,r2,24
81132430:	1007883a 	mov	r3,r2
81132434:	e0bfff17 	ldw	r2,-4(fp)
81132438:	1080050b 	ldhu	r2,20(r2)
8113243c:	10bfffcc 	andi	r2,r2,65535
81132440:	1880002d 	sthio	r2,0(r3)
81132444:	d0a09517 	ldw	r2,-32172(gp)
81132448:	10c00a17 	ldw	r3,40(r2)
8113244c:	e0bffe17 	ldw	r2,-8(fp)
81132450:	1885883a 	add	r2,r3,r2
81132454:	10800684 	addi	r2,r2,26
81132458:	1007883a 	mov	r3,r2
8113245c:	e0bfff17 	ldw	r2,-4(fp)
81132460:	1080058b 	ldhu	r2,22(r2)
81132464:	10bfffcc 	andi	r2,r2,65535
81132468:	1880002d 	sthio	r2,0(r3)
8113246c:	d0a09517 	ldw	r2,-32172(gp)
81132470:	10c00a17 	ldw	r3,40(r2)
81132474:	e0bffe17 	ldw	r2,-8(fp)
81132478:	1885883a 	add	r2,r3,r2
8113247c:	10800704 	addi	r2,r2,28
81132480:	1007883a 	mov	r3,r2
81132484:	e0bfff17 	ldw	r2,-4(fp)
81132488:	10800617 	ldw	r2,24(r2)
8113248c:	18800035 	stwio	r2,0(r3)
81132490:	00800044 	movi	r2,1
81132494:	d0a09615 	stw	r2,-32168(gp)
81132498:	00800044 	movi	r2,1
8113249c:	e0bffb15 	stw	r2,-20(fp)
811324a0:	e0bffb17 	ldw	r2,-20(fp)
811324a4:	e037883a 	mov	sp,fp
811324a8:	dfc00117 	ldw	ra,4(sp)
811324ac:	df000017 	ldw	fp,0(sp)
811324b0:	dec00204 	addi	sp,sp,8
811324b4:	f800283a 	ret

811324b8 <Check_for_DOS_FAT>:
811324b8:	defff904 	addi	sp,sp,-28
811324bc:	de00012e 	bgeu	sp,et,811324c4 <Check_for_DOS_FAT+0xc>
811324c0:	003b68fa 	trap	3
811324c4:	dfc00615 	stw	ra,24(sp)
811324c8:	df000515 	stw	fp,20(sp)
811324cc:	df000504 	addi	fp,sp,20
811324d0:	e13fff15 	stw	r4,-4(fp)
811324d4:	e03ffb15 	stw	zero,-20(fp)
811324d8:	e03ffc15 	stw	zero,-16(fp)
811324dc:	e17fff17 	ldw	r5,-4(fp)
811324e0:	0009883a 	mov	r4,zero
811324e4:	1131b700 	call	81131b70 <Read_Sector_Data>
811324e8:	e0bffb15 	stw	r2,-20(fp)
811324ec:	d0a09517 	ldw	r2,-32172(gp)
811324f0:	10800a17 	ldw	r2,40(r2)
811324f4:	10807f84 	addi	r2,r2,510
811324f8:	1080002b 	ldhuio	r2,0(r2)
811324fc:	10bfffcc 	andi	r2,r2,65535
81132500:	e0bffe0d 	sth	r2,-8(fp)
81132504:	e0bffe0f 	ldh	r2,-8(fp)
81132508:	10ffffcc 	andi	r3,r2,65535
8113250c:	00aa9554 	movui	r2,43605
81132510:	1881841e 	bne	r3,r2,81132b24 <Check_for_DOS_FAT+0x66c>
81132514:	e0bffb17 	ldw	r2,-20(fp)
81132518:	10018226 	beq	r2,zero,81132b24 <Check_for_DOS_FAT+0x66c>
8113251c:	e03ffd15 	stw	zero,-12(fp)
81132520:	d0a09517 	ldw	r2,-32172(gp)
81132524:	10800a17 	ldw	r2,40(r2)
81132528:	10800023 	ldbuio	r2,0(r2)
8113252c:	10803fcc 	andi	r2,r2,255
81132530:	1007883a 	mov	r3,r2
81132534:	00a04574 	movhi	r2,33045
81132538:	108d8504 	addi	r2,r2,13844
8113253c:	10c00005 	stb	r3,0(r2)
81132540:	d0a09517 	ldw	r2,-32172(gp)
81132544:	10800a17 	ldw	r2,40(r2)
81132548:	10800044 	addi	r2,r2,1
8113254c:	10800023 	ldbuio	r2,0(r2)
81132550:	10803fcc 	andi	r2,r2,255
81132554:	1007883a 	mov	r3,r2
81132558:	00a04574 	movhi	r2,33045
8113255c:	108d8504 	addi	r2,r2,13844
81132560:	10c00045 	stb	r3,1(r2)
81132564:	d0a09517 	ldw	r2,-32172(gp)
81132568:	10800a17 	ldw	r2,40(r2)
8113256c:	10800084 	addi	r2,r2,2
81132570:	10800023 	ldbuio	r2,0(r2)
81132574:	10803fcc 	andi	r2,r2,255
81132578:	1007883a 	mov	r3,r2
8113257c:	00a04574 	movhi	r2,33045
81132580:	108d8504 	addi	r2,r2,13844
81132584:	10c00085 	stb	r3,2(r2)
81132588:	e03ffc15 	stw	zero,-16(fp)
8113258c:	00001106 	br	811325d4 <Check_for_DOS_FAT+0x11c>
81132590:	d0a09517 	ldw	r2,-32172(gp)
81132594:	10c00a17 	ldw	r3,40(r2)
81132598:	e0bffc17 	ldw	r2,-16(fp)
8113259c:	1885883a 	add	r2,r3,r2
811325a0:	108000c4 	addi	r2,r2,3
811325a4:	10800023 	ldbuio	r2,0(r2)
811325a8:	10803fcc 	andi	r2,r2,255
811325ac:	1009883a 	mov	r4,r2
811325b0:	00a04574 	movhi	r2,33045
811325b4:	108d8504 	addi	r2,r2,13844
811325b8:	e0fffc17 	ldw	r3,-16(fp)
811325bc:	10c5883a 	add	r2,r2,r3
811325c0:	108000c4 	addi	r2,r2,3
811325c4:	11000005 	stb	r4,0(r2)
811325c8:	e0bffc17 	ldw	r2,-16(fp)
811325cc:	10800044 	addi	r2,r2,1
811325d0:	e0bffc15 	stw	r2,-16(fp)
811325d4:	e0bffc17 	ldw	r2,-16(fp)
811325d8:	10800210 	cmplti	r2,r2,8
811325dc:	103fec1e 	bne	r2,zero,81132590 <__reset+0xfb112590>
811325e0:	d0a09517 	ldw	r2,-32172(gp)
811325e4:	10800a17 	ldw	r2,40(r2)
811325e8:	10800304 	addi	r2,r2,12
811325ec:	10800023 	ldbuio	r2,0(r2)
811325f0:	10803fcc 	andi	r2,r2,255
811325f4:	1004923a 	slli	r2,r2,8
811325f8:	1007883a 	mov	r3,r2
811325fc:	d0a09517 	ldw	r2,-32172(gp)
81132600:	10800a17 	ldw	r2,40(r2)
81132604:	108002c4 	addi	r2,r2,11
81132608:	10800023 	ldbuio	r2,0(r2)
8113260c:	10803fcc 	andi	r2,r2,255
81132610:	10803fcc 	andi	r2,r2,255
81132614:	1080201c 	xori	r2,r2,128
81132618:	10bfe004 	addi	r2,r2,-128
8113261c:	1884b03a 	or	r2,r3,r2
81132620:	1007883a 	mov	r3,r2
81132624:	00a04574 	movhi	r2,33045
81132628:	108d8504 	addi	r2,r2,13844
8113262c:	10c0030d 	sth	r3,12(r2)
81132630:	d0a09517 	ldw	r2,-32172(gp)
81132634:	10800a17 	ldw	r2,40(r2)
81132638:	10800344 	addi	r2,r2,13
8113263c:	10800023 	ldbuio	r2,0(r2)
81132640:	10803fcc 	andi	r2,r2,255
81132644:	1007883a 	mov	r3,r2
81132648:	00a04574 	movhi	r2,33045
8113264c:	108d8504 	addi	r2,r2,13844
81132650:	10c00385 	stb	r3,14(r2)
81132654:	d0a09517 	ldw	r2,-32172(gp)
81132658:	10800a17 	ldw	r2,40(r2)
8113265c:	10800384 	addi	r2,r2,14
81132660:	1080002b 	ldhuio	r2,0(r2)
81132664:	10bfffcc 	andi	r2,r2,65535
81132668:	1007883a 	mov	r3,r2
8113266c:	00a04574 	movhi	r2,33045
81132670:	108d8504 	addi	r2,r2,13844
81132674:	10c0040d 	sth	r3,16(r2)
81132678:	d0a09517 	ldw	r2,-32172(gp)
8113267c:	10800a17 	ldw	r2,40(r2)
81132680:	10800404 	addi	r2,r2,16
81132684:	10800023 	ldbuio	r2,0(r2)
81132688:	10803fcc 	andi	r2,r2,255
8113268c:	1007883a 	mov	r3,r2
81132690:	00a04574 	movhi	r2,33045
81132694:	108d8504 	addi	r2,r2,13844
81132698:	10c00485 	stb	r3,18(r2)
8113269c:	d0a09517 	ldw	r2,-32172(gp)
811326a0:	10800a17 	ldw	r2,40(r2)
811326a4:	10800484 	addi	r2,r2,18
811326a8:	10800023 	ldbuio	r2,0(r2)
811326ac:	10803fcc 	andi	r2,r2,255
811326b0:	1004923a 	slli	r2,r2,8
811326b4:	1007883a 	mov	r3,r2
811326b8:	d0a09517 	ldw	r2,-32172(gp)
811326bc:	10800a17 	ldw	r2,40(r2)
811326c0:	10800444 	addi	r2,r2,17
811326c4:	10800023 	ldbuio	r2,0(r2)
811326c8:	10803fcc 	andi	r2,r2,255
811326cc:	10803fcc 	andi	r2,r2,255
811326d0:	1884b03a 	or	r2,r3,r2
811326d4:	1007883a 	mov	r3,r2
811326d8:	00a04574 	movhi	r2,33045
811326dc:	108d8504 	addi	r2,r2,13844
811326e0:	10c0050d 	sth	r3,20(r2)
811326e4:	d0a09517 	ldw	r2,-32172(gp)
811326e8:	10800a17 	ldw	r2,40(r2)
811326ec:	10800504 	addi	r2,r2,20
811326f0:	10800023 	ldbuio	r2,0(r2)
811326f4:	10803fcc 	andi	r2,r2,255
811326f8:	1004923a 	slli	r2,r2,8
811326fc:	1007883a 	mov	r3,r2
81132700:	d0a09517 	ldw	r2,-32172(gp)
81132704:	10800a17 	ldw	r2,40(r2)
81132708:	108004c4 	addi	r2,r2,19
8113270c:	10800023 	ldbuio	r2,0(r2)
81132710:	10803fcc 	andi	r2,r2,255
81132714:	10803fcc 	andi	r2,r2,255
81132718:	1884b03a 	or	r2,r3,r2
8113271c:	1007883a 	mov	r3,r2
81132720:	00a04574 	movhi	r2,33045
81132724:	108d8504 	addi	r2,r2,13844
81132728:	10c0058d 	sth	r3,22(r2)
8113272c:	d0a09517 	ldw	r2,-32172(gp)
81132730:	10800a17 	ldw	r2,40(r2)
81132734:	10800544 	addi	r2,r2,21
81132738:	10800023 	ldbuio	r2,0(r2)
8113273c:	10803fcc 	andi	r2,r2,255
81132740:	1007883a 	mov	r3,r2
81132744:	00a04574 	movhi	r2,33045
81132748:	108d8504 	addi	r2,r2,13844
8113274c:	10c00605 	stb	r3,24(r2)
81132750:	d0a09517 	ldw	r2,-32172(gp)
81132754:	10800a17 	ldw	r2,40(r2)
81132758:	10800584 	addi	r2,r2,22
8113275c:	1080002b 	ldhuio	r2,0(r2)
81132760:	10bfffcc 	andi	r2,r2,65535
81132764:	1007883a 	mov	r3,r2
81132768:	00a04574 	movhi	r2,33045
8113276c:	108d8504 	addi	r2,r2,13844
81132770:	10c0068d 	sth	r3,26(r2)
81132774:	d0a09517 	ldw	r2,-32172(gp)
81132778:	10800a17 	ldw	r2,40(r2)
8113277c:	10800604 	addi	r2,r2,24
81132780:	1080002b 	ldhuio	r2,0(r2)
81132784:	10bfffcc 	andi	r2,r2,65535
81132788:	1007883a 	mov	r3,r2
8113278c:	00a04574 	movhi	r2,33045
81132790:	108d8504 	addi	r2,r2,13844
81132794:	10c0070d 	sth	r3,28(r2)
81132798:	d0a09517 	ldw	r2,-32172(gp)
8113279c:	10800a17 	ldw	r2,40(r2)
811327a0:	10800684 	addi	r2,r2,26
811327a4:	1080002b 	ldhuio	r2,0(r2)
811327a8:	10bfffcc 	andi	r2,r2,65535
811327ac:	1007883a 	mov	r3,r2
811327b0:	00a04574 	movhi	r2,33045
811327b4:	108d8504 	addi	r2,r2,13844
811327b8:	10c0078d 	sth	r3,30(r2)
811327bc:	d0a09517 	ldw	r2,-32172(gp)
811327c0:	10800a17 	ldw	r2,40(r2)
811327c4:	10800704 	addi	r2,r2,28
811327c8:	10800037 	ldwio	r2,0(r2)
811327cc:	1007883a 	mov	r3,r2
811327d0:	00a04574 	movhi	r2,33045
811327d4:	108d8504 	addi	r2,r2,13844
811327d8:	10c00815 	stw	r3,32(r2)
811327dc:	d0a09517 	ldw	r2,-32172(gp)
811327e0:	10800a17 	ldw	r2,40(r2)
811327e4:	10800804 	addi	r2,r2,32
811327e8:	10800037 	ldwio	r2,0(r2)
811327ec:	1007883a 	mov	r3,r2
811327f0:	00a04574 	movhi	r2,33045
811327f4:	108d8504 	addi	r2,r2,13844
811327f8:	10c00915 	stw	r3,36(r2)
811327fc:	d0a09517 	ldw	r2,-32172(gp)
81132800:	10800a17 	ldw	r2,40(r2)
81132804:	10800904 	addi	r2,r2,36
81132808:	10800023 	ldbuio	r2,0(r2)
8113280c:	10803fcc 	andi	r2,r2,255
81132810:	1007883a 	mov	r3,r2
81132814:	00a04574 	movhi	r2,33045
81132818:	108d8504 	addi	r2,r2,13844
8113281c:	10c00a05 	stb	r3,40(r2)
81132820:	d0a09517 	ldw	r2,-32172(gp)
81132824:	10800a17 	ldw	r2,40(r2)
81132828:	10800944 	addi	r2,r2,37
8113282c:	10800023 	ldbuio	r2,0(r2)
81132830:	10803fcc 	andi	r2,r2,255
81132834:	1007883a 	mov	r3,r2
81132838:	00a04574 	movhi	r2,33045
8113283c:	108d8504 	addi	r2,r2,13844
81132840:	10c00a45 	stb	r3,41(r2)
81132844:	d0a09517 	ldw	r2,-32172(gp)
81132848:	10800a17 	ldw	r2,40(r2)
8113284c:	10800984 	addi	r2,r2,38
81132850:	10800023 	ldbuio	r2,0(r2)
81132854:	10803fcc 	andi	r2,r2,255
81132858:	1007883a 	mov	r3,r2
8113285c:	00a04574 	movhi	r2,33045
81132860:	108d8504 	addi	r2,r2,13844
81132864:	10c00a85 	stb	r3,42(r2)
81132868:	00a04574 	movhi	r2,33045
8113286c:	108d8504 	addi	r2,r2,13844
81132870:	1080040b 	ldhu	r2,16(r2)
81132874:	10ffffcc 	andi	r3,r2,65535
81132878:	00a04574 	movhi	r2,33045
8113287c:	108d8504 	addi	r2,r2,13844
81132880:	10c01115 	stw	r3,68(r2)
81132884:	00a04574 	movhi	r2,33045
81132888:	108d8504 	addi	r2,r2,13844
8113288c:	10c01117 	ldw	r3,68(r2)
81132890:	00a04574 	movhi	r2,33045
81132894:	108d8504 	addi	r2,r2,13844
81132898:	1080068b 	ldhu	r2,26(r2)
8113289c:	10bfffcc 	andi	r2,r2,65535
811328a0:	1887883a 	add	r3,r3,r2
811328a4:	00a04574 	movhi	r2,33045
811328a8:	108d8504 	addi	r2,r2,13844
811328ac:	10c01215 	stw	r3,72(r2)
811328b0:	00a04574 	movhi	r2,33045
811328b4:	108d8504 	addi	r2,r2,13844
811328b8:	10c01217 	ldw	r3,72(r2)
811328bc:	00a04574 	movhi	r2,33045
811328c0:	108d8504 	addi	r2,r2,13844
811328c4:	1080068b 	ldhu	r2,26(r2)
811328c8:	10bfffcc 	andi	r2,r2,65535
811328cc:	1887883a 	add	r3,r3,r2
811328d0:	00a04574 	movhi	r2,33045
811328d4:	108d8504 	addi	r2,r2,13844
811328d8:	10c01315 	stw	r3,76(r2)
811328dc:	00a04574 	movhi	r2,33045
811328e0:	108d8504 	addi	r2,r2,13844
811328e4:	10c01317 	ldw	r3,76(r2)
811328e8:	00a04574 	movhi	r2,33045
811328ec:	108d8504 	addi	r2,r2,13844
811328f0:	1080050b 	ldhu	r2,20(r2)
811328f4:	10bfffcc 	andi	r2,r2,65535
811328f8:	1008917a 	slli	r4,r2,5
811328fc:	00a04574 	movhi	r2,33045
81132900:	108d8504 	addi	r2,r2,13844
81132904:	1080030b 	ldhu	r2,12(r2)
81132908:	10bfffcc 	andi	r2,r2,65535
8113290c:	2085283a 	div	r2,r4,r2
81132910:	1887883a 	add	r3,r3,r2
81132914:	00a04574 	movhi	r2,33045
81132918:	108d8504 	addi	r2,r2,13844
8113291c:	10c01415 	stw	r3,80(r2)
81132920:	00a04574 	movhi	r2,33045
81132924:	108d8504 	addi	r2,r2,13844
81132928:	1080058b 	ldhu	r2,22(r2)
8113292c:	10bfffcc 	andi	r2,r2,65535
81132930:	10000b26 	beq	r2,zero,81132960 <Check_for_DOS_FAT+0x4a8>
81132934:	00a04574 	movhi	r2,33045
81132938:	108d8504 	addi	r2,r2,13844
8113293c:	1080058b 	ldhu	r2,22(r2)
81132940:	10ffffcc 	andi	r3,r2,65535
81132944:	00a04574 	movhi	r2,33045
81132948:	108d8504 	addi	r2,r2,13844
8113294c:	10800383 	ldbu	r2,14(r2)
81132950:	10803fcc 	andi	r2,r2,255
81132954:	1885283a 	div	r2,r3,r2
81132958:	e0bffd15 	stw	r2,-12(fp)
8113295c:	00000906 	br	81132984 <Check_for_DOS_FAT+0x4cc>
81132960:	00a04574 	movhi	r2,33045
81132964:	108d8504 	addi	r2,r2,13844
81132968:	10c00917 	ldw	r3,36(r2)
8113296c:	00a04574 	movhi	r2,33045
81132970:	108d8504 	addi	r2,r2,13844
81132974:	10800383 	ldbu	r2,14(r2)
81132978:	10803fcc 	andi	r2,r2,255
8113297c:	1885203a 	divu	r2,r3,r2
81132980:	e0bffd15 	stw	r2,-12(fp)
81132984:	e0bffd17 	ldw	r2,-12(fp)
81132988:	1083fdc8 	cmpgei	r2,r2,4087
8113298c:	1000051e 	bne	r2,zero,811329a4 <Check_for_DOS_FAT+0x4ec>
81132990:	00a04574 	movhi	r2,33045
81132994:	108d8504 	addi	r2,r2,13844
81132998:	00c00304 	movi	r3,12
8113299c:	10c01085 	stb	r3,66(r2)
811329a0:	00000c06 	br	811329d4 <Check_for_DOS_FAT+0x51c>
811329a4:	e0bffd17 	ldw	r2,-12(fp)
811329a8:	00fffb54 	movui	r3,65517
811329ac:	18800516 	blt	r3,r2,811329c4 <Check_for_DOS_FAT+0x50c>
811329b0:	00a04574 	movhi	r2,33045
811329b4:	108d8504 	addi	r2,r2,13844
811329b8:	00c00404 	movi	r3,16
811329bc:	10c01085 	stb	r3,66(r2)
811329c0:	00000406 	br	811329d4 <Check_for_DOS_FAT+0x51c>
811329c4:	00a04574 	movhi	r2,33045
811329c8:	108d8504 	addi	r2,r2,13844
811329cc:	00c00804 	movi	r3,32
811329d0:	10c01085 	stb	r3,66(r2)
811329d4:	e03ffc15 	stw	zero,-16(fp)
811329d8:	00001106 	br	81132a20 <Check_for_DOS_FAT+0x568>
811329dc:	d0a09517 	ldw	r2,-32172(gp)
811329e0:	10c00a17 	ldw	r3,40(r2)
811329e4:	e0bffc17 	ldw	r2,-16(fp)
811329e8:	1885883a 	add	r2,r3,r2
811329ec:	108009c4 	addi	r2,r2,39
811329f0:	10800023 	ldbuio	r2,0(r2)
811329f4:	10803fcc 	andi	r2,r2,255
811329f8:	1009883a 	mov	r4,r2
811329fc:	00a04574 	movhi	r2,33045
81132a00:	108d8504 	addi	r2,r2,13844
81132a04:	e0fffc17 	ldw	r3,-16(fp)
81132a08:	10c5883a 	add	r2,r2,r3
81132a0c:	10800ac4 	addi	r2,r2,43
81132a10:	11000005 	stb	r4,0(r2)
81132a14:	e0bffc17 	ldw	r2,-16(fp)
81132a18:	10800044 	addi	r2,r2,1
81132a1c:	e0bffc15 	stw	r2,-16(fp)
81132a20:	e0bffc17 	ldw	r2,-16(fp)
81132a24:	10800110 	cmplti	r2,r2,4
81132a28:	103fec1e 	bne	r2,zero,811329dc <__reset+0xfb1129dc>
81132a2c:	e03ffc15 	stw	zero,-16(fp)
81132a30:	00001106 	br	81132a78 <Check_for_DOS_FAT+0x5c0>
81132a34:	d0a09517 	ldw	r2,-32172(gp)
81132a38:	10c00a17 	ldw	r3,40(r2)
81132a3c:	e0bffc17 	ldw	r2,-16(fp)
81132a40:	1885883a 	add	r2,r3,r2
81132a44:	10800ac4 	addi	r2,r2,43
81132a48:	10800023 	ldbuio	r2,0(r2)
81132a4c:	10803fcc 	andi	r2,r2,255
81132a50:	1009883a 	mov	r4,r2
81132a54:	00a04574 	movhi	r2,33045
81132a58:	108d8504 	addi	r2,r2,13844
81132a5c:	e0fffc17 	ldw	r3,-16(fp)
81132a60:	10c5883a 	add	r2,r2,r3
81132a64:	10800bc4 	addi	r2,r2,47
81132a68:	11000005 	stb	r4,0(r2)
81132a6c:	e0bffc17 	ldw	r2,-16(fp)
81132a70:	10800044 	addi	r2,r2,1
81132a74:	e0bffc15 	stw	r2,-16(fp)
81132a78:	e0bffc17 	ldw	r2,-16(fp)
81132a7c:	108002d0 	cmplti	r2,r2,11
81132a80:	103fec1e 	bne	r2,zero,81132a34 <__reset+0xfb112a34>
81132a84:	e03ffc15 	stw	zero,-16(fp)
81132a88:	00001106 	br	81132ad0 <Check_for_DOS_FAT+0x618>
81132a8c:	d0a09517 	ldw	r2,-32172(gp)
81132a90:	10c00a17 	ldw	r3,40(r2)
81132a94:	e0bffc17 	ldw	r2,-16(fp)
81132a98:	1885883a 	add	r2,r3,r2
81132a9c:	10800d84 	addi	r2,r2,54
81132aa0:	10800023 	ldbuio	r2,0(r2)
81132aa4:	10803fcc 	andi	r2,r2,255
81132aa8:	1009883a 	mov	r4,r2
81132aac:	00a04574 	movhi	r2,33045
81132ab0:	108d8504 	addi	r2,r2,13844
81132ab4:	e0fffc17 	ldw	r3,-16(fp)
81132ab8:	10c5883a 	add	r2,r2,r3
81132abc:	10800e84 	addi	r2,r2,58
81132ac0:	11000005 	stb	r4,0(r2)
81132ac4:	e0bffc17 	ldw	r2,-16(fp)
81132ac8:	10800044 	addi	r2,r2,1
81132acc:	e0bffc15 	stw	r2,-16(fp)
81132ad0:	e0bffc17 	ldw	r2,-16(fp)
81132ad4:	10800210 	cmplti	r2,r2,8
81132ad8:	103fec1e 	bne	r2,zero,81132a8c <__reset+0xfb112a8c>
81132adc:	e03ffc15 	stw	zero,-16(fp)
81132ae0:	00000a06 	br	81132b0c <Check_for_DOS_FAT+0x654>
81132ae4:	00a04574 	movhi	r2,33045
81132ae8:	108d9a04 	addi	r2,r2,13928
81132aec:	e0fffc17 	ldw	r3,-16(fp)
81132af0:	180691ba 	slli	r3,r3,6
81132af4:	10c5883a 	add	r2,r2,r3
81132af8:	10800f04 	addi	r2,r2,60
81132afc:	10000015 	stw	zero,0(r2)
81132b00:	e0bffc17 	ldw	r2,-16(fp)
81132b04:	10800044 	addi	r2,r2,1
81132b08:	e0bffc15 	stw	r2,-16(fp)
81132b0c:	e0bffc17 	ldw	r2,-16(fp)
81132b10:	10800510 	cmplti	r2,r2,20
81132b14:	103ff31e 	bne	r2,zero,81132ae4 <__reset+0xfb112ae4>
81132b18:	00800044 	movi	r2,1
81132b1c:	e0bffb15 	stw	r2,-20(fp)
81132b20:	00000106 	br	81132b28 <Check_for_DOS_FAT+0x670>
81132b24:	e03ffb15 	stw	zero,-20(fp)
81132b28:	e0bffb17 	ldw	r2,-20(fp)
81132b2c:	e037883a 	mov	sp,fp
81132b30:	dfc00117 	ldw	ra,4(sp)
81132b34:	df000017 	ldw	fp,0(sp)
81132b38:	dec00204 	addi	sp,sp,8
81132b3c:	f800283a 	ret

81132b40 <Look_for_FAT16>:
81132b40:	defffc04 	addi	sp,sp,-16
81132b44:	de00012e 	bgeu	sp,et,81132b4c <Look_for_FAT16+0xc>
81132b48:	003b68fa 	trap	3
81132b4c:	dfc00315 	stw	ra,12(sp)
81132b50:	df000215 	stw	fp,8(sp)
81132b54:	df000204 	addi	fp,sp,8
81132b58:	e03ffe15 	stw	zero,-8(fp)
81132b5c:	11348480 	call	81134848 <alt_up_sd_card_is_Present>
81132b60:	10002e26 	beq	r2,zero,81132c1c <Look_for_FAT16+0xdc>
81132b64:	d0a08f17 	ldw	r2,-32196(gp)
81132b68:	1080000b 	ldhu	r2,0(r2)
81132b6c:	e0bfff0d 	sth	r2,-4(fp)
81132b70:	d0209315 	stw	zero,-32180(gp)
81132b74:	d0209415 	stw	zero,-32176(gp)
81132b78:	e0bfff0f 	ldh	r2,-4(fp)
81132b7c:	10002716 	blt	r2,zero,81132c1c <Look_for_FAT16+0xdc>
81132b80:	e0bfff0b 	ldhu	r2,-4(fp)
81132b84:	10bfffcc 	andi	r2,r2,65535
81132b88:	1083000c 	andi	r2,r2,3072
81132b8c:	10830020 	cmpeqi	r2,r2,3072
81132b90:	1000221e 	bne	r2,zero,81132c1c <Look_for_FAT16+0xdc>
81132b94:	e0bfff0b 	ldhu	r2,-4(fp)
81132b98:	10bfffcc 	andi	r2,r2,65535
81132b9c:	1083000c 	andi	r2,r2,3072
81132ba0:	10810018 	cmpnei	r2,r2,1024
81132ba4:	1000031e 	bne	r2,zero,81132bb4 <Look_for_FAT16+0x74>
81132ba8:	0009883a 	mov	r4,zero
81132bac:	11324b80 	call	811324b8 <Check_for_DOS_FAT>
81132bb0:	e0bffe15 	stw	r2,-8(fp)
81132bb4:	e0bfff0b 	ldhu	r2,-4(fp)
81132bb8:	10bfffcc 	andi	r2,r2,65535
81132bbc:	1083000c 	andi	r2,r2,3072
81132bc0:	1000061e 	bne	r2,zero,81132bdc <Look_for_FAT16+0x9c>
81132bc4:	1131df40 	call	81131df4 <Check_for_Master_Boot_Record>
81132bc8:	10000426 	beq	r2,zero,81132bdc <Look_for_FAT16+0x9c>
81132bcc:	d0a09317 	ldw	r2,-32180(gp)
81132bd0:	1009883a 	mov	r4,r2
81132bd4:	11324b80 	call	811324b8 <Check_for_DOS_FAT>
81132bd8:	e0bffe15 	stw	r2,-8(fp)
81132bdc:	e0bffe17 	ldw	r2,-8(fp)
81132be0:	10800058 	cmpnei	r2,r2,1
81132be4:	10000d1e 	bne	r2,zero,81132c1c <Look_for_FAT16+0xdc>
81132be8:	00a04574 	movhi	r2,33045
81132bec:	108d8504 	addi	r2,r2,13844
81132bf0:	10801083 	ldbu	r2,66(r2)
81132bf4:	10803fcc 	andi	r2,r2,255
81132bf8:	10800420 	cmpeqi	r2,r2,16
81132bfc:	1000021e 	bne	r2,zero,81132c08 <Look_for_FAT16+0xc8>
81132c00:	e03ffe15 	stw	zero,-8(fp)
81132c04:	00000506 	br	81132c1c <Look_for_FAT16+0xdc>
81132c08:	00a04574 	movhi	r2,33045
81132c0c:	108d8504 	addi	r2,r2,13844
81132c10:	1080058b 	ldhu	r2,22(r2)
81132c14:	10bfffcc 	andi	r2,r2,65535
81132c18:	d0a09415 	stw	r2,-32176(gp)
81132c1c:	e0bffe17 	ldw	r2,-8(fp)
81132c20:	e037883a 	mov	sp,fp
81132c24:	dfc00117 	ldw	ra,4(sp)
81132c28:	df000017 	ldw	fp,0(sp)
81132c2c:	dec00204 	addi	sp,sp,8
81132c30:	f800283a 	ret

81132c34 <filename_to_upper_case>:
81132c34:	defffb04 	addi	sp,sp,-20
81132c38:	de00012e 	bgeu	sp,et,81132c40 <filename_to_upper_case+0xc>
81132c3c:	003b68fa 	trap	3
81132c40:	dfc00415 	stw	ra,16(sp)
81132c44:	df000315 	stw	fp,12(sp)
81132c48:	df000304 	addi	fp,sp,12
81132c4c:	e13fff15 	stw	r4,-4(fp)
81132c50:	e13fff17 	ldw	r4,-4(fp)
81132c54:	1112a400 	call	81112a40 <strlen>
81132c58:	e0bffe15 	stw	r2,-8(fp)
81132c5c:	e03ffd15 	stw	zero,-12(fp)
81132c60:	00001e06 	br	81132cdc <filename_to_upper_case+0xa8>
81132c64:	e0bffd17 	ldw	r2,-12(fp)
81132c68:	e0ffff17 	ldw	r3,-4(fp)
81132c6c:	1885883a 	add	r2,r3,r2
81132c70:	10800003 	ldbu	r2,0(r2)
81132c74:	10803fcc 	andi	r2,r2,255
81132c78:	1080201c 	xori	r2,r2,128
81132c7c:	10bfe004 	addi	r2,r2,-128
81132c80:	10801850 	cmplti	r2,r2,97
81132c84:	1000121e 	bne	r2,zero,81132cd0 <filename_to_upper_case+0x9c>
81132c88:	e0bffd17 	ldw	r2,-12(fp)
81132c8c:	e0ffff17 	ldw	r3,-4(fp)
81132c90:	1885883a 	add	r2,r3,r2
81132c94:	10800003 	ldbu	r2,0(r2)
81132c98:	10803fcc 	andi	r2,r2,255
81132c9c:	1080201c 	xori	r2,r2,128
81132ca0:	10bfe004 	addi	r2,r2,-128
81132ca4:	10801ec8 	cmpgei	r2,r2,123
81132ca8:	1000091e 	bne	r2,zero,81132cd0 <filename_to_upper_case+0x9c>
81132cac:	e0bffd17 	ldw	r2,-12(fp)
81132cb0:	e0ffff17 	ldw	r3,-4(fp)
81132cb4:	1885883a 	add	r2,r3,r2
81132cb8:	e0fffd17 	ldw	r3,-12(fp)
81132cbc:	e13fff17 	ldw	r4,-4(fp)
81132cc0:	20c7883a 	add	r3,r4,r3
81132cc4:	18c00003 	ldbu	r3,0(r3)
81132cc8:	18fff804 	addi	r3,r3,-32
81132ccc:	10c00005 	stb	r3,0(r2)
81132cd0:	e0bffd17 	ldw	r2,-12(fp)
81132cd4:	10800044 	addi	r2,r2,1
81132cd8:	e0bffd15 	stw	r2,-12(fp)
81132cdc:	e0fffd17 	ldw	r3,-12(fp)
81132ce0:	e0bffe17 	ldw	r2,-8(fp)
81132ce4:	18bfdf16 	blt	r3,r2,81132c64 <__reset+0xfb112c64>
81132ce8:	0001883a 	nop
81132cec:	e037883a 	mov	sp,fp
81132cf0:	dfc00117 	ldw	ra,4(sp)
81132cf4:	df000017 	ldw	fp,0(sp)
81132cf8:	dec00204 	addi	sp,sp,8
81132cfc:	f800283a 	ret

81132d00 <check_file_name_for_FAT16_compliance>:
81132d00:	defff804 	addi	sp,sp,-32
81132d04:	de00012e 	bgeu	sp,et,81132d0c <check_file_name_for_FAT16_compliance+0xc>
81132d08:	003b68fa 	trap	3
81132d0c:	dfc00715 	stw	ra,28(sp)
81132d10:	df000615 	stw	fp,24(sp)
81132d14:	df000604 	addi	fp,sp,24
81132d18:	e13fff15 	stw	r4,-4(fp)
81132d1c:	e13fff17 	ldw	r4,-4(fp)
81132d20:	1112a400 	call	81112a40 <strlen>
81132d24:	e0bffe15 	stw	r2,-8(fp)
81132d28:	00bfffc4 	movi	r2,-1
81132d2c:	e0bffb15 	stw	r2,-20(fp)
81132d30:	00bfffc4 	movi	r2,-1
81132d34:	e0bffc15 	stw	r2,-16(fp)
81132d38:	00800044 	movi	r2,1
81132d3c:	e0bffd15 	stw	r2,-12(fp)
81132d40:	e03ffa15 	stw	zero,-24(fp)
81132d44:	00006d06 	br	81132efc <check_file_name_for_FAT16_compliance+0x1fc>
81132d48:	e0bffa17 	ldw	r2,-24(fp)
81132d4c:	e0ffff17 	ldw	r3,-4(fp)
81132d50:	1885883a 	add	r2,r3,r2
81132d54:	10800003 	ldbu	r2,0(r2)
81132d58:	10803fcc 	andi	r2,r2,255
81132d5c:	1080201c 	xori	r2,r2,128
81132d60:	10bfe004 	addi	r2,r2,-128
81132d64:	10800820 	cmpeqi	r2,r2,32
81132d68:	10003e1e 	bne	r2,zero,81132e64 <check_file_name_for_FAT16_compliance+0x164>
81132d6c:	e0bffa17 	ldw	r2,-24(fp)
81132d70:	10ffffc4 	addi	r3,r2,-1
81132d74:	e0bffb17 	ldw	r2,-20(fp)
81132d78:	1880121e 	bne	r3,r2,81132dc4 <check_file_name_for_FAT16_compliance+0xc4>
81132d7c:	e0bffa17 	ldw	r2,-24(fp)
81132d80:	e0ffff17 	ldw	r3,-4(fp)
81132d84:	1885883a 	add	r2,r3,r2
81132d88:	10800003 	ldbu	r2,0(r2)
81132d8c:	10803fcc 	andi	r2,r2,255
81132d90:	1080201c 	xori	r2,r2,128
81132d94:	10bfe004 	addi	r2,r2,-128
81132d98:	10801720 	cmpeqi	r2,r2,92
81132d9c:	1000311e 	bne	r2,zero,81132e64 <check_file_name_for_FAT16_compliance+0x164>
81132da0:	e0bffa17 	ldw	r2,-24(fp)
81132da4:	e0ffff17 	ldw	r3,-4(fp)
81132da8:	1885883a 	add	r2,r3,r2
81132dac:	10800003 	ldbu	r2,0(r2)
81132db0:	10803fcc 	andi	r2,r2,255
81132db4:	1080201c 	xori	r2,r2,128
81132db8:	10bfe004 	addi	r2,r2,-128
81132dbc:	10800be0 	cmpeqi	r2,r2,47
81132dc0:	1000281e 	bne	r2,zero,81132e64 <check_file_name_for_FAT16_compliance+0x164>
81132dc4:	e0fffa17 	ldw	r3,-24(fp)
81132dc8:	e0bffc17 	ldw	r2,-16(fp)
81132dcc:	1885c83a 	sub	r2,r3,r2
81132dd0:	10800258 	cmpnei	r2,r2,9
81132dd4:	1000091e 	bne	r2,zero,81132dfc <check_file_name_for_FAT16_compliance+0xfc>
81132dd8:	e0bffa17 	ldw	r2,-24(fp)
81132ddc:	e0ffff17 	ldw	r3,-4(fp)
81132de0:	1885883a 	add	r2,r3,r2
81132de4:	10800003 	ldbu	r2,0(r2)
81132de8:	10803fcc 	andi	r2,r2,255
81132dec:	1080201c 	xori	r2,r2,128
81132df0:	10bfe004 	addi	r2,r2,-128
81132df4:	10800b98 	cmpnei	r2,r2,46
81132df8:	10001a1e 	bne	r2,zero,81132e64 <check_file_name_for_FAT16_compliance+0x164>
81132dfc:	e0fffb17 	ldw	r3,-20(fp)
81132e00:	e0bffc17 	ldw	r2,-16(fp)
81132e04:	18801926 	beq	r3,r2,81132e6c <check_file_name_for_FAT16_compliance+0x16c>
81132e08:	e0fffa17 	ldw	r3,-24(fp)
81132e0c:	e0bffc17 	ldw	r2,-16(fp)
81132e10:	1885c83a 	sub	r2,r3,r2
81132e14:	10800110 	cmplti	r2,r2,4
81132e18:	1000141e 	bne	r2,zero,81132e6c <check_file_name_for_FAT16_compliance+0x16c>
81132e1c:	e0bffa17 	ldw	r2,-24(fp)
81132e20:	e0ffff17 	ldw	r3,-4(fp)
81132e24:	1885883a 	add	r2,r3,r2
81132e28:	10800003 	ldbu	r2,0(r2)
81132e2c:	10803fcc 	andi	r2,r2,255
81132e30:	1080201c 	xori	r2,r2,128
81132e34:	10bfe004 	addi	r2,r2,-128
81132e38:	10801720 	cmpeqi	r2,r2,92
81132e3c:	10000b1e 	bne	r2,zero,81132e6c <check_file_name_for_FAT16_compliance+0x16c>
81132e40:	e0bffa17 	ldw	r2,-24(fp)
81132e44:	e0ffff17 	ldw	r3,-4(fp)
81132e48:	1885883a 	add	r2,r3,r2
81132e4c:	10800003 	ldbu	r2,0(r2)
81132e50:	10803fcc 	andi	r2,r2,255
81132e54:	1080201c 	xori	r2,r2,128
81132e58:	10bfe004 	addi	r2,r2,-128
81132e5c:	10800be0 	cmpeqi	r2,r2,47
81132e60:	1000021e 	bne	r2,zero,81132e6c <check_file_name_for_FAT16_compliance+0x16c>
81132e64:	e03ffd15 	stw	zero,-12(fp)
81132e68:	00002706 	br	81132f08 <check_file_name_for_FAT16_compliance+0x208>
81132e6c:	e0bffa17 	ldw	r2,-24(fp)
81132e70:	e0ffff17 	ldw	r3,-4(fp)
81132e74:	1885883a 	add	r2,r3,r2
81132e78:	10800003 	ldbu	r2,0(r2)
81132e7c:	10803fcc 	andi	r2,r2,255
81132e80:	1080201c 	xori	r2,r2,128
81132e84:	10bfe004 	addi	r2,r2,-128
81132e88:	10801720 	cmpeqi	r2,r2,92
81132e8c:	1000091e 	bne	r2,zero,81132eb4 <check_file_name_for_FAT16_compliance+0x1b4>
81132e90:	e0bffa17 	ldw	r2,-24(fp)
81132e94:	e0ffff17 	ldw	r3,-4(fp)
81132e98:	1885883a 	add	r2,r3,r2
81132e9c:	10800003 	ldbu	r2,0(r2)
81132ea0:	10803fcc 	andi	r2,r2,255
81132ea4:	1080201c 	xori	r2,r2,128
81132ea8:	10bfe004 	addi	r2,r2,-128
81132eac:	10800bd8 	cmpnei	r2,r2,47
81132eb0:	1000041e 	bne	r2,zero,81132ec4 <check_file_name_for_FAT16_compliance+0x1c4>
81132eb4:	e0bffa17 	ldw	r2,-24(fp)
81132eb8:	e0bffc15 	stw	r2,-16(fp)
81132ebc:	e0bffa17 	ldw	r2,-24(fp)
81132ec0:	e0bffb15 	stw	r2,-20(fp)
81132ec4:	e0bffa17 	ldw	r2,-24(fp)
81132ec8:	e0ffff17 	ldw	r3,-4(fp)
81132ecc:	1885883a 	add	r2,r3,r2
81132ed0:	10800003 	ldbu	r2,0(r2)
81132ed4:	10803fcc 	andi	r2,r2,255
81132ed8:	1080201c 	xori	r2,r2,128
81132edc:	10bfe004 	addi	r2,r2,-128
81132ee0:	10800b98 	cmpnei	r2,r2,46
81132ee4:	1000021e 	bne	r2,zero,81132ef0 <check_file_name_for_FAT16_compliance+0x1f0>
81132ee8:	e0bffa17 	ldw	r2,-24(fp)
81132eec:	e0bffc15 	stw	r2,-16(fp)
81132ef0:	e0bffa17 	ldw	r2,-24(fp)
81132ef4:	10800044 	addi	r2,r2,1
81132ef8:	e0bffa15 	stw	r2,-24(fp)
81132efc:	e0fffa17 	ldw	r3,-24(fp)
81132f00:	e0bffe17 	ldw	r2,-8(fp)
81132f04:	18bf9016 	blt	r3,r2,81132d48 <__reset+0xfb112d48>
81132f08:	e0bffe17 	ldw	r2,-8(fp)
81132f0c:	10bfffc4 	addi	r2,r2,-1
81132f10:	e0ffff17 	ldw	r3,-4(fp)
81132f14:	1885883a 	add	r2,r3,r2
81132f18:	10800003 	ldbu	r2,0(r2)
81132f1c:	10803fcc 	andi	r2,r2,255
81132f20:	1080201c 	xori	r2,r2,128
81132f24:	10bfe004 	addi	r2,r2,-128
81132f28:	10801720 	cmpeqi	r2,r2,92
81132f2c:	10000a1e 	bne	r2,zero,81132f58 <check_file_name_for_FAT16_compliance+0x258>
81132f30:	e0bffe17 	ldw	r2,-8(fp)
81132f34:	10bfffc4 	addi	r2,r2,-1
81132f38:	e0ffff17 	ldw	r3,-4(fp)
81132f3c:	1885883a 	add	r2,r3,r2
81132f40:	10800003 	ldbu	r2,0(r2)
81132f44:	10803fcc 	andi	r2,r2,255
81132f48:	1080201c 	xori	r2,r2,128
81132f4c:	10bfe004 	addi	r2,r2,-128
81132f50:	10800bd8 	cmpnei	r2,r2,47
81132f54:	1000011e 	bne	r2,zero,81132f5c <check_file_name_for_FAT16_compliance+0x25c>
81132f58:	e03ffd15 	stw	zero,-12(fp)
81132f5c:	e0bffd17 	ldw	r2,-12(fp)
81132f60:	e037883a 	mov	sp,fp
81132f64:	dfc00117 	ldw	ra,4(sp)
81132f68:	df000017 	ldw	fp,0(sp)
81132f6c:	dec00204 	addi	sp,sp,8
81132f70:	f800283a 	ret

81132f74 <get_dir_divider_location>:
81132f74:	defffb04 	addi	sp,sp,-20
81132f78:	de00012e 	bgeu	sp,et,81132f80 <get_dir_divider_location+0xc>
81132f7c:	003b68fa 	trap	3
81132f80:	dfc00415 	stw	ra,16(sp)
81132f84:	df000315 	stw	fp,12(sp)
81132f88:	df000304 	addi	fp,sp,12
81132f8c:	e13fff15 	stw	r4,-4(fp)
81132f90:	e03ffd15 	stw	zero,-12(fp)
81132f94:	e13fff17 	ldw	r4,-4(fp)
81132f98:	1112a400 	call	81112a40 <strlen>
81132f9c:	e0bffe15 	stw	r2,-8(fp)
81132fa0:	e03ffd15 	stw	zero,-12(fp)
81132fa4:	00001506 	br	81132ffc <get_dir_divider_location+0x88>
81132fa8:	e0bffd17 	ldw	r2,-12(fp)
81132fac:	e0ffff17 	ldw	r3,-4(fp)
81132fb0:	1885883a 	add	r2,r3,r2
81132fb4:	10800003 	ldbu	r2,0(r2)
81132fb8:	10803fcc 	andi	r2,r2,255
81132fbc:	1080201c 	xori	r2,r2,128
81132fc0:	10bfe004 	addi	r2,r2,-128
81132fc4:	10801720 	cmpeqi	r2,r2,92
81132fc8:	10000f1e 	bne	r2,zero,81133008 <get_dir_divider_location+0x94>
81132fcc:	e0bffd17 	ldw	r2,-12(fp)
81132fd0:	e0ffff17 	ldw	r3,-4(fp)
81132fd4:	1885883a 	add	r2,r3,r2
81132fd8:	10800003 	ldbu	r2,0(r2)
81132fdc:	10803fcc 	andi	r2,r2,255
81132fe0:	1080201c 	xori	r2,r2,128
81132fe4:	10bfe004 	addi	r2,r2,-128
81132fe8:	10800be0 	cmpeqi	r2,r2,47
81132fec:	1000061e 	bne	r2,zero,81133008 <get_dir_divider_location+0x94>
81132ff0:	e0bffd17 	ldw	r2,-12(fp)
81132ff4:	10800044 	addi	r2,r2,1
81132ff8:	e0bffd15 	stw	r2,-12(fp)
81132ffc:	e0fffd17 	ldw	r3,-12(fp)
81133000:	e0bffe17 	ldw	r2,-8(fp)
81133004:	18bfe816 	blt	r3,r2,81132fa8 <__reset+0xfb112fa8>
81133008:	e0fffd17 	ldw	r3,-12(fp)
8113300c:	e0bffe17 	ldw	r2,-8(fp)
81133010:	1880021e 	bne	r3,r2,8113301c <get_dir_divider_location+0xa8>
81133014:	00bfffc4 	movi	r2,-1
81133018:	e0bffd15 	stw	r2,-12(fp)
8113301c:	e0bffd17 	ldw	r2,-12(fp)
81133020:	e037883a 	mov	sp,fp
81133024:	dfc00117 	ldw	ra,4(sp)
81133028:	df000017 	ldw	fp,0(sp)
8113302c:	dec00204 	addi	sp,sp,8
81133030:	f800283a 	ret

81133034 <match_file_record_to_name_ext>:
81133034:	defffa04 	addi	sp,sp,-24
81133038:	de00012e 	bgeu	sp,et,81133040 <match_file_record_to_name_ext+0xc>
8113303c:	003b68fa 	trap	3
81133040:	df000515 	stw	fp,20(sp)
81133044:	df000504 	addi	fp,sp,20
81133048:	e13ffd15 	stw	r4,-12(fp)
8113304c:	e17ffe15 	stw	r5,-8(fp)
81133050:	e1bfff15 	stw	r6,-4(fp)
81133054:	00800044 	movi	r2,1
81133058:	e0bffb15 	stw	r2,-20(fp)
8113305c:	e03ffc15 	stw	zero,-16(fp)
81133060:	00004606 	br	8113317c <match_file_record_to_name_ext+0x148>
81133064:	e0fffd17 	ldw	r3,-12(fp)
81133068:	e0bffc17 	ldw	r2,-16(fp)
8113306c:	1885883a 	add	r2,r3,r2
81133070:	10800003 	ldbu	r2,0(r2)
81133074:	10803fcc 	andi	r2,r2,255
81133078:	10801870 	cmpltui	r2,r2,97
8113307c:	1000101e 	bne	r2,zero,811330c0 <match_file_record_to_name_ext+0x8c>
81133080:	e0fffd17 	ldw	r3,-12(fp)
81133084:	e0bffc17 	ldw	r2,-16(fp)
81133088:	1885883a 	add	r2,r3,r2
8113308c:	10800003 	ldbu	r2,0(r2)
81133090:	10803fcc 	andi	r2,r2,255
81133094:	10801ee8 	cmpgeui	r2,r2,123
81133098:	1000091e 	bne	r2,zero,811330c0 <match_file_record_to_name_ext+0x8c>
8113309c:	e0fffd17 	ldw	r3,-12(fp)
811330a0:	e0bffc17 	ldw	r2,-16(fp)
811330a4:	1885883a 	add	r2,r3,r2
811330a8:	10800003 	ldbu	r2,0(r2)
811330ac:	10bff804 	addi	r2,r2,-32
811330b0:	10c03fcc 	andi	r3,r2,255
811330b4:	18c0201c 	xori	r3,r3,128
811330b8:	18ffe004 	addi	r3,r3,-128
811330bc:	00000706 	br	811330dc <match_file_record_to_name_ext+0xa8>
811330c0:	e0fffd17 	ldw	r3,-12(fp)
811330c4:	e0bffc17 	ldw	r2,-16(fp)
811330c8:	1885883a 	add	r2,r3,r2
811330cc:	10800003 	ldbu	r2,0(r2)
811330d0:	10c03fcc 	andi	r3,r2,255
811330d4:	18c0201c 	xori	r3,r3,128
811330d8:	18ffe004 	addi	r3,r3,-128
811330dc:	e0bffc17 	ldw	r2,-16(fp)
811330e0:	e13ffe17 	ldw	r4,-8(fp)
811330e4:	2085883a 	add	r2,r4,r2
811330e8:	10800003 	ldbu	r2,0(r2)
811330ec:	10803fcc 	andi	r2,r2,255
811330f0:	1080201c 	xori	r2,r2,128
811330f4:	10bfe004 	addi	r2,r2,-128
811330f8:	10801850 	cmplti	r2,r2,97
811330fc:	1000121e 	bne	r2,zero,81133148 <match_file_record_to_name_ext+0x114>
81133100:	e0bffc17 	ldw	r2,-16(fp)
81133104:	e13ffe17 	ldw	r4,-8(fp)
81133108:	2085883a 	add	r2,r4,r2
8113310c:	10800003 	ldbu	r2,0(r2)
81133110:	10803fcc 	andi	r2,r2,255
81133114:	1080201c 	xori	r2,r2,128
81133118:	10bfe004 	addi	r2,r2,-128
8113311c:	10801ec8 	cmpgei	r2,r2,123
81133120:	1000091e 	bne	r2,zero,81133148 <match_file_record_to_name_ext+0x114>
81133124:	e0bffc17 	ldw	r2,-16(fp)
81133128:	e13ffe17 	ldw	r4,-8(fp)
8113312c:	2085883a 	add	r2,r4,r2
81133130:	10800003 	ldbu	r2,0(r2)
81133134:	10bff804 	addi	r2,r2,-32
81133138:	10803fcc 	andi	r2,r2,255
8113313c:	1080201c 	xori	r2,r2,128
81133140:	10bfe004 	addi	r2,r2,-128
81133144:	00000706 	br	81133164 <match_file_record_to_name_ext+0x130>
81133148:	e0bffc17 	ldw	r2,-16(fp)
8113314c:	e13ffe17 	ldw	r4,-8(fp)
81133150:	2085883a 	add	r2,r4,r2
81133154:	10800003 	ldbu	r2,0(r2)
81133158:	10803fcc 	andi	r2,r2,255
8113315c:	1080201c 	xori	r2,r2,128
81133160:	10bfe004 	addi	r2,r2,-128
81133164:	18800226 	beq	r3,r2,81133170 <match_file_record_to_name_ext+0x13c>
81133168:	e03ffb15 	stw	zero,-20(fp)
8113316c:	00000606 	br	81133188 <match_file_record_to_name_ext+0x154>
81133170:	e0bffc17 	ldw	r2,-16(fp)
81133174:	10800044 	addi	r2,r2,1
81133178:	e0bffc15 	stw	r2,-16(fp)
8113317c:	e0bffc17 	ldw	r2,-16(fp)
81133180:	10800210 	cmplti	r2,r2,8
81133184:	103fb71e 	bne	r2,zero,81133064 <__reset+0xfb113064>
81133188:	e03ffc15 	stw	zero,-16(fp)
8113318c:	00004a06 	br	811332b8 <match_file_record_to_name_ext+0x284>
81133190:	e0fffd17 	ldw	r3,-12(fp)
81133194:	e0bffc17 	ldw	r2,-16(fp)
81133198:	1885883a 	add	r2,r3,r2
8113319c:	10800204 	addi	r2,r2,8
811331a0:	10800003 	ldbu	r2,0(r2)
811331a4:	10803fcc 	andi	r2,r2,255
811331a8:	10801870 	cmpltui	r2,r2,97
811331ac:	1000121e 	bne	r2,zero,811331f8 <match_file_record_to_name_ext+0x1c4>
811331b0:	e0fffd17 	ldw	r3,-12(fp)
811331b4:	e0bffc17 	ldw	r2,-16(fp)
811331b8:	1885883a 	add	r2,r3,r2
811331bc:	10800204 	addi	r2,r2,8
811331c0:	10800003 	ldbu	r2,0(r2)
811331c4:	10803fcc 	andi	r2,r2,255
811331c8:	10801ee8 	cmpgeui	r2,r2,123
811331cc:	10000a1e 	bne	r2,zero,811331f8 <match_file_record_to_name_ext+0x1c4>
811331d0:	e0fffd17 	ldw	r3,-12(fp)
811331d4:	e0bffc17 	ldw	r2,-16(fp)
811331d8:	1885883a 	add	r2,r3,r2
811331dc:	10800204 	addi	r2,r2,8
811331e0:	10800003 	ldbu	r2,0(r2)
811331e4:	10bff804 	addi	r2,r2,-32
811331e8:	10c03fcc 	andi	r3,r2,255
811331ec:	18c0201c 	xori	r3,r3,128
811331f0:	18ffe004 	addi	r3,r3,-128
811331f4:	00000806 	br	81133218 <match_file_record_to_name_ext+0x1e4>
811331f8:	e0fffd17 	ldw	r3,-12(fp)
811331fc:	e0bffc17 	ldw	r2,-16(fp)
81133200:	1885883a 	add	r2,r3,r2
81133204:	10800204 	addi	r2,r2,8
81133208:	10800003 	ldbu	r2,0(r2)
8113320c:	10c03fcc 	andi	r3,r2,255
81133210:	18c0201c 	xori	r3,r3,128
81133214:	18ffe004 	addi	r3,r3,-128
81133218:	e0bffc17 	ldw	r2,-16(fp)
8113321c:	e13fff17 	ldw	r4,-4(fp)
81133220:	2085883a 	add	r2,r4,r2
81133224:	10800003 	ldbu	r2,0(r2)
81133228:	10803fcc 	andi	r2,r2,255
8113322c:	1080201c 	xori	r2,r2,128
81133230:	10bfe004 	addi	r2,r2,-128
81133234:	10801850 	cmplti	r2,r2,97
81133238:	1000121e 	bne	r2,zero,81133284 <match_file_record_to_name_ext+0x250>
8113323c:	e0bffc17 	ldw	r2,-16(fp)
81133240:	e13fff17 	ldw	r4,-4(fp)
81133244:	2085883a 	add	r2,r4,r2
81133248:	10800003 	ldbu	r2,0(r2)
8113324c:	10803fcc 	andi	r2,r2,255
81133250:	1080201c 	xori	r2,r2,128
81133254:	10bfe004 	addi	r2,r2,-128
81133258:	10801ec8 	cmpgei	r2,r2,123
8113325c:	1000091e 	bne	r2,zero,81133284 <match_file_record_to_name_ext+0x250>
81133260:	e0bffc17 	ldw	r2,-16(fp)
81133264:	e13fff17 	ldw	r4,-4(fp)
81133268:	2085883a 	add	r2,r4,r2
8113326c:	10800003 	ldbu	r2,0(r2)
81133270:	10bff804 	addi	r2,r2,-32
81133274:	10803fcc 	andi	r2,r2,255
81133278:	1080201c 	xori	r2,r2,128
8113327c:	10bfe004 	addi	r2,r2,-128
81133280:	00000706 	br	811332a0 <match_file_record_to_name_ext+0x26c>
81133284:	e0bffc17 	ldw	r2,-16(fp)
81133288:	e13fff17 	ldw	r4,-4(fp)
8113328c:	2085883a 	add	r2,r4,r2
81133290:	10800003 	ldbu	r2,0(r2)
81133294:	10803fcc 	andi	r2,r2,255
81133298:	1080201c 	xori	r2,r2,128
8113329c:	10bfe004 	addi	r2,r2,-128
811332a0:	18800226 	beq	r3,r2,811332ac <match_file_record_to_name_ext+0x278>
811332a4:	e03ffb15 	stw	zero,-20(fp)
811332a8:	00000606 	br	811332c4 <match_file_record_to_name_ext+0x290>
811332ac:	e0bffc17 	ldw	r2,-16(fp)
811332b0:	10800044 	addi	r2,r2,1
811332b4:	e0bffc15 	stw	r2,-16(fp)
811332b8:	e0bffc17 	ldw	r2,-16(fp)
811332bc:	108000d0 	cmplti	r2,r2,3
811332c0:	103fb31e 	bne	r2,zero,81133190 <__reset+0xfb113190>
811332c4:	e0bffb17 	ldw	r2,-20(fp)
811332c8:	e037883a 	mov	sp,fp
811332cc:	df000017 	ldw	fp,0(sp)
811332d0:	dec00104 	addi	sp,sp,4
811332d4:	f800283a 	ret

811332d8 <get_home_directory_cluster_for_file>:
811332d8:	deffe704 	addi	sp,sp,-100
811332dc:	de00012e 	bgeu	sp,et,811332e4 <get_home_directory_cluster_for_file+0xc>
811332e0:	003b68fa 	trap	3
811332e4:	dfc01815 	stw	ra,96(sp)
811332e8:	df001715 	stw	fp,92(sp)
811332ec:	df001704 	addi	fp,sp,92
811332f0:	e13ffd15 	stw	r4,-12(fp)
811332f4:	e17ffe15 	stw	r5,-8(fp)
811332f8:	e1bfff15 	stw	r6,-4(fp)
811332fc:	e03fe915 	stw	zero,-92(fp)
81133300:	e03fea15 	stw	zero,-88(fp)
81133304:	e03fed15 	stw	zero,-76(fp)
81133308:	e13ffd17 	ldw	r4,-12(fp)
8113330c:	1132f740 	call	81132f74 <get_dir_divider_location>
81133310:	e0bfeb15 	stw	r2,-84(fp)
81133314:	00012f06 	br	811337d4 <get_home_directory_cluster_for_file+0x4fc>
81133318:	00800804 	movi	r2,32
8113331c:	e0bff905 	stb	r2,-28(fp)
81133320:	00800804 	movi	r2,32
81133324:	e0bff945 	stb	r2,-27(fp)
81133328:	00800804 	movi	r2,32
8113332c:	e0bff985 	stb	r2,-26(fp)
81133330:	00800804 	movi	r2,32
81133334:	e0bff9c5 	stb	r2,-25(fp)
81133338:	00800804 	movi	r2,32
8113333c:	e0bffa05 	stb	r2,-24(fp)
81133340:	00800804 	movi	r2,32
81133344:	e0bffa45 	stb	r2,-23(fp)
81133348:	00800804 	movi	r2,32
8113334c:	e0bffa85 	stb	r2,-22(fp)
81133350:	00800804 	movi	r2,32
81133354:	e0bffac5 	stb	r2,-21(fp)
81133358:	00800804 	movi	r2,32
8113335c:	e0bffb05 	stb	r2,-20(fp)
81133360:	00800804 	movi	r2,32
81133364:	e0bffb45 	stb	r2,-19(fp)
81133368:	00800804 	movi	r2,32
8113336c:	e0bffb85 	stb	r2,-18(fp)
81133370:	00bfffc4 	movi	r2,-1
81133374:	e0bfee15 	stw	r2,-72(fp)
81133378:	e0bfea17 	ldw	r2,-88(fp)
8113337c:	e0bfef15 	stw	r2,-68(fp)
81133380:	e03fec15 	stw	zero,-80(fp)
81133384:	00002d06 	br	8113343c <get_home_directory_cluster_for_file+0x164>
81133388:	e0ffec17 	ldw	r3,-80(fp)
8113338c:	e0bfed17 	ldw	r2,-76(fp)
81133390:	1885883a 	add	r2,r3,r2
81133394:	1007883a 	mov	r3,r2
81133398:	e0bffd17 	ldw	r2,-12(fp)
8113339c:	10c5883a 	add	r2,r2,r3
811333a0:	10800003 	ldbu	r2,0(r2)
811333a4:	10803fcc 	andi	r2,r2,255
811333a8:	1080201c 	xori	r2,r2,128
811333ac:	10bfe004 	addi	r2,r2,-128
811333b0:	10800b98 	cmpnei	r2,r2,46
811333b4:	1000031e 	bne	r2,zero,811333c4 <get_home_directory_cluster_for_file+0xec>
811333b8:	e0bfec17 	ldw	r2,-80(fp)
811333bc:	e0bfee15 	stw	r2,-72(fp)
811333c0:	00001b06 	br	81133430 <get_home_directory_cluster_for_file+0x158>
811333c4:	e0bfee17 	ldw	r2,-72(fp)
811333c8:	10000c0e 	bge	r2,zero,811333fc <get_home_directory_cluster_for_file+0x124>
811333cc:	e0ffec17 	ldw	r3,-80(fp)
811333d0:	e0bfed17 	ldw	r2,-76(fp)
811333d4:	1885883a 	add	r2,r3,r2
811333d8:	1007883a 	mov	r3,r2
811333dc:	e0bffd17 	ldw	r2,-12(fp)
811333e0:	10c5883a 	add	r2,r2,r3
811333e4:	10c00003 	ldbu	r3,0(r2)
811333e8:	e13ff904 	addi	r4,fp,-28
811333ec:	e0bfec17 	ldw	r2,-80(fp)
811333f0:	2085883a 	add	r2,r4,r2
811333f4:	10c00005 	stb	r3,0(r2)
811333f8:	00000d06 	br	81133430 <get_home_directory_cluster_for_file+0x158>
811333fc:	e0ffec17 	ldw	r3,-80(fp)
81133400:	e0bfee17 	ldw	r2,-72(fp)
81133404:	1885c83a 	sub	r2,r3,r2
81133408:	e13fec17 	ldw	r4,-80(fp)
8113340c:	e0ffed17 	ldw	r3,-76(fp)
81133410:	20c7883a 	add	r3,r4,r3
81133414:	1809883a 	mov	r4,r3
81133418:	e0fffd17 	ldw	r3,-12(fp)
8113341c:	1907883a 	add	r3,r3,r4
81133420:	18c00003 	ldbu	r3,0(r3)
81133424:	e13ffb04 	addi	r4,fp,-20
81133428:	2085883a 	add	r2,r4,r2
8113342c:	10c00005 	stb	r3,0(r2)
81133430:	e0bfec17 	ldw	r2,-80(fp)
81133434:	10800044 	addi	r2,r2,1
81133438:	e0bfec15 	stw	r2,-80(fp)
8113343c:	e0ffec17 	ldw	r3,-80(fp)
81133440:	e0bfeb17 	ldw	r2,-84(fp)
81133444:	18bfd016 	blt	r3,r2,81133388 <__reset+0xfb113388>
81133448:	e0bfea17 	ldw	r2,-88(fp)
8113344c:	10005c1e 	bne	r2,zero,811335c0 <get_home_directory_cluster_for_file+0x2e8>
81133450:	00a04574 	movhi	r2,33045
81133454:	108d8504 	addi	r2,r2,13844
81133458:	1080050b 	ldhu	r2,20(r2)
8113345c:	10bfffcc 	andi	r2,r2,65535
81133460:	1006917a 	slli	r3,r2,5
81133464:	00a04574 	movhi	r2,33045
81133468:	108d8504 	addi	r2,r2,13844
8113346c:	1080030b 	ldhu	r2,12(r2)
81133470:	10bfffcc 	andi	r2,r2,65535
81133474:	1885283a 	div	r2,r3,r2
81133478:	e0bff715 	stw	r2,-36(fp)
8113347c:	e03ff015 	stw	zero,-64(fp)
81133480:	00003b06 	br	81133570 <get_home_directory_cluster_for_file+0x298>
81133484:	00a04574 	movhi	r2,33045
81133488:	108d8504 	addi	r2,r2,13844
8113348c:	10c01317 	ldw	r3,76(r2)
81133490:	e0bff017 	ldw	r2,-64(fp)
81133494:	1885883a 	add	r2,r3,r2
81133498:	1007883a 	mov	r3,r2
8113349c:	d0a09317 	ldw	r2,-32180(gp)
811334a0:	100b883a 	mov	r5,r2
811334a4:	1809883a 	mov	r4,r3
811334a8:	1131b700 	call	81131b70 <Read_Sector_Data>
811334ac:	10003426 	beq	r2,zero,81133580 <get_home_directory_cluster_for_file+0x2a8>
811334b0:	e03ff115 	stw	zero,-60(fp)
811334b4:	00002506 	br	8113354c <get_home_directory_cluster_for_file+0x274>
811334b8:	e0bff117 	ldw	r2,-60(fp)
811334bc:	1004917a 	slli	r2,r2,5
811334c0:	e0fff017 	ldw	r3,-64(fp)
811334c4:	180f883a 	mov	r7,r3
811334c8:	000d883a 	mov	r6,zero
811334cc:	e17fff17 	ldw	r5,-4(fp)
811334d0:	1009883a 	mov	r4,r2
811334d4:	1131fa00 	call	81131fa0 <Read_File_Record_At_Offset>
811334d8:	e0bfff17 	ldw	r2,-4(fp)
811334dc:	10800003 	ldbu	r2,0(r2)
811334e0:	10803fcc 	andi	r2,r2,255
811334e4:	10803960 	cmpeqi	r2,r2,229
811334e8:	1000151e 	bne	r2,zero,81133540 <get_home_directory_cluster_for_file+0x268>
811334ec:	e0bfff17 	ldw	r2,-4(fp)
811334f0:	10800003 	ldbu	r2,0(r2)
811334f4:	10803fcc 	andi	r2,r2,255
811334f8:	10001126 	beq	r2,zero,81133540 <get_home_directory_cluster_for_file+0x268>
811334fc:	e0fffb04 	addi	r3,fp,-20
81133500:	e0bff904 	addi	r2,fp,-28
81133504:	180d883a 	mov	r6,r3
81133508:	100b883a 	mov	r5,r2
8113350c:	e13fff17 	ldw	r4,-4(fp)
81133510:	11330340 	call	81133034 <match_file_record_to_name_ext>
81133514:	e0bff815 	stw	r2,-32(fp)
81133518:	e0bff817 	ldw	r2,-32(fp)
8113351c:	10000826 	beq	r2,zero,81133540 <get_home_directory_cluster_for_file+0x268>
81133520:	e0bfff17 	ldw	r2,-4(fp)
81133524:	1080058b 	ldhu	r2,22(r2)
81133528:	10bfffcc 	andi	r2,r2,65535
8113352c:	e0bfef15 	stw	r2,-68(fp)
81133530:	e0bfff17 	ldw	r2,-4(fp)
81133534:	00c00044 	movi	r3,1
81133538:	10c00a15 	stw	r3,40(r2)
8113353c:	00000606 	br	81133558 <get_home_directory_cluster_for_file+0x280>
81133540:	e0bff117 	ldw	r2,-60(fp)
81133544:	10800044 	addi	r2,r2,1
81133548:	e0bff115 	stw	r2,-60(fp)
8113354c:	e0bff117 	ldw	r2,-60(fp)
81133550:	10800410 	cmplti	r2,r2,16
81133554:	103fd81e 	bne	r2,zero,811334b8 <__reset+0xfb1134b8>
81133558:	e0ffef17 	ldw	r3,-68(fp)
8113355c:	e0bfea17 	ldw	r2,-88(fp)
81133560:	1880091e 	bne	r3,r2,81133588 <get_home_directory_cluster_for_file+0x2b0>
81133564:	e0bff017 	ldw	r2,-64(fp)
81133568:	10800044 	addi	r2,r2,1
8113356c:	e0bff015 	stw	r2,-64(fp)
81133570:	e0fff017 	ldw	r3,-64(fp)
81133574:	e0bff717 	ldw	r2,-36(fp)
81133578:	18bfc216 	blt	r3,r2,81133484 <__reset+0xfb113484>
8113357c:	00000306 	br	8113358c <get_home_directory_cluster_for_file+0x2b4>
81133580:	0001883a 	nop
81133584:	00000106 	br	8113358c <get_home_directory_cluster_for_file+0x2b4>
81133588:	0001883a 	nop
8113358c:	e0ffef17 	ldw	r3,-68(fp)
81133590:	e0bfea17 	ldw	r2,-88(fp)
81133594:	18800826 	beq	r3,r2,811335b8 <get_home_directory_cluster_for_file+0x2e0>
81133598:	e0bfef17 	ldw	r2,-68(fp)
8113359c:	e0bfea15 	stw	r2,-88(fp)
811335a0:	e0ffed17 	ldw	r3,-76(fp)
811335a4:	e0bfeb17 	ldw	r2,-84(fp)
811335a8:	1885883a 	add	r2,r3,r2
811335ac:	10800044 	addi	r2,r2,1
811335b0:	e0bfed15 	stw	r2,-76(fp)
811335b4:	00007d06 	br	811337ac <get_home_directory_cluster_for_file+0x4d4>
811335b8:	0005883a 	mov	r2,zero
811335bc:	00009106 	br	81133804 <get_home_directory_cluster_for_file+0x52c>
811335c0:	e0bfea17 	ldw	r2,-88(fp)
811335c4:	e0bff415 	stw	r2,-48(fp)
811335c8:	e0bff417 	ldw	r2,-48(fp)
811335cc:	10ffff84 	addi	r3,r2,-2
811335d0:	00a04574 	movhi	r2,33045
811335d4:	108d8504 	addi	r2,r2,13844
811335d8:	10800383 	ldbu	r2,14(r2)
811335dc:	10803fcc 	andi	r2,r2,255
811335e0:	1885383a 	mul	r2,r3,r2
811335e4:	1007883a 	mov	r3,r2
811335e8:	00a04574 	movhi	r2,33045
811335ec:	108d8504 	addi	r2,r2,13844
811335f0:	10801417 	ldw	r2,80(r2)
811335f4:	1885883a 	add	r2,r3,r2
811335f8:	e0bff515 	stw	r2,-44(fp)
811335fc:	e03ff215 	stw	zero,-56(fp)
81133600:	00003606 	br	811336dc <get_home_directory_cluster_for_file+0x404>
81133604:	e0fff217 	ldw	r3,-56(fp)
81133608:	e0bff517 	ldw	r2,-44(fp)
8113360c:	1885883a 	add	r2,r3,r2
81133610:	d0e09317 	ldw	r3,-32180(gp)
81133614:	180b883a 	mov	r5,r3
81133618:	1009883a 	mov	r4,r2
8113361c:	1131b700 	call	81131b70 <Read_Sector_Data>
81133620:	10003526 	beq	r2,zero,811336f8 <get_home_directory_cluster_for_file+0x420>
81133624:	e03ff315 	stw	zero,-52(fp)
81133628:	00002306 	br	811336b8 <get_home_directory_cluster_for_file+0x3e0>
8113362c:	e0bff317 	ldw	r2,-52(fp)
81133630:	1004917a 	slli	r2,r2,5
81133634:	e0fff417 	ldw	r3,-48(fp)
81133638:	e13ff217 	ldw	r4,-56(fp)
8113363c:	200f883a 	mov	r7,r4
81133640:	180d883a 	mov	r6,r3
81133644:	e17fff17 	ldw	r5,-4(fp)
81133648:	1009883a 	mov	r4,r2
8113364c:	1131fa00 	call	81131fa0 <Read_File_Record_At_Offset>
81133650:	e0bfff17 	ldw	r2,-4(fp)
81133654:	10800003 	ldbu	r2,0(r2)
81133658:	10803fcc 	andi	r2,r2,255
8113365c:	10803960 	cmpeqi	r2,r2,229
81133660:	1000121e 	bne	r2,zero,811336ac <get_home_directory_cluster_for_file+0x3d4>
81133664:	e0bfff17 	ldw	r2,-4(fp)
81133668:	10800003 	ldbu	r2,0(r2)
8113366c:	10803fcc 	andi	r2,r2,255
81133670:	10000e26 	beq	r2,zero,811336ac <get_home_directory_cluster_for_file+0x3d4>
81133674:	e0fffb04 	addi	r3,fp,-20
81133678:	e0bff904 	addi	r2,fp,-28
8113367c:	180d883a 	mov	r6,r3
81133680:	100b883a 	mov	r5,r2
81133684:	e13fff17 	ldw	r4,-4(fp)
81133688:	11330340 	call	81133034 <match_file_record_to_name_ext>
8113368c:	e0bff615 	stw	r2,-40(fp)
81133690:	e0bff617 	ldw	r2,-40(fp)
81133694:	10000526 	beq	r2,zero,811336ac <get_home_directory_cluster_for_file+0x3d4>
81133698:	e0bfff17 	ldw	r2,-4(fp)
8113369c:	1080058b 	ldhu	r2,22(r2)
811336a0:	10bfffcc 	andi	r2,r2,65535
811336a4:	e0bfef15 	stw	r2,-68(fp)
811336a8:	00000606 	br	811336c4 <get_home_directory_cluster_for_file+0x3ec>
811336ac:	e0bff317 	ldw	r2,-52(fp)
811336b0:	10800044 	addi	r2,r2,1
811336b4:	e0bff315 	stw	r2,-52(fp)
811336b8:	e0bff317 	ldw	r2,-52(fp)
811336bc:	10800410 	cmplti	r2,r2,16
811336c0:	103fda1e 	bne	r2,zero,8113362c <__reset+0xfb11362c>
811336c4:	e0ffef17 	ldw	r3,-68(fp)
811336c8:	e0bfea17 	ldw	r2,-88(fp)
811336cc:	18800c1e 	bne	r3,r2,81133700 <get_home_directory_cluster_for_file+0x428>
811336d0:	e0bff217 	ldw	r2,-56(fp)
811336d4:	10800044 	addi	r2,r2,1
811336d8:	e0bff215 	stw	r2,-56(fp)
811336dc:	00a04574 	movhi	r2,33045
811336e0:	108d8504 	addi	r2,r2,13844
811336e4:	10800383 	ldbu	r2,14(r2)
811336e8:	10803fcc 	andi	r2,r2,255
811336ec:	e0fff217 	ldw	r3,-56(fp)
811336f0:	18bfc416 	blt	r3,r2,81133604 <__reset+0xfb113604>
811336f4:	00000306 	br	81133704 <get_home_directory_cluster_for_file+0x42c>
811336f8:	0001883a 	nop
811336fc:	00000106 	br	81133704 <get_home_directory_cluster_for_file+0x42c>
81133700:	0001883a 	nop
81133704:	e0ffef17 	ldw	r3,-68(fp)
81133708:	e0bfea17 	ldw	r2,-88(fp)
8113370c:	1880141e 	bne	r3,r2,81133760 <get_home_directory_cluster_for_file+0x488>
81133710:	e0bfef17 	ldw	r2,-68(fp)
81133714:	e0fffc04 	addi	r3,fp,-16
81133718:	180b883a 	mov	r5,r3
8113371c:	1009883a 	mov	r4,r2
81133720:	1131c500 	call	81131c50 <get_cluster_flag>
81133724:	10000c26 	beq	r2,zero,81133758 <get_home_directory_cluster_for_file+0x480>
81133728:	e0bffc0b 	ldhu	r2,-16(fp)
8113372c:	10bfffcc 	andi	r2,r2,65535
81133730:	10fffe0c 	andi	r3,r2,65528
81133734:	00bffe14 	movui	r2,65528
81133738:	1880021e 	bne	r3,r2,81133744 <get_home_directory_cluster_for_file+0x46c>
8113373c:	0005883a 	mov	r2,zero
81133740:	00003006 	br	81133804 <get_home_directory_cluster_for_file+0x52c>
81133744:	e0bffc0b 	ldhu	r2,-16(fp)
81133748:	10bfffcc 	andi	r2,r2,65535
8113374c:	10bffe0c 	andi	r2,r2,65528
81133750:	e0bfef15 	stw	r2,-68(fp)
81133754:	00000206 	br	81133760 <get_home_directory_cluster_for_file+0x488>
81133758:	0005883a 	mov	r2,zero
8113375c:	00002906 	br	81133804 <get_home_directory_cluster_for_file+0x52c>
81133760:	e0bff417 	ldw	r2,-48(fp)
81133764:	00fffdd4 	movui	r3,65527
81133768:	18800316 	blt	r3,r2,81133778 <get_home_directory_cluster_for_file+0x4a0>
8113376c:	e0ffef17 	ldw	r3,-68(fp)
81133770:	e0bfea17 	ldw	r2,-88(fp)
81133774:	18bf9426 	beq	r3,r2,811335c8 <__reset+0xfb1135c8>
81133778:	e0ffef17 	ldw	r3,-68(fp)
8113377c:	e0bfea17 	ldw	r2,-88(fp)
81133780:	18800826 	beq	r3,r2,811337a4 <get_home_directory_cluster_for_file+0x4cc>
81133784:	e0bfef17 	ldw	r2,-68(fp)
81133788:	e0bfea15 	stw	r2,-88(fp)
8113378c:	e0ffed17 	ldw	r3,-76(fp)
81133790:	e0bfeb17 	ldw	r2,-84(fp)
81133794:	1885883a 	add	r2,r3,r2
81133798:	10800044 	addi	r2,r2,1
8113379c:	e0bfed15 	stw	r2,-76(fp)
811337a0:	00000206 	br	811337ac <get_home_directory_cluster_for_file+0x4d4>
811337a4:	0005883a 	mov	r2,zero
811337a8:	00001606 	br	81133804 <get_home_directory_cluster_for_file+0x52c>
811337ac:	e0bfed17 	ldw	r2,-76(fp)
811337b0:	e0fffd17 	ldw	r3,-12(fp)
811337b4:	1885883a 	add	r2,r3,r2
811337b8:	1009883a 	mov	r4,r2
811337bc:	1132f740 	call	81132f74 <get_dir_divider_location>
811337c0:	e0bfeb15 	stw	r2,-84(fp)
811337c4:	e0bfeb17 	ldw	r2,-84(fp)
811337c8:	1000020e 	bge	r2,zero,811337d4 <get_home_directory_cluster_for_file+0x4fc>
811337cc:	00800044 	movi	r2,1
811337d0:	e0bfe915 	stw	r2,-92(fp)
811337d4:	e0bfeb17 	ldw	r2,-84(fp)
811337d8:	00becf16 	blt	zero,r2,81133318 <__reset+0xfb113318>
811337dc:	e0bffe17 	ldw	r2,-8(fp)
811337e0:	e0ffea17 	ldw	r3,-88(fp)
811337e4:	10c00015 	stw	r3,0(r2)
811337e8:	e0bfea17 	ldw	r2,-88(fp)
811337ec:	1000041e 	bne	r2,zero,81133800 <get_home_directory_cluster_for_file+0x528>
811337f0:	e0bfff17 	ldw	r2,-4(fp)
811337f4:	10000a15 	stw	zero,40(r2)
811337f8:	00800044 	movi	r2,1
811337fc:	e0bfe915 	stw	r2,-92(fp)
81133800:	e0bfe917 	ldw	r2,-92(fp)
81133804:	e037883a 	mov	sp,fp
81133808:	dfc00117 	ldw	ra,4(sp)
8113380c:	df000017 	ldw	fp,0(sp)
81133810:	dec00204 	addi	sp,sp,8
81133814:	f800283a 	ret

81133818 <find_file_in_directory>:
81133818:	deffe804 	addi	sp,sp,-96
8113381c:	de00012e 	bgeu	sp,et,81133824 <find_file_in_directory+0xc>
81133820:	003b68fa 	trap	3
81133824:	dfc01715 	stw	ra,92(sp)
81133828:	df001615 	stw	fp,88(sp)
8113382c:	df001604 	addi	fp,sp,88
81133830:	e13ffd15 	stw	r4,-12(fp)
81133834:	e17ffe15 	stw	r5,-8(fp)
81133838:	e1bfff15 	stw	r6,-4(fp)
8113383c:	e13ffe17 	ldw	r4,-8(fp)
81133840:	1132f740 	call	81132f74 <get_dir_divider_location>
81133844:	e0bfea15 	stw	r2,-88(fp)
81133848:	e03feb15 	stw	zero,-84(fp)
8113384c:	00800804 	movi	r2,32
81133850:	e0bff905 	stb	r2,-28(fp)
81133854:	00800804 	movi	r2,32
81133858:	e0bff945 	stb	r2,-27(fp)
8113385c:	00800804 	movi	r2,32
81133860:	e0bff985 	stb	r2,-26(fp)
81133864:	00800804 	movi	r2,32
81133868:	e0bff9c5 	stb	r2,-25(fp)
8113386c:	00800804 	movi	r2,32
81133870:	e0bffa05 	stb	r2,-24(fp)
81133874:	00800804 	movi	r2,32
81133878:	e0bffa45 	stb	r2,-23(fp)
8113387c:	00800804 	movi	r2,32
81133880:	e0bffa85 	stb	r2,-22(fp)
81133884:	00800804 	movi	r2,32
81133888:	e0bffac5 	stb	r2,-21(fp)
8113388c:	00800804 	movi	r2,32
81133890:	e0bffb05 	stb	r2,-20(fp)
81133894:	00800804 	movi	r2,32
81133898:	e0bffb45 	stb	r2,-19(fp)
8113389c:	00800804 	movi	r2,32
811338a0:	e0bffb85 	stb	r2,-18(fp)
811338a4:	00bfffc4 	movi	r2,-1
811338a8:	e0bfec15 	stw	r2,-80(fp)
811338ac:	e0bffd17 	ldw	r2,-12(fp)
811338b0:	e0bfed15 	stw	r2,-76(fp)
811338b4:	e13ffe17 	ldw	r4,-8(fp)
811338b8:	1112a400 	call	81112a40 <strlen>
811338bc:	e0bff415 	stw	r2,-48(fp)
811338c0:	e03fef15 	stw	zero,-68(fp)
811338c4:	00000b06 	br	811338f4 <find_file_in_directory+0xdc>
811338c8:	e0ffeb17 	ldw	r3,-84(fp)
811338cc:	e0bfea17 	ldw	r2,-88(fp)
811338d0:	1885883a 	add	r2,r3,r2
811338d4:	10800044 	addi	r2,r2,1
811338d8:	e0bfeb15 	stw	r2,-84(fp)
811338dc:	e0bfeb17 	ldw	r2,-84(fp)
811338e0:	e0fffe17 	ldw	r3,-8(fp)
811338e4:	1885883a 	add	r2,r3,r2
811338e8:	1009883a 	mov	r4,r2
811338ec:	1132f740 	call	81132f74 <get_dir_divider_location>
811338f0:	e0bfea15 	stw	r2,-88(fp)
811338f4:	e0bfea17 	ldw	r2,-88(fp)
811338f8:	00bff316 	blt	zero,r2,811338c8 <__reset+0xfb1138c8>
811338fc:	e0bfeb17 	ldw	r2,-84(fp)
81133900:	e0bfee15 	stw	r2,-72(fp)
81133904:	00002706 	br	811339a4 <find_file_in_directory+0x18c>
81133908:	e0bfee17 	ldw	r2,-72(fp)
8113390c:	e0fffe17 	ldw	r3,-8(fp)
81133910:	1885883a 	add	r2,r3,r2
81133914:	10800003 	ldbu	r2,0(r2)
81133918:	10803fcc 	andi	r2,r2,255
8113391c:	1080201c 	xori	r2,r2,128
81133920:	10bfe004 	addi	r2,r2,-128
81133924:	10800b98 	cmpnei	r2,r2,46
81133928:	1000031e 	bne	r2,zero,81133938 <find_file_in_directory+0x120>
8113392c:	e0bfee17 	ldw	r2,-72(fp)
81133930:	e0bfec15 	stw	r2,-80(fp)
81133934:	00001806 	br	81133998 <find_file_in_directory+0x180>
81133938:	e0bfec17 	ldw	r2,-80(fp)
8113393c:	10000b0e 	bge	r2,zero,8113396c <find_file_in_directory+0x154>
81133940:	e0ffee17 	ldw	r3,-72(fp)
81133944:	e0bfeb17 	ldw	r2,-84(fp)
81133948:	1885c83a 	sub	r2,r3,r2
8113394c:	e0ffee17 	ldw	r3,-72(fp)
81133950:	e13ffe17 	ldw	r4,-8(fp)
81133954:	20c7883a 	add	r3,r4,r3
81133958:	18c00003 	ldbu	r3,0(r3)
8113395c:	e13ff904 	addi	r4,fp,-28
81133960:	2085883a 	add	r2,r4,r2
81133964:	10c00005 	stb	r3,0(r2)
81133968:	00000b06 	br	81133998 <find_file_in_directory+0x180>
8113396c:	e0ffee17 	ldw	r3,-72(fp)
81133970:	e0bfec17 	ldw	r2,-80(fp)
81133974:	1885c83a 	sub	r2,r3,r2
81133978:	10bfffc4 	addi	r2,r2,-1
8113397c:	e0ffee17 	ldw	r3,-72(fp)
81133980:	e13ffe17 	ldw	r4,-8(fp)
81133984:	20c7883a 	add	r3,r4,r3
81133988:	18c00003 	ldbu	r3,0(r3)
8113398c:	e13ffb04 	addi	r4,fp,-20
81133990:	2085883a 	add	r2,r4,r2
81133994:	10c00005 	stb	r3,0(r2)
81133998:	e0bfee17 	ldw	r2,-72(fp)
8113399c:	10800044 	addi	r2,r2,1
811339a0:	e0bfee15 	stw	r2,-72(fp)
811339a4:	e0ffee17 	ldw	r3,-72(fp)
811339a8:	e0bff417 	ldw	r2,-48(fp)
811339ac:	18bfd616 	blt	r3,r2,81133908 <__reset+0xfb113908>
811339b0:	e0bffd17 	ldw	r2,-12(fp)
811339b4:	1000461e 	bne	r2,zero,81133ad0 <find_file_in_directory+0x2b8>
811339b8:	00a04574 	movhi	r2,33045
811339bc:	108d8504 	addi	r2,r2,13844
811339c0:	1080050b 	ldhu	r2,20(r2)
811339c4:	10bfffcc 	andi	r2,r2,65535
811339c8:	1006917a 	slli	r3,r2,5
811339cc:	00a04574 	movhi	r2,33045
811339d0:	108d8504 	addi	r2,r2,13844
811339d4:	1080030b 	ldhu	r2,12(r2)
811339d8:	10bfffcc 	andi	r2,r2,65535
811339dc:	1885283a 	div	r2,r3,r2
811339e0:	e0bff715 	stw	r2,-36(fp)
811339e4:	e03ff015 	stw	zero,-64(fp)
811339e8:	00003506 	br	81133ac0 <find_file_in_directory+0x2a8>
811339ec:	00a04574 	movhi	r2,33045
811339f0:	108d8504 	addi	r2,r2,13844
811339f4:	10c01317 	ldw	r3,76(r2)
811339f8:	e0bff017 	ldw	r2,-64(fp)
811339fc:	1885883a 	add	r2,r3,r2
81133a00:	1007883a 	mov	r3,r2
81133a04:	d0a09317 	ldw	r2,-32180(gp)
81133a08:	100b883a 	mov	r5,r2
81133a0c:	1809883a 	mov	r4,r3
81133a10:	1131b700 	call	81131b70 <Read_Sector_Data>
81133a14:	10009626 	beq	r2,zero,81133c70 <find_file_in_directory+0x458>
81133a18:	e03ff115 	stw	zero,-60(fp)
81133a1c:	00002006 	br	81133aa0 <find_file_in_directory+0x288>
81133a20:	e0bff117 	ldw	r2,-60(fp)
81133a24:	1004917a 	slli	r2,r2,5
81133a28:	e0fff017 	ldw	r3,-64(fp)
81133a2c:	180f883a 	mov	r7,r3
81133a30:	000d883a 	mov	r6,zero
81133a34:	e17fff17 	ldw	r5,-4(fp)
81133a38:	1009883a 	mov	r4,r2
81133a3c:	1131fa00 	call	81131fa0 <Read_File_Record_At_Offset>
81133a40:	e0bfff17 	ldw	r2,-4(fp)
81133a44:	10800003 	ldbu	r2,0(r2)
81133a48:	10803fcc 	andi	r2,r2,255
81133a4c:	10803960 	cmpeqi	r2,r2,229
81133a50:	1000101e 	bne	r2,zero,81133a94 <find_file_in_directory+0x27c>
81133a54:	e0bfff17 	ldw	r2,-4(fp)
81133a58:	10800003 	ldbu	r2,0(r2)
81133a5c:	10803fcc 	andi	r2,r2,255
81133a60:	10000c26 	beq	r2,zero,81133a94 <find_file_in_directory+0x27c>
81133a64:	e0fffb04 	addi	r3,fp,-20
81133a68:	e0bff904 	addi	r2,fp,-28
81133a6c:	180d883a 	mov	r6,r3
81133a70:	100b883a 	mov	r5,r2
81133a74:	e13fff17 	ldw	r4,-4(fp)
81133a78:	11330340 	call	81133034 <match_file_record_to_name_ext>
81133a7c:	e0bff815 	stw	r2,-32(fp)
81133a80:	e0bff817 	ldw	r2,-32(fp)
81133a84:	10000326 	beq	r2,zero,81133a94 <find_file_in_directory+0x27c>
81133a88:	00800044 	movi	r2,1
81133a8c:	e0bfef15 	stw	r2,-68(fp)
81133a90:	00000606 	br	81133aac <find_file_in_directory+0x294>
81133a94:	e0bff117 	ldw	r2,-60(fp)
81133a98:	10800044 	addi	r2,r2,1
81133a9c:	e0bff115 	stw	r2,-60(fp)
81133aa0:	e0bff117 	ldw	r2,-60(fp)
81133aa4:	10800410 	cmplti	r2,r2,16
81133aa8:	103fdd1e 	bne	r2,zero,81133a20 <__reset+0xfb113a20>
81133aac:	e0bfef17 	ldw	r2,-68(fp)
81133ab0:	1000711e 	bne	r2,zero,81133c78 <find_file_in_directory+0x460>
81133ab4:	e0bff017 	ldw	r2,-64(fp)
81133ab8:	10800044 	addi	r2,r2,1
81133abc:	e0bff015 	stw	r2,-64(fp)
81133ac0:	e0fff017 	ldw	r3,-64(fp)
81133ac4:	e0bff717 	ldw	r2,-36(fp)
81133ac8:	18bfc816 	blt	r3,r2,811339ec <__reset+0xfb1139ec>
81133acc:	00006b06 	br	81133c7c <find_file_in_directory+0x464>
81133ad0:	e0bfed17 	ldw	r2,-76(fp)
81133ad4:	10ffff84 	addi	r3,r2,-2
81133ad8:	00a04574 	movhi	r2,33045
81133adc:	108d8504 	addi	r2,r2,13844
81133ae0:	10800383 	ldbu	r2,14(r2)
81133ae4:	10803fcc 	andi	r2,r2,255
81133ae8:	1885383a 	mul	r2,r3,r2
81133aec:	1007883a 	mov	r3,r2
81133af0:	00a04574 	movhi	r2,33045
81133af4:	108d8504 	addi	r2,r2,13844
81133af8:	10801417 	ldw	r2,80(r2)
81133afc:	1885883a 	add	r2,r3,r2
81133b00:	e0bff515 	stw	r2,-44(fp)
81133b04:	e03ff215 	stw	zero,-56(fp)
81133b08:	00003306 	br	81133bd8 <find_file_in_directory+0x3c0>
81133b0c:	e0fff217 	ldw	r3,-56(fp)
81133b10:	e0bff517 	ldw	r2,-44(fp)
81133b14:	1885883a 	add	r2,r3,r2
81133b18:	d0e09317 	ldw	r3,-32180(gp)
81133b1c:	180b883a 	mov	r5,r3
81133b20:	1009883a 	mov	r4,r2
81133b24:	1131b700 	call	81131b70 <Read_Sector_Data>
81133b28:	10003226 	beq	r2,zero,81133bf4 <find_file_in_directory+0x3dc>
81133b2c:	e03ff315 	stw	zero,-52(fp)
81133b30:	00002106 	br	81133bb8 <find_file_in_directory+0x3a0>
81133b34:	e0bff317 	ldw	r2,-52(fp)
81133b38:	1004917a 	slli	r2,r2,5
81133b3c:	e0ffed17 	ldw	r3,-76(fp)
81133b40:	e13ff217 	ldw	r4,-56(fp)
81133b44:	200f883a 	mov	r7,r4
81133b48:	180d883a 	mov	r6,r3
81133b4c:	e17fff17 	ldw	r5,-4(fp)
81133b50:	1009883a 	mov	r4,r2
81133b54:	1131fa00 	call	81131fa0 <Read_File_Record_At_Offset>
81133b58:	e0bfff17 	ldw	r2,-4(fp)
81133b5c:	10800003 	ldbu	r2,0(r2)
81133b60:	10803fcc 	andi	r2,r2,255
81133b64:	10803960 	cmpeqi	r2,r2,229
81133b68:	1000101e 	bne	r2,zero,81133bac <find_file_in_directory+0x394>
81133b6c:	e0bfff17 	ldw	r2,-4(fp)
81133b70:	10800003 	ldbu	r2,0(r2)
81133b74:	10803fcc 	andi	r2,r2,255
81133b78:	10000c26 	beq	r2,zero,81133bac <find_file_in_directory+0x394>
81133b7c:	e0fffb04 	addi	r3,fp,-20
81133b80:	e0bff904 	addi	r2,fp,-28
81133b84:	180d883a 	mov	r6,r3
81133b88:	100b883a 	mov	r5,r2
81133b8c:	e13fff17 	ldw	r4,-4(fp)
81133b90:	11330340 	call	81133034 <match_file_record_to_name_ext>
81133b94:	e0bff615 	stw	r2,-40(fp)
81133b98:	e0bff617 	ldw	r2,-40(fp)
81133b9c:	10000326 	beq	r2,zero,81133bac <find_file_in_directory+0x394>
81133ba0:	00800044 	movi	r2,1
81133ba4:	e0bfef15 	stw	r2,-68(fp)
81133ba8:	00000606 	br	81133bc4 <find_file_in_directory+0x3ac>
81133bac:	e0bff317 	ldw	r2,-52(fp)
81133bb0:	10800044 	addi	r2,r2,1
81133bb4:	e0bff315 	stw	r2,-52(fp)
81133bb8:	e0bff317 	ldw	r2,-52(fp)
81133bbc:	10800410 	cmplti	r2,r2,16
81133bc0:	103fdc1e 	bne	r2,zero,81133b34 <__reset+0xfb113b34>
81133bc4:	e0bfef17 	ldw	r2,-68(fp)
81133bc8:	10000c1e 	bne	r2,zero,81133bfc <find_file_in_directory+0x3e4>
81133bcc:	e0bff217 	ldw	r2,-56(fp)
81133bd0:	10800044 	addi	r2,r2,1
81133bd4:	e0bff215 	stw	r2,-56(fp)
81133bd8:	00a04574 	movhi	r2,33045
81133bdc:	108d8504 	addi	r2,r2,13844
81133be0:	10800383 	ldbu	r2,14(r2)
81133be4:	10803fcc 	andi	r2,r2,255
81133be8:	e0fff217 	ldw	r3,-56(fp)
81133bec:	18bfc716 	blt	r3,r2,81133b0c <__reset+0xfb113b0c>
81133bf0:	00000306 	br	81133c00 <find_file_in_directory+0x3e8>
81133bf4:	0001883a 	nop
81133bf8:	00000106 	br	81133c00 <find_file_in_directory+0x3e8>
81133bfc:	0001883a 	nop
81133c00:	e0bfef17 	ldw	r2,-68(fp)
81133c04:	1000141e 	bne	r2,zero,81133c58 <find_file_in_directory+0x440>
81133c08:	e0bfed17 	ldw	r2,-76(fp)
81133c0c:	e0fffc04 	addi	r3,fp,-16
81133c10:	180b883a 	mov	r5,r3
81133c14:	1009883a 	mov	r4,r2
81133c18:	1131c500 	call	81131c50 <get_cluster_flag>
81133c1c:	10000c26 	beq	r2,zero,81133c50 <find_file_in_directory+0x438>
81133c20:	e0bffc0b 	ldhu	r2,-16(fp)
81133c24:	10bfffcc 	andi	r2,r2,65535
81133c28:	10fffe0c 	andi	r3,r2,65528
81133c2c:	00bffe14 	movui	r2,65528
81133c30:	1880021e 	bne	r3,r2,81133c3c <find_file_in_directory+0x424>
81133c34:	0005883a 	mov	r2,zero
81133c38:	00001106 	br	81133c80 <find_file_in_directory+0x468>
81133c3c:	e0bffc0b 	ldhu	r2,-16(fp)
81133c40:	10bfffcc 	andi	r2,r2,65535
81133c44:	10bffe0c 	andi	r2,r2,65528
81133c48:	e0bfed15 	stw	r2,-76(fp)
81133c4c:	00000206 	br	81133c58 <find_file_in_directory+0x440>
81133c50:	0005883a 	mov	r2,zero
81133c54:	00000a06 	br	81133c80 <find_file_in_directory+0x468>
81133c58:	e0bfed17 	ldw	r2,-76(fp)
81133c5c:	00fffdd4 	movui	r3,65527
81133c60:	18800616 	blt	r3,r2,81133c7c <find_file_in_directory+0x464>
81133c64:	e0bfef17 	ldw	r2,-68(fp)
81133c68:	103f9926 	beq	r2,zero,81133ad0 <__reset+0xfb113ad0>
81133c6c:	00000306 	br	81133c7c <find_file_in_directory+0x464>
81133c70:	0001883a 	nop
81133c74:	00000106 	br	81133c7c <find_file_in_directory+0x464>
81133c78:	0001883a 	nop
81133c7c:	e0bfef17 	ldw	r2,-68(fp)
81133c80:	e037883a 	mov	sp,fp
81133c84:	dfc00117 	ldw	ra,4(sp)
81133c88:	df000017 	ldw	fp,0(sp)
81133c8c:	dec00204 	addi	sp,sp,8
81133c90:	f800283a 	ret

81133c94 <find_first_empty_cluster>:
81133c94:	defff504 	addi	sp,sp,-44
81133c98:	de00012e 	bgeu	sp,et,81133ca0 <find_first_empty_cluster+0xc>
81133c9c:	003b68fa 	trap	3
81133ca0:	dfc00a15 	stw	ra,40(sp)
81133ca4:	df000915 	stw	fp,36(sp)
81133ca8:	df000904 	addi	fp,sp,36
81133cac:	e13fff15 	stw	r4,-4(fp)
81133cb0:	00a04574 	movhi	r2,33045
81133cb4:	108d8504 	addi	r2,r2,13844
81133cb8:	10801117 	ldw	r2,68(r2)
81133cbc:	e0bff715 	stw	r2,-36(fp)
81133cc0:	00800084 	movi	r2,2
81133cc4:	e0bff815 	stw	r2,-32(fp)
81133cc8:	00bfffc4 	movi	r2,-1
81133ccc:	e0bff90d 	sth	r2,-28(fp)
81133cd0:	e03ffa15 	stw	zero,-24(fp)
81133cd4:	e03ffb15 	stw	zero,-20(fp)
81133cd8:	00a04574 	movhi	r2,33045
81133cdc:	108d8504 	addi	r2,r2,13844
81133ce0:	10801417 	ldw	r2,80(r2)
81133ce4:	e0bffc15 	stw	r2,-16(fp)
81133ce8:	00a04574 	movhi	r2,33045
81133cec:	108d8504 	addi	r2,r2,13844
81133cf0:	1080058b 	ldhu	r2,22(r2)
81133cf4:	10bfffcc 	andi	r2,r2,65535
81133cf8:	e0bffd15 	stw	r2,-12(fp)
81133cfc:	00a04574 	movhi	r2,33045
81133d00:	108d8504 	addi	r2,r2,13844
81133d04:	10800917 	ldw	r2,36(r2)
81133d08:	e0bffe15 	stw	r2,-8(fp)
81133d0c:	e0bffd17 	ldw	r2,-12(fp)
81133d10:	e0fffe17 	ldw	r3,-8(fp)
81133d14:	18800b2e 	bgeu	r3,r2,81133d44 <find_first_empty_cluster+0xb0>
81133d18:	e0fffd17 	ldw	r3,-12(fp)
81133d1c:	e0bffc17 	ldw	r2,-16(fp)
81133d20:	1887c83a 	sub	r3,r3,r2
81133d24:	00a04574 	movhi	r2,33045
81133d28:	108d8504 	addi	r2,r2,13844
81133d2c:	10800383 	ldbu	r2,14(r2)
81133d30:	10803fcc 	andi	r2,r2,255
81133d34:	1885203a 	divu	r2,r3,r2
81133d38:	10800044 	addi	r2,r2,1
81133d3c:	e0bffb15 	stw	r2,-20(fp)
81133d40:	00002a06 	br	81133dec <find_first_empty_cluster+0x158>
81133d44:	e0fffe17 	ldw	r3,-8(fp)
81133d48:	e0bffc17 	ldw	r2,-16(fp)
81133d4c:	1887c83a 	sub	r3,r3,r2
81133d50:	00a04574 	movhi	r2,33045
81133d54:	108d8504 	addi	r2,r2,13844
81133d58:	10800383 	ldbu	r2,14(r2)
81133d5c:	10803fcc 	andi	r2,r2,255
81133d60:	1885203a 	divu	r2,r3,r2
81133d64:	10800044 	addi	r2,r2,1
81133d68:	e0bffb15 	stw	r2,-20(fp)
81133d6c:	00001f06 	br	81133dec <find_first_empty_cluster+0x158>
81133d70:	e0bff717 	ldw	r2,-36(fp)
81133d74:	d0e09317 	ldw	r3,-32180(gp)
81133d78:	180b883a 	mov	r5,r3
81133d7c:	1009883a 	mov	r4,r2
81133d80:	1131b700 	call	81131b70 <Read_Sector_Data>
81133d84:	10001426 	beq	r2,zero,81133dd8 <find_first_empty_cluster+0x144>
81133d88:	e0bff817 	ldw	r2,-32(fp)
81133d8c:	10803fcc 	andi	r2,r2,255
81133d90:	1085883a 	add	r2,r2,r2
81133d94:	1007883a 	mov	r3,r2
81133d98:	d0a09517 	ldw	r2,-32172(gp)
81133d9c:	10800a17 	ldw	r2,40(r2)
81133da0:	1885883a 	add	r2,r3,r2
81133da4:	1080002b 	ldhuio	r2,0(r2)
81133da8:	10bfffcc 	andi	r2,r2,65535
81133dac:	e0bff90d 	sth	r2,-28(fp)
81133db0:	e0bff90f 	ldh	r2,-28(fp)
81133db4:	10000726 	beq	r2,zero,81133dd4 <find_first_empty_cluster+0x140>
81133db8:	e0bff817 	ldw	r2,-32(fp)
81133dbc:	10800044 	addi	r2,r2,1
81133dc0:	e0bff815 	stw	r2,-32(fp)
81133dc4:	e0bff817 	ldw	r2,-32(fp)
81133dc8:	10803fcc 	andi	r2,r2,255
81133dcc:	103fee1e 	bne	r2,zero,81133d88 <__reset+0xfb113d88>
81133dd0:	00000106 	br	81133dd8 <find_first_empty_cluster+0x144>
81133dd4:	0001883a 	nop
81133dd8:	e0bff90f 	ldh	r2,-28(fp)
81133ddc:	10000926 	beq	r2,zero,81133e04 <find_first_empty_cluster+0x170>
81133de0:	e0bff717 	ldw	r2,-36(fp)
81133de4:	10800044 	addi	r2,r2,1
81133de8:	e0bff715 	stw	r2,-36(fp)
81133dec:	00a04574 	movhi	r2,33045
81133df0:	108d8504 	addi	r2,r2,13844
81133df4:	10c01217 	ldw	r3,72(r2)
81133df8:	e0bff717 	ldw	r2,-36(fp)
81133dfc:	18bfdc1e 	bne	r3,r2,81133d70 <__reset+0xfb113d70>
81133e00:	00000106 	br	81133e08 <find_first_empty_cluster+0x174>
81133e04:	0001883a 	nop
81133e08:	e0bff90f 	ldh	r2,-28(fp)
81133e0c:	1000081e 	bne	r2,zero,81133e30 <find_first_empty_cluster+0x19c>
81133e10:	e0bff90f 	ldh	r2,-28(fp)
81133e14:	e0fffb17 	ldw	r3,-20(fp)
81133e18:	18800536 	bltu	r3,r2,81133e30 <find_first_empty_cluster+0x19c>
81133e1c:	e0bfff17 	ldw	r2,-4(fp)
81133e20:	e0fff817 	ldw	r3,-32(fp)
81133e24:	10c00015 	stw	r3,0(r2)
81133e28:	00800044 	movi	r2,1
81133e2c:	e0bffa15 	stw	r2,-24(fp)
81133e30:	e0bffa17 	ldw	r2,-24(fp)
81133e34:	e037883a 	mov	sp,fp
81133e38:	dfc00117 	ldw	ra,4(sp)
81133e3c:	df000017 	ldw	fp,0(sp)
81133e40:	dec00204 	addi	sp,sp,8
81133e44:	f800283a 	ret

81133e48 <find_first_empty_record_in_a_subdirectory>:
81133e48:	defff604 	addi	sp,sp,-40
81133e4c:	de00012e 	bgeu	sp,et,81133e54 <find_first_empty_record_in_a_subdirectory+0xc>
81133e50:	003b68fa 	trap	3
81133e54:	dfc00915 	stw	ra,36(sp)
81133e58:	df000815 	stw	fp,32(sp)
81133e5c:	df000804 	addi	fp,sp,32
81133e60:	e13fff15 	stw	r4,-4(fp)
81133e64:	00bfffc4 	movi	r2,-1
81133e68:	e0bff815 	stw	r2,-32(fp)
81133e6c:	e0bfff17 	ldw	r2,-4(fp)
81133e70:	e0bff915 	stw	r2,-28(fp)
81133e74:	e0bff917 	ldw	r2,-28(fp)
81133e78:	10ffff84 	addi	r3,r2,-2
81133e7c:	00a04574 	movhi	r2,33045
81133e80:	108d8504 	addi	r2,r2,13844
81133e84:	10800383 	ldbu	r2,14(r2)
81133e88:	10803fcc 	andi	r2,r2,255
81133e8c:	1885383a 	mul	r2,r3,r2
81133e90:	1007883a 	mov	r3,r2
81133e94:	00a04574 	movhi	r2,33045
81133e98:	108d8504 	addi	r2,r2,13844
81133e9c:	10801417 	ldw	r2,80(r2)
81133ea0:	1885883a 	add	r2,r3,r2
81133ea4:	e0bffc15 	stw	r2,-16(fp)
81133ea8:	e03ffa15 	stw	zero,-24(fp)
81133eac:	00002c06 	br	81133f60 <find_first_empty_record_in_a_subdirectory+0x118>
81133eb0:	e0fffa17 	ldw	r3,-24(fp)
81133eb4:	e0bffc17 	ldw	r2,-16(fp)
81133eb8:	1885883a 	add	r2,r3,r2
81133ebc:	d0e09317 	ldw	r3,-32180(gp)
81133ec0:	180b883a 	mov	r5,r3
81133ec4:	1009883a 	mov	r4,r2
81133ec8:	1131b700 	call	81131b70 <Read_Sector_Data>
81133ecc:	10002b26 	beq	r2,zero,81133f7c <find_first_empty_record_in_a_subdirectory+0x134>
81133ed0:	e03ffb15 	stw	zero,-20(fp)
81133ed4:	00001c06 	br	81133f48 <find_first_empty_record_in_a_subdirectory+0x100>
81133ed8:	e0bffb17 	ldw	r2,-20(fp)
81133edc:	1004917a 	slli	r2,r2,5
81133ee0:	1007883a 	mov	r3,r2
81133ee4:	d0a09517 	ldw	r2,-32172(gp)
81133ee8:	10800a17 	ldw	r2,40(r2)
81133eec:	1885883a 	add	r2,r3,r2
81133ef0:	10800023 	ldbuio	r2,0(r2)
81133ef4:	10803fcc 	andi	r2,r2,255
81133ef8:	10803fcc 	andi	r2,r2,255
81133efc:	e0bffd0d 	sth	r2,-12(fp)
81133f00:	e0bffd0b 	ldhu	r2,-12(fp)
81133f04:	10803960 	cmpeqi	r2,r2,229
81133f08:	1000021e 	bne	r2,zero,81133f14 <find_first_empty_record_in_a_subdirectory+0xcc>
81133f0c:	e0bffd0b 	ldhu	r2,-12(fp)
81133f10:	10000a1e 	bne	r2,zero,81133f3c <find_first_empty_record_in_a_subdirectory+0xf4>
81133f14:	e0bffa17 	ldw	r2,-24(fp)
81133f18:	1006913a 	slli	r3,r2,4
81133f1c:	e0bffb17 	ldw	r2,-20(fp)
81133f20:	1885883a 	add	r2,r3,r2
81133f24:	1006943a 	slli	r3,r2,16
81133f28:	e0bff917 	ldw	r2,-28(fp)
81133f2c:	1884b03a 	or	r2,r3,r2
81133f30:	e0bff815 	stw	r2,-32(fp)
81133f34:	e0bff817 	ldw	r2,-32(fp)
81133f38:	00005306 	br	81134088 <find_first_empty_record_in_a_subdirectory+0x240>
81133f3c:	e0bffb17 	ldw	r2,-20(fp)
81133f40:	10800044 	addi	r2,r2,1
81133f44:	e0bffb15 	stw	r2,-20(fp)
81133f48:	e0bffb17 	ldw	r2,-20(fp)
81133f4c:	10800410 	cmplti	r2,r2,16
81133f50:	103fe11e 	bne	r2,zero,81133ed8 <__reset+0xfb113ed8>
81133f54:	e0bffa17 	ldw	r2,-24(fp)
81133f58:	10800044 	addi	r2,r2,1
81133f5c:	e0bffa15 	stw	r2,-24(fp)
81133f60:	00a04574 	movhi	r2,33045
81133f64:	108d8504 	addi	r2,r2,13844
81133f68:	10800383 	ldbu	r2,14(r2)
81133f6c:	10803fcc 	andi	r2,r2,255
81133f70:	e0fffa17 	ldw	r3,-24(fp)
81133f74:	18bfce16 	blt	r3,r2,81133eb0 <__reset+0xfb113eb0>
81133f78:	00000106 	br	81133f80 <find_first_empty_record_in_a_subdirectory+0x138>
81133f7c:	0001883a 	nop
81133f80:	e0bff817 	ldw	r2,-32(fp)
81133f84:	1000390e 	bge	r2,zero,8113406c <find_first_empty_record_in_a_subdirectory+0x224>
81133f88:	e0bff917 	ldw	r2,-28(fp)
81133f8c:	e0fffd84 	addi	r3,fp,-10
81133f90:	180b883a 	mov	r5,r3
81133f94:	1009883a 	mov	r4,r2
81133f98:	1131c500 	call	81131c50 <get_cluster_flag>
81133f9c:	10003126 	beq	r2,zero,81134064 <find_first_empty_record_in_a_subdirectory+0x21c>
81133fa0:	e0bffd8b 	ldhu	r2,-10(fp)
81133fa4:	10bfffcc 	andi	r2,r2,65535
81133fa8:	10fffe0c 	andi	r3,r2,65528
81133fac:	00bffe14 	movui	r2,65528
81133fb0:	18802e1e 	bne	r3,r2,8113406c <find_first_empty_record_in_a_subdirectory+0x224>
81133fb4:	e0bffe04 	addi	r2,fp,-8
81133fb8:	1009883a 	mov	r4,r2
81133fbc:	1133c940 	call	81133c94 <find_first_empty_cluster>
81133fc0:	10002326 	beq	r2,zero,81134050 <find_first_empty_record_in_a_subdirectory+0x208>
81133fc4:	e0bff917 	ldw	r2,-28(fp)
81133fc8:	e0fffe17 	ldw	r3,-8(fp)
81133fcc:	18ffffcc 	andi	r3,r3,65535
81133fd0:	18e0001c 	xori	r3,r3,32768
81133fd4:	18e00004 	addi	r3,r3,-32768
81133fd8:	01800044 	movi	r6,1
81133fdc:	180b883a 	mov	r5,r3
81133fe0:	1009883a 	mov	r4,r2
81133fe4:	1131d0c0 	call	81131d0c <mark_cluster>
81133fe8:	10001926 	beq	r2,zero,81134050 <find_first_empty_record_in_a_subdirectory+0x208>
81133fec:	e0bffe17 	ldw	r2,-8(fp)
81133ff0:	01800044 	movi	r6,1
81133ff4:	017fffc4 	movi	r5,-1
81133ff8:	1009883a 	mov	r4,r2
81133ffc:	1131d0c0 	call	81131d0c <mark_cluster>
81134000:	10001326 	beq	r2,zero,81134050 <find_first_empty_record_in_a_subdirectory+0x208>
81134004:	e0bff917 	ldw	r2,-28(fp)
81134008:	e0fffe17 	ldw	r3,-8(fp)
8113400c:	18ffffcc 	andi	r3,r3,65535
81134010:	18e0001c 	xori	r3,r3,32768
81134014:	18e00004 	addi	r3,r3,-32768
81134018:	000d883a 	mov	r6,zero
8113401c:	180b883a 	mov	r5,r3
81134020:	1009883a 	mov	r4,r2
81134024:	1131d0c0 	call	81131d0c <mark_cluster>
81134028:	10000926 	beq	r2,zero,81134050 <find_first_empty_record_in_a_subdirectory+0x208>
8113402c:	e0bffe17 	ldw	r2,-8(fp)
81134030:	000d883a 	mov	r6,zero
81134034:	017fffc4 	movi	r5,-1
81134038:	1009883a 	mov	r4,r2
8113403c:	1131d0c0 	call	81131d0c <mark_cluster>
81134040:	10000326 	beq	r2,zero,81134050 <find_first_empty_record_in_a_subdirectory+0x208>
81134044:	1131b1c0 	call	81131b1c <Save_Modified_Sector>
81134048:	e0bffe17 	ldw	r2,-8(fp)
8113404c:	e0bff815 	stw	r2,-32(fp)
81134050:	e0bffd8b 	ldhu	r2,-10(fp)
81134054:	10bfffcc 	andi	r2,r2,65535
81134058:	10bffe0c 	andi	r2,r2,65528
8113405c:	e0bff915 	stw	r2,-28(fp)
81134060:	00000206 	br	8113406c <find_first_empty_record_in_a_subdirectory+0x224>
81134064:	00bfffc4 	movi	r2,-1
81134068:	e0bff815 	stw	r2,-32(fp)
8113406c:	e0bff917 	ldw	r2,-28(fp)
81134070:	00fffdd4 	movui	r3,65527
81134074:	18800316 	blt	r3,r2,81134084 <find_first_empty_record_in_a_subdirectory+0x23c>
81134078:	e0bff817 	ldw	r2,-32(fp)
8113407c:	10bfffe0 	cmpeqi	r2,r2,-1
81134080:	103f7c1e 	bne	r2,zero,81133e74 <__reset+0xfb113e74>
81134084:	e0bff817 	ldw	r2,-32(fp)
81134088:	e037883a 	mov	sp,fp
8113408c:	dfc00117 	ldw	ra,4(sp)
81134090:	df000017 	ldw	fp,0(sp)
81134094:	dec00204 	addi	sp,sp,8
81134098:	f800283a 	ret

8113409c <find_first_empty_record_in_root_directory>:
8113409c:	defff904 	addi	sp,sp,-28
811340a0:	de00012e 	bgeu	sp,et,811340a8 <find_first_empty_record_in_root_directory+0xc>
811340a4:	003b68fa 	trap	3
811340a8:	dfc00615 	stw	ra,24(sp)
811340ac:	df000515 	stw	fp,20(sp)
811340b0:	df000504 	addi	fp,sp,20
811340b4:	00a04574 	movhi	r2,33045
811340b8:	108d8504 	addi	r2,r2,13844
811340bc:	1080050b 	ldhu	r2,20(r2)
811340c0:	10bfffcc 	andi	r2,r2,65535
811340c4:	1006917a 	slli	r3,r2,5
811340c8:	00a04574 	movhi	r2,33045
811340cc:	108d8504 	addi	r2,r2,13844
811340d0:	1080030b 	ldhu	r2,12(r2)
811340d4:	10bfffcc 	andi	r2,r2,65535
811340d8:	1885283a 	div	r2,r3,r2
811340dc:	e0bffd15 	stw	r2,-12(fp)
811340e0:	00bfffc4 	movi	r2,-1
811340e4:	e0bffe15 	stw	r2,-8(fp)
811340e8:	e03ffb15 	stw	zero,-20(fp)
811340ec:	00002d06 	br	811341a4 <find_first_empty_record_in_root_directory+0x108>
811340f0:	00a04574 	movhi	r2,33045
811340f4:	108d8504 	addi	r2,r2,13844
811340f8:	10c01317 	ldw	r3,76(r2)
811340fc:	e0bffb17 	ldw	r2,-20(fp)
81134100:	1885883a 	add	r2,r3,r2
81134104:	1007883a 	mov	r3,r2
81134108:	d0a09317 	ldw	r2,-32180(gp)
8113410c:	100b883a 	mov	r5,r2
81134110:	1809883a 	mov	r4,r3
81134114:	1131b700 	call	81131b70 <Read_Sector_Data>
81134118:	10002626 	beq	r2,zero,811341b4 <find_first_empty_record_in_root_directory+0x118>
8113411c:	e03ffc15 	stw	zero,-16(fp)
81134120:	00001a06 	br	8113418c <find_first_empty_record_in_root_directory+0xf0>
81134124:	e0bffc17 	ldw	r2,-16(fp)
81134128:	1004917a 	slli	r2,r2,5
8113412c:	1007883a 	mov	r3,r2
81134130:	d0a09517 	ldw	r2,-32172(gp)
81134134:	10800a17 	ldw	r2,40(r2)
81134138:	1885883a 	add	r2,r3,r2
8113413c:	10800023 	ldbuio	r2,0(r2)
81134140:	10803fcc 	andi	r2,r2,255
81134144:	10803fcc 	andi	r2,r2,255
81134148:	e0bfff0d 	sth	r2,-4(fp)
8113414c:	e0bfff0b 	ldhu	r2,-4(fp)
81134150:	10803960 	cmpeqi	r2,r2,229
81134154:	1000021e 	bne	r2,zero,81134160 <find_first_empty_record_in_root_directory+0xc4>
81134158:	e0bfff0b 	ldhu	r2,-4(fp)
8113415c:	1000081e 	bne	r2,zero,81134180 <find_first_empty_record_in_root_directory+0xe4>
81134160:	e0bffb17 	ldw	r2,-20(fp)
81134164:	1006913a 	slli	r3,r2,4
81134168:	e0bffc17 	ldw	r2,-16(fp)
8113416c:	1885883a 	add	r2,r3,r2
81134170:	1004943a 	slli	r2,r2,16
81134174:	e0bffe15 	stw	r2,-8(fp)
81134178:	e0bffe17 	ldw	r2,-8(fp)
8113417c:	00000f06 	br	811341bc <find_first_empty_record_in_root_directory+0x120>
81134180:	e0bffc17 	ldw	r2,-16(fp)
81134184:	10800044 	addi	r2,r2,1
81134188:	e0bffc15 	stw	r2,-16(fp)
8113418c:	e0bffc17 	ldw	r2,-16(fp)
81134190:	10800410 	cmplti	r2,r2,16
81134194:	103fe31e 	bne	r2,zero,81134124 <__reset+0xfb114124>
81134198:	e0bffb17 	ldw	r2,-20(fp)
8113419c:	10800044 	addi	r2,r2,1
811341a0:	e0bffb15 	stw	r2,-20(fp)
811341a4:	e0fffb17 	ldw	r3,-20(fp)
811341a8:	e0bffd17 	ldw	r2,-12(fp)
811341ac:	18bfd016 	blt	r3,r2,811340f0 <__reset+0xfb1140f0>
811341b0:	00000106 	br	811341b8 <find_first_empty_record_in_root_directory+0x11c>
811341b4:	0001883a 	nop
811341b8:	e0bffe17 	ldw	r2,-8(fp)
811341bc:	e037883a 	mov	sp,fp
811341c0:	dfc00117 	ldw	ra,4(sp)
811341c4:	df000017 	ldw	fp,0(sp)
811341c8:	dec00204 	addi	sp,sp,8
811341cc:	f800283a 	ret

811341d0 <convert_filename_to_name_extension>:
811341d0:	defffa04 	addi	sp,sp,-24
811341d4:	de00012e 	bgeu	sp,et,811341dc <convert_filename_to_name_extension+0xc>
811341d8:	003b68fa 	trap	3
811341dc:	df000515 	stw	fp,20(sp)
811341e0:	df000504 	addi	fp,sp,20
811341e4:	e13ffd15 	stw	r4,-12(fp)
811341e8:	e17ffe15 	stw	r5,-8(fp)
811341ec:	e1bfff15 	stw	r6,-4(fp)
811341f0:	e03ffc15 	stw	zero,-16(fp)
811341f4:	e03ffb15 	stw	zero,-20(fp)
811341f8:	00002506 	br	81134290 <convert_filename_to_name_extension+0xc0>
811341fc:	e0bffc17 	ldw	r2,-16(fp)
81134200:	e0fffd17 	ldw	r3,-12(fp)
81134204:	1885883a 	add	r2,r3,r2
81134208:	10800003 	ldbu	r2,0(r2)
8113420c:	10803fcc 	andi	r2,r2,255
81134210:	1080201c 	xori	r2,r2,128
81134214:	10bfe004 	addi	r2,r2,-128
81134218:	10800ba0 	cmpeqi	r2,r2,46
8113421c:	1000141e 	bne	r2,zero,81134270 <convert_filename_to_name_extension+0xa0>
81134220:	e0bffb17 	ldw	r2,-20(fp)
81134224:	e0fffe17 	ldw	r3,-8(fp)
81134228:	1885883a 	add	r2,r3,r2
8113422c:	e0fffc17 	ldw	r3,-16(fp)
81134230:	e13ffd17 	ldw	r4,-12(fp)
81134234:	20c7883a 	add	r3,r4,r3
81134238:	18c00003 	ldbu	r3,0(r3)
8113423c:	10c00005 	stb	r3,0(r2)
81134240:	e0bffc17 	ldw	r2,-16(fp)
81134244:	e0fffd17 	ldw	r3,-12(fp)
81134248:	1885883a 	add	r2,r3,r2
8113424c:	10800003 	ldbu	r2,0(r2)
81134250:	10803fcc 	andi	r2,r2,255
81134254:	1080201c 	xori	r2,r2,128
81134258:	10bfe004 	addi	r2,r2,-128
8113425c:	10000926 	beq	r2,zero,81134284 <convert_filename_to_name_extension+0xb4>
81134260:	e0bffc17 	ldw	r2,-16(fp)
81134264:	10800044 	addi	r2,r2,1
81134268:	e0bffc15 	stw	r2,-16(fp)
8113426c:	00000506 	br	81134284 <convert_filename_to_name_extension+0xb4>
81134270:	e0bffb17 	ldw	r2,-20(fp)
81134274:	e0fffe17 	ldw	r3,-8(fp)
81134278:	1885883a 	add	r2,r3,r2
8113427c:	00c00804 	movi	r3,32
81134280:	10c00005 	stb	r3,0(r2)
81134284:	e0bffb17 	ldw	r2,-20(fp)
81134288:	10800044 	addi	r2,r2,1
8113428c:	e0bffb15 	stw	r2,-20(fp)
81134290:	e0bffb17 	ldw	r2,-20(fp)
81134294:	10800210 	cmplti	r2,r2,8
81134298:	103fd81e 	bne	r2,zero,811341fc <__reset+0xfb1141fc>
8113429c:	e0bffc17 	ldw	r2,-16(fp)
811342a0:	e0fffd17 	ldw	r3,-12(fp)
811342a4:	1885883a 	add	r2,r3,r2
811342a8:	10800003 	ldbu	r2,0(r2)
811342ac:	10803fcc 	andi	r2,r2,255
811342b0:	1080201c 	xori	r2,r2,128
811342b4:	10bfe004 	addi	r2,r2,-128
811342b8:	10800b98 	cmpnei	r2,r2,46
811342bc:	1000031e 	bne	r2,zero,811342cc <convert_filename_to_name_extension+0xfc>
811342c0:	e0bffc17 	ldw	r2,-16(fp)
811342c4:	10800044 	addi	r2,r2,1
811342c8:	e0bffc15 	stw	r2,-16(fp)
811342cc:	e03ffb15 	stw	zero,-20(fp)
811342d0:	00001c06 	br	81134344 <convert_filename_to_name_extension+0x174>
811342d4:	e0bffc17 	ldw	r2,-16(fp)
811342d8:	e0fffd17 	ldw	r3,-12(fp)
811342dc:	1885883a 	add	r2,r3,r2
811342e0:	10800003 	ldbu	r2,0(r2)
811342e4:	10803fcc 	andi	r2,r2,255
811342e8:	1080201c 	xori	r2,r2,128
811342ec:	10bfe004 	addi	r2,r2,-128
811342f0:	10000c26 	beq	r2,zero,81134324 <convert_filename_to_name_extension+0x154>
811342f4:	e0bffb17 	ldw	r2,-20(fp)
811342f8:	e0ffff17 	ldw	r3,-4(fp)
811342fc:	1885883a 	add	r2,r3,r2
81134300:	e0fffc17 	ldw	r3,-16(fp)
81134304:	e13ffd17 	ldw	r4,-12(fp)
81134308:	20c7883a 	add	r3,r4,r3
8113430c:	18c00003 	ldbu	r3,0(r3)
81134310:	10c00005 	stb	r3,0(r2)
81134314:	e0bffc17 	ldw	r2,-16(fp)
81134318:	10800044 	addi	r2,r2,1
8113431c:	e0bffc15 	stw	r2,-16(fp)
81134320:	00000506 	br	81134338 <convert_filename_to_name_extension+0x168>
81134324:	e0bffb17 	ldw	r2,-20(fp)
81134328:	e0ffff17 	ldw	r3,-4(fp)
8113432c:	1885883a 	add	r2,r3,r2
81134330:	00c00804 	movi	r3,32
81134334:	10c00005 	stb	r3,0(r2)
81134338:	e0bffb17 	ldw	r2,-20(fp)
8113433c:	10800044 	addi	r2,r2,1
81134340:	e0bffb15 	stw	r2,-20(fp)
81134344:	e0bffb17 	ldw	r2,-20(fp)
81134348:	108000d0 	cmplti	r2,r2,3
8113434c:	103fe11e 	bne	r2,zero,811342d4 <__reset+0xfb1142d4>
81134350:	0001883a 	nop
81134354:	e037883a 	mov	sp,fp
81134358:	df000017 	ldw	fp,0(sp)
8113435c:	dec00104 	addi	sp,sp,4
81134360:	f800283a 	ret

81134364 <create_file>:
81134364:	defff504 	addi	sp,sp,-44
81134368:	de00012e 	bgeu	sp,et,81134370 <create_file+0xc>
8113436c:	003b68fa 	trap	3
81134370:	dfc00a15 	stw	ra,40(sp)
81134374:	df000915 	stw	fp,36(sp)
81134378:	df000904 	addi	fp,sp,36
8113437c:	e13ffd15 	stw	r4,-12(fp)
81134380:	e17ffe15 	stw	r5,-8(fp)
81134384:	e1bfff15 	stw	r6,-4(fp)
81134388:	e03ff715 	stw	zero,-36(fp)
8113438c:	e0bffc04 	addi	r2,fp,-16
81134390:	1009883a 	mov	r4,r2
81134394:	1133c940 	call	81133c94 <find_first_empty_cluster>
81134398:	1000a026 	beq	r2,zero,8113461c <create_file+0x2b8>
8113439c:	e0bfff17 	ldw	r2,-4(fp)
811343a0:	10800a17 	ldw	r2,40(r2)
811343a4:	1000031e 	bne	r2,zero,811343b4 <create_file+0x50>
811343a8:	113409c0 	call	8113409c <find_first_empty_record_in_root_directory>
811343ac:	e0bff815 	stw	r2,-32(fp)
811343b0:	00000606 	br	811343cc <create_file+0x68>
811343b4:	e0bfff17 	ldw	r2,-4(fp)
811343b8:	1080058b 	ldhu	r2,22(r2)
811343bc:	10bfffcc 	andi	r2,r2,65535
811343c0:	1009883a 	mov	r4,r2
811343c4:	1133e480 	call	81133e48 <find_first_empty_record_in_a_subdirectory>
811343c8:	e0bff815 	stw	r2,-32(fp)
811343cc:	e0bff817 	ldw	r2,-32(fp)
811343d0:	10009216 	blt	r2,zero,8113461c <create_file+0x2b8>
811343d4:	e13ffd17 	ldw	r4,-12(fp)
811343d8:	1132f740 	call	81132f74 <get_dir_divider_location>
811343dc:	e0bff915 	stw	r2,-28(fp)
811343e0:	e03ffa15 	stw	zero,-24(fp)
811343e4:	00000b06 	br	81134414 <create_file+0xb0>
811343e8:	e0fffa17 	ldw	r3,-24(fp)
811343ec:	e0bff917 	ldw	r2,-28(fp)
811343f0:	1885883a 	add	r2,r3,r2
811343f4:	10800044 	addi	r2,r2,1
811343f8:	e0bffa15 	stw	r2,-24(fp)
811343fc:	e0bffa17 	ldw	r2,-24(fp)
81134400:	e0fffd17 	ldw	r3,-12(fp)
81134404:	1885883a 	add	r2,r3,r2
81134408:	1009883a 	mov	r4,r2
8113440c:	1132f740 	call	81132f74 <get_dir_divider_location>
81134410:	e0bff915 	stw	r2,-28(fp)
81134414:	e0bff917 	ldw	r2,-28(fp)
81134418:	00bff316 	blt	zero,r2,811343e8 <__reset+0xfb1143e8>
8113441c:	e0bffa17 	ldw	r2,-24(fp)
81134420:	e0fffd17 	ldw	r3,-12(fp)
81134424:	1887883a 	add	r3,r3,r2
81134428:	e13ffe17 	ldw	r4,-8(fp)
8113442c:	e0bffe17 	ldw	r2,-8(fp)
81134430:	10800204 	addi	r2,r2,8
81134434:	100d883a 	mov	r6,r2
81134438:	200b883a 	mov	r5,r4
8113443c:	1809883a 	mov	r4,r3
81134440:	11341d00 	call	811341d0 <convert_filename_to_name_extension>
81134444:	e0bffe17 	ldw	r2,-8(fp)
81134448:	100002c5 	stb	zero,11(r2)
8113444c:	e0bffe17 	ldw	r2,-8(fp)
81134450:	1000030d 	sth	zero,12(r2)
81134454:	e0bffe17 	ldw	r2,-8(fp)
81134458:	1000038d 	sth	zero,14(r2)
8113445c:	e0bffe17 	ldw	r2,-8(fp)
81134460:	1000040d 	sth	zero,16(r2)
81134464:	e0bffe17 	ldw	r2,-8(fp)
81134468:	1000048d 	sth	zero,18(r2)
8113446c:	e0bffe17 	ldw	r2,-8(fp)
81134470:	1000050d 	sth	zero,20(r2)
81134474:	e0bffc17 	ldw	r2,-16(fp)
81134478:	1007883a 	mov	r3,r2
8113447c:	e0bffe17 	ldw	r2,-8(fp)
81134480:	10c0058d 	sth	r3,22(r2)
81134484:	e0bffe17 	ldw	r2,-8(fp)
81134488:	10000615 	stw	zero,24(r2)
8113448c:	e0fffc17 	ldw	r3,-16(fp)
81134490:	e0bffe17 	ldw	r2,-8(fp)
81134494:	10c00715 	stw	r3,28(r2)
81134498:	e0bffe17 	ldw	r2,-8(fp)
8113449c:	10000815 	stw	zero,32(r2)
811344a0:	e0bffe17 	ldw	r2,-8(fp)
811344a4:	10000915 	stw	zero,36(r2)
811344a8:	e0bff817 	ldw	r2,-32(fp)
811344ac:	10ffffcc 	andi	r3,r2,65535
811344b0:	e0bffe17 	ldw	r2,-8(fp)
811344b4:	10c00a15 	stw	r3,40(r2)
811344b8:	e0bff817 	ldw	r2,-32(fp)
811344bc:	1004d43a 	srli	r2,r2,16
811344c0:	1000010e 	bge	r2,zero,811344c8 <create_file+0x164>
811344c4:	108003c4 	addi	r2,r2,15
811344c8:	1005d13a 	srai	r2,r2,4
811344cc:	1007883a 	mov	r3,r2
811344d0:	e0bffe17 	ldw	r2,-8(fp)
811344d4:	10c00b15 	stw	r3,44(r2)
811344d8:	e0bff817 	ldw	r2,-32(fp)
811344dc:	1004d43a 	srli	r2,r2,16
811344e0:	1007883a 	mov	r3,r2
811344e4:	00a00034 	movhi	r2,32768
811344e8:	108003c4 	addi	r2,r2,15
811344ec:	1884703a 	and	r2,r3,r2
811344f0:	1000040e 	bge	r2,zero,81134504 <create_file+0x1a0>
811344f4:	10bfffc4 	addi	r2,r2,-1
811344f8:	00fffc04 	movi	r3,-16
811344fc:	10c4b03a 	or	r2,r2,r3
81134500:	10800044 	addi	r2,r2,1
81134504:	1004917a 	slli	r2,r2,5
81134508:	1007883a 	mov	r3,r2
8113450c:	e0bffe17 	ldw	r2,-8(fp)
81134510:	10c00c0d 	sth	r3,48(r2)
81134514:	e0bfff17 	ldw	r2,-4(fp)
81134518:	1080058b 	ldhu	r2,22(r2)
8113451c:	10ffffcc 	andi	r3,r2,65535
81134520:	e0bffe17 	ldw	r2,-8(fp)
81134524:	10c00d15 	stw	r3,52(r2)
81134528:	e0bffe17 	ldw	r2,-8(fp)
8113452c:	00c00044 	movi	r3,1
81134530:	10c00f15 	stw	r3,60(r2)
81134534:	e0bffe17 	ldw	r2,-8(fp)
81134538:	00c00044 	movi	r3,1
8113453c:	10c00e15 	stw	r3,56(r2)
81134540:	e0bffe17 	ldw	r2,-8(fp)
81134544:	10800a17 	ldw	r2,40(r2)
81134548:	1000071e 	bne	r2,zero,81134568 <create_file+0x204>
8113454c:	00a04574 	movhi	r2,33045
81134550:	108d8504 	addi	r2,r2,13844
81134554:	10c01317 	ldw	r3,76(r2)
81134558:	e0bffe17 	ldw	r2,-8(fp)
8113455c:	10800b17 	ldw	r2,44(r2)
81134560:	1885883a 	add	r2,r3,r2
81134564:	00000f06 	br	811345a4 <create_file+0x240>
81134568:	00a04574 	movhi	r2,33045
8113456c:	108d8504 	addi	r2,r2,13844
81134570:	10c01417 	ldw	r3,80(r2)
81134574:	e0bffe17 	ldw	r2,-8(fp)
81134578:	10800a17 	ldw	r2,40(r2)
8113457c:	113fff84 	addi	r4,r2,-2
81134580:	00a04574 	movhi	r2,33045
81134584:	108d8504 	addi	r2,r2,13844
81134588:	10800383 	ldbu	r2,14(r2)
8113458c:	10803fcc 	andi	r2,r2,255
81134590:	2085383a 	mul	r2,r4,r2
81134594:	1887883a 	add	r3,r3,r2
81134598:	e0bffe17 	ldw	r2,-8(fp)
8113459c:	10800b17 	ldw	r2,44(r2)
811345a0:	1885883a 	add	r2,r3,r2
811345a4:	e0bffb15 	stw	r2,-20(fp)
811345a8:	e0bffb17 	ldw	r2,-20(fp)
811345ac:	d0e09317 	ldw	r3,-32180(gp)
811345b0:	180b883a 	mov	r5,r3
811345b4:	1009883a 	mov	r4,r2
811345b8:	1131b700 	call	81131b70 <Read_Sector_Data>
811345bc:	10001726 	beq	r2,zero,8113461c <create_file+0x2b8>
811345c0:	e0bffe17 	ldw	r2,-8(fp)
811345c4:	10800c0b 	ldhu	r2,48(r2)
811345c8:	10bfffcc 	andi	r2,r2,65535
811345cc:	10a0001c 	xori	r2,r2,32768
811345d0:	10a00004 	addi	r2,r2,-32768
811345d4:	e17ffe17 	ldw	r5,-8(fp)
811345d8:	1009883a 	mov	r4,r2
811345dc:	11322240 	call	81132224 <Write_File_Record_At_Offset>
811345e0:	10000e26 	beq	r2,zero,8113461c <create_file+0x2b8>
811345e4:	1131b1c0 	call	81131b1c <Save_Modified_Sector>
811345e8:	e0bffc17 	ldw	r2,-16(fp)
811345ec:	01800044 	movi	r6,1
811345f0:	017fffc4 	movi	r5,-1
811345f4:	1009883a 	mov	r4,r2
811345f8:	1131d0c0 	call	81131d0c <mark_cluster>
811345fc:	e0bffc17 	ldw	r2,-16(fp)
81134600:	000d883a 	mov	r6,zero
81134604:	017fffc4 	movi	r5,-1
81134608:	1009883a 	mov	r4,r2
8113460c:	1131d0c0 	call	81131d0c <mark_cluster>
81134610:	10000226 	beq	r2,zero,8113461c <create_file+0x2b8>
81134614:	00800044 	movi	r2,1
81134618:	e0bff715 	stw	r2,-36(fp)
8113461c:	e0bff717 	ldw	r2,-36(fp)
81134620:	e037883a 	mov	sp,fp
81134624:	dfc00117 	ldw	ra,4(sp)
81134628:	df000017 	ldw	fp,0(sp)
8113462c:	dec00204 	addi	sp,sp,8
81134630:	f800283a 	ret

81134634 <copy_file_record_name_to_string>:
81134634:	defffb04 	addi	sp,sp,-20
81134638:	de00012e 	bgeu	sp,et,81134640 <copy_file_record_name_to_string+0xc>
8113463c:	003b68fa 	trap	3
81134640:	df000415 	stw	fp,16(sp)
81134644:	df000404 	addi	fp,sp,16
81134648:	e13ffe15 	stw	r4,-8(fp)
8113464c:	e17fff15 	stw	r5,-4(fp)
81134650:	e03ffd15 	stw	zero,-12(fp)
81134654:	e03ffc15 	stw	zero,-16(fp)
81134658:	00001506 	br	811346b0 <copy_file_record_name_to_string+0x7c>
8113465c:	e0fffe17 	ldw	r3,-8(fp)
81134660:	e0bffc17 	ldw	r2,-16(fp)
81134664:	1885883a 	add	r2,r3,r2
81134668:	10800003 	ldbu	r2,0(r2)
8113466c:	10803fcc 	andi	r2,r2,255
81134670:	10800820 	cmpeqi	r2,r2,32
81134674:	10000b1e 	bne	r2,zero,811346a4 <copy_file_record_name_to_string+0x70>
81134678:	e0bffd17 	ldw	r2,-12(fp)
8113467c:	e0ffff17 	ldw	r3,-4(fp)
81134680:	1885883a 	add	r2,r3,r2
81134684:	e13ffe17 	ldw	r4,-8(fp)
81134688:	e0fffc17 	ldw	r3,-16(fp)
8113468c:	20c7883a 	add	r3,r4,r3
81134690:	18c00003 	ldbu	r3,0(r3)
81134694:	10c00005 	stb	r3,0(r2)
81134698:	e0bffd17 	ldw	r2,-12(fp)
8113469c:	10800044 	addi	r2,r2,1
811346a0:	e0bffd15 	stw	r2,-12(fp)
811346a4:	e0bffc17 	ldw	r2,-16(fp)
811346a8:	10800044 	addi	r2,r2,1
811346ac:	e0bffc15 	stw	r2,-16(fp)
811346b0:	e0bffc17 	ldw	r2,-16(fp)
811346b4:	10800210 	cmplti	r2,r2,8
811346b8:	103fe81e 	bne	r2,zero,8113465c <__reset+0xfb11465c>
811346bc:	e0bffe17 	ldw	r2,-8(fp)
811346c0:	10800203 	ldbu	r2,8(r2)
811346c4:	10803fcc 	andi	r2,r2,255
811346c8:	10800820 	cmpeqi	r2,r2,32
811346cc:	1000241e 	bne	r2,zero,81134760 <copy_file_record_name_to_string+0x12c>
811346d0:	e0bffd17 	ldw	r2,-12(fp)
811346d4:	e0ffff17 	ldw	r3,-4(fp)
811346d8:	1885883a 	add	r2,r3,r2
811346dc:	00c00b84 	movi	r3,46
811346e0:	10c00005 	stb	r3,0(r2)
811346e4:	e0bffd17 	ldw	r2,-12(fp)
811346e8:	10800044 	addi	r2,r2,1
811346ec:	e0bffd15 	stw	r2,-12(fp)
811346f0:	e03ffc15 	stw	zero,-16(fp)
811346f4:	00001706 	br	81134754 <copy_file_record_name_to_string+0x120>
811346f8:	e0fffe17 	ldw	r3,-8(fp)
811346fc:	e0bffc17 	ldw	r2,-16(fp)
81134700:	1885883a 	add	r2,r3,r2
81134704:	10800204 	addi	r2,r2,8
81134708:	10800003 	ldbu	r2,0(r2)
8113470c:	10803fcc 	andi	r2,r2,255
81134710:	10800820 	cmpeqi	r2,r2,32
81134714:	10000c1e 	bne	r2,zero,81134748 <copy_file_record_name_to_string+0x114>
81134718:	e0bffd17 	ldw	r2,-12(fp)
8113471c:	e0ffff17 	ldw	r3,-4(fp)
81134720:	1885883a 	add	r2,r3,r2
81134724:	e13ffe17 	ldw	r4,-8(fp)
81134728:	e0fffc17 	ldw	r3,-16(fp)
8113472c:	20c7883a 	add	r3,r4,r3
81134730:	18c00204 	addi	r3,r3,8
81134734:	18c00003 	ldbu	r3,0(r3)
81134738:	10c00005 	stb	r3,0(r2)
8113473c:	e0bffd17 	ldw	r2,-12(fp)
81134740:	10800044 	addi	r2,r2,1
81134744:	e0bffd15 	stw	r2,-12(fp)
81134748:	e0bffc17 	ldw	r2,-16(fp)
8113474c:	10800044 	addi	r2,r2,1
81134750:	e0bffc15 	stw	r2,-16(fp)
81134754:	e0bffc17 	ldw	r2,-16(fp)
81134758:	108000d0 	cmplti	r2,r2,3
8113475c:	103fe61e 	bne	r2,zero,811346f8 <__reset+0xfb1146f8>
81134760:	e0bffd17 	ldw	r2,-12(fp)
81134764:	e0ffff17 	ldw	r3,-4(fp)
81134768:	1885883a 	add	r2,r3,r2
8113476c:	10000005 	stb	zero,0(r2)
81134770:	0001883a 	nop
81134774:	e037883a 	mov	sp,fp
81134778:	df000017 	ldw	fp,0(sp)
8113477c:	dec00104 	addi	sp,sp,4
81134780:	f800283a 	ret

81134784 <alt_up_sd_card_open_dev>:
81134784:	defffc04 	addi	sp,sp,-16
81134788:	de00012e 	bgeu	sp,et,81134790 <alt_up_sd_card_open_dev+0xc>
8113478c:	003b68fa 	trap	3
81134790:	dfc00315 	stw	ra,12(sp)
81134794:	df000215 	stw	fp,8(sp)
81134798:	df000204 	addi	fp,sp,8
8113479c:	e13fff15 	stw	r4,-4(fp)
811347a0:	d1600d04 	addi	r5,gp,-32716
811347a4:	e13fff17 	ldw	r4,-4(fp)
811347a8:	1139c7c0 	call	81139c7c <alt_find_dev>
811347ac:	e0bffe15 	stw	r2,-8(fp)
811347b0:	e0bffe17 	ldw	r2,-8(fp)
811347b4:	10001e26 	beq	r2,zero,81134830 <alt_up_sd_card_open_dev+0xac>
811347b8:	e0bffe17 	ldw	r2,-8(fp)
811347bc:	10800a17 	ldw	r2,40(r2)
811347c0:	10808d04 	addi	r2,r2,564
811347c4:	d0a08d15 	stw	r2,-32204(gp)
811347c8:	e0bffe17 	ldw	r2,-8(fp)
811347cc:	10800a17 	ldw	r2,40(r2)
811347d0:	10808904 	addi	r2,r2,548
811347d4:	d0a08e15 	stw	r2,-32200(gp)
811347d8:	e0bffe17 	ldw	r2,-8(fp)
811347dc:	10800a17 	ldw	r2,40(r2)
811347e0:	10808404 	addi	r2,r2,528
811347e4:	d0a08f15 	stw	r2,-32196(gp)
811347e8:	e0bffe17 	ldw	r2,-8(fp)
811347ec:	10800a17 	ldw	r2,40(r2)
811347f0:	10808c04 	addi	r2,r2,560
811347f4:	d0a09015 	stw	r2,-32192(gp)
811347f8:	e0bffe17 	ldw	r2,-8(fp)
811347fc:	10800a17 	ldw	r2,40(r2)
81134800:	10808b04 	addi	r2,r2,556
81134804:	d0a09115 	stw	r2,-32188(gp)
81134808:	e0bffe17 	ldw	r2,-8(fp)
8113480c:	10800a17 	ldw	r2,40(r2)
81134810:	d0a09215 	stw	r2,-32184(gp)
81134814:	e0bffe17 	ldw	r2,-8(fp)
81134818:	d0a09515 	stw	r2,-32172(gp)
8113481c:	d0208b15 	stw	zero,-32212(gp)
81134820:	d0208c15 	stw	zero,-32208(gp)
81134824:	00a04574 	movhi	r2,33045
81134828:	108d8004 	addi	r2,r2,13824
8113482c:	10000415 	stw	zero,16(r2)
81134830:	e0bffe17 	ldw	r2,-8(fp)
81134834:	e037883a 	mov	sp,fp
81134838:	dfc00117 	ldw	ra,4(sp)
8113483c:	df000017 	ldw	fp,0(sp)
81134840:	dec00204 	addi	sp,sp,8
81134844:	f800283a 	ret

81134848 <alt_up_sd_card_is_Present>:
81134848:	defffd04 	addi	sp,sp,-12
8113484c:	de00012e 	bgeu	sp,et,81134854 <alt_up_sd_card_is_Present+0xc>
81134850:	003b68fa 	trap	3
81134854:	df000215 	stw	fp,8(sp)
81134858:	df000204 	addi	fp,sp,8
8113485c:	e03ffe15 	stw	zero,-8(fp)
81134860:	d0a09517 	ldw	r2,-32172(gp)
81134864:	10000826 	beq	r2,zero,81134888 <alt_up_sd_card_is_Present+0x40>
81134868:	d0a08d17 	ldw	r2,-32204(gp)
8113486c:	1080002b 	ldhuio	r2,0(r2)
81134870:	10bfffcc 	andi	r2,r2,65535
81134874:	1080008c 	andi	r2,r2,2
81134878:	10000326 	beq	r2,zero,81134888 <alt_up_sd_card_is_Present+0x40>
8113487c:	00800044 	movi	r2,1
81134880:	e0bffe15 	stw	r2,-8(fp)
81134884:	00001e06 	br	81134900 <alt_up_sd_card_is_Present+0xb8>
81134888:	d0a08b17 	ldw	r2,-32212(gp)
8113488c:	10800058 	cmpnei	r2,r2,1
81134890:	10001b1e 	bne	r2,zero,81134900 <alt_up_sd_card_is_Present+0xb8>
81134894:	d0208b15 	stw	zero,-32212(gp)
81134898:	00a04574 	movhi	r2,33045
8113489c:	108d8004 	addi	r2,r2,13824
811348a0:	10000415 	stw	zero,16(r2)
811348a4:	d0208c15 	stw	zero,-32208(gp)
811348a8:	e03fff15 	stw	zero,-4(fp)
811348ac:	00001106 	br	811348f4 <alt_up_sd_card_is_Present+0xac>
811348b0:	00a04574 	movhi	r2,33045
811348b4:	108d9a04 	addi	r2,r2,13928
811348b8:	e0ffff17 	ldw	r3,-4(fp)
811348bc:	180691ba 	slli	r3,r3,6
811348c0:	10c5883a 	add	r2,r2,r3
811348c4:	10800f04 	addi	r2,r2,60
811348c8:	10000015 	stw	zero,0(r2)
811348cc:	00a04574 	movhi	r2,33045
811348d0:	108d9a04 	addi	r2,r2,13928
811348d4:	e0ffff17 	ldw	r3,-4(fp)
811348d8:	180691ba 	slli	r3,r3,6
811348dc:	10c5883a 	add	r2,r2,r3
811348e0:	10800e04 	addi	r2,r2,56
811348e4:	10000015 	stw	zero,0(r2)
811348e8:	e0bfff17 	ldw	r2,-4(fp)
811348ec:	10800044 	addi	r2,r2,1
811348f0:	e0bfff15 	stw	r2,-4(fp)
811348f4:	e0bfff17 	ldw	r2,-4(fp)
811348f8:	10800510 	cmplti	r2,r2,20
811348fc:	103fec1e 	bne	r2,zero,811348b0 <__reset+0xfb1148b0>
81134900:	e0bffe17 	ldw	r2,-8(fp)
81134904:	e037883a 	mov	sp,fp
81134908:	df000017 	ldw	fp,0(sp)
8113490c:	dec00104 	addi	sp,sp,4
81134910:	f800283a 	ret

81134914 <alt_up_sd_card_is_FAT16>:
81134914:	defffd04 	addi	sp,sp,-12
81134918:	de00012e 	bgeu	sp,et,81134920 <alt_up_sd_card_is_FAT16+0xc>
8113491c:	003b68fa 	trap	3
81134920:	dfc00215 	stw	ra,8(sp)
81134924:	df000115 	stw	fp,4(sp)
81134928:	df000104 	addi	fp,sp,4
8113492c:	e03fff15 	stw	zero,-4(fp)
81134930:	11348480 	call	81134848 <alt_up_sd_card_is_Present>
81134934:	10000c26 	beq	r2,zero,81134968 <alt_up_sd_card_is_FAT16+0x54>
81134938:	d0a08b17 	ldw	r2,-32212(gp)
8113493c:	1000071e 	bne	r2,zero,8113495c <alt_up_sd_card_is_FAT16+0x48>
81134940:	1132b400 	call	81132b40 <Look_for_FAT16>
81134944:	d0a08c15 	stw	r2,-32208(gp)
81134948:	d0a08c17 	ldw	r2,-32208(gp)
8113494c:	d0a08b15 	stw	r2,-32212(gp)
81134950:	00a04574 	movhi	r2,33045
81134954:	108d8004 	addi	r2,r2,13824
81134958:	10000415 	stw	zero,16(r2)
8113495c:	d0a08c17 	ldw	r2,-32208(gp)
81134960:	e0bfff15 	stw	r2,-4(fp)
81134964:	00000206 	br	81134970 <alt_up_sd_card_is_FAT16+0x5c>
81134968:	d0208b15 	stw	zero,-32212(gp)
8113496c:	d0208c15 	stw	zero,-32208(gp)
81134970:	e0bfff17 	ldw	r2,-4(fp)
81134974:	e037883a 	mov	sp,fp
81134978:	dfc00117 	ldw	ra,4(sp)
8113497c:	df000017 	ldw	fp,0(sp)
81134980:	dec00204 	addi	sp,sp,8
81134984:	f800283a 	ret

81134988 <alt_up_sd_card_find_first>:
81134988:	deffea04 	addi	sp,sp,-88
8113498c:	de00012e 	bgeu	sp,et,81134994 <alt_up_sd_card_find_first+0xc>
81134990:	003b68fa 	trap	3
81134994:	dfc01515 	stw	ra,84(sp)
81134998:	df001415 	stw	fp,80(sp)
8113499c:	df001404 	addi	fp,sp,80
811349a0:	e13ffe15 	stw	r4,-8(fp)
811349a4:	e17fff15 	stw	r5,-4(fp)
811349a8:	00800084 	movi	r2,2
811349ac:	e0bfec0d 	sth	r2,-80(fp)
811349b0:	11348480 	call	81134848 <alt_up_sd_card_is_Present>
811349b4:	10002426 	beq	r2,zero,81134a48 <alt_up_sd_card_find_first+0xc0>
811349b8:	d0a08c17 	ldw	r2,-32208(gp)
811349bc:	10002226 	beq	r2,zero,81134a48 <alt_up_sd_card_find_first+0xc0>
811349c0:	e0ffee04 	addi	r3,fp,-72
811349c4:	e0bfed04 	addi	r2,fp,-76
811349c8:	180d883a 	mov	r6,r3
811349cc:	100b883a 	mov	r5,r2
811349d0:	e13ffe17 	ldw	r4,-8(fp)
811349d4:	11332d80 	call	811332d8 <get_home_directory_cluster_for_file>
811349d8:	10001926 	beq	r2,zero,81134a40 <alt_up_sd_card_find_first+0xb8>
811349dc:	e0bfed17 	ldw	r2,-76(fp)
811349e0:	1007883a 	mov	r3,r2
811349e4:	00a04574 	movhi	r2,33045
811349e8:	108d8004 	addi	r2,r2,13824
811349ec:	10c00015 	stw	r3,0(r2)
811349f0:	e0bfed17 	ldw	r2,-76(fp)
811349f4:	1007883a 	mov	r3,r2
811349f8:	00a04574 	movhi	r2,33045
811349fc:	108d8004 	addi	r2,r2,13824
81134a00:	10c00115 	stw	r3,4(r2)
81134a04:	00a04574 	movhi	r2,33045
81134a08:	108d8004 	addi	r2,r2,13824
81134a0c:	10000215 	stw	zero,8(r2)
81134a10:	00a04574 	movhi	r2,33045
81134a14:	108d8004 	addi	r2,r2,13824
81134a18:	00ffffc4 	movi	r3,-1
81134a1c:	10c0030d 	sth	r3,12(r2)
81134a20:	00a04574 	movhi	r2,33045
81134a24:	108d8004 	addi	r2,r2,13824
81134a28:	00c00044 	movi	r3,1
81134a2c:	10c00415 	stw	r3,16(r2)
81134a30:	e13fff17 	ldw	r4,-4(fp)
81134a34:	1134a600 	call	81134a60 <alt_up_sd_card_find_next>
81134a38:	e0bfec0d 	sth	r2,-80(fp)
81134a3c:	00000206 	br	81134a48 <alt_up_sd_card_find_first+0xc0>
81134a40:	00800044 	movi	r2,1
81134a44:	e0bfec0d 	sth	r2,-80(fp)
81134a48:	e0bfec0b 	ldhu	r2,-80(fp)
81134a4c:	e037883a 	mov	sp,fp
81134a50:	dfc00117 	ldw	ra,4(sp)
81134a54:	df000017 	ldw	fp,0(sp)
81134a58:	dec00204 	addi	sp,sp,8
81134a5c:	f800283a 	ret

81134a60 <alt_up_sd_card_find_next>:
81134a60:	deffe404 	addi	sp,sp,-112
81134a64:	de00012e 	bgeu	sp,et,81134a6c <alt_up_sd_card_find_next+0xc>
81134a68:	003b68fa 	trap	3
81134a6c:	dfc01b15 	stw	ra,108(sp)
81134a70:	df001a15 	stw	fp,104(sp)
81134a74:	df001a04 	addi	fp,sp,104
81134a78:	e13fff15 	stw	r4,-4(fp)
81134a7c:	00800084 	movi	r2,2
81134a80:	e0bfe60d 	sth	r2,-104(fp)
81134a84:	11348480 	call	81134848 <alt_up_sd_card_is_Present>
81134a88:	1000df26 	beq	r2,zero,81134e08 <alt_up_sd_card_find_next+0x3a8>
81134a8c:	d0a08c17 	ldw	r2,-32208(gp)
81134a90:	1000dd26 	beq	r2,zero,81134e08 <alt_up_sd_card_find_next+0x3a8>
81134a94:	00a04574 	movhi	r2,33045
81134a98:	108d8004 	addi	r2,r2,13824
81134a9c:	10800417 	ldw	r2,16(r2)
81134aa0:	1000d726 	beq	r2,zero,81134e00 <alt_up_sd_card_find_next+0x3a0>
81134aa4:	00a04574 	movhi	r2,33045
81134aa8:	108d8004 	addi	r2,r2,13824
81134aac:	10800117 	ldw	r2,4(r2)
81134ab0:	e0bfe715 	stw	r2,-100(fp)
81134ab4:	e0bfe717 	ldw	r2,-100(fp)
81134ab8:	1000561e 	bne	r2,zero,81134c14 <alt_up_sd_card_find_next+0x1b4>
81134abc:	00a04574 	movhi	r2,33045
81134ac0:	108d8504 	addi	r2,r2,13844
81134ac4:	1080050b 	ldhu	r2,20(r2)
81134ac8:	10bfffcc 	andi	r2,r2,65535
81134acc:	1006917a 	slli	r3,r2,5
81134ad0:	00a04574 	movhi	r2,33045
81134ad4:	108d8504 	addi	r2,r2,13844
81134ad8:	1080030b 	ldhu	r2,12(r2)
81134adc:	10bfffcc 	andi	r2,r2,65535
81134ae0:	1885283a 	div	r2,r3,r2
81134ae4:	e0bfec15 	stw	r2,-80(fp)
81134ae8:	00a04574 	movhi	r2,33045
81134aec:	108d8004 	addi	r2,r2,13824
81134af0:	10800217 	ldw	r2,8(r2)
81134af4:	e0bfe815 	stw	r2,-96(fp)
81134af8:	00a04574 	movhi	r2,33045
81134afc:	108d8004 	addi	r2,r2,13824
81134b00:	1080030b 	ldhu	r2,12(r2)
81134b04:	10bfffcc 	andi	r2,r2,65535
81134b08:	10a0001c 	xori	r2,r2,32768
81134b0c:	10a00004 	addi	r2,r2,-32768
81134b10:	10800044 	addi	r2,r2,1
81134b14:	e0bfe915 	stw	r2,-92(fp)
81134b18:	00003606 	br	81134bf4 <alt_up_sd_card_find_next+0x194>
81134b1c:	00a04574 	movhi	r2,33045
81134b20:	108d8504 	addi	r2,r2,13844
81134b24:	10c01317 	ldw	r3,76(r2)
81134b28:	e0bfe817 	ldw	r2,-96(fp)
81134b2c:	1885883a 	add	r2,r3,r2
81134b30:	1007883a 	mov	r3,r2
81134b34:	d0a09317 	ldw	r2,-32180(gp)
81134b38:	100b883a 	mov	r5,r2
81134b3c:	1809883a 	mov	r4,r3
81134b40:	1131b700 	call	81131b70 <Read_Sector_Data>
81134b44:	10002f26 	beq	r2,zero,81134c04 <alt_up_sd_card_find_next+0x1a4>
81134b48:	00002306 	br	81134bd8 <alt_up_sd_card_find_next+0x178>
81134b4c:	e0bfe917 	ldw	r2,-92(fp)
81134b50:	1004917a 	slli	r2,r2,5
81134b54:	e13fe817 	ldw	r4,-96(fp)
81134b58:	e0ffef04 	addi	r3,fp,-68
81134b5c:	200f883a 	mov	r7,r4
81134b60:	000d883a 	mov	r6,zero
81134b64:	180b883a 	mov	r5,r3
81134b68:	1009883a 	mov	r4,r2
81134b6c:	1131fa00 	call	81131fa0 <Read_File_Record_At_Offset>
81134b70:	10001626 	beq	r2,zero,81134bcc <alt_up_sd_card_find_next+0x16c>
81134b74:	e0bfef03 	ldbu	r2,-68(fp)
81134b78:	10803fcc 	andi	r2,r2,255
81134b7c:	10001326 	beq	r2,zero,81134bcc <alt_up_sd_card_find_next+0x16c>
81134b80:	e0bfef03 	ldbu	r2,-68(fp)
81134b84:	10803fcc 	andi	r2,r2,255
81134b88:	10803960 	cmpeqi	r2,r2,229
81134b8c:	10000f1e 	bne	r2,zero,81134bcc <alt_up_sd_card_find_next+0x16c>
81134b90:	e0bfe917 	ldw	r2,-92(fp)
81134b94:	1007883a 	mov	r3,r2
81134b98:	00a04574 	movhi	r2,33045
81134b9c:	108d8004 	addi	r2,r2,13824
81134ba0:	10c0030d 	sth	r3,12(r2)
81134ba4:	e0ffe817 	ldw	r3,-96(fp)
81134ba8:	00a04574 	movhi	r2,33045
81134bac:	108d8004 	addi	r2,r2,13824
81134bb0:	10c00215 	stw	r3,8(r2)
81134bb4:	e0bfef04 	addi	r2,fp,-68
81134bb8:	e17fff17 	ldw	r5,-4(fp)
81134bbc:	1009883a 	mov	r4,r2
81134bc0:	11346340 	call	81134634 <copy_file_record_name_to_string>
81134bc4:	0005883a 	mov	r2,zero
81134bc8:	00009006 	br	81134e0c <alt_up_sd_card_find_next+0x3ac>
81134bcc:	e0bfe917 	ldw	r2,-92(fp)
81134bd0:	10800044 	addi	r2,r2,1
81134bd4:	e0bfe915 	stw	r2,-92(fp)
81134bd8:	e0bfe917 	ldw	r2,-92(fp)
81134bdc:	10800410 	cmplti	r2,r2,16
81134be0:	103fda1e 	bne	r2,zero,81134b4c <__reset+0xfb114b4c>
81134be4:	e03fe915 	stw	zero,-92(fp)
81134be8:	e0bfe817 	ldw	r2,-96(fp)
81134bec:	10800044 	addi	r2,r2,1
81134bf0:	e0bfe815 	stw	r2,-96(fp)
81134bf4:	e0ffe817 	ldw	r3,-96(fp)
81134bf8:	e0bfec17 	ldw	r2,-80(fp)
81134bfc:	18bfc716 	blt	r3,r2,81134b1c <__reset+0xfb114b1c>
81134c00:	00000106 	br	81134c08 <alt_up_sd_card_find_next+0x1a8>
81134c04:	0001883a 	nop
81134c08:	00bfffc4 	movi	r2,-1
81134c0c:	e0bfe60d 	sth	r2,-104(fp)
81134c10:	00007d06 	br	81134e08 <alt_up_sd_card_find_next+0x3a8>
81134c14:	00a04574 	movhi	r2,33045
81134c18:	108d8004 	addi	r2,r2,13824
81134c1c:	1080030b 	ldhu	r2,12(r2)
81134c20:	10bfffcc 	andi	r2,r2,65535
81134c24:	10a0001c 	xori	r2,r2,32768
81134c28:	10a00004 	addi	r2,r2,-32768
81134c2c:	10800044 	addi	r2,r2,1
81134c30:	e0bfea15 	stw	r2,-88(fp)
81134c34:	e0bfe717 	ldw	r2,-100(fp)
81134c38:	10ffff84 	addi	r3,r2,-2
81134c3c:	00a04574 	movhi	r2,33045
81134c40:	108d8504 	addi	r2,r2,13844
81134c44:	10800383 	ldbu	r2,14(r2)
81134c48:	10803fcc 	andi	r2,r2,255
81134c4c:	1885383a 	mul	r2,r3,r2
81134c50:	1007883a 	mov	r3,r2
81134c54:	00a04574 	movhi	r2,33045
81134c58:	108d8504 	addi	r2,r2,13844
81134c5c:	10801417 	ldw	r2,80(r2)
81134c60:	1885883a 	add	r2,r3,r2
81134c64:	e0bfed15 	stw	r2,-76(fp)
81134c68:	00a04574 	movhi	r2,33045
81134c6c:	108d8004 	addi	r2,r2,13824
81134c70:	10800217 	ldw	r2,8(r2)
81134c74:	e0bfeb15 	stw	r2,-84(fp)
81134c78:	00003806 	br	81134d5c <alt_up_sd_card_find_next+0x2fc>
81134c7c:	e0ffeb17 	ldw	r3,-84(fp)
81134c80:	e0bfed17 	ldw	r2,-76(fp)
81134c84:	1885883a 	add	r2,r3,r2
81134c88:	d0e09317 	ldw	r3,-32180(gp)
81134c8c:	180b883a 	mov	r5,r3
81134c90:	1009883a 	mov	r4,r2
81134c94:	1131b700 	call	81131b70 <Read_Sector_Data>
81134c98:	10003726 	beq	r2,zero,81134d78 <alt_up_sd_card_find_next+0x318>
81134c9c:	00002806 	br	81134d40 <alt_up_sd_card_find_next+0x2e0>
81134ca0:	e0bfea17 	ldw	r2,-88(fp)
81134ca4:	1004917a 	slli	r2,r2,5
81134ca8:	e13fe717 	ldw	r4,-100(fp)
81134cac:	e17feb17 	ldw	r5,-84(fp)
81134cb0:	e0ffef04 	addi	r3,fp,-68
81134cb4:	280f883a 	mov	r7,r5
81134cb8:	200d883a 	mov	r6,r4
81134cbc:	180b883a 	mov	r5,r3
81134cc0:	1009883a 	mov	r4,r2
81134cc4:	1131fa00 	call	81131fa0 <Read_File_Record_At_Offset>
81134cc8:	10001a26 	beq	r2,zero,81134d34 <alt_up_sd_card_find_next+0x2d4>
81134ccc:	e0bfef03 	ldbu	r2,-68(fp)
81134cd0:	10803fcc 	andi	r2,r2,255
81134cd4:	10001726 	beq	r2,zero,81134d34 <alt_up_sd_card_find_next+0x2d4>
81134cd8:	e0bfef03 	ldbu	r2,-68(fp)
81134cdc:	10803fcc 	andi	r2,r2,255
81134ce0:	10803960 	cmpeqi	r2,r2,229
81134ce4:	1000131e 	bne	r2,zero,81134d34 <alt_up_sd_card_find_next+0x2d4>
81134ce8:	e0ffe717 	ldw	r3,-100(fp)
81134cec:	00a04574 	movhi	r2,33045
81134cf0:	108d8004 	addi	r2,r2,13824
81134cf4:	10c00115 	stw	r3,4(r2)
81134cf8:	e0bfea17 	ldw	r2,-88(fp)
81134cfc:	1007883a 	mov	r3,r2
81134d00:	00a04574 	movhi	r2,33045
81134d04:	108d8004 	addi	r2,r2,13824
81134d08:	10c0030d 	sth	r3,12(r2)
81134d0c:	e0ffeb17 	ldw	r3,-84(fp)
81134d10:	00a04574 	movhi	r2,33045
81134d14:	108d8004 	addi	r2,r2,13824
81134d18:	10c00215 	stw	r3,8(r2)
81134d1c:	e0bfef04 	addi	r2,fp,-68
81134d20:	e17fff17 	ldw	r5,-4(fp)
81134d24:	1009883a 	mov	r4,r2
81134d28:	11346340 	call	81134634 <copy_file_record_name_to_string>
81134d2c:	0005883a 	mov	r2,zero
81134d30:	00003606 	br	81134e0c <alt_up_sd_card_find_next+0x3ac>
81134d34:	e0bfea17 	ldw	r2,-88(fp)
81134d38:	10800044 	addi	r2,r2,1
81134d3c:	e0bfea15 	stw	r2,-88(fp)
81134d40:	e0bfea17 	ldw	r2,-88(fp)
81134d44:	10800410 	cmplti	r2,r2,16
81134d48:	103fd51e 	bne	r2,zero,81134ca0 <__reset+0xfb114ca0>
81134d4c:	e03fea15 	stw	zero,-88(fp)
81134d50:	e0bfeb17 	ldw	r2,-84(fp)
81134d54:	10800044 	addi	r2,r2,1
81134d58:	e0bfeb15 	stw	r2,-84(fp)
81134d5c:	00a04574 	movhi	r2,33045
81134d60:	108d8504 	addi	r2,r2,13844
81134d64:	10800383 	ldbu	r2,14(r2)
81134d68:	10803fcc 	andi	r2,r2,255
81134d6c:	e0ffeb17 	ldw	r3,-84(fp)
81134d70:	18bfc216 	blt	r3,r2,81134c7c <__reset+0xfb114c7c>
81134d74:	00000106 	br	81134d7c <alt_up_sd_card_find_next+0x31c>
81134d78:	0001883a 	nop
81134d7c:	00a04574 	movhi	r2,33045
81134d80:	108d8504 	addi	r2,r2,13844
81134d84:	10800383 	ldbu	r2,14(r2)
81134d88:	10803fcc 	andi	r2,r2,255
81134d8c:	e0ffeb17 	ldw	r3,-84(fp)
81134d90:	18801716 	blt	r3,r2,81134df0 <alt_up_sd_card_find_next+0x390>
81134d94:	e0bfe717 	ldw	r2,-100(fp)
81134d98:	e0ffee04 	addi	r3,fp,-72
81134d9c:	180b883a 	mov	r5,r3
81134da0:	1009883a 	mov	r4,r2
81134da4:	1131c500 	call	81131c50 <get_cluster_flag>
81134da8:	10000f26 	beq	r2,zero,81134de8 <alt_up_sd_card_find_next+0x388>
81134dac:	e0bfee0b 	ldhu	r2,-72(fp)
81134db0:	10bfffcc 	andi	r2,r2,65535
81134db4:	10fffe0c 	andi	r3,r2,65528
81134db8:	00bffe14 	movui	r2,65528
81134dbc:	1880051e 	bne	r3,r2,81134dd4 <alt_up_sd_card_find_next+0x374>
81134dc0:	00bfffc4 	movi	r2,-1
81134dc4:	e0bfe60d 	sth	r2,-104(fp)
81134dc8:	00a04574 	movhi	r2,33045
81134dcc:	108d8004 	addi	r2,r2,13824
81134dd0:	10000415 	stw	zero,16(r2)
81134dd4:	e0bfee0b 	ldhu	r2,-72(fp)
81134dd8:	10bfffcc 	andi	r2,r2,65535
81134ddc:	10bffe0c 	andi	r2,r2,65528
81134de0:	e0bfe715 	stw	r2,-100(fp)
81134de4:	00000206 	br	81134df0 <alt_up_sd_card_find_next+0x390>
81134de8:	00bfffc4 	movi	r2,-1
81134dec:	e0bfe60d 	sth	r2,-104(fp)
81134df0:	e0bfe717 	ldw	r2,-100(fp)
81134df4:	00fffdd4 	movui	r3,65527
81134df8:	18bf8e0e 	bge	r3,r2,81134c34 <__reset+0xfb114c34>
81134dfc:	00000206 	br	81134e08 <alt_up_sd_card_find_next+0x3a8>
81134e00:	008000c4 	movi	r2,3
81134e04:	e0bfe60d 	sth	r2,-104(fp)
81134e08:	e0bfe60b 	ldhu	r2,-104(fp)
81134e0c:	e037883a 	mov	sp,fp
81134e10:	dfc00117 	ldw	ra,4(sp)
81134e14:	df000017 	ldw	fp,0(sp)
81134e18:	dec00204 	addi	sp,sp,8
81134e1c:	f800283a 	ret

81134e20 <alt_up_sd_card_fopen>:
81134e20:	deffe904 	addi	sp,sp,-92
81134e24:	de00012e 	bgeu	sp,et,81134e2c <alt_up_sd_card_fopen+0xc>
81134e28:	003b68fa 	trap	3
81134e2c:	dfc01615 	stw	ra,88(sp)
81134e30:	df001515 	stw	fp,84(sp)
81134e34:	df001504 	addi	fp,sp,84
81134e38:	e13ffe15 	stw	r4,-8(fp)
81134e3c:	e17fff15 	stw	r5,-4(fp)
81134e40:	00bfffc4 	movi	r2,-1
81134e44:	e0bfeb0d 	sth	r2,-84(fp)
81134e48:	11348480 	call	81134848 <alt_up_sd_card_is_Present>
81134e4c:	1000cf26 	beq	r2,zero,8113518c <alt_up_sd_card_fopen+0x36c>
81134e50:	d0a08c17 	ldw	r2,-32208(gp)
81134e54:	1000cd26 	beq	r2,zero,8113518c <alt_up_sd_card_fopen+0x36c>
81134e58:	e03fed15 	stw	zero,-76(fp)
81134e5c:	e13ffe17 	ldw	r4,-8(fp)
81134e60:	1132c340 	call	81132c34 <filename_to_upper_case>
81134e64:	e13ffe17 	ldw	r4,-8(fp)
81134e68:	1132d000 	call	81132d00 <check_file_name_for_FAT16_compliance>
81134e6c:	1000c726 	beq	r2,zero,8113518c <alt_up_sd_card_fopen+0x36c>
81134e70:	e0ffee04 	addi	r3,fp,-72
81134e74:	e0bfed04 	addi	r2,fp,-76
81134e78:	180d883a 	mov	r6,r3
81134e7c:	100b883a 	mov	r5,r2
81134e80:	e13ffe17 	ldw	r4,-8(fp)
81134e84:	11332d80 	call	811332d8 <get_home_directory_cluster_for_file>
81134e88:	1000021e 	bne	r2,zero,81134e94 <alt_up_sd_card_fopen+0x74>
81134e8c:	e0bfeb0b 	ldhu	r2,-84(fp)
81134e90:	0000bf06 	br	81135190 <alt_up_sd_card_fopen+0x370>
81134e94:	e03fec15 	stw	zero,-80(fp)
81134e98:	00000e06 	br	81134ed4 <alt_up_sd_card_fopen+0xb4>
81134e9c:	00a04574 	movhi	r2,33045
81134ea0:	108d9a04 	addi	r2,r2,13928
81134ea4:	e0ffec17 	ldw	r3,-80(fp)
81134ea8:	180691ba 	slli	r3,r3,6
81134eac:	10c5883a 	add	r2,r2,r3
81134eb0:	10800f04 	addi	r2,r2,60
81134eb4:	10800017 	ldw	r2,0(r2)
81134eb8:	1000031e 	bne	r2,zero,81134ec8 <alt_up_sd_card_fopen+0xa8>
81134ebc:	e0bfec17 	ldw	r2,-80(fp)
81134ec0:	e0bfeb0d 	sth	r2,-84(fp)
81134ec4:	00000606 	br	81134ee0 <alt_up_sd_card_fopen+0xc0>
81134ec8:	e0bfec17 	ldw	r2,-80(fp)
81134ecc:	10800044 	addi	r2,r2,1
81134ed0:	e0bfec15 	stw	r2,-80(fp)
81134ed4:	e0bfec17 	ldw	r2,-80(fp)
81134ed8:	10800510 	cmplti	r2,r2,20
81134edc:	103fef1e 	bne	r2,zero,81134e9c <__reset+0xfb114e9c>
81134ee0:	e0bfeb0f 	ldh	r2,-84(fp)
81134ee4:	1000a916 	blt	r2,zero,8113518c <alt_up_sd_card_fopen+0x36c>
81134ee8:	e0bfed17 	ldw	r2,-76(fp)
81134eec:	1009883a 	mov	r4,r2
81134ef0:	e0bfeb0f 	ldh	r2,-84(fp)
81134ef4:	100691ba 	slli	r3,r2,6
81134ef8:	00a04574 	movhi	r2,33045
81134efc:	108d9a04 	addi	r2,r2,13928
81134f00:	1885883a 	add	r2,r3,r2
81134f04:	100d883a 	mov	r6,r2
81134f08:	e17ffe17 	ldw	r5,-8(fp)
81134f0c:	11338180 	call	81133818 <find_file_in_directory>
81134f10:	10007b26 	beq	r2,zero,81135100 <alt_up_sd_card_fopen+0x2e0>
81134f14:	e0bfff17 	ldw	r2,-4(fp)
81134f18:	10000226 	beq	r2,zero,81134f24 <alt_up_sd_card_fopen+0x104>
81134f1c:	00bfffc4 	movi	r2,-1
81134f20:	00009b06 	br	81135190 <alt_up_sd_card_fopen+0x370>
81134f24:	e13feb0f 	ldh	r4,-84(fp)
81134f28:	e0ffeb0f 	ldh	r3,-84(fp)
81134f2c:	00a04574 	movhi	r2,33045
81134f30:	108d9a04 	addi	r2,r2,13928
81134f34:	180691ba 	slli	r3,r3,6
81134f38:	10c5883a 	add	r2,r2,r3
81134f3c:	10800584 	addi	r2,r2,22
81134f40:	1080000b 	ldhu	r2,0(r2)
81134f44:	10ffffcc 	andi	r3,r2,65535
81134f48:	00a04574 	movhi	r2,33045
81134f4c:	108d9a04 	addi	r2,r2,13928
81134f50:	200891ba 	slli	r4,r4,6
81134f54:	1105883a 	add	r2,r2,r4
81134f58:	10800704 	addi	r2,r2,28
81134f5c:	10c00015 	stw	r3,0(r2)
81134f60:	e0ffeb0f 	ldh	r3,-84(fp)
81134f64:	00a04574 	movhi	r2,33045
81134f68:	108d9a04 	addi	r2,r2,13928
81134f6c:	180691ba 	slli	r3,r3,6
81134f70:	10c5883a 	add	r2,r2,r3
81134f74:	10800804 	addi	r2,r2,32
81134f78:	10000015 	stw	zero,0(r2)
81134f7c:	e0ffeb0f 	ldh	r3,-84(fp)
81134f80:	00a04574 	movhi	r2,33045
81134f84:	108d9a04 	addi	r2,r2,13928
81134f88:	180691ba 	slli	r3,r3,6
81134f8c:	10c5883a 	add	r2,r2,r3
81134f90:	10800904 	addi	r2,r2,36
81134f94:	10000015 	stw	zero,0(r2)
81134f98:	e0ffeb0f 	ldh	r3,-84(fp)
81134f9c:	00a04574 	movhi	r2,33045
81134fa0:	108d9a04 	addi	r2,r2,13928
81134fa4:	180691ba 	slli	r3,r3,6
81134fa8:	10c5883a 	add	r2,r2,r3
81134fac:	10800f04 	addi	r2,r2,60
81134fb0:	00c00044 	movi	r3,1
81134fb4:	10c00015 	stw	r3,0(r2)
81134fb8:	e0ffeb0f 	ldh	r3,-84(fp)
81134fbc:	00a04574 	movhi	r2,33045
81134fc0:	108d9a04 	addi	r2,r2,13928
81134fc4:	180691ba 	slli	r3,r3,6
81134fc8:	10c5883a 	add	r2,r2,r3
81134fcc:	10800e04 	addi	r2,r2,56
81134fd0:	10000015 	stw	zero,0(r2)
81134fd4:	e03fec15 	stw	zero,-80(fp)
81134fd8:	00004506 	br	811350f0 <alt_up_sd_card_fopen+0x2d0>
81134fdc:	e0ffeb0f 	ldh	r3,-84(fp)
81134fe0:	e0bfec17 	ldw	r2,-80(fp)
81134fe4:	18803f26 	beq	r3,r2,811350e4 <alt_up_sd_card_fopen+0x2c4>
81134fe8:	00a04574 	movhi	r2,33045
81134fec:	108d9a04 	addi	r2,r2,13928
81134ff0:	e0ffec17 	ldw	r3,-80(fp)
81134ff4:	180691ba 	slli	r3,r3,6
81134ff8:	10c5883a 	add	r2,r2,r3
81134ffc:	10800f04 	addi	r2,r2,60
81135000:	10800017 	ldw	r2,0(r2)
81135004:	10800058 	cmpnei	r2,r2,1
81135008:	1000361e 	bne	r2,zero,811350e4 <alt_up_sd_card_fopen+0x2c4>
8113500c:	e0ffeb0f 	ldh	r3,-84(fp)
81135010:	00a04574 	movhi	r2,33045
81135014:	108d9a04 	addi	r2,r2,13928
81135018:	180691ba 	slli	r3,r3,6
8113501c:	10c5883a 	add	r2,r2,r3
81135020:	10800a04 	addi	r2,r2,40
81135024:	10c00017 	ldw	r3,0(r2)
81135028:	00a04574 	movhi	r2,33045
8113502c:	108d9a04 	addi	r2,r2,13928
81135030:	e13fec17 	ldw	r4,-80(fp)
81135034:	200891ba 	slli	r4,r4,6
81135038:	1105883a 	add	r2,r2,r4
8113503c:	10800a04 	addi	r2,r2,40
81135040:	10800017 	ldw	r2,0(r2)
81135044:	1880271e 	bne	r3,r2,811350e4 <alt_up_sd_card_fopen+0x2c4>
81135048:	e0ffeb0f 	ldh	r3,-84(fp)
8113504c:	00a04574 	movhi	r2,33045
81135050:	108d9a04 	addi	r2,r2,13928
81135054:	180691ba 	slli	r3,r3,6
81135058:	10c5883a 	add	r2,r2,r3
8113505c:	10800b04 	addi	r2,r2,44
81135060:	10c00017 	ldw	r3,0(r2)
81135064:	00a04574 	movhi	r2,33045
81135068:	108d9a04 	addi	r2,r2,13928
8113506c:	e13fec17 	ldw	r4,-80(fp)
81135070:	200891ba 	slli	r4,r4,6
81135074:	1105883a 	add	r2,r2,r4
81135078:	10800b04 	addi	r2,r2,44
8113507c:	10800017 	ldw	r2,0(r2)
81135080:	1880181e 	bne	r3,r2,811350e4 <alt_up_sd_card_fopen+0x2c4>
81135084:	e0ffeb0f 	ldh	r3,-84(fp)
81135088:	00a04574 	movhi	r2,33045
8113508c:	108d9a04 	addi	r2,r2,13928
81135090:	180691ba 	slli	r3,r3,6
81135094:	10c5883a 	add	r2,r2,r3
81135098:	10800c04 	addi	r2,r2,48
8113509c:	1100000b 	ldhu	r4,0(r2)
811350a0:	00a04574 	movhi	r2,33045
811350a4:	108d9a04 	addi	r2,r2,13928
811350a8:	e0ffec17 	ldw	r3,-80(fp)
811350ac:	180691ba 	slli	r3,r3,6
811350b0:	10c5883a 	add	r2,r2,r3
811350b4:	10800c04 	addi	r2,r2,48
811350b8:	1080000b 	ldhu	r2,0(r2)
811350bc:	20ffffcc 	andi	r3,r4,65535
811350c0:	18e0001c 	xori	r3,r3,32768
811350c4:	18e00004 	addi	r3,r3,-32768
811350c8:	10bfffcc 	andi	r2,r2,65535
811350cc:	10a0001c 	xori	r2,r2,32768
811350d0:	10a00004 	addi	r2,r2,-32768
811350d4:	1880031e 	bne	r3,r2,811350e4 <alt_up_sd_card_fopen+0x2c4>
811350d8:	00bfff84 	movi	r2,-2
811350dc:	e0bfeb0d 	sth	r2,-84(fp)
811350e0:	00002a06 	br	8113518c <alt_up_sd_card_fopen+0x36c>
811350e4:	e0bfec17 	ldw	r2,-80(fp)
811350e8:	10800044 	addi	r2,r2,1
811350ec:	e0bfec15 	stw	r2,-80(fp)
811350f0:	e0bfec17 	ldw	r2,-80(fp)
811350f4:	10800510 	cmplti	r2,r2,20
811350f8:	103fb81e 	bne	r2,zero,81134fdc <__reset+0xfb114fdc>
811350fc:	00002306 	br	8113518c <alt_up_sd_card_fopen+0x36c>
81135100:	e0bfff17 	ldw	r2,-4(fp)
81135104:	10001f26 	beq	r2,zero,81135184 <alt_up_sd_card_fopen+0x364>
81135108:	e0bfeb0f 	ldh	r2,-84(fp)
8113510c:	100691ba 	slli	r3,r2,6
81135110:	00a04574 	movhi	r2,33045
81135114:	108d9a04 	addi	r2,r2,13928
81135118:	1885883a 	add	r2,r3,r2
8113511c:	e0ffee04 	addi	r3,fp,-72
81135120:	180d883a 	mov	r6,r3
81135124:	100b883a 	mov	r5,r2
81135128:	e13ffe17 	ldw	r4,-8(fp)
8113512c:	11343640 	call	81134364 <create_file>
81135130:	10001126 	beq	r2,zero,81135178 <alt_up_sd_card_fopen+0x358>
81135134:	e0ffeb0f 	ldh	r3,-84(fp)
81135138:	00a04574 	movhi	r2,33045
8113513c:	108d9a04 	addi	r2,r2,13928
81135140:	180691ba 	slli	r3,r3,6
81135144:	10c5883a 	add	r2,r2,r3
81135148:	10800f04 	addi	r2,r2,60
8113514c:	00c00044 	movi	r3,1
81135150:	10c00015 	stw	r3,0(r2)
81135154:	e0ffeb0f 	ldh	r3,-84(fp)
81135158:	00a04574 	movhi	r2,33045
8113515c:	108d9a04 	addi	r2,r2,13928
81135160:	180691ba 	slli	r3,r3,6
81135164:	10c5883a 	add	r2,r2,r3
81135168:	10800e04 	addi	r2,r2,56
8113516c:	00c00044 	movi	r3,1
81135170:	10c00015 	stw	r3,0(r2)
81135174:	00000506 	br	8113518c <alt_up_sd_card_fopen+0x36c>
81135178:	00bfffc4 	movi	r2,-1
8113517c:	e0bfeb0d 	sth	r2,-84(fp)
81135180:	00000206 	br	8113518c <alt_up_sd_card_fopen+0x36c>
81135184:	00bfffc4 	movi	r2,-1
81135188:	e0bfeb0d 	sth	r2,-84(fp)
8113518c:	e0bfeb0b 	ldhu	r2,-84(fp)
81135190:	e037883a 	mov	sp,fp
81135194:	dfc00117 	ldw	ra,4(sp)
81135198:	df000017 	ldw	fp,0(sp)
8113519c:	dec00204 	addi	sp,sp,8
811351a0:	f800283a 	ret

811351a4 <alt_up_sd_card_set_attributes>:
811351a4:	defffd04 	addi	sp,sp,-12
811351a8:	de00012e 	bgeu	sp,et,811351b0 <alt_up_sd_card_set_attributes+0xc>
811351ac:	003b68fa 	trap	3
811351b0:	df000215 	stw	fp,8(sp)
811351b4:	df000204 	addi	fp,sp,8
811351b8:	2007883a 	mov	r3,r4
811351bc:	2805883a 	mov	r2,r5
811351c0:	e0fffe0d 	sth	r3,-8(fp)
811351c4:	e0bfff0d 	sth	r2,-4(fp)
811351c8:	e0bffe0f 	ldh	r2,-8(fp)
811351cc:	10001416 	blt	r2,zero,81135220 <alt_up_sd_card_set_attributes+0x7c>
811351d0:	e0bffe0f 	ldh	r2,-8(fp)
811351d4:	10800508 	cmpgei	r2,r2,20
811351d8:	1000111e 	bne	r2,zero,81135220 <alt_up_sd_card_set_attributes+0x7c>
811351dc:	e0fffe0f 	ldh	r3,-8(fp)
811351e0:	00a04574 	movhi	r2,33045
811351e4:	108d9a04 	addi	r2,r2,13928
811351e8:	180691ba 	slli	r3,r3,6
811351ec:	10c5883a 	add	r2,r2,r3
811351f0:	10800f04 	addi	r2,r2,60
811351f4:	10800017 	ldw	r2,0(r2)
811351f8:	10000926 	beq	r2,zero,81135220 <alt_up_sd_card_set_attributes+0x7c>
811351fc:	e0fffe0f 	ldh	r3,-8(fp)
81135200:	e0bfff0b 	ldhu	r2,-4(fp)
81135204:	1009883a 	mov	r4,r2
81135208:	00a04574 	movhi	r2,33045
8113520c:	108d9a04 	addi	r2,r2,13928
81135210:	180691ba 	slli	r3,r3,6
81135214:	10c5883a 	add	r2,r2,r3
81135218:	108002c4 	addi	r2,r2,11
8113521c:	11000005 	stb	r4,0(r2)
81135220:	0001883a 	nop
81135224:	e037883a 	mov	sp,fp
81135228:	df000017 	ldw	fp,0(sp)
8113522c:	dec00104 	addi	sp,sp,4
81135230:	f800283a 	ret

81135234 <alt_up_sd_card_get_attributes>:
81135234:	defffd04 	addi	sp,sp,-12
81135238:	de00012e 	bgeu	sp,et,81135240 <alt_up_sd_card_get_attributes+0xc>
8113523c:	003b68fa 	trap	3
81135240:	df000215 	stw	fp,8(sp)
81135244:	df000204 	addi	fp,sp,8
81135248:	2005883a 	mov	r2,r4
8113524c:	e0bfff0d 	sth	r2,-4(fp)
81135250:	00bfffc4 	movi	r2,-1
81135254:	e0bffe0d 	sth	r2,-8(fp)
81135258:	e0bfff0f 	ldh	r2,-4(fp)
8113525c:	10001416 	blt	r2,zero,811352b0 <alt_up_sd_card_get_attributes+0x7c>
81135260:	e0bfff0f 	ldh	r2,-4(fp)
81135264:	10800508 	cmpgei	r2,r2,20
81135268:	1000111e 	bne	r2,zero,811352b0 <alt_up_sd_card_get_attributes+0x7c>
8113526c:	e0ffff0f 	ldh	r3,-4(fp)
81135270:	00a04574 	movhi	r2,33045
81135274:	108d9a04 	addi	r2,r2,13928
81135278:	180691ba 	slli	r3,r3,6
8113527c:	10c5883a 	add	r2,r2,r3
81135280:	10800f04 	addi	r2,r2,60
81135284:	10800017 	ldw	r2,0(r2)
81135288:	10000926 	beq	r2,zero,811352b0 <alt_up_sd_card_get_attributes+0x7c>
8113528c:	e0ffff0f 	ldh	r3,-4(fp)
81135290:	00a04574 	movhi	r2,33045
81135294:	108d9a04 	addi	r2,r2,13928
81135298:	180691ba 	slli	r3,r3,6
8113529c:	10c5883a 	add	r2,r2,r3
811352a0:	108002c4 	addi	r2,r2,11
811352a4:	10800003 	ldbu	r2,0(r2)
811352a8:	10803fcc 	andi	r2,r2,255
811352ac:	e0bffe0d 	sth	r2,-8(fp)
811352b0:	e0bffe0b 	ldhu	r2,-8(fp)
811352b4:	e037883a 	mov	sp,fp
811352b8:	df000017 	ldw	fp,0(sp)
811352bc:	dec00104 	addi	sp,sp,4
811352c0:	f800283a 	ret

811352c4 <alt_up_sd_card_read>:
811352c4:	defffa04 	addi	sp,sp,-24
811352c8:	de00012e 	bgeu	sp,et,811352d0 <alt_up_sd_card_read+0xc>
811352cc:	003b68fa 	trap	3
811352d0:	dfc00515 	stw	ra,20(sp)
811352d4:	df000415 	stw	fp,16(sp)
811352d8:	df000404 	addi	fp,sp,16
811352dc:	2005883a 	mov	r2,r4
811352e0:	e0bfff0d 	sth	r2,-4(fp)
811352e4:	00bfffc4 	movi	r2,-1
811352e8:	e0bffc0d 	sth	r2,-16(fp)
811352ec:	e0bfff0f 	ldh	r2,-4(fp)
811352f0:	1000ce16 	blt	r2,zero,8113562c <alt_up_sd_card_read+0x368>
811352f4:	e0bfff0f 	ldh	r2,-4(fp)
811352f8:	10800508 	cmpgei	r2,r2,20
811352fc:	1000cb1e 	bne	r2,zero,8113562c <alt_up_sd_card_read+0x368>
81135300:	e0ffff0f 	ldh	r3,-4(fp)
81135304:	00a04574 	movhi	r2,33045
81135308:	108d9a04 	addi	r2,r2,13928
8113530c:	180691ba 	slli	r3,r3,6
81135310:	10c5883a 	add	r2,r2,r3
81135314:	10800f04 	addi	r2,r2,60
81135318:	10800017 	ldw	r2,0(r2)
8113531c:	1000c326 	beq	r2,zero,8113562c <alt_up_sd_card_read+0x368>
81135320:	e0ffff0f 	ldh	r3,-4(fp)
81135324:	00a04574 	movhi	r2,33045
81135328:	108d9a04 	addi	r2,r2,13928
8113532c:	180691ba 	slli	r3,r3,6
81135330:	10c5883a 	add	r2,r2,r3
81135334:	10800904 	addi	r2,r2,36
81135338:	10c00017 	ldw	r3,0(r2)
8113533c:	e13fff0f 	ldh	r4,-4(fp)
81135340:	00a04574 	movhi	r2,33045
81135344:	108d9a04 	addi	r2,r2,13928
81135348:	200891ba 	slli	r4,r4,6
8113534c:	1105883a 	add	r2,r2,r4
81135350:	10800604 	addi	r2,r2,24
81135354:	10800017 	ldw	r2,0(r2)
81135358:	1880b42e 	bgeu	r3,r2,8113562c <alt_up_sd_card_read+0x368>
8113535c:	00a04574 	movhi	r2,33045
81135360:	108d8504 	addi	r2,r2,13844
81135364:	10c01417 	ldw	r3,80(r2)
81135368:	e13fff0f 	ldh	r4,-4(fp)
8113536c:	00a04574 	movhi	r2,33045
81135370:	108d9a04 	addi	r2,r2,13928
81135374:	200891ba 	slli	r4,r4,6
81135378:	1105883a 	add	r2,r2,r4
8113537c:	10800704 	addi	r2,r2,28
81135380:	10800017 	ldw	r2,0(r2)
81135384:	113fff84 	addi	r4,r2,-2
81135388:	00a04574 	movhi	r2,33045
8113538c:	108d8504 	addi	r2,r2,13844
81135390:	10800383 	ldbu	r2,14(r2)
81135394:	10803fcc 	andi	r2,r2,255
81135398:	2085383a 	mul	r2,r4,r2
8113539c:	1887883a 	add	r3,r3,r2
811353a0:	e13fff0f 	ldh	r4,-4(fp)
811353a4:	00a04574 	movhi	r2,33045
811353a8:	108d9a04 	addi	r2,r2,13928
811353ac:	200891ba 	slli	r4,r4,6
811353b0:	1105883a 	add	r2,r2,r4
811353b4:	10800804 	addi	r2,r2,32
811353b8:	10800017 	ldw	r2,0(r2)
811353bc:	1885883a 	add	r2,r3,r2
811353c0:	e0bffd15 	stw	r2,-12(fp)
811353c4:	e0ffff0f 	ldh	r3,-4(fp)
811353c8:	00a04574 	movhi	r2,33045
811353cc:	108d9a04 	addi	r2,r2,13928
811353d0:	180691ba 	slli	r3,r3,6
811353d4:	10c5883a 	add	r2,r2,r3
811353d8:	10800904 	addi	r2,r2,36
811353dc:	10800017 	ldw	r2,0(r2)
811353e0:	10006826 	beq	r2,zero,81135584 <alt_up_sd_card_read+0x2c0>
811353e4:	e0ffff0f 	ldh	r3,-4(fp)
811353e8:	00a04574 	movhi	r2,33045
811353ec:	108d9a04 	addi	r2,r2,13928
811353f0:	180691ba 	slli	r3,r3,6
811353f4:	10c5883a 	add	r2,r2,r3
811353f8:	10800904 	addi	r2,r2,36
811353fc:	10800017 	ldw	r2,0(r2)
81135400:	10807fcc 	andi	r2,r2,511
81135404:	10005f1e 	bne	r2,zero,81135584 <alt_up_sd_card_read+0x2c0>
81135408:	e0ffff0f 	ldh	r3,-4(fp)
8113540c:	00a04574 	movhi	r2,33045
81135410:	108d9a04 	addi	r2,r2,13928
81135414:	180691ba 	slli	r3,r3,6
81135418:	10c5883a 	add	r2,r2,r3
8113541c:	10800804 	addi	r2,r2,32
81135420:	10c00017 	ldw	r3,0(r2)
81135424:	00a04574 	movhi	r2,33045
81135428:	108d8504 	addi	r2,r2,13844
8113542c:	10800383 	ldbu	r2,14(r2)
81135430:	10803fcc 	andi	r2,r2,255
81135434:	10bfffc4 	addi	r2,r2,-1
81135438:	1880401e 	bne	r3,r2,8113553c <alt_up_sd_card_read+0x278>
8113543c:	e0ffff0f 	ldh	r3,-4(fp)
81135440:	00a04574 	movhi	r2,33045
81135444:	108d9a04 	addi	r2,r2,13928
81135448:	180691ba 	slli	r3,r3,6
8113544c:	10c5883a 	add	r2,r2,r3
81135450:	10800704 	addi	r2,r2,28
81135454:	10800017 	ldw	r2,0(r2)
81135458:	e0fffe04 	addi	r3,fp,-8
8113545c:	180b883a 	mov	r5,r3
81135460:	1009883a 	mov	r4,r2
81135464:	1131c500 	call	81131c50 <get_cluster_flag>
81135468:	10003226 	beq	r2,zero,81135534 <alt_up_sd_card_read+0x270>
8113546c:	e0bffe0b 	ldhu	r2,-8(fp)
81135470:	10bfffcc 	andi	r2,r2,65535
81135474:	10fffe0c 	andi	r3,r2,65528
81135478:	00bffe14 	movui	r2,65528
8113547c:	1880021e 	bne	r3,r2,81135488 <alt_up_sd_card_read+0x1c4>
81135480:	00bfffc4 	movi	r2,-1
81135484:	00006a06 	br	81135630 <alt_up_sd_card_read+0x36c>
81135488:	e13fff0f 	ldh	r4,-4(fp)
8113548c:	e0bffe0b 	ldhu	r2,-8(fp)
81135490:	10ffffcc 	andi	r3,r2,65535
81135494:	00a04574 	movhi	r2,33045
81135498:	108d9a04 	addi	r2,r2,13928
8113549c:	200891ba 	slli	r4,r4,6
811354a0:	1105883a 	add	r2,r2,r4
811354a4:	10800704 	addi	r2,r2,28
811354a8:	10c00015 	stw	r3,0(r2)
811354ac:	e0ffff0f 	ldh	r3,-4(fp)
811354b0:	00a04574 	movhi	r2,33045
811354b4:	108d9a04 	addi	r2,r2,13928
811354b8:	180691ba 	slli	r3,r3,6
811354bc:	10c5883a 	add	r2,r2,r3
811354c0:	10800804 	addi	r2,r2,32
811354c4:	10000015 	stw	zero,0(r2)
811354c8:	00a04574 	movhi	r2,33045
811354cc:	108d8504 	addi	r2,r2,13844
811354d0:	10c01417 	ldw	r3,80(r2)
811354d4:	e13fff0f 	ldh	r4,-4(fp)
811354d8:	00a04574 	movhi	r2,33045
811354dc:	108d9a04 	addi	r2,r2,13928
811354e0:	200891ba 	slli	r4,r4,6
811354e4:	1105883a 	add	r2,r2,r4
811354e8:	10800704 	addi	r2,r2,28
811354ec:	10800017 	ldw	r2,0(r2)
811354f0:	113fff84 	addi	r4,r2,-2
811354f4:	00a04574 	movhi	r2,33045
811354f8:	108d8504 	addi	r2,r2,13844
811354fc:	10800383 	ldbu	r2,14(r2)
81135500:	10803fcc 	andi	r2,r2,255
81135504:	2085383a 	mul	r2,r4,r2
81135508:	1887883a 	add	r3,r3,r2
8113550c:	e13fff0f 	ldh	r4,-4(fp)
81135510:	00a04574 	movhi	r2,33045
81135514:	108d9a04 	addi	r2,r2,13928
81135518:	200891ba 	slli	r4,r4,6
8113551c:	1105883a 	add	r2,r2,r4
81135520:	10800804 	addi	r2,r2,32
81135524:	10800017 	ldw	r2,0(r2)
81135528:	1885883a 	add	r2,r3,r2
8113552c:	e0bffd15 	stw	r2,-12(fp)
81135530:	00001406 	br	81135584 <alt_up_sd_card_read+0x2c0>
81135534:	00bfff84 	movi	r2,-2
81135538:	00003d06 	br	81135630 <alt_up_sd_card_read+0x36c>
8113553c:	e13fff0f 	ldh	r4,-4(fp)
81135540:	e0ffff0f 	ldh	r3,-4(fp)
81135544:	00a04574 	movhi	r2,33045
81135548:	108d9a04 	addi	r2,r2,13928
8113554c:	180691ba 	slli	r3,r3,6
81135550:	10c5883a 	add	r2,r2,r3
81135554:	10800804 	addi	r2,r2,32
81135558:	10800017 	ldw	r2,0(r2)
8113555c:	10c00044 	addi	r3,r2,1
81135560:	00a04574 	movhi	r2,33045
81135564:	108d9a04 	addi	r2,r2,13928
81135568:	200891ba 	slli	r4,r4,6
8113556c:	1105883a 	add	r2,r2,r4
81135570:	10800804 	addi	r2,r2,32
81135574:	10c00015 	stw	r3,0(r2)
81135578:	e0bffd17 	ldw	r2,-12(fp)
8113557c:	10800044 	addi	r2,r2,1
81135580:	e0bffd15 	stw	r2,-12(fp)
81135584:	d0e09317 	ldw	r3,-32180(gp)
81135588:	e0bffd17 	ldw	r2,-12(fp)
8113558c:	1885883a 	add	r2,r3,r2
81135590:	1007883a 	mov	r3,r2
81135594:	d0a09717 	ldw	r2,-32164(gp)
81135598:	18800726 	beq	r3,r2,811355b8 <alt_up_sd_card_read+0x2f4>
8113559c:	d0a09317 	ldw	r2,-32180(gp)
811355a0:	100b883a 	mov	r5,r2
811355a4:	e13ffd17 	ldw	r4,-12(fp)
811355a8:	1131b700 	call	81131b70 <Read_Sector_Data>
811355ac:	1000021e 	bne	r2,zero,811355b8 <alt_up_sd_card_read+0x2f4>
811355b0:	00bfff84 	movi	r2,-2
811355b4:	00001e06 	br	81135630 <alt_up_sd_card_read+0x36c>
811355b8:	d0e09217 	ldw	r3,-32184(gp)
811355bc:	e13fff0f 	ldh	r4,-4(fp)
811355c0:	00a04574 	movhi	r2,33045
811355c4:	108d9a04 	addi	r2,r2,13928
811355c8:	200891ba 	slli	r4,r4,6
811355cc:	1105883a 	add	r2,r2,r4
811355d0:	10800904 	addi	r2,r2,36
811355d4:	10800017 	ldw	r2,0(r2)
811355d8:	10807fcc 	andi	r2,r2,511
811355dc:	1885883a 	add	r2,r3,r2
811355e0:	10800023 	ldbuio	r2,0(r2)
811355e4:	10803fcc 	andi	r2,r2,255
811355e8:	10803fcc 	andi	r2,r2,255
811355ec:	e0bffc0d 	sth	r2,-16(fp)
811355f0:	e13fff0f 	ldh	r4,-4(fp)
811355f4:	e0ffff0f 	ldh	r3,-4(fp)
811355f8:	00a04574 	movhi	r2,33045
811355fc:	108d9a04 	addi	r2,r2,13928
81135600:	180691ba 	slli	r3,r3,6
81135604:	10c5883a 	add	r2,r2,r3
81135608:	10800904 	addi	r2,r2,36
8113560c:	10800017 	ldw	r2,0(r2)
81135610:	10c00044 	addi	r3,r2,1
81135614:	00a04574 	movhi	r2,33045
81135618:	108d9a04 	addi	r2,r2,13928
8113561c:	200891ba 	slli	r4,r4,6
81135620:	1105883a 	add	r2,r2,r4
81135624:	10800904 	addi	r2,r2,36
81135628:	10c00015 	stw	r3,0(r2)
8113562c:	e0bffc0b 	ldhu	r2,-16(fp)
81135630:	e037883a 	mov	sp,fp
81135634:	dfc00117 	ldw	ra,4(sp)
81135638:	df000017 	ldw	fp,0(sp)
8113563c:	dec00204 	addi	sp,sp,8
81135640:	f800283a 	ret

81135644 <alt_up_sd_card_write>:
81135644:	defff804 	addi	sp,sp,-32
81135648:	de00012e 	bgeu	sp,et,81135650 <alt_up_sd_card_write+0xc>
8113564c:	003b68fa 	trap	3
81135650:	dfc00715 	stw	ra,28(sp)
81135654:	df000615 	stw	fp,24(sp)
81135658:	df000604 	addi	fp,sp,24
8113565c:	2007883a 	mov	r3,r4
81135660:	2805883a 	mov	r2,r5
81135664:	e0fffe0d 	sth	r3,-8(fp)
81135668:	e0bfff05 	stb	r2,-4(fp)
8113566c:	e03ffa15 	stw	zero,-24(fp)
81135670:	e0bffe0f 	ldh	r2,-8(fp)
81135674:	10017716 	blt	r2,zero,81135c54 <alt_up_sd_card_write+0x610>
81135678:	e0bffe0f 	ldh	r2,-8(fp)
8113567c:	10800508 	cmpgei	r2,r2,20
81135680:	1001741e 	bne	r2,zero,81135c54 <alt_up_sd_card_write+0x610>
81135684:	e0fffe0f 	ldh	r3,-8(fp)
81135688:	00a04574 	movhi	r2,33045
8113568c:	108d9a04 	addi	r2,r2,13928
81135690:	180691ba 	slli	r3,r3,6
81135694:	10c5883a 	add	r2,r2,r3
81135698:	10800f04 	addi	r2,r2,60
8113569c:	10800017 	ldw	r2,0(r2)
811356a0:	10016c26 	beq	r2,zero,81135c54 <alt_up_sd_card_write+0x610>
811356a4:	00a04574 	movhi	r2,33045
811356a8:	108d8504 	addi	r2,r2,13844
811356ac:	10c01417 	ldw	r3,80(r2)
811356b0:	e13ffe0f 	ldh	r4,-8(fp)
811356b4:	00a04574 	movhi	r2,33045
811356b8:	108d9a04 	addi	r2,r2,13928
811356bc:	200891ba 	slli	r4,r4,6
811356c0:	1105883a 	add	r2,r2,r4
811356c4:	10800704 	addi	r2,r2,28
811356c8:	10800017 	ldw	r2,0(r2)
811356cc:	113fff84 	addi	r4,r2,-2
811356d0:	00a04574 	movhi	r2,33045
811356d4:	108d8504 	addi	r2,r2,13844
811356d8:	10800383 	ldbu	r2,14(r2)
811356dc:	10803fcc 	andi	r2,r2,255
811356e0:	2085383a 	mul	r2,r4,r2
811356e4:	1887883a 	add	r3,r3,r2
811356e8:	e13ffe0f 	ldh	r4,-8(fp)
811356ec:	00a04574 	movhi	r2,33045
811356f0:	108d9a04 	addi	r2,r2,13928
811356f4:	200891ba 	slli	r4,r4,6
811356f8:	1105883a 	add	r2,r2,r4
811356fc:	10800804 	addi	r2,r2,32
81135700:	10800017 	ldw	r2,0(r2)
81135704:	1885883a 	add	r2,r3,r2
81135708:	e0bffb15 	stw	r2,-20(fp)
8113570c:	e0fffe0f 	ldh	r3,-8(fp)
81135710:	00a04574 	movhi	r2,33045
81135714:	108d9a04 	addi	r2,r2,13928
81135718:	180691ba 	slli	r3,r3,6
8113571c:	10c5883a 	add	r2,r2,r3
81135720:	10800904 	addi	r2,r2,36
81135724:	10c00017 	ldw	r3,0(r2)
81135728:	00a04574 	movhi	r2,33045
8113572c:	108d8504 	addi	r2,r2,13844
81135730:	1080030b 	ldhu	r2,12(r2)
81135734:	10bfffcc 	andi	r2,r2,65535
81135738:	1889203a 	divu	r4,r3,r2
8113573c:	2085383a 	mul	r2,r4,r2
81135740:	1885c83a 	sub	r2,r3,r2
81135744:	e0bffc0d 	sth	r2,-16(fp)
81135748:	e0fffe0f 	ldh	r3,-8(fp)
8113574c:	00a04574 	movhi	r2,33045
81135750:	108d9a04 	addi	r2,r2,13928
81135754:	180691ba 	slli	r3,r3,6
81135758:	10c5883a 	add	r2,r2,r3
8113575c:	10800904 	addi	r2,r2,36
81135760:	10c00017 	ldw	r3,0(r2)
81135764:	e13ffe0f 	ldh	r4,-8(fp)
81135768:	00a04574 	movhi	r2,33045
8113576c:	108d9a04 	addi	r2,r2,13928
81135770:	200891ba 	slli	r4,r4,6
81135774:	1105883a 	add	r2,r2,r4
81135778:	10800604 	addi	r2,r2,24
8113577c:	10800017 	ldw	r2,0(r2)
81135780:	1880672e 	bgeu	r3,r2,81135920 <alt_up_sd_card_write+0x2dc>
81135784:	e0fffe0f 	ldh	r3,-8(fp)
81135788:	00a04574 	movhi	r2,33045
8113578c:	108d9a04 	addi	r2,r2,13928
81135790:	180691ba 	slli	r3,r3,6
81135794:	10c5883a 	add	r2,r2,r3
81135798:	10800904 	addi	r2,r2,36
8113579c:	10800017 	ldw	r2,0(r2)
811357a0:	1000e126 	beq	r2,zero,81135b28 <alt_up_sd_card_write+0x4e4>
811357a4:	e0bffc0f 	ldh	r2,-16(fp)
811357a8:	1000df1e 	bne	r2,zero,81135b28 <alt_up_sd_card_write+0x4e4>
811357ac:	e0fffe0f 	ldh	r3,-8(fp)
811357b0:	00a04574 	movhi	r2,33045
811357b4:	108d9a04 	addi	r2,r2,13928
811357b8:	180691ba 	slli	r3,r3,6
811357bc:	10c5883a 	add	r2,r2,r3
811357c0:	10800804 	addi	r2,r2,32
811357c4:	10c00017 	ldw	r3,0(r2)
811357c8:	00a04574 	movhi	r2,33045
811357cc:	108d8504 	addi	r2,r2,13844
811357d0:	10800383 	ldbu	r2,14(r2)
811357d4:	10803fcc 	andi	r2,r2,255
811357d8:	10bfffc4 	addi	r2,r2,-1
811357dc:	18803d1e 	bne	r3,r2,811358d4 <alt_up_sd_card_write+0x290>
811357e0:	e0fffe0f 	ldh	r3,-8(fp)
811357e4:	00a04574 	movhi	r2,33045
811357e8:	108d9a04 	addi	r2,r2,13928
811357ec:	180691ba 	slli	r3,r3,6
811357f0:	10c5883a 	add	r2,r2,r3
811357f4:	10800704 	addi	r2,r2,28
811357f8:	10800017 	ldw	r2,0(r2)
811357fc:	e0fffc84 	addi	r3,fp,-14
81135800:	180b883a 	mov	r5,r3
81135804:	1009883a 	mov	r4,r2
81135808:	1131c500 	call	81131c50 <get_cluster_flag>
8113580c:	10002f26 	beq	r2,zero,811358cc <alt_up_sd_card_write+0x288>
81135810:	e0bffc8b 	ldhu	r2,-14(fp)
81135814:	10bfffcc 	andi	r2,r2,65535
81135818:	10bffe28 	cmpgeui	r2,r2,65528
8113581c:	1000c21e 	bne	r2,zero,81135b28 <alt_up_sd_card_write+0x4e4>
81135820:	e13ffe0f 	ldh	r4,-8(fp)
81135824:	e0bffc8b 	ldhu	r2,-14(fp)
81135828:	10ffffcc 	andi	r3,r2,65535
8113582c:	00a04574 	movhi	r2,33045
81135830:	108d9a04 	addi	r2,r2,13928
81135834:	200891ba 	slli	r4,r4,6
81135838:	1105883a 	add	r2,r2,r4
8113583c:	10800704 	addi	r2,r2,28
81135840:	10c00015 	stw	r3,0(r2)
81135844:	e0fffe0f 	ldh	r3,-8(fp)
81135848:	00a04574 	movhi	r2,33045
8113584c:	108d9a04 	addi	r2,r2,13928
81135850:	180691ba 	slli	r3,r3,6
81135854:	10c5883a 	add	r2,r2,r3
81135858:	10800804 	addi	r2,r2,32
8113585c:	10000015 	stw	zero,0(r2)
81135860:	00a04574 	movhi	r2,33045
81135864:	108d8504 	addi	r2,r2,13844
81135868:	10c01417 	ldw	r3,80(r2)
8113586c:	e13ffe0f 	ldh	r4,-8(fp)
81135870:	00a04574 	movhi	r2,33045
81135874:	108d9a04 	addi	r2,r2,13928
81135878:	200891ba 	slli	r4,r4,6
8113587c:	1105883a 	add	r2,r2,r4
81135880:	10800704 	addi	r2,r2,28
81135884:	10800017 	ldw	r2,0(r2)
81135888:	113fff84 	addi	r4,r2,-2
8113588c:	00a04574 	movhi	r2,33045
81135890:	108d8504 	addi	r2,r2,13844
81135894:	10800383 	ldbu	r2,14(r2)
81135898:	10803fcc 	andi	r2,r2,255
8113589c:	2085383a 	mul	r2,r4,r2
811358a0:	1887883a 	add	r3,r3,r2
811358a4:	e13ffe0f 	ldh	r4,-8(fp)
811358a8:	00a04574 	movhi	r2,33045
811358ac:	108d9a04 	addi	r2,r2,13928
811358b0:	200891ba 	slli	r4,r4,6
811358b4:	1105883a 	add	r2,r2,r4
811358b8:	10800804 	addi	r2,r2,32
811358bc:	10800017 	ldw	r2,0(r2)
811358c0:	1885883a 	add	r2,r3,r2
811358c4:	e0bffb15 	stw	r2,-20(fp)
811358c8:	00009706 	br	81135b28 <alt_up_sd_card_write+0x4e4>
811358cc:	0005883a 	mov	r2,zero
811358d0:	0000e106 	br	81135c58 <alt_up_sd_card_write+0x614>
811358d4:	e13ffe0f 	ldh	r4,-8(fp)
811358d8:	e0fffe0f 	ldh	r3,-8(fp)
811358dc:	00a04574 	movhi	r2,33045
811358e0:	108d9a04 	addi	r2,r2,13928
811358e4:	180691ba 	slli	r3,r3,6
811358e8:	10c5883a 	add	r2,r2,r3
811358ec:	10800804 	addi	r2,r2,32
811358f0:	10800017 	ldw	r2,0(r2)
811358f4:	10c00044 	addi	r3,r2,1
811358f8:	00a04574 	movhi	r2,33045
811358fc:	108d9a04 	addi	r2,r2,13928
81135900:	200891ba 	slli	r4,r4,6
81135904:	1105883a 	add	r2,r2,r4
81135908:	10800804 	addi	r2,r2,32
8113590c:	10c00015 	stw	r3,0(r2)
81135910:	e0bffb17 	ldw	r2,-20(fp)
81135914:	10800044 	addi	r2,r2,1
81135918:	e0bffb15 	stw	r2,-20(fp)
8113591c:	00008206 	br	81135b28 <alt_up_sd_card_write+0x4e4>
81135920:	e0fffe0f 	ldh	r3,-8(fp)
81135924:	00a04574 	movhi	r2,33045
81135928:	108d9a04 	addi	r2,r2,13928
8113592c:	180691ba 	slli	r3,r3,6
81135930:	10c5883a 	add	r2,r2,r3
81135934:	10800904 	addi	r2,r2,36
81135938:	10800017 	ldw	r2,0(r2)
8113593c:	10007a26 	beq	r2,zero,81135b28 <alt_up_sd_card_write+0x4e4>
81135940:	e0bffc0f 	ldh	r2,-16(fp)
81135944:	1000781e 	bne	r2,zero,81135b28 <alt_up_sd_card_write+0x4e4>
81135948:	e0fffe0f 	ldh	r3,-8(fp)
8113594c:	00a04574 	movhi	r2,33045
81135950:	108d9a04 	addi	r2,r2,13928
81135954:	180691ba 	slli	r3,r3,6
81135958:	10c5883a 	add	r2,r2,r3
8113595c:	10800804 	addi	r2,r2,32
81135960:	10c00017 	ldw	r3,0(r2)
81135964:	00a04574 	movhi	r2,33045
81135968:	108d8504 	addi	r2,r2,13844
8113596c:	10800383 	ldbu	r2,14(r2)
81135970:	10803fcc 	andi	r2,r2,255
81135974:	10bfffc4 	addi	r2,r2,-1
81135978:	18803e1e 	bne	r3,r2,81135a74 <alt_up_sd_card_write+0x430>
8113597c:	e0bffd04 	addi	r2,fp,-12
81135980:	1009883a 	mov	r4,r2
81135984:	1133c940 	call	81133c94 <find_first_empty_cluster>
81135988:	10003826 	beq	r2,zero,81135a6c <alt_up_sd_card_write+0x428>
8113598c:	e0fffe0f 	ldh	r3,-8(fp)
81135990:	00a04574 	movhi	r2,33045
81135994:	108d9a04 	addi	r2,r2,13928
81135998:	180691ba 	slli	r3,r3,6
8113599c:	10c5883a 	add	r2,r2,r3
811359a0:	10800704 	addi	r2,r2,28
811359a4:	10800017 	ldw	r2,0(r2)
811359a8:	e0fffd17 	ldw	r3,-12(fp)
811359ac:	18ffffcc 	andi	r3,r3,65535
811359b0:	18e0001c 	xori	r3,r3,32768
811359b4:	18e00004 	addi	r3,r3,-32768
811359b8:	01800044 	movi	r6,1
811359bc:	180b883a 	mov	r5,r3
811359c0:	1009883a 	mov	r4,r2
811359c4:	1131d0c0 	call	81131d0c <mark_cluster>
811359c8:	e0bffd17 	ldw	r2,-12(fp)
811359cc:	01800044 	movi	r6,1
811359d0:	017fffc4 	movi	r5,-1
811359d4:	1009883a 	mov	r4,r2
811359d8:	1131d0c0 	call	81131d0c <mark_cluster>
811359dc:	e0fffe0f 	ldh	r3,-8(fp)
811359e0:	00a04574 	movhi	r2,33045
811359e4:	108d9a04 	addi	r2,r2,13928
811359e8:	180691ba 	slli	r3,r3,6
811359ec:	10c5883a 	add	r2,r2,r3
811359f0:	10800704 	addi	r2,r2,28
811359f4:	10800017 	ldw	r2,0(r2)
811359f8:	e0fffd17 	ldw	r3,-12(fp)
811359fc:	18ffffcc 	andi	r3,r3,65535
81135a00:	18e0001c 	xori	r3,r3,32768
81135a04:	18e00004 	addi	r3,r3,-32768
81135a08:	000d883a 	mov	r6,zero
81135a0c:	180b883a 	mov	r5,r3
81135a10:	1009883a 	mov	r4,r2
81135a14:	1131d0c0 	call	81131d0c <mark_cluster>
81135a18:	e0bffd17 	ldw	r2,-12(fp)
81135a1c:	000d883a 	mov	r6,zero
81135a20:	017fffc4 	movi	r5,-1
81135a24:	1009883a 	mov	r4,r2
81135a28:	1131d0c0 	call	81131d0c <mark_cluster>
81135a2c:	e13ffe0f 	ldh	r4,-8(fp)
81135a30:	e0fffd17 	ldw	r3,-12(fp)
81135a34:	00a04574 	movhi	r2,33045
81135a38:	108d9a04 	addi	r2,r2,13928
81135a3c:	200891ba 	slli	r4,r4,6
81135a40:	1105883a 	add	r2,r2,r4
81135a44:	10800704 	addi	r2,r2,28
81135a48:	10c00015 	stw	r3,0(r2)
81135a4c:	e0fffe0f 	ldh	r3,-8(fp)
81135a50:	00a04574 	movhi	r2,33045
81135a54:	108d9a04 	addi	r2,r2,13928
81135a58:	180691ba 	slli	r3,r3,6
81135a5c:	10c5883a 	add	r2,r2,r3
81135a60:	10800804 	addi	r2,r2,32
81135a64:	10000015 	stw	zero,0(r2)
81135a68:	00001506 	br	81135ac0 <alt_up_sd_card_write+0x47c>
81135a6c:	0005883a 	mov	r2,zero
81135a70:	00007906 	br	81135c58 <alt_up_sd_card_write+0x614>
81135a74:	e13ffe0f 	ldh	r4,-8(fp)
81135a78:	e0fffe0f 	ldh	r3,-8(fp)
81135a7c:	00a04574 	movhi	r2,33045
81135a80:	108d9a04 	addi	r2,r2,13928
81135a84:	180691ba 	slli	r3,r3,6
81135a88:	10c5883a 	add	r2,r2,r3
81135a8c:	10800904 	addi	r2,r2,36
81135a90:	10c00017 	ldw	r3,0(r2)
81135a94:	00a04574 	movhi	r2,33045
81135a98:	108d8504 	addi	r2,r2,13844
81135a9c:	1080030b 	ldhu	r2,12(r2)
81135aa0:	10bfffcc 	andi	r2,r2,65535
81135aa4:	1887203a 	divu	r3,r3,r2
81135aa8:	00a04574 	movhi	r2,33045
81135aac:	108d9a04 	addi	r2,r2,13928
81135ab0:	200891ba 	slli	r4,r4,6
81135ab4:	1105883a 	add	r2,r2,r4
81135ab8:	10800804 	addi	r2,r2,32
81135abc:	10c00015 	stw	r3,0(r2)
81135ac0:	00a04574 	movhi	r2,33045
81135ac4:	108d8504 	addi	r2,r2,13844
81135ac8:	10c01417 	ldw	r3,80(r2)
81135acc:	e13ffe0f 	ldh	r4,-8(fp)
81135ad0:	00a04574 	movhi	r2,33045
81135ad4:	108d9a04 	addi	r2,r2,13928
81135ad8:	200891ba 	slli	r4,r4,6
81135adc:	1105883a 	add	r2,r2,r4
81135ae0:	10800704 	addi	r2,r2,28
81135ae4:	10800017 	ldw	r2,0(r2)
81135ae8:	113fff84 	addi	r4,r2,-2
81135aec:	00a04574 	movhi	r2,33045
81135af0:	108d8504 	addi	r2,r2,13844
81135af4:	10800383 	ldbu	r2,14(r2)
81135af8:	10803fcc 	andi	r2,r2,255
81135afc:	2085383a 	mul	r2,r4,r2
81135b00:	1887883a 	add	r3,r3,r2
81135b04:	e13ffe0f 	ldh	r4,-8(fp)
81135b08:	00a04574 	movhi	r2,33045
81135b0c:	108d9a04 	addi	r2,r2,13928
81135b10:	200891ba 	slli	r4,r4,6
81135b14:	1105883a 	add	r2,r2,r4
81135b18:	10800804 	addi	r2,r2,32
81135b1c:	10800017 	ldw	r2,0(r2)
81135b20:	1885883a 	add	r2,r3,r2
81135b24:	e0bffb15 	stw	r2,-20(fp)
81135b28:	d0e09317 	ldw	r3,-32180(gp)
81135b2c:	e0bffb17 	ldw	r2,-20(fp)
81135b30:	1885883a 	add	r2,r3,r2
81135b34:	1007883a 	mov	r3,r2
81135b38:	d0a09717 	ldw	r2,-32164(gp)
81135b3c:	18800726 	beq	r3,r2,81135b5c <alt_up_sd_card_write+0x518>
81135b40:	d0a09317 	ldw	r2,-32180(gp)
81135b44:	100b883a 	mov	r5,r2
81135b48:	e13ffb17 	ldw	r4,-20(fp)
81135b4c:	1131b700 	call	81131b70 <Read_Sector_Data>
81135b50:	1000021e 	bne	r2,zero,81135b5c <alt_up_sd_card_write+0x518>
81135b54:	0005883a 	mov	r2,zero
81135b58:	00003f06 	br	81135c58 <alt_up_sd_card_write+0x614>
81135b5c:	d0e09217 	ldw	r3,-32184(gp)
81135b60:	e0bffc0f 	ldh	r2,-16(fp)
81135b64:	1885883a 	add	r2,r3,r2
81135b68:	e0ffff07 	ldb	r3,-4(fp)
81135b6c:	10c00025 	stbio	r3,0(r2)
81135b70:	e13ffe0f 	ldh	r4,-8(fp)
81135b74:	e0fffe0f 	ldh	r3,-8(fp)
81135b78:	00a04574 	movhi	r2,33045
81135b7c:	108d9a04 	addi	r2,r2,13928
81135b80:	180691ba 	slli	r3,r3,6
81135b84:	10c5883a 	add	r2,r2,r3
81135b88:	10800904 	addi	r2,r2,36
81135b8c:	10800017 	ldw	r2,0(r2)
81135b90:	10c00044 	addi	r3,r2,1
81135b94:	00a04574 	movhi	r2,33045
81135b98:	108d9a04 	addi	r2,r2,13928
81135b9c:	200891ba 	slli	r4,r4,6
81135ba0:	1105883a 	add	r2,r2,r4
81135ba4:	10800904 	addi	r2,r2,36
81135ba8:	10c00015 	stw	r3,0(r2)
81135bac:	e0fffe0f 	ldh	r3,-8(fp)
81135bb0:	00a04574 	movhi	r2,33045
81135bb4:	108d9a04 	addi	r2,r2,13928
81135bb8:	180691ba 	slli	r3,r3,6
81135bbc:	10c5883a 	add	r2,r2,r3
81135bc0:	10800904 	addi	r2,r2,36
81135bc4:	10c00017 	ldw	r3,0(r2)
81135bc8:	e13ffe0f 	ldh	r4,-8(fp)
81135bcc:	00a04574 	movhi	r2,33045
81135bd0:	108d9a04 	addi	r2,r2,13928
81135bd4:	200891ba 	slli	r4,r4,6
81135bd8:	1105883a 	add	r2,r2,r4
81135bdc:	10800604 	addi	r2,r2,24
81135be0:	10800017 	ldw	r2,0(r2)
81135be4:	18801736 	bltu	r3,r2,81135c44 <alt_up_sd_card_write+0x600>
81135be8:	e13ffe0f 	ldh	r4,-8(fp)
81135bec:	e0fffe0f 	ldh	r3,-8(fp)
81135bf0:	00a04574 	movhi	r2,33045
81135bf4:	108d9a04 	addi	r2,r2,13928
81135bf8:	180691ba 	slli	r3,r3,6
81135bfc:	10c5883a 	add	r2,r2,r3
81135c00:	10800604 	addi	r2,r2,24
81135c04:	10800017 	ldw	r2,0(r2)
81135c08:	10c00044 	addi	r3,r2,1
81135c0c:	00a04574 	movhi	r2,33045
81135c10:	108d9a04 	addi	r2,r2,13928
81135c14:	200891ba 	slli	r4,r4,6
81135c18:	1105883a 	add	r2,r2,r4
81135c1c:	10800604 	addi	r2,r2,24
81135c20:	10c00015 	stw	r3,0(r2)
81135c24:	e0fffe0f 	ldh	r3,-8(fp)
81135c28:	00a04574 	movhi	r2,33045
81135c2c:	108d9a04 	addi	r2,r2,13928
81135c30:	180691ba 	slli	r3,r3,6
81135c34:	10c5883a 	add	r2,r2,r3
81135c38:	10800e04 	addi	r2,r2,56
81135c3c:	00c00044 	movi	r3,1
81135c40:	10c00015 	stw	r3,0(r2)
81135c44:	00800044 	movi	r2,1
81135c48:	d0a09615 	stw	r2,-32168(gp)
81135c4c:	00800044 	movi	r2,1
81135c50:	e0bffa15 	stw	r2,-24(fp)
81135c54:	e0bffa17 	ldw	r2,-24(fp)
81135c58:	e037883a 	mov	sp,fp
81135c5c:	dfc00117 	ldw	ra,4(sp)
81135c60:	df000017 	ldw	fp,0(sp)
81135c64:	dec00204 	addi	sp,sp,8
81135c68:	f800283a 	ret

81135c6c <alt_up_sd_card_fclose>:
81135c6c:	defffb04 	addi	sp,sp,-20
81135c70:	de00012e 	bgeu	sp,et,81135c78 <alt_up_sd_card_fclose+0xc>
81135c74:	003b68fa 	trap	3
81135c78:	dfc00415 	stw	ra,16(sp)
81135c7c:	df000315 	stw	fp,12(sp)
81135c80:	df000304 	addi	fp,sp,12
81135c84:	2005883a 	mov	r2,r4
81135c88:	e0bfff0d 	sth	r2,-4(fp)
81135c8c:	e03ffd15 	stw	zero,-12(fp)
81135c90:	11348480 	call	81134848 <alt_up_sd_card_is_Present>
81135c94:	10006026 	beq	r2,zero,81135e18 <alt_up_sd_card_fclose+0x1ac>
81135c98:	d0a08c17 	ldw	r2,-32208(gp)
81135c9c:	10005e26 	beq	r2,zero,81135e18 <alt_up_sd_card_fclose+0x1ac>
81135ca0:	e0ffff0f 	ldh	r3,-4(fp)
81135ca4:	00a04574 	movhi	r2,33045
81135ca8:	108d9a04 	addi	r2,r2,13928
81135cac:	180691ba 	slli	r3,r3,6
81135cb0:	10c5883a 	add	r2,r2,r3
81135cb4:	10800f04 	addi	r2,r2,60
81135cb8:	10800017 	ldw	r2,0(r2)
81135cbc:	10005626 	beq	r2,zero,81135e18 <alt_up_sd_card_fclose+0x1ac>
81135cc0:	e0ffff0f 	ldh	r3,-4(fp)
81135cc4:	00a04574 	movhi	r2,33045
81135cc8:	108d9a04 	addi	r2,r2,13928
81135ccc:	180691ba 	slli	r3,r3,6
81135cd0:	10c5883a 	add	r2,r2,r3
81135cd4:	10800e04 	addi	r2,r2,56
81135cd8:	10800017 	ldw	r2,0(r2)
81135cdc:	10004526 	beq	r2,zero,81135df4 <alt_up_sd_card_fclose+0x188>
81135ce0:	e0ffff0f 	ldh	r3,-4(fp)
81135ce4:	00a04574 	movhi	r2,33045
81135ce8:	108d9a04 	addi	r2,r2,13928
81135cec:	180691ba 	slli	r3,r3,6
81135cf0:	10c5883a 	add	r2,r2,r3
81135cf4:	10800b04 	addi	r2,r2,44
81135cf8:	10800017 	ldw	r2,0(r2)
81135cfc:	e0bffe15 	stw	r2,-8(fp)
81135d00:	e0ffff0f 	ldh	r3,-4(fp)
81135d04:	00a04574 	movhi	r2,33045
81135d08:	108d9a04 	addi	r2,r2,13928
81135d0c:	180691ba 	slli	r3,r3,6
81135d10:	10c5883a 	add	r2,r2,r3
81135d14:	10800a04 	addi	r2,r2,40
81135d18:	10800017 	ldw	r2,0(r2)
81135d1c:	1000071e 	bne	r2,zero,81135d3c <alt_up_sd_card_fclose+0xd0>
81135d20:	00a04574 	movhi	r2,33045
81135d24:	108d8504 	addi	r2,r2,13844
81135d28:	10801317 	ldw	r2,76(r2)
81135d2c:	e0fffe17 	ldw	r3,-8(fp)
81135d30:	1885883a 	add	r2,r3,r2
81135d34:	e0bffe15 	stw	r2,-8(fp)
81135d38:	00001406 	br	81135d8c <alt_up_sd_card_fclose+0x120>
81135d3c:	00a04574 	movhi	r2,33045
81135d40:	108d8504 	addi	r2,r2,13844
81135d44:	10c01417 	ldw	r3,80(r2)
81135d48:	e0bffe17 	ldw	r2,-8(fp)
81135d4c:	1887883a 	add	r3,r3,r2
81135d50:	e13fff0f 	ldh	r4,-4(fp)
81135d54:	00a04574 	movhi	r2,33045
81135d58:	108d9a04 	addi	r2,r2,13928
81135d5c:	200891ba 	slli	r4,r4,6
81135d60:	1105883a 	add	r2,r2,r4
81135d64:	10800a04 	addi	r2,r2,40
81135d68:	10800017 	ldw	r2,0(r2)
81135d6c:	113fff84 	addi	r4,r2,-2
81135d70:	00a04574 	movhi	r2,33045
81135d74:	108d8504 	addi	r2,r2,13844
81135d78:	10800383 	ldbu	r2,14(r2)
81135d7c:	10803fcc 	andi	r2,r2,255
81135d80:	2085383a 	mul	r2,r4,r2
81135d84:	1885883a 	add	r2,r3,r2
81135d88:	e0bffe15 	stw	r2,-8(fp)
81135d8c:	e0bffe17 	ldw	r2,-8(fp)
81135d90:	d0e09317 	ldw	r3,-32180(gp)
81135d94:	180b883a 	mov	r5,r3
81135d98:	1009883a 	mov	r4,r2
81135d9c:	1131b700 	call	81131b70 <Read_Sector_Data>
81135da0:	10001426 	beq	r2,zero,81135df4 <alt_up_sd_card_fclose+0x188>
81135da4:	e0ffff0f 	ldh	r3,-4(fp)
81135da8:	00a04574 	movhi	r2,33045
81135dac:	108d9a04 	addi	r2,r2,13928
81135db0:	180691ba 	slli	r3,r3,6
81135db4:	10c5883a 	add	r2,r2,r3
81135db8:	10800c04 	addi	r2,r2,48
81135dbc:	1080000b 	ldhu	r2,0(r2)
81135dc0:	113fffcc 	andi	r4,r2,65535
81135dc4:	2120001c 	xori	r4,r4,32768
81135dc8:	21200004 	addi	r4,r4,-32768
81135dcc:	e0bfff0f 	ldh	r2,-4(fp)
81135dd0:	100691ba 	slli	r3,r2,6
81135dd4:	00a04574 	movhi	r2,33045
81135dd8:	108d9a04 	addi	r2,r2,13928
81135ddc:	1885883a 	add	r2,r3,r2
81135de0:	100b883a 	mov	r5,r2
81135de4:	11322240 	call	81132224 <Write_File_Record_At_Offset>
81135de8:	10000226 	beq	r2,zero,81135df4 <alt_up_sd_card_fclose+0x188>
81135dec:	1131b1c0 	call	81131b1c <Save_Modified_Sector>
81135df0:	e0bffd15 	stw	r2,-12(fp)
81135df4:	e0ffff0f 	ldh	r3,-4(fp)
81135df8:	00a04574 	movhi	r2,33045
81135dfc:	108d9a04 	addi	r2,r2,13928
81135e00:	180691ba 	slli	r3,r3,6
81135e04:	10c5883a 	add	r2,r2,r3
81135e08:	10800f04 	addi	r2,r2,60
81135e0c:	10000015 	stw	zero,0(r2)
81135e10:	00800044 	movi	r2,1
81135e14:	e0bffd15 	stw	r2,-12(fp)
81135e18:	e0bffd17 	ldw	r2,-12(fp)
81135e1c:	e037883a 	mov	sp,fp
81135e20:	dfc00117 	ldw	ra,4(sp)
81135e24:	df000017 	ldw	fp,0(sp)
81135e28:	dec00204 	addi	sp,sp,8
81135e2c:	f800283a 	ret

81135e30 <altera_avalon_jtag_uart_read_fd>:
81135e30:	defffa04 	addi	sp,sp,-24
81135e34:	de00012e 	bgeu	sp,et,81135e3c <altera_avalon_jtag_uart_read_fd+0xc>
81135e38:	003b68fa 	trap	3
81135e3c:	dfc00515 	stw	ra,20(sp)
81135e40:	df000415 	stw	fp,16(sp)
81135e44:	df000404 	addi	fp,sp,16
81135e48:	e13ffd15 	stw	r4,-12(fp)
81135e4c:	e17ffe15 	stw	r5,-8(fp)
81135e50:	e1bfff15 	stw	r6,-4(fp)
81135e54:	e0bffd17 	ldw	r2,-12(fp)
81135e58:	10800017 	ldw	r2,0(r2)
81135e5c:	e0bffc15 	stw	r2,-16(fp)
81135e60:	e0bffc17 	ldw	r2,-16(fp)
81135e64:	10c00a04 	addi	r3,r2,40
81135e68:	e0bffd17 	ldw	r2,-12(fp)
81135e6c:	10800217 	ldw	r2,8(r2)
81135e70:	100f883a 	mov	r7,r2
81135e74:	e1bfff17 	ldw	r6,-4(fp)
81135e78:	e17ffe17 	ldw	r5,-8(fp)
81135e7c:	1809883a 	mov	r4,r3
81135e80:	11366240 	call	81136624 <altera_avalon_jtag_uart_read>
81135e84:	e037883a 	mov	sp,fp
81135e88:	dfc00117 	ldw	ra,4(sp)
81135e8c:	df000017 	ldw	fp,0(sp)
81135e90:	dec00204 	addi	sp,sp,8
81135e94:	f800283a 	ret

81135e98 <altera_avalon_jtag_uart_write_fd>:
81135e98:	defffa04 	addi	sp,sp,-24
81135e9c:	de00012e 	bgeu	sp,et,81135ea4 <altera_avalon_jtag_uart_write_fd+0xc>
81135ea0:	003b68fa 	trap	3
81135ea4:	dfc00515 	stw	ra,20(sp)
81135ea8:	df000415 	stw	fp,16(sp)
81135eac:	df000404 	addi	fp,sp,16
81135eb0:	e13ffd15 	stw	r4,-12(fp)
81135eb4:	e17ffe15 	stw	r5,-8(fp)
81135eb8:	e1bfff15 	stw	r6,-4(fp)
81135ebc:	e0bffd17 	ldw	r2,-12(fp)
81135ec0:	10800017 	ldw	r2,0(r2)
81135ec4:	e0bffc15 	stw	r2,-16(fp)
81135ec8:	e0bffc17 	ldw	r2,-16(fp)
81135ecc:	10c00a04 	addi	r3,r2,40
81135ed0:	e0bffd17 	ldw	r2,-12(fp)
81135ed4:	10800217 	ldw	r2,8(r2)
81135ed8:	100f883a 	mov	r7,r2
81135edc:	e1bfff17 	ldw	r6,-4(fp)
81135ee0:	e17ffe17 	ldw	r5,-8(fp)
81135ee4:	1809883a 	mov	r4,r3
81135ee8:	11368e80 	call	811368e8 <altera_avalon_jtag_uart_write>
81135eec:	e037883a 	mov	sp,fp
81135ef0:	dfc00117 	ldw	ra,4(sp)
81135ef4:	df000017 	ldw	fp,0(sp)
81135ef8:	dec00204 	addi	sp,sp,8
81135efc:	f800283a 	ret

81135f00 <altera_avalon_jtag_uart_close_fd>:
81135f00:	defffc04 	addi	sp,sp,-16
81135f04:	de00012e 	bgeu	sp,et,81135f0c <altera_avalon_jtag_uart_close_fd+0xc>
81135f08:	003b68fa 	trap	3
81135f0c:	dfc00315 	stw	ra,12(sp)
81135f10:	df000215 	stw	fp,8(sp)
81135f14:	df000204 	addi	fp,sp,8
81135f18:	e13fff15 	stw	r4,-4(fp)
81135f1c:	e0bfff17 	ldw	r2,-4(fp)
81135f20:	10800017 	ldw	r2,0(r2)
81135f24:	e0bffe15 	stw	r2,-8(fp)
81135f28:	e0bffe17 	ldw	r2,-8(fp)
81135f2c:	10c00a04 	addi	r3,r2,40
81135f30:	e0bfff17 	ldw	r2,-4(fp)
81135f34:	10800217 	ldw	r2,8(r2)
81135f38:	100b883a 	mov	r5,r2
81135f3c:	1809883a 	mov	r4,r3
81135f40:	11364bc0 	call	811364bc <altera_avalon_jtag_uart_close>
81135f44:	e037883a 	mov	sp,fp
81135f48:	dfc00117 	ldw	ra,4(sp)
81135f4c:	df000017 	ldw	fp,0(sp)
81135f50:	dec00204 	addi	sp,sp,8
81135f54:	f800283a 	ret

81135f58 <altera_avalon_jtag_uart_ioctl_fd>:
81135f58:	defffa04 	addi	sp,sp,-24
81135f5c:	de00012e 	bgeu	sp,et,81135f64 <altera_avalon_jtag_uart_ioctl_fd+0xc>
81135f60:	003b68fa 	trap	3
81135f64:	dfc00515 	stw	ra,20(sp)
81135f68:	df000415 	stw	fp,16(sp)
81135f6c:	df000404 	addi	fp,sp,16
81135f70:	e13ffd15 	stw	r4,-12(fp)
81135f74:	e17ffe15 	stw	r5,-8(fp)
81135f78:	e1bfff15 	stw	r6,-4(fp)
81135f7c:	e0bffd17 	ldw	r2,-12(fp)
81135f80:	10800017 	ldw	r2,0(r2)
81135f84:	e0bffc15 	stw	r2,-16(fp)
81135f88:	e0bffc17 	ldw	r2,-16(fp)
81135f8c:	10800a04 	addi	r2,r2,40
81135f90:	e1bfff17 	ldw	r6,-4(fp)
81135f94:	e17ffe17 	ldw	r5,-8(fp)
81135f98:	1009883a 	mov	r4,r2
81135f9c:	113652c0 	call	8113652c <altera_avalon_jtag_uart_ioctl>
81135fa0:	e037883a 	mov	sp,fp
81135fa4:	dfc00117 	ldw	ra,4(sp)
81135fa8:	df000017 	ldw	fp,0(sp)
81135fac:	dec00204 	addi	sp,sp,8
81135fb0:	f800283a 	ret

81135fb4 <altera_avalon_jtag_uart_init>:
81135fb4:	defff104 	addi	sp,sp,-60
81135fb8:	de00012e 	bgeu	sp,et,81135fc0 <altera_avalon_jtag_uart_init+0xc>
81135fbc:	003b68fa 	trap	3
81135fc0:	dfc00e15 	stw	ra,56(sp)
81135fc4:	df000d15 	stw	fp,52(sp)
81135fc8:	df000d04 	addi	fp,sp,52
81135fcc:	e13ff915 	stw	r4,-28(fp)
81135fd0:	e17ffa15 	stw	r5,-24(fp)
81135fd4:	e1bffb15 	stw	r6,-20(fp)
81135fd8:	e0bff917 	ldw	r2,-28(fp)
81135fdc:	10800c04 	addi	r2,r2,48
81135fe0:	e0bff415 	stw	r2,-48(fp)
81135fe4:	e03ff80d 	sth	zero,-32(fp)
81135fe8:	e0bff80b 	ldhu	r2,-32(fp)
81135fec:	e0fff884 	addi	r3,fp,-30
81135ff0:	180b883a 	mov	r5,r3
81135ff4:	1009883a 	mov	r4,r2
81135ff8:	112a1840 	call	8112a184 <OSFlagCreate>
81135ffc:	1007883a 	mov	r3,r2
81136000:	e0bff417 	ldw	r2,-48(fp)
81136004:	10c00015 	stw	r3,0(r2)
81136008:	e0bff917 	ldw	r2,-28(fp)
8113600c:	10800a04 	addi	r2,r2,40
81136010:	e0bff515 	stw	r2,-44(fp)
81136014:	00800044 	movi	r2,1
81136018:	e0bff78d 	sth	r2,-34(fp)
8113601c:	e0bff78b 	ldhu	r2,-34(fp)
81136020:	1009883a 	mov	r4,r2
81136024:	112e0e00 	call	8112e0e0 <OSSemCreate>
81136028:	1007883a 	mov	r3,r2
8113602c:	e0bff517 	ldw	r2,-44(fp)
81136030:	10c00015 	stw	r3,0(r2)
81136034:	e0bff917 	ldw	r2,-28(fp)
81136038:	10800b04 	addi	r2,r2,44
8113603c:	e0bff615 	stw	r2,-40(fp)
81136040:	00800044 	movi	r2,1
81136044:	e0bff70d 	sth	r2,-36(fp)
81136048:	e0bff70b 	ldhu	r2,-36(fp)
8113604c:	1009883a 	mov	r4,r2
81136050:	112e0e00 	call	8112e0e0 <OSSemCreate>
81136054:	1007883a 	mov	r3,r2
81136058:	e0bff617 	ldw	r2,-40(fp)
8113605c:	10c00015 	stw	r3,0(r2)
81136060:	e0bff917 	ldw	r2,-28(fp)
81136064:	00c00044 	movi	r3,1
81136068:	10c00815 	stw	r3,32(r2)
8113606c:	e0bff917 	ldw	r2,-28(fp)
81136070:	10800017 	ldw	r2,0(r2)
81136074:	10800104 	addi	r2,r2,4
81136078:	1007883a 	mov	r3,r2
8113607c:	e0bff917 	ldw	r2,-28(fp)
81136080:	10800817 	ldw	r2,32(r2)
81136084:	18800035 	stwio	r2,0(r3)
81136088:	e0bffa17 	ldw	r2,-24(fp)
8113608c:	e0fffb17 	ldw	r3,-20(fp)
81136090:	d8000015 	stw	zero,0(sp)
81136094:	e1fff917 	ldw	r7,-28(fp)
81136098:	01a044f4 	movhi	r6,33043
8113609c:	31984104 	addi	r6,r6,24836
811360a0:	180b883a 	mov	r5,r3
811360a4:	1009883a 	mov	r4,r2
811360a8:	1139f080 	call	81139f08 <alt_ic_isr_register>
811360ac:	e0bff917 	ldw	r2,-28(fp)
811360b0:	10000915 	stw	zero,36(r2)
811360b4:	e0bff917 	ldw	r2,-28(fp)
811360b8:	10800204 	addi	r2,r2,8
811360bc:	d0e06a17 	ldw	r3,-32344(gp)
811360c0:	e1fff917 	ldw	r7,-28(fp)
811360c4:	01a044f4 	movhi	r6,33043
811360c8:	3198ec04 	addi	r6,r6,25520
811360cc:	180b883a 	mov	r5,r3
811360d0:	1009883a 	mov	r4,r2
811360d4:	11399880 	call	81139988 <alt_alarm_start>
811360d8:	1000040e 	bge	r2,zero,811360ec <altera_avalon_jtag_uart_init+0x138>
811360dc:	e0fff917 	ldw	r3,-28(fp)
811360e0:	00a00034 	movhi	r2,32768
811360e4:	10bfffc4 	addi	r2,r2,-1
811360e8:	18800115 	stw	r2,4(r3)
811360ec:	0001883a 	nop
811360f0:	e037883a 	mov	sp,fp
811360f4:	dfc00117 	ldw	ra,4(sp)
811360f8:	df000017 	ldw	fp,0(sp)
811360fc:	dec00204 	addi	sp,sp,8
81136100:	f800283a 	ret

81136104 <altera_avalon_jtag_uart_irq>:
81136104:	defff204 	addi	sp,sp,-56
81136108:	de00012e 	bgeu	sp,et,81136110 <altera_avalon_jtag_uart_irq+0xc>
8113610c:	003b68fa 	trap	3
81136110:	dfc00d15 	stw	ra,52(sp)
81136114:	df000c15 	stw	fp,48(sp)
81136118:	df000c04 	addi	fp,sp,48
8113611c:	e13fff15 	stw	r4,-4(fp)
81136120:	e0bfff17 	ldw	r2,-4(fp)
81136124:	e0bff615 	stw	r2,-40(fp)
81136128:	e0bff617 	ldw	r2,-40(fp)
8113612c:	10800017 	ldw	r2,0(r2)
81136130:	e0bff715 	stw	r2,-36(fp)
81136134:	e0bff717 	ldw	r2,-36(fp)
81136138:	10800104 	addi	r2,r2,4
8113613c:	10800037 	ldwio	r2,0(r2)
81136140:	e0bff815 	stw	r2,-32(fp)
81136144:	e0bff817 	ldw	r2,-32(fp)
81136148:	1080c00c 	andi	r2,r2,768
8113614c:	10009126 	beq	r2,zero,81136394 <altera_avalon_jtag_uart_irq+0x290>
81136150:	e0bff817 	ldw	r2,-32(fp)
81136154:	1080400c 	andi	r2,r2,256
81136158:	10004726 	beq	r2,zero,81136278 <altera_avalon_jtag_uart_irq+0x174>
8113615c:	00800074 	movhi	r2,1
81136160:	e0bff415 	stw	r2,-48(fp)
81136164:	e0bff617 	ldw	r2,-40(fp)
81136168:	10800d17 	ldw	r2,52(r2)
8113616c:	10800044 	addi	r2,r2,1
81136170:	1081ffcc 	andi	r2,r2,2047
81136174:	e0bff915 	stw	r2,-28(fp)
81136178:	e0bff617 	ldw	r2,-40(fp)
8113617c:	10c00e17 	ldw	r3,56(r2)
81136180:	e0bff917 	ldw	r2,-28(fp)
81136184:	18802726 	beq	r3,r2,81136224 <altera_avalon_jtag_uart_irq+0x120>
81136188:	e0bff717 	ldw	r2,-36(fp)
8113618c:	10800037 	ldwio	r2,0(r2)
81136190:	e0bff415 	stw	r2,-48(fp)
81136194:	e0bff417 	ldw	r2,-48(fp)
81136198:	10a0000c 	andi	r2,r2,32768
8113619c:	10002326 	beq	r2,zero,8113622c <altera_avalon_jtag_uart_irq+0x128>
811361a0:	e0bff617 	ldw	r2,-40(fp)
811361a4:	10800d17 	ldw	r2,52(r2)
811361a8:	e0fff417 	ldw	r3,-48(fp)
811361ac:	1809883a 	mov	r4,r3
811361b0:	e0fff617 	ldw	r3,-40(fp)
811361b4:	1885883a 	add	r2,r3,r2
811361b8:	10801104 	addi	r2,r2,68
811361bc:	11000005 	stb	r4,0(r2)
811361c0:	e0bff617 	ldw	r2,-40(fp)
811361c4:	10800d17 	ldw	r2,52(r2)
811361c8:	10800044 	addi	r2,r2,1
811361cc:	10c1ffcc 	andi	r3,r2,2047
811361d0:	e0bff617 	ldw	r2,-40(fp)
811361d4:	10c00d15 	stw	r3,52(r2)
811361d8:	e0bff617 	ldw	r2,-40(fp)
811361dc:	10800c17 	ldw	r2,48(r2)
811361e0:	e0bffb15 	stw	r2,-20(fp)
811361e4:	00800044 	movi	r2,1
811361e8:	e0bffc0d 	sth	r2,-16(fp)
811361ec:	00800044 	movi	r2,1
811361f0:	e0bffc85 	stb	r2,-14(fp)
811361f4:	d0a07303 	ldbu	r2,-32308(gp)
811361f8:	10803fcc 	andi	r2,r2,255
811361fc:	103fd926 	beq	r2,zero,81136164 <__reset+0xfb116164>
81136200:	e0bffc0b 	ldhu	r2,-16(fp)
81136204:	e0fffc83 	ldbu	r3,-14(fp)
81136208:	e13ffdc4 	addi	r4,fp,-9
8113620c:	200f883a 	mov	r7,r4
81136210:	180d883a 	mov	r6,r3
81136214:	100b883a 	mov	r5,r2
81136218:	e13ffb17 	ldw	r4,-20(fp)
8113621c:	112ad900 	call	8112ad90 <OSFlagPost>
81136220:	003fd006 	br	81136164 <__reset+0xfb116164>
81136224:	0001883a 	nop
81136228:	00000106 	br	81136230 <altera_avalon_jtag_uart_irq+0x12c>
8113622c:	0001883a 	nop
81136230:	e0bff417 	ldw	r2,-48(fp)
81136234:	10bfffec 	andhi	r2,r2,65535
81136238:	10000f26 	beq	r2,zero,81136278 <altera_avalon_jtag_uart_irq+0x174>
8113623c:	e0bff617 	ldw	r2,-40(fp)
81136240:	10c00817 	ldw	r3,32(r2)
81136244:	00bfff84 	movi	r2,-2
81136248:	1886703a 	and	r3,r3,r2
8113624c:	e0bff617 	ldw	r2,-40(fp)
81136250:	10c00815 	stw	r3,32(r2)
81136254:	e0bff717 	ldw	r2,-36(fp)
81136258:	10800104 	addi	r2,r2,4
8113625c:	1007883a 	mov	r3,r2
81136260:	e0bff617 	ldw	r2,-40(fp)
81136264:	10800817 	ldw	r2,32(r2)
81136268:	18800035 	stwio	r2,0(r3)
8113626c:	e0bff717 	ldw	r2,-36(fp)
81136270:	10800104 	addi	r2,r2,4
81136274:	10800037 	ldwio	r2,0(r2)
81136278:	e0bff817 	ldw	r2,-32(fp)
8113627c:	1080800c 	andi	r2,r2,512
81136280:	103fac26 	beq	r2,zero,81136134 <__reset+0xfb116134>
81136284:	e0bff817 	ldw	r2,-32(fp)
81136288:	1004d43a 	srli	r2,r2,16
8113628c:	e0bff515 	stw	r2,-44(fp)
81136290:	00002606 	br	8113632c <altera_avalon_jtag_uart_irq+0x228>
81136294:	e0bff717 	ldw	r2,-36(fp)
81136298:	e0fff617 	ldw	r3,-40(fp)
8113629c:	18c01017 	ldw	r3,64(r3)
811362a0:	e13ff617 	ldw	r4,-40(fp)
811362a4:	20c7883a 	add	r3,r4,r3
811362a8:	18c21104 	addi	r3,r3,2116
811362ac:	18c00003 	ldbu	r3,0(r3)
811362b0:	18c03fcc 	andi	r3,r3,255
811362b4:	18c0201c 	xori	r3,r3,128
811362b8:	18ffe004 	addi	r3,r3,-128
811362bc:	10c00035 	stwio	r3,0(r2)
811362c0:	e0bff617 	ldw	r2,-40(fp)
811362c4:	10801017 	ldw	r2,64(r2)
811362c8:	10800044 	addi	r2,r2,1
811362cc:	10c1ffcc 	andi	r3,r2,2047
811362d0:	e0bff617 	ldw	r2,-40(fp)
811362d4:	10c01015 	stw	r3,64(r2)
811362d8:	e0bff617 	ldw	r2,-40(fp)
811362dc:	10800c17 	ldw	r2,48(r2)
811362e0:	e0bffa15 	stw	r2,-24(fp)
811362e4:	00800084 	movi	r2,2
811362e8:	e0bffd0d 	sth	r2,-12(fp)
811362ec:	00800044 	movi	r2,1
811362f0:	e0bffd85 	stb	r2,-10(fp)
811362f4:	d0a07303 	ldbu	r2,-32308(gp)
811362f8:	10803fcc 	andi	r2,r2,255
811362fc:	10000826 	beq	r2,zero,81136320 <altera_avalon_jtag_uart_irq+0x21c>
81136300:	e0bffd0b 	ldhu	r2,-12(fp)
81136304:	e0fffd83 	ldbu	r3,-10(fp)
81136308:	e13ffe04 	addi	r4,fp,-8
8113630c:	200f883a 	mov	r7,r4
81136310:	180d883a 	mov	r6,r3
81136314:	100b883a 	mov	r5,r2
81136318:	e13ffa17 	ldw	r4,-24(fp)
8113631c:	112ad900 	call	8112ad90 <OSFlagPost>
81136320:	e0bff517 	ldw	r2,-44(fp)
81136324:	10bfffc4 	addi	r2,r2,-1
81136328:	e0bff515 	stw	r2,-44(fp)
8113632c:	e0bff517 	ldw	r2,-44(fp)
81136330:	10000526 	beq	r2,zero,81136348 <altera_avalon_jtag_uart_irq+0x244>
81136334:	e0bff617 	ldw	r2,-40(fp)
81136338:	10c01017 	ldw	r3,64(r2)
8113633c:	e0bff617 	ldw	r2,-40(fp)
81136340:	10800f17 	ldw	r2,60(r2)
81136344:	18bfd31e 	bne	r3,r2,81136294 <__reset+0xfb116294>
81136348:	e0bff517 	ldw	r2,-44(fp)
8113634c:	103f7926 	beq	r2,zero,81136134 <__reset+0xfb116134>
81136350:	e0bff617 	ldw	r2,-40(fp)
81136354:	10c00817 	ldw	r3,32(r2)
81136358:	00bfff44 	movi	r2,-3
8113635c:	1886703a 	and	r3,r3,r2
81136360:	e0bff617 	ldw	r2,-40(fp)
81136364:	10c00815 	stw	r3,32(r2)
81136368:	e0bff617 	ldw	r2,-40(fp)
8113636c:	10800017 	ldw	r2,0(r2)
81136370:	10800104 	addi	r2,r2,4
81136374:	1007883a 	mov	r3,r2
81136378:	e0bff617 	ldw	r2,-40(fp)
8113637c:	10800817 	ldw	r2,32(r2)
81136380:	18800035 	stwio	r2,0(r3)
81136384:	e0bff717 	ldw	r2,-36(fp)
81136388:	10800104 	addi	r2,r2,4
8113638c:	10800037 	ldwio	r2,0(r2)
81136390:	003f6806 	br	81136134 <__reset+0xfb116134>
81136394:	0001883a 	nop
81136398:	0001883a 	nop
8113639c:	e037883a 	mov	sp,fp
811363a0:	dfc00117 	ldw	ra,4(sp)
811363a4:	df000017 	ldw	fp,0(sp)
811363a8:	dec00204 	addi	sp,sp,8
811363ac:	f800283a 	ret

811363b0 <altera_avalon_jtag_uart_timeout>:
811363b0:	defff904 	addi	sp,sp,-28
811363b4:	de00012e 	bgeu	sp,et,811363bc <altera_avalon_jtag_uart_timeout+0xc>
811363b8:	003b68fa 	trap	3
811363bc:	dfc00615 	stw	ra,24(sp)
811363c0:	df000515 	stw	fp,20(sp)
811363c4:	df000504 	addi	fp,sp,20
811363c8:	e13fff15 	stw	r4,-4(fp)
811363cc:	e0bfff17 	ldw	r2,-4(fp)
811363d0:	e0bffb15 	stw	r2,-20(fp)
811363d4:	e0bffb17 	ldw	r2,-20(fp)
811363d8:	10800017 	ldw	r2,0(r2)
811363dc:	10800104 	addi	r2,r2,4
811363e0:	10800037 	ldwio	r2,0(r2)
811363e4:	e0bffc15 	stw	r2,-16(fp)
811363e8:	e0bffc17 	ldw	r2,-16(fp)
811363ec:	1081000c 	andi	r2,r2,1024
811363f0:	10000b26 	beq	r2,zero,81136420 <altera_avalon_jtag_uart_timeout+0x70>
811363f4:	e0bffb17 	ldw	r2,-20(fp)
811363f8:	10800017 	ldw	r2,0(r2)
811363fc:	10800104 	addi	r2,r2,4
81136400:	1007883a 	mov	r3,r2
81136404:	e0bffb17 	ldw	r2,-20(fp)
81136408:	10800817 	ldw	r2,32(r2)
8113640c:	10810014 	ori	r2,r2,1024
81136410:	18800035 	stwio	r2,0(r3)
81136414:	e0bffb17 	ldw	r2,-20(fp)
81136418:	10000915 	stw	zero,36(r2)
8113641c:	00002106 	br	811364a4 <altera_avalon_jtag_uart_timeout+0xf4>
81136420:	e0bffb17 	ldw	r2,-20(fp)
81136424:	10c00917 	ldw	r3,36(r2)
81136428:	00a00034 	movhi	r2,32768
8113642c:	10bfff04 	addi	r2,r2,-4
81136430:	10c01c36 	bltu	r2,r3,811364a4 <altera_avalon_jtag_uart_timeout+0xf4>
81136434:	e0bffb17 	ldw	r2,-20(fp)
81136438:	10800917 	ldw	r2,36(r2)
8113643c:	10c00044 	addi	r3,r2,1
81136440:	e0bffb17 	ldw	r2,-20(fp)
81136444:	10c00915 	stw	r3,36(r2)
81136448:	e0bffb17 	ldw	r2,-20(fp)
8113644c:	10c00917 	ldw	r3,36(r2)
81136450:	e0bffb17 	ldw	r2,-20(fp)
81136454:	10800117 	ldw	r2,4(r2)
81136458:	18801236 	bltu	r3,r2,811364a4 <altera_avalon_jtag_uart_timeout+0xf4>
8113645c:	e0bffb17 	ldw	r2,-20(fp)
81136460:	10800c17 	ldw	r2,48(r2)
81136464:	e0bffd15 	stw	r2,-12(fp)
81136468:	00800104 	movi	r2,4
8113646c:	e0bffe0d 	sth	r2,-8(fp)
81136470:	00800044 	movi	r2,1
81136474:	e0bffe85 	stb	r2,-6(fp)
81136478:	d0a07303 	ldbu	r2,-32308(gp)
8113647c:	10803fcc 	andi	r2,r2,255
81136480:	10000826 	beq	r2,zero,811364a4 <altera_avalon_jtag_uart_timeout+0xf4>
81136484:	e0bffe0b 	ldhu	r2,-8(fp)
81136488:	e0fffe83 	ldbu	r3,-6(fp)
8113648c:	e13ffec4 	addi	r4,fp,-5
81136490:	200f883a 	mov	r7,r4
81136494:	180d883a 	mov	r6,r3
81136498:	100b883a 	mov	r5,r2
8113649c:	e13ffd17 	ldw	r4,-12(fp)
811364a0:	112ad900 	call	8112ad90 <OSFlagPost>
811364a4:	d0a06a17 	ldw	r2,-32344(gp)
811364a8:	e037883a 	mov	sp,fp
811364ac:	dfc00117 	ldw	ra,4(sp)
811364b0:	df000017 	ldw	fp,0(sp)
811364b4:	dec00204 	addi	sp,sp,8
811364b8:	f800283a 	ret

811364bc <altera_avalon_jtag_uart_close>:
811364bc:	defffd04 	addi	sp,sp,-12
811364c0:	de00012e 	bgeu	sp,et,811364c8 <altera_avalon_jtag_uart_close+0xc>
811364c4:	003b68fa 	trap	3
811364c8:	df000215 	stw	fp,8(sp)
811364cc:	df000204 	addi	fp,sp,8
811364d0:	e13ffe15 	stw	r4,-8(fp)
811364d4:	e17fff15 	stw	r5,-4(fp)
811364d8:	00000506 	br	811364f0 <altera_avalon_jtag_uart_close+0x34>
811364dc:	e0bfff17 	ldw	r2,-4(fp)
811364e0:	1090000c 	andi	r2,r2,16384
811364e4:	10000226 	beq	r2,zero,811364f0 <altera_avalon_jtag_uart_close+0x34>
811364e8:	00bffd44 	movi	r2,-11
811364ec:	00000b06 	br	8113651c <altera_avalon_jtag_uart_close+0x60>
811364f0:	e0bffe17 	ldw	r2,-8(fp)
811364f4:	10c01017 	ldw	r3,64(r2)
811364f8:	e0bffe17 	ldw	r2,-8(fp)
811364fc:	10800f17 	ldw	r2,60(r2)
81136500:	18800526 	beq	r3,r2,81136518 <altera_avalon_jtag_uart_close+0x5c>
81136504:	e0bffe17 	ldw	r2,-8(fp)
81136508:	10c00917 	ldw	r3,36(r2)
8113650c:	e0bffe17 	ldw	r2,-8(fp)
81136510:	10800117 	ldw	r2,4(r2)
81136514:	18bff136 	bltu	r3,r2,811364dc <__reset+0xfb1164dc>
81136518:	0005883a 	mov	r2,zero
8113651c:	e037883a 	mov	sp,fp
81136520:	df000017 	ldw	fp,0(sp)
81136524:	dec00104 	addi	sp,sp,4
81136528:	f800283a 	ret

8113652c <altera_avalon_jtag_uart_ioctl>:
8113652c:	defffa04 	addi	sp,sp,-24
81136530:	de00012e 	bgeu	sp,et,81136538 <altera_avalon_jtag_uart_ioctl+0xc>
81136534:	003b68fa 	trap	3
81136538:	df000515 	stw	fp,20(sp)
8113653c:	df000504 	addi	fp,sp,20
81136540:	e13ffd15 	stw	r4,-12(fp)
81136544:	e17ffe15 	stw	r5,-8(fp)
81136548:	e1bfff15 	stw	r6,-4(fp)
8113654c:	00bff9c4 	movi	r2,-25
81136550:	e0bffb15 	stw	r2,-20(fp)
81136554:	e0bffe17 	ldw	r2,-8(fp)
81136558:	10da8060 	cmpeqi	r3,r2,27137
8113655c:	1800031e 	bne	r3,zero,8113656c <altera_avalon_jtag_uart_ioctl+0x40>
81136560:	109a80a0 	cmpeqi	r2,r2,27138
81136564:	1000181e 	bne	r2,zero,811365c8 <altera_avalon_jtag_uart_ioctl+0x9c>
81136568:	00002906 	br	81136610 <altera_avalon_jtag_uart_ioctl+0xe4>
8113656c:	e0bffd17 	ldw	r2,-12(fp)
81136570:	10c00117 	ldw	r3,4(r2)
81136574:	00a00034 	movhi	r2,32768
81136578:	10bfffc4 	addi	r2,r2,-1
8113657c:	18802126 	beq	r3,r2,81136604 <altera_avalon_jtag_uart_ioctl+0xd8>
81136580:	e0bfff17 	ldw	r2,-4(fp)
81136584:	10800017 	ldw	r2,0(r2)
81136588:	e0bffc15 	stw	r2,-16(fp)
8113658c:	e0bffc17 	ldw	r2,-16(fp)
81136590:	10800090 	cmplti	r2,r2,2
81136594:	1000061e 	bne	r2,zero,811365b0 <altera_avalon_jtag_uart_ioctl+0x84>
81136598:	e0fffc17 	ldw	r3,-16(fp)
8113659c:	00a00034 	movhi	r2,32768
811365a0:	10bfffc4 	addi	r2,r2,-1
811365a4:	18800226 	beq	r3,r2,811365b0 <altera_avalon_jtag_uart_ioctl+0x84>
811365a8:	e0bffc17 	ldw	r2,-16(fp)
811365ac:	00000206 	br	811365b8 <altera_avalon_jtag_uart_ioctl+0x8c>
811365b0:	00a00034 	movhi	r2,32768
811365b4:	10bfff84 	addi	r2,r2,-2
811365b8:	e0fffd17 	ldw	r3,-12(fp)
811365bc:	18800115 	stw	r2,4(r3)
811365c0:	e03ffb15 	stw	zero,-20(fp)
811365c4:	00000f06 	br	81136604 <altera_avalon_jtag_uart_ioctl+0xd8>
811365c8:	e0bffd17 	ldw	r2,-12(fp)
811365cc:	10c00117 	ldw	r3,4(r2)
811365d0:	00a00034 	movhi	r2,32768
811365d4:	10bfffc4 	addi	r2,r2,-1
811365d8:	18800c26 	beq	r3,r2,8113660c <altera_avalon_jtag_uart_ioctl+0xe0>
811365dc:	e0bffd17 	ldw	r2,-12(fp)
811365e0:	10c00917 	ldw	r3,36(r2)
811365e4:	e0bffd17 	ldw	r2,-12(fp)
811365e8:	10800117 	ldw	r2,4(r2)
811365ec:	1885803a 	cmpltu	r2,r3,r2
811365f0:	10c03fcc 	andi	r3,r2,255
811365f4:	e0bfff17 	ldw	r2,-4(fp)
811365f8:	10c00015 	stw	r3,0(r2)
811365fc:	e03ffb15 	stw	zero,-20(fp)
81136600:	00000206 	br	8113660c <altera_avalon_jtag_uart_ioctl+0xe0>
81136604:	0001883a 	nop
81136608:	00000106 	br	81136610 <altera_avalon_jtag_uart_ioctl+0xe4>
8113660c:	0001883a 	nop
81136610:	e0bffb17 	ldw	r2,-20(fp)
81136614:	e037883a 	mov	sp,fp
81136618:	df000017 	ldw	fp,0(sp)
8113661c:	dec00104 	addi	sp,sp,4
81136620:	f800283a 	ret

81136624 <altera_avalon_jtag_uart_read>:
81136624:	deffed04 	addi	sp,sp,-76
81136628:	de00012e 	bgeu	sp,et,81136630 <altera_avalon_jtag_uart_read+0xc>
8113662c:	003b68fa 	trap	3
81136630:	dfc01215 	stw	ra,72(sp)
81136634:	df001115 	stw	fp,68(sp)
81136638:	df001104 	addi	fp,sp,68
8113663c:	e13ffc15 	stw	r4,-16(fp)
81136640:	e17ffd15 	stw	r5,-12(fp)
81136644:	e1bffe15 	stw	r6,-8(fp)
81136648:	e1ffff15 	stw	r7,-4(fp)
8113664c:	e0bffd17 	ldw	r2,-12(fp)
81136650:	e0bff015 	stw	r2,-64(fp)
81136654:	e0bffc17 	ldw	r2,-16(fp)
81136658:	10800a17 	ldw	r2,40(r2)
8113665c:	e0bff815 	stw	r2,-32(fp)
81136660:	e03ff90d 	sth	zero,-28(fp)
81136664:	e0bff90b 	ldhu	r2,-28(fp)
81136668:	e0fffb04 	addi	r3,fp,-20
8113666c:	180d883a 	mov	r6,r3
81136670:	100b883a 	mov	r5,r2
81136674:	e13ff817 	ldw	r4,-32(fp)
81136678:	112e4080 	call	8112e408 <OSSemPend>
8113667c:	00006106 	br	81136804 <altera_avalon_jtag_uart_read+0x1e0>
81136680:	e0bffc17 	ldw	r2,-16(fp)
81136684:	10800d17 	ldw	r2,52(r2)
81136688:	e0bff315 	stw	r2,-52(fp)
8113668c:	e0bffc17 	ldw	r2,-16(fp)
81136690:	10800e17 	ldw	r2,56(r2)
81136694:	e0bff415 	stw	r2,-48(fp)
81136698:	e0fff317 	ldw	r3,-52(fp)
8113669c:	e0bff417 	ldw	r2,-48(fp)
811366a0:	18800536 	bltu	r3,r2,811366b8 <altera_avalon_jtag_uart_read+0x94>
811366a4:	e0fff317 	ldw	r3,-52(fp)
811366a8:	e0bff417 	ldw	r2,-48(fp)
811366ac:	1885c83a 	sub	r2,r3,r2
811366b0:	e0bff115 	stw	r2,-60(fp)
811366b4:	00000406 	br	811366c8 <altera_avalon_jtag_uart_read+0xa4>
811366b8:	00c20004 	movi	r3,2048
811366bc:	e0bff417 	ldw	r2,-48(fp)
811366c0:	1885c83a 	sub	r2,r3,r2
811366c4:	e0bff115 	stw	r2,-60(fp)
811366c8:	e0bff117 	ldw	r2,-60(fp)
811366cc:	10001e26 	beq	r2,zero,81136748 <altera_avalon_jtag_uart_read+0x124>
811366d0:	e0fffe17 	ldw	r3,-8(fp)
811366d4:	e0bff117 	ldw	r2,-60(fp)
811366d8:	1880022e 	bgeu	r3,r2,811366e4 <altera_avalon_jtag_uart_read+0xc0>
811366dc:	e0bffe17 	ldw	r2,-8(fp)
811366e0:	e0bff115 	stw	r2,-60(fp)
811366e4:	e0bffc17 	ldw	r2,-16(fp)
811366e8:	10c01104 	addi	r3,r2,68
811366ec:	e0bff417 	ldw	r2,-48(fp)
811366f0:	1885883a 	add	r2,r3,r2
811366f4:	e1bff117 	ldw	r6,-60(fp)
811366f8:	100b883a 	mov	r5,r2
811366fc:	e13ff017 	ldw	r4,-64(fp)
81136700:	11120c40 	call	811120c4 <memcpy>
81136704:	e0fff017 	ldw	r3,-64(fp)
81136708:	e0bff117 	ldw	r2,-60(fp)
8113670c:	1885883a 	add	r2,r3,r2
81136710:	e0bff015 	stw	r2,-64(fp)
81136714:	e0fffe17 	ldw	r3,-8(fp)
81136718:	e0bff117 	ldw	r2,-60(fp)
8113671c:	1885c83a 	sub	r2,r3,r2
81136720:	e0bffe15 	stw	r2,-8(fp)
81136724:	e0fff417 	ldw	r3,-48(fp)
81136728:	e0bff117 	ldw	r2,-60(fp)
8113672c:	1885883a 	add	r2,r3,r2
81136730:	10c1ffcc 	andi	r3,r2,2047
81136734:	e0bffc17 	ldw	r2,-16(fp)
81136738:	10c00e15 	stw	r3,56(r2)
8113673c:	e0bffe17 	ldw	r2,-8(fp)
81136740:	00bfcf16 	blt	zero,r2,81136680 <__reset+0xfb116680>
81136744:	00000106 	br	8113674c <altera_avalon_jtag_uart_read+0x128>
81136748:	0001883a 	nop
8113674c:	e0fff017 	ldw	r3,-64(fp)
81136750:	e0bffd17 	ldw	r2,-12(fp)
81136754:	18802e1e 	bne	r3,r2,81136810 <altera_avalon_jtag_uart_read+0x1ec>
81136758:	e0bfff17 	ldw	r2,-4(fp)
8113675c:	1090000c 	andi	r2,r2,16384
81136760:	10002d1e 	bne	r2,zero,81136818 <altera_avalon_jtag_uart_read+0x1f4>
81136764:	d0a07303 	ldbu	r2,-32308(gp)
81136768:	10803fcc 	andi	r2,r2,255
8113676c:	10800058 	cmpnei	r2,r2,1
81136770:	1000161e 	bne	r2,zero,811367cc <altera_avalon_jtag_uart_read+0x1a8>
81136774:	e0bffc17 	ldw	r2,-16(fp)
81136778:	10800c17 	ldw	r2,48(r2)
8113677c:	e0bff215 	stw	r2,-56(fp)
81136780:	00800144 	movi	r2,5
81136784:	e0bff98d 	sth	r2,-26(fp)
81136788:	00bfe0c4 	movi	r2,-125
8113678c:	e0bffa05 	stb	r2,-24(fp)
81136790:	e03ffa8d 	sth	zero,-22(fp)
81136794:	d0a07303 	ldbu	r2,-32308(gp)
81136798:	10803fcc 	andi	r2,r2,255
8113679c:	10001526 	beq	r2,zero,811367f4 <altera_avalon_jtag_uart_read+0x1d0>
811367a0:	e0fff98b 	ldhu	r3,-26(fp)
811367a4:	e13ffa03 	ldbu	r4,-24(fp)
811367a8:	e17ffa8b 	ldhu	r5,-22(fp)
811367ac:	e0bffb44 	addi	r2,fp,-19
811367b0:	d8800015 	stw	r2,0(sp)
811367b4:	280f883a 	mov	r7,r5
811367b8:	200d883a 	mov	r6,r4
811367bc:	180b883a 	mov	r5,r3
811367c0:	e13ff217 	ldw	r4,-56(fp)
811367c4:	112a7680 	call	8112a768 <OSFlagPend>
811367c8:	00000a06 	br	811367f4 <altera_avalon_jtag_uart_read+0x1d0>
811367cc:	0001883a 	nop
811367d0:	e0bffc17 	ldw	r2,-16(fp)
811367d4:	10c00d17 	ldw	r3,52(r2)
811367d8:	e0bff317 	ldw	r2,-52(fp)
811367dc:	1880051e 	bne	r3,r2,811367f4 <altera_avalon_jtag_uart_read+0x1d0>
811367e0:	e0bffc17 	ldw	r2,-16(fp)
811367e4:	10c00917 	ldw	r3,36(r2)
811367e8:	e0bffc17 	ldw	r2,-16(fp)
811367ec:	10800117 	ldw	r2,4(r2)
811367f0:	18bff736 	bltu	r3,r2,811367d0 <__reset+0xfb1167d0>
811367f4:	e0bffc17 	ldw	r2,-16(fp)
811367f8:	10c00d17 	ldw	r3,52(r2)
811367fc:	e0bff317 	ldw	r2,-52(fp)
81136800:	18800726 	beq	r3,r2,81136820 <altera_avalon_jtag_uart_read+0x1fc>
81136804:	e0bffe17 	ldw	r2,-8(fp)
81136808:	00bf9d16 	blt	zero,r2,81136680 <__reset+0xfb116680>
8113680c:	00000506 	br	81136824 <altera_avalon_jtag_uart_read+0x200>
81136810:	0001883a 	nop
81136814:	00000306 	br	81136824 <altera_avalon_jtag_uart_read+0x200>
81136818:	0001883a 	nop
8113681c:	00000106 	br	81136824 <altera_avalon_jtag_uart_read+0x200>
81136820:	0001883a 	nop
81136824:	e0bffc17 	ldw	r2,-16(fp)
81136828:	10800a17 	ldw	r2,40(r2)
8113682c:	1009883a 	mov	r4,r2
81136830:	112e7900 	call	8112e790 <OSSemPost>
81136834:	e0fff017 	ldw	r3,-64(fp)
81136838:	e0bffd17 	ldw	r2,-12(fp)
8113683c:	18801826 	beq	r3,r2,811368a0 <altera_avalon_jtag_uart_read+0x27c>
81136840:	0005303a 	rdctl	r2,status
81136844:	e0bff715 	stw	r2,-36(fp)
81136848:	e0fff717 	ldw	r3,-36(fp)
8113684c:	00bfff84 	movi	r2,-2
81136850:	1884703a 	and	r2,r3,r2
81136854:	1001703a 	wrctl	status,r2
81136858:	e0bff717 	ldw	r2,-36(fp)
8113685c:	e0bff615 	stw	r2,-40(fp)
81136860:	e0bffc17 	ldw	r2,-16(fp)
81136864:	10800817 	ldw	r2,32(r2)
81136868:	10c00054 	ori	r3,r2,1
8113686c:	e0bffc17 	ldw	r2,-16(fp)
81136870:	10c00815 	stw	r3,32(r2)
81136874:	e0bffc17 	ldw	r2,-16(fp)
81136878:	10800017 	ldw	r2,0(r2)
8113687c:	10800104 	addi	r2,r2,4
81136880:	1007883a 	mov	r3,r2
81136884:	e0bffc17 	ldw	r2,-16(fp)
81136888:	10800817 	ldw	r2,32(r2)
8113688c:	18800035 	stwio	r2,0(r3)
81136890:	e0bff617 	ldw	r2,-40(fp)
81136894:	e0bff515 	stw	r2,-44(fp)
81136898:	e0bff517 	ldw	r2,-44(fp)
8113689c:	1001703a 	wrctl	status,r2
811368a0:	e0fff017 	ldw	r3,-64(fp)
811368a4:	e0bffd17 	ldw	r2,-12(fp)
811368a8:	18800426 	beq	r3,r2,811368bc <altera_avalon_jtag_uart_read+0x298>
811368ac:	e0fff017 	ldw	r3,-64(fp)
811368b0:	e0bffd17 	ldw	r2,-12(fp)
811368b4:	1885c83a 	sub	r2,r3,r2
811368b8:	00000606 	br	811368d4 <altera_avalon_jtag_uart_read+0x2b0>
811368bc:	e0bfff17 	ldw	r2,-4(fp)
811368c0:	1090000c 	andi	r2,r2,16384
811368c4:	10000226 	beq	r2,zero,811368d0 <altera_avalon_jtag_uart_read+0x2ac>
811368c8:	00bffd44 	movi	r2,-11
811368cc:	00000106 	br	811368d4 <altera_avalon_jtag_uart_read+0x2b0>
811368d0:	00bffec4 	movi	r2,-5
811368d4:	e037883a 	mov	sp,fp
811368d8:	dfc00117 	ldw	ra,4(sp)
811368dc:	df000017 	ldw	fp,0(sp)
811368e0:	dec00204 	addi	sp,sp,8
811368e4:	f800283a 	ret

811368e8 <altera_avalon_jtag_uart_write>:
811368e8:	deffed04 	addi	sp,sp,-76
811368ec:	de00012e 	bgeu	sp,et,811368f4 <altera_avalon_jtag_uart_write+0xc>
811368f0:	003b68fa 	trap	3
811368f4:	dfc01215 	stw	ra,72(sp)
811368f8:	df001115 	stw	fp,68(sp)
811368fc:	df001104 	addi	fp,sp,68
81136900:	e13ffc15 	stw	r4,-16(fp)
81136904:	e17ffd15 	stw	r5,-12(fp)
81136908:	e1bffe15 	stw	r6,-8(fp)
8113690c:	e1ffff15 	stw	r7,-4(fp)
81136910:	e03ff015 	stw	zero,-64(fp)
81136914:	e0bffd17 	ldw	r2,-12(fp)
81136918:	e0bff215 	stw	r2,-56(fp)
8113691c:	e0bffc17 	ldw	r2,-16(fp)
81136920:	10800b17 	ldw	r2,44(r2)
81136924:	e0bff815 	stw	r2,-32(fp)
81136928:	e03ff90d 	sth	zero,-28(fp)
8113692c:	e0bff90b 	ldhu	r2,-28(fp)
81136930:	e0fffb44 	addi	r3,fp,-19
81136934:	180d883a 	mov	r6,r3
81136938:	100b883a 	mov	r5,r2
8113693c:	e13ff817 	ldw	r4,-32(fp)
81136940:	112e4080 	call	8112e408 <OSSemPend>
81136944:	00003706 	br	81136a24 <altera_avalon_jtag_uart_write+0x13c>
81136948:	e0bffc17 	ldw	r2,-16(fp)
8113694c:	10800f17 	ldw	r2,60(r2)
81136950:	e0bff415 	stw	r2,-48(fp)
81136954:	e0bffc17 	ldw	r2,-16(fp)
81136958:	10801017 	ldw	r2,64(r2)
8113695c:	e0bff015 	stw	r2,-64(fp)
81136960:	e0fff417 	ldw	r3,-48(fp)
81136964:	e0bff017 	ldw	r2,-64(fp)
81136968:	1880062e 	bgeu	r3,r2,81136984 <altera_avalon_jtag_uart_write+0x9c>
8113696c:	e0fff017 	ldw	r3,-64(fp)
81136970:	e0bff417 	ldw	r2,-48(fp)
81136974:	1885c83a 	sub	r2,r3,r2
81136978:	10bfffc4 	addi	r2,r2,-1
8113697c:	e0bff115 	stw	r2,-60(fp)
81136980:	00000b06 	br	811369b0 <altera_avalon_jtag_uart_write+0xc8>
81136984:	e0bff017 	ldw	r2,-64(fp)
81136988:	10000526 	beq	r2,zero,811369a0 <altera_avalon_jtag_uart_write+0xb8>
8113698c:	00c20004 	movi	r3,2048
81136990:	e0bff417 	ldw	r2,-48(fp)
81136994:	1885c83a 	sub	r2,r3,r2
81136998:	e0bff115 	stw	r2,-60(fp)
8113699c:	00000406 	br	811369b0 <altera_avalon_jtag_uart_write+0xc8>
811369a0:	00c1ffc4 	movi	r3,2047
811369a4:	e0bff417 	ldw	r2,-48(fp)
811369a8:	1885c83a 	sub	r2,r3,r2
811369ac:	e0bff115 	stw	r2,-60(fp)
811369b0:	e0bff117 	ldw	r2,-60(fp)
811369b4:	10001e26 	beq	r2,zero,81136a30 <altera_avalon_jtag_uart_write+0x148>
811369b8:	e0fffe17 	ldw	r3,-8(fp)
811369bc:	e0bff117 	ldw	r2,-60(fp)
811369c0:	1880022e 	bgeu	r3,r2,811369cc <altera_avalon_jtag_uart_write+0xe4>
811369c4:	e0bffe17 	ldw	r2,-8(fp)
811369c8:	e0bff115 	stw	r2,-60(fp)
811369cc:	e0bffc17 	ldw	r2,-16(fp)
811369d0:	10c21104 	addi	r3,r2,2116
811369d4:	e0bff417 	ldw	r2,-48(fp)
811369d8:	1885883a 	add	r2,r3,r2
811369dc:	e1bff117 	ldw	r6,-60(fp)
811369e0:	e17ffd17 	ldw	r5,-12(fp)
811369e4:	1009883a 	mov	r4,r2
811369e8:	11120c40 	call	811120c4 <memcpy>
811369ec:	e0fffd17 	ldw	r3,-12(fp)
811369f0:	e0bff117 	ldw	r2,-60(fp)
811369f4:	1885883a 	add	r2,r3,r2
811369f8:	e0bffd15 	stw	r2,-12(fp)
811369fc:	e0fffe17 	ldw	r3,-8(fp)
81136a00:	e0bff117 	ldw	r2,-60(fp)
81136a04:	1885c83a 	sub	r2,r3,r2
81136a08:	e0bffe15 	stw	r2,-8(fp)
81136a0c:	e0fff417 	ldw	r3,-48(fp)
81136a10:	e0bff117 	ldw	r2,-60(fp)
81136a14:	1885883a 	add	r2,r3,r2
81136a18:	10c1ffcc 	andi	r3,r2,2047
81136a1c:	e0bffc17 	ldw	r2,-16(fp)
81136a20:	10c00f15 	stw	r3,60(r2)
81136a24:	e0bffe17 	ldw	r2,-8(fp)
81136a28:	00bfc716 	blt	zero,r2,81136948 <__reset+0xfb116948>
81136a2c:	00000106 	br	81136a34 <altera_avalon_jtag_uart_write+0x14c>
81136a30:	0001883a 	nop
81136a34:	0005303a 	rdctl	r2,status
81136a38:	e0bff715 	stw	r2,-36(fp)
81136a3c:	e0fff717 	ldw	r3,-36(fp)
81136a40:	00bfff84 	movi	r2,-2
81136a44:	1884703a 	and	r2,r3,r2
81136a48:	1001703a 	wrctl	status,r2
81136a4c:	e0bff717 	ldw	r2,-36(fp)
81136a50:	e0bff615 	stw	r2,-40(fp)
81136a54:	e0bffc17 	ldw	r2,-16(fp)
81136a58:	10800817 	ldw	r2,32(r2)
81136a5c:	10c00094 	ori	r3,r2,2
81136a60:	e0bffc17 	ldw	r2,-16(fp)
81136a64:	10c00815 	stw	r3,32(r2)
81136a68:	e0bffc17 	ldw	r2,-16(fp)
81136a6c:	10800017 	ldw	r2,0(r2)
81136a70:	10800104 	addi	r2,r2,4
81136a74:	1007883a 	mov	r3,r2
81136a78:	e0bffc17 	ldw	r2,-16(fp)
81136a7c:	10800817 	ldw	r2,32(r2)
81136a80:	18800035 	stwio	r2,0(r3)
81136a84:	e0bff617 	ldw	r2,-40(fp)
81136a88:	e0bff315 	stw	r2,-52(fp)
81136a8c:	e0bff317 	ldw	r2,-52(fp)
81136a90:	1001703a 	wrctl	status,r2
81136a94:	e0bffe17 	ldw	r2,-8(fp)
81136a98:	00802a0e 	bge	zero,r2,81136b44 <altera_avalon_jtag_uart_write+0x25c>
81136a9c:	e0bfff17 	ldw	r2,-4(fp)
81136aa0:	1090000c 	andi	r2,r2,16384
81136aa4:	10002a1e 	bne	r2,zero,81136b50 <altera_avalon_jtag_uart_write+0x268>
81136aa8:	d0a07303 	ldbu	r2,-32308(gp)
81136aac:	10803fcc 	andi	r2,r2,255
81136ab0:	10800058 	cmpnei	r2,r2,1
81136ab4:	1000161e 	bne	r2,zero,81136b10 <altera_avalon_jtag_uart_write+0x228>
81136ab8:	e0bffc17 	ldw	r2,-16(fp)
81136abc:	10800c17 	ldw	r2,48(r2)
81136ac0:	e0bff515 	stw	r2,-44(fp)
81136ac4:	00800184 	movi	r2,6
81136ac8:	e0bff98d 	sth	r2,-26(fp)
81136acc:	00bfe0c4 	movi	r2,-125
81136ad0:	e0bffa05 	stb	r2,-24(fp)
81136ad4:	e03ffa8d 	sth	zero,-22(fp)
81136ad8:	d0a07303 	ldbu	r2,-32308(gp)
81136adc:	10803fcc 	andi	r2,r2,255
81136ae0:	10001526 	beq	r2,zero,81136b38 <altera_avalon_jtag_uart_write+0x250>
81136ae4:	e0fff98b 	ldhu	r3,-26(fp)
81136ae8:	e13ffa03 	ldbu	r4,-24(fp)
81136aec:	e17ffa8b 	ldhu	r5,-22(fp)
81136af0:	e0bffb04 	addi	r2,fp,-20
81136af4:	d8800015 	stw	r2,0(sp)
81136af8:	280f883a 	mov	r7,r5
81136afc:	200d883a 	mov	r6,r4
81136b00:	180b883a 	mov	r5,r3
81136b04:	e13ff517 	ldw	r4,-44(fp)
81136b08:	112a7680 	call	8112a768 <OSFlagPend>
81136b0c:	00000a06 	br	81136b38 <altera_avalon_jtag_uart_write+0x250>
81136b10:	0001883a 	nop
81136b14:	e0bffc17 	ldw	r2,-16(fp)
81136b18:	10c01017 	ldw	r3,64(r2)
81136b1c:	e0bff017 	ldw	r2,-64(fp)
81136b20:	1880051e 	bne	r3,r2,81136b38 <altera_avalon_jtag_uart_write+0x250>
81136b24:	e0bffc17 	ldw	r2,-16(fp)
81136b28:	10c00917 	ldw	r3,36(r2)
81136b2c:	e0bffc17 	ldw	r2,-16(fp)
81136b30:	10800117 	ldw	r2,4(r2)
81136b34:	18bff736 	bltu	r3,r2,81136b14 <__reset+0xfb116b14>
81136b38:	e0bffc17 	ldw	r2,-16(fp)
81136b3c:	10800917 	ldw	r2,36(r2)
81136b40:	1000051e 	bne	r2,zero,81136b58 <altera_avalon_jtag_uart_write+0x270>
81136b44:	e0bffe17 	ldw	r2,-8(fp)
81136b48:	00bfb616 	blt	zero,r2,81136a24 <__reset+0xfb116a24>
81136b4c:	00000306 	br	81136b5c <altera_avalon_jtag_uart_write+0x274>
81136b50:	0001883a 	nop
81136b54:	00000106 	br	81136b5c <altera_avalon_jtag_uart_write+0x274>
81136b58:	0001883a 	nop
81136b5c:	e0bffc17 	ldw	r2,-16(fp)
81136b60:	10800b17 	ldw	r2,44(r2)
81136b64:	1009883a 	mov	r4,r2
81136b68:	112e7900 	call	8112e790 <OSSemPost>
81136b6c:	e0fffd17 	ldw	r3,-12(fp)
81136b70:	e0bff217 	ldw	r2,-56(fp)
81136b74:	18800426 	beq	r3,r2,81136b88 <altera_avalon_jtag_uart_write+0x2a0>
81136b78:	e0fffd17 	ldw	r3,-12(fp)
81136b7c:	e0bff217 	ldw	r2,-56(fp)
81136b80:	1885c83a 	sub	r2,r3,r2
81136b84:	00000606 	br	81136ba0 <altera_avalon_jtag_uart_write+0x2b8>
81136b88:	e0bfff17 	ldw	r2,-4(fp)
81136b8c:	1090000c 	andi	r2,r2,16384
81136b90:	10000226 	beq	r2,zero,81136b9c <altera_avalon_jtag_uart_write+0x2b4>
81136b94:	00bffd44 	movi	r2,-11
81136b98:	00000106 	br	81136ba0 <altera_avalon_jtag_uart_write+0x2b8>
81136b9c:	00bffec4 	movi	r2,-5
81136ba0:	e037883a 	mov	sp,fp
81136ba4:	dfc00117 	ldw	ra,4(sp)
81136ba8:	df000017 	ldw	fp,0(sp)
81136bac:	dec00204 	addi	sp,sp,8
81136bb0:	f800283a 	ret

81136bb4 <alt_avalon_timer_sc_irq>:
81136bb4:	defffa04 	addi	sp,sp,-24
81136bb8:	de00012e 	bgeu	sp,et,81136bc0 <alt_avalon_timer_sc_irq+0xc>
81136bbc:	003b68fa 	trap	3
81136bc0:	dfc00515 	stw	ra,20(sp)
81136bc4:	df000415 	stw	fp,16(sp)
81136bc8:	df000404 	addi	fp,sp,16
81136bcc:	e13fff15 	stw	r4,-4(fp)
81136bd0:	0007883a 	mov	r3,zero
81136bd4:	e0bfff17 	ldw	r2,-4(fp)
81136bd8:	10c00035 	stwio	r3,0(r2)
81136bdc:	e0bfff17 	ldw	r2,-4(fp)
81136be0:	10800104 	addi	r2,r2,4
81136be4:	10800037 	ldwio	r2,0(r2)
81136be8:	0005303a 	rdctl	r2,status
81136bec:	e0bffd15 	stw	r2,-12(fp)
81136bf0:	e0fffd17 	ldw	r3,-12(fp)
81136bf4:	00bfff84 	movi	r2,-2
81136bf8:	1884703a 	and	r2,r3,r2
81136bfc:	1001703a 	wrctl	status,r2
81136c00:	e0bffd17 	ldw	r2,-12(fp)
81136c04:	e0bffc15 	stw	r2,-16(fp)
81136c08:	112747c0 	call	8112747c <alt_tick>
81136c0c:	e0bffc17 	ldw	r2,-16(fp)
81136c10:	e0bffe15 	stw	r2,-8(fp)
81136c14:	e0bffe17 	ldw	r2,-8(fp)
81136c18:	1001703a 	wrctl	status,r2
81136c1c:	0001883a 	nop
81136c20:	e037883a 	mov	sp,fp
81136c24:	dfc00117 	ldw	ra,4(sp)
81136c28:	df000017 	ldw	fp,0(sp)
81136c2c:	dec00204 	addi	sp,sp,8
81136c30:	f800283a 	ret

81136c34 <alt_avalon_timer_sc_init>:
81136c34:	defff804 	addi	sp,sp,-32
81136c38:	de00012e 	bgeu	sp,et,81136c40 <alt_avalon_timer_sc_init+0xc>
81136c3c:	003b68fa 	trap	3
81136c40:	dfc00715 	stw	ra,28(sp)
81136c44:	df000615 	stw	fp,24(sp)
81136c48:	df000604 	addi	fp,sp,24
81136c4c:	e13ffc15 	stw	r4,-16(fp)
81136c50:	e17ffd15 	stw	r5,-12(fp)
81136c54:	e1bffe15 	stw	r6,-8(fp)
81136c58:	e1ffff15 	stw	r7,-4(fp)
81136c5c:	e0bfff17 	ldw	r2,-4(fp)
81136c60:	e0bffb15 	stw	r2,-20(fp)
81136c64:	d0a06a17 	ldw	r2,-32344(gp)
81136c68:	1000021e 	bne	r2,zero,81136c74 <alt_avalon_timer_sc_init+0x40>
81136c6c:	e0bffb17 	ldw	r2,-20(fp)
81136c70:	d0a06a15 	stw	r2,-32344(gp)
81136c74:	e0bffc17 	ldw	r2,-16(fp)
81136c78:	10800104 	addi	r2,r2,4
81136c7c:	00c001c4 	movi	r3,7
81136c80:	10c00035 	stwio	r3,0(r2)
81136c84:	d8000015 	stw	zero,0(sp)
81136c88:	e1fffc17 	ldw	r7,-16(fp)
81136c8c:	01a044f4 	movhi	r6,33043
81136c90:	319aed04 	addi	r6,r6,27572
81136c94:	e17ffe17 	ldw	r5,-8(fp)
81136c98:	e13ffd17 	ldw	r4,-12(fp)
81136c9c:	1139f080 	call	81139f08 <alt_ic_isr_register>
81136ca0:	0001883a 	nop
81136ca4:	e037883a 	mov	sp,fp
81136ca8:	dfc00117 	ldw	ra,4(sp)
81136cac:	df000017 	ldw	fp,0(sp)
81136cb0:	dec00204 	addi	sp,sp,8
81136cb4:	f800283a 	ret

81136cb8 <altera_avalon_uart_read_fd>:
81136cb8:	defffa04 	addi	sp,sp,-24
81136cbc:	de00012e 	bgeu	sp,et,81136cc4 <altera_avalon_uart_read_fd+0xc>
81136cc0:	003b68fa 	trap	3
81136cc4:	dfc00515 	stw	ra,20(sp)
81136cc8:	df000415 	stw	fp,16(sp)
81136ccc:	df000404 	addi	fp,sp,16
81136cd0:	e13ffd15 	stw	r4,-12(fp)
81136cd4:	e17ffe15 	stw	r5,-8(fp)
81136cd8:	e1bfff15 	stw	r6,-4(fp)
81136cdc:	e0bffd17 	ldw	r2,-12(fp)
81136ce0:	10800017 	ldw	r2,0(r2)
81136ce4:	e0bffc15 	stw	r2,-16(fp)
81136ce8:	e0bffc17 	ldw	r2,-16(fp)
81136cec:	10c00a04 	addi	r3,r2,40
81136cf0:	e0bffd17 	ldw	r2,-12(fp)
81136cf4:	10800217 	ldw	r2,8(r2)
81136cf8:	100f883a 	mov	r7,r2
81136cfc:	e1bfff17 	ldw	r6,-4(fp)
81136d00:	e17ffe17 	ldw	r5,-8(fp)
81136d04:	1809883a 	mov	r4,r3
81136d08:	11373780 	call	81137378 <altera_avalon_uart_read>
81136d0c:	e037883a 	mov	sp,fp
81136d10:	dfc00117 	ldw	ra,4(sp)
81136d14:	df000017 	ldw	fp,0(sp)
81136d18:	dec00204 	addi	sp,sp,8
81136d1c:	f800283a 	ret

81136d20 <altera_avalon_uart_write_fd>:
81136d20:	defffa04 	addi	sp,sp,-24
81136d24:	de00012e 	bgeu	sp,et,81136d2c <altera_avalon_uart_write_fd+0xc>
81136d28:	003b68fa 	trap	3
81136d2c:	dfc00515 	stw	ra,20(sp)
81136d30:	df000415 	stw	fp,16(sp)
81136d34:	df000404 	addi	fp,sp,16
81136d38:	e13ffd15 	stw	r4,-12(fp)
81136d3c:	e17ffe15 	stw	r5,-8(fp)
81136d40:	e1bfff15 	stw	r6,-4(fp)
81136d44:	e0bffd17 	ldw	r2,-12(fp)
81136d48:	10800017 	ldw	r2,0(r2)
81136d4c:	e0bffc15 	stw	r2,-16(fp)
81136d50:	e0bffc17 	ldw	r2,-16(fp)
81136d54:	10c00a04 	addi	r3,r2,40
81136d58:	e0bffd17 	ldw	r2,-12(fp)
81136d5c:	10800217 	ldw	r2,8(r2)
81136d60:	100f883a 	mov	r7,r2
81136d64:	e1bfff17 	ldw	r6,-4(fp)
81136d68:	e17ffe17 	ldw	r5,-8(fp)
81136d6c:	1809883a 	mov	r4,r3
81136d70:	113762c0 	call	8113762c <altera_avalon_uart_write>
81136d74:	e037883a 	mov	sp,fp
81136d78:	dfc00117 	ldw	ra,4(sp)
81136d7c:	df000017 	ldw	fp,0(sp)
81136d80:	dec00204 	addi	sp,sp,8
81136d84:	f800283a 	ret

81136d88 <altera_avalon_uart_close_fd>:
81136d88:	defffc04 	addi	sp,sp,-16
81136d8c:	de00012e 	bgeu	sp,et,81136d94 <altera_avalon_uart_close_fd+0xc>
81136d90:	003b68fa 	trap	3
81136d94:	dfc00315 	stw	ra,12(sp)
81136d98:	df000215 	stw	fp,8(sp)
81136d9c:	df000204 	addi	fp,sp,8
81136da0:	e13fff15 	stw	r4,-4(fp)
81136da4:	e0bfff17 	ldw	r2,-4(fp)
81136da8:	10800017 	ldw	r2,0(r2)
81136dac:	e0bffe15 	stw	r2,-8(fp)
81136db0:	e0bffe17 	ldw	r2,-8(fp)
81136db4:	10c00a04 	addi	r3,r2,40
81136db8:	e0bfff17 	ldw	r2,-4(fp)
81136dbc:	10800217 	ldw	r2,8(r2)
81136dc0:	100b883a 	mov	r5,r2
81136dc4:	1809883a 	mov	r4,r3
81136dc8:	11372d80 	call	811372d8 <altera_avalon_uart_close>
81136dcc:	e037883a 	mov	sp,fp
81136dd0:	dfc00117 	ldw	ra,4(sp)
81136dd4:	df000017 	ldw	fp,0(sp)
81136dd8:	dec00204 	addi	sp,sp,8
81136ddc:	f800283a 	ret

81136de0 <altera_avalon_uart_init>:
81136de0:	defff304 	addi	sp,sp,-52
81136de4:	de00012e 	bgeu	sp,et,81136dec <altera_avalon_uart_init+0xc>
81136de8:	003b68fa 	trap	3
81136dec:	dfc00c15 	stw	ra,48(sp)
81136df0:	df000b15 	stw	fp,44(sp)
81136df4:	df000b04 	addi	fp,sp,44
81136df8:	e13ffd15 	stw	r4,-12(fp)
81136dfc:	e17ffe15 	stw	r5,-8(fp)
81136e00:	e1bfff15 	stw	r6,-4(fp)
81136e04:	e0bffd17 	ldw	r2,-12(fp)
81136e08:	10800017 	ldw	r2,0(r2)
81136e0c:	e0bff615 	stw	r2,-40(fp)
81136e10:	e0bffd17 	ldw	r2,-12(fp)
81136e14:	10800704 	addi	r2,r2,28
81136e18:	e0bffa15 	stw	r2,-24(fp)
81136e1c:	e03ffb0d 	sth	zero,-20(fp)
81136e20:	e0bffb0b 	ldhu	r2,-20(fp)
81136e24:	e0fffc84 	addi	r3,fp,-14
81136e28:	180b883a 	mov	r5,r3
81136e2c:	1009883a 	mov	r4,r2
81136e30:	112a1840 	call	8112a184 <OSFlagCreate>
81136e34:	1007883a 	mov	r3,r2
81136e38:	e0bffa17 	ldw	r2,-24(fp)
81136e3c:	10c00015 	stw	r3,0(r2)
81136e40:	e0bffc83 	ldbu	r2,-14(fp)
81136e44:	10803fcc 	andi	r2,r2,255
81136e48:	1000241e 	bne	r2,zero,81136edc <altera_avalon_uart_init+0xfc>
81136e4c:	e0bffd17 	ldw	r2,-12(fp)
81136e50:	10800804 	addi	r2,r2,32
81136e54:	e0bff715 	stw	r2,-36(fp)
81136e58:	00800044 	movi	r2,1
81136e5c:	e0bffb8d 	sth	r2,-18(fp)
81136e60:	e0bffb8b 	ldhu	r2,-18(fp)
81136e64:	1009883a 	mov	r4,r2
81136e68:	112e0e00 	call	8112e0e0 <OSSemCreate>
81136e6c:	1007883a 	mov	r3,r2
81136e70:	e0bff717 	ldw	r2,-36(fp)
81136e74:	10c00015 	stw	r3,0(r2)
81136e78:	e0bff717 	ldw	r2,-36(fp)
81136e7c:	10800017 	ldw	r2,0(r2)
81136e80:	10000226 	beq	r2,zero,81136e8c <altera_avalon_uart_init+0xac>
81136e84:	0005883a 	mov	r2,zero
81136e88:	00000106 	br	81136e90 <altera_avalon_uart_init+0xb0>
81136e8c:	00bfffc4 	movi	r2,-1
81136e90:	1000121e 	bne	r2,zero,81136edc <altera_avalon_uart_init+0xfc>
81136e94:	e0bffd17 	ldw	r2,-12(fp)
81136e98:	10800904 	addi	r2,r2,36
81136e9c:	e0bff815 	stw	r2,-32(fp)
81136ea0:	00800044 	movi	r2,1
81136ea4:	e0bffc0d 	sth	r2,-16(fp)
81136ea8:	e0bffc0b 	ldhu	r2,-16(fp)
81136eac:	1009883a 	mov	r4,r2
81136eb0:	112e0e00 	call	8112e0e0 <OSSemCreate>
81136eb4:	1007883a 	mov	r3,r2
81136eb8:	e0bff817 	ldw	r2,-32(fp)
81136ebc:	10c00015 	stw	r3,0(r2)
81136ec0:	e0bff817 	ldw	r2,-32(fp)
81136ec4:	10800017 	ldw	r2,0(r2)
81136ec8:	10000226 	beq	r2,zero,81136ed4 <altera_avalon_uart_init+0xf4>
81136ecc:	0005883a 	mov	r2,zero
81136ed0:	00000106 	br	81136ed8 <altera_avalon_uart_init+0xf8>
81136ed4:	00bfffc4 	movi	r2,-1
81136ed8:	10000226 	beq	r2,zero,81136ee4 <altera_avalon_uart_init+0x104>
81136edc:	00800044 	movi	r2,1
81136ee0:	00000106 	br	81136ee8 <altera_avalon_uart_init+0x108>
81136ee4:	0005883a 	mov	r2,zero
81136ee8:	e0bff915 	stw	r2,-28(fp)
81136eec:	e0bff917 	ldw	r2,-28(fp)
81136ef0:	10000f1e 	bne	r2,zero,81136f30 <altera_avalon_uart_init+0x150>
81136ef4:	e0bffd17 	ldw	r2,-12(fp)
81136ef8:	00c32004 	movi	r3,3200
81136efc:	10c00115 	stw	r3,4(r2)
81136f00:	e0bff617 	ldw	r2,-40(fp)
81136f04:	10800304 	addi	r2,r2,12
81136f08:	e0fffd17 	ldw	r3,-12(fp)
81136f0c:	18c00117 	ldw	r3,4(r3)
81136f10:	10c00035 	stwio	r3,0(r2)
81136f14:	d8000015 	stw	zero,0(sp)
81136f18:	e1fffd17 	ldw	r7,-12(fp)
81136f1c:	01a044f4 	movhi	r6,33043
81136f20:	319bd204 	addi	r6,r6,28488
81136f24:	e17fff17 	ldw	r5,-4(fp)
81136f28:	e13ffe17 	ldw	r4,-8(fp)
81136f2c:	1139f080 	call	81139f08 <alt_ic_isr_register>
81136f30:	0001883a 	nop
81136f34:	e037883a 	mov	sp,fp
81136f38:	dfc00117 	ldw	ra,4(sp)
81136f3c:	df000017 	ldw	fp,0(sp)
81136f40:	dec00204 	addi	sp,sp,8
81136f44:	f800283a 	ret

81136f48 <altera_avalon_uart_irq>:
81136f48:	defffa04 	addi	sp,sp,-24
81136f4c:	de00012e 	bgeu	sp,et,81136f54 <altera_avalon_uart_irq+0xc>
81136f50:	003b68fa 	trap	3
81136f54:	dfc00515 	stw	ra,20(sp)
81136f58:	df000415 	stw	fp,16(sp)
81136f5c:	df000404 	addi	fp,sp,16
81136f60:	e13fff15 	stw	r4,-4(fp)
81136f64:	e0bfff17 	ldw	r2,-4(fp)
81136f68:	e0bffc15 	stw	r2,-16(fp)
81136f6c:	e0bffc17 	ldw	r2,-16(fp)
81136f70:	10800017 	ldw	r2,0(r2)
81136f74:	e0bffd15 	stw	r2,-12(fp)
81136f78:	e0bffd17 	ldw	r2,-12(fp)
81136f7c:	10800204 	addi	r2,r2,8
81136f80:	10800037 	ldwio	r2,0(r2)
81136f84:	e0bffe15 	stw	r2,-8(fp)
81136f88:	e0bffd17 	ldw	r2,-12(fp)
81136f8c:	10800204 	addi	r2,r2,8
81136f90:	0007883a 	mov	r3,zero
81136f94:	10c00035 	stwio	r3,0(r2)
81136f98:	e0bffd17 	ldw	r2,-12(fp)
81136f9c:	10800204 	addi	r2,r2,8
81136fa0:	10800037 	ldwio	r2,0(r2)
81136fa4:	e0bffe17 	ldw	r2,-8(fp)
81136fa8:	1080200c 	andi	r2,r2,128
81136fac:	10000326 	beq	r2,zero,81136fbc <altera_avalon_uart_irq+0x74>
81136fb0:	e17ffe17 	ldw	r5,-8(fp)
81136fb4:	e13ffc17 	ldw	r4,-16(fp)
81136fb8:	1136fec0 	call	81136fec <altera_avalon_uart_rxirq>
81136fbc:	e0bffe17 	ldw	r2,-8(fp)
81136fc0:	1081100c 	andi	r2,r2,1088
81136fc4:	10000326 	beq	r2,zero,81136fd4 <altera_avalon_uart_irq+0x8c>
81136fc8:	e17ffe17 	ldw	r5,-8(fp)
81136fcc:	e13ffc17 	ldw	r4,-16(fp)
81136fd0:	113712c0 	call	8113712c <altera_avalon_uart_txirq>
81136fd4:	0001883a 	nop
81136fd8:	e037883a 	mov	sp,fp
81136fdc:	dfc00117 	ldw	ra,4(sp)
81136fe0:	df000017 	ldw	fp,0(sp)
81136fe4:	dec00204 	addi	sp,sp,8
81136fe8:	f800283a 	ret

81136fec <altera_avalon_uart_rxirq>:
81136fec:	defff904 	addi	sp,sp,-28
81136ff0:	de00012e 	bgeu	sp,et,81136ff8 <altera_avalon_uart_rxirq+0xc>
81136ff4:	003b68fa 	trap	3
81136ff8:	dfc00615 	stw	ra,24(sp)
81136ffc:	df000515 	stw	fp,20(sp)
81137000:	df000504 	addi	fp,sp,20
81137004:	e13ffe15 	stw	r4,-8(fp)
81137008:	e17fff15 	stw	r5,-4(fp)
8113700c:	e0bfff17 	ldw	r2,-4(fp)
81137010:	108000cc 	andi	r2,r2,3
81137014:	10003f1e 	bne	r2,zero,81137114 <altera_avalon_uart_rxirq+0x128>
81137018:	e0bffe17 	ldw	r2,-8(fp)
8113701c:	10c00317 	ldw	r3,12(r2)
81137020:	e0bffe17 	ldw	r2,-8(fp)
81137024:	10800217 	ldw	r2,8(r2)
81137028:	1880121e 	bne	r3,r2,81137074 <altera_avalon_uart_rxirq+0x88>
8113702c:	e0bffe17 	ldw	r2,-8(fp)
81137030:	10800717 	ldw	r2,28(r2)
81137034:	e0bffc15 	stw	r2,-16(fp)
81137038:	00800044 	movi	r2,1
8113703c:	e0bffd0d 	sth	r2,-12(fp)
81137040:	00800044 	movi	r2,1
81137044:	e0bffd85 	stb	r2,-10(fp)
81137048:	d0a07303 	ldbu	r2,-32308(gp)
8113704c:	10803fcc 	andi	r2,r2,255
81137050:	10000826 	beq	r2,zero,81137074 <altera_avalon_uart_rxirq+0x88>
81137054:	e0bffd0b 	ldhu	r2,-12(fp)
81137058:	e0fffd83 	ldbu	r3,-10(fp)
8113705c:	e13ffdc4 	addi	r4,fp,-9
81137060:	200f883a 	mov	r7,r4
81137064:	180d883a 	mov	r6,r3
81137068:	100b883a 	mov	r5,r2
8113706c:	e13ffc17 	ldw	r4,-16(fp)
81137070:	112ad900 	call	8112ad90 <OSFlagPost>
81137074:	e0bffe17 	ldw	r2,-8(fp)
81137078:	10800317 	ldw	r2,12(r2)
8113707c:	10800044 	addi	r2,r2,1
81137080:	10800fcc 	andi	r2,r2,63
81137084:	e0bffb15 	stw	r2,-20(fp)
81137088:	e0bffe17 	ldw	r2,-8(fp)
8113708c:	10800317 	ldw	r2,12(r2)
81137090:	e0fffe17 	ldw	r3,-8(fp)
81137094:	18c00017 	ldw	r3,0(r3)
81137098:	18c00037 	ldwio	r3,0(r3)
8113709c:	1809883a 	mov	r4,r3
811370a0:	e0fffe17 	ldw	r3,-8(fp)
811370a4:	1885883a 	add	r2,r3,r2
811370a8:	10800a04 	addi	r2,r2,40
811370ac:	11000005 	stb	r4,0(r2)
811370b0:	e0bffe17 	ldw	r2,-8(fp)
811370b4:	e0fffb17 	ldw	r3,-20(fp)
811370b8:	10c00315 	stw	r3,12(r2)
811370bc:	e0bffe17 	ldw	r2,-8(fp)
811370c0:	10800317 	ldw	r2,12(r2)
811370c4:	10800044 	addi	r2,r2,1
811370c8:	10800fcc 	andi	r2,r2,63
811370cc:	e0bffb15 	stw	r2,-20(fp)
811370d0:	e0bffe17 	ldw	r2,-8(fp)
811370d4:	10c00217 	ldw	r3,8(r2)
811370d8:	e0bffb17 	ldw	r2,-20(fp)
811370dc:	18800e1e 	bne	r3,r2,81137118 <altera_avalon_uart_rxirq+0x12c>
811370e0:	e0bffe17 	ldw	r2,-8(fp)
811370e4:	10c00117 	ldw	r3,4(r2)
811370e8:	00bfdfc4 	movi	r2,-129
811370ec:	1886703a 	and	r3,r3,r2
811370f0:	e0bffe17 	ldw	r2,-8(fp)
811370f4:	10c00115 	stw	r3,4(r2)
811370f8:	e0bffe17 	ldw	r2,-8(fp)
811370fc:	10800017 	ldw	r2,0(r2)
81137100:	10800304 	addi	r2,r2,12
81137104:	e0fffe17 	ldw	r3,-8(fp)
81137108:	18c00117 	ldw	r3,4(r3)
8113710c:	10c00035 	stwio	r3,0(r2)
81137110:	00000106 	br	81137118 <altera_avalon_uart_rxirq+0x12c>
81137114:	0001883a 	nop
81137118:	e037883a 	mov	sp,fp
8113711c:	dfc00117 	ldw	ra,4(sp)
81137120:	df000017 	ldw	fp,0(sp)
81137124:	dec00204 	addi	sp,sp,8
81137128:	f800283a 	ret

8113712c <altera_avalon_uart_txirq>:
8113712c:	defffa04 	addi	sp,sp,-24
81137130:	de00012e 	bgeu	sp,et,81137138 <altera_avalon_uart_txirq+0xc>
81137134:	003b68fa 	trap	3
81137138:	dfc00515 	stw	ra,20(sp)
8113713c:	df000415 	stw	fp,16(sp)
81137140:	df000404 	addi	fp,sp,16
81137144:	e13ffe15 	stw	r4,-8(fp)
81137148:	e17fff15 	stw	r5,-4(fp)
8113714c:	e0bffe17 	ldw	r2,-8(fp)
81137150:	10c00417 	ldw	r3,16(r2)
81137154:	e0bffe17 	ldw	r2,-8(fp)
81137158:	10800517 	ldw	r2,20(r2)
8113715c:	18804726 	beq	r3,r2,8113727c <altera_avalon_uart_txirq+0x150>
81137160:	e0bffe17 	ldw	r2,-8(fp)
81137164:	10800617 	ldw	r2,24(r2)
81137168:	1080008c 	andi	r2,r2,2
8113716c:	10000326 	beq	r2,zero,8113717c <altera_avalon_uart_txirq+0x50>
81137170:	e0bfff17 	ldw	r2,-4(fp)
81137174:	1082000c 	andi	r2,r2,2048
81137178:	10003226 	beq	r2,zero,81137244 <altera_avalon_uart_txirq+0x118>
8113717c:	e0bffe17 	ldw	r2,-8(fp)
81137180:	10c00417 	ldw	r3,16(r2)
81137184:	e0bffe17 	ldw	r2,-8(fp)
81137188:	10800517 	ldw	r2,20(r2)
8113718c:	10800044 	addi	r2,r2,1
81137190:	10800fcc 	andi	r2,r2,63
81137194:	1880121e 	bne	r3,r2,811371e0 <altera_avalon_uart_txirq+0xb4>
81137198:	e0bffe17 	ldw	r2,-8(fp)
8113719c:	10800717 	ldw	r2,28(r2)
811371a0:	e0bffc15 	stw	r2,-16(fp)
811371a4:	00800084 	movi	r2,2
811371a8:	e0bffd0d 	sth	r2,-12(fp)
811371ac:	00800044 	movi	r2,1
811371b0:	e0bffd85 	stb	r2,-10(fp)
811371b4:	d0a07303 	ldbu	r2,-32308(gp)
811371b8:	10803fcc 	andi	r2,r2,255
811371bc:	10000826 	beq	r2,zero,811371e0 <altera_avalon_uart_txirq+0xb4>
811371c0:	e0bffd0b 	ldhu	r2,-12(fp)
811371c4:	e0fffd83 	ldbu	r3,-10(fp)
811371c8:	e13ffdc4 	addi	r4,fp,-9
811371cc:	200f883a 	mov	r7,r4
811371d0:	180d883a 	mov	r6,r3
811371d4:	100b883a 	mov	r5,r2
811371d8:	e13ffc17 	ldw	r4,-16(fp)
811371dc:	112ad900 	call	8112ad90 <OSFlagPost>
811371e0:	e0bffe17 	ldw	r2,-8(fp)
811371e4:	10800017 	ldw	r2,0(r2)
811371e8:	10800104 	addi	r2,r2,4
811371ec:	e0fffe17 	ldw	r3,-8(fp)
811371f0:	18c00417 	ldw	r3,16(r3)
811371f4:	e13ffe17 	ldw	r4,-8(fp)
811371f8:	20c7883a 	add	r3,r4,r3
811371fc:	18c01a04 	addi	r3,r3,104
81137200:	18c00003 	ldbu	r3,0(r3)
81137204:	18c03fcc 	andi	r3,r3,255
81137208:	10c00035 	stwio	r3,0(r2)
8113720c:	e0bffe17 	ldw	r2,-8(fp)
81137210:	10800417 	ldw	r2,16(r2)
81137214:	10800044 	addi	r2,r2,1
81137218:	e0fffe17 	ldw	r3,-8(fp)
8113721c:	18800415 	stw	r2,16(r3)
81137220:	10c00fcc 	andi	r3,r2,63
81137224:	e0bffe17 	ldw	r2,-8(fp)
81137228:	10c00415 	stw	r3,16(r2)
8113722c:	e0bffe17 	ldw	r2,-8(fp)
81137230:	10800117 	ldw	r2,4(r2)
81137234:	10c01014 	ori	r3,r2,64
81137238:	e0bffe17 	ldw	r2,-8(fp)
8113723c:	10c00115 	stw	r3,4(r2)
81137240:	00000e06 	br	8113727c <altera_avalon_uart_txirq+0x150>
81137244:	e0bffe17 	ldw	r2,-8(fp)
81137248:	10800017 	ldw	r2,0(r2)
8113724c:	10800204 	addi	r2,r2,8
81137250:	10800037 	ldwio	r2,0(r2)
81137254:	e0bfff15 	stw	r2,-4(fp)
81137258:	e0bfff17 	ldw	r2,-4(fp)
8113725c:	1082000c 	andi	r2,r2,2048
81137260:	1000061e 	bne	r2,zero,8113727c <altera_avalon_uart_txirq+0x150>
81137264:	e0bffe17 	ldw	r2,-8(fp)
81137268:	10c00117 	ldw	r3,4(r2)
8113726c:	00bfefc4 	movi	r2,-65
81137270:	1886703a 	and	r3,r3,r2
81137274:	e0bffe17 	ldw	r2,-8(fp)
81137278:	10c00115 	stw	r3,4(r2)
8113727c:	e0bffe17 	ldw	r2,-8(fp)
81137280:	10c00417 	ldw	r3,16(r2)
81137284:	e0bffe17 	ldw	r2,-8(fp)
81137288:	10800517 	ldw	r2,20(r2)
8113728c:	1880061e 	bne	r3,r2,811372a8 <altera_avalon_uart_txirq+0x17c>
81137290:	e0bffe17 	ldw	r2,-8(fp)
81137294:	10c00117 	ldw	r3,4(r2)
81137298:	00beefc4 	movi	r2,-1089
8113729c:	1886703a 	and	r3,r3,r2
811372a0:	e0bffe17 	ldw	r2,-8(fp)
811372a4:	10c00115 	stw	r3,4(r2)
811372a8:	e0bffe17 	ldw	r2,-8(fp)
811372ac:	10800017 	ldw	r2,0(r2)
811372b0:	10800304 	addi	r2,r2,12
811372b4:	e0fffe17 	ldw	r3,-8(fp)
811372b8:	18c00117 	ldw	r3,4(r3)
811372bc:	10c00035 	stwio	r3,0(r2)
811372c0:	0001883a 	nop
811372c4:	e037883a 	mov	sp,fp
811372c8:	dfc00117 	ldw	ra,4(sp)
811372cc:	df000017 	ldw	fp,0(sp)
811372d0:	dec00204 	addi	sp,sp,8
811372d4:	f800283a 	ret

811372d8 <altera_avalon_uart_close>:
811372d8:	defffd04 	addi	sp,sp,-12
811372dc:	de00012e 	bgeu	sp,et,811372e4 <altera_avalon_uart_close+0xc>
811372e0:	003b68fa 	trap	3
811372e4:	df000215 	stw	fp,8(sp)
811372e8:	df000204 	addi	fp,sp,8
811372ec:	e13ffe15 	stw	r4,-8(fp)
811372f0:	e17fff15 	stw	r5,-4(fp)
811372f4:	00000506 	br	8113730c <altera_avalon_uart_close+0x34>
811372f8:	e0bfff17 	ldw	r2,-4(fp)
811372fc:	1090000c 	andi	r2,r2,16384
81137300:	10000226 	beq	r2,zero,8113730c <altera_avalon_uart_close+0x34>
81137304:	00bffd44 	movi	r2,-11
81137308:	00000606 	br	81137324 <altera_avalon_uart_close+0x4c>
8113730c:	e0bffe17 	ldw	r2,-8(fp)
81137310:	10c00417 	ldw	r3,16(r2)
81137314:	e0bffe17 	ldw	r2,-8(fp)
81137318:	10800517 	ldw	r2,20(r2)
8113731c:	18bff61e 	bne	r3,r2,811372f8 <__reset+0xfb1172f8>
81137320:	0005883a 	mov	r2,zero
81137324:	e037883a 	mov	sp,fp
81137328:	df000017 	ldw	fp,0(sp)
8113732c:	dec00104 	addi	sp,sp,4
81137330:	f800283a 	ret

81137334 <alt_get_errno>:
81137334:	defffe04 	addi	sp,sp,-8
81137338:	de00012e 	bgeu	sp,et,81137340 <alt_get_errno+0xc>
8113733c:	003b68fa 	trap	3
81137340:	dfc00115 	stw	ra,4(sp)
81137344:	df000015 	stw	fp,0(sp)
81137348:	d839883a 	mov	fp,sp
8113734c:	d0a01017 	ldw	r2,-32704(gp)
81137350:	10000326 	beq	r2,zero,81137360 <alt_get_errno+0x2c>
81137354:	d0a01017 	ldw	r2,-32704(gp)
81137358:	103ee83a 	callr	r2
8113735c:	00000106 	br	81137364 <alt_get_errno+0x30>
81137360:	d0a05e04 	addi	r2,gp,-32392
81137364:	e037883a 	mov	sp,fp
81137368:	dfc00117 	ldw	ra,4(sp)
8113736c:	df000017 	ldw	fp,0(sp)
81137370:	dec00204 	addi	sp,sp,8
81137374:	f800283a 	ret

81137378 <altera_avalon_uart_read>:
81137378:	deffec04 	addi	sp,sp,-80
8113737c:	de00012e 	bgeu	sp,et,81137384 <altera_avalon_uart_read+0xc>
81137380:	003b68fa 	trap	3
81137384:	dfc01315 	stw	ra,76(sp)
81137388:	df001215 	stw	fp,72(sp)
8113738c:	df001204 	addi	fp,sp,72
81137390:	e13ffc15 	stw	r4,-16(fp)
81137394:	e17ffd15 	stw	r5,-12(fp)
81137398:	e1bffe15 	stw	r6,-8(fp)
8113739c:	e1ffff15 	stw	r7,-4(fp)
811373a0:	e03fef05 	stb	zero,-68(fp)
811373a4:	e03ff015 	stw	zero,-64(fp)
811373a8:	e0bfff17 	ldw	r2,-4(fp)
811373ac:	1090000c 	andi	r2,r2,16384
811373b0:	1005003a 	cmpeq	r2,r2,zero
811373b4:	10803fcc 	andi	r2,r2,255
811373b8:	e0bff115 	stw	r2,-60(fp)
811373bc:	e0bffc17 	ldw	r2,-16(fp)
811373c0:	10800817 	ldw	r2,32(r2)
811373c4:	e0bff815 	stw	r2,-32(fp)
811373c8:	e03ff90d 	sth	zero,-28(fp)
811373cc:	e0bff90b 	ldhu	r2,-28(fp)
811373d0:	e0fffb44 	addi	r3,fp,-19
811373d4:	180d883a 	mov	r6,r3
811373d8:	100b883a 	mov	r5,r2
811373dc:	e13ff817 	ldw	r4,-32(fp)
811373e0:	112e4080 	call	8112e408 <OSSemPend>
811373e4:	00001306 	br	81137434 <altera_avalon_uart_read+0xbc>
811373e8:	e0bff017 	ldw	r2,-64(fp)
811373ec:	10800044 	addi	r2,r2,1
811373f0:	e0bff015 	stw	r2,-64(fp)
811373f4:	e0bffd17 	ldw	r2,-12(fp)
811373f8:	10c00044 	addi	r3,r2,1
811373fc:	e0fffd15 	stw	r3,-12(fp)
81137400:	e0fffc17 	ldw	r3,-16(fp)
81137404:	18c00217 	ldw	r3,8(r3)
81137408:	e13ffc17 	ldw	r4,-16(fp)
8113740c:	20c7883a 	add	r3,r4,r3
81137410:	18c00a04 	addi	r3,r3,40
81137414:	18c00003 	ldbu	r3,0(r3)
81137418:	10c00005 	stb	r3,0(r2)
8113741c:	e0bffc17 	ldw	r2,-16(fp)
81137420:	10800217 	ldw	r2,8(r2)
81137424:	10800044 	addi	r2,r2,1
81137428:	10c00fcc 	andi	r3,r2,63
8113742c:	e0bffc17 	ldw	r2,-16(fp)
81137430:	10c00215 	stw	r3,8(r2)
81137434:	e0fff017 	ldw	r3,-64(fp)
81137438:	e0bffe17 	ldw	r2,-8(fp)
8113743c:	1880050e 	bge	r3,r2,81137454 <altera_avalon_uart_read+0xdc>
81137440:	e0bffc17 	ldw	r2,-16(fp)
81137444:	10c00217 	ldw	r3,8(r2)
81137448:	e0bffc17 	ldw	r2,-16(fp)
8113744c:	10800317 	ldw	r2,12(r2)
81137450:	18bfe51e 	bne	r3,r2,811373e8 <__reset+0xfb1173e8>
81137454:	e0bff017 	ldw	r2,-64(fp)
81137458:	10003a1e 	bne	r2,zero,81137544 <altera_avalon_uart_read+0x1cc>
8113745c:	e0bffc17 	ldw	r2,-16(fp)
81137460:	10c00217 	ldw	r3,8(r2)
81137464:	e0bffc17 	ldw	r2,-16(fp)
81137468:	10800317 	ldw	r2,12(r2)
8113746c:	1880351e 	bne	r3,r2,81137544 <altera_avalon_uart_read+0x1cc>
81137470:	e0bff117 	ldw	r2,-60(fp)
81137474:	1000071e 	bne	r2,zero,81137494 <altera_avalon_uart_read+0x11c>
81137478:	11373340 	call	81137334 <alt_get_errno>
8113747c:	1007883a 	mov	r3,r2
81137480:	008002c4 	movi	r2,11
81137484:	18800015 	stw	r2,0(r3)
81137488:	00800044 	movi	r2,1
8113748c:	e0bfef05 	stb	r2,-68(fp)
81137490:	00003006 	br	81137554 <altera_avalon_uart_read+0x1dc>
81137494:	0005303a 	rdctl	r2,status
81137498:	e0bff515 	stw	r2,-44(fp)
8113749c:	e0fff517 	ldw	r3,-44(fp)
811374a0:	00bfff84 	movi	r2,-2
811374a4:	1884703a 	and	r2,r3,r2
811374a8:	1001703a 	wrctl	status,r2
811374ac:	e0bff517 	ldw	r2,-44(fp)
811374b0:	e0bff415 	stw	r2,-48(fp)
811374b4:	e0bffc17 	ldw	r2,-16(fp)
811374b8:	10800117 	ldw	r2,4(r2)
811374bc:	10c02014 	ori	r3,r2,128
811374c0:	e0bffc17 	ldw	r2,-16(fp)
811374c4:	10c00115 	stw	r3,4(r2)
811374c8:	e0bffc17 	ldw	r2,-16(fp)
811374cc:	10800017 	ldw	r2,0(r2)
811374d0:	10800304 	addi	r2,r2,12
811374d4:	e0fffc17 	ldw	r3,-16(fp)
811374d8:	18c00117 	ldw	r3,4(r3)
811374dc:	10c00035 	stwio	r3,0(r2)
811374e0:	e0bff417 	ldw	r2,-48(fp)
811374e4:	e0bff615 	stw	r2,-40(fp)
811374e8:	e0bff617 	ldw	r2,-40(fp)
811374ec:	1001703a 	wrctl	status,r2
811374f0:	e0bffc17 	ldw	r2,-16(fp)
811374f4:	10800717 	ldw	r2,28(r2)
811374f8:	e0bff215 	stw	r2,-56(fp)
811374fc:	00800044 	movi	r2,1
81137500:	e0bff98d 	sth	r2,-26(fp)
81137504:	00bfe0c4 	movi	r2,-125
81137508:	e0bffa05 	stb	r2,-24(fp)
8113750c:	e03ffa8d 	sth	zero,-22(fp)
81137510:	d0a07303 	ldbu	r2,-32308(gp)
81137514:	10803fcc 	andi	r2,r2,255
81137518:	10000a26 	beq	r2,zero,81137544 <altera_avalon_uart_read+0x1cc>
8113751c:	e0fff98b 	ldhu	r3,-26(fp)
81137520:	e13ffa03 	ldbu	r4,-24(fp)
81137524:	e17ffa8b 	ldhu	r5,-22(fp)
81137528:	e0bffb04 	addi	r2,fp,-20
8113752c:	d8800015 	stw	r2,0(sp)
81137530:	280f883a 	mov	r7,r5
81137534:	200d883a 	mov	r6,r4
81137538:	180b883a 	mov	r5,r3
8113753c:	e13ff217 	ldw	r4,-56(fp)
81137540:	112a7680 	call	8112a768 <OSFlagPend>
81137544:	e0bff017 	ldw	r2,-64(fp)
81137548:	1000021e 	bne	r2,zero,81137554 <altera_avalon_uart_read+0x1dc>
8113754c:	e0bffe17 	ldw	r2,-8(fp)
81137550:	103fb81e 	bne	r2,zero,81137434 <__reset+0xfb117434>
81137554:	e0bffc17 	ldw	r2,-16(fp)
81137558:	10800817 	ldw	r2,32(r2)
8113755c:	1009883a 	mov	r4,r2
81137560:	112e7900 	call	8112e790 <OSSemPost>
81137564:	0005303a 	rdctl	r2,status
81137568:	e0bff715 	stw	r2,-36(fp)
8113756c:	e0fff717 	ldw	r3,-36(fp)
81137570:	00bfff84 	movi	r2,-2
81137574:	1884703a 	and	r2,r3,r2
81137578:	1001703a 	wrctl	status,r2
8113757c:	e0bff717 	ldw	r2,-36(fp)
81137580:	e0bff415 	stw	r2,-48(fp)
81137584:	e0bffc17 	ldw	r2,-16(fp)
81137588:	10800117 	ldw	r2,4(r2)
8113758c:	10c02014 	ori	r3,r2,128
81137590:	e0bffc17 	ldw	r2,-16(fp)
81137594:	10c00115 	stw	r3,4(r2)
81137598:	e0bffc17 	ldw	r2,-16(fp)
8113759c:	10800017 	ldw	r2,0(r2)
811375a0:	10800304 	addi	r2,r2,12
811375a4:	e0fffc17 	ldw	r3,-16(fp)
811375a8:	18c00117 	ldw	r3,4(r3)
811375ac:	10c00035 	stwio	r3,0(r2)
811375b0:	e0bff417 	ldw	r2,-48(fp)
811375b4:	e0bff315 	stw	r2,-52(fp)
811375b8:	e0bff317 	ldw	r2,-52(fp)
811375bc:	1001703a 	wrctl	status,r2
811375c0:	e0bfef03 	ldbu	r2,-68(fp)
811375c4:	10000226 	beq	r2,zero,811375d0 <altera_avalon_uart_read+0x258>
811375c8:	00bffd44 	movi	r2,-11
811375cc:	00000106 	br	811375d4 <altera_avalon_uart_read+0x25c>
811375d0:	e0bff017 	ldw	r2,-64(fp)
811375d4:	e037883a 	mov	sp,fp
811375d8:	dfc00117 	ldw	ra,4(sp)
811375dc:	df000017 	ldw	fp,0(sp)
811375e0:	dec00204 	addi	sp,sp,8
811375e4:	f800283a 	ret

811375e8 <alt_get_errno>:
811375e8:	defffe04 	addi	sp,sp,-8
811375ec:	de00012e 	bgeu	sp,et,811375f4 <alt_get_errno+0xc>
811375f0:	003b68fa 	trap	3
811375f4:	dfc00115 	stw	ra,4(sp)
811375f8:	df000015 	stw	fp,0(sp)
811375fc:	d839883a 	mov	fp,sp
81137600:	d0a01017 	ldw	r2,-32704(gp)
81137604:	10000326 	beq	r2,zero,81137614 <alt_get_errno+0x2c>
81137608:	d0a01017 	ldw	r2,-32704(gp)
8113760c:	103ee83a 	callr	r2
81137610:	00000106 	br	81137618 <alt_get_errno+0x30>
81137614:	d0a05e04 	addi	r2,gp,-32392
81137618:	e037883a 	mov	sp,fp
8113761c:	dfc00117 	ldw	ra,4(sp)
81137620:	df000017 	ldw	fp,0(sp)
81137624:	dec00204 	addi	sp,sp,8
81137628:	f800283a 	ret

8113762c <altera_avalon_uart_write>:
8113762c:	deffec04 	addi	sp,sp,-80
81137630:	de00012e 	bgeu	sp,et,81137638 <altera_avalon_uart_write+0xc>
81137634:	003b68fa 	trap	3
81137638:	dfc01315 	stw	ra,76(sp)
8113763c:	df001215 	stw	fp,72(sp)
81137640:	df001204 	addi	fp,sp,72
81137644:	e13ffc15 	stw	r4,-16(fp)
81137648:	e17ffd15 	stw	r5,-12(fp)
8113764c:	e1bffe15 	stw	r6,-8(fp)
81137650:	e1ffff15 	stw	r7,-4(fp)
81137654:	e0bffe17 	ldw	r2,-8(fp)
81137658:	e0bfef15 	stw	r2,-68(fp)
8113765c:	e0bfff17 	ldw	r2,-4(fp)
81137660:	1090000c 	andi	r2,r2,16384
81137664:	e0bff015 	stw	r2,-64(fp)
81137668:	e0bffc17 	ldw	r2,-16(fp)
8113766c:	10800917 	ldw	r2,36(r2)
81137670:	e0bff815 	stw	r2,-32(fp)
81137674:	e03ff90d 	sth	zero,-28(fp)
81137678:	e0bff90b 	ldhu	r2,-28(fp)
8113767c:	e0fffb44 	addi	r3,fp,-19
81137680:	180d883a 	mov	r6,r3
81137684:	100b883a 	mov	r5,r2
81137688:	e13ff817 	ldw	r4,-32(fp)
8113768c:	112e4080 	call	8112e408 <OSSemPend>
81137690:	00005106 	br	811377d8 <altera_avalon_uart_write+0x1ac>
81137694:	e0bffc17 	ldw	r2,-16(fp)
81137698:	10800517 	ldw	r2,20(r2)
8113769c:	10800044 	addi	r2,r2,1
811376a0:	10800fcc 	andi	r2,r2,63
811376a4:	e0bff215 	stw	r2,-56(fp)
811376a8:	e0bffc17 	ldw	r2,-16(fp)
811376ac:	10c00417 	ldw	r3,16(r2)
811376b0:	e0bff217 	ldw	r2,-56(fp)
811376b4:	1880371e 	bne	r3,r2,81137794 <altera_avalon_uart_write+0x168>
811376b8:	e0bff017 	ldw	r2,-64(fp)
811376bc:	10000526 	beq	r2,zero,811376d4 <altera_avalon_uart_write+0xa8>
811376c0:	11375e80 	call	811375e8 <alt_get_errno>
811376c4:	1007883a 	mov	r3,r2
811376c8:	008002c4 	movi	r2,11
811376cc:	18800015 	stw	r2,0(r3)
811376d0:	00004306 	br	811377e0 <altera_avalon_uart_write+0x1b4>
811376d4:	0005303a 	rdctl	r2,status
811376d8:	e0bff515 	stw	r2,-44(fp)
811376dc:	e0fff517 	ldw	r3,-44(fp)
811376e0:	00bfff84 	movi	r2,-2
811376e4:	1884703a 	and	r2,r3,r2
811376e8:	1001703a 	wrctl	status,r2
811376ec:	e0bff517 	ldw	r2,-44(fp)
811376f0:	e0bff415 	stw	r2,-48(fp)
811376f4:	e0bffc17 	ldw	r2,-16(fp)
811376f8:	10800117 	ldw	r2,4(r2)
811376fc:	10c11014 	ori	r3,r2,1088
81137700:	e0bffc17 	ldw	r2,-16(fp)
81137704:	10c00115 	stw	r3,4(r2)
81137708:	e0bffc17 	ldw	r2,-16(fp)
8113770c:	10800017 	ldw	r2,0(r2)
81137710:	10800304 	addi	r2,r2,12
81137714:	e0fffc17 	ldw	r3,-16(fp)
81137718:	18c00117 	ldw	r3,4(r3)
8113771c:	10c00035 	stwio	r3,0(r2)
81137720:	e0bff417 	ldw	r2,-48(fp)
81137724:	e0bff115 	stw	r2,-60(fp)
81137728:	e0bff117 	ldw	r2,-60(fp)
8113772c:	1001703a 	wrctl	status,r2
81137730:	e0bffc17 	ldw	r2,-16(fp)
81137734:	10800717 	ldw	r2,28(r2)
81137738:	e0bff315 	stw	r2,-52(fp)
8113773c:	00800084 	movi	r2,2
81137740:	e0bff98d 	sth	r2,-26(fp)
81137744:	00bfe0c4 	movi	r2,-125
81137748:	e0bffa05 	stb	r2,-24(fp)
8113774c:	e03ffa8d 	sth	zero,-22(fp)
81137750:	d0a07303 	ldbu	r2,-32308(gp)
81137754:	10803fcc 	andi	r2,r2,255
81137758:	10000a26 	beq	r2,zero,81137784 <altera_avalon_uart_write+0x158>
8113775c:	e0fff98b 	ldhu	r3,-26(fp)
81137760:	e13ffa03 	ldbu	r4,-24(fp)
81137764:	e17ffa8b 	ldhu	r5,-22(fp)
81137768:	e0bffb04 	addi	r2,fp,-20
8113776c:	d8800015 	stw	r2,0(sp)
81137770:	280f883a 	mov	r7,r5
81137774:	200d883a 	mov	r6,r4
81137778:	180b883a 	mov	r5,r3
8113777c:	e13ff317 	ldw	r4,-52(fp)
81137780:	112a7680 	call	8112a768 <OSFlagPend>
81137784:	e0bffc17 	ldw	r2,-16(fp)
81137788:	10c00417 	ldw	r3,16(r2)
8113778c:	e0bff217 	ldw	r2,-56(fp)
81137790:	18bfe726 	beq	r3,r2,81137730 <__reset+0xfb117730>
81137794:	e0bfef17 	ldw	r2,-68(fp)
81137798:	10bfffc4 	addi	r2,r2,-1
8113779c:	e0bfef15 	stw	r2,-68(fp)
811377a0:	e0bffc17 	ldw	r2,-16(fp)
811377a4:	10c00517 	ldw	r3,20(r2)
811377a8:	e0bffd17 	ldw	r2,-12(fp)
811377ac:	11000044 	addi	r4,r2,1
811377b0:	e13ffd15 	stw	r4,-12(fp)
811377b4:	10800003 	ldbu	r2,0(r2)
811377b8:	1009883a 	mov	r4,r2
811377bc:	e0bffc17 	ldw	r2,-16(fp)
811377c0:	10c5883a 	add	r2,r2,r3
811377c4:	10801a04 	addi	r2,r2,104
811377c8:	11000005 	stb	r4,0(r2)
811377cc:	e0bffc17 	ldw	r2,-16(fp)
811377d0:	e0fff217 	ldw	r3,-56(fp)
811377d4:	10c00515 	stw	r3,20(r2)
811377d8:	e0bfef17 	ldw	r2,-68(fp)
811377dc:	103fad1e 	bne	r2,zero,81137694 <__reset+0xfb117694>
811377e0:	e0bffc17 	ldw	r2,-16(fp)
811377e4:	10800917 	ldw	r2,36(r2)
811377e8:	1009883a 	mov	r4,r2
811377ec:	112e7900 	call	8112e790 <OSSemPost>
811377f0:	0005303a 	rdctl	r2,status
811377f4:	e0bff715 	stw	r2,-36(fp)
811377f8:	e0fff717 	ldw	r3,-36(fp)
811377fc:	00bfff84 	movi	r2,-2
81137800:	1884703a 	and	r2,r3,r2
81137804:	1001703a 	wrctl	status,r2
81137808:	e0bff717 	ldw	r2,-36(fp)
8113780c:	e0bff415 	stw	r2,-48(fp)
81137810:	e0bffc17 	ldw	r2,-16(fp)
81137814:	10800117 	ldw	r2,4(r2)
81137818:	10c11014 	ori	r3,r2,1088
8113781c:	e0bffc17 	ldw	r2,-16(fp)
81137820:	10c00115 	stw	r3,4(r2)
81137824:	e0bffc17 	ldw	r2,-16(fp)
81137828:	10800017 	ldw	r2,0(r2)
8113782c:	10800304 	addi	r2,r2,12
81137830:	e0fffc17 	ldw	r3,-16(fp)
81137834:	18c00117 	ldw	r3,4(r3)
81137838:	10c00035 	stwio	r3,0(r2)
8113783c:	e0bff417 	ldw	r2,-48(fp)
81137840:	e0bff615 	stw	r2,-40(fp)
81137844:	e0bff617 	ldw	r2,-40(fp)
81137848:	1001703a 	wrctl	status,r2
8113784c:	e0fffe17 	ldw	r3,-8(fp)
81137850:	e0bfef17 	ldw	r2,-68(fp)
81137854:	1885c83a 	sub	r2,r3,r2
81137858:	e037883a 	mov	sp,fp
8113785c:	dfc00117 	ldw	ra,4(sp)
81137860:	df000017 	ldw	fp,0(sp)
81137864:	dec00204 	addi	sp,sp,8
81137868:	f800283a 	ret

8113786c <alt_get_errno>:
8113786c:	defffe04 	addi	sp,sp,-8
81137870:	de00012e 	bgeu	sp,et,81137878 <alt_get_errno+0xc>
81137874:	003b68fa 	trap	3
81137878:	dfc00115 	stw	ra,4(sp)
8113787c:	df000015 	stw	fp,0(sp)
81137880:	d839883a 	mov	fp,sp
81137884:	d0a01017 	ldw	r2,-32704(gp)
81137888:	10000326 	beq	r2,zero,81137898 <alt_get_errno+0x2c>
8113788c:	d0a01017 	ldw	r2,-32704(gp)
81137890:	103ee83a 	callr	r2
81137894:	00000106 	br	8113789c <alt_get_errno+0x30>
81137898:	d0a05e04 	addi	r2,gp,-32392
8113789c:	e037883a 	mov	sp,fp
811378a0:	dfc00117 	ldw	ra,4(sp)
811378a4:	df000017 	ldw	fp,0(sp)
811378a8:	dec00204 	addi	sp,sp,8
811378ac:	f800283a 	ret

811378b0 <alt_msgdma_write_standard_descriptor>:
811378b0:	defffc04 	addi	sp,sp,-16
811378b4:	de00012e 	bgeu	sp,et,811378bc <alt_msgdma_write_standard_descriptor+0xc>
811378b8:	003b68fa 	trap	3
811378bc:	df000315 	stw	fp,12(sp)
811378c0:	df000304 	addi	fp,sp,12
811378c4:	e13ffd15 	stw	r4,-12(fp)
811378c8:	e17ffe15 	stw	r5,-8(fp)
811378cc:	e1bfff15 	stw	r6,-4(fp)
811378d0:	e0bffd17 	ldw	r2,-12(fp)
811378d4:	10800037 	ldwio	r2,0(r2)
811378d8:	1080010c 	andi	r2,r2,4
811378dc:	10000226 	beq	r2,zero,811378e8 <alt_msgdma_write_standard_descriptor+0x38>
811378e0:	00bff904 	movi	r2,-28
811378e4:	00001506 	br	8113793c <alt_msgdma_write_standard_descriptor+0x8c>
811378e8:	e0bfff17 	ldw	r2,-4(fp)
811378ec:	10800017 	ldw	r2,0(r2)
811378f0:	1007883a 	mov	r3,r2
811378f4:	e0bffe17 	ldw	r2,-8(fp)
811378f8:	10c00035 	stwio	r3,0(r2)
811378fc:	e0bffe17 	ldw	r2,-8(fp)
81137900:	10800104 	addi	r2,r2,4
81137904:	e0ffff17 	ldw	r3,-4(fp)
81137908:	18c00117 	ldw	r3,4(r3)
8113790c:	10c00035 	stwio	r3,0(r2)
81137910:	e0bffe17 	ldw	r2,-8(fp)
81137914:	10800204 	addi	r2,r2,8
81137918:	e0ffff17 	ldw	r3,-4(fp)
8113791c:	18c00217 	ldw	r3,8(r3)
81137920:	10c00035 	stwio	r3,0(r2)
81137924:	e0bffe17 	ldw	r2,-8(fp)
81137928:	10800304 	addi	r2,r2,12
8113792c:	e0ffff17 	ldw	r3,-4(fp)
81137930:	18c00317 	ldw	r3,12(r3)
81137934:	10c00035 	stwio	r3,0(r2)
81137938:	0005883a 	mov	r2,zero
8113793c:	e037883a 	mov	sp,fp
81137940:	df000017 	ldw	fp,0(sp)
81137944:	dec00104 	addi	sp,sp,4
81137948:	f800283a 	ret

8113794c <alt_msgdma_write_extended_descriptor>:
8113794c:	defffc04 	addi	sp,sp,-16
81137950:	de00012e 	bgeu	sp,et,81137958 <alt_msgdma_write_extended_descriptor+0xc>
81137954:	003b68fa 	trap	3
81137958:	df000315 	stw	fp,12(sp)
8113795c:	df000304 	addi	fp,sp,12
81137960:	e13ffd15 	stw	r4,-12(fp)
81137964:	e17ffe15 	stw	r5,-8(fp)
81137968:	e1bfff15 	stw	r6,-4(fp)
8113796c:	e0bffd17 	ldw	r2,-12(fp)
81137970:	10800037 	ldwio	r2,0(r2)
81137974:	1080010c 	andi	r2,r2,4
81137978:	10000226 	beq	r2,zero,81137984 <alt_msgdma_write_extended_descriptor+0x38>
8113797c:	00bff904 	movi	r2,-28
81137980:	00003b06 	br	81137a70 <alt_msgdma_write_extended_descriptor+0x124>
81137984:	e0bfff17 	ldw	r2,-4(fp)
81137988:	10800017 	ldw	r2,0(r2)
8113798c:	1007883a 	mov	r3,r2
81137990:	e0bffe17 	ldw	r2,-8(fp)
81137994:	10c00035 	stwio	r3,0(r2)
81137998:	e0bffe17 	ldw	r2,-8(fp)
8113799c:	10800104 	addi	r2,r2,4
811379a0:	e0ffff17 	ldw	r3,-4(fp)
811379a4:	18c00117 	ldw	r3,4(r3)
811379a8:	10c00035 	stwio	r3,0(r2)
811379ac:	e0bffe17 	ldw	r2,-8(fp)
811379b0:	10800204 	addi	r2,r2,8
811379b4:	e0ffff17 	ldw	r3,-4(fp)
811379b8:	18c00217 	ldw	r3,8(r3)
811379bc:	10c00035 	stwio	r3,0(r2)
811379c0:	e0bffe17 	ldw	r2,-8(fp)
811379c4:	10800304 	addi	r2,r2,12
811379c8:	e0ffff17 	ldw	r3,-4(fp)
811379cc:	18c0030b 	ldhu	r3,12(r3)
811379d0:	18ffffcc 	andi	r3,r3,65535
811379d4:	10c0002d 	sthio	r3,0(r2)
811379d8:	e0bffe17 	ldw	r2,-8(fp)
811379dc:	10800384 	addi	r2,r2,14
811379e0:	e0ffff17 	ldw	r3,-4(fp)
811379e4:	18c00383 	ldbu	r3,14(r3)
811379e8:	18c03fcc 	andi	r3,r3,255
811379ec:	10c00025 	stbio	r3,0(r2)
811379f0:	e0bffe17 	ldw	r2,-8(fp)
811379f4:	108003c4 	addi	r2,r2,15
811379f8:	e0ffff17 	ldw	r3,-4(fp)
811379fc:	18c003c3 	ldbu	r3,15(r3)
81137a00:	18c03fcc 	andi	r3,r3,255
81137a04:	10c00025 	stbio	r3,0(r2)
81137a08:	e0bffe17 	ldw	r2,-8(fp)
81137a0c:	10800404 	addi	r2,r2,16
81137a10:	e0ffff17 	ldw	r3,-4(fp)
81137a14:	18c0040b 	ldhu	r3,16(r3)
81137a18:	18ffffcc 	andi	r3,r3,65535
81137a1c:	10c0002d 	sthio	r3,0(r2)
81137a20:	e0bffe17 	ldw	r2,-8(fp)
81137a24:	10800484 	addi	r2,r2,18
81137a28:	e0ffff17 	ldw	r3,-4(fp)
81137a2c:	18c0048b 	ldhu	r3,18(r3)
81137a30:	18ffffcc 	andi	r3,r3,65535
81137a34:	10c0002d 	sthio	r3,0(r2)
81137a38:	e0bffe17 	ldw	r2,-8(fp)
81137a3c:	10800504 	addi	r2,r2,20
81137a40:	0007883a 	mov	r3,zero
81137a44:	10c00035 	stwio	r3,0(r2)
81137a48:	e0bffe17 	ldw	r2,-8(fp)
81137a4c:	10800604 	addi	r2,r2,24
81137a50:	0007883a 	mov	r3,zero
81137a54:	10c00035 	stwio	r3,0(r2)
81137a58:	e0bffe17 	ldw	r2,-8(fp)
81137a5c:	10800704 	addi	r2,r2,28
81137a60:	e0ffff17 	ldw	r3,-4(fp)
81137a64:	18c00717 	ldw	r3,28(r3)
81137a68:	10c00035 	stwio	r3,0(r2)
81137a6c:	0005883a 	mov	r2,zero
81137a70:	e037883a 	mov	sp,fp
81137a74:	df000017 	ldw	fp,0(sp)
81137a78:	dec00104 	addi	sp,sp,4
81137a7c:	f800283a 	ret

81137a80 <alt_msgdma_irq>:
81137a80:	defff804 	addi	sp,sp,-32
81137a84:	de00012e 	bgeu	sp,et,81137a8c <alt_msgdma_irq+0xc>
81137a88:	003b68fa 	trap	3
81137a8c:	dfc00715 	stw	ra,28(sp)
81137a90:	df000615 	stw	fp,24(sp)
81137a94:	df000604 	addi	fp,sp,24
81137a98:	e13fff15 	stw	r4,-4(fp)
81137a9c:	e0bfff17 	ldw	r2,-4(fp)
81137aa0:	e0bffa15 	stw	r2,-24(fp)
81137aa4:	e0bffa17 	ldw	r2,-24(fp)
81137aa8:	10801783 	ldbu	r2,94(r2)
81137aac:	10803fcc 	andi	r2,r2,255
81137ab0:	10001126 	beq	r2,zero,81137af8 <alt_msgdma_irq+0x78>
81137ab4:	e0bffa17 	ldw	r2,-24(fp)
81137ab8:	10800617 	ldw	r2,24(r2)
81137abc:	10800037 	ldwio	r2,0(r2)
81137ac0:	1007883a 	mov	r3,r2
81137ac4:	00bffdc4 	movi	r2,-9
81137ac8:	1884703a 	and	r2,r3,r2
81137acc:	e0bffb15 	stw	r2,-20(fp)
81137ad0:	e0bffa17 	ldw	r2,-24(fp)
81137ad4:	10800617 	ldw	r2,24(r2)
81137ad8:	e0fffb17 	ldw	r3,-20(fp)
81137adc:	10c00035 	stwio	r3,0(r2)
81137ae0:	e0bffa17 	ldw	r2,-24(fp)
81137ae4:	10800617 	ldw	r2,24(r2)
81137ae8:	10800404 	addi	r2,r2,16
81137aec:	00c00044 	movi	r3,1
81137af0:	10c00035 	stwio	r3,0(r2)
81137af4:	00001106 	br	81137b3c <alt_msgdma_irq+0xbc>
81137af8:	e0bffa17 	ldw	r2,-24(fp)
81137afc:	10800317 	ldw	r2,12(r2)
81137b00:	10800104 	addi	r2,r2,4
81137b04:	10800037 	ldwio	r2,0(r2)
81137b08:	1007883a 	mov	r3,r2
81137b0c:	00bffbc4 	movi	r2,-17
81137b10:	1884703a 	and	r2,r3,r2
81137b14:	e0bffb15 	stw	r2,-20(fp)
81137b18:	e0bffa17 	ldw	r2,-24(fp)
81137b1c:	10800317 	ldw	r2,12(r2)
81137b20:	10800104 	addi	r2,r2,4
81137b24:	e0fffb17 	ldw	r3,-20(fp)
81137b28:	10c00035 	stwio	r3,0(r2)
81137b2c:	e0bffa17 	ldw	r2,-24(fp)
81137b30:	10800317 	ldw	r2,12(r2)
81137b34:	00c08004 	movi	r3,512
81137b38:	10c00035 	stwio	r3,0(r2)
81137b3c:	e0bffa17 	ldw	r2,-24(fp)
81137b40:	10800b17 	ldw	r2,44(r2)
81137b44:	10001226 	beq	r2,zero,81137b90 <alt_msgdma_irq+0x110>
81137b48:	0005303a 	rdctl	r2,status
81137b4c:	e0bffd15 	stw	r2,-12(fp)
81137b50:	e0fffd17 	ldw	r3,-12(fp)
81137b54:	00bfff84 	movi	r2,-2
81137b58:	1884703a 	and	r2,r3,r2
81137b5c:	1001703a 	wrctl	status,r2
81137b60:	e0bffd17 	ldw	r2,-12(fp)
81137b64:	e0bffc15 	stw	r2,-16(fp)
81137b68:	e0bffa17 	ldw	r2,-24(fp)
81137b6c:	10800b17 	ldw	r2,44(r2)
81137b70:	e0fffa17 	ldw	r3,-24(fp)
81137b74:	18c00c17 	ldw	r3,48(r3)
81137b78:	1809883a 	mov	r4,r3
81137b7c:	103ee83a 	callr	r2
81137b80:	e0bffc17 	ldw	r2,-16(fp)
81137b84:	e0bffe15 	stw	r2,-8(fp)
81137b88:	e0bffe17 	ldw	r2,-8(fp)
81137b8c:	1001703a 	wrctl	status,r2
81137b90:	e0bffa17 	ldw	r2,-24(fp)
81137b94:	10801783 	ldbu	r2,94(r2)
81137b98:	10803fcc 	andi	r2,r2,255
81137b9c:	10000a26 	beq	r2,zero,81137bc8 <alt_msgdma_irq+0x148>
81137ba0:	e0bffa17 	ldw	r2,-24(fp)
81137ba4:	10800617 	ldw	r2,24(r2)
81137ba8:	10800037 	ldwio	r2,0(r2)
81137bac:	10800214 	ori	r2,r2,8
81137bb0:	e0bffb15 	stw	r2,-20(fp)
81137bb4:	e0bffa17 	ldw	r2,-24(fp)
81137bb8:	10800617 	ldw	r2,24(r2)
81137bbc:	e0fffb17 	ldw	r3,-20(fp)
81137bc0:	10c00035 	stwio	r3,0(r2)
81137bc4:	00000c06 	br	81137bf8 <alt_msgdma_irq+0x178>
81137bc8:	e0bffa17 	ldw	r2,-24(fp)
81137bcc:	10800317 	ldw	r2,12(r2)
81137bd0:	10800104 	addi	r2,r2,4
81137bd4:	10800037 	ldwio	r2,0(r2)
81137bd8:	10800414 	ori	r2,r2,16
81137bdc:	e0bffb15 	stw	r2,-20(fp)
81137be0:	e0bffa17 	ldw	r2,-24(fp)
81137be4:	10800317 	ldw	r2,12(r2)
81137be8:	10800104 	addi	r2,r2,4
81137bec:	e0fffb17 	ldw	r3,-20(fp)
81137bf0:	10c00035 	stwio	r3,0(r2)
81137bf4:	0001883a 	nop
81137bf8:	e037883a 	mov	sp,fp
81137bfc:	dfc00117 	ldw	ra,4(sp)
81137c00:	df000017 	ldw	fp,0(sp)
81137c04:	dec00204 	addi	sp,sp,8
81137c08:	f800283a 	ret

81137c0c <alt_msgdma_construct_standard_descriptor>:
81137c0c:	defffb04 	addi	sp,sp,-20
81137c10:	de00012e 	bgeu	sp,et,81137c18 <alt_msgdma_construct_standard_descriptor+0xc>
81137c14:	003b68fa 	trap	3
81137c18:	df000415 	stw	fp,16(sp)
81137c1c:	df000404 	addi	fp,sp,16
81137c20:	e13ffc15 	stw	r4,-16(fp)
81137c24:	e17ffd15 	stw	r5,-12(fp)
81137c28:	e1bffe15 	stw	r6,-8(fp)
81137c2c:	e1ffff15 	stw	r7,-4(fp)
81137c30:	e0bffc17 	ldw	r2,-16(fp)
81137c34:	10c01217 	ldw	r3,72(r2)
81137c38:	e0800117 	ldw	r2,4(fp)
81137c3c:	18800436 	bltu	r3,r2,81137c50 <alt_msgdma_construct_standard_descriptor+0x44>
81137c40:	e0bffc17 	ldw	r2,-16(fp)
81137c44:	10801703 	ldbu	r2,92(r2)
81137c48:	10803fcc 	andi	r2,r2,255
81137c4c:	10000226 	beq	r2,zero,81137c58 <alt_msgdma_construct_standard_descriptor+0x4c>
81137c50:	00bffa84 	movi	r2,-22
81137c54:	00000e06 	br	81137c90 <alt_msgdma_construct_standard_descriptor+0x84>
81137c58:	e0bffd17 	ldw	r2,-12(fp)
81137c5c:	e0fffe17 	ldw	r3,-8(fp)
81137c60:	10c00015 	stw	r3,0(r2)
81137c64:	e0bffd17 	ldw	r2,-12(fp)
81137c68:	e0ffff17 	ldw	r3,-4(fp)
81137c6c:	10c00115 	stw	r3,4(r2)
81137c70:	e0bffd17 	ldw	r2,-12(fp)
81137c74:	e0c00117 	ldw	r3,4(fp)
81137c78:	10c00215 	stw	r3,8(r2)
81137c7c:	e0800217 	ldw	r2,8(fp)
81137c80:	10e00034 	orhi	r3,r2,32768
81137c84:	e0bffd17 	ldw	r2,-12(fp)
81137c88:	10c00315 	stw	r3,12(r2)
81137c8c:	0005883a 	mov	r2,zero
81137c90:	e037883a 	mov	sp,fp
81137c94:	df000017 	ldw	fp,0(sp)
81137c98:	dec00104 	addi	sp,sp,4
81137c9c:	f800283a 	ret

81137ca0 <alt_msgdma_construct_extended_descriptor>:
81137ca0:	defff604 	addi	sp,sp,-40
81137ca4:	de00012e 	bgeu	sp,et,81137cac <alt_msgdma_construct_extended_descriptor+0xc>
81137ca8:	003b68fa 	trap	3
81137cac:	df000915 	stw	fp,36(sp)
81137cb0:	df000904 	addi	fp,sp,36
81137cb4:	e13ff715 	stw	r4,-36(fp)
81137cb8:	e17ff815 	stw	r5,-32(fp)
81137cbc:	e1bff915 	stw	r6,-28(fp)
81137cc0:	e1fffa15 	stw	r7,-24(fp)
81137cc4:	e1800317 	ldw	r6,12(fp)
81137cc8:	e1400417 	ldw	r5,16(fp)
81137ccc:	e1000517 	ldw	r4,20(fp)
81137cd0:	e0c00617 	ldw	r3,24(fp)
81137cd4:	e0800717 	ldw	r2,28(fp)
81137cd8:	e1bffb0d 	sth	r6,-20(fp)
81137cdc:	e17ffc05 	stb	r5,-16(fp)
81137ce0:	e13ffd05 	stb	r4,-12(fp)
81137ce4:	e0fffe0d 	sth	r3,-8(fp)
81137ce8:	e0bfff0d 	sth	r2,-4(fp)
81137cec:	e0bff717 	ldw	r2,-36(fp)
81137cf0:	10c01217 	ldw	r3,72(r2)
81137cf4:	e0800117 	ldw	r2,4(fp)
81137cf8:	18801936 	bltu	r3,r2,81137d60 <alt_msgdma_construct_extended_descriptor+0xc0>
81137cfc:	e13ff717 	ldw	r4,-36(fp)
81137d00:	20801317 	ldw	r2,76(r4)
81137d04:	20c01417 	ldw	r3,80(r4)
81137d08:	e13ffe0b 	ldhu	r4,-8(fp)
81137d0c:	213fffcc 	andi	r4,r4,65535
81137d10:	2015883a 	mov	r10,r4
81137d14:	0017883a 	mov	r11,zero
81137d18:	1ac01136 	bltu	r3,r11,81137d60 <alt_msgdma_construct_extended_descriptor+0xc0>
81137d1c:	58c0011e 	bne	r11,r3,81137d24 <alt_msgdma_construct_extended_descriptor+0x84>
81137d20:	12800f36 	bltu	r2,r10,81137d60 <alt_msgdma_construct_extended_descriptor+0xc0>
81137d24:	e13ff717 	ldw	r4,-36(fp)
81137d28:	20801317 	ldw	r2,76(r4)
81137d2c:	20c01417 	ldw	r3,80(r4)
81137d30:	e13fff0b 	ldhu	r4,-4(fp)
81137d34:	213fffcc 	andi	r4,r4,65535
81137d38:	2011883a 	mov	r8,r4
81137d3c:	0013883a 	mov	r9,zero
81137d40:	1a400736 	bltu	r3,r9,81137d60 <alt_msgdma_construct_extended_descriptor+0xc0>
81137d44:	48c0011e 	bne	r9,r3,81137d4c <alt_msgdma_construct_extended_descriptor+0xac>
81137d48:	12000536 	bltu	r2,r8,81137d60 <alt_msgdma_construct_extended_descriptor+0xc0>
81137d4c:	e0bff717 	ldw	r2,-36(fp)
81137d50:	10801703 	ldbu	r2,92(r2)
81137d54:	10803fcc 	andi	r2,r2,255
81137d58:	10800060 	cmpeqi	r2,r2,1
81137d5c:	1000021e 	bne	r2,zero,81137d68 <alt_msgdma_construct_extended_descriptor+0xc8>
81137d60:	00bffa84 	movi	r2,-22
81137d64:	00002106 	br	81137dec <alt_msgdma_construct_extended_descriptor+0x14c>
81137d68:	e0bff817 	ldw	r2,-32(fp)
81137d6c:	e0fff917 	ldw	r3,-28(fp)
81137d70:	10c00015 	stw	r3,0(r2)
81137d74:	e0bff817 	ldw	r2,-32(fp)
81137d78:	e0fffa17 	ldw	r3,-24(fp)
81137d7c:	10c00115 	stw	r3,4(r2)
81137d80:	e0bff817 	ldw	r2,-32(fp)
81137d84:	e0c00117 	ldw	r3,4(fp)
81137d88:	10c00215 	stw	r3,8(r2)
81137d8c:	e0bff817 	ldw	r2,-32(fp)
81137d90:	e0fffb0b 	ldhu	r3,-20(fp)
81137d94:	10c0030d 	sth	r3,12(r2)
81137d98:	e0bff817 	ldw	r2,-32(fp)
81137d9c:	e0fffc03 	ldbu	r3,-16(fp)
81137da0:	10c00385 	stb	r3,14(r2)
81137da4:	e0bff817 	ldw	r2,-32(fp)
81137da8:	e0fffd03 	ldbu	r3,-12(fp)
81137dac:	10c003c5 	stb	r3,15(r2)
81137db0:	e0bff817 	ldw	r2,-32(fp)
81137db4:	e0fffe0b 	ldhu	r3,-8(fp)
81137db8:	10c0040d 	sth	r3,16(r2)
81137dbc:	e0bff817 	ldw	r2,-32(fp)
81137dc0:	e0ffff0b 	ldhu	r3,-4(fp)
81137dc4:	10c0048d 	sth	r3,18(r2)
81137dc8:	e0bff817 	ldw	r2,-32(fp)
81137dcc:	10000515 	stw	zero,20(r2)
81137dd0:	e0bff817 	ldw	r2,-32(fp)
81137dd4:	10000615 	stw	zero,24(r2)
81137dd8:	e0800217 	ldw	r2,8(fp)
81137ddc:	10e00034 	orhi	r3,r2,32768
81137de0:	e0bff817 	ldw	r2,-32(fp)
81137de4:	10c00715 	stw	r3,28(r2)
81137de8:	0005883a 	mov	r2,zero
81137dec:	e037883a 	mov	sp,fp
81137df0:	df000017 	ldw	fp,0(sp)
81137df4:	dec00104 	addi	sp,sp,4
81137df8:	f800283a 	ret

81137dfc <alt_msgdma_descriptor_async_transfer>:
81137dfc:	deffee04 	addi	sp,sp,-72
81137e00:	de00012e 	bgeu	sp,et,81137e08 <alt_msgdma_descriptor_async_transfer+0xc>
81137e04:	003b68fa 	trap	3
81137e08:	dfc01115 	stw	ra,68(sp)
81137e0c:	df001015 	stw	fp,64(sp)
81137e10:	df001004 	addi	fp,sp,64
81137e14:	e13ffd15 	stw	r4,-12(fp)
81137e18:	e17ffe15 	stw	r5,-8(fp)
81137e1c:	e1bfff15 	stw	r6,-4(fp)
81137e20:	e03ff115 	stw	zero,-60(fp)
81137e24:	e03ff215 	stw	zero,-56(fp)
81137e28:	e03ff00d 	sth	zero,-64(fp)
81137e2c:	e0bffd17 	ldw	r2,-12(fp)
81137e30:	10800317 	ldw	r2,12(r2)
81137e34:	10800204 	addi	r2,r2,8
81137e38:	10800037 	ldwio	r2,0(r2)
81137e3c:	10bfffcc 	andi	r2,r2,65535
81137e40:	e0bff315 	stw	r2,-52(fp)
81137e44:	e0bffd17 	ldw	r2,-12(fp)
81137e48:	10800317 	ldw	r2,12(r2)
81137e4c:	10800204 	addi	r2,r2,8
81137e50:	10800037 	ldwio	r2,0(r2)
81137e54:	1004d43a 	srli	r2,r2,16
81137e58:	e0bff415 	stw	r2,-48(fp)
81137e5c:	e0bffd17 	ldw	r2,-12(fp)
81137e60:	10800917 	ldw	r2,36(r2)
81137e64:	e0fff417 	ldw	r3,-48(fp)
81137e68:	1880042e 	bgeu	r3,r2,81137e7c <alt_msgdma_descriptor_async_transfer+0x80>
81137e6c:	e0bffd17 	ldw	r2,-12(fp)
81137e70:	10800917 	ldw	r2,36(r2)
81137e74:	e0fff317 	ldw	r3,-52(fp)
81137e78:	18800236 	bltu	r3,r2,81137e84 <alt_msgdma_descriptor_async_transfer+0x88>
81137e7c:	00bff904 	movi	r2,-28
81137e80:	0000a906 	br	81138128 <alt_msgdma_descriptor_async_transfer+0x32c>
81137e84:	e0bffd17 	ldw	r2,-12(fp)
81137e88:	10801817 	ldw	r2,96(r2)
81137e8c:	e0bff615 	stw	r2,-40(fp)
81137e90:	e03ffc0d 	sth	zero,-16(fp)
81137e94:	e0bffc0b 	ldhu	r2,-16(fp)
81137e98:	e0fffc84 	addi	r3,fp,-14
81137e9c:	180d883a 	mov	r6,r3
81137ea0:	100b883a 	mov	r5,r2
81137ea4:	e13ff617 	ldw	r4,-40(fp)
81137ea8:	112e4080 	call	8112e408 <OSSemPend>
81137eac:	00800804 	movi	r2,32
81137eb0:	e0bff115 	stw	r2,-60(fp)
81137eb4:	0005303a 	rdctl	r2,status
81137eb8:	e0bff715 	stw	r2,-36(fp)
81137ebc:	e0fff717 	ldw	r3,-36(fp)
81137ec0:	00bfff84 	movi	r2,-2
81137ec4:	1884703a 	and	r2,r3,r2
81137ec8:	1001703a 	wrctl	status,r2
81137ecc:	e0bff717 	ldw	r2,-36(fp)
81137ed0:	e0bff215 	stw	r2,-56(fp)
81137ed4:	e0bffd17 	ldw	r2,-12(fp)
81137ed8:	10800317 	ldw	r2,12(r2)
81137edc:	10800104 	addi	r2,r2,4
81137ee0:	e0fff117 	ldw	r3,-60(fp)
81137ee4:	10c00035 	stwio	r3,0(r2)
81137ee8:	e0bffd17 	ldw	r2,-12(fp)
81137eec:	10800317 	ldw	r2,12(r2)
81137ef0:	e0fffd17 	ldw	r3,-12(fp)
81137ef4:	18c00317 	ldw	r3,12(r3)
81137ef8:	18c00037 	ldwio	r3,0(r3)
81137efc:	10c00035 	stwio	r3,0(r2)
81137f00:	e0bff217 	ldw	r2,-56(fp)
81137f04:	e0bffb15 	stw	r2,-20(fp)
81137f08:	e0bffb17 	ldw	r2,-20(fp)
81137f0c:	1001703a 	wrctl	status,r2
81137f10:	e0bffe17 	ldw	r2,-8(fp)
81137f14:	10001e26 	beq	r2,zero,81137f90 <alt_msgdma_descriptor_async_transfer+0x194>
81137f18:	e0bfff17 	ldw	r2,-4(fp)
81137f1c:	10001c1e 	bne	r2,zero,81137f90 <alt_msgdma_descriptor_async_transfer+0x194>
81137f20:	00001106 	br	81137f68 <alt_msgdma_descriptor_async_transfer+0x16c>
81137f24:	01000044 	movi	r4,1
81137f28:	11266bc0 	call	811266bc <alt_busy_sleep>
81137f2c:	e0bff00b 	ldhu	r2,-64(fp)
81137f30:	1084e230 	cmpltui	r2,r2,5000
81137f34:	1000091e 	bne	r2,zero,81137f5c <alt_msgdma_descriptor_async_transfer+0x160>
81137f38:	01204534 	movhi	r4,33044
81137f3c:	2137fc04 	addi	r4,r4,-8208
81137f40:	113a3200 	call	8113a320 <alt_printf>
81137f44:	e0bffd17 	ldw	r2,-12(fp)
81137f48:	10801817 	ldw	r2,96(r2)
81137f4c:	1009883a 	mov	r4,r2
81137f50:	112e7900 	call	8112e790 <OSSemPost>
81137f54:	00bff084 	movi	r2,-62
81137f58:	00007306 	br	81138128 <alt_msgdma_descriptor_async_transfer+0x32c>
81137f5c:	e0bff00b 	ldhu	r2,-64(fp)
81137f60:	10800044 	addi	r2,r2,1
81137f64:	e0bff00d 	sth	r2,-64(fp)
81137f68:	e0bffd17 	ldw	r2,-12(fp)
81137f6c:	10c00317 	ldw	r3,12(r2)
81137f70:	e0bffd17 	ldw	r2,-12(fp)
81137f74:	10800417 	ldw	r2,16(r2)
81137f78:	e1bffe17 	ldw	r6,-8(fp)
81137f7c:	100b883a 	mov	r5,r2
81137f80:	1809883a 	mov	r4,r3
81137f84:	11378b00 	call	811378b0 <alt_msgdma_write_standard_descriptor>
81137f88:	103fe61e 	bne	r2,zero,81137f24 <__reset+0xfb117f24>
81137f8c:	00002706 	br	8113802c <alt_msgdma_descriptor_async_transfer+0x230>
81137f90:	e0bffe17 	ldw	r2,-8(fp)
81137f94:	10001f1e 	bne	r2,zero,81138014 <alt_msgdma_descriptor_async_transfer+0x218>
81137f98:	e0bfff17 	ldw	r2,-4(fp)
81137f9c:	10001d26 	beq	r2,zero,81138014 <alt_msgdma_descriptor_async_transfer+0x218>
81137fa0:	e03ff00d 	sth	zero,-64(fp)
81137fa4:	00001106 	br	81137fec <alt_msgdma_descriptor_async_transfer+0x1f0>
81137fa8:	01000044 	movi	r4,1
81137fac:	11266bc0 	call	811266bc <alt_busy_sleep>
81137fb0:	e0bff00b 	ldhu	r2,-64(fp)
81137fb4:	1084e230 	cmpltui	r2,r2,5000
81137fb8:	1000091e 	bne	r2,zero,81137fe0 <alt_msgdma_descriptor_async_transfer+0x1e4>
81137fbc:	01204534 	movhi	r4,33044
81137fc0:	21381204 	addi	r4,r4,-8120
81137fc4:	113a3200 	call	8113a320 <alt_printf>
81137fc8:	e0bffd17 	ldw	r2,-12(fp)
81137fcc:	10801817 	ldw	r2,96(r2)
81137fd0:	1009883a 	mov	r4,r2
81137fd4:	112e7900 	call	8112e790 <OSSemPost>
81137fd8:	00bff084 	movi	r2,-62
81137fdc:	00005206 	br	81138128 <alt_msgdma_descriptor_async_transfer+0x32c>
81137fe0:	e0bff00b 	ldhu	r2,-64(fp)
81137fe4:	10800044 	addi	r2,r2,1
81137fe8:	e0bff00d 	sth	r2,-64(fp)
81137fec:	e0bffd17 	ldw	r2,-12(fp)
81137ff0:	10c00317 	ldw	r3,12(r2)
81137ff4:	e0bffd17 	ldw	r2,-12(fp)
81137ff8:	10800417 	ldw	r2,16(r2)
81137ffc:	e1bfff17 	ldw	r6,-4(fp)
81138000:	100b883a 	mov	r5,r2
81138004:	1809883a 	mov	r4,r3
81138008:	113794c0 	call	8113794c <alt_msgdma_write_extended_descriptor>
8113800c:	103fe61e 	bne	r2,zero,81137fa8 <__reset+0xfb117fa8>
81138010:	00000606 	br	8113802c <alt_msgdma_descriptor_async_transfer+0x230>
81138014:	e0bffd17 	ldw	r2,-12(fp)
81138018:	10801817 	ldw	r2,96(r2)
8113801c:	1009883a 	mov	r4,r2
81138020:	112e7900 	call	8112e790 <OSSemPost>
81138024:	00bfffc4 	movi	r2,-1
81138028:	00003f06 	br	81138128 <alt_msgdma_descriptor_async_transfer+0x32c>
8113802c:	e0bffd17 	ldw	r2,-12(fp)
81138030:	10800b17 	ldw	r2,44(r2)
81138034:	10001c26 	beq	r2,zero,811380a8 <alt_msgdma_descriptor_async_transfer+0x2ac>
81138038:	e0bffd17 	ldw	r2,-12(fp)
8113803c:	10c00d17 	ldw	r3,52(r2)
81138040:	e0bff117 	ldw	r2,-60(fp)
81138044:	1884b03a 	or	r2,r3,r2
81138048:	10800514 	ori	r2,r2,20
8113804c:	e0bff115 	stw	r2,-60(fp)
81138050:	e0fff117 	ldw	r3,-60(fp)
81138054:	00bff7c4 	movi	r2,-33
81138058:	1884703a 	and	r2,r3,r2
8113805c:	e0bff115 	stw	r2,-60(fp)
81138060:	0005303a 	rdctl	r2,status
81138064:	e0bff915 	stw	r2,-28(fp)
81138068:	e0fff917 	ldw	r3,-28(fp)
8113806c:	00bfff84 	movi	r2,-2
81138070:	1884703a 	and	r2,r3,r2
81138074:	1001703a 	wrctl	status,r2
81138078:	e0bff917 	ldw	r2,-28(fp)
8113807c:	e0bff215 	stw	r2,-56(fp)
81138080:	e0bffd17 	ldw	r2,-12(fp)
81138084:	10800317 	ldw	r2,12(r2)
81138088:	10800104 	addi	r2,r2,4
8113808c:	e0fff117 	ldw	r3,-60(fp)
81138090:	10c00035 	stwio	r3,0(r2)
81138094:	e0bff217 	ldw	r2,-56(fp)
81138098:	e0bff515 	stw	r2,-44(fp)
8113809c:	e0bff517 	ldw	r2,-44(fp)
811380a0:	1001703a 	wrctl	status,r2
811380a4:	00001b06 	br	81138114 <alt_msgdma_descriptor_async_transfer+0x318>
811380a8:	e0bffd17 	ldw	r2,-12(fp)
811380ac:	10c00d17 	ldw	r3,52(r2)
811380b0:	e0bff117 	ldw	r2,-60(fp)
811380b4:	1884b03a 	or	r2,r3,r2
811380b8:	10800114 	ori	r2,r2,4
811380bc:	e0bff115 	stw	r2,-60(fp)
811380c0:	e0fff117 	ldw	r3,-60(fp)
811380c4:	00bff3c4 	movi	r2,-49
811380c8:	1884703a 	and	r2,r3,r2
811380cc:	e0bff115 	stw	r2,-60(fp)
811380d0:	0005303a 	rdctl	r2,status
811380d4:	e0bffa15 	stw	r2,-24(fp)
811380d8:	e0fffa17 	ldw	r3,-24(fp)
811380dc:	00bfff84 	movi	r2,-2
811380e0:	1884703a 	and	r2,r3,r2
811380e4:	1001703a 	wrctl	status,r2
811380e8:	e0bffa17 	ldw	r2,-24(fp)
811380ec:	e0bff215 	stw	r2,-56(fp)
811380f0:	e0bffd17 	ldw	r2,-12(fp)
811380f4:	10800317 	ldw	r2,12(r2)
811380f8:	10800104 	addi	r2,r2,4
811380fc:	e0fff117 	ldw	r3,-60(fp)
81138100:	10c00035 	stwio	r3,0(r2)
81138104:	e0bff217 	ldw	r2,-56(fp)
81138108:	e0bff815 	stw	r2,-32(fp)
8113810c:	e0bff817 	ldw	r2,-32(fp)
81138110:	1001703a 	wrctl	status,r2
81138114:	e0bffd17 	ldw	r2,-12(fp)
81138118:	10801817 	ldw	r2,96(r2)
8113811c:	1009883a 	mov	r4,r2
81138120:	112e7900 	call	8112e790 <OSSemPost>
81138124:	0005883a 	mov	r2,zero
81138128:	e037883a 	mov	sp,fp
8113812c:	dfc00117 	ldw	ra,4(sp)
81138130:	df000017 	ldw	fp,0(sp)
81138134:	dec00204 	addi	sp,sp,8
81138138:	f800283a 	ret

8113813c <alt_msgdma_descriptor_sync_transfer>:
8113813c:	deffee04 	addi	sp,sp,-72
81138140:	de00012e 	bgeu	sp,et,81138148 <alt_msgdma_descriptor_sync_transfer+0xc>
81138144:	003b68fa 	trap	3
81138148:	dfc01115 	stw	ra,68(sp)
8113814c:	df001015 	stw	fp,64(sp)
81138150:	df001004 	addi	fp,sp,64
81138154:	e13ffd15 	stw	r4,-12(fp)
81138158:	e17ffe15 	stw	r5,-8(fp)
8113815c:	e1bfff15 	stw	r6,-4(fp)
81138160:	e03ff415 	stw	zero,-48(fp)
81138164:	e03ff515 	stw	zero,-44(fp)
81138168:	e03ff015 	stw	zero,-64(fp)
8113816c:	e03ff10d 	sth	zero,-60(fp)
81138170:	e0bffd17 	ldw	r2,-12(fp)
81138174:	10800317 	ldw	r2,12(r2)
81138178:	10800204 	addi	r2,r2,8
8113817c:	10800037 	ldwio	r2,0(r2)
81138180:	10bfffcc 	andi	r2,r2,65535
81138184:	e0bff215 	stw	r2,-56(fp)
81138188:	e0bffd17 	ldw	r2,-12(fp)
8113818c:	10800317 	ldw	r2,12(r2)
81138190:	10800204 	addi	r2,r2,8
81138194:	10800037 	ldwio	r2,0(r2)
81138198:	1004d43a 	srli	r2,r2,16
8113819c:	e0bff315 	stw	r2,-52(fp)
811381a0:	00807804 	movi	r2,480
811381a4:	e0bff615 	stw	r2,-40(fp)
811381a8:	00001906 	br	81138210 <alt_msgdma_descriptor_sync_transfer+0xd4>
811381ac:	01000044 	movi	r4,1
811381b0:	11266bc0 	call	811266bc <alt_busy_sleep>
811381b4:	e0bff10b 	ldhu	r2,-60(fp)
811381b8:	1084e230 	cmpltui	r2,r2,5000
811381bc:	1000051e 	bne	r2,zero,811381d4 <alt_msgdma_descriptor_sync_transfer+0x98>
811381c0:	01204534 	movhi	r4,33044
811381c4:	21382804 	addi	r4,r4,-8032
811381c8:	113a3200 	call	8113a320 <alt_printf>
811381cc:	00bff084 	movi	r2,-62
811381d0:	0000d706 	br	81138530 <alt_msgdma_descriptor_sync_transfer+0x3f4>
811381d4:	e0bff10b 	ldhu	r2,-60(fp)
811381d8:	10800044 	addi	r2,r2,1
811381dc:	e0bff10d 	sth	r2,-60(fp)
811381e0:	e0bffd17 	ldw	r2,-12(fp)
811381e4:	10800317 	ldw	r2,12(r2)
811381e8:	10800204 	addi	r2,r2,8
811381ec:	10800037 	ldwio	r2,0(r2)
811381f0:	10bfffcc 	andi	r2,r2,65535
811381f4:	e0bff215 	stw	r2,-56(fp)
811381f8:	e0bffd17 	ldw	r2,-12(fp)
811381fc:	10800317 	ldw	r2,12(r2)
81138200:	10800204 	addi	r2,r2,8
81138204:	10800037 	ldwio	r2,0(r2)
81138208:	1004d43a 	srli	r2,r2,16
8113820c:	e0bff315 	stw	r2,-52(fp)
81138210:	e0bffd17 	ldw	r2,-12(fp)
81138214:	10800917 	ldw	r2,36(r2)
81138218:	e0fff317 	ldw	r3,-52(fp)
8113821c:	18bfe32e 	bgeu	r3,r2,811381ac <__reset+0xfb1181ac>
81138220:	e0bffd17 	ldw	r2,-12(fp)
81138224:	10800917 	ldw	r2,36(r2)
81138228:	e0fff217 	ldw	r3,-56(fp)
8113822c:	18bfdf2e 	bgeu	r3,r2,811381ac <__reset+0xfb1181ac>
81138230:	e0bffd17 	ldw	r2,-12(fp)
81138234:	10801817 	ldw	r2,96(r2)
81138238:	e0bff815 	stw	r2,-32(fp)
8113823c:	e03ffc0d 	sth	zero,-16(fp)
81138240:	e0bffc0b 	ldhu	r2,-16(fp)
81138244:	e0fffc84 	addi	r3,fp,-14
81138248:	180d883a 	mov	r6,r3
8113824c:	100b883a 	mov	r5,r2
81138250:	e13ff817 	ldw	r4,-32(fp)
81138254:	112e4080 	call	8112e408 <OSSemPend>
81138258:	0005303a 	rdctl	r2,status
8113825c:	e0bffb15 	stw	r2,-20(fp)
81138260:	e0fffb17 	ldw	r3,-20(fp)
81138264:	00bfff84 	movi	r2,-2
81138268:	1884703a 	and	r2,r3,r2
8113826c:	1001703a 	wrctl	status,r2
81138270:	e0bffb17 	ldw	r2,-20(fp)
81138274:	e0bff515 	stw	r2,-44(fp)
81138278:	e0bffd17 	ldw	r2,-12(fp)
8113827c:	10800317 	ldw	r2,12(r2)
81138280:	10800104 	addi	r2,r2,4
81138284:	00c00804 	movi	r3,32
81138288:	10c00035 	stwio	r3,0(r2)
8113828c:	e0bffd17 	ldw	r2,-12(fp)
81138290:	10800317 	ldw	r2,12(r2)
81138294:	e0fffd17 	ldw	r3,-12(fp)
81138298:	18c00317 	ldw	r3,12(r3)
8113829c:	18c00037 	ldwio	r3,0(r3)
811382a0:	10c00035 	stwio	r3,0(r2)
811382a4:	e0bffe17 	ldw	r2,-8(fp)
811382a8:	10001f26 	beq	r2,zero,81138328 <alt_msgdma_descriptor_sync_transfer+0x1ec>
811382ac:	e0bfff17 	ldw	r2,-4(fp)
811382b0:	10001d1e 	bne	r2,zero,81138328 <alt_msgdma_descriptor_sync_transfer+0x1ec>
811382b4:	e03ff10d 	sth	zero,-60(fp)
811382b8:	00001106 	br	81138300 <alt_msgdma_descriptor_sync_transfer+0x1c4>
811382bc:	01000044 	movi	r4,1
811382c0:	11266bc0 	call	811266bc <alt_busy_sleep>
811382c4:	e0bff10b 	ldhu	r2,-60(fp)
811382c8:	1084e230 	cmpltui	r2,r2,5000
811382cc:	1000091e 	bne	r2,zero,811382f4 <alt_msgdma_descriptor_sync_transfer+0x1b8>
811382d0:	01204534 	movhi	r4,33044
811382d4:	21383c04 	addi	r4,r4,-7952
811382d8:	113a3200 	call	8113a320 <alt_printf>
811382dc:	e0bffd17 	ldw	r2,-12(fp)
811382e0:	10801817 	ldw	r2,96(r2)
811382e4:	1009883a 	mov	r4,r2
811382e8:	112e7900 	call	8112e790 <OSSemPost>
811382ec:	00bff084 	movi	r2,-62
811382f0:	00008f06 	br	81138530 <alt_msgdma_descriptor_sync_transfer+0x3f4>
811382f4:	e0bff10b 	ldhu	r2,-60(fp)
811382f8:	10800044 	addi	r2,r2,1
811382fc:	e0bff10d 	sth	r2,-60(fp)
81138300:	e0bffd17 	ldw	r2,-12(fp)
81138304:	10c00317 	ldw	r3,12(r2)
81138308:	e0bffd17 	ldw	r2,-12(fp)
8113830c:	10800417 	ldw	r2,16(r2)
81138310:	e1bffe17 	ldw	r6,-8(fp)
81138314:	100b883a 	mov	r5,r2
81138318:	1809883a 	mov	r4,r3
8113831c:	11378b00 	call	811378b0 <alt_msgdma_write_standard_descriptor>
81138320:	103fe61e 	bne	r2,zero,811382bc <__reset+0xfb1182bc>
81138324:	00002706 	br	811383c4 <alt_msgdma_descriptor_sync_transfer+0x288>
81138328:	e0bffe17 	ldw	r2,-8(fp)
8113832c:	10001f1e 	bne	r2,zero,811383ac <alt_msgdma_descriptor_sync_transfer+0x270>
81138330:	e0bfff17 	ldw	r2,-4(fp)
81138334:	10001d26 	beq	r2,zero,811383ac <alt_msgdma_descriptor_sync_transfer+0x270>
81138338:	e03ff10d 	sth	zero,-60(fp)
8113833c:	00001106 	br	81138384 <alt_msgdma_descriptor_sync_transfer+0x248>
81138340:	01000044 	movi	r4,1
81138344:	11266bc0 	call	811266bc <alt_busy_sleep>
81138348:	e0bff10b 	ldhu	r2,-60(fp)
8113834c:	1084e230 	cmpltui	r2,r2,5000
81138350:	1000091e 	bne	r2,zero,81138378 <alt_msgdma_descriptor_sync_transfer+0x23c>
81138354:	01204534 	movhi	r4,33044
81138358:	21384d04 	addi	r4,r4,-7884
8113835c:	113a3200 	call	8113a320 <alt_printf>
81138360:	e0bffd17 	ldw	r2,-12(fp)
81138364:	10801817 	ldw	r2,96(r2)
81138368:	1009883a 	mov	r4,r2
8113836c:	112e7900 	call	8112e790 <OSSemPost>
81138370:	00bff084 	movi	r2,-62
81138374:	00006e06 	br	81138530 <alt_msgdma_descriptor_sync_transfer+0x3f4>
81138378:	e0bff10b 	ldhu	r2,-60(fp)
8113837c:	10800044 	addi	r2,r2,1
81138380:	e0bff10d 	sth	r2,-60(fp)
81138384:	e0bffd17 	ldw	r2,-12(fp)
81138388:	10c00317 	ldw	r3,12(r2)
8113838c:	e0bffd17 	ldw	r2,-12(fp)
81138390:	10800417 	ldw	r2,16(r2)
81138394:	e1bfff17 	ldw	r6,-4(fp)
81138398:	100b883a 	mov	r5,r2
8113839c:	1809883a 	mov	r4,r3
811383a0:	113794c0 	call	8113794c <alt_msgdma_write_extended_descriptor>
811383a4:	103fe61e 	bne	r2,zero,81138340 <__reset+0xfb118340>
811383a8:	00000606 	br	811383c4 <alt_msgdma_descriptor_sync_transfer+0x288>
811383ac:	e0bffd17 	ldw	r2,-12(fp)
811383b0:	10801817 	ldw	r2,96(r2)
811383b4:	1009883a 	mov	r4,r2
811383b8:	112e7900 	call	8112e790 <OSSemPost>
811383bc:	00bfffc4 	movi	r2,-1
811383c0:	00005b06 	br	81138530 <alt_msgdma_descriptor_sync_transfer+0x3f4>
811383c4:	e0bffd17 	ldw	r2,-12(fp)
811383c8:	10800317 	ldw	r2,12(r2)
811383cc:	10800104 	addi	r2,r2,4
811383d0:	e0fffd17 	ldw	r3,-12(fp)
811383d4:	19000d17 	ldw	r4,52(r3)
811383d8:	00fff2c4 	movi	r3,-53
811383dc:	20c6703a 	and	r3,r4,r3
811383e0:	18c00114 	ori	r3,r3,4
811383e4:	10c00035 	stwio	r3,0(r2)
811383e8:	e0bff517 	ldw	r2,-44(fp)
811383ec:	e0bff715 	stw	r2,-36(fp)
811383f0:	e0bff717 	ldw	r2,-36(fp)
811383f4:	1001703a 	wrctl	status,r2
811383f8:	e03ff10d 	sth	zero,-60(fp)
811383fc:	e0bffd17 	ldw	r2,-12(fp)
81138400:	10800317 	ldw	r2,12(r2)
81138404:	10800037 	ldwio	r2,0(r2)
81138408:	e0bff015 	stw	r2,-64(fp)
8113840c:	00001506 	br	81138464 <alt_msgdma_descriptor_sync_transfer+0x328>
81138410:	01000044 	movi	r4,1
81138414:	11266bc0 	call	811266bc <alt_busy_sleep>
81138418:	e0bff10b 	ldhu	r2,-60(fp)
8113841c:	1084e230 	cmpltui	r2,r2,5000
81138420:	1000091e 	bne	r2,zero,81138448 <alt_msgdma_descriptor_sync_transfer+0x30c>
81138424:	01204534 	movhi	r4,33044
81138428:	21385e04 	addi	r4,r4,-7816
8113842c:	113a3200 	call	8113a320 <alt_printf>
81138430:	e0bffd17 	ldw	r2,-12(fp)
81138434:	10801817 	ldw	r2,96(r2)
81138438:	1009883a 	mov	r4,r2
8113843c:	112e7900 	call	8112e790 <OSSemPost>
81138440:	00bff084 	movi	r2,-62
81138444:	00003a06 	br	81138530 <alt_msgdma_descriptor_sync_transfer+0x3f4>
81138448:	e0bff10b 	ldhu	r2,-60(fp)
8113844c:	10800044 	addi	r2,r2,1
81138450:	e0bff10d 	sth	r2,-60(fp)
81138454:	e0bffd17 	ldw	r2,-12(fp)
81138458:	10800317 	ldw	r2,12(r2)
8113845c:	10800037 	ldwio	r2,0(r2)
81138460:	e0bff015 	stw	r2,-64(fp)
81138464:	e0fff017 	ldw	r3,-64(fp)
81138468:	e0bff617 	ldw	r2,-40(fp)
8113846c:	1884703a 	and	r2,r3,r2
81138470:	1000031e 	bne	r2,zero,81138480 <alt_msgdma_descriptor_sync_transfer+0x344>
81138474:	e0bff017 	ldw	r2,-64(fp)
81138478:	1080004c 	andi	r2,r2,1
8113847c:	103fe41e 	bne	r2,zero,81138410 <__reset+0xfb118410>
81138480:	e0fff017 	ldw	r3,-64(fp)
81138484:	e0bff617 	ldw	r2,-40(fp)
81138488:	1884703a 	and	r2,r3,r2
8113848c:	10000626 	beq	r2,zero,811384a8 <alt_msgdma_descriptor_sync_transfer+0x36c>
81138490:	e0bffd17 	ldw	r2,-12(fp)
81138494:	10801817 	ldw	r2,96(r2)
81138498:	1009883a 	mov	r4,r2
8113849c:	112e7900 	call	8112e790 <OSSemPost>
811384a0:	e0bff617 	ldw	r2,-40(fp)
811384a4:	00002206 	br	81138530 <alt_msgdma_descriptor_sync_transfer+0x3f4>
811384a8:	e0bffd17 	ldw	r2,-12(fp)
811384ac:	10800317 	ldw	r2,12(r2)
811384b0:	10800104 	addi	r2,r2,4
811384b4:	10800037 	ldwio	r2,0(r2)
811384b8:	10800814 	ori	r2,r2,32
811384bc:	e0bff415 	stw	r2,-48(fp)
811384c0:	0005303a 	rdctl	r2,status
811384c4:	e0bffa15 	stw	r2,-24(fp)
811384c8:	e0fffa17 	ldw	r3,-24(fp)
811384cc:	00bfff84 	movi	r2,-2
811384d0:	1884703a 	and	r2,r3,r2
811384d4:	1001703a 	wrctl	status,r2
811384d8:	e0bffa17 	ldw	r2,-24(fp)
811384dc:	e0bff515 	stw	r2,-44(fp)
811384e0:	e0bffd17 	ldw	r2,-12(fp)
811384e4:	10800317 	ldw	r2,12(r2)
811384e8:	10800104 	addi	r2,r2,4
811384ec:	e0fff417 	ldw	r3,-48(fp)
811384f0:	10c00035 	stwio	r3,0(r2)
811384f4:	e0bffd17 	ldw	r2,-12(fp)
811384f8:	10800317 	ldw	r2,12(r2)
811384fc:	e0fffd17 	ldw	r3,-12(fp)
81138500:	18c00317 	ldw	r3,12(r3)
81138504:	18c00037 	ldwio	r3,0(r3)
81138508:	10c00035 	stwio	r3,0(r2)
8113850c:	e0bff517 	ldw	r2,-44(fp)
81138510:	e0bff915 	stw	r2,-28(fp)
81138514:	e0bff917 	ldw	r2,-28(fp)
81138518:	1001703a 	wrctl	status,r2
8113851c:	e0bffd17 	ldw	r2,-12(fp)
81138520:	10801817 	ldw	r2,96(r2)
81138524:	1009883a 	mov	r4,r2
81138528:	112e7900 	call	8112e790 <OSSemPost>
8113852c:	0005883a 	mov	r2,zero
81138530:	e037883a 	mov	sp,fp
81138534:	dfc00117 	ldw	ra,4(sp)
81138538:	df000017 	ldw	fp,0(sp)
8113853c:	dec00204 	addi	sp,sp,8
81138540:	f800283a 	ret

81138544 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
81138544:	defff804 	addi	sp,sp,-32
81138548:	de00012e 	bgeu	sp,et,81138550 <alt_msgdma_construct_standard_st_to_mm_descriptor+0xc>
8113854c:	003b68fa 	trap	3
81138550:	dfc00715 	stw	ra,28(sp)
81138554:	df000615 	stw	fp,24(sp)
81138558:	df000604 	addi	fp,sp,24
8113855c:	e13ffc15 	stw	r4,-16(fp)
81138560:	e17ffd15 	stw	r5,-12(fp)
81138564:	e1bffe15 	stw	r6,-8(fp)
81138568:	e1ffff15 	stw	r7,-4(fp)
8113856c:	e0800217 	ldw	r2,8(fp)
81138570:	d8800115 	stw	r2,4(sp)
81138574:	e0bfff17 	ldw	r2,-4(fp)
81138578:	d8800015 	stw	r2,0(sp)
8113857c:	e1fffe17 	ldw	r7,-8(fp)
81138580:	000d883a 	mov	r6,zero
81138584:	e17ffd17 	ldw	r5,-12(fp)
81138588:	e13ffc17 	ldw	r4,-16(fp)
8113858c:	1137c0c0 	call	81137c0c <alt_msgdma_construct_standard_descriptor>
81138590:	e037883a 	mov	sp,fp
81138594:	dfc00117 	ldw	ra,4(sp)
81138598:	df000017 	ldw	fp,0(sp)
8113859c:	dec00204 	addi	sp,sp,8
811385a0:	f800283a 	ret

811385a4 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
811385a4:	defff804 	addi	sp,sp,-32
811385a8:	de00012e 	bgeu	sp,et,811385b0 <alt_msgdma_construct_standard_mm_to_st_descriptor+0xc>
811385ac:	003b68fa 	trap	3
811385b0:	dfc00715 	stw	ra,28(sp)
811385b4:	df000615 	stw	fp,24(sp)
811385b8:	df000604 	addi	fp,sp,24
811385bc:	e13ffc15 	stw	r4,-16(fp)
811385c0:	e17ffd15 	stw	r5,-12(fp)
811385c4:	e1bffe15 	stw	r6,-8(fp)
811385c8:	e1ffff15 	stw	r7,-4(fp)
811385cc:	e0800217 	ldw	r2,8(fp)
811385d0:	d8800115 	stw	r2,4(sp)
811385d4:	e0bfff17 	ldw	r2,-4(fp)
811385d8:	d8800015 	stw	r2,0(sp)
811385dc:	000f883a 	mov	r7,zero
811385e0:	e1bffe17 	ldw	r6,-8(fp)
811385e4:	e17ffd17 	ldw	r5,-12(fp)
811385e8:	e13ffc17 	ldw	r4,-16(fp)
811385ec:	1137c0c0 	call	81137c0c <alt_msgdma_construct_standard_descriptor>
811385f0:	e037883a 	mov	sp,fp
811385f4:	dfc00117 	ldw	ra,4(sp)
811385f8:	df000017 	ldw	fp,0(sp)
811385fc:	dec00204 	addi	sp,sp,8
81138600:	f800283a 	ret

81138604 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
81138604:	defff804 	addi	sp,sp,-32
81138608:	de00012e 	bgeu	sp,et,81138610 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0xc>
8113860c:	003b68fa 	trap	3
81138610:	dfc00715 	stw	ra,28(sp)
81138614:	df000615 	stw	fp,24(sp)
81138618:	df000604 	addi	fp,sp,24
8113861c:	e13ffc15 	stw	r4,-16(fp)
81138620:	e17ffd15 	stw	r5,-12(fp)
81138624:	e1bffe15 	stw	r6,-8(fp)
81138628:	e1ffff15 	stw	r7,-4(fp)
8113862c:	e0800317 	ldw	r2,12(fp)
81138630:	d8800115 	stw	r2,4(sp)
81138634:	e0800217 	ldw	r2,8(fp)
81138638:	d8800015 	stw	r2,0(sp)
8113863c:	e1ffff17 	ldw	r7,-4(fp)
81138640:	e1bffe17 	ldw	r6,-8(fp)
81138644:	e17ffd17 	ldw	r5,-12(fp)
81138648:	e13ffc17 	ldw	r4,-16(fp)
8113864c:	1137c0c0 	call	81137c0c <alt_msgdma_construct_standard_descriptor>
81138650:	e037883a 	mov	sp,fp
81138654:	dfc00117 	ldw	ra,4(sp)
81138658:	df000017 	ldw	fp,0(sp)
8113865c:	dec00204 	addi	sp,sp,8
81138660:	f800283a 	ret

81138664 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
81138664:	defff004 	addi	sp,sp,-64
81138668:	de00012e 	bgeu	sp,et,81138670 <alt_msgdma_construct_extended_st_to_mm_descriptor+0xc>
8113866c:	003b68fa 	trap	3
81138670:	dfc00f15 	stw	ra,60(sp)
81138674:	df000e15 	stw	fp,56(sp)
81138678:	df000e04 	addi	fp,sp,56
8113867c:	e13ff915 	stw	r4,-28(fp)
81138680:	e17ffa15 	stw	r5,-24(fp)
81138684:	e1bffb15 	stw	r6,-20(fp)
81138688:	e1fffc15 	stw	r7,-16(fp)
8113868c:	e1000317 	ldw	r4,12(fp)
81138690:	e0c00417 	ldw	r3,16(fp)
81138694:	e0800517 	ldw	r2,20(fp)
81138698:	e13ffd0d 	sth	r4,-12(fp)
8113869c:	e0fffe05 	stb	r3,-8(fp)
811386a0:	e0bfff0d 	sth	r2,-4(fp)
811386a4:	e0bffd0b 	ldhu	r2,-12(fp)
811386a8:	e0fffe03 	ldbu	r3,-8(fp)
811386ac:	e13fff0b 	ldhu	r4,-4(fp)
811386b0:	d9000615 	stw	r4,24(sp)
811386b4:	d8000515 	stw	zero,20(sp)
811386b8:	d8c00415 	stw	r3,16(sp)
811386bc:	d8000315 	stw	zero,12(sp)
811386c0:	d8800215 	stw	r2,8(sp)
811386c4:	e0800217 	ldw	r2,8(fp)
811386c8:	d8800115 	stw	r2,4(sp)
811386cc:	e0bffc17 	ldw	r2,-16(fp)
811386d0:	d8800015 	stw	r2,0(sp)
811386d4:	e1fffb17 	ldw	r7,-20(fp)
811386d8:	000d883a 	mov	r6,zero
811386dc:	e17ffa17 	ldw	r5,-24(fp)
811386e0:	e13ff917 	ldw	r4,-28(fp)
811386e4:	1137ca00 	call	81137ca0 <alt_msgdma_construct_extended_descriptor>
811386e8:	e037883a 	mov	sp,fp
811386ec:	dfc00117 	ldw	ra,4(sp)
811386f0:	df000017 	ldw	fp,0(sp)
811386f4:	dec00204 	addi	sp,sp,8
811386f8:	f800283a 	ret

811386fc <alt_msgdma_construct_extended_mm_to_st_descriptor>:
811386fc:	defff004 	addi	sp,sp,-64
81138700:	de00012e 	bgeu	sp,et,81138708 <alt_msgdma_construct_extended_mm_to_st_descriptor+0xc>
81138704:	003b68fa 	trap	3
81138708:	dfc00f15 	stw	ra,60(sp)
8113870c:	df000e15 	stw	fp,56(sp)
81138710:	df000e04 	addi	fp,sp,56
81138714:	e13ff915 	stw	r4,-28(fp)
81138718:	e17ffa15 	stw	r5,-24(fp)
8113871c:	e1bffb15 	stw	r6,-20(fp)
81138720:	e1fffc15 	stw	r7,-16(fp)
81138724:	e1000317 	ldw	r4,12(fp)
81138728:	e0c00417 	ldw	r3,16(fp)
8113872c:	e0800517 	ldw	r2,20(fp)
81138730:	e13ffd0d 	sth	r4,-12(fp)
81138734:	e0fffe05 	stb	r3,-8(fp)
81138738:	e0bfff0d 	sth	r2,-4(fp)
8113873c:	e0bffd0b 	ldhu	r2,-12(fp)
81138740:	e0fffe03 	ldbu	r3,-8(fp)
81138744:	e13fff0b 	ldhu	r4,-4(fp)
81138748:	d8000615 	stw	zero,24(sp)
8113874c:	d9000515 	stw	r4,20(sp)
81138750:	d8000415 	stw	zero,16(sp)
81138754:	d8c00315 	stw	r3,12(sp)
81138758:	d8800215 	stw	r2,8(sp)
8113875c:	e0800217 	ldw	r2,8(fp)
81138760:	d8800115 	stw	r2,4(sp)
81138764:	e0bffc17 	ldw	r2,-16(fp)
81138768:	d8800015 	stw	r2,0(sp)
8113876c:	000f883a 	mov	r7,zero
81138770:	e1bffb17 	ldw	r6,-20(fp)
81138774:	e17ffa17 	ldw	r5,-24(fp)
81138778:	e13ff917 	ldw	r4,-28(fp)
8113877c:	1137ca00 	call	81137ca0 <alt_msgdma_construct_extended_descriptor>
81138780:	e037883a 	mov	sp,fp
81138784:	dfc00117 	ldw	ra,4(sp)
81138788:	df000017 	ldw	fp,0(sp)
8113878c:	dec00204 	addi	sp,sp,8
81138790:	f800283a 	ret

81138794 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
81138794:	deffee04 	addi	sp,sp,-72
81138798:	de00012e 	bgeu	sp,et,811387a0 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0xc>
8113879c:	003b68fa 	trap	3
811387a0:	dfc01115 	stw	ra,68(sp)
811387a4:	df001015 	stw	fp,64(sp)
811387a8:	df001004 	addi	fp,sp,64
811387ac:	e13ff715 	stw	r4,-36(fp)
811387b0:	e17ff815 	stw	r5,-32(fp)
811387b4:	e1bff915 	stw	r6,-28(fp)
811387b8:	e1fffa15 	stw	r7,-24(fp)
811387bc:	e1800417 	ldw	r6,16(fp)
811387c0:	e1400517 	ldw	r5,20(fp)
811387c4:	e1000617 	ldw	r4,24(fp)
811387c8:	e0c00717 	ldw	r3,28(fp)
811387cc:	e0800817 	ldw	r2,32(fp)
811387d0:	e1bffb0d 	sth	r6,-20(fp)
811387d4:	e17ffc05 	stb	r5,-16(fp)
811387d8:	e13ffd05 	stb	r4,-12(fp)
811387dc:	e0fffe0d 	sth	r3,-8(fp)
811387e0:	e0bfff0d 	sth	r2,-4(fp)
811387e4:	e0bffb0b 	ldhu	r2,-20(fp)
811387e8:	e0fffc03 	ldbu	r3,-16(fp)
811387ec:	e13ffd03 	ldbu	r4,-12(fp)
811387f0:	e17ffe0b 	ldhu	r5,-8(fp)
811387f4:	e1bfff0b 	ldhu	r6,-4(fp)
811387f8:	d9800615 	stw	r6,24(sp)
811387fc:	d9400515 	stw	r5,20(sp)
81138800:	d9000415 	stw	r4,16(sp)
81138804:	d8c00315 	stw	r3,12(sp)
81138808:	d8800215 	stw	r2,8(sp)
8113880c:	e0800317 	ldw	r2,12(fp)
81138810:	d8800115 	stw	r2,4(sp)
81138814:	e0800217 	ldw	r2,8(fp)
81138818:	d8800015 	stw	r2,0(sp)
8113881c:	e1fffa17 	ldw	r7,-24(fp)
81138820:	e1bff917 	ldw	r6,-28(fp)
81138824:	e17ff817 	ldw	r5,-32(fp)
81138828:	e13ff717 	ldw	r4,-36(fp)
8113882c:	1137ca00 	call	81137ca0 <alt_msgdma_construct_extended_descriptor>
81138830:	e037883a 	mov	sp,fp
81138834:	dfc00117 	ldw	ra,4(sp)
81138838:	df000017 	ldw	fp,0(sp)
8113883c:	dec00204 	addi	sp,sp,8
81138840:	f800283a 	ret

81138844 <alt_msgdma_construct_prefetcher_standard_descriptor>:
81138844:	defffb04 	addi	sp,sp,-20
81138848:	de00012e 	bgeu	sp,et,81138850 <alt_msgdma_construct_prefetcher_standard_descriptor+0xc>
8113884c:	003b68fa 	trap	3
81138850:	df000415 	stw	fp,16(sp)
81138854:	df000404 	addi	fp,sp,16
81138858:	e13ffc15 	stw	r4,-16(fp)
8113885c:	e17ffd15 	stw	r5,-12(fp)
81138860:	e1bffe15 	stw	r6,-8(fp)
81138864:	e1ffff15 	stw	r7,-4(fp)
81138868:	e0bffc17 	ldw	r2,-16(fp)
8113886c:	10c01217 	ldw	r3,72(r2)
81138870:	e0800117 	ldw	r2,4(fp)
81138874:	18800436 	bltu	r3,r2,81138888 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
81138878:	e0bffc17 	ldw	r2,-16(fp)
8113887c:	10801703 	ldbu	r2,92(r2)
81138880:	10803fcc 	andi	r2,r2,255
81138884:	10000226 	beq	r2,zero,81138890 <alt_msgdma_construct_prefetcher_standard_descriptor+0x4c>
81138888:	00bffa84 	movi	r2,-22
8113888c:	00001406 	br	811388e0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x9c>
81138890:	e0bffd17 	ldw	r2,-12(fp)
81138894:	e0fffe17 	ldw	r3,-8(fp)
81138898:	10c00015 	stw	r3,0(r2)
8113889c:	e0bffd17 	ldw	r2,-12(fp)
811388a0:	e0ffff17 	ldw	r3,-4(fp)
811388a4:	10c00115 	stw	r3,4(r2)
811388a8:	e0bffd17 	ldw	r2,-12(fp)
811388ac:	e0c00117 	ldw	r3,4(fp)
811388b0:	10c00215 	stw	r3,8(r2)
811388b4:	e0fffd17 	ldw	r3,-12(fp)
811388b8:	e0bffd17 	ldw	r2,-12(fp)
811388bc:	10c00315 	stw	r3,12(r2)
811388c0:	e0c00217 	ldw	r3,8(fp)
811388c4:	00900034 	movhi	r2,16384
811388c8:	10bfffc4 	addi	r2,r2,-1
811388cc:	1884703a 	and	r2,r3,r2
811388d0:	10e00034 	orhi	r3,r2,32768
811388d4:	e0bffd17 	ldw	r2,-12(fp)
811388d8:	10c00715 	stw	r3,28(r2)
811388dc:	0005883a 	mov	r2,zero
811388e0:	e037883a 	mov	sp,fp
811388e4:	df000017 	ldw	fp,0(sp)
811388e8:	dec00104 	addi	sp,sp,4
811388ec:	f800283a 	ret

811388f0 <alt_msgdma_construct_prefetcher_extended_descriptor>:
811388f0:	defff404 	addi	sp,sp,-48
811388f4:	de00012e 	bgeu	sp,et,811388fc <alt_msgdma_construct_prefetcher_extended_descriptor+0xc>
811388f8:	003b68fa 	trap	3
811388fc:	df000b15 	stw	fp,44(sp)
81138900:	df000b04 	addi	fp,sp,44
81138904:	e13ff715 	stw	r4,-36(fp)
81138908:	e17ff815 	stw	r5,-32(fp)
8113890c:	e1bff915 	stw	r6,-28(fp)
81138910:	e1fffa15 	stw	r7,-24(fp)
81138914:	e1800517 	ldw	r6,20(fp)
81138918:	e1400617 	ldw	r5,24(fp)
8113891c:	e1000717 	ldw	r4,28(fp)
81138920:	e0c00817 	ldw	r3,32(fp)
81138924:	e0800917 	ldw	r2,36(fp)
81138928:	e1bffb0d 	sth	r6,-20(fp)
8113892c:	e17ffc05 	stb	r5,-16(fp)
81138930:	e13ffd05 	stb	r4,-12(fp)
81138934:	e0fffe0d 	sth	r3,-8(fp)
81138938:	e0bfff0d 	sth	r2,-4(fp)
8113893c:	e0bff717 	ldw	r2,-36(fp)
81138940:	10c01217 	ldw	r3,72(r2)
81138944:	e0800317 	ldw	r2,12(fp)
81138948:	18801936 	bltu	r3,r2,811389b0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113894c:	e13ff717 	ldw	r4,-36(fp)
81138950:	20801317 	ldw	r2,76(r4)
81138954:	20c01417 	ldw	r3,80(r4)
81138958:	e13ffe0b 	ldhu	r4,-8(fp)
8113895c:	213fffcc 	andi	r4,r4,65535
81138960:	2015883a 	mov	r10,r4
81138964:	0017883a 	mov	r11,zero
81138968:	1ac01136 	bltu	r3,r11,811389b0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113896c:	58c0011e 	bne	r11,r3,81138974 <alt_msgdma_construct_prefetcher_extended_descriptor+0x84>
81138970:	12800f36 	bltu	r2,r10,811389b0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81138974:	e13ff717 	ldw	r4,-36(fp)
81138978:	20801317 	ldw	r2,76(r4)
8113897c:	20c01417 	ldw	r3,80(r4)
81138980:	e13fff0b 	ldhu	r4,-4(fp)
81138984:	213fffcc 	andi	r4,r4,65535
81138988:	2011883a 	mov	r8,r4
8113898c:	0013883a 	mov	r9,zero
81138990:	1a400736 	bltu	r3,r9,811389b0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81138994:	48c0011e 	bne	r9,r3,8113899c <alt_msgdma_construct_prefetcher_extended_descriptor+0xac>
81138998:	12000536 	bltu	r2,r8,811389b0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113899c:	e0bff717 	ldw	r2,-36(fp)
811389a0:	10801703 	ldbu	r2,92(r2)
811389a4:	10803fcc 	andi	r2,r2,255
811389a8:	10800060 	cmpeqi	r2,r2,1
811389ac:	1000021e 	bne	r2,zero,811389b8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc8>
811389b0:	00bffa84 	movi	r2,-22
811389b4:	00003106 	br	81138a7c <alt_msgdma_construct_prefetcher_extended_descriptor+0x18c>
811389b8:	e0bff817 	ldw	r2,-32(fp)
811389bc:	e0fff917 	ldw	r3,-28(fp)
811389c0:	10c00915 	stw	r3,36(r2)
811389c4:	e0bff817 	ldw	r2,-32(fp)
811389c8:	e0fffa17 	ldw	r3,-24(fp)
811389cc:	10c00015 	stw	r3,0(r2)
811389d0:	e0bff817 	ldw	r2,-32(fp)
811389d4:	e0c00117 	ldw	r3,4(fp)
811389d8:	10c00a15 	stw	r3,40(r2)
811389dc:	e0bff817 	ldw	r2,-32(fp)
811389e0:	e0c00217 	ldw	r3,8(fp)
811389e4:	10c00115 	stw	r3,4(r2)
811389e8:	e0bff817 	ldw	r2,-32(fp)
811389ec:	e0c00317 	ldw	r3,12(fp)
811389f0:	10c00215 	stw	r3,8(r2)
811389f4:	e0bff817 	ldw	r2,-32(fp)
811389f8:	e0fffb0b 	ldhu	r3,-20(fp)
811389fc:	10c0070d 	sth	r3,28(r2)
81138a00:	e0bff817 	ldw	r2,-32(fp)
81138a04:	e0fffc03 	ldbu	r3,-16(fp)
81138a08:	10c00785 	stb	r3,30(r2)
81138a0c:	e0bff817 	ldw	r2,-32(fp)
81138a10:	e0fffd03 	ldbu	r3,-12(fp)
81138a14:	10c007c5 	stb	r3,31(r2)
81138a18:	e0bff817 	ldw	r2,-32(fp)
81138a1c:	e0fffe0b 	ldhu	r3,-8(fp)
81138a20:	10c0080d 	sth	r3,32(r2)
81138a24:	e0bff817 	ldw	r2,-32(fp)
81138a28:	e0ffff0b 	ldhu	r3,-4(fp)
81138a2c:	10c0088d 	sth	r3,34(r2)
81138a30:	e0bff817 	ldw	r2,-32(fp)
81138a34:	1019883a 	mov	r12,r2
81138a38:	001b883a 	mov	r13,zero
81138a3c:	e33ff515 	stw	r12,-44(fp)
81138a40:	e37ff615 	stw	r13,-40(fp)
81138a44:	e0fff517 	ldw	r3,-44(fp)
81138a48:	e0bff817 	ldw	r2,-32(fp)
81138a4c:	10c00315 	stw	r3,12(r2)
81138a50:	e0fff617 	ldw	r3,-40(fp)
81138a54:	e0bff817 	ldw	r2,-32(fp)
81138a58:	10c00b15 	stw	r3,44(r2)
81138a5c:	e0c00417 	ldw	r3,16(fp)
81138a60:	00900034 	movhi	r2,16384
81138a64:	10bfffc4 	addi	r2,r2,-1
81138a68:	1884703a 	and	r2,r3,r2
81138a6c:	10e00034 	orhi	r3,r2,32768
81138a70:	e0bff817 	ldw	r2,-32(fp)
81138a74:	10c00f15 	stw	r3,60(r2)
81138a78:	0005883a 	mov	r2,zero
81138a7c:	e037883a 	mov	sp,fp
81138a80:	df000017 	ldw	fp,0(sp)
81138a84:	dec00104 	addi	sp,sp,4
81138a88:	f800283a 	ret

81138a8c <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
81138a8c:	defff804 	addi	sp,sp,-32
81138a90:	de00012e 	bgeu	sp,et,81138a98 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0xc>
81138a94:	003b68fa 	trap	3
81138a98:	dfc00715 	stw	ra,28(sp)
81138a9c:	df000615 	stw	fp,24(sp)
81138aa0:	df000604 	addi	fp,sp,24
81138aa4:	e13ffc15 	stw	r4,-16(fp)
81138aa8:	e17ffd15 	stw	r5,-12(fp)
81138aac:	e1bffe15 	stw	r6,-8(fp)
81138ab0:	e1ffff15 	stw	r7,-4(fp)
81138ab4:	e0800317 	ldw	r2,12(fp)
81138ab8:	d8800115 	stw	r2,4(sp)
81138abc:	e0800217 	ldw	r2,8(fp)
81138ac0:	d8800015 	stw	r2,0(sp)
81138ac4:	e1ffff17 	ldw	r7,-4(fp)
81138ac8:	e1bffe17 	ldw	r6,-8(fp)
81138acc:	e17ffd17 	ldw	r5,-12(fp)
81138ad0:	e13ffc17 	ldw	r4,-16(fp)
81138ad4:	11388440 	call	81138844 <alt_msgdma_construct_prefetcher_standard_descriptor>
81138ad8:	e037883a 	mov	sp,fp
81138adc:	dfc00117 	ldw	ra,4(sp)
81138ae0:	df000017 	ldw	fp,0(sp)
81138ae4:	dec00204 	addi	sp,sp,8
81138ae8:	f800283a 	ret

81138aec <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
81138aec:	defff804 	addi	sp,sp,-32
81138af0:	de00012e 	bgeu	sp,et,81138af8 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0xc>
81138af4:	003b68fa 	trap	3
81138af8:	dfc00715 	stw	ra,28(sp)
81138afc:	df000615 	stw	fp,24(sp)
81138b00:	df000604 	addi	fp,sp,24
81138b04:	e13ffc15 	stw	r4,-16(fp)
81138b08:	e17ffd15 	stw	r5,-12(fp)
81138b0c:	e1bffe15 	stw	r6,-8(fp)
81138b10:	e1ffff15 	stw	r7,-4(fp)
81138b14:	e0800217 	ldw	r2,8(fp)
81138b18:	d8800115 	stw	r2,4(sp)
81138b1c:	e0bfff17 	ldw	r2,-4(fp)
81138b20:	d8800015 	stw	r2,0(sp)
81138b24:	e1fffe17 	ldw	r7,-8(fp)
81138b28:	000d883a 	mov	r6,zero
81138b2c:	e17ffd17 	ldw	r5,-12(fp)
81138b30:	e13ffc17 	ldw	r4,-16(fp)
81138b34:	11388440 	call	81138844 <alt_msgdma_construct_prefetcher_standard_descriptor>
81138b38:	e037883a 	mov	sp,fp
81138b3c:	dfc00117 	ldw	ra,4(sp)
81138b40:	df000017 	ldw	fp,0(sp)
81138b44:	dec00204 	addi	sp,sp,8
81138b48:	f800283a 	ret

81138b4c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
81138b4c:	defff804 	addi	sp,sp,-32
81138b50:	de00012e 	bgeu	sp,et,81138b58 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0xc>
81138b54:	003b68fa 	trap	3
81138b58:	dfc00715 	stw	ra,28(sp)
81138b5c:	df000615 	stw	fp,24(sp)
81138b60:	df000604 	addi	fp,sp,24
81138b64:	e13ffc15 	stw	r4,-16(fp)
81138b68:	e17ffd15 	stw	r5,-12(fp)
81138b6c:	e1bffe15 	stw	r6,-8(fp)
81138b70:	e1ffff15 	stw	r7,-4(fp)
81138b74:	e0800217 	ldw	r2,8(fp)
81138b78:	d8800115 	stw	r2,4(sp)
81138b7c:	e0bfff17 	ldw	r2,-4(fp)
81138b80:	d8800015 	stw	r2,0(sp)
81138b84:	000f883a 	mov	r7,zero
81138b88:	e1bffe17 	ldw	r6,-8(fp)
81138b8c:	e17ffd17 	ldw	r5,-12(fp)
81138b90:	e13ffc17 	ldw	r4,-16(fp)
81138b94:	11388440 	call	81138844 <alt_msgdma_construct_prefetcher_standard_descriptor>
81138b98:	e037883a 	mov	sp,fp
81138b9c:	dfc00117 	ldw	ra,4(sp)
81138ba0:	df000017 	ldw	fp,0(sp)
81138ba4:	dec00204 	addi	sp,sp,8
81138ba8:	f800283a 	ret

81138bac <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
81138bac:	deffee04 	addi	sp,sp,-72
81138bb0:	de00012e 	bgeu	sp,et,81138bb8 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0xc>
81138bb4:	003b68fa 	trap	3
81138bb8:	dfc01115 	stw	ra,68(sp)
81138bbc:	df001015 	stw	fp,64(sp)
81138bc0:	df001004 	addi	fp,sp,64
81138bc4:	e13ff915 	stw	r4,-28(fp)
81138bc8:	e17ffa15 	stw	r5,-24(fp)
81138bcc:	e1bffb15 	stw	r6,-20(fp)
81138bd0:	e1fffc15 	stw	r7,-16(fp)
81138bd4:	e1000417 	ldw	r4,16(fp)
81138bd8:	e0c00517 	ldw	r3,20(fp)
81138bdc:	e0800617 	ldw	r2,24(fp)
81138be0:	e13ffd0d 	sth	r4,-12(fp)
81138be4:	e0fffe05 	stb	r3,-8(fp)
81138be8:	e0bfff0d 	sth	r2,-4(fp)
81138bec:	e0bffd0b 	ldhu	r2,-12(fp)
81138bf0:	e0fffe03 	ldbu	r3,-8(fp)
81138bf4:	e13fff0b 	ldhu	r4,-4(fp)
81138bf8:	d9000815 	stw	r4,32(sp)
81138bfc:	d8000715 	stw	zero,28(sp)
81138c00:	d8c00615 	stw	r3,24(sp)
81138c04:	d8000515 	stw	zero,20(sp)
81138c08:	d8800415 	stw	r2,16(sp)
81138c0c:	e0800317 	ldw	r2,12(fp)
81138c10:	d8800315 	stw	r2,12(sp)
81138c14:	e0800217 	ldw	r2,8(fp)
81138c18:	d8800215 	stw	r2,8(sp)
81138c1c:	e0bffc17 	ldw	r2,-16(fp)
81138c20:	d8800115 	stw	r2,4(sp)
81138c24:	e0bffb17 	ldw	r2,-20(fp)
81138c28:	d8800015 	stw	r2,0(sp)
81138c2c:	000f883a 	mov	r7,zero
81138c30:	000d883a 	mov	r6,zero
81138c34:	e17ffa17 	ldw	r5,-24(fp)
81138c38:	e13ff917 	ldw	r4,-28(fp)
81138c3c:	11388f00 	call	811388f0 <alt_msgdma_construct_prefetcher_extended_descriptor>
81138c40:	e037883a 	mov	sp,fp
81138c44:	dfc00117 	ldw	ra,4(sp)
81138c48:	df000017 	ldw	fp,0(sp)
81138c4c:	dec00204 	addi	sp,sp,8
81138c50:	f800283a 	ret

81138c54 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
81138c54:	deffee04 	addi	sp,sp,-72
81138c58:	de00012e 	bgeu	sp,et,81138c60 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0xc>
81138c5c:	003b68fa 	trap	3
81138c60:	dfc01115 	stw	ra,68(sp)
81138c64:	df001015 	stw	fp,64(sp)
81138c68:	df001004 	addi	fp,sp,64
81138c6c:	e13ff915 	stw	r4,-28(fp)
81138c70:	e17ffa15 	stw	r5,-24(fp)
81138c74:	e1bffb15 	stw	r6,-20(fp)
81138c78:	e1fffc15 	stw	r7,-16(fp)
81138c7c:	e1000417 	ldw	r4,16(fp)
81138c80:	e0c00517 	ldw	r3,20(fp)
81138c84:	e0800617 	ldw	r2,24(fp)
81138c88:	e13ffd0d 	sth	r4,-12(fp)
81138c8c:	e0fffe05 	stb	r3,-8(fp)
81138c90:	e0bfff0d 	sth	r2,-4(fp)
81138c94:	e0bffd0b 	ldhu	r2,-12(fp)
81138c98:	e0fffe03 	ldbu	r3,-8(fp)
81138c9c:	e13fff0b 	ldhu	r4,-4(fp)
81138ca0:	d8000815 	stw	zero,32(sp)
81138ca4:	d9000715 	stw	r4,28(sp)
81138ca8:	d8000615 	stw	zero,24(sp)
81138cac:	d8c00515 	stw	r3,20(sp)
81138cb0:	d8800415 	stw	r2,16(sp)
81138cb4:	e0800317 	ldw	r2,12(fp)
81138cb8:	d8800315 	stw	r2,12(sp)
81138cbc:	e0800217 	ldw	r2,8(fp)
81138cc0:	d8800215 	stw	r2,8(sp)
81138cc4:	d8000115 	stw	zero,4(sp)
81138cc8:	d8000015 	stw	zero,0(sp)
81138ccc:	e1fffc17 	ldw	r7,-16(fp)
81138cd0:	e1bffb17 	ldw	r6,-20(fp)
81138cd4:	e17ffa17 	ldw	r5,-24(fp)
81138cd8:	e13ff917 	ldw	r4,-28(fp)
81138cdc:	11388f00 	call	811388f0 <alt_msgdma_construct_prefetcher_extended_descriptor>
81138ce0:	e037883a 	mov	sp,fp
81138ce4:	dfc00117 	ldw	ra,4(sp)
81138ce8:	df000017 	ldw	fp,0(sp)
81138cec:	dec00204 	addi	sp,sp,8
81138cf0:	f800283a 	ret

81138cf4 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
81138cf4:	deffec04 	addi	sp,sp,-80
81138cf8:	de00012e 	bgeu	sp,et,81138d00 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xc>
81138cfc:	003b68fa 	trap	3
81138d00:	dfc01315 	stw	ra,76(sp)
81138d04:	df001215 	stw	fp,72(sp)
81138d08:	df001204 	addi	fp,sp,72
81138d0c:	e13ff715 	stw	r4,-36(fp)
81138d10:	e17ff815 	stw	r5,-32(fp)
81138d14:	e1bff915 	stw	r6,-28(fp)
81138d18:	e1fffa15 	stw	r7,-24(fp)
81138d1c:	e1800617 	ldw	r6,24(fp)
81138d20:	e1400717 	ldw	r5,28(fp)
81138d24:	e1000817 	ldw	r4,32(fp)
81138d28:	e0c00917 	ldw	r3,36(fp)
81138d2c:	e0800a17 	ldw	r2,40(fp)
81138d30:	e1bffb0d 	sth	r6,-20(fp)
81138d34:	e17ffc05 	stb	r5,-16(fp)
81138d38:	e13ffd05 	stb	r4,-12(fp)
81138d3c:	e0fffe0d 	sth	r3,-8(fp)
81138d40:	e0bfff0d 	sth	r2,-4(fp)
81138d44:	e0bffb0b 	ldhu	r2,-20(fp)
81138d48:	e0fffc03 	ldbu	r3,-16(fp)
81138d4c:	e13ffd03 	ldbu	r4,-12(fp)
81138d50:	e17ffe0b 	ldhu	r5,-8(fp)
81138d54:	e1bfff0b 	ldhu	r6,-4(fp)
81138d58:	d9800815 	stw	r6,32(sp)
81138d5c:	d9400715 	stw	r5,28(sp)
81138d60:	d9000615 	stw	r4,24(sp)
81138d64:	d8c00515 	stw	r3,20(sp)
81138d68:	d8800415 	stw	r2,16(sp)
81138d6c:	e0800517 	ldw	r2,20(fp)
81138d70:	d8800315 	stw	r2,12(sp)
81138d74:	e0800417 	ldw	r2,16(fp)
81138d78:	d8800215 	stw	r2,8(sp)
81138d7c:	e0800317 	ldw	r2,12(fp)
81138d80:	d8800115 	stw	r2,4(sp)
81138d84:	e0800217 	ldw	r2,8(fp)
81138d88:	d8800015 	stw	r2,0(sp)
81138d8c:	e1fffa17 	ldw	r7,-24(fp)
81138d90:	e1bff917 	ldw	r6,-28(fp)
81138d94:	e17ff817 	ldw	r5,-32(fp)
81138d98:	e13ff717 	ldw	r4,-36(fp)
81138d9c:	11388f00 	call	811388f0 <alt_msgdma_construct_prefetcher_extended_descriptor>
81138da0:	e037883a 	mov	sp,fp
81138da4:	dfc00117 	ldw	ra,4(sp)
81138da8:	df000017 	ldw	fp,0(sp)
81138dac:	dec00204 	addi	sp,sp,8
81138db0:	f800283a 	ret

81138db4 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
81138db4:	defffc04 	addi	sp,sp,-16
81138db8:	de00012e 	bgeu	sp,et,81138dc0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xc>
81138dbc:	003b68fa 	trap	3
81138dc0:	df000315 	stw	fp,12(sp)
81138dc4:	df000304 	addi	fp,sp,12
81138dc8:	e13ffe15 	stw	r4,-8(fp)
81138dcc:	e17fff15 	stw	r5,-4(fp)
81138dd0:	e0bfff17 	ldw	r2,-4(fp)
81138dd4:	1000021e 	bne	r2,zero,81138de0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
81138dd8:	00bffa84 	movi	r2,-22
81138ddc:	00002f06 	br	81138e9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
81138de0:	e0bfff17 	ldw	r2,-4(fp)
81138de4:	10c00317 	ldw	r3,12(r2)
81138de8:	e0bfff17 	ldw	r2,-4(fp)
81138dec:	18800226 	beq	r3,r2,81138df8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x44>
81138df0:	00bffa84 	movi	r2,-22
81138df4:	00002906 	br	81138e9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
81138df8:	e0bffe17 	ldw	r2,-8(fp)
81138dfc:	10800017 	ldw	r2,0(r2)
81138e00:	1000051e 	bne	r2,zero,81138e18 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x64>
81138e04:	e0bffe17 	ldw	r2,-8(fp)
81138e08:	e0ffff17 	ldw	r3,-4(fp)
81138e0c:	10c00015 	stw	r3,0(r2)
81138e10:	0005883a 	mov	r2,zero
81138e14:	00002106 	br	81138e9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
81138e18:	e0bffe17 	ldw	r2,-8(fp)
81138e1c:	10c00017 	ldw	r3,0(r2)
81138e20:	e0bfff17 	ldw	r2,-4(fp)
81138e24:	1880021e 	bne	r3,r2,81138e30 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x7c>
81138e28:	00bffa84 	movi	r2,-22
81138e2c:	00001b06 	br	81138e9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
81138e30:	e0bffe17 	ldw	r2,-8(fp)
81138e34:	10800017 	ldw	r2,0(r2)
81138e38:	e0bffd15 	stw	r2,-12(fp)
81138e3c:	00000906 	br	81138e64 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xb0>
81138e40:	e0bffd17 	ldw	r2,-12(fp)
81138e44:	10c00317 	ldw	r3,12(r2)
81138e48:	e0bfff17 	ldw	r2,-4(fp)
81138e4c:	1880021e 	bne	r3,r2,81138e58 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa4>
81138e50:	00bffa84 	movi	r2,-22
81138e54:	00001106 	br	81138e9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
81138e58:	e0bffd17 	ldw	r2,-12(fp)
81138e5c:	10800317 	ldw	r2,12(r2)
81138e60:	e0bffd15 	stw	r2,-12(fp)
81138e64:	e0bffd17 	ldw	r2,-12(fp)
81138e68:	10800317 	ldw	r2,12(r2)
81138e6c:	e0fffe17 	ldw	r3,-8(fp)
81138e70:	18c00017 	ldw	r3,0(r3)
81138e74:	10fff21e 	bne	r2,r3,81138e40 <__reset+0xfb118e40>
81138e78:	e0ffff17 	ldw	r3,-4(fp)
81138e7c:	e0bffd17 	ldw	r2,-12(fp)
81138e80:	10c00315 	stw	r3,12(r2)
81138e84:	e0bffe17 	ldw	r2,-8(fp)
81138e88:	10800017 	ldw	r2,0(r2)
81138e8c:	1007883a 	mov	r3,r2
81138e90:	e0bfff17 	ldw	r2,-4(fp)
81138e94:	10c00315 	stw	r3,12(r2)
81138e98:	0005883a 	mov	r2,zero
81138e9c:	e037883a 	mov	sp,fp
81138ea0:	df000017 	ldw	fp,0(sp)
81138ea4:	dec00104 	addi	sp,sp,4
81138ea8:	f800283a 	ret

81138eac <alt_msgdma_prefetcher_add_extended_desc_to_list>:
81138eac:	defff804 	addi	sp,sp,-32
81138eb0:	de00012e 	bgeu	sp,et,81138eb8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
81138eb4:	003b68fa 	trap	3
81138eb8:	df000715 	stw	fp,28(sp)
81138ebc:	df000704 	addi	fp,sp,28
81138ec0:	e13ffe15 	stw	r4,-8(fp)
81138ec4:	e17fff15 	stw	r5,-4(fp)
81138ec8:	e13fff17 	ldw	r4,-4(fp)
81138ecc:	2000021e 	bne	r4,zero,81138ed8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x2c>
81138ed0:	00bffa84 	movi	r2,-22
81138ed4:	00005906 	br	8113903c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
81138ed8:	e13fff17 	ldw	r4,-4(fp)
81138edc:	2015883a 	mov	r10,r4
81138ee0:	0017883a 	mov	r11,zero
81138ee4:	e2bffc15 	stw	r10,-16(fp)
81138ee8:	e2fffd15 	stw	r11,-12(fp)
81138eec:	e13fff17 	ldw	r4,-4(fp)
81138ef0:	21400317 	ldw	r5,12(r4)
81138ef4:	e13ffc17 	ldw	r4,-16(fp)
81138ef8:	29000626 	beq	r5,r4,81138f14 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
81138efc:	e13fff17 	ldw	r4,-4(fp)
81138f00:	21400b17 	ldw	r5,44(r4)
81138f04:	e13ffd17 	ldw	r4,-12(fp)
81138f08:	29000226 	beq	r5,r4,81138f14 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
81138f0c:	00bffa84 	movi	r2,-22
81138f10:	00004a06 	br	8113903c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
81138f14:	e13ffe17 	ldw	r4,-8(fp)
81138f18:	21000017 	ldw	r4,0(r4)
81138f1c:	2000051e 	bne	r4,zero,81138f34 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x88>
81138f20:	e0bffe17 	ldw	r2,-8(fp)
81138f24:	e0ffff17 	ldw	r3,-4(fp)
81138f28:	10c00015 	stw	r3,0(r2)
81138f2c:	0005883a 	mov	r2,zero
81138f30:	00004206 	br	8113903c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
81138f34:	e13ffe17 	ldw	r4,-8(fp)
81138f38:	21400017 	ldw	r5,0(r4)
81138f3c:	e13fff17 	ldw	r4,-4(fp)
81138f40:	2900021e 	bne	r5,r4,81138f4c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xa0>
81138f44:	00bffa84 	movi	r2,-22
81138f48:	00003c06 	br	8113903c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
81138f4c:	e13ffe17 	ldw	r4,-8(fp)
81138f50:	21000017 	ldw	r4,0(r4)
81138f54:	e13ff915 	stw	r4,-28(fp)
81138f58:	e13ffe17 	ldw	r4,-8(fp)
81138f5c:	21000017 	ldw	r4,0(r4)
81138f60:	2011883a 	mov	r8,r4
81138f64:	0013883a 	mov	r9,zero
81138f68:	e23ffa15 	stw	r8,-24(fp)
81138f6c:	e27ffb15 	stw	r9,-20(fp)
81138f70:	00001806 	br	81138fd4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x128>
81138f74:	e13fff17 	ldw	r4,-4(fp)
81138f78:	200d883a 	mov	r6,r4
81138f7c:	000f883a 	mov	r7,zero
81138f80:	e1bffc15 	stw	r6,-16(fp)
81138f84:	e1fffd15 	stw	r7,-12(fp)
81138f88:	e13ff917 	ldw	r4,-28(fp)
81138f8c:	21400317 	ldw	r5,12(r4)
81138f90:	e13ffc17 	ldw	r4,-16(fp)
81138f94:	2900061e 	bne	r5,r4,81138fb0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
81138f98:	e13ff917 	ldw	r4,-28(fp)
81138f9c:	21400b17 	ldw	r5,44(r4)
81138fa0:	e13ffd17 	ldw	r4,-12(fp)
81138fa4:	2900021e 	bne	r5,r4,81138fb0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
81138fa8:	00bffa84 	movi	r2,-22
81138fac:	00002306 	br	8113903c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
81138fb0:	e13ff917 	ldw	r4,-28(fp)
81138fb4:	21000317 	ldw	r4,12(r4)
81138fb8:	e13ffc15 	stw	r4,-16(fp)
81138fbc:	e13ff917 	ldw	r4,-28(fp)
81138fc0:	21000b17 	ldw	r4,44(r4)
81138fc4:	e13ffd15 	stw	r4,-12(fp)
81138fc8:	e13ffc17 	ldw	r4,-16(fp)
81138fcc:	e17ffd17 	ldw	r5,-12(fp)
81138fd0:	e13ff915 	stw	r4,-28(fp)
81138fd4:	e13ff917 	ldw	r4,-28(fp)
81138fd8:	21400317 	ldw	r5,12(r4)
81138fdc:	e13ffa17 	ldw	r4,-24(fp)
81138fe0:	29000426 	beq	r5,r4,81138ff4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x148>
81138fe4:	e13ff917 	ldw	r4,-28(fp)
81138fe8:	21400b17 	ldw	r5,44(r4)
81138fec:	e13ffb17 	ldw	r4,-20(fp)
81138ff0:	293fe01e 	bne	r5,r4,81138f74 <__reset+0xfb118f74>
81138ff4:	e13fff17 	ldw	r4,-4(fp)
81138ff8:	2005883a 	mov	r2,r4
81138ffc:	0007883a 	mov	r3,zero
81139000:	e0bffc15 	stw	r2,-16(fp)
81139004:	e0fffd15 	stw	r3,-12(fp)
81139008:	e0fffc17 	ldw	r3,-16(fp)
8113900c:	e0bff917 	ldw	r2,-28(fp)
81139010:	10c00315 	stw	r3,12(r2)
81139014:	e0fffd17 	ldw	r3,-12(fp)
81139018:	e0bff917 	ldw	r2,-28(fp)
8113901c:	10c00b15 	stw	r3,44(r2)
81139020:	e0fffa17 	ldw	r3,-24(fp)
81139024:	e0bfff17 	ldw	r2,-4(fp)
81139028:	10c00315 	stw	r3,12(r2)
8113902c:	e0fffb17 	ldw	r3,-20(fp)
81139030:	e0bfff17 	ldw	r2,-4(fp)
81139034:	10c00b15 	stw	r3,44(r2)
81139038:	0005883a 	mov	r2,zero
8113903c:	e037883a 	mov	sp,fp
81139040:	df000017 	ldw	fp,0(sp)
81139044:	dec00104 	addi	sp,sp,4
81139048:	f800283a 	ret

8113904c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
8113904c:	defffc04 	addi	sp,sp,-16
81139050:	de00012e 	bgeu	sp,et,81139058 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
81139054:	003b68fa 	trap	3
81139058:	df000315 	stw	fp,12(sp)
8113905c:	df000304 	addi	fp,sp,12
81139060:	e13fff15 	stw	r4,-4(fp)
81139064:	e03ffe15 	stw	zero,-8(fp)
81139068:	e0bfff17 	ldw	r2,-4(fp)
8113906c:	1000021e 	bne	r2,zero,81139078 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x2c>
81139070:	00bffa84 	movi	r2,-22
81139074:	00001906 	br	811390dc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x90>
81139078:	e0bfff17 	ldw	r2,-4(fp)
8113907c:	e0bffd15 	stw	r2,-12(fp)
81139080:	00000a06 	br	811390ac <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x60>
81139084:	e0bffd17 	ldw	r2,-12(fp)
81139088:	10800717 	ldw	r2,28(r2)
8113908c:	e0bffe15 	stw	r2,-8(fp)
81139090:	e0bffe17 	ldw	r2,-8(fp)
81139094:	10d00034 	orhi	r3,r2,16384
81139098:	e0bffd17 	ldw	r2,-12(fp)
8113909c:	10c00715 	stw	r3,28(r2)
811390a0:	e0bffd17 	ldw	r2,-12(fp)
811390a4:	10800317 	ldw	r2,12(r2)
811390a8:	e0bffd15 	stw	r2,-12(fp)
811390ac:	e0bffd17 	ldw	r2,-12(fp)
811390b0:	10c00317 	ldw	r3,12(r2)
811390b4:	e0bfff17 	ldw	r2,-4(fp)
811390b8:	18bff21e 	bne	r3,r2,81139084 <__reset+0xfb119084>
811390bc:	e0bffd17 	ldw	r2,-12(fp)
811390c0:	10800717 	ldw	r2,28(r2)
811390c4:	e0bffe15 	stw	r2,-8(fp)
811390c8:	e0bffe17 	ldw	r2,-8(fp)
811390cc:	10d00034 	orhi	r3,r2,16384
811390d0:	e0bffd17 	ldw	r2,-12(fp)
811390d4:	10c00715 	stw	r3,28(r2)
811390d8:	0005883a 	mov	r2,zero
811390dc:	e037883a 	mov	sp,fp
811390e0:	df000017 	ldw	fp,0(sp)
811390e4:	dec00104 	addi	sp,sp,4
811390e8:	f800283a 	ret

811390ec <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
811390ec:	defff804 	addi	sp,sp,-32
811390f0:	de00012e 	bgeu	sp,et,811390f8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
811390f4:	003b68fa 	trap	3
811390f8:	df000715 	stw	fp,28(sp)
811390fc:	df000704 	addi	fp,sp,28
81139100:	e13fff15 	stw	r4,-4(fp)
81139104:	e03ffa15 	stw	zero,-24(fp)
81139108:	e13fff17 	ldw	r4,-4(fp)
8113910c:	2000021e 	bne	r4,zero,81139118 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x2c>
81139110:	00bffa84 	movi	r2,-22
81139114:	00002806 	br	811391b8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xcc>
81139118:	e13fff17 	ldw	r4,-4(fp)
8113911c:	e13ff915 	stw	r4,-28(fp)
81139120:	e13fff17 	ldw	r4,-4(fp)
81139124:	2005883a 	mov	r2,r4
81139128:	0007883a 	mov	r3,zero
8113912c:	e0bffb15 	stw	r2,-20(fp)
81139130:	e0fffc15 	stw	r3,-16(fp)
81139134:	00001006 	br	81139178 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
81139138:	e0bff917 	ldw	r2,-28(fp)
8113913c:	10800f17 	ldw	r2,60(r2)
81139140:	e0bffa15 	stw	r2,-24(fp)
81139144:	e0bffa17 	ldw	r2,-24(fp)
81139148:	10d00034 	orhi	r3,r2,16384
8113914c:	e0bff917 	ldw	r2,-28(fp)
81139150:	10c00f15 	stw	r3,60(r2)
81139154:	e0bff917 	ldw	r2,-28(fp)
81139158:	10800317 	ldw	r2,12(r2)
8113915c:	e0bffd15 	stw	r2,-12(fp)
81139160:	e0bff917 	ldw	r2,-28(fp)
81139164:	10800b17 	ldw	r2,44(r2)
81139168:	e0bffe15 	stw	r2,-8(fp)
8113916c:	e0bffd17 	ldw	r2,-12(fp)
81139170:	e0fffe17 	ldw	r3,-8(fp)
81139174:	e0bff915 	stw	r2,-28(fp)
81139178:	e0bff917 	ldw	r2,-28(fp)
8113917c:	10c00317 	ldw	r3,12(r2)
81139180:	e0bffb17 	ldw	r2,-20(fp)
81139184:	18800426 	beq	r3,r2,81139198 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
81139188:	e0bff917 	ldw	r2,-28(fp)
8113918c:	10c00b17 	ldw	r3,44(r2)
81139190:	e0bffc17 	ldw	r2,-16(fp)
81139194:	18bfe81e 	bne	r3,r2,81139138 <__reset+0xfb119138>
81139198:	e0bff917 	ldw	r2,-28(fp)
8113919c:	10800f17 	ldw	r2,60(r2)
811391a0:	e0bffa15 	stw	r2,-24(fp)
811391a4:	e0bffa17 	ldw	r2,-24(fp)
811391a8:	10d00034 	orhi	r3,r2,16384
811391ac:	e0bff917 	ldw	r2,-28(fp)
811391b0:	10c00f15 	stw	r3,60(r2)
811391b4:	0005883a 	mov	r2,zero
811391b8:	e037883a 	mov	sp,fp
811391bc:	df000017 	ldw	fp,0(sp)
811391c0:	dec00104 	addi	sp,sp,4
811391c4:	f800283a 	ret

811391c8 <alt_msgdma_start_prefetcher_with_list_addr>:
811391c8:	deffeb04 	addi	sp,sp,-84
811391cc:	de00012e 	bgeu	sp,et,811391d4 <alt_msgdma_start_prefetcher_with_list_addr+0xc>
811391d0:	003b68fa 	trap	3
811391d4:	dfc01415 	stw	ra,80(sp)
811391d8:	df001315 	stw	fp,76(sp)
811391dc:	df001304 	addi	fp,sp,76
811391e0:	e13ffb15 	stw	r4,-20(fp)
811391e4:	e17ffc15 	stw	r5,-16(fp)
811391e8:	e1bffd15 	stw	r6,-12(fp)
811391ec:	3807883a 	mov	r3,r7
811391f0:	e0800217 	ldw	r2,8(fp)
811391f4:	e0fffe05 	stb	r3,-8(fp)
811391f8:	e0bfff05 	stb	r2,-4(fp)
811391fc:	e03fed15 	stw	zero,-76(fp)
81139200:	e03fee15 	stw	zero,-72(fp)
81139204:	e03fef15 	stw	zero,-68(fp)
81139208:	e0bffc17 	ldw	r2,-16(fp)
8113920c:	e0bff815 	stw	r2,-32(fp)
81139210:	e0bffd17 	ldw	r2,-12(fp)
81139214:	e0bff915 	stw	r2,-28(fp)
81139218:	e0bffb17 	ldw	r2,-20(fp)
8113921c:	10801817 	ldw	r2,96(r2)
81139220:	e0bff615 	stw	r2,-40(fp)
81139224:	e03ff70d 	sth	zero,-36(fp)
81139228:	e0bff70b 	ldhu	r2,-36(fp)
8113922c:	e0fffa04 	addi	r3,fp,-24
81139230:	180d883a 	mov	r6,r3
81139234:	100b883a 	mov	r5,r2
81139238:	e13ff617 	ldw	r4,-40(fp)
8113923c:	112e4080 	call	8112e408 <OSSemPend>
81139240:	e0bffb17 	ldw	r2,-20(fp)
81139244:	10800617 	ldw	r2,24(r2)
81139248:	10800037 	ldwio	r2,0(r2)
8113924c:	e0bfed15 	stw	r2,-76(fp)
81139250:	e0bfed17 	ldw	r2,-76(fp)
81139254:	1080004c 	andi	r2,r2,1
81139258:	10000626 	beq	r2,zero,81139274 <alt_msgdma_start_prefetcher_with_list_addr+0xac>
8113925c:	e0bffb17 	ldw	r2,-20(fp)
81139260:	10801817 	ldw	r2,96(r2)
81139264:	1009883a 	mov	r4,r2
81139268:	112e7900 	call	8112e790 <OSSemPost>
8113926c:	00bffc04 	movi	r2,-16
81139270:	00009606 	br	811394cc <alt_msgdma_start_prefetcher_with_list_addr+0x304>
81139274:	00800804 	movi	r2,32
81139278:	e0bfee15 	stw	r2,-72(fp)
8113927c:	0005303a 	rdctl	r2,status
81139280:	e0bff215 	stw	r2,-56(fp)
81139284:	e0fff217 	ldw	r3,-56(fp)
81139288:	00bfff84 	movi	r2,-2
8113928c:	1884703a 	and	r2,r3,r2
81139290:	1001703a 	wrctl	status,r2
81139294:	e0bff217 	ldw	r2,-56(fp)
81139298:	e0bfef15 	stw	r2,-68(fp)
8113929c:	e0bffb17 	ldw	r2,-20(fp)
811392a0:	10800317 	ldw	r2,12(r2)
811392a4:	10800104 	addi	r2,r2,4
811392a8:	e0ffee17 	ldw	r3,-72(fp)
811392ac:	10c00035 	stwio	r3,0(r2)
811392b0:	e0bffb17 	ldw	r2,-20(fp)
811392b4:	10800317 	ldw	r2,12(r2)
811392b8:	e0fffb17 	ldw	r3,-20(fp)
811392bc:	18c00317 	ldw	r3,12(r3)
811392c0:	18c00037 	ldwio	r3,0(r3)
811392c4:	10c00035 	stwio	r3,0(r2)
811392c8:	e0bfef17 	ldw	r2,-68(fp)
811392cc:	e0bff015 	stw	r2,-64(fp)
811392d0:	e0bff017 	ldw	r2,-64(fp)
811392d4:	1001703a 	wrctl	status,r2
811392d8:	e0bffb17 	ldw	r2,-20(fp)
811392dc:	10800b17 	ldw	r2,44(r2)
811392e0:	10002326 	beq	r2,zero,81139370 <alt_msgdma_start_prefetcher_with_list_addr+0x1a8>
811392e4:	e0bffb17 	ldw	r2,-20(fp)
811392e8:	10c00d17 	ldw	r3,52(r2)
811392ec:	e0bfee17 	ldw	r2,-72(fp)
811392f0:	1884b03a 	or	r2,r3,r2
811392f4:	10800514 	ori	r2,r2,20
811392f8:	e0bfee15 	stw	r2,-72(fp)
811392fc:	e0ffee17 	ldw	r3,-72(fp)
81139300:	00bff7c4 	movi	r2,-33
81139304:	1884703a 	and	r2,r3,r2
81139308:	e0bfee15 	stw	r2,-72(fp)
8113930c:	e0bfed17 	ldw	r2,-76(fp)
81139310:	10800214 	ori	r2,r2,8
81139314:	e0bfed15 	stw	r2,-76(fp)
81139318:	0005303a 	rdctl	r2,status
8113931c:	e0bff415 	stw	r2,-48(fp)
81139320:	e0fff417 	ldw	r3,-48(fp)
81139324:	00bfff84 	movi	r2,-2
81139328:	1884703a 	and	r2,r3,r2
8113932c:	1001703a 	wrctl	status,r2
81139330:	e0bff417 	ldw	r2,-48(fp)
81139334:	e0bfef15 	stw	r2,-68(fp)
81139338:	e0bffb17 	ldw	r2,-20(fp)
8113933c:	10800317 	ldw	r2,12(r2)
81139340:	10800104 	addi	r2,r2,4
81139344:	e0ffee17 	ldw	r3,-72(fp)
81139348:	10c00035 	stwio	r3,0(r2)
8113934c:	e0bffb17 	ldw	r2,-20(fp)
81139350:	10800617 	ldw	r2,24(r2)
81139354:	e0ffed17 	ldw	r3,-76(fp)
81139358:	10c00035 	stwio	r3,0(r2)
8113935c:	e0bfef17 	ldw	r2,-68(fp)
81139360:	e0bff115 	stw	r2,-60(fp)
81139364:	e0bff117 	ldw	r2,-60(fp)
81139368:	1001703a 	wrctl	status,r2
8113936c:	00002306 	br	811393fc <alt_msgdma_start_prefetcher_with_list_addr+0x234>
81139370:	e0bffb17 	ldw	r2,-20(fp)
81139374:	10c00d17 	ldw	r3,52(r2)
81139378:	e0bfee17 	ldw	r2,-72(fp)
8113937c:	1884b03a 	or	r2,r3,r2
81139380:	10800114 	ori	r2,r2,4
81139384:	e0bfee15 	stw	r2,-72(fp)
81139388:	e0ffee17 	ldw	r3,-72(fp)
8113938c:	00bff3c4 	movi	r2,-49
81139390:	1884703a 	and	r2,r3,r2
81139394:	e0bfee15 	stw	r2,-72(fp)
81139398:	e0ffed17 	ldw	r3,-76(fp)
8113939c:	00bffdc4 	movi	r2,-9
811393a0:	1884703a 	and	r2,r3,r2
811393a4:	e0bfed15 	stw	r2,-76(fp)
811393a8:	0005303a 	rdctl	r2,status
811393ac:	e0bff515 	stw	r2,-44(fp)
811393b0:	e0fff517 	ldw	r3,-44(fp)
811393b4:	00bfff84 	movi	r2,-2
811393b8:	1884703a 	and	r2,r3,r2
811393bc:	1001703a 	wrctl	status,r2
811393c0:	e0bff517 	ldw	r2,-44(fp)
811393c4:	e0bfef15 	stw	r2,-68(fp)
811393c8:	e0bffb17 	ldw	r2,-20(fp)
811393cc:	10800317 	ldw	r2,12(r2)
811393d0:	10800104 	addi	r2,r2,4
811393d4:	e0ffee17 	ldw	r3,-72(fp)
811393d8:	10c00035 	stwio	r3,0(r2)
811393dc:	e0bffb17 	ldw	r2,-20(fp)
811393e0:	10800617 	ldw	r2,24(r2)
811393e4:	e0ffed17 	ldw	r3,-76(fp)
811393e8:	10c00035 	stwio	r3,0(r2)
811393ec:	e0bfef17 	ldw	r2,-68(fp)
811393f0:	e0bff315 	stw	r2,-52(fp)
811393f4:	e0bff317 	ldw	r2,-52(fp)
811393f8:	1001703a 	wrctl	status,r2
811393fc:	e0bffb17 	ldw	r2,-20(fp)
81139400:	10800617 	ldw	r2,24(r2)
81139404:	10800104 	addi	r2,r2,4
81139408:	e0fff817 	ldw	r3,-32(fp)
8113940c:	10c00035 	stwio	r3,0(r2)
81139410:	e0bffb17 	ldw	r2,-20(fp)
81139414:	10800617 	ldw	r2,24(r2)
81139418:	10800204 	addi	r2,r2,8
8113941c:	e0fff917 	ldw	r3,-28(fp)
81139420:	10c00035 	stwio	r3,0(r2)
81139424:	e0bffe03 	ldbu	r2,-8(fp)
81139428:	10000426 	beq	r2,zero,8113943c <alt_msgdma_start_prefetcher_with_list_addr+0x274>
8113942c:	e0bfed17 	ldw	r2,-76(fp)
81139430:	10800414 	ori	r2,r2,16
81139434:	e0bfed15 	stw	r2,-76(fp)
81139438:	00000406 	br	8113944c <alt_msgdma_start_prefetcher_with_list_addr+0x284>
8113943c:	e0ffed17 	ldw	r3,-76(fp)
81139440:	00bffbc4 	movi	r2,-17
81139444:	1884703a 	and	r2,r3,r2
81139448:	e0bfed15 	stw	r2,-76(fp)
8113944c:	e0bfff03 	ldbu	r2,-4(fp)
81139450:	10000e26 	beq	r2,zero,8113948c <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
81139454:	e0bfed17 	ldw	r2,-76(fp)
81139458:	10800094 	ori	r2,r2,2
8113945c:	e0bfed15 	stw	r2,-76(fp)
81139460:	e0bffb17 	ldw	r2,-20(fp)
81139464:	10800617 	ldw	r2,24(r2)
81139468:	10800304 	addi	r2,r2,12
8113946c:	10800037 	ldwio	r2,0(r2)
81139470:	10000a1e 	bne	r2,zero,8113949c <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
81139474:	e0bffb17 	ldw	r2,-20(fp)
81139478:	10800617 	ldw	r2,24(r2)
8113947c:	10800304 	addi	r2,r2,12
81139480:	00c03fc4 	movi	r3,255
81139484:	10c00035 	stwio	r3,0(r2)
81139488:	00000406 	br	8113949c <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
8113948c:	e0ffed17 	ldw	r3,-76(fp)
81139490:	00bfff44 	movi	r2,-3
81139494:	1884703a 	and	r2,r3,r2
81139498:	e0bfed15 	stw	r2,-76(fp)
8113949c:	e0bfed17 	ldw	r2,-76(fp)
811394a0:	10800054 	ori	r2,r2,1
811394a4:	e0bfed15 	stw	r2,-76(fp)
811394a8:	e0bffb17 	ldw	r2,-20(fp)
811394ac:	10800617 	ldw	r2,24(r2)
811394b0:	e0ffed17 	ldw	r3,-76(fp)
811394b4:	10c00035 	stwio	r3,0(r2)
811394b8:	e0bffb17 	ldw	r2,-20(fp)
811394bc:	10801817 	ldw	r2,96(r2)
811394c0:	1009883a 	mov	r4,r2
811394c4:	112e7900 	call	8112e790 <OSSemPost>
811394c8:	0005883a 	mov	r2,zero
811394cc:	e037883a 	mov	sp,fp
811394d0:	dfc00117 	ldw	ra,4(sp)
811394d4:	df000017 	ldw	fp,0(sp)
811394d8:	dec00204 	addi	sp,sp,8
811394dc:	f800283a 	ret

811394e0 <alt_msgdma_start_prefetcher_with_std_desc_list>:
811394e0:	defff704 	addi	sp,sp,-36
811394e4:	de00012e 	bgeu	sp,et,811394ec <alt_msgdma_start_prefetcher_with_std_desc_list+0xc>
811394e8:	003b68fa 	trap	3
811394ec:	dfc00815 	stw	ra,32(sp)
811394f0:	df000715 	stw	fp,28(sp)
811394f4:	dc400615 	stw	r17,24(sp)
811394f8:	dc000515 	stw	r16,20(sp)
811394fc:	df000704 	addi	fp,sp,28
81139500:	e13ffa15 	stw	r4,-24(fp)
81139504:	e17ffb15 	stw	r5,-20(fp)
81139508:	3007883a 	mov	r3,r6
8113950c:	3805883a 	mov	r2,r7
81139510:	e0fffc05 	stb	r3,-16(fp)
81139514:	e0bffd05 	stb	r2,-12(fp)
81139518:	e13ffb17 	ldw	r4,-20(fp)
8113951c:	113904c0 	call	8113904c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
81139520:	10000226 	beq	r2,zero,8113952c <alt_msgdma_start_prefetcher_with_std_desc_list+0x4c>
81139524:	00bffa84 	movi	r2,-22
81139528:	00000b06 	br	81139558 <alt_msgdma_start_prefetcher_with_std_desc_list+0x78>
8113952c:	e0bffb17 	ldw	r2,-20(fp)
81139530:	1021883a 	mov	r16,r2
81139534:	0023883a 	mov	r17,zero
81139538:	e0fffc03 	ldbu	r3,-16(fp)
8113953c:	e0bffd03 	ldbu	r2,-12(fp)
81139540:	d8800015 	stw	r2,0(sp)
81139544:	180f883a 	mov	r7,r3
81139548:	800b883a 	mov	r5,r16
8113954c:	880d883a 	mov	r6,r17
81139550:	e13ffa17 	ldw	r4,-24(fp)
81139554:	11391c80 	call	811391c8 <alt_msgdma_start_prefetcher_with_list_addr>
81139558:	e6fffe04 	addi	sp,fp,-8
8113955c:	dfc00317 	ldw	ra,12(sp)
81139560:	df000217 	ldw	fp,8(sp)
81139564:	dc400117 	ldw	r17,4(sp)
81139568:	dc000017 	ldw	r16,0(sp)
8113956c:	dec00404 	addi	sp,sp,16
81139570:	f800283a 	ret

81139574 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
81139574:	defff704 	addi	sp,sp,-36
81139578:	de00012e 	bgeu	sp,et,81139580 <alt_msgdma_start_prefetcher_with_extd_desc_list+0xc>
8113957c:	003b68fa 	trap	3
81139580:	dfc00815 	stw	ra,32(sp)
81139584:	df000715 	stw	fp,28(sp)
81139588:	dc400615 	stw	r17,24(sp)
8113958c:	dc000515 	stw	r16,20(sp)
81139590:	df000704 	addi	fp,sp,28
81139594:	e13ffa15 	stw	r4,-24(fp)
81139598:	e17ffb15 	stw	r5,-20(fp)
8113959c:	3007883a 	mov	r3,r6
811395a0:	3805883a 	mov	r2,r7
811395a4:	e0fffc05 	stb	r3,-16(fp)
811395a8:	e0bffd05 	stb	r2,-12(fp)
811395ac:	e13ffb17 	ldw	r4,-20(fp)
811395b0:	11390ec0 	call	811390ec <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
811395b4:	10000226 	beq	r2,zero,811395c0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
811395b8:	00bffa84 	movi	r2,-22
811395bc:	00000b06 	br	811395ec <alt_msgdma_start_prefetcher_with_extd_desc_list+0x78>
811395c0:	e0bffb17 	ldw	r2,-20(fp)
811395c4:	1021883a 	mov	r16,r2
811395c8:	0023883a 	mov	r17,zero
811395cc:	e0fffc03 	ldbu	r3,-16(fp)
811395d0:	e0bffd03 	ldbu	r2,-12(fp)
811395d4:	d8800015 	stw	r2,0(sp)
811395d8:	180f883a 	mov	r7,r3
811395dc:	800b883a 	mov	r5,r16
811395e0:	880d883a 	mov	r6,r17
811395e4:	e13ffa17 	ldw	r4,-24(fp)
811395e8:	11391c80 	call	811391c8 <alt_msgdma_start_prefetcher_with_list_addr>
811395ec:	e6fffe04 	addi	sp,fp,-8
811395f0:	dfc00317 	ldw	ra,12(sp)
811395f4:	df000217 	ldw	fp,8(sp)
811395f8:	dc400117 	ldw	r17,4(sp)
811395fc:	dc000017 	ldw	r16,0(sp)
81139600:	dec00404 	addi	sp,sp,16
81139604:	f800283a 	ret

81139608 <alt_msgdma_open>:
81139608:	defffc04 	addi	sp,sp,-16
8113960c:	de00012e 	bgeu	sp,et,81139614 <alt_msgdma_open+0xc>
81139610:	003b68fa 	trap	3
81139614:	dfc00315 	stw	ra,12(sp)
81139618:	df000215 	stw	fp,8(sp)
8113961c:	df000204 	addi	fp,sp,8
81139620:	e13fff15 	stw	r4,-4(fp)
81139624:	e03ffe15 	stw	zero,-8(fp)
81139628:	d1603404 	addi	r5,gp,-32560
8113962c:	e13fff17 	ldw	r4,-4(fp)
81139630:	1139c7c0 	call	81139c7c <alt_find_dev>
81139634:	e0bffe15 	stw	r2,-8(fp)
81139638:	e0bffe17 	ldw	r2,-8(fp)
8113963c:	1000041e 	bne	r2,zero,81139650 <alt_msgdma_open+0x48>
81139640:	113786c0 	call	8113786c <alt_get_errno>
81139644:	1007883a 	mov	r3,r2
81139648:	008004c4 	movi	r2,19
8113964c:	18800015 	stw	r2,0(r3)
81139650:	e0bffe17 	ldw	r2,-8(fp)
81139654:	e037883a 	mov	sp,fp
81139658:	dfc00117 	ldw	ra,4(sp)
8113965c:	df000017 	ldw	fp,0(sp)
81139660:	dec00204 	addi	sp,sp,8
81139664:	f800283a 	ret

81139668 <alt_msgdma_init>:
81139668:	defff604 	addi	sp,sp,-40
8113966c:	de00012e 	bgeu	sp,et,81139674 <alt_msgdma_init+0xc>
81139670:	003b68fa 	trap	3
81139674:	dfc00915 	stw	ra,36(sp)
81139678:	df000815 	stw	fp,32(sp)
8113967c:	df000804 	addi	fp,sp,32
81139680:	e13ffd15 	stw	r4,-12(fp)
81139684:	e17ffe15 	stw	r5,-8(fp)
81139688:	e1bfff15 	stw	r6,-4(fp)
8113968c:	e0bffd17 	ldw	r2,-12(fp)
81139690:	10801783 	ldbu	r2,94(r2)
81139694:	10803fcc 	andi	r2,r2,255
81139698:	10000b26 	beq	r2,zero,811396c8 <alt_msgdma_init+0x60>
8113969c:	e0bffd17 	ldw	r2,-12(fp)
811396a0:	10800617 	ldw	r2,24(r2)
811396a4:	00c00104 	movi	r3,4
811396a8:	10c00035 	stwio	r3,0(r2)
811396ac:	0001883a 	nop
811396b0:	e0bffd17 	ldw	r2,-12(fp)
811396b4:	10800617 	ldw	r2,24(r2)
811396b8:	10800037 	ldwio	r2,0(r2)
811396bc:	1080010c 	andi	r2,r2,4
811396c0:	1005d0ba 	srai	r2,r2,2
811396c4:	103ffa1e 	bne	r2,zero,811396b0 <__reset+0xfb1196b0>
811396c8:	e0bffd17 	ldw	r2,-12(fp)
811396cc:	10800317 	ldw	r2,12(r2)
811396d0:	10800104 	addi	r2,r2,4
811396d4:	00c00084 	movi	r3,2
811396d8:	10c00035 	stwio	r3,0(r2)
811396dc:	0001883a 	nop
811396e0:	e0bffd17 	ldw	r2,-12(fp)
811396e4:	10800317 	ldw	r2,12(r2)
811396e8:	10800037 	ldwio	r2,0(r2)
811396ec:	1080100c 	andi	r2,r2,64
811396f0:	103ffb1e 	bne	r2,zero,811396e0 <__reset+0xfb1196e0>
811396f4:	e0bffd17 	ldw	r2,-12(fp)
811396f8:	10800317 	ldw	r2,12(r2)
811396fc:	10800104 	addi	r2,r2,4
81139700:	10800037 	ldwio	r2,0(r2)
81139704:	1007883a 	mov	r3,r2
81139708:	00bffbc4 	movi	r2,-17
8113970c:	1884703a 	and	r2,r3,r2
81139710:	e0bff915 	stw	r2,-28(fp)
81139714:	e0bff917 	ldw	r2,-28(fp)
81139718:	10800814 	ori	r2,r2,32
8113971c:	e0bff915 	stw	r2,-28(fp)
81139720:	e0bffd17 	ldw	r2,-12(fp)
81139724:	10800317 	ldw	r2,12(r2)
81139728:	10800104 	addi	r2,r2,4
8113972c:	e0fff917 	ldw	r3,-28(fp)
81139730:	10c00035 	stwio	r3,0(r2)
81139734:	e0bffd17 	ldw	r2,-12(fp)
81139738:	10800317 	ldw	r2,12(r2)
8113973c:	e0fffd17 	ldw	r3,-12(fp)
81139740:	18c00317 	ldw	r3,12(r3)
81139744:	18c00037 	ldwio	r3,0(r3)
81139748:	10c00035 	stwio	r3,0(r2)
8113974c:	e0bffd17 	ldw	r2,-12(fp)
81139750:	10801783 	ldbu	r2,94(r2)
81139754:	10803fcc 	andi	r2,r2,255
81139758:	10000826 	beq	r2,zero,8113977c <alt_msgdma_init+0x114>
8113975c:	e0bffd17 	ldw	r2,-12(fp)
81139760:	10800617 	ldw	r2,24(r2)
81139764:	10800404 	addi	r2,r2,16
81139768:	e0fffd17 	ldw	r3,-12(fp)
8113976c:	18c00617 	ldw	r3,24(r3)
81139770:	18c00404 	addi	r3,r3,16
81139774:	18c00037 	ldwio	r3,0(r3)
81139778:	10c00035 	stwio	r3,0(r2)
8113977c:	d1603404 	addi	r5,gp,-32560
81139780:	e13ffd17 	ldw	r4,-12(fp)
81139784:	1139b000 	call	81139b00 <alt_dev_llist_insert>
81139788:	e0bffd17 	ldw	r2,-12(fp)
8113978c:	10801804 	addi	r2,r2,96
81139790:	e0bffb15 	stw	r2,-20(fp)
81139794:	00800044 	movi	r2,1
81139798:	e0bffc0d 	sth	r2,-16(fp)
8113979c:	e0bffc0b 	ldhu	r2,-16(fp)
811397a0:	1009883a 	mov	r4,r2
811397a4:	112e0e00 	call	8112e0e0 <OSSemCreate>
811397a8:	1007883a 	mov	r3,r2
811397ac:	e0bffb17 	ldw	r2,-20(fp)
811397b0:	10c00015 	stw	r3,0(r2)
811397b4:	e0bffb17 	ldw	r2,-20(fp)
811397b8:	10800017 	ldw	r2,0(r2)
811397bc:	10000226 	beq	r2,zero,811397c8 <alt_msgdma_init+0x160>
811397c0:	0005883a 	mov	r2,zero
811397c4:	00000106 	br	811397cc <alt_msgdma_init+0x164>
811397c8:	00bfffc4 	movi	r2,-1
811397cc:	e0bffa15 	stw	r2,-24(fp)
811397d0:	e0bffa17 	ldw	r2,-24(fp)
811397d4:	1000081e 	bne	r2,zero,811397f8 <alt_msgdma_init+0x190>
811397d8:	d8000015 	stw	zero,0(sp)
811397dc:	e1fffd17 	ldw	r7,-12(fp)
811397e0:	01a044f4 	movhi	r6,33043
811397e4:	319ea004 	addi	r6,r6,31360
811397e8:	e17fff17 	ldw	r5,-4(fp)
811397ec:	e13ffe17 	ldw	r4,-8(fp)
811397f0:	1139f080 	call	81139f08 <alt_ic_isr_register>
811397f4:	00000406 	br	81139808 <alt_msgdma_init+0x1a0>
811397f8:	01204534 	movhi	r4,33044
811397fc:	21387004 	addi	r4,r4,-7744
81139800:	113a3200 	call	8113a320 <alt_printf>
81139804:	0001883a 	nop
81139808:	e037883a 	mov	sp,fp
8113980c:	dfc00117 	ldw	ra,4(sp)
81139810:	df000017 	ldw	fp,0(sp)
81139814:	dec00204 	addi	sp,sp,8
81139818:	f800283a 	ret

8113981c <alt_msgdma_register_callback>:
8113981c:	defffb04 	addi	sp,sp,-20
81139820:	de00012e 	bgeu	sp,et,81139828 <alt_msgdma_register_callback+0xc>
81139824:	003b68fa 	trap	3
81139828:	df000415 	stw	fp,16(sp)
8113982c:	df000404 	addi	fp,sp,16
81139830:	e13ffc15 	stw	r4,-16(fp)
81139834:	e17ffd15 	stw	r5,-12(fp)
81139838:	e1bffe15 	stw	r6,-8(fp)
8113983c:	e1ffff15 	stw	r7,-4(fp)
81139840:	e0bffc17 	ldw	r2,-16(fp)
81139844:	e0fffd17 	ldw	r3,-12(fp)
81139848:	10c00b15 	stw	r3,44(r2)
8113984c:	e0bffc17 	ldw	r2,-16(fp)
81139850:	e0ffff17 	ldw	r3,-4(fp)
81139854:	10c00c15 	stw	r3,48(r2)
81139858:	e0bffc17 	ldw	r2,-16(fp)
8113985c:	e0fffe17 	ldw	r3,-8(fp)
81139860:	10c00d15 	stw	r3,52(r2)
81139864:	0001883a 	nop
81139868:	e037883a 	mov	sp,fp
8113986c:	df000017 	ldw	fp,0(sp)
81139870:	dec00104 	addi	sp,sp,4
81139874:	f800283a 	ret

81139878 <alt_msgdma_standard_descriptor_async_transfer>:
81139878:	defffc04 	addi	sp,sp,-16
8113987c:	de00012e 	bgeu	sp,et,81139884 <alt_msgdma_standard_descriptor_async_transfer+0xc>
81139880:	003b68fa 	trap	3
81139884:	dfc00315 	stw	ra,12(sp)
81139888:	df000215 	stw	fp,8(sp)
8113988c:	df000204 	addi	fp,sp,8
81139890:	e13ffe15 	stw	r4,-8(fp)
81139894:	e17fff15 	stw	r5,-4(fp)
81139898:	000d883a 	mov	r6,zero
8113989c:	e17fff17 	ldw	r5,-4(fp)
811398a0:	e13ffe17 	ldw	r4,-8(fp)
811398a4:	1137dfc0 	call	81137dfc <alt_msgdma_descriptor_async_transfer>
811398a8:	e037883a 	mov	sp,fp
811398ac:	dfc00117 	ldw	ra,4(sp)
811398b0:	df000017 	ldw	fp,0(sp)
811398b4:	dec00204 	addi	sp,sp,8
811398b8:	f800283a 	ret

811398bc <alt_msgdma_extended_descriptor_async_transfer>:
811398bc:	defffc04 	addi	sp,sp,-16
811398c0:	de00012e 	bgeu	sp,et,811398c8 <alt_msgdma_extended_descriptor_async_transfer+0xc>
811398c4:	003b68fa 	trap	3
811398c8:	dfc00315 	stw	ra,12(sp)
811398cc:	df000215 	stw	fp,8(sp)
811398d0:	df000204 	addi	fp,sp,8
811398d4:	e13ffe15 	stw	r4,-8(fp)
811398d8:	e17fff15 	stw	r5,-4(fp)
811398dc:	e1bfff17 	ldw	r6,-4(fp)
811398e0:	000b883a 	mov	r5,zero
811398e4:	e13ffe17 	ldw	r4,-8(fp)
811398e8:	1137dfc0 	call	81137dfc <alt_msgdma_descriptor_async_transfer>
811398ec:	e037883a 	mov	sp,fp
811398f0:	dfc00117 	ldw	ra,4(sp)
811398f4:	df000017 	ldw	fp,0(sp)
811398f8:	dec00204 	addi	sp,sp,8
811398fc:	f800283a 	ret

81139900 <alt_msgdma_standard_descriptor_sync_transfer>:
81139900:	defffc04 	addi	sp,sp,-16
81139904:	de00012e 	bgeu	sp,et,8113990c <alt_msgdma_standard_descriptor_sync_transfer+0xc>
81139908:	003b68fa 	trap	3
8113990c:	dfc00315 	stw	ra,12(sp)
81139910:	df000215 	stw	fp,8(sp)
81139914:	df000204 	addi	fp,sp,8
81139918:	e13ffe15 	stw	r4,-8(fp)
8113991c:	e17fff15 	stw	r5,-4(fp)
81139920:	000d883a 	mov	r6,zero
81139924:	e17fff17 	ldw	r5,-4(fp)
81139928:	e13ffe17 	ldw	r4,-8(fp)
8113992c:	113813c0 	call	8113813c <alt_msgdma_descriptor_sync_transfer>
81139930:	e037883a 	mov	sp,fp
81139934:	dfc00117 	ldw	ra,4(sp)
81139938:	df000017 	ldw	fp,0(sp)
8113993c:	dec00204 	addi	sp,sp,8
81139940:	f800283a 	ret

81139944 <alt_msgdma_extended_descriptor_sync_transfer>:
81139944:	defffc04 	addi	sp,sp,-16
81139948:	de00012e 	bgeu	sp,et,81139950 <alt_msgdma_extended_descriptor_sync_transfer+0xc>
8113994c:	003b68fa 	trap	3
81139950:	dfc00315 	stw	ra,12(sp)
81139954:	df000215 	stw	fp,8(sp)
81139958:	df000204 	addi	fp,sp,8
8113995c:	e13ffe15 	stw	r4,-8(fp)
81139960:	e17fff15 	stw	r5,-4(fp)
81139964:	e1bfff17 	ldw	r6,-4(fp)
81139968:	000b883a 	mov	r5,zero
8113996c:	e13ffe17 	ldw	r4,-8(fp)
81139970:	113813c0 	call	8113813c <alt_msgdma_descriptor_sync_transfer>
81139974:	e037883a 	mov	sp,fp
81139978:	dfc00117 	ldw	ra,4(sp)
8113997c:	df000017 	ldw	fp,0(sp)
81139980:	dec00204 	addi	sp,sp,8
81139984:	f800283a 	ret

81139988 <alt_alarm_start>:
81139988:	defff504 	addi	sp,sp,-44
8113998c:	de00012e 	bgeu	sp,et,81139994 <alt_alarm_start+0xc>
81139990:	003b68fa 	trap	3
81139994:	df000a15 	stw	fp,40(sp)
81139998:	df000a04 	addi	fp,sp,40
8113999c:	e13ffc15 	stw	r4,-16(fp)
811399a0:	e17ffd15 	stw	r5,-12(fp)
811399a4:	e1bffe15 	stw	r6,-8(fp)
811399a8:	e1ffff15 	stw	r7,-4(fp)
811399ac:	e03ff615 	stw	zero,-40(fp)
811399b0:	d0a06a17 	ldw	r2,-32344(gp)
811399b4:	10003c26 	beq	r2,zero,81139aa8 <alt_alarm_start+0x120>
811399b8:	e0bffc17 	ldw	r2,-16(fp)
811399bc:	10003826 	beq	r2,zero,81139aa0 <alt_alarm_start+0x118>
811399c0:	e0bffc17 	ldw	r2,-16(fp)
811399c4:	e0fffe17 	ldw	r3,-8(fp)
811399c8:	10c00315 	stw	r3,12(r2)
811399cc:	e0bffc17 	ldw	r2,-16(fp)
811399d0:	e0ffff17 	ldw	r3,-4(fp)
811399d4:	10c00515 	stw	r3,20(r2)
811399d8:	0005303a 	rdctl	r2,status
811399dc:	e0bff915 	stw	r2,-28(fp)
811399e0:	e0fff917 	ldw	r3,-28(fp)
811399e4:	00bfff84 	movi	r2,-2
811399e8:	1884703a 	and	r2,r3,r2
811399ec:	1001703a 	wrctl	status,r2
811399f0:	e0bff917 	ldw	r2,-28(fp)
811399f4:	e0bff815 	stw	r2,-32(fp)
811399f8:	d0a06b17 	ldw	r2,-32340(gp)
811399fc:	e0bff615 	stw	r2,-40(fp)
81139a00:	e0fffd17 	ldw	r3,-12(fp)
81139a04:	e0bff617 	ldw	r2,-40(fp)
81139a08:	1885883a 	add	r2,r3,r2
81139a0c:	10c00044 	addi	r3,r2,1
81139a10:	e0bffc17 	ldw	r2,-16(fp)
81139a14:	10c00215 	stw	r3,8(r2)
81139a18:	e0bffc17 	ldw	r2,-16(fp)
81139a1c:	10c00217 	ldw	r3,8(r2)
81139a20:	e0bff617 	ldw	r2,-40(fp)
81139a24:	1880042e 	bgeu	r3,r2,81139a38 <alt_alarm_start+0xb0>
81139a28:	e0bffc17 	ldw	r2,-16(fp)
81139a2c:	00c00044 	movi	r3,1
81139a30:	10c00405 	stb	r3,16(r2)
81139a34:	00000206 	br	81139a40 <alt_alarm_start+0xb8>
81139a38:	e0bffc17 	ldw	r2,-16(fp)
81139a3c:	10000405 	stb	zero,16(r2)
81139a40:	e0bffc17 	ldw	r2,-16(fp)
81139a44:	d0e01304 	addi	r3,gp,-32692
81139a48:	e0fffa15 	stw	r3,-24(fp)
81139a4c:	e0bffb15 	stw	r2,-20(fp)
81139a50:	e0bffb17 	ldw	r2,-20(fp)
81139a54:	e0fffa17 	ldw	r3,-24(fp)
81139a58:	10c00115 	stw	r3,4(r2)
81139a5c:	e0bffa17 	ldw	r2,-24(fp)
81139a60:	10c00017 	ldw	r3,0(r2)
81139a64:	e0bffb17 	ldw	r2,-20(fp)
81139a68:	10c00015 	stw	r3,0(r2)
81139a6c:	e0bffa17 	ldw	r2,-24(fp)
81139a70:	10800017 	ldw	r2,0(r2)
81139a74:	e0fffb17 	ldw	r3,-20(fp)
81139a78:	10c00115 	stw	r3,4(r2)
81139a7c:	e0bffa17 	ldw	r2,-24(fp)
81139a80:	e0fffb17 	ldw	r3,-20(fp)
81139a84:	10c00015 	stw	r3,0(r2)
81139a88:	e0bff817 	ldw	r2,-32(fp)
81139a8c:	e0bff715 	stw	r2,-36(fp)
81139a90:	e0bff717 	ldw	r2,-36(fp)
81139a94:	1001703a 	wrctl	status,r2
81139a98:	0005883a 	mov	r2,zero
81139a9c:	00000306 	br	81139aac <alt_alarm_start+0x124>
81139aa0:	00bffa84 	movi	r2,-22
81139aa4:	00000106 	br	81139aac <alt_alarm_start+0x124>
81139aa8:	00bfde84 	movi	r2,-134
81139aac:	e037883a 	mov	sp,fp
81139ab0:	df000017 	ldw	fp,0(sp)
81139ab4:	dec00104 	addi	sp,sp,4
81139ab8:	f800283a 	ret

81139abc <alt_get_errno>:
81139abc:	defffe04 	addi	sp,sp,-8
81139ac0:	de00012e 	bgeu	sp,et,81139ac8 <alt_get_errno+0xc>
81139ac4:	003b68fa 	trap	3
81139ac8:	dfc00115 	stw	ra,4(sp)
81139acc:	df000015 	stw	fp,0(sp)
81139ad0:	d839883a 	mov	fp,sp
81139ad4:	d0a01017 	ldw	r2,-32704(gp)
81139ad8:	10000326 	beq	r2,zero,81139ae8 <alt_get_errno+0x2c>
81139adc:	d0a01017 	ldw	r2,-32704(gp)
81139ae0:	103ee83a 	callr	r2
81139ae4:	00000106 	br	81139aec <alt_get_errno+0x30>
81139ae8:	d0a05e04 	addi	r2,gp,-32392
81139aec:	e037883a 	mov	sp,fp
81139af0:	dfc00117 	ldw	ra,4(sp)
81139af4:	df000017 	ldw	fp,0(sp)
81139af8:	dec00204 	addi	sp,sp,8
81139afc:	f800283a 	ret

81139b00 <alt_dev_llist_insert>:
81139b00:	defffa04 	addi	sp,sp,-24
81139b04:	de00012e 	bgeu	sp,et,81139b0c <alt_dev_llist_insert+0xc>
81139b08:	003b68fa 	trap	3
81139b0c:	dfc00515 	stw	ra,20(sp)
81139b10:	df000415 	stw	fp,16(sp)
81139b14:	df000404 	addi	fp,sp,16
81139b18:	e13ffe15 	stw	r4,-8(fp)
81139b1c:	e17fff15 	stw	r5,-4(fp)
81139b20:	e0bffe17 	ldw	r2,-8(fp)
81139b24:	10000326 	beq	r2,zero,81139b34 <alt_dev_llist_insert+0x34>
81139b28:	e0bffe17 	ldw	r2,-8(fp)
81139b2c:	10800217 	ldw	r2,8(r2)
81139b30:	1000061e 	bne	r2,zero,81139b4c <alt_dev_llist_insert+0x4c>
81139b34:	1139abc0 	call	81139abc <alt_get_errno>
81139b38:	1007883a 	mov	r3,r2
81139b3c:	00800584 	movi	r2,22
81139b40:	18800015 	stw	r2,0(r3)
81139b44:	00bffa84 	movi	r2,-22
81139b48:	00001306 	br	81139b98 <alt_dev_llist_insert+0x98>
81139b4c:	e0bffe17 	ldw	r2,-8(fp)
81139b50:	e0ffff17 	ldw	r3,-4(fp)
81139b54:	e0fffc15 	stw	r3,-16(fp)
81139b58:	e0bffd15 	stw	r2,-12(fp)
81139b5c:	e0bffd17 	ldw	r2,-12(fp)
81139b60:	e0fffc17 	ldw	r3,-16(fp)
81139b64:	10c00115 	stw	r3,4(r2)
81139b68:	e0bffc17 	ldw	r2,-16(fp)
81139b6c:	10c00017 	ldw	r3,0(r2)
81139b70:	e0bffd17 	ldw	r2,-12(fp)
81139b74:	10c00015 	stw	r3,0(r2)
81139b78:	e0bffc17 	ldw	r2,-16(fp)
81139b7c:	10800017 	ldw	r2,0(r2)
81139b80:	e0fffd17 	ldw	r3,-12(fp)
81139b84:	10c00115 	stw	r3,4(r2)
81139b88:	e0bffc17 	ldw	r2,-16(fp)
81139b8c:	e0fffd17 	ldw	r3,-12(fp)
81139b90:	10c00015 	stw	r3,0(r2)
81139b94:	0005883a 	mov	r2,zero
81139b98:	e037883a 	mov	sp,fp
81139b9c:	dfc00117 	ldw	ra,4(sp)
81139ba0:	df000017 	ldw	fp,0(sp)
81139ba4:	dec00204 	addi	sp,sp,8
81139ba8:	f800283a 	ret

81139bac <_do_ctors>:
81139bac:	defffd04 	addi	sp,sp,-12
81139bb0:	de00012e 	bgeu	sp,et,81139bb8 <_do_ctors+0xc>
81139bb4:	003b68fa 	trap	3
81139bb8:	dfc00215 	stw	ra,8(sp)
81139bbc:	df000115 	stw	fp,4(sp)
81139bc0:	df000104 	addi	fp,sp,4
81139bc4:	00a04534 	movhi	r2,33044
81139bc8:	10abde04 	addi	r2,r2,-20616
81139bcc:	e0bfff15 	stw	r2,-4(fp)
81139bd0:	00000606 	br	81139bec <_do_ctors+0x40>
81139bd4:	e0bfff17 	ldw	r2,-4(fp)
81139bd8:	10800017 	ldw	r2,0(r2)
81139bdc:	103ee83a 	callr	r2
81139be0:	e0bfff17 	ldw	r2,-4(fp)
81139be4:	10bfff04 	addi	r2,r2,-4
81139be8:	e0bfff15 	stw	r2,-4(fp)
81139bec:	e0ffff17 	ldw	r3,-4(fp)
81139bf0:	00a04534 	movhi	r2,33044
81139bf4:	10abdf04 	addi	r2,r2,-20612
81139bf8:	18bff62e 	bgeu	r3,r2,81139bd4 <__reset+0xfb119bd4>
81139bfc:	0001883a 	nop
81139c00:	e037883a 	mov	sp,fp
81139c04:	dfc00117 	ldw	ra,4(sp)
81139c08:	df000017 	ldw	fp,0(sp)
81139c0c:	dec00204 	addi	sp,sp,8
81139c10:	f800283a 	ret

81139c14 <_do_dtors>:
81139c14:	defffd04 	addi	sp,sp,-12
81139c18:	de00012e 	bgeu	sp,et,81139c20 <_do_dtors+0xc>
81139c1c:	003b68fa 	trap	3
81139c20:	dfc00215 	stw	ra,8(sp)
81139c24:	df000115 	stw	fp,4(sp)
81139c28:	df000104 	addi	fp,sp,4
81139c2c:	00a04534 	movhi	r2,33044
81139c30:	10abde04 	addi	r2,r2,-20616
81139c34:	e0bfff15 	stw	r2,-4(fp)
81139c38:	00000606 	br	81139c54 <_do_dtors+0x40>
81139c3c:	e0bfff17 	ldw	r2,-4(fp)
81139c40:	10800017 	ldw	r2,0(r2)
81139c44:	103ee83a 	callr	r2
81139c48:	e0bfff17 	ldw	r2,-4(fp)
81139c4c:	10bfff04 	addi	r2,r2,-4
81139c50:	e0bfff15 	stw	r2,-4(fp)
81139c54:	e0ffff17 	ldw	r3,-4(fp)
81139c58:	00a04534 	movhi	r2,33044
81139c5c:	10abdf04 	addi	r2,r2,-20612
81139c60:	18bff62e 	bgeu	r3,r2,81139c3c <__reset+0xfb119c3c>
81139c64:	0001883a 	nop
81139c68:	e037883a 	mov	sp,fp
81139c6c:	dfc00117 	ldw	ra,4(sp)
81139c70:	df000017 	ldw	fp,0(sp)
81139c74:	dec00204 	addi	sp,sp,8
81139c78:	f800283a 	ret

81139c7c <alt_find_dev>:
81139c7c:	defffa04 	addi	sp,sp,-24
81139c80:	de00012e 	bgeu	sp,et,81139c88 <alt_find_dev+0xc>
81139c84:	003b68fa 	trap	3
81139c88:	dfc00515 	stw	ra,20(sp)
81139c8c:	df000415 	stw	fp,16(sp)
81139c90:	df000404 	addi	fp,sp,16
81139c94:	e13ffe15 	stw	r4,-8(fp)
81139c98:	e17fff15 	stw	r5,-4(fp)
81139c9c:	e0bfff17 	ldw	r2,-4(fp)
81139ca0:	10800017 	ldw	r2,0(r2)
81139ca4:	e0bffc15 	stw	r2,-16(fp)
81139ca8:	e13ffe17 	ldw	r4,-8(fp)
81139cac:	1112a400 	call	81112a40 <strlen>
81139cb0:	10800044 	addi	r2,r2,1
81139cb4:	e0bffd15 	stw	r2,-12(fp)
81139cb8:	00000d06 	br	81139cf0 <alt_find_dev+0x74>
81139cbc:	e0bffc17 	ldw	r2,-16(fp)
81139cc0:	10800217 	ldw	r2,8(r2)
81139cc4:	e0fffd17 	ldw	r3,-12(fp)
81139cc8:	180d883a 	mov	r6,r3
81139ccc:	e17ffe17 	ldw	r5,-8(fp)
81139cd0:	1009883a 	mov	r4,r2
81139cd4:	113aaa40 	call	8113aaa4 <memcmp>
81139cd8:	1000021e 	bne	r2,zero,81139ce4 <alt_find_dev+0x68>
81139cdc:	e0bffc17 	ldw	r2,-16(fp)
81139ce0:	00000706 	br	81139d00 <alt_find_dev+0x84>
81139ce4:	e0bffc17 	ldw	r2,-16(fp)
81139ce8:	10800017 	ldw	r2,0(r2)
81139cec:	e0bffc15 	stw	r2,-16(fp)
81139cf0:	e0fffc17 	ldw	r3,-16(fp)
81139cf4:	e0bfff17 	ldw	r2,-4(fp)
81139cf8:	18bff01e 	bne	r3,r2,81139cbc <__reset+0xfb119cbc>
81139cfc:	0005883a 	mov	r2,zero
81139d00:	e037883a 	mov	sp,fp
81139d04:	dfc00117 	ldw	ra,4(sp)
81139d08:	df000017 	ldw	fp,0(sp)
81139d0c:	dec00204 	addi	sp,sp,8
81139d10:	f800283a 	ret

81139d14 <alt_find_file>:
81139d14:	defffb04 	addi	sp,sp,-20
81139d18:	de00012e 	bgeu	sp,et,81139d20 <alt_find_file+0xc>
81139d1c:	003b68fa 	trap	3
81139d20:	dfc00415 	stw	ra,16(sp)
81139d24:	df000315 	stw	fp,12(sp)
81139d28:	df000304 	addi	fp,sp,12
81139d2c:	e13fff15 	stw	r4,-4(fp)
81139d30:	d0a00b17 	ldw	r2,-32724(gp)
81139d34:	e0bffd15 	stw	r2,-12(fp)
81139d38:	00003106 	br	81139e00 <alt_find_file+0xec>
81139d3c:	e0bffd17 	ldw	r2,-12(fp)
81139d40:	10800217 	ldw	r2,8(r2)
81139d44:	1009883a 	mov	r4,r2
81139d48:	1112a400 	call	81112a40 <strlen>
81139d4c:	e0bffe15 	stw	r2,-8(fp)
81139d50:	e0bffd17 	ldw	r2,-12(fp)
81139d54:	10c00217 	ldw	r3,8(r2)
81139d58:	e0bffe17 	ldw	r2,-8(fp)
81139d5c:	10bfffc4 	addi	r2,r2,-1
81139d60:	1885883a 	add	r2,r3,r2
81139d64:	10800003 	ldbu	r2,0(r2)
81139d68:	10803fcc 	andi	r2,r2,255
81139d6c:	1080201c 	xori	r2,r2,128
81139d70:	10bfe004 	addi	r2,r2,-128
81139d74:	10800bd8 	cmpnei	r2,r2,47
81139d78:	1000031e 	bne	r2,zero,81139d88 <alt_find_file+0x74>
81139d7c:	e0bffe17 	ldw	r2,-8(fp)
81139d80:	10bfffc4 	addi	r2,r2,-1
81139d84:	e0bffe15 	stw	r2,-8(fp)
81139d88:	e0bffe17 	ldw	r2,-8(fp)
81139d8c:	e0ffff17 	ldw	r3,-4(fp)
81139d90:	1885883a 	add	r2,r3,r2
81139d94:	10800003 	ldbu	r2,0(r2)
81139d98:	10803fcc 	andi	r2,r2,255
81139d9c:	1080201c 	xori	r2,r2,128
81139da0:	10bfe004 	addi	r2,r2,-128
81139da4:	10800be0 	cmpeqi	r2,r2,47
81139da8:	1000081e 	bne	r2,zero,81139dcc <alt_find_file+0xb8>
81139dac:	e0bffe17 	ldw	r2,-8(fp)
81139db0:	e0ffff17 	ldw	r3,-4(fp)
81139db4:	1885883a 	add	r2,r3,r2
81139db8:	10800003 	ldbu	r2,0(r2)
81139dbc:	10803fcc 	andi	r2,r2,255
81139dc0:	1080201c 	xori	r2,r2,128
81139dc4:	10bfe004 	addi	r2,r2,-128
81139dc8:	10000a1e 	bne	r2,zero,81139df4 <alt_find_file+0xe0>
81139dcc:	e0bffd17 	ldw	r2,-12(fp)
81139dd0:	10800217 	ldw	r2,8(r2)
81139dd4:	e0fffe17 	ldw	r3,-8(fp)
81139dd8:	180d883a 	mov	r6,r3
81139ddc:	e17fff17 	ldw	r5,-4(fp)
81139de0:	1009883a 	mov	r4,r2
81139de4:	113aaa40 	call	8113aaa4 <memcmp>
81139de8:	1000021e 	bne	r2,zero,81139df4 <alt_find_file+0xe0>
81139dec:	e0bffd17 	ldw	r2,-12(fp)
81139df0:	00000706 	br	81139e10 <alt_find_file+0xfc>
81139df4:	e0bffd17 	ldw	r2,-12(fp)
81139df8:	10800017 	ldw	r2,0(r2)
81139dfc:	e0bffd15 	stw	r2,-12(fp)
81139e00:	e0fffd17 	ldw	r3,-12(fp)
81139e04:	d0a00b04 	addi	r2,gp,-32724
81139e08:	18bfcc1e 	bne	r3,r2,81139d3c <__reset+0xfb119d3c>
81139e0c:	0005883a 	mov	r2,zero
81139e10:	e037883a 	mov	sp,fp
81139e14:	dfc00117 	ldw	ra,4(sp)
81139e18:	df000017 	ldw	fp,0(sp)
81139e1c:	dec00204 	addi	sp,sp,8
81139e20:	f800283a 	ret

81139e24 <alt_get_fd>:
81139e24:	defff904 	addi	sp,sp,-28
81139e28:	de00012e 	bgeu	sp,et,81139e30 <alt_get_fd+0xc>
81139e2c:	003b68fa 	trap	3
81139e30:	dfc00615 	stw	ra,24(sp)
81139e34:	df000515 	stw	fp,20(sp)
81139e38:	df000504 	addi	fp,sp,20
81139e3c:	e13fff15 	stw	r4,-4(fp)
81139e40:	00bffa04 	movi	r2,-24
81139e44:	e0bffc15 	stw	r2,-16(fp)
81139e48:	d0a06517 	ldw	r2,-32364(gp)
81139e4c:	e0bffd15 	stw	r2,-12(fp)
81139e50:	e03ffe0d 	sth	zero,-8(fp)
81139e54:	e0bffe0b 	ldhu	r2,-8(fp)
81139e58:	e0fffe84 	addi	r3,fp,-6
81139e5c:	180d883a 	mov	r6,r3
81139e60:	100b883a 	mov	r5,r2
81139e64:	e13ffd17 	ldw	r4,-12(fp)
81139e68:	112e4080 	call	8112e408 <OSSemPend>
81139e6c:	e03ffb15 	stw	zero,-20(fp)
81139e70:	00001906 	br	81139ed8 <alt_get_fd+0xb4>
81139e74:	00a04534 	movhi	r2,33044
81139e78:	10baac04 	addi	r2,r2,-5456
81139e7c:	e0fffb17 	ldw	r3,-20(fp)
81139e80:	18c00324 	muli	r3,r3,12
81139e84:	10c5883a 	add	r2,r2,r3
81139e88:	10800017 	ldw	r2,0(r2)
81139e8c:	10000f1e 	bne	r2,zero,81139ecc <alt_get_fd+0xa8>
81139e90:	00a04534 	movhi	r2,33044
81139e94:	10baac04 	addi	r2,r2,-5456
81139e98:	e0fffb17 	ldw	r3,-20(fp)
81139e9c:	18c00324 	muli	r3,r3,12
81139ea0:	10c5883a 	add	r2,r2,r3
81139ea4:	e0ffff17 	ldw	r3,-4(fp)
81139ea8:	10c00015 	stw	r3,0(r2)
81139eac:	d0e00f17 	ldw	r3,-32708(gp)
81139eb0:	e0bffb17 	ldw	r2,-20(fp)
81139eb4:	1880020e 	bge	r3,r2,81139ec0 <alt_get_fd+0x9c>
81139eb8:	e0bffb17 	ldw	r2,-20(fp)
81139ebc:	d0a00f15 	stw	r2,-32708(gp)
81139ec0:	e0bffb17 	ldw	r2,-20(fp)
81139ec4:	e0bffc15 	stw	r2,-16(fp)
81139ec8:	00000606 	br	81139ee4 <alt_get_fd+0xc0>
81139ecc:	e0bffb17 	ldw	r2,-20(fp)
81139ed0:	10800044 	addi	r2,r2,1
81139ed4:	e0bffb15 	stw	r2,-20(fp)
81139ed8:	e0bffb17 	ldw	r2,-20(fp)
81139edc:	10800810 	cmplti	r2,r2,32
81139ee0:	103fe41e 	bne	r2,zero,81139e74 <__reset+0xfb119e74>
81139ee4:	d0a06517 	ldw	r2,-32364(gp)
81139ee8:	1009883a 	mov	r4,r2
81139eec:	112e7900 	call	8112e790 <OSSemPost>
81139ef0:	e0bffc17 	ldw	r2,-16(fp)
81139ef4:	e037883a 	mov	sp,fp
81139ef8:	dfc00117 	ldw	ra,4(sp)
81139efc:	df000017 	ldw	fp,0(sp)
81139f00:	dec00204 	addi	sp,sp,8
81139f04:	f800283a 	ret

81139f08 <alt_ic_isr_register>:
81139f08:	defff904 	addi	sp,sp,-28
81139f0c:	de00012e 	bgeu	sp,et,81139f14 <alt_ic_isr_register+0xc>
81139f10:	003b68fa 	trap	3
81139f14:	dfc00615 	stw	ra,24(sp)
81139f18:	df000515 	stw	fp,20(sp)
81139f1c:	df000504 	addi	fp,sp,20
81139f20:	e13ffc15 	stw	r4,-16(fp)
81139f24:	e17ffd15 	stw	r5,-12(fp)
81139f28:	e1bffe15 	stw	r6,-8(fp)
81139f2c:	e1ffff15 	stw	r7,-4(fp)
81139f30:	e0800217 	ldw	r2,8(fp)
81139f34:	d8800015 	stw	r2,0(sp)
81139f38:	e1ffff17 	ldw	r7,-4(fp)
81139f3c:	e1bffe17 	ldw	r6,-8(fp)
81139f40:	e17ffd17 	ldw	r5,-12(fp)
81139f44:	e13ffc17 	ldw	r4,-16(fp)
81139f48:	113a0d80 	call	8113a0d8 <alt_iic_isr_register>
81139f4c:	e037883a 	mov	sp,fp
81139f50:	dfc00117 	ldw	ra,4(sp)
81139f54:	df000017 	ldw	fp,0(sp)
81139f58:	dec00204 	addi	sp,sp,8
81139f5c:	f800283a 	ret

81139f60 <alt_ic_irq_enable>:
81139f60:	defff904 	addi	sp,sp,-28
81139f64:	de00012e 	bgeu	sp,et,81139f6c <alt_ic_irq_enable+0xc>
81139f68:	003b68fa 	trap	3
81139f6c:	df000615 	stw	fp,24(sp)
81139f70:	df000604 	addi	fp,sp,24
81139f74:	e13ffe15 	stw	r4,-8(fp)
81139f78:	e17fff15 	stw	r5,-4(fp)
81139f7c:	e0bfff17 	ldw	r2,-4(fp)
81139f80:	e0bffa15 	stw	r2,-24(fp)
81139f84:	0005303a 	rdctl	r2,status
81139f88:	e0bffb15 	stw	r2,-20(fp)
81139f8c:	e0fffb17 	ldw	r3,-20(fp)
81139f90:	00bfff84 	movi	r2,-2
81139f94:	1884703a 	and	r2,r3,r2
81139f98:	1001703a 	wrctl	status,r2
81139f9c:	e0bffb17 	ldw	r2,-20(fp)
81139fa0:	e0bffc15 	stw	r2,-16(fp)
81139fa4:	00c00044 	movi	r3,1
81139fa8:	e0bffa17 	ldw	r2,-24(fp)
81139fac:	1884983a 	sll	r2,r3,r2
81139fb0:	1007883a 	mov	r3,r2
81139fb4:	d0a06617 	ldw	r2,-32360(gp)
81139fb8:	1884b03a 	or	r2,r3,r2
81139fbc:	d0a06615 	stw	r2,-32360(gp)
81139fc0:	d0a06617 	ldw	r2,-32360(gp)
81139fc4:	100170fa 	wrctl	ienable,r2
81139fc8:	e0bffc17 	ldw	r2,-16(fp)
81139fcc:	e0bffd15 	stw	r2,-12(fp)
81139fd0:	e0bffd17 	ldw	r2,-12(fp)
81139fd4:	1001703a 	wrctl	status,r2
81139fd8:	0005883a 	mov	r2,zero
81139fdc:	0001883a 	nop
81139fe0:	e037883a 	mov	sp,fp
81139fe4:	df000017 	ldw	fp,0(sp)
81139fe8:	dec00104 	addi	sp,sp,4
81139fec:	f800283a 	ret

81139ff0 <alt_ic_irq_disable>:
81139ff0:	defff904 	addi	sp,sp,-28
81139ff4:	de00012e 	bgeu	sp,et,81139ffc <alt_ic_irq_disable+0xc>
81139ff8:	003b68fa 	trap	3
81139ffc:	df000615 	stw	fp,24(sp)
8113a000:	df000604 	addi	fp,sp,24
8113a004:	e13ffe15 	stw	r4,-8(fp)
8113a008:	e17fff15 	stw	r5,-4(fp)
8113a00c:	e0bfff17 	ldw	r2,-4(fp)
8113a010:	e0bffa15 	stw	r2,-24(fp)
8113a014:	0005303a 	rdctl	r2,status
8113a018:	e0bffb15 	stw	r2,-20(fp)
8113a01c:	e0fffb17 	ldw	r3,-20(fp)
8113a020:	00bfff84 	movi	r2,-2
8113a024:	1884703a 	and	r2,r3,r2
8113a028:	1001703a 	wrctl	status,r2
8113a02c:	e0bffb17 	ldw	r2,-20(fp)
8113a030:	e0bffc15 	stw	r2,-16(fp)
8113a034:	00c00044 	movi	r3,1
8113a038:	e0bffa17 	ldw	r2,-24(fp)
8113a03c:	1884983a 	sll	r2,r3,r2
8113a040:	0084303a 	nor	r2,zero,r2
8113a044:	1007883a 	mov	r3,r2
8113a048:	d0a06617 	ldw	r2,-32360(gp)
8113a04c:	1884703a 	and	r2,r3,r2
8113a050:	d0a06615 	stw	r2,-32360(gp)
8113a054:	d0a06617 	ldw	r2,-32360(gp)
8113a058:	100170fa 	wrctl	ienable,r2
8113a05c:	e0bffc17 	ldw	r2,-16(fp)
8113a060:	e0bffd15 	stw	r2,-12(fp)
8113a064:	e0bffd17 	ldw	r2,-12(fp)
8113a068:	1001703a 	wrctl	status,r2
8113a06c:	0005883a 	mov	r2,zero
8113a070:	0001883a 	nop
8113a074:	e037883a 	mov	sp,fp
8113a078:	df000017 	ldw	fp,0(sp)
8113a07c:	dec00104 	addi	sp,sp,4
8113a080:	f800283a 	ret

8113a084 <alt_ic_irq_enabled>:
8113a084:	defffc04 	addi	sp,sp,-16
8113a088:	de00012e 	bgeu	sp,et,8113a090 <alt_ic_irq_enabled+0xc>
8113a08c:	003b68fa 	trap	3
8113a090:	df000315 	stw	fp,12(sp)
8113a094:	df000304 	addi	fp,sp,12
8113a098:	e13ffe15 	stw	r4,-8(fp)
8113a09c:	e17fff15 	stw	r5,-4(fp)
8113a0a0:	000530fa 	rdctl	r2,ienable
8113a0a4:	e0bffd15 	stw	r2,-12(fp)
8113a0a8:	00c00044 	movi	r3,1
8113a0ac:	e0bfff17 	ldw	r2,-4(fp)
8113a0b0:	1884983a 	sll	r2,r3,r2
8113a0b4:	1007883a 	mov	r3,r2
8113a0b8:	e0bffd17 	ldw	r2,-12(fp)
8113a0bc:	1884703a 	and	r2,r3,r2
8113a0c0:	1004c03a 	cmpne	r2,r2,zero
8113a0c4:	10803fcc 	andi	r2,r2,255
8113a0c8:	e037883a 	mov	sp,fp
8113a0cc:	df000017 	ldw	fp,0(sp)
8113a0d0:	dec00104 	addi	sp,sp,4
8113a0d4:	f800283a 	ret

8113a0d8 <alt_iic_isr_register>:
8113a0d8:	defff504 	addi	sp,sp,-44
8113a0dc:	de00012e 	bgeu	sp,et,8113a0e4 <alt_iic_isr_register+0xc>
8113a0e0:	003b68fa 	trap	3
8113a0e4:	dfc00a15 	stw	ra,40(sp)
8113a0e8:	df000915 	stw	fp,36(sp)
8113a0ec:	df000904 	addi	fp,sp,36
8113a0f0:	e13ffc15 	stw	r4,-16(fp)
8113a0f4:	e17ffd15 	stw	r5,-12(fp)
8113a0f8:	e1bffe15 	stw	r6,-8(fp)
8113a0fc:	e1ffff15 	stw	r7,-4(fp)
8113a100:	00bffa84 	movi	r2,-22
8113a104:	e0bff715 	stw	r2,-36(fp)
8113a108:	e0bffd17 	ldw	r2,-12(fp)
8113a10c:	e0bff815 	stw	r2,-32(fp)
8113a110:	e0bff817 	ldw	r2,-32(fp)
8113a114:	10800808 	cmpgei	r2,r2,32
8113a118:	1000271e 	bne	r2,zero,8113a1b8 <alt_iic_isr_register+0xe0>
8113a11c:	0005303a 	rdctl	r2,status
8113a120:	e0bffb15 	stw	r2,-20(fp)
8113a124:	e0fffb17 	ldw	r3,-20(fp)
8113a128:	00bfff84 	movi	r2,-2
8113a12c:	1884703a 	and	r2,r3,r2
8113a130:	1001703a 	wrctl	status,r2
8113a134:	e0bffb17 	ldw	r2,-20(fp)
8113a138:	e0bffa15 	stw	r2,-24(fp)
8113a13c:	00a04574 	movhi	r2,33045
8113a140:	108eda04 	addi	r2,r2,15208
8113a144:	e0fff817 	ldw	r3,-32(fp)
8113a148:	180690fa 	slli	r3,r3,3
8113a14c:	10c5883a 	add	r2,r2,r3
8113a150:	e0fffe17 	ldw	r3,-8(fp)
8113a154:	10c00015 	stw	r3,0(r2)
8113a158:	00a04574 	movhi	r2,33045
8113a15c:	108eda04 	addi	r2,r2,15208
8113a160:	e0fff817 	ldw	r3,-32(fp)
8113a164:	180690fa 	slli	r3,r3,3
8113a168:	10c5883a 	add	r2,r2,r3
8113a16c:	10800104 	addi	r2,r2,4
8113a170:	e0ffff17 	ldw	r3,-4(fp)
8113a174:	10c00015 	stw	r3,0(r2)
8113a178:	e0bffe17 	ldw	r2,-8(fp)
8113a17c:	10000526 	beq	r2,zero,8113a194 <alt_iic_isr_register+0xbc>
8113a180:	e0bff817 	ldw	r2,-32(fp)
8113a184:	100b883a 	mov	r5,r2
8113a188:	e13ffc17 	ldw	r4,-16(fp)
8113a18c:	1139f600 	call	81139f60 <alt_ic_irq_enable>
8113a190:	00000406 	br	8113a1a4 <alt_iic_isr_register+0xcc>
8113a194:	e0bff817 	ldw	r2,-32(fp)
8113a198:	100b883a 	mov	r5,r2
8113a19c:	e13ffc17 	ldw	r4,-16(fp)
8113a1a0:	1139ff00 	call	81139ff0 <alt_ic_irq_disable>
8113a1a4:	e0bff715 	stw	r2,-36(fp)
8113a1a8:	e0bffa17 	ldw	r2,-24(fp)
8113a1ac:	e0bff915 	stw	r2,-28(fp)
8113a1b0:	e0bff917 	ldw	r2,-28(fp)
8113a1b4:	1001703a 	wrctl	status,r2
8113a1b8:	e0bff717 	ldw	r2,-36(fp)
8113a1bc:	e037883a 	mov	sp,fp
8113a1c0:	dfc00117 	ldw	ra,4(sp)
8113a1c4:	df000017 	ldw	fp,0(sp)
8113a1c8:	dec00204 	addi	sp,sp,8
8113a1cc:	f800283a 	ret

8113a1d0 <alt_open_fd>:
8113a1d0:	defff904 	addi	sp,sp,-28
8113a1d4:	de00012e 	bgeu	sp,et,8113a1dc <alt_open_fd+0xc>
8113a1d8:	003b68fa 	trap	3
8113a1dc:	dfc00615 	stw	ra,24(sp)
8113a1e0:	df000515 	stw	fp,20(sp)
8113a1e4:	df000504 	addi	fp,sp,20
8113a1e8:	e13ffc15 	stw	r4,-16(fp)
8113a1ec:	e17ffd15 	stw	r5,-12(fp)
8113a1f0:	e1bffe15 	stw	r6,-8(fp)
8113a1f4:	e1ffff15 	stw	r7,-4(fp)
8113a1f8:	e1bfff17 	ldw	r6,-4(fp)
8113a1fc:	e17ffe17 	ldw	r5,-8(fp)
8113a200:	e13ffd17 	ldw	r4,-12(fp)
8113a204:	1126fcc0 	call	81126fcc <open>
8113a208:	e0bffb15 	stw	r2,-20(fp)
8113a20c:	e0bffb17 	ldw	r2,-20(fp)
8113a210:	10001c16 	blt	r2,zero,8113a284 <alt_open_fd+0xb4>
8113a214:	00a04534 	movhi	r2,33044
8113a218:	10baac04 	addi	r2,r2,-5456
8113a21c:	e0fffb17 	ldw	r3,-20(fp)
8113a220:	18c00324 	muli	r3,r3,12
8113a224:	10c5883a 	add	r2,r2,r3
8113a228:	10c00017 	ldw	r3,0(r2)
8113a22c:	e0bffc17 	ldw	r2,-16(fp)
8113a230:	10c00015 	stw	r3,0(r2)
8113a234:	00a04534 	movhi	r2,33044
8113a238:	10baac04 	addi	r2,r2,-5456
8113a23c:	e0fffb17 	ldw	r3,-20(fp)
8113a240:	18c00324 	muli	r3,r3,12
8113a244:	10c5883a 	add	r2,r2,r3
8113a248:	10800104 	addi	r2,r2,4
8113a24c:	10c00017 	ldw	r3,0(r2)
8113a250:	e0bffc17 	ldw	r2,-16(fp)
8113a254:	10c00115 	stw	r3,4(r2)
8113a258:	00a04534 	movhi	r2,33044
8113a25c:	10baac04 	addi	r2,r2,-5456
8113a260:	e0fffb17 	ldw	r3,-20(fp)
8113a264:	18c00324 	muli	r3,r3,12
8113a268:	10c5883a 	add	r2,r2,r3
8113a26c:	10800204 	addi	r2,r2,8
8113a270:	10c00017 	ldw	r3,0(r2)
8113a274:	e0bffc17 	ldw	r2,-16(fp)
8113a278:	10c00215 	stw	r3,8(r2)
8113a27c:	e13ffb17 	ldw	r4,-20(fp)
8113a280:	11272700 	call	81127270 <alt_release_fd>
8113a284:	0001883a 	nop
8113a288:	e037883a 	mov	sp,fp
8113a28c:	dfc00117 	ldw	ra,4(sp)
8113a290:	df000017 	ldw	fp,0(sp)
8113a294:	dec00204 	addi	sp,sp,8
8113a298:	f800283a 	ret

8113a29c <alt_io_redirect>:
8113a29c:	defffb04 	addi	sp,sp,-20
8113a2a0:	de00012e 	bgeu	sp,et,8113a2a8 <alt_io_redirect+0xc>
8113a2a4:	003b68fa 	trap	3
8113a2a8:	dfc00415 	stw	ra,16(sp)
8113a2ac:	df000315 	stw	fp,12(sp)
8113a2b0:	df000304 	addi	fp,sp,12
8113a2b4:	e13ffd15 	stw	r4,-12(fp)
8113a2b8:	e17ffe15 	stw	r5,-8(fp)
8113a2bc:	e1bfff15 	stw	r6,-4(fp)
8113a2c0:	01c07fc4 	movi	r7,511
8113a2c4:	01800044 	movi	r6,1
8113a2c8:	e17ffd17 	ldw	r5,-12(fp)
8113a2cc:	01204534 	movhi	r4,33044
8113a2d0:	213aaf04 	addi	r4,r4,-5444
8113a2d4:	113a1d00 	call	8113a1d0 <alt_open_fd>
8113a2d8:	01c07fc4 	movi	r7,511
8113a2dc:	000d883a 	mov	r6,zero
8113a2e0:	e17ffe17 	ldw	r5,-8(fp)
8113a2e4:	01204534 	movhi	r4,33044
8113a2e8:	213aac04 	addi	r4,r4,-5456
8113a2ec:	113a1d00 	call	8113a1d0 <alt_open_fd>
8113a2f0:	01c07fc4 	movi	r7,511
8113a2f4:	01800044 	movi	r6,1
8113a2f8:	e17fff17 	ldw	r5,-4(fp)
8113a2fc:	01204534 	movhi	r4,33044
8113a300:	213ab204 	addi	r4,r4,-5432
8113a304:	113a1d00 	call	8113a1d0 <alt_open_fd>
8113a308:	0001883a 	nop
8113a30c:	e037883a 	mov	sp,fp
8113a310:	dfc00117 	ldw	ra,4(sp)
8113a314:	df000017 	ldw	fp,0(sp)
8113a318:	dec00204 	addi	sp,sp,8
8113a31c:	f800283a 	ret

8113a320 <alt_printf>:
8113a320:	defff204 	addi	sp,sp,-56
8113a324:	de00012e 	bgeu	sp,et,8113a32c <alt_printf+0xc>
8113a328:	003b68fa 	trap	3
8113a32c:	dfc00a15 	stw	ra,40(sp)
8113a330:	df000915 	stw	fp,36(sp)
8113a334:	df000904 	addi	fp,sp,36
8113a338:	e13fff15 	stw	r4,-4(fp)
8113a33c:	e1400215 	stw	r5,8(fp)
8113a340:	e1800315 	stw	r6,12(fp)
8113a344:	e1c00415 	stw	r7,16(fp)
8113a348:	e0800204 	addi	r2,fp,8
8113a34c:	e0bffe15 	stw	r2,-8(fp)
8113a350:	e0bfff17 	ldw	r2,-4(fp)
8113a354:	e0bff715 	stw	r2,-36(fp)
8113a358:	00006f06 	br	8113a518 <alt_printf+0x1f8>
8113a35c:	e0bff807 	ldb	r2,-32(fp)
8113a360:	10800960 	cmpeqi	r2,r2,37
8113a364:	1000041e 	bne	r2,zero,8113a378 <alt_printf+0x58>
8113a368:	e0bff807 	ldb	r2,-32(fp)
8113a36c:	1009883a 	mov	r4,r2
8113a370:	113a5540 	call	8113a554 <alt_putchar>
8113a374:	00006806 	br	8113a518 <alt_printf+0x1f8>
8113a378:	e0bff717 	ldw	r2,-36(fp)
8113a37c:	10c00044 	addi	r3,r2,1
8113a380:	e0fff715 	stw	r3,-36(fp)
8113a384:	10800003 	ldbu	r2,0(r2)
8113a388:	e0bff805 	stb	r2,-32(fp)
8113a38c:	e0bff807 	ldb	r2,-32(fp)
8113a390:	10006926 	beq	r2,zero,8113a538 <alt_printf+0x218>
8113a394:	e0bff807 	ldb	r2,-32(fp)
8113a398:	10800958 	cmpnei	r2,r2,37
8113a39c:	1000041e 	bne	r2,zero,8113a3b0 <alt_printf+0x90>
8113a3a0:	e0bff807 	ldb	r2,-32(fp)
8113a3a4:	1009883a 	mov	r4,r2
8113a3a8:	113a5540 	call	8113a554 <alt_putchar>
8113a3ac:	00005a06 	br	8113a518 <alt_printf+0x1f8>
8113a3b0:	e0bff807 	ldb	r2,-32(fp)
8113a3b4:	108018d8 	cmpnei	r2,r2,99
8113a3b8:	1000081e 	bne	r2,zero,8113a3dc <alt_printf+0xbc>
8113a3bc:	e0bffe17 	ldw	r2,-8(fp)
8113a3c0:	10c00104 	addi	r3,r2,4
8113a3c4:	e0fffe15 	stw	r3,-8(fp)
8113a3c8:	10800017 	ldw	r2,0(r2)
8113a3cc:	e0bffd15 	stw	r2,-12(fp)
8113a3d0:	e13ffd17 	ldw	r4,-12(fp)
8113a3d4:	113a5540 	call	8113a554 <alt_putchar>
8113a3d8:	00004f06 	br	8113a518 <alt_printf+0x1f8>
8113a3dc:	e0bff807 	ldb	r2,-32(fp)
8113a3e0:	10801e18 	cmpnei	r2,r2,120
8113a3e4:	1000341e 	bne	r2,zero,8113a4b8 <alt_printf+0x198>
8113a3e8:	e0bffe17 	ldw	r2,-8(fp)
8113a3ec:	10c00104 	addi	r3,r2,4
8113a3f0:	e0fffe15 	stw	r3,-8(fp)
8113a3f4:	10800017 	ldw	r2,0(r2)
8113a3f8:	e0bffb15 	stw	r2,-20(fp)
8113a3fc:	e0bffb17 	ldw	r2,-20(fp)
8113a400:	1000031e 	bne	r2,zero,8113a410 <alt_printf+0xf0>
8113a404:	01000c04 	movi	r4,48
8113a408:	113a5540 	call	8113a554 <alt_putchar>
8113a40c:	00004206 	br	8113a518 <alt_printf+0x1f8>
8113a410:	00800704 	movi	r2,28
8113a414:	e0bff915 	stw	r2,-28(fp)
8113a418:	00000306 	br	8113a428 <alt_printf+0x108>
8113a41c:	e0bff917 	ldw	r2,-28(fp)
8113a420:	10bfff04 	addi	r2,r2,-4
8113a424:	e0bff915 	stw	r2,-28(fp)
8113a428:	00c003c4 	movi	r3,15
8113a42c:	e0bff917 	ldw	r2,-28(fp)
8113a430:	1884983a 	sll	r2,r3,r2
8113a434:	1007883a 	mov	r3,r2
8113a438:	e0bffb17 	ldw	r2,-20(fp)
8113a43c:	1884703a 	and	r2,r3,r2
8113a440:	103ff626 	beq	r2,zero,8113a41c <__reset+0xfb11a41c>
8113a444:	00001906 	br	8113a4ac <alt_printf+0x18c>
8113a448:	00c003c4 	movi	r3,15
8113a44c:	e0bff917 	ldw	r2,-28(fp)
8113a450:	1884983a 	sll	r2,r3,r2
8113a454:	1007883a 	mov	r3,r2
8113a458:	e0bffb17 	ldw	r2,-20(fp)
8113a45c:	1886703a 	and	r3,r3,r2
8113a460:	e0bff917 	ldw	r2,-28(fp)
8113a464:	1884d83a 	srl	r2,r3,r2
8113a468:	e0bffc15 	stw	r2,-16(fp)
8113a46c:	e0bffc17 	ldw	r2,-16(fp)
8113a470:	108002a8 	cmpgeui	r2,r2,10
8113a474:	1000041e 	bne	r2,zero,8113a488 <alt_printf+0x168>
8113a478:	e0bffc17 	ldw	r2,-16(fp)
8113a47c:	10800c04 	addi	r2,r2,48
8113a480:	e0bff805 	stb	r2,-32(fp)
8113a484:	00000306 	br	8113a494 <alt_printf+0x174>
8113a488:	e0bffc17 	ldw	r2,-16(fp)
8113a48c:	108015c4 	addi	r2,r2,87
8113a490:	e0bff805 	stb	r2,-32(fp)
8113a494:	e0bff807 	ldb	r2,-32(fp)
8113a498:	1009883a 	mov	r4,r2
8113a49c:	113a5540 	call	8113a554 <alt_putchar>
8113a4a0:	e0bff917 	ldw	r2,-28(fp)
8113a4a4:	10bfff04 	addi	r2,r2,-4
8113a4a8:	e0bff915 	stw	r2,-28(fp)
8113a4ac:	e0bff917 	ldw	r2,-28(fp)
8113a4b0:	103fe50e 	bge	r2,zero,8113a448 <__reset+0xfb11a448>
8113a4b4:	00001806 	br	8113a518 <alt_printf+0x1f8>
8113a4b8:	e0bff807 	ldb	r2,-32(fp)
8113a4bc:	10801cd8 	cmpnei	r2,r2,115
8113a4c0:	1000151e 	bne	r2,zero,8113a518 <alt_printf+0x1f8>
8113a4c4:	e0bffe17 	ldw	r2,-8(fp)
8113a4c8:	10c00104 	addi	r3,r2,4
8113a4cc:	e0fffe15 	stw	r3,-8(fp)
8113a4d0:	10800017 	ldw	r2,0(r2)
8113a4d4:	e0bffa15 	stw	r2,-24(fp)
8113a4d8:	00000906 	br	8113a500 <alt_printf+0x1e0>
8113a4dc:	e0bffa17 	ldw	r2,-24(fp)
8113a4e0:	10c00044 	addi	r3,r2,1
8113a4e4:	e0fffa15 	stw	r3,-24(fp)
8113a4e8:	10800003 	ldbu	r2,0(r2)
8113a4ec:	10803fcc 	andi	r2,r2,255
8113a4f0:	1080201c 	xori	r2,r2,128
8113a4f4:	10bfe004 	addi	r2,r2,-128
8113a4f8:	1009883a 	mov	r4,r2
8113a4fc:	113a5540 	call	8113a554 <alt_putchar>
8113a500:	e0bffa17 	ldw	r2,-24(fp)
8113a504:	10800003 	ldbu	r2,0(r2)
8113a508:	10803fcc 	andi	r2,r2,255
8113a50c:	1080201c 	xori	r2,r2,128
8113a510:	10bfe004 	addi	r2,r2,-128
8113a514:	103ff11e 	bne	r2,zero,8113a4dc <__reset+0xfb11a4dc>
8113a518:	e0bff717 	ldw	r2,-36(fp)
8113a51c:	10c00044 	addi	r3,r2,1
8113a520:	e0fff715 	stw	r3,-36(fp)
8113a524:	10800003 	ldbu	r2,0(r2)
8113a528:	e0bff805 	stb	r2,-32(fp)
8113a52c:	e0bff807 	ldb	r2,-32(fp)
8113a530:	103f8a1e 	bne	r2,zero,8113a35c <__reset+0xfb11a35c>
8113a534:	00000106 	br	8113a53c <alt_printf+0x21c>
8113a538:	0001883a 	nop
8113a53c:	0001883a 	nop
8113a540:	e037883a 	mov	sp,fp
8113a544:	dfc00117 	ldw	ra,4(sp)
8113a548:	df000017 	ldw	fp,0(sp)
8113a54c:	dec00504 	addi	sp,sp,20
8113a550:	f800283a 	ret

8113a554 <alt_putchar>:
8113a554:	defffd04 	addi	sp,sp,-12
8113a558:	de00012e 	bgeu	sp,et,8113a560 <alt_putchar+0xc>
8113a55c:	003b68fa 	trap	3
8113a560:	dfc00215 	stw	ra,8(sp)
8113a564:	df000115 	stw	fp,4(sp)
8113a568:	df000104 	addi	fp,sp,4
8113a56c:	e13fff15 	stw	r4,-4(fp)
8113a570:	d0a00517 	ldw	r2,-32748(gp)
8113a574:	10800217 	ldw	r2,8(r2)
8113a578:	100b883a 	mov	r5,r2
8113a57c:	e13fff17 	ldw	r4,-4(fp)
8113a580:	113abc80 	call	8113abc8 <putc>
8113a584:	e037883a 	mov	sp,fp
8113a588:	dfc00117 	ldw	ra,4(sp)
8113a58c:	df000017 	ldw	fp,0(sp)
8113a590:	dec00204 	addi	sp,sp,8
8113a594:	f800283a 	ret

8113a598 <altera_nios2_gen2_irq_init>:
8113a598:	deffff04 	addi	sp,sp,-4
8113a59c:	de00012e 	bgeu	sp,et,8113a5a4 <altera_nios2_gen2_irq_init+0xc>
8113a5a0:	003b68fa 	trap	3
8113a5a4:	df000015 	stw	fp,0(sp)
8113a5a8:	d839883a 	mov	fp,sp
8113a5ac:	000170fa 	wrctl	ienable,zero
8113a5b0:	0001883a 	nop
8113a5b4:	e037883a 	mov	sp,fp
8113a5b8:	df000017 	ldw	fp,0(sp)
8113a5bc:	dec00104 	addi	sp,sp,4
8113a5c0:	f800283a 	ret

8113a5c4 <OSCtxSw>:
8113a5c4:	defff504 	addi	sp,sp,-44
8113a5c8:	de002436 	bltu	sp,et,8113a65c <OSCtxSw+0x98>
8113a5cc:	d0e00517 	ldw	r3,-32748(gp)
8113a5d0:	d1208417 	ldw	r4,-32240(gp)
8113a5d4:	dfc00015 	stw	ra,0(sp)
8113a5d8:	df000115 	stw	fp,4(sp)
8113a5dc:	ddc00215 	stw	r23,8(sp)
8113a5e0:	dd800315 	stw	r22,12(sp)
8113a5e4:	dd400415 	stw	r21,16(sp)
8113a5e8:	dd000515 	stw	r20,20(sp)
8113a5ec:	dcc00615 	stw	r19,24(sp)
8113a5f0:	dc800715 	stw	r18,28(sp)
8113a5f4:	dc400815 	stw	r17,32(sp)
8113a5f8:	dc000915 	stw	r16,36(sp)
8113a5fc:	d8c00a15 	stw	r3,40(sp)
8113a600:	26c00015 	stw	sp,0(r4)
8113a604:	113a8600 	call	8113a860 <OSTaskSwHook>
8113a608:	d1207e17 	ldw	r4,-32264(gp)
8113a60c:	d1607587 	ldb	r5,-32298(gp)
8113a610:	d1208415 	stw	r4,-32240(gp)
8113a614:	d16075c5 	stb	r5,-32297(gp)
8113a618:	26c00017 	ldw	sp,0(r4)
8113a61c:	26000217 	ldw	et,8(r4)
8113a620:	d8c00a17 	ldw	r3,40(sp)
8113a624:	dfc00017 	ldw	ra,0(sp)
8113a628:	df000117 	ldw	fp,4(sp)
8113a62c:	ddc00217 	ldw	r23,8(sp)
8113a630:	dd800317 	ldw	r22,12(sp)
8113a634:	dd400417 	ldw	r21,16(sp)
8113a638:	dd000517 	ldw	r20,20(sp)
8113a63c:	dcc00617 	ldw	r19,24(sp)
8113a640:	dc800717 	ldw	r18,28(sp)
8113a644:	dc400817 	ldw	r17,32(sp)
8113a648:	dc000917 	ldw	r16,36(sp)
8113a64c:	d0e00515 	stw	r3,-32748(gp)
8113a650:	d6200015 	stw	et,-32768(gp)
8113a654:	dec00b04 	addi	sp,sp,44
8113a658:	f800283a 	ret
8113a65c:	003da0fa 	break	3

8113a660 <OSStartHighRdy>:
8113a660:	0025303a 	rdctl	r18,status
8113a664:	047fff84 	movi	r17,-2
8113a668:	9464703a 	and	r18,r18,r17
8113a66c:	9001703a 	wrctl	status,r18
8113a670:	113a8600 	call	8113a860 <OSTaskSwHook>
8113a674:	04800044 	movi	r18,1
8113a678:	d4a07305 	stb	r18,-32308(gp)
8113a67c:	003fe206 	br	8113a608 <__reset+0xfb11a608>

8113a680 <OSStartTsk>:
8113a680:	06c00004 	movi	sp,0
8113a684:	0005303a 	rdctl	r2,status
8113a688:	10800054 	ori	r2,r2,1
8113a68c:	1001703a 	wrctl	status,r2
8113a690:	d8800117 	ldw	r2,4(sp)
8113a694:	d9000017 	ldw	r4,0(sp)
8113a698:	dec00204 	addi	sp,sp,8
8113a69c:	103ee83a 	callr	r2
8113a6a0:	0001883a 	nop

8113a6a4 <OSTaskStkInit>:
8113a6a4:	defff704 	addi	sp,sp,-36
8113a6a8:	de00012e 	bgeu	sp,et,8113a6b0 <OSTaskStkInit+0xc>
8113a6ac:	003b68fa 	trap	3
8113a6b0:	dfc00815 	stw	ra,32(sp)
8113a6b4:	df000715 	stw	fp,28(sp)
8113a6b8:	df000704 	addi	fp,sp,28
8113a6bc:	e13ffc15 	stw	r4,-16(fp)
8113a6c0:	e17ffd15 	stw	r5,-12(fp)
8113a6c4:	e1bffe15 	stw	r6,-8(fp)
8113a6c8:	3805883a 	mov	r2,r7
8113a6cc:	e0bfff0d 	sth	r2,-4(fp)
8113a6d0:	e0fffe17 	ldw	r3,-8(fp)
8113a6d4:	00bfff04 	movi	r2,-4
8113a6d8:	1884703a 	and	r2,r3,r2
8113a6dc:	10bef704 	addi	r2,r2,-1060
8113a6e0:	e0bff915 	stw	r2,-28(fp)
8113a6e4:	01810904 	movi	r6,1060
8113a6e8:	000b883a 	mov	r5,zero
8113a6ec:	e13ff917 	ldw	r4,-28(fp)
8113a6f0:	11122140 	call	81112214 <memset>
8113a6f4:	e0bff917 	ldw	r2,-28(fp)
8113a6f8:	10c0bb04 	addi	r3,r2,748
8113a6fc:	e0bff917 	ldw	r2,-28(fp)
8113a700:	10c00115 	stw	r3,4(r2)
8113a704:	e0bff917 	ldw	r2,-28(fp)
8113a708:	10c0d504 	addi	r3,r2,852
8113a70c:	e0bff917 	ldw	r2,-28(fp)
8113a710:	10c00215 	stw	r3,8(r2)
8113a714:	e0bff917 	ldw	r2,-28(fp)
8113a718:	10c0ef04 	addi	r3,r2,956
8113a71c:	e0bff917 	ldw	r2,-28(fp)
8113a720:	10c00315 	stw	r3,12(r2)
8113a724:	e0fff917 	ldw	r3,-28(fp)
8113a728:	00a04534 	movhi	r2,33044
8113a72c:	10b87804 	addi	r2,r2,-7712
8113a730:	18800d15 	stw	r2,52(r3)
8113a734:	e0bff917 	ldw	r2,-28(fp)
8113a738:	00c00044 	movi	r3,1
8113a73c:	10c02915 	stw	r3,164(r2)
8113a740:	10002a15 	stw	zero,168(r2)
8113a744:	e0bff917 	ldw	r2,-28(fp)
8113a748:	00ccc384 	movi	r3,13070
8113a74c:	10c02b0d 	sth	r3,172(r2)
8113a750:	e0bff917 	ldw	r2,-28(fp)
8113a754:	00eaf344 	movi	r3,-21555
8113a758:	10c02b8d 	sth	r3,174(r2)
8113a75c:	e0bff917 	ldw	r2,-28(fp)
8113a760:	00c48d04 	movi	r3,4660
8113a764:	10c02c0d 	sth	r3,176(r2)
8113a768:	e0bff917 	ldw	r2,-28(fp)
8113a76c:	00f99b44 	movi	r3,-6547
8113a770:	10c02c8d 	sth	r3,178(r2)
8113a774:	e0bff917 	ldw	r2,-28(fp)
8113a778:	00f7bb04 	movi	r3,-8468
8113a77c:	10c02d0d 	sth	r3,180(r2)
8113a780:	e0bff917 	ldw	r2,-28(fp)
8113a784:	00c00144 	movi	r3,5
8113a788:	10c02d8d 	sth	r3,182(r2)
8113a78c:	e0bff917 	ldw	r2,-28(fp)
8113a790:	00c002c4 	movi	r3,11
8113a794:	10c02e0d 	sth	r3,184(r2)
8113a798:	e0bff917 	ldw	r2,-28(fp)
8113a79c:	e0bffa15 	stw	r2,-24(fp)
8113a7a0:	e0bffa17 	ldw	r2,-24(fp)
8113a7a4:	10bff304 	addi	r2,r2,-52
8113a7a8:	e0bffb15 	stw	r2,-20(fp)
8113a7ac:	e0bffb17 	ldw	r2,-20(fp)
8113a7b0:	10800c04 	addi	r2,r2,48
8113a7b4:	e0fffc17 	ldw	r3,-16(fp)
8113a7b8:	10c00015 	stw	r3,0(r2)
8113a7bc:	e0bffb17 	ldw	r2,-20(fp)
8113a7c0:	10800b04 	addi	r2,r2,44
8113a7c4:	e0fffd17 	ldw	r3,-12(fp)
8113a7c8:	10c00015 	stw	r3,0(r2)
8113a7cc:	e0bffb17 	ldw	r2,-20(fp)
8113a7d0:	10800a04 	addi	r2,r2,40
8113a7d4:	e0fff917 	ldw	r3,-28(fp)
8113a7d8:	10c00015 	stw	r3,0(r2)
8113a7dc:	00a04534 	movhi	r2,33044
8113a7e0:	10a9a004 	addi	r2,r2,-22912
8113a7e4:	10c00104 	addi	r3,r2,4
8113a7e8:	e0bffb17 	ldw	r2,-20(fp)
8113a7ec:	10c00015 	stw	r3,0(r2)
8113a7f0:	e0bffb17 	ldw	r2,-20(fp)
8113a7f4:	e037883a 	mov	sp,fp
8113a7f8:	dfc00117 	ldw	ra,4(sp)
8113a7fc:	df000017 	ldw	fp,0(sp)
8113a800:	dec00204 	addi	sp,sp,8
8113a804:	f800283a 	ret

8113a808 <OSTaskCreateHook>:
8113a808:	defffe04 	addi	sp,sp,-8
8113a80c:	de00012e 	bgeu	sp,et,8113a814 <OSTaskCreateHook+0xc>
8113a810:	003b68fa 	trap	3
8113a814:	df000115 	stw	fp,4(sp)
8113a818:	df000104 	addi	fp,sp,4
8113a81c:	e13fff15 	stw	r4,-4(fp)
8113a820:	0001883a 	nop
8113a824:	e037883a 	mov	sp,fp
8113a828:	df000017 	ldw	fp,0(sp)
8113a82c:	dec00104 	addi	sp,sp,4
8113a830:	f800283a 	ret

8113a834 <OSTaskDelHook>:
8113a834:	defffe04 	addi	sp,sp,-8
8113a838:	de00012e 	bgeu	sp,et,8113a840 <OSTaskDelHook+0xc>
8113a83c:	003b68fa 	trap	3
8113a840:	df000115 	stw	fp,4(sp)
8113a844:	df000104 	addi	fp,sp,4
8113a848:	e13fff15 	stw	r4,-4(fp)
8113a84c:	0001883a 	nop
8113a850:	e037883a 	mov	sp,fp
8113a854:	df000017 	ldw	fp,0(sp)
8113a858:	dec00104 	addi	sp,sp,4
8113a85c:	f800283a 	ret

8113a860 <OSTaskSwHook>:
8113a860:	deffff04 	addi	sp,sp,-4
8113a864:	de00012e 	bgeu	sp,et,8113a86c <OSTaskSwHook+0xc>
8113a868:	003b68fa 	trap	3
8113a86c:	df000015 	stw	fp,0(sp)
8113a870:	d839883a 	mov	fp,sp
8113a874:	0001883a 	nop
8113a878:	e037883a 	mov	sp,fp
8113a87c:	df000017 	ldw	fp,0(sp)
8113a880:	dec00104 	addi	sp,sp,4
8113a884:	f800283a 	ret

8113a888 <OSTaskStatHook>:
8113a888:	deffff04 	addi	sp,sp,-4
8113a88c:	de00012e 	bgeu	sp,et,8113a894 <OSTaskStatHook+0xc>
8113a890:	003b68fa 	trap	3
8113a894:	df000015 	stw	fp,0(sp)
8113a898:	d839883a 	mov	fp,sp
8113a89c:	0001883a 	nop
8113a8a0:	e037883a 	mov	sp,fp
8113a8a4:	df000017 	ldw	fp,0(sp)
8113a8a8:	dec00104 	addi	sp,sp,4
8113a8ac:	f800283a 	ret

8113a8b0 <OSTimeTickHook>:
8113a8b0:	defffe04 	addi	sp,sp,-8
8113a8b4:	de00012e 	bgeu	sp,et,8113a8bc <OSTimeTickHook+0xc>
8113a8b8:	003b68fa 	trap	3
8113a8bc:	dfc00115 	stw	ra,4(sp)
8113a8c0:	df000015 	stw	fp,0(sp)
8113a8c4:	d839883a 	mov	fp,sp
8113a8c8:	d0a0980b 	ldhu	r2,-32160(gp)
8113a8cc:	10800044 	addi	r2,r2,1
8113a8d0:	d0a0980d 	sth	r2,-32160(gp)
8113a8d4:	d0a0980b 	ldhu	r2,-32160(gp)
8113a8d8:	10bfffcc 	andi	r2,r2,65535
8113a8dc:	10803230 	cmpltui	r2,r2,200
8113a8e0:	1000021e 	bne	r2,zero,8113a8ec <OSTimeTickHook+0x3c>
8113a8e4:	d020980d 	sth	zero,-32160(gp)
8113a8e8:	11311c40 	call	811311c4 <OSTmrSignal>
8113a8ec:	0001883a 	nop
8113a8f0:	e037883a 	mov	sp,fp
8113a8f4:	dfc00117 	ldw	ra,4(sp)
8113a8f8:	df000017 	ldw	fp,0(sp)
8113a8fc:	dec00204 	addi	sp,sp,8
8113a900:	f800283a 	ret

8113a904 <OSInitHookBegin>:
8113a904:	deffff04 	addi	sp,sp,-4
8113a908:	de00012e 	bgeu	sp,et,8113a910 <OSInitHookBegin+0xc>
8113a90c:	003b68fa 	trap	3
8113a910:	df000015 	stw	fp,0(sp)
8113a914:	d839883a 	mov	fp,sp
8113a918:	d020980d 	sth	zero,-32160(gp)
8113a91c:	0001883a 	nop
8113a920:	e037883a 	mov	sp,fp
8113a924:	df000017 	ldw	fp,0(sp)
8113a928:	dec00104 	addi	sp,sp,4
8113a92c:	f800283a 	ret

8113a930 <OSInitHookEnd>:
8113a930:	deffff04 	addi	sp,sp,-4
8113a934:	de00012e 	bgeu	sp,et,8113a93c <OSInitHookEnd+0xc>
8113a938:	003b68fa 	trap	3
8113a93c:	df000015 	stw	fp,0(sp)
8113a940:	d839883a 	mov	fp,sp
8113a944:	0001883a 	nop
8113a948:	e037883a 	mov	sp,fp
8113a94c:	df000017 	ldw	fp,0(sp)
8113a950:	dec00104 	addi	sp,sp,4
8113a954:	f800283a 	ret

8113a958 <OSTaskIdleHook>:
8113a958:	deffff04 	addi	sp,sp,-4
8113a95c:	de00012e 	bgeu	sp,et,8113a964 <OSTaskIdleHook+0xc>
8113a960:	003b68fa 	trap	3
8113a964:	df000015 	stw	fp,0(sp)
8113a968:	d839883a 	mov	fp,sp
8113a96c:	0001883a 	nop
8113a970:	e037883a 	mov	sp,fp
8113a974:	df000017 	ldw	fp,0(sp)
8113a978:	dec00104 	addi	sp,sp,4
8113a97c:	f800283a 	ret

8113a980 <OSTCBInitHook>:
8113a980:	defffe04 	addi	sp,sp,-8
8113a984:	de00012e 	bgeu	sp,et,8113a98c <OSTCBInitHook+0xc>
8113a988:	003b68fa 	trap	3
8113a98c:	df000115 	stw	fp,4(sp)
8113a990:	df000104 	addi	fp,sp,4
8113a994:	e13fff15 	stw	r4,-4(fp)
8113a998:	0001883a 	nop
8113a99c:	e037883a 	mov	sp,fp
8113a9a0:	df000017 	ldw	fp,0(sp)
8113a9a4:	dec00104 	addi	sp,sp,4
8113a9a8:	f800283a 	ret

8113a9ac <alt_exception_cause_generated_bad_addr>:
8113a9ac:	defffe04 	addi	sp,sp,-8
8113a9b0:	de00012e 	bgeu	sp,et,8113a9b8 <alt_exception_cause_generated_bad_addr+0xc>
8113a9b4:	003b68fa 	trap	3
8113a9b8:	df000115 	stw	fp,4(sp)
8113a9bc:	df000104 	addi	fp,sp,4
8113a9c0:	e13fff15 	stw	r4,-4(fp)
8113a9c4:	e0bfff17 	ldw	r2,-4(fp)
8113a9c8:	10bffe84 	addi	r2,r2,-6
8113a9cc:	10c00428 	cmpgeui	r3,r2,16
8113a9d0:	18001a1e 	bne	r3,zero,8113aa3c <alt_exception_cause_generated_bad_addr+0x90>
8113a9d4:	100690ba 	slli	r3,r2,2
8113a9d8:	00a04534 	movhi	r2,33044
8113a9dc:	10aa7b04 	addi	r2,r2,-22036
8113a9e0:	1885883a 	add	r2,r3,r2
8113a9e4:	10800017 	ldw	r2,0(r2)
8113a9e8:	1000683a 	jmp	r2
8113a9ec:	8113aa2c 	andhi	r4,r16,20136
8113a9f0:	8113aa2c 	andhi	r4,r16,20136
8113a9f4:	8113aa3c 	xorhi	r4,r16,20136
8113a9f8:	8113aa3c 	xorhi	r4,r16,20136
8113a9fc:	8113aa3c 	xorhi	r4,r16,20136
8113aa00:	8113aa2c 	andhi	r4,r16,20136
8113aa04:	8113aa34 	orhi	r4,r16,20136
8113aa08:	8113aa3c 	xorhi	r4,r16,20136
8113aa0c:	8113aa2c 	andhi	r4,r16,20136
8113aa10:	8113aa2c 	andhi	r4,r16,20136
8113aa14:	8113aa3c 	xorhi	r4,r16,20136
8113aa18:	8113aa2c 	andhi	r4,r16,20136
8113aa1c:	8113aa34 	orhi	r4,r16,20136
8113aa20:	8113aa3c 	xorhi	r4,r16,20136
8113aa24:	8113aa3c 	xorhi	r4,r16,20136
8113aa28:	8113aa2c 	andhi	r4,r16,20136
8113aa2c:	00800044 	movi	r2,1
8113aa30:	00000306 	br	8113aa40 <alt_exception_cause_generated_bad_addr+0x94>
8113aa34:	0005883a 	mov	r2,zero
8113aa38:	00000106 	br	8113aa40 <alt_exception_cause_generated_bad_addr+0x94>
8113aa3c:	0005883a 	mov	r2,zero
8113aa40:	e037883a 	mov	sp,fp
8113aa44:	df000017 	ldw	fp,0(sp)
8113aa48:	dec00104 	addi	sp,sp,4
8113aa4c:	f800283a 	ret

8113aa50 <atexit>:
8113aa50:	200b883a 	mov	r5,r4
8113aa54:	000f883a 	mov	r7,zero
8113aa58:	000d883a 	mov	r6,zero
8113aa5c:	0009883a 	mov	r4,zero
8113aa60:	113ac981 	jmpi	8113ac98 <__register_exitproc>

8113aa64 <exit>:
8113aa64:	defffe04 	addi	sp,sp,-8
8113aa68:	000b883a 	mov	r5,zero
8113aa6c:	de00012e 	bgeu	sp,et,8113aa74 <exit+0x10>
8113aa70:	003b68fa 	trap	3
8113aa74:	dc000015 	stw	r16,0(sp)
8113aa78:	dfc00115 	stw	ra,4(sp)
8113aa7c:	2021883a 	mov	r16,r4
8113aa80:	113adb80 	call	8113adb8 <__call_exitprocs>
8113aa84:	00a04534 	movhi	r2,33044
8113aa88:	10bf9c04 	addi	r2,r2,-400
8113aa8c:	11000017 	ldw	r4,0(r2)
8113aa90:	20800f17 	ldw	r2,60(r4)
8113aa94:	10000126 	beq	r2,zero,8113aa9c <exit+0x38>
8113aa98:	103ee83a 	callr	r2
8113aa9c:	8009883a 	mov	r4,r16
8113aaa0:	113af400 	call	8113af40 <_exit>

8113aaa4 <memcmp>:
8113aaa4:	01c000c4 	movi	r7,3
8113aaa8:	3980192e 	bgeu	r7,r6,8113ab10 <memcmp+0x6c>
8113aaac:	2144b03a 	or	r2,r4,r5
8113aab0:	11c4703a 	and	r2,r2,r7
8113aab4:	10000f26 	beq	r2,zero,8113aaf4 <memcmp+0x50>
8113aab8:	20800003 	ldbu	r2,0(r4)
8113aabc:	28c00003 	ldbu	r3,0(r5)
8113aac0:	10c0151e 	bne	r2,r3,8113ab18 <memcmp+0x74>
8113aac4:	31bfff84 	addi	r6,r6,-2
8113aac8:	01ffffc4 	movi	r7,-1
8113aacc:	00000406 	br	8113aae0 <memcmp+0x3c>
8113aad0:	20800003 	ldbu	r2,0(r4)
8113aad4:	28c00003 	ldbu	r3,0(r5)
8113aad8:	31bfffc4 	addi	r6,r6,-1
8113aadc:	10c00e1e 	bne	r2,r3,8113ab18 <memcmp+0x74>
8113aae0:	21000044 	addi	r4,r4,1
8113aae4:	29400044 	addi	r5,r5,1
8113aae8:	31fff91e 	bne	r6,r7,8113aad0 <__reset+0xfb11aad0>
8113aaec:	0005883a 	mov	r2,zero
8113aaf0:	f800283a 	ret
8113aaf4:	20c00017 	ldw	r3,0(r4)
8113aaf8:	28800017 	ldw	r2,0(r5)
8113aafc:	18bfee1e 	bne	r3,r2,8113aab8 <__reset+0xfb11aab8>
8113ab00:	31bfff04 	addi	r6,r6,-4
8113ab04:	21000104 	addi	r4,r4,4
8113ab08:	29400104 	addi	r5,r5,4
8113ab0c:	39bff936 	bltu	r7,r6,8113aaf4 <__reset+0xfb11aaf4>
8113ab10:	303fe91e 	bne	r6,zero,8113aab8 <__reset+0xfb11aab8>
8113ab14:	003ff506 	br	8113aaec <__reset+0xfb11aaec>
8113ab18:	10c5c83a 	sub	r2,r2,r3
8113ab1c:	f800283a 	ret

8113ab20 <_putc_r>:
8113ab20:	defffc04 	addi	sp,sp,-16
8113ab24:	de00012e 	bgeu	sp,et,8113ab2c <_putc_r+0xc>
8113ab28:	003b68fa 	trap	3
8113ab2c:	dc000215 	stw	r16,8(sp)
8113ab30:	dfc00315 	stw	ra,12(sp)
8113ab34:	2021883a 	mov	r16,r4
8113ab38:	20000226 	beq	r4,zero,8113ab44 <_putc_r+0x24>
8113ab3c:	20800e17 	ldw	r2,56(r4)
8113ab40:	10001b26 	beq	r2,zero,8113abb0 <_putc_r+0x90>
8113ab44:	30800217 	ldw	r2,8(r6)
8113ab48:	10bfffc4 	addi	r2,r2,-1
8113ab4c:	30800215 	stw	r2,8(r6)
8113ab50:	10000a16 	blt	r2,zero,8113ab7c <_putc_r+0x5c>
8113ab54:	30800017 	ldw	r2,0(r6)
8113ab58:	11400005 	stb	r5,0(r2)
8113ab5c:	30800017 	ldw	r2,0(r6)
8113ab60:	10c00044 	addi	r3,r2,1
8113ab64:	30c00015 	stw	r3,0(r6)
8113ab68:	10800003 	ldbu	r2,0(r2)
8113ab6c:	dfc00317 	ldw	ra,12(sp)
8113ab70:	dc000217 	ldw	r16,8(sp)
8113ab74:	dec00404 	addi	sp,sp,16
8113ab78:	f800283a 	ret
8113ab7c:	30c00617 	ldw	r3,24(r6)
8113ab80:	10c00616 	blt	r2,r3,8113ab9c <_putc_r+0x7c>
8113ab84:	30800017 	ldw	r2,0(r6)
8113ab88:	00c00284 	movi	r3,10
8113ab8c:	11400005 	stb	r5,0(r2)
8113ab90:	30800017 	ldw	r2,0(r6)
8113ab94:	11400003 	ldbu	r5,0(r2)
8113ab98:	28fff11e 	bne	r5,r3,8113ab60 <__reset+0xfb11ab60>
8113ab9c:	8009883a 	mov	r4,r16
8113aba0:	dfc00317 	ldw	ra,12(sp)
8113aba4:	dc000217 	ldw	r16,8(sp)
8113aba8:	dec00404 	addi	sp,sp,16
8113abac:	112355c1 	jmpi	8112355c <__swbuf_r>
8113abb0:	d9400015 	stw	r5,0(sp)
8113abb4:	d9800115 	stw	r6,4(sp)
8113abb8:	111ab700 	call	8111ab70 <__sinit>
8113abbc:	d9800117 	ldw	r6,4(sp)
8113abc0:	d9400017 	ldw	r5,0(sp)
8113abc4:	003fdf06 	br	8113ab44 <__reset+0xfb11ab44>

8113abc8 <putc>:
8113abc8:	00a04534 	movhi	r2,33044
8113abcc:	defffc04 	addi	sp,sp,-16
8113abd0:	10bf9d04 	addi	r2,r2,-396
8113abd4:	de00012e 	bgeu	sp,et,8113abdc <putc+0x14>
8113abd8:	003b68fa 	trap	3
8113abdc:	dc000115 	stw	r16,4(sp)
8113abe0:	14000017 	ldw	r16,0(r2)
8113abe4:	dc400215 	stw	r17,8(sp)
8113abe8:	dfc00315 	stw	ra,12(sp)
8113abec:	2023883a 	mov	r17,r4
8113abf0:	80000226 	beq	r16,zero,8113abfc <putc+0x34>
8113abf4:	80800e17 	ldw	r2,56(r16)
8113abf8:	10001a26 	beq	r2,zero,8113ac64 <putc+0x9c>
8113abfc:	28800217 	ldw	r2,8(r5)
8113ac00:	10bfffc4 	addi	r2,r2,-1
8113ac04:	28800215 	stw	r2,8(r5)
8113ac08:	10000b16 	blt	r2,zero,8113ac38 <putc+0x70>
8113ac0c:	28800017 	ldw	r2,0(r5)
8113ac10:	14400005 	stb	r17,0(r2)
8113ac14:	28800017 	ldw	r2,0(r5)
8113ac18:	10c00044 	addi	r3,r2,1
8113ac1c:	28c00015 	stw	r3,0(r5)
8113ac20:	10800003 	ldbu	r2,0(r2)
8113ac24:	dfc00317 	ldw	ra,12(sp)
8113ac28:	dc400217 	ldw	r17,8(sp)
8113ac2c:	dc000117 	ldw	r16,4(sp)
8113ac30:	dec00404 	addi	sp,sp,16
8113ac34:	f800283a 	ret
8113ac38:	28c00617 	ldw	r3,24(r5)
8113ac3c:	10c00e16 	blt	r2,r3,8113ac78 <putc+0xb0>
8113ac40:	28800017 	ldw	r2,0(r5)
8113ac44:	01000284 	movi	r4,10
8113ac48:	14400005 	stb	r17,0(r2)
8113ac4c:	28800017 	ldw	r2,0(r5)
8113ac50:	10c00003 	ldbu	r3,0(r2)
8113ac54:	193ff01e 	bne	r3,r4,8113ac18 <__reset+0xfb11ac18>
8113ac58:	280d883a 	mov	r6,r5
8113ac5c:	180b883a 	mov	r5,r3
8113ac60:	00000706 	br	8113ac80 <putc+0xb8>
8113ac64:	8009883a 	mov	r4,r16
8113ac68:	d9400015 	stw	r5,0(sp)
8113ac6c:	111ab700 	call	8111ab70 <__sinit>
8113ac70:	d9400017 	ldw	r5,0(sp)
8113ac74:	003fe106 	br	8113abfc <__reset+0xfb11abfc>
8113ac78:	280d883a 	mov	r6,r5
8113ac7c:	880b883a 	mov	r5,r17
8113ac80:	8009883a 	mov	r4,r16
8113ac84:	dfc00317 	ldw	ra,12(sp)
8113ac88:	dc400217 	ldw	r17,8(sp)
8113ac8c:	dc000117 	ldw	r16,4(sp)
8113ac90:	dec00404 	addi	sp,sp,16
8113ac94:	112355c1 	jmpi	8112355c <__swbuf_r>

8113ac98 <__register_exitproc>:
8113ac98:	defffa04 	addi	sp,sp,-24
8113ac9c:	de00012e 	bgeu	sp,et,8113aca4 <__register_exitproc+0xc>
8113aca0:	003b68fa 	trap	3
8113aca4:	dc000315 	stw	r16,12(sp)
8113aca8:	04204534 	movhi	r16,33044
8113acac:	843f9c04 	addi	r16,r16,-400
8113acb0:	80c00017 	ldw	r3,0(r16)
8113acb4:	dc400415 	stw	r17,16(sp)
8113acb8:	dfc00515 	stw	ra,20(sp)
8113acbc:	18805217 	ldw	r2,328(r3)
8113acc0:	2023883a 	mov	r17,r4
8113acc4:	10003726 	beq	r2,zero,8113ada4 <__register_exitproc+0x10c>
8113acc8:	10c00117 	ldw	r3,4(r2)
8113accc:	010007c4 	movi	r4,31
8113acd0:	20c00e16 	blt	r4,r3,8113ad0c <__register_exitproc+0x74>
8113acd4:	1a000044 	addi	r8,r3,1
8113acd8:	8800221e 	bne	r17,zero,8113ad64 <__register_exitproc+0xcc>
8113acdc:	18c00084 	addi	r3,r3,2
8113ace0:	18c7883a 	add	r3,r3,r3
8113ace4:	18c7883a 	add	r3,r3,r3
8113ace8:	12000115 	stw	r8,4(r2)
8113acec:	10c7883a 	add	r3,r2,r3
8113acf0:	19400015 	stw	r5,0(r3)
8113acf4:	0005883a 	mov	r2,zero
8113acf8:	dfc00517 	ldw	ra,20(sp)
8113acfc:	dc400417 	ldw	r17,16(sp)
8113ad00:	dc000317 	ldw	r16,12(sp)
8113ad04:	dec00604 	addi	sp,sp,24
8113ad08:	f800283a 	ret
8113ad0c:	00800034 	movhi	r2,0
8113ad10:	10800004 	addi	r2,r2,0
8113ad14:	10002626 	beq	r2,zero,8113adb0 <__register_exitproc+0x118>
8113ad18:	01006404 	movi	r4,400
8113ad1c:	d9400015 	stw	r5,0(sp)
8113ad20:	d9800115 	stw	r6,4(sp)
8113ad24:	d9c00215 	stw	r7,8(sp)
8113ad28:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113ad2c:	d9400017 	ldw	r5,0(sp)
8113ad30:	d9800117 	ldw	r6,4(sp)
8113ad34:	d9c00217 	ldw	r7,8(sp)
8113ad38:	10001d26 	beq	r2,zero,8113adb0 <__register_exitproc+0x118>
8113ad3c:	81000017 	ldw	r4,0(r16)
8113ad40:	10000115 	stw	zero,4(r2)
8113ad44:	02000044 	movi	r8,1
8113ad48:	22405217 	ldw	r9,328(r4)
8113ad4c:	0007883a 	mov	r3,zero
8113ad50:	12400015 	stw	r9,0(r2)
8113ad54:	20805215 	stw	r2,328(r4)
8113ad58:	10006215 	stw	zero,392(r2)
8113ad5c:	10006315 	stw	zero,396(r2)
8113ad60:	883fde26 	beq	r17,zero,8113acdc <__reset+0xfb11acdc>
8113ad64:	18c9883a 	add	r4,r3,r3
8113ad68:	2109883a 	add	r4,r4,r4
8113ad6c:	1109883a 	add	r4,r2,r4
8113ad70:	21802215 	stw	r6,136(r4)
8113ad74:	01800044 	movi	r6,1
8113ad78:	12406217 	ldw	r9,392(r2)
8113ad7c:	30cc983a 	sll	r6,r6,r3
8113ad80:	4992b03a 	or	r9,r9,r6
8113ad84:	12406215 	stw	r9,392(r2)
8113ad88:	21c04215 	stw	r7,264(r4)
8113ad8c:	01000084 	movi	r4,2
8113ad90:	893fd21e 	bne	r17,r4,8113acdc <__reset+0xfb11acdc>
8113ad94:	11006317 	ldw	r4,396(r2)
8113ad98:	218cb03a 	or	r6,r4,r6
8113ad9c:	11806315 	stw	r6,396(r2)
8113ada0:	003fce06 	br	8113acdc <__reset+0xfb11acdc>
8113ada4:	18805304 	addi	r2,r3,332
8113ada8:	18805215 	stw	r2,328(r3)
8113adac:	003fc606 	br	8113acc8 <__reset+0xfb11acc8>
8113adb0:	00bfffc4 	movi	r2,-1
8113adb4:	003fd006 	br	8113acf8 <__reset+0xfb11acf8>

8113adb8 <__call_exitprocs>:
8113adb8:	defff504 	addi	sp,sp,-44
8113adbc:	de00012e 	bgeu	sp,et,8113adc4 <__call_exitprocs+0xc>
8113adc0:	003b68fa 	trap	3
8113adc4:	df000915 	stw	fp,36(sp)
8113adc8:	dd400615 	stw	r21,24(sp)
8113adcc:	dc800315 	stw	r18,12(sp)
8113add0:	dfc00a15 	stw	ra,40(sp)
8113add4:	ddc00815 	stw	r23,32(sp)
8113add8:	dd800715 	stw	r22,28(sp)
8113addc:	dd000515 	stw	r20,20(sp)
8113ade0:	dcc00415 	stw	r19,16(sp)
8113ade4:	dc400215 	stw	r17,8(sp)
8113ade8:	dc000115 	stw	r16,4(sp)
8113adec:	d9000015 	stw	r4,0(sp)
8113adf0:	2839883a 	mov	fp,r5
8113adf4:	04800044 	movi	r18,1
8113adf8:	057fffc4 	movi	r21,-1
8113adfc:	00a04534 	movhi	r2,33044
8113ae00:	10bf9c04 	addi	r2,r2,-400
8113ae04:	12000017 	ldw	r8,0(r2)
8113ae08:	45005217 	ldw	r20,328(r8)
8113ae0c:	44c05204 	addi	r19,r8,328
8113ae10:	a0001c26 	beq	r20,zero,8113ae84 <__call_exitprocs+0xcc>
8113ae14:	a0800117 	ldw	r2,4(r20)
8113ae18:	15ffffc4 	addi	r23,r2,-1
8113ae1c:	b8000d16 	blt	r23,zero,8113ae54 <__call_exitprocs+0x9c>
8113ae20:	14000044 	addi	r16,r2,1
8113ae24:	8421883a 	add	r16,r16,r16
8113ae28:	8421883a 	add	r16,r16,r16
8113ae2c:	84402004 	addi	r17,r16,128
8113ae30:	a463883a 	add	r17,r20,r17
8113ae34:	a421883a 	add	r16,r20,r16
8113ae38:	e0001e26 	beq	fp,zero,8113aeb4 <__call_exitprocs+0xfc>
8113ae3c:	80804017 	ldw	r2,256(r16)
8113ae40:	e0801c26 	beq	fp,r2,8113aeb4 <__call_exitprocs+0xfc>
8113ae44:	bdffffc4 	addi	r23,r23,-1
8113ae48:	843fff04 	addi	r16,r16,-4
8113ae4c:	8c7fff04 	addi	r17,r17,-4
8113ae50:	bd7ff91e 	bne	r23,r21,8113ae38 <__reset+0xfb11ae38>
8113ae54:	00800034 	movhi	r2,0
8113ae58:	10800004 	addi	r2,r2,0
8113ae5c:	10000926 	beq	r2,zero,8113ae84 <__call_exitprocs+0xcc>
8113ae60:	a0800117 	ldw	r2,4(r20)
8113ae64:	1000301e 	bne	r2,zero,8113af28 <__call_exitprocs+0x170>
8113ae68:	a0800017 	ldw	r2,0(r20)
8113ae6c:	10003226 	beq	r2,zero,8113af38 <__call_exitprocs+0x180>
8113ae70:	a009883a 	mov	r4,r20
8113ae74:	98800015 	stw	r2,0(r19)
8113ae78:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113ae7c:	9d000017 	ldw	r20,0(r19)
8113ae80:	a03fe41e 	bne	r20,zero,8113ae14 <__reset+0xfb11ae14>
8113ae84:	dfc00a17 	ldw	ra,40(sp)
8113ae88:	df000917 	ldw	fp,36(sp)
8113ae8c:	ddc00817 	ldw	r23,32(sp)
8113ae90:	dd800717 	ldw	r22,28(sp)
8113ae94:	dd400617 	ldw	r21,24(sp)
8113ae98:	dd000517 	ldw	r20,20(sp)
8113ae9c:	dcc00417 	ldw	r19,16(sp)
8113aea0:	dc800317 	ldw	r18,12(sp)
8113aea4:	dc400217 	ldw	r17,8(sp)
8113aea8:	dc000117 	ldw	r16,4(sp)
8113aeac:	dec00b04 	addi	sp,sp,44
8113aeb0:	f800283a 	ret
8113aeb4:	a0800117 	ldw	r2,4(r20)
8113aeb8:	80c00017 	ldw	r3,0(r16)
8113aebc:	10bfffc4 	addi	r2,r2,-1
8113aec0:	15c01426 	beq	r2,r23,8113af14 <__call_exitprocs+0x15c>
8113aec4:	80000015 	stw	zero,0(r16)
8113aec8:	183fde26 	beq	r3,zero,8113ae44 <__reset+0xfb11ae44>
8113aecc:	95c8983a 	sll	r4,r18,r23
8113aed0:	a0806217 	ldw	r2,392(r20)
8113aed4:	a5800117 	ldw	r22,4(r20)
8113aed8:	2084703a 	and	r2,r4,r2
8113aedc:	10000b26 	beq	r2,zero,8113af0c <__call_exitprocs+0x154>
8113aee0:	a0806317 	ldw	r2,396(r20)
8113aee4:	2088703a 	and	r4,r4,r2
8113aee8:	20000c1e 	bne	r4,zero,8113af1c <__call_exitprocs+0x164>
8113aeec:	89400017 	ldw	r5,0(r17)
8113aef0:	d9000017 	ldw	r4,0(sp)
8113aef4:	183ee83a 	callr	r3
8113aef8:	a0800117 	ldw	r2,4(r20)
8113aefc:	15bfbf1e 	bne	r2,r22,8113adfc <__reset+0xfb11adfc>
8113af00:	98800017 	ldw	r2,0(r19)
8113af04:	153fcf26 	beq	r2,r20,8113ae44 <__reset+0xfb11ae44>
8113af08:	003fbc06 	br	8113adfc <__reset+0xfb11adfc>
8113af0c:	183ee83a 	callr	r3
8113af10:	003ff906 	br	8113aef8 <__reset+0xfb11aef8>
8113af14:	a5c00115 	stw	r23,4(r20)
8113af18:	003feb06 	br	8113aec8 <__reset+0xfb11aec8>
8113af1c:	89000017 	ldw	r4,0(r17)
8113af20:	183ee83a 	callr	r3
8113af24:	003ff406 	br	8113aef8 <__reset+0xfb11aef8>
8113af28:	a0800017 	ldw	r2,0(r20)
8113af2c:	a027883a 	mov	r19,r20
8113af30:	1029883a 	mov	r20,r2
8113af34:	003fb606 	br	8113ae10 <__reset+0xfb11ae10>
8113af38:	0005883a 	mov	r2,zero
8113af3c:	003ffb06 	br	8113af2c <__reset+0xfb11af2c>

8113af40 <_exit>:
8113af40:	defffd04 	addi	sp,sp,-12
8113af44:	de00012e 	bgeu	sp,et,8113af4c <_exit+0xc>
8113af48:	003b68fa 	trap	3
8113af4c:	df000215 	stw	fp,8(sp)
8113af50:	df000204 	addi	fp,sp,8
8113af54:	e13fff15 	stw	r4,-4(fp)
8113af58:	d0207305 	stb	zero,-32308(gp)
8113af5c:	e0bfff17 	ldw	r2,-4(fp)
8113af60:	e0bffe15 	stw	r2,-8(fp)
8113af64:	e0bffe17 	ldw	r2,-8(fp)
8113af68:	10000226 	beq	r2,zero,8113af74 <_exit+0x34>
8113af6c:	002af070 	cmpltui	zero,zero,43969
8113af70:	00000106 	br	8113af78 <_exit+0x38>
8113af74:	002af0b0 	cmpltui	zero,zero,43970
8113af78:	003fff06 	br	8113af78 <__reset+0xfb11af78>
