
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81100244

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x00026f20 memsz 0x0002e98c flags rwx
    LOAD off    0x00028000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00028000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00024430  81100244  81100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b80  81124674  81124674  00025674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d4c  811251f4  811251f4  000261f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007a6c  81126f40  81126f40  00027f40  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8112e9ac  8112e9ac  00028000  2**0
                  CONTENTS
  7 .descriptor_memory 00000000  81200800  81200800  00028000  2**0
                  CONTENTS
  8 .ext_flash    00000000  86020020  86020020  00028000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00028000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 000015c0  00000000  00000000  00028028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00043d75  00000000  00000000  000295e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000fa68  00000000  00000000  0006d35d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014af1  00000000  00000000  0007cdc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000045d8  00000000  00000000  000918b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000067eb  00000000  00000000  00095e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000256ab  00000000  00000000  0009c67b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000040  00000000  00000000  000c1d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002178  00000000  00000000  000c1d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  000ca1d9  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  000ca1df  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000ca1eb  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000ca1ec  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000ca1ed  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000ca1f1  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000ca1f5  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  000ca1f9  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000a  00000000  00000000  000ca204  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000a  00000000  00000000  000ca20e  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000011  00000000  00000000  000ca218  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003f  00000000  00000000  000ca229  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00277c09  00000000  00000000  000ca268  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
81100244 l    d  .text	00000000 .text
81124674 l    d  .rodata	00000000 .rodata
811251f4 l    d  .rwdata	00000000 .rwdata
81126f40 l    d  .bss	00000000 .bss
8112e9ac l    d  .onchip_memory	00000000 .onchip_memory
81200800 l    d  .descriptor_memory	00000000 .descriptor_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
811251f4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
811017c4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
8112474a l     O .rodata	00000010 zeroes.4404
81103e5c l     F .text	000000bc __sbprintf
8112475a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
81124772 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
81124895 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
811059ac l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
811074dc l     F .text	00000008 __fp_unlock
811074f0 l     F .text	0000019c __sinit.part.1
8110768c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
81125a40 l     O .rwdata	00000020 lc_ctype_charset
81125a20 l     O .rwdata	00000020 lc_message_charset
81125a60 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
81124a34 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8110a618 l     F .text	00000064 sulp
81124b7c l     O .rodata	00000014 fpi.2737
81124b90 l     O .rodata	00000028 tinytens
81124b68 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
81124bb8 l     O .rodata	00000010 zeroes.4389
81124bc8 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
8110ec58 l     F .text	000000fc __sprint_r.part.0
81124be8 l     O .rodata	00000010 blanks.4348
81124bd8 l     O .rodata	00000010 zeroes.4349
811101e4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
81110670 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
81124d08 l     O .rodata	00000010 blanks.4332
81124cf8 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
811160fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
81116208 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81116234 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
81116320 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
81116400 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
811165cc l     F .text	0000003c alt_get_errno
81116608 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
81116820 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
81126ea4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
81116a6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
81126ea8 l     O .rwdata	00000004 lockid
81126f70 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
81126eac l     O .rwdata	00000004 lockid
81126f78 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
8111849c l     F .text	00000048 OS_InitMisc
811184e4 l     F .text	0000006c OS_InitRdyList
81118650 l     F .text	000000e4 OS_InitTCBList
811183bc l     F .text	000000e0 OS_InitEventList
81118550 l     F .text	00000080 OS_InitTaskIdle
811185d0 l     F .text	00000080 OS_InitTaskStat
811188c0 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
8111a5e0 l     F .text	000000f4 OS_FlagTaskRdy
8111a3a0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
8111e68c l     F .text	00000034 alt_dev_reg
81125c40 l     O .rwdata	0000106c jtag_uart_0
81126cac l     O .rwdata	00000030 sgdma_rx
81126cdc l     O .rwdata	00000030 sgdma_tx
81126d0c l     O .rwdata	000000d0 rs232_uart
81126ddc l     O .rwdata	00000064 dma_DDR_M
81126e40 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
8111ea8c l     F .text	000002a4 altera_avalon_jtag_uart_irq
8111ed30 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
8111f50c l     F .text	0000003c alt_get_errno
8112013c l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
811202a0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81120604 l     F .text	0000009c altera_avalon_uart_irq
811206a0 l     F .text	00000138 altera_avalon_uart_rxirq
811207d8 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
811209d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
81120c74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
81120ee8 l     F .text	0000003c alt_get_errno
81120f24 l     F .text	00000094 alt_msgdma_write_standard_descriptor
81120fb8 l     F .text	0000012c alt_msgdma_write_extended_descriptor
811210e4 l     F .text	00000184 alt_msgdma_irq
81121268 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
811212f4 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
81121448 l     F .text	00000338 alt_msgdma_descriptor_async_transfer
81121780 l     F .text	00000400 alt_msgdma_descriptor_sync_transfer
81121e50 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
81121ef4 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
81123160 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
81123814 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81126fe0 g     O .bss	00000004 alt_instruction_exception_handler
81122df4 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
81109bf0 g     F .text	00000074 _mprec_log10
81126efa g     O .rwdata	00000002 OSTaskNameSize
81109cdc g     F .text	0000008c __any_on
81108600 g     F .text	00000054 _isatty_r
81124a40 g     O .rodata	00000028 __mprec_tinytens
81116510 g     F .text	000000bc alt_main
811016f0 g     F .text	000000c0 _puts_r
8112e8ac g     O .bss	00000100 alt_irq
81108760 g     F .text	00000060 _lseek_r
8111ae00 g     F .text	000000cc OS_MemInit
8111e62c g     F .text	00000060 OSTimeSet
8110787c g     F .text	000000ac __sflags
81114a80 g     F .text	00000088 .hidden __eqdf2
81121c30 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
81117110 g     F .text	00000610 OSEventPendMulti
8112e9ac g       *ABS*	00000000 __alt_heap_start
81123fb0 g     F .text	00000024 OSTaskCreateHook
8112700c g     O .bss	00002000 task1_stk
811016b4 g     F .text	0000003c printf
81126ed2 g     O .rwdata	00000002 OSMboxEn
8111f66c g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
81117778 g     F .text	0000004c OSIntEnter
81112830 g     F .text	0000009c _wcrtomb_r
81101b4c g     F .text	0000005c __sseek
8110782c g     F .text	00000010 __sinit
811126d8 g     F .text	00000140 __swbuf_r
81126ee2 g     O .rwdata	00000002 OSQEn
81108684 g     F .text	0000007c _setlocale_r
81107694 g     F .text	00000068 __sfmoreglue
8110ec40 g     F .text	00000018 ungetc
81116de4 g     F .text	000000cc __malloc_unlock
81124018 g     F .text	00000020 OSTaskStatHook
81126f80 g     O .bss	00000001 OSLockNesting
8110a67c g     F .text	000015f8 _strtod_r
81126f20 g     O .rwdata	00000002 OSDataSize
81126f81 g     O .bss	00000001 OSRunning
8111fd84 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
81126f40 g     O .bss	00000004 fp
81108c10 g     F .text	0000015c memmove
81124058 g     F .text	00000020 OSInitHookBegin
81126f18 g     O .rwdata	00000002 OSTmrSize
81107814 g     F .text	00000018 _cleanup
81108d6c g     F .text	000000a8 _Balloc
81121b80 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
81126f84 g     O .bss	00000004 OSIdleCtr
81114b08 g     F .text	000000dc .hidden __gtdf2
81123d60 g     F .text	00000024 altera_nios2_gen2_irq_init
81123e30 g       .text	00000000 OSStartTsk
81118c00 g     F .text	000002d4 OS_TCBInit
86020000 g     F .entry	00000000 __reset
81126f1e g     O .rwdata	00000002 OSTmrWheelTblSize
8111f8d4 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
81126ebe g     O .rwdata	00000002 OSEventSize
81126f88 g     O .bss	00000001 OSPrioHighRdy
811009d8 g     F .text	0000005c _fstat_r
81123fd4 g     F .text	00000024 OSTaskDelHook
81126f44 g     O .bss	00000004 errno
8110573c g     F .text	0000001c __svfscanf
81101ac8 g     F .text	00000008 __seofread
81123e10 g       .text	00000000 OSStartHighRdy
8111d0cc g     F .text	000001e4 OSTaskCreateExt
8111149c g     F .text	0000123c ___svfiprintf_internal_r
81119ee8 g     F .text	00000060 OSFlagPendGetFlagsRdy
81126efe g     O .rwdata	00000002 OSTaskStatStkSize
81119064 g     F .text	00000308 OSFlagAccept
8111b438 g     F .text	000000b8 OSQFlush
8111aecc g     F .text	00000140 OSQAccept
81126f68 g     O .bss	00000004 alt_argv
8112ee6c g       *ABS*	00000000 _gp
8111cf20 g     F .text	000001ac OSTaskCreate
8111ca30 g     F .text	000004f0 OSTaskChangePrio
81126f7c g     O .bss	00000004 alt_heapsem
81118ed4 g     F .text	00000190 OSDebugInit
8111d2b0 g     F .text	00000344 OSTaskDel
811226a0 g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
81125ac0 g     O .rwdata	00000180 alt_fd_list
8112b00c g     O .bss	00000370 OSFlagTbl
8111819c g     F .text	000000b8 OS_EventTaskRemove
81123300 g     F .text	00000090 alt_find_dev
81108ac8 g     F .text	00000148 memcpy
81110fa0 g     F .text	0000025c __hexnan
81126ee8 g     O .rwdata	00000002 OSRdyTblSize
811074e4 g     F .text	0000000c _cleanup_r
81115d6c g     F .text	000000dc .hidden __floatsidf
811238d8 g     F .text	0000007c alt_io_redirect
81114be4 g     F .text	000000f4 .hidden __ltdf2
81124674 g       *ABS*	00000000 __DTOR_END__
81122b10 g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
81122e30 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
81122da0 g     F .text	00000054 alt_msgdma_register_callback
811017b0 g     F .text	00000014 puts
811240dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
81116eb0 g     F .text	00000120 OSEventNameGet
81126ecc g     O .rwdata	00000002 OSFlagMax
8110886c g     F .text	000000d8 mbrtowc
8110a32c g     F .text	00000074 __fpclassifyd
81105758 g     F .text	0000004c _vfscanf_r
81109b4c g     F .text	000000a4 __ratio
811177c4 g     F .text	000000f8 OSIntExit
811101c8 g     F .text	0000001c __vfiprintf_internal
81126f06 g     O .rwdata	00000002 OSTCBSize
8111f9cc g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
81126f89 g     O .bss	00000001 OSPrioCur
8111ef8c g     F .text	000002bc altera_avalon_jtag_uart_read
81122380 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
81101684 g     F .text	00000030 _printf_r
81113634 g     F .text	00000064 .hidden __udivsi3
8111635c g     F .text	000000a4 isatty
81126eec g     O .rwdata	00000002 OSStkWidth
81108654 g     F .text	00000030 iswspace
81124a90 g     O .rodata	000000c8 __mprec_tens
81126ee0 g     O .rwdata	00000002 OSPtrSize
81108700 g     F .text	0000000c __locale_charset
81113824 g     F .text	000000c8 .hidden __lesf2
81126ec0 g     O .rwdata	00000002 OSEventTblSize
81112a18 g     F .text	00000074 .hidden __fixunsdfsi
81123d84 g       .text	00000000 OSCtxSw
81126f50 g     O .bss	00000004 __malloc_top_pad
81126f8c g     O .bss	00000004 OSTCBList
81126f60 g     O .bss	00000004 alt_fd_list_lock
8110c50c g     F .text	0000001c strtoul
81126e80 g     O .rwdata	00000004 __mb_cur_max
81108730 g     F .text	0000000c _localeconv_r
8110c528 g     F .text	000002d8 _strtoull_r
81109178 g     F .text	0000003c __i2b
81107fbc g     F .text	000004bc __sfvwrite_r
8111fb04 g     F .text	0000005c alt_avalon_sgdma_stop
8112b37c g     O .bss	00000c30 OSMemTbl
81126f90 g     O .bss	00000001 OSTickStepState
811019b4 g     F .text	00000054 _sbrk_r
81126ee4 g     O .rwdata	00000002 OSQMax
8112bfac g     O .bss	00000800 OSTaskStatStk
8111aa3c g     F .text	000000f0 OSMemNameGet
81126ec4 g     O .rwdata	00000002 OSFlagEn
81109d68 g     F .text	00000060 _read_r
81126f0a g     O .rwdata	00000002 OSTimeTickHookEn
81123138 g     F .text	00000028 alt_dcache_flush
8111b8e8 g     F .text	00000168 OSQPost
8111a6d4 g     F .text	000000a4 OS_FlagUnlink
81126e9c g     O .rwdata	00000004 alt_max_fd
81118788 g     F .text	00000068 OS_MemCopy
811187f0 g     F .text	000000d0 OS_Sched
81110364 g     F .text	000000f0 _fclose_r
8111a94c g     F .text	000000f0 OSMemGet
8111d8dc g     F .text	000001b4 OSTaskNameSet
811074ac g     F .text	00000030 fflush
81126f4c g     O .bss	00000004 __malloc_max_sbrked_mem
81126f94 g     O .bss	00000004 OSCtxSwCtr
81124038 g     F .text	00000020 OSTimeTickHook
81126ece g     O .rwdata	00000002 OSFlagNameSize
81118254 g     F .text	00000100 OS_EventTaskRemoveMulti
811138ec g     F .text	000008ac .hidden __adddf3
811136f0 g     F .text	00000078 .hidden __nesf2
8111804c g     F .text	00000150 OS_EventTaskWaitMulti
811098f4 g     F .text	0000010c __b2d
811220e0 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
81126ee6 g     O .rwdata	00000002 OSQSize
81113004 g     F .text	00000538 .hidden __umoddi3
8111643c g     F .text	000000d4 lseek
8111c398 g     F .text	0000020c OSSemPend
81126e6c g     O .rwdata	00000004 _global_impure_ptr
81109dc8 g     F .text	00000564 _realloc_r
81126ed0 g     O .rwdata	00000002 OSLowestPrio
8112e9ac g       *ABS*	00000000 __bss_end
81123724 g     F .text	000000f0 alt_iic_isr_register
8111f548 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
811240b8 g     F .text	00000024 OSTCBInitHook
81126f16 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
81123c58 g     F .text	00000108 alt_tick
81124bf8 g     O .rodata	00000100 __hexdig
81122bf4 g     F .text	000001ac alt_msgdma_init
81112a8c g     F .text	00000578 .hidden __udivdi3
811105cc g     F .text	00000024 _fputwc_r
81126eb8 g     O .rwdata	00000002 OSEventEn
81124a68 g     O .rodata	00000028 __mprec_bigtens
81108f5c g     F .text	00000104 __s2b
81126f12 g     O .rwdata	00000002 OSTmrCfgNameSize
81115e48 g     F .text	000000a8 .hidden __floatunsidf
81109634 g     F .text	00000060 __mcmp
811204a4 g     F .text	00000160 altera_avalon_uart_init
81122ea8 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
8110784c g     F .text	00000018 __fp_lock_all
811236d8 g     F .text	0000004c alt_ic_irq_enabled
8111a500 g     F .text	000000e0 OS_FlagInit
81123bbc g     F .text	0000009c alt_alarm_stop
8110bfc4 g     F .text	0000001c strtol
81200800 g       *ABS*	00000000 __alt_mem_descriptor_memory
81126ef4 g     O .rwdata	00000002 OSTaskIdleStkSize
81126fd4 g     O .bss	00000004 alt_irq_active
8111bfd0 g     F .text	000000b0 OSSemAccept
81100578 g     F .text	00000444 _fseeko_r
8111ac40 g     F .text	000000d8 OSMemPut
8111a778 g     F .text	000001d4 OSMemCreate
81126f98 g     O .bss	00000004 OSIdleCtrMax
811000fc g     F .exceptions	000000d4 alt_irq_handler
81125a98 g     O .rwdata	00000028 alt_dev_null
81121d18 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
81126f08 g     O .rwdata	00000002 OSTicksPerSec
8111fb60 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
81123d84 g       .text	00000000 OSIntCtxSw
81122a84 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
81109060 g     F .text	00000068 __hi0bits
81115cec g     F .text	00000080 .hidden __fixdfsi
8110bc74 g     F .text	00000018 strtod
81126f9c g     O .bss	00000004 OSTCBFreeList
8111c5a4 g     F .text	0000016c OSSemPendAbort
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
81126e94 g     O .rwdata	00000008 alt_dev_list
81116aa8 g     F .text	000000f8 write
8111fca4 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
81124240 g     F .text	000000a0 _putc_r
81126f0c g     O .rwdata	00000002 OSVersionNbr
81113768 g     F .text	000000bc .hidden __gtsf2
81116270 g     F .text	000000b0 fstat
81114be4 g     F .text	000000f4 .hidden __ledf2
81126eb4 g     O .rwdata	00000004 OSEndiannessTest
811093ac g     F .text	00000140 __pow5mult
8110ed6c g     F .text	0000145c ___vfiprintf_internal_r
81126f5c g     O .bss	00000004 __nlocale_changed
81113698 g     F .text	00000058 .hidden __umodsi3
81101a44 g     F .text	00000030 _scanf_r
8111f94c g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
81126ec6 g     O .rwdata	00000002 OSFlagGrpSize
81122138 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
8111fa58 g     F .text	00000054 alt_avalon_sgdma_register_callback
8112e9ac g       *ABS*	00000000 end
811009bc g     F .text	0000001c fseeko
81120cb0 g     F .text	00000238 altera_avalon_uart_write
8110055c g     F .text	0000001c fseek
8111e944 g     F .text	00000148 altera_avalon_jtag_uart_init
81118a58 g     F .text	000000dc OS_TaskStat
811001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
81124674 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
8111fd24 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
81120318 g     F .text	0000007c alt_avalon_timer_sc_init
811203f4 g     F .text	00000060 altera_avalon_uart_write_fd
81116098 g     F .text	00000064 .hidden __clzsi2
81120454 g     F .text	00000050 altera_avalon_uart_close_fd
8111f248 g     F .text	000002c4 altera_avalon_jtag_uart_write
8111f77c g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
8110783c g     F .text	00000004 __sfp_lock_acquire
811089e4 g     F .text	000000e4 memchr
81118734 g     F .text	00000054 OS_MemClr
81101c48 g     F .text	000021f8 ___vfprintf_internal_r
81123e54 g     F .text	0000015c OSTaskStkInit
8110027c g     F .text	0000009c task1
8110a478 g     F .text	00000058 _sprintf_r
8111f874 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
81107cac g     F .text	00000310 _free_r
81123954 g     F .text	0000022c alt_printf
8110870c g     F .text	00000010 __locale_mb_cur_max
81117da4 g     F .text	00000198 OS_EventTaskRdy
811244c0 g     F .text	00000180 __call_exitprocs
81126fa0 g     O .bss	00000001 OSCPUUsage
81126f58 g     O .bss	00000004 __mlocale_changed
81126e74 g     O .rwdata	00000004 __malloc_sbrk_base
81100244 g     F .text	00000038 _start
81100318 g     F .text	00000054 task2
81126fd8 g     O .bss	00000004 _alt_tick_rate
8111b4f0 g     F .text	0000028c OSQPend
8110bfe0 g     F .text	000002e0 _strtoll_r
8111fbc4 g     F .text	00000054 alt_avalon_sgdma_open
8111e19c g     F .text	00000104 OSTimeDly
811094ec g     F .text	00000148 __lshift
81126fdc g     O .bss	00000004 _alt_nticks
81121bd8 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
8111685c g     F .text	000000fc read
8111e6f8 g     F .text	000000e8 alt_sys_init
811112cc g     F .text	000001d0 __ssprint_r
81101624 g     F .text	00000060 _open_r
811243a8 g     F .text	00000118 __register_exitproc
81126fa1 g     O .bss	00000001 OSTaskCtr
811111fc g     F .text	000000d0 strncmp
8111e2a0 g     F .text	0000015c OSTimeDlyHMSM
811091b4 g     F .text	000001f8 __multiply
8111ee34 g     F .text	00000068 altera_avalon_jtag_uart_close
81126fe4 g     O .bss	00000028 __malloc_current_mallinfo
81126eba g     O .rwdata	00000002 OSEventMax
811136f0 g     F .text	00000078 .hidden __eqsf2
81109a00 g     F .text	0000014c __d2b
8111c710 g     F .text	00000110 OSSemPost
81117948 g     F .text	000000dc OSSchedUnlock
8111e7e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
8110c2c0 g     F .text	0000024c _strtoul_r
81123498 g     F .text	000000dc alt_get_fd
81126fa4 g     O .bss	00000004 OSMemFreeList
81117a94 g     F .text	000000b0 OSStatInit
81123010 g     F .text	00000128 alt_busy_sleep
8111a2dc g     F .text	000000c4 OSFlagQuery
81126ef0 g     O .rwdata	00000002 OSTaskCreateExtEn
81105958 g     F .text	00000054 _close_r
81122088 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
811241c4 g     F .text	0000007c memcmp
81117d84 g     F .text	00000020 OS_Dummy
8111e8a0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8112e9ac g       *ABS*	00000000 __alt_stack_base
8111e8f0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
81100a34 g     F .text	000000cc _fwrite_r
81122190 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81105804 g     F .text	00000154 __swsetup_r
8112c7ac g     O .bss	000001e0 OSQTbl
81114198 g     F .text	000008e8 .hidden __divdf3
811076fc g     F .text	00000118 __sfp
81109c64 g     F .text	00000078 __copybits
81125618 g     O .rwdata	00000408 __malloc_av_
81107848 g     F .text	00000004 __sinit_lock_release
81126fa8 g     O .bss	00000004 OSTCBHighRdy
81114cd8 g     F .text	00000718 .hidden __muldf3
81101a74 g     F .text	00000054 __sread
81107b54 g     F .text	00000034 fread
81126fac g     O .bss	00000004 OSQFreeList
81123390 g     F .text	00000108 alt_find_file
8112319c g     F .text	000000a4 alt_dev_llist_insert
81116cc4 g     F .text	00000120 __malloc_lock
811169bc g     F .text	000000b0 sbrk
8110c800 g     F .text	000021d8 ___svfprintf_internal_r
8111faac g     F .text	00000058 alt_avalon_sgdma_start
81116fd0 g     F .text	00000140 OSEventNameSet
81107450 g     F .text	0000005c _fflush_r
811102a0 g     F .text	000000c4 _calloc_r
81126fb0 g     O .bss	00000001 OSRdyGrp
81100540 g     F .text	00000018 fopen
81126f40 g       *ABS*	00000000 __bss_start
811014fc g     F .text	00000128 memset
81122b9c g     F .text	00000058 alt_msgdma_open
8110036c g     F .text	000000e0 main
81126f6c g     O .bss	00000004 alt_envp
81126f48 g     O .bss	00000004 __malloc_max_total_mem
81122470 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
8111e840 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
81112818 g     F .text	00000018 __swbuf
81124e48 g     O .rodata	00000100 OSUnMapTbl
81113824 g     F .text	000000c8 .hidden __ltsf2
81107928 g     F .text	0000022c _fread_r
81126f24 g     O .rwdata	00000008 alt_sgdma_list
81126eea g     O .rwdata	00000002 OSSemEn
81119f48 g     F .text	00000394 OSFlagPost
81101ba8 g     F .text	00000008 __sclose
811fa000 g       *ABS*	00000000 __alt_heap_limit
81110454 g     F .text	00000014 fclose
81117f3c g     F .text	00000110 OS_EventTaskWait
8112900c g     O .bss	00002000 task2_stk
8110bd8c g     F .text	00000238 _strtol_r
81115ef0 g     F .text	000001a8 .hidden __truncdfsf2
81118b34 g     F .text	000000cc OS_TaskStatStkChk
8111d5f4 g     F .text	00000150 OSTaskDelReq
81105bac g     F .text	00001688 _dtoa_r
81122774 g     F .text	00000310 alt_msgdma_start_prefetcher_with_list_addr
81100cf0 g     F .text	0000080c _malloc_r
8111298c g     F .text	00000030 __ascii_wctomb
81126ea0 g     O .rwdata	00000004 alt_errno
811222c8 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81117a24 g     F .text	00000070 OSStart
8110e9d8 g     F .text	000000d4 __submore
81116c64 g     F .text	00000060 __env_unlock
81108478 g     F .text	000000c4 _fwalk
8111da90 g     F .text	000001d4 OSTaskResume
8111ad18 g     F .text	000000e8 OSMemQuery
81126efc g     O .rwdata	00000002 OSTaskStatEn
81108988 g     F .text	0000005c _mbtowc_r
81126ed6 g     O .rwdata	00000002 OSMemMax
8111ba50 g     F .text	00000170 OSQPostFront
811242e0 g     F .text	000000c8 putc
8111353c g     F .text	00000084 .hidden __divsi3
81126fb1 g     O .bss	00000004 OSRdyTbl
81126eb0 g     O .rwdata	00000002 OSDebugEn
81107b88 g     F .text	00000124 _malloc_trim_r
81124674 g       *ABS*	00000000 __CTOR_END__
81126ec8 g     O .rwdata	00000002 OSFlagNodeSize
81126f10 g     O .rwdata	00000002 OSTmrCfgMax
8110a53c g     F .text	000000dc strcmp
8111b00c g     F .text	000001ac OSQCreate
8111d744 g     F .text	00000198 OSTaskNameGet
8111bbc0 g     F .text	0000020c OSQPostOpt
81117b44 g     F .text	00000220 OSTimeTick
81126ef8 g     O .rwdata	00000002 OSTaskMax
81124674 g       *ABS*	00000000 __DTOR_LIST__
8111c080 g     F .text	000000d8 OSSemCreate
81126f1c g     O .rwdata	00000002 OSTmrWheelSize
81114a80 g     F .text	00000088 .hidden __nedf2
81126ef2 g     O .rwdata	00000002 OSTaskDelEn
8111c820 g     F .text	00000110 OSSemQuery
8111b1b8 g     F .text	00000280 OSQDel
8111b77c g     F .text	0000016c OSQPendAbort
8111e6c0 g     F .text	00000038 alt_irq_init
81116958 g     F .text	00000064 alt_release_fd
81122e6c g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8110a4d0 g     F .text	0000006c sprintf
81124d18 g     O .rodata	00000100 .hidden __clz_tab
81126f54 g     O .bss	00000004 _PathLocale
8110bc8c g     F .text	00000100 strtof
81124178 g     F .text	00000014 atexit
81113768 g     F .text	000000bc .hidden __gesf2
811057a4 g     F .text	00000060 _write_r
811178bc g     F .text	0000008c OSSchedLock
8110873c g     F .text	00000018 setlocale
81122230 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
81101a08 g     F .text	0000003c scanf
8111936c g     F .text	00000108 OSFlagCreate
8110a470 g     F .text	00000008 nanf
81126e70 g     O .rwdata	00000004 _impure_ptr
81126f64 g     O .bss	00000004 alt_argc
81107234 g     F .text	0000021c __sflush_r
811087c0 g     F .text	000000ac _mbrtowc_r
811232a0 g     F .text	00000060 _do_dtors
81108728 g     F .text	00000008 __locale_cjk_lang
81126ec2 g     O .rwdata	00000002 OSEventMultiEn
81100558 g     F .text	00000004 _fseek_r
811017e0 g     F .text	000001d4 __srefill_r
81119474 g     F .text	00000248 OSFlagDel
81126fb8 g     O .bss	00000004 OSEventFreeList
81100020 g       .exceptions	00000000 alt_irq_entry
81108944 g     F .text	00000044 __ascii_mbtowc
81109890 g     F .text	00000064 __ulp
81119930 g     F .text	000005b8 OSFlagPend
81126f0e g     O .rwdata	00000002 OSTmrEn
81107864 g     F .text	00000018 __fp_unlock_all
81126e8c g     O .rwdata	00000008 alt_fs_list
81118934 g     F .text	00000074 OS_StrCopy
81126ed8 g     O .rwdata	00000002 OSMemNameSize
81124078 g     F .text	00000020 OSInitHookEnd
81126f04 g     O .rwdata	00000002 OSTCBPrioTblMax
81108754 g     F .text	0000000c localeconv
81126f00 g     O .rwdata	00000002 OSTaskStatStkChkEn
81123574 g     F .text	00000050 alt_ic_isr_register
81126ed4 g     O .rwdata	00000002 OSMemEn
81100b00 g     F .text	00000034 fwrite
81126ede g     O .rwdata	00000002 OSMutexEn
81126f40 g       *ABS*	00000000 _edata
81120394 g     F .text	00000060 altera_avalon_uart_read_fd
8112e9ac g       *ABS*	00000000 _end
81126fbc g     O .bss	00000001 OSIntNesting
81110468 g     F .text	00000164 __fputwc
811056d4 g     F .text	00000068 vfscanf
8111ee9c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
8111e3fc g     F .text	000001d4 OSTimeDlyResume
811197e4 g     F .text	0000014c OSFlagNameSet
8111dc64 g     F .text	000001c0 OSTaskStkChk
8112364c g     F .text	0000008c alt_ic_irq_disable
81126eda g     O .rwdata	00000002 OSMemSize
8111fc18 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
81101ad0 g     F .text	0000007c __swrite
81126e78 g     O .rwdata	00000004 __malloc_trim_threshold
8110871c g     F .text	0000000c __locale_msgcharset
81126fc0 g     O .bss	00000004 OSTCBCur
8112418c g     F .text	00000038 exit
81126edc g     O .rwdata	00000002 OSMemTblSize
8110853c g     F .text	000000c4 _fwalk_reent
81122608 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
81109694 g     F .text	000001fc __mdiff
811135c0 g     F .text	00000074 .hidden __modsi3
81126e7c g     O .rwdata	00000004 __ctype_ptr__
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
81107840 g     F .text	00000004 __sfp_lock_release
81117720 g     F .text	00000058 OSInit
81121da8 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
8111e008 g     F .text	00000124 OSTaskQuery
8111bf28 g     F .text	000000a8 OS_QInit
8110a3a0 g     F .text	000000d0 __sccl
811189a8 g     F .text	00000054 OS_StrLen
8111ab2c g     F .text	00000114 OSMemNameSet
81124794 g     O .rodata	00000101 _ctype_
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
81126ef6 g     O .rwdata	00000002 OSTaskProfileEn
81121c88 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
81126fc4 g     O .bss	00000004 OSTime
81126e84 g     O .rwdata	00000004 __mbtowc
8112097c g     F .text	00000054 altera_avalon_uart_close
8112c98c g     O .bss	00000800 OSTaskIdleStk
8110044c g     F .text	000000f4 _fopen_r
81124640 g     F .text	00000034 _exit
81122ee4 g     F .text	0000012c alt_alarm_start
811196bc g     F .text	00000128 OSFlagNameGet
8111e5d0 g     F .text	0000005c OSTimeGet
81100b34 g     F .text	000001bc __smakebuf_r
81126f2c g     O .rwdata	00000008 alt_msgdma_list
81101bb0 g     F .text	00000098 strlen
81123ff8 g     F .text	00000020 OSTaskSwHook
811166cc g     F .text	00000154 open
8112d18c g     O .bss	00000b40 OSEventTbl
81114b08 g     F .text	000000dc .hidden __gedf2
81123b80 g     F .text	0000003c alt_putchar
8112dccc g     O .bss	00000b64 OSTCBTbl
81110770 g     F .text	00000830 __gethex
8111c930 g     F .text	00000100 OSSemSet
81126e88 g     O .rwdata	00000004 __wctomb
8110ed54 g     F .text	00000018 __sprint_r
81126f34 g     O .rwdata	00000004 alt_priority_mask
8111c158 g     F .text	00000240 OSSemDel
81126fc8 g     O .bss	00000004 OSFlagFreeList
811235c4 g     F .text	00000088 alt_ic_irq_enable
81126ebc g     O .rwdata	00000002 OSEventNameSize
81103e40 g     F .text	0000001c __vfprintf_internal
81126fcc g     O .bss	00000001 OSStatRdy
8112e830 g     O .bss	0000007c OSTCBPrioTbl
81120a0c g     F .text	00000268 altera_avalon_uart_read
811129bc g     F .text	0000005c _wctomb_r
81116ba0 g     F .text	000000c4 __env_lock
81126f02 g     O .rwdata	00000002 OSTaskSwHookEn
8111f7f0 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
811153f0 g     F .text	000008fc .hidden __subdf3
811090c8 g     F .text	000000b0 __lo0bits
81103f18 g     F .text	000017bc __svfscanf_r
81126f38 g     O .rwdata	00000008 alt_alarm_list
8110eaac g     F .text	00000194 _ungetc_r
81126eca g     O .rwdata	00000002 OSFlagWidth
81123240 g     F .text	00000060 _do_ctors
811128cc g     F .text	000000c0 wcrtomb
81116138 g     F .text	000000d0 close
81126f74 g     O .bss	00000004 alt_envsem
81126fd0 g     O .bss	00000004 OSIdleCtrRun
81117d64 g     F .text	00000020 OSVersion
81126f14 g     O .rwdata	00000002 OSTmrCfgWheelSize
8111e12c g     F .text	00000070 OS_TaskStkClr
81126eee g     O .rwdata	00000002 OSTaskCreateEn
81118354 g     F .text	00000068 OS_EventWaitListInit
811201f8 g     F .text	000000a8 alt_avalon_sgdma_init
811105f0 g     F .text	00000080 fputwc
81124098 g     F .text	00000020 OSTaskIdleHook
81107844 g     F .text	00000004 __sinit_lock_acquire
81108e3c g     F .text	00000120 __multadd
8111de24 g     F .text	000001e4 OSTaskSuspend
81108e14 g     F .text	00000028 _Bfree
811189fc g     F .text	0000005c OS_TaskIdle
81126f1a g     O .rwdata	00000002 OSTmrTblSize
8111bdcc g     F .text	0000015c OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
81100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
81100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
81100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
81100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
81100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
81100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8110007c:	10000326 	beq	r2,zero,8110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
81100080:	20000226 	beq	r4,zero,8110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100084:	11000fc0 	call	811000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
81100088:	00000706 	br	811000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
81100098:	11001d00 	call	811001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8110009c:	1000021e 	bne	r2,zero,811000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000f8:	ef80083a 	eret

811000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
811000fc:	defff904 	addi	sp,sp,-28
81100100:	dfc00615 	stw	ra,24(sp)
81100104:	df000515 	stw	fp,20(sp)
81100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110010c:	11177780 	call	81117778 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100110:	0005313a 	rdctl	r2,ipending
81100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100124:	00800044 	movi	r2,1
81100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110012c:	e0fffb17 	ldw	r3,-20(fp)
81100130:	e0bffc17 	ldw	r2,-16(fp)
81100134:	1884703a 	and	r2,r3,r2
81100138:	10001426 	beq	r2,zero,8110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110013c:	00a044f4 	movhi	r2,33043
81100140:	10ba2b04 	addi	r2,r2,-5972
81100144:	e0fffd17 	ldw	r3,-12(fp)
81100148:	180690fa 	slli	r3,r3,3
8110014c:	10c5883a 	add	r2,r2,r3
81100150:	10c00017 	ldw	r3,0(r2)
81100154:	00a044f4 	movhi	r2,33043
81100158:	10ba2b04 	addi	r2,r2,-5972
8110015c:	e13ffd17 	ldw	r4,-12(fp)
81100160:	200890fa 	slli	r4,r4,3
81100164:	1105883a 	add	r2,r2,r4
81100168:	10800104 	addi	r2,r2,4
8110016c:	10800017 	ldw	r2,0(r2)
81100170:	1009883a 	mov	r4,r2
81100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110017c:	0005313a 	rdctl	r2,ipending
81100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100184:	e0bfff17 	ldw	r2,-4(fp)
81100188:	00000706 	br	811001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8110018c:	e0bffc17 	ldw	r2,-16(fp)
81100190:	1085883a 	add	r2,r2,r2
81100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
81100198:	e0bffd17 	ldw	r2,-12(fp)
8110019c:	10800044 	addi	r2,r2,1
811001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001a4:	003fe106 	br	8110012c <__reset+0xfb0e012c>

    active = alt_irq_pending ();
811001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001ac:	e0bffb17 	ldw	r2,-20(fp)
811001b0:	103fdb1e 	bne	r2,zero,81100120 <__reset+0xfb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001b4:	11177c40 	call	811177c4 <OSIntExit>
}
811001b8:	0001883a 	nop
811001bc:	e037883a 	mov	sp,fp
811001c0:	dfc00117 	ldw	ra,4(sp)
811001c4:	df000017 	ldw	fp,0(sp)
811001c8:	dec00204 	addi	sp,sp,8
811001cc:	f800283a 	ret

811001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001d0:	defffb04 	addi	sp,sp,-20
811001d4:	dfc00415 	stw	ra,16(sp)
811001d8:	df000315 	stw	fp,12(sp)
811001dc:	df000304 	addi	fp,sp,12
811001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001e4:	000531fa 	rdctl	r2,exception
811001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
811001ec:	e0bffd17 	ldw	r2,-12(fp)
811001f0:	10801f0c 	andi	r2,r2,124
811001f4:	1004d0ba 	srli	r2,r2,2
811001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
811001fc:	0005333a 	rdctl	r2,badaddr
81100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
81100204:	d0a05d17 	ldw	r2,-32396(gp)
81100208:	10000726 	beq	r2,zero,81100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8110020c:	d0a05d17 	ldw	r2,-32396(gp)
81100210:	e0fffd17 	ldw	r3,-12(fp)
81100214:	e1bffe17 	ldw	r6,-8(fp)
81100218:	e17fff17 	ldw	r5,-4(fp)
8110021c:	1809883a 	mov	r4,r3
81100220:	103ee83a 	callr	r2
81100224:	00000206 	br	81100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8110022c:	0005883a 	mov	r2,zero
}
81100230:	e037883a 	mov	sp,fp
81100234:	dfc00117 	ldw	ra,4(sp)
81100238:	df000017 	ldw	fp,0(sp)
8110023c:	dec00204 	addi	sp,sp,8
81100240:	f800283a 	ret

Disassembly of section .text:

81100244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100244:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110024c:	06a044b4 	movhi	gp,33042
    ori gp, gp, %lo(_gp)
81100250:	d6bb9b14 	ori	gp,gp,61036
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
81100254:	00a044b4 	movhi	r2,33042
    ori r2, r2, %lo(__bss_start)
81100258:	109bd014 	ori	r2,r2,28480

    movhi r3, %hi(__bss_end)
8110025c:	00e044b4 	movhi	r3,33042
    ori r3, r3, %lo(__bss_end)
81100260:	18fa6b14 	ori	r3,r3,59820

    beq r2, r3, 1f
81100264:	10c00326 	beq	r2,r3,81100274 <_start+0x30>

0:
    stw zero, (r2)
81100268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8110026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100270:	10fffd36 	bltu	r2,r3,81100268 <__reset+0xfb0e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100274:	11165100 	call	81116510 <alt_main>

81100278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100278:	003fff06 	br	81100278 <__reset+0xfb0e0278>

8110027c <task1>:
//}


/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
8110027c:	deffdf04 	addi	sp,sp,-132
81100280:	dfc02015 	stw	ra,128(sp)
81100284:	df001f15 	stw	fp,124(sp)
81100288:	df001f04 	addi	fp,sp,124
8110028c:	e13fff15 	stw	r4,-4(fp)
	{
		//fwrite( "tarefa 1 \r\n", strlen("tarefa 1 \r\n"),1 , fp  );
		//fseek( fp, 0, SEEK_SET );
		//fread(entrada,  5, 1  , fp);

		scanf("%c%c",&entrada[0],&entrada[1]);
81100290:	e0bfe604 	addi	r2,fp,-104
81100294:	10c00044 	addi	r3,r2,1
81100298:	e0bfe604 	addi	r2,fp,-104
8110029c:	180d883a 	mov	r6,r3
811002a0:	100b883a 	mov	r5,r2
811002a4:	012044b4 	movhi	r4,33042
811002a8:	21119d04 	addi	r4,r4,18036
811002ac:	1101a080 	call	81101a08 <scanf>
		//fwrite( p, 2,1 , fp  );
		//printf("%s",entrada);
		//gets(p);


		printf("Hello from task1 p= %c%c \n", entrada[0],entrada[1]);
811002b0:	e0bfe603 	ldbu	r2,-104(fp)
811002b4:	10803fcc 	andi	r2,r2,255
811002b8:	1080201c 	xori	r2,r2,128
811002bc:	10bfe004 	addi	r2,r2,-128
811002c0:	e0ffe643 	ldbu	r3,-103(fp)
811002c4:	18c03fcc 	andi	r3,r3,255
811002c8:	18c0201c 	xori	r3,r3,128
811002cc:	18ffe004 	addi	r3,r3,-128
811002d0:	180d883a 	mov	r6,r3
811002d4:	100b883a 	mov	r5,r2
811002d8:	012044b4 	movhi	r4,33042
811002dc:	21119f04 	addi	r4,r4,18044
811002e0:	11016b40 	call	811016b4 <printf>
		fwrite( "Hello from task1\n", strlen("Hello from task1\n"),1 , fp  );
811002e4:	d0a03517 	ldw	r2,-32556(gp)
811002e8:	100f883a 	mov	r7,r2
811002ec:	01800044 	movi	r6,1
811002f0:	01400444 	movi	r5,17
811002f4:	012044b4 	movhi	r4,33042
811002f8:	2111a604 	addi	r4,r4,18072
811002fc:	1100b000 	call	81100b00 <fwrite>
		OSTimeDlyHMSM(0, 0, 3, 0);
81100300:	000f883a 	mov	r7,zero
81100304:	018000c4 	movi	r6,3
81100308:	000b883a 	mov	r5,zero
8110030c:	0009883a 	mov	r4,zero
81100310:	111e2a00 	call	8111e2a0 <OSTimeDlyHMSM>
	}
81100314:	003fde06 	br	81100290 <__reset+0xfb0e0290>

81100318 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
81100318:	defffd04 	addi	sp,sp,-12
8110031c:	dfc00215 	stw	ra,8(sp)
81100320:	df000115 	stw	fp,4(sp)
81100324:	df000104 	addi	fp,sp,4
81100328:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
	  //fseek( fp, 0, SEEK_SET );
	  //fwrite( "tarefa 2 \r\n", strlen("tarefa 2 \r\n"),1 , fp  );
	  //fprintf(fp , "tarefa 2 \r\n" );
	  printf("Hello from task2\n");
8110032c:	012044b4 	movhi	r4,33042
81100330:	2111ab04 	addi	r4,r4,18092
81100334:	11017b00 	call	811017b0 <puts>
	  fwrite( "Hello from task2\n", strlen("Hello from task2\n"),1 , fp  );
81100338:	d0a03517 	ldw	r2,-32556(gp)
8110033c:	100f883a 	mov	r7,r2
81100340:	01800044 	movi	r6,1
81100344:	01400444 	movi	r5,17
81100348:	012044b4 	movhi	r4,33042
8110034c:	2111b004 	addi	r4,r4,18112
81100350:	1100b000 	call	81100b00 <fwrite>
	  OSTimeDlyHMSM(0, 0, 3, 0);
81100354:	000f883a 	mov	r7,zero
81100358:	018000c4 	movi	r6,3
8110035c:	000b883a 	mov	r5,zero
81100360:	0009883a 	mov	r4,zero
81100364:	111e2a00 	call	8111e2a0 <OSTimeDlyHMSM>
  }
81100368:	003ff006 	br	8110032c <__reset+0xfb0e032c>

8110036c <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
8110036c:	defff904 	addi	sp,sp,-28
81100370:	dfc00615 	stw	ra,24(sp)
81100374:	df000515 	stw	fp,20(sp)
81100378:	df000504 	addi	fp,sp,20


	fp = fopen("/dev/jtag_uart_0", "r+");
8110037c:	016044b4 	movhi	r5,33042
81100380:	2951b504 	addi	r5,r5,18132
81100384:	012044b4 	movhi	r4,33042
81100388:	2111b604 	addi	r4,r4,18136
8110038c:	11005400 	call	81100540 <fopen>
81100390:	d0a03515 	stw	r2,-32556(gp)



		//fprintf(fp , "Mensagem meu irmao \r\n" );
	fwrite( "Iniciou a UART \r\n", strlen("Iniciou a UART \r\n"),1 , fp  );
81100394:	d0a03517 	ldw	r2,-32556(gp)
81100398:	100f883a 	mov	r7,r2
8110039c:	01800044 	movi	r6,1
811003a0:	01400444 	movi	r5,17
811003a4:	012044b4 	movhi	r4,33042
811003a8:	2111bb04 	addi	r4,r4,18156
811003ac:	1100b000 	call	81100b00 <fwrite>



		OSTaskCreateExt(task1,
811003b0:	d8000415 	stw	zero,16(sp)
811003b4:	d8000315 	stw	zero,12(sp)
811003b8:	00820004 	movi	r2,2048
811003bc:	d8800215 	stw	r2,8(sp)
811003c0:	00a044b4 	movhi	r2,33042
811003c4:	109c0304 	addi	r2,r2,28684
811003c8:	d8800115 	stw	r2,4(sp)
811003cc:	00800044 	movi	r2,1
811003d0:	d8800015 	stw	r2,0(sp)
811003d4:	01c00044 	movi	r7,1
811003d8:	01a044f4 	movhi	r6,33043
811003dc:	31a40204 	addi	r6,r6,-28664
811003e0:	000b883a 	mov	r5,zero
811003e4:	01204434 	movhi	r4,33040
811003e8:	21009f04 	addi	r4,r4,636
811003ec:	111d0cc0 	call	8111d0cc <OSTaskCreateExt>
					  TASK_STACKSIZE,
					  NULL,
					  0);


		OSTaskCreateExt(task2,
811003f0:	d8000415 	stw	zero,16(sp)
811003f4:	d8000315 	stw	zero,12(sp)
811003f8:	00820004 	movi	r2,2048
811003fc:	d8800215 	stw	r2,8(sp)
81100400:	00a044f4 	movhi	r2,33043
81100404:	10a40304 	addi	r2,r2,-28660
81100408:	d8800115 	stw	r2,4(sp)
8110040c:	00800084 	movi	r2,2
81100410:	d8800015 	stw	r2,0(sp)
81100414:	01c00084 	movi	r7,2
81100418:	01a044f4 	movhi	r6,33043
8110041c:	31ac0204 	addi	r6,r6,-20472
81100420:	000b883a 	mov	r5,zero
81100424:	01204434 	movhi	r4,33040
81100428:	2100c604 	addi	r4,r4,792
8110042c:	111d0cc0 	call	8111d0cc <OSTaskCreateExt>
					  TASK2_PRIORITY,
					  task2_stk,
					  TASK_STACKSIZE,
					  NULL,
					  0);
		OSStart();
81100430:	1117a240 	call	81117a24 <OSStart>
  

  return 0;
81100434:	0005883a 	mov	r2,zero
}
81100438:	e037883a 	mov	sp,fp
8110043c:	dfc00117 	ldw	ra,4(sp)
81100440:	df000017 	ldw	fp,0(sp)
81100444:	dec00204 	addi	sp,sp,8
81100448:	f800283a 	ret

8110044c <_fopen_r>:
8110044c:	defffa04 	addi	sp,sp,-24
81100450:	3005883a 	mov	r2,r6
81100454:	dcc00415 	stw	r19,16(sp)
81100458:	d80d883a 	mov	r6,sp
8110045c:	2827883a 	mov	r19,r5
81100460:	100b883a 	mov	r5,r2
81100464:	dc800315 	stw	r18,12(sp)
81100468:	dfc00515 	stw	ra,20(sp)
8110046c:	dc400215 	stw	r17,8(sp)
81100470:	dc000115 	stw	r16,4(sp)
81100474:	2025883a 	mov	r18,r4
81100478:	110787c0 	call	8110787c <__sflags>
8110047c:	10002726 	beq	r2,zero,8110051c <_fopen_r+0xd0>
81100480:	9009883a 	mov	r4,r18
81100484:	1023883a 	mov	r17,r2
81100488:	11076fc0 	call	811076fc <__sfp>
8110048c:	1021883a 	mov	r16,r2
81100490:	10002226 	beq	r2,zero,8110051c <_fopen_r+0xd0>
81100494:	d9800017 	ldw	r6,0(sp)
81100498:	01c06d84 	movi	r7,438
8110049c:	980b883a 	mov	r5,r19
811004a0:	9009883a 	mov	r4,r18
811004a4:	11016240 	call	81101624 <_open_r>
811004a8:	10001916 	blt	r2,zero,81100510 <_fopen_r+0xc4>
811004ac:	8080038d 	sth	r2,14(r16)
811004b0:	00a04434 	movhi	r2,33040
811004b4:	10869d04 	addi	r2,r2,6772
811004b8:	80800815 	stw	r2,32(r16)
811004bc:	00a04434 	movhi	r2,33040
811004c0:	1086b404 	addi	r2,r2,6864
811004c4:	80800915 	stw	r2,36(r16)
811004c8:	00a04434 	movhi	r2,33040
811004cc:	1086d304 	addi	r2,r2,6988
811004d0:	80800a15 	stw	r2,40(r16)
811004d4:	00a04434 	movhi	r2,33040
811004d8:	1086ea04 	addi	r2,r2,7080
811004dc:	8440030d 	sth	r17,12(r16)
811004e0:	84000715 	stw	r16,28(r16)
811004e4:	80800b15 	stw	r2,44(r16)
811004e8:	8c40400c 	andi	r17,r17,256
811004ec:	88000d1e 	bne	r17,zero,81100524 <_fopen_r+0xd8>
811004f0:	8005883a 	mov	r2,r16
811004f4:	dfc00517 	ldw	ra,20(sp)
811004f8:	dcc00417 	ldw	r19,16(sp)
811004fc:	dc800317 	ldw	r18,12(sp)
81100500:	dc400217 	ldw	r17,8(sp)
81100504:	dc000117 	ldw	r16,4(sp)
81100508:	dec00604 	addi	sp,sp,24
8110050c:	f800283a 	ret
81100510:	110783c0 	call	8110783c <__sfp_lock_acquire>
81100514:	8000030d 	sth	zero,12(r16)
81100518:	11078400 	call	81107840 <__sfp_lock_release>
8110051c:	0005883a 	mov	r2,zero
81100520:	003ff406 	br	811004f4 <__reset+0xfb0e04f4>
81100524:	01c00084 	movi	r7,2
81100528:	000d883a 	mov	r6,zero
8110052c:	800b883a 	mov	r5,r16
81100530:	9009883a 	mov	r4,r18
81100534:	11005580 	call	81100558 <_fseek_r>
81100538:	8005883a 	mov	r2,r16
8110053c:	003fed06 	br	811004f4 <__reset+0xfb0e04f4>

81100540 <fopen>:
81100540:	00a044b4 	movhi	r2,33042
81100544:	109b9c04 	addi	r2,r2,28272
81100548:	280d883a 	mov	r6,r5
8110054c:	200b883a 	mov	r5,r4
81100550:	11000017 	ldw	r4,0(r2)
81100554:	110044c1 	jmpi	8110044c <_fopen_r>

81100558 <_fseek_r>:
81100558:	11005781 	jmpi	81100578 <_fseeko_r>

8110055c <fseek>:
8110055c:	00a044b4 	movhi	r2,33042
81100560:	109b9c04 	addi	r2,r2,28272
81100564:	300f883a 	mov	r7,r6
81100568:	280d883a 	mov	r6,r5
8110056c:	200b883a 	mov	r5,r4
81100570:	11000017 	ldw	r4,0(r2)
81100574:	11005781 	jmpi	81100578 <_fseeko_r>

81100578 <_fseeko_r>:
81100578:	deffe804 	addi	sp,sp,-96
8110057c:	dd401415 	stw	r21,80(sp)
81100580:	dc801115 	stw	r18,68(sp)
81100584:	dc401015 	stw	r17,64(sp)
81100588:	dc000f15 	stw	r16,60(sp)
8110058c:	dfc01715 	stw	ra,92(sp)
81100590:	ddc01615 	stw	r23,88(sp)
81100594:	dd801515 	stw	r22,84(sp)
81100598:	dd001315 	stw	r20,76(sp)
8110059c:	dcc01215 	stw	r19,72(sp)
811005a0:	2023883a 	mov	r17,r4
811005a4:	2821883a 	mov	r16,r5
811005a8:	302b883a 	mov	r21,r6
811005ac:	3825883a 	mov	r18,r7
811005b0:	20000226 	beq	r4,zero,811005bc <_fseeko_r+0x44>
811005b4:	20800e17 	ldw	r2,56(r4)
811005b8:	10005a26 	beq	r2,zero,81100724 <_fseeko_r+0x1ac>
811005bc:	8080030b 	ldhu	r2,12(r16)
811005c0:	00c04204 	movi	r3,264
811005c4:	1080420c 	andi	r2,r2,264
811005c8:	10c05b26 	beq	r2,r3,81100738 <_fseeko_r+0x1c0>
811005cc:	85000a17 	ldw	r20,40(r16)
811005d0:	a000f626 	beq	r20,zero,811009ac <_fseeko_r+0x434>
811005d4:	00800044 	movi	r2,1
811005d8:	90803e26 	beq	r18,r2,811006d4 <_fseeko_r+0x15c>
811005dc:	00800084 	movi	r2,2
811005e0:	90801026 	beq	r18,r2,81100624 <_fseeko_r+0xac>
811005e4:	90000f26 	beq	r18,zero,81100624 <_fseeko_r+0xac>
811005e8:	00800584 	movi	r2,22
811005ec:	88800015 	stw	r2,0(r17)
811005f0:	04ffffc4 	movi	r19,-1
811005f4:	9805883a 	mov	r2,r19
811005f8:	dfc01717 	ldw	ra,92(sp)
811005fc:	ddc01617 	ldw	r23,88(sp)
81100600:	dd801517 	ldw	r22,84(sp)
81100604:	dd401417 	ldw	r21,80(sp)
81100608:	dd001317 	ldw	r20,76(sp)
8110060c:	dcc01217 	ldw	r19,72(sp)
81100610:	dc801117 	ldw	r18,68(sp)
81100614:	dc401017 	ldw	r17,64(sp)
81100618:	dc000f17 	ldw	r16,60(sp)
8110061c:	dec01804 	addi	sp,sp,96
81100620:	f800283a 	ret
81100624:	80800417 	ldw	r2,16(r16)
81100628:	002f883a 	mov	r23,zero
8110062c:	0027883a 	mov	r19,zero
81100630:	1000cb26 	beq	r2,zero,81100960 <_fseeko_r+0x3e8>
81100634:	8080030b 	ldhu	r2,12(r16)
81100638:	10c2068c 	andi	r3,r2,2074
8110063c:	1800071e 	bne	r3,zero,8110065c <_fseeko_r+0xe4>
81100640:	10c1000c 	andi	r3,r2,1024
81100644:	1800451e 	bne	r3,zero,8110075c <_fseeko_r+0x1e4>
81100648:	00e04434 	movhi	r3,33040
8110064c:	18c6d304 	addi	r3,r3,6988
81100650:	a0c0b726 	beq	r20,r3,81100930 <_fseeko_r+0x3b8>
81100654:	10820014 	ori	r2,r2,2048
81100658:	8080030d 	sth	r2,12(r16)
8110065c:	800b883a 	mov	r5,r16
81100660:	8809883a 	mov	r4,r17
81100664:	11074500 	call	81107450 <_fflush_r>
81100668:	1027883a 	mov	r19,r2
8110066c:	103fe01e 	bne	r2,zero,811005f0 <__reset+0xfb0e05f0>
81100670:	81400717 	ldw	r5,28(r16)
81100674:	900f883a 	mov	r7,r18
81100678:	a80d883a 	mov	r6,r21
8110067c:	8809883a 	mov	r4,r17
81100680:	a03ee83a 	callr	r20
81100684:	00ffffc4 	movi	r3,-1
81100688:	10ffd926 	beq	r2,r3,811005f0 <__reset+0xfb0e05f0>
8110068c:	81400c17 	ldw	r5,48(r16)
81100690:	28000526 	beq	r5,zero,811006a8 <_fseeko_r+0x130>
81100694:	80801004 	addi	r2,r16,64
81100698:	28800226 	beq	r5,r2,811006a4 <_fseeko_r+0x12c>
8110069c:	8809883a 	mov	r4,r17
811006a0:	1107cac0 	call	81107cac <_free_r>
811006a4:	80000c15 	stw	zero,48(r16)
811006a8:	8080030b 	ldhu	r2,12(r16)
811006ac:	80c00417 	ldw	r3,16(r16)
811006b0:	80000115 	stw	zero,4(r16)
811006b4:	10bdf7cc 	andi	r2,r2,63455
811006b8:	80c00015 	stw	r3,0(r16)
811006bc:	8080030d 	sth	r2,12(r16)
811006c0:	01800204 	movi	r6,8
811006c4:	000b883a 	mov	r5,zero
811006c8:	81001704 	addi	r4,r16,92
811006cc:	11014fc0 	call	811014fc <memset>
811006d0:	003fc806 	br	811005f4 <__reset+0xfb0e05f4>
811006d4:	800b883a 	mov	r5,r16
811006d8:	8809883a 	mov	r4,r17
811006dc:	11074500 	call	81107450 <_fflush_r>
811006e0:	8080030b 	ldhu	r2,12(r16)
811006e4:	10c4000c 	andi	r3,r2,4096
811006e8:	18008726 	beq	r3,zero,81100908 <_fseeko_r+0x390>
811006ec:	84c01417 	ldw	r19,80(r16)
811006f0:	10c0010c 	andi	r3,r2,4
811006f4:	1800431e 	bne	r3,zero,81100804 <_fseeko_r+0x28c>
811006f8:	1080020c 	andi	r2,r2,8
811006fc:	10008026 	beq	r2,zero,81100900 <_fseeko_r+0x388>
81100700:	80c00017 	ldw	r3,0(r16)
81100704:	80800417 	ldw	r2,16(r16)
81100708:	18000226 	beq	r3,zero,81100714 <_fseeko_r+0x19c>
8110070c:	1887c83a 	sub	r3,r3,r2
81100710:	98e7883a 	add	r19,r19,r3
81100714:	aceb883a 	add	r21,r21,r19
81100718:	05c00044 	movi	r23,1
8110071c:	0025883a 	mov	r18,zero
81100720:	003fc306 	br	81100630 <__reset+0xfb0e0630>
81100724:	110782c0 	call	8110782c <__sinit>
81100728:	8080030b 	ldhu	r2,12(r16)
8110072c:	00c04204 	movi	r3,264
81100730:	1080420c 	andi	r2,r2,264
81100734:	10ffa51e 	bne	r2,r3,811005cc <__reset+0xfb0e05cc>
81100738:	800b883a 	mov	r5,r16
8110073c:	8809883a 	mov	r4,r17
81100740:	11074500 	call	81107450 <_fflush_r>
81100744:	003fa106 	br	811005cc <__reset+0xfb0e05cc>
81100748:	8080030b 	ldhu	r2,12(r16)
8110074c:	00c10004 	movi	r3,1024
81100750:	80c01315 	stw	r3,76(r16)
81100754:	10c4b03a 	or	r2,r2,r3
81100758:	8080030d 	sth	r2,12(r16)
8110075c:	9000311e 	bne	r18,zero,81100824 <_fseeko_r+0x2ac>
81100760:	a82d883a 	mov	r22,r21
81100764:	b800371e 	bne	r23,zero,81100844 <_fseeko_r+0x2cc>
81100768:	8080030b 	ldhu	r2,12(r16)
8110076c:	1084000c 	andi	r2,r2,4096
81100770:	10007f26 	beq	r2,zero,81100970 <_fseeko_r+0x3f8>
81100774:	80801417 	ldw	r2,80(r16)
81100778:	81800117 	ldw	r6,4(r16)
8110077c:	81400c17 	ldw	r5,48(r16)
81100780:	11a7c83a 	sub	r19,r2,r6
81100784:	28008226 	beq	r5,zero,81100990 <_fseeko_r+0x418>
81100788:	81c00f17 	ldw	r7,60(r16)
8110078c:	99e7c83a 	sub	r19,r19,r7
81100790:	81000e17 	ldw	r4,56(r16)
81100794:	80800417 	ldw	r2,16(r16)
81100798:	99a7883a 	add	r19,r19,r6
8110079c:	2087c83a 	sub	r3,r4,r2
811007a0:	98e7c83a 	sub	r19,r19,r3
811007a4:	38c7883a 	add	r3,r7,r3
811007a8:	b4c02b16 	blt	r22,r19,81100858 <_fseeko_r+0x2e0>
811007ac:	98c9883a 	add	r4,r19,r3
811007b0:	b100292e 	bgeu	r22,r4,81100858 <_fseeko_r+0x2e0>
811007b4:	b4e7c83a 	sub	r19,r22,r19
811007b8:	14c5883a 	add	r2,r2,r19
811007bc:	1ce7c83a 	sub	r19,r3,r19
811007c0:	80800015 	stw	r2,0(r16)
811007c4:	84c00115 	stw	r19,4(r16)
811007c8:	28000526 	beq	r5,zero,811007e0 <_fseeko_r+0x268>
811007cc:	80801004 	addi	r2,r16,64
811007d0:	28800226 	beq	r5,r2,811007dc <_fseeko_r+0x264>
811007d4:	8809883a 	mov	r4,r17
811007d8:	1107cac0 	call	81107cac <_free_r>
811007dc:	80000c15 	stw	zero,48(r16)
811007e0:	8080030b 	ldhu	r2,12(r16)
811007e4:	01800204 	movi	r6,8
811007e8:	000b883a 	mov	r5,zero
811007ec:	10bff7cc 	andi	r2,r2,65503
811007f0:	8080030d 	sth	r2,12(r16)
811007f4:	81001704 	addi	r4,r16,92
811007f8:	11014fc0 	call	811014fc <memset>
811007fc:	0027883a 	mov	r19,zero
81100800:	003f7c06 	br	811005f4 <__reset+0xfb0e05f4>
81100804:	80c00117 	ldw	r3,4(r16)
81100808:	80800c17 	ldw	r2,48(r16)
8110080c:	98e7c83a 	sub	r19,r19,r3
81100810:	10003b26 	beq	r2,zero,81100900 <_fseeko_r+0x388>
81100814:	80c00f17 	ldw	r3,60(r16)
81100818:	80800417 	ldw	r2,16(r16)
8110081c:	98e7c83a 	sub	r19,r19,r3
81100820:	003fbc06 	br	81100714 <__reset+0xfb0e0714>
81100824:	8140038f 	ldh	r5,14(r16)
81100828:	d80d883a 	mov	r6,sp
8110082c:	8809883a 	mov	r4,r17
81100830:	11009d80 	call	811009d8 <_fstat_r>
81100834:	103f891e 	bne	r2,zero,8110065c <__reset+0xfb0e065c>
81100838:	dd800417 	ldw	r22,16(sp)
8110083c:	adad883a 	add	r22,r21,r22
81100840:	b83fc926 	beq	r23,zero,81100768 <__reset+0xfb0e0768>
81100844:	81400c17 	ldw	r5,48(r16)
81100848:	81800117 	ldw	r6,4(r16)
8110084c:	28005026 	beq	r5,zero,81100990 <_fseeko_r+0x418>
81100850:	81c00f17 	ldw	r7,60(r16)
81100854:	003fce06 	br	81100790 <__reset+0xfb0e0790>
81100858:	84c01317 	ldw	r19,76(r16)
8110085c:	81400717 	ldw	r5,28(r16)
81100860:	000f883a 	mov	r7,zero
81100864:	04e7c83a 	sub	r19,zero,r19
81100868:	9da6703a 	and	r19,r19,r22
8110086c:	980d883a 	mov	r6,r19
81100870:	8809883a 	mov	r4,r17
81100874:	a03ee83a 	callr	r20
81100878:	00ffffc4 	movi	r3,-1
8110087c:	10ff7726 	beq	r2,r3,8110065c <__reset+0xfb0e065c>
81100880:	80800417 	ldw	r2,16(r16)
81100884:	81400c17 	ldw	r5,48(r16)
81100888:	80000115 	stw	zero,4(r16)
8110088c:	80800015 	stw	r2,0(r16)
81100890:	28000526 	beq	r5,zero,811008a8 <_fseeko_r+0x330>
81100894:	80801004 	addi	r2,r16,64
81100898:	28800226 	beq	r5,r2,811008a4 <_fseeko_r+0x32c>
8110089c:	8809883a 	mov	r4,r17
811008a0:	1107cac0 	call	81107cac <_free_r>
811008a4:	80000c15 	stw	zero,48(r16)
811008a8:	8080030b 	ldhu	r2,12(r16)
811008ac:	b4e7c83a 	sub	r19,r22,r19
811008b0:	10bff7cc 	andi	r2,r2,65503
811008b4:	8080030d 	sth	r2,12(r16)
811008b8:	98000b26 	beq	r19,zero,811008e8 <_fseeko_r+0x370>
811008bc:	800b883a 	mov	r5,r16
811008c0:	8809883a 	mov	r4,r17
811008c4:	11017e00 	call	811017e0 <__srefill_r>
811008c8:	103f641e 	bne	r2,zero,8110065c <__reset+0xfb0e065c>
811008cc:	80800117 	ldw	r2,4(r16)
811008d0:	14ff6236 	bltu	r2,r19,8110065c <__reset+0xfb0e065c>
811008d4:	80c00017 	ldw	r3,0(r16)
811008d8:	14c5c83a 	sub	r2,r2,r19
811008dc:	80800115 	stw	r2,4(r16)
811008e0:	1ce7883a 	add	r19,r3,r19
811008e4:	84c00015 	stw	r19,0(r16)
811008e8:	01800204 	movi	r6,8
811008ec:	000b883a 	mov	r5,zero
811008f0:	81001704 	addi	r4,r16,92
811008f4:	11014fc0 	call	811014fc <memset>
811008f8:	0027883a 	mov	r19,zero
811008fc:	003f3d06 	br	811005f4 <__reset+0xfb0e05f4>
81100900:	80800417 	ldw	r2,16(r16)
81100904:	003f8306 	br	81100714 <__reset+0xfb0e0714>
81100908:	81400717 	ldw	r5,28(r16)
8110090c:	900f883a 	mov	r7,r18
81100910:	000d883a 	mov	r6,zero
81100914:	8809883a 	mov	r4,r17
81100918:	a03ee83a 	callr	r20
8110091c:	1027883a 	mov	r19,r2
81100920:	00bfffc4 	movi	r2,-1
81100924:	98bf3226 	beq	r19,r2,811005f0 <__reset+0xfb0e05f0>
81100928:	8080030b 	ldhu	r2,12(r16)
8110092c:	003f7006 	br	811006f0 <__reset+0xfb0e06f0>
81100930:	8140038f 	ldh	r5,14(r16)
81100934:	283f4716 	blt	r5,zero,81100654 <__reset+0xfb0e0654>
81100938:	d80d883a 	mov	r6,sp
8110093c:	8809883a 	mov	r4,r17
81100940:	11009d80 	call	811009d8 <_fstat_r>
81100944:	1000041e 	bne	r2,zero,81100958 <_fseeko_r+0x3e0>
81100948:	d8800117 	ldw	r2,4(sp)
8110094c:	00e00014 	movui	r3,32768
81100950:	10bc000c 	andi	r2,r2,61440
81100954:	10ff7c26 	beq	r2,r3,81100748 <__reset+0xfb0e0748>
81100958:	8080030b 	ldhu	r2,12(r16)
8110095c:	003f3d06 	br	81100654 <__reset+0xfb0e0654>
81100960:	800b883a 	mov	r5,r16
81100964:	8809883a 	mov	r4,r17
81100968:	1100b340 	call	81100b34 <__smakebuf_r>
8110096c:	003f3106 	br	81100634 <__reset+0xfb0e0634>
81100970:	81400717 	ldw	r5,28(r16)
81100974:	01c00044 	movi	r7,1
81100978:	000d883a 	mov	r6,zero
8110097c:	8809883a 	mov	r4,r17
81100980:	a03ee83a 	callr	r20
81100984:	00ffffc4 	movi	r3,-1
81100988:	10ff7b1e 	bne	r2,r3,81100778 <__reset+0xfb0e0778>
8110098c:	003f3306 	br	8110065c <__reset+0xfb0e065c>
81100990:	80c00017 	ldw	r3,0(r16)
81100994:	80800417 	ldw	r2,16(r16)
81100998:	000b883a 	mov	r5,zero
8110099c:	1887c83a 	sub	r3,r3,r2
811009a0:	98e7c83a 	sub	r19,r19,r3
811009a4:	30c7883a 	add	r3,r6,r3
811009a8:	003f7f06 	br	811007a8 <__reset+0xfb0e07a8>
811009ac:	00800744 	movi	r2,29
811009b0:	88800015 	stw	r2,0(r17)
811009b4:	04ffffc4 	movi	r19,-1
811009b8:	003f0e06 	br	811005f4 <__reset+0xfb0e05f4>

811009bc <fseeko>:
811009bc:	00a044b4 	movhi	r2,33042
811009c0:	109b9c04 	addi	r2,r2,28272
811009c4:	300f883a 	mov	r7,r6
811009c8:	280d883a 	mov	r6,r5
811009cc:	200b883a 	mov	r5,r4
811009d0:	11000017 	ldw	r4,0(r2)
811009d4:	11005781 	jmpi	81100578 <_fseeko_r>

811009d8 <_fstat_r>:
811009d8:	defffd04 	addi	sp,sp,-12
811009dc:	2805883a 	mov	r2,r5
811009e0:	dc000015 	stw	r16,0(sp)
811009e4:	042044b4 	movhi	r16,33042
811009e8:	dc400115 	stw	r17,4(sp)
811009ec:	841bd104 	addi	r16,r16,28484
811009f0:	2023883a 	mov	r17,r4
811009f4:	300b883a 	mov	r5,r6
811009f8:	1009883a 	mov	r4,r2
811009fc:	dfc00215 	stw	ra,8(sp)
81100a00:	80000015 	stw	zero,0(r16)
81100a04:	11162700 	call	81116270 <fstat>
81100a08:	00ffffc4 	movi	r3,-1
81100a0c:	10c00526 	beq	r2,r3,81100a24 <_fstat_r+0x4c>
81100a10:	dfc00217 	ldw	ra,8(sp)
81100a14:	dc400117 	ldw	r17,4(sp)
81100a18:	dc000017 	ldw	r16,0(sp)
81100a1c:	dec00304 	addi	sp,sp,12
81100a20:	f800283a 	ret
81100a24:	80c00017 	ldw	r3,0(r16)
81100a28:	183ff926 	beq	r3,zero,81100a10 <__reset+0xfb0e0a10>
81100a2c:	88c00015 	stw	r3,0(r17)
81100a30:	003ff706 	br	81100a10 <__reset+0xfb0e0a10>

81100a34 <_fwrite_r>:
81100a34:	defff504 	addi	sp,sp,-44
81100a38:	dc800815 	stw	r18,32(sp)
81100a3c:	39a5383a 	mul	r18,r7,r6
81100a40:	d8800304 	addi	r2,sp,12
81100a44:	d8800015 	stw	r2,0(sp)
81100a48:	00800044 	movi	r2,1
81100a4c:	dcc00915 	stw	r19,36(sp)
81100a50:	dc400715 	stw	r17,28(sp)
81100a54:	dc000615 	stw	r16,24(sp)
81100a58:	d9400315 	stw	r5,12(sp)
81100a5c:	dfc00a15 	stw	ra,40(sp)
81100a60:	dc800415 	stw	r18,16(sp)
81100a64:	dc800215 	stw	r18,8(sp)
81100a68:	d8800115 	stw	r2,4(sp)
81100a6c:	3027883a 	mov	r19,r6
81100a70:	3821883a 	mov	r16,r7
81100a74:	2023883a 	mov	r17,r4
81100a78:	d9400b17 	ldw	r5,44(sp)
81100a7c:	20000226 	beq	r4,zero,81100a88 <_fwrite_r+0x54>
81100a80:	20800e17 	ldw	r2,56(r4)
81100a84:	10001a26 	beq	r2,zero,81100af0 <_fwrite_r+0xbc>
81100a88:	2880030b 	ldhu	r2,12(r5)
81100a8c:	10c8000c 	andi	r3,r2,8192
81100a90:	1800061e 	bne	r3,zero,81100aac <_fwrite_r+0x78>
81100a94:	29001917 	ldw	r4,100(r5)
81100a98:	00f7ffc4 	movi	r3,-8193
81100a9c:	10880014 	ori	r2,r2,8192
81100aa0:	20c6703a 	and	r3,r4,r3
81100aa4:	2880030d 	sth	r2,12(r5)
81100aa8:	28c01915 	stw	r3,100(r5)
81100aac:	d80d883a 	mov	r6,sp
81100ab0:	8809883a 	mov	r4,r17
81100ab4:	1107fbc0 	call	81107fbc <__sfvwrite_r>
81100ab8:	10000b26 	beq	r2,zero,81100ae8 <_fwrite_r+0xb4>
81100abc:	d9000217 	ldw	r4,8(sp)
81100ac0:	980b883a 	mov	r5,r19
81100ac4:	9109c83a 	sub	r4,r18,r4
81100ac8:	11136340 	call	81113634 <__udivsi3>
81100acc:	dfc00a17 	ldw	ra,40(sp)
81100ad0:	dcc00917 	ldw	r19,36(sp)
81100ad4:	dc800817 	ldw	r18,32(sp)
81100ad8:	dc400717 	ldw	r17,28(sp)
81100adc:	dc000617 	ldw	r16,24(sp)
81100ae0:	dec00b04 	addi	sp,sp,44
81100ae4:	f800283a 	ret
81100ae8:	8005883a 	mov	r2,r16
81100aec:	003ff706 	br	81100acc <__reset+0xfb0e0acc>
81100af0:	d9400515 	stw	r5,20(sp)
81100af4:	110782c0 	call	8110782c <__sinit>
81100af8:	d9400517 	ldw	r5,20(sp)
81100afc:	003fe206 	br	81100a88 <__reset+0xfb0e0a88>

81100b00 <fwrite>:
81100b00:	defffe04 	addi	sp,sp,-8
81100b04:	00a044b4 	movhi	r2,33042
81100b08:	d9c00015 	stw	r7,0(sp)
81100b0c:	109b9c04 	addi	r2,r2,28272
81100b10:	300f883a 	mov	r7,r6
81100b14:	280d883a 	mov	r6,r5
81100b18:	200b883a 	mov	r5,r4
81100b1c:	11000017 	ldw	r4,0(r2)
81100b20:	dfc00115 	stw	ra,4(sp)
81100b24:	1100a340 	call	81100a34 <_fwrite_r>
81100b28:	dfc00117 	ldw	ra,4(sp)
81100b2c:	dec00204 	addi	sp,sp,8
81100b30:	f800283a 	ret

81100b34 <__smakebuf_r>:
81100b34:	2880030b 	ldhu	r2,12(r5)
81100b38:	10c0008c 	andi	r3,r2,2
81100b3c:	1800411e 	bne	r3,zero,81100c44 <__smakebuf_r+0x110>
81100b40:	deffec04 	addi	sp,sp,-80
81100b44:	dc000f15 	stw	r16,60(sp)
81100b48:	2821883a 	mov	r16,r5
81100b4c:	2940038f 	ldh	r5,14(r5)
81100b50:	dc401015 	stw	r17,64(sp)
81100b54:	dfc01315 	stw	ra,76(sp)
81100b58:	dcc01215 	stw	r19,72(sp)
81100b5c:	dc801115 	stw	r18,68(sp)
81100b60:	2023883a 	mov	r17,r4
81100b64:	28001c16 	blt	r5,zero,81100bd8 <__smakebuf_r+0xa4>
81100b68:	d80d883a 	mov	r6,sp
81100b6c:	11009d80 	call	811009d8 <_fstat_r>
81100b70:	10001816 	blt	r2,zero,81100bd4 <__smakebuf_r+0xa0>
81100b74:	d8800117 	ldw	r2,4(sp)
81100b78:	00e00014 	movui	r3,32768
81100b7c:	10bc000c 	andi	r2,r2,61440
81100b80:	14c80020 	cmpeqi	r19,r2,8192
81100b84:	10c03726 	beq	r2,r3,81100c64 <__smakebuf_r+0x130>
81100b88:	80c0030b 	ldhu	r3,12(r16)
81100b8c:	18c20014 	ori	r3,r3,2048
81100b90:	80c0030d 	sth	r3,12(r16)
81100b94:	00c80004 	movi	r3,8192
81100b98:	10c0521e 	bne	r2,r3,81100ce4 <__smakebuf_r+0x1b0>
81100b9c:	8140038f 	ldh	r5,14(r16)
81100ba0:	8809883a 	mov	r4,r17
81100ba4:	11086000 	call	81108600 <_isatty_r>
81100ba8:	10004c26 	beq	r2,zero,81100cdc <__smakebuf_r+0x1a8>
81100bac:	8080030b 	ldhu	r2,12(r16)
81100bb0:	80c010c4 	addi	r3,r16,67
81100bb4:	80c00015 	stw	r3,0(r16)
81100bb8:	10800054 	ori	r2,r2,1
81100bbc:	8080030d 	sth	r2,12(r16)
81100bc0:	00800044 	movi	r2,1
81100bc4:	80c00415 	stw	r3,16(r16)
81100bc8:	80800515 	stw	r2,20(r16)
81100bcc:	04810004 	movi	r18,1024
81100bd0:	00000706 	br	81100bf0 <__smakebuf_r+0xbc>
81100bd4:	8080030b 	ldhu	r2,12(r16)
81100bd8:	10c0200c 	andi	r3,r2,128
81100bdc:	18001f1e 	bne	r3,zero,81100c5c <__smakebuf_r+0x128>
81100be0:	04810004 	movi	r18,1024
81100be4:	10820014 	ori	r2,r2,2048
81100be8:	8080030d 	sth	r2,12(r16)
81100bec:	0027883a 	mov	r19,zero
81100bf0:	900b883a 	mov	r5,r18
81100bf4:	8809883a 	mov	r4,r17
81100bf8:	1100cf00 	call	81100cf0 <_malloc_r>
81100bfc:	10002c26 	beq	r2,zero,81100cb0 <__smakebuf_r+0x17c>
81100c00:	80c0030b 	ldhu	r3,12(r16)
81100c04:	01204434 	movhi	r4,33040
81100c08:	211d3904 	addi	r4,r4,29924
81100c0c:	89000f15 	stw	r4,60(r17)
81100c10:	18c02014 	ori	r3,r3,128
81100c14:	80c0030d 	sth	r3,12(r16)
81100c18:	80800015 	stw	r2,0(r16)
81100c1c:	80800415 	stw	r2,16(r16)
81100c20:	84800515 	stw	r18,20(r16)
81100c24:	98001a1e 	bne	r19,zero,81100c90 <__smakebuf_r+0x15c>
81100c28:	dfc01317 	ldw	ra,76(sp)
81100c2c:	dcc01217 	ldw	r19,72(sp)
81100c30:	dc801117 	ldw	r18,68(sp)
81100c34:	dc401017 	ldw	r17,64(sp)
81100c38:	dc000f17 	ldw	r16,60(sp)
81100c3c:	dec01404 	addi	sp,sp,80
81100c40:	f800283a 	ret
81100c44:	288010c4 	addi	r2,r5,67
81100c48:	28800015 	stw	r2,0(r5)
81100c4c:	28800415 	stw	r2,16(r5)
81100c50:	00800044 	movi	r2,1
81100c54:	28800515 	stw	r2,20(r5)
81100c58:	f800283a 	ret
81100c5c:	04801004 	movi	r18,64
81100c60:	003fe006 	br	81100be4 <__reset+0xfb0e0be4>
81100c64:	81000a17 	ldw	r4,40(r16)
81100c68:	00e04434 	movhi	r3,33040
81100c6c:	18c6d304 	addi	r3,r3,6988
81100c70:	20ffc51e 	bne	r4,r3,81100b88 <__reset+0xfb0e0b88>
81100c74:	8080030b 	ldhu	r2,12(r16)
81100c78:	04810004 	movi	r18,1024
81100c7c:	84801315 	stw	r18,76(r16)
81100c80:	1484b03a 	or	r2,r2,r18
81100c84:	8080030d 	sth	r2,12(r16)
81100c88:	0027883a 	mov	r19,zero
81100c8c:	003fd806 	br	81100bf0 <__reset+0xfb0e0bf0>
81100c90:	8140038f 	ldh	r5,14(r16)
81100c94:	8809883a 	mov	r4,r17
81100c98:	11086000 	call	81108600 <_isatty_r>
81100c9c:	103fe226 	beq	r2,zero,81100c28 <__reset+0xfb0e0c28>
81100ca0:	8080030b 	ldhu	r2,12(r16)
81100ca4:	10800054 	ori	r2,r2,1
81100ca8:	8080030d 	sth	r2,12(r16)
81100cac:	003fde06 	br	81100c28 <__reset+0xfb0e0c28>
81100cb0:	8080030b 	ldhu	r2,12(r16)
81100cb4:	10c0800c 	andi	r3,r2,512
81100cb8:	183fdb1e 	bne	r3,zero,81100c28 <__reset+0xfb0e0c28>
81100cbc:	10800094 	ori	r2,r2,2
81100cc0:	80c010c4 	addi	r3,r16,67
81100cc4:	8080030d 	sth	r2,12(r16)
81100cc8:	00800044 	movi	r2,1
81100ccc:	80c00015 	stw	r3,0(r16)
81100cd0:	80c00415 	stw	r3,16(r16)
81100cd4:	80800515 	stw	r2,20(r16)
81100cd8:	003fd306 	br	81100c28 <__reset+0xfb0e0c28>
81100cdc:	04810004 	movi	r18,1024
81100ce0:	003fc306 	br	81100bf0 <__reset+0xfb0e0bf0>
81100ce4:	0027883a 	mov	r19,zero
81100ce8:	04810004 	movi	r18,1024
81100cec:	003fc006 	br	81100bf0 <__reset+0xfb0e0bf0>

81100cf0 <_malloc_r>:
81100cf0:	defff504 	addi	sp,sp,-44
81100cf4:	dc800315 	stw	r18,12(sp)
81100cf8:	dfc00a15 	stw	ra,40(sp)
81100cfc:	df000915 	stw	fp,36(sp)
81100d00:	ddc00815 	stw	r23,32(sp)
81100d04:	dd800715 	stw	r22,28(sp)
81100d08:	dd400615 	stw	r21,24(sp)
81100d0c:	dd000515 	stw	r20,20(sp)
81100d10:	dcc00415 	stw	r19,16(sp)
81100d14:	dc400215 	stw	r17,8(sp)
81100d18:	dc000115 	stw	r16,4(sp)
81100d1c:	288002c4 	addi	r2,r5,11
81100d20:	00c00584 	movi	r3,22
81100d24:	2025883a 	mov	r18,r4
81100d28:	18807f2e 	bgeu	r3,r2,81100f28 <_malloc_r+0x238>
81100d2c:	047ffe04 	movi	r17,-8
81100d30:	1462703a 	and	r17,r2,r17
81100d34:	8800a316 	blt	r17,zero,81100fc4 <_malloc_r+0x2d4>
81100d38:	8940a236 	bltu	r17,r5,81100fc4 <_malloc_r+0x2d4>
81100d3c:	1116cc40 	call	81116cc4 <__malloc_lock>
81100d40:	00807dc4 	movi	r2,503
81100d44:	1441e92e 	bgeu	r2,r17,811014ec <_malloc_r+0x7fc>
81100d48:	8804d27a 	srli	r2,r17,9
81100d4c:	1000a126 	beq	r2,zero,81100fd4 <_malloc_r+0x2e4>
81100d50:	00c00104 	movi	r3,4
81100d54:	18811e36 	bltu	r3,r2,811011d0 <_malloc_r+0x4e0>
81100d58:	8804d1ba 	srli	r2,r17,6
81100d5c:	12000e44 	addi	r8,r2,57
81100d60:	11c00e04 	addi	r7,r2,56
81100d64:	4209883a 	add	r4,r8,r8
81100d68:	04e044b4 	movhi	r19,33042
81100d6c:	2109883a 	add	r4,r4,r4
81100d70:	9cd58604 	addi	r19,r19,22040
81100d74:	2109883a 	add	r4,r4,r4
81100d78:	9909883a 	add	r4,r19,r4
81100d7c:	24000117 	ldw	r16,4(r4)
81100d80:	213ffe04 	addi	r4,r4,-8
81100d84:	24009726 	beq	r4,r16,81100fe4 <_malloc_r+0x2f4>
81100d88:	80800117 	ldw	r2,4(r16)
81100d8c:	01bfff04 	movi	r6,-4
81100d90:	014003c4 	movi	r5,15
81100d94:	1184703a 	and	r2,r2,r6
81100d98:	1447c83a 	sub	r3,r2,r17
81100d9c:	28c00716 	blt	r5,r3,81100dbc <_malloc_r+0xcc>
81100da0:	1800920e 	bge	r3,zero,81100fec <_malloc_r+0x2fc>
81100da4:	84000317 	ldw	r16,12(r16)
81100da8:	24008e26 	beq	r4,r16,81100fe4 <_malloc_r+0x2f4>
81100dac:	80800117 	ldw	r2,4(r16)
81100db0:	1184703a 	and	r2,r2,r6
81100db4:	1447c83a 	sub	r3,r2,r17
81100db8:	28fff90e 	bge	r5,r3,81100da0 <__reset+0xfb0e0da0>
81100dbc:	3809883a 	mov	r4,r7
81100dc0:	01a044b4 	movhi	r6,33042
81100dc4:	9c000417 	ldw	r16,16(r19)
81100dc8:	31958604 	addi	r6,r6,22040
81100dcc:	32000204 	addi	r8,r6,8
81100dd0:	82013426 	beq	r16,r8,811012a4 <_malloc_r+0x5b4>
81100dd4:	80c00117 	ldw	r3,4(r16)
81100dd8:	00bfff04 	movi	r2,-4
81100ddc:	188e703a 	and	r7,r3,r2
81100de0:	3c45c83a 	sub	r2,r7,r17
81100de4:	00c003c4 	movi	r3,15
81100de8:	18811f16 	blt	r3,r2,81101268 <_malloc_r+0x578>
81100dec:	32000515 	stw	r8,20(r6)
81100df0:	32000415 	stw	r8,16(r6)
81100df4:	10007f0e 	bge	r2,zero,81100ff4 <_malloc_r+0x304>
81100df8:	00807fc4 	movi	r2,511
81100dfc:	11c0fd36 	bltu	r2,r7,811011f4 <_malloc_r+0x504>
81100e00:	3806d0fa 	srli	r3,r7,3
81100e04:	01c00044 	movi	r7,1
81100e08:	30800117 	ldw	r2,4(r6)
81100e0c:	19400044 	addi	r5,r3,1
81100e10:	294b883a 	add	r5,r5,r5
81100e14:	1807d0ba 	srai	r3,r3,2
81100e18:	294b883a 	add	r5,r5,r5
81100e1c:	294b883a 	add	r5,r5,r5
81100e20:	298b883a 	add	r5,r5,r6
81100e24:	38c6983a 	sll	r3,r7,r3
81100e28:	29c00017 	ldw	r7,0(r5)
81100e2c:	2a7ffe04 	addi	r9,r5,-8
81100e30:	1886b03a 	or	r3,r3,r2
81100e34:	82400315 	stw	r9,12(r16)
81100e38:	81c00215 	stw	r7,8(r16)
81100e3c:	30c00115 	stw	r3,4(r6)
81100e40:	2c000015 	stw	r16,0(r5)
81100e44:	3c000315 	stw	r16,12(r7)
81100e48:	2005d0ba 	srai	r2,r4,2
81100e4c:	01400044 	movi	r5,1
81100e50:	288a983a 	sll	r5,r5,r2
81100e54:	19406f36 	bltu	r3,r5,81101014 <_malloc_r+0x324>
81100e58:	28c4703a 	and	r2,r5,r3
81100e5c:	10000a1e 	bne	r2,zero,81100e88 <_malloc_r+0x198>
81100e60:	00bfff04 	movi	r2,-4
81100e64:	294b883a 	add	r5,r5,r5
81100e68:	2088703a 	and	r4,r4,r2
81100e6c:	28c4703a 	and	r2,r5,r3
81100e70:	21000104 	addi	r4,r4,4
81100e74:	1000041e 	bne	r2,zero,81100e88 <_malloc_r+0x198>
81100e78:	294b883a 	add	r5,r5,r5
81100e7c:	28c4703a 	and	r2,r5,r3
81100e80:	21000104 	addi	r4,r4,4
81100e84:	103ffc26 	beq	r2,zero,81100e78 <__reset+0xfb0e0e78>
81100e88:	02bfff04 	movi	r10,-4
81100e8c:	024003c4 	movi	r9,15
81100e90:	21800044 	addi	r6,r4,1
81100e94:	318d883a 	add	r6,r6,r6
81100e98:	318d883a 	add	r6,r6,r6
81100e9c:	318d883a 	add	r6,r6,r6
81100ea0:	998d883a 	add	r6,r19,r6
81100ea4:	333ffe04 	addi	r12,r6,-8
81100ea8:	2017883a 	mov	r11,r4
81100eac:	31800104 	addi	r6,r6,4
81100eb0:	34000017 	ldw	r16,0(r6)
81100eb4:	31fffd04 	addi	r7,r6,-12
81100eb8:	81c0041e 	bne	r16,r7,81100ecc <_malloc_r+0x1dc>
81100ebc:	0000fb06 	br	811012ac <_malloc_r+0x5bc>
81100ec0:	1801030e 	bge	r3,zero,811012d0 <_malloc_r+0x5e0>
81100ec4:	84000317 	ldw	r16,12(r16)
81100ec8:	81c0f826 	beq	r16,r7,811012ac <_malloc_r+0x5bc>
81100ecc:	80800117 	ldw	r2,4(r16)
81100ed0:	1284703a 	and	r2,r2,r10
81100ed4:	1447c83a 	sub	r3,r2,r17
81100ed8:	48fff90e 	bge	r9,r3,81100ec0 <__reset+0xfb0e0ec0>
81100edc:	80800317 	ldw	r2,12(r16)
81100ee0:	81000217 	ldw	r4,8(r16)
81100ee4:	89400054 	ori	r5,r17,1
81100ee8:	81400115 	stw	r5,4(r16)
81100eec:	20800315 	stw	r2,12(r4)
81100ef0:	11000215 	stw	r4,8(r2)
81100ef4:	8463883a 	add	r17,r16,r17
81100ef8:	9c400515 	stw	r17,20(r19)
81100efc:	9c400415 	stw	r17,16(r19)
81100f00:	18800054 	ori	r2,r3,1
81100f04:	88800115 	stw	r2,4(r17)
81100f08:	8a000315 	stw	r8,12(r17)
81100f0c:	8a000215 	stw	r8,8(r17)
81100f10:	88e3883a 	add	r17,r17,r3
81100f14:	88c00015 	stw	r3,0(r17)
81100f18:	9009883a 	mov	r4,r18
81100f1c:	1116de40 	call	81116de4 <__malloc_unlock>
81100f20:	80800204 	addi	r2,r16,8
81100f24:	00001b06 	br	81100f94 <_malloc_r+0x2a4>
81100f28:	04400404 	movi	r17,16
81100f2c:	89402536 	bltu	r17,r5,81100fc4 <_malloc_r+0x2d4>
81100f30:	1116cc40 	call	81116cc4 <__malloc_lock>
81100f34:	00800184 	movi	r2,6
81100f38:	01000084 	movi	r4,2
81100f3c:	04e044b4 	movhi	r19,33042
81100f40:	1085883a 	add	r2,r2,r2
81100f44:	9cd58604 	addi	r19,r19,22040
81100f48:	1085883a 	add	r2,r2,r2
81100f4c:	9885883a 	add	r2,r19,r2
81100f50:	14000117 	ldw	r16,4(r2)
81100f54:	10fffe04 	addi	r3,r2,-8
81100f58:	80c0d926 	beq	r16,r3,811012c0 <_malloc_r+0x5d0>
81100f5c:	80c00117 	ldw	r3,4(r16)
81100f60:	81000317 	ldw	r4,12(r16)
81100f64:	00bfff04 	movi	r2,-4
81100f68:	1884703a 	and	r2,r3,r2
81100f6c:	81400217 	ldw	r5,8(r16)
81100f70:	8085883a 	add	r2,r16,r2
81100f74:	10c00117 	ldw	r3,4(r2)
81100f78:	29000315 	stw	r4,12(r5)
81100f7c:	21400215 	stw	r5,8(r4)
81100f80:	18c00054 	ori	r3,r3,1
81100f84:	10c00115 	stw	r3,4(r2)
81100f88:	9009883a 	mov	r4,r18
81100f8c:	1116de40 	call	81116de4 <__malloc_unlock>
81100f90:	80800204 	addi	r2,r16,8
81100f94:	dfc00a17 	ldw	ra,40(sp)
81100f98:	df000917 	ldw	fp,36(sp)
81100f9c:	ddc00817 	ldw	r23,32(sp)
81100fa0:	dd800717 	ldw	r22,28(sp)
81100fa4:	dd400617 	ldw	r21,24(sp)
81100fa8:	dd000517 	ldw	r20,20(sp)
81100fac:	dcc00417 	ldw	r19,16(sp)
81100fb0:	dc800317 	ldw	r18,12(sp)
81100fb4:	dc400217 	ldw	r17,8(sp)
81100fb8:	dc000117 	ldw	r16,4(sp)
81100fbc:	dec00b04 	addi	sp,sp,44
81100fc0:	f800283a 	ret
81100fc4:	00800304 	movi	r2,12
81100fc8:	90800015 	stw	r2,0(r18)
81100fcc:	0005883a 	mov	r2,zero
81100fd0:	003ff006 	br	81100f94 <__reset+0xfb0e0f94>
81100fd4:	01002004 	movi	r4,128
81100fd8:	02001004 	movi	r8,64
81100fdc:	01c00fc4 	movi	r7,63
81100fe0:	003f6106 	br	81100d68 <__reset+0xfb0e0d68>
81100fe4:	4009883a 	mov	r4,r8
81100fe8:	003f7506 	br	81100dc0 <__reset+0xfb0e0dc0>
81100fec:	81000317 	ldw	r4,12(r16)
81100ff0:	003fde06 	br	81100f6c <__reset+0xfb0e0f6c>
81100ff4:	81c5883a 	add	r2,r16,r7
81100ff8:	11400117 	ldw	r5,4(r2)
81100ffc:	9009883a 	mov	r4,r18
81101000:	29400054 	ori	r5,r5,1
81101004:	11400115 	stw	r5,4(r2)
81101008:	1116de40 	call	81116de4 <__malloc_unlock>
8110100c:	80800204 	addi	r2,r16,8
81101010:	003fe006 	br	81100f94 <__reset+0xfb0e0f94>
81101014:	9c000217 	ldw	r16,8(r19)
81101018:	00bfff04 	movi	r2,-4
8110101c:	85800117 	ldw	r22,4(r16)
81101020:	b0ac703a 	and	r22,r22,r2
81101024:	b4400336 	bltu	r22,r17,81101034 <_malloc_r+0x344>
81101028:	b445c83a 	sub	r2,r22,r17
8110102c:	00c003c4 	movi	r3,15
81101030:	18805d16 	blt	r3,r2,811011a8 <_malloc_r+0x4b8>
81101034:	05e044b4 	movhi	r23,33042
81101038:	00a044b4 	movhi	r2,33042
8110103c:	109bd404 	addi	r2,r2,28496
81101040:	bddb9d04 	addi	r23,r23,28276
81101044:	15400017 	ldw	r21,0(r2)
81101048:	b8c00017 	ldw	r3,0(r23)
8110104c:	00bfffc4 	movi	r2,-1
81101050:	858d883a 	add	r6,r16,r22
81101054:	8d6b883a 	add	r21,r17,r21
81101058:	1880ea26 	beq	r3,r2,81101404 <_malloc_r+0x714>
8110105c:	ad4403c4 	addi	r21,r21,4111
81101060:	00bc0004 	movi	r2,-4096
81101064:	a8aa703a 	and	r21,r21,r2
81101068:	a80b883a 	mov	r5,r21
8110106c:	9009883a 	mov	r4,r18
81101070:	d9800015 	stw	r6,0(sp)
81101074:	11019b40 	call	811019b4 <_sbrk_r>
81101078:	1029883a 	mov	r20,r2
8110107c:	00bfffc4 	movi	r2,-1
81101080:	d9800017 	ldw	r6,0(sp)
81101084:	a080e826 	beq	r20,r2,81101428 <_malloc_r+0x738>
81101088:	a180a636 	bltu	r20,r6,81101324 <_malloc_r+0x634>
8110108c:	072044b4 	movhi	fp,33042
81101090:	e71bf904 	addi	fp,fp,28644
81101094:	e0800017 	ldw	r2,0(fp)
81101098:	a887883a 	add	r3,r21,r2
8110109c:	e0c00015 	stw	r3,0(fp)
811010a0:	3500e626 	beq	r6,r20,8110143c <_malloc_r+0x74c>
811010a4:	b9000017 	ldw	r4,0(r23)
811010a8:	00bfffc4 	movi	r2,-1
811010ac:	2080ee26 	beq	r4,r2,81101468 <_malloc_r+0x778>
811010b0:	a185c83a 	sub	r2,r20,r6
811010b4:	10c5883a 	add	r2,r2,r3
811010b8:	e0800015 	stw	r2,0(fp)
811010bc:	a0c001cc 	andi	r3,r20,7
811010c0:	1800bc26 	beq	r3,zero,811013b4 <_malloc_r+0x6c4>
811010c4:	a0e9c83a 	sub	r20,r20,r3
811010c8:	00840204 	movi	r2,4104
811010cc:	a5000204 	addi	r20,r20,8
811010d0:	10c7c83a 	sub	r3,r2,r3
811010d4:	a545883a 	add	r2,r20,r21
811010d8:	1083ffcc 	andi	r2,r2,4095
811010dc:	18abc83a 	sub	r21,r3,r2
811010e0:	a80b883a 	mov	r5,r21
811010e4:	9009883a 	mov	r4,r18
811010e8:	11019b40 	call	811019b4 <_sbrk_r>
811010ec:	00ffffc4 	movi	r3,-1
811010f0:	10c0e126 	beq	r2,r3,81101478 <_malloc_r+0x788>
811010f4:	1505c83a 	sub	r2,r2,r20
811010f8:	1545883a 	add	r2,r2,r21
811010fc:	10800054 	ori	r2,r2,1
81101100:	e0c00017 	ldw	r3,0(fp)
81101104:	9d000215 	stw	r20,8(r19)
81101108:	a0800115 	stw	r2,4(r20)
8110110c:	a8c7883a 	add	r3,r21,r3
81101110:	e0c00015 	stw	r3,0(fp)
81101114:	84c00e26 	beq	r16,r19,81101150 <_malloc_r+0x460>
81101118:	018003c4 	movi	r6,15
8110111c:	3580a72e 	bgeu	r6,r22,811013bc <_malloc_r+0x6cc>
81101120:	81400117 	ldw	r5,4(r16)
81101124:	013ffe04 	movi	r4,-8
81101128:	b0bffd04 	addi	r2,r22,-12
8110112c:	1104703a 	and	r2,r2,r4
81101130:	2900004c 	andi	r4,r5,1
81101134:	2088b03a 	or	r4,r4,r2
81101138:	81000115 	stw	r4,4(r16)
8110113c:	01400144 	movi	r5,5
81101140:	8089883a 	add	r4,r16,r2
81101144:	21400115 	stw	r5,4(r4)
81101148:	21400215 	stw	r5,8(r4)
8110114c:	3080cd36 	bltu	r6,r2,81101484 <_malloc_r+0x794>
81101150:	00a044b4 	movhi	r2,33042
81101154:	109bd304 	addi	r2,r2,28492
81101158:	11000017 	ldw	r4,0(r2)
8110115c:	20c0012e 	bgeu	r4,r3,81101164 <_malloc_r+0x474>
81101160:	10c00015 	stw	r3,0(r2)
81101164:	00a044b4 	movhi	r2,33042
81101168:	109bd204 	addi	r2,r2,28488
8110116c:	11000017 	ldw	r4,0(r2)
81101170:	9c000217 	ldw	r16,8(r19)
81101174:	20c0012e 	bgeu	r4,r3,8110117c <_malloc_r+0x48c>
81101178:	10c00015 	stw	r3,0(r2)
8110117c:	80c00117 	ldw	r3,4(r16)
81101180:	00bfff04 	movi	r2,-4
81101184:	1886703a 	and	r3,r3,r2
81101188:	1c45c83a 	sub	r2,r3,r17
8110118c:	1c400236 	bltu	r3,r17,81101198 <_malloc_r+0x4a8>
81101190:	00c003c4 	movi	r3,15
81101194:	18800416 	blt	r3,r2,811011a8 <_malloc_r+0x4b8>
81101198:	9009883a 	mov	r4,r18
8110119c:	1116de40 	call	81116de4 <__malloc_unlock>
811011a0:	0005883a 	mov	r2,zero
811011a4:	003f7b06 	br	81100f94 <__reset+0xfb0e0f94>
811011a8:	88c00054 	ori	r3,r17,1
811011ac:	80c00115 	stw	r3,4(r16)
811011b0:	8463883a 	add	r17,r16,r17
811011b4:	10800054 	ori	r2,r2,1
811011b8:	9c400215 	stw	r17,8(r19)
811011bc:	88800115 	stw	r2,4(r17)
811011c0:	9009883a 	mov	r4,r18
811011c4:	1116de40 	call	81116de4 <__malloc_unlock>
811011c8:	80800204 	addi	r2,r16,8
811011cc:	003f7106 	br	81100f94 <__reset+0xfb0e0f94>
811011d0:	00c00504 	movi	r3,20
811011d4:	18804a2e 	bgeu	r3,r2,81101300 <_malloc_r+0x610>
811011d8:	00c01504 	movi	r3,84
811011dc:	18806e36 	bltu	r3,r2,81101398 <_malloc_r+0x6a8>
811011e0:	8804d33a 	srli	r2,r17,12
811011e4:	12001bc4 	addi	r8,r2,111
811011e8:	11c01b84 	addi	r7,r2,110
811011ec:	4209883a 	add	r4,r8,r8
811011f0:	003edd06 	br	81100d68 <__reset+0xfb0e0d68>
811011f4:	3804d27a 	srli	r2,r7,9
811011f8:	00c00104 	movi	r3,4
811011fc:	1880442e 	bgeu	r3,r2,81101310 <_malloc_r+0x620>
81101200:	00c00504 	movi	r3,20
81101204:	18808136 	bltu	r3,r2,8110140c <_malloc_r+0x71c>
81101208:	11401704 	addi	r5,r2,92
8110120c:	10c016c4 	addi	r3,r2,91
81101210:	294b883a 	add	r5,r5,r5
81101214:	294b883a 	add	r5,r5,r5
81101218:	294b883a 	add	r5,r5,r5
8110121c:	994b883a 	add	r5,r19,r5
81101220:	28800017 	ldw	r2,0(r5)
81101224:	01a044b4 	movhi	r6,33042
81101228:	297ffe04 	addi	r5,r5,-8
8110122c:	31958604 	addi	r6,r6,22040
81101230:	28806526 	beq	r5,r2,811013c8 <_malloc_r+0x6d8>
81101234:	01bfff04 	movi	r6,-4
81101238:	10c00117 	ldw	r3,4(r2)
8110123c:	1986703a 	and	r3,r3,r6
81101240:	38c0022e 	bgeu	r7,r3,8110124c <_malloc_r+0x55c>
81101244:	10800217 	ldw	r2,8(r2)
81101248:	28bffb1e 	bne	r5,r2,81101238 <__reset+0xfb0e1238>
8110124c:	11400317 	ldw	r5,12(r2)
81101250:	98c00117 	ldw	r3,4(r19)
81101254:	81400315 	stw	r5,12(r16)
81101258:	80800215 	stw	r2,8(r16)
8110125c:	2c000215 	stw	r16,8(r5)
81101260:	14000315 	stw	r16,12(r2)
81101264:	003ef806 	br	81100e48 <__reset+0xfb0e0e48>
81101268:	88c00054 	ori	r3,r17,1
8110126c:	80c00115 	stw	r3,4(r16)
81101270:	8463883a 	add	r17,r16,r17
81101274:	34400515 	stw	r17,20(r6)
81101278:	34400415 	stw	r17,16(r6)
8110127c:	10c00054 	ori	r3,r2,1
81101280:	8a000315 	stw	r8,12(r17)
81101284:	8a000215 	stw	r8,8(r17)
81101288:	88c00115 	stw	r3,4(r17)
8110128c:	88a3883a 	add	r17,r17,r2
81101290:	88800015 	stw	r2,0(r17)
81101294:	9009883a 	mov	r4,r18
81101298:	1116de40 	call	81116de4 <__malloc_unlock>
8110129c:	80800204 	addi	r2,r16,8
811012a0:	003f3c06 	br	81100f94 <__reset+0xfb0e0f94>
811012a4:	30c00117 	ldw	r3,4(r6)
811012a8:	003ee706 	br	81100e48 <__reset+0xfb0e0e48>
811012ac:	5ac00044 	addi	r11,r11,1
811012b0:	588000cc 	andi	r2,r11,3
811012b4:	31800204 	addi	r6,r6,8
811012b8:	103efd1e 	bne	r2,zero,81100eb0 <__reset+0xfb0e0eb0>
811012bc:	00002406 	br	81101350 <_malloc_r+0x660>
811012c0:	14000317 	ldw	r16,12(r2)
811012c4:	143f251e 	bne	r2,r16,81100f5c <__reset+0xfb0e0f5c>
811012c8:	21000084 	addi	r4,r4,2
811012cc:	003ebc06 	br	81100dc0 <__reset+0xfb0e0dc0>
811012d0:	8085883a 	add	r2,r16,r2
811012d4:	10c00117 	ldw	r3,4(r2)
811012d8:	81000317 	ldw	r4,12(r16)
811012dc:	81400217 	ldw	r5,8(r16)
811012e0:	18c00054 	ori	r3,r3,1
811012e4:	10c00115 	stw	r3,4(r2)
811012e8:	29000315 	stw	r4,12(r5)
811012ec:	21400215 	stw	r5,8(r4)
811012f0:	9009883a 	mov	r4,r18
811012f4:	1116de40 	call	81116de4 <__malloc_unlock>
811012f8:	80800204 	addi	r2,r16,8
811012fc:	003f2506 	br	81100f94 <__reset+0xfb0e0f94>
81101300:	12001704 	addi	r8,r2,92
81101304:	11c016c4 	addi	r7,r2,91
81101308:	4209883a 	add	r4,r8,r8
8110130c:	003e9606 	br	81100d68 <__reset+0xfb0e0d68>
81101310:	3804d1ba 	srli	r2,r7,6
81101314:	11400e44 	addi	r5,r2,57
81101318:	10c00e04 	addi	r3,r2,56
8110131c:	294b883a 	add	r5,r5,r5
81101320:	003fbc06 	br	81101214 <__reset+0xfb0e1214>
81101324:	84ff5926 	beq	r16,r19,8110108c <__reset+0xfb0e108c>
81101328:	00a044b4 	movhi	r2,33042
8110132c:	10958604 	addi	r2,r2,22040
81101330:	14000217 	ldw	r16,8(r2)
81101334:	00bfff04 	movi	r2,-4
81101338:	80c00117 	ldw	r3,4(r16)
8110133c:	1886703a 	and	r3,r3,r2
81101340:	003f9106 	br	81101188 <__reset+0xfb0e1188>
81101344:	60800217 	ldw	r2,8(r12)
81101348:	213fffc4 	addi	r4,r4,-1
8110134c:	1300651e 	bne	r2,r12,811014e4 <_malloc_r+0x7f4>
81101350:	208000cc 	andi	r2,r4,3
81101354:	633ffe04 	addi	r12,r12,-8
81101358:	103ffa1e 	bne	r2,zero,81101344 <__reset+0xfb0e1344>
8110135c:	98800117 	ldw	r2,4(r19)
81101360:	0146303a 	nor	r3,zero,r5
81101364:	1884703a 	and	r2,r3,r2
81101368:	98800115 	stw	r2,4(r19)
8110136c:	294b883a 	add	r5,r5,r5
81101370:	117f2836 	bltu	r2,r5,81101014 <__reset+0xfb0e1014>
81101374:	283f2726 	beq	r5,zero,81101014 <__reset+0xfb0e1014>
81101378:	2886703a 	and	r3,r5,r2
8110137c:	5809883a 	mov	r4,r11
81101380:	183ec31e 	bne	r3,zero,81100e90 <__reset+0xfb0e0e90>
81101384:	294b883a 	add	r5,r5,r5
81101388:	2886703a 	and	r3,r5,r2
8110138c:	21000104 	addi	r4,r4,4
81101390:	183ffc26 	beq	r3,zero,81101384 <__reset+0xfb0e1384>
81101394:	003ebe06 	br	81100e90 <__reset+0xfb0e0e90>
81101398:	00c05504 	movi	r3,340
8110139c:	18801236 	bltu	r3,r2,811013e8 <_malloc_r+0x6f8>
811013a0:	8804d3fa 	srli	r2,r17,15
811013a4:	12001e04 	addi	r8,r2,120
811013a8:	11c01dc4 	addi	r7,r2,119
811013ac:	4209883a 	add	r4,r8,r8
811013b0:	003e6d06 	br	81100d68 <__reset+0xfb0e0d68>
811013b4:	00c40004 	movi	r3,4096
811013b8:	003f4606 	br	811010d4 <__reset+0xfb0e10d4>
811013bc:	00800044 	movi	r2,1
811013c0:	a0800115 	stw	r2,4(r20)
811013c4:	003f7406 	br	81101198 <__reset+0xfb0e1198>
811013c8:	1805d0ba 	srai	r2,r3,2
811013cc:	01c00044 	movi	r7,1
811013d0:	30c00117 	ldw	r3,4(r6)
811013d4:	388e983a 	sll	r7,r7,r2
811013d8:	2805883a 	mov	r2,r5
811013dc:	38c6b03a 	or	r3,r7,r3
811013e0:	30c00115 	stw	r3,4(r6)
811013e4:	003f9b06 	br	81101254 <__reset+0xfb0e1254>
811013e8:	00c15504 	movi	r3,1364
811013ec:	18801a36 	bltu	r3,r2,81101458 <_malloc_r+0x768>
811013f0:	8804d4ba 	srli	r2,r17,18
811013f4:	12001f44 	addi	r8,r2,125
811013f8:	11c01f04 	addi	r7,r2,124
811013fc:	4209883a 	add	r4,r8,r8
81101400:	003e5906 	br	81100d68 <__reset+0xfb0e0d68>
81101404:	ad400404 	addi	r21,r21,16
81101408:	003f1706 	br	81101068 <__reset+0xfb0e1068>
8110140c:	00c01504 	movi	r3,84
81101410:	18802336 	bltu	r3,r2,811014a0 <_malloc_r+0x7b0>
81101414:	3804d33a 	srli	r2,r7,12
81101418:	11401bc4 	addi	r5,r2,111
8110141c:	10c01b84 	addi	r3,r2,110
81101420:	294b883a 	add	r5,r5,r5
81101424:	003f7b06 	br	81101214 <__reset+0xfb0e1214>
81101428:	9c000217 	ldw	r16,8(r19)
8110142c:	00bfff04 	movi	r2,-4
81101430:	80c00117 	ldw	r3,4(r16)
81101434:	1886703a 	and	r3,r3,r2
81101438:	003f5306 	br	81101188 <__reset+0xfb0e1188>
8110143c:	3083ffcc 	andi	r2,r6,4095
81101440:	103f181e 	bne	r2,zero,811010a4 <__reset+0xfb0e10a4>
81101444:	99000217 	ldw	r4,8(r19)
81101448:	b545883a 	add	r2,r22,r21
8110144c:	10800054 	ori	r2,r2,1
81101450:	20800115 	stw	r2,4(r4)
81101454:	003f3e06 	br	81101150 <__reset+0xfb0e1150>
81101458:	01003f84 	movi	r4,254
8110145c:	02001fc4 	movi	r8,127
81101460:	01c01f84 	movi	r7,126
81101464:	003e4006 	br	81100d68 <__reset+0xfb0e0d68>
81101468:	00a044b4 	movhi	r2,33042
8110146c:	109b9d04 	addi	r2,r2,28276
81101470:	15000015 	stw	r20,0(r2)
81101474:	003f1106 	br	811010bc <__reset+0xfb0e10bc>
81101478:	00800044 	movi	r2,1
8110147c:	002b883a 	mov	r21,zero
81101480:	003f1f06 	br	81101100 <__reset+0xfb0e1100>
81101484:	81400204 	addi	r5,r16,8
81101488:	9009883a 	mov	r4,r18
8110148c:	1107cac0 	call	81107cac <_free_r>
81101490:	00a044b4 	movhi	r2,33042
81101494:	109bf904 	addi	r2,r2,28644
81101498:	10c00017 	ldw	r3,0(r2)
8110149c:	003f2c06 	br	81101150 <__reset+0xfb0e1150>
811014a0:	00c05504 	movi	r3,340
811014a4:	18800536 	bltu	r3,r2,811014bc <_malloc_r+0x7cc>
811014a8:	3804d3fa 	srli	r2,r7,15
811014ac:	11401e04 	addi	r5,r2,120
811014b0:	10c01dc4 	addi	r3,r2,119
811014b4:	294b883a 	add	r5,r5,r5
811014b8:	003f5606 	br	81101214 <__reset+0xfb0e1214>
811014bc:	00c15504 	movi	r3,1364
811014c0:	18800536 	bltu	r3,r2,811014d8 <_malloc_r+0x7e8>
811014c4:	3804d4ba 	srli	r2,r7,18
811014c8:	11401f44 	addi	r5,r2,125
811014cc:	10c01f04 	addi	r3,r2,124
811014d0:	294b883a 	add	r5,r5,r5
811014d4:	003f4f06 	br	81101214 <__reset+0xfb0e1214>
811014d8:	01403f84 	movi	r5,254
811014dc:	00c01f84 	movi	r3,126
811014e0:	003f4c06 	br	81101214 <__reset+0xfb0e1214>
811014e4:	98800117 	ldw	r2,4(r19)
811014e8:	003fa006 	br	8110136c <__reset+0xfb0e136c>
811014ec:	8808d0fa 	srli	r4,r17,3
811014f0:	20800044 	addi	r2,r4,1
811014f4:	1085883a 	add	r2,r2,r2
811014f8:	003e9006 	br	81100f3c <__reset+0xfb0e0f3c>

811014fc <memset>:
811014fc:	20c000cc 	andi	r3,r4,3
81101500:	2005883a 	mov	r2,r4
81101504:	18004426 	beq	r3,zero,81101618 <memset+0x11c>
81101508:	31ffffc4 	addi	r7,r6,-1
8110150c:	30004026 	beq	r6,zero,81101610 <memset+0x114>
81101510:	2813883a 	mov	r9,r5
81101514:	200d883a 	mov	r6,r4
81101518:	2007883a 	mov	r3,r4
8110151c:	00000406 	br	81101530 <memset+0x34>
81101520:	3a3fffc4 	addi	r8,r7,-1
81101524:	31800044 	addi	r6,r6,1
81101528:	38003926 	beq	r7,zero,81101610 <memset+0x114>
8110152c:	400f883a 	mov	r7,r8
81101530:	18c00044 	addi	r3,r3,1
81101534:	32400005 	stb	r9,0(r6)
81101538:	1a0000cc 	andi	r8,r3,3
8110153c:	403ff81e 	bne	r8,zero,81101520 <__reset+0xfb0e1520>
81101540:	010000c4 	movi	r4,3
81101544:	21c02d2e 	bgeu	r4,r7,811015fc <memset+0x100>
81101548:	29003fcc 	andi	r4,r5,255
8110154c:	200c923a 	slli	r6,r4,8
81101550:	3108b03a 	or	r4,r6,r4
81101554:	200c943a 	slli	r6,r4,16
81101558:	218cb03a 	or	r6,r4,r6
8110155c:	010003c4 	movi	r4,15
81101560:	21c0182e 	bgeu	r4,r7,811015c4 <memset+0xc8>
81101564:	3b3ffc04 	addi	r12,r7,-16
81101568:	6018d13a 	srli	r12,r12,4
8110156c:	1a000104 	addi	r8,r3,4
81101570:	1ac00204 	addi	r11,r3,8
81101574:	6008913a 	slli	r4,r12,4
81101578:	1a800304 	addi	r10,r3,12
8110157c:	1813883a 	mov	r9,r3
81101580:	21000504 	addi	r4,r4,20
81101584:	1909883a 	add	r4,r3,r4
81101588:	49800015 	stw	r6,0(r9)
8110158c:	41800015 	stw	r6,0(r8)
81101590:	59800015 	stw	r6,0(r11)
81101594:	51800015 	stw	r6,0(r10)
81101598:	42000404 	addi	r8,r8,16
8110159c:	4a400404 	addi	r9,r9,16
811015a0:	5ac00404 	addi	r11,r11,16
811015a4:	52800404 	addi	r10,r10,16
811015a8:	413ff71e 	bne	r8,r4,81101588 <__reset+0xfb0e1588>
811015ac:	63000044 	addi	r12,r12,1
811015b0:	6018913a 	slli	r12,r12,4
811015b4:	39c003cc 	andi	r7,r7,15
811015b8:	010000c4 	movi	r4,3
811015bc:	1b07883a 	add	r3,r3,r12
811015c0:	21c00e2e 	bgeu	r4,r7,811015fc <memset+0x100>
811015c4:	1813883a 	mov	r9,r3
811015c8:	3811883a 	mov	r8,r7
811015cc:	010000c4 	movi	r4,3
811015d0:	49800015 	stw	r6,0(r9)
811015d4:	423fff04 	addi	r8,r8,-4
811015d8:	4a400104 	addi	r9,r9,4
811015dc:	223ffc36 	bltu	r4,r8,811015d0 <__reset+0xfb0e15d0>
811015e0:	393fff04 	addi	r4,r7,-4
811015e4:	2008d0ba 	srli	r4,r4,2
811015e8:	39c000cc 	andi	r7,r7,3
811015ec:	21000044 	addi	r4,r4,1
811015f0:	2109883a 	add	r4,r4,r4
811015f4:	2109883a 	add	r4,r4,r4
811015f8:	1907883a 	add	r3,r3,r4
811015fc:	38000526 	beq	r7,zero,81101614 <memset+0x118>
81101600:	19cf883a 	add	r7,r3,r7
81101604:	19400005 	stb	r5,0(r3)
81101608:	18c00044 	addi	r3,r3,1
8110160c:	38fffd1e 	bne	r7,r3,81101604 <__reset+0xfb0e1604>
81101610:	f800283a 	ret
81101614:	f800283a 	ret
81101618:	2007883a 	mov	r3,r4
8110161c:	300f883a 	mov	r7,r6
81101620:	003fc706 	br	81101540 <__reset+0xfb0e1540>

81101624 <_open_r>:
81101624:	defffd04 	addi	sp,sp,-12
81101628:	2805883a 	mov	r2,r5
8110162c:	dc000015 	stw	r16,0(sp)
81101630:	042044b4 	movhi	r16,33042
81101634:	dc400115 	stw	r17,4(sp)
81101638:	300b883a 	mov	r5,r6
8110163c:	841bd104 	addi	r16,r16,28484
81101640:	2023883a 	mov	r17,r4
81101644:	380d883a 	mov	r6,r7
81101648:	1009883a 	mov	r4,r2
8110164c:	dfc00215 	stw	ra,8(sp)
81101650:	80000015 	stw	zero,0(r16)
81101654:	11166cc0 	call	811166cc <open>
81101658:	00ffffc4 	movi	r3,-1
8110165c:	10c00526 	beq	r2,r3,81101674 <_open_r+0x50>
81101660:	dfc00217 	ldw	ra,8(sp)
81101664:	dc400117 	ldw	r17,4(sp)
81101668:	dc000017 	ldw	r16,0(sp)
8110166c:	dec00304 	addi	sp,sp,12
81101670:	f800283a 	ret
81101674:	80c00017 	ldw	r3,0(r16)
81101678:	183ff926 	beq	r3,zero,81101660 <__reset+0xfb0e1660>
8110167c:	88c00015 	stw	r3,0(r17)
81101680:	003ff706 	br	81101660 <__reset+0xfb0e1660>

81101684 <_printf_r>:
81101684:	defffd04 	addi	sp,sp,-12
81101688:	2805883a 	mov	r2,r5
8110168c:	dfc00015 	stw	ra,0(sp)
81101690:	d9800115 	stw	r6,4(sp)
81101694:	d9c00215 	stw	r7,8(sp)
81101698:	21400217 	ldw	r5,8(r4)
8110169c:	d9c00104 	addi	r7,sp,4
811016a0:	100d883a 	mov	r6,r2
811016a4:	1101c480 	call	81101c48 <___vfprintf_internal_r>
811016a8:	dfc00017 	ldw	ra,0(sp)
811016ac:	dec00304 	addi	sp,sp,12
811016b0:	f800283a 	ret

811016b4 <printf>:
811016b4:	defffc04 	addi	sp,sp,-16
811016b8:	dfc00015 	stw	ra,0(sp)
811016bc:	d9400115 	stw	r5,4(sp)
811016c0:	d9800215 	stw	r6,8(sp)
811016c4:	d9c00315 	stw	r7,12(sp)
811016c8:	00a044b4 	movhi	r2,33042
811016cc:	109b9c04 	addi	r2,r2,28272
811016d0:	10800017 	ldw	r2,0(r2)
811016d4:	200b883a 	mov	r5,r4
811016d8:	d9800104 	addi	r6,sp,4
811016dc:	11000217 	ldw	r4,8(r2)
811016e0:	1103e400 	call	81103e40 <__vfprintf_internal>
811016e4:	dfc00017 	ldw	ra,0(sp)
811016e8:	dec00404 	addi	sp,sp,16
811016ec:	f800283a 	ret

811016f0 <_puts_r>:
811016f0:	defff604 	addi	sp,sp,-40
811016f4:	dc000715 	stw	r16,28(sp)
811016f8:	2021883a 	mov	r16,r4
811016fc:	2809883a 	mov	r4,r5
81101700:	dc400815 	stw	r17,32(sp)
81101704:	dfc00915 	stw	ra,36(sp)
81101708:	2823883a 	mov	r17,r5
8110170c:	1101bb00 	call	81101bb0 <strlen>
81101710:	10c00044 	addi	r3,r2,1
81101714:	d8800115 	stw	r2,4(sp)
81101718:	00a044b4 	movhi	r2,33042
8110171c:	1091c104 	addi	r2,r2,18180
81101720:	d8800215 	stw	r2,8(sp)
81101724:	00800044 	movi	r2,1
81101728:	d8800315 	stw	r2,12(sp)
8110172c:	00800084 	movi	r2,2
81101730:	dc400015 	stw	r17,0(sp)
81101734:	d8c00615 	stw	r3,24(sp)
81101738:	dec00415 	stw	sp,16(sp)
8110173c:	d8800515 	stw	r2,20(sp)
81101740:	80000226 	beq	r16,zero,8110174c <_puts_r+0x5c>
81101744:	80800e17 	ldw	r2,56(r16)
81101748:	10001426 	beq	r2,zero,8110179c <_puts_r+0xac>
8110174c:	81400217 	ldw	r5,8(r16)
81101750:	2880030b 	ldhu	r2,12(r5)
81101754:	10c8000c 	andi	r3,r2,8192
81101758:	1800061e 	bne	r3,zero,81101774 <_puts_r+0x84>
8110175c:	29001917 	ldw	r4,100(r5)
81101760:	00f7ffc4 	movi	r3,-8193
81101764:	10880014 	ori	r2,r2,8192
81101768:	20c6703a 	and	r3,r4,r3
8110176c:	2880030d 	sth	r2,12(r5)
81101770:	28c01915 	stw	r3,100(r5)
81101774:	d9800404 	addi	r6,sp,16
81101778:	8009883a 	mov	r4,r16
8110177c:	1107fbc0 	call	81107fbc <__sfvwrite_r>
81101780:	1000091e 	bne	r2,zero,811017a8 <_puts_r+0xb8>
81101784:	00800284 	movi	r2,10
81101788:	dfc00917 	ldw	ra,36(sp)
8110178c:	dc400817 	ldw	r17,32(sp)
81101790:	dc000717 	ldw	r16,28(sp)
81101794:	dec00a04 	addi	sp,sp,40
81101798:	f800283a 	ret
8110179c:	8009883a 	mov	r4,r16
811017a0:	110782c0 	call	8110782c <__sinit>
811017a4:	003fe906 	br	8110174c <__reset+0xfb0e174c>
811017a8:	00bfffc4 	movi	r2,-1
811017ac:	003ff606 	br	81101788 <__reset+0xfb0e1788>

811017b0 <puts>:
811017b0:	00a044b4 	movhi	r2,33042
811017b4:	109b9c04 	addi	r2,r2,28272
811017b8:	200b883a 	mov	r5,r4
811017bc:	11000017 	ldw	r4,0(r2)
811017c0:	11016f01 	jmpi	811016f0 <_puts_r>

811017c4 <lflush>:
811017c4:	2080030b 	ldhu	r2,12(r4)
811017c8:	00c00244 	movi	r3,9
811017cc:	1080024c 	andi	r2,r2,9
811017d0:	10c00226 	beq	r2,r3,811017dc <lflush+0x18>
811017d4:	0005883a 	mov	r2,zero
811017d8:	f800283a 	ret
811017dc:	11074ac1 	jmpi	811074ac <fflush>

811017e0 <__srefill_r>:
811017e0:	defffc04 	addi	sp,sp,-16
811017e4:	dc400115 	stw	r17,4(sp)
811017e8:	dc000015 	stw	r16,0(sp)
811017ec:	dfc00315 	stw	ra,12(sp)
811017f0:	dc800215 	stw	r18,8(sp)
811017f4:	2023883a 	mov	r17,r4
811017f8:	2821883a 	mov	r16,r5
811017fc:	20000226 	beq	r4,zero,81101808 <__srefill_r+0x28>
81101800:	20800e17 	ldw	r2,56(r4)
81101804:	10003c26 	beq	r2,zero,811018f8 <__srefill_r+0x118>
81101808:	80c0030b 	ldhu	r3,12(r16)
8110180c:	1908000c 	andi	r4,r3,8192
81101810:	1805883a 	mov	r2,r3
81101814:	2000071e 	bne	r4,zero,81101834 <__srefill_r+0x54>
81101818:	81001917 	ldw	r4,100(r16)
8110181c:	18880014 	ori	r2,r3,8192
81101820:	00f7ffc4 	movi	r3,-8193
81101824:	20c8703a 	and	r4,r4,r3
81101828:	8080030d 	sth	r2,12(r16)
8110182c:	1007883a 	mov	r3,r2
81101830:	81001915 	stw	r4,100(r16)
81101834:	80000115 	stw	zero,4(r16)
81101838:	1100080c 	andi	r4,r2,32
8110183c:	2000571e 	bne	r4,zero,8110199c <__srefill_r+0x1bc>
81101840:	1100010c 	andi	r4,r2,4
81101844:	20001f26 	beq	r4,zero,811018c4 <__srefill_r+0xe4>
81101848:	81400c17 	ldw	r5,48(r16)
8110184c:	28000826 	beq	r5,zero,81101870 <__srefill_r+0x90>
81101850:	80801004 	addi	r2,r16,64
81101854:	28800226 	beq	r5,r2,81101860 <__srefill_r+0x80>
81101858:	8809883a 	mov	r4,r17
8110185c:	1107cac0 	call	81107cac <_free_r>
81101860:	80800f17 	ldw	r2,60(r16)
81101864:	80000c15 	stw	zero,48(r16)
81101868:	80800115 	stw	r2,4(r16)
8110186c:	1000391e 	bne	r2,zero,81101954 <__srefill_r+0x174>
81101870:	80800417 	ldw	r2,16(r16)
81101874:	10004b26 	beq	r2,zero,811019a4 <__srefill_r+0x1c4>
81101878:	8480030b 	ldhu	r18,12(r16)
8110187c:	908000cc 	andi	r2,r18,3
81101880:	10001f1e 	bne	r2,zero,81101900 <__srefill_r+0x120>
81101884:	81800417 	ldw	r6,16(r16)
81101888:	80800817 	ldw	r2,32(r16)
8110188c:	81c00517 	ldw	r7,20(r16)
81101890:	81400717 	ldw	r5,28(r16)
81101894:	81800015 	stw	r6,0(r16)
81101898:	8809883a 	mov	r4,r17
8110189c:	103ee83a 	callr	r2
811018a0:	80800115 	stw	r2,4(r16)
811018a4:	00800e0e 	bge	zero,r2,811018e0 <__srefill_r+0x100>
811018a8:	0005883a 	mov	r2,zero
811018ac:	dfc00317 	ldw	ra,12(sp)
811018b0:	dc800217 	ldw	r18,8(sp)
811018b4:	dc400117 	ldw	r17,4(sp)
811018b8:	dc000017 	ldw	r16,0(sp)
811018bc:	dec00404 	addi	sp,sp,16
811018c0:	f800283a 	ret
811018c4:	1100040c 	andi	r4,r2,16
811018c8:	20003026 	beq	r4,zero,8110198c <__srefill_r+0x1ac>
811018cc:	1080020c 	andi	r2,r2,8
811018d0:	1000241e 	bne	r2,zero,81101964 <__srefill_r+0x184>
811018d4:	18c00114 	ori	r3,r3,4
811018d8:	80c0030d 	sth	r3,12(r16)
811018dc:	003fe406 	br	81101870 <__reset+0xfb0e1870>
811018e0:	80c0030b 	ldhu	r3,12(r16)
811018e4:	1000161e 	bne	r2,zero,81101940 <__srefill_r+0x160>
811018e8:	18c00814 	ori	r3,r3,32
811018ec:	00bfffc4 	movi	r2,-1
811018f0:	80c0030d 	sth	r3,12(r16)
811018f4:	003fed06 	br	811018ac <__reset+0xfb0e18ac>
811018f8:	110782c0 	call	8110782c <__sinit>
811018fc:	003fc206 	br	81101808 <__reset+0xfb0e1808>
81101900:	00a044b4 	movhi	r2,33042
81101904:	109b9b04 	addi	r2,r2,28268
81101908:	11000017 	ldw	r4,0(r2)
8110190c:	01604434 	movhi	r5,33040
81101910:	00800044 	movi	r2,1
81101914:	2945f104 	addi	r5,r5,6084
81101918:	8080030d 	sth	r2,12(r16)
8110191c:	11084780 	call	81108478 <_fwalk>
81101920:	00800244 	movi	r2,9
81101924:	8480030d 	sth	r18,12(r16)
81101928:	9480024c 	andi	r18,r18,9
8110192c:	90bfd51e 	bne	r18,r2,81101884 <__reset+0xfb0e1884>
81101930:	800b883a 	mov	r5,r16
81101934:	8809883a 	mov	r4,r17
81101938:	11072340 	call	81107234 <__sflush_r>
8110193c:	003fd106 	br	81101884 <__reset+0xfb0e1884>
81101940:	18c01014 	ori	r3,r3,64
81101944:	80000115 	stw	zero,4(r16)
81101948:	00bfffc4 	movi	r2,-1
8110194c:	80c0030d 	sth	r3,12(r16)
81101950:	003fd606 	br	811018ac <__reset+0xfb0e18ac>
81101954:	80c00e17 	ldw	r3,56(r16)
81101958:	0005883a 	mov	r2,zero
8110195c:	80c00015 	stw	r3,0(r16)
81101960:	003fd206 	br	811018ac <__reset+0xfb0e18ac>
81101964:	800b883a 	mov	r5,r16
81101968:	8809883a 	mov	r4,r17
8110196c:	11074500 	call	81107450 <_fflush_r>
81101970:	10000a1e 	bne	r2,zero,8110199c <__srefill_r+0x1bc>
81101974:	8080030b 	ldhu	r2,12(r16)
81101978:	00fffdc4 	movi	r3,-9
8110197c:	80000215 	stw	zero,8(r16)
81101980:	1886703a 	and	r3,r3,r2
81101984:	80000615 	stw	zero,24(r16)
81101988:	003fd206 	br	811018d4 <__reset+0xfb0e18d4>
8110198c:	00800244 	movi	r2,9
81101990:	88800015 	stw	r2,0(r17)
81101994:	18c01014 	ori	r3,r3,64
81101998:	80c0030d 	sth	r3,12(r16)
8110199c:	00bfffc4 	movi	r2,-1
811019a0:	003fc206 	br	811018ac <__reset+0xfb0e18ac>
811019a4:	800b883a 	mov	r5,r16
811019a8:	8809883a 	mov	r4,r17
811019ac:	1100b340 	call	81100b34 <__smakebuf_r>
811019b0:	003fb106 	br	81101878 <__reset+0xfb0e1878>

811019b4 <_sbrk_r>:
811019b4:	defffd04 	addi	sp,sp,-12
811019b8:	dc000015 	stw	r16,0(sp)
811019bc:	042044b4 	movhi	r16,33042
811019c0:	dc400115 	stw	r17,4(sp)
811019c4:	841bd104 	addi	r16,r16,28484
811019c8:	2023883a 	mov	r17,r4
811019cc:	2809883a 	mov	r4,r5
811019d0:	dfc00215 	stw	ra,8(sp)
811019d4:	80000015 	stw	zero,0(r16)
811019d8:	11169bc0 	call	811169bc <sbrk>
811019dc:	00ffffc4 	movi	r3,-1
811019e0:	10c00526 	beq	r2,r3,811019f8 <_sbrk_r+0x44>
811019e4:	dfc00217 	ldw	ra,8(sp)
811019e8:	dc400117 	ldw	r17,4(sp)
811019ec:	dc000017 	ldw	r16,0(sp)
811019f0:	dec00304 	addi	sp,sp,12
811019f4:	f800283a 	ret
811019f8:	80c00017 	ldw	r3,0(r16)
811019fc:	183ff926 	beq	r3,zero,811019e4 <__reset+0xfb0e19e4>
81101a00:	88c00015 	stw	r3,0(r17)
81101a04:	003ff706 	br	811019e4 <__reset+0xfb0e19e4>

81101a08 <scanf>:
81101a08:	defffc04 	addi	sp,sp,-16
81101a0c:	dfc00015 	stw	ra,0(sp)
81101a10:	d9400115 	stw	r5,4(sp)
81101a14:	d9800215 	stw	r6,8(sp)
81101a18:	d9c00315 	stw	r7,12(sp)
81101a1c:	00a044b4 	movhi	r2,33042
81101a20:	109b9c04 	addi	r2,r2,28272
81101a24:	200d883a 	mov	r6,r4
81101a28:	11000017 	ldw	r4,0(r2)
81101a2c:	d9c00104 	addi	r7,sp,4
81101a30:	21400117 	ldw	r5,4(r4)
81101a34:	11057580 	call	81105758 <_vfscanf_r>
81101a38:	dfc00017 	ldw	ra,0(sp)
81101a3c:	dec00404 	addi	sp,sp,16
81101a40:	f800283a 	ret

81101a44 <_scanf_r>:
81101a44:	defffd04 	addi	sp,sp,-12
81101a48:	2805883a 	mov	r2,r5
81101a4c:	dfc00015 	stw	ra,0(sp)
81101a50:	d9800115 	stw	r6,4(sp)
81101a54:	d9c00215 	stw	r7,8(sp)
81101a58:	21400117 	ldw	r5,4(r4)
81101a5c:	d9c00104 	addi	r7,sp,4
81101a60:	100d883a 	mov	r6,r2
81101a64:	11057580 	call	81105758 <_vfscanf_r>
81101a68:	dfc00017 	ldw	ra,0(sp)
81101a6c:	dec00304 	addi	sp,sp,12
81101a70:	f800283a 	ret

81101a74 <__sread>:
81101a74:	defffe04 	addi	sp,sp,-8
81101a78:	dc000015 	stw	r16,0(sp)
81101a7c:	2821883a 	mov	r16,r5
81101a80:	2940038f 	ldh	r5,14(r5)
81101a84:	dfc00115 	stw	ra,4(sp)
81101a88:	1109d680 	call	81109d68 <_read_r>
81101a8c:	10000716 	blt	r2,zero,81101aac <__sread+0x38>
81101a90:	80c01417 	ldw	r3,80(r16)
81101a94:	1887883a 	add	r3,r3,r2
81101a98:	80c01415 	stw	r3,80(r16)
81101a9c:	dfc00117 	ldw	ra,4(sp)
81101aa0:	dc000017 	ldw	r16,0(sp)
81101aa4:	dec00204 	addi	sp,sp,8
81101aa8:	f800283a 	ret
81101aac:	80c0030b 	ldhu	r3,12(r16)
81101ab0:	18fbffcc 	andi	r3,r3,61439
81101ab4:	80c0030d 	sth	r3,12(r16)
81101ab8:	dfc00117 	ldw	ra,4(sp)
81101abc:	dc000017 	ldw	r16,0(sp)
81101ac0:	dec00204 	addi	sp,sp,8
81101ac4:	f800283a 	ret

81101ac8 <__seofread>:
81101ac8:	0005883a 	mov	r2,zero
81101acc:	f800283a 	ret

81101ad0 <__swrite>:
81101ad0:	2880030b 	ldhu	r2,12(r5)
81101ad4:	defffb04 	addi	sp,sp,-20
81101ad8:	dcc00315 	stw	r19,12(sp)
81101adc:	dc800215 	stw	r18,8(sp)
81101ae0:	dc400115 	stw	r17,4(sp)
81101ae4:	dc000015 	stw	r16,0(sp)
81101ae8:	dfc00415 	stw	ra,16(sp)
81101aec:	10c0400c 	andi	r3,r2,256
81101af0:	2821883a 	mov	r16,r5
81101af4:	2023883a 	mov	r17,r4
81101af8:	3025883a 	mov	r18,r6
81101afc:	3827883a 	mov	r19,r7
81101b00:	18000526 	beq	r3,zero,81101b18 <__swrite+0x48>
81101b04:	2940038f 	ldh	r5,14(r5)
81101b08:	01c00084 	movi	r7,2
81101b0c:	000d883a 	mov	r6,zero
81101b10:	11087600 	call	81108760 <_lseek_r>
81101b14:	8080030b 	ldhu	r2,12(r16)
81101b18:	8140038f 	ldh	r5,14(r16)
81101b1c:	10bbffcc 	andi	r2,r2,61439
81101b20:	980f883a 	mov	r7,r19
81101b24:	900d883a 	mov	r6,r18
81101b28:	8809883a 	mov	r4,r17
81101b2c:	8080030d 	sth	r2,12(r16)
81101b30:	dfc00417 	ldw	ra,16(sp)
81101b34:	dcc00317 	ldw	r19,12(sp)
81101b38:	dc800217 	ldw	r18,8(sp)
81101b3c:	dc400117 	ldw	r17,4(sp)
81101b40:	dc000017 	ldw	r16,0(sp)
81101b44:	dec00504 	addi	sp,sp,20
81101b48:	11057a41 	jmpi	811057a4 <_write_r>

81101b4c <__sseek>:
81101b4c:	defffe04 	addi	sp,sp,-8
81101b50:	dc000015 	stw	r16,0(sp)
81101b54:	2821883a 	mov	r16,r5
81101b58:	2940038f 	ldh	r5,14(r5)
81101b5c:	dfc00115 	stw	ra,4(sp)
81101b60:	11087600 	call	81108760 <_lseek_r>
81101b64:	00ffffc4 	movi	r3,-1
81101b68:	10c00826 	beq	r2,r3,81101b8c <__sseek+0x40>
81101b6c:	80c0030b 	ldhu	r3,12(r16)
81101b70:	80801415 	stw	r2,80(r16)
81101b74:	18c40014 	ori	r3,r3,4096
81101b78:	80c0030d 	sth	r3,12(r16)
81101b7c:	dfc00117 	ldw	ra,4(sp)
81101b80:	dc000017 	ldw	r16,0(sp)
81101b84:	dec00204 	addi	sp,sp,8
81101b88:	f800283a 	ret
81101b8c:	80c0030b 	ldhu	r3,12(r16)
81101b90:	18fbffcc 	andi	r3,r3,61439
81101b94:	80c0030d 	sth	r3,12(r16)
81101b98:	dfc00117 	ldw	ra,4(sp)
81101b9c:	dc000017 	ldw	r16,0(sp)
81101ba0:	dec00204 	addi	sp,sp,8
81101ba4:	f800283a 	ret

81101ba8 <__sclose>:
81101ba8:	2940038f 	ldh	r5,14(r5)
81101bac:	11059581 	jmpi	81105958 <_close_r>

81101bb0 <strlen>:
81101bb0:	208000cc 	andi	r2,r4,3
81101bb4:	10002026 	beq	r2,zero,81101c38 <strlen+0x88>
81101bb8:	20800007 	ldb	r2,0(r4)
81101bbc:	10002026 	beq	r2,zero,81101c40 <strlen+0x90>
81101bc0:	2005883a 	mov	r2,r4
81101bc4:	00000206 	br	81101bd0 <strlen+0x20>
81101bc8:	10c00007 	ldb	r3,0(r2)
81101bcc:	18001826 	beq	r3,zero,81101c30 <strlen+0x80>
81101bd0:	10800044 	addi	r2,r2,1
81101bd4:	10c000cc 	andi	r3,r2,3
81101bd8:	183ffb1e 	bne	r3,zero,81101bc8 <__reset+0xfb0e1bc8>
81101bdc:	10c00017 	ldw	r3,0(r2)
81101be0:	01ffbff4 	movhi	r7,65279
81101be4:	39ffbfc4 	addi	r7,r7,-257
81101be8:	00ca303a 	nor	r5,zero,r3
81101bec:	01a02074 	movhi	r6,32897
81101bf0:	19c7883a 	add	r3,r3,r7
81101bf4:	31a02004 	addi	r6,r6,-32640
81101bf8:	1946703a 	and	r3,r3,r5
81101bfc:	1986703a 	and	r3,r3,r6
81101c00:	1800091e 	bne	r3,zero,81101c28 <strlen+0x78>
81101c04:	10800104 	addi	r2,r2,4
81101c08:	10c00017 	ldw	r3,0(r2)
81101c0c:	19cb883a 	add	r5,r3,r7
81101c10:	00c6303a 	nor	r3,zero,r3
81101c14:	28c6703a 	and	r3,r5,r3
81101c18:	1986703a 	and	r3,r3,r6
81101c1c:	183ff926 	beq	r3,zero,81101c04 <__reset+0xfb0e1c04>
81101c20:	00000106 	br	81101c28 <strlen+0x78>
81101c24:	10800044 	addi	r2,r2,1
81101c28:	10c00007 	ldb	r3,0(r2)
81101c2c:	183ffd1e 	bne	r3,zero,81101c24 <__reset+0xfb0e1c24>
81101c30:	1105c83a 	sub	r2,r2,r4
81101c34:	f800283a 	ret
81101c38:	2005883a 	mov	r2,r4
81101c3c:	003fe706 	br	81101bdc <__reset+0xfb0e1bdc>
81101c40:	0005883a 	mov	r2,zero
81101c44:	f800283a 	ret

81101c48 <___vfprintf_internal_r>:
81101c48:	deffb804 	addi	sp,sp,-288
81101c4c:	dfc04715 	stw	ra,284(sp)
81101c50:	ddc04515 	stw	r23,276(sp)
81101c54:	dd404315 	stw	r21,268(sp)
81101c58:	d9002c15 	stw	r4,176(sp)
81101c5c:	282f883a 	mov	r23,r5
81101c60:	302b883a 	mov	r21,r6
81101c64:	d9c02d15 	stw	r7,180(sp)
81101c68:	df004615 	stw	fp,280(sp)
81101c6c:	dd804415 	stw	r22,272(sp)
81101c70:	dd004215 	stw	r20,264(sp)
81101c74:	dcc04115 	stw	r19,260(sp)
81101c78:	dc804015 	stw	r18,256(sp)
81101c7c:	dc403f15 	stw	r17,252(sp)
81101c80:	dc003e15 	stw	r16,248(sp)
81101c84:	11087300 	call	81108730 <_localeconv_r>
81101c88:	10800017 	ldw	r2,0(r2)
81101c8c:	1009883a 	mov	r4,r2
81101c90:	d8803415 	stw	r2,208(sp)
81101c94:	1101bb00 	call	81101bb0 <strlen>
81101c98:	d8803715 	stw	r2,220(sp)
81101c9c:	d8802c17 	ldw	r2,176(sp)
81101ca0:	10000226 	beq	r2,zero,81101cac <___vfprintf_internal_r+0x64>
81101ca4:	10800e17 	ldw	r2,56(r2)
81101ca8:	1000f926 	beq	r2,zero,81102090 <___vfprintf_internal_r+0x448>
81101cac:	b880030b 	ldhu	r2,12(r23)
81101cb0:	10c8000c 	andi	r3,r2,8192
81101cb4:	1800061e 	bne	r3,zero,81101cd0 <___vfprintf_internal_r+0x88>
81101cb8:	b9001917 	ldw	r4,100(r23)
81101cbc:	00f7ffc4 	movi	r3,-8193
81101cc0:	10880014 	ori	r2,r2,8192
81101cc4:	20c6703a 	and	r3,r4,r3
81101cc8:	b880030d 	sth	r2,12(r23)
81101ccc:	b8c01915 	stw	r3,100(r23)
81101cd0:	10c0020c 	andi	r3,r2,8
81101cd4:	1800c126 	beq	r3,zero,81101fdc <___vfprintf_internal_r+0x394>
81101cd8:	b8c00417 	ldw	r3,16(r23)
81101cdc:	1800bf26 	beq	r3,zero,81101fdc <___vfprintf_internal_r+0x394>
81101ce0:	1080068c 	andi	r2,r2,26
81101ce4:	00c00284 	movi	r3,10
81101ce8:	10c0c426 	beq	r2,r3,81101ffc <___vfprintf_internal_r+0x3b4>
81101cec:	d8c00404 	addi	r3,sp,16
81101cf0:	052044b4 	movhi	r20,33042
81101cf4:	d9001e04 	addi	r4,sp,120
81101cf8:	a511d284 	addi	r20,r20,18250
81101cfc:	d8c01e15 	stw	r3,120(sp)
81101d00:	d8002015 	stw	zero,128(sp)
81101d04:	d8001f15 	stw	zero,124(sp)
81101d08:	d8003315 	stw	zero,204(sp)
81101d0c:	d8003615 	stw	zero,216(sp)
81101d10:	d8003815 	stw	zero,224(sp)
81101d14:	1811883a 	mov	r8,r3
81101d18:	d8003915 	stw	zero,228(sp)
81101d1c:	d8003a15 	stw	zero,232(sp)
81101d20:	d8002f15 	stw	zero,188(sp)
81101d24:	d9002815 	stw	r4,160(sp)
81101d28:	a8800007 	ldb	r2,0(r21)
81101d2c:	10027b26 	beq	r2,zero,8110271c <___vfprintf_internal_r+0xad4>
81101d30:	00c00944 	movi	r3,37
81101d34:	a821883a 	mov	r16,r21
81101d38:	10c0021e 	bne	r2,r3,81101d44 <___vfprintf_internal_r+0xfc>
81101d3c:	00001406 	br	81101d90 <___vfprintf_internal_r+0x148>
81101d40:	10c00326 	beq	r2,r3,81101d50 <___vfprintf_internal_r+0x108>
81101d44:	84000044 	addi	r16,r16,1
81101d48:	80800007 	ldb	r2,0(r16)
81101d4c:	103ffc1e 	bne	r2,zero,81101d40 <__reset+0xfb0e1d40>
81101d50:	8563c83a 	sub	r17,r16,r21
81101d54:	88000e26 	beq	r17,zero,81101d90 <___vfprintf_internal_r+0x148>
81101d58:	d8c02017 	ldw	r3,128(sp)
81101d5c:	d8801f17 	ldw	r2,124(sp)
81101d60:	45400015 	stw	r21,0(r8)
81101d64:	1c47883a 	add	r3,r3,r17
81101d68:	10800044 	addi	r2,r2,1
81101d6c:	d8c02015 	stw	r3,128(sp)
81101d70:	44400115 	stw	r17,4(r8)
81101d74:	d8801f15 	stw	r2,124(sp)
81101d78:	00c001c4 	movi	r3,7
81101d7c:	1880a716 	blt	r3,r2,8110201c <___vfprintf_internal_r+0x3d4>
81101d80:	42000204 	addi	r8,r8,8
81101d84:	d9402f17 	ldw	r5,188(sp)
81101d88:	2c4b883a 	add	r5,r5,r17
81101d8c:	d9402f15 	stw	r5,188(sp)
81101d90:	80800007 	ldb	r2,0(r16)
81101d94:	1000a826 	beq	r2,zero,81102038 <___vfprintf_internal_r+0x3f0>
81101d98:	84400047 	ldb	r17,1(r16)
81101d9c:	00bfffc4 	movi	r2,-1
81101da0:	85400044 	addi	r21,r16,1
81101da4:	d8002785 	stb	zero,158(sp)
81101da8:	0007883a 	mov	r3,zero
81101dac:	000f883a 	mov	r7,zero
81101db0:	d8802915 	stw	r2,164(sp)
81101db4:	d8003115 	stw	zero,196(sp)
81101db8:	0025883a 	mov	r18,zero
81101dbc:	01401604 	movi	r5,88
81101dc0:	01800244 	movi	r6,9
81101dc4:	02800a84 	movi	r10,42
81101dc8:	02401b04 	movi	r9,108
81101dcc:	ad400044 	addi	r21,r21,1
81101dd0:	88bff804 	addi	r2,r17,-32
81101dd4:	28830436 	bltu	r5,r2,811029e8 <___vfprintf_internal_r+0xda0>
81101dd8:	100490ba 	slli	r2,r2,2
81101ddc:	01204434 	movhi	r4,33040
81101de0:	21077c04 	addi	r4,r4,7664
81101de4:	1105883a 	add	r2,r2,r4
81101de8:	10800017 	ldw	r2,0(r2)
81101dec:	1000683a 	jmp	r2
81101df0:	81102908 	cmpgei	r4,r16,16548
81101df4:	811029e8 	cmpgeui	r4,r16,16551
81101df8:	811029e8 	cmpgeui	r4,r16,16551
81101dfc:	81102928 	cmpgeui	r4,r16,16548
81101e00:	811029e8 	cmpgeui	r4,r16,16551
81101e04:	811029e8 	cmpgeui	r4,r16,16551
81101e08:	811029e8 	cmpgeui	r4,r16,16551
81101e0c:	811029e8 	cmpgeui	r4,r16,16551
81101e10:	811029e8 	cmpgeui	r4,r16,16551
81101e14:	811029e8 	cmpgeui	r4,r16,16551
81101e18:	8110209c 	xori	r4,r16,16514
81101e1c:	81102844 	addi	r4,r16,16545
81101e20:	811029e8 	cmpgeui	r4,r16,16551
81101e24:	81101f64 	muli	r4,r16,16509
81101e28:	811020c4 	addi	r4,r16,16515
81101e2c:	811029e8 	cmpgeui	r4,r16,16551
81101e30:	81102104 	addi	r4,r16,16516
81101e34:	81102110 	cmplti	r4,r16,16516
81101e38:	81102110 	cmplti	r4,r16,16516
81101e3c:	81102110 	cmplti	r4,r16,16516
81101e40:	81102110 	cmplti	r4,r16,16516
81101e44:	81102110 	cmplti	r4,r16,16516
81101e48:	81102110 	cmplti	r4,r16,16516
81101e4c:	81102110 	cmplti	r4,r16,16516
81101e50:	81102110 	cmplti	r4,r16,16516
81101e54:	81102110 	cmplti	r4,r16,16516
81101e58:	811029e8 	cmpgeui	r4,r16,16551
81101e5c:	811029e8 	cmpgeui	r4,r16,16551
81101e60:	811029e8 	cmpgeui	r4,r16,16551
81101e64:	811029e8 	cmpgeui	r4,r16,16551
81101e68:	811029e8 	cmpgeui	r4,r16,16551
81101e6c:	811029e8 	cmpgeui	r4,r16,16551
81101e70:	811029e8 	cmpgeui	r4,r16,16551
81101e74:	811029e8 	cmpgeui	r4,r16,16551
81101e78:	811029e8 	cmpgeui	r4,r16,16551
81101e7c:	811029e8 	cmpgeui	r4,r16,16551
81101e80:	81102144 	addi	r4,r16,16517
81101e84:	81102200 	call	88110220 <__reset+0x20f0220>
81101e88:	811029e8 	cmpgeui	r4,r16,16551
81101e8c:	81102200 	call	88110220 <__reset+0x20f0220>
81101e90:	811029e8 	cmpgeui	r4,r16,16551
81101e94:	811029e8 	cmpgeui	r4,r16,16551
81101e98:	811029e8 	cmpgeui	r4,r16,16551
81101e9c:	811029e8 	cmpgeui	r4,r16,16551
81101ea0:	811022a0 	cmpeqi	r4,r16,16522
81101ea4:	811029e8 	cmpgeui	r4,r16,16551
81101ea8:	811029e8 	cmpgeui	r4,r16,16551
81101eac:	811022ac 	andhi	r4,r16,16522
81101eb0:	811029e8 	cmpgeui	r4,r16,16551
81101eb4:	811029e8 	cmpgeui	r4,r16,16551
81101eb8:	811029e8 	cmpgeui	r4,r16,16551
81101ebc:	811029e8 	cmpgeui	r4,r16,16551
81101ec0:	811029e8 	cmpgeui	r4,r16,16551
81101ec4:	81102724 	muli	r4,r16,16540
81101ec8:	811029e8 	cmpgeui	r4,r16,16551
81101ecc:	811029e8 	cmpgeui	r4,r16,16551
81101ed0:	81102784 	addi	r4,r16,16542
81101ed4:	811029e8 	cmpgeui	r4,r16,16551
81101ed8:	811029e8 	cmpgeui	r4,r16,16551
81101edc:	811029e8 	cmpgeui	r4,r16,16551
81101ee0:	811029e8 	cmpgeui	r4,r16,16551
81101ee4:	811029e8 	cmpgeui	r4,r16,16551
81101ee8:	811029e8 	cmpgeui	r4,r16,16551
81101eec:	811029e8 	cmpgeui	r4,r16,16551
81101ef0:	811029e8 	cmpgeui	r4,r16,16551
81101ef4:	811029e8 	cmpgeui	r4,r16,16551
81101ef8:	811029e8 	cmpgeui	r4,r16,16551
81101efc:	81102994 	ori	r4,r16,16550
81101f00:	81102934 	orhi	r4,r16,16548
81101f04:	81102200 	call	88110220 <__reset+0x20f0220>
81101f08:	81102200 	call	88110220 <__reset+0x20f0220>
81101f0c:	81102200 	call	88110220 <__reset+0x20f0220>
81101f10:	81102944 	addi	r4,r16,16549
81101f14:	81102934 	orhi	r4,r16,16548
81101f18:	811029e8 	cmpgeui	r4,r16,16551
81101f1c:	811029e8 	cmpgeui	r4,r16,16551
81101f20:	81102950 	cmplti	r4,r16,16549
81101f24:	811029e8 	cmpgeui	r4,r16,16551
81101f28:	81102960 	cmpeqi	r4,r16,16549
81101f2c:	81102834 	orhi	r4,r16,16544
81101f30:	81101f70 	cmpltui	r4,r16,16509
81101f34:	81102854 	ori	r4,r16,16545
81101f38:	811029e8 	cmpgeui	r4,r16,16551
81101f3c:	81102860 	cmpeqi	r4,r16,16545
81101f40:	811029e8 	cmpgeui	r4,r16,16551
81101f44:	811028bc 	xorhi	r4,r16,16546
81101f48:	811029e8 	cmpgeui	r4,r16,16551
81101f4c:	811029e8 	cmpgeui	r4,r16,16551
81101f50:	811028cc 	andi	r4,r16,16547
81101f54:	d9003117 	ldw	r4,196(sp)
81101f58:	d8802d15 	stw	r2,180(sp)
81101f5c:	0109c83a 	sub	r4,zero,r4
81101f60:	d9003115 	stw	r4,196(sp)
81101f64:	94800114 	ori	r18,r18,4
81101f68:	ac400007 	ldb	r17,0(r21)
81101f6c:	003f9706 	br	81101dcc <__reset+0xfb0e1dcc>
81101f70:	00800c04 	movi	r2,48
81101f74:	d9002d17 	ldw	r4,180(sp)
81101f78:	d9402917 	ldw	r5,164(sp)
81101f7c:	d8802705 	stb	r2,156(sp)
81101f80:	00801e04 	movi	r2,120
81101f84:	d8802745 	stb	r2,157(sp)
81101f88:	d8002785 	stb	zero,158(sp)
81101f8c:	20c00104 	addi	r3,r4,4
81101f90:	24c00017 	ldw	r19,0(r4)
81101f94:	002d883a 	mov	r22,zero
81101f98:	90800094 	ori	r2,r18,2
81101f9c:	28029a16 	blt	r5,zero,81102a08 <___vfprintf_internal_r+0xdc0>
81101fa0:	00bfdfc4 	movi	r2,-129
81101fa4:	90a4703a 	and	r18,r18,r2
81101fa8:	d8c02d15 	stw	r3,180(sp)
81101fac:	94800094 	ori	r18,r18,2
81101fb0:	9802871e 	bne	r19,zero,811029d0 <___vfprintf_internal_r+0xd88>
81101fb4:	00a044b4 	movhi	r2,33042
81101fb8:	1091cb04 	addi	r2,r2,18220
81101fbc:	d8803915 	stw	r2,228(sp)
81101fc0:	04401e04 	movi	r17,120
81101fc4:	d8802917 	ldw	r2,164(sp)
81101fc8:	0039883a 	mov	fp,zero
81101fcc:	1001e926 	beq	r2,zero,81102774 <___vfprintf_internal_r+0xb2c>
81101fd0:	0027883a 	mov	r19,zero
81101fd4:	002d883a 	mov	r22,zero
81101fd8:	00020506 	br	811027f0 <___vfprintf_internal_r+0xba8>
81101fdc:	d9002c17 	ldw	r4,176(sp)
81101fe0:	b80b883a 	mov	r5,r23
81101fe4:	11058040 	call	81105804 <__swsetup_r>
81101fe8:	1005ac1e 	bne	r2,zero,8110369c <___vfprintf_internal_r+0x1a54>
81101fec:	b880030b 	ldhu	r2,12(r23)
81101ff0:	00c00284 	movi	r3,10
81101ff4:	1080068c 	andi	r2,r2,26
81101ff8:	10ff3c1e 	bne	r2,r3,81101cec <__reset+0xfb0e1cec>
81101ffc:	b880038f 	ldh	r2,14(r23)
81102000:	103f3a16 	blt	r2,zero,81101cec <__reset+0xfb0e1cec>
81102004:	d9c02d17 	ldw	r7,180(sp)
81102008:	d9002c17 	ldw	r4,176(sp)
8110200c:	a80d883a 	mov	r6,r21
81102010:	b80b883a 	mov	r5,r23
81102014:	1103e5c0 	call	81103e5c <__sbprintf>
81102018:	00001106 	br	81102060 <___vfprintf_internal_r+0x418>
8110201c:	d9002c17 	ldw	r4,176(sp)
81102020:	d9801e04 	addi	r6,sp,120
81102024:	b80b883a 	mov	r5,r23
81102028:	110ed540 	call	8110ed54 <__sprint_r>
8110202c:	1000081e 	bne	r2,zero,81102050 <___vfprintf_internal_r+0x408>
81102030:	da000404 	addi	r8,sp,16
81102034:	003f5306 	br	81101d84 <__reset+0xfb0e1d84>
81102038:	d8802017 	ldw	r2,128(sp)
8110203c:	10000426 	beq	r2,zero,81102050 <___vfprintf_internal_r+0x408>
81102040:	d9002c17 	ldw	r4,176(sp)
81102044:	d9801e04 	addi	r6,sp,120
81102048:	b80b883a 	mov	r5,r23
8110204c:	110ed540 	call	8110ed54 <__sprint_r>
81102050:	b880030b 	ldhu	r2,12(r23)
81102054:	1080100c 	andi	r2,r2,64
81102058:	1005901e 	bne	r2,zero,8110369c <___vfprintf_internal_r+0x1a54>
8110205c:	d8802f17 	ldw	r2,188(sp)
81102060:	dfc04717 	ldw	ra,284(sp)
81102064:	df004617 	ldw	fp,280(sp)
81102068:	ddc04517 	ldw	r23,276(sp)
8110206c:	dd804417 	ldw	r22,272(sp)
81102070:	dd404317 	ldw	r21,268(sp)
81102074:	dd004217 	ldw	r20,264(sp)
81102078:	dcc04117 	ldw	r19,260(sp)
8110207c:	dc804017 	ldw	r18,256(sp)
81102080:	dc403f17 	ldw	r17,252(sp)
81102084:	dc003e17 	ldw	r16,248(sp)
81102088:	dec04804 	addi	sp,sp,288
8110208c:	f800283a 	ret
81102090:	d9002c17 	ldw	r4,176(sp)
81102094:	110782c0 	call	8110782c <__sinit>
81102098:	003f0406 	br	81101cac <__reset+0xfb0e1cac>
8110209c:	d8802d17 	ldw	r2,180(sp)
811020a0:	d9002d17 	ldw	r4,180(sp)
811020a4:	10800017 	ldw	r2,0(r2)
811020a8:	d8803115 	stw	r2,196(sp)
811020ac:	20800104 	addi	r2,r4,4
811020b0:	d9003117 	ldw	r4,196(sp)
811020b4:	203fa716 	blt	r4,zero,81101f54 <__reset+0xfb0e1f54>
811020b8:	d8802d15 	stw	r2,180(sp)
811020bc:	ac400007 	ldb	r17,0(r21)
811020c0:	003f4206 	br	81101dcc <__reset+0xfb0e1dcc>
811020c4:	ac400007 	ldb	r17,0(r21)
811020c8:	aac00044 	addi	r11,r21,1
811020cc:	8a872826 	beq	r17,r10,81103d70 <___vfprintf_internal_r+0x2128>
811020d0:	88bff404 	addi	r2,r17,-48
811020d4:	0009883a 	mov	r4,zero
811020d8:	30867d36 	bltu	r6,r2,81103ad0 <___vfprintf_internal_r+0x1e88>
811020dc:	5c400007 	ldb	r17,0(r11)
811020e0:	210002a4 	muli	r4,r4,10
811020e4:	5d400044 	addi	r21,r11,1
811020e8:	a817883a 	mov	r11,r21
811020ec:	2089883a 	add	r4,r4,r2
811020f0:	88bff404 	addi	r2,r17,-48
811020f4:	30bff92e 	bgeu	r6,r2,811020dc <__reset+0xfb0e20dc>
811020f8:	2005c916 	blt	r4,zero,81103820 <___vfprintf_internal_r+0x1bd8>
811020fc:	d9002915 	stw	r4,164(sp)
81102100:	003f3306 	br	81101dd0 <__reset+0xfb0e1dd0>
81102104:	94802014 	ori	r18,r18,128
81102108:	ac400007 	ldb	r17,0(r21)
8110210c:	003f2f06 	br	81101dcc <__reset+0xfb0e1dcc>
81102110:	a809883a 	mov	r4,r21
81102114:	d8003115 	stw	zero,196(sp)
81102118:	88bff404 	addi	r2,r17,-48
8110211c:	0017883a 	mov	r11,zero
81102120:	24400007 	ldb	r17,0(r4)
81102124:	5ac002a4 	muli	r11,r11,10
81102128:	ad400044 	addi	r21,r21,1
8110212c:	a809883a 	mov	r4,r21
81102130:	12d7883a 	add	r11,r2,r11
81102134:	88bff404 	addi	r2,r17,-48
81102138:	30bff92e 	bgeu	r6,r2,81102120 <__reset+0xfb0e2120>
8110213c:	dac03115 	stw	r11,196(sp)
81102140:	003f2306 	br	81101dd0 <__reset+0xfb0e1dd0>
81102144:	18c03fcc 	andi	r3,r3,255
81102148:	18072b1e 	bne	r3,zero,81103df8 <___vfprintf_internal_r+0x21b0>
8110214c:	94800414 	ori	r18,r18,16
81102150:	9080080c 	andi	r2,r18,32
81102154:	10037b26 	beq	r2,zero,81102f44 <___vfprintf_internal_r+0x12fc>
81102158:	d9402d17 	ldw	r5,180(sp)
8110215c:	28800117 	ldw	r2,4(r5)
81102160:	2cc00017 	ldw	r19,0(r5)
81102164:	29400204 	addi	r5,r5,8
81102168:	d9402d15 	stw	r5,180(sp)
8110216c:	102d883a 	mov	r22,r2
81102170:	10044b16 	blt	r2,zero,811032a0 <___vfprintf_internal_r+0x1658>
81102174:	d9402917 	ldw	r5,164(sp)
81102178:	df002783 	ldbu	fp,158(sp)
8110217c:	2803bc16 	blt	r5,zero,81103070 <___vfprintf_internal_r+0x1428>
81102180:	00ffdfc4 	movi	r3,-129
81102184:	9d84b03a 	or	r2,r19,r22
81102188:	90e4703a 	and	r18,r18,r3
8110218c:	10017726 	beq	r2,zero,8110276c <___vfprintf_internal_r+0xb24>
81102190:	b0038326 	beq	r22,zero,81102fa0 <___vfprintf_internal_r+0x1358>
81102194:	dc402a15 	stw	r17,168(sp)
81102198:	dc001e04 	addi	r16,sp,120
8110219c:	b023883a 	mov	r17,r22
811021a0:	402d883a 	mov	r22,r8
811021a4:	9809883a 	mov	r4,r19
811021a8:	880b883a 	mov	r5,r17
811021ac:	01800284 	movi	r6,10
811021b0:	000f883a 	mov	r7,zero
811021b4:	11130040 	call	81113004 <__umoddi3>
811021b8:	10800c04 	addi	r2,r2,48
811021bc:	843fffc4 	addi	r16,r16,-1
811021c0:	9809883a 	mov	r4,r19
811021c4:	880b883a 	mov	r5,r17
811021c8:	80800005 	stb	r2,0(r16)
811021cc:	01800284 	movi	r6,10
811021d0:	000f883a 	mov	r7,zero
811021d4:	1112a8c0 	call	81112a8c <__udivdi3>
811021d8:	1027883a 	mov	r19,r2
811021dc:	10c4b03a 	or	r2,r2,r3
811021e0:	1823883a 	mov	r17,r3
811021e4:	103fef1e 	bne	r2,zero,811021a4 <__reset+0xfb0e21a4>
811021e8:	d8c02817 	ldw	r3,160(sp)
811021ec:	dc402a17 	ldw	r17,168(sp)
811021f0:	b011883a 	mov	r8,r22
811021f4:	1c07c83a 	sub	r3,r3,r16
811021f8:	d8c02e15 	stw	r3,184(sp)
811021fc:	00005906 	br	81102364 <___vfprintf_internal_r+0x71c>
81102200:	18c03fcc 	andi	r3,r3,255
81102204:	1806fa1e 	bne	r3,zero,81103df0 <___vfprintf_internal_r+0x21a8>
81102208:	9080020c 	andi	r2,r18,8
8110220c:	10048a26 	beq	r2,zero,81103438 <___vfprintf_internal_r+0x17f0>
81102210:	d8c02d17 	ldw	r3,180(sp)
81102214:	d9002d17 	ldw	r4,180(sp)
81102218:	d9402d17 	ldw	r5,180(sp)
8110221c:	18c00017 	ldw	r3,0(r3)
81102220:	21000117 	ldw	r4,4(r4)
81102224:	29400204 	addi	r5,r5,8
81102228:	d8c03615 	stw	r3,216(sp)
8110222c:	d9003815 	stw	r4,224(sp)
81102230:	d9402d15 	stw	r5,180(sp)
81102234:	d9003617 	ldw	r4,216(sp)
81102238:	d9403817 	ldw	r5,224(sp)
8110223c:	da003d15 	stw	r8,244(sp)
81102240:	04000044 	movi	r16,1
81102244:	110a32c0 	call	8110a32c <__fpclassifyd>
81102248:	da003d17 	ldw	r8,244(sp)
8110224c:	14041f1e 	bne	r2,r16,811032cc <___vfprintf_internal_r+0x1684>
81102250:	d9003617 	ldw	r4,216(sp)
81102254:	d9403817 	ldw	r5,224(sp)
81102258:	000d883a 	mov	r6,zero
8110225c:	000f883a 	mov	r7,zero
81102260:	1114be40 	call	81114be4 <__ledf2>
81102264:	da003d17 	ldw	r8,244(sp)
81102268:	1005be16 	blt	r2,zero,81103964 <___vfprintf_internal_r+0x1d1c>
8110226c:	df002783 	ldbu	fp,158(sp)
81102270:	008011c4 	movi	r2,71
81102274:	1445330e 	bge	r2,r17,81103744 <___vfprintf_internal_r+0x1afc>
81102278:	042044b4 	movhi	r16,33042
8110227c:	8411c304 	addi	r16,r16,18188
81102280:	00c000c4 	movi	r3,3
81102284:	00bfdfc4 	movi	r2,-129
81102288:	d8c02a15 	stw	r3,168(sp)
8110228c:	90a4703a 	and	r18,r18,r2
81102290:	d8c02e15 	stw	r3,184(sp)
81102294:	d8002915 	stw	zero,164(sp)
81102298:	d8003215 	stw	zero,200(sp)
8110229c:	00003706 	br	8110237c <___vfprintf_internal_r+0x734>
811022a0:	94800214 	ori	r18,r18,8
811022a4:	ac400007 	ldb	r17,0(r21)
811022a8:	003ec806 	br	81101dcc <__reset+0xfb0e1dcc>
811022ac:	18c03fcc 	andi	r3,r3,255
811022b0:	1806db1e 	bne	r3,zero,81103e20 <___vfprintf_internal_r+0x21d8>
811022b4:	94800414 	ori	r18,r18,16
811022b8:	9080080c 	andi	r2,r18,32
811022bc:	1002d826 	beq	r2,zero,81102e20 <___vfprintf_internal_r+0x11d8>
811022c0:	d9402d17 	ldw	r5,180(sp)
811022c4:	d8c02917 	ldw	r3,164(sp)
811022c8:	d8002785 	stb	zero,158(sp)
811022cc:	28800204 	addi	r2,r5,8
811022d0:	2cc00017 	ldw	r19,0(r5)
811022d4:	2d800117 	ldw	r22,4(r5)
811022d8:	18048f16 	blt	r3,zero,81103518 <___vfprintf_internal_r+0x18d0>
811022dc:	013fdfc4 	movi	r4,-129
811022e0:	9d86b03a 	or	r3,r19,r22
811022e4:	d8802d15 	stw	r2,180(sp)
811022e8:	9124703a 	and	r18,r18,r4
811022ec:	1802d91e 	bne	r3,zero,81102e54 <___vfprintf_internal_r+0x120c>
811022f0:	d8c02917 	ldw	r3,164(sp)
811022f4:	0039883a 	mov	fp,zero
811022f8:	1805c326 	beq	r3,zero,81103a08 <___vfprintf_internal_r+0x1dc0>
811022fc:	0027883a 	mov	r19,zero
81102300:	002d883a 	mov	r22,zero
81102304:	dc001e04 	addi	r16,sp,120
81102308:	9806d0fa 	srli	r3,r19,3
8110230c:	b008977a 	slli	r4,r22,29
81102310:	b02cd0fa 	srli	r22,r22,3
81102314:	9cc001cc 	andi	r19,r19,7
81102318:	98800c04 	addi	r2,r19,48
8110231c:	843fffc4 	addi	r16,r16,-1
81102320:	20e6b03a 	or	r19,r4,r3
81102324:	80800005 	stb	r2,0(r16)
81102328:	9d86b03a 	or	r3,r19,r22
8110232c:	183ff61e 	bne	r3,zero,81102308 <__reset+0xfb0e2308>
81102330:	90c0004c 	andi	r3,r18,1
81102334:	18013b26 	beq	r3,zero,81102824 <___vfprintf_internal_r+0xbdc>
81102338:	10803fcc 	andi	r2,r2,255
8110233c:	1080201c 	xori	r2,r2,128
81102340:	10bfe004 	addi	r2,r2,-128
81102344:	00c00c04 	movi	r3,48
81102348:	10c13626 	beq	r2,r3,81102824 <___vfprintf_internal_r+0xbdc>
8110234c:	80ffffc5 	stb	r3,-1(r16)
81102350:	d8c02817 	ldw	r3,160(sp)
81102354:	80bfffc4 	addi	r2,r16,-1
81102358:	1021883a 	mov	r16,r2
8110235c:	1887c83a 	sub	r3,r3,r2
81102360:	d8c02e15 	stw	r3,184(sp)
81102364:	d8802e17 	ldw	r2,184(sp)
81102368:	d9002917 	ldw	r4,164(sp)
8110236c:	1100010e 	bge	r2,r4,81102374 <___vfprintf_internal_r+0x72c>
81102370:	2005883a 	mov	r2,r4
81102374:	d8802a15 	stw	r2,168(sp)
81102378:	d8003215 	stw	zero,200(sp)
8110237c:	e7003fcc 	andi	fp,fp,255
81102380:	e700201c 	xori	fp,fp,128
81102384:	e73fe004 	addi	fp,fp,-128
81102388:	e0000326 	beq	fp,zero,81102398 <___vfprintf_internal_r+0x750>
8110238c:	d8c02a17 	ldw	r3,168(sp)
81102390:	18c00044 	addi	r3,r3,1
81102394:	d8c02a15 	stw	r3,168(sp)
81102398:	90c0008c 	andi	r3,r18,2
8110239c:	d8c02b15 	stw	r3,172(sp)
811023a0:	18000326 	beq	r3,zero,811023b0 <___vfprintf_internal_r+0x768>
811023a4:	d8c02a17 	ldw	r3,168(sp)
811023a8:	18c00084 	addi	r3,r3,2
811023ac:	d8c02a15 	stw	r3,168(sp)
811023b0:	90c0210c 	andi	r3,r18,132
811023b4:	d8c03015 	stw	r3,192(sp)
811023b8:	1801a31e 	bne	r3,zero,81102a48 <___vfprintf_internal_r+0xe00>
811023bc:	d9003117 	ldw	r4,196(sp)
811023c0:	d8c02a17 	ldw	r3,168(sp)
811023c4:	20e7c83a 	sub	r19,r4,r3
811023c8:	04c19f0e 	bge	zero,r19,81102a48 <___vfprintf_internal_r+0xe00>
811023cc:	02400404 	movi	r9,16
811023d0:	d8c02017 	ldw	r3,128(sp)
811023d4:	d8801f17 	ldw	r2,124(sp)
811023d8:	4cc50d0e 	bge	r9,r19,81103810 <___vfprintf_internal_r+0x1bc8>
811023dc:	016044b4 	movhi	r5,33042
811023e0:	2951d684 	addi	r5,r5,18266
811023e4:	dc403b15 	stw	r17,236(sp)
811023e8:	d9403515 	stw	r5,212(sp)
811023ec:	9823883a 	mov	r17,r19
811023f0:	482d883a 	mov	r22,r9
811023f4:	9027883a 	mov	r19,r18
811023f8:	070001c4 	movi	fp,7
811023fc:	8025883a 	mov	r18,r16
81102400:	dc002c17 	ldw	r16,176(sp)
81102404:	00000306 	br	81102414 <___vfprintf_internal_r+0x7cc>
81102408:	8c7ffc04 	addi	r17,r17,-16
8110240c:	42000204 	addi	r8,r8,8
81102410:	b440130e 	bge	r22,r17,81102460 <___vfprintf_internal_r+0x818>
81102414:	012044b4 	movhi	r4,33042
81102418:	18c00404 	addi	r3,r3,16
8110241c:	10800044 	addi	r2,r2,1
81102420:	2111d684 	addi	r4,r4,18266
81102424:	41000015 	stw	r4,0(r8)
81102428:	45800115 	stw	r22,4(r8)
8110242c:	d8c02015 	stw	r3,128(sp)
81102430:	d8801f15 	stw	r2,124(sp)
81102434:	e0bff40e 	bge	fp,r2,81102408 <__reset+0xfb0e2408>
81102438:	d9801e04 	addi	r6,sp,120
8110243c:	b80b883a 	mov	r5,r23
81102440:	8009883a 	mov	r4,r16
81102444:	110ed540 	call	8110ed54 <__sprint_r>
81102448:	103f011e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
8110244c:	8c7ffc04 	addi	r17,r17,-16
81102450:	d8c02017 	ldw	r3,128(sp)
81102454:	d8801f17 	ldw	r2,124(sp)
81102458:	da000404 	addi	r8,sp,16
8110245c:	b47fed16 	blt	r22,r17,81102414 <__reset+0xfb0e2414>
81102460:	9021883a 	mov	r16,r18
81102464:	9825883a 	mov	r18,r19
81102468:	8827883a 	mov	r19,r17
8110246c:	dc403b17 	ldw	r17,236(sp)
81102470:	d9403517 	ldw	r5,212(sp)
81102474:	98c7883a 	add	r3,r19,r3
81102478:	10800044 	addi	r2,r2,1
8110247c:	41400015 	stw	r5,0(r8)
81102480:	44c00115 	stw	r19,4(r8)
81102484:	d8c02015 	stw	r3,128(sp)
81102488:	d8801f15 	stw	r2,124(sp)
8110248c:	010001c4 	movi	r4,7
81102490:	2082a316 	blt	r4,r2,81102f20 <___vfprintf_internal_r+0x12d8>
81102494:	df002787 	ldb	fp,158(sp)
81102498:	42000204 	addi	r8,r8,8
8110249c:	e0000c26 	beq	fp,zero,811024d0 <___vfprintf_internal_r+0x888>
811024a0:	d8801f17 	ldw	r2,124(sp)
811024a4:	d9002784 	addi	r4,sp,158
811024a8:	18c00044 	addi	r3,r3,1
811024ac:	10800044 	addi	r2,r2,1
811024b0:	41000015 	stw	r4,0(r8)
811024b4:	01000044 	movi	r4,1
811024b8:	41000115 	stw	r4,4(r8)
811024bc:	d8c02015 	stw	r3,128(sp)
811024c0:	d8801f15 	stw	r2,124(sp)
811024c4:	010001c4 	movi	r4,7
811024c8:	20823c16 	blt	r4,r2,81102dbc <___vfprintf_internal_r+0x1174>
811024cc:	42000204 	addi	r8,r8,8
811024d0:	d8802b17 	ldw	r2,172(sp)
811024d4:	10000c26 	beq	r2,zero,81102508 <___vfprintf_internal_r+0x8c0>
811024d8:	d8801f17 	ldw	r2,124(sp)
811024dc:	d9002704 	addi	r4,sp,156
811024e0:	18c00084 	addi	r3,r3,2
811024e4:	10800044 	addi	r2,r2,1
811024e8:	41000015 	stw	r4,0(r8)
811024ec:	01000084 	movi	r4,2
811024f0:	41000115 	stw	r4,4(r8)
811024f4:	d8c02015 	stw	r3,128(sp)
811024f8:	d8801f15 	stw	r2,124(sp)
811024fc:	010001c4 	movi	r4,7
81102500:	20823616 	blt	r4,r2,81102ddc <___vfprintf_internal_r+0x1194>
81102504:	42000204 	addi	r8,r8,8
81102508:	d9003017 	ldw	r4,192(sp)
8110250c:	00802004 	movi	r2,128
81102510:	20819926 	beq	r4,r2,81102b78 <___vfprintf_internal_r+0xf30>
81102514:	d9402917 	ldw	r5,164(sp)
81102518:	d8802e17 	ldw	r2,184(sp)
8110251c:	28adc83a 	sub	r22,r5,r2
81102520:	0580310e 	bge	zero,r22,811025e8 <___vfprintf_internal_r+0x9a0>
81102524:	07000404 	movi	fp,16
81102528:	d8801f17 	ldw	r2,124(sp)
8110252c:	e584140e 	bge	fp,r22,81103580 <___vfprintf_internal_r+0x1938>
81102530:	016044b4 	movhi	r5,33042
81102534:	2951d284 	addi	r5,r5,18250
81102538:	dc402915 	stw	r17,164(sp)
8110253c:	d9402b15 	stw	r5,172(sp)
81102540:	b023883a 	mov	r17,r22
81102544:	04c001c4 	movi	r19,7
81102548:	a82d883a 	mov	r22,r21
8110254c:	902b883a 	mov	r21,r18
81102550:	8025883a 	mov	r18,r16
81102554:	dc002c17 	ldw	r16,176(sp)
81102558:	00000306 	br	81102568 <___vfprintf_internal_r+0x920>
8110255c:	8c7ffc04 	addi	r17,r17,-16
81102560:	42000204 	addi	r8,r8,8
81102564:	e440110e 	bge	fp,r17,811025ac <___vfprintf_internal_r+0x964>
81102568:	18c00404 	addi	r3,r3,16
8110256c:	10800044 	addi	r2,r2,1
81102570:	45000015 	stw	r20,0(r8)
81102574:	47000115 	stw	fp,4(r8)
81102578:	d8c02015 	stw	r3,128(sp)
8110257c:	d8801f15 	stw	r2,124(sp)
81102580:	98bff60e 	bge	r19,r2,8110255c <__reset+0xfb0e255c>
81102584:	d9801e04 	addi	r6,sp,120
81102588:	b80b883a 	mov	r5,r23
8110258c:	8009883a 	mov	r4,r16
81102590:	110ed540 	call	8110ed54 <__sprint_r>
81102594:	103eae1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81102598:	8c7ffc04 	addi	r17,r17,-16
8110259c:	d8c02017 	ldw	r3,128(sp)
811025a0:	d8801f17 	ldw	r2,124(sp)
811025a4:	da000404 	addi	r8,sp,16
811025a8:	e47fef16 	blt	fp,r17,81102568 <__reset+0xfb0e2568>
811025ac:	9021883a 	mov	r16,r18
811025b0:	a825883a 	mov	r18,r21
811025b4:	b02b883a 	mov	r21,r22
811025b8:	882d883a 	mov	r22,r17
811025bc:	dc402917 	ldw	r17,164(sp)
811025c0:	d9002b17 	ldw	r4,172(sp)
811025c4:	1d87883a 	add	r3,r3,r22
811025c8:	10800044 	addi	r2,r2,1
811025cc:	41000015 	stw	r4,0(r8)
811025d0:	45800115 	stw	r22,4(r8)
811025d4:	d8c02015 	stw	r3,128(sp)
811025d8:	d8801f15 	stw	r2,124(sp)
811025dc:	010001c4 	movi	r4,7
811025e0:	2081ee16 	blt	r4,r2,81102d9c <___vfprintf_internal_r+0x1154>
811025e4:	42000204 	addi	r8,r8,8
811025e8:	9080400c 	andi	r2,r18,256
811025ec:	1001181e 	bne	r2,zero,81102a50 <___vfprintf_internal_r+0xe08>
811025f0:	d9402e17 	ldw	r5,184(sp)
811025f4:	d8801f17 	ldw	r2,124(sp)
811025f8:	44000015 	stw	r16,0(r8)
811025fc:	1947883a 	add	r3,r3,r5
81102600:	10800044 	addi	r2,r2,1
81102604:	41400115 	stw	r5,4(r8)
81102608:	d8c02015 	stw	r3,128(sp)
8110260c:	d8801f15 	stw	r2,124(sp)
81102610:	010001c4 	movi	r4,7
81102614:	2081d316 	blt	r4,r2,81102d64 <___vfprintf_internal_r+0x111c>
81102618:	42000204 	addi	r8,r8,8
8110261c:	9480010c 	andi	r18,r18,4
81102620:	90003226 	beq	r18,zero,811026ec <___vfprintf_internal_r+0xaa4>
81102624:	d9403117 	ldw	r5,196(sp)
81102628:	d8802a17 	ldw	r2,168(sp)
8110262c:	28a1c83a 	sub	r16,r5,r2
81102630:	04002e0e 	bge	zero,r16,811026ec <___vfprintf_internal_r+0xaa4>
81102634:	04400404 	movi	r17,16
81102638:	d8801f17 	ldw	r2,124(sp)
8110263c:	8c04a20e 	bge	r17,r16,811038c8 <___vfprintf_internal_r+0x1c80>
81102640:	016044b4 	movhi	r5,33042
81102644:	2951d684 	addi	r5,r5,18266
81102648:	d9403515 	stw	r5,212(sp)
8110264c:	048001c4 	movi	r18,7
81102650:	dcc02c17 	ldw	r19,176(sp)
81102654:	00000306 	br	81102664 <___vfprintf_internal_r+0xa1c>
81102658:	843ffc04 	addi	r16,r16,-16
8110265c:	42000204 	addi	r8,r8,8
81102660:	8c00130e 	bge	r17,r16,811026b0 <___vfprintf_internal_r+0xa68>
81102664:	012044b4 	movhi	r4,33042
81102668:	18c00404 	addi	r3,r3,16
8110266c:	10800044 	addi	r2,r2,1
81102670:	2111d684 	addi	r4,r4,18266
81102674:	41000015 	stw	r4,0(r8)
81102678:	44400115 	stw	r17,4(r8)
8110267c:	d8c02015 	stw	r3,128(sp)
81102680:	d8801f15 	stw	r2,124(sp)
81102684:	90bff40e 	bge	r18,r2,81102658 <__reset+0xfb0e2658>
81102688:	d9801e04 	addi	r6,sp,120
8110268c:	b80b883a 	mov	r5,r23
81102690:	9809883a 	mov	r4,r19
81102694:	110ed540 	call	8110ed54 <__sprint_r>
81102698:	103e6d1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
8110269c:	843ffc04 	addi	r16,r16,-16
811026a0:	d8c02017 	ldw	r3,128(sp)
811026a4:	d8801f17 	ldw	r2,124(sp)
811026a8:	da000404 	addi	r8,sp,16
811026ac:	8c3fed16 	blt	r17,r16,81102664 <__reset+0xfb0e2664>
811026b0:	d9403517 	ldw	r5,212(sp)
811026b4:	1c07883a 	add	r3,r3,r16
811026b8:	10800044 	addi	r2,r2,1
811026bc:	41400015 	stw	r5,0(r8)
811026c0:	44000115 	stw	r16,4(r8)
811026c4:	d8c02015 	stw	r3,128(sp)
811026c8:	d8801f15 	stw	r2,124(sp)
811026cc:	010001c4 	movi	r4,7
811026d0:	2080060e 	bge	r4,r2,811026ec <___vfprintf_internal_r+0xaa4>
811026d4:	d9002c17 	ldw	r4,176(sp)
811026d8:	d9801e04 	addi	r6,sp,120
811026dc:	b80b883a 	mov	r5,r23
811026e0:	110ed540 	call	8110ed54 <__sprint_r>
811026e4:	103e5a1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
811026e8:	d8c02017 	ldw	r3,128(sp)
811026ec:	d8803117 	ldw	r2,196(sp)
811026f0:	d9002a17 	ldw	r4,168(sp)
811026f4:	1100010e 	bge	r2,r4,811026fc <___vfprintf_internal_r+0xab4>
811026f8:	2005883a 	mov	r2,r4
811026fc:	d9402f17 	ldw	r5,188(sp)
81102700:	288b883a 	add	r5,r5,r2
81102704:	d9402f15 	stw	r5,188(sp)
81102708:	18019e1e 	bne	r3,zero,81102d84 <___vfprintf_internal_r+0x113c>
8110270c:	a8800007 	ldb	r2,0(r21)
81102710:	d8001f15 	stw	zero,124(sp)
81102714:	da000404 	addi	r8,sp,16
81102718:	103d851e 	bne	r2,zero,81101d30 <__reset+0xfb0e1d30>
8110271c:	a821883a 	mov	r16,r21
81102720:	003d9b06 	br	81101d90 <__reset+0xfb0e1d90>
81102724:	18c03fcc 	andi	r3,r3,255
81102728:	1805c11e 	bne	r3,zero,81103e30 <___vfprintf_internal_r+0x21e8>
8110272c:	94800414 	ori	r18,r18,16
81102730:	9080080c 	andi	r2,r18,32
81102734:	10020c26 	beq	r2,zero,81102f68 <___vfprintf_internal_r+0x1320>
81102738:	d8802d17 	ldw	r2,180(sp)
8110273c:	d9002917 	ldw	r4,164(sp)
81102740:	d8002785 	stb	zero,158(sp)
81102744:	10c00204 	addi	r3,r2,8
81102748:	14c00017 	ldw	r19,0(r2)
8110274c:	15800117 	ldw	r22,4(r2)
81102750:	20040f16 	blt	r4,zero,81103790 <___vfprintf_internal_r+0x1b48>
81102754:	013fdfc4 	movi	r4,-129
81102758:	9d84b03a 	or	r2,r19,r22
8110275c:	d8c02d15 	stw	r3,180(sp)
81102760:	9124703a 	and	r18,r18,r4
81102764:	0039883a 	mov	fp,zero
81102768:	103e891e 	bne	r2,zero,81102190 <__reset+0xfb0e2190>
8110276c:	d9002917 	ldw	r4,164(sp)
81102770:	2002c11e 	bne	r4,zero,81103278 <___vfprintf_internal_r+0x1630>
81102774:	d8002915 	stw	zero,164(sp)
81102778:	d8002e15 	stw	zero,184(sp)
8110277c:	dc001e04 	addi	r16,sp,120
81102780:	003ef806 	br	81102364 <__reset+0xfb0e2364>
81102784:	18c03fcc 	andi	r3,r3,255
81102788:	18059d1e 	bne	r3,zero,81103e00 <___vfprintf_internal_r+0x21b8>
8110278c:	016044b4 	movhi	r5,33042
81102790:	2951c604 	addi	r5,r5,18200
81102794:	d9403915 	stw	r5,228(sp)
81102798:	9080080c 	andi	r2,r18,32
8110279c:	10005226 	beq	r2,zero,811028e8 <___vfprintf_internal_r+0xca0>
811027a0:	d8802d17 	ldw	r2,180(sp)
811027a4:	14c00017 	ldw	r19,0(r2)
811027a8:	15800117 	ldw	r22,4(r2)
811027ac:	10800204 	addi	r2,r2,8
811027b0:	d8802d15 	stw	r2,180(sp)
811027b4:	9080004c 	andi	r2,r18,1
811027b8:	10019026 	beq	r2,zero,81102dfc <___vfprintf_internal_r+0x11b4>
811027bc:	9d84b03a 	or	r2,r19,r22
811027c0:	10036926 	beq	r2,zero,81103568 <___vfprintf_internal_r+0x1920>
811027c4:	d8c02917 	ldw	r3,164(sp)
811027c8:	00800c04 	movi	r2,48
811027cc:	d8802705 	stb	r2,156(sp)
811027d0:	dc402745 	stb	r17,157(sp)
811027d4:	d8002785 	stb	zero,158(sp)
811027d8:	90800094 	ori	r2,r18,2
811027dc:	18045d16 	blt	r3,zero,81103954 <___vfprintf_internal_r+0x1d0c>
811027e0:	00bfdfc4 	movi	r2,-129
811027e4:	90a4703a 	and	r18,r18,r2
811027e8:	94800094 	ori	r18,r18,2
811027ec:	0039883a 	mov	fp,zero
811027f0:	d9003917 	ldw	r4,228(sp)
811027f4:	dc001e04 	addi	r16,sp,120
811027f8:	988003cc 	andi	r2,r19,15
811027fc:	b006973a 	slli	r3,r22,28
81102800:	2085883a 	add	r2,r4,r2
81102804:	9826d13a 	srli	r19,r19,4
81102808:	10800003 	ldbu	r2,0(r2)
8110280c:	b02cd13a 	srli	r22,r22,4
81102810:	843fffc4 	addi	r16,r16,-1
81102814:	1ce6b03a 	or	r19,r3,r19
81102818:	80800005 	stb	r2,0(r16)
8110281c:	9d84b03a 	or	r2,r19,r22
81102820:	103ff51e 	bne	r2,zero,811027f8 <__reset+0xfb0e27f8>
81102824:	d8c02817 	ldw	r3,160(sp)
81102828:	1c07c83a 	sub	r3,r3,r16
8110282c:	d8c02e15 	stw	r3,184(sp)
81102830:	003ecc06 	br	81102364 <__reset+0xfb0e2364>
81102834:	18c03fcc 	andi	r3,r3,255
81102838:	183e9f26 	beq	r3,zero,811022b8 <__reset+0xfb0e22b8>
8110283c:	d9c02785 	stb	r7,158(sp)
81102840:	003e9d06 	br	811022b8 <__reset+0xfb0e22b8>
81102844:	00c00044 	movi	r3,1
81102848:	01c00ac4 	movi	r7,43
8110284c:	ac400007 	ldb	r17,0(r21)
81102850:	003d5e06 	br	81101dcc <__reset+0xfb0e1dcc>
81102854:	94800814 	ori	r18,r18,32
81102858:	ac400007 	ldb	r17,0(r21)
8110285c:	003d5b06 	br	81101dcc <__reset+0xfb0e1dcc>
81102860:	d8c02d17 	ldw	r3,180(sp)
81102864:	d8002785 	stb	zero,158(sp)
81102868:	1c000017 	ldw	r16,0(r3)
8110286c:	1cc00104 	addi	r19,r3,4
81102870:	80041926 	beq	r16,zero,811038d8 <___vfprintf_internal_r+0x1c90>
81102874:	d9002917 	ldw	r4,164(sp)
81102878:	2003d016 	blt	r4,zero,811037bc <___vfprintf_internal_r+0x1b74>
8110287c:	200d883a 	mov	r6,r4
81102880:	000b883a 	mov	r5,zero
81102884:	8009883a 	mov	r4,r16
81102888:	da003d15 	stw	r8,244(sp)
8110288c:	11089e40 	call	811089e4 <memchr>
81102890:	da003d17 	ldw	r8,244(sp)
81102894:	10045426 	beq	r2,zero,811039e8 <___vfprintf_internal_r+0x1da0>
81102898:	1405c83a 	sub	r2,r2,r16
8110289c:	d8802e15 	stw	r2,184(sp)
811028a0:	1003cc16 	blt	r2,zero,811037d4 <___vfprintf_internal_r+0x1b8c>
811028a4:	df002783 	ldbu	fp,158(sp)
811028a8:	d8802a15 	stw	r2,168(sp)
811028ac:	dcc02d15 	stw	r19,180(sp)
811028b0:	d8002915 	stw	zero,164(sp)
811028b4:	d8003215 	stw	zero,200(sp)
811028b8:	003eb006 	br	8110237c <__reset+0xfb0e237c>
811028bc:	18c03fcc 	andi	r3,r3,255
811028c0:	183f9b26 	beq	r3,zero,81102730 <__reset+0xfb0e2730>
811028c4:	d9c02785 	stb	r7,158(sp)
811028c8:	003f9906 	br	81102730 <__reset+0xfb0e2730>
811028cc:	18c03fcc 	andi	r3,r3,255
811028d0:	1805551e 	bne	r3,zero,81103e28 <___vfprintf_internal_r+0x21e0>
811028d4:	016044b4 	movhi	r5,33042
811028d8:	2951cb04 	addi	r5,r5,18220
811028dc:	d9403915 	stw	r5,228(sp)
811028e0:	9080080c 	andi	r2,r18,32
811028e4:	103fae1e 	bne	r2,zero,811027a0 <__reset+0xfb0e27a0>
811028e8:	9080040c 	andi	r2,r18,16
811028ec:	1002de26 	beq	r2,zero,81103468 <___vfprintf_internal_r+0x1820>
811028f0:	d8c02d17 	ldw	r3,180(sp)
811028f4:	002d883a 	mov	r22,zero
811028f8:	1cc00017 	ldw	r19,0(r3)
811028fc:	18c00104 	addi	r3,r3,4
81102900:	d8c02d15 	stw	r3,180(sp)
81102904:	003fab06 	br	811027b4 <__reset+0xfb0e27b4>
81102908:	38803fcc 	andi	r2,r7,255
8110290c:	1080201c 	xori	r2,r2,128
81102910:	10bfe004 	addi	r2,r2,-128
81102914:	1002d21e 	bne	r2,zero,81103460 <___vfprintf_internal_r+0x1818>
81102918:	00c00044 	movi	r3,1
8110291c:	01c00804 	movi	r7,32
81102920:	ac400007 	ldb	r17,0(r21)
81102924:	003d2906 	br	81101dcc <__reset+0xfb0e1dcc>
81102928:	94800054 	ori	r18,r18,1
8110292c:	ac400007 	ldb	r17,0(r21)
81102930:	003d2606 	br	81101dcc <__reset+0xfb0e1dcc>
81102934:	18c03fcc 	andi	r3,r3,255
81102938:	183e0526 	beq	r3,zero,81102150 <__reset+0xfb0e2150>
8110293c:	d9c02785 	stb	r7,158(sp)
81102940:	003e0306 	br	81102150 <__reset+0xfb0e2150>
81102944:	94801014 	ori	r18,r18,64
81102948:	ac400007 	ldb	r17,0(r21)
8110294c:	003d1f06 	br	81101dcc <__reset+0xfb0e1dcc>
81102950:	ac400007 	ldb	r17,0(r21)
81102954:	8a438726 	beq	r17,r9,81103774 <___vfprintf_internal_r+0x1b2c>
81102958:	94800414 	ori	r18,r18,16
8110295c:	003d1b06 	br	81101dcc <__reset+0xfb0e1dcc>
81102960:	18c03fcc 	andi	r3,r3,255
81102964:	1805341e 	bne	r3,zero,81103e38 <___vfprintf_internal_r+0x21f0>
81102968:	9080080c 	andi	r2,r18,32
8110296c:	1002cd26 	beq	r2,zero,811034a4 <___vfprintf_internal_r+0x185c>
81102970:	d9402d17 	ldw	r5,180(sp)
81102974:	d9002f17 	ldw	r4,188(sp)
81102978:	28800017 	ldw	r2,0(r5)
8110297c:	2007d7fa 	srai	r3,r4,31
81102980:	29400104 	addi	r5,r5,4
81102984:	d9402d15 	stw	r5,180(sp)
81102988:	11000015 	stw	r4,0(r2)
8110298c:	10c00115 	stw	r3,4(r2)
81102990:	003ce506 	br	81101d28 <__reset+0xfb0e1d28>
81102994:	d8c02d17 	ldw	r3,180(sp)
81102998:	d9002d17 	ldw	r4,180(sp)
8110299c:	d8002785 	stb	zero,158(sp)
811029a0:	18800017 	ldw	r2,0(r3)
811029a4:	21000104 	addi	r4,r4,4
811029a8:	00c00044 	movi	r3,1
811029ac:	d8c02a15 	stw	r3,168(sp)
811029b0:	d8801405 	stb	r2,80(sp)
811029b4:	d9002d15 	stw	r4,180(sp)
811029b8:	d8c02e15 	stw	r3,184(sp)
811029bc:	d8002915 	stw	zero,164(sp)
811029c0:	d8003215 	stw	zero,200(sp)
811029c4:	dc001404 	addi	r16,sp,80
811029c8:	0039883a 	mov	fp,zero
811029cc:	003e7206 	br	81102398 <__reset+0xfb0e2398>
811029d0:	012044b4 	movhi	r4,33042
811029d4:	2111cb04 	addi	r4,r4,18220
811029d8:	0039883a 	mov	fp,zero
811029dc:	d9003915 	stw	r4,228(sp)
811029e0:	04401e04 	movi	r17,120
811029e4:	003f8206 	br	811027f0 <__reset+0xfb0e27f0>
811029e8:	18c03fcc 	andi	r3,r3,255
811029ec:	1805061e 	bne	r3,zero,81103e08 <___vfprintf_internal_r+0x21c0>
811029f0:	883d9126 	beq	r17,zero,81102038 <__reset+0xfb0e2038>
811029f4:	00c00044 	movi	r3,1
811029f8:	d8c02a15 	stw	r3,168(sp)
811029fc:	dc401405 	stb	r17,80(sp)
81102a00:	d8002785 	stb	zero,158(sp)
81102a04:	003fec06 	br	811029b8 <__reset+0xfb0e29b8>
81102a08:	016044b4 	movhi	r5,33042
81102a0c:	2951cb04 	addi	r5,r5,18220
81102a10:	d9403915 	stw	r5,228(sp)
81102a14:	d8c02d15 	stw	r3,180(sp)
81102a18:	1025883a 	mov	r18,r2
81102a1c:	04401e04 	movi	r17,120
81102a20:	9d84b03a 	or	r2,r19,r22
81102a24:	1000fc1e 	bne	r2,zero,81102e18 <___vfprintf_internal_r+0x11d0>
81102a28:	0039883a 	mov	fp,zero
81102a2c:	00800084 	movi	r2,2
81102a30:	10803fcc 	andi	r2,r2,255
81102a34:	00c00044 	movi	r3,1
81102a38:	10c20f26 	beq	r2,r3,81103278 <___vfprintf_internal_r+0x1630>
81102a3c:	00c00084 	movi	r3,2
81102a40:	10fd6326 	beq	r2,r3,81101fd0 <__reset+0xfb0e1fd0>
81102a44:	003e2d06 	br	811022fc <__reset+0xfb0e22fc>
81102a48:	d8c02017 	ldw	r3,128(sp)
81102a4c:	003e9306 	br	8110249c <__reset+0xfb0e249c>
81102a50:	00801944 	movi	r2,101
81102a54:	14407e0e 	bge	r2,r17,81102c50 <___vfprintf_internal_r+0x1008>
81102a58:	d9003617 	ldw	r4,216(sp)
81102a5c:	d9403817 	ldw	r5,224(sp)
81102a60:	000d883a 	mov	r6,zero
81102a64:	000f883a 	mov	r7,zero
81102a68:	d8c03c15 	stw	r3,240(sp)
81102a6c:	da003d15 	stw	r8,244(sp)
81102a70:	1114a800 	call	81114a80 <__eqdf2>
81102a74:	d8c03c17 	ldw	r3,240(sp)
81102a78:	da003d17 	ldw	r8,244(sp)
81102a7c:	1000f71e 	bne	r2,zero,81102e5c <___vfprintf_internal_r+0x1214>
81102a80:	d8801f17 	ldw	r2,124(sp)
81102a84:	012044b4 	movhi	r4,33042
81102a88:	2111d204 	addi	r4,r4,18248
81102a8c:	18c00044 	addi	r3,r3,1
81102a90:	10800044 	addi	r2,r2,1
81102a94:	41000015 	stw	r4,0(r8)
81102a98:	01000044 	movi	r4,1
81102a9c:	41000115 	stw	r4,4(r8)
81102aa0:	d8c02015 	stw	r3,128(sp)
81102aa4:	d8801f15 	stw	r2,124(sp)
81102aa8:	010001c4 	movi	r4,7
81102aac:	2082b816 	blt	r4,r2,81103590 <___vfprintf_internal_r+0x1948>
81102ab0:	42000204 	addi	r8,r8,8
81102ab4:	d8802617 	ldw	r2,152(sp)
81102ab8:	d9403317 	ldw	r5,204(sp)
81102abc:	11400216 	blt	r2,r5,81102ac8 <___vfprintf_internal_r+0xe80>
81102ac0:	9080004c 	andi	r2,r18,1
81102ac4:	103ed526 	beq	r2,zero,8110261c <__reset+0xfb0e261c>
81102ac8:	d8803717 	ldw	r2,220(sp)
81102acc:	d9003417 	ldw	r4,208(sp)
81102ad0:	d9403717 	ldw	r5,220(sp)
81102ad4:	1887883a 	add	r3,r3,r2
81102ad8:	d8801f17 	ldw	r2,124(sp)
81102adc:	41000015 	stw	r4,0(r8)
81102ae0:	41400115 	stw	r5,4(r8)
81102ae4:	10800044 	addi	r2,r2,1
81102ae8:	d8c02015 	stw	r3,128(sp)
81102aec:	d8801f15 	stw	r2,124(sp)
81102af0:	010001c4 	movi	r4,7
81102af4:	20832916 	blt	r4,r2,8110379c <___vfprintf_internal_r+0x1b54>
81102af8:	42000204 	addi	r8,r8,8
81102afc:	d8803317 	ldw	r2,204(sp)
81102b00:	143fffc4 	addi	r16,r2,-1
81102b04:	043ec50e 	bge	zero,r16,8110261c <__reset+0xfb0e261c>
81102b08:	04400404 	movi	r17,16
81102b0c:	d8801f17 	ldw	r2,124(sp)
81102b10:	8c00880e 	bge	r17,r16,81102d34 <___vfprintf_internal_r+0x10ec>
81102b14:	016044b4 	movhi	r5,33042
81102b18:	2951d284 	addi	r5,r5,18250
81102b1c:	d9402b15 	stw	r5,172(sp)
81102b20:	058001c4 	movi	r22,7
81102b24:	dcc02c17 	ldw	r19,176(sp)
81102b28:	00000306 	br	81102b38 <___vfprintf_internal_r+0xef0>
81102b2c:	42000204 	addi	r8,r8,8
81102b30:	843ffc04 	addi	r16,r16,-16
81102b34:	8c00820e 	bge	r17,r16,81102d40 <___vfprintf_internal_r+0x10f8>
81102b38:	18c00404 	addi	r3,r3,16
81102b3c:	10800044 	addi	r2,r2,1
81102b40:	45000015 	stw	r20,0(r8)
81102b44:	44400115 	stw	r17,4(r8)
81102b48:	d8c02015 	stw	r3,128(sp)
81102b4c:	d8801f15 	stw	r2,124(sp)
81102b50:	b0bff60e 	bge	r22,r2,81102b2c <__reset+0xfb0e2b2c>
81102b54:	d9801e04 	addi	r6,sp,120
81102b58:	b80b883a 	mov	r5,r23
81102b5c:	9809883a 	mov	r4,r19
81102b60:	110ed540 	call	8110ed54 <__sprint_r>
81102b64:	103d3a1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81102b68:	d8c02017 	ldw	r3,128(sp)
81102b6c:	d8801f17 	ldw	r2,124(sp)
81102b70:	da000404 	addi	r8,sp,16
81102b74:	003fee06 	br	81102b30 <__reset+0xfb0e2b30>
81102b78:	d9403117 	ldw	r5,196(sp)
81102b7c:	d8802a17 	ldw	r2,168(sp)
81102b80:	28adc83a 	sub	r22,r5,r2
81102b84:	05be630e 	bge	zero,r22,81102514 <__reset+0xfb0e2514>
81102b88:	07000404 	movi	fp,16
81102b8c:	d8801f17 	ldw	r2,124(sp)
81102b90:	e5838f0e 	bge	fp,r22,811039d0 <___vfprintf_internal_r+0x1d88>
81102b94:	016044b4 	movhi	r5,33042
81102b98:	2951d284 	addi	r5,r5,18250
81102b9c:	dc403015 	stw	r17,192(sp)
81102ba0:	d9402b15 	stw	r5,172(sp)
81102ba4:	b023883a 	mov	r17,r22
81102ba8:	04c001c4 	movi	r19,7
81102bac:	a82d883a 	mov	r22,r21
81102bb0:	902b883a 	mov	r21,r18
81102bb4:	8025883a 	mov	r18,r16
81102bb8:	dc002c17 	ldw	r16,176(sp)
81102bbc:	00000306 	br	81102bcc <___vfprintf_internal_r+0xf84>
81102bc0:	8c7ffc04 	addi	r17,r17,-16
81102bc4:	42000204 	addi	r8,r8,8
81102bc8:	e440110e 	bge	fp,r17,81102c10 <___vfprintf_internal_r+0xfc8>
81102bcc:	18c00404 	addi	r3,r3,16
81102bd0:	10800044 	addi	r2,r2,1
81102bd4:	45000015 	stw	r20,0(r8)
81102bd8:	47000115 	stw	fp,4(r8)
81102bdc:	d8c02015 	stw	r3,128(sp)
81102be0:	d8801f15 	stw	r2,124(sp)
81102be4:	98bff60e 	bge	r19,r2,81102bc0 <__reset+0xfb0e2bc0>
81102be8:	d9801e04 	addi	r6,sp,120
81102bec:	b80b883a 	mov	r5,r23
81102bf0:	8009883a 	mov	r4,r16
81102bf4:	110ed540 	call	8110ed54 <__sprint_r>
81102bf8:	103d151e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81102bfc:	8c7ffc04 	addi	r17,r17,-16
81102c00:	d8c02017 	ldw	r3,128(sp)
81102c04:	d8801f17 	ldw	r2,124(sp)
81102c08:	da000404 	addi	r8,sp,16
81102c0c:	e47fef16 	blt	fp,r17,81102bcc <__reset+0xfb0e2bcc>
81102c10:	9021883a 	mov	r16,r18
81102c14:	a825883a 	mov	r18,r21
81102c18:	b02b883a 	mov	r21,r22
81102c1c:	882d883a 	mov	r22,r17
81102c20:	dc403017 	ldw	r17,192(sp)
81102c24:	d9002b17 	ldw	r4,172(sp)
81102c28:	1d87883a 	add	r3,r3,r22
81102c2c:	10800044 	addi	r2,r2,1
81102c30:	41000015 	stw	r4,0(r8)
81102c34:	45800115 	stw	r22,4(r8)
81102c38:	d8c02015 	stw	r3,128(sp)
81102c3c:	d8801f15 	stw	r2,124(sp)
81102c40:	010001c4 	movi	r4,7
81102c44:	20818e16 	blt	r4,r2,81103280 <___vfprintf_internal_r+0x1638>
81102c48:	42000204 	addi	r8,r8,8
81102c4c:	003e3106 	br	81102514 <__reset+0xfb0e2514>
81102c50:	d9403317 	ldw	r5,204(sp)
81102c54:	00800044 	movi	r2,1
81102c58:	18c00044 	addi	r3,r3,1
81102c5c:	1141530e 	bge	r2,r5,811031ac <___vfprintf_internal_r+0x1564>
81102c60:	dc401f17 	ldw	r17,124(sp)
81102c64:	00800044 	movi	r2,1
81102c68:	40800115 	stw	r2,4(r8)
81102c6c:	8c400044 	addi	r17,r17,1
81102c70:	44000015 	stw	r16,0(r8)
81102c74:	d8c02015 	stw	r3,128(sp)
81102c78:	dc401f15 	stw	r17,124(sp)
81102c7c:	008001c4 	movi	r2,7
81102c80:	14416b16 	blt	r2,r17,81103230 <___vfprintf_internal_r+0x15e8>
81102c84:	42000204 	addi	r8,r8,8
81102c88:	d8803717 	ldw	r2,220(sp)
81102c8c:	d9003417 	ldw	r4,208(sp)
81102c90:	8c400044 	addi	r17,r17,1
81102c94:	10c7883a 	add	r3,r2,r3
81102c98:	40800115 	stw	r2,4(r8)
81102c9c:	41000015 	stw	r4,0(r8)
81102ca0:	d8c02015 	stw	r3,128(sp)
81102ca4:	dc401f15 	stw	r17,124(sp)
81102ca8:	008001c4 	movi	r2,7
81102cac:	14416916 	blt	r2,r17,81103254 <___vfprintf_internal_r+0x160c>
81102cb0:	45800204 	addi	r22,r8,8
81102cb4:	d9003617 	ldw	r4,216(sp)
81102cb8:	d9403817 	ldw	r5,224(sp)
81102cbc:	000d883a 	mov	r6,zero
81102cc0:	000f883a 	mov	r7,zero
81102cc4:	d8c03c15 	stw	r3,240(sp)
81102cc8:	1114a800 	call	81114a80 <__eqdf2>
81102ccc:	d8c03c17 	ldw	r3,240(sp)
81102cd0:	1000bc26 	beq	r2,zero,81102fc4 <___vfprintf_internal_r+0x137c>
81102cd4:	d9403317 	ldw	r5,204(sp)
81102cd8:	84000044 	addi	r16,r16,1
81102cdc:	8c400044 	addi	r17,r17,1
81102ce0:	28bfffc4 	addi	r2,r5,-1
81102ce4:	1887883a 	add	r3,r3,r2
81102ce8:	b0800115 	stw	r2,4(r22)
81102cec:	b4000015 	stw	r16,0(r22)
81102cf0:	d8c02015 	stw	r3,128(sp)
81102cf4:	dc401f15 	stw	r17,124(sp)
81102cf8:	008001c4 	movi	r2,7
81102cfc:	14414316 	blt	r2,r17,8110320c <___vfprintf_internal_r+0x15c4>
81102d00:	b5800204 	addi	r22,r22,8
81102d04:	d9003a17 	ldw	r4,232(sp)
81102d08:	df0022c4 	addi	fp,sp,139
81102d0c:	8c400044 	addi	r17,r17,1
81102d10:	20c7883a 	add	r3,r4,r3
81102d14:	b7000015 	stw	fp,0(r22)
81102d18:	b1000115 	stw	r4,4(r22)
81102d1c:	d8c02015 	stw	r3,128(sp)
81102d20:	dc401f15 	stw	r17,124(sp)
81102d24:	008001c4 	movi	r2,7
81102d28:	14400e16 	blt	r2,r17,81102d64 <___vfprintf_internal_r+0x111c>
81102d2c:	b2000204 	addi	r8,r22,8
81102d30:	003e3a06 	br	8110261c <__reset+0xfb0e261c>
81102d34:	012044b4 	movhi	r4,33042
81102d38:	2111d284 	addi	r4,r4,18250
81102d3c:	d9002b15 	stw	r4,172(sp)
81102d40:	d9002b17 	ldw	r4,172(sp)
81102d44:	1c07883a 	add	r3,r3,r16
81102d48:	44000115 	stw	r16,4(r8)
81102d4c:	41000015 	stw	r4,0(r8)
81102d50:	10800044 	addi	r2,r2,1
81102d54:	d8c02015 	stw	r3,128(sp)
81102d58:	d8801f15 	stw	r2,124(sp)
81102d5c:	010001c4 	movi	r4,7
81102d60:	20be2d0e 	bge	r4,r2,81102618 <__reset+0xfb0e2618>
81102d64:	d9002c17 	ldw	r4,176(sp)
81102d68:	d9801e04 	addi	r6,sp,120
81102d6c:	b80b883a 	mov	r5,r23
81102d70:	110ed540 	call	8110ed54 <__sprint_r>
81102d74:	103cb61e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81102d78:	d8c02017 	ldw	r3,128(sp)
81102d7c:	da000404 	addi	r8,sp,16
81102d80:	003e2606 	br	8110261c <__reset+0xfb0e261c>
81102d84:	d9002c17 	ldw	r4,176(sp)
81102d88:	d9801e04 	addi	r6,sp,120
81102d8c:	b80b883a 	mov	r5,r23
81102d90:	110ed540 	call	8110ed54 <__sprint_r>
81102d94:	103e5d26 	beq	r2,zero,8110270c <__reset+0xfb0e270c>
81102d98:	003cad06 	br	81102050 <__reset+0xfb0e2050>
81102d9c:	d9002c17 	ldw	r4,176(sp)
81102da0:	d9801e04 	addi	r6,sp,120
81102da4:	b80b883a 	mov	r5,r23
81102da8:	110ed540 	call	8110ed54 <__sprint_r>
81102dac:	103ca81e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81102db0:	d8c02017 	ldw	r3,128(sp)
81102db4:	da000404 	addi	r8,sp,16
81102db8:	003e0b06 	br	811025e8 <__reset+0xfb0e25e8>
81102dbc:	d9002c17 	ldw	r4,176(sp)
81102dc0:	d9801e04 	addi	r6,sp,120
81102dc4:	b80b883a 	mov	r5,r23
81102dc8:	110ed540 	call	8110ed54 <__sprint_r>
81102dcc:	103ca01e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81102dd0:	d8c02017 	ldw	r3,128(sp)
81102dd4:	da000404 	addi	r8,sp,16
81102dd8:	003dbd06 	br	811024d0 <__reset+0xfb0e24d0>
81102ddc:	d9002c17 	ldw	r4,176(sp)
81102de0:	d9801e04 	addi	r6,sp,120
81102de4:	b80b883a 	mov	r5,r23
81102de8:	110ed540 	call	8110ed54 <__sprint_r>
81102dec:	103c981e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81102df0:	d8c02017 	ldw	r3,128(sp)
81102df4:	da000404 	addi	r8,sp,16
81102df8:	003dc306 	br	81102508 <__reset+0xfb0e2508>
81102dfc:	d8802917 	ldw	r2,164(sp)
81102e00:	d8002785 	stb	zero,158(sp)
81102e04:	103f0616 	blt	r2,zero,81102a20 <__reset+0xfb0e2a20>
81102e08:	00ffdfc4 	movi	r3,-129
81102e0c:	9d84b03a 	or	r2,r19,r22
81102e10:	90e4703a 	and	r18,r18,r3
81102e14:	103c6b26 	beq	r2,zero,81101fc4 <__reset+0xfb0e1fc4>
81102e18:	0039883a 	mov	fp,zero
81102e1c:	003e7406 	br	811027f0 <__reset+0xfb0e27f0>
81102e20:	9080040c 	andi	r2,r18,16
81102e24:	1001b326 	beq	r2,zero,811034f4 <___vfprintf_internal_r+0x18ac>
81102e28:	d9002d17 	ldw	r4,180(sp)
81102e2c:	d9402917 	ldw	r5,164(sp)
81102e30:	d8002785 	stb	zero,158(sp)
81102e34:	20800104 	addi	r2,r4,4
81102e38:	24c00017 	ldw	r19,0(r4)
81102e3c:	002d883a 	mov	r22,zero
81102e40:	2801b516 	blt	r5,zero,81103518 <___vfprintf_internal_r+0x18d0>
81102e44:	00ffdfc4 	movi	r3,-129
81102e48:	d8802d15 	stw	r2,180(sp)
81102e4c:	90e4703a 	and	r18,r18,r3
81102e50:	983d2726 	beq	r19,zero,811022f0 <__reset+0xfb0e22f0>
81102e54:	0039883a 	mov	fp,zero
81102e58:	003d2a06 	br	81102304 <__reset+0xfb0e2304>
81102e5c:	dc402617 	ldw	r17,152(sp)
81102e60:	0441d30e 	bge	zero,r17,811035b0 <___vfprintf_internal_r+0x1968>
81102e64:	dc403217 	ldw	r17,200(sp)
81102e68:	d8803317 	ldw	r2,204(sp)
81102e6c:	1440010e 	bge	r2,r17,81102e74 <___vfprintf_internal_r+0x122c>
81102e70:	1023883a 	mov	r17,r2
81102e74:	04400a0e 	bge	zero,r17,81102ea0 <___vfprintf_internal_r+0x1258>
81102e78:	d8801f17 	ldw	r2,124(sp)
81102e7c:	1c47883a 	add	r3,r3,r17
81102e80:	44000015 	stw	r16,0(r8)
81102e84:	10800044 	addi	r2,r2,1
81102e88:	44400115 	stw	r17,4(r8)
81102e8c:	d8c02015 	stw	r3,128(sp)
81102e90:	d8801f15 	stw	r2,124(sp)
81102e94:	010001c4 	movi	r4,7
81102e98:	20826516 	blt	r4,r2,81103830 <___vfprintf_internal_r+0x1be8>
81102e9c:	42000204 	addi	r8,r8,8
81102ea0:	88026116 	blt	r17,zero,81103828 <___vfprintf_internal_r+0x1be0>
81102ea4:	d9003217 	ldw	r4,200(sp)
81102ea8:	2463c83a 	sub	r17,r4,r17
81102eac:	04407b0e 	bge	zero,r17,8110309c <___vfprintf_internal_r+0x1454>
81102eb0:	05800404 	movi	r22,16
81102eb4:	d8801f17 	ldw	r2,124(sp)
81102eb8:	b4419d0e 	bge	r22,r17,81103530 <___vfprintf_internal_r+0x18e8>
81102ebc:	012044b4 	movhi	r4,33042
81102ec0:	2111d284 	addi	r4,r4,18250
81102ec4:	d9002b15 	stw	r4,172(sp)
81102ec8:	070001c4 	movi	fp,7
81102ecc:	dcc02c17 	ldw	r19,176(sp)
81102ed0:	00000306 	br	81102ee0 <___vfprintf_internal_r+0x1298>
81102ed4:	42000204 	addi	r8,r8,8
81102ed8:	8c7ffc04 	addi	r17,r17,-16
81102edc:	b441970e 	bge	r22,r17,8110353c <___vfprintf_internal_r+0x18f4>
81102ee0:	18c00404 	addi	r3,r3,16
81102ee4:	10800044 	addi	r2,r2,1
81102ee8:	45000015 	stw	r20,0(r8)
81102eec:	45800115 	stw	r22,4(r8)
81102ef0:	d8c02015 	stw	r3,128(sp)
81102ef4:	d8801f15 	stw	r2,124(sp)
81102ef8:	e0bff60e 	bge	fp,r2,81102ed4 <__reset+0xfb0e2ed4>
81102efc:	d9801e04 	addi	r6,sp,120
81102f00:	b80b883a 	mov	r5,r23
81102f04:	9809883a 	mov	r4,r19
81102f08:	110ed540 	call	8110ed54 <__sprint_r>
81102f0c:	103c501e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81102f10:	d8c02017 	ldw	r3,128(sp)
81102f14:	d8801f17 	ldw	r2,124(sp)
81102f18:	da000404 	addi	r8,sp,16
81102f1c:	003fee06 	br	81102ed8 <__reset+0xfb0e2ed8>
81102f20:	d9002c17 	ldw	r4,176(sp)
81102f24:	d9801e04 	addi	r6,sp,120
81102f28:	b80b883a 	mov	r5,r23
81102f2c:	110ed540 	call	8110ed54 <__sprint_r>
81102f30:	103c471e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81102f34:	d8c02017 	ldw	r3,128(sp)
81102f38:	df002787 	ldb	fp,158(sp)
81102f3c:	da000404 	addi	r8,sp,16
81102f40:	003d5606 	br	8110249c <__reset+0xfb0e249c>
81102f44:	9080040c 	andi	r2,r18,16
81102f48:	10016126 	beq	r2,zero,811034d0 <___vfprintf_internal_r+0x1888>
81102f4c:	d8802d17 	ldw	r2,180(sp)
81102f50:	14c00017 	ldw	r19,0(r2)
81102f54:	10800104 	addi	r2,r2,4
81102f58:	d8802d15 	stw	r2,180(sp)
81102f5c:	982dd7fa 	srai	r22,r19,31
81102f60:	b005883a 	mov	r2,r22
81102f64:	003c8206 	br	81102170 <__reset+0xfb0e2170>
81102f68:	9080040c 	andi	r2,r18,16
81102f6c:	10003526 	beq	r2,zero,81103044 <___vfprintf_internal_r+0x13fc>
81102f70:	d9402d17 	ldw	r5,180(sp)
81102f74:	d8c02917 	ldw	r3,164(sp)
81102f78:	d8002785 	stb	zero,158(sp)
81102f7c:	28800104 	addi	r2,r5,4
81102f80:	2cc00017 	ldw	r19,0(r5)
81102f84:	002d883a 	mov	r22,zero
81102f88:	18003716 	blt	r3,zero,81103068 <___vfprintf_internal_r+0x1420>
81102f8c:	00ffdfc4 	movi	r3,-129
81102f90:	d8802d15 	stw	r2,180(sp)
81102f94:	90e4703a 	and	r18,r18,r3
81102f98:	0039883a 	mov	fp,zero
81102f9c:	983df326 	beq	r19,zero,8110276c <__reset+0xfb0e276c>
81102fa0:	00800244 	movi	r2,9
81102fa4:	14fc7b36 	bltu	r2,r19,81102194 <__reset+0xfb0e2194>
81102fa8:	d8c02817 	ldw	r3,160(sp)
81102fac:	dc001dc4 	addi	r16,sp,119
81102fb0:	9cc00c04 	addi	r19,r19,48
81102fb4:	1c07c83a 	sub	r3,r3,r16
81102fb8:	dcc01dc5 	stb	r19,119(sp)
81102fbc:	d8c02e15 	stw	r3,184(sp)
81102fc0:	003ce806 	br	81102364 <__reset+0xfb0e2364>
81102fc4:	d8803317 	ldw	r2,204(sp)
81102fc8:	143fffc4 	addi	r16,r2,-1
81102fcc:	043f4d0e 	bge	zero,r16,81102d04 <__reset+0xfb0e2d04>
81102fd0:	07000404 	movi	fp,16
81102fd4:	e400810e 	bge	fp,r16,811031dc <___vfprintf_internal_r+0x1594>
81102fd8:	016044b4 	movhi	r5,33042
81102fdc:	2951d284 	addi	r5,r5,18250
81102fe0:	d9402b15 	stw	r5,172(sp)
81102fe4:	01c001c4 	movi	r7,7
81102fe8:	dcc02c17 	ldw	r19,176(sp)
81102fec:	00000306 	br	81102ffc <___vfprintf_internal_r+0x13b4>
81102ff0:	b5800204 	addi	r22,r22,8
81102ff4:	843ffc04 	addi	r16,r16,-16
81102ff8:	e4007b0e 	bge	fp,r16,811031e8 <___vfprintf_internal_r+0x15a0>
81102ffc:	18c00404 	addi	r3,r3,16
81103000:	8c400044 	addi	r17,r17,1
81103004:	b5000015 	stw	r20,0(r22)
81103008:	b7000115 	stw	fp,4(r22)
8110300c:	d8c02015 	stw	r3,128(sp)
81103010:	dc401f15 	stw	r17,124(sp)
81103014:	3c7ff60e 	bge	r7,r17,81102ff0 <__reset+0xfb0e2ff0>
81103018:	d9801e04 	addi	r6,sp,120
8110301c:	b80b883a 	mov	r5,r23
81103020:	9809883a 	mov	r4,r19
81103024:	d9c03c15 	stw	r7,240(sp)
81103028:	110ed540 	call	8110ed54 <__sprint_r>
8110302c:	d9c03c17 	ldw	r7,240(sp)
81103030:	103c071e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81103034:	d8c02017 	ldw	r3,128(sp)
81103038:	dc401f17 	ldw	r17,124(sp)
8110303c:	dd800404 	addi	r22,sp,16
81103040:	003fec06 	br	81102ff4 <__reset+0xfb0e2ff4>
81103044:	9080100c 	andi	r2,r18,64
81103048:	d8002785 	stb	zero,158(sp)
8110304c:	10010e26 	beq	r2,zero,81103488 <___vfprintf_internal_r+0x1840>
81103050:	d9002d17 	ldw	r4,180(sp)
81103054:	d9402917 	ldw	r5,164(sp)
81103058:	002d883a 	mov	r22,zero
8110305c:	20800104 	addi	r2,r4,4
81103060:	24c0000b 	ldhu	r19,0(r4)
81103064:	283fc90e 	bge	r5,zero,81102f8c <__reset+0xfb0e2f8c>
81103068:	d8802d15 	stw	r2,180(sp)
8110306c:	0039883a 	mov	fp,zero
81103070:	9d84b03a 	or	r2,r19,r22
81103074:	103c461e 	bne	r2,zero,81102190 <__reset+0xfb0e2190>
81103078:	00800044 	movi	r2,1
8110307c:	003e6c06 	br	81102a30 <__reset+0xfb0e2a30>
81103080:	d9002c17 	ldw	r4,176(sp)
81103084:	d9801e04 	addi	r6,sp,120
81103088:	b80b883a 	mov	r5,r23
8110308c:	110ed540 	call	8110ed54 <__sprint_r>
81103090:	103bef1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81103094:	d8c02017 	ldw	r3,128(sp)
81103098:	da000404 	addi	r8,sp,16
8110309c:	d9003217 	ldw	r4,200(sp)
811030a0:	d8802617 	ldw	r2,152(sp)
811030a4:	d9403317 	ldw	r5,204(sp)
811030a8:	8123883a 	add	r17,r16,r4
811030ac:	11400216 	blt	r2,r5,811030b8 <___vfprintf_internal_r+0x1470>
811030b0:	9100004c 	andi	r4,r18,1
811030b4:	20000d26 	beq	r4,zero,811030ec <___vfprintf_internal_r+0x14a4>
811030b8:	d9003717 	ldw	r4,220(sp)
811030bc:	d9403417 	ldw	r5,208(sp)
811030c0:	1907883a 	add	r3,r3,r4
811030c4:	d9001f17 	ldw	r4,124(sp)
811030c8:	41400015 	stw	r5,0(r8)
811030cc:	d9403717 	ldw	r5,220(sp)
811030d0:	21000044 	addi	r4,r4,1
811030d4:	d8c02015 	stw	r3,128(sp)
811030d8:	41400115 	stw	r5,4(r8)
811030dc:	d9001f15 	stw	r4,124(sp)
811030e0:	014001c4 	movi	r5,7
811030e4:	2901e816 	blt	r5,r4,81103888 <___vfprintf_internal_r+0x1c40>
811030e8:	42000204 	addi	r8,r8,8
811030ec:	d9003317 	ldw	r4,204(sp)
811030f0:	8121883a 	add	r16,r16,r4
811030f4:	2085c83a 	sub	r2,r4,r2
811030f8:	8461c83a 	sub	r16,r16,r17
811030fc:	1400010e 	bge	r2,r16,81103104 <___vfprintf_internal_r+0x14bc>
81103100:	1021883a 	mov	r16,r2
81103104:	04000a0e 	bge	zero,r16,81103130 <___vfprintf_internal_r+0x14e8>
81103108:	d9001f17 	ldw	r4,124(sp)
8110310c:	1c07883a 	add	r3,r3,r16
81103110:	44400015 	stw	r17,0(r8)
81103114:	21000044 	addi	r4,r4,1
81103118:	44000115 	stw	r16,4(r8)
8110311c:	d8c02015 	stw	r3,128(sp)
81103120:	d9001f15 	stw	r4,124(sp)
81103124:	014001c4 	movi	r5,7
81103128:	2901fb16 	blt	r5,r4,81103918 <___vfprintf_internal_r+0x1cd0>
8110312c:	42000204 	addi	r8,r8,8
81103130:	8001f716 	blt	r16,zero,81103910 <___vfprintf_internal_r+0x1cc8>
81103134:	1421c83a 	sub	r16,r2,r16
81103138:	043d380e 	bge	zero,r16,8110261c <__reset+0xfb0e261c>
8110313c:	04400404 	movi	r17,16
81103140:	d8801f17 	ldw	r2,124(sp)
81103144:	8c3efb0e 	bge	r17,r16,81102d34 <__reset+0xfb0e2d34>
81103148:	016044b4 	movhi	r5,33042
8110314c:	2951d284 	addi	r5,r5,18250
81103150:	d9402b15 	stw	r5,172(sp)
81103154:	058001c4 	movi	r22,7
81103158:	dcc02c17 	ldw	r19,176(sp)
8110315c:	00000306 	br	8110316c <___vfprintf_internal_r+0x1524>
81103160:	42000204 	addi	r8,r8,8
81103164:	843ffc04 	addi	r16,r16,-16
81103168:	8c3ef50e 	bge	r17,r16,81102d40 <__reset+0xfb0e2d40>
8110316c:	18c00404 	addi	r3,r3,16
81103170:	10800044 	addi	r2,r2,1
81103174:	45000015 	stw	r20,0(r8)
81103178:	44400115 	stw	r17,4(r8)
8110317c:	d8c02015 	stw	r3,128(sp)
81103180:	d8801f15 	stw	r2,124(sp)
81103184:	b0bff60e 	bge	r22,r2,81103160 <__reset+0xfb0e3160>
81103188:	d9801e04 	addi	r6,sp,120
8110318c:	b80b883a 	mov	r5,r23
81103190:	9809883a 	mov	r4,r19
81103194:	110ed540 	call	8110ed54 <__sprint_r>
81103198:	103bad1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
8110319c:	d8c02017 	ldw	r3,128(sp)
811031a0:	d8801f17 	ldw	r2,124(sp)
811031a4:	da000404 	addi	r8,sp,16
811031a8:	003fee06 	br	81103164 <__reset+0xfb0e3164>
811031ac:	9088703a 	and	r4,r18,r2
811031b0:	203eab1e 	bne	r4,zero,81102c60 <__reset+0xfb0e2c60>
811031b4:	dc401f17 	ldw	r17,124(sp)
811031b8:	40800115 	stw	r2,4(r8)
811031bc:	44000015 	stw	r16,0(r8)
811031c0:	8c400044 	addi	r17,r17,1
811031c4:	d8c02015 	stw	r3,128(sp)
811031c8:	dc401f15 	stw	r17,124(sp)
811031cc:	008001c4 	movi	r2,7
811031d0:	14400e16 	blt	r2,r17,8110320c <___vfprintf_internal_r+0x15c4>
811031d4:	45800204 	addi	r22,r8,8
811031d8:	003eca06 	br	81102d04 <__reset+0xfb0e2d04>
811031dc:	012044b4 	movhi	r4,33042
811031e0:	2111d284 	addi	r4,r4,18250
811031e4:	d9002b15 	stw	r4,172(sp)
811031e8:	d8802b17 	ldw	r2,172(sp)
811031ec:	1c07883a 	add	r3,r3,r16
811031f0:	8c400044 	addi	r17,r17,1
811031f4:	b0800015 	stw	r2,0(r22)
811031f8:	b4000115 	stw	r16,4(r22)
811031fc:	d8c02015 	stw	r3,128(sp)
81103200:	dc401f15 	stw	r17,124(sp)
81103204:	008001c4 	movi	r2,7
81103208:	147ebd0e 	bge	r2,r17,81102d00 <__reset+0xfb0e2d00>
8110320c:	d9002c17 	ldw	r4,176(sp)
81103210:	d9801e04 	addi	r6,sp,120
81103214:	b80b883a 	mov	r5,r23
81103218:	110ed540 	call	8110ed54 <__sprint_r>
8110321c:	103b8c1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81103220:	d8c02017 	ldw	r3,128(sp)
81103224:	dc401f17 	ldw	r17,124(sp)
81103228:	dd800404 	addi	r22,sp,16
8110322c:	003eb506 	br	81102d04 <__reset+0xfb0e2d04>
81103230:	d9002c17 	ldw	r4,176(sp)
81103234:	d9801e04 	addi	r6,sp,120
81103238:	b80b883a 	mov	r5,r23
8110323c:	110ed540 	call	8110ed54 <__sprint_r>
81103240:	103b831e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81103244:	d8c02017 	ldw	r3,128(sp)
81103248:	dc401f17 	ldw	r17,124(sp)
8110324c:	da000404 	addi	r8,sp,16
81103250:	003e8d06 	br	81102c88 <__reset+0xfb0e2c88>
81103254:	d9002c17 	ldw	r4,176(sp)
81103258:	d9801e04 	addi	r6,sp,120
8110325c:	b80b883a 	mov	r5,r23
81103260:	110ed540 	call	8110ed54 <__sprint_r>
81103264:	103b7a1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81103268:	d8c02017 	ldw	r3,128(sp)
8110326c:	dc401f17 	ldw	r17,124(sp)
81103270:	dd800404 	addi	r22,sp,16
81103274:	003e8f06 	br	81102cb4 <__reset+0xfb0e2cb4>
81103278:	0027883a 	mov	r19,zero
8110327c:	003f4a06 	br	81102fa8 <__reset+0xfb0e2fa8>
81103280:	d9002c17 	ldw	r4,176(sp)
81103284:	d9801e04 	addi	r6,sp,120
81103288:	b80b883a 	mov	r5,r23
8110328c:	110ed540 	call	8110ed54 <__sprint_r>
81103290:	103b6f1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81103294:	d8c02017 	ldw	r3,128(sp)
81103298:	da000404 	addi	r8,sp,16
8110329c:	003c9d06 	br	81102514 <__reset+0xfb0e2514>
811032a0:	04e7c83a 	sub	r19,zero,r19
811032a4:	9804c03a 	cmpne	r2,r19,zero
811032a8:	05adc83a 	sub	r22,zero,r22
811032ac:	b0adc83a 	sub	r22,r22,r2
811032b0:	d8802917 	ldw	r2,164(sp)
811032b4:	07000b44 	movi	fp,45
811032b8:	df002785 	stb	fp,158(sp)
811032bc:	10017b16 	blt	r2,zero,811038ac <___vfprintf_internal_r+0x1c64>
811032c0:	00bfdfc4 	movi	r2,-129
811032c4:	90a4703a 	and	r18,r18,r2
811032c8:	003bb106 	br	81102190 <__reset+0xfb0e2190>
811032cc:	d9003617 	ldw	r4,216(sp)
811032d0:	d9403817 	ldw	r5,224(sp)
811032d4:	da003d15 	stw	r8,244(sp)
811032d8:	110a32c0 	call	8110a32c <__fpclassifyd>
811032dc:	da003d17 	ldw	r8,244(sp)
811032e0:	1000f026 	beq	r2,zero,811036a4 <___vfprintf_internal_r+0x1a5c>
811032e4:	d9002917 	ldw	r4,164(sp)
811032e8:	05bff7c4 	movi	r22,-33
811032ec:	00bfffc4 	movi	r2,-1
811032f0:	8dac703a 	and	r22,r17,r22
811032f4:	20820026 	beq	r4,r2,81103af8 <___vfprintf_internal_r+0x1eb0>
811032f8:	008011c4 	movi	r2,71
811032fc:	b081f726 	beq	r22,r2,81103adc <___vfprintf_internal_r+0x1e94>
81103300:	d9003817 	ldw	r4,224(sp)
81103304:	90c04014 	ori	r3,r18,256
81103308:	d8c02b15 	stw	r3,172(sp)
8110330c:	20021516 	blt	r4,zero,81103b64 <___vfprintf_internal_r+0x1f1c>
81103310:	dcc03817 	ldw	r19,224(sp)
81103314:	d8002a05 	stb	zero,168(sp)
81103318:	00801984 	movi	r2,102
8110331c:	8881f926 	beq	r17,r2,81103b04 <___vfprintf_internal_r+0x1ebc>
81103320:	00801184 	movi	r2,70
81103324:	88821c26 	beq	r17,r2,81103b98 <___vfprintf_internal_r+0x1f50>
81103328:	00801144 	movi	r2,69
8110332c:	b081ef26 	beq	r22,r2,81103aec <___vfprintf_internal_r+0x1ea4>
81103330:	d8c02917 	ldw	r3,164(sp)
81103334:	d8802104 	addi	r2,sp,132
81103338:	d8800315 	stw	r2,12(sp)
8110333c:	d9403617 	ldw	r5,216(sp)
81103340:	d8802504 	addi	r2,sp,148
81103344:	d9002c17 	ldw	r4,176(sp)
81103348:	d8800215 	stw	r2,8(sp)
8110334c:	d8802604 	addi	r2,sp,152
81103350:	d8c00015 	stw	r3,0(sp)
81103354:	d8800115 	stw	r2,4(sp)
81103358:	01c00084 	movi	r7,2
8110335c:	980d883a 	mov	r6,r19
81103360:	d8c03c15 	stw	r3,240(sp)
81103364:	da003d15 	stw	r8,244(sp)
81103368:	1105bac0 	call	81105bac <_dtoa_r>
8110336c:	1021883a 	mov	r16,r2
81103370:	008019c4 	movi	r2,103
81103374:	d8c03c17 	ldw	r3,240(sp)
81103378:	da003d17 	ldw	r8,244(sp)
8110337c:	88817126 	beq	r17,r2,81103944 <___vfprintf_internal_r+0x1cfc>
81103380:	008011c4 	movi	r2,71
81103384:	88829226 	beq	r17,r2,81103dd0 <___vfprintf_internal_r+0x2188>
81103388:	80f9883a 	add	fp,r16,r3
8110338c:	d9003617 	ldw	r4,216(sp)
81103390:	000d883a 	mov	r6,zero
81103394:	000f883a 	mov	r7,zero
81103398:	980b883a 	mov	r5,r19
8110339c:	da003d15 	stw	r8,244(sp)
811033a0:	1114a800 	call	81114a80 <__eqdf2>
811033a4:	da003d17 	ldw	r8,244(sp)
811033a8:	10018d26 	beq	r2,zero,811039e0 <___vfprintf_internal_r+0x1d98>
811033ac:	d8802117 	ldw	r2,132(sp)
811033b0:	1700062e 	bgeu	r2,fp,811033cc <___vfprintf_internal_r+0x1784>
811033b4:	01000c04 	movi	r4,48
811033b8:	10c00044 	addi	r3,r2,1
811033bc:	d8c02115 	stw	r3,132(sp)
811033c0:	11000005 	stb	r4,0(r2)
811033c4:	d8802117 	ldw	r2,132(sp)
811033c8:	173ffb36 	bltu	r2,fp,811033b8 <__reset+0xfb0e33b8>
811033cc:	1405c83a 	sub	r2,r2,r16
811033d0:	d8803315 	stw	r2,204(sp)
811033d4:	008011c4 	movi	r2,71
811033d8:	b0817626 	beq	r22,r2,811039b4 <___vfprintf_internal_r+0x1d6c>
811033dc:	00801944 	movi	r2,101
811033e0:	1442810e 	bge	r2,r17,81103de8 <___vfprintf_internal_r+0x21a0>
811033e4:	d8c02617 	ldw	r3,152(sp)
811033e8:	00801984 	movi	r2,102
811033ec:	d8c03215 	stw	r3,200(sp)
811033f0:	8881fe26 	beq	r17,r2,81103bec <___vfprintf_internal_r+0x1fa4>
811033f4:	d8c03217 	ldw	r3,200(sp)
811033f8:	d9003317 	ldw	r4,204(sp)
811033fc:	1901dd16 	blt	r3,r4,81103b74 <___vfprintf_internal_r+0x1f2c>
81103400:	9480004c 	andi	r18,r18,1
81103404:	90022b1e 	bne	r18,zero,81103cb4 <___vfprintf_internal_r+0x206c>
81103408:	1805883a 	mov	r2,r3
8110340c:	18028016 	blt	r3,zero,81103e10 <___vfprintf_internal_r+0x21c8>
81103410:	d8c03217 	ldw	r3,200(sp)
81103414:	044019c4 	movi	r17,103
81103418:	d8c02e15 	stw	r3,184(sp)
8110341c:	df002a07 	ldb	fp,168(sp)
81103420:	e001531e 	bne	fp,zero,81103970 <___vfprintf_internal_r+0x1d28>
81103424:	df002783 	ldbu	fp,158(sp)
81103428:	d8802a15 	stw	r2,168(sp)
8110342c:	dc802b17 	ldw	r18,172(sp)
81103430:	d8002915 	stw	zero,164(sp)
81103434:	003bd106 	br	8110237c <__reset+0xfb0e237c>
81103438:	d8802d17 	ldw	r2,180(sp)
8110343c:	d8c02d17 	ldw	r3,180(sp)
81103440:	d9002d17 	ldw	r4,180(sp)
81103444:	10800017 	ldw	r2,0(r2)
81103448:	18c00117 	ldw	r3,4(r3)
8110344c:	21000204 	addi	r4,r4,8
81103450:	d8803615 	stw	r2,216(sp)
81103454:	d8c03815 	stw	r3,224(sp)
81103458:	d9002d15 	stw	r4,180(sp)
8110345c:	003b7506 	br	81102234 <__reset+0xfb0e2234>
81103460:	ac400007 	ldb	r17,0(r21)
81103464:	003a5906 	br	81101dcc <__reset+0xfb0e1dcc>
81103468:	9080100c 	andi	r2,r18,64
8110346c:	1000a826 	beq	r2,zero,81103710 <___vfprintf_internal_r+0x1ac8>
81103470:	d9002d17 	ldw	r4,180(sp)
81103474:	002d883a 	mov	r22,zero
81103478:	24c0000b 	ldhu	r19,0(r4)
8110347c:	21000104 	addi	r4,r4,4
81103480:	d9002d15 	stw	r4,180(sp)
81103484:	003ccb06 	br	811027b4 <__reset+0xfb0e27b4>
81103488:	d8c02d17 	ldw	r3,180(sp)
8110348c:	d9002917 	ldw	r4,164(sp)
81103490:	002d883a 	mov	r22,zero
81103494:	18800104 	addi	r2,r3,4
81103498:	1cc00017 	ldw	r19,0(r3)
8110349c:	203ebb0e 	bge	r4,zero,81102f8c <__reset+0xfb0e2f8c>
811034a0:	003ef106 	br	81103068 <__reset+0xfb0e3068>
811034a4:	9080040c 	andi	r2,r18,16
811034a8:	1000921e 	bne	r2,zero,811036f4 <___vfprintf_internal_r+0x1aac>
811034ac:	9480100c 	andi	r18,r18,64
811034b0:	90013926 	beq	r18,zero,81103998 <___vfprintf_internal_r+0x1d50>
811034b4:	d9002d17 	ldw	r4,180(sp)
811034b8:	d9402f17 	ldw	r5,188(sp)
811034bc:	20800017 	ldw	r2,0(r4)
811034c0:	21000104 	addi	r4,r4,4
811034c4:	d9002d15 	stw	r4,180(sp)
811034c8:	1140000d 	sth	r5,0(r2)
811034cc:	003a1606 	br	81101d28 <__reset+0xfb0e1d28>
811034d0:	9080100c 	andi	r2,r18,64
811034d4:	10008026 	beq	r2,zero,811036d8 <___vfprintf_internal_r+0x1a90>
811034d8:	d8c02d17 	ldw	r3,180(sp)
811034dc:	1cc0000f 	ldh	r19,0(r3)
811034e0:	18c00104 	addi	r3,r3,4
811034e4:	d8c02d15 	stw	r3,180(sp)
811034e8:	982dd7fa 	srai	r22,r19,31
811034ec:	b005883a 	mov	r2,r22
811034f0:	003b1f06 	br	81102170 <__reset+0xfb0e2170>
811034f4:	9080100c 	andi	r2,r18,64
811034f8:	d8002785 	stb	zero,158(sp)
811034fc:	10008a1e 	bne	r2,zero,81103728 <___vfprintf_internal_r+0x1ae0>
81103500:	d9402d17 	ldw	r5,180(sp)
81103504:	d8c02917 	ldw	r3,164(sp)
81103508:	002d883a 	mov	r22,zero
8110350c:	28800104 	addi	r2,r5,4
81103510:	2cc00017 	ldw	r19,0(r5)
81103514:	183e4b0e 	bge	r3,zero,81102e44 <__reset+0xfb0e2e44>
81103518:	9d86b03a 	or	r3,r19,r22
8110351c:	d8802d15 	stw	r2,180(sp)
81103520:	183e4c1e 	bne	r3,zero,81102e54 <__reset+0xfb0e2e54>
81103524:	0039883a 	mov	fp,zero
81103528:	0005883a 	mov	r2,zero
8110352c:	003d4006 	br	81102a30 <__reset+0xfb0e2a30>
81103530:	016044b4 	movhi	r5,33042
81103534:	2951d284 	addi	r5,r5,18250
81103538:	d9402b15 	stw	r5,172(sp)
8110353c:	d9402b17 	ldw	r5,172(sp)
81103540:	1c47883a 	add	r3,r3,r17
81103544:	10800044 	addi	r2,r2,1
81103548:	41400015 	stw	r5,0(r8)
8110354c:	44400115 	stw	r17,4(r8)
81103550:	d8c02015 	stw	r3,128(sp)
81103554:	d8801f15 	stw	r2,124(sp)
81103558:	010001c4 	movi	r4,7
8110355c:	20bec816 	blt	r4,r2,81103080 <__reset+0xfb0e3080>
81103560:	42000204 	addi	r8,r8,8
81103564:	003ecd06 	br	8110309c <__reset+0xfb0e309c>
81103568:	d9002917 	ldw	r4,164(sp)
8110356c:	d8002785 	stb	zero,158(sp)
81103570:	203d2d16 	blt	r4,zero,81102a28 <__reset+0xfb0e2a28>
81103574:	00bfdfc4 	movi	r2,-129
81103578:	90a4703a 	and	r18,r18,r2
8110357c:	003a9106 	br	81101fc4 <__reset+0xfb0e1fc4>
81103580:	012044b4 	movhi	r4,33042
81103584:	2111d284 	addi	r4,r4,18250
81103588:	d9002b15 	stw	r4,172(sp)
8110358c:	003c0c06 	br	811025c0 <__reset+0xfb0e25c0>
81103590:	d9002c17 	ldw	r4,176(sp)
81103594:	d9801e04 	addi	r6,sp,120
81103598:	b80b883a 	mov	r5,r23
8110359c:	110ed540 	call	8110ed54 <__sprint_r>
811035a0:	103aab1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
811035a4:	d8c02017 	ldw	r3,128(sp)
811035a8:	da000404 	addi	r8,sp,16
811035ac:	003d4106 	br	81102ab4 <__reset+0xfb0e2ab4>
811035b0:	d8801f17 	ldw	r2,124(sp)
811035b4:	016044b4 	movhi	r5,33042
811035b8:	01000044 	movi	r4,1
811035bc:	18c00044 	addi	r3,r3,1
811035c0:	10800044 	addi	r2,r2,1
811035c4:	2951d204 	addi	r5,r5,18248
811035c8:	41000115 	stw	r4,4(r8)
811035cc:	41400015 	stw	r5,0(r8)
811035d0:	d8c02015 	stw	r3,128(sp)
811035d4:	d8801f15 	stw	r2,124(sp)
811035d8:	010001c4 	movi	r4,7
811035dc:	20805c16 	blt	r4,r2,81103750 <___vfprintf_internal_r+0x1b08>
811035e0:	42000204 	addi	r8,r8,8
811035e4:	8800041e 	bne	r17,zero,811035f8 <___vfprintf_internal_r+0x19b0>
811035e8:	d8803317 	ldw	r2,204(sp)
811035ec:	1000021e 	bne	r2,zero,811035f8 <___vfprintf_internal_r+0x19b0>
811035f0:	9080004c 	andi	r2,r18,1
811035f4:	103c0926 	beq	r2,zero,8110261c <__reset+0xfb0e261c>
811035f8:	d9003717 	ldw	r4,220(sp)
811035fc:	d8801f17 	ldw	r2,124(sp)
81103600:	d9403417 	ldw	r5,208(sp)
81103604:	20c7883a 	add	r3,r4,r3
81103608:	10800044 	addi	r2,r2,1
8110360c:	41000115 	stw	r4,4(r8)
81103610:	41400015 	stw	r5,0(r8)
81103614:	d8c02015 	stw	r3,128(sp)
81103618:	d8801f15 	stw	r2,124(sp)
8110361c:	010001c4 	movi	r4,7
81103620:	20812116 	blt	r4,r2,81103aa8 <___vfprintf_internal_r+0x1e60>
81103624:	42000204 	addi	r8,r8,8
81103628:	0463c83a 	sub	r17,zero,r17
8110362c:	0440730e 	bge	zero,r17,811037fc <___vfprintf_internal_r+0x1bb4>
81103630:	05800404 	movi	r22,16
81103634:	b440860e 	bge	r22,r17,81103850 <___vfprintf_internal_r+0x1c08>
81103638:	016044b4 	movhi	r5,33042
8110363c:	2951d284 	addi	r5,r5,18250
81103640:	d9402b15 	stw	r5,172(sp)
81103644:	070001c4 	movi	fp,7
81103648:	dcc02c17 	ldw	r19,176(sp)
8110364c:	00000306 	br	8110365c <___vfprintf_internal_r+0x1a14>
81103650:	42000204 	addi	r8,r8,8
81103654:	8c7ffc04 	addi	r17,r17,-16
81103658:	b440800e 	bge	r22,r17,8110385c <___vfprintf_internal_r+0x1c14>
8110365c:	18c00404 	addi	r3,r3,16
81103660:	10800044 	addi	r2,r2,1
81103664:	45000015 	stw	r20,0(r8)
81103668:	45800115 	stw	r22,4(r8)
8110366c:	d8c02015 	stw	r3,128(sp)
81103670:	d8801f15 	stw	r2,124(sp)
81103674:	e0bff60e 	bge	fp,r2,81103650 <__reset+0xfb0e3650>
81103678:	d9801e04 	addi	r6,sp,120
8110367c:	b80b883a 	mov	r5,r23
81103680:	9809883a 	mov	r4,r19
81103684:	110ed540 	call	8110ed54 <__sprint_r>
81103688:	103a711e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
8110368c:	d8c02017 	ldw	r3,128(sp)
81103690:	d8801f17 	ldw	r2,124(sp)
81103694:	da000404 	addi	r8,sp,16
81103698:	003fee06 	br	81103654 <__reset+0xfb0e3654>
8110369c:	00bfffc4 	movi	r2,-1
811036a0:	003a6f06 	br	81102060 <__reset+0xfb0e2060>
811036a4:	008011c4 	movi	r2,71
811036a8:	1440b816 	blt	r2,r17,8110398c <___vfprintf_internal_r+0x1d44>
811036ac:	042044b4 	movhi	r16,33042
811036b0:	8411c404 	addi	r16,r16,18192
811036b4:	00c000c4 	movi	r3,3
811036b8:	00bfdfc4 	movi	r2,-129
811036bc:	d8c02a15 	stw	r3,168(sp)
811036c0:	90a4703a 	and	r18,r18,r2
811036c4:	df002783 	ldbu	fp,158(sp)
811036c8:	d8c02e15 	stw	r3,184(sp)
811036cc:	d8002915 	stw	zero,164(sp)
811036d0:	d8003215 	stw	zero,200(sp)
811036d4:	003b2906 	br	8110237c <__reset+0xfb0e237c>
811036d8:	d9002d17 	ldw	r4,180(sp)
811036dc:	24c00017 	ldw	r19,0(r4)
811036e0:	21000104 	addi	r4,r4,4
811036e4:	d9002d15 	stw	r4,180(sp)
811036e8:	982dd7fa 	srai	r22,r19,31
811036ec:	b005883a 	mov	r2,r22
811036f0:	003a9f06 	br	81102170 <__reset+0xfb0e2170>
811036f4:	d9402d17 	ldw	r5,180(sp)
811036f8:	d8c02f17 	ldw	r3,188(sp)
811036fc:	28800017 	ldw	r2,0(r5)
81103700:	29400104 	addi	r5,r5,4
81103704:	d9402d15 	stw	r5,180(sp)
81103708:	10c00015 	stw	r3,0(r2)
8110370c:	00398606 	br	81101d28 <__reset+0xfb0e1d28>
81103710:	d9402d17 	ldw	r5,180(sp)
81103714:	002d883a 	mov	r22,zero
81103718:	2cc00017 	ldw	r19,0(r5)
8110371c:	29400104 	addi	r5,r5,4
81103720:	d9402d15 	stw	r5,180(sp)
81103724:	003c2306 	br	811027b4 <__reset+0xfb0e27b4>
81103728:	d8c02d17 	ldw	r3,180(sp)
8110372c:	d9002917 	ldw	r4,164(sp)
81103730:	002d883a 	mov	r22,zero
81103734:	18800104 	addi	r2,r3,4
81103738:	1cc0000b 	ldhu	r19,0(r3)
8110373c:	203dc10e 	bge	r4,zero,81102e44 <__reset+0xfb0e2e44>
81103740:	003f7506 	br	81103518 <__reset+0xfb0e3518>
81103744:	042044b4 	movhi	r16,33042
81103748:	8411c204 	addi	r16,r16,18184
8110374c:	003acc06 	br	81102280 <__reset+0xfb0e2280>
81103750:	d9002c17 	ldw	r4,176(sp)
81103754:	d9801e04 	addi	r6,sp,120
81103758:	b80b883a 	mov	r5,r23
8110375c:	110ed540 	call	8110ed54 <__sprint_r>
81103760:	103a3b1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81103764:	dc402617 	ldw	r17,152(sp)
81103768:	d8c02017 	ldw	r3,128(sp)
8110376c:	da000404 	addi	r8,sp,16
81103770:	003f9c06 	br	811035e4 <__reset+0xfb0e35e4>
81103774:	ac400043 	ldbu	r17,1(r21)
81103778:	94800814 	ori	r18,r18,32
8110377c:	ad400044 	addi	r21,r21,1
81103780:	8c403fcc 	andi	r17,r17,255
81103784:	8c40201c 	xori	r17,r17,128
81103788:	8c7fe004 	addi	r17,r17,-128
8110378c:	00398f06 	br	81101dcc <__reset+0xfb0e1dcc>
81103790:	d8c02d15 	stw	r3,180(sp)
81103794:	0039883a 	mov	fp,zero
81103798:	003e3506 	br	81103070 <__reset+0xfb0e3070>
8110379c:	d9002c17 	ldw	r4,176(sp)
811037a0:	d9801e04 	addi	r6,sp,120
811037a4:	b80b883a 	mov	r5,r23
811037a8:	110ed540 	call	8110ed54 <__sprint_r>
811037ac:	103a281e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
811037b0:	d8c02017 	ldw	r3,128(sp)
811037b4:	da000404 	addi	r8,sp,16
811037b8:	003cd006 	br	81102afc <__reset+0xfb0e2afc>
811037bc:	8009883a 	mov	r4,r16
811037c0:	da003d15 	stw	r8,244(sp)
811037c4:	1101bb00 	call	81101bb0 <strlen>
811037c8:	d8802e15 	stw	r2,184(sp)
811037cc:	da003d17 	ldw	r8,244(sp)
811037d0:	103c340e 	bge	r2,zero,811028a4 <__reset+0xfb0e28a4>
811037d4:	0005883a 	mov	r2,zero
811037d8:	003c3206 	br	811028a4 <__reset+0xfb0e28a4>
811037dc:	d9002c17 	ldw	r4,176(sp)
811037e0:	d9801e04 	addi	r6,sp,120
811037e4:	b80b883a 	mov	r5,r23
811037e8:	110ed540 	call	8110ed54 <__sprint_r>
811037ec:	103a181e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
811037f0:	d8c02017 	ldw	r3,128(sp)
811037f4:	d8801f17 	ldw	r2,124(sp)
811037f8:	da000404 	addi	r8,sp,16
811037fc:	d9403317 	ldw	r5,204(sp)
81103800:	10800044 	addi	r2,r2,1
81103804:	44000015 	stw	r16,0(r8)
81103808:	28c7883a 	add	r3,r5,r3
8110380c:	003b7d06 	br	81102604 <__reset+0xfb0e2604>
81103810:	012044b4 	movhi	r4,33042
81103814:	2111d684 	addi	r4,r4,18266
81103818:	d9003515 	stw	r4,212(sp)
8110381c:	003b1406 	br	81102470 <__reset+0xfb0e2470>
81103820:	013fffc4 	movi	r4,-1
81103824:	003a3506 	br	811020fc <__reset+0xfb0e20fc>
81103828:	0023883a 	mov	r17,zero
8110382c:	003d9d06 	br	81102ea4 <__reset+0xfb0e2ea4>
81103830:	d9002c17 	ldw	r4,176(sp)
81103834:	d9801e04 	addi	r6,sp,120
81103838:	b80b883a 	mov	r5,r23
8110383c:	110ed540 	call	8110ed54 <__sprint_r>
81103840:	103a031e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81103844:	d8c02017 	ldw	r3,128(sp)
81103848:	da000404 	addi	r8,sp,16
8110384c:	003d9406 	br	81102ea0 <__reset+0xfb0e2ea0>
81103850:	012044b4 	movhi	r4,33042
81103854:	2111d284 	addi	r4,r4,18250
81103858:	d9002b15 	stw	r4,172(sp)
8110385c:	d9002b17 	ldw	r4,172(sp)
81103860:	1c47883a 	add	r3,r3,r17
81103864:	10800044 	addi	r2,r2,1
81103868:	41000015 	stw	r4,0(r8)
8110386c:	44400115 	stw	r17,4(r8)
81103870:	d8c02015 	stw	r3,128(sp)
81103874:	d8801f15 	stw	r2,124(sp)
81103878:	010001c4 	movi	r4,7
8110387c:	20bfd716 	blt	r4,r2,811037dc <__reset+0xfb0e37dc>
81103880:	42000204 	addi	r8,r8,8
81103884:	003fdd06 	br	811037fc <__reset+0xfb0e37fc>
81103888:	d9002c17 	ldw	r4,176(sp)
8110388c:	d9801e04 	addi	r6,sp,120
81103890:	b80b883a 	mov	r5,r23
81103894:	110ed540 	call	8110ed54 <__sprint_r>
81103898:	1039ed1e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
8110389c:	d8802617 	ldw	r2,152(sp)
811038a0:	d8c02017 	ldw	r3,128(sp)
811038a4:	da000404 	addi	r8,sp,16
811038a8:	003e1006 	br	811030ec <__reset+0xfb0e30ec>
811038ac:	00800044 	movi	r2,1
811038b0:	10803fcc 	andi	r2,r2,255
811038b4:	00c00044 	movi	r3,1
811038b8:	10fa3526 	beq	r2,r3,81102190 <__reset+0xfb0e2190>
811038bc:	00c00084 	movi	r3,2
811038c0:	10fbcb26 	beq	r2,r3,811027f0 <__reset+0xfb0e27f0>
811038c4:	003a8f06 	br	81102304 <__reset+0xfb0e2304>
811038c8:	012044b4 	movhi	r4,33042
811038cc:	2111d684 	addi	r4,r4,18266
811038d0:	d9003515 	stw	r4,212(sp)
811038d4:	003b7606 	br	811026b0 <__reset+0xfb0e26b0>
811038d8:	d8802917 	ldw	r2,164(sp)
811038dc:	00c00184 	movi	r3,6
811038e0:	1880012e 	bgeu	r3,r2,811038e8 <___vfprintf_internal_r+0x1ca0>
811038e4:	1805883a 	mov	r2,r3
811038e8:	d8802e15 	stw	r2,184(sp)
811038ec:	1000ef16 	blt	r2,zero,81103cac <___vfprintf_internal_r+0x2064>
811038f0:	042044b4 	movhi	r16,33042
811038f4:	d8802a15 	stw	r2,168(sp)
811038f8:	dcc02d15 	stw	r19,180(sp)
811038fc:	d8002915 	stw	zero,164(sp)
81103900:	d8003215 	stw	zero,200(sp)
81103904:	8411d004 	addi	r16,r16,18240
81103908:	0039883a 	mov	fp,zero
8110390c:	003aa206 	br	81102398 <__reset+0xfb0e2398>
81103910:	0021883a 	mov	r16,zero
81103914:	003e0706 	br	81103134 <__reset+0xfb0e3134>
81103918:	d9002c17 	ldw	r4,176(sp)
8110391c:	d9801e04 	addi	r6,sp,120
81103920:	b80b883a 	mov	r5,r23
81103924:	110ed540 	call	8110ed54 <__sprint_r>
81103928:	1039c91e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
8110392c:	d8802617 	ldw	r2,152(sp)
81103930:	d9403317 	ldw	r5,204(sp)
81103934:	d8c02017 	ldw	r3,128(sp)
81103938:	da000404 	addi	r8,sp,16
8110393c:	2885c83a 	sub	r2,r5,r2
81103940:	003dfb06 	br	81103130 <__reset+0xfb0e3130>
81103944:	9080004c 	andi	r2,r18,1
81103948:	103e8f1e 	bne	r2,zero,81103388 <__reset+0xfb0e3388>
8110394c:	d8802117 	ldw	r2,132(sp)
81103950:	003e9e06 	br	811033cc <__reset+0xfb0e33cc>
81103954:	1025883a 	mov	r18,r2
81103958:	0039883a 	mov	fp,zero
8110395c:	00800084 	movi	r2,2
81103960:	003fd306 	br	811038b0 <__reset+0xfb0e38b0>
81103964:	07000b44 	movi	fp,45
81103968:	df002785 	stb	fp,158(sp)
8110396c:	003a4006 	br	81102270 <__reset+0xfb0e2270>
81103970:	00c00b44 	movi	r3,45
81103974:	d8c02785 	stb	r3,158(sp)
81103978:	d8802a15 	stw	r2,168(sp)
8110397c:	dc802b17 	ldw	r18,172(sp)
81103980:	d8002915 	stw	zero,164(sp)
81103984:	07000b44 	movi	fp,45
81103988:	003a8006 	br	8110238c <__reset+0xfb0e238c>
8110398c:	042044b4 	movhi	r16,33042
81103990:	8411c504 	addi	r16,r16,18196
81103994:	003f4706 	br	811036b4 <__reset+0xfb0e36b4>
81103998:	d8c02d17 	ldw	r3,180(sp)
8110399c:	d9002f17 	ldw	r4,188(sp)
811039a0:	18800017 	ldw	r2,0(r3)
811039a4:	18c00104 	addi	r3,r3,4
811039a8:	d8c02d15 	stw	r3,180(sp)
811039ac:	11000015 	stw	r4,0(r2)
811039b0:	0038dd06 	br	81101d28 <__reset+0xfb0e1d28>
811039b4:	dd802617 	ldw	r22,152(sp)
811039b8:	00bfff44 	movi	r2,-3
811039bc:	b0801c16 	blt	r22,r2,81103a30 <___vfprintf_internal_r+0x1de8>
811039c0:	d9402917 	ldw	r5,164(sp)
811039c4:	2d801a16 	blt	r5,r22,81103a30 <___vfprintf_internal_r+0x1de8>
811039c8:	dd803215 	stw	r22,200(sp)
811039cc:	003e8906 	br	811033f4 <__reset+0xfb0e33f4>
811039d0:	012044b4 	movhi	r4,33042
811039d4:	2111d284 	addi	r4,r4,18250
811039d8:	d9002b15 	stw	r4,172(sp)
811039dc:	003c9106 	br	81102c24 <__reset+0xfb0e2c24>
811039e0:	e005883a 	mov	r2,fp
811039e4:	003e7906 	br	811033cc <__reset+0xfb0e33cc>
811039e8:	d9402917 	ldw	r5,164(sp)
811039ec:	df002783 	ldbu	fp,158(sp)
811039f0:	dcc02d15 	stw	r19,180(sp)
811039f4:	d9402a15 	stw	r5,168(sp)
811039f8:	d9402e15 	stw	r5,184(sp)
811039fc:	d8002915 	stw	zero,164(sp)
81103a00:	d8003215 	stw	zero,200(sp)
81103a04:	003a5d06 	br	8110237c <__reset+0xfb0e237c>
81103a08:	9080004c 	andi	r2,r18,1
81103a0c:	0039883a 	mov	fp,zero
81103a10:	10000426 	beq	r2,zero,81103a24 <___vfprintf_internal_r+0x1ddc>
81103a14:	00800c04 	movi	r2,48
81103a18:	dc001dc4 	addi	r16,sp,119
81103a1c:	d8801dc5 	stb	r2,119(sp)
81103a20:	003b8006 	br	81102824 <__reset+0xfb0e2824>
81103a24:	d8002e15 	stw	zero,184(sp)
81103a28:	dc001e04 	addi	r16,sp,120
81103a2c:	003a4d06 	br	81102364 <__reset+0xfb0e2364>
81103a30:	8c7fff84 	addi	r17,r17,-2
81103a34:	b5bfffc4 	addi	r22,r22,-1
81103a38:	dd802615 	stw	r22,152(sp)
81103a3c:	dc4022c5 	stb	r17,139(sp)
81103a40:	b000bf16 	blt	r22,zero,81103d40 <___vfprintf_internal_r+0x20f8>
81103a44:	00800ac4 	movi	r2,43
81103a48:	d8802305 	stb	r2,140(sp)
81103a4c:	00800244 	movi	r2,9
81103a50:	15807016 	blt	r2,r22,81103c14 <___vfprintf_internal_r+0x1fcc>
81103a54:	00800c04 	movi	r2,48
81103a58:	b5800c04 	addi	r22,r22,48
81103a5c:	d8802345 	stb	r2,141(sp)
81103a60:	dd802385 	stb	r22,142(sp)
81103a64:	d88023c4 	addi	r2,sp,143
81103a68:	df0022c4 	addi	fp,sp,139
81103a6c:	d8c03317 	ldw	r3,204(sp)
81103a70:	1739c83a 	sub	fp,r2,fp
81103a74:	d9003317 	ldw	r4,204(sp)
81103a78:	e0c7883a 	add	r3,fp,r3
81103a7c:	df003a15 	stw	fp,232(sp)
81103a80:	d8c02e15 	stw	r3,184(sp)
81103a84:	00800044 	movi	r2,1
81103a88:	1100b30e 	bge	r2,r4,81103d58 <___vfprintf_internal_r+0x2110>
81103a8c:	d8c02e17 	ldw	r3,184(sp)
81103a90:	18c00044 	addi	r3,r3,1
81103a94:	d8c02e15 	stw	r3,184(sp)
81103a98:	1805883a 	mov	r2,r3
81103a9c:	1800ac16 	blt	r3,zero,81103d50 <___vfprintf_internal_r+0x2108>
81103aa0:	d8003215 	stw	zero,200(sp)
81103aa4:	003e5d06 	br	8110341c <__reset+0xfb0e341c>
81103aa8:	d9002c17 	ldw	r4,176(sp)
81103aac:	d9801e04 	addi	r6,sp,120
81103ab0:	b80b883a 	mov	r5,r23
81103ab4:	110ed540 	call	8110ed54 <__sprint_r>
81103ab8:	1039651e 	bne	r2,zero,81102050 <__reset+0xfb0e2050>
81103abc:	dc402617 	ldw	r17,152(sp)
81103ac0:	d8c02017 	ldw	r3,128(sp)
81103ac4:	d8801f17 	ldw	r2,124(sp)
81103ac8:	da000404 	addi	r8,sp,16
81103acc:	003ed606 	br	81103628 <__reset+0xfb0e3628>
81103ad0:	582b883a 	mov	r21,r11
81103ad4:	d8002915 	stw	zero,164(sp)
81103ad8:	0038bd06 	br	81101dd0 <__reset+0xfb0e1dd0>
81103adc:	d8802917 	ldw	r2,164(sp)
81103ae0:	103e071e 	bne	r2,zero,81103300 <__reset+0xfb0e3300>
81103ae4:	dc002915 	stw	r16,164(sp)
81103ae8:	003e0506 	br	81103300 <__reset+0xfb0e3300>
81103aec:	d9002917 	ldw	r4,164(sp)
81103af0:	20c00044 	addi	r3,r4,1
81103af4:	003e0f06 	br	81103334 <__reset+0xfb0e3334>
81103af8:	01400184 	movi	r5,6
81103afc:	d9402915 	stw	r5,164(sp)
81103b00:	003dff06 	br	81103300 <__reset+0xfb0e3300>
81103b04:	d8802104 	addi	r2,sp,132
81103b08:	d8800315 	stw	r2,12(sp)
81103b0c:	d8802504 	addi	r2,sp,148
81103b10:	d8800215 	stw	r2,8(sp)
81103b14:	d8802604 	addi	r2,sp,152
81103b18:	d8800115 	stw	r2,4(sp)
81103b1c:	d8802917 	ldw	r2,164(sp)
81103b20:	d9403617 	ldw	r5,216(sp)
81103b24:	d9002c17 	ldw	r4,176(sp)
81103b28:	d8800015 	stw	r2,0(sp)
81103b2c:	01c000c4 	movi	r7,3
81103b30:	980d883a 	mov	r6,r19
81103b34:	da003d15 	stw	r8,244(sp)
81103b38:	1105bac0 	call	81105bac <_dtoa_r>
81103b3c:	d8c02917 	ldw	r3,164(sp)
81103b40:	da003d17 	ldw	r8,244(sp)
81103b44:	1021883a 	mov	r16,r2
81103b48:	10f9883a 	add	fp,r2,r3
81103b4c:	81000007 	ldb	r4,0(r16)
81103b50:	00800c04 	movi	r2,48
81103b54:	20805e26 	beq	r4,r2,81103cd0 <___vfprintf_internal_r+0x2088>
81103b58:	d8c02617 	ldw	r3,152(sp)
81103b5c:	e0f9883a 	add	fp,fp,r3
81103b60:	003e0a06 	br	8110338c <__reset+0xfb0e338c>
81103b64:	00c00b44 	movi	r3,45
81103b68:	24e0003c 	xorhi	r19,r4,32768
81103b6c:	d8c02a05 	stb	r3,168(sp)
81103b70:	003de906 	br	81103318 <__reset+0xfb0e3318>
81103b74:	d8c03217 	ldw	r3,200(sp)
81103b78:	00c07a0e 	bge	zero,r3,81103d64 <___vfprintf_internal_r+0x211c>
81103b7c:	00800044 	movi	r2,1
81103b80:	d9003317 	ldw	r4,204(sp)
81103b84:	1105883a 	add	r2,r2,r4
81103b88:	d8802e15 	stw	r2,184(sp)
81103b8c:	10004e16 	blt	r2,zero,81103cc8 <___vfprintf_internal_r+0x2080>
81103b90:	044019c4 	movi	r17,103
81103b94:	003e2106 	br	8110341c <__reset+0xfb0e341c>
81103b98:	d9002917 	ldw	r4,164(sp)
81103b9c:	d8802104 	addi	r2,sp,132
81103ba0:	d8800315 	stw	r2,12(sp)
81103ba4:	d9000015 	stw	r4,0(sp)
81103ba8:	d8802504 	addi	r2,sp,148
81103bac:	d9403617 	ldw	r5,216(sp)
81103bb0:	d9002c17 	ldw	r4,176(sp)
81103bb4:	d8800215 	stw	r2,8(sp)
81103bb8:	d8802604 	addi	r2,sp,152
81103bbc:	d8800115 	stw	r2,4(sp)
81103bc0:	01c000c4 	movi	r7,3
81103bc4:	980d883a 	mov	r6,r19
81103bc8:	da003d15 	stw	r8,244(sp)
81103bcc:	1105bac0 	call	81105bac <_dtoa_r>
81103bd0:	d8c02917 	ldw	r3,164(sp)
81103bd4:	da003d17 	ldw	r8,244(sp)
81103bd8:	1021883a 	mov	r16,r2
81103bdc:	00801184 	movi	r2,70
81103be0:	80f9883a 	add	fp,r16,r3
81103be4:	88bfd926 	beq	r17,r2,81103b4c <__reset+0xfb0e3b4c>
81103be8:	003de806 	br	8110338c <__reset+0xfb0e338c>
81103bec:	d9002917 	ldw	r4,164(sp)
81103bf0:	00c04d0e 	bge	zero,r3,81103d28 <___vfprintf_internal_r+0x20e0>
81103bf4:	2000441e 	bne	r4,zero,81103d08 <___vfprintf_internal_r+0x20c0>
81103bf8:	9480004c 	andi	r18,r18,1
81103bfc:	9000421e 	bne	r18,zero,81103d08 <___vfprintf_internal_r+0x20c0>
81103c00:	1805883a 	mov	r2,r3
81103c04:	18007016 	blt	r3,zero,81103dc8 <___vfprintf_internal_r+0x2180>
81103c08:	d8c03217 	ldw	r3,200(sp)
81103c0c:	d8c02e15 	stw	r3,184(sp)
81103c10:	003e0206 	br	8110341c <__reset+0xfb0e341c>
81103c14:	df0022c4 	addi	fp,sp,139
81103c18:	dc002915 	stw	r16,164(sp)
81103c1c:	4027883a 	mov	r19,r8
81103c20:	e021883a 	mov	r16,fp
81103c24:	b009883a 	mov	r4,r22
81103c28:	01400284 	movi	r5,10
81103c2c:	11135c00 	call	811135c0 <__modsi3>
81103c30:	10800c04 	addi	r2,r2,48
81103c34:	843fffc4 	addi	r16,r16,-1
81103c38:	b009883a 	mov	r4,r22
81103c3c:	01400284 	movi	r5,10
81103c40:	80800005 	stb	r2,0(r16)
81103c44:	111353c0 	call	8111353c <__divsi3>
81103c48:	102d883a 	mov	r22,r2
81103c4c:	00800244 	movi	r2,9
81103c50:	15bff416 	blt	r2,r22,81103c24 <__reset+0xfb0e3c24>
81103c54:	9811883a 	mov	r8,r19
81103c58:	b0800c04 	addi	r2,r22,48
81103c5c:	8027883a 	mov	r19,r16
81103c60:	997fffc4 	addi	r5,r19,-1
81103c64:	98bfffc5 	stb	r2,-1(r19)
81103c68:	dc002917 	ldw	r16,164(sp)
81103c6c:	2f006a2e 	bgeu	r5,fp,81103e18 <___vfprintf_internal_r+0x21d0>
81103c70:	d9c02384 	addi	r7,sp,142
81103c74:	3ccfc83a 	sub	r7,r7,r19
81103c78:	d9002344 	addi	r4,sp,141
81103c7c:	e1cf883a 	add	r7,fp,r7
81103c80:	00000106 	br	81103c88 <___vfprintf_internal_r+0x2040>
81103c84:	28800003 	ldbu	r2,0(r5)
81103c88:	20800005 	stb	r2,0(r4)
81103c8c:	21000044 	addi	r4,r4,1
81103c90:	29400044 	addi	r5,r5,1
81103c94:	393ffb1e 	bne	r7,r4,81103c84 <__reset+0xfb0e3c84>
81103c98:	d8802304 	addi	r2,sp,140
81103c9c:	14c5c83a 	sub	r2,r2,r19
81103ca0:	d8c02344 	addi	r3,sp,141
81103ca4:	1885883a 	add	r2,r3,r2
81103ca8:	003f7006 	br	81103a6c <__reset+0xfb0e3a6c>
81103cac:	0005883a 	mov	r2,zero
81103cb0:	003f0f06 	br	811038f0 <__reset+0xfb0e38f0>
81103cb4:	d8c03217 	ldw	r3,200(sp)
81103cb8:	18c00044 	addi	r3,r3,1
81103cbc:	d8c02e15 	stw	r3,184(sp)
81103cc0:	1805883a 	mov	r2,r3
81103cc4:	183fb20e 	bge	r3,zero,81103b90 <__reset+0xfb0e3b90>
81103cc8:	0005883a 	mov	r2,zero
81103ccc:	003fb006 	br	81103b90 <__reset+0xfb0e3b90>
81103cd0:	d9003617 	ldw	r4,216(sp)
81103cd4:	000d883a 	mov	r6,zero
81103cd8:	000f883a 	mov	r7,zero
81103cdc:	980b883a 	mov	r5,r19
81103ce0:	d8c03c15 	stw	r3,240(sp)
81103ce4:	da003d15 	stw	r8,244(sp)
81103ce8:	1114a800 	call	81114a80 <__eqdf2>
81103cec:	d8c03c17 	ldw	r3,240(sp)
81103cf0:	da003d17 	ldw	r8,244(sp)
81103cf4:	103f9826 	beq	r2,zero,81103b58 <__reset+0xfb0e3b58>
81103cf8:	00800044 	movi	r2,1
81103cfc:	10c7c83a 	sub	r3,r2,r3
81103d00:	d8c02615 	stw	r3,152(sp)
81103d04:	003f9506 	br	81103b5c <__reset+0xfb0e3b5c>
81103d08:	d9002917 	ldw	r4,164(sp)
81103d0c:	d8c03217 	ldw	r3,200(sp)
81103d10:	20800044 	addi	r2,r4,1
81103d14:	1885883a 	add	r2,r3,r2
81103d18:	d8802e15 	stw	r2,184(sp)
81103d1c:	103dbf0e 	bge	r2,zero,8110341c <__reset+0xfb0e341c>
81103d20:	0005883a 	mov	r2,zero
81103d24:	003dbd06 	br	8110341c <__reset+0xfb0e341c>
81103d28:	2000211e 	bne	r4,zero,81103db0 <___vfprintf_internal_r+0x2168>
81103d2c:	9480004c 	andi	r18,r18,1
81103d30:	90001f1e 	bne	r18,zero,81103db0 <___vfprintf_internal_r+0x2168>
81103d34:	00800044 	movi	r2,1
81103d38:	d8802e15 	stw	r2,184(sp)
81103d3c:	003db706 	br	8110341c <__reset+0xfb0e341c>
81103d40:	00800b44 	movi	r2,45
81103d44:	05adc83a 	sub	r22,zero,r22
81103d48:	d8802305 	stb	r2,140(sp)
81103d4c:	003f3f06 	br	81103a4c <__reset+0xfb0e3a4c>
81103d50:	0005883a 	mov	r2,zero
81103d54:	003f5206 	br	81103aa0 <__reset+0xfb0e3aa0>
81103d58:	90a4703a 	and	r18,r18,r2
81103d5c:	903f4e26 	beq	r18,zero,81103a98 <__reset+0xfb0e3a98>
81103d60:	003f4a06 	br	81103a8c <__reset+0xfb0e3a8c>
81103d64:	00800084 	movi	r2,2
81103d68:	10c5c83a 	sub	r2,r2,r3
81103d6c:	003f8406 	br	81103b80 <__reset+0xfb0e3b80>
81103d70:	d8802d17 	ldw	r2,180(sp)
81103d74:	d9002d17 	ldw	r4,180(sp)
81103d78:	ac400043 	ldbu	r17,1(r21)
81103d7c:	10800017 	ldw	r2,0(r2)
81103d80:	582b883a 	mov	r21,r11
81103d84:	d8802915 	stw	r2,164(sp)
81103d88:	20800104 	addi	r2,r4,4
81103d8c:	d9002917 	ldw	r4,164(sp)
81103d90:	d8802d15 	stw	r2,180(sp)
81103d94:	203e7a0e 	bge	r4,zero,81103780 <__reset+0xfb0e3780>
81103d98:	8c403fcc 	andi	r17,r17,255
81103d9c:	00bfffc4 	movi	r2,-1
81103da0:	8c40201c 	xori	r17,r17,128
81103da4:	d8802915 	stw	r2,164(sp)
81103da8:	8c7fe004 	addi	r17,r17,-128
81103dac:	00380706 	br	81101dcc <__reset+0xfb0e1dcc>
81103db0:	d8c02917 	ldw	r3,164(sp)
81103db4:	18c00084 	addi	r3,r3,2
81103db8:	d8c02e15 	stw	r3,184(sp)
81103dbc:	1805883a 	mov	r2,r3
81103dc0:	183d960e 	bge	r3,zero,8110341c <__reset+0xfb0e341c>
81103dc4:	003fd606 	br	81103d20 <__reset+0xfb0e3d20>
81103dc8:	0005883a 	mov	r2,zero
81103dcc:	003f8e06 	br	81103c08 <__reset+0xfb0e3c08>
81103dd0:	9080004c 	andi	r2,r18,1
81103dd4:	103f811e 	bne	r2,zero,81103bdc <__reset+0xfb0e3bdc>
81103dd8:	d8802117 	ldw	r2,132(sp)
81103ddc:	1405c83a 	sub	r2,r2,r16
81103de0:	d8803315 	stw	r2,204(sp)
81103de4:	b47ef326 	beq	r22,r17,811039b4 <__reset+0xfb0e39b4>
81103de8:	dd802617 	ldw	r22,152(sp)
81103dec:	003f1106 	br	81103a34 <__reset+0xfb0e3a34>
81103df0:	d9c02785 	stb	r7,158(sp)
81103df4:	00390406 	br	81102208 <__reset+0xfb0e2208>
81103df8:	d9c02785 	stb	r7,158(sp)
81103dfc:	0038d306 	br	8110214c <__reset+0xfb0e214c>
81103e00:	d9c02785 	stb	r7,158(sp)
81103e04:	003a6106 	br	8110278c <__reset+0xfb0e278c>
81103e08:	d9c02785 	stb	r7,158(sp)
81103e0c:	003af806 	br	811029f0 <__reset+0xfb0e29f0>
81103e10:	0005883a 	mov	r2,zero
81103e14:	003d7e06 	br	81103410 <__reset+0xfb0e3410>
81103e18:	d8802344 	addi	r2,sp,141
81103e1c:	003f1306 	br	81103a6c <__reset+0xfb0e3a6c>
81103e20:	d9c02785 	stb	r7,158(sp)
81103e24:	00392306 	br	811022b4 <__reset+0xfb0e22b4>
81103e28:	d9c02785 	stb	r7,158(sp)
81103e2c:	003aa906 	br	811028d4 <__reset+0xfb0e28d4>
81103e30:	d9c02785 	stb	r7,158(sp)
81103e34:	003a3d06 	br	8110272c <__reset+0xfb0e272c>
81103e38:	d9c02785 	stb	r7,158(sp)
81103e3c:	003aca06 	br	81102968 <__reset+0xfb0e2968>

81103e40 <__vfprintf_internal>:
81103e40:	00a044b4 	movhi	r2,33042
81103e44:	109b9c04 	addi	r2,r2,28272
81103e48:	300f883a 	mov	r7,r6
81103e4c:	280d883a 	mov	r6,r5
81103e50:	200b883a 	mov	r5,r4
81103e54:	11000017 	ldw	r4,0(r2)
81103e58:	1101c481 	jmpi	81101c48 <___vfprintf_internal_r>

81103e5c <__sbprintf>:
81103e5c:	2880030b 	ldhu	r2,12(r5)
81103e60:	2ac01917 	ldw	r11,100(r5)
81103e64:	2a80038b 	ldhu	r10,14(r5)
81103e68:	2a400717 	ldw	r9,28(r5)
81103e6c:	2a000917 	ldw	r8,36(r5)
81103e70:	defee204 	addi	sp,sp,-1144
81103e74:	00c10004 	movi	r3,1024
81103e78:	dc011a15 	stw	r16,1128(sp)
81103e7c:	10bfff4c 	andi	r2,r2,65533
81103e80:	2821883a 	mov	r16,r5
81103e84:	d8cb883a 	add	r5,sp,r3
81103e88:	dc811c15 	stw	r18,1136(sp)
81103e8c:	dc411b15 	stw	r17,1132(sp)
81103e90:	dfc11d15 	stw	ra,1140(sp)
81103e94:	2025883a 	mov	r18,r4
81103e98:	d881030d 	sth	r2,1036(sp)
81103e9c:	dac11915 	stw	r11,1124(sp)
81103ea0:	da81038d 	sth	r10,1038(sp)
81103ea4:	da410715 	stw	r9,1052(sp)
81103ea8:	da010915 	stw	r8,1060(sp)
81103eac:	dec10015 	stw	sp,1024(sp)
81103eb0:	dec10415 	stw	sp,1040(sp)
81103eb4:	d8c10215 	stw	r3,1032(sp)
81103eb8:	d8c10515 	stw	r3,1044(sp)
81103ebc:	d8010615 	stw	zero,1048(sp)
81103ec0:	1101c480 	call	81101c48 <___vfprintf_internal_r>
81103ec4:	1023883a 	mov	r17,r2
81103ec8:	10000416 	blt	r2,zero,81103edc <__sbprintf+0x80>
81103ecc:	d9410004 	addi	r5,sp,1024
81103ed0:	9009883a 	mov	r4,r18
81103ed4:	11074500 	call	81107450 <_fflush_r>
81103ed8:	10000d1e 	bne	r2,zero,81103f10 <__sbprintf+0xb4>
81103edc:	d881030b 	ldhu	r2,1036(sp)
81103ee0:	1080100c 	andi	r2,r2,64
81103ee4:	10000326 	beq	r2,zero,81103ef4 <__sbprintf+0x98>
81103ee8:	8080030b 	ldhu	r2,12(r16)
81103eec:	10801014 	ori	r2,r2,64
81103ef0:	8080030d 	sth	r2,12(r16)
81103ef4:	8805883a 	mov	r2,r17
81103ef8:	dfc11d17 	ldw	ra,1140(sp)
81103efc:	dc811c17 	ldw	r18,1136(sp)
81103f00:	dc411b17 	ldw	r17,1132(sp)
81103f04:	dc011a17 	ldw	r16,1128(sp)
81103f08:	dec11e04 	addi	sp,sp,1144
81103f0c:	f800283a 	ret
81103f10:	047fffc4 	movi	r17,-1
81103f14:	003ff106 	br	81103edc <__reset+0xfb0e3edc>

81103f18 <__svfscanf_r>:
81103f18:	2880030b 	ldhu	r2,12(r5)
81103f1c:	deff4b04 	addi	sp,sp,-724
81103f20:	df00b315 	stw	fp,716(sp)
81103f24:	dd80b115 	stw	r22,708(sp)
81103f28:	dfc0b415 	stw	ra,720(sp)
81103f2c:	ddc0b215 	stw	r23,712(sp)
81103f30:	dd40b015 	stw	r21,704(sp)
81103f34:	dd00af15 	stw	r20,700(sp)
81103f38:	dcc0ae15 	stw	r19,696(sp)
81103f3c:	dc80ad15 	stw	r18,692(sp)
81103f40:	dc40ac15 	stw	r17,688(sp)
81103f44:	dc00ab15 	stw	r16,684(sp)
81103f48:	10c8000c 	andi	r3,r2,8192
81103f4c:	d9c09c15 	stw	r7,624(sp)
81103f50:	2839883a 	mov	fp,r5
81103f54:	202d883a 	mov	r22,r4
81103f58:	1800061e 	bne	r3,zero,81103f74 <__svfscanf_r+0x5c>
81103f5c:	29001917 	ldw	r4,100(r5)
81103f60:	00f7ffc4 	movi	r3,-8193
81103f64:	10880014 	ori	r2,r2,8192
81103f68:	20c6703a 	and	r3,r4,r3
81103f6c:	2880030d 	sth	r2,12(r5)
81103f70:	28c01915 	stw	r3,100(r5)
81103f74:	30800003 	ldbu	r2,0(r6)
81103f78:	0021883a 	mov	r16,zero
81103f7c:	05e044b4 	movhi	r23,33042
81103f80:	d800a115 	stw	zero,644(sp)
81103f84:	d8009e15 	stw	zero,632(sp)
81103f88:	d800a015 	stw	zero,640(sp)
81103f8c:	d8809b15 	stw	r2,620(sp)
81103f90:	bddb9f04 	addi	r23,r23,28284
81103f94:	8025883a 	mov	r18,r16
81103f98:	35000044 	addi	r20,r6,1
81103f9c:	10001e26 	beq	r2,zero,81104018 <__svfscanf_r+0x100>
81103fa0:	b9c00017 	ldw	r7,0(r23)
81103fa4:	3887883a 	add	r3,r7,r2
81103fa8:	18c00043 	ldbu	r3,1(r3)
81103fac:	18c0020c 	andi	r3,r3,8
81103fb0:	18001b26 	beq	r3,zero,81104020 <__svfscanf_r+0x108>
81103fb4:	e0800117 	ldw	r2,4(fp)
81103fb8:	00800e0e 	bge	zero,r2,81103ff4 <__svfscanf_r+0xdc>
81103fbc:	e0c00017 	ldw	r3,0(fp)
81103fc0:	b9000017 	ldw	r4,0(r23)
81103fc4:	18800003 	ldbu	r2,0(r3)
81103fc8:	2085883a 	add	r2,r4,r2
81103fcc:	10800043 	ldbu	r2,1(r2)
81103fd0:	1080020c 	andi	r2,r2,8
81103fd4:	10000b26 	beq	r2,zero,81104004 <__svfscanf_r+0xec>
81103fd8:	e0800117 	ldw	r2,4(fp)
81103fdc:	18c00044 	addi	r3,r3,1
81103fe0:	e0c00015 	stw	r3,0(fp)
81103fe4:	10bfffc4 	addi	r2,r2,-1
81103fe8:	e0800115 	stw	r2,4(fp)
81103fec:	94800044 	addi	r18,r18,1
81103ff0:	00bff216 	blt	zero,r2,81103fbc <__reset+0xfb0e3fbc>
81103ff4:	e00b883a 	mov	r5,fp
81103ff8:	b009883a 	mov	r4,r22
81103ffc:	11017e00 	call	811017e0 <__srefill_r>
81104000:	103fee26 	beq	r2,zero,81103fbc <__reset+0xfb0e3fbc>
81104004:	a00d883a 	mov	r6,r20
81104008:	30800003 	ldbu	r2,0(r6)
8110400c:	35000044 	addi	r20,r6,1
81104010:	d8809b15 	stw	r2,620(sp)
81104014:	103fe21e 	bne	r2,zero,81103fa0 <__reset+0xfb0e3fa0>
81104018:	d880a017 	ldw	r2,640(sp)
8110401c:	00009906 	br	81104284 <__svfscanf_r+0x36c>
81104020:	00c00944 	movi	r3,37
81104024:	10c0881e 	bne	r2,r3,81104248 <__svfscanf_r+0x330>
81104028:	30c00043 	ldbu	r3,1(r6)
8110402c:	0023883a 	mov	r17,zero
81104030:	0027883a 	mov	r19,zero
81104034:	01001e04 	movi	r4,120
81104038:	01401b04 	movi	r5,108
8110403c:	a1800044 	addi	r6,r20,1
81104040:	20c0a236 	bltu	r4,r3,811042cc <__svfscanf_r+0x3b4>
81104044:	180490ba 	slli	r2,r3,2
81104048:	02204434 	movhi	r8,33040
8110404c:	42101704 	addi	r8,r8,16476
81104050:	1205883a 	add	r2,r2,r8
81104054:	10800017 	ldw	r2,0(r2)
81104058:	1000683a 	jmp	r2
8110405c:	81104280 	call	88110428 <__reset+0x20f0428>
81104060:	811042cc 	andi	r4,r16,16651
81104064:	811042cc 	andi	r4,r16,16651
81104068:	811042cc 	andi	r4,r16,16651
8110406c:	811042cc 	andi	r4,r16,16651
81104070:	811042cc 	andi	r4,r16,16651
81104074:	811042cc 	andi	r4,r16,16651
81104078:	811042cc 	andi	r4,r16,16651
8110407c:	811042cc 	andi	r4,r16,16651
81104080:	811042cc 	andi	r4,r16,16651
81104084:	811042cc 	andi	r4,r16,16651
81104088:	811042cc 	andi	r4,r16,16651
8110408c:	811042cc 	andi	r4,r16,16651
81104090:	811042cc 	andi	r4,r16,16651
81104094:	811042cc 	andi	r4,r16,16651
81104098:	811042cc 	andi	r4,r16,16651
8110409c:	811042cc 	andi	r4,r16,16651
811040a0:	811042cc 	andi	r4,r16,16651
811040a4:	811042cc 	andi	r4,r16,16651
811040a8:	811042cc 	andi	r4,r16,16651
811040ac:	811042cc 	andi	r4,r16,16651
811040b0:	811042cc 	andi	r4,r16,16651
811040b4:	811042cc 	andi	r4,r16,16651
811040b8:	811042cc 	andi	r4,r16,16651
811040bc:	811042cc 	andi	r4,r16,16651
811040c0:	811042cc 	andi	r4,r16,16651
811040c4:	811042cc 	andi	r4,r16,16651
811040c8:	811042cc 	andi	r4,r16,16651
811040cc:	811042cc 	andi	r4,r16,16651
811040d0:	811042cc 	andi	r4,r16,16651
811040d4:	811042cc 	andi	r4,r16,16651
811040d8:	811042cc 	andi	r4,r16,16651
811040dc:	811042cc 	andi	r4,r16,16651
811040e0:	811042cc 	andi	r4,r16,16651
811040e4:	811042cc 	andi	r4,r16,16651
811040e8:	811042cc 	andi	r4,r16,16651
811040ec:	811042cc 	andi	r4,r16,16651
811040f0:	81104240 	call	88110424 <__reset+0x20f0424>
811040f4:	811042cc 	andi	r4,r16,16651
811040f8:	811042cc 	andi	r4,r16,16651
811040fc:	811042cc 	andi	r4,r16,16651
81104100:	811042cc 	andi	r4,r16,16651
81104104:	811042b4 	orhi	r4,r16,16650
81104108:	811042cc 	andi	r4,r16,16651
8110410c:	811042cc 	andi	r4,r16,16651
81104110:	811042cc 	andi	r4,r16,16651
81104114:	811042cc 	andi	r4,r16,16651
81104118:	811042cc 	andi	r4,r16,16651
8110411c:	811043e8 	cmpgeui	r4,r16,16655
81104120:	811043e8 	cmpgeui	r4,r16,16655
81104124:	811043e8 	cmpgeui	r4,r16,16655
81104128:	811043e8 	cmpgeui	r4,r16,16655
8110412c:	811043e8 	cmpgeui	r4,r16,16655
81104130:	811043e8 	cmpgeui	r4,r16,16655
81104134:	811043e8 	cmpgeui	r4,r16,16655
81104138:	811043e8 	cmpgeui	r4,r16,16655
8110413c:	811043e8 	cmpgeui	r4,r16,16655
81104140:	811043e8 	cmpgeui	r4,r16,16655
81104144:	811042cc 	andi	r4,r16,16651
81104148:	811042cc 	andi	r4,r16,16651
8110414c:	811042cc 	andi	r4,r16,16651
81104150:	811042cc 	andi	r4,r16,16651
81104154:	811042cc 	andi	r4,r16,16651
81104158:	811042cc 	andi	r4,r16,16651
8110415c:	811042cc 	andi	r4,r16,16651
81104160:	811042cc 	andi	r4,r16,16651
81104164:	811042cc 	andi	r4,r16,16651
81104168:	811042cc 	andi	r4,r16,16651
8110416c:	811043bc 	xorhi	r4,r16,16654
81104170:	8110446c 	andhi	r4,r16,16657
81104174:	811042cc 	andi	r4,r16,16651
81104178:	8110446c 	andhi	r4,r16,16657
8110417c:	811042cc 	andi	r4,r16,16651
81104180:	811042cc 	andi	r4,r16,16651
81104184:	811042cc 	andi	r4,r16,16651
81104188:	811042cc 	andi	r4,r16,16651
8110418c:	81104458 	cmpnei	r4,r16,16657
81104190:	811042cc 	andi	r4,r16,16651
81104194:	811042cc 	andi	r4,r16,16651
81104198:	8110442c 	andhi	r4,r16,16656
8110419c:	811042cc 	andi	r4,r16,16651
811041a0:	811042cc 	andi	r4,r16,16651
811041a4:	811042cc 	andi	r4,r16,16651
811041a8:	811042cc 	andi	r4,r16,16651
811041ac:	811042cc 	andi	r4,r16,16651
811041b0:	811042cc 	andi	r4,r16,16651
811041b4:	811042cc 	andi	r4,r16,16651
811041b8:	811042cc 	andi	r4,r16,16651
811041bc:	81104404 	addi	r4,r16,16656
811041c0:	811042cc 	andi	r4,r16,16651
811041c4:	811042cc 	andi	r4,r16,16651
811041c8:	811045a0 	cmpeqi	r4,r16,16662
811041cc:	811042cc 	andi	r4,r16,16651
811041d0:	811042cc 	andi	r4,r16,16651
811041d4:	811042cc 	andi	r4,r16,16651
811041d8:	811042cc 	andi	r4,r16,16651
811041dc:	811042cc 	andi	r4,r16,16651
811041e0:	811042cc 	andi	r4,r16,16651
811041e4:	811042cc 	andi	r4,r16,16651
811041e8:	81104524 	muli	r4,r16,16660
811041ec:	811044fc 	xorhi	r4,r16,16659
811041f0:	8110446c 	andhi	r4,r16,16657
811041f4:	8110446c 	andhi	r4,r16,16657
811041f8:	8110446c 	andhi	r4,r16,16657
811041fc:	811044e8 	cmpgeui	r4,r16,16659
81104200:	8110462c 	andhi	r4,r16,16664
81104204:	811042cc 	andi	r4,r16,16651
81104208:	811042cc 	andi	r4,r16,16651
8110420c:	811044d4 	ori	r4,r16,16659
81104210:	811042cc 	andi	r4,r16,16651
81104214:	811044a4 	muli	r4,r16,16658
81104218:	81104480 	call	88110448 <__reset+0x20f0448>
8110421c:	81104390 	cmplti	r4,r16,16654
81104220:	811042cc 	andi	r4,r16,16651
81104224:	811042cc 	andi	r4,r16,16651
81104228:	8110437c 	xorhi	r4,r16,16653
8110422c:	811042cc 	andi	r4,r16,16651
81104230:	81104304 	addi	r4,r16,16652
81104234:	811042cc 	andi	r4,r16,16651
81104238:	811042cc 	andi	r4,r16,16651
8110423c:	81104404 	addi	r4,r16,16656
81104240:	d9809d15 	stw	r6,628(sp)
81104244:	3029883a 	mov	r20,r6
81104248:	e0800117 	ldw	r2,4(fp)
8110424c:	0081aa0e 	bge	zero,r2,811048f8 <__svfscanf_r+0x9e0>
81104250:	e0800017 	ldw	r2,0(fp)
81104254:	a0ffffc3 	ldbu	r3,-1(r20)
81104258:	11000003 	ldbu	r4,0(r2)
8110425c:	20ff6e1e 	bne	r4,r3,81104018 <__reset+0xfb0e4018>
81104260:	e0c00117 	ldw	r3,4(fp)
81104264:	10800044 	addi	r2,r2,1
81104268:	e0800015 	stw	r2,0(fp)
8110426c:	18bfffc4 	addi	r2,r3,-1
81104270:	e0800115 	stw	r2,4(fp)
81104274:	94800044 	addi	r18,r18,1
81104278:	a00d883a 	mov	r6,r20
8110427c:	003f6206 	br	81104008 <__reset+0xfb0e4008>
81104280:	00bfffc4 	movi	r2,-1
81104284:	dfc0b417 	ldw	ra,720(sp)
81104288:	df00b317 	ldw	fp,716(sp)
8110428c:	ddc0b217 	ldw	r23,712(sp)
81104290:	dd80b117 	ldw	r22,708(sp)
81104294:	dd40b017 	ldw	r21,704(sp)
81104298:	dd00af17 	ldw	r20,700(sp)
8110429c:	dcc0ae17 	ldw	r19,696(sp)
811042a0:	dc80ad17 	ldw	r18,692(sp)
811042a4:	dc40ac17 	ldw	r17,688(sp)
811042a8:	dc00ab17 	ldw	r16,684(sp)
811042ac:	dec0b504 	addi	sp,sp,724
811042b0:	f800283a 	ret
811042b4:	a0800043 	ldbu	r2,1(r20)
811042b8:	3029883a 	mov	r20,r6
811042bc:	8c400414 	ori	r17,r17,16
811042c0:	10c03fcc 	andi	r3,r2,255
811042c4:	a1800044 	addi	r6,r20,1
811042c8:	20ff5e2e 	bgeu	r4,r3,81104044 <__reset+0xfb0e4044>
811042cc:	38c7883a 	add	r3,r7,r3
811042d0:	18800043 	ldbu	r2,1(r3)
811042d4:	d9809d15 	stw	r6,628(sp)
811042d8:	00c00044 	movi	r3,1
811042dc:	108000cc 	andi	r2,r2,3
811042e0:	10c18f26 	beq	r2,r3,81104920 <__svfscanf_r+0xa08>
811042e4:	e0800117 	ldw	r2,4(fp)
811042e8:	00808716 	blt	zero,r2,81104508 <__svfscanf_r+0x5f0>
811042ec:	e00b883a 	mov	r5,fp
811042f0:	b009883a 	mov	r4,r22
811042f4:	11017e00 	call	811017e0 <__srefill_r>
811042f8:	1001431e 	bne	r2,zero,81104808 <__svfscanf_r+0x8f0>
811042fc:	b9c00017 	ldw	r7,0(r23)
81104300:	00008106 	br	81104508 <__svfscanf_r+0x5f0>
81104304:	e0800117 	ldw	r2,4(fp)
81104308:	d9809d15 	stw	r6,628(sp)
8110430c:	0081a30e 	bge	zero,r2,8110499c <__svfscanf_r+0xa84>
81104310:	00a04474 	movhi	r2,33041
81104314:	10b0b004 	addi	r2,r2,-15680
81104318:	02000284 	movi	r8,10
8110431c:	d880a115 	stw	r2,644(sp)
81104320:	da009e15 	stw	r8,632(sp)
81104324:	050000c4 	movi	r20,3
81104328:	e0c00017 	ldw	r3,0(fp)
8110432c:	00000206 	br	81104338 <__svfscanf_r+0x420>
81104330:	18c00044 	addi	r3,r3,1
81104334:	e0c00015 	stw	r3,0(fp)
81104338:	19000003 	ldbu	r4,0(r3)
8110433c:	20803fcc 	andi	r2,r4,255
81104340:	3885883a 	add	r2,r7,r2
81104344:	10800043 	ldbu	r2,1(r2)
81104348:	1140020c 	andi	r5,r2,8
8110434c:	2801ab26 	beq	r5,zero,811049fc <__svfscanf_r+0xae4>
81104350:	e0800117 	ldw	r2,4(fp)
81104354:	94800044 	addi	r18,r18,1
81104358:	10bfffc4 	addi	r2,r2,-1
8110435c:	e0800115 	stw	r2,4(fp)
81104360:	00bff316 	blt	zero,r2,81104330 <__reset+0xfb0e4330>
81104364:	e00b883a 	mov	r5,fp
81104368:	b009883a 	mov	r4,r22
8110436c:	11017e00 	call	811017e0 <__srefill_r>
81104370:	1001251e 	bne	r2,zero,81104808 <__svfscanf_r+0x8f0>
81104374:	b9c00017 	ldw	r7,0(r23)
81104378:	003feb06 	br	81104328 <__reset+0xfb0e4328>
8110437c:	e0800117 	ldw	r2,4(fp)
81104380:	d9809d15 	stw	r6,628(sp)
81104384:	00818b0e 	bge	zero,r2,811049b4 <__svfscanf_r+0xa9c>
81104388:	05000084 	movi	r20,2
8110438c:	003fe606 	br	81104328 <__reset+0xfb0e4328>
81104390:	e0800117 	ldw	r2,4(fp)
81104394:	d9809d15 	stw	r6,628(sp)
81104398:	8c408814 	ori	r17,r17,544
8110439c:	00801d0e 	bge	zero,r2,81104414 <__svfscanf_r+0x4fc>
811043a0:	00a04474 	movhi	r2,33041
811043a4:	10b0b004 	addi	r2,r2,-15680
811043a8:	02000404 	movi	r8,16
811043ac:	d880a115 	stw	r2,644(sp)
811043b0:	da009e15 	stw	r8,632(sp)
811043b4:	050000c4 	movi	r20,3
811043b8:	003fdb06 	br	81104328 <__reset+0xfb0e4328>
811043bc:	e0800117 	ldw	r2,4(fp)
811043c0:	d9809d15 	stw	r6,628(sp)
811043c4:	8c400054 	ori	r17,r17,1
811043c8:	00bfc80e 	bge	zero,r2,811042ec <__reset+0xfb0e42ec>
811043cc:	00e04474 	movhi	r3,33041
811043d0:	18ef6304 	addi	r3,r3,-17012
811043d4:	02000284 	movi	r8,10
811043d8:	d8c0a115 	stw	r3,644(sp)
811043dc:	da009e15 	stw	r8,632(sp)
811043e0:	050000c4 	movi	r20,3
811043e4:	003fd006 	br	81104328 <__reset+0xfb0e4328>
811043e8:	9cc002a4 	muli	r19,r19,10
811043ec:	a0800043 	ldbu	r2,1(r20)
811043f0:	3029883a 	mov	r20,r6
811043f4:	98e7883a 	add	r19,r19,r3
811043f8:	9cfff404 	addi	r19,r19,-48
811043fc:	10c03fcc 	andi	r3,r2,255
81104400:	003f0e06 	br	8110403c <__reset+0xfb0e403c>
81104404:	e0800117 	ldw	r2,4(fp)
81104408:	d9809d15 	stw	r6,628(sp)
8110440c:	8c408014 	ori	r17,r17,512
81104410:	00bfe316 	blt	zero,r2,811043a0 <__reset+0xfb0e43a0>
81104414:	e00b883a 	mov	r5,fp
81104418:	b009883a 	mov	r4,r22
8110441c:	11017e00 	call	811017e0 <__srefill_r>
81104420:	1000f91e 	bne	r2,zero,81104808 <__svfscanf_r+0x8f0>
81104424:	b9c00017 	ldw	r7,0(r23)
81104428:	003fdd06 	br	811043a0 <__reset+0xfb0e43a0>
8110442c:	e0800117 	ldw	r2,4(fp)
81104430:	d9809d15 	stw	r6,628(sp)
81104434:	8c400054 	ori	r17,r17,1
81104438:	0080140e 	bge	zero,r2,8110448c <__svfscanf_r+0x574>
8110443c:	00a04474 	movhi	r2,33041
81104440:	10b0b004 	addi	r2,r2,-15680
81104444:	02000204 	movi	r8,8
81104448:	d880a115 	stw	r2,644(sp)
8110444c:	da009e15 	stw	r8,632(sp)
81104450:	050000c4 	movi	r20,3
81104454:	003fb406 	br	81104328 <__reset+0xfb0e4328>
81104458:	a0800043 	ldbu	r2,1(r20)
8110445c:	8c400094 	ori	r17,r17,2
81104460:	3029883a 	mov	r20,r6
81104464:	10c03fcc 	andi	r3,r2,255
81104468:	003ef406 	br	8110403c <__reset+0xfb0e403c>
8110446c:	e0800117 	ldw	r2,4(fp)
81104470:	d9809d15 	stw	r6,628(sp)
81104474:	0081420e 	bge	zero,r2,81104980 <__svfscanf_r+0xa68>
81104478:	05000104 	movi	r20,4
8110447c:	003faa06 	br	81104328 <__reset+0xfb0e4328>
81104480:	e0800117 	ldw	r2,4(fp)
81104484:	d9809d15 	stw	r6,628(sp)
81104488:	00bfec16 	blt	zero,r2,8110443c <__reset+0xfb0e443c>
8110448c:	e00b883a 	mov	r5,fp
81104490:	b009883a 	mov	r4,r22
81104494:	11017e00 	call	811017e0 <__srefill_r>
81104498:	1000db1e 	bne	r2,zero,81104808 <__svfscanf_r+0x8f0>
8110449c:	b9c00017 	ldw	r7,0(r23)
811044a0:	003fe606 	br	8110443c <__reset+0xfb0e443c>
811044a4:	d9809d15 	stw	r6,628(sp)
811044a8:	8880040c 	andi	r2,r17,16
811044ac:	10009c1e 	bne	r2,zero,81104720 <__svfscanf_r+0x808>
811044b0:	8880010c 	andi	r2,r17,4
811044b4:	10011e26 	beq	r2,zero,81104930 <__svfscanf_r+0xa18>
811044b8:	da009c17 	ldw	r8,624(sp)
811044bc:	3029883a 	mov	r20,r6
811044c0:	40800017 	ldw	r2,0(r8)
811044c4:	42000104 	addi	r8,r8,4
811044c8:	da009c15 	stw	r8,624(sp)
811044cc:	1480000d 	sth	r18,0(r2)
811044d0:	003ecc06 	br	81104004 <__reset+0xfb0e4004>
811044d4:	a0c00043 	ldbu	r3,1(r20)
811044d8:	19410c26 	beq	r3,r5,8110490c <__svfscanf_r+0x9f4>
811044dc:	8c400054 	ori	r17,r17,1
811044e0:	3029883a 	mov	r20,r6
811044e4:	003ed506 	br	8110403c <__reset+0xfb0e403c>
811044e8:	a0800043 	ldbu	r2,1(r20)
811044ec:	8c400114 	ori	r17,r17,4
811044f0:	3029883a 	mov	r20,r6
811044f4:	10c03fcc 	andi	r3,r2,255
811044f8:	003ed006 	br	8110403c <__reset+0xfb0e403c>
811044fc:	e0800117 	ldw	r2,4(fp)
81104500:	d9809d15 	stw	r6,628(sp)
81104504:	00bf790e 	bge	zero,r2,811042ec <__reset+0xfb0e42ec>
81104508:	00a04474 	movhi	r2,33041
8110450c:	10af6304 	addi	r2,r2,-17012
81104510:	02000284 	movi	r8,10
81104514:	d880a115 	stw	r2,644(sp)
81104518:	da009e15 	stw	r8,632(sp)
8110451c:	050000c4 	movi	r20,3
81104520:	003f8106 	br	81104328 <__reset+0xfb0e4328>
81104524:	e0800117 	ldw	r2,4(fp)
81104528:	d9809d15 	stw	r6,628(sp)
8110452c:	0080c40e 	bge	zero,r2,81104840 <__svfscanf_r+0x928>
81104530:	9800011e 	bne	r19,zero,81104538 <__svfscanf_r+0x620>
81104534:	04c00044 	movi	r19,1
81104538:	8880004c 	andi	r2,r17,1
8110453c:	1000441e 	bne	r2,zero,81104650 <__svfscanf_r+0x738>
81104540:	8c40040c 	andi	r17,r17,16
81104544:	8800da26 	beq	r17,zero,811048b0 <__svfscanf_r+0x998>
81104548:	0021883a 	mov	r16,zero
8110454c:	00000806 	br	81104570 <__svfscanf_r+0x658>
81104550:	1887883a 	add	r3,r3,r2
81104554:	e00b883a 	mov	r5,fp
81104558:	b009883a 	mov	r4,r22
8110455c:	e0c00015 	stw	r3,0(fp)
81104560:	80a1883a 	add	r16,r16,r2
81104564:	98a7c83a 	sub	r19,r19,r2
81104568:	11017e00 	call	811017e0 <__srefill_r>
8110456c:	1000ca1e 	bne	r2,zero,81104898 <__svfscanf_r+0x980>
81104570:	e0800117 	ldw	r2,4(fp)
81104574:	e0c00017 	ldw	r3,0(fp)
81104578:	14fff516 	blt	r2,r19,81104550 <__reset+0xfb0e4550>
8110457c:	14c5c83a 	sub	r2,r2,r19
81104580:	1cd5883a 	add	r10,r3,r19
81104584:	84e1883a 	add	r16,r16,r19
81104588:	e0800115 	stw	r2,4(fp)
8110458c:	e2800015 	stw	r10,0(fp)
81104590:	dd009d17 	ldw	r20,628(sp)
81104594:	9425883a 	add	r18,r18,r16
81104598:	a00d883a 	mov	r6,r20
8110459c:	003e9a06 	br	81104008 <__reset+0xfb0e4008>
811045a0:	300b883a 	mov	r5,r6
811045a4:	d9005884 	addi	r4,sp,354
811045a8:	d9809d15 	stw	r6,628(sp)
811045ac:	110a3a00 	call	8110a3a0 <__sccl>
811045b0:	1029883a 	mov	r20,r2
811045b4:	e0800117 	ldw	r2,4(fp)
811045b8:	0081050e 	bge	zero,r2,811049d0 <__svfscanf_r+0xab8>
811045bc:	e1000017 	ldw	r4,0(fp)
811045c0:	20800003 	ldbu	r2,0(r4)
811045c4:	98005926 	beq	r19,zero,8110472c <__svfscanf_r+0x814>
811045c8:	8c40040c 	andi	r17,r17,16
811045cc:	88005a26 	beq	r17,zero,81104738 <__svfscanf_r+0x820>
811045d0:	9823883a 	mov	r17,r19
811045d4:	0021883a 	mov	r16,zero
811045d8:	00000106 	br	811045e0 <__svfscanf_r+0x6c8>
811045dc:	20800003 	ldbu	r2,0(r4)
811045e0:	10803fcc 	andi	r2,r2,255
811045e4:	d8c05884 	addi	r3,sp,354
811045e8:	1885883a 	add	r2,r3,r2
811045ec:	10800007 	ldb	r2,0(r2)
811045f0:	1000ad26 	beq	r2,zero,811048a8 <__svfscanf_r+0x990>
811045f4:	e0800117 	ldw	r2,4(fp)
811045f8:	21000044 	addi	r4,r4,1
811045fc:	84000044 	addi	r16,r16,1
81104600:	10bfffc4 	addi	r2,r2,-1
81104604:	e0800115 	stw	r2,4(fp)
81104608:	e1000015 	stw	r4,0(fp)
8110460c:	84c0a026 	beq	r16,r19,81104890 <__svfscanf_r+0x978>
81104610:	00bff216 	blt	zero,r2,811045dc <__reset+0xfb0e45dc>
81104614:	e00b883a 	mov	r5,fp
81104618:	b009883a 	mov	r4,r22
8110461c:	11017e00 	call	811017e0 <__srefill_r>
81104620:	10009a1e 	bne	r2,zero,8110488c <__svfscanf_r+0x974>
81104624:	e1000017 	ldw	r4,0(fp)
81104628:	003fec06 	br	811045dc <__reset+0xfb0e45dc>
8110462c:	e0800117 	ldw	r2,4(fp)
81104630:	d9809d15 	stw	r6,628(sp)
81104634:	0080eb0e 	bge	zero,r2,811049e4 <__svfscanf_r+0xacc>
81104638:	00a04474 	movhi	r2,33041
8110463c:	10af6304 	addi	r2,r2,-17012
81104640:	d880a115 	stw	r2,644(sp)
81104644:	d8009e15 	stw	zero,632(sp)
81104648:	050000c4 	movi	r20,3
8110464c:	003f3606 	br	81104328 <__reset+0xfb0e4328>
81104650:	dd409904 	addi	r21,sp,612
81104654:	8c40040c 	andi	r17,r17,16
81104658:	01800204 	movi	r6,8
8110465c:	000b883a 	mov	r5,zero
81104660:	a809883a 	mov	r4,r21
81104664:	dc409f15 	stw	r17,636(sp)
81104668:	11014fc0 	call	811014fc <memset>
8110466c:	dc409f17 	ldw	r17,636(sp)
81104670:	88006e26 	beq	r17,zero,8110482c <__svfscanf_r+0x914>
81104674:	0029883a 	mov	r20,zero
81104678:	0023883a 	mov	r17,zero
8110467c:	110870c0 	call	8110870c <__locale_mb_cur_max>
81104680:	14406126 	beq	r2,r17,81104808 <__svfscanf_r+0x8f0>
81104684:	e0800017 	ldw	r2,0(fp)
81104688:	e0c00117 	ldw	r3,4(fp)
8110468c:	d9000104 	addi	r4,sp,4
81104690:	12000003 	ldbu	r8,0(r2)
81104694:	18ffffc4 	addi	r3,r3,-1
81104698:	10800044 	addi	r2,r2,1
8110469c:	e0c00115 	stw	r3,4(fp)
811046a0:	e0800015 	stw	r2,0(fp)
811046a4:	8c000044 	addi	r16,r17,1
811046a8:	dd400015 	stw	r21,0(sp)
811046ac:	2463883a 	add	r17,r4,r17
811046b0:	200d883a 	mov	r6,r4
811046b4:	a00b883a 	mov	r5,r20
811046b8:	800f883a 	mov	r7,r16
811046bc:	b009883a 	mov	r4,r22
811046c0:	8a000005 	stb	r8,0(r17)
811046c4:	11087c00 	call	811087c0 <_mbrtowc_r>
811046c8:	017fffc4 	movi	r5,-1
811046cc:	11404e26 	beq	r2,r5,81104808 <__svfscanf_r+0x8f0>
811046d0:	1000601e 	bne	r2,zero,81104854 <__svfscanf_r+0x93c>
811046d4:	da009f17 	ldw	r8,636(sp)
811046d8:	4000641e 	bne	r8,zero,8110486c <__svfscanf_r+0x954>
811046dc:	a0000015 	stw	zero,0(r20)
811046e0:	9425883a 	add	r18,r18,r16
811046e4:	9967883a 	add	r19,r19,r5
811046e8:	a5000104 	addi	r20,r20,4
811046ec:	e0800117 	ldw	r2,4(fp)
811046f0:	0023883a 	mov	r17,zero
811046f4:	00804b16 	blt	zero,r2,81104824 <__svfscanf_r+0x90c>
811046f8:	e00b883a 	mov	r5,fp
811046fc:	b009883a 	mov	r4,r22
81104700:	11017e00 	call	811017e0 <__srefill_r>
81104704:	10004726 	beq	r2,zero,81104824 <__svfscanf_r+0x90c>
81104708:	88003f1e 	bne	r17,zero,81104808 <__svfscanf_r+0x8f0>
8110470c:	d8c09f17 	ldw	r3,636(sp)
81104710:	1800031e 	bne	r3,zero,81104720 <__svfscanf_r+0x808>
81104714:	da00a017 	ldw	r8,640(sp)
81104718:	42000044 	addi	r8,r8,1
8110471c:	da00a015 	stw	r8,640(sp)
81104720:	dd009d17 	ldw	r20,628(sp)
81104724:	a00d883a 	mov	r6,r20
81104728:	003e3706 	br	81104008 <__reset+0xfb0e4008>
8110472c:	8c40040c 	andi	r17,r17,16
81104730:	04ffffc4 	movi	r19,-1
81104734:	883fa61e 	bne	r17,zero,811045d0 <__reset+0xfb0e45d0>
81104738:	da009c17 	ldw	r8,624(sp)
8110473c:	9abfffc4 	addi	r10,r19,-1
81104740:	44000017 	ldw	r16,0(r8)
81104744:	44400104 	addi	r17,r8,4
81104748:	8007883a 	mov	r3,r16
8110474c:	82ab883a 	add	r21,r16,r10
81104750:	00000306 	br	81104760 <__svfscanf_r+0x848>
81104754:	e1000017 	ldw	r4,0(fp)
81104758:	9807883a 	mov	r3,r19
8110475c:	20800003 	ldbu	r2,0(r4)
81104760:	10803fcc 	andi	r2,r2,255
81104764:	d9405884 	addi	r5,sp,354
81104768:	2885883a 	add	r2,r5,r2
8110476c:	10800007 	ldb	r2,0(r2)
81104770:	10004b26 	beq	r2,zero,811048a0 <__svfscanf_r+0x988>
81104774:	e0800117 	ldw	r2,4(fp)
81104778:	21400044 	addi	r5,r4,1
8110477c:	e1400015 	stw	r5,0(fp)
81104780:	10bfffc4 	addi	r2,r2,-1
81104784:	e0800115 	stw	r2,4(fp)
81104788:	20800003 	ldbu	r2,0(r4)
8110478c:	1cc00044 	addi	r19,r3,1
81104790:	18800005 	stb	r2,0(r3)
81104794:	1d400726 	beq	r3,r21,811047b4 <__svfscanf_r+0x89c>
81104798:	e0800117 	ldw	r2,4(fp)
8110479c:	00bfed16 	blt	zero,r2,81104754 <__reset+0xfb0e4754>
811047a0:	e00b883a 	mov	r5,fp
811047a4:	b009883a 	mov	r4,r22
811047a8:	11017e00 	call	811017e0 <__srefill_r>
811047ac:	103fe926 	beq	r2,zero,81104754 <__reset+0xfb0e4754>
811047b0:	84c01526 	beq	r16,r19,81104808 <__svfscanf_r+0x8f0>
811047b4:	9c21c83a 	sub	r16,r19,r16
811047b8:	803e1726 	beq	r16,zero,81104018 <__reset+0xfb0e4018>
811047bc:	da00a017 	ldw	r8,640(sp)
811047c0:	98000005 	stb	zero,0(r19)
811047c4:	dc409c15 	stw	r17,624(sp)
811047c8:	42000044 	addi	r8,r8,1
811047cc:	da00a015 	stw	r8,640(sp)
811047d0:	9425883a 	add	r18,r18,r16
811047d4:	a00d883a 	mov	r6,r20
811047d8:	003e0b06 	br	81104008 <__reset+0xfb0e4008>
811047dc:	017fff84 	movi	r5,-2
811047e0:	11439b1e 	bne	r2,r5,81105650 <__svfscanf_r+0x1738>
811047e4:	8821883a 	mov	r16,r17
811047e8:	e0800117 	ldw	r2,4(fp)
811047ec:	0082e516 	blt	zero,r2,81105384 <__svfscanf_r+0x146c>
811047f0:	e00b883a 	mov	r5,fp
811047f4:	b009883a 	mov	r4,r22
811047f8:	11017e00 	call	811017e0 <__srefill_r>
811047fc:	1002e126 	beq	r2,zero,81105384 <__svfscanf_r+0x146c>
81104800:	dc409f17 	ldw	r17,636(sp)
81104804:	8002e826 	beq	r16,zero,811053a8 <__svfscanf_r+0x1490>
81104808:	da00a017 	ldw	r8,640(sp)
8110480c:	403e9c26 	beq	r8,zero,81104280 <__reset+0xfb0e4280>
81104810:	e080030b 	ldhu	r2,12(fp)
81104814:	1080100c 	andi	r2,r2,64
81104818:	103e991e 	bne	r2,zero,81104280 <__reset+0xfb0e4280>
8110481c:	4005883a 	mov	r2,r8
81104820:	003e9806 	br	81104284 <__reset+0xfb0e4284>
81104824:	983f951e 	bne	r19,zero,8110467c <__reset+0xfb0e467c>
81104828:	003fb806 	br	8110470c <__reset+0xfb0e470c>
8110482c:	da009c17 	ldw	r8,624(sp)
81104830:	45000017 	ldw	r20,0(r8)
81104834:	42000104 	addi	r8,r8,4
81104838:	da009c15 	stw	r8,624(sp)
8110483c:	003f8e06 	br	81104678 <__reset+0xfb0e4678>
81104840:	e00b883a 	mov	r5,fp
81104844:	b009883a 	mov	r4,r22
81104848:	11017e00 	call	811017e0 <__srefill_r>
8110484c:	103f3826 	beq	r2,zero,81104530 <__reset+0xfb0e4530>
81104850:	003fed06 	br	81104808 <__reset+0xfb0e4808>
81104854:	00ffff84 	movi	r3,-2
81104858:	10c0071e 	bne	r2,r3,81104878 <__svfscanf_r+0x960>
8110485c:	e0800117 	ldw	r2,4(fp)
81104860:	8023883a 	mov	r17,r16
81104864:	00bf8516 	blt	zero,r2,8110467c <__reset+0xfb0e467c>
81104868:	003fa306 	br	811046f8 <__reset+0xfb0e46f8>
8110486c:	9425883a 	add	r18,r18,r16
81104870:	9cffffc4 	addi	r19,r19,-1
81104874:	003f9d06 	br	811046ec <__reset+0xfb0e46ec>
81104878:	da009f17 	ldw	r8,636(sp)
8110487c:	9425883a 	add	r18,r18,r16
81104880:	9cffffc4 	addi	r19,r19,-1
81104884:	403f9826 	beq	r8,zero,811046e8 <__reset+0xfb0e46e8>
81104888:	003f9806 	br	811046ec <__reset+0xfb0e46ec>
8110488c:	8023883a 	mov	r17,r16
81104890:	8821883a 	mov	r16,r17
81104894:	003fce06 	br	811047d0 <__reset+0xfb0e47d0>
81104898:	803f3d1e 	bne	r16,zero,81104590 <__reset+0xfb0e4590>
8110489c:	003fda06 	br	81104808 <__reset+0xfb0e4808>
811048a0:	1827883a 	mov	r19,r3
811048a4:	003fc306 	br	811047b4 <__reset+0xfb0e47b4>
811048a8:	803fc91e 	bne	r16,zero,811047d0 <__reset+0xfb0e47d0>
811048ac:	003dda06 	br	81104018 <__reset+0xfb0e4018>
811048b0:	da009c17 	ldw	r8,624(sp)
811048b4:	df000015 	stw	fp,0(sp)
811048b8:	980f883a 	mov	r7,r19
811048bc:	41400017 	ldw	r5,0(r8)
811048c0:	01800044 	movi	r6,1
811048c4:	b009883a 	mov	r4,r22
811048c8:	11079280 	call	81107928 <_fread_r>
811048cc:	da009c17 	ldw	r8,624(sp)
811048d0:	40c00104 	addi	r3,r8,4
811048d4:	103fcc26 	beq	r2,zero,81104808 <__reset+0xfb0e4808>
811048d8:	da00a017 	ldw	r8,640(sp)
811048dc:	dd009d17 	ldw	r20,628(sp)
811048e0:	90a5883a 	add	r18,r18,r2
811048e4:	42000044 	addi	r8,r8,1
811048e8:	da00a015 	stw	r8,640(sp)
811048ec:	d8c09c15 	stw	r3,624(sp)
811048f0:	a00d883a 	mov	r6,r20
811048f4:	003dc406 	br	81104008 <__reset+0xfb0e4008>
811048f8:	e00b883a 	mov	r5,fp
811048fc:	b009883a 	mov	r4,r22
81104900:	11017e00 	call	811017e0 <__srefill_r>
81104904:	103e5226 	beq	r2,zero,81104250 <__reset+0xfb0e4250>
81104908:	003fbf06 	br	81104808 <__reset+0xfb0e4808>
8110490c:	a0800083 	ldbu	r2,2(r20)
81104910:	8c400094 	ori	r17,r17,2
81104914:	a5000084 	addi	r20,r20,2
81104918:	10c03fcc 	andi	r3,r2,255
8110491c:	003dc706 	br	8110403c <__reset+0xfb0e403c>
81104920:	e0800117 	ldw	r2,4(fp)
81104924:	88e2b03a 	or	r17,r17,r3
81104928:	00bef716 	blt	zero,r2,81104508 <__reset+0xfb0e4508>
8110492c:	003e6f06 	br	811042ec <__reset+0xfb0e42ec>
81104930:	8880004c 	andi	r2,r17,1
81104934:	10000b1e 	bne	r2,zero,81104964 <__svfscanf_r+0xa4c>
81104938:	8c40008c 	andi	r17,r17,2
8110493c:	88000926 	beq	r17,zero,81104964 <__svfscanf_r+0xa4c>
81104940:	da009c17 	ldw	r8,624(sp)
81104944:	9007d7fa 	srai	r3,r18,31
81104948:	dd009d17 	ldw	r20,628(sp)
8110494c:	40800017 	ldw	r2,0(r8)
81104950:	42000104 	addi	r8,r8,4
81104954:	da009c15 	stw	r8,624(sp)
81104958:	14800015 	stw	r18,0(r2)
8110495c:	10c00115 	stw	r3,4(r2)
81104960:	003da806 	br	81104004 <__reset+0xfb0e4004>
81104964:	da009c17 	ldw	r8,624(sp)
81104968:	dd009d17 	ldw	r20,628(sp)
8110496c:	40800017 	ldw	r2,0(r8)
81104970:	42000104 	addi	r8,r8,4
81104974:	da009c15 	stw	r8,624(sp)
81104978:	14800015 	stw	r18,0(r2)
8110497c:	003da106 	br	81104004 <__reset+0xfb0e4004>
81104980:	e00b883a 	mov	r5,fp
81104984:	b009883a 	mov	r4,r22
81104988:	11017e00 	call	811017e0 <__srefill_r>
8110498c:	103f9e1e 	bne	r2,zero,81104808 <__reset+0xfb0e4808>
81104990:	b9c00017 	ldw	r7,0(r23)
81104994:	05000104 	movi	r20,4
81104998:	003e6306 	br	81104328 <__reset+0xfb0e4328>
8110499c:	e00b883a 	mov	r5,fp
811049a0:	b009883a 	mov	r4,r22
811049a4:	11017e00 	call	811017e0 <__srefill_r>
811049a8:	103f971e 	bne	r2,zero,81104808 <__reset+0xfb0e4808>
811049ac:	b9c00017 	ldw	r7,0(r23)
811049b0:	003e5706 	br	81104310 <__reset+0xfb0e4310>
811049b4:	e00b883a 	mov	r5,fp
811049b8:	b009883a 	mov	r4,r22
811049bc:	11017e00 	call	811017e0 <__srefill_r>
811049c0:	103f911e 	bne	r2,zero,81104808 <__reset+0xfb0e4808>
811049c4:	b9c00017 	ldw	r7,0(r23)
811049c8:	05000084 	movi	r20,2
811049cc:	003e5606 	br	81104328 <__reset+0xfb0e4328>
811049d0:	e00b883a 	mov	r5,fp
811049d4:	b009883a 	mov	r4,r22
811049d8:	11017e00 	call	811017e0 <__srefill_r>
811049dc:	103ef726 	beq	r2,zero,811045bc <__reset+0xfb0e45bc>
811049e0:	003f8906 	br	81104808 <__reset+0xfb0e4808>
811049e4:	e00b883a 	mov	r5,fp
811049e8:	b009883a 	mov	r4,r22
811049ec:	11017e00 	call	811017e0 <__srefill_r>
811049f0:	103f851e 	bne	r2,zero,81104808 <__reset+0xfb0e4808>
811049f4:	b9c00017 	ldw	r7,0(r23)
811049f8:	003f0f06 	br	81104638 <__reset+0xfb0e4638>
811049fc:	014000c4 	movi	r5,3
81104a00:	a1414a26 	beq	r20,r5,81104f2c <__svfscanf_r+0x1014>
81104a04:	01000104 	movi	r4,4
81104a08:	a101f11e 	bne	r20,r4,811051d0 <__svfscanf_r+0x12b8>
81104a0c:	b009883a 	mov	r4,r22
81104a10:	11087300 	call	81108730 <_localeconv_r>
81104a14:	10800017 	ldw	r2,0(r2)
81104a18:	98ffffc4 	addi	r3,r19,-1
81104a1c:	d880a315 	stw	r2,652(sp)
81104a20:	00805704 	movi	r2,348
81104a24:	10c21e2e 	bgeu	r2,r3,811052a0 <__svfscanf_r+0x1388>
81104a28:	9cffa8c4 	addi	r19,r19,-349
81104a2c:	dcc0a215 	stw	r19,648(sp)
81104a30:	04c05744 	movi	r19,349
81104a34:	8d01e014 	ori	r20,r17,1920
81104a38:	0023883a 	mov	r17,zero
81104a3c:	dc000104 	addi	r16,sp,4
81104a40:	8805883a 	mov	r2,r17
81104a44:	0019883a 	mov	r12,zero
81104a48:	8023883a 	mov	r17,r16
81104a4c:	b007883a 	mov	r3,r22
81104a50:	9821883a 	mov	r16,r19
81104a54:	002b883a 	mov	r21,zero
81104a58:	d800a515 	stw	zero,660(sp)
81104a5c:	d800a415 	stw	zero,656(sp)
81104a60:	d8009f15 	stw	zero,636(sp)
81104a64:	01c01384 	movi	r7,78
81104a68:	602d883a 	mov	r22,r12
81104a6c:	1027883a 	mov	r19,r2
81104a70:	e1000017 	ldw	r4,0(fp)
81104a74:	21400003 	ldbu	r5,0(r4)
81104a78:	28bff544 	addi	r2,r5,-43
81104a7c:	10803fcc 	andi	r2,r2,255
81104a80:	38810e36 	bltu	r7,r2,81104ebc <__svfscanf_r+0xfa4>
81104a84:	100490ba 	slli	r2,r2,2
81104a88:	01a04434 	movhi	r6,33040
81104a8c:	3192a704 	addi	r6,r6,19100
81104a90:	1185883a 	add	r2,r2,r6
81104a94:	10800017 	ldw	r2,0(r2)
81104a98:	1000683a 	jmp	r2
81104a9c:	81104d94 	ori	r4,r16,16694
81104aa0:	81104ebc 	xorhi	r4,r16,16698
81104aa4:	81104d94 	ori	r4,r16,16694
81104aa8:	81104ebc 	xorhi	r4,r16,16698
81104aac:	81104ebc 	xorhi	r4,r16,16698
81104ab0:	81104d68 	cmpgeui	r4,r16,16693
81104ab4:	81104bd8 	cmpnei	r4,r16,16687
81104ab8:	81104bd8 	cmpnei	r4,r16,16687
81104abc:	81104bd8 	cmpnei	r4,r16,16687
81104ac0:	81104bd8 	cmpnei	r4,r16,16687
81104ac4:	81104bd8 	cmpnei	r4,r16,16687
81104ac8:	81104bd8 	cmpnei	r4,r16,16687
81104acc:	81104bd8 	cmpnei	r4,r16,16687
81104ad0:	81104bd8 	cmpnei	r4,r16,16687
81104ad4:	81104bd8 	cmpnei	r4,r16,16687
81104ad8:	81104ebc 	xorhi	r4,r16,16698
81104adc:	81104ebc 	xorhi	r4,r16,16698
81104ae0:	81104ebc 	xorhi	r4,r16,16698
81104ae4:	81104ebc 	xorhi	r4,r16,16698
81104ae8:	81104ebc 	xorhi	r4,r16,16698
81104aec:	81104ebc 	xorhi	r4,r16,16698
81104af0:	81104ebc 	xorhi	r4,r16,16698
81104af4:	81104eac 	andhi	r4,r16,16698
81104af8:	81104ebc 	xorhi	r4,r16,16698
81104afc:	81104ebc 	xorhi	r4,r16,16698
81104b00:	81104ebc 	xorhi	r4,r16,16698
81104b04:	81104e68 	cmpgeui	r4,r16,16697
81104b08:	81104e4c 	andi	r4,r16,16697
81104b0c:	81104ebc 	xorhi	r4,r16,16698
81104b10:	81104ebc 	xorhi	r4,r16,16698
81104b14:	81104e18 	cmpnei	r4,r16,16696
81104b18:	81104ebc 	xorhi	r4,r16,16698
81104b1c:	81104ebc 	xorhi	r4,r16,16698
81104b20:	81104ebc 	xorhi	r4,r16,16698
81104b24:	81104ebc 	xorhi	r4,r16,16698
81104b28:	81104de0 	cmpeqi	r4,r16,16695
81104b2c:	81104ebc 	xorhi	r4,r16,16698
81104b30:	81104ebc 	xorhi	r4,r16,16698
81104b34:	81104ebc 	xorhi	r4,r16,16698
81104b38:	81104ebc 	xorhi	r4,r16,16698
81104b3c:	81104ebc 	xorhi	r4,r16,16698
81104b40:	81104dc4 	addi	r4,r16,16695
81104b44:	81104ebc 	xorhi	r4,r16,16698
81104b48:	81104ebc 	xorhi	r4,r16,16698
81104b4c:	81104ebc 	xorhi	r4,r16,16698
81104b50:	81104ebc 	xorhi	r4,r16,16698
81104b54:	81104da8 	cmpgeui	r4,r16,16694
81104b58:	81104ebc 	xorhi	r4,r16,16698
81104b5c:	81104ebc 	xorhi	r4,r16,16698
81104b60:	81104ebc 	xorhi	r4,r16,16698
81104b64:	81104ebc 	xorhi	r4,r16,16698
81104b68:	81104ebc 	xorhi	r4,r16,16698
81104b6c:	81104ebc 	xorhi	r4,r16,16698
81104b70:	81104ebc 	xorhi	r4,r16,16698
81104b74:	81104eac 	andhi	r4,r16,16698
81104b78:	81104ebc 	xorhi	r4,r16,16698
81104b7c:	81104ebc 	xorhi	r4,r16,16698
81104b80:	81104ebc 	xorhi	r4,r16,16698
81104b84:	81104e68 	cmpgeui	r4,r16,16697
81104b88:	81104e4c 	andi	r4,r16,16697
81104b8c:	81104ebc 	xorhi	r4,r16,16698
81104b90:	81104ebc 	xorhi	r4,r16,16698
81104b94:	81104e18 	cmpnei	r4,r16,16696
81104b98:	81104ebc 	xorhi	r4,r16,16698
81104b9c:	81104ebc 	xorhi	r4,r16,16698
81104ba0:	81104ebc 	xorhi	r4,r16,16698
81104ba4:	81104ebc 	xorhi	r4,r16,16698
81104ba8:	81104de0 	cmpeqi	r4,r16,16695
81104bac:	81104ebc 	xorhi	r4,r16,16698
81104bb0:	81104ebc 	xorhi	r4,r16,16698
81104bb4:	81104ebc 	xorhi	r4,r16,16698
81104bb8:	81104ebc 	xorhi	r4,r16,16698
81104bbc:	81104ebc 	xorhi	r4,r16,16698
81104bc0:	81104dc4 	addi	r4,r16,16695
81104bc4:	81104ebc 	xorhi	r4,r16,16698
81104bc8:	81104ebc 	xorhi	r4,r16,16698
81104bcc:	81104ebc 	xorhi	r4,r16,16698
81104bd0:	81104ebc 	xorhi	r4,r16,16698
81104bd4:	81104da8 	cmpgeui	r4,r16,16694
81104bd8:	a8803fcc 	andi	r2,r21,255
81104bdc:	1080201c 	xori	r2,r2,128
81104be0:	10bfe004 	addi	r2,r2,-128
81104be4:	b085883a 	add	r2,r22,r2
81104be8:	10000d1e 	bne	r2,zero,81104c20 <__svfscanf_r+0xd08>
81104bec:	00bf9fc4 	movi	r2,-385
81104bf0:	a0a8703a 	and	r20,r20,r2
81104bf4:	89400005 	stb	r5,0(r17)
81104bf8:	8c400044 	addi	r17,r17,1
81104bfc:	e0800117 	ldw	r2,4(fp)
81104c00:	843fffc4 	addi	r16,r16,-1
81104c04:	94800044 	addi	r18,r18,1
81104c08:	10bfffc4 	addi	r2,r2,-1
81104c0c:	e0800115 	stw	r2,4(fp)
81104c10:	0080b40e 	bge	zero,r2,81104ee4 <__svfscanf_r+0xfcc>
81104c14:	21000044 	addi	r4,r4,1
81104c18:	e1000015 	stw	r4,0(fp)
81104c1c:	803f941e 	bne	r16,zero,81104a70 <__reset+0xfb0e4a70>
81104c20:	8821883a 	mov	r16,r17
81104c24:	b019883a 	mov	r12,r22
81104c28:	9823883a 	mov	r17,r19
81104c2c:	182d883a 	mov	r22,r3
81104c30:	9801961e 	bne	r19,zero,8110528c <__svfscanf_r+0x1374>
81104c34:	633fffc4 	addi	r12,r12,-1
81104c38:	00800044 	movi	r2,1
81104c3c:	1302882e 	bgeu	r2,r12,81105660 <__svfscanf_r+0x1748>
81104c40:	a8803fcc 	andi	r2,r21,255
81104c44:	1080201c 	xori	r2,r2,128
81104c48:	10bfe004 	addi	r2,r2,-128
81104c4c:	113fffc4 	addi	r4,r2,-1
81104c50:	01400184 	movi	r5,6
81104c54:	29001136 	bltu	r5,r4,81104c9c <__svfscanf_r+0xd84>
81104c58:	01000084 	movi	r4,2
81104c5c:	2082900e 	bge	r4,r2,811056a0 <__svfscanf_r+0x1788>
81104c60:	00c000c4 	movi	r3,3
81104c64:	10c00d26 	beq	r2,r3,81104c9c <__svfscanf_r+0xd84>
81104c68:	9425c83a 	sub	r18,r18,r16
81104c6c:	1827883a 	mov	r19,r3
81104c70:	843fffc4 	addi	r16,r16,-1
81104c74:	81400007 	ldb	r5,0(r16)
81104c78:	e00d883a 	mov	r6,fp
81104c7c:	b009883a 	mov	r4,r22
81104c80:	110eaac0 	call	8110eaac <_ungetc_r>
81104c84:	a8bfffc4 	addi	r2,r21,-1
81104c88:	10c03fcc 	andi	r3,r2,255
81104c8c:	8493883a 	add	r9,r16,r18
81104c90:	102b883a 	mov	r21,r2
81104c94:	98fff636 	bltu	r19,r3,81104c70 <__reset+0xfb0e4c70>
81104c98:	4825883a 	mov	r18,r9
81104c9c:	a080400c 	andi	r2,r20,256
81104ca0:	10001426 	beq	r2,zero,81104cf4 <__svfscanf_r+0xddc>
81104ca4:	a081000c 	andi	r2,r20,1024
81104ca8:	1002571e 	bne	r2,zero,81105608 <__svfscanf_r+0x16f0>
81104cac:	817fffc7 	ldb	r5,-1(r16)
81104cb0:	00801944 	movi	r2,101
81104cb4:	84ffffc4 	addi	r19,r16,-1
81104cb8:	957fffc4 	addi	r21,r18,-1
81104cbc:	28800826 	beq	r5,r2,81104ce0 <__svfscanf_r+0xdc8>
81104cc0:	00801144 	movi	r2,69
81104cc4:	28800626 	beq	r5,r2,81104ce0 <__svfscanf_r+0xdc8>
81104cc8:	e00d883a 	mov	r6,fp
81104ccc:	b009883a 	mov	r4,r22
81104cd0:	110eaac0 	call	8110eaac <_ungetc_r>
81104cd4:	817fff87 	ldb	r5,-2(r16)
81104cd8:	84ffff84 	addi	r19,r16,-2
81104cdc:	957fff84 	addi	r21,r18,-2
81104ce0:	e00d883a 	mov	r6,fp
81104ce4:	b009883a 	mov	r4,r22
81104ce8:	110eaac0 	call	8110eaac <_ungetc_r>
81104cec:	a825883a 	mov	r18,r21
81104cf0:	9821883a 	mov	r16,r19
81104cf4:	a080040c 	andi	r2,r20,16
81104cf8:	103e891e 	bne	r2,zero,81104720 <__reset+0xfb0e4720>
81104cfc:	80000005 	stb	zero,0(r16)
81104d00:	a081800c 	andi	r2,r20,1536
81104d04:	01010004 	movi	r4,1024
81104d08:	1101dd26 	beq	r2,r4,81105480 <__svfscanf_r+0x1568>
81104d0c:	da00a417 	ldw	r8,656(sp)
81104d10:	4001e71e 	bne	r8,zero,811054b0 <__svfscanf_r+0x1598>
81104d14:	000d883a 	mov	r6,zero
81104d18:	d9400104 	addi	r5,sp,4
81104d1c:	b009883a 	mov	r4,r22
81104d20:	110a67c0 	call	8110a67c <_strtod_r>
81104d24:	1021883a 	mov	r16,r2
81104d28:	a080004c 	andi	r2,r20,1
81104d2c:	1000021e 	bne	r2,zero,81104d38 <__svfscanf_r+0xe20>
81104d30:	a2c0008c 	andi	r11,r20,2
81104d34:	5801e826 	beq	r11,zero,811054d8 <__svfscanf_r+0x15c0>
81104d38:	da009c17 	ldw	r8,624(sp)
81104d3c:	40800017 	ldw	r2,0(r8)
81104d40:	42000104 	addi	r8,r8,4
81104d44:	da009c15 	stw	r8,624(sp)
81104d48:	14000015 	stw	r16,0(r2)
81104d4c:	10c00115 	stw	r3,4(r2)
81104d50:	da00a017 	ldw	r8,640(sp)
81104d54:	dd009d17 	ldw	r20,628(sp)
81104d58:	42000044 	addi	r8,r8,1
81104d5c:	da00a015 	stw	r8,640(sp)
81104d60:	a00d883a 	mov	r6,r20
81104d64:	003ca806 	br	81104008 <__reset+0xfb0e4008>
81104d68:	a080400c 	andi	r2,r20,256
81104d6c:	103f9a26 	beq	r2,zero,81104bd8 <__reset+0xfb0e4bd8>
81104d70:	da00a217 	ldw	r8,648(sp)
81104d74:	00bfdfc4 	movi	r2,-129
81104d78:	a0a8703a 	and	r20,r20,r2
81104d7c:	9cc00044 	addi	r19,r19,1
81104d80:	403f9e26 	beq	r8,zero,81104bfc <__reset+0xfb0e4bfc>
81104d84:	423fffc4 	addi	r8,r8,-1
81104d88:	da00a215 	stw	r8,648(sp)
81104d8c:	84000044 	addi	r16,r16,1
81104d90:	003f9a06 	br	81104bfc <__reset+0xfb0e4bfc>
81104d94:	a080200c 	andi	r2,r20,128
81104d98:	103fa126 	beq	r2,zero,81104c20 <__reset+0xfb0e4c20>
81104d9c:	00bfdfc4 	movi	r2,-129
81104da0:	a0a8703a 	and	r20,r20,r2
81104da4:	003f9306 	br	81104bf4 <__reset+0xfb0e4bf4>
81104da8:	a8803fcc 	andi	r2,r21,255
81104dac:	1080201c 	xori	r2,r2,128
81104db0:	10bfe004 	addi	r2,r2,-128
81104db4:	020001c4 	movi	r8,7
81104db8:	123f991e 	bne	r2,r8,81104c20 <__reset+0xfb0e4c20>
81104dbc:	05400204 	movi	r21,8
81104dc0:	003f8c06 	br	81104bf4 <__reset+0xfb0e4bf4>
81104dc4:	a8803fcc 	andi	r2,r21,255
81104dc8:	1080201c 	xori	r2,r2,128
81104dcc:	10bfe004 	addi	r2,r2,-128
81104dd0:	01800184 	movi	r6,6
81104dd4:	11bf921e 	bne	r2,r6,81104c20 <__reset+0xfb0e4c20>
81104dd8:	054001c4 	movi	r21,7
81104ddc:	003f8506 	br	81104bf4 <__reset+0xfb0e4bf4>
81104de0:	b000491e 	bne	r22,zero,81104f08 <__svfscanf_r+0xff0>
81104de4:	9800031e 	bne	r19,zero,81104df4 <__svfscanf_r+0xedc>
81104de8:	a081c00c 	andi	r2,r20,1792
81104dec:	0181c004 	movi	r6,1792
81104df0:	11819f26 	beq	r2,r6,81105470 <__svfscanf_r+0x1558>
81104df4:	a8803fcc 	andi	r2,r21,255
81104df8:	1080201c 	xori	r2,r2,128
81104dfc:	10bfe004 	addi	r2,r2,-128
81104e00:	01800044 	movi	r6,1
81104e04:	11800226 	beq	r2,r6,81104e10 <__svfscanf_r+0xef8>
81104e08:	01800104 	movi	r6,4
81104e0c:	11bf841e 	bne	r2,r6,81104c20 <__reset+0xfb0e4c20>
81104e10:	ad400044 	addi	r21,r21,1
81104e14:	003f7706 	br	81104bf4 <__reset+0xfb0e4bf4>
81104e18:	a8803fcc 	andi	r2,r21,255
81104e1c:	1080201c 	xori	r2,r2,128
81104e20:	10bfe004 	addi	r2,r2,-128
81104e24:	10003c1e 	bne	r2,zero,81104f18 <__svfscanf_r+0x1000>
81104e28:	9801141e 	bne	r19,zero,8110527c <__svfscanf_r+0x1364>
81104e2c:	a081c00c 	andi	r2,r20,1792
81104e30:	0181c004 	movi	r6,1792
81104e34:	11818226 	beq	r2,r6,81105440 <__svfscanf_r+0x1528>
81104e38:	8821883a 	mov	r16,r17
81104e3c:	b019883a 	mov	r12,r22
81104e40:	9823883a 	mov	r17,r19
81104e44:	182d883a 	mov	r22,r3
81104e48:	003f7a06 	br	81104c34 <__reset+0xfb0e4c34>
81104e4c:	a8803fcc 	andi	r2,r21,255
81104e50:	1080201c 	xori	r2,r2,128
81104e54:	10bfe004 	addi	r2,r2,-128
81104e58:	01800084 	movi	r6,2
81104e5c:	11bf701e 	bne	r2,r6,81104c20 <__reset+0xfb0e4c20>
81104e60:	054000c4 	movi	r21,3
81104e64:	003f6306 	br	81104bf4 <__reset+0xfb0e4bf4>
81104e68:	a081400c 	andi	r2,r20,1280
81104e6c:	01810004 	movi	r6,1024
81104e70:	11800326 	beq	r2,r6,81104e80 <__svfscanf_r+0xf68>
81104e74:	a184703a 	and	r2,r20,r6
81104e78:	103f6926 	beq	r2,zero,81104c20 <__reset+0xfb0e4c20>
81104e7c:	983fee26 	beq	r19,zero,81104e38 <__reset+0xfb0e4e38>
81104e80:	a080800c 	andi	r2,r20,512
81104e84:	1000041e 	bne	r2,zero,81104e98 <__svfscanf_r+0xf80>
81104e88:	da009f17 	ldw	r8,636(sp)
81104e8c:	dc40a515 	stw	r17,660(sp)
81104e90:	9a27c83a 	sub	r19,r19,r8
81104e94:	dcc0a415 	stw	r19,656(sp)
81104e98:	00be1fc4 	movi	r2,-1921
81104e9c:	a0a8703a 	and	r20,r20,r2
81104ea0:	a5006014 	ori	r20,r20,384
81104ea4:	0027883a 	mov	r19,zero
81104ea8:	003f5206 	br	81104bf4 <__reset+0xfb0e4bf4>
81104eac:	00800044 	movi	r2,1
81104eb0:	b0bf5b1e 	bne	r22,r2,81104c20 <__reset+0xfb0e4c20>
81104eb4:	05800084 	movi	r22,2
81104eb8:	003f4e06 	br	81104bf4 <__reset+0xfb0e4bf4>
81104ebc:	d980a317 	ldw	r6,652(sp)
81104ec0:	30800003 	ldbu	r2,0(r6)
81104ec4:	29803fcc 	andi	r6,r5,255
81104ec8:	30bf551e 	bne	r6,r2,81104c20 <__reset+0xfb0e4c20>
81104ecc:	a080800c 	andi	r2,r20,512
81104ed0:	103f5326 	beq	r2,zero,81104c20 <__reset+0xfb0e4c20>
81104ed4:	023f5fc4 	movi	r8,-641
81104ed8:	a228703a 	and	r20,r20,r8
81104edc:	dcc09f15 	stw	r19,636(sp)
81104ee0:	003f4406 	br	81104bf4 <__reset+0xfb0e4bf4>
81104ee4:	1809883a 	mov	r4,r3
81104ee8:	e00b883a 	mov	r5,fp
81104eec:	d8c0a615 	stw	r3,664(sp)
81104ef0:	d9c0aa15 	stw	r7,680(sp)
81104ef4:	11017e00 	call	811017e0 <__srefill_r>
81104ef8:	d8c0a617 	ldw	r3,664(sp)
81104efc:	d9c0aa17 	ldw	r7,680(sp)
81104f00:	103f4626 	beq	r2,zero,81104c1c <__reset+0xfb0e4c1c>
81104f04:	003f4606 	br	81104c20 <__reset+0xfb0e4c20>
81104f08:	00800084 	movi	r2,2
81104f0c:	b0bfb91e 	bne	r22,r2,81104df4 <__reset+0xfb0e4df4>
81104f10:	058000c4 	movi	r22,3
81104f14:	003f3706 	br	81104bf4 <__reset+0xfb0e4bf4>
81104f18:	018000c4 	movi	r6,3
81104f1c:	11bfbc26 	beq	r2,r6,81104e10 <__reset+0xfb0e4e10>
81104f20:	01800144 	movi	r6,5
81104f24:	11bfba26 	beq	r2,r6,81104e10 <__reset+0xfb0e4e10>
81104f28:	003f3d06 	br	81104c20 <__reset+0xfb0e4c20>
81104f2c:	98bfffc4 	addi	r2,r19,-1
81104f30:	01405704 	movi	r5,348
81104f34:	2880d82e 	bgeu	r5,r2,81105298 <__svfscanf_r+0x1380>
81104f38:	99ffa8c4 	addi	r7,r19,-349
81104f3c:	04c05744 	movi	r19,349
81104f40:	8c436014 	ori	r17,r17,3456
81104f44:	9013883a 	mov	r9,r18
81104f48:	8825883a 	mov	r18,r17
81104f4c:	dc409e17 	ldw	r17,632(sp)
81104f50:	0029883a 	mov	r20,zero
81104f54:	dc000104 	addi	r16,sp,4
81104f58:	05401344 	movi	r21,77
81104f5c:	02c08004 	movi	r11,512
81104f60:	01bf7fc4 	movi	r6,-513
81104f64:	023fdfc4 	movi	r8,-129
81104f68:	20bff544 	addi	r2,r4,-43
81104f6c:	10803fcc 	andi	r2,r2,255
81104f70:	a8807236 	bltu	r21,r2,8110513c <__svfscanf_r+0x1224>
81104f74:	100490ba 	slli	r2,r2,2
81104f78:	01604434 	movhi	r5,33040
81104f7c:	2953e304 	addi	r5,r5,20364
81104f80:	1145883a 	add	r2,r2,r5
81104f84:	10800017 	ldw	r2,0(r2)
81104f88:	1000683a 	jmp	r2
81104f8c:	811051c0 	call	8811051c <__reset+0x20f051c>
81104f90:	8110513c 	xorhi	r4,r16,16708
81104f94:	811051c0 	call	8811051c <__reset+0x20f051c>
81104f98:	8110513c 	xorhi	r4,r16,16708
81104f9c:	8110513c 	xorhi	r4,r16,16708
81104fa0:	81105198 	cmpnei	r4,r16,16710
81104fa4:	81105178 	rdprs	r4,r16,16709
81104fa8:	81105178 	rdprs	r4,r16,16709
81104fac:	81105178 	rdprs	r4,r16,16709
81104fb0:	81105178 	rdprs	r4,r16,16709
81104fb4:	81105178 	rdprs	r4,r16,16709
81104fb8:	81105178 	rdprs	r4,r16,16709
81104fbc:	81105178 	rdprs	r4,r16,16709
81104fc0:	81105120 	cmpeqi	r4,r16,16708
81104fc4:	81105120 	cmpeqi	r4,r16,16708
81104fc8:	8110513c 	xorhi	r4,r16,16708
81104fcc:	8110513c 	xorhi	r4,r16,16708
81104fd0:	8110513c 	xorhi	r4,r16,16708
81104fd4:	8110513c 	xorhi	r4,r16,16708
81104fd8:	8110513c 	xorhi	r4,r16,16708
81104fdc:	8110513c 	xorhi	r4,r16,16708
81104fe0:	8110513c 	xorhi	r4,r16,16708
81104fe4:	8110510c 	andi	r4,r16,16708
81104fe8:	8110510c 	andi	r4,r16,16708
81104fec:	8110510c 	andi	r4,r16,16708
81104ff0:	8110510c 	andi	r4,r16,16708
81104ff4:	8110510c 	andi	r4,r16,16708
81104ff8:	8110510c 	andi	r4,r16,16708
81104ffc:	8110513c 	xorhi	r4,r16,16708
81105000:	8110513c 	xorhi	r4,r16,16708
81105004:	8110513c 	xorhi	r4,r16,16708
81105008:	8110513c 	xorhi	r4,r16,16708
8110500c:	8110513c 	xorhi	r4,r16,16708
81105010:	8110513c 	xorhi	r4,r16,16708
81105014:	8110513c 	xorhi	r4,r16,16708
81105018:	8110513c 	xorhi	r4,r16,16708
8110501c:	8110513c 	xorhi	r4,r16,16708
81105020:	8110513c 	xorhi	r4,r16,16708
81105024:	8110513c 	xorhi	r4,r16,16708
81105028:	8110513c 	xorhi	r4,r16,16708
8110502c:	8110513c 	xorhi	r4,r16,16708
81105030:	8110513c 	xorhi	r4,r16,16708
81105034:	8110513c 	xorhi	r4,r16,16708
81105038:	8110513c 	xorhi	r4,r16,16708
8110503c:	8110513c 	xorhi	r4,r16,16708
81105040:	811050c4 	addi	r4,r16,16707
81105044:	8110513c 	xorhi	r4,r16,16708
81105048:	8110513c 	xorhi	r4,r16,16708
8110504c:	8110513c 	xorhi	r4,r16,16708
81105050:	8110513c 	xorhi	r4,r16,16708
81105054:	8110513c 	xorhi	r4,r16,16708
81105058:	8110513c 	xorhi	r4,r16,16708
8110505c:	8110513c 	xorhi	r4,r16,16708
81105060:	8110513c 	xorhi	r4,r16,16708
81105064:	8110510c 	andi	r4,r16,16708
81105068:	8110510c 	andi	r4,r16,16708
8110506c:	8110510c 	andi	r4,r16,16708
81105070:	8110510c 	andi	r4,r16,16708
81105074:	8110510c 	andi	r4,r16,16708
81105078:	8110510c 	andi	r4,r16,16708
8110507c:	8110513c 	xorhi	r4,r16,16708
81105080:	8110513c 	xorhi	r4,r16,16708
81105084:	8110513c 	xorhi	r4,r16,16708
81105088:	8110513c 	xorhi	r4,r16,16708
8110508c:	8110513c 	xorhi	r4,r16,16708
81105090:	8110513c 	xorhi	r4,r16,16708
81105094:	8110513c 	xorhi	r4,r16,16708
81105098:	8110513c 	xorhi	r4,r16,16708
8110509c:	8110513c 	xorhi	r4,r16,16708
811050a0:	8110513c 	xorhi	r4,r16,16708
811050a4:	8110513c 	xorhi	r4,r16,16708
811050a8:	8110513c 	xorhi	r4,r16,16708
811050ac:	8110513c 	xorhi	r4,r16,16708
811050b0:	8110513c 	xorhi	r4,r16,16708
811050b4:	8110513c 	xorhi	r4,r16,16708
811050b8:	8110513c 	xorhi	r4,r16,16708
811050bc:	8110513c 	xorhi	r4,r16,16708
811050c0:	811050c4 	addi	r4,r16,16707
811050c4:	9081800c 	andi	r2,r18,1536
811050c8:	12c01c1e 	bne	r2,r11,8110513c <__svfscanf_r+0x1224>
811050cc:	91a4703a 	and	r18,r18,r6
811050d0:	94814014 	ori	r18,r18,1280
811050d4:	04400404 	movi	r17,16
811050d8:	81000005 	stb	r4,0(r16)
811050dc:	84000044 	addi	r16,r16,1
811050e0:	e0800117 	ldw	r2,4(fp)
811050e4:	10bfffc4 	addi	r2,r2,-1
811050e8:	e0800115 	stw	r2,4(fp)
811050ec:	0080540e 	bge	zero,r2,81105240 <__svfscanf_r+0x1328>
811050f0:	18c00044 	addi	r3,r3,1
811050f4:	e0c00015 	stw	r3,0(fp)
811050f8:	9cffffc4 	addi	r19,r19,-1
811050fc:	98000f26 	beq	r19,zero,8110513c <__svfscanf_r+0x1224>
81105100:	e0c00017 	ldw	r3,0(fp)
81105104:	19000003 	ldbu	r4,0(r3)
81105108:	003f9706 	br	81104f68 <__reset+0xfb0e4f68>
8110510c:	00800284 	movi	r2,10
81105110:	14400a0e 	bge	r2,r17,8110513c <__svfscanf_r+0x1224>
81105114:	00bd1fc4 	movi	r2,-2945
81105118:	90a4703a 	and	r18,r18,r2
8110511c:	003fee06 	br	811050d8 <__reset+0xfb0e50d8>
81105120:	016044b4 	movhi	r5,33042
81105124:	8c63883a 	add	r17,r17,r17
81105128:	2951dc84 	addi	r5,r5,18290
8110512c:	2c45883a 	add	r2,r5,r17
81105130:	1440000f 	ldh	r17,0(r2)
81105134:	00800204 	movi	r2,8
81105138:	147ff616 	blt	r2,r17,81105114 <__reset+0xfb0e5114>
8110513c:	dc409e15 	stw	r17,632(sp)
81105140:	9023883a 	mov	r17,r18
81105144:	8880400c 	andi	r2,r17,256
81105148:	4825883a 	mov	r18,r9
8110514c:	10000426 	beq	r2,zero,81105160 <__svfscanf_r+0x1248>
81105150:	d9800104 	addi	r6,sp,4
81105154:	3400be36 	bltu	r6,r16,81105450 <__svfscanf_r+0x1538>
81105158:	da000104 	addi	r8,sp,4
8110515c:	443bae26 	beq	r8,r16,81104018 <__reset+0xfb0e4018>
81105160:	8880040c 	andi	r2,r17,16
81105164:	10009326 	beq	r2,zero,811053b4 <__svfscanf_r+0x149c>
81105168:	d8800104 	addi	r2,sp,4
8110516c:	80a1c83a 	sub	r16,r16,r2
81105170:	8521883a 	add	r16,r16,r20
81105174:	003d0606 	br	81104590 <__reset+0xfb0e4590>
81105178:	016044b4 	movhi	r5,33042
8110517c:	8c63883a 	add	r17,r17,r17
81105180:	2951dc84 	addi	r5,r5,18290
81105184:	2c45883a 	add	r2,r5,r17
81105188:	1440000f 	ldh	r17,0(r2)
8110518c:	00bd1fc4 	movi	r2,-2945
81105190:	90a4703a 	and	r18,r18,r2
81105194:	003fd006 	br	811050d8 <__reset+0xfb0e50d8>
81105198:	9082000c 	andi	r2,r18,2048
8110519c:	103fce26 	beq	r2,zero,811050d8 <__reset+0xfb0e50d8>
811051a0:	8800021e 	bne	r17,zero,811051ac <__svfscanf_r+0x1294>
811051a4:	94808014 	ori	r18,r18,512
811051a8:	04400204 	movi	r17,8
811051ac:	9081000c 	andi	r2,r18,1024
811051b0:	10009426 	beq	r2,zero,81105404 <__svfscanf_r+0x14ec>
811051b4:	00be9fc4 	movi	r2,-1409
811051b8:	90a4703a 	and	r18,r18,r2
811051bc:	003fc606 	br	811050d8 <__reset+0xfb0e50d8>
811051c0:	9080200c 	andi	r2,r18,128
811051c4:	103fdd26 	beq	r2,zero,8110513c <__reset+0xfb0e513c>
811051c8:	9224703a 	and	r18,r18,r8
811051cc:	003fc206 	br	811050d8 <__reset+0xfb0e50d8>
811051d0:	9800011e 	bne	r19,zero,811051d8 <__svfscanf_r+0x12c0>
811051d4:	04ffffc4 	movi	r19,-1
811051d8:	8900004c 	andi	r4,r17,1
811051dc:	20005b1e 	bne	r4,zero,8110534c <__svfscanf_r+0x1434>
811051e0:	8c40040c 	andi	r17,r17,16
811051e4:	88003026 	beq	r17,zero,811052a8 <__svfscanf_r+0x1390>
811051e8:	0021883a 	mov	r16,zero
811051ec:	00000306 	br	811051fc <__svfscanf_r+0x12e4>
811051f0:	18800003 	ldbu	r2,0(r3)
811051f4:	3885883a 	add	r2,r7,r2
811051f8:	10800043 	ldbu	r2,1(r2)
811051fc:	1080020c 	andi	r2,r2,8
81105200:	103ce31e 	bne	r2,zero,81104590 <__reset+0xfb0e4590>
81105204:	e0800117 	ldw	r2,4(fp)
81105208:	18c00044 	addi	r3,r3,1
8110520c:	84000044 	addi	r16,r16,1
81105210:	10bfffc4 	addi	r2,r2,-1
81105214:	e0800115 	stw	r2,4(fp)
81105218:	e0c00015 	stw	r3,0(fp)
8110521c:	84fcdc26 	beq	r16,r19,81104590 <__reset+0xfb0e4590>
81105220:	00bff316 	blt	zero,r2,811051f0 <__reset+0xfb0e51f0>
81105224:	e00b883a 	mov	r5,fp
81105228:	b009883a 	mov	r4,r22
8110522c:	11017e00 	call	811017e0 <__srefill_r>
81105230:	103cd71e 	bne	r2,zero,81104590 <__reset+0xfb0e4590>
81105234:	b9c00017 	ldw	r7,0(r23)
81105238:	e0c00017 	ldw	r3,0(fp)
8110523c:	003fec06 	br	811051f0 <__reset+0xfb0e51f0>
81105240:	e00b883a 	mov	r5,fp
81105244:	b009883a 	mov	r4,r22
81105248:	d980a715 	stw	r6,668(sp)
8110524c:	d9c0aa15 	stw	r7,680(sp)
81105250:	da00a815 	stw	r8,672(sp)
81105254:	da40a915 	stw	r9,676(sp)
81105258:	dac0a615 	stw	r11,664(sp)
8110525c:	11017e00 	call	811017e0 <__srefill_r>
81105260:	d980a717 	ldw	r6,668(sp)
81105264:	d9c0aa17 	ldw	r7,680(sp)
81105268:	da00a817 	ldw	r8,672(sp)
8110526c:	da40a917 	ldw	r9,676(sp)
81105270:	dac0a617 	ldw	r11,664(sp)
81105274:	103fa026 	beq	r2,zero,811050f8 <__reset+0xfb0e50f8>
81105278:	003fb006 	br	8110513c <__reset+0xfb0e513c>
8110527c:	8821883a 	mov	r16,r17
81105280:	b019883a 	mov	r12,r22
81105284:	9823883a 	mov	r17,r19
81105288:	182d883a 	mov	r22,r3
8110528c:	00bfbfc4 	movi	r2,-257
81105290:	a0a8703a 	and	r20,r20,r2
81105294:	003e6706 	br	81104c34 <__reset+0xfb0e4c34>
81105298:	000f883a 	mov	r7,zero
8110529c:	003f2806 	br	81104f40 <__reset+0xfb0e4f40>
811052a0:	d800a215 	stw	zero,648(sp)
811052a4:	003de306 	br	81104a34 <__reset+0xfb0e4a34>
811052a8:	da009c17 	ldw	r8,624(sp)
811052ac:	9abfffc4 	addi	r10,r19,-1
811052b0:	44400017 	ldw	r17,0(r8)
811052b4:	44000104 	addi	r16,r8,4
811052b8:	880b883a 	mov	r5,r17
811052bc:	8aa9883a 	add	r20,r17,r10
811052c0:	00000606 	br	811052dc <__svfscanf_r+0x13c4>
811052c4:	e0c00017 	ldw	r3,0(fp)
811052c8:	b9000017 	ldw	r4,0(r23)
811052cc:	a80b883a 	mov	r5,r21
811052d0:	18800003 	ldbu	r2,0(r3)
811052d4:	2085883a 	add	r2,r4,r2
811052d8:	10800043 	ldbu	r2,1(r2)
811052dc:	1080020c 	andi	r2,r2,8
811052e0:	1000551e 	bne	r2,zero,81105438 <__svfscanf_r+0x1520>
811052e4:	e0800117 	ldw	r2,4(fp)
811052e8:	19000044 	addi	r4,r3,1
811052ec:	e1000015 	stw	r4,0(fp)
811052f0:	10bfffc4 	addi	r2,r2,-1
811052f4:	e0800115 	stw	r2,4(fp)
811052f8:	18800003 	ldbu	r2,0(r3)
811052fc:	2d400044 	addi	r21,r5,1
81105300:	a827883a 	mov	r19,r21
81105304:	28800005 	stb	r2,0(r5)
81105308:	2d000626 	beq	r5,r20,81105324 <__svfscanf_r+0x140c>
8110530c:	e0800117 	ldw	r2,4(fp)
81105310:	00bfec16 	blt	zero,r2,811052c4 <__reset+0xfb0e52c4>
81105314:	e00b883a 	mov	r5,fp
81105318:	b009883a 	mov	r4,r22
8110531c:	11017e00 	call	811017e0 <__srefill_r>
81105320:	103fe826 	beq	r2,zero,811052c4 <__reset+0xfb0e52c4>
81105324:	da00a017 	ldw	r8,640(sp)
81105328:	dd009d17 	ldw	r20,628(sp)
8110532c:	9c63c83a 	sub	r17,r19,r17
81105330:	42000044 	addi	r8,r8,1
81105334:	98000005 	stb	zero,0(r19)
81105338:	9465883a 	add	r18,r18,r17
8110533c:	da00a015 	stw	r8,640(sp)
81105340:	dc009c15 	stw	r16,624(sp)
81105344:	a00d883a 	mov	r6,r20
81105348:	003b2f06 	br	81104008 <__reset+0xfb0e4008>
8110534c:	dd409904 	addi	r21,sp,612
81105350:	8c40040c 	andi	r17,r17,16
81105354:	01800204 	movi	r6,8
81105358:	000b883a 	mov	r5,zero
8110535c:	a809883a 	mov	r4,r21
81105360:	11014fc0 	call	811014fc <memset>
81105364:	8800401e 	bne	r17,zero,81105468 <__svfscanf_r+0x1550>
81105368:	da009c17 	ldw	r8,624(sp)
8110536c:	45000017 	ldw	r20,0(r8)
81105370:	42000104 	addi	r8,r8,4
81105374:	da009c15 	stw	r8,624(sp)
81105378:	000d883a 	mov	r6,zero
8110537c:	3021883a 	mov	r16,r6
81105380:	dc409f15 	stw	r17,636(sp)
81105384:	e0800017 	ldw	r2,0(fp)
81105388:	b8c00017 	ldw	r3,0(r23)
8110538c:	10800003 	ldbu	r2,0(r2)
81105390:	1885883a 	add	r2,r3,r2
81105394:	10800043 	ldbu	r2,1(r2)
81105398:	1080020c 	andi	r2,r2,8
8110539c:	1000011e 	bne	r2,zero,811053a4 <__svfscanf_r+0x148c>
811053a0:	9800701e 	bne	r19,zero,81105564 <__svfscanf_r+0x164c>
811053a4:	dc409f17 	ldw	r17,636(sp)
811053a8:	883cdd1e 	bne	r17,zero,81104720 <__reset+0xfb0e4720>
811053ac:	a0000015 	stw	zero,0(r20)
811053b0:	003cd806 	br	81104714 <__reset+0xfb0e4714>
811053b4:	d9c09e17 	ldw	r7,632(sp)
811053b8:	da00a117 	ldw	r8,644(sp)
811053bc:	000d883a 	mov	r6,zero
811053c0:	d9400104 	addi	r5,sp,4
811053c4:	b009883a 	mov	r4,r22
811053c8:	80000005 	stb	zero,0(r16)
811053cc:	403ee83a 	callr	r8
811053d0:	88c0080c 	andi	r3,r17,32
811053d4:	1800121e 	bne	r3,zero,81105420 <__svfscanf_r+0x1508>
811053d8:	88c0010c 	andi	r3,r17,4
811053dc:	18004d26 	beq	r3,zero,81105514 <__svfscanf_r+0x15fc>
811053e0:	da009c17 	ldw	r8,624(sp)
811053e4:	40c00017 	ldw	r3,0(r8)
811053e8:	42000104 	addi	r8,r8,4
811053ec:	da009c15 	stw	r8,624(sp)
811053f0:	1880000d 	sth	r2,0(r3)
811053f4:	da00a017 	ldw	r8,640(sp)
811053f8:	42000044 	addi	r8,r8,1
811053fc:	da00a015 	stw	r8,640(sp)
81105400:	003f5906 	br	81105168 <__reset+0xfb0e5168>
81105404:	00bf1fc4 	movi	r2,-897
81105408:	90a4703a 	and	r18,r18,r2
8110540c:	38000226 	beq	r7,zero,81105418 <__svfscanf_r+0x1500>
81105410:	39ffffc4 	addi	r7,r7,-1
81105414:	9cc00044 	addi	r19,r19,1
81105418:	a5000044 	addi	r20,r20,1
8110541c:	003f3006 	br	811050e0 <__reset+0xfb0e50e0>
81105420:	da009c17 	ldw	r8,624(sp)
81105424:	40c00017 	ldw	r3,0(r8)
81105428:	42000104 	addi	r8,r8,4
8110542c:	da009c15 	stw	r8,624(sp)
81105430:	18800015 	stw	r2,0(r3)
81105434:	003fef06 	br	811053f4 <__reset+0xfb0e53f4>
81105438:	2827883a 	mov	r19,r5
8110543c:	003fb906 	br	81105324 <__reset+0xfb0e5324>
81105440:	01be1fc4 	movi	r6,-1921
81105444:	a1a8703a 	and	r20,r20,r6
81105448:	05400044 	movi	r21,1
8110544c:	003de906 	br	81104bf4 <__reset+0xfb0e4bf4>
81105450:	817fffc7 	ldb	r5,-1(r16)
81105454:	e00d883a 	mov	r6,fp
81105458:	b009883a 	mov	r4,r22
8110545c:	843fffc4 	addi	r16,r16,-1
81105460:	110eaac0 	call	8110eaac <_ungetc_r>
81105464:	003f3c06 	br	81105158 <__reset+0xfb0e5158>
81105468:	dd009b04 	addi	r20,sp,620
8110546c:	003fc206 	br	81105378 <__reset+0xfb0e5378>
81105470:	00be1fc4 	movi	r2,-1921
81105474:	a0a8703a 	and	r20,r20,r2
81105478:	05800044 	movi	r22,1
8110547c:	003ddd06 	br	81104bf4 <__reset+0xfb0e4bf4>
81105480:	d8c09f17 	ldw	r3,636(sp)
81105484:	88e3c83a 	sub	r17,r17,r3
81105488:	044dc83a 	sub	r6,zero,r17
8110548c:	883e2126 	beq	r17,zero,81104d14 <__reset+0xfb0e4d14>
81105490:	d88055c4 	addi	r2,sp,343
81105494:	80800136 	bltu	r16,r2,8110549c <__svfscanf_r+0x1584>
81105498:	dc005584 	addi	r16,sp,342
8110549c:	016044b4 	movhi	r5,33042
811054a0:	2951db04 	addi	r5,r5,18284
811054a4:	8009883a 	mov	r4,r16
811054a8:	110a4d00 	call	8110a4d0 <sprintf>
811054ac:	003e1906 	br	81104d14 <__reset+0xfb0e4d14>
811054b0:	d8c0a517 	ldw	r3,660(sp)
811054b4:	000d883a 	mov	r6,zero
811054b8:	01c00284 	movi	r7,10
811054bc:	19400044 	addi	r5,r3,1
811054c0:	b009883a 	mov	r4,r22
811054c4:	110bd8c0 	call	8110bd8c <_strtol_r>
811054c8:	da00a417 	ldw	r8,656(sp)
811054cc:	dc00a517 	ldw	r16,660(sp)
811054d0:	120dc83a 	sub	r6,r2,r8
811054d4:	003fee06 	br	81105490 <__reset+0xfb0e5490>
811054d8:	da009c17 	ldw	r8,624(sp)
811054dc:	180b883a 	mov	r5,r3
811054e0:	8009883a 	mov	r4,r16
811054e4:	45000017 	ldw	r20,0(r8)
811054e8:	44400104 	addi	r17,r8,4
811054ec:	d8c0a615 	stw	r3,664(sp)
811054f0:	110a32c0 	call	8110a32c <__fpclassifyd>
811054f4:	d8c0a617 	ldw	r3,664(sp)
811054f8:	10006426 	beq	r2,zero,8110568c <__svfscanf_r+0x1774>
811054fc:	8009883a 	mov	r4,r16
81105500:	180b883a 	mov	r5,r3
81105504:	1115ef00 	call	81115ef0 <__truncdfsf2>
81105508:	a0800015 	stw	r2,0(r20)
8110550c:	dc409c15 	stw	r17,624(sp)
81105510:	003e0f06 	br	81104d50 <__reset+0xfb0e4d50>
81105514:	88c0004c 	andi	r3,r17,1
81105518:	183fc11e 	bne	r3,zero,81105420 <__reset+0xfb0e5420>
8110551c:	8c40008c 	andi	r17,r17,2
81105520:	883fbf26 	beq	r17,zero,81105420 <__reset+0xfb0e5420>
81105524:	da00a117 	ldw	r8,644(sp)
81105528:	00a04474 	movhi	r2,33041
8110552c:	10b0b004 	addi	r2,r2,-15680
81105530:	d9c09e17 	ldw	r7,632(sp)
81105534:	000d883a 	mov	r6,zero
81105538:	d9400104 	addi	r5,sp,4
8110553c:	b009883a 	mov	r4,r22
81105540:	40806226 	beq	r8,r2,811056cc <__svfscanf_r+0x17b4>
81105544:	110bfe00 	call	8110bfe0 <_strtoll_r>
81105548:	da009c17 	ldw	r8,624(sp)
8110554c:	41000017 	ldw	r4,0(r8)
81105550:	42000104 	addi	r8,r8,4
81105554:	da009c15 	stw	r8,624(sp)
81105558:	20800015 	stw	r2,0(r4)
8110555c:	20c00115 	stw	r3,4(r4)
81105560:	003fa406 	br	811053f4 <__reset+0xfb0e53f4>
81105564:	110870c0 	call	8110870c <__locale_mb_cur_max>
81105568:	80bca726 	beq	r16,r2,81104808 <__reset+0xfb0e4808>
8110556c:	e0800017 	ldw	r2,0(fp)
81105570:	e1000117 	ldw	r4,4(fp)
81105574:	d8c00104 	addi	r3,sp,4
81105578:	12000003 	ldbu	r8,0(r2)
8110557c:	213fffc4 	addi	r4,r4,-1
81105580:	10800044 	addi	r2,r2,1
81105584:	e1000115 	stw	r4,4(fp)
81105588:	e0800015 	stw	r2,0(fp)
8110558c:	84400044 	addi	r17,r16,1
81105590:	dd400015 	stw	r21,0(sp)
81105594:	1c21883a 	add	r16,r3,r16
81105598:	b009883a 	mov	r4,r22
8110559c:	880f883a 	mov	r7,r17
811055a0:	180d883a 	mov	r6,r3
811055a4:	a00b883a 	mov	r5,r20
811055a8:	82000005 	stb	r8,0(r16)
811055ac:	11087c00 	call	811087c0 <_mbrtowc_r>
811055b0:	013fffc4 	movi	r4,-1
811055b4:	113c9426 	beq	r2,r4,81104808 <__reset+0xfb0e4808>
811055b8:	103c881e 	bne	r2,zero,811047dc <__reset+0xfb0e47dc>
811055bc:	a0000015 	stw	zero,0(r20)
811055c0:	0009883a 	mov	r4,zero
811055c4:	11086540 	call	81108654 <iswspace>
811055c8:	10001a26 	beq	r2,zero,81105634 <__svfscanf_r+0x171c>
811055cc:	8821883a 	mov	r16,r17
811055d0:	dc409f17 	ldw	r17,636(sp)
811055d4:	803f7426 	beq	r16,zero,811053a8 <__reset+0xfb0e53a8>
811055d8:	843fffc4 	addi	r16,r16,-1
811055dc:	d9800104 	addi	r6,sp,4
811055e0:	342b883a 	add	r21,r6,r16
811055e4:	00000106 	br	811055ec <__svfscanf_r+0x16d4>
811055e8:	843fffc4 	addi	r16,r16,-1
811055ec:	a9400003 	ldbu	r5,0(r21)
811055f0:	e00d883a 	mov	r6,fp
811055f4:	b009883a 	mov	r4,r22
811055f8:	110eaac0 	call	8110eaac <_ungetc_r>
811055fc:	ad7fffc4 	addi	r21,r21,-1
81105600:	803ff91e 	bne	r16,zero,811055e8 <__reset+0xfb0e55e8>
81105604:	003f6806 	br	811053a8 <__reset+0xfb0e53a8>
81105608:	d9800104 	addi	r6,sp,4
8110560c:	802b883a 	mov	r21,r16
81105610:	343a812e 	bgeu	r6,r16,81104018 <__reset+0xfb0e4018>
81105614:	ad7fffc4 	addi	r21,r21,-1
81105618:	a9400007 	ldb	r5,0(r21)
8110561c:	e00d883a 	mov	r6,fp
81105620:	b009883a 	mov	r4,r22
81105624:	110eaac0 	call	8110eaac <_ungetc_r>
81105628:	da000104 	addi	r8,sp,4
8110562c:	457ff91e 	bne	r8,r21,81105614 <__reset+0xfb0e5614>
81105630:	003a7906 	br	81104018 <__reset+0xfb0e4018>
81105634:	da009f17 	ldw	r8,636(sp)
81105638:	9465883a 	add	r18,r18,r17
8110563c:	9cffffc4 	addi	r19,r19,-1
81105640:	4000051e 	bne	r8,zero,81105658 <__svfscanf_r+0x1740>
81105644:	a5000104 	addi	r20,r20,4
81105648:	0021883a 	mov	r16,zero
8110564c:	003c6606 	br	811047e8 <__reset+0xfb0e47e8>
81105650:	a1000017 	ldw	r4,0(r20)
81105654:	003fdb06 	br	811055c4 <__reset+0xfb0e55c4>
81105658:	0021883a 	mov	r16,zero
8110565c:	003c6206 	br	811047e8 <__reset+0xfb0e47e8>
81105660:	d8800104 	addi	r2,sp,4
81105664:	802b883a 	mov	r21,r16
81105668:	143a6b2e 	bgeu	r2,r16,81104018 <__reset+0xfb0e4018>
8110566c:	ad7fffc4 	addi	r21,r21,-1
81105670:	a9400007 	ldb	r5,0(r21)
81105674:	e00d883a 	mov	r6,fp
81105678:	b009883a 	mov	r4,r22
8110567c:	110eaac0 	call	8110eaac <_ungetc_r>
81105680:	d8c00104 	addi	r3,sp,4
81105684:	1d7ff91e 	bne	r3,r21,8110566c <__reset+0xfb0e566c>
81105688:	003a6306 	br	81104018 <__reset+0xfb0e4018>
8110568c:	0009883a 	mov	r4,zero
81105690:	110a4700 	call	8110a470 <nanf>
81105694:	a0800015 	stw	r2,0(r20)
81105698:	dc409c15 	stw	r17,624(sp)
8110569c:	003dac06 	br	81104d50 <__reset+0xfb0e4d50>
811056a0:	d9000104 	addi	r4,sp,4
811056a4:	802b883a 	mov	r21,r16
811056a8:	243a5b2e 	bgeu	r4,r16,81104018 <__reset+0xfb0e4018>
811056ac:	ad7fffc4 	addi	r21,r21,-1
811056b0:	a9400007 	ldb	r5,0(r21)
811056b4:	e00d883a 	mov	r6,fp
811056b8:	b009883a 	mov	r4,r22
811056bc:	110eaac0 	call	8110eaac <_ungetc_r>
811056c0:	d9400104 	addi	r5,sp,4
811056c4:	2d7ff91e 	bne	r5,r21,811056ac <__reset+0xfb0e56ac>
811056c8:	003a5306 	br	81104018 <__reset+0xfb0e4018>
811056cc:	110c5280 	call	8110c528 <_strtoull_r>
811056d0:	003f9d06 	br	81105548 <__reset+0xfb0e5548>

811056d4 <vfscanf>:
811056d4:	00a044b4 	movhi	r2,33042
811056d8:	defffb04 	addi	sp,sp,-20
811056dc:	109b9c04 	addi	r2,r2,28272
811056e0:	dc000215 	stw	r16,8(sp)
811056e4:	14000017 	ldw	r16,0(r2)
811056e8:	dc400315 	stw	r17,12(sp)
811056ec:	dfc00415 	stw	ra,16(sp)
811056f0:	2023883a 	mov	r17,r4
811056f4:	80000826 	beq	r16,zero,81105718 <vfscanf+0x44>
811056f8:	80800e17 	ldw	r2,56(r16)
811056fc:	1000061e 	bne	r2,zero,81105718 <vfscanf+0x44>
81105700:	8009883a 	mov	r4,r16
81105704:	d9400015 	stw	r5,0(sp)
81105708:	d9800115 	stw	r6,4(sp)
8110570c:	110782c0 	call	8110782c <__sinit>
81105710:	d9800117 	ldw	r6,4(sp)
81105714:	d9400017 	ldw	r5,0(sp)
81105718:	300f883a 	mov	r7,r6
8110571c:	8009883a 	mov	r4,r16
81105720:	280d883a 	mov	r6,r5
81105724:	880b883a 	mov	r5,r17
81105728:	dfc00417 	ldw	ra,16(sp)
8110572c:	dc400317 	ldw	r17,12(sp)
81105730:	dc000217 	ldw	r16,8(sp)
81105734:	dec00504 	addi	sp,sp,20
81105738:	1103f181 	jmpi	81103f18 <__svfscanf_r>

8110573c <__svfscanf>:
8110573c:	00a044b4 	movhi	r2,33042
81105740:	109b9c04 	addi	r2,r2,28272
81105744:	300f883a 	mov	r7,r6
81105748:	280d883a 	mov	r6,r5
8110574c:	200b883a 	mov	r5,r4
81105750:	11000017 	ldw	r4,0(r2)
81105754:	1103f181 	jmpi	81103f18 <__svfscanf_r>

81105758 <_vfscanf_r>:
81105758:	defffb04 	addi	sp,sp,-20
8110575c:	dc000315 	stw	r16,12(sp)
81105760:	dfc00415 	stw	ra,16(sp)
81105764:	2021883a 	mov	r16,r4
81105768:	20000926 	beq	r4,zero,81105790 <_vfscanf_r+0x38>
8110576c:	20800e17 	ldw	r2,56(r4)
81105770:	1000071e 	bne	r2,zero,81105790 <_vfscanf_r+0x38>
81105774:	d9400015 	stw	r5,0(sp)
81105778:	d9800115 	stw	r6,4(sp)
8110577c:	d9c00215 	stw	r7,8(sp)
81105780:	110782c0 	call	8110782c <__sinit>
81105784:	d9c00217 	ldw	r7,8(sp)
81105788:	d9800117 	ldw	r6,4(sp)
8110578c:	d9400017 	ldw	r5,0(sp)
81105790:	8009883a 	mov	r4,r16
81105794:	dfc00417 	ldw	ra,16(sp)
81105798:	dc000317 	ldw	r16,12(sp)
8110579c:	dec00504 	addi	sp,sp,20
811057a0:	1103f181 	jmpi	81103f18 <__svfscanf_r>

811057a4 <_write_r>:
811057a4:	defffd04 	addi	sp,sp,-12
811057a8:	2805883a 	mov	r2,r5
811057ac:	dc000015 	stw	r16,0(sp)
811057b0:	042044b4 	movhi	r16,33042
811057b4:	dc400115 	stw	r17,4(sp)
811057b8:	300b883a 	mov	r5,r6
811057bc:	841bd104 	addi	r16,r16,28484
811057c0:	2023883a 	mov	r17,r4
811057c4:	380d883a 	mov	r6,r7
811057c8:	1009883a 	mov	r4,r2
811057cc:	dfc00215 	stw	ra,8(sp)
811057d0:	80000015 	stw	zero,0(r16)
811057d4:	1116aa80 	call	81116aa8 <write>
811057d8:	00ffffc4 	movi	r3,-1
811057dc:	10c00526 	beq	r2,r3,811057f4 <_write_r+0x50>
811057e0:	dfc00217 	ldw	ra,8(sp)
811057e4:	dc400117 	ldw	r17,4(sp)
811057e8:	dc000017 	ldw	r16,0(sp)
811057ec:	dec00304 	addi	sp,sp,12
811057f0:	f800283a 	ret
811057f4:	80c00017 	ldw	r3,0(r16)
811057f8:	183ff926 	beq	r3,zero,811057e0 <__reset+0xfb0e57e0>
811057fc:	88c00015 	stw	r3,0(r17)
81105800:	003ff706 	br	811057e0 <__reset+0xfb0e57e0>

81105804 <__swsetup_r>:
81105804:	00a044b4 	movhi	r2,33042
81105808:	defffd04 	addi	sp,sp,-12
8110580c:	109b9c04 	addi	r2,r2,28272
81105810:	dc400115 	stw	r17,4(sp)
81105814:	2023883a 	mov	r17,r4
81105818:	11000017 	ldw	r4,0(r2)
8110581c:	dc000015 	stw	r16,0(sp)
81105820:	dfc00215 	stw	ra,8(sp)
81105824:	2821883a 	mov	r16,r5
81105828:	20000226 	beq	r4,zero,81105834 <__swsetup_r+0x30>
8110582c:	20800e17 	ldw	r2,56(r4)
81105830:	10003126 	beq	r2,zero,811058f8 <__swsetup_r+0xf4>
81105834:	8080030b 	ldhu	r2,12(r16)
81105838:	10c0020c 	andi	r3,r2,8
8110583c:	1009883a 	mov	r4,r2
81105840:	18000f26 	beq	r3,zero,81105880 <__swsetup_r+0x7c>
81105844:	80c00417 	ldw	r3,16(r16)
81105848:	18001526 	beq	r3,zero,811058a0 <__swsetup_r+0x9c>
8110584c:	1100004c 	andi	r4,r2,1
81105850:	20001c1e 	bne	r4,zero,811058c4 <__swsetup_r+0xc0>
81105854:	1080008c 	andi	r2,r2,2
81105858:	1000291e 	bne	r2,zero,81105900 <__swsetup_r+0xfc>
8110585c:	80800517 	ldw	r2,20(r16)
81105860:	80800215 	stw	r2,8(r16)
81105864:	18001c26 	beq	r3,zero,811058d8 <__swsetup_r+0xd4>
81105868:	0005883a 	mov	r2,zero
8110586c:	dfc00217 	ldw	ra,8(sp)
81105870:	dc400117 	ldw	r17,4(sp)
81105874:	dc000017 	ldw	r16,0(sp)
81105878:	dec00304 	addi	sp,sp,12
8110587c:	f800283a 	ret
81105880:	2080040c 	andi	r2,r4,16
81105884:	10002e26 	beq	r2,zero,81105940 <__swsetup_r+0x13c>
81105888:	2080010c 	andi	r2,r4,4
8110588c:	10001e1e 	bne	r2,zero,81105908 <__swsetup_r+0x104>
81105890:	80c00417 	ldw	r3,16(r16)
81105894:	20800214 	ori	r2,r4,8
81105898:	8080030d 	sth	r2,12(r16)
8110589c:	183feb1e 	bne	r3,zero,8110584c <__reset+0xfb0e584c>
811058a0:	1100a00c 	andi	r4,r2,640
811058a4:	01408004 	movi	r5,512
811058a8:	217fe826 	beq	r4,r5,8110584c <__reset+0xfb0e584c>
811058ac:	800b883a 	mov	r5,r16
811058b0:	8809883a 	mov	r4,r17
811058b4:	1100b340 	call	81100b34 <__smakebuf_r>
811058b8:	8080030b 	ldhu	r2,12(r16)
811058bc:	80c00417 	ldw	r3,16(r16)
811058c0:	003fe206 	br	8110584c <__reset+0xfb0e584c>
811058c4:	80800517 	ldw	r2,20(r16)
811058c8:	80000215 	stw	zero,8(r16)
811058cc:	0085c83a 	sub	r2,zero,r2
811058d0:	80800615 	stw	r2,24(r16)
811058d4:	183fe41e 	bne	r3,zero,81105868 <__reset+0xfb0e5868>
811058d8:	80c0030b 	ldhu	r3,12(r16)
811058dc:	0005883a 	mov	r2,zero
811058e0:	1900200c 	andi	r4,r3,128
811058e4:	203fe126 	beq	r4,zero,8110586c <__reset+0xfb0e586c>
811058e8:	18c01014 	ori	r3,r3,64
811058ec:	80c0030d 	sth	r3,12(r16)
811058f0:	00bfffc4 	movi	r2,-1
811058f4:	003fdd06 	br	8110586c <__reset+0xfb0e586c>
811058f8:	110782c0 	call	8110782c <__sinit>
811058fc:	003fcd06 	br	81105834 <__reset+0xfb0e5834>
81105900:	0005883a 	mov	r2,zero
81105904:	003fd606 	br	81105860 <__reset+0xfb0e5860>
81105908:	81400c17 	ldw	r5,48(r16)
8110590c:	28000626 	beq	r5,zero,81105928 <__swsetup_r+0x124>
81105910:	80801004 	addi	r2,r16,64
81105914:	28800326 	beq	r5,r2,81105924 <__swsetup_r+0x120>
81105918:	8809883a 	mov	r4,r17
8110591c:	1107cac0 	call	81107cac <_free_r>
81105920:	8100030b 	ldhu	r4,12(r16)
81105924:	80000c15 	stw	zero,48(r16)
81105928:	80c00417 	ldw	r3,16(r16)
8110592c:	00bff6c4 	movi	r2,-37
81105930:	1108703a 	and	r4,r2,r4
81105934:	80000115 	stw	zero,4(r16)
81105938:	80c00015 	stw	r3,0(r16)
8110593c:	003fd506 	br	81105894 <__reset+0xfb0e5894>
81105940:	00800244 	movi	r2,9
81105944:	88800015 	stw	r2,0(r17)
81105948:	20801014 	ori	r2,r4,64
8110594c:	8080030d 	sth	r2,12(r16)
81105950:	00bfffc4 	movi	r2,-1
81105954:	003fc506 	br	8110586c <__reset+0xfb0e586c>

81105958 <_close_r>:
81105958:	defffd04 	addi	sp,sp,-12
8110595c:	dc000015 	stw	r16,0(sp)
81105960:	042044b4 	movhi	r16,33042
81105964:	dc400115 	stw	r17,4(sp)
81105968:	841bd104 	addi	r16,r16,28484
8110596c:	2023883a 	mov	r17,r4
81105970:	2809883a 	mov	r4,r5
81105974:	dfc00215 	stw	ra,8(sp)
81105978:	80000015 	stw	zero,0(r16)
8110597c:	11161380 	call	81116138 <close>
81105980:	00ffffc4 	movi	r3,-1
81105984:	10c00526 	beq	r2,r3,8110599c <_close_r+0x44>
81105988:	dfc00217 	ldw	ra,8(sp)
8110598c:	dc400117 	ldw	r17,4(sp)
81105990:	dc000017 	ldw	r16,0(sp)
81105994:	dec00304 	addi	sp,sp,12
81105998:	f800283a 	ret
8110599c:	80c00017 	ldw	r3,0(r16)
811059a0:	183ff926 	beq	r3,zero,81105988 <__reset+0xfb0e5988>
811059a4:	88c00015 	stw	r3,0(r17)
811059a8:	003ff706 	br	81105988 <__reset+0xfb0e5988>

811059ac <quorem>:
811059ac:	defff704 	addi	sp,sp,-36
811059b0:	dc800215 	stw	r18,8(sp)
811059b4:	20800417 	ldw	r2,16(r4)
811059b8:	2c800417 	ldw	r18,16(r5)
811059bc:	dfc00815 	stw	ra,32(sp)
811059c0:	ddc00715 	stw	r23,28(sp)
811059c4:	dd800615 	stw	r22,24(sp)
811059c8:	dd400515 	stw	r21,20(sp)
811059cc:	dd000415 	stw	r20,16(sp)
811059d0:	dcc00315 	stw	r19,12(sp)
811059d4:	dc400115 	stw	r17,4(sp)
811059d8:	dc000015 	stw	r16,0(sp)
811059dc:	14807116 	blt	r2,r18,81105ba4 <quorem+0x1f8>
811059e0:	94bfffc4 	addi	r18,r18,-1
811059e4:	94ad883a 	add	r22,r18,r18
811059e8:	b5ad883a 	add	r22,r22,r22
811059ec:	2c400504 	addi	r17,r5,20
811059f0:	8da9883a 	add	r20,r17,r22
811059f4:	25400504 	addi	r21,r4,20
811059f8:	282f883a 	mov	r23,r5
811059fc:	adad883a 	add	r22,r21,r22
81105a00:	a1400017 	ldw	r5,0(r20)
81105a04:	2021883a 	mov	r16,r4
81105a08:	b1000017 	ldw	r4,0(r22)
81105a0c:	29400044 	addi	r5,r5,1
81105a10:	11136340 	call	81113634 <__udivsi3>
81105a14:	1027883a 	mov	r19,r2
81105a18:	10002c26 	beq	r2,zero,81105acc <quorem+0x120>
81105a1c:	a813883a 	mov	r9,r21
81105a20:	880b883a 	mov	r5,r17
81105a24:	0009883a 	mov	r4,zero
81105a28:	000d883a 	mov	r6,zero
81105a2c:	2a000017 	ldw	r8,0(r5)
81105a30:	49c00017 	ldw	r7,0(r9)
81105a34:	29400104 	addi	r5,r5,4
81105a38:	40bfffcc 	andi	r2,r8,65535
81105a3c:	14c5383a 	mul	r2,r2,r19
81105a40:	4010d43a 	srli	r8,r8,16
81105a44:	38ffffcc 	andi	r3,r7,65535
81105a48:	1105883a 	add	r2,r2,r4
81105a4c:	1008d43a 	srli	r4,r2,16
81105a50:	44d1383a 	mul	r8,r8,r19
81105a54:	198d883a 	add	r6,r3,r6
81105a58:	10ffffcc 	andi	r3,r2,65535
81105a5c:	30c7c83a 	sub	r3,r6,r3
81105a60:	380ed43a 	srli	r7,r7,16
81105a64:	4105883a 	add	r2,r8,r4
81105a68:	180dd43a 	srai	r6,r3,16
81105a6c:	113fffcc 	andi	r4,r2,65535
81105a70:	390fc83a 	sub	r7,r7,r4
81105a74:	398d883a 	add	r6,r7,r6
81105a78:	300e943a 	slli	r7,r6,16
81105a7c:	18ffffcc 	andi	r3,r3,65535
81105a80:	1008d43a 	srli	r4,r2,16
81105a84:	38ceb03a 	or	r7,r7,r3
81105a88:	49c00015 	stw	r7,0(r9)
81105a8c:	300dd43a 	srai	r6,r6,16
81105a90:	4a400104 	addi	r9,r9,4
81105a94:	a17fe52e 	bgeu	r20,r5,81105a2c <__reset+0xfb0e5a2c>
81105a98:	b0800017 	ldw	r2,0(r22)
81105a9c:	10000b1e 	bne	r2,zero,81105acc <quorem+0x120>
81105aa0:	b0bfff04 	addi	r2,r22,-4
81105aa4:	a880082e 	bgeu	r21,r2,81105ac8 <quorem+0x11c>
81105aa8:	b0ffff17 	ldw	r3,-4(r22)
81105aac:	18000326 	beq	r3,zero,81105abc <quorem+0x110>
81105ab0:	00000506 	br	81105ac8 <quorem+0x11c>
81105ab4:	10c00017 	ldw	r3,0(r2)
81105ab8:	1800031e 	bne	r3,zero,81105ac8 <quorem+0x11c>
81105abc:	10bfff04 	addi	r2,r2,-4
81105ac0:	94bfffc4 	addi	r18,r18,-1
81105ac4:	a8bffb36 	bltu	r21,r2,81105ab4 <__reset+0xfb0e5ab4>
81105ac8:	84800415 	stw	r18,16(r16)
81105acc:	b80b883a 	mov	r5,r23
81105ad0:	8009883a 	mov	r4,r16
81105ad4:	11096340 	call	81109634 <__mcmp>
81105ad8:	10002616 	blt	r2,zero,81105b74 <quorem+0x1c8>
81105adc:	9cc00044 	addi	r19,r19,1
81105ae0:	a805883a 	mov	r2,r21
81105ae4:	000b883a 	mov	r5,zero
81105ae8:	11000017 	ldw	r4,0(r2)
81105aec:	89800017 	ldw	r6,0(r17)
81105af0:	10800104 	addi	r2,r2,4
81105af4:	20ffffcc 	andi	r3,r4,65535
81105af8:	194b883a 	add	r5,r3,r5
81105afc:	30ffffcc 	andi	r3,r6,65535
81105b00:	28c7c83a 	sub	r3,r5,r3
81105b04:	300cd43a 	srli	r6,r6,16
81105b08:	2008d43a 	srli	r4,r4,16
81105b0c:	180bd43a 	srai	r5,r3,16
81105b10:	18ffffcc 	andi	r3,r3,65535
81105b14:	2189c83a 	sub	r4,r4,r6
81105b18:	2149883a 	add	r4,r4,r5
81105b1c:	200c943a 	slli	r6,r4,16
81105b20:	8c400104 	addi	r17,r17,4
81105b24:	200bd43a 	srai	r5,r4,16
81105b28:	30c6b03a 	or	r3,r6,r3
81105b2c:	10ffff15 	stw	r3,-4(r2)
81105b30:	a47fed2e 	bgeu	r20,r17,81105ae8 <__reset+0xfb0e5ae8>
81105b34:	9485883a 	add	r2,r18,r18
81105b38:	1085883a 	add	r2,r2,r2
81105b3c:	a887883a 	add	r3,r21,r2
81105b40:	18800017 	ldw	r2,0(r3)
81105b44:	10000b1e 	bne	r2,zero,81105b74 <quorem+0x1c8>
81105b48:	18bfff04 	addi	r2,r3,-4
81105b4c:	a880082e 	bgeu	r21,r2,81105b70 <quorem+0x1c4>
81105b50:	18ffff17 	ldw	r3,-4(r3)
81105b54:	18000326 	beq	r3,zero,81105b64 <quorem+0x1b8>
81105b58:	00000506 	br	81105b70 <quorem+0x1c4>
81105b5c:	10c00017 	ldw	r3,0(r2)
81105b60:	1800031e 	bne	r3,zero,81105b70 <quorem+0x1c4>
81105b64:	10bfff04 	addi	r2,r2,-4
81105b68:	94bfffc4 	addi	r18,r18,-1
81105b6c:	a8bffb36 	bltu	r21,r2,81105b5c <__reset+0xfb0e5b5c>
81105b70:	84800415 	stw	r18,16(r16)
81105b74:	9805883a 	mov	r2,r19
81105b78:	dfc00817 	ldw	ra,32(sp)
81105b7c:	ddc00717 	ldw	r23,28(sp)
81105b80:	dd800617 	ldw	r22,24(sp)
81105b84:	dd400517 	ldw	r21,20(sp)
81105b88:	dd000417 	ldw	r20,16(sp)
81105b8c:	dcc00317 	ldw	r19,12(sp)
81105b90:	dc800217 	ldw	r18,8(sp)
81105b94:	dc400117 	ldw	r17,4(sp)
81105b98:	dc000017 	ldw	r16,0(sp)
81105b9c:	dec00904 	addi	sp,sp,36
81105ba0:	f800283a 	ret
81105ba4:	0005883a 	mov	r2,zero
81105ba8:	003ff306 	br	81105b78 <__reset+0xfb0e5b78>

81105bac <_dtoa_r>:
81105bac:	20801017 	ldw	r2,64(r4)
81105bb0:	deffde04 	addi	sp,sp,-136
81105bb4:	df002015 	stw	fp,128(sp)
81105bb8:	dcc01b15 	stw	r19,108(sp)
81105bbc:	dc801a15 	stw	r18,104(sp)
81105bc0:	dc401915 	stw	r17,100(sp)
81105bc4:	dc001815 	stw	r16,96(sp)
81105bc8:	dfc02115 	stw	ra,132(sp)
81105bcc:	ddc01f15 	stw	r23,124(sp)
81105bd0:	dd801e15 	stw	r22,120(sp)
81105bd4:	dd401d15 	stw	r21,116(sp)
81105bd8:	dd001c15 	stw	r20,112(sp)
81105bdc:	d9c00315 	stw	r7,12(sp)
81105be0:	2039883a 	mov	fp,r4
81105be4:	3023883a 	mov	r17,r6
81105be8:	2825883a 	mov	r18,r5
81105bec:	dc002417 	ldw	r16,144(sp)
81105bf0:	3027883a 	mov	r19,r6
81105bf4:	10000826 	beq	r2,zero,81105c18 <_dtoa_r+0x6c>
81105bf8:	21801117 	ldw	r6,68(r4)
81105bfc:	00c00044 	movi	r3,1
81105c00:	100b883a 	mov	r5,r2
81105c04:	1986983a 	sll	r3,r3,r6
81105c08:	11800115 	stw	r6,4(r2)
81105c0c:	10c00215 	stw	r3,8(r2)
81105c10:	1108e140 	call	81108e14 <_Bfree>
81105c14:	e0001015 	stw	zero,64(fp)
81105c18:	88002e16 	blt	r17,zero,81105cd4 <_dtoa_r+0x128>
81105c1c:	80000015 	stw	zero,0(r16)
81105c20:	889ffc2c 	andhi	r2,r17,32752
81105c24:	00dffc34 	movhi	r3,32752
81105c28:	10c01c26 	beq	r2,r3,81105c9c <_dtoa_r+0xf0>
81105c2c:	000d883a 	mov	r6,zero
81105c30:	000f883a 	mov	r7,zero
81105c34:	9009883a 	mov	r4,r18
81105c38:	980b883a 	mov	r5,r19
81105c3c:	1114a800 	call	81114a80 <__eqdf2>
81105c40:	10002b1e 	bne	r2,zero,81105cf0 <_dtoa_r+0x144>
81105c44:	d9c02317 	ldw	r7,140(sp)
81105c48:	00800044 	movi	r2,1
81105c4c:	38800015 	stw	r2,0(r7)
81105c50:	d8802517 	ldw	r2,148(sp)
81105c54:	10019e26 	beq	r2,zero,811062d0 <_dtoa_r+0x724>
81105c58:	d8c02517 	ldw	r3,148(sp)
81105c5c:	00a044b4 	movhi	r2,33042
81105c60:	1091d244 	addi	r2,r2,18249
81105c64:	18800015 	stw	r2,0(r3)
81105c68:	10bfffc4 	addi	r2,r2,-1
81105c6c:	dfc02117 	ldw	ra,132(sp)
81105c70:	df002017 	ldw	fp,128(sp)
81105c74:	ddc01f17 	ldw	r23,124(sp)
81105c78:	dd801e17 	ldw	r22,120(sp)
81105c7c:	dd401d17 	ldw	r21,116(sp)
81105c80:	dd001c17 	ldw	r20,112(sp)
81105c84:	dcc01b17 	ldw	r19,108(sp)
81105c88:	dc801a17 	ldw	r18,104(sp)
81105c8c:	dc401917 	ldw	r17,100(sp)
81105c90:	dc001817 	ldw	r16,96(sp)
81105c94:	dec02204 	addi	sp,sp,136
81105c98:	f800283a 	ret
81105c9c:	d8c02317 	ldw	r3,140(sp)
81105ca0:	0089c3c4 	movi	r2,9999
81105ca4:	18800015 	stw	r2,0(r3)
81105ca8:	90017726 	beq	r18,zero,81106288 <_dtoa_r+0x6dc>
81105cac:	00a044b4 	movhi	r2,33042
81105cb0:	10928904 	addi	r2,r2,18980
81105cb4:	d9002517 	ldw	r4,148(sp)
81105cb8:	203fec26 	beq	r4,zero,81105c6c <__reset+0xfb0e5c6c>
81105cbc:	10c000c7 	ldb	r3,3(r2)
81105cc0:	1801781e 	bne	r3,zero,811062a4 <_dtoa_r+0x6f8>
81105cc4:	10c000c4 	addi	r3,r2,3
81105cc8:	d9802517 	ldw	r6,148(sp)
81105ccc:	30c00015 	stw	r3,0(r6)
81105cd0:	003fe606 	br	81105c6c <__reset+0xfb0e5c6c>
81105cd4:	04e00034 	movhi	r19,32768
81105cd8:	9cffffc4 	addi	r19,r19,-1
81105cdc:	00800044 	movi	r2,1
81105ce0:	8ce6703a 	and	r19,r17,r19
81105ce4:	80800015 	stw	r2,0(r16)
81105ce8:	9823883a 	mov	r17,r19
81105cec:	003fcc06 	br	81105c20 <__reset+0xfb0e5c20>
81105cf0:	d8800204 	addi	r2,sp,8
81105cf4:	d8800015 	stw	r2,0(sp)
81105cf8:	d9c00104 	addi	r7,sp,4
81105cfc:	900b883a 	mov	r5,r18
81105d00:	980d883a 	mov	r6,r19
81105d04:	e009883a 	mov	r4,fp
81105d08:	8820d53a 	srli	r16,r17,20
81105d0c:	1109a000 	call	81109a00 <__d2b>
81105d10:	d8800915 	stw	r2,36(sp)
81105d14:	8001651e 	bne	r16,zero,811062ac <_dtoa_r+0x700>
81105d18:	dd800217 	ldw	r22,8(sp)
81105d1c:	dc000117 	ldw	r16,4(sp)
81105d20:	00800804 	movi	r2,32
81105d24:	b421883a 	add	r16,r22,r16
81105d28:	80c10c84 	addi	r3,r16,1074
81105d2c:	10c2d10e 	bge	r2,r3,81106874 <_dtoa_r+0xcc8>
81105d30:	00801004 	movi	r2,64
81105d34:	81010484 	addi	r4,r16,1042
81105d38:	10c7c83a 	sub	r3,r2,r3
81105d3c:	9108d83a 	srl	r4,r18,r4
81105d40:	88e2983a 	sll	r17,r17,r3
81105d44:	2448b03a 	or	r4,r4,r17
81105d48:	1115e480 	call	81115e48 <__floatunsidf>
81105d4c:	017f8434 	movhi	r5,65040
81105d50:	01800044 	movi	r6,1
81105d54:	1009883a 	mov	r4,r2
81105d58:	194b883a 	add	r5,r3,r5
81105d5c:	843fffc4 	addi	r16,r16,-1
81105d60:	d9801115 	stw	r6,68(sp)
81105d64:	000d883a 	mov	r6,zero
81105d68:	01cffe34 	movhi	r7,16376
81105d6c:	11153f00 	call	811153f0 <__subdf3>
81105d70:	0198dbf4 	movhi	r6,25455
81105d74:	01cff4f4 	movhi	r7,16339
81105d78:	3190d844 	addi	r6,r6,17249
81105d7c:	39e1e9c4 	addi	r7,r7,-30809
81105d80:	1009883a 	mov	r4,r2
81105d84:	180b883a 	mov	r5,r3
81105d88:	1114cd80 	call	81114cd8 <__muldf3>
81105d8c:	01a2d874 	movhi	r6,35681
81105d90:	01cff1f4 	movhi	r7,16327
81105d94:	31b22cc4 	addi	r6,r6,-14157
81105d98:	39e28a04 	addi	r7,r7,-30168
81105d9c:	180b883a 	mov	r5,r3
81105da0:	1009883a 	mov	r4,r2
81105da4:	11138ec0 	call	811138ec <__adddf3>
81105da8:	8009883a 	mov	r4,r16
81105dac:	1029883a 	mov	r20,r2
81105db0:	1823883a 	mov	r17,r3
81105db4:	1115d6c0 	call	81115d6c <__floatsidf>
81105db8:	019427f4 	movhi	r6,20639
81105dbc:	01cff4f4 	movhi	r7,16339
81105dc0:	319e7ec4 	addi	r6,r6,31227
81105dc4:	39d104c4 	addi	r7,r7,17427
81105dc8:	1009883a 	mov	r4,r2
81105dcc:	180b883a 	mov	r5,r3
81105dd0:	1114cd80 	call	81114cd8 <__muldf3>
81105dd4:	100d883a 	mov	r6,r2
81105dd8:	180f883a 	mov	r7,r3
81105ddc:	a009883a 	mov	r4,r20
81105de0:	880b883a 	mov	r5,r17
81105de4:	11138ec0 	call	811138ec <__adddf3>
81105de8:	1009883a 	mov	r4,r2
81105dec:	180b883a 	mov	r5,r3
81105df0:	1029883a 	mov	r20,r2
81105df4:	1823883a 	mov	r17,r3
81105df8:	1115cec0 	call	81115cec <__fixdfsi>
81105dfc:	000d883a 	mov	r6,zero
81105e00:	000f883a 	mov	r7,zero
81105e04:	a009883a 	mov	r4,r20
81105e08:	880b883a 	mov	r5,r17
81105e0c:	d8800515 	stw	r2,20(sp)
81105e10:	1114be40 	call	81114be4 <__ledf2>
81105e14:	10028716 	blt	r2,zero,81106834 <_dtoa_r+0xc88>
81105e18:	d8c00517 	ldw	r3,20(sp)
81105e1c:	00800584 	movi	r2,22
81105e20:	10c27536 	bltu	r2,r3,811067f8 <_dtoa_r+0xc4c>
81105e24:	180490fa 	slli	r2,r3,3
81105e28:	00e044b4 	movhi	r3,33042
81105e2c:	18d2a404 	addi	r3,r3,19088
81105e30:	1885883a 	add	r2,r3,r2
81105e34:	11000017 	ldw	r4,0(r2)
81105e38:	11400117 	ldw	r5,4(r2)
81105e3c:	900d883a 	mov	r6,r18
81105e40:	980f883a 	mov	r7,r19
81105e44:	1114b080 	call	81114b08 <__gedf2>
81105e48:	00828d0e 	bge	zero,r2,81106880 <_dtoa_r+0xcd4>
81105e4c:	d9000517 	ldw	r4,20(sp)
81105e50:	d8000e15 	stw	zero,56(sp)
81105e54:	213fffc4 	addi	r4,r4,-1
81105e58:	d9000515 	stw	r4,20(sp)
81105e5c:	b42dc83a 	sub	r22,r22,r16
81105e60:	b5bfffc4 	addi	r22,r22,-1
81105e64:	b0026f16 	blt	r22,zero,81106824 <_dtoa_r+0xc78>
81105e68:	d8000815 	stw	zero,32(sp)
81105e6c:	d9c00517 	ldw	r7,20(sp)
81105e70:	38026416 	blt	r7,zero,81106804 <_dtoa_r+0xc58>
81105e74:	b1ed883a 	add	r22,r22,r7
81105e78:	d9c00d15 	stw	r7,52(sp)
81105e7c:	d8000a15 	stw	zero,40(sp)
81105e80:	d9800317 	ldw	r6,12(sp)
81105e84:	00800244 	movi	r2,9
81105e88:	11811436 	bltu	r2,r6,811062dc <_dtoa_r+0x730>
81105e8c:	00800144 	movi	r2,5
81105e90:	1184e10e 	bge	r2,r6,81107218 <_dtoa_r+0x166c>
81105e94:	31bfff04 	addi	r6,r6,-4
81105e98:	d9800315 	stw	r6,12(sp)
81105e9c:	0023883a 	mov	r17,zero
81105ea0:	d9800317 	ldw	r6,12(sp)
81105ea4:	008000c4 	movi	r2,3
81105ea8:	30836726 	beq	r6,r2,81106c48 <_dtoa_r+0x109c>
81105eac:	1183410e 	bge	r2,r6,81106bb4 <_dtoa_r+0x1008>
81105eb0:	d9c00317 	ldw	r7,12(sp)
81105eb4:	00800104 	movi	r2,4
81105eb8:	38827c26 	beq	r7,r2,811068ac <_dtoa_r+0xd00>
81105ebc:	00800144 	movi	r2,5
81105ec0:	3884c41e 	bne	r7,r2,811071d4 <_dtoa_r+0x1628>
81105ec4:	00800044 	movi	r2,1
81105ec8:	d8800b15 	stw	r2,44(sp)
81105ecc:	d8c00517 	ldw	r3,20(sp)
81105ed0:	d9002217 	ldw	r4,136(sp)
81105ed4:	1907883a 	add	r3,r3,r4
81105ed8:	19800044 	addi	r6,r3,1
81105edc:	d8c00c15 	stw	r3,48(sp)
81105ee0:	d9800615 	stw	r6,24(sp)
81105ee4:	0183a40e 	bge	zero,r6,81106d78 <_dtoa_r+0x11cc>
81105ee8:	d9800617 	ldw	r6,24(sp)
81105eec:	3021883a 	mov	r16,r6
81105ef0:	e0001115 	stw	zero,68(fp)
81105ef4:	008005c4 	movi	r2,23
81105ef8:	1184c92e 	bgeu	r2,r6,81107220 <_dtoa_r+0x1674>
81105efc:	00c00044 	movi	r3,1
81105f00:	00800104 	movi	r2,4
81105f04:	1085883a 	add	r2,r2,r2
81105f08:	11000504 	addi	r4,r2,20
81105f0c:	180b883a 	mov	r5,r3
81105f10:	18c00044 	addi	r3,r3,1
81105f14:	313ffb2e 	bgeu	r6,r4,81105f04 <__reset+0xfb0e5f04>
81105f18:	e1401115 	stw	r5,68(fp)
81105f1c:	e009883a 	mov	r4,fp
81105f20:	1108d6c0 	call	81108d6c <_Balloc>
81105f24:	d8800715 	stw	r2,28(sp)
81105f28:	e0801015 	stw	r2,64(fp)
81105f2c:	00800384 	movi	r2,14
81105f30:	1400f736 	bltu	r2,r16,81106310 <_dtoa_r+0x764>
81105f34:	8800f626 	beq	r17,zero,81106310 <_dtoa_r+0x764>
81105f38:	d9c00517 	ldw	r7,20(sp)
81105f3c:	01c39a0e 	bge	zero,r7,81106da8 <_dtoa_r+0x11fc>
81105f40:	388003cc 	andi	r2,r7,15
81105f44:	100490fa 	slli	r2,r2,3
81105f48:	382bd13a 	srai	r21,r7,4
81105f4c:	00e044b4 	movhi	r3,33042
81105f50:	18d2a404 	addi	r3,r3,19088
81105f54:	1885883a 	add	r2,r3,r2
81105f58:	a8c0040c 	andi	r3,r21,16
81105f5c:	12400017 	ldw	r9,0(r2)
81105f60:	12000117 	ldw	r8,4(r2)
81105f64:	18037926 	beq	r3,zero,81106d4c <_dtoa_r+0x11a0>
81105f68:	00a044b4 	movhi	r2,33042
81105f6c:	10929a04 	addi	r2,r2,19048
81105f70:	11800817 	ldw	r6,32(r2)
81105f74:	11c00917 	ldw	r7,36(r2)
81105f78:	9009883a 	mov	r4,r18
81105f7c:	980b883a 	mov	r5,r19
81105f80:	da001715 	stw	r8,92(sp)
81105f84:	da401615 	stw	r9,88(sp)
81105f88:	11141980 	call	81114198 <__divdf3>
81105f8c:	da001717 	ldw	r8,92(sp)
81105f90:	da401617 	ldw	r9,88(sp)
81105f94:	ad4003cc 	andi	r21,r21,15
81105f98:	040000c4 	movi	r16,3
81105f9c:	1023883a 	mov	r17,r2
81105fa0:	1829883a 	mov	r20,r3
81105fa4:	a8001126 	beq	r21,zero,81105fec <_dtoa_r+0x440>
81105fa8:	05e044b4 	movhi	r23,33042
81105fac:	bdd29a04 	addi	r23,r23,19048
81105fb0:	4805883a 	mov	r2,r9
81105fb4:	4007883a 	mov	r3,r8
81105fb8:	a980004c 	andi	r6,r21,1
81105fbc:	1009883a 	mov	r4,r2
81105fc0:	a82bd07a 	srai	r21,r21,1
81105fc4:	180b883a 	mov	r5,r3
81105fc8:	30000426 	beq	r6,zero,81105fdc <_dtoa_r+0x430>
81105fcc:	b9800017 	ldw	r6,0(r23)
81105fd0:	b9c00117 	ldw	r7,4(r23)
81105fd4:	84000044 	addi	r16,r16,1
81105fd8:	1114cd80 	call	81114cd8 <__muldf3>
81105fdc:	bdc00204 	addi	r23,r23,8
81105fe0:	a83ff51e 	bne	r21,zero,81105fb8 <__reset+0xfb0e5fb8>
81105fe4:	1013883a 	mov	r9,r2
81105fe8:	1811883a 	mov	r8,r3
81105fec:	480d883a 	mov	r6,r9
81105ff0:	400f883a 	mov	r7,r8
81105ff4:	8809883a 	mov	r4,r17
81105ff8:	a00b883a 	mov	r5,r20
81105ffc:	11141980 	call	81114198 <__divdf3>
81106000:	d8800f15 	stw	r2,60(sp)
81106004:	d8c01015 	stw	r3,64(sp)
81106008:	d8c00e17 	ldw	r3,56(sp)
8110600c:	18000626 	beq	r3,zero,81106028 <_dtoa_r+0x47c>
81106010:	d9000f17 	ldw	r4,60(sp)
81106014:	d9401017 	ldw	r5,64(sp)
81106018:	000d883a 	mov	r6,zero
8110601c:	01cffc34 	movhi	r7,16368
81106020:	1114be40 	call	81114be4 <__ledf2>
81106024:	10040b16 	blt	r2,zero,81107054 <_dtoa_r+0x14a8>
81106028:	8009883a 	mov	r4,r16
8110602c:	1115d6c0 	call	81115d6c <__floatsidf>
81106030:	d9800f17 	ldw	r6,60(sp)
81106034:	d9c01017 	ldw	r7,64(sp)
81106038:	1009883a 	mov	r4,r2
8110603c:	180b883a 	mov	r5,r3
81106040:	1114cd80 	call	81114cd8 <__muldf3>
81106044:	000d883a 	mov	r6,zero
81106048:	01d00734 	movhi	r7,16412
8110604c:	1009883a 	mov	r4,r2
81106050:	180b883a 	mov	r5,r3
81106054:	11138ec0 	call	811138ec <__adddf3>
81106058:	1021883a 	mov	r16,r2
8110605c:	d8800617 	ldw	r2,24(sp)
81106060:	047f3034 	movhi	r17,64704
81106064:	1c63883a 	add	r17,r3,r17
81106068:	10031826 	beq	r2,zero,81106ccc <_dtoa_r+0x1120>
8110606c:	d8c00517 	ldw	r3,20(sp)
81106070:	db000617 	ldw	r12,24(sp)
81106074:	d8c01315 	stw	r3,76(sp)
81106078:	d9000b17 	ldw	r4,44(sp)
8110607c:	20038f26 	beq	r4,zero,81106ebc <_dtoa_r+0x1310>
81106080:	60bfffc4 	addi	r2,r12,-1
81106084:	100490fa 	slli	r2,r2,3
81106088:	00e044b4 	movhi	r3,33042
8110608c:	18d2a404 	addi	r3,r3,19088
81106090:	1885883a 	add	r2,r3,r2
81106094:	11800017 	ldw	r6,0(r2)
81106098:	11c00117 	ldw	r7,4(r2)
8110609c:	d8800717 	ldw	r2,28(sp)
811060a0:	0009883a 	mov	r4,zero
811060a4:	014ff834 	movhi	r5,16352
811060a8:	db001615 	stw	r12,88(sp)
811060ac:	15c00044 	addi	r23,r2,1
811060b0:	11141980 	call	81114198 <__divdf3>
811060b4:	800d883a 	mov	r6,r16
811060b8:	880f883a 	mov	r7,r17
811060bc:	1009883a 	mov	r4,r2
811060c0:	180b883a 	mov	r5,r3
811060c4:	11153f00 	call	811153f0 <__subdf3>
811060c8:	d9401017 	ldw	r5,64(sp)
811060cc:	d9000f17 	ldw	r4,60(sp)
811060d0:	102b883a 	mov	r21,r2
811060d4:	d8c01215 	stw	r3,72(sp)
811060d8:	1115cec0 	call	81115cec <__fixdfsi>
811060dc:	1009883a 	mov	r4,r2
811060e0:	1029883a 	mov	r20,r2
811060e4:	1115d6c0 	call	81115d6c <__floatsidf>
811060e8:	d9000f17 	ldw	r4,60(sp)
811060ec:	d9401017 	ldw	r5,64(sp)
811060f0:	100d883a 	mov	r6,r2
811060f4:	180f883a 	mov	r7,r3
811060f8:	11153f00 	call	811153f0 <__subdf3>
811060fc:	1823883a 	mov	r17,r3
81106100:	d8c00717 	ldw	r3,28(sp)
81106104:	d9401217 	ldw	r5,72(sp)
81106108:	a2000c04 	addi	r8,r20,48
8110610c:	1021883a 	mov	r16,r2
81106110:	1a000005 	stb	r8,0(r3)
81106114:	800d883a 	mov	r6,r16
81106118:	880f883a 	mov	r7,r17
8110611c:	a809883a 	mov	r4,r21
81106120:	4029883a 	mov	r20,r8
81106124:	1114b080 	call	81114b08 <__gedf2>
81106128:	00841d16 	blt	zero,r2,811071a0 <_dtoa_r+0x15f4>
8110612c:	800d883a 	mov	r6,r16
81106130:	880f883a 	mov	r7,r17
81106134:	0009883a 	mov	r4,zero
81106138:	014ffc34 	movhi	r5,16368
8110613c:	11153f00 	call	811153f0 <__subdf3>
81106140:	d9401217 	ldw	r5,72(sp)
81106144:	100d883a 	mov	r6,r2
81106148:	180f883a 	mov	r7,r3
8110614c:	a809883a 	mov	r4,r21
81106150:	1114b080 	call	81114b08 <__gedf2>
81106154:	db001617 	ldw	r12,88(sp)
81106158:	00840e16 	blt	zero,r2,81107194 <_dtoa_r+0x15e8>
8110615c:	00800044 	movi	r2,1
81106160:	13006b0e 	bge	r2,r12,81106310 <_dtoa_r+0x764>
81106164:	d9000717 	ldw	r4,28(sp)
81106168:	dd800f15 	stw	r22,60(sp)
8110616c:	dcc01015 	stw	r19,64(sp)
81106170:	2319883a 	add	r12,r4,r12
81106174:	dcc01217 	ldw	r19,72(sp)
81106178:	602d883a 	mov	r22,r12
8110617c:	dc801215 	stw	r18,72(sp)
81106180:	b825883a 	mov	r18,r23
81106184:	00000906 	br	811061ac <_dtoa_r+0x600>
81106188:	11153f00 	call	811153f0 <__subdf3>
8110618c:	a80d883a 	mov	r6,r21
81106190:	980f883a 	mov	r7,r19
81106194:	1009883a 	mov	r4,r2
81106198:	180b883a 	mov	r5,r3
8110619c:	1114be40 	call	81114be4 <__ledf2>
811061a0:	1003e816 	blt	r2,zero,81107144 <_dtoa_r+0x1598>
811061a4:	b825883a 	mov	r18,r23
811061a8:	bd83e926 	beq	r23,r22,81107150 <_dtoa_r+0x15a4>
811061ac:	a809883a 	mov	r4,r21
811061b0:	980b883a 	mov	r5,r19
811061b4:	000d883a 	mov	r6,zero
811061b8:	01d00934 	movhi	r7,16420
811061bc:	1114cd80 	call	81114cd8 <__muldf3>
811061c0:	000d883a 	mov	r6,zero
811061c4:	01d00934 	movhi	r7,16420
811061c8:	8009883a 	mov	r4,r16
811061cc:	880b883a 	mov	r5,r17
811061d0:	102b883a 	mov	r21,r2
811061d4:	1827883a 	mov	r19,r3
811061d8:	1114cd80 	call	81114cd8 <__muldf3>
811061dc:	180b883a 	mov	r5,r3
811061e0:	1009883a 	mov	r4,r2
811061e4:	1821883a 	mov	r16,r3
811061e8:	1023883a 	mov	r17,r2
811061ec:	1115cec0 	call	81115cec <__fixdfsi>
811061f0:	1009883a 	mov	r4,r2
811061f4:	1029883a 	mov	r20,r2
811061f8:	1115d6c0 	call	81115d6c <__floatsidf>
811061fc:	8809883a 	mov	r4,r17
81106200:	800b883a 	mov	r5,r16
81106204:	100d883a 	mov	r6,r2
81106208:	180f883a 	mov	r7,r3
8110620c:	11153f00 	call	811153f0 <__subdf3>
81106210:	a5000c04 	addi	r20,r20,48
81106214:	a80d883a 	mov	r6,r21
81106218:	980f883a 	mov	r7,r19
8110621c:	1009883a 	mov	r4,r2
81106220:	180b883a 	mov	r5,r3
81106224:	95000005 	stb	r20,0(r18)
81106228:	1021883a 	mov	r16,r2
8110622c:	1823883a 	mov	r17,r3
81106230:	1114be40 	call	81114be4 <__ledf2>
81106234:	bdc00044 	addi	r23,r23,1
81106238:	800d883a 	mov	r6,r16
8110623c:	880f883a 	mov	r7,r17
81106240:	0009883a 	mov	r4,zero
81106244:	014ffc34 	movhi	r5,16368
81106248:	103fcf0e 	bge	r2,zero,81106188 <__reset+0xfb0e6188>
8110624c:	d8c01317 	ldw	r3,76(sp)
81106250:	d8c00515 	stw	r3,20(sp)
81106254:	d9400917 	ldw	r5,36(sp)
81106258:	e009883a 	mov	r4,fp
8110625c:	1108e140 	call	81108e14 <_Bfree>
81106260:	d9000517 	ldw	r4,20(sp)
81106264:	d9802317 	ldw	r6,140(sp)
81106268:	d9c02517 	ldw	r7,148(sp)
8110626c:	b8000005 	stb	zero,0(r23)
81106270:	20800044 	addi	r2,r4,1
81106274:	30800015 	stw	r2,0(r6)
81106278:	3802aa26 	beq	r7,zero,81106d24 <_dtoa_r+0x1178>
8110627c:	3dc00015 	stw	r23,0(r7)
81106280:	d8800717 	ldw	r2,28(sp)
81106284:	003e7906 	br	81105c6c <__reset+0xfb0e5c6c>
81106288:	00800434 	movhi	r2,16
8110628c:	10bfffc4 	addi	r2,r2,-1
81106290:	88a2703a 	and	r17,r17,r2
81106294:	883e851e 	bne	r17,zero,81105cac <__reset+0xfb0e5cac>
81106298:	00a044b4 	movhi	r2,33042
8110629c:	10928604 	addi	r2,r2,18968
811062a0:	003e8406 	br	81105cb4 <__reset+0xfb0e5cb4>
811062a4:	10c00204 	addi	r3,r2,8
811062a8:	003e8706 	br	81105cc8 <__reset+0xfb0e5cc8>
811062ac:	01400434 	movhi	r5,16
811062b0:	297fffc4 	addi	r5,r5,-1
811062b4:	994a703a 	and	r5,r19,r5
811062b8:	9009883a 	mov	r4,r18
811062bc:	843f0044 	addi	r16,r16,-1023
811062c0:	294ffc34 	orhi	r5,r5,16368
811062c4:	dd800217 	ldw	r22,8(sp)
811062c8:	d8001115 	stw	zero,68(sp)
811062cc:	003ea506 	br	81105d64 <__reset+0xfb0e5d64>
811062d0:	00a044b4 	movhi	r2,33042
811062d4:	1091d204 	addi	r2,r2,18248
811062d8:	003e6406 	br	81105c6c <__reset+0xfb0e5c6c>
811062dc:	e0001115 	stw	zero,68(fp)
811062e0:	000b883a 	mov	r5,zero
811062e4:	e009883a 	mov	r4,fp
811062e8:	1108d6c0 	call	81108d6c <_Balloc>
811062ec:	01bfffc4 	movi	r6,-1
811062f0:	01c00044 	movi	r7,1
811062f4:	d8800715 	stw	r2,28(sp)
811062f8:	d9800c15 	stw	r6,48(sp)
811062fc:	e0801015 	stw	r2,64(fp)
81106300:	d8000315 	stw	zero,12(sp)
81106304:	d9c00b15 	stw	r7,44(sp)
81106308:	d9800615 	stw	r6,24(sp)
8110630c:	d8002215 	stw	zero,136(sp)
81106310:	d8800117 	ldw	r2,4(sp)
81106314:	10008916 	blt	r2,zero,8110653c <_dtoa_r+0x990>
81106318:	d9000517 	ldw	r4,20(sp)
8110631c:	00c00384 	movi	r3,14
81106320:	19008616 	blt	r3,r4,8110653c <_dtoa_r+0x990>
81106324:	200490fa 	slli	r2,r4,3
81106328:	00e044b4 	movhi	r3,33042
8110632c:	d9802217 	ldw	r6,136(sp)
81106330:	18d2a404 	addi	r3,r3,19088
81106334:	1885883a 	add	r2,r3,r2
81106338:	14000017 	ldw	r16,0(r2)
8110633c:	14400117 	ldw	r17,4(r2)
81106340:	30016316 	blt	r6,zero,811068d0 <_dtoa_r+0xd24>
81106344:	800d883a 	mov	r6,r16
81106348:	880f883a 	mov	r7,r17
8110634c:	9009883a 	mov	r4,r18
81106350:	980b883a 	mov	r5,r19
81106354:	11141980 	call	81114198 <__divdf3>
81106358:	180b883a 	mov	r5,r3
8110635c:	1009883a 	mov	r4,r2
81106360:	1115cec0 	call	81115cec <__fixdfsi>
81106364:	1009883a 	mov	r4,r2
81106368:	102b883a 	mov	r21,r2
8110636c:	1115d6c0 	call	81115d6c <__floatsidf>
81106370:	800d883a 	mov	r6,r16
81106374:	880f883a 	mov	r7,r17
81106378:	1009883a 	mov	r4,r2
8110637c:	180b883a 	mov	r5,r3
81106380:	1114cd80 	call	81114cd8 <__muldf3>
81106384:	100d883a 	mov	r6,r2
81106388:	180f883a 	mov	r7,r3
8110638c:	9009883a 	mov	r4,r18
81106390:	980b883a 	mov	r5,r19
81106394:	11153f00 	call	811153f0 <__subdf3>
81106398:	d9c00717 	ldw	r7,28(sp)
8110639c:	1009883a 	mov	r4,r2
811063a0:	a8800c04 	addi	r2,r21,48
811063a4:	38800005 	stb	r2,0(r7)
811063a8:	3dc00044 	addi	r23,r7,1
811063ac:	d9c00617 	ldw	r7,24(sp)
811063b0:	01800044 	movi	r6,1
811063b4:	180b883a 	mov	r5,r3
811063b8:	2005883a 	mov	r2,r4
811063bc:	39803826 	beq	r7,r6,811064a0 <_dtoa_r+0x8f4>
811063c0:	000d883a 	mov	r6,zero
811063c4:	01d00934 	movhi	r7,16420
811063c8:	1114cd80 	call	81114cd8 <__muldf3>
811063cc:	000d883a 	mov	r6,zero
811063d0:	000f883a 	mov	r7,zero
811063d4:	1009883a 	mov	r4,r2
811063d8:	180b883a 	mov	r5,r3
811063dc:	1025883a 	mov	r18,r2
811063e0:	1827883a 	mov	r19,r3
811063e4:	1114a800 	call	81114a80 <__eqdf2>
811063e8:	103f9a26 	beq	r2,zero,81106254 <__reset+0xfb0e6254>
811063ec:	d9c00617 	ldw	r7,24(sp)
811063f0:	d8c00717 	ldw	r3,28(sp)
811063f4:	b829883a 	mov	r20,r23
811063f8:	38bfffc4 	addi	r2,r7,-1
811063fc:	18ad883a 	add	r22,r3,r2
81106400:	00000a06 	br	8110642c <_dtoa_r+0x880>
81106404:	1114cd80 	call	81114cd8 <__muldf3>
81106408:	000d883a 	mov	r6,zero
8110640c:	000f883a 	mov	r7,zero
81106410:	1009883a 	mov	r4,r2
81106414:	180b883a 	mov	r5,r3
81106418:	1025883a 	mov	r18,r2
8110641c:	1827883a 	mov	r19,r3
81106420:	b829883a 	mov	r20,r23
81106424:	1114a800 	call	81114a80 <__eqdf2>
81106428:	103f8a26 	beq	r2,zero,81106254 <__reset+0xfb0e6254>
8110642c:	800d883a 	mov	r6,r16
81106430:	880f883a 	mov	r7,r17
81106434:	9009883a 	mov	r4,r18
81106438:	980b883a 	mov	r5,r19
8110643c:	11141980 	call	81114198 <__divdf3>
81106440:	180b883a 	mov	r5,r3
81106444:	1009883a 	mov	r4,r2
81106448:	1115cec0 	call	81115cec <__fixdfsi>
8110644c:	1009883a 	mov	r4,r2
81106450:	102b883a 	mov	r21,r2
81106454:	1115d6c0 	call	81115d6c <__floatsidf>
81106458:	800d883a 	mov	r6,r16
8110645c:	880f883a 	mov	r7,r17
81106460:	1009883a 	mov	r4,r2
81106464:	180b883a 	mov	r5,r3
81106468:	1114cd80 	call	81114cd8 <__muldf3>
8110646c:	100d883a 	mov	r6,r2
81106470:	180f883a 	mov	r7,r3
81106474:	9009883a 	mov	r4,r18
81106478:	980b883a 	mov	r5,r19
8110647c:	11153f00 	call	811153f0 <__subdf3>
81106480:	aa000c04 	addi	r8,r21,48
81106484:	a2000005 	stb	r8,0(r20)
81106488:	000d883a 	mov	r6,zero
8110648c:	01d00934 	movhi	r7,16420
81106490:	1009883a 	mov	r4,r2
81106494:	180b883a 	mov	r5,r3
81106498:	a5c00044 	addi	r23,r20,1
8110649c:	b53fd91e 	bne	r22,r20,81106404 <__reset+0xfb0e6404>
811064a0:	100d883a 	mov	r6,r2
811064a4:	180f883a 	mov	r7,r3
811064a8:	1009883a 	mov	r4,r2
811064ac:	180b883a 	mov	r5,r3
811064b0:	11138ec0 	call	811138ec <__adddf3>
811064b4:	100d883a 	mov	r6,r2
811064b8:	180f883a 	mov	r7,r3
811064bc:	8009883a 	mov	r4,r16
811064c0:	880b883a 	mov	r5,r17
811064c4:	1027883a 	mov	r19,r2
811064c8:	1825883a 	mov	r18,r3
811064cc:	1114be40 	call	81114be4 <__ledf2>
811064d0:	10000816 	blt	r2,zero,811064f4 <_dtoa_r+0x948>
811064d4:	980d883a 	mov	r6,r19
811064d8:	900f883a 	mov	r7,r18
811064dc:	8009883a 	mov	r4,r16
811064e0:	880b883a 	mov	r5,r17
811064e4:	1114a800 	call	81114a80 <__eqdf2>
811064e8:	103f5a1e 	bne	r2,zero,81106254 <__reset+0xfb0e6254>
811064ec:	ad40004c 	andi	r21,r21,1
811064f0:	a83f5826 	beq	r21,zero,81106254 <__reset+0xfb0e6254>
811064f4:	bd3fffc3 	ldbu	r20,-1(r23)
811064f8:	b8bfffc4 	addi	r2,r23,-1
811064fc:	1007883a 	mov	r3,r2
81106500:	01400e44 	movi	r5,57
81106504:	d9800717 	ldw	r6,28(sp)
81106508:	00000506 	br	81106520 <_dtoa_r+0x974>
8110650c:	18ffffc4 	addi	r3,r3,-1
81106510:	11824726 	beq	r2,r6,81106e30 <_dtoa_r+0x1284>
81106514:	1d000003 	ldbu	r20,0(r3)
81106518:	102f883a 	mov	r23,r2
8110651c:	10bfffc4 	addi	r2,r2,-1
81106520:	a1003fcc 	andi	r4,r20,255
81106524:	2100201c 	xori	r4,r4,128
81106528:	213fe004 	addi	r4,r4,-128
8110652c:	217ff726 	beq	r4,r5,8110650c <__reset+0xfb0e650c>
81106530:	a2000044 	addi	r8,r20,1
81106534:	12000005 	stb	r8,0(r2)
81106538:	003f4606 	br	81106254 <__reset+0xfb0e6254>
8110653c:	d9000b17 	ldw	r4,44(sp)
81106540:	2000c826 	beq	r4,zero,81106864 <_dtoa_r+0xcb8>
81106544:	d9800317 	ldw	r6,12(sp)
81106548:	00c00044 	movi	r3,1
8110654c:	1980f90e 	bge	r3,r6,81106934 <_dtoa_r+0xd88>
81106550:	d8800617 	ldw	r2,24(sp)
81106554:	d8c00a17 	ldw	r3,40(sp)
81106558:	157fffc4 	addi	r21,r2,-1
8110655c:	1d41f316 	blt	r3,r21,81106d2c <_dtoa_r+0x1180>
81106560:	1d6bc83a 	sub	r21,r3,r21
81106564:	d9c00617 	ldw	r7,24(sp)
81106568:	3802aa16 	blt	r7,zero,81107014 <_dtoa_r+0x1468>
8110656c:	dd000817 	ldw	r20,32(sp)
81106570:	d8800617 	ldw	r2,24(sp)
81106574:	d8c00817 	ldw	r3,32(sp)
81106578:	01400044 	movi	r5,1
8110657c:	e009883a 	mov	r4,fp
81106580:	1887883a 	add	r3,r3,r2
81106584:	d8c00815 	stw	r3,32(sp)
81106588:	b0ad883a 	add	r22,r22,r2
8110658c:	11091780 	call	81109178 <__i2b>
81106590:	1023883a 	mov	r17,r2
81106594:	a0000826 	beq	r20,zero,811065b8 <_dtoa_r+0xa0c>
81106598:	0580070e 	bge	zero,r22,811065b8 <_dtoa_r+0xa0c>
8110659c:	a005883a 	mov	r2,r20
811065a0:	b500b916 	blt	r22,r20,81106888 <_dtoa_r+0xcdc>
811065a4:	d9000817 	ldw	r4,32(sp)
811065a8:	a0a9c83a 	sub	r20,r20,r2
811065ac:	b0adc83a 	sub	r22,r22,r2
811065b0:	2089c83a 	sub	r4,r4,r2
811065b4:	d9000815 	stw	r4,32(sp)
811065b8:	d9800a17 	ldw	r6,40(sp)
811065bc:	0181810e 	bge	zero,r6,81106bc4 <_dtoa_r+0x1018>
811065c0:	d9c00b17 	ldw	r7,44(sp)
811065c4:	3800b326 	beq	r7,zero,81106894 <_dtoa_r+0xce8>
811065c8:	a800b226 	beq	r21,zero,81106894 <_dtoa_r+0xce8>
811065cc:	880b883a 	mov	r5,r17
811065d0:	a80d883a 	mov	r6,r21
811065d4:	e009883a 	mov	r4,fp
811065d8:	11093ac0 	call	811093ac <__pow5mult>
811065dc:	d9800917 	ldw	r6,36(sp)
811065e0:	100b883a 	mov	r5,r2
811065e4:	e009883a 	mov	r4,fp
811065e8:	1023883a 	mov	r17,r2
811065ec:	11091b40 	call	811091b4 <__multiply>
811065f0:	1021883a 	mov	r16,r2
811065f4:	d8800a17 	ldw	r2,40(sp)
811065f8:	d9400917 	ldw	r5,36(sp)
811065fc:	e009883a 	mov	r4,fp
81106600:	1545c83a 	sub	r2,r2,r21
81106604:	d8800a15 	stw	r2,40(sp)
81106608:	1108e140 	call	81108e14 <_Bfree>
8110660c:	d8c00a17 	ldw	r3,40(sp)
81106610:	18009f1e 	bne	r3,zero,81106890 <_dtoa_r+0xce4>
81106614:	05c00044 	movi	r23,1
81106618:	e009883a 	mov	r4,fp
8110661c:	b80b883a 	mov	r5,r23
81106620:	11091780 	call	81109178 <__i2b>
81106624:	d9000d17 	ldw	r4,52(sp)
81106628:	102b883a 	mov	r21,r2
8110662c:	2000ce26 	beq	r4,zero,81106968 <_dtoa_r+0xdbc>
81106630:	200d883a 	mov	r6,r4
81106634:	100b883a 	mov	r5,r2
81106638:	e009883a 	mov	r4,fp
8110663c:	11093ac0 	call	811093ac <__pow5mult>
81106640:	d9800317 	ldw	r6,12(sp)
81106644:	102b883a 	mov	r21,r2
81106648:	b981810e 	bge	r23,r6,81106c50 <_dtoa_r+0x10a4>
8110664c:	0027883a 	mov	r19,zero
81106650:	a8800417 	ldw	r2,16(r21)
81106654:	05c00804 	movi	r23,32
81106658:	10800104 	addi	r2,r2,4
8110665c:	1085883a 	add	r2,r2,r2
81106660:	1085883a 	add	r2,r2,r2
81106664:	a885883a 	add	r2,r21,r2
81106668:	11000017 	ldw	r4,0(r2)
8110666c:	11090600 	call	81109060 <__hi0bits>
81106670:	b885c83a 	sub	r2,r23,r2
81106674:	1585883a 	add	r2,r2,r22
81106678:	108007cc 	andi	r2,r2,31
8110667c:	1000b326 	beq	r2,zero,8110694c <_dtoa_r+0xda0>
81106680:	00c00804 	movi	r3,32
81106684:	1887c83a 	sub	r3,r3,r2
81106688:	01000104 	movi	r4,4
8110668c:	20c2cd0e 	bge	r4,r3,811071c4 <_dtoa_r+0x1618>
81106690:	00c00704 	movi	r3,28
81106694:	1885c83a 	sub	r2,r3,r2
81106698:	d8c00817 	ldw	r3,32(sp)
8110669c:	a0a9883a 	add	r20,r20,r2
811066a0:	b0ad883a 	add	r22,r22,r2
811066a4:	1887883a 	add	r3,r3,r2
811066a8:	d8c00815 	stw	r3,32(sp)
811066ac:	d9800817 	ldw	r6,32(sp)
811066b0:	0180040e 	bge	zero,r6,811066c4 <_dtoa_r+0xb18>
811066b4:	800b883a 	mov	r5,r16
811066b8:	e009883a 	mov	r4,fp
811066bc:	11094ec0 	call	811094ec <__lshift>
811066c0:	1021883a 	mov	r16,r2
811066c4:	0580050e 	bge	zero,r22,811066dc <_dtoa_r+0xb30>
811066c8:	a80b883a 	mov	r5,r21
811066cc:	b00d883a 	mov	r6,r22
811066d0:	e009883a 	mov	r4,fp
811066d4:	11094ec0 	call	811094ec <__lshift>
811066d8:	102b883a 	mov	r21,r2
811066dc:	d9c00e17 	ldw	r7,56(sp)
811066e0:	3801211e 	bne	r7,zero,81106b68 <_dtoa_r+0xfbc>
811066e4:	d9800617 	ldw	r6,24(sp)
811066e8:	0181380e 	bge	zero,r6,81106bcc <_dtoa_r+0x1020>
811066ec:	d8c00b17 	ldw	r3,44(sp)
811066f0:	1800ab1e 	bne	r3,zero,811069a0 <_dtoa_r+0xdf4>
811066f4:	dc800717 	ldw	r18,28(sp)
811066f8:	dcc00617 	ldw	r19,24(sp)
811066fc:	9029883a 	mov	r20,r18
81106700:	00000206 	br	8110670c <_dtoa_r+0xb60>
81106704:	1108e3c0 	call	81108e3c <__multadd>
81106708:	1021883a 	mov	r16,r2
8110670c:	a80b883a 	mov	r5,r21
81106710:	8009883a 	mov	r4,r16
81106714:	11059ac0 	call	811059ac <quorem>
81106718:	10800c04 	addi	r2,r2,48
8110671c:	90800005 	stb	r2,0(r18)
81106720:	94800044 	addi	r18,r18,1
81106724:	9507c83a 	sub	r3,r18,r20
81106728:	000f883a 	mov	r7,zero
8110672c:	01800284 	movi	r6,10
81106730:	800b883a 	mov	r5,r16
81106734:	e009883a 	mov	r4,fp
81106738:	1cfff216 	blt	r3,r19,81106704 <__reset+0xfb0e6704>
8110673c:	1011883a 	mov	r8,r2
81106740:	d8800617 	ldw	r2,24(sp)
81106744:	0082370e 	bge	zero,r2,81107024 <_dtoa_r+0x1478>
81106748:	d9000717 	ldw	r4,28(sp)
8110674c:	0025883a 	mov	r18,zero
81106750:	20af883a 	add	r23,r4,r2
81106754:	01800044 	movi	r6,1
81106758:	800b883a 	mov	r5,r16
8110675c:	e009883a 	mov	r4,fp
81106760:	da001715 	stw	r8,92(sp)
81106764:	11094ec0 	call	811094ec <__lshift>
81106768:	a80b883a 	mov	r5,r21
8110676c:	1009883a 	mov	r4,r2
81106770:	d8800915 	stw	r2,36(sp)
81106774:	11096340 	call	81109634 <__mcmp>
81106778:	da001717 	ldw	r8,92(sp)
8110677c:	0081800e 	bge	zero,r2,81106d80 <_dtoa_r+0x11d4>
81106780:	b93fffc3 	ldbu	r4,-1(r23)
81106784:	b8bfffc4 	addi	r2,r23,-1
81106788:	1007883a 	mov	r3,r2
8110678c:	01800e44 	movi	r6,57
81106790:	d9c00717 	ldw	r7,28(sp)
81106794:	00000506 	br	811067ac <_dtoa_r+0xc00>
81106798:	18ffffc4 	addi	r3,r3,-1
8110679c:	11c12326 	beq	r2,r7,81106c2c <_dtoa_r+0x1080>
811067a0:	19000003 	ldbu	r4,0(r3)
811067a4:	102f883a 	mov	r23,r2
811067a8:	10bfffc4 	addi	r2,r2,-1
811067ac:	21403fcc 	andi	r5,r4,255
811067b0:	2940201c 	xori	r5,r5,128
811067b4:	297fe004 	addi	r5,r5,-128
811067b8:	29bff726 	beq	r5,r6,81106798 <__reset+0xfb0e6798>
811067bc:	21000044 	addi	r4,r4,1
811067c0:	11000005 	stb	r4,0(r2)
811067c4:	a80b883a 	mov	r5,r21
811067c8:	e009883a 	mov	r4,fp
811067cc:	1108e140 	call	81108e14 <_Bfree>
811067d0:	883ea026 	beq	r17,zero,81106254 <__reset+0xfb0e6254>
811067d4:	90000426 	beq	r18,zero,811067e8 <_dtoa_r+0xc3c>
811067d8:	94400326 	beq	r18,r17,811067e8 <_dtoa_r+0xc3c>
811067dc:	900b883a 	mov	r5,r18
811067e0:	e009883a 	mov	r4,fp
811067e4:	1108e140 	call	81108e14 <_Bfree>
811067e8:	880b883a 	mov	r5,r17
811067ec:	e009883a 	mov	r4,fp
811067f0:	1108e140 	call	81108e14 <_Bfree>
811067f4:	003e9706 	br	81106254 <__reset+0xfb0e6254>
811067f8:	01800044 	movi	r6,1
811067fc:	d9800e15 	stw	r6,56(sp)
81106800:	003d9606 	br	81105e5c <__reset+0xfb0e5e5c>
81106804:	d8800817 	ldw	r2,32(sp)
81106808:	d8c00517 	ldw	r3,20(sp)
8110680c:	d8000d15 	stw	zero,52(sp)
81106810:	10c5c83a 	sub	r2,r2,r3
81106814:	00c9c83a 	sub	r4,zero,r3
81106818:	d8800815 	stw	r2,32(sp)
8110681c:	d9000a15 	stw	r4,40(sp)
81106820:	003d9706 	br	81105e80 <__reset+0xfb0e5e80>
81106824:	05adc83a 	sub	r22,zero,r22
81106828:	dd800815 	stw	r22,32(sp)
8110682c:	002d883a 	mov	r22,zero
81106830:	003d8e06 	br	81105e6c <__reset+0xfb0e5e6c>
81106834:	d9000517 	ldw	r4,20(sp)
81106838:	1115d6c0 	call	81115d6c <__floatsidf>
8110683c:	100d883a 	mov	r6,r2
81106840:	180f883a 	mov	r7,r3
81106844:	a009883a 	mov	r4,r20
81106848:	880b883a 	mov	r5,r17
8110684c:	1114a800 	call	81114a80 <__eqdf2>
81106850:	103d7126 	beq	r2,zero,81105e18 <__reset+0xfb0e5e18>
81106854:	d9c00517 	ldw	r7,20(sp)
81106858:	39ffffc4 	addi	r7,r7,-1
8110685c:	d9c00515 	stw	r7,20(sp)
81106860:	003d6d06 	br	81105e18 <__reset+0xfb0e5e18>
81106864:	dd400a17 	ldw	r21,40(sp)
81106868:	dd000817 	ldw	r20,32(sp)
8110686c:	0023883a 	mov	r17,zero
81106870:	003f4806 	br	81106594 <__reset+0xfb0e6594>
81106874:	10e3c83a 	sub	r17,r2,r3
81106878:	9448983a 	sll	r4,r18,r17
8110687c:	003d3206 	br	81105d48 <__reset+0xfb0e5d48>
81106880:	d8000e15 	stw	zero,56(sp)
81106884:	003d7506 	br	81105e5c <__reset+0xfb0e5e5c>
81106888:	b005883a 	mov	r2,r22
8110688c:	003f4506 	br	811065a4 <__reset+0xfb0e65a4>
81106890:	dc000915 	stw	r16,36(sp)
81106894:	d9800a17 	ldw	r6,40(sp)
81106898:	d9400917 	ldw	r5,36(sp)
8110689c:	e009883a 	mov	r4,fp
811068a0:	11093ac0 	call	811093ac <__pow5mult>
811068a4:	1021883a 	mov	r16,r2
811068a8:	003f5a06 	br	81106614 <__reset+0xfb0e6614>
811068ac:	01c00044 	movi	r7,1
811068b0:	d9c00b15 	stw	r7,44(sp)
811068b4:	d8802217 	ldw	r2,136(sp)
811068b8:	0081280e 	bge	zero,r2,81106d5c <_dtoa_r+0x11b0>
811068bc:	100d883a 	mov	r6,r2
811068c0:	1021883a 	mov	r16,r2
811068c4:	d8800c15 	stw	r2,48(sp)
811068c8:	d8800615 	stw	r2,24(sp)
811068cc:	003d8806 	br	81105ef0 <__reset+0xfb0e5ef0>
811068d0:	d8800617 	ldw	r2,24(sp)
811068d4:	00be9b16 	blt	zero,r2,81106344 <__reset+0xfb0e6344>
811068d8:	10010f1e 	bne	r2,zero,81106d18 <_dtoa_r+0x116c>
811068dc:	880b883a 	mov	r5,r17
811068e0:	000d883a 	mov	r6,zero
811068e4:	01d00534 	movhi	r7,16404
811068e8:	8009883a 	mov	r4,r16
811068ec:	1114cd80 	call	81114cd8 <__muldf3>
811068f0:	900d883a 	mov	r6,r18
811068f4:	980f883a 	mov	r7,r19
811068f8:	1009883a 	mov	r4,r2
811068fc:	180b883a 	mov	r5,r3
81106900:	1114b080 	call	81114b08 <__gedf2>
81106904:	002b883a 	mov	r21,zero
81106908:	0023883a 	mov	r17,zero
8110690c:	1000bf16 	blt	r2,zero,81106c0c <_dtoa_r+0x1060>
81106910:	d9802217 	ldw	r6,136(sp)
81106914:	ddc00717 	ldw	r23,28(sp)
81106918:	018c303a 	nor	r6,zero,r6
8110691c:	d9800515 	stw	r6,20(sp)
81106920:	a80b883a 	mov	r5,r21
81106924:	e009883a 	mov	r4,fp
81106928:	1108e140 	call	81108e14 <_Bfree>
8110692c:	883e4926 	beq	r17,zero,81106254 <__reset+0xfb0e6254>
81106930:	003fad06 	br	811067e8 <__reset+0xfb0e67e8>
81106934:	d9c01117 	ldw	r7,68(sp)
81106938:	3801bc26 	beq	r7,zero,8110702c <_dtoa_r+0x1480>
8110693c:	10810cc4 	addi	r2,r2,1075
81106940:	dd400a17 	ldw	r21,40(sp)
81106944:	dd000817 	ldw	r20,32(sp)
81106948:	003f0a06 	br	81106574 <__reset+0xfb0e6574>
8110694c:	00800704 	movi	r2,28
81106950:	d9000817 	ldw	r4,32(sp)
81106954:	a0a9883a 	add	r20,r20,r2
81106958:	b0ad883a 	add	r22,r22,r2
8110695c:	2089883a 	add	r4,r4,r2
81106960:	d9000815 	stw	r4,32(sp)
81106964:	003f5106 	br	811066ac <__reset+0xfb0e66ac>
81106968:	d8c00317 	ldw	r3,12(sp)
8110696c:	b8c1fc0e 	bge	r23,r3,81107160 <_dtoa_r+0x15b4>
81106970:	0027883a 	mov	r19,zero
81106974:	b805883a 	mov	r2,r23
81106978:	003f3e06 	br	81106674 <__reset+0xfb0e6674>
8110697c:	880b883a 	mov	r5,r17
81106980:	e009883a 	mov	r4,fp
81106984:	000f883a 	mov	r7,zero
81106988:	01800284 	movi	r6,10
8110698c:	1108e3c0 	call	81108e3c <__multadd>
81106990:	d9000c17 	ldw	r4,48(sp)
81106994:	1023883a 	mov	r17,r2
81106998:	0102040e 	bge	zero,r4,811071ac <_dtoa_r+0x1600>
8110699c:	d9000615 	stw	r4,24(sp)
811069a0:	0500050e 	bge	zero,r20,811069b8 <_dtoa_r+0xe0c>
811069a4:	880b883a 	mov	r5,r17
811069a8:	a00d883a 	mov	r6,r20
811069ac:	e009883a 	mov	r4,fp
811069b0:	11094ec0 	call	811094ec <__lshift>
811069b4:	1023883a 	mov	r17,r2
811069b8:	9801241e 	bne	r19,zero,81106e4c <_dtoa_r+0x12a0>
811069bc:	8829883a 	mov	r20,r17
811069c0:	d9000617 	ldw	r4,24(sp)
811069c4:	dcc00717 	ldw	r19,28(sp)
811069c8:	9480004c 	andi	r18,r18,1
811069cc:	20bfffc4 	addi	r2,r4,-1
811069d0:	9885883a 	add	r2,r19,r2
811069d4:	d8800415 	stw	r2,16(sp)
811069d8:	dc800615 	stw	r18,24(sp)
811069dc:	a80b883a 	mov	r5,r21
811069e0:	8009883a 	mov	r4,r16
811069e4:	11059ac0 	call	811059ac <quorem>
811069e8:	880b883a 	mov	r5,r17
811069ec:	8009883a 	mov	r4,r16
811069f0:	102f883a 	mov	r23,r2
811069f4:	11096340 	call	81109634 <__mcmp>
811069f8:	a80b883a 	mov	r5,r21
811069fc:	a00d883a 	mov	r6,r20
81106a00:	e009883a 	mov	r4,fp
81106a04:	102d883a 	mov	r22,r2
81106a08:	11096940 	call	81109694 <__mdiff>
81106a0c:	1007883a 	mov	r3,r2
81106a10:	10800317 	ldw	r2,12(r2)
81106a14:	bc800c04 	addi	r18,r23,48
81106a18:	180b883a 	mov	r5,r3
81106a1c:	10004e1e 	bne	r2,zero,81106b58 <_dtoa_r+0xfac>
81106a20:	8009883a 	mov	r4,r16
81106a24:	d8c01615 	stw	r3,88(sp)
81106a28:	11096340 	call	81109634 <__mcmp>
81106a2c:	d8c01617 	ldw	r3,88(sp)
81106a30:	e009883a 	mov	r4,fp
81106a34:	d8801615 	stw	r2,88(sp)
81106a38:	180b883a 	mov	r5,r3
81106a3c:	1108e140 	call	81108e14 <_Bfree>
81106a40:	d8801617 	ldw	r2,88(sp)
81106a44:	1000041e 	bne	r2,zero,81106a58 <_dtoa_r+0xeac>
81106a48:	d9800317 	ldw	r6,12(sp)
81106a4c:	3000021e 	bne	r6,zero,81106a58 <_dtoa_r+0xeac>
81106a50:	d8c00617 	ldw	r3,24(sp)
81106a54:	18003726 	beq	r3,zero,81106b34 <_dtoa_r+0xf88>
81106a58:	b0002016 	blt	r22,zero,81106adc <_dtoa_r+0xf30>
81106a5c:	b000041e 	bne	r22,zero,81106a70 <_dtoa_r+0xec4>
81106a60:	d9000317 	ldw	r4,12(sp)
81106a64:	2000021e 	bne	r4,zero,81106a70 <_dtoa_r+0xec4>
81106a68:	d8c00617 	ldw	r3,24(sp)
81106a6c:	18001b26 	beq	r3,zero,81106adc <_dtoa_r+0xf30>
81106a70:	00810716 	blt	zero,r2,81106e90 <_dtoa_r+0x12e4>
81106a74:	d8c00417 	ldw	r3,16(sp)
81106a78:	9d800044 	addi	r22,r19,1
81106a7c:	9c800005 	stb	r18,0(r19)
81106a80:	b02f883a 	mov	r23,r22
81106a84:	98c10626 	beq	r19,r3,81106ea0 <_dtoa_r+0x12f4>
81106a88:	800b883a 	mov	r5,r16
81106a8c:	000f883a 	mov	r7,zero
81106a90:	01800284 	movi	r6,10
81106a94:	e009883a 	mov	r4,fp
81106a98:	1108e3c0 	call	81108e3c <__multadd>
81106a9c:	1021883a 	mov	r16,r2
81106aa0:	000f883a 	mov	r7,zero
81106aa4:	01800284 	movi	r6,10
81106aa8:	880b883a 	mov	r5,r17
81106aac:	e009883a 	mov	r4,fp
81106ab0:	8d002526 	beq	r17,r20,81106b48 <_dtoa_r+0xf9c>
81106ab4:	1108e3c0 	call	81108e3c <__multadd>
81106ab8:	a00b883a 	mov	r5,r20
81106abc:	000f883a 	mov	r7,zero
81106ac0:	01800284 	movi	r6,10
81106ac4:	e009883a 	mov	r4,fp
81106ac8:	1023883a 	mov	r17,r2
81106acc:	1108e3c0 	call	81108e3c <__multadd>
81106ad0:	1029883a 	mov	r20,r2
81106ad4:	b027883a 	mov	r19,r22
81106ad8:	003fc006 	br	811069dc <__reset+0xfb0e69dc>
81106adc:	9011883a 	mov	r8,r18
81106ae0:	00800e0e 	bge	zero,r2,81106b1c <_dtoa_r+0xf70>
81106ae4:	800b883a 	mov	r5,r16
81106ae8:	01800044 	movi	r6,1
81106aec:	e009883a 	mov	r4,fp
81106af0:	da001715 	stw	r8,92(sp)
81106af4:	11094ec0 	call	811094ec <__lshift>
81106af8:	a80b883a 	mov	r5,r21
81106afc:	1009883a 	mov	r4,r2
81106b00:	1021883a 	mov	r16,r2
81106b04:	11096340 	call	81109634 <__mcmp>
81106b08:	da001717 	ldw	r8,92(sp)
81106b0c:	0081960e 	bge	zero,r2,81107168 <_dtoa_r+0x15bc>
81106b10:	00800e44 	movi	r2,57
81106b14:	40817026 	beq	r8,r2,811070d8 <_dtoa_r+0x152c>
81106b18:	ba000c44 	addi	r8,r23,49
81106b1c:	8825883a 	mov	r18,r17
81106b20:	9dc00044 	addi	r23,r19,1
81106b24:	9a000005 	stb	r8,0(r19)
81106b28:	a023883a 	mov	r17,r20
81106b2c:	dc000915 	stw	r16,36(sp)
81106b30:	003f2406 	br	811067c4 <__reset+0xfb0e67c4>
81106b34:	00800e44 	movi	r2,57
81106b38:	9011883a 	mov	r8,r18
81106b3c:	90816626 	beq	r18,r2,811070d8 <_dtoa_r+0x152c>
81106b40:	05bff516 	blt	zero,r22,81106b18 <__reset+0xfb0e6b18>
81106b44:	003ff506 	br	81106b1c <__reset+0xfb0e6b1c>
81106b48:	1108e3c0 	call	81108e3c <__multadd>
81106b4c:	1023883a 	mov	r17,r2
81106b50:	1029883a 	mov	r20,r2
81106b54:	003fdf06 	br	81106ad4 <__reset+0xfb0e6ad4>
81106b58:	e009883a 	mov	r4,fp
81106b5c:	1108e140 	call	81108e14 <_Bfree>
81106b60:	00800044 	movi	r2,1
81106b64:	003fbc06 	br	81106a58 <__reset+0xfb0e6a58>
81106b68:	a80b883a 	mov	r5,r21
81106b6c:	8009883a 	mov	r4,r16
81106b70:	11096340 	call	81109634 <__mcmp>
81106b74:	103edb0e 	bge	r2,zero,811066e4 <__reset+0xfb0e66e4>
81106b78:	800b883a 	mov	r5,r16
81106b7c:	000f883a 	mov	r7,zero
81106b80:	01800284 	movi	r6,10
81106b84:	e009883a 	mov	r4,fp
81106b88:	1108e3c0 	call	81108e3c <__multadd>
81106b8c:	1021883a 	mov	r16,r2
81106b90:	d8800517 	ldw	r2,20(sp)
81106b94:	d8c00b17 	ldw	r3,44(sp)
81106b98:	10bfffc4 	addi	r2,r2,-1
81106b9c:	d8800515 	stw	r2,20(sp)
81106ba0:	183f761e 	bne	r3,zero,8110697c <__reset+0xfb0e697c>
81106ba4:	d9000c17 	ldw	r4,48(sp)
81106ba8:	0101730e 	bge	zero,r4,81107178 <_dtoa_r+0x15cc>
81106bac:	d9000615 	stw	r4,24(sp)
81106bb0:	003ed006 	br	811066f4 <__reset+0xfb0e66f4>
81106bb4:	00800084 	movi	r2,2
81106bb8:	3081861e 	bne	r6,r2,811071d4 <_dtoa_r+0x1628>
81106bbc:	d8000b15 	stw	zero,44(sp)
81106bc0:	003f3c06 	br	811068b4 <__reset+0xfb0e68b4>
81106bc4:	dc000917 	ldw	r16,36(sp)
81106bc8:	003e9206 	br	81106614 <__reset+0xfb0e6614>
81106bcc:	d9c00317 	ldw	r7,12(sp)
81106bd0:	00800084 	movi	r2,2
81106bd4:	11fec50e 	bge	r2,r7,811066ec <__reset+0xfb0e66ec>
81106bd8:	d9000617 	ldw	r4,24(sp)
81106bdc:	20013c1e 	bne	r4,zero,811070d0 <_dtoa_r+0x1524>
81106be0:	a80b883a 	mov	r5,r21
81106be4:	000f883a 	mov	r7,zero
81106be8:	01800144 	movi	r6,5
81106bec:	e009883a 	mov	r4,fp
81106bf0:	1108e3c0 	call	81108e3c <__multadd>
81106bf4:	100b883a 	mov	r5,r2
81106bf8:	8009883a 	mov	r4,r16
81106bfc:	102b883a 	mov	r21,r2
81106c00:	11096340 	call	81109634 <__mcmp>
81106c04:	dc000915 	stw	r16,36(sp)
81106c08:	00bf410e 	bge	zero,r2,81106910 <__reset+0xfb0e6910>
81106c0c:	d9c00717 	ldw	r7,28(sp)
81106c10:	00800c44 	movi	r2,49
81106c14:	38800005 	stb	r2,0(r7)
81106c18:	d8800517 	ldw	r2,20(sp)
81106c1c:	3dc00044 	addi	r23,r7,1
81106c20:	10800044 	addi	r2,r2,1
81106c24:	d8800515 	stw	r2,20(sp)
81106c28:	003f3d06 	br	81106920 <__reset+0xfb0e6920>
81106c2c:	d9800517 	ldw	r6,20(sp)
81106c30:	d9c00717 	ldw	r7,28(sp)
81106c34:	00800c44 	movi	r2,49
81106c38:	31800044 	addi	r6,r6,1
81106c3c:	d9800515 	stw	r6,20(sp)
81106c40:	38800005 	stb	r2,0(r7)
81106c44:	003edf06 	br	811067c4 <__reset+0xfb0e67c4>
81106c48:	d8000b15 	stw	zero,44(sp)
81106c4c:	003c9f06 	br	81105ecc <__reset+0xfb0e5ecc>
81106c50:	903e7e1e 	bne	r18,zero,8110664c <__reset+0xfb0e664c>
81106c54:	00800434 	movhi	r2,16
81106c58:	10bfffc4 	addi	r2,r2,-1
81106c5c:	9884703a 	and	r2,r19,r2
81106c60:	1000ea1e 	bne	r2,zero,8110700c <_dtoa_r+0x1460>
81106c64:	9cdffc2c 	andhi	r19,r19,32752
81106c68:	9800e826 	beq	r19,zero,8110700c <_dtoa_r+0x1460>
81106c6c:	d9c00817 	ldw	r7,32(sp)
81106c70:	b5800044 	addi	r22,r22,1
81106c74:	04c00044 	movi	r19,1
81106c78:	39c00044 	addi	r7,r7,1
81106c7c:	d9c00815 	stw	r7,32(sp)
81106c80:	d8800d17 	ldw	r2,52(sp)
81106c84:	103e721e 	bne	r2,zero,81106650 <__reset+0xfb0e6650>
81106c88:	00800044 	movi	r2,1
81106c8c:	003e7906 	br	81106674 <__reset+0xfb0e6674>
81106c90:	8009883a 	mov	r4,r16
81106c94:	1115d6c0 	call	81115d6c <__floatsidf>
81106c98:	d9800f17 	ldw	r6,60(sp)
81106c9c:	d9c01017 	ldw	r7,64(sp)
81106ca0:	1009883a 	mov	r4,r2
81106ca4:	180b883a 	mov	r5,r3
81106ca8:	1114cd80 	call	81114cd8 <__muldf3>
81106cac:	000d883a 	mov	r6,zero
81106cb0:	01d00734 	movhi	r7,16412
81106cb4:	1009883a 	mov	r4,r2
81106cb8:	180b883a 	mov	r5,r3
81106cbc:	11138ec0 	call	811138ec <__adddf3>
81106cc0:	047f3034 	movhi	r17,64704
81106cc4:	1021883a 	mov	r16,r2
81106cc8:	1c63883a 	add	r17,r3,r17
81106ccc:	d9000f17 	ldw	r4,60(sp)
81106cd0:	d9401017 	ldw	r5,64(sp)
81106cd4:	000d883a 	mov	r6,zero
81106cd8:	01d00534 	movhi	r7,16404
81106cdc:	11153f00 	call	811153f0 <__subdf3>
81106ce0:	800d883a 	mov	r6,r16
81106ce4:	880f883a 	mov	r7,r17
81106ce8:	1009883a 	mov	r4,r2
81106cec:	180b883a 	mov	r5,r3
81106cf0:	102b883a 	mov	r21,r2
81106cf4:	1829883a 	mov	r20,r3
81106cf8:	1114b080 	call	81114b08 <__gedf2>
81106cfc:	00806c16 	blt	zero,r2,81106eb0 <_dtoa_r+0x1304>
81106d00:	89e0003c 	xorhi	r7,r17,32768
81106d04:	800d883a 	mov	r6,r16
81106d08:	a809883a 	mov	r4,r21
81106d0c:	a00b883a 	mov	r5,r20
81106d10:	1114be40 	call	81114be4 <__ledf2>
81106d14:	103d7e0e 	bge	r2,zero,81106310 <__reset+0xfb0e6310>
81106d18:	002b883a 	mov	r21,zero
81106d1c:	0023883a 	mov	r17,zero
81106d20:	003efb06 	br	81106910 <__reset+0xfb0e6910>
81106d24:	d8800717 	ldw	r2,28(sp)
81106d28:	003bd006 	br	81105c6c <__reset+0xfb0e5c6c>
81106d2c:	d9000a17 	ldw	r4,40(sp)
81106d30:	d9800d17 	ldw	r6,52(sp)
81106d34:	dd400a15 	stw	r21,40(sp)
81106d38:	a905c83a 	sub	r2,r21,r4
81106d3c:	308d883a 	add	r6,r6,r2
81106d40:	d9800d15 	stw	r6,52(sp)
81106d44:	002b883a 	mov	r21,zero
81106d48:	003e0606 	br	81106564 <__reset+0xfb0e6564>
81106d4c:	9023883a 	mov	r17,r18
81106d50:	9829883a 	mov	r20,r19
81106d54:	04000084 	movi	r16,2
81106d58:	003c9206 	br	81105fa4 <__reset+0xfb0e5fa4>
81106d5c:	04000044 	movi	r16,1
81106d60:	dc000c15 	stw	r16,48(sp)
81106d64:	dc000615 	stw	r16,24(sp)
81106d68:	dc002215 	stw	r16,136(sp)
81106d6c:	e0001115 	stw	zero,68(fp)
81106d70:	000b883a 	mov	r5,zero
81106d74:	003c6906 	br	81105f1c <__reset+0xfb0e5f1c>
81106d78:	3021883a 	mov	r16,r6
81106d7c:	003ffb06 	br	81106d6c <__reset+0xfb0e6d6c>
81106d80:	1000021e 	bne	r2,zero,81106d8c <_dtoa_r+0x11e0>
81106d84:	4200004c 	andi	r8,r8,1
81106d88:	403e7d1e 	bne	r8,zero,81106780 <__reset+0xfb0e6780>
81106d8c:	01000c04 	movi	r4,48
81106d90:	00000106 	br	81106d98 <_dtoa_r+0x11ec>
81106d94:	102f883a 	mov	r23,r2
81106d98:	b8bfffc4 	addi	r2,r23,-1
81106d9c:	10c00007 	ldb	r3,0(r2)
81106da0:	193ffc26 	beq	r3,r4,81106d94 <__reset+0xfb0e6d94>
81106da4:	003e8706 	br	811067c4 <__reset+0xfb0e67c4>
81106da8:	d8800517 	ldw	r2,20(sp)
81106dac:	00a3c83a 	sub	r17,zero,r2
81106db0:	8800a426 	beq	r17,zero,81107044 <_dtoa_r+0x1498>
81106db4:	888003cc 	andi	r2,r17,15
81106db8:	100490fa 	slli	r2,r2,3
81106dbc:	00e044b4 	movhi	r3,33042
81106dc0:	18d2a404 	addi	r3,r3,19088
81106dc4:	1885883a 	add	r2,r3,r2
81106dc8:	11800017 	ldw	r6,0(r2)
81106dcc:	11c00117 	ldw	r7,4(r2)
81106dd0:	9009883a 	mov	r4,r18
81106dd4:	980b883a 	mov	r5,r19
81106dd8:	8823d13a 	srai	r17,r17,4
81106ddc:	1114cd80 	call	81114cd8 <__muldf3>
81106de0:	d8800f15 	stw	r2,60(sp)
81106de4:	d8c01015 	stw	r3,64(sp)
81106de8:	8800e826 	beq	r17,zero,8110718c <_dtoa_r+0x15e0>
81106dec:	052044b4 	movhi	r20,33042
81106df0:	a5129a04 	addi	r20,r20,19048
81106df4:	04000084 	movi	r16,2
81106df8:	8980004c 	andi	r6,r17,1
81106dfc:	1009883a 	mov	r4,r2
81106e00:	8823d07a 	srai	r17,r17,1
81106e04:	180b883a 	mov	r5,r3
81106e08:	30000426 	beq	r6,zero,81106e1c <_dtoa_r+0x1270>
81106e0c:	a1800017 	ldw	r6,0(r20)
81106e10:	a1c00117 	ldw	r7,4(r20)
81106e14:	84000044 	addi	r16,r16,1
81106e18:	1114cd80 	call	81114cd8 <__muldf3>
81106e1c:	a5000204 	addi	r20,r20,8
81106e20:	883ff51e 	bne	r17,zero,81106df8 <__reset+0xfb0e6df8>
81106e24:	d8800f15 	stw	r2,60(sp)
81106e28:	d8c01015 	stw	r3,64(sp)
81106e2c:	003c7606 	br	81106008 <__reset+0xfb0e6008>
81106e30:	00c00c04 	movi	r3,48
81106e34:	10c00005 	stb	r3,0(r2)
81106e38:	d8c00517 	ldw	r3,20(sp)
81106e3c:	bd3fffc3 	ldbu	r20,-1(r23)
81106e40:	18c00044 	addi	r3,r3,1
81106e44:	d8c00515 	stw	r3,20(sp)
81106e48:	003db906 	br	81106530 <__reset+0xfb0e6530>
81106e4c:	89400117 	ldw	r5,4(r17)
81106e50:	e009883a 	mov	r4,fp
81106e54:	1108d6c0 	call	81108d6c <_Balloc>
81106e58:	89800417 	ldw	r6,16(r17)
81106e5c:	89400304 	addi	r5,r17,12
81106e60:	11000304 	addi	r4,r2,12
81106e64:	31800084 	addi	r6,r6,2
81106e68:	318d883a 	add	r6,r6,r6
81106e6c:	318d883a 	add	r6,r6,r6
81106e70:	1027883a 	mov	r19,r2
81106e74:	1108ac80 	call	81108ac8 <memcpy>
81106e78:	01800044 	movi	r6,1
81106e7c:	980b883a 	mov	r5,r19
81106e80:	e009883a 	mov	r4,fp
81106e84:	11094ec0 	call	811094ec <__lshift>
81106e88:	1029883a 	mov	r20,r2
81106e8c:	003ecc06 	br	811069c0 <__reset+0xfb0e69c0>
81106e90:	00800e44 	movi	r2,57
81106e94:	90809026 	beq	r18,r2,811070d8 <_dtoa_r+0x152c>
81106e98:	92000044 	addi	r8,r18,1
81106e9c:	003f1f06 	br	81106b1c <__reset+0xfb0e6b1c>
81106ea0:	9011883a 	mov	r8,r18
81106ea4:	8825883a 	mov	r18,r17
81106ea8:	a023883a 	mov	r17,r20
81106eac:	003e2906 	br	81106754 <__reset+0xfb0e6754>
81106eb0:	002b883a 	mov	r21,zero
81106eb4:	0023883a 	mov	r17,zero
81106eb8:	003f5406 	br	81106c0c <__reset+0xfb0e6c0c>
81106ebc:	61bfffc4 	addi	r6,r12,-1
81106ec0:	300490fa 	slli	r2,r6,3
81106ec4:	00e044b4 	movhi	r3,33042
81106ec8:	18d2a404 	addi	r3,r3,19088
81106ecc:	1885883a 	add	r2,r3,r2
81106ed0:	11000017 	ldw	r4,0(r2)
81106ed4:	11400117 	ldw	r5,4(r2)
81106ed8:	d8800717 	ldw	r2,28(sp)
81106edc:	880f883a 	mov	r7,r17
81106ee0:	d9801215 	stw	r6,72(sp)
81106ee4:	800d883a 	mov	r6,r16
81106ee8:	db001615 	stw	r12,88(sp)
81106eec:	15c00044 	addi	r23,r2,1
81106ef0:	1114cd80 	call	81114cd8 <__muldf3>
81106ef4:	d9401017 	ldw	r5,64(sp)
81106ef8:	d9000f17 	ldw	r4,60(sp)
81106efc:	d8c01515 	stw	r3,84(sp)
81106f00:	d8801415 	stw	r2,80(sp)
81106f04:	1115cec0 	call	81115cec <__fixdfsi>
81106f08:	1009883a 	mov	r4,r2
81106f0c:	1021883a 	mov	r16,r2
81106f10:	1115d6c0 	call	81115d6c <__floatsidf>
81106f14:	d9000f17 	ldw	r4,60(sp)
81106f18:	d9401017 	ldw	r5,64(sp)
81106f1c:	100d883a 	mov	r6,r2
81106f20:	180f883a 	mov	r7,r3
81106f24:	11153f00 	call	811153f0 <__subdf3>
81106f28:	1829883a 	mov	r20,r3
81106f2c:	d8c00717 	ldw	r3,28(sp)
81106f30:	84000c04 	addi	r16,r16,48
81106f34:	1023883a 	mov	r17,r2
81106f38:	1c000005 	stb	r16,0(r3)
81106f3c:	db001617 	ldw	r12,88(sp)
81106f40:	00800044 	movi	r2,1
81106f44:	60802226 	beq	r12,r2,81106fd0 <_dtoa_r+0x1424>
81106f48:	d9c00717 	ldw	r7,28(sp)
81106f4c:	8805883a 	mov	r2,r17
81106f50:	b82b883a 	mov	r21,r23
81106f54:	3b19883a 	add	r12,r7,r12
81106f58:	6023883a 	mov	r17,r12
81106f5c:	a007883a 	mov	r3,r20
81106f60:	dc800f15 	stw	r18,60(sp)
81106f64:	000d883a 	mov	r6,zero
81106f68:	01d00934 	movhi	r7,16420
81106f6c:	1009883a 	mov	r4,r2
81106f70:	180b883a 	mov	r5,r3
81106f74:	1114cd80 	call	81114cd8 <__muldf3>
81106f78:	180b883a 	mov	r5,r3
81106f7c:	1009883a 	mov	r4,r2
81106f80:	1829883a 	mov	r20,r3
81106f84:	1025883a 	mov	r18,r2
81106f88:	1115cec0 	call	81115cec <__fixdfsi>
81106f8c:	1009883a 	mov	r4,r2
81106f90:	1021883a 	mov	r16,r2
81106f94:	1115d6c0 	call	81115d6c <__floatsidf>
81106f98:	100d883a 	mov	r6,r2
81106f9c:	180f883a 	mov	r7,r3
81106fa0:	9009883a 	mov	r4,r18
81106fa4:	a00b883a 	mov	r5,r20
81106fa8:	84000c04 	addi	r16,r16,48
81106fac:	11153f00 	call	811153f0 <__subdf3>
81106fb0:	ad400044 	addi	r21,r21,1
81106fb4:	ac3fffc5 	stb	r16,-1(r21)
81106fb8:	ac7fea1e 	bne	r21,r17,81106f64 <__reset+0xfb0e6f64>
81106fbc:	1023883a 	mov	r17,r2
81106fc0:	d8801217 	ldw	r2,72(sp)
81106fc4:	dc800f17 	ldw	r18,60(sp)
81106fc8:	1829883a 	mov	r20,r3
81106fcc:	b8af883a 	add	r23,r23,r2
81106fd0:	d9001417 	ldw	r4,80(sp)
81106fd4:	d9401517 	ldw	r5,84(sp)
81106fd8:	000d883a 	mov	r6,zero
81106fdc:	01cff834 	movhi	r7,16352
81106fe0:	11138ec0 	call	811138ec <__adddf3>
81106fe4:	880d883a 	mov	r6,r17
81106fe8:	a00f883a 	mov	r7,r20
81106fec:	1009883a 	mov	r4,r2
81106ff0:	180b883a 	mov	r5,r3
81106ff4:	1114be40 	call	81114be4 <__ledf2>
81106ff8:	10003e0e 	bge	r2,zero,811070f4 <_dtoa_r+0x1548>
81106ffc:	d9001317 	ldw	r4,76(sp)
81107000:	bd3fffc3 	ldbu	r20,-1(r23)
81107004:	d9000515 	stw	r4,20(sp)
81107008:	003d3b06 	br	811064f8 <__reset+0xfb0e64f8>
8110700c:	0027883a 	mov	r19,zero
81107010:	003f1b06 	br	81106c80 <__reset+0xfb0e6c80>
81107014:	d8800817 	ldw	r2,32(sp)
81107018:	11e9c83a 	sub	r20,r2,r7
8110701c:	0005883a 	mov	r2,zero
81107020:	003d5406 	br	81106574 <__reset+0xfb0e6574>
81107024:	00800044 	movi	r2,1
81107028:	003dc706 	br	81106748 <__reset+0xfb0e6748>
8110702c:	d8c00217 	ldw	r3,8(sp)
81107030:	00800d84 	movi	r2,54
81107034:	dd400a17 	ldw	r21,40(sp)
81107038:	10c5c83a 	sub	r2,r2,r3
8110703c:	dd000817 	ldw	r20,32(sp)
81107040:	003d4c06 	br	81106574 <__reset+0xfb0e6574>
81107044:	dc800f15 	stw	r18,60(sp)
81107048:	dcc01015 	stw	r19,64(sp)
8110704c:	04000084 	movi	r16,2
81107050:	003bed06 	br	81106008 <__reset+0xfb0e6008>
81107054:	d9000617 	ldw	r4,24(sp)
81107058:	203f0d26 	beq	r4,zero,81106c90 <__reset+0xfb0e6c90>
8110705c:	d9800c17 	ldw	r6,48(sp)
81107060:	01bcab0e 	bge	zero,r6,81106310 <__reset+0xfb0e6310>
81107064:	d9401017 	ldw	r5,64(sp)
81107068:	d9000f17 	ldw	r4,60(sp)
8110706c:	000d883a 	mov	r6,zero
81107070:	01d00934 	movhi	r7,16420
81107074:	1114cd80 	call	81114cd8 <__muldf3>
81107078:	81000044 	addi	r4,r16,1
8110707c:	d8800f15 	stw	r2,60(sp)
81107080:	d8c01015 	stw	r3,64(sp)
81107084:	1115d6c0 	call	81115d6c <__floatsidf>
81107088:	d9800f17 	ldw	r6,60(sp)
8110708c:	d9c01017 	ldw	r7,64(sp)
81107090:	1009883a 	mov	r4,r2
81107094:	180b883a 	mov	r5,r3
81107098:	1114cd80 	call	81114cd8 <__muldf3>
8110709c:	01d00734 	movhi	r7,16412
811070a0:	000d883a 	mov	r6,zero
811070a4:	1009883a 	mov	r4,r2
811070a8:	180b883a 	mov	r5,r3
811070ac:	11138ec0 	call	811138ec <__adddf3>
811070b0:	d9c00517 	ldw	r7,20(sp)
811070b4:	047f3034 	movhi	r17,64704
811070b8:	1021883a 	mov	r16,r2
811070bc:	39ffffc4 	addi	r7,r7,-1
811070c0:	d9c01315 	stw	r7,76(sp)
811070c4:	1c63883a 	add	r17,r3,r17
811070c8:	db000c17 	ldw	r12,48(sp)
811070cc:	003bea06 	br	81106078 <__reset+0xfb0e6078>
811070d0:	dc000915 	stw	r16,36(sp)
811070d4:	003e0e06 	br	81106910 <__reset+0xfb0e6910>
811070d8:	01000e44 	movi	r4,57
811070dc:	8825883a 	mov	r18,r17
811070e0:	9dc00044 	addi	r23,r19,1
811070e4:	99000005 	stb	r4,0(r19)
811070e8:	a023883a 	mov	r17,r20
811070ec:	dc000915 	stw	r16,36(sp)
811070f0:	003da406 	br	81106784 <__reset+0xfb0e6784>
811070f4:	d9801417 	ldw	r6,80(sp)
811070f8:	d9c01517 	ldw	r7,84(sp)
811070fc:	0009883a 	mov	r4,zero
81107100:	014ff834 	movhi	r5,16352
81107104:	11153f00 	call	811153f0 <__subdf3>
81107108:	880d883a 	mov	r6,r17
8110710c:	a00f883a 	mov	r7,r20
81107110:	1009883a 	mov	r4,r2
81107114:	180b883a 	mov	r5,r3
81107118:	1114b080 	call	81114b08 <__gedf2>
8110711c:	00bc7c0e 	bge	zero,r2,81106310 <__reset+0xfb0e6310>
81107120:	01000c04 	movi	r4,48
81107124:	00000106 	br	8110712c <_dtoa_r+0x1580>
81107128:	102f883a 	mov	r23,r2
8110712c:	b8bfffc4 	addi	r2,r23,-1
81107130:	10c00007 	ldb	r3,0(r2)
81107134:	193ffc26 	beq	r3,r4,81107128 <__reset+0xfb0e7128>
81107138:	d9801317 	ldw	r6,76(sp)
8110713c:	d9800515 	stw	r6,20(sp)
81107140:	003c4406 	br	81106254 <__reset+0xfb0e6254>
81107144:	d9801317 	ldw	r6,76(sp)
81107148:	d9800515 	stw	r6,20(sp)
8110714c:	003cea06 	br	811064f8 <__reset+0xfb0e64f8>
81107150:	dd800f17 	ldw	r22,60(sp)
81107154:	dcc01017 	ldw	r19,64(sp)
81107158:	dc801217 	ldw	r18,72(sp)
8110715c:	003c6c06 	br	81106310 <__reset+0xfb0e6310>
81107160:	903e031e 	bne	r18,zero,81106970 <__reset+0xfb0e6970>
81107164:	003ebb06 	br	81106c54 <__reset+0xfb0e6c54>
81107168:	103e6c1e 	bne	r2,zero,81106b1c <__reset+0xfb0e6b1c>
8110716c:	4080004c 	andi	r2,r8,1
81107170:	103e6a26 	beq	r2,zero,81106b1c <__reset+0xfb0e6b1c>
81107174:	003e6606 	br	81106b10 <__reset+0xfb0e6b10>
81107178:	d8c00317 	ldw	r3,12(sp)
8110717c:	00800084 	movi	r2,2
81107180:	10c02916 	blt	r2,r3,81107228 <_dtoa_r+0x167c>
81107184:	d9000c17 	ldw	r4,48(sp)
81107188:	003e8806 	br	81106bac <__reset+0xfb0e6bac>
8110718c:	04000084 	movi	r16,2
81107190:	003b9d06 	br	81106008 <__reset+0xfb0e6008>
81107194:	d9001317 	ldw	r4,76(sp)
81107198:	d9000515 	stw	r4,20(sp)
8110719c:	003cd606 	br	811064f8 <__reset+0xfb0e64f8>
811071a0:	d8801317 	ldw	r2,76(sp)
811071a4:	d8800515 	stw	r2,20(sp)
811071a8:	003c2a06 	br	81106254 <__reset+0xfb0e6254>
811071ac:	d9800317 	ldw	r6,12(sp)
811071b0:	00800084 	movi	r2,2
811071b4:	11801516 	blt	r2,r6,8110720c <_dtoa_r+0x1660>
811071b8:	d9c00c17 	ldw	r7,48(sp)
811071bc:	d9c00615 	stw	r7,24(sp)
811071c0:	003df706 	br	811069a0 <__reset+0xfb0e69a0>
811071c4:	193d3926 	beq	r3,r4,811066ac <__reset+0xfb0e66ac>
811071c8:	00c00f04 	movi	r3,60
811071cc:	1885c83a 	sub	r2,r3,r2
811071d0:	003ddf06 	br	81106950 <__reset+0xfb0e6950>
811071d4:	e009883a 	mov	r4,fp
811071d8:	e0001115 	stw	zero,68(fp)
811071dc:	000b883a 	mov	r5,zero
811071e0:	1108d6c0 	call	81108d6c <_Balloc>
811071e4:	d8800715 	stw	r2,28(sp)
811071e8:	d8c00717 	ldw	r3,28(sp)
811071ec:	00bfffc4 	movi	r2,-1
811071f0:	01000044 	movi	r4,1
811071f4:	d8800c15 	stw	r2,48(sp)
811071f8:	e0c01015 	stw	r3,64(fp)
811071fc:	d9000b15 	stw	r4,44(sp)
81107200:	d8800615 	stw	r2,24(sp)
81107204:	d8002215 	stw	zero,136(sp)
81107208:	003c4106 	br	81106310 <__reset+0xfb0e6310>
8110720c:	d8c00c17 	ldw	r3,48(sp)
81107210:	d8c00615 	stw	r3,24(sp)
81107214:	003e7006 	br	81106bd8 <__reset+0xfb0e6bd8>
81107218:	04400044 	movi	r17,1
8110721c:	003b2006 	br	81105ea0 <__reset+0xfb0e5ea0>
81107220:	000b883a 	mov	r5,zero
81107224:	003b3d06 	br	81105f1c <__reset+0xfb0e5f1c>
81107228:	d8800c17 	ldw	r2,48(sp)
8110722c:	d8800615 	stw	r2,24(sp)
81107230:	003e6906 	br	81106bd8 <__reset+0xfb0e6bd8>

81107234 <__sflush_r>:
81107234:	2880030b 	ldhu	r2,12(r5)
81107238:	defffb04 	addi	sp,sp,-20
8110723c:	dcc00315 	stw	r19,12(sp)
81107240:	dc400115 	stw	r17,4(sp)
81107244:	dfc00415 	stw	ra,16(sp)
81107248:	dc800215 	stw	r18,8(sp)
8110724c:	dc000015 	stw	r16,0(sp)
81107250:	10c0020c 	andi	r3,r2,8
81107254:	2823883a 	mov	r17,r5
81107258:	2027883a 	mov	r19,r4
8110725c:	1800311e 	bne	r3,zero,81107324 <__sflush_r+0xf0>
81107260:	28c00117 	ldw	r3,4(r5)
81107264:	10820014 	ori	r2,r2,2048
81107268:	2880030d 	sth	r2,12(r5)
8110726c:	00c04b0e 	bge	zero,r3,8110739c <__sflush_r+0x168>
81107270:	8a000a17 	ldw	r8,40(r17)
81107274:	40002326 	beq	r8,zero,81107304 <__sflush_r+0xd0>
81107278:	9c000017 	ldw	r16,0(r19)
8110727c:	10c4000c 	andi	r3,r2,4096
81107280:	98000015 	stw	zero,0(r19)
81107284:	18004826 	beq	r3,zero,811073a8 <__sflush_r+0x174>
81107288:	89801417 	ldw	r6,80(r17)
8110728c:	10c0010c 	andi	r3,r2,4
81107290:	18000626 	beq	r3,zero,811072ac <__sflush_r+0x78>
81107294:	88c00117 	ldw	r3,4(r17)
81107298:	88800c17 	ldw	r2,48(r17)
8110729c:	30cdc83a 	sub	r6,r6,r3
811072a0:	10000226 	beq	r2,zero,811072ac <__sflush_r+0x78>
811072a4:	88800f17 	ldw	r2,60(r17)
811072a8:	308dc83a 	sub	r6,r6,r2
811072ac:	89400717 	ldw	r5,28(r17)
811072b0:	000f883a 	mov	r7,zero
811072b4:	9809883a 	mov	r4,r19
811072b8:	403ee83a 	callr	r8
811072bc:	00ffffc4 	movi	r3,-1
811072c0:	10c04426 	beq	r2,r3,811073d4 <__sflush_r+0x1a0>
811072c4:	88c0030b 	ldhu	r3,12(r17)
811072c8:	89000417 	ldw	r4,16(r17)
811072cc:	88000115 	stw	zero,4(r17)
811072d0:	197dffcc 	andi	r5,r3,63487
811072d4:	8940030d 	sth	r5,12(r17)
811072d8:	89000015 	stw	r4,0(r17)
811072dc:	18c4000c 	andi	r3,r3,4096
811072e0:	18002c1e 	bne	r3,zero,81107394 <__sflush_r+0x160>
811072e4:	89400c17 	ldw	r5,48(r17)
811072e8:	9c000015 	stw	r16,0(r19)
811072ec:	28000526 	beq	r5,zero,81107304 <__sflush_r+0xd0>
811072f0:	88801004 	addi	r2,r17,64
811072f4:	28800226 	beq	r5,r2,81107300 <__sflush_r+0xcc>
811072f8:	9809883a 	mov	r4,r19
811072fc:	1107cac0 	call	81107cac <_free_r>
81107300:	88000c15 	stw	zero,48(r17)
81107304:	0005883a 	mov	r2,zero
81107308:	dfc00417 	ldw	ra,16(sp)
8110730c:	dcc00317 	ldw	r19,12(sp)
81107310:	dc800217 	ldw	r18,8(sp)
81107314:	dc400117 	ldw	r17,4(sp)
81107318:	dc000017 	ldw	r16,0(sp)
8110731c:	dec00504 	addi	sp,sp,20
81107320:	f800283a 	ret
81107324:	2c800417 	ldw	r18,16(r5)
81107328:	903ff626 	beq	r18,zero,81107304 <__reset+0xfb0e7304>
8110732c:	2c000017 	ldw	r16,0(r5)
81107330:	108000cc 	andi	r2,r2,3
81107334:	2c800015 	stw	r18,0(r5)
81107338:	84a1c83a 	sub	r16,r16,r18
8110733c:	1000131e 	bne	r2,zero,8110738c <__sflush_r+0x158>
81107340:	28800517 	ldw	r2,20(r5)
81107344:	88800215 	stw	r2,8(r17)
81107348:	04000316 	blt	zero,r16,81107358 <__sflush_r+0x124>
8110734c:	003fed06 	br	81107304 <__reset+0xfb0e7304>
81107350:	90a5883a 	add	r18,r18,r2
81107354:	043feb0e 	bge	zero,r16,81107304 <__reset+0xfb0e7304>
81107358:	88800917 	ldw	r2,36(r17)
8110735c:	89400717 	ldw	r5,28(r17)
81107360:	800f883a 	mov	r7,r16
81107364:	900d883a 	mov	r6,r18
81107368:	9809883a 	mov	r4,r19
8110736c:	103ee83a 	callr	r2
81107370:	80a1c83a 	sub	r16,r16,r2
81107374:	00bff616 	blt	zero,r2,81107350 <__reset+0xfb0e7350>
81107378:	88c0030b 	ldhu	r3,12(r17)
8110737c:	00bfffc4 	movi	r2,-1
81107380:	18c01014 	ori	r3,r3,64
81107384:	88c0030d 	sth	r3,12(r17)
81107388:	003fdf06 	br	81107308 <__reset+0xfb0e7308>
8110738c:	0005883a 	mov	r2,zero
81107390:	003fec06 	br	81107344 <__reset+0xfb0e7344>
81107394:	88801415 	stw	r2,80(r17)
81107398:	003fd206 	br	811072e4 <__reset+0xfb0e72e4>
8110739c:	28c00f17 	ldw	r3,60(r5)
811073a0:	00ffb316 	blt	zero,r3,81107270 <__reset+0xfb0e7270>
811073a4:	003fd706 	br	81107304 <__reset+0xfb0e7304>
811073a8:	89400717 	ldw	r5,28(r17)
811073ac:	000d883a 	mov	r6,zero
811073b0:	01c00044 	movi	r7,1
811073b4:	9809883a 	mov	r4,r19
811073b8:	403ee83a 	callr	r8
811073bc:	100d883a 	mov	r6,r2
811073c0:	00bfffc4 	movi	r2,-1
811073c4:	30801426 	beq	r6,r2,81107418 <__sflush_r+0x1e4>
811073c8:	8880030b 	ldhu	r2,12(r17)
811073cc:	8a000a17 	ldw	r8,40(r17)
811073d0:	003fae06 	br	8110728c <__reset+0xfb0e728c>
811073d4:	98c00017 	ldw	r3,0(r19)
811073d8:	183fba26 	beq	r3,zero,811072c4 <__reset+0xfb0e72c4>
811073dc:	01000744 	movi	r4,29
811073e0:	19000626 	beq	r3,r4,811073fc <__sflush_r+0x1c8>
811073e4:	01000584 	movi	r4,22
811073e8:	19000426 	beq	r3,r4,811073fc <__sflush_r+0x1c8>
811073ec:	88c0030b 	ldhu	r3,12(r17)
811073f0:	18c01014 	ori	r3,r3,64
811073f4:	88c0030d 	sth	r3,12(r17)
811073f8:	003fc306 	br	81107308 <__reset+0xfb0e7308>
811073fc:	8880030b 	ldhu	r2,12(r17)
81107400:	88c00417 	ldw	r3,16(r17)
81107404:	88000115 	stw	zero,4(r17)
81107408:	10bdffcc 	andi	r2,r2,63487
8110740c:	8880030d 	sth	r2,12(r17)
81107410:	88c00015 	stw	r3,0(r17)
81107414:	003fb306 	br	811072e4 <__reset+0xfb0e72e4>
81107418:	98800017 	ldw	r2,0(r19)
8110741c:	103fea26 	beq	r2,zero,811073c8 <__reset+0xfb0e73c8>
81107420:	00c00744 	movi	r3,29
81107424:	10c00226 	beq	r2,r3,81107430 <__sflush_r+0x1fc>
81107428:	00c00584 	movi	r3,22
8110742c:	10c0031e 	bne	r2,r3,8110743c <__sflush_r+0x208>
81107430:	9c000015 	stw	r16,0(r19)
81107434:	0005883a 	mov	r2,zero
81107438:	003fb306 	br	81107308 <__reset+0xfb0e7308>
8110743c:	88c0030b 	ldhu	r3,12(r17)
81107440:	3005883a 	mov	r2,r6
81107444:	18c01014 	ori	r3,r3,64
81107448:	88c0030d 	sth	r3,12(r17)
8110744c:	003fae06 	br	81107308 <__reset+0xfb0e7308>

81107450 <_fflush_r>:
81107450:	defffd04 	addi	sp,sp,-12
81107454:	dc000115 	stw	r16,4(sp)
81107458:	dfc00215 	stw	ra,8(sp)
8110745c:	2021883a 	mov	r16,r4
81107460:	20000226 	beq	r4,zero,8110746c <_fflush_r+0x1c>
81107464:	20800e17 	ldw	r2,56(r4)
81107468:	10000c26 	beq	r2,zero,8110749c <_fflush_r+0x4c>
8110746c:	2880030f 	ldh	r2,12(r5)
81107470:	1000051e 	bne	r2,zero,81107488 <_fflush_r+0x38>
81107474:	0005883a 	mov	r2,zero
81107478:	dfc00217 	ldw	ra,8(sp)
8110747c:	dc000117 	ldw	r16,4(sp)
81107480:	dec00304 	addi	sp,sp,12
81107484:	f800283a 	ret
81107488:	8009883a 	mov	r4,r16
8110748c:	dfc00217 	ldw	ra,8(sp)
81107490:	dc000117 	ldw	r16,4(sp)
81107494:	dec00304 	addi	sp,sp,12
81107498:	11072341 	jmpi	81107234 <__sflush_r>
8110749c:	d9400015 	stw	r5,0(sp)
811074a0:	110782c0 	call	8110782c <__sinit>
811074a4:	d9400017 	ldw	r5,0(sp)
811074a8:	003ff006 	br	8110746c <__reset+0xfb0e746c>

811074ac <fflush>:
811074ac:	20000526 	beq	r4,zero,811074c4 <fflush+0x18>
811074b0:	00a044b4 	movhi	r2,33042
811074b4:	109b9c04 	addi	r2,r2,28272
811074b8:	200b883a 	mov	r5,r4
811074bc:	11000017 	ldw	r4,0(r2)
811074c0:	11074501 	jmpi	81107450 <_fflush_r>
811074c4:	00a044b4 	movhi	r2,33042
811074c8:	109b9b04 	addi	r2,r2,28268
811074cc:	11000017 	ldw	r4,0(r2)
811074d0:	01604434 	movhi	r5,33040
811074d4:	295d1404 	addi	r5,r5,29776
811074d8:	110853c1 	jmpi	8110853c <_fwalk_reent>

811074dc <__fp_unlock>:
811074dc:	0005883a 	mov	r2,zero
811074e0:	f800283a 	ret

811074e4 <_cleanup_r>:
811074e4:	01604474 	movhi	r5,33041
811074e8:	2940d904 	addi	r5,r5,868
811074ec:	110853c1 	jmpi	8110853c <_fwalk_reent>

811074f0 <__sinit.part.1>:
811074f0:	defff704 	addi	sp,sp,-36
811074f4:	00e04434 	movhi	r3,33040
811074f8:	dfc00815 	stw	ra,32(sp)
811074fc:	ddc00715 	stw	r23,28(sp)
81107500:	dd800615 	stw	r22,24(sp)
81107504:	dd400515 	stw	r21,20(sp)
81107508:	dd000415 	stw	r20,16(sp)
8110750c:	dcc00315 	stw	r19,12(sp)
81107510:	dc800215 	stw	r18,8(sp)
81107514:	dc400115 	stw	r17,4(sp)
81107518:	dc000015 	stw	r16,0(sp)
8110751c:	18dd3904 	addi	r3,r3,29924
81107520:	24000117 	ldw	r16,4(r4)
81107524:	20c00f15 	stw	r3,60(r4)
81107528:	2080bb04 	addi	r2,r4,748
8110752c:	00c000c4 	movi	r3,3
81107530:	20c0b915 	stw	r3,740(r4)
81107534:	2080ba15 	stw	r2,744(r4)
81107538:	2000b815 	stw	zero,736(r4)
8110753c:	05c00204 	movi	r23,8
81107540:	00800104 	movi	r2,4
81107544:	2025883a 	mov	r18,r4
81107548:	b80d883a 	mov	r6,r23
8110754c:	81001704 	addi	r4,r16,92
81107550:	000b883a 	mov	r5,zero
81107554:	80000015 	stw	zero,0(r16)
81107558:	80000115 	stw	zero,4(r16)
8110755c:	80000215 	stw	zero,8(r16)
81107560:	8080030d 	sth	r2,12(r16)
81107564:	80001915 	stw	zero,100(r16)
81107568:	8000038d 	sth	zero,14(r16)
8110756c:	80000415 	stw	zero,16(r16)
81107570:	80000515 	stw	zero,20(r16)
81107574:	80000615 	stw	zero,24(r16)
81107578:	11014fc0 	call	811014fc <memset>
8110757c:	05a04434 	movhi	r22,33040
81107580:	94400217 	ldw	r17,8(r18)
81107584:	05604434 	movhi	r21,33040
81107588:	05204434 	movhi	r20,33040
8110758c:	04e04434 	movhi	r19,33040
81107590:	b5869d04 	addi	r22,r22,6772
81107594:	ad46b404 	addi	r21,r21,6864
81107598:	a506d304 	addi	r20,r20,6988
8110759c:	9cc6ea04 	addi	r19,r19,7080
811075a0:	85800815 	stw	r22,32(r16)
811075a4:	85400915 	stw	r21,36(r16)
811075a8:	85000a15 	stw	r20,40(r16)
811075ac:	84c00b15 	stw	r19,44(r16)
811075b0:	84000715 	stw	r16,28(r16)
811075b4:	00800284 	movi	r2,10
811075b8:	8880030d 	sth	r2,12(r17)
811075bc:	00800044 	movi	r2,1
811075c0:	b80d883a 	mov	r6,r23
811075c4:	89001704 	addi	r4,r17,92
811075c8:	000b883a 	mov	r5,zero
811075cc:	88000015 	stw	zero,0(r17)
811075d0:	88000115 	stw	zero,4(r17)
811075d4:	88000215 	stw	zero,8(r17)
811075d8:	88001915 	stw	zero,100(r17)
811075dc:	8880038d 	sth	r2,14(r17)
811075e0:	88000415 	stw	zero,16(r17)
811075e4:	88000515 	stw	zero,20(r17)
811075e8:	88000615 	stw	zero,24(r17)
811075ec:	11014fc0 	call	811014fc <memset>
811075f0:	94000317 	ldw	r16,12(r18)
811075f4:	00800484 	movi	r2,18
811075f8:	8c400715 	stw	r17,28(r17)
811075fc:	8d800815 	stw	r22,32(r17)
81107600:	8d400915 	stw	r21,36(r17)
81107604:	8d000a15 	stw	r20,40(r17)
81107608:	8cc00b15 	stw	r19,44(r17)
8110760c:	8080030d 	sth	r2,12(r16)
81107610:	00800084 	movi	r2,2
81107614:	80000015 	stw	zero,0(r16)
81107618:	80000115 	stw	zero,4(r16)
8110761c:	80000215 	stw	zero,8(r16)
81107620:	80001915 	stw	zero,100(r16)
81107624:	8080038d 	sth	r2,14(r16)
81107628:	80000415 	stw	zero,16(r16)
8110762c:	80000515 	stw	zero,20(r16)
81107630:	80000615 	stw	zero,24(r16)
81107634:	b80d883a 	mov	r6,r23
81107638:	000b883a 	mov	r5,zero
8110763c:	81001704 	addi	r4,r16,92
81107640:	11014fc0 	call	811014fc <memset>
81107644:	00800044 	movi	r2,1
81107648:	84000715 	stw	r16,28(r16)
8110764c:	85800815 	stw	r22,32(r16)
81107650:	85400915 	stw	r21,36(r16)
81107654:	85000a15 	stw	r20,40(r16)
81107658:	84c00b15 	stw	r19,44(r16)
8110765c:	90800e15 	stw	r2,56(r18)
81107660:	dfc00817 	ldw	ra,32(sp)
81107664:	ddc00717 	ldw	r23,28(sp)
81107668:	dd800617 	ldw	r22,24(sp)
8110766c:	dd400517 	ldw	r21,20(sp)
81107670:	dd000417 	ldw	r20,16(sp)
81107674:	dcc00317 	ldw	r19,12(sp)
81107678:	dc800217 	ldw	r18,8(sp)
8110767c:	dc400117 	ldw	r17,4(sp)
81107680:	dc000017 	ldw	r16,0(sp)
81107684:	dec00904 	addi	sp,sp,36
81107688:	f800283a 	ret

8110768c <__fp_lock>:
8110768c:	0005883a 	mov	r2,zero
81107690:	f800283a 	ret

81107694 <__sfmoreglue>:
81107694:	defffc04 	addi	sp,sp,-16
81107698:	dc400115 	stw	r17,4(sp)
8110769c:	2c7fffc4 	addi	r17,r5,-1
811076a0:	8c401a24 	muli	r17,r17,104
811076a4:	dc800215 	stw	r18,8(sp)
811076a8:	2825883a 	mov	r18,r5
811076ac:	89401d04 	addi	r5,r17,116
811076b0:	dc000015 	stw	r16,0(sp)
811076b4:	dfc00315 	stw	ra,12(sp)
811076b8:	1100cf00 	call	81100cf0 <_malloc_r>
811076bc:	1021883a 	mov	r16,r2
811076c0:	10000726 	beq	r2,zero,811076e0 <__sfmoreglue+0x4c>
811076c4:	11000304 	addi	r4,r2,12
811076c8:	10000015 	stw	zero,0(r2)
811076cc:	14800115 	stw	r18,4(r2)
811076d0:	11000215 	stw	r4,8(r2)
811076d4:	89801a04 	addi	r6,r17,104
811076d8:	000b883a 	mov	r5,zero
811076dc:	11014fc0 	call	811014fc <memset>
811076e0:	8005883a 	mov	r2,r16
811076e4:	dfc00317 	ldw	ra,12(sp)
811076e8:	dc800217 	ldw	r18,8(sp)
811076ec:	dc400117 	ldw	r17,4(sp)
811076f0:	dc000017 	ldw	r16,0(sp)
811076f4:	dec00404 	addi	sp,sp,16
811076f8:	f800283a 	ret

811076fc <__sfp>:
811076fc:	defffb04 	addi	sp,sp,-20
81107700:	dc000015 	stw	r16,0(sp)
81107704:	042044b4 	movhi	r16,33042
81107708:	841b9b04 	addi	r16,r16,28268
8110770c:	dcc00315 	stw	r19,12(sp)
81107710:	2027883a 	mov	r19,r4
81107714:	81000017 	ldw	r4,0(r16)
81107718:	dfc00415 	stw	ra,16(sp)
8110771c:	dc800215 	stw	r18,8(sp)
81107720:	20800e17 	ldw	r2,56(r4)
81107724:	dc400115 	stw	r17,4(sp)
81107728:	1000021e 	bne	r2,zero,81107734 <__sfp+0x38>
8110772c:	11074f00 	call	811074f0 <__sinit.part.1>
81107730:	81000017 	ldw	r4,0(r16)
81107734:	2480b804 	addi	r18,r4,736
81107738:	047fffc4 	movi	r17,-1
8110773c:	91000117 	ldw	r4,4(r18)
81107740:	94000217 	ldw	r16,8(r18)
81107744:	213fffc4 	addi	r4,r4,-1
81107748:	20000a16 	blt	r4,zero,81107774 <__sfp+0x78>
8110774c:	8080030f 	ldh	r2,12(r16)
81107750:	10000c26 	beq	r2,zero,81107784 <__sfp+0x88>
81107754:	80c01d04 	addi	r3,r16,116
81107758:	00000206 	br	81107764 <__sfp+0x68>
8110775c:	18bfe60f 	ldh	r2,-104(r3)
81107760:	10000826 	beq	r2,zero,81107784 <__sfp+0x88>
81107764:	213fffc4 	addi	r4,r4,-1
81107768:	1c3ffd04 	addi	r16,r3,-12
8110776c:	18c01a04 	addi	r3,r3,104
81107770:	247ffa1e 	bne	r4,r17,8110775c <__reset+0xfb0e775c>
81107774:	90800017 	ldw	r2,0(r18)
81107778:	10001d26 	beq	r2,zero,811077f0 <__sfp+0xf4>
8110777c:	1025883a 	mov	r18,r2
81107780:	003fee06 	br	8110773c <__reset+0xfb0e773c>
81107784:	00bfffc4 	movi	r2,-1
81107788:	8080038d 	sth	r2,14(r16)
8110778c:	00800044 	movi	r2,1
81107790:	8080030d 	sth	r2,12(r16)
81107794:	80001915 	stw	zero,100(r16)
81107798:	80000015 	stw	zero,0(r16)
8110779c:	80000215 	stw	zero,8(r16)
811077a0:	80000115 	stw	zero,4(r16)
811077a4:	80000415 	stw	zero,16(r16)
811077a8:	80000515 	stw	zero,20(r16)
811077ac:	80000615 	stw	zero,24(r16)
811077b0:	01800204 	movi	r6,8
811077b4:	000b883a 	mov	r5,zero
811077b8:	81001704 	addi	r4,r16,92
811077bc:	11014fc0 	call	811014fc <memset>
811077c0:	8005883a 	mov	r2,r16
811077c4:	80000c15 	stw	zero,48(r16)
811077c8:	80000d15 	stw	zero,52(r16)
811077cc:	80001115 	stw	zero,68(r16)
811077d0:	80001215 	stw	zero,72(r16)
811077d4:	dfc00417 	ldw	ra,16(sp)
811077d8:	dcc00317 	ldw	r19,12(sp)
811077dc:	dc800217 	ldw	r18,8(sp)
811077e0:	dc400117 	ldw	r17,4(sp)
811077e4:	dc000017 	ldw	r16,0(sp)
811077e8:	dec00504 	addi	sp,sp,20
811077ec:	f800283a 	ret
811077f0:	01400104 	movi	r5,4
811077f4:	9809883a 	mov	r4,r19
811077f8:	11076940 	call	81107694 <__sfmoreglue>
811077fc:	90800015 	stw	r2,0(r18)
81107800:	103fde1e 	bne	r2,zero,8110777c <__reset+0xfb0e777c>
81107804:	00800304 	movi	r2,12
81107808:	98800015 	stw	r2,0(r19)
8110780c:	0005883a 	mov	r2,zero
81107810:	003ff006 	br	811077d4 <__reset+0xfb0e77d4>

81107814 <_cleanup>:
81107814:	00a044b4 	movhi	r2,33042
81107818:	109b9b04 	addi	r2,r2,28268
8110781c:	11000017 	ldw	r4,0(r2)
81107820:	01604474 	movhi	r5,33041
81107824:	2940d904 	addi	r5,r5,868
81107828:	110853c1 	jmpi	8110853c <_fwalk_reent>

8110782c <__sinit>:
8110782c:	20800e17 	ldw	r2,56(r4)
81107830:	10000126 	beq	r2,zero,81107838 <__sinit+0xc>
81107834:	f800283a 	ret
81107838:	11074f01 	jmpi	811074f0 <__sinit.part.1>

8110783c <__sfp_lock_acquire>:
8110783c:	f800283a 	ret

81107840 <__sfp_lock_release>:
81107840:	f800283a 	ret

81107844 <__sinit_lock_acquire>:
81107844:	f800283a 	ret

81107848 <__sinit_lock_release>:
81107848:	f800283a 	ret

8110784c <__fp_lock_all>:
8110784c:	00a044b4 	movhi	r2,33042
81107850:	109b9c04 	addi	r2,r2,28272
81107854:	11000017 	ldw	r4,0(r2)
81107858:	01604434 	movhi	r5,33040
8110785c:	295da304 	addi	r5,r5,30348
81107860:	11084781 	jmpi	81108478 <_fwalk>

81107864 <__fp_unlock_all>:
81107864:	00a044b4 	movhi	r2,33042
81107868:	109b9c04 	addi	r2,r2,28272
8110786c:	11000017 	ldw	r4,0(r2)
81107870:	01604434 	movhi	r5,33040
81107874:	295d3704 	addi	r5,r5,29916
81107878:	11084781 	jmpi	81108478 <_fwalk>

8110787c <__sflags>:
8110787c:	28800007 	ldb	r2,0(r5)
81107880:	00c01c84 	movi	r3,114
81107884:	10c02426 	beq	r2,r3,81107918 <__sflags+0x9c>
81107888:	00c01dc4 	movi	r3,119
8110788c:	10c01e26 	beq	r2,r3,81107908 <__sflags+0x8c>
81107890:	00c01844 	movi	r3,97
81107894:	10c00426 	beq	r2,r3,811078a8 <__sflags+0x2c>
81107898:	00800584 	movi	r2,22
8110789c:	20800015 	stw	r2,0(r4)
811078a0:	0005883a 	mov	r2,zero
811078a4:	f800283a 	ret
811078a8:	02c08204 	movi	r11,520
811078ac:	01000044 	movi	r4,1
811078b0:	00804204 	movi	r2,264
811078b4:	01c00ac4 	movi	r7,43
811078b8:	02bff8c4 	movi	r10,-29
811078bc:	027fff04 	movi	r9,-4
811078c0:	02001e04 	movi	r8,120
811078c4:	29400044 	addi	r5,r5,1
811078c8:	28c00007 	ldb	r3,0(r5)
811078cc:	18000626 	beq	r3,zero,811078e8 <__sflags+0x6c>
811078d0:	19c00826 	beq	r3,r7,811078f4 <__sflags+0x78>
811078d4:	1a3ffb1e 	bne	r3,r8,811078c4 <__reset+0xfb0e78c4>
811078d8:	29400044 	addi	r5,r5,1
811078dc:	28c00007 	ldb	r3,0(r5)
811078e0:	21020014 	ori	r4,r4,2048
811078e4:	183ffa1e 	bne	r3,zero,811078d0 <__reset+0xfb0e78d0>
811078e8:	22c8b03a 	or	r4,r4,r11
811078ec:	31000015 	stw	r4,0(r6)
811078f0:	f800283a 	ret
811078f4:	1284703a 	and	r2,r2,r10
811078f8:	2248703a 	and	r4,r4,r9
811078fc:	10800414 	ori	r2,r2,16
81107900:	21000094 	ori	r4,r4,2
81107904:	003fef06 	br	811078c4 <__reset+0xfb0e78c4>
81107908:	02c18004 	movi	r11,1536
8110790c:	01000044 	movi	r4,1
81107910:	00800204 	movi	r2,8
81107914:	003fe706 	br	811078b4 <__reset+0xfb0e78b4>
81107918:	0017883a 	mov	r11,zero
8110791c:	0009883a 	mov	r4,zero
81107920:	00800104 	movi	r2,4
81107924:	003fe306 	br	811078b4 <__reset+0xfb0e78b4>

81107928 <_fread_r>:
81107928:	defff404 	addi	sp,sp,-48
8110792c:	dd800815 	stw	r22,32(sp)
81107930:	39ad383a 	mul	r22,r7,r6
81107934:	dc000215 	stw	r16,8(sp)
81107938:	dfc00b15 	stw	ra,44(sp)
8110793c:	df000a15 	stw	fp,40(sp)
81107940:	ddc00915 	stw	r23,36(sp)
81107944:	dd400715 	stw	r21,28(sp)
81107948:	dd000615 	stw	r20,24(sp)
8110794c:	dcc00515 	stw	r19,20(sp)
81107950:	dc800415 	stw	r18,16(sp)
81107954:	dc400315 	stw	r17,12(sp)
81107958:	dc000c17 	ldw	r16,48(sp)
8110795c:	b0003b26 	beq	r22,zero,81107a4c <_fread_r+0x124>
81107960:	302f883a 	mov	r23,r6
81107964:	382b883a 	mov	r21,r7
81107968:	2029883a 	mov	r20,r4
8110796c:	2827883a 	mov	r19,r5
81107970:	20000226 	beq	r4,zero,8110797c <_fread_r+0x54>
81107974:	20800e17 	ldw	r2,56(r4)
81107978:	10006e26 	beq	r2,zero,81107b34 <_fread_r+0x20c>
8110797c:	8080030b 	ldhu	r2,12(r16)
81107980:	10c8000c 	andi	r3,r2,8192
81107984:	1800061e 	bne	r3,zero,811079a0 <_fread_r+0x78>
81107988:	81001917 	ldw	r4,100(r16)
8110798c:	00f7ffc4 	movi	r3,-8193
81107990:	10880014 	ori	r2,r2,8192
81107994:	20c6703a 	and	r3,r4,r3
81107998:	8080030d 	sth	r2,12(r16)
8110799c:	80c01915 	stw	r3,100(r16)
811079a0:	84400117 	ldw	r17,4(r16)
811079a4:	88005f16 	blt	r17,zero,81107b24 <_fread_r+0x1fc>
811079a8:	8809883a 	mov	r4,r17
811079ac:	1080008c 	andi	r2,r2,2
811079b0:	1000281e 	bne	r2,zero,81107a54 <_fread_r+0x12c>
811079b4:	b025883a 	mov	r18,r22
811079b8:	00000b06 	br	811079e8 <_fread_r+0xc0>
811079bc:	1108ac80 	call	81108ac8 <memcpy>
811079c0:	80800017 	ldw	r2,0(r16)
811079c4:	9c67883a 	add	r19,r19,r17
811079c8:	9465c83a 	sub	r18,r18,r17
811079cc:	1463883a 	add	r17,r2,r17
811079d0:	800b883a 	mov	r5,r16
811079d4:	a009883a 	mov	r4,r20
811079d8:	84400015 	stw	r17,0(r16)
811079dc:	11017e00 	call	811017e0 <__srefill_r>
811079e0:	10004c1e 	bne	r2,zero,81107b14 <_fread_r+0x1ec>
811079e4:	84400117 	ldw	r17,4(r16)
811079e8:	880d883a 	mov	r6,r17
811079ec:	9809883a 	mov	r4,r19
811079f0:	81400017 	ldw	r5,0(r16)
811079f4:	8cbff136 	bltu	r17,r18,811079bc <__reset+0xfb0e79bc>
811079f8:	900d883a 	mov	r6,r18
811079fc:	1108ac80 	call	81108ac8 <memcpy>
81107a00:	80c00117 	ldw	r3,4(r16)
81107a04:	81000017 	ldw	r4,0(r16)
81107a08:	a805883a 	mov	r2,r21
81107a0c:	1c87c83a 	sub	r3,r3,r18
81107a10:	24a5883a 	add	r18,r4,r18
81107a14:	80c00115 	stw	r3,4(r16)
81107a18:	84800015 	stw	r18,0(r16)
81107a1c:	dfc00b17 	ldw	ra,44(sp)
81107a20:	df000a17 	ldw	fp,40(sp)
81107a24:	ddc00917 	ldw	r23,36(sp)
81107a28:	dd800817 	ldw	r22,32(sp)
81107a2c:	dd400717 	ldw	r21,28(sp)
81107a30:	dd000617 	ldw	r20,24(sp)
81107a34:	dcc00517 	ldw	r19,20(sp)
81107a38:	dc800417 	ldw	r18,16(sp)
81107a3c:	dc400317 	ldw	r17,12(sp)
81107a40:	dc000217 	ldw	r16,8(sp)
81107a44:	dec00c04 	addi	sp,sp,48
81107a48:	f800283a 	ret
81107a4c:	0005883a 	mov	r2,zero
81107a50:	003ff206 	br	81107a1c <__reset+0xfb0e7a1c>
81107a54:	b007883a 	mov	r3,r22
81107a58:	2580012e 	bgeu	r4,r22,81107a60 <_fread_r+0x138>
81107a5c:	2007883a 	mov	r3,r4
81107a60:	81400017 	ldw	r5,0(r16)
81107a64:	180d883a 	mov	r6,r3
81107a68:	9809883a 	mov	r4,r19
81107a6c:	d8c00115 	stw	r3,4(sp)
81107a70:	1108ac80 	call	81108ac8 <memcpy>
81107a74:	d8c00117 	ldw	r3,4(sp)
81107a78:	84400017 	ldw	r17,0(r16)
81107a7c:	80800117 	ldw	r2,4(r16)
81107a80:	81400c17 	ldw	r5,48(r16)
81107a84:	88e3883a 	add	r17,r17,r3
81107a88:	10c5c83a 	sub	r2,r2,r3
81107a8c:	84400015 	stw	r17,0(r16)
81107a90:	80800115 	stw	r2,4(r16)
81107a94:	b0e5c83a 	sub	r18,r22,r3
81107a98:	28002b26 	beq	r5,zero,81107b48 <_fread_r+0x220>
81107a9c:	90002b26 	beq	r18,zero,81107b4c <_fread_r+0x224>
81107aa0:	80801004 	addi	r2,r16,64
81107aa4:	28800526 	beq	r5,r2,81107abc <_fread_r+0x194>
81107aa8:	a009883a 	mov	r4,r20
81107aac:	d8c00115 	stw	r3,4(sp)
81107ab0:	1107cac0 	call	81107cac <_free_r>
81107ab4:	d8c00117 	ldw	r3,4(sp)
81107ab8:	84400017 	ldw	r17,0(r16)
81107abc:	80000c15 	stw	zero,48(r16)
81107ac0:	80800517 	ldw	r2,20(r16)
81107ac4:	87000417 	ldw	fp,16(r16)
81107ac8:	98e7883a 	add	r19,r19,r3
81107acc:	d8800015 	stw	r2,0(sp)
81107ad0:	00000106 	br	81107ad8 <_fread_r+0x1b0>
81107ad4:	90001d26 	beq	r18,zero,81107b4c <_fread_r+0x224>
81107ad8:	84c00415 	stw	r19,16(r16)
81107adc:	84800515 	stw	r18,20(r16)
81107ae0:	84c00015 	stw	r19,0(r16)
81107ae4:	a009883a 	mov	r4,r20
81107ae8:	800b883a 	mov	r5,r16
81107aec:	11017e00 	call	811017e0 <__srefill_r>
81107af0:	d9000017 	ldw	r4,0(sp)
81107af4:	80c00117 	ldw	r3,4(r16)
81107af8:	87000415 	stw	fp,16(r16)
81107afc:	81000515 	stw	r4,20(r16)
81107b00:	84400015 	stw	r17,0(r16)
81107b04:	80000115 	stw	zero,4(r16)
81107b08:	90e5c83a 	sub	r18,r18,r3
81107b0c:	98e7883a 	add	r19,r19,r3
81107b10:	103ff026 	beq	r2,zero,81107ad4 <__reset+0xfb0e7ad4>
81107b14:	b80b883a 	mov	r5,r23
81107b18:	b489c83a 	sub	r4,r22,r18
81107b1c:	11136340 	call	81113634 <__udivsi3>
81107b20:	003fbe06 	br	81107a1c <__reset+0xfb0e7a1c>
81107b24:	80000115 	stw	zero,4(r16)
81107b28:	0009883a 	mov	r4,zero
81107b2c:	0023883a 	mov	r17,zero
81107b30:	003f9e06 	br	811079ac <__reset+0xfb0e79ac>
81107b34:	110782c0 	call	8110782c <__sinit>
81107b38:	8080030b 	ldhu	r2,12(r16)
81107b3c:	10c8000c 	andi	r3,r2,8192
81107b40:	183f971e 	bne	r3,zero,811079a0 <__reset+0xfb0e79a0>
81107b44:	003f9006 	br	81107988 <__reset+0xfb0e7988>
81107b48:	903fdd1e 	bne	r18,zero,81107ac0 <__reset+0xfb0e7ac0>
81107b4c:	a805883a 	mov	r2,r21
81107b50:	003fb206 	br	81107a1c <__reset+0xfb0e7a1c>

81107b54 <fread>:
81107b54:	defffe04 	addi	sp,sp,-8
81107b58:	00a044b4 	movhi	r2,33042
81107b5c:	d9c00015 	stw	r7,0(sp)
81107b60:	109b9c04 	addi	r2,r2,28272
81107b64:	300f883a 	mov	r7,r6
81107b68:	280d883a 	mov	r6,r5
81107b6c:	200b883a 	mov	r5,r4
81107b70:	11000017 	ldw	r4,0(r2)
81107b74:	dfc00115 	stw	ra,4(sp)
81107b78:	11079280 	call	81107928 <_fread_r>
81107b7c:	dfc00117 	ldw	ra,4(sp)
81107b80:	dec00204 	addi	sp,sp,8
81107b84:	f800283a 	ret

81107b88 <_malloc_trim_r>:
81107b88:	defffb04 	addi	sp,sp,-20
81107b8c:	dcc00315 	stw	r19,12(sp)
81107b90:	04e044b4 	movhi	r19,33042
81107b94:	dc800215 	stw	r18,8(sp)
81107b98:	dc400115 	stw	r17,4(sp)
81107b9c:	dc000015 	stw	r16,0(sp)
81107ba0:	dfc00415 	stw	ra,16(sp)
81107ba4:	2821883a 	mov	r16,r5
81107ba8:	9cd58604 	addi	r19,r19,22040
81107bac:	2025883a 	mov	r18,r4
81107bb0:	1116cc40 	call	81116cc4 <__malloc_lock>
81107bb4:	98800217 	ldw	r2,8(r19)
81107bb8:	14400117 	ldw	r17,4(r2)
81107bbc:	00bfff04 	movi	r2,-4
81107bc0:	88a2703a 	and	r17,r17,r2
81107bc4:	8c21c83a 	sub	r16,r17,r16
81107bc8:	8403fbc4 	addi	r16,r16,4079
81107bcc:	8020d33a 	srli	r16,r16,12
81107bd0:	0083ffc4 	movi	r2,4095
81107bd4:	843fffc4 	addi	r16,r16,-1
81107bd8:	8020933a 	slli	r16,r16,12
81107bdc:	1400060e 	bge	r2,r16,81107bf8 <_malloc_trim_r+0x70>
81107be0:	000b883a 	mov	r5,zero
81107be4:	9009883a 	mov	r4,r18
81107be8:	11019b40 	call	811019b4 <_sbrk_r>
81107bec:	98c00217 	ldw	r3,8(r19)
81107bf0:	1c47883a 	add	r3,r3,r17
81107bf4:	10c00a26 	beq	r2,r3,81107c20 <_malloc_trim_r+0x98>
81107bf8:	9009883a 	mov	r4,r18
81107bfc:	1116de40 	call	81116de4 <__malloc_unlock>
81107c00:	0005883a 	mov	r2,zero
81107c04:	dfc00417 	ldw	ra,16(sp)
81107c08:	dcc00317 	ldw	r19,12(sp)
81107c0c:	dc800217 	ldw	r18,8(sp)
81107c10:	dc400117 	ldw	r17,4(sp)
81107c14:	dc000017 	ldw	r16,0(sp)
81107c18:	dec00504 	addi	sp,sp,20
81107c1c:	f800283a 	ret
81107c20:	040bc83a 	sub	r5,zero,r16
81107c24:	9009883a 	mov	r4,r18
81107c28:	11019b40 	call	811019b4 <_sbrk_r>
81107c2c:	00ffffc4 	movi	r3,-1
81107c30:	10c00d26 	beq	r2,r3,81107c68 <_malloc_trim_r+0xe0>
81107c34:	00e044b4 	movhi	r3,33042
81107c38:	18dbf904 	addi	r3,r3,28644
81107c3c:	18800017 	ldw	r2,0(r3)
81107c40:	99000217 	ldw	r4,8(r19)
81107c44:	8c23c83a 	sub	r17,r17,r16
81107c48:	8c400054 	ori	r17,r17,1
81107c4c:	1421c83a 	sub	r16,r2,r16
81107c50:	24400115 	stw	r17,4(r4)
81107c54:	9009883a 	mov	r4,r18
81107c58:	1c000015 	stw	r16,0(r3)
81107c5c:	1116de40 	call	81116de4 <__malloc_unlock>
81107c60:	00800044 	movi	r2,1
81107c64:	003fe706 	br	81107c04 <__reset+0xfb0e7c04>
81107c68:	000b883a 	mov	r5,zero
81107c6c:	9009883a 	mov	r4,r18
81107c70:	11019b40 	call	811019b4 <_sbrk_r>
81107c74:	99000217 	ldw	r4,8(r19)
81107c78:	014003c4 	movi	r5,15
81107c7c:	1107c83a 	sub	r3,r2,r4
81107c80:	28ffdd0e 	bge	r5,r3,81107bf8 <__reset+0xfb0e7bf8>
81107c84:	016044b4 	movhi	r5,33042
81107c88:	295b9d04 	addi	r5,r5,28276
81107c8c:	29400017 	ldw	r5,0(r5)
81107c90:	18c00054 	ori	r3,r3,1
81107c94:	20c00115 	stw	r3,4(r4)
81107c98:	00e044b4 	movhi	r3,33042
81107c9c:	1145c83a 	sub	r2,r2,r5
81107ca0:	18dbf904 	addi	r3,r3,28644
81107ca4:	18800015 	stw	r2,0(r3)
81107ca8:	003fd306 	br	81107bf8 <__reset+0xfb0e7bf8>

81107cac <_free_r>:
81107cac:	28004126 	beq	r5,zero,81107db4 <_free_r+0x108>
81107cb0:	defffd04 	addi	sp,sp,-12
81107cb4:	dc400115 	stw	r17,4(sp)
81107cb8:	dc000015 	stw	r16,0(sp)
81107cbc:	2023883a 	mov	r17,r4
81107cc0:	2821883a 	mov	r16,r5
81107cc4:	dfc00215 	stw	ra,8(sp)
81107cc8:	1116cc40 	call	81116cc4 <__malloc_lock>
81107ccc:	81ffff17 	ldw	r7,-4(r16)
81107cd0:	00bfff84 	movi	r2,-2
81107cd4:	012044b4 	movhi	r4,33042
81107cd8:	81bffe04 	addi	r6,r16,-8
81107cdc:	3884703a 	and	r2,r7,r2
81107ce0:	21158604 	addi	r4,r4,22040
81107ce4:	308b883a 	add	r5,r6,r2
81107ce8:	2a400117 	ldw	r9,4(r5)
81107cec:	22000217 	ldw	r8,8(r4)
81107cf0:	00ffff04 	movi	r3,-4
81107cf4:	48c6703a 	and	r3,r9,r3
81107cf8:	2a005726 	beq	r5,r8,81107e58 <_free_r+0x1ac>
81107cfc:	28c00115 	stw	r3,4(r5)
81107d00:	39c0004c 	andi	r7,r7,1
81107d04:	3800091e 	bne	r7,zero,81107d2c <_free_r+0x80>
81107d08:	823ffe17 	ldw	r8,-8(r16)
81107d0c:	22400204 	addi	r9,r4,8
81107d10:	320dc83a 	sub	r6,r6,r8
81107d14:	31c00217 	ldw	r7,8(r6)
81107d18:	1205883a 	add	r2,r2,r8
81107d1c:	3a406526 	beq	r7,r9,81107eb4 <_free_r+0x208>
81107d20:	32000317 	ldw	r8,12(r6)
81107d24:	3a000315 	stw	r8,12(r7)
81107d28:	41c00215 	stw	r7,8(r8)
81107d2c:	28cf883a 	add	r7,r5,r3
81107d30:	39c00117 	ldw	r7,4(r7)
81107d34:	39c0004c 	andi	r7,r7,1
81107d38:	38003a26 	beq	r7,zero,81107e24 <_free_r+0x178>
81107d3c:	10c00054 	ori	r3,r2,1
81107d40:	30c00115 	stw	r3,4(r6)
81107d44:	3087883a 	add	r3,r6,r2
81107d48:	18800015 	stw	r2,0(r3)
81107d4c:	00c07fc4 	movi	r3,511
81107d50:	18801936 	bltu	r3,r2,81107db8 <_free_r+0x10c>
81107d54:	1004d0fa 	srli	r2,r2,3
81107d58:	01c00044 	movi	r7,1
81107d5c:	21400117 	ldw	r5,4(r4)
81107d60:	10c00044 	addi	r3,r2,1
81107d64:	18c7883a 	add	r3,r3,r3
81107d68:	1005d0ba 	srai	r2,r2,2
81107d6c:	18c7883a 	add	r3,r3,r3
81107d70:	18c7883a 	add	r3,r3,r3
81107d74:	1907883a 	add	r3,r3,r4
81107d78:	3884983a 	sll	r2,r7,r2
81107d7c:	19c00017 	ldw	r7,0(r3)
81107d80:	1a3ffe04 	addi	r8,r3,-8
81107d84:	1144b03a 	or	r2,r2,r5
81107d88:	32000315 	stw	r8,12(r6)
81107d8c:	31c00215 	stw	r7,8(r6)
81107d90:	20800115 	stw	r2,4(r4)
81107d94:	19800015 	stw	r6,0(r3)
81107d98:	39800315 	stw	r6,12(r7)
81107d9c:	8809883a 	mov	r4,r17
81107da0:	dfc00217 	ldw	ra,8(sp)
81107da4:	dc400117 	ldw	r17,4(sp)
81107da8:	dc000017 	ldw	r16,0(sp)
81107dac:	dec00304 	addi	sp,sp,12
81107db0:	1116de41 	jmpi	81116de4 <__malloc_unlock>
81107db4:	f800283a 	ret
81107db8:	100ad27a 	srli	r5,r2,9
81107dbc:	00c00104 	movi	r3,4
81107dc0:	19404a36 	bltu	r3,r5,81107eec <_free_r+0x240>
81107dc4:	100ad1ba 	srli	r5,r2,6
81107dc8:	28c00e44 	addi	r3,r5,57
81107dcc:	18c7883a 	add	r3,r3,r3
81107dd0:	29400e04 	addi	r5,r5,56
81107dd4:	18c7883a 	add	r3,r3,r3
81107dd8:	18c7883a 	add	r3,r3,r3
81107ddc:	1909883a 	add	r4,r3,r4
81107de0:	20c00017 	ldw	r3,0(r4)
81107de4:	01e044b4 	movhi	r7,33042
81107de8:	213ffe04 	addi	r4,r4,-8
81107dec:	39d58604 	addi	r7,r7,22040
81107df0:	20c04426 	beq	r4,r3,81107f04 <_free_r+0x258>
81107df4:	01ffff04 	movi	r7,-4
81107df8:	19400117 	ldw	r5,4(r3)
81107dfc:	29ca703a 	and	r5,r5,r7
81107e00:	1140022e 	bgeu	r2,r5,81107e0c <_free_r+0x160>
81107e04:	18c00217 	ldw	r3,8(r3)
81107e08:	20fffb1e 	bne	r4,r3,81107df8 <__reset+0xfb0e7df8>
81107e0c:	19000317 	ldw	r4,12(r3)
81107e10:	31000315 	stw	r4,12(r6)
81107e14:	30c00215 	stw	r3,8(r6)
81107e18:	21800215 	stw	r6,8(r4)
81107e1c:	19800315 	stw	r6,12(r3)
81107e20:	003fde06 	br	81107d9c <__reset+0xfb0e7d9c>
81107e24:	29c00217 	ldw	r7,8(r5)
81107e28:	10c5883a 	add	r2,r2,r3
81107e2c:	00e044b4 	movhi	r3,33042
81107e30:	18d58804 	addi	r3,r3,22048
81107e34:	38c03b26 	beq	r7,r3,81107f24 <_free_r+0x278>
81107e38:	2a000317 	ldw	r8,12(r5)
81107e3c:	11400054 	ori	r5,r2,1
81107e40:	3087883a 	add	r3,r6,r2
81107e44:	3a000315 	stw	r8,12(r7)
81107e48:	41c00215 	stw	r7,8(r8)
81107e4c:	31400115 	stw	r5,4(r6)
81107e50:	18800015 	stw	r2,0(r3)
81107e54:	003fbd06 	br	81107d4c <__reset+0xfb0e7d4c>
81107e58:	39c0004c 	andi	r7,r7,1
81107e5c:	10c5883a 	add	r2,r2,r3
81107e60:	3800071e 	bne	r7,zero,81107e80 <_free_r+0x1d4>
81107e64:	81fffe17 	ldw	r7,-8(r16)
81107e68:	31cdc83a 	sub	r6,r6,r7
81107e6c:	30c00317 	ldw	r3,12(r6)
81107e70:	31400217 	ldw	r5,8(r6)
81107e74:	11c5883a 	add	r2,r2,r7
81107e78:	28c00315 	stw	r3,12(r5)
81107e7c:	19400215 	stw	r5,8(r3)
81107e80:	10c00054 	ori	r3,r2,1
81107e84:	30c00115 	stw	r3,4(r6)
81107e88:	00e044b4 	movhi	r3,33042
81107e8c:	18db9e04 	addi	r3,r3,28280
81107e90:	18c00017 	ldw	r3,0(r3)
81107e94:	21800215 	stw	r6,8(r4)
81107e98:	10ffc036 	bltu	r2,r3,81107d9c <__reset+0xfb0e7d9c>
81107e9c:	00a044b4 	movhi	r2,33042
81107ea0:	109bd404 	addi	r2,r2,28496
81107ea4:	11400017 	ldw	r5,0(r2)
81107ea8:	8809883a 	mov	r4,r17
81107eac:	1107b880 	call	81107b88 <_malloc_trim_r>
81107eb0:	003fba06 	br	81107d9c <__reset+0xfb0e7d9c>
81107eb4:	28c9883a 	add	r4,r5,r3
81107eb8:	21000117 	ldw	r4,4(r4)
81107ebc:	2100004c 	andi	r4,r4,1
81107ec0:	2000391e 	bne	r4,zero,81107fa8 <_free_r+0x2fc>
81107ec4:	29c00217 	ldw	r7,8(r5)
81107ec8:	29000317 	ldw	r4,12(r5)
81107ecc:	1885883a 	add	r2,r3,r2
81107ed0:	10c00054 	ori	r3,r2,1
81107ed4:	39000315 	stw	r4,12(r7)
81107ed8:	21c00215 	stw	r7,8(r4)
81107edc:	30c00115 	stw	r3,4(r6)
81107ee0:	308d883a 	add	r6,r6,r2
81107ee4:	30800015 	stw	r2,0(r6)
81107ee8:	003fac06 	br	81107d9c <__reset+0xfb0e7d9c>
81107eec:	00c00504 	movi	r3,20
81107ef0:	19401536 	bltu	r3,r5,81107f48 <_free_r+0x29c>
81107ef4:	28c01704 	addi	r3,r5,92
81107ef8:	18c7883a 	add	r3,r3,r3
81107efc:	294016c4 	addi	r5,r5,91
81107f00:	003fb406 	br	81107dd4 <__reset+0xfb0e7dd4>
81107f04:	280bd0ba 	srai	r5,r5,2
81107f08:	00c00044 	movi	r3,1
81107f0c:	38800117 	ldw	r2,4(r7)
81107f10:	194a983a 	sll	r5,r3,r5
81107f14:	2007883a 	mov	r3,r4
81107f18:	2884b03a 	or	r2,r5,r2
81107f1c:	38800115 	stw	r2,4(r7)
81107f20:	003fbb06 	br	81107e10 <__reset+0xfb0e7e10>
81107f24:	21800515 	stw	r6,20(r4)
81107f28:	21800415 	stw	r6,16(r4)
81107f2c:	10c00054 	ori	r3,r2,1
81107f30:	31c00315 	stw	r7,12(r6)
81107f34:	31c00215 	stw	r7,8(r6)
81107f38:	30c00115 	stw	r3,4(r6)
81107f3c:	308d883a 	add	r6,r6,r2
81107f40:	30800015 	stw	r2,0(r6)
81107f44:	003f9506 	br	81107d9c <__reset+0xfb0e7d9c>
81107f48:	00c01504 	movi	r3,84
81107f4c:	19400536 	bltu	r3,r5,81107f64 <_free_r+0x2b8>
81107f50:	100ad33a 	srli	r5,r2,12
81107f54:	28c01bc4 	addi	r3,r5,111
81107f58:	18c7883a 	add	r3,r3,r3
81107f5c:	29401b84 	addi	r5,r5,110
81107f60:	003f9c06 	br	81107dd4 <__reset+0xfb0e7dd4>
81107f64:	00c05504 	movi	r3,340
81107f68:	19400536 	bltu	r3,r5,81107f80 <_free_r+0x2d4>
81107f6c:	100ad3fa 	srli	r5,r2,15
81107f70:	28c01e04 	addi	r3,r5,120
81107f74:	18c7883a 	add	r3,r3,r3
81107f78:	29401dc4 	addi	r5,r5,119
81107f7c:	003f9506 	br	81107dd4 <__reset+0xfb0e7dd4>
81107f80:	00c15504 	movi	r3,1364
81107f84:	19400536 	bltu	r3,r5,81107f9c <_free_r+0x2f0>
81107f88:	100ad4ba 	srli	r5,r2,18
81107f8c:	28c01f44 	addi	r3,r5,125
81107f90:	18c7883a 	add	r3,r3,r3
81107f94:	29401f04 	addi	r5,r5,124
81107f98:	003f8e06 	br	81107dd4 <__reset+0xfb0e7dd4>
81107f9c:	00c03f84 	movi	r3,254
81107fa0:	01401f84 	movi	r5,126
81107fa4:	003f8b06 	br	81107dd4 <__reset+0xfb0e7dd4>
81107fa8:	10c00054 	ori	r3,r2,1
81107fac:	30c00115 	stw	r3,4(r6)
81107fb0:	308d883a 	add	r6,r6,r2
81107fb4:	30800015 	stw	r2,0(r6)
81107fb8:	003f7806 	br	81107d9c <__reset+0xfb0e7d9c>

81107fbc <__sfvwrite_r>:
81107fbc:	30800217 	ldw	r2,8(r6)
81107fc0:	10006726 	beq	r2,zero,81108160 <__sfvwrite_r+0x1a4>
81107fc4:	28c0030b 	ldhu	r3,12(r5)
81107fc8:	defff404 	addi	sp,sp,-48
81107fcc:	dd400715 	stw	r21,28(sp)
81107fd0:	dd000615 	stw	r20,24(sp)
81107fd4:	dc000215 	stw	r16,8(sp)
81107fd8:	dfc00b15 	stw	ra,44(sp)
81107fdc:	df000a15 	stw	fp,40(sp)
81107fe0:	ddc00915 	stw	r23,36(sp)
81107fe4:	dd800815 	stw	r22,32(sp)
81107fe8:	dcc00515 	stw	r19,20(sp)
81107fec:	dc800415 	stw	r18,16(sp)
81107ff0:	dc400315 	stw	r17,12(sp)
81107ff4:	1880020c 	andi	r2,r3,8
81107ff8:	2821883a 	mov	r16,r5
81107ffc:	202b883a 	mov	r21,r4
81108000:	3029883a 	mov	r20,r6
81108004:	10002726 	beq	r2,zero,811080a4 <__sfvwrite_r+0xe8>
81108008:	28800417 	ldw	r2,16(r5)
8110800c:	10002526 	beq	r2,zero,811080a4 <__sfvwrite_r+0xe8>
81108010:	1880008c 	andi	r2,r3,2
81108014:	a4400017 	ldw	r17,0(r20)
81108018:	10002a26 	beq	r2,zero,811080c4 <__sfvwrite_r+0x108>
8110801c:	05a00034 	movhi	r22,32768
81108020:	0027883a 	mov	r19,zero
81108024:	0025883a 	mov	r18,zero
81108028:	b5bf0004 	addi	r22,r22,-1024
8110802c:	980d883a 	mov	r6,r19
81108030:	a809883a 	mov	r4,r21
81108034:	90004626 	beq	r18,zero,81108150 <__sfvwrite_r+0x194>
81108038:	900f883a 	mov	r7,r18
8110803c:	b480022e 	bgeu	r22,r18,81108048 <__sfvwrite_r+0x8c>
81108040:	01e00034 	movhi	r7,32768
81108044:	39ff0004 	addi	r7,r7,-1024
81108048:	80800917 	ldw	r2,36(r16)
8110804c:	81400717 	ldw	r5,28(r16)
81108050:	103ee83a 	callr	r2
81108054:	0080570e 	bge	zero,r2,811081b4 <__sfvwrite_r+0x1f8>
81108058:	a0c00217 	ldw	r3,8(r20)
8110805c:	98a7883a 	add	r19,r19,r2
81108060:	90a5c83a 	sub	r18,r18,r2
81108064:	1885c83a 	sub	r2,r3,r2
81108068:	a0800215 	stw	r2,8(r20)
8110806c:	103fef1e 	bne	r2,zero,8110802c <__reset+0xfb0e802c>
81108070:	0005883a 	mov	r2,zero
81108074:	dfc00b17 	ldw	ra,44(sp)
81108078:	df000a17 	ldw	fp,40(sp)
8110807c:	ddc00917 	ldw	r23,36(sp)
81108080:	dd800817 	ldw	r22,32(sp)
81108084:	dd400717 	ldw	r21,28(sp)
81108088:	dd000617 	ldw	r20,24(sp)
8110808c:	dcc00517 	ldw	r19,20(sp)
81108090:	dc800417 	ldw	r18,16(sp)
81108094:	dc400317 	ldw	r17,12(sp)
81108098:	dc000217 	ldw	r16,8(sp)
8110809c:	dec00c04 	addi	sp,sp,48
811080a0:	f800283a 	ret
811080a4:	800b883a 	mov	r5,r16
811080a8:	a809883a 	mov	r4,r21
811080ac:	11058040 	call	81105804 <__swsetup_r>
811080b0:	1000eb1e 	bne	r2,zero,81108460 <__sfvwrite_r+0x4a4>
811080b4:	80c0030b 	ldhu	r3,12(r16)
811080b8:	a4400017 	ldw	r17,0(r20)
811080bc:	1880008c 	andi	r2,r3,2
811080c0:	103fd61e 	bne	r2,zero,8110801c <__reset+0xfb0e801c>
811080c4:	1880004c 	andi	r2,r3,1
811080c8:	10003f1e 	bne	r2,zero,811081c8 <__sfvwrite_r+0x20c>
811080cc:	0039883a 	mov	fp,zero
811080d0:	0025883a 	mov	r18,zero
811080d4:	90001a26 	beq	r18,zero,81108140 <__sfvwrite_r+0x184>
811080d8:	1880800c 	andi	r2,r3,512
811080dc:	84c00217 	ldw	r19,8(r16)
811080e0:	10002126 	beq	r2,zero,81108168 <__sfvwrite_r+0x1ac>
811080e4:	982f883a 	mov	r23,r19
811080e8:	94c09336 	bltu	r18,r19,81108338 <__sfvwrite_r+0x37c>
811080ec:	1881200c 	andi	r2,r3,1152
811080f0:	10009e1e 	bne	r2,zero,8110836c <__sfvwrite_r+0x3b0>
811080f4:	81000017 	ldw	r4,0(r16)
811080f8:	b80d883a 	mov	r6,r23
811080fc:	e00b883a 	mov	r5,fp
81108100:	1108c100 	call	81108c10 <memmove>
81108104:	80c00217 	ldw	r3,8(r16)
81108108:	81000017 	ldw	r4,0(r16)
8110810c:	9005883a 	mov	r2,r18
81108110:	1ce7c83a 	sub	r19,r3,r19
81108114:	25cf883a 	add	r7,r4,r23
81108118:	84c00215 	stw	r19,8(r16)
8110811c:	81c00015 	stw	r7,0(r16)
81108120:	a0c00217 	ldw	r3,8(r20)
81108124:	e0b9883a 	add	fp,fp,r2
81108128:	90a5c83a 	sub	r18,r18,r2
8110812c:	18a7c83a 	sub	r19,r3,r2
81108130:	a4c00215 	stw	r19,8(r20)
81108134:	983fce26 	beq	r19,zero,81108070 <__reset+0xfb0e8070>
81108138:	80c0030b 	ldhu	r3,12(r16)
8110813c:	903fe61e 	bne	r18,zero,811080d8 <__reset+0xfb0e80d8>
81108140:	8f000017 	ldw	fp,0(r17)
81108144:	8c800117 	ldw	r18,4(r17)
81108148:	8c400204 	addi	r17,r17,8
8110814c:	003fe106 	br	811080d4 <__reset+0xfb0e80d4>
81108150:	8cc00017 	ldw	r19,0(r17)
81108154:	8c800117 	ldw	r18,4(r17)
81108158:	8c400204 	addi	r17,r17,8
8110815c:	003fb306 	br	8110802c <__reset+0xfb0e802c>
81108160:	0005883a 	mov	r2,zero
81108164:	f800283a 	ret
81108168:	81000017 	ldw	r4,0(r16)
8110816c:	80800417 	ldw	r2,16(r16)
81108170:	11005736 	bltu	r2,r4,811082d0 <__sfvwrite_r+0x314>
81108174:	85c00517 	ldw	r23,20(r16)
81108178:	95c05536 	bltu	r18,r23,811082d0 <__sfvwrite_r+0x314>
8110817c:	00a00034 	movhi	r2,32768
81108180:	10bfffc4 	addi	r2,r2,-1
81108184:	9009883a 	mov	r4,r18
81108188:	1480012e 	bgeu	r2,r18,81108190 <__sfvwrite_r+0x1d4>
8110818c:	1009883a 	mov	r4,r2
81108190:	b80b883a 	mov	r5,r23
81108194:	111353c0 	call	8111353c <__divsi3>
81108198:	15cf383a 	mul	r7,r2,r23
8110819c:	81400717 	ldw	r5,28(r16)
811081a0:	80800917 	ldw	r2,36(r16)
811081a4:	e00d883a 	mov	r6,fp
811081a8:	a809883a 	mov	r4,r21
811081ac:	103ee83a 	callr	r2
811081b0:	00bfdb16 	blt	zero,r2,81108120 <__reset+0xfb0e8120>
811081b4:	8080030b 	ldhu	r2,12(r16)
811081b8:	10801014 	ori	r2,r2,64
811081bc:	8080030d 	sth	r2,12(r16)
811081c0:	00bfffc4 	movi	r2,-1
811081c4:	003fab06 	br	81108074 <__reset+0xfb0e8074>
811081c8:	0027883a 	mov	r19,zero
811081cc:	0011883a 	mov	r8,zero
811081d0:	0039883a 	mov	fp,zero
811081d4:	0025883a 	mov	r18,zero
811081d8:	90001f26 	beq	r18,zero,81108258 <__sfvwrite_r+0x29c>
811081dc:	40005a26 	beq	r8,zero,81108348 <__sfvwrite_r+0x38c>
811081e0:	982d883a 	mov	r22,r19
811081e4:	94c0012e 	bgeu	r18,r19,811081ec <__sfvwrite_r+0x230>
811081e8:	902d883a 	mov	r22,r18
811081ec:	81000017 	ldw	r4,0(r16)
811081f0:	80800417 	ldw	r2,16(r16)
811081f4:	b02f883a 	mov	r23,r22
811081f8:	81c00517 	ldw	r7,20(r16)
811081fc:	1100032e 	bgeu	r2,r4,8110820c <__sfvwrite_r+0x250>
81108200:	80c00217 	ldw	r3,8(r16)
81108204:	38c7883a 	add	r3,r7,r3
81108208:	1d801816 	blt	r3,r22,8110826c <__sfvwrite_r+0x2b0>
8110820c:	b1c03e16 	blt	r22,r7,81108308 <__sfvwrite_r+0x34c>
81108210:	80800917 	ldw	r2,36(r16)
81108214:	81400717 	ldw	r5,28(r16)
81108218:	e00d883a 	mov	r6,fp
8110821c:	da000115 	stw	r8,4(sp)
81108220:	a809883a 	mov	r4,r21
81108224:	103ee83a 	callr	r2
81108228:	102f883a 	mov	r23,r2
8110822c:	da000117 	ldw	r8,4(sp)
81108230:	00bfe00e 	bge	zero,r2,811081b4 <__reset+0xfb0e81b4>
81108234:	9de7c83a 	sub	r19,r19,r23
81108238:	98001f26 	beq	r19,zero,811082b8 <__sfvwrite_r+0x2fc>
8110823c:	a0800217 	ldw	r2,8(r20)
81108240:	e5f9883a 	add	fp,fp,r23
81108244:	95e5c83a 	sub	r18,r18,r23
81108248:	15efc83a 	sub	r23,r2,r23
8110824c:	a5c00215 	stw	r23,8(r20)
81108250:	b83f8726 	beq	r23,zero,81108070 <__reset+0xfb0e8070>
81108254:	903fe11e 	bne	r18,zero,811081dc <__reset+0xfb0e81dc>
81108258:	8f000017 	ldw	fp,0(r17)
8110825c:	8c800117 	ldw	r18,4(r17)
81108260:	0011883a 	mov	r8,zero
81108264:	8c400204 	addi	r17,r17,8
81108268:	003fdb06 	br	811081d8 <__reset+0xfb0e81d8>
8110826c:	180d883a 	mov	r6,r3
81108270:	e00b883a 	mov	r5,fp
81108274:	da000115 	stw	r8,4(sp)
81108278:	d8c00015 	stw	r3,0(sp)
8110827c:	1108c100 	call	81108c10 <memmove>
81108280:	d8c00017 	ldw	r3,0(sp)
81108284:	80800017 	ldw	r2,0(r16)
81108288:	800b883a 	mov	r5,r16
8110828c:	a809883a 	mov	r4,r21
81108290:	10c5883a 	add	r2,r2,r3
81108294:	80800015 	stw	r2,0(r16)
81108298:	d8c00015 	stw	r3,0(sp)
8110829c:	11074500 	call	81107450 <_fflush_r>
811082a0:	d8c00017 	ldw	r3,0(sp)
811082a4:	da000117 	ldw	r8,4(sp)
811082a8:	103fc21e 	bne	r2,zero,811081b4 <__reset+0xfb0e81b4>
811082ac:	182f883a 	mov	r23,r3
811082b0:	9de7c83a 	sub	r19,r19,r23
811082b4:	983fe11e 	bne	r19,zero,8110823c <__reset+0xfb0e823c>
811082b8:	800b883a 	mov	r5,r16
811082bc:	a809883a 	mov	r4,r21
811082c0:	11074500 	call	81107450 <_fflush_r>
811082c4:	103fbb1e 	bne	r2,zero,811081b4 <__reset+0xfb0e81b4>
811082c8:	0011883a 	mov	r8,zero
811082cc:	003fdb06 	br	8110823c <__reset+0xfb0e823c>
811082d0:	94c0012e 	bgeu	r18,r19,811082d8 <__sfvwrite_r+0x31c>
811082d4:	9027883a 	mov	r19,r18
811082d8:	980d883a 	mov	r6,r19
811082dc:	e00b883a 	mov	r5,fp
811082e0:	1108c100 	call	81108c10 <memmove>
811082e4:	80800217 	ldw	r2,8(r16)
811082e8:	80c00017 	ldw	r3,0(r16)
811082ec:	14c5c83a 	sub	r2,r2,r19
811082f0:	1cc7883a 	add	r3,r3,r19
811082f4:	80800215 	stw	r2,8(r16)
811082f8:	80c00015 	stw	r3,0(r16)
811082fc:	10004326 	beq	r2,zero,8110840c <__sfvwrite_r+0x450>
81108300:	9805883a 	mov	r2,r19
81108304:	003f8606 	br	81108120 <__reset+0xfb0e8120>
81108308:	b00d883a 	mov	r6,r22
8110830c:	e00b883a 	mov	r5,fp
81108310:	da000115 	stw	r8,4(sp)
81108314:	1108c100 	call	81108c10 <memmove>
81108318:	80800217 	ldw	r2,8(r16)
8110831c:	80c00017 	ldw	r3,0(r16)
81108320:	da000117 	ldw	r8,4(sp)
81108324:	1585c83a 	sub	r2,r2,r22
81108328:	1dad883a 	add	r22,r3,r22
8110832c:	80800215 	stw	r2,8(r16)
81108330:	85800015 	stw	r22,0(r16)
81108334:	003fbf06 	br	81108234 <__reset+0xfb0e8234>
81108338:	81000017 	ldw	r4,0(r16)
8110833c:	9027883a 	mov	r19,r18
81108340:	902f883a 	mov	r23,r18
81108344:	003f6c06 	br	811080f8 <__reset+0xfb0e80f8>
81108348:	900d883a 	mov	r6,r18
8110834c:	01400284 	movi	r5,10
81108350:	e009883a 	mov	r4,fp
81108354:	11089e40 	call	811089e4 <memchr>
81108358:	10003e26 	beq	r2,zero,81108454 <__sfvwrite_r+0x498>
8110835c:	10800044 	addi	r2,r2,1
81108360:	1727c83a 	sub	r19,r2,fp
81108364:	02000044 	movi	r8,1
81108368:	003f9d06 	br	811081e0 <__reset+0xfb0e81e0>
8110836c:	80800517 	ldw	r2,20(r16)
81108370:	81400417 	ldw	r5,16(r16)
81108374:	81c00017 	ldw	r7,0(r16)
81108378:	10a7883a 	add	r19,r2,r2
8110837c:	9885883a 	add	r2,r19,r2
81108380:	1026d7fa 	srli	r19,r2,31
81108384:	396dc83a 	sub	r22,r7,r5
81108388:	b1000044 	addi	r4,r22,1
8110838c:	9885883a 	add	r2,r19,r2
81108390:	1027d07a 	srai	r19,r2,1
81108394:	2485883a 	add	r2,r4,r18
81108398:	980d883a 	mov	r6,r19
8110839c:	9880022e 	bgeu	r19,r2,811083a8 <__sfvwrite_r+0x3ec>
811083a0:	1027883a 	mov	r19,r2
811083a4:	100d883a 	mov	r6,r2
811083a8:	18c1000c 	andi	r3,r3,1024
811083ac:	18001c26 	beq	r3,zero,81108420 <__sfvwrite_r+0x464>
811083b0:	300b883a 	mov	r5,r6
811083b4:	a809883a 	mov	r4,r21
811083b8:	1100cf00 	call	81100cf0 <_malloc_r>
811083bc:	102f883a 	mov	r23,r2
811083c0:	10002926 	beq	r2,zero,81108468 <__sfvwrite_r+0x4ac>
811083c4:	81400417 	ldw	r5,16(r16)
811083c8:	b00d883a 	mov	r6,r22
811083cc:	1009883a 	mov	r4,r2
811083d0:	1108ac80 	call	81108ac8 <memcpy>
811083d4:	8080030b 	ldhu	r2,12(r16)
811083d8:	00fedfc4 	movi	r3,-1153
811083dc:	10c4703a 	and	r2,r2,r3
811083e0:	10802014 	ori	r2,r2,128
811083e4:	8080030d 	sth	r2,12(r16)
811083e8:	bd89883a 	add	r4,r23,r22
811083ec:	9d8fc83a 	sub	r7,r19,r22
811083f0:	85c00415 	stw	r23,16(r16)
811083f4:	84c00515 	stw	r19,20(r16)
811083f8:	81000015 	stw	r4,0(r16)
811083fc:	9027883a 	mov	r19,r18
81108400:	81c00215 	stw	r7,8(r16)
81108404:	902f883a 	mov	r23,r18
81108408:	003f3b06 	br	811080f8 <__reset+0xfb0e80f8>
8110840c:	800b883a 	mov	r5,r16
81108410:	a809883a 	mov	r4,r21
81108414:	11074500 	call	81107450 <_fflush_r>
81108418:	103fb926 	beq	r2,zero,81108300 <__reset+0xfb0e8300>
8110841c:	003f6506 	br	811081b4 <__reset+0xfb0e81b4>
81108420:	a809883a 	mov	r4,r21
81108424:	1109dc80 	call	81109dc8 <_realloc_r>
81108428:	102f883a 	mov	r23,r2
8110842c:	103fee1e 	bne	r2,zero,811083e8 <__reset+0xfb0e83e8>
81108430:	81400417 	ldw	r5,16(r16)
81108434:	a809883a 	mov	r4,r21
81108438:	1107cac0 	call	81107cac <_free_r>
8110843c:	8080030b 	ldhu	r2,12(r16)
81108440:	00ffdfc4 	movi	r3,-129
81108444:	1884703a 	and	r2,r3,r2
81108448:	00c00304 	movi	r3,12
8110844c:	a8c00015 	stw	r3,0(r21)
81108450:	003f5906 	br	811081b8 <__reset+0xfb0e81b8>
81108454:	94c00044 	addi	r19,r18,1
81108458:	02000044 	movi	r8,1
8110845c:	003f6006 	br	811081e0 <__reset+0xfb0e81e0>
81108460:	00bfffc4 	movi	r2,-1
81108464:	003f0306 	br	81108074 <__reset+0xfb0e8074>
81108468:	00800304 	movi	r2,12
8110846c:	a8800015 	stw	r2,0(r21)
81108470:	8080030b 	ldhu	r2,12(r16)
81108474:	003f5006 	br	811081b8 <__reset+0xfb0e81b8>

81108478 <_fwalk>:
81108478:	defff704 	addi	sp,sp,-36
8110847c:	dd000415 	stw	r20,16(sp)
81108480:	dfc00815 	stw	ra,32(sp)
81108484:	ddc00715 	stw	r23,28(sp)
81108488:	dd800615 	stw	r22,24(sp)
8110848c:	dd400515 	stw	r21,20(sp)
81108490:	dcc00315 	stw	r19,12(sp)
81108494:	dc800215 	stw	r18,8(sp)
81108498:	dc400115 	stw	r17,4(sp)
8110849c:	dc000015 	stw	r16,0(sp)
811084a0:	2500b804 	addi	r20,r4,736
811084a4:	a0002326 	beq	r20,zero,81108534 <_fwalk+0xbc>
811084a8:	282b883a 	mov	r21,r5
811084ac:	002f883a 	mov	r23,zero
811084b0:	05800044 	movi	r22,1
811084b4:	04ffffc4 	movi	r19,-1
811084b8:	a4400117 	ldw	r17,4(r20)
811084bc:	a4800217 	ldw	r18,8(r20)
811084c0:	8c7fffc4 	addi	r17,r17,-1
811084c4:	88000d16 	blt	r17,zero,811084fc <_fwalk+0x84>
811084c8:	94000304 	addi	r16,r18,12
811084cc:	94800384 	addi	r18,r18,14
811084d0:	8080000b 	ldhu	r2,0(r16)
811084d4:	8c7fffc4 	addi	r17,r17,-1
811084d8:	813ffd04 	addi	r4,r16,-12
811084dc:	b080042e 	bgeu	r22,r2,811084f0 <_fwalk+0x78>
811084e0:	9080000f 	ldh	r2,0(r18)
811084e4:	14c00226 	beq	r2,r19,811084f0 <_fwalk+0x78>
811084e8:	a83ee83a 	callr	r21
811084ec:	b8aeb03a 	or	r23,r23,r2
811084f0:	84001a04 	addi	r16,r16,104
811084f4:	94801a04 	addi	r18,r18,104
811084f8:	8cfff51e 	bne	r17,r19,811084d0 <__reset+0xfb0e84d0>
811084fc:	a5000017 	ldw	r20,0(r20)
81108500:	a03fed1e 	bne	r20,zero,811084b8 <__reset+0xfb0e84b8>
81108504:	b805883a 	mov	r2,r23
81108508:	dfc00817 	ldw	ra,32(sp)
8110850c:	ddc00717 	ldw	r23,28(sp)
81108510:	dd800617 	ldw	r22,24(sp)
81108514:	dd400517 	ldw	r21,20(sp)
81108518:	dd000417 	ldw	r20,16(sp)
8110851c:	dcc00317 	ldw	r19,12(sp)
81108520:	dc800217 	ldw	r18,8(sp)
81108524:	dc400117 	ldw	r17,4(sp)
81108528:	dc000017 	ldw	r16,0(sp)
8110852c:	dec00904 	addi	sp,sp,36
81108530:	f800283a 	ret
81108534:	002f883a 	mov	r23,zero
81108538:	003ff206 	br	81108504 <__reset+0xfb0e8504>

8110853c <_fwalk_reent>:
8110853c:	defff704 	addi	sp,sp,-36
81108540:	dd000415 	stw	r20,16(sp)
81108544:	dfc00815 	stw	ra,32(sp)
81108548:	ddc00715 	stw	r23,28(sp)
8110854c:	dd800615 	stw	r22,24(sp)
81108550:	dd400515 	stw	r21,20(sp)
81108554:	dcc00315 	stw	r19,12(sp)
81108558:	dc800215 	stw	r18,8(sp)
8110855c:	dc400115 	stw	r17,4(sp)
81108560:	dc000015 	stw	r16,0(sp)
81108564:	2500b804 	addi	r20,r4,736
81108568:	a0002326 	beq	r20,zero,811085f8 <_fwalk_reent+0xbc>
8110856c:	282b883a 	mov	r21,r5
81108570:	2027883a 	mov	r19,r4
81108574:	002f883a 	mov	r23,zero
81108578:	05800044 	movi	r22,1
8110857c:	04bfffc4 	movi	r18,-1
81108580:	a4400117 	ldw	r17,4(r20)
81108584:	a4000217 	ldw	r16,8(r20)
81108588:	8c7fffc4 	addi	r17,r17,-1
8110858c:	88000c16 	blt	r17,zero,811085c0 <_fwalk_reent+0x84>
81108590:	84000304 	addi	r16,r16,12
81108594:	8080000b 	ldhu	r2,0(r16)
81108598:	8c7fffc4 	addi	r17,r17,-1
8110859c:	817ffd04 	addi	r5,r16,-12
811085a0:	b080052e 	bgeu	r22,r2,811085b8 <_fwalk_reent+0x7c>
811085a4:	8080008f 	ldh	r2,2(r16)
811085a8:	9809883a 	mov	r4,r19
811085ac:	14800226 	beq	r2,r18,811085b8 <_fwalk_reent+0x7c>
811085b0:	a83ee83a 	callr	r21
811085b4:	b8aeb03a 	or	r23,r23,r2
811085b8:	84001a04 	addi	r16,r16,104
811085bc:	8cbff51e 	bne	r17,r18,81108594 <__reset+0xfb0e8594>
811085c0:	a5000017 	ldw	r20,0(r20)
811085c4:	a03fee1e 	bne	r20,zero,81108580 <__reset+0xfb0e8580>
811085c8:	b805883a 	mov	r2,r23
811085cc:	dfc00817 	ldw	ra,32(sp)
811085d0:	ddc00717 	ldw	r23,28(sp)
811085d4:	dd800617 	ldw	r22,24(sp)
811085d8:	dd400517 	ldw	r21,20(sp)
811085dc:	dd000417 	ldw	r20,16(sp)
811085e0:	dcc00317 	ldw	r19,12(sp)
811085e4:	dc800217 	ldw	r18,8(sp)
811085e8:	dc400117 	ldw	r17,4(sp)
811085ec:	dc000017 	ldw	r16,0(sp)
811085f0:	dec00904 	addi	sp,sp,36
811085f4:	f800283a 	ret
811085f8:	002f883a 	mov	r23,zero
811085fc:	003ff206 	br	811085c8 <__reset+0xfb0e85c8>

81108600 <_isatty_r>:
81108600:	defffd04 	addi	sp,sp,-12
81108604:	dc000015 	stw	r16,0(sp)
81108608:	042044b4 	movhi	r16,33042
8110860c:	dc400115 	stw	r17,4(sp)
81108610:	841bd104 	addi	r16,r16,28484
81108614:	2023883a 	mov	r17,r4
81108618:	2809883a 	mov	r4,r5
8110861c:	dfc00215 	stw	ra,8(sp)
81108620:	80000015 	stw	zero,0(r16)
81108624:	111635c0 	call	8111635c <isatty>
81108628:	00ffffc4 	movi	r3,-1
8110862c:	10c00526 	beq	r2,r3,81108644 <_isatty_r+0x44>
81108630:	dfc00217 	ldw	ra,8(sp)
81108634:	dc400117 	ldw	r17,4(sp)
81108638:	dc000017 	ldw	r16,0(sp)
8110863c:	dec00304 	addi	sp,sp,12
81108640:	f800283a 	ret
81108644:	80c00017 	ldw	r3,0(r16)
81108648:	183ff926 	beq	r3,zero,81108630 <__reset+0xfb0e8630>
8110864c:	88c00015 	stw	r3,0(r17)
81108650:	003ff706 	br	81108630 <__reset+0xfb0e8630>

81108654 <iswspace>:
81108654:	00803fc4 	movi	r2,255
81108658:	11000836 	bltu	r2,r4,8110867c <iswspace+0x28>
8110865c:	00a044b4 	movhi	r2,33042
81108660:	109b9f04 	addi	r2,r2,28284
81108664:	10800017 	ldw	r2,0(r2)
81108668:	1109883a 	add	r4,r2,r4
8110866c:	20800043 	ldbu	r2,1(r4)
81108670:	1080020c 	andi	r2,r2,8
81108674:	10803fcc 	andi	r2,r2,255
81108678:	f800283a 	ret
8110867c:	0005883a 	mov	r2,zero
81108680:	f800283a 	ret

81108684 <_setlocale_r>:
81108684:	30001b26 	beq	r6,zero,811086f4 <_setlocale_r+0x70>
81108688:	016044b4 	movhi	r5,33042
8110868c:	defffe04 	addi	sp,sp,-8
81108690:	29528a04 	addi	r5,r5,18984
81108694:	3009883a 	mov	r4,r6
81108698:	dc000015 	stw	r16,0(sp)
8110869c:	dfc00115 	stw	ra,4(sp)
811086a0:	3021883a 	mov	r16,r6
811086a4:	110a53c0 	call	8110a53c <strcmp>
811086a8:	1000061e 	bne	r2,zero,811086c4 <_setlocale_r+0x40>
811086ac:	00a044b4 	movhi	r2,33042
811086b0:	1091c004 	addi	r2,r2,18176
811086b4:	dfc00117 	ldw	ra,4(sp)
811086b8:	dc000017 	ldw	r16,0(sp)
811086bc:	dec00204 	addi	sp,sp,8
811086c0:	f800283a 	ret
811086c4:	016044b4 	movhi	r5,33042
811086c8:	2951c004 	addi	r5,r5,18176
811086cc:	8009883a 	mov	r4,r16
811086d0:	110a53c0 	call	8110a53c <strcmp>
811086d4:	103ff526 	beq	r2,zero,811086ac <__reset+0xfb0e86ac>
811086d8:	016044b4 	movhi	r5,33042
811086dc:	2951ca04 	addi	r5,r5,18216
811086e0:	8009883a 	mov	r4,r16
811086e4:	110a53c0 	call	8110a53c <strcmp>
811086e8:	103ff026 	beq	r2,zero,811086ac <__reset+0xfb0e86ac>
811086ec:	0005883a 	mov	r2,zero
811086f0:	003ff006 	br	811086b4 <__reset+0xfb0e86b4>
811086f4:	00a044b4 	movhi	r2,33042
811086f8:	1091c004 	addi	r2,r2,18176
811086fc:	f800283a 	ret

81108700 <__locale_charset>:
81108700:	00a044b4 	movhi	r2,33042
81108704:	10969004 	addi	r2,r2,23104
81108708:	f800283a 	ret

8110870c <__locale_mb_cur_max>:
8110870c:	00a044b4 	movhi	r2,33042
81108710:	109ba004 	addi	r2,r2,28288
81108714:	10800017 	ldw	r2,0(r2)
81108718:	f800283a 	ret

8110871c <__locale_msgcharset>:
8110871c:	00a044b4 	movhi	r2,33042
81108720:	10968804 	addi	r2,r2,23072
81108724:	f800283a 	ret

81108728 <__locale_cjk_lang>:
81108728:	0005883a 	mov	r2,zero
8110872c:	f800283a 	ret

81108730 <_localeconv_r>:
81108730:	00a044b4 	movhi	r2,33042
81108734:	10969804 	addi	r2,r2,23136
81108738:	f800283a 	ret

8110873c <setlocale>:
8110873c:	00a044b4 	movhi	r2,33042
81108740:	109b9c04 	addi	r2,r2,28272
81108744:	280d883a 	mov	r6,r5
81108748:	200b883a 	mov	r5,r4
8110874c:	11000017 	ldw	r4,0(r2)
81108750:	11086841 	jmpi	81108684 <_setlocale_r>

81108754 <localeconv>:
81108754:	00a044b4 	movhi	r2,33042
81108758:	10969804 	addi	r2,r2,23136
8110875c:	f800283a 	ret

81108760 <_lseek_r>:
81108760:	defffd04 	addi	sp,sp,-12
81108764:	2805883a 	mov	r2,r5
81108768:	dc000015 	stw	r16,0(sp)
8110876c:	042044b4 	movhi	r16,33042
81108770:	dc400115 	stw	r17,4(sp)
81108774:	300b883a 	mov	r5,r6
81108778:	841bd104 	addi	r16,r16,28484
8110877c:	2023883a 	mov	r17,r4
81108780:	380d883a 	mov	r6,r7
81108784:	1009883a 	mov	r4,r2
81108788:	dfc00215 	stw	ra,8(sp)
8110878c:	80000015 	stw	zero,0(r16)
81108790:	111643c0 	call	8111643c <lseek>
81108794:	00ffffc4 	movi	r3,-1
81108798:	10c00526 	beq	r2,r3,811087b0 <_lseek_r+0x50>
8110879c:	dfc00217 	ldw	ra,8(sp)
811087a0:	dc400117 	ldw	r17,4(sp)
811087a4:	dc000017 	ldw	r16,0(sp)
811087a8:	dec00304 	addi	sp,sp,12
811087ac:	f800283a 	ret
811087b0:	80c00017 	ldw	r3,0(r16)
811087b4:	183ff926 	beq	r3,zero,8110879c <__reset+0xfb0e879c>
811087b8:	88c00015 	stw	r3,0(r17)
811087bc:	003ff706 	br	8110879c <__reset+0xfb0e879c>

811087c0 <_mbrtowc_r>:
811087c0:	defff704 	addi	sp,sp,-36
811087c4:	00a044b4 	movhi	r2,33042
811087c8:	dc800715 	stw	r18,28(sp)
811087cc:	dc400615 	stw	r17,24(sp)
811087d0:	dc000515 	stw	r16,20(sp)
811087d4:	109ba104 	addi	r2,r2,28292
811087d8:	dfc00815 	stw	ra,32(sp)
811087dc:	2021883a 	mov	r16,r4
811087e0:	dc400917 	ldw	r17,36(sp)
811087e4:	14800017 	ldw	r18,0(r2)
811087e8:	30001626 	beq	r6,zero,81108844 <_mbrtowc_r+0x84>
811087ec:	d9400215 	stw	r5,8(sp)
811087f0:	d9800315 	stw	r6,12(sp)
811087f4:	d9c00415 	stw	r7,16(sp)
811087f8:	11087000 	call	81108700 <__locale_charset>
811087fc:	d9c00417 	ldw	r7,16(sp)
81108800:	d9800317 	ldw	r6,12(sp)
81108804:	d9400217 	ldw	r5,8(sp)
81108808:	d8800015 	stw	r2,0(sp)
8110880c:	dc400115 	stw	r17,4(sp)
81108810:	8009883a 	mov	r4,r16
81108814:	903ee83a 	callr	r18
81108818:	00ffffc4 	movi	r3,-1
8110881c:	10c0031e 	bne	r2,r3,8110882c <_mbrtowc_r+0x6c>
81108820:	88000015 	stw	zero,0(r17)
81108824:	00c02284 	movi	r3,138
81108828:	80c00015 	stw	r3,0(r16)
8110882c:	dfc00817 	ldw	ra,32(sp)
81108830:	dc800717 	ldw	r18,28(sp)
81108834:	dc400617 	ldw	r17,24(sp)
81108838:	dc000517 	ldw	r16,20(sp)
8110883c:	dec00904 	addi	sp,sp,36
81108840:	f800283a 	ret
81108844:	11087000 	call	81108700 <__locale_charset>
81108848:	01a044b4 	movhi	r6,33042
8110884c:	3191ca04 	addi	r6,r6,18216
81108850:	dc400115 	stw	r17,4(sp)
81108854:	d8800015 	stw	r2,0(sp)
81108858:	01c00044 	movi	r7,1
8110885c:	000b883a 	mov	r5,zero
81108860:	8009883a 	mov	r4,r16
81108864:	903ee83a 	callr	r18
81108868:	003feb06 	br	81108818 <__reset+0xfb0e8818>

8110886c <mbrtowc>:
8110886c:	defff704 	addi	sp,sp,-36
81108870:	00a044b4 	movhi	r2,33042
81108874:	dc800415 	stw	r18,16(sp)
81108878:	dc400315 	stw	r17,12(sp)
8110887c:	109b9c04 	addi	r2,r2,28272
81108880:	dfc00815 	stw	ra,32(sp)
81108884:	dd400715 	stw	r21,28(sp)
81108888:	dd000615 	stw	r20,24(sp)
8110888c:	dcc00515 	stw	r19,20(sp)
81108890:	dc000215 	stw	r16,8(sp)
81108894:	3825883a 	mov	r18,r7
81108898:	14400017 	ldw	r17,0(r2)
8110889c:	28001c26 	beq	r5,zero,81108910 <mbrtowc+0xa4>
811088a0:	00a044b4 	movhi	r2,33042
811088a4:	109ba104 	addi	r2,r2,28292
811088a8:	15400017 	ldw	r21,0(r2)
811088ac:	2821883a 	mov	r16,r5
811088b0:	2027883a 	mov	r19,r4
811088b4:	3029883a 	mov	r20,r6
811088b8:	11087000 	call	81108700 <__locale_charset>
811088bc:	d8800015 	stw	r2,0(sp)
811088c0:	dc800115 	stw	r18,4(sp)
811088c4:	a00f883a 	mov	r7,r20
811088c8:	800d883a 	mov	r6,r16
811088cc:	980b883a 	mov	r5,r19
811088d0:	8809883a 	mov	r4,r17
811088d4:	a83ee83a 	callr	r21
811088d8:	00ffffc4 	movi	r3,-1
811088dc:	10c0031e 	bne	r2,r3,811088ec <mbrtowc+0x80>
811088e0:	90000015 	stw	zero,0(r18)
811088e4:	00c02284 	movi	r3,138
811088e8:	88c00015 	stw	r3,0(r17)
811088ec:	dfc00817 	ldw	ra,32(sp)
811088f0:	dd400717 	ldw	r21,28(sp)
811088f4:	dd000617 	ldw	r20,24(sp)
811088f8:	dcc00517 	ldw	r19,20(sp)
811088fc:	dc800417 	ldw	r18,16(sp)
81108900:	dc400317 	ldw	r17,12(sp)
81108904:	dc000217 	ldw	r16,8(sp)
81108908:	dec00904 	addi	sp,sp,36
8110890c:	f800283a 	ret
81108910:	00a044b4 	movhi	r2,33042
81108914:	109ba104 	addi	r2,r2,28292
81108918:	14000017 	ldw	r16,0(r2)
8110891c:	11087000 	call	81108700 <__locale_charset>
81108920:	01a044b4 	movhi	r6,33042
81108924:	3191ca04 	addi	r6,r6,18216
81108928:	dc800115 	stw	r18,4(sp)
8110892c:	d8800015 	stw	r2,0(sp)
81108930:	01c00044 	movi	r7,1
81108934:	000b883a 	mov	r5,zero
81108938:	8809883a 	mov	r4,r17
8110893c:	803ee83a 	callr	r16
81108940:	003fe506 	br	811088d8 <__reset+0xfb0e88d8>

81108944 <__ascii_mbtowc>:
81108944:	deffff04 	addi	sp,sp,-4
81108948:	28000826 	beq	r5,zero,8110896c <__ascii_mbtowc+0x28>
8110894c:	30000926 	beq	r6,zero,81108974 <__ascii_mbtowc+0x30>
81108950:	38000b26 	beq	r7,zero,81108980 <__ascii_mbtowc+0x3c>
81108954:	30800003 	ldbu	r2,0(r6)
81108958:	28800015 	stw	r2,0(r5)
8110895c:	30800003 	ldbu	r2,0(r6)
81108960:	1004c03a 	cmpne	r2,r2,zero
81108964:	dec00104 	addi	sp,sp,4
81108968:	f800283a 	ret
8110896c:	d80b883a 	mov	r5,sp
81108970:	303ff71e 	bne	r6,zero,81108950 <__reset+0xfb0e8950>
81108974:	0005883a 	mov	r2,zero
81108978:	dec00104 	addi	sp,sp,4
8110897c:	f800283a 	ret
81108980:	00bfff84 	movi	r2,-2
81108984:	003ff706 	br	81108964 <__reset+0xfb0e8964>

81108988 <_mbtowc_r>:
81108988:	00a044b4 	movhi	r2,33042
8110898c:	defff804 	addi	sp,sp,-32
81108990:	109ba104 	addi	r2,r2,28292
81108994:	dfc00715 	stw	ra,28(sp)
81108998:	dc000615 	stw	r16,24(sp)
8110899c:	14000017 	ldw	r16,0(r2)
811089a0:	d9000215 	stw	r4,8(sp)
811089a4:	d9400315 	stw	r5,12(sp)
811089a8:	d9800415 	stw	r6,16(sp)
811089ac:	d9c00515 	stw	r7,20(sp)
811089b0:	11087000 	call	81108700 <__locale_charset>
811089b4:	d8800015 	stw	r2,0(sp)
811089b8:	d8800817 	ldw	r2,32(sp)
811089bc:	d9c00517 	ldw	r7,20(sp)
811089c0:	d9800417 	ldw	r6,16(sp)
811089c4:	d9400317 	ldw	r5,12(sp)
811089c8:	d9000217 	ldw	r4,8(sp)
811089cc:	d8800115 	stw	r2,4(sp)
811089d0:	803ee83a 	callr	r16
811089d4:	dfc00717 	ldw	ra,28(sp)
811089d8:	dc000617 	ldw	r16,24(sp)
811089dc:	dec00804 	addi	sp,sp,32
811089e0:	f800283a 	ret

811089e4 <memchr>:
811089e4:	208000cc 	andi	r2,r4,3
811089e8:	280f883a 	mov	r7,r5
811089ec:	10003426 	beq	r2,zero,81108ac0 <memchr+0xdc>
811089f0:	30bfffc4 	addi	r2,r6,-1
811089f4:	30001a26 	beq	r6,zero,81108a60 <memchr+0x7c>
811089f8:	20c00003 	ldbu	r3,0(r4)
811089fc:	29803fcc 	andi	r6,r5,255
81108a00:	30c0051e 	bne	r6,r3,81108a18 <memchr+0x34>
81108a04:	00001806 	br	81108a68 <memchr+0x84>
81108a08:	10001526 	beq	r2,zero,81108a60 <memchr+0x7c>
81108a0c:	20c00003 	ldbu	r3,0(r4)
81108a10:	10bfffc4 	addi	r2,r2,-1
81108a14:	30c01426 	beq	r6,r3,81108a68 <memchr+0x84>
81108a18:	21000044 	addi	r4,r4,1
81108a1c:	20c000cc 	andi	r3,r4,3
81108a20:	183ff91e 	bne	r3,zero,81108a08 <__reset+0xfb0e8a08>
81108a24:	020000c4 	movi	r8,3
81108a28:	40801136 	bltu	r8,r2,81108a70 <memchr+0x8c>
81108a2c:	10000c26 	beq	r2,zero,81108a60 <memchr+0x7c>
81108a30:	20c00003 	ldbu	r3,0(r4)
81108a34:	29403fcc 	andi	r5,r5,255
81108a38:	28c00b26 	beq	r5,r3,81108a68 <memchr+0x84>
81108a3c:	20c00044 	addi	r3,r4,1
81108a40:	39803fcc 	andi	r6,r7,255
81108a44:	2089883a 	add	r4,r4,r2
81108a48:	00000306 	br	81108a58 <memchr+0x74>
81108a4c:	18c00044 	addi	r3,r3,1
81108a50:	197fffc3 	ldbu	r5,-1(r3)
81108a54:	31400526 	beq	r6,r5,81108a6c <memchr+0x88>
81108a58:	1805883a 	mov	r2,r3
81108a5c:	20fffb1e 	bne	r4,r3,81108a4c <__reset+0xfb0e8a4c>
81108a60:	0005883a 	mov	r2,zero
81108a64:	f800283a 	ret
81108a68:	2005883a 	mov	r2,r4
81108a6c:	f800283a 	ret
81108a70:	28c03fcc 	andi	r3,r5,255
81108a74:	1812923a 	slli	r9,r3,8
81108a78:	02ffbff4 	movhi	r11,65279
81108a7c:	02a02074 	movhi	r10,32897
81108a80:	48d2b03a 	or	r9,r9,r3
81108a84:	4806943a 	slli	r3,r9,16
81108a88:	5affbfc4 	addi	r11,r11,-257
81108a8c:	52a02004 	addi	r10,r10,-32640
81108a90:	48d2b03a 	or	r9,r9,r3
81108a94:	20c00017 	ldw	r3,0(r4)
81108a98:	48c6f03a 	xor	r3,r9,r3
81108a9c:	1acd883a 	add	r6,r3,r11
81108aa0:	00c6303a 	nor	r3,zero,r3
81108aa4:	30c6703a 	and	r3,r6,r3
81108aa8:	1a86703a 	and	r3,r3,r10
81108aac:	183fe01e 	bne	r3,zero,81108a30 <__reset+0xfb0e8a30>
81108ab0:	10bfff04 	addi	r2,r2,-4
81108ab4:	21000104 	addi	r4,r4,4
81108ab8:	40bff636 	bltu	r8,r2,81108a94 <__reset+0xfb0e8a94>
81108abc:	003fdb06 	br	81108a2c <__reset+0xfb0e8a2c>
81108ac0:	3005883a 	mov	r2,r6
81108ac4:	003fd706 	br	81108a24 <__reset+0xfb0e8a24>

81108ac8 <memcpy>:
81108ac8:	defffd04 	addi	sp,sp,-12
81108acc:	dfc00215 	stw	ra,8(sp)
81108ad0:	dc400115 	stw	r17,4(sp)
81108ad4:	dc000015 	stw	r16,0(sp)
81108ad8:	00c003c4 	movi	r3,15
81108adc:	2005883a 	mov	r2,r4
81108ae0:	1980452e 	bgeu	r3,r6,81108bf8 <memcpy+0x130>
81108ae4:	2906b03a 	or	r3,r5,r4
81108ae8:	18c000cc 	andi	r3,r3,3
81108aec:	1800441e 	bne	r3,zero,81108c00 <memcpy+0x138>
81108af0:	347ffc04 	addi	r17,r6,-16
81108af4:	8822d13a 	srli	r17,r17,4
81108af8:	28c00104 	addi	r3,r5,4
81108afc:	23400104 	addi	r13,r4,4
81108b00:	8820913a 	slli	r16,r17,4
81108b04:	2b000204 	addi	r12,r5,8
81108b08:	22c00204 	addi	r11,r4,8
81108b0c:	84000504 	addi	r16,r16,20
81108b10:	2a800304 	addi	r10,r5,12
81108b14:	22400304 	addi	r9,r4,12
81108b18:	2c21883a 	add	r16,r5,r16
81108b1c:	2811883a 	mov	r8,r5
81108b20:	200f883a 	mov	r7,r4
81108b24:	41000017 	ldw	r4,0(r8)
81108b28:	1fc00017 	ldw	ra,0(r3)
81108b2c:	63c00017 	ldw	r15,0(r12)
81108b30:	39000015 	stw	r4,0(r7)
81108b34:	53800017 	ldw	r14,0(r10)
81108b38:	6fc00015 	stw	ra,0(r13)
81108b3c:	5bc00015 	stw	r15,0(r11)
81108b40:	4b800015 	stw	r14,0(r9)
81108b44:	18c00404 	addi	r3,r3,16
81108b48:	39c00404 	addi	r7,r7,16
81108b4c:	42000404 	addi	r8,r8,16
81108b50:	6b400404 	addi	r13,r13,16
81108b54:	63000404 	addi	r12,r12,16
81108b58:	5ac00404 	addi	r11,r11,16
81108b5c:	52800404 	addi	r10,r10,16
81108b60:	4a400404 	addi	r9,r9,16
81108b64:	1c3fef1e 	bne	r3,r16,81108b24 <__reset+0xfb0e8b24>
81108b68:	89c00044 	addi	r7,r17,1
81108b6c:	380e913a 	slli	r7,r7,4
81108b70:	310003cc 	andi	r4,r6,15
81108b74:	02c000c4 	movi	r11,3
81108b78:	11c7883a 	add	r3,r2,r7
81108b7c:	29cb883a 	add	r5,r5,r7
81108b80:	5900212e 	bgeu	r11,r4,81108c08 <memcpy+0x140>
81108b84:	1813883a 	mov	r9,r3
81108b88:	2811883a 	mov	r8,r5
81108b8c:	200f883a 	mov	r7,r4
81108b90:	42800017 	ldw	r10,0(r8)
81108b94:	4a400104 	addi	r9,r9,4
81108b98:	39ffff04 	addi	r7,r7,-4
81108b9c:	4abfff15 	stw	r10,-4(r9)
81108ba0:	42000104 	addi	r8,r8,4
81108ba4:	59fffa36 	bltu	r11,r7,81108b90 <__reset+0xfb0e8b90>
81108ba8:	213fff04 	addi	r4,r4,-4
81108bac:	2008d0ba 	srli	r4,r4,2
81108bb0:	318000cc 	andi	r6,r6,3
81108bb4:	21000044 	addi	r4,r4,1
81108bb8:	2109883a 	add	r4,r4,r4
81108bbc:	2109883a 	add	r4,r4,r4
81108bc0:	1907883a 	add	r3,r3,r4
81108bc4:	290b883a 	add	r5,r5,r4
81108bc8:	30000626 	beq	r6,zero,81108be4 <memcpy+0x11c>
81108bcc:	198d883a 	add	r6,r3,r6
81108bd0:	29c00003 	ldbu	r7,0(r5)
81108bd4:	18c00044 	addi	r3,r3,1
81108bd8:	29400044 	addi	r5,r5,1
81108bdc:	19ffffc5 	stb	r7,-1(r3)
81108be0:	19bffb1e 	bne	r3,r6,81108bd0 <__reset+0xfb0e8bd0>
81108be4:	dfc00217 	ldw	ra,8(sp)
81108be8:	dc400117 	ldw	r17,4(sp)
81108bec:	dc000017 	ldw	r16,0(sp)
81108bf0:	dec00304 	addi	sp,sp,12
81108bf4:	f800283a 	ret
81108bf8:	2007883a 	mov	r3,r4
81108bfc:	003ff206 	br	81108bc8 <__reset+0xfb0e8bc8>
81108c00:	2007883a 	mov	r3,r4
81108c04:	003ff106 	br	81108bcc <__reset+0xfb0e8bcc>
81108c08:	200d883a 	mov	r6,r4
81108c0c:	003fee06 	br	81108bc8 <__reset+0xfb0e8bc8>

81108c10 <memmove>:
81108c10:	2005883a 	mov	r2,r4
81108c14:	29000b2e 	bgeu	r5,r4,81108c44 <memmove+0x34>
81108c18:	298f883a 	add	r7,r5,r6
81108c1c:	21c0092e 	bgeu	r4,r7,81108c44 <memmove+0x34>
81108c20:	2187883a 	add	r3,r4,r6
81108c24:	198bc83a 	sub	r5,r3,r6
81108c28:	30004826 	beq	r6,zero,81108d4c <memmove+0x13c>
81108c2c:	39ffffc4 	addi	r7,r7,-1
81108c30:	39000003 	ldbu	r4,0(r7)
81108c34:	18ffffc4 	addi	r3,r3,-1
81108c38:	19000005 	stb	r4,0(r3)
81108c3c:	28fffb1e 	bne	r5,r3,81108c2c <__reset+0xfb0e8c2c>
81108c40:	f800283a 	ret
81108c44:	00c003c4 	movi	r3,15
81108c48:	1980412e 	bgeu	r3,r6,81108d50 <memmove+0x140>
81108c4c:	2886b03a 	or	r3,r5,r2
81108c50:	18c000cc 	andi	r3,r3,3
81108c54:	1800401e 	bne	r3,zero,81108d58 <memmove+0x148>
81108c58:	33fffc04 	addi	r15,r6,-16
81108c5c:	781ed13a 	srli	r15,r15,4
81108c60:	28c00104 	addi	r3,r5,4
81108c64:	13400104 	addi	r13,r2,4
81108c68:	781c913a 	slli	r14,r15,4
81108c6c:	2b000204 	addi	r12,r5,8
81108c70:	12c00204 	addi	r11,r2,8
81108c74:	73800504 	addi	r14,r14,20
81108c78:	2a800304 	addi	r10,r5,12
81108c7c:	12400304 	addi	r9,r2,12
81108c80:	2b9d883a 	add	r14,r5,r14
81108c84:	2811883a 	mov	r8,r5
81108c88:	100f883a 	mov	r7,r2
81108c8c:	41000017 	ldw	r4,0(r8)
81108c90:	39c00404 	addi	r7,r7,16
81108c94:	18c00404 	addi	r3,r3,16
81108c98:	393ffc15 	stw	r4,-16(r7)
81108c9c:	193ffc17 	ldw	r4,-16(r3)
81108ca0:	6b400404 	addi	r13,r13,16
81108ca4:	5ac00404 	addi	r11,r11,16
81108ca8:	693ffc15 	stw	r4,-16(r13)
81108cac:	61000017 	ldw	r4,0(r12)
81108cb0:	4a400404 	addi	r9,r9,16
81108cb4:	42000404 	addi	r8,r8,16
81108cb8:	593ffc15 	stw	r4,-16(r11)
81108cbc:	51000017 	ldw	r4,0(r10)
81108cc0:	63000404 	addi	r12,r12,16
81108cc4:	52800404 	addi	r10,r10,16
81108cc8:	493ffc15 	stw	r4,-16(r9)
81108ccc:	1bbfef1e 	bne	r3,r14,81108c8c <__reset+0xfb0e8c8c>
81108cd0:	79000044 	addi	r4,r15,1
81108cd4:	2008913a 	slli	r4,r4,4
81108cd8:	328003cc 	andi	r10,r6,15
81108cdc:	02c000c4 	movi	r11,3
81108ce0:	1107883a 	add	r3,r2,r4
81108ce4:	290b883a 	add	r5,r5,r4
81108ce8:	5a801e2e 	bgeu	r11,r10,81108d64 <memmove+0x154>
81108cec:	1813883a 	mov	r9,r3
81108cf0:	2811883a 	mov	r8,r5
81108cf4:	500f883a 	mov	r7,r10
81108cf8:	41000017 	ldw	r4,0(r8)
81108cfc:	4a400104 	addi	r9,r9,4
81108d00:	39ffff04 	addi	r7,r7,-4
81108d04:	493fff15 	stw	r4,-4(r9)
81108d08:	42000104 	addi	r8,r8,4
81108d0c:	59fffa36 	bltu	r11,r7,81108cf8 <__reset+0xfb0e8cf8>
81108d10:	513fff04 	addi	r4,r10,-4
81108d14:	2008d0ba 	srli	r4,r4,2
81108d18:	318000cc 	andi	r6,r6,3
81108d1c:	21000044 	addi	r4,r4,1
81108d20:	2109883a 	add	r4,r4,r4
81108d24:	2109883a 	add	r4,r4,r4
81108d28:	1907883a 	add	r3,r3,r4
81108d2c:	290b883a 	add	r5,r5,r4
81108d30:	30000b26 	beq	r6,zero,81108d60 <memmove+0x150>
81108d34:	198d883a 	add	r6,r3,r6
81108d38:	29c00003 	ldbu	r7,0(r5)
81108d3c:	18c00044 	addi	r3,r3,1
81108d40:	29400044 	addi	r5,r5,1
81108d44:	19ffffc5 	stb	r7,-1(r3)
81108d48:	19bffb1e 	bne	r3,r6,81108d38 <__reset+0xfb0e8d38>
81108d4c:	f800283a 	ret
81108d50:	1007883a 	mov	r3,r2
81108d54:	003ff606 	br	81108d30 <__reset+0xfb0e8d30>
81108d58:	1007883a 	mov	r3,r2
81108d5c:	003ff506 	br	81108d34 <__reset+0xfb0e8d34>
81108d60:	f800283a 	ret
81108d64:	500d883a 	mov	r6,r10
81108d68:	003ff106 	br	81108d30 <__reset+0xfb0e8d30>

81108d6c <_Balloc>:
81108d6c:	20801317 	ldw	r2,76(r4)
81108d70:	defffc04 	addi	sp,sp,-16
81108d74:	dc400115 	stw	r17,4(sp)
81108d78:	dc000015 	stw	r16,0(sp)
81108d7c:	dfc00315 	stw	ra,12(sp)
81108d80:	dc800215 	stw	r18,8(sp)
81108d84:	2023883a 	mov	r17,r4
81108d88:	2821883a 	mov	r16,r5
81108d8c:	10000f26 	beq	r2,zero,81108dcc <_Balloc+0x60>
81108d90:	8407883a 	add	r3,r16,r16
81108d94:	18c7883a 	add	r3,r3,r3
81108d98:	10c7883a 	add	r3,r2,r3
81108d9c:	18800017 	ldw	r2,0(r3)
81108da0:	10001126 	beq	r2,zero,81108de8 <_Balloc+0x7c>
81108da4:	11000017 	ldw	r4,0(r2)
81108da8:	19000015 	stw	r4,0(r3)
81108dac:	10000415 	stw	zero,16(r2)
81108db0:	10000315 	stw	zero,12(r2)
81108db4:	dfc00317 	ldw	ra,12(sp)
81108db8:	dc800217 	ldw	r18,8(sp)
81108dbc:	dc400117 	ldw	r17,4(sp)
81108dc0:	dc000017 	ldw	r16,0(sp)
81108dc4:	dec00404 	addi	sp,sp,16
81108dc8:	f800283a 	ret
81108dcc:	01800844 	movi	r6,33
81108dd0:	01400104 	movi	r5,4
81108dd4:	11102a00 	call	811102a0 <_calloc_r>
81108dd8:	88801315 	stw	r2,76(r17)
81108ddc:	103fec1e 	bne	r2,zero,81108d90 <__reset+0xfb0e8d90>
81108de0:	0005883a 	mov	r2,zero
81108de4:	003ff306 	br	81108db4 <__reset+0xfb0e8db4>
81108de8:	01400044 	movi	r5,1
81108dec:	2c24983a 	sll	r18,r5,r16
81108df0:	8809883a 	mov	r4,r17
81108df4:	91800144 	addi	r6,r18,5
81108df8:	318d883a 	add	r6,r6,r6
81108dfc:	318d883a 	add	r6,r6,r6
81108e00:	11102a00 	call	811102a0 <_calloc_r>
81108e04:	103ff626 	beq	r2,zero,81108de0 <__reset+0xfb0e8de0>
81108e08:	14000115 	stw	r16,4(r2)
81108e0c:	14800215 	stw	r18,8(r2)
81108e10:	003fe606 	br	81108dac <__reset+0xfb0e8dac>

81108e14 <_Bfree>:
81108e14:	28000826 	beq	r5,zero,81108e38 <_Bfree+0x24>
81108e18:	28c00117 	ldw	r3,4(r5)
81108e1c:	20801317 	ldw	r2,76(r4)
81108e20:	18c7883a 	add	r3,r3,r3
81108e24:	18c7883a 	add	r3,r3,r3
81108e28:	10c5883a 	add	r2,r2,r3
81108e2c:	10c00017 	ldw	r3,0(r2)
81108e30:	28c00015 	stw	r3,0(r5)
81108e34:	11400015 	stw	r5,0(r2)
81108e38:	f800283a 	ret

81108e3c <__multadd>:
81108e3c:	defffa04 	addi	sp,sp,-24
81108e40:	dc800315 	stw	r18,12(sp)
81108e44:	dc400215 	stw	r17,8(sp)
81108e48:	dc000115 	stw	r16,4(sp)
81108e4c:	2823883a 	mov	r17,r5
81108e50:	2c000417 	ldw	r16,16(r5)
81108e54:	dfc00515 	stw	ra,20(sp)
81108e58:	dcc00415 	stw	r19,16(sp)
81108e5c:	2025883a 	mov	r18,r4
81108e60:	29400504 	addi	r5,r5,20
81108e64:	0011883a 	mov	r8,zero
81108e68:	28c00017 	ldw	r3,0(r5)
81108e6c:	29400104 	addi	r5,r5,4
81108e70:	42000044 	addi	r8,r8,1
81108e74:	18bfffcc 	andi	r2,r3,65535
81108e78:	1185383a 	mul	r2,r2,r6
81108e7c:	1806d43a 	srli	r3,r3,16
81108e80:	11cf883a 	add	r7,r2,r7
81108e84:	3808d43a 	srli	r4,r7,16
81108e88:	1987383a 	mul	r3,r3,r6
81108e8c:	38bfffcc 	andi	r2,r7,65535
81108e90:	1907883a 	add	r3,r3,r4
81108e94:	1808943a 	slli	r4,r3,16
81108e98:	180ed43a 	srli	r7,r3,16
81108e9c:	2085883a 	add	r2,r4,r2
81108ea0:	28bfff15 	stw	r2,-4(r5)
81108ea4:	443ff016 	blt	r8,r16,81108e68 <__reset+0xfb0e8e68>
81108ea8:	38000926 	beq	r7,zero,81108ed0 <__multadd+0x94>
81108eac:	88800217 	ldw	r2,8(r17)
81108eb0:	80800f0e 	bge	r16,r2,81108ef0 <__multadd+0xb4>
81108eb4:	80800144 	addi	r2,r16,5
81108eb8:	1085883a 	add	r2,r2,r2
81108ebc:	1085883a 	add	r2,r2,r2
81108ec0:	8885883a 	add	r2,r17,r2
81108ec4:	11c00015 	stw	r7,0(r2)
81108ec8:	84000044 	addi	r16,r16,1
81108ecc:	8c000415 	stw	r16,16(r17)
81108ed0:	8805883a 	mov	r2,r17
81108ed4:	dfc00517 	ldw	ra,20(sp)
81108ed8:	dcc00417 	ldw	r19,16(sp)
81108edc:	dc800317 	ldw	r18,12(sp)
81108ee0:	dc400217 	ldw	r17,8(sp)
81108ee4:	dc000117 	ldw	r16,4(sp)
81108ee8:	dec00604 	addi	sp,sp,24
81108eec:	f800283a 	ret
81108ef0:	89400117 	ldw	r5,4(r17)
81108ef4:	9009883a 	mov	r4,r18
81108ef8:	d9c00015 	stw	r7,0(sp)
81108efc:	29400044 	addi	r5,r5,1
81108f00:	1108d6c0 	call	81108d6c <_Balloc>
81108f04:	89800417 	ldw	r6,16(r17)
81108f08:	89400304 	addi	r5,r17,12
81108f0c:	11000304 	addi	r4,r2,12
81108f10:	31800084 	addi	r6,r6,2
81108f14:	318d883a 	add	r6,r6,r6
81108f18:	318d883a 	add	r6,r6,r6
81108f1c:	1027883a 	mov	r19,r2
81108f20:	1108ac80 	call	81108ac8 <memcpy>
81108f24:	d9c00017 	ldw	r7,0(sp)
81108f28:	88000a26 	beq	r17,zero,81108f54 <__multadd+0x118>
81108f2c:	88c00117 	ldw	r3,4(r17)
81108f30:	90801317 	ldw	r2,76(r18)
81108f34:	18c7883a 	add	r3,r3,r3
81108f38:	18c7883a 	add	r3,r3,r3
81108f3c:	10c5883a 	add	r2,r2,r3
81108f40:	10c00017 	ldw	r3,0(r2)
81108f44:	88c00015 	stw	r3,0(r17)
81108f48:	14400015 	stw	r17,0(r2)
81108f4c:	9823883a 	mov	r17,r19
81108f50:	003fd806 	br	81108eb4 <__reset+0xfb0e8eb4>
81108f54:	9823883a 	mov	r17,r19
81108f58:	003fd606 	br	81108eb4 <__reset+0xfb0e8eb4>

81108f5c <__s2b>:
81108f5c:	defff904 	addi	sp,sp,-28
81108f60:	dc400115 	stw	r17,4(sp)
81108f64:	dc000015 	stw	r16,0(sp)
81108f68:	2023883a 	mov	r17,r4
81108f6c:	2821883a 	mov	r16,r5
81108f70:	39000204 	addi	r4,r7,8
81108f74:	01400244 	movi	r5,9
81108f78:	dcc00315 	stw	r19,12(sp)
81108f7c:	dc800215 	stw	r18,8(sp)
81108f80:	dfc00615 	stw	ra,24(sp)
81108f84:	dd400515 	stw	r21,20(sp)
81108f88:	dd000415 	stw	r20,16(sp)
81108f8c:	3825883a 	mov	r18,r7
81108f90:	3027883a 	mov	r19,r6
81108f94:	111353c0 	call	8111353c <__divsi3>
81108f98:	00c00044 	movi	r3,1
81108f9c:	000b883a 	mov	r5,zero
81108fa0:	1880030e 	bge	r3,r2,81108fb0 <__s2b+0x54>
81108fa4:	18c7883a 	add	r3,r3,r3
81108fa8:	29400044 	addi	r5,r5,1
81108fac:	18bffd16 	blt	r3,r2,81108fa4 <__reset+0xfb0e8fa4>
81108fb0:	8809883a 	mov	r4,r17
81108fb4:	1108d6c0 	call	81108d6c <_Balloc>
81108fb8:	d8c00717 	ldw	r3,28(sp)
81108fbc:	10c00515 	stw	r3,20(r2)
81108fc0:	00c00044 	movi	r3,1
81108fc4:	10c00415 	stw	r3,16(r2)
81108fc8:	00c00244 	movi	r3,9
81108fcc:	1cc0210e 	bge	r3,r19,81109054 <__s2b+0xf8>
81108fd0:	80eb883a 	add	r21,r16,r3
81108fd4:	a829883a 	mov	r20,r21
81108fd8:	84e1883a 	add	r16,r16,r19
81108fdc:	a1c00007 	ldb	r7,0(r20)
81108fe0:	01800284 	movi	r6,10
81108fe4:	a5000044 	addi	r20,r20,1
81108fe8:	100b883a 	mov	r5,r2
81108fec:	39fff404 	addi	r7,r7,-48
81108ff0:	8809883a 	mov	r4,r17
81108ff4:	1108e3c0 	call	81108e3c <__multadd>
81108ff8:	a43ff81e 	bne	r20,r16,81108fdc <__reset+0xfb0e8fdc>
81108ffc:	ace1883a 	add	r16,r21,r19
81109000:	843ffe04 	addi	r16,r16,-8
81109004:	9c800a0e 	bge	r19,r18,81109030 <__s2b+0xd4>
81109008:	94e5c83a 	sub	r18,r18,r19
8110900c:	84a5883a 	add	r18,r16,r18
81109010:	81c00007 	ldb	r7,0(r16)
81109014:	01800284 	movi	r6,10
81109018:	84000044 	addi	r16,r16,1
8110901c:	100b883a 	mov	r5,r2
81109020:	39fff404 	addi	r7,r7,-48
81109024:	8809883a 	mov	r4,r17
81109028:	1108e3c0 	call	81108e3c <__multadd>
8110902c:	84bff81e 	bne	r16,r18,81109010 <__reset+0xfb0e9010>
81109030:	dfc00617 	ldw	ra,24(sp)
81109034:	dd400517 	ldw	r21,20(sp)
81109038:	dd000417 	ldw	r20,16(sp)
8110903c:	dcc00317 	ldw	r19,12(sp)
81109040:	dc800217 	ldw	r18,8(sp)
81109044:	dc400117 	ldw	r17,4(sp)
81109048:	dc000017 	ldw	r16,0(sp)
8110904c:	dec00704 	addi	sp,sp,28
81109050:	f800283a 	ret
81109054:	84000284 	addi	r16,r16,10
81109058:	1827883a 	mov	r19,r3
8110905c:	003fe906 	br	81109004 <__reset+0xfb0e9004>

81109060 <__hi0bits>:
81109060:	20bfffec 	andhi	r2,r4,65535
81109064:	1000141e 	bne	r2,zero,811090b8 <__hi0bits+0x58>
81109068:	2008943a 	slli	r4,r4,16
8110906c:	00800404 	movi	r2,16
81109070:	20ffc02c 	andhi	r3,r4,65280
81109074:	1800021e 	bne	r3,zero,81109080 <__hi0bits+0x20>
81109078:	2008923a 	slli	r4,r4,8
8110907c:	10800204 	addi	r2,r2,8
81109080:	20fc002c 	andhi	r3,r4,61440
81109084:	1800021e 	bne	r3,zero,81109090 <__hi0bits+0x30>
81109088:	2008913a 	slli	r4,r4,4
8110908c:	10800104 	addi	r2,r2,4
81109090:	20f0002c 	andhi	r3,r4,49152
81109094:	1800031e 	bne	r3,zero,811090a4 <__hi0bits+0x44>
81109098:	2109883a 	add	r4,r4,r4
8110909c:	10800084 	addi	r2,r2,2
811090a0:	2109883a 	add	r4,r4,r4
811090a4:	20000316 	blt	r4,zero,811090b4 <__hi0bits+0x54>
811090a8:	2110002c 	andhi	r4,r4,16384
811090ac:	2000041e 	bne	r4,zero,811090c0 <__hi0bits+0x60>
811090b0:	00800804 	movi	r2,32
811090b4:	f800283a 	ret
811090b8:	0005883a 	mov	r2,zero
811090bc:	003fec06 	br	81109070 <__reset+0xfb0e9070>
811090c0:	10800044 	addi	r2,r2,1
811090c4:	f800283a 	ret

811090c8 <__lo0bits>:
811090c8:	20c00017 	ldw	r3,0(r4)
811090cc:	188001cc 	andi	r2,r3,7
811090d0:	10000826 	beq	r2,zero,811090f4 <__lo0bits+0x2c>
811090d4:	1880004c 	andi	r2,r3,1
811090d8:	1000211e 	bne	r2,zero,81109160 <__lo0bits+0x98>
811090dc:	1880008c 	andi	r2,r3,2
811090e0:	1000211e 	bne	r2,zero,81109168 <__lo0bits+0xa0>
811090e4:	1806d0ba 	srli	r3,r3,2
811090e8:	00800084 	movi	r2,2
811090ec:	20c00015 	stw	r3,0(r4)
811090f0:	f800283a 	ret
811090f4:	18bfffcc 	andi	r2,r3,65535
811090f8:	10001326 	beq	r2,zero,81109148 <__lo0bits+0x80>
811090fc:	0005883a 	mov	r2,zero
81109100:	19403fcc 	andi	r5,r3,255
81109104:	2800021e 	bne	r5,zero,81109110 <__lo0bits+0x48>
81109108:	1806d23a 	srli	r3,r3,8
8110910c:	10800204 	addi	r2,r2,8
81109110:	194003cc 	andi	r5,r3,15
81109114:	2800021e 	bne	r5,zero,81109120 <__lo0bits+0x58>
81109118:	1806d13a 	srli	r3,r3,4
8110911c:	10800104 	addi	r2,r2,4
81109120:	194000cc 	andi	r5,r3,3
81109124:	2800021e 	bne	r5,zero,81109130 <__lo0bits+0x68>
81109128:	1806d0ba 	srli	r3,r3,2
8110912c:	10800084 	addi	r2,r2,2
81109130:	1940004c 	andi	r5,r3,1
81109134:	2800081e 	bne	r5,zero,81109158 <__lo0bits+0x90>
81109138:	1806d07a 	srli	r3,r3,1
8110913c:	1800051e 	bne	r3,zero,81109154 <__lo0bits+0x8c>
81109140:	00800804 	movi	r2,32
81109144:	f800283a 	ret
81109148:	1806d43a 	srli	r3,r3,16
8110914c:	00800404 	movi	r2,16
81109150:	003feb06 	br	81109100 <__reset+0xfb0e9100>
81109154:	10800044 	addi	r2,r2,1
81109158:	20c00015 	stw	r3,0(r4)
8110915c:	f800283a 	ret
81109160:	0005883a 	mov	r2,zero
81109164:	f800283a 	ret
81109168:	1806d07a 	srli	r3,r3,1
8110916c:	00800044 	movi	r2,1
81109170:	20c00015 	stw	r3,0(r4)
81109174:	f800283a 	ret

81109178 <__i2b>:
81109178:	defffd04 	addi	sp,sp,-12
8110917c:	dc000015 	stw	r16,0(sp)
81109180:	04000044 	movi	r16,1
81109184:	dc400115 	stw	r17,4(sp)
81109188:	2823883a 	mov	r17,r5
8110918c:	800b883a 	mov	r5,r16
81109190:	dfc00215 	stw	ra,8(sp)
81109194:	1108d6c0 	call	81108d6c <_Balloc>
81109198:	14400515 	stw	r17,20(r2)
8110919c:	14000415 	stw	r16,16(r2)
811091a0:	dfc00217 	ldw	ra,8(sp)
811091a4:	dc400117 	ldw	r17,4(sp)
811091a8:	dc000017 	ldw	r16,0(sp)
811091ac:	dec00304 	addi	sp,sp,12
811091b0:	f800283a 	ret

811091b4 <__multiply>:
811091b4:	defffa04 	addi	sp,sp,-24
811091b8:	dcc00315 	stw	r19,12(sp)
811091bc:	dc800215 	stw	r18,8(sp)
811091c0:	34c00417 	ldw	r19,16(r6)
811091c4:	2c800417 	ldw	r18,16(r5)
811091c8:	dd000415 	stw	r20,16(sp)
811091cc:	dc400115 	stw	r17,4(sp)
811091d0:	dfc00515 	stw	ra,20(sp)
811091d4:	dc000015 	stw	r16,0(sp)
811091d8:	2829883a 	mov	r20,r5
811091dc:	3023883a 	mov	r17,r6
811091e0:	94c0050e 	bge	r18,r19,811091f8 <__multiply+0x44>
811091e4:	9007883a 	mov	r3,r18
811091e8:	3029883a 	mov	r20,r6
811091ec:	9825883a 	mov	r18,r19
811091f0:	2823883a 	mov	r17,r5
811091f4:	1827883a 	mov	r19,r3
811091f8:	a0800217 	ldw	r2,8(r20)
811091fc:	94e1883a 	add	r16,r18,r19
81109200:	a1400117 	ldw	r5,4(r20)
81109204:	1400010e 	bge	r2,r16,8110920c <__multiply+0x58>
81109208:	29400044 	addi	r5,r5,1
8110920c:	1108d6c0 	call	81108d6c <_Balloc>
81109210:	8415883a 	add	r10,r16,r16
81109214:	12c00504 	addi	r11,r2,20
81109218:	5295883a 	add	r10,r10,r10
8110921c:	5a95883a 	add	r10,r11,r10
81109220:	5807883a 	mov	r3,r11
81109224:	5a80032e 	bgeu	r11,r10,81109234 <__multiply+0x80>
81109228:	18000015 	stw	zero,0(r3)
8110922c:	18c00104 	addi	r3,r3,4
81109230:	1abffd36 	bltu	r3,r10,81109228 <__reset+0xfb0e9228>
81109234:	9ce7883a 	add	r19,r19,r19
81109238:	94a5883a 	add	r18,r18,r18
8110923c:	89800504 	addi	r6,r17,20
81109240:	9ce7883a 	add	r19,r19,r19
81109244:	a3400504 	addi	r13,r20,20
81109248:	94a5883a 	add	r18,r18,r18
8110924c:	34d9883a 	add	r12,r6,r19
81109250:	6c93883a 	add	r9,r13,r18
81109254:	3300422e 	bgeu	r6,r12,81109360 <__multiply+0x1ac>
81109258:	37c00017 	ldw	ra,0(r6)
8110925c:	fbffffcc 	andi	r15,ra,65535
81109260:	78001b26 	beq	r15,zero,811092d0 <__multiply+0x11c>
81109264:	5811883a 	mov	r8,r11
81109268:	681d883a 	mov	r14,r13
8110926c:	000f883a 	mov	r7,zero
81109270:	71000017 	ldw	r4,0(r14)
81109274:	40c00017 	ldw	r3,0(r8)
81109278:	73800104 	addi	r14,r14,4
8110927c:	217fffcc 	andi	r5,r4,65535
81109280:	2bcb383a 	mul	r5,r5,r15
81109284:	2008d43a 	srli	r4,r4,16
81109288:	1c7fffcc 	andi	r17,r3,65535
8110928c:	2c4b883a 	add	r5,r5,r17
81109290:	29cb883a 	add	r5,r5,r7
81109294:	23c9383a 	mul	r4,r4,r15
81109298:	1806d43a 	srli	r3,r3,16
8110929c:	280ed43a 	srli	r7,r5,16
811092a0:	297fffcc 	andi	r5,r5,65535
811092a4:	20c7883a 	add	r3,r4,r3
811092a8:	19c7883a 	add	r3,r3,r7
811092ac:	1808943a 	slli	r4,r3,16
811092b0:	4023883a 	mov	r17,r8
811092b4:	180ed43a 	srli	r7,r3,16
811092b8:	214ab03a 	or	r5,r4,r5
811092bc:	41400015 	stw	r5,0(r8)
811092c0:	42000104 	addi	r8,r8,4
811092c4:	727fea36 	bltu	r14,r9,81109270 <__reset+0xfb0e9270>
811092c8:	89c00115 	stw	r7,4(r17)
811092cc:	37c00017 	ldw	ra,0(r6)
811092d0:	f83ed43a 	srli	ra,ra,16
811092d4:	f8001f26 	beq	ra,zero,81109354 <__multiply+0x1a0>
811092d8:	58c00017 	ldw	r3,0(r11)
811092dc:	681d883a 	mov	r14,r13
811092e0:	581f883a 	mov	r15,r11
811092e4:	1811883a 	mov	r8,r3
811092e8:	5825883a 	mov	r18,r11
811092ec:	000f883a 	mov	r7,zero
811092f0:	00000106 	br	811092f8 <__multiply+0x144>
811092f4:	8825883a 	mov	r18,r17
811092f8:	7140000b 	ldhu	r5,0(r14)
811092fc:	4010d43a 	srli	r8,r8,16
81109300:	193fffcc 	andi	r4,r3,65535
81109304:	2fcb383a 	mul	r5,r5,ra
81109308:	7bc00104 	addi	r15,r15,4
8110930c:	73800104 	addi	r14,r14,4
81109310:	2a0b883a 	add	r5,r5,r8
81109314:	29cb883a 	add	r5,r5,r7
81109318:	2806943a 	slli	r3,r5,16
8110931c:	94400104 	addi	r17,r18,4
81109320:	280ad43a 	srli	r5,r5,16
81109324:	1908b03a 	or	r4,r3,r4
81109328:	793fff15 	stw	r4,-4(r15)
8110932c:	70ffff17 	ldw	r3,-4(r14)
81109330:	8a000017 	ldw	r8,0(r17)
81109334:	1806d43a 	srli	r3,r3,16
81109338:	413fffcc 	andi	r4,r8,65535
8110933c:	1fc7383a 	mul	r3,r3,ra
81109340:	1907883a 	add	r3,r3,r4
81109344:	1947883a 	add	r3,r3,r5
81109348:	180ed43a 	srli	r7,r3,16
8110934c:	727fe936 	bltu	r14,r9,811092f4 <__reset+0xfb0e92f4>
81109350:	90c00115 	stw	r3,4(r18)
81109354:	31800104 	addi	r6,r6,4
81109358:	5ac00104 	addi	r11,r11,4
8110935c:	333fbe36 	bltu	r6,r12,81109258 <__reset+0xfb0e9258>
81109360:	0400090e 	bge	zero,r16,81109388 <__multiply+0x1d4>
81109364:	50ffff17 	ldw	r3,-4(r10)
81109368:	52bfff04 	addi	r10,r10,-4
8110936c:	18000326 	beq	r3,zero,8110937c <__multiply+0x1c8>
81109370:	00000506 	br	81109388 <__multiply+0x1d4>
81109374:	50c00017 	ldw	r3,0(r10)
81109378:	1800031e 	bne	r3,zero,81109388 <__multiply+0x1d4>
8110937c:	843fffc4 	addi	r16,r16,-1
81109380:	52bfff04 	addi	r10,r10,-4
81109384:	803ffb1e 	bne	r16,zero,81109374 <__reset+0xfb0e9374>
81109388:	14000415 	stw	r16,16(r2)
8110938c:	dfc00517 	ldw	ra,20(sp)
81109390:	dd000417 	ldw	r20,16(sp)
81109394:	dcc00317 	ldw	r19,12(sp)
81109398:	dc800217 	ldw	r18,8(sp)
8110939c:	dc400117 	ldw	r17,4(sp)
811093a0:	dc000017 	ldw	r16,0(sp)
811093a4:	dec00604 	addi	sp,sp,24
811093a8:	f800283a 	ret

811093ac <__pow5mult>:
811093ac:	defffa04 	addi	sp,sp,-24
811093b0:	dcc00315 	stw	r19,12(sp)
811093b4:	dc000015 	stw	r16,0(sp)
811093b8:	dfc00515 	stw	ra,20(sp)
811093bc:	dd000415 	stw	r20,16(sp)
811093c0:	dc800215 	stw	r18,8(sp)
811093c4:	dc400115 	stw	r17,4(sp)
811093c8:	308000cc 	andi	r2,r6,3
811093cc:	3021883a 	mov	r16,r6
811093d0:	2027883a 	mov	r19,r4
811093d4:	10002f1e 	bne	r2,zero,81109494 <__pow5mult+0xe8>
811093d8:	2825883a 	mov	r18,r5
811093dc:	8021d0ba 	srai	r16,r16,2
811093e0:	80001a26 	beq	r16,zero,8110944c <__pow5mult+0xa0>
811093e4:	9c401217 	ldw	r17,72(r19)
811093e8:	8800061e 	bne	r17,zero,81109404 <__pow5mult+0x58>
811093ec:	00003406 	br	811094c0 <__pow5mult+0x114>
811093f0:	8021d07a 	srai	r16,r16,1
811093f4:	80001526 	beq	r16,zero,8110944c <__pow5mult+0xa0>
811093f8:	88800017 	ldw	r2,0(r17)
811093fc:	10001c26 	beq	r2,zero,81109470 <__pow5mult+0xc4>
81109400:	1023883a 	mov	r17,r2
81109404:	8080004c 	andi	r2,r16,1
81109408:	103ff926 	beq	r2,zero,811093f0 <__reset+0xfb0e93f0>
8110940c:	880d883a 	mov	r6,r17
81109410:	900b883a 	mov	r5,r18
81109414:	9809883a 	mov	r4,r19
81109418:	11091b40 	call	811091b4 <__multiply>
8110941c:	90001b26 	beq	r18,zero,8110948c <__pow5mult+0xe0>
81109420:	91000117 	ldw	r4,4(r18)
81109424:	98c01317 	ldw	r3,76(r19)
81109428:	8021d07a 	srai	r16,r16,1
8110942c:	2109883a 	add	r4,r4,r4
81109430:	2109883a 	add	r4,r4,r4
81109434:	1907883a 	add	r3,r3,r4
81109438:	19000017 	ldw	r4,0(r3)
8110943c:	91000015 	stw	r4,0(r18)
81109440:	1c800015 	stw	r18,0(r3)
81109444:	1025883a 	mov	r18,r2
81109448:	803feb1e 	bne	r16,zero,811093f8 <__reset+0xfb0e93f8>
8110944c:	9005883a 	mov	r2,r18
81109450:	dfc00517 	ldw	ra,20(sp)
81109454:	dd000417 	ldw	r20,16(sp)
81109458:	dcc00317 	ldw	r19,12(sp)
8110945c:	dc800217 	ldw	r18,8(sp)
81109460:	dc400117 	ldw	r17,4(sp)
81109464:	dc000017 	ldw	r16,0(sp)
81109468:	dec00604 	addi	sp,sp,24
8110946c:	f800283a 	ret
81109470:	880d883a 	mov	r6,r17
81109474:	880b883a 	mov	r5,r17
81109478:	9809883a 	mov	r4,r19
8110947c:	11091b40 	call	811091b4 <__multiply>
81109480:	88800015 	stw	r2,0(r17)
81109484:	10000015 	stw	zero,0(r2)
81109488:	003fdd06 	br	81109400 <__reset+0xfb0e9400>
8110948c:	1025883a 	mov	r18,r2
81109490:	003fd706 	br	811093f0 <__reset+0xfb0e93f0>
81109494:	10bfffc4 	addi	r2,r2,-1
81109498:	1085883a 	add	r2,r2,r2
8110949c:	00e044b4 	movhi	r3,33042
811094a0:	18d28d04 	addi	r3,r3,18996
811094a4:	1085883a 	add	r2,r2,r2
811094a8:	1885883a 	add	r2,r3,r2
811094ac:	11800017 	ldw	r6,0(r2)
811094b0:	000f883a 	mov	r7,zero
811094b4:	1108e3c0 	call	81108e3c <__multadd>
811094b8:	1025883a 	mov	r18,r2
811094bc:	003fc706 	br	811093dc <__reset+0xfb0e93dc>
811094c0:	05000044 	movi	r20,1
811094c4:	a00b883a 	mov	r5,r20
811094c8:	9809883a 	mov	r4,r19
811094cc:	1108d6c0 	call	81108d6c <_Balloc>
811094d0:	1023883a 	mov	r17,r2
811094d4:	00809c44 	movi	r2,625
811094d8:	88800515 	stw	r2,20(r17)
811094dc:	8d000415 	stw	r20,16(r17)
811094e0:	9c401215 	stw	r17,72(r19)
811094e4:	88000015 	stw	zero,0(r17)
811094e8:	003fc606 	br	81109404 <__reset+0xfb0e9404>

811094ec <__lshift>:
811094ec:	defff904 	addi	sp,sp,-28
811094f0:	dd400515 	stw	r21,20(sp)
811094f4:	dcc00315 	stw	r19,12(sp)
811094f8:	302bd17a 	srai	r21,r6,5
811094fc:	2cc00417 	ldw	r19,16(r5)
81109500:	28800217 	ldw	r2,8(r5)
81109504:	dd000415 	stw	r20,16(sp)
81109508:	ace7883a 	add	r19,r21,r19
8110950c:	dc800215 	stw	r18,8(sp)
81109510:	dc400115 	stw	r17,4(sp)
81109514:	dc000015 	stw	r16,0(sp)
81109518:	dfc00615 	stw	ra,24(sp)
8110951c:	9c000044 	addi	r16,r19,1
81109520:	2823883a 	mov	r17,r5
81109524:	3029883a 	mov	r20,r6
81109528:	2025883a 	mov	r18,r4
8110952c:	29400117 	ldw	r5,4(r5)
81109530:	1400030e 	bge	r2,r16,81109540 <__lshift+0x54>
81109534:	1085883a 	add	r2,r2,r2
81109538:	29400044 	addi	r5,r5,1
8110953c:	143ffd16 	blt	r2,r16,81109534 <__reset+0xfb0e9534>
81109540:	9009883a 	mov	r4,r18
81109544:	1108d6c0 	call	81108d6c <_Balloc>
81109548:	10c00504 	addi	r3,r2,20
8110954c:	0540070e 	bge	zero,r21,8110956c <__lshift+0x80>
81109550:	ad6b883a 	add	r21,r21,r21
81109554:	ad6b883a 	add	r21,r21,r21
81109558:	1809883a 	mov	r4,r3
8110955c:	1d47883a 	add	r3,r3,r21
81109560:	20000015 	stw	zero,0(r4)
81109564:	21000104 	addi	r4,r4,4
81109568:	193ffd1e 	bne	r3,r4,81109560 <__reset+0xfb0e9560>
8110956c:	8a000417 	ldw	r8,16(r17)
81109570:	89000504 	addi	r4,r17,20
81109574:	a18007cc 	andi	r6,r20,31
81109578:	4211883a 	add	r8,r8,r8
8110957c:	4211883a 	add	r8,r8,r8
81109580:	2211883a 	add	r8,r4,r8
81109584:	30002326 	beq	r6,zero,81109614 <__lshift+0x128>
81109588:	02400804 	movi	r9,32
8110958c:	4993c83a 	sub	r9,r9,r6
81109590:	000b883a 	mov	r5,zero
81109594:	21c00017 	ldw	r7,0(r4)
81109598:	1815883a 	mov	r10,r3
8110959c:	18c00104 	addi	r3,r3,4
811095a0:	398e983a 	sll	r7,r7,r6
811095a4:	21000104 	addi	r4,r4,4
811095a8:	394ab03a 	or	r5,r7,r5
811095ac:	197fff15 	stw	r5,-4(r3)
811095b0:	217fff17 	ldw	r5,-4(r4)
811095b4:	2a4ad83a 	srl	r5,r5,r9
811095b8:	223ff636 	bltu	r4,r8,81109594 <__reset+0xfb0e9594>
811095bc:	51400115 	stw	r5,4(r10)
811095c0:	28001a1e 	bne	r5,zero,8110962c <__lshift+0x140>
811095c4:	843fffc4 	addi	r16,r16,-1
811095c8:	14000415 	stw	r16,16(r2)
811095cc:	88000826 	beq	r17,zero,811095f0 <__lshift+0x104>
811095d0:	89000117 	ldw	r4,4(r17)
811095d4:	90c01317 	ldw	r3,76(r18)
811095d8:	2109883a 	add	r4,r4,r4
811095dc:	2109883a 	add	r4,r4,r4
811095e0:	1907883a 	add	r3,r3,r4
811095e4:	19000017 	ldw	r4,0(r3)
811095e8:	89000015 	stw	r4,0(r17)
811095ec:	1c400015 	stw	r17,0(r3)
811095f0:	dfc00617 	ldw	ra,24(sp)
811095f4:	dd400517 	ldw	r21,20(sp)
811095f8:	dd000417 	ldw	r20,16(sp)
811095fc:	dcc00317 	ldw	r19,12(sp)
81109600:	dc800217 	ldw	r18,8(sp)
81109604:	dc400117 	ldw	r17,4(sp)
81109608:	dc000017 	ldw	r16,0(sp)
8110960c:	dec00704 	addi	sp,sp,28
81109610:	f800283a 	ret
81109614:	21400017 	ldw	r5,0(r4)
81109618:	18c00104 	addi	r3,r3,4
8110961c:	21000104 	addi	r4,r4,4
81109620:	197fff15 	stw	r5,-4(r3)
81109624:	223ffb36 	bltu	r4,r8,81109614 <__reset+0xfb0e9614>
81109628:	003fe606 	br	811095c4 <__reset+0xfb0e95c4>
8110962c:	9c000084 	addi	r16,r19,2
81109630:	003fe406 	br	811095c4 <__reset+0xfb0e95c4>

81109634 <__mcmp>:
81109634:	20800417 	ldw	r2,16(r4)
81109638:	28c00417 	ldw	r3,16(r5)
8110963c:	10c5c83a 	sub	r2,r2,r3
81109640:	1000111e 	bne	r2,zero,81109688 <__mcmp+0x54>
81109644:	18c7883a 	add	r3,r3,r3
81109648:	18c7883a 	add	r3,r3,r3
8110964c:	21000504 	addi	r4,r4,20
81109650:	29400504 	addi	r5,r5,20
81109654:	20c5883a 	add	r2,r4,r3
81109658:	28cb883a 	add	r5,r5,r3
8110965c:	00000106 	br	81109664 <__mcmp+0x30>
81109660:	20800a2e 	bgeu	r4,r2,8110968c <__mcmp+0x58>
81109664:	10bfff04 	addi	r2,r2,-4
81109668:	297fff04 	addi	r5,r5,-4
8110966c:	11800017 	ldw	r6,0(r2)
81109670:	28c00017 	ldw	r3,0(r5)
81109674:	30fffa26 	beq	r6,r3,81109660 <__reset+0xfb0e9660>
81109678:	30c00236 	bltu	r6,r3,81109684 <__mcmp+0x50>
8110967c:	00800044 	movi	r2,1
81109680:	f800283a 	ret
81109684:	00bfffc4 	movi	r2,-1
81109688:	f800283a 	ret
8110968c:	0005883a 	mov	r2,zero
81109690:	f800283a 	ret

81109694 <__mdiff>:
81109694:	28c00417 	ldw	r3,16(r5)
81109698:	30800417 	ldw	r2,16(r6)
8110969c:	defffa04 	addi	sp,sp,-24
811096a0:	dcc00315 	stw	r19,12(sp)
811096a4:	dc800215 	stw	r18,8(sp)
811096a8:	dfc00515 	stw	ra,20(sp)
811096ac:	dd000415 	stw	r20,16(sp)
811096b0:	dc400115 	stw	r17,4(sp)
811096b4:	dc000015 	stw	r16,0(sp)
811096b8:	1887c83a 	sub	r3,r3,r2
811096bc:	2825883a 	mov	r18,r5
811096c0:	3027883a 	mov	r19,r6
811096c4:	1800141e 	bne	r3,zero,81109718 <__mdiff+0x84>
811096c8:	1085883a 	add	r2,r2,r2
811096cc:	1085883a 	add	r2,r2,r2
811096d0:	2a000504 	addi	r8,r5,20
811096d4:	34000504 	addi	r16,r6,20
811096d8:	4087883a 	add	r3,r8,r2
811096dc:	8085883a 	add	r2,r16,r2
811096e0:	00000106 	br	811096e8 <__mdiff+0x54>
811096e4:	40c0592e 	bgeu	r8,r3,8110984c <__mdiff+0x1b8>
811096e8:	18ffff04 	addi	r3,r3,-4
811096ec:	10bfff04 	addi	r2,r2,-4
811096f0:	19c00017 	ldw	r7,0(r3)
811096f4:	11400017 	ldw	r5,0(r2)
811096f8:	397ffa26 	beq	r7,r5,811096e4 <__reset+0xfb0e96e4>
811096fc:	3940592e 	bgeu	r7,r5,81109864 <__mdiff+0x1d0>
81109700:	9005883a 	mov	r2,r18
81109704:	4023883a 	mov	r17,r8
81109708:	9825883a 	mov	r18,r19
8110970c:	05000044 	movi	r20,1
81109710:	1027883a 	mov	r19,r2
81109714:	00000406 	br	81109728 <__mdiff+0x94>
81109718:	18005616 	blt	r3,zero,81109874 <__mdiff+0x1e0>
8110971c:	34400504 	addi	r17,r6,20
81109720:	2c000504 	addi	r16,r5,20
81109724:	0029883a 	mov	r20,zero
81109728:	91400117 	ldw	r5,4(r18)
8110972c:	1108d6c0 	call	81108d6c <_Balloc>
81109730:	92400417 	ldw	r9,16(r18)
81109734:	9b000417 	ldw	r12,16(r19)
81109738:	12c00504 	addi	r11,r2,20
8110973c:	4a51883a 	add	r8,r9,r9
81109740:	6319883a 	add	r12,r12,r12
81109744:	4211883a 	add	r8,r8,r8
81109748:	6319883a 	add	r12,r12,r12
8110974c:	15000315 	stw	r20,12(r2)
81109750:	8211883a 	add	r8,r16,r8
81109754:	8b19883a 	add	r12,r17,r12
81109758:	0007883a 	mov	r3,zero
8110975c:	81400017 	ldw	r5,0(r16)
81109760:	89c00017 	ldw	r7,0(r17)
81109764:	59800104 	addi	r6,r11,4
81109768:	293fffcc 	andi	r4,r5,65535
8110976c:	20c7883a 	add	r3,r4,r3
81109770:	393fffcc 	andi	r4,r7,65535
81109774:	1909c83a 	sub	r4,r3,r4
81109778:	280ad43a 	srli	r5,r5,16
8110977c:	380ed43a 	srli	r7,r7,16
81109780:	2007d43a 	srai	r3,r4,16
81109784:	213fffcc 	andi	r4,r4,65535
81109788:	29cbc83a 	sub	r5,r5,r7
8110978c:	28c7883a 	add	r3,r5,r3
81109790:	180a943a 	slli	r5,r3,16
81109794:	8c400104 	addi	r17,r17,4
81109798:	84000104 	addi	r16,r16,4
8110979c:	2908b03a 	or	r4,r5,r4
811097a0:	59000015 	stw	r4,0(r11)
811097a4:	1807d43a 	srai	r3,r3,16
811097a8:	3015883a 	mov	r10,r6
811097ac:	3017883a 	mov	r11,r6
811097b0:	8b3fea36 	bltu	r17,r12,8110975c <__reset+0xfb0e975c>
811097b4:	8200162e 	bgeu	r16,r8,81109810 <__mdiff+0x17c>
811097b8:	8017883a 	mov	r11,r16
811097bc:	59400017 	ldw	r5,0(r11)
811097c0:	31800104 	addi	r6,r6,4
811097c4:	5ac00104 	addi	r11,r11,4
811097c8:	293fffcc 	andi	r4,r5,65535
811097cc:	20c7883a 	add	r3,r4,r3
811097d0:	280ed43a 	srli	r7,r5,16
811097d4:	180bd43a 	srai	r5,r3,16
811097d8:	193fffcc 	andi	r4,r3,65535
811097dc:	3947883a 	add	r3,r7,r5
811097e0:	180a943a 	slli	r5,r3,16
811097e4:	1807d43a 	srai	r3,r3,16
811097e8:	2908b03a 	or	r4,r5,r4
811097ec:	313fff15 	stw	r4,-4(r6)
811097f0:	5a3ff236 	bltu	r11,r8,811097bc <__reset+0xfb0e97bc>
811097f4:	0406303a 	nor	r3,zero,r16
811097f8:	1a07883a 	add	r3,r3,r8
811097fc:	1806d0ba 	srli	r3,r3,2
81109800:	18c00044 	addi	r3,r3,1
81109804:	18c7883a 	add	r3,r3,r3
81109808:	18c7883a 	add	r3,r3,r3
8110980c:	50d5883a 	add	r10,r10,r3
81109810:	50ffff04 	addi	r3,r10,-4
81109814:	2000041e 	bne	r4,zero,81109828 <__mdiff+0x194>
81109818:	18ffff04 	addi	r3,r3,-4
8110981c:	19000017 	ldw	r4,0(r3)
81109820:	4a7fffc4 	addi	r9,r9,-1
81109824:	203ffc26 	beq	r4,zero,81109818 <__reset+0xfb0e9818>
81109828:	12400415 	stw	r9,16(r2)
8110982c:	dfc00517 	ldw	ra,20(sp)
81109830:	dd000417 	ldw	r20,16(sp)
81109834:	dcc00317 	ldw	r19,12(sp)
81109838:	dc800217 	ldw	r18,8(sp)
8110983c:	dc400117 	ldw	r17,4(sp)
81109840:	dc000017 	ldw	r16,0(sp)
81109844:	dec00604 	addi	sp,sp,24
81109848:	f800283a 	ret
8110984c:	000b883a 	mov	r5,zero
81109850:	1108d6c0 	call	81108d6c <_Balloc>
81109854:	00c00044 	movi	r3,1
81109858:	10c00415 	stw	r3,16(r2)
8110985c:	10000515 	stw	zero,20(r2)
81109860:	003ff206 	br	8110982c <__reset+0xfb0e982c>
81109864:	8023883a 	mov	r17,r16
81109868:	0029883a 	mov	r20,zero
8110986c:	4021883a 	mov	r16,r8
81109870:	003fad06 	br	81109728 <__reset+0xfb0e9728>
81109874:	9005883a 	mov	r2,r18
81109878:	94400504 	addi	r17,r18,20
8110987c:	9c000504 	addi	r16,r19,20
81109880:	9825883a 	mov	r18,r19
81109884:	05000044 	movi	r20,1
81109888:	1027883a 	mov	r19,r2
8110988c:	003fa606 	br	81109728 <__reset+0xfb0e9728>

81109890 <__ulp>:
81109890:	295ffc2c 	andhi	r5,r5,32752
81109894:	00bf3034 	movhi	r2,64704
81109898:	2887883a 	add	r3,r5,r2
8110989c:	00c0020e 	bge	zero,r3,811098a8 <__ulp+0x18>
811098a0:	0005883a 	mov	r2,zero
811098a4:	f800283a 	ret
811098a8:	00c7c83a 	sub	r3,zero,r3
811098ac:	1807d53a 	srai	r3,r3,20
811098b0:	008004c4 	movi	r2,19
811098b4:	10c00b0e 	bge	r2,r3,811098e4 <__ulp+0x54>
811098b8:	18bffb04 	addi	r2,r3,-20
811098bc:	01000784 	movi	r4,30
811098c0:	0007883a 	mov	r3,zero
811098c4:	20800516 	blt	r4,r2,811098dc <__ulp+0x4c>
811098c8:	010007c4 	movi	r4,31
811098cc:	2089c83a 	sub	r4,r4,r2
811098d0:	00800044 	movi	r2,1
811098d4:	1104983a 	sll	r2,r2,r4
811098d8:	f800283a 	ret
811098dc:	00800044 	movi	r2,1
811098e0:	f800283a 	ret
811098e4:	01400234 	movhi	r5,8
811098e8:	28c7d83a 	sra	r3,r5,r3
811098ec:	0005883a 	mov	r2,zero
811098f0:	f800283a 	ret

811098f4 <__b2d>:
811098f4:	defffa04 	addi	sp,sp,-24
811098f8:	dc000015 	stw	r16,0(sp)
811098fc:	24000417 	ldw	r16,16(r4)
81109900:	dc400115 	stw	r17,4(sp)
81109904:	24400504 	addi	r17,r4,20
81109908:	8421883a 	add	r16,r16,r16
8110990c:	8421883a 	add	r16,r16,r16
81109910:	8c21883a 	add	r16,r17,r16
81109914:	dc800215 	stw	r18,8(sp)
81109918:	84bfff17 	ldw	r18,-4(r16)
8110991c:	dd000415 	stw	r20,16(sp)
81109920:	dcc00315 	stw	r19,12(sp)
81109924:	9009883a 	mov	r4,r18
81109928:	2829883a 	mov	r20,r5
8110992c:	dfc00515 	stw	ra,20(sp)
81109930:	11090600 	call	81109060 <__hi0bits>
81109934:	00c00804 	movi	r3,32
81109938:	1889c83a 	sub	r4,r3,r2
8110993c:	a1000015 	stw	r4,0(r20)
81109940:	01000284 	movi	r4,10
81109944:	84ffff04 	addi	r19,r16,-4
81109948:	20801216 	blt	r4,r2,81109994 <__b2d+0xa0>
8110994c:	018002c4 	movi	r6,11
81109950:	308dc83a 	sub	r6,r6,r2
81109954:	9186d83a 	srl	r3,r18,r6
81109958:	18cffc34 	orhi	r3,r3,16368
8110995c:	8cc0212e 	bgeu	r17,r19,811099e4 <__b2d+0xf0>
81109960:	813ffe17 	ldw	r4,-8(r16)
81109964:	218cd83a 	srl	r6,r4,r6
81109968:	10800544 	addi	r2,r2,21
8110996c:	9084983a 	sll	r2,r18,r2
81109970:	1184b03a 	or	r2,r2,r6
81109974:	dfc00517 	ldw	ra,20(sp)
81109978:	dd000417 	ldw	r20,16(sp)
8110997c:	dcc00317 	ldw	r19,12(sp)
81109980:	dc800217 	ldw	r18,8(sp)
81109984:	dc400117 	ldw	r17,4(sp)
81109988:	dc000017 	ldw	r16,0(sp)
8110998c:	dec00604 	addi	sp,sp,24
81109990:	f800283a 	ret
81109994:	8cc00f2e 	bgeu	r17,r19,811099d4 <__b2d+0xe0>
81109998:	117ffd44 	addi	r5,r2,-11
8110999c:	80bffe17 	ldw	r2,-8(r16)
811099a0:	28000e26 	beq	r5,zero,811099dc <__b2d+0xe8>
811099a4:	1949c83a 	sub	r4,r3,r5
811099a8:	9164983a 	sll	r18,r18,r5
811099ac:	1106d83a 	srl	r3,r2,r4
811099b0:	81bffe04 	addi	r6,r16,-8
811099b4:	948ffc34 	orhi	r18,r18,16368
811099b8:	90c6b03a 	or	r3,r18,r3
811099bc:	89800e2e 	bgeu	r17,r6,811099f8 <__b2d+0x104>
811099c0:	81bffd17 	ldw	r6,-12(r16)
811099c4:	1144983a 	sll	r2,r2,r5
811099c8:	310ad83a 	srl	r5,r6,r4
811099cc:	2884b03a 	or	r2,r5,r2
811099d0:	003fe806 	br	81109974 <__reset+0xfb0e9974>
811099d4:	10bffd44 	addi	r2,r2,-11
811099d8:	1000041e 	bne	r2,zero,811099ec <__b2d+0xf8>
811099dc:	90cffc34 	orhi	r3,r18,16368
811099e0:	003fe406 	br	81109974 <__reset+0xfb0e9974>
811099e4:	000d883a 	mov	r6,zero
811099e8:	003fdf06 	br	81109968 <__reset+0xfb0e9968>
811099ec:	90a4983a 	sll	r18,r18,r2
811099f0:	0005883a 	mov	r2,zero
811099f4:	003ff906 	br	811099dc <__reset+0xfb0e99dc>
811099f8:	1144983a 	sll	r2,r2,r5
811099fc:	003fdd06 	br	81109974 <__reset+0xfb0e9974>

81109a00 <__d2b>:
81109a00:	defff804 	addi	sp,sp,-32
81109a04:	dc000215 	stw	r16,8(sp)
81109a08:	3021883a 	mov	r16,r6
81109a0c:	dc400315 	stw	r17,12(sp)
81109a10:	8022907a 	slli	r17,r16,1
81109a14:	dd000615 	stw	r20,24(sp)
81109a18:	2829883a 	mov	r20,r5
81109a1c:	01400044 	movi	r5,1
81109a20:	dcc00515 	stw	r19,20(sp)
81109a24:	dc800415 	stw	r18,16(sp)
81109a28:	dfc00715 	stw	ra,28(sp)
81109a2c:	3825883a 	mov	r18,r7
81109a30:	8822d57a 	srli	r17,r17,21
81109a34:	1108d6c0 	call	81108d6c <_Balloc>
81109a38:	1027883a 	mov	r19,r2
81109a3c:	00800434 	movhi	r2,16
81109a40:	10bfffc4 	addi	r2,r2,-1
81109a44:	808c703a 	and	r6,r16,r2
81109a48:	88000126 	beq	r17,zero,81109a50 <__d2b+0x50>
81109a4c:	31800434 	orhi	r6,r6,16
81109a50:	d9800015 	stw	r6,0(sp)
81109a54:	a0002426 	beq	r20,zero,81109ae8 <__d2b+0xe8>
81109a58:	d9000104 	addi	r4,sp,4
81109a5c:	dd000115 	stw	r20,4(sp)
81109a60:	11090c80 	call	811090c8 <__lo0bits>
81109a64:	d8c00017 	ldw	r3,0(sp)
81109a68:	10002f1e 	bne	r2,zero,81109b28 <__d2b+0x128>
81109a6c:	d9000117 	ldw	r4,4(sp)
81109a70:	99000515 	stw	r4,20(r19)
81109a74:	1821003a 	cmpeq	r16,r3,zero
81109a78:	01000084 	movi	r4,2
81109a7c:	2421c83a 	sub	r16,r4,r16
81109a80:	98c00615 	stw	r3,24(r19)
81109a84:	9c000415 	stw	r16,16(r19)
81109a88:	88001f1e 	bne	r17,zero,81109b08 <__d2b+0x108>
81109a8c:	10bef384 	addi	r2,r2,-1074
81109a90:	90800015 	stw	r2,0(r18)
81109a94:	00900034 	movhi	r2,16384
81109a98:	10bfffc4 	addi	r2,r2,-1
81109a9c:	8085883a 	add	r2,r16,r2
81109aa0:	1085883a 	add	r2,r2,r2
81109aa4:	1085883a 	add	r2,r2,r2
81109aa8:	9885883a 	add	r2,r19,r2
81109aac:	11000517 	ldw	r4,20(r2)
81109ab0:	8020917a 	slli	r16,r16,5
81109ab4:	11090600 	call	81109060 <__hi0bits>
81109ab8:	d8c00817 	ldw	r3,32(sp)
81109abc:	8085c83a 	sub	r2,r16,r2
81109ac0:	18800015 	stw	r2,0(r3)
81109ac4:	9805883a 	mov	r2,r19
81109ac8:	dfc00717 	ldw	ra,28(sp)
81109acc:	dd000617 	ldw	r20,24(sp)
81109ad0:	dcc00517 	ldw	r19,20(sp)
81109ad4:	dc800417 	ldw	r18,16(sp)
81109ad8:	dc400317 	ldw	r17,12(sp)
81109adc:	dc000217 	ldw	r16,8(sp)
81109ae0:	dec00804 	addi	sp,sp,32
81109ae4:	f800283a 	ret
81109ae8:	d809883a 	mov	r4,sp
81109aec:	11090c80 	call	811090c8 <__lo0bits>
81109af0:	d8c00017 	ldw	r3,0(sp)
81109af4:	04000044 	movi	r16,1
81109af8:	9c000415 	stw	r16,16(r19)
81109afc:	98c00515 	stw	r3,20(r19)
81109b00:	10800804 	addi	r2,r2,32
81109b04:	883fe126 	beq	r17,zero,81109a8c <__reset+0xfb0e9a8c>
81109b08:	00c00d44 	movi	r3,53
81109b0c:	8c7ef344 	addi	r17,r17,-1075
81109b10:	88a3883a 	add	r17,r17,r2
81109b14:	1885c83a 	sub	r2,r3,r2
81109b18:	d8c00817 	ldw	r3,32(sp)
81109b1c:	94400015 	stw	r17,0(r18)
81109b20:	18800015 	stw	r2,0(r3)
81109b24:	003fe706 	br	81109ac4 <__reset+0xfb0e9ac4>
81109b28:	01000804 	movi	r4,32
81109b2c:	2089c83a 	sub	r4,r4,r2
81109b30:	1908983a 	sll	r4,r3,r4
81109b34:	d9400117 	ldw	r5,4(sp)
81109b38:	1886d83a 	srl	r3,r3,r2
81109b3c:	2148b03a 	or	r4,r4,r5
81109b40:	99000515 	stw	r4,20(r19)
81109b44:	d8c00015 	stw	r3,0(sp)
81109b48:	003fca06 	br	81109a74 <__reset+0xfb0e9a74>

81109b4c <__ratio>:
81109b4c:	defff904 	addi	sp,sp,-28
81109b50:	dc400315 	stw	r17,12(sp)
81109b54:	2823883a 	mov	r17,r5
81109b58:	d9400104 	addi	r5,sp,4
81109b5c:	dfc00615 	stw	ra,24(sp)
81109b60:	dcc00515 	stw	r19,20(sp)
81109b64:	dc800415 	stw	r18,16(sp)
81109b68:	2027883a 	mov	r19,r4
81109b6c:	dc000215 	stw	r16,8(sp)
81109b70:	11098f40 	call	811098f4 <__b2d>
81109b74:	d80b883a 	mov	r5,sp
81109b78:	8809883a 	mov	r4,r17
81109b7c:	1025883a 	mov	r18,r2
81109b80:	1821883a 	mov	r16,r3
81109b84:	11098f40 	call	811098f4 <__b2d>
81109b88:	8a000417 	ldw	r8,16(r17)
81109b8c:	99000417 	ldw	r4,16(r19)
81109b90:	d9400117 	ldw	r5,4(sp)
81109b94:	2209c83a 	sub	r4,r4,r8
81109b98:	2010917a 	slli	r8,r4,5
81109b9c:	d9000017 	ldw	r4,0(sp)
81109ba0:	2909c83a 	sub	r4,r5,r4
81109ba4:	4109883a 	add	r4,r8,r4
81109ba8:	01000e0e 	bge	zero,r4,81109be4 <__ratio+0x98>
81109bac:	2008953a 	slli	r4,r4,20
81109bb0:	2421883a 	add	r16,r4,r16
81109bb4:	100d883a 	mov	r6,r2
81109bb8:	180f883a 	mov	r7,r3
81109bbc:	9009883a 	mov	r4,r18
81109bc0:	800b883a 	mov	r5,r16
81109bc4:	11141980 	call	81114198 <__divdf3>
81109bc8:	dfc00617 	ldw	ra,24(sp)
81109bcc:	dcc00517 	ldw	r19,20(sp)
81109bd0:	dc800417 	ldw	r18,16(sp)
81109bd4:	dc400317 	ldw	r17,12(sp)
81109bd8:	dc000217 	ldw	r16,8(sp)
81109bdc:	dec00704 	addi	sp,sp,28
81109be0:	f800283a 	ret
81109be4:	2008953a 	slli	r4,r4,20
81109be8:	1907c83a 	sub	r3,r3,r4
81109bec:	003ff106 	br	81109bb4 <__reset+0xfb0e9bb4>

81109bf0 <_mprec_log10>:
81109bf0:	defffe04 	addi	sp,sp,-8
81109bf4:	dc000015 	stw	r16,0(sp)
81109bf8:	dfc00115 	stw	ra,4(sp)
81109bfc:	008005c4 	movi	r2,23
81109c00:	2021883a 	mov	r16,r4
81109c04:	11000d0e 	bge	r2,r4,81109c3c <_mprec_log10+0x4c>
81109c08:	0005883a 	mov	r2,zero
81109c0c:	00cffc34 	movhi	r3,16368
81109c10:	843fffc4 	addi	r16,r16,-1
81109c14:	000d883a 	mov	r6,zero
81109c18:	01d00934 	movhi	r7,16420
81109c1c:	1009883a 	mov	r4,r2
81109c20:	180b883a 	mov	r5,r3
81109c24:	1114cd80 	call	81114cd8 <__muldf3>
81109c28:	803ff91e 	bne	r16,zero,81109c10 <__reset+0xfb0e9c10>
81109c2c:	dfc00117 	ldw	ra,4(sp)
81109c30:	dc000017 	ldw	r16,0(sp)
81109c34:	dec00204 	addi	sp,sp,8
81109c38:	f800283a 	ret
81109c3c:	202090fa 	slli	r16,r4,3
81109c40:	00a044b4 	movhi	r2,33042
81109c44:	1092a404 	addi	r2,r2,19088
81109c48:	1421883a 	add	r16,r2,r16
81109c4c:	80800017 	ldw	r2,0(r16)
81109c50:	80c00117 	ldw	r3,4(r16)
81109c54:	dfc00117 	ldw	ra,4(sp)
81109c58:	dc000017 	ldw	r16,0(sp)
81109c5c:	dec00204 	addi	sp,sp,8
81109c60:	f800283a 	ret

81109c64 <__copybits>:
81109c64:	297fffc4 	addi	r5,r5,-1
81109c68:	280fd17a 	srai	r7,r5,5
81109c6c:	30c00417 	ldw	r3,16(r6)
81109c70:	30800504 	addi	r2,r6,20
81109c74:	39c00044 	addi	r7,r7,1
81109c78:	18c7883a 	add	r3,r3,r3
81109c7c:	39cf883a 	add	r7,r7,r7
81109c80:	18c7883a 	add	r3,r3,r3
81109c84:	39cf883a 	add	r7,r7,r7
81109c88:	10c7883a 	add	r3,r2,r3
81109c8c:	21cf883a 	add	r7,r4,r7
81109c90:	10c00d2e 	bgeu	r2,r3,81109cc8 <__copybits+0x64>
81109c94:	200b883a 	mov	r5,r4
81109c98:	12000017 	ldw	r8,0(r2)
81109c9c:	29400104 	addi	r5,r5,4
81109ca0:	10800104 	addi	r2,r2,4
81109ca4:	2a3fff15 	stw	r8,-4(r5)
81109ca8:	10fffb36 	bltu	r2,r3,81109c98 <__reset+0xfb0e9c98>
81109cac:	1985c83a 	sub	r2,r3,r6
81109cb0:	10bffac4 	addi	r2,r2,-21
81109cb4:	1004d0ba 	srli	r2,r2,2
81109cb8:	10800044 	addi	r2,r2,1
81109cbc:	1085883a 	add	r2,r2,r2
81109cc0:	1085883a 	add	r2,r2,r2
81109cc4:	2089883a 	add	r4,r4,r2
81109cc8:	21c0032e 	bgeu	r4,r7,81109cd8 <__copybits+0x74>
81109ccc:	20000015 	stw	zero,0(r4)
81109cd0:	21000104 	addi	r4,r4,4
81109cd4:	21fffd36 	bltu	r4,r7,81109ccc <__reset+0xfb0e9ccc>
81109cd8:	f800283a 	ret

81109cdc <__any_on>:
81109cdc:	20c00417 	ldw	r3,16(r4)
81109ce0:	2805d17a 	srai	r2,r5,5
81109ce4:	21000504 	addi	r4,r4,20
81109ce8:	18800d0e 	bge	r3,r2,81109d20 <__any_on+0x44>
81109cec:	18c7883a 	add	r3,r3,r3
81109cf0:	18c7883a 	add	r3,r3,r3
81109cf4:	20c7883a 	add	r3,r4,r3
81109cf8:	20c0192e 	bgeu	r4,r3,81109d60 <__any_on+0x84>
81109cfc:	18bfff17 	ldw	r2,-4(r3)
81109d00:	18ffff04 	addi	r3,r3,-4
81109d04:	1000041e 	bne	r2,zero,81109d18 <__any_on+0x3c>
81109d08:	20c0142e 	bgeu	r4,r3,81109d5c <__any_on+0x80>
81109d0c:	18ffff04 	addi	r3,r3,-4
81109d10:	19400017 	ldw	r5,0(r3)
81109d14:	283ffc26 	beq	r5,zero,81109d08 <__reset+0xfb0e9d08>
81109d18:	00800044 	movi	r2,1
81109d1c:	f800283a 	ret
81109d20:	10c00a0e 	bge	r2,r3,81109d4c <__any_on+0x70>
81109d24:	1085883a 	add	r2,r2,r2
81109d28:	1085883a 	add	r2,r2,r2
81109d2c:	294007cc 	andi	r5,r5,31
81109d30:	2087883a 	add	r3,r4,r2
81109d34:	283ff026 	beq	r5,zero,81109cf8 <__reset+0xfb0e9cf8>
81109d38:	19800017 	ldw	r6,0(r3)
81109d3c:	3144d83a 	srl	r2,r6,r5
81109d40:	114a983a 	sll	r5,r2,r5
81109d44:	317ff41e 	bne	r6,r5,81109d18 <__reset+0xfb0e9d18>
81109d48:	003feb06 	br	81109cf8 <__reset+0xfb0e9cf8>
81109d4c:	1085883a 	add	r2,r2,r2
81109d50:	1085883a 	add	r2,r2,r2
81109d54:	2087883a 	add	r3,r4,r2
81109d58:	003fe706 	br	81109cf8 <__reset+0xfb0e9cf8>
81109d5c:	f800283a 	ret
81109d60:	0005883a 	mov	r2,zero
81109d64:	f800283a 	ret

81109d68 <_read_r>:
81109d68:	defffd04 	addi	sp,sp,-12
81109d6c:	2805883a 	mov	r2,r5
81109d70:	dc000015 	stw	r16,0(sp)
81109d74:	042044b4 	movhi	r16,33042
81109d78:	dc400115 	stw	r17,4(sp)
81109d7c:	300b883a 	mov	r5,r6
81109d80:	841bd104 	addi	r16,r16,28484
81109d84:	2023883a 	mov	r17,r4
81109d88:	380d883a 	mov	r6,r7
81109d8c:	1009883a 	mov	r4,r2
81109d90:	dfc00215 	stw	ra,8(sp)
81109d94:	80000015 	stw	zero,0(r16)
81109d98:	111685c0 	call	8111685c <read>
81109d9c:	00ffffc4 	movi	r3,-1
81109da0:	10c00526 	beq	r2,r3,81109db8 <_read_r+0x50>
81109da4:	dfc00217 	ldw	ra,8(sp)
81109da8:	dc400117 	ldw	r17,4(sp)
81109dac:	dc000017 	ldw	r16,0(sp)
81109db0:	dec00304 	addi	sp,sp,12
81109db4:	f800283a 	ret
81109db8:	80c00017 	ldw	r3,0(r16)
81109dbc:	183ff926 	beq	r3,zero,81109da4 <__reset+0xfb0e9da4>
81109dc0:	88c00015 	stw	r3,0(r17)
81109dc4:	003ff706 	br	81109da4 <__reset+0xfb0e9da4>

81109dc8 <_realloc_r>:
81109dc8:	defff604 	addi	sp,sp,-40
81109dcc:	dc800215 	stw	r18,8(sp)
81109dd0:	dfc00915 	stw	ra,36(sp)
81109dd4:	df000815 	stw	fp,32(sp)
81109dd8:	ddc00715 	stw	r23,28(sp)
81109ddc:	dd800615 	stw	r22,24(sp)
81109de0:	dd400515 	stw	r21,20(sp)
81109de4:	dd000415 	stw	r20,16(sp)
81109de8:	dcc00315 	stw	r19,12(sp)
81109dec:	dc400115 	stw	r17,4(sp)
81109df0:	dc000015 	stw	r16,0(sp)
81109df4:	3025883a 	mov	r18,r6
81109df8:	2800b726 	beq	r5,zero,8110a0d8 <_realloc_r+0x310>
81109dfc:	282b883a 	mov	r21,r5
81109e00:	2029883a 	mov	r20,r4
81109e04:	1116cc40 	call	81116cc4 <__malloc_lock>
81109e08:	a8bfff17 	ldw	r2,-4(r21)
81109e0c:	043fff04 	movi	r16,-4
81109e10:	90c002c4 	addi	r3,r18,11
81109e14:	01000584 	movi	r4,22
81109e18:	acfffe04 	addi	r19,r21,-8
81109e1c:	1420703a 	and	r16,r2,r16
81109e20:	20c0332e 	bgeu	r4,r3,81109ef0 <_realloc_r+0x128>
81109e24:	047ffe04 	movi	r17,-8
81109e28:	1c62703a 	and	r17,r3,r17
81109e2c:	8807883a 	mov	r3,r17
81109e30:	88005816 	blt	r17,zero,81109f94 <_realloc_r+0x1cc>
81109e34:	8c805736 	bltu	r17,r18,81109f94 <_realloc_r+0x1cc>
81109e38:	80c0300e 	bge	r16,r3,81109efc <_realloc_r+0x134>
81109e3c:	072044b4 	movhi	fp,33042
81109e40:	e7158604 	addi	fp,fp,22040
81109e44:	e1c00217 	ldw	r7,8(fp)
81109e48:	9c09883a 	add	r4,r19,r16
81109e4c:	22000117 	ldw	r8,4(r4)
81109e50:	21c06326 	beq	r4,r7,81109fe0 <_realloc_r+0x218>
81109e54:	017fff84 	movi	r5,-2
81109e58:	414a703a 	and	r5,r8,r5
81109e5c:	214b883a 	add	r5,r4,r5
81109e60:	29800117 	ldw	r6,4(r5)
81109e64:	3180004c 	andi	r6,r6,1
81109e68:	30003f26 	beq	r6,zero,81109f68 <_realloc_r+0x1a0>
81109e6c:	1080004c 	andi	r2,r2,1
81109e70:	10008326 	beq	r2,zero,8110a080 <_realloc_r+0x2b8>
81109e74:	900b883a 	mov	r5,r18
81109e78:	a009883a 	mov	r4,r20
81109e7c:	1100cf00 	call	81100cf0 <_malloc_r>
81109e80:	1025883a 	mov	r18,r2
81109e84:	10011e26 	beq	r2,zero,8110a300 <_realloc_r+0x538>
81109e88:	a93fff17 	ldw	r4,-4(r21)
81109e8c:	10fffe04 	addi	r3,r2,-8
81109e90:	00bfff84 	movi	r2,-2
81109e94:	2084703a 	and	r2,r4,r2
81109e98:	9885883a 	add	r2,r19,r2
81109e9c:	1880ee26 	beq	r3,r2,8110a258 <_realloc_r+0x490>
81109ea0:	81bfff04 	addi	r6,r16,-4
81109ea4:	00800904 	movi	r2,36
81109ea8:	1180b836 	bltu	r2,r6,8110a18c <_realloc_r+0x3c4>
81109eac:	00c004c4 	movi	r3,19
81109eb0:	19809636 	bltu	r3,r6,8110a10c <_realloc_r+0x344>
81109eb4:	9005883a 	mov	r2,r18
81109eb8:	a807883a 	mov	r3,r21
81109ebc:	19000017 	ldw	r4,0(r3)
81109ec0:	11000015 	stw	r4,0(r2)
81109ec4:	19000117 	ldw	r4,4(r3)
81109ec8:	11000115 	stw	r4,4(r2)
81109ecc:	18c00217 	ldw	r3,8(r3)
81109ed0:	10c00215 	stw	r3,8(r2)
81109ed4:	a80b883a 	mov	r5,r21
81109ed8:	a009883a 	mov	r4,r20
81109edc:	1107cac0 	call	81107cac <_free_r>
81109ee0:	a009883a 	mov	r4,r20
81109ee4:	1116de40 	call	81116de4 <__malloc_unlock>
81109ee8:	9005883a 	mov	r2,r18
81109eec:	00001206 	br	81109f38 <_realloc_r+0x170>
81109ef0:	00c00404 	movi	r3,16
81109ef4:	1823883a 	mov	r17,r3
81109ef8:	003fce06 	br	81109e34 <__reset+0xfb0e9e34>
81109efc:	a825883a 	mov	r18,r21
81109f00:	8445c83a 	sub	r2,r16,r17
81109f04:	00c003c4 	movi	r3,15
81109f08:	18802636 	bltu	r3,r2,81109fa4 <_realloc_r+0x1dc>
81109f0c:	99800117 	ldw	r6,4(r19)
81109f10:	9c07883a 	add	r3,r19,r16
81109f14:	3180004c 	andi	r6,r6,1
81109f18:	3420b03a 	or	r16,r6,r16
81109f1c:	9c000115 	stw	r16,4(r19)
81109f20:	18800117 	ldw	r2,4(r3)
81109f24:	10800054 	ori	r2,r2,1
81109f28:	18800115 	stw	r2,4(r3)
81109f2c:	a009883a 	mov	r4,r20
81109f30:	1116de40 	call	81116de4 <__malloc_unlock>
81109f34:	9005883a 	mov	r2,r18
81109f38:	dfc00917 	ldw	ra,36(sp)
81109f3c:	df000817 	ldw	fp,32(sp)
81109f40:	ddc00717 	ldw	r23,28(sp)
81109f44:	dd800617 	ldw	r22,24(sp)
81109f48:	dd400517 	ldw	r21,20(sp)
81109f4c:	dd000417 	ldw	r20,16(sp)
81109f50:	dcc00317 	ldw	r19,12(sp)
81109f54:	dc800217 	ldw	r18,8(sp)
81109f58:	dc400117 	ldw	r17,4(sp)
81109f5c:	dc000017 	ldw	r16,0(sp)
81109f60:	dec00a04 	addi	sp,sp,40
81109f64:	f800283a 	ret
81109f68:	017fff04 	movi	r5,-4
81109f6c:	414a703a 	and	r5,r8,r5
81109f70:	814d883a 	add	r6,r16,r5
81109f74:	30c01f16 	blt	r6,r3,81109ff4 <_realloc_r+0x22c>
81109f78:	20800317 	ldw	r2,12(r4)
81109f7c:	20c00217 	ldw	r3,8(r4)
81109f80:	a825883a 	mov	r18,r21
81109f84:	3021883a 	mov	r16,r6
81109f88:	18800315 	stw	r2,12(r3)
81109f8c:	10c00215 	stw	r3,8(r2)
81109f90:	003fdb06 	br	81109f00 <__reset+0xfb0e9f00>
81109f94:	00800304 	movi	r2,12
81109f98:	a0800015 	stw	r2,0(r20)
81109f9c:	0005883a 	mov	r2,zero
81109fa0:	003fe506 	br	81109f38 <__reset+0xfb0e9f38>
81109fa4:	98c00117 	ldw	r3,4(r19)
81109fa8:	9c4b883a 	add	r5,r19,r17
81109fac:	11000054 	ori	r4,r2,1
81109fb0:	18c0004c 	andi	r3,r3,1
81109fb4:	1c62b03a 	or	r17,r3,r17
81109fb8:	9c400115 	stw	r17,4(r19)
81109fbc:	29000115 	stw	r4,4(r5)
81109fc0:	2885883a 	add	r2,r5,r2
81109fc4:	10c00117 	ldw	r3,4(r2)
81109fc8:	29400204 	addi	r5,r5,8
81109fcc:	a009883a 	mov	r4,r20
81109fd0:	18c00054 	ori	r3,r3,1
81109fd4:	10c00115 	stw	r3,4(r2)
81109fd8:	1107cac0 	call	81107cac <_free_r>
81109fdc:	003fd306 	br	81109f2c <__reset+0xfb0e9f2c>
81109fe0:	017fff04 	movi	r5,-4
81109fe4:	414a703a 	and	r5,r8,r5
81109fe8:	89800404 	addi	r6,r17,16
81109fec:	8151883a 	add	r8,r16,r5
81109ff0:	4180590e 	bge	r8,r6,8110a158 <_realloc_r+0x390>
81109ff4:	1080004c 	andi	r2,r2,1
81109ff8:	103f9e1e 	bne	r2,zero,81109e74 <__reset+0xfb0e9e74>
81109ffc:	adbffe17 	ldw	r22,-8(r21)
8110a000:	00bfff04 	movi	r2,-4
8110a004:	9dadc83a 	sub	r22,r19,r22
8110a008:	b1800117 	ldw	r6,4(r22)
8110a00c:	3084703a 	and	r2,r6,r2
8110a010:	20002026 	beq	r4,zero,8110a094 <_realloc_r+0x2cc>
8110a014:	80af883a 	add	r23,r16,r2
8110a018:	b96f883a 	add	r23,r23,r5
8110a01c:	21c05f26 	beq	r4,r7,8110a19c <_realloc_r+0x3d4>
8110a020:	b8c01c16 	blt	r23,r3,8110a094 <_realloc_r+0x2cc>
8110a024:	20800317 	ldw	r2,12(r4)
8110a028:	20c00217 	ldw	r3,8(r4)
8110a02c:	81bfff04 	addi	r6,r16,-4
8110a030:	01000904 	movi	r4,36
8110a034:	18800315 	stw	r2,12(r3)
8110a038:	10c00215 	stw	r3,8(r2)
8110a03c:	b0c00217 	ldw	r3,8(r22)
8110a040:	b0800317 	ldw	r2,12(r22)
8110a044:	b4800204 	addi	r18,r22,8
8110a048:	18800315 	stw	r2,12(r3)
8110a04c:	10c00215 	stw	r3,8(r2)
8110a050:	21801b36 	bltu	r4,r6,8110a0c0 <_realloc_r+0x2f8>
8110a054:	008004c4 	movi	r2,19
8110a058:	1180352e 	bgeu	r2,r6,8110a130 <_realloc_r+0x368>
8110a05c:	a8800017 	ldw	r2,0(r21)
8110a060:	b0800215 	stw	r2,8(r22)
8110a064:	a8800117 	ldw	r2,4(r21)
8110a068:	b0800315 	stw	r2,12(r22)
8110a06c:	008006c4 	movi	r2,27
8110a070:	11807f36 	bltu	r2,r6,8110a270 <_realloc_r+0x4a8>
8110a074:	b0800404 	addi	r2,r22,16
8110a078:	ad400204 	addi	r21,r21,8
8110a07c:	00002d06 	br	8110a134 <_realloc_r+0x36c>
8110a080:	adbffe17 	ldw	r22,-8(r21)
8110a084:	00bfff04 	movi	r2,-4
8110a088:	9dadc83a 	sub	r22,r19,r22
8110a08c:	b1000117 	ldw	r4,4(r22)
8110a090:	2084703a 	and	r2,r4,r2
8110a094:	b03f7726 	beq	r22,zero,81109e74 <__reset+0xfb0e9e74>
8110a098:	80af883a 	add	r23,r16,r2
8110a09c:	b8ff7516 	blt	r23,r3,81109e74 <__reset+0xfb0e9e74>
8110a0a0:	b0800317 	ldw	r2,12(r22)
8110a0a4:	b0c00217 	ldw	r3,8(r22)
8110a0a8:	81bfff04 	addi	r6,r16,-4
8110a0ac:	01000904 	movi	r4,36
8110a0b0:	18800315 	stw	r2,12(r3)
8110a0b4:	10c00215 	stw	r3,8(r2)
8110a0b8:	b4800204 	addi	r18,r22,8
8110a0bc:	21bfe52e 	bgeu	r4,r6,8110a054 <__reset+0xfb0ea054>
8110a0c0:	a80b883a 	mov	r5,r21
8110a0c4:	9009883a 	mov	r4,r18
8110a0c8:	1108c100 	call	81108c10 <memmove>
8110a0cc:	b821883a 	mov	r16,r23
8110a0d0:	b027883a 	mov	r19,r22
8110a0d4:	003f8a06 	br	81109f00 <__reset+0xfb0e9f00>
8110a0d8:	300b883a 	mov	r5,r6
8110a0dc:	dfc00917 	ldw	ra,36(sp)
8110a0e0:	df000817 	ldw	fp,32(sp)
8110a0e4:	ddc00717 	ldw	r23,28(sp)
8110a0e8:	dd800617 	ldw	r22,24(sp)
8110a0ec:	dd400517 	ldw	r21,20(sp)
8110a0f0:	dd000417 	ldw	r20,16(sp)
8110a0f4:	dcc00317 	ldw	r19,12(sp)
8110a0f8:	dc800217 	ldw	r18,8(sp)
8110a0fc:	dc400117 	ldw	r17,4(sp)
8110a100:	dc000017 	ldw	r16,0(sp)
8110a104:	dec00a04 	addi	sp,sp,40
8110a108:	1100cf01 	jmpi	81100cf0 <_malloc_r>
8110a10c:	a8c00017 	ldw	r3,0(r21)
8110a110:	90c00015 	stw	r3,0(r18)
8110a114:	a8c00117 	ldw	r3,4(r21)
8110a118:	90c00115 	stw	r3,4(r18)
8110a11c:	00c006c4 	movi	r3,27
8110a120:	19804536 	bltu	r3,r6,8110a238 <_realloc_r+0x470>
8110a124:	90800204 	addi	r2,r18,8
8110a128:	a8c00204 	addi	r3,r21,8
8110a12c:	003f6306 	br	81109ebc <__reset+0xfb0e9ebc>
8110a130:	9005883a 	mov	r2,r18
8110a134:	a8c00017 	ldw	r3,0(r21)
8110a138:	b821883a 	mov	r16,r23
8110a13c:	b027883a 	mov	r19,r22
8110a140:	10c00015 	stw	r3,0(r2)
8110a144:	a8c00117 	ldw	r3,4(r21)
8110a148:	10c00115 	stw	r3,4(r2)
8110a14c:	a8c00217 	ldw	r3,8(r21)
8110a150:	10c00215 	stw	r3,8(r2)
8110a154:	003f6a06 	br	81109f00 <__reset+0xfb0e9f00>
8110a158:	9c67883a 	add	r19,r19,r17
8110a15c:	4445c83a 	sub	r2,r8,r17
8110a160:	e4c00215 	stw	r19,8(fp)
8110a164:	10800054 	ori	r2,r2,1
8110a168:	98800115 	stw	r2,4(r19)
8110a16c:	a8bfff17 	ldw	r2,-4(r21)
8110a170:	a009883a 	mov	r4,r20
8110a174:	1080004c 	andi	r2,r2,1
8110a178:	1462b03a 	or	r17,r2,r17
8110a17c:	ac7fff15 	stw	r17,-4(r21)
8110a180:	1116de40 	call	81116de4 <__malloc_unlock>
8110a184:	a805883a 	mov	r2,r21
8110a188:	003f6b06 	br	81109f38 <__reset+0xfb0e9f38>
8110a18c:	a80b883a 	mov	r5,r21
8110a190:	9009883a 	mov	r4,r18
8110a194:	1108c100 	call	81108c10 <memmove>
8110a198:	003f4e06 	br	81109ed4 <__reset+0xfb0e9ed4>
8110a19c:	89000404 	addi	r4,r17,16
8110a1a0:	b93fbc16 	blt	r23,r4,8110a094 <__reset+0xfb0ea094>
8110a1a4:	b0800317 	ldw	r2,12(r22)
8110a1a8:	b0c00217 	ldw	r3,8(r22)
8110a1ac:	81bfff04 	addi	r6,r16,-4
8110a1b0:	01000904 	movi	r4,36
8110a1b4:	18800315 	stw	r2,12(r3)
8110a1b8:	10c00215 	stw	r3,8(r2)
8110a1bc:	b4800204 	addi	r18,r22,8
8110a1c0:	21804336 	bltu	r4,r6,8110a2d0 <_realloc_r+0x508>
8110a1c4:	008004c4 	movi	r2,19
8110a1c8:	11803f2e 	bgeu	r2,r6,8110a2c8 <_realloc_r+0x500>
8110a1cc:	a8800017 	ldw	r2,0(r21)
8110a1d0:	b0800215 	stw	r2,8(r22)
8110a1d4:	a8800117 	ldw	r2,4(r21)
8110a1d8:	b0800315 	stw	r2,12(r22)
8110a1dc:	008006c4 	movi	r2,27
8110a1e0:	11803f36 	bltu	r2,r6,8110a2e0 <_realloc_r+0x518>
8110a1e4:	b0800404 	addi	r2,r22,16
8110a1e8:	ad400204 	addi	r21,r21,8
8110a1ec:	a8c00017 	ldw	r3,0(r21)
8110a1f0:	10c00015 	stw	r3,0(r2)
8110a1f4:	a8c00117 	ldw	r3,4(r21)
8110a1f8:	10c00115 	stw	r3,4(r2)
8110a1fc:	a8c00217 	ldw	r3,8(r21)
8110a200:	10c00215 	stw	r3,8(r2)
8110a204:	b447883a 	add	r3,r22,r17
8110a208:	bc45c83a 	sub	r2,r23,r17
8110a20c:	e0c00215 	stw	r3,8(fp)
8110a210:	10800054 	ori	r2,r2,1
8110a214:	18800115 	stw	r2,4(r3)
8110a218:	b0800117 	ldw	r2,4(r22)
8110a21c:	a009883a 	mov	r4,r20
8110a220:	1080004c 	andi	r2,r2,1
8110a224:	1462b03a 	or	r17,r2,r17
8110a228:	b4400115 	stw	r17,4(r22)
8110a22c:	1116de40 	call	81116de4 <__malloc_unlock>
8110a230:	9005883a 	mov	r2,r18
8110a234:	003f4006 	br	81109f38 <__reset+0xfb0e9f38>
8110a238:	a8c00217 	ldw	r3,8(r21)
8110a23c:	90c00215 	stw	r3,8(r18)
8110a240:	a8c00317 	ldw	r3,12(r21)
8110a244:	90c00315 	stw	r3,12(r18)
8110a248:	30801126 	beq	r6,r2,8110a290 <_realloc_r+0x4c8>
8110a24c:	90800404 	addi	r2,r18,16
8110a250:	a8c00404 	addi	r3,r21,16
8110a254:	003f1906 	br	81109ebc <__reset+0xfb0e9ebc>
8110a258:	90ffff17 	ldw	r3,-4(r18)
8110a25c:	00bfff04 	movi	r2,-4
8110a260:	a825883a 	mov	r18,r21
8110a264:	1884703a 	and	r2,r3,r2
8110a268:	80a1883a 	add	r16,r16,r2
8110a26c:	003f2406 	br	81109f00 <__reset+0xfb0e9f00>
8110a270:	a8800217 	ldw	r2,8(r21)
8110a274:	b0800415 	stw	r2,16(r22)
8110a278:	a8800317 	ldw	r2,12(r21)
8110a27c:	b0800515 	stw	r2,20(r22)
8110a280:	31000a26 	beq	r6,r4,8110a2ac <_realloc_r+0x4e4>
8110a284:	b0800604 	addi	r2,r22,24
8110a288:	ad400404 	addi	r21,r21,16
8110a28c:	003fa906 	br	8110a134 <__reset+0xfb0ea134>
8110a290:	a9000417 	ldw	r4,16(r21)
8110a294:	90800604 	addi	r2,r18,24
8110a298:	a8c00604 	addi	r3,r21,24
8110a29c:	91000415 	stw	r4,16(r18)
8110a2a0:	a9000517 	ldw	r4,20(r21)
8110a2a4:	91000515 	stw	r4,20(r18)
8110a2a8:	003f0406 	br	81109ebc <__reset+0xfb0e9ebc>
8110a2ac:	a8c00417 	ldw	r3,16(r21)
8110a2b0:	ad400604 	addi	r21,r21,24
8110a2b4:	b0800804 	addi	r2,r22,32
8110a2b8:	b0c00615 	stw	r3,24(r22)
8110a2bc:	a8ffff17 	ldw	r3,-4(r21)
8110a2c0:	b0c00715 	stw	r3,28(r22)
8110a2c4:	003f9b06 	br	8110a134 <__reset+0xfb0ea134>
8110a2c8:	9005883a 	mov	r2,r18
8110a2cc:	003fc706 	br	8110a1ec <__reset+0xfb0ea1ec>
8110a2d0:	a80b883a 	mov	r5,r21
8110a2d4:	9009883a 	mov	r4,r18
8110a2d8:	1108c100 	call	81108c10 <memmove>
8110a2dc:	003fc906 	br	8110a204 <__reset+0xfb0ea204>
8110a2e0:	a8800217 	ldw	r2,8(r21)
8110a2e4:	b0800415 	stw	r2,16(r22)
8110a2e8:	a8800317 	ldw	r2,12(r21)
8110a2ec:	b0800515 	stw	r2,20(r22)
8110a2f0:	31000726 	beq	r6,r4,8110a310 <_realloc_r+0x548>
8110a2f4:	b0800604 	addi	r2,r22,24
8110a2f8:	ad400404 	addi	r21,r21,16
8110a2fc:	003fbb06 	br	8110a1ec <__reset+0xfb0ea1ec>
8110a300:	a009883a 	mov	r4,r20
8110a304:	1116de40 	call	81116de4 <__malloc_unlock>
8110a308:	0005883a 	mov	r2,zero
8110a30c:	003f0a06 	br	81109f38 <__reset+0xfb0e9f38>
8110a310:	a8c00417 	ldw	r3,16(r21)
8110a314:	ad400604 	addi	r21,r21,24
8110a318:	b0800804 	addi	r2,r22,32
8110a31c:	b0c00615 	stw	r3,24(r22)
8110a320:	a8ffff17 	ldw	r3,-4(r21)
8110a324:	b0c00715 	stw	r3,28(r22)
8110a328:	003fb006 	br	8110a1ec <__reset+0xfb0ea1ec>

8110a32c <__fpclassifyd>:
8110a32c:	00a00034 	movhi	r2,32768
8110a330:	10bfffc4 	addi	r2,r2,-1
8110a334:	2884703a 	and	r2,r5,r2
8110a338:	10000726 	beq	r2,zero,8110a358 <__fpclassifyd+0x2c>
8110a33c:	00fffc34 	movhi	r3,65520
8110a340:	019ff834 	movhi	r6,32736
8110a344:	28c7883a 	add	r3,r5,r3
8110a348:	31bfffc4 	addi	r6,r6,-1
8110a34c:	30c00536 	bltu	r6,r3,8110a364 <__fpclassifyd+0x38>
8110a350:	00800104 	movi	r2,4
8110a354:	f800283a 	ret
8110a358:	2000021e 	bne	r4,zero,8110a364 <__fpclassifyd+0x38>
8110a35c:	00800084 	movi	r2,2
8110a360:	f800283a 	ret
8110a364:	00dffc34 	movhi	r3,32752
8110a368:	019ff834 	movhi	r6,32736
8110a36c:	28cb883a 	add	r5,r5,r3
8110a370:	31bfffc4 	addi	r6,r6,-1
8110a374:	317ff62e 	bgeu	r6,r5,8110a350 <__reset+0xfb0ea350>
8110a378:	01400434 	movhi	r5,16
8110a37c:	297fffc4 	addi	r5,r5,-1
8110a380:	28800236 	bltu	r5,r2,8110a38c <__fpclassifyd+0x60>
8110a384:	008000c4 	movi	r2,3
8110a388:	f800283a 	ret
8110a38c:	10c00226 	beq	r2,r3,8110a398 <__fpclassifyd+0x6c>
8110a390:	0005883a 	mov	r2,zero
8110a394:	f800283a 	ret
8110a398:	2005003a 	cmpeq	r2,r4,zero
8110a39c:	f800283a 	ret

8110a3a0 <__sccl>:
8110a3a0:	2a000003 	ldbu	r8,0(r5)
8110a3a4:	00801784 	movi	r2,94
8110a3a8:	40802a26 	beq	r8,r2,8110a454 <__sccl+0xb4>
8110a3ac:	29400044 	addi	r5,r5,1
8110a3b0:	000f883a 	mov	r7,zero
8110a3b4:	0013883a 	mov	r9,zero
8110a3b8:	2007883a 	mov	r3,r4
8110a3bc:	21804004 	addi	r6,r4,256
8110a3c0:	19c00005 	stb	r7,0(r3)
8110a3c4:	18c00044 	addi	r3,r3,1
8110a3c8:	19bffd1e 	bne	r3,r6,8110a3c0 <__reset+0xfb0ea3c0>
8110a3cc:	40001126 	beq	r8,zero,8110a414 <__sccl+0x74>
8110a3d0:	00800044 	movi	r2,1
8110a3d4:	124fc83a 	sub	r7,r2,r9
8110a3d8:	02800b44 	movi	r10,45
8110a3dc:	02c01744 	movi	r11,93
8110a3e0:	2205883a 	add	r2,r4,r8
8110a3e4:	11c00005 	stb	r7,0(r2)
8110a3e8:	28800044 	addi	r2,r5,1
8110a3ec:	28c00003 	ldbu	r3,0(r5)
8110a3f0:	1a800a26 	beq	r3,r10,8110a41c <__sccl+0x7c>
8110a3f4:	1ac00426 	beq	r3,r11,8110a408 <__sccl+0x68>
8110a3f8:	18000426 	beq	r3,zero,8110a40c <__sccl+0x6c>
8110a3fc:	1811883a 	mov	r8,r3
8110a400:	100b883a 	mov	r5,r2
8110a404:	003ff606 	br	8110a3e0 <__reset+0xfb0ea3e0>
8110a408:	f800283a 	ret
8110a40c:	2805883a 	mov	r2,r5
8110a410:	f800283a 	ret
8110a414:	28bfffc4 	addi	r2,r5,-1
8110a418:	f800283a 	ret
8110a41c:	12400003 	ldbu	r9,0(r2)
8110a420:	4ac01126 	beq	r9,r11,8110a468 <__sccl+0xc8>
8110a424:	4a001016 	blt	r9,r8,8110a468 <__sccl+0xc8>
8110a428:	41800044 	addi	r6,r8,1
8110a42c:	29400084 	addi	r5,r5,2
8110a430:	2187883a 	add	r3,r4,r6
8110a434:	00000106 	br	8110a43c <__sccl+0x9c>
8110a438:	31800044 	addi	r6,r6,1
8110a43c:	19c00005 	stb	r7,0(r3)
8110a440:	3011883a 	mov	r8,r6
8110a444:	18c00044 	addi	r3,r3,1
8110a448:	327ffb16 	blt	r6,r9,8110a438 <__reset+0xfb0ea438>
8110a44c:	10800084 	addi	r2,r2,2
8110a450:	003fe606 	br	8110a3ec <__reset+0xfb0ea3ec>
8110a454:	2a000043 	ldbu	r8,1(r5)
8110a458:	01c00044 	movi	r7,1
8110a45c:	29400084 	addi	r5,r5,2
8110a460:	02400044 	movi	r9,1
8110a464:	003fd406 	br	8110a3b8 <__reset+0xfb0ea3b8>
8110a468:	5011883a 	mov	r8,r10
8110a46c:	003fe406 	br	8110a400 <__reset+0xfb0ea400>

8110a470 <nanf>:
8110a470:	009ff034 	movhi	r2,32704
8110a474:	f800283a 	ret

8110a478 <_sprintf_r>:
8110a478:	deffe404 	addi	sp,sp,-112
8110a47c:	2807883a 	mov	r3,r5
8110a480:	dfc01a15 	stw	ra,104(sp)
8110a484:	d9c01b15 	stw	r7,108(sp)
8110a488:	00a00034 	movhi	r2,32768
8110a48c:	10bfffc4 	addi	r2,r2,-1
8110a490:	02008204 	movi	r8,520
8110a494:	d8800215 	stw	r2,8(sp)
8110a498:	d8800515 	stw	r2,20(sp)
8110a49c:	d9c01b04 	addi	r7,sp,108
8110a4a0:	d80b883a 	mov	r5,sp
8110a4a4:	00bfffc4 	movi	r2,-1
8110a4a8:	d8c00015 	stw	r3,0(sp)
8110a4ac:	d8c00415 	stw	r3,16(sp)
8110a4b0:	da00030d 	sth	r8,12(sp)
8110a4b4:	d880038d 	sth	r2,14(sp)
8110a4b8:	110c8000 	call	8110c800 <___svfprintf_internal_r>
8110a4bc:	d8c00017 	ldw	r3,0(sp)
8110a4c0:	18000005 	stb	zero,0(r3)
8110a4c4:	dfc01a17 	ldw	ra,104(sp)
8110a4c8:	dec01c04 	addi	sp,sp,112
8110a4cc:	f800283a 	ret

8110a4d0 <sprintf>:
8110a4d0:	deffe304 	addi	sp,sp,-116
8110a4d4:	2007883a 	mov	r3,r4
8110a4d8:	dfc01a15 	stw	ra,104(sp)
8110a4dc:	d9801b15 	stw	r6,108(sp)
8110a4e0:	d9c01c15 	stw	r7,112(sp)
8110a4e4:	012044b4 	movhi	r4,33042
8110a4e8:	211b9c04 	addi	r4,r4,28272
8110a4ec:	21000017 	ldw	r4,0(r4)
8110a4f0:	00a00034 	movhi	r2,32768
8110a4f4:	10bfffc4 	addi	r2,r2,-1
8110a4f8:	280d883a 	mov	r6,r5
8110a4fc:	02008204 	movi	r8,520
8110a500:	d8800215 	stw	r2,8(sp)
8110a504:	d8800515 	stw	r2,20(sp)
8110a508:	d9c01b04 	addi	r7,sp,108
8110a50c:	d80b883a 	mov	r5,sp
8110a510:	00bfffc4 	movi	r2,-1
8110a514:	d8c00015 	stw	r3,0(sp)
8110a518:	d8c00415 	stw	r3,16(sp)
8110a51c:	da00030d 	sth	r8,12(sp)
8110a520:	d880038d 	sth	r2,14(sp)
8110a524:	110c8000 	call	8110c800 <___svfprintf_internal_r>
8110a528:	d8c00017 	ldw	r3,0(sp)
8110a52c:	18000005 	stb	zero,0(r3)
8110a530:	dfc01a17 	ldw	ra,104(sp)
8110a534:	dec01d04 	addi	sp,sp,116
8110a538:	f800283a 	ret

8110a53c <strcmp>:
8110a53c:	2144b03a 	or	r2,r4,r5
8110a540:	108000cc 	andi	r2,r2,3
8110a544:	1000171e 	bne	r2,zero,8110a5a4 <strcmp+0x68>
8110a548:	20800017 	ldw	r2,0(r4)
8110a54c:	28c00017 	ldw	r3,0(r5)
8110a550:	10c0141e 	bne	r2,r3,8110a5a4 <strcmp+0x68>
8110a554:	027fbff4 	movhi	r9,65279
8110a558:	4a7fbfc4 	addi	r9,r9,-257
8110a55c:	0086303a 	nor	r3,zero,r2
8110a560:	02202074 	movhi	r8,32897
8110a564:	1245883a 	add	r2,r2,r9
8110a568:	42202004 	addi	r8,r8,-32640
8110a56c:	10c4703a 	and	r2,r2,r3
8110a570:	1204703a 	and	r2,r2,r8
8110a574:	10000226 	beq	r2,zero,8110a580 <strcmp+0x44>
8110a578:	00002306 	br	8110a608 <strcmp+0xcc>
8110a57c:	1000221e 	bne	r2,zero,8110a608 <strcmp+0xcc>
8110a580:	21000104 	addi	r4,r4,4
8110a584:	20c00017 	ldw	r3,0(r4)
8110a588:	29400104 	addi	r5,r5,4
8110a58c:	29800017 	ldw	r6,0(r5)
8110a590:	1a4f883a 	add	r7,r3,r9
8110a594:	00c4303a 	nor	r2,zero,r3
8110a598:	3884703a 	and	r2,r7,r2
8110a59c:	1204703a 	and	r2,r2,r8
8110a5a0:	19bff626 	beq	r3,r6,8110a57c <__reset+0xfb0ea57c>
8110a5a4:	20800003 	ldbu	r2,0(r4)
8110a5a8:	10c03fcc 	andi	r3,r2,255
8110a5ac:	18c0201c 	xori	r3,r3,128
8110a5b0:	18ffe004 	addi	r3,r3,-128
8110a5b4:	18000c26 	beq	r3,zero,8110a5e8 <strcmp+0xac>
8110a5b8:	29800007 	ldb	r6,0(r5)
8110a5bc:	19800326 	beq	r3,r6,8110a5cc <strcmp+0x90>
8110a5c0:	00001306 	br	8110a610 <strcmp+0xd4>
8110a5c4:	29800007 	ldb	r6,0(r5)
8110a5c8:	11800b1e 	bne	r2,r6,8110a5f8 <strcmp+0xbc>
8110a5cc:	21000044 	addi	r4,r4,1
8110a5d0:	20c00003 	ldbu	r3,0(r4)
8110a5d4:	29400044 	addi	r5,r5,1
8110a5d8:	18803fcc 	andi	r2,r3,255
8110a5dc:	1080201c 	xori	r2,r2,128
8110a5e0:	10bfe004 	addi	r2,r2,-128
8110a5e4:	103ff71e 	bne	r2,zero,8110a5c4 <__reset+0xfb0ea5c4>
8110a5e8:	0007883a 	mov	r3,zero
8110a5ec:	28800003 	ldbu	r2,0(r5)
8110a5f0:	1885c83a 	sub	r2,r3,r2
8110a5f4:	f800283a 	ret
8110a5f8:	28800003 	ldbu	r2,0(r5)
8110a5fc:	18c03fcc 	andi	r3,r3,255
8110a600:	1885c83a 	sub	r2,r3,r2
8110a604:	f800283a 	ret
8110a608:	0005883a 	mov	r2,zero
8110a60c:	f800283a 	ret
8110a610:	10c03fcc 	andi	r3,r2,255
8110a614:	003ff506 	br	8110a5ec <__reset+0xfb0ea5ec>

8110a618 <sulp>:
8110a618:	defffd04 	addi	sp,sp,-12
8110a61c:	dc400115 	stw	r17,4(sp)
8110a620:	3023883a 	mov	r17,r6
8110a624:	dc000015 	stw	r16,0(sp)
8110a628:	dfc00215 	stw	ra,8(sp)
8110a62c:	2821883a 	mov	r16,r5
8110a630:	11098900 	call	81109890 <__ulp>
8110a634:	88000c26 	beq	r17,zero,8110a668 <sulp+0x50>
8110a638:	841ffc2c 	andhi	r16,r16,32752
8110a63c:	8020d53a 	srli	r16,r16,20
8110a640:	01c01ac4 	movi	r7,107
8110a644:	3c21c83a 	sub	r16,r7,r16
8110a648:	0400070e 	bge	zero,r16,8110a668 <sulp+0x50>
8110a64c:	8020953a 	slli	r16,r16,20
8110a650:	01cffc34 	movhi	r7,16368
8110a654:	000d883a 	mov	r6,zero
8110a658:	81cf883a 	add	r7,r16,r7
8110a65c:	1009883a 	mov	r4,r2
8110a660:	180b883a 	mov	r5,r3
8110a664:	1114cd80 	call	81114cd8 <__muldf3>
8110a668:	dfc00217 	ldw	ra,8(sp)
8110a66c:	dc400117 	ldw	r17,4(sp)
8110a670:	dc000017 	ldw	r16,0(sp)
8110a674:	dec00304 	addi	sp,sp,12
8110a678:	f800283a 	ret

8110a67c <_strtod_r>:
8110a67c:	deffe204 	addi	sp,sp,-120
8110a680:	ddc01b15 	stw	r23,108(sp)
8110a684:	dd001815 	stw	r20,96(sp)
8110a688:	dc801615 	stw	r18,88(sp)
8110a68c:	dc401515 	stw	r17,84(sp)
8110a690:	dc001415 	stw	r16,80(sp)
8110a694:	d9400615 	stw	r5,24(sp)
8110a698:	dfc01d15 	stw	ra,116(sp)
8110a69c:	df001c15 	stw	fp,112(sp)
8110a6a0:	dd801a15 	stw	r22,104(sp)
8110a6a4:	dd401915 	stw	r21,100(sp)
8110a6a8:	dcc01715 	stw	r19,92(sp)
8110a6ac:	2021883a 	mov	r16,r4
8110a6b0:	d8000515 	stw	zero,20(sp)
8110a6b4:	2809883a 	mov	r4,r5
8110a6b8:	20800003 	ldbu	r2,0(r4)
8110a6bc:	01e04474 	movhi	r7,33041
8110a6c0:	282f883a 	mov	r23,r5
8110a6c4:	10c03fcc 	andi	r3,r2,255
8110a6c8:	01400b44 	movi	r5,45
8110a6cc:	39e9bc04 	addi	r7,r7,-22800
8110a6d0:	3029883a 	mov	r20,r6
8110a6d4:	0025883a 	mov	r18,zero
8110a6d8:	0023883a 	mov	r17,zero
8110a6dc:	28c0ba36 	bltu	r5,r3,8110a9c8 <_strtod_r+0x34c>
8110a6e0:	180690ba 	slli	r3,r3,2
8110a6e4:	19c7883a 	add	r3,r3,r7
8110a6e8:	18c00017 	ldw	r3,0(r3)
8110a6ec:	1800683a 	jmp	r3
8110a6f0:	8110a7b0 	cmpltui	r4,r16,17054
8110a6f4:	8110a9c8 	cmpgei	r4,r16,17063
8110a6f8:	8110a9c8 	cmpgei	r4,r16,17063
8110a6fc:	8110a9c8 	cmpgei	r4,r16,17063
8110a700:	8110a9c8 	cmpgei	r4,r16,17063
8110a704:	8110a9c8 	cmpgei	r4,r16,17063
8110a708:	8110a9c8 	cmpgei	r4,r16,17063
8110a70c:	8110a9c8 	cmpgei	r4,r16,17063
8110a710:	8110a9c8 	cmpgei	r4,r16,17063
8110a714:	8110a9b4 	orhi	r4,r16,17062
8110a718:	8110a9b4 	orhi	r4,r16,17062
8110a71c:	8110a9b4 	orhi	r4,r16,17062
8110a720:	8110a9b4 	orhi	r4,r16,17062
8110a724:	8110a9b4 	orhi	r4,r16,17062
8110a728:	8110a9c8 	cmpgei	r4,r16,17063
8110a72c:	8110a9c8 	cmpgei	r4,r16,17063
8110a730:	8110a9c8 	cmpgei	r4,r16,17063
8110a734:	8110a9c8 	cmpgei	r4,r16,17063
8110a738:	8110a9c8 	cmpgei	r4,r16,17063
8110a73c:	8110a9c8 	cmpgei	r4,r16,17063
8110a740:	8110a9c8 	cmpgei	r4,r16,17063
8110a744:	8110a9c8 	cmpgei	r4,r16,17063
8110a748:	8110a9c8 	cmpgei	r4,r16,17063
8110a74c:	8110a9c8 	cmpgei	r4,r16,17063
8110a750:	8110a9c8 	cmpgei	r4,r16,17063
8110a754:	8110a9c8 	cmpgei	r4,r16,17063
8110a758:	8110a9c8 	cmpgei	r4,r16,17063
8110a75c:	8110a9c8 	cmpgei	r4,r16,17063
8110a760:	8110a9c8 	cmpgei	r4,r16,17063
8110a764:	8110a9c8 	cmpgei	r4,r16,17063
8110a768:	8110a9c8 	cmpgei	r4,r16,17063
8110a76c:	8110a9c8 	cmpgei	r4,r16,17063
8110a770:	8110a9b4 	orhi	r4,r16,17062
8110a774:	8110a9c8 	cmpgei	r4,r16,17063
8110a778:	8110a9c8 	cmpgei	r4,r16,17063
8110a77c:	8110a9c8 	cmpgei	r4,r16,17063
8110a780:	8110a9c8 	cmpgei	r4,r16,17063
8110a784:	8110a9c8 	cmpgei	r4,r16,17063
8110a788:	8110a9c8 	cmpgei	r4,r16,17063
8110a78c:	8110a9c8 	cmpgei	r4,r16,17063
8110a790:	8110a9c8 	cmpgei	r4,r16,17063
8110a794:	8110a9c8 	cmpgei	r4,r16,17063
8110a798:	8110a9c8 	cmpgei	r4,r16,17063
8110a79c:	8110a808 	cmpgei	r4,r16,17056
8110a7a0:	8110a9c8 	cmpgei	r4,r16,17063
8110a7a4:	8110a9a8 	cmpgeui	r4,r16,17062
8110a7a8:	00801244 	movi	r2,73
8110a7ac:	88843526 	beq	r17,r2,8110b884 <_strtod_r+0x1208>
8110a7b0:	002b883a 	mov	r21,zero
8110a7b4:	002d883a 	mov	r22,zero
8110a7b8:	a0000526 	beq	r20,zero,8110a7d0 <_strtod_r+0x154>
8110a7bc:	d8000715 	stw	zero,28(sp)
8110a7c0:	a5c00015 	stw	r23,0(r20)
8110a7c4:	d9000717 	ldw	r4,28(sp)
8110a7c8:	20000126 	beq	r4,zero,8110a7d0 <_strtod_r+0x154>
8110a7cc:	b5a0003c 	xorhi	r22,r22,32768
8110a7d0:	a805883a 	mov	r2,r21
8110a7d4:	b007883a 	mov	r3,r22
8110a7d8:	dfc01d17 	ldw	ra,116(sp)
8110a7dc:	df001c17 	ldw	fp,112(sp)
8110a7e0:	ddc01b17 	ldw	r23,108(sp)
8110a7e4:	dd801a17 	ldw	r22,104(sp)
8110a7e8:	dd401917 	ldw	r21,100(sp)
8110a7ec:	dd001817 	ldw	r20,96(sp)
8110a7f0:	dcc01717 	ldw	r19,92(sp)
8110a7f4:	dc801617 	ldw	r18,88(sp)
8110a7f8:	dc401517 	ldw	r17,84(sp)
8110a7fc:	dc001417 	ldw	r16,80(sp)
8110a800:	dec01e04 	addi	sp,sp,120
8110a804:	f800283a 	ret
8110a808:	d8000715 	stw	zero,28(sp)
8110a80c:	24c00044 	addi	r19,r4,1
8110a810:	dcc00615 	stw	r19,24(sp)
8110a814:	20800043 	ldbu	r2,1(r4)
8110a818:	10c03fcc 	andi	r3,r2,255
8110a81c:	18c0201c 	xori	r3,r3,128
8110a820:	18ffe004 	addi	r3,r3,-128
8110a824:	183fe226 	beq	r3,zero,8110a7b0 <__reset+0xfb0ea7b0>
8110a828:	11403fcc 	andi	r5,r2,255
8110a82c:	2940201c 	xori	r5,r5,128
8110a830:	297fe004 	addi	r5,r5,-128
8110a834:	00c00c04 	movi	r3,48
8110a838:	28c0e526 	beq	r5,r3,8110abd0 <_strtod_r+0x554>
8110a83c:	dcc00815 	stw	r19,32(sp)
8110a840:	0025883a 	mov	r18,zero
8110a844:	10fff404 	addi	r3,r2,-48
8110a848:	18c03fcc 	andi	r3,r3,255
8110a84c:	01000244 	movi	r4,9
8110a850:	20c37536 	bltu	r4,r3,8110b628 <_strtod_r+0xfac>
8110a854:	dd400817 	ldw	r21,32(sp)
8110a858:	0027883a 	mov	r19,zero
8110a85c:	0039883a 	mov	fp,zero
8110a860:	002d883a 	mov	r22,zero
8110a864:	01400204 	movi	r5,8
8110a868:	2d805a16 	blt	r5,r22,8110a9d4 <_strtod_r+0x358>
8110a86c:	e70002a4 	muli	fp,fp,10
8110a870:	10c03fcc 	andi	r3,r2,255
8110a874:	18c0201c 	xori	r3,r3,128
8110a878:	18ffe004 	addi	r3,r3,-128
8110a87c:	e0f9883a 	add	fp,fp,r3
8110a880:	e73ff404 	addi	fp,fp,-48
8110a884:	ad400044 	addi	r21,r21,1
8110a888:	dd400615 	stw	r21,24(sp)
8110a88c:	a8800003 	ldbu	r2,0(r21)
8110a890:	b5800044 	addi	r22,r22,1
8110a894:	10fff404 	addi	r3,r2,-48
8110a898:	18c03fcc 	andi	r3,r3,255
8110a89c:	20fff22e 	bgeu	r4,r3,8110a868 <__reset+0xfb0ea868>
8110a8a0:	14403fcc 	andi	r17,r2,255
8110a8a4:	8c40201c 	xori	r17,r17,128
8110a8a8:	8c7fe004 	addi	r17,r17,-128
8110a8ac:	8009883a 	mov	r4,r16
8110a8b0:	11087300 	call	81108730 <_localeconv_r>
8110a8b4:	11400017 	ldw	r5,0(r2)
8110a8b8:	8009883a 	mov	r4,r16
8110a8bc:	d9401315 	stw	r5,76(sp)
8110a8c0:	11087300 	call	81108730 <_localeconv_r>
8110a8c4:	11000017 	ldw	r4,0(r2)
8110a8c8:	1101bb00 	call	81101bb0 <strlen>
8110a8cc:	d9401317 	ldw	r5,76(sp)
8110a8d0:	100d883a 	mov	r6,r2
8110a8d4:	a809883a 	mov	r4,r21
8110a8d8:	11111fc0 	call	811111fc <strncmp>
8110a8dc:	1000ce26 	beq	r2,zero,8110ac18 <_strtod_r+0x59c>
8110a8e0:	b013883a 	mov	r9,r22
8110a8e4:	000b883a 	mov	r5,zero
8110a8e8:	0015883a 	mov	r10,zero
8110a8ec:	0017883a 	mov	r11,zero
8110a8f0:	00801944 	movi	r2,101
8110a8f4:	88807826 	beq	r17,r2,8110aad8 <_strtod_r+0x45c>
8110a8f8:	00801144 	movi	r2,69
8110a8fc:	88807626 	beq	r17,r2,8110aad8 <_strtod_r+0x45c>
8110a900:	002b883a 	mov	r21,zero
8110a904:	48003d1e 	bne	r9,zero,8110a9fc <_strtod_r+0x380>
8110a908:	2800391e 	bne	r5,zero,8110a9f0 <_strtod_r+0x374>
8110a90c:	9000381e 	bne	r18,zero,8110a9f0 <_strtod_r+0x374>
8110a910:	583fa71e 	bne	r11,zero,8110a7b0 <__reset+0xfb0ea7b0>
8110a914:	00801384 	movi	r2,78
8110a918:	88800526 	beq	r17,r2,8110a930 <_strtod_r+0x2b4>
8110a91c:	147fa20e 	bge	r2,r17,8110a7a8 <__reset+0xfb0ea7a8>
8110a920:	00801a44 	movi	r2,105
8110a924:	8883d726 	beq	r17,r2,8110b884 <_strtod_r+0x1208>
8110a928:	00801b84 	movi	r2,110
8110a92c:	88bfa01e 	bne	r17,r2,8110a7b0 <__reset+0xfb0ea7b0>
8110a930:	016044b4 	movhi	r5,33042
8110a934:	d9000617 	ldw	r4,24(sp)
8110a938:	2952d904 	addi	r5,r5,19300
8110a93c:	01c00644 	movi	r7,25
8110a940:	00000b06 	br	8110a970 <_strtod_r+0x2f4>
8110a944:	21000044 	addi	r4,r4,1
8110a948:	20800003 	ldbu	r2,0(r4)
8110a94c:	10ffefc4 	addi	r3,r2,-65
8110a950:	10803fcc 	andi	r2,r2,255
8110a954:	1080201c 	xori	r2,r2,128
8110a958:	18c03fcc 	andi	r3,r3,255
8110a95c:	10bfe004 	addi	r2,r2,-128
8110a960:	38c00136 	bltu	r7,r3,8110a968 <_strtod_r+0x2ec>
8110a964:	10800804 	addi	r2,r2,32
8110a968:	29400044 	addi	r5,r5,1
8110a96c:	11bf901e 	bne	r2,r6,8110a7b0 <__reset+0xfb0ea7b0>
8110a970:	29800007 	ldb	r6,0(r5)
8110a974:	303ff31e 	bne	r6,zero,8110a944 <__reset+0xfb0ea944>
8110a978:	20800044 	addi	r2,r4,1
8110a97c:	d8800615 	stw	r2,24(sp)
8110a980:	20c00047 	ldb	r3,1(r4)
8110a984:	00800a04 	movi	r2,40
8110a988:	18849d26 	beq	r3,r2,8110bc00 <_strtod_r+0x1584>
8110a98c:	047ffe34 	movhi	r17,65528
8110a990:	0025883a 	mov	r18,zero
8110a994:	902b883a 	mov	r21,r18
8110a998:	882d883a 	mov	r22,r17
8110a99c:	a03f8926 	beq	r20,zero,8110a7c4 <__reset+0xfb0ea7c4>
8110a9a0:	ddc00617 	ldw	r23,24(sp)
8110a9a4:	003f8606 	br	8110a7c0 <__reset+0xfb0ea7c0>
8110a9a8:	00800044 	movi	r2,1
8110a9ac:	d8800715 	stw	r2,28(sp)
8110a9b0:	003f9606 	br	8110a80c <__reset+0xfb0ea80c>
8110a9b4:	21000044 	addi	r4,r4,1
8110a9b8:	d9000615 	stw	r4,24(sp)
8110a9bc:	20800003 	ldbu	r2,0(r4)
8110a9c0:	10c03fcc 	andi	r3,r2,255
8110a9c4:	28ff462e 	bgeu	r5,r3,8110a6e0 <__reset+0xfb0ea6e0>
8110a9c8:	2027883a 	mov	r19,r4
8110a9cc:	d8000715 	stw	zero,28(sp)
8110a9d0:	003f9506 	br	8110a828 <__reset+0xfb0ea828>
8110a9d4:	9cc002a4 	muli	r19,r19,10
8110a9d8:	10803fcc 	andi	r2,r2,255
8110a9dc:	1080201c 	xori	r2,r2,128
8110a9e0:	10bfe004 	addi	r2,r2,-128
8110a9e4:	9885883a 	add	r2,r19,r2
8110a9e8:	14fff404 	addi	r19,r2,-48
8110a9ec:	003fa506 	br	8110a884 <__reset+0xfb0ea884>
8110a9f0:	002b883a 	mov	r21,zero
8110a9f4:	002d883a 	mov	r22,zero
8110a9f8:	003fe806 	br	8110a99c <__reset+0xfb0ea99c>
8110a9fc:	aaabc83a 	sub	r21,r21,r10
8110aa00:	b000011e 	bne	r22,zero,8110aa08 <_strtod_r+0x38c>
8110aa04:	482d883a 	mov	r22,r9
8110aa08:	00800404 	movi	r2,16
8110aa0c:	482f883a 	mov	r23,r9
8110aa10:	1240010e 	bge	r2,r9,8110aa18 <_strtod_r+0x39c>
8110aa14:	102f883a 	mov	r23,r2
8110aa18:	e009883a 	mov	r4,fp
8110aa1c:	da401315 	stw	r9,76(sp)
8110aa20:	1115e480 	call	81115e48 <__floatunsidf>
8110aa24:	1025883a 	mov	r18,r2
8110aa28:	00800244 	movi	r2,9
8110aa2c:	1823883a 	mov	r17,r3
8110aa30:	da401317 	ldw	r9,76(sp)
8110aa34:	15c0160e 	bge	r2,r23,8110aa90 <_strtod_r+0x414>
8110aa38:	b8bffdc4 	addi	r2,r23,-9
8110aa3c:	100490fa 	slli	r2,r2,3
8110aa40:	180b883a 	mov	r5,r3
8110aa44:	00e044b4 	movhi	r3,33042
8110aa48:	18d2a404 	addi	r3,r3,19088
8110aa4c:	1885883a 	add	r2,r3,r2
8110aa50:	11800017 	ldw	r6,0(r2)
8110aa54:	11c00117 	ldw	r7,4(r2)
8110aa58:	9009883a 	mov	r4,r18
8110aa5c:	1114cd80 	call	81114cd8 <__muldf3>
8110aa60:	9809883a 	mov	r4,r19
8110aa64:	1025883a 	mov	r18,r2
8110aa68:	1823883a 	mov	r17,r3
8110aa6c:	1115e480 	call	81115e48 <__floatunsidf>
8110aa70:	9009883a 	mov	r4,r18
8110aa74:	880b883a 	mov	r5,r17
8110aa78:	100d883a 	mov	r6,r2
8110aa7c:	180f883a 	mov	r7,r3
8110aa80:	11138ec0 	call	811138ec <__adddf3>
8110aa84:	da401317 	ldw	r9,76(sp)
8110aa88:	1025883a 	mov	r18,r2
8110aa8c:	1823883a 	mov	r17,r3
8110aa90:	008003c4 	movi	r2,15
8110aa94:	12407b16 	blt	r2,r9,8110ac84 <_strtod_r+0x608>
8110aa98:	a83fbe26 	beq	r21,zero,8110a994 <__reset+0xfb0ea994>
8110aa9c:	0543670e 	bge	zero,r21,8110b83c <_strtod_r+0x11c0>
8110aaa0:	00c00584 	movi	r3,22
8110aaa4:	1d42e816 	blt	r3,r21,8110b648 <_strtod_r+0xfcc>
8110aaa8:	a82a90fa 	slli	r21,r21,3
8110aaac:	00a044b4 	movhi	r2,33042
8110aab0:	1092a404 	addi	r2,r2,19088
8110aab4:	1545883a 	add	r2,r2,r21
8110aab8:	11000017 	ldw	r4,0(r2)
8110aabc:	11400117 	ldw	r5,4(r2)
8110aac0:	900d883a 	mov	r6,r18
8110aac4:	880f883a 	mov	r7,r17
8110aac8:	1114cd80 	call	81114cd8 <__muldf3>
8110aacc:	102b883a 	mov	r21,r2
8110aad0:	182d883a 	mov	r22,r3
8110aad4:	003fb106 	br	8110a99c <__reset+0xfb0ea99c>
8110aad8:	4801b526 	beq	r9,zero,8110b1b0 <_strtod_r+0xb34>
8110aadc:	ddc00617 	ldw	r23,24(sp)
8110aae0:	00c00ac4 	movi	r3,43
8110aae4:	b8800044 	addi	r2,r23,1
8110aae8:	d8800615 	stw	r2,24(sp)
8110aaec:	b8800047 	ldb	r2,1(r23)
8110aaf0:	10c1e926 	beq	r2,r3,8110b298 <_strtod_r+0xc1c>
8110aaf4:	00c00b44 	movi	r3,45
8110aaf8:	10c1ec26 	beq	r2,r3,8110b2ac <_strtod_r+0xc30>
8110aafc:	1023883a 	mov	r17,r2
8110ab00:	0019883a 	mov	r12,zero
8110ab04:	88bff404 	addi	r2,r17,-48
8110ab08:	00c00244 	movi	r3,9
8110ab0c:	1881b736 	bltu	r3,r2,8110b1ec <_strtod_r+0xb70>
8110ab10:	00800c04 	movi	r2,48
8110ab14:	8880071e 	bne	r17,r2,8110ab34 <_strtod_r+0x4b8>
8110ab18:	d8800617 	ldw	r2,24(sp)
8110ab1c:	8807883a 	mov	r3,r17
8110ab20:	10800044 	addi	r2,r2,1
8110ab24:	d8800615 	stw	r2,24(sp)
8110ab28:	14400007 	ldb	r17,0(r2)
8110ab2c:	10800044 	addi	r2,r2,1
8110ab30:	88fffc26 	beq	r17,r3,8110ab24 <__reset+0xfb0eab24>
8110ab34:	88bff3c4 	addi	r2,r17,-49
8110ab38:	00c00204 	movi	r3,8
8110ab3c:	18bf7036 	bltu	r3,r2,8110a900 <__reset+0xfb0ea900>
8110ab40:	db800617 	ldw	r14,24(sp)
8110ab44:	88bff404 	addi	r2,r17,-48
8110ab48:	03400244 	movi	r13,9
8110ab4c:	71c00044 	addi	r7,r14,1
8110ab50:	d9c00615 	stw	r7,24(sp)
8110ab54:	74400043 	ldbu	r17,1(r14)
8110ab58:	88fff404 	addi	r3,r17,-48
8110ab5c:	8c403fcc 	andi	r17,r17,255
8110ab60:	8c40201c 	xori	r17,r17,128
8110ab64:	18c03fcc 	andi	r3,r3,255
8110ab68:	8c7fe004 	addi	r17,r17,-128
8110ab6c:	68c00e36 	bltu	r13,r3,8110aba8 <_strtod_r+0x52c>
8110ab70:	71000084 	addi	r4,r14,2
8110ab74:	d9000615 	stw	r4,24(sp)
8110ab78:	108002a4 	muli	r2,r2,10
8110ab7c:	21800003 	ldbu	r6,0(r4)
8110ab80:	200f883a 	mov	r7,r4
8110ab84:	1463883a 	add	r17,r2,r17
8110ab88:	30fff404 	addi	r3,r6,-48
8110ab8c:	88bff404 	addi	r2,r17,-48
8110ab90:	34403fcc 	andi	r17,r6,255
8110ab94:	8c40201c 	xori	r17,r17,128
8110ab98:	18c03fcc 	andi	r3,r3,255
8110ab9c:	8c7fe004 	addi	r17,r17,-128
8110aba0:	21000044 	addi	r4,r4,1
8110aba4:	68fff32e 	bgeu	r13,r3,8110ab74 <__reset+0xfb0eab74>
8110aba8:	3b8fc83a 	sub	r7,r7,r14
8110abac:	00c00204 	movi	r3,8
8110abb0:	19c29716 	blt	r3,r7,8110b610 <_strtod_r+0xf94>
8110abb4:	102b883a 	mov	r21,r2
8110abb8:	009387c4 	movi	r2,19999
8110abbc:	1540010e 	bge	r2,r21,8110abc4 <_strtod_r+0x548>
8110abc0:	102b883a 	mov	r21,r2
8110abc4:	603f4f26 	beq	r12,zero,8110a904 <__reset+0xfb0ea904>
8110abc8:	056bc83a 	sub	r21,zero,r21
8110abcc:	003f4d06 	br	8110a904 <__reset+0xfb0ea904>
8110abd0:	98800047 	ldb	r2,1(r19)
8110abd4:	00c01604 	movi	r3,88
8110abd8:	10c1de26 	beq	r2,r3,8110b354 <_strtod_r+0xcd8>
8110abdc:	00c01e04 	movi	r3,120
8110abe0:	10c1dc26 	beq	r2,r3,8110b354 <_strtod_r+0xcd8>
8110abe4:	98c00044 	addi	r3,r19,1
8110abe8:	1827883a 	mov	r19,r3
8110abec:	d8c00615 	stw	r3,24(sp)
8110abf0:	18c00044 	addi	r3,r3,1
8110abf4:	18bfffc3 	ldbu	r2,-1(r3)
8110abf8:	11003fcc 	andi	r4,r2,255
8110abfc:	2100201c 	xori	r4,r4,128
8110ac00:	213fe004 	addi	r4,r4,-128
8110ac04:	217ff826 	beq	r4,r5,8110abe8 <__reset+0xfb0eabe8>
8110ac08:	203f7926 	beq	r4,zero,8110a9f0 <__reset+0xfb0ea9f0>
8110ac0c:	dcc00815 	stw	r19,32(sp)
8110ac10:	04800044 	movi	r18,1
8110ac14:	003f0b06 	br	8110a844 <__reset+0xfb0ea844>
8110ac18:	8009883a 	mov	r4,r16
8110ac1c:	11087300 	call	81108730 <_localeconv_r>
8110ac20:	11000017 	ldw	r4,0(r2)
8110ac24:	1101bb00 	call	81101bb0 <strlen>
8110ac28:	d8c00617 	ldw	r3,24(sp)
8110ac2c:	1885883a 	add	r2,r3,r2
8110ac30:	d8800615 	stw	r2,24(sp)
8110ac34:	14400007 	ldb	r17,0(r2)
8110ac38:	b001881e 	bne	r22,zero,8110b25c <_strtod_r+0xbe0>
8110ac3c:	00c00c04 	movi	r3,48
8110ac40:	88c3391e 	bne	r17,r3,8110b928 <_strtod_r+0x12ac>
8110ac44:	10c00044 	addi	r3,r2,1
8110ac48:	8809883a 	mov	r4,r17
8110ac4c:	d8c00615 	stw	r3,24(sp)
8110ac50:	1c400007 	ldb	r17,0(r3)
8110ac54:	188bc83a 	sub	r5,r3,r2
8110ac58:	18c00044 	addi	r3,r3,1
8110ac5c:	893ffb26 	beq	r17,r4,8110ac4c <__reset+0xfb0eac4c>
8110ac60:	88bff3c4 	addi	r2,r17,-49
8110ac64:	00c00204 	movi	r3,8
8110ac68:	1882e72e 	bgeu	r3,r2,8110b808 <_strtod_r+0x118c>
8110ac6c:	00801944 	movi	r2,101
8110ac70:	88814d26 	beq	r17,r2,8110b1a8 <_strtod_r+0xb2c>
8110ac74:	0013883a 	mov	r9,zero
8110ac78:	0015883a 	mov	r10,zero
8110ac7c:	02c00044 	movi	r11,1
8110ac80:	003f1d06 	br	8110a8f8 <__reset+0xfb0ea8f8>
8110ac84:	4defc83a 	sub	r23,r9,r23
8110ac88:	bd6f883a 	add	r23,r23,r21
8110ac8c:	05c21e0e 	bge	zero,r23,8110b508 <_strtod_r+0xe8c>
8110ac90:	b88003cc 	andi	r2,r23,15
8110ac94:	10000d26 	beq	r2,zero,8110accc <_strtod_r+0x650>
8110ac98:	100490fa 	slli	r2,r2,3
8110ac9c:	00e044b4 	movhi	r3,33042
8110aca0:	18d2a404 	addi	r3,r3,19088
8110aca4:	1885883a 	add	r2,r3,r2
8110aca8:	11000017 	ldw	r4,0(r2)
8110acac:	11400117 	ldw	r5,4(r2)
8110acb0:	900d883a 	mov	r6,r18
8110acb4:	880f883a 	mov	r7,r17
8110acb8:	da401315 	stw	r9,76(sp)
8110acbc:	1114cd80 	call	81114cd8 <__muldf3>
8110acc0:	da401317 	ldw	r9,76(sp)
8110acc4:	1025883a 	mov	r18,r2
8110acc8:	1823883a 	mov	r17,r3
8110accc:	023ffc04 	movi	r8,-16
8110acd0:	ba10703a 	and	r8,r23,r8
8110acd4:	40003c26 	beq	r8,zero,8110adc8 <_strtod_r+0x74c>
8110acd8:	00804d04 	movi	r2,308
8110acdc:	1201cd16 	blt	r2,r8,8110b414 <_strtod_r+0xd98>
8110ace0:	4011d13a 	srai	r8,r8,4
8110ace4:	03000044 	movi	r12,1
8110ace8:	62037c0e 	bge	r12,r8,8110badc <_strtod_r+0x1460>
8110acec:	012044b4 	movhi	r4,33042
8110acf0:	21129a04 	addi	r4,r4,19048
8110acf4:	2015883a 	mov	r10,r4
8110acf8:	0027883a 	mov	r19,zero
8110acfc:	d9000915 	stw	r4,36(sp)
8110ad00:	9005883a 	mov	r2,r18
8110ad04:	8807883a 	mov	r3,r17
8110ad08:	dc000c15 	stw	r16,48(sp)
8110ad0c:	dc800e15 	stw	r18,56(sp)
8110ad10:	9821883a 	mov	r16,r19
8110ad14:	0009883a 	mov	r4,zero
8110ad18:	8827883a 	mov	r19,r17
8110ad1c:	602f883a 	mov	r23,r12
8110ad20:	da400a15 	stw	r9,40(sp)
8110ad24:	5025883a 	mov	r18,r10
8110ad28:	4023883a 	mov	r17,r8
8110ad2c:	8980004c 	andi	r6,r17,1
8110ad30:	30000626 	beq	r6,zero,8110ad4c <_strtod_r+0x6d0>
8110ad34:	91800017 	ldw	r6,0(r18)
8110ad38:	91c00117 	ldw	r7,4(r18)
8110ad3c:	1009883a 	mov	r4,r2
8110ad40:	180b883a 	mov	r5,r3
8110ad44:	1114cd80 	call	81114cd8 <__muldf3>
8110ad48:	01000044 	movi	r4,1
8110ad4c:	8823d07a 	srai	r17,r17,1
8110ad50:	84000044 	addi	r16,r16,1
8110ad54:	94800204 	addi	r18,r18,8
8110ad58:	8dfff41e 	bne	r17,r23,8110ad2c <__reset+0xfb0ead2c>
8110ad5c:	21003fcc 	andi	r4,r4,255
8110ad60:	9823883a 	mov	r17,r19
8110ad64:	da400a17 	ldw	r9,40(sp)
8110ad68:	8027883a 	mov	r19,r16
8110ad6c:	dc800e17 	ldw	r18,56(sp)
8110ad70:	dc000c17 	ldw	r16,48(sp)
8110ad74:	2003b11e 	bne	r4,zero,8110bc3c <_strtod_r+0x15c0>
8110ad78:	981690fa 	slli	r11,r19,3
8110ad7c:	d8800917 	ldw	r2,36(sp)
8110ad80:	01ff2c34 	movhi	r7,64688
8110ad84:	900d883a 	mov	r6,r18
8110ad88:	12ef883a 	add	r23,r2,r11
8110ad8c:	b9000017 	ldw	r4,0(r23)
8110ad90:	b9400117 	ldw	r5,4(r23)
8110ad94:	89cf883a 	add	r7,r17,r7
8110ad98:	da401315 	stw	r9,76(sp)
8110ad9c:	1114cd80 	call	81114cd8 <__muldf3>
8110ada0:	1025883a 	mov	r18,r2
8110ada4:	011f2834 	movhi	r4,31904
8110ada8:	189ffc2c 	andhi	r2,r3,32752
8110adac:	da401317 	ldw	r9,76(sp)
8110adb0:	20819836 	bltu	r4,r2,8110b414 <_strtod_r+0xd98>
8110adb4:	011f2434 	movhi	r4,31888
8110adb8:	2083382e 	bgeu	r4,r2,8110ba9c <_strtod_r+0x1420>
8110adbc:	045ffc34 	movhi	r17,32752
8110adc0:	8c7fffc4 	addi	r17,r17,-1
8110adc4:	04bfffc4 	movi	r18,-1
8110adc8:	d8000915 	stw	zero,36(sp)
8110adcc:	d9400817 	ldw	r5,32(sp)
8110add0:	df000015 	stw	fp,0(sp)
8110add4:	480f883a 	mov	r7,r9
8110add8:	b00d883a 	mov	r6,r22
8110addc:	8009883a 	mov	r4,r16
8110ade0:	1108f5c0 	call	81108f5c <__s2b>
8110ade4:	d8800815 	stw	r2,32(sp)
8110ade8:	10018a26 	beq	r2,zero,8110b414 <_strtod_r+0xd98>
8110adec:	a807d7fa 	srai	r3,r21,31
8110adf0:	0545c83a 	sub	r2,zero,r21
8110adf4:	dd400a15 	stw	r21,40(sp)
8110adf8:	1886703a 	and	r3,r3,r2
8110adfc:	d8c00c15 	stw	r3,48(sp)
8110ae00:	a8013516 	blt	r21,zero,8110b2d8 <_strtod_r+0xc5c>
8110ae04:	d9400817 	ldw	r5,32(sp)
8110ae08:	0011883a 	mov	r8,zero
8110ae0c:	0027883a 	mov	r19,zero
8110ae10:	29400304 	addi	r5,r5,12
8110ae14:	d9400f15 	stw	r5,60(sp)
8110ae18:	402b883a 	mov	r21,r8
8110ae1c:	dd001215 	stw	r20,72(sp)
8110ae20:	d8800817 	ldw	r2,32(sp)
8110ae24:	8009883a 	mov	r4,r16
8110ae28:	11400117 	ldw	r5,4(r2)
8110ae2c:	1108d6c0 	call	81108d6c <_Balloc>
8110ae30:	1029883a 	mov	r20,r2
8110ae34:	10012d26 	beq	r2,zero,8110b2ec <_strtod_r+0xc70>
8110ae38:	d8c00817 	ldw	r3,32(sp)
8110ae3c:	d9400f17 	ldw	r5,60(sp)
8110ae40:	11000304 	addi	r4,r2,12
8110ae44:	19800417 	ldw	r6,16(r3)
8110ae48:	31800084 	addi	r6,r6,2
8110ae4c:	318d883a 	add	r6,r6,r6
8110ae50:	318d883a 	add	r6,r6,r6
8110ae54:	1108ac80 	call	81108ac8 <memcpy>
8110ae58:	d9000204 	addi	r4,sp,8
8110ae5c:	d9000015 	stw	r4,0(sp)
8110ae60:	d9c00404 	addi	r7,sp,16
8110ae64:	900b883a 	mov	r5,r18
8110ae68:	880d883a 	mov	r6,r17
8110ae6c:	8009883a 	mov	r4,r16
8110ae70:	1109a000 	call	81109a00 <__d2b>
8110ae74:	d8800515 	stw	r2,20(sp)
8110ae78:	dc801115 	stw	r18,68(sp)
8110ae7c:	dc401015 	stw	r17,64(sp)
8110ae80:	10027c26 	beq	r2,zero,8110b874 <_strtod_r+0x11f8>
8110ae84:	01400044 	movi	r5,1
8110ae88:	8009883a 	mov	r4,r16
8110ae8c:	11091780 	call	81109178 <__i2b>
8110ae90:	1027883a 	mov	r19,r2
8110ae94:	10011526 	beq	r2,zero,8110b2ec <_strtod_r+0xc70>
8110ae98:	d8800417 	ldw	r2,16(sp)
8110ae9c:	1000c816 	blt	r2,zero,8110b1c0 <_strtod_r+0xb44>
8110aea0:	d9400c17 	ldw	r5,48(sp)
8110aea4:	d9000a17 	ldw	r4,40(sp)
8110aea8:	28ad883a 	add	r22,r5,r2
8110aeac:	d9400917 	ldw	r5,36(sp)
8110aeb0:	df000217 	ldw	fp,8(sp)
8110aeb4:	05ff0084 	movi	r23,-1022
8110aeb8:	1147c83a 	sub	r3,r2,r5
8110aebc:	1f07883a 	add	r3,r3,fp
8110aec0:	00800d84 	movi	r2,54
8110aec4:	18ffffc4 	addi	r3,r3,-1
8110aec8:	1739c83a 	sub	fp,r2,fp
8110aecc:	1dc0a50e 	bge	r3,r23,8110b164 <_strtod_r+0xae8>
8110aed0:	b8efc83a 	sub	r23,r23,r3
8110aed4:	008007c4 	movi	r2,31
8110aed8:	e5f9c83a 	sub	fp,fp,r23
8110aedc:	15c0bc16 	blt	r2,r23,8110b1d0 <_strtod_r+0xb54>
8110aee0:	00800044 	movi	r2,1
8110aee4:	15c4983a 	sll	r2,r2,r23
8110aee8:	d8000b15 	stw	zero,44(sp)
8110aeec:	d8800d15 	stw	r2,52(sp)
8110aef0:	2707883a 	add	r3,r4,fp
8110aef4:	d9000917 	ldw	r4,36(sp)
8110aef8:	b739883a 	add	fp,r22,fp
8110aefc:	20ef883a 	add	r23,r4,r3
8110af00:	b009883a 	mov	r4,r22
8110af04:	e580010e 	bge	fp,r22,8110af0c <_strtod_r+0x890>
8110af08:	e009883a 	mov	r4,fp
8110af0c:	b805883a 	mov	r2,r23
8110af10:	25c0010e 	bge	r4,r23,8110af18 <_strtod_r+0x89c>
8110af14:	2005883a 	mov	r2,r4
8110af18:	0080030e 	bge	zero,r2,8110af28 <_strtod_r+0x8ac>
8110af1c:	e0b9c83a 	sub	fp,fp,r2
8110af20:	b8afc83a 	sub	r23,r23,r2
8110af24:	b0adc83a 	sub	r22,r22,r2
8110af28:	d9400c17 	ldw	r5,48(sp)
8110af2c:	28001126 	beq	r5,zero,8110af74 <_strtod_r+0x8f8>
8110af30:	280d883a 	mov	r6,r5
8110af34:	8009883a 	mov	r4,r16
8110af38:	980b883a 	mov	r5,r19
8110af3c:	11093ac0 	call	811093ac <__pow5mult>
8110af40:	1027883a 	mov	r19,r2
8110af44:	1000e926 	beq	r2,zero,8110b2ec <_strtod_r+0xc70>
8110af48:	d9800517 	ldw	r6,20(sp)
8110af4c:	100b883a 	mov	r5,r2
8110af50:	8009883a 	mov	r4,r16
8110af54:	11091b40 	call	811091b4 <__multiply>
8110af58:	1000e426 	beq	r2,zero,8110b2ec <_strtod_r+0xc70>
8110af5c:	d9400517 	ldw	r5,20(sp)
8110af60:	8009883a 	mov	r4,r16
8110af64:	d8801315 	stw	r2,76(sp)
8110af68:	1108e140 	call	81108e14 <_Bfree>
8110af6c:	d8801317 	ldw	r2,76(sp)
8110af70:	d8800515 	stw	r2,20(sp)
8110af74:	0700060e 	bge	zero,fp,8110af90 <_strtod_r+0x914>
8110af78:	d9400517 	ldw	r5,20(sp)
8110af7c:	e00d883a 	mov	r6,fp
8110af80:	8009883a 	mov	r4,r16
8110af84:	11094ec0 	call	811094ec <__lshift>
8110af88:	d8800515 	stw	r2,20(sp)
8110af8c:	10023926 	beq	r2,zero,8110b874 <_strtod_r+0x11f8>
8110af90:	d8800a17 	ldw	r2,40(sp)
8110af94:	10000626 	beq	r2,zero,8110afb0 <_strtod_r+0x934>
8110af98:	d9800a17 	ldw	r6,40(sp)
8110af9c:	a00b883a 	mov	r5,r20
8110afa0:	8009883a 	mov	r4,r16
8110afa4:	11093ac0 	call	811093ac <__pow5mult>
8110afa8:	1029883a 	mov	r20,r2
8110afac:	1000cf26 	beq	r2,zero,8110b2ec <_strtod_r+0xc70>
8110afb0:	05c0060e 	bge	zero,r23,8110afcc <_strtod_r+0x950>
8110afb4:	a00b883a 	mov	r5,r20
8110afb8:	b80d883a 	mov	r6,r23
8110afbc:	8009883a 	mov	r4,r16
8110afc0:	11094ec0 	call	811094ec <__lshift>
8110afc4:	1029883a 	mov	r20,r2
8110afc8:	1000c826 	beq	r2,zero,8110b2ec <_strtod_r+0xc70>
8110afcc:	0580060e 	bge	zero,r22,8110afe8 <_strtod_r+0x96c>
8110afd0:	980b883a 	mov	r5,r19
8110afd4:	b00d883a 	mov	r6,r22
8110afd8:	8009883a 	mov	r4,r16
8110afdc:	11094ec0 	call	811094ec <__lshift>
8110afe0:	1027883a 	mov	r19,r2
8110afe4:	1000c126 	beq	r2,zero,8110b2ec <_strtod_r+0xc70>
8110afe8:	d9400517 	ldw	r5,20(sp)
8110afec:	a00d883a 	mov	r6,r20
8110aff0:	8009883a 	mov	r4,r16
8110aff4:	11096940 	call	81109694 <__mdiff>
8110aff8:	102b883a 	mov	r21,r2
8110affc:	1000bb26 	beq	r2,zero,8110b2ec <_strtod_r+0xc70>
8110b000:	10c00317 	ldw	r3,12(r2)
8110b004:	980b883a 	mov	r5,r19
8110b008:	10000315 	stw	zero,12(r2)
8110b00c:	1009883a 	mov	r4,r2
8110b010:	d8c00e15 	stw	r3,56(sp)
8110b014:	11096340 	call	81109634 <__mcmp>
8110b018:	10027616 	blt	r2,zero,8110b9f4 <_strtod_r+0x1378>
8110b01c:	10024426 	beq	r2,zero,8110b930 <_strtod_r+0x12b4>
8110b020:	980b883a 	mov	r5,r19
8110b024:	a809883a 	mov	r4,r21
8110b028:	1109b4c0 	call	81109b4c <__ratio>
8110b02c:	000d883a 	mov	r6,zero
8110b030:	01d00034 	movhi	r7,16384
8110b034:	1009883a 	mov	r4,r2
8110b038:	180b883a 	mov	r5,r3
8110b03c:	102f883a 	mov	r23,r2
8110b040:	182d883a 	mov	r22,r3
8110b044:	1114be40 	call	81114be4 <__ledf2>
8110b048:	00804a16 	blt	zero,r2,8110b174 <_strtod_r+0xaf8>
8110b04c:	d9400e17 	ldw	r5,56(sp)
8110b050:	28006b26 	beq	r5,zero,8110b200 <_strtod_r+0xb84>
8110b054:	058ffc34 	movhi	r22,16368
8110b058:	d8000b15 	stw	zero,44(sp)
8110b05c:	d8000d15 	stw	zero,52(sp)
8110b060:	b02f883a 	mov	r23,r22
8110b064:	8f1ffc2c 	andhi	fp,r17,32752
8110b068:	009ff834 	movhi	r2,32736
8110b06c:	e080cd26 	beq	fp,r2,8110b3a4 <_strtod_r+0xd28>
8110b070:	d9400917 	ldw	r5,36(sp)
8110b074:	28001a26 	beq	r5,zero,8110b0e0 <_strtod_r+0xa64>
8110b078:	0081a834 	movhi	r2,1696
8110b07c:	17001836 	bltu	r2,fp,8110b0e0 <_strtod_r+0xa64>
8110b080:	d9000d17 	ldw	r4,52(sp)
8110b084:	01d07834 	movhi	r7,16864
8110b088:	39ffffc4 	addi	r7,r7,-1
8110b08c:	01bff034 	movhi	r6,65472
8110b090:	b80b883a 	mov	r5,r23
8110b094:	1114be40 	call	81114be4 <__ledf2>
8110b098:	00800e16 	blt	zero,r2,8110b0d4 <_strtod_r+0xa58>
8110b09c:	d9000d17 	ldw	r4,52(sp)
8110b0a0:	b80b883a 	mov	r5,r23
8110b0a4:	1112a180 	call	81112a18 <__fixunsdfsi>
8110b0a8:	10018126 	beq	r2,zero,8110b6b0 <_strtod_r+0x1034>
8110b0ac:	1009883a 	mov	r4,r2
8110b0b0:	1115e480 	call	81115e48 <__floatunsidf>
8110b0b4:	d8800d15 	stw	r2,52(sp)
8110b0b8:	182f883a 	mov	r23,r3
8110b0bc:	d8800e17 	ldw	r2,56(sp)
8110b0c0:	1001791e 	bne	r2,zero,8110b6a8 <_strtod_r+0x102c>
8110b0c4:	ba20003c 	xorhi	r8,r23,32768
8110b0c8:	d8c00d17 	ldw	r3,52(sp)
8110b0cc:	402d883a 	mov	r22,r8
8110b0d0:	d8c00b15 	stw	r3,44(sp)
8110b0d4:	0081ac34 	movhi	r2,1712
8110b0d8:	b091883a 	add	r8,r22,r2
8110b0dc:	472dc83a 	sub	r22,r8,fp
8110b0e0:	9009883a 	mov	r4,r18
8110b0e4:	880b883a 	mov	r5,r17
8110b0e8:	11098900 	call	81109890 <__ulp>
8110b0ec:	d9000b17 	ldw	r4,44(sp)
8110b0f0:	b00b883a 	mov	r5,r22
8110b0f4:	100d883a 	mov	r6,r2
8110b0f8:	180f883a 	mov	r7,r3
8110b0fc:	1114cd80 	call	81114cd8 <__muldf3>
8110b100:	900d883a 	mov	r6,r18
8110b104:	880f883a 	mov	r7,r17
8110b108:	1009883a 	mov	r4,r2
8110b10c:	180b883a 	mov	r5,r3
8110b110:	11138ec0 	call	811138ec <__adddf3>
8110b114:	1025883a 	mov	r18,r2
8110b118:	1823883a 	mov	r17,r3
8110b11c:	182d883a 	mov	r22,r3
8110b120:	d9000917 	ldw	r4,36(sp)
8110b124:	2000021e 	bne	r4,zero,8110b130 <_strtod_r+0xab4>
8110b128:	b09ffc2c 	andhi	r2,r22,32752
8110b12c:	e080be26 	beq	fp,r2,8110b428 <_strtod_r+0xdac>
8110b130:	d9400517 	ldw	r5,20(sp)
8110b134:	8009883a 	mov	r4,r16
8110b138:	1108e140 	call	81108e14 <_Bfree>
8110b13c:	a00b883a 	mov	r5,r20
8110b140:	8009883a 	mov	r4,r16
8110b144:	1108e140 	call	81108e14 <_Bfree>
8110b148:	980b883a 	mov	r5,r19
8110b14c:	8009883a 	mov	r4,r16
8110b150:	1108e140 	call	81108e14 <_Bfree>
8110b154:	a80b883a 	mov	r5,r21
8110b158:	8009883a 	mov	r4,r16
8110b15c:	1108e140 	call	81108e14 <_Bfree>
8110b160:	003f2f06 	br	8110ae20 <__reset+0xfb0eae20>
8110b164:	00c00044 	movi	r3,1
8110b168:	d8000b15 	stw	zero,44(sp)
8110b16c:	d8c00d15 	stw	r3,52(sp)
8110b170:	003f5f06 	br	8110aef0 <__reset+0xfb0eaef0>
8110b174:	b809883a 	mov	r4,r23
8110b178:	000d883a 	mov	r6,zero
8110b17c:	01cff834 	movhi	r7,16352
8110b180:	b00b883a 	mov	r5,r22
8110b184:	1114cd80 	call	81114cd8 <__muldf3>
8110b188:	d9000e17 	ldw	r4,56(sp)
8110b18c:	d8800d15 	stw	r2,52(sp)
8110b190:	182f883a 	mov	r23,r3
8110b194:	2000181e 	bne	r4,zero,8110b1f8 <_strtod_r+0xb7c>
8110b198:	1a20003c 	xorhi	r8,r3,32768
8110b19c:	d8800b15 	stw	r2,44(sp)
8110b1a0:	402d883a 	mov	r22,r8
8110b1a4:	003faf06 	br	8110b064 <__reset+0xfb0eb064>
8110b1a8:	0015883a 	mov	r10,zero
8110b1ac:	02c00044 	movi	r11,1
8110b1b0:	2800011e 	bne	r5,zero,8110b1b8 <_strtod_r+0xb3c>
8110b1b4:	903d7e26 	beq	r18,zero,8110a7b0 <__reset+0xfb0ea7b0>
8110b1b8:	0013883a 	mov	r9,zero
8110b1bc:	003e4706 	br	8110aadc <__reset+0xfb0eaadc>
8110b1c0:	d8c00a17 	ldw	r3,40(sp)
8110b1c4:	dd800c17 	ldw	r22,48(sp)
8110b1c8:	1889c83a 	sub	r4,r3,r2
8110b1cc:	003f3706 	br	8110aeac <__reset+0xfb0eaeac>
8110b1d0:	00bef884 	movi	r2,-1054
8110b1d4:	05c00044 	movi	r23,1
8110b1d8:	10c5c83a 	sub	r2,r2,r3
8110b1dc:	b884983a 	sll	r2,r23,r2
8110b1e0:	ddc00d15 	stw	r23,52(sp)
8110b1e4:	d8800b15 	stw	r2,44(sp)
8110b1e8:	003f4106 	br	8110aef0 <__reset+0xfb0eaef0>
8110b1ec:	ddc00615 	stw	r23,24(sp)
8110b1f0:	002b883a 	mov	r21,zero
8110b1f4:	003dc306 	br	8110a904 <__reset+0xfb0ea904>
8110b1f8:	1811883a 	mov	r8,r3
8110b1fc:	003fe706 	br	8110b19c <__reset+0xfb0eb19c>
8110b200:	90002e1e 	bne	r18,zero,8110b2bc <_strtod_r+0xc40>
8110b204:	00c00434 	movhi	r3,16
8110b208:	18ffffc4 	addi	r3,r3,-1
8110b20c:	88c4703a 	and	r2,r17,r3
8110b210:	10002c1e 	bne	r2,zero,8110b2c4 <_strtod_r+0xc48>
8110b214:	000d883a 	mov	r6,zero
8110b218:	01cffc34 	movhi	r7,16368
8110b21c:	b809883a 	mov	r4,r23
8110b220:	b00b883a 	mov	r5,r22
8110b224:	1114be40 	call	81114be4 <__ledf2>
8110b228:	10021716 	blt	r2,zero,8110ba88 <_strtod_r+0x140c>
8110b22c:	b809883a 	mov	r4,r23
8110b230:	b00b883a 	mov	r5,r22
8110b234:	000d883a 	mov	r6,zero
8110b238:	01cff834 	movhi	r7,16352
8110b23c:	1114cd80 	call	81114cd8 <__muldf3>
8110b240:	d8800d15 	stw	r2,52(sp)
8110b244:	182f883a 	mov	r23,r3
8110b248:	102d883a 	mov	r22,r2
8110b24c:	1a20003c 	xorhi	r8,r3,32768
8110b250:	dd800b15 	stw	r22,44(sp)
8110b254:	402d883a 	mov	r22,r8
8110b258:	003f8206 	br	8110b064 <__reset+0xfb0eb064>
8110b25c:	b013883a 	mov	r9,r22
8110b260:	000b883a 	mov	r5,zero
8110b264:	0015883a 	mov	r10,zero
8110b268:	893ff404 	addi	r4,r17,-48
8110b26c:	00800244 	movi	r2,9
8110b270:	11001036 	bltu	r2,r4,8110b2b4 <_strtod_r+0xc38>
8110b274:	28c00044 	addi	r3,r5,1
8110b278:	2023883a 	mov	r17,r4
8110b27c:	20014d1e 	bne	r4,zero,8110b7b4 <_strtod_r+0x1138>
8110b280:	d9800617 	ldw	r6,24(sp)
8110b284:	180b883a 	mov	r5,r3
8110b288:	30800044 	addi	r2,r6,1
8110b28c:	d8800615 	stw	r2,24(sp)
8110b290:	34400047 	ldb	r17,1(r6)
8110b294:	003ff406 	br	8110b268 <__reset+0xfb0eb268>
8110b298:	0019883a 	mov	r12,zero
8110b29c:	b8800084 	addi	r2,r23,2
8110b2a0:	d8800615 	stw	r2,24(sp)
8110b2a4:	bc400087 	ldb	r17,2(r23)
8110b2a8:	003e1606 	br	8110ab04 <__reset+0xfb0eab04>
8110b2ac:	03000044 	movi	r12,1
8110b2b0:	003ffa06 	br	8110b29c <__reset+0xfb0eb29c>
8110b2b4:	02c00044 	movi	r11,1
8110b2b8:	003d8d06 	br	8110a8f0 <__reset+0xfb0ea8f0>
8110b2bc:	00800044 	movi	r2,1
8110b2c0:	9080fe26 	beq	r18,r2,8110b6bc <_strtod_r+0x1040>
8110b2c4:	d8000b15 	stw	zero,44(sp)
8110b2c8:	05affc34 	movhi	r22,49136
8110b2cc:	d8000d15 	stw	zero,52(sp)
8110b2d0:	05cffc34 	movhi	r23,16368
8110b2d4:	003f6306 	br	8110b064 <__reset+0xfb0eb064>
8110b2d8:	d8000a15 	stw	zero,40(sp)
8110b2dc:	003ec906 	br	8110ae04 <__reset+0xfb0eae04>
8110b2e0:	d9001117 	ldw	r4,68(sp)
8110b2e4:	00bfffc4 	movi	r2,-1
8110b2e8:	2080461e 	bne	r4,r2,8110b404 <_strtod_r+0xd88>
8110b2ec:	dd000a15 	stw	r20,40(sp)
8110b2f0:	dd001217 	ldw	r20,72(sp)
8110b2f4:	a811883a 	mov	r8,r21
8110b2f8:	d8800517 	ldw	r2,20(sp)
8110b2fc:	00c00884 	movi	r3,34
8110b300:	80c00015 	stw	r3,0(r16)
8110b304:	002b883a 	mov	r21,zero
8110b308:	059ffc34 	movhi	r22,32752
8110b30c:	100b883a 	mov	r5,r2
8110b310:	8009883a 	mov	r4,r16
8110b314:	da001315 	stw	r8,76(sp)
8110b318:	1108e140 	call	81108e14 <_Bfree>
8110b31c:	d9400a17 	ldw	r5,40(sp)
8110b320:	8009883a 	mov	r4,r16
8110b324:	1108e140 	call	81108e14 <_Bfree>
8110b328:	980b883a 	mov	r5,r19
8110b32c:	8009883a 	mov	r4,r16
8110b330:	1108e140 	call	81108e14 <_Bfree>
8110b334:	d9400817 	ldw	r5,32(sp)
8110b338:	8009883a 	mov	r4,r16
8110b33c:	1108e140 	call	81108e14 <_Bfree>
8110b340:	da001317 	ldw	r8,76(sp)
8110b344:	8009883a 	mov	r4,r16
8110b348:	400b883a 	mov	r5,r8
8110b34c:	1108e140 	call	81108e14 <_Bfree>
8110b350:	003d9206 	br	8110a99c <__reset+0xfb0ea99c>
8110b354:	d8c00717 	ldw	r3,28(sp)
8110b358:	d8800504 	addi	r2,sp,20
8110b35c:	01a044b4 	movhi	r6,33042
8110b360:	3192df04 	addi	r6,r6,19324
8110b364:	d8c00115 	stw	r3,4(sp)
8110b368:	d8800015 	stw	r2,0(sp)
8110b36c:	d9c00404 	addi	r7,sp,16
8110b370:	d9400604 	addi	r5,sp,24
8110b374:	8009883a 	mov	r4,r16
8110b378:	11107700 	call	81110770 <__gethex>
8110b37c:	154001cc 	andi	r21,r2,7
8110b380:	a83d9b26 	beq	r21,zero,8110a9f0 <__reset+0xfb0ea9f0>
8110b384:	00c00184 	movi	r3,6
8110b388:	a8c0d61e 	bne	r21,r3,8110b6e4 <_strtod_r+0x1068>
8110b38c:	9cc00044 	addi	r19,r19,1
8110b390:	dcc00615 	stw	r19,24(sp)
8110b394:	002b883a 	mov	r21,zero
8110b398:	002d883a 	mov	r22,zero
8110b39c:	d8000715 	stw	zero,28(sp)
8110b3a0:	003d7e06 	br	8110a99c <__reset+0xfb0ea99c>
8110b3a4:	00bf2c34 	movhi	r2,64688
8110b3a8:	88a3883a 	add	r17,r17,r2
8110b3ac:	9009883a 	mov	r4,r18
8110b3b0:	880b883a 	mov	r5,r17
8110b3b4:	11098900 	call	81109890 <__ulp>
8110b3b8:	d9000b17 	ldw	r4,44(sp)
8110b3bc:	100d883a 	mov	r6,r2
8110b3c0:	180f883a 	mov	r7,r3
8110b3c4:	b00b883a 	mov	r5,r22
8110b3c8:	1114cd80 	call	81114cd8 <__muldf3>
8110b3cc:	900d883a 	mov	r6,r18
8110b3d0:	180b883a 	mov	r5,r3
8110b3d4:	880f883a 	mov	r7,r17
8110b3d8:	1009883a 	mov	r4,r2
8110b3dc:	11138ec0 	call	811138ec <__adddf3>
8110b3e0:	015f2834 	movhi	r5,31904
8110b3e4:	1025883a 	mov	r18,r2
8110b3e8:	297fffc4 	addi	r5,r5,-1
8110b3ec:	189ffc2c 	andhi	r2,r3,32752
8110b3f0:	2880892e 	bgeu	r5,r2,8110b618 <_strtod_r+0xf9c>
8110b3f4:	d8801017 	ldw	r2,64(sp)
8110b3f8:	00dffc34 	movhi	r3,32752
8110b3fc:	18ffffc4 	addi	r3,r3,-1
8110b400:	10ffb726 	beq	r2,r3,8110b2e0 <__reset+0xfb0eb2e0>
8110b404:	045ffc34 	movhi	r17,32752
8110b408:	8c7fffc4 	addi	r17,r17,-1
8110b40c:	04bfffc4 	movi	r18,-1
8110b410:	003f4706 	br	8110b130 <__reset+0xfb0eb130>
8110b414:	00800884 	movi	r2,34
8110b418:	80800015 	stw	r2,0(r16)
8110b41c:	002b883a 	mov	r21,zero
8110b420:	059ffc34 	movhi	r22,32752
8110b424:	003d5d06 	br	8110a99c <__reset+0xfb0ea99c>
8110b428:	d9000d17 	ldw	r4,52(sp)
8110b42c:	b80b883a 	mov	r5,r23
8110b430:	1115cec0 	call	81115cec <__fixdfsi>
8110b434:	1009883a 	mov	r4,r2
8110b438:	1115d6c0 	call	81115d6c <__floatsidf>
8110b43c:	d9000d17 	ldw	r4,52(sp)
8110b440:	b80b883a 	mov	r5,r23
8110b444:	100d883a 	mov	r6,r2
8110b448:	180f883a 	mov	r7,r3
8110b44c:	11153f00 	call	811153f0 <__subdf3>
8110b450:	d9400e17 	ldw	r5,56(sp)
8110b454:	1039883a 	mov	fp,r2
8110b458:	182f883a 	mov	r23,r3
8110b45c:	2800141e 	bne	r5,zero,8110b4b0 <_strtod_r+0xe34>
8110b460:	9000131e 	bne	r18,zero,8110b4b0 <_strtod_r+0xe34>
8110b464:	00800434 	movhi	r2,16
8110b468:	10bfffc4 	addi	r2,r2,-1
8110b46c:	b0ac703a 	and	r22,r22,r2
8110b470:	b0000f1e 	bne	r22,zero,8110b4b0 <_strtod_r+0xe34>
8110b474:	01a52834 	movhi	r6,38048
8110b478:	01cff434 	movhi	r7,16336
8110b47c:	318d6544 	addi	r6,r6,13717
8110b480:	39ffffc4 	addi	r7,r7,-1
8110b484:	e009883a 	mov	r4,fp
8110b488:	180b883a 	mov	r5,r3
8110b48c:	1114be40 	call	81114be4 <__ledf2>
8110b490:	103f270e 	bge	r2,zero,8110b130 <__reset+0xfb0eb130>
8110b494:	dd000a15 	stw	r20,40(sp)
8110b498:	a811883a 	mov	r8,r21
8110b49c:	dd001217 	ldw	r20,72(sp)
8110b4a0:	d8800517 	ldw	r2,20(sp)
8110b4a4:	002b883a 	mov	r21,zero
8110b4a8:	882d883a 	mov	r22,r17
8110b4ac:	003f9706 	br	8110b30c <__reset+0xfb0eb30c>
8110b4b0:	01a52834 	movhi	r6,38048
8110b4b4:	01cff834 	movhi	r7,16352
8110b4b8:	318d6544 	addi	r6,r6,13717
8110b4bc:	39ffffc4 	addi	r7,r7,-1
8110b4c0:	e009883a 	mov	r4,fp
8110b4c4:	b80b883a 	mov	r5,r23
8110b4c8:	1114be40 	call	81114be4 <__ledf2>
8110b4cc:	10000716 	blt	r2,zero,8110b4ec <_strtod_r+0xe70>
8110b4d0:	018d6c34 	movhi	r6,13744
8110b4d4:	31b94d44 	addi	r6,r6,-6859
8110b4d8:	01cff834 	movhi	r7,16352
8110b4dc:	e009883a 	mov	r4,fp
8110b4e0:	b80b883a 	mov	r5,r23
8110b4e4:	1114b080 	call	81114b08 <__gedf2>
8110b4e8:	00bf110e 	bge	zero,r2,8110b130 <__reset+0xfb0eb130>
8110b4ec:	dd000a15 	stw	r20,40(sp)
8110b4f0:	a811883a 	mov	r8,r21
8110b4f4:	dd001217 	ldw	r20,72(sp)
8110b4f8:	d8800517 	ldw	r2,20(sp)
8110b4fc:	902b883a 	mov	r21,r18
8110b500:	882d883a 	mov	r22,r17
8110b504:	003f8106 	br	8110b30c <__reset+0xfb0eb30c>
8110b508:	b83e2f26 	beq	r23,zero,8110adc8 <__reset+0xfb0eadc8>
8110b50c:	05efc83a 	sub	r23,zero,r23
8110b510:	b88003cc 	andi	r2,r23,15
8110b514:	10000d26 	beq	r2,zero,8110b54c <_strtod_r+0xed0>
8110b518:	100490fa 	slli	r2,r2,3
8110b51c:	00e044b4 	movhi	r3,33042
8110b520:	18d2a404 	addi	r3,r3,19088
8110b524:	1885883a 	add	r2,r3,r2
8110b528:	11800017 	ldw	r6,0(r2)
8110b52c:	11c00117 	ldw	r7,4(r2)
8110b530:	9009883a 	mov	r4,r18
8110b534:	880b883a 	mov	r5,r17
8110b538:	da401315 	stw	r9,76(sp)
8110b53c:	11141980 	call	81114198 <__divdf3>
8110b540:	da401317 	ldw	r9,76(sp)
8110b544:	1025883a 	mov	r18,r2
8110b548:	1823883a 	mov	r17,r3
8110b54c:	b82fd13a 	srai	r23,r23,4
8110b550:	b83e1d26 	beq	r23,zero,8110adc8 <__reset+0xfb0eadc8>
8110b554:	008007c4 	movi	r2,31
8110b558:	15c02816 	blt	r2,r23,8110b5fc <_strtod_r+0xf80>
8110b55c:	b880040c 	andi	r2,r23,16
8110b560:	10019726 	beq	r2,zero,8110bbc0 <_strtod_r+0x1544>
8110b564:	05c1880e 	bge	zero,r23,8110bb88 <_strtod_r+0x150c>
8110b568:	00c01a84 	movi	r3,106
8110b56c:	d8c00915 	stw	r3,36(sp)
8110b570:	04e044b4 	movhi	r19,33042
8110b574:	9cd2e404 	addi	r19,r19,19344
8110b578:	8807883a 	mov	r3,r17
8110b57c:	9005883a 	mov	r2,r18
8110b580:	8023883a 	mov	r17,r16
8110b584:	0009883a 	mov	r4,zero
8110b588:	9821883a 	mov	r16,r19
8110b58c:	da400a15 	stw	r9,40(sp)
8110b590:	1827883a 	mov	r19,r3
8110b594:	b980004c 	andi	r6,r23,1
8110b598:	30000626 	beq	r6,zero,8110b5b4 <_strtod_r+0xf38>
8110b59c:	81800017 	ldw	r6,0(r16)
8110b5a0:	81c00117 	ldw	r7,4(r16)
8110b5a4:	1009883a 	mov	r4,r2
8110b5a8:	180b883a 	mov	r5,r3
8110b5ac:	1114cd80 	call	81114cd8 <__muldf3>
8110b5b0:	01000044 	movi	r4,1
8110b5b4:	b82fd07a 	srai	r23,r23,1
8110b5b8:	84000204 	addi	r16,r16,8
8110b5bc:	b83ff51e 	bne	r23,zero,8110b594 <__reset+0xfb0eb594>
8110b5c0:	21003fcc 	andi	r4,r4,255
8110b5c4:	8821883a 	mov	r16,r17
8110b5c8:	da400a17 	ldw	r9,40(sp)
8110b5cc:	9823883a 	mov	r17,r19
8110b5d0:	2001a51e 	bne	r4,zero,8110bc68 <_strtod_r+0x15ec>
8110b5d4:	d9000917 	ldw	r4,36(sp)
8110b5d8:	20016d1e 	bne	r4,zero,8110bb90 <_strtod_r+0x1514>
8110b5dc:	000d883a 	mov	r6,zero
8110b5e0:	000f883a 	mov	r7,zero
8110b5e4:	9009883a 	mov	r4,r18
8110b5e8:	880b883a 	mov	r5,r17
8110b5ec:	da401315 	stw	r9,76(sp)
8110b5f0:	1114a800 	call	81114a80 <__eqdf2>
8110b5f4:	da401317 	ldw	r9,76(sp)
8110b5f8:	103df41e 	bne	r2,zero,8110adcc <__reset+0xfb0eadcc>
8110b5fc:	00800884 	movi	r2,34
8110b600:	80800015 	stw	r2,0(r16)
8110b604:	002b883a 	mov	r21,zero
8110b608:	002d883a 	mov	r22,zero
8110b60c:	003ce306 	br	8110a99c <__reset+0xfb0ea99c>
8110b610:	055387c4 	movi	r21,19999
8110b614:	003d6b06 	br	8110abc4 <__reset+0xfb0eabc4>
8110b618:	0440d434 	movhi	r17,848
8110b61c:	1c63883a 	add	r17,r3,r17
8110b620:	882d883a 	mov	r22,r17
8110b624:	003ebe06 	br	8110b120 <__reset+0xfb0eb120>
8110b628:	14403fcc 	andi	r17,r2,255
8110b62c:	8c40201c 	xori	r17,r17,128
8110b630:	8c7fe004 	addi	r17,r17,-128
8110b634:	dd400817 	ldw	r21,32(sp)
8110b638:	0027883a 	mov	r19,zero
8110b63c:	0039883a 	mov	fp,zero
8110b640:	002d883a 	mov	r22,zero
8110b644:	003c9906 	br	8110a8ac <__reset+0xfb0ea8ac>
8110b648:	00c00944 	movi	r3,37
8110b64c:	1a47c83a 	sub	r3,r3,r9
8110b650:	1d7d8c16 	blt	r3,r21,8110ac84 <__reset+0xfb0eac84>
8110b654:	1261c83a 	sub	r16,r2,r9
8110b658:	800490fa 	slli	r2,r16,3
8110b65c:	04e044b4 	movhi	r19,33042
8110b660:	9cd2a404 	addi	r19,r19,19088
8110b664:	9885883a 	add	r2,r19,r2
8110b668:	11000017 	ldw	r4,0(r2)
8110b66c:	11400117 	ldw	r5,4(r2)
8110b670:	900d883a 	mov	r6,r18
8110b674:	880f883a 	mov	r7,r17
8110b678:	1114cd80 	call	81114cd8 <__muldf3>
8110b67c:	ac0dc83a 	sub	r6,r21,r16
8110b680:	300c90fa 	slli	r6,r6,3
8110b684:	1009883a 	mov	r4,r2
8110b688:	180b883a 	mov	r5,r3
8110b68c:	9985883a 	add	r2,r19,r6
8110b690:	11800017 	ldw	r6,0(r2)
8110b694:	11c00117 	ldw	r7,4(r2)
8110b698:	1114cd80 	call	81114cd8 <__muldf3>
8110b69c:	102b883a 	mov	r21,r2
8110b6a0:	182d883a 	mov	r22,r3
8110b6a4:	003cbd06 	br	8110a99c <__reset+0xfb0ea99c>
8110b6a8:	b811883a 	mov	r8,r23
8110b6ac:	003e8606 	br	8110b0c8 <__reset+0xfb0eb0c8>
8110b6b0:	d8000d15 	stw	zero,52(sp)
8110b6b4:	05cffc34 	movhi	r23,16368
8110b6b8:	003e8006 	br	8110b0bc <__reset+0xfb0eb0bc>
8110b6bc:	883f011e 	bne	r17,zero,8110b2c4 <__reset+0xfb0eb2c4>
8110b6c0:	dd000a15 	stw	r20,40(sp)
8110b6c4:	dd001217 	ldw	r20,72(sp)
8110b6c8:	a811883a 	mov	r8,r21
8110b6cc:	00800884 	movi	r2,34
8110b6d0:	80800015 	stw	r2,0(r16)
8110b6d4:	002b883a 	mov	r21,zero
8110b6d8:	d8800517 	ldw	r2,20(sp)
8110b6dc:	002d883a 	mov	r22,zero
8110b6e0:	003f0a06 	br	8110b30c <__reset+0xfb0eb30c>
8110b6e4:	d9800517 	ldw	r6,20(sp)
8110b6e8:	30000826 	beq	r6,zero,8110b70c <_strtod_r+0x1090>
8110b6ec:	01400d44 	movi	r5,53
8110b6f0:	d9000204 	addi	r4,sp,8
8110b6f4:	d8801315 	stw	r2,76(sp)
8110b6f8:	1109c640 	call	81109c64 <__copybits>
8110b6fc:	d9400517 	ldw	r5,20(sp)
8110b700:	8009883a 	mov	r4,r16
8110b704:	1108e140 	call	81108e14 <_Bfree>
8110b708:	d8801317 	ldw	r2,76(sp)
8110b70c:	00c00184 	movi	r3,6
8110b710:	1d400f36 	bltu	r3,r21,8110b750 <_strtod_r+0x10d4>
8110b714:	a82a90ba 	slli	r21,r21,2
8110b718:	00e04474 	movhi	r3,33041
8110b71c:	18edcb04 	addi	r3,r3,-18644
8110b720:	a8eb883a 	add	r21,r21,r3
8110b724:	a8c00017 	ldw	r3,0(r21)
8110b728:	1800683a 	jmp	r3
8110b72c:	8110b7a8 	cmpgeui	r4,r16,17118
8110b730:	8110b780 	call	88110b78 <__reset+0x20f0b78>
8110b734:	8110b764 	muli	r4,r16,17117
8110b738:	8110b748 	cmpgei	r4,r16,17117
8110b73c:	8110b770 	cmpltui	r4,r16,17117
8110b740:	8110b780 	call	88110b78 <__reset+0x20f0b78>
8110b744:	8110b7a8 	cmpgeui	r4,r16,17118
8110b748:	045ffc34 	movhi	r17,32752
8110b74c:	0025883a 	mov	r18,zero
8110b750:	1080020c 	andi	r2,r2,8
8110b754:	902b883a 	mov	r21,r18
8110b758:	103c8f26 	beq	r2,zero,8110a998 <__reset+0xfb0ea998>
8110b75c:	8da00034 	orhi	r22,r17,32768
8110b760:	003c8e06 	br	8110a99c <__reset+0xfb0ea99c>
8110b764:	dc800217 	ldw	r18,8(sp)
8110b768:	dc400317 	ldw	r17,12(sp)
8110b76c:	003ff806 	br	8110b750 <__reset+0xfb0eb750>
8110b770:	04600034 	movhi	r17,32768
8110b774:	8c7fffc4 	addi	r17,r17,-1
8110b778:	04bfffc4 	movi	r18,-1
8110b77c:	003ff406 	br	8110b750 <__reset+0xfb0eb750>
8110b780:	d8c00417 	ldw	r3,16(sp)
8110b784:	dc400317 	ldw	r17,12(sp)
8110b788:	013ffc34 	movhi	r4,65520
8110b78c:	18c10cc4 	addi	r3,r3,1075
8110b790:	1806953a 	slli	r3,r3,20
8110b794:	213fffc4 	addi	r4,r4,-1
8110b798:	8922703a 	and	r17,r17,r4
8110b79c:	dc800217 	ldw	r18,8(sp)
8110b7a0:	88e2b03a 	or	r17,r17,r3
8110b7a4:	003fea06 	br	8110b750 <__reset+0xfb0eb750>
8110b7a8:	0023883a 	mov	r17,zero
8110b7ac:	0025883a 	mov	r18,zero
8110b7b0:	003fe706 	br	8110b750 <__reset+0xfb0eb750>
8110b7b4:	01800044 	movi	r6,1
8110b7b8:	50d5883a 	add	r10,r10,r3
8110b7bc:	2a4b883a 	add	r5,r5,r9
8110b7c0:	19811a26 	beq	r3,r6,8110bc2c <_strtod_r+0x15b0>
8110b7c4:	01800204 	movi	r6,8
8110b7c8:	01c00404 	movi	r7,16
8110b7cc:	4a400044 	addi	r9,r9,1
8110b7d0:	48bfffc4 	addi	r2,r9,-1
8110b7d4:	30801616 	blt	r6,r2,8110b830 <_strtod_r+0x11b4>
8110b7d8:	e70002a4 	muli	fp,fp,10
8110b7dc:	497ffb1e 	bne	r9,r5,8110b7cc <__reset+0xfb0eb7cc>
8110b7e0:	d9800617 	ldw	r6,24(sp)
8110b7e4:	4a400044 	addi	r9,r9,1
8110b7e8:	00c00204 	movi	r3,8
8110b7ec:	19400c0e 	bge	r3,r5,8110b820 <_strtod_r+0x11a4>
8110b7f0:	00800404 	movi	r2,16
8110b7f4:	000b883a 	mov	r5,zero
8110b7f8:	127ea316 	blt	r2,r9,8110b288 <__reset+0xfb0eb288>
8110b7fc:	988002a4 	muli	r2,r19,10
8110b800:	20a7883a 	add	r19,r4,r2
8110b804:	003ea006 	br	8110b288 <__reset+0xfb0eb288>
8110b808:	d8800617 	ldw	r2,24(sp)
8110b80c:	8c7ff404 	addi	r17,r17,-48
8110b810:	2a800044 	addi	r10,r5,1
8110b814:	d8800815 	stw	r2,32(sp)
8110b818:	100d883a 	mov	r6,r2
8110b81c:	02400044 	movi	r9,1
8110b820:	e08002a4 	muli	r2,fp,10
8110b824:	000b883a 	mov	r5,zero
8110b828:	88b9883a 	add	fp,r17,r2
8110b82c:	003e9606 	br	8110b288 <__reset+0xfb0eb288>
8110b830:	3a7fea16 	blt	r7,r9,8110b7dc <__reset+0xfb0eb7dc>
8110b834:	9cc002a4 	muli	r19,r19,10
8110b838:	003fe806 	br	8110b7dc <__reset+0xfb0eb7dc>
8110b83c:	00bffa84 	movi	r2,-22
8110b840:	a8bd1016 	blt	r21,r2,8110ac84 <__reset+0xfb0eac84>
8110b844:	a82a90fa 	slli	r21,r21,3
8110b848:	00a044b4 	movhi	r2,33042
8110b84c:	1092a404 	addi	r2,r2,19088
8110b850:	1545c83a 	sub	r2,r2,r21
8110b854:	11800017 	ldw	r6,0(r2)
8110b858:	11c00117 	ldw	r7,4(r2)
8110b85c:	9009883a 	mov	r4,r18
8110b860:	880b883a 	mov	r5,r17
8110b864:	11141980 	call	81114198 <__divdf3>
8110b868:	102b883a 	mov	r21,r2
8110b86c:	182d883a 	mov	r22,r3
8110b870:	003c4a06 	br	8110a99c <__reset+0xfb0ea99c>
8110b874:	dd000a15 	stw	r20,40(sp)
8110b878:	a811883a 	mov	r8,r21
8110b87c:	dd001217 	ldw	r20,72(sp)
8110b880:	003e9e06 	br	8110b2fc <__reset+0xfb0eb2fc>
8110b884:	016044b4 	movhi	r5,33042
8110b888:	d9000617 	ldw	r4,24(sp)
8110b88c:	2952d604 	addi	r5,r5,19288
8110b890:	01c00644 	movi	r7,25
8110b894:	00000b06 	br	8110b8c4 <_strtod_r+0x1248>
8110b898:	21000044 	addi	r4,r4,1
8110b89c:	20800003 	ldbu	r2,0(r4)
8110b8a0:	10ffefc4 	addi	r3,r2,-65
8110b8a4:	10803fcc 	andi	r2,r2,255
8110b8a8:	1080201c 	xori	r2,r2,128
8110b8ac:	18c03fcc 	andi	r3,r3,255
8110b8b0:	10bfe004 	addi	r2,r2,-128
8110b8b4:	38c00136 	bltu	r7,r3,8110b8bc <_strtod_r+0x1240>
8110b8b8:	10800804 	addi	r2,r2,32
8110b8bc:	29400044 	addi	r5,r5,1
8110b8c0:	11bbbb1e 	bne	r2,r6,8110a7b0 <__reset+0xfb0ea7b0>
8110b8c4:	29800007 	ldb	r6,0(r5)
8110b8c8:	303ff31e 	bne	r6,zero,8110b898 <__reset+0xfb0eb898>
8110b8cc:	01a044b4 	movhi	r6,33042
8110b8d0:	d9000615 	stw	r4,24(sp)
8110b8d4:	3192d704 	addi	r6,r6,19292
8110b8d8:	200b883a 	mov	r5,r4
8110b8dc:	02000644 	movi	r8,25
8110b8e0:	00000a06 	br	8110b90c <_strtod_r+0x1290>
8110b8e4:	28800003 	ldbu	r2,0(r5)
8110b8e8:	10ffefc4 	addi	r3,r2,-65
8110b8ec:	10803fcc 	andi	r2,r2,255
8110b8f0:	1080201c 	xori	r2,r2,128
8110b8f4:	18c03fcc 	andi	r3,r3,255
8110b8f8:	10bfe004 	addi	r2,r2,-128
8110b8fc:	40c00136 	bltu	r8,r3,8110b904 <_strtod_r+0x1288>
8110b900:	10800804 	addi	r2,r2,32
8110b904:	31800044 	addi	r6,r6,1
8110b908:	11c0711e 	bne	r2,r7,8110bad0 <_strtod_r+0x1454>
8110b90c:	31c00007 	ldb	r7,0(r6)
8110b910:	29400044 	addi	r5,r5,1
8110b914:	383ff31e 	bne	r7,zero,8110b8e4 <__reset+0xfb0eb8e4>
8110b918:	d9400615 	stw	r5,24(sp)
8110b91c:	045ffc34 	movhi	r17,32752
8110b920:	0025883a 	mov	r18,zero
8110b924:	003c1b06 	br	8110a994 <__reset+0xfb0ea994>
8110b928:	000b883a 	mov	r5,zero
8110b92c:	003ccc06 	br	8110ac60 <__reset+0xfb0eac60>
8110b930:	d9400e17 	ldw	r5,56(sp)
8110b934:	dd000a15 	stw	r20,40(sp)
8110b938:	00800434 	movhi	r2,16
8110b93c:	a811883a 	mov	r8,r21
8110b940:	dd001217 	ldw	r20,72(sp)
8110b944:	dd401117 	ldw	r21,68(sp)
8110b948:	dd801017 	ldw	r22,64(sp)
8110b94c:	10bfffc4 	addi	r2,r2,-1
8110b950:	28005626 	beq	r5,zero,8110baac <_strtod_r+0x1430>
8110b954:	8886703a 	and	r3,r17,r2
8110b958:	18807826 	beq	r3,r2,8110bb3c <_strtod_r+0x14c0>
8110b95c:	d8c00b17 	ldw	r3,44(sp)
8110b960:	18005726 	beq	r3,zero,8110bac0 <_strtod_r+0x1444>
8110b964:	1c44703a 	and	r2,r3,r17
8110b968:	10000f26 	beq	r2,zero,8110b9a8 <_strtod_r+0x132c>
8110b96c:	d9000e17 	ldw	r4,56(sp)
8110b970:	d9800917 	ldw	r6,36(sp)
8110b974:	20005e26 	beq	r4,zero,8110baf0 <_strtod_r+0x1474>
8110b978:	9009883a 	mov	r4,r18
8110b97c:	880b883a 	mov	r5,r17
8110b980:	da001315 	stw	r8,76(sp)
8110b984:	110a6180 	call	8110a618 <sulp>
8110b988:	100d883a 	mov	r6,r2
8110b98c:	180f883a 	mov	r7,r3
8110b990:	9009883a 	mov	r4,r18
8110b994:	880b883a 	mov	r5,r17
8110b998:	11138ec0 	call	811138ec <__adddf3>
8110b99c:	da001317 	ldw	r8,76(sp)
8110b9a0:	102b883a 	mov	r21,r2
8110b9a4:	182d883a 	mov	r22,r3
8110b9a8:	d8c00917 	ldw	r3,36(sp)
8110b9ac:	18000f26 	beq	r3,zero,8110b9ec <_strtod_r+0x1370>
8110b9b0:	a809883a 	mov	r4,r21
8110b9b4:	b00b883a 	mov	r5,r22
8110b9b8:	000d883a 	mov	r6,zero
8110b9bc:	01ce5434 	movhi	r7,14672
8110b9c0:	da001315 	stw	r8,76(sp)
8110b9c4:	1114cd80 	call	81114cd8 <__muldf3>
8110b9c8:	102b883a 	mov	r21,r2
8110b9cc:	182d883a 	mov	r22,r3
8110b9d0:	da001317 	ldw	r8,76(sp)
8110b9d4:	1800051e 	bne	r3,zero,8110b9ec <_strtod_r+0x1370>
8110b9d8:	d8800517 	ldw	r2,20(sp)
8110b9dc:	a83e4b1e 	bne	r21,zero,8110b30c <__reset+0xfb0eb30c>
8110b9e0:	00c00884 	movi	r3,34
8110b9e4:	80c00015 	stw	r3,0(r16)
8110b9e8:	003e4806 	br	8110b30c <__reset+0xfb0eb30c>
8110b9ec:	d8800517 	ldw	r2,20(sp)
8110b9f0:	003e4606 	br	8110b30c <__reset+0xfb0eb30c>
8110b9f4:	d9000e17 	ldw	r4,56(sp)
8110b9f8:	dd000a15 	stw	r20,40(sp)
8110b9fc:	a811883a 	mov	r8,r21
8110ba00:	dd001217 	ldw	r20,72(sp)
8110ba04:	dd401117 	ldw	r21,68(sp)
8110ba08:	dd801017 	ldw	r22,64(sp)
8110ba0c:	203fe61e 	bne	r4,zero,8110b9a8 <__reset+0xfb0eb9a8>
8110ba10:	903fe51e 	bne	r18,zero,8110b9a8 <__reset+0xfb0eb9a8>
8110ba14:	00800434 	movhi	r2,16
8110ba18:	10bfffc4 	addi	r2,r2,-1
8110ba1c:	8884703a 	and	r2,r17,r2
8110ba20:	103fe11e 	bne	r2,zero,8110b9a8 <__reset+0xfb0eb9a8>
8110ba24:	8ddffc2c 	andhi	r23,r17,32752
8110ba28:	0081ac34 	movhi	r2,1712
8110ba2c:	15ffde2e 	bgeu	r2,r23,8110b9a8 <__reset+0xfb0eb9a8>
8110ba30:	40800517 	ldw	r2,20(r8)
8110ba34:	1000031e 	bne	r2,zero,8110ba44 <_strtod_r+0x13c8>
8110ba38:	40800417 	ldw	r2,16(r8)
8110ba3c:	00c00044 	movi	r3,1
8110ba40:	18bfd90e 	bge	r3,r2,8110b9a8 <__reset+0xfb0eb9a8>
8110ba44:	400b883a 	mov	r5,r8
8110ba48:	01800044 	movi	r6,1
8110ba4c:	8009883a 	mov	r4,r16
8110ba50:	11094ec0 	call	811094ec <__lshift>
8110ba54:	980b883a 	mov	r5,r19
8110ba58:	1009883a 	mov	r4,r2
8110ba5c:	d8801315 	stw	r2,76(sp)
8110ba60:	11096340 	call	81109634 <__mcmp>
8110ba64:	da001317 	ldw	r8,76(sp)
8110ba68:	00bfcf0e 	bge	zero,r2,8110b9a8 <__reset+0xfb0eb9a8>
8110ba6c:	d8c00917 	ldw	r3,36(sp)
8110ba70:	18005c26 	beq	r3,zero,8110bbe4 <_strtod_r+0x1568>
8110ba74:	0081ac34 	movhi	r2,1712
8110ba78:	15c05a16 	blt	r2,r23,8110bbe4 <_strtod_r+0x1568>
8110ba7c:	0080dc34 	movhi	r2,880
8110ba80:	15ffcb16 	blt	r2,r23,8110b9b0 <__reset+0xfb0eb9b0>
8110ba84:	003f1106 	br	8110b6cc <__reset+0xfb0eb6cc>
8110ba88:	002d883a 	mov	r22,zero
8110ba8c:	022ff834 	movhi	r8,49120
8110ba90:	d8000d15 	stw	zero,52(sp)
8110ba94:	05cff834 	movhi	r23,16352
8110ba98:	003ded06 	br	8110b250 <__reset+0xfb0eb250>
8110ba9c:	0440d434 	movhi	r17,848
8110baa0:	1c63883a 	add	r17,r3,r17
8110baa4:	d8000915 	stw	zero,36(sp)
8110baa8:	003cc806 	br	8110adcc <__reset+0xfb0eadcc>
8110baac:	8884703a 	and	r2,r17,r2
8110bab0:	103faa1e 	bne	r2,zero,8110b95c <__reset+0xfb0eb95c>
8110bab4:	903fa91e 	bne	r18,zero,8110b95c <__reset+0xfb0eb95c>
8110bab8:	8ddffc2c 	andhi	r23,r17,32752
8110babc:	003feb06 	br	8110ba6c <__reset+0xfb0eba6c>
8110bac0:	d8c00d17 	ldw	r3,52(sp)
8110bac4:	1cae703a 	and	r23,r3,r18
8110bac8:	b83fb726 	beq	r23,zero,8110b9a8 <__reset+0xfb0eb9a8>
8110bacc:	003fa706 	br	8110b96c <__reset+0xfb0eb96c>
8110bad0:	21000044 	addi	r4,r4,1
8110bad4:	d9000615 	stw	r4,24(sp)
8110bad8:	003f9006 	br	8110b91c <__reset+0xfb0eb91c>
8110badc:	016044b4 	movhi	r5,33042
8110bae0:	29529a04 	addi	r5,r5,19048
8110bae4:	d9400915 	stw	r5,36(sp)
8110bae8:	0027883a 	mov	r19,zero
8110baec:	003ca206 	br	8110ad78 <__reset+0xfb0ead78>
8110baf0:	9009883a 	mov	r4,r18
8110baf4:	880b883a 	mov	r5,r17
8110baf8:	da001315 	stw	r8,76(sp)
8110bafc:	110a6180 	call	8110a618 <sulp>
8110bb00:	100d883a 	mov	r6,r2
8110bb04:	180f883a 	mov	r7,r3
8110bb08:	9009883a 	mov	r4,r18
8110bb0c:	880b883a 	mov	r5,r17
8110bb10:	11153f00 	call	811153f0 <__subdf3>
8110bb14:	000d883a 	mov	r6,zero
8110bb18:	000f883a 	mov	r7,zero
8110bb1c:	1009883a 	mov	r4,r2
8110bb20:	180b883a 	mov	r5,r3
8110bb24:	102b883a 	mov	r21,r2
8110bb28:	182d883a 	mov	r22,r3
8110bb2c:	1114a800 	call	81114a80 <__eqdf2>
8110bb30:	da001317 	ldw	r8,76(sp)
8110bb34:	103ee526 	beq	r2,zero,8110b6cc <__reset+0xfb0eb6cc>
8110bb38:	003f9b06 	br	8110b9a8 <__reset+0xfb0eb9a8>
8110bb3c:	d8800917 	ldw	r2,36(sp)
8110bb40:	10002226 	beq	r2,zero,8110bbcc <_strtod_r+0x1550>
8110bb44:	889ffc2c 	andhi	r2,r17,32752
8110bb48:	00c1a834 	movhi	r3,1696
8110bb4c:	18801f36 	bltu	r3,r2,8110bbcc <_strtod_r+0x1550>
8110bb50:	1004d53a 	srli	r2,r2,20
8110bb54:	00c01ac4 	movi	r3,107
8110bb58:	1887c83a 	sub	r3,r3,r2
8110bb5c:	00bfffc4 	movi	r2,-1
8110bb60:	10c4983a 	sll	r2,r2,r3
8110bb64:	14bf7d1e 	bne	r2,r18,8110b95c <__reset+0xfb0eb95c>
8110bb68:	00dffc34 	movhi	r3,32752
8110bb6c:	18ffffc4 	addi	r3,r3,-1
8110bb70:	88c03526 	beq	r17,r3,8110bc48 <_strtod_r+0x15cc>
8110bb74:	8c5ffc2c 	andhi	r17,r17,32752
8110bb78:	00800434 	movhi	r2,16
8110bb7c:	002b883a 	mov	r21,zero
8110bb80:	88ad883a 	add	r22,r17,r2
8110bb84:	003f8806 	br	8110b9a8 <__reset+0xfb0eb9a8>
8110bb88:	01401a84 	movi	r5,106
8110bb8c:	d9400915 	stw	r5,36(sp)
8110bb90:	8ddffc2c 	andhi	r23,r17,32752
8110bb94:	b82ed53a 	srli	r23,r23,20
8110bb98:	00801ac4 	movi	r2,107
8110bb9c:	15c5c83a 	sub	r2,r2,r23
8110bba0:	00be8e0e 	bge	zero,r2,8110b5dc <__reset+0xfb0eb5dc>
8110bba4:	00c007c4 	movi	r3,31
8110bba8:	18800a0e 	bge	r3,r2,8110bbd4 <_strtod_r+0x1558>
8110bbac:	00c00d04 	movi	r3,52
8110bbb0:	0025883a 	mov	r18,zero
8110bbb4:	1880270e 	bge	r3,r2,8110bc54 <_strtod_r+0x15d8>
8110bbb8:	0440dc34 	movhi	r17,880
8110bbbc:	003e8706 	br	8110b5dc <__reset+0xfb0eb5dc>
8110bbc0:	d8000915 	stw	zero,36(sp)
8110bbc4:	05fe6a16 	blt	zero,r23,8110b570 <__reset+0xfb0eb570>
8110bbc8:	003e8406 	br	8110b5dc <__reset+0xfb0eb5dc>
8110bbcc:	00bfffc4 	movi	r2,-1
8110bbd0:	003fe406 	br	8110bb64 <__reset+0xfb0ebb64>
8110bbd4:	00ffffc4 	movi	r3,-1
8110bbd8:	1884983a 	sll	r2,r3,r2
8110bbdc:	14a4703a 	and	r18,r2,r18
8110bbe0:	003e7e06 	br	8110b5dc <__reset+0xfb0eb5dc>
8110bbe4:	00bffc34 	movhi	r2,65520
8110bbe8:	b8af883a 	add	r23,r23,r2
8110bbec:	057fffc4 	movi	r21,-1
8110bbf0:	00800434 	movhi	r2,16
8110bbf4:	1545883a 	add	r2,r2,r21
8110bbf8:	b8acb03a 	or	r22,r23,r2
8110bbfc:	003f6a06 	br	8110b9a8 <__reset+0xfb0eb9a8>
8110bc00:	016044b4 	movhi	r5,33042
8110bc04:	2952da04 	addi	r5,r5,19304
8110bc08:	d9800204 	addi	r6,sp,8
8110bc0c:	d9000604 	addi	r4,sp,24
8110bc10:	1110fa00 	call	81110fa0 <__hexnan>
8110bc14:	00c00144 	movi	r3,5
8110bc18:	10fb5c1e 	bne	r2,r3,8110a98c <__reset+0xfb0ea98c>
8110bc1c:	dc400317 	ldw	r17,12(sp)
8110bc20:	dc800217 	ldw	r18,8(sp)
8110bc24:	8c5ffc34 	orhi	r17,r17,32752
8110bc28:	003b5a06 	br	8110a994 <__reset+0xfb0ea994>
8110bc2c:	480b883a 	mov	r5,r9
8110bc30:	d9800617 	ldw	r6,24(sp)
8110bc34:	4a400044 	addi	r9,r9,1
8110bc38:	003eeb06 	br	8110b7e8 <__reset+0xfb0eb7e8>
8110bc3c:	1025883a 	mov	r18,r2
8110bc40:	1823883a 	mov	r17,r3
8110bc44:	003c4c06 	br	8110ad78 <__reset+0xfb0ead78>
8110bc48:	00ffffc4 	movi	r3,-1
8110bc4c:	10ffc91e 	bne	r2,r3,8110bb74 <__reset+0xfb0ebb74>
8110bc50:	003da906 	br	8110b2f8 <__reset+0xfb0eb2f8>
8110bc54:	10bff804 	addi	r2,r2,-32
8110bc58:	00ffffc4 	movi	r3,-1
8110bc5c:	1884983a 	sll	r2,r3,r2
8110bc60:	1462703a 	and	r17,r2,r17
8110bc64:	003e5d06 	br	8110b5dc <__reset+0xfb0eb5dc>
8110bc68:	1025883a 	mov	r18,r2
8110bc6c:	1823883a 	mov	r17,r3
8110bc70:	003e5806 	br	8110b5d4 <__reset+0xfb0eb5d4>

8110bc74 <strtod>:
8110bc74:	00a044b4 	movhi	r2,33042
8110bc78:	109b9c04 	addi	r2,r2,28272
8110bc7c:	280d883a 	mov	r6,r5
8110bc80:	200b883a 	mov	r5,r4
8110bc84:	11000017 	ldw	r4,0(r2)
8110bc88:	110a67c1 	jmpi	8110a67c <_strtod_r>

8110bc8c <strtof>:
8110bc8c:	defffb04 	addi	sp,sp,-20
8110bc90:	dcc00315 	stw	r19,12(sp)
8110bc94:	04e044b4 	movhi	r19,33042
8110bc98:	9cdb9c04 	addi	r19,r19,28272
8110bc9c:	280d883a 	mov	r6,r5
8110bca0:	200b883a 	mov	r5,r4
8110bca4:	99000017 	ldw	r4,0(r19)
8110bca8:	dfc00415 	stw	ra,16(sp)
8110bcac:	dc800215 	stw	r18,8(sp)
8110bcb0:	dc400115 	stw	r17,4(sp)
8110bcb4:	dc000015 	stw	r16,0(sp)
8110bcb8:	110a67c0 	call	8110a67c <_strtod_r>
8110bcbc:	1009883a 	mov	r4,r2
8110bcc0:	180b883a 	mov	r5,r3
8110bcc4:	1025883a 	mov	r18,r2
8110bcc8:	1823883a 	mov	r17,r3
8110bccc:	1115ef00 	call	81115ef0 <__truncdfsf2>
8110bcd0:	000b883a 	mov	r5,zero
8110bcd4:	1009883a 	mov	r4,r2
8110bcd8:	1021883a 	mov	r16,r2
8110bcdc:	11136f00 	call	811136f0 <__eqsf2>
8110bce0:	1000111e 	bne	r2,zero,8110bd28 <strtof+0x9c>
8110bce4:	000d883a 	mov	r6,zero
8110bce8:	000f883a 	mov	r7,zero
8110bcec:	9009883a 	mov	r4,r18
8110bcf0:	880b883a 	mov	r5,r17
8110bcf4:	1114a800 	call	81114a80 <__eqdf2>
8110bcf8:	10000b26 	beq	r2,zero,8110bd28 <strtof+0x9c>
8110bcfc:	98800017 	ldw	r2,0(r19)
8110bd00:	00c00884 	movi	r3,34
8110bd04:	10c00015 	stw	r3,0(r2)
8110bd08:	8005883a 	mov	r2,r16
8110bd0c:	dfc00417 	ldw	ra,16(sp)
8110bd10:	dcc00317 	ldw	r19,12(sp)
8110bd14:	dc800217 	ldw	r18,8(sp)
8110bd18:	dc400117 	ldw	r17,4(sp)
8110bd1c:	dc000017 	ldw	r16,0(sp)
8110bd20:	dec00504 	addi	sp,sp,20
8110bd24:	f800283a 	ret
8110bd28:	015fe034 	movhi	r5,32640
8110bd2c:	297fffc4 	addi	r5,r5,-1
8110bd30:	8009883a 	mov	r4,r16
8110bd34:	11137680 	call	81113768 <__gesf2>
8110bd38:	0080070e 	bge	zero,r2,8110bd58 <strtof+0xcc>
8110bd3c:	01dffc34 	movhi	r7,32752
8110bd40:	39ffffc4 	addi	r7,r7,-1
8110bd44:	01bfffc4 	movi	r6,-1
8110bd48:	9009883a 	mov	r4,r18
8110bd4c:	880b883a 	mov	r5,r17
8110bd50:	1114b080 	call	81114b08 <__gedf2>
8110bd54:	00bfe90e 	bge	zero,r2,8110bcfc <__reset+0xfb0ebcfc>
8110bd58:	017fe034 	movhi	r5,65408
8110bd5c:	297fffc4 	addi	r5,r5,-1
8110bd60:	8009883a 	mov	r4,r16
8110bd64:	11138240 	call	81113824 <__lesf2>
8110bd68:	103fe70e 	bge	r2,zero,8110bd08 <__reset+0xfb0ebd08>
8110bd6c:	01fffc34 	movhi	r7,65520
8110bd70:	39ffffc4 	addi	r7,r7,-1
8110bd74:	01bfffc4 	movi	r6,-1
8110bd78:	9009883a 	mov	r4,r18
8110bd7c:	880b883a 	mov	r5,r17
8110bd80:	1114be40 	call	81114be4 <__ledf2>
8110bd84:	103fdd0e 	bge	r2,zero,8110bcfc <__reset+0xfb0ebcfc>
8110bd88:	003fdf06 	br	8110bd08 <__reset+0xfb0ebd08>

8110bd8c <_strtol_r>:
8110bd8c:	00a044b4 	movhi	r2,33042
8110bd90:	defff404 	addi	sp,sp,-48
8110bd94:	109b9f04 	addi	r2,r2,28284
8110bd98:	dd400715 	stw	r21,28(sp)
8110bd9c:	15400017 	ldw	r21,0(r2)
8110bda0:	dd800815 	stw	r22,32(sp)
8110bda4:	dd000615 	stw	r20,24(sp)
8110bda8:	dcc00515 	stw	r19,20(sp)
8110bdac:	d9000015 	stw	r4,0(sp)
8110bdb0:	dfc00b15 	stw	ra,44(sp)
8110bdb4:	df000a15 	stw	fp,40(sp)
8110bdb8:	ddc00915 	stw	r23,36(sp)
8110bdbc:	dc800415 	stw	r18,16(sp)
8110bdc0:	dc400315 	stw	r17,12(sp)
8110bdc4:	dc000215 	stw	r16,8(sp)
8110bdc8:	2829883a 	mov	r20,r5
8110bdcc:	3027883a 	mov	r19,r6
8110bdd0:	382d883a 	mov	r22,r7
8110bdd4:	2809883a 	mov	r4,r5
8110bdd8:	24000003 	ldbu	r16,0(r4)
8110bddc:	24400044 	addi	r17,r4,1
8110bde0:	2007883a 	mov	r3,r4
8110bde4:	ac05883a 	add	r2,r21,r16
8110bde8:	10800043 	ldbu	r2,1(r2)
8110bdec:	8809883a 	mov	r4,r17
8110bdf0:	1080020c 	andi	r2,r2,8
8110bdf4:	103ff81e 	bne	r2,zero,8110bdd8 <__reset+0xfb0ebdd8>
8110bdf8:	00800b44 	movi	r2,45
8110bdfc:	80805826 	beq	r16,r2,8110bf60 <_strtol_r+0x1d4>
8110be00:	00800ac4 	movi	r2,43
8110be04:	80805a26 	beq	r16,r2,8110bf70 <_strtol_r+0x1e4>
8110be08:	0039883a 	mov	fp,zero
8110be0c:	b0004426 	beq	r22,zero,8110bf20 <_strtol_r+0x194>
8110be10:	00800404 	movi	r2,16
8110be14:	b0806026 	beq	r22,r2,8110bf98 <_strtol_r+0x20c>
8110be18:	b02f883a 	mov	r23,r22
8110be1c:	00a00034 	movhi	r2,32768
8110be20:	e025003a 	cmpeq	r18,fp,zero
8110be24:	14a5c83a 	sub	r18,r2,r18
8110be28:	b80b883a 	mov	r5,r23
8110be2c:	9009883a 	mov	r4,r18
8110be30:	11136980 	call	81113698 <__umodsi3>
8110be34:	b80b883a 	mov	r5,r23
8110be38:	9009883a 	mov	r4,r18
8110be3c:	d8800115 	stw	r2,4(sp)
8110be40:	11136340 	call	81113634 <__udivsi3>
8110be44:	ac07883a 	add	r3,r21,r16
8110be48:	18c00043 	ldbu	r3,1(r3)
8110be4c:	880b883a 	mov	r5,r17
8110be50:	000d883a 	mov	r6,zero
8110be54:	1a00010c 	andi	r8,r3,4
8110be58:	0009883a 	mov	r4,zero
8110be5c:	02800044 	movi	r10,1
8110be60:	027fffc4 	movi	r9,-1
8110be64:	d9c00117 	ldw	r7,4(sp)
8110be68:	40000e26 	beq	r8,zero,8110bea4 <_strtol_r+0x118>
8110be6c:	843ff404 	addi	r16,r16,-48
8110be70:	8580120e 	bge	r16,r22,8110bebc <_strtol_r+0x130>
8110be74:	32400526 	beq	r6,r9,8110be8c <_strtol_r+0x100>
8110be78:	11002536 	bltu	r2,r4,8110bf10 <_strtol_r+0x184>
8110be7c:	20802326 	beq	r4,r2,8110bf0c <_strtol_r+0x180>
8110be80:	25c9383a 	mul	r4,r4,r23
8110be84:	01800044 	movi	r6,1
8110be88:	8109883a 	add	r4,r16,r4
8110be8c:	2c000003 	ldbu	r16,0(r5)
8110be90:	29400044 	addi	r5,r5,1
8110be94:	ac07883a 	add	r3,r21,r16
8110be98:	18c00043 	ldbu	r3,1(r3)
8110be9c:	1a00010c 	andi	r8,r3,4
8110bea0:	403ff21e 	bne	r8,zero,8110be6c <__reset+0xfb0ebe6c>
8110bea4:	18c000cc 	andi	r3,r3,3
8110bea8:	18000426 	beq	r3,zero,8110bebc <_strtol_r+0x130>
8110beac:	1a801a26 	beq	r3,r10,8110bf18 <_strtol_r+0x18c>
8110beb0:	00c015c4 	movi	r3,87
8110beb4:	80e1c83a 	sub	r16,r16,r3
8110beb8:	85bfee16 	blt	r16,r22,8110be74 <__reset+0xfb0ebe74>
8110bebc:	00bfffc4 	movi	r2,-1
8110bec0:	30801e26 	beq	r6,r2,8110bf3c <_strtol_r+0x1b0>
8110bec4:	e0001b1e 	bne	fp,zero,8110bf34 <_strtol_r+0x1a8>
8110bec8:	2005883a 	mov	r2,r4
8110becc:	98000326 	beq	r19,zero,8110bedc <_strtol_r+0x150>
8110bed0:	3000211e 	bne	r6,zero,8110bf58 <_strtol_r+0x1cc>
8110bed4:	a00b883a 	mov	r5,r20
8110bed8:	99400015 	stw	r5,0(r19)
8110bedc:	dfc00b17 	ldw	ra,44(sp)
8110bee0:	df000a17 	ldw	fp,40(sp)
8110bee4:	ddc00917 	ldw	r23,36(sp)
8110bee8:	dd800817 	ldw	r22,32(sp)
8110beec:	dd400717 	ldw	r21,28(sp)
8110bef0:	dd000617 	ldw	r20,24(sp)
8110bef4:	dcc00517 	ldw	r19,20(sp)
8110bef8:	dc800417 	ldw	r18,16(sp)
8110befc:	dc400317 	ldw	r17,12(sp)
8110bf00:	dc000217 	ldw	r16,8(sp)
8110bf04:	dec00c04 	addi	sp,sp,48
8110bf08:	f800283a 	ret
8110bf0c:	3c3fdc0e 	bge	r7,r16,8110be80 <__reset+0xfb0ebe80>
8110bf10:	01bfffc4 	movi	r6,-1
8110bf14:	003fdd06 	br	8110be8c <__reset+0xfb0ebe8c>
8110bf18:	00c00dc4 	movi	r3,55
8110bf1c:	003fe506 	br	8110beb4 <__reset+0xfb0ebeb4>
8110bf20:	00800c04 	movi	r2,48
8110bf24:	80801626 	beq	r16,r2,8110bf80 <_strtol_r+0x1f4>
8110bf28:	05800284 	movi	r22,10
8110bf2c:	b02f883a 	mov	r23,r22
8110bf30:	003fba06 	br	8110be1c <__reset+0xfb0ebe1c>
8110bf34:	0109c83a 	sub	r4,zero,r4
8110bf38:	003fe306 	br	8110bec8 <__reset+0xfb0ebec8>
8110bf3c:	d9000017 	ldw	r4,0(sp)
8110bf40:	00c00884 	movi	r3,34
8110bf44:	e005003a 	cmpeq	r2,fp,zero
8110bf48:	20c00015 	stw	r3,0(r4)
8110bf4c:	00e00034 	movhi	r3,32768
8110bf50:	1885c83a 	sub	r2,r3,r2
8110bf54:	983fe126 	beq	r19,zero,8110bedc <__reset+0xfb0ebedc>
8110bf58:	297fffc4 	addi	r5,r5,-1
8110bf5c:	003fde06 	br	8110bed8 <__reset+0xfb0ebed8>
8110bf60:	1c400084 	addi	r17,r3,2
8110bf64:	1c000043 	ldbu	r16,1(r3)
8110bf68:	07000044 	movi	fp,1
8110bf6c:	003fa706 	br	8110be0c <__reset+0xfb0ebe0c>
8110bf70:	1c400084 	addi	r17,r3,2
8110bf74:	1c000043 	ldbu	r16,1(r3)
8110bf78:	0039883a 	mov	fp,zero
8110bf7c:	003fa306 	br	8110be0c <__reset+0xfb0ebe0c>
8110bf80:	88800003 	ldbu	r2,0(r17)
8110bf84:	00c01604 	movi	r3,88
8110bf88:	108037cc 	andi	r2,r2,223
8110bf8c:	10c00826 	beq	r2,r3,8110bfb0 <_strtol_r+0x224>
8110bf90:	05800204 	movi	r22,8
8110bf94:	003fa006 	br	8110be18 <__reset+0xfb0ebe18>
8110bf98:	00800c04 	movi	r2,48
8110bf9c:	80bf9e1e 	bne	r16,r2,8110be18 <__reset+0xfb0ebe18>
8110bfa0:	88800003 	ldbu	r2,0(r17)
8110bfa4:	00c01604 	movi	r3,88
8110bfa8:	108037cc 	andi	r2,r2,223
8110bfac:	10ff9a1e 	bne	r2,r3,8110be18 <__reset+0xfb0ebe18>
8110bfb0:	05c00404 	movi	r23,16
8110bfb4:	8c000043 	ldbu	r16,1(r17)
8110bfb8:	b82d883a 	mov	r22,r23
8110bfbc:	8c400084 	addi	r17,r17,2
8110bfc0:	003f9606 	br	8110be1c <__reset+0xfb0ebe1c>

8110bfc4 <strtol>:
8110bfc4:	00a044b4 	movhi	r2,33042
8110bfc8:	109b9c04 	addi	r2,r2,28272
8110bfcc:	300f883a 	mov	r7,r6
8110bfd0:	280d883a 	mov	r6,r5
8110bfd4:	200b883a 	mov	r5,r4
8110bfd8:	11000017 	ldw	r4,0(r2)
8110bfdc:	110bd8c1 	jmpi	8110bd8c <_strtol_r>

8110bfe0 <_strtoll_r>:
8110bfe0:	00a044b4 	movhi	r2,33042
8110bfe4:	defff304 	addi	sp,sp,-52
8110bfe8:	109b9f04 	addi	r2,r2,28284
8110bfec:	dc800515 	stw	r18,20(sp)
8110bff0:	14800017 	ldw	r18,0(r2)
8110bff4:	dd800915 	stw	r22,36(sp)
8110bff8:	dd400815 	stw	r21,32(sp)
8110bffc:	dcc00615 	stw	r19,24(sp)
8110c000:	d9000015 	stw	r4,0(sp)
8110c004:	dfc00c15 	stw	ra,48(sp)
8110c008:	df000b15 	stw	fp,44(sp)
8110c00c:	ddc00a15 	stw	r23,40(sp)
8110c010:	dd000715 	stw	r20,28(sp)
8110c014:	dc400415 	stw	r17,16(sp)
8110c018:	dc000315 	stw	r16,12(sp)
8110c01c:	282d883a 	mov	r22,r5
8110c020:	302b883a 	mov	r21,r6
8110c024:	3827883a 	mov	r19,r7
8110c028:	2809883a 	mov	r4,r5
8110c02c:	24000003 	ldbu	r16,0(r4)
8110c030:	24400044 	addi	r17,r4,1
8110c034:	2007883a 	mov	r3,r4
8110c038:	9405883a 	add	r2,r18,r16
8110c03c:	10800043 	ldbu	r2,1(r2)
8110c040:	8809883a 	mov	r4,r17
8110c044:	1080020c 	andi	r2,r2,8
8110c048:	103ff81e 	bne	r2,zero,8110c02c <__reset+0xfb0ec02c>
8110c04c:	00800b44 	movi	r2,45
8110c050:	80807826 	beq	r16,r2,8110c234 <_strtoll_r+0x254>
8110c054:	00800ac4 	movi	r2,43
8110c058:	80807a26 	beq	r16,r2,8110c244 <_strtoll_r+0x264>
8110c05c:	0039883a 	mov	fp,zero
8110c060:	98004e26 	beq	r19,zero,8110c19c <_strtoll_r+0x1bc>
8110c064:	00800404 	movi	r2,16
8110c068:	98808226 	beq	r19,r2,8110c274 <_strtoll_r+0x294>
8110c06c:	982fd7fa 	srai	r23,r19,31
8110c070:	9829883a 	mov	r20,r19
8110c074:	e0004f26 	beq	fp,zero,8110c1b4 <_strtoll_r+0x1d4>
8110c078:	0017883a 	mov	r11,zero
8110c07c:	02a00034 	movhi	r10,32768
8110c080:	5809883a 	mov	r4,r11
8110c084:	500b883a 	mov	r5,r10
8110c088:	a00d883a 	mov	r6,r20
8110c08c:	b80f883a 	mov	r7,r23
8110c090:	da800215 	stw	r10,8(sp)
8110c094:	dac00115 	stw	r11,4(sp)
8110c098:	11130040 	call	81113004 <__umoddi3>
8110c09c:	dac00117 	ldw	r11,4(sp)
8110c0a0:	da800217 	ldw	r10,8(sp)
8110c0a4:	a00d883a 	mov	r6,r20
8110c0a8:	5809883a 	mov	r4,r11
8110c0ac:	500b883a 	mov	r5,r10
8110c0b0:	b80f883a 	mov	r7,r23
8110c0b4:	d8800115 	stw	r2,4(sp)
8110c0b8:	1112a8c0 	call	81112a8c <__udivdi3>
8110c0bc:	9409883a 	add	r4,r18,r16
8110c0c0:	21000043 	ldbu	r4,1(r4)
8110c0c4:	1019883a 	mov	r12,r2
8110c0c8:	880b883a 	mov	r5,r17
8110c0cc:	2240010c 	andi	r9,r4,4
8110c0d0:	0015883a 	mov	r10,zero
8110c0d4:	000d883a 	mov	r6,zero
8110c0d8:	000f883a 	mov	r7,zero
8110c0dc:	03400044 	movi	r13,1
8110c0e0:	02ffffc4 	movi	r11,-1
8110c0e4:	da000117 	ldw	r8,4(sp)
8110c0e8:	48000d26 	beq	r9,zero,8110c120 <_strtoll_r+0x140>
8110c0ec:	843ff404 	addi	r16,r16,-48
8110c0f0:	84c0110e 	bge	r16,r19,8110c138 <_strtoll_r+0x158>
8110c0f4:	52c00426 	beq	r10,r11,8110c108 <_strtoll_r+0x128>
8110c0f8:	19c00236 	bltu	r3,r7,8110c104 <_strtoll_r+0x124>
8110c0fc:	38c0311e 	bne	r7,r3,8110c1c4 <_strtoll_r+0x1e4>
8110c100:	6180302e 	bgeu	r12,r6,8110c1c4 <_strtoll_r+0x1e4>
8110c104:	02bfffc4 	movi	r10,-1
8110c108:	2c000003 	ldbu	r16,0(r5)
8110c10c:	29400044 	addi	r5,r5,1
8110c110:	9409883a 	add	r4,r18,r16
8110c114:	21000043 	ldbu	r4,1(r4)
8110c118:	2240010c 	andi	r9,r4,4
8110c11c:	483ff31e 	bne	r9,zero,8110c0ec <__reset+0xfb0ec0ec>
8110c120:	210000cc 	andi	r4,r4,3
8110c124:	20000426 	beq	r4,zero,8110c138 <_strtoll_r+0x158>
8110c128:	23403426 	beq	r4,r13,8110c1fc <_strtoll_r+0x21c>
8110c12c:	008015c4 	movi	r2,87
8110c130:	80a1c83a 	sub	r16,r16,r2
8110c134:	84ffef16 	blt	r16,r19,8110c0f4 <__reset+0xfb0ec0f4>
8110c138:	00bfffc4 	movi	r2,-1
8110c13c:	50803426 	beq	r10,r2,8110c210 <_strtoll_r+0x230>
8110c140:	e0000426 	beq	fp,zero,8110c154 <_strtoll_r+0x174>
8110c144:	018dc83a 	sub	r6,zero,r6
8110c148:	3004c03a 	cmpne	r2,r6,zero
8110c14c:	01e1c83a 	sub	r16,zero,r7
8110c150:	808fc83a 	sub	r7,r16,r2
8110c154:	3005883a 	mov	r2,r6
8110c158:	3807883a 	mov	r3,r7
8110c15c:	a8000326 	beq	r21,zero,8110c16c <_strtoll_r+0x18c>
8110c160:	5000321e 	bne	r10,zero,8110c22c <_strtoll_r+0x24c>
8110c164:	b00b883a 	mov	r5,r22
8110c168:	a9400015 	stw	r5,0(r21)
8110c16c:	dfc00c17 	ldw	ra,48(sp)
8110c170:	df000b17 	ldw	fp,44(sp)
8110c174:	ddc00a17 	ldw	r23,40(sp)
8110c178:	dd800917 	ldw	r22,36(sp)
8110c17c:	dd400817 	ldw	r21,32(sp)
8110c180:	dd000717 	ldw	r20,28(sp)
8110c184:	dcc00617 	ldw	r19,24(sp)
8110c188:	dc800517 	ldw	r18,20(sp)
8110c18c:	dc400417 	ldw	r17,16(sp)
8110c190:	dc000317 	ldw	r16,12(sp)
8110c194:	dec00d04 	addi	sp,sp,52
8110c198:	f800283a 	ret
8110c19c:	00800c04 	movi	r2,48
8110c1a0:	80802c26 	beq	r16,r2,8110c254 <_strtoll_r+0x274>
8110c1a4:	05000284 	movi	r20,10
8110c1a8:	002f883a 	mov	r23,zero
8110c1ac:	a027883a 	mov	r19,r20
8110c1b0:	e03fb11e 	bne	fp,zero,8110c078 <__reset+0xfb0ec078>
8110c1b4:	02a00034 	movhi	r10,32768
8110c1b8:	52bfffc4 	addi	r10,r10,-1
8110c1bc:	02ffffc4 	movi	r11,-1
8110c1c0:	003faf06 	br	8110c080 <__reset+0xfb0ec080>
8110c1c4:	33000f26 	beq	r6,r12,8110c204 <_strtoll_r+0x224>
8110c1c8:	b985383a 	mul	r2,r23,r6
8110c1cc:	3d0f383a 	mul	r7,r7,r20
8110c1d0:	3508383a 	mulxuu	r4,r6,r20
8110c1d4:	350d383a 	mul	r6,r6,r20
8110c1d8:	8013d7fa 	srai	r9,r16,31
8110c1dc:	388f883a 	add	r7,r7,r2
8110c1e0:	818d883a 	add	r6,r16,r6
8110c1e4:	390f883a 	add	r7,r7,r4
8110c1e8:	3421803a 	cmpltu	r16,r6,r16
8110c1ec:	49cf883a 	add	r7,r9,r7
8110c1f0:	81cf883a 	add	r7,r16,r7
8110c1f4:	02800044 	movi	r10,1
8110c1f8:	003fc306 	br	8110c108 <__reset+0xfb0ec108>
8110c1fc:	00800dc4 	movi	r2,55
8110c200:	003fcb06 	br	8110c130 <__reset+0xfb0ec130>
8110c204:	38fff01e 	bne	r7,r3,8110c1c8 <__reset+0xfb0ec1c8>
8110c208:	443fbe16 	blt	r8,r16,8110c104 <__reset+0xfb0ec104>
8110c20c:	003fee06 	br	8110c1c8 <__reset+0xfb0ec1c8>
8110c210:	e0002426 	beq	fp,zero,8110c2a4 <_strtoll_r+0x2c4>
8110c214:	0005883a 	mov	r2,zero
8110c218:	00e00034 	movhi	r3,32768
8110c21c:	d9800017 	ldw	r6,0(sp)
8110c220:	01000884 	movi	r4,34
8110c224:	31000015 	stw	r4,0(r6)
8110c228:	a83fd026 	beq	r21,zero,8110c16c <__reset+0xfb0ec16c>
8110c22c:	297fffc4 	addi	r5,r5,-1
8110c230:	003fcd06 	br	8110c168 <__reset+0xfb0ec168>
8110c234:	1c400084 	addi	r17,r3,2
8110c238:	1c000043 	ldbu	r16,1(r3)
8110c23c:	07000044 	movi	fp,1
8110c240:	003f8706 	br	8110c060 <__reset+0xfb0ec060>
8110c244:	1c400084 	addi	r17,r3,2
8110c248:	1c000043 	ldbu	r16,1(r3)
8110c24c:	0039883a 	mov	fp,zero
8110c250:	003f8306 	br	8110c060 <__reset+0xfb0ec060>
8110c254:	88800003 	ldbu	r2,0(r17)
8110c258:	00c01604 	movi	r3,88
8110c25c:	108037cc 	andi	r2,r2,223
8110c260:	10c00a26 	beq	r2,r3,8110c28c <_strtoll_r+0x2ac>
8110c264:	05000204 	movi	r20,8
8110c268:	002f883a 	mov	r23,zero
8110c26c:	a027883a 	mov	r19,r20
8110c270:	003f8006 	br	8110c074 <__reset+0xfb0ec074>
8110c274:	00800c04 	movi	r2,48
8110c278:	80800e1e 	bne	r16,r2,8110c2b4 <_strtoll_r+0x2d4>
8110c27c:	88800003 	ldbu	r2,0(r17)
8110c280:	00c01604 	movi	r3,88
8110c284:	108037cc 	andi	r2,r2,223
8110c288:	10c00a1e 	bne	r2,r3,8110c2b4 <_strtoll_r+0x2d4>
8110c28c:	05000404 	movi	r20,16
8110c290:	8c000043 	ldbu	r16,1(r17)
8110c294:	002f883a 	mov	r23,zero
8110c298:	8c400084 	addi	r17,r17,2
8110c29c:	a027883a 	mov	r19,r20
8110c2a0:	003f7406 	br	8110c074 <__reset+0xfb0ec074>
8110c2a4:	00e00034 	movhi	r3,32768
8110c2a8:	18ffffc4 	addi	r3,r3,-1
8110c2ac:	5005883a 	mov	r2,r10
8110c2b0:	003fda06 	br	8110c21c <__reset+0xfb0ec21c>
8110c2b4:	9829883a 	mov	r20,r19
8110c2b8:	002f883a 	mov	r23,zero
8110c2bc:	003f6d06 	br	8110c074 <__reset+0xfb0ec074>

8110c2c0 <_strtoul_r>:
8110c2c0:	00a044b4 	movhi	r2,33042
8110c2c4:	defff604 	addi	sp,sp,-40
8110c2c8:	109b9f04 	addi	r2,r2,28284
8110c2cc:	dc800315 	stw	r18,12(sp)
8110c2d0:	14800017 	ldw	r18,0(r2)
8110c2d4:	dd400615 	stw	r21,24(sp)
8110c2d8:	dd000515 	stw	r20,20(sp)
8110c2dc:	dcc00415 	stw	r19,16(sp)
8110c2e0:	2029883a 	mov	r20,r4
8110c2e4:	dfc00915 	stw	ra,36(sp)
8110c2e8:	ddc00815 	stw	r23,32(sp)
8110c2ec:	dd800715 	stw	r22,28(sp)
8110c2f0:	dc400215 	stw	r17,8(sp)
8110c2f4:	dc000115 	stw	r16,4(sp)
8110c2f8:	2827883a 	mov	r19,r5
8110c2fc:	382b883a 	mov	r21,r7
8110c300:	2809883a 	mov	r4,r5
8110c304:	24000003 	ldbu	r16,0(r4)
8110c308:	24400044 	addi	r17,r4,1
8110c30c:	2007883a 	mov	r3,r4
8110c310:	9405883a 	add	r2,r18,r16
8110c314:	10800043 	ldbu	r2,1(r2)
8110c318:	8809883a 	mov	r4,r17
8110c31c:	1080020c 	andi	r2,r2,8
8110c320:	103ff81e 	bne	r2,zero,8110c304 <__reset+0xfb0ec304>
8110c324:	00800b44 	movi	r2,45
8110c328:	80805326 	beq	r16,r2,8110c478 <_strtoul_r+0x1b8>
8110c32c:	00800ac4 	movi	r2,43
8110c330:	80805526 	beq	r16,r2,8110c488 <_strtoul_r+0x1c8>
8110c334:	002f883a 	mov	r23,zero
8110c338:	a8000f26 	beq	r21,zero,8110c378 <_strtoul_r+0xb8>
8110c33c:	00800404 	movi	r2,16
8110c340:	a8805f26 	beq	r21,r2,8110c4c0 <_strtoul_r+0x200>
8110c344:	013fffc4 	movi	r4,-1
8110c348:	a80b883a 	mov	r5,r21
8110c34c:	d9800015 	stw	r6,0(sp)
8110c350:	11136340 	call	81113634 <__udivsi3>
8110c354:	a80b883a 	mov	r5,r21
8110c358:	013fffc4 	movi	r4,-1
8110c35c:	102d883a 	mov	r22,r2
8110c360:	11136980 	call	81113698 <__umodsi3>
8110c364:	d9800017 	ldw	r6,0(sp)
8110c368:	1019883a 	mov	r12,r2
8110c36c:	a817883a 	mov	r11,r21
8110c370:	b00f883a 	mov	r7,r22
8110c374:	00000706 	br	8110c394 <_strtoul_r+0xd4>
8110c378:	00800c04 	movi	r2,48
8110c37c:	80804626 	beq	r16,r2,8110c498 <_strtoul_r+0x1d8>
8110c380:	05400284 	movi	r21,10
8110c384:	01c666b4 	movhi	r7,6554
8110c388:	03000144 	movi	r12,5
8110c38c:	39e66644 	addi	r7,r7,-26215
8110c390:	a817883a 	mov	r11,r21
8110c394:	9407883a 	add	r3,r18,r16
8110c398:	18c00043 	ldbu	r3,1(r3)
8110c39c:	8809883a 	mov	r4,r17
8110c3a0:	0011883a 	mov	r8,zero
8110c3a4:	1940010c 	andi	r5,r3,4
8110c3a8:	0005883a 	mov	r2,zero
8110c3ac:	02800044 	movi	r10,1
8110c3b0:	027fffc4 	movi	r9,-1
8110c3b4:	28000e26 	beq	r5,zero,8110c3f0 <_strtoul_r+0x130>
8110c3b8:	843ff404 	addi	r16,r16,-48
8110c3bc:	8540120e 	bge	r16,r21,8110c408 <_strtoul_r+0x148>
8110c3c0:	42400526 	beq	r8,r9,8110c3d8 <_strtoul_r+0x118>
8110c3c4:	38802236 	bltu	r7,r2,8110c450 <_strtoul_r+0x190>
8110c3c8:	11c02026 	beq	r2,r7,8110c44c <_strtoul_r+0x18c>
8110c3cc:	12c5383a 	mul	r2,r2,r11
8110c3d0:	02000044 	movi	r8,1
8110c3d4:	8085883a 	add	r2,r16,r2
8110c3d8:	24000003 	ldbu	r16,0(r4)
8110c3dc:	21000044 	addi	r4,r4,1
8110c3e0:	9407883a 	add	r3,r18,r16
8110c3e4:	18c00043 	ldbu	r3,1(r3)
8110c3e8:	1940010c 	andi	r5,r3,4
8110c3ec:	283ff21e 	bne	r5,zero,8110c3b8 <__reset+0xfb0ec3b8>
8110c3f0:	18c000cc 	andi	r3,r3,3
8110c3f4:	18000426 	beq	r3,zero,8110c408 <_strtoul_r+0x148>
8110c3f8:	1a801726 	beq	r3,r10,8110c458 <_strtoul_r+0x198>
8110c3fc:	00c015c4 	movi	r3,87
8110c400:	80e1c83a 	sub	r16,r16,r3
8110c404:	857fee16 	blt	r16,r21,8110c3c0 <__reset+0xfb0ec3c0>
8110c408:	40001516 	blt	r8,zero,8110c460 <_strtoul_r+0x1a0>
8110c40c:	b8000126 	beq	r23,zero,8110c414 <_strtoul_r+0x154>
8110c410:	0085c83a 	sub	r2,zero,r2
8110c414:	30000226 	beq	r6,zero,8110c420 <_strtoul_r+0x160>
8110c418:	4000151e 	bne	r8,zero,8110c470 <_strtoul_r+0x1b0>
8110c41c:	34c00015 	stw	r19,0(r6)
8110c420:	dfc00917 	ldw	ra,36(sp)
8110c424:	ddc00817 	ldw	r23,32(sp)
8110c428:	dd800717 	ldw	r22,28(sp)
8110c42c:	dd400617 	ldw	r21,24(sp)
8110c430:	dd000517 	ldw	r20,20(sp)
8110c434:	dcc00417 	ldw	r19,16(sp)
8110c438:	dc800317 	ldw	r18,12(sp)
8110c43c:	dc400217 	ldw	r17,8(sp)
8110c440:	dc000117 	ldw	r16,4(sp)
8110c444:	dec00a04 	addi	sp,sp,40
8110c448:	f800283a 	ret
8110c44c:	643fdf0e 	bge	r12,r16,8110c3cc <__reset+0xfb0ec3cc>
8110c450:	023fffc4 	movi	r8,-1
8110c454:	003fe006 	br	8110c3d8 <__reset+0xfb0ec3d8>
8110c458:	00c00dc4 	movi	r3,55
8110c45c:	003fe806 	br	8110c400 <__reset+0xfb0ec400>
8110c460:	00800884 	movi	r2,34
8110c464:	a0800015 	stw	r2,0(r20)
8110c468:	00bfffc4 	movi	r2,-1
8110c46c:	303fec26 	beq	r6,zero,8110c420 <__reset+0xfb0ec420>
8110c470:	24ffffc4 	addi	r19,r4,-1
8110c474:	003fe906 	br	8110c41c <__reset+0xfb0ec41c>
8110c478:	1c400084 	addi	r17,r3,2
8110c47c:	1c000043 	ldbu	r16,1(r3)
8110c480:	05c00044 	movi	r23,1
8110c484:	003fac06 	br	8110c338 <__reset+0xfb0ec338>
8110c488:	1c400084 	addi	r17,r3,2
8110c48c:	1c000043 	ldbu	r16,1(r3)
8110c490:	002f883a 	mov	r23,zero
8110c494:	003fa806 	br	8110c338 <__reset+0xfb0ec338>
8110c498:	88800003 	ldbu	r2,0(r17)
8110c49c:	00c01604 	movi	r3,88
8110c4a0:	108037cc 	andi	r2,r2,223
8110c4a4:	10c00c26 	beq	r2,r3,8110c4d8 <_strtoul_r+0x218>
8110c4a8:	05400204 	movi	r21,8
8110c4ac:	01c80034 	movhi	r7,8192
8110c4b0:	030001c4 	movi	r12,7
8110c4b4:	39ffffc4 	addi	r7,r7,-1
8110c4b8:	a817883a 	mov	r11,r21
8110c4bc:	003fb506 	br	8110c394 <__reset+0xfb0ec394>
8110c4c0:	00800c04 	movi	r2,48
8110c4c4:	80800c1e 	bne	r16,r2,8110c4f8 <_strtoul_r+0x238>
8110c4c8:	88800003 	ldbu	r2,0(r17)
8110c4cc:	00c01604 	movi	r3,88
8110c4d0:	108037cc 	andi	r2,r2,223
8110c4d4:	10c0081e 	bne	r2,r3,8110c4f8 <_strtoul_r+0x238>
8110c4d8:	02c00404 	movi	r11,16
8110c4dc:	05840034 	movhi	r22,4096
8110c4e0:	8c000043 	ldbu	r16,1(r17)
8110c4e4:	030003c4 	movi	r12,15
8110c4e8:	8c400084 	addi	r17,r17,2
8110c4ec:	b5bfffc4 	addi	r22,r22,-1
8110c4f0:	582b883a 	mov	r21,r11
8110c4f4:	003f9e06 	br	8110c370 <__reset+0xfb0ec370>
8110c4f8:	01c40034 	movhi	r7,4096
8110c4fc:	030003c4 	movi	r12,15
8110c500:	39ffffc4 	addi	r7,r7,-1
8110c504:	a817883a 	mov	r11,r21
8110c508:	003fa206 	br	8110c394 <__reset+0xfb0ec394>

8110c50c <strtoul>:
8110c50c:	00a044b4 	movhi	r2,33042
8110c510:	109b9c04 	addi	r2,r2,28272
8110c514:	300f883a 	mov	r7,r6
8110c518:	280d883a 	mov	r6,r5
8110c51c:	200b883a 	mov	r5,r4
8110c520:	11000017 	ldw	r4,0(r2)
8110c524:	110c2c01 	jmpi	8110c2c0 <_strtoul_r>

8110c528 <_strtoull_r>:
8110c528:	00a044b4 	movhi	r2,33042
8110c52c:	defff404 	addi	sp,sp,-48
8110c530:	109b9f04 	addi	r2,r2,28284
8110c534:	dc400315 	stw	r17,12(sp)
8110c538:	14400017 	ldw	r17,0(r2)
8110c53c:	dd400715 	stw	r21,28(sp)
8110c540:	dd000615 	stw	r20,24(sp)
8110c544:	dcc00515 	stw	r19,20(sp)
8110c548:	dc800415 	stw	r18,16(sp)
8110c54c:	dfc00b15 	stw	ra,44(sp)
8110c550:	df000a15 	stw	fp,40(sp)
8110c554:	ddc00915 	stw	r23,36(sp)
8110c558:	dd800815 	stw	r22,32(sp)
8110c55c:	dc000215 	stw	r16,8(sp)
8110c560:	2827883a 	mov	r19,r5
8110c564:	202b883a 	mov	r21,r4
8110c568:	3029883a 	mov	r20,r6
8110c56c:	3825883a 	mov	r18,r7
8110c570:	2807883a 	mov	r3,r5
8110c574:	1c000003 	ldbu	r16,0(r3)
8110c578:	1f000044 	addi	fp,r3,1
8110c57c:	1809883a 	mov	r4,r3
8110c580:	8c05883a 	add	r2,r17,r16
8110c584:	10800043 	ldbu	r2,1(r2)
8110c588:	e007883a 	mov	r3,fp
8110c58c:	1080020c 	andi	r2,r2,8
8110c590:	103ff81e 	bne	r2,zero,8110c574 <__reset+0xfb0ec574>
8110c594:	00800b44 	movi	r2,45
8110c598:	80806e26 	beq	r16,r2,8110c754 <_strtoull_r+0x22c>
8110c59c:	00800ac4 	movi	r2,43
8110c5a0:	80807026 	beq	r16,r2,8110c764 <_strtoull_r+0x23c>
8110c5a4:	002f883a 	mov	r23,zero
8110c5a8:	90001426 	beq	r18,zero,8110c5fc <_strtoull_r+0xd4>
8110c5ac:	00800404 	movi	r2,16
8110c5b0:	90807c26 	beq	r18,r2,8110c7a4 <_strtoull_r+0x27c>
8110c5b4:	902dd7fa 	srai	r22,r18,31
8110c5b8:	013fffc4 	movi	r4,-1
8110c5bc:	200b883a 	mov	r5,r4
8110c5c0:	900d883a 	mov	r6,r18
8110c5c4:	b00f883a 	mov	r7,r22
8110c5c8:	1112a8c0 	call	81112a8c <__udivdi3>
8110c5cc:	013fffc4 	movi	r4,-1
8110c5d0:	900d883a 	mov	r6,r18
8110c5d4:	b00f883a 	mov	r7,r22
8110c5d8:	200b883a 	mov	r5,r4
8110c5dc:	d8c00115 	stw	r3,4(sp)
8110c5e0:	d8800015 	stw	r2,0(sp)
8110c5e4:	11130040 	call	81113004 <__umoddi3>
8110c5e8:	101b883a 	mov	r13,r2
8110c5ec:	9015883a 	mov	r10,r18
8110c5f0:	dac00017 	ldw	r11,0(sp)
8110c5f4:	da000117 	ldw	r8,4(sp)
8110c5f8:	00000a06 	br	8110c624 <_strtoull_r+0xfc>
8110c5fc:	00800c04 	movi	r2,48
8110c600:	80805c26 	beq	r16,r2,8110c774 <_strtoull_r+0x24c>
8110c604:	02800284 	movi	r10,10
8110c608:	02e666b4 	movhi	r11,39322
8110c60c:	020666b4 	movhi	r8,6554
8110c610:	03400144 	movi	r13,5
8110c614:	5ae66644 	addi	r11,r11,-26215
8110c618:	42266644 	addi	r8,r8,-26215
8110c61c:	002d883a 	mov	r22,zero
8110c620:	5025883a 	mov	r18,r10
8110c624:	8c0b883a 	add	r5,r17,r16
8110c628:	29400043 	ldbu	r5,1(r5)
8110c62c:	e009883a 	mov	r4,fp
8110c630:	000f883a 	mov	r7,zero
8110c634:	2980010c 	andi	r6,r5,4
8110c638:	0005883a 	mov	r2,zero
8110c63c:	0007883a 	mov	r3,zero
8110c640:	03000044 	movi	r12,1
8110c644:	027fffc4 	movi	r9,-1
8110c648:	30000d26 	beq	r6,zero,8110c680 <_strtoull_r+0x158>
8110c64c:	843ff404 	addi	r16,r16,-48
8110c650:	8480110e 	bge	r16,r18,8110c698 <_strtoull_r+0x170>
8110c654:	3a400426 	beq	r7,r9,8110c668 <_strtoull_r+0x140>
8110c658:	40c00236 	bltu	r8,r3,8110c664 <_strtoull_r+0x13c>
8110c65c:	1a00231e 	bne	r3,r8,8110c6ec <_strtoull_r+0x1c4>
8110c660:	5880222e 	bgeu	r11,r2,8110c6ec <_strtoull_r+0x1c4>
8110c664:	01ffffc4 	movi	r7,-1
8110c668:	24000003 	ldbu	r16,0(r4)
8110c66c:	21000044 	addi	r4,r4,1
8110c670:	8c0b883a 	add	r5,r17,r16
8110c674:	29400043 	ldbu	r5,1(r5)
8110c678:	2980010c 	andi	r6,r5,4
8110c67c:	303ff31e 	bne	r6,zero,8110c64c <__reset+0xfb0ec64c>
8110c680:	294000cc 	andi	r5,r5,3
8110c684:	28000426 	beq	r5,zero,8110c698 <_strtoull_r+0x170>
8110c688:	2b002626 	beq	r5,r12,8110c724 <_strtoull_r+0x1fc>
8110c68c:	014015c4 	movi	r5,87
8110c690:	8161c83a 	sub	r16,r16,r5
8110c694:	84bfef16 	blt	r16,r18,8110c654 <__reset+0xfb0ec654>
8110c698:	38002716 	blt	r7,zero,8110c738 <_strtoull_r+0x210>
8110c69c:	b8000426 	beq	r23,zero,8110c6b0 <_strtoull_r+0x188>
8110c6a0:	0085c83a 	sub	r2,zero,r2
8110c6a4:	100ac03a 	cmpne	r5,r2,zero
8110c6a8:	00e1c83a 	sub	r16,zero,r3
8110c6ac:	8147c83a 	sub	r3,r16,r5
8110c6b0:	a0000226 	beq	r20,zero,8110c6bc <_strtoull_r+0x194>
8110c6b4:	3800251e 	bne	r7,zero,8110c74c <_strtoull_r+0x224>
8110c6b8:	a4c00015 	stw	r19,0(r20)
8110c6bc:	dfc00b17 	ldw	ra,44(sp)
8110c6c0:	df000a17 	ldw	fp,40(sp)
8110c6c4:	ddc00917 	ldw	r23,36(sp)
8110c6c8:	dd800817 	ldw	r22,32(sp)
8110c6cc:	dd400717 	ldw	r21,28(sp)
8110c6d0:	dd000617 	ldw	r20,24(sp)
8110c6d4:	dcc00517 	ldw	r19,20(sp)
8110c6d8:	dc800417 	ldw	r18,16(sp)
8110c6dc:	dc400317 	ldw	r17,12(sp)
8110c6e0:	dc000217 	ldw	r16,8(sp)
8110c6e4:	dec00c04 	addi	sp,sp,48
8110c6e8:	f800283a 	ret
8110c6ec:	12c00f26 	beq	r2,r11,8110c72c <_strtoull_r+0x204>
8110c6f0:	b08d383a 	mul	r6,r22,r2
8110c6f4:	1a87383a 	mul	r3,r3,r10
8110c6f8:	128a383a 	mulxuu	r5,r2,r10
8110c6fc:	1285383a 	mul	r2,r2,r10
8110c700:	800fd7fa 	srai	r7,r16,31
8110c704:	1987883a 	add	r3,r3,r6
8110c708:	8085883a 	add	r2,r16,r2
8110c70c:	1947883a 	add	r3,r3,r5
8110c710:	38c7883a 	add	r3,r7,r3
8110c714:	1421803a 	cmpltu	r16,r2,r16
8110c718:	80c7883a 	add	r3,r16,r3
8110c71c:	01c00044 	movi	r7,1
8110c720:	003fd106 	br	8110c668 <__reset+0xfb0ec668>
8110c724:	01400dc4 	movi	r5,55
8110c728:	003fd906 	br	8110c690 <__reset+0xfb0ec690>
8110c72c:	1a3ff01e 	bne	r3,r8,8110c6f0 <__reset+0xfb0ec6f0>
8110c730:	6c3fcc16 	blt	r13,r16,8110c664 <__reset+0xfb0ec664>
8110c734:	003fee06 	br	8110c6f0 <__reset+0xfb0ec6f0>
8110c738:	00800884 	movi	r2,34
8110c73c:	a8800015 	stw	r2,0(r21)
8110c740:	00bfffc4 	movi	r2,-1
8110c744:	1007883a 	mov	r3,r2
8110c748:	a03fdc26 	beq	r20,zero,8110c6bc <__reset+0xfb0ec6bc>
8110c74c:	24ffffc4 	addi	r19,r4,-1
8110c750:	003fd906 	br	8110c6b8 <__reset+0xfb0ec6b8>
8110c754:	27000084 	addi	fp,r4,2
8110c758:	24000043 	ldbu	r16,1(r4)
8110c75c:	05c00044 	movi	r23,1
8110c760:	003f9106 	br	8110c5a8 <__reset+0xfb0ec5a8>
8110c764:	27000084 	addi	fp,r4,2
8110c768:	24000043 	ldbu	r16,1(r4)
8110c76c:	002f883a 	mov	r23,zero
8110c770:	003f8d06 	br	8110c5a8 <__reset+0xfb0ec5a8>
8110c774:	e0800003 	ldbu	r2,0(fp)
8110c778:	00c01604 	movi	r3,88
8110c77c:	108037cc 	andi	r2,r2,223
8110c780:	10c00e26 	beq	r2,r3,8110c7bc <_strtoull_r+0x294>
8110c784:	02800204 	movi	r10,8
8110c788:	02ffffc4 	movi	r11,-1
8110c78c:	02080034 	movhi	r8,8192
8110c790:	034001c4 	movi	r13,7
8110c794:	42d1883a 	add	r8,r8,r11
8110c798:	002d883a 	mov	r22,zero
8110c79c:	5025883a 	mov	r18,r10
8110c7a0:	003fa006 	br	8110c624 <__reset+0xfb0ec624>
8110c7a4:	00800c04 	movi	r2,48
8110c7a8:	80800e1e 	bne	r16,r2,8110c7e4 <_strtoull_r+0x2bc>
8110c7ac:	e0800003 	ldbu	r2,0(fp)
8110c7b0:	00c01604 	movi	r3,88
8110c7b4:	108037cc 	andi	r2,r2,223
8110c7b8:	10c00a1e 	bne	r2,r3,8110c7e4 <_strtoull_r+0x2bc>
8110c7bc:	02800404 	movi	r10,16
8110c7c0:	02ffffc4 	movi	r11,-1
8110c7c4:	02040034 	movhi	r8,4096
8110c7c8:	e4000043 	ldbu	r16,1(fp)
8110c7cc:	034003c4 	movi	r13,15
8110c7d0:	e7000084 	addi	fp,fp,2
8110c7d4:	42d1883a 	add	r8,r8,r11
8110c7d8:	002d883a 	mov	r22,zero
8110c7dc:	5025883a 	mov	r18,r10
8110c7e0:	003f9006 	br	8110c624 <__reset+0xfb0ec624>
8110c7e4:	02ffffc4 	movi	r11,-1
8110c7e8:	02040034 	movhi	r8,4096
8110c7ec:	034003c4 	movi	r13,15
8110c7f0:	42d1883a 	add	r8,r8,r11
8110c7f4:	9015883a 	mov	r10,r18
8110c7f8:	002d883a 	mov	r22,zero
8110c7fc:	003f8906 	br	8110c624 <__reset+0xfb0ec624>

8110c800 <___svfprintf_internal_r>:
8110c800:	deffb704 	addi	sp,sp,-292
8110c804:	dfc04815 	stw	ra,288(sp)
8110c808:	ddc04615 	stw	r23,280(sp)
8110c80c:	d9402c15 	stw	r5,176(sp)
8110c810:	d9003915 	stw	r4,228(sp)
8110c814:	302f883a 	mov	r23,r6
8110c818:	d9c02d15 	stw	r7,180(sp)
8110c81c:	df004715 	stw	fp,284(sp)
8110c820:	dd804515 	stw	r22,276(sp)
8110c824:	dd404415 	stw	r21,272(sp)
8110c828:	dd004315 	stw	r20,268(sp)
8110c82c:	dcc04215 	stw	r19,264(sp)
8110c830:	dc804115 	stw	r18,260(sp)
8110c834:	dc404015 	stw	r17,256(sp)
8110c838:	dc003f15 	stw	r16,252(sp)
8110c83c:	11087300 	call	81108730 <_localeconv_r>
8110c840:	10800017 	ldw	r2,0(r2)
8110c844:	1009883a 	mov	r4,r2
8110c848:	d8803415 	stw	r2,208(sp)
8110c84c:	1101bb00 	call	81101bb0 <strlen>
8110c850:	d8c02c17 	ldw	r3,176(sp)
8110c854:	d8803815 	stw	r2,224(sp)
8110c858:	1880030b 	ldhu	r2,12(r3)
8110c85c:	1080200c 	andi	r2,r2,128
8110c860:	10000226 	beq	r2,zero,8110c86c <___svfprintf_internal_r+0x6c>
8110c864:	18800417 	ldw	r2,16(r3)
8110c868:	10067f26 	beq	r2,zero,8110e268 <___svfprintf_internal_r+0x1a68>
8110c86c:	dcc03917 	ldw	r19,228(sp)
8110c870:	d8c00404 	addi	r3,sp,16
8110c874:	056044b4 	movhi	r21,33042
8110c878:	d9001e04 	addi	r4,sp,120
8110c87c:	ad52ee04 	addi	r21,r21,19384
8110c880:	d8c01e15 	stw	r3,120(sp)
8110c884:	d8002015 	stw	zero,128(sp)
8110c888:	d8001f15 	stw	zero,124(sp)
8110c88c:	d8003315 	stw	zero,204(sp)
8110c890:	d8003615 	stw	zero,216(sp)
8110c894:	d8003715 	stw	zero,220(sp)
8110c898:	1811883a 	mov	r8,r3
8110c89c:	d8003a15 	stw	zero,232(sp)
8110c8a0:	d8003b15 	stw	zero,236(sp)
8110c8a4:	d8002f15 	stw	zero,188(sp)
8110c8a8:	d9002815 	stw	r4,160(sp)
8110c8ac:	b8800007 	ldb	r2,0(r23)
8110c8b0:	10026726 	beq	r2,zero,8110d250 <___svfprintf_internal_r+0xa50>
8110c8b4:	00c00944 	movi	r3,37
8110c8b8:	b821883a 	mov	r16,r23
8110c8bc:	10c0021e 	bne	r2,r3,8110c8c8 <___svfprintf_internal_r+0xc8>
8110c8c0:	00001406 	br	8110c914 <___svfprintf_internal_r+0x114>
8110c8c4:	10c00326 	beq	r2,r3,8110c8d4 <___svfprintf_internal_r+0xd4>
8110c8c8:	84000044 	addi	r16,r16,1
8110c8cc:	80800007 	ldb	r2,0(r16)
8110c8d0:	103ffc1e 	bne	r2,zero,8110c8c4 <__reset+0xfb0ec8c4>
8110c8d4:	85e3c83a 	sub	r17,r16,r23
8110c8d8:	88000e26 	beq	r17,zero,8110c914 <___svfprintf_internal_r+0x114>
8110c8dc:	d8c02017 	ldw	r3,128(sp)
8110c8e0:	d8801f17 	ldw	r2,124(sp)
8110c8e4:	45c00015 	stw	r23,0(r8)
8110c8e8:	1c47883a 	add	r3,r3,r17
8110c8ec:	10800044 	addi	r2,r2,1
8110c8f0:	d8c02015 	stw	r3,128(sp)
8110c8f4:	44400115 	stw	r17,4(r8)
8110c8f8:	d8801f15 	stw	r2,124(sp)
8110c8fc:	00c001c4 	movi	r3,7
8110c900:	18809716 	blt	r3,r2,8110cb60 <___svfprintf_internal_r+0x360>
8110c904:	42000204 	addi	r8,r8,8
8110c908:	d9402f17 	ldw	r5,188(sp)
8110c90c:	2c4b883a 	add	r5,r5,r17
8110c910:	d9402f15 	stw	r5,188(sp)
8110c914:	80800007 	ldb	r2,0(r16)
8110c918:	10009826 	beq	r2,zero,8110cb7c <___svfprintf_internal_r+0x37c>
8110c91c:	84400047 	ldb	r17,1(r16)
8110c920:	00bfffc4 	movi	r2,-1
8110c924:	85c00044 	addi	r23,r16,1
8110c928:	d8002785 	stb	zero,158(sp)
8110c92c:	0007883a 	mov	r3,zero
8110c930:	000f883a 	mov	r7,zero
8110c934:	d8802915 	stw	r2,164(sp)
8110c938:	d8003115 	stw	zero,196(sp)
8110c93c:	0025883a 	mov	r18,zero
8110c940:	01401604 	movi	r5,88
8110c944:	01800244 	movi	r6,9
8110c948:	02800a84 	movi	r10,42
8110c94c:	02401b04 	movi	r9,108
8110c950:	bdc00044 	addi	r23,r23,1
8110c954:	88bff804 	addi	r2,r17,-32
8110c958:	2882f036 	bltu	r5,r2,8110d51c <___svfprintf_internal_r+0xd1c>
8110c95c:	100490ba 	slli	r2,r2,2
8110c960:	01204474 	movhi	r4,33041
8110c964:	21325d04 	addi	r4,r4,-13964
8110c968:	1105883a 	add	r2,r2,r4
8110c96c:	10800017 	ldw	r2,0(r2)
8110c970:	1000683a 	jmp	r2
8110c974:	8110d484 	addi	r4,r16,17234
8110c978:	8110d51c 	xori	r4,r16,17236
8110c97c:	8110d51c 	xori	r4,r16,17236
8110c980:	8110d478 	rdprs	r4,r16,17233
8110c984:	8110d51c 	xori	r4,r16,17236
8110c988:	8110d51c 	xori	r4,r16,17236
8110c98c:	8110d51c 	xori	r4,r16,17236
8110c990:	8110d51c 	xori	r4,r16,17236
8110c994:	8110d51c 	xori	r4,r16,17236
8110c998:	8110d51c 	xori	r4,r16,17236
8110c99c:	8110cbd8 	cmpnei	r4,r16,17199
8110c9a0:	8110d3b4 	orhi	r4,r16,17230
8110c9a4:	8110d51c 	xori	r4,r16,17236
8110c9a8:	8110cae8 	cmpgeui	r4,r16,17195
8110c9ac:	8110cc00 	call	88110cc0 <__reset+0x20f0cc0>
8110c9b0:	8110d51c 	xori	r4,r16,17236
8110c9b4:	8110cc74 	orhi	r4,r16,17201
8110c9b8:	8110cc40 	call	88110cc4 <__reset+0x20f0cc4>
8110c9bc:	8110cc40 	call	88110cc4 <__reset+0x20f0cc4>
8110c9c0:	8110cc40 	call	88110cc4 <__reset+0x20f0cc4>
8110c9c4:	8110cc40 	call	88110cc4 <__reset+0x20f0cc4>
8110c9c8:	8110cc40 	call	88110cc4 <__reset+0x20f0cc4>
8110c9cc:	8110cc40 	call	88110cc4 <__reset+0x20f0cc4>
8110c9d0:	8110cc40 	call	88110cc4 <__reset+0x20f0cc4>
8110c9d4:	8110cc40 	call	88110cc4 <__reset+0x20f0cc4>
8110c9d8:	8110cc40 	call	88110cc4 <__reset+0x20f0cc4>
8110c9dc:	8110d51c 	xori	r4,r16,17236
8110c9e0:	8110d51c 	xori	r4,r16,17236
8110c9e4:	8110d51c 	xori	r4,r16,17236
8110c9e8:	8110d51c 	xori	r4,r16,17236
8110c9ec:	8110d51c 	xori	r4,r16,17236
8110c9f0:	8110d51c 	xori	r4,r16,17236
8110c9f4:	8110d51c 	xori	r4,r16,17236
8110c9f8:	8110d51c 	xori	r4,r16,17236
8110c9fc:	8110d51c 	xori	r4,r16,17236
8110ca00:	8110d51c 	xori	r4,r16,17236
8110ca04:	8110cd2c 	andhi	r4,r16,17204
8110ca08:	8110cc80 	call	88110cc8 <__reset+0x20f0cc8>
8110ca0c:	8110d51c 	xori	r4,r16,17236
8110ca10:	8110cc80 	call	88110cc8 <__reset+0x20f0cc8>
8110ca14:	8110d51c 	xori	r4,r16,17236
8110ca18:	8110d51c 	xori	r4,r16,17236
8110ca1c:	8110d51c 	xori	r4,r16,17236
8110ca20:	8110d51c 	xori	r4,r16,17236
8110ca24:	8110cd20 	cmpeqi	r4,r16,17204
8110ca28:	8110d51c 	xori	r4,r16,17236
8110ca2c:	8110d51c 	xori	r4,r16,17236
8110ca30:	8110cde8 	cmpgeui	r4,r16,17207
8110ca34:	8110d51c 	xori	r4,r16,17236
8110ca38:	8110d51c 	xori	r4,r16,17236
8110ca3c:	8110d51c 	xori	r4,r16,17236
8110ca40:	8110d51c 	xori	r4,r16,17236
8110ca44:	8110d51c 	xori	r4,r16,17236
8110ca48:	8110d258 	cmpnei	r4,r16,17225
8110ca4c:	8110d51c 	xori	r4,r16,17236
8110ca50:	8110d51c 	xori	r4,r16,17236
8110ca54:	8110d2b8 	rdprs	r4,r16,17226
8110ca58:	8110d51c 	xori	r4,r16,17236
8110ca5c:	8110d51c 	xori	r4,r16,17236
8110ca60:	8110d51c 	xori	r4,r16,17236
8110ca64:	8110d51c 	xori	r4,r16,17236
8110ca68:	8110d51c 	xori	r4,r16,17236
8110ca6c:	8110d51c 	xori	r4,r16,17236
8110ca70:	8110d51c 	xori	r4,r16,17236
8110ca74:	8110d51c 	xori	r4,r16,17236
8110ca78:	8110d51c 	xori	r4,r16,17236
8110ca7c:	8110d51c 	xori	r4,r16,17236
8110ca80:	8110d368 	cmpgeui	r4,r16,17229
8110ca84:	8110d4a4 	muli	r4,r16,17234
8110ca88:	8110cc80 	call	88110cc8 <__reset+0x20f0cc8>
8110ca8c:	8110cc80 	call	88110cc8 <__reset+0x20f0cc8>
8110ca90:	8110cc80 	call	88110cc8 <__reset+0x20f0cc8>
8110ca94:	8110d4f8 	rdprs	r4,r16,17235
8110ca98:	8110d4a4 	muli	r4,r16,17234
8110ca9c:	8110d51c 	xori	r4,r16,17236
8110caa0:	8110d51c 	xori	r4,r16,17236
8110caa4:	8110d4b4 	orhi	r4,r16,17234
8110caa8:	8110d51c 	xori	r4,r16,17236
8110caac:	8110d4c4 	addi	r4,r16,17235
8110cab0:	8110d3a4 	muli	r4,r16,17230
8110cab4:	8110caf4 	orhi	r4,r16,17195
8110cab8:	8110d3c4 	addi	r4,r16,17231
8110cabc:	8110d51c 	xori	r4,r16,17236
8110cac0:	8110d3d0 	cmplti	r4,r16,17231
8110cac4:	8110d51c 	xori	r4,r16,17236
8110cac8:	8110d42c 	andhi	r4,r16,17232
8110cacc:	8110d51c 	xori	r4,r16,17236
8110cad0:	8110d51c 	xori	r4,r16,17236
8110cad4:	8110d43c 	xorhi	r4,r16,17232
8110cad8:	d9003117 	ldw	r4,196(sp)
8110cadc:	d8802d15 	stw	r2,180(sp)
8110cae0:	0109c83a 	sub	r4,zero,r4
8110cae4:	d9003115 	stw	r4,196(sp)
8110cae8:	94800114 	ori	r18,r18,4
8110caec:	bc400007 	ldb	r17,0(r23)
8110caf0:	003f9706 	br	8110c950 <__reset+0xfb0ec950>
8110caf4:	00800c04 	movi	r2,48
8110caf8:	d9002d17 	ldw	r4,180(sp)
8110cafc:	d9402917 	ldw	r5,164(sp)
8110cb00:	d8802705 	stb	r2,156(sp)
8110cb04:	00801e04 	movi	r2,120
8110cb08:	d8802745 	stb	r2,157(sp)
8110cb0c:	d8002785 	stb	zero,158(sp)
8110cb10:	20c00104 	addi	r3,r4,4
8110cb14:	25000017 	ldw	r20,0(r4)
8110cb18:	002d883a 	mov	r22,zero
8110cb1c:	90800094 	ori	r2,r18,2
8110cb20:	28028616 	blt	r5,zero,8110d53c <___svfprintf_internal_r+0xd3c>
8110cb24:	00bfdfc4 	movi	r2,-129
8110cb28:	90a4703a 	and	r18,r18,r2
8110cb2c:	d8c02d15 	stw	r3,180(sp)
8110cb30:	94800094 	ori	r18,r18,2
8110cb34:	a002731e 	bne	r20,zero,8110d504 <___svfprintf_internal_r+0xd04>
8110cb38:	00a044b4 	movhi	r2,33042
8110cb3c:	1091cb04 	addi	r2,r2,18220
8110cb40:	d8803a15 	stw	r2,232(sp)
8110cb44:	04401e04 	movi	r17,120
8110cb48:	d8c02917 	ldw	r3,164(sp)
8110cb4c:	0039883a 	mov	fp,zero
8110cb50:	1801d526 	beq	r3,zero,8110d2a8 <___svfprintf_internal_r+0xaa8>
8110cb54:	0029883a 	mov	r20,zero
8110cb58:	002d883a 	mov	r22,zero
8110cb5c:	0001f106 	br	8110d324 <___svfprintf_internal_r+0xb24>
8110cb60:	d9402c17 	ldw	r5,176(sp)
8110cb64:	d9801e04 	addi	r6,sp,120
8110cb68:	9809883a 	mov	r4,r19
8110cb6c:	11112cc0 	call	811112cc <__ssprint_r>
8110cb70:	1000081e 	bne	r2,zero,8110cb94 <___svfprintf_internal_r+0x394>
8110cb74:	da000404 	addi	r8,sp,16
8110cb78:	003f6306 	br	8110c908 <__reset+0xfb0ec908>
8110cb7c:	d8802017 	ldw	r2,128(sp)
8110cb80:	10000426 	beq	r2,zero,8110cb94 <___svfprintf_internal_r+0x394>
8110cb84:	d9402c17 	ldw	r5,176(sp)
8110cb88:	d9003917 	ldw	r4,228(sp)
8110cb8c:	d9801e04 	addi	r6,sp,120
8110cb90:	11112cc0 	call	811112cc <__ssprint_r>
8110cb94:	d8802c17 	ldw	r2,176(sp)
8110cb98:	10c0030b 	ldhu	r3,12(r2)
8110cb9c:	d8802f17 	ldw	r2,188(sp)
8110cba0:	18c0100c 	andi	r3,r3,64
8110cba4:	1805f51e 	bne	r3,zero,8110e37c <___svfprintf_internal_r+0x1b7c>
8110cba8:	dfc04817 	ldw	ra,288(sp)
8110cbac:	df004717 	ldw	fp,284(sp)
8110cbb0:	ddc04617 	ldw	r23,280(sp)
8110cbb4:	dd804517 	ldw	r22,276(sp)
8110cbb8:	dd404417 	ldw	r21,272(sp)
8110cbbc:	dd004317 	ldw	r20,268(sp)
8110cbc0:	dcc04217 	ldw	r19,264(sp)
8110cbc4:	dc804117 	ldw	r18,260(sp)
8110cbc8:	dc404017 	ldw	r17,256(sp)
8110cbcc:	dc003f17 	ldw	r16,252(sp)
8110cbd0:	dec04904 	addi	sp,sp,292
8110cbd4:	f800283a 	ret
8110cbd8:	d8802d17 	ldw	r2,180(sp)
8110cbdc:	d9002d17 	ldw	r4,180(sp)
8110cbe0:	10800017 	ldw	r2,0(r2)
8110cbe4:	d8803115 	stw	r2,196(sp)
8110cbe8:	20800104 	addi	r2,r4,4
8110cbec:	d9003117 	ldw	r4,196(sp)
8110cbf0:	203fb916 	blt	r4,zero,8110cad8 <__reset+0xfb0ecad8>
8110cbf4:	d8802d15 	stw	r2,180(sp)
8110cbf8:	bc400007 	ldb	r17,0(r23)
8110cbfc:	003f5406 	br	8110c950 <__reset+0xfb0ec950>
8110cc00:	bc400007 	ldb	r17,0(r23)
8110cc04:	bac00044 	addi	r11,r23,1
8110cc08:	8a873926 	beq	r17,r10,8110e8f0 <___svfprintf_internal_r+0x20f0>
8110cc0c:	88bff404 	addi	r2,r17,-48
8110cc10:	0009883a 	mov	r4,zero
8110cc14:	30868836 	bltu	r6,r2,8110e638 <___svfprintf_internal_r+0x1e38>
8110cc18:	5c400007 	ldb	r17,0(r11)
8110cc1c:	210002a4 	muli	r4,r4,10
8110cc20:	5dc00044 	addi	r23,r11,1
8110cc24:	b817883a 	mov	r11,r23
8110cc28:	2089883a 	add	r4,r4,r2
8110cc2c:	88bff404 	addi	r2,r17,-48
8110cc30:	30bff92e 	bgeu	r6,r2,8110cc18 <__reset+0xfb0ecc18>
8110cc34:	2005d716 	blt	r4,zero,8110e394 <___svfprintf_internal_r+0x1b94>
8110cc38:	d9002915 	stw	r4,164(sp)
8110cc3c:	003f4506 	br	8110c954 <__reset+0xfb0ec954>
8110cc40:	b809883a 	mov	r4,r23
8110cc44:	d8003115 	stw	zero,196(sp)
8110cc48:	88bff404 	addi	r2,r17,-48
8110cc4c:	0017883a 	mov	r11,zero
8110cc50:	24400007 	ldb	r17,0(r4)
8110cc54:	5ac002a4 	muli	r11,r11,10
8110cc58:	bdc00044 	addi	r23,r23,1
8110cc5c:	b809883a 	mov	r4,r23
8110cc60:	12d7883a 	add	r11,r2,r11
8110cc64:	88bff404 	addi	r2,r17,-48
8110cc68:	30bff92e 	bgeu	r6,r2,8110cc50 <__reset+0xfb0ecc50>
8110cc6c:	dac03115 	stw	r11,196(sp)
8110cc70:	003f3806 	br	8110c954 <__reset+0xfb0ec954>
8110cc74:	94802014 	ori	r18,r18,128
8110cc78:	bc400007 	ldb	r17,0(r23)
8110cc7c:	003f3406 	br	8110c950 <__reset+0xfb0ec950>
8110cc80:	18c03fcc 	andi	r3,r3,255
8110cc84:	1807471e 	bne	r3,zero,8110e9a4 <___svfprintf_internal_r+0x21a4>
8110cc88:	9080020c 	andi	r2,r18,8
8110cc8c:	10047d26 	beq	r2,zero,8110de84 <___svfprintf_internal_r+0x1684>
8110cc90:	d8c02d17 	ldw	r3,180(sp)
8110cc94:	d9002d17 	ldw	r4,180(sp)
8110cc98:	d9402d17 	ldw	r5,180(sp)
8110cc9c:	18c00017 	ldw	r3,0(r3)
8110cca0:	21000117 	ldw	r4,4(r4)
8110cca4:	29400204 	addi	r5,r5,8
8110cca8:	d8c03615 	stw	r3,216(sp)
8110ccac:	d9003715 	stw	r4,220(sp)
8110ccb0:	d9402d15 	stw	r5,180(sp)
8110ccb4:	d9003617 	ldw	r4,216(sp)
8110ccb8:	d9403717 	ldw	r5,220(sp)
8110ccbc:	da003e15 	stw	r8,248(sp)
8110ccc0:	04000044 	movi	r16,1
8110ccc4:	110a32c0 	call	8110a32c <__fpclassifyd>
8110ccc8:	da003e17 	ldw	r8,248(sp)
8110cccc:	14044b1e 	bne	r2,r16,8110ddfc <___svfprintf_internal_r+0x15fc>
8110ccd0:	d9003617 	ldw	r4,216(sp)
8110ccd4:	d9403717 	ldw	r5,220(sp)
8110ccd8:	000d883a 	mov	r6,zero
8110ccdc:	000f883a 	mov	r7,zero
8110cce0:	1114be40 	call	81114be4 <__ledf2>
8110cce4:	da003e17 	ldw	r8,248(sp)
8110cce8:	1005f316 	blt	r2,zero,8110e4b8 <___svfprintf_internal_r+0x1cb8>
8110ccec:	df002783 	ldbu	fp,158(sp)
8110ccf0:	008011c4 	movi	r2,71
8110ccf4:	1445590e 	bge	r2,r17,8110e25c <___svfprintf_internal_r+0x1a5c>
8110ccf8:	042044b4 	movhi	r16,33042
8110ccfc:	8411c304 	addi	r16,r16,18188
8110cd00:	00c000c4 	movi	r3,3
8110cd04:	00bfdfc4 	movi	r2,-129
8110cd08:	d8c02a15 	stw	r3,168(sp)
8110cd0c:	90a4703a 	and	r18,r18,r2
8110cd10:	d8c02e15 	stw	r3,184(sp)
8110cd14:	d8002915 	stw	zero,164(sp)
8110cd18:	d8003215 	stw	zero,200(sp)
8110cd1c:	00006606 	br	8110ceb8 <___svfprintf_internal_r+0x6b8>
8110cd20:	94800214 	ori	r18,r18,8
8110cd24:	bc400007 	ldb	r17,0(r23)
8110cd28:	003f0906 	br	8110c950 <__reset+0xfb0ec950>
8110cd2c:	18c03fcc 	andi	r3,r3,255
8110cd30:	1807181e 	bne	r3,zero,8110e994 <___svfprintf_internal_r+0x2194>
8110cd34:	94800414 	ori	r18,r18,16
8110cd38:	9080080c 	andi	r2,r18,32
8110cd3c:	10039626 	beq	r2,zero,8110db98 <___svfprintf_internal_r+0x1398>
8110cd40:	d9402d17 	ldw	r5,180(sp)
8110cd44:	28800117 	ldw	r2,4(r5)
8110cd48:	2d000017 	ldw	r20,0(r5)
8110cd4c:	29400204 	addi	r5,r5,8
8110cd50:	d9402d15 	stw	r5,180(sp)
8110cd54:	102d883a 	mov	r22,r2
8110cd58:	10039816 	blt	r2,zero,8110dbbc <___svfprintf_internal_r+0x13bc>
8110cd5c:	d9402917 	ldw	r5,164(sp)
8110cd60:	df002783 	ldbu	fp,158(sp)
8110cd64:	2803ab16 	blt	r5,zero,8110dc14 <___svfprintf_internal_r+0x1414>
8110cd68:	00ffdfc4 	movi	r3,-129
8110cd6c:	a584b03a 	or	r2,r20,r22
8110cd70:	90e4703a 	and	r18,r18,r3
8110cd74:	10014a26 	beq	r2,zero,8110d2a0 <___svfprintf_internal_r+0xaa0>
8110cd78:	b0034b26 	beq	r22,zero,8110daa8 <___svfprintf_internal_r+0x12a8>
8110cd7c:	dc402a15 	stw	r17,168(sp)
8110cd80:	dc001e04 	addi	r16,sp,120
8110cd84:	b023883a 	mov	r17,r22
8110cd88:	402d883a 	mov	r22,r8
8110cd8c:	a009883a 	mov	r4,r20
8110cd90:	880b883a 	mov	r5,r17
8110cd94:	01800284 	movi	r6,10
8110cd98:	000f883a 	mov	r7,zero
8110cd9c:	11130040 	call	81113004 <__umoddi3>
8110cda0:	10800c04 	addi	r2,r2,48
8110cda4:	843fffc4 	addi	r16,r16,-1
8110cda8:	a009883a 	mov	r4,r20
8110cdac:	880b883a 	mov	r5,r17
8110cdb0:	80800005 	stb	r2,0(r16)
8110cdb4:	01800284 	movi	r6,10
8110cdb8:	000f883a 	mov	r7,zero
8110cdbc:	1112a8c0 	call	81112a8c <__udivdi3>
8110cdc0:	1029883a 	mov	r20,r2
8110cdc4:	10c4b03a 	or	r2,r2,r3
8110cdc8:	1823883a 	mov	r17,r3
8110cdcc:	103fef1e 	bne	r2,zero,8110cd8c <__reset+0xfb0ecd8c>
8110cdd0:	d8c02817 	ldw	r3,160(sp)
8110cdd4:	dc402a17 	ldw	r17,168(sp)
8110cdd8:	b011883a 	mov	r8,r22
8110cddc:	1c07c83a 	sub	r3,r3,r16
8110cde0:	d8c02e15 	stw	r3,184(sp)
8110cde4:	00002e06 	br	8110cea0 <___svfprintf_internal_r+0x6a0>
8110cde8:	18c03fcc 	andi	r3,r3,255
8110cdec:	1806e71e 	bne	r3,zero,8110e98c <___svfprintf_internal_r+0x218c>
8110cdf0:	94800414 	ori	r18,r18,16
8110cdf4:	9080080c 	andi	r2,r18,32
8110cdf8:	1002d426 	beq	r2,zero,8110d94c <___svfprintf_internal_r+0x114c>
8110cdfc:	d9402d17 	ldw	r5,180(sp)
8110ce00:	d8c02917 	ldw	r3,164(sp)
8110ce04:	d8002785 	stb	zero,158(sp)
8110ce08:	28800204 	addi	r2,r5,8
8110ce0c:	2d000017 	ldw	r20,0(r5)
8110ce10:	2d800117 	ldw	r22,4(r5)
8110ce14:	18041516 	blt	r3,zero,8110de6c <___svfprintf_internal_r+0x166c>
8110ce18:	013fdfc4 	movi	r4,-129
8110ce1c:	a586b03a 	or	r3,r20,r22
8110ce20:	d8802d15 	stw	r2,180(sp)
8110ce24:	9124703a 	and	r18,r18,r4
8110ce28:	1802d51e 	bne	r3,zero,8110d980 <___svfprintf_internal_r+0x1180>
8110ce2c:	d9402917 	ldw	r5,164(sp)
8110ce30:	0039883a 	mov	fp,zero
8110ce34:	2806be26 	beq	r5,zero,8110e930 <___svfprintf_internal_r+0x2130>
8110ce38:	0029883a 	mov	r20,zero
8110ce3c:	002d883a 	mov	r22,zero
8110ce40:	dc001e04 	addi	r16,sp,120
8110ce44:	a006d0fa 	srli	r3,r20,3
8110ce48:	b008977a 	slli	r4,r22,29
8110ce4c:	b02cd0fa 	srli	r22,r22,3
8110ce50:	a50001cc 	andi	r20,r20,7
8110ce54:	a0800c04 	addi	r2,r20,48
8110ce58:	843fffc4 	addi	r16,r16,-1
8110ce5c:	20e8b03a 	or	r20,r4,r3
8110ce60:	80800005 	stb	r2,0(r16)
8110ce64:	a586b03a 	or	r3,r20,r22
8110ce68:	183ff61e 	bne	r3,zero,8110ce44 <__reset+0xfb0ece44>
8110ce6c:	90c0004c 	andi	r3,r18,1
8110ce70:	18013926 	beq	r3,zero,8110d358 <___svfprintf_internal_r+0xb58>
8110ce74:	10803fcc 	andi	r2,r2,255
8110ce78:	1080201c 	xori	r2,r2,128
8110ce7c:	10bfe004 	addi	r2,r2,-128
8110ce80:	00c00c04 	movi	r3,48
8110ce84:	10c13426 	beq	r2,r3,8110d358 <___svfprintf_internal_r+0xb58>
8110ce88:	80ffffc5 	stb	r3,-1(r16)
8110ce8c:	d8c02817 	ldw	r3,160(sp)
8110ce90:	80bfffc4 	addi	r2,r16,-1
8110ce94:	1021883a 	mov	r16,r2
8110ce98:	1887c83a 	sub	r3,r3,r2
8110ce9c:	d8c02e15 	stw	r3,184(sp)
8110cea0:	d8802e17 	ldw	r2,184(sp)
8110cea4:	d9002917 	ldw	r4,164(sp)
8110cea8:	1100010e 	bge	r2,r4,8110ceb0 <___svfprintf_internal_r+0x6b0>
8110ceac:	2005883a 	mov	r2,r4
8110ceb0:	d8802a15 	stw	r2,168(sp)
8110ceb4:	d8003215 	stw	zero,200(sp)
8110ceb8:	e7003fcc 	andi	fp,fp,255
8110cebc:	e700201c 	xori	fp,fp,128
8110cec0:	e73fe004 	addi	fp,fp,-128
8110cec4:	e0000326 	beq	fp,zero,8110ced4 <___svfprintf_internal_r+0x6d4>
8110cec8:	d8c02a17 	ldw	r3,168(sp)
8110cecc:	18c00044 	addi	r3,r3,1
8110ced0:	d8c02a15 	stw	r3,168(sp)
8110ced4:	90c0008c 	andi	r3,r18,2
8110ced8:	d8c02b15 	stw	r3,172(sp)
8110cedc:	18000326 	beq	r3,zero,8110ceec <___svfprintf_internal_r+0x6ec>
8110cee0:	d8c02a17 	ldw	r3,168(sp)
8110cee4:	18c00084 	addi	r3,r3,2
8110cee8:	d8c02a15 	stw	r3,168(sp)
8110ceec:	90c0210c 	andi	r3,r18,132
8110cef0:	d8c03015 	stw	r3,192(sp)
8110cef4:	1801a11e 	bne	r3,zero,8110d57c <___svfprintf_internal_r+0xd7c>
8110cef8:	d9003117 	ldw	r4,196(sp)
8110cefc:	d8c02a17 	ldw	r3,168(sp)
8110cf00:	20e9c83a 	sub	r20,r4,r3
8110cf04:	05019d0e 	bge	zero,r20,8110d57c <___svfprintf_internal_r+0xd7c>
8110cf08:	02400404 	movi	r9,16
8110cf0c:	d8c02017 	ldw	r3,128(sp)
8110cf10:	d8801f17 	ldw	r2,124(sp)
8110cf14:	4d051b0e 	bge	r9,r20,8110e384 <___svfprintf_internal_r+0x1b84>
8110cf18:	016044b4 	movhi	r5,33042
8110cf1c:	2952f204 	addi	r5,r5,19400
8110cf20:	dc403c15 	stw	r17,240(sp)
8110cf24:	d9403515 	stw	r5,212(sp)
8110cf28:	a023883a 	mov	r17,r20
8110cf2c:	482d883a 	mov	r22,r9
8110cf30:	9029883a 	mov	r20,r18
8110cf34:	070001c4 	movi	fp,7
8110cf38:	8025883a 	mov	r18,r16
8110cf3c:	dc002c17 	ldw	r16,176(sp)
8110cf40:	00000306 	br	8110cf50 <___svfprintf_internal_r+0x750>
8110cf44:	8c7ffc04 	addi	r17,r17,-16
8110cf48:	42000204 	addi	r8,r8,8
8110cf4c:	b440130e 	bge	r22,r17,8110cf9c <___svfprintf_internal_r+0x79c>
8110cf50:	012044b4 	movhi	r4,33042
8110cf54:	18c00404 	addi	r3,r3,16
8110cf58:	10800044 	addi	r2,r2,1
8110cf5c:	2112f204 	addi	r4,r4,19400
8110cf60:	41000015 	stw	r4,0(r8)
8110cf64:	45800115 	stw	r22,4(r8)
8110cf68:	d8c02015 	stw	r3,128(sp)
8110cf6c:	d8801f15 	stw	r2,124(sp)
8110cf70:	e0bff40e 	bge	fp,r2,8110cf44 <__reset+0xfb0ecf44>
8110cf74:	d9801e04 	addi	r6,sp,120
8110cf78:	800b883a 	mov	r5,r16
8110cf7c:	9809883a 	mov	r4,r19
8110cf80:	11112cc0 	call	811112cc <__ssprint_r>
8110cf84:	103f031e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110cf88:	8c7ffc04 	addi	r17,r17,-16
8110cf8c:	d8c02017 	ldw	r3,128(sp)
8110cf90:	d8801f17 	ldw	r2,124(sp)
8110cf94:	da000404 	addi	r8,sp,16
8110cf98:	b47fed16 	blt	r22,r17,8110cf50 <__reset+0xfb0ecf50>
8110cf9c:	9021883a 	mov	r16,r18
8110cfa0:	a025883a 	mov	r18,r20
8110cfa4:	8829883a 	mov	r20,r17
8110cfa8:	dc403c17 	ldw	r17,240(sp)
8110cfac:	d9403517 	ldw	r5,212(sp)
8110cfb0:	a0c7883a 	add	r3,r20,r3
8110cfb4:	10800044 	addi	r2,r2,1
8110cfb8:	41400015 	stw	r5,0(r8)
8110cfbc:	45000115 	stw	r20,4(r8)
8110cfc0:	d8c02015 	stw	r3,128(sp)
8110cfc4:	d8801f15 	stw	r2,124(sp)
8110cfc8:	010001c4 	movi	r4,7
8110cfcc:	20829f16 	blt	r4,r2,8110da4c <___svfprintf_internal_r+0x124c>
8110cfd0:	df002787 	ldb	fp,158(sp)
8110cfd4:	42000204 	addi	r8,r8,8
8110cfd8:	e0000c26 	beq	fp,zero,8110d00c <___svfprintf_internal_r+0x80c>
8110cfdc:	d8801f17 	ldw	r2,124(sp)
8110cfe0:	d9002784 	addi	r4,sp,158
8110cfe4:	18c00044 	addi	r3,r3,1
8110cfe8:	10800044 	addi	r2,r2,1
8110cfec:	41000015 	stw	r4,0(r8)
8110cff0:	01000044 	movi	r4,1
8110cff4:	41000115 	stw	r4,4(r8)
8110cff8:	d8c02015 	stw	r3,128(sp)
8110cffc:	d8801f15 	stw	r2,124(sp)
8110d000:	010001c4 	movi	r4,7
8110d004:	20823816 	blt	r4,r2,8110d8e8 <___svfprintf_internal_r+0x10e8>
8110d008:	42000204 	addi	r8,r8,8
8110d00c:	d8802b17 	ldw	r2,172(sp)
8110d010:	10000c26 	beq	r2,zero,8110d044 <___svfprintf_internal_r+0x844>
8110d014:	d8801f17 	ldw	r2,124(sp)
8110d018:	d9002704 	addi	r4,sp,156
8110d01c:	18c00084 	addi	r3,r3,2
8110d020:	10800044 	addi	r2,r2,1
8110d024:	41000015 	stw	r4,0(r8)
8110d028:	01000084 	movi	r4,2
8110d02c:	41000115 	stw	r4,4(r8)
8110d030:	d8c02015 	stw	r3,128(sp)
8110d034:	d8801f15 	stw	r2,124(sp)
8110d038:	010001c4 	movi	r4,7
8110d03c:	20823216 	blt	r4,r2,8110d908 <___svfprintf_internal_r+0x1108>
8110d040:	42000204 	addi	r8,r8,8
8110d044:	d9003017 	ldw	r4,192(sp)
8110d048:	00802004 	movi	r2,128
8110d04c:	20819726 	beq	r4,r2,8110d6ac <___svfprintf_internal_r+0xeac>
8110d050:	d9402917 	ldw	r5,164(sp)
8110d054:	d8802e17 	ldw	r2,184(sp)
8110d058:	28adc83a 	sub	r22,r5,r2
8110d05c:	05802f0e 	bge	zero,r22,8110d11c <___svfprintf_internal_r+0x91c>
8110d060:	07000404 	movi	fp,16
8110d064:	d8801f17 	ldw	r2,124(sp)
8110d068:	e583c00e 	bge	fp,r22,8110df6c <___svfprintf_internal_r+0x176c>
8110d06c:	016044b4 	movhi	r5,33042
8110d070:	2952ee04 	addi	r5,r5,19384
8110d074:	dc402915 	stw	r17,164(sp)
8110d078:	d9402b15 	stw	r5,172(sp)
8110d07c:	b023883a 	mov	r17,r22
8110d080:	050001c4 	movi	r20,7
8110d084:	902d883a 	mov	r22,r18
8110d088:	8025883a 	mov	r18,r16
8110d08c:	dc002c17 	ldw	r16,176(sp)
8110d090:	00000306 	br	8110d0a0 <___svfprintf_internal_r+0x8a0>
8110d094:	8c7ffc04 	addi	r17,r17,-16
8110d098:	42000204 	addi	r8,r8,8
8110d09c:	e440110e 	bge	fp,r17,8110d0e4 <___svfprintf_internal_r+0x8e4>
8110d0a0:	18c00404 	addi	r3,r3,16
8110d0a4:	10800044 	addi	r2,r2,1
8110d0a8:	45400015 	stw	r21,0(r8)
8110d0ac:	47000115 	stw	fp,4(r8)
8110d0b0:	d8c02015 	stw	r3,128(sp)
8110d0b4:	d8801f15 	stw	r2,124(sp)
8110d0b8:	a0bff60e 	bge	r20,r2,8110d094 <__reset+0xfb0ed094>
8110d0bc:	d9801e04 	addi	r6,sp,120
8110d0c0:	800b883a 	mov	r5,r16
8110d0c4:	9809883a 	mov	r4,r19
8110d0c8:	11112cc0 	call	811112cc <__ssprint_r>
8110d0cc:	103eb11e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110d0d0:	8c7ffc04 	addi	r17,r17,-16
8110d0d4:	d8c02017 	ldw	r3,128(sp)
8110d0d8:	d8801f17 	ldw	r2,124(sp)
8110d0dc:	da000404 	addi	r8,sp,16
8110d0e0:	e47fef16 	blt	fp,r17,8110d0a0 <__reset+0xfb0ed0a0>
8110d0e4:	9021883a 	mov	r16,r18
8110d0e8:	b025883a 	mov	r18,r22
8110d0ec:	882d883a 	mov	r22,r17
8110d0f0:	dc402917 	ldw	r17,164(sp)
8110d0f4:	d9002b17 	ldw	r4,172(sp)
8110d0f8:	1d87883a 	add	r3,r3,r22
8110d0fc:	10800044 	addi	r2,r2,1
8110d100:	41000015 	stw	r4,0(r8)
8110d104:	45800115 	stw	r22,4(r8)
8110d108:	d8c02015 	stw	r3,128(sp)
8110d10c:	d8801f15 	stw	r2,124(sp)
8110d110:	010001c4 	movi	r4,7
8110d114:	2081ec16 	blt	r4,r2,8110d8c8 <___svfprintf_internal_r+0x10c8>
8110d118:	42000204 	addi	r8,r8,8
8110d11c:	9080400c 	andi	r2,r18,256
8110d120:	1001181e 	bne	r2,zero,8110d584 <___svfprintf_internal_r+0xd84>
8110d124:	d9402e17 	ldw	r5,184(sp)
8110d128:	d8801f17 	ldw	r2,124(sp)
8110d12c:	44000015 	stw	r16,0(r8)
8110d130:	1947883a 	add	r3,r3,r5
8110d134:	10800044 	addi	r2,r2,1
8110d138:	41400115 	stw	r5,4(r8)
8110d13c:	d8c02015 	stw	r3,128(sp)
8110d140:	d8801f15 	stw	r2,124(sp)
8110d144:	010001c4 	movi	r4,7
8110d148:	2081d116 	blt	r4,r2,8110d890 <___svfprintf_internal_r+0x1090>
8110d14c:	42000204 	addi	r8,r8,8
8110d150:	9480010c 	andi	r18,r18,4
8110d154:	90003226 	beq	r18,zero,8110d220 <___svfprintf_internal_r+0xa20>
8110d158:	d9403117 	ldw	r5,196(sp)
8110d15c:	d8802a17 	ldw	r2,168(sp)
8110d160:	28a1c83a 	sub	r16,r5,r2
8110d164:	04002e0e 	bge	zero,r16,8110d220 <___svfprintf_internal_r+0xa20>
8110d168:	04400404 	movi	r17,16
8110d16c:	d8801f17 	ldw	r2,124(sp)
8110d170:	8c04b90e 	bge	r17,r16,8110e458 <___svfprintf_internal_r+0x1c58>
8110d174:	016044b4 	movhi	r5,33042
8110d178:	2952f204 	addi	r5,r5,19400
8110d17c:	d9403515 	stw	r5,212(sp)
8110d180:	048001c4 	movi	r18,7
8110d184:	dd002c17 	ldw	r20,176(sp)
8110d188:	00000306 	br	8110d198 <___svfprintf_internal_r+0x998>
8110d18c:	843ffc04 	addi	r16,r16,-16
8110d190:	42000204 	addi	r8,r8,8
8110d194:	8c00130e 	bge	r17,r16,8110d1e4 <___svfprintf_internal_r+0x9e4>
8110d198:	012044b4 	movhi	r4,33042
8110d19c:	18c00404 	addi	r3,r3,16
8110d1a0:	10800044 	addi	r2,r2,1
8110d1a4:	2112f204 	addi	r4,r4,19400
8110d1a8:	41000015 	stw	r4,0(r8)
8110d1ac:	44400115 	stw	r17,4(r8)
8110d1b0:	d8c02015 	stw	r3,128(sp)
8110d1b4:	d8801f15 	stw	r2,124(sp)
8110d1b8:	90bff40e 	bge	r18,r2,8110d18c <__reset+0xfb0ed18c>
8110d1bc:	d9801e04 	addi	r6,sp,120
8110d1c0:	a00b883a 	mov	r5,r20
8110d1c4:	9809883a 	mov	r4,r19
8110d1c8:	11112cc0 	call	811112cc <__ssprint_r>
8110d1cc:	103e711e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110d1d0:	843ffc04 	addi	r16,r16,-16
8110d1d4:	d8c02017 	ldw	r3,128(sp)
8110d1d8:	d8801f17 	ldw	r2,124(sp)
8110d1dc:	da000404 	addi	r8,sp,16
8110d1e0:	8c3fed16 	blt	r17,r16,8110d198 <__reset+0xfb0ed198>
8110d1e4:	d9403517 	ldw	r5,212(sp)
8110d1e8:	1c07883a 	add	r3,r3,r16
8110d1ec:	10800044 	addi	r2,r2,1
8110d1f0:	41400015 	stw	r5,0(r8)
8110d1f4:	44000115 	stw	r16,4(r8)
8110d1f8:	d8c02015 	stw	r3,128(sp)
8110d1fc:	d8801f15 	stw	r2,124(sp)
8110d200:	010001c4 	movi	r4,7
8110d204:	2080060e 	bge	r4,r2,8110d220 <___svfprintf_internal_r+0xa20>
8110d208:	d9402c17 	ldw	r5,176(sp)
8110d20c:	d9801e04 	addi	r6,sp,120
8110d210:	9809883a 	mov	r4,r19
8110d214:	11112cc0 	call	811112cc <__ssprint_r>
8110d218:	103e5e1e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110d21c:	d8c02017 	ldw	r3,128(sp)
8110d220:	d8803117 	ldw	r2,196(sp)
8110d224:	d9002a17 	ldw	r4,168(sp)
8110d228:	1100010e 	bge	r2,r4,8110d230 <___svfprintf_internal_r+0xa30>
8110d22c:	2005883a 	mov	r2,r4
8110d230:	d9402f17 	ldw	r5,188(sp)
8110d234:	288b883a 	add	r5,r5,r2
8110d238:	d9402f15 	stw	r5,188(sp)
8110d23c:	18019c1e 	bne	r3,zero,8110d8b0 <___svfprintf_internal_r+0x10b0>
8110d240:	b8800007 	ldb	r2,0(r23)
8110d244:	d8001f15 	stw	zero,124(sp)
8110d248:	da000404 	addi	r8,sp,16
8110d24c:	103d991e 	bne	r2,zero,8110c8b4 <__reset+0xfb0ec8b4>
8110d250:	b821883a 	mov	r16,r23
8110d254:	003daf06 	br	8110c914 <__reset+0xfb0ec914>
8110d258:	18c03fcc 	andi	r3,r3,255
8110d25c:	1805c71e 	bne	r3,zero,8110e97c <___svfprintf_internal_r+0x217c>
8110d260:	94800414 	ori	r18,r18,16
8110d264:	9080080c 	andi	r2,r18,32
8110d268:	10020126 	beq	r2,zero,8110da70 <___svfprintf_internal_r+0x1270>
8110d26c:	d8802d17 	ldw	r2,180(sp)
8110d270:	d9002917 	ldw	r4,164(sp)
8110d274:	d8002785 	stb	zero,158(sp)
8110d278:	10c00204 	addi	r3,r2,8
8110d27c:	15000017 	ldw	r20,0(r2)
8110d280:	15800117 	ldw	r22,4(r2)
8110d284:	20038e16 	blt	r4,zero,8110e0c0 <___svfprintf_internal_r+0x18c0>
8110d288:	013fdfc4 	movi	r4,-129
8110d28c:	a584b03a 	or	r2,r20,r22
8110d290:	d8c02d15 	stw	r3,180(sp)
8110d294:	9124703a 	and	r18,r18,r4
8110d298:	0039883a 	mov	fp,zero
8110d29c:	103eb61e 	bne	r2,zero,8110cd78 <__reset+0xfb0ecd78>
8110d2a0:	d8802917 	ldw	r2,164(sp)
8110d2a4:	1002c81e 	bne	r2,zero,8110ddc8 <___svfprintf_internal_r+0x15c8>
8110d2a8:	d8002915 	stw	zero,164(sp)
8110d2ac:	d8002e15 	stw	zero,184(sp)
8110d2b0:	dc001e04 	addi	r16,sp,120
8110d2b4:	003efa06 	br	8110cea0 <__reset+0xfb0ecea0>
8110d2b8:	18c03fcc 	andi	r3,r3,255
8110d2bc:	1805ad1e 	bne	r3,zero,8110e974 <___svfprintf_internal_r+0x2174>
8110d2c0:	016044b4 	movhi	r5,33042
8110d2c4:	2951c604 	addi	r5,r5,18200
8110d2c8:	d9403a15 	stw	r5,232(sp)
8110d2cc:	9080080c 	andi	r2,r18,32
8110d2d0:	10006126 	beq	r2,zero,8110d458 <___svfprintf_internal_r+0xc58>
8110d2d4:	d8802d17 	ldw	r2,180(sp)
8110d2d8:	15000017 	ldw	r20,0(r2)
8110d2dc:	15800117 	ldw	r22,4(r2)
8110d2e0:	10800204 	addi	r2,r2,8
8110d2e4:	d8802d15 	stw	r2,180(sp)
8110d2e8:	9080004c 	andi	r2,r18,1
8110d2ec:	10018e26 	beq	r2,zero,8110d928 <___svfprintf_internal_r+0x1128>
8110d2f0:	a584b03a 	or	r2,r20,r22
8110d2f4:	10030926 	beq	r2,zero,8110df1c <___svfprintf_internal_r+0x171c>
8110d2f8:	d8c02917 	ldw	r3,164(sp)
8110d2fc:	00800c04 	movi	r2,48
8110d300:	d8802705 	stb	r2,156(sp)
8110d304:	dc402745 	stb	r17,157(sp)
8110d308:	d8002785 	stb	zero,158(sp)
8110d30c:	90800094 	ori	r2,r18,2
8110d310:	18048716 	blt	r3,zero,8110e530 <___svfprintf_internal_r+0x1d30>
8110d314:	00bfdfc4 	movi	r2,-129
8110d318:	90a4703a 	and	r18,r18,r2
8110d31c:	94800094 	ori	r18,r18,2
8110d320:	0039883a 	mov	fp,zero
8110d324:	d9003a17 	ldw	r4,232(sp)
8110d328:	dc001e04 	addi	r16,sp,120
8110d32c:	a08003cc 	andi	r2,r20,15
8110d330:	b006973a 	slli	r3,r22,28
8110d334:	2085883a 	add	r2,r4,r2
8110d338:	a028d13a 	srli	r20,r20,4
8110d33c:	10800003 	ldbu	r2,0(r2)
8110d340:	b02cd13a 	srli	r22,r22,4
8110d344:	843fffc4 	addi	r16,r16,-1
8110d348:	1d28b03a 	or	r20,r3,r20
8110d34c:	80800005 	stb	r2,0(r16)
8110d350:	a584b03a 	or	r2,r20,r22
8110d354:	103ff51e 	bne	r2,zero,8110d32c <__reset+0xfb0ed32c>
8110d358:	d8c02817 	ldw	r3,160(sp)
8110d35c:	1c07c83a 	sub	r3,r3,r16
8110d360:	d8c02e15 	stw	r3,184(sp)
8110d364:	003ece06 	br	8110cea0 <__reset+0xfb0ecea0>
8110d368:	d8c02d17 	ldw	r3,180(sp)
8110d36c:	d9002d17 	ldw	r4,180(sp)
8110d370:	d8002785 	stb	zero,158(sp)
8110d374:	18800017 	ldw	r2,0(r3)
8110d378:	21000104 	addi	r4,r4,4
8110d37c:	00c00044 	movi	r3,1
8110d380:	d8c02a15 	stw	r3,168(sp)
8110d384:	d8801405 	stb	r2,80(sp)
8110d388:	d9002d15 	stw	r4,180(sp)
8110d38c:	d8c02e15 	stw	r3,184(sp)
8110d390:	d8002915 	stw	zero,164(sp)
8110d394:	d8003215 	stw	zero,200(sp)
8110d398:	dc001404 	addi	r16,sp,80
8110d39c:	0039883a 	mov	fp,zero
8110d3a0:	003ecc06 	br	8110ced4 <__reset+0xfb0eced4>
8110d3a4:	18c03fcc 	andi	r3,r3,255
8110d3a8:	183e9226 	beq	r3,zero,8110cdf4 <__reset+0xfb0ecdf4>
8110d3ac:	d9c02785 	stb	r7,158(sp)
8110d3b0:	003e9006 	br	8110cdf4 <__reset+0xfb0ecdf4>
8110d3b4:	00c00044 	movi	r3,1
8110d3b8:	01c00ac4 	movi	r7,43
8110d3bc:	bc400007 	ldb	r17,0(r23)
8110d3c0:	003d6306 	br	8110c950 <__reset+0xfb0ec950>
8110d3c4:	94800814 	ori	r18,r18,32
8110d3c8:	bc400007 	ldb	r17,0(r23)
8110d3cc:	003d6006 	br	8110c950 <__reset+0xfb0ec950>
8110d3d0:	d8c02d17 	ldw	r3,180(sp)
8110d3d4:	d8002785 	stb	zero,158(sp)
8110d3d8:	1c000017 	ldw	r16,0(r3)
8110d3dc:	1d000104 	addi	r20,r3,4
8110d3e0:	80040f26 	beq	r16,zero,8110e420 <___svfprintf_internal_r+0x1c20>
8110d3e4:	d9002917 	ldw	r4,164(sp)
8110d3e8:	2003dc16 	blt	r4,zero,8110e35c <___svfprintf_internal_r+0x1b5c>
8110d3ec:	200d883a 	mov	r6,r4
8110d3f0:	000b883a 	mov	r5,zero
8110d3f4:	8009883a 	mov	r4,r16
8110d3f8:	da003e15 	stw	r8,248(sp)
8110d3fc:	11089e40 	call	811089e4 <memchr>
8110d400:	da003e17 	ldw	r8,248(sp)
8110d404:	10045826 	beq	r2,zero,8110e568 <___svfprintf_internal_r+0x1d68>
8110d408:	1405c83a 	sub	r2,r2,r16
8110d40c:	d8802e15 	stw	r2,184(sp)
8110d410:	1003d816 	blt	r2,zero,8110e374 <___svfprintf_internal_r+0x1b74>
8110d414:	df002783 	ldbu	fp,158(sp)
8110d418:	d8802a15 	stw	r2,168(sp)
8110d41c:	dd002d15 	stw	r20,180(sp)
8110d420:	d8002915 	stw	zero,164(sp)
8110d424:	d8003215 	stw	zero,200(sp)
8110d428:	003ea306 	br	8110ceb8 <__reset+0xfb0eceb8>
8110d42c:	18c03fcc 	andi	r3,r3,255
8110d430:	183f8c26 	beq	r3,zero,8110d264 <__reset+0xfb0ed264>
8110d434:	d9c02785 	stb	r7,158(sp)
8110d438:	003f8a06 	br	8110d264 <__reset+0xfb0ed264>
8110d43c:	18c03fcc 	andi	r3,r3,255
8110d440:	1805631e 	bne	r3,zero,8110e9d0 <___svfprintf_internal_r+0x21d0>
8110d444:	016044b4 	movhi	r5,33042
8110d448:	2951cb04 	addi	r5,r5,18220
8110d44c:	d9403a15 	stw	r5,232(sp)
8110d450:	9080080c 	andi	r2,r18,32
8110d454:	103f9f1e 	bne	r2,zero,8110d2d4 <__reset+0xfb0ed2d4>
8110d458:	9080040c 	andi	r2,r18,16
8110d45c:	10029c26 	beq	r2,zero,8110ded0 <___svfprintf_internal_r+0x16d0>
8110d460:	d8c02d17 	ldw	r3,180(sp)
8110d464:	002d883a 	mov	r22,zero
8110d468:	1d000017 	ldw	r20,0(r3)
8110d46c:	18c00104 	addi	r3,r3,4
8110d470:	d8c02d15 	stw	r3,180(sp)
8110d474:	003f9c06 	br	8110d2e8 <__reset+0xfb0ed2e8>
8110d478:	94800054 	ori	r18,r18,1
8110d47c:	bc400007 	ldb	r17,0(r23)
8110d480:	003d3306 	br	8110c950 <__reset+0xfb0ec950>
8110d484:	38803fcc 	andi	r2,r7,255
8110d488:	1080201c 	xori	r2,r2,128
8110d48c:	10bfe004 	addi	r2,r2,-128
8110d490:	1002971e 	bne	r2,zero,8110def0 <___svfprintf_internal_r+0x16f0>
8110d494:	00c00044 	movi	r3,1
8110d498:	01c00804 	movi	r7,32
8110d49c:	bc400007 	ldb	r17,0(r23)
8110d4a0:	003d2b06 	br	8110c950 <__reset+0xfb0ec950>
8110d4a4:	18c03fcc 	andi	r3,r3,255
8110d4a8:	183e2326 	beq	r3,zero,8110cd38 <__reset+0xfb0ecd38>
8110d4ac:	d9c02785 	stb	r7,158(sp)
8110d4b0:	003e2106 	br	8110cd38 <__reset+0xfb0ecd38>
8110d4b4:	bc400007 	ldb	r17,0(r23)
8110d4b8:	8a430426 	beq	r17,r9,8110e0cc <___svfprintf_internal_r+0x18cc>
8110d4bc:	94800414 	ori	r18,r18,16
8110d4c0:	003d2306 	br	8110c950 <__reset+0xfb0ec950>
8110d4c4:	18c03fcc 	andi	r3,r3,255
8110d4c8:	18053f1e 	bne	r3,zero,8110e9c8 <___svfprintf_internal_r+0x21c8>
8110d4cc:	9080080c 	andi	r2,r18,32
8110d4d0:	10028926 	beq	r2,zero,8110def8 <___svfprintf_internal_r+0x16f8>
8110d4d4:	d9402d17 	ldw	r5,180(sp)
8110d4d8:	d9002f17 	ldw	r4,188(sp)
8110d4dc:	28800017 	ldw	r2,0(r5)
8110d4e0:	2007d7fa 	srai	r3,r4,31
8110d4e4:	29400104 	addi	r5,r5,4
8110d4e8:	d9402d15 	stw	r5,180(sp)
8110d4ec:	11000015 	stw	r4,0(r2)
8110d4f0:	10c00115 	stw	r3,4(r2)
8110d4f4:	003ced06 	br	8110c8ac <__reset+0xfb0ec8ac>
8110d4f8:	94801014 	ori	r18,r18,64
8110d4fc:	bc400007 	ldb	r17,0(r23)
8110d500:	003d1306 	br	8110c950 <__reset+0xfb0ec950>
8110d504:	012044b4 	movhi	r4,33042
8110d508:	2111cb04 	addi	r4,r4,18220
8110d50c:	0039883a 	mov	fp,zero
8110d510:	d9003a15 	stw	r4,232(sp)
8110d514:	04401e04 	movi	r17,120
8110d518:	003f8206 	br	8110d324 <__reset+0xfb0ed324>
8110d51c:	18c03fcc 	andi	r3,r3,255
8110d520:	1805221e 	bne	r3,zero,8110e9ac <___svfprintf_internal_r+0x21ac>
8110d524:	883d9526 	beq	r17,zero,8110cb7c <__reset+0xfb0ecb7c>
8110d528:	00c00044 	movi	r3,1
8110d52c:	d8c02a15 	stw	r3,168(sp)
8110d530:	dc401405 	stb	r17,80(sp)
8110d534:	d8002785 	stb	zero,158(sp)
8110d538:	003f9406 	br	8110d38c <__reset+0xfb0ed38c>
8110d53c:	012044b4 	movhi	r4,33042
8110d540:	2111cb04 	addi	r4,r4,18220
8110d544:	d9003a15 	stw	r4,232(sp)
8110d548:	d8c02d15 	stw	r3,180(sp)
8110d54c:	1025883a 	mov	r18,r2
8110d550:	04401e04 	movi	r17,120
8110d554:	a584b03a 	or	r2,r20,r22
8110d558:	1000fa1e 	bne	r2,zero,8110d944 <___svfprintf_internal_r+0x1144>
8110d55c:	0039883a 	mov	fp,zero
8110d560:	00800084 	movi	r2,2
8110d564:	10803fcc 	andi	r2,r2,255
8110d568:	00c00044 	movi	r3,1
8110d56c:	10c21626 	beq	r2,r3,8110ddc8 <___svfprintf_internal_r+0x15c8>
8110d570:	00c00084 	movi	r3,2
8110d574:	10fe301e 	bne	r2,r3,8110ce38 <__reset+0xfb0ece38>
8110d578:	003d7606 	br	8110cb54 <__reset+0xfb0ecb54>
8110d57c:	d8c02017 	ldw	r3,128(sp)
8110d580:	003e9506 	br	8110cfd8 <__reset+0xfb0ecfd8>
8110d584:	00801944 	movi	r2,101
8110d588:	14407c0e 	bge	r2,r17,8110d77c <___svfprintf_internal_r+0xf7c>
8110d58c:	d9003617 	ldw	r4,216(sp)
8110d590:	d9403717 	ldw	r5,220(sp)
8110d594:	000d883a 	mov	r6,zero
8110d598:	000f883a 	mov	r7,zero
8110d59c:	d8c03d15 	stw	r3,244(sp)
8110d5a0:	da003e15 	stw	r8,248(sp)
8110d5a4:	1114a800 	call	81114a80 <__eqdf2>
8110d5a8:	d8c03d17 	ldw	r3,244(sp)
8110d5ac:	da003e17 	ldw	r8,248(sp)
8110d5b0:	1000f51e 	bne	r2,zero,8110d988 <___svfprintf_internal_r+0x1188>
8110d5b4:	d8801f17 	ldw	r2,124(sp)
8110d5b8:	012044b4 	movhi	r4,33042
8110d5bc:	2111d204 	addi	r4,r4,18248
8110d5c0:	18c00044 	addi	r3,r3,1
8110d5c4:	10800044 	addi	r2,r2,1
8110d5c8:	41000015 	stw	r4,0(r8)
8110d5cc:	01000044 	movi	r4,1
8110d5d0:	41000115 	stw	r4,4(r8)
8110d5d4:	d8c02015 	stw	r3,128(sp)
8110d5d8:	d8801f15 	stw	r2,124(sp)
8110d5dc:	010001c4 	movi	r4,7
8110d5e0:	20826616 	blt	r4,r2,8110df7c <___svfprintf_internal_r+0x177c>
8110d5e4:	42000204 	addi	r8,r8,8
8110d5e8:	d8802617 	ldw	r2,152(sp)
8110d5ec:	d9403317 	ldw	r5,204(sp)
8110d5f0:	11400216 	blt	r2,r5,8110d5fc <___svfprintf_internal_r+0xdfc>
8110d5f4:	9080004c 	andi	r2,r18,1
8110d5f8:	103ed526 	beq	r2,zero,8110d150 <__reset+0xfb0ed150>
8110d5fc:	d8803817 	ldw	r2,224(sp)
8110d600:	d9003417 	ldw	r4,208(sp)
8110d604:	d9403817 	ldw	r5,224(sp)
8110d608:	1887883a 	add	r3,r3,r2
8110d60c:	d8801f17 	ldw	r2,124(sp)
8110d610:	41000015 	stw	r4,0(r8)
8110d614:	41400115 	stw	r5,4(r8)
8110d618:	10800044 	addi	r2,r2,1
8110d61c:	d8c02015 	stw	r3,128(sp)
8110d620:	d8801f15 	stw	r2,124(sp)
8110d624:	010001c4 	movi	r4,7
8110d628:	2082af16 	blt	r4,r2,8110e0e8 <___svfprintf_internal_r+0x18e8>
8110d62c:	42000204 	addi	r8,r8,8
8110d630:	d8803317 	ldw	r2,204(sp)
8110d634:	143fffc4 	addi	r16,r2,-1
8110d638:	043ec50e 	bge	zero,r16,8110d150 <__reset+0xfb0ed150>
8110d63c:	04400404 	movi	r17,16
8110d640:	d8801f17 	ldw	r2,124(sp)
8110d644:	8c00860e 	bge	r17,r16,8110d860 <___svfprintf_internal_r+0x1060>
8110d648:	016044b4 	movhi	r5,33042
8110d64c:	2952ee04 	addi	r5,r5,19384
8110d650:	d9402b15 	stw	r5,172(sp)
8110d654:	058001c4 	movi	r22,7
8110d658:	dd002c17 	ldw	r20,176(sp)
8110d65c:	00000306 	br	8110d66c <___svfprintf_internal_r+0xe6c>
8110d660:	42000204 	addi	r8,r8,8
8110d664:	843ffc04 	addi	r16,r16,-16
8110d668:	8c00800e 	bge	r17,r16,8110d86c <___svfprintf_internal_r+0x106c>
8110d66c:	18c00404 	addi	r3,r3,16
8110d670:	10800044 	addi	r2,r2,1
8110d674:	45400015 	stw	r21,0(r8)
8110d678:	44400115 	stw	r17,4(r8)
8110d67c:	d8c02015 	stw	r3,128(sp)
8110d680:	d8801f15 	stw	r2,124(sp)
8110d684:	b0bff60e 	bge	r22,r2,8110d660 <__reset+0xfb0ed660>
8110d688:	d9801e04 	addi	r6,sp,120
8110d68c:	a00b883a 	mov	r5,r20
8110d690:	9809883a 	mov	r4,r19
8110d694:	11112cc0 	call	811112cc <__ssprint_r>
8110d698:	103d3e1e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110d69c:	d8c02017 	ldw	r3,128(sp)
8110d6a0:	d8801f17 	ldw	r2,124(sp)
8110d6a4:	da000404 	addi	r8,sp,16
8110d6a8:	003fee06 	br	8110d664 <__reset+0xfb0ed664>
8110d6ac:	d9403117 	ldw	r5,196(sp)
8110d6b0:	d8802a17 	ldw	r2,168(sp)
8110d6b4:	28adc83a 	sub	r22,r5,r2
8110d6b8:	05be650e 	bge	zero,r22,8110d050 <__reset+0xfb0ed050>
8110d6bc:	07000404 	movi	fp,16
8110d6c0:	d8801f17 	ldw	r2,124(sp)
8110d6c4:	e583a20e 	bge	fp,r22,8110e550 <___svfprintf_internal_r+0x1d50>
8110d6c8:	016044b4 	movhi	r5,33042
8110d6cc:	2952ee04 	addi	r5,r5,19384
8110d6d0:	dc403015 	stw	r17,192(sp)
8110d6d4:	d9402b15 	stw	r5,172(sp)
8110d6d8:	b023883a 	mov	r17,r22
8110d6dc:	050001c4 	movi	r20,7
8110d6e0:	902d883a 	mov	r22,r18
8110d6e4:	8025883a 	mov	r18,r16
8110d6e8:	dc002c17 	ldw	r16,176(sp)
8110d6ec:	00000306 	br	8110d6fc <___svfprintf_internal_r+0xefc>
8110d6f0:	8c7ffc04 	addi	r17,r17,-16
8110d6f4:	42000204 	addi	r8,r8,8
8110d6f8:	e440110e 	bge	fp,r17,8110d740 <___svfprintf_internal_r+0xf40>
8110d6fc:	18c00404 	addi	r3,r3,16
8110d700:	10800044 	addi	r2,r2,1
8110d704:	45400015 	stw	r21,0(r8)
8110d708:	47000115 	stw	fp,4(r8)
8110d70c:	d8c02015 	stw	r3,128(sp)
8110d710:	d8801f15 	stw	r2,124(sp)
8110d714:	a0bff60e 	bge	r20,r2,8110d6f0 <__reset+0xfb0ed6f0>
8110d718:	d9801e04 	addi	r6,sp,120
8110d71c:	800b883a 	mov	r5,r16
8110d720:	9809883a 	mov	r4,r19
8110d724:	11112cc0 	call	811112cc <__ssprint_r>
8110d728:	103d1a1e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110d72c:	8c7ffc04 	addi	r17,r17,-16
8110d730:	d8c02017 	ldw	r3,128(sp)
8110d734:	d8801f17 	ldw	r2,124(sp)
8110d738:	da000404 	addi	r8,sp,16
8110d73c:	e47fef16 	blt	fp,r17,8110d6fc <__reset+0xfb0ed6fc>
8110d740:	9021883a 	mov	r16,r18
8110d744:	b025883a 	mov	r18,r22
8110d748:	882d883a 	mov	r22,r17
8110d74c:	dc403017 	ldw	r17,192(sp)
8110d750:	d9002b17 	ldw	r4,172(sp)
8110d754:	1d87883a 	add	r3,r3,r22
8110d758:	10800044 	addi	r2,r2,1
8110d75c:	41000015 	stw	r4,0(r8)
8110d760:	45800115 	stw	r22,4(r8)
8110d764:	d8c02015 	stw	r3,128(sp)
8110d768:	d8801f15 	stw	r2,124(sp)
8110d76c:	010001c4 	movi	r4,7
8110d770:	20819a16 	blt	r4,r2,8110dddc <___svfprintf_internal_r+0x15dc>
8110d774:	42000204 	addi	r8,r8,8
8110d778:	003e3506 	br	8110d050 <__reset+0xfb0ed050>
8110d77c:	d9403317 	ldw	r5,204(sp)
8110d780:	00800044 	movi	r2,1
8110d784:	18c00044 	addi	r3,r3,1
8110d788:	1141710e 	bge	r2,r5,8110dd50 <___svfprintf_internal_r+0x1550>
8110d78c:	dc401f17 	ldw	r17,124(sp)
8110d790:	00800044 	movi	r2,1
8110d794:	40800115 	stw	r2,4(r8)
8110d798:	8c400044 	addi	r17,r17,1
8110d79c:	44000015 	stw	r16,0(r8)
8110d7a0:	d8c02015 	stw	r3,128(sp)
8110d7a4:	dc401f15 	stw	r17,124(sp)
8110d7a8:	008001c4 	movi	r2,7
8110d7ac:	14417416 	blt	r2,r17,8110dd80 <___svfprintf_internal_r+0x1580>
8110d7b0:	42000204 	addi	r8,r8,8
8110d7b4:	d8803817 	ldw	r2,224(sp)
8110d7b8:	d9003417 	ldw	r4,208(sp)
8110d7bc:	8c400044 	addi	r17,r17,1
8110d7c0:	10c7883a 	add	r3,r2,r3
8110d7c4:	40800115 	stw	r2,4(r8)
8110d7c8:	41000015 	stw	r4,0(r8)
8110d7cc:	d8c02015 	stw	r3,128(sp)
8110d7d0:	dc401f15 	stw	r17,124(sp)
8110d7d4:	008001c4 	movi	r2,7
8110d7d8:	14417216 	blt	r2,r17,8110dda4 <___svfprintf_internal_r+0x15a4>
8110d7dc:	45800204 	addi	r22,r8,8
8110d7e0:	d9003617 	ldw	r4,216(sp)
8110d7e4:	d9403717 	ldw	r5,220(sp)
8110d7e8:	000d883a 	mov	r6,zero
8110d7ec:	000f883a 	mov	r7,zero
8110d7f0:	d8c03d15 	stw	r3,244(sp)
8110d7f4:	1114a800 	call	81114a80 <__eqdf2>
8110d7f8:	d8c03d17 	ldw	r3,244(sp)
8110d7fc:	1000b326 	beq	r2,zero,8110dacc <___svfprintf_internal_r+0x12cc>
8110d800:	d9403317 	ldw	r5,204(sp)
8110d804:	84000044 	addi	r16,r16,1
8110d808:	8c400044 	addi	r17,r17,1
8110d80c:	28bfffc4 	addi	r2,r5,-1
8110d810:	1887883a 	add	r3,r3,r2
8110d814:	b0800115 	stw	r2,4(r22)
8110d818:	b4000015 	stw	r16,0(r22)
8110d81c:	d8c02015 	stw	r3,128(sp)
8110d820:	dc401f15 	stw	r17,124(sp)
8110d824:	008001c4 	movi	r2,7
8110d828:	1440d216 	blt	r2,r17,8110db74 <___svfprintf_internal_r+0x1374>
8110d82c:	b5800204 	addi	r22,r22,8
8110d830:	d9003b17 	ldw	r4,236(sp)
8110d834:	df0022c4 	addi	fp,sp,139
8110d838:	8c400044 	addi	r17,r17,1
8110d83c:	20c7883a 	add	r3,r4,r3
8110d840:	b7000015 	stw	fp,0(r22)
8110d844:	b1000115 	stw	r4,4(r22)
8110d848:	d8c02015 	stw	r3,128(sp)
8110d84c:	dc401f15 	stw	r17,124(sp)
8110d850:	008001c4 	movi	r2,7
8110d854:	14400e16 	blt	r2,r17,8110d890 <___svfprintf_internal_r+0x1090>
8110d858:	b2000204 	addi	r8,r22,8
8110d85c:	003e3c06 	br	8110d150 <__reset+0xfb0ed150>
8110d860:	012044b4 	movhi	r4,33042
8110d864:	2112ee04 	addi	r4,r4,19384
8110d868:	d9002b15 	stw	r4,172(sp)
8110d86c:	d9002b17 	ldw	r4,172(sp)
8110d870:	1c07883a 	add	r3,r3,r16
8110d874:	44000115 	stw	r16,4(r8)
8110d878:	41000015 	stw	r4,0(r8)
8110d87c:	10800044 	addi	r2,r2,1
8110d880:	d8c02015 	stw	r3,128(sp)
8110d884:	d8801f15 	stw	r2,124(sp)
8110d888:	010001c4 	movi	r4,7
8110d88c:	20be2f0e 	bge	r4,r2,8110d14c <__reset+0xfb0ed14c>
8110d890:	d9402c17 	ldw	r5,176(sp)
8110d894:	d9801e04 	addi	r6,sp,120
8110d898:	9809883a 	mov	r4,r19
8110d89c:	11112cc0 	call	811112cc <__ssprint_r>
8110d8a0:	103cbc1e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110d8a4:	d8c02017 	ldw	r3,128(sp)
8110d8a8:	da000404 	addi	r8,sp,16
8110d8ac:	003e2806 	br	8110d150 <__reset+0xfb0ed150>
8110d8b0:	d9402c17 	ldw	r5,176(sp)
8110d8b4:	d9801e04 	addi	r6,sp,120
8110d8b8:	9809883a 	mov	r4,r19
8110d8bc:	11112cc0 	call	811112cc <__ssprint_r>
8110d8c0:	103e5f26 	beq	r2,zero,8110d240 <__reset+0xfb0ed240>
8110d8c4:	003cb306 	br	8110cb94 <__reset+0xfb0ecb94>
8110d8c8:	d9402c17 	ldw	r5,176(sp)
8110d8cc:	d9801e04 	addi	r6,sp,120
8110d8d0:	9809883a 	mov	r4,r19
8110d8d4:	11112cc0 	call	811112cc <__ssprint_r>
8110d8d8:	103cae1e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110d8dc:	d8c02017 	ldw	r3,128(sp)
8110d8e0:	da000404 	addi	r8,sp,16
8110d8e4:	003e0d06 	br	8110d11c <__reset+0xfb0ed11c>
8110d8e8:	d9402c17 	ldw	r5,176(sp)
8110d8ec:	d9801e04 	addi	r6,sp,120
8110d8f0:	9809883a 	mov	r4,r19
8110d8f4:	11112cc0 	call	811112cc <__ssprint_r>
8110d8f8:	103ca61e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110d8fc:	d8c02017 	ldw	r3,128(sp)
8110d900:	da000404 	addi	r8,sp,16
8110d904:	003dc106 	br	8110d00c <__reset+0xfb0ed00c>
8110d908:	d9402c17 	ldw	r5,176(sp)
8110d90c:	d9801e04 	addi	r6,sp,120
8110d910:	9809883a 	mov	r4,r19
8110d914:	11112cc0 	call	811112cc <__ssprint_r>
8110d918:	103c9e1e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110d91c:	d8c02017 	ldw	r3,128(sp)
8110d920:	da000404 	addi	r8,sp,16
8110d924:	003dc706 	br	8110d044 <__reset+0xfb0ed044>
8110d928:	d8802917 	ldw	r2,164(sp)
8110d92c:	d8002785 	stb	zero,158(sp)
8110d930:	103f0816 	blt	r2,zero,8110d554 <__reset+0xfb0ed554>
8110d934:	00ffdfc4 	movi	r3,-129
8110d938:	a584b03a 	or	r2,r20,r22
8110d93c:	90e4703a 	and	r18,r18,r3
8110d940:	103c8126 	beq	r2,zero,8110cb48 <__reset+0xfb0ecb48>
8110d944:	0039883a 	mov	fp,zero
8110d948:	003e7606 	br	8110d324 <__reset+0xfb0ed324>
8110d94c:	9080040c 	andi	r2,r18,16
8110d950:	10013d26 	beq	r2,zero,8110de48 <___svfprintf_internal_r+0x1648>
8110d954:	d9002d17 	ldw	r4,180(sp)
8110d958:	d9402917 	ldw	r5,164(sp)
8110d95c:	d8002785 	stb	zero,158(sp)
8110d960:	20800104 	addi	r2,r4,4
8110d964:	25000017 	ldw	r20,0(r4)
8110d968:	002d883a 	mov	r22,zero
8110d96c:	28013f16 	blt	r5,zero,8110de6c <___svfprintf_internal_r+0x166c>
8110d970:	00ffdfc4 	movi	r3,-129
8110d974:	d8802d15 	stw	r2,180(sp)
8110d978:	90e4703a 	and	r18,r18,r3
8110d97c:	a03d2b26 	beq	r20,zero,8110ce2c <__reset+0xfb0ece2c>
8110d980:	0039883a 	mov	fp,zero
8110d984:	003d2e06 	br	8110ce40 <__reset+0xfb0ece40>
8110d988:	dc402617 	ldw	r17,152(sp)
8110d98c:	0441830e 	bge	zero,r17,8110df9c <___svfprintf_internal_r+0x179c>
8110d990:	dc403217 	ldw	r17,200(sp)
8110d994:	d8803317 	ldw	r2,204(sp)
8110d998:	1440010e 	bge	r2,r17,8110d9a0 <___svfprintf_internal_r+0x11a0>
8110d99c:	1023883a 	mov	r17,r2
8110d9a0:	04400a0e 	bge	zero,r17,8110d9cc <___svfprintf_internal_r+0x11cc>
8110d9a4:	d8801f17 	ldw	r2,124(sp)
8110d9a8:	1c47883a 	add	r3,r3,r17
8110d9ac:	44000015 	stw	r16,0(r8)
8110d9b0:	10800044 	addi	r2,r2,1
8110d9b4:	44400115 	stw	r17,4(r8)
8110d9b8:	d8c02015 	stw	r3,128(sp)
8110d9bc:	d8801f15 	stw	r2,124(sp)
8110d9c0:	010001c4 	movi	r4,7
8110d9c4:	20827516 	blt	r4,r2,8110e39c <___svfprintf_internal_r+0x1b9c>
8110d9c8:	42000204 	addi	r8,r8,8
8110d9cc:	88027b16 	blt	r17,zero,8110e3bc <___svfprintf_internal_r+0x1bbc>
8110d9d0:	d9003217 	ldw	r4,200(sp)
8110d9d4:	2463c83a 	sub	r17,r4,r17
8110d9d8:	0440990e 	bge	zero,r17,8110dc40 <___svfprintf_internal_r+0x1440>
8110d9dc:	05800404 	movi	r22,16
8110d9e0:	d8801f17 	ldw	r2,124(sp)
8110d9e4:	b441530e 	bge	r22,r17,8110df34 <___svfprintf_internal_r+0x1734>
8110d9e8:	012044b4 	movhi	r4,33042
8110d9ec:	2112ee04 	addi	r4,r4,19384
8110d9f0:	d9002b15 	stw	r4,172(sp)
8110d9f4:	070001c4 	movi	fp,7
8110d9f8:	dd002c17 	ldw	r20,176(sp)
8110d9fc:	00000306 	br	8110da0c <___svfprintf_internal_r+0x120c>
8110da00:	42000204 	addi	r8,r8,8
8110da04:	8c7ffc04 	addi	r17,r17,-16
8110da08:	b4414d0e 	bge	r22,r17,8110df40 <___svfprintf_internal_r+0x1740>
8110da0c:	18c00404 	addi	r3,r3,16
8110da10:	10800044 	addi	r2,r2,1
8110da14:	45400015 	stw	r21,0(r8)
8110da18:	45800115 	stw	r22,4(r8)
8110da1c:	d8c02015 	stw	r3,128(sp)
8110da20:	d8801f15 	stw	r2,124(sp)
8110da24:	e0bff60e 	bge	fp,r2,8110da00 <__reset+0xfb0eda00>
8110da28:	d9801e04 	addi	r6,sp,120
8110da2c:	a00b883a 	mov	r5,r20
8110da30:	9809883a 	mov	r4,r19
8110da34:	11112cc0 	call	811112cc <__ssprint_r>
8110da38:	103c561e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110da3c:	d8c02017 	ldw	r3,128(sp)
8110da40:	d8801f17 	ldw	r2,124(sp)
8110da44:	da000404 	addi	r8,sp,16
8110da48:	003fee06 	br	8110da04 <__reset+0xfb0eda04>
8110da4c:	d9402c17 	ldw	r5,176(sp)
8110da50:	d9801e04 	addi	r6,sp,120
8110da54:	9809883a 	mov	r4,r19
8110da58:	11112cc0 	call	811112cc <__ssprint_r>
8110da5c:	103c4d1e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110da60:	d8c02017 	ldw	r3,128(sp)
8110da64:	df002787 	ldb	fp,158(sp)
8110da68:	da000404 	addi	r8,sp,16
8110da6c:	003d5a06 	br	8110cfd8 <__reset+0xfb0ecfd8>
8110da70:	9080040c 	andi	r2,r18,16
8110da74:	10005c26 	beq	r2,zero,8110dbe8 <___svfprintf_internal_r+0x13e8>
8110da78:	d9402d17 	ldw	r5,180(sp)
8110da7c:	d8c02917 	ldw	r3,164(sp)
8110da80:	d8002785 	stb	zero,158(sp)
8110da84:	28800104 	addi	r2,r5,4
8110da88:	2d000017 	ldw	r20,0(r5)
8110da8c:	002d883a 	mov	r22,zero
8110da90:	18005e16 	blt	r3,zero,8110dc0c <___svfprintf_internal_r+0x140c>
8110da94:	00ffdfc4 	movi	r3,-129
8110da98:	d8802d15 	stw	r2,180(sp)
8110da9c:	90e4703a 	and	r18,r18,r3
8110daa0:	0039883a 	mov	fp,zero
8110daa4:	a03dfe26 	beq	r20,zero,8110d2a0 <__reset+0xfb0ed2a0>
8110daa8:	00800244 	movi	r2,9
8110daac:	153cb336 	bltu	r2,r20,8110cd7c <__reset+0xfb0ecd7c>
8110dab0:	a5000c04 	addi	r20,r20,48
8110dab4:	dc001dc4 	addi	r16,sp,119
8110dab8:	dd001dc5 	stb	r20,119(sp)
8110dabc:	d8c02817 	ldw	r3,160(sp)
8110dac0:	1c07c83a 	sub	r3,r3,r16
8110dac4:	d8c02e15 	stw	r3,184(sp)
8110dac8:	003cf506 	br	8110cea0 <__reset+0xfb0ecea0>
8110dacc:	d8803317 	ldw	r2,204(sp)
8110dad0:	143fffc4 	addi	r16,r2,-1
8110dad4:	043f560e 	bge	zero,r16,8110d830 <__reset+0xfb0ed830>
8110dad8:	07000404 	movi	fp,16
8110dadc:	e403530e 	bge	fp,r16,8110e82c <___svfprintf_internal_r+0x202c>
8110dae0:	016044b4 	movhi	r5,33042
8110dae4:	2952ee04 	addi	r5,r5,19384
8110dae8:	d9402b15 	stw	r5,172(sp)
8110daec:	01c001c4 	movi	r7,7
8110daf0:	dd002c17 	ldw	r20,176(sp)
8110daf4:	00000306 	br	8110db04 <___svfprintf_internal_r+0x1304>
8110daf8:	843ffc04 	addi	r16,r16,-16
8110dafc:	b5800204 	addi	r22,r22,8
8110db00:	e400130e 	bge	fp,r16,8110db50 <___svfprintf_internal_r+0x1350>
8110db04:	18c00404 	addi	r3,r3,16
8110db08:	8c400044 	addi	r17,r17,1
8110db0c:	b5400015 	stw	r21,0(r22)
8110db10:	b7000115 	stw	fp,4(r22)
8110db14:	d8c02015 	stw	r3,128(sp)
8110db18:	dc401f15 	stw	r17,124(sp)
8110db1c:	3c7ff60e 	bge	r7,r17,8110daf8 <__reset+0xfb0edaf8>
8110db20:	d9801e04 	addi	r6,sp,120
8110db24:	a00b883a 	mov	r5,r20
8110db28:	9809883a 	mov	r4,r19
8110db2c:	d9c03d15 	stw	r7,244(sp)
8110db30:	11112cc0 	call	811112cc <__ssprint_r>
8110db34:	d9c03d17 	ldw	r7,244(sp)
8110db38:	103c161e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110db3c:	843ffc04 	addi	r16,r16,-16
8110db40:	d8c02017 	ldw	r3,128(sp)
8110db44:	dc401f17 	ldw	r17,124(sp)
8110db48:	dd800404 	addi	r22,sp,16
8110db4c:	e43fed16 	blt	fp,r16,8110db04 <__reset+0xfb0edb04>
8110db50:	d8802b17 	ldw	r2,172(sp)
8110db54:	1c07883a 	add	r3,r3,r16
8110db58:	8c400044 	addi	r17,r17,1
8110db5c:	b0800015 	stw	r2,0(r22)
8110db60:	b4000115 	stw	r16,4(r22)
8110db64:	d8c02015 	stw	r3,128(sp)
8110db68:	dc401f15 	stw	r17,124(sp)
8110db6c:	008001c4 	movi	r2,7
8110db70:	147f2e0e 	bge	r2,r17,8110d82c <__reset+0xfb0ed82c>
8110db74:	d9402c17 	ldw	r5,176(sp)
8110db78:	d9801e04 	addi	r6,sp,120
8110db7c:	9809883a 	mov	r4,r19
8110db80:	11112cc0 	call	811112cc <__ssprint_r>
8110db84:	103c031e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110db88:	d8c02017 	ldw	r3,128(sp)
8110db8c:	dc401f17 	ldw	r17,124(sp)
8110db90:	dd800404 	addi	r22,sp,16
8110db94:	003f2606 	br	8110d830 <__reset+0xfb0ed830>
8110db98:	9080040c 	andi	r2,r18,16
8110db9c:	1000c326 	beq	r2,zero,8110deac <___svfprintf_internal_r+0x16ac>
8110dba0:	d8802d17 	ldw	r2,180(sp)
8110dba4:	15000017 	ldw	r20,0(r2)
8110dba8:	10800104 	addi	r2,r2,4
8110dbac:	d8802d15 	stw	r2,180(sp)
8110dbb0:	a02dd7fa 	srai	r22,r20,31
8110dbb4:	b005883a 	mov	r2,r22
8110dbb8:	103c680e 	bge	r2,zero,8110cd5c <__reset+0xfb0ecd5c>
8110dbbc:	0529c83a 	sub	r20,zero,r20
8110dbc0:	a004c03a 	cmpne	r2,r20,zero
8110dbc4:	05adc83a 	sub	r22,zero,r22
8110dbc8:	b0adc83a 	sub	r22,r22,r2
8110dbcc:	d8802917 	ldw	r2,164(sp)
8110dbd0:	07000b44 	movi	fp,45
8110dbd4:	df002785 	stb	fp,158(sp)
8110dbd8:	10022e16 	blt	r2,zero,8110e494 <___svfprintf_internal_r+0x1c94>
8110dbdc:	00bfdfc4 	movi	r2,-129
8110dbe0:	90a4703a 	and	r18,r18,r2
8110dbe4:	003c6406 	br	8110cd78 <__reset+0xfb0ecd78>
8110dbe8:	9080100c 	andi	r2,r18,64
8110dbec:	d8002785 	stb	zero,158(sp)
8110dbf0:	10012526 	beq	r2,zero,8110e088 <___svfprintf_internal_r+0x1888>
8110dbf4:	d9002d17 	ldw	r4,180(sp)
8110dbf8:	d9402917 	ldw	r5,164(sp)
8110dbfc:	002d883a 	mov	r22,zero
8110dc00:	20800104 	addi	r2,r4,4
8110dc04:	2500000b 	ldhu	r20,0(r4)
8110dc08:	283fa20e 	bge	r5,zero,8110da94 <__reset+0xfb0eda94>
8110dc0c:	d8802d15 	stw	r2,180(sp)
8110dc10:	0039883a 	mov	fp,zero
8110dc14:	a584b03a 	or	r2,r20,r22
8110dc18:	103c571e 	bne	r2,zero,8110cd78 <__reset+0xfb0ecd78>
8110dc1c:	00800044 	movi	r2,1
8110dc20:	003e5006 	br	8110d564 <__reset+0xfb0ed564>
8110dc24:	d9402c17 	ldw	r5,176(sp)
8110dc28:	d9801e04 	addi	r6,sp,120
8110dc2c:	9809883a 	mov	r4,r19
8110dc30:	11112cc0 	call	811112cc <__ssprint_r>
8110dc34:	103bd71e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110dc38:	d8c02017 	ldw	r3,128(sp)
8110dc3c:	da000404 	addi	r8,sp,16
8110dc40:	d9003217 	ldw	r4,200(sp)
8110dc44:	d8802617 	ldw	r2,152(sp)
8110dc48:	d9403317 	ldw	r5,204(sp)
8110dc4c:	8123883a 	add	r17,r16,r4
8110dc50:	11400216 	blt	r2,r5,8110dc5c <___svfprintf_internal_r+0x145c>
8110dc54:	9100004c 	andi	r4,r18,1
8110dc58:	20000d26 	beq	r4,zero,8110dc90 <___svfprintf_internal_r+0x1490>
8110dc5c:	d9003817 	ldw	r4,224(sp)
8110dc60:	d9403417 	ldw	r5,208(sp)
8110dc64:	1907883a 	add	r3,r3,r4
8110dc68:	d9001f17 	ldw	r4,124(sp)
8110dc6c:	41400015 	stw	r5,0(r8)
8110dc70:	d9403817 	ldw	r5,224(sp)
8110dc74:	21000044 	addi	r4,r4,1
8110dc78:	d8c02015 	stw	r3,128(sp)
8110dc7c:	41400115 	stw	r5,4(r8)
8110dc80:	d9001f15 	stw	r4,124(sp)
8110dc84:	014001c4 	movi	r5,7
8110dc88:	2901dc16 	blt	r5,r4,8110e3fc <___svfprintf_internal_r+0x1bfc>
8110dc8c:	42000204 	addi	r8,r8,8
8110dc90:	d9003317 	ldw	r4,204(sp)
8110dc94:	8121883a 	add	r16,r16,r4
8110dc98:	2085c83a 	sub	r2,r4,r2
8110dc9c:	8461c83a 	sub	r16,r16,r17
8110dca0:	1400010e 	bge	r2,r16,8110dca8 <___svfprintf_internal_r+0x14a8>
8110dca4:	1021883a 	mov	r16,r2
8110dca8:	04000a0e 	bge	zero,r16,8110dcd4 <___svfprintf_internal_r+0x14d4>
8110dcac:	d9001f17 	ldw	r4,124(sp)
8110dcb0:	1c07883a 	add	r3,r3,r16
8110dcb4:	44400015 	stw	r17,0(r8)
8110dcb8:	21000044 	addi	r4,r4,1
8110dcbc:	44000115 	stw	r16,4(r8)
8110dcc0:	d8c02015 	stw	r3,128(sp)
8110dcc4:	d9001f15 	stw	r4,124(sp)
8110dcc8:	014001c4 	movi	r5,7
8110dccc:	2901e616 	blt	r5,r4,8110e468 <___svfprintf_internal_r+0x1c68>
8110dcd0:	42000204 	addi	r8,r8,8
8110dcd4:	8001f616 	blt	r16,zero,8110e4b0 <___svfprintf_internal_r+0x1cb0>
8110dcd8:	1421c83a 	sub	r16,r2,r16
8110dcdc:	043d1c0e 	bge	zero,r16,8110d150 <__reset+0xfb0ed150>
8110dce0:	04400404 	movi	r17,16
8110dce4:	d8801f17 	ldw	r2,124(sp)
8110dce8:	8c3edd0e 	bge	r17,r16,8110d860 <__reset+0xfb0ed860>
8110dcec:	016044b4 	movhi	r5,33042
8110dcf0:	2952ee04 	addi	r5,r5,19384
8110dcf4:	d9402b15 	stw	r5,172(sp)
8110dcf8:	058001c4 	movi	r22,7
8110dcfc:	dd002c17 	ldw	r20,176(sp)
8110dd00:	00000306 	br	8110dd10 <___svfprintf_internal_r+0x1510>
8110dd04:	42000204 	addi	r8,r8,8
8110dd08:	843ffc04 	addi	r16,r16,-16
8110dd0c:	8c3ed70e 	bge	r17,r16,8110d86c <__reset+0xfb0ed86c>
8110dd10:	18c00404 	addi	r3,r3,16
8110dd14:	10800044 	addi	r2,r2,1
8110dd18:	45400015 	stw	r21,0(r8)
8110dd1c:	44400115 	stw	r17,4(r8)
8110dd20:	d8c02015 	stw	r3,128(sp)
8110dd24:	d8801f15 	stw	r2,124(sp)
8110dd28:	b0bff60e 	bge	r22,r2,8110dd04 <__reset+0xfb0edd04>
8110dd2c:	d9801e04 	addi	r6,sp,120
8110dd30:	a00b883a 	mov	r5,r20
8110dd34:	9809883a 	mov	r4,r19
8110dd38:	11112cc0 	call	811112cc <__ssprint_r>
8110dd3c:	103b951e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110dd40:	d8c02017 	ldw	r3,128(sp)
8110dd44:	d8801f17 	ldw	r2,124(sp)
8110dd48:	da000404 	addi	r8,sp,16
8110dd4c:	003fee06 	br	8110dd08 <__reset+0xfb0edd08>
8110dd50:	9088703a 	and	r4,r18,r2
8110dd54:	203e8d1e 	bne	r4,zero,8110d78c <__reset+0xfb0ed78c>
8110dd58:	dc401f17 	ldw	r17,124(sp)
8110dd5c:	40800115 	stw	r2,4(r8)
8110dd60:	44000015 	stw	r16,0(r8)
8110dd64:	8c400044 	addi	r17,r17,1
8110dd68:	d8c02015 	stw	r3,128(sp)
8110dd6c:	dc401f15 	stw	r17,124(sp)
8110dd70:	008001c4 	movi	r2,7
8110dd74:	147f7f16 	blt	r2,r17,8110db74 <__reset+0xfb0edb74>
8110dd78:	45800204 	addi	r22,r8,8
8110dd7c:	003eac06 	br	8110d830 <__reset+0xfb0ed830>
8110dd80:	d9402c17 	ldw	r5,176(sp)
8110dd84:	d9801e04 	addi	r6,sp,120
8110dd88:	9809883a 	mov	r4,r19
8110dd8c:	11112cc0 	call	811112cc <__ssprint_r>
8110dd90:	103b801e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110dd94:	d8c02017 	ldw	r3,128(sp)
8110dd98:	dc401f17 	ldw	r17,124(sp)
8110dd9c:	da000404 	addi	r8,sp,16
8110dda0:	003e8406 	br	8110d7b4 <__reset+0xfb0ed7b4>
8110dda4:	d9402c17 	ldw	r5,176(sp)
8110dda8:	d9801e04 	addi	r6,sp,120
8110ddac:	9809883a 	mov	r4,r19
8110ddb0:	11112cc0 	call	811112cc <__ssprint_r>
8110ddb4:	103b771e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110ddb8:	d8c02017 	ldw	r3,128(sp)
8110ddbc:	dc401f17 	ldw	r17,124(sp)
8110ddc0:	dd800404 	addi	r22,sp,16
8110ddc4:	003e8606 	br	8110d7e0 <__reset+0xfb0ed7e0>
8110ddc8:	0029883a 	mov	r20,zero
8110ddcc:	a5000c04 	addi	r20,r20,48
8110ddd0:	dc001dc4 	addi	r16,sp,119
8110ddd4:	dd001dc5 	stb	r20,119(sp)
8110ddd8:	003f3806 	br	8110dabc <__reset+0xfb0edabc>
8110dddc:	d9402c17 	ldw	r5,176(sp)
8110dde0:	d9801e04 	addi	r6,sp,120
8110dde4:	9809883a 	mov	r4,r19
8110dde8:	11112cc0 	call	811112cc <__ssprint_r>
8110ddec:	103b691e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110ddf0:	d8c02017 	ldw	r3,128(sp)
8110ddf4:	da000404 	addi	r8,sp,16
8110ddf8:	003c9506 	br	8110d050 <__reset+0xfb0ed050>
8110ddfc:	d9003617 	ldw	r4,216(sp)
8110de00:	d9403717 	ldw	r5,220(sp)
8110de04:	da003e15 	stw	r8,248(sp)
8110de08:	110a32c0 	call	8110a32c <__fpclassifyd>
8110de0c:	da003e17 	ldw	r8,248(sp)
8110de10:	1000bd1e 	bne	r2,zero,8110e108 <___svfprintf_internal_r+0x1908>
8110de14:	008011c4 	movi	r2,71
8110de18:	14411e0e 	bge	r2,r17,8110e294 <___svfprintf_internal_r+0x1a94>
8110de1c:	042044b4 	movhi	r16,33042
8110de20:	8411c504 	addi	r16,r16,18196
8110de24:	00c000c4 	movi	r3,3
8110de28:	00bfdfc4 	movi	r2,-129
8110de2c:	d8c02a15 	stw	r3,168(sp)
8110de30:	90a4703a 	and	r18,r18,r2
8110de34:	df002783 	ldbu	fp,158(sp)
8110de38:	d8c02e15 	stw	r3,184(sp)
8110de3c:	d8002915 	stw	zero,164(sp)
8110de40:	d8003215 	stw	zero,200(sp)
8110de44:	003c1c06 	br	8110ceb8 <__reset+0xfb0eceb8>
8110de48:	9080100c 	andi	r2,r18,64
8110de4c:	d8002785 	stb	zero,158(sp)
8110de50:	10009426 	beq	r2,zero,8110e0a4 <___svfprintf_internal_r+0x18a4>
8110de54:	d8c02d17 	ldw	r3,180(sp)
8110de58:	d9002917 	ldw	r4,164(sp)
8110de5c:	002d883a 	mov	r22,zero
8110de60:	18800104 	addi	r2,r3,4
8110de64:	1d00000b 	ldhu	r20,0(r3)
8110de68:	203ec10e 	bge	r4,zero,8110d970 <__reset+0xfb0ed970>
8110de6c:	a586b03a 	or	r3,r20,r22
8110de70:	d8802d15 	stw	r2,180(sp)
8110de74:	183ec21e 	bne	r3,zero,8110d980 <__reset+0xfb0ed980>
8110de78:	0039883a 	mov	fp,zero
8110de7c:	0005883a 	mov	r2,zero
8110de80:	003db806 	br	8110d564 <__reset+0xfb0ed564>
8110de84:	d8802d17 	ldw	r2,180(sp)
8110de88:	d8c02d17 	ldw	r3,180(sp)
8110de8c:	d9002d17 	ldw	r4,180(sp)
8110de90:	10800017 	ldw	r2,0(r2)
8110de94:	18c00117 	ldw	r3,4(r3)
8110de98:	21000204 	addi	r4,r4,8
8110de9c:	d8803615 	stw	r2,216(sp)
8110dea0:	d8c03715 	stw	r3,220(sp)
8110dea4:	d9002d15 	stw	r4,180(sp)
8110dea8:	003b8206 	br	8110ccb4 <__reset+0xfb0eccb4>
8110deac:	9080100c 	andi	r2,r18,64
8110deb0:	10010726 	beq	r2,zero,8110e2d0 <___svfprintf_internal_r+0x1ad0>
8110deb4:	d8c02d17 	ldw	r3,180(sp)
8110deb8:	1d00000f 	ldh	r20,0(r3)
8110debc:	18c00104 	addi	r3,r3,4
8110dec0:	d8c02d15 	stw	r3,180(sp)
8110dec4:	a02dd7fa 	srai	r22,r20,31
8110dec8:	b005883a 	mov	r2,r22
8110decc:	003ba206 	br	8110cd58 <__reset+0xfb0ecd58>
8110ded0:	9080100c 	andi	r2,r18,64
8110ded4:	10010526 	beq	r2,zero,8110e2ec <___svfprintf_internal_r+0x1aec>
8110ded8:	d9002d17 	ldw	r4,180(sp)
8110dedc:	002d883a 	mov	r22,zero
8110dee0:	2500000b 	ldhu	r20,0(r4)
8110dee4:	21000104 	addi	r4,r4,4
8110dee8:	d9002d15 	stw	r4,180(sp)
8110deec:	003cfe06 	br	8110d2e8 <__reset+0xfb0ed2e8>
8110def0:	bc400007 	ldb	r17,0(r23)
8110def4:	003a9606 	br	8110c950 <__reset+0xfb0ec950>
8110def8:	9080040c 	andi	r2,r18,16
8110defc:	10010126 	beq	r2,zero,8110e304 <___svfprintf_internal_r+0x1b04>
8110df00:	d9402d17 	ldw	r5,180(sp)
8110df04:	d8c02f17 	ldw	r3,188(sp)
8110df08:	28800017 	ldw	r2,0(r5)
8110df0c:	29400104 	addi	r5,r5,4
8110df10:	d9402d15 	stw	r5,180(sp)
8110df14:	10c00015 	stw	r3,0(r2)
8110df18:	003a6406 	br	8110c8ac <__reset+0xfb0ec8ac>
8110df1c:	d9002917 	ldw	r4,164(sp)
8110df20:	d8002785 	stb	zero,158(sp)
8110df24:	203d8d16 	blt	r4,zero,8110d55c <__reset+0xfb0ed55c>
8110df28:	00bfdfc4 	movi	r2,-129
8110df2c:	90a4703a 	and	r18,r18,r2
8110df30:	003b0506 	br	8110cb48 <__reset+0xfb0ecb48>
8110df34:	016044b4 	movhi	r5,33042
8110df38:	2952ee04 	addi	r5,r5,19384
8110df3c:	d9402b15 	stw	r5,172(sp)
8110df40:	d9402b17 	ldw	r5,172(sp)
8110df44:	1c47883a 	add	r3,r3,r17
8110df48:	10800044 	addi	r2,r2,1
8110df4c:	41400015 	stw	r5,0(r8)
8110df50:	44400115 	stw	r17,4(r8)
8110df54:	d8c02015 	stw	r3,128(sp)
8110df58:	d8801f15 	stw	r2,124(sp)
8110df5c:	010001c4 	movi	r4,7
8110df60:	20bf3016 	blt	r4,r2,8110dc24 <__reset+0xfb0edc24>
8110df64:	42000204 	addi	r8,r8,8
8110df68:	003f3506 	br	8110dc40 <__reset+0xfb0edc40>
8110df6c:	012044b4 	movhi	r4,33042
8110df70:	2112ee04 	addi	r4,r4,19384
8110df74:	d9002b15 	stw	r4,172(sp)
8110df78:	003c5e06 	br	8110d0f4 <__reset+0xfb0ed0f4>
8110df7c:	d9402c17 	ldw	r5,176(sp)
8110df80:	d9801e04 	addi	r6,sp,120
8110df84:	9809883a 	mov	r4,r19
8110df88:	11112cc0 	call	811112cc <__ssprint_r>
8110df8c:	103b011e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110df90:	d8c02017 	ldw	r3,128(sp)
8110df94:	da000404 	addi	r8,sp,16
8110df98:	003d9306 	br	8110d5e8 <__reset+0xfb0ed5e8>
8110df9c:	d8801f17 	ldw	r2,124(sp)
8110dfa0:	016044b4 	movhi	r5,33042
8110dfa4:	01000044 	movi	r4,1
8110dfa8:	18c00044 	addi	r3,r3,1
8110dfac:	10800044 	addi	r2,r2,1
8110dfb0:	2951d204 	addi	r5,r5,18248
8110dfb4:	41000115 	stw	r4,4(r8)
8110dfb8:	41400015 	stw	r5,0(r8)
8110dfbc:	d8c02015 	stw	r3,128(sp)
8110dfc0:	d8801f15 	stw	r2,124(sp)
8110dfc4:	010001c4 	movi	r4,7
8110dfc8:	2080b516 	blt	r4,r2,8110e2a0 <___svfprintf_internal_r+0x1aa0>
8110dfcc:	42000204 	addi	r8,r8,8
8110dfd0:	8800041e 	bne	r17,zero,8110dfe4 <___svfprintf_internal_r+0x17e4>
8110dfd4:	d8803317 	ldw	r2,204(sp)
8110dfd8:	1000021e 	bne	r2,zero,8110dfe4 <___svfprintf_internal_r+0x17e4>
8110dfdc:	9080004c 	andi	r2,r18,1
8110dfe0:	103c5b26 	beq	r2,zero,8110d150 <__reset+0xfb0ed150>
8110dfe4:	d9003817 	ldw	r4,224(sp)
8110dfe8:	d8801f17 	ldw	r2,124(sp)
8110dfec:	d9403417 	ldw	r5,208(sp)
8110dff0:	20c7883a 	add	r3,r4,r3
8110dff4:	10800044 	addi	r2,r2,1
8110dff8:	41000115 	stw	r4,4(r8)
8110dffc:	41400015 	stw	r5,0(r8)
8110e000:	d8c02015 	stw	r3,128(sp)
8110e004:	d8801f15 	stw	r2,124(sp)
8110e008:	010001c4 	movi	r4,7
8110e00c:	20818016 	blt	r4,r2,8110e610 <___svfprintf_internal_r+0x1e10>
8110e010:	42000204 	addi	r8,r8,8
8110e014:	0463c83a 	sub	r17,zero,r17
8110e018:	0440cb0e 	bge	zero,r17,8110e348 <___svfprintf_internal_r+0x1b48>
8110e01c:	05800404 	movi	r22,16
8110e020:	b440e80e 	bge	r22,r17,8110e3c4 <___svfprintf_internal_r+0x1bc4>
8110e024:	016044b4 	movhi	r5,33042
8110e028:	2952ee04 	addi	r5,r5,19384
8110e02c:	d9402b15 	stw	r5,172(sp)
8110e030:	070001c4 	movi	fp,7
8110e034:	dd002c17 	ldw	r20,176(sp)
8110e038:	00000306 	br	8110e048 <___svfprintf_internal_r+0x1848>
8110e03c:	42000204 	addi	r8,r8,8
8110e040:	8c7ffc04 	addi	r17,r17,-16
8110e044:	b440e20e 	bge	r22,r17,8110e3d0 <___svfprintf_internal_r+0x1bd0>
8110e048:	18c00404 	addi	r3,r3,16
8110e04c:	10800044 	addi	r2,r2,1
8110e050:	45400015 	stw	r21,0(r8)
8110e054:	45800115 	stw	r22,4(r8)
8110e058:	d8c02015 	stw	r3,128(sp)
8110e05c:	d8801f15 	stw	r2,124(sp)
8110e060:	e0bff60e 	bge	fp,r2,8110e03c <__reset+0xfb0ee03c>
8110e064:	d9801e04 	addi	r6,sp,120
8110e068:	a00b883a 	mov	r5,r20
8110e06c:	9809883a 	mov	r4,r19
8110e070:	11112cc0 	call	811112cc <__ssprint_r>
8110e074:	103ac71e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110e078:	d8c02017 	ldw	r3,128(sp)
8110e07c:	d8801f17 	ldw	r2,124(sp)
8110e080:	da000404 	addi	r8,sp,16
8110e084:	003fee06 	br	8110e040 <__reset+0xfb0ee040>
8110e088:	d8c02d17 	ldw	r3,180(sp)
8110e08c:	d9002917 	ldw	r4,164(sp)
8110e090:	002d883a 	mov	r22,zero
8110e094:	18800104 	addi	r2,r3,4
8110e098:	1d000017 	ldw	r20,0(r3)
8110e09c:	203e7d0e 	bge	r4,zero,8110da94 <__reset+0xfb0eda94>
8110e0a0:	003eda06 	br	8110dc0c <__reset+0xfb0edc0c>
8110e0a4:	d9402d17 	ldw	r5,180(sp)
8110e0a8:	d8c02917 	ldw	r3,164(sp)
8110e0ac:	002d883a 	mov	r22,zero
8110e0b0:	28800104 	addi	r2,r5,4
8110e0b4:	2d000017 	ldw	r20,0(r5)
8110e0b8:	183e2d0e 	bge	r3,zero,8110d970 <__reset+0xfb0ed970>
8110e0bc:	003f6b06 	br	8110de6c <__reset+0xfb0ede6c>
8110e0c0:	d8c02d15 	stw	r3,180(sp)
8110e0c4:	0039883a 	mov	fp,zero
8110e0c8:	003ed206 	br	8110dc14 <__reset+0xfb0edc14>
8110e0cc:	bc400043 	ldbu	r17,1(r23)
8110e0d0:	94800814 	ori	r18,r18,32
8110e0d4:	bdc00044 	addi	r23,r23,1
8110e0d8:	8c403fcc 	andi	r17,r17,255
8110e0dc:	8c40201c 	xori	r17,r17,128
8110e0e0:	8c7fe004 	addi	r17,r17,-128
8110e0e4:	003a1a06 	br	8110c950 <__reset+0xfb0ec950>
8110e0e8:	d9402c17 	ldw	r5,176(sp)
8110e0ec:	d9801e04 	addi	r6,sp,120
8110e0f0:	9809883a 	mov	r4,r19
8110e0f4:	11112cc0 	call	811112cc <__ssprint_r>
8110e0f8:	103aa61e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110e0fc:	d8c02017 	ldw	r3,128(sp)
8110e100:	da000404 	addi	r8,sp,16
8110e104:	003d4a06 	br	8110d630 <__reset+0xfb0ed630>
8110e108:	d9002917 	ldw	r4,164(sp)
8110e10c:	05bff7c4 	movi	r22,-33
8110e110:	00bfffc4 	movi	r2,-1
8110e114:	8dac703a 	and	r22,r17,r22
8110e118:	20806a26 	beq	r4,r2,8110e2c4 <___svfprintf_internal_r+0x1ac4>
8110e11c:	008011c4 	movi	r2,71
8110e120:	b0813726 	beq	r22,r2,8110e600 <___svfprintf_internal_r+0x1e00>
8110e124:	d9003717 	ldw	r4,220(sp)
8110e128:	90c04014 	ori	r3,r18,256
8110e12c:	d8c02b15 	stw	r3,172(sp)
8110e130:	20015d16 	blt	r4,zero,8110e6a8 <___svfprintf_internal_r+0x1ea8>
8110e134:	dd003717 	ldw	r20,220(sp)
8110e138:	d8002a05 	stb	zero,168(sp)
8110e13c:	00801984 	movi	r2,102
8110e140:	88814026 	beq	r17,r2,8110e644 <___svfprintf_internal_r+0x1e44>
8110e144:	00801184 	movi	r2,70
8110e148:	88817126 	beq	r17,r2,8110e710 <___svfprintf_internal_r+0x1f10>
8110e14c:	00801144 	movi	r2,69
8110e150:	b0816226 	beq	r22,r2,8110e6dc <___svfprintf_internal_r+0x1edc>
8110e154:	d8c02917 	ldw	r3,164(sp)
8110e158:	d8802104 	addi	r2,sp,132
8110e15c:	d8800315 	stw	r2,12(sp)
8110e160:	d9403617 	ldw	r5,216(sp)
8110e164:	d8802504 	addi	r2,sp,148
8110e168:	d8800215 	stw	r2,8(sp)
8110e16c:	d8802604 	addi	r2,sp,152
8110e170:	d8c00015 	stw	r3,0(sp)
8110e174:	d8800115 	stw	r2,4(sp)
8110e178:	01c00084 	movi	r7,2
8110e17c:	a00d883a 	mov	r6,r20
8110e180:	9809883a 	mov	r4,r19
8110e184:	d8c03d15 	stw	r3,244(sp)
8110e188:	da003e15 	stw	r8,248(sp)
8110e18c:	1105bac0 	call	81105bac <_dtoa_r>
8110e190:	1021883a 	mov	r16,r2
8110e194:	008019c4 	movi	r2,103
8110e198:	d8c03d17 	ldw	r3,244(sp)
8110e19c:	da003e17 	ldw	r8,248(sp)
8110e1a0:	8880e726 	beq	r17,r2,8110e540 <___svfprintf_internal_r+0x1d40>
8110e1a4:	008011c4 	movi	r2,71
8110e1a8:	8880d426 	beq	r17,r2,8110e4fc <___svfprintf_internal_r+0x1cfc>
8110e1ac:	80f9883a 	add	fp,r16,r3
8110e1b0:	d9003617 	ldw	r4,216(sp)
8110e1b4:	000d883a 	mov	r6,zero
8110e1b8:	000f883a 	mov	r7,zero
8110e1bc:	a00b883a 	mov	r5,r20
8110e1c0:	da003e15 	stw	r8,248(sp)
8110e1c4:	1114a800 	call	81114a80 <__eqdf2>
8110e1c8:	da003e17 	ldw	r8,248(sp)
8110e1cc:	1000e426 	beq	r2,zero,8110e560 <___svfprintf_internal_r+0x1d60>
8110e1d0:	d8802117 	ldw	r2,132(sp)
8110e1d4:	1700062e 	bgeu	r2,fp,8110e1f0 <___svfprintf_internal_r+0x19f0>
8110e1d8:	01000c04 	movi	r4,48
8110e1dc:	10c00044 	addi	r3,r2,1
8110e1e0:	d8c02115 	stw	r3,132(sp)
8110e1e4:	11000005 	stb	r4,0(r2)
8110e1e8:	d8802117 	ldw	r2,132(sp)
8110e1ec:	173ffb36 	bltu	r2,fp,8110e1dc <__reset+0xfb0ee1dc>
8110e1f0:	1405c83a 	sub	r2,r2,r16
8110e1f4:	d8803315 	stw	r2,204(sp)
8110e1f8:	008011c4 	movi	r2,71
8110e1fc:	b080c526 	beq	r22,r2,8110e514 <___svfprintf_internal_r+0x1d14>
8110e200:	00801944 	movi	r2,101
8110e204:	1441d90e 	bge	r2,r17,8110e96c <___svfprintf_internal_r+0x216c>
8110e208:	d8c02617 	ldw	r3,152(sp)
8110e20c:	00801984 	movi	r2,102
8110e210:	d8c03215 	stw	r3,200(sp)
8110e214:	88813426 	beq	r17,r2,8110e6e8 <___svfprintf_internal_r+0x1ee8>
8110e218:	d8c03217 	ldw	r3,200(sp)
8110e21c:	d9003317 	ldw	r4,204(sp)
8110e220:	19012516 	blt	r3,r4,8110e6b8 <___svfprintf_internal_r+0x1eb8>
8110e224:	9480004c 	andi	r18,r18,1
8110e228:	9001841e 	bne	r18,zero,8110e83c <___svfprintf_internal_r+0x203c>
8110e22c:	1805883a 	mov	r2,r3
8110e230:	1801cc16 	blt	r3,zero,8110e964 <___svfprintf_internal_r+0x2164>
8110e234:	d8c03217 	ldw	r3,200(sp)
8110e238:	044019c4 	movi	r17,103
8110e23c:	d8c02e15 	stw	r3,184(sp)
8110e240:	df002a07 	ldb	fp,168(sp)
8110e244:	e000a61e 	bne	fp,zero,8110e4e0 <___svfprintf_internal_r+0x1ce0>
8110e248:	df002783 	ldbu	fp,158(sp)
8110e24c:	d8802a15 	stw	r2,168(sp)
8110e250:	dc802b17 	ldw	r18,172(sp)
8110e254:	d8002915 	stw	zero,164(sp)
8110e258:	003b1706 	br	8110ceb8 <__reset+0xfb0eceb8>
8110e25c:	042044b4 	movhi	r16,33042
8110e260:	8411c204 	addi	r16,r16,18184
8110e264:	003aa606 	br	8110cd00 <__reset+0xfb0ecd00>
8110e268:	d9003917 	ldw	r4,228(sp)
8110e26c:	04001004 	movi	r16,64
8110e270:	800b883a 	mov	r5,r16
8110e274:	1100cf00 	call	81100cf0 <_malloc_r>
8110e278:	d9002c17 	ldw	r4,176(sp)
8110e27c:	20800015 	stw	r2,0(r4)
8110e280:	20800415 	stw	r2,16(r4)
8110e284:	1001cb26 	beq	r2,zero,8110e9b4 <___svfprintf_internal_r+0x21b4>
8110e288:	d8802c17 	ldw	r2,176(sp)
8110e28c:	14000515 	stw	r16,20(r2)
8110e290:	00397606 	br	8110c86c <__reset+0xfb0ec86c>
8110e294:	042044b4 	movhi	r16,33042
8110e298:	8411c404 	addi	r16,r16,18192
8110e29c:	003ee106 	br	8110de24 <__reset+0xfb0ede24>
8110e2a0:	d9402c17 	ldw	r5,176(sp)
8110e2a4:	d9801e04 	addi	r6,sp,120
8110e2a8:	9809883a 	mov	r4,r19
8110e2ac:	11112cc0 	call	811112cc <__ssprint_r>
8110e2b0:	103a381e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110e2b4:	dc402617 	ldw	r17,152(sp)
8110e2b8:	d8c02017 	ldw	r3,128(sp)
8110e2bc:	da000404 	addi	r8,sp,16
8110e2c0:	003f4306 	br	8110dfd0 <__reset+0xfb0edfd0>
8110e2c4:	01400184 	movi	r5,6
8110e2c8:	d9402915 	stw	r5,164(sp)
8110e2cc:	003f9506 	br	8110e124 <__reset+0xfb0ee124>
8110e2d0:	d9002d17 	ldw	r4,180(sp)
8110e2d4:	25000017 	ldw	r20,0(r4)
8110e2d8:	21000104 	addi	r4,r4,4
8110e2dc:	d9002d15 	stw	r4,180(sp)
8110e2e0:	a02dd7fa 	srai	r22,r20,31
8110e2e4:	b005883a 	mov	r2,r22
8110e2e8:	003a9b06 	br	8110cd58 <__reset+0xfb0ecd58>
8110e2ec:	d9402d17 	ldw	r5,180(sp)
8110e2f0:	002d883a 	mov	r22,zero
8110e2f4:	2d000017 	ldw	r20,0(r5)
8110e2f8:	29400104 	addi	r5,r5,4
8110e2fc:	d9402d15 	stw	r5,180(sp)
8110e300:	003bf906 	br	8110d2e8 <__reset+0xfb0ed2e8>
8110e304:	9480100c 	andi	r18,r18,64
8110e308:	90006e26 	beq	r18,zero,8110e4c4 <___svfprintf_internal_r+0x1cc4>
8110e30c:	d9002d17 	ldw	r4,180(sp)
8110e310:	d9402f17 	ldw	r5,188(sp)
8110e314:	20800017 	ldw	r2,0(r4)
8110e318:	21000104 	addi	r4,r4,4
8110e31c:	d9002d15 	stw	r4,180(sp)
8110e320:	1140000d 	sth	r5,0(r2)
8110e324:	00396106 	br	8110c8ac <__reset+0xfb0ec8ac>
8110e328:	d9402c17 	ldw	r5,176(sp)
8110e32c:	d9801e04 	addi	r6,sp,120
8110e330:	9809883a 	mov	r4,r19
8110e334:	11112cc0 	call	811112cc <__ssprint_r>
8110e338:	103a161e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110e33c:	d8c02017 	ldw	r3,128(sp)
8110e340:	d8801f17 	ldw	r2,124(sp)
8110e344:	da000404 	addi	r8,sp,16
8110e348:	d9403317 	ldw	r5,204(sp)
8110e34c:	10800044 	addi	r2,r2,1
8110e350:	44000015 	stw	r16,0(r8)
8110e354:	28c7883a 	add	r3,r5,r3
8110e358:	003b7706 	br	8110d138 <__reset+0xfb0ed138>
8110e35c:	8009883a 	mov	r4,r16
8110e360:	da003e15 	stw	r8,248(sp)
8110e364:	1101bb00 	call	81101bb0 <strlen>
8110e368:	d8802e15 	stw	r2,184(sp)
8110e36c:	da003e17 	ldw	r8,248(sp)
8110e370:	103c280e 	bge	r2,zero,8110d414 <__reset+0xfb0ed414>
8110e374:	0005883a 	mov	r2,zero
8110e378:	003c2606 	br	8110d414 <__reset+0xfb0ed414>
8110e37c:	00bfffc4 	movi	r2,-1
8110e380:	003a0906 	br	8110cba8 <__reset+0xfb0ecba8>
8110e384:	012044b4 	movhi	r4,33042
8110e388:	2112f204 	addi	r4,r4,19400
8110e38c:	d9003515 	stw	r4,212(sp)
8110e390:	003b0606 	br	8110cfac <__reset+0xfb0ecfac>
8110e394:	013fffc4 	movi	r4,-1
8110e398:	003a2706 	br	8110cc38 <__reset+0xfb0ecc38>
8110e39c:	d9402c17 	ldw	r5,176(sp)
8110e3a0:	d9801e04 	addi	r6,sp,120
8110e3a4:	9809883a 	mov	r4,r19
8110e3a8:	11112cc0 	call	811112cc <__ssprint_r>
8110e3ac:	1039f91e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110e3b0:	d8c02017 	ldw	r3,128(sp)
8110e3b4:	da000404 	addi	r8,sp,16
8110e3b8:	003d8406 	br	8110d9cc <__reset+0xfb0ed9cc>
8110e3bc:	0023883a 	mov	r17,zero
8110e3c0:	003d8306 	br	8110d9d0 <__reset+0xfb0ed9d0>
8110e3c4:	012044b4 	movhi	r4,33042
8110e3c8:	2112ee04 	addi	r4,r4,19384
8110e3cc:	d9002b15 	stw	r4,172(sp)
8110e3d0:	d9002b17 	ldw	r4,172(sp)
8110e3d4:	1c47883a 	add	r3,r3,r17
8110e3d8:	10800044 	addi	r2,r2,1
8110e3dc:	41000015 	stw	r4,0(r8)
8110e3e0:	44400115 	stw	r17,4(r8)
8110e3e4:	d8c02015 	stw	r3,128(sp)
8110e3e8:	d8801f15 	stw	r2,124(sp)
8110e3ec:	010001c4 	movi	r4,7
8110e3f0:	20bfcd16 	blt	r4,r2,8110e328 <__reset+0xfb0ee328>
8110e3f4:	42000204 	addi	r8,r8,8
8110e3f8:	003fd306 	br	8110e348 <__reset+0xfb0ee348>
8110e3fc:	d9402c17 	ldw	r5,176(sp)
8110e400:	d9801e04 	addi	r6,sp,120
8110e404:	9809883a 	mov	r4,r19
8110e408:	11112cc0 	call	811112cc <__ssprint_r>
8110e40c:	1039e11e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110e410:	d8802617 	ldw	r2,152(sp)
8110e414:	d8c02017 	ldw	r3,128(sp)
8110e418:	da000404 	addi	r8,sp,16
8110e41c:	003e1c06 	br	8110dc90 <__reset+0xfb0edc90>
8110e420:	d8802917 	ldw	r2,164(sp)
8110e424:	00c00184 	movi	r3,6
8110e428:	1880012e 	bgeu	r3,r2,8110e430 <___svfprintf_internal_r+0x1c30>
8110e42c:	1805883a 	mov	r2,r3
8110e430:	d8802e15 	stw	r2,184(sp)
8110e434:	1000f316 	blt	r2,zero,8110e804 <___svfprintf_internal_r+0x2004>
8110e438:	042044b4 	movhi	r16,33042
8110e43c:	d8802a15 	stw	r2,168(sp)
8110e440:	dd002d15 	stw	r20,180(sp)
8110e444:	d8002915 	stw	zero,164(sp)
8110e448:	d8003215 	stw	zero,200(sp)
8110e44c:	8411d004 	addi	r16,r16,18240
8110e450:	0039883a 	mov	fp,zero
8110e454:	003a9f06 	br	8110ced4 <__reset+0xfb0eced4>
8110e458:	012044b4 	movhi	r4,33042
8110e45c:	2112f204 	addi	r4,r4,19400
8110e460:	d9003515 	stw	r4,212(sp)
8110e464:	003b5f06 	br	8110d1e4 <__reset+0xfb0ed1e4>
8110e468:	d9402c17 	ldw	r5,176(sp)
8110e46c:	d9801e04 	addi	r6,sp,120
8110e470:	9809883a 	mov	r4,r19
8110e474:	11112cc0 	call	811112cc <__ssprint_r>
8110e478:	1039c61e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110e47c:	d8802617 	ldw	r2,152(sp)
8110e480:	d9403317 	ldw	r5,204(sp)
8110e484:	d8c02017 	ldw	r3,128(sp)
8110e488:	da000404 	addi	r8,sp,16
8110e48c:	2885c83a 	sub	r2,r5,r2
8110e490:	003e1006 	br	8110dcd4 <__reset+0xfb0edcd4>
8110e494:	00800044 	movi	r2,1
8110e498:	10803fcc 	andi	r2,r2,255
8110e49c:	00c00044 	movi	r3,1
8110e4a0:	10fa3526 	beq	r2,r3,8110cd78 <__reset+0xfb0ecd78>
8110e4a4:	00c00084 	movi	r3,2
8110e4a8:	10fb9e26 	beq	r2,r3,8110d324 <__reset+0xfb0ed324>
8110e4ac:	003a6406 	br	8110ce40 <__reset+0xfb0ece40>
8110e4b0:	0021883a 	mov	r16,zero
8110e4b4:	003e0806 	br	8110dcd8 <__reset+0xfb0edcd8>
8110e4b8:	07000b44 	movi	fp,45
8110e4bc:	df002785 	stb	fp,158(sp)
8110e4c0:	003a0b06 	br	8110ccf0 <__reset+0xfb0eccf0>
8110e4c4:	d8c02d17 	ldw	r3,180(sp)
8110e4c8:	d9002f17 	ldw	r4,188(sp)
8110e4cc:	18800017 	ldw	r2,0(r3)
8110e4d0:	18c00104 	addi	r3,r3,4
8110e4d4:	d8c02d15 	stw	r3,180(sp)
8110e4d8:	11000015 	stw	r4,0(r2)
8110e4dc:	0038f306 	br	8110c8ac <__reset+0xfb0ec8ac>
8110e4e0:	00c00b44 	movi	r3,45
8110e4e4:	d8c02785 	stb	r3,158(sp)
8110e4e8:	d8802a15 	stw	r2,168(sp)
8110e4ec:	dc802b17 	ldw	r18,172(sp)
8110e4f0:	d8002915 	stw	zero,164(sp)
8110e4f4:	07000b44 	movi	fp,45
8110e4f8:	003a7306 	br	8110cec8 <__reset+0xfb0ecec8>
8110e4fc:	9080004c 	andi	r2,r18,1
8110e500:	1000941e 	bne	r2,zero,8110e754 <___svfprintf_internal_r+0x1f54>
8110e504:	d8802117 	ldw	r2,132(sp)
8110e508:	1405c83a 	sub	r2,r2,r16
8110e50c:	d8803315 	stw	r2,204(sp)
8110e510:	b441161e 	bne	r22,r17,8110e96c <___svfprintf_internal_r+0x216c>
8110e514:	dd802617 	ldw	r22,152(sp)
8110e518:	00bfff44 	movi	r2,-3
8110e51c:	b0801a16 	blt	r22,r2,8110e588 <___svfprintf_internal_r+0x1d88>
8110e520:	d9402917 	ldw	r5,164(sp)
8110e524:	2d801816 	blt	r5,r22,8110e588 <___svfprintf_internal_r+0x1d88>
8110e528:	dd803215 	stw	r22,200(sp)
8110e52c:	003f3a06 	br	8110e218 <__reset+0xfb0ee218>
8110e530:	1025883a 	mov	r18,r2
8110e534:	0039883a 	mov	fp,zero
8110e538:	00800084 	movi	r2,2
8110e53c:	003fd606 	br	8110e498 <__reset+0xfb0ee498>
8110e540:	9080004c 	andi	r2,r18,1
8110e544:	103f191e 	bne	r2,zero,8110e1ac <__reset+0xfb0ee1ac>
8110e548:	d8802117 	ldw	r2,132(sp)
8110e54c:	003f2806 	br	8110e1f0 <__reset+0xfb0ee1f0>
8110e550:	012044b4 	movhi	r4,33042
8110e554:	2112ee04 	addi	r4,r4,19384
8110e558:	d9002b15 	stw	r4,172(sp)
8110e55c:	003c7c06 	br	8110d750 <__reset+0xfb0ed750>
8110e560:	e005883a 	mov	r2,fp
8110e564:	003f2206 	br	8110e1f0 <__reset+0xfb0ee1f0>
8110e568:	d9402917 	ldw	r5,164(sp)
8110e56c:	df002783 	ldbu	fp,158(sp)
8110e570:	dd002d15 	stw	r20,180(sp)
8110e574:	d9402a15 	stw	r5,168(sp)
8110e578:	d9402e15 	stw	r5,184(sp)
8110e57c:	d8002915 	stw	zero,164(sp)
8110e580:	d8003215 	stw	zero,200(sp)
8110e584:	003a4c06 	br	8110ceb8 <__reset+0xfb0eceb8>
8110e588:	8c7fff84 	addi	r17,r17,-2
8110e58c:	b5bfffc4 	addi	r22,r22,-1
8110e590:	dd802615 	stw	r22,152(sp)
8110e594:	dc4022c5 	stb	r17,139(sp)
8110e598:	b000c316 	blt	r22,zero,8110e8a8 <___svfprintf_internal_r+0x20a8>
8110e59c:	00800ac4 	movi	r2,43
8110e5a0:	d8802305 	stb	r2,140(sp)
8110e5a4:	00800244 	movi	r2,9
8110e5a8:	15806e16 	blt	r2,r22,8110e764 <___svfprintf_internal_r+0x1f64>
8110e5ac:	00800c04 	movi	r2,48
8110e5b0:	b5800c04 	addi	r22,r22,48
8110e5b4:	d8802345 	stb	r2,141(sp)
8110e5b8:	dd802385 	stb	r22,142(sp)
8110e5bc:	d88023c4 	addi	r2,sp,143
8110e5c0:	df0022c4 	addi	fp,sp,139
8110e5c4:	d8c03317 	ldw	r3,204(sp)
8110e5c8:	1739c83a 	sub	fp,r2,fp
8110e5cc:	d9003317 	ldw	r4,204(sp)
8110e5d0:	e0c7883a 	add	r3,fp,r3
8110e5d4:	df003b15 	stw	fp,236(sp)
8110e5d8:	d8c02e15 	stw	r3,184(sp)
8110e5dc:	00800044 	movi	r2,1
8110e5e0:	1100b70e 	bge	r2,r4,8110e8c0 <___svfprintf_internal_r+0x20c0>
8110e5e4:	d8c02e17 	ldw	r3,184(sp)
8110e5e8:	18c00044 	addi	r3,r3,1
8110e5ec:	d8c02e15 	stw	r3,184(sp)
8110e5f0:	1805883a 	mov	r2,r3
8110e5f4:	1800b016 	blt	r3,zero,8110e8b8 <___svfprintf_internal_r+0x20b8>
8110e5f8:	d8003215 	stw	zero,200(sp)
8110e5fc:	003f1006 	br	8110e240 <__reset+0xfb0ee240>
8110e600:	d8802917 	ldw	r2,164(sp)
8110e604:	103ec71e 	bne	r2,zero,8110e124 <__reset+0xfb0ee124>
8110e608:	dc002915 	stw	r16,164(sp)
8110e60c:	003ec506 	br	8110e124 <__reset+0xfb0ee124>
8110e610:	d9402c17 	ldw	r5,176(sp)
8110e614:	d9801e04 	addi	r6,sp,120
8110e618:	9809883a 	mov	r4,r19
8110e61c:	11112cc0 	call	811112cc <__ssprint_r>
8110e620:	10395c1e 	bne	r2,zero,8110cb94 <__reset+0xfb0ecb94>
8110e624:	dc402617 	ldw	r17,152(sp)
8110e628:	d8c02017 	ldw	r3,128(sp)
8110e62c:	d8801f17 	ldw	r2,124(sp)
8110e630:	da000404 	addi	r8,sp,16
8110e634:	003e7706 	br	8110e014 <__reset+0xfb0ee014>
8110e638:	582f883a 	mov	r23,r11
8110e63c:	d8002915 	stw	zero,164(sp)
8110e640:	0038c406 	br	8110c954 <__reset+0xfb0ec954>
8110e644:	d8c02917 	ldw	r3,164(sp)
8110e648:	d8802104 	addi	r2,sp,132
8110e64c:	d8800315 	stw	r2,12(sp)
8110e650:	d9403617 	ldw	r5,216(sp)
8110e654:	d8802504 	addi	r2,sp,148
8110e658:	d8800215 	stw	r2,8(sp)
8110e65c:	d8802604 	addi	r2,sp,152
8110e660:	d8c00015 	stw	r3,0(sp)
8110e664:	9809883a 	mov	r4,r19
8110e668:	d8800115 	stw	r2,4(sp)
8110e66c:	01c000c4 	movi	r7,3
8110e670:	a00d883a 	mov	r6,r20
8110e674:	da003e15 	stw	r8,248(sp)
8110e678:	1105bac0 	call	81105bac <_dtoa_r>
8110e67c:	d9002917 	ldw	r4,164(sp)
8110e680:	da003e17 	ldw	r8,248(sp)
8110e684:	1021883a 	mov	r16,r2
8110e688:	1139883a 	add	fp,r2,r4
8110e68c:	2007883a 	mov	r3,r4
8110e690:	81000007 	ldb	r4,0(r16)
8110e694:	00800c04 	movi	r2,48
8110e698:	20806f26 	beq	r4,r2,8110e858 <___svfprintf_internal_r+0x2058>
8110e69c:	d8c02617 	ldw	r3,152(sp)
8110e6a0:	e0f9883a 	add	fp,fp,r3
8110e6a4:	003ec206 	br	8110e1b0 <__reset+0xfb0ee1b0>
8110e6a8:	00c00b44 	movi	r3,45
8110e6ac:	2520003c 	xorhi	r20,r4,32768
8110e6b0:	d8c02a05 	stb	r3,168(sp)
8110e6b4:	003ea106 	br	8110e13c <__reset+0xfb0ee13c>
8110e6b8:	d8c03217 	ldw	r3,200(sp)
8110e6bc:	00c0890e 	bge	zero,r3,8110e8e4 <___svfprintf_internal_r+0x20e4>
8110e6c0:	00800044 	movi	r2,1
8110e6c4:	d9003317 	ldw	r4,204(sp)
8110e6c8:	1105883a 	add	r2,r2,r4
8110e6cc:	d8802e15 	stw	r2,184(sp)
8110e6d0:	10005f16 	blt	r2,zero,8110e850 <___svfprintf_internal_r+0x2050>
8110e6d4:	044019c4 	movi	r17,103
8110e6d8:	003ed906 	br	8110e240 <__reset+0xfb0ee240>
8110e6dc:	d9002917 	ldw	r4,164(sp)
8110e6e0:	20c00044 	addi	r3,r4,1
8110e6e4:	003e9c06 	br	8110e158 <__reset+0xfb0ee158>
8110e6e8:	d9002917 	ldw	r4,164(sp)
8110e6ec:	00c0680e 	bge	zero,r3,8110e890 <___svfprintf_internal_r+0x2090>
8110e6f0:	2000461e 	bne	r4,zero,8110e80c <___svfprintf_internal_r+0x200c>
8110e6f4:	9480004c 	andi	r18,r18,1
8110e6f8:	9000441e 	bne	r18,zero,8110e80c <___svfprintf_internal_r+0x200c>
8110e6fc:	1805883a 	mov	r2,r3
8110e700:	1800a016 	blt	r3,zero,8110e984 <___svfprintf_internal_r+0x2184>
8110e704:	d8c03217 	ldw	r3,200(sp)
8110e708:	d8c02e15 	stw	r3,184(sp)
8110e70c:	003ecc06 	br	8110e240 <__reset+0xfb0ee240>
8110e710:	d9402917 	ldw	r5,164(sp)
8110e714:	d8802104 	addi	r2,sp,132
8110e718:	d8800315 	stw	r2,12(sp)
8110e71c:	d9400015 	stw	r5,0(sp)
8110e720:	d8802504 	addi	r2,sp,148
8110e724:	d9403617 	ldw	r5,216(sp)
8110e728:	d8800215 	stw	r2,8(sp)
8110e72c:	d8802604 	addi	r2,sp,152
8110e730:	d8800115 	stw	r2,4(sp)
8110e734:	01c000c4 	movi	r7,3
8110e738:	a00d883a 	mov	r6,r20
8110e73c:	9809883a 	mov	r4,r19
8110e740:	da003e15 	stw	r8,248(sp)
8110e744:	1105bac0 	call	81105bac <_dtoa_r>
8110e748:	d8c02917 	ldw	r3,164(sp)
8110e74c:	da003e17 	ldw	r8,248(sp)
8110e750:	1021883a 	mov	r16,r2
8110e754:	00801184 	movi	r2,70
8110e758:	80f9883a 	add	fp,r16,r3
8110e75c:	88bfcc26 	beq	r17,r2,8110e690 <__reset+0xfb0ee690>
8110e760:	003e9306 	br	8110e1b0 <__reset+0xfb0ee1b0>
8110e764:	df0022c4 	addi	fp,sp,139
8110e768:	dc002915 	stw	r16,164(sp)
8110e76c:	9829883a 	mov	r20,r19
8110e770:	e021883a 	mov	r16,fp
8110e774:	4027883a 	mov	r19,r8
8110e778:	b009883a 	mov	r4,r22
8110e77c:	01400284 	movi	r5,10
8110e780:	11135c00 	call	811135c0 <__modsi3>
8110e784:	10800c04 	addi	r2,r2,48
8110e788:	843fffc4 	addi	r16,r16,-1
8110e78c:	b009883a 	mov	r4,r22
8110e790:	01400284 	movi	r5,10
8110e794:	80800005 	stb	r2,0(r16)
8110e798:	111353c0 	call	8111353c <__divsi3>
8110e79c:	102d883a 	mov	r22,r2
8110e7a0:	00800244 	movi	r2,9
8110e7a4:	15bff416 	blt	r2,r22,8110e778 <__reset+0xfb0ee778>
8110e7a8:	9811883a 	mov	r8,r19
8110e7ac:	b0800c04 	addi	r2,r22,48
8110e7b0:	a027883a 	mov	r19,r20
8110e7b4:	8029883a 	mov	r20,r16
8110e7b8:	a17fffc4 	addi	r5,r20,-1
8110e7bc:	a0bfffc5 	stb	r2,-1(r20)
8110e7c0:	dc002917 	ldw	r16,164(sp)
8110e7c4:	2f00752e 	bgeu	r5,fp,8110e99c <___svfprintf_internal_r+0x219c>
8110e7c8:	d9c02384 	addi	r7,sp,142
8110e7cc:	3d0fc83a 	sub	r7,r7,r20
8110e7d0:	d9002344 	addi	r4,sp,141
8110e7d4:	e1cf883a 	add	r7,fp,r7
8110e7d8:	00000106 	br	8110e7e0 <___svfprintf_internal_r+0x1fe0>
8110e7dc:	28800003 	ldbu	r2,0(r5)
8110e7e0:	20800005 	stb	r2,0(r4)
8110e7e4:	21000044 	addi	r4,r4,1
8110e7e8:	29400044 	addi	r5,r5,1
8110e7ec:	21fffb1e 	bne	r4,r7,8110e7dc <__reset+0xfb0ee7dc>
8110e7f0:	d8802304 	addi	r2,sp,140
8110e7f4:	1505c83a 	sub	r2,r2,r20
8110e7f8:	d8c02344 	addi	r3,sp,141
8110e7fc:	1885883a 	add	r2,r3,r2
8110e800:	003f7006 	br	8110e5c4 <__reset+0xfb0ee5c4>
8110e804:	0005883a 	mov	r2,zero
8110e808:	003f0b06 	br	8110e438 <__reset+0xfb0ee438>
8110e80c:	d9002917 	ldw	r4,164(sp)
8110e810:	d8c03217 	ldw	r3,200(sp)
8110e814:	20800044 	addi	r2,r4,1
8110e818:	1885883a 	add	r2,r3,r2
8110e81c:	d8802e15 	stw	r2,184(sp)
8110e820:	103e870e 	bge	r2,zero,8110e240 <__reset+0xfb0ee240>
8110e824:	0005883a 	mov	r2,zero
8110e828:	003e8506 	br	8110e240 <__reset+0xfb0ee240>
8110e82c:	012044b4 	movhi	r4,33042
8110e830:	2112ee04 	addi	r4,r4,19384
8110e834:	d9002b15 	stw	r4,172(sp)
8110e838:	003cc506 	br	8110db50 <__reset+0xfb0edb50>
8110e83c:	d8c03217 	ldw	r3,200(sp)
8110e840:	18c00044 	addi	r3,r3,1
8110e844:	d8c02e15 	stw	r3,184(sp)
8110e848:	1805883a 	mov	r2,r3
8110e84c:	183fa10e 	bge	r3,zero,8110e6d4 <__reset+0xfb0ee6d4>
8110e850:	0005883a 	mov	r2,zero
8110e854:	003f9f06 	br	8110e6d4 <__reset+0xfb0ee6d4>
8110e858:	d9003617 	ldw	r4,216(sp)
8110e85c:	000d883a 	mov	r6,zero
8110e860:	000f883a 	mov	r7,zero
8110e864:	a00b883a 	mov	r5,r20
8110e868:	d8c03d15 	stw	r3,244(sp)
8110e86c:	da003e15 	stw	r8,248(sp)
8110e870:	1114a800 	call	81114a80 <__eqdf2>
8110e874:	d8c03d17 	ldw	r3,244(sp)
8110e878:	da003e17 	ldw	r8,248(sp)
8110e87c:	103f8726 	beq	r2,zero,8110e69c <__reset+0xfb0ee69c>
8110e880:	00800044 	movi	r2,1
8110e884:	10c7c83a 	sub	r3,r2,r3
8110e888:	d8c02615 	stw	r3,152(sp)
8110e88c:	003f8406 	br	8110e6a0 <__reset+0xfb0ee6a0>
8110e890:	20000e1e 	bne	r4,zero,8110e8cc <___svfprintf_internal_r+0x20cc>
8110e894:	9480004c 	andi	r18,r18,1
8110e898:	90000c1e 	bne	r18,zero,8110e8cc <___svfprintf_internal_r+0x20cc>
8110e89c:	00800044 	movi	r2,1
8110e8a0:	d8802e15 	stw	r2,184(sp)
8110e8a4:	003e6606 	br	8110e240 <__reset+0xfb0ee240>
8110e8a8:	00800b44 	movi	r2,45
8110e8ac:	05adc83a 	sub	r22,zero,r22
8110e8b0:	d8802305 	stb	r2,140(sp)
8110e8b4:	003f3b06 	br	8110e5a4 <__reset+0xfb0ee5a4>
8110e8b8:	0005883a 	mov	r2,zero
8110e8bc:	003f4e06 	br	8110e5f8 <__reset+0xfb0ee5f8>
8110e8c0:	90a4703a 	and	r18,r18,r2
8110e8c4:	903f4a26 	beq	r18,zero,8110e5f0 <__reset+0xfb0ee5f0>
8110e8c8:	003f4606 	br	8110e5e4 <__reset+0xfb0ee5e4>
8110e8cc:	d8c02917 	ldw	r3,164(sp)
8110e8d0:	18c00084 	addi	r3,r3,2
8110e8d4:	d8c02e15 	stw	r3,184(sp)
8110e8d8:	1805883a 	mov	r2,r3
8110e8dc:	183e580e 	bge	r3,zero,8110e240 <__reset+0xfb0ee240>
8110e8e0:	003fd006 	br	8110e824 <__reset+0xfb0ee824>
8110e8e4:	00800084 	movi	r2,2
8110e8e8:	10c5c83a 	sub	r2,r2,r3
8110e8ec:	003f7506 	br	8110e6c4 <__reset+0xfb0ee6c4>
8110e8f0:	d8802d17 	ldw	r2,180(sp)
8110e8f4:	d9002d17 	ldw	r4,180(sp)
8110e8f8:	bc400043 	ldbu	r17,1(r23)
8110e8fc:	10800017 	ldw	r2,0(r2)
8110e900:	582f883a 	mov	r23,r11
8110e904:	d8802915 	stw	r2,164(sp)
8110e908:	20800104 	addi	r2,r4,4
8110e90c:	d9002917 	ldw	r4,164(sp)
8110e910:	d8802d15 	stw	r2,180(sp)
8110e914:	203df00e 	bge	r4,zero,8110e0d8 <__reset+0xfb0ee0d8>
8110e918:	8c403fcc 	andi	r17,r17,255
8110e91c:	00bfffc4 	movi	r2,-1
8110e920:	8c40201c 	xori	r17,r17,128
8110e924:	d8802915 	stw	r2,164(sp)
8110e928:	8c7fe004 	addi	r17,r17,-128
8110e92c:	00380806 	br	8110c950 <__reset+0xfb0ec950>
8110e930:	9080004c 	andi	r2,r18,1
8110e934:	0039883a 	mov	fp,zero
8110e938:	10000726 	beq	r2,zero,8110e958 <___svfprintf_internal_r+0x2158>
8110e93c:	d8c02817 	ldw	r3,160(sp)
8110e940:	dc001dc4 	addi	r16,sp,119
8110e944:	00800c04 	movi	r2,48
8110e948:	1c07c83a 	sub	r3,r3,r16
8110e94c:	d8801dc5 	stb	r2,119(sp)
8110e950:	d8c02e15 	stw	r3,184(sp)
8110e954:	00395206 	br	8110cea0 <__reset+0xfb0ecea0>
8110e958:	d8002e15 	stw	zero,184(sp)
8110e95c:	dc001e04 	addi	r16,sp,120
8110e960:	00394f06 	br	8110cea0 <__reset+0xfb0ecea0>
8110e964:	0005883a 	mov	r2,zero
8110e968:	003e3206 	br	8110e234 <__reset+0xfb0ee234>
8110e96c:	dd802617 	ldw	r22,152(sp)
8110e970:	003f0606 	br	8110e58c <__reset+0xfb0ee58c>
8110e974:	d9c02785 	stb	r7,158(sp)
8110e978:	003a5106 	br	8110d2c0 <__reset+0xfb0ed2c0>
8110e97c:	d9c02785 	stb	r7,158(sp)
8110e980:	003a3706 	br	8110d260 <__reset+0xfb0ed260>
8110e984:	0005883a 	mov	r2,zero
8110e988:	003f5e06 	br	8110e704 <__reset+0xfb0ee704>
8110e98c:	d9c02785 	stb	r7,158(sp)
8110e990:	00391706 	br	8110cdf0 <__reset+0xfb0ecdf0>
8110e994:	d9c02785 	stb	r7,158(sp)
8110e998:	0038e606 	br	8110cd34 <__reset+0xfb0ecd34>
8110e99c:	d8802344 	addi	r2,sp,141
8110e9a0:	003f0806 	br	8110e5c4 <__reset+0xfb0ee5c4>
8110e9a4:	d9c02785 	stb	r7,158(sp)
8110e9a8:	0038b706 	br	8110cc88 <__reset+0xfb0ecc88>
8110e9ac:	d9c02785 	stb	r7,158(sp)
8110e9b0:	003adc06 	br	8110d524 <__reset+0xfb0ed524>
8110e9b4:	d9403917 	ldw	r5,228(sp)
8110e9b8:	00800304 	movi	r2,12
8110e9bc:	28800015 	stw	r2,0(r5)
8110e9c0:	00bfffc4 	movi	r2,-1
8110e9c4:	00387806 	br	8110cba8 <__reset+0xfb0ecba8>
8110e9c8:	d9c02785 	stb	r7,158(sp)
8110e9cc:	003abf06 	br	8110d4cc <__reset+0xfb0ed4cc>
8110e9d0:	d9c02785 	stb	r7,158(sp)
8110e9d4:	003a9b06 	br	8110d444 <__reset+0xfb0ed444>

8110e9d8 <__submore>:
8110e9d8:	defffa04 	addi	sp,sp,-24
8110e9dc:	dc000015 	stw	r16,0(sp)
8110e9e0:	2821883a 	mov	r16,r5
8110e9e4:	29400c17 	ldw	r5,48(r5)
8110e9e8:	dfc00515 	stw	ra,20(sp)
8110e9ec:	dd000415 	stw	r20,16(sp)
8110e9f0:	dcc00315 	stw	r19,12(sp)
8110e9f4:	dc800215 	stw	r18,8(sp)
8110e9f8:	dc400115 	stw	r17,4(sp)
8110e9fc:	80801004 	addi	r2,r16,64
8110ea00:	28801726 	beq	r5,r2,8110ea60 <__submore+0x88>
8110ea04:	84400d17 	ldw	r17,52(r16)
8110ea08:	8c67883a 	add	r19,r17,r17
8110ea0c:	980d883a 	mov	r6,r19
8110ea10:	1109dc80 	call	81109dc8 <_realloc_r>
8110ea14:	1025883a 	mov	r18,r2
8110ea18:	10002226 	beq	r2,zero,8110eaa4 <__submore+0xcc>
8110ea1c:	1469883a 	add	r20,r2,r17
8110ea20:	880d883a 	mov	r6,r17
8110ea24:	100b883a 	mov	r5,r2
8110ea28:	a009883a 	mov	r4,r20
8110ea2c:	1108ac80 	call	81108ac8 <memcpy>
8110ea30:	0005883a 	mov	r2,zero
8110ea34:	85000015 	stw	r20,0(r16)
8110ea38:	84800c15 	stw	r18,48(r16)
8110ea3c:	84c00d15 	stw	r19,52(r16)
8110ea40:	dfc00517 	ldw	ra,20(sp)
8110ea44:	dd000417 	ldw	r20,16(sp)
8110ea48:	dcc00317 	ldw	r19,12(sp)
8110ea4c:	dc800217 	ldw	r18,8(sp)
8110ea50:	dc400117 	ldw	r17,4(sp)
8110ea54:	dc000017 	ldw	r16,0(sp)
8110ea58:	dec00604 	addi	sp,sp,24
8110ea5c:	f800283a 	ret
8110ea60:	04410004 	movi	r17,1024
8110ea64:	880b883a 	mov	r5,r17
8110ea68:	1100cf00 	call	81100cf0 <_malloc_r>
8110ea6c:	1007883a 	mov	r3,r2
8110ea70:	10000c26 	beq	r2,zero,8110eaa4 <__submore+0xcc>
8110ea74:	80801083 	ldbu	r2,66(r16)
8110ea78:	80c00c15 	stw	r3,48(r16)
8110ea7c:	84400d15 	stw	r17,52(r16)
8110ea80:	1880ffc5 	stb	r2,1023(r3)
8110ea84:	81401043 	ldbu	r5,65(r16)
8110ea88:	1900ff44 	addi	r4,r3,1021
8110ea8c:	0005883a 	mov	r2,zero
8110ea90:	1940ff85 	stb	r5,1022(r3)
8110ea94:	81401003 	ldbu	r5,64(r16)
8110ea98:	1940ff45 	stb	r5,1021(r3)
8110ea9c:	81000015 	stw	r4,0(r16)
8110eaa0:	003fe706 	br	8110ea40 <__reset+0xfb0eea40>
8110eaa4:	00bfffc4 	movi	r2,-1
8110eaa8:	003fe506 	br	8110ea40 <__reset+0xfb0eea40>

8110eaac <_ungetc_r>:
8110eaac:	00bfffc4 	movi	r2,-1
8110eab0:	28806126 	beq	r5,r2,8110ec38 <_ungetc_r+0x18c>
8110eab4:	defffb04 	addi	sp,sp,-20
8110eab8:	dcc00315 	stw	r19,12(sp)
8110eabc:	dc400115 	stw	r17,4(sp)
8110eac0:	dc000015 	stw	r16,0(sp)
8110eac4:	dfc00415 	stw	ra,16(sp)
8110eac8:	dc800215 	stw	r18,8(sp)
8110eacc:	2023883a 	mov	r17,r4
8110ead0:	3021883a 	mov	r16,r6
8110ead4:	2827883a 	mov	r19,r5
8110ead8:	20000226 	beq	r4,zero,8110eae4 <_ungetc_r+0x38>
8110eadc:	20800e17 	ldw	r2,56(r4)
8110eae0:	10002e26 	beq	r2,zero,8110eb9c <_ungetc_r+0xf0>
8110eae4:	80c0030b 	ldhu	r3,12(r16)
8110eae8:	1888000c 	andi	r2,r3,8192
8110eaec:	1000051e 	bne	r2,zero,8110eb04 <_ungetc_r+0x58>
8110eaf0:	81001917 	ldw	r4,100(r16)
8110eaf4:	00b7ffc4 	movi	r2,-8193
8110eaf8:	18c80014 	ori	r3,r3,8192
8110eafc:	2084703a 	and	r2,r4,r2
8110eb00:	80801915 	stw	r2,100(r16)
8110eb04:	00bff7c4 	movi	r2,-33
8110eb08:	1884703a 	and	r2,r3,r2
8110eb0c:	8080030d 	sth	r2,12(r16)
8110eb10:	1900010c 	andi	r4,r3,4
8110eb14:	2000061e 	bne	r4,zero,8110eb30 <_ungetc_r+0x84>
8110eb18:	1900040c 	andi	r4,r3,16
8110eb1c:	20001d26 	beq	r4,zero,8110eb94 <_ungetc_r+0xe8>
8110eb20:	18c0020c 	andi	r3,r3,8
8110eb24:	1800331e 	bne	r3,zero,8110ebf4 <_ungetc_r+0x148>
8110eb28:	10800114 	ori	r2,r2,4
8110eb2c:	8080030d 	sth	r2,12(r16)
8110eb30:	80800c17 	ldw	r2,48(r16)
8110eb34:	9c803fcc 	andi	r18,r19,255
8110eb38:	10001a26 	beq	r2,zero,8110eba4 <_ungetc_r+0xf8>
8110eb3c:	80c00117 	ldw	r3,4(r16)
8110eb40:	80800d17 	ldw	r2,52(r16)
8110eb44:	18800f0e 	bge	r3,r2,8110eb84 <_ungetc_r+0xd8>
8110eb48:	80c00017 	ldw	r3,0(r16)
8110eb4c:	9005883a 	mov	r2,r18
8110eb50:	193fffc4 	addi	r4,r3,-1
8110eb54:	81000015 	stw	r4,0(r16)
8110eb58:	1cffffc5 	stb	r19,-1(r3)
8110eb5c:	80c00117 	ldw	r3,4(r16)
8110eb60:	18c00044 	addi	r3,r3,1
8110eb64:	80c00115 	stw	r3,4(r16)
8110eb68:	dfc00417 	ldw	ra,16(sp)
8110eb6c:	dcc00317 	ldw	r19,12(sp)
8110eb70:	dc800217 	ldw	r18,8(sp)
8110eb74:	dc400117 	ldw	r17,4(sp)
8110eb78:	dc000017 	ldw	r16,0(sp)
8110eb7c:	dec00504 	addi	sp,sp,20
8110eb80:	f800283a 	ret
8110eb84:	800b883a 	mov	r5,r16
8110eb88:	8809883a 	mov	r4,r17
8110eb8c:	110e9d80 	call	8110e9d8 <__submore>
8110eb90:	103fed26 	beq	r2,zero,8110eb48 <__reset+0xfb0eeb48>
8110eb94:	00bfffc4 	movi	r2,-1
8110eb98:	003ff306 	br	8110eb68 <__reset+0xfb0eeb68>
8110eb9c:	110782c0 	call	8110782c <__sinit>
8110eba0:	003fd006 	br	8110eae4 <__reset+0xfb0eeae4>
8110eba4:	80c00417 	ldw	r3,16(r16)
8110eba8:	80800017 	ldw	r2,0(r16)
8110ebac:	18000326 	beq	r3,zero,8110ebbc <_ungetc_r+0x110>
8110ebb0:	1880022e 	bgeu	r3,r2,8110ebbc <_ungetc_r+0x110>
8110ebb4:	10ffffc3 	ldbu	r3,-1(r2)
8110ebb8:	90c01826 	beq	r18,r3,8110ec1c <_ungetc_r+0x170>
8110ebbc:	81400117 	ldw	r5,4(r16)
8110ebc0:	80800e15 	stw	r2,56(r16)
8110ebc4:	008000c4 	movi	r2,3
8110ebc8:	81001004 	addi	r4,r16,64
8110ebcc:	80c01084 	addi	r3,r16,66
8110ebd0:	80800d15 	stw	r2,52(r16)
8110ebd4:	00800044 	movi	r2,1
8110ebd8:	80800115 	stw	r2,4(r16)
8110ebdc:	81400f15 	stw	r5,60(r16)
8110ebe0:	81000c15 	stw	r4,48(r16)
8110ebe4:	84c01085 	stb	r19,66(r16)
8110ebe8:	80c00015 	stw	r3,0(r16)
8110ebec:	9005883a 	mov	r2,r18
8110ebf0:	003fdd06 	br	8110eb68 <__reset+0xfb0eeb68>
8110ebf4:	800b883a 	mov	r5,r16
8110ebf8:	8809883a 	mov	r4,r17
8110ebfc:	11074500 	call	81107450 <_fflush_r>
8110ec00:	103fe41e 	bne	r2,zero,8110eb94 <__reset+0xfb0eeb94>
8110ec04:	8080030b 	ldhu	r2,12(r16)
8110ec08:	00fffdc4 	movi	r3,-9
8110ec0c:	80000215 	stw	zero,8(r16)
8110ec10:	1884703a 	and	r2,r3,r2
8110ec14:	80000615 	stw	zero,24(r16)
8110ec18:	003fc306 	br	8110eb28 <__reset+0xfb0eeb28>
8110ec1c:	80c00117 	ldw	r3,4(r16)
8110ec20:	10bfffc4 	addi	r2,r2,-1
8110ec24:	80800015 	stw	r2,0(r16)
8110ec28:	18800044 	addi	r2,r3,1
8110ec2c:	80800115 	stw	r2,4(r16)
8110ec30:	9005883a 	mov	r2,r18
8110ec34:	003fcc06 	br	8110eb68 <__reset+0xfb0eeb68>
8110ec38:	00bfffc4 	movi	r2,-1
8110ec3c:	f800283a 	ret

8110ec40 <ungetc>:
8110ec40:	00a044b4 	movhi	r2,33042
8110ec44:	109b9c04 	addi	r2,r2,28272
8110ec48:	280d883a 	mov	r6,r5
8110ec4c:	200b883a 	mov	r5,r4
8110ec50:	11000017 	ldw	r4,0(r2)
8110ec54:	110eaac1 	jmpi	8110eaac <_ungetc_r>

8110ec58 <__sprint_r.part.0>:
8110ec58:	28801917 	ldw	r2,100(r5)
8110ec5c:	defff604 	addi	sp,sp,-40
8110ec60:	dd400515 	stw	r21,20(sp)
8110ec64:	dfc00915 	stw	ra,36(sp)
8110ec68:	df000815 	stw	fp,32(sp)
8110ec6c:	ddc00715 	stw	r23,28(sp)
8110ec70:	dd800615 	stw	r22,24(sp)
8110ec74:	dd000415 	stw	r20,16(sp)
8110ec78:	dcc00315 	stw	r19,12(sp)
8110ec7c:	dc800215 	stw	r18,8(sp)
8110ec80:	dc400115 	stw	r17,4(sp)
8110ec84:	dc000015 	stw	r16,0(sp)
8110ec88:	1088000c 	andi	r2,r2,8192
8110ec8c:	302b883a 	mov	r21,r6
8110ec90:	10002e26 	beq	r2,zero,8110ed4c <__sprint_r.part.0+0xf4>
8110ec94:	30800217 	ldw	r2,8(r6)
8110ec98:	35800017 	ldw	r22,0(r6)
8110ec9c:	10002926 	beq	r2,zero,8110ed44 <__sprint_r.part.0+0xec>
8110eca0:	2827883a 	mov	r19,r5
8110eca4:	2029883a 	mov	r20,r4
8110eca8:	b5c00104 	addi	r23,r22,4
8110ecac:	04bfffc4 	movi	r18,-1
8110ecb0:	bc400017 	ldw	r17,0(r23)
8110ecb4:	b4000017 	ldw	r16,0(r22)
8110ecb8:	0039883a 	mov	fp,zero
8110ecbc:	8822d0ba 	srli	r17,r17,2
8110ecc0:	8800031e 	bne	r17,zero,8110ecd0 <__sprint_r.part.0+0x78>
8110ecc4:	00001806 	br	8110ed28 <__sprint_r.part.0+0xd0>
8110ecc8:	84000104 	addi	r16,r16,4
8110eccc:	8f001526 	beq	r17,fp,8110ed24 <__sprint_r.part.0+0xcc>
8110ecd0:	81400017 	ldw	r5,0(r16)
8110ecd4:	980d883a 	mov	r6,r19
8110ecd8:	a009883a 	mov	r4,r20
8110ecdc:	11105cc0 	call	811105cc <_fputwc_r>
8110ece0:	e7000044 	addi	fp,fp,1
8110ece4:	14bff81e 	bne	r2,r18,8110ecc8 <__reset+0xfb0eecc8>
8110ece8:	9005883a 	mov	r2,r18
8110ecec:	a8000215 	stw	zero,8(r21)
8110ecf0:	a8000115 	stw	zero,4(r21)
8110ecf4:	dfc00917 	ldw	ra,36(sp)
8110ecf8:	df000817 	ldw	fp,32(sp)
8110ecfc:	ddc00717 	ldw	r23,28(sp)
8110ed00:	dd800617 	ldw	r22,24(sp)
8110ed04:	dd400517 	ldw	r21,20(sp)
8110ed08:	dd000417 	ldw	r20,16(sp)
8110ed0c:	dcc00317 	ldw	r19,12(sp)
8110ed10:	dc800217 	ldw	r18,8(sp)
8110ed14:	dc400117 	ldw	r17,4(sp)
8110ed18:	dc000017 	ldw	r16,0(sp)
8110ed1c:	dec00a04 	addi	sp,sp,40
8110ed20:	f800283a 	ret
8110ed24:	a8800217 	ldw	r2,8(r21)
8110ed28:	8c63883a 	add	r17,r17,r17
8110ed2c:	8c63883a 	add	r17,r17,r17
8110ed30:	1445c83a 	sub	r2,r2,r17
8110ed34:	a8800215 	stw	r2,8(r21)
8110ed38:	b5800204 	addi	r22,r22,8
8110ed3c:	bdc00204 	addi	r23,r23,8
8110ed40:	103fdb1e 	bne	r2,zero,8110ecb0 <__reset+0xfb0eecb0>
8110ed44:	0005883a 	mov	r2,zero
8110ed48:	003fe806 	br	8110ecec <__reset+0xfb0eecec>
8110ed4c:	1107fbc0 	call	81107fbc <__sfvwrite_r>
8110ed50:	003fe606 	br	8110ecec <__reset+0xfb0eecec>

8110ed54 <__sprint_r>:
8110ed54:	30c00217 	ldw	r3,8(r6)
8110ed58:	18000126 	beq	r3,zero,8110ed60 <__sprint_r+0xc>
8110ed5c:	110ec581 	jmpi	8110ec58 <__sprint_r.part.0>
8110ed60:	30000115 	stw	zero,4(r6)
8110ed64:	0005883a 	mov	r2,zero
8110ed68:	f800283a 	ret

8110ed6c <___vfiprintf_internal_r>:
8110ed6c:	deffc904 	addi	sp,sp,-220
8110ed70:	df003515 	stw	fp,212(sp)
8110ed74:	dd003115 	stw	r20,196(sp)
8110ed78:	dfc03615 	stw	ra,216(sp)
8110ed7c:	ddc03415 	stw	r23,208(sp)
8110ed80:	dd803315 	stw	r22,204(sp)
8110ed84:	dd403215 	stw	r21,200(sp)
8110ed88:	dcc03015 	stw	r19,192(sp)
8110ed8c:	dc802f15 	stw	r18,188(sp)
8110ed90:	dc402e15 	stw	r17,184(sp)
8110ed94:	dc002d15 	stw	r16,180(sp)
8110ed98:	d9002015 	stw	r4,128(sp)
8110ed9c:	d9c02215 	stw	r7,136(sp)
8110eda0:	2829883a 	mov	r20,r5
8110eda4:	3039883a 	mov	fp,r6
8110eda8:	20000226 	beq	r4,zero,8110edb4 <___vfiprintf_internal_r+0x48>
8110edac:	20800e17 	ldw	r2,56(r4)
8110edb0:	1000cf26 	beq	r2,zero,8110f0f0 <___vfiprintf_internal_r+0x384>
8110edb4:	a080030b 	ldhu	r2,12(r20)
8110edb8:	10c8000c 	andi	r3,r2,8192
8110edbc:	1800061e 	bne	r3,zero,8110edd8 <___vfiprintf_internal_r+0x6c>
8110edc0:	a1001917 	ldw	r4,100(r20)
8110edc4:	00f7ffc4 	movi	r3,-8193
8110edc8:	10880014 	ori	r2,r2,8192
8110edcc:	20c6703a 	and	r3,r4,r3
8110edd0:	a080030d 	sth	r2,12(r20)
8110edd4:	a0c01915 	stw	r3,100(r20)
8110edd8:	10c0020c 	andi	r3,r2,8
8110eddc:	1800a926 	beq	r3,zero,8110f084 <___vfiprintf_internal_r+0x318>
8110ede0:	a0c00417 	ldw	r3,16(r20)
8110ede4:	1800a726 	beq	r3,zero,8110f084 <___vfiprintf_internal_r+0x318>
8110ede8:	1080068c 	andi	r2,r2,26
8110edec:	00c00284 	movi	r3,10
8110edf0:	10c0ac26 	beq	r2,r3,8110f0a4 <___vfiprintf_internal_r+0x338>
8110edf4:	da801a04 	addi	r10,sp,104
8110edf8:	da801e15 	stw	r10,120(sp)
8110edfc:	d8801e17 	ldw	r2,120(sp)
8110ee00:	da8019c4 	addi	r10,sp,103
8110ee04:	05a044b4 	movhi	r22,33042
8110ee08:	05e044b4 	movhi	r23,33042
8110ee0c:	da801f15 	stw	r10,124(sp)
8110ee10:	1295c83a 	sub	r10,r2,r10
8110ee14:	b592fa04 	addi	r22,r22,19432
8110ee18:	bdd2f604 	addi	r23,r23,19416
8110ee1c:	dec01a15 	stw	sp,104(sp)
8110ee20:	d8001c15 	stw	zero,112(sp)
8110ee24:	d8001b15 	stw	zero,108(sp)
8110ee28:	d8002615 	stw	zero,152(sp)
8110ee2c:	d8002315 	stw	zero,140(sp)
8110ee30:	da802715 	stw	r10,156(sp)
8110ee34:	d811883a 	mov	r8,sp
8110ee38:	dd002115 	stw	r20,132(sp)
8110ee3c:	e021883a 	mov	r16,fp
8110ee40:	80800007 	ldb	r2,0(r16)
8110ee44:	1003ea26 	beq	r2,zero,8110fdf0 <___vfiprintf_internal_r+0x1084>
8110ee48:	00c00944 	movi	r3,37
8110ee4c:	8025883a 	mov	r18,r16
8110ee50:	10c0021e 	bne	r2,r3,8110ee5c <___vfiprintf_internal_r+0xf0>
8110ee54:	00001606 	br	8110eeb0 <___vfiprintf_internal_r+0x144>
8110ee58:	10c00326 	beq	r2,r3,8110ee68 <___vfiprintf_internal_r+0xfc>
8110ee5c:	94800044 	addi	r18,r18,1
8110ee60:	90800007 	ldb	r2,0(r18)
8110ee64:	103ffc1e 	bne	r2,zero,8110ee58 <__reset+0xfb0eee58>
8110ee68:	9423c83a 	sub	r17,r18,r16
8110ee6c:	88001026 	beq	r17,zero,8110eeb0 <___vfiprintf_internal_r+0x144>
8110ee70:	d8c01c17 	ldw	r3,112(sp)
8110ee74:	d8801b17 	ldw	r2,108(sp)
8110ee78:	44000015 	stw	r16,0(r8)
8110ee7c:	88c7883a 	add	r3,r17,r3
8110ee80:	10800044 	addi	r2,r2,1
8110ee84:	44400115 	stw	r17,4(r8)
8110ee88:	d8c01c15 	stw	r3,112(sp)
8110ee8c:	d8801b15 	stw	r2,108(sp)
8110ee90:	010001c4 	movi	r4,7
8110ee94:	2080760e 	bge	r4,r2,8110f070 <___vfiprintf_internal_r+0x304>
8110ee98:	1803821e 	bne	r3,zero,8110fca4 <___vfiprintf_internal_r+0xf38>
8110ee9c:	da802317 	ldw	r10,140(sp)
8110eea0:	d8001b15 	stw	zero,108(sp)
8110eea4:	d811883a 	mov	r8,sp
8110eea8:	5455883a 	add	r10,r10,r17
8110eeac:	da802315 	stw	r10,140(sp)
8110eeb0:	90800007 	ldb	r2,0(r18)
8110eeb4:	10044626 	beq	r2,zero,8110ffd0 <___vfiprintf_internal_r+0x1264>
8110eeb8:	90c00047 	ldb	r3,1(r18)
8110eebc:	94000044 	addi	r16,r18,1
8110eec0:	d8001d85 	stb	zero,118(sp)
8110eec4:	0009883a 	mov	r4,zero
8110eec8:	000f883a 	mov	r7,zero
8110eecc:	027fffc4 	movi	r9,-1
8110eed0:	0023883a 	mov	r17,zero
8110eed4:	0029883a 	mov	r20,zero
8110eed8:	01401604 	movi	r5,88
8110eedc:	01800244 	movi	r6,9
8110eee0:	03400a84 	movi	r13,42
8110eee4:	03001b04 	movi	r12,108
8110eee8:	84000044 	addi	r16,r16,1
8110eeec:	18bff804 	addi	r2,r3,-32
8110eef0:	28827336 	bltu	r5,r2,8110f8c0 <___vfiprintf_internal_r+0xb54>
8110eef4:	100490ba 	slli	r2,r2,2
8110eef8:	02a04474 	movhi	r10,33041
8110eefc:	52bbc304 	addi	r10,r10,-4340
8110ef00:	1285883a 	add	r2,r2,r10
8110ef04:	10800017 	ldw	r2,0(r2)
8110ef08:	1000683a 	jmp	r2
8110ef0c:	8110f5f4 	orhi	r4,r16,17367
8110ef10:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef14:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef18:	8110f614 	ori	r4,r16,17368
8110ef1c:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef20:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef24:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef28:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef2c:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef30:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef34:	8110f7fc 	xorhi	r4,r16,17375
8110ef38:	8110f818 	cmpnei	r4,r16,17376
8110ef3c:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef40:	8110f100 	call	88110f10 <__reset+0x20f0f10>
8110ef44:	8110f828 	cmpgeui	r4,r16,17376
8110ef48:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef4c:	8110f620 	cmpeqi	r4,r16,17368
8110ef50:	8110f62c 	andhi	r4,r16,17368
8110ef54:	8110f62c 	andhi	r4,r16,17368
8110ef58:	8110f62c 	andhi	r4,r16,17368
8110ef5c:	8110f62c 	andhi	r4,r16,17368
8110ef60:	8110f62c 	andhi	r4,r16,17368
8110ef64:	8110f62c 	andhi	r4,r16,17368
8110ef68:	8110f62c 	andhi	r4,r16,17368
8110ef6c:	8110f62c 	andhi	r4,r16,17368
8110ef70:	8110f62c 	andhi	r4,r16,17368
8110ef74:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef78:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef7c:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef80:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef84:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef88:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef8c:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef90:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef94:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef98:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110ef9c:	8110f658 	cmpnei	r4,r16,17369
8110efa0:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efa4:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efa8:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efac:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efb0:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efb4:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efb8:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efbc:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efc0:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efc4:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efc8:	8110f690 	cmplti	r4,r16,17370
8110efcc:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efd0:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efd4:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efd8:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efdc:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efe0:	8110f6e8 	cmpgeui	r4,r16,17371
8110efe4:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efe8:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110efec:	8110f758 	cmpnei	r4,r16,17373
8110eff0:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110eff4:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110eff8:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110effc:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f000:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f004:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f008:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f00c:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f010:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f014:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f018:	8110f504 	addi	r4,r16,17364
8110f01c:	8110f530 	cmpltui	r4,r16,17364
8110f020:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f024:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f028:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f02c:	8110f868 	cmpgeui	r4,r16,17377
8110f030:	8110f530 	cmpltui	r4,r16,17364
8110f034:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f038:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f03c:	8110f3c4 	addi	r4,r16,17359
8110f040:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f044:	8110f3d4 	ori	r4,r16,17359
8110f048:	8110f410 	cmplti	r4,r16,17360
8110f04c:	8110f10c 	andi	r4,r16,17348
8110f050:	8110f3b8 	rdprs	r4,r16,17358
8110f054:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f058:	8110f794 	ori	r4,r16,17374
8110f05c:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f060:	8110f7ec 	andhi	r4,r16,17375
8110f064:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f068:	8110f8c0 	call	88110f8c <__reset+0x20f0f8c>
8110f06c:	8110f4b0 	cmpltui	r4,r16,17362
8110f070:	42000204 	addi	r8,r8,8
8110f074:	da802317 	ldw	r10,140(sp)
8110f078:	5455883a 	add	r10,r10,r17
8110f07c:	da802315 	stw	r10,140(sp)
8110f080:	003f8b06 	br	8110eeb0 <__reset+0xfb0eeeb0>
8110f084:	d9002017 	ldw	r4,128(sp)
8110f088:	a00b883a 	mov	r5,r20
8110f08c:	11058040 	call	81105804 <__swsetup_r>
8110f090:	1003b11e 	bne	r2,zero,8110ff58 <___vfiprintf_internal_r+0x11ec>
8110f094:	a080030b 	ldhu	r2,12(r20)
8110f098:	00c00284 	movi	r3,10
8110f09c:	1080068c 	andi	r2,r2,26
8110f0a0:	10ff541e 	bne	r2,r3,8110edf4 <__reset+0xfb0eedf4>
8110f0a4:	a080038f 	ldh	r2,14(r20)
8110f0a8:	103f5216 	blt	r2,zero,8110edf4 <__reset+0xfb0eedf4>
8110f0ac:	d9c02217 	ldw	r7,136(sp)
8110f0b0:	d9002017 	ldw	r4,128(sp)
8110f0b4:	e00d883a 	mov	r6,fp
8110f0b8:	a00b883a 	mov	r5,r20
8110f0bc:	11101e40 	call	811101e4 <__sbprintf>
8110f0c0:	dfc03617 	ldw	ra,216(sp)
8110f0c4:	df003517 	ldw	fp,212(sp)
8110f0c8:	ddc03417 	ldw	r23,208(sp)
8110f0cc:	dd803317 	ldw	r22,204(sp)
8110f0d0:	dd403217 	ldw	r21,200(sp)
8110f0d4:	dd003117 	ldw	r20,196(sp)
8110f0d8:	dcc03017 	ldw	r19,192(sp)
8110f0dc:	dc802f17 	ldw	r18,188(sp)
8110f0e0:	dc402e17 	ldw	r17,184(sp)
8110f0e4:	dc002d17 	ldw	r16,180(sp)
8110f0e8:	dec03704 	addi	sp,sp,220
8110f0ec:	f800283a 	ret
8110f0f0:	110782c0 	call	8110782c <__sinit>
8110f0f4:	003f2f06 	br	8110edb4 <__reset+0xfb0eedb4>
8110f0f8:	0463c83a 	sub	r17,zero,r17
8110f0fc:	d8802215 	stw	r2,136(sp)
8110f100:	a5000114 	ori	r20,r20,4
8110f104:	80c00007 	ldb	r3,0(r16)
8110f108:	003f7706 	br	8110eee8 <__reset+0xfb0eeee8>
8110f10c:	00800c04 	movi	r2,48
8110f110:	da802217 	ldw	r10,136(sp)
8110f114:	d8801d05 	stb	r2,116(sp)
8110f118:	00801e04 	movi	r2,120
8110f11c:	d8801d45 	stb	r2,117(sp)
8110f120:	d8001d85 	stb	zero,118(sp)
8110f124:	50c00104 	addi	r3,r10,4
8110f128:	54800017 	ldw	r18,0(r10)
8110f12c:	0027883a 	mov	r19,zero
8110f130:	a0800094 	ori	r2,r20,2
8110f134:	48030b16 	blt	r9,zero,8110fd64 <___vfiprintf_internal_r+0xff8>
8110f138:	00bfdfc4 	movi	r2,-129
8110f13c:	a096703a 	and	r11,r20,r2
8110f140:	d8c02215 	stw	r3,136(sp)
8110f144:	5d000094 	ori	r20,r11,2
8110f148:	90032b1e 	bne	r18,zero,8110fdf8 <___vfiprintf_internal_r+0x108c>
8110f14c:	00a044b4 	movhi	r2,33042
8110f150:	1091cb04 	addi	r2,r2,18220
8110f154:	d8802615 	stw	r2,152(sp)
8110f158:	0039883a 	mov	fp,zero
8110f15c:	48017b1e 	bne	r9,zero,8110f74c <___vfiprintf_internal_r+0x9e0>
8110f160:	0013883a 	mov	r9,zero
8110f164:	0027883a 	mov	r19,zero
8110f168:	dd401a04 	addi	r21,sp,104
8110f16c:	4825883a 	mov	r18,r9
8110f170:	4cc0010e 	bge	r9,r19,8110f178 <___vfiprintf_internal_r+0x40c>
8110f174:	9825883a 	mov	r18,r19
8110f178:	e7003fcc 	andi	fp,fp,255
8110f17c:	e700201c 	xori	fp,fp,128
8110f180:	e73fe004 	addi	fp,fp,-128
8110f184:	e0000126 	beq	fp,zero,8110f18c <___vfiprintf_internal_r+0x420>
8110f188:	94800044 	addi	r18,r18,1
8110f18c:	a380008c 	andi	r14,r20,2
8110f190:	70000126 	beq	r14,zero,8110f198 <___vfiprintf_internal_r+0x42c>
8110f194:	94800084 	addi	r18,r18,2
8110f198:	a700210c 	andi	fp,r20,132
8110f19c:	e001df1e 	bne	fp,zero,8110f91c <___vfiprintf_internal_r+0xbb0>
8110f1a0:	8c87c83a 	sub	r3,r17,r18
8110f1a4:	00c1dd0e 	bge	zero,r3,8110f91c <___vfiprintf_internal_r+0xbb0>
8110f1a8:	01c00404 	movi	r7,16
8110f1ac:	d8801c17 	ldw	r2,112(sp)
8110f1b0:	38c3ad0e 	bge	r7,r3,81110068 <___vfiprintf_internal_r+0x12fc>
8110f1b4:	02a044b4 	movhi	r10,33042
8110f1b8:	5292fa04 	addi	r10,r10,19432
8110f1bc:	dc002915 	stw	r16,164(sp)
8110f1c0:	d9801b17 	ldw	r6,108(sp)
8110f1c4:	da802415 	stw	r10,144(sp)
8110f1c8:	03c001c4 	movi	r15,7
8110f1cc:	da402515 	stw	r9,148(sp)
8110f1d0:	db802815 	stw	r14,160(sp)
8110f1d4:	1821883a 	mov	r16,r3
8110f1d8:	00000506 	br	8110f1f0 <___vfiprintf_internal_r+0x484>
8110f1dc:	31400084 	addi	r5,r6,2
8110f1e0:	42000204 	addi	r8,r8,8
8110f1e4:	200d883a 	mov	r6,r4
8110f1e8:	843ffc04 	addi	r16,r16,-16
8110f1ec:	3c000d0e 	bge	r7,r16,8110f224 <___vfiprintf_internal_r+0x4b8>
8110f1f0:	10800404 	addi	r2,r2,16
8110f1f4:	31000044 	addi	r4,r6,1
8110f1f8:	45800015 	stw	r22,0(r8)
8110f1fc:	41c00115 	stw	r7,4(r8)
8110f200:	d8801c15 	stw	r2,112(sp)
8110f204:	d9001b15 	stw	r4,108(sp)
8110f208:	793ff40e 	bge	r15,r4,8110f1dc <__reset+0xfb0ef1dc>
8110f20c:	1001b51e 	bne	r2,zero,8110f8e4 <___vfiprintf_internal_r+0xb78>
8110f210:	843ffc04 	addi	r16,r16,-16
8110f214:	000d883a 	mov	r6,zero
8110f218:	01400044 	movi	r5,1
8110f21c:	d811883a 	mov	r8,sp
8110f220:	3c3ff316 	blt	r7,r16,8110f1f0 <__reset+0xfb0ef1f0>
8110f224:	8007883a 	mov	r3,r16
8110f228:	da402517 	ldw	r9,148(sp)
8110f22c:	db802817 	ldw	r14,160(sp)
8110f230:	dc002917 	ldw	r16,164(sp)
8110f234:	da802417 	ldw	r10,144(sp)
8110f238:	1885883a 	add	r2,r3,r2
8110f23c:	40c00115 	stw	r3,4(r8)
8110f240:	42800015 	stw	r10,0(r8)
8110f244:	d8801c15 	stw	r2,112(sp)
8110f248:	d9401b15 	stw	r5,108(sp)
8110f24c:	00c001c4 	movi	r3,7
8110f250:	19426016 	blt	r3,r5,8110fbd4 <___vfiprintf_internal_r+0xe68>
8110f254:	d8c01d87 	ldb	r3,118(sp)
8110f258:	42000204 	addi	r8,r8,8
8110f25c:	29000044 	addi	r4,r5,1
8110f260:	1801b31e 	bne	r3,zero,8110f930 <___vfiprintf_internal_r+0xbc4>
8110f264:	7001c026 	beq	r14,zero,8110f968 <___vfiprintf_internal_r+0xbfc>
8110f268:	d8c01d04 	addi	r3,sp,116
8110f26c:	10800084 	addi	r2,r2,2
8110f270:	40c00015 	stw	r3,0(r8)
8110f274:	00c00084 	movi	r3,2
8110f278:	40c00115 	stw	r3,4(r8)
8110f27c:	d8801c15 	stw	r2,112(sp)
8110f280:	d9001b15 	stw	r4,108(sp)
8110f284:	00c001c4 	movi	r3,7
8110f288:	1902650e 	bge	r3,r4,8110fc20 <___vfiprintf_internal_r+0xeb4>
8110f28c:	10029a1e 	bne	r2,zero,8110fcf8 <___vfiprintf_internal_r+0xf8c>
8110f290:	00c02004 	movi	r3,128
8110f294:	01000044 	movi	r4,1
8110f298:	000b883a 	mov	r5,zero
8110f29c:	d811883a 	mov	r8,sp
8110f2a0:	e0c1b31e 	bne	fp,r3,8110f970 <___vfiprintf_internal_r+0xc04>
8110f2a4:	8cb9c83a 	sub	fp,r17,r18
8110f2a8:	0701b10e 	bge	zero,fp,8110f970 <___vfiprintf_internal_r+0xc04>
8110f2ac:	01c00404 	movi	r7,16
8110f2b0:	3f03890e 	bge	r7,fp,811100d8 <___vfiprintf_internal_r+0x136c>
8110f2b4:	00e044b4 	movhi	r3,33042
8110f2b8:	18d2f604 	addi	r3,r3,19416
8110f2bc:	d8c02415 	stw	r3,144(sp)
8110f2c0:	8007883a 	mov	r3,r16
8110f2c4:	034001c4 	movi	r13,7
8110f2c8:	e021883a 	mov	r16,fp
8110f2cc:	da402515 	stw	r9,148(sp)
8110f2d0:	1839883a 	mov	fp,r3
8110f2d4:	00000506 	br	8110f2ec <___vfiprintf_internal_r+0x580>
8110f2d8:	29800084 	addi	r6,r5,2
8110f2dc:	42000204 	addi	r8,r8,8
8110f2e0:	180b883a 	mov	r5,r3
8110f2e4:	843ffc04 	addi	r16,r16,-16
8110f2e8:	3c000d0e 	bge	r7,r16,8110f320 <___vfiprintf_internal_r+0x5b4>
8110f2ec:	10800404 	addi	r2,r2,16
8110f2f0:	28c00044 	addi	r3,r5,1
8110f2f4:	45c00015 	stw	r23,0(r8)
8110f2f8:	41c00115 	stw	r7,4(r8)
8110f2fc:	d8801c15 	stw	r2,112(sp)
8110f300:	d8c01b15 	stw	r3,108(sp)
8110f304:	68fff40e 	bge	r13,r3,8110f2d8 <__reset+0xfb0ef2d8>
8110f308:	1002241e 	bne	r2,zero,8110fb9c <___vfiprintf_internal_r+0xe30>
8110f30c:	843ffc04 	addi	r16,r16,-16
8110f310:	01800044 	movi	r6,1
8110f314:	000b883a 	mov	r5,zero
8110f318:	d811883a 	mov	r8,sp
8110f31c:	3c3ff316 	blt	r7,r16,8110f2ec <__reset+0xfb0ef2ec>
8110f320:	da402517 	ldw	r9,148(sp)
8110f324:	e007883a 	mov	r3,fp
8110f328:	8039883a 	mov	fp,r16
8110f32c:	1821883a 	mov	r16,r3
8110f330:	d8c02417 	ldw	r3,144(sp)
8110f334:	1705883a 	add	r2,r2,fp
8110f338:	47000115 	stw	fp,4(r8)
8110f33c:	40c00015 	stw	r3,0(r8)
8110f340:	d8801c15 	stw	r2,112(sp)
8110f344:	d9801b15 	stw	r6,108(sp)
8110f348:	00c001c4 	movi	r3,7
8110f34c:	19827616 	blt	r3,r6,8110fd28 <___vfiprintf_internal_r+0xfbc>
8110f350:	4cf9c83a 	sub	fp,r9,r19
8110f354:	42000204 	addi	r8,r8,8
8110f358:	31000044 	addi	r4,r6,1
8110f35c:	300b883a 	mov	r5,r6
8110f360:	07018516 	blt	zero,fp,8110f978 <___vfiprintf_internal_r+0xc0c>
8110f364:	9885883a 	add	r2,r19,r2
8110f368:	45400015 	stw	r21,0(r8)
8110f36c:	44c00115 	stw	r19,4(r8)
8110f370:	d8801c15 	stw	r2,112(sp)
8110f374:	d9001b15 	stw	r4,108(sp)
8110f378:	00c001c4 	movi	r3,7
8110f37c:	1901dd0e 	bge	r3,r4,8110faf4 <___vfiprintf_internal_r+0xd88>
8110f380:	1002401e 	bne	r2,zero,8110fc84 <___vfiprintf_internal_r+0xf18>
8110f384:	d8001b15 	stw	zero,108(sp)
8110f388:	a2c0010c 	andi	r11,r20,4
8110f38c:	58000226 	beq	r11,zero,8110f398 <___vfiprintf_internal_r+0x62c>
8110f390:	8ca7c83a 	sub	r19,r17,r18
8110f394:	04c2f216 	blt	zero,r19,8110ff60 <___vfiprintf_internal_r+0x11f4>
8110f398:	8c80010e 	bge	r17,r18,8110f3a0 <___vfiprintf_internal_r+0x634>
8110f39c:	9023883a 	mov	r17,r18
8110f3a0:	da802317 	ldw	r10,140(sp)
8110f3a4:	5455883a 	add	r10,r10,r17
8110f3a8:	da802315 	stw	r10,140(sp)
8110f3ac:	d8001b15 	stw	zero,108(sp)
8110f3b0:	d811883a 	mov	r8,sp
8110f3b4:	003ea206 	br	8110ee40 <__reset+0xfb0eee40>
8110f3b8:	a5000814 	ori	r20,r20,32
8110f3bc:	80c00007 	ldb	r3,0(r16)
8110f3c0:	003ec906 	br	8110eee8 <__reset+0xfb0eeee8>
8110f3c4:	80c00007 	ldb	r3,0(r16)
8110f3c8:	1b030926 	beq	r3,r12,8110fff0 <___vfiprintf_internal_r+0x1284>
8110f3cc:	a5000414 	ori	r20,r20,16
8110f3d0:	003ec506 	br	8110eee8 <__reset+0xfb0eeee8>
8110f3d4:	21003fcc 	andi	r4,r4,255
8110f3d8:	20035e1e 	bne	r4,zero,81110154 <___vfiprintf_internal_r+0x13e8>
8110f3dc:	a080080c 	andi	r2,r20,32
8110f3e0:	1002a526 	beq	r2,zero,8110fe78 <___vfiprintf_internal_r+0x110c>
8110f3e4:	da802217 	ldw	r10,136(sp)
8110f3e8:	50800017 	ldw	r2,0(r10)
8110f3ec:	da802317 	ldw	r10,140(sp)
8110f3f0:	5007d7fa 	srai	r3,r10,31
8110f3f4:	da802217 	ldw	r10,136(sp)
8110f3f8:	10c00115 	stw	r3,4(r2)
8110f3fc:	52800104 	addi	r10,r10,4
8110f400:	da802215 	stw	r10,136(sp)
8110f404:	da802317 	ldw	r10,140(sp)
8110f408:	12800015 	stw	r10,0(r2)
8110f40c:	003e8c06 	br	8110ee40 <__reset+0xfb0eee40>
8110f410:	21003fcc 	andi	r4,r4,255
8110f414:	2003511e 	bne	r4,zero,8111015c <___vfiprintf_internal_r+0x13f0>
8110f418:	a080080c 	andi	r2,r20,32
8110f41c:	1000a126 	beq	r2,zero,8110f6a4 <___vfiprintf_internal_r+0x938>
8110f420:	da802217 	ldw	r10,136(sp)
8110f424:	d8001d85 	stb	zero,118(sp)
8110f428:	50800204 	addi	r2,r10,8
8110f42c:	54800017 	ldw	r18,0(r10)
8110f430:	54c00117 	ldw	r19,4(r10)
8110f434:	4802b416 	blt	r9,zero,8110ff08 <___vfiprintf_internal_r+0x119c>
8110f438:	013fdfc4 	movi	r4,-129
8110f43c:	94c6b03a 	or	r3,r18,r19
8110f440:	d8802215 	stw	r2,136(sp)
8110f444:	a128703a 	and	r20,r20,r4
8110f448:	1800a226 	beq	r3,zero,8110f6d4 <___vfiprintf_internal_r+0x968>
8110f44c:	0039883a 	mov	fp,zero
8110f450:	dd401a04 	addi	r21,sp,104
8110f454:	9006d0fa 	srli	r3,r18,3
8110f458:	9808977a 	slli	r4,r19,29
8110f45c:	9826d0fa 	srli	r19,r19,3
8110f460:	948001cc 	andi	r18,r18,7
8110f464:	90800c04 	addi	r2,r18,48
8110f468:	ad7fffc4 	addi	r21,r21,-1
8110f46c:	20e4b03a 	or	r18,r4,r3
8110f470:	a8800005 	stb	r2,0(r21)
8110f474:	94c6b03a 	or	r3,r18,r19
8110f478:	183ff61e 	bne	r3,zero,8110f454 <__reset+0xfb0ef454>
8110f47c:	a0c0004c 	andi	r3,r20,1
8110f480:	18005926 	beq	r3,zero,8110f5e8 <___vfiprintf_internal_r+0x87c>
8110f484:	10803fcc 	andi	r2,r2,255
8110f488:	1080201c 	xori	r2,r2,128
8110f48c:	10bfe004 	addi	r2,r2,-128
8110f490:	00c00c04 	movi	r3,48
8110f494:	10c05426 	beq	r2,r3,8110f5e8 <___vfiprintf_internal_r+0x87c>
8110f498:	da801e17 	ldw	r10,120(sp)
8110f49c:	a8bfffc4 	addi	r2,r21,-1
8110f4a0:	a8ffffc5 	stb	r3,-1(r21)
8110f4a4:	50a7c83a 	sub	r19,r10,r2
8110f4a8:	102b883a 	mov	r21,r2
8110f4ac:	003f2f06 	br	8110f16c <__reset+0xfb0ef16c>
8110f4b0:	21003fcc 	andi	r4,r4,255
8110f4b4:	2003421e 	bne	r4,zero,811101c0 <___vfiprintf_internal_r+0x1454>
8110f4b8:	00a044b4 	movhi	r2,33042
8110f4bc:	1091cb04 	addi	r2,r2,18220
8110f4c0:	d8802615 	stw	r2,152(sp)
8110f4c4:	a080080c 	andi	r2,r20,32
8110f4c8:	1000aa26 	beq	r2,zero,8110f774 <___vfiprintf_internal_r+0xa08>
8110f4cc:	da802217 	ldw	r10,136(sp)
8110f4d0:	54800017 	ldw	r18,0(r10)
8110f4d4:	54c00117 	ldw	r19,4(r10)
8110f4d8:	52800204 	addi	r10,r10,8
8110f4dc:	da802215 	stw	r10,136(sp)
8110f4e0:	a080004c 	andi	r2,r20,1
8110f4e4:	1001d226 	beq	r2,zero,8110fc30 <___vfiprintf_internal_r+0xec4>
8110f4e8:	94c4b03a 	or	r2,r18,r19
8110f4ec:	1002351e 	bne	r2,zero,8110fdc4 <___vfiprintf_internal_r+0x1058>
8110f4f0:	d8001d85 	stb	zero,118(sp)
8110f4f4:	48022216 	blt	r9,zero,8110fd80 <___vfiprintf_internal_r+0x1014>
8110f4f8:	00bfdfc4 	movi	r2,-129
8110f4fc:	a0a8703a 	and	r20,r20,r2
8110f500:	003f1506 	br	8110f158 <__reset+0xfb0ef158>
8110f504:	da802217 	ldw	r10,136(sp)
8110f508:	04800044 	movi	r18,1
8110f50c:	d8001d85 	stb	zero,118(sp)
8110f510:	50800017 	ldw	r2,0(r10)
8110f514:	52800104 	addi	r10,r10,4
8110f518:	da802215 	stw	r10,136(sp)
8110f51c:	d8801005 	stb	r2,64(sp)
8110f520:	9027883a 	mov	r19,r18
8110f524:	dd401004 	addi	r21,sp,64
8110f528:	0013883a 	mov	r9,zero
8110f52c:	003f1706 	br	8110f18c <__reset+0xfb0ef18c>
8110f530:	21003fcc 	andi	r4,r4,255
8110f534:	2003201e 	bne	r4,zero,811101b8 <___vfiprintf_internal_r+0x144c>
8110f538:	a080080c 	andi	r2,r20,32
8110f53c:	10004b26 	beq	r2,zero,8110f66c <___vfiprintf_internal_r+0x900>
8110f540:	da802217 	ldw	r10,136(sp)
8110f544:	50800117 	ldw	r2,4(r10)
8110f548:	54800017 	ldw	r18,0(r10)
8110f54c:	52800204 	addi	r10,r10,8
8110f550:	da802215 	stw	r10,136(sp)
8110f554:	1027883a 	mov	r19,r2
8110f558:	10022c16 	blt	r2,zero,8110fe0c <___vfiprintf_internal_r+0x10a0>
8110f55c:	df001d83 	ldbu	fp,118(sp)
8110f560:	48007216 	blt	r9,zero,8110f72c <___vfiprintf_internal_r+0x9c0>
8110f564:	00ffdfc4 	movi	r3,-129
8110f568:	94c4b03a 	or	r2,r18,r19
8110f56c:	a0e8703a 	and	r20,r20,r3
8110f570:	1000cc26 	beq	r2,zero,8110f8a4 <___vfiprintf_internal_r+0xb38>
8110f574:	98021026 	beq	r19,zero,8110fdb8 <___vfiprintf_internal_r+0x104c>
8110f578:	dc402415 	stw	r17,144(sp)
8110f57c:	dc002515 	stw	r16,148(sp)
8110f580:	9823883a 	mov	r17,r19
8110f584:	9021883a 	mov	r16,r18
8110f588:	dd401a04 	addi	r21,sp,104
8110f58c:	4825883a 	mov	r18,r9
8110f590:	4027883a 	mov	r19,r8
8110f594:	8009883a 	mov	r4,r16
8110f598:	880b883a 	mov	r5,r17
8110f59c:	01800284 	movi	r6,10
8110f5a0:	000f883a 	mov	r7,zero
8110f5a4:	11130040 	call	81113004 <__umoddi3>
8110f5a8:	10800c04 	addi	r2,r2,48
8110f5ac:	ad7fffc4 	addi	r21,r21,-1
8110f5b0:	8009883a 	mov	r4,r16
8110f5b4:	880b883a 	mov	r5,r17
8110f5b8:	a8800005 	stb	r2,0(r21)
8110f5bc:	01800284 	movi	r6,10
8110f5c0:	000f883a 	mov	r7,zero
8110f5c4:	1112a8c0 	call	81112a8c <__udivdi3>
8110f5c8:	1021883a 	mov	r16,r2
8110f5cc:	10c4b03a 	or	r2,r2,r3
8110f5d0:	1823883a 	mov	r17,r3
8110f5d4:	103fef1e 	bne	r2,zero,8110f594 <__reset+0xfb0ef594>
8110f5d8:	dc402417 	ldw	r17,144(sp)
8110f5dc:	dc002517 	ldw	r16,148(sp)
8110f5e0:	9013883a 	mov	r9,r18
8110f5e4:	9811883a 	mov	r8,r19
8110f5e8:	da801e17 	ldw	r10,120(sp)
8110f5ec:	5567c83a 	sub	r19,r10,r21
8110f5f0:	003ede06 	br	8110f16c <__reset+0xfb0ef16c>
8110f5f4:	38803fcc 	andi	r2,r7,255
8110f5f8:	1080201c 	xori	r2,r2,128
8110f5fc:	10bfe004 	addi	r2,r2,-128
8110f600:	1002371e 	bne	r2,zero,8110fee0 <___vfiprintf_internal_r+0x1174>
8110f604:	01000044 	movi	r4,1
8110f608:	01c00804 	movi	r7,32
8110f60c:	80c00007 	ldb	r3,0(r16)
8110f610:	003e3506 	br	8110eee8 <__reset+0xfb0eeee8>
8110f614:	a5000054 	ori	r20,r20,1
8110f618:	80c00007 	ldb	r3,0(r16)
8110f61c:	003e3206 	br	8110eee8 <__reset+0xfb0eeee8>
8110f620:	a5002014 	ori	r20,r20,128
8110f624:	80c00007 	ldb	r3,0(r16)
8110f628:	003e2f06 	br	8110eee8 <__reset+0xfb0eeee8>
8110f62c:	8015883a 	mov	r10,r16
8110f630:	0023883a 	mov	r17,zero
8110f634:	18bff404 	addi	r2,r3,-48
8110f638:	50c00007 	ldb	r3,0(r10)
8110f63c:	8c4002a4 	muli	r17,r17,10
8110f640:	84000044 	addi	r16,r16,1
8110f644:	8015883a 	mov	r10,r16
8110f648:	1463883a 	add	r17,r2,r17
8110f64c:	18bff404 	addi	r2,r3,-48
8110f650:	30bff92e 	bgeu	r6,r2,8110f638 <__reset+0xfb0ef638>
8110f654:	003e2506 	br	8110eeec <__reset+0xfb0eeeec>
8110f658:	21003fcc 	andi	r4,r4,255
8110f65c:	2002d41e 	bne	r4,zero,811101b0 <___vfiprintf_internal_r+0x1444>
8110f660:	a5000414 	ori	r20,r20,16
8110f664:	a080080c 	andi	r2,r20,32
8110f668:	103fb51e 	bne	r2,zero,8110f540 <__reset+0xfb0ef540>
8110f66c:	a080040c 	andi	r2,r20,16
8110f670:	1001f826 	beq	r2,zero,8110fe54 <___vfiprintf_internal_r+0x10e8>
8110f674:	da802217 	ldw	r10,136(sp)
8110f678:	54800017 	ldw	r18,0(r10)
8110f67c:	52800104 	addi	r10,r10,4
8110f680:	da802215 	stw	r10,136(sp)
8110f684:	9027d7fa 	srai	r19,r18,31
8110f688:	9805883a 	mov	r2,r19
8110f68c:	003fb206 	br	8110f558 <__reset+0xfb0ef558>
8110f690:	21003fcc 	andi	r4,r4,255
8110f694:	2002c41e 	bne	r4,zero,811101a8 <___vfiprintf_internal_r+0x143c>
8110f698:	a5000414 	ori	r20,r20,16
8110f69c:	a080080c 	andi	r2,r20,32
8110f6a0:	103f5f1e 	bne	r2,zero,8110f420 <__reset+0xfb0ef420>
8110f6a4:	a080040c 	andi	r2,r20,16
8110f6a8:	10020f26 	beq	r2,zero,8110fee8 <___vfiprintf_internal_r+0x117c>
8110f6ac:	da802217 	ldw	r10,136(sp)
8110f6b0:	d8001d85 	stb	zero,118(sp)
8110f6b4:	0027883a 	mov	r19,zero
8110f6b8:	50800104 	addi	r2,r10,4
8110f6bc:	54800017 	ldw	r18,0(r10)
8110f6c0:	48021116 	blt	r9,zero,8110ff08 <___vfiprintf_internal_r+0x119c>
8110f6c4:	00ffdfc4 	movi	r3,-129
8110f6c8:	d8802215 	stw	r2,136(sp)
8110f6cc:	a0e8703a 	and	r20,r20,r3
8110f6d0:	903f5e1e 	bne	r18,zero,8110f44c <__reset+0xfb0ef44c>
8110f6d4:	0039883a 	mov	fp,zero
8110f6d8:	4802a626 	beq	r9,zero,81110174 <___vfiprintf_internal_r+0x1408>
8110f6dc:	0025883a 	mov	r18,zero
8110f6e0:	0027883a 	mov	r19,zero
8110f6e4:	003f5a06 	br	8110f450 <__reset+0xfb0ef450>
8110f6e8:	21003fcc 	andi	r4,r4,255
8110f6ec:	20029f1e 	bne	r4,zero,8111016c <___vfiprintf_internal_r+0x1400>
8110f6f0:	a5000414 	ori	r20,r20,16
8110f6f4:	a080080c 	andi	r2,r20,32
8110f6f8:	10005e1e 	bne	r2,zero,8110f874 <___vfiprintf_internal_r+0xb08>
8110f6fc:	a080040c 	andi	r2,r20,16
8110f700:	1001a21e 	bne	r2,zero,8110fd8c <___vfiprintf_internal_r+0x1020>
8110f704:	a080100c 	andi	r2,r20,64
8110f708:	d8001d85 	stb	zero,118(sp)
8110f70c:	da802217 	ldw	r10,136(sp)
8110f710:	1002231e 	bne	r2,zero,8110ffa0 <___vfiprintf_internal_r+0x1234>
8110f714:	50800104 	addi	r2,r10,4
8110f718:	54800017 	ldw	r18,0(r10)
8110f71c:	0027883a 	mov	r19,zero
8110f720:	4801a00e 	bge	r9,zero,8110fda4 <___vfiprintf_internal_r+0x1038>
8110f724:	d8802215 	stw	r2,136(sp)
8110f728:	0039883a 	mov	fp,zero
8110f72c:	94c4b03a 	or	r2,r18,r19
8110f730:	103f901e 	bne	r2,zero,8110f574 <__reset+0xfb0ef574>
8110f734:	00800044 	movi	r2,1
8110f738:	10803fcc 	andi	r2,r2,255
8110f73c:	00c00044 	movi	r3,1
8110f740:	10c05926 	beq	r2,r3,8110f8a8 <___vfiprintf_internal_r+0xb3c>
8110f744:	00c00084 	movi	r3,2
8110f748:	10ffe41e 	bne	r2,r3,8110f6dc <__reset+0xfb0ef6dc>
8110f74c:	0025883a 	mov	r18,zero
8110f750:	0027883a 	mov	r19,zero
8110f754:	00013d06 	br	8110fc4c <___vfiprintf_internal_r+0xee0>
8110f758:	21003fcc 	andi	r4,r4,255
8110f75c:	2002811e 	bne	r4,zero,81110164 <___vfiprintf_internal_r+0x13f8>
8110f760:	00a044b4 	movhi	r2,33042
8110f764:	1091c604 	addi	r2,r2,18200
8110f768:	d8802615 	stw	r2,152(sp)
8110f76c:	a080080c 	andi	r2,r20,32
8110f770:	103f561e 	bne	r2,zero,8110f4cc <__reset+0xfb0ef4cc>
8110f774:	a080040c 	andi	r2,r20,16
8110f778:	1001d126 	beq	r2,zero,8110fec0 <___vfiprintf_internal_r+0x1154>
8110f77c:	da802217 	ldw	r10,136(sp)
8110f780:	0027883a 	mov	r19,zero
8110f784:	54800017 	ldw	r18,0(r10)
8110f788:	52800104 	addi	r10,r10,4
8110f78c:	da802215 	stw	r10,136(sp)
8110f790:	003f5306 	br	8110f4e0 <__reset+0xfb0ef4e0>
8110f794:	da802217 	ldw	r10,136(sp)
8110f798:	d8001d85 	stb	zero,118(sp)
8110f79c:	55400017 	ldw	r21,0(r10)
8110f7a0:	50c00104 	addi	r3,r10,4
8110f7a4:	a8024226 	beq	r21,zero,811100b0 <___vfiprintf_internal_r+0x1344>
8110f7a8:	48021816 	blt	r9,zero,8111000c <___vfiprintf_internal_r+0x12a0>
8110f7ac:	480d883a 	mov	r6,r9
8110f7b0:	000b883a 	mov	r5,zero
8110f7b4:	a809883a 	mov	r4,r21
8110f7b8:	d8c02a15 	stw	r3,168(sp)
8110f7bc:	da002b15 	stw	r8,172(sp)
8110f7c0:	da402c15 	stw	r9,176(sp)
8110f7c4:	11089e40 	call	811089e4 <memchr>
8110f7c8:	d8c02a17 	ldw	r3,168(sp)
8110f7cc:	da002b17 	ldw	r8,172(sp)
8110f7d0:	da402c17 	ldw	r9,176(sp)
8110f7d4:	10024826 	beq	r2,zero,811100f8 <___vfiprintf_internal_r+0x138c>
8110f7d8:	1567c83a 	sub	r19,r2,r21
8110f7dc:	df001d83 	ldbu	fp,118(sp)
8110f7e0:	d8c02215 	stw	r3,136(sp)
8110f7e4:	0013883a 	mov	r9,zero
8110f7e8:	003e6006 	br	8110f16c <__reset+0xfb0ef16c>
8110f7ec:	21003fcc 	andi	r4,r4,255
8110f7f0:	203fc026 	beq	r4,zero,8110f6f4 <__reset+0xfb0ef6f4>
8110f7f4:	d9c01d85 	stb	r7,118(sp)
8110f7f8:	003fbe06 	br	8110f6f4 <__reset+0xfb0ef6f4>
8110f7fc:	da802217 	ldw	r10,136(sp)
8110f800:	54400017 	ldw	r17,0(r10)
8110f804:	50800104 	addi	r2,r10,4
8110f808:	883e3b16 	blt	r17,zero,8110f0f8 <__reset+0xfb0ef0f8>
8110f80c:	d8802215 	stw	r2,136(sp)
8110f810:	80c00007 	ldb	r3,0(r16)
8110f814:	003db406 	br	8110eee8 <__reset+0xfb0eeee8>
8110f818:	01000044 	movi	r4,1
8110f81c:	01c00ac4 	movi	r7,43
8110f820:	80c00007 	ldb	r3,0(r16)
8110f824:	003db006 	br	8110eee8 <__reset+0xfb0eeee8>
8110f828:	80c00007 	ldb	r3,0(r16)
8110f82c:	82800044 	addi	r10,r16,1
8110f830:	1b423c26 	beq	r3,r13,81110124 <___vfiprintf_internal_r+0x13b8>
8110f834:	18bff404 	addi	r2,r3,-48
8110f838:	0013883a 	mov	r9,zero
8110f83c:	30822b36 	bltu	r6,r2,811100ec <___vfiprintf_internal_r+0x1380>
8110f840:	50c00007 	ldb	r3,0(r10)
8110f844:	4a4002a4 	muli	r9,r9,10
8110f848:	54000044 	addi	r16,r10,1
8110f84c:	8015883a 	mov	r10,r16
8110f850:	4893883a 	add	r9,r9,r2
8110f854:	18bff404 	addi	r2,r3,-48
8110f858:	30bff92e 	bgeu	r6,r2,8110f840 <__reset+0xfb0ef840>
8110f85c:	483da30e 	bge	r9,zero,8110eeec <__reset+0xfb0eeeec>
8110f860:	027fffc4 	movi	r9,-1
8110f864:	003da106 	br	8110eeec <__reset+0xfb0eeeec>
8110f868:	a5001014 	ori	r20,r20,64
8110f86c:	80c00007 	ldb	r3,0(r16)
8110f870:	003d9d06 	br	8110eee8 <__reset+0xfb0eeee8>
8110f874:	da802217 	ldw	r10,136(sp)
8110f878:	d8001d85 	stb	zero,118(sp)
8110f87c:	50c00204 	addi	r3,r10,8
8110f880:	54800017 	ldw	r18,0(r10)
8110f884:	54c00117 	ldw	r19,4(r10)
8110f888:	4801ca16 	blt	r9,zero,8110ffb4 <___vfiprintf_internal_r+0x1248>
8110f88c:	013fdfc4 	movi	r4,-129
8110f890:	94c4b03a 	or	r2,r18,r19
8110f894:	d8c02215 	stw	r3,136(sp)
8110f898:	a128703a 	and	r20,r20,r4
8110f89c:	0039883a 	mov	fp,zero
8110f8a0:	103f341e 	bne	r2,zero,8110f574 <__reset+0xfb0ef574>
8110f8a4:	483e2e26 	beq	r9,zero,8110f160 <__reset+0xfb0ef160>
8110f8a8:	0025883a 	mov	r18,zero
8110f8ac:	94800c04 	addi	r18,r18,48
8110f8b0:	dc8019c5 	stb	r18,103(sp)
8110f8b4:	dcc02717 	ldw	r19,156(sp)
8110f8b8:	dd4019c4 	addi	r21,sp,103
8110f8bc:	003e2b06 	br	8110f16c <__reset+0xfb0ef16c>
8110f8c0:	21003fcc 	andi	r4,r4,255
8110f8c4:	2002361e 	bne	r4,zero,811101a0 <___vfiprintf_internal_r+0x1434>
8110f8c8:	1801c126 	beq	r3,zero,8110ffd0 <___vfiprintf_internal_r+0x1264>
8110f8cc:	04800044 	movi	r18,1
8110f8d0:	d8c01005 	stb	r3,64(sp)
8110f8d4:	d8001d85 	stb	zero,118(sp)
8110f8d8:	9027883a 	mov	r19,r18
8110f8dc:	dd401004 	addi	r21,sp,64
8110f8e0:	003f1106 	br	8110f528 <__reset+0xfb0ef528>
8110f8e4:	d9402117 	ldw	r5,132(sp)
8110f8e8:	d9002017 	ldw	r4,128(sp)
8110f8ec:	d9801a04 	addi	r6,sp,104
8110f8f0:	d9c02b15 	stw	r7,172(sp)
8110f8f4:	dbc02a15 	stw	r15,168(sp)
8110f8f8:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110f8fc:	d9c02b17 	ldw	r7,172(sp)
8110f900:	dbc02a17 	ldw	r15,168(sp)
8110f904:	10006d1e 	bne	r2,zero,8110fabc <___vfiprintf_internal_r+0xd50>
8110f908:	d9801b17 	ldw	r6,108(sp)
8110f90c:	d8801c17 	ldw	r2,112(sp)
8110f910:	d811883a 	mov	r8,sp
8110f914:	31400044 	addi	r5,r6,1
8110f918:	003e3306 	br	8110f1e8 <__reset+0xfb0ef1e8>
8110f91c:	d9401b17 	ldw	r5,108(sp)
8110f920:	d8801c17 	ldw	r2,112(sp)
8110f924:	29000044 	addi	r4,r5,1
8110f928:	d8c01d87 	ldb	r3,118(sp)
8110f92c:	183e4d26 	beq	r3,zero,8110f264 <__reset+0xfb0ef264>
8110f930:	00c00044 	movi	r3,1
8110f934:	d9401d84 	addi	r5,sp,118
8110f938:	10c5883a 	add	r2,r2,r3
8110f93c:	41400015 	stw	r5,0(r8)
8110f940:	40c00115 	stw	r3,4(r8)
8110f944:	d8801c15 	stw	r2,112(sp)
8110f948:	d9001b15 	stw	r4,108(sp)
8110f94c:	014001c4 	movi	r5,7
8110f950:	2900a90e 	bge	r5,r4,8110fbf8 <___vfiprintf_internal_r+0xe8c>
8110f954:	1000da1e 	bne	r2,zero,8110fcc0 <___vfiprintf_internal_r+0xf54>
8110f958:	7000ab1e 	bne	r14,zero,8110fc08 <___vfiprintf_internal_r+0xe9c>
8110f95c:	000b883a 	mov	r5,zero
8110f960:	1809883a 	mov	r4,r3
8110f964:	d811883a 	mov	r8,sp
8110f968:	00c02004 	movi	r3,128
8110f96c:	e0fe4d26 	beq	fp,r3,8110f2a4 <__reset+0xfb0ef2a4>
8110f970:	4cf9c83a 	sub	fp,r9,r19
8110f974:	073e7b0e 	bge	zero,fp,8110f364 <__reset+0xfb0ef364>
8110f978:	01c00404 	movi	r7,16
8110f97c:	3f01900e 	bge	r7,fp,8110ffc0 <___vfiprintf_internal_r+0x1254>
8110f980:	00e044b4 	movhi	r3,33042
8110f984:	18d2f604 	addi	r3,r3,19416
8110f988:	d8c02415 	stw	r3,144(sp)
8110f98c:	034001c4 	movi	r13,7
8110f990:	00000506 	br	8110f9a8 <___vfiprintf_internal_r+0xc3c>
8110f994:	29000084 	addi	r4,r5,2
8110f998:	42000204 	addi	r8,r8,8
8110f99c:	180b883a 	mov	r5,r3
8110f9a0:	e73ffc04 	addi	fp,fp,-16
8110f9a4:	3f000d0e 	bge	r7,fp,8110f9dc <___vfiprintf_internal_r+0xc70>
8110f9a8:	10800404 	addi	r2,r2,16
8110f9ac:	28c00044 	addi	r3,r5,1
8110f9b0:	45c00015 	stw	r23,0(r8)
8110f9b4:	41c00115 	stw	r7,4(r8)
8110f9b8:	d8801c15 	stw	r2,112(sp)
8110f9bc:	d8c01b15 	stw	r3,108(sp)
8110f9c0:	68fff40e 	bge	r13,r3,8110f994 <__reset+0xfb0ef994>
8110f9c4:	1000101e 	bne	r2,zero,8110fa08 <___vfiprintf_internal_r+0xc9c>
8110f9c8:	e73ffc04 	addi	fp,fp,-16
8110f9cc:	01000044 	movi	r4,1
8110f9d0:	000b883a 	mov	r5,zero
8110f9d4:	d811883a 	mov	r8,sp
8110f9d8:	3f3ff316 	blt	r7,fp,8110f9a8 <__reset+0xfb0ef9a8>
8110f9dc:	da802417 	ldw	r10,144(sp)
8110f9e0:	1705883a 	add	r2,r2,fp
8110f9e4:	47000115 	stw	fp,4(r8)
8110f9e8:	42800015 	stw	r10,0(r8)
8110f9ec:	d8801c15 	stw	r2,112(sp)
8110f9f0:	d9001b15 	stw	r4,108(sp)
8110f9f4:	00c001c4 	movi	r3,7
8110f9f8:	19003616 	blt	r3,r4,8110fad4 <___vfiprintf_internal_r+0xd68>
8110f9fc:	42000204 	addi	r8,r8,8
8110fa00:	21000044 	addi	r4,r4,1
8110fa04:	003e5706 	br	8110f364 <__reset+0xfb0ef364>
8110fa08:	d9402117 	ldw	r5,132(sp)
8110fa0c:	d9002017 	ldw	r4,128(sp)
8110fa10:	d9801a04 	addi	r6,sp,104
8110fa14:	d9c02b15 	stw	r7,172(sp)
8110fa18:	db402a15 	stw	r13,168(sp)
8110fa1c:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110fa20:	d9c02b17 	ldw	r7,172(sp)
8110fa24:	db402a17 	ldw	r13,168(sp)
8110fa28:	1000241e 	bne	r2,zero,8110fabc <___vfiprintf_internal_r+0xd50>
8110fa2c:	d9401b17 	ldw	r5,108(sp)
8110fa30:	d8801c17 	ldw	r2,112(sp)
8110fa34:	d811883a 	mov	r8,sp
8110fa38:	29000044 	addi	r4,r5,1
8110fa3c:	003fd806 	br	8110f9a0 <__reset+0xfb0ef9a0>
8110fa40:	d9401b17 	ldw	r5,108(sp)
8110fa44:	00e044b4 	movhi	r3,33042
8110fa48:	18d2fa04 	addi	r3,r3,19432
8110fa4c:	d8c02415 	stw	r3,144(sp)
8110fa50:	29400044 	addi	r5,r5,1
8110fa54:	d8c02417 	ldw	r3,144(sp)
8110fa58:	14c5883a 	add	r2,r2,r19
8110fa5c:	44c00115 	stw	r19,4(r8)
8110fa60:	40c00015 	stw	r3,0(r8)
8110fa64:	d8801c15 	stw	r2,112(sp)
8110fa68:	d9401b15 	stw	r5,108(sp)
8110fa6c:	00c001c4 	movi	r3,7
8110fa70:	1940070e 	bge	r3,r5,8110fa90 <___vfiprintf_internal_r+0xd24>
8110fa74:	103e4826 	beq	r2,zero,8110f398 <__reset+0xfb0ef398>
8110fa78:	d9402117 	ldw	r5,132(sp)
8110fa7c:	d9002017 	ldw	r4,128(sp)
8110fa80:	d9801a04 	addi	r6,sp,104
8110fa84:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110fa88:	10000c1e 	bne	r2,zero,8110fabc <___vfiprintf_internal_r+0xd50>
8110fa8c:	d8801c17 	ldw	r2,112(sp)
8110fa90:	8c80010e 	bge	r17,r18,8110fa98 <___vfiprintf_internal_r+0xd2c>
8110fa94:	9023883a 	mov	r17,r18
8110fa98:	da802317 	ldw	r10,140(sp)
8110fa9c:	5455883a 	add	r10,r10,r17
8110faa0:	da802315 	stw	r10,140(sp)
8110faa4:	103e4126 	beq	r2,zero,8110f3ac <__reset+0xfb0ef3ac>
8110faa8:	d9402117 	ldw	r5,132(sp)
8110faac:	d9002017 	ldw	r4,128(sp)
8110fab0:	d9801a04 	addi	r6,sp,104
8110fab4:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110fab8:	103e3c26 	beq	r2,zero,8110f3ac <__reset+0xfb0ef3ac>
8110fabc:	dd002117 	ldw	r20,132(sp)
8110fac0:	a080030b 	ldhu	r2,12(r20)
8110fac4:	1080100c 	andi	r2,r2,64
8110fac8:	1001231e 	bne	r2,zero,8110ff58 <___vfiprintf_internal_r+0x11ec>
8110facc:	d8802317 	ldw	r2,140(sp)
8110fad0:	003d7b06 	br	8110f0c0 <__reset+0xfb0ef0c0>
8110fad4:	1000991e 	bne	r2,zero,8110fd3c <___vfiprintf_internal_r+0xfd0>
8110fad8:	00c00044 	movi	r3,1
8110fadc:	9805883a 	mov	r2,r19
8110fae0:	dd400015 	stw	r21,0(sp)
8110fae4:	dcc00115 	stw	r19,4(sp)
8110fae8:	dcc01c15 	stw	r19,112(sp)
8110faec:	d8c01b15 	stw	r3,108(sp)
8110faf0:	d811883a 	mov	r8,sp
8110faf4:	42000204 	addi	r8,r8,8
8110faf8:	a2c0010c 	andi	r11,r20,4
8110fafc:	583fe426 	beq	r11,zero,8110fa90 <__reset+0xfb0efa90>
8110fb00:	8ca7c83a 	sub	r19,r17,r18
8110fb04:	04ffe20e 	bge	zero,r19,8110fa90 <__reset+0xfb0efa90>
8110fb08:	01c00404 	movi	r7,16
8110fb0c:	3cffcc0e 	bge	r7,r19,8110fa40 <__reset+0xfb0efa40>
8110fb10:	02a044b4 	movhi	r10,33042
8110fb14:	5292fa04 	addi	r10,r10,19432
8110fb18:	d9001b17 	ldw	r4,108(sp)
8110fb1c:	da802415 	stw	r10,144(sp)
8110fb20:	382b883a 	mov	r21,r7
8110fb24:	050001c4 	movi	r20,7
8110fb28:	df002017 	ldw	fp,128(sp)
8110fb2c:	00000506 	br	8110fb44 <___vfiprintf_internal_r+0xdd8>
8110fb30:	21400084 	addi	r5,r4,2
8110fb34:	42000204 	addi	r8,r8,8
8110fb38:	1809883a 	mov	r4,r3
8110fb3c:	9cfffc04 	addi	r19,r19,-16
8110fb40:	acffc40e 	bge	r21,r19,8110fa54 <__reset+0xfb0efa54>
8110fb44:	10800404 	addi	r2,r2,16
8110fb48:	20c00044 	addi	r3,r4,1
8110fb4c:	45800015 	stw	r22,0(r8)
8110fb50:	45400115 	stw	r21,4(r8)
8110fb54:	d8801c15 	stw	r2,112(sp)
8110fb58:	d8c01b15 	stw	r3,108(sp)
8110fb5c:	a0fff40e 	bge	r20,r3,8110fb30 <__reset+0xfb0efb30>
8110fb60:	1000041e 	bne	r2,zero,8110fb74 <___vfiprintf_internal_r+0xe08>
8110fb64:	01400044 	movi	r5,1
8110fb68:	0009883a 	mov	r4,zero
8110fb6c:	d811883a 	mov	r8,sp
8110fb70:	003ff206 	br	8110fb3c <__reset+0xfb0efb3c>
8110fb74:	d9402117 	ldw	r5,132(sp)
8110fb78:	d9801a04 	addi	r6,sp,104
8110fb7c:	e009883a 	mov	r4,fp
8110fb80:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110fb84:	103fcd1e 	bne	r2,zero,8110fabc <__reset+0xfb0efabc>
8110fb88:	d9001b17 	ldw	r4,108(sp)
8110fb8c:	d8801c17 	ldw	r2,112(sp)
8110fb90:	d811883a 	mov	r8,sp
8110fb94:	21400044 	addi	r5,r4,1
8110fb98:	003fe806 	br	8110fb3c <__reset+0xfb0efb3c>
8110fb9c:	d9402117 	ldw	r5,132(sp)
8110fba0:	d9002017 	ldw	r4,128(sp)
8110fba4:	d9801a04 	addi	r6,sp,104
8110fba8:	d9c02b15 	stw	r7,172(sp)
8110fbac:	db402a15 	stw	r13,168(sp)
8110fbb0:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110fbb4:	d9c02b17 	ldw	r7,172(sp)
8110fbb8:	db402a17 	ldw	r13,168(sp)
8110fbbc:	103fbf1e 	bne	r2,zero,8110fabc <__reset+0xfb0efabc>
8110fbc0:	d9401b17 	ldw	r5,108(sp)
8110fbc4:	d8801c17 	ldw	r2,112(sp)
8110fbc8:	d811883a 	mov	r8,sp
8110fbcc:	29800044 	addi	r6,r5,1
8110fbd0:	003dc406 	br	8110f2e4 <__reset+0xfb0ef2e4>
8110fbd4:	1000d21e 	bne	r2,zero,8110ff20 <___vfiprintf_internal_r+0x11b4>
8110fbd8:	d8c01d87 	ldb	r3,118(sp)
8110fbdc:	18009526 	beq	r3,zero,8110fe34 <___vfiprintf_internal_r+0x10c8>
8110fbe0:	00800044 	movi	r2,1
8110fbe4:	d8c01d84 	addi	r3,sp,118
8110fbe8:	1009883a 	mov	r4,r2
8110fbec:	d8c00015 	stw	r3,0(sp)
8110fbf0:	d8800115 	stw	r2,4(sp)
8110fbf4:	d811883a 	mov	r8,sp
8110fbf8:	200b883a 	mov	r5,r4
8110fbfc:	42000204 	addi	r8,r8,8
8110fc00:	21000044 	addi	r4,r4,1
8110fc04:	003d9706 	br	8110f264 <__reset+0xfb0ef264>
8110fc08:	d9001d04 	addi	r4,sp,116
8110fc0c:	00800084 	movi	r2,2
8110fc10:	d9000015 	stw	r4,0(sp)
8110fc14:	d8800115 	stw	r2,4(sp)
8110fc18:	1809883a 	mov	r4,r3
8110fc1c:	d811883a 	mov	r8,sp
8110fc20:	200b883a 	mov	r5,r4
8110fc24:	42000204 	addi	r8,r8,8
8110fc28:	21000044 	addi	r4,r4,1
8110fc2c:	003f4e06 	br	8110f968 <__reset+0xfb0ef968>
8110fc30:	d8001d85 	stb	zero,118(sp)
8110fc34:	48005016 	blt	r9,zero,8110fd78 <___vfiprintf_internal_r+0x100c>
8110fc38:	00ffdfc4 	movi	r3,-129
8110fc3c:	94c4b03a 	or	r2,r18,r19
8110fc40:	a0e8703a 	and	r20,r20,r3
8110fc44:	103d4426 	beq	r2,zero,8110f158 <__reset+0xfb0ef158>
8110fc48:	0039883a 	mov	fp,zero
8110fc4c:	d9002617 	ldw	r4,152(sp)
8110fc50:	dd401a04 	addi	r21,sp,104
8110fc54:	908003cc 	andi	r2,r18,15
8110fc58:	9806973a 	slli	r3,r19,28
8110fc5c:	2085883a 	add	r2,r4,r2
8110fc60:	9024d13a 	srli	r18,r18,4
8110fc64:	10800003 	ldbu	r2,0(r2)
8110fc68:	9826d13a 	srli	r19,r19,4
8110fc6c:	ad7fffc4 	addi	r21,r21,-1
8110fc70:	1ca4b03a 	or	r18,r3,r18
8110fc74:	a8800005 	stb	r2,0(r21)
8110fc78:	94c4b03a 	or	r2,r18,r19
8110fc7c:	103ff51e 	bne	r2,zero,8110fc54 <__reset+0xfb0efc54>
8110fc80:	003e5906 	br	8110f5e8 <__reset+0xfb0ef5e8>
8110fc84:	d9402117 	ldw	r5,132(sp)
8110fc88:	d9002017 	ldw	r4,128(sp)
8110fc8c:	d9801a04 	addi	r6,sp,104
8110fc90:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110fc94:	103f891e 	bne	r2,zero,8110fabc <__reset+0xfb0efabc>
8110fc98:	d8801c17 	ldw	r2,112(sp)
8110fc9c:	d811883a 	mov	r8,sp
8110fca0:	003f9506 	br	8110faf8 <__reset+0xfb0efaf8>
8110fca4:	d9402117 	ldw	r5,132(sp)
8110fca8:	d9002017 	ldw	r4,128(sp)
8110fcac:	d9801a04 	addi	r6,sp,104
8110fcb0:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110fcb4:	103f811e 	bne	r2,zero,8110fabc <__reset+0xfb0efabc>
8110fcb8:	d811883a 	mov	r8,sp
8110fcbc:	003ced06 	br	8110f074 <__reset+0xfb0ef074>
8110fcc0:	d9402117 	ldw	r5,132(sp)
8110fcc4:	d9002017 	ldw	r4,128(sp)
8110fcc8:	d9801a04 	addi	r6,sp,104
8110fccc:	da402c15 	stw	r9,176(sp)
8110fcd0:	db802a15 	stw	r14,168(sp)
8110fcd4:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110fcd8:	da402c17 	ldw	r9,176(sp)
8110fcdc:	db802a17 	ldw	r14,168(sp)
8110fce0:	103f761e 	bne	r2,zero,8110fabc <__reset+0xfb0efabc>
8110fce4:	d9401b17 	ldw	r5,108(sp)
8110fce8:	d8801c17 	ldw	r2,112(sp)
8110fcec:	d811883a 	mov	r8,sp
8110fcf0:	29000044 	addi	r4,r5,1
8110fcf4:	003d5b06 	br	8110f264 <__reset+0xfb0ef264>
8110fcf8:	d9402117 	ldw	r5,132(sp)
8110fcfc:	d9002017 	ldw	r4,128(sp)
8110fd00:	d9801a04 	addi	r6,sp,104
8110fd04:	da402c15 	stw	r9,176(sp)
8110fd08:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110fd0c:	da402c17 	ldw	r9,176(sp)
8110fd10:	103f6a1e 	bne	r2,zero,8110fabc <__reset+0xfb0efabc>
8110fd14:	d9401b17 	ldw	r5,108(sp)
8110fd18:	d8801c17 	ldw	r2,112(sp)
8110fd1c:	d811883a 	mov	r8,sp
8110fd20:	29000044 	addi	r4,r5,1
8110fd24:	003f1006 	br	8110f968 <__reset+0xfb0ef968>
8110fd28:	1000c31e 	bne	r2,zero,81110038 <___vfiprintf_internal_r+0x12cc>
8110fd2c:	01000044 	movi	r4,1
8110fd30:	000b883a 	mov	r5,zero
8110fd34:	d811883a 	mov	r8,sp
8110fd38:	003f0d06 	br	8110f970 <__reset+0xfb0ef970>
8110fd3c:	d9402117 	ldw	r5,132(sp)
8110fd40:	d9002017 	ldw	r4,128(sp)
8110fd44:	d9801a04 	addi	r6,sp,104
8110fd48:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110fd4c:	103f5b1e 	bne	r2,zero,8110fabc <__reset+0xfb0efabc>
8110fd50:	d9001b17 	ldw	r4,108(sp)
8110fd54:	d8801c17 	ldw	r2,112(sp)
8110fd58:	d811883a 	mov	r8,sp
8110fd5c:	21000044 	addi	r4,r4,1
8110fd60:	003d8006 	br	8110f364 <__reset+0xfb0ef364>
8110fd64:	012044b4 	movhi	r4,33042
8110fd68:	2111cb04 	addi	r4,r4,18220
8110fd6c:	d9002615 	stw	r4,152(sp)
8110fd70:	d8c02215 	stw	r3,136(sp)
8110fd74:	1029883a 	mov	r20,r2
8110fd78:	94c4b03a 	or	r2,r18,r19
8110fd7c:	103fb21e 	bne	r2,zero,8110fc48 <__reset+0xfb0efc48>
8110fd80:	0039883a 	mov	fp,zero
8110fd84:	00800084 	movi	r2,2
8110fd88:	003e6b06 	br	8110f738 <__reset+0xfb0ef738>
8110fd8c:	da802217 	ldw	r10,136(sp)
8110fd90:	d8001d85 	stb	zero,118(sp)
8110fd94:	0027883a 	mov	r19,zero
8110fd98:	50800104 	addi	r2,r10,4
8110fd9c:	54800017 	ldw	r18,0(r10)
8110fda0:	483e6016 	blt	r9,zero,8110f724 <__reset+0xfb0ef724>
8110fda4:	00ffdfc4 	movi	r3,-129
8110fda8:	d8802215 	stw	r2,136(sp)
8110fdac:	a0e8703a 	and	r20,r20,r3
8110fdb0:	0039883a 	mov	fp,zero
8110fdb4:	903ebb26 	beq	r18,zero,8110f8a4 <__reset+0xfb0ef8a4>
8110fdb8:	00800244 	movi	r2,9
8110fdbc:	14bdee36 	bltu	r2,r18,8110f578 <__reset+0xfb0ef578>
8110fdc0:	003eba06 	br	8110f8ac <__reset+0xfb0ef8ac>
8110fdc4:	00800c04 	movi	r2,48
8110fdc8:	d8c01d45 	stb	r3,117(sp)
8110fdcc:	d8801d05 	stb	r2,116(sp)
8110fdd0:	d8001d85 	stb	zero,118(sp)
8110fdd4:	a0c00094 	ori	r3,r20,2
8110fdd8:	4800a916 	blt	r9,zero,81110080 <___vfiprintf_internal_r+0x1314>
8110fddc:	00bfdfc4 	movi	r2,-129
8110fde0:	a096703a 	and	r11,r20,r2
8110fde4:	5d000094 	ori	r20,r11,2
8110fde8:	0039883a 	mov	fp,zero
8110fdec:	003f9706 	br	8110fc4c <__reset+0xfb0efc4c>
8110fdf0:	8025883a 	mov	r18,r16
8110fdf4:	003c2e06 	br	8110eeb0 <__reset+0xfb0eeeb0>
8110fdf8:	00a044b4 	movhi	r2,33042
8110fdfc:	1091cb04 	addi	r2,r2,18220
8110fe00:	0039883a 	mov	fp,zero
8110fe04:	d8802615 	stw	r2,152(sp)
8110fe08:	003f9006 	br	8110fc4c <__reset+0xfb0efc4c>
8110fe0c:	04a5c83a 	sub	r18,zero,r18
8110fe10:	07000b44 	movi	fp,45
8110fe14:	9004c03a 	cmpne	r2,r18,zero
8110fe18:	04e7c83a 	sub	r19,zero,r19
8110fe1c:	df001d85 	stb	fp,118(sp)
8110fe20:	98a7c83a 	sub	r19,r19,r2
8110fe24:	48009f16 	blt	r9,zero,811100a4 <___vfiprintf_internal_r+0x1338>
8110fe28:	00bfdfc4 	movi	r2,-129
8110fe2c:	a0a8703a 	and	r20,r20,r2
8110fe30:	003dd006 	br	8110f574 <__reset+0xfb0ef574>
8110fe34:	70004c26 	beq	r14,zero,8110ff68 <___vfiprintf_internal_r+0x11fc>
8110fe38:	00800084 	movi	r2,2
8110fe3c:	d8c01d04 	addi	r3,sp,116
8110fe40:	d8c00015 	stw	r3,0(sp)
8110fe44:	d8800115 	stw	r2,4(sp)
8110fe48:	01000044 	movi	r4,1
8110fe4c:	d811883a 	mov	r8,sp
8110fe50:	003f7306 	br	8110fc20 <__reset+0xfb0efc20>
8110fe54:	a080100c 	andi	r2,r20,64
8110fe58:	da802217 	ldw	r10,136(sp)
8110fe5c:	103e0626 	beq	r2,zero,8110f678 <__reset+0xfb0ef678>
8110fe60:	5480000f 	ldh	r18,0(r10)
8110fe64:	52800104 	addi	r10,r10,4
8110fe68:	da802215 	stw	r10,136(sp)
8110fe6c:	9027d7fa 	srai	r19,r18,31
8110fe70:	9805883a 	mov	r2,r19
8110fe74:	003db806 	br	8110f558 <__reset+0xfb0ef558>
8110fe78:	a080040c 	andi	r2,r20,16
8110fe7c:	1000091e 	bne	r2,zero,8110fea4 <___vfiprintf_internal_r+0x1138>
8110fe80:	a2c0100c 	andi	r11,r20,64
8110fe84:	58000726 	beq	r11,zero,8110fea4 <___vfiprintf_internal_r+0x1138>
8110fe88:	da802217 	ldw	r10,136(sp)
8110fe8c:	50800017 	ldw	r2,0(r10)
8110fe90:	52800104 	addi	r10,r10,4
8110fe94:	da802215 	stw	r10,136(sp)
8110fe98:	da802317 	ldw	r10,140(sp)
8110fe9c:	1280000d 	sth	r10,0(r2)
8110fea0:	003be706 	br	8110ee40 <__reset+0xfb0eee40>
8110fea4:	da802217 	ldw	r10,136(sp)
8110fea8:	50800017 	ldw	r2,0(r10)
8110feac:	52800104 	addi	r10,r10,4
8110feb0:	da802215 	stw	r10,136(sp)
8110feb4:	da802317 	ldw	r10,140(sp)
8110feb8:	12800015 	stw	r10,0(r2)
8110febc:	003be006 	br	8110ee40 <__reset+0xfb0eee40>
8110fec0:	a080100c 	andi	r2,r20,64
8110fec4:	da802217 	ldw	r10,136(sp)
8110fec8:	10003026 	beq	r2,zero,8110ff8c <___vfiprintf_internal_r+0x1220>
8110fecc:	5480000b 	ldhu	r18,0(r10)
8110fed0:	52800104 	addi	r10,r10,4
8110fed4:	0027883a 	mov	r19,zero
8110fed8:	da802215 	stw	r10,136(sp)
8110fedc:	003d8006 	br	8110f4e0 <__reset+0xfb0ef4e0>
8110fee0:	80c00007 	ldb	r3,0(r16)
8110fee4:	003c0006 	br	8110eee8 <__reset+0xfb0eeee8>
8110fee8:	a080100c 	andi	r2,r20,64
8110feec:	d8001d85 	stb	zero,118(sp)
8110fef0:	da802217 	ldw	r10,136(sp)
8110fef4:	1000201e 	bne	r2,zero,8110ff78 <___vfiprintf_internal_r+0x120c>
8110fef8:	50800104 	addi	r2,r10,4
8110fefc:	54800017 	ldw	r18,0(r10)
8110ff00:	0027883a 	mov	r19,zero
8110ff04:	483def0e 	bge	r9,zero,8110f6c4 <__reset+0xfb0ef6c4>
8110ff08:	94c6b03a 	or	r3,r18,r19
8110ff0c:	d8802215 	stw	r2,136(sp)
8110ff10:	183d4e1e 	bne	r3,zero,8110f44c <__reset+0xfb0ef44c>
8110ff14:	0039883a 	mov	fp,zero
8110ff18:	0005883a 	mov	r2,zero
8110ff1c:	003e0606 	br	8110f738 <__reset+0xfb0ef738>
8110ff20:	d9402117 	ldw	r5,132(sp)
8110ff24:	d9002017 	ldw	r4,128(sp)
8110ff28:	d9801a04 	addi	r6,sp,104
8110ff2c:	da402c15 	stw	r9,176(sp)
8110ff30:	db802a15 	stw	r14,168(sp)
8110ff34:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110ff38:	da402c17 	ldw	r9,176(sp)
8110ff3c:	db802a17 	ldw	r14,168(sp)
8110ff40:	103ede1e 	bne	r2,zero,8110fabc <__reset+0xfb0efabc>
8110ff44:	d9401b17 	ldw	r5,108(sp)
8110ff48:	d8801c17 	ldw	r2,112(sp)
8110ff4c:	d811883a 	mov	r8,sp
8110ff50:	29000044 	addi	r4,r5,1
8110ff54:	003e7406 	br	8110f928 <__reset+0xfb0ef928>
8110ff58:	00bfffc4 	movi	r2,-1
8110ff5c:	003c5806 	br	8110f0c0 <__reset+0xfb0ef0c0>
8110ff60:	d811883a 	mov	r8,sp
8110ff64:	003ee806 	br	8110fb08 <__reset+0xfb0efb08>
8110ff68:	000b883a 	mov	r5,zero
8110ff6c:	01000044 	movi	r4,1
8110ff70:	d811883a 	mov	r8,sp
8110ff74:	003e7c06 	br	8110f968 <__reset+0xfb0ef968>
8110ff78:	50800104 	addi	r2,r10,4
8110ff7c:	5480000b 	ldhu	r18,0(r10)
8110ff80:	0027883a 	mov	r19,zero
8110ff84:	483dcf0e 	bge	r9,zero,8110f6c4 <__reset+0xfb0ef6c4>
8110ff88:	003fdf06 	br	8110ff08 <__reset+0xfb0eff08>
8110ff8c:	54800017 	ldw	r18,0(r10)
8110ff90:	52800104 	addi	r10,r10,4
8110ff94:	0027883a 	mov	r19,zero
8110ff98:	da802215 	stw	r10,136(sp)
8110ff9c:	003d5006 	br	8110f4e0 <__reset+0xfb0ef4e0>
8110ffa0:	50800104 	addi	r2,r10,4
8110ffa4:	5480000b 	ldhu	r18,0(r10)
8110ffa8:	0027883a 	mov	r19,zero
8110ffac:	483f7d0e 	bge	r9,zero,8110fda4 <__reset+0xfb0efda4>
8110ffb0:	003ddc06 	br	8110f724 <__reset+0xfb0ef724>
8110ffb4:	d8c02215 	stw	r3,136(sp)
8110ffb8:	0039883a 	mov	fp,zero
8110ffbc:	003ddb06 	br	8110f72c <__reset+0xfb0ef72c>
8110ffc0:	02a044b4 	movhi	r10,33042
8110ffc4:	5292f604 	addi	r10,r10,19416
8110ffc8:	da802415 	stw	r10,144(sp)
8110ffcc:	003e8306 	br	8110f9dc <__reset+0xfb0ef9dc>
8110ffd0:	d8801c17 	ldw	r2,112(sp)
8110ffd4:	dd002117 	ldw	r20,132(sp)
8110ffd8:	103eb926 	beq	r2,zero,8110fac0 <__reset+0xfb0efac0>
8110ffdc:	d9002017 	ldw	r4,128(sp)
8110ffe0:	d9801a04 	addi	r6,sp,104
8110ffe4:	a00b883a 	mov	r5,r20
8110ffe8:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8110ffec:	003eb406 	br	8110fac0 <__reset+0xfb0efac0>
8110fff0:	80c00043 	ldbu	r3,1(r16)
8110fff4:	a5000814 	ori	r20,r20,32
8110fff8:	84000044 	addi	r16,r16,1
8110fffc:	18c03fcc 	andi	r3,r3,255
81110000:	18c0201c 	xori	r3,r3,128
81110004:	18ffe004 	addi	r3,r3,-128
81110008:	003bb706 	br	8110eee8 <__reset+0xfb0eeee8>
8111000c:	a809883a 	mov	r4,r21
81110010:	d8c02a15 	stw	r3,168(sp)
81110014:	da002b15 	stw	r8,172(sp)
81110018:	1101bb00 	call	81101bb0 <strlen>
8111001c:	d8c02a17 	ldw	r3,168(sp)
81110020:	1027883a 	mov	r19,r2
81110024:	df001d83 	ldbu	fp,118(sp)
81110028:	d8c02215 	stw	r3,136(sp)
8111002c:	0013883a 	mov	r9,zero
81110030:	da002b17 	ldw	r8,172(sp)
81110034:	003c4d06 	br	8110f16c <__reset+0xfb0ef16c>
81110038:	d9402117 	ldw	r5,132(sp)
8111003c:	d9002017 	ldw	r4,128(sp)
81110040:	d9801a04 	addi	r6,sp,104
81110044:	da402c15 	stw	r9,176(sp)
81110048:	110ec580 	call	8110ec58 <__sprint_r.part.0>
8111004c:	da402c17 	ldw	r9,176(sp)
81110050:	103e9a1e 	bne	r2,zero,8110fabc <__reset+0xfb0efabc>
81110054:	d9401b17 	ldw	r5,108(sp)
81110058:	d8801c17 	ldw	r2,112(sp)
8111005c:	d811883a 	mov	r8,sp
81110060:	29000044 	addi	r4,r5,1
81110064:	003e4206 	br	8110f970 <__reset+0xfb0ef970>
81110068:	d9401b17 	ldw	r5,108(sp)
8111006c:	012044b4 	movhi	r4,33042
81110070:	2112fa04 	addi	r4,r4,19432
81110074:	d9002415 	stw	r4,144(sp)
81110078:	29400044 	addi	r5,r5,1
8111007c:	003c6d06 	br	8110f234 <__reset+0xfb0ef234>
81110080:	0039883a 	mov	fp,zero
81110084:	00800084 	movi	r2,2
81110088:	10803fcc 	andi	r2,r2,255
8111008c:	01000044 	movi	r4,1
81110090:	11001e26 	beq	r2,r4,8111010c <___vfiprintf_internal_r+0x13a0>
81110094:	01000084 	movi	r4,2
81110098:	11001e1e 	bne	r2,r4,81110114 <___vfiprintf_internal_r+0x13a8>
8111009c:	1829883a 	mov	r20,r3
811100a0:	003eea06 	br	8110fc4c <__reset+0xfb0efc4c>
811100a4:	a007883a 	mov	r3,r20
811100a8:	00800044 	movi	r2,1
811100ac:	003ff606 	br	81110088 <__reset+0xfb0f0088>
811100b0:	00800184 	movi	r2,6
811100b4:	1240012e 	bgeu	r2,r9,811100bc <___vfiprintf_internal_r+0x1350>
811100b8:	1013883a 	mov	r9,r2
811100bc:	4827883a 	mov	r19,r9
811100c0:	4825883a 	mov	r18,r9
811100c4:	48001516 	blt	r9,zero,8111011c <___vfiprintf_internal_r+0x13b0>
811100c8:	056044b4 	movhi	r21,33042
811100cc:	d8c02215 	stw	r3,136(sp)
811100d0:	ad51d004 	addi	r21,r21,18240
811100d4:	003d1406 	br	8110f528 <__reset+0xfb0ef528>
811100d8:	02a044b4 	movhi	r10,33042
811100dc:	5292f604 	addi	r10,r10,19416
811100e0:	da802415 	stw	r10,144(sp)
811100e4:	200d883a 	mov	r6,r4
811100e8:	003c9106 	br	8110f330 <__reset+0xfb0ef330>
811100ec:	5021883a 	mov	r16,r10
811100f0:	0013883a 	mov	r9,zero
811100f4:	003b7d06 	br	8110eeec <__reset+0xfb0eeeec>
811100f8:	4827883a 	mov	r19,r9
811100fc:	df001d83 	ldbu	fp,118(sp)
81110100:	d8c02215 	stw	r3,136(sp)
81110104:	0013883a 	mov	r9,zero
81110108:	003c1806 	br	8110f16c <__reset+0xfb0ef16c>
8111010c:	1829883a 	mov	r20,r3
81110110:	003d1806 	br	8110f574 <__reset+0xfb0ef574>
81110114:	1829883a 	mov	r20,r3
81110118:	003ccd06 	br	8110f450 <__reset+0xfb0ef450>
8111011c:	0025883a 	mov	r18,zero
81110120:	003fe906 	br	811100c8 <__reset+0xfb0f00c8>
81110124:	d8802217 	ldw	r2,136(sp)
81110128:	80c00043 	ldbu	r3,1(r16)
8111012c:	5021883a 	mov	r16,r10
81110130:	12400017 	ldw	r9,0(r2)
81110134:	10800104 	addi	r2,r2,4
81110138:	d8802215 	stw	r2,136(sp)
8111013c:	483faf0e 	bge	r9,zero,8110fffc <__reset+0xfb0efffc>
81110140:	18c03fcc 	andi	r3,r3,255
81110144:	18c0201c 	xori	r3,r3,128
81110148:	027fffc4 	movi	r9,-1
8111014c:	18ffe004 	addi	r3,r3,-128
81110150:	003b6506 	br	8110eee8 <__reset+0xfb0eeee8>
81110154:	d9c01d85 	stb	r7,118(sp)
81110158:	003ca006 	br	8110f3dc <__reset+0xfb0ef3dc>
8111015c:	d9c01d85 	stb	r7,118(sp)
81110160:	003cad06 	br	8110f418 <__reset+0xfb0ef418>
81110164:	d9c01d85 	stb	r7,118(sp)
81110168:	003d7d06 	br	8110f760 <__reset+0xfb0ef760>
8111016c:	d9c01d85 	stb	r7,118(sp)
81110170:	003d5f06 	br	8110f6f0 <__reset+0xfb0ef6f0>
81110174:	a080004c 	andi	r2,r20,1
81110178:	0039883a 	mov	fp,zero
8111017c:	10000526 	beq	r2,zero,81110194 <___vfiprintf_internal_r+0x1428>
81110180:	00800c04 	movi	r2,48
81110184:	d88019c5 	stb	r2,103(sp)
81110188:	dcc02717 	ldw	r19,156(sp)
8111018c:	dd4019c4 	addi	r21,sp,103
81110190:	003bf606 	br	8110f16c <__reset+0xfb0ef16c>
81110194:	0027883a 	mov	r19,zero
81110198:	dd401a04 	addi	r21,sp,104
8111019c:	003bf306 	br	8110f16c <__reset+0xfb0ef16c>
811101a0:	d9c01d85 	stb	r7,118(sp)
811101a4:	003dc806 	br	8110f8c8 <__reset+0xfb0ef8c8>
811101a8:	d9c01d85 	stb	r7,118(sp)
811101ac:	003d3a06 	br	8110f698 <__reset+0xfb0ef698>
811101b0:	d9c01d85 	stb	r7,118(sp)
811101b4:	003d2a06 	br	8110f660 <__reset+0xfb0ef660>
811101b8:	d9c01d85 	stb	r7,118(sp)
811101bc:	003cde06 	br	8110f538 <__reset+0xfb0ef538>
811101c0:	d9c01d85 	stb	r7,118(sp)
811101c4:	003cbc06 	br	8110f4b8 <__reset+0xfb0ef4b8>

811101c8 <__vfiprintf_internal>:
811101c8:	00a044b4 	movhi	r2,33042
811101cc:	109b9c04 	addi	r2,r2,28272
811101d0:	300f883a 	mov	r7,r6
811101d4:	280d883a 	mov	r6,r5
811101d8:	200b883a 	mov	r5,r4
811101dc:	11000017 	ldw	r4,0(r2)
811101e0:	110ed6c1 	jmpi	8110ed6c <___vfiprintf_internal_r>

811101e4 <__sbprintf>:
811101e4:	2880030b 	ldhu	r2,12(r5)
811101e8:	2ac01917 	ldw	r11,100(r5)
811101ec:	2a80038b 	ldhu	r10,14(r5)
811101f0:	2a400717 	ldw	r9,28(r5)
811101f4:	2a000917 	ldw	r8,36(r5)
811101f8:	defee204 	addi	sp,sp,-1144
811101fc:	00c10004 	movi	r3,1024
81110200:	dc011a15 	stw	r16,1128(sp)
81110204:	10bfff4c 	andi	r2,r2,65533
81110208:	2821883a 	mov	r16,r5
8111020c:	d8cb883a 	add	r5,sp,r3
81110210:	dc811c15 	stw	r18,1136(sp)
81110214:	dc411b15 	stw	r17,1132(sp)
81110218:	dfc11d15 	stw	ra,1140(sp)
8111021c:	2025883a 	mov	r18,r4
81110220:	d881030d 	sth	r2,1036(sp)
81110224:	dac11915 	stw	r11,1124(sp)
81110228:	da81038d 	sth	r10,1038(sp)
8111022c:	da410715 	stw	r9,1052(sp)
81110230:	da010915 	stw	r8,1060(sp)
81110234:	dec10015 	stw	sp,1024(sp)
81110238:	dec10415 	stw	sp,1040(sp)
8111023c:	d8c10215 	stw	r3,1032(sp)
81110240:	d8c10515 	stw	r3,1044(sp)
81110244:	d8010615 	stw	zero,1048(sp)
81110248:	110ed6c0 	call	8110ed6c <___vfiprintf_internal_r>
8111024c:	1023883a 	mov	r17,r2
81110250:	10000416 	blt	r2,zero,81110264 <__sbprintf+0x80>
81110254:	d9410004 	addi	r5,sp,1024
81110258:	9009883a 	mov	r4,r18
8111025c:	11074500 	call	81107450 <_fflush_r>
81110260:	10000d1e 	bne	r2,zero,81110298 <__sbprintf+0xb4>
81110264:	d881030b 	ldhu	r2,1036(sp)
81110268:	1080100c 	andi	r2,r2,64
8111026c:	10000326 	beq	r2,zero,8111027c <__sbprintf+0x98>
81110270:	8080030b 	ldhu	r2,12(r16)
81110274:	10801014 	ori	r2,r2,64
81110278:	8080030d 	sth	r2,12(r16)
8111027c:	8805883a 	mov	r2,r17
81110280:	dfc11d17 	ldw	ra,1140(sp)
81110284:	dc811c17 	ldw	r18,1136(sp)
81110288:	dc411b17 	ldw	r17,1132(sp)
8111028c:	dc011a17 	ldw	r16,1128(sp)
81110290:	dec11e04 	addi	sp,sp,1144
81110294:	f800283a 	ret
81110298:	047fffc4 	movi	r17,-1
8111029c:	003ff106 	br	81110264 <__reset+0xfb0f0264>

811102a0 <_calloc_r>:
811102a0:	298b383a 	mul	r5,r5,r6
811102a4:	defffe04 	addi	sp,sp,-8
811102a8:	dfc00115 	stw	ra,4(sp)
811102ac:	dc000015 	stw	r16,0(sp)
811102b0:	1100cf00 	call	81100cf0 <_malloc_r>
811102b4:	10002926 	beq	r2,zero,8111035c <_calloc_r+0xbc>
811102b8:	11bfff17 	ldw	r6,-4(r2)
811102bc:	1021883a 	mov	r16,r2
811102c0:	00bfff04 	movi	r2,-4
811102c4:	308c703a 	and	r6,r6,r2
811102c8:	00c00904 	movi	r3,36
811102cc:	308d883a 	add	r6,r6,r2
811102d0:	19801636 	bltu	r3,r6,8111032c <_calloc_r+0x8c>
811102d4:	008004c4 	movi	r2,19
811102d8:	11800b2e 	bgeu	r2,r6,81110308 <_calloc_r+0x68>
811102dc:	80000015 	stw	zero,0(r16)
811102e0:	80000115 	stw	zero,4(r16)
811102e4:	008006c4 	movi	r2,27
811102e8:	11801a2e 	bgeu	r2,r6,81110354 <_calloc_r+0xb4>
811102ec:	80000215 	stw	zero,8(r16)
811102f0:	80000315 	stw	zero,12(r16)
811102f4:	30c0151e 	bne	r6,r3,8111034c <_calloc_r+0xac>
811102f8:	80000415 	stw	zero,16(r16)
811102fc:	80800604 	addi	r2,r16,24
81110300:	80000515 	stw	zero,20(r16)
81110304:	00000106 	br	8111030c <_calloc_r+0x6c>
81110308:	8005883a 	mov	r2,r16
8111030c:	10000015 	stw	zero,0(r2)
81110310:	10000115 	stw	zero,4(r2)
81110314:	10000215 	stw	zero,8(r2)
81110318:	8005883a 	mov	r2,r16
8111031c:	dfc00117 	ldw	ra,4(sp)
81110320:	dc000017 	ldw	r16,0(sp)
81110324:	dec00204 	addi	sp,sp,8
81110328:	f800283a 	ret
8111032c:	000b883a 	mov	r5,zero
81110330:	8009883a 	mov	r4,r16
81110334:	11014fc0 	call	811014fc <memset>
81110338:	8005883a 	mov	r2,r16
8111033c:	dfc00117 	ldw	ra,4(sp)
81110340:	dc000017 	ldw	r16,0(sp)
81110344:	dec00204 	addi	sp,sp,8
81110348:	f800283a 	ret
8111034c:	80800404 	addi	r2,r16,16
81110350:	003fee06 	br	8111030c <__reset+0xfb0f030c>
81110354:	80800204 	addi	r2,r16,8
81110358:	003fec06 	br	8111030c <__reset+0xfb0f030c>
8111035c:	0005883a 	mov	r2,zero
81110360:	003fee06 	br	8111031c <__reset+0xfb0f031c>

81110364 <_fclose_r>:
81110364:	28003926 	beq	r5,zero,8111044c <_fclose_r+0xe8>
81110368:	defffc04 	addi	sp,sp,-16
8111036c:	dc400115 	stw	r17,4(sp)
81110370:	dc000015 	stw	r16,0(sp)
81110374:	dfc00315 	stw	ra,12(sp)
81110378:	dc800215 	stw	r18,8(sp)
8111037c:	2023883a 	mov	r17,r4
81110380:	2821883a 	mov	r16,r5
81110384:	20000226 	beq	r4,zero,81110390 <_fclose_r+0x2c>
81110388:	20800e17 	ldw	r2,56(r4)
8111038c:	10002726 	beq	r2,zero,8111042c <_fclose_r+0xc8>
81110390:	8080030f 	ldh	r2,12(r16)
81110394:	1000071e 	bne	r2,zero,811103b4 <_fclose_r+0x50>
81110398:	0005883a 	mov	r2,zero
8111039c:	dfc00317 	ldw	ra,12(sp)
811103a0:	dc800217 	ldw	r18,8(sp)
811103a4:	dc400117 	ldw	r17,4(sp)
811103a8:	dc000017 	ldw	r16,0(sp)
811103ac:	dec00404 	addi	sp,sp,16
811103b0:	f800283a 	ret
811103b4:	800b883a 	mov	r5,r16
811103b8:	8809883a 	mov	r4,r17
811103bc:	11072340 	call	81107234 <__sflush_r>
811103c0:	1025883a 	mov	r18,r2
811103c4:	80800b17 	ldw	r2,44(r16)
811103c8:	10000426 	beq	r2,zero,811103dc <_fclose_r+0x78>
811103cc:	81400717 	ldw	r5,28(r16)
811103d0:	8809883a 	mov	r4,r17
811103d4:	103ee83a 	callr	r2
811103d8:	10001616 	blt	r2,zero,81110434 <_fclose_r+0xd0>
811103dc:	8080030b 	ldhu	r2,12(r16)
811103e0:	1080200c 	andi	r2,r2,128
811103e4:	1000151e 	bne	r2,zero,8111043c <_fclose_r+0xd8>
811103e8:	81400c17 	ldw	r5,48(r16)
811103ec:	28000526 	beq	r5,zero,81110404 <_fclose_r+0xa0>
811103f0:	80801004 	addi	r2,r16,64
811103f4:	28800226 	beq	r5,r2,81110400 <_fclose_r+0x9c>
811103f8:	8809883a 	mov	r4,r17
811103fc:	1107cac0 	call	81107cac <_free_r>
81110400:	80000c15 	stw	zero,48(r16)
81110404:	81401117 	ldw	r5,68(r16)
81110408:	28000326 	beq	r5,zero,81110418 <_fclose_r+0xb4>
8111040c:	8809883a 	mov	r4,r17
81110410:	1107cac0 	call	81107cac <_free_r>
81110414:	80001115 	stw	zero,68(r16)
81110418:	110783c0 	call	8110783c <__sfp_lock_acquire>
8111041c:	8000030d 	sth	zero,12(r16)
81110420:	11078400 	call	81107840 <__sfp_lock_release>
81110424:	9005883a 	mov	r2,r18
81110428:	003fdc06 	br	8111039c <__reset+0xfb0f039c>
8111042c:	110782c0 	call	8110782c <__sinit>
81110430:	003fd706 	br	81110390 <__reset+0xfb0f0390>
81110434:	04bfffc4 	movi	r18,-1
81110438:	003fe806 	br	811103dc <__reset+0xfb0f03dc>
8111043c:	81400417 	ldw	r5,16(r16)
81110440:	8809883a 	mov	r4,r17
81110444:	1107cac0 	call	81107cac <_free_r>
81110448:	003fe706 	br	811103e8 <__reset+0xfb0f03e8>
8111044c:	0005883a 	mov	r2,zero
81110450:	f800283a 	ret

81110454 <fclose>:
81110454:	00a044b4 	movhi	r2,33042
81110458:	109b9c04 	addi	r2,r2,28272
8111045c:	200b883a 	mov	r5,r4
81110460:	11000017 	ldw	r4,0(r2)
81110464:	11103641 	jmpi	81110364 <_fclose_r>

81110468 <__fputwc>:
81110468:	defff804 	addi	sp,sp,-32
8111046c:	dcc00415 	stw	r19,16(sp)
81110470:	dc800315 	stw	r18,12(sp)
81110474:	dc000115 	stw	r16,4(sp)
81110478:	dfc00715 	stw	ra,28(sp)
8111047c:	dd400615 	stw	r21,24(sp)
81110480:	dd000515 	stw	r20,20(sp)
81110484:	dc400215 	stw	r17,8(sp)
81110488:	2027883a 	mov	r19,r4
8111048c:	2825883a 	mov	r18,r5
81110490:	3021883a 	mov	r16,r6
81110494:	110870c0 	call	8110870c <__locale_mb_cur_max>
81110498:	00c00044 	movi	r3,1
8111049c:	10c03e26 	beq	r2,r3,81110598 <__fputwc+0x130>
811104a0:	81c01704 	addi	r7,r16,92
811104a4:	900d883a 	mov	r6,r18
811104a8:	d80b883a 	mov	r5,sp
811104ac:	9809883a 	mov	r4,r19
811104b0:	11128300 	call	81112830 <_wcrtomb_r>
811104b4:	1029883a 	mov	r20,r2
811104b8:	00bfffc4 	movi	r2,-1
811104bc:	a0802026 	beq	r20,r2,81110540 <__fputwc+0xd8>
811104c0:	d9400003 	ldbu	r5,0(sp)
811104c4:	a0001c26 	beq	r20,zero,81110538 <__fputwc+0xd0>
811104c8:	0023883a 	mov	r17,zero
811104cc:	05400284 	movi	r21,10
811104d0:	00000906 	br	811104f8 <__fputwc+0x90>
811104d4:	80800017 	ldw	r2,0(r16)
811104d8:	11400005 	stb	r5,0(r2)
811104dc:	80c00017 	ldw	r3,0(r16)
811104e0:	18c00044 	addi	r3,r3,1
811104e4:	80c00015 	stw	r3,0(r16)
811104e8:	8c400044 	addi	r17,r17,1
811104ec:	dc45883a 	add	r2,sp,r17
811104f0:	8d00112e 	bgeu	r17,r20,81110538 <__fputwc+0xd0>
811104f4:	11400003 	ldbu	r5,0(r2)
811104f8:	80c00217 	ldw	r3,8(r16)
811104fc:	18ffffc4 	addi	r3,r3,-1
81110500:	80c00215 	stw	r3,8(r16)
81110504:	183ff30e 	bge	r3,zero,811104d4 <__reset+0xfb0f04d4>
81110508:	80800617 	ldw	r2,24(r16)
8111050c:	18801916 	blt	r3,r2,81110574 <__fputwc+0x10c>
81110510:	80800017 	ldw	r2,0(r16)
81110514:	11400005 	stb	r5,0(r2)
81110518:	80800017 	ldw	r2,0(r16)
8111051c:	10c00003 	ldbu	r3,0(r2)
81110520:	10800044 	addi	r2,r2,1
81110524:	1d402326 	beq	r3,r21,811105b4 <__fputwc+0x14c>
81110528:	80800015 	stw	r2,0(r16)
8111052c:	8c400044 	addi	r17,r17,1
81110530:	dc45883a 	add	r2,sp,r17
81110534:	8d3fef36 	bltu	r17,r20,811104f4 <__reset+0xfb0f04f4>
81110538:	9005883a 	mov	r2,r18
8111053c:	00000406 	br	81110550 <__fputwc+0xe8>
81110540:	80c0030b 	ldhu	r3,12(r16)
81110544:	a005883a 	mov	r2,r20
81110548:	18c01014 	ori	r3,r3,64
8111054c:	80c0030d 	sth	r3,12(r16)
81110550:	dfc00717 	ldw	ra,28(sp)
81110554:	dd400617 	ldw	r21,24(sp)
81110558:	dd000517 	ldw	r20,20(sp)
8111055c:	dcc00417 	ldw	r19,16(sp)
81110560:	dc800317 	ldw	r18,12(sp)
81110564:	dc400217 	ldw	r17,8(sp)
81110568:	dc000117 	ldw	r16,4(sp)
8111056c:	dec00804 	addi	sp,sp,32
81110570:	f800283a 	ret
81110574:	800d883a 	mov	r6,r16
81110578:	29403fcc 	andi	r5,r5,255
8111057c:	9809883a 	mov	r4,r19
81110580:	11126d80 	call	811126d8 <__swbuf_r>
81110584:	10bfffe0 	cmpeqi	r2,r2,-1
81110588:	10803fcc 	andi	r2,r2,255
8111058c:	103fd626 	beq	r2,zero,811104e8 <__reset+0xfb0f04e8>
81110590:	00bfffc4 	movi	r2,-1
81110594:	003fee06 	br	81110550 <__reset+0xfb0f0550>
81110598:	90ffffc4 	addi	r3,r18,-1
8111059c:	01003f84 	movi	r4,254
811105a0:	20ffbf36 	bltu	r4,r3,811104a0 <__reset+0xfb0f04a0>
811105a4:	900b883a 	mov	r5,r18
811105a8:	dc800005 	stb	r18,0(sp)
811105ac:	1029883a 	mov	r20,r2
811105b0:	003fc506 	br	811104c8 <__reset+0xfb0f04c8>
811105b4:	800d883a 	mov	r6,r16
811105b8:	a80b883a 	mov	r5,r21
811105bc:	9809883a 	mov	r4,r19
811105c0:	11126d80 	call	811126d8 <__swbuf_r>
811105c4:	10bfffe0 	cmpeqi	r2,r2,-1
811105c8:	003fef06 	br	81110588 <__reset+0xfb0f0588>

811105cc <_fputwc_r>:
811105cc:	3080030b 	ldhu	r2,12(r6)
811105d0:	10c8000c 	andi	r3,r2,8192
811105d4:	1800051e 	bne	r3,zero,811105ec <_fputwc_r+0x20>
811105d8:	30c01917 	ldw	r3,100(r6)
811105dc:	10880014 	ori	r2,r2,8192
811105e0:	3080030d 	sth	r2,12(r6)
811105e4:	18880014 	ori	r2,r3,8192
811105e8:	30801915 	stw	r2,100(r6)
811105ec:	11104681 	jmpi	81110468 <__fputwc>

811105f0 <fputwc>:
811105f0:	00a044b4 	movhi	r2,33042
811105f4:	defffc04 	addi	sp,sp,-16
811105f8:	109b9c04 	addi	r2,r2,28272
811105fc:	dc000115 	stw	r16,4(sp)
81110600:	14000017 	ldw	r16,0(r2)
81110604:	dc400215 	stw	r17,8(sp)
81110608:	dfc00315 	stw	ra,12(sp)
8111060c:	2023883a 	mov	r17,r4
81110610:	80000226 	beq	r16,zero,8111061c <fputwc+0x2c>
81110614:	80800e17 	ldw	r2,56(r16)
81110618:	10001026 	beq	r2,zero,8111065c <fputwc+0x6c>
8111061c:	2880030b 	ldhu	r2,12(r5)
81110620:	10c8000c 	andi	r3,r2,8192
81110624:	1800051e 	bne	r3,zero,8111063c <fputwc+0x4c>
81110628:	28c01917 	ldw	r3,100(r5)
8111062c:	10880014 	ori	r2,r2,8192
81110630:	2880030d 	sth	r2,12(r5)
81110634:	18880014 	ori	r2,r3,8192
81110638:	28801915 	stw	r2,100(r5)
8111063c:	280d883a 	mov	r6,r5
81110640:	8009883a 	mov	r4,r16
81110644:	880b883a 	mov	r5,r17
81110648:	dfc00317 	ldw	ra,12(sp)
8111064c:	dc400217 	ldw	r17,8(sp)
81110650:	dc000117 	ldw	r16,4(sp)
81110654:	dec00404 	addi	sp,sp,16
81110658:	11104681 	jmpi	81110468 <__fputwc>
8111065c:	8009883a 	mov	r4,r16
81110660:	d9400015 	stw	r5,0(sp)
81110664:	110782c0 	call	8110782c <__sinit>
81110668:	d9400017 	ldw	r5,0(sp)
8111066c:	003feb06 	br	8111061c <__reset+0xfb0f061c>

81110670 <rshift>:
81110670:	2807d17a 	srai	r3,r5,5
81110674:	20800417 	ldw	r2,16(r4)
81110678:	22000504 	addi	r8,r4,20
8111067c:	1880250e 	bge	r3,r2,81110714 <rshift+0xa4>
81110680:	1085883a 	add	r2,r2,r2
81110684:	18c7883a 	add	r3,r3,r3
81110688:	1085883a 	add	r2,r2,r2
8111068c:	18c7883a 	add	r3,r3,r3
81110690:	294007cc 	andi	r5,r5,31
81110694:	4085883a 	add	r2,r8,r2
81110698:	40c7883a 	add	r3,r8,r3
8111069c:	28002026 	beq	r5,zero,81110720 <rshift+0xb0>
811106a0:	19800017 	ldw	r6,0(r3)
811106a4:	02c00804 	movi	r11,32
811106a8:	19c00104 	addi	r7,r3,4
811106ac:	5957c83a 	sub	r11,r11,r5
811106b0:	314cd83a 	srl	r6,r6,r5
811106b4:	38802c2e 	bgeu	r7,r2,81110768 <rshift+0xf8>
811106b8:	4015883a 	mov	r10,r8
811106bc:	3a400017 	ldw	r9,0(r7)
811106c0:	52800104 	addi	r10,r10,4
811106c4:	39c00104 	addi	r7,r7,4
811106c8:	4ad2983a 	sll	r9,r9,r11
811106cc:	498cb03a 	or	r6,r9,r6
811106d0:	51bfff15 	stw	r6,-4(r10)
811106d4:	39bfff17 	ldw	r6,-4(r7)
811106d8:	314cd83a 	srl	r6,r6,r5
811106dc:	38bff736 	bltu	r7,r2,811106bc <__reset+0xfb0f06bc>
811106e0:	10c7c83a 	sub	r3,r2,r3
811106e4:	18fffec4 	addi	r3,r3,-5
811106e8:	1806d0ba 	srli	r3,r3,2
811106ec:	18c00044 	addi	r3,r3,1
811106f0:	18c7883a 	add	r3,r3,r3
811106f4:	18c7883a 	add	r3,r3,r3
811106f8:	40c7883a 	add	r3,r8,r3
811106fc:	19800015 	stw	r6,0(r3)
81110700:	30000126 	beq	r6,zero,81110708 <rshift+0x98>
81110704:	18c00104 	addi	r3,r3,4
81110708:	1a05c83a 	sub	r2,r3,r8
8111070c:	1005d0ba 	srai	r2,r2,2
81110710:	00001206 	br	8111075c <rshift+0xec>
81110714:	20000415 	stw	zero,16(r4)
81110718:	20000515 	stw	zero,20(r4)
8111071c:	f800283a 	ret
81110720:	18bffc2e 	bgeu	r3,r2,81110714 <__reset+0xfb0f0714>
81110724:	180d883a 	mov	r6,r3
81110728:	400b883a 	mov	r5,r8
8111072c:	31c00017 	ldw	r7,0(r6)
81110730:	29400104 	addi	r5,r5,4
81110734:	31800104 	addi	r6,r6,4
81110738:	29ffff15 	stw	r7,-4(r5)
8111073c:	30bffb36 	bltu	r6,r2,8111072c <__reset+0xfb0f072c>
81110740:	00c6303a 	nor	r3,zero,r3
81110744:	1885883a 	add	r2,r3,r2
81110748:	1004d0ba 	srli	r2,r2,2
8111074c:	10800044 	addi	r2,r2,1
81110750:	1085883a 	add	r2,r2,r2
81110754:	1085883a 	add	r2,r2,r2
81110758:	1005d0ba 	srai	r2,r2,2
8111075c:	20800415 	stw	r2,16(r4)
81110760:	103fed26 	beq	r2,zero,81110718 <__reset+0xfb0f0718>
81110764:	f800283a 	ret
81110768:	4007883a 	mov	r3,r8
8111076c:	003fe306 	br	811106fc <__reset+0xfb0f06fc>

81110770 <__gethex>:
81110770:	deffeb04 	addi	sp,sp,-84
81110774:	dfc01415 	stw	ra,80(sp)
81110778:	dd801115 	stw	r22,68(sp)
8111077c:	dcc00e15 	stw	r19,56(sp)
81110780:	dc800d15 	stw	r18,52(sp)
81110784:	2827883a 	mov	r19,r5
81110788:	d9000115 	stw	r4,4(sp)
8111078c:	d9800015 	stw	r6,0(sp)
81110790:	d9c00415 	stw	r7,16(sp)
81110794:	df001315 	stw	fp,76(sp)
81110798:	ddc01215 	stw	r23,72(sp)
8111079c:	dd401015 	stw	r21,64(sp)
811107a0:	dd000f15 	stw	r20,60(sp)
811107a4:	dc400c15 	stw	r17,48(sp)
811107a8:	dc000b15 	stw	r16,44(sp)
811107ac:	11087300 	call	81108730 <_localeconv_r>
811107b0:	14800017 	ldw	r18,0(r2)
811107b4:	9009883a 	mov	r4,r18
811107b8:	1101bb00 	call	81101bb0 <strlen>
811107bc:	98c00017 	ldw	r3,0(r19)
811107c0:	102d883a 	mov	r22,r2
811107c4:	9085883a 	add	r2,r18,r2
811107c8:	10bfffc3 	ldbu	r2,-1(r2)
811107cc:	19000083 	ldbu	r4,2(r3)
811107d0:	d8800305 	stb	r2,12(sp)
811107d4:	00800c04 	movi	r2,48
811107d8:	2081521e 	bne	r4,r2,81110d24 <__gethex+0x5b4>
811107dc:	017fff84 	movi	r5,-2
811107e0:	188000c4 	addi	r2,r3,3
811107e4:	28cbc83a 	sub	r5,r5,r3
811107e8:	200d883a 	mov	r6,r4
811107ec:	28a3883a 	add	r17,r5,r2
811107f0:	102b883a 	mov	r21,r2
811107f4:	10800044 	addi	r2,r2,1
811107f8:	113fffc3 	ldbu	r4,-1(r2)
811107fc:	21bffb26 	beq	r4,r6,811107ec <__reset+0xfb0f07ec>
81110800:	052044b4 	movhi	r20,33042
81110804:	a512fe04 	addi	r20,r20,19448
81110808:	a109883a 	add	r4,r20,r4
8111080c:	20800003 	ldbu	r2,0(r4)
81110810:	10008826 	beq	r2,zero,81110a34 <__gethex+0x2c4>
81110814:	a8800003 	ldbu	r2,0(r21)
81110818:	0015883a 	mov	r10,zero
8111081c:	002f883a 	mov	r23,zero
81110820:	a085883a 	add	r2,r20,r2
81110824:	10800003 	ldbu	r2,0(r2)
81110828:	a821883a 	mov	r16,r21
8111082c:	10000526 	beq	r2,zero,81110844 <__gethex+0xd4>
81110830:	84000044 	addi	r16,r16,1
81110834:	80800003 	ldbu	r2,0(r16)
81110838:	a085883a 	add	r2,r20,r2
8111083c:	10800003 	ldbu	r2,0(r2)
81110840:	103ffb1e 	bne	r2,zero,81110830 <__reset+0xfb0f0830>
81110844:	b00d883a 	mov	r6,r22
81110848:	900b883a 	mov	r5,r18
8111084c:	8009883a 	mov	r4,r16
81110850:	da800a15 	stw	r10,40(sp)
81110854:	11111fc0 	call	811111fc <strncmp>
81110858:	da800a17 	ldw	r10,40(sp)
8111085c:	1000031e 	bne	r2,zero,8111086c <__gethex+0xfc>
81110860:	b8015226 	beq	r23,zero,81110dac <__gethex+0x63c>
81110864:	80800003 	ldbu	r2,0(r16)
81110868:	00000206 	br	81110874 <__gethex+0x104>
8111086c:	80800003 	ldbu	r2,0(r16)
81110870:	b8011f26 	beq	r23,zero,81110cf0 <__gethex+0x580>
81110874:	85efc83a 	sub	r23,r16,r23
81110878:	bdef883a 	add	r23,r23,r23
8111087c:	bdef883a 	add	r23,r23,r23
81110880:	05efc83a 	sub	r23,zero,r23
81110884:	10803fcc 	andi	r2,r2,255
81110888:	01001404 	movi	r4,80
8111088c:	11008626 	beq	r2,r4,81110aa8 <__gethex+0x338>
81110890:	01001c04 	movi	r4,112
81110894:	11008426 	beq	r2,r4,81110aa8 <__gethex+0x338>
81110898:	8039883a 	mov	fp,r16
8111089c:	9c000015 	stw	r16,0(r19)
811108a0:	5000711e 	bne	r10,zero,81110a68 <__gethex+0x2f8>
811108a4:	e545c83a 	sub	r2,fp,r21
811108a8:	10bfffc4 	addi	r2,r2,-1
811108ac:	010001c4 	movi	r4,7
811108b0:	000b883a 	mov	r5,zero
811108b4:	2080030e 	bge	r4,r2,811108c4 <__gethex+0x154>
811108b8:	1005d07a 	srai	r2,r2,1
811108bc:	29400044 	addi	r5,r5,1
811108c0:	20bffd16 	blt	r4,r2,811108b8 <__reset+0xfb0f08b8>
811108c4:	d9000117 	ldw	r4,4(sp)
811108c8:	1108d6c0 	call	81108d6c <_Balloc>
811108cc:	10c00504 	addi	r3,r2,20
811108d0:	d8c00215 	stw	r3,8(sp)
811108d4:	1021883a 	mov	r16,r2
811108d8:	af01732e 	bgeu	r21,fp,81110ea8 <__gethex+0x738>
811108dc:	dc400303 	ldbu	r17,12(sp)
811108e0:	03400044 	movi	r13,1
811108e4:	1815883a 	mov	r10,r3
811108e8:	0013883a 	mov	r9,zero
811108ec:	0027883a 	mov	r19,zero
811108f0:	6d9bc83a 	sub	r13,r13,r22
811108f4:	02c00804 	movi	r11,32
811108f8:	e0bfffc3 	ldbu	r2,-1(fp)
811108fc:	e3bfffc4 	addi	r14,fp,-1
81110900:	88803026 	beq	r17,r2,811109c4 <__gethex+0x254>
81110904:	9ac04526 	beq	r19,r11,81110a1c <__gethex+0x2ac>
81110908:	980b883a 	mov	r5,r19
8111090c:	9cc00104 	addi	r19,r19,4
81110910:	e13fffc3 	ldbu	r4,-1(fp)
81110914:	7039883a 	mov	fp,r14
81110918:	a109883a 	add	r4,r20,r4
8111091c:	20800003 	ldbu	r2,0(r4)
81110920:	108003cc 	andi	r2,r2,15
81110924:	1144983a 	sll	r2,r2,r5
81110928:	4892b03a 	or	r9,r9,r2
8111092c:	af3ff236 	bltu	r21,fp,811108f8 <__reset+0xfb0f08f8>
81110930:	d8c00217 	ldw	r3,8(sp)
81110934:	50800104 	addi	r2,r10,4
81110938:	52400015 	stw	r9,0(r10)
8111093c:	10c5c83a 	sub	r2,r2,r3
81110940:	1005d0ba 	srai	r2,r2,2
81110944:	4809883a 	mov	r4,r9
81110948:	80800415 	stw	r2,16(r16)
8111094c:	1022917a 	slli	r17,r2,5
81110950:	11090600 	call	81109060 <__hi0bits>
81110954:	d8c00017 	ldw	r3,0(sp)
81110958:	8885c83a 	sub	r2,r17,r2
8111095c:	1c800017 	ldw	r18,0(r3)
81110960:	9080c716 	blt	r18,r2,81110c80 <__gethex+0x510>
81110964:	1480e416 	blt	r2,r18,81110cf8 <__gethex+0x588>
81110968:	0027883a 	mov	r19,zero
8111096c:	d8c00017 	ldw	r3,0(sp)
81110970:	18800217 	ldw	r2,8(r3)
81110974:	15c08d16 	blt	r2,r23,81110bac <__gethex+0x43c>
81110978:	d8c00017 	ldw	r3,0(sp)
8111097c:	18800117 	ldw	r2,4(r3)
81110980:	b880aa0e 	bge	r23,r2,81110c2c <__gethex+0x4bc>
81110984:	15efc83a 	sub	r23,r2,r23
81110988:	bc80ed16 	blt	r23,r18,81110d40 <__gethex+0x5d0>
8111098c:	18c00317 	ldw	r3,12(r3)
81110990:	01000084 	movi	r4,2
81110994:	19014926 	beq	r3,r4,81110ebc <__gethex+0x74c>
81110998:	010000c4 	movi	r4,3
8111099c:	19012e26 	beq	r3,r4,81110e58 <__gethex+0x6e8>
811109a0:	01000044 	movi	r4,1
811109a4:	19014826 	beq	r3,r4,81110ec8 <__gethex+0x758>
811109a8:	d9000117 	ldw	r4,4(sp)
811109ac:	800b883a 	mov	r5,r16
811109b0:	1108e140 	call	81108e14 <_Bfree>
811109b4:	d8801517 	ldw	r2,84(sp)
811109b8:	10000015 	stw	zero,0(r2)
811109bc:	00801404 	movi	r2,80
811109c0:	00002b06 	br	81110a70 <__gethex+0x300>
811109c4:	735f883a 	add	r15,r14,r13
811109c8:	7d7fce36 	bltu	r15,r21,81110904 <__reset+0xfb0f0904>
811109cc:	7809883a 	mov	r4,r15
811109d0:	b00d883a 	mov	r6,r22
811109d4:	900b883a 	mov	r5,r18
811109d8:	da400515 	stw	r9,20(sp)
811109dc:	da800a15 	stw	r10,40(sp)
811109e0:	dac00915 	stw	r11,36(sp)
811109e4:	db400815 	stw	r13,32(sp)
811109e8:	db800615 	stw	r14,24(sp)
811109ec:	dbc00715 	stw	r15,28(sp)
811109f0:	11111fc0 	call	811111fc <strncmp>
811109f4:	da400517 	ldw	r9,20(sp)
811109f8:	da800a17 	ldw	r10,40(sp)
811109fc:	dac00917 	ldw	r11,36(sp)
81110a00:	db400817 	ldw	r13,32(sp)
81110a04:	db800617 	ldw	r14,24(sp)
81110a08:	dbc00717 	ldw	r15,28(sp)
81110a0c:	103fbd1e 	bne	r2,zero,81110904 <__reset+0xfb0f0904>
81110a10:	7839883a 	mov	fp,r15
81110a14:	af3fb836 	bltu	r21,fp,811108f8 <__reset+0xfb0f08f8>
81110a18:	003fc506 	br	81110930 <__reset+0xfb0f0930>
81110a1c:	04c00104 	movi	r19,4
81110a20:	52400015 	stw	r9,0(r10)
81110a24:	000b883a 	mov	r5,zero
81110a28:	54d5883a 	add	r10,r10,r19
81110a2c:	0013883a 	mov	r9,zero
81110a30:	003fb706 	br	81110910 <__reset+0xfb0f0910>
81110a34:	b00d883a 	mov	r6,r22
81110a38:	900b883a 	mov	r5,r18
81110a3c:	a809883a 	mov	r4,r21
81110a40:	11111fc0 	call	811111fc <strncmp>
81110a44:	10006426 	beq	r2,zero,81110bd8 <__gethex+0x468>
81110a48:	a8800003 	ldbu	r2,0(r21)
81110a4c:	a821883a 	mov	r16,r21
81110a50:	10803fcc 	andi	r2,r2,255
81110a54:	01001404 	movi	r4,80
81110a58:	11001126 	beq	r2,r4,81110aa0 <__gethex+0x330>
81110a5c:	01001c04 	movi	r4,112
81110a60:	11000f26 	beq	r2,r4,81110aa0 <__gethex+0x330>
81110a64:	9c000015 	stw	r16,0(r19)
81110a68:	8800831e 	bne	r17,zero,81110c78 <__gethex+0x508>
81110a6c:	00800184 	movi	r2,6
81110a70:	dfc01417 	ldw	ra,80(sp)
81110a74:	df001317 	ldw	fp,76(sp)
81110a78:	ddc01217 	ldw	r23,72(sp)
81110a7c:	dd801117 	ldw	r22,68(sp)
81110a80:	dd401017 	ldw	r21,64(sp)
81110a84:	dd000f17 	ldw	r20,60(sp)
81110a88:	dcc00e17 	ldw	r19,56(sp)
81110a8c:	dc800d17 	ldw	r18,52(sp)
81110a90:	dc400c17 	ldw	r17,48(sp)
81110a94:	dc000b17 	ldw	r16,44(sp)
81110a98:	dec01504 	addi	sp,sp,84
81110a9c:	f800283a 	ret
81110aa0:	002f883a 	mov	r23,zero
81110aa4:	02800044 	movi	r10,1
81110aa8:	80800043 	ldbu	r2,1(r16)
81110aac:	01400ac4 	movi	r5,43
81110ab0:	11003fcc 	andi	r4,r2,255
81110ab4:	21406e26 	beq	r4,r5,81110c70 <__gethex+0x500>
81110ab8:	01400b44 	movi	r5,45
81110abc:	21404226 	beq	r4,r5,81110bc8 <__gethex+0x458>
81110ac0:	81400044 	addi	r5,r16,1
81110ac4:	000d883a 	mov	r6,zero
81110ac8:	10803fcc 	andi	r2,r2,255
81110acc:	a085883a 	add	r2,r20,r2
81110ad0:	11000003 	ldbu	r4,0(r2)
81110ad4:	03000604 	movi	r12,24
81110ad8:	20bfffc4 	addi	r2,r4,-1
81110adc:	10803fcc 	andi	r2,r2,255
81110ae0:	60bf6d36 	bltu	r12,r2,81110898 <__reset+0xfb0f0898>
81110ae4:	2ac00043 	ldbu	r11,1(r5)
81110ae8:	20803fcc 	andi	r2,r4,255
81110aec:	012044b4 	movhi	r4,33042
81110af0:	2112fe04 	addi	r4,r4,19448
81110af4:	22c9883a 	add	r4,r4,r11
81110af8:	23400003 	ldbu	r13,0(r4)
81110afc:	10bffc04 	addi	r2,r2,-16
81110b00:	29400044 	addi	r5,r5,1
81110b04:	693fffc4 	addi	r4,r13,-1
81110b08:	21003fcc 	andi	r4,r4,255
81110b0c:	6b403fcc 	andi	r13,r13,255
81110b10:	61000b36 	bltu	r12,r4,81110b40 <__gethex+0x3d0>
81110b14:	29400044 	addi	r5,r5,1
81110b18:	29000003 	ldbu	r4,0(r5)
81110b1c:	108002a4 	muli	r2,r2,10
81110b20:	a109883a 	add	r4,r20,r4
81110b24:	22c00003 	ldbu	r11,0(r4)
81110b28:	1345883a 	add	r2,r2,r13
81110b2c:	10bffc04 	addi	r2,r2,-16
81110b30:	593fffc4 	addi	r4,r11,-1
81110b34:	21003fcc 	andi	r4,r4,255
81110b38:	5b403fcc 	andi	r13,r11,255
81110b3c:	613ff52e 	bgeu	r12,r4,81110b14 <__reset+0xfb0f0b14>
81110b40:	30000126 	beq	r6,zero,81110b48 <__gethex+0x3d8>
81110b44:	0085c83a 	sub	r2,zero,r2
81110b48:	8039883a 	mov	fp,r16
81110b4c:	b8af883a 	add	r23,r23,r2
81110b50:	2821883a 	mov	r16,r5
81110b54:	003f5106 	br	8111089c <__reset+0xfb0f089c>
81110b58:	80800217 	ldw	r2,8(r16)
81110b5c:	e080f00e 	bge	fp,r2,81110f20 <__gethex+0x7b0>
81110b60:	e007883a 	mov	r3,fp
81110b64:	18800144 	addi	r2,r3,5
81110b68:	1085883a 	add	r2,r2,r2
81110b6c:	18c00044 	addi	r3,r3,1
81110b70:	1085883a 	add	r2,r2,r2
81110b74:	8085883a 	add	r2,r16,r2
81110b78:	80c00415 	stw	r3,16(r16)
81110b7c:	01000044 	movi	r4,1
81110b80:	11000015 	stw	r4,0(r2)
81110b84:	00800084 	movi	r2,2
81110b88:	8880d826 	beq	r17,r2,81110eec <__gethex+0x77c>
81110b8c:	e0c0ac0e 	bge	fp,r3,81110e40 <__gethex+0x6d0>
81110b90:	01400044 	movi	r5,1
81110b94:	8009883a 	mov	r4,r16
81110b98:	11106700 	call	81110670 <rshift>
81110b9c:	d8c00017 	ldw	r3,0(sp)
81110ba0:	bdc00044 	addi	r23,r23,1
81110ba4:	18800217 	ldw	r2,8(r3)
81110ba8:	15c0a70e 	bge	r2,r23,81110e48 <__gethex+0x6d8>
81110bac:	d9000117 	ldw	r4,4(sp)
81110bb0:	800b883a 	mov	r5,r16
81110bb4:	1108e140 	call	81108e14 <_Bfree>
81110bb8:	d9001517 	ldw	r4,84(sp)
81110bbc:	008028c4 	movi	r2,163
81110bc0:	20000015 	stw	zero,0(r4)
81110bc4:	003faa06 	br	81110a70 <__reset+0xfb0f0a70>
81110bc8:	01800044 	movi	r6,1
81110bcc:	80800083 	ldbu	r2,2(r16)
81110bd0:	81400084 	addi	r5,r16,2
81110bd4:	003fbc06 	br	81110ac8 <__reset+0xfb0f0ac8>
81110bd8:	ada1883a 	add	r16,r21,r22
81110bdc:	81000003 	ldbu	r4,0(r16)
81110be0:	21403fcc 	andi	r5,r4,255
81110be4:	a145883a 	add	r2,r20,r5
81110be8:	10800003 	ldbu	r2,0(r2)
81110bec:	11803fcc 	andi	r6,r2,255
81110bf0:	30004f26 	beq	r6,zero,81110d30 <__gethex+0x5c0>
81110bf4:	00c00c04 	movi	r3,48
81110bf8:	802b883a 	mov	r21,r16
81110bfc:	28c0061e 	bne	r5,r3,81110c18 <__gethex+0x4a8>
81110c00:	2809883a 	mov	r4,r5
81110c04:	ad400044 	addi	r21,r21,1
81110c08:	a8800003 	ldbu	r2,0(r21)
81110c0c:	113ffd26 	beq	r2,r4,81110c04 <__reset+0xfb0f0c04>
81110c10:	a085883a 	add	r2,r20,r2
81110c14:	10800003 	ldbu	r2,0(r2)
81110c18:	10803fcc 	andi	r2,r2,255
81110c1c:	1015003a 	cmpeq	r10,r2,zero
81110c20:	802f883a 	mov	r23,r16
81110c24:	04400044 	movi	r17,1
81110c28:	003eff06 	br	81110828 <__reset+0xfb0f0828>
81110c2c:	04400044 	movi	r17,1
81110c30:	98000926 	beq	r19,zero,81110c58 <__gethex+0x4e8>
81110c34:	d8c00017 	ldw	r3,0(sp)
81110c38:	18800317 	ldw	r2,12(r3)
81110c3c:	00c00084 	movi	r3,2
81110c40:	10c06826 	beq	r2,r3,81110de4 <__gethex+0x674>
81110c44:	00c000c4 	movi	r3,3
81110c48:	10c06a26 	beq	r2,r3,81110df4 <__gethex+0x684>
81110c4c:	00c00044 	movi	r3,1
81110c50:	10c08d26 	beq	r2,r3,81110e88 <__gethex+0x718>
81110c54:	8c400414 	ori	r17,r17,16
81110c58:	d9001517 	ldw	r4,84(sp)
81110c5c:	d8c00417 	ldw	r3,16(sp)
81110c60:	8805883a 	mov	r2,r17
81110c64:	24000015 	stw	r16,0(r4)
81110c68:	1dc00015 	stw	r23,0(r3)
81110c6c:	003f8006 	br	81110a70 <__reset+0xfb0f0a70>
81110c70:	000d883a 	mov	r6,zero
81110c74:	003fd506 	br	81110bcc <__reset+0xfb0f0bcc>
81110c78:	0005883a 	mov	r2,zero
81110c7c:	003f7c06 	br	81110a70 <__reset+0xfb0f0a70>
81110c80:	14a3c83a 	sub	r17,r2,r18
81110c84:	880b883a 	mov	r5,r17
81110c88:	8009883a 	mov	r4,r16
81110c8c:	1109cdc0 	call	81109cdc <__any_on>
81110c90:	10002926 	beq	r2,zero,81110d38 <__gethex+0x5c8>
81110c94:	897fffc4 	addi	r5,r17,-1
81110c98:	2807d17a 	srai	r3,r5,5
81110c9c:	d8800217 	ldw	r2,8(sp)
81110ca0:	290007cc 	andi	r4,r5,31
81110ca4:	18c7883a 	add	r3,r3,r3
81110ca8:	18c7883a 	add	r3,r3,r3
81110cac:	04c00044 	movi	r19,1
81110cb0:	10c7883a 	add	r3,r2,r3
81110cb4:	9908983a 	sll	r4,r19,r4
81110cb8:	18c00017 	ldw	r3,0(r3)
81110cbc:	20c6703a 	and	r3,r4,r3
81110cc0:	18000626 	beq	r3,zero,81110cdc <__gethex+0x56c>
81110cc4:	99407b0e 	bge	r19,r5,81110eb4 <__gethex+0x744>
81110cc8:	897fff84 	addi	r5,r17,-2
81110ccc:	8009883a 	mov	r4,r16
81110cd0:	1109cdc0 	call	81109cdc <__any_on>
81110cd4:	10007726 	beq	r2,zero,81110eb4 <__gethex+0x744>
81110cd8:	04c000c4 	movi	r19,3
81110cdc:	880b883a 	mov	r5,r17
81110ce0:	8009883a 	mov	r4,r16
81110ce4:	11106700 	call	81110670 <rshift>
81110ce8:	bc6f883a 	add	r23,r23,r17
81110cec:	003f1f06 	br	8111096c <__reset+0xfb0f096c>
81110cf0:	002f883a 	mov	r23,zero
81110cf4:	003ee306 	br	81110884 <__reset+0xfb0f0884>
81110cf8:	d9000117 	ldw	r4,4(sp)
81110cfc:	90a3c83a 	sub	r17,r18,r2
81110d00:	800b883a 	mov	r5,r16
81110d04:	880d883a 	mov	r6,r17
81110d08:	11094ec0 	call	811094ec <__lshift>
81110d0c:	10c00504 	addi	r3,r2,20
81110d10:	1021883a 	mov	r16,r2
81110d14:	bc6fc83a 	sub	r23,r23,r17
81110d18:	d8c00215 	stw	r3,8(sp)
81110d1c:	0027883a 	mov	r19,zero
81110d20:	003f1206 	br	8111096c <__reset+0xfb0f096c>
81110d24:	1d400084 	addi	r21,r3,2
81110d28:	0023883a 	mov	r17,zero
81110d2c:	003eb406 	br	81110800 <__reset+0xfb0f0800>
81110d30:	2005883a 	mov	r2,r4
81110d34:	003f4606 	br	81110a50 <__reset+0xfb0f0a50>
81110d38:	0027883a 	mov	r19,zero
81110d3c:	003fe706 	br	81110cdc <__reset+0xfb0f0cdc>
81110d40:	bc7fffc4 	addi	r17,r23,-1
81110d44:	9800421e 	bne	r19,zero,81110e50 <__gethex+0x6e0>
81110d48:	88000426 	beq	r17,zero,81110d5c <__gethex+0x5ec>
81110d4c:	880b883a 	mov	r5,r17
81110d50:	8009883a 	mov	r4,r16
81110d54:	1109cdc0 	call	81109cdc <__any_on>
81110d58:	1027883a 	mov	r19,r2
81110d5c:	8805d17a 	srai	r2,r17,5
81110d60:	d8c00217 	ldw	r3,8(sp)
81110d64:	8c4007cc 	andi	r17,r17,31
81110d68:	1085883a 	add	r2,r2,r2
81110d6c:	1085883a 	add	r2,r2,r2
81110d70:	1885883a 	add	r2,r3,r2
81110d74:	00c00044 	movi	r3,1
81110d78:	1c62983a 	sll	r17,r3,r17
81110d7c:	10800017 	ldw	r2,0(r2)
81110d80:	8884703a 	and	r2,r17,r2
81110d84:	10000126 	beq	r2,zero,81110d8c <__gethex+0x61c>
81110d88:	9cc00094 	ori	r19,r19,2
81110d8c:	b80b883a 	mov	r5,r23
81110d90:	8009883a 	mov	r4,r16
81110d94:	11106700 	call	81110670 <rshift>
81110d98:	d8c00017 	ldw	r3,0(sp)
81110d9c:	95e5c83a 	sub	r18,r18,r23
81110da0:	04400084 	movi	r17,2
81110da4:	1dc00117 	ldw	r23,4(r3)
81110da8:	003fa106 	br	81110c30 <__reset+0xfb0f0c30>
81110dac:	85af883a 	add	r23,r16,r22
81110db0:	b8800003 	ldbu	r2,0(r23)
81110db4:	b821883a 	mov	r16,r23
81110db8:	11003fcc 	andi	r4,r2,255
81110dbc:	a109883a 	add	r4,r20,r4
81110dc0:	21000003 	ldbu	r4,0(r4)
81110dc4:	203eaa26 	beq	r4,zero,81110870 <__reset+0xfb0f0870>
81110dc8:	84000044 	addi	r16,r16,1
81110dcc:	80800003 	ldbu	r2,0(r16)
81110dd0:	11003fcc 	andi	r4,r2,255
81110dd4:	a109883a 	add	r4,r20,r4
81110dd8:	21000003 	ldbu	r4,0(r4)
81110ddc:	203ffa1e 	bne	r4,zero,81110dc8 <__reset+0xfb0f0dc8>
81110de0:	003ea306 	br	81110870 <__reset+0xfb0f0870>
81110de4:	d9001617 	ldw	r4,88(sp)
81110de8:	00800044 	movi	r2,1
81110dec:	1109c83a 	sub	r4,r2,r4
81110df0:	d9001615 	stw	r4,88(sp)
81110df4:	d8801617 	ldw	r2,88(sp)
81110df8:	103f9626 	beq	r2,zero,81110c54 <__reset+0xfb0f0c54>
81110dfc:	87000417 	ldw	fp,16(r16)
81110e00:	d9800217 	ldw	r6,8(sp)
81110e04:	013fffc4 	movi	r4,-1
81110e08:	e727883a 	add	r19,fp,fp
81110e0c:	9ce7883a 	add	r19,r19,r19
81110e10:	3005883a 	mov	r2,r6
81110e14:	34cb883a 	add	r5,r6,r19
81110e18:	00000306 	br	81110e28 <__gethex+0x6b8>
81110e1c:	10000015 	stw	zero,0(r2)
81110e20:	10800104 	addi	r2,r2,4
81110e24:	117f4c2e 	bgeu	r2,r5,81110b58 <__reset+0xfb0f0b58>
81110e28:	10c00017 	ldw	r3,0(r2)
81110e2c:	193ffb26 	beq	r3,r4,81110e1c <__reset+0xfb0f0e1c>
81110e30:	18c00044 	addi	r3,r3,1
81110e34:	10c00015 	stw	r3,0(r2)
81110e38:	00800084 	movi	r2,2
81110e3c:	88802b26 	beq	r17,r2,81110eec <__gethex+0x77c>
81110e40:	948007cc 	andi	r18,r18,31
81110e44:	90002f1e 	bne	r18,zero,81110f04 <__gethex+0x794>
81110e48:	04400844 	movi	r17,33
81110e4c:	003f8206 	br	81110c58 <__reset+0xfb0f0c58>
81110e50:	04c00044 	movi	r19,1
81110e54:	003fc106 	br	81110d5c <__reset+0xfb0f0d5c>
81110e58:	d8c01617 	ldw	r3,88(sp)
81110e5c:	183ed226 	beq	r3,zero,811109a8 <__reset+0xfb0f09a8>
81110e60:	d8c00417 	ldw	r3,16(sp)
81110e64:	d9001517 	ldw	r4,84(sp)
81110e68:	18800015 	stw	r2,0(r3)
81110e6c:	d8c00217 	ldw	r3,8(sp)
81110e70:	00800044 	movi	r2,1
81110e74:	80800415 	stw	r2,16(r16)
81110e78:	18800015 	stw	r2,0(r3)
81110e7c:	24000015 	stw	r16,0(r4)
81110e80:	00801884 	movi	r2,98
81110e84:	003efa06 	br	81110a70 <__reset+0xfb0f0a70>
81110e88:	9880008c 	andi	r2,r19,2
81110e8c:	103f7126 	beq	r2,zero,81110c54 <__reset+0xfb0f0c54>
81110e90:	d8c00217 	ldw	r3,8(sp)
81110e94:	18800017 	ldw	r2,0(r3)
81110e98:	9884b03a 	or	r2,r19,r2
81110e9c:	1080004c 	andi	r2,r2,1
81110ea0:	103fd61e 	bne	r2,zero,81110dfc <__reset+0xfb0f0dfc>
81110ea4:	003f6b06 	br	81110c54 <__reset+0xfb0f0c54>
81110ea8:	da800217 	ldw	r10,8(sp)
81110eac:	0013883a 	mov	r9,zero
81110eb0:	003e9f06 	br	81110930 <__reset+0xfb0f0930>
81110eb4:	04c00084 	movi	r19,2
81110eb8:	003f8806 	br	81110cdc <__reset+0xfb0f0cdc>
81110ebc:	d9001617 	ldw	r4,88(sp)
81110ec0:	203fe726 	beq	r4,zero,81110e60 <__reset+0xfb0f0e60>
81110ec4:	003eb806 	br	811109a8 <__reset+0xfb0f09a8>
81110ec8:	95feb71e 	bne	r18,r23,811109a8 <__reset+0xfb0f09a8>
81110ecc:	1cbfe40e 	bge	r3,r18,81110e60 <__reset+0xfb0f0e60>
81110ed0:	917fffc4 	addi	r5,r18,-1
81110ed4:	8009883a 	mov	r4,r16
81110ed8:	1109cdc0 	call	81109cdc <__any_on>
81110edc:	103eb226 	beq	r2,zero,811109a8 <__reset+0xfb0f09a8>
81110ee0:	d8c00017 	ldw	r3,0(sp)
81110ee4:	18800117 	ldw	r2,4(r3)
81110ee8:	003fdd06 	br	81110e60 <__reset+0xfb0f0e60>
81110eec:	d8c00017 	ldw	r3,0(sp)
81110ef0:	18800017 	ldw	r2,0(r3)
81110ef4:	10bfffc4 	addi	r2,r2,-1
81110ef8:	90801c26 	beq	r18,r2,81110f6c <__gethex+0x7fc>
81110efc:	04400884 	movi	r17,34
81110f00:	003f5506 	br	81110c58 <__reset+0xfb0f0c58>
81110f04:	34c5883a 	add	r2,r6,r19
81110f08:	113fff17 	ldw	r4,-4(r2)
81110f0c:	11090600 	call	81109060 <__hi0bits>
81110f10:	00c00804 	movi	r3,32
81110f14:	1ca5c83a 	sub	r18,r3,r18
81110f18:	14bfcb0e 	bge	r2,r18,81110e48 <__reset+0xfb0f0e48>
81110f1c:	003f1c06 	br	81110b90 <__reset+0xfb0f0b90>
81110f20:	81400117 	ldw	r5,4(r16)
81110f24:	d9000117 	ldw	r4,4(sp)
81110f28:	29400044 	addi	r5,r5,1
81110f2c:	1108d6c0 	call	81108d6c <_Balloc>
81110f30:	81800417 	ldw	r6,16(r16)
81110f34:	81400304 	addi	r5,r16,12
81110f38:	11000304 	addi	r4,r2,12
81110f3c:	31800084 	addi	r6,r6,2
81110f40:	318d883a 	add	r6,r6,r6
81110f44:	318d883a 	add	r6,r6,r6
81110f48:	1029883a 	mov	r20,r2
81110f4c:	1108ac80 	call	81108ac8 <memcpy>
81110f50:	d9000117 	ldw	r4,4(sp)
81110f54:	800b883a 	mov	r5,r16
81110f58:	a021883a 	mov	r16,r20
81110f5c:	1108e140 	call	81108e14 <_Bfree>
81110f60:	a0c00417 	ldw	r3,16(r20)
81110f64:	a1800504 	addi	r6,r20,20
81110f68:	003efe06 	br	81110b64 <__reset+0xfb0f0b64>
81110f6c:	9005d17a 	srai	r2,r18,5
81110f70:	944007cc 	andi	r17,r18,31
81110f74:	1085883a 	add	r2,r2,r2
81110f78:	1085883a 	add	r2,r2,r2
81110f7c:	3087883a 	add	r3,r6,r2
81110f80:	00800044 	movi	r2,1
81110f84:	1462983a 	sll	r17,r2,r17
81110f88:	18800017 	ldw	r2,0(r3)
81110f8c:	8884703a 	and	r2,r17,r2
81110f90:	1022c03a 	cmpne	r17,r2,zero
81110f94:	00800884 	movi	r2,34
81110f98:	1463c83a 	sub	r17,r2,r17
81110f9c:	003f2e06 	br	81110c58 <__reset+0xfb0f0c58>

81110fa0 <__hexnan>:
81110fa0:	defff904 	addi	sp,sp,-28
81110fa4:	dc800215 	stw	r18,8(sp)
81110fa8:	2c800017 	ldw	r18,0(r5)
81110fac:	dfc00615 	stw	ra,24(sp)
81110fb0:	dd400515 	stw	r21,20(sp)
81110fb4:	901fd17a 	srai	r15,r18,5
81110fb8:	dd000415 	stw	r20,16(sp)
81110fbc:	dcc00315 	stw	r19,12(sp)
81110fc0:	7bdf883a 	add	r15,r15,r15
81110fc4:	7bdf883a 	add	r15,r15,r15
81110fc8:	dc400115 	stw	r17,4(sp)
81110fcc:	dc000015 	stw	r16,0(sp)
81110fd0:	948007cc 	andi	r18,r18,31
81110fd4:	33df883a 	add	r15,r6,r15
81110fd8:	90000126 	beq	r18,zero,81110fe0 <__hexnan+0x40>
81110fdc:	7bc00104 	addi	r15,r15,4
81110fe0:	22000017 	ldw	r8,0(r4)
81110fe4:	7affff04 	addi	r11,r15,-4
81110fe8:	03a044b4 	movhi	r14,33042
81110fec:	783fff15 	stw	zero,-4(r15)
81110ff0:	581b883a 	mov	r13,r11
81110ff4:	580b883a 	mov	r5,r11
81110ff8:	000f883a 	mov	r7,zero
81110ffc:	003f883a 	mov	ra,zero
81111000:	0019883a 	mov	r12,zero
81111004:	7392fe04 	addi	r14,r14,19448
81111008:	04400204 	movi	r17,8
8111100c:	04000804 	movi	r16,32
81111010:	04c001c4 	movi	r19,7
81111014:	42000044 	addi	r8,r8,1
81111018:	40c00003 	ldbu	r3,0(r8)
8111101c:	18001d26 	beq	r3,zero,81111094 <__hexnan+0xf4>
81111020:	70c5883a 	add	r2,r14,r3
81111024:	10800003 	ldbu	r2,0(r2)
81111028:	12403fcc 	andi	r9,r2,255
8111102c:	4800301e 	bne	r9,zero,811110f0 <__hexnan+0x150>
81111030:	80c04236 	bltu	r16,r3,8111113c <__hexnan+0x19c>
81111034:	fb3ff70e 	bge	ra,r12,81111014 <__reset+0xfb0f1014>
81111038:	2b40112e 	bgeu	r5,r13,81111080 <__hexnan+0xe0>
8111103c:	99c01016 	blt	r19,r7,81111080 <__hexnan+0xe0>
81111040:	89e9c83a 	sub	r20,r17,r7
81111044:	a529883a 	add	r20,r20,r20
81111048:	2a800017 	ldw	r10,0(r5)
8111104c:	a529883a 	add	r20,r20,r20
81111050:	852bc83a 	sub	r21,r16,r20
81111054:	28c00104 	addi	r3,r5,4
81111058:	2805883a 	mov	r2,r5
8111105c:	19c00017 	ldw	r7,0(r3)
81111060:	10800104 	addi	r2,r2,4
81111064:	18c00104 	addi	r3,r3,4
81111068:	3d52983a 	sll	r9,r7,r21
8111106c:	4a92b03a 	or	r9,r9,r10
81111070:	3d14d83a 	srl	r10,r7,r20
81111074:	127fff15 	stw	r9,-4(r2)
81111078:	1abfff15 	stw	r10,-4(r3)
8111107c:	137ff736 	bltu	r2,r13,8111105c <__reset+0xfb0f105c>
81111080:	31402836 	bltu	r6,r5,81111124 <__hexnan+0x184>
81111084:	42000044 	addi	r8,r8,1
81111088:	40c00003 	ldbu	r3,0(r8)
8111108c:	01c00204 	movi	r7,8
81111090:	183fe31e 	bne	r3,zero,81111020 <__reset+0xfb0f1020>
81111094:	60002b26 	beq	r12,zero,81111144 <__hexnan+0x1a4>
81111098:	2b40022e 	bgeu	r5,r13,811110a4 <__hexnan+0x104>
8111109c:	008001c4 	movi	r2,7
811110a0:	11c0430e 	bge	r2,r7,811111b0 <__hexnan+0x210>
811110a4:	3140312e 	bgeu	r6,r5,8111116c <__hexnan+0x1cc>
811110a8:	3007883a 	mov	r3,r6
811110ac:	29000017 	ldw	r4,0(r5)
811110b0:	18800104 	addi	r2,r3,4
811110b4:	29400104 	addi	r5,r5,4
811110b8:	19000015 	stw	r4,0(r3)
811110bc:	1007883a 	mov	r3,r2
811110c0:	597ffa2e 	bgeu	r11,r5,811110ac <__reset+0xfb0f10ac>
811110c4:	10000015 	stw	zero,0(r2)
811110c8:	10800104 	addi	r2,r2,4
811110cc:	58bffd2e 	bgeu	r11,r2,811110c4 <__reset+0xfb0f10c4>
811110d0:	78bfff17 	ldw	r2,-4(r15)
811110d4:	1000041e 	bne	r2,zero,811110e8 <__hexnan+0x148>
811110d8:	32c02d26 	beq	r6,r11,81111190 <__hexnan+0x1f0>
811110dc:	5affff04 	addi	r11,r11,-4
811110e0:	58800017 	ldw	r2,0(r11)
811110e4:	103ffc26 	beq	r2,zero,811110d8 <__reset+0xfb0f10d8>
811110e8:	00800144 	movi	r2,5
811110ec:	00001606 	br	81111148 <__hexnan+0x1a8>
811110f0:	39c00044 	addi	r7,r7,1
811110f4:	63000044 	addi	r12,r12,1
811110f8:	89c0040e 	bge	r17,r7,8111110c <__hexnan+0x16c>
811110fc:	317fc52e 	bgeu	r6,r5,81111014 <__reset+0xfb0f1014>
81111100:	283fff15 	stw	zero,-4(r5)
81111104:	01c00044 	movi	r7,1
81111108:	297fff04 	addi	r5,r5,-4
8111110c:	28c00017 	ldw	r3,0(r5)
81111110:	108003cc 	andi	r2,r2,15
81111114:	1806913a 	slli	r3,r3,4
81111118:	1884b03a 	or	r2,r3,r2
8111111c:	28800015 	stw	r2,0(r5)
81111120:	003fbc06 	br	81111014 <__reset+0xfb0f1014>
81111124:	2b7fff04 	addi	r13,r5,-4
81111128:	283fff15 	stw	zero,-4(r5)
8111112c:	603f883a 	mov	ra,r12
81111130:	680b883a 	mov	r5,r13
81111134:	000f883a 	mov	r7,zero
81111138:	003fb606 	br	81111014 <__reset+0xfb0f1014>
8111113c:	00800a44 	movi	r2,41
81111140:	18801726 	beq	r3,r2,811111a0 <__hexnan+0x200>
81111144:	00800104 	movi	r2,4
81111148:	dfc00617 	ldw	ra,24(sp)
8111114c:	dd400517 	ldw	r21,20(sp)
81111150:	dd000417 	ldw	r20,16(sp)
81111154:	dcc00317 	ldw	r19,12(sp)
81111158:	dc800217 	ldw	r18,8(sp)
8111115c:	dc400117 	ldw	r17,4(sp)
81111160:	dc000017 	ldw	r16,0(sp)
81111164:	dec00704 	addi	sp,sp,28
81111168:	f800283a 	ret
8111116c:	903fd826 	beq	r18,zero,811110d0 <__reset+0xfb0f10d0>
81111170:	00c00804 	movi	r3,32
81111174:	1ca5c83a 	sub	r18,r3,r18
81111178:	00ffffc4 	movi	r3,-1
8111117c:	78bfff17 	ldw	r2,-4(r15)
81111180:	1c86d83a 	srl	r3,r3,r18
81111184:	1884703a 	and	r2,r3,r2
81111188:	78bfff15 	stw	r2,-4(r15)
8111118c:	003fd106 	br	811110d4 <__reset+0xfb0f10d4>
81111190:	00800044 	movi	r2,1
81111194:	58800015 	stw	r2,0(r11)
81111198:	00800144 	movi	r2,5
8111119c:	003fea06 	br	81111148 <__reset+0xfb0f1148>
811111a0:	42000044 	addi	r8,r8,1
811111a4:	22000015 	stw	r8,0(r4)
811111a8:	603fbb1e 	bne	r12,zero,81111098 <__reset+0xfb0f1098>
811111ac:	003fe506 	br	81111144 <__reset+0xfb0f1144>
811111b0:	02400204 	movi	r9,8
811111b4:	49d3c83a 	sub	r9,r9,r7
811111b8:	4a53883a 	add	r9,r9,r9
811111bc:	2a000017 	ldw	r8,0(r5)
811111c0:	4a53883a 	add	r9,r9,r9
811111c4:	02800804 	movi	r10,32
811111c8:	5255c83a 	sub	r10,r10,r9
811111cc:	28c00104 	addi	r3,r5,4
811111d0:	2805883a 	mov	r2,r5
811111d4:	19c00017 	ldw	r7,0(r3)
811111d8:	10800104 	addi	r2,r2,4
811111dc:	18c00104 	addi	r3,r3,4
811111e0:	3a88983a 	sll	r4,r7,r10
811111e4:	2208b03a 	or	r4,r4,r8
811111e8:	3a50d83a 	srl	r8,r7,r9
811111ec:	113fff15 	stw	r4,-4(r2)
811111f0:	1a3fff15 	stw	r8,-4(r3)
811111f4:	137ff736 	bltu	r2,r13,811111d4 <__reset+0xfb0f11d4>
811111f8:	003faa06 	br	811110a4 <__reset+0xfb0f10a4>

811111fc <strncmp>:
811111fc:	30003126 	beq	r6,zero,811112c4 <strncmp+0xc8>
81111200:	2144b03a 	or	r2,r4,r5
81111204:	108000cc 	andi	r2,r2,3
81111208:	10001e1e 	bne	r2,zero,81111284 <strncmp+0x88>
8111120c:	024000c4 	movi	r9,3
81111210:	49801c2e 	bgeu	r9,r6,81111284 <strncmp+0x88>
81111214:	20800017 	ldw	r2,0(r4)
81111218:	28c00017 	ldw	r3,0(r5)
8111121c:	10c0191e 	bne	r2,r3,81111284 <strncmp+0x88>
81111220:	31bfff04 	addi	r6,r6,-4
81111224:	30002726 	beq	r6,zero,811112c4 <strncmp+0xc8>
81111228:	02ffbff4 	movhi	r11,65279
8111122c:	5affbfc4 	addi	r11,r11,-257
81111230:	0086303a 	nor	r3,zero,r2
81111234:	02a02074 	movhi	r10,32897
81111238:	12c5883a 	add	r2,r2,r11
8111123c:	52a02004 	addi	r10,r10,-32640
81111240:	10c4703a 	and	r2,r2,r3
81111244:	1284703a 	and	r2,r2,r10
81111248:	10000b26 	beq	r2,zero,81111278 <strncmp+0x7c>
8111124c:	00001d06 	br	811112c4 <strncmp+0xc8>
81111250:	20c00017 	ldw	r3,0(r4)
81111254:	29c00017 	ldw	r7,0(r5)
81111258:	1ad1883a 	add	r8,r3,r11
8111125c:	00c4303a 	nor	r2,zero,r3
81111260:	4084703a 	and	r2,r8,r2
81111264:	1284703a 	and	r2,r2,r10
81111268:	19c0061e 	bne	r3,r7,81111284 <strncmp+0x88>
8111126c:	31bfff04 	addi	r6,r6,-4
81111270:	30001426 	beq	r6,zero,811112c4 <strncmp+0xc8>
81111274:	1000131e 	bne	r2,zero,811112c4 <strncmp+0xc8>
81111278:	21000104 	addi	r4,r4,4
8111127c:	29400104 	addi	r5,r5,4
81111280:	49bff336 	bltu	r9,r6,81111250 <__reset+0xfb0f1250>
81111284:	28800007 	ldb	r2,0(r5)
81111288:	20c00007 	ldb	r3,0(r4)
8111128c:	31bfffc4 	addi	r6,r6,-1
81111290:	10c0081e 	bne	r2,r3,811112b4 <strncmp+0xb8>
81111294:	30000b26 	beq	r6,zero,811112c4 <strncmp+0xc8>
81111298:	10000a26 	beq	r2,zero,811112c4 <strncmp+0xc8>
8111129c:	21000044 	addi	r4,r4,1
811112a0:	29400044 	addi	r5,r5,1
811112a4:	20800007 	ldb	r2,0(r4)
811112a8:	28c00007 	ldb	r3,0(r5)
811112ac:	31bfffc4 	addi	r6,r6,-1
811112b0:	10fff826 	beq	r2,r3,81111294 <__reset+0xfb0f1294>
811112b4:	20800003 	ldbu	r2,0(r4)
811112b8:	28c00003 	ldbu	r3,0(r5)
811112bc:	10c5c83a 	sub	r2,r2,r3
811112c0:	f800283a 	ret
811112c4:	0005883a 	mov	r2,zero
811112c8:	f800283a 	ret

811112cc <__ssprint_r>:
811112cc:	30800217 	ldw	r2,8(r6)
811112d0:	defff604 	addi	sp,sp,-40
811112d4:	dc800215 	stw	r18,8(sp)
811112d8:	dfc00915 	stw	ra,36(sp)
811112dc:	df000815 	stw	fp,32(sp)
811112e0:	ddc00715 	stw	r23,28(sp)
811112e4:	dd800615 	stw	r22,24(sp)
811112e8:	dd400515 	stw	r21,20(sp)
811112ec:	dd000415 	stw	r20,16(sp)
811112f0:	dcc00315 	stw	r19,12(sp)
811112f4:	dc400115 	stw	r17,4(sp)
811112f8:	dc000015 	stw	r16,0(sp)
811112fc:	3025883a 	mov	r18,r6
81111300:	10005826 	beq	r2,zero,81111464 <__ssprint_r+0x198>
81111304:	2027883a 	mov	r19,r4
81111308:	35c00017 	ldw	r23,0(r6)
8111130c:	29000017 	ldw	r4,0(r5)
81111310:	28800217 	ldw	r2,8(r5)
81111314:	2823883a 	mov	r17,r5
81111318:	0039883a 	mov	fp,zero
8111131c:	0021883a 	mov	r16,zero
81111320:	80003926 	beq	r16,zero,81111408 <__ssprint_r+0x13c>
81111324:	102b883a 	mov	r21,r2
81111328:	102d883a 	mov	r22,r2
8111132c:	80803a36 	bltu	r16,r2,81111418 <__ssprint_r+0x14c>
81111330:	88c0030b 	ldhu	r3,12(r17)
81111334:	1881200c 	andi	r2,r3,1152
81111338:	10002626 	beq	r2,zero,811113d4 <__ssprint_r+0x108>
8111133c:	88800517 	ldw	r2,20(r17)
81111340:	89400417 	ldw	r5,16(r17)
81111344:	81800044 	addi	r6,r16,1
81111348:	108f883a 	add	r7,r2,r2
8111134c:	3885883a 	add	r2,r7,r2
81111350:	100ed7fa 	srli	r7,r2,31
81111354:	216dc83a 	sub	r22,r4,r5
81111358:	3589883a 	add	r4,r6,r22
8111135c:	3885883a 	add	r2,r7,r2
81111360:	102bd07a 	srai	r21,r2,1
81111364:	a80d883a 	mov	r6,r21
81111368:	a900022e 	bgeu	r21,r4,81111374 <__ssprint_r+0xa8>
8111136c:	202b883a 	mov	r21,r4
81111370:	200d883a 	mov	r6,r4
81111374:	18c1000c 	andi	r3,r3,1024
81111378:	18002a26 	beq	r3,zero,81111424 <__ssprint_r+0x158>
8111137c:	300b883a 	mov	r5,r6
81111380:	9809883a 	mov	r4,r19
81111384:	1100cf00 	call	81100cf0 <_malloc_r>
81111388:	1029883a 	mov	r20,r2
8111138c:	10002c26 	beq	r2,zero,81111440 <__ssprint_r+0x174>
81111390:	89400417 	ldw	r5,16(r17)
81111394:	b00d883a 	mov	r6,r22
81111398:	1009883a 	mov	r4,r2
8111139c:	1108ac80 	call	81108ac8 <memcpy>
811113a0:	8880030b 	ldhu	r2,12(r17)
811113a4:	00fedfc4 	movi	r3,-1153
811113a8:	10c4703a 	and	r2,r2,r3
811113ac:	10802014 	ori	r2,r2,128
811113b0:	8880030d 	sth	r2,12(r17)
811113b4:	a589883a 	add	r4,r20,r22
811113b8:	adadc83a 	sub	r22,r21,r22
811113bc:	8d400515 	stw	r21,20(r17)
811113c0:	8d800215 	stw	r22,8(r17)
811113c4:	8d000415 	stw	r20,16(r17)
811113c8:	89000015 	stw	r4,0(r17)
811113cc:	802b883a 	mov	r21,r16
811113d0:	802d883a 	mov	r22,r16
811113d4:	b00d883a 	mov	r6,r22
811113d8:	e00b883a 	mov	r5,fp
811113dc:	1108c100 	call	81108c10 <memmove>
811113e0:	88800217 	ldw	r2,8(r17)
811113e4:	89000017 	ldw	r4,0(r17)
811113e8:	90c00217 	ldw	r3,8(r18)
811113ec:	1545c83a 	sub	r2,r2,r21
811113f0:	2589883a 	add	r4,r4,r22
811113f4:	88800215 	stw	r2,8(r17)
811113f8:	89000015 	stw	r4,0(r17)
811113fc:	1c21c83a 	sub	r16,r3,r16
81111400:	94000215 	stw	r16,8(r18)
81111404:	80001726 	beq	r16,zero,81111464 <__ssprint_r+0x198>
81111408:	bf000017 	ldw	fp,0(r23)
8111140c:	bc000117 	ldw	r16,4(r23)
81111410:	bdc00204 	addi	r23,r23,8
81111414:	003fc206 	br	81111320 <__reset+0xfb0f1320>
81111418:	802b883a 	mov	r21,r16
8111141c:	802d883a 	mov	r22,r16
81111420:	003fec06 	br	811113d4 <__reset+0xfb0f13d4>
81111424:	9809883a 	mov	r4,r19
81111428:	1109dc80 	call	81109dc8 <_realloc_r>
8111142c:	1029883a 	mov	r20,r2
81111430:	103fe01e 	bne	r2,zero,811113b4 <__reset+0xfb0f13b4>
81111434:	89400417 	ldw	r5,16(r17)
81111438:	9809883a 	mov	r4,r19
8111143c:	1107cac0 	call	81107cac <_free_r>
81111440:	88c0030b 	ldhu	r3,12(r17)
81111444:	00800304 	movi	r2,12
81111448:	98800015 	stw	r2,0(r19)
8111144c:	18c01014 	ori	r3,r3,64
81111450:	88c0030d 	sth	r3,12(r17)
81111454:	00bfffc4 	movi	r2,-1
81111458:	90000215 	stw	zero,8(r18)
8111145c:	90000115 	stw	zero,4(r18)
81111460:	00000206 	br	8111146c <__ssprint_r+0x1a0>
81111464:	90000115 	stw	zero,4(r18)
81111468:	0005883a 	mov	r2,zero
8111146c:	dfc00917 	ldw	ra,36(sp)
81111470:	df000817 	ldw	fp,32(sp)
81111474:	ddc00717 	ldw	r23,28(sp)
81111478:	dd800617 	ldw	r22,24(sp)
8111147c:	dd400517 	ldw	r21,20(sp)
81111480:	dd000417 	ldw	r20,16(sp)
81111484:	dcc00317 	ldw	r19,12(sp)
81111488:	dc800217 	ldw	r18,8(sp)
8111148c:	dc400117 	ldw	r17,4(sp)
81111490:	dc000017 	ldw	r16,0(sp)
81111494:	dec00a04 	addi	sp,sp,40
81111498:	f800283a 	ret

8111149c <___svfiprintf_internal_r>:
8111149c:	2880030b 	ldhu	r2,12(r5)
811114a0:	deffc804 	addi	sp,sp,-224
811114a4:	dcc03115 	stw	r19,196(sp)
811114a8:	dfc03715 	stw	ra,220(sp)
811114ac:	df003615 	stw	fp,216(sp)
811114b0:	ddc03515 	stw	r23,212(sp)
811114b4:	dd803415 	stw	r22,208(sp)
811114b8:	dd403315 	stw	r21,204(sp)
811114bc:	dd003215 	stw	r20,200(sp)
811114c0:	dc803015 	stw	r18,192(sp)
811114c4:	dc402f15 	stw	r17,188(sp)
811114c8:	dc002e15 	stw	r16,184(sp)
811114cc:	d9402715 	stw	r5,156(sp)
811114d0:	d9002a15 	stw	r4,168(sp)
811114d4:	1080200c 	andi	r2,r2,128
811114d8:	d9c02315 	stw	r7,140(sp)
811114dc:	3027883a 	mov	r19,r6
811114e0:	10000226 	beq	r2,zero,811114ec <___svfiprintf_internal_r+0x50>
811114e4:	28800417 	ldw	r2,16(r5)
811114e8:	10041d26 	beq	r2,zero,81112560 <___svfiprintf_internal_r+0x10c4>
811114ec:	dac01a04 	addi	r11,sp,104
811114f0:	dac01e15 	stw	r11,120(sp)
811114f4:	d8801e17 	ldw	r2,120(sp)
811114f8:	dac019c4 	addi	r11,sp,103
811114fc:	dd402a17 	ldw	r21,168(sp)
81111500:	ddc02717 	ldw	r23,156(sp)
81111504:	05a044b4 	movhi	r22,33042
81111508:	052044b4 	movhi	r20,33042
8111150c:	dac01f15 	stw	r11,124(sp)
81111510:	12d7c83a 	sub	r11,r2,r11
81111514:	b5934204 	addi	r22,r22,19720
81111518:	a5133e04 	addi	r20,r20,19704
8111151c:	dec01a15 	stw	sp,104(sp)
81111520:	d8001c15 	stw	zero,112(sp)
81111524:	d8001b15 	stw	zero,108(sp)
81111528:	d811883a 	mov	r8,sp
8111152c:	d8002915 	stw	zero,164(sp)
81111530:	d8002515 	stw	zero,148(sp)
81111534:	dac02b15 	stw	r11,172(sp)
81111538:	98800007 	ldb	r2,0(r19)
8111153c:	1002dd26 	beq	r2,zero,811120b4 <___svfiprintf_internal_r+0xc18>
81111540:	00c00944 	movi	r3,37
81111544:	9823883a 	mov	r17,r19
81111548:	10c0021e 	bne	r2,r3,81111554 <___svfiprintf_internal_r+0xb8>
8111154c:	00001406 	br	811115a0 <___svfiprintf_internal_r+0x104>
81111550:	10c00326 	beq	r2,r3,81111560 <___svfiprintf_internal_r+0xc4>
81111554:	8c400044 	addi	r17,r17,1
81111558:	88800007 	ldb	r2,0(r17)
8111155c:	103ffc1e 	bne	r2,zero,81111550 <__reset+0xfb0f1550>
81111560:	8ce1c83a 	sub	r16,r17,r19
81111564:	80000e26 	beq	r16,zero,811115a0 <___svfiprintf_internal_r+0x104>
81111568:	d8c01c17 	ldw	r3,112(sp)
8111156c:	d8801b17 	ldw	r2,108(sp)
81111570:	44c00015 	stw	r19,0(r8)
81111574:	1c07883a 	add	r3,r3,r16
81111578:	10800044 	addi	r2,r2,1
8111157c:	d8c01c15 	stw	r3,112(sp)
81111580:	44000115 	stw	r16,4(r8)
81111584:	d8801b15 	stw	r2,108(sp)
81111588:	00c001c4 	movi	r3,7
8111158c:	18831e16 	blt	r3,r2,81112208 <___svfiprintf_internal_r+0xd6c>
81111590:	42000204 	addi	r8,r8,8
81111594:	dac02517 	ldw	r11,148(sp)
81111598:	5c17883a 	add	r11,r11,r16
8111159c:	dac02515 	stw	r11,148(sp)
811115a0:	88800007 	ldb	r2,0(r17)
811115a4:	1002c526 	beq	r2,zero,811120bc <___svfiprintf_internal_r+0xc20>
811115a8:	88c00047 	ldb	r3,1(r17)
811115ac:	8cc00044 	addi	r19,r17,1
811115b0:	d8001d85 	stb	zero,118(sp)
811115b4:	0009883a 	mov	r4,zero
811115b8:	000f883a 	mov	r7,zero
811115bc:	043fffc4 	movi	r16,-1
811115c0:	d8002415 	stw	zero,144(sp)
811115c4:	0025883a 	mov	r18,zero
811115c8:	01401604 	movi	r5,88
811115cc:	01800244 	movi	r6,9
811115d0:	02800a84 	movi	r10,42
811115d4:	02401b04 	movi	r9,108
811115d8:	9cc00044 	addi	r19,r19,1
811115dc:	18bff804 	addi	r2,r3,-32
811115e0:	2881dd36 	bltu	r5,r2,81111d58 <___svfiprintf_internal_r+0x8bc>
811115e4:	100490ba 	slli	r2,r2,2
811115e8:	02e04474 	movhi	r11,33041
811115ec:	5ac57f04 	addi	r11,r11,5628
811115f0:	12c5883a 	add	r2,r2,r11
811115f4:	10800017 	ldw	r2,0(r2)
811115f8:	1000683a 	jmp	r2
811115fc:	811117f8 	rdprs	r4,r16,17503
81111600:	81111d58 	cmpnei	r4,r16,17525
81111604:	81111d58 	cmpnei	r4,r16,17525
81111608:	811117ec 	andhi	r4,r16,17503
8111160c:	81111d58 	cmpnei	r4,r16,17525
81111610:	81111d58 	cmpnei	r4,r16,17525
81111614:	81111d58 	cmpnei	r4,r16,17525
81111618:	81111d58 	cmpnei	r4,r16,17525
8111161c:	81111d58 	cmpnei	r4,r16,17525
81111620:	81111d58 	cmpnei	r4,r16,17525
81111624:	81111760 	cmpeqi	r4,r16,17501
81111628:	8111193c 	xorhi	r4,r16,17508
8111162c:	81111d58 	cmpnei	r4,r16,17525
81111630:	8111178c 	andi	r4,r16,17502
81111634:	81111d8c 	andi	r4,r16,17526
81111638:	81111d58 	cmpnei	r4,r16,17525
8111163c:	81111d80 	call	881111d8 <__reset+0x20f11d8>
81111640:	81111d20 	cmpeqi	r4,r16,17524
81111644:	81111d20 	cmpeqi	r4,r16,17524
81111648:	81111d20 	cmpeqi	r4,r16,17524
8111164c:	81111d20 	cmpeqi	r4,r16,17524
81111650:	81111d20 	cmpeqi	r4,r16,17524
81111654:	81111d20 	cmpeqi	r4,r16,17524
81111658:	81111d20 	cmpeqi	r4,r16,17524
8111165c:	81111d20 	cmpeqi	r4,r16,17524
81111660:	81111d20 	cmpeqi	r4,r16,17524
81111664:	81111d58 	cmpnei	r4,r16,17525
81111668:	81111d58 	cmpnei	r4,r16,17525
8111166c:	81111d58 	cmpnei	r4,r16,17525
81111670:	81111d58 	cmpnei	r4,r16,17525
81111674:	81111d58 	cmpnei	r4,r16,17525
81111678:	81111d58 	cmpnei	r4,r16,17525
8111167c:	81111d58 	cmpnei	r4,r16,17525
81111680:	81111d58 	cmpnei	r4,r16,17525
81111684:	81111d58 	cmpnei	r4,r16,17525
81111688:	81111d58 	cmpnei	r4,r16,17525
8111168c:	81111cbc 	xorhi	r4,r16,17522
81111690:	81111d58 	cmpnei	r4,r16,17525
81111694:	81111d58 	cmpnei	r4,r16,17525
81111698:	81111d58 	cmpnei	r4,r16,17525
8111169c:	81111d58 	cmpnei	r4,r16,17525
811116a0:	81111d58 	cmpnei	r4,r16,17525
811116a4:	81111d58 	cmpnei	r4,r16,17525
811116a8:	81111d58 	cmpnei	r4,r16,17525
811116ac:	81111d58 	cmpnei	r4,r16,17525
811116b0:	81111d58 	cmpnei	r4,r16,17525
811116b4:	81111d58 	cmpnei	r4,r16,17525
811116b8:	81111e34 	orhi	r4,r16,17528
811116bc:	81111d58 	cmpnei	r4,r16,17525
811116c0:	81111d58 	cmpnei	r4,r16,17525
811116c4:	81111d58 	cmpnei	r4,r16,17525
811116c8:	81111d58 	cmpnei	r4,r16,17525
811116cc:	81111d58 	cmpnei	r4,r16,17525
811116d0:	81111dcc 	andi	r4,r16,17527
811116d4:	81111d58 	cmpnei	r4,r16,17525
811116d8:	81111d58 	cmpnei	r4,r16,17525
811116dc:	81111b00 	call	881111b0 <__reset+0x20f11b0>
811116e0:	81111d58 	cmpnei	r4,r16,17525
811116e4:	81111d58 	cmpnei	r4,r16,17525
811116e8:	81111d58 	cmpnei	r4,r16,17525
811116ec:	81111d58 	cmpnei	r4,r16,17525
811116f0:	81111d58 	cmpnei	r4,r16,17525
811116f4:	81111d58 	cmpnei	r4,r16,17525
811116f8:	81111d58 	cmpnei	r4,r16,17525
811116fc:	81111d58 	cmpnei	r4,r16,17525
81111700:	81111d58 	cmpnei	r4,r16,17525
81111704:	81111d58 	cmpnei	r4,r16,17525
81111708:	811119f0 	cmpltui	r4,r16,17511
8111170c:	81111b9c 	xori	r4,r16,17518
81111710:	81111d58 	cmpnei	r4,r16,17525
81111714:	81111d58 	cmpnei	r4,r16,17525
81111718:	81111d58 	cmpnei	r4,r16,17525
8111171c:	81111b90 	cmplti	r4,r16,17518
81111720:	81111b9c 	xori	r4,r16,17518
81111724:	81111d58 	cmpnei	r4,r16,17525
81111728:	81111d58 	cmpnei	r4,r16,17525
8111172c:	81111b80 	call	881111b8 <__reset+0x20f11b8>
81111730:	81111d58 	cmpnei	r4,r16,17525
81111734:	81111b44 	addi	r4,r16,17517
81111738:	8111194c 	andi	r4,r16,17509
8111173c:	81111798 	cmpnei	r4,r16,17502
81111740:	81111cb0 	cmpltui	r4,r16,17522
81111744:	81111d58 	cmpnei	r4,r16,17525
81111748:	81111c64 	muli	r4,r16,17521
8111174c:	81111d58 	cmpnei	r4,r16,17525
81111750:	811118bc 	xorhi	r4,r16,17506
81111754:	81111d58 	cmpnei	r4,r16,17525
81111758:	81111d58 	cmpnei	r4,r16,17525
8111175c:	81111818 	cmpnei	r4,r16,17504
81111760:	dac02317 	ldw	r11,140(sp)
81111764:	5ac00017 	ldw	r11,0(r11)
81111768:	dac02415 	stw	r11,144(sp)
8111176c:	dac02317 	ldw	r11,140(sp)
81111770:	58800104 	addi	r2,r11,4
81111774:	dac02417 	ldw	r11,144(sp)
81111778:	5802e90e 	bge	r11,zero,81112320 <___svfiprintf_internal_r+0xe84>
8111177c:	dac02417 	ldw	r11,144(sp)
81111780:	d8802315 	stw	r2,140(sp)
81111784:	02d7c83a 	sub	r11,zero,r11
81111788:	dac02415 	stw	r11,144(sp)
8111178c:	94800114 	ori	r18,r18,4
81111790:	98c00007 	ldb	r3,0(r19)
81111794:	003f9006 	br	811115d8 <__reset+0xfb0f15d8>
81111798:	00800c04 	movi	r2,48
8111179c:	dac02317 	ldw	r11,140(sp)
811117a0:	d8801d05 	stb	r2,116(sp)
811117a4:	00801e04 	movi	r2,120
811117a8:	d8801d45 	stb	r2,117(sp)
811117ac:	d8001d85 	stb	zero,118(sp)
811117b0:	58c00104 	addi	r3,r11,4
811117b4:	5f000017 	ldw	fp,0(r11)
811117b8:	0013883a 	mov	r9,zero
811117bc:	90800094 	ori	r2,r18,2
811117c0:	80032b16 	blt	r16,zero,81112470 <___svfiprintf_internal_r+0xfd4>
811117c4:	00bfdfc4 	movi	r2,-129
811117c8:	90a4703a 	and	r18,r18,r2
811117cc:	d8c02315 	stw	r3,140(sp)
811117d0:	94800094 	ori	r18,r18,2
811117d4:	e002dc26 	beq	fp,zero,81112348 <___svfiprintf_internal_r+0xeac>
811117d8:	012044b4 	movhi	r4,33042
811117dc:	2111cb04 	addi	r4,r4,18220
811117e0:	0015883a 	mov	r10,zero
811117e4:	d9002915 	stw	r4,164(sp)
811117e8:	00002306 	br	81111878 <___svfiprintf_internal_r+0x3dc>
811117ec:	94800054 	ori	r18,r18,1
811117f0:	98c00007 	ldb	r3,0(r19)
811117f4:	003f7806 	br	811115d8 <__reset+0xfb0f15d8>
811117f8:	38803fcc 	andi	r2,r7,255
811117fc:	1080201c 	xori	r2,r2,128
81111800:	10bfe004 	addi	r2,r2,-128
81111804:	1002f31e 	bne	r2,zero,811123d4 <___svfiprintf_internal_r+0xf38>
81111808:	01000044 	movi	r4,1
8111180c:	01c00804 	movi	r7,32
81111810:	98c00007 	ldb	r3,0(r19)
81111814:	003f7006 	br	811115d8 <__reset+0xfb0f15d8>
81111818:	21003fcc 	andi	r4,r4,255
8111181c:	2003aa1e 	bne	r4,zero,811126c8 <___svfiprintf_internal_r+0x122c>
81111820:	00a044b4 	movhi	r2,33042
81111824:	1091cb04 	addi	r2,r2,18220
81111828:	d8802915 	stw	r2,164(sp)
8111182c:	9080080c 	andi	r2,r18,32
81111830:	1000ba26 	beq	r2,zero,81111b1c <___svfiprintf_internal_r+0x680>
81111834:	dac02317 	ldw	r11,140(sp)
81111838:	5f000017 	ldw	fp,0(r11)
8111183c:	5a400117 	ldw	r9,4(r11)
81111840:	5ac00204 	addi	r11,r11,8
81111844:	dac02315 	stw	r11,140(sp)
81111848:	9080004c 	andi	r2,r18,1
8111184c:	10029026 	beq	r2,zero,81112290 <___svfiprintf_internal_r+0xdf4>
81111850:	e244b03a 	or	r2,fp,r9
81111854:	1002d41e 	bne	r2,zero,811123a8 <___svfiprintf_internal_r+0xf0c>
81111858:	d8001d85 	stb	zero,118(sp)
8111185c:	80030b16 	blt	r16,zero,8111248c <___svfiprintf_internal_r+0xff0>
81111860:	00bfdfc4 	movi	r2,-129
81111864:	90a4703a 	and	r18,r18,r2
81111868:	0015883a 	mov	r10,zero
8111186c:	80002426 	beq	r16,zero,81111900 <___svfiprintf_internal_r+0x464>
81111870:	0039883a 	mov	fp,zero
81111874:	0013883a 	mov	r9,zero
81111878:	d9002917 	ldw	r4,164(sp)
8111187c:	dc401a04 	addi	r17,sp,104
81111880:	e08003cc 	andi	r2,fp,15
81111884:	4806973a 	slli	r3,r9,28
81111888:	2085883a 	add	r2,r4,r2
8111188c:	e038d13a 	srli	fp,fp,4
81111890:	10800003 	ldbu	r2,0(r2)
81111894:	4812d13a 	srli	r9,r9,4
81111898:	8c7fffc4 	addi	r17,r17,-1
8111189c:	1f38b03a 	or	fp,r3,fp
811118a0:	88800005 	stb	r2,0(r17)
811118a4:	e244b03a 	or	r2,fp,r9
811118a8:	103ff51e 	bne	r2,zero,81111880 <__reset+0xfb0f1880>
811118ac:	dac01e17 	ldw	r11,120(sp)
811118b0:	5c57c83a 	sub	r11,r11,r17
811118b4:	dac02115 	stw	r11,132(sp)
811118b8:	00001406 	br	8111190c <___svfiprintf_internal_r+0x470>
811118bc:	21003fcc 	andi	r4,r4,255
811118c0:	2003741e 	bne	r4,zero,81112694 <___svfiprintf_internal_r+0x11f8>
811118c4:	9080080c 	andi	r2,r18,32
811118c8:	10014526 	beq	r2,zero,81111de0 <___svfiprintf_internal_r+0x944>
811118cc:	dac02317 	ldw	r11,140(sp)
811118d0:	d8001d85 	stb	zero,118(sp)
811118d4:	58c00204 	addi	r3,r11,8
811118d8:	5f000017 	ldw	fp,0(r11)
811118dc:	5a400117 	ldw	r9,4(r11)
811118e0:	8002d916 	blt	r16,zero,81112448 <___svfiprintf_internal_r+0xfac>
811118e4:	013fdfc4 	movi	r4,-129
811118e8:	e244b03a 	or	r2,fp,r9
811118ec:	d8c02315 	stw	r3,140(sp)
811118f0:	9124703a 	and	r18,r18,r4
811118f4:	0015883a 	mov	r10,zero
811118f8:	1000b91e 	bne	r2,zero,81111be0 <___svfiprintf_internal_r+0x744>
811118fc:	8002e61e 	bne	r16,zero,81112498 <___svfiprintf_internal_r+0xffc>
81111900:	0021883a 	mov	r16,zero
81111904:	d8002115 	stw	zero,132(sp)
81111908:	dc401a04 	addi	r17,sp,104
8111190c:	d8c02117 	ldw	r3,132(sp)
81111910:	dc002015 	stw	r16,128(sp)
81111914:	80c0010e 	bge	r16,r3,8111191c <___svfiprintf_internal_r+0x480>
81111918:	d8c02015 	stw	r3,128(sp)
8111191c:	52803fcc 	andi	r10,r10,255
81111920:	5280201c 	xori	r10,r10,128
81111924:	52bfe004 	addi	r10,r10,-128
81111928:	50003c26 	beq	r10,zero,81111a1c <___svfiprintf_internal_r+0x580>
8111192c:	dac02017 	ldw	r11,128(sp)
81111930:	5ac00044 	addi	r11,r11,1
81111934:	dac02015 	stw	r11,128(sp)
81111938:	00003806 	br	81111a1c <___svfiprintf_internal_r+0x580>
8111193c:	01000044 	movi	r4,1
81111940:	01c00ac4 	movi	r7,43
81111944:	98c00007 	ldb	r3,0(r19)
81111948:	003f2306 	br	811115d8 <__reset+0xfb0f15d8>
8111194c:	21003fcc 	andi	r4,r4,255
81111950:	2003481e 	bne	r4,zero,81112674 <___svfiprintf_internal_r+0x11d8>
81111954:	9080080c 	andi	r2,r18,32
81111958:	10013b26 	beq	r2,zero,81111e48 <___svfiprintf_internal_r+0x9ac>
8111195c:	dac02317 	ldw	r11,140(sp)
81111960:	d8001d85 	stb	zero,118(sp)
81111964:	58800204 	addi	r2,r11,8
81111968:	5f000017 	ldw	fp,0(r11)
8111196c:	5a400117 	ldw	r9,4(r11)
81111970:	8002a816 	blt	r16,zero,81112414 <___svfiprintf_internal_r+0xf78>
81111974:	013fdfc4 	movi	r4,-129
81111978:	e246b03a 	or	r3,fp,r9
8111197c:	d8802315 	stw	r2,140(sp)
81111980:	9124703a 	and	r18,r18,r4
81111984:	18013c26 	beq	r3,zero,81111e78 <___svfiprintf_internal_r+0x9dc>
81111988:	0015883a 	mov	r10,zero
8111198c:	dc401a04 	addi	r17,sp,104
81111990:	e006d0fa 	srli	r3,fp,3
81111994:	4808977a 	slli	r4,r9,29
81111998:	4812d0fa 	srli	r9,r9,3
8111199c:	e70001cc 	andi	fp,fp,7
811119a0:	e0800c04 	addi	r2,fp,48
811119a4:	8c7fffc4 	addi	r17,r17,-1
811119a8:	20f8b03a 	or	fp,r4,r3
811119ac:	88800005 	stb	r2,0(r17)
811119b0:	e246b03a 	or	r3,fp,r9
811119b4:	183ff61e 	bne	r3,zero,81111990 <__reset+0xfb0f1990>
811119b8:	90c0004c 	andi	r3,r18,1
811119bc:	1800a526 	beq	r3,zero,81111c54 <___svfiprintf_internal_r+0x7b8>
811119c0:	10803fcc 	andi	r2,r2,255
811119c4:	1080201c 	xori	r2,r2,128
811119c8:	10bfe004 	addi	r2,r2,-128
811119cc:	00c00c04 	movi	r3,48
811119d0:	10ffb626 	beq	r2,r3,811118ac <__reset+0xfb0f18ac>
811119d4:	88ffffc5 	stb	r3,-1(r17)
811119d8:	d8c01e17 	ldw	r3,120(sp)
811119dc:	88bfffc4 	addi	r2,r17,-1
811119e0:	1023883a 	mov	r17,r2
811119e4:	1887c83a 	sub	r3,r3,r2
811119e8:	d8c02115 	stw	r3,132(sp)
811119ec:	003fc706 	br	8111190c <__reset+0xfb0f190c>
811119f0:	dac02317 	ldw	r11,140(sp)
811119f4:	00c00044 	movi	r3,1
811119f8:	d8c02015 	stw	r3,128(sp)
811119fc:	58800017 	ldw	r2,0(r11)
81111a00:	5ac00104 	addi	r11,r11,4
81111a04:	d8001d85 	stb	zero,118(sp)
81111a08:	d8801005 	stb	r2,64(sp)
81111a0c:	dac02315 	stw	r11,140(sp)
81111a10:	d8c02115 	stw	r3,132(sp)
81111a14:	dc401004 	addi	r17,sp,64
81111a18:	0021883a 	mov	r16,zero
81111a1c:	90c0008c 	andi	r3,r18,2
81111a20:	d8c02215 	stw	r3,136(sp)
81111a24:	18000326 	beq	r3,zero,81111a34 <___svfiprintf_internal_r+0x598>
81111a28:	dac02017 	ldw	r11,128(sp)
81111a2c:	5ac00084 	addi	r11,r11,2
81111a30:	dac02015 	stw	r11,128(sp)
81111a34:	90c0210c 	andi	r3,r18,132
81111a38:	d8c02615 	stw	r3,152(sp)
81111a3c:	1801131e 	bne	r3,zero,81111e8c <___svfiprintf_internal_r+0x9f0>
81111a40:	dac02417 	ldw	r11,144(sp)
81111a44:	d8c02017 	ldw	r3,128(sp)
81111a48:	58f9c83a 	sub	fp,r11,r3
81111a4c:	07010f0e 	bge	zero,fp,81111e8c <___svfiprintf_internal_r+0x9f0>
81111a50:	02400404 	movi	r9,16
81111a54:	d8c01c17 	ldw	r3,112(sp)
81111a58:	d8801b17 	ldw	r2,108(sp)
81111a5c:	4f02d60e 	bge	r9,fp,811125b8 <___svfiprintf_internal_r+0x111c>
81111a60:	016044b4 	movhi	r5,33042
81111a64:	29534204 	addi	r5,r5,19720
81111a68:	d9402815 	stw	r5,160(sp)
81111a6c:	028001c4 	movi	r10,7
81111a70:	00000306 	br	81111a80 <___svfiprintf_internal_r+0x5e4>
81111a74:	e73ffc04 	addi	fp,fp,-16
81111a78:	42000204 	addi	r8,r8,8
81111a7c:	4f00150e 	bge	r9,fp,81111ad4 <___svfiprintf_internal_r+0x638>
81111a80:	18c00404 	addi	r3,r3,16
81111a84:	10800044 	addi	r2,r2,1
81111a88:	45800015 	stw	r22,0(r8)
81111a8c:	42400115 	stw	r9,4(r8)
81111a90:	d8c01c15 	stw	r3,112(sp)
81111a94:	d8801b15 	stw	r2,108(sp)
81111a98:	50bff60e 	bge	r10,r2,81111a74 <__reset+0xfb0f1a74>
81111a9c:	d9801a04 	addi	r6,sp,104
81111aa0:	b80b883a 	mov	r5,r23
81111aa4:	a809883a 	mov	r4,r21
81111aa8:	da402c15 	stw	r9,176(sp)
81111aac:	da802d15 	stw	r10,180(sp)
81111ab0:	11112cc0 	call	811112cc <__ssprint_r>
81111ab4:	da402c17 	ldw	r9,176(sp)
81111ab8:	da802d17 	ldw	r10,180(sp)
81111abc:	1001851e 	bne	r2,zero,811120d4 <___svfiprintf_internal_r+0xc38>
81111ac0:	e73ffc04 	addi	fp,fp,-16
81111ac4:	d8c01c17 	ldw	r3,112(sp)
81111ac8:	d8801b17 	ldw	r2,108(sp)
81111acc:	d811883a 	mov	r8,sp
81111ad0:	4f3feb16 	blt	r9,fp,81111a80 <__reset+0xfb0f1a80>
81111ad4:	dac02817 	ldw	r11,160(sp)
81111ad8:	e0c7883a 	add	r3,fp,r3
81111adc:	10800044 	addi	r2,r2,1
81111ae0:	42c00015 	stw	r11,0(r8)
81111ae4:	47000115 	stw	fp,4(r8)
81111ae8:	d8c01c15 	stw	r3,112(sp)
81111aec:	d8801b15 	stw	r2,108(sp)
81111af0:	010001c4 	movi	r4,7
81111af4:	2081ee16 	blt	r4,r2,811122b0 <___svfiprintf_internal_r+0xe14>
81111af8:	42000204 	addi	r8,r8,8
81111afc:	0000e506 	br	81111e94 <___svfiprintf_internal_r+0x9f8>
81111b00:	21003fcc 	andi	r4,r4,255
81111b04:	2002dd1e 	bne	r4,zero,8111267c <___svfiprintf_internal_r+0x11e0>
81111b08:	00a044b4 	movhi	r2,33042
81111b0c:	1091c604 	addi	r2,r2,18200
81111b10:	d8802915 	stw	r2,164(sp)
81111b14:	9080080c 	andi	r2,r18,32
81111b18:	103f461e 	bne	r2,zero,81111834 <__reset+0xfb0f1834>
81111b1c:	9080040c 	andi	r2,r18,16
81111b20:	10022e1e 	bne	r2,zero,811123dc <___svfiprintf_internal_r+0xf40>
81111b24:	9080100c 	andi	r2,r18,64
81111b28:	dac02317 	ldw	r11,140(sp)
81111b2c:	10027326 	beq	r2,zero,811124fc <___svfiprintf_internal_r+0x1060>
81111b30:	5f00000b 	ldhu	fp,0(r11)
81111b34:	5ac00104 	addi	r11,r11,4
81111b38:	0013883a 	mov	r9,zero
81111b3c:	dac02315 	stw	r11,140(sp)
81111b40:	003f4106 	br	81111848 <__reset+0xfb0f1848>
81111b44:	21003fcc 	andi	r4,r4,255
81111b48:	2002e11e 	bne	r4,zero,811126d0 <___svfiprintf_internal_r+0x1234>
81111b4c:	9080080c 	andi	r2,r18,32
81111b50:	1002011e 	bne	r2,zero,81112358 <___svfiprintf_internal_r+0xebc>
81111b54:	9080040c 	andi	r2,r18,16
81111b58:	10023e1e 	bne	r2,zero,81112454 <___svfiprintf_internal_r+0xfb8>
81111b5c:	9480100c 	andi	r18,r18,64
81111b60:	90023c26 	beq	r18,zero,81112454 <___svfiprintf_internal_r+0xfb8>
81111b64:	dac02317 	ldw	r11,140(sp)
81111b68:	58800017 	ldw	r2,0(r11)
81111b6c:	5ac00104 	addi	r11,r11,4
81111b70:	dac02315 	stw	r11,140(sp)
81111b74:	dac02517 	ldw	r11,148(sp)
81111b78:	12c0000d 	sth	r11,0(r2)
81111b7c:	003e6e06 	br	81111538 <__reset+0xfb0f1538>
81111b80:	98c00007 	ldb	r3,0(r19)
81111b84:	1a422926 	beq	r3,r9,8111242c <___svfiprintf_internal_r+0xf90>
81111b88:	94800414 	ori	r18,r18,16
81111b8c:	003e9206 	br	811115d8 <__reset+0xfb0f15d8>
81111b90:	94801014 	ori	r18,r18,64
81111b94:	98c00007 	ldb	r3,0(r19)
81111b98:	003e8f06 	br	811115d8 <__reset+0xfb0f15d8>
81111b9c:	21003fcc 	andi	r4,r4,255
81111ba0:	2002c71e 	bne	r4,zero,811126c0 <___svfiprintf_internal_r+0x1224>
81111ba4:	9080080c 	andi	r2,r18,32
81111ba8:	10004926 	beq	r2,zero,81111cd0 <___svfiprintf_internal_r+0x834>
81111bac:	dac02317 	ldw	r11,140(sp)
81111bb0:	58800117 	ldw	r2,4(r11)
81111bb4:	5f000017 	ldw	fp,0(r11)
81111bb8:	5ac00204 	addi	r11,r11,8
81111bbc:	dac02315 	stw	r11,140(sp)
81111bc0:	1013883a 	mov	r9,r2
81111bc4:	10004b16 	blt	r2,zero,81111cf4 <___svfiprintf_internal_r+0x858>
81111bc8:	da801d83 	ldbu	r10,118(sp)
81111bcc:	8001cb16 	blt	r16,zero,811122fc <___svfiprintf_internal_r+0xe60>
81111bd0:	00ffdfc4 	movi	r3,-129
81111bd4:	e244b03a 	or	r2,fp,r9
81111bd8:	90e4703a 	and	r18,r18,r3
81111bdc:	103f4726 	beq	r2,zero,811118fc <__reset+0xfb0f18fc>
81111be0:	48008c26 	beq	r9,zero,81111e14 <___svfiprintf_internal_r+0x978>
81111be4:	dc802015 	stw	r18,128(sp)
81111be8:	dc002115 	stw	r16,132(sp)
81111bec:	dc401a04 	addi	r17,sp,104
81111bf0:	e021883a 	mov	r16,fp
81111bf4:	da002215 	stw	r8,136(sp)
81111bf8:	5039883a 	mov	fp,r10
81111bfc:	4825883a 	mov	r18,r9
81111c00:	8009883a 	mov	r4,r16
81111c04:	900b883a 	mov	r5,r18
81111c08:	01800284 	movi	r6,10
81111c0c:	000f883a 	mov	r7,zero
81111c10:	11130040 	call	81113004 <__umoddi3>
81111c14:	10800c04 	addi	r2,r2,48
81111c18:	8c7fffc4 	addi	r17,r17,-1
81111c1c:	8009883a 	mov	r4,r16
81111c20:	900b883a 	mov	r5,r18
81111c24:	88800005 	stb	r2,0(r17)
81111c28:	01800284 	movi	r6,10
81111c2c:	000f883a 	mov	r7,zero
81111c30:	1112a8c0 	call	81112a8c <__udivdi3>
81111c34:	1021883a 	mov	r16,r2
81111c38:	10c4b03a 	or	r2,r2,r3
81111c3c:	1825883a 	mov	r18,r3
81111c40:	103fef1e 	bne	r2,zero,81111c00 <__reset+0xfb0f1c00>
81111c44:	dc802017 	ldw	r18,128(sp)
81111c48:	dc002117 	ldw	r16,132(sp)
81111c4c:	da002217 	ldw	r8,136(sp)
81111c50:	e015883a 	mov	r10,fp
81111c54:	d8c01e17 	ldw	r3,120(sp)
81111c58:	1c47c83a 	sub	r3,r3,r17
81111c5c:	d8c02115 	stw	r3,132(sp)
81111c60:	003f2a06 	br	8111190c <__reset+0xfb0f190c>
81111c64:	dac02317 	ldw	r11,140(sp)
81111c68:	d8001d85 	stb	zero,118(sp)
81111c6c:	5c400017 	ldw	r17,0(r11)
81111c70:	5f000104 	addi	fp,r11,4
81111c74:	88022f26 	beq	r17,zero,81112534 <___svfiprintf_internal_r+0x1098>
81111c78:	80022516 	blt	r16,zero,81112510 <___svfiprintf_internal_r+0x1074>
81111c7c:	800d883a 	mov	r6,r16
81111c80:	000b883a 	mov	r5,zero
81111c84:	8809883a 	mov	r4,r17
81111c88:	da002c15 	stw	r8,176(sp)
81111c8c:	11089e40 	call	811089e4 <memchr>
81111c90:	da002c17 	ldw	r8,176(sp)
81111c94:	10026426 	beq	r2,zero,81112628 <___svfiprintf_internal_r+0x118c>
81111c98:	1445c83a 	sub	r2,r2,r17
81111c9c:	d8802115 	stw	r2,132(sp)
81111ca0:	da801d83 	ldbu	r10,118(sp)
81111ca4:	df002315 	stw	fp,140(sp)
81111ca8:	0021883a 	mov	r16,zero
81111cac:	003f1706 	br	8111190c <__reset+0xfb0f190c>
81111cb0:	94800814 	ori	r18,r18,32
81111cb4:	98c00007 	ldb	r3,0(r19)
81111cb8:	003e4706 	br	811115d8 <__reset+0xfb0f15d8>
81111cbc:	21003fcc 	andi	r4,r4,255
81111cc0:	2002701e 	bne	r4,zero,81112684 <___svfiprintf_internal_r+0x11e8>
81111cc4:	94800414 	ori	r18,r18,16
81111cc8:	9080080c 	andi	r2,r18,32
81111ccc:	103fb71e 	bne	r2,zero,81111bac <__reset+0xfb0f1bac>
81111cd0:	9080040c 	andi	r2,r18,16
81111cd4:	1001ab26 	beq	r2,zero,81112384 <___svfiprintf_internal_r+0xee8>
81111cd8:	dac02317 	ldw	r11,140(sp)
81111cdc:	5f000017 	ldw	fp,0(r11)
81111ce0:	5ac00104 	addi	r11,r11,4
81111ce4:	dac02315 	stw	r11,140(sp)
81111ce8:	e013d7fa 	srai	r9,fp,31
81111cec:	4805883a 	mov	r2,r9
81111cf0:	103fb50e 	bge	r2,zero,81111bc8 <__reset+0xfb0f1bc8>
81111cf4:	0739c83a 	sub	fp,zero,fp
81111cf8:	02800b44 	movi	r10,45
81111cfc:	e004c03a 	cmpne	r2,fp,zero
81111d00:	0253c83a 	sub	r9,zero,r9
81111d04:	da801d85 	stb	r10,118(sp)
81111d08:	4893c83a 	sub	r9,r9,r2
81111d0c:	80023016 	blt	r16,zero,811125d0 <___svfiprintf_internal_r+0x1134>
81111d10:	00bfdfc4 	movi	r2,-129
81111d14:	90a4703a 	and	r18,r18,r2
81111d18:	483fb21e 	bne	r9,zero,81111be4 <__reset+0xfb0f1be4>
81111d1c:	00003d06 	br	81111e14 <___svfiprintf_internal_r+0x978>
81111d20:	9817883a 	mov	r11,r19
81111d24:	d8002415 	stw	zero,144(sp)
81111d28:	18bff404 	addi	r2,r3,-48
81111d2c:	0019883a 	mov	r12,zero
81111d30:	58c00007 	ldb	r3,0(r11)
81111d34:	630002a4 	muli	r12,r12,10
81111d38:	9cc00044 	addi	r19,r19,1
81111d3c:	9817883a 	mov	r11,r19
81111d40:	1319883a 	add	r12,r2,r12
81111d44:	18bff404 	addi	r2,r3,-48
81111d48:	30bff92e 	bgeu	r6,r2,81111d30 <__reset+0xfb0f1d30>
81111d4c:	db002415 	stw	r12,144(sp)
81111d50:	18bff804 	addi	r2,r3,-32
81111d54:	28be232e 	bgeu	r5,r2,811115e4 <__reset+0xfb0f15e4>
81111d58:	21003fcc 	andi	r4,r4,255
81111d5c:	20024b1e 	bne	r4,zero,8111268c <___svfiprintf_internal_r+0x11f0>
81111d60:	1800d626 	beq	r3,zero,811120bc <___svfiprintf_internal_r+0xc20>
81111d64:	02c00044 	movi	r11,1
81111d68:	dac02015 	stw	r11,128(sp)
81111d6c:	d8c01005 	stb	r3,64(sp)
81111d70:	d8001d85 	stb	zero,118(sp)
81111d74:	dac02115 	stw	r11,132(sp)
81111d78:	dc401004 	addi	r17,sp,64
81111d7c:	003f2606 	br	81111a18 <__reset+0xfb0f1a18>
81111d80:	94802014 	ori	r18,r18,128
81111d84:	98c00007 	ldb	r3,0(r19)
81111d88:	003e1306 	br	811115d8 <__reset+0xfb0f15d8>
81111d8c:	98c00007 	ldb	r3,0(r19)
81111d90:	9ac00044 	addi	r11,r19,1
81111d94:	1a822b26 	beq	r3,r10,81112644 <___svfiprintf_internal_r+0x11a8>
81111d98:	18bff404 	addi	r2,r3,-48
81111d9c:	0021883a 	mov	r16,zero
81111da0:	30821e36 	bltu	r6,r2,8111261c <___svfiprintf_internal_r+0x1180>
81111da4:	58c00007 	ldb	r3,0(r11)
81111da8:	840002a4 	muli	r16,r16,10
81111dac:	5cc00044 	addi	r19,r11,1
81111db0:	9817883a 	mov	r11,r19
81111db4:	80a1883a 	add	r16,r16,r2
81111db8:	18bff404 	addi	r2,r3,-48
81111dbc:	30bff92e 	bgeu	r6,r2,81111da4 <__reset+0xfb0f1da4>
81111dc0:	803e060e 	bge	r16,zero,811115dc <__reset+0xfb0f15dc>
81111dc4:	043fffc4 	movi	r16,-1
81111dc8:	003e0406 	br	811115dc <__reset+0xfb0f15dc>
81111dcc:	21003fcc 	andi	r4,r4,255
81111dd0:	2002371e 	bne	r4,zero,811126b0 <___svfiprintf_internal_r+0x1214>
81111dd4:	94800414 	ori	r18,r18,16
81111dd8:	9080080c 	andi	r2,r18,32
81111ddc:	103ebb1e 	bne	r2,zero,811118cc <__reset+0xfb0f18cc>
81111de0:	9080040c 	andi	r2,r18,16
81111de4:	10013b26 	beq	r2,zero,811122d4 <___svfiprintf_internal_r+0xe38>
81111de8:	dac02317 	ldw	r11,140(sp)
81111dec:	d8001d85 	stb	zero,118(sp)
81111df0:	0013883a 	mov	r9,zero
81111df4:	58800104 	addi	r2,r11,4
81111df8:	5f000017 	ldw	fp,0(r11)
81111dfc:	80013d16 	blt	r16,zero,811122f4 <___svfiprintf_internal_r+0xe58>
81111e00:	00ffdfc4 	movi	r3,-129
81111e04:	d8802315 	stw	r2,140(sp)
81111e08:	90e4703a 	and	r18,r18,r3
81111e0c:	0015883a 	mov	r10,zero
81111e10:	e03eba26 	beq	fp,zero,811118fc <__reset+0xfb0f18fc>
81111e14:	00800244 	movi	r2,9
81111e18:	173f7236 	bltu	r2,fp,81111be4 <__reset+0xfb0f1be4>
81111e1c:	dac02b17 	ldw	r11,172(sp)
81111e20:	e7000c04 	addi	fp,fp,48
81111e24:	df0019c5 	stb	fp,103(sp)
81111e28:	dac02115 	stw	r11,132(sp)
81111e2c:	dc4019c4 	addi	r17,sp,103
81111e30:	003eb606 	br	8111190c <__reset+0xfb0f190c>
81111e34:	21003fcc 	andi	r4,r4,255
81111e38:	20021f1e 	bne	r4,zero,811126b8 <___svfiprintf_internal_r+0x121c>
81111e3c:	94800414 	ori	r18,r18,16
81111e40:	9080080c 	andi	r2,r18,32
81111e44:	103ec51e 	bne	r2,zero,8111195c <__reset+0xfb0f195c>
81111e48:	9080040c 	andi	r2,r18,16
81111e4c:	10016926 	beq	r2,zero,811123f4 <___svfiprintf_internal_r+0xf58>
81111e50:	dac02317 	ldw	r11,140(sp)
81111e54:	d8001d85 	stb	zero,118(sp)
81111e58:	0013883a 	mov	r9,zero
81111e5c:	58800104 	addi	r2,r11,4
81111e60:	5f000017 	ldw	fp,0(r11)
81111e64:	80016b16 	blt	r16,zero,81112414 <___svfiprintf_internal_r+0xf78>
81111e68:	00ffdfc4 	movi	r3,-129
81111e6c:	d8802315 	stw	r2,140(sp)
81111e70:	90e4703a 	and	r18,r18,r3
81111e74:	e03ec41e 	bne	fp,zero,81111988 <__reset+0xfb0f1988>
81111e78:	0015883a 	mov	r10,zero
81111e7c:	8001c226 	beq	r16,zero,81112588 <___svfiprintf_internal_r+0x10ec>
81111e80:	0039883a 	mov	fp,zero
81111e84:	0013883a 	mov	r9,zero
81111e88:	003ec006 	br	8111198c <__reset+0xfb0f198c>
81111e8c:	d8c01c17 	ldw	r3,112(sp)
81111e90:	d8801b17 	ldw	r2,108(sp)
81111e94:	d9001d87 	ldb	r4,118(sp)
81111e98:	20000b26 	beq	r4,zero,81111ec8 <___svfiprintf_internal_r+0xa2c>
81111e9c:	d9001d84 	addi	r4,sp,118
81111ea0:	18c00044 	addi	r3,r3,1
81111ea4:	10800044 	addi	r2,r2,1
81111ea8:	41000015 	stw	r4,0(r8)
81111eac:	01000044 	movi	r4,1
81111eb0:	41000115 	stw	r4,4(r8)
81111eb4:	d8c01c15 	stw	r3,112(sp)
81111eb8:	d8801b15 	stw	r2,108(sp)
81111ebc:	010001c4 	movi	r4,7
81111ec0:	2080e116 	blt	r4,r2,81112248 <___svfiprintf_internal_r+0xdac>
81111ec4:	42000204 	addi	r8,r8,8
81111ec8:	dac02217 	ldw	r11,136(sp)
81111ecc:	58000b26 	beq	r11,zero,81111efc <___svfiprintf_internal_r+0xa60>
81111ed0:	d9001d04 	addi	r4,sp,116
81111ed4:	18c00084 	addi	r3,r3,2
81111ed8:	10800044 	addi	r2,r2,1
81111edc:	41000015 	stw	r4,0(r8)
81111ee0:	01000084 	movi	r4,2
81111ee4:	41000115 	stw	r4,4(r8)
81111ee8:	d8c01c15 	stw	r3,112(sp)
81111eec:	d8801b15 	stw	r2,108(sp)
81111ef0:	010001c4 	movi	r4,7
81111ef4:	2080dd16 	blt	r4,r2,8111226c <___svfiprintf_internal_r+0xdd0>
81111ef8:	42000204 	addi	r8,r8,8
81111efc:	dac02617 	ldw	r11,152(sp)
81111f00:	01002004 	movi	r4,128
81111f04:	59008426 	beq	r11,r4,81112118 <___svfiprintf_internal_r+0xc7c>
81111f08:	dac02117 	ldw	r11,132(sp)
81111f0c:	82e1c83a 	sub	r16,r16,r11
81111f10:	0400270e 	bge	zero,r16,81111fb0 <___svfiprintf_internal_r+0xb14>
81111f14:	01c00404 	movi	r7,16
81111f18:	3c016a0e 	bge	r7,r16,811124c4 <___svfiprintf_internal_r+0x1028>
81111f1c:	016044b4 	movhi	r5,33042
81111f20:	29533e04 	addi	r5,r5,19704
81111f24:	d9402215 	stw	r5,136(sp)
81111f28:	070001c4 	movi	fp,7
81111f2c:	00000306 	br	81111f3c <___svfiprintf_internal_r+0xaa0>
81111f30:	843ffc04 	addi	r16,r16,-16
81111f34:	42000204 	addi	r8,r8,8
81111f38:	3c00130e 	bge	r7,r16,81111f88 <___svfiprintf_internal_r+0xaec>
81111f3c:	18c00404 	addi	r3,r3,16
81111f40:	10800044 	addi	r2,r2,1
81111f44:	45000015 	stw	r20,0(r8)
81111f48:	41c00115 	stw	r7,4(r8)
81111f4c:	d8c01c15 	stw	r3,112(sp)
81111f50:	d8801b15 	stw	r2,108(sp)
81111f54:	e0bff60e 	bge	fp,r2,81111f30 <__reset+0xfb0f1f30>
81111f58:	d9801a04 	addi	r6,sp,104
81111f5c:	b80b883a 	mov	r5,r23
81111f60:	a809883a 	mov	r4,r21
81111f64:	d9c02c15 	stw	r7,176(sp)
81111f68:	11112cc0 	call	811112cc <__ssprint_r>
81111f6c:	d9c02c17 	ldw	r7,176(sp)
81111f70:	1000581e 	bne	r2,zero,811120d4 <___svfiprintf_internal_r+0xc38>
81111f74:	843ffc04 	addi	r16,r16,-16
81111f78:	d8c01c17 	ldw	r3,112(sp)
81111f7c:	d8801b17 	ldw	r2,108(sp)
81111f80:	d811883a 	mov	r8,sp
81111f84:	3c3fed16 	blt	r7,r16,81111f3c <__reset+0xfb0f1f3c>
81111f88:	dac02217 	ldw	r11,136(sp)
81111f8c:	1c07883a 	add	r3,r3,r16
81111f90:	10800044 	addi	r2,r2,1
81111f94:	42c00015 	stw	r11,0(r8)
81111f98:	44000115 	stw	r16,4(r8)
81111f9c:	d8c01c15 	stw	r3,112(sp)
81111fa0:	d8801b15 	stw	r2,108(sp)
81111fa4:	010001c4 	movi	r4,7
81111fa8:	20809e16 	blt	r4,r2,81112224 <___svfiprintf_internal_r+0xd88>
81111fac:	42000204 	addi	r8,r8,8
81111fb0:	dac02117 	ldw	r11,132(sp)
81111fb4:	10800044 	addi	r2,r2,1
81111fb8:	44400015 	stw	r17,0(r8)
81111fbc:	58c7883a 	add	r3,r11,r3
81111fc0:	42c00115 	stw	r11,4(r8)
81111fc4:	d8c01c15 	stw	r3,112(sp)
81111fc8:	d8801b15 	stw	r2,108(sp)
81111fcc:	010001c4 	movi	r4,7
81111fd0:	20807f16 	blt	r4,r2,811121d0 <___svfiprintf_internal_r+0xd34>
81111fd4:	42000204 	addi	r8,r8,8
81111fd8:	9480010c 	andi	r18,r18,4
81111fdc:	90002926 	beq	r18,zero,81112084 <___svfiprintf_internal_r+0xbe8>
81111fe0:	dac02417 	ldw	r11,144(sp)
81111fe4:	d8802017 	ldw	r2,128(sp)
81111fe8:	58a1c83a 	sub	r16,r11,r2
81111fec:	0400250e 	bge	zero,r16,81112084 <___svfiprintf_internal_r+0xbe8>
81111ff0:	04400404 	movi	r17,16
81111ff4:	d8801b17 	ldw	r2,108(sp)
81111ff8:	8c017c0e 	bge	r17,r16,811125ec <___svfiprintf_internal_r+0x1150>
81111ffc:	016044b4 	movhi	r5,33042
81112000:	29534204 	addi	r5,r5,19720
81112004:	d9402815 	stw	r5,160(sp)
81112008:	048001c4 	movi	r18,7
8111200c:	00000306 	br	8111201c <___svfiprintf_internal_r+0xb80>
81112010:	843ffc04 	addi	r16,r16,-16
81112014:	42000204 	addi	r8,r8,8
81112018:	8c00110e 	bge	r17,r16,81112060 <___svfiprintf_internal_r+0xbc4>
8111201c:	18c00404 	addi	r3,r3,16
81112020:	10800044 	addi	r2,r2,1
81112024:	45800015 	stw	r22,0(r8)
81112028:	44400115 	stw	r17,4(r8)
8111202c:	d8c01c15 	stw	r3,112(sp)
81112030:	d8801b15 	stw	r2,108(sp)
81112034:	90bff60e 	bge	r18,r2,81112010 <__reset+0xfb0f2010>
81112038:	d9801a04 	addi	r6,sp,104
8111203c:	b80b883a 	mov	r5,r23
81112040:	a809883a 	mov	r4,r21
81112044:	11112cc0 	call	811112cc <__ssprint_r>
81112048:	1000221e 	bne	r2,zero,811120d4 <___svfiprintf_internal_r+0xc38>
8111204c:	843ffc04 	addi	r16,r16,-16
81112050:	d8c01c17 	ldw	r3,112(sp)
81112054:	d8801b17 	ldw	r2,108(sp)
81112058:	d811883a 	mov	r8,sp
8111205c:	8c3fef16 	blt	r17,r16,8111201c <__reset+0xfb0f201c>
81112060:	dac02817 	ldw	r11,160(sp)
81112064:	1c07883a 	add	r3,r3,r16
81112068:	10800044 	addi	r2,r2,1
8111206c:	42c00015 	stw	r11,0(r8)
81112070:	44000115 	stw	r16,4(r8)
81112074:	d8c01c15 	stw	r3,112(sp)
81112078:	d8801b15 	stw	r2,108(sp)
8111207c:	010001c4 	movi	r4,7
81112080:	2080aa16 	blt	r4,r2,8111232c <___svfiprintf_internal_r+0xe90>
81112084:	d8802417 	ldw	r2,144(sp)
81112088:	dac02017 	ldw	r11,128(sp)
8111208c:	12c0010e 	bge	r2,r11,81112094 <___svfiprintf_internal_r+0xbf8>
81112090:	5805883a 	mov	r2,r11
81112094:	dac02517 	ldw	r11,148(sp)
81112098:	5897883a 	add	r11,r11,r2
8111209c:	dac02515 	stw	r11,148(sp)
811120a0:	1800531e 	bne	r3,zero,811121f0 <___svfiprintf_internal_r+0xd54>
811120a4:	98800007 	ldb	r2,0(r19)
811120a8:	d8001b15 	stw	zero,108(sp)
811120ac:	d811883a 	mov	r8,sp
811120b0:	103d231e 	bne	r2,zero,81111540 <__reset+0xfb0f1540>
811120b4:	9823883a 	mov	r17,r19
811120b8:	003d3906 	br	811115a0 <__reset+0xfb0f15a0>
811120bc:	d8801c17 	ldw	r2,112(sp)
811120c0:	10000426 	beq	r2,zero,811120d4 <___svfiprintf_internal_r+0xc38>
811120c4:	d9402717 	ldw	r5,156(sp)
811120c8:	d9002a17 	ldw	r4,168(sp)
811120cc:	d9801a04 	addi	r6,sp,104
811120d0:	11112cc0 	call	811112cc <__ssprint_r>
811120d4:	dac02717 	ldw	r11,156(sp)
811120d8:	d8802517 	ldw	r2,148(sp)
811120dc:	58c0030b 	ldhu	r3,12(r11)
811120e0:	18c0100c 	andi	r3,r3,64
811120e4:	1801381e 	bne	r3,zero,811125c8 <___svfiprintf_internal_r+0x112c>
811120e8:	dfc03717 	ldw	ra,220(sp)
811120ec:	df003617 	ldw	fp,216(sp)
811120f0:	ddc03517 	ldw	r23,212(sp)
811120f4:	dd803417 	ldw	r22,208(sp)
811120f8:	dd403317 	ldw	r21,204(sp)
811120fc:	dd003217 	ldw	r20,200(sp)
81112100:	dcc03117 	ldw	r19,196(sp)
81112104:	dc803017 	ldw	r18,192(sp)
81112108:	dc402f17 	ldw	r17,188(sp)
8111210c:	dc002e17 	ldw	r16,184(sp)
81112110:	dec03804 	addi	sp,sp,224
81112114:	f800283a 	ret
81112118:	dac02417 	ldw	r11,144(sp)
8111211c:	d9002017 	ldw	r4,128(sp)
81112120:	5939c83a 	sub	fp,r11,r4
81112124:	073f780e 	bge	zero,fp,81111f08 <__reset+0xfb0f1f08>
81112128:	02400404 	movi	r9,16
8111212c:	4f01370e 	bge	r9,fp,8111260c <___svfiprintf_internal_r+0x1170>
81112130:	02e044b4 	movhi	r11,33042
81112134:	5ad33e04 	addi	r11,r11,19704
81112138:	dac02215 	stw	r11,136(sp)
8111213c:	028001c4 	movi	r10,7
81112140:	00000306 	br	81112150 <___svfiprintf_internal_r+0xcb4>
81112144:	e73ffc04 	addi	fp,fp,-16
81112148:	42000204 	addi	r8,r8,8
8111214c:	4f00150e 	bge	r9,fp,811121a4 <___svfiprintf_internal_r+0xd08>
81112150:	18c00404 	addi	r3,r3,16
81112154:	10800044 	addi	r2,r2,1
81112158:	45000015 	stw	r20,0(r8)
8111215c:	42400115 	stw	r9,4(r8)
81112160:	d8c01c15 	stw	r3,112(sp)
81112164:	d8801b15 	stw	r2,108(sp)
81112168:	50bff60e 	bge	r10,r2,81112144 <__reset+0xfb0f2144>
8111216c:	d9801a04 	addi	r6,sp,104
81112170:	b80b883a 	mov	r5,r23
81112174:	a809883a 	mov	r4,r21
81112178:	da402c15 	stw	r9,176(sp)
8111217c:	da802d15 	stw	r10,180(sp)
81112180:	11112cc0 	call	811112cc <__ssprint_r>
81112184:	da402c17 	ldw	r9,176(sp)
81112188:	da802d17 	ldw	r10,180(sp)
8111218c:	103fd11e 	bne	r2,zero,811120d4 <__reset+0xfb0f20d4>
81112190:	e73ffc04 	addi	fp,fp,-16
81112194:	d8c01c17 	ldw	r3,112(sp)
81112198:	d8801b17 	ldw	r2,108(sp)
8111219c:	d811883a 	mov	r8,sp
811121a0:	4f3feb16 	blt	r9,fp,81112150 <__reset+0xfb0f2150>
811121a4:	dac02217 	ldw	r11,136(sp)
811121a8:	1f07883a 	add	r3,r3,fp
811121ac:	10800044 	addi	r2,r2,1
811121b0:	42c00015 	stw	r11,0(r8)
811121b4:	47000115 	stw	fp,4(r8)
811121b8:	d8c01c15 	stw	r3,112(sp)
811121bc:	d8801b15 	stw	r2,108(sp)
811121c0:	010001c4 	movi	r4,7
811121c4:	2080b616 	blt	r4,r2,811124a0 <___svfiprintf_internal_r+0x1004>
811121c8:	42000204 	addi	r8,r8,8
811121cc:	003f4e06 	br	81111f08 <__reset+0xfb0f1f08>
811121d0:	d9801a04 	addi	r6,sp,104
811121d4:	b80b883a 	mov	r5,r23
811121d8:	a809883a 	mov	r4,r21
811121dc:	11112cc0 	call	811112cc <__ssprint_r>
811121e0:	103fbc1e 	bne	r2,zero,811120d4 <__reset+0xfb0f20d4>
811121e4:	d8c01c17 	ldw	r3,112(sp)
811121e8:	d811883a 	mov	r8,sp
811121ec:	003f7a06 	br	81111fd8 <__reset+0xfb0f1fd8>
811121f0:	d9801a04 	addi	r6,sp,104
811121f4:	b80b883a 	mov	r5,r23
811121f8:	a809883a 	mov	r4,r21
811121fc:	11112cc0 	call	811112cc <__ssprint_r>
81112200:	103fa826 	beq	r2,zero,811120a4 <__reset+0xfb0f20a4>
81112204:	003fb306 	br	811120d4 <__reset+0xfb0f20d4>
81112208:	d9801a04 	addi	r6,sp,104
8111220c:	b80b883a 	mov	r5,r23
81112210:	a809883a 	mov	r4,r21
81112214:	11112cc0 	call	811112cc <__ssprint_r>
81112218:	103fae1e 	bne	r2,zero,811120d4 <__reset+0xfb0f20d4>
8111221c:	d811883a 	mov	r8,sp
81112220:	003cdc06 	br	81111594 <__reset+0xfb0f1594>
81112224:	d9801a04 	addi	r6,sp,104
81112228:	b80b883a 	mov	r5,r23
8111222c:	a809883a 	mov	r4,r21
81112230:	11112cc0 	call	811112cc <__ssprint_r>
81112234:	103fa71e 	bne	r2,zero,811120d4 <__reset+0xfb0f20d4>
81112238:	d8c01c17 	ldw	r3,112(sp)
8111223c:	d8801b17 	ldw	r2,108(sp)
81112240:	d811883a 	mov	r8,sp
81112244:	003f5a06 	br	81111fb0 <__reset+0xfb0f1fb0>
81112248:	d9801a04 	addi	r6,sp,104
8111224c:	b80b883a 	mov	r5,r23
81112250:	a809883a 	mov	r4,r21
81112254:	11112cc0 	call	811112cc <__ssprint_r>
81112258:	103f9e1e 	bne	r2,zero,811120d4 <__reset+0xfb0f20d4>
8111225c:	d8c01c17 	ldw	r3,112(sp)
81112260:	d8801b17 	ldw	r2,108(sp)
81112264:	d811883a 	mov	r8,sp
81112268:	003f1706 	br	81111ec8 <__reset+0xfb0f1ec8>
8111226c:	d9801a04 	addi	r6,sp,104
81112270:	b80b883a 	mov	r5,r23
81112274:	a809883a 	mov	r4,r21
81112278:	11112cc0 	call	811112cc <__ssprint_r>
8111227c:	103f951e 	bne	r2,zero,811120d4 <__reset+0xfb0f20d4>
81112280:	d8c01c17 	ldw	r3,112(sp)
81112284:	d8801b17 	ldw	r2,108(sp)
81112288:	d811883a 	mov	r8,sp
8111228c:	003f1b06 	br	81111efc <__reset+0xfb0f1efc>
81112290:	d8001d85 	stb	zero,118(sp)
81112294:	80007b16 	blt	r16,zero,81112484 <___svfiprintf_internal_r+0xfe8>
81112298:	00ffdfc4 	movi	r3,-129
8111229c:	e244b03a 	or	r2,fp,r9
811122a0:	90e4703a 	and	r18,r18,r3
811122a4:	103d7026 	beq	r2,zero,81111868 <__reset+0xfb0f1868>
811122a8:	0015883a 	mov	r10,zero
811122ac:	003d7206 	br	81111878 <__reset+0xfb0f1878>
811122b0:	d9801a04 	addi	r6,sp,104
811122b4:	b80b883a 	mov	r5,r23
811122b8:	a809883a 	mov	r4,r21
811122bc:	11112cc0 	call	811112cc <__ssprint_r>
811122c0:	103f841e 	bne	r2,zero,811120d4 <__reset+0xfb0f20d4>
811122c4:	d8c01c17 	ldw	r3,112(sp)
811122c8:	d8801b17 	ldw	r2,108(sp)
811122cc:	d811883a 	mov	r8,sp
811122d0:	003ef006 	br	81111e94 <__reset+0xfb0f1e94>
811122d4:	9080100c 	andi	r2,r18,64
811122d8:	d8001d85 	stb	zero,118(sp)
811122dc:	dac02317 	ldw	r11,140(sp)
811122e0:	10008126 	beq	r2,zero,811124e8 <___svfiprintf_internal_r+0x104c>
811122e4:	58800104 	addi	r2,r11,4
811122e8:	5f00000b 	ldhu	fp,0(r11)
811122ec:	0013883a 	mov	r9,zero
811122f0:	803ec30e 	bge	r16,zero,81111e00 <__reset+0xfb0f1e00>
811122f4:	d8802315 	stw	r2,140(sp)
811122f8:	0015883a 	mov	r10,zero
811122fc:	e244b03a 	or	r2,fp,r9
81112300:	103e371e 	bne	r2,zero,81111be0 <__reset+0xfb0f1be0>
81112304:	00800044 	movi	r2,1
81112308:	10803fcc 	andi	r2,r2,255
8111230c:	00c00044 	movi	r3,1
81112310:	10c06126 	beq	r2,r3,81112498 <___svfiprintf_internal_r+0xffc>
81112314:	00c00084 	movi	r3,2
81112318:	10fd5526 	beq	r2,r3,81111870 <__reset+0xfb0f1870>
8111231c:	003ed806 	br	81111e80 <__reset+0xfb0f1e80>
81112320:	d8802315 	stw	r2,140(sp)
81112324:	98c00007 	ldb	r3,0(r19)
81112328:	003cab06 	br	811115d8 <__reset+0xfb0f15d8>
8111232c:	d9801a04 	addi	r6,sp,104
81112330:	b80b883a 	mov	r5,r23
81112334:	a809883a 	mov	r4,r21
81112338:	11112cc0 	call	811112cc <__ssprint_r>
8111233c:	103f651e 	bne	r2,zero,811120d4 <__reset+0xfb0f20d4>
81112340:	d8c01c17 	ldw	r3,112(sp)
81112344:	003f4f06 	br	81112084 <__reset+0xfb0f2084>
81112348:	00a044b4 	movhi	r2,33042
8111234c:	1091cb04 	addi	r2,r2,18220
81112350:	d8802915 	stw	r2,164(sp)
81112354:	003d4406 	br	81111868 <__reset+0xfb0f1868>
81112358:	dac02317 	ldw	r11,140(sp)
8111235c:	58800017 	ldw	r2,0(r11)
81112360:	dac02517 	ldw	r11,148(sp)
81112364:	5807d7fa 	srai	r3,r11,31
81112368:	dac02317 	ldw	r11,140(sp)
8111236c:	10c00115 	stw	r3,4(r2)
81112370:	5ac00104 	addi	r11,r11,4
81112374:	dac02315 	stw	r11,140(sp)
81112378:	dac02517 	ldw	r11,148(sp)
8111237c:	12c00015 	stw	r11,0(r2)
81112380:	003c6d06 	br	81111538 <__reset+0xfb0f1538>
81112384:	9080100c 	andi	r2,r18,64
81112388:	dac02317 	ldw	r11,140(sp)
8111238c:	103e5326 	beq	r2,zero,81111cdc <__reset+0xfb0f1cdc>
81112390:	5f00000f 	ldh	fp,0(r11)
81112394:	5ac00104 	addi	r11,r11,4
81112398:	dac02315 	stw	r11,140(sp)
8111239c:	e013d7fa 	srai	r9,fp,31
811123a0:	4805883a 	mov	r2,r9
811123a4:	003e0706 	br	81111bc4 <__reset+0xfb0f1bc4>
811123a8:	00800c04 	movi	r2,48
811123ac:	d8801d05 	stb	r2,116(sp)
811123b0:	d8c01d45 	stb	r3,117(sp)
811123b4:	d8001d85 	stb	zero,118(sp)
811123b8:	90800094 	ori	r2,r18,2
811123bc:	80008f16 	blt	r16,zero,811125fc <___svfiprintf_internal_r+0x1160>
811123c0:	00bfdfc4 	movi	r2,-129
811123c4:	90a4703a 	and	r18,r18,r2
811123c8:	94800094 	ori	r18,r18,2
811123cc:	0015883a 	mov	r10,zero
811123d0:	003d2906 	br	81111878 <__reset+0xfb0f1878>
811123d4:	98c00007 	ldb	r3,0(r19)
811123d8:	003c7f06 	br	811115d8 <__reset+0xfb0f15d8>
811123dc:	dac02317 	ldw	r11,140(sp)
811123e0:	0013883a 	mov	r9,zero
811123e4:	5f000017 	ldw	fp,0(r11)
811123e8:	5ac00104 	addi	r11,r11,4
811123ec:	dac02315 	stw	r11,140(sp)
811123f0:	003d1506 	br	81111848 <__reset+0xfb0f1848>
811123f4:	9080100c 	andi	r2,r18,64
811123f8:	d8001d85 	stb	zero,118(sp)
811123fc:	dac02317 	ldw	r11,140(sp)
81112400:	10003426 	beq	r2,zero,811124d4 <___svfiprintf_internal_r+0x1038>
81112404:	58800104 	addi	r2,r11,4
81112408:	5f00000b 	ldhu	fp,0(r11)
8111240c:	0013883a 	mov	r9,zero
81112410:	803e950e 	bge	r16,zero,81111e68 <__reset+0xfb0f1e68>
81112414:	e246b03a 	or	r3,fp,r9
81112418:	d8802315 	stw	r2,140(sp)
8111241c:	183d5a1e 	bne	r3,zero,81111988 <__reset+0xfb0f1988>
81112420:	0015883a 	mov	r10,zero
81112424:	0005883a 	mov	r2,zero
81112428:	003fb706 	br	81112308 <__reset+0xfb0f2308>
8111242c:	98c00043 	ldbu	r3,1(r19)
81112430:	94800814 	ori	r18,r18,32
81112434:	9cc00044 	addi	r19,r19,1
81112438:	18c03fcc 	andi	r3,r3,255
8111243c:	18c0201c 	xori	r3,r3,128
81112440:	18ffe004 	addi	r3,r3,-128
81112444:	003c6406 	br	811115d8 <__reset+0xfb0f15d8>
81112448:	d8c02315 	stw	r3,140(sp)
8111244c:	0015883a 	mov	r10,zero
81112450:	003faa06 	br	811122fc <__reset+0xfb0f22fc>
81112454:	dac02317 	ldw	r11,140(sp)
81112458:	58800017 	ldw	r2,0(r11)
8111245c:	5ac00104 	addi	r11,r11,4
81112460:	dac02315 	stw	r11,140(sp)
81112464:	dac02517 	ldw	r11,148(sp)
81112468:	12c00015 	stw	r11,0(r2)
8111246c:	003c3206 	br	81111538 <__reset+0xfb0f1538>
81112470:	012044b4 	movhi	r4,33042
81112474:	2111cb04 	addi	r4,r4,18220
81112478:	d9002915 	stw	r4,164(sp)
8111247c:	d8c02315 	stw	r3,140(sp)
81112480:	1025883a 	mov	r18,r2
81112484:	e244b03a 	or	r2,fp,r9
81112488:	103f871e 	bne	r2,zero,811122a8 <__reset+0xfb0f22a8>
8111248c:	0015883a 	mov	r10,zero
81112490:	00800084 	movi	r2,2
81112494:	003f9c06 	br	81112308 <__reset+0xfb0f2308>
81112498:	0039883a 	mov	fp,zero
8111249c:	003e5f06 	br	81111e1c <__reset+0xfb0f1e1c>
811124a0:	d9801a04 	addi	r6,sp,104
811124a4:	b80b883a 	mov	r5,r23
811124a8:	a809883a 	mov	r4,r21
811124ac:	11112cc0 	call	811112cc <__ssprint_r>
811124b0:	103f081e 	bne	r2,zero,811120d4 <__reset+0xfb0f20d4>
811124b4:	d8c01c17 	ldw	r3,112(sp)
811124b8:	d8801b17 	ldw	r2,108(sp)
811124bc:	d811883a 	mov	r8,sp
811124c0:	003e9106 	br	81111f08 <__reset+0xfb0f1f08>
811124c4:	012044b4 	movhi	r4,33042
811124c8:	21133e04 	addi	r4,r4,19704
811124cc:	d9002215 	stw	r4,136(sp)
811124d0:	003ead06 	br	81111f88 <__reset+0xfb0f1f88>
811124d4:	58800104 	addi	r2,r11,4
811124d8:	5f000017 	ldw	fp,0(r11)
811124dc:	0013883a 	mov	r9,zero
811124e0:	803e610e 	bge	r16,zero,81111e68 <__reset+0xfb0f1e68>
811124e4:	003fcb06 	br	81112414 <__reset+0xfb0f2414>
811124e8:	58800104 	addi	r2,r11,4
811124ec:	5f000017 	ldw	fp,0(r11)
811124f0:	0013883a 	mov	r9,zero
811124f4:	803e420e 	bge	r16,zero,81111e00 <__reset+0xfb0f1e00>
811124f8:	003f7e06 	br	811122f4 <__reset+0xfb0f22f4>
811124fc:	5f000017 	ldw	fp,0(r11)
81112500:	5ac00104 	addi	r11,r11,4
81112504:	0013883a 	mov	r9,zero
81112508:	dac02315 	stw	r11,140(sp)
8111250c:	003cce06 	br	81111848 <__reset+0xfb0f1848>
81112510:	8809883a 	mov	r4,r17
81112514:	da002c15 	stw	r8,176(sp)
81112518:	1101bb00 	call	81101bb0 <strlen>
8111251c:	d8802115 	stw	r2,132(sp)
81112520:	da801d83 	ldbu	r10,118(sp)
81112524:	df002315 	stw	fp,140(sp)
81112528:	0021883a 	mov	r16,zero
8111252c:	da002c17 	ldw	r8,176(sp)
81112530:	003cf606 	br	8111190c <__reset+0xfb0f190c>
81112534:	00800184 	movi	r2,6
81112538:	1400012e 	bgeu	r2,r16,81112540 <___svfiprintf_internal_r+0x10a4>
8111253c:	1021883a 	mov	r16,r2
81112540:	dc002115 	stw	r16,132(sp)
81112544:	8005883a 	mov	r2,r16
81112548:	80003c16 	blt	r16,zero,8111263c <___svfiprintf_internal_r+0x11a0>
8111254c:	046044b4 	movhi	r17,33042
81112550:	d8802015 	stw	r2,128(sp)
81112554:	df002315 	stw	fp,140(sp)
81112558:	8c51d004 	addi	r17,r17,18240
8111255c:	003d2e06 	br	81111a18 <__reset+0xfb0f1a18>
81112560:	04001004 	movi	r16,64
81112564:	800b883a 	mov	r5,r16
81112568:	1100cf00 	call	81100cf0 <_malloc_r>
8111256c:	dac02717 	ldw	r11,156(sp)
81112570:	58800015 	stw	r2,0(r11)
81112574:	58800415 	stw	r2,16(r11)
81112578:	10004826 	beq	r2,zero,8111269c <___svfiprintf_internal_r+0x1200>
8111257c:	dac02717 	ldw	r11,156(sp)
81112580:	5c000515 	stw	r16,20(r11)
81112584:	003bd906 	br	811114ec <__reset+0xfb0f14ec>
81112588:	9080004c 	andi	r2,r18,1
8111258c:	0015883a 	mov	r10,zero
81112590:	10000626 	beq	r2,zero,811125ac <___svfiprintf_internal_r+0x1110>
81112594:	dac02b17 	ldw	r11,172(sp)
81112598:	00800c04 	movi	r2,48
8111259c:	d88019c5 	stb	r2,103(sp)
811125a0:	dac02115 	stw	r11,132(sp)
811125a4:	dc4019c4 	addi	r17,sp,103
811125a8:	003cd806 	br	8111190c <__reset+0xfb0f190c>
811125ac:	d8002115 	stw	zero,132(sp)
811125b0:	dc401a04 	addi	r17,sp,104
811125b4:	003cd506 	br	8111190c <__reset+0xfb0f190c>
811125b8:	012044b4 	movhi	r4,33042
811125bc:	21134204 	addi	r4,r4,19720
811125c0:	d9002815 	stw	r4,160(sp)
811125c4:	003d4306 	br	81111ad4 <__reset+0xfb0f1ad4>
811125c8:	00bfffc4 	movi	r2,-1
811125cc:	003ec606 	br	811120e8 <__reset+0xfb0f20e8>
811125d0:	00800044 	movi	r2,1
811125d4:	10803fcc 	andi	r2,r2,255
811125d8:	00c00044 	movi	r3,1
811125dc:	10fd8026 	beq	r2,r3,81111be0 <__reset+0xfb0f1be0>
811125e0:	00c00084 	movi	r3,2
811125e4:	10fca426 	beq	r2,r3,81111878 <__reset+0xfb0f1878>
811125e8:	003ce806 	br	8111198c <__reset+0xfb0f198c>
811125ec:	012044b4 	movhi	r4,33042
811125f0:	21134204 	addi	r4,r4,19720
811125f4:	d9002815 	stw	r4,160(sp)
811125f8:	003e9906 	br	81112060 <__reset+0xfb0f2060>
811125fc:	1025883a 	mov	r18,r2
81112600:	0015883a 	mov	r10,zero
81112604:	00800084 	movi	r2,2
81112608:	003ff206 	br	811125d4 <__reset+0xfb0f25d4>
8111260c:	016044b4 	movhi	r5,33042
81112610:	29533e04 	addi	r5,r5,19704
81112614:	d9402215 	stw	r5,136(sp)
81112618:	003ee206 	br	811121a4 <__reset+0xfb0f21a4>
8111261c:	5827883a 	mov	r19,r11
81112620:	0021883a 	mov	r16,zero
81112624:	003bed06 	br	811115dc <__reset+0xfb0f15dc>
81112628:	dc002115 	stw	r16,132(sp)
8111262c:	da801d83 	ldbu	r10,118(sp)
81112630:	df002315 	stw	fp,140(sp)
81112634:	0021883a 	mov	r16,zero
81112638:	003cb406 	br	8111190c <__reset+0xfb0f190c>
8111263c:	0005883a 	mov	r2,zero
81112640:	003fc206 	br	8111254c <__reset+0xfb0f254c>
81112644:	d8802317 	ldw	r2,140(sp)
81112648:	98c00043 	ldbu	r3,1(r19)
8111264c:	5827883a 	mov	r19,r11
81112650:	14000017 	ldw	r16,0(r2)
81112654:	10800104 	addi	r2,r2,4
81112658:	d8802315 	stw	r2,140(sp)
8111265c:	803f760e 	bge	r16,zero,81112438 <__reset+0xfb0f2438>
81112660:	18c03fcc 	andi	r3,r3,255
81112664:	18c0201c 	xori	r3,r3,128
81112668:	043fffc4 	movi	r16,-1
8111266c:	18ffe004 	addi	r3,r3,-128
81112670:	003bd906 	br	811115d8 <__reset+0xfb0f15d8>
81112674:	d9c01d85 	stb	r7,118(sp)
81112678:	003cb606 	br	81111954 <__reset+0xfb0f1954>
8111267c:	d9c01d85 	stb	r7,118(sp)
81112680:	003d2106 	br	81111b08 <__reset+0xfb0f1b08>
81112684:	d9c01d85 	stb	r7,118(sp)
81112688:	003d8e06 	br	81111cc4 <__reset+0xfb0f1cc4>
8111268c:	d9c01d85 	stb	r7,118(sp)
81112690:	003db306 	br	81111d60 <__reset+0xfb0f1d60>
81112694:	d9c01d85 	stb	r7,118(sp)
81112698:	003c8a06 	br	811118c4 <__reset+0xfb0f18c4>
8111269c:	dac02a17 	ldw	r11,168(sp)
811126a0:	00800304 	movi	r2,12
811126a4:	58800015 	stw	r2,0(r11)
811126a8:	00bfffc4 	movi	r2,-1
811126ac:	003e8e06 	br	811120e8 <__reset+0xfb0f20e8>
811126b0:	d9c01d85 	stb	r7,118(sp)
811126b4:	003dc706 	br	81111dd4 <__reset+0xfb0f1dd4>
811126b8:	d9c01d85 	stb	r7,118(sp)
811126bc:	003ddf06 	br	81111e3c <__reset+0xfb0f1e3c>
811126c0:	d9c01d85 	stb	r7,118(sp)
811126c4:	003d3706 	br	81111ba4 <__reset+0xfb0f1ba4>
811126c8:	d9c01d85 	stb	r7,118(sp)
811126cc:	003c5406 	br	81111820 <__reset+0xfb0f1820>
811126d0:	d9c01d85 	stb	r7,118(sp)
811126d4:	003d1d06 	br	81111b4c <__reset+0xfb0f1b4c>

811126d8 <__swbuf_r>:
811126d8:	defffb04 	addi	sp,sp,-20
811126dc:	dcc00315 	stw	r19,12(sp)
811126e0:	dc800215 	stw	r18,8(sp)
811126e4:	dc000015 	stw	r16,0(sp)
811126e8:	dfc00415 	stw	ra,16(sp)
811126ec:	dc400115 	stw	r17,4(sp)
811126f0:	2025883a 	mov	r18,r4
811126f4:	2827883a 	mov	r19,r5
811126f8:	3021883a 	mov	r16,r6
811126fc:	20000226 	beq	r4,zero,81112708 <__swbuf_r+0x30>
81112700:	20800e17 	ldw	r2,56(r4)
81112704:	10004226 	beq	r2,zero,81112810 <__swbuf_r+0x138>
81112708:	80800617 	ldw	r2,24(r16)
8111270c:	8100030b 	ldhu	r4,12(r16)
81112710:	80800215 	stw	r2,8(r16)
81112714:	2080020c 	andi	r2,r4,8
81112718:	10003626 	beq	r2,zero,811127f4 <__swbuf_r+0x11c>
8111271c:	80c00417 	ldw	r3,16(r16)
81112720:	18003426 	beq	r3,zero,811127f4 <__swbuf_r+0x11c>
81112724:	2088000c 	andi	r2,r4,8192
81112728:	9c403fcc 	andi	r17,r19,255
8111272c:	10001a26 	beq	r2,zero,81112798 <__swbuf_r+0xc0>
81112730:	80800017 	ldw	r2,0(r16)
81112734:	81000517 	ldw	r4,20(r16)
81112738:	10c7c83a 	sub	r3,r2,r3
8111273c:	1900200e 	bge	r3,r4,811127c0 <__swbuf_r+0xe8>
81112740:	18c00044 	addi	r3,r3,1
81112744:	81000217 	ldw	r4,8(r16)
81112748:	11400044 	addi	r5,r2,1
8111274c:	81400015 	stw	r5,0(r16)
81112750:	213fffc4 	addi	r4,r4,-1
81112754:	81000215 	stw	r4,8(r16)
81112758:	14c00005 	stb	r19,0(r2)
8111275c:	80800517 	ldw	r2,20(r16)
81112760:	10c01e26 	beq	r2,r3,811127dc <__swbuf_r+0x104>
81112764:	8080030b 	ldhu	r2,12(r16)
81112768:	1080004c 	andi	r2,r2,1
8111276c:	10000226 	beq	r2,zero,81112778 <__swbuf_r+0xa0>
81112770:	00800284 	movi	r2,10
81112774:	88801926 	beq	r17,r2,811127dc <__swbuf_r+0x104>
81112778:	8805883a 	mov	r2,r17
8111277c:	dfc00417 	ldw	ra,16(sp)
81112780:	dcc00317 	ldw	r19,12(sp)
81112784:	dc800217 	ldw	r18,8(sp)
81112788:	dc400117 	ldw	r17,4(sp)
8111278c:	dc000017 	ldw	r16,0(sp)
81112790:	dec00504 	addi	sp,sp,20
81112794:	f800283a 	ret
81112798:	81401917 	ldw	r5,100(r16)
8111279c:	00b7ffc4 	movi	r2,-8193
811127a0:	21080014 	ori	r4,r4,8192
811127a4:	2884703a 	and	r2,r5,r2
811127a8:	80801915 	stw	r2,100(r16)
811127ac:	80800017 	ldw	r2,0(r16)
811127b0:	8100030d 	sth	r4,12(r16)
811127b4:	81000517 	ldw	r4,20(r16)
811127b8:	10c7c83a 	sub	r3,r2,r3
811127bc:	193fe016 	blt	r3,r4,81112740 <__reset+0xfb0f2740>
811127c0:	800b883a 	mov	r5,r16
811127c4:	9009883a 	mov	r4,r18
811127c8:	11074500 	call	81107450 <_fflush_r>
811127cc:	1000071e 	bne	r2,zero,811127ec <__swbuf_r+0x114>
811127d0:	80800017 	ldw	r2,0(r16)
811127d4:	00c00044 	movi	r3,1
811127d8:	003fda06 	br	81112744 <__reset+0xfb0f2744>
811127dc:	800b883a 	mov	r5,r16
811127e0:	9009883a 	mov	r4,r18
811127e4:	11074500 	call	81107450 <_fflush_r>
811127e8:	103fe326 	beq	r2,zero,81112778 <__reset+0xfb0f2778>
811127ec:	00bfffc4 	movi	r2,-1
811127f0:	003fe206 	br	8111277c <__reset+0xfb0f277c>
811127f4:	800b883a 	mov	r5,r16
811127f8:	9009883a 	mov	r4,r18
811127fc:	11058040 	call	81105804 <__swsetup_r>
81112800:	103ffa1e 	bne	r2,zero,811127ec <__reset+0xfb0f27ec>
81112804:	8100030b 	ldhu	r4,12(r16)
81112808:	80c00417 	ldw	r3,16(r16)
8111280c:	003fc506 	br	81112724 <__reset+0xfb0f2724>
81112810:	110782c0 	call	8110782c <__sinit>
81112814:	003fbc06 	br	81112708 <__reset+0xfb0f2708>

81112818 <__swbuf>:
81112818:	00a044b4 	movhi	r2,33042
8111281c:	109b9c04 	addi	r2,r2,28272
81112820:	280d883a 	mov	r6,r5
81112824:	200b883a 	mov	r5,r4
81112828:	11000017 	ldw	r4,0(r2)
8111282c:	11126d81 	jmpi	811126d8 <__swbuf_r>

81112830 <_wcrtomb_r>:
81112830:	defff604 	addi	sp,sp,-40
81112834:	00a044b4 	movhi	r2,33042
81112838:	dc800815 	stw	r18,32(sp)
8111283c:	dc400715 	stw	r17,28(sp)
81112840:	dc000615 	stw	r16,24(sp)
81112844:	109ba204 	addi	r2,r2,28296
81112848:	dfc00915 	stw	ra,36(sp)
8111284c:	2021883a 	mov	r16,r4
81112850:	3823883a 	mov	r17,r7
81112854:	14800017 	ldw	r18,0(r2)
81112858:	28001426 	beq	r5,zero,811128ac <_wcrtomb_r+0x7c>
8111285c:	d9400415 	stw	r5,16(sp)
81112860:	d9800515 	stw	r6,20(sp)
81112864:	11087000 	call	81108700 <__locale_charset>
81112868:	d9800517 	ldw	r6,20(sp)
8111286c:	d9400417 	ldw	r5,16(sp)
81112870:	100f883a 	mov	r7,r2
81112874:	dc400015 	stw	r17,0(sp)
81112878:	8009883a 	mov	r4,r16
8111287c:	903ee83a 	callr	r18
81112880:	00ffffc4 	movi	r3,-1
81112884:	10c0031e 	bne	r2,r3,81112894 <_wcrtomb_r+0x64>
81112888:	88000015 	stw	zero,0(r17)
8111288c:	00c02284 	movi	r3,138
81112890:	80c00015 	stw	r3,0(r16)
81112894:	dfc00917 	ldw	ra,36(sp)
81112898:	dc800817 	ldw	r18,32(sp)
8111289c:	dc400717 	ldw	r17,28(sp)
811128a0:	dc000617 	ldw	r16,24(sp)
811128a4:	dec00a04 	addi	sp,sp,40
811128a8:	f800283a 	ret
811128ac:	11087000 	call	81108700 <__locale_charset>
811128b0:	100f883a 	mov	r7,r2
811128b4:	dc400015 	stw	r17,0(sp)
811128b8:	000d883a 	mov	r6,zero
811128bc:	d9400104 	addi	r5,sp,4
811128c0:	8009883a 	mov	r4,r16
811128c4:	903ee83a 	callr	r18
811128c8:	003fed06 	br	81112880 <__reset+0xfb0f2880>

811128cc <wcrtomb>:
811128cc:	defff604 	addi	sp,sp,-40
811128d0:	00a044b4 	movhi	r2,33042
811128d4:	dc800615 	stw	r18,24(sp)
811128d8:	dc400515 	stw	r17,20(sp)
811128dc:	109b9c04 	addi	r2,r2,28272
811128e0:	dfc00915 	stw	ra,36(sp)
811128e4:	dd000815 	stw	r20,32(sp)
811128e8:	dcc00715 	stw	r19,28(sp)
811128ec:	dc000415 	stw	r16,16(sp)
811128f0:	3025883a 	mov	r18,r6
811128f4:	14400017 	ldw	r17,0(r2)
811128f8:	20001926 	beq	r4,zero,81112960 <wcrtomb+0x94>
811128fc:	00a044b4 	movhi	r2,33042
81112900:	109ba204 	addi	r2,r2,28296
81112904:	15000017 	ldw	r20,0(r2)
81112908:	2021883a 	mov	r16,r4
8111290c:	2827883a 	mov	r19,r5
81112910:	11087000 	call	81108700 <__locale_charset>
81112914:	100f883a 	mov	r7,r2
81112918:	dc800015 	stw	r18,0(sp)
8111291c:	980d883a 	mov	r6,r19
81112920:	800b883a 	mov	r5,r16
81112924:	8809883a 	mov	r4,r17
81112928:	a03ee83a 	callr	r20
8111292c:	00ffffc4 	movi	r3,-1
81112930:	10c0031e 	bne	r2,r3,81112940 <wcrtomb+0x74>
81112934:	90000015 	stw	zero,0(r18)
81112938:	00c02284 	movi	r3,138
8111293c:	88c00015 	stw	r3,0(r17)
81112940:	dfc00917 	ldw	ra,36(sp)
81112944:	dd000817 	ldw	r20,32(sp)
81112948:	dcc00717 	ldw	r19,28(sp)
8111294c:	dc800617 	ldw	r18,24(sp)
81112950:	dc400517 	ldw	r17,20(sp)
81112954:	dc000417 	ldw	r16,16(sp)
81112958:	dec00a04 	addi	sp,sp,40
8111295c:	f800283a 	ret
81112960:	00a044b4 	movhi	r2,33042
81112964:	109ba204 	addi	r2,r2,28296
81112968:	14000017 	ldw	r16,0(r2)
8111296c:	11087000 	call	81108700 <__locale_charset>
81112970:	100f883a 	mov	r7,r2
81112974:	dc800015 	stw	r18,0(sp)
81112978:	000d883a 	mov	r6,zero
8111297c:	d9400104 	addi	r5,sp,4
81112980:	8809883a 	mov	r4,r17
81112984:	803ee83a 	callr	r16
81112988:	003fe806 	br	8111292c <__reset+0xfb0f292c>

8111298c <__ascii_wctomb>:
8111298c:	28000526 	beq	r5,zero,811129a4 <__ascii_wctomb+0x18>
81112990:	00803fc4 	movi	r2,255
81112994:	11800536 	bltu	r2,r6,811129ac <__ascii_wctomb+0x20>
81112998:	29800005 	stb	r6,0(r5)
8111299c:	00800044 	movi	r2,1
811129a0:	f800283a 	ret
811129a4:	0005883a 	mov	r2,zero
811129a8:	f800283a 	ret
811129ac:	00802284 	movi	r2,138
811129b0:	20800015 	stw	r2,0(r4)
811129b4:	00bfffc4 	movi	r2,-1
811129b8:	f800283a 	ret

811129bc <_wctomb_r>:
811129bc:	00a044b4 	movhi	r2,33042
811129c0:	defff904 	addi	sp,sp,-28
811129c4:	109ba204 	addi	r2,r2,28296
811129c8:	dfc00615 	stw	ra,24(sp)
811129cc:	dc400515 	stw	r17,20(sp)
811129d0:	dc000415 	stw	r16,16(sp)
811129d4:	3823883a 	mov	r17,r7
811129d8:	14000017 	ldw	r16,0(r2)
811129dc:	d9000115 	stw	r4,4(sp)
811129e0:	d9400215 	stw	r5,8(sp)
811129e4:	d9800315 	stw	r6,12(sp)
811129e8:	11087000 	call	81108700 <__locale_charset>
811129ec:	d9800317 	ldw	r6,12(sp)
811129f0:	d9400217 	ldw	r5,8(sp)
811129f4:	d9000117 	ldw	r4,4(sp)
811129f8:	100f883a 	mov	r7,r2
811129fc:	dc400015 	stw	r17,0(sp)
81112a00:	803ee83a 	callr	r16
81112a04:	dfc00617 	ldw	ra,24(sp)
81112a08:	dc400517 	ldw	r17,20(sp)
81112a0c:	dc000417 	ldw	r16,16(sp)
81112a10:	dec00704 	addi	sp,sp,28
81112a14:	f800283a 	ret

81112a18 <__fixunsdfsi>:
81112a18:	defffd04 	addi	sp,sp,-12
81112a1c:	000d883a 	mov	r6,zero
81112a20:	01d07834 	movhi	r7,16864
81112a24:	dc400115 	stw	r17,4(sp)
81112a28:	dc000015 	stw	r16,0(sp)
81112a2c:	dfc00215 	stw	ra,8(sp)
81112a30:	2023883a 	mov	r17,r4
81112a34:	2821883a 	mov	r16,r5
81112a38:	1114b080 	call	81114b08 <__gedf2>
81112a3c:	1000080e 	bge	r2,zero,81112a60 <__fixunsdfsi+0x48>
81112a40:	8809883a 	mov	r4,r17
81112a44:	800b883a 	mov	r5,r16
81112a48:	1115cec0 	call	81115cec <__fixdfsi>
81112a4c:	dfc00217 	ldw	ra,8(sp)
81112a50:	dc400117 	ldw	r17,4(sp)
81112a54:	dc000017 	ldw	r16,0(sp)
81112a58:	dec00304 	addi	sp,sp,12
81112a5c:	f800283a 	ret
81112a60:	000d883a 	mov	r6,zero
81112a64:	01d07834 	movhi	r7,16864
81112a68:	8809883a 	mov	r4,r17
81112a6c:	800b883a 	mov	r5,r16
81112a70:	11153f00 	call	811153f0 <__subdf3>
81112a74:	180b883a 	mov	r5,r3
81112a78:	1009883a 	mov	r4,r2
81112a7c:	1115cec0 	call	81115cec <__fixdfsi>
81112a80:	00e00034 	movhi	r3,32768
81112a84:	10c5883a 	add	r2,r2,r3
81112a88:	003ff006 	br	81112a4c <__reset+0xfb0f2a4c>

81112a8c <__udivdi3>:
81112a8c:	defff504 	addi	sp,sp,-44
81112a90:	dcc00415 	stw	r19,16(sp)
81112a94:	dc000115 	stw	r16,4(sp)
81112a98:	dfc00a15 	stw	ra,40(sp)
81112a9c:	df000915 	stw	fp,36(sp)
81112aa0:	ddc00815 	stw	r23,32(sp)
81112aa4:	dd800715 	stw	r22,28(sp)
81112aa8:	dd400615 	stw	r21,24(sp)
81112aac:	dd000515 	stw	r20,20(sp)
81112ab0:	dc800315 	stw	r18,12(sp)
81112ab4:	dc400215 	stw	r17,8(sp)
81112ab8:	2027883a 	mov	r19,r4
81112abc:	2821883a 	mov	r16,r5
81112ac0:	3800411e 	bne	r7,zero,81112bc8 <__udivdi3+0x13c>
81112ac4:	3023883a 	mov	r17,r6
81112ac8:	2025883a 	mov	r18,r4
81112acc:	2980522e 	bgeu	r5,r6,81112c18 <__udivdi3+0x18c>
81112ad0:	00bfffd4 	movui	r2,65535
81112ad4:	282d883a 	mov	r22,r5
81112ad8:	1180a836 	bltu	r2,r6,81112d7c <__udivdi3+0x2f0>
81112adc:	00803fc4 	movi	r2,255
81112ae0:	1185803a 	cmpltu	r2,r2,r6
81112ae4:	100490fa 	slli	r2,r2,3
81112ae8:	3086d83a 	srl	r3,r6,r2
81112aec:	012044b4 	movhi	r4,33042
81112af0:	21134604 	addi	r4,r4,19736
81112af4:	20c7883a 	add	r3,r4,r3
81112af8:	18c00003 	ldbu	r3,0(r3)
81112afc:	1885883a 	add	r2,r3,r2
81112b00:	00c00804 	movi	r3,32
81112b04:	1887c83a 	sub	r3,r3,r2
81112b08:	18000526 	beq	r3,zero,81112b20 <__udivdi3+0x94>
81112b0c:	80e0983a 	sll	r16,r16,r3
81112b10:	9884d83a 	srl	r2,r19,r2
81112b14:	30e2983a 	sll	r17,r6,r3
81112b18:	98e4983a 	sll	r18,r19,r3
81112b1c:	142cb03a 	or	r22,r2,r16
81112b20:	882ad43a 	srli	r21,r17,16
81112b24:	b009883a 	mov	r4,r22
81112b28:	8d3fffcc 	andi	r20,r17,65535
81112b2c:	a80b883a 	mov	r5,r21
81112b30:	11136980 	call	81113698 <__umodsi3>
81112b34:	b009883a 	mov	r4,r22
81112b38:	a80b883a 	mov	r5,r21
81112b3c:	1027883a 	mov	r19,r2
81112b40:	11136340 	call	81113634 <__udivsi3>
81112b44:	102d883a 	mov	r22,r2
81112b48:	9826943a 	slli	r19,r19,16
81112b4c:	9004d43a 	srli	r2,r18,16
81112b50:	a5a1383a 	mul	r16,r20,r22
81112b54:	14c4b03a 	or	r2,r2,r19
81112b58:	1400052e 	bgeu	r2,r16,81112b70 <__udivdi3+0xe4>
81112b5c:	1445883a 	add	r2,r2,r17
81112b60:	b0ffffc4 	addi	r3,r22,-1
81112b64:	14400136 	bltu	r2,r17,81112b6c <__udivdi3+0xe0>
81112b68:	14012336 	bltu	r2,r16,81112ff8 <__udivdi3+0x56c>
81112b6c:	182d883a 	mov	r22,r3
81112b70:	1421c83a 	sub	r16,r2,r16
81112b74:	a80b883a 	mov	r5,r21
81112b78:	8009883a 	mov	r4,r16
81112b7c:	11136980 	call	81113698 <__umodsi3>
81112b80:	1027883a 	mov	r19,r2
81112b84:	a80b883a 	mov	r5,r21
81112b88:	8009883a 	mov	r4,r16
81112b8c:	11136340 	call	81113634 <__udivsi3>
81112b90:	9826943a 	slli	r19,r19,16
81112b94:	a0a9383a 	mul	r20,r20,r2
81112b98:	94bfffcc 	andi	r18,r18,65535
81112b9c:	94e4b03a 	or	r18,r18,r19
81112ba0:	9500052e 	bgeu	r18,r20,81112bb8 <__udivdi3+0x12c>
81112ba4:	8ca5883a 	add	r18,r17,r18
81112ba8:	10ffffc4 	addi	r3,r2,-1
81112bac:	9440f136 	bltu	r18,r17,81112f74 <__udivdi3+0x4e8>
81112bb0:	9500f02e 	bgeu	r18,r20,81112f74 <__udivdi3+0x4e8>
81112bb4:	10bfff84 	addi	r2,r2,-2
81112bb8:	b00c943a 	slli	r6,r22,16
81112bbc:	0007883a 	mov	r3,zero
81112bc0:	3084b03a 	or	r2,r6,r2
81112bc4:	00005906 	br	81112d2c <__udivdi3+0x2a0>
81112bc8:	29c05636 	bltu	r5,r7,81112d24 <__udivdi3+0x298>
81112bcc:	00bfffd4 	movui	r2,65535
81112bd0:	11c0622e 	bgeu	r2,r7,81112d5c <__udivdi3+0x2d0>
81112bd4:	00804034 	movhi	r2,256
81112bd8:	10bfffc4 	addi	r2,r2,-1
81112bdc:	11c0ee36 	bltu	r2,r7,81112f98 <__udivdi3+0x50c>
81112be0:	00800404 	movi	r2,16
81112be4:	3886d83a 	srl	r3,r7,r2
81112be8:	012044b4 	movhi	r4,33042
81112bec:	21134604 	addi	r4,r4,19736
81112bf0:	20c7883a 	add	r3,r4,r3
81112bf4:	18c00003 	ldbu	r3,0(r3)
81112bf8:	05400804 	movi	r21,32
81112bfc:	1885883a 	add	r2,r3,r2
81112c00:	a8abc83a 	sub	r21,r21,r2
81112c04:	a800621e 	bne	r21,zero,81112d90 <__udivdi3+0x304>
81112c08:	3c00e936 	bltu	r7,r16,81112fb0 <__udivdi3+0x524>
81112c0c:	9985403a 	cmpgeu	r2,r19,r6
81112c10:	0007883a 	mov	r3,zero
81112c14:	00004506 	br	81112d2c <__udivdi3+0x2a0>
81112c18:	3000041e 	bne	r6,zero,81112c2c <__udivdi3+0x1a0>
81112c1c:	000b883a 	mov	r5,zero
81112c20:	01000044 	movi	r4,1
81112c24:	11136340 	call	81113634 <__udivsi3>
81112c28:	1023883a 	mov	r17,r2
81112c2c:	00bfffd4 	movui	r2,65535
81112c30:	14404e2e 	bgeu	r2,r17,81112d6c <__udivdi3+0x2e0>
81112c34:	00804034 	movhi	r2,256
81112c38:	10bfffc4 	addi	r2,r2,-1
81112c3c:	1440d836 	bltu	r2,r17,81112fa0 <__udivdi3+0x514>
81112c40:	00800404 	movi	r2,16
81112c44:	8886d83a 	srl	r3,r17,r2
81112c48:	012044b4 	movhi	r4,33042
81112c4c:	21134604 	addi	r4,r4,19736
81112c50:	20c7883a 	add	r3,r4,r3
81112c54:	18c00003 	ldbu	r3,0(r3)
81112c58:	1885883a 	add	r2,r3,r2
81112c5c:	00c00804 	movi	r3,32
81112c60:	1887c83a 	sub	r3,r3,r2
81112c64:	18008f1e 	bne	r3,zero,81112ea4 <__udivdi3+0x418>
81112c68:	882ad43a 	srli	r21,r17,16
81112c6c:	8461c83a 	sub	r16,r16,r17
81112c70:	8d3fffcc 	andi	r20,r17,65535
81112c74:	00c00044 	movi	r3,1
81112c78:	8009883a 	mov	r4,r16
81112c7c:	a80b883a 	mov	r5,r21
81112c80:	d8c00015 	stw	r3,0(sp)
81112c84:	11136980 	call	81113698 <__umodsi3>
81112c88:	8009883a 	mov	r4,r16
81112c8c:	a80b883a 	mov	r5,r21
81112c90:	1027883a 	mov	r19,r2
81112c94:	11136340 	call	81113634 <__udivsi3>
81112c98:	9826943a 	slli	r19,r19,16
81112c9c:	9008d43a 	srli	r4,r18,16
81112ca0:	1521383a 	mul	r16,r2,r20
81112ca4:	102d883a 	mov	r22,r2
81112ca8:	24c8b03a 	or	r4,r4,r19
81112cac:	d8c00017 	ldw	r3,0(sp)
81112cb0:	2400052e 	bgeu	r4,r16,81112cc8 <__udivdi3+0x23c>
81112cb4:	2449883a 	add	r4,r4,r17
81112cb8:	b0bfffc4 	addi	r2,r22,-1
81112cbc:	24400136 	bltu	r4,r17,81112cc4 <__udivdi3+0x238>
81112cc0:	2400ca36 	bltu	r4,r16,81112fec <__udivdi3+0x560>
81112cc4:	102d883a 	mov	r22,r2
81112cc8:	2421c83a 	sub	r16,r4,r16
81112ccc:	a80b883a 	mov	r5,r21
81112cd0:	8009883a 	mov	r4,r16
81112cd4:	d8c00015 	stw	r3,0(sp)
81112cd8:	11136980 	call	81113698 <__umodsi3>
81112cdc:	1027883a 	mov	r19,r2
81112ce0:	a80b883a 	mov	r5,r21
81112ce4:	8009883a 	mov	r4,r16
81112ce8:	11136340 	call	81113634 <__udivsi3>
81112cec:	9826943a 	slli	r19,r19,16
81112cf0:	1529383a 	mul	r20,r2,r20
81112cf4:	94bfffcc 	andi	r18,r18,65535
81112cf8:	94e4b03a 	or	r18,r18,r19
81112cfc:	d8c00017 	ldw	r3,0(sp)
81112d00:	9500052e 	bgeu	r18,r20,81112d18 <__udivdi3+0x28c>
81112d04:	8ca5883a 	add	r18,r17,r18
81112d08:	113fffc4 	addi	r4,r2,-1
81112d0c:	94409736 	bltu	r18,r17,81112f6c <__udivdi3+0x4e0>
81112d10:	9500962e 	bgeu	r18,r20,81112f6c <__udivdi3+0x4e0>
81112d14:	10bfff84 	addi	r2,r2,-2
81112d18:	b00c943a 	slli	r6,r22,16
81112d1c:	3084b03a 	or	r2,r6,r2
81112d20:	00000206 	br	81112d2c <__udivdi3+0x2a0>
81112d24:	0007883a 	mov	r3,zero
81112d28:	0005883a 	mov	r2,zero
81112d2c:	dfc00a17 	ldw	ra,40(sp)
81112d30:	df000917 	ldw	fp,36(sp)
81112d34:	ddc00817 	ldw	r23,32(sp)
81112d38:	dd800717 	ldw	r22,28(sp)
81112d3c:	dd400617 	ldw	r21,24(sp)
81112d40:	dd000517 	ldw	r20,20(sp)
81112d44:	dcc00417 	ldw	r19,16(sp)
81112d48:	dc800317 	ldw	r18,12(sp)
81112d4c:	dc400217 	ldw	r17,8(sp)
81112d50:	dc000117 	ldw	r16,4(sp)
81112d54:	dec00b04 	addi	sp,sp,44
81112d58:	f800283a 	ret
81112d5c:	00803fc4 	movi	r2,255
81112d60:	11c5803a 	cmpltu	r2,r2,r7
81112d64:	100490fa 	slli	r2,r2,3
81112d68:	003f9e06 	br	81112be4 <__reset+0xfb0f2be4>
81112d6c:	00803fc4 	movi	r2,255
81112d70:	1445803a 	cmpltu	r2,r2,r17
81112d74:	100490fa 	slli	r2,r2,3
81112d78:	003fb206 	br	81112c44 <__reset+0xfb0f2c44>
81112d7c:	00804034 	movhi	r2,256
81112d80:	10bfffc4 	addi	r2,r2,-1
81112d84:	11808836 	bltu	r2,r6,81112fa8 <__udivdi3+0x51c>
81112d88:	00800404 	movi	r2,16
81112d8c:	003f5606 	br	81112ae8 <__reset+0xfb0f2ae8>
81112d90:	30aed83a 	srl	r23,r6,r2
81112d94:	3d4e983a 	sll	r7,r7,r21
81112d98:	80acd83a 	srl	r22,r16,r2
81112d9c:	9884d83a 	srl	r2,r19,r2
81112da0:	3deeb03a 	or	r23,r7,r23
81112da4:	b824d43a 	srli	r18,r23,16
81112da8:	8560983a 	sll	r16,r16,r21
81112dac:	b009883a 	mov	r4,r22
81112db0:	900b883a 	mov	r5,r18
81112db4:	3568983a 	sll	r20,r6,r21
81112db8:	1420b03a 	or	r16,r2,r16
81112dbc:	11136980 	call	81113698 <__umodsi3>
81112dc0:	b009883a 	mov	r4,r22
81112dc4:	900b883a 	mov	r5,r18
81112dc8:	1023883a 	mov	r17,r2
81112dcc:	11136340 	call	81113634 <__udivsi3>
81112dd0:	8808943a 	slli	r4,r17,16
81112dd4:	bf3fffcc 	andi	fp,r23,65535
81112dd8:	8006d43a 	srli	r3,r16,16
81112ddc:	e0a3383a 	mul	r17,fp,r2
81112de0:	100d883a 	mov	r6,r2
81112de4:	1906b03a 	or	r3,r3,r4
81112de8:	1c40042e 	bgeu	r3,r17,81112dfc <__udivdi3+0x370>
81112dec:	1dc7883a 	add	r3,r3,r23
81112df0:	10bfffc4 	addi	r2,r2,-1
81112df4:	1dc0752e 	bgeu	r3,r23,81112fcc <__udivdi3+0x540>
81112df8:	100d883a 	mov	r6,r2
81112dfc:	1c63c83a 	sub	r17,r3,r17
81112e00:	900b883a 	mov	r5,r18
81112e04:	8809883a 	mov	r4,r17
81112e08:	d9800015 	stw	r6,0(sp)
81112e0c:	11136980 	call	81113698 <__umodsi3>
81112e10:	102d883a 	mov	r22,r2
81112e14:	8809883a 	mov	r4,r17
81112e18:	900b883a 	mov	r5,r18
81112e1c:	11136340 	call	81113634 <__udivsi3>
81112e20:	b02c943a 	slli	r22,r22,16
81112e24:	e089383a 	mul	r4,fp,r2
81112e28:	843fffcc 	andi	r16,r16,65535
81112e2c:	85a0b03a 	or	r16,r16,r22
81112e30:	d9800017 	ldw	r6,0(sp)
81112e34:	8100042e 	bgeu	r16,r4,81112e48 <__udivdi3+0x3bc>
81112e38:	85e1883a 	add	r16,r16,r23
81112e3c:	10ffffc4 	addi	r3,r2,-1
81112e40:	85c05e2e 	bgeu	r16,r23,81112fbc <__udivdi3+0x530>
81112e44:	1805883a 	mov	r2,r3
81112e48:	300c943a 	slli	r6,r6,16
81112e4c:	a17fffcc 	andi	r5,r20,65535
81112e50:	a028d43a 	srli	r20,r20,16
81112e54:	3084b03a 	or	r2,r6,r2
81112e58:	10ffffcc 	andi	r3,r2,65535
81112e5c:	100cd43a 	srli	r6,r2,16
81112e60:	194f383a 	mul	r7,r3,r5
81112e64:	1d07383a 	mul	r3,r3,r20
81112e68:	314b383a 	mul	r5,r6,r5
81112e6c:	3810d43a 	srli	r8,r7,16
81112e70:	8121c83a 	sub	r16,r16,r4
81112e74:	1947883a 	add	r3,r3,r5
81112e78:	40c7883a 	add	r3,r8,r3
81112e7c:	350d383a 	mul	r6,r6,r20
81112e80:	1940022e 	bgeu	r3,r5,81112e8c <__udivdi3+0x400>
81112e84:	01000074 	movhi	r4,1
81112e88:	310d883a 	add	r6,r6,r4
81112e8c:	1828d43a 	srli	r20,r3,16
81112e90:	a18d883a 	add	r6,r20,r6
81112e94:	81803e36 	bltu	r16,r6,81112f90 <__udivdi3+0x504>
81112e98:	81803826 	beq	r16,r6,81112f7c <__udivdi3+0x4f0>
81112e9c:	0007883a 	mov	r3,zero
81112ea0:	003fa206 	br	81112d2c <__reset+0xfb0f2d2c>
81112ea4:	88e2983a 	sll	r17,r17,r3
81112ea8:	80a8d83a 	srl	r20,r16,r2
81112eac:	80e0983a 	sll	r16,r16,r3
81112eb0:	882ad43a 	srli	r21,r17,16
81112eb4:	9884d83a 	srl	r2,r19,r2
81112eb8:	a009883a 	mov	r4,r20
81112ebc:	a80b883a 	mov	r5,r21
81112ec0:	142eb03a 	or	r23,r2,r16
81112ec4:	98e4983a 	sll	r18,r19,r3
81112ec8:	11136980 	call	81113698 <__umodsi3>
81112ecc:	a009883a 	mov	r4,r20
81112ed0:	a80b883a 	mov	r5,r21
81112ed4:	1021883a 	mov	r16,r2
81112ed8:	11136340 	call	81113634 <__udivsi3>
81112edc:	1039883a 	mov	fp,r2
81112ee0:	8d3fffcc 	andi	r20,r17,65535
81112ee4:	8020943a 	slli	r16,r16,16
81112ee8:	b804d43a 	srli	r2,r23,16
81112eec:	a72d383a 	mul	r22,r20,fp
81112ef0:	1404b03a 	or	r2,r2,r16
81112ef4:	1580062e 	bgeu	r2,r22,81112f10 <__udivdi3+0x484>
81112ef8:	1445883a 	add	r2,r2,r17
81112efc:	e0ffffc4 	addi	r3,fp,-1
81112f00:	14403836 	bltu	r2,r17,81112fe4 <__udivdi3+0x558>
81112f04:	1580372e 	bgeu	r2,r22,81112fe4 <__udivdi3+0x558>
81112f08:	e73fff84 	addi	fp,fp,-2
81112f0c:	1445883a 	add	r2,r2,r17
81112f10:	15adc83a 	sub	r22,r2,r22
81112f14:	a80b883a 	mov	r5,r21
81112f18:	b009883a 	mov	r4,r22
81112f1c:	11136980 	call	81113698 <__umodsi3>
81112f20:	1027883a 	mov	r19,r2
81112f24:	b009883a 	mov	r4,r22
81112f28:	a80b883a 	mov	r5,r21
81112f2c:	11136340 	call	81113634 <__udivsi3>
81112f30:	9826943a 	slli	r19,r19,16
81112f34:	a0a1383a 	mul	r16,r20,r2
81112f38:	b93fffcc 	andi	r4,r23,65535
81112f3c:	24c8b03a 	or	r4,r4,r19
81112f40:	2400062e 	bgeu	r4,r16,81112f5c <__udivdi3+0x4d0>
81112f44:	2449883a 	add	r4,r4,r17
81112f48:	10ffffc4 	addi	r3,r2,-1
81112f4c:	24402336 	bltu	r4,r17,81112fdc <__udivdi3+0x550>
81112f50:	2400222e 	bgeu	r4,r16,81112fdc <__udivdi3+0x550>
81112f54:	10bfff84 	addi	r2,r2,-2
81112f58:	2449883a 	add	r4,r4,r17
81112f5c:	e038943a 	slli	fp,fp,16
81112f60:	2421c83a 	sub	r16,r4,r16
81112f64:	e086b03a 	or	r3,fp,r2
81112f68:	003f4306 	br	81112c78 <__reset+0xfb0f2c78>
81112f6c:	2005883a 	mov	r2,r4
81112f70:	003f6906 	br	81112d18 <__reset+0xfb0f2d18>
81112f74:	1805883a 	mov	r2,r3
81112f78:	003f0f06 	br	81112bb8 <__reset+0xfb0f2bb8>
81112f7c:	1806943a 	slli	r3,r3,16
81112f80:	9d66983a 	sll	r19,r19,r21
81112f84:	39ffffcc 	andi	r7,r7,65535
81112f88:	19c7883a 	add	r3,r3,r7
81112f8c:	98ffc32e 	bgeu	r19,r3,81112e9c <__reset+0xfb0f2e9c>
81112f90:	10bfffc4 	addi	r2,r2,-1
81112f94:	003fc106 	br	81112e9c <__reset+0xfb0f2e9c>
81112f98:	00800604 	movi	r2,24
81112f9c:	003f1106 	br	81112be4 <__reset+0xfb0f2be4>
81112fa0:	00800604 	movi	r2,24
81112fa4:	003f2706 	br	81112c44 <__reset+0xfb0f2c44>
81112fa8:	00800604 	movi	r2,24
81112fac:	003ece06 	br	81112ae8 <__reset+0xfb0f2ae8>
81112fb0:	0007883a 	mov	r3,zero
81112fb4:	00800044 	movi	r2,1
81112fb8:	003f5c06 	br	81112d2c <__reset+0xfb0f2d2c>
81112fbc:	813fa12e 	bgeu	r16,r4,81112e44 <__reset+0xfb0f2e44>
81112fc0:	10bfff84 	addi	r2,r2,-2
81112fc4:	85e1883a 	add	r16,r16,r23
81112fc8:	003f9f06 	br	81112e48 <__reset+0xfb0f2e48>
81112fcc:	1c7f8a2e 	bgeu	r3,r17,81112df8 <__reset+0xfb0f2df8>
81112fd0:	31bfff84 	addi	r6,r6,-2
81112fd4:	1dc7883a 	add	r3,r3,r23
81112fd8:	003f8806 	br	81112dfc <__reset+0xfb0f2dfc>
81112fdc:	1805883a 	mov	r2,r3
81112fe0:	003fde06 	br	81112f5c <__reset+0xfb0f2f5c>
81112fe4:	1839883a 	mov	fp,r3
81112fe8:	003fc906 	br	81112f10 <__reset+0xfb0f2f10>
81112fec:	b5bfff84 	addi	r22,r22,-2
81112ff0:	2449883a 	add	r4,r4,r17
81112ff4:	003f3406 	br	81112cc8 <__reset+0xfb0f2cc8>
81112ff8:	b5bfff84 	addi	r22,r22,-2
81112ffc:	1445883a 	add	r2,r2,r17
81113000:	003edb06 	br	81112b70 <__reset+0xfb0f2b70>

81113004 <__umoddi3>:
81113004:	defff404 	addi	sp,sp,-48
81113008:	df000a15 	stw	fp,40(sp)
8111300c:	dc400315 	stw	r17,12(sp)
81113010:	dc000215 	stw	r16,8(sp)
81113014:	dfc00b15 	stw	ra,44(sp)
81113018:	ddc00915 	stw	r23,36(sp)
8111301c:	dd800815 	stw	r22,32(sp)
81113020:	dd400715 	stw	r21,28(sp)
81113024:	dd000615 	stw	r20,24(sp)
81113028:	dcc00515 	stw	r19,20(sp)
8111302c:	dc800415 	stw	r18,16(sp)
81113030:	2021883a 	mov	r16,r4
81113034:	2823883a 	mov	r17,r5
81113038:	2839883a 	mov	fp,r5
8111303c:	38003c1e 	bne	r7,zero,81113130 <__umoddi3+0x12c>
81113040:	3027883a 	mov	r19,r6
81113044:	2029883a 	mov	r20,r4
81113048:	2980512e 	bgeu	r5,r6,81113190 <__umoddi3+0x18c>
8111304c:	00bfffd4 	movui	r2,65535
81113050:	11809a36 	bltu	r2,r6,811132bc <__umoddi3+0x2b8>
81113054:	01003fc4 	movi	r4,255
81113058:	2189803a 	cmpltu	r4,r4,r6
8111305c:	200890fa 	slli	r4,r4,3
81113060:	3104d83a 	srl	r2,r6,r4
81113064:	00e044b4 	movhi	r3,33042
81113068:	18d34604 	addi	r3,r3,19736
8111306c:	1885883a 	add	r2,r3,r2
81113070:	10c00003 	ldbu	r3,0(r2)
81113074:	00800804 	movi	r2,32
81113078:	1909883a 	add	r4,r3,r4
8111307c:	1125c83a 	sub	r18,r2,r4
81113080:	90000526 	beq	r18,zero,81113098 <__umoddi3+0x94>
81113084:	8ca2983a 	sll	r17,r17,r18
81113088:	8108d83a 	srl	r4,r16,r4
8111308c:	34a6983a 	sll	r19,r6,r18
81113090:	84a8983a 	sll	r20,r16,r18
81113094:	2478b03a 	or	fp,r4,r17
81113098:	982ed43a 	srli	r23,r19,16
8111309c:	e009883a 	mov	r4,fp
811130a0:	9dbfffcc 	andi	r22,r19,65535
811130a4:	b80b883a 	mov	r5,r23
811130a8:	11136980 	call	81113698 <__umodsi3>
811130ac:	e009883a 	mov	r4,fp
811130b0:	b80b883a 	mov	r5,r23
811130b4:	102b883a 	mov	r21,r2
811130b8:	11136340 	call	81113634 <__udivsi3>
811130bc:	a806943a 	slli	r3,r21,16
811130c0:	a008d43a 	srli	r4,r20,16
811130c4:	b085383a 	mul	r2,r22,r2
811130c8:	20c8b03a 	or	r4,r4,r3
811130cc:	2080032e 	bgeu	r4,r2,811130dc <__umoddi3+0xd8>
811130d0:	24c9883a 	add	r4,r4,r19
811130d4:	24c00136 	bltu	r4,r19,811130dc <__umoddi3+0xd8>
811130d8:	20811036 	bltu	r4,r2,8111351c <__umoddi3+0x518>
811130dc:	20abc83a 	sub	r21,r4,r2
811130e0:	b80b883a 	mov	r5,r23
811130e4:	a809883a 	mov	r4,r21
811130e8:	11136980 	call	81113698 <__umodsi3>
811130ec:	1023883a 	mov	r17,r2
811130f0:	b80b883a 	mov	r5,r23
811130f4:	a809883a 	mov	r4,r21
811130f8:	11136340 	call	81113634 <__udivsi3>
811130fc:	8822943a 	slli	r17,r17,16
81113100:	b085383a 	mul	r2,r22,r2
81113104:	a0ffffcc 	andi	r3,r20,65535
81113108:	1c46b03a 	or	r3,r3,r17
8111310c:	1880042e 	bgeu	r3,r2,81113120 <__umoddi3+0x11c>
81113110:	1cc7883a 	add	r3,r3,r19
81113114:	1cc00236 	bltu	r3,r19,81113120 <__umoddi3+0x11c>
81113118:	1880012e 	bgeu	r3,r2,81113120 <__umoddi3+0x11c>
8111311c:	1cc7883a 	add	r3,r3,r19
81113120:	1885c83a 	sub	r2,r3,r2
81113124:	1484d83a 	srl	r2,r2,r18
81113128:	0007883a 	mov	r3,zero
8111312c:	00004f06 	br	8111326c <__umoddi3+0x268>
81113130:	29c04c36 	bltu	r5,r7,81113264 <__umoddi3+0x260>
81113134:	00bfffd4 	movui	r2,65535
81113138:	11c0582e 	bgeu	r2,r7,8111329c <__umoddi3+0x298>
8111313c:	00804034 	movhi	r2,256
81113140:	10bfffc4 	addi	r2,r2,-1
81113144:	11c0e736 	bltu	r2,r7,811134e4 <__umoddi3+0x4e0>
81113148:	01000404 	movi	r4,16
8111314c:	3904d83a 	srl	r2,r7,r4
81113150:	00e044b4 	movhi	r3,33042
81113154:	18d34604 	addi	r3,r3,19736
81113158:	1885883a 	add	r2,r3,r2
8111315c:	14c00003 	ldbu	r19,0(r2)
81113160:	00c00804 	movi	r3,32
81113164:	9927883a 	add	r19,r19,r4
81113168:	1ce9c83a 	sub	r20,r3,r19
8111316c:	a000581e 	bne	r20,zero,811132d0 <__umoddi3+0x2cc>
81113170:	3c400136 	bltu	r7,r17,81113178 <__umoddi3+0x174>
81113174:	8180eb36 	bltu	r16,r6,81113524 <__umoddi3+0x520>
81113178:	8185c83a 	sub	r2,r16,r6
8111317c:	89e3c83a 	sub	r17,r17,r7
81113180:	8089803a 	cmpltu	r4,r16,r2
81113184:	8939c83a 	sub	fp,r17,r4
81113188:	e007883a 	mov	r3,fp
8111318c:	00003706 	br	8111326c <__umoddi3+0x268>
81113190:	3000041e 	bne	r6,zero,811131a4 <__umoddi3+0x1a0>
81113194:	000b883a 	mov	r5,zero
81113198:	01000044 	movi	r4,1
8111319c:	11136340 	call	81113634 <__udivsi3>
811131a0:	1027883a 	mov	r19,r2
811131a4:	00bfffd4 	movui	r2,65535
811131a8:	14c0402e 	bgeu	r2,r19,811132ac <__umoddi3+0x2a8>
811131ac:	00804034 	movhi	r2,256
811131b0:	10bfffc4 	addi	r2,r2,-1
811131b4:	14c0cd36 	bltu	r2,r19,811134ec <__umoddi3+0x4e8>
811131b8:	00800404 	movi	r2,16
811131bc:	9886d83a 	srl	r3,r19,r2
811131c0:	012044b4 	movhi	r4,33042
811131c4:	21134604 	addi	r4,r4,19736
811131c8:	20c7883a 	add	r3,r4,r3
811131cc:	18c00003 	ldbu	r3,0(r3)
811131d0:	1887883a 	add	r3,r3,r2
811131d4:	00800804 	movi	r2,32
811131d8:	10e5c83a 	sub	r18,r2,r3
811131dc:	9000901e 	bne	r18,zero,81113420 <__umoddi3+0x41c>
811131e0:	982cd43a 	srli	r22,r19,16
811131e4:	8ce3c83a 	sub	r17,r17,r19
811131e8:	9d7fffcc 	andi	r21,r19,65535
811131ec:	b00b883a 	mov	r5,r22
811131f0:	8809883a 	mov	r4,r17
811131f4:	11136980 	call	81113698 <__umodsi3>
811131f8:	8809883a 	mov	r4,r17
811131fc:	b00b883a 	mov	r5,r22
81113200:	1021883a 	mov	r16,r2
81113204:	11136340 	call	81113634 <__udivsi3>
81113208:	8006943a 	slli	r3,r16,16
8111320c:	a008d43a 	srli	r4,r20,16
81113210:	1545383a 	mul	r2,r2,r21
81113214:	20c8b03a 	or	r4,r4,r3
81113218:	2080042e 	bgeu	r4,r2,8111322c <__umoddi3+0x228>
8111321c:	24c9883a 	add	r4,r4,r19
81113220:	24c00236 	bltu	r4,r19,8111322c <__umoddi3+0x228>
81113224:	2080012e 	bgeu	r4,r2,8111322c <__umoddi3+0x228>
81113228:	24c9883a 	add	r4,r4,r19
8111322c:	20a1c83a 	sub	r16,r4,r2
81113230:	b00b883a 	mov	r5,r22
81113234:	8009883a 	mov	r4,r16
81113238:	11136980 	call	81113698 <__umodsi3>
8111323c:	1023883a 	mov	r17,r2
81113240:	b00b883a 	mov	r5,r22
81113244:	8009883a 	mov	r4,r16
81113248:	11136340 	call	81113634 <__udivsi3>
8111324c:	8822943a 	slli	r17,r17,16
81113250:	1545383a 	mul	r2,r2,r21
81113254:	a53fffcc 	andi	r20,r20,65535
81113258:	a446b03a 	or	r3,r20,r17
8111325c:	18bfb02e 	bgeu	r3,r2,81113120 <__reset+0xfb0f3120>
81113260:	003fab06 	br	81113110 <__reset+0xfb0f3110>
81113264:	2005883a 	mov	r2,r4
81113268:	2807883a 	mov	r3,r5
8111326c:	dfc00b17 	ldw	ra,44(sp)
81113270:	df000a17 	ldw	fp,40(sp)
81113274:	ddc00917 	ldw	r23,36(sp)
81113278:	dd800817 	ldw	r22,32(sp)
8111327c:	dd400717 	ldw	r21,28(sp)
81113280:	dd000617 	ldw	r20,24(sp)
81113284:	dcc00517 	ldw	r19,20(sp)
81113288:	dc800417 	ldw	r18,16(sp)
8111328c:	dc400317 	ldw	r17,12(sp)
81113290:	dc000217 	ldw	r16,8(sp)
81113294:	dec00c04 	addi	sp,sp,48
81113298:	f800283a 	ret
8111329c:	04c03fc4 	movi	r19,255
811132a0:	99c9803a 	cmpltu	r4,r19,r7
811132a4:	200890fa 	slli	r4,r4,3
811132a8:	003fa806 	br	8111314c <__reset+0xfb0f314c>
811132ac:	00803fc4 	movi	r2,255
811132b0:	14c5803a 	cmpltu	r2,r2,r19
811132b4:	100490fa 	slli	r2,r2,3
811132b8:	003fc006 	br	811131bc <__reset+0xfb0f31bc>
811132bc:	00804034 	movhi	r2,256
811132c0:	10bfffc4 	addi	r2,r2,-1
811132c4:	11808b36 	bltu	r2,r6,811134f4 <__umoddi3+0x4f0>
811132c8:	01000404 	movi	r4,16
811132cc:	003f6406 	br	81113060 <__reset+0xfb0f3060>
811132d0:	34c4d83a 	srl	r2,r6,r19
811132d4:	3d0e983a 	sll	r7,r7,r20
811132d8:	8cf8d83a 	srl	fp,r17,r19
811132dc:	8d10983a 	sll	r8,r17,r20
811132e0:	38aab03a 	or	r21,r7,r2
811132e4:	a82cd43a 	srli	r22,r21,16
811132e8:	84e2d83a 	srl	r17,r16,r19
811132ec:	e009883a 	mov	r4,fp
811132f0:	b00b883a 	mov	r5,r22
811132f4:	8a22b03a 	or	r17,r17,r8
811132f8:	3524983a 	sll	r18,r6,r20
811132fc:	11136980 	call	81113698 <__umodsi3>
81113300:	e009883a 	mov	r4,fp
81113304:	b00b883a 	mov	r5,r22
81113308:	102f883a 	mov	r23,r2
8111330c:	11136340 	call	81113634 <__udivsi3>
81113310:	100d883a 	mov	r6,r2
81113314:	b808943a 	slli	r4,r23,16
81113318:	aa3fffcc 	andi	r8,r21,65535
8111331c:	8804d43a 	srli	r2,r17,16
81113320:	41af383a 	mul	r23,r8,r6
81113324:	8520983a 	sll	r16,r16,r20
81113328:	1104b03a 	or	r2,r2,r4
8111332c:	15c0042e 	bgeu	r2,r23,81113340 <__umoddi3+0x33c>
81113330:	1545883a 	add	r2,r2,r21
81113334:	30ffffc4 	addi	r3,r6,-1
81113338:	1540742e 	bgeu	r2,r21,8111350c <__umoddi3+0x508>
8111333c:	180d883a 	mov	r6,r3
81113340:	15efc83a 	sub	r23,r2,r23
81113344:	b00b883a 	mov	r5,r22
81113348:	b809883a 	mov	r4,r23
8111334c:	d9800115 	stw	r6,4(sp)
81113350:	da000015 	stw	r8,0(sp)
81113354:	11136980 	call	81113698 <__umodsi3>
81113358:	b00b883a 	mov	r5,r22
8111335c:	b809883a 	mov	r4,r23
81113360:	1039883a 	mov	fp,r2
81113364:	11136340 	call	81113634 <__udivsi3>
81113368:	da000017 	ldw	r8,0(sp)
8111336c:	e038943a 	slli	fp,fp,16
81113370:	100b883a 	mov	r5,r2
81113374:	4089383a 	mul	r4,r8,r2
81113378:	8a3fffcc 	andi	r8,r17,65535
8111337c:	4710b03a 	or	r8,r8,fp
81113380:	d9800117 	ldw	r6,4(sp)
81113384:	4100042e 	bgeu	r8,r4,81113398 <__umoddi3+0x394>
81113388:	4551883a 	add	r8,r8,r21
8111338c:	10bfffc4 	addi	r2,r2,-1
81113390:	45405a2e 	bgeu	r8,r21,811134fc <__umoddi3+0x4f8>
81113394:	100b883a 	mov	r5,r2
81113398:	300c943a 	slli	r6,r6,16
8111339c:	91ffffcc 	andi	r7,r18,65535
811133a0:	9004d43a 	srli	r2,r18,16
811133a4:	314cb03a 	or	r6,r6,r5
811133a8:	317fffcc 	andi	r5,r6,65535
811133ac:	300cd43a 	srli	r6,r6,16
811133b0:	29d3383a 	mul	r9,r5,r7
811133b4:	288b383a 	mul	r5,r5,r2
811133b8:	31cf383a 	mul	r7,r6,r7
811133bc:	4806d43a 	srli	r3,r9,16
811133c0:	4111c83a 	sub	r8,r8,r4
811133c4:	29cb883a 	add	r5,r5,r7
811133c8:	194b883a 	add	r5,r3,r5
811133cc:	3085383a 	mul	r2,r6,r2
811133d0:	29c0022e 	bgeu	r5,r7,811133dc <__umoddi3+0x3d8>
811133d4:	00c00074 	movhi	r3,1
811133d8:	10c5883a 	add	r2,r2,r3
811133dc:	2808d43a 	srli	r4,r5,16
811133e0:	280a943a 	slli	r5,r5,16
811133e4:	4a7fffcc 	andi	r9,r9,65535
811133e8:	2085883a 	add	r2,r4,r2
811133ec:	2a4b883a 	add	r5,r5,r9
811133f0:	40803636 	bltu	r8,r2,811134cc <__umoddi3+0x4c8>
811133f4:	40804d26 	beq	r8,r2,8111352c <__umoddi3+0x528>
811133f8:	4089c83a 	sub	r4,r8,r2
811133fc:	280f883a 	mov	r7,r5
81113400:	81cfc83a 	sub	r7,r16,r7
81113404:	81c7803a 	cmpltu	r3,r16,r7
81113408:	20c7c83a 	sub	r3,r4,r3
8111340c:	1cc4983a 	sll	r2,r3,r19
81113410:	3d0ed83a 	srl	r7,r7,r20
81113414:	1d06d83a 	srl	r3,r3,r20
81113418:	11c4b03a 	or	r2,r2,r7
8111341c:	003f9306 	br	8111326c <__reset+0xfb0f326c>
81113420:	9ca6983a 	sll	r19,r19,r18
81113424:	88e8d83a 	srl	r20,r17,r3
81113428:	80c4d83a 	srl	r2,r16,r3
8111342c:	982cd43a 	srli	r22,r19,16
81113430:	8ca2983a 	sll	r17,r17,r18
81113434:	a009883a 	mov	r4,r20
81113438:	b00b883a 	mov	r5,r22
8111343c:	1478b03a 	or	fp,r2,r17
81113440:	11136980 	call	81113698 <__umodsi3>
81113444:	a009883a 	mov	r4,r20
81113448:	b00b883a 	mov	r5,r22
8111344c:	1023883a 	mov	r17,r2
81113450:	11136340 	call	81113634 <__udivsi3>
81113454:	9d7fffcc 	andi	r21,r19,65535
81113458:	880a943a 	slli	r5,r17,16
8111345c:	e008d43a 	srli	r4,fp,16
81113460:	a885383a 	mul	r2,r21,r2
81113464:	84a8983a 	sll	r20,r16,r18
81113468:	2148b03a 	or	r4,r4,r5
8111346c:	2080042e 	bgeu	r4,r2,81113480 <__umoddi3+0x47c>
81113470:	24c9883a 	add	r4,r4,r19
81113474:	24c00236 	bltu	r4,r19,81113480 <__umoddi3+0x47c>
81113478:	2080012e 	bgeu	r4,r2,81113480 <__umoddi3+0x47c>
8111347c:	24c9883a 	add	r4,r4,r19
81113480:	20a3c83a 	sub	r17,r4,r2
81113484:	b00b883a 	mov	r5,r22
81113488:	8809883a 	mov	r4,r17
8111348c:	11136980 	call	81113698 <__umodsi3>
81113490:	102f883a 	mov	r23,r2
81113494:	8809883a 	mov	r4,r17
81113498:	b00b883a 	mov	r5,r22
8111349c:	11136340 	call	81113634 <__udivsi3>
811134a0:	b82e943a 	slli	r23,r23,16
811134a4:	a885383a 	mul	r2,r21,r2
811134a8:	e13fffcc 	andi	r4,fp,65535
811134ac:	25c8b03a 	or	r4,r4,r23
811134b0:	2080042e 	bgeu	r4,r2,811134c4 <__umoddi3+0x4c0>
811134b4:	24c9883a 	add	r4,r4,r19
811134b8:	24c00236 	bltu	r4,r19,811134c4 <__umoddi3+0x4c0>
811134bc:	2080012e 	bgeu	r4,r2,811134c4 <__umoddi3+0x4c0>
811134c0:	24c9883a 	add	r4,r4,r19
811134c4:	20a3c83a 	sub	r17,r4,r2
811134c8:	003f4806 	br	811131ec <__reset+0xfb0f31ec>
811134cc:	2c8fc83a 	sub	r7,r5,r18
811134d0:	1545c83a 	sub	r2,r2,r21
811134d4:	29cb803a 	cmpltu	r5,r5,r7
811134d8:	1145c83a 	sub	r2,r2,r5
811134dc:	4089c83a 	sub	r4,r8,r2
811134e0:	003fc706 	br	81113400 <__reset+0xfb0f3400>
811134e4:	01000604 	movi	r4,24
811134e8:	003f1806 	br	8111314c <__reset+0xfb0f314c>
811134ec:	00800604 	movi	r2,24
811134f0:	003f3206 	br	811131bc <__reset+0xfb0f31bc>
811134f4:	01000604 	movi	r4,24
811134f8:	003ed906 	br	81113060 <__reset+0xfb0f3060>
811134fc:	413fa52e 	bgeu	r8,r4,81113394 <__reset+0xfb0f3394>
81113500:	297fff84 	addi	r5,r5,-2
81113504:	4551883a 	add	r8,r8,r21
81113508:	003fa306 	br	81113398 <__reset+0xfb0f3398>
8111350c:	15ff8b2e 	bgeu	r2,r23,8111333c <__reset+0xfb0f333c>
81113510:	31bfff84 	addi	r6,r6,-2
81113514:	1545883a 	add	r2,r2,r21
81113518:	003f8906 	br	81113340 <__reset+0xfb0f3340>
8111351c:	24c9883a 	add	r4,r4,r19
81113520:	003eee06 	br	811130dc <__reset+0xfb0f30dc>
81113524:	8005883a 	mov	r2,r16
81113528:	003f1706 	br	81113188 <__reset+0xfb0f3188>
8111352c:	817fe736 	bltu	r16,r5,811134cc <__reset+0xfb0f34cc>
81113530:	280f883a 	mov	r7,r5
81113534:	0009883a 	mov	r4,zero
81113538:	003fb106 	br	81113400 <__reset+0xfb0f3400>

8111353c <__divsi3>:
8111353c:	20001b16 	blt	r4,zero,811135ac <__divsi3+0x70>
81113540:	000f883a 	mov	r7,zero
81113544:	28001616 	blt	r5,zero,811135a0 <__divsi3+0x64>
81113548:	200d883a 	mov	r6,r4
8111354c:	29001a2e 	bgeu	r5,r4,811135b8 <__divsi3+0x7c>
81113550:	00800804 	movi	r2,32
81113554:	00c00044 	movi	r3,1
81113558:	00000106 	br	81113560 <__divsi3+0x24>
8111355c:	10000d26 	beq	r2,zero,81113594 <__divsi3+0x58>
81113560:	294b883a 	add	r5,r5,r5
81113564:	10bfffc4 	addi	r2,r2,-1
81113568:	18c7883a 	add	r3,r3,r3
8111356c:	293ffb36 	bltu	r5,r4,8111355c <__reset+0xfb0f355c>
81113570:	0005883a 	mov	r2,zero
81113574:	18000726 	beq	r3,zero,81113594 <__divsi3+0x58>
81113578:	0005883a 	mov	r2,zero
8111357c:	31400236 	bltu	r6,r5,81113588 <__divsi3+0x4c>
81113580:	314dc83a 	sub	r6,r6,r5
81113584:	10c4b03a 	or	r2,r2,r3
81113588:	1806d07a 	srli	r3,r3,1
8111358c:	280ad07a 	srli	r5,r5,1
81113590:	183ffa1e 	bne	r3,zero,8111357c <__reset+0xfb0f357c>
81113594:	38000126 	beq	r7,zero,8111359c <__divsi3+0x60>
81113598:	0085c83a 	sub	r2,zero,r2
8111359c:	f800283a 	ret
811135a0:	014bc83a 	sub	r5,zero,r5
811135a4:	39c0005c 	xori	r7,r7,1
811135a8:	003fe706 	br	81113548 <__reset+0xfb0f3548>
811135ac:	0109c83a 	sub	r4,zero,r4
811135b0:	01c00044 	movi	r7,1
811135b4:	003fe306 	br	81113544 <__reset+0xfb0f3544>
811135b8:	00c00044 	movi	r3,1
811135bc:	003fee06 	br	81113578 <__reset+0xfb0f3578>

811135c0 <__modsi3>:
811135c0:	20001716 	blt	r4,zero,81113620 <__modsi3+0x60>
811135c4:	000f883a 	mov	r7,zero
811135c8:	2005883a 	mov	r2,r4
811135cc:	28001216 	blt	r5,zero,81113618 <__modsi3+0x58>
811135d0:	2900162e 	bgeu	r5,r4,8111362c <__modsi3+0x6c>
811135d4:	01800804 	movi	r6,32
811135d8:	00c00044 	movi	r3,1
811135dc:	00000106 	br	811135e4 <__modsi3+0x24>
811135e0:	30000a26 	beq	r6,zero,8111360c <__modsi3+0x4c>
811135e4:	294b883a 	add	r5,r5,r5
811135e8:	31bfffc4 	addi	r6,r6,-1
811135ec:	18c7883a 	add	r3,r3,r3
811135f0:	293ffb36 	bltu	r5,r4,811135e0 <__reset+0xfb0f35e0>
811135f4:	18000526 	beq	r3,zero,8111360c <__modsi3+0x4c>
811135f8:	1806d07a 	srli	r3,r3,1
811135fc:	11400136 	bltu	r2,r5,81113604 <__modsi3+0x44>
81113600:	1145c83a 	sub	r2,r2,r5
81113604:	280ad07a 	srli	r5,r5,1
81113608:	183ffb1e 	bne	r3,zero,811135f8 <__reset+0xfb0f35f8>
8111360c:	38000126 	beq	r7,zero,81113614 <__modsi3+0x54>
81113610:	0085c83a 	sub	r2,zero,r2
81113614:	f800283a 	ret
81113618:	014bc83a 	sub	r5,zero,r5
8111361c:	003fec06 	br	811135d0 <__reset+0xfb0f35d0>
81113620:	0109c83a 	sub	r4,zero,r4
81113624:	01c00044 	movi	r7,1
81113628:	003fe706 	br	811135c8 <__reset+0xfb0f35c8>
8111362c:	00c00044 	movi	r3,1
81113630:	003ff106 	br	811135f8 <__reset+0xfb0f35f8>

81113634 <__udivsi3>:
81113634:	200d883a 	mov	r6,r4
81113638:	2900152e 	bgeu	r5,r4,81113690 <__udivsi3+0x5c>
8111363c:	28001416 	blt	r5,zero,81113690 <__udivsi3+0x5c>
81113640:	00800804 	movi	r2,32
81113644:	00c00044 	movi	r3,1
81113648:	00000206 	br	81113654 <__udivsi3+0x20>
8111364c:	10000e26 	beq	r2,zero,81113688 <__udivsi3+0x54>
81113650:	28000516 	blt	r5,zero,81113668 <__udivsi3+0x34>
81113654:	294b883a 	add	r5,r5,r5
81113658:	10bfffc4 	addi	r2,r2,-1
8111365c:	18c7883a 	add	r3,r3,r3
81113660:	293ffa36 	bltu	r5,r4,8111364c <__reset+0xfb0f364c>
81113664:	18000826 	beq	r3,zero,81113688 <__udivsi3+0x54>
81113668:	0005883a 	mov	r2,zero
8111366c:	31400236 	bltu	r6,r5,81113678 <__udivsi3+0x44>
81113670:	314dc83a 	sub	r6,r6,r5
81113674:	10c4b03a 	or	r2,r2,r3
81113678:	1806d07a 	srli	r3,r3,1
8111367c:	280ad07a 	srli	r5,r5,1
81113680:	183ffa1e 	bne	r3,zero,8111366c <__reset+0xfb0f366c>
81113684:	f800283a 	ret
81113688:	0005883a 	mov	r2,zero
8111368c:	f800283a 	ret
81113690:	00c00044 	movi	r3,1
81113694:	003ff406 	br	81113668 <__reset+0xfb0f3668>

81113698 <__umodsi3>:
81113698:	2005883a 	mov	r2,r4
8111369c:	2900122e 	bgeu	r5,r4,811136e8 <__umodsi3+0x50>
811136a0:	28001116 	blt	r5,zero,811136e8 <__umodsi3+0x50>
811136a4:	01800804 	movi	r6,32
811136a8:	00c00044 	movi	r3,1
811136ac:	00000206 	br	811136b8 <__umodsi3+0x20>
811136b0:	30000c26 	beq	r6,zero,811136e4 <__umodsi3+0x4c>
811136b4:	28000516 	blt	r5,zero,811136cc <__umodsi3+0x34>
811136b8:	294b883a 	add	r5,r5,r5
811136bc:	31bfffc4 	addi	r6,r6,-1
811136c0:	18c7883a 	add	r3,r3,r3
811136c4:	293ffa36 	bltu	r5,r4,811136b0 <__reset+0xfb0f36b0>
811136c8:	18000626 	beq	r3,zero,811136e4 <__umodsi3+0x4c>
811136cc:	1806d07a 	srli	r3,r3,1
811136d0:	11400136 	bltu	r2,r5,811136d8 <__umodsi3+0x40>
811136d4:	1145c83a 	sub	r2,r2,r5
811136d8:	280ad07a 	srli	r5,r5,1
811136dc:	183ffb1e 	bne	r3,zero,811136cc <__reset+0xfb0f36cc>
811136e0:	f800283a 	ret
811136e4:	f800283a 	ret
811136e8:	00c00044 	movi	r3,1
811136ec:	003ff706 	br	811136cc <__reset+0xfb0f36cc>

811136f0 <__eqsf2>:
811136f0:	2006d5fa 	srli	r3,r4,23
811136f4:	280cd5fa 	srli	r6,r5,23
811136f8:	01c02034 	movhi	r7,128
811136fc:	39ffffc4 	addi	r7,r7,-1
81113700:	18c03fcc 	andi	r3,r3,255
81113704:	02003fc4 	movi	r8,255
81113708:	3904703a 	and	r2,r7,r4
8111370c:	31803fcc 	andi	r6,r6,255
81113710:	394e703a 	and	r7,r7,r5
81113714:	2008d7fa 	srli	r4,r4,31
81113718:	280ad7fa 	srli	r5,r5,31
8111371c:	1a000d26 	beq	r3,r8,81113754 <__eqsf2+0x64>
81113720:	02003fc4 	movi	r8,255
81113724:	32000826 	beq	r6,r8,81113748 <__eqsf2+0x58>
81113728:	19800226 	beq	r3,r6,81113734 <__eqsf2+0x44>
8111372c:	00800044 	movi	r2,1
81113730:	f800283a 	ret
81113734:	11fffd1e 	bne	r2,r7,8111372c <__reset+0xfb0f372c>
81113738:	21400926 	beq	r4,r5,81113760 <__eqsf2+0x70>
8111373c:	183ffb1e 	bne	r3,zero,8111372c <__reset+0xfb0f372c>
81113740:	1004c03a 	cmpne	r2,r2,zero
81113744:	f800283a 	ret
81113748:	383ff726 	beq	r7,zero,81113728 <__reset+0xfb0f3728>
8111374c:	00800044 	movi	r2,1
81113750:	f800283a 	ret
81113754:	103ff226 	beq	r2,zero,81113720 <__reset+0xfb0f3720>
81113758:	00800044 	movi	r2,1
8111375c:	f800283a 	ret
81113760:	0005883a 	mov	r2,zero
81113764:	f800283a 	ret

81113768 <__gesf2>:
81113768:	2004d5fa 	srli	r2,r4,23
8111376c:	2806d5fa 	srli	r3,r5,23
81113770:	01802034 	movhi	r6,128
81113774:	31bfffc4 	addi	r6,r6,-1
81113778:	10803fcc 	andi	r2,r2,255
8111377c:	01c03fc4 	movi	r7,255
81113780:	3110703a 	and	r8,r6,r4
81113784:	18c03fcc 	andi	r3,r3,255
81113788:	314c703a 	and	r6,r6,r5
8111378c:	2008d7fa 	srli	r4,r4,31
81113790:	280ad7fa 	srli	r5,r5,31
81113794:	11c01926 	beq	r2,r7,811137fc <__gesf2+0x94>
81113798:	01c03fc4 	movi	r7,255
8111379c:	19c00f26 	beq	r3,r7,811137dc <__gesf2+0x74>
811137a0:	1000061e 	bne	r2,zero,811137bc <__gesf2+0x54>
811137a4:	400f003a 	cmpeq	r7,r8,zero
811137a8:	1800071e 	bne	r3,zero,811137c8 <__gesf2+0x60>
811137ac:	3000061e 	bne	r6,zero,811137c8 <__gesf2+0x60>
811137b0:	0005883a 	mov	r2,zero
811137b4:	40000e1e 	bne	r8,zero,811137f0 <__gesf2+0x88>
811137b8:	f800283a 	ret
811137bc:	18000a1e 	bne	r3,zero,811137e8 <__gesf2+0x80>
811137c0:	30000b26 	beq	r6,zero,811137f0 <__gesf2+0x88>
811137c4:	000f883a 	mov	r7,zero
811137c8:	29403fcc 	andi	r5,r5,255
811137cc:	38000726 	beq	r7,zero,811137ec <__gesf2+0x84>
811137d0:	28000826 	beq	r5,zero,811137f4 <__gesf2+0x8c>
811137d4:	00800044 	movi	r2,1
811137d8:	f800283a 	ret
811137dc:	303ff026 	beq	r6,zero,811137a0 <__reset+0xfb0f37a0>
811137e0:	00bfff84 	movi	r2,-2
811137e4:	f800283a 	ret
811137e8:	29403fcc 	andi	r5,r5,255
811137ec:	21400526 	beq	r4,r5,81113804 <__gesf2+0x9c>
811137f0:	203ff826 	beq	r4,zero,811137d4 <__reset+0xfb0f37d4>
811137f4:	00bfffc4 	movi	r2,-1
811137f8:	f800283a 	ret
811137fc:	403fe626 	beq	r8,zero,81113798 <__reset+0xfb0f3798>
81113800:	003ff706 	br	811137e0 <__reset+0xfb0f37e0>
81113804:	18bffa16 	blt	r3,r2,811137f0 <__reset+0xfb0f37f0>
81113808:	10c00216 	blt	r2,r3,81113814 <__gesf2+0xac>
8111380c:	323ff836 	bltu	r6,r8,811137f0 <__reset+0xfb0f37f0>
81113810:	4180022e 	bgeu	r8,r6,8111381c <__gesf2+0xb4>
81113814:	203fef1e 	bne	r4,zero,811137d4 <__reset+0xfb0f37d4>
81113818:	003ff606 	br	811137f4 <__reset+0xfb0f37f4>
8111381c:	0005883a 	mov	r2,zero
81113820:	f800283a 	ret

81113824 <__lesf2>:
81113824:	2004d5fa 	srli	r2,r4,23
81113828:	280cd5fa 	srli	r6,r5,23
8111382c:	00c02034 	movhi	r3,128
81113830:	18ffffc4 	addi	r3,r3,-1
81113834:	10803fcc 	andi	r2,r2,255
81113838:	01c03fc4 	movi	r7,255
8111383c:	1910703a 	and	r8,r3,r4
81113840:	31803fcc 	andi	r6,r6,255
81113844:	1946703a 	and	r3,r3,r5
81113848:	2008d7fa 	srli	r4,r4,31
8111384c:	280ad7fa 	srli	r5,r5,31
81113850:	11c01b26 	beq	r2,r7,811138c0 <__lesf2+0x9c>
81113854:	01c03fc4 	movi	r7,255
81113858:	31c01126 	beq	r6,r7,811138a0 <__lesf2+0x7c>
8111385c:	1000071e 	bne	r2,zero,8111387c <__lesf2+0x58>
81113860:	400f003a 	cmpeq	r7,r8,zero
81113864:	21003fcc 	andi	r4,r4,255
81113868:	3000081e 	bne	r6,zero,8111388c <__lesf2+0x68>
8111386c:	1800071e 	bne	r3,zero,8111388c <__lesf2+0x68>
81113870:	0005883a 	mov	r2,zero
81113874:	40000f1e 	bne	r8,zero,811138b4 <__lesf2+0x90>
81113878:	f800283a 	ret
8111387c:	21003fcc 	andi	r4,r4,255
81113880:	30000a1e 	bne	r6,zero,811138ac <__lesf2+0x88>
81113884:	18000b26 	beq	r3,zero,811138b4 <__lesf2+0x90>
81113888:	000f883a 	mov	r7,zero
8111388c:	29403fcc 	andi	r5,r5,255
81113890:	38000726 	beq	r7,zero,811138b0 <__lesf2+0x8c>
81113894:	28000826 	beq	r5,zero,811138b8 <__lesf2+0x94>
81113898:	00800044 	movi	r2,1
8111389c:	f800283a 	ret
811138a0:	183fee26 	beq	r3,zero,8111385c <__reset+0xfb0f385c>
811138a4:	00800084 	movi	r2,2
811138a8:	f800283a 	ret
811138ac:	29403fcc 	andi	r5,r5,255
811138b0:	21400626 	beq	r4,r5,811138cc <__lesf2+0xa8>
811138b4:	203ff826 	beq	r4,zero,81113898 <__reset+0xfb0f3898>
811138b8:	00bfffc4 	movi	r2,-1
811138bc:	f800283a 	ret
811138c0:	403fe426 	beq	r8,zero,81113854 <__reset+0xfb0f3854>
811138c4:	00800084 	movi	r2,2
811138c8:	f800283a 	ret
811138cc:	30bff916 	blt	r6,r2,811138b4 <__reset+0xfb0f38b4>
811138d0:	11800216 	blt	r2,r6,811138dc <__lesf2+0xb8>
811138d4:	1a3ff736 	bltu	r3,r8,811138b4 <__reset+0xfb0f38b4>
811138d8:	40c0022e 	bgeu	r8,r3,811138e4 <__lesf2+0xc0>
811138dc:	203fee1e 	bne	r4,zero,81113898 <__reset+0xfb0f3898>
811138e0:	003ff506 	br	811138b8 <__reset+0xfb0f38b8>
811138e4:	0005883a 	mov	r2,zero
811138e8:	f800283a 	ret

811138ec <__adddf3>:
811138ec:	02c00434 	movhi	r11,16
811138f0:	5affffc4 	addi	r11,r11,-1
811138f4:	2806d7fa 	srli	r3,r5,31
811138f8:	2ad4703a 	and	r10,r5,r11
811138fc:	3ad2703a 	and	r9,r7,r11
81113900:	3804d53a 	srli	r2,r7,20
81113904:	3018d77a 	srli	r12,r6,29
81113908:	280ad53a 	srli	r5,r5,20
8111390c:	501490fa 	slli	r10,r10,3
81113910:	2010d77a 	srli	r8,r4,29
81113914:	481290fa 	slli	r9,r9,3
81113918:	380ed7fa 	srli	r7,r7,31
8111391c:	defffb04 	addi	sp,sp,-20
81113920:	dc800215 	stw	r18,8(sp)
81113924:	dc400115 	stw	r17,4(sp)
81113928:	dc000015 	stw	r16,0(sp)
8111392c:	dfc00415 	stw	ra,16(sp)
81113930:	dcc00315 	stw	r19,12(sp)
81113934:	1c803fcc 	andi	r18,r3,255
81113938:	2c01ffcc 	andi	r16,r5,2047
8111393c:	5210b03a 	or	r8,r10,r8
81113940:	202290fa 	slli	r17,r4,3
81113944:	1081ffcc 	andi	r2,r2,2047
81113948:	4b12b03a 	or	r9,r9,r12
8111394c:	300c90fa 	slli	r6,r6,3
81113950:	91c07526 	beq	r18,r7,81113b28 <__adddf3+0x23c>
81113954:	8087c83a 	sub	r3,r16,r2
81113958:	00c0ab0e 	bge	zero,r3,81113c08 <__adddf3+0x31c>
8111395c:	10002a1e 	bne	r2,zero,81113a08 <__adddf3+0x11c>
81113960:	4984b03a 	or	r2,r9,r6
81113964:	1000961e 	bne	r2,zero,81113bc0 <__adddf3+0x2d4>
81113968:	888001cc 	andi	r2,r17,7
8111396c:	10000726 	beq	r2,zero,8111398c <__adddf3+0xa0>
81113970:	888003cc 	andi	r2,r17,15
81113974:	00c00104 	movi	r3,4
81113978:	10c00426 	beq	r2,r3,8111398c <__adddf3+0xa0>
8111397c:	88c7883a 	add	r3,r17,r3
81113980:	1c63803a 	cmpltu	r17,r3,r17
81113984:	4451883a 	add	r8,r8,r17
81113988:	1823883a 	mov	r17,r3
8111398c:	4080202c 	andhi	r2,r8,128
81113990:	10005926 	beq	r2,zero,81113af8 <__adddf3+0x20c>
81113994:	84000044 	addi	r16,r16,1
81113998:	0081ffc4 	movi	r2,2047
8111399c:	8080ba26 	beq	r16,r2,81113c88 <__adddf3+0x39c>
811139a0:	00bfe034 	movhi	r2,65408
811139a4:	10bfffc4 	addi	r2,r2,-1
811139a8:	4090703a 	and	r8,r8,r2
811139ac:	4004977a 	slli	r2,r8,29
811139b0:	4010927a 	slli	r8,r8,9
811139b4:	8822d0fa 	srli	r17,r17,3
811139b8:	8401ffcc 	andi	r16,r16,2047
811139bc:	4010d33a 	srli	r8,r8,12
811139c0:	9007883a 	mov	r3,r18
811139c4:	1444b03a 	or	r2,r2,r17
811139c8:	8401ffcc 	andi	r16,r16,2047
811139cc:	8020953a 	slli	r16,r16,20
811139d0:	18c03fcc 	andi	r3,r3,255
811139d4:	01000434 	movhi	r4,16
811139d8:	213fffc4 	addi	r4,r4,-1
811139dc:	180697fa 	slli	r3,r3,31
811139e0:	4110703a 	and	r8,r8,r4
811139e4:	4410b03a 	or	r8,r8,r16
811139e8:	40c6b03a 	or	r3,r8,r3
811139ec:	dfc00417 	ldw	ra,16(sp)
811139f0:	dcc00317 	ldw	r19,12(sp)
811139f4:	dc800217 	ldw	r18,8(sp)
811139f8:	dc400117 	ldw	r17,4(sp)
811139fc:	dc000017 	ldw	r16,0(sp)
81113a00:	dec00504 	addi	sp,sp,20
81113a04:	f800283a 	ret
81113a08:	0081ffc4 	movi	r2,2047
81113a0c:	80bfd626 	beq	r16,r2,81113968 <__reset+0xfb0f3968>
81113a10:	4a402034 	orhi	r9,r9,128
81113a14:	00800e04 	movi	r2,56
81113a18:	10c09f16 	blt	r2,r3,81113c98 <__adddf3+0x3ac>
81113a1c:	008007c4 	movi	r2,31
81113a20:	10c0c216 	blt	r2,r3,81113d2c <__adddf3+0x440>
81113a24:	00800804 	movi	r2,32
81113a28:	10c5c83a 	sub	r2,r2,r3
81113a2c:	488a983a 	sll	r5,r9,r2
81113a30:	30c8d83a 	srl	r4,r6,r3
81113a34:	3084983a 	sll	r2,r6,r2
81113a38:	48c6d83a 	srl	r3,r9,r3
81113a3c:	290cb03a 	or	r6,r5,r4
81113a40:	1004c03a 	cmpne	r2,r2,zero
81113a44:	308cb03a 	or	r6,r6,r2
81113a48:	898dc83a 	sub	r6,r17,r6
81113a4c:	89a3803a 	cmpltu	r17,r17,r6
81113a50:	40d1c83a 	sub	r8,r8,r3
81113a54:	4451c83a 	sub	r8,r8,r17
81113a58:	3023883a 	mov	r17,r6
81113a5c:	4080202c 	andhi	r2,r8,128
81113a60:	10002326 	beq	r2,zero,81113af0 <__adddf3+0x204>
81113a64:	04c02034 	movhi	r19,128
81113a68:	9cffffc4 	addi	r19,r19,-1
81113a6c:	44e6703a 	and	r19,r8,r19
81113a70:	98007626 	beq	r19,zero,81113c4c <__adddf3+0x360>
81113a74:	9809883a 	mov	r4,r19
81113a78:	11160980 	call	81116098 <__clzsi2>
81113a7c:	10fffe04 	addi	r3,r2,-8
81113a80:	010007c4 	movi	r4,31
81113a84:	20c07716 	blt	r4,r3,81113c64 <__adddf3+0x378>
81113a88:	00800804 	movi	r2,32
81113a8c:	10c5c83a 	sub	r2,r2,r3
81113a90:	8884d83a 	srl	r2,r17,r2
81113a94:	98d0983a 	sll	r8,r19,r3
81113a98:	88e2983a 	sll	r17,r17,r3
81113a9c:	1204b03a 	or	r2,r2,r8
81113aa0:	1c007416 	blt	r3,r16,81113c74 <__adddf3+0x388>
81113aa4:	1c21c83a 	sub	r16,r3,r16
81113aa8:	82000044 	addi	r8,r16,1
81113aac:	00c007c4 	movi	r3,31
81113ab0:	1a009116 	blt	r3,r8,81113cf8 <__adddf3+0x40c>
81113ab4:	00c00804 	movi	r3,32
81113ab8:	1a07c83a 	sub	r3,r3,r8
81113abc:	8a08d83a 	srl	r4,r17,r8
81113ac0:	88e2983a 	sll	r17,r17,r3
81113ac4:	10c6983a 	sll	r3,r2,r3
81113ac8:	1210d83a 	srl	r8,r2,r8
81113acc:	8804c03a 	cmpne	r2,r17,zero
81113ad0:	1906b03a 	or	r3,r3,r4
81113ad4:	18a2b03a 	or	r17,r3,r2
81113ad8:	0021883a 	mov	r16,zero
81113adc:	003fa206 	br	81113968 <__reset+0xfb0f3968>
81113ae0:	1890b03a 	or	r8,r3,r2
81113ae4:	40017d26 	beq	r8,zero,811140dc <__adddf3+0x7f0>
81113ae8:	1011883a 	mov	r8,r2
81113aec:	1823883a 	mov	r17,r3
81113af0:	888001cc 	andi	r2,r17,7
81113af4:	103f9e1e 	bne	r2,zero,81113970 <__reset+0xfb0f3970>
81113af8:	4004977a 	slli	r2,r8,29
81113afc:	8822d0fa 	srli	r17,r17,3
81113b00:	4010d0fa 	srli	r8,r8,3
81113b04:	9007883a 	mov	r3,r18
81113b08:	1444b03a 	or	r2,r2,r17
81113b0c:	0101ffc4 	movi	r4,2047
81113b10:	81002426 	beq	r16,r4,81113ba4 <__adddf3+0x2b8>
81113b14:	8120703a 	and	r16,r16,r4
81113b18:	01000434 	movhi	r4,16
81113b1c:	213fffc4 	addi	r4,r4,-1
81113b20:	4110703a 	and	r8,r8,r4
81113b24:	003fa806 	br	811139c8 <__reset+0xfb0f39c8>
81113b28:	8089c83a 	sub	r4,r16,r2
81113b2c:	01005e0e 	bge	zero,r4,81113ca8 <__adddf3+0x3bc>
81113b30:	10002b26 	beq	r2,zero,81113be0 <__adddf3+0x2f4>
81113b34:	0081ffc4 	movi	r2,2047
81113b38:	80bf8b26 	beq	r16,r2,81113968 <__reset+0xfb0f3968>
81113b3c:	4a402034 	orhi	r9,r9,128
81113b40:	00800e04 	movi	r2,56
81113b44:	1100a40e 	bge	r2,r4,81113dd8 <__adddf3+0x4ec>
81113b48:	498cb03a 	or	r6,r9,r6
81113b4c:	300ac03a 	cmpne	r5,r6,zero
81113b50:	0013883a 	mov	r9,zero
81113b54:	2c4b883a 	add	r5,r5,r17
81113b58:	2c63803a 	cmpltu	r17,r5,r17
81113b5c:	4a11883a 	add	r8,r9,r8
81113b60:	8a11883a 	add	r8,r17,r8
81113b64:	2823883a 	mov	r17,r5
81113b68:	4080202c 	andhi	r2,r8,128
81113b6c:	103fe026 	beq	r2,zero,81113af0 <__reset+0xfb0f3af0>
81113b70:	84000044 	addi	r16,r16,1
81113b74:	0081ffc4 	movi	r2,2047
81113b78:	8080d226 	beq	r16,r2,81113ec4 <__adddf3+0x5d8>
81113b7c:	00bfe034 	movhi	r2,65408
81113b80:	10bfffc4 	addi	r2,r2,-1
81113b84:	4090703a 	and	r8,r8,r2
81113b88:	880ad07a 	srli	r5,r17,1
81113b8c:	400897fa 	slli	r4,r8,31
81113b90:	88c0004c 	andi	r3,r17,1
81113b94:	28e2b03a 	or	r17,r5,r3
81113b98:	4010d07a 	srli	r8,r8,1
81113b9c:	2462b03a 	or	r17,r4,r17
81113ba0:	003f7106 	br	81113968 <__reset+0xfb0f3968>
81113ba4:	4088b03a 	or	r4,r8,r2
81113ba8:	20014526 	beq	r4,zero,811140c0 <__adddf3+0x7d4>
81113bac:	01000434 	movhi	r4,16
81113bb0:	42000234 	orhi	r8,r8,8
81113bb4:	213fffc4 	addi	r4,r4,-1
81113bb8:	4110703a 	and	r8,r8,r4
81113bbc:	003f8206 	br	811139c8 <__reset+0xfb0f39c8>
81113bc0:	18ffffc4 	addi	r3,r3,-1
81113bc4:	1800491e 	bne	r3,zero,81113cec <__adddf3+0x400>
81113bc8:	898bc83a 	sub	r5,r17,r6
81113bcc:	8963803a 	cmpltu	r17,r17,r5
81113bd0:	4251c83a 	sub	r8,r8,r9
81113bd4:	4451c83a 	sub	r8,r8,r17
81113bd8:	2823883a 	mov	r17,r5
81113bdc:	003f9f06 	br	81113a5c <__reset+0xfb0f3a5c>
81113be0:	4984b03a 	or	r2,r9,r6
81113be4:	103f6026 	beq	r2,zero,81113968 <__reset+0xfb0f3968>
81113be8:	213fffc4 	addi	r4,r4,-1
81113bec:	2000931e 	bne	r4,zero,81113e3c <__adddf3+0x550>
81113bf0:	898d883a 	add	r6,r17,r6
81113bf4:	3463803a 	cmpltu	r17,r6,r17
81113bf8:	4251883a 	add	r8,r8,r9
81113bfc:	8a11883a 	add	r8,r17,r8
81113c00:	3023883a 	mov	r17,r6
81113c04:	003fd806 	br	81113b68 <__reset+0xfb0f3b68>
81113c08:	1800541e 	bne	r3,zero,81113d5c <__adddf3+0x470>
81113c0c:	80800044 	addi	r2,r16,1
81113c10:	1081ffcc 	andi	r2,r2,2047
81113c14:	00c00044 	movi	r3,1
81113c18:	1880a00e 	bge	r3,r2,81113e9c <__adddf3+0x5b0>
81113c1c:	8989c83a 	sub	r4,r17,r6
81113c20:	8905803a 	cmpltu	r2,r17,r4
81113c24:	4267c83a 	sub	r19,r8,r9
81113c28:	98a7c83a 	sub	r19,r19,r2
81113c2c:	9880202c 	andhi	r2,r19,128
81113c30:	10006326 	beq	r2,zero,81113dc0 <__adddf3+0x4d4>
81113c34:	3463c83a 	sub	r17,r6,r17
81113c38:	4a07c83a 	sub	r3,r9,r8
81113c3c:	344d803a 	cmpltu	r6,r6,r17
81113c40:	19a7c83a 	sub	r19,r3,r6
81113c44:	3825883a 	mov	r18,r7
81113c48:	983f8a1e 	bne	r19,zero,81113a74 <__reset+0xfb0f3a74>
81113c4c:	8809883a 	mov	r4,r17
81113c50:	11160980 	call	81116098 <__clzsi2>
81113c54:	10800804 	addi	r2,r2,32
81113c58:	10fffe04 	addi	r3,r2,-8
81113c5c:	010007c4 	movi	r4,31
81113c60:	20ff890e 	bge	r4,r3,81113a88 <__reset+0xfb0f3a88>
81113c64:	10bff604 	addi	r2,r2,-40
81113c68:	8884983a 	sll	r2,r17,r2
81113c6c:	0023883a 	mov	r17,zero
81113c70:	1c3f8c0e 	bge	r3,r16,81113aa4 <__reset+0xfb0f3aa4>
81113c74:	023fe034 	movhi	r8,65408
81113c78:	423fffc4 	addi	r8,r8,-1
81113c7c:	80e1c83a 	sub	r16,r16,r3
81113c80:	1210703a 	and	r8,r2,r8
81113c84:	003f3806 	br	81113968 <__reset+0xfb0f3968>
81113c88:	9007883a 	mov	r3,r18
81113c8c:	0011883a 	mov	r8,zero
81113c90:	0005883a 	mov	r2,zero
81113c94:	003f4c06 	br	811139c8 <__reset+0xfb0f39c8>
81113c98:	498cb03a 	or	r6,r9,r6
81113c9c:	300cc03a 	cmpne	r6,r6,zero
81113ca0:	0007883a 	mov	r3,zero
81113ca4:	003f6806 	br	81113a48 <__reset+0xfb0f3a48>
81113ca8:	20009c1e 	bne	r4,zero,81113f1c <__adddf3+0x630>
81113cac:	80800044 	addi	r2,r16,1
81113cb0:	1141ffcc 	andi	r5,r2,2047
81113cb4:	01000044 	movi	r4,1
81113cb8:	2140670e 	bge	r4,r5,81113e58 <__adddf3+0x56c>
81113cbc:	0101ffc4 	movi	r4,2047
81113cc0:	11007f26 	beq	r2,r4,81113ec0 <__adddf3+0x5d4>
81113cc4:	898d883a 	add	r6,r17,r6
81113cc8:	4247883a 	add	r3,r8,r9
81113ccc:	3451803a 	cmpltu	r8,r6,r17
81113cd0:	40d1883a 	add	r8,r8,r3
81113cd4:	402297fa 	slli	r17,r8,31
81113cd8:	300cd07a 	srli	r6,r6,1
81113cdc:	4010d07a 	srli	r8,r8,1
81113ce0:	1021883a 	mov	r16,r2
81113ce4:	89a2b03a 	or	r17,r17,r6
81113ce8:	003f1f06 	br	81113968 <__reset+0xfb0f3968>
81113cec:	0081ffc4 	movi	r2,2047
81113cf0:	80bf481e 	bne	r16,r2,81113a14 <__reset+0xfb0f3a14>
81113cf4:	003f1c06 	br	81113968 <__reset+0xfb0f3968>
81113cf8:	843ff844 	addi	r16,r16,-31
81113cfc:	01000804 	movi	r4,32
81113d00:	1406d83a 	srl	r3,r2,r16
81113d04:	41005026 	beq	r8,r4,81113e48 <__adddf3+0x55c>
81113d08:	01001004 	movi	r4,64
81113d0c:	2211c83a 	sub	r8,r4,r8
81113d10:	1204983a 	sll	r2,r2,r8
81113d14:	88a2b03a 	or	r17,r17,r2
81113d18:	8822c03a 	cmpne	r17,r17,zero
81113d1c:	1c62b03a 	or	r17,r3,r17
81113d20:	0011883a 	mov	r8,zero
81113d24:	0021883a 	mov	r16,zero
81113d28:	003f7106 	br	81113af0 <__reset+0xfb0f3af0>
81113d2c:	193ff804 	addi	r4,r3,-32
81113d30:	00800804 	movi	r2,32
81113d34:	4908d83a 	srl	r4,r9,r4
81113d38:	18804526 	beq	r3,r2,81113e50 <__adddf3+0x564>
81113d3c:	00801004 	movi	r2,64
81113d40:	10c5c83a 	sub	r2,r2,r3
81113d44:	4886983a 	sll	r3,r9,r2
81113d48:	198cb03a 	or	r6,r3,r6
81113d4c:	300cc03a 	cmpne	r6,r6,zero
81113d50:	218cb03a 	or	r6,r4,r6
81113d54:	0007883a 	mov	r3,zero
81113d58:	003f3b06 	br	81113a48 <__reset+0xfb0f3a48>
81113d5c:	80002a26 	beq	r16,zero,81113e08 <__adddf3+0x51c>
81113d60:	0101ffc4 	movi	r4,2047
81113d64:	11006826 	beq	r2,r4,81113f08 <__adddf3+0x61c>
81113d68:	00c7c83a 	sub	r3,zero,r3
81113d6c:	42002034 	orhi	r8,r8,128
81113d70:	01000e04 	movi	r4,56
81113d74:	20c07c16 	blt	r4,r3,81113f68 <__adddf3+0x67c>
81113d78:	010007c4 	movi	r4,31
81113d7c:	20c0da16 	blt	r4,r3,811140e8 <__adddf3+0x7fc>
81113d80:	01000804 	movi	r4,32
81113d84:	20c9c83a 	sub	r4,r4,r3
81113d88:	4114983a 	sll	r10,r8,r4
81113d8c:	88cad83a 	srl	r5,r17,r3
81113d90:	8908983a 	sll	r4,r17,r4
81113d94:	40c6d83a 	srl	r3,r8,r3
81113d98:	5162b03a 	or	r17,r10,r5
81113d9c:	2008c03a 	cmpne	r4,r4,zero
81113da0:	8922b03a 	or	r17,r17,r4
81113da4:	3463c83a 	sub	r17,r6,r17
81113da8:	48c7c83a 	sub	r3,r9,r3
81113dac:	344d803a 	cmpltu	r6,r6,r17
81113db0:	1991c83a 	sub	r8,r3,r6
81113db4:	1021883a 	mov	r16,r2
81113db8:	3825883a 	mov	r18,r7
81113dbc:	003f2706 	br	81113a5c <__reset+0xfb0f3a5c>
81113dc0:	24d0b03a 	or	r8,r4,r19
81113dc4:	40001b1e 	bne	r8,zero,81113e34 <__adddf3+0x548>
81113dc8:	0005883a 	mov	r2,zero
81113dcc:	0007883a 	mov	r3,zero
81113dd0:	0021883a 	mov	r16,zero
81113dd4:	003f4d06 	br	81113b0c <__reset+0xfb0f3b0c>
81113dd8:	008007c4 	movi	r2,31
81113ddc:	11003c16 	blt	r2,r4,81113ed0 <__adddf3+0x5e4>
81113de0:	00800804 	movi	r2,32
81113de4:	1105c83a 	sub	r2,r2,r4
81113de8:	488e983a 	sll	r7,r9,r2
81113dec:	310ad83a 	srl	r5,r6,r4
81113df0:	3084983a 	sll	r2,r6,r2
81113df4:	4912d83a 	srl	r9,r9,r4
81113df8:	394ab03a 	or	r5,r7,r5
81113dfc:	1004c03a 	cmpne	r2,r2,zero
81113e00:	288ab03a 	or	r5,r5,r2
81113e04:	003f5306 	br	81113b54 <__reset+0xfb0f3b54>
81113e08:	4448b03a 	or	r4,r8,r17
81113e0c:	20003e26 	beq	r4,zero,81113f08 <__adddf3+0x61c>
81113e10:	00c6303a 	nor	r3,zero,r3
81113e14:	18003a1e 	bne	r3,zero,81113f00 <__adddf3+0x614>
81113e18:	3463c83a 	sub	r17,r6,r17
81113e1c:	4a07c83a 	sub	r3,r9,r8
81113e20:	344d803a 	cmpltu	r6,r6,r17
81113e24:	1991c83a 	sub	r8,r3,r6
81113e28:	1021883a 	mov	r16,r2
81113e2c:	3825883a 	mov	r18,r7
81113e30:	003f0a06 	br	81113a5c <__reset+0xfb0f3a5c>
81113e34:	2023883a 	mov	r17,r4
81113e38:	003f0d06 	br	81113a70 <__reset+0xfb0f3a70>
81113e3c:	0081ffc4 	movi	r2,2047
81113e40:	80bf3f1e 	bne	r16,r2,81113b40 <__reset+0xfb0f3b40>
81113e44:	003ec806 	br	81113968 <__reset+0xfb0f3968>
81113e48:	0005883a 	mov	r2,zero
81113e4c:	003fb106 	br	81113d14 <__reset+0xfb0f3d14>
81113e50:	0007883a 	mov	r3,zero
81113e54:	003fbc06 	br	81113d48 <__reset+0xfb0f3d48>
81113e58:	4444b03a 	or	r2,r8,r17
81113e5c:	8000871e 	bne	r16,zero,8111407c <__adddf3+0x790>
81113e60:	1000ba26 	beq	r2,zero,8111414c <__adddf3+0x860>
81113e64:	4984b03a 	or	r2,r9,r6
81113e68:	103ebf26 	beq	r2,zero,81113968 <__reset+0xfb0f3968>
81113e6c:	8985883a 	add	r2,r17,r6
81113e70:	4247883a 	add	r3,r8,r9
81113e74:	1451803a 	cmpltu	r8,r2,r17
81113e78:	40d1883a 	add	r8,r8,r3
81113e7c:	40c0202c 	andhi	r3,r8,128
81113e80:	1023883a 	mov	r17,r2
81113e84:	183f1a26 	beq	r3,zero,81113af0 <__reset+0xfb0f3af0>
81113e88:	00bfe034 	movhi	r2,65408
81113e8c:	10bfffc4 	addi	r2,r2,-1
81113e90:	2021883a 	mov	r16,r4
81113e94:	4090703a 	and	r8,r8,r2
81113e98:	003eb306 	br	81113968 <__reset+0xfb0f3968>
81113e9c:	4444b03a 	or	r2,r8,r17
81113ea0:	8000291e 	bne	r16,zero,81113f48 <__adddf3+0x65c>
81113ea4:	10004b1e 	bne	r2,zero,81113fd4 <__adddf3+0x6e8>
81113ea8:	4990b03a 	or	r8,r9,r6
81113eac:	40008b26 	beq	r8,zero,811140dc <__adddf3+0x7f0>
81113eb0:	4811883a 	mov	r8,r9
81113eb4:	3023883a 	mov	r17,r6
81113eb8:	3825883a 	mov	r18,r7
81113ebc:	003eaa06 	br	81113968 <__reset+0xfb0f3968>
81113ec0:	1021883a 	mov	r16,r2
81113ec4:	0011883a 	mov	r8,zero
81113ec8:	0005883a 	mov	r2,zero
81113ecc:	003f0f06 	br	81113b0c <__reset+0xfb0f3b0c>
81113ed0:	217ff804 	addi	r5,r4,-32
81113ed4:	00800804 	movi	r2,32
81113ed8:	494ad83a 	srl	r5,r9,r5
81113edc:	20807d26 	beq	r4,r2,811140d4 <__adddf3+0x7e8>
81113ee0:	00801004 	movi	r2,64
81113ee4:	1109c83a 	sub	r4,r2,r4
81113ee8:	4912983a 	sll	r9,r9,r4
81113eec:	498cb03a 	or	r6,r9,r6
81113ef0:	300cc03a 	cmpne	r6,r6,zero
81113ef4:	298ab03a 	or	r5,r5,r6
81113ef8:	0013883a 	mov	r9,zero
81113efc:	003f1506 	br	81113b54 <__reset+0xfb0f3b54>
81113f00:	0101ffc4 	movi	r4,2047
81113f04:	113f9a1e 	bne	r2,r4,81113d70 <__reset+0xfb0f3d70>
81113f08:	4811883a 	mov	r8,r9
81113f0c:	3023883a 	mov	r17,r6
81113f10:	1021883a 	mov	r16,r2
81113f14:	3825883a 	mov	r18,r7
81113f18:	003e9306 	br	81113968 <__reset+0xfb0f3968>
81113f1c:	8000161e 	bne	r16,zero,81113f78 <__adddf3+0x68c>
81113f20:	444ab03a 	or	r5,r8,r17
81113f24:	28005126 	beq	r5,zero,8111406c <__adddf3+0x780>
81113f28:	0108303a 	nor	r4,zero,r4
81113f2c:	20004d1e 	bne	r4,zero,81114064 <__adddf3+0x778>
81113f30:	89a3883a 	add	r17,r17,r6
81113f34:	4253883a 	add	r9,r8,r9
81113f38:	898d803a 	cmpltu	r6,r17,r6
81113f3c:	3251883a 	add	r8,r6,r9
81113f40:	1021883a 	mov	r16,r2
81113f44:	003f0806 	br	81113b68 <__reset+0xfb0f3b68>
81113f48:	1000301e 	bne	r2,zero,8111400c <__adddf3+0x720>
81113f4c:	4984b03a 	or	r2,r9,r6
81113f50:	10007126 	beq	r2,zero,81114118 <__adddf3+0x82c>
81113f54:	4811883a 	mov	r8,r9
81113f58:	3023883a 	mov	r17,r6
81113f5c:	3825883a 	mov	r18,r7
81113f60:	0401ffc4 	movi	r16,2047
81113f64:	003e8006 	br	81113968 <__reset+0xfb0f3968>
81113f68:	4462b03a 	or	r17,r8,r17
81113f6c:	8822c03a 	cmpne	r17,r17,zero
81113f70:	0007883a 	mov	r3,zero
81113f74:	003f8b06 	br	81113da4 <__reset+0xfb0f3da4>
81113f78:	0141ffc4 	movi	r5,2047
81113f7c:	11403b26 	beq	r2,r5,8111406c <__adddf3+0x780>
81113f80:	0109c83a 	sub	r4,zero,r4
81113f84:	42002034 	orhi	r8,r8,128
81113f88:	01400e04 	movi	r5,56
81113f8c:	29006716 	blt	r5,r4,8111412c <__adddf3+0x840>
81113f90:	014007c4 	movi	r5,31
81113f94:	29007016 	blt	r5,r4,81114158 <__adddf3+0x86c>
81113f98:	01400804 	movi	r5,32
81113f9c:	290bc83a 	sub	r5,r5,r4
81113fa0:	4154983a 	sll	r10,r8,r5
81113fa4:	890ed83a 	srl	r7,r17,r4
81113fa8:	894a983a 	sll	r5,r17,r5
81113fac:	4108d83a 	srl	r4,r8,r4
81113fb0:	51e2b03a 	or	r17,r10,r7
81113fb4:	280ac03a 	cmpne	r5,r5,zero
81113fb8:	8962b03a 	or	r17,r17,r5
81113fbc:	89a3883a 	add	r17,r17,r6
81113fc0:	2253883a 	add	r9,r4,r9
81113fc4:	898d803a 	cmpltu	r6,r17,r6
81113fc8:	3251883a 	add	r8,r6,r9
81113fcc:	1021883a 	mov	r16,r2
81113fd0:	003ee506 	br	81113b68 <__reset+0xfb0f3b68>
81113fd4:	4984b03a 	or	r2,r9,r6
81113fd8:	103e6326 	beq	r2,zero,81113968 <__reset+0xfb0f3968>
81113fdc:	8987c83a 	sub	r3,r17,r6
81113fe0:	88c9803a 	cmpltu	r4,r17,r3
81113fe4:	4245c83a 	sub	r2,r8,r9
81113fe8:	1105c83a 	sub	r2,r2,r4
81113fec:	1100202c 	andhi	r4,r2,128
81113ff0:	203ebb26 	beq	r4,zero,81113ae0 <__reset+0xfb0f3ae0>
81113ff4:	3463c83a 	sub	r17,r6,r17
81113ff8:	4a07c83a 	sub	r3,r9,r8
81113ffc:	344d803a 	cmpltu	r6,r6,r17
81114000:	1991c83a 	sub	r8,r3,r6
81114004:	3825883a 	mov	r18,r7
81114008:	003e5706 	br	81113968 <__reset+0xfb0f3968>
8111400c:	4984b03a 	or	r2,r9,r6
81114010:	10002e26 	beq	r2,zero,811140cc <__adddf3+0x7e0>
81114014:	4004d0fa 	srli	r2,r8,3
81114018:	8822d0fa 	srli	r17,r17,3
8111401c:	4010977a 	slli	r8,r8,29
81114020:	10c0022c 	andhi	r3,r2,8
81114024:	4462b03a 	or	r17,r8,r17
81114028:	18000826 	beq	r3,zero,8111404c <__adddf3+0x760>
8111402c:	4808d0fa 	srli	r4,r9,3
81114030:	20c0022c 	andhi	r3,r4,8
81114034:	1800051e 	bne	r3,zero,8111404c <__adddf3+0x760>
81114038:	300cd0fa 	srli	r6,r6,3
8111403c:	4806977a 	slli	r3,r9,29
81114040:	2005883a 	mov	r2,r4
81114044:	3825883a 	mov	r18,r7
81114048:	19a2b03a 	or	r17,r3,r6
8111404c:	8810d77a 	srli	r8,r17,29
81114050:	100490fa 	slli	r2,r2,3
81114054:	882290fa 	slli	r17,r17,3
81114058:	0401ffc4 	movi	r16,2047
8111405c:	4090b03a 	or	r8,r8,r2
81114060:	003e4106 	br	81113968 <__reset+0xfb0f3968>
81114064:	0141ffc4 	movi	r5,2047
81114068:	117fc71e 	bne	r2,r5,81113f88 <__reset+0xfb0f3f88>
8111406c:	4811883a 	mov	r8,r9
81114070:	3023883a 	mov	r17,r6
81114074:	1021883a 	mov	r16,r2
81114078:	003e3b06 	br	81113968 <__reset+0xfb0f3968>
8111407c:	10002f26 	beq	r2,zero,8111413c <__adddf3+0x850>
81114080:	4984b03a 	or	r2,r9,r6
81114084:	10001126 	beq	r2,zero,811140cc <__adddf3+0x7e0>
81114088:	4004d0fa 	srli	r2,r8,3
8111408c:	8822d0fa 	srli	r17,r17,3
81114090:	4010977a 	slli	r8,r8,29
81114094:	10c0022c 	andhi	r3,r2,8
81114098:	4462b03a 	or	r17,r8,r17
8111409c:	183feb26 	beq	r3,zero,8111404c <__reset+0xfb0f404c>
811140a0:	4808d0fa 	srli	r4,r9,3
811140a4:	20c0022c 	andhi	r3,r4,8
811140a8:	183fe81e 	bne	r3,zero,8111404c <__reset+0xfb0f404c>
811140ac:	300cd0fa 	srli	r6,r6,3
811140b0:	4806977a 	slli	r3,r9,29
811140b4:	2005883a 	mov	r2,r4
811140b8:	19a2b03a 	or	r17,r3,r6
811140bc:	003fe306 	br	8111404c <__reset+0xfb0f404c>
811140c0:	0011883a 	mov	r8,zero
811140c4:	0005883a 	mov	r2,zero
811140c8:	003e3f06 	br	811139c8 <__reset+0xfb0f39c8>
811140cc:	0401ffc4 	movi	r16,2047
811140d0:	003e2506 	br	81113968 <__reset+0xfb0f3968>
811140d4:	0013883a 	mov	r9,zero
811140d8:	003f8406 	br	81113eec <__reset+0xfb0f3eec>
811140dc:	0005883a 	mov	r2,zero
811140e0:	0007883a 	mov	r3,zero
811140e4:	003e8906 	br	81113b0c <__reset+0xfb0f3b0c>
811140e8:	197ff804 	addi	r5,r3,-32
811140ec:	01000804 	movi	r4,32
811140f0:	414ad83a 	srl	r5,r8,r5
811140f4:	19002426 	beq	r3,r4,81114188 <__adddf3+0x89c>
811140f8:	01001004 	movi	r4,64
811140fc:	20c7c83a 	sub	r3,r4,r3
81114100:	40c6983a 	sll	r3,r8,r3
81114104:	1c46b03a 	or	r3,r3,r17
81114108:	1806c03a 	cmpne	r3,r3,zero
8111410c:	28e2b03a 	or	r17,r5,r3
81114110:	0007883a 	mov	r3,zero
81114114:	003f2306 	br	81113da4 <__reset+0xfb0f3da4>
81114118:	0007883a 	mov	r3,zero
8111411c:	5811883a 	mov	r8,r11
81114120:	00bfffc4 	movi	r2,-1
81114124:	0401ffc4 	movi	r16,2047
81114128:	003e7806 	br	81113b0c <__reset+0xfb0f3b0c>
8111412c:	4462b03a 	or	r17,r8,r17
81114130:	8822c03a 	cmpne	r17,r17,zero
81114134:	0009883a 	mov	r4,zero
81114138:	003fa006 	br	81113fbc <__reset+0xfb0f3fbc>
8111413c:	4811883a 	mov	r8,r9
81114140:	3023883a 	mov	r17,r6
81114144:	0401ffc4 	movi	r16,2047
81114148:	003e0706 	br	81113968 <__reset+0xfb0f3968>
8111414c:	4811883a 	mov	r8,r9
81114150:	3023883a 	mov	r17,r6
81114154:	003e0406 	br	81113968 <__reset+0xfb0f3968>
81114158:	21fff804 	addi	r7,r4,-32
8111415c:	01400804 	movi	r5,32
81114160:	41ced83a 	srl	r7,r8,r7
81114164:	21400a26 	beq	r4,r5,81114190 <__adddf3+0x8a4>
81114168:	01401004 	movi	r5,64
8111416c:	2909c83a 	sub	r4,r5,r4
81114170:	4108983a 	sll	r4,r8,r4
81114174:	2448b03a 	or	r4,r4,r17
81114178:	2008c03a 	cmpne	r4,r4,zero
8111417c:	3922b03a 	or	r17,r7,r4
81114180:	0009883a 	mov	r4,zero
81114184:	003f8d06 	br	81113fbc <__reset+0xfb0f3fbc>
81114188:	0007883a 	mov	r3,zero
8111418c:	003fdd06 	br	81114104 <__reset+0xfb0f4104>
81114190:	0009883a 	mov	r4,zero
81114194:	003ff706 	br	81114174 <__reset+0xfb0f4174>

81114198 <__divdf3>:
81114198:	defff204 	addi	sp,sp,-56
8111419c:	dd400915 	stw	r21,36(sp)
811141a0:	282ad53a 	srli	r21,r5,20
811141a4:	dd000815 	stw	r20,32(sp)
811141a8:	2828d7fa 	srli	r20,r5,31
811141ac:	dc000415 	stw	r16,16(sp)
811141b0:	04000434 	movhi	r16,16
811141b4:	df000c15 	stw	fp,48(sp)
811141b8:	843fffc4 	addi	r16,r16,-1
811141bc:	dfc00d15 	stw	ra,52(sp)
811141c0:	ddc00b15 	stw	r23,44(sp)
811141c4:	dd800a15 	stw	r22,40(sp)
811141c8:	dcc00715 	stw	r19,28(sp)
811141cc:	dc800615 	stw	r18,24(sp)
811141d0:	dc400515 	stw	r17,20(sp)
811141d4:	ad41ffcc 	andi	r21,r21,2047
811141d8:	2c20703a 	and	r16,r5,r16
811141dc:	a7003fcc 	andi	fp,r20,255
811141e0:	a8006126 	beq	r21,zero,81114368 <__divdf3+0x1d0>
811141e4:	0081ffc4 	movi	r2,2047
811141e8:	2025883a 	mov	r18,r4
811141ec:	a8803726 	beq	r21,r2,811142cc <__divdf3+0x134>
811141f0:	80800434 	orhi	r2,r16,16
811141f4:	100490fa 	slli	r2,r2,3
811141f8:	2020d77a 	srli	r16,r4,29
811141fc:	202490fa 	slli	r18,r4,3
81114200:	ad7f0044 	addi	r21,r21,-1023
81114204:	80a0b03a 	or	r16,r16,r2
81114208:	0027883a 	mov	r19,zero
8111420c:	0013883a 	mov	r9,zero
81114210:	3804d53a 	srli	r2,r7,20
81114214:	382cd7fa 	srli	r22,r7,31
81114218:	04400434 	movhi	r17,16
8111421c:	8c7fffc4 	addi	r17,r17,-1
81114220:	1081ffcc 	andi	r2,r2,2047
81114224:	3011883a 	mov	r8,r6
81114228:	3c62703a 	and	r17,r7,r17
8111422c:	b5c03fcc 	andi	r23,r22,255
81114230:	10006c26 	beq	r2,zero,811143e4 <__divdf3+0x24c>
81114234:	00c1ffc4 	movi	r3,2047
81114238:	10c06426 	beq	r2,r3,811143cc <__divdf3+0x234>
8111423c:	88c00434 	orhi	r3,r17,16
81114240:	180690fa 	slli	r3,r3,3
81114244:	3022d77a 	srli	r17,r6,29
81114248:	301090fa 	slli	r8,r6,3
8111424c:	10bf0044 	addi	r2,r2,-1023
81114250:	88e2b03a 	or	r17,r17,r3
81114254:	000f883a 	mov	r7,zero
81114258:	a58cf03a 	xor	r6,r20,r22
8111425c:	3cc8b03a 	or	r4,r7,r19
81114260:	a8abc83a 	sub	r21,r21,r2
81114264:	008003c4 	movi	r2,15
81114268:	3007883a 	mov	r3,r6
8111426c:	34c03fcc 	andi	r19,r6,255
81114270:	11009036 	bltu	r2,r4,811144b4 <__divdf3+0x31c>
81114274:	200890ba 	slli	r4,r4,2
81114278:	00a04474 	movhi	r2,33041
8111427c:	1090a304 	addi	r2,r2,17036
81114280:	2089883a 	add	r4,r4,r2
81114284:	20800017 	ldw	r2,0(r4)
81114288:	1000683a 	jmp	r2
8111428c:	811144b4 	orhi	r4,r16,17682
81114290:	81114304 	addi	r4,r16,17676
81114294:	811144a4 	muli	r4,r16,17682
81114298:	811142f8 	rdprs	r4,r16,17675
8111429c:	811144a4 	muli	r4,r16,17682
811142a0:	81114478 	rdprs	r4,r16,17681
811142a4:	811144a4 	muli	r4,r16,17682
811142a8:	811142f8 	rdprs	r4,r16,17675
811142ac:	81114304 	addi	r4,r16,17676
811142b0:	81114304 	addi	r4,r16,17676
811142b4:	81114478 	rdprs	r4,r16,17681
811142b8:	811142f8 	rdprs	r4,r16,17675
811142bc:	811142e8 	cmpgeui	r4,r16,17675
811142c0:	811142e8 	cmpgeui	r4,r16,17675
811142c4:	811142e8 	cmpgeui	r4,r16,17675
811142c8:	81114798 	cmpnei	r4,r16,17694
811142cc:	2404b03a 	or	r2,r4,r16
811142d0:	1000661e 	bne	r2,zero,8111446c <__divdf3+0x2d4>
811142d4:	04c00204 	movi	r19,8
811142d8:	0021883a 	mov	r16,zero
811142dc:	0025883a 	mov	r18,zero
811142e0:	02400084 	movi	r9,2
811142e4:	003fca06 	br	81114210 <__reset+0xfb0f4210>
811142e8:	8023883a 	mov	r17,r16
811142ec:	9011883a 	mov	r8,r18
811142f0:	e02f883a 	mov	r23,fp
811142f4:	480f883a 	mov	r7,r9
811142f8:	00800084 	movi	r2,2
811142fc:	3881311e 	bne	r7,r2,811147c4 <__divdf3+0x62c>
81114300:	b827883a 	mov	r19,r23
81114304:	98c0004c 	andi	r3,r19,1
81114308:	0081ffc4 	movi	r2,2047
8111430c:	000b883a 	mov	r5,zero
81114310:	0025883a 	mov	r18,zero
81114314:	1004953a 	slli	r2,r2,20
81114318:	18c03fcc 	andi	r3,r3,255
8111431c:	04400434 	movhi	r17,16
81114320:	8c7fffc4 	addi	r17,r17,-1
81114324:	180697fa 	slli	r3,r3,31
81114328:	2c4a703a 	and	r5,r5,r17
8111432c:	288ab03a 	or	r5,r5,r2
81114330:	28c6b03a 	or	r3,r5,r3
81114334:	9005883a 	mov	r2,r18
81114338:	dfc00d17 	ldw	ra,52(sp)
8111433c:	df000c17 	ldw	fp,48(sp)
81114340:	ddc00b17 	ldw	r23,44(sp)
81114344:	dd800a17 	ldw	r22,40(sp)
81114348:	dd400917 	ldw	r21,36(sp)
8111434c:	dd000817 	ldw	r20,32(sp)
81114350:	dcc00717 	ldw	r19,28(sp)
81114354:	dc800617 	ldw	r18,24(sp)
81114358:	dc400517 	ldw	r17,20(sp)
8111435c:	dc000417 	ldw	r16,16(sp)
81114360:	dec00e04 	addi	sp,sp,56
81114364:	f800283a 	ret
81114368:	2404b03a 	or	r2,r4,r16
8111436c:	2027883a 	mov	r19,r4
81114370:	10003926 	beq	r2,zero,81114458 <__divdf3+0x2c0>
81114374:	80012e26 	beq	r16,zero,81114830 <__divdf3+0x698>
81114378:	8009883a 	mov	r4,r16
8111437c:	d9800315 	stw	r6,12(sp)
81114380:	d9c00215 	stw	r7,8(sp)
81114384:	11160980 	call	81116098 <__clzsi2>
81114388:	d9800317 	ldw	r6,12(sp)
8111438c:	d9c00217 	ldw	r7,8(sp)
81114390:	113ffd44 	addi	r4,r2,-11
81114394:	00c00704 	movi	r3,28
81114398:	19012116 	blt	r3,r4,81114820 <__divdf3+0x688>
8111439c:	00c00744 	movi	r3,29
811143a0:	147ffe04 	addi	r17,r2,-8
811143a4:	1907c83a 	sub	r3,r3,r4
811143a8:	8460983a 	sll	r16,r16,r17
811143ac:	98c6d83a 	srl	r3,r19,r3
811143b0:	9c64983a 	sll	r18,r19,r17
811143b4:	1c20b03a 	or	r16,r3,r16
811143b8:	1080fcc4 	addi	r2,r2,1011
811143bc:	00abc83a 	sub	r21,zero,r2
811143c0:	0027883a 	mov	r19,zero
811143c4:	0013883a 	mov	r9,zero
811143c8:	003f9106 	br	81114210 <__reset+0xfb0f4210>
811143cc:	3446b03a 	or	r3,r6,r17
811143d0:	18001f1e 	bne	r3,zero,81114450 <__divdf3+0x2b8>
811143d4:	0023883a 	mov	r17,zero
811143d8:	0011883a 	mov	r8,zero
811143dc:	01c00084 	movi	r7,2
811143e0:	003f9d06 	br	81114258 <__reset+0xfb0f4258>
811143e4:	3446b03a 	or	r3,r6,r17
811143e8:	18001526 	beq	r3,zero,81114440 <__divdf3+0x2a8>
811143ec:	88011b26 	beq	r17,zero,8111485c <__divdf3+0x6c4>
811143f0:	8809883a 	mov	r4,r17
811143f4:	d9800315 	stw	r6,12(sp)
811143f8:	da400115 	stw	r9,4(sp)
811143fc:	11160980 	call	81116098 <__clzsi2>
81114400:	d9800317 	ldw	r6,12(sp)
81114404:	da400117 	ldw	r9,4(sp)
81114408:	113ffd44 	addi	r4,r2,-11
8111440c:	00c00704 	movi	r3,28
81114410:	19010e16 	blt	r3,r4,8111484c <__divdf3+0x6b4>
81114414:	00c00744 	movi	r3,29
81114418:	123ffe04 	addi	r8,r2,-8
8111441c:	1907c83a 	sub	r3,r3,r4
81114420:	8a22983a 	sll	r17,r17,r8
81114424:	30c6d83a 	srl	r3,r6,r3
81114428:	3210983a 	sll	r8,r6,r8
8111442c:	1c62b03a 	or	r17,r3,r17
81114430:	1080fcc4 	addi	r2,r2,1011
81114434:	0085c83a 	sub	r2,zero,r2
81114438:	000f883a 	mov	r7,zero
8111443c:	003f8606 	br	81114258 <__reset+0xfb0f4258>
81114440:	0023883a 	mov	r17,zero
81114444:	0011883a 	mov	r8,zero
81114448:	01c00044 	movi	r7,1
8111444c:	003f8206 	br	81114258 <__reset+0xfb0f4258>
81114450:	01c000c4 	movi	r7,3
81114454:	003f8006 	br	81114258 <__reset+0xfb0f4258>
81114458:	04c00104 	movi	r19,4
8111445c:	0021883a 	mov	r16,zero
81114460:	0025883a 	mov	r18,zero
81114464:	02400044 	movi	r9,1
81114468:	003f6906 	br	81114210 <__reset+0xfb0f4210>
8111446c:	04c00304 	movi	r19,12
81114470:	024000c4 	movi	r9,3
81114474:	003f6606 	br	81114210 <__reset+0xfb0f4210>
81114478:	01400434 	movhi	r5,16
8111447c:	0007883a 	mov	r3,zero
81114480:	297fffc4 	addi	r5,r5,-1
81114484:	04bfffc4 	movi	r18,-1
81114488:	0081ffc4 	movi	r2,2047
8111448c:	003fa106 	br	81114314 <__reset+0xfb0f4314>
81114490:	00c00044 	movi	r3,1
81114494:	1887c83a 	sub	r3,r3,r2
81114498:	01000e04 	movi	r4,56
8111449c:	20c1210e 	bge	r4,r3,81114924 <__divdf3+0x78c>
811144a0:	98c0004c 	andi	r3,r19,1
811144a4:	0005883a 	mov	r2,zero
811144a8:	000b883a 	mov	r5,zero
811144ac:	0025883a 	mov	r18,zero
811144b0:	003f9806 	br	81114314 <__reset+0xfb0f4314>
811144b4:	8c00fd36 	bltu	r17,r16,811148ac <__divdf3+0x714>
811144b8:	8440fb26 	beq	r16,r17,811148a8 <__divdf3+0x710>
811144bc:	8007883a 	mov	r3,r16
811144c0:	ad7fffc4 	addi	r21,r21,-1
811144c4:	0021883a 	mov	r16,zero
811144c8:	4004d63a 	srli	r2,r8,24
811144cc:	8822923a 	slli	r17,r17,8
811144d0:	1809883a 	mov	r4,r3
811144d4:	402c923a 	slli	r22,r8,8
811144d8:	88b8b03a 	or	fp,r17,r2
811144dc:	e028d43a 	srli	r20,fp,16
811144e0:	d8c00015 	stw	r3,0(sp)
811144e4:	e5ffffcc 	andi	r23,fp,65535
811144e8:	a00b883a 	mov	r5,r20
811144ec:	11136340 	call	81113634 <__udivsi3>
811144f0:	d8c00017 	ldw	r3,0(sp)
811144f4:	a00b883a 	mov	r5,r20
811144f8:	d8800315 	stw	r2,12(sp)
811144fc:	1809883a 	mov	r4,r3
81114500:	11136980 	call	81113698 <__umodsi3>
81114504:	d9800317 	ldw	r6,12(sp)
81114508:	1006943a 	slli	r3,r2,16
8111450c:	9004d43a 	srli	r2,r18,16
81114510:	b9a3383a 	mul	r17,r23,r6
81114514:	10c4b03a 	or	r2,r2,r3
81114518:	1440062e 	bgeu	r2,r17,81114534 <__divdf3+0x39c>
8111451c:	1705883a 	add	r2,r2,fp
81114520:	30ffffc4 	addi	r3,r6,-1
81114524:	1700ee36 	bltu	r2,fp,811148e0 <__divdf3+0x748>
81114528:	1440ed2e 	bgeu	r2,r17,811148e0 <__divdf3+0x748>
8111452c:	31bfff84 	addi	r6,r6,-2
81114530:	1705883a 	add	r2,r2,fp
81114534:	1463c83a 	sub	r17,r2,r17
81114538:	a00b883a 	mov	r5,r20
8111453c:	8809883a 	mov	r4,r17
81114540:	d9800315 	stw	r6,12(sp)
81114544:	11136340 	call	81113634 <__udivsi3>
81114548:	a00b883a 	mov	r5,r20
8111454c:	8809883a 	mov	r4,r17
81114550:	d8800215 	stw	r2,8(sp)
81114554:	11136980 	call	81113698 <__umodsi3>
81114558:	d9c00217 	ldw	r7,8(sp)
8111455c:	1004943a 	slli	r2,r2,16
81114560:	94bfffcc 	andi	r18,r18,65535
81114564:	b9d1383a 	mul	r8,r23,r7
81114568:	90a4b03a 	or	r18,r18,r2
8111456c:	d9800317 	ldw	r6,12(sp)
81114570:	9200062e 	bgeu	r18,r8,8111458c <__divdf3+0x3f4>
81114574:	9725883a 	add	r18,r18,fp
81114578:	38bfffc4 	addi	r2,r7,-1
8111457c:	9700d636 	bltu	r18,fp,811148d8 <__divdf3+0x740>
81114580:	9200d52e 	bgeu	r18,r8,811148d8 <__divdf3+0x740>
81114584:	39ffff84 	addi	r7,r7,-2
81114588:	9725883a 	add	r18,r18,fp
8111458c:	3004943a 	slli	r2,r6,16
81114590:	b012d43a 	srli	r9,r22,16
81114594:	b1bfffcc 	andi	r6,r22,65535
81114598:	11e2b03a 	or	r17,r2,r7
8111459c:	8806d43a 	srli	r3,r17,16
811145a0:	893fffcc 	andi	r4,r17,65535
811145a4:	218b383a 	mul	r5,r4,r6
811145a8:	30c5383a 	mul	r2,r6,r3
811145ac:	2249383a 	mul	r4,r4,r9
811145b0:	280ed43a 	srli	r7,r5,16
811145b4:	9225c83a 	sub	r18,r18,r8
811145b8:	2089883a 	add	r4,r4,r2
811145bc:	3909883a 	add	r4,r7,r4
811145c0:	1a47383a 	mul	r3,r3,r9
811145c4:	2080022e 	bgeu	r4,r2,811145d0 <__divdf3+0x438>
811145c8:	00800074 	movhi	r2,1
811145cc:	1887883a 	add	r3,r3,r2
811145d0:	2004d43a 	srli	r2,r4,16
811145d4:	2008943a 	slli	r4,r4,16
811145d8:	297fffcc 	andi	r5,r5,65535
811145dc:	10c7883a 	add	r3,r2,r3
811145e0:	2149883a 	add	r4,r4,r5
811145e4:	90c0a536 	bltu	r18,r3,8111487c <__divdf3+0x6e4>
811145e8:	90c0bf26 	beq	r18,r3,811148e8 <__divdf3+0x750>
811145ec:	90c7c83a 	sub	r3,r18,r3
811145f0:	810fc83a 	sub	r7,r16,r4
811145f4:	81e5803a 	cmpltu	r18,r16,r7
811145f8:	1ca5c83a 	sub	r18,r3,r18
811145fc:	e480c126 	beq	fp,r18,81114904 <__divdf3+0x76c>
81114600:	a00b883a 	mov	r5,r20
81114604:	9009883a 	mov	r4,r18
81114608:	d9800315 	stw	r6,12(sp)
8111460c:	d9c00215 	stw	r7,8(sp)
81114610:	da400115 	stw	r9,4(sp)
81114614:	11136340 	call	81113634 <__udivsi3>
81114618:	a00b883a 	mov	r5,r20
8111461c:	9009883a 	mov	r4,r18
81114620:	d8800015 	stw	r2,0(sp)
81114624:	11136980 	call	81113698 <__umodsi3>
81114628:	d9c00217 	ldw	r7,8(sp)
8111462c:	da000017 	ldw	r8,0(sp)
81114630:	1006943a 	slli	r3,r2,16
81114634:	3804d43a 	srli	r2,r7,16
81114638:	ba21383a 	mul	r16,r23,r8
8111463c:	d9800317 	ldw	r6,12(sp)
81114640:	10c4b03a 	or	r2,r2,r3
81114644:	da400117 	ldw	r9,4(sp)
81114648:	1400062e 	bgeu	r2,r16,81114664 <__divdf3+0x4cc>
8111464c:	1705883a 	add	r2,r2,fp
81114650:	40ffffc4 	addi	r3,r8,-1
81114654:	1700ad36 	bltu	r2,fp,8111490c <__divdf3+0x774>
81114658:	1400ac2e 	bgeu	r2,r16,8111490c <__divdf3+0x774>
8111465c:	423fff84 	addi	r8,r8,-2
81114660:	1705883a 	add	r2,r2,fp
81114664:	1421c83a 	sub	r16,r2,r16
81114668:	a00b883a 	mov	r5,r20
8111466c:	8009883a 	mov	r4,r16
81114670:	d9800315 	stw	r6,12(sp)
81114674:	d9c00215 	stw	r7,8(sp)
81114678:	da000015 	stw	r8,0(sp)
8111467c:	da400115 	stw	r9,4(sp)
81114680:	11136340 	call	81113634 <__udivsi3>
81114684:	8009883a 	mov	r4,r16
81114688:	a00b883a 	mov	r5,r20
8111468c:	1025883a 	mov	r18,r2
81114690:	11136980 	call	81113698 <__umodsi3>
81114694:	d9c00217 	ldw	r7,8(sp)
81114698:	1004943a 	slli	r2,r2,16
8111469c:	bcaf383a 	mul	r23,r23,r18
811146a0:	393fffcc 	andi	r4,r7,65535
811146a4:	2088b03a 	or	r4,r4,r2
811146a8:	d9800317 	ldw	r6,12(sp)
811146ac:	da000017 	ldw	r8,0(sp)
811146b0:	da400117 	ldw	r9,4(sp)
811146b4:	25c0062e 	bgeu	r4,r23,811146d0 <__divdf3+0x538>
811146b8:	2709883a 	add	r4,r4,fp
811146bc:	90bfffc4 	addi	r2,r18,-1
811146c0:	27009436 	bltu	r4,fp,81114914 <__divdf3+0x77c>
811146c4:	25c0932e 	bgeu	r4,r23,81114914 <__divdf3+0x77c>
811146c8:	94bfff84 	addi	r18,r18,-2
811146cc:	2709883a 	add	r4,r4,fp
811146d0:	4004943a 	slli	r2,r8,16
811146d4:	25efc83a 	sub	r23,r4,r23
811146d8:	1490b03a 	or	r8,r2,r18
811146dc:	4008d43a 	srli	r4,r8,16
811146e0:	40ffffcc 	andi	r3,r8,65535
811146e4:	30c5383a 	mul	r2,r6,r3
811146e8:	1a47383a 	mul	r3,r3,r9
811146ec:	310d383a 	mul	r6,r6,r4
811146f0:	100ad43a 	srli	r5,r2,16
811146f4:	4913383a 	mul	r9,r9,r4
811146f8:	1987883a 	add	r3,r3,r6
811146fc:	28c7883a 	add	r3,r5,r3
81114700:	1980022e 	bgeu	r3,r6,8111470c <__divdf3+0x574>
81114704:	01000074 	movhi	r4,1
81114708:	4913883a 	add	r9,r9,r4
8111470c:	1808d43a 	srli	r4,r3,16
81114710:	1806943a 	slli	r3,r3,16
81114714:	10bfffcc 	andi	r2,r2,65535
81114718:	2253883a 	add	r9,r4,r9
8111471c:	1887883a 	add	r3,r3,r2
81114720:	ba403836 	bltu	r23,r9,81114804 <__divdf3+0x66c>
81114724:	ba403626 	beq	r23,r9,81114800 <__divdf3+0x668>
81114728:	42000054 	ori	r8,r8,1
8111472c:	a880ffc4 	addi	r2,r21,1023
81114730:	00bf570e 	bge	zero,r2,81114490 <__reset+0xfb0f4490>
81114734:	40c001cc 	andi	r3,r8,7
81114738:	18000726 	beq	r3,zero,81114758 <__divdf3+0x5c0>
8111473c:	40c003cc 	andi	r3,r8,15
81114740:	01000104 	movi	r4,4
81114744:	19000426 	beq	r3,r4,81114758 <__divdf3+0x5c0>
81114748:	4107883a 	add	r3,r8,r4
8111474c:	1a11803a 	cmpltu	r8,r3,r8
81114750:	8a23883a 	add	r17,r17,r8
81114754:	1811883a 	mov	r8,r3
81114758:	88c0402c 	andhi	r3,r17,256
8111475c:	18000426 	beq	r3,zero,81114770 <__divdf3+0x5d8>
81114760:	00ffc034 	movhi	r3,65280
81114764:	18ffffc4 	addi	r3,r3,-1
81114768:	a8810004 	addi	r2,r21,1024
8111476c:	88e2703a 	and	r17,r17,r3
81114770:	00c1ff84 	movi	r3,2046
81114774:	18bee316 	blt	r3,r2,81114304 <__reset+0xfb0f4304>
81114778:	8824977a 	slli	r18,r17,29
8111477c:	4010d0fa 	srli	r8,r8,3
81114780:	8822927a 	slli	r17,r17,9
81114784:	1081ffcc 	andi	r2,r2,2047
81114788:	9224b03a 	or	r18,r18,r8
8111478c:	880ad33a 	srli	r5,r17,12
81114790:	98c0004c 	andi	r3,r19,1
81114794:	003edf06 	br	81114314 <__reset+0xfb0f4314>
81114798:	8080022c 	andhi	r2,r16,8
8111479c:	10001226 	beq	r2,zero,811147e8 <__divdf3+0x650>
811147a0:	8880022c 	andhi	r2,r17,8
811147a4:	1000101e 	bne	r2,zero,811147e8 <__divdf3+0x650>
811147a8:	00800434 	movhi	r2,16
811147ac:	89400234 	orhi	r5,r17,8
811147b0:	10bfffc4 	addi	r2,r2,-1
811147b4:	b007883a 	mov	r3,r22
811147b8:	288a703a 	and	r5,r5,r2
811147bc:	4025883a 	mov	r18,r8
811147c0:	003f3106 	br	81114488 <__reset+0xfb0f4488>
811147c4:	008000c4 	movi	r2,3
811147c8:	3880a626 	beq	r7,r2,81114a64 <__divdf3+0x8cc>
811147cc:	00800044 	movi	r2,1
811147d0:	3880521e 	bne	r7,r2,8111491c <__divdf3+0x784>
811147d4:	b807883a 	mov	r3,r23
811147d8:	0005883a 	mov	r2,zero
811147dc:	000b883a 	mov	r5,zero
811147e0:	0025883a 	mov	r18,zero
811147e4:	003ecb06 	br	81114314 <__reset+0xfb0f4314>
811147e8:	00800434 	movhi	r2,16
811147ec:	81400234 	orhi	r5,r16,8
811147f0:	10bfffc4 	addi	r2,r2,-1
811147f4:	a007883a 	mov	r3,r20
811147f8:	288a703a 	and	r5,r5,r2
811147fc:	003f2206 	br	81114488 <__reset+0xfb0f4488>
81114800:	183fca26 	beq	r3,zero,8111472c <__reset+0xfb0f472c>
81114804:	e5ef883a 	add	r23,fp,r23
81114808:	40bfffc4 	addi	r2,r8,-1
8111480c:	bf00392e 	bgeu	r23,fp,811148f4 <__divdf3+0x75c>
81114810:	1011883a 	mov	r8,r2
81114814:	ba7fc41e 	bne	r23,r9,81114728 <__reset+0xfb0f4728>
81114818:	b0ffc31e 	bne	r22,r3,81114728 <__reset+0xfb0f4728>
8111481c:	003fc306 	br	8111472c <__reset+0xfb0f472c>
81114820:	143ff604 	addi	r16,r2,-40
81114824:	9c20983a 	sll	r16,r19,r16
81114828:	0025883a 	mov	r18,zero
8111482c:	003ee206 	br	811143b8 <__reset+0xfb0f43b8>
81114830:	d9800315 	stw	r6,12(sp)
81114834:	d9c00215 	stw	r7,8(sp)
81114838:	11160980 	call	81116098 <__clzsi2>
8111483c:	10800804 	addi	r2,r2,32
81114840:	d9c00217 	ldw	r7,8(sp)
81114844:	d9800317 	ldw	r6,12(sp)
81114848:	003ed106 	br	81114390 <__reset+0xfb0f4390>
8111484c:	147ff604 	addi	r17,r2,-40
81114850:	3462983a 	sll	r17,r6,r17
81114854:	0011883a 	mov	r8,zero
81114858:	003ef506 	br	81114430 <__reset+0xfb0f4430>
8111485c:	3009883a 	mov	r4,r6
81114860:	d9800315 	stw	r6,12(sp)
81114864:	da400115 	stw	r9,4(sp)
81114868:	11160980 	call	81116098 <__clzsi2>
8111486c:	10800804 	addi	r2,r2,32
81114870:	da400117 	ldw	r9,4(sp)
81114874:	d9800317 	ldw	r6,12(sp)
81114878:	003ee306 	br	81114408 <__reset+0xfb0f4408>
8111487c:	85a1883a 	add	r16,r16,r22
81114880:	8585803a 	cmpltu	r2,r16,r22
81114884:	1705883a 	add	r2,r2,fp
81114888:	14a5883a 	add	r18,r2,r18
8111488c:	88bfffc4 	addi	r2,r17,-1
81114890:	e4800c2e 	bgeu	fp,r18,811148c4 <__divdf3+0x72c>
81114894:	90c03e36 	bltu	r18,r3,81114990 <__divdf3+0x7f8>
81114898:	1c806926 	beq	r3,r18,81114a40 <__divdf3+0x8a8>
8111489c:	90c7c83a 	sub	r3,r18,r3
811148a0:	1023883a 	mov	r17,r2
811148a4:	003f5206 	br	811145f0 <__reset+0xfb0f45f0>
811148a8:	923f0436 	bltu	r18,r8,811144bc <__reset+0xfb0f44bc>
811148ac:	800897fa 	slli	r4,r16,31
811148b0:	9004d07a 	srli	r2,r18,1
811148b4:	8006d07a 	srli	r3,r16,1
811148b8:	902097fa 	slli	r16,r18,31
811148bc:	20a4b03a 	or	r18,r4,r2
811148c0:	003f0106 	br	811144c8 <__reset+0xfb0f44c8>
811148c4:	e4bff51e 	bne	fp,r18,8111489c <__reset+0xfb0f489c>
811148c8:	85bff22e 	bgeu	r16,r22,81114894 <__reset+0xfb0f4894>
811148cc:	e0c7c83a 	sub	r3,fp,r3
811148d0:	1023883a 	mov	r17,r2
811148d4:	003f4606 	br	811145f0 <__reset+0xfb0f45f0>
811148d8:	100f883a 	mov	r7,r2
811148dc:	003f2b06 	br	8111458c <__reset+0xfb0f458c>
811148e0:	180d883a 	mov	r6,r3
811148e4:	003f1306 	br	81114534 <__reset+0xfb0f4534>
811148e8:	813fe436 	bltu	r16,r4,8111487c <__reset+0xfb0f487c>
811148ec:	0007883a 	mov	r3,zero
811148f0:	003f3f06 	br	811145f0 <__reset+0xfb0f45f0>
811148f4:	ba402c36 	bltu	r23,r9,811149a8 <__divdf3+0x810>
811148f8:	4dc05426 	beq	r9,r23,81114a4c <__divdf3+0x8b4>
811148fc:	1011883a 	mov	r8,r2
81114900:	003f8906 	br	81114728 <__reset+0xfb0f4728>
81114904:	023fffc4 	movi	r8,-1
81114908:	003f8806 	br	8111472c <__reset+0xfb0f472c>
8111490c:	1811883a 	mov	r8,r3
81114910:	003f5406 	br	81114664 <__reset+0xfb0f4664>
81114914:	1025883a 	mov	r18,r2
81114918:	003f6d06 	br	811146d0 <__reset+0xfb0f46d0>
8111491c:	b827883a 	mov	r19,r23
81114920:	003f8206 	br	8111472c <__reset+0xfb0f472c>
81114924:	010007c4 	movi	r4,31
81114928:	20c02616 	blt	r4,r3,811149c4 <__divdf3+0x82c>
8111492c:	00800804 	movi	r2,32
81114930:	10c5c83a 	sub	r2,r2,r3
81114934:	888a983a 	sll	r5,r17,r2
81114938:	40c8d83a 	srl	r4,r8,r3
8111493c:	4084983a 	sll	r2,r8,r2
81114940:	88e2d83a 	srl	r17,r17,r3
81114944:	2906b03a 	or	r3,r5,r4
81114948:	1004c03a 	cmpne	r2,r2,zero
8111494c:	1886b03a 	or	r3,r3,r2
81114950:	188001cc 	andi	r2,r3,7
81114954:	10000726 	beq	r2,zero,81114974 <__divdf3+0x7dc>
81114958:	188003cc 	andi	r2,r3,15
8111495c:	01000104 	movi	r4,4
81114960:	11000426 	beq	r2,r4,81114974 <__divdf3+0x7dc>
81114964:	1805883a 	mov	r2,r3
81114968:	10c00104 	addi	r3,r2,4
8111496c:	1885803a 	cmpltu	r2,r3,r2
81114970:	88a3883a 	add	r17,r17,r2
81114974:	8880202c 	andhi	r2,r17,128
81114978:	10002726 	beq	r2,zero,81114a18 <__divdf3+0x880>
8111497c:	98c0004c 	andi	r3,r19,1
81114980:	00800044 	movi	r2,1
81114984:	000b883a 	mov	r5,zero
81114988:	0025883a 	mov	r18,zero
8111498c:	003e6106 	br	81114314 <__reset+0xfb0f4314>
81114990:	85a1883a 	add	r16,r16,r22
81114994:	8585803a 	cmpltu	r2,r16,r22
81114998:	1705883a 	add	r2,r2,fp
8111499c:	14a5883a 	add	r18,r2,r18
811149a0:	8c7fff84 	addi	r17,r17,-2
811149a4:	003f1106 	br	811145ec <__reset+0xfb0f45ec>
811149a8:	b589883a 	add	r4,r22,r22
811149ac:	25ad803a 	cmpltu	r22,r4,r22
811149b0:	b739883a 	add	fp,r22,fp
811149b4:	40bfff84 	addi	r2,r8,-2
811149b8:	bf2f883a 	add	r23,r23,fp
811149bc:	202d883a 	mov	r22,r4
811149c0:	003f9306 	br	81114810 <__reset+0xfb0f4810>
811149c4:	013ff844 	movi	r4,-31
811149c8:	2085c83a 	sub	r2,r4,r2
811149cc:	8888d83a 	srl	r4,r17,r2
811149d0:	00800804 	movi	r2,32
811149d4:	18802126 	beq	r3,r2,81114a5c <__divdf3+0x8c4>
811149d8:	00801004 	movi	r2,64
811149dc:	10c5c83a 	sub	r2,r2,r3
811149e0:	8884983a 	sll	r2,r17,r2
811149e4:	1204b03a 	or	r2,r2,r8
811149e8:	1004c03a 	cmpne	r2,r2,zero
811149ec:	2084b03a 	or	r2,r4,r2
811149f0:	144001cc 	andi	r17,r2,7
811149f4:	88000d1e 	bne	r17,zero,81114a2c <__divdf3+0x894>
811149f8:	000b883a 	mov	r5,zero
811149fc:	1024d0fa 	srli	r18,r2,3
81114a00:	98c0004c 	andi	r3,r19,1
81114a04:	0005883a 	mov	r2,zero
81114a08:	9464b03a 	or	r18,r18,r17
81114a0c:	003e4106 	br	81114314 <__reset+0xfb0f4314>
81114a10:	1007883a 	mov	r3,r2
81114a14:	0023883a 	mov	r17,zero
81114a18:	880a927a 	slli	r5,r17,9
81114a1c:	1805883a 	mov	r2,r3
81114a20:	8822977a 	slli	r17,r17,29
81114a24:	280ad33a 	srli	r5,r5,12
81114a28:	003ff406 	br	811149fc <__reset+0xfb0f49fc>
81114a2c:	10c003cc 	andi	r3,r2,15
81114a30:	01000104 	movi	r4,4
81114a34:	193ff626 	beq	r3,r4,81114a10 <__reset+0xfb0f4a10>
81114a38:	0023883a 	mov	r17,zero
81114a3c:	003fca06 	br	81114968 <__reset+0xfb0f4968>
81114a40:	813fd336 	bltu	r16,r4,81114990 <__reset+0xfb0f4990>
81114a44:	1023883a 	mov	r17,r2
81114a48:	003fa806 	br	811148ec <__reset+0xfb0f48ec>
81114a4c:	b0ffd636 	bltu	r22,r3,811149a8 <__reset+0xfb0f49a8>
81114a50:	1011883a 	mov	r8,r2
81114a54:	b0ff341e 	bne	r22,r3,81114728 <__reset+0xfb0f4728>
81114a58:	003f3406 	br	8111472c <__reset+0xfb0f472c>
81114a5c:	0005883a 	mov	r2,zero
81114a60:	003fe006 	br	811149e4 <__reset+0xfb0f49e4>
81114a64:	00800434 	movhi	r2,16
81114a68:	89400234 	orhi	r5,r17,8
81114a6c:	10bfffc4 	addi	r2,r2,-1
81114a70:	b807883a 	mov	r3,r23
81114a74:	288a703a 	and	r5,r5,r2
81114a78:	4025883a 	mov	r18,r8
81114a7c:	003e8206 	br	81114488 <__reset+0xfb0f4488>

81114a80 <__eqdf2>:
81114a80:	2804d53a 	srli	r2,r5,20
81114a84:	3806d53a 	srli	r3,r7,20
81114a88:	02000434 	movhi	r8,16
81114a8c:	423fffc4 	addi	r8,r8,-1
81114a90:	1081ffcc 	andi	r2,r2,2047
81114a94:	0281ffc4 	movi	r10,2047
81114a98:	2a12703a 	and	r9,r5,r8
81114a9c:	18c1ffcc 	andi	r3,r3,2047
81114aa0:	3a10703a 	and	r8,r7,r8
81114aa4:	280ad7fa 	srli	r5,r5,31
81114aa8:	380ed7fa 	srli	r7,r7,31
81114aac:	12801026 	beq	r2,r10,81114af0 <__eqdf2+0x70>
81114ab0:	0281ffc4 	movi	r10,2047
81114ab4:	1a800a26 	beq	r3,r10,81114ae0 <__eqdf2+0x60>
81114ab8:	10c00226 	beq	r2,r3,81114ac4 <__eqdf2+0x44>
81114abc:	00800044 	movi	r2,1
81114ac0:	f800283a 	ret
81114ac4:	4a3ffd1e 	bne	r9,r8,81114abc <__reset+0xfb0f4abc>
81114ac8:	21bffc1e 	bne	r4,r6,81114abc <__reset+0xfb0f4abc>
81114acc:	29c00c26 	beq	r5,r7,81114b00 <__eqdf2+0x80>
81114ad0:	103ffa1e 	bne	r2,zero,81114abc <__reset+0xfb0f4abc>
81114ad4:	2244b03a 	or	r2,r4,r9
81114ad8:	1004c03a 	cmpne	r2,r2,zero
81114adc:	f800283a 	ret
81114ae0:	3214b03a 	or	r10,r6,r8
81114ae4:	503ff426 	beq	r10,zero,81114ab8 <__reset+0xfb0f4ab8>
81114ae8:	00800044 	movi	r2,1
81114aec:	f800283a 	ret
81114af0:	2254b03a 	or	r10,r4,r9
81114af4:	503fee26 	beq	r10,zero,81114ab0 <__reset+0xfb0f4ab0>
81114af8:	00800044 	movi	r2,1
81114afc:	f800283a 	ret
81114b00:	0005883a 	mov	r2,zero
81114b04:	f800283a 	ret

81114b08 <__gedf2>:
81114b08:	2804d53a 	srli	r2,r5,20
81114b0c:	3806d53a 	srli	r3,r7,20
81114b10:	02000434 	movhi	r8,16
81114b14:	423fffc4 	addi	r8,r8,-1
81114b18:	1081ffcc 	andi	r2,r2,2047
81114b1c:	0241ffc4 	movi	r9,2047
81114b20:	2a14703a 	and	r10,r5,r8
81114b24:	18c1ffcc 	andi	r3,r3,2047
81114b28:	3a10703a 	and	r8,r7,r8
81114b2c:	280ad7fa 	srli	r5,r5,31
81114b30:	380ed7fa 	srli	r7,r7,31
81114b34:	12401d26 	beq	r2,r9,81114bac <__gedf2+0xa4>
81114b38:	0241ffc4 	movi	r9,2047
81114b3c:	1a401226 	beq	r3,r9,81114b88 <__gedf2+0x80>
81114b40:	1000081e 	bne	r2,zero,81114b64 <__gedf2+0x5c>
81114b44:	2296b03a 	or	r11,r4,r10
81114b48:	5813003a 	cmpeq	r9,r11,zero
81114b4c:	1800091e 	bne	r3,zero,81114b74 <__gedf2+0x6c>
81114b50:	3218b03a 	or	r12,r6,r8
81114b54:	6000071e 	bne	r12,zero,81114b74 <__gedf2+0x6c>
81114b58:	0005883a 	mov	r2,zero
81114b5c:	5800101e 	bne	r11,zero,81114ba0 <__gedf2+0x98>
81114b60:	f800283a 	ret
81114b64:	18000c1e 	bne	r3,zero,81114b98 <__gedf2+0x90>
81114b68:	3212b03a 	or	r9,r6,r8
81114b6c:	48000c26 	beq	r9,zero,81114ba0 <__gedf2+0x98>
81114b70:	0013883a 	mov	r9,zero
81114b74:	39c03fcc 	andi	r7,r7,255
81114b78:	48000826 	beq	r9,zero,81114b9c <__gedf2+0x94>
81114b7c:	38000926 	beq	r7,zero,81114ba4 <__gedf2+0x9c>
81114b80:	00800044 	movi	r2,1
81114b84:	f800283a 	ret
81114b88:	3212b03a 	or	r9,r6,r8
81114b8c:	483fec26 	beq	r9,zero,81114b40 <__reset+0xfb0f4b40>
81114b90:	00bfff84 	movi	r2,-2
81114b94:	f800283a 	ret
81114b98:	39c03fcc 	andi	r7,r7,255
81114b9c:	29c00626 	beq	r5,r7,81114bb8 <__gedf2+0xb0>
81114ba0:	283ff726 	beq	r5,zero,81114b80 <__reset+0xfb0f4b80>
81114ba4:	00bfffc4 	movi	r2,-1
81114ba8:	f800283a 	ret
81114bac:	2292b03a 	or	r9,r4,r10
81114bb0:	483fe126 	beq	r9,zero,81114b38 <__reset+0xfb0f4b38>
81114bb4:	003ff606 	br	81114b90 <__reset+0xfb0f4b90>
81114bb8:	18bff916 	blt	r3,r2,81114ba0 <__reset+0xfb0f4ba0>
81114bbc:	10c00316 	blt	r2,r3,81114bcc <__gedf2+0xc4>
81114bc0:	42bff736 	bltu	r8,r10,81114ba0 <__reset+0xfb0f4ba0>
81114bc4:	52000326 	beq	r10,r8,81114bd4 <__gedf2+0xcc>
81114bc8:	5200042e 	bgeu	r10,r8,81114bdc <__gedf2+0xd4>
81114bcc:	283fec1e 	bne	r5,zero,81114b80 <__reset+0xfb0f4b80>
81114bd0:	003ff406 	br	81114ba4 <__reset+0xfb0f4ba4>
81114bd4:	313ff236 	bltu	r6,r4,81114ba0 <__reset+0xfb0f4ba0>
81114bd8:	21bffc36 	bltu	r4,r6,81114bcc <__reset+0xfb0f4bcc>
81114bdc:	0005883a 	mov	r2,zero
81114be0:	f800283a 	ret

81114be4 <__ledf2>:
81114be4:	2804d53a 	srli	r2,r5,20
81114be8:	3810d53a 	srli	r8,r7,20
81114bec:	00c00434 	movhi	r3,16
81114bf0:	18ffffc4 	addi	r3,r3,-1
81114bf4:	1081ffcc 	andi	r2,r2,2047
81114bf8:	0241ffc4 	movi	r9,2047
81114bfc:	28d4703a 	and	r10,r5,r3
81114c00:	4201ffcc 	andi	r8,r8,2047
81114c04:	38c6703a 	and	r3,r7,r3
81114c08:	280ad7fa 	srli	r5,r5,31
81114c0c:	380ed7fa 	srli	r7,r7,31
81114c10:	12401f26 	beq	r2,r9,81114c90 <__ledf2+0xac>
81114c14:	0241ffc4 	movi	r9,2047
81114c18:	42401426 	beq	r8,r9,81114c6c <__ledf2+0x88>
81114c1c:	1000091e 	bne	r2,zero,81114c44 <__ledf2+0x60>
81114c20:	2296b03a 	or	r11,r4,r10
81114c24:	5813003a 	cmpeq	r9,r11,zero
81114c28:	29403fcc 	andi	r5,r5,255
81114c2c:	40000a1e 	bne	r8,zero,81114c58 <__ledf2+0x74>
81114c30:	30d8b03a 	or	r12,r6,r3
81114c34:	6000081e 	bne	r12,zero,81114c58 <__ledf2+0x74>
81114c38:	0005883a 	mov	r2,zero
81114c3c:	5800111e 	bne	r11,zero,81114c84 <__ledf2+0xa0>
81114c40:	f800283a 	ret
81114c44:	29403fcc 	andi	r5,r5,255
81114c48:	40000c1e 	bne	r8,zero,81114c7c <__ledf2+0x98>
81114c4c:	30d2b03a 	or	r9,r6,r3
81114c50:	48000c26 	beq	r9,zero,81114c84 <__ledf2+0xa0>
81114c54:	0013883a 	mov	r9,zero
81114c58:	39c03fcc 	andi	r7,r7,255
81114c5c:	48000826 	beq	r9,zero,81114c80 <__ledf2+0x9c>
81114c60:	38001126 	beq	r7,zero,81114ca8 <__ledf2+0xc4>
81114c64:	00800044 	movi	r2,1
81114c68:	f800283a 	ret
81114c6c:	30d2b03a 	or	r9,r6,r3
81114c70:	483fea26 	beq	r9,zero,81114c1c <__reset+0xfb0f4c1c>
81114c74:	00800084 	movi	r2,2
81114c78:	f800283a 	ret
81114c7c:	39c03fcc 	andi	r7,r7,255
81114c80:	39400726 	beq	r7,r5,81114ca0 <__ledf2+0xbc>
81114c84:	2800081e 	bne	r5,zero,81114ca8 <__ledf2+0xc4>
81114c88:	00800044 	movi	r2,1
81114c8c:	f800283a 	ret
81114c90:	2292b03a 	or	r9,r4,r10
81114c94:	483fdf26 	beq	r9,zero,81114c14 <__reset+0xfb0f4c14>
81114c98:	00800084 	movi	r2,2
81114c9c:	f800283a 	ret
81114ca0:	4080030e 	bge	r8,r2,81114cb0 <__ledf2+0xcc>
81114ca4:	383fef26 	beq	r7,zero,81114c64 <__reset+0xfb0f4c64>
81114ca8:	00bfffc4 	movi	r2,-1
81114cac:	f800283a 	ret
81114cb0:	123feb16 	blt	r2,r8,81114c60 <__reset+0xfb0f4c60>
81114cb4:	1abff336 	bltu	r3,r10,81114c84 <__reset+0xfb0f4c84>
81114cb8:	50c00326 	beq	r10,r3,81114cc8 <__ledf2+0xe4>
81114cbc:	50c0042e 	bgeu	r10,r3,81114cd0 <__ledf2+0xec>
81114cc0:	283fe81e 	bne	r5,zero,81114c64 <__reset+0xfb0f4c64>
81114cc4:	003ff806 	br	81114ca8 <__reset+0xfb0f4ca8>
81114cc8:	313fee36 	bltu	r6,r4,81114c84 <__reset+0xfb0f4c84>
81114ccc:	21bffc36 	bltu	r4,r6,81114cc0 <__reset+0xfb0f4cc0>
81114cd0:	0005883a 	mov	r2,zero
81114cd4:	f800283a 	ret

81114cd8 <__muldf3>:
81114cd8:	defff304 	addi	sp,sp,-52
81114cdc:	2804d53a 	srli	r2,r5,20
81114ce0:	dd800915 	stw	r22,36(sp)
81114ce4:	282cd7fa 	srli	r22,r5,31
81114ce8:	dc000315 	stw	r16,12(sp)
81114cec:	04000434 	movhi	r16,16
81114cf0:	dd400815 	stw	r21,32(sp)
81114cf4:	dc800515 	stw	r18,20(sp)
81114cf8:	843fffc4 	addi	r16,r16,-1
81114cfc:	dfc00c15 	stw	ra,48(sp)
81114d00:	df000b15 	stw	fp,44(sp)
81114d04:	ddc00a15 	stw	r23,40(sp)
81114d08:	dd000715 	stw	r20,28(sp)
81114d0c:	dcc00615 	stw	r19,24(sp)
81114d10:	dc400415 	stw	r17,16(sp)
81114d14:	1481ffcc 	andi	r18,r2,2047
81114d18:	2c20703a 	and	r16,r5,r16
81114d1c:	b02b883a 	mov	r21,r22
81114d20:	b2403fcc 	andi	r9,r22,255
81114d24:	90006026 	beq	r18,zero,81114ea8 <__muldf3+0x1d0>
81114d28:	0081ffc4 	movi	r2,2047
81114d2c:	2029883a 	mov	r20,r4
81114d30:	90803626 	beq	r18,r2,81114e0c <__muldf3+0x134>
81114d34:	80800434 	orhi	r2,r16,16
81114d38:	100490fa 	slli	r2,r2,3
81114d3c:	2020d77a 	srli	r16,r4,29
81114d40:	202890fa 	slli	r20,r4,3
81114d44:	94bf0044 	addi	r18,r18,-1023
81114d48:	80a0b03a 	or	r16,r16,r2
81114d4c:	0027883a 	mov	r19,zero
81114d50:	0039883a 	mov	fp,zero
81114d54:	3804d53a 	srli	r2,r7,20
81114d58:	382ed7fa 	srli	r23,r7,31
81114d5c:	04400434 	movhi	r17,16
81114d60:	8c7fffc4 	addi	r17,r17,-1
81114d64:	1081ffcc 	andi	r2,r2,2047
81114d68:	3011883a 	mov	r8,r6
81114d6c:	3c62703a 	and	r17,r7,r17
81114d70:	ba803fcc 	andi	r10,r23,255
81114d74:	10006d26 	beq	r2,zero,81114f2c <__muldf3+0x254>
81114d78:	00c1ffc4 	movi	r3,2047
81114d7c:	10c06526 	beq	r2,r3,81114f14 <__muldf3+0x23c>
81114d80:	88c00434 	orhi	r3,r17,16
81114d84:	180690fa 	slli	r3,r3,3
81114d88:	3022d77a 	srli	r17,r6,29
81114d8c:	301090fa 	slli	r8,r6,3
81114d90:	10bf0044 	addi	r2,r2,-1023
81114d94:	88e2b03a 	or	r17,r17,r3
81114d98:	000b883a 	mov	r5,zero
81114d9c:	9085883a 	add	r2,r18,r2
81114da0:	2cc8b03a 	or	r4,r5,r19
81114da4:	00c003c4 	movi	r3,15
81114da8:	bdacf03a 	xor	r22,r23,r22
81114dac:	12c00044 	addi	r11,r2,1
81114db0:	19009936 	bltu	r3,r4,81115018 <__muldf3+0x340>
81114db4:	200890ba 	slli	r4,r4,2
81114db8:	00e04474 	movhi	r3,33041
81114dbc:	18d37304 	addi	r3,r3,19916
81114dc0:	20c9883a 	add	r4,r4,r3
81114dc4:	20c00017 	ldw	r3,0(r4)
81114dc8:	1800683a 	jmp	r3
81114dcc:	81115018 	cmpnei	r4,r16,17728
81114dd0:	81114e2c 	andhi	r4,r16,17720
81114dd4:	81114e2c 	andhi	r4,r16,17720
81114dd8:	81114e28 	cmpgeui	r4,r16,17720
81114ddc:	81114ff4 	orhi	r4,r16,17727
81114de0:	81114ff4 	orhi	r4,r16,17727
81114de4:	81114fdc 	xori	r4,r16,17727
81114de8:	81114e28 	cmpgeui	r4,r16,17720
81114dec:	81114ff4 	orhi	r4,r16,17727
81114df0:	81114fdc 	xori	r4,r16,17727
81114df4:	81114ff4 	orhi	r4,r16,17727
81114df8:	81114e28 	cmpgeui	r4,r16,17720
81114dfc:	81115004 	addi	r4,r16,17728
81114e00:	81115004 	addi	r4,r16,17728
81114e04:	81115004 	addi	r4,r16,17728
81114e08:	81115220 	cmpeqi	r4,r16,17736
81114e0c:	2404b03a 	or	r2,r4,r16
81114e10:	10006f1e 	bne	r2,zero,81114fd0 <__muldf3+0x2f8>
81114e14:	04c00204 	movi	r19,8
81114e18:	0021883a 	mov	r16,zero
81114e1c:	0029883a 	mov	r20,zero
81114e20:	07000084 	movi	fp,2
81114e24:	003fcb06 	br	81114d54 <__reset+0xfb0f4d54>
81114e28:	502d883a 	mov	r22,r10
81114e2c:	00800084 	movi	r2,2
81114e30:	28805726 	beq	r5,r2,81114f90 <__muldf3+0x2b8>
81114e34:	008000c4 	movi	r2,3
81114e38:	28816626 	beq	r5,r2,811153d4 <__muldf3+0x6fc>
81114e3c:	00800044 	movi	r2,1
81114e40:	2881411e 	bne	r5,r2,81115348 <__muldf3+0x670>
81114e44:	b02b883a 	mov	r21,r22
81114e48:	0005883a 	mov	r2,zero
81114e4c:	000b883a 	mov	r5,zero
81114e50:	0029883a 	mov	r20,zero
81114e54:	1004953a 	slli	r2,r2,20
81114e58:	a8c03fcc 	andi	r3,r21,255
81114e5c:	04400434 	movhi	r17,16
81114e60:	8c7fffc4 	addi	r17,r17,-1
81114e64:	180697fa 	slli	r3,r3,31
81114e68:	2c4a703a 	and	r5,r5,r17
81114e6c:	288ab03a 	or	r5,r5,r2
81114e70:	28c6b03a 	or	r3,r5,r3
81114e74:	a005883a 	mov	r2,r20
81114e78:	dfc00c17 	ldw	ra,48(sp)
81114e7c:	df000b17 	ldw	fp,44(sp)
81114e80:	ddc00a17 	ldw	r23,40(sp)
81114e84:	dd800917 	ldw	r22,36(sp)
81114e88:	dd400817 	ldw	r21,32(sp)
81114e8c:	dd000717 	ldw	r20,28(sp)
81114e90:	dcc00617 	ldw	r19,24(sp)
81114e94:	dc800517 	ldw	r18,20(sp)
81114e98:	dc400417 	ldw	r17,16(sp)
81114e9c:	dc000317 	ldw	r16,12(sp)
81114ea0:	dec00d04 	addi	sp,sp,52
81114ea4:	f800283a 	ret
81114ea8:	2404b03a 	or	r2,r4,r16
81114eac:	2027883a 	mov	r19,r4
81114eb0:	10004226 	beq	r2,zero,81114fbc <__muldf3+0x2e4>
81114eb4:	8000fc26 	beq	r16,zero,811152a8 <__muldf3+0x5d0>
81114eb8:	8009883a 	mov	r4,r16
81114ebc:	d9800215 	stw	r6,8(sp)
81114ec0:	d9c00015 	stw	r7,0(sp)
81114ec4:	da400115 	stw	r9,4(sp)
81114ec8:	11160980 	call	81116098 <__clzsi2>
81114ecc:	d9800217 	ldw	r6,8(sp)
81114ed0:	d9c00017 	ldw	r7,0(sp)
81114ed4:	da400117 	ldw	r9,4(sp)
81114ed8:	113ffd44 	addi	r4,r2,-11
81114edc:	00c00704 	movi	r3,28
81114ee0:	1900ed16 	blt	r3,r4,81115298 <__muldf3+0x5c0>
81114ee4:	00c00744 	movi	r3,29
81114ee8:	147ffe04 	addi	r17,r2,-8
81114eec:	1907c83a 	sub	r3,r3,r4
81114ef0:	8460983a 	sll	r16,r16,r17
81114ef4:	98c6d83a 	srl	r3,r19,r3
81114ef8:	9c68983a 	sll	r20,r19,r17
81114efc:	1c20b03a 	or	r16,r3,r16
81114f00:	1080fcc4 	addi	r2,r2,1011
81114f04:	00a5c83a 	sub	r18,zero,r2
81114f08:	0027883a 	mov	r19,zero
81114f0c:	0039883a 	mov	fp,zero
81114f10:	003f9006 	br	81114d54 <__reset+0xfb0f4d54>
81114f14:	3446b03a 	or	r3,r6,r17
81114f18:	1800261e 	bne	r3,zero,81114fb4 <__muldf3+0x2dc>
81114f1c:	0023883a 	mov	r17,zero
81114f20:	0011883a 	mov	r8,zero
81114f24:	01400084 	movi	r5,2
81114f28:	003f9c06 	br	81114d9c <__reset+0xfb0f4d9c>
81114f2c:	3446b03a 	or	r3,r6,r17
81114f30:	18001c26 	beq	r3,zero,81114fa4 <__muldf3+0x2cc>
81114f34:	8800ce26 	beq	r17,zero,81115270 <__muldf3+0x598>
81114f38:	8809883a 	mov	r4,r17
81114f3c:	d9800215 	stw	r6,8(sp)
81114f40:	da400115 	stw	r9,4(sp)
81114f44:	da800015 	stw	r10,0(sp)
81114f48:	11160980 	call	81116098 <__clzsi2>
81114f4c:	d9800217 	ldw	r6,8(sp)
81114f50:	da400117 	ldw	r9,4(sp)
81114f54:	da800017 	ldw	r10,0(sp)
81114f58:	113ffd44 	addi	r4,r2,-11
81114f5c:	00c00704 	movi	r3,28
81114f60:	1900bf16 	blt	r3,r4,81115260 <__muldf3+0x588>
81114f64:	00c00744 	movi	r3,29
81114f68:	123ffe04 	addi	r8,r2,-8
81114f6c:	1907c83a 	sub	r3,r3,r4
81114f70:	8a22983a 	sll	r17,r17,r8
81114f74:	30c6d83a 	srl	r3,r6,r3
81114f78:	3210983a 	sll	r8,r6,r8
81114f7c:	1c62b03a 	or	r17,r3,r17
81114f80:	1080fcc4 	addi	r2,r2,1011
81114f84:	0085c83a 	sub	r2,zero,r2
81114f88:	000b883a 	mov	r5,zero
81114f8c:	003f8306 	br	81114d9c <__reset+0xfb0f4d9c>
81114f90:	b02b883a 	mov	r21,r22
81114f94:	0081ffc4 	movi	r2,2047
81114f98:	000b883a 	mov	r5,zero
81114f9c:	0029883a 	mov	r20,zero
81114fa0:	003fac06 	br	81114e54 <__reset+0xfb0f4e54>
81114fa4:	0023883a 	mov	r17,zero
81114fa8:	0011883a 	mov	r8,zero
81114fac:	01400044 	movi	r5,1
81114fb0:	003f7a06 	br	81114d9c <__reset+0xfb0f4d9c>
81114fb4:	014000c4 	movi	r5,3
81114fb8:	003f7806 	br	81114d9c <__reset+0xfb0f4d9c>
81114fbc:	04c00104 	movi	r19,4
81114fc0:	0021883a 	mov	r16,zero
81114fc4:	0029883a 	mov	r20,zero
81114fc8:	07000044 	movi	fp,1
81114fcc:	003f6106 	br	81114d54 <__reset+0xfb0f4d54>
81114fd0:	04c00304 	movi	r19,12
81114fd4:	070000c4 	movi	fp,3
81114fd8:	003f5e06 	br	81114d54 <__reset+0xfb0f4d54>
81114fdc:	01400434 	movhi	r5,16
81114fe0:	002b883a 	mov	r21,zero
81114fe4:	297fffc4 	addi	r5,r5,-1
81114fe8:	053fffc4 	movi	r20,-1
81114fec:	0081ffc4 	movi	r2,2047
81114ff0:	003f9806 	br	81114e54 <__reset+0xfb0f4e54>
81114ff4:	8023883a 	mov	r17,r16
81114ff8:	a011883a 	mov	r8,r20
81114ffc:	e00b883a 	mov	r5,fp
81115000:	003f8a06 	br	81114e2c <__reset+0xfb0f4e2c>
81115004:	8023883a 	mov	r17,r16
81115008:	a011883a 	mov	r8,r20
8111500c:	482d883a 	mov	r22,r9
81115010:	e00b883a 	mov	r5,fp
81115014:	003f8506 	br	81114e2c <__reset+0xfb0f4e2c>
81115018:	a00ad43a 	srli	r5,r20,16
8111501c:	401ad43a 	srli	r13,r8,16
81115020:	a53fffcc 	andi	r20,r20,65535
81115024:	423fffcc 	andi	r8,r8,65535
81115028:	4519383a 	mul	r12,r8,r20
8111502c:	4147383a 	mul	r3,r8,r5
81115030:	6d09383a 	mul	r4,r13,r20
81115034:	600cd43a 	srli	r6,r12,16
81115038:	2b5d383a 	mul	r14,r5,r13
8111503c:	20c9883a 	add	r4,r4,r3
81115040:	310d883a 	add	r6,r6,r4
81115044:	30c0022e 	bgeu	r6,r3,81115050 <__muldf3+0x378>
81115048:	00c00074 	movhi	r3,1
8111504c:	70dd883a 	add	r14,r14,r3
81115050:	8826d43a 	srli	r19,r17,16
81115054:	8bffffcc 	andi	r15,r17,65535
81115058:	7d23383a 	mul	r17,r15,r20
8111505c:	7949383a 	mul	r4,r15,r5
81115060:	9d29383a 	mul	r20,r19,r20
81115064:	8814d43a 	srli	r10,r17,16
81115068:	3012943a 	slli	r9,r6,16
8111506c:	a129883a 	add	r20,r20,r4
81115070:	633fffcc 	andi	r12,r12,65535
81115074:	5515883a 	add	r10,r10,r20
81115078:	3006d43a 	srli	r3,r6,16
8111507c:	4b13883a 	add	r9,r9,r12
81115080:	2ccb383a 	mul	r5,r5,r19
81115084:	5100022e 	bgeu	r10,r4,81115090 <__muldf3+0x3b8>
81115088:	01000074 	movhi	r4,1
8111508c:	290b883a 	add	r5,r5,r4
81115090:	802ad43a 	srli	r21,r16,16
81115094:	843fffcc 	andi	r16,r16,65535
81115098:	440d383a 	mul	r6,r8,r16
8111509c:	4565383a 	mul	r18,r8,r21
811150a0:	8349383a 	mul	r4,r16,r13
811150a4:	500e943a 	slli	r7,r10,16
811150a8:	3010d43a 	srli	r8,r6,16
811150ac:	5028d43a 	srli	r20,r10,16
811150b0:	2489883a 	add	r4,r4,r18
811150b4:	8abfffcc 	andi	r10,r17,65535
811150b8:	3a95883a 	add	r10,r7,r10
811150bc:	4119883a 	add	r12,r8,r4
811150c0:	a169883a 	add	r20,r20,r5
811150c4:	1a87883a 	add	r3,r3,r10
811150c8:	6d5b383a 	mul	r13,r13,r21
811150cc:	6480022e 	bgeu	r12,r18,811150d8 <__muldf3+0x400>
811150d0:	01000074 	movhi	r4,1
811150d4:	691b883a 	add	r13,r13,r4
811150d8:	7c25383a 	mul	r18,r15,r16
811150dc:	7d4b383a 	mul	r5,r15,r21
811150e0:	84cf383a 	mul	r7,r16,r19
811150e4:	901ed43a 	srli	r15,r18,16
811150e8:	6008d43a 	srli	r4,r12,16
811150ec:	6010943a 	slli	r8,r12,16
811150f0:	394f883a 	add	r7,r7,r5
811150f4:	333fffcc 	andi	r12,r6,65535
811150f8:	79df883a 	add	r15,r15,r7
811150fc:	235b883a 	add	r13,r4,r13
81115100:	9d63383a 	mul	r17,r19,r21
81115104:	4309883a 	add	r4,r8,r12
81115108:	7940022e 	bgeu	r15,r5,81115114 <__muldf3+0x43c>
8111510c:	01400074 	movhi	r5,1
81115110:	8963883a 	add	r17,r17,r5
81115114:	780a943a 	slli	r5,r15,16
81115118:	91bfffcc 	andi	r6,r18,65535
8111511c:	70c7883a 	add	r3,r14,r3
81115120:	298d883a 	add	r6,r5,r6
81115124:	1a8f803a 	cmpltu	r7,r3,r10
81115128:	350b883a 	add	r5,r6,r20
8111512c:	20c7883a 	add	r3,r4,r3
81115130:	3955883a 	add	r10,r7,r5
81115134:	1909803a 	cmpltu	r4,r3,r4
81115138:	6a91883a 	add	r8,r13,r10
8111513c:	780cd43a 	srli	r6,r15,16
81115140:	2219883a 	add	r12,r4,r8
81115144:	2d0b803a 	cmpltu	r5,r5,r20
81115148:	51cf803a 	cmpltu	r7,r10,r7
8111514c:	29ceb03a 	or	r7,r5,r7
81115150:	4351803a 	cmpltu	r8,r8,r13
81115154:	610b803a 	cmpltu	r5,r12,r4
81115158:	4148b03a 	or	r4,r8,r5
8111515c:	398f883a 	add	r7,r7,r6
81115160:	3909883a 	add	r4,r7,r4
81115164:	1810927a 	slli	r8,r3,9
81115168:	2449883a 	add	r4,r4,r17
8111516c:	2008927a 	slli	r4,r4,9
81115170:	6022d5fa 	srli	r17,r12,23
81115174:	1806d5fa 	srli	r3,r3,23
81115178:	4252b03a 	or	r9,r8,r9
8111517c:	600a927a 	slli	r5,r12,9
81115180:	4810c03a 	cmpne	r8,r9,zero
81115184:	2462b03a 	or	r17,r4,r17
81115188:	40c6b03a 	or	r3,r8,r3
8111518c:	8900402c 	andhi	r4,r17,256
81115190:	1950b03a 	or	r8,r3,r5
81115194:	20000726 	beq	r4,zero,811151b4 <__muldf3+0x4dc>
81115198:	4006d07a 	srli	r3,r8,1
8111519c:	880497fa 	slli	r2,r17,31
811151a0:	4200004c 	andi	r8,r8,1
811151a4:	8822d07a 	srli	r17,r17,1
811151a8:	1a10b03a 	or	r8,r3,r8
811151ac:	1210b03a 	or	r8,r2,r8
811151b0:	5805883a 	mov	r2,r11
811151b4:	1140ffc4 	addi	r5,r2,1023
811151b8:	0140440e 	bge	zero,r5,811152cc <__muldf3+0x5f4>
811151bc:	40c001cc 	andi	r3,r8,7
811151c0:	18000726 	beq	r3,zero,811151e0 <__muldf3+0x508>
811151c4:	40c003cc 	andi	r3,r8,15
811151c8:	01000104 	movi	r4,4
811151cc:	19000426 	beq	r3,r4,811151e0 <__muldf3+0x508>
811151d0:	4107883a 	add	r3,r8,r4
811151d4:	1a11803a 	cmpltu	r8,r3,r8
811151d8:	8a23883a 	add	r17,r17,r8
811151dc:	1811883a 	mov	r8,r3
811151e0:	88c0402c 	andhi	r3,r17,256
811151e4:	18000426 	beq	r3,zero,811151f8 <__muldf3+0x520>
811151e8:	11410004 	addi	r5,r2,1024
811151ec:	00bfc034 	movhi	r2,65280
811151f0:	10bfffc4 	addi	r2,r2,-1
811151f4:	88a2703a 	and	r17,r17,r2
811151f8:	0081ff84 	movi	r2,2046
811151fc:	117f6416 	blt	r2,r5,81114f90 <__reset+0xfb0f4f90>
81115200:	8828977a 	slli	r20,r17,29
81115204:	4010d0fa 	srli	r8,r8,3
81115208:	8822927a 	slli	r17,r17,9
8111520c:	2881ffcc 	andi	r2,r5,2047
81115210:	a228b03a 	or	r20,r20,r8
81115214:	880ad33a 	srli	r5,r17,12
81115218:	b02b883a 	mov	r21,r22
8111521c:	003f0d06 	br	81114e54 <__reset+0xfb0f4e54>
81115220:	8080022c 	andhi	r2,r16,8
81115224:	10000926 	beq	r2,zero,8111524c <__muldf3+0x574>
81115228:	8880022c 	andhi	r2,r17,8
8111522c:	1000071e 	bne	r2,zero,8111524c <__muldf3+0x574>
81115230:	00800434 	movhi	r2,16
81115234:	89400234 	orhi	r5,r17,8
81115238:	10bfffc4 	addi	r2,r2,-1
8111523c:	b82b883a 	mov	r21,r23
81115240:	288a703a 	and	r5,r5,r2
81115244:	4029883a 	mov	r20,r8
81115248:	003f6806 	br	81114fec <__reset+0xfb0f4fec>
8111524c:	00800434 	movhi	r2,16
81115250:	81400234 	orhi	r5,r16,8
81115254:	10bfffc4 	addi	r2,r2,-1
81115258:	288a703a 	and	r5,r5,r2
8111525c:	003f6306 	br	81114fec <__reset+0xfb0f4fec>
81115260:	147ff604 	addi	r17,r2,-40
81115264:	3462983a 	sll	r17,r6,r17
81115268:	0011883a 	mov	r8,zero
8111526c:	003f4406 	br	81114f80 <__reset+0xfb0f4f80>
81115270:	3009883a 	mov	r4,r6
81115274:	d9800215 	stw	r6,8(sp)
81115278:	da400115 	stw	r9,4(sp)
8111527c:	da800015 	stw	r10,0(sp)
81115280:	11160980 	call	81116098 <__clzsi2>
81115284:	10800804 	addi	r2,r2,32
81115288:	da800017 	ldw	r10,0(sp)
8111528c:	da400117 	ldw	r9,4(sp)
81115290:	d9800217 	ldw	r6,8(sp)
81115294:	003f3006 	br	81114f58 <__reset+0xfb0f4f58>
81115298:	143ff604 	addi	r16,r2,-40
8111529c:	9c20983a 	sll	r16,r19,r16
811152a0:	0029883a 	mov	r20,zero
811152a4:	003f1606 	br	81114f00 <__reset+0xfb0f4f00>
811152a8:	d9800215 	stw	r6,8(sp)
811152ac:	d9c00015 	stw	r7,0(sp)
811152b0:	da400115 	stw	r9,4(sp)
811152b4:	11160980 	call	81116098 <__clzsi2>
811152b8:	10800804 	addi	r2,r2,32
811152bc:	da400117 	ldw	r9,4(sp)
811152c0:	d9c00017 	ldw	r7,0(sp)
811152c4:	d9800217 	ldw	r6,8(sp)
811152c8:	003f0306 	br	81114ed8 <__reset+0xfb0f4ed8>
811152cc:	00c00044 	movi	r3,1
811152d0:	1947c83a 	sub	r3,r3,r5
811152d4:	00800e04 	movi	r2,56
811152d8:	10feda16 	blt	r2,r3,81114e44 <__reset+0xfb0f4e44>
811152dc:	008007c4 	movi	r2,31
811152e0:	10c01b16 	blt	r2,r3,81115350 <__muldf3+0x678>
811152e4:	00800804 	movi	r2,32
811152e8:	10c5c83a 	sub	r2,r2,r3
811152ec:	888a983a 	sll	r5,r17,r2
811152f0:	40c8d83a 	srl	r4,r8,r3
811152f4:	4084983a 	sll	r2,r8,r2
811152f8:	88e2d83a 	srl	r17,r17,r3
811152fc:	2906b03a 	or	r3,r5,r4
81115300:	1004c03a 	cmpne	r2,r2,zero
81115304:	1886b03a 	or	r3,r3,r2
81115308:	188001cc 	andi	r2,r3,7
8111530c:	10000726 	beq	r2,zero,8111532c <__muldf3+0x654>
81115310:	188003cc 	andi	r2,r3,15
81115314:	01000104 	movi	r4,4
81115318:	11000426 	beq	r2,r4,8111532c <__muldf3+0x654>
8111531c:	1805883a 	mov	r2,r3
81115320:	10c00104 	addi	r3,r2,4
81115324:	1885803a 	cmpltu	r2,r3,r2
81115328:	88a3883a 	add	r17,r17,r2
8111532c:	8880202c 	andhi	r2,r17,128
81115330:	10001c26 	beq	r2,zero,811153a4 <__muldf3+0x6cc>
81115334:	b02b883a 	mov	r21,r22
81115338:	00800044 	movi	r2,1
8111533c:	000b883a 	mov	r5,zero
81115340:	0029883a 	mov	r20,zero
81115344:	003ec306 	br	81114e54 <__reset+0xfb0f4e54>
81115348:	5805883a 	mov	r2,r11
8111534c:	003f9906 	br	811151b4 <__reset+0xfb0f51b4>
81115350:	00bff844 	movi	r2,-31
81115354:	1145c83a 	sub	r2,r2,r5
81115358:	8888d83a 	srl	r4,r17,r2
8111535c:	00800804 	movi	r2,32
81115360:	18801a26 	beq	r3,r2,811153cc <__muldf3+0x6f4>
81115364:	00801004 	movi	r2,64
81115368:	10c5c83a 	sub	r2,r2,r3
8111536c:	8884983a 	sll	r2,r17,r2
81115370:	1204b03a 	or	r2,r2,r8
81115374:	1004c03a 	cmpne	r2,r2,zero
81115378:	2084b03a 	or	r2,r4,r2
8111537c:	144001cc 	andi	r17,r2,7
81115380:	88000d1e 	bne	r17,zero,811153b8 <__muldf3+0x6e0>
81115384:	000b883a 	mov	r5,zero
81115388:	1028d0fa 	srli	r20,r2,3
8111538c:	b02b883a 	mov	r21,r22
81115390:	0005883a 	mov	r2,zero
81115394:	a468b03a 	or	r20,r20,r17
81115398:	003eae06 	br	81114e54 <__reset+0xfb0f4e54>
8111539c:	1007883a 	mov	r3,r2
811153a0:	0023883a 	mov	r17,zero
811153a4:	880a927a 	slli	r5,r17,9
811153a8:	1805883a 	mov	r2,r3
811153ac:	8822977a 	slli	r17,r17,29
811153b0:	280ad33a 	srli	r5,r5,12
811153b4:	003ff406 	br	81115388 <__reset+0xfb0f5388>
811153b8:	10c003cc 	andi	r3,r2,15
811153bc:	01000104 	movi	r4,4
811153c0:	193ff626 	beq	r3,r4,8111539c <__reset+0xfb0f539c>
811153c4:	0023883a 	mov	r17,zero
811153c8:	003fd506 	br	81115320 <__reset+0xfb0f5320>
811153cc:	0005883a 	mov	r2,zero
811153d0:	003fe706 	br	81115370 <__reset+0xfb0f5370>
811153d4:	00800434 	movhi	r2,16
811153d8:	89400234 	orhi	r5,r17,8
811153dc:	10bfffc4 	addi	r2,r2,-1
811153e0:	b02b883a 	mov	r21,r22
811153e4:	288a703a 	and	r5,r5,r2
811153e8:	4029883a 	mov	r20,r8
811153ec:	003eff06 	br	81114fec <__reset+0xfb0f4fec>

811153f0 <__subdf3>:
811153f0:	02000434 	movhi	r8,16
811153f4:	423fffc4 	addi	r8,r8,-1
811153f8:	defffb04 	addi	sp,sp,-20
811153fc:	2a14703a 	and	r10,r5,r8
81115400:	3812d53a 	srli	r9,r7,20
81115404:	3a10703a 	and	r8,r7,r8
81115408:	2006d77a 	srli	r3,r4,29
8111540c:	3004d77a 	srli	r2,r6,29
81115410:	dc000015 	stw	r16,0(sp)
81115414:	501490fa 	slli	r10,r10,3
81115418:	2820d53a 	srli	r16,r5,20
8111541c:	401090fa 	slli	r8,r8,3
81115420:	dc800215 	stw	r18,8(sp)
81115424:	dc400115 	stw	r17,4(sp)
81115428:	dfc00415 	stw	ra,16(sp)
8111542c:	202290fa 	slli	r17,r4,3
81115430:	dcc00315 	stw	r19,12(sp)
81115434:	4a41ffcc 	andi	r9,r9,2047
81115438:	0101ffc4 	movi	r4,2047
8111543c:	2824d7fa 	srli	r18,r5,31
81115440:	8401ffcc 	andi	r16,r16,2047
81115444:	50c6b03a 	or	r3,r10,r3
81115448:	380ed7fa 	srli	r7,r7,31
8111544c:	408ab03a 	or	r5,r8,r2
81115450:	300c90fa 	slli	r6,r6,3
81115454:	49009626 	beq	r9,r4,811156b0 <__subdf3+0x2c0>
81115458:	39c0005c 	xori	r7,r7,1
8111545c:	8245c83a 	sub	r2,r16,r9
81115460:	3c807426 	beq	r7,r18,81115634 <__subdf3+0x244>
81115464:	0080af0e 	bge	zero,r2,81115724 <__subdf3+0x334>
81115468:	48002a1e 	bne	r9,zero,81115514 <__subdf3+0x124>
8111546c:	2988b03a 	or	r4,r5,r6
81115470:	20009a1e 	bne	r4,zero,811156dc <__subdf3+0x2ec>
81115474:	888001cc 	andi	r2,r17,7
81115478:	10000726 	beq	r2,zero,81115498 <__subdf3+0xa8>
8111547c:	888003cc 	andi	r2,r17,15
81115480:	01000104 	movi	r4,4
81115484:	11000426 	beq	r2,r4,81115498 <__subdf3+0xa8>
81115488:	890b883a 	add	r5,r17,r4
8111548c:	2c63803a 	cmpltu	r17,r5,r17
81115490:	1c47883a 	add	r3,r3,r17
81115494:	2823883a 	mov	r17,r5
81115498:	1880202c 	andhi	r2,r3,128
8111549c:	10005926 	beq	r2,zero,81115604 <__subdf3+0x214>
811154a0:	84000044 	addi	r16,r16,1
811154a4:	0081ffc4 	movi	r2,2047
811154a8:	8080be26 	beq	r16,r2,811157a4 <__subdf3+0x3b4>
811154ac:	017fe034 	movhi	r5,65408
811154b0:	297fffc4 	addi	r5,r5,-1
811154b4:	1946703a 	and	r3,r3,r5
811154b8:	1804977a 	slli	r2,r3,29
811154bc:	1806927a 	slli	r3,r3,9
811154c0:	8822d0fa 	srli	r17,r17,3
811154c4:	8401ffcc 	andi	r16,r16,2047
811154c8:	180ad33a 	srli	r5,r3,12
811154cc:	9100004c 	andi	r4,r18,1
811154d0:	1444b03a 	or	r2,r2,r17
811154d4:	80c1ffcc 	andi	r3,r16,2047
811154d8:	1820953a 	slli	r16,r3,20
811154dc:	20c03fcc 	andi	r3,r4,255
811154e0:	180897fa 	slli	r4,r3,31
811154e4:	00c00434 	movhi	r3,16
811154e8:	18ffffc4 	addi	r3,r3,-1
811154ec:	28c6703a 	and	r3,r5,r3
811154f0:	1c06b03a 	or	r3,r3,r16
811154f4:	1906b03a 	or	r3,r3,r4
811154f8:	dfc00417 	ldw	ra,16(sp)
811154fc:	dcc00317 	ldw	r19,12(sp)
81115500:	dc800217 	ldw	r18,8(sp)
81115504:	dc400117 	ldw	r17,4(sp)
81115508:	dc000017 	ldw	r16,0(sp)
8111550c:	dec00504 	addi	sp,sp,20
81115510:	f800283a 	ret
81115514:	0101ffc4 	movi	r4,2047
81115518:	813fd626 	beq	r16,r4,81115474 <__reset+0xfb0f5474>
8111551c:	29402034 	orhi	r5,r5,128
81115520:	01000e04 	movi	r4,56
81115524:	2080a316 	blt	r4,r2,811157b4 <__subdf3+0x3c4>
81115528:	010007c4 	movi	r4,31
8111552c:	2080c616 	blt	r4,r2,81115848 <__subdf3+0x458>
81115530:	01000804 	movi	r4,32
81115534:	2089c83a 	sub	r4,r4,r2
81115538:	2910983a 	sll	r8,r5,r4
8111553c:	308ed83a 	srl	r7,r6,r2
81115540:	3108983a 	sll	r4,r6,r4
81115544:	2884d83a 	srl	r2,r5,r2
81115548:	41ccb03a 	or	r6,r8,r7
8111554c:	2008c03a 	cmpne	r4,r4,zero
81115550:	310cb03a 	or	r6,r6,r4
81115554:	898dc83a 	sub	r6,r17,r6
81115558:	89a3803a 	cmpltu	r17,r17,r6
8111555c:	1887c83a 	sub	r3,r3,r2
81115560:	1c47c83a 	sub	r3,r3,r17
81115564:	3023883a 	mov	r17,r6
81115568:	1880202c 	andhi	r2,r3,128
8111556c:	10002326 	beq	r2,zero,811155fc <__subdf3+0x20c>
81115570:	04c02034 	movhi	r19,128
81115574:	9cffffc4 	addi	r19,r19,-1
81115578:	1ce6703a 	and	r19,r3,r19
8111557c:	98007a26 	beq	r19,zero,81115768 <__subdf3+0x378>
81115580:	9809883a 	mov	r4,r19
81115584:	11160980 	call	81116098 <__clzsi2>
81115588:	113ffe04 	addi	r4,r2,-8
8111558c:	00c007c4 	movi	r3,31
81115590:	19007b16 	blt	r3,r4,81115780 <__subdf3+0x390>
81115594:	00800804 	movi	r2,32
81115598:	1105c83a 	sub	r2,r2,r4
8111559c:	8884d83a 	srl	r2,r17,r2
811155a0:	9906983a 	sll	r3,r19,r4
811155a4:	8922983a 	sll	r17,r17,r4
811155a8:	10c4b03a 	or	r2,r2,r3
811155ac:	24007816 	blt	r4,r16,81115790 <__subdf3+0x3a0>
811155b0:	2421c83a 	sub	r16,r4,r16
811155b4:	80c00044 	addi	r3,r16,1
811155b8:	010007c4 	movi	r4,31
811155bc:	20c09516 	blt	r4,r3,81115814 <__subdf3+0x424>
811155c0:	01400804 	movi	r5,32
811155c4:	28cbc83a 	sub	r5,r5,r3
811155c8:	88c8d83a 	srl	r4,r17,r3
811155cc:	8962983a 	sll	r17,r17,r5
811155d0:	114a983a 	sll	r5,r2,r5
811155d4:	10c6d83a 	srl	r3,r2,r3
811155d8:	8804c03a 	cmpne	r2,r17,zero
811155dc:	290ab03a 	or	r5,r5,r4
811155e0:	28a2b03a 	or	r17,r5,r2
811155e4:	0021883a 	mov	r16,zero
811155e8:	003fa206 	br	81115474 <__reset+0xfb0f5474>
811155ec:	2090b03a 	or	r8,r4,r2
811155f0:	40018e26 	beq	r8,zero,81115c2c <__subdf3+0x83c>
811155f4:	1007883a 	mov	r3,r2
811155f8:	2023883a 	mov	r17,r4
811155fc:	888001cc 	andi	r2,r17,7
81115600:	103f9e1e 	bne	r2,zero,8111547c <__reset+0xfb0f547c>
81115604:	1804977a 	slli	r2,r3,29
81115608:	8822d0fa 	srli	r17,r17,3
8111560c:	1810d0fa 	srli	r8,r3,3
81115610:	9100004c 	andi	r4,r18,1
81115614:	1444b03a 	or	r2,r2,r17
81115618:	00c1ffc4 	movi	r3,2047
8111561c:	80c02826 	beq	r16,r3,811156c0 <__subdf3+0x2d0>
81115620:	01400434 	movhi	r5,16
81115624:	297fffc4 	addi	r5,r5,-1
81115628:	80e0703a 	and	r16,r16,r3
8111562c:	414a703a 	and	r5,r8,r5
81115630:	003fa806 	br	811154d4 <__reset+0xfb0f54d4>
81115634:	0080630e 	bge	zero,r2,811157c4 <__subdf3+0x3d4>
81115638:	48003026 	beq	r9,zero,811156fc <__subdf3+0x30c>
8111563c:	0101ffc4 	movi	r4,2047
81115640:	813f8c26 	beq	r16,r4,81115474 <__reset+0xfb0f5474>
81115644:	29402034 	orhi	r5,r5,128
81115648:	01000e04 	movi	r4,56
8111564c:	2080a90e 	bge	r4,r2,811158f4 <__subdf3+0x504>
81115650:	298cb03a 	or	r6,r5,r6
81115654:	3012c03a 	cmpne	r9,r6,zero
81115658:	0005883a 	mov	r2,zero
8111565c:	4c53883a 	add	r9,r9,r17
81115660:	4c63803a 	cmpltu	r17,r9,r17
81115664:	10c7883a 	add	r3,r2,r3
81115668:	88c7883a 	add	r3,r17,r3
8111566c:	4823883a 	mov	r17,r9
81115670:	1880202c 	andhi	r2,r3,128
81115674:	1000d026 	beq	r2,zero,811159b8 <__subdf3+0x5c8>
81115678:	84000044 	addi	r16,r16,1
8111567c:	0081ffc4 	movi	r2,2047
81115680:	8080fe26 	beq	r16,r2,81115a7c <__subdf3+0x68c>
81115684:	00bfe034 	movhi	r2,65408
81115688:	10bfffc4 	addi	r2,r2,-1
8111568c:	1886703a 	and	r3,r3,r2
81115690:	880ad07a 	srli	r5,r17,1
81115694:	180497fa 	slli	r2,r3,31
81115698:	8900004c 	andi	r4,r17,1
8111569c:	2922b03a 	or	r17,r5,r4
811156a0:	1806d07a 	srli	r3,r3,1
811156a4:	1462b03a 	or	r17,r2,r17
811156a8:	3825883a 	mov	r18,r7
811156ac:	003f7106 	br	81115474 <__reset+0xfb0f5474>
811156b0:	2984b03a 	or	r2,r5,r6
811156b4:	103f6826 	beq	r2,zero,81115458 <__reset+0xfb0f5458>
811156b8:	39c03fcc 	andi	r7,r7,255
811156bc:	003f6706 	br	8111545c <__reset+0xfb0f545c>
811156c0:	4086b03a 	or	r3,r8,r2
811156c4:	18015226 	beq	r3,zero,81115c10 <__subdf3+0x820>
811156c8:	00c00434 	movhi	r3,16
811156cc:	41400234 	orhi	r5,r8,8
811156d0:	18ffffc4 	addi	r3,r3,-1
811156d4:	28ca703a 	and	r5,r5,r3
811156d8:	003f7e06 	br	811154d4 <__reset+0xfb0f54d4>
811156dc:	10bfffc4 	addi	r2,r2,-1
811156e0:	1000491e 	bne	r2,zero,81115808 <__subdf3+0x418>
811156e4:	898fc83a 	sub	r7,r17,r6
811156e8:	89e3803a 	cmpltu	r17,r17,r7
811156ec:	1947c83a 	sub	r3,r3,r5
811156f0:	1c47c83a 	sub	r3,r3,r17
811156f4:	3823883a 	mov	r17,r7
811156f8:	003f9b06 	br	81115568 <__reset+0xfb0f5568>
811156fc:	2988b03a 	or	r4,r5,r6
81115700:	203f5c26 	beq	r4,zero,81115474 <__reset+0xfb0f5474>
81115704:	10bfffc4 	addi	r2,r2,-1
81115708:	1000931e 	bne	r2,zero,81115958 <__subdf3+0x568>
8111570c:	898d883a 	add	r6,r17,r6
81115710:	3463803a 	cmpltu	r17,r6,r17
81115714:	1947883a 	add	r3,r3,r5
81115718:	88c7883a 	add	r3,r17,r3
8111571c:	3023883a 	mov	r17,r6
81115720:	003fd306 	br	81115670 <__reset+0xfb0f5670>
81115724:	1000541e 	bne	r2,zero,81115878 <__subdf3+0x488>
81115728:	80800044 	addi	r2,r16,1
8111572c:	1081ffcc 	andi	r2,r2,2047
81115730:	01000044 	movi	r4,1
81115734:	2080a20e 	bge	r4,r2,811159c0 <__subdf3+0x5d0>
81115738:	8989c83a 	sub	r4,r17,r6
8111573c:	8905803a 	cmpltu	r2,r17,r4
81115740:	1967c83a 	sub	r19,r3,r5
81115744:	98a7c83a 	sub	r19,r19,r2
81115748:	9880202c 	andhi	r2,r19,128
8111574c:	10006326 	beq	r2,zero,811158dc <__subdf3+0x4ec>
81115750:	3463c83a 	sub	r17,r6,r17
81115754:	28c7c83a 	sub	r3,r5,r3
81115758:	344d803a 	cmpltu	r6,r6,r17
8111575c:	19a7c83a 	sub	r19,r3,r6
81115760:	3825883a 	mov	r18,r7
81115764:	983f861e 	bne	r19,zero,81115580 <__reset+0xfb0f5580>
81115768:	8809883a 	mov	r4,r17
8111576c:	11160980 	call	81116098 <__clzsi2>
81115770:	10800804 	addi	r2,r2,32
81115774:	113ffe04 	addi	r4,r2,-8
81115778:	00c007c4 	movi	r3,31
8111577c:	193f850e 	bge	r3,r4,81115594 <__reset+0xfb0f5594>
81115780:	10bff604 	addi	r2,r2,-40
81115784:	8884983a 	sll	r2,r17,r2
81115788:	0023883a 	mov	r17,zero
8111578c:	243f880e 	bge	r4,r16,811155b0 <__reset+0xfb0f55b0>
81115790:	00ffe034 	movhi	r3,65408
81115794:	18ffffc4 	addi	r3,r3,-1
81115798:	8121c83a 	sub	r16,r16,r4
8111579c:	10c6703a 	and	r3,r2,r3
811157a0:	003f3406 	br	81115474 <__reset+0xfb0f5474>
811157a4:	9100004c 	andi	r4,r18,1
811157a8:	000b883a 	mov	r5,zero
811157ac:	0005883a 	mov	r2,zero
811157b0:	003f4806 	br	811154d4 <__reset+0xfb0f54d4>
811157b4:	298cb03a 	or	r6,r5,r6
811157b8:	300cc03a 	cmpne	r6,r6,zero
811157bc:	0005883a 	mov	r2,zero
811157c0:	003f6406 	br	81115554 <__reset+0xfb0f5554>
811157c4:	10009a1e 	bne	r2,zero,81115a30 <__subdf3+0x640>
811157c8:	82400044 	addi	r9,r16,1
811157cc:	4881ffcc 	andi	r2,r9,2047
811157d0:	02800044 	movi	r10,1
811157d4:	5080670e 	bge	r10,r2,81115974 <__subdf3+0x584>
811157d8:	0081ffc4 	movi	r2,2047
811157dc:	4880af26 	beq	r9,r2,81115a9c <__subdf3+0x6ac>
811157e0:	898d883a 	add	r6,r17,r6
811157e4:	1945883a 	add	r2,r3,r5
811157e8:	3447803a 	cmpltu	r3,r6,r17
811157ec:	1887883a 	add	r3,r3,r2
811157f0:	182297fa 	slli	r17,r3,31
811157f4:	300cd07a 	srli	r6,r6,1
811157f8:	1806d07a 	srli	r3,r3,1
811157fc:	4821883a 	mov	r16,r9
81115800:	89a2b03a 	or	r17,r17,r6
81115804:	003f1b06 	br	81115474 <__reset+0xfb0f5474>
81115808:	0101ffc4 	movi	r4,2047
8111580c:	813f441e 	bne	r16,r4,81115520 <__reset+0xfb0f5520>
81115810:	003f1806 	br	81115474 <__reset+0xfb0f5474>
81115814:	843ff844 	addi	r16,r16,-31
81115818:	01400804 	movi	r5,32
8111581c:	1408d83a 	srl	r4,r2,r16
81115820:	19405026 	beq	r3,r5,81115964 <__subdf3+0x574>
81115824:	01401004 	movi	r5,64
81115828:	28c7c83a 	sub	r3,r5,r3
8111582c:	10c4983a 	sll	r2,r2,r3
81115830:	88a2b03a 	or	r17,r17,r2
81115834:	8822c03a 	cmpne	r17,r17,zero
81115838:	2462b03a 	or	r17,r4,r17
8111583c:	0007883a 	mov	r3,zero
81115840:	0021883a 	mov	r16,zero
81115844:	003f6d06 	br	811155fc <__reset+0xfb0f55fc>
81115848:	11fff804 	addi	r7,r2,-32
8111584c:	01000804 	movi	r4,32
81115850:	29ced83a 	srl	r7,r5,r7
81115854:	11004526 	beq	r2,r4,8111596c <__subdf3+0x57c>
81115858:	01001004 	movi	r4,64
8111585c:	2089c83a 	sub	r4,r4,r2
81115860:	2904983a 	sll	r2,r5,r4
81115864:	118cb03a 	or	r6,r2,r6
81115868:	300cc03a 	cmpne	r6,r6,zero
8111586c:	398cb03a 	or	r6,r7,r6
81115870:	0005883a 	mov	r2,zero
81115874:	003f3706 	br	81115554 <__reset+0xfb0f5554>
81115878:	80002a26 	beq	r16,zero,81115924 <__subdf3+0x534>
8111587c:	0101ffc4 	movi	r4,2047
81115880:	49006626 	beq	r9,r4,81115a1c <__subdf3+0x62c>
81115884:	0085c83a 	sub	r2,zero,r2
81115888:	18c02034 	orhi	r3,r3,128
8111588c:	01000e04 	movi	r4,56
81115890:	20807e16 	blt	r4,r2,81115a8c <__subdf3+0x69c>
81115894:	010007c4 	movi	r4,31
81115898:	2080e716 	blt	r4,r2,81115c38 <__subdf3+0x848>
8111589c:	01000804 	movi	r4,32
811158a0:	2089c83a 	sub	r4,r4,r2
811158a4:	1914983a 	sll	r10,r3,r4
811158a8:	8890d83a 	srl	r8,r17,r2
811158ac:	8908983a 	sll	r4,r17,r4
811158b0:	1884d83a 	srl	r2,r3,r2
811158b4:	5222b03a 	or	r17,r10,r8
811158b8:	2006c03a 	cmpne	r3,r4,zero
811158bc:	88e2b03a 	or	r17,r17,r3
811158c0:	3463c83a 	sub	r17,r6,r17
811158c4:	2885c83a 	sub	r2,r5,r2
811158c8:	344d803a 	cmpltu	r6,r6,r17
811158cc:	1187c83a 	sub	r3,r2,r6
811158d0:	4821883a 	mov	r16,r9
811158d4:	3825883a 	mov	r18,r7
811158d8:	003f2306 	br	81115568 <__reset+0xfb0f5568>
811158dc:	24d0b03a 	or	r8,r4,r19
811158e0:	40001b1e 	bne	r8,zero,81115950 <__subdf3+0x560>
811158e4:	0005883a 	mov	r2,zero
811158e8:	0009883a 	mov	r4,zero
811158ec:	0021883a 	mov	r16,zero
811158f0:	003f4906 	br	81115618 <__reset+0xfb0f5618>
811158f4:	010007c4 	movi	r4,31
811158f8:	20803a16 	blt	r4,r2,811159e4 <__subdf3+0x5f4>
811158fc:	01000804 	movi	r4,32
81115900:	2089c83a 	sub	r4,r4,r2
81115904:	2912983a 	sll	r9,r5,r4
81115908:	3090d83a 	srl	r8,r6,r2
8111590c:	3108983a 	sll	r4,r6,r4
81115910:	2884d83a 	srl	r2,r5,r2
81115914:	4a12b03a 	or	r9,r9,r8
81115918:	2008c03a 	cmpne	r4,r4,zero
8111591c:	4912b03a 	or	r9,r9,r4
81115920:	003f4e06 	br	8111565c <__reset+0xfb0f565c>
81115924:	1c48b03a 	or	r4,r3,r17
81115928:	20003c26 	beq	r4,zero,81115a1c <__subdf3+0x62c>
8111592c:	0084303a 	nor	r2,zero,r2
81115930:	1000381e 	bne	r2,zero,81115a14 <__subdf3+0x624>
81115934:	3463c83a 	sub	r17,r6,r17
81115938:	28c5c83a 	sub	r2,r5,r3
8111593c:	344d803a 	cmpltu	r6,r6,r17
81115940:	1187c83a 	sub	r3,r2,r6
81115944:	4821883a 	mov	r16,r9
81115948:	3825883a 	mov	r18,r7
8111594c:	003f0606 	br	81115568 <__reset+0xfb0f5568>
81115950:	2023883a 	mov	r17,r4
81115954:	003f0906 	br	8111557c <__reset+0xfb0f557c>
81115958:	0101ffc4 	movi	r4,2047
8111595c:	813f3a1e 	bne	r16,r4,81115648 <__reset+0xfb0f5648>
81115960:	003ec406 	br	81115474 <__reset+0xfb0f5474>
81115964:	0005883a 	mov	r2,zero
81115968:	003fb106 	br	81115830 <__reset+0xfb0f5830>
8111596c:	0005883a 	mov	r2,zero
81115970:	003fbc06 	br	81115864 <__reset+0xfb0f5864>
81115974:	1c44b03a 	or	r2,r3,r17
81115978:	80008e1e 	bne	r16,zero,81115bb4 <__subdf3+0x7c4>
8111597c:	1000c826 	beq	r2,zero,81115ca0 <__subdf3+0x8b0>
81115980:	2984b03a 	or	r2,r5,r6
81115984:	103ebb26 	beq	r2,zero,81115474 <__reset+0xfb0f5474>
81115988:	8989883a 	add	r4,r17,r6
8111598c:	1945883a 	add	r2,r3,r5
81115990:	2447803a 	cmpltu	r3,r4,r17
81115994:	1887883a 	add	r3,r3,r2
81115998:	1880202c 	andhi	r2,r3,128
8111599c:	2023883a 	mov	r17,r4
811159a0:	103f1626 	beq	r2,zero,811155fc <__reset+0xfb0f55fc>
811159a4:	00bfe034 	movhi	r2,65408
811159a8:	10bfffc4 	addi	r2,r2,-1
811159ac:	5021883a 	mov	r16,r10
811159b0:	1886703a 	and	r3,r3,r2
811159b4:	003eaf06 	br	81115474 <__reset+0xfb0f5474>
811159b8:	3825883a 	mov	r18,r7
811159bc:	003f0f06 	br	811155fc <__reset+0xfb0f55fc>
811159c0:	1c44b03a 	or	r2,r3,r17
811159c4:	8000251e 	bne	r16,zero,81115a5c <__subdf3+0x66c>
811159c8:	1000661e 	bne	r2,zero,81115b64 <__subdf3+0x774>
811159cc:	2990b03a 	or	r8,r5,r6
811159d0:	40009626 	beq	r8,zero,81115c2c <__subdf3+0x83c>
811159d4:	2807883a 	mov	r3,r5
811159d8:	3023883a 	mov	r17,r6
811159dc:	3825883a 	mov	r18,r7
811159e0:	003ea406 	br	81115474 <__reset+0xfb0f5474>
811159e4:	127ff804 	addi	r9,r2,-32
811159e8:	01000804 	movi	r4,32
811159ec:	2a52d83a 	srl	r9,r5,r9
811159f0:	11008c26 	beq	r2,r4,81115c24 <__subdf3+0x834>
811159f4:	01001004 	movi	r4,64
811159f8:	2085c83a 	sub	r2,r4,r2
811159fc:	2884983a 	sll	r2,r5,r2
81115a00:	118cb03a 	or	r6,r2,r6
81115a04:	300cc03a 	cmpne	r6,r6,zero
81115a08:	4992b03a 	or	r9,r9,r6
81115a0c:	0005883a 	mov	r2,zero
81115a10:	003f1206 	br	8111565c <__reset+0xfb0f565c>
81115a14:	0101ffc4 	movi	r4,2047
81115a18:	493f9c1e 	bne	r9,r4,8111588c <__reset+0xfb0f588c>
81115a1c:	2807883a 	mov	r3,r5
81115a20:	3023883a 	mov	r17,r6
81115a24:	4821883a 	mov	r16,r9
81115a28:	3825883a 	mov	r18,r7
81115a2c:	003e9106 	br	81115474 <__reset+0xfb0f5474>
81115a30:	80001f1e 	bne	r16,zero,81115ab0 <__subdf3+0x6c0>
81115a34:	1c48b03a 	or	r4,r3,r17
81115a38:	20005a26 	beq	r4,zero,81115ba4 <__subdf3+0x7b4>
81115a3c:	0084303a 	nor	r2,zero,r2
81115a40:	1000561e 	bne	r2,zero,81115b9c <__subdf3+0x7ac>
81115a44:	89a3883a 	add	r17,r17,r6
81115a48:	1945883a 	add	r2,r3,r5
81115a4c:	898d803a 	cmpltu	r6,r17,r6
81115a50:	3087883a 	add	r3,r6,r2
81115a54:	4821883a 	mov	r16,r9
81115a58:	003f0506 	br	81115670 <__reset+0xfb0f5670>
81115a5c:	10002b1e 	bne	r2,zero,81115b0c <__subdf3+0x71c>
81115a60:	2984b03a 	or	r2,r5,r6
81115a64:	10008026 	beq	r2,zero,81115c68 <__subdf3+0x878>
81115a68:	2807883a 	mov	r3,r5
81115a6c:	3023883a 	mov	r17,r6
81115a70:	3825883a 	mov	r18,r7
81115a74:	0401ffc4 	movi	r16,2047
81115a78:	003e7e06 	br	81115474 <__reset+0xfb0f5474>
81115a7c:	3809883a 	mov	r4,r7
81115a80:	0011883a 	mov	r8,zero
81115a84:	0005883a 	mov	r2,zero
81115a88:	003ee306 	br	81115618 <__reset+0xfb0f5618>
81115a8c:	1c62b03a 	or	r17,r3,r17
81115a90:	8822c03a 	cmpne	r17,r17,zero
81115a94:	0005883a 	mov	r2,zero
81115a98:	003f8906 	br	811158c0 <__reset+0xfb0f58c0>
81115a9c:	3809883a 	mov	r4,r7
81115aa0:	4821883a 	mov	r16,r9
81115aa4:	0011883a 	mov	r8,zero
81115aa8:	0005883a 	mov	r2,zero
81115aac:	003eda06 	br	81115618 <__reset+0xfb0f5618>
81115ab0:	0101ffc4 	movi	r4,2047
81115ab4:	49003b26 	beq	r9,r4,81115ba4 <__subdf3+0x7b4>
81115ab8:	0085c83a 	sub	r2,zero,r2
81115abc:	18c02034 	orhi	r3,r3,128
81115ac0:	01000e04 	movi	r4,56
81115ac4:	20806e16 	blt	r4,r2,81115c80 <__subdf3+0x890>
81115ac8:	010007c4 	movi	r4,31
81115acc:	20807716 	blt	r4,r2,81115cac <__subdf3+0x8bc>
81115ad0:	01000804 	movi	r4,32
81115ad4:	2089c83a 	sub	r4,r4,r2
81115ad8:	1914983a 	sll	r10,r3,r4
81115adc:	8890d83a 	srl	r8,r17,r2
81115ae0:	8908983a 	sll	r4,r17,r4
81115ae4:	1884d83a 	srl	r2,r3,r2
81115ae8:	5222b03a 	or	r17,r10,r8
81115aec:	2006c03a 	cmpne	r3,r4,zero
81115af0:	88e2b03a 	or	r17,r17,r3
81115af4:	89a3883a 	add	r17,r17,r6
81115af8:	1145883a 	add	r2,r2,r5
81115afc:	898d803a 	cmpltu	r6,r17,r6
81115b00:	3087883a 	add	r3,r6,r2
81115b04:	4821883a 	mov	r16,r9
81115b08:	003ed906 	br	81115670 <__reset+0xfb0f5670>
81115b0c:	2984b03a 	or	r2,r5,r6
81115b10:	10004226 	beq	r2,zero,81115c1c <__subdf3+0x82c>
81115b14:	1808d0fa 	srli	r4,r3,3
81115b18:	8822d0fa 	srli	r17,r17,3
81115b1c:	1806977a 	slli	r3,r3,29
81115b20:	2080022c 	andhi	r2,r4,8
81115b24:	1c62b03a 	or	r17,r3,r17
81115b28:	10000826 	beq	r2,zero,81115b4c <__subdf3+0x75c>
81115b2c:	2812d0fa 	srli	r9,r5,3
81115b30:	4880022c 	andhi	r2,r9,8
81115b34:	1000051e 	bne	r2,zero,81115b4c <__subdf3+0x75c>
81115b38:	300cd0fa 	srli	r6,r6,3
81115b3c:	2804977a 	slli	r2,r5,29
81115b40:	4809883a 	mov	r4,r9
81115b44:	3825883a 	mov	r18,r7
81115b48:	11a2b03a 	or	r17,r2,r6
81115b4c:	8806d77a 	srli	r3,r17,29
81115b50:	200890fa 	slli	r4,r4,3
81115b54:	882290fa 	slli	r17,r17,3
81115b58:	0401ffc4 	movi	r16,2047
81115b5c:	1906b03a 	or	r3,r3,r4
81115b60:	003e4406 	br	81115474 <__reset+0xfb0f5474>
81115b64:	2984b03a 	or	r2,r5,r6
81115b68:	103e4226 	beq	r2,zero,81115474 <__reset+0xfb0f5474>
81115b6c:	8989c83a 	sub	r4,r17,r6
81115b70:	8911803a 	cmpltu	r8,r17,r4
81115b74:	1945c83a 	sub	r2,r3,r5
81115b78:	1205c83a 	sub	r2,r2,r8
81115b7c:	1200202c 	andhi	r8,r2,128
81115b80:	403e9a26 	beq	r8,zero,811155ec <__reset+0xfb0f55ec>
81115b84:	3463c83a 	sub	r17,r6,r17
81115b88:	28c5c83a 	sub	r2,r5,r3
81115b8c:	344d803a 	cmpltu	r6,r6,r17
81115b90:	1187c83a 	sub	r3,r2,r6
81115b94:	3825883a 	mov	r18,r7
81115b98:	003e3606 	br	81115474 <__reset+0xfb0f5474>
81115b9c:	0101ffc4 	movi	r4,2047
81115ba0:	493fc71e 	bne	r9,r4,81115ac0 <__reset+0xfb0f5ac0>
81115ba4:	2807883a 	mov	r3,r5
81115ba8:	3023883a 	mov	r17,r6
81115bac:	4821883a 	mov	r16,r9
81115bb0:	003e3006 	br	81115474 <__reset+0xfb0f5474>
81115bb4:	10003626 	beq	r2,zero,81115c90 <__subdf3+0x8a0>
81115bb8:	2984b03a 	or	r2,r5,r6
81115bbc:	10001726 	beq	r2,zero,81115c1c <__subdf3+0x82c>
81115bc0:	1808d0fa 	srli	r4,r3,3
81115bc4:	8822d0fa 	srli	r17,r17,3
81115bc8:	1806977a 	slli	r3,r3,29
81115bcc:	2080022c 	andhi	r2,r4,8
81115bd0:	1c62b03a 	or	r17,r3,r17
81115bd4:	10000726 	beq	r2,zero,81115bf4 <__subdf3+0x804>
81115bd8:	2812d0fa 	srli	r9,r5,3
81115bdc:	4880022c 	andhi	r2,r9,8
81115be0:	1000041e 	bne	r2,zero,81115bf4 <__subdf3+0x804>
81115be4:	300cd0fa 	srli	r6,r6,3
81115be8:	2804977a 	slli	r2,r5,29
81115bec:	4809883a 	mov	r4,r9
81115bf0:	11a2b03a 	or	r17,r2,r6
81115bf4:	8806d77a 	srli	r3,r17,29
81115bf8:	200890fa 	slli	r4,r4,3
81115bfc:	882290fa 	slli	r17,r17,3
81115c00:	3825883a 	mov	r18,r7
81115c04:	1906b03a 	or	r3,r3,r4
81115c08:	0401ffc4 	movi	r16,2047
81115c0c:	003e1906 	br	81115474 <__reset+0xfb0f5474>
81115c10:	000b883a 	mov	r5,zero
81115c14:	0005883a 	mov	r2,zero
81115c18:	003e2e06 	br	811154d4 <__reset+0xfb0f54d4>
81115c1c:	0401ffc4 	movi	r16,2047
81115c20:	003e1406 	br	81115474 <__reset+0xfb0f5474>
81115c24:	0005883a 	mov	r2,zero
81115c28:	003f7506 	br	81115a00 <__reset+0xfb0f5a00>
81115c2c:	0005883a 	mov	r2,zero
81115c30:	0009883a 	mov	r4,zero
81115c34:	003e7806 	br	81115618 <__reset+0xfb0f5618>
81115c38:	123ff804 	addi	r8,r2,-32
81115c3c:	01000804 	movi	r4,32
81115c40:	1a10d83a 	srl	r8,r3,r8
81115c44:	11002526 	beq	r2,r4,81115cdc <__subdf3+0x8ec>
81115c48:	01001004 	movi	r4,64
81115c4c:	2085c83a 	sub	r2,r4,r2
81115c50:	1884983a 	sll	r2,r3,r2
81115c54:	1444b03a 	or	r2,r2,r17
81115c58:	1004c03a 	cmpne	r2,r2,zero
81115c5c:	40a2b03a 	or	r17,r8,r2
81115c60:	0005883a 	mov	r2,zero
81115c64:	003f1606 	br	811158c0 <__reset+0xfb0f58c0>
81115c68:	02000434 	movhi	r8,16
81115c6c:	0009883a 	mov	r4,zero
81115c70:	423fffc4 	addi	r8,r8,-1
81115c74:	00bfffc4 	movi	r2,-1
81115c78:	0401ffc4 	movi	r16,2047
81115c7c:	003e6606 	br	81115618 <__reset+0xfb0f5618>
81115c80:	1c62b03a 	or	r17,r3,r17
81115c84:	8822c03a 	cmpne	r17,r17,zero
81115c88:	0005883a 	mov	r2,zero
81115c8c:	003f9906 	br	81115af4 <__reset+0xfb0f5af4>
81115c90:	2807883a 	mov	r3,r5
81115c94:	3023883a 	mov	r17,r6
81115c98:	0401ffc4 	movi	r16,2047
81115c9c:	003df506 	br	81115474 <__reset+0xfb0f5474>
81115ca0:	2807883a 	mov	r3,r5
81115ca4:	3023883a 	mov	r17,r6
81115ca8:	003df206 	br	81115474 <__reset+0xfb0f5474>
81115cac:	123ff804 	addi	r8,r2,-32
81115cb0:	01000804 	movi	r4,32
81115cb4:	1a10d83a 	srl	r8,r3,r8
81115cb8:	11000a26 	beq	r2,r4,81115ce4 <__subdf3+0x8f4>
81115cbc:	01001004 	movi	r4,64
81115cc0:	2085c83a 	sub	r2,r4,r2
81115cc4:	1884983a 	sll	r2,r3,r2
81115cc8:	1444b03a 	or	r2,r2,r17
81115ccc:	1004c03a 	cmpne	r2,r2,zero
81115cd0:	40a2b03a 	or	r17,r8,r2
81115cd4:	0005883a 	mov	r2,zero
81115cd8:	003f8606 	br	81115af4 <__reset+0xfb0f5af4>
81115cdc:	0005883a 	mov	r2,zero
81115ce0:	003fdc06 	br	81115c54 <__reset+0xfb0f5c54>
81115ce4:	0005883a 	mov	r2,zero
81115ce8:	003ff706 	br	81115cc8 <__reset+0xfb0f5cc8>

81115cec <__fixdfsi>:
81115cec:	280cd53a 	srli	r6,r5,20
81115cf0:	00c00434 	movhi	r3,16
81115cf4:	18ffffc4 	addi	r3,r3,-1
81115cf8:	3181ffcc 	andi	r6,r6,2047
81115cfc:	01c0ff84 	movi	r7,1022
81115d00:	28c6703a 	and	r3,r5,r3
81115d04:	280ad7fa 	srli	r5,r5,31
81115d08:	3980120e 	bge	r7,r6,81115d54 <__fixdfsi+0x68>
81115d0c:	00810744 	movi	r2,1053
81115d10:	11800c16 	blt	r2,r6,81115d44 <__fixdfsi+0x58>
81115d14:	00810cc4 	movi	r2,1075
81115d18:	1185c83a 	sub	r2,r2,r6
81115d1c:	01c007c4 	movi	r7,31
81115d20:	18c00434 	orhi	r3,r3,16
81115d24:	38800d16 	blt	r7,r2,81115d5c <__fixdfsi+0x70>
81115d28:	31befb44 	addi	r6,r6,-1043
81115d2c:	2084d83a 	srl	r2,r4,r2
81115d30:	1986983a 	sll	r3,r3,r6
81115d34:	1884b03a 	or	r2,r3,r2
81115d38:	28000726 	beq	r5,zero,81115d58 <__fixdfsi+0x6c>
81115d3c:	0085c83a 	sub	r2,zero,r2
81115d40:	f800283a 	ret
81115d44:	00a00034 	movhi	r2,32768
81115d48:	10bfffc4 	addi	r2,r2,-1
81115d4c:	2885883a 	add	r2,r5,r2
81115d50:	f800283a 	ret
81115d54:	0005883a 	mov	r2,zero
81115d58:	f800283a 	ret
81115d5c:	008104c4 	movi	r2,1043
81115d60:	1185c83a 	sub	r2,r2,r6
81115d64:	1884d83a 	srl	r2,r3,r2
81115d68:	003ff306 	br	81115d38 <__reset+0xfb0f5d38>

81115d6c <__floatsidf>:
81115d6c:	defffd04 	addi	sp,sp,-12
81115d70:	dfc00215 	stw	ra,8(sp)
81115d74:	dc400115 	stw	r17,4(sp)
81115d78:	dc000015 	stw	r16,0(sp)
81115d7c:	20002b26 	beq	r4,zero,81115e2c <__floatsidf+0xc0>
81115d80:	2023883a 	mov	r17,r4
81115d84:	2020d7fa 	srli	r16,r4,31
81115d88:	20002d16 	blt	r4,zero,81115e40 <__floatsidf+0xd4>
81115d8c:	8809883a 	mov	r4,r17
81115d90:	11160980 	call	81116098 <__clzsi2>
81115d94:	01410784 	movi	r5,1054
81115d98:	288bc83a 	sub	r5,r5,r2
81115d9c:	01010cc4 	movi	r4,1075
81115da0:	2149c83a 	sub	r4,r4,r5
81115da4:	00c007c4 	movi	r3,31
81115da8:	1900160e 	bge	r3,r4,81115e04 <__floatsidf+0x98>
81115dac:	00c104c4 	movi	r3,1043
81115db0:	1947c83a 	sub	r3,r3,r5
81115db4:	88c6983a 	sll	r3,r17,r3
81115db8:	00800434 	movhi	r2,16
81115dbc:	10bfffc4 	addi	r2,r2,-1
81115dc0:	1886703a 	and	r3,r3,r2
81115dc4:	2941ffcc 	andi	r5,r5,2047
81115dc8:	800d883a 	mov	r6,r16
81115dcc:	0005883a 	mov	r2,zero
81115dd0:	280a953a 	slli	r5,r5,20
81115dd4:	31803fcc 	andi	r6,r6,255
81115dd8:	01000434 	movhi	r4,16
81115ddc:	300c97fa 	slli	r6,r6,31
81115de0:	213fffc4 	addi	r4,r4,-1
81115de4:	1906703a 	and	r3,r3,r4
81115de8:	1946b03a 	or	r3,r3,r5
81115dec:	1986b03a 	or	r3,r3,r6
81115df0:	dfc00217 	ldw	ra,8(sp)
81115df4:	dc400117 	ldw	r17,4(sp)
81115df8:	dc000017 	ldw	r16,0(sp)
81115dfc:	dec00304 	addi	sp,sp,12
81115e00:	f800283a 	ret
81115e04:	00c002c4 	movi	r3,11
81115e08:	1887c83a 	sub	r3,r3,r2
81115e0c:	88c6d83a 	srl	r3,r17,r3
81115e10:	8904983a 	sll	r2,r17,r4
81115e14:	01000434 	movhi	r4,16
81115e18:	213fffc4 	addi	r4,r4,-1
81115e1c:	2941ffcc 	andi	r5,r5,2047
81115e20:	1906703a 	and	r3,r3,r4
81115e24:	800d883a 	mov	r6,r16
81115e28:	003fe906 	br	81115dd0 <__reset+0xfb0f5dd0>
81115e2c:	000d883a 	mov	r6,zero
81115e30:	000b883a 	mov	r5,zero
81115e34:	0007883a 	mov	r3,zero
81115e38:	0005883a 	mov	r2,zero
81115e3c:	003fe406 	br	81115dd0 <__reset+0xfb0f5dd0>
81115e40:	0123c83a 	sub	r17,zero,r4
81115e44:	003fd106 	br	81115d8c <__reset+0xfb0f5d8c>

81115e48 <__floatunsidf>:
81115e48:	defffe04 	addi	sp,sp,-8
81115e4c:	dc000015 	stw	r16,0(sp)
81115e50:	dfc00115 	stw	ra,4(sp)
81115e54:	2021883a 	mov	r16,r4
81115e58:	20002226 	beq	r4,zero,81115ee4 <__floatunsidf+0x9c>
81115e5c:	11160980 	call	81116098 <__clzsi2>
81115e60:	01010784 	movi	r4,1054
81115e64:	2089c83a 	sub	r4,r4,r2
81115e68:	01810cc4 	movi	r6,1075
81115e6c:	310dc83a 	sub	r6,r6,r4
81115e70:	00c007c4 	movi	r3,31
81115e74:	1980120e 	bge	r3,r6,81115ec0 <__floatunsidf+0x78>
81115e78:	00c104c4 	movi	r3,1043
81115e7c:	1907c83a 	sub	r3,r3,r4
81115e80:	80ca983a 	sll	r5,r16,r3
81115e84:	00800434 	movhi	r2,16
81115e88:	10bfffc4 	addi	r2,r2,-1
81115e8c:	2101ffcc 	andi	r4,r4,2047
81115e90:	0021883a 	mov	r16,zero
81115e94:	288a703a 	and	r5,r5,r2
81115e98:	2008953a 	slli	r4,r4,20
81115e9c:	00c00434 	movhi	r3,16
81115ea0:	18ffffc4 	addi	r3,r3,-1
81115ea4:	28c6703a 	and	r3,r5,r3
81115ea8:	8005883a 	mov	r2,r16
81115eac:	1906b03a 	or	r3,r3,r4
81115eb0:	dfc00117 	ldw	ra,4(sp)
81115eb4:	dc000017 	ldw	r16,0(sp)
81115eb8:	dec00204 	addi	sp,sp,8
81115ebc:	f800283a 	ret
81115ec0:	00c002c4 	movi	r3,11
81115ec4:	188bc83a 	sub	r5,r3,r2
81115ec8:	814ad83a 	srl	r5,r16,r5
81115ecc:	00c00434 	movhi	r3,16
81115ed0:	18ffffc4 	addi	r3,r3,-1
81115ed4:	81a0983a 	sll	r16,r16,r6
81115ed8:	2101ffcc 	andi	r4,r4,2047
81115edc:	28ca703a 	and	r5,r5,r3
81115ee0:	003fed06 	br	81115e98 <__reset+0xfb0f5e98>
81115ee4:	0009883a 	mov	r4,zero
81115ee8:	000b883a 	mov	r5,zero
81115eec:	003fea06 	br	81115e98 <__reset+0xfb0f5e98>

81115ef0 <__truncdfsf2>:
81115ef0:	2810d53a 	srli	r8,r5,20
81115ef4:	01c00434 	movhi	r7,16
81115ef8:	39ffffc4 	addi	r7,r7,-1
81115efc:	29ce703a 	and	r7,r5,r7
81115f00:	4201ffcc 	andi	r8,r8,2047
81115f04:	380e90fa 	slli	r7,r7,3
81115f08:	200cd77a 	srli	r6,r4,29
81115f0c:	42400044 	addi	r9,r8,1
81115f10:	4a41ffcc 	andi	r9,r9,2047
81115f14:	00c00044 	movi	r3,1
81115f18:	280ad7fa 	srli	r5,r5,31
81115f1c:	31ceb03a 	or	r7,r6,r7
81115f20:	200490fa 	slli	r2,r4,3
81115f24:	1a40230e 	bge	r3,r9,81115fb4 <__truncdfsf2+0xc4>
81115f28:	40ff2004 	addi	r3,r8,-896
81115f2c:	01803f84 	movi	r6,254
81115f30:	30c01516 	blt	r6,r3,81115f88 <__truncdfsf2+0x98>
81115f34:	00c0380e 	bge	zero,r3,81116018 <__truncdfsf2+0x128>
81115f38:	200c91ba 	slli	r6,r4,6
81115f3c:	380e90fa 	slli	r7,r7,3
81115f40:	1004d77a 	srli	r2,r2,29
81115f44:	300cc03a 	cmpne	r6,r6,zero
81115f48:	31ccb03a 	or	r6,r6,r7
81115f4c:	308cb03a 	or	r6,r6,r2
81115f50:	308001cc 	andi	r2,r6,7
81115f54:	10000426 	beq	r2,zero,81115f68 <__truncdfsf2+0x78>
81115f58:	308003cc 	andi	r2,r6,15
81115f5c:	01000104 	movi	r4,4
81115f60:	11000126 	beq	r2,r4,81115f68 <__truncdfsf2+0x78>
81115f64:	31800104 	addi	r6,r6,4
81115f68:	3081002c 	andhi	r2,r6,1024
81115f6c:	10001626 	beq	r2,zero,81115fc8 <__truncdfsf2+0xd8>
81115f70:	18c00044 	addi	r3,r3,1
81115f74:	00803fc4 	movi	r2,255
81115f78:	18800326 	beq	r3,r2,81115f88 <__truncdfsf2+0x98>
81115f7c:	300c91ba 	slli	r6,r6,6
81115f80:	300cd27a 	srli	r6,r6,9
81115f84:	00000206 	br	81115f90 <__truncdfsf2+0xa0>
81115f88:	00ffffc4 	movi	r3,-1
81115f8c:	000d883a 	mov	r6,zero
81115f90:	18c03fcc 	andi	r3,r3,255
81115f94:	180895fa 	slli	r4,r3,23
81115f98:	00c02034 	movhi	r3,128
81115f9c:	280a97fa 	slli	r5,r5,31
81115fa0:	18ffffc4 	addi	r3,r3,-1
81115fa4:	30c6703a 	and	r3,r6,r3
81115fa8:	1906b03a 	or	r3,r3,r4
81115fac:	1944b03a 	or	r2,r3,r5
81115fb0:	f800283a 	ret
81115fb4:	40000b1e 	bne	r8,zero,81115fe4 <__truncdfsf2+0xf4>
81115fb8:	388cb03a 	or	r6,r7,r2
81115fbc:	0007883a 	mov	r3,zero
81115fc0:	30000426 	beq	r6,zero,81115fd4 <__truncdfsf2+0xe4>
81115fc4:	01800144 	movi	r6,5
81115fc8:	00803fc4 	movi	r2,255
81115fcc:	300cd0fa 	srli	r6,r6,3
81115fd0:	18800a26 	beq	r3,r2,81115ffc <__truncdfsf2+0x10c>
81115fd4:	00802034 	movhi	r2,128
81115fd8:	10bfffc4 	addi	r2,r2,-1
81115fdc:	308c703a 	and	r6,r6,r2
81115fe0:	003feb06 	br	81115f90 <__reset+0xfb0f5f90>
81115fe4:	3888b03a 	or	r4,r7,r2
81115fe8:	203fe726 	beq	r4,zero,81115f88 <__reset+0xfb0f5f88>
81115fec:	380c90fa 	slli	r6,r7,3
81115ff0:	00c03fc4 	movi	r3,255
81115ff4:	31808034 	orhi	r6,r6,512
81115ff8:	003fd506 	br	81115f50 <__reset+0xfb0f5f50>
81115ffc:	303fe226 	beq	r6,zero,81115f88 <__reset+0xfb0f5f88>
81116000:	00802034 	movhi	r2,128
81116004:	31801034 	orhi	r6,r6,64
81116008:	10bfffc4 	addi	r2,r2,-1
8111600c:	00ffffc4 	movi	r3,-1
81116010:	308c703a 	and	r6,r6,r2
81116014:	003fde06 	br	81115f90 <__reset+0xfb0f5f90>
81116018:	013ffa44 	movi	r4,-23
8111601c:	19000e16 	blt	r3,r4,81116058 <__truncdfsf2+0x168>
81116020:	01000784 	movi	r4,30
81116024:	20c9c83a 	sub	r4,r4,r3
81116028:	018007c4 	movi	r6,31
8111602c:	39c02034 	orhi	r7,r7,128
81116030:	31000b16 	blt	r6,r4,81116060 <__truncdfsf2+0x170>
81116034:	423f2084 	addi	r8,r8,-894
81116038:	120c983a 	sll	r6,r2,r8
8111603c:	3a0e983a 	sll	r7,r7,r8
81116040:	1104d83a 	srl	r2,r2,r4
81116044:	300cc03a 	cmpne	r6,r6,zero
81116048:	31ceb03a 	or	r7,r6,r7
8111604c:	388cb03a 	or	r6,r7,r2
81116050:	0007883a 	mov	r3,zero
81116054:	003fbe06 	br	81115f50 <__reset+0xfb0f5f50>
81116058:	0007883a 	mov	r3,zero
8111605c:	003fd906 	br	81115fc4 <__reset+0xfb0f5fc4>
81116060:	01bfff84 	movi	r6,-2
81116064:	30cdc83a 	sub	r6,r6,r3
81116068:	00c00804 	movi	r3,32
8111606c:	398cd83a 	srl	r6,r7,r6
81116070:	20c00726 	beq	r4,r3,81116090 <__truncdfsf2+0x1a0>
81116074:	423f2884 	addi	r8,r8,-862
81116078:	3a0e983a 	sll	r7,r7,r8
8111607c:	3884b03a 	or	r2,r7,r2
81116080:	1004c03a 	cmpne	r2,r2,zero
81116084:	118cb03a 	or	r6,r2,r6
81116088:	0007883a 	mov	r3,zero
8111608c:	003fb006 	br	81115f50 <__reset+0xfb0f5f50>
81116090:	000f883a 	mov	r7,zero
81116094:	003ff906 	br	8111607c <__reset+0xfb0f607c>

81116098 <__clzsi2>:
81116098:	00bfffd4 	movui	r2,65535
8111609c:	11000536 	bltu	r2,r4,811160b4 <__clzsi2+0x1c>
811160a0:	00803fc4 	movi	r2,255
811160a4:	11000f36 	bltu	r2,r4,811160e4 <__clzsi2+0x4c>
811160a8:	00800804 	movi	r2,32
811160ac:	0007883a 	mov	r3,zero
811160b0:	00000506 	br	811160c8 <__clzsi2+0x30>
811160b4:	00804034 	movhi	r2,256
811160b8:	10bfffc4 	addi	r2,r2,-1
811160bc:	11000c2e 	bgeu	r2,r4,811160f0 <__clzsi2+0x58>
811160c0:	00800204 	movi	r2,8
811160c4:	00c00604 	movi	r3,24
811160c8:	20c8d83a 	srl	r4,r4,r3
811160cc:	00e044b4 	movhi	r3,33042
811160d0:	18d34604 	addi	r3,r3,19736
811160d4:	1909883a 	add	r4,r3,r4
811160d8:	20c00003 	ldbu	r3,0(r4)
811160dc:	10c5c83a 	sub	r2,r2,r3
811160e0:	f800283a 	ret
811160e4:	00800604 	movi	r2,24
811160e8:	00c00204 	movi	r3,8
811160ec:	003ff606 	br	811160c8 <__reset+0xfb0f60c8>
811160f0:	00800404 	movi	r2,16
811160f4:	1007883a 	mov	r3,r2
811160f8:	003ff306 	br	811160c8 <__reset+0xfb0f60c8>

811160fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811160fc:	defffe04 	addi	sp,sp,-8
81116100:	dfc00115 	stw	ra,4(sp)
81116104:	df000015 	stw	fp,0(sp)
81116108:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111610c:	d0a00d17 	ldw	r2,-32716(gp)
81116110:	10000326 	beq	r2,zero,81116120 <alt_get_errno+0x24>
81116114:	d0a00d17 	ldw	r2,-32716(gp)
81116118:	103ee83a 	callr	r2
8111611c:	00000106 	br	81116124 <alt_get_errno+0x28>
81116120:	d0a03604 	addi	r2,gp,-32552
}
81116124:	e037883a 	mov	sp,fp
81116128:	dfc00117 	ldw	ra,4(sp)
8111612c:	df000017 	ldw	fp,0(sp)
81116130:	dec00204 	addi	sp,sp,8
81116134:	f800283a 	ret

81116138 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
81116138:	defffb04 	addi	sp,sp,-20
8111613c:	dfc00415 	stw	ra,16(sp)
81116140:	df000315 	stw	fp,12(sp)
81116144:	df000304 	addi	fp,sp,12
81116148:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
8111614c:	e0bfff17 	ldw	r2,-4(fp)
81116150:	10000616 	blt	r2,zero,8111616c <close+0x34>
81116154:	e0bfff17 	ldw	r2,-4(fp)
81116158:	10c00324 	muli	r3,r2,12
8111615c:	00a044b4 	movhi	r2,33042
81116160:	1096b004 	addi	r2,r2,23232
81116164:	1885883a 	add	r2,r3,r2
81116168:	00000106 	br	81116170 <close+0x38>
8111616c:	0005883a 	mov	r2,zero
81116170:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
81116174:	e0bffd17 	ldw	r2,-12(fp)
81116178:	10001926 	beq	r2,zero,811161e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
8111617c:	e0bffd17 	ldw	r2,-12(fp)
81116180:	10800017 	ldw	r2,0(r2)
81116184:	10800417 	ldw	r2,16(r2)
81116188:	10000626 	beq	r2,zero,811161a4 <close+0x6c>
8111618c:	e0bffd17 	ldw	r2,-12(fp)
81116190:	10800017 	ldw	r2,0(r2)
81116194:	10800417 	ldw	r2,16(r2)
81116198:	e13ffd17 	ldw	r4,-12(fp)
8111619c:	103ee83a 	callr	r2
811161a0:	00000106 	br	811161a8 <close+0x70>
811161a4:	0005883a 	mov	r2,zero
811161a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
811161ac:	e13fff17 	ldw	r4,-4(fp)
811161b0:	11169580 	call	81116958 <alt_release_fd>
    if (rval < 0)
811161b4:	e0bffe17 	ldw	r2,-8(fp)
811161b8:	1000070e 	bge	r2,zero,811161d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
811161bc:	11160fc0 	call	811160fc <alt_get_errno>
811161c0:	1007883a 	mov	r3,r2
811161c4:	e0bffe17 	ldw	r2,-8(fp)
811161c8:	0085c83a 	sub	r2,zero,r2
811161cc:	18800015 	stw	r2,0(r3)
      return -1;
811161d0:	00bfffc4 	movi	r2,-1
811161d4:	00000706 	br	811161f4 <close+0xbc>
    }
    return 0;
811161d8:	0005883a 	mov	r2,zero
811161dc:	00000506 	br	811161f4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
811161e0:	11160fc0 	call	811160fc <alt_get_errno>
811161e4:	1007883a 	mov	r3,r2
811161e8:	00801444 	movi	r2,81
811161ec:	18800015 	stw	r2,0(r3)
    return -1;
811161f0:	00bfffc4 	movi	r2,-1
  }
}
811161f4:	e037883a 	mov	sp,fp
811161f8:	dfc00117 	ldw	ra,4(sp)
811161fc:	df000017 	ldw	fp,0(sp)
81116200:	dec00204 	addi	sp,sp,8
81116204:	f800283a 	ret

81116208 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
81116208:	defffc04 	addi	sp,sp,-16
8111620c:	df000315 	stw	fp,12(sp)
81116210:	df000304 	addi	fp,sp,12
81116214:	e13ffd15 	stw	r4,-12(fp)
81116218:	e17ffe15 	stw	r5,-8(fp)
8111621c:	e1bfff15 	stw	r6,-4(fp)
  return len;
81116220:	e0bfff17 	ldw	r2,-4(fp)
}
81116224:	e037883a 	mov	sp,fp
81116228:	df000017 	ldw	fp,0(sp)
8111622c:	dec00104 	addi	sp,sp,4
81116230:	f800283a 	ret

81116234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81116234:	defffe04 	addi	sp,sp,-8
81116238:	dfc00115 	stw	ra,4(sp)
8111623c:	df000015 	stw	fp,0(sp)
81116240:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81116244:	d0a00d17 	ldw	r2,-32716(gp)
81116248:	10000326 	beq	r2,zero,81116258 <alt_get_errno+0x24>
8111624c:	d0a00d17 	ldw	r2,-32716(gp)
81116250:	103ee83a 	callr	r2
81116254:	00000106 	br	8111625c <alt_get_errno+0x28>
81116258:	d0a03604 	addi	r2,gp,-32552
}
8111625c:	e037883a 	mov	sp,fp
81116260:	dfc00117 	ldw	ra,4(sp)
81116264:	df000017 	ldw	fp,0(sp)
81116268:	dec00204 	addi	sp,sp,8
8111626c:	f800283a 	ret

81116270 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81116270:	defffb04 	addi	sp,sp,-20
81116274:	dfc00415 	stw	ra,16(sp)
81116278:	df000315 	stw	fp,12(sp)
8111627c:	df000304 	addi	fp,sp,12
81116280:	e13ffe15 	stw	r4,-8(fp)
81116284:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81116288:	e0bffe17 	ldw	r2,-8(fp)
8111628c:	10000616 	blt	r2,zero,811162a8 <fstat+0x38>
81116290:	e0bffe17 	ldw	r2,-8(fp)
81116294:	10c00324 	muli	r3,r2,12
81116298:	00a044b4 	movhi	r2,33042
8111629c:	1096b004 	addi	r2,r2,23232
811162a0:	1885883a 	add	r2,r3,r2
811162a4:	00000106 	br	811162ac <fstat+0x3c>
811162a8:	0005883a 	mov	r2,zero
811162ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
811162b0:	e0bffd17 	ldw	r2,-12(fp)
811162b4:	10001026 	beq	r2,zero,811162f8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
811162b8:	e0bffd17 	ldw	r2,-12(fp)
811162bc:	10800017 	ldw	r2,0(r2)
811162c0:	10800817 	ldw	r2,32(r2)
811162c4:	10000726 	beq	r2,zero,811162e4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
811162c8:	e0bffd17 	ldw	r2,-12(fp)
811162cc:	10800017 	ldw	r2,0(r2)
811162d0:	10800817 	ldw	r2,32(r2)
811162d4:	e17fff17 	ldw	r5,-4(fp)
811162d8:	e13ffd17 	ldw	r4,-12(fp)
811162dc:	103ee83a 	callr	r2
811162e0:	00000a06 	br	8111630c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
811162e4:	e0bfff17 	ldw	r2,-4(fp)
811162e8:	00c80004 	movi	r3,8192
811162ec:	10c00115 	stw	r3,4(r2)
      return 0;
811162f0:	0005883a 	mov	r2,zero
811162f4:	00000506 	br	8111630c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811162f8:	11162340 	call	81116234 <alt_get_errno>
811162fc:	1007883a 	mov	r3,r2
81116300:	00801444 	movi	r2,81
81116304:	18800015 	stw	r2,0(r3)
    return -1;
81116308:	00bfffc4 	movi	r2,-1
  }
}
8111630c:	e037883a 	mov	sp,fp
81116310:	dfc00117 	ldw	ra,4(sp)
81116314:	df000017 	ldw	fp,0(sp)
81116318:	dec00204 	addi	sp,sp,8
8111631c:	f800283a 	ret

81116320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81116320:	defffe04 	addi	sp,sp,-8
81116324:	dfc00115 	stw	ra,4(sp)
81116328:	df000015 	stw	fp,0(sp)
8111632c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81116330:	d0a00d17 	ldw	r2,-32716(gp)
81116334:	10000326 	beq	r2,zero,81116344 <alt_get_errno+0x24>
81116338:	d0a00d17 	ldw	r2,-32716(gp)
8111633c:	103ee83a 	callr	r2
81116340:	00000106 	br	81116348 <alt_get_errno+0x28>
81116344:	d0a03604 	addi	r2,gp,-32552
}
81116348:	e037883a 	mov	sp,fp
8111634c:	dfc00117 	ldw	ra,4(sp)
81116350:	df000017 	ldw	fp,0(sp)
81116354:	dec00204 	addi	sp,sp,8
81116358:	f800283a 	ret

8111635c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
8111635c:	deffed04 	addi	sp,sp,-76
81116360:	dfc01215 	stw	ra,72(sp)
81116364:	df001115 	stw	fp,68(sp)
81116368:	df001104 	addi	fp,sp,68
8111636c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81116370:	e0bfff17 	ldw	r2,-4(fp)
81116374:	10000616 	blt	r2,zero,81116390 <isatty+0x34>
81116378:	e0bfff17 	ldw	r2,-4(fp)
8111637c:	10c00324 	muli	r3,r2,12
81116380:	00a044b4 	movhi	r2,33042
81116384:	1096b004 	addi	r2,r2,23232
81116388:	1885883a 	add	r2,r3,r2
8111638c:	00000106 	br	81116394 <isatty+0x38>
81116390:	0005883a 	mov	r2,zero
81116394:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
81116398:	e0bfef17 	ldw	r2,-68(fp)
8111639c:	10000e26 	beq	r2,zero,811163d8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
811163a0:	e0bfef17 	ldw	r2,-68(fp)
811163a4:	10800017 	ldw	r2,0(r2)
811163a8:	10800817 	ldw	r2,32(r2)
811163ac:	1000021e 	bne	r2,zero,811163b8 <isatty+0x5c>
    {
      return 1;
811163b0:	00800044 	movi	r2,1
811163b4:	00000d06 	br	811163ec <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
811163b8:	e0bff004 	addi	r2,fp,-64
811163bc:	100b883a 	mov	r5,r2
811163c0:	e13fff17 	ldw	r4,-4(fp)
811163c4:	11162700 	call	81116270 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
811163c8:	e0bff117 	ldw	r2,-60(fp)
811163cc:	10880020 	cmpeqi	r2,r2,8192
811163d0:	10803fcc 	andi	r2,r2,255
811163d4:	00000506 	br	811163ec <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811163d8:	11163200 	call	81116320 <alt_get_errno>
811163dc:	1007883a 	mov	r3,r2
811163e0:	00801444 	movi	r2,81
811163e4:	18800015 	stw	r2,0(r3)
    return 0;
811163e8:	0005883a 	mov	r2,zero
  }
}
811163ec:	e037883a 	mov	sp,fp
811163f0:	dfc00117 	ldw	ra,4(sp)
811163f4:	df000017 	ldw	fp,0(sp)
811163f8:	dec00204 	addi	sp,sp,8
811163fc:	f800283a 	ret

81116400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81116400:	defffe04 	addi	sp,sp,-8
81116404:	dfc00115 	stw	ra,4(sp)
81116408:	df000015 	stw	fp,0(sp)
8111640c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81116410:	d0a00d17 	ldw	r2,-32716(gp)
81116414:	10000326 	beq	r2,zero,81116424 <alt_get_errno+0x24>
81116418:	d0a00d17 	ldw	r2,-32716(gp)
8111641c:	103ee83a 	callr	r2
81116420:	00000106 	br	81116428 <alt_get_errno+0x28>
81116424:	d0a03604 	addi	r2,gp,-32552
}
81116428:	e037883a 	mov	sp,fp
8111642c:	dfc00117 	ldw	ra,4(sp)
81116430:	df000017 	ldw	fp,0(sp)
81116434:	dec00204 	addi	sp,sp,8
81116438:	f800283a 	ret

8111643c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
8111643c:	defff904 	addi	sp,sp,-28
81116440:	dfc00615 	stw	ra,24(sp)
81116444:	df000515 	stw	fp,20(sp)
81116448:	df000504 	addi	fp,sp,20
8111644c:	e13ffd15 	stw	r4,-12(fp)
81116450:	e17ffe15 	stw	r5,-8(fp)
81116454:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
81116458:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8111645c:	e0bffd17 	ldw	r2,-12(fp)
81116460:	10000616 	blt	r2,zero,8111647c <lseek+0x40>
81116464:	e0bffd17 	ldw	r2,-12(fp)
81116468:	10c00324 	muli	r3,r2,12
8111646c:	00a044b4 	movhi	r2,33042
81116470:	1096b004 	addi	r2,r2,23232
81116474:	1885883a 	add	r2,r3,r2
81116478:	00000106 	br	81116480 <lseek+0x44>
8111647c:	0005883a 	mov	r2,zero
81116480:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81116484:	e0bffc17 	ldw	r2,-16(fp)
81116488:	10001026 	beq	r2,zero,811164cc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
8111648c:	e0bffc17 	ldw	r2,-16(fp)
81116490:	10800017 	ldw	r2,0(r2)
81116494:	10800717 	ldw	r2,28(r2)
81116498:	10000926 	beq	r2,zero,811164c0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8111649c:	e0bffc17 	ldw	r2,-16(fp)
811164a0:	10800017 	ldw	r2,0(r2)
811164a4:	10800717 	ldw	r2,28(r2)
811164a8:	e1bfff17 	ldw	r6,-4(fp)
811164ac:	e17ffe17 	ldw	r5,-8(fp)
811164b0:	e13ffc17 	ldw	r4,-16(fp)
811164b4:	103ee83a 	callr	r2
811164b8:	e0bffb15 	stw	r2,-20(fp)
811164bc:	00000506 	br	811164d4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
811164c0:	00bfde84 	movi	r2,-134
811164c4:	e0bffb15 	stw	r2,-20(fp)
811164c8:	00000206 	br	811164d4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
811164cc:	00bfebc4 	movi	r2,-81
811164d0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
811164d4:	e0bffb17 	ldw	r2,-20(fp)
811164d8:	1000070e 	bge	r2,zero,811164f8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
811164dc:	11164000 	call	81116400 <alt_get_errno>
811164e0:	1007883a 	mov	r3,r2
811164e4:	e0bffb17 	ldw	r2,-20(fp)
811164e8:	0085c83a 	sub	r2,zero,r2
811164ec:	18800015 	stw	r2,0(r3)
    rc = -1;
811164f0:	00bfffc4 	movi	r2,-1
811164f4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
811164f8:	e0bffb17 	ldw	r2,-20(fp)
}
811164fc:	e037883a 	mov	sp,fp
81116500:	dfc00117 	ldw	ra,4(sp)
81116504:	df000017 	ldw	fp,0(sp)
81116508:	dec00204 	addi	sp,sp,8
8111650c:	f800283a 	ret

81116510 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81116510:	defff904 	addi	sp,sp,-28
81116514:	dfc00615 	stw	ra,24(sp)
81116518:	df000515 	stw	fp,20(sp)
8111651c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
81116520:	0009883a 	mov	r4,zero
81116524:	111e6c00 	call	8111e6c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
81116528:	11177200 	call	81117720 <OSInit>
8111652c:	01000044 	movi	r4,1
81116530:	111c0800 	call	8111c080 <OSSemCreate>
81116534:	d0a04215 	stw	r2,-32504(gp)
81116538:	01000044 	movi	r4,1
8111653c:	111c0800 	call	8111c080 <OSSemCreate>
81116540:	d0a04415 	stw	r2,-32496(gp)
81116544:	d0a03d04 	addi	r2,gp,-32524
81116548:	e0bffc15 	stw	r2,-16(fp)
8111654c:	00800044 	movi	r2,1
81116550:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81116554:	e0bffd0b 	ldhu	r2,-12(fp)
81116558:	1009883a 	mov	r4,r2
8111655c:	111c0800 	call	8111c080 <OSSemCreate>
81116560:	1007883a 	mov	r3,r2
81116564:	e0bffc17 	ldw	r2,-16(fp)
81116568:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
8111656c:	111e6f80 	call	8111e6f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
81116570:	01a044b4 	movhi	r6,33042
81116574:	31938904 	addi	r6,r6,20004
81116578:	016044b4 	movhi	r5,33042
8111657c:	29538e04 	addi	r5,r5,20024
81116580:	012044b4 	movhi	r4,33042
81116584:	21138e04 	addi	r4,r4,20024
81116588:	11238d80 	call	811238d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
8111658c:	11232400 	call	81123240 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
81116590:	012044b4 	movhi	r4,33042
81116594:	210ca804 	addi	r4,r4,12960
81116598:	11241780 	call	81124178 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
8111659c:	d0a03e17 	ldw	r2,-32520(gp)
811165a0:	d0e03f17 	ldw	r3,-32516(gp)
811165a4:	d1204017 	ldw	r4,-32512(gp)
811165a8:	200d883a 	mov	r6,r4
811165ac:	180b883a 	mov	r5,r3
811165b0:	1009883a 	mov	r4,r2
811165b4:	110036c0 	call	8110036c <main>
811165b8:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
811165bc:	01000044 	movi	r4,1
811165c0:	11161380 	call	81116138 <close>
  exit (result);
811165c4:	e13ffb17 	ldw	r4,-20(fp)
811165c8:	112418c0 	call	8112418c <exit>

811165cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811165cc:	defffe04 	addi	sp,sp,-8
811165d0:	dfc00115 	stw	ra,4(sp)
811165d4:	df000015 	stw	fp,0(sp)
811165d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811165dc:	d0a00d17 	ldw	r2,-32716(gp)
811165e0:	10000326 	beq	r2,zero,811165f0 <alt_get_errno+0x24>
811165e4:	d0a00d17 	ldw	r2,-32716(gp)
811165e8:	103ee83a 	callr	r2
811165ec:	00000106 	br	811165f4 <alt_get_errno+0x28>
811165f0:	d0a03604 	addi	r2,gp,-32552
}
811165f4:	e037883a 	mov	sp,fp
811165f8:	dfc00117 	ldw	ra,4(sp)
811165fc:	df000017 	ldw	fp,0(sp)
81116600:	dec00204 	addi	sp,sp,8
81116604:	f800283a 	ret

81116608 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81116608:	defffd04 	addi	sp,sp,-12
8111660c:	df000215 	stw	fp,8(sp)
81116610:	df000204 	addi	fp,sp,8
81116614:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81116618:	e0bfff17 	ldw	r2,-4(fp)
8111661c:	10800217 	ldw	r2,8(r2)
81116620:	10d00034 	orhi	r3,r2,16384
81116624:	e0bfff17 	ldw	r2,-4(fp)
81116628:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8111662c:	e03ffe15 	stw	zero,-8(fp)
81116630:	00001d06 	br	811166a8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81116634:	00a044b4 	movhi	r2,33042
81116638:	1096b004 	addi	r2,r2,23232
8111663c:	e0fffe17 	ldw	r3,-8(fp)
81116640:	18c00324 	muli	r3,r3,12
81116644:	10c5883a 	add	r2,r2,r3
81116648:	10c00017 	ldw	r3,0(r2)
8111664c:	e0bfff17 	ldw	r2,-4(fp)
81116650:	10800017 	ldw	r2,0(r2)
81116654:	1880111e 	bne	r3,r2,8111669c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81116658:	00a044b4 	movhi	r2,33042
8111665c:	1096b004 	addi	r2,r2,23232
81116660:	e0fffe17 	ldw	r3,-8(fp)
81116664:	18c00324 	muli	r3,r3,12
81116668:	10c5883a 	add	r2,r2,r3
8111666c:	10800204 	addi	r2,r2,8
81116670:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81116674:	1000090e 	bge	r2,zero,8111669c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
81116678:	e0bffe17 	ldw	r2,-8(fp)
8111667c:	10c00324 	muli	r3,r2,12
81116680:	00a044b4 	movhi	r2,33042
81116684:	1096b004 	addi	r2,r2,23232
81116688:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8111668c:	e0bfff17 	ldw	r2,-4(fp)
81116690:	18800226 	beq	r3,r2,8111669c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
81116694:	00bffcc4 	movi	r2,-13
81116698:	00000806 	br	811166bc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8111669c:	e0bffe17 	ldw	r2,-8(fp)
811166a0:	10800044 	addi	r2,r2,1
811166a4:	e0bffe15 	stw	r2,-8(fp)
811166a8:	d0a00c17 	ldw	r2,-32720(gp)
811166ac:	1007883a 	mov	r3,r2
811166b0:	e0bffe17 	ldw	r2,-8(fp)
811166b4:	18bfdf2e 	bgeu	r3,r2,81116634 <__reset+0xfb0f6634>
    }
  }
  
  /* The device is not locked */
 
  return 0;
811166b8:	0005883a 	mov	r2,zero
}
811166bc:	e037883a 	mov	sp,fp
811166c0:	df000017 	ldw	fp,0(sp)
811166c4:	dec00104 	addi	sp,sp,4
811166c8:	f800283a 	ret

811166cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
811166cc:	defff604 	addi	sp,sp,-40
811166d0:	dfc00915 	stw	ra,36(sp)
811166d4:	df000815 	stw	fp,32(sp)
811166d8:	df000804 	addi	fp,sp,32
811166dc:	e13ffd15 	stw	r4,-12(fp)
811166e0:	e17ffe15 	stw	r5,-8(fp)
811166e4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
811166e8:	00bfffc4 	movi	r2,-1
811166ec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
811166f0:	00bffb44 	movi	r2,-19
811166f4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
811166f8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
811166fc:	d1600a04 	addi	r5,gp,-32728
81116700:	e13ffd17 	ldw	r4,-12(fp)
81116704:	11233000 	call	81123300 <alt_find_dev>
81116708:	e0bff815 	stw	r2,-32(fp)
8111670c:	e0bff817 	ldw	r2,-32(fp)
81116710:	1000051e 	bne	r2,zero,81116728 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81116714:	e13ffd17 	ldw	r4,-12(fp)
81116718:	11233900 	call	81123390 <alt_find_file>
8111671c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81116720:	00800044 	movi	r2,1
81116724:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81116728:	e0bff817 	ldw	r2,-32(fp)
8111672c:	10002926 	beq	r2,zero,811167d4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
81116730:	e13ff817 	ldw	r4,-32(fp)
81116734:	11234980 	call	81123498 <alt_get_fd>
81116738:	e0bff915 	stw	r2,-28(fp)
8111673c:	e0bff917 	ldw	r2,-28(fp)
81116740:	1000030e 	bge	r2,zero,81116750 <open+0x84>
    {
      status = index;
81116744:	e0bff917 	ldw	r2,-28(fp)
81116748:	e0bffa15 	stw	r2,-24(fp)
8111674c:	00002306 	br	811167dc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
81116750:	e0bff917 	ldw	r2,-28(fp)
81116754:	10c00324 	muli	r3,r2,12
81116758:	00a044b4 	movhi	r2,33042
8111675c:	1096b004 	addi	r2,r2,23232
81116760:	1885883a 	add	r2,r3,r2
81116764:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
81116768:	e0fffe17 	ldw	r3,-8(fp)
8111676c:	00900034 	movhi	r2,16384
81116770:	10bfffc4 	addi	r2,r2,-1
81116774:	1886703a 	and	r3,r3,r2
81116778:	e0bffc17 	ldw	r2,-16(fp)
8111677c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
81116780:	e0bffb17 	ldw	r2,-20(fp)
81116784:	1000051e 	bne	r2,zero,8111679c <open+0xd0>
81116788:	e13ffc17 	ldw	r4,-16(fp)
8111678c:	11166080 	call	81116608 <alt_file_locked>
81116790:	e0bffa15 	stw	r2,-24(fp)
81116794:	e0bffa17 	ldw	r2,-24(fp)
81116798:	10001016 	blt	r2,zero,811167dc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8111679c:	e0bff817 	ldw	r2,-32(fp)
811167a0:	10800317 	ldw	r2,12(r2)
811167a4:	10000826 	beq	r2,zero,811167c8 <open+0xfc>
811167a8:	e0bff817 	ldw	r2,-32(fp)
811167ac:	10800317 	ldw	r2,12(r2)
811167b0:	e1ffff17 	ldw	r7,-4(fp)
811167b4:	e1bffe17 	ldw	r6,-8(fp)
811167b8:	e17ffd17 	ldw	r5,-12(fp)
811167bc:	e13ffc17 	ldw	r4,-16(fp)
811167c0:	103ee83a 	callr	r2
811167c4:	00000106 	br	811167cc <open+0x100>
811167c8:	0005883a 	mov	r2,zero
811167cc:	e0bffa15 	stw	r2,-24(fp)
811167d0:	00000206 	br	811167dc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
811167d4:	00bffb44 	movi	r2,-19
811167d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
811167dc:	e0bffa17 	ldw	r2,-24(fp)
811167e0:	1000090e 	bge	r2,zero,81116808 <open+0x13c>
  {
    alt_release_fd (index);  
811167e4:	e13ff917 	ldw	r4,-28(fp)
811167e8:	11169580 	call	81116958 <alt_release_fd>
    ALT_ERRNO = -status;
811167ec:	11165cc0 	call	811165cc <alt_get_errno>
811167f0:	1007883a 	mov	r3,r2
811167f4:	e0bffa17 	ldw	r2,-24(fp)
811167f8:	0085c83a 	sub	r2,zero,r2
811167fc:	18800015 	stw	r2,0(r3)
    return -1;
81116800:	00bfffc4 	movi	r2,-1
81116804:	00000106 	br	8111680c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
81116808:	e0bff917 	ldw	r2,-28(fp)
}
8111680c:	e037883a 	mov	sp,fp
81116810:	dfc00117 	ldw	ra,4(sp)
81116814:	df000017 	ldw	fp,0(sp)
81116818:	dec00204 	addi	sp,sp,8
8111681c:	f800283a 	ret

81116820 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81116820:	defffe04 	addi	sp,sp,-8
81116824:	dfc00115 	stw	ra,4(sp)
81116828:	df000015 	stw	fp,0(sp)
8111682c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81116830:	d0a00d17 	ldw	r2,-32716(gp)
81116834:	10000326 	beq	r2,zero,81116844 <alt_get_errno+0x24>
81116838:	d0a00d17 	ldw	r2,-32716(gp)
8111683c:	103ee83a 	callr	r2
81116840:	00000106 	br	81116848 <alt_get_errno+0x28>
81116844:	d0a03604 	addi	r2,gp,-32552
}
81116848:	e037883a 	mov	sp,fp
8111684c:	dfc00117 	ldw	ra,4(sp)
81116850:	df000017 	ldw	fp,0(sp)
81116854:	dec00204 	addi	sp,sp,8
81116858:	f800283a 	ret

8111685c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
8111685c:	defff904 	addi	sp,sp,-28
81116860:	dfc00615 	stw	ra,24(sp)
81116864:	df000515 	stw	fp,20(sp)
81116868:	df000504 	addi	fp,sp,20
8111686c:	e13ffd15 	stw	r4,-12(fp)
81116870:	e17ffe15 	stw	r5,-8(fp)
81116874:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81116878:	e0bffd17 	ldw	r2,-12(fp)
8111687c:	10000616 	blt	r2,zero,81116898 <read+0x3c>
81116880:	e0bffd17 	ldw	r2,-12(fp)
81116884:	10c00324 	muli	r3,r2,12
81116888:	00a044b4 	movhi	r2,33042
8111688c:	1096b004 	addi	r2,r2,23232
81116890:	1885883a 	add	r2,r3,r2
81116894:	00000106 	br	8111689c <read+0x40>
81116898:	0005883a 	mov	r2,zero
8111689c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
811168a0:	e0bffb17 	ldw	r2,-20(fp)
811168a4:	10002226 	beq	r2,zero,81116930 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
811168a8:	e0bffb17 	ldw	r2,-20(fp)
811168ac:	10800217 	ldw	r2,8(r2)
811168b0:	108000cc 	andi	r2,r2,3
811168b4:	10800060 	cmpeqi	r2,r2,1
811168b8:	1000181e 	bne	r2,zero,8111691c <read+0xc0>
        (fd->dev->read))
811168bc:	e0bffb17 	ldw	r2,-20(fp)
811168c0:	10800017 	ldw	r2,0(r2)
811168c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
811168c8:	10001426 	beq	r2,zero,8111691c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
811168cc:	e0bffb17 	ldw	r2,-20(fp)
811168d0:	10800017 	ldw	r2,0(r2)
811168d4:	10800517 	ldw	r2,20(r2)
811168d8:	e0ffff17 	ldw	r3,-4(fp)
811168dc:	180d883a 	mov	r6,r3
811168e0:	e17ffe17 	ldw	r5,-8(fp)
811168e4:	e13ffb17 	ldw	r4,-20(fp)
811168e8:	103ee83a 	callr	r2
811168ec:	e0bffc15 	stw	r2,-16(fp)
811168f0:	e0bffc17 	ldw	r2,-16(fp)
811168f4:	1000070e 	bge	r2,zero,81116914 <read+0xb8>
        {
          ALT_ERRNO = -rval;
811168f8:	11168200 	call	81116820 <alt_get_errno>
811168fc:	1007883a 	mov	r3,r2
81116900:	e0bffc17 	ldw	r2,-16(fp)
81116904:	0085c83a 	sub	r2,zero,r2
81116908:	18800015 	stw	r2,0(r3)
          return -1;
8111690c:	00bfffc4 	movi	r2,-1
81116910:	00000c06 	br	81116944 <read+0xe8>
        }
        return rval;
81116914:	e0bffc17 	ldw	r2,-16(fp)
81116918:	00000a06 	br	81116944 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
8111691c:	11168200 	call	81116820 <alt_get_errno>
81116920:	1007883a 	mov	r3,r2
81116924:	00800344 	movi	r2,13
81116928:	18800015 	stw	r2,0(r3)
8111692c:	00000406 	br	81116940 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81116930:	11168200 	call	81116820 <alt_get_errno>
81116934:	1007883a 	mov	r3,r2
81116938:	00801444 	movi	r2,81
8111693c:	18800015 	stw	r2,0(r3)
  }
  return -1;
81116940:	00bfffc4 	movi	r2,-1
}
81116944:	e037883a 	mov	sp,fp
81116948:	dfc00117 	ldw	ra,4(sp)
8111694c:	df000017 	ldw	fp,0(sp)
81116950:	dec00204 	addi	sp,sp,8
81116954:	f800283a 	ret

81116958 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81116958:	defffe04 	addi	sp,sp,-8
8111695c:	df000115 	stw	fp,4(sp)
81116960:	df000104 	addi	fp,sp,4
81116964:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81116968:	e0bfff17 	ldw	r2,-4(fp)
8111696c:	108000d0 	cmplti	r2,r2,3
81116970:	10000d1e 	bne	r2,zero,811169a8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
81116974:	00a044b4 	movhi	r2,33042
81116978:	1096b004 	addi	r2,r2,23232
8111697c:	e0ffff17 	ldw	r3,-4(fp)
81116980:	18c00324 	muli	r3,r3,12
81116984:	10c5883a 	add	r2,r2,r3
81116988:	10800204 	addi	r2,r2,8
8111698c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81116990:	00a044b4 	movhi	r2,33042
81116994:	1096b004 	addi	r2,r2,23232
81116998:	e0ffff17 	ldw	r3,-4(fp)
8111699c:	18c00324 	muli	r3,r3,12
811169a0:	10c5883a 	add	r2,r2,r3
811169a4:	10000015 	stw	zero,0(r2)
  }
}
811169a8:	0001883a 	nop
811169ac:	e037883a 	mov	sp,fp
811169b0:	df000017 	ldw	fp,0(sp)
811169b4:	dec00104 	addi	sp,sp,4
811169b8:	f800283a 	ret

811169bc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
811169bc:	defff904 	addi	sp,sp,-28
811169c0:	df000615 	stw	fp,24(sp)
811169c4:	df000604 	addi	fp,sp,24
811169c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811169cc:	0005303a 	rdctl	r2,status
811169d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811169d4:	e0fffe17 	ldw	r3,-8(fp)
811169d8:	00bfff84 	movi	r2,-2
811169dc:	1884703a 	and	r2,r3,r2
811169e0:	1001703a 	wrctl	status,r2
  
  return context;
811169e4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
811169e8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
811169ec:	d0a00e17 	ldw	r2,-32712(gp)
811169f0:	10c000c4 	addi	r3,r2,3
811169f4:	00bfff04 	movi	r2,-4
811169f8:	1884703a 	and	r2,r3,r2
811169fc:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81116a00:	d0e00e17 	ldw	r3,-32712(gp)
81116a04:	e0bfff17 	ldw	r2,-4(fp)
81116a08:	1887883a 	add	r3,r3,r2
81116a0c:	00a04834 	movhi	r2,33056
81116a10:	10a80004 	addi	r2,r2,-24576
81116a14:	10c0062e 	bgeu	r2,r3,81116a30 <sbrk+0x74>
81116a18:	e0bffb17 	ldw	r2,-20(fp)
81116a1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81116a20:	e0bffa17 	ldw	r2,-24(fp)
81116a24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81116a28:	00bfffc4 	movi	r2,-1
81116a2c:	00000b06 	br	81116a5c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
81116a30:	d0a00e17 	ldw	r2,-32712(gp)
81116a34:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
81116a38:	d0e00e17 	ldw	r3,-32712(gp)
81116a3c:	e0bfff17 	ldw	r2,-4(fp)
81116a40:	1885883a 	add	r2,r3,r2
81116a44:	d0a00e15 	stw	r2,-32712(gp)
81116a48:	e0bffb17 	ldw	r2,-20(fp)
81116a4c:	e0bffc15 	stw	r2,-16(fp)
81116a50:	e0bffc17 	ldw	r2,-16(fp)
81116a54:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
81116a58:	e0bffd17 	ldw	r2,-12(fp)
} 
81116a5c:	e037883a 	mov	sp,fp
81116a60:	df000017 	ldw	fp,0(sp)
81116a64:	dec00104 	addi	sp,sp,4
81116a68:	f800283a 	ret

81116a6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81116a6c:	defffe04 	addi	sp,sp,-8
81116a70:	dfc00115 	stw	ra,4(sp)
81116a74:	df000015 	stw	fp,0(sp)
81116a78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81116a7c:	d0a00d17 	ldw	r2,-32716(gp)
81116a80:	10000326 	beq	r2,zero,81116a90 <alt_get_errno+0x24>
81116a84:	d0a00d17 	ldw	r2,-32716(gp)
81116a88:	103ee83a 	callr	r2
81116a8c:	00000106 	br	81116a94 <alt_get_errno+0x28>
81116a90:	d0a03604 	addi	r2,gp,-32552
}
81116a94:	e037883a 	mov	sp,fp
81116a98:	dfc00117 	ldw	ra,4(sp)
81116a9c:	df000017 	ldw	fp,0(sp)
81116aa0:	dec00204 	addi	sp,sp,8
81116aa4:	f800283a 	ret

81116aa8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
81116aa8:	defff904 	addi	sp,sp,-28
81116aac:	dfc00615 	stw	ra,24(sp)
81116ab0:	df000515 	stw	fp,20(sp)
81116ab4:	df000504 	addi	fp,sp,20
81116ab8:	e13ffd15 	stw	r4,-12(fp)
81116abc:	e17ffe15 	stw	r5,-8(fp)
81116ac0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81116ac4:	e0bffd17 	ldw	r2,-12(fp)
81116ac8:	10000616 	blt	r2,zero,81116ae4 <write+0x3c>
81116acc:	e0bffd17 	ldw	r2,-12(fp)
81116ad0:	10c00324 	muli	r3,r2,12
81116ad4:	00a044b4 	movhi	r2,33042
81116ad8:	1096b004 	addi	r2,r2,23232
81116adc:	1885883a 	add	r2,r3,r2
81116ae0:	00000106 	br	81116ae8 <write+0x40>
81116ae4:	0005883a 	mov	r2,zero
81116ae8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81116aec:	e0bffb17 	ldw	r2,-20(fp)
81116af0:	10002126 	beq	r2,zero,81116b78 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
81116af4:	e0bffb17 	ldw	r2,-20(fp)
81116af8:	10800217 	ldw	r2,8(r2)
81116afc:	108000cc 	andi	r2,r2,3
81116b00:	10001826 	beq	r2,zero,81116b64 <write+0xbc>
81116b04:	e0bffb17 	ldw	r2,-20(fp)
81116b08:	10800017 	ldw	r2,0(r2)
81116b0c:	10800617 	ldw	r2,24(r2)
81116b10:	10001426 	beq	r2,zero,81116b64 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
81116b14:	e0bffb17 	ldw	r2,-20(fp)
81116b18:	10800017 	ldw	r2,0(r2)
81116b1c:	10800617 	ldw	r2,24(r2)
81116b20:	e0ffff17 	ldw	r3,-4(fp)
81116b24:	180d883a 	mov	r6,r3
81116b28:	e17ffe17 	ldw	r5,-8(fp)
81116b2c:	e13ffb17 	ldw	r4,-20(fp)
81116b30:	103ee83a 	callr	r2
81116b34:	e0bffc15 	stw	r2,-16(fp)
81116b38:	e0bffc17 	ldw	r2,-16(fp)
81116b3c:	1000070e 	bge	r2,zero,81116b5c <write+0xb4>
      {
        ALT_ERRNO = -rval;
81116b40:	1116a6c0 	call	81116a6c <alt_get_errno>
81116b44:	1007883a 	mov	r3,r2
81116b48:	e0bffc17 	ldw	r2,-16(fp)
81116b4c:	0085c83a 	sub	r2,zero,r2
81116b50:	18800015 	stw	r2,0(r3)
        return -1;
81116b54:	00bfffc4 	movi	r2,-1
81116b58:	00000c06 	br	81116b8c <write+0xe4>
      }
      return rval;
81116b5c:	e0bffc17 	ldw	r2,-16(fp)
81116b60:	00000a06 	br	81116b8c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
81116b64:	1116a6c0 	call	81116a6c <alt_get_errno>
81116b68:	1007883a 	mov	r3,r2
81116b6c:	00800344 	movi	r2,13
81116b70:	18800015 	stw	r2,0(r3)
81116b74:	00000406 	br	81116b88 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
81116b78:	1116a6c0 	call	81116a6c <alt_get_errno>
81116b7c:	1007883a 	mov	r3,r2
81116b80:	00801444 	movi	r2,81
81116b84:	18800015 	stw	r2,0(r3)
  }
  return -1;
81116b88:	00bfffc4 	movi	r2,-1
}
81116b8c:	e037883a 	mov	sp,fp
81116b90:	dfc00117 	ldw	ra,4(sp)
81116b94:	df000017 	ldw	fp,0(sp)
81116b98:	dec00204 	addi	sp,sp,8
81116b9c:	f800283a 	ret

81116ba0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
81116ba0:	deffde04 	addi	sp,sp,-136
81116ba4:	dfc02115 	stw	ra,132(sp)
81116ba8:	df002015 	stw	fp,128(sp)
81116bac:	df002004 	addi	fp,sp,128
81116bb0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
81116bb4:	e0bfe104 	addi	r2,fp,-124
81116bb8:	100b883a 	mov	r5,r2
81116bbc:	01003fc4 	movi	r4,255
81116bc0:	111e0080 	call	8111e008 <OSTaskQuery>
81116bc4:	e0bffe05 	stb	r2,-8(fp)
  if (err != OS_NO_ERR)
81116bc8:	e0bffe03 	ldbu	r2,-8(fp)
81116bcc:	10803fcc 	andi	r2,r2,255
81116bd0:	10001e1e 	bne	r2,zero,81116c4c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
81116bd4:	e0bfed83 	ldbu	r2,-74(fp)
81116bd8:	10803fcc 	andi	r2,r2,255
81116bdc:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
81116be0:	d0a04217 	ldw	r2,-32504(gp)
81116be4:	e0fffc04 	addi	r3,fp,-16
81116be8:	180b883a 	mov	r5,r3
81116bec:	1009883a 	mov	r4,r2
81116bf0:	111c8200 	call	8111c820 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
81116bf4:	e0bffd83 	ldbu	r2,-10(fp)
81116bf8:	10803fcc 	andi	r2,r2,255
81116bfc:	10000726 	beq	r2,zero,81116c1c <__env_lock+0x7c>
81116c00:	d0a00f17 	ldw	r2,-32708(gp)
81116c04:	e0ffe017 	ldw	r3,-128(fp)
81116c08:	1880041e 	bne	r3,r2,81116c1c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
81116c0c:	d0a04117 	ldw	r2,-32508(gp)
81116c10:	10800044 	addi	r2,r2,1
81116c14:	d0a04115 	stw	r2,-32508(gp)
81116c18:	00000a06 	br	81116c44 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
81116c1c:	d0a04217 	ldw	r2,-32504(gp)
81116c20:	e0fffe04 	addi	r3,fp,-8
81116c24:	180d883a 	mov	r6,r3
81116c28:	000b883a 	mov	r5,zero
81116c2c:	1009883a 	mov	r4,r2
81116c30:	111c3980 	call	8111c398 <OSSemPend>
    locks  = 1;
81116c34:	00800044 	movi	r2,1
81116c38:	d0a04115 	stw	r2,-32508(gp)
    lockid = id;
81116c3c:	e0bfe017 	ldw	r2,-128(fp)
81116c40:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
81116c44:	0001883a 	nop
81116c48:	00000106 	br	81116c50 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
81116c4c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
81116c50:	e037883a 	mov	sp,fp
81116c54:	dfc00117 	ldw	ra,4(sp)
81116c58:	df000017 	ldw	fp,0(sp)
81116c5c:	dec00204 	addi	sp,sp,8
81116c60:	f800283a 	ret

81116c64 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
81116c64:	defffd04 	addi	sp,sp,-12
81116c68:	dfc00215 	stw	ra,8(sp)
81116c6c:	df000115 	stw	fp,4(sp)
81116c70:	df000104 	addi	fp,sp,4
81116c74:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
81116c78:	d0a04117 	ldw	r2,-32508(gp)
81116c7c:	10000b26 	beq	r2,zero,81116cac <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
81116c80:	d0a04117 	ldw	r2,-32508(gp)
81116c84:	10bfffc4 	addi	r2,r2,-1
81116c88:	d0a04115 	stw	r2,-32508(gp)
81116c8c:	d0a04117 	ldw	r2,-32508(gp)
81116c90:	1000071e 	bne	r2,zero,81116cb0 <__env_unlock+0x4c>
  {
    lockid = -1;
81116c94:	00bfffc4 	movi	r2,-1
81116c98:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
81116c9c:	d0a04217 	ldw	r2,-32504(gp)
81116ca0:	1009883a 	mov	r4,r2
81116ca4:	111c7100 	call	8111c710 <OSSemPost>
81116ca8:	00000106 	br	81116cb0 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
81116cac:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
81116cb0:	e037883a 	mov	sp,fp
81116cb4:	dfc00117 	ldw	ra,4(sp)
81116cb8:	df000017 	ldw	fp,0(sp)
81116cbc:	dec00204 	addi	sp,sp,8
81116cc0:	f800283a 	ret

81116cc4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
81116cc4:	deffda04 	addi	sp,sp,-152
81116cc8:	dfc02515 	stw	ra,148(sp)
81116ccc:	df002415 	stw	fp,144(sp)
81116cd0:	df002404 	addi	fp,sp,144
81116cd4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81116cd8:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
81116cdc:	d0a04543 	ldbu	r2,-32491(gp)
81116ce0:	10803fcc 	andi	r2,r2,255
81116ce4:	10800060 	cmpeqi	r2,r2,1
81116ce8:	10003626 	beq	r2,zero,81116dc4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
81116cec:	e0bfe104 	addi	r2,fp,-124
81116cf0:	100b883a 	mov	r5,r2
81116cf4:	01003fc4 	movi	r4,255
81116cf8:	111e0080 	call	8111e008 <OSTaskQuery>
81116cfc:	e0bffe05 	stb	r2,-8(fp)
  if (err != OS_NO_ERR)
81116d00:	e0bffe03 	ldbu	r2,-8(fp)
81116d04:	10803fcc 	andi	r2,r2,255
81116d08:	1000301e 	bne	r2,zero,81116dcc <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
81116d0c:	e0bfed83 	ldbu	r2,-74(fp)
81116d10:	10803fcc 	andi	r2,r2,255
81116d14:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
81116d18:	d0a04417 	ldw	r2,-32496(gp)
81116d1c:	e0fffc04 	addi	r3,fp,-16
81116d20:	180b883a 	mov	r5,r3
81116d24:	1009883a 	mov	r4,r2
81116d28:	111c8200 	call	8111c820 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81116d2c:	0005303a 	rdctl	r2,status
81116d30:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81116d34:	e0ffe017 	ldw	r3,-128(fp)
81116d38:	00bfff84 	movi	r2,-2
81116d3c:	1884703a 	and	r2,r3,r2
81116d40:	1001703a 	wrctl	status,r2
  
  return context;
81116d44:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
81116d48:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
81116d4c:	e0bffc0b 	ldhu	r2,-16(fp)
81116d50:	10bfffcc 	andi	r2,r2,65535
81116d54:	10000b1e 	bne	r2,zero,81116d84 <__malloc_lock+0xc0>
81116d58:	d0a01017 	ldw	r2,-32704(gp)
81116d5c:	e0ffdd17 	ldw	r3,-140(fp)
81116d60:	1880081e 	bne	r3,r2,81116d84 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
81116d64:	d0a04317 	ldw	r2,-32500(gp)
81116d68:	10800044 	addi	r2,r2,1
81116d6c:	d0a04315 	stw	r2,-32500(gp)
81116d70:	e0bfdc17 	ldw	r2,-144(fp)
81116d74:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81116d78:	e0bfde17 	ldw	r2,-136(fp)
81116d7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
81116d80:	00000e06 	br	81116dbc <__malloc_lock+0xf8>
81116d84:	e0bfdc17 	ldw	r2,-144(fp)
81116d88:	e0bfdf15 	stw	r2,-132(fp)
81116d8c:	e0bfdf17 	ldw	r2,-132(fp)
81116d90:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
81116d94:	d0a04417 	ldw	r2,-32496(gp)
81116d98:	e0fffe04 	addi	r3,fp,-8
81116d9c:	180d883a 	mov	r6,r3
81116da0:	000b883a 	mov	r5,zero
81116da4:	1009883a 	mov	r4,r2
81116da8:	111c3980 	call	8111c398 <OSSemPend>
    locks  = 1;
81116dac:	00800044 	movi	r2,1
81116db0:	d0a04315 	stw	r2,-32500(gp)
    lockid = id;
81116db4:	e0bfdd17 	ldw	r2,-140(fp)
81116db8:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
81116dbc:	0001883a 	nop
81116dc0:	00000306 	br	81116dd0 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
81116dc4:	0001883a 	nop
81116dc8:	00000106 	br	81116dd0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
81116dcc:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
81116dd0:	e037883a 	mov	sp,fp
81116dd4:	dfc00117 	ldw	ra,4(sp)
81116dd8:	df000017 	ldw	fp,0(sp)
81116ddc:	dec00204 	addi	sp,sp,8
81116de0:	f800283a 	ret

81116de4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
81116de4:	defff804 	addi	sp,sp,-32
81116de8:	dfc00715 	stw	ra,28(sp)
81116dec:	df000615 	stw	fp,24(sp)
81116df0:	df000604 	addi	fp,sp,24
81116df4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81116df8:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
81116dfc:	d0a04543 	ldbu	r2,-32491(gp)
81116e00:	10803fcc 	andi	r2,r2,255
81116e04:	10800060 	cmpeqi	r2,r2,1
81116e08:	10002326 	beq	r2,zero,81116e98 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81116e0c:	0005303a 	rdctl	r2,status
81116e10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81116e14:	e0fffe17 	ldw	r3,-8(fp)
81116e18:	00bfff84 	movi	r2,-2
81116e1c:	1884703a 	and	r2,r3,r2
81116e20:	1001703a 	wrctl	status,r2
  
  return context;
81116e24:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
81116e28:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
81116e2c:	d0a04317 	ldw	r2,-32500(gp)
81116e30:	1000051e 	bne	r2,zero,81116e48 <__malloc_unlock+0x64>
81116e34:	e0bffa17 	ldw	r2,-24(fp)
81116e38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81116e3c:	e0bffb17 	ldw	r2,-20(fp)
81116e40:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
81116e44:	00001506 	br	81116e9c <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
81116e48:	d0a04317 	ldw	r2,-32500(gp)
81116e4c:	10bfffc4 	addi	r2,r2,-1
81116e50:	d0a04315 	stw	r2,-32500(gp)
81116e54:	d0a04317 	ldw	r2,-32500(gp)
81116e58:	10000a1e 	bne	r2,zero,81116e84 <__malloc_unlock+0xa0>
  {
    lockid = -1;
81116e5c:	00bfffc4 	movi	r2,-1
81116e60:	d0a01015 	stw	r2,-32704(gp)
81116e64:	e0bffa17 	ldw	r2,-24(fp)
81116e68:	e0bffc15 	stw	r2,-16(fp)
81116e6c:	e0bffc17 	ldw	r2,-16(fp)
81116e70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
81116e74:	d0a04417 	ldw	r2,-32496(gp)
81116e78:	1009883a 	mov	r4,r2
81116e7c:	111c7100 	call	8111c710 <OSSemPost>
81116e80:	00000606 	br	81116e9c <__malloc_unlock+0xb8>
81116e84:	e0bffa17 	ldw	r2,-24(fp)
81116e88:	e0bffd15 	stw	r2,-12(fp)
81116e8c:	e0bffd17 	ldw	r2,-12(fp)
81116e90:	1001703a 	wrctl	status,r2
81116e94:	00000106 	br	81116e9c <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
81116e98:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
81116e9c:	e037883a 	mov	sp,fp
81116ea0:	dfc00117 	ldw	ra,4(sp)
81116ea4:	df000017 	ldw	fp,0(sp)
81116ea8:	dec00204 	addi	sp,sp,8
81116eac:	f800283a 	ret

81116eb0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
81116eb0:	defff704 	addi	sp,sp,-36
81116eb4:	dfc00815 	stw	ra,32(sp)
81116eb8:	df000715 	stw	fp,28(sp)
81116ebc:	df000704 	addi	fp,sp,28
81116ec0:	e13ffd15 	stw	r4,-12(fp)
81116ec4:	e17ffe15 	stw	r5,-8(fp)
81116ec8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81116ecc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81116ed0:	e0bfff17 	ldw	r2,-4(fp)
81116ed4:	1000021e 	bne	r2,zero,81116ee0 <OSEventNameGet+0x30>
        return (0);
81116ed8:	0005883a 	mov	r2,zero
81116edc:	00003706 	br	81116fbc <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81116ee0:	e0bffd17 	ldw	r2,-12(fp)
81116ee4:	1000051e 	bne	r2,zero,81116efc <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
81116ee8:	e0bfff17 	ldw	r2,-4(fp)
81116eec:	00c00104 	movi	r3,4
81116ef0:	10c00005 	stb	r3,0(r2)
        return (0);
81116ef4:	0005883a 	mov	r2,zero
81116ef8:	00003006 	br	81116fbc <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81116efc:	e0bffe17 	ldw	r2,-8(fp)
81116f00:	1000051e 	bne	r2,zero,81116f18 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
81116f04:	e0bfff17 	ldw	r2,-4(fp)
81116f08:	00c00304 	movi	r3,12
81116f0c:	10c00005 	stb	r3,0(r2)
        return (0);
81116f10:	0005883a 	mov	r2,zero
81116f14:	00002906 	br	81116fbc <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81116f18:	d0a05403 	ldbu	r2,-32432(gp)
81116f1c:	10803fcc 	andi	r2,r2,255
81116f20:	10000526 	beq	r2,zero,81116f38 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
81116f24:	e0bfff17 	ldw	r2,-4(fp)
81116f28:	00c00444 	movi	r3,17
81116f2c:	10c00005 	stb	r3,0(r2)
        return (0);
81116f30:	0005883a 	mov	r2,zero
81116f34:	00002106 	br	81116fbc <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
81116f38:	e0bffd17 	ldw	r2,-12(fp)
81116f3c:	10800003 	ldbu	r2,0(r2)
81116f40:	10803fcc 	andi	r2,r2,255
81116f44:	10bfffc4 	addi	r2,r2,-1
81116f48:	10800128 	cmpgeui	r2,r2,4
81116f4c:	10000526 	beq	r2,zero,81116f64 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81116f50:	e0bfff17 	ldw	r2,-4(fp)
81116f54:	00c00044 	movi	r3,1
81116f58:	10c00005 	stb	r3,0(r2)
             return (0);
81116f5c:	0005883a 	mov	r2,zero
81116f60:	00001606 	br	81116fbc <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81116f64:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81116f68:	0005303a 	rdctl	r2,status
81116f6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81116f70:	e0fffb17 	ldw	r3,-20(fp)
81116f74:	00bfff84 	movi	r2,-2
81116f78:	1884703a 	and	r2,r3,r2
81116f7c:	1001703a 	wrctl	status,r2
  
  return context;
81116f80:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
81116f84:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
81116f88:	e0bffd17 	ldw	r2,-12(fp)
81116f8c:	108003c4 	addi	r2,r2,15
81116f90:	100b883a 	mov	r5,r2
81116f94:	e13ffe17 	ldw	r4,-8(fp)
81116f98:	11189340 	call	81118934 <OS_StrCopy>
81116f9c:	e0bffa05 	stb	r2,-24(fp)
81116fa0:	e0bff917 	ldw	r2,-28(fp)
81116fa4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81116fa8:	e0bffc17 	ldw	r2,-16(fp)
81116fac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81116fb0:	e0bfff17 	ldw	r2,-4(fp)
81116fb4:	10000005 	stb	zero,0(r2)
    return (len);
81116fb8:	e0bffa03 	ldbu	r2,-24(fp)
}
81116fbc:	e037883a 	mov	sp,fp
81116fc0:	dfc00117 	ldw	ra,4(sp)
81116fc4:	df000017 	ldw	fp,0(sp)
81116fc8:	dec00204 	addi	sp,sp,8
81116fcc:	f800283a 	ret

81116fd0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
81116fd0:	defff604 	addi	sp,sp,-40
81116fd4:	dfc00915 	stw	ra,36(sp)
81116fd8:	df000815 	stw	fp,32(sp)
81116fdc:	df000804 	addi	fp,sp,32
81116fe0:	e13ffd15 	stw	r4,-12(fp)
81116fe4:	e17ffe15 	stw	r5,-8(fp)
81116fe8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81116fec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81116ff0:	e0bfff17 	ldw	r2,-4(fp)
81116ff4:	10004026 	beq	r2,zero,811170f8 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81116ff8:	e0bffd17 	ldw	r2,-12(fp)
81116ffc:	1000041e 	bne	r2,zero,81117010 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
81117000:	e0bfff17 	ldw	r2,-4(fp)
81117004:	00c00104 	movi	r3,4
81117008:	10c00005 	stb	r3,0(r2)
        return;
8111700c:	00003b06 	br	811170fc <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81117010:	e0bffe17 	ldw	r2,-8(fp)
81117014:	1000041e 	bne	r2,zero,81117028 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
81117018:	e0bfff17 	ldw	r2,-4(fp)
8111701c:	00c00304 	movi	r3,12
81117020:	10c00005 	stb	r3,0(r2)
        return;
81117024:	00003506 	br	811170fc <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81117028:	d0a05403 	ldbu	r2,-32432(gp)
8111702c:	10803fcc 	andi	r2,r2,255
81117030:	10000426 	beq	r2,zero,81117044 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
81117034:	e0bfff17 	ldw	r2,-4(fp)
81117038:	00c00484 	movi	r3,18
8111703c:	10c00005 	stb	r3,0(r2)
        return;
81117040:	00002e06 	br	811170fc <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
81117044:	e0bffd17 	ldw	r2,-12(fp)
81117048:	10800003 	ldbu	r2,0(r2)
8111704c:	10803fcc 	andi	r2,r2,255
81117050:	10bfffc4 	addi	r2,r2,-1
81117054:	10800128 	cmpgeui	r2,r2,4
81117058:	10000426 	beq	r2,zero,8111706c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
8111705c:	e0bfff17 	ldw	r2,-4(fp)
81117060:	00c00044 	movi	r3,1
81117064:	10c00005 	stb	r3,0(r2)
             return;
81117068:	00002406 	br	811170fc <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
8111706c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117070:	0005303a 	rdctl	r2,status
81117074:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117078:	e0fffc17 	ldw	r3,-16(fp)
8111707c:	00bfff84 	movi	r2,-2
81117080:	1884703a 	and	r2,r3,r2
81117084:	1001703a 	wrctl	status,r2
  
  return context;
81117088:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
8111708c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
81117090:	e13ffe17 	ldw	r4,-8(fp)
81117094:	11189a80 	call	811189a8 <OS_StrLen>
81117098:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
8111709c:	e0bffa03 	ldbu	r2,-24(fp)
811170a0:	10800830 	cmpltui	r2,r2,32
811170a4:	1000081e 	bne	r2,zero,811170c8 <OSEventNameSet+0xf8>
811170a8:	e0bff817 	ldw	r2,-32(fp)
811170ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811170b0:	e0bff917 	ldw	r2,-28(fp)
811170b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
811170b8:	e0bfff17 	ldw	r2,-4(fp)
811170bc:	00c002c4 	movi	r3,11
811170c0:	10c00005 	stb	r3,0(r2)
        return;
811170c4:	00000d06 	br	811170fc <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
811170c8:	e0bffd17 	ldw	r2,-12(fp)
811170cc:	108003c4 	addi	r2,r2,15
811170d0:	e17ffe17 	ldw	r5,-8(fp)
811170d4:	1009883a 	mov	r4,r2
811170d8:	11189340 	call	81118934 <OS_StrCopy>
811170dc:	e0bff817 	ldw	r2,-32(fp)
811170e0:	e0bffb15 	stw	r2,-20(fp)
811170e4:	e0bffb17 	ldw	r2,-20(fp)
811170e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811170ec:	e0bfff17 	ldw	r2,-4(fp)
811170f0:	10000005 	stb	zero,0(r2)
811170f4:	00000106 	br	811170fc <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
811170f8:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
811170fc:	e037883a 	mov	sp,fp
81117100:	dfc00117 	ldw	ra,4(sp)
81117104:	df000017 	ldw	fp,0(sp)
81117108:	dec00204 	addi	sp,sp,8
8111710c:	f800283a 	ret

81117110 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
81117110:	deffed04 	addi	sp,sp,-76
81117114:	dfc01215 	stw	ra,72(sp)
81117118:	df001115 	stw	fp,68(sp)
8111711c:	df001104 	addi	fp,sp,68
81117120:	e13ffc15 	stw	r4,-16(fp)
81117124:	e17ffd15 	stw	r5,-12(fp)
81117128:	e1bffe15 	stw	r6,-8(fp)
8111712c:	3805883a 	mov	r2,r7
81117130:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
81117134:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
81117138:	e0800217 	ldw	r2,8(fp)
8111713c:	1000021e 	bne	r2,zero,81117148 <OSEventPendMulti+0x38>
        return (0);
81117140:	0005883a 	mov	r2,zero
81117144:	00017106 	br	8111770c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
81117148:	e0bffc17 	ldw	r2,-16(fp)
8111714c:	1000051e 	bne	r2,zero,81117164 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
81117150:	e0800217 	ldw	r2,8(fp)
81117154:	00c00104 	movi	r3,4
81117158:	10c00005 	stb	r3,0(r2)
        return (0);
8111715c:	0005883a 	mov	r2,zero
81117160:	00016a06 	br	8111770c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
81117164:	e0bffd17 	ldw	r2,-12(fp)
81117168:	1000051e 	bne	r2,zero,81117180 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
8111716c:	e0800217 	ldw	r2,8(fp)
81117170:	00c00104 	movi	r3,4
81117174:	10c00005 	stb	r3,0(r2)
        return (0);
81117178:	0005883a 	mov	r2,zero
8111717c:	00016306 	br	8111770c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
81117180:	e0bffe17 	ldw	r2,-8(fp)
81117184:	1000051e 	bne	r2,zero,8111719c <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
81117188:	e0800217 	ldw	r2,8(fp)
8111718c:	00c00104 	movi	r3,4
81117190:	10c00005 	stb	r3,0(r2)
        return (0);
81117194:	0005883a 	mov	r2,zero
81117198:	00015c06 	br	8111770c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
8111719c:	e0bffd17 	ldw	r2,-12(fp)
811171a0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
811171a4:	e0bffc17 	ldw	r2,-16(fp)
811171a8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
811171ac:	e0bfef17 	ldw	r2,-68(fp)
811171b0:	10800017 	ldw	r2,0(r2)
811171b4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
811171b8:	00001906 	br	81117220 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
811171bc:	e0bff017 	ldw	r2,-64(fp)
811171c0:	10800003 	ldbu	r2,0(r2)
811171c4:	10803fcc 	andi	r2,r2,255
811171c8:	10c000a0 	cmpeqi	r3,r2,2
811171cc:	1800091e 	bne	r3,zero,811171f4 <OSEventPendMulti+0xe4>
811171d0:	10c000e0 	cmpeqi	r3,r2,3
811171d4:	1800091e 	bne	r3,zero,811171fc <OSEventPendMulti+0xec>
811171d8:	10800060 	cmpeqi	r2,r2,1
811171dc:	1000091e 	bne	r2,zero,81117204 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
811171e0:	e0800217 	ldw	r2,8(fp)
811171e4:	00c00044 	movi	r3,1
811171e8:	10c00005 	stb	r3,0(r2)
                 return (0);
811171ec:	0005883a 	mov	r2,zero
811171f0:	00014606 	br	8111770c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
811171f4:	0001883a 	nop
811171f8:	00000306 	br	81117208 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
811171fc:	0001883a 	nop
81117200:	00000106 	br	81117208 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
81117204:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
81117208:	e0bfef17 	ldw	r2,-68(fp)
8111720c:	10800104 	addi	r2,r2,4
81117210:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81117214:	e0bfef17 	ldw	r2,-68(fp)
81117218:	10800017 	ldw	r2,0(r2)
8111721c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
81117220:	e0bff017 	ldw	r2,-64(fp)
81117224:	103fe51e 	bne	r2,zero,811171bc <__reset+0xfb0f71bc>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
81117228:	d0a05403 	ldbu	r2,-32432(gp)
8111722c:	10803fcc 	andi	r2,r2,255
81117230:	10000526 	beq	r2,zero,81117248 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
81117234:	e0800217 	ldw	r2,8(fp)
81117238:	00c00084 	movi	r3,2
8111723c:	10c00005 	stb	r3,0(r2)
        return (0);
81117240:	0005883a 	mov	r2,zero
81117244:	00013106 	br	8111770c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
81117248:	d0a04503 	ldbu	r2,-32492(gp)
8111724c:	10803fcc 	andi	r2,r2,255
81117250:	10000526 	beq	r2,zero,81117268 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
81117254:	e0800217 	ldw	r2,8(fp)
81117258:	00c00344 	movi	r3,13
8111725c:	10c00005 	stb	r3,0(r2)
        return (0);
81117260:	0005883a 	mov	r2,zero
81117264:	00012906 	br	8111770c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117268:	0005303a 	rdctl	r2,status
8111726c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117270:	e0fffb17 	ldw	r3,-20(fp)
81117274:	00bfff84 	movi	r2,-2
81117278:	1884703a 	and	r2,r3,r2
8111727c:	1001703a 	wrctl	status,r2
  
  return context;
81117280:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
81117284:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
81117288:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
8111728c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
81117290:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
81117294:	e0bffc17 	ldw	r2,-16(fp)
81117298:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
8111729c:	e0bfef17 	ldw	r2,-68(fp)
811172a0:	10800017 	ldw	r2,0(r2)
811172a4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
811172a8:	00008106 	br	811174b0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
811172ac:	e0bff017 	ldw	r2,-64(fp)
811172b0:	10800003 	ldbu	r2,0(r2)
811172b4:	10803fcc 	andi	r2,r2,255
811172b8:	10c000a0 	cmpeqi	r3,r2,2
811172bc:	18003c1e 	bne	r3,zero,811173b0 <OSEventPendMulti+0x2a0>
811172c0:	10c000e0 	cmpeqi	r3,r2,3
811172c4:	1800031e 	bne	r3,zero,811172d4 <OSEventPendMulti+0x1c4>
811172c8:	10800060 	cmpeqi	r2,r2,1
811172cc:	10001e1e 	bne	r2,zero,81117348 <OSEventPendMulti+0x238>
811172d0:	00006606 	br	8111746c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
811172d4:	e0bff017 	ldw	r2,-64(fp)
811172d8:	1080020b 	ldhu	r2,8(r2)
811172dc:	10bfffcc 	andi	r2,r2,65535
811172e0:	10001526 	beq	r2,zero,81117338 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
811172e4:	e0bff017 	ldw	r2,-64(fp)
811172e8:	1080020b 	ldhu	r2,8(r2)
811172ec:	10bfffc4 	addi	r2,r2,-1
811172f0:	1007883a 	mov	r3,r2
811172f4:	e0bff017 	ldw	r2,-64(fp)
811172f8:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
811172fc:	e0bffd17 	ldw	r2,-12(fp)
81117300:	10c00104 	addi	r3,r2,4
81117304:	e0fffd15 	stw	r3,-12(fp)
81117308:	e0fff017 	ldw	r3,-64(fp)
8111730c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
81117310:	00800044 	movi	r2,1
81117314:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
81117318:	e0bffe17 	ldw	r2,-8(fp)
8111731c:	10c00104 	addi	r3,r2,4
81117320:	e0fffe15 	stw	r3,-8(fp)
81117324:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
81117328:	e0bff18b 	ldhu	r2,-58(fp)
8111732c:	10800044 	addi	r2,r2,1
81117330:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
81117334:	00005806 	br	81117498 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
81117338:	e0bff203 	ldbu	r2,-56(fp)
8111733c:	10800054 	ori	r2,r2,1
81117340:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81117344:	00005406 	br	81117498 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
81117348:	e0bff017 	ldw	r2,-64(fp)
8111734c:	10800117 	ldw	r2,4(r2)
81117350:	10001326 	beq	r2,zero,811173a0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
81117354:	e0bffe17 	ldw	r2,-8(fp)
81117358:	10c00104 	addi	r3,r2,4
8111735c:	e0fffe15 	stw	r3,-8(fp)
81117360:	e0fff017 	ldw	r3,-64(fp)
81117364:	18c00117 	ldw	r3,4(r3)
81117368:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
8111736c:	e0bff017 	ldw	r2,-64(fp)
81117370:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
81117374:	e0bffd17 	ldw	r2,-12(fp)
81117378:	10c00104 	addi	r3,r2,4
8111737c:	e0fffd15 	stw	r3,-12(fp)
81117380:	e0fff017 	ldw	r3,-64(fp)
81117384:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
81117388:	00800044 	movi	r2,1
8111738c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81117390:	e0bff18b 	ldhu	r2,-58(fp)
81117394:	10800044 	addi	r2,r2,1
81117398:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
8111739c:	00003e06 	br	81117498 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
811173a0:	e0bff203 	ldbu	r2,-56(fp)
811173a4:	10800094 	ori	r2,r2,2
811173a8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
811173ac:	00003a06 	br	81117498 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
811173b0:	e0bff017 	ldw	r2,-64(fp)
811173b4:	10800117 	ldw	r2,4(r2)
811173b8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
811173bc:	e0bff517 	ldw	r2,-44(fp)
811173c0:	1080058b 	ldhu	r2,22(r2)
811173c4:	10bfffcc 	andi	r2,r2,65535
811173c8:	10002426 	beq	r2,zero,8111745c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
811173cc:	e0bffe17 	ldw	r2,-8(fp)
811173d0:	10c00104 	addi	r3,r2,4
811173d4:	e0fffe15 	stw	r3,-8(fp)
811173d8:	e0fff517 	ldw	r3,-44(fp)
811173dc:	18c00417 	ldw	r3,16(r3)
811173e0:	19400104 	addi	r5,r3,4
811173e4:	e13ff517 	ldw	r4,-44(fp)
811173e8:	21400415 	stw	r5,16(r4)
811173ec:	18c00017 	ldw	r3,0(r3)
811173f0:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
811173f4:	e0bff517 	ldw	r2,-44(fp)
811173f8:	10c00417 	ldw	r3,16(r2)
811173fc:	e0bff517 	ldw	r2,-44(fp)
81117400:	10800217 	ldw	r2,8(r2)
81117404:	1880041e 	bne	r3,r2,81117418 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
81117408:	e0bff517 	ldw	r2,-44(fp)
8111740c:	10c00117 	ldw	r3,4(r2)
81117410:	e0bff517 	ldw	r2,-44(fp)
81117414:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
81117418:	e0bff517 	ldw	r2,-44(fp)
8111741c:	1080058b 	ldhu	r2,22(r2)
81117420:	10bfffc4 	addi	r2,r2,-1
81117424:	1007883a 	mov	r3,r2
81117428:	e0bff517 	ldw	r2,-44(fp)
8111742c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
81117430:	e0bffd17 	ldw	r2,-12(fp)
81117434:	10c00104 	addi	r3,r2,4
81117438:	e0fffd15 	stw	r3,-12(fp)
8111743c:	e0fff017 	ldw	r3,-64(fp)
81117440:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
81117444:	00800044 	movi	r2,1
81117448:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
8111744c:	e0bff18b 	ldhu	r2,-58(fp)
81117450:	10800044 	addi	r2,r2,1
81117454:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
81117458:	00000f06 	br	81117498 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
8111745c:	e0bff203 	ldbu	r2,-56(fp)
81117460:	10800114 	ori	r2,r2,4
81117464:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81117468:	00000b06 	br	81117498 <OSEventPendMulti+0x388>
8111746c:	e0bff317 	ldw	r2,-52(fp)
81117470:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81117474:	e0bff417 	ldw	r2,-48(fp)
81117478:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
8111747c:	e0bffd17 	ldw	r2,-12(fp)
81117480:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
81117484:	e0800217 	ldw	r2,8(fp)
81117488:	00c00044 	movi	r3,1
8111748c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
81117490:	e0bff18b 	ldhu	r2,-58(fp)
81117494:	00009d06 	br	8111770c <OSEventPendMulti+0x5fc>
        }
        pevents++;
81117498:	e0bfef17 	ldw	r2,-68(fp)
8111749c:	10800104 	addi	r2,r2,4
811174a0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
811174a4:	e0bfef17 	ldw	r2,-68(fp)
811174a8:	10800017 	ldw	r2,0(r2)
811174ac:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
811174b0:	e0bff017 	ldw	r2,-64(fp)
811174b4:	103f7d1e 	bne	r2,zero,811172ac <__reset+0xfb0f72ac>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
811174b8:	e0bff103 	ldbu	r2,-60(fp)
811174bc:	10800058 	cmpnei	r2,r2,1
811174c0:	10000a1e 	bne	r2,zero,811174ec <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
811174c4:	e0bffd17 	ldw	r2,-12(fp)
811174c8:	10000015 	stw	zero,0(r2)
811174cc:	e0bff317 	ldw	r2,-52(fp)
811174d0:	e0bff615 	stw	r2,-40(fp)
811174d4:	e0bff617 	ldw	r2,-40(fp)
811174d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
811174dc:	e0800217 	ldw	r2,8(fp)
811174e0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
811174e4:	e0bff18b 	ldhu	r2,-58(fp)
811174e8:	00008806 	br	8111770c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
811174ec:	d0a05517 	ldw	r2,-32428(gp)
811174f0:	d0e05517 	ldw	r3,-32428(gp)
811174f4:	19000c03 	ldbu	r4,48(r3)
811174f8:	e0fff203 	ldbu	r3,-56(fp)
811174fc:	20c6b03a 	or	r3,r4,r3
81117500:	1809883a 	mov	r4,r3
81117504:	00ffe004 	movi	r3,-128
81117508:	20c6b03a 	or	r3,r4,r3
8111750c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81117510:	d0a05517 	ldw	r2,-32428(gp)
81117514:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
81117518:	d0a05517 	ldw	r2,-32428(gp)
8111751c:	e0ffff0b 	ldhu	r3,-4(fp)
81117520:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
81117524:	e13ffc17 	ldw	r4,-16(fp)
81117528:	111804c0 	call	8111804c <OS_EventTaskWaitMulti>
8111752c:	e0bff317 	ldw	r2,-52(fp)
81117530:	e0bff915 	stw	r2,-28(fp)
81117534:	e0bff917 	ldw	r2,-28(fp)
81117538:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
8111753c:	11187f00 	call	811187f0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117540:	0005303a 	rdctl	r2,status
81117544:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117548:	e0fff717 	ldw	r3,-36(fp)
8111754c:	00bfff84 	movi	r2,-2
81117550:	1884703a 	and	r2,r3,r2
81117554:	1001703a 	wrctl	status,r2
  
  return context;
81117558:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
8111755c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
81117560:	d0a05517 	ldw	r2,-32428(gp)
81117564:	10800c43 	ldbu	r2,49(r2)
81117568:	10803fcc 	andi	r2,r2,255
8111756c:	10000226 	beq	r2,zero,81117578 <OSEventPendMulti+0x468>
81117570:	108000a0 	cmpeqi	r2,r2,2
81117574:	10001826 	beq	r2,zero,811175d8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
81117578:	d0a05517 	ldw	r2,-32428(gp)
8111757c:	10800717 	ldw	r2,28(r2)
81117580:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
81117584:	e0bff017 	ldw	r2,-64(fp)
81117588:	10000b26 	beq	r2,zero,811175b8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
8111758c:	e0bffd17 	ldw	r2,-12(fp)
81117590:	10c00104 	addi	r3,r2,4
81117594:	e0fffd15 	stw	r3,-12(fp)
81117598:	e0fff017 	ldw	r3,-64(fp)
8111759c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
811175a0:	e0bffd17 	ldw	r2,-12(fp)
811175a4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
811175a8:	e0bff18b 	ldhu	r2,-58(fp)
811175ac:	10800044 	addi	r2,r2,1
811175b0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
811175b4:	00000d06 	br	811175ec <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
811175b8:	d0a05517 	ldw	r2,-32428(gp)
811175bc:	00c00044 	movi	r3,1
811175c0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
811175c4:	d0a05517 	ldw	r2,-32428(gp)
811175c8:	e17ffc17 	ldw	r5,-16(fp)
811175cc:	1009883a 	mov	r4,r2
811175d0:	11182540 	call	81118254 <OS_EventTaskRemoveMulti>
             }
			 break;
811175d4:	00000506 	br	811175ec <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
811175d8:	d0a05517 	ldw	r2,-32428(gp)
811175dc:	e17ffc17 	ldw	r5,-16(fp)
811175e0:	1009883a 	mov	r4,r2
811175e4:	11182540 	call	81118254 <OS_EventTaskRemoveMulti>
             break;
811175e8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
811175ec:	d0a05517 	ldw	r2,-32428(gp)
811175f0:	10800c43 	ldbu	r2,49(r2)
811175f4:	10803fcc 	andi	r2,r2,255
811175f8:	10000326 	beq	r2,zero,81117608 <OSEventPendMulti+0x4f8>
811175fc:	108000a0 	cmpeqi	r2,r2,2
81117600:	1000231e 	bne	r2,zero,81117690 <OSEventPendMulti+0x580>
81117604:	00002a06 	br	811176b0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
81117608:	e0bff017 	ldw	r2,-64(fp)
8111760c:	10800003 	ldbu	r2,0(r2)
81117610:	10803fcc 	andi	r2,r2,255
81117614:	0080100e 	bge	zero,r2,81117658 <OSEventPendMulti+0x548>
81117618:	10c000d0 	cmplti	r3,r2,3
8111761c:	1800071e 	bne	r3,zero,8111763c <OSEventPendMulti+0x52c>
81117620:	108000e0 	cmpeqi	r2,r2,3
81117624:	10000c26 	beq	r2,zero,81117658 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
81117628:	e0bffe17 	ldw	r2,-8(fp)
8111762c:	10c00104 	addi	r3,r2,4
81117630:	e0fffe15 	stw	r3,-8(fp)
81117634:	10000015 	stw	zero,0(r2)
                      break;
81117638:	00001206 	br	81117684 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
8111763c:	e0bffe17 	ldw	r2,-8(fp)
81117640:	10c00104 	addi	r3,r2,4
81117644:	e0fffe15 	stw	r3,-8(fp)
81117648:	d0e05517 	ldw	r3,-32428(gp)
8111764c:	18c00917 	ldw	r3,36(r3)
81117650:	10c00015 	stw	r3,0(r2)
                      break;
81117654:	00000b06 	br	81117684 <OSEventPendMulti+0x574>
81117658:	e0bff317 	ldw	r2,-52(fp)
8111765c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81117660:	e0bff817 	ldw	r2,-32(fp)
81117664:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
81117668:	e0bffd17 	ldw	r2,-12(fp)
8111766c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
81117670:	e0800217 	ldw	r2,8(fp)
81117674:	00c00044 	movi	r3,1
81117678:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
8111767c:	e0bff18b 	ldhu	r2,-58(fp)
81117680:	00002206 	br	8111770c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
81117684:	e0800217 	ldw	r2,8(fp)
81117688:	10000005 	stb	zero,0(r2)
             break;
8111768c:	00001006 	br	811176d0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
81117690:	e0bffe17 	ldw	r2,-8(fp)
81117694:	10c00104 	addi	r3,r2,4
81117698:	e0fffe15 	stw	r3,-8(fp)
8111769c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
811176a0:	e0800217 	ldw	r2,8(fp)
811176a4:	00c00384 	movi	r3,14
811176a8:	10c00005 	stb	r3,0(r2)
             break;
811176ac:	00000806 	br	811176d0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
811176b0:	e0bffe17 	ldw	r2,-8(fp)
811176b4:	10c00104 	addi	r3,r2,4
811176b8:	e0fffe15 	stw	r3,-8(fp)
811176bc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
811176c0:	e0800217 	ldw	r2,8(fp)
811176c4:	00c00284 	movi	r3,10
811176c8:	10c00005 	stb	r3,0(r2)
             break;
811176cc:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
811176d0:	d0a05517 	ldw	r2,-32428(gp)
811176d4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
811176d8:	d0a05517 	ldw	r2,-32428(gp)
811176dc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
811176e0:	d0a05517 	ldw	r2,-32428(gp)
811176e4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
811176e8:	d0a05517 	ldw	r2,-32428(gp)
811176ec:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
811176f0:	d0a05517 	ldw	r2,-32428(gp)
811176f4:	10000915 	stw	zero,36(r2)
811176f8:	e0bff317 	ldw	r2,-52(fp)
811176fc:	e0bffa15 	stw	r2,-24(fp)
81117700:	e0bffa17 	ldw	r2,-24(fp)
81117704:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
81117708:	e0bff18b 	ldhu	r2,-58(fp)
}
8111770c:	e037883a 	mov	sp,fp
81117710:	dfc00117 	ldw	ra,4(sp)
81117714:	df000017 	ldw	fp,0(sp)
81117718:	dec00204 	addi	sp,sp,8
8111771c:	f800283a 	ret

81117720 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
81117720:	defffe04 	addi	sp,sp,-8
81117724:	dfc00115 	stw	ra,4(sp)
81117728:	df000015 	stw	fp,0(sp)
8111772c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
81117730:	11240580 	call	81124058 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
81117734:	111849c0 	call	8111849c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
81117738:	11184e40 	call	811184e4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
8111773c:	11186500 	call	81118650 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
81117740:	11183bc0 	call	811183bc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
81117744:	111a5000 	call	8111a500 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
81117748:	111ae000 	call	8111ae00 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
8111774c:	111bf280 	call	8111bf28 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
81117750:	11185500 	call	81118550 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
81117754:	11185d00 	call	811185d0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
81117758:	11240780 	call	81124078 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
8111775c:	1118ed40 	call	81118ed4 <OSDebugInit>
#endif
}
81117760:	0001883a 	nop
81117764:	e037883a 	mov	sp,fp
81117768:	dfc00117 	ldw	ra,4(sp)
8111776c:	df000017 	ldw	fp,0(sp)
81117770:	dec00204 	addi	sp,sp,8
81117774:	f800283a 	ret

81117778 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
81117778:	deffff04 	addi	sp,sp,-4
8111777c:	df000015 	stw	fp,0(sp)
81117780:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
81117784:	d0a04543 	ldbu	r2,-32491(gp)
81117788:	10803fcc 	andi	r2,r2,255
8111778c:	10800058 	cmpnei	r2,r2,1
81117790:	1000071e 	bne	r2,zero,811177b0 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
81117794:	d0a05403 	ldbu	r2,-32432(gp)
81117798:	10803fcc 	andi	r2,r2,255
8111779c:	10803fe0 	cmpeqi	r2,r2,255
811177a0:	1000031e 	bne	r2,zero,811177b0 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
811177a4:	d0a05403 	ldbu	r2,-32432(gp)
811177a8:	10800044 	addi	r2,r2,1
811177ac:	d0a05405 	stb	r2,-32432(gp)
        }
    }
}
811177b0:	0001883a 	nop
811177b4:	e037883a 	mov	sp,fp
811177b8:	df000017 	ldw	fp,0(sp)
811177bc:	dec00104 	addi	sp,sp,4
811177c0:	f800283a 	ret

811177c4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
811177c4:	defffb04 	addi	sp,sp,-20
811177c8:	dfc00415 	stw	ra,16(sp)
811177cc:	df000315 	stw	fp,12(sp)
811177d0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
811177d4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
811177d8:	d0a04543 	ldbu	r2,-32491(gp)
811177dc:	10803fcc 	andi	r2,r2,255
811177e0:	10800058 	cmpnei	r2,r2,1
811177e4:	10002f1e 	bne	r2,zero,811178a4 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811177e8:	0005303a 	rdctl	r2,status
811177ec:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811177f0:	e0ffff17 	ldw	r3,-4(fp)
811177f4:	00bfff84 	movi	r2,-2
811177f8:	1884703a 	and	r2,r3,r2
811177fc:	1001703a 	wrctl	status,r2
  
  return context;
81117800:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81117804:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
81117808:	d0a05403 	ldbu	r2,-32432(gp)
8111780c:	10803fcc 	andi	r2,r2,255
81117810:	10000326 	beq	r2,zero,81117820 <OSIntExit+0x5c>
            OSIntNesting--;
81117814:	d0a05403 	ldbu	r2,-32432(gp)
81117818:	10bfffc4 	addi	r2,r2,-1
8111781c:	d0a05405 	stb	r2,-32432(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
81117820:	d0a05403 	ldbu	r2,-32432(gp)
81117824:	10803fcc 	andi	r2,r2,255
81117828:	10001a1e 	bne	r2,zero,81117894 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
8111782c:	d0a04503 	ldbu	r2,-32492(gp)
81117830:	10803fcc 	andi	r2,r2,255
81117834:	1000171e 	bne	r2,zero,81117894 <OSIntExit+0xd0>
                OS_SchedNew();
81117838:	11188c00 	call	811188c0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
8111783c:	d0e04703 	ldbu	r3,-32484(gp)
81117840:	d0a04743 	ldbu	r2,-32483(gp)
81117844:	18c03fcc 	andi	r3,r3,255
81117848:	10803fcc 	andi	r2,r2,255
8111784c:	18801126 	beq	r3,r2,81117894 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
81117850:	d0a04703 	ldbu	r2,-32484(gp)
81117854:	10c03fcc 	andi	r3,r2,255
81117858:	00a044f4 	movhi	r2,33043
8111785c:	10ba0c04 	addi	r2,r2,-6096
81117860:	18c7883a 	add	r3,r3,r3
81117864:	18c7883a 	add	r3,r3,r3
81117868:	10c5883a 	add	r2,r2,r3
8111786c:	10800017 	ldw	r2,0(r2)
81117870:	d0a04f15 	stw	r2,-32452(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
81117874:	d0a04f17 	ldw	r2,-32452(gp)
81117878:	10c00e17 	ldw	r3,56(r2)
8111787c:	18c00044 	addi	r3,r3,1
81117880:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
81117884:	d0a04a17 	ldw	r2,-32472(gp)
81117888:	10800044 	addi	r2,r2,1
8111788c:	d0a04a15 	stw	r2,-32472(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
81117890:	1123d840 	call	81123d84 <OSCtxSw>
81117894:	e0bffd17 	ldw	r2,-12(fp)
81117898:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111789c:	e0bffe17 	ldw	r2,-8(fp)
811178a0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
811178a4:	0001883a 	nop
811178a8:	e037883a 	mov	sp,fp
811178ac:	dfc00117 	ldw	ra,4(sp)
811178b0:	df000017 	ldw	fp,0(sp)
811178b4:	dec00204 	addi	sp,sp,8
811178b8:	f800283a 	ret

811178bc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
811178bc:	defffc04 	addi	sp,sp,-16
811178c0:	df000315 	stw	fp,12(sp)
811178c4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811178c8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
811178cc:	d0a04543 	ldbu	r2,-32491(gp)
811178d0:	10803fcc 	andi	r2,r2,255
811178d4:	10800058 	cmpnei	r2,r2,1
811178d8:	1000161e 	bne	r2,zero,81117934 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811178dc:	0005303a 	rdctl	r2,status
811178e0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811178e4:	e0ffff17 	ldw	r3,-4(fp)
811178e8:	00bfff84 	movi	r2,-2
811178ec:	1884703a 	and	r2,r3,r2
811178f0:	1001703a 	wrctl	status,r2
  
  return context;
811178f4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
811178f8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
811178fc:	d0a05403 	ldbu	r2,-32432(gp)
81117900:	10803fcc 	andi	r2,r2,255
81117904:	1000071e 	bne	r2,zero,81117924 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
81117908:	d0a04503 	ldbu	r2,-32492(gp)
8111790c:	10803fcc 	andi	r2,r2,255
81117910:	10803fe0 	cmpeqi	r2,r2,255
81117914:	1000031e 	bne	r2,zero,81117924 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
81117918:	d0a04503 	ldbu	r2,-32492(gp)
8111791c:	10800044 	addi	r2,r2,1
81117920:	d0a04505 	stb	r2,-32492(gp)
81117924:	e0bffd17 	ldw	r2,-12(fp)
81117928:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111792c:	e0bffe17 	ldw	r2,-8(fp)
81117930:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
81117934:	0001883a 	nop
81117938:	e037883a 	mov	sp,fp
8111793c:	df000017 	ldw	fp,0(sp)
81117940:	dec00104 	addi	sp,sp,4
81117944:	f800283a 	ret

81117948 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
81117948:	defff804 	addi	sp,sp,-32
8111794c:	dfc00715 	stw	ra,28(sp)
81117950:	df000615 	stw	fp,24(sp)
81117954:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81117958:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
8111795c:	d0a04543 	ldbu	r2,-32491(gp)
81117960:	10803fcc 	andi	r2,r2,255
81117964:	10800058 	cmpnei	r2,r2,1
81117968:	1000281e 	bne	r2,zero,81117a0c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111796c:	0005303a 	rdctl	r2,status
81117970:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117974:	e0ffff17 	ldw	r3,-4(fp)
81117978:	00bfff84 	movi	r2,-2
8111797c:	1884703a 	and	r2,r3,r2
81117980:	1001703a 	wrctl	status,r2
  
  return context;
81117984:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81117988:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
8111798c:	d0a04503 	ldbu	r2,-32492(gp)
81117990:	10803fcc 	andi	r2,r2,255
81117994:	10001926 	beq	r2,zero,811179fc <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
81117998:	d0a04503 	ldbu	r2,-32492(gp)
8111799c:	10bfffc4 	addi	r2,r2,-1
811179a0:	d0a04505 	stb	r2,-32492(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
811179a4:	d0a04503 	ldbu	r2,-32492(gp)
811179a8:	10803fcc 	andi	r2,r2,255
811179ac:	10000e1e 	bne	r2,zero,811179e8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
811179b0:	d0a05403 	ldbu	r2,-32432(gp)
811179b4:	10803fcc 	andi	r2,r2,255
811179b8:	1000061e 	bne	r2,zero,811179d4 <OSSchedUnlock+0x8c>
811179bc:	e0bffa17 	ldw	r2,-24(fp)
811179c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811179c4:	e0bffb17 	ldw	r2,-20(fp)
811179c8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
811179cc:	11187f00 	call	811187f0 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
811179d0:	00000e06 	br	81117a0c <OSSchedUnlock+0xc4>
811179d4:	e0bffa17 	ldw	r2,-24(fp)
811179d8:	e0bffc15 	stw	r2,-16(fp)
811179dc:	e0bffc17 	ldw	r2,-16(fp)
811179e0:	1001703a 	wrctl	status,r2
811179e4:	00000906 	br	81117a0c <OSSchedUnlock+0xc4>
811179e8:	e0bffa17 	ldw	r2,-24(fp)
811179ec:	e0bffd15 	stw	r2,-12(fp)
811179f0:	e0bffd17 	ldw	r2,-12(fp)
811179f4:	1001703a 	wrctl	status,r2
811179f8:	00000406 	br	81117a0c <OSSchedUnlock+0xc4>
811179fc:	e0bffa17 	ldw	r2,-24(fp)
81117a00:	e0bffe15 	stw	r2,-8(fp)
81117a04:	e0bffe17 	ldw	r2,-8(fp)
81117a08:	1001703a 	wrctl	status,r2
81117a0c:	0001883a 	nop
81117a10:	e037883a 	mov	sp,fp
81117a14:	dfc00117 	ldw	ra,4(sp)
81117a18:	df000017 	ldw	fp,0(sp)
81117a1c:	dec00204 	addi	sp,sp,8
81117a20:	f800283a 	ret

81117a24 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
81117a24:	defffe04 	addi	sp,sp,-8
81117a28:	dfc00115 	stw	ra,4(sp)
81117a2c:	df000015 	stw	fp,0(sp)
81117a30:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
81117a34:	d0a04543 	ldbu	r2,-32491(gp)
81117a38:	10803fcc 	andi	r2,r2,255
81117a3c:	10000f1e 	bne	r2,zero,81117a7c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
81117a40:	11188c00 	call	811188c0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
81117a44:	d0a04703 	ldbu	r2,-32484(gp)
81117a48:	d0a04745 	stb	r2,-32483(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
81117a4c:	d0a04703 	ldbu	r2,-32484(gp)
81117a50:	10c03fcc 	andi	r3,r2,255
81117a54:	00a044f4 	movhi	r2,33043
81117a58:	10ba0c04 	addi	r2,r2,-6096
81117a5c:	18c7883a 	add	r3,r3,r3
81117a60:	18c7883a 	add	r3,r3,r3
81117a64:	10c5883a 	add	r2,r2,r3
81117a68:	10800017 	ldw	r2,0(r2)
81117a6c:	d0a04f15 	stw	r2,-32452(gp)
        OSTCBCur      = OSTCBHighRdy;
81117a70:	d0a04f17 	ldw	r2,-32452(gp)
81117a74:	d0a05515 	stw	r2,-32428(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
81117a78:	1123e100 	call	81123e10 <OSStartHighRdy>
    }
}
81117a7c:	0001883a 	nop
81117a80:	e037883a 	mov	sp,fp
81117a84:	dfc00117 	ldw	ra,4(sp)
81117a88:	df000017 	ldw	fp,0(sp)
81117a8c:	dec00204 	addi	sp,sp,8
81117a90:	f800283a 	ret

81117a94 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
81117a94:	defff904 	addi	sp,sp,-28
81117a98:	dfc00615 	stw	ra,24(sp)
81117a9c:	df000515 	stw	fp,20(sp)
81117aa0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81117aa4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
81117aa8:	01000084 	movi	r4,2
81117aac:	111e19c0 	call	8111e19c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117ab0:	0005303a 	rdctl	r2,status
81117ab4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117ab8:	e0fffc17 	ldw	r3,-16(fp)
81117abc:	00bfff84 	movi	r2,-2
81117ac0:	1884703a 	and	r2,r3,r2
81117ac4:	1001703a 	wrctl	status,r2
  
  return context;
81117ac8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
81117acc:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
81117ad0:	d0204615 	stw	zero,-32488(gp)
81117ad4:	e0bffb17 	ldw	r2,-20(fp)
81117ad8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81117adc:	e0bffd17 	ldw	r2,-12(fp)
81117ae0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
81117ae4:	01001904 	movi	r4,100
81117ae8:	111e19c0 	call	8111e19c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117aec:	0005303a 	rdctl	r2,status
81117af0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117af4:	e0fffe17 	ldw	r3,-8(fp)
81117af8:	00bfff84 	movi	r2,-2
81117afc:	1884703a 	and	r2,r3,r2
81117b00:	1001703a 	wrctl	status,r2
  
  return context;
81117b04:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
81117b08:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
81117b0c:	d0a04617 	ldw	r2,-32488(gp)
81117b10:	d0a04b15 	stw	r2,-32468(gp)
    OSStatRdy    = OS_TRUE;
81117b14:	00800044 	movi	r2,1
81117b18:	d0a05805 	stb	r2,-32416(gp)
81117b1c:	e0bffb17 	ldw	r2,-20(fp)
81117b20:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81117b24:	e0bfff17 	ldw	r2,-4(fp)
81117b28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81117b2c:	0001883a 	nop
81117b30:	e037883a 	mov	sp,fp
81117b34:	dfc00117 	ldw	ra,4(sp)
81117b38:	df000017 	ldw	fp,0(sp)
81117b3c:	dec00204 	addi	sp,sp,8
81117b40:	f800283a 	ret

81117b44 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
81117b44:	defff704 	addi	sp,sp,-36
81117b48:	dfc00815 	stw	ra,32(sp)
81117b4c:	df000715 	stw	fp,28(sp)
81117b50:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81117b54:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
81117b58:	11240380 	call	81124038 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117b5c:	0005303a 	rdctl	r2,status
81117b60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117b64:	e0fffd17 	ldw	r3,-12(fp)
81117b68:	00bfff84 	movi	r2,-2
81117b6c:	1884703a 	and	r2,r3,r2
81117b70:	1001703a 	wrctl	status,r2
  
  return context;
81117b74:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
81117b78:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
81117b7c:	d0a05617 	ldw	r2,-32424(gp)
81117b80:	10800044 	addi	r2,r2,1
81117b84:	d0a05615 	stw	r2,-32424(gp)
81117b88:	e0bffb17 	ldw	r2,-20(fp)
81117b8c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81117b90:	e0bfff17 	ldw	r2,-4(fp)
81117b94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
81117b98:	d0a04543 	ldbu	r2,-32491(gp)
81117b9c:	10803fcc 	andi	r2,r2,255
81117ba0:	10800058 	cmpnei	r2,r2,1
81117ba4:	10006a1e 	bne	r2,zero,81117d50 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
81117ba8:	d0a04903 	ldbu	r2,-32476(gp)
81117bac:	10803fcc 	andi	r2,r2,255
81117bb0:	10c00060 	cmpeqi	r3,r2,1
81117bb4:	1800061e 	bne	r3,zero,81117bd0 <OSTimeTick+0x8c>
81117bb8:	10c000a0 	cmpeqi	r3,r2,2
81117bbc:	1800061e 	bne	r3,zero,81117bd8 <OSTimeTick+0x94>
81117bc0:	10000a1e 	bne	r2,zero,81117bec <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
81117bc4:	00800044 	movi	r2,1
81117bc8:	e0bffa05 	stb	r2,-24(fp)
                 break;
81117bcc:	00000b06 	br	81117bfc <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
81117bd0:	e03ffa05 	stb	zero,-24(fp)
                 break;
81117bd4:	00000906 	br	81117bfc <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
81117bd8:	00800044 	movi	r2,1
81117bdc:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
81117be0:	00800044 	movi	r2,1
81117be4:	d0a04905 	stb	r2,-32476(gp)
                 break;
81117be8:	00000406 	br	81117bfc <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
81117bec:	00800044 	movi	r2,1
81117bf0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
81117bf4:	d0204905 	stb	zero,-32476(gp)
                 break;
81117bf8:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
81117bfc:	e0bffa03 	ldbu	r2,-24(fp)
81117c00:	10005226 	beq	r2,zero,81117d4c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
81117c04:	d0a04817 	ldw	r2,-32480(gp)
81117c08:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
81117c0c:	00004906 	br	81117d34 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81117c10:	0005303a 	rdctl	r2,status
81117c14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81117c18:	e0fffc17 	ldw	r3,-16(fp)
81117c1c:	00bfff84 	movi	r2,-2
81117c20:	1884703a 	and	r2,r3,r2
81117c24:	1001703a 	wrctl	status,r2
  
  return context;
81117c28:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
81117c2c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
81117c30:	e0bff917 	ldw	r2,-28(fp)
81117c34:	10800b8b 	ldhu	r2,46(r2)
81117c38:	10bfffcc 	andi	r2,r2,65535
81117c3c:	10003626 	beq	r2,zero,81117d18 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
81117c40:	e0bff917 	ldw	r2,-28(fp)
81117c44:	10800b8b 	ldhu	r2,46(r2)
81117c48:	10bfffc4 	addi	r2,r2,-1
81117c4c:	1007883a 	mov	r3,r2
81117c50:	e0bff917 	ldw	r2,-28(fp)
81117c54:	10c00b8d 	sth	r3,46(r2)
81117c58:	e0bff917 	ldw	r2,-28(fp)
81117c5c:	10800b8b 	ldhu	r2,46(r2)
81117c60:	10bfffcc 	andi	r2,r2,65535
81117c64:	10002c1e 	bne	r2,zero,81117d18 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
81117c68:	e0bff917 	ldw	r2,-28(fp)
81117c6c:	10800c03 	ldbu	r2,48(r2)
81117c70:	10803fcc 	andi	r2,r2,255
81117c74:	10800dcc 	andi	r2,r2,55
81117c78:	10000b26 	beq	r2,zero,81117ca8 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
81117c7c:	e0bff917 	ldw	r2,-28(fp)
81117c80:	10c00c03 	ldbu	r3,48(r2)
81117c84:	00bff204 	movi	r2,-56
81117c88:	1884703a 	and	r2,r3,r2
81117c8c:	1007883a 	mov	r3,r2
81117c90:	e0bff917 	ldw	r2,-28(fp)
81117c94:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
81117c98:	e0bff917 	ldw	r2,-28(fp)
81117c9c:	00c00044 	movi	r3,1
81117ca0:	10c00c45 	stb	r3,49(r2)
81117ca4:	00000206 	br	81117cb0 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
81117ca8:	e0bff917 	ldw	r2,-28(fp)
81117cac:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
81117cb0:	e0bff917 	ldw	r2,-28(fp)
81117cb4:	10800c03 	ldbu	r2,48(r2)
81117cb8:	10803fcc 	andi	r2,r2,255
81117cbc:	1080020c 	andi	r2,r2,8
81117cc0:	1000151e 	bne	r2,zero,81117d18 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
81117cc4:	e0bff917 	ldw	r2,-28(fp)
81117cc8:	10c00d83 	ldbu	r3,54(r2)
81117ccc:	d0a05103 	ldbu	r2,-32444(gp)
81117cd0:	1884b03a 	or	r2,r3,r2
81117cd4:	d0a05105 	stb	r2,-32444(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81117cd8:	e0bff917 	ldw	r2,-28(fp)
81117cdc:	10800d03 	ldbu	r2,52(r2)
81117ce0:	10c03fcc 	andi	r3,r2,255
81117ce4:	e0bff917 	ldw	r2,-28(fp)
81117ce8:	10800d03 	ldbu	r2,52(r2)
81117cec:	11003fcc 	andi	r4,r2,255
81117cf0:	d0a05144 	addi	r2,gp,-32443
81117cf4:	2085883a 	add	r2,r4,r2
81117cf8:	11000003 	ldbu	r4,0(r2)
81117cfc:	e0bff917 	ldw	r2,-28(fp)
81117d00:	10800d43 	ldbu	r2,53(r2)
81117d04:	2084b03a 	or	r2,r4,r2
81117d08:	1009883a 	mov	r4,r2
81117d0c:	d0a05144 	addi	r2,gp,-32443
81117d10:	1885883a 	add	r2,r3,r2
81117d14:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
81117d18:	e0bff917 	ldw	r2,-28(fp)
81117d1c:	10800517 	ldw	r2,20(r2)
81117d20:	e0bff915 	stw	r2,-28(fp)
81117d24:	e0bffb17 	ldw	r2,-20(fp)
81117d28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81117d2c:	e0bffe17 	ldw	r2,-8(fp)
81117d30:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
81117d34:	e0bff917 	ldw	r2,-28(fp)
81117d38:	10800c83 	ldbu	r2,50(r2)
81117d3c:	10803fcc 	andi	r2,r2,255
81117d40:	10800798 	cmpnei	r2,r2,30
81117d44:	103fb21e 	bne	r2,zero,81117c10 <__reset+0xfb0f7c10>
81117d48:	00000106 	br	81117d50 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
81117d4c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
81117d50:	e037883a 	mov	sp,fp
81117d54:	dfc00117 	ldw	ra,4(sp)
81117d58:	df000017 	ldw	fp,0(sp)
81117d5c:	dec00204 	addi	sp,sp,8
81117d60:	f800283a 	ret

81117d64 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
81117d64:	deffff04 	addi	sp,sp,-4
81117d68:	df000015 	stw	fp,0(sp)
81117d6c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
81117d70:	00804784 	movi	r2,286
}
81117d74:	e037883a 	mov	sp,fp
81117d78:	df000017 	ldw	fp,0(sp)
81117d7c:	dec00104 	addi	sp,sp,4
81117d80:	f800283a 	ret

81117d84 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
81117d84:	deffff04 	addi	sp,sp,-4
81117d88:	df000015 	stw	fp,0(sp)
81117d8c:	d839883a 	mov	fp,sp
}
81117d90:	0001883a 	nop
81117d94:	e037883a 	mov	sp,fp
81117d98:	df000017 	ldw	fp,0(sp)
81117d9c:	dec00104 	addi	sp,sp,4
81117da0:	f800283a 	ret

81117da4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
81117da4:	defff804 	addi	sp,sp,-32
81117da8:	dfc00715 	stw	ra,28(sp)
81117dac:	df000615 	stw	fp,24(sp)
81117db0:	df000604 	addi	fp,sp,24
81117db4:	e13ffc15 	stw	r4,-16(fp)
81117db8:	e17ffd15 	stw	r5,-12(fp)
81117dbc:	3007883a 	mov	r3,r6
81117dc0:	3805883a 	mov	r2,r7
81117dc4:	e0fffe05 	stb	r3,-8(fp)
81117dc8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
81117dcc:	e0bffc17 	ldw	r2,-16(fp)
81117dd0:	10800283 	ldbu	r2,10(r2)
81117dd4:	10c03fcc 	andi	r3,r2,255
81117dd8:	00a044b4 	movhi	r2,33042
81117ddc:	10939204 	addi	r2,r2,20040
81117de0:	10c5883a 	add	r2,r2,r3
81117de4:	10800003 	ldbu	r2,0(r2)
81117de8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
81117dec:	e0bffa03 	ldbu	r2,-24(fp)
81117df0:	e0fffc17 	ldw	r3,-16(fp)
81117df4:	1885883a 	add	r2,r3,r2
81117df8:	108002c4 	addi	r2,r2,11
81117dfc:	10800003 	ldbu	r2,0(r2)
81117e00:	10c03fcc 	andi	r3,r2,255
81117e04:	00a044b4 	movhi	r2,33042
81117e08:	10939204 	addi	r2,r2,20040
81117e0c:	10c5883a 	add	r2,r2,r3
81117e10:	10800003 	ldbu	r2,0(r2)
81117e14:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
81117e18:	e0bffa03 	ldbu	r2,-24(fp)
81117e1c:	100490fa 	slli	r2,r2,3
81117e20:	1007883a 	mov	r3,r2
81117e24:	e0bffa43 	ldbu	r2,-23(fp)
81117e28:	1885883a 	add	r2,r3,r2
81117e2c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
81117e30:	e0fffa83 	ldbu	r3,-22(fp)
81117e34:	00a044f4 	movhi	r2,33043
81117e38:	10ba0c04 	addi	r2,r2,-6096
81117e3c:	18c7883a 	add	r3,r3,r3
81117e40:	18c7883a 	add	r3,r3,r3
81117e44:	10c5883a 	add	r2,r2,r3
81117e48:	10800017 	ldw	r2,0(r2)
81117e4c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
81117e50:	e0bffb17 	ldw	r2,-20(fp)
81117e54:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
81117e58:	e0bffb17 	ldw	r2,-20(fp)
81117e5c:	e0fffd17 	ldw	r3,-12(fp)
81117e60:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
81117e64:	e0bffb17 	ldw	r2,-20(fp)
81117e68:	10800c03 	ldbu	r2,48(r2)
81117e6c:	1007883a 	mov	r3,r2
81117e70:	e0bffe03 	ldbu	r2,-8(fp)
81117e74:	0084303a 	nor	r2,zero,r2
81117e78:	1884703a 	and	r2,r3,r2
81117e7c:	1007883a 	mov	r3,r2
81117e80:	e0bffb17 	ldw	r2,-20(fp)
81117e84:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
81117e88:	e0bffb17 	ldw	r2,-20(fp)
81117e8c:	e0ffff03 	ldbu	r3,-4(fp)
81117e90:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
81117e94:	e0bffb17 	ldw	r2,-20(fp)
81117e98:	10800c03 	ldbu	r2,48(r2)
81117e9c:	10803fcc 	andi	r2,r2,255
81117ea0:	1080020c 	andi	r2,r2,8
81117ea4:	1000111e 	bne	r2,zero,81117eec <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
81117ea8:	e0bffb17 	ldw	r2,-20(fp)
81117eac:	10c00d83 	ldbu	r3,54(r2)
81117eb0:	d0a05103 	ldbu	r2,-32444(gp)
81117eb4:	1884b03a 	or	r2,r3,r2
81117eb8:	d0a05105 	stb	r2,-32444(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
81117ebc:	e0fffa03 	ldbu	r3,-24(fp)
81117ec0:	e13ffa03 	ldbu	r4,-24(fp)
81117ec4:	d0a05144 	addi	r2,gp,-32443
81117ec8:	2085883a 	add	r2,r4,r2
81117ecc:	11000003 	ldbu	r4,0(r2)
81117ed0:	e0bffb17 	ldw	r2,-20(fp)
81117ed4:	10800d43 	ldbu	r2,53(r2)
81117ed8:	2084b03a 	or	r2,r4,r2
81117edc:	1009883a 	mov	r4,r2
81117ee0:	d0a05144 	addi	r2,gp,-32443
81117ee4:	1885883a 	add	r2,r3,r2
81117ee8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
81117eec:	e17ffc17 	ldw	r5,-16(fp)
81117ef0:	e13ffb17 	ldw	r4,-20(fp)
81117ef4:	111819c0 	call	8111819c <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
81117ef8:	e0bffb17 	ldw	r2,-20(fp)
81117efc:	10800817 	ldw	r2,32(r2)
81117f00:	10000826 	beq	r2,zero,81117f24 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
81117f04:	e0bffb17 	ldw	r2,-20(fp)
81117f08:	10800817 	ldw	r2,32(r2)
81117f0c:	100b883a 	mov	r5,r2
81117f10:	e13ffb17 	ldw	r4,-20(fp)
81117f14:	11182540 	call	81118254 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
81117f18:	e0bffb17 	ldw	r2,-20(fp)
81117f1c:	e0fffc17 	ldw	r3,-16(fp)
81117f20:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
81117f24:	e0bffa83 	ldbu	r2,-22(fp)
}
81117f28:	e037883a 	mov	sp,fp
81117f2c:	dfc00117 	ldw	ra,4(sp)
81117f30:	df000017 	ldw	fp,0(sp)
81117f34:	dec00204 	addi	sp,sp,8
81117f38:	f800283a 	ret

81117f3c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
81117f3c:	defffd04 	addi	sp,sp,-12
81117f40:	df000215 	stw	fp,8(sp)
81117f44:	df000204 	addi	fp,sp,8
81117f48:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
81117f4c:	d0a05517 	ldw	r2,-32428(gp)
81117f50:	e0ffff17 	ldw	r3,-4(fp)
81117f54:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
81117f58:	d0a05517 	ldw	r2,-32428(gp)
81117f5c:	10800d03 	ldbu	r2,52(r2)
81117f60:	10803fcc 	andi	r2,r2,255
81117f64:	d0e05517 	ldw	r3,-32428(gp)
81117f68:	18c00d03 	ldbu	r3,52(r3)
81117f6c:	18c03fcc 	andi	r3,r3,255
81117f70:	e13fff17 	ldw	r4,-4(fp)
81117f74:	20c7883a 	add	r3,r4,r3
81117f78:	18c002c4 	addi	r3,r3,11
81117f7c:	19000003 	ldbu	r4,0(r3)
81117f80:	d0e05517 	ldw	r3,-32428(gp)
81117f84:	18c00d43 	ldbu	r3,53(r3)
81117f88:	20c6b03a 	or	r3,r4,r3
81117f8c:	1809883a 	mov	r4,r3
81117f90:	e0ffff17 	ldw	r3,-4(fp)
81117f94:	1885883a 	add	r2,r3,r2
81117f98:	108002c4 	addi	r2,r2,11
81117f9c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
81117fa0:	e0bfff17 	ldw	r2,-4(fp)
81117fa4:	10c00283 	ldbu	r3,10(r2)
81117fa8:	d0a05517 	ldw	r2,-32428(gp)
81117fac:	10800d83 	ldbu	r2,54(r2)
81117fb0:	1884b03a 	or	r2,r3,r2
81117fb4:	1007883a 	mov	r3,r2
81117fb8:	e0bfff17 	ldw	r2,-4(fp)
81117fbc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81117fc0:	d0a05517 	ldw	r2,-32428(gp)
81117fc4:	10800d03 	ldbu	r2,52(r2)
81117fc8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
81117fcc:	e0fffe03 	ldbu	r3,-8(fp)
81117fd0:	e13ffe03 	ldbu	r4,-8(fp)
81117fd4:	d0a05144 	addi	r2,gp,-32443
81117fd8:	2085883a 	add	r2,r4,r2
81117fdc:	10800003 	ldbu	r2,0(r2)
81117fe0:	1009883a 	mov	r4,r2
81117fe4:	d0a05517 	ldw	r2,-32428(gp)
81117fe8:	10800d43 	ldbu	r2,53(r2)
81117fec:	0084303a 	nor	r2,zero,r2
81117ff0:	2084703a 	and	r2,r4,r2
81117ff4:	1009883a 	mov	r4,r2
81117ff8:	d0a05144 	addi	r2,gp,-32443
81117ffc:	1885883a 	add	r2,r3,r2
81118000:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81118004:	e0fffe03 	ldbu	r3,-8(fp)
81118008:	d0a05144 	addi	r2,gp,-32443
8111800c:	1885883a 	add	r2,r3,r2
81118010:	10800003 	ldbu	r2,0(r2)
81118014:	10803fcc 	andi	r2,r2,255
81118018:	1000071e 	bne	r2,zero,81118038 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
8111801c:	d0a05517 	ldw	r2,-32428(gp)
81118020:	10800d83 	ldbu	r2,54(r2)
81118024:	0084303a 	nor	r2,zero,r2
81118028:	1007883a 	mov	r3,r2
8111802c:	d0a05103 	ldbu	r2,-32444(gp)
81118030:	1884703a 	and	r2,r3,r2
81118034:	d0a05105 	stb	r2,-32444(gp)
    }
}
81118038:	0001883a 	nop
8111803c:	e037883a 	mov	sp,fp
81118040:	df000017 	ldw	fp,0(sp)
81118044:	dec00104 	addi	sp,sp,4
81118048:	f800283a 	ret

8111804c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
8111804c:	defffb04 	addi	sp,sp,-20
81118050:	df000415 	stw	fp,16(sp)
81118054:	df000404 	addi	fp,sp,16
81118058:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
8111805c:	d0a05517 	ldw	r2,-32428(gp)
81118060:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
81118064:	d0a05517 	ldw	r2,-32428(gp)
81118068:	e0ffff17 	ldw	r3,-4(fp)
8111806c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
81118070:	e0bfff17 	ldw	r2,-4(fp)
81118074:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
81118078:	e0bffc17 	ldw	r2,-16(fp)
8111807c:	10800017 	ldw	r2,0(r2)
81118080:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81118084:	00002006 	br	81118108 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
81118088:	d0a05517 	ldw	r2,-32428(gp)
8111808c:	10800d03 	ldbu	r2,52(r2)
81118090:	10803fcc 	andi	r2,r2,255
81118094:	d0e05517 	ldw	r3,-32428(gp)
81118098:	18c00d03 	ldbu	r3,52(r3)
8111809c:	18c03fcc 	andi	r3,r3,255
811180a0:	e13ffd17 	ldw	r4,-12(fp)
811180a4:	20c7883a 	add	r3,r4,r3
811180a8:	18c002c4 	addi	r3,r3,11
811180ac:	19000003 	ldbu	r4,0(r3)
811180b0:	d0e05517 	ldw	r3,-32428(gp)
811180b4:	18c00d43 	ldbu	r3,53(r3)
811180b8:	20c6b03a 	or	r3,r4,r3
811180bc:	1809883a 	mov	r4,r3
811180c0:	e0fffd17 	ldw	r3,-12(fp)
811180c4:	1885883a 	add	r2,r3,r2
811180c8:	108002c4 	addi	r2,r2,11
811180cc:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
811180d0:	e0bffd17 	ldw	r2,-12(fp)
811180d4:	10c00283 	ldbu	r3,10(r2)
811180d8:	d0a05517 	ldw	r2,-32428(gp)
811180dc:	10800d83 	ldbu	r2,54(r2)
811180e0:	1884b03a 	or	r2,r3,r2
811180e4:	1007883a 	mov	r3,r2
811180e8:	e0bffd17 	ldw	r2,-12(fp)
811180ec:	10c00285 	stb	r3,10(r2)
        pevents++;
811180f0:	e0bffc17 	ldw	r2,-16(fp)
811180f4:	10800104 	addi	r2,r2,4
811180f8:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
811180fc:	e0bffc17 	ldw	r2,-16(fp)
81118100:	10800017 	ldw	r2,0(r2)
81118104:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81118108:	e0bffd17 	ldw	r2,-12(fp)
8111810c:	103fde1e 	bne	r2,zero,81118088 <__reset+0xfb0f8088>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81118110:	d0a05517 	ldw	r2,-32428(gp)
81118114:	10800d03 	ldbu	r2,52(r2)
81118118:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8111811c:	e0fffe03 	ldbu	r3,-8(fp)
81118120:	e13ffe03 	ldbu	r4,-8(fp)
81118124:	d0a05144 	addi	r2,gp,-32443
81118128:	2085883a 	add	r2,r4,r2
8111812c:	10800003 	ldbu	r2,0(r2)
81118130:	1009883a 	mov	r4,r2
81118134:	d0a05517 	ldw	r2,-32428(gp)
81118138:	10800d43 	ldbu	r2,53(r2)
8111813c:	0084303a 	nor	r2,zero,r2
81118140:	2084703a 	and	r2,r4,r2
81118144:	1009883a 	mov	r4,r2
81118148:	d0a05144 	addi	r2,gp,-32443
8111814c:	1885883a 	add	r2,r3,r2
81118150:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81118154:	e0fffe03 	ldbu	r3,-8(fp)
81118158:	d0a05144 	addi	r2,gp,-32443
8111815c:	1885883a 	add	r2,r3,r2
81118160:	10800003 	ldbu	r2,0(r2)
81118164:	10803fcc 	andi	r2,r2,255
81118168:	1000071e 	bne	r2,zero,81118188 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
8111816c:	d0a05517 	ldw	r2,-32428(gp)
81118170:	10800d83 	ldbu	r2,54(r2)
81118174:	0084303a 	nor	r2,zero,r2
81118178:	1007883a 	mov	r3,r2
8111817c:	d0a05103 	ldbu	r2,-32444(gp)
81118180:	1884703a 	and	r2,r3,r2
81118184:	d0a05105 	stb	r2,-32444(gp)
    }
}
81118188:	0001883a 	nop
8111818c:	e037883a 	mov	sp,fp
81118190:	df000017 	ldw	fp,0(sp)
81118194:	dec00104 	addi	sp,sp,4
81118198:	f800283a 	ret

8111819c <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
8111819c:	defffc04 	addi	sp,sp,-16
811181a0:	df000315 	stw	fp,12(sp)
811181a4:	df000304 	addi	fp,sp,12
811181a8:	e13ffe15 	stw	r4,-8(fp)
811181ac:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
811181b0:	e0bffe17 	ldw	r2,-8(fp)
811181b4:	10800d03 	ldbu	r2,52(r2)
811181b8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
811181bc:	e0bffd03 	ldbu	r2,-12(fp)
811181c0:	e0fffd03 	ldbu	r3,-12(fp)
811181c4:	e13fff17 	ldw	r4,-4(fp)
811181c8:	20c7883a 	add	r3,r4,r3
811181cc:	18c002c4 	addi	r3,r3,11
811181d0:	18c00003 	ldbu	r3,0(r3)
811181d4:	1809883a 	mov	r4,r3
811181d8:	e0fffe17 	ldw	r3,-8(fp)
811181dc:	18c00d43 	ldbu	r3,53(r3)
811181e0:	00c6303a 	nor	r3,zero,r3
811181e4:	20c6703a 	and	r3,r4,r3
811181e8:	1809883a 	mov	r4,r3
811181ec:	e0ffff17 	ldw	r3,-4(fp)
811181f0:	1885883a 	add	r2,r3,r2
811181f4:	108002c4 	addi	r2,r2,11
811181f8:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
811181fc:	e0bffd03 	ldbu	r2,-12(fp)
81118200:	e0ffff17 	ldw	r3,-4(fp)
81118204:	1885883a 	add	r2,r3,r2
81118208:	108002c4 	addi	r2,r2,11
8111820c:	10800003 	ldbu	r2,0(r2)
81118210:	10803fcc 	andi	r2,r2,255
81118214:	10000a1e 	bne	r2,zero,81118240 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
81118218:	e0bfff17 	ldw	r2,-4(fp)
8111821c:	10800283 	ldbu	r2,10(r2)
81118220:	1007883a 	mov	r3,r2
81118224:	e0bffe17 	ldw	r2,-8(fp)
81118228:	10800d83 	ldbu	r2,54(r2)
8111822c:	0084303a 	nor	r2,zero,r2
81118230:	1884703a 	and	r2,r3,r2
81118234:	1007883a 	mov	r3,r2
81118238:	e0bfff17 	ldw	r2,-4(fp)
8111823c:	10c00285 	stb	r3,10(r2)
    }
}
81118240:	0001883a 	nop
81118244:	e037883a 	mov	sp,fp
81118248:	df000017 	ldw	fp,0(sp)
8111824c:	dec00104 	addi	sp,sp,4
81118250:	f800283a 	ret

81118254 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
81118254:	defffa04 	addi	sp,sp,-24
81118258:	df000515 	stw	fp,20(sp)
8111825c:	df000504 	addi	fp,sp,20
81118260:	e13ffe15 	stw	r4,-8(fp)
81118264:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
81118268:	e0bffe17 	ldw	r2,-8(fp)
8111826c:	10800d03 	ldbu	r2,52(r2)
81118270:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
81118274:	e0bffe17 	ldw	r2,-8(fp)
81118278:	10800d83 	ldbu	r2,54(r2)
8111827c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
81118280:	e0bffe17 	ldw	r2,-8(fp)
81118284:	10800d43 	ldbu	r2,53(r2)
81118288:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
8111828c:	e0bfff17 	ldw	r2,-4(fp)
81118290:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
81118294:	e0bffb17 	ldw	r2,-20(fp)
81118298:	10800017 	ldw	r2,0(r2)
8111829c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
811182a0:	00002506 	br	81118338 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
811182a4:	e0bffd03 	ldbu	r2,-12(fp)
811182a8:	e0fffd03 	ldbu	r3,-12(fp)
811182ac:	e13ffc17 	ldw	r4,-16(fp)
811182b0:	20c7883a 	add	r3,r4,r3
811182b4:	18c002c4 	addi	r3,r3,11
811182b8:	18c00003 	ldbu	r3,0(r3)
811182bc:	1809883a 	mov	r4,r3
811182c0:	e0fffd83 	ldbu	r3,-10(fp)
811182c4:	00c6303a 	nor	r3,zero,r3
811182c8:	20c6703a 	and	r3,r4,r3
811182cc:	1809883a 	mov	r4,r3
811182d0:	e0fffc17 	ldw	r3,-16(fp)
811182d4:	1885883a 	add	r2,r3,r2
811182d8:	108002c4 	addi	r2,r2,11
811182dc:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
811182e0:	e0bffd03 	ldbu	r2,-12(fp)
811182e4:	e0fffc17 	ldw	r3,-16(fp)
811182e8:	1885883a 	add	r2,r3,r2
811182ec:	108002c4 	addi	r2,r2,11
811182f0:	10800003 	ldbu	r2,0(r2)
811182f4:	10803fcc 	andi	r2,r2,255
811182f8:	1000091e 	bne	r2,zero,81118320 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
811182fc:	e0bffc17 	ldw	r2,-16(fp)
81118300:	10800283 	ldbu	r2,10(r2)
81118304:	1007883a 	mov	r3,r2
81118308:	e0bffd43 	ldbu	r2,-11(fp)
8111830c:	0084303a 	nor	r2,zero,r2
81118310:	1884703a 	and	r2,r3,r2
81118314:	1007883a 	mov	r3,r2
81118318:	e0bffc17 	ldw	r2,-16(fp)
8111831c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
81118320:	e0bffb17 	ldw	r2,-20(fp)
81118324:	10800104 	addi	r2,r2,4
81118328:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
8111832c:	e0bffb17 	ldw	r2,-20(fp)
81118330:	10800017 	ldw	r2,0(r2)
81118334:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81118338:	e0bffc17 	ldw	r2,-16(fp)
8111833c:	103fd91e 	bne	r2,zero,811182a4 <__reset+0xfb0f82a4>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
81118340:	0001883a 	nop
81118344:	e037883a 	mov	sp,fp
81118348:	df000017 	ldw	fp,0(sp)
8111834c:	dec00104 	addi	sp,sp,4
81118350:	f800283a 	ret

81118354 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
81118354:	defffc04 	addi	sp,sp,-16
81118358:	df000315 	stw	fp,12(sp)
8111835c:	df000304 	addi	fp,sp,12
81118360:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
81118364:	e0bfff17 	ldw	r2,-4(fp)
81118368:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
8111836c:	e0bfff17 	ldw	r2,-4(fp)
81118370:	108002c4 	addi	r2,r2,11
81118374:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81118378:	e03ffe05 	stb	zero,-8(fp)
8111837c:	00000706 	br	8111839c <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
81118380:	e0bffd17 	ldw	r2,-12(fp)
81118384:	10c00044 	addi	r3,r2,1
81118388:	e0fffd15 	stw	r3,-12(fp)
8111838c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81118390:	e0bffe03 	ldbu	r2,-8(fp)
81118394:	10800044 	addi	r2,r2,1
81118398:	e0bffe05 	stb	r2,-8(fp)
8111839c:	e0bffe03 	ldbu	r2,-8(fp)
811183a0:	10800130 	cmpltui	r2,r2,4
811183a4:	103ff61e 	bne	r2,zero,81118380 <__reset+0xfb0f8380>
        *ptbl++ = 0;
    }
}
811183a8:	0001883a 	nop
811183ac:	e037883a 	mov	sp,fp
811183b0:	df000017 	ldw	fp,0(sp)
811183b4:	dec00104 	addi	sp,sp,4
811183b8:	f800283a 	ret

811183bc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
811183bc:	defffb04 	addi	sp,sp,-20
811183c0:	dfc00415 	stw	ra,16(sp)
811183c4:	df000315 	stw	fp,12(sp)
811183c8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
811183cc:	0142d004 	movi	r5,2880
811183d0:	012044f4 	movhi	r4,33043
811183d4:	21346304 	addi	r4,r4,-11892
811183d8:	11187340 	call	81118734 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
811183dc:	00a044f4 	movhi	r2,33043
811183e0:	10b46304 	addi	r2,r2,-11892
811183e4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
811183e8:	00a044f4 	movhi	r2,33043
811183ec:	10b46f04 	addi	r2,r2,-11844
811183f0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
811183f4:	e03ffd0d 	sth	zero,-12(fp)
811183f8:	00001306 	br	81118448 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
811183fc:	e0bffe17 	ldw	r2,-8(fp)
81118400:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
81118404:	e0bffe17 	ldw	r2,-8(fp)
81118408:	e0ffff17 	ldw	r3,-4(fp)
8111840c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
81118410:	e0bffe17 	ldw	r2,-8(fp)
81118414:	00c00fc4 	movi	r3,63
81118418:	10c003c5 	stb	r3,15(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
8111841c:	e0bffe17 	ldw	r2,-8(fp)
81118420:	10000405 	stb	zero,16(r2)
#endif
        pevent1++;
81118424:	e0bffe17 	ldw	r2,-8(fp)
81118428:	10800c04 	addi	r2,r2,48
8111842c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
81118430:	e0bfff17 	ldw	r2,-4(fp)
81118434:	10800c04 	addi	r2,r2,48
81118438:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
8111843c:	e0bffd0b 	ldhu	r2,-12(fp)
81118440:	10800044 	addi	r2,r2,1
81118444:	e0bffd0d 	sth	r2,-12(fp)
81118448:	e0bffd0b 	ldhu	r2,-12(fp)
8111844c:	10800ef0 	cmpltui	r2,r2,59
81118450:	103fea1e 	bne	r2,zero,811183fc <__reset+0xfb0f83fc>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
81118454:	e0bffe17 	ldw	r2,-8(fp)
81118458:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
8111845c:	e0bffe17 	ldw	r2,-8(fp)
81118460:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
81118464:	e0bffe17 	ldw	r2,-8(fp)
81118468:	00c00fc4 	movi	r3,63
8111846c:	10c003c5 	stb	r3,15(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
81118470:	e0bffe17 	ldw	r2,-8(fp)
81118474:	10000405 	stb	zero,16(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
81118478:	00a044f4 	movhi	r2,33043
8111847c:	10b46304 	addi	r2,r2,-11892
81118480:	d0a05315 	stw	r2,-32436(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
81118484:	0001883a 	nop
81118488:	e037883a 	mov	sp,fp
8111848c:	dfc00117 	ldw	ra,4(sp)
81118490:	df000017 	ldw	fp,0(sp)
81118494:	dec00204 	addi	sp,sp,8
81118498:	f800283a 	ret

8111849c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
8111849c:	deffff04 	addi	sp,sp,-4
811184a0:	df000015 	stw	fp,0(sp)
811184a4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
811184a8:	d0205615 	stw	zero,-32424(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
811184ac:	d0205405 	stb	zero,-32432(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
811184b0:	d0204505 	stb	zero,-32492(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
811184b4:	d0204d45 	stb	zero,-32459(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
811184b8:	d0204545 	stb	zero,-32491(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
811184bc:	d0204a15 	stw	zero,-32472(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
811184c0:	d0204615 	stw	zero,-32488(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
811184c4:	d0205915 	stw	zero,-32412(gp)
    OSIdleCtrMax  = 0L;
811184c8:	d0204b15 	stw	zero,-32468(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
811184cc:	d0205805 	stb	zero,-32416(gp)
#endif
}
811184d0:	0001883a 	nop
811184d4:	e037883a 	mov	sp,fp
811184d8:	df000017 	ldw	fp,0(sp)
811184dc:	dec00104 	addi	sp,sp,4
811184e0:	f800283a 	ret

811184e4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
811184e4:	defffd04 	addi	sp,sp,-12
811184e8:	df000215 	stw	fp,8(sp)
811184ec:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
811184f0:	d0205105 	stb	zero,-32444(gp)
    prdytbl       = &OSRdyTbl[0];
811184f4:	d0a05144 	addi	r2,gp,-32443
811184f8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
811184fc:	e03ffe05 	stb	zero,-8(fp)
81118500:	00000706 	br	81118520 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
81118504:	e0bfff17 	ldw	r2,-4(fp)
81118508:	10c00044 	addi	r3,r2,1
8111850c:	e0ffff15 	stw	r3,-4(fp)
81118510:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81118514:	e0bffe03 	ldbu	r2,-8(fp)
81118518:	10800044 	addi	r2,r2,1
8111851c:	e0bffe05 	stb	r2,-8(fp)
81118520:	e0bffe03 	ldbu	r2,-8(fp)
81118524:	10800130 	cmpltui	r2,r2,4
81118528:	103ff61e 	bne	r2,zero,81118504 <__reset+0xfb0f8504>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
8111852c:	d0204745 	stb	zero,-32483(gp)
    OSPrioHighRdy = 0;
81118530:	d0204705 	stb	zero,-32484(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
81118534:	d0204f15 	stw	zero,-32452(gp)
    OSTCBCur      = (OS_TCB *)0;
81118538:	d0205515 	stw	zero,-32428(gp)
}
8111853c:	0001883a 	nop
81118540:	e037883a 	mov	sp,fp
81118544:	df000017 	ldw	fp,0(sp)
81118548:	dec00104 	addi	sp,sp,4
8111854c:	f800283a 	ret

81118550 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
81118550:	defff804 	addi	sp,sp,-32
81118554:	dfc00715 	stw	ra,28(sp)
81118558:	df000615 	stw	fp,24(sp)
8111855c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
81118560:	008000c4 	movi	r2,3
81118564:	d8800415 	stw	r2,16(sp)
81118568:	d8000315 	stw	zero,12(sp)
8111856c:	00808004 	movi	r2,512
81118570:	d8800215 	stw	r2,8(sp)
81118574:	00a044f4 	movhi	r2,33043
81118578:	10b26304 	addi	r2,r2,-13940
8111857c:	d8800115 	stw	r2,4(sp)
81118580:	00bfffd4 	movui	r2,65535
81118584:	d8800015 	stw	r2,0(sp)
81118588:	01c00784 	movi	r7,30
8111858c:	01a044f4 	movhi	r6,33043
81118590:	31b46204 	addi	r6,r6,-11896
81118594:	000b883a 	mov	r5,zero
81118598:	012044b4 	movhi	r4,33042
8111859c:	21227f04 	addi	r4,r4,-30212
811185a0:	111d0cc0 	call	8111d0cc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
811185a4:	e1bfff04 	addi	r6,fp,-4
811185a8:	016044b4 	movhi	r5,33042
811185ac:	2953d204 	addi	r5,r5,20296
811185b0:	01000784 	movi	r4,30
811185b4:	111d8dc0 	call	8111d8dc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
811185b8:	0001883a 	nop
811185bc:	e037883a 	mov	sp,fp
811185c0:	dfc00117 	ldw	ra,4(sp)
811185c4:	df000017 	ldw	fp,0(sp)
811185c8:	dec00204 	addi	sp,sp,8
811185cc:	f800283a 	ret

811185d0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
811185d0:	defff804 	addi	sp,sp,-32
811185d4:	dfc00715 	stw	ra,28(sp)
811185d8:	df000615 	stw	fp,24(sp)
811185dc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
811185e0:	008000c4 	movi	r2,3
811185e4:	d8800415 	stw	r2,16(sp)
811185e8:	d8000315 	stw	zero,12(sp)
811185ec:	00808004 	movi	r2,512
811185f0:	d8800215 	stw	r2,8(sp)
811185f4:	00a044f4 	movhi	r2,33043
811185f8:	10afeb04 	addi	r2,r2,-16468
811185fc:	d8800115 	stw	r2,4(sp)
81118600:	00bfff94 	movui	r2,65534
81118604:	d8800015 	stw	r2,0(sp)
81118608:	01c00744 	movi	r7,29
8111860c:	01a044f4 	movhi	r6,33043
81118610:	31b1ea04 	addi	r6,r6,-14424
81118614:	000b883a 	mov	r5,zero
81118618:	012044b4 	movhi	r4,33042
8111861c:	21229604 	addi	r4,r4,-30120
81118620:	111d0cc0 	call	8111d0cc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
81118624:	e1bfff04 	addi	r6,fp,-4
81118628:	016044b4 	movhi	r5,33042
8111862c:	2953d604 	addi	r5,r5,20312
81118630:	01000744 	movi	r4,29
81118634:	111d8dc0 	call	8111d8dc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
81118638:	0001883a 	nop
8111863c:	e037883a 	mov	sp,fp
81118640:	dfc00117 	ldw	ra,4(sp)
81118644:	df000017 	ldw	fp,0(sp)
81118648:	dec00204 	addi	sp,sp,8
8111864c:	f800283a 	ret

81118650 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
81118650:	defffb04 	addi	sp,sp,-20
81118654:	dfc00415 	stw	ra,16(sp)
81118658:	df000315 	stw	fp,12(sp)
8111865c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
81118660:	0142d904 	movi	r5,2916
81118664:	012044f4 	movhi	r4,33043
81118668:	21373304 	addi	r4,r4,-9012
8111866c:	11187340 	call	81118734 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
81118670:	01401f04 	movi	r5,124
81118674:	012044f4 	movhi	r4,33043
81118678:	213a0c04 	addi	r4,r4,-6096
8111867c:	11187340 	call	81118734 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
81118680:	00a044f4 	movhi	r2,33043
81118684:	10b73304 	addi	r2,r2,-9012
81118688:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
8111868c:	00a044f4 	movhi	r2,33043
81118690:	10b74e04 	addi	r2,r2,-8904
81118694:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81118698:	e03ffd05 	stb	zero,-12(fp)
8111869c:	00001106 	br	811186e4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
811186a0:	e0bffe17 	ldw	r2,-8(fp)
811186a4:	e0ffff17 	ldw	r3,-4(fp)
811186a8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
811186ac:	e0bffe17 	ldw	r2,-8(fp)
811186b0:	00c00fc4 	movi	r3,63
811186b4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
811186b8:	e0bffe17 	ldw	r2,-8(fp)
811186bc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
811186c0:	e0bffe17 	ldw	r2,-8(fp)
811186c4:	10801b04 	addi	r2,r2,108
811186c8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
811186cc:	e0bfff17 	ldw	r2,-4(fp)
811186d0:	10801b04 	addi	r2,r2,108
811186d4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
811186d8:	e0bffd03 	ldbu	r2,-12(fp)
811186dc:	10800044 	addi	r2,r2,1
811186e0:	e0bffd05 	stb	r2,-12(fp)
811186e4:	e0bffd03 	ldbu	r2,-12(fp)
811186e8:	108006b0 	cmpltui	r2,r2,26
811186ec:	103fec1e 	bne	r2,zero,811186a0 <__reset+0xfb0f86a0>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
811186f0:	e0bffe17 	ldw	r2,-8(fp)
811186f4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
811186f8:	e0bffe17 	ldw	r2,-8(fp)
811186fc:	00c00fc4 	movi	r3,63
81118700:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81118704:	e0bffe17 	ldw	r2,-8(fp)
81118708:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
8111870c:	d0204815 	stw	zero,-32480(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
81118710:	00a044f4 	movhi	r2,33043
81118714:	10b73304 	addi	r2,r2,-9012
81118718:	d0a04c15 	stw	r2,-32464(gp)
}
8111871c:	0001883a 	nop
81118720:	e037883a 	mov	sp,fp
81118724:	dfc00117 	ldw	ra,4(sp)
81118728:	df000017 	ldw	fp,0(sp)
8111872c:	dec00204 	addi	sp,sp,8
81118730:	f800283a 	ret

81118734 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
81118734:	defffd04 	addi	sp,sp,-12
81118738:	df000215 	stw	fp,8(sp)
8111873c:	df000204 	addi	fp,sp,8
81118740:	e13ffe15 	stw	r4,-8(fp)
81118744:	2805883a 	mov	r2,r5
81118748:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
8111874c:	00000706 	br	8111876c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
81118750:	e0bffe17 	ldw	r2,-8(fp)
81118754:	10c00044 	addi	r3,r2,1
81118758:	e0fffe15 	stw	r3,-8(fp)
8111875c:	10000005 	stb	zero,0(r2)
        size--;
81118760:	e0bfff0b 	ldhu	r2,-4(fp)
81118764:	10bfffc4 	addi	r2,r2,-1
81118768:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
8111876c:	e0bfff0b 	ldhu	r2,-4(fp)
81118770:	103ff71e 	bne	r2,zero,81118750 <__reset+0xfb0f8750>
        *pdest++ = (INT8U)0;
        size--;
    }
}
81118774:	0001883a 	nop
81118778:	e037883a 	mov	sp,fp
8111877c:	df000017 	ldw	fp,0(sp)
81118780:	dec00104 	addi	sp,sp,4
81118784:	f800283a 	ret

81118788 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
81118788:	defffc04 	addi	sp,sp,-16
8111878c:	df000315 	stw	fp,12(sp)
81118790:	df000304 	addi	fp,sp,12
81118794:	e13ffd15 	stw	r4,-12(fp)
81118798:	e17ffe15 	stw	r5,-8(fp)
8111879c:	3005883a 	mov	r2,r6
811187a0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
811187a4:	00000b06 	br	811187d4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
811187a8:	e0bffd17 	ldw	r2,-12(fp)
811187ac:	10c00044 	addi	r3,r2,1
811187b0:	e0fffd15 	stw	r3,-12(fp)
811187b4:	e0fffe17 	ldw	r3,-8(fp)
811187b8:	19000044 	addi	r4,r3,1
811187bc:	e13ffe15 	stw	r4,-8(fp)
811187c0:	18c00003 	ldbu	r3,0(r3)
811187c4:	10c00005 	stb	r3,0(r2)
        size--;
811187c8:	e0bfff0b 	ldhu	r2,-4(fp)
811187cc:	10bfffc4 	addi	r2,r2,-1
811187d0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
811187d4:	e0bfff0b 	ldhu	r2,-4(fp)
811187d8:	103ff31e 	bne	r2,zero,811187a8 <__reset+0xfb0f87a8>
        *pdest++ = *psrc++;
        size--;
    }
}
811187dc:	0001883a 	nop
811187e0:	e037883a 	mov	sp,fp
811187e4:	df000017 	ldw	fp,0(sp)
811187e8:	dec00104 	addi	sp,sp,4
811187ec:	f800283a 	ret

811187f0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
811187f0:	defffb04 	addi	sp,sp,-20
811187f4:	dfc00415 	stw	ra,16(sp)
811187f8:	df000315 	stw	fp,12(sp)
811187fc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81118800:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81118804:	0005303a 	rdctl	r2,status
81118808:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111880c:	e0ffff17 	ldw	r3,-4(fp)
81118810:	00bfff84 	movi	r2,-2
81118814:	1884703a 	and	r2,r3,r2
81118818:	1001703a 	wrctl	status,r2
  
  return context;
8111881c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
81118820:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
81118824:	d0a05403 	ldbu	r2,-32432(gp)
81118828:	10803fcc 	andi	r2,r2,255
8111882c:	10001a1e 	bne	r2,zero,81118898 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
81118830:	d0a04503 	ldbu	r2,-32492(gp)
81118834:	10803fcc 	andi	r2,r2,255
81118838:	1000171e 	bne	r2,zero,81118898 <OS_Sched+0xa8>
            OS_SchedNew();
8111883c:	11188c00 	call	811188c0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
81118840:	d0e04703 	ldbu	r3,-32484(gp)
81118844:	d0a04743 	ldbu	r2,-32483(gp)
81118848:	18c03fcc 	andi	r3,r3,255
8111884c:	10803fcc 	andi	r2,r2,255
81118850:	18801126 	beq	r3,r2,81118898 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
81118854:	d0a04703 	ldbu	r2,-32484(gp)
81118858:	10c03fcc 	andi	r3,r2,255
8111885c:	00a044f4 	movhi	r2,33043
81118860:	10ba0c04 	addi	r2,r2,-6096
81118864:	18c7883a 	add	r3,r3,r3
81118868:	18c7883a 	add	r3,r3,r3
8111886c:	10c5883a 	add	r2,r2,r3
81118870:	10800017 	ldw	r2,0(r2)
81118874:	d0a04f15 	stw	r2,-32452(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
81118878:	d0a04f17 	ldw	r2,-32452(gp)
8111887c:	10c00e17 	ldw	r3,56(r2)
81118880:	18c00044 	addi	r3,r3,1
81118884:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
81118888:	d0a04a17 	ldw	r2,-32472(gp)
8111888c:	10800044 	addi	r2,r2,1
81118890:	d0a04a15 	stw	r2,-32472(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
81118894:	1123d840 	call	81123d84 <OSCtxSw>
81118898:	e0bffd17 	ldw	r2,-12(fp)
8111889c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811188a0:	e0bffe17 	ldw	r2,-8(fp)
811188a4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
811188a8:	0001883a 	nop
811188ac:	e037883a 	mov	sp,fp
811188b0:	dfc00117 	ldw	ra,4(sp)
811188b4:	df000017 	ldw	fp,0(sp)
811188b8:	dec00204 	addi	sp,sp,8
811188bc:	f800283a 	ret

811188c0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
811188c0:	defffe04 	addi	sp,sp,-8
811188c4:	df000115 	stw	fp,4(sp)
811188c8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
811188cc:	d0a05103 	ldbu	r2,-32444(gp)
811188d0:	10c03fcc 	andi	r3,r2,255
811188d4:	00a044b4 	movhi	r2,33042
811188d8:	10939204 	addi	r2,r2,20040
811188dc:	10c5883a 	add	r2,r2,r3
811188e0:	10800003 	ldbu	r2,0(r2)
811188e4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
811188e8:	e0bfff03 	ldbu	r2,-4(fp)
811188ec:	100490fa 	slli	r2,r2,3
811188f0:	1009883a 	mov	r4,r2
811188f4:	e0ffff03 	ldbu	r3,-4(fp)
811188f8:	d0a05144 	addi	r2,gp,-32443
811188fc:	1885883a 	add	r2,r3,r2
81118900:	10800003 	ldbu	r2,0(r2)
81118904:	10c03fcc 	andi	r3,r2,255
81118908:	00a044b4 	movhi	r2,33042
8111890c:	10939204 	addi	r2,r2,20040
81118910:	10c5883a 	add	r2,r2,r3
81118914:	10800003 	ldbu	r2,0(r2)
81118918:	2085883a 	add	r2,r4,r2
8111891c:	d0a04705 	stb	r2,-32484(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
81118920:	0001883a 	nop
81118924:	e037883a 	mov	sp,fp
81118928:	df000017 	ldw	fp,0(sp)
8111892c:	dec00104 	addi	sp,sp,4
81118930:	f800283a 	ret

81118934 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
81118934:	defffc04 	addi	sp,sp,-16
81118938:	df000315 	stw	fp,12(sp)
8111893c:	df000304 	addi	fp,sp,12
81118940:	e13ffe15 	stw	r4,-8(fp)
81118944:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
81118948:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
8111894c:	00000b06 	br	8111897c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
81118950:	e0bffe17 	ldw	r2,-8(fp)
81118954:	10c00044 	addi	r3,r2,1
81118958:	e0fffe15 	stw	r3,-8(fp)
8111895c:	e0ffff17 	ldw	r3,-4(fp)
81118960:	19000044 	addi	r4,r3,1
81118964:	e13fff15 	stw	r4,-4(fp)
81118968:	18c00003 	ldbu	r3,0(r3)
8111896c:	10c00005 	stb	r3,0(r2)
        len++;
81118970:	e0bffd03 	ldbu	r2,-12(fp)
81118974:	10800044 	addi	r2,r2,1
81118978:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8111897c:	e0bfff17 	ldw	r2,-4(fp)
81118980:	10800003 	ldbu	r2,0(r2)
81118984:	10803fcc 	andi	r2,r2,255
81118988:	103ff11e 	bne	r2,zero,81118950 <__reset+0xfb0f8950>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
8111898c:	e0bffe17 	ldw	r2,-8(fp)
81118990:	10000005 	stb	zero,0(r2)
    return (len);
81118994:	e0bffd03 	ldbu	r2,-12(fp)
}
81118998:	e037883a 	mov	sp,fp
8111899c:	df000017 	ldw	fp,0(sp)
811189a0:	dec00104 	addi	sp,sp,4
811189a4:	f800283a 	ret

811189a8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
811189a8:	defffd04 	addi	sp,sp,-12
811189ac:	df000215 	stw	fp,8(sp)
811189b0:	df000204 	addi	fp,sp,8
811189b4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
811189b8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
811189bc:	00000606 	br	811189d8 <OS_StrLen+0x30>
        psrc++;
811189c0:	e0bfff17 	ldw	r2,-4(fp)
811189c4:	10800044 	addi	r2,r2,1
811189c8:	e0bfff15 	stw	r2,-4(fp)
        len++;
811189cc:	e0bffe03 	ldbu	r2,-8(fp)
811189d0:	10800044 	addi	r2,r2,1
811189d4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
811189d8:	e0bfff17 	ldw	r2,-4(fp)
811189dc:	10800003 	ldbu	r2,0(r2)
811189e0:	10803fcc 	andi	r2,r2,255
811189e4:	103ff61e 	bne	r2,zero,811189c0 <__reset+0xfb0f89c0>
        psrc++;
        len++;
    }
    return (len);
811189e8:	e0bffe03 	ldbu	r2,-8(fp)
}
811189ec:	e037883a 	mov	sp,fp
811189f0:	df000017 	ldw	fp,0(sp)
811189f4:	dec00104 	addi	sp,sp,4
811189f8:	f800283a 	ret

811189fc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
811189fc:	defffa04 	addi	sp,sp,-24
81118a00:	dfc00515 	stw	ra,20(sp)
81118a04:	df000415 	stw	fp,16(sp)
81118a08:	df000404 	addi	fp,sp,16
81118a0c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81118a10:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81118a14:	0005303a 	rdctl	r2,status
81118a18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81118a1c:	e0fffd17 	ldw	r3,-12(fp)
81118a20:	00bfff84 	movi	r2,-2
81118a24:	1884703a 	and	r2,r3,r2
81118a28:	1001703a 	wrctl	status,r2
  
  return context;
81118a2c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
81118a30:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
81118a34:	d0a04617 	ldw	r2,-32488(gp)
81118a38:	10800044 	addi	r2,r2,1
81118a3c:	d0a04615 	stw	r2,-32488(gp)
81118a40:	e0bffc17 	ldw	r2,-16(fp)
81118a44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81118a48:	e0bffe17 	ldw	r2,-8(fp)
81118a4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
81118a50:	11240980 	call	81124098 <OSTaskIdleHook>
    }
81118a54:	003fef06 	br	81118a14 <__reset+0xfb0f8a14>

81118a58 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
81118a58:	defff804 	addi	sp,sp,-32
81118a5c:	dfc00715 	stw	ra,28(sp)
81118a60:	df000615 	stw	fp,24(sp)
81118a64:	dc400515 	stw	r17,20(sp)
81118a68:	dc000415 	stw	r16,16(sp)
81118a6c:	df000604 	addi	fp,sp,24
81118a70:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81118a74:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
81118a78:	00000206 	br	81118a84 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
81118a7c:	01003204 	movi	r4,200
81118a80:	111e19c0 	call	8111e19c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
81118a84:	d0a05803 	ldbu	r2,-32416(gp)
81118a88:	10803fcc 	andi	r2,r2,255
81118a8c:	103ffb26 	beq	r2,zero,81118a7c <__reset+0xfb0f8a7c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
81118a90:	d0e04b17 	ldw	r3,-32468(gp)
81118a94:	00947b34 	movhi	r2,20972
81118a98:	10a147c4 	addi	r2,r2,-31457
81118a9c:	1888383a 	mulxuu	r4,r3,r2
81118aa0:	1885383a 	mul	r2,r3,r2
81118aa4:	1021883a 	mov	r16,r2
81118aa8:	2023883a 	mov	r17,r4
81118aac:	8804d17a 	srli	r2,r17,5
81118ab0:	d0a04b15 	stw	r2,-32468(gp)
    if (OSIdleCtrMax == 0L) {
81118ab4:	d0a04b17 	ldw	r2,-32468(gp)
81118ab8:	1000031e 	bne	r2,zero,81118ac8 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
81118abc:	d0204d05 	stb	zero,-32460(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
81118ac0:	01003fc4 	movi	r4,255
81118ac4:	111de240 	call	8111de24 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81118ac8:	0005303a 	rdctl	r2,status
81118acc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81118ad0:	e0fffb17 	ldw	r3,-20(fp)
81118ad4:	00bfff84 	movi	r2,-2
81118ad8:	1884703a 	and	r2,r3,r2
81118adc:	1001703a 	wrctl	status,r2
  
  return context;
81118ae0:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
81118ae4:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
81118ae8:	d0a04617 	ldw	r2,-32488(gp)
81118aec:	d0a05915 	stw	r2,-32412(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
81118af0:	d0204615 	stw	zero,-32488(gp)
81118af4:	e0bffa17 	ldw	r2,-24(fp)
81118af8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81118afc:	e0bffc17 	ldw	r2,-16(fp)
81118b00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
81118b04:	d0e05917 	ldw	r3,-32412(gp)
81118b08:	d0a04b17 	ldw	r2,-32468(gp)
81118b0c:	1885203a 	divu	r2,r3,r2
81118b10:	1007883a 	mov	r3,r2
81118b14:	00801904 	movi	r2,100
81118b18:	10c5c83a 	sub	r2,r2,r3
81118b1c:	d0a04d05 	stb	r2,-32460(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
81118b20:	11240180 	call	81124018 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
81118b24:	1118b340 	call	81118b34 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
81118b28:	01001904 	movi	r4,100
81118b2c:	111e19c0 	call	8111e19c <OSTimeDly>
    }
81118b30:	003fe506 	br	81118ac8 <__reset+0xfb0f8ac8>

81118b34 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
81118b34:	defffa04 	addi	sp,sp,-24
81118b38:	dfc00515 	stw	ra,20(sp)
81118b3c:	df000415 	stw	fp,16(sp)
81118b40:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
81118b44:	e03ffc05 	stb	zero,-16(fp)
81118b48:	00002406 	br	81118bdc <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
81118b4c:	e0bffc03 	ldbu	r2,-16(fp)
81118b50:	e0fffe04 	addi	r3,fp,-8
81118b54:	180b883a 	mov	r5,r3
81118b58:	1009883a 	mov	r4,r2
81118b5c:	111dc640 	call	8111dc64 <OSTaskStkChk>
81118b60:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
81118b64:	e0bffc43 	ldbu	r2,-15(fp)
81118b68:	1000191e 	bne	r2,zero,81118bd0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
81118b6c:	e0fffc03 	ldbu	r3,-16(fp)
81118b70:	00a044f4 	movhi	r2,33043
81118b74:	10ba0c04 	addi	r2,r2,-6096
81118b78:	18c7883a 	add	r3,r3,r3
81118b7c:	18c7883a 	add	r3,r3,r3
81118b80:	10c5883a 	add	r2,r2,r3
81118b84:	10800017 	ldw	r2,0(r2)
81118b88:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
81118b8c:	e0bffd17 	ldw	r2,-12(fp)
81118b90:	10000f26 	beq	r2,zero,81118bd0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
81118b94:	e0bffd17 	ldw	r2,-12(fp)
81118b98:	10800060 	cmpeqi	r2,r2,1
81118b9c:	10000c1e 	bne	r2,zero,81118bd0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
81118ba0:	e0bffd17 	ldw	r2,-12(fp)
81118ba4:	10c00217 	ldw	r3,8(r2)
81118ba8:	e0bffd17 	ldw	r2,-12(fp)
81118bac:	10800317 	ldw	r2,12(r2)
81118bb0:	1085883a 	add	r2,r2,r2
81118bb4:	1085883a 	add	r2,r2,r2
81118bb8:	1887883a 	add	r3,r3,r2
81118bbc:	e0bffd17 	ldw	r2,-12(fp)
81118bc0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
81118bc4:	e0ffff17 	ldw	r3,-4(fp)
81118bc8:	e0bffd17 	ldw	r2,-12(fp)
81118bcc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
81118bd0:	e0bffc03 	ldbu	r2,-16(fp)
81118bd4:	10800044 	addi	r2,r2,1
81118bd8:	e0bffc05 	stb	r2,-16(fp)
81118bdc:	e0bffc03 	ldbu	r2,-16(fp)
81118be0:	108007f0 	cmpltui	r2,r2,31
81118be4:	103fd91e 	bne	r2,zero,81118b4c <__reset+0xfb0f8b4c>
#endif
                }
            }
        }
    }
}
81118be8:	0001883a 	nop
81118bec:	e037883a 	mov	sp,fp
81118bf0:	dfc00117 	ldw	ra,4(sp)
81118bf4:	df000017 	ldw	fp,0(sp)
81118bf8:	dec00204 	addi	sp,sp,8
81118bfc:	f800283a 	ret

81118c00 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
81118c00:	defff204 	addi	sp,sp,-56
81118c04:	dfc00d15 	stw	ra,52(sp)
81118c08:	df000c15 	stw	fp,48(sp)
81118c0c:	df000c04 	addi	fp,sp,48
81118c10:	e17ffc15 	stw	r5,-16(fp)
81118c14:	e1bffd15 	stw	r6,-12(fp)
81118c18:	3807883a 	mov	r3,r7
81118c1c:	e0800417 	ldw	r2,16(fp)
81118c20:	e13ffb05 	stb	r4,-20(fp)
81118c24:	e0fffe0d 	sth	r3,-8(fp)
81118c28:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81118c2c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81118c30:	0005303a 	rdctl	r2,status
81118c34:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81118c38:	e0fffa17 	ldw	r3,-24(fp)
81118c3c:	00bfff84 	movi	r2,-2
81118c40:	1884703a 	and	r2,r3,r2
81118c44:	1001703a 	wrctl	status,r2
  
  return context;
81118c48:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
81118c4c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
81118c50:	d0a04c17 	ldw	r2,-32464(gp)
81118c54:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
81118c58:	e0bff617 	ldw	r2,-40(fp)
81118c5c:	10009326 	beq	r2,zero,81118eac <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
81118c60:	e0bff617 	ldw	r2,-40(fp)
81118c64:	10800517 	ldw	r2,20(r2)
81118c68:	d0a04c15 	stw	r2,-32464(gp)
81118c6c:	e0bff417 	ldw	r2,-48(fp)
81118c70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81118c74:	e0bff817 	ldw	r2,-32(fp)
81118c78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
81118c7c:	e0bff617 	ldw	r2,-40(fp)
81118c80:	e0fffc17 	ldw	r3,-16(fp)
81118c84:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
81118c88:	e0bff617 	ldw	r2,-40(fp)
81118c8c:	e0fffb03 	ldbu	r3,-20(fp)
81118c90:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
81118c94:	e0bff617 	ldw	r2,-40(fp)
81118c98:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
81118c9c:	e0bff617 	ldw	r2,-40(fp)
81118ca0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
81118ca4:	e0bff617 	ldw	r2,-40(fp)
81118ca8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
81118cac:	e0bff617 	ldw	r2,-40(fp)
81118cb0:	e0c00317 	ldw	r3,12(fp)
81118cb4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
81118cb8:	e0bff617 	ldw	r2,-40(fp)
81118cbc:	e0c00217 	ldw	r3,8(fp)
81118cc0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
81118cc4:	e0bff617 	ldw	r2,-40(fp)
81118cc8:	e0fffd17 	ldw	r3,-12(fp)
81118ccc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
81118cd0:	e0bff617 	ldw	r2,-40(fp)
81118cd4:	e0ffff0b 	ldhu	r3,-4(fp)
81118cd8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
81118cdc:	e0bff617 	ldw	r2,-40(fp)
81118ce0:	e0fffe0b 	ldhu	r3,-8(fp)
81118ce4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
81118ce8:	e0bff617 	ldw	r2,-40(fp)
81118cec:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
81118cf0:	e0bffb03 	ldbu	r2,-20(fp)
81118cf4:	1004d0fa 	srli	r2,r2,3
81118cf8:	1007883a 	mov	r3,r2
81118cfc:	e0bff617 	ldw	r2,-40(fp)
81118d00:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
81118d04:	e0bffb03 	ldbu	r2,-20(fp)
81118d08:	108001cc 	andi	r2,r2,7
81118d0c:	1007883a 	mov	r3,r2
81118d10:	e0bff617 	ldw	r2,-40(fp)
81118d14:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
81118d18:	e0bff617 	ldw	r2,-40(fp)
81118d1c:	10800d03 	ldbu	r2,52(r2)
81118d20:	10803fcc 	andi	r2,r2,255
81118d24:	00c00044 	movi	r3,1
81118d28:	1884983a 	sll	r2,r3,r2
81118d2c:	1007883a 	mov	r3,r2
81118d30:	e0bff617 	ldw	r2,-40(fp)
81118d34:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
81118d38:	e0bff617 	ldw	r2,-40(fp)
81118d3c:	10800cc3 	ldbu	r2,51(r2)
81118d40:	10803fcc 	andi	r2,r2,255
81118d44:	00c00044 	movi	r3,1
81118d48:	1884983a 	sll	r2,r3,r2
81118d4c:	1007883a 	mov	r3,r2
81118d50:	e0bff617 	ldw	r2,-40(fp)
81118d54:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
81118d58:	e0bff617 	ldw	r2,-40(fp)
81118d5c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
81118d60:	e0bff617 	ldw	r2,-40(fp)
81118d64:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
81118d68:	e0bff617 	ldw	r2,-40(fp)
81118d6c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
81118d70:	e0bff617 	ldw	r2,-40(fp)
81118d74:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
81118d78:	e0bff617 	ldw	r2,-40(fp)
81118d7c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
81118d80:	e0bff617 	ldw	r2,-40(fp)
81118d84:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
81118d88:	e0bff617 	ldw	r2,-40(fp)
81118d8c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
81118d90:	e0bff617 	ldw	r2,-40(fp)
81118d94:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
81118d98:	e0bff617 	ldw	r2,-40(fp)
81118d9c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
81118da0:	e0bff617 	ldw	r2,-40(fp)
81118da4:	00c00fc4 	movi	r3,63
81118da8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
81118dac:	e0bff617 	ldw	r2,-40(fp)
81118db0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
81118db4:	e13ff617 	ldw	r4,-40(fp)
81118db8:	11240b80 	call	811240b8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
81118dbc:	e13ff617 	ldw	r4,-40(fp)
81118dc0:	1123fb00 	call	81123fb0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81118dc4:	0005303a 	rdctl	r2,status
81118dc8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81118dcc:	e0fff517 	ldw	r3,-44(fp)
81118dd0:	00bfff84 	movi	r2,-2
81118dd4:	1884703a 	and	r2,r3,r2
81118dd8:	1001703a 	wrctl	status,r2
  
  return context;
81118ddc:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
81118de0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
81118de4:	e0fffb03 	ldbu	r3,-20(fp)
81118de8:	00a044f4 	movhi	r2,33043
81118dec:	10ba0c04 	addi	r2,r2,-6096
81118df0:	18c7883a 	add	r3,r3,r3
81118df4:	18c7883a 	add	r3,r3,r3
81118df8:	10c5883a 	add	r2,r2,r3
81118dfc:	e0fff617 	ldw	r3,-40(fp)
81118e00:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
81118e04:	d0e04817 	ldw	r3,-32480(gp)
81118e08:	e0bff617 	ldw	r2,-40(fp)
81118e0c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
81118e10:	e0bff617 	ldw	r2,-40(fp)
81118e14:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
81118e18:	d0a04817 	ldw	r2,-32480(gp)
81118e1c:	10000326 	beq	r2,zero,81118e2c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
81118e20:	d0a04817 	ldw	r2,-32480(gp)
81118e24:	e0fff617 	ldw	r3,-40(fp)
81118e28:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
81118e2c:	e0bff617 	ldw	r2,-40(fp)
81118e30:	d0a04815 	stw	r2,-32480(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
81118e34:	e0bff617 	ldw	r2,-40(fp)
81118e38:	10c00d83 	ldbu	r3,54(r2)
81118e3c:	d0a05103 	ldbu	r2,-32444(gp)
81118e40:	1884b03a 	or	r2,r3,r2
81118e44:	d0a05105 	stb	r2,-32444(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81118e48:	e0bff617 	ldw	r2,-40(fp)
81118e4c:	10800d03 	ldbu	r2,52(r2)
81118e50:	10c03fcc 	andi	r3,r2,255
81118e54:	e0bff617 	ldw	r2,-40(fp)
81118e58:	10800d03 	ldbu	r2,52(r2)
81118e5c:	11003fcc 	andi	r4,r2,255
81118e60:	d0a05144 	addi	r2,gp,-32443
81118e64:	2085883a 	add	r2,r4,r2
81118e68:	11000003 	ldbu	r4,0(r2)
81118e6c:	e0bff617 	ldw	r2,-40(fp)
81118e70:	10800d43 	ldbu	r2,53(r2)
81118e74:	2084b03a 	or	r2,r4,r2
81118e78:	1009883a 	mov	r4,r2
81118e7c:	d0a05144 	addi	r2,gp,-32443
81118e80:	1885883a 	add	r2,r3,r2
81118e84:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
81118e88:	d0a04d43 	ldbu	r2,-32459(gp)
81118e8c:	10800044 	addi	r2,r2,1
81118e90:	d0a04d45 	stb	r2,-32459(gp)
81118e94:	e0bff417 	ldw	r2,-48(fp)
81118e98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81118e9c:	e0bff717 	ldw	r2,-36(fp)
81118ea0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
81118ea4:	0005883a 	mov	r2,zero
81118ea8:	00000506 	br	81118ec0 <OS_TCBInit+0x2c0>
81118eac:	e0bff417 	ldw	r2,-48(fp)
81118eb0:	e0bff915 	stw	r2,-28(fp)
81118eb4:	e0bff917 	ldw	r2,-28(fp)
81118eb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
81118ebc:	00801084 	movi	r2,66
}
81118ec0:	e037883a 	mov	sp,fp
81118ec4:	dfc00117 	ldw	ra,4(sp)
81118ec8:	df000017 	ldw	fp,0(sp)
81118ecc:	dec00204 	addi	sp,sp,8
81118ed0:	f800283a 	ret

81118ed4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
81118ed4:	defffe04 	addi	sp,sp,-8
81118ed8:	df000115 	stw	fp,4(sp)
81118edc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
81118ee0:	d0a01104 	addi	r2,gp,-32700
81118ee4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
81118ee8:	d0a01204 	addi	r2,gp,-32696
81118eec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
81118ef0:	d0a01384 	addi	r2,gp,-32690
81118ef4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
81118ef8:	d0a01404 	addi	r2,gp,-32688
81118efc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
81118f00:	d0a01304 	addi	r2,gp,-32692
81118f04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
81118f08:	d0a01484 	addi	r2,gp,-32686
81118f0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
81118f10:	d0a01504 	addi	r2,gp,-32684
81118f14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
81118f18:	d0a01584 	addi	r2,gp,-32682
81118f1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
81118f20:	d0a01604 	addi	r2,gp,-32680
81118f24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
81118f28:	d0a01684 	addi	r2,gp,-32678
81118f2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
81118f30:	d0a01704 	addi	r2,gp,-32676
81118f34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
81118f38:	d0a01784 	addi	r2,gp,-32674
81118f3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
81118f40:	d0a01804 	addi	r2,gp,-32672
81118f44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
81118f48:	d0a01884 	addi	r2,gp,-32670
81118f4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
81118f50:	d0a01904 	addi	r2,gp,-32668
81118f54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
81118f58:	d0a01984 	addi	r2,gp,-32666
81118f5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
81118f60:	d0a01a04 	addi	r2,gp,-32664
81118f64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
81118f68:	d0a01a84 	addi	r2,gp,-32662
81118f6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
81118f70:	d0a01b04 	addi	r2,gp,-32660
81118f74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
81118f78:	d0a01b84 	addi	r2,gp,-32658
81118f7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
81118f80:	d0a01c04 	addi	r2,gp,-32656
81118f84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
81118f88:	d0a01c84 	addi	r2,gp,-32654
81118f8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
81118f90:	d0a01d04 	addi	r2,gp,-32652
81118f94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
81118f98:	d0a01d84 	addi	r2,gp,-32650
81118f9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
81118fa0:	d0a01e04 	addi	r2,gp,-32648
81118fa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
81118fa8:	d0a01e84 	addi	r2,gp,-32646
81118fac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
81118fb0:	d0a01f04 	addi	r2,gp,-32644
81118fb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
81118fb8:	d0a01f84 	addi	r2,gp,-32642
81118fbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
81118fc0:	d0a02004 	addi	r2,gp,-32640
81118fc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
81118fc8:	d0a02084 	addi	r2,gp,-32638
81118fcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
81118fd0:	d0a02104 	addi	r2,gp,-32636
81118fd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
81118fd8:	d0a02184 	addi	r2,gp,-32634
81118fdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
81118fe0:	d0a02204 	addi	r2,gp,-32632
81118fe4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
81118fe8:	d0a02284 	addi	r2,gp,-32630
81118fec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
81118ff0:	d0a02304 	addi	r2,gp,-32628
81118ff4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
81118ff8:	d0a02384 	addi	r2,gp,-32626
81118ffc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
81119000:	d0a02404 	addi	r2,gp,-32624
81119004:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
81119008:	d0a02484 	addi	r2,gp,-32622
8111900c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
81119010:	d0a02504 	addi	r2,gp,-32620
81119014:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
81119018:	d0a02584 	addi	r2,gp,-32618
8111901c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
81119020:	d0a02604 	addi	r2,gp,-32616
81119024:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
81119028:	d0a02684 	addi	r2,gp,-32614
8111902c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
81119030:	d0a02704 	addi	r2,gp,-32612
81119034:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
81119038:	d0a02784 	addi	r2,gp,-32610
8111903c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
81119040:	d0a02804 	addi	r2,gp,-32608
81119044:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
81119048:	d0a02d04 	addi	r2,gp,-32588
8111904c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
81119050:	0001883a 	nop
81119054:	e037883a 	mov	sp,fp
81119058:	df000017 	ldw	fp,0(sp)
8111905c:	dec00104 	addi	sp,sp,4
81119060:	f800283a 	ret

81119064 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
81119064:	defff204 	addi	sp,sp,-56
81119068:	df000d15 	stw	fp,52(sp)
8111906c:	df000d04 	addi	fp,sp,52
81119070:	e13ffc15 	stw	r4,-16(fp)
81119074:	2807883a 	mov	r3,r5
81119078:	3005883a 	mov	r2,r6
8111907c:	e1ffff15 	stw	r7,-4(fp)
81119080:	e0fffd0d 	sth	r3,-12(fp)
81119084:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81119088:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8111908c:	e0bfff17 	ldw	r2,-4(fp)
81119090:	1000021e 	bne	r2,zero,8111909c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
81119094:	0005883a 	mov	r2,zero
81119098:	0000b006 	br	8111935c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8111909c:	e0bffc17 	ldw	r2,-16(fp)
811190a0:	1000051e 	bne	r2,zero,811190b8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811190a4:	e0bfff17 	ldw	r2,-4(fp)
811190a8:	00c01b84 	movi	r3,110
811190ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811190b0:	0005883a 	mov	r2,zero
811190b4:	0000a906 	br	8111935c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
811190b8:	e0bffc17 	ldw	r2,-16(fp)
811190bc:	10800003 	ldbu	r2,0(r2)
811190c0:	10803fcc 	andi	r2,r2,255
811190c4:	10800160 	cmpeqi	r2,r2,5
811190c8:	1000051e 	bne	r2,zero,811190e0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
811190cc:	e0bfff17 	ldw	r2,-4(fp)
811190d0:	00c00044 	movi	r3,1
811190d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811190d8:	0005883a 	mov	r2,zero
811190dc:	00009f06 	br	8111935c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
811190e0:	e0fffe03 	ldbu	r3,-8(fp)
811190e4:	00bfe004 	movi	r2,-128
811190e8:	1884703a 	and	r2,r3,r2
811190ec:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
811190f0:	e0bff503 	ldbu	r2,-44(fp)
811190f4:	10000626 	beq	r2,zero,81119110 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
811190f8:	e0bffe03 	ldbu	r2,-8(fp)
811190fc:	10801fcc 	andi	r2,r2,127
81119100:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
81119104:	00800044 	movi	r2,1
81119108:	e0bff385 	stb	r2,-50(fp)
8111910c:	00000106 	br	81119114 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
81119110:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
81119114:	e0bfff17 	ldw	r2,-4(fp)
81119118:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111911c:	0005303a 	rdctl	r2,status
81119120:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81119124:	e0fffb17 	ldw	r3,-20(fp)
81119128:	00bfff84 	movi	r2,-2
8111912c:	1884703a 	and	r2,r3,r2
81119130:	1001703a 	wrctl	status,r2
  
  return context;
81119134:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
81119138:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
8111913c:	e0bffe03 	ldbu	r2,-8(fp)
81119140:	10c00060 	cmpeqi	r3,r2,1
81119144:	18005f1e 	bne	r3,zero,811192c4 <OSFlagAccept+0x260>
81119148:	10c00088 	cmpgei	r3,r2,2
8111914c:	1800021e 	bne	r3,zero,81119158 <OSFlagAccept+0xf4>
81119150:	10003f26 	beq	r2,zero,81119250 <OSFlagAccept+0x1ec>
81119154:	00007706 	br	81119334 <OSFlagAccept+0x2d0>
81119158:	10c000a0 	cmpeqi	r3,r2,2
8111915c:	1800031e 	bne	r3,zero,8111916c <OSFlagAccept+0x108>
81119160:	108000e0 	cmpeqi	r2,r2,3
81119164:	10001e1e 	bne	r2,zero,811191e0 <OSFlagAccept+0x17c>
81119168:	00007206 	br	81119334 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8111916c:	e0bffc17 	ldw	r2,-16(fp)
81119170:	10c0020b 	ldhu	r3,8(r2)
81119174:	e0bffd0b 	ldhu	r2,-12(fp)
81119178:	1884703a 	and	r2,r3,r2
8111917c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81119180:	e0fff30b 	ldhu	r3,-52(fp)
81119184:	e0bffd0b 	ldhu	r2,-12(fp)
81119188:	18800d1e 	bne	r3,r2,811191c0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8111918c:	e0bff383 	ldbu	r2,-50(fp)
81119190:	10800058 	cmpnei	r2,r2,1
81119194:	10000d1e 	bne	r2,zero,811191cc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
81119198:	e0bffc17 	ldw	r2,-16(fp)
8111919c:	1080020b 	ldhu	r2,8(r2)
811191a0:	1007883a 	mov	r3,r2
811191a4:	e0bff30b 	ldhu	r2,-52(fp)
811191a8:	0084303a 	nor	r2,zero,r2
811191ac:	1884703a 	and	r2,r3,r2
811191b0:	1007883a 	mov	r3,r2
811191b4:	e0bffc17 	ldw	r2,-16(fp)
811191b8:	10c0020d 	sth	r3,8(r2)
811191bc:	00000306 	br	811191cc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
811191c0:	e0bfff17 	ldw	r2,-4(fp)
811191c4:	00c01c04 	movi	r3,112
811191c8:	10c00005 	stb	r3,0(r2)
811191cc:	e0bff417 	ldw	r2,-48(fp)
811191d0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811191d4:	e0bff617 	ldw	r2,-40(fp)
811191d8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
811191dc:	00005e06 	br	81119358 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
811191e0:	e0bffc17 	ldw	r2,-16(fp)
811191e4:	10c0020b 	ldhu	r3,8(r2)
811191e8:	e0bffd0b 	ldhu	r2,-12(fp)
811191ec:	1884703a 	and	r2,r3,r2
811191f0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
811191f4:	e0bff30b 	ldhu	r2,-52(fp)
811191f8:	10000d26 	beq	r2,zero,81119230 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811191fc:	e0bff383 	ldbu	r2,-50(fp)
81119200:	10800058 	cmpnei	r2,r2,1
81119204:	10000d1e 	bne	r2,zero,8111923c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
81119208:	e0bffc17 	ldw	r2,-16(fp)
8111920c:	1080020b 	ldhu	r2,8(r2)
81119210:	1007883a 	mov	r3,r2
81119214:	e0bff30b 	ldhu	r2,-52(fp)
81119218:	0084303a 	nor	r2,zero,r2
8111921c:	1884703a 	and	r2,r3,r2
81119220:	1007883a 	mov	r3,r2
81119224:	e0bffc17 	ldw	r2,-16(fp)
81119228:	10c0020d 	sth	r3,8(r2)
8111922c:	00000306 	br	8111923c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81119230:	e0bfff17 	ldw	r2,-4(fp)
81119234:	00c01c04 	movi	r3,112
81119238:	10c00005 	stb	r3,0(r2)
8111923c:	e0bff417 	ldw	r2,-48(fp)
81119240:	e0bff715 	stw	r2,-36(fp)
81119244:	e0bff717 	ldw	r2,-36(fp)
81119248:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8111924c:	00004206 	br	81119358 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
81119250:	e0bffc17 	ldw	r2,-16(fp)
81119254:	1080020b 	ldhu	r2,8(r2)
81119258:	0084303a 	nor	r2,zero,r2
8111925c:	1007883a 	mov	r3,r2
81119260:	e0bffd0b 	ldhu	r2,-12(fp)
81119264:	1884703a 	and	r2,r3,r2
81119268:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8111926c:	e0fff30b 	ldhu	r3,-52(fp)
81119270:	e0bffd0b 	ldhu	r2,-12(fp)
81119274:	18800b1e 	bne	r3,r2,811192a4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81119278:	e0bff383 	ldbu	r2,-50(fp)
8111927c:	10800058 	cmpnei	r2,r2,1
81119280:	10000b1e 	bne	r2,zero,811192b0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
81119284:	e0bffc17 	ldw	r2,-16(fp)
81119288:	10c0020b 	ldhu	r3,8(r2)
8111928c:	e0bff30b 	ldhu	r2,-52(fp)
81119290:	1884b03a 	or	r2,r3,r2
81119294:	1007883a 	mov	r3,r2
81119298:	e0bffc17 	ldw	r2,-16(fp)
8111929c:	10c0020d 	sth	r3,8(r2)
811192a0:	00000306 	br	811192b0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
811192a4:	e0bfff17 	ldw	r2,-4(fp)
811192a8:	00c01c04 	movi	r3,112
811192ac:	10c00005 	stb	r3,0(r2)
811192b0:	e0bff417 	ldw	r2,-48(fp)
811192b4:	e0bff815 	stw	r2,-32(fp)
811192b8:	e0bff817 	ldw	r2,-32(fp)
811192bc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
811192c0:	00002506 	br	81119358 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
811192c4:	e0bffc17 	ldw	r2,-16(fp)
811192c8:	1080020b 	ldhu	r2,8(r2)
811192cc:	0084303a 	nor	r2,zero,r2
811192d0:	1007883a 	mov	r3,r2
811192d4:	e0bffd0b 	ldhu	r2,-12(fp)
811192d8:	1884703a 	and	r2,r3,r2
811192dc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
811192e0:	e0bff30b 	ldhu	r2,-52(fp)
811192e4:	10000b26 	beq	r2,zero,81119314 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811192e8:	e0bff383 	ldbu	r2,-50(fp)
811192ec:	10800058 	cmpnei	r2,r2,1
811192f0:	10000b1e 	bne	r2,zero,81119320 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
811192f4:	e0bffc17 	ldw	r2,-16(fp)
811192f8:	10c0020b 	ldhu	r3,8(r2)
811192fc:	e0bff30b 	ldhu	r2,-52(fp)
81119300:	1884b03a 	or	r2,r3,r2
81119304:	1007883a 	mov	r3,r2
81119308:	e0bffc17 	ldw	r2,-16(fp)
8111930c:	10c0020d 	sth	r3,8(r2)
81119310:	00000306 	br	81119320 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81119314:	e0bfff17 	ldw	r2,-4(fp)
81119318:	00c01c04 	movi	r3,112
8111931c:	10c00005 	stb	r3,0(r2)
81119320:	e0bff417 	ldw	r2,-48(fp)
81119324:	e0bff915 	stw	r2,-28(fp)
81119328:	e0bff917 	ldw	r2,-28(fp)
8111932c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81119330:	00000906 	br	81119358 <OSFlagAccept+0x2f4>
81119334:	e0bff417 	ldw	r2,-48(fp)
81119338:	e0bffa15 	stw	r2,-24(fp)
8111933c:	e0bffa17 	ldw	r2,-24(fp)
81119340:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
81119344:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
81119348:	e0bfff17 	ldw	r2,-4(fp)
8111934c:	00c01bc4 	movi	r3,111
81119350:	10c00005 	stb	r3,0(r2)
             break;
81119354:	0001883a 	nop
    }
    return (flags_rdy);
81119358:	e0bff30b 	ldhu	r2,-52(fp)
}
8111935c:	e037883a 	mov	sp,fp
81119360:	df000017 	ldw	fp,0(sp)
81119364:	dec00104 	addi	sp,sp,4
81119368:	f800283a 	ret

8111936c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
8111936c:	defff804 	addi	sp,sp,-32
81119370:	df000715 	stw	fp,28(sp)
81119374:	df000704 	addi	fp,sp,28
81119378:	2005883a 	mov	r2,r4
8111937c:	e17fff15 	stw	r5,-4(fp)
81119380:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
81119384:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
81119388:	e0bfff17 	ldw	r2,-4(fp)
8111938c:	1000021e 	bne	r2,zero,81119398 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
81119390:	0005883a 	mov	r2,zero
81119394:	00003306 	br	81119464 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
81119398:	d0a05403 	ldbu	r2,-32432(gp)
8111939c:	10803fcc 	andi	r2,r2,255
811193a0:	10000526 	beq	r2,zero,811193b8 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
811193a4:	e0bfff17 	ldw	r2,-4(fp)
811193a8:	00c00404 	movi	r3,16
811193ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
811193b0:	0005883a 	mov	r2,zero
811193b4:	00002b06 	br	81119464 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811193b8:	0005303a 	rdctl	r2,status
811193bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811193c0:	e0fffd17 	ldw	r3,-12(fp)
811193c4:	00bfff84 	movi	r2,-2
811193c8:	1884703a 	and	r2,r3,r2
811193cc:	1001703a 	wrctl	status,r2
  
  return context;
811193d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811193d4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
811193d8:	d0a05717 	ldw	r2,-32420(gp)
811193dc:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
811193e0:	e0bffb17 	ldw	r2,-20(fp)
811193e4:	10001726 	beq	r2,zero,81119444 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
811193e8:	d0a05717 	ldw	r2,-32420(gp)
811193ec:	10800117 	ldw	r2,4(r2)
811193f0:	d0a05715 	stw	r2,-32420(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
811193f4:	e0bffb17 	ldw	r2,-20(fp)
811193f8:	00c00144 	movi	r3,5
811193fc:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
81119400:	e0bffb17 	ldw	r2,-20(fp)
81119404:	e0fffe0b 	ldhu	r3,-8(fp)
81119408:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
8111940c:	e0bffb17 	ldw	r2,-20(fp)
81119410:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
81119414:	e0bffb17 	ldw	r2,-20(fp)
81119418:	00c00fc4 	movi	r3,63
8111941c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81119420:	e0bffb17 	ldw	r2,-20(fp)
81119424:	100002c5 	stb	zero,11(r2)
81119428:	e0bff917 	ldw	r2,-28(fp)
8111942c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81119430:	e0bffa17 	ldw	r2,-24(fp)
81119434:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
81119438:	e0bfff17 	ldw	r2,-4(fp)
8111943c:	10000005 	stb	zero,0(r2)
81119440:	00000706 	br	81119460 <OSFlagCreate+0xf4>
81119444:	e0bff917 	ldw	r2,-28(fp)
81119448:	e0bffc15 	stw	r2,-16(fp)
8111944c:	e0bffc17 	ldw	r2,-16(fp)
81119450:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
81119454:	e0bfff17 	ldw	r2,-4(fp)
81119458:	00c01c84 	movi	r3,114
8111945c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
81119460:	e0bffb17 	ldw	r2,-20(fp)
}
81119464:	e037883a 	mov	sp,fp
81119468:	df000017 	ldw	fp,0(sp)
8111946c:	dec00104 	addi	sp,sp,4
81119470:	f800283a 	ret

81119474 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
81119474:	defff204 	addi	sp,sp,-56
81119478:	dfc00d15 	stw	ra,52(sp)
8111947c:	df000c15 	stw	fp,48(sp)
81119480:	df000c04 	addi	fp,sp,48
81119484:	e13ffd15 	stw	r4,-12(fp)
81119488:	2805883a 	mov	r2,r5
8111948c:	e1bfff15 	stw	r6,-4(fp)
81119490:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81119494:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81119498:	e0bfff17 	ldw	r2,-4(fp)
8111949c:	1000021e 	bne	r2,zero,811194a8 <OSFlagDel+0x34>
        return (pgrp);
811194a0:	e0bffd17 	ldw	r2,-12(fp)
811194a4:	00008006 	br	811196a8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
811194a8:	e0bffd17 	ldw	r2,-12(fp)
811194ac:	1000051e 	bne	r2,zero,811194c4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811194b0:	e0bfff17 	ldw	r2,-4(fp)
811194b4:	00c01b84 	movi	r3,110
811194b8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
811194bc:	e0bffd17 	ldw	r2,-12(fp)
811194c0:	00007906 	br	811196a8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811194c4:	d0a05403 	ldbu	r2,-32432(gp)
811194c8:	10803fcc 	andi	r2,r2,255
811194cc:	10000526 	beq	r2,zero,811194e4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
811194d0:	e0bfff17 	ldw	r2,-4(fp)
811194d4:	00c003c4 	movi	r3,15
811194d8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
811194dc:	e0bffd17 	ldw	r2,-12(fp)
811194e0:	00007106 	br	811196a8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
811194e4:	e0bffd17 	ldw	r2,-12(fp)
811194e8:	10800003 	ldbu	r2,0(r2)
811194ec:	10803fcc 	andi	r2,r2,255
811194f0:	10800160 	cmpeqi	r2,r2,5
811194f4:	1000051e 	bne	r2,zero,8111950c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
811194f8:	e0bfff17 	ldw	r2,-4(fp)
811194fc:	00c00044 	movi	r3,1
81119500:	10c00005 	stb	r3,0(r2)
        return (pgrp);
81119504:	e0bffd17 	ldw	r2,-12(fp)
81119508:	00006706 	br	811196a8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111950c:	0005303a 	rdctl	r2,status
81119510:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81119514:	e0fffc17 	ldw	r3,-16(fp)
81119518:	00bfff84 	movi	r2,-2
8111951c:	1884703a 	and	r2,r3,r2
81119520:	1001703a 	wrctl	status,r2
  
  return context;
81119524:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81119528:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
8111952c:	e0bffd17 	ldw	r2,-12(fp)
81119530:	10800117 	ldw	r2,4(r2)
81119534:	10000326 	beq	r2,zero,81119544 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81119538:	00800044 	movi	r2,1
8111953c:	e0bff405 	stb	r2,-48(fp)
81119540:	00000106 	br	81119548 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81119544:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
81119548:	e0bffe03 	ldbu	r2,-8(fp)
8111954c:	10000326 	beq	r2,zero,8111955c <OSFlagDel+0xe8>
81119550:	10800060 	cmpeqi	r2,r2,1
81119554:	1000231e 	bne	r2,zero,811195e4 <OSFlagDel+0x170>
81119558:	00004806 	br	8111967c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
8111955c:	e0bff403 	ldbu	r2,-48(fp)
81119560:	1000161e 	bne	r2,zero,811195bc <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
81119564:	e0bffd17 	ldw	r2,-12(fp)
81119568:	00c00fc4 	movi	r3,63
8111956c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81119570:	e0bffd17 	ldw	r2,-12(fp)
81119574:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81119578:	e0bffd17 	ldw	r2,-12(fp)
8111957c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
81119580:	d0e05717 	ldw	r3,-32420(gp)
81119584:	e0bffd17 	ldw	r2,-12(fp)
81119588:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
8111958c:	e0bffd17 	ldw	r2,-12(fp)
81119590:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
81119594:	e0bffd17 	ldw	r2,-12(fp)
81119598:	d0a05715 	stw	r2,-32420(gp)
8111959c:	e0bff717 	ldw	r2,-36(fp)
811195a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811195a4:	e0bff817 	ldw	r2,-32(fp)
811195a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
811195ac:	e0bfff17 	ldw	r2,-4(fp)
811195b0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
811195b4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
811195b8:	00003a06 	br	811196a4 <OSFlagDel+0x230>
811195bc:	e0bff717 	ldw	r2,-36(fp)
811195c0:	e0bff915 	stw	r2,-28(fp)
811195c4:	e0bff917 	ldw	r2,-28(fp)
811195c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
811195cc:	e0bfff17 	ldw	r2,-4(fp)
811195d0:	00c01244 	movi	r3,73
811195d4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
811195d8:	e0bffd17 	ldw	r2,-12(fp)
811195dc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
811195e0:	00003006 	br	811196a4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
811195e4:	e0bffd17 	ldw	r2,-12(fp)
811195e8:	10800117 	ldw	r2,4(r2)
811195ec:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
811195f0:	00000606 	br	8111960c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
811195f4:	000b883a 	mov	r5,zero
811195f8:	e13ff517 	ldw	r4,-44(fp)
811195fc:	111a5e00 	call	8111a5e0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
81119600:	e0bff517 	ldw	r2,-44(fp)
81119604:	10800017 	ldw	r2,0(r2)
81119608:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8111960c:	e0bff517 	ldw	r2,-44(fp)
81119610:	103ff81e 	bne	r2,zero,811195f4 <__reset+0xfb0f95f4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
81119614:	e0bffd17 	ldw	r2,-12(fp)
81119618:	00c00fc4 	movi	r3,63
8111961c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81119620:	e0bffd17 	ldw	r2,-12(fp)
81119624:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81119628:	e0bffd17 	ldw	r2,-12(fp)
8111962c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
81119630:	d0e05717 	ldw	r3,-32420(gp)
81119634:	e0bffd17 	ldw	r2,-12(fp)
81119638:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
8111963c:	e0bffd17 	ldw	r2,-12(fp)
81119640:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
81119644:	e0bffd17 	ldw	r2,-12(fp)
81119648:	d0a05715 	stw	r2,-32420(gp)
8111964c:	e0bff717 	ldw	r2,-36(fp)
81119650:	e0bffa15 	stw	r2,-24(fp)
81119654:	e0bffa17 	ldw	r2,-24(fp)
81119658:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8111965c:	e0bff403 	ldbu	r2,-48(fp)
81119660:	10800058 	cmpnei	r2,r2,1
81119664:	1000011e 	bne	r2,zero,8111966c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81119668:	11187f00 	call	811187f0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
8111966c:	e0bfff17 	ldw	r2,-4(fp)
81119670:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
81119674:	e03ff615 	stw	zero,-40(fp)
             break;
81119678:	00000a06 	br	811196a4 <OSFlagDel+0x230>
8111967c:	e0bff717 	ldw	r2,-36(fp)
81119680:	e0bffb15 	stw	r2,-20(fp)
81119684:	e0bffb17 	ldw	r2,-20(fp)
81119688:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
8111968c:	e0bfff17 	ldw	r2,-4(fp)
81119690:	00c001c4 	movi	r3,7
81119694:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
81119698:	e0bffd17 	ldw	r2,-12(fp)
8111969c:	e0bff615 	stw	r2,-40(fp)
             break;
811196a0:	0001883a 	nop
    }
    return (pgrp_return);
811196a4:	e0bff617 	ldw	r2,-40(fp)
}
811196a8:	e037883a 	mov	sp,fp
811196ac:	dfc00117 	ldw	ra,4(sp)
811196b0:	df000017 	ldw	fp,0(sp)
811196b4:	dec00204 	addi	sp,sp,8
811196b8:	f800283a 	ret

811196bc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
811196bc:	defff604 	addi	sp,sp,-40
811196c0:	dfc00915 	stw	ra,36(sp)
811196c4:	df000815 	stw	fp,32(sp)
811196c8:	df000804 	addi	fp,sp,32
811196cc:	e13ffd15 	stw	r4,-12(fp)
811196d0:	e17ffe15 	stw	r5,-8(fp)
811196d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811196d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811196dc:	e0bfff17 	ldw	r2,-4(fp)
811196e0:	1000021e 	bne	r2,zero,811196ec <OSFlagNameGet+0x30>
        return (0);
811196e4:	0005883a 	mov	r2,zero
811196e8:	00003906 	br	811197d0 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
811196ec:	e0bffd17 	ldw	r2,-12(fp)
811196f0:	1000051e 	bne	r2,zero,81119708 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811196f4:	e0bfff17 	ldw	r2,-4(fp)
811196f8:	00c01b84 	movi	r3,110
811196fc:	10c00005 	stb	r3,0(r2)
        return (0);
81119700:	0005883a 	mov	r2,zero
81119704:	00003206 	br	811197d0 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81119708:	e0bffe17 	ldw	r2,-8(fp)
8111970c:	1000051e 	bne	r2,zero,81119724 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
81119710:	e0bfff17 	ldw	r2,-4(fp)
81119714:	00c00304 	movi	r3,12
81119718:	10c00005 	stb	r3,0(r2)
        return (0);
8111971c:	0005883a 	mov	r2,zero
81119720:	00002b06 	br	811197d0 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81119724:	d0a05403 	ldbu	r2,-32432(gp)
81119728:	10803fcc 	andi	r2,r2,255
8111972c:	10000526 	beq	r2,zero,81119744 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
81119730:	e0bfff17 	ldw	r2,-4(fp)
81119734:	00c00444 	movi	r3,17
81119738:	10c00005 	stb	r3,0(r2)
        return (0);
8111973c:	0005883a 	mov	r2,zero
81119740:	00002306 	br	811197d0 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81119744:	0005303a 	rdctl	r2,status
81119748:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111974c:	e0fffc17 	ldw	r3,-16(fp)
81119750:	00bfff84 	movi	r2,-2
81119754:	1884703a 	and	r2,r3,r2
81119758:	1001703a 	wrctl	status,r2
  
  return context;
8111975c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81119760:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
81119764:	e0bffd17 	ldw	r2,-12(fp)
81119768:	10800003 	ldbu	r2,0(r2)
8111976c:	10803fcc 	andi	r2,r2,255
81119770:	10800160 	cmpeqi	r2,r2,5
81119774:	1000091e 	bne	r2,zero,8111979c <OSFlagNameGet+0xe0>
81119778:	e0bff817 	ldw	r2,-32(fp)
8111977c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81119780:	e0bff917 	ldw	r2,-28(fp)
81119784:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
81119788:	e0bfff17 	ldw	r2,-4(fp)
8111978c:	00c00044 	movi	r3,1
81119790:	10c00005 	stb	r3,0(r2)
        return (0);
81119794:	0005883a 	mov	r2,zero
81119798:	00000d06 	br	811197d0 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
8111979c:	e0bffd17 	ldw	r2,-12(fp)
811197a0:	10800284 	addi	r2,r2,10
811197a4:	100b883a 	mov	r5,r2
811197a8:	e13ffe17 	ldw	r4,-8(fp)
811197ac:	11189340 	call	81118934 <OS_StrCopy>
811197b0:	e0bffb05 	stb	r2,-20(fp)
811197b4:	e0bff817 	ldw	r2,-32(fp)
811197b8:	e0bffa15 	stw	r2,-24(fp)
811197bc:	e0bffa17 	ldw	r2,-24(fp)
811197c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811197c4:	e0bfff17 	ldw	r2,-4(fp)
811197c8:	10000005 	stb	zero,0(r2)
    return (len);
811197cc:	e0bffb03 	ldbu	r2,-20(fp)
}
811197d0:	e037883a 	mov	sp,fp
811197d4:	dfc00117 	ldw	ra,4(sp)
811197d8:	df000017 	ldw	fp,0(sp)
811197dc:	dec00204 	addi	sp,sp,8
811197e0:	f800283a 	ret

811197e4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
811197e4:	defff504 	addi	sp,sp,-44
811197e8:	dfc00a15 	stw	ra,40(sp)
811197ec:	df000915 	stw	fp,36(sp)
811197f0:	df000904 	addi	fp,sp,36
811197f4:	e13ffd15 	stw	r4,-12(fp)
811197f8:	e17ffe15 	stw	r5,-8(fp)
811197fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81119800:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81119804:	e0bfff17 	ldw	r2,-4(fp)
81119808:	10004326 	beq	r2,zero,81119918 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8111980c:	e0bffd17 	ldw	r2,-12(fp)
81119810:	1000041e 	bne	r2,zero,81119824 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81119814:	e0bfff17 	ldw	r2,-4(fp)
81119818:	00c01b84 	movi	r3,110
8111981c:	10c00005 	stb	r3,0(r2)
        return;
81119820:	00003e06 	br	8111991c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81119824:	e0bffe17 	ldw	r2,-8(fp)
81119828:	1000041e 	bne	r2,zero,8111983c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
8111982c:	e0bfff17 	ldw	r2,-4(fp)
81119830:	00c00304 	movi	r3,12
81119834:	10c00005 	stb	r3,0(r2)
        return;
81119838:	00003806 	br	8111991c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8111983c:	d0a05403 	ldbu	r2,-32432(gp)
81119840:	10803fcc 	andi	r2,r2,255
81119844:	10000426 	beq	r2,zero,81119858 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
81119848:	e0bfff17 	ldw	r2,-4(fp)
8111984c:	00c00484 	movi	r3,18
81119850:	10c00005 	stb	r3,0(r2)
        return;
81119854:	00003106 	br	8111991c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81119858:	0005303a 	rdctl	r2,status
8111985c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81119860:	e0fffc17 	ldw	r3,-16(fp)
81119864:	00bfff84 	movi	r2,-2
81119868:	1884703a 	and	r2,r3,r2
8111986c:	1001703a 	wrctl	status,r2
  
  return context;
81119870:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81119874:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
81119878:	e0bffd17 	ldw	r2,-12(fp)
8111987c:	10800003 	ldbu	r2,0(r2)
81119880:	10803fcc 	andi	r2,r2,255
81119884:	10800160 	cmpeqi	r2,r2,5
81119888:	1000081e 	bne	r2,zero,811198ac <OSFlagNameSet+0xc8>
8111988c:	e0bff717 	ldw	r2,-36(fp)
81119890:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81119894:	e0bff817 	ldw	r2,-32(fp)
81119898:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8111989c:	e0bfff17 	ldw	r2,-4(fp)
811198a0:	00c00044 	movi	r3,1
811198a4:	10c00005 	stb	r3,0(r2)
        return;
811198a8:	00001c06 	br	8111991c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
811198ac:	e13ffe17 	ldw	r4,-8(fp)
811198b0:	11189a80 	call	811189a8 <OS_StrLen>
811198b4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
811198b8:	e0bffa03 	ldbu	r2,-24(fp)
811198bc:	10800830 	cmpltui	r2,r2,32
811198c0:	1000081e 	bne	r2,zero,811198e4 <OSFlagNameSet+0x100>
811198c4:	e0bff717 	ldw	r2,-36(fp)
811198c8:	e0bff915 	stw	r2,-28(fp)
811198cc:	e0bff917 	ldw	r2,-28(fp)
811198d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
811198d4:	e0bfff17 	ldw	r2,-4(fp)
811198d8:	00c01cc4 	movi	r3,115
811198dc:	10c00005 	stb	r3,0(r2)
        return;
811198e0:	00000e06 	br	8111991c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
811198e4:	e0bffd17 	ldw	r2,-12(fp)
811198e8:	10800284 	addi	r2,r2,10
811198ec:	e17ffe17 	ldw	r5,-8(fp)
811198f0:	1009883a 	mov	r4,r2
811198f4:	11189340 	call	81118934 <OS_StrCopy>
811198f8:	e0bff717 	ldw	r2,-36(fp)
811198fc:	e0bffb15 	stw	r2,-20(fp)
81119900:	e0bffb17 	ldw	r2,-20(fp)
81119904:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81119908:	e0bfff17 	ldw	r2,-4(fp)
8111990c:	10000005 	stb	zero,0(r2)
    return;
81119910:	0001883a 	nop
81119914:	00000106 	br	8111991c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81119918:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
8111991c:	e037883a 	mov	sp,fp
81119920:	dfc00117 	ldw	ra,4(sp)
81119924:	df000017 	ldw	fp,0(sp)
81119928:	dec00204 	addi	sp,sp,8
8111992c:	f800283a 	ret

81119930 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
81119930:	deffe104 	addi	sp,sp,-124
81119934:	dfc01e15 	stw	ra,120(sp)
81119938:	df001d15 	stw	fp,116(sp)
8111993c:	df001d04 	addi	fp,sp,116
81119940:	e13ffc15 	stw	r4,-16(fp)
81119944:	2809883a 	mov	r4,r5
81119948:	3007883a 	mov	r3,r6
8111994c:	3805883a 	mov	r2,r7
81119950:	e13ffd0d 	sth	r4,-12(fp)
81119954:	e0fffe05 	stb	r3,-8(fp)
81119958:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8111995c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81119960:	e0800217 	ldw	r2,8(fp)
81119964:	1000021e 	bne	r2,zero,81119970 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
81119968:	0005883a 	mov	r2,zero
8111996c:	00015906 	br	81119ed4 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
81119970:	e0bffc17 	ldw	r2,-16(fp)
81119974:	1000051e 	bne	r2,zero,8111998c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81119978:	e0800217 	ldw	r2,8(fp)
8111997c:	00c01b84 	movi	r3,110
81119980:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81119984:	0005883a 	mov	r2,zero
81119988:	00015206 	br	81119ed4 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8111998c:	d0a05403 	ldbu	r2,-32432(gp)
81119990:	10803fcc 	andi	r2,r2,255
81119994:	10000526 	beq	r2,zero,811199ac <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
81119998:	e0800217 	ldw	r2,8(fp)
8111999c:	00c00084 	movi	r3,2
811199a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811199a4:	0005883a 	mov	r2,zero
811199a8:	00014a06 	br	81119ed4 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
811199ac:	d0a04503 	ldbu	r2,-32492(gp)
811199b0:	10803fcc 	andi	r2,r2,255
811199b4:	10000526 	beq	r2,zero,811199cc <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
811199b8:	e0800217 	ldw	r2,8(fp)
811199bc:	00c00344 	movi	r3,13
811199c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811199c4:	0005883a 	mov	r2,zero
811199c8:	00014206 	br	81119ed4 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
811199cc:	e0bffc17 	ldw	r2,-16(fp)
811199d0:	10800003 	ldbu	r2,0(r2)
811199d4:	10803fcc 	andi	r2,r2,255
811199d8:	10800160 	cmpeqi	r2,r2,5
811199dc:	1000051e 	bne	r2,zero,811199f4 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
811199e0:	e0800217 	ldw	r2,8(fp)
811199e4:	00c00044 	movi	r3,1
811199e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811199ec:	0005883a 	mov	r2,zero
811199f0:	00013806 	br	81119ed4 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
811199f4:	e0fffe03 	ldbu	r3,-8(fp)
811199f8:	00bfe004 	movi	r2,-128
811199fc:	1884703a 	and	r2,r3,r2
81119a00:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
81119a04:	e0bfe603 	ldbu	r2,-104(fp)
81119a08:	10000626 	beq	r2,zero,81119a24 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
81119a0c:	e0bffe03 	ldbu	r2,-8(fp)
81119a10:	10801fcc 	andi	r2,r2,127
81119a14:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
81119a18:	00800044 	movi	r2,1
81119a1c:	e0bfe405 	stb	r2,-112(fp)
81119a20:	00000106 	br	81119a28 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
81119a24:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81119a28:	0005303a 	rdctl	r2,status
81119a2c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81119a30:	e0fff617 	ldw	r3,-40(fp)
81119a34:	00bfff84 	movi	r2,-2
81119a38:	1884703a 	and	r2,r3,r2
81119a3c:	1001703a 	wrctl	status,r2
  
  return context;
81119a40:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
81119a44:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
81119a48:	e0bffe03 	ldbu	r2,-8(fp)
81119a4c:	10c00060 	cmpeqi	r3,r2,1
81119a50:	1800921e 	bne	r3,zero,81119c9c <OSFlagPend+0x36c>
81119a54:	10c00088 	cmpgei	r3,r2,2
81119a58:	1800021e 	bne	r3,zero,81119a64 <OSFlagPend+0x134>
81119a5c:	10006126 	beq	r2,zero,81119be4 <OSFlagPend+0x2b4>
81119a60:	0000bb06 	br	81119d50 <OSFlagPend+0x420>
81119a64:	10c000a0 	cmpeqi	r3,r2,2
81119a68:	1800031e 	bne	r3,zero,81119a78 <OSFlagPend+0x148>
81119a6c:	108000e0 	cmpeqi	r2,r2,3
81119a70:	10002f1e 	bne	r2,zero,81119b30 <OSFlagPend+0x200>
81119a74:	0000b606 	br	81119d50 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
81119a78:	e0bffc17 	ldw	r2,-16(fp)
81119a7c:	10c0020b 	ldhu	r3,8(r2)
81119a80:	e0bffd0b 	ldhu	r2,-12(fp)
81119a84:	1884703a 	and	r2,r3,r2
81119a88:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81119a8c:	e0ffe80b 	ldhu	r3,-96(fp)
81119a90:	e0bffd0b 	ldhu	r2,-12(fp)
81119a94:	1880171e 	bne	r3,r2,81119af4 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81119a98:	e0bfe403 	ldbu	r2,-112(fp)
81119a9c:	10800058 	cmpnei	r2,r2,1
81119aa0:	1000091e 	bne	r2,zero,81119ac8 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
81119aa4:	e0bffc17 	ldw	r2,-16(fp)
81119aa8:	1080020b 	ldhu	r2,8(r2)
81119aac:	1007883a 	mov	r3,r2
81119ab0:	e0bfe80b 	ldhu	r2,-96(fp)
81119ab4:	0084303a 	nor	r2,zero,r2
81119ab8:	1884703a 	and	r2,r3,r2
81119abc:	1007883a 	mov	r3,r2
81119ac0:	e0bffc17 	ldw	r2,-16(fp)
81119ac4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81119ac8:	d0a05517 	ldw	r2,-32428(gp)
81119acc:	e0ffe80b 	ldhu	r3,-96(fp)
81119ad0:	10c00b0d 	sth	r3,44(r2)
81119ad4:	e0bfe517 	ldw	r2,-108(fp)
81119ad8:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81119adc:	e0bfe717 	ldw	r2,-100(fp)
81119ae0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81119ae4:	e0800217 	ldw	r2,8(fp)
81119ae8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81119aec:	e0bfe80b 	ldhu	r2,-96(fp)
81119af0:	0000f806 	br	81119ed4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81119af4:	e13ffd0b 	ldhu	r4,-12(fp)
81119af8:	e17ffe03 	ldbu	r5,-8(fp)
81119afc:	e0bfff0b 	ldhu	r2,-4(fp)
81119b00:	e0fff704 	addi	r3,fp,-36
81119b04:	d8800015 	stw	r2,0(sp)
81119b08:	280f883a 	mov	r7,r5
81119b0c:	200d883a 	mov	r6,r4
81119b10:	180b883a 	mov	r5,r3
81119b14:	e13ffc17 	ldw	r4,-16(fp)
81119b18:	111a3a00 	call	8111a3a0 <OS_FlagBlock>
81119b1c:	e0bfe517 	ldw	r2,-108(fp)
81119b20:	e0bfe915 	stw	r2,-92(fp)
81119b24:	e0bfe917 	ldw	r2,-92(fp)
81119b28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81119b2c:	00009206 	br	81119d78 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
81119b30:	e0bffc17 	ldw	r2,-16(fp)
81119b34:	10c0020b 	ldhu	r3,8(r2)
81119b38:	e0bffd0b 	ldhu	r2,-12(fp)
81119b3c:	1884703a 	and	r2,r3,r2
81119b40:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
81119b44:	e0bfe80b 	ldhu	r2,-96(fp)
81119b48:	10001726 	beq	r2,zero,81119ba8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81119b4c:	e0bfe403 	ldbu	r2,-112(fp)
81119b50:	10800058 	cmpnei	r2,r2,1
81119b54:	1000091e 	bne	r2,zero,81119b7c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
81119b58:	e0bffc17 	ldw	r2,-16(fp)
81119b5c:	1080020b 	ldhu	r2,8(r2)
81119b60:	1007883a 	mov	r3,r2
81119b64:	e0bfe80b 	ldhu	r2,-96(fp)
81119b68:	0084303a 	nor	r2,zero,r2
81119b6c:	1884703a 	and	r2,r3,r2
81119b70:	1007883a 	mov	r3,r2
81119b74:	e0bffc17 	ldw	r2,-16(fp)
81119b78:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81119b7c:	d0a05517 	ldw	r2,-32428(gp)
81119b80:	e0ffe80b 	ldhu	r3,-96(fp)
81119b84:	10c00b0d 	sth	r3,44(r2)
81119b88:	e0bfe517 	ldw	r2,-108(fp)
81119b8c:	e0bfea15 	stw	r2,-88(fp)
81119b90:	e0bfea17 	ldw	r2,-88(fp)
81119b94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81119b98:	e0800217 	ldw	r2,8(fp)
81119b9c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81119ba0:	e0bfe80b 	ldhu	r2,-96(fp)
81119ba4:	0000cb06 	br	81119ed4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81119ba8:	e13ffd0b 	ldhu	r4,-12(fp)
81119bac:	e17ffe03 	ldbu	r5,-8(fp)
81119bb0:	e0bfff0b 	ldhu	r2,-4(fp)
81119bb4:	e0fff704 	addi	r3,fp,-36
81119bb8:	d8800015 	stw	r2,0(sp)
81119bbc:	280f883a 	mov	r7,r5
81119bc0:	200d883a 	mov	r6,r4
81119bc4:	180b883a 	mov	r5,r3
81119bc8:	e13ffc17 	ldw	r4,-16(fp)
81119bcc:	111a3a00 	call	8111a3a0 <OS_FlagBlock>
81119bd0:	e0bfe517 	ldw	r2,-108(fp)
81119bd4:	e0bfeb15 	stw	r2,-84(fp)
81119bd8:	e0bfeb17 	ldw	r2,-84(fp)
81119bdc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81119be0:	00006506 	br	81119d78 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
81119be4:	e0bffc17 	ldw	r2,-16(fp)
81119be8:	1080020b 	ldhu	r2,8(r2)
81119bec:	0084303a 	nor	r2,zero,r2
81119bf0:	1007883a 	mov	r3,r2
81119bf4:	e0bffd0b 	ldhu	r2,-12(fp)
81119bf8:	1884703a 	and	r2,r3,r2
81119bfc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81119c00:	e0ffe80b 	ldhu	r3,-96(fp)
81119c04:	e0bffd0b 	ldhu	r2,-12(fp)
81119c08:	1880151e 	bne	r3,r2,81119c60 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81119c0c:	e0bfe403 	ldbu	r2,-112(fp)
81119c10:	10800058 	cmpnei	r2,r2,1
81119c14:	1000071e 	bne	r2,zero,81119c34 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
81119c18:	e0bffc17 	ldw	r2,-16(fp)
81119c1c:	10c0020b 	ldhu	r3,8(r2)
81119c20:	e0bfe80b 	ldhu	r2,-96(fp)
81119c24:	1884b03a 	or	r2,r3,r2
81119c28:	1007883a 	mov	r3,r2
81119c2c:	e0bffc17 	ldw	r2,-16(fp)
81119c30:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81119c34:	d0a05517 	ldw	r2,-32428(gp)
81119c38:	e0ffe80b 	ldhu	r3,-96(fp)
81119c3c:	10c00b0d 	sth	r3,44(r2)
81119c40:	e0bfe517 	ldw	r2,-108(fp)
81119c44:	e0bfec15 	stw	r2,-80(fp)
81119c48:	e0bfec17 	ldw	r2,-80(fp)
81119c4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81119c50:	e0800217 	ldw	r2,8(fp)
81119c54:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81119c58:	e0bfe80b 	ldhu	r2,-96(fp)
81119c5c:	00009d06 	br	81119ed4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81119c60:	e13ffd0b 	ldhu	r4,-12(fp)
81119c64:	e17ffe03 	ldbu	r5,-8(fp)
81119c68:	e0bfff0b 	ldhu	r2,-4(fp)
81119c6c:	e0fff704 	addi	r3,fp,-36
81119c70:	d8800015 	stw	r2,0(sp)
81119c74:	280f883a 	mov	r7,r5
81119c78:	200d883a 	mov	r6,r4
81119c7c:	180b883a 	mov	r5,r3
81119c80:	e13ffc17 	ldw	r4,-16(fp)
81119c84:	111a3a00 	call	8111a3a0 <OS_FlagBlock>
81119c88:	e0bfe517 	ldw	r2,-108(fp)
81119c8c:	e0bfed15 	stw	r2,-76(fp)
81119c90:	e0bfed17 	ldw	r2,-76(fp)
81119c94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81119c98:	00003706 	br	81119d78 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
81119c9c:	e0bffc17 	ldw	r2,-16(fp)
81119ca0:	1080020b 	ldhu	r2,8(r2)
81119ca4:	0084303a 	nor	r2,zero,r2
81119ca8:	1007883a 	mov	r3,r2
81119cac:	e0bffd0b 	ldhu	r2,-12(fp)
81119cb0:	1884703a 	and	r2,r3,r2
81119cb4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
81119cb8:	e0bfe80b 	ldhu	r2,-96(fp)
81119cbc:	10001526 	beq	r2,zero,81119d14 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81119cc0:	e0bfe403 	ldbu	r2,-112(fp)
81119cc4:	10800058 	cmpnei	r2,r2,1
81119cc8:	1000071e 	bne	r2,zero,81119ce8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
81119ccc:	e0bffc17 	ldw	r2,-16(fp)
81119cd0:	10c0020b 	ldhu	r3,8(r2)
81119cd4:	e0bfe80b 	ldhu	r2,-96(fp)
81119cd8:	1884b03a 	or	r2,r3,r2
81119cdc:	1007883a 	mov	r3,r2
81119ce0:	e0bffc17 	ldw	r2,-16(fp)
81119ce4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81119ce8:	d0a05517 	ldw	r2,-32428(gp)
81119cec:	e0ffe80b 	ldhu	r3,-96(fp)
81119cf0:	10c00b0d 	sth	r3,44(r2)
81119cf4:	e0bfe517 	ldw	r2,-108(fp)
81119cf8:	e0bfee15 	stw	r2,-72(fp)
81119cfc:	e0bfee17 	ldw	r2,-72(fp)
81119d00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81119d04:	e0800217 	ldw	r2,8(fp)
81119d08:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81119d0c:	e0bfe80b 	ldhu	r2,-96(fp)
81119d10:	00007006 	br	81119ed4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81119d14:	e13ffd0b 	ldhu	r4,-12(fp)
81119d18:	e17ffe03 	ldbu	r5,-8(fp)
81119d1c:	e0bfff0b 	ldhu	r2,-4(fp)
81119d20:	e0fff704 	addi	r3,fp,-36
81119d24:	d8800015 	stw	r2,0(sp)
81119d28:	280f883a 	mov	r7,r5
81119d2c:	200d883a 	mov	r6,r4
81119d30:	180b883a 	mov	r5,r3
81119d34:	e13ffc17 	ldw	r4,-16(fp)
81119d38:	111a3a00 	call	8111a3a0 <OS_FlagBlock>
81119d3c:	e0bfe517 	ldw	r2,-108(fp)
81119d40:	e0bfef15 	stw	r2,-68(fp)
81119d44:	e0bfef17 	ldw	r2,-68(fp)
81119d48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81119d4c:	00000a06 	br	81119d78 <OSFlagPend+0x448>
81119d50:	e0bfe517 	ldw	r2,-108(fp)
81119d54:	e0bff015 	stw	r2,-64(fp)
81119d58:	e0bff017 	ldw	r2,-64(fp)
81119d5c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
81119d60:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
81119d64:	e0800217 	ldw	r2,8(fp)
81119d68:	00c01bc4 	movi	r3,111
81119d6c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
81119d70:	e0bfe80b 	ldhu	r2,-96(fp)
81119d74:	00005706 	br	81119ed4 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
81119d78:	11187f00 	call	811187f0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81119d7c:	0005303a 	rdctl	r2,status
81119d80:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81119d84:	e0fff117 	ldw	r3,-60(fp)
81119d88:	00bfff84 	movi	r2,-2
81119d8c:	1884703a 	and	r2,r3,r2
81119d90:	1001703a 	wrctl	status,r2
  
  return context;
81119d94:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
81119d98:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
81119d9c:	d0a05517 	ldw	r2,-32428(gp)
81119da0:	10800c43 	ldbu	r2,49(r2)
81119da4:	10803fcc 	andi	r2,r2,255
81119da8:	10001c26 	beq	r2,zero,81119e1c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
81119dac:	d0a05517 	ldw	r2,-32428(gp)
81119db0:	10800c43 	ldbu	r2,49(r2)
81119db4:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81119db8:	d0a05517 	ldw	r2,-32428(gp)
81119dbc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
81119dc0:	e0bff704 	addi	r2,fp,-36
81119dc4:	1009883a 	mov	r4,r2
81119dc8:	111a6d40 	call	8111a6d4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
81119dcc:	d0a05517 	ldw	r2,-32428(gp)
81119dd0:	10000c05 	stb	zero,48(r2)
81119dd4:	e0bfe517 	ldw	r2,-108(fp)
81119dd8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81119ddc:	e0bff217 	ldw	r2,-56(fp)
81119de0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
81119de4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
81119de8:	e0bff303 	ldbu	r2,-52(fp)
81119dec:	108000a0 	cmpeqi	r2,r2,2
81119df0:	10000426 	beq	r2,zero,81119e04 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
81119df4:	e0800217 	ldw	r2,8(fp)
81119df8:	00c00384 	movi	r3,14
81119dfc:	10c00005 	stb	r3,0(r2)
                 break;
81119e00:	00000406 	br	81119e14 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
81119e04:	e0800217 	ldw	r2,8(fp)
81119e08:	00c00284 	movi	r3,10
81119e0c:	10c00005 	stb	r3,0(r2)
                 break;
81119e10:	0001883a 	nop
        }
        return (flags_rdy);
81119e14:	e0bfe80b 	ldhu	r2,-96(fp)
81119e18:	00002e06 	br	81119ed4 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
81119e1c:	d0a05517 	ldw	r2,-32428(gp)
81119e20:	10800b0b 	ldhu	r2,44(r2)
81119e24:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
81119e28:	e0bfe403 	ldbu	r2,-112(fp)
81119e2c:	10800058 	cmpnei	r2,r2,1
81119e30:	1000211e 	bne	r2,zero,81119eb8 <OSFlagPend+0x588>
        switch (wait_type) {
81119e34:	e0bffe03 	ldbu	r2,-8(fp)
81119e38:	10001616 	blt	r2,zero,81119e94 <OSFlagPend+0x564>
81119e3c:	10c00090 	cmplti	r3,r2,2
81119e40:	18000c1e 	bne	r3,zero,81119e74 <OSFlagPend+0x544>
81119e44:	10800108 	cmpgei	r2,r2,4
81119e48:	1000121e 	bne	r2,zero,81119e94 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
81119e4c:	e0bffc17 	ldw	r2,-16(fp)
81119e50:	1080020b 	ldhu	r2,8(r2)
81119e54:	1007883a 	mov	r3,r2
81119e58:	e0bfe80b 	ldhu	r2,-96(fp)
81119e5c:	0084303a 	nor	r2,zero,r2
81119e60:	1884703a 	and	r2,r3,r2
81119e64:	1007883a 	mov	r3,r2
81119e68:	e0bffc17 	ldw	r2,-16(fp)
81119e6c:	10c0020d 	sth	r3,8(r2)
                 break;
81119e70:	00001106 	br	81119eb8 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
81119e74:	e0bffc17 	ldw	r2,-16(fp)
81119e78:	10c0020b 	ldhu	r3,8(r2)
81119e7c:	e0bfe80b 	ldhu	r2,-96(fp)
81119e80:	1884b03a 	or	r2,r3,r2
81119e84:	1007883a 	mov	r3,r2
81119e88:	e0bffc17 	ldw	r2,-16(fp)
81119e8c:	10c0020d 	sth	r3,8(r2)
                 break;
81119e90:	00000906 	br	81119eb8 <OSFlagPend+0x588>
81119e94:	e0bfe517 	ldw	r2,-108(fp)
81119e98:	e0bff415 	stw	r2,-48(fp)
81119e9c:	e0bff417 	ldw	r2,-48(fp)
81119ea0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
81119ea4:	e0800217 	ldw	r2,8(fp)
81119ea8:	00c01bc4 	movi	r3,111
81119eac:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
81119eb0:	0005883a 	mov	r2,zero
81119eb4:	00000706 	br	81119ed4 <OSFlagPend+0x5a4>
81119eb8:	e0bfe517 	ldw	r2,-108(fp)
81119ebc:	e0bff515 	stw	r2,-44(fp)
81119ec0:	e0bff517 	ldw	r2,-44(fp)
81119ec4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
81119ec8:	e0800217 	ldw	r2,8(fp)
81119ecc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
81119ed0:	e0bfe80b 	ldhu	r2,-96(fp)
}
81119ed4:	e037883a 	mov	sp,fp
81119ed8:	dfc00117 	ldw	ra,4(sp)
81119edc:	df000017 	ldw	fp,0(sp)
81119ee0:	dec00204 	addi	sp,sp,8
81119ee4:	f800283a 	ret

81119ee8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
81119ee8:	defffb04 	addi	sp,sp,-20
81119eec:	df000415 	stw	fp,16(sp)
81119ef0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81119ef4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81119ef8:	0005303a 	rdctl	r2,status
81119efc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81119f00:	e0fffe17 	ldw	r3,-8(fp)
81119f04:	00bfff84 	movi	r2,-2
81119f08:	1884703a 	and	r2,r3,r2
81119f0c:	1001703a 	wrctl	status,r2
  
  return context;
81119f10:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
81119f14:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
81119f18:	d0a05517 	ldw	r2,-32428(gp)
81119f1c:	10800b0b 	ldhu	r2,44(r2)
81119f20:	e0bffd0d 	sth	r2,-12(fp)
81119f24:	e0bffc17 	ldw	r2,-16(fp)
81119f28:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81119f2c:	e0bfff17 	ldw	r2,-4(fp)
81119f30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
81119f34:	e0bffd0b 	ldhu	r2,-12(fp)
}
81119f38:	e037883a 	mov	sp,fp
81119f3c:	df000017 	ldw	fp,0(sp)
81119f40:	dec00104 	addi	sp,sp,4
81119f44:	f800283a 	ret

81119f48 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
81119f48:	deffef04 	addi	sp,sp,-68
81119f4c:	dfc01015 	stw	ra,64(sp)
81119f50:	df000f15 	stw	fp,60(sp)
81119f54:	df000f04 	addi	fp,sp,60
81119f58:	e13ffc15 	stw	r4,-16(fp)
81119f5c:	2807883a 	mov	r3,r5
81119f60:	3005883a 	mov	r2,r6
81119f64:	e1ffff15 	stw	r7,-4(fp)
81119f68:	e0fffd0d 	sth	r3,-12(fp)
81119f6c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
81119f70:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
81119f74:	e0bfff17 	ldw	r2,-4(fp)
81119f78:	1000021e 	bne	r2,zero,81119f84 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
81119f7c:	0005883a 	mov	r2,zero
81119f80:	0000d106 	br	8111a2c8 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
81119f84:	e0bffc17 	ldw	r2,-16(fp)
81119f88:	1000051e 	bne	r2,zero,81119fa0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81119f8c:	e0bfff17 	ldw	r2,-4(fp)
81119f90:	00c01b84 	movi	r3,110
81119f94:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81119f98:	0005883a 	mov	r2,zero
81119f9c:	0000ca06 	br	8111a2c8 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
81119fa0:	e0bffc17 	ldw	r2,-16(fp)
81119fa4:	10800003 	ldbu	r2,0(r2)
81119fa8:	10803fcc 	andi	r2,r2,255
81119fac:	10800160 	cmpeqi	r2,r2,5
81119fb0:	1000051e 	bne	r2,zero,81119fc8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81119fb4:	e0bfff17 	ldw	r2,-4(fp)
81119fb8:	00c00044 	movi	r3,1
81119fbc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81119fc0:	0005883a 	mov	r2,zero
81119fc4:	0000c006 	br	8111a2c8 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81119fc8:	0005303a 	rdctl	r2,status
81119fcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81119fd0:	e0fffb17 	ldw	r3,-20(fp)
81119fd4:	00bfff84 	movi	r2,-2
81119fd8:	1884703a 	and	r2,r3,r2
81119fdc:	1001703a 	wrctl	status,r2
  
  return context;
81119fe0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
81119fe4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
81119fe8:	e0bffe03 	ldbu	r2,-8(fp)
81119fec:	10000326 	beq	r2,zero,81119ffc <OSFlagPost+0xb4>
81119ff0:	10800060 	cmpeqi	r2,r2,1
81119ff4:	10000b1e 	bne	r2,zero,8111a024 <OSFlagPost+0xdc>
81119ff8:	00001206 	br	8111a044 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
81119ffc:	e0bffc17 	ldw	r2,-16(fp)
8111a000:	1080020b 	ldhu	r2,8(r2)
8111a004:	1007883a 	mov	r3,r2
8111a008:	e0bffd0b 	ldhu	r2,-12(fp)
8111a00c:	0084303a 	nor	r2,zero,r2
8111a010:	1884703a 	and	r2,r3,r2
8111a014:	1007883a 	mov	r3,r2
8111a018:	e0bffc17 	ldw	r2,-16(fp)
8111a01c:	10c0020d 	sth	r3,8(r2)
             break;
8111a020:	00001106 	br	8111a068 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
8111a024:	e0bffc17 	ldw	r2,-16(fp)
8111a028:	10c0020b 	ldhu	r3,8(r2)
8111a02c:	e0bffd0b 	ldhu	r2,-12(fp)
8111a030:	1884b03a 	or	r2,r3,r2
8111a034:	1007883a 	mov	r3,r2
8111a038:	e0bffc17 	ldw	r2,-16(fp)
8111a03c:	10c0020d 	sth	r3,8(r2)
             break;
8111a040:	00000906 	br	8111a068 <OSFlagPost+0x120>
8111a044:	e0bff317 	ldw	r2,-52(fp)
8111a048:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a04c:	e0bff417 	ldw	r2,-48(fp)
8111a050:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
8111a054:	e0bfff17 	ldw	r2,-4(fp)
8111a058:	00c01c44 	movi	r3,113
8111a05c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
8111a060:	0005883a 	mov	r2,zero
8111a064:	00009806 	br	8111a2c8 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
8111a068:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8111a06c:	e0bffc17 	ldw	r2,-16(fp)
8111a070:	10800117 	ldw	r2,4(r2)
8111a074:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8111a078:	00007706 	br	8111a258 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
8111a07c:	e0bff117 	ldw	r2,-60(fp)
8111a080:	10800483 	ldbu	r2,18(r2)
8111a084:	10803fcc 	andi	r2,r2,255
8111a088:	10c00060 	cmpeqi	r3,r2,1
8111a08c:	18004a1e 	bne	r3,zero,8111a1b8 <OSFlagPost+0x270>
8111a090:	10c00088 	cmpgei	r3,r2,2
8111a094:	1800021e 	bne	r3,zero,8111a0a0 <OSFlagPost+0x158>
8111a098:	10002f26 	beq	r2,zero,8111a158 <OSFlagPost+0x210>
8111a09c:	00005b06 	br	8111a20c <OSFlagPost+0x2c4>
8111a0a0:	10c000a0 	cmpeqi	r3,r2,2
8111a0a4:	1800031e 	bne	r3,zero,8111a0b4 <OSFlagPost+0x16c>
8111a0a8:	108000e0 	cmpeqi	r2,r2,3
8111a0ac:	1000171e 	bne	r2,zero,8111a10c <OSFlagPost+0x1c4>
8111a0b0:	00005606 	br	8111a20c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8111a0b4:	e0bffc17 	ldw	r2,-16(fp)
8111a0b8:	10c0020b 	ldhu	r3,8(r2)
8111a0bc:	e0bff117 	ldw	r2,-60(fp)
8111a0c0:	1080040b 	ldhu	r2,16(r2)
8111a0c4:	1884703a 	and	r2,r3,r2
8111a0c8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8111a0cc:	e0bff117 	ldw	r2,-60(fp)
8111a0d0:	1080040b 	ldhu	r2,16(r2)
8111a0d4:	10ffffcc 	andi	r3,r2,65535
8111a0d8:	e0bff60b 	ldhu	r2,-40(fp)
8111a0dc:	1880541e 	bne	r3,r2,8111a230 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8111a0e0:	e0bff60b 	ldhu	r2,-40(fp)
8111a0e4:	100b883a 	mov	r5,r2
8111a0e8:	e13ff117 	ldw	r4,-60(fp)
8111a0ec:	111a5e00 	call	8111a5e0 <OS_FlagTaskRdy>
8111a0f0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8111a0f4:	e0bff683 	ldbu	r2,-38(fp)
8111a0f8:	10800058 	cmpnei	r2,r2,1
8111a0fc:	10004c1e 	bne	r2,zero,8111a230 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8111a100:	00800044 	movi	r2,1
8111a104:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8111a108:	00004906 	br	8111a230 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8111a10c:	e0bffc17 	ldw	r2,-16(fp)
8111a110:	10c0020b 	ldhu	r3,8(r2)
8111a114:	e0bff117 	ldw	r2,-60(fp)
8111a118:	1080040b 	ldhu	r2,16(r2)
8111a11c:	1884703a 	and	r2,r3,r2
8111a120:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8111a124:	e0bff60b 	ldhu	r2,-40(fp)
8111a128:	10004326 	beq	r2,zero,8111a238 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8111a12c:	e0bff60b 	ldhu	r2,-40(fp)
8111a130:	100b883a 	mov	r5,r2
8111a134:	e13ff117 	ldw	r4,-60(fp)
8111a138:	111a5e00 	call	8111a5e0 <OS_FlagTaskRdy>
8111a13c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8111a140:	e0bff683 	ldbu	r2,-38(fp)
8111a144:	10800058 	cmpnei	r2,r2,1
8111a148:	10003b1e 	bne	r2,zero,8111a238 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8111a14c:	00800044 	movi	r2,1
8111a150:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8111a154:	00003806 	br	8111a238 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8111a158:	e0bffc17 	ldw	r2,-16(fp)
8111a15c:	1080020b 	ldhu	r2,8(r2)
8111a160:	0084303a 	nor	r2,zero,r2
8111a164:	1007883a 	mov	r3,r2
8111a168:	e0bff117 	ldw	r2,-60(fp)
8111a16c:	1080040b 	ldhu	r2,16(r2)
8111a170:	1884703a 	and	r2,r3,r2
8111a174:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8111a178:	e0bff117 	ldw	r2,-60(fp)
8111a17c:	1080040b 	ldhu	r2,16(r2)
8111a180:	10ffffcc 	andi	r3,r2,65535
8111a184:	e0bff60b 	ldhu	r2,-40(fp)
8111a188:	18802d1e 	bne	r3,r2,8111a240 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8111a18c:	e0bff60b 	ldhu	r2,-40(fp)
8111a190:	100b883a 	mov	r5,r2
8111a194:	e13ff117 	ldw	r4,-60(fp)
8111a198:	111a5e00 	call	8111a5e0 <OS_FlagTaskRdy>
8111a19c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8111a1a0:	e0bff683 	ldbu	r2,-38(fp)
8111a1a4:	10800058 	cmpnei	r2,r2,1
8111a1a8:	1000251e 	bne	r2,zero,8111a240 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8111a1ac:	00800044 	movi	r2,1
8111a1b0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8111a1b4:	00002206 	br	8111a240 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8111a1b8:	e0bffc17 	ldw	r2,-16(fp)
8111a1bc:	1080020b 	ldhu	r2,8(r2)
8111a1c0:	0084303a 	nor	r2,zero,r2
8111a1c4:	1007883a 	mov	r3,r2
8111a1c8:	e0bff117 	ldw	r2,-60(fp)
8111a1cc:	1080040b 	ldhu	r2,16(r2)
8111a1d0:	1884703a 	and	r2,r3,r2
8111a1d4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8111a1d8:	e0bff60b 	ldhu	r2,-40(fp)
8111a1dc:	10001a26 	beq	r2,zero,8111a248 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8111a1e0:	e0bff60b 	ldhu	r2,-40(fp)
8111a1e4:	100b883a 	mov	r5,r2
8111a1e8:	e13ff117 	ldw	r4,-60(fp)
8111a1ec:	111a5e00 	call	8111a5e0 <OS_FlagTaskRdy>
8111a1f0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8111a1f4:	e0bff683 	ldbu	r2,-38(fp)
8111a1f8:	10800058 	cmpnei	r2,r2,1
8111a1fc:	1000121e 	bne	r2,zero,8111a248 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8111a200:	00800044 	movi	r2,1
8111a204:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8111a208:	00000f06 	br	8111a248 <OSFlagPost+0x300>
8111a20c:	e0bff317 	ldw	r2,-52(fp)
8111a210:	e0bff515 	stw	r2,-44(fp)
8111a214:	e0bff517 	ldw	r2,-44(fp)
8111a218:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8111a21c:	e0bfff17 	ldw	r2,-4(fp)
8111a220:	00c01bc4 	movi	r3,111
8111a224:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8111a228:	0005883a 	mov	r2,zero
8111a22c:	00002606 	br	8111a2c8 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8111a230:	0001883a 	nop
8111a234:	00000506 	br	8111a24c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8111a238:	0001883a 	nop
8111a23c:	00000306 	br	8111a24c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8111a240:	0001883a 	nop
8111a244:	00000106 	br	8111a24c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8111a248:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
8111a24c:	e0bff117 	ldw	r2,-60(fp)
8111a250:	10800017 	ldw	r2,0(r2)
8111a254:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8111a258:	e0bff117 	ldw	r2,-60(fp)
8111a25c:	103f871e 	bne	r2,zero,8111a07c <__reset+0xfb0fa07c>
8111a260:	e0bff317 	ldw	r2,-52(fp)
8111a264:	e0bff715 	stw	r2,-36(fp)
8111a268:	e0bff717 	ldw	r2,-36(fp)
8111a26c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
8111a270:	e0bff203 	ldbu	r2,-56(fp)
8111a274:	10800058 	cmpnei	r2,r2,1
8111a278:	1000011e 	bne	r2,zero,8111a280 <OSFlagPost+0x338>
        OS_Sched();
8111a27c:	11187f00 	call	811187f0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111a280:	0005303a 	rdctl	r2,status
8111a284:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111a288:	e0fffa17 	ldw	r3,-24(fp)
8111a28c:	00bfff84 	movi	r2,-2
8111a290:	1884703a 	and	r2,r3,r2
8111a294:	1001703a 	wrctl	status,r2
  
  return context;
8111a298:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
8111a29c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
8111a2a0:	e0bffc17 	ldw	r2,-16(fp)
8111a2a4:	1080020b 	ldhu	r2,8(r2)
8111a2a8:	e0bff90d 	sth	r2,-28(fp)
8111a2ac:	e0bff317 	ldw	r2,-52(fp)
8111a2b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a2b4:	e0bff817 	ldw	r2,-32(fp)
8111a2b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
8111a2bc:	e0bfff17 	ldw	r2,-4(fp)
8111a2c0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
8111a2c4:	e0bff90b 	ldhu	r2,-28(fp)
}
8111a2c8:	e037883a 	mov	sp,fp
8111a2cc:	dfc00117 	ldw	ra,4(sp)
8111a2d0:	df000017 	ldw	fp,0(sp)
8111a2d4:	dec00204 	addi	sp,sp,8
8111a2d8:	f800283a 	ret

8111a2dc <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
8111a2dc:	defff904 	addi	sp,sp,-28
8111a2e0:	df000615 	stw	fp,24(sp)
8111a2e4:	df000604 	addi	fp,sp,24
8111a2e8:	e13ffe15 	stw	r4,-8(fp)
8111a2ec:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
8111a2f0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
8111a2f4:	e0bfff17 	ldw	r2,-4(fp)
8111a2f8:	1000021e 	bne	r2,zero,8111a304 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
8111a2fc:	0005883a 	mov	r2,zero
8111a300:	00002306 	br	8111a390 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
8111a304:	e0bffe17 	ldw	r2,-8(fp)
8111a308:	1000051e 	bne	r2,zero,8111a320 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8111a30c:	e0bfff17 	ldw	r2,-4(fp)
8111a310:	00c01b84 	movi	r3,110
8111a314:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8111a318:	0005883a 	mov	r2,zero
8111a31c:	00001c06 	br	8111a390 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
8111a320:	e0bffe17 	ldw	r2,-8(fp)
8111a324:	10800003 	ldbu	r2,0(r2)
8111a328:	10803fcc 	andi	r2,r2,255
8111a32c:	10800160 	cmpeqi	r2,r2,5
8111a330:	1000051e 	bne	r2,zero,8111a348 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
8111a334:	e0bfff17 	ldw	r2,-4(fp)
8111a338:	00c00044 	movi	r3,1
8111a33c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8111a340:	0005883a 	mov	r2,zero
8111a344:	00001206 	br	8111a390 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111a348:	0005303a 	rdctl	r2,status
8111a34c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111a350:	e0fffc17 	ldw	r3,-16(fp)
8111a354:	00bfff84 	movi	r2,-2
8111a358:	1884703a 	and	r2,r3,r2
8111a35c:	1001703a 	wrctl	status,r2
  
  return context;
8111a360:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111a364:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
8111a368:	e0bffe17 	ldw	r2,-8(fp)
8111a36c:	1080020b 	ldhu	r2,8(r2)
8111a370:	e0bffb0d 	sth	r2,-20(fp)
8111a374:	e0bffa17 	ldw	r2,-24(fp)
8111a378:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a37c:	e0bffd17 	ldw	r2,-12(fp)
8111a380:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8111a384:	e0bfff17 	ldw	r2,-4(fp)
8111a388:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
8111a38c:	e0bffb0b 	ldhu	r2,-20(fp)
}
8111a390:	e037883a 	mov	sp,fp
8111a394:	df000017 	ldw	fp,0(sp)
8111a398:	dec00104 	addi	sp,sp,4
8111a39c:	f800283a 	ret

8111a3a0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
8111a3a0:	defff804 	addi	sp,sp,-32
8111a3a4:	df000715 	stw	fp,28(sp)
8111a3a8:	df000704 	addi	fp,sp,28
8111a3ac:	e13ffb15 	stw	r4,-20(fp)
8111a3b0:	e17ffc15 	stw	r5,-16(fp)
8111a3b4:	3009883a 	mov	r4,r6
8111a3b8:	3807883a 	mov	r3,r7
8111a3bc:	e0800117 	ldw	r2,4(fp)
8111a3c0:	e13ffd0d 	sth	r4,-12(fp)
8111a3c4:	e0fffe05 	stb	r3,-8(fp)
8111a3c8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
8111a3cc:	d0a05517 	ldw	r2,-32428(gp)
8111a3d0:	d0e05517 	ldw	r3,-32428(gp)
8111a3d4:	18c00c03 	ldbu	r3,48(r3)
8111a3d8:	18c00814 	ori	r3,r3,32
8111a3dc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
8111a3e0:	d0a05517 	ldw	r2,-32428(gp)
8111a3e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
8111a3e8:	d0a05517 	ldw	r2,-32428(gp)
8111a3ec:	e0ffff0b 	ldhu	r3,-4(fp)
8111a3f0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
8111a3f4:	d0a05517 	ldw	r2,-32428(gp)
8111a3f8:	e0fffc17 	ldw	r3,-16(fp)
8111a3fc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
8111a400:	e0bffc17 	ldw	r2,-16(fp)
8111a404:	e0fffd0b 	ldhu	r3,-12(fp)
8111a408:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
8111a40c:	e0bffc17 	ldw	r2,-16(fp)
8111a410:	e0fffe03 	ldbu	r3,-8(fp)
8111a414:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
8111a418:	d0e05517 	ldw	r3,-32428(gp)
8111a41c:	e0bffc17 	ldw	r2,-16(fp)
8111a420:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
8111a424:	e0bffb17 	ldw	r2,-20(fp)
8111a428:	10c00117 	ldw	r3,4(r2)
8111a42c:	e0bffc17 	ldw	r2,-16(fp)
8111a430:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
8111a434:	e0bffc17 	ldw	r2,-16(fp)
8111a438:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
8111a43c:	e0bffc17 	ldw	r2,-16(fp)
8111a440:	e0fffb17 	ldw	r3,-20(fp)
8111a444:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8111a448:	e0bffb17 	ldw	r2,-20(fp)
8111a44c:	10800117 	ldw	r2,4(r2)
8111a450:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
8111a454:	e0bff917 	ldw	r2,-28(fp)
8111a458:	10000326 	beq	r2,zero,8111a468 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
8111a45c:	e0bff917 	ldw	r2,-28(fp)
8111a460:	e0fffc17 	ldw	r3,-16(fp)
8111a464:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
8111a468:	e0bffb17 	ldw	r2,-20(fp)
8111a46c:	e0fffc17 	ldw	r3,-16(fp)
8111a470:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
8111a474:	d0a05517 	ldw	r2,-32428(gp)
8111a478:	10800d03 	ldbu	r2,52(r2)
8111a47c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8111a480:	e0fffa03 	ldbu	r3,-24(fp)
8111a484:	e13ffa03 	ldbu	r4,-24(fp)
8111a488:	d0a05144 	addi	r2,gp,-32443
8111a48c:	2085883a 	add	r2,r4,r2
8111a490:	10800003 	ldbu	r2,0(r2)
8111a494:	1009883a 	mov	r4,r2
8111a498:	d0a05517 	ldw	r2,-32428(gp)
8111a49c:	10800d43 	ldbu	r2,53(r2)
8111a4a0:	0084303a 	nor	r2,zero,r2
8111a4a4:	2084703a 	and	r2,r4,r2
8111a4a8:	1009883a 	mov	r4,r2
8111a4ac:	d0a05144 	addi	r2,gp,-32443
8111a4b0:	1885883a 	add	r2,r3,r2
8111a4b4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
8111a4b8:	e0fffa03 	ldbu	r3,-24(fp)
8111a4bc:	d0a05144 	addi	r2,gp,-32443
8111a4c0:	1885883a 	add	r2,r3,r2
8111a4c4:	10800003 	ldbu	r2,0(r2)
8111a4c8:	10803fcc 	andi	r2,r2,255
8111a4cc:	1000071e 	bne	r2,zero,8111a4ec <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8111a4d0:	d0a05517 	ldw	r2,-32428(gp)
8111a4d4:	10800d83 	ldbu	r2,54(r2)
8111a4d8:	0084303a 	nor	r2,zero,r2
8111a4dc:	1007883a 	mov	r3,r2
8111a4e0:	d0a05103 	ldbu	r2,-32444(gp)
8111a4e4:	1884703a 	and	r2,r3,r2
8111a4e8:	d0a05105 	stb	r2,-32444(gp)
    }
}
8111a4ec:	0001883a 	nop
8111a4f0:	e037883a 	mov	sp,fp
8111a4f4:	df000017 	ldw	fp,0(sp)
8111a4f8:	dec00104 	addi	sp,sp,4
8111a4fc:	f800283a 	ret

8111a500 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
8111a500:	defffb04 	addi	sp,sp,-20
8111a504:	dfc00415 	stw	ra,16(sp)
8111a508:	df000315 	stw	fp,12(sp)
8111a50c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
8111a510:	0140dc04 	movi	r5,880
8111a514:	012044f4 	movhi	r4,33043
8111a518:	212c0304 	addi	r4,r4,-20468
8111a51c:	11187340 	call	81118734 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
8111a520:	00a044f4 	movhi	r2,33043
8111a524:	10ac0304 	addi	r2,r2,-20468
8111a528:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
8111a52c:	00a044f4 	movhi	r2,33043
8111a530:	10ac0e04 	addi	r2,r2,-20424
8111a534:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8111a538:	e03ffd0d 	sth	zero,-12(fp)
8111a53c:	00001306 	br	8111a58c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8111a540:	e0bffe17 	ldw	r2,-8(fp)
8111a544:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
8111a548:	e0bffe17 	ldw	r2,-8(fp)
8111a54c:	e0ffff17 	ldw	r3,-4(fp)
8111a550:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
8111a554:	e0bffe17 	ldw	r2,-8(fp)
8111a558:	00c00fc4 	movi	r3,63
8111a55c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8111a560:	e0bffe17 	ldw	r2,-8(fp)
8111a564:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
8111a568:	e0bffe17 	ldw	r2,-8(fp)
8111a56c:	10800b04 	addi	r2,r2,44
8111a570:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
8111a574:	e0bfff17 	ldw	r2,-4(fp)
8111a578:	10800b04 	addi	r2,r2,44
8111a57c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8111a580:	e0bffd0b 	ldhu	r2,-12(fp)
8111a584:	10800044 	addi	r2,r2,1
8111a588:	e0bffd0d 	sth	r2,-12(fp)
8111a58c:	e0bffd0b 	ldhu	r2,-12(fp)
8111a590:	108004f0 	cmpltui	r2,r2,19
8111a594:	103fea1e 	bne	r2,zero,8111a540 <__reset+0xfb0fa540>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8111a598:	e0bffe17 	ldw	r2,-8(fp)
8111a59c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
8111a5a0:	e0bffe17 	ldw	r2,-8(fp)
8111a5a4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
8111a5a8:	e0bffe17 	ldw	r2,-8(fp)
8111a5ac:	00c00fc4 	movi	r3,63
8111a5b0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8111a5b4:	e0bffe17 	ldw	r2,-8(fp)
8111a5b8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
8111a5bc:	00a044f4 	movhi	r2,33043
8111a5c0:	10ac0304 	addi	r2,r2,-20468
8111a5c4:	d0a05715 	stw	r2,-32420(gp)
#endif
}
8111a5c8:	0001883a 	nop
8111a5cc:	e037883a 	mov	sp,fp
8111a5d0:	dfc00117 	ldw	ra,4(sp)
8111a5d4:	df000017 	ldw	fp,0(sp)
8111a5d8:	dec00204 	addi	sp,sp,8
8111a5dc:	f800283a 	ret

8111a5e0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
8111a5e0:	defffa04 	addi	sp,sp,-24
8111a5e4:	dfc00515 	stw	ra,20(sp)
8111a5e8:	df000415 	stw	fp,16(sp)
8111a5ec:	df000404 	addi	fp,sp,16
8111a5f0:	e13ffe15 	stw	r4,-8(fp)
8111a5f4:	2805883a 	mov	r2,r5
8111a5f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
8111a5fc:	e0bffe17 	ldw	r2,-8(fp)
8111a600:	10800217 	ldw	r2,8(r2)
8111a604:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
8111a608:	e0bffd17 	ldw	r2,-12(fp)
8111a60c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
8111a610:	e0bffd17 	ldw	r2,-12(fp)
8111a614:	e0ffff0b 	ldhu	r3,-4(fp)
8111a618:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
8111a61c:	e0bffd17 	ldw	r2,-12(fp)
8111a620:	10c00c03 	ldbu	r3,48(r2)
8111a624:	00bff7c4 	movi	r2,-33
8111a628:	1884703a 	and	r2,r3,r2
8111a62c:	1007883a 	mov	r3,r2
8111a630:	e0bffd17 	ldw	r2,-12(fp)
8111a634:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
8111a638:	e0bffd17 	ldw	r2,-12(fp)
8111a63c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
8111a640:	e0bffd17 	ldw	r2,-12(fp)
8111a644:	10800c03 	ldbu	r2,48(r2)
8111a648:	10803fcc 	andi	r2,r2,255
8111a64c:	1000181e 	bne	r2,zero,8111a6b0 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
8111a650:	e0bffd17 	ldw	r2,-12(fp)
8111a654:	10c00d83 	ldbu	r3,54(r2)
8111a658:	d0a05103 	ldbu	r2,-32444(gp)
8111a65c:	1884b03a 	or	r2,r3,r2
8111a660:	d0a05105 	stb	r2,-32444(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8111a664:	e0bffd17 	ldw	r2,-12(fp)
8111a668:	10800d03 	ldbu	r2,52(r2)
8111a66c:	10c03fcc 	andi	r3,r2,255
8111a670:	e0bffd17 	ldw	r2,-12(fp)
8111a674:	10800d03 	ldbu	r2,52(r2)
8111a678:	11003fcc 	andi	r4,r2,255
8111a67c:	d0a05144 	addi	r2,gp,-32443
8111a680:	2085883a 	add	r2,r4,r2
8111a684:	11000003 	ldbu	r4,0(r2)
8111a688:	e0bffd17 	ldw	r2,-12(fp)
8111a68c:	10800d43 	ldbu	r2,53(r2)
8111a690:	2084b03a 	or	r2,r4,r2
8111a694:	1009883a 	mov	r4,r2
8111a698:	d0a05144 	addi	r2,gp,-32443
8111a69c:	1885883a 	add	r2,r3,r2
8111a6a0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
8111a6a4:	00800044 	movi	r2,1
8111a6a8:	e0bffc05 	stb	r2,-16(fp)
8111a6ac:	00000106 	br	8111a6b4 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
8111a6b0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
8111a6b4:	e13ffe17 	ldw	r4,-8(fp)
8111a6b8:	111a6d40 	call	8111a6d4 <OS_FlagUnlink>
    return (sched);
8111a6bc:	e0bffc03 	ldbu	r2,-16(fp)
}
8111a6c0:	e037883a 	mov	sp,fp
8111a6c4:	dfc00117 	ldw	ra,4(sp)
8111a6c8:	df000017 	ldw	fp,0(sp)
8111a6cc:	dec00204 	addi	sp,sp,8
8111a6d0:	f800283a 	ret

8111a6d4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
8111a6d4:	defffa04 	addi	sp,sp,-24
8111a6d8:	df000515 	stw	fp,20(sp)
8111a6dc:	df000504 	addi	fp,sp,20
8111a6e0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
8111a6e4:	e0bfff17 	ldw	r2,-4(fp)
8111a6e8:	10800117 	ldw	r2,4(r2)
8111a6ec:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8111a6f0:	e0bfff17 	ldw	r2,-4(fp)
8111a6f4:	10800017 	ldw	r2,0(r2)
8111a6f8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
8111a6fc:	e0bffb17 	ldw	r2,-20(fp)
8111a700:	10000b1e 	bne	r2,zero,8111a730 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
8111a704:	e0bfff17 	ldw	r2,-4(fp)
8111a708:	10800317 	ldw	r2,12(r2)
8111a70c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
8111a710:	e0bffd17 	ldw	r2,-12(fp)
8111a714:	e0fffc17 	ldw	r3,-16(fp)
8111a718:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
8111a71c:	e0bffc17 	ldw	r2,-16(fp)
8111a720:	10000b26 	beq	r2,zero,8111a750 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
8111a724:	e0bffc17 	ldw	r2,-16(fp)
8111a728:	10000115 	stw	zero,4(r2)
8111a72c:	00000806 	br	8111a750 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
8111a730:	e0bffb17 	ldw	r2,-20(fp)
8111a734:	e0fffc17 	ldw	r3,-16(fp)
8111a738:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
8111a73c:	e0bffc17 	ldw	r2,-16(fp)
8111a740:	10000326 	beq	r2,zero,8111a750 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
8111a744:	e0bffc17 	ldw	r2,-16(fp)
8111a748:	e0fffb17 	ldw	r3,-20(fp)
8111a74c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
8111a750:	e0bfff17 	ldw	r2,-4(fp)
8111a754:	10800217 	ldw	r2,8(r2)
8111a758:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
8111a75c:	e0bffe17 	ldw	r2,-8(fp)
8111a760:	10000a15 	stw	zero,40(r2)
#endif
}
8111a764:	0001883a 	nop
8111a768:	e037883a 	mov	sp,fp
8111a76c:	df000017 	ldw	fp,0(sp)
8111a770:	dec00104 	addi	sp,sp,4
8111a774:	f800283a 	ret

8111a778 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
8111a778:	defff404 	addi	sp,sp,-48
8111a77c:	df000b15 	stw	fp,44(sp)
8111a780:	df000b04 	addi	fp,sp,44
8111a784:	e13ffc15 	stw	r4,-16(fp)
8111a788:	e17ffd15 	stw	r5,-12(fp)
8111a78c:	e1bffe15 	stw	r6,-8(fp)
8111a790:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8111a794:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8111a798:	e0bfff17 	ldw	r2,-4(fp)
8111a79c:	1000021e 	bne	r2,zero,8111a7a8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
8111a7a0:	0005883a 	mov	r2,zero
8111a7a4:	00006506 	br	8111a93c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
8111a7a8:	e0bffc17 	ldw	r2,-16(fp)
8111a7ac:	1000051e 	bne	r2,zero,8111a7c4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8111a7b0:	e0bfff17 	ldw	r2,-4(fp)
8111a7b4:	00c01884 	movi	r3,98
8111a7b8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8111a7bc:	0005883a 	mov	r2,zero
8111a7c0:	00005e06 	br	8111a93c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
8111a7c4:	e0bffc17 	ldw	r2,-16(fp)
8111a7c8:	108000cc 	andi	r2,r2,3
8111a7cc:	10000526 	beq	r2,zero,8111a7e4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8111a7d0:	e0bfff17 	ldw	r2,-4(fp)
8111a7d4:	00c01884 	movi	r3,98
8111a7d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8111a7dc:	0005883a 	mov	r2,zero
8111a7e0:	00005606 	br	8111a93c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
8111a7e4:	e0bffd17 	ldw	r2,-12(fp)
8111a7e8:	108000a8 	cmpgeui	r2,r2,2
8111a7ec:	1000051e 	bne	r2,zero,8111a804 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
8111a7f0:	e0bfff17 	ldw	r2,-4(fp)
8111a7f4:	00c016c4 	movi	r3,91
8111a7f8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8111a7fc:	0005883a 	mov	r2,zero
8111a800:	00004e06 	br	8111a93c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
8111a804:	e0bffe17 	ldw	r2,-8(fp)
8111a808:	10800128 	cmpgeui	r2,r2,4
8111a80c:	1000051e 	bne	r2,zero,8111a824 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
8111a810:	e0bfff17 	ldw	r2,-4(fp)
8111a814:	00c01704 	movi	r3,92
8111a818:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8111a81c:	0005883a 	mov	r2,zero
8111a820:	00004606 	br	8111a93c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111a824:	0005303a 	rdctl	r2,status
8111a828:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111a82c:	e0fffb17 	ldw	r3,-20(fp)
8111a830:	00bfff84 	movi	r2,-2
8111a834:	1884703a 	and	r2,r3,r2
8111a838:	1001703a 	wrctl	status,r2
  
  return context;
8111a83c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8111a840:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
8111a844:	d0a04e17 	ldw	r2,-32456(gp)
8111a848:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
8111a84c:	d0a04e17 	ldw	r2,-32456(gp)
8111a850:	10000326 	beq	r2,zero,8111a860 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
8111a854:	d0a04e17 	ldw	r2,-32456(gp)
8111a858:	10800117 	ldw	r2,4(r2)
8111a85c:	d0a04e15 	stw	r2,-32456(gp)
8111a860:	e0bff817 	ldw	r2,-32(fp)
8111a864:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a868:	e0bff917 	ldw	r2,-28(fp)
8111a86c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
8111a870:	e0bffa17 	ldw	r2,-24(fp)
8111a874:	1000051e 	bne	r2,zero,8111a88c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
8111a878:	e0bfff17 	ldw	r2,-4(fp)
8111a87c:	00c01684 	movi	r3,90
8111a880:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8111a884:	0005883a 	mov	r2,zero
8111a888:	00002c06 	br	8111a93c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
8111a88c:	e0bffc17 	ldw	r2,-16(fp)
8111a890:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
8111a894:	e0fffc17 	ldw	r3,-16(fp)
8111a898:	e0bffe17 	ldw	r2,-8(fp)
8111a89c:	1885883a 	add	r2,r3,r2
8111a8a0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
8111a8a4:	e03ff715 	stw	zero,-36(fp)
8111a8a8:	00000c06 	br	8111a8dc <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
8111a8ac:	e0bff617 	ldw	r2,-40(fp)
8111a8b0:	e0fff517 	ldw	r3,-44(fp)
8111a8b4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
8111a8b8:	e0bff517 	ldw	r2,-44(fp)
8111a8bc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
8111a8c0:	e0fff517 	ldw	r3,-44(fp)
8111a8c4:	e0bffe17 	ldw	r2,-8(fp)
8111a8c8:	1885883a 	add	r2,r3,r2
8111a8cc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
8111a8d0:	e0bff717 	ldw	r2,-36(fp)
8111a8d4:	10800044 	addi	r2,r2,1
8111a8d8:	e0bff715 	stw	r2,-36(fp)
8111a8dc:	e0bffd17 	ldw	r2,-12(fp)
8111a8e0:	10bfffc4 	addi	r2,r2,-1
8111a8e4:	e0fff717 	ldw	r3,-36(fp)
8111a8e8:	18bff036 	bltu	r3,r2,8111a8ac <__reset+0xfb0fa8ac>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
8111a8ec:	e0bff617 	ldw	r2,-40(fp)
8111a8f0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
8111a8f4:	e0bffa17 	ldw	r2,-24(fp)
8111a8f8:	e0fffc17 	ldw	r3,-16(fp)
8111a8fc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
8111a900:	e0bffa17 	ldw	r2,-24(fp)
8111a904:	e0fffc17 	ldw	r3,-16(fp)
8111a908:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
8111a90c:	e0bffa17 	ldw	r2,-24(fp)
8111a910:	e0fffd17 	ldw	r3,-12(fp)
8111a914:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
8111a918:	e0bffa17 	ldw	r2,-24(fp)
8111a91c:	e0fffd17 	ldw	r3,-12(fp)
8111a920:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
8111a924:	e0bffa17 	ldw	r2,-24(fp)
8111a928:	e0fffe17 	ldw	r3,-8(fp)
8111a92c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
8111a930:	e0bfff17 	ldw	r2,-4(fp)
8111a934:	10000005 	stb	zero,0(r2)
    return (pmem);
8111a938:	e0bffa17 	ldw	r2,-24(fp)
}
8111a93c:	e037883a 	mov	sp,fp
8111a940:	df000017 	ldw	fp,0(sp)
8111a944:	dec00104 	addi	sp,sp,4
8111a948:	f800283a 	ret

8111a94c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
8111a94c:	defff804 	addi	sp,sp,-32
8111a950:	df000715 	stw	fp,28(sp)
8111a954:	df000704 	addi	fp,sp,28
8111a958:	e13ffe15 	stw	r4,-8(fp)
8111a95c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8111a960:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8111a964:	e0bfff17 	ldw	r2,-4(fp)
8111a968:	1000021e 	bne	r2,zero,8111a974 <OSMemGet+0x28>
        return ((void *)0);
8111a96c:	0005883a 	mov	r2,zero
8111a970:	00002e06 	br	8111aa2c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
8111a974:	e0bffe17 	ldw	r2,-8(fp)
8111a978:	1000051e 	bne	r2,zero,8111a990 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8111a97c:	e0bfff17 	ldw	r2,-4(fp)
8111a980:	00c01804 	movi	r3,96
8111a984:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8111a988:	0005883a 	mov	r2,zero
8111a98c:	00002706 	br	8111aa2c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111a990:	0005303a 	rdctl	r2,status
8111a994:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111a998:	e0fffd17 	ldw	r3,-12(fp)
8111a99c:	00bfff84 	movi	r2,-2
8111a9a0:	1884703a 	and	r2,r3,r2
8111a9a4:	1001703a 	wrctl	status,r2
  
  return context;
8111a9a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8111a9ac:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
8111a9b0:	e0bffe17 	ldw	r2,-8(fp)
8111a9b4:	10800417 	ldw	r2,16(r2)
8111a9b8:	10001426 	beq	r2,zero,8111aa0c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
8111a9bc:	e0bffe17 	ldw	r2,-8(fp)
8111a9c0:	10800117 	ldw	r2,4(r2)
8111a9c4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
8111a9c8:	e0bffb17 	ldw	r2,-20(fp)
8111a9cc:	10c00017 	ldw	r3,0(r2)
8111a9d0:	e0bffe17 	ldw	r2,-8(fp)
8111a9d4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
8111a9d8:	e0bffe17 	ldw	r2,-8(fp)
8111a9dc:	10800417 	ldw	r2,16(r2)
8111a9e0:	10ffffc4 	addi	r3,r2,-1
8111a9e4:	e0bffe17 	ldw	r2,-8(fp)
8111a9e8:	10c00415 	stw	r3,16(r2)
8111a9ec:	e0bff917 	ldw	r2,-28(fp)
8111a9f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111a9f4:	e0bffa17 	ldw	r2,-24(fp)
8111a9f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
8111a9fc:	e0bfff17 	ldw	r2,-4(fp)
8111aa00:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
8111aa04:	e0bffb17 	ldw	r2,-20(fp)
8111aa08:	00000806 	br	8111aa2c <OSMemGet+0xe0>
8111aa0c:	e0bff917 	ldw	r2,-28(fp)
8111aa10:	e0bffc15 	stw	r2,-16(fp)
8111aa14:	e0bffc17 	ldw	r2,-16(fp)
8111aa18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
8111aa1c:	e0bfff17 	ldw	r2,-4(fp)
8111aa20:	00c01744 	movi	r3,93
8111aa24:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
8111aa28:	0005883a 	mov	r2,zero
}
8111aa2c:	e037883a 	mov	sp,fp
8111aa30:	df000017 	ldw	fp,0(sp)
8111aa34:	dec00104 	addi	sp,sp,4
8111aa38:	f800283a 	ret

8111aa3c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8111aa3c:	defff704 	addi	sp,sp,-36
8111aa40:	dfc00815 	stw	ra,32(sp)
8111aa44:	df000715 	stw	fp,28(sp)
8111aa48:	df000704 	addi	fp,sp,28
8111aa4c:	e13ffd15 	stw	r4,-12(fp)
8111aa50:	e17ffe15 	stw	r5,-8(fp)
8111aa54:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111aa58:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8111aa5c:	e0bfff17 	ldw	r2,-4(fp)
8111aa60:	1000021e 	bne	r2,zero,8111aa6c <OSMemNameGet+0x30>
        return (0);
8111aa64:	0005883a 	mov	r2,zero
8111aa68:	00002b06 	br	8111ab18 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8111aa6c:	e0bffd17 	ldw	r2,-12(fp)
8111aa70:	1000051e 	bne	r2,zero,8111aa88 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8111aa74:	e0bfff17 	ldw	r2,-4(fp)
8111aa78:	00c01804 	movi	r3,96
8111aa7c:	10c00005 	stb	r3,0(r2)
        return (0);
8111aa80:	0005883a 	mov	r2,zero
8111aa84:	00002406 	br	8111ab18 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8111aa88:	e0bffe17 	ldw	r2,-8(fp)
8111aa8c:	1000051e 	bne	r2,zero,8111aaa4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
8111aa90:	e0bfff17 	ldw	r2,-4(fp)
8111aa94:	00c00304 	movi	r3,12
8111aa98:	10c00005 	stb	r3,0(r2)
        return (0);
8111aa9c:	0005883a 	mov	r2,zero
8111aaa0:	00001d06 	br	8111ab18 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8111aaa4:	d0a05403 	ldbu	r2,-32432(gp)
8111aaa8:	10803fcc 	andi	r2,r2,255
8111aaac:	10000526 	beq	r2,zero,8111aac4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
8111aab0:	e0bfff17 	ldw	r2,-4(fp)
8111aab4:	00c00444 	movi	r3,17
8111aab8:	10c00005 	stb	r3,0(r2)
        return (0);
8111aabc:	0005883a 	mov	r2,zero
8111aac0:	00001506 	br	8111ab18 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111aac4:	0005303a 	rdctl	r2,status
8111aac8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111aacc:	e0fffb17 	ldw	r3,-20(fp)
8111aad0:	00bfff84 	movi	r2,-2
8111aad4:	1884703a 	and	r2,r3,r2
8111aad8:	1001703a 	wrctl	status,r2
  
  return context;
8111aadc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
8111aae0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
8111aae4:	e0bffd17 	ldw	r2,-12(fp)
8111aae8:	10800504 	addi	r2,r2,20
8111aaec:	100b883a 	mov	r5,r2
8111aaf0:	e13ffe17 	ldw	r4,-8(fp)
8111aaf4:	11189340 	call	81118934 <OS_StrCopy>
8111aaf8:	e0bffa05 	stb	r2,-24(fp)
8111aafc:	e0bff917 	ldw	r2,-28(fp)
8111ab00:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111ab04:	e0bffc17 	ldw	r2,-16(fp)
8111ab08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8111ab0c:	e0bfff17 	ldw	r2,-4(fp)
8111ab10:	10000005 	stb	zero,0(r2)
    return (len);
8111ab14:	e0bffa03 	ldbu	r2,-24(fp)
}
8111ab18:	e037883a 	mov	sp,fp
8111ab1c:	dfc00117 	ldw	ra,4(sp)
8111ab20:	df000017 	ldw	fp,0(sp)
8111ab24:	dec00204 	addi	sp,sp,8
8111ab28:	f800283a 	ret

8111ab2c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8111ab2c:	defff604 	addi	sp,sp,-40
8111ab30:	dfc00915 	stw	ra,36(sp)
8111ab34:	df000815 	stw	fp,32(sp)
8111ab38:	df000804 	addi	fp,sp,32
8111ab3c:	e13ffd15 	stw	r4,-12(fp)
8111ab40:	e17ffe15 	stw	r5,-8(fp)
8111ab44:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111ab48:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8111ab4c:	e0bfff17 	ldw	r2,-4(fp)
8111ab50:	10003526 	beq	r2,zero,8111ac28 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8111ab54:	e0bffd17 	ldw	r2,-12(fp)
8111ab58:	1000041e 	bne	r2,zero,8111ab6c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8111ab5c:	e0bfff17 	ldw	r2,-4(fp)
8111ab60:	00c01804 	movi	r3,96
8111ab64:	10c00005 	stb	r3,0(r2)
        return;
8111ab68:	00003006 	br	8111ac2c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8111ab6c:	e0bffe17 	ldw	r2,-8(fp)
8111ab70:	1000041e 	bne	r2,zero,8111ab84 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
8111ab74:	e0bfff17 	ldw	r2,-4(fp)
8111ab78:	00c00304 	movi	r3,12
8111ab7c:	10c00005 	stb	r3,0(r2)
        return;
8111ab80:	00002a06 	br	8111ac2c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8111ab84:	d0a05403 	ldbu	r2,-32432(gp)
8111ab88:	10803fcc 	andi	r2,r2,255
8111ab8c:	10000426 	beq	r2,zero,8111aba0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
8111ab90:	e0bfff17 	ldw	r2,-4(fp)
8111ab94:	00c00484 	movi	r3,18
8111ab98:	10c00005 	stb	r3,0(r2)
        return;
8111ab9c:	00002306 	br	8111ac2c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111aba0:	0005303a 	rdctl	r2,status
8111aba4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111aba8:	e0fffc17 	ldw	r3,-16(fp)
8111abac:	00bfff84 	movi	r2,-2
8111abb0:	1884703a 	and	r2,r3,r2
8111abb4:	1001703a 	wrctl	status,r2
  
  return context;
8111abb8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111abbc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8111abc0:	e13ffe17 	ldw	r4,-8(fp)
8111abc4:	11189a80 	call	811189a8 <OS_StrLen>
8111abc8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
8111abcc:	e0bffa03 	ldbu	r2,-24(fp)
8111abd0:	10800830 	cmpltui	r2,r2,32
8111abd4:	1000081e 	bne	r2,zero,8111abf8 <OSMemNameSet+0xcc>
8111abd8:	e0bff817 	ldw	r2,-32(fp)
8111abdc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111abe0:	e0bff917 	ldw	r2,-28(fp)
8111abe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
8111abe8:	e0bfff17 	ldw	r2,-4(fp)
8111abec:	00c018c4 	movi	r3,99
8111abf0:	10c00005 	stb	r3,0(r2)
        return;
8111abf4:	00000d06 	br	8111ac2c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
8111abf8:	e0bffd17 	ldw	r2,-12(fp)
8111abfc:	10800504 	addi	r2,r2,20
8111ac00:	e17ffe17 	ldw	r5,-8(fp)
8111ac04:	1009883a 	mov	r4,r2
8111ac08:	11189340 	call	81118934 <OS_StrCopy>
8111ac0c:	e0bff817 	ldw	r2,-32(fp)
8111ac10:	e0bffb15 	stw	r2,-20(fp)
8111ac14:	e0bffb17 	ldw	r2,-20(fp)
8111ac18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8111ac1c:	e0bfff17 	ldw	r2,-4(fp)
8111ac20:	10000005 	stb	zero,0(r2)
8111ac24:	00000106 	br	8111ac2c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8111ac28:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8111ac2c:	e037883a 	mov	sp,fp
8111ac30:	dfc00117 	ldw	ra,4(sp)
8111ac34:	df000017 	ldw	fp,0(sp)
8111ac38:	dec00204 	addi	sp,sp,8
8111ac3c:	f800283a 	ret

8111ac40 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
8111ac40:	defff904 	addi	sp,sp,-28
8111ac44:	df000615 	stw	fp,24(sp)
8111ac48:	df000604 	addi	fp,sp,24
8111ac4c:	e13ffe15 	stw	r4,-8(fp)
8111ac50:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111ac54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8111ac58:	e0bffe17 	ldw	r2,-8(fp)
8111ac5c:	1000021e 	bne	r2,zero,8111ac68 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
8111ac60:	00801804 	movi	r2,96
8111ac64:	00002806 	br	8111ad08 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
8111ac68:	e0bfff17 	ldw	r2,-4(fp)
8111ac6c:	1000021e 	bne	r2,zero,8111ac78 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
8111ac70:	008017c4 	movi	r2,95
8111ac74:	00002406 	br	8111ad08 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111ac78:	0005303a 	rdctl	r2,status
8111ac7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111ac80:	e0fffd17 	ldw	r3,-12(fp)
8111ac84:	00bfff84 	movi	r2,-2
8111ac88:	1884703a 	and	r2,r3,r2
8111ac8c:	1001703a 	wrctl	status,r2
  
  return context;
8111ac90:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8111ac94:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
8111ac98:	e0bffe17 	ldw	r2,-8(fp)
8111ac9c:	10c00417 	ldw	r3,16(r2)
8111aca0:	e0bffe17 	ldw	r2,-8(fp)
8111aca4:	10800317 	ldw	r2,12(r2)
8111aca8:	18800636 	bltu	r3,r2,8111acc4 <OSMemPut+0x84>
8111acac:	e0bffa17 	ldw	r2,-24(fp)
8111acb0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111acb4:	e0bffb17 	ldw	r2,-20(fp)
8111acb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
8111acbc:	00801784 	movi	r2,94
8111acc0:	00001106 	br	8111ad08 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
8111acc4:	e0bffe17 	ldw	r2,-8(fp)
8111acc8:	10c00117 	ldw	r3,4(r2)
8111accc:	e0bfff17 	ldw	r2,-4(fp)
8111acd0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
8111acd4:	e0bffe17 	ldw	r2,-8(fp)
8111acd8:	e0ffff17 	ldw	r3,-4(fp)
8111acdc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
8111ace0:	e0bffe17 	ldw	r2,-8(fp)
8111ace4:	10800417 	ldw	r2,16(r2)
8111ace8:	10c00044 	addi	r3,r2,1
8111acec:	e0bffe17 	ldw	r2,-8(fp)
8111acf0:	10c00415 	stw	r3,16(r2)
8111acf4:	e0bffa17 	ldw	r2,-24(fp)
8111acf8:	e0bffc15 	stw	r2,-16(fp)
8111acfc:	e0bffc17 	ldw	r2,-16(fp)
8111ad00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
8111ad04:	0005883a 	mov	r2,zero
}
8111ad08:	e037883a 	mov	sp,fp
8111ad0c:	df000017 	ldw	fp,0(sp)
8111ad10:	dec00104 	addi	sp,sp,4
8111ad14:	f800283a 	ret

8111ad18 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
8111ad18:	defffa04 	addi	sp,sp,-24
8111ad1c:	df000515 	stw	fp,20(sp)
8111ad20:	df000504 	addi	fp,sp,20
8111ad24:	e13ffe15 	stw	r4,-8(fp)
8111ad28:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111ad2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8111ad30:	e0bffe17 	ldw	r2,-8(fp)
8111ad34:	1000021e 	bne	r2,zero,8111ad40 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
8111ad38:	00801804 	movi	r2,96
8111ad3c:	00002c06 	br	8111adf0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
8111ad40:	e0bfff17 	ldw	r2,-4(fp)
8111ad44:	1000021e 	bne	r2,zero,8111ad50 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
8111ad48:	00801844 	movi	r2,97
8111ad4c:	00002806 	br	8111adf0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111ad50:	0005303a 	rdctl	r2,status
8111ad54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111ad58:	e0fffc17 	ldw	r3,-16(fp)
8111ad5c:	00bfff84 	movi	r2,-2
8111ad60:	1884703a 	and	r2,r3,r2
8111ad64:	1001703a 	wrctl	status,r2
  
  return context;
8111ad68:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8111ad6c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
8111ad70:	e0bffe17 	ldw	r2,-8(fp)
8111ad74:	10c00017 	ldw	r3,0(r2)
8111ad78:	e0bfff17 	ldw	r2,-4(fp)
8111ad7c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
8111ad80:	e0bffe17 	ldw	r2,-8(fp)
8111ad84:	10c00117 	ldw	r3,4(r2)
8111ad88:	e0bfff17 	ldw	r2,-4(fp)
8111ad8c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
8111ad90:	e0bffe17 	ldw	r2,-8(fp)
8111ad94:	10c00217 	ldw	r3,8(r2)
8111ad98:	e0bfff17 	ldw	r2,-4(fp)
8111ad9c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
8111ada0:	e0bffe17 	ldw	r2,-8(fp)
8111ada4:	10c00317 	ldw	r3,12(r2)
8111ada8:	e0bfff17 	ldw	r2,-4(fp)
8111adac:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
8111adb0:	e0bffe17 	ldw	r2,-8(fp)
8111adb4:	10c00417 	ldw	r3,16(r2)
8111adb8:	e0bfff17 	ldw	r2,-4(fp)
8111adbc:	10c00415 	stw	r3,16(r2)
8111adc0:	e0bffb17 	ldw	r2,-20(fp)
8111adc4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111adc8:	e0bffd17 	ldw	r2,-12(fp)
8111adcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
8111add0:	e0bfff17 	ldw	r2,-4(fp)
8111add4:	10c00317 	ldw	r3,12(r2)
8111add8:	e0bfff17 	ldw	r2,-4(fp)
8111addc:	10800417 	ldw	r2,16(r2)
8111ade0:	1887c83a 	sub	r3,r3,r2
8111ade4:	e0bfff17 	ldw	r2,-4(fp)
8111ade8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
8111adec:	0005883a 	mov	r2,zero
}
8111adf0:	e037883a 	mov	sp,fp
8111adf4:	df000017 	ldw	fp,0(sp)
8111adf8:	dec00104 	addi	sp,sp,4
8111adfc:	f800283a 	ret

8111ae00 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
8111ae00:	defffc04 	addi	sp,sp,-16
8111ae04:	dfc00315 	stw	ra,12(sp)
8111ae08:	df000215 	stw	fp,8(sp)
8111ae0c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
8111ae10:	01430c04 	movi	r5,3120
8111ae14:	012044f4 	movhi	r4,33043
8111ae18:	212cdf04 	addi	r4,r4,-19588
8111ae1c:	11187340 	call	81118734 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
8111ae20:	00a044f4 	movhi	r2,33043
8111ae24:	10acdf04 	addi	r2,r2,-19588
8111ae28:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8111ae2c:	e03fff0d 	sth	zero,-4(fp)
8111ae30:	00001306 	br	8111ae80 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
8111ae34:	e0bfff0b 	ldhu	r2,-4(fp)
8111ae38:	10800044 	addi	r2,r2,1
8111ae3c:	10c00d24 	muli	r3,r2,52
8111ae40:	00a044f4 	movhi	r2,33043
8111ae44:	10acdf04 	addi	r2,r2,-19588
8111ae48:	1887883a 	add	r3,r3,r2
8111ae4c:	e0bffe17 	ldw	r2,-8(fp)
8111ae50:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
8111ae54:	e0bffe17 	ldw	r2,-8(fp)
8111ae58:	00c00fc4 	movi	r3,63
8111ae5c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
8111ae60:	e0bffe17 	ldw	r2,-8(fp)
8111ae64:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
8111ae68:	e0bffe17 	ldw	r2,-8(fp)
8111ae6c:	10800d04 	addi	r2,r2,52
8111ae70:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8111ae74:	e0bfff0b 	ldhu	r2,-4(fp)
8111ae78:	10800044 	addi	r2,r2,1
8111ae7c:	e0bfff0d 	sth	r2,-4(fp)
8111ae80:	e0bfff0b 	ldhu	r2,-4(fp)
8111ae84:	10800ef0 	cmpltui	r2,r2,59
8111ae88:	103fea1e 	bne	r2,zero,8111ae34 <__reset+0xfb0fae34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
8111ae8c:	e0bffe17 	ldw	r2,-8(fp)
8111ae90:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
8111ae94:	e0bffe17 	ldw	r2,-8(fp)
8111ae98:	00c00fc4 	movi	r3,63
8111ae9c:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
8111aea0:	e0bffe17 	ldw	r2,-8(fp)
8111aea4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
8111aea8:	00a044f4 	movhi	r2,33043
8111aeac:	10acdf04 	addi	r2,r2,-19588
8111aeb0:	d0a04e15 	stw	r2,-32456(gp)
#endif
}
8111aeb4:	0001883a 	nop
8111aeb8:	e037883a 	mov	sp,fp
8111aebc:	dfc00117 	ldw	ra,4(sp)
8111aec0:	df000017 	ldw	fp,0(sp)
8111aec4:	dec00204 	addi	sp,sp,8
8111aec8:	f800283a 	ret

8111aecc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
8111aecc:	defff804 	addi	sp,sp,-32
8111aed0:	df000715 	stw	fp,28(sp)
8111aed4:	df000704 	addi	fp,sp,28
8111aed8:	e13ffe15 	stw	r4,-8(fp)
8111aedc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111aee0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8111aee4:	e0bfff17 	ldw	r2,-4(fp)
8111aee8:	1000021e 	bne	r2,zero,8111aef4 <OSQAccept+0x28>
        return ((void *)0);
8111aeec:	0005883a 	mov	r2,zero
8111aef0:	00004206 	br	8111affc <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8111aef4:	e0bffe17 	ldw	r2,-8(fp)
8111aef8:	1000051e 	bne	r2,zero,8111af10 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
8111aefc:	e0bfff17 	ldw	r2,-4(fp)
8111af00:	00c00104 	movi	r3,4
8111af04:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8111af08:	0005883a 	mov	r2,zero
8111af0c:	00003b06 	br	8111affc <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8111af10:	e0bffe17 	ldw	r2,-8(fp)
8111af14:	10800003 	ldbu	r2,0(r2)
8111af18:	10803fcc 	andi	r2,r2,255
8111af1c:	108000a0 	cmpeqi	r2,r2,2
8111af20:	1000051e 	bne	r2,zero,8111af38 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
8111af24:	e0bfff17 	ldw	r2,-4(fp)
8111af28:	00c00044 	movi	r3,1
8111af2c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8111af30:	0005883a 	mov	r2,zero
8111af34:	00003106 	br	8111affc <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111af38:	0005303a 	rdctl	r2,status
8111af3c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111af40:	e0fffd17 	ldw	r3,-12(fp)
8111af44:	00bfff84 	movi	r2,-2
8111af48:	1884703a 	and	r2,r3,r2
8111af4c:	1001703a 	wrctl	status,r2
  
  return context;
8111af50:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8111af54:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8111af58:	e0bffe17 	ldw	r2,-8(fp)
8111af5c:	10800117 	ldw	r2,4(r2)
8111af60:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8111af64:	e0bffc17 	ldw	r2,-16(fp)
8111af68:	1080058b 	ldhu	r2,22(r2)
8111af6c:	10bfffcc 	andi	r2,r2,65535
8111af70:	10001926 	beq	r2,zero,8111afd8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8111af74:	e0bffc17 	ldw	r2,-16(fp)
8111af78:	10800417 	ldw	r2,16(r2)
8111af7c:	11000104 	addi	r4,r2,4
8111af80:	e0fffc17 	ldw	r3,-16(fp)
8111af84:	19000415 	stw	r4,16(r3)
8111af88:	10800017 	ldw	r2,0(r2)
8111af8c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8111af90:	e0bffc17 	ldw	r2,-16(fp)
8111af94:	1080058b 	ldhu	r2,22(r2)
8111af98:	10bfffc4 	addi	r2,r2,-1
8111af9c:	1007883a 	mov	r3,r2
8111afa0:	e0bffc17 	ldw	r2,-16(fp)
8111afa4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8111afa8:	e0bffc17 	ldw	r2,-16(fp)
8111afac:	10c00417 	ldw	r3,16(r2)
8111afb0:	e0bffc17 	ldw	r2,-16(fp)
8111afb4:	10800217 	ldw	r2,8(r2)
8111afb8:	1880041e 	bne	r3,r2,8111afcc <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
8111afbc:	e0bffc17 	ldw	r2,-16(fp)
8111afc0:	10c00117 	ldw	r3,4(r2)
8111afc4:	e0bffc17 	ldw	r2,-16(fp)
8111afc8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
8111afcc:	e0bfff17 	ldw	r2,-4(fp)
8111afd0:	10000005 	stb	zero,0(r2)
8111afd4:	00000406 	br	8111afe8 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
8111afd8:	e0bfff17 	ldw	r2,-4(fp)
8111afdc:	00c007c4 	movi	r3,31
8111afe0:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
8111afe4:	e03ff915 	stw	zero,-28(fp)
8111afe8:	e0bffa17 	ldw	r2,-24(fp)
8111afec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111aff0:	e0bffb17 	ldw	r2,-20(fp)
8111aff4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
8111aff8:	e0bff917 	ldw	r2,-28(fp)
}
8111affc:	e037883a 	mov	sp,fp
8111b000:	df000017 	ldw	fp,0(sp)
8111b004:	dec00104 	addi	sp,sp,4
8111b008:	f800283a 	ret

8111b00c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
8111b00c:	defff404 	addi	sp,sp,-48
8111b010:	dfc00b15 	stw	ra,44(sp)
8111b014:	df000a15 	stw	fp,40(sp)
8111b018:	df000a04 	addi	fp,sp,40
8111b01c:	e13ffe15 	stw	r4,-8(fp)
8111b020:	2805883a 	mov	r2,r5
8111b024:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111b028:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8111b02c:	d0a05403 	ldbu	r2,-32432(gp)
8111b030:	10803fcc 	andi	r2,r2,255
8111b034:	10000226 	beq	r2,zero,8111b040 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
8111b038:	0005883a 	mov	r2,zero
8111b03c:	00005906 	br	8111b1a4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b040:	0005303a 	rdctl	r2,status
8111b044:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b048:	e0fffd17 	ldw	r3,-12(fp)
8111b04c:	00bfff84 	movi	r2,-2
8111b050:	1884703a 	and	r2,r3,r2
8111b054:	1001703a 	wrctl	status,r2
  
  return context;
8111b058:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8111b05c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
8111b060:	d0a05317 	ldw	r2,-32436(gp)
8111b064:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
8111b068:	d0a05317 	ldw	r2,-32436(gp)
8111b06c:	10000326 	beq	r2,zero,8111b07c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8111b070:	d0a05317 	ldw	r2,-32436(gp)
8111b074:	10800117 	ldw	r2,4(r2)
8111b078:	d0a05315 	stw	r2,-32436(gp)
8111b07c:	e0bff717 	ldw	r2,-36(fp)
8111b080:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b084:	e0bff817 	ldw	r2,-32(fp)
8111b088:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
8111b08c:	e0bff617 	ldw	r2,-40(fp)
8111b090:	10004326 	beq	r2,zero,8111b1a0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b094:	0005303a 	rdctl	r2,status
8111b098:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b09c:	e0fff917 	ldw	r3,-28(fp)
8111b0a0:	00bfff84 	movi	r2,-2
8111b0a4:	1884703a 	and	r2,r3,r2
8111b0a8:	1001703a 	wrctl	status,r2
  
  return context;
8111b0ac:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
8111b0b0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
8111b0b4:	d0a05017 	ldw	r2,-32448(gp)
8111b0b8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
8111b0bc:	e0bffb17 	ldw	r2,-20(fp)
8111b0c0:	10002d26 	beq	r2,zero,8111b178 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
8111b0c4:	d0a05017 	ldw	r2,-32448(gp)
8111b0c8:	10800017 	ldw	r2,0(r2)
8111b0cc:	d0a05015 	stw	r2,-32448(gp)
8111b0d0:	e0bff717 	ldw	r2,-36(fp)
8111b0d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b0d8:	e0bffa17 	ldw	r2,-24(fp)
8111b0dc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
8111b0e0:	e0bffb17 	ldw	r2,-20(fp)
8111b0e4:	e0fffe17 	ldw	r3,-8(fp)
8111b0e8:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
8111b0ec:	e0bfff0b 	ldhu	r2,-4(fp)
8111b0f0:	1085883a 	add	r2,r2,r2
8111b0f4:	1085883a 	add	r2,r2,r2
8111b0f8:	1007883a 	mov	r3,r2
8111b0fc:	e0bffe17 	ldw	r2,-8(fp)
8111b100:	10c7883a 	add	r3,r2,r3
8111b104:	e0bffb17 	ldw	r2,-20(fp)
8111b108:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
8111b10c:	e0bffb17 	ldw	r2,-20(fp)
8111b110:	e0fffe17 	ldw	r3,-8(fp)
8111b114:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
8111b118:	e0bffb17 	ldw	r2,-20(fp)
8111b11c:	e0fffe17 	ldw	r3,-8(fp)
8111b120:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
8111b124:	e0bffb17 	ldw	r2,-20(fp)
8111b128:	e0ffff0b 	ldhu	r3,-4(fp)
8111b12c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
8111b130:	e0bffb17 	ldw	r2,-20(fp)
8111b134:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
8111b138:	e0bff617 	ldw	r2,-40(fp)
8111b13c:	00c00084 	movi	r3,2
8111b140:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
8111b144:	e0bff617 	ldw	r2,-40(fp)
8111b148:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
8111b14c:	e0bff617 	ldw	r2,-40(fp)
8111b150:	e0fffb17 	ldw	r3,-20(fp)
8111b154:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
8111b158:	e0bff617 	ldw	r2,-40(fp)
8111b15c:	00c00fc4 	movi	r3,63
8111b160:	10c003c5 	stb	r3,15(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
8111b164:	e0bff617 	ldw	r2,-40(fp)
8111b168:	10000405 	stb	zero,16(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
8111b16c:	e13ff617 	ldw	r4,-40(fp)
8111b170:	11183540 	call	81118354 <OS_EventWaitListInit>
8111b174:	00000a06 	br	8111b1a0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
8111b178:	d0e05317 	ldw	r3,-32436(gp)
8111b17c:	e0bff617 	ldw	r2,-40(fp)
8111b180:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
8111b184:	e0bff617 	ldw	r2,-40(fp)
8111b188:	d0a05315 	stw	r2,-32436(gp)
8111b18c:	e0bff717 	ldw	r2,-36(fp)
8111b190:	e0bffc15 	stw	r2,-16(fp)
8111b194:	e0bffc17 	ldw	r2,-16(fp)
8111b198:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
8111b19c:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
8111b1a0:	e0bff617 	ldw	r2,-40(fp)
}
8111b1a4:	e037883a 	mov	sp,fp
8111b1a8:	dfc00117 	ldw	ra,4(sp)
8111b1ac:	df000017 	ldw	fp,0(sp)
8111b1b0:	dec00204 	addi	sp,sp,8
8111b1b4:	f800283a 	ret

8111b1b8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8111b1b8:	defff204 	addi	sp,sp,-56
8111b1bc:	dfc00d15 	stw	ra,52(sp)
8111b1c0:	df000c15 	stw	fp,48(sp)
8111b1c4:	df000c04 	addi	fp,sp,48
8111b1c8:	e13ffd15 	stw	r4,-12(fp)
8111b1cc:	2805883a 	mov	r2,r5
8111b1d0:	e1bfff15 	stw	r6,-4(fp)
8111b1d4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8111b1d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8111b1dc:	e0bfff17 	ldw	r2,-4(fp)
8111b1e0:	1000021e 	bne	r2,zero,8111b1ec <OSQDel+0x34>
        return (pevent);
8111b1e4:	e0bffd17 	ldw	r2,-12(fp)
8111b1e8:	00008e06 	br	8111b424 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8111b1ec:	e0bffd17 	ldw	r2,-12(fp)
8111b1f0:	1000051e 	bne	r2,zero,8111b208 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
8111b1f4:	e0bfff17 	ldw	r2,-4(fp)
8111b1f8:	00c00104 	movi	r3,4
8111b1fc:	10c00005 	stb	r3,0(r2)
        return (pevent);
8111b200:	e0bffd17 	ldw	r2,-12(fp)
8111b204:	00008706 	br	8111b424 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8111b208:	e0bffd17 	ldw	r2,-12(fp)
8111b20c:	10800003 	ldbu	r2,0(r2)
8111b210:	10803fcc 	andi	r2,r2,255
8111b214:	108000a0 	cmpeqi	r2,r2,2
8111b218:	1000051e 	bne	r2,zero,8111b230 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
8111b21c:	e0bfff17 	ldw	r2,-4(fp)
8111b220:	00c00044 	movi	r3,1
8111b224:	10c00005 	stb	r3,0(r2)
        return (pevent);
8111b228:	e0bffd17 	ldw	r2,-12(fp)
8111b22c:	00007d06 	br	8111b424 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8111b230:	d0a05403 	ldbu	r2,-32432(gp)
8111b234:	10803fcc 	andi	r2,r2,255
8111b238:	10000526 	beq	r2,zero,8111b250 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8111b23c:	e0bfff17 	ldw	r2,-4(fp)
8111b240:	00c003c4 	movi	r3,15
8111b244:	10c00005 	stb	r3,0(r2)
        return (pevent);
8111b248:	e0bffd17 	ldw	r2,-12(fp)
8111b24c:	00007506 	br	8111b424 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b250:	0005303a 	rdctl	r2,status
8111b254:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b258:	e0fffc17 	ldw	r3,-16(fp)
8111b25c:	00bfff84 	movi	r2,-2
8111b260:	1884703a 	and	r2,r3,r2
8111b264:	1001703a 	wrctl	status,r2
  
  return context;
8111b268:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111b26c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
8111b270:	e0bffd17 	ldw	r2,-12(fp)
8111b274:	10800283 	ldbu	r2,10(r2)
8111b278:	10803fcc 	andi	r2,r2,255
8111b27c:	10000326 	beq	r2,zero,8111b28c <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8111b280:	00800044 	movi	r2,1
8111b284:	e0bff405 	stb	r2,-48(fp)
8111b288:	00000106 	br	8111b290 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8111b28c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8111b290:	e0bffe03 	ldbu	r2,-8(fp)
8111b294:	10000326 	beq	r2,zero,8111b2a4 <OSQDel+0xec>
8111b298:	10800060 	cmpeqi	r2,r2,1
8111b29c:	1000301e 	bne	r2,zero,8111b360 <OSQDel+0x1a8>
8111b2a0:	00005506 	br	8111b3f8 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
8111b2a4:	e0bff403 	ldbu	r2,-48(fp)
8111b2a8:	10001e1e 	bne	r2,zero,8111b324 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8111b2ac:	e0bffd17 	ldw	r2,-12(fp)
8111b2b0:	00c00fc4 	movi	r3,63
8111b2b4:	10c003c5 	stb	r3,15(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8111b2b8:	e0bffd17 	ldw	r2,-12(fp)
8111b2bc:	10000405 	stb	zero,16(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
8111b2c0:	e0bffd17 	ldw	r2,-12(fp)
8111b2c4:	10800117 	ldw	r2,4(r2)
8111b2c8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
8111b2cc:	d0e05017 	ldw	r3,-32448(gp)
8111b2d0:	e0bff817 	ldw	r2,-32(fp)
8111b2d4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
8111b2d8:	e0bff817 	ldw	r2,-32(fp)
8111b2dc:	d0a05015 	stw	r2,-32448(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8111b2e0:	e0bffd17 	ldw	r2,-12(fp)
8111b2e4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8111b2e8:	d0e05317 	ldw	r3,-32436(gp)
8111b2ec:	e0bffd17 	ldw	r2,-12(fp)
8111b2f0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8111b2f4:	e0bffd17 	ldw	r2,-12(fp)
8111b2f8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8111b2fc:	e0bffd17 	ldw	r2,-12(fp)
8111b300:	d0a05315 	stw	r2,-32436(gp)
8111b304:	e0bff617 	ldw	r2,-40(fp)
8111b308:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b30c:	e0bff717 	ldw	r2,-36(fp)
8111b310:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8111b314:	e0bfff17 	ldw	r2,-4(fp)
8111b318:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
8111b31c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8111b320:	00003f06 	br	8111b420 <OSQDel+0x268>
8111b324:	e0bff617 	ldw	r2,-40(fp)
8111b328:	e0bff915 	stw	r2,-28(fp)
8111b32c:	e0bff917 	ldw	r2,-28(fp)
8111b330:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8111b334:	e0bfff17 	ldw	r2,-4(fp)
8111b338:	00c01244 	movi	r3,73
8111b33c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8111b340:	e0bffd17 	ldw	r2,-12(fp)
8111b344:	e0bff515 	stw	r2,-44(fp)
             }
             break;
8111b348:	00003506 	br	8111b420 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
8111b34c:	000f883a 	mov	r7,zero
8111b350:	01800104 	movi	r6,4
8111b354:	000b883a 	mov	r5,zero
8111b358:	e13ffd17 	ldw	r4,-12(fp)
8111b35c:	1117da40 	call	81117da4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
8111b360:	e0bffd17 	ldw	r2,-12(fp)
8111b364:	10800283 	ldbu	r2,10(r2)
8111b368:	10803fcc 	andi	r2,r2,255
8111b36c:	103ff71e 	bne	r2,zero,8111b34c <__reset+0xfb0fb34c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8111b370:	e0bffd17 	ldw	r2,-12(fp)
8111b374:	00c00fc4 	movi	r3,63
8111b378:	10c003c5 	stb	r3,15(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8111b37c:	e0bffd17 	ldw	r2,-12(fp)
8111b380:	10000405 	stb	zero,16(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
8111b384:	e0bffd17 	ldw	r2,-12(fp)
8111b388:	10800117 	ldw	r2,4(r2)
8111b38c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
8111b390:	d0e05017 	ldw	r3,-32448(gp)
8111b394:	e0bff817 	ldw	r2,-32(fp)
8111b398:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
8111b39c:	e0bff817 	ldw	r2,-32(fp)
8111b3a0:	d0a05015 	stw	r2,-32448(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8111b3a4:	e0bffd17 	ldw	r2,-12(fp)
8111b3a8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8111b3ac:	d0e05317 	ldw	r3,-32436(gp)
8111b3b0:	e0bffd17 	ldw	r2,-12(fp)
8111b3b4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8111b3b8:	e0bffd17 	ldw	r2,-12(fp)
8111b3bc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8111b3c0:	e0bffd17 	ldw	r2,-12(fp)
8111b3c4:	d0a05315 	stw	r2,-32436(gp)
8111b3c8:	e0bff617 	ldw	r2,-40(fp)
8111b3cc:	e0bffa15 	stw	r2,-24(fp)
8111b3d0:	e0bffa17 	ldw	r2,-24(fp)
8111b3d4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8111b3d8:	e0bff403 	ldbu	r2,-48(fp)
8111b3dc:	10800058 	cmpnei	r2,r2,1
8111b3e0:	1000011e 	bne	r2,zero,8111b3e8 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8111b3e4:	11187f00 	call	811187f0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8111b3e8:	e0bfff17 	ldw	r2,-4(fp)
8111b3ec:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
8111b3f0:	e03ff515 	stw	zero,-44(fp)
             break;
8111b3f4:	00000a06 	br	8111b420 <OSQDel+0x268>
8111b3f8:	e0bff617 	ldw	r2,-40(fp)
8111b3fc:	e0bffb15 	stw	r2,-20(fp)
8111b400:	e0bffb17 	ldw	r2,-20(fp)
8111b404:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8111b408:	e0bfff17 	ldw	r2,-4(fp)
8111b40c:	00c001c4 	movi	r3,7
8111b410:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8111b414:	e0bffd17 	ldw	r2,-12(fp)
8111b418:	e0bff515 	stw	r2,-44(fp)
             break;
8111b41c:	0001883a 	nop
    }
    return (pevent_return);
8111b420:	e0bff517 	ldw	r2,-44(fp)
}
8111b424:	e037883a 	mov	sp,fp
8111b428:	dfc00117 	ldw	ra,4(sp)
8111b42c:	df000017 	ldw	fp,0(sp)
8111b430:	dec00204 	addi	sp,sp,8
8111b434:	f800283a 	ret

8111b438 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
8111b438:	defffa04 	addi	sp,sp,-24
8111b43c:	df000515 	stw	fp,20(sp)
8111b440:	df000504 	addi	fp,sp,20
8111b444:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8111b448:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8111b44c:	e0bfff17 	ldw	r2,-4(fp)
8111b450:	1000021e 	bne	r2,zero,8111b45c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
8111b454:	00800104 	movi	r2,4
8111b458:	00002106 	br	8111b4e0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8111b45c:	e0bfff17 	ldw	r2,-4(fp)
8111b460:	10800003 	ldbu	r2,0(r2)
8111b464:	10803fcc 	andi	r2,r2,255
8111b468:	108000a0 	cmpeqi	r2,r2,2
8111b46c:	1000021e 	bne	r2,zero,8111b478 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
8111b470:	00800044 	movi	r2,1
8111b474:	00001a06 	br	8111b4e0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b478:	0005303a 	rdctl	r2,status
8111b47c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b480:	e0fffd17 	ldw	r3,-12(fp)
8111b484:	00bfff84 	movi	r2,-2
8111b488:	1884703a 	and	r2,r3,r2
8111b48c:	1001703a 	wrctl	status,r2
  
  return context;
8111b490:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8111b494:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
8111b498:	e0bfff17 	ldw	r2,-4(fp)
8111b49c:	10800117 	ldw	r2,4(r2)
8111b4a0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
8111b4a4:	e0bffc17 	ldw	r2,-16(fp)
8111b4a8:	10c00117 	ldw	r3,4(r2)
8111b4ac:	e0bffc17 	ldw	r2,-16(fp)
8111b4b0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
8111b4b4:	e0bffc17 	ldw	r2,-16(fp)
8111b4b8:	10c00117 	ldw	r3,4(r2)
8111b4bc:	e0bffc17 	ldw	r2,-16(fp)
8111b4c0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
8111b4c4:	e0bffc17 	ldw	r2,-16(fp)
8111b4c8:	1000058d 	sth	zero,22(r2)
8111b4cc:	e0bffb17 	ldw	r2,-20(fp)
8111b4d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b4d4:	e0bffe17 	ldw	r2,-8(fp)
8111b4d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8111b4dc:	0005883a 	mov	r2,zero
}
8111b4e0:	e037883a 	mov	sp,fp
8111b4e4:	df000017 	ldw	fp,0(sp)
8111b4e8:	dec00104 	addi	sp,sp,4
8111b4ec:	f800283a 	ret

8111b4f0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8111b4f0:	defff304 	addi	sp,sp,-52
8111b4f4:	dfc00c15 	stw	ra,48(sp)
8111b4f8:	df000b15 	stw	fp,44(sp)
8111b4fc:	df000b04 	addi	fp,sp,44
8111b500:	e13ffd15 	stw	r4,-12(fp)
8111b504:	2805883a 	mov	r2,r5
8111b508:	e1bfff15 	stw	r6,-4(fp)
8111b50c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111b510:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8111b514:	e0bfff17 	ldw	r2,-4(fp)
8111b518:	1000021e 	bne	r2,zero,8111b524 <OSQPend+0x34>
        return ((void *)0);
8111b51c:	0005883a 	mov	r2,zero
8111b520:	00009106 	br	8111b768 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8111b524:	e0bffd17 	ldw	r2,-12(fp)
8111b528:	1000051e 	bne	r2,zero,8111b540 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
8111b52c:	e0bfff17 	ldw	r2,-4(fp)
8111b530:	00c00104 	movi	r3,4
8111b534:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8111b538:	0005883a 	mov	r2,zero
8111b53c:	00008a06 	br	8111b768 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8111b540:	e0bffd17 	ldw	r2,-12(fp)
8111b544:	10800003 	ldbu	r2,0(r2)
8111b548:	10803fcc 	andi	r2,r2,255
8111b54c:	108000a0 	cmpeqi	r2,r2,2
8111b550:	1000051e 	bne	r2,zero,8111b568 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
8111b554:	e0bfff17 	ldw	r2,-4(fp)
8111b558:	00c00044 	movi	r3,1
8111b55c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8111b560:	0005883a 	mov	r2,zero
8111b564:	00008006 	br	8111b768 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8111b568:	d0a05403 	ldbu	r2,-32432(gp)
8111b56c:	10803fcc 	andi	r2,r2,255
8111b570:	10000526 	beq	r2,zero,8111b588 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
8111b574:	e0bfff17 	ldw	r2,-4(fp)
8111b578:	00c00084 	movi	r3,2
8111b57c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8111b580:	0005883a 	mov	r2,zero
8111b584:	00007806 	br	8111b768 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
8111b588:	d0a04503 	ldbu	r2,-32492(gp)
8111b58c:	10803fcc 	andi	r2,r2,255
8111b590:	10000526 	beq	r2,zero,8111b5a8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
8111b594:	e0bfff17 	ldw	r2,-4(fp)
8111b598:	00c00344 	movi	r3,13
8111b59c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8111b5a0:	0005883a 	mov	r2,zero
8111b5a4:	00007006 	br	8111b768 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b5a8:	0005303a 	rdctl	r2,status
8111b5ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b5b0:	e0fffc17 	ldw	r3,-16(fp)
8111b5b4:	00bfff84 	movi	r2,-2
8111b5b8:	1884703a 	and	r2,r3,r2
8111b5bc:	1001703a 	wrctl	status,r2
  
  return context;
8111b5c0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111b5c4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8111b5c8:	e0bffd17 	ldw	r2,-12(fp)
8111b5cc:	10800117 	ldw	r2,4(r2)
8111b5d0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8111b5d4:	e0bff817 	ldw	r2,-32(fp)
8111b5d8:	1080058b 	ldhu	r2,22(r2)
8111b5dc:	10bfffcc 	andi	r2,r2,65535
8111b5e0:	10001e26 	beq	r2,zero,8111b65c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8111b5e4:	e0bff817 	ldw	r2,-32(fp)
8111b5e8:	10800417 	ldw	r2,16(r2)
8111b5ec:	11000104 	addi	r4,r2,4
8111b5f0:	e0fff817 	ldw	r3,-32(fp)
8111b5f4:	19000415 	stw	r4,16(r3)
8111b5f8:	10800017 	ldw	r2,0(r2)
8111b5fc:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8111b600:	e0bff817 	ldw	r2,-32(fp)
8111b604:	1080058b 	ldhu	r2,22(r2)
8111b608:	10bfffc4 	addi	r2,r2,-1
8111b60c:	1007883a 	mov	r3,r2
8111b610:	e0bff817 	ldw	r2,-32(fp)
8111b614:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8111b618:	e0bff817 	ldw	r2,-32(fp)
8111b61c:	10c00417 	ldw	r3,16(r2)
8111b620:	e0bff817 	ldw	r2,-32(fp)
8111b624:	10800217 	ldw	r2,8(r2)
8111b628:	1880041e 	bne	r3,r2,8111b63c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
8111b62c:	e0bff817 	ldw	r2,-32(fp)
8111b630:	10c00117 	ldw	r3,4(r2)
8111b634:	e0bff817 	ldw	r2,-32(fp)
8111b638:	10c00415 	stw	r3,16(r2)
8111b63c:	e0bff617 	ldw	r2,-40(fp)
8111b640:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b644:	e0bff717 	ldw	r2,-36(fp)
8111b648:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8111b64c:	e0bfff17 	ldw	r2,-4(fp)
8111b650:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
8111b654:	e0bff517 	ldw	r2,-44(fp)
8111b658:	00004306 	br	8111b768 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
8111b65c:	d0a05517 	ldw	r2,-32428(gp)
8111b660:	d0e05517 	ldw	r3,-32428(gp)
8111b664:	18c00c03 	ldbu	r3,48(r3)
8111b668:	18c00114 	ori	r3,r3,4
8111b66c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8111b670:	d0a05517 	ldw	r2,-32428(gp)
8111b674:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
8111b678:	d0a05517 	ldw	r2,-32428(gp)
8111b67c:	e0fffe0b 	ldhu	r3,-8(fp)
8111b680:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
8111b684:	e13ffd17 	ldw	r4,-12(fp)
8111b688:	1117f3c0 	call	81117f3c <OS_EventTaskWait>
8111b68c:	e0bff617 	ldw	r2,-40(fp)
8111b690:	e0bffb15 	stw	r2,-20(fp)
8111b694:	e0bffb17 	ldw	r2,-20(fp)
8111b698:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
8111b69c:	11187f00 	call	811187f0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b6a0:	0005303a 	rdctl	r2,status
8111b6a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b6a8:	e0fff917 	ldw	r3,-28(fp)
8111b6ac:	00bfff84 	movi	r2,-2
8111b6b0:	1884703a 	and	r2,r3,r2
8111b6b4:	1001703a 	wrctl	status,r2
  
  return context;
8111b6b8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8111b6bc:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8111b6c0:	d0a05517 	ldw	r2,-32428(gp)
8111b6c4:	10800c43 	ldbu	r2,49(r2)
8111b6c8:	10803fcc 	andi	r2,r2,255
8111b6cc:	10000326 	beq	r2,zero,8111b6dc <OSQPend+0x1ec>
8111b6d0:	108000a0 	cmpeqi	r2,r2,2
8111b6d4:	1000071e 	bne	r2,zero,8111b6f4 <OSQPend+0x204>
8111b6d8:	00000b06 	br	8111b708 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
8111b6dc:	d0a05517 	ldw	r2,-32428(gp)
8111b6e0:	10800917 	ldw	r2,36(r2)
8111b6e4:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
8111b6e8:	e0bfff17 	ldw	r2,-4(fp)
8111b6ec:	10000005 	stb	zero,0(r2)
             break;
8111b6f0:	00000e06 	br	8111b72c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
8111b6f4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8111b6f8:	e0bfff17 	ldw	r2,-4(fp)
8111b6fc:	00c00384 	movi	r3,14
8111b700:	10c00005 	stb	r3,0(r2)
             break;
8111b704:	00000906 	br	8111b72c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8111b708:	d0a05517 	ldw	r2,-32428(gp)
8111b70c:	e17ffd17 	ldw	r5,-12(fp)
8111b710:	1009883a 	mov	r4,r2
8111b714:	111819c0 	call	8111819c <OS_EventTaskRemove>
             pmsg = (void *)0;
8111b718:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8111b71c:	e0bfff17 	ldw	r2,-4(fp)
8111b720:	00c00284 	movi	r3,10
8111b724:	10c00005 	stb	r3,0(r2)
             break;
8111b728:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8111b72c:	d0a05517 	ldw	r2,-32428(gp)
8111b730:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8111b734:	d0a05517 	ldw	r2,-32428(gp)
8111b738:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8111b73c:	d0a05517 	ldw	r2,-32428(gp)
8111b740:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8111b744:	d0a05517 	ldw	r2,-32428(gp)
8111b748:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
8111b74c:	d0a05517 	ldw	r2,-32428(gp)
8111b750:	10000915 	stw	zero,36(r2)
8111b754:	e0bff617 	ldw	r2,-40(fp)
8111b758:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b75c:	e0bffa17 	ldw	r2,-24(fp)
8111b760:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
8111b764:	e0bff517 	ldw	r2,-44(fp)
}
8111b768:	e037883a 	mov	sp,fp
8111b76c:	dfc00117 	ldw	ra,4(sp)
8111b770:	df000017 	ldw	fp,0(sp)
8111b774:	dec00204 	addi	sp,sp,8
8111b778:	f800283a 	ret

8111b77c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8111b77c:	defff604 	addi	sp,sp,-40
8111b780:	dfc00915 	stw	ra,36(sp)
8111b784:	df000815 	stw	fp,32(sp)
8111b788:	df000804 	addi	fp,sp,32
8111b78c:	e13ffd15 	stw	r4,-12(fp)
8111b790:	2805883a 	mov	r2,r5
8111b794:	e1bfff15 	stw	r6,-4(fp)
8111b798:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8111b79c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8111b7a0:	e0bfff17 	ldw	r2,-4(fp)
8111b7a4:	1000021e 	bne	r2,zero,8111b7b0 <OSQPendAbort+0x34>
        return (0);
8111b7a8:	0005883a 	mov	r2,zero
8111b7ac:	00004906 	br	8111b8d4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8111b7b0:	e0bffd17 	ldw	r2,-12(fp)
8111b7b4:	1000051e 	bne	r2,zero,8111b7cc <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
8111b7b8:	e0bfff17 	ldw	r2,-4(fp)
8111b7bc:	00c00104 	movi	r3,4
8111b7c0:	10c00005 	stb	r3,0(r2)
        return (0);
8111b7c4:	0005883a 	mov	r2,zero
8111b7c8:	00004206 	br	8111b8d4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8111b7cc:	e0bffd17 	ldw	r2,-12(fp)
8111b7d0:	10800003 	ldbu	r2,0(r2)
8111b7d4:	10803fcc 	andi	r2,r2,255
8111b7d8:	108000a0 	cmpeqi	r2,r2,2
8111b7dc:	1000051e 	bne	r2,zero,8111b7f4 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
8111b7e0:	e0bfff17 	ldw	r2,-4(fp)
8111b7e4:	00c00044 	movi	r3,1
8111b7e8:	10c00005 	stb	r3,0(r2)
        return (0);
8111b7ec:	0005883a 	mov	r2,zero
8111b7f0:	00003806 	br	8111b8d4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b7f4:	0005303a 	rdctl	r2,status
8111b7f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b7fc:	e0fffc17 	ldw	r3,-16(fp)
8111b800:	00bfff84 	movi	r2,-2
8111b804:	1884703a 	and	r2,r3,r2
8111b808:	1001703a 	wrctl	status,r2
  
  return context;
8111b80c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111b810:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
8111b814:	e0bffd17 	ldw	r2,-12(fp)
8111b818:	10800283 	ldbu	r2,10(r2)
8111b81c:	10803fcc 	andi	r2,r2,255
8111b820:	10002526 	beq	r2,zero,8111b8b8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
8111b824:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8111b828:	e0bffe03 	ldbu	r2,-8(fp)
8111b82c:	10800060 	cmpeqi	r2,r2,1
8111b830:	10000e26 	beq	r2,zero,8111b86c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8111b834:	00000806 	br	8111b858 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8111b838:	01c00084 	movi	r7,2
8111b83c:	01800104 	movi	r6,4
8111b840:	000b883a 	mov	r5,zero
8111b844:	e13ffd17 	ldw	r4,-12(fp)
8111b848:	1117da40 	call	81117da4 <OS_EventTaskRdy>
                     nbr_tasks++;
8111b84c:	e0bff803 	ldbu	r2,-32(fp)
8111b850:	10800044 	addi	r2,r2,1
8111b854:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8111b858:	e0bffd17 	ldw	r2,-12(fp)
8111b85c:	10800283 	ldbu	r2,10(r2)
8111b860:	10803fcc 	andi	r2,r2,255
8111b864:	103ff41e 	bne	r2,zero,8111b838 <__reset+0xfb0fb838>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8111b868:	00000906 	br	8111b890 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8111b86c:	01c00084 	movi	r7,2
8111b870:	01800104 	movi	r6,4
8111b874:	000b883a 	mov	r5,zero
8111b878:	e13ffd17 	ldw	r4,-12(fp)
8111b87c:	1117da40 	call	81117da4 <OS_EventTaskRdy>
                 nbr_tasks++;
8111b880:	e0bff803 	ldbu	r2,-32(fp)
8111b884:	10800044 	addi	r2,r2,1
8111b888:	e0bff805 	stb	r2,-32(fp)
                 break;
8111b88c:	0001883a 	nop
8111b890:	e0bff917 	ldw	r2,-28(fp)
8111b894:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b898:	e0bffa17 	ldw	r2,-24(fp)
8111b89c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
8111b8a0:	11187f00 	call	811187f0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8111b8a4:	e0bfff17 	ldw	r2,-4(fp)
8111b8a8:	00c00384 	movi	r3,14
8111b8ac:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8111b8b0:	e0bff803 	ldbu	r2,-32(fp)
8111b8b4:	00000706 	br	8111b8d4 <OSQPendAbort+0x158>
8111b8b8:	e0bff917 	ldw	r2,-28(fp)
8111b8bc:	e0bffb15 	stw	r2,-20(fp)
8111b8c0:	e0bffb17 	ldw	r2,-20(fp)
8111b8c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8111b8c8:	e0bfff17 	ldw	r2,-4(fp)
8111b8cc:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
8111b8d0:	0005883a 	mov	r2,zero
}
8111b8d4:	e037883a 	mov	sp,fp
8111b8d8:	dfc00117 	ldw	ra,4(sp)
8111b8dc:	df000017 	ldw	fp,0(sp)
8111b8e0:	dec00204 	addi	sp,sp,8
8111b8e4:	f800283a 	ret

8111b8e8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
8111b8e8:	defff604 	addi	sp,sp,-40
8111b8ec:	dfc00915 	stw	ra,36(sp)
8111b8f0:	df000815 	stw	fp,32(sp)
8111b8f4:	df000804 	addi	fp,sp,32
8111b8f8:	e13ffe15 	stw	r4,-8(fp)
8111b8fc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8111b900:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8111b904:	e0bffe17 	ldw	r2,-8(fp)
8111b908:	1000021e 	bne	r2,zero,8111b914 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
8111b90c:	00800104 	movi	r2,4
8111b910:	00004a06 	br	8111ba3c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8111b914:	e0bffe17 	ldw	r2,-8(fp)
8111b918:	10800003 	ldbu	r2,0(r2)
8111b91c:	10803fcc 	andi	r2,r2,255
8111b920:	108000a0 	cmpeqi	r2,r2,2
8111b924:	1000021e 	bne	r2,zero,8111b930 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
8111b928:	00800044 	movi	r2,1
8111b92c:	00004306 	br	8111ba3c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111b930:	0005303a 	rdctl	r2,status
8111b934:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111b938:	e0fffd17 	ldw	r3,-12(fp)
8111b93c:	00bfff84 	movi	r2,-2
8111b940:	1884703a 	and	r2,r3,r2
8111b944:	1001703a 	wrctl	status,r2
  
  return context;
8111b948:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8111b94c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
8111b950:	e0bffe17 	ldw	r2,-8(fp)
8111b954:	10800283 	ldbu	r2,10(r2)
8111b958:	10803fcc 	andi	r2,r2,255
8111b95c:	10000c26 	beq	r2,zero,8111b990 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8111b960:	000f883a 	mov	r7,zero
8111b964:	01800104 	movi	r6,4
8111b968:	e17fff17 	ldw	r5,-4(fp)
8111b96c:	e13ffe17 	ldw	r4,-8(fp)
8111b970:	1117da40 	call	81117da4 <OS_EventTaskRdy>
8111b974:	e0bff817 	ldw	r2,-32(fp)
8111b978:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111b97c:	e0bff917 	ldw	r2,-28(fp)
8111b980:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
8111b984:	11187f00 	call	811187f0 <OS_Sched>
        return (OS_ERR_NONE);
8111b988:	0005883a 	mov	r2,zero
8111b98c:	00002b06 	br	8111ba3c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
8111b990:	e0bffe17 	ldw	r2,-8(fp)
8111b994:	10800117 	ldw	r2,4(r2)
8111b998:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
8111b99c:	e0bffb17 	ldw	r2,-20(fp)
8111b9a0:	10c0058b 	ldhu	r3,22(r2)
8111b9a4:	e0bffb17 	ldw	r2,-20(fp)
8111b9a8:	1080050b 	ldhu	r2,20(r2)
8111b9ac:	18ffffcc 	andi	r3,r3,65535
8111b9b0:	10bfffcc 	andi	r2,r2,65535
8111b9b4:	18800636 	bltu	r3,r2,8111b9d0 <OSQPost+0xe8>
8111b9b8:	e0bff817 	ldw	r2,-32(fp)
8111b9bc:	e0bffa15 	stw	r2,-24(fp)
8111b9c0:	e0bffa17 	ldw	r2,-24(fp)
8111b9c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8111b9c8:	00800784 	movi	r2,30
8111b9cc:	00001b06 	br	8111ba3c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
8111b9d0:	e0bffb17 	ldw	r2,-20(fp)
8111b9d4:	10800317 	ldw	r2,12(r2)
8111b9d8:	11000104 	addi	r4,r2,4
8111b9dc:	e0fffb17 	ldw	r3,-20(fp)
8111b9e0:	19000315 	stw	r4,12(r3)
8111b9e4:	e0ffff17 	ldw	r3,-4(fp)
8111b9e8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
8111b9ec:	e0bffb17 	ldw	r2,-20(fp)
8111b9f0:	1080058b 	ldhu	r2,22(r2)
8111b9f4:	10800044 	addi	r2,r2,1
8111b9f8:	1007883a 	mov	r3,r2
8111b9fc:	e0bffb17 	ldw	r2,-20(fp)
8111ba00:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
8111ba04:	e0bffb17 	ldw	r2,-20(fp)
8111ba08:	10c00317 	ldw	r3,12(r2)
8111ba0c:	e0bffb17 	ldw	r2,-20(fp)
8111ba10:	10800217 	ldw	r2,8(r2)
8111ba14:	1880041e 	bne	r3,r2,8111ba28 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
8111ba18:	e0bffb17 	ldw	r2,-20(fp)
8111ba1c:	10c00117 	ldw	r3,4(r2)
8111ba20:	e0bffb17 	ldw	r2,-20(fp)
8111ba24:	10c00315 	stw	r3,12(r2)
8111ba28:	e0bff817 	ldw	r2,-32(fp)
8111ba2c:	e0bffc15 	stw	r2,-16(fp)
8111ba30:	e0bffc17 	ldw	r2,-16(fp)
8111ba34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8111ba38:	0005883a 	mov	r2,zero
}
8111ba3c:	e037883a 	mov	sp,fp
8111ba40:	dfc00117 	ldw	ra,4(sp)
8111ba44:	df000017 	ldw	fp,0(sp)
8111ba48:	dec00204 	addi	sp,sp,8
8111ba4c:	f800283a 	ret

8111ba50 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
8111ba50:	defff604 	addi	sp,sp,-40
8111ba54:	dfc00915 	stw	ra,36(sp)
8111ba58:	df000815 	stw	fp,32(sp)
8111ba5c:	df000804 	addi	fp,sp,32
8111ba60:	e13ffe15 	stw	r4,-8(fp)
8111ba64:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8111ba68:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8111ba6c:	e0bffe17 	ldw	r2,-8(fp)
8111ba70:	1000021e 	bne	r2,zero,8111ba7c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
8111ba74:	00800104 	movi	r2,4
8111ba78:	00004c06 	br	8111bbac <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8111ba7c:	e0bffe17 	ldw	r2,-8(fp)
8111ba80:	10800003 	ldbu	r2,0(r2)
8111ba84:	10803fcc 	andi	r2,r2,255
8111ba88:	108000a0 	cmpeqi	r2,r2,2
8111ba8c:	1000021e 	bne	r2,zero,8111ba98 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
8111ba90:	00800044 	movi	r2,1
8111ba94:	00004506 	br	8111bbac <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111ba98:	0005303a 	rdctl	r2,status
8111ba9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111baa0:	e0fffd17 	ldw	r3,-12(fp)
8111baa4:	00bfff84 	movi	r2,-2
8111baa8:	1884703a 	and	r2,r3,r2
8111baac:	1001703a 	wrctl	status,r2
  
  return context;
8111bab0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8111bab4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
8111bab8:	e0bffe17 	ldw	r2,-8(fp)
8111babc:	10800283 	ldbu	r2,10(r2)
8111bac0:	10803fcc 	andi	r2,r2,255
8111bac4:	10000c26 	beq	r2,zero,8111baf8 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8111bac8:	000f883a 	mov	r7,zero
8111bacc:	01800104 	movi	r6,4
8111bad0:	e17fff17 	ldw	r5,-4(fp)
8111bad4:	e13ffe17 	ldw	r4,-8(fp)
8111bad8:	1117da40 	call	81117da4 <OS_EventTaskRdy>
8111badc:	e0bff817 	ldw	r2,-32(fp)
8111bae0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111bae4:	e0bff917 	ldw	r2,-28(fp)
8111bae8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
8111baec:	11187f00 	call	811187f0 <OS_Sched>
        return (OS_ERR_NONE);
8111baf0:	0005883a 	mov	r2,zero
8111baf4:	00002d06 	br	8111bbac <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8111baf8:	e0bffe17 	ldw	r2,-8(fp)
8111bafc:	10800117 	ldw	r2,4(r2)
8111bb00:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8111bb04:	e0bffb17 	ldw	r2,-20(fp)
8111bb08:	10c0058b 	ldhu	r3,22(r2)
8111bb0c:	e0bffb17 	ldw	r2,-20(fp)
8111bb10:	1080050b 	ldhu	r2,20(r2)
8111bb14:	18ffffcc 	andi	r3,r3,65535
8111bb18:	10bfffcc 	andi	r2,r2,65535
8111bb1c:	18800636 	bltu	r3,r2,8111bb38 <OSQPostFront+0xe8>
8111bb20:	e0bff817 	ldw	r2,-32(fp)
8111bb24:	e0bffa15 	stw	r2,-24(fp)
8111bb28:	e0bffa17 	ldw	r2,-24(fp)
8111bb2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8111bb30:	00800784 	movi	r2,30
8111bb34:	00001d06 	br	8111bbac <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
8111bb38:	e0bffb17 	ldw	r2,-20(fp)
8111bb3c:	10c00417 	ldw	r3,16(r2)
8111bb40:	e0bffb17 	ldw	r2,-20(fp)
8111bb44:	10800117 	ldw	r2,4(r2)
8111bb48:	1880041e 	bne	r3,r2,8111bb5c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
8111bb4c:	e0bffb17 	ldw	r2,-20(fp)
8111bb50:	10c00217 	ldw	r3,8(r2)
8111bb54:	e0bffb17 	ldw	r2,-20(fp)
8111bb58:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
8111bb5c:	e0bffb17 	ldw	r2,-20(fp)
8111bb60:	10800417 	ldw	r2,16(r2)
8111bb64:	10ffff04 	addi	r3,r2,-4
8111bb68:	e0bffb17 	ldw	r2,-20(fp)
8111bb6c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
8111bb70:	e0bffb17 	ldw	r2,-20(fp)
8111bb74:	10800417 	ldw	r2,16(r2)
8111bb78:	e0ffff17 	ldw	r3,-4(fp)
8111bb7c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8111bb80:	e0bffb17 	ldw	r2,-20(fp)
8111bb84:	1080058b 	ldhu	r2,22(r2)
8111bb88:	10800044 	addi	r2,r2,1
8111bb8c:	1007883a 	mov	r3,r2
8111bb90:	e0bffb17 	ldw	r2,-20(fp)
8111bb94:	10c0058d 	sth	r3,22(r2)
8111bb98:	e0bff817 	ldw	r2,-32(fp)
8111bb9c:	e0bffc15 	stw	r2,-16(fp)
8111bba0:	e0bffc17 	ldw	r2,-16(fp)
8111bba4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8111bba8:	0005883a 	mov	r2,zero
}
8111bbac:	e037883a 	mov	sp,fp
8111bbb0:	dfc00117 	ldw	ra,4(sp)
8111bbb4:	df000017 	ldw	fp,0(sp)
8111bbb8:	dec00204 	addi	sp,sp,8
8111bbbc:	f800283a 	ret

8111bbc0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
8111bbc0:	defff504 	addi	sp,sp,-44
8111bbc4:	dfc00a15 	stw	ra,40(sp)
8111bbc8:	df000915 	stw	fp,36(sp)
8111bbcc:	df000904 	addi	fp,sp,36
8111bbd0:	e13ffd15 	stw	r4,-12(fp)
8111bbd4:	e17ffe15 	stw	r5,-8(fp)
8111bbd8:	3005883a 	mov	r2,r6
8111bbdc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8111bbe0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8111bbe4:	e0bffd17 	ldw	r2,-12(fp)
8111bbe8:	1000021e 	bne	r2,zero,8111bbf4 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
8111bbec:	00800104 	movi	r2,4
8111bbf0:	00007106 	br	8111bdb8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8111bbf4:	e0bffd17 	ldw	r2,-12(fp)
8111bbf8:	10800003 	ldbu	r2,0(r2)
8111bbfc:	10803fcc 	andi	r2,r2,255
8111bc00:	108000a0 	cmpeqi	r2,r2,2
8111bc04:	1000021e 	bne	r2,zero,8111bc10 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
8111bc08:	00800044 	movi	r2,1
8111bc0c:	00006a06 	br	8111bdb8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111bc10:	0005303a 	rdctl	r2,status
8111bc14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111bc18:	e0fffc17 	ldw	r3,-16(fp)
8111bc1c:	00bfff84 	movi	r2,-2
8111bc20:	1884703a 	and	r2,r3,r2
8111bc24:	1001703a 	wrctl	status,r2
  
  return context;
8111bc28:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111bc2c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
8111bc30:	e0bffd17 	ldw	r2,-12(fp)
8111bc34:	10800283 	ldbu	r2,10(r2)
8111bc38:	10803fcc 	andi	r2,r2,255
8111bc3c:	10001d26 	beq	r2,zero,8111bcb4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
8111bc40:	e0bfff03 	ldbu	r2,-4(fp)
8111bc44:	1080004c 	andi	r2,r2,1
8111bc48:	10000b26 	beq	r2,zero,8111bc78 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8111bc4c:	00000506 	br	8111bc64 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8111bc50:	000f883a 	mov	r7,zero
8111bc54:	01800104 	movi	r6,4
8111bc58:	e17ffe17 	ldw	r5,-8(fp)
8111bc5c:	e13ffd17 	ldw	r4,-12(fp)
8111bc60:	1117da40 	call	81117da4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8111bc64:	e0bffd17 	ldw	r2,-12(fp)
8111bc68:	10800283 	ldbu	r2,10(r2)
8111bc6c:	10803fcc 	andi	r2,r2,255
8111bc70:	103ff71e 	bne	r2,zero,8111bc50 <__reset+0xfb0fbc50>
8111bc74:	00000506 	br	8111bc8c <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8111bc78:	000f883a 	mov	r7,zero
8111bc7c:	01800104 	movi	r6,4
8111bc80:	e17ffe17 	ldw	r5,-8(fp)
8111bc84:	e13ffd17 	ldw	r4,-12(fp)
8111bc88:	1117da40 	call	81117da4 <OS_EventTaskRdy>
8111bc8c:	e0bff717 	ldw	r2,-36(fp)
8111bc90:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111bc94:	e0bff817 	ldw	r2,-32(fp)
8111bc98:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
8111bc9c:	e0bfff03 	ldbu	r2,-4(fp)
8111bca0:	1080010c 	andi	r2,r2,4
8111bca4:	1000011e 	bne	r2,zero,8111bcac <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
8111bca8:	11187f00 	call	811187f0 <OS_Sched>
        }
        return (OS_ERR_NONE);
8111bcac:	0005883a 	mov	r2,zero
8111bcb0:	00004106 	br	8111bdb8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8111bcb4:	e0bffd17 	ldw	r2,-12(fp)
8111bcb8:	10800117 	ldw	r2,4(r2)
8111bcbc:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8111bcc0:	e0bffa17 	ldw	r2,-24(fp)
8111bcc4:	10c0058b 	ldhu	r3,22(r2)
8111bcc8:	e0bffa17 	ldw	r2,-24(fp)
8111bccc:	1080050b 	ldhu	r2,20(r2)
8111bcd0:	18ffffcc 	andi	r3,r3,65535
8111bcd4:	10bfffcc 	andi	r2,r2,65535
8111bcd8:	18800636 	bltu	r3,r2,8111bcf4 <OSQPostOpt+0x134>
8111bcdc:	e0bff717 	ldw	r2,-36(fp)
8111bce0:	e0bff915 	stw	r2,-28(fp)
8111bce4:	e0bff917 	ldw	r2,-28(fp)
8111bce8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8111bcec:	00800784 	movi	r2,30
8111bcf0:	00003106 	br	8111bdb8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
8111bcf4:	e0bfff03 	ldbu	r2,-4(fp)
8111bcf8:	1080008c 	andi	r2,r2,2
8111bcfc:	10001326 	beq	r2,zero,8111bd4c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
8111bd00:	e0bffa17 	ldw	r2,-24(fp)
8111bd04:	10c00417 	ldw	r3,16(r2)
8111bd08:	e0bffa17 	ldw	r2,-24(fp)
8111bd0c:	10800117 	ldw	r2,4(r2)
8111bd10:	1880041e 	bne	r3,r2,8111bd24 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
8111bd14:	e0bffa17 	ldw	r2,-24(fp)
8111bd18:	10c00217 	ldw	r3,8(r2)
8111bd1c:	e0bffa17 	ldw	r2,-24(fp)
8111bd20:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
8111bd24:	e0bffa17 	ldw	r2,-24(fp)
8111bd28:	10800417 	ldw	r2,16(r2)
8111bd2c:	10ffff04 	addi	r3,r2,-4
8111bd30:	e0bffa17 	ldw	r2,-24(fp)
8111bd34:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
8111bd38:	e0bffa17 	ldw	r2,-24(fp)
8111bd3c:	10800417 	ldw	r2,16(r2)
8111bd40:	e0fffe17 	ldw	r3,-8(fp)
8111bd44:	10c00015 	stw	r3,0(r2)
8111bd48:	00001006 	br	8111bd8c <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
8111bd4c:	e0bffa17 	ldw	r2,-24(fp)
8111bd50:	10800317 	ldw	r2,12(r2)
8111bd54:	11000104 	addi	r4,r2,4
8111bd58:	e0fffa17 	ldw	r3,-24(fp)
8111bd5c:	19000315 	stw	r4,12(r3)
8111bd60:	e0fffe17 	ldw	r3,-8(fp)
8111bd64:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
8111bd68:	e0bffa17 	ldw	r2,-24(fp)
8111bd6c:	10c00317 	ldw	r3,12(r2)
8111bd70:	e0bffa17 	ldw	r2,-24(fp)
8111bd74:	10800217 	ldw	r2,8(r2)
8111bd78:	1880041e 	bne	r3,r2,8111bd8c <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
8111bd7c:	e0bffa17 	ldw	r2,-24(fp)
8111bd80:	10c00117 	ldw	r3,4(r2)
8111bd84:	e0bffa17 	ldw	r2,-24(fp)
8111bd88:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8111bd8c:	e0bffa17 	ldw	r2,-24(fp)
8111bd90:	1080058b 	ldhu	r2,22(r2)
8111bd94:	10800044 	addi	r2,r2,1
8111bd98:	1007883a 	mov	r3,r2
8111bd9c:	e0bffa17 	ldw	r2,-24(fp)
8111bda0:	10c0058d 	sth	r3,22(r2)
8111bda4:	e0bff717 	ldw	r2,-36(fp)
8111bda8:	e0bffb15 	stw	r2,-20(fp)
8111bdac:	e0bffb17 	ldw	r2,-20(fp)
8111bdb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8111bdb4:	0005883a 	mov	r2,zero
}
8111bdb8:	e037883a 	mov	sp,fp
8111bdbc:	dfc00117 	ldw	ra,4(sp)
8111bdc0:	df000017 	ldw	fp,0(sp)
8111bdc4:	dec00204 	addi	sp,sp,8
8111bdc8:	f800283a 	ret

8111bdcc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
8111bdcc:	defff604 	addi	sp,sp,-40
8111bdd0:	df000915 	stw	fp,36(sp)
8111bdd4:	df000904 	addi	fp,sp,36
8111bdd8:	e13ffe15 	stw	r4,-8(fp)
8111bddc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8111bde0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8111bde4:	e0bffe17 	ldw	r2,-8(fp)
8111bde8:	1000021e 	bne	r2,zero,8111bdf4 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
8111bdec:	00800104 	movi	r2,4
8111bdf0:	00004906 	br	8111bf18 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
8111bdf4:	e0bfff17 	ldw	r2,-4(fp)
8111bdf8:	1000021e 	bne	r2,zero,8111be04 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
8111bdfc:	00800244 	movi	r2,9
8111be00:	00004506 	br	8111bf18 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8111be04:	e0bffe17 	ldw	r2,-8(fp)
8111be08:	10800003 	ldbu	r2,0(r2)
8111be0c:	10803fcc 	andi	r2,r2,255
8111be10:	108000a0 	cmpeqi	r2,r2,2
8111be14:	1000021e 	bne	r2,zero,8111be20 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
8111be18:	00800044 	movi	r2,1
8111be1c:	00003e06 	br	8111bf18 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111be20:	0005303a 	rdctl	r2,status
8111be24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111be28:	e0fffd17 	ldw	r3,-12(fp)
8111be2c:	00bfff84 	movi	r2,-2
8111be30:	1884703a 	and	r2,r3,r2
8111be34:	1001703a 	wrctl	status,r2
  
  return context;
8111be38:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8111be3c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
8111be40:	e0bffe17 	ldw	r2,-8(fp)
8111be44:	10c00283 	ldbu	r3,10(r2)
8111be48:	e0bfff17 	ldw	r2,-4(fp)
8111be4c:	10c00305 	stb	r3,12(r2)
    psrc                 = &pevent->OSEventTbl[0];
8111be50:	e0bffe17 	ldw	r2,-8(fp)
8111be54:	108002c4 	addi	r2,r2,11
8111be58:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
8111be5c:	e0bfff17 	ldw	r2,-4(fp)
8111be60:	10800204 	addi	r2,r2,8
8111be64:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8111be68:	e03ff705 	stb	zero,-36(fp)
8111be6c:	00000b06 	br	8111be9c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
8111be70:	e0bff917 	ldw	r2,-28(fp)
8111be74:	10c00044 	addi	r3,r2,1
8111be78:	e0fff915 	stw	r3,-28(fp)
8111be7c:	e0fff817 	ldw	r3,-32(fp)
8111be80:	19000044 	addi	r4,r3,1
8111be84:	e13ff815 	stw	r4,-32(fp)
8111be88:	18c00003 	ldbu	r3,0(r3)
8111be8c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8111be90:	e0bff703 	ldbu	r2,-36(fp)
8111be94:	10800044 	addi	r2,r2,1
8111be98:	e0bff705 	stb	r2,-36(fp)
8111be9c:	e0bff703 	ldbu	r2,-36(fp)
8111bea0:	10800130 	cmpltui	r2,r2,4
8111bea4:	103ff21e 	bne	r2,zero,8111be70 <__reset+0xfb0fbe70>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
8111bea8:	e0bffe17 	ldw	r2,-8(fp)
8111beac:	10800117 	ldw	r2,4(r2)
8111beb0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
8111beb4:	e0bffc17 	ldw	r2,-16(fp)
8111beb8:	1080058b 	ldhu	r2,22(r2)
8111bebc:	10bfffcc 	andi	r2,r2,65535
8111bec0:	10000626 	beq	r2,zero,8111bedc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
8111bec4:	e0bffc17 	ldw	r2,-16(fp)
8111bec8:	10800417 	ldw	r2,16(r2)
8111becc:	10c00017 	ldw	r3,0(r2)
8111bed0:	e0bfff17 	ldw	r2,-4(fp)
8111bed4:	10c00015 	stw	r3,0(r2)
8111bed8:	00000206 	br	8111bee4 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
8111bedc:	e0bfff17 	ldw	r2,-4(fp)
8111bee0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
8111bee4:	e0bffc17 	ldw	r2,-16(fp)
8111bee8:	10c0058b 	ldhu	r3,22(r2)
8111beec:	e0bfff17 	ldw	r2,-4(fp)
8111bef0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
8111bef4:	e0bffc17 	ldw	r2,-16(fp)
8111bef8:	10c0050b 	ldhu	r3,20(r2)
8111befc:	e0bfff17 	ldw	r2,-4(fp)
8111bf00:	10c0018d 	sth	r3,6(r2)
8111bf04:	e0bffa17 	ldw	r2,-24(fp)
8111bf08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111bf0c:	e0bffb17 	ldw	r2,-20(fp)
8111bf10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8111bf14:	0005883a 	mov	r2,zero
}
8111bf18:	e037883a 	mov	sp,fp
8111bf1c:	df000017 	ldw	fp,0(sp)
8111bf20:	dec00104 	addi	sp,sp,4
8111bf24:	f800283a 	ret

8111bf28 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
8111bf28:	defffb04 	addi	sp,sp,-20
8111bf2c:	dfc00415 	stw	ra,16(sp)
8111bf30:	df000315 	stw	fp,12(sp)
8111bf34:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
8111bf38:	01407804 	movi	r5,480
8111bf3c:	012044f4 	movhi	r4,33043
8111bf40:	2131eb04 	addi	r4,r4,-14420
8111bf44:	11187340 	call	81118734 <OS_MemClr>
    pq1 = &OSQTbl[0];
8111bf48:	00a044f4 	movhi	r2,33043
8111bf4c:	10b1eb04 	addi	r2,r2,-14420
8111bf50:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
8111bf54:	00a044f4 	movhi	r2,33043
8111bf58:	10b1f104 	addi	r2,r2,-14396
8111bf5c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8111bf60:	e03ffd0d 	sth	zero,-12(fp)
8111bf64:	00000c06 	br	8111bf98 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
8111bf68:	e0bffe17 	ldw	r2,-8(fp)
8111bf6c:	e0ffff17 	ldw	r3,-4(fp)
8111bf70:	10c00015 	stw	r3,0(r2)
        pq1++;
8111bf74:	e0bffe17 	ldw	r2,-8(fp)
8111bf78:	10800604 	addi	r2,r2,24
8111bf7c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
8111bf80:	e0bfff17 	ldw	r2,-4(fp)
8111bf84:	10800604 	addi	r2,r2,24
8111bf88:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8111bf8c:	e0bffd0b 	ldhu	r2,-12(fp)
8111bf90:	10800044 	addi	r2,r2,1
8111bf94:	e0bffd0d 	sth	r2,-12(fp)
8111bf98:	e0bffd0b 	ldhu	r2,-12(fp)
8111bf9c:	108004f0 	cmpltui	r2,r2,19
8111bfa0:	103ff11e 	bne	r2,zero,8111bf68 <__reset+0xfb0fbf68>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
8111bfa4:	e0bffe17 	ldw	r2,-8(fp)
8111bfa8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
8111bfac:	00a044f4 	movhi	r2,33043
8111bfb0:	10b1eb04 	addi	r2,r2,-14420
8111bfb4:	d0a05015 	stw	r2,-32448(gp)
#endif
}
8111bfb8:	0001883a 	nop
8111bfbc:	e037883a 	mov	sp,fp
8111bfc0:	dfc00117 	ldw	ra,4(sp)
8111bfc4:	df000017 	ldw	fp,0(sp)
8111bfc8:	dec00204 	addi	sp,sp,8
8111bfcc:	f800283a 	ret

8111bfd0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
8111bfd0:	defffa04 	addi	sp,sp,-24
8111bfd4:	df000515 	stw	fp,20(sp)
8111bfd8:	df000504 	addi	fp,sp,20
8111bfdc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8111bfe0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8111bfe4:	e0bfff17 	ldw	r2,-4(fp)
8111bfe8:	1000021e 	bne	r2,zero,8111bff4 <OSSemAccept+0x24>
        return (0);
8111bfec:	0005883a 	mov	r2,zero
8111bff0:	00001f06 	br	8111c070 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8111bff4:	e0bfff17 	ldw	r2,-4(fp)
8111bff8:	10800003 	ldbu	r2,0(r2)
8111bffc:	10803fcc 	andi	r2,r2,255
8111c000:	108000e0 	cmpeqi	r2,r2,3
8111c004:	1000021e 	bne	r2,zero,8111c010 <OSSemAccept+0x40>
        return (0);
8111c008:	0005883a 	mov	r2,zero
8111c00c:	00001806 	br	8111c070 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c010:	0005303a 	rdctl	r2,status
8111c014:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c018:	e0fffe17 	ldw	r3,-8(fp)
8111c01c:	00bfff84 	movi	r2,-2
8111c020:	1884703a 	and	r2,r3,r2
8111c024:	1001703a 	wrctl	status,r2
  
  return context;
8111c028:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8111c02c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
8111c030:	e0bfff17 	ldw	r2,-4(fp)
8111c034:	1080020b 	ldhu	r2,8(r2)
8111c038:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
8111c03c:	e0bffd0b 	ldhu	r2,-12(fp)
8111c040:	10000626 	beq	r2,zero,8111c05c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
8111c044:	e0bfff17 	ldw	r2,-4(fp)
8111c048:	1080020b 	ldhu	r2,8(r2)
8111c04c:	10bfffc4 	addi	r2,r2,-1
8111c050:	1007883a 	mov	r3,r2
8111c054:	e0bfff17 	ldw	r2,-4(fp)
8111c058:	10c0020d 	sth	r3,8(r2)
8111c05c:	e0bffb17 	ldw	r2,-20(fp)
8111c060:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c064:	e0bffc17 	ldw	r2,-16(fp)
8111c068:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
8111c06c:	e0bffd0b 	ldhu	r2,-12(fp)
}
8111c070:	e037883a 	mov	sp,fp
8111c074:	df000017 	ldw	fp,0(sp)
8111c078:	dec00104 	addi	sp,sp,4
8111c07c:	f800283a 	ret

8111c080 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
8111c080:	defff904 	addi	sp,sp,-28
8111c084:	dfc00615 	stw	ra,24(sp)
8111c088:	df000515 	stw	fp,20(sp)
8111c08c:	df000504 	addi	fp,sp,20
8111c090:	2005883a 	mov	r2,r4
8111c094:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8111c098:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8111c09c:	d0a05403 	ldbu	r2,-32432(gp)
8111c0a0:	10803fcc 	andi	r2,r2,255
8111c0a4:	10000226 	beq	r2,zero,8111c0b0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
8111c0a8:	0005883a 	mov	r2,zero
8111c0ac:	00002506 	br	8111c144 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c0b0:	0005303a 	rdctl	r2,status
8111c0b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c0b8:	e0fffe17 	ldw	r3,-8(fp)
8111c0bc:	00bfff84 	movi	r2,-2
8111c0c0:	1884703a 	and	r2,r3,r2
8111c0c4:	1001703a 	wrctl	status,r2
  
  return context;
8111c0c8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8111c0cc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
8111c0d0:	d0a05317 	ldw	r2,-32436(gp)
8111c0d4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
8111c0d8:	d0a05317 	ldw	r2,-32436(gp)
8111c0dc:	10000326 	beq	r2,zero,8111c0ec <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8111c0e0:	d0a05317 	ldw	r2,-32436(gp)
8111c0e4:	10800117 	ldw	r2,4(r2)
8111c0e8:	d0a05315 	stw	r2,-32436(gp)
8111c0ec:	e0bffb17 	ldw	r2,-20(fp)
8111c0f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c0f4:	e0bffc17 	ldw	r2,-16(fp)
8111c0f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
8111c0fc:	e0bffd17 	ldw	r2,-12(fp)
8111c100:	10000f26 	beq	r2,zero,8111c140 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
8111c104:	e0bffd17 	ldw	r2,-12(fp)
8111c108:	00c000c4 	movi	r3,3
8111c10c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
8111c110:	e0bffd17 	ldw	r2,-12(fp)
8111c114:	e0ffff0b 	ldhu	r3,-4(fp)
8111c118:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
8111c11c:	e0bffd17 	ldw	r2,-12(fp)
8111c120:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
8111c124:	e0bffd17 	ldw	r2,-12(fp)
8111c128:	00c00fc4 	movi	r3,63
8111c12c:	10c003c5 	stb	r3,15(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
8111c130:	e0bffd17 	ldw	r2,-12(fp)
8111c134:	10000405 	stb	zero,16(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
8111c138:	e13ffd17 	ldw	r4,-12(fp)
8111c13c:	11183540 	call	81118354 <OS_EventWaitListInit>
    }
    return (pevent);
8111c140:	e0bffd17 	ldw	r2,-12(fp)
}
8111c144:	e037883a 	mov	sp,fp
8111c148:	dfc00117 	ldw	ra,4(sp)
8111c14c:	df000017 	ldw	fp,0(sp)
8111c150:	dec00204 	addi	sp,sp,8
8111c154:	f800283a 	ret

8111c158 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8111c158:	defff304 	addi	sp,sp,-52
8111c15c:	dfc00c15 	stw	ra,48(sp)
8111c160:	df000b15 	stw	fp,44(sp)
8111c164:	df000b04 	addi	fp,sp,44
8111c168:	e13ffd15 	stw	r4,-12(fp)
8111c16c:	2805883a 	mov	r2,r5
8111c170:	e1bfff15 	stw	r6,-4(fp)
8111c174:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8111c178:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8111c17c:	e0bfff17 	ldw	r2,-4(fp)
8111c180:	1000021e 	bne	r2,zero,8111c18c <OSSemDel+0x34>
        return (pevent);
8111c184:	e0bffd17 	ldw	r2,-12(fp)
8111c188:	00007e06 	br	8111c384 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8111c18c:	e0bffd17 	ldw	r2,-12(fp)
8111c190:	1000051e 	bne	r2,zero,8111c1a8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
8111c194:	e0bfff17 	ldw	r2,-4(fp)
8111c198:	00c00104 	movi	r3,4
8111c19c:	10c00005 	stb	r3,0(r2)
        return (pevent);
8111c1a0:	e0bffd17 	ldw	r2,-12(fp)
8111c1a4:	00007706 	br	8111c384 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8111c1a8:	e0bffd17 	ldw	r2,-12(fp)
8111c1ac:	10800003 	ldbu	r2,0(r2)
8111c1b0:	10803fcc 	andi	r2,r2,255
8111c1b4:	108000e0 	cmpeqi	r2,r2,3
8111c1b8:	1000051e 	bne	r2,zero,8111c1d0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
8111c1bc:	e0bfff17 	ldw	r2,-4(fp)
8111c1c0:	00c00044 	movi	r3,1
8111c1c4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8111c1c8:	e0bffd17 	ldw	r2,-12(fp)
8111c1cc:	00006d06 	br	8111c384 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8111c1d0:	d0a05403 	ldbu	r2,-32432(gp)
8111c1d4:	10803fcc 	andi	r2,r2,255
8111c1d8:	10000526 	beq	r2,zero,8111c1f0 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8111c1dc:	e0bfff17 	ldw	r2,-4(fp)
8111c1e0:	00c003c4 	movi	r3,15
8111c1e4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8111c1e8:	e0bffd17 	ldw	r2,-12(fp)
8111c1ec:	00006506 	br	8111c384 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c1f0:	0005303a 	rdctl	r2,status
8111c1f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c1f8:	e0fffc17 	ldw	r3,-16(fp)
8111c1fc:	00bfff84 	movi	r2,-2
8111c200:	1884703a 	and	r2,r3,r2
8111c204:	1001703a 	wrctl	status,r2
  
  return context;
8111c208:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111c20c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
8111c210:	e0bffd17 	ldw	r2,-12(fp)
8111c214:	10800283 	ldbu	r2,10(r2)
8111c218:	10803fcc 	andi	r2,r2,255
8111c21c:	10000326 	beq	r2,zero,8111c22c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8111c220:	00800044 	movi	r2,1
8111c224:	e0bff505 	stb	r2,-44(fp)
8111c228:	00000106 	br	8111c230 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8111c22c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
8111c230:	e0bffe03 	ldbu	r2,-8(fp)
8111c234:	10000326 	beq	r2,zero,8111c244 <OSSemDel+0xec>
8111c238:	10800060 	cmpeqi	r2,r2,1
8111c23c:	1000281e 	bne	r2,zero,8111c2e0 <OSSemDel+0x188>
8111c240:	00004506 	br	8111c358 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
8111c244:	e0bff503 	ldbu	r2,-44(fp)
8111c248:	1000161e 	bne	r2,zero,8111c2a4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8111c24c:	e0bffd17 	ldw	r2,-12(fp)
8111c250:	00c00fc4 	movi	r3,63
8111c254:	10c003c5 	stb	r3,15(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8111c258:	e0bffd17 	ldw	r2,-12(fp)
8111c25c:	10000405 	stb	zero,16(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8111c260:	e0bffd17 	ldw	r2,-12(fp)
8111c264:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8111c268:	d0e05317 	ldw	r3,-32436(gp)
8111c26c:	e0bffd17 	ldw	r2,-12(fp)
8111c270:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8111c274:	e0bffd17 	ldw	r2,-12(fp)
8111c278:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8111c27c:	e0bffd17 	ldw	r2,-12(fp)
8111c280:	d0a05315 	stw	r2,-32436(gp)
8111c284:	e0bff717 	ldw	r2,-36(fp)
8111c288:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c28c:	e0bff817 	ldw	r2,-32(fp)
8111c290:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8111c294:	e0bfff17 	ldw	r2,-4(fp)
8111c298:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
8111c29c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8111c2a0:	00003706 	br	8111c380 <OSSemDel+0x228>
8111c2a4:	e0bff717 	ldw	r2,-36(fp)
8111c2a8:	e0bff915 	stw	r2,-28(fp)
8111c2ac:	e0bff917 	ldw	r2,-28(fp)
8111c2b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8111c2b4:	e0bfff17 	ldw	r2,-4(fp)
8111c2b8:	00c01244 	movi	r3,73
8111c2bc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8111c2c0:	e0bffd17 	ldw	r2,-12(fp)
8111c2c4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8111c2c8:	00002d06 	br	8111c380 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8111c2cc:	000f883a 	mov	r7,zero
8111c2d0:	01800044 	movi	r6,1
8111c2d4:	000b883a 	mov	r5,zero
8111c2d8:	e13ffd17 	ldw	r4,-12(fp)
8111c2dc:	1117da40 	call	81117da4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
8111c2e0:	e0bffd17 	ldw	r2,-12(fp)
8111c2e4:	10800283 	ldbu	r2,10(r2)
8111c2e8:	10803fcc 	andi	r2,r2,255
8111c2ec:	103ff71e 	bne	r2,zero,8111c2cc <__reset+0xfb0fc2cc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8111c2f0:	e0bffd17 	ldw	r2,-12(fp)
8111c2f4:	00c00fc4 	movi	r3,63
8111c2f8:	10c003c5 	stb	r3,15(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8111c2fc:	e0bffd17 	ldw	r2,-12(fp)
8111c300:	10000405 	stb	zero,16(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8111c304:	e0bffd17 	ldw	r2,-12(fp)
8111c308:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8111c30c:	d0e05317 	ldw	r3,-32436(gp)
8111c310:	e0bffd17 	ldw	r2,-12(fp)
8111c314:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8111c318:	e0bffd17 	ldw	r2,-12(fp)
8111c31c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8111c320:	e0bffd17 	ldw	r2,-12(fp)
8111c324:	d0a05315 	stw	r2,-32436(gp)
8111c328:	e0bff717 	ldw	r2,-36(fp)
8111c32c:	e0bffa15 	stw	r2,-24(fp)
8111c330:	e0bffa17 	ldw	r2,-24(fp)
8111c334:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8111c338:	e0bff503 	ldbu	r2,-44(fp)
8111c33c:	10800058 	cmpnei	r2,r2,1
8111c340:	1000011e 	bne	r2,zero,8111c348 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8111c344:	11187f00 	call	811187f0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8111c348:	e0bfff17 	ldw	r2,-4(fp)
8111c34c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
8111c350:	e03ff615 	stw	zero,-40(fp)
             break;
8111c354:	00000a06 	br	8111c380 <OSSemDel+0x228>
8111c358:	e0bff717 	ldw	r2,-36(fp)
8111c35c:	e0bffb15 	stw	r2,-20(fp)
8111c360:	e0bffb17 	ldw	r2,-20(fp)
8111c364:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8111c368:	e0bfff17 	ldw	r2,-4(fp)
8111c36c:	00c001c4 	movi	r3,7
8111c370:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8111c374:	e0bffd17 	ldw	r2,-12(fp)
8111c378:	e0bff615 	stw	r2,-40(fp)
             break;
8111c37c:	0001883a 	nop
    }
    return (pevent_return);
8111c380:	e0bff617 	ldw	r2,-40(fp)
}
8111c384:	e037883a 	mov	sp,fp
8111c388:	dfc00117 	ldw	ra,4(sp)
8111c38c:	df000017 	ldw	fp,0(sp)
8111c390:	dec00204 	addi	sp,sp,8
8111c394:	f800283a 	ret

8111c398 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8111c398:	defff504 	addi	sp,sp,-44
8111c39c:	dfc00a15 	stw	ra,40(sp)
8111c3a0:	df000915 	stw	fp,36(sp)
8111c3a4:	df000904 	addi	fp,sp,36
8111c3a8:	e13ffd15 	stw	r4,-12(fp)
8111c3ac:	2805883a 	mov	r2,r5
8111c3b0:	e1bfff15 	stw	r6,-4(fp)
8111c3b4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8111c3b8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8111c3bc:	e0bfff17 	ldw	r2,-4(fp)
8111c3c0:	10007226 	beq	r2,zero,8111c58c <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8111c3c4:	e0bffd17 	ldw	r2,-12(fp)
8111c3c8:	1000041e 	bne	r2,zero,8111c3dc <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
8111c3cc:	e0bfff17 	ldw	r2,-4(fp)
8111c3d0:	00c00104 	movi	r3,4
8111c3d4:	10c00005 	stb	r3,0(r2)
        return;
8111c3d8:	00006d06 	br	8111c590 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8111c3dc:	e0bffd17 	ldw	r2,-12(fp)
8111c3e0:	10800003 	ldbu	r2,0(r2)
8111c3e4:	10803fcc 	andi	r2,r2,255
8111c3e8:	108000e0 	cmpeqi	r2,r2,3
8111c3ec:	1000041e 	bne	r2,zero,8111c400 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
8111c3f0:	e0bfff17 	ldw	r2,-4(fp)
8111c3f4:	00c00044 	movi	r3,1
8111c3f8:	10c00005 	stb	r3,0(r2)
        return;
8111c3fc:	00006406 	br	8111c590 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8111c400:	d0a05403 	ldbu	r2,-32432(gp)
8111c404:	10803fcc 	andi	r2,r2,255
8111c408:	10000426 	beq	r2,zero,8111c41c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
8111c40c:	e0bfff17 	ldw	r2,-4(fp)
8111c410:	00c00084 	movi	r3,2
8111c414:	10c00005 	stb	r3,0(r2)
        return;
8111c418:	00005d06 	br	8111c590 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
8111c41c:	d0a04503 	ldbu	r2,-32492(gp)
8111c420:	10803fcc 	andi	r2,r2,255
8111c424:	10000426 	beq	r2,zero,8111c438 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
8111c428:	e0bfff17 	ldw	r2,-4(fp)
8111c42c:	00c00344 	movi	r3,13
8111c430:	10c00005 	stb	r3,0(r2)
        return;
8111c434:	00005606 	br	8111c590 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c438:	0005303a 	rdctl	r2,status
8111c43c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c440:	e0fffc17 	ldw	r3,-16(fp)
8111c444:	00bfff84 	movi	r2,-2
8111c448:	1884703a 	and	r2,r3,r2
8111c44c:	1001703a 	wrctl	status,r2
  
  return context;
8111c450:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111c454:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
8111c458:	e0bffd17 	ldw	r2,-12(fp)
8111c45c:	1080020b 	ldhu	r2,8(r2)
8111c460:	10bfffcc 	andi	r2,r2,65535
8111c464:	10000d26 	beq	r2,zero,8111c49c <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
8111c468:	e0bffd17 	ldw	r2,-12(fp)
8111c46c:	1080020b 	ldhu	r2,8(r2)
8111c470:	10bfffc4 	addi	r2,r2,-1
8111c474:	1007883a 	mov	r3,r2
8111c478:	e0bffd17 	ldw	r2,-12(fp)
8111c47c:	10c0020d 	sth	r3,8(r2)
8111c480:	e0bff717 	ldw	r2,-36(fp)
8111c484:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c488:	e0bff817 	ldw	r2,-32(fp)
8111c48c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8111c490:	e0bfff17 	ldw	r2,-4(fp)
8111c494:	10000005 	stb	zero,0(r2)
        return;
8111c498:	00003d06 	br	8111c590 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
8111c49c:	d0a05517 	ldw	r2,-32428(gp)
8111c4a0:	d0e05517 	ldw	r3,-32428(gp)
8111c4a4:	18c00c03 	ldbu	r3,48(r3)
8111c4a8:	18c00054 	ori	r3,r3,1
8111c4ac:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8111c4b0:	d0a05517 	ldw	r2,-32428(gp)
8111c4b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
8111c4b8:	d0a05517 	ldw	r2,-32428(gp)
8111c4bc:	e0fffe0b 	ldhu	r3,-8(fp)
8111c4c0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8111c4c4:	e13ffd17 	ldw	r4,-12(fp)
8111c4c8:	1117f3c0 	call	81117f3c <OS_EventTaskWait>
8111c4cc:	e0bff717 	ldw	r2,-36(fp)
8111c4d0:	e0bffb15 	stw	r2,-20(fp)
8111c4d4:	e0bffb17 	ldw	r2,-20(fp)
8111c4d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8111c4dc:	11187f00 	call	811187f0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c4e0:	0005303a 	rdctl	r2,status
8111c4e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c4e8:	e0fff917 	ldw	r3,-28(fp)
8111c4ec:	00bfff84 	movi	r2,-2
8111c4f0:	1884703a 	and	r2,r3,r2
8111c4f4:	1001703a 	wrctl	status,r2
  
  return context;
8111c4f8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8111c4fc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8111c500:	d0a05517 	ldw	r2,-32428(gp)
8111c504:	10800c43 	ldbu	r2,49(r2)
8111c508:	10803fcc 	andi	r2,r2,255
8111c50c:	10000326 	beq	r2,zero,8111c51c <OSSemPend+0x184>
8111c510:	108000a0 	cmpeqi	r2,r2,2
8111c514:	1000041e 	bne	r2,zero,8111c528 <OSSemPend+0x190>
8111c518:	00000706 	br	8111c538 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8111c51c:	e0bfff17 	ldw	r2,-4(fp)
8111c520:	10000005 	stb	zero,0(r2)
             break;
8111c524:	00000c06 	br	8111c558 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8111c528:	e0bfff17 	ldw	r2,-4(fp)
8111c52c:	00c00384 	movi	r3,14
8111c530:	10c00005 	stb	r3,0(r2)
             break;
8111c534:	00000806 	br	8111c558 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
8111c538:	d0a05517 	ldw	r2,-32428(gp)
8111c53c:	e17ffd17 	ldw	r5,-12(fp)
8111c540:	1009883a 	mov	r4,r2
8111c544:	111819c0 	call	8111819c <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8111c548:	e0bfff17 	ldw	r2,-4(fp)
8111c54c:	00c00284 	movi	r3,10
8111c550:	10c00005 	stb	r3,0(r2)
             break;
8111c554:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8111c558:	d0a05517 	ldw	r2,-32428(gp)
8111c55c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8111c560:	d0a05517 	ldw	r2,-32428(gp)
8111c564:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8111c568:	d0a05517 	ldw	r2,-32428(gp)
8111c56c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8111c570:	d0a05517 	ldw	r2,-32428(gp)
8111c574:	10000815 	stw	zero,32(r2)
8111c578:	e0bff717 	ldw	r2,-36(fp)
8111c57c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c580:	e0bffa17 	ldw	r2,-24(fp)
8111c584:	1001703a 	wrctl	status,r2
8111c588:	00000106 	br	8111c590 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8111c58c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8111c590:	e037883a 	mov	sp,fp
8111c594:	dfc00117 	ldw	ra,4(sp)
8111c598:	df000017 	ldw	fp,0(sp)
8111c59c:	dec00204 	addi	sp,sp,8
8111c5a0:	f800283a 	ret

8111c5a4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8111c5a4:	defff604 	addi	sp,sp,-40
8111c5a8:	dfc00915 	stw	ra,36(sp)
8111c5ac:	df000815 	stw	fp,32(sp)
8111c5b0:	df000804 	addi	fp,sp,32
8111c5b4:	e13ffd15 	stw	r4,-12(fp)
8111c5b8:	2805883a 	mov	r2,r5
8111c5bc:	e1bfff15 	stw	r6,-4(fp)
8111c5c0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8111c5c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8111c5c8:	e0bfff17 	ldw	r2,-4(fp)
8111c5cc:	1000021e 	bne	r2,zero,8111c5d8 <OSSemPendAbort+0x34>
        return (0);
8111c5d0:	0005883a 	mov	r2,zero
8111c5d4:	00004906 	br	8111c6fc <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8111c5d8:	e0bffd17 	ldw	r2,-12(fp)
8111c5dc:	1000051e 	bne	r2,zero,8111c5f4 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
8111c5e0:	e0bfff17 	ldw	r2,-4(fp)
8111c5e4:	00c00104 	movi	r3,4
8111c5e8:	10c00005 	stb	r3,0(r2)
        return (0);
8111c5ec:	0005883a 	mov	r2,zero
8111c5f0:	00004206 	br	8111c6fc <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8111c5f4:	e0bffd17 	ldw	r2,-12(fp)
8111c5f8:	10800003 	ldbu	r2,0(r2)
8111c5fc:	10803fcc 	andi	r2,r2,255
8111c600:	108000e0 	cmpeqi	r2,r2,3
8111c604:	1000051e 	bne	r2,zero,8111c61c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
8111c608:	e0bfff17 	ldw	r2,-4(fp)
8111c60c:	00c00044 	movi	r3,1
8111c610:	10c00005 	stb	r3,0(r2)
        return (0);
8111c614:	0005883a 	mov	r2,zero
8111c618:	00003806 	br	8111c6fc <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c61c:	0005303a 	rdctl	r2,status
8111c620:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c624:	e0fffc17 	ldw	r3,-16(fp)
8111c628:	00bfff84 	movi	r2,-2
8111c62c:	1884703a 	and	r2,r3,r2
8111c630:	1001703a 	wrctl	status,r2
  
  return context;
8111c634:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111c638:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
8111c63c:	e0bffd17 	ldw	r2,-12(fp)
8111c640:	10800283 	ldbu	r2,10(r2)
8111c644:	10803fcc 	andi	r2,r2,255
8111c648:	10002526 	beq	r2,zero,8111c6e0 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
8111c64c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8111c650:	e0bffe03 	ldbu	r2,-8(fp)
8111c654:	10800060 	cmpeqi	r2,r2,1
8111c658:	10000e26 	beq	r2,zero,8111c694 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8111c65c:	00000806 	br	8111c680 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8111c660:	01c00084 	movi	r7,2
8111c664:	01800044 	movi	r6,1
8111c668:	000b883a 	mov	r5,zero
8111c66c:	e13ffd17 	ldw	r4,-12(fp)
8111c670:	1117da40 	call	81117da4 <OS_EventTaskRdy>
                     nbr_tasks++;
8111c674:	e0bff803 	ldbu	r2,-32(fp)
8111c678:	10800044 	addi	r2,r2,1
8111c67c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8111c680:	e0bffd17 	ldw	r2,-12(fp)
8111c684:	10800283 	ldbu	r2,10(r2)
8111c688:	10803fcc 	andi	r2,r2,255
8111c68c:	103ff41e 	bne	r2,zero,8111c660 <__reset+0xfb0fc660>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8111c690:	00000906 	br	8111c6b8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8111c694:	01c00084 	movi	r7,2
8111c698:	01800044 	movi	r6,1
8111c69c:	000b883a 	mov	r5,zero
8111c6a0:	e13ffd17 	ldw	r4,-12(fp)
8111c6a4:	1117da40 	call	81117da4 <OS_EventTaskRdy>
                 nbr_tasks++;
8111c6a8:	e0bff803 	ldbu	r2,-32(fp)
8111c6ac:	10800044 	addi	r2,r2,1
8111c6b0:	e0bff805 	stb	r2,-32(fp)
                 break;
8111c6b4:	0001883a 	nop
8111c6b8:	e0bff917 	ldw	r2,-28(fp)
8111c6bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c6c0:	e0bffa17 	ldw	r2,-24(fp)
8111c6c4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8111c6c8:	11187f00 	call	811187f0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8111c6cc:	e0bfff17 	ldw	r2,-4(fp)
8111c6d0:	00c00384 	movi	r3,14
8111c6d4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8111c6d8:	e0bff803 	ldbu	r2,-32(fp)
8111c6dc:	00000706 	br	8111c6fc <OSSemPendAbort+0x158>
8111c6e0:	e0bff917 	ldw	r2,-28(fp)
8111c6e4:	e0bffb15 	stw	r2,-20(fp)
8111c6e8:	e0bffb17 	ldw	r2,-20(fp)
8111c6ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8111c6f0:	e0bfff17 	ldw	r2,-4(fp)
8111c6f4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
8111c6f8:	0005883a 	mov	r2,zero
}
8111c6fc:	e037883a 	mov	sp,fp
8111c700:	dfc00117 	ldw	ra,4(sp)
8111c704:	df000017 	ldw	fp,0(sp)
8111c708:	dec00204 	addi	sp,sp,8
8111c70c:	f800283a 	ret

8111c710 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
8111c710:	defff804 	addi	sp,sp,-32
8111c714:	dfc00715 	stw	ra,28(sp)
8111c718:	df000615 	stw	fp,24(sp)
8111c71c:	df000604 	addi	fp,sp,24
8111c720:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8111c724:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8111c728:	e0bfff17 	ldw	r2,-4(fp)
8111c72c:	1000021e 	bne	r2,zero,8111c738 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
8111c730:	00800104 	movi	r2,4
8111c734:	00003506 	br	8111c80c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8111c738:	e0bfff17 	ldw	r2,-4(fp)
8111c73c:	10800003 	ldbu	r2,0(r2)
8111c740:	10803fcc 	andi	r2,r2,255
8111c744:	108000e0 	cmpeqi	r2,r2,3
8111c748:	1000021e 	bne	r2,zero,8111c754 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
8111c74c:	00800044 	movi	r2,1
8111c750:	00002e06 	br	8111c80c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c754:	0005303a 	rdctl	r2,status
8111c758:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c75c:	e0fffe17 	ldw	r3,-8(fp)
8111c760:	00bfff84 	movi	r2,-2
8111c764:	1884703a 	and	r2,r3,r2
8111c768:	1001703a 	wrctl	status,r2
  
  return context;
8111c76c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8111c770:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
8111c774:	e0bfff17 	ldw	r2,-4(fp)
8111c778:	10800283 	ldbu	r2,10(r2)
8111c77c:	10803fcc 	andi	r2,r2,255
8111c780:	10000c26 	beq	r2,zero,8111c7b4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8111c784:	000f883a 	mov	r7,zero
8111c788:	01800044 	movi	r6,1
8111c78c:	000b883a 	mov	r5,zero
8111c790:	e13fff17 	ldw	r4,-4(fp)
8111c794:	1117da40 	call	81117da4 <OS_EventTaskRdy>
8111c798:	e0bffa17 	ldw	r2,-24(fp)
8111c79c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c7a0:	e0bffb17 	ldw	r2,-20(fp)
8111c7a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8111c7a8:	11187f00 	call	811187f0 <OS_Sched>
        return (OS_ERR_NONE);
8111c7ac:	0005883a 	mov	r2,zero
8111c7b0:	00001606 	br	8111c80c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
8111c7b4:	e0bfff17 	ldw	r2,-4(fp)
8111c7b8:	1080020b 	ldhu	r2,8(r2)
8111c7bc:	10ffffcc 	andi	r3,r2,65535
8111c7c0:	00bfffd4 	movui	r2,65535
8111c7c4:	18800c26 	beq	r3,r2,8111c7f8 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
8111c7c8:	e0bfff17 	ldw	r2,-4(fp)
8111c7cc:	1080020b 	ldhu	r2,8(r2)
8111c7d0:	10800044 	addi	r2,r2,1
8111c7d4:	1007883a 	mov	r3,r2
8111c7d8:	e0bfff17 	ldw	r2,-4(fp)
8111c7dc:	10c0020d 	sth	r3,8(r2)
8111c7e0:	e0bffa17 	ldw	r2,-24(fp)
8111c7e4:	e0bffc15 	stw	r2,-16(fp)
8111c7e8:	e0bffc17 	ldw	r2,-16(fp)
8111c7ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8111c7f0:	0005883a 	mov	r2,zero
8111c7f4:	00000506 	br	8111c80c <OSSemPost+0xfc>
8111c7f8:	e0bffa17 	ldw	r2,-24(fp)
8111c7fc:	e0bffd15 	stw	r2,-12(fp)
8111c800:	e0bffd17 	ldw	r2,-12(fp)
8111c804:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
8111c808:	00800c84 	movi	r2,50
}
8111c80c:	e037883a 	mov	sp,fp
8111c810:	dfc00117 	ldw	ra,4(sp)
8111c814:	df000017 	ldw	fp,0(sp)
8111c818:	dec00204 	addi	sp,sp,8
8111c81c:	f800283a 	ret

8111c820 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
8111c820:	defff704 	addi	sp,sp,-36
8111c824:	df000815 	stw	fp,32(sp)
8111c828:	df000804 	addi	fp,sp,32
8111c82c:	e13ffe15 	stw	r4,-8(fp)
8111c830:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8111c834:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8111c838:	e0bffe17 	ldw	r2,-8(fp)
8111c83c:	1000021e 	bne	r2,zero,8111c848 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
8111c840:	00800104 	movi	r2,4
8111c844:	00003606 	br	8111c920 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
8111c848:	e0bfff17 	ldw	r2,-4(fp)
8111c84c:	1000021e 	bne	r2,zero,8111c858 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
8111c850:	00800244 	movi	r2,9
8111c854:	00003206 	br	8111c920 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8111c858:	e0bffe17 	ldw	r2,-8(fp)
8111c85c:	10800003 	ldbu	r2,0(r2)
8111c860:	10803fcc 	andi	r2,r2,255
8111c864:	108000e0 	cmpeqi	r2,r2,3
8111c868:	1000021e 	bne	r2,zero,8111c874 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
8111c86c:	00800044 	movi	r2,1
8111c870:	00002b06 	br	8111c920 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c874:	0005303a 	rdctl	r2,status
8111c878:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c87c:	e0fffd17 	ldw	r3,-12(fp)
8111c880:	00bfff84 	movi	r2,-2
8111c884:	1884703a 	and	r2,r3,r2
8111c888:	1001703a 	wrctl	status,r2
  
  return context;
8111c88c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8111c890:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
8111c894:	e0bffe17 	ldw	r2,-8(fp)
8111c898:	10c00283 	ldbu	r3,10(r2)
8111c89c:	e0bfff17 	ldw	r2,-4(fp)
8111c8a0:	10c00185 	stb	r3,6(r2)
    psrc                   = &pevent->OSEventTbl[0];
8111c8a4:	e0bffe17 	ldw	r2,-8(fp)
8111c8a8:	108002c4 	addi	r2,r2,11
8111c8ac:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
8111c8b0:	e0bfff17 	ldw	r2,-4(fp)
8111c8b4:	10800084 	addi	r2,r2,2
8111c8b8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8111c8bc:	e03ffa05 	stb	zero,-24(fp)
8111c8c0:	00000b06 	br	8111c8f0 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
8111c8c4:	e0bff917 	ldw	r2,-28(fp)
8111c8c8:	10c00044 	addi	r3,r2,1
8111c8cc:	e0fff915 	stw	r3,-28(fp)
8111c8d0:	e0fff817 	ldw	r3,-32(fp)
8111c8d4:	19000044 	addi	r4,r3,1
8111c8d8:	e13ff815 	stw	r4,-32(fp)
8111c8dc:	18c00003 	ldbu	r3,0(r3)
8111c8e0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8111c8e4:	e0bffa03 	ldbu	r2,-24(fp)
8111c8e8:	10800044 	addi	r2,r2,1
8111c8ec:	e0bffa05 	stb	r2,-24(fp)
8111c8f0:	e0bffa03 	ldbu	r2,-24(fp)
8111c8f4:	10800130 	cmpltui	r2,r2,4
8111c8f8:	103ff21e 	bne	r2,zero,8111c8c4 <__reset+0xfb0fc8c4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
8111c8fc:	e0bffe17 	ldw	r2,-8(fp)
8111c900:	10c0020b 	ldhu	r3,8(r2)
8111c904:	e0bfff17 	ldw	r2,-4(fp)
8111c908:	10c0000d 	sth	r3,0(r2)
8111c90c:	e0bffb17 	ldw	r2,-20(fp)
8111c910:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111c914:	e0bffc17 	ldw	r2,-16(fp)
8111c918:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8111c91c:	0005883a 	mov	r2,zero
}
8111c920:	e037883a 	mov	sp,fp
8111c924:	df000017 	ldw	fp,0(sp)
8111c928:	dec00104 	addi	sp,sp,4
8111c92c:	f800283a 	ret

8111c930 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
8111c930:	defff904 	addi	sp,sp,-28
8111c934:	df000615 	stw	fp,24(sp)
8111c938:	df000604 	addi	fp,sp,24
8111c93c:	e13ffd15 	stw	r4,-12(fp)
8111c940:	2805883a 	mov	r2,r5
8111c944:	e1bfff15 	stw	r6,-4(fp)
8111c948:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8111c94c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8111c950:	e0bfff17 	ldw	r2,-4(fp)
8111c954:	10003126 	beq	r2,zero,8111ca1c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8111c958:	e0bffd17 	ldw	r2,-12(fp)
8111c95c:	1000041e 	bne	r2,zero,8111c970 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
8111c960:	e0bfff17 	ldw	r2,-4(fp)
8111c964:	00c00104 	movi	r3,4
8111c968:	10c00005 	stb	r3,0(r2)
        return;
8111c96c:	00002c06 	br	8111ca20 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8111c970:	e0bffd17 	ldw	r2,-12(fp)
8111c974:	10800003 	ldbu	r2,0(r2)
8111c978:	10803fcc 	andi	r2,r2,255
8111c97c:	108000e0 	cmpeqi	r2,r2,3
8111c980:	1000041e 	bne	r2,zero,8111c994 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
8111c984:	e0bfff17 	ldw	r2,-4(fp)
8111c988:	00c00044 	movi	r3,1
8111c98c:	10c00005 	stb	r3,0(r2)
        return;
8111c990:	00002306 	br	8111ca20 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111c994:	0005303a 	rdctl	r2,status
8111c998:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111c99c:	e0fffc17 	ldw	r3,-16(fp)
8111c9a0:	00bfff84 	movi	r2,-2
8111c9a4:	1884703a 	and	r2,r3,r2
8111c9a8:	1001703a 	wrctl	status,r2
  
  return context;
8111c9ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111c9b0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
8111c9b4:	e0bfff17 	ldw	r2,-4(fp)
8111c9b8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
8111c9bc:	e0bffd17 	ldw	r2,-12(fp)
8111c9c0:	1080020b 	ldhu	r2,8(r2)
8111c9c4:	10bfffcc 	andi	r2,r2,65535
8111c9c8:	10000426 	beq	r2,zero,8111c9dc <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
8111c9cc:	e0bffd17 	ldw	r2,-12(fp)
8111c9d0:	e0fffe0b 	ldhu	r3,-8(fp)
8111c9d4:	10c0020d 	sth	r3,8(r2)
8111c9d8:	00000b06 	br	8111ca08 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
8111c9dc:	e0bffd17 	ldw	r2,-12(fp)
8111c9e0:	10800283 	ldbu	r2,10(r2)
8111c9e4:	10803fcc 	andi	r2,r2,255
8111c9e8:	1000041e 	bne	r2,zero,8111c9fc <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
8111c9ec:	e0bffd17 	ldw	r2,-12(fp)
8111c9f0:	e0fffe0b 	ldhu	r3,-8(fp)
8111c9f4:	10c0020d 	sth	r3,8(r2)
8111c9f8:	00000306 	br	8111ca08 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
8111c9fc:	e0bfff17 	ldw	r2,-4(fp)
8111ca00:	00c01244 	movi	r3,73
8111ca04:	10c00005 	stb	r3,0(r2)
8111ca08:	e0bffa17 	ldw	r2,-24(fp)
8111ca0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111ca10:	e0bffb17 	ldw	r2,-20(fp)
8111ca14:	1001703a 	wrctl	status,r2
8111ca18:	00000106 	br	8111ca20 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8111ca1c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
8111ca20:	e037883a 	mov	sp,fp
8111ca24:	df000017 	ldw	fp,0(sp)
8111ca28:	dec00104 	addi	sp,sp,4
8111ca2c:	f800283a 	ret

8111ca30 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
8111ca30:	defff104 	addi	sp,sp,-60
8111ca34:	dfc00e15 	stw	ra,56(sp)
8111ca38:	df000d15 	stw	fp,52(sp)
8111ca3c:	df000d04 	addi	fp,sp,52
8111ca40:	2007883a 	mov	r3,r4
8111ca44:	2805883a 	mov	r2,r5
8111ca48:	e0fffe05 	stb	r3,-8(fp)
8111ca4c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
8111ca50:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
8111ca54:	e0bffe03 	ldbu	r2,-8(fp)
8111ca58:	108007b0 	cmpltui	r2,r2,30
8111ca5c:	1000051e 	bne	r2,zero,8111ca74 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
8111ca60:	e0bffe03 	ldbu	r2,-8(fp)
8111ca64:	10803fe0 	cmpeqi	r2,r2,255
8111ca68:	1000021e 	bne	r2,zero,8111ca74 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
8111ca6c:	00800a84 	movi	r2,42
8111ca70:	00012606 	br	8111cf0c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
8111ca74:	e0bfff03 	ldbu	r2,-4(fp)
8111ca78:	108007b0 	cmpltui	r2,r2,30
8111ca7c:	1000021e 	bne	r2,zero,8111ca88 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
8111ca80:	00800a84 	movi	r2,42
8111ca84:	00012106 	br	8111cf0c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111ca88:	0005303a 	rdctl	r2,status
8111ca8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111ca90:	e0fffd17 	ldw	r3,-12(fp)
8111ca94:	00bfff84 	movi	r2,-2
8111ca98:	1884703a 	and	r2,r3,r2
8111ca9c:	1001703a 	wrctl	status,r2
  
  return context;
8111caa0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8111caa4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
8111caa8:	e0ffff03 	ldbu	r3,-4(fp)
8111caac:	00a044f4 	movhi	r2,33043
8111cab0:	10ba0c04 	addi	r2,r2,-6096
8111cab4:	18c7883a 	add	r3,r3,r3
8111cab8:	18c7883a 	add	r3,r3,r3
8111cabc:	10c5883a 	add	r2,r2,r3
8111cac0:	10800017 	ldw	r2,0(r2)
8111cac4:	10000626 	beq	r2,zero,8111cae0 <OSTaskChangePrio+0xb0>
8111cac8:	e0bff517 	ldw	r2,-44(fp)
8111cacc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111cad0:	e0bff617 	ldw	r2,-40(fp)
8111cad4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
8111cad8:	00800a04 	movi	r2,40
8111cadc:	00010b06 	br	8111cf0c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
8111cae0:	e0bffe03 	ldbu	r2,-8(fp)
8111cae4:	10803fd8 	cmpnei	r2,r2,255
8111cae8:	1000031e 	bne	r2,zero,8111caf8 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
8111caec:	d0a05517 	ldw	r2,-32428(gp)
8111caf0:	10800c83 	ldbu	r2,50(r2)
8111caf4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
8111caf8:	e0fffe03 	ldbu	r3,-8(fp)
8111cafc:	00a044f4 	movhi	r2,33043
8111cb00:	10ba0c04 	addi	r2,r2,-6096
8111cb04:	18c7883a 	add	r3,r3,r3
8111cb08:	18c7883a 	add	r3,r3,r3
8111cb0c:	10c5883a 	add	r2,r2,r3
8111cb10:	10800017 	ldw	r2,0(r2)
8111cb14:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
8111cb18:	e0bff817 	ldw	r2,-32(fp)
8111cb1c:	1000061e 	bne	r2,zero,8111cb38 <OSTaskChangePrio+0x108>
8111cb20:	e0bff517 	ldw	r2,-44(fp)
8111cb24:	e0bff715 	stw	r2,-36(fp)
8111cb28:	e0bff717 	ldw	r2,-36(fp)
8111cb2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
8111cb30:	00800a44 	movi	r2,41
8111cb34:	0000f506 	br	8111cf0c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
8111cb38:	e0bff817 	ldw	r2,-32(fp)
8111cb3c:	10800058 	cmpnei	r2,r2,1
8111cb40:	1000061e 	bne	r2,zero,8111cb5c <OSTaskChangePrio+0x12c>
8111cb44:	e0bff517 	ldw	r2,-44(fp)
8111cb48:	e0bff915 	stw	r2,-28(fp)
8111cb4c:	e0bff917 	ldw	r2,-28(fp)
8111cb50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
8111cb54:	008010c4 	movi	r2,67
8111cb58:	0000ec06 	br	8111cf0c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
8111cb5c:	e0bfff03 	ldbu	r2,-4(fp)
8111cb60:	1004d0fa 	srli	r2,r2,3
8111cb64:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
8111cb68:	e0bfff03 	ldbu	r2,-4(fp)
8111cb6c:	108001cc 	andi	r2,r2,7
8111cb70:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
8111cb74:	e0bffb03 	ldbu	r2,-20(fp)
8111cb78:	00c00044 	movi	r3,1
8111cb7c:	1884983a 	sll	r2,r3,r2
8111cb80:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
8111cb84:	e0bffb43 	ldbu	r2,-19(fp)
8111cb88:	00c00044 	movi	r3,1
8111cb8c:	1884983a 	sll	r2,r3,r2
8111cb90:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
8111cb94:	e0fffe03 	ldbu	r3,-8(fp)
8111cb98:	00a044f4 	movhi	r2,33043
8111cb9c:	10ba0c04 	addi	r2,r2,-6096
8111cba0:	18c7883a 	add	r3,r3,r3
8111cba4:	18c7883a 	add	r3,r3,r3
8111cba8:	10c5883a 	add	r2,r2,r3
8111cbac:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
8111cbb0:	e0ffff03 	ldbu	r3,-4(fp)
8111cbb4:	00a044f4 	movhi	r2,33043
8111cbb8:	10ba0c04 	addi	r2,r2,-6096
8111cbbc:	18c7883a 	add	r3,r3,r3
8111cbc0:	18c7883a 	add	r3,r3,r3
8111cbc4:	10c5883a 	add	r2,r2,r3
8111cbc8:	e0fff817 	ldw	r3,-32(fp)
8111cbcc:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
8111cbd0:	e0bff817 	ldw	r2,-32(fp)
8111cbd4:	10800d03 	ldbu	r2,52(r2)
8111cbd8:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
8111cbdc:	e0bff817 	ldw	r2,-32(fp)
8111cbe0:	10800d83 	ldbu	r2,54(r2)
8111cbe4:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
8111cbe8:	e0bff817 	ldw	r2,-32(fp)
8111cbec:	10800d43 	ldbu	r2,53(r2)
8111cbf0:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
8111cbf4:	e0fffc03 	ldbu	r3,-16(fp)
8111cbf8:	d0a05144 	addi	r2,gp,-32443
8111cbfc:	1885883a 	add	r2,r3,r2
8111cc00:	10c00003 	ldbu	r3,0(r2)
8111cc04:	e0bffc83 	ldbu	r2,-14(fp)
8111cc08:	1884703a 	and	r2,r3,r2
8111cc0c:	10803fcc 	andi	r2,r2,255
8111cc10:	10002826 	beq	r2,zero,8111ccb4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
8111cc14:	e0fffc03 	ldbu	r3,-16(fp)
8111cc18:	e13ffc03 	ldbu	r4,-16(fp)
8111cc1c:	d0a05144 	addi	r2,gp,-32443
8111cc20:	2085883a 	add	r2,r4,r2
8111cc24:	10800003 	ldbu	r2,0(r2)
8111cc28:	1009883a 	mov	r4,r2
8111cc2c:	e0bffc83 	ldbu	r2,-14(fp)
8111cc30:	0084303a 	nor	r2,zero,r2
8111cc34:	2084703a 	and	r2,r4,r2
8111cc38:	1009883a 	mov	r4,r2
8111cc3c:	d0a05144 	addi	r2,gp,-32443
8111cc40:	1885883a 	add	r2,r3,r2
8111cc44:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
8111cc48:	e0fffc03 	ldbu	r3,-16(fp)
8111cc4c:	d0a05144 	addi	r2,gp,-32443
8111cc50:	1885883a 	add	r2,r3,r2
8111cc54:	10800003 	ldbu	r2,0(r2)
8111cc58:	10803fcc 	andi	r2,r2,255
8111cc5c:	1000061e 	bne	r2,zero,8111cc78 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
8111cc60:	e0bffc43 	ldbu	r2,-15(fp)
8111cc64:	0084303a 	nor	r2,zero,r2
8111cc68:	1007883a 	mov	r3,r2
8111cc6c:	d0a05103 	ldbu	r2,-32444(gp)
8111cc70:	1884703a 	and	r2,r3,r2
8111cc74:	d0a05105 	stb	r2,-32444(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
8111cc78:	d0e05103 	ldbu	r3,-32444(gp)
8111cc7c:	e0bffb83 	ldbu	r2,-18(fp)
8111cc80:	1884b03a 	or	r2,r3,r2
8111cc84:	d0a05105 	stb	r2,-32444(gp)
         OSRdyTbl[y_new] |= bitx_new;
8111cc88:	e0fffb03 	ldbu	r3,-20(fp)
8111cc8c:	e13ffb03 	ldbu	r4,-20(fp)
8111cc90:	d0a05144 	addi	r2,gp,-32443
8111cc94:	2085883a 	add	r2,r4,r2
8111cc98:	11000003 	ldbu	r4,0(r2)
8111cc9c:	e0bffbc3 	ldbu	r2,-17(fp)
8111cca0:	2084b03a 	or	r2,r4,r2
8111cca4:	1009883a 	mov	r4,r2
8111cca8:	d0a05144 	addi	r2,gp,-32443
8111ccac:	1885883a 	add	r2,r3,r2
8111ccb0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
8111ccb4:	e0bff817 	ldw	r2,-32(fp)
8111ccb8:	10800717 	ldw	r2,28(r2)
8111ccbc:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
8111ccc0:	e0bff317 	ldw	r2,-52(fp)
8111ccc4:	10003326 	beq	r2,zero,8111cd94 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
8111ccc8:	e0bffc03 	ldbu	r2,-16(fp)
8111cccc:	e0fffc03 	ldbu	r3,-16(fp)
8111ccd0:	e13ff317 	ldw	r4,-52(fp)
8111ccd4:	20c7883a 	add	r3,r4,r3
8111ccd8:	18c002c4 	addi	r3,r3,11
8111ccdc:	18c00003 	ldbu	r3,0(r3)
8111cce0:	1809883a 	mov	r4,r3
8111cce4:	e0fffc83 	ldbu	r3,-14(fp)
8111cce8:	00c6303a 	nor	r3,zero,r3
8111ccec:	20c6703a 	and	r3,r4,r3
8111ccf0:	1809883a 	mov	r4,r3
8111ccf4:	e0fff317 	ldw	r3,-52(fp)
8111ccf8:	1885883a 	add	r2,r3,r2
8111ccfc:	108002c4 	addi	r2,r2,11
8111cd00:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
8111cd04:	e0bffc03 	ldbu	r2,-16(fp)
8111cd08:	e0fff317 	ldw	r3,-52(fp)
8111cd0c:	1885883a 	add	r2,r3,r2
8111cd10:	108002c4 	addi	r2,r2,11
8111cd14:	10800003 	ldbu	r2,0(r2)
8111cd18:	10803fcc 	andi	r2,r2,255
8111cd1c:	1000091e 	bne	r2,zero,8111cd44 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
8111cd20:	e0bff317 	ldw	r2,-52(fp)
8111cd24:	10800283 	ldbu	r2,10(r2)
8111cd28:	1007883a 	mov	r3,r2
8111cd2c:	e0bffc43 	ldbu	r2,-15(fp)
8111cd30:	0084303a 	nor	r2,zero,r2
8111cd34:	1884703a 	and	r2,r3,r2
8111cd38:	1007883a 	mov	r3,r2
8111cd3c:	e0bff317 	ldw	r2,-52(fp)
8111cd40:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
8111cd44:	e0bff317 	ldw	r2,-52(fp)
8111cd48:	10c00283 	ldbu	r3,10(r2)
8111cd4c:	e0bffb83 	ldbu	r2,-18(fp)
8111cd50:	1884b03a 	or	r2,r3,r2
8111cd54:	1007883a 	mov	r3,r2
8111cd58:	e0bff317 	ldw	r2,-52(fp)
8111cd5c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
8111cd60:	e0bffb03 	ldbu	r2,-20(fp)
8111cd64:	e0fffb03 	ldbu	r3,-20(fp)
8111cd68:	e13ff317 	ldw	r4,-52(fp)
8111cd6c:	20c7883a 	add	r3,r4,r3
8111cd70:	18c002c4 	addi	r3,r3,11
8111cd74:	19000003 	ldbu	r4,0(r3)
8111cd78:	e0fffbc3 	ldbu	r3,-17(fp)
8111cd7c:	20c6b03a 	or	r3,r4,r3
8111cd80:	1809883a 	mov	r4,r3
8111cd84:	e0fff317 	ldw	r3,-52(fp)
8111cd88:	1885883a 	add	r2,r3,r2
8111cd8c:	108002c4 	addi	r2,r2,11
8111cd90:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
8111cd94:	e0bff817 	ldw	r2,-32(fp)
8111cd98:	10800817 	ldw	r2,32(r2)
8111cd9c:	10004226 	beq	r2,zero,8111cea8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
8111cda0:	e0bff817 	ldw	r2,-32(fp)
8111cda4:	10800817 	ldw	r2,32(r2)
8111cda8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
8111cdac:	e0bff417 	ldw	r2,-48(fp)
8111cdb0:	10800017 	ldw	r2,0(r2)
8111cdb4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
8111cdb8:	00003906 	br	8111cea0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
8111cdbc:	e0bffc03 	ldbu	r2,-16(fp)
8111cdc0:	e0fffc03 	ldbu	r3,-16(fp)
8111cdc4:	e13ff317 	ldw	r4,-52(fp)
8111cdc8:	20c7883a 	add	r3,r4,r3
8111cdcc:	18c002c4 	addi	r3,r3,11
8111cdd0:	18c00003 	ldbu	r3,0(r3)
8111cdd4:	1809883a 	mov	r4,r3
8111cdd8:	e0fffc83 	ldbu	r3,-14(fp)
8111cddc:	00c6303a 	nor	r3,zero,r3
8111cde0:	20c6703a 	and	r3,r4,r3
8111cde4:	1809883a 	mov	r4,r3
8111cde8:	e0fff317 	ldw	r3,-52(fp)
8111cdec:	1885883a 	add	r2,r3,r2
8111cdf0:	108002c4 	addi	r2,r2,11
8111cdf4:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
8111cdf8:	e0bffc03 	ldbu	r2,-16(fp)
8111cdfc:	e0fff317 	ldw	r3,-52(fp)
8111ce00:	1885883a 	add	r2,r3,r2
8111ce04:	108002c4 	addi	r2,r2,11
8111ce08:	10800003 	ldbu	r2,0(r2)
8111ce0c:	10803fcc 	andi	r2,r2,255
8111ce10:	1000091e 	bne	r2,zero,8111ce38 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
8111ce14:	e0bff317 	ldw	r2,-52(fp)
8111ce18:	10800283 	ldbu	r2,10(r2)
8111ce1c:	1007883a 	mov	r3,r2
8111ce20:	e0bffc43 	ldbu	r2,-15(fp)
8111ce24:	0084303a 	nor	r2,zero,r2
8111ce28:	1884703a 	and	r2,r3,r2
8111ce2c:	1007883a 	mov	r3,r2
8111ce30:	e0bff317 	ldw	r2,-52(fp)
8111ce34:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
8111ce38:	e0bff317 	ldw	r2,-52(fp)
8111ce3c:	10c00283 	ldbu	r3,10(r2)
8111ce40:	e0bffb83 	ldbu	r2,-18(fp)
8111ce44:	1884b03a 	or	r2,r3,r2
8111ce48:	1007883a 	mov	r3,r2
8111ce4c:	e0bff317 	ldw	r2,-52(fp)
8111ce50:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
8111ce54:	e0bffb03 	ldbu	r2,-20(fp)
8111ce58:	e0fffb03 	ldbu	r3,-20(fp)
8111ce5c:	e13ff317 	ldw	r4,-52(fp)
8111ce60:	20c7883a 	add	r3,r4,r3
8111ce64:	18c002c4 	addi	r3,r3,11
8111ce68:	19000003 	ldbu	r4,0(r3)
8111ce6c:	e0fffbc3 	ldbu	r3,-17(fp)
8111ce70:	20c6b03a 	or	r3,r4,r3
8111ce74:	1809883a 	mov	r4,r3
8111ce78:	e0fff317 	ldw	r3,-52(fp)
8111ce7c:	1885883a 	add	r2,r3,r2
8111ce80:	108002c4 	addi	r2,r2,11
8111ce84:	11000005 	stb	r4,0(r2)
            pevents++;
8111ce88:	e0bff417 	ldw	r2,-48(fp)
8111ce8c:	10800104 	addi	r2,r2,4
8111ce90:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
8111ce94:	e0bff417 	ldw	r2,-48(fp)
8111ce98:	10800017 	ldw	r2,0(r2)
8111ce9c:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
8111cea0:	e0bff317 	ldw	r2,-52(fp)
8111cea4:	103fc51e 	bne	r2,zero,8111cdbc <__reset+0xfb0fcdbc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
8111cea8:	e0bff817 	ldw	r2,-32(fp)
8111ceac:	e0ffff03 	ldbu	r3,-4(fp)
8111ceb0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
8111ceb4:	e0bff817 	ldw	r2,-32(fp)
8111ceb8:	e0fffb03 	ldbu	r3,-20(fp)
8111cebc:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
8111cec0:	e0bff817 	ldw	r2,-32(fp)
8111cec4:	e0fffb43 	ldbu	r3,-19(fp)
8111cec8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
8111cecc:	e0bff817 	ldw	r2,-32(fp)
8111ced0:	e0fffb83 	ldbu	r3,-18(fp)
8111ced4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
8111ced8:	e0bff817 	ldw	r2,-32(fp)
8111cedc:	e0fffbc3 	ldbu	r3,-17(fp)
8111cee0:	10c00d45 	stb	r3,53(r2)
8111cee4:	e0bff517 	ldw	r2,-44(fp)
8111cee8:	e0bffa15 	stw	r2,-24(fp)
8111ceec:	e0bffa17 	ldw	r2,-24(fp)
8111cef0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8111cef4:	d0a04543 	ldbu	r2,-32491(gp)
8111cef8:	10803fcc 	andi	r2,r2,255
8111cefc:	10800058 	cmpnei	r2,r2,1
8111cf00:	1000011e 	bne	r2,zero,8111cf08 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
8111cf04:	11187f00 	call	811187f0 <OS_Sched>
    }
    return (OS_ERR_NONE);
8111cf08:	0005883a 	mov	r2,zero
}
8111cf0c:	e037883a 	mov	sp,fp
8111cf10:	dfc00117 	ldw	ra,4(sp)
8111cf14:	df000017 	ldw	fp,0(sp)
8111cf18:	dec00204 	addi	sp,sp,8
8111cf1c:	f800283a 	ret

8111cf20 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
8111cf20:	deffee04 	addi	sp,sp,-72
8111cf24:	dfc01115 	stw	ra,68(sp)
8111cf28:	df001015 	stw	fp,64(sp)
8111cf2c:	df001004 	addi	fp,sp,64
8111cf30:	e13ffc15 	stw	r4,-16(fp)
8111cf34:	e17ffd15 	stw	r5,-12(fp)
8111cf38:	e1bffe15 	stw	r6,-8(fp)
8111cf3c:	3805883a 	mov	r2,r7
8111cf40:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8111cf44:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8111cf48:	e0bfff03 	ldbu	r2,-4(fp)
8111cf4c:	108007f0 	cmpltui	r2,r2,31
8111cf50:	1000021e 	bne	r2,zero,8111cf5c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
8111cf54:	00800a84 	movi	r2,42
8111cf58:	00005706 	br	8111d0b8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111cf5c:	0005303a 	rdctl	r2,status
8111cf60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111cf64:	e0fffb17 	ldw	r3,-20(fp)
8111cf68:	00bfff84 	movi	r2,-2
8111cf6c:	1884703a 	and	r2,r3,r2
8111cf70:	1001703a 	wrctl	status,r2
  
  return context;
8111cf74:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8111cf78:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8111cf7c:	d0a05403 	ldbu	r2,-32432(gp)
8111cf80:	10803fcc 	andi	r2,r2,255
8111cf84:	10000626 	beq	r2,zero,8111cfa0 <OSTaskCreate+0x80>
8111cf88:	e0bff317 	ldw	r2,-52(fp)
8111cf8c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111cf90:	e0bff417 	ldw	r2,-48(fp)
8111cf94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8111cf98:	00800f04 	movi	r2,60
8111cf9c:	00004606 	br	8111d0b8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8111cfa0:	e0ffff03 	ldbu	r3,-4(fp)
8111cfa4:	00a044f4 	movhi	r2,33043
8111cfa8:	10ba0c04 	addi	r2,r2,-6096
8111cfac:	18c7883a 	add	r3,r3,r3
8111cfb0:	18c7883a 	add	r3,r3,r3
8111cfb4:	10c5883a 	add	r2,r2,r3
8111cfb8:	10800017 	ldw	r2,0(r2)
8111cfbc:	1000391e 	bne	r2,zero,8111d0a4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8111cfc0:	e0ffff03 	ldbu	r3,-4(fp)
8111cfc4:	00a044f4 	movhi	r2,33043
8111cfc8:	10ba0c04 	addi	r2,r2,-6096
8111cfcc:	18c7883a 	add	r3,r3,r3
8111cfd0:	18c7883a 	add	r3,r3,r3
8111cfd4:	10c5883a 	add	r2,r2,r3
8111cfd8:	00c00044 	movi	r3,1
8111cfdc:	10c00015 	stw	r3,0(r2)
8111cfe0:	e0bff317 	ldw	r2,-52(fp)
8111cfe4:	e0bff515 	stw	r2,-44(fp)
8111cfe8:	e0bff517 	ldw	r2,-44(fp)
8111cfec:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
8111cff0:	000f883a 	mov	r7,zero
8111cff4:	e1bffe17 	ldw	r6,-8(fp)
8111cff8:	e17ffd17 	ldw	r5,-12(fp)
8111cffc:	e13ffc17 	ldw	r4,-16(fp)
8111d000:	1123e540 	call	81123e54 <OSTaskStkInit>
8111d004:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
8111d008:	e0bfff03 	ldbu	r2,-4(fp)
8111d00c:	d8000215 	stw	zero,8(sp)
8111d010:	d8000115 	stw	zero,4(sp)
8111d014:	d8000015 	stw	zero,0(sp)
8111d018:	000f883a 	mov	r7,zero
8111d01c:	000d883a 	mov	r6,zero
8111d020:	e17ff717 	ldw	r5,-36(fp)
8111d024:	1009883a 	mov	r4,r2
8111d028:	1118c000 	call	81118c00 <OS_TCBInit>
8111d02c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
8111d030:	e0bff803 	ldbu	r2,-32(fp)
8111d034:	1000061e 	bne	r2,zero,8111d050 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
8111d038:	d0a04543 	ldbu	r2,-32491(gp)
8111d03c:	10803fcc 	andi	r2,r2,255
8111d040:	10800058 	cmpnei	r2,r2,1
8111d044:	1000151e 	bne	r2,zero,8111d09c <OSTaskCreate+0x17c>
                OS_Sched();
8111d048:	11187f00 	call	811187f0 <OS_Sched>
8111d04c:	00001306 	br	8111d09c <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d050:	0005303a 	rdctl	r2,status
8111d054:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d058:	e0fffa17 	ldw	r3,-24(fp)
8111d05c:	00bfff84 	movi	r2,-2
8111d060:	1884703a 	and	r2,r3,r2
8111d064:	1001703a 	wrctl	status,r2
  
  return context;
8111d068:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8111d06c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
8111d070:	e0ffff03 	ldbu	r3,-4(fp)
8111d074:	00a044f4 	movhi	r2,33043
8111d078:	10ba0c04 	addi	r2,r2,-6096
8111d07c:	18c7883a 	add	r3,r3,r3
8111d080:	18c7883a 	add	r3,r3,r3
8111d084:	10c5883a 	add	r2,r2,r3
8111d088:	10000015 	stw	zero,0(r2)
8111d08c:	e0bff317 	ldw	r2,-52(fp)
8111d090:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d094:	e0bff617 	ldw	r2,-40(fp)
8111d098:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8111d09c:	e0bff803 	ldbu	r2,-32(fp)
8111d0a0:	00000506 	br	8111d0b8 <OSTaskCreate+0x198>
8111d0a4:	e0bff317 	ldw	r2,-52(fp)
8111d0a8:	e0bff915 	stw	r2,-28(fp)
8111d0ac:	e0bff917 	ldw	r2,-28(fp)
8111d0b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8111d0b4:	00800a04 	movi	r2,40
}
8111d0b8:	e037883a 	mov	sp,fp
8111d0bc:	dfc00117 	ldw	ra,4(sp)
8111d0c0:	df000017 	ldw	fp,0(sp)
8111d0c4:	dec00204 	addi	sp,sp,8
8111d0c8:	f800283a 	ret

8111d0cc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
8111d0cc:	deffec04 	addi	sp,sp,-80
8111d0d0:	dfc01315 	stw	ra,76(sp)
8111d0d4:	df001215 	stw	fp,72(sp)
8111d0d8:	df001204 	addi	fp,sp,72
8111d0dc:	e13ffa15 	stw	r4,-24(fp)
8111d0e0:	e17ffb15 	stw	r5,-20(fp)
8111d0e4:	e1bffc15 	stw	r6,-16(fp)
8111d0e8:	3809883a 	mov	r4,r7
8111d0ec:	e0c00217 	ldw	r3,8(fp)
8111d0f0:	e0800617 	ldw	r2,24(fp)
8111d0f4:	e13ffd05 	stb	r4,-12(fp)
8111d0f8:	e0fffe0d 	sth	r3,-8(fp)
8111d0fc:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8111d100:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8111d104:	e0bffd03 	ldbu	r2,-12(fp)
8111d108:	108007f0 	cmpltui	r2,r2,31
8111d10c:	1000021e 	bne	r2,zero,8111d118 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
8111d110:	00800a84 	movi	r2,42
8111d114:	00006106 	br	8111d29c <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d118:	0005303a 	rdctl	r2,status
8111d11c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d120:	e0fff917 	ldw	r3,-28(fp)
8111d124:	00bfff84 	movi	r2,-2
8111d128:	1884703a 	and	r2,r3,r2
8111d12c:	1001703a 	wrctl	status,r2
  
  return context;
8111d130:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8111d134:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8111d138:	d0a05403 	ldbu	r2,-32432(gp)
8111d13c:	10803fcc 	andi	r2,r2,255
8111d140:	10000626 	beq	r2,zero,8111d15c <OSTaskCreateExt+0x90>
8111d144:	e0bff117 	ldw	r2,-60(fp)
8111d148:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d14c:	e0bff217 	ldw	r2,-56(fp)
8111d150:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8111d154:	00800f04 	movi	r2,60
8111d158:	00005006 	br	8111d29c <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8111d15c:	e0fffd03 	ldbu	r3,-12(fp)
8111d160:	00a044f4 	movhi	r2,33043
8111d164:	10ba0c04 	addi	r2,r2,-6096
8111d168:	18c7883a 	add	r3,r3,r3
8111d16c:	18c7883a 	add	r3,r3,r3
8111d170:	10c5883a 	add	r2,r2,r3
8111d174:	10800017 	ldw	r2,0(r2)
8111d178:	1000431e 	bne	r2,zero,8111d288 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8111d17c:	e0fffd03 	ldbu	r3,-12(fp)
8111d180:	00a044f4 	movhi	r2,33043
8111d184:	10ba0c04 	addi	r2,r2,-6096
8111d188:	18c7883a 	add	r3,r3,r3
8111d18c:	18c7883a 	add	r3,r3,r3
8111d190:	10c5883a 	add	r2,r2,r3
8111d194:	00c00044 	movi	r3,1
8111d198:	10c00015 	stw	r3,0(r2)
8111d19c:	e0bff117 	ldw	r2,-60(fp)
8111d1a0:	e0bff315 	stw	r2,-52(fp)
8111d1a4:	e0bff317 	ldw	r2,-52(fp)
8111d1a8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
8111d1ac:	e0bfff0b 	ldhu	r2,-4(fp)
8111d1b0:	100d883a 	mov	r6,r2
8111d1b4:	e1400417 	ldw	r5,16(fp)
8111d1b8:	e1000317 	ldw	r4,12(fp)
8111d1bc:	111e12c0 	call	8111e12c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
8111d1c0:	e0bfff0b 	ldhu	r2,-4(fp)
8111d1c4:	100f883a 	mov	r7,r2
8111d1c8:	e1bffc17 	ldw	r6,-16(fp)
8111d1cc:	e17ffb17 	ldw	r5,-20(fp)
8111d1d0:	e13ffa17 	ldw	r4,-24(fp)
8111d1d4:	1123e540 	call	81123e54 <OSTaskStkInit>
8111d1d8:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
8111d1dc:	e0fffd03 	ldbu	r3,-12(fp)
8111d1e0:	e13ffe0b 	ldhu	r4,-8(fp)
8111d1e4:	e0bfff0b 	ldhu	r2,-4(fp)
8111d1e8:	d8800215 	stw	r2,8(sp)
8111d1ec:	e0800517 	ldw	r2,20(fp)
8111d1f0:	d8800115 	stw	r2,4(sp)
8111d1f4:	e0800417 	ldw	r2,16(fp)
8111d1f8:	d8800015 	stw	r2,0(sp)
8111d1fc:	200f883a 	mov	r7,r4
8111d200:	e1800317 	ldw	r6,12(fp)
8111d204:	e17ff517 	ldw	r5,-44(fp)
8111d208:	1809883a 	mov	r4,r3
8111d20c:	1118c000 	call	81118c00 <OS_TCBInit>
8111d210:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
8111d214:	e0bff603 	ldbu	r2,-40(fp)
8111d218:	1000061e 	bne	r2,zero,8111d234 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
8111d21c:	d0a04543 	ldbu	r2,-32491(gp)
8111d220:	10803fcc 	andi	r2,r2,255
8111d224:	10800058 	cmpnei	r2,r2,1
8111d228:	1000151e 	bne	r2,zero,8111d280 <OSTaskCreateExt+0x1b4>
                OS_Sched();
8111d22c:	11187f00 	call	811187f0 <OS_Sched>
8111d230:	00001306 	br	8111d280 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d234:	0005303a 	rdctl	r2,status
8111d238:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d23c:	e0fff817 	ldw	r3,-32(fp)
8111d240:	00bfff84 	movi	r2,-2
8111d244:	1884703a 	and	r2,r3,r2
8111d248:	1001703a 	wrctl	status,r2
  
  return context;
8111d24c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8111d250:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
8111d254:	e0fffd03 	ldbu	r3,-12(fp)
8111d258:	00a044f4 	movhi	r2,33043
8111d25c:	10ba0c04 	addi	r2,r2,-6096
8111d260:	18c7883a 	add	r3,r3,r3
8111d264:	18c7883a 	add	r3,r3,r3
8111d268:	10c5883a 	add	r2,r2,r3
8111d26c:	10000015 	stw	zero,0(r2)
8111d270:	e0bff117 	ldw	r2,-60(fp)
8111d274:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d278:	e0bff417 	ldw	r2,-48(fp)
8111d27c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8111d280:	e0bff603 	ldbu	r2,-40(fp)
8111d284:	00000506 	br	8111d29c <OSTaskCreateExt+0x1d0>
8111d288:	e0bff117 	ldw	r2,-60(fp)
8111d28c:	e0bff715 	stw	r2,-36(fp)
8111d290:	e0bff717 	ldw	r2,-36(fp)
8111d294:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8111d298:	00800a04 	movi	r2,40
}
8111d29c:	e037883a 	mov	sp,fp
8111d2a0:	dfc00117 	ldw	ra,4(sp)
8111d2a4:	df000017 	ldw	fp,0(sp)
8111d2a8:	dec00204 	addi	sp,sp,8
8111d2ac:	f800283a 	ret

8111d2b0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
8111d2b0:	defff404 	addi	sp,sp,-48
8111d2b4:	dfc00b15 	stw	ra,44(sp)
8111d2b8:	df000a15 	stw	fp,40(sp)
8111d2bc:	df000a04 	addi	fp,sp,40
8111d2c0:	2005883a 	mov	r2,r4
8111d2c4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
8111d2c8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
8111d2cc:	d0a05403 	ldbu	r2,-32432(gp)
8111d2d0:	10803fcc 	andi	r2,r2,255
8111d2d4:	10000226 	beq	r2,zero,8111d2e0 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
8111d2d8:	00801004 	movi	r2,64
8111d2dc:	0000c006 	br	8111d5e0 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
8111d2e0:	e0bfff03 	ldbu	r2,-4(fp)
8111d2e4:	10800798 	cmpnei	r2,r2,30
8111d2e8:	1000021e 	bne	r2,zero,8111d2f4 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
8111d2ec:	00800f84 	movi	r2,62
8111d2f0:	0000bb06 	br	8111d5e0 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
8111d2f4:	e0bfff03 	ldbu	r2,-4(fp)
8111d2f8:	108007b0 	cmpltui	r2,r2,30
8111d2fc:	1000051e 	bne	r2,zero,8111d314 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
8111d300:	e0bfff03 	ldbu	r2,-4(fp)
8111d304:	10803fe0 	cmpeqi	r2,r2,255
8111d308:	1000021e 	bne	r2,zero,8111d314 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
8111d30c:	00800a84 	movi	r2,42
8111d310:	0000b306 	br	8111d5e0 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d314:	0005303a 	rdctl	r2,status
8111d318:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d31c:	e0fffe17 	ldw	r3,-8(fp)
8111d320:	00bfff84 	movi	r2,-2
8111d324:	1884703a 	and	r2,r3,r2
8111d328:	1001703a 	wrctl	status,r2
  
  return context;
8111d32c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
8111d330:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
8111d334:	e0bfff03 	ldbu	r2,-4(fp)
8111d338:	10803fd8 	cmpnei	r2,r2,255
8111d33c:	1000031e 	bne	r2,zero,8111d34c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
8111d340:	d0a05517 	ldw	r2,-32428(gp)
8111d344:	10800c83 	ldbu	r2,50(r2)
8111d348:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8111d34c:	e0ffff03 	ldbu	r3,-4(fp)
8111d350:	00a044f4 	movhi	r2,33043
8111d354:	10ba0c04 	addi	r2,r2,-6096
8111d358:	18c7883a 	add	r3,r3,r3
8111d35c:	18c7883a 	add	r3,r3,r3
8111d360:	10c5883a 	add	r2,r2,r3
8111d364:	10800017 	ldw	r2,0(r2)
8111d368:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
8111d36c:	e0bff817 	ldw	r2,-32(fp)
8111d370:	1000061e 	bne	r2,zero,8111d38c <OSTaskDel+0xdc>
8111d374:	e0bff617 	ldw	r2,-40(fp)
8111d378:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d37c:	e0bff717 	ldw	r2,-36(fp)
8111d380:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8111d384:	008010c4 	movi	r2,67
8111d388:	00009506 	br	8111d5e0 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
8111d38c:	e0bff817 	ldw	r2,-32(fp)
8111d390:	10800058 	cmpnei	r2,r2,1
8111d394:	1000061e 	bne	r2,zero,8111d3b0 <OSTaskDel+0x100>
8111d398:	e0bff617 	ldw	r2,-40(fp)
8111d39c:	e0bff915 	stw	r2,-28(fp)
8111d3a0:	e0bff917 	ldw	r2,-28(fp)
8111d3a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8111d3a8:	00800f44 	movi	r2,61
8111d3ac:	00008c06 	br	8111d5e0 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
8111d3b0:	e0bff817 	ldw	r2,-32(fp)
8111d3b4:	10800d03 	ldbu	r2,52(r2)
8111d3b8:	10c03fcc 	andi	r3,r2,255
8111d3bc:	e0bff817 	ldw	r2,-32(fp)
8111d3c0:	10800d03 	ldbu	r2,52(r2)
8111d3c4:	11003fcc 	andi	r4,r2,255
8111d3c8:	d0a05144 	addi	r2,gp,-32443
8111d3cc:	2085883a 	add	r2,r4,r2
8111d3d0:	10800003 	ldbu	r2,0(r2)
8111d3d4:	1009883a 	mov	r4,r2
8111d3d8:	e0bff817 	ldw	r2,-32(fp)
8111d3dc:	10800d43 	ldbu	r2,53(r2)
8111d3e0:	0084303a 	nor	r2,zero,r2
8111d3e4:	2084703a 	and	r2,r4,r2
8111d3e8:	1009883a 	mov	r4,r2
8111d3ec:	d0a05144 	addi	r2,gp,-32443
8111d3f0:	1885883a 	add	r2,r3,r2
8111d3f4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
8111d3f8:	e0bff817 	ldw	r2,-32(fp)
8111d3fc:	10800d03 	ldbu	r2,52(r2)
8111d400:	10c03fcc 	andi	r3,r2,255
8111d404:	d0a05144 	addi	r2,gp,-32443
8111d408:	1885883a 	add	r2,r3,r2
8111d40c:	10800003 	ldbu	r2,0(r2)
8111d410:	10803fcc 	andi	r2,r2,255
8111d414:	1000071e 	bne	r2,zero,8111d434 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
8111d418:	e0bff817 	ldw	r2,-32(fp)
8111d41c:	10800d83 	ldbu	r2,54(r2)
8111d420:	0084303a 	nor	r2,zero,r2
8111d424:	1007883a 	mov	r3,r2
8111d428:	d0a05103 	ldbu	r2,-32444(gp)
8111d42c:	1884703a 	and	r2,r3,r2
8111d430:	d0a05105 	stb	r2,-32444(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
8111d434:	e0bff817 	ldw	r2,-32(fp)
8111d438:	10800717 	ldw	r2,28(r2)
8111d43c:	10000526 	beq	r2,zero,8111d454 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
8111d440:	e0bff817 	ldw	r2,-32(fp)
8111d444:	10800717 	ldw	r2,28(r2)
8111d448:	100b883a 	mov	r5,r2
8111d44c:	e13ff817 	ldw	r4,-32(fp)
8111d450:	111819c0 	call	8111819c <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
8111d454:	e0bff817 	ldw	r2,-32(fp)
8111d458:	10800817 	ldw	r2,32(r2)
8111d45c:	10000526 	beq	r2,zero,8111d474 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8111d460:	e0bff817 	ldw	r2,-32(fp)
8111d464:	10800817 	ldw	r2,32(r2)
8111d468:	100b883a 	mov	r5,r2
8111d46c:	e13ff817 	ldw	r4,-32(fp)
8111d470:	11182540 	call	81118254 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
8111d474:	e0bff817 	ldw	r2,-32(fp)
8111d478:	10800a17 	ldw	r2,40(r2)
8111d47c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
8111d480:	e0bffb17 	ldw	r2,-20(fp)
8111d484:	10000226 	beq	r2,zero,8111d490 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
8111d488:	e13ffb17 	ldw	r4,-20(fp)
8111d48c:	111a6d40 	call	8111a6d4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
8111d490:	e0bff817 	ldw	r2,-32(fp)
8111d494:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
8111d498:	e0bff817 	ldw	r2,-32(fp)
8111d49c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8111d4a0:	e0bff817 	ldw	r2,-32(fp)
8111d4a4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
8111d4a8:	d0a04503 	ldbu	r2,-32492(gp)
8111d4ac:	10803fcc 	andi	r2,r2,255
8111d4b0:	10803fe0 	cmpeqi	r2,r2,255
8111d4b4:	1000031e 	bne	r2,zero,8111d4c4 <OSTaskDel+0x214>
        OSLockNesting++;
8111d4b8:	d0a04503 	ldbu	r2,-32492(gp)
8111d4bc:	10800044 	addi	r2,r2,1
8111d4c0:	d0a04505 	stb	r2,-32492(gp)
8111d4c4:	e0bff617 	ldw	r2,-40(fp)
8111d4c8:	e0bffd15 	stw	r2,-12(fp)
8111d4cc:	e0bffd17 	ldw	r2,-12(fp)
8111d4d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
8111d4d4:	1117d840 	call	81117d84 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d4d8:	0005303a 	rdctl	r2,status
8111d4dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d4e0:	e0fffa17 	ldw	r3,-24(fp)
8111d4e4:	00bfff84 	movi	r2,-2
8111d4e8:	1884703a 	and	r2,r3,r2
8111d4ec:	1001703a 	wrctl	status,r2
  
  return context;
8111d4f0:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
8111d4f4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
8111d4f8:	d0a04503 	ldbu	r2,-32492(gp)
8111d4fc:	10803fcc 	andi	r2,r2,255
8111d500:	10000326 	beq	r2,zero,8111d510 <OSTaskDel+0x260>
        OSLockNesting--;
8111d504:	d0a04503 	ldbu	r2,-32492(gp)
8111d508:	10bfffc4 	addi	r2,r2,-1
8111d50c:	d0a04505 	stb	r2,-32492(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
8111d510:	e13ff817 	ldw	r4,-32(fp)
8111d514:	1123fd40 	call	81123fd4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
8111d518:	d0a04d43 	ldbu	r2,-32459(gp)
8111d51c:	10bfffc4 	addi	r2,r2,-1
8111d520:	d0a04d45 	stb	r2,-32459(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
8111d524:	e0ffff03 	ldbu	r3,-4(fp)
8111d528:	00a044f4 	movhi	r2,33043
8111d52c:	10ba0c04 	addi	r2,r2,-6096
8111d530:	18c7883a 	add	r3,r3,r3
8111d534:	18c7883a 	add	r3,r3,r3
8111d538:	10c5883a 	add	r2,r2,r3
8111d53c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
8111d540:	e0bff817 	ldw	r2,-32(fp)
8111d544:	10800617 	ldw	r2,24(r2)
8111d548:	1000071e 	bne	r2,zero,8111d568 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
8111d54c:	e0bff817 	ldw	r2,-32(fp)
8111d550:	10800517 	ldw	r2,20(r2)
8111d554:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
8111d558:	e0bff817 	ldw	r2,-32(fp)
8111d55c:	10800517 	ldw	r2,20(r2)
8111d560:	d0a04815 	stw	r2,-32480(gp)
8111d564:	00000a06 	br	8111d590 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
8111d568:	e0bff817 	ldw	r2,-32(fp)
8111d56c:	10800617 	ldw	r2,24(r2)
8111d570:	e0fff817 	ldw	r3,-32(fp)
8111d574:	18c00517 	ldw	r3,20(r3)
8111d578:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
8111d57c:	e0bff817 	ldw	r2,-32(fp)
8111d580:	10800517 	ldw	r2,20(r2)
8111d584:	e0fff817 	ldw	r3,-32(fp)
8111d588:	18c00617 	ldw	r3,24(r3)
8111d58c:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
8111d590:	d0e04c17 	ldw	r3,-32464(gp)
8111d594:	e0bff817 	ldw	r2,-32(fp)
8111d598:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
8111d59c:	e0bff817 	ldw	r2,-32(fp)
8111d5a0:	d0a04c15 	stw	r2,-32464(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
8111d5a4:	e0bff817 	ldw	r2,-32(fp)
8111d5a8:	00c00fc4 	movi	r3,63
8111d5ac:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8111d5b0:	e0bff817 	ldw	r2,-32(fp)
8111d5b4:	10001345 	stb	zero,77(r2)
8111d5b8:	e0bff617 	ldw	r2,-40(fp)
8111d5bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d5c0:	e0bffc17 	ldw	r2,-16(fp)
8111d5c4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8111d5c8:	d0a04543 	ldbu	r2,-32491(gp)
8111d5cc:	10803fcc 	andi	r2,r2,255
8111d5d0:	10800058 	cmpnei	r2,r2,1
8111d5d4:	1000011e 	bne	r2,zero,8111d5dc <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
8111d5d8:	11187f00 	call	811187f0 <OS_Sched>
    }
    return (OS_ERR_NONE);
8111d5dc:	0005883a 	mov	r2,zero
}
8111d5e0:	e037883a 	mov	sp,fp
8111d5e4:	dfc00117 	ldw	ra,4(sp)
8111d5e8:	df000017 	ldw	fp,0(sp)
8111d5ec:	dec00204 	addi	sp,sp,8
8111d5f0:	f800283a 	ret

8111d5f4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
8111d5f4:	defff504 	addi	sp,sp,-44
8111d5f8:	df000a15 	stw	fp,40(sp)
8111d5fc:	df000a04 	addi	fp,sp,40
8111d600:	2005883a 	mov	r2,r4
8111d604:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111d608:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
8111d60c:	e0bfff03 	ldbu	r2,-4(fp)
8111d610:	10800798 	cmpnei	r2,r2,30
8111d614:	1000021e 	bne	r2,zero,8111d620 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
8111d618:	00800f84 	movi	r2,62
8111d61c:	00004506 	br	8111d734 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8111d620:	e0bfff03 	ldbu	r2,-4(fp)
8111d624:	108007b0 	cmpltui	r2,r2,30
8111d628:	1000051e 	bne	r2,zero,8111d640 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
8111d62c:	e0bfff03 	ldbu	r2,-4(fp)
8111d630:	10803fe0 	cmpeqi	r2,r2,255
8111d634:	1000021e 	bne	r2,zero,8111d640 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
8111d638:	00800a84 	movi	r2,42
8111d63c:	00003d06 	br	8111d734 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
8111d640:	e0bfff03 	ldbu	r2,-4(fp)
8111d644:	10803fd8 	cmpnei	r2,r2,255
8111d648:	1000111e 	bne	r2,zero,8111d690 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d64c:	0005303a 	rdctl	r2,status
8111d650:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d654:	e0fff917 	ldw	r3,-28(fp)
8111d658:	00bfff84 	movi	r2,-2
8111d65c:	1884703a 	and	r2,r3,r2
8111d660:	1001703a 	wrctl	status,r2
  
  return context;
8111d664:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
8111d668:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
8111d66c:	d0a05517 	ldw	r2,-32428(gp)
8111d670:	10800dc3 	ldbu	r2,55(r2)
8111d674:	e0bff805 	stb	r2,-32(fp)
8111d678:	e0bff617 	ldw	r2,-40(fp)
8111d67c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d680:	e0bffe17 	ldw	r2,-8(fp)
8111d684:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
8111d688:	e0bff803 	ldbu	r2,-32(fp)
8111d68c:	00002906 	br	8111d734 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d690:	0005303a 	rdctl	r2,status
8111d694:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d698:	e0fff717 	ldw	r3,-36(fp)
8111d69c:	00bfff84 	movi	r2,-2
8111d6a0:	1884703a 	and	r2,r3,r2
8111d6a4:	1001703a 	wrctl	status,r2
  
  return context;
8111d6a8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
8111d6ac:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
8111d6b0:	e0ffff03 	ldbu	r3,-4(fp)
8111d6b4:	00a044f4 	movhi	r2,33043
8111d6b8:	10ba0c04 	addi	r2,r2,-6096
8111d6bc:	18c7883a 	add	r3,r3,r3
8111d6c0:	18c7883a 	add	r3,r3,r3
8111d6c4:	10c5883a 	add	r2,r2,r3
8111d6c8:	10800017 	ldw	r2,0(r2)
8111d6cc:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
8111d6d0:	e0bffb17 	ldw	r2,-20(fp)
8111d6d4:	1000061e 	bne	r2,zero,8111d6f0 <OSTaskDelReq+0xfc>
8111d6d8:	e0bff617 	ldw	r2,-40(fp)
8111d6dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d6e0:	e0bffa17 	ldw	r2,-24(fp)
8111d6e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
8111d6e8:	008010c4 	movi	r2,67
8111d6ec:	00001106 	br	8111d734 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
8111d6f0:	e0bffb17 	ldw	r2,-20(fp)
8111d6f4:	10800058 	cmpnei	r2,r2,1
8111d6f8:	1000061e 	bne	r2,zero,8111d714 <OSTaskDelReq+0x120>
8111d6fc:	e0bff617 	ldw	r2,-40(fp)
8111d700:	e0bffc15 	stw	r2,-16(fp)
8111d704:	e0bffc17 	ldw	r2,-16(fp)
8111d708:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8111d70c:	00800f44 	movi	r2,61
8111d710:	00000806 	br	8111d734 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
8111d714:	e0bffb17 	ldw	r2,-20(fp)
8111d718:	00c00fc4 	movi	r3,63
8111d71c:	10c00dc5 	stb	r3,55(r2)
8111d720:	e0bff617 	ldw	r2,-40(fp)
8111d724:	e0bffd15 	stw	r2,-12(fp)
8111d728:	e0bffd17 	ldw	r2,-12(fp)
8111d72c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8111d730:	0005883a 	mov	r2,zero
}
8111d734:	e037883a 	mov	sp,fp
8111d738:	df000017 	ldw	fp,0(sp)
8111d73c:	dec00104 	addi	sp,sp,4
8111d740:	f800283a 	ret

8111d744 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
8111d744:	defff404 	addi	sp,sp,-48
8111d748:	dfc00b15 	stw	ra,44(sp)
8111d74c:	df000a15 	stw	fp,40(sp)
8111d750:	df000a04 	addi	fp,sp,40
8111d754:	2005883a 	mov	r2,r4
8111d758:	e17ffe15 	stw	r5,-8(fp)
8111d75c:	e1bfff15 	stw	r6,-4(fp)
8111d760:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
8111d764:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
8111d768:	e0bfff17 	ldw	r2,-4(fp)
8111d76c:	1000021e 	bne	r2,zero,8111d778 <OSTaskNameGet+0x34>
        return (0);
8111d770:	0005883a 	mov	r2,zero
8111d774:	00005406 	br	8111d8c8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
8111d778:	e0bffd03 	ldbu	r2,-12(fp)
8111d77c:	108007f0 	cmpltui	r2,r2,31
8111d780:	1000081e 	bne	r2,zero,8111d7a4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
8111d784:	e0bffd03 	ldbu	r2,-12(fp)
8111d788:	10803fe0 	cmpeqi	r2,r2,255
8111d78c:	1000051e 	bne	r2,zero,8111d7a4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
8111d790:	e0bfff17 	ldw	r2,-4(fp)
8111d794:	00c00a84 	movi	r3,42
8111d798:	10c00005 	stb	r3,0(r2)
            return (0);
8111d79c:	0005883a 	mov	r2,zero
8111d7a0:	00004906 	br	8111d8c8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
8111d7a4:	e0bffe17 	ldw	r2,-8(fp)
8111d7a8:	1000051e 	bne	r2,zero,8111d7c0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
8111d7ac:	e0bfff17 	ldw	r2,-4(fp)
8111d7b0:	00c00304 	movi	r3,12
8111d7b4:	10c00005 	stb	r3,0(r2)
        return (0);
8111d7b8:	0005883a 	mov	r2,zero
8111d7bc:	00004206 	br	8111d8c8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
8111d7c0:	d0a05403 	ldbu	r2,-32432(gp)
8111d7c4:	10803fcc 	andi	r2,r2,255
8111d7c8:	10000526 	beq	r2,zero,8111d7e0 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
8111d7cc:	e0bfff17 	ldw	r2,-4(fp)
8111d7d0:	00c00444 	movi	r3,17
8111d7d4:	10c00005 	stb	r3,0(r2)
        return (0);
8111d7d8:	0005883a 	mov	r2,zero
8111d7dc:	00003a06 	br	8111d8c8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d7e0:	0005303a 	rdctl	r2,status
8111d7e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d7e8:	e0fffc17 	ldw	r3,-16(fp)
8111d7ec:	00bfff84 	movi	r2,-2
8111d7f0:	1884703a 	and	r2,r3,r2
8111d7f4:	1001703a 	wrctl	status,r2
  
  return context;
8111d7f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111d7fc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
8111d800:	e0bffd03 	ldbu	r2,-12(fp)
8111d804:	10803fd8 	cmpnei	r2,r2,255
8111d808:	1000031e 	bne	r2,zero,8111d818 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
8111d80c:	d0a05517 	ldw	r2,-32428(gp)
8111d810:	10800c83 	ldbu	r2,50(r2)
8111d814:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8111d818:	e0fffd03 	ldbu	r3,-12(fp)
8111d81c:	00a044f4 	movhi	r2,33043
8111d820:	10ba0c04 	addi	r2,r2,-6096
8111d824:	18c7883a 	add	r3,r3,r3
8111d828:	18c7883a 	add	r3,r3,r3
8111d82c:	10c5883a 	add	r2,r2,r3
8111d830:	10800017 	ldw	r2,0(r2)
8111d834:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
8111d838:	e0bff817 	ldw	r2,-32(fp)
8111d83c:	1000091e 	bne	r2,zero,8111d864 <OSTaskNameGet+0x120>
8111d840:	e0bff617 	ldw	r2,-40(fp)
8111d844:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d848:	e0bff717 	ldw	r2,-36(fp)
8111d84c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
8111d850:	e0bfff17 	ldw	r2,-4(fp)
8111d854:	00c010c4 	movi	r3,67
8111d858:	10c00005 	stb	r3,0(r2)
        return (0);
8111d85c:	0005883a 	mov	r2,zero
8111d860:	00001906 	br	8111d8c8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
8111d864:	e0bff817 	ldw	r2,-32(fp)
8111d868:	10800058 	cmpnei	r2,r2,1
8111d86c:	1000091e 	bne	r2,zero,8111d894 <OSTaskNameGet+0x150>
8111d870:	e0bff617 	ldw	r2,-40(fp)
8111d874:	e0bff915 	stw	r2,-28(fp)
8111d878:	e0bff917 	ldw	r2,-28(fp)
8111d87c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
8111d880:	e0bfff17 	ldw	r2,-4(fp)
8111d884:	00c010c4 	movi	r3,67
8111d888:	10c00005 	stb	r3,0(r2)
        return (0);
8111d88c:	0005883a 	mov	r2,zero
8111d890:	00000d06 	br	8111d8c8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
8111d894:	e0bff817 	ldw	r2,-32(fp)
8111d898:	10801304 	addi	r2,r2,76
8111d89c:	100b883a 	mov	r5,r2
8111d8a0:	e13ffe17 	ldw	r4,-8(fp)
8111d8a4:	11189340 	call	81118934 <OS_StrCopy>
8111d8a8:	e0bffb05 	stb	r2,-20(fp)
8111d8ac:	e0bff617 	ldw	r2,-40(fp)
8111d8b0:	e0bffa15 	stw	r2,-24(fp)
8111d8b4:	e0bffa17 	ldw	r2,-24(fp)
8111d8b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8111d8bc:	e0bfff17 	ldw	r2,-4(fp)
8111d8c0:	10000005 	stb	zero,0(r2)
    return (len);
8111d8c4:	e0bffb03 	ldbu	r2,-20(fp)
}
8111d8c8:	e037883a 	mov	sp,fp
8111d8cc:	dfc00117 	ldw	ra,4(sp)
8111d8d0:	df000017 	ldw	fp,0(sp)
8111d8d4:	dec00204 	addi	sp,sp,8
8111d8d8:	f800283a 	ret

8111d8dc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
8111d8dc:	defff304 	addi	sp,sp,-52
8111d8e0:	dfc00c15 	stw	ra,48(sp)
8111d8e4:	df000b15 	stw	fp,44(sp)
8111d8e8:	df000b04 	addi	fp,sp,44
8111d8ec:	2005883a 	mov	r2,r4
8111d8f0:	e17ffe15 	stw	r5,-8(fp)
8111d8f4:	e1bfff15 	stw	r6,-4(fp)
8111d8f8:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8111d8fc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8111d900:	e0bfff17 	ldw	r2,-4(fp)
8111d904:	10005c26 	beq	r2,zero,8111da78 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
8111d908:	e0bffd03 	ldbu	r2,-12(fp)
8111d90c:	108007f0 	cmpltui	r2,r2,31
8111d910:	1000071e 	bne	r2,zero,8111d930 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
8111d914:	e0bffd03 	ldbu	r2,-12(fp)
8111d918:	10803fe0 	cmpeqi	r2,r2,255
8111d91c:	1000041e 	bne	r2,zero,8111d930 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
8111d920:	e0bfff17 	ldw	r2,-4(fp)
8111d924:	00c00a84 	movi	r3,42
8111d928:	10c00005 	stb	r3,0(r2)
            return;
8111d92c:	00005306 	br	8111da7c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
8111d930:	e0bffe17 	ldw	r2,-8(fp)
8111d934:	1000041e 	bne	r2,zero,8111d948 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
8111d938:	e0bfff17 	ldw	r2,-4(fp)
8111d93c:	00c00304 	movi	r3,12
8111d940:	10c00005 	stb	r3,0(r2)
        return;
8111d944:	00004d06 	br	8111da7c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
8111d948:	d0a05403 	ldbu	r2,-32432(gp)
8111d94c:	10803fcc 	andi	r2,r2,255
8111d950:	10000426 	beq	r2,zero,8111d964 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
8111d954:	e0bfff17 	ldw	r2,-4(fp)
8111d958:	00c00484 	movi	r3,18
8111d95c:	10c00005 	stb	r3,0(r2)
        return;
8111d960:	00004606 	br	8111da7c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111d964:	0005303a 	rdctl	r2,status
8111d968:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111d96c:	e0fffc17 	ldw	r3,-16(fp)
8111d970:	00bfff84 	movi	r2,-2
8111d974:	1884703a 	and	r2,r3,r2
8111d978:	1001703a 	wrctl	status,r2
  
  return context;
8111d97c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8111d980:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
8111d984:	e0bffd03 	ldbu	r2,-12(fp)
8111d988:	10803fd8 	cmpnei	r2,r2,255
8111d98c:	1000031e 	bne	r2,zero,8111d99c <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
8111d990:	d0a05517 	ldw	r2,-32428(gp)
8111d994:	10800c83 	ldbu	r2,50(r2)
8111d998:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8111d99c:	e0fffd03 	ldbu	r3,-12(fp)
8111d9a0:	00a044f4 	movhi	r2,33043
8111d9a4:	10ba0c04 	addi	r2,r2,-6096
8111d9a8:	18c7883a 	add	r3,r3,r3
8111d9ac:	18c7883a 	add	r3,r3,r3
8111d9b0:	10c5883a 	add	r2,r2,r3
8111d9b4:	10800017 	ldw	r2,0(r2)
8111d9b8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
8111d9bc:	e0bff717 	ldw	r2,-36(fp)
8111d9c0:	1000081e 	bne	r2,zero,8111d9e4 <OSTaskNameSet+0x108>
8111d9c4:	e0bff517 	ldw	r2,-44(fp)
8111d9c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111d9cc:	e0bff617 	ldw	r2,-40(fp)
8111d9d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
8111d9d4:	e0bfff17 	ldw	r2,-4(fp)
8111d9d8:	00c010c4 	movi	r3,67
8111d9dc:	10c00005 	stb	r3,0(r2)
        return;
8111d9e0:	00002606 	br	8111da7c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
8111d9e4:	e0bff717 	ldw	r2,-36(fp)
8111d9e8:	10800058 	cmpnei	r2,r2,1
8111d9ec:	1000081e 	bne	r2,zero,8111da10 <OSTaskNameSet+0x134>
8111d9f0:	e0bff517 	ldw	r2,-44(fp)
8111d9f4:	e0bff815 	stw	r2,-32(fp)
8111d9f8:	e0bff817 	ldw	r2,-32(fp)
8111d9fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
8111da00:	e0bfff17 	ldw	r2,-4(fp)
8111da04:	00c010c4 	movi	r3,67
8111da08:	10c00005 	stb	r3,0(r2)
        return;
8111da0c:	00001b06 	br	8111da7c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
8111da10:	e13ffe17 	ldw	r4,-8(fp)
8111da14:	11189a80 	call	811189a8 <OS_StrLen>
8111da18:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
8111da1c:	e0bffa03 	ldbu	r2,-24(fp)
8111da20:	10800830 	cmpltui	r2,r2,32
8111da24:	1000081e 	bne	r2,zero,8111da48 <OSTaskNameSet+0x16c>
8111da28:	e0bff517 	ldw	r2,-44(fp)
8111da2c:	e0bff915 	stw	r2,-28(fp)
8111da30:	e0bff917 	ldw	r2,-28(fp)
8111da34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
8111da38:	e0bfff17 	ldw	r2,-4(fp)
8111da3c:	00c01044 	movi	r3,65
8111da40:	10c00005 	stb	r3,0(r2)
        return;
8111da44:	00000d06 	br	8111da7c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
8111da48:	e0bff717 	ldw	r2,-36(fp)
8111da4c:	10801304 	addi	r2,r2,76
8111da50:	e17ffe17 	ldw	r5,-8(fp)
8111da54:	1009883a 	mov	r4,r2
8111da58:	11189340 	call	81118934 <OS_StrCopy>
8111da5c:	e0bff517 	ldw	r2,-44(fp)
8111da60:	e0bffb15 	stw	r2,-20(fp)
8111da64:	e0bffb17 	ldw	r2,-20(fp)
8111da68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8111da6c:	e0bfff17 	ldw	r2,-4(fp)
8111da70:	10000005 	stb	zero,0(r2)
8111da74:	00000106 	br	8111da7c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
8111da78:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8111da7c:	e037883a 	mov	sp,fp
8111da80:	dfc00117 	ldw	ra,4(sp)
8111da84:	df000017 	ldw	fp,0(sp)
8111da88:	dec00204 	addi	sp,sp,8
8111da8c:	f800283a 	ret

8111da90 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
8111da90:	defff404 	addi	sp,sp,-48
8111da94:	dfc00b15 	stw	ra,44(sp)
8111da98:	df000a15 	stw	fp,40(sp)
8111da9c:	df000a04 	addi	fp,sp,40
8111daa0:	2005883a 	mov	r2,r4
8111daa4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8111daa8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
8111daac:	e0bfff03 	ldbu	r2,-4(fp)
8111dab0:	108007b0 	cmpltui	r2,r2,30
8111dab4:	1000021e 	bne	r2,zero,8111dac0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
8111dab8:	00800a84 	movi	r2,42
8111dabc:	00006406 	br	8111dc50 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111dac0:	0005303a 	rdctl	r2,status
8111dac4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111dac8:	e0fffe17 	ldw	r3,-8(fp)
8111dacc:	00bfff84 	movi	r2,-2
8111dad0:	1884703a 	and	r2,r3,r2
8111dad4:	1001703a 	wrctl	status,r2
  
  return context;
8111dad8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8111dadc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
8111dae0:	e0ffff03 	ldbu	r3,-4(fp)
8111dae4:	00a044f4 	movhi	r2,33043
8111dae8:	10ba0c04 	addi	r2,r2,-6096
8111daec:	18c7883a 	add	r3,r3,r3
8111daf0:	18c7883a 	add	r3,r3,r3
8111daf4:	10c5883a 	add	r2,r2,r3
8111daf8:	10800017 	ldw	r2,0(r2)
8111dafc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
8111db00:	e0bff817 	ldw	r2,-32(fp)
8111db04:	1000061e 	bne	r2,zero,8111db20 <OSTaskResume+0x90>
8111db08:	e0bff617 	ldw	r2,-40(fp)
8111db0c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111db10:	e0bff717 	ldw	r2,-36(fp)
8111db14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
8111db18:	00801184 	movi	r2,70
8111db1c:	00004c06 	br	8111dc50 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
8111db20:	e0bff817 	ldw	r2,-32(fp)
8111db24:	10800058 	cmpnei	r2,r2,1
8111db28:	1000061e 	bne	r2,zero,8111db44 <OSTaskResume+0xb4>
8111db2c:	e0bff617 	ldw	r2,-40(fp)
8111db30:	e0bff915 	stw	r2,-28(fp)
8111db34:	e0bff917 	ldw	r2,-28(fp)
8111db38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8111db3c:	008010c4 	movi	r2,67
8111db40:	00004306 	br	8111dc50 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
8111db44:	e0bff817 	ldw	r2,-32(fp)
8111db48:	10800c03 	ldbu	r2,48(r2)
8111db4c:	10803fcc 	andi	r2,r2,255
8111db50:	1080020c 	andi	r2,r2,8
8111db54:	10003926 	beq	r2,zero,8111dc3c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
8111db58:	e0bff817 	ldw	r2,-32(fp)
8111db5c:	10c00c03 	ldbu	r3,48(r2)
8111db60:	00bffdc4 	movi	r2,-9
8111db64:	1884703a 	and	r2,r3,r2
8111db68:	1007883a 	mov	r3,r2
8111db6c:	e0bff817 	ldw	r2,-32(fp)
8111db70:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
8111db74:	e0bff817 	ldw	r2,-32(fp)
8111db78:	10800c03 	ldbu	r2,48(r2)
8111db7c:	10803fcc 	andi	r2,r2,255
8111db80:	1000281e 	bne	r2,zero,8111dc24 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
8111db84:	e0bff817 	ldw	r2,-32(fp)
8111db88:	10800b8b 	ldhu	r2,46(r2)
8111db8c:	10bfffcc 	andi	r2,r2,65535
8111db90:	10001f1e 	bne	r2,zero,8111dc10 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
8111db94:	e0bff817 	ldw	r2,-32(fp)
8111db98:	10c00d83 	ldbu	r3,54(r2)
8111db9c:	d0a05103 	ldbu	r2,-32444(gp)
8111dba0:	1884b03a 	or	r2,r3,r2
8111dba4:	d0a05105 	stb	r2,-32444(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8111dba8:	e0bff817 	ldw	r2,-32(fp)
8111dbac:	10800d03 	ldbu	r2,52(r2)
8111dbb0:	10c03fcc 	andi	r3,r2,255
8111dbb4:	e0bff817 	ldw	r2,-32(fp)
8111dbb8:	10800d03 	ldbu	r2,52(r2)
8111dbbc:	11003fcc 	andi	r4,r2,255
8111dbc0:	d0a05144 	addi	r2,gp,-32443
8111dbc4:	2085883a 	add	r2,r4,r2
8111dbc8:	11000003 	ldbu	r4,0(r2)
8111dbcc:	e0bff817 	ldw	r2,-32(fp)
8111dbd0:	10800d43 	ldbu	r2,53(r2)
8111dbd4:	2084b03a 	or	r2,r4,r2
8111dbd8:	1009883a 	mov	r4,r2
8111dbdc:	d0a05144 	addi	r2,gp,-32443
8111dbe0:	1885883a 	add	r2,r3,r2
8111dbe4:	11000005 	stb	r4,0(r2)
8111dbe8:	e0bff617 	ldw	r2,-40(fp)
8111dbec:	e0bffa15 	stw	r2,-24(fp)
8111dbf0:	e0bffa17 	ldw	r2,-24(fp)
8111dbf4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
8111dbf8:	d0a04543 	ldbu	r2,-32491(gp)
8111dbfc:	10803fcc 	andi	r2,r2,255
8111dc00:	10800058 	cmpnei	r2,r2,1
8111dc04:	10000b1e 	bne	r2,zero,8111dc34 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
8111dc08:	11187f00 	call	811187f0 <OS_Sched>
8111dc0c:	00000906 	br	8111dc34 <OSTaskResume+0x1a4>
8111dc10:	e0bff617 	ldw	r2,-40(fp)
8111dc14:	e0bffb15 	stw	r2,-20(fp)
8111dc18:	e0bffb17 	ldw	r2,-20(fp)
8111dc1c:	1001703a 	wrctl	status,r2
8111dc20:	00000406 	br	8111dc34 <OSTaskResume+0x1a4>
8111dc24:	e0bff617 	ldw	r2,-40(fp)
8111dc28:	e0bffc15 	stw	r2,-16(fp)
8111dc2c:	e0bffc17 	ldw	r2,-16(fp)
8111dc30:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
8111dc34:	0005883a 	mov	r2,zero
8111dc38:	00000506 	br	8111dc50 <OSTaskResume+0x1c0>
8111dc3c:	e0bff617 	ldw	r2,-40(fp)
8111dc40:	e0bffd15 	stw	r2,-12(fp)
8111dc44:	e0bffd17 	ldw	r2,-12(fp)
8111dc48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
8111dc4c:	00801104 	movi	r2,68
}
8111dc50:	e037883a 	mov	sp,fp
8111dc54:	dfc00117 	ldw	ra,4(sp)
8111dc58:	df000017 	ldw	fp,0(sp)
8111dc5c:	dec00204 	addi	sp,sp,8
8111dc60:	f800283a 	ret

8111dc64 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
8111dc64:	defff304 	addi	sp,sp,-52
8111dc68:	df000c15 	stw	fp,48(sp)
8111dc6c:	df000c04 	addi	fp,sp,48
8111dc70:	2005883a 	mov	r2,r4
8111dc74:	e17fff15 	stw	r5,-4(fp)
8111dc78:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8111dc7c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
8111dc80:	e0bffe03 	ldbu	r2,-8(fp)
8111dc84:	108007f0 	cmpltui	r2,r2,31
8111dc88:	1000051e 	bne	r2,zero,8111dca0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
8111dc8c:	e0bffe03 	ldbu	r2,-8(fp)
8111dc90:	10803fe0 	cmpeqi	r2,r2,255
8111dc94:	1000021e 	bne	r2,zero,8111dca0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
8111dc98:	00800a84 	movi	r2,42
8111dc9c:	00005d06 	br	8111de14 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
8111dca0:	e0bfff17 	ldw	r2,-4(fp)
8111dca4:	1000021e 	bne	r2,zero,8111dcb0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
8111dca8:	00800244 	movi	r2,9
8111dcac:	00005906 	br	8111de14 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
8111dcb0:	e0bfff17 	ldw	r2,-4(fp)
8111dcb4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
8111dcb8:	e0bfff17 	ldw	r2,-4(fp)
8111dcbc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111dcc0:	0005303a 	rdctl	r2,status
8111dcc4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111dcc8:	e0fffd17 	ldw	r3,-12(fp)
8111dccc:	00bfff84 	movi	r2,-2
8111dcd0:	1884703a 	and	r2,r3,r2
8111dcd4:	1001703a 	wrctl	status,r2
  
  return context;
8111dcd8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
8111dcdc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
8111dce0:	e0bffe03 	ldbu	r2,-8(fp)
8111dce4:	10803fd8 	cmpnei	r2,r2,255
8111dce8:	1000031e 	bne	r2,zero,8111dcf8 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
8111dcec:	d0a05517 	ldw	r2,-32428(gp)
8111dcf0:	10800c83 	ldbu	r2,50(r2)
8111dcf4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8111dcf8:	e0fffe03 	ldbu	r3,-8(fp)
8111dcfc:	00a044f4 	movhi	r2,33043
8111dd00:	10ba0c04 	addi	r2,r2,-6096
8111dd04:	18c7883a 	add	r3,r3,r3
8111dd08:	18c7883a 	add	r3,r3,r3
8111dd0c:	10c5883a 	add	r2,r2,r3
8111dd10:	10800017 	ldw	r2,0(r2)
8111dd14:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
8111dd18:	e0bff817 	ldw	r2,-32(fp)
8111dd1c:	1000061e 	bne	r2,zero,8111dd38 <OSTaskStkChk+0xd4>
8111dd20:	e0bff617 	ldw	r2,-40(fp)
8111dd24:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111dd28:	e0bff717 	ldw	r2,-36(fp)
8111dd2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8111dd30:	008010c4 	movi	r2,67
8111dd34:	00003706 	br	8111de14 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
8111dd38:	e0bff817 	ldw	r2,-32(fp)
8111dd3c:	10800058 	cmpnei	r2,r2,1
8111dd40:	1000061e 	bne	r2,zero,8111dd5c <OSTaskStkChk+0xf8>
8111dd44:	e0bff617 	ldw	r2,-40(fp)
8111dd48:	e0bff915 	stw	r2,-28(fp)
8111dd4c:	e0bff917 	ldw	r2,-28(fp)
8111dd50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8111dd54:	008010c4 	movi	r2,67
8111dd58:	00002e06 	br	8111de14 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
8111dd5c:	e0bff817 	ldw	r2,-32(fp)
8111dd60:	1080040b 	ldhu	r2,16(r2)
8111dd64:	10bfffcc 	andi	r2,r2,65535
8111dd68:	1080004c 	andi	r2,r2,1
8111dd6c:	1000061e 	bne	r2,zero,8111dd88 <OSTaskStkChk+0x124>
8111dd70:	e0bff617 	ldw	r2,-40(fp)
8111dd74:	e0bffa15 	stw	r2,-24(fp)
8111dd78:	e0bffa17 	ldw	r2,-24(fp)
8111dd7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
8111dd80:	00801144 	movi	r2,69
8111dd84:	00002306 	br	8111de14 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
8111dd88:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
8111dd8c:	e0bff817 	ldw	r2,-32(fp)
8111dd90:	10800317 	ldw	r2,12(r2)
8111dd94:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
8111dd98:	e0bff817 	ldw	r2,-32(fp)
8111dd9c:	10800217 	ldw	r2,8(r2)
8111dda0:	e0bff415 	stw	r2,-48(fp)
8111dda4:	e0bff617 	ldw	r2,-40(fp)
8111dda8:	e0bffb15 	stw	r2,-20(fp)
8111ddac:	e0bffb17 	ldw	r2,-20(fp)
8111ddb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8111ddb4:	00000306 	br	8111ddc4 <OSTaskStkChk+0x160>
        nfree++;
8111ddb8:	e0bff517 	ldw	r2,-44(fp)
8111ddbc:	10800044 	addi	r2,r2,1
8111ddc0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8111ddc4:	e0bff417 	ldw	r2,-48(fp)
8111ddc8:	10c00104 	addi	r3,r2,4
8111ddcc:	e0fff415 	stw	r3,-48(fp)
8111ddd0:	10800017 	ldw	r2,0(r2)
8111ddd4:	103ff826 	beq	r2,zero,8111ddb8 <__reset+0xfb0fddb8>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
8111ddd8:	e0bff517 	ldw	r2,-44(fp)
8111dddc:	1085883a 	add	r2,r2,r2
8111dde0:	1085883a 	add	r2,r2,r2
8111dde4:	1007883a 	mov	r3,r2
8111dde8:	e0bfff17 	ldw	r2,-4(fp)
8111ddec:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
8111ddf0:	e0fffc17 	ldw	r3,-16(fp)
8111ddf4:	e0bff517 	ldw	r2,-44(fp)
8111ddf8:	1885c83a 	sub	r2,r3,r2
8111ddfc:	1085883a 	add	r2,r2,r2
8111de00:	1085883a 	add	r2,r2,r2
8111de04:	1007883a 	mov	r3,r2
8111de08:	e0bfff17 	ldw	r2,-4(fp)
8111de0c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
8111de10:	0005883a 	mov	r2,zero
}
8111de14:	e037883a 	mov	sp,fp
8111de18:	df000017 	ldw	fp,0(sp)
8111de1c:	dec00104 	addi	sp,sp,4
8111de20:	f800283a 	ret

8111de24 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
8111de24:	defff504 	addi	sp,sp,-44
8111de28:	dfc00a15 	stw	ra,40(sp)
8111de2c:	df000915 	stw	fp,36(sp)
8111de30:	df000904 	addi	fp,sp,36
8111de34:	2005883a 	mov	r2,r4
8111de38:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111de3c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
8111de40:	e0bfff03 	ldbu	r2,-4(fp)
8111de44:	10800798 	cmpnei	r2,r2,30
8111de48:	1000021e 	bne	r2,zero,8111de54 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
8111de4c:	008011c4 	movi	r2,71
8111de50:	00006806 	br	8111dff4 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8111de54:	e0bfff03 	ldbu	r2,-4(fp)
8111de58:	108007b0 	cmpltui	r2,r2,30
8111de5c:	1000051e 	bne	r2,zero,8111de74 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
8111de60:	e0bfff03 	ldbu	r2,-4(fp)
8111de64:	10803fe0 	cmpeqi	r2,r2,255
8111de68:	1000021e 	bne	r2,zero,8111de74 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
8111de6c:	00800a84 	movi	r2,42
8111de70:	00006006 	br	8111dff4 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111de74:	0005303a 	rdctl	r2,status
8111de78:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111de7c:	e0fffe17 	ldw	r3,-8(fp)
8111de80:	00bfff84 	movi	r2,-2
8111de84:	1884703a 	and	r2,r3,r2
8111de88:	1001703a 	wrctl	status,r2
  
  return context;
8111de8c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
8111de90:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
8111de94:	e0bfff03 	ldbu	r2,-4(fp)
8111de98:	10803fd8 	cmpnei	r2,r2,255
8111de9c:	1000061e 	bne	r2,zero,8111deb8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
8111dea0:	d0a05517 	ldw	r2,-32428(gp)
8111dea4:	10800c83 	ldbu	r2,50(r2)
8111dea8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
8111deac:	00800044 	movi	r2,1
8111deb0:	e0bff705 	stb	r2,-36(fp)
8111deb4:	00000906 	br	8111dedc <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
8111deb8:	d0a05517 	ldw	r2,-32428(gp)
8111debc:	10800c83 	ldbu	r2,50(r2)
8111dec0:	10c03fcc 	andi	r3,r2,255
8111dec4:	e0bfff03 	ldbu	r2,-4(fp)
8111dec8:	1880031e 	bne	r3,r2,8111ded8 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
8111decc:	00800044 	movi	r2,1
8111ded0:	e0bff705 	stb	r2,-36(fp)
8111ded4:	00000106 	br	8111dedc <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
8111ded8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8111dedc:	e0ffff03 	ldbu	r3,-4(fp)
8111dee0:	00a044f4 	movhi	r2,33043
8111dee4:	10ba0c04 	addi	r2,r2,-6096
8111dee8:	18c7883a 	add	r3,r3,r3
8111deec:	18c7883a 	add	r3,r3,r3
8111def0:	10c5883a 	add	r2,r2,r3
8111def4:	10800017 	ldw	r2,0(r2)
8111def8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
8111defc:	e0bffa17 	ldw	r2,-24(fp)
8111df00:	1000061e 	bne	r2,zero,8111df1c <OSTaskSuspend+0xf8>
8111df04:	e0bff817 	ldw	r2,-32(fp)
8111df08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111df0c:	e0bff917 	ldw	r2,-28(fp)
8111df10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
8111df14:	00801204 	movi	r2,72
8111df18:	00003606 	br	8111dff4 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
8111df1c:	e0bffa17 	ldw	r2,-24(fp)
8111df20:	10800058 	cmpnei	r2,r2,1
8111df24:	1000061e 	bne	r2,zero,8111df40 <OSTaskSuspend+0x11c>
8111df28:	e0bff817 	ldw	r2,-32(fp)
8111df2c:	e0bffb15 	stw	r2,-20(fp)
8111df30:	e0bffb17 	ldw	r2,-20(fp)
8111df34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8111df38:	008010c4 	movi	r2,67
8111df3c:	00002d06 	br	8111dff4 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
8111df40:	e0bffa17 	ldw	r2,-24(fp)
8111df44:	10800d03 	ldbu	r2,52(r2)
8111df48:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
8111df4c:	e0fffd03 	ldbu	r3,-12(fp)
8111df50:	e13ffd03 	ldbu	r4,-12(fp)
8111df54:	d0a05144 	addi	r2,gp,-32443
8111df58:	2085883a 	add	r2,r4,r2
8111df5c:	10800003 	ldbu	r2,0(r2)
8111df60:	1009883a 	mov	r4,r2
8111df64:	e0bffa17 	ldw	r2,-24(fp)
8111df68:	10800d43 	ldbu	r2,53(r2)
8111df6c:	0084303a 	nor	r2,zero,r2
8111df70:	2084703a 	and	r2,r4,r2
8111df74:	1009883a 	mov	r4,r2
8111df78:	d0a05144 	addi	r2,gp,-32443
8111df7c:	1885883a 	add	r2,r3,r2
8111df80:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8111df84:	e0fffd03 	ldbu	r3,-12(fp)
8111df88:	d0a05144 	addi	r2,gp,-32443
8111df8c:	1885883a 	add	r2,r3,r2
8111df90:	10800003 	ldbu	r2,0(r2)
8111df94:	10803fcc 	andi	r2,r2,255
8111df98:	1000071e 	bne	r2,zero,8111dfb8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8111df9c:	e0bffa17 	ldw	r2,-24(fp)
8111dfa0:	10800d83 	ldbu	r2,54(r2)
8111dfa4:	0084303a 	nor	r2,zero,r2
8111dfa8:	1007883a 	mov	r3,r2
8111dfac:	d0a05103 	ldbu	r2,-32444(gp)
8111dfb0:	1884703a 	and	r2,r3,r2
8111dfb4:	d0a05105 	stb	r2,-32444(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
8111dfb8:	e0bffa17 	ldw	r2,-24(fp)
8111dfbc:	10800c03 	ldbu	r2,48(r2)
8111dfc0:	10800214 	ori	r2,r2,8
8111dfc4:	1007883a 	mov	r3,r2
8111dfc8:	e0bffa17 	ldw	r2,-24(fp)
8111dfcc:	10c00c05 	stb	r3,48(r2)
8111dfd0:	e0bff817 	ldw	r2,-32(fp)
8111dfd4:	e0bffc15 	stw	r2,-16(fp)
8111dfd8:	e0bffc17 	ldw	r2,-16(fp)
8111dfdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
8111dfe0:	e0bff703 	ldbu	r2,-36(fp)
8111dfe4:	10800058 	cmpnei	r2,r2,1
8111dfe8:	1000011e 	bne	r2,zero,8111dff0 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
8111dfec:	11187f00 	call	811187f0 <OS_Sched>
    }
    return (OS_ERR_NONE);
8111dff0:	0005883a 	mov	r2,zero
}
8111dff4:	e037883a 	mov	sp,fp
8111dff8:	dfc00117 	ldw	ra,4(sp)
8111dffc:	df000017 	ldw	fp,0(sp)
8111e000:	dec00204 	addi	sp,sp,8
8111e004:	f800283a 	ret

8111e008 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
8111e008:	defff604 	addi	sp,sp,-40
8111e00c:	dfc00915 	stw	ra,36(sp)
8111e010:	df000815 	stw	fp,32(sp)
8111e014:	df000804 	addi	fp,sp,32
8111e018:	2005883a 	mov	r2,r4
8111e01c:	e17fff15 	stw	r5,-4(fp)
8111e020:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111e024:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
8111e028:	e0bffe03 	ldbu	r2,-8(fp)
8111e02c:	108007f0 	cmpltui	r2,r2,31
8111e030:	1000051e 	bne	r2,zero,8111e048 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
8111e034:	e0bffe03 	ldbu	r2,-8(fp)
8111e038:	10803fe0 	cmpeqi	r2,r2,255
8111e03c:	1000021e 	bne	r2,zero,8111e048 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
8111e040:	00800a84 	movi	r2,42
8111e044:	00003406 	br	8111e118 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
8111e048:	e0bfff17 	ldw	r2,-4(fp)
8111e04c:	1000021e 	bne	r2,zero,8111e058 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
8111e050:	00800244 	movi	r2,9
8111e054:	00003006 	br	8111e118 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111e058:	0005303a 	rdctl	r2,status
8111e05c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111e060:	e0fffd17 	ldw	r3,-12(fp)
8111e064:	00bfff84 	movi	r2,-2
8111e068:	1884703a 	and	r2,r3,r2
8111e06c:	1001703a 	wrctl	status,r2
  
  return context;
8111e070:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8111e074:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
8111e078:	e0bffe03 	ldbu	r2,-8(fp)
8111e07c:	10803fd8 	cmpnei	r2,r2,255
8111e080:	1000031e 	bne	r2,zero,8111e090 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
8111e084:	d0a05517 	ldw	r2,-32428(gp)
8111e088:	10800c83 	ldbu	r2,50(r2)
8111e08c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8111e090:	e0fffe03 	ldbu	r3,-8(fp)
8111e094:	00a044f4 	movhi	r2,33043
8111e098:	10ba0c04 	addi	r2,r2,-6096
8111e09c:	18c7883a 	add	r3,r3,r3
8111e0a0:	18c7883a 	add	r3,r3,r3
8111e0a4:	10c5883a 	add	r2,r2,r3
8111e0a8:	10800017 	ldw	r2,0(r2)
8111e0ac:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
8111e0b0:	e0bffa17 	ldw	r2,-24(fp)
8111e0b4:	1000061e 	bne	r2,zero,8111e0d0 <OSTaskQuery+0xc8>
8111e0b8:	e0bff817 	ldw	r2,-32(fp)
8111e0bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111e0c0:	e0bff917 	ldw	r2,-28(fp)
8111e0c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
8111e0c8:	00800a44 	movi	r2,41
8111e0cc:	00001206 	br	8111e118 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
8111e0d0:	e0bffa17 	ldw	r2,-24(fp)
8111e0d4:	10800058 	cmpnei	r2,r2,1
8111e0d8:	1000061e 	bne	r2,zero,8111e0f4 <OSTaskQuery+0xec>
8111e0dc:	e0bff817 	ldw	r2,-32(fp)
8111e0e0:	e0bffb15 	stw	r2,-20(fp)
8111e0e4:	e0bffb17 	ldw	r2,-20(fp)
8111e0e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8111e0ec:	008010c4 	movi	r2,67
8111e0f0:	00000906 	br	8111e118 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
8111e0f4:	01801b04 	movi	r6,108
8111e0f8:	e17ffa17 	ldw	r5,-24(fp)
8111e0fc:	e13fff17 	ldw	r4,-4(fp)
8111e100:	11187880 	call	81118788 <OS_MemCopy>
8111e104:	e0bff817 	ldw	r2,-32(fp)
8111e108:	e0bffc15 	stw	r2,-16(fp)
8111e10c:	e0bffc17 	ldw	r2,-16(fp)
8111e110:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8111e114:	0005883a 	mov	r2,zero
}
8111e118:	e037883a 	mov	sp,fp
8111e11c:	dfc00117 	ldw	ra,4(sp)
8111e120:	df000017 	ldw	fp,0(sp)
8111e124:	dec00204 	addi	sp,sp,8
8111e128:	f800283a 	ret

8111e12c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
8111e12c:	defffc04 	addi	sp,sp,-16
8111e130:	df000315 	stw	fp,12(sp)
8111e134:	df000304 	addi	fp,sp,12
8111e138:	e13ffd15 	stw	r4,-12(fp)
8111e13c:	e17ffe15 	stw	r5,-8(fp)
8111e140:	3005883a 	mov	r2,r6
8111e144:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
8111e148:	e0bfff0b 	ldhu	r2,-4(fp)
8111e14c:	1080004c 	andi	r2,r2,1
8111e150:	10000d26 	beq	r2,zero,8111e188 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
8111e154:	e0bfff0b 	ldhu	r2,-4(fp)
8111e158:	1080008c 	andi	r2,r2,2
8111e15c:	10000a26 	beq	r2,zero,8111e188 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
8111e160:	00000706 	br	8111e180 <OS_TaskStkClr+0x54>
                size--;
8111e164:	e0bffe17 	ldw	r2,-8(fp)
8111e168:	10bfffc4 	addi	r2,r2,-1
8111e16c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
8111e170:	e0bffd17 	ldw	r2,-12(fp)
8111e174:	10c00104 	addi	r3,r2,4
8111e178:	e0fffd15 	stw	r3,-12(fp)
8111e17c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
8111e180:	e0bffe17 	ldw	r2,-8(fp)
8111e184:	103ff71e 	bne	r2,zero,8111e164 <__reset+0xfb0fe164>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
8111e188:	0001883a 	nop
8111e18c:	e037883a 	mov	sp,fp
8111e190:	df000017 	ldw	fp,0(sp)
8111e194:	dec00104 	addi	sp,sp,4
8111e198:	f800283a 	ret

8111e19c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
8111e19c:	defff904 	addi	sp,sp,-28
8111e1a0:	dfc00615 	stw	ra,24(sp)
8111e1a4:	df000515 	stw	fp,20(sp)
8111e1a8:	df000504 	addi	fp,sp,20
8111e1ac:	2005883a 	mov	r2,r4
8111e1b0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111e1b4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8111e1b8:	d0a05403 	ldbu	r2,-32432(gp)
8111e1bc:	10803fcc 	andi	r2,r2,255
8111e1c0:	1000311e 	bne	r2,zero,8111e288 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
8111e1c4:	e0bfff0b 	ldhu	r2,-4(fp)
8111e1c8:	10003026 	beq	r2,zero,8111e28c <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111e1cc:	0005303a 	rdctl	r2,status
8111e1d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111e1d4:	e0fffe17 	ldw	r3,-8(fp)
8111e1d8:	00bfff84 	movi	r2,-2
8111e1dc:	1884703a 	and	r2,r3,r2
8111e1e0:	1001703a 	wrctl	status,r2
  
  return context;
8111e1e4:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
8111e1e8:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
8111e1ec:	d0a05517 	ldw	r2,-32428(gp)
8111e1f0:	10800d03 	ldbu	r2,52(r2)
8111e1f4:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8111e1f8:	e0fffd03 	ldbu	r3,-12(fp)
8111e1fc:	e13ffd03 	ldbu	r4,-12(fp)
8111e200:	d0a05144 	addi	r2,gp,-32443
8111e204:	2085883a 	add	r2,r4,r2
8111e208:	10800003 	ldbu	r2,0(r2)
8111e20c:	1009883a 	mov	r4,r2
8111e210:	d0a05517 	ldw	r2,-32428(gp)
8111e214:	10800d43 	ldbu	r2,53(r2)
8111e218:	0084303a 	nor	r2,zero,r2
8111e21c:	2084703a 	and	r2,r4,r2
8111e220:	1009883a 	mov	r4,r2
8111e224:	d0a05144 	addi	r2,gp,-32443
8111e228:	1885883a 	add	r2,r3,r2
8111e22c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
8111e230:	e0fffd03 	ldbu	r3,-12(fp)
8111e234:	d0a05144 	addi	r2,gp,-32443
8111e238:	1885883a 	add	r2,r3,r2
8111e23c:	10800003 	ldbu	r2,0(r2)
8111e240:	10803fcc 	andi	r2,r2,255
8111e244:	1000071e 	bne	r2,zero,8111e264 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8111e248:	d0a05517 	ldw	r2,-32428(gp)
8111e24c:	10800d83 	ldbu	r2,54(r2)
8111e250:	0084303a 	nor	r2,zero,r2
8111e254:	1007883a 	mov	r3,r2
8111e258:	d0a05103 	ldbu	r2,-32444(gp)
8111e25c:	1884703a 	and	r2,r3,r2
8111e260:	d0a05105 	stb	r2,-32444(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
8111e264:	d0a05517 	ldw	r2,-32428(gp)
8111e268:	e0ffff0b 	ldhu	r3,-4(fp)
8111e26c:	10c00b8d 	sth	r3,46(r2)
8111e270:	e0bffb17 	ldw	r2,-20(fp)
8111e274:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111e278:	e0bffc17 	ldw	r2,-16(fp)
8111e27c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
8111e280:	11187f00 	call	811187f0 <OS_Sched>
8111e284:	00000106 	br	8111e28c <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
8111e288:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
8111e28c:	e037883a 	mov	sp,fp
8111e290:	dfc00117 	ldw	ra,4(sp)
8111e294:	df000017 	ldw	fp,0(sp)
8111e298:	dec00204 	addi	sp,sp,8
8111e29c:	f800283a 	ret

8111e2a0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
8111e2a0:	defff804 	addi	sp,sp,-32
8111e2a4:	dfc00715 	stw	ra,28(sp)
8111e2a8:	df000615 	stw	fp,24(sp)
8111e2ac:	df000604 	addi	fp,sp,24
8111e2b0:	2015883a 	mov	r10,r4
8111e2b4:	2809883a 	mov	r4,r5
8111e2b8:	3007883a 	mov	r3,r6
8111e2bc:	3805883a 	mov	r2,r7
8111e2c0:	e2bffc05 	stb	r10,-16(fp)
8111e2c4:	e13ffd05 	stb	r4,-12(fp)
8111e2c8:	e0fffe05 	stb	r3,-8(fp)
8111e2cc:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8111e2d0:	d0a05403 	ldbu	r2,-32432(gp)
8111e2d4:	10803fcc 	andi	r2,r2,255
8111e2d8:	10000226 	beq	r2,zero,8111e2e4 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
8111e2dc:	00801544 	movi	r2,85
8111e2e0:	00004106 	br	8111e3e8 <OSTimeDlyHMSM+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
8111e2e4:	e0bffc03 	ldbu	r2,-16(fp)
8111e2e8:	1000081e 	bne	r2,zero,8111e30c <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
8111e2ec:	e0bffd03 	ldbu	r2,-12(fp)
8111e2f0:	1000061e 	bne	r2,zero,8111e30c <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
8111e2f4:	e0bffe03 	ldbu	r2,-8(fp)
8111e2f8:	1000041e 	bne	r2,zero,8111e30c <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
8111e2fc:	e0bfff0b 	ldhu	r2,-4(fp)
8111e300:	1000021e 	bne	r2,zero,8111e30c <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
8111e304:	00801504 	movi	r2,84
8111e308:	00003706 	br	8111e3e8 <OSTimeDlyHMSM+0x148>
                }
            }
        }
    }
    if (minutes > 59) {
8111e30c:	e0bffd03 	ldbu	r2,-12(fp)
8111e310:	10800f30 	cmpltui	r2,r2,60
8111e314:	1000021e 	bne	r2,zero,8111e320 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
8111e318:	00801444 	movi	r2,81
8111e31c:	00003206 	br	8111e3e8 <OSTimeDlyHMSM+0x148>
    }
    if (seconds > 59) {
8111e320:	e0bffe03 	ldbu	r2,-8(fp)
8111e324:	10800f30 	cmpltui	r2,r2,60
8111e328:	1000021e 	bne	r2,zero,8111e334 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
8111e32c:	00801484 	movi	r2,82
8111e330:	00002d06 	br	8111e3e8 <OSTimeDlyHMSM+0x148>
    }
    if (ms > 999) {
8111e334:	e0bfff0b 	ldhu	r2,-4(fp)
8111e338:	1080fa30 	cmpltui	r2,r2,1000
8111e33c:	1000021e 	bne	r2,zero,8111e348 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
8111e340:	008014c4 	movi	r2,83
8111e344:	00002806 	br	8111e3e8 <OSTimeDlyHMSM+0x148>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
8111e348:	e0bffc03 	ldbu	r2,-16(fp)
8111e34c:	10c38424 	muli	r3,r2,3600
8111e350:	e0bffd03 	ldbu	r2,-12(fp)
8111e354:	10800f24 	muli	r2,r2,60
8111e358:	1887883a 	add	r3,r3,r2
8111e35c:	e0bffe03 	ldbu	r2,-8(fp)
8111e360:	1885883a 	add	r2,r3,r2
8111e364:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
8111e368:	e0bfff0b 	ldhu	r2,-4(fp)
8111e36c:	10c0fa24 	muli	r3,r2,1000
8111e370:	008418b4 	movhi	r2,4194
8111e374:	109374c4 	addi	r2,r2,19923
8111e378:	188a383a 	mulxuu	r5,r3,r2
8111e37c:	1885383a 	mul	r2,r3,r2
8111e380:	1011883a 	mov	r8,r2
8111e384:	2813883a 	mov	r9,r5
8111e388:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
8111e38c:	2085883a 	add	r2,r4,r2
8111e390:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
8111e394:	e0bffb17 	ldw	r2,-20(fp)
8111e398:	1004d43a 	srli	r2,r2,16
8111e39c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
8111e3a0:	e0bffb17 	ldw	r2,-20(fp)
8111e3a4:	10bfffcc 	andi	r2,r2,65535
8111e3a8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
8111e3ac:	e0bffb17 	ldw	r2,-20(fp)
8111e3b0:	10bfffcc 	andi	r2,r2,65535
8111e3b4:	1009883a 	mov	r4,r2
8111e3b8:	111e19c0 	call	8111e19c <OSTimeDly>
    while (loops > 0) {
8111e3bc:	00000706 	br	8111e3dc <OSTimeDlyHMSM+0x13c>
        OSTimeDly((INT16U)32768u);
8111e3c0:	01200014 	movui	r4,32768
8111e3c4:	111e19c0 	call	8111e19c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
8111e3c8:	01200014 	movui	r4,32768
8111e3cc:	111e19c0 	call	8111e19c <OSTimeDly>
        loops--;
8111e3d0:	e0bffa0b 	ldhu	r2,-24(fp)
8111e3d4:	10bfffc4 	addi	r2,r2,-1
8111e3d8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
8111e3dc:	e0bffa0b 	ldhu	r2,-24(fp)
8111e3e0:	103ff71e 	bne	r2,zero,8111e3c0 <__reset+0xfb0fe3c0>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
8111e3e4:	0005883a 	mov	r2,zero
}
8111e3e8:	e037883a 	mov	sp,fp
8111e3ec:	dfc00117 	ldw	ra,4(sp)
8111e3f0:	df000017 	ldw	fp,0(sp)
8111e3f4:	dec00204 	addi	sp,sp,8
8111e3f8:	f800283a 	ret

8111e3fc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
8111e3fc:	defff504 	addi	sp,sp,-44
8111e400:	dfc00a15 	stw	ra,40(sp)
8111e404:	df000915 	stw	fp,36(sp)
8111e408:	df000904 	addi	fp,sp,36
8111e40c:	2005883a 	mov	r2,r4
8111e410:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8111e414:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
8111e418:	e0bfff03 	ldbu	r2,-4(fp)
8111e41c:	108007b0 	cmpltui	r2,r2,30
8111e420:	1000021e 	bne	r2,zero,8111e42c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
8111e424:	00800a84 	movi	r2,42
8111e428:	00006406 	br	8111e5bc <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111e42c:	0005303a 	rdctl	r2,status
8111e430:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111e434:	e0fffe17 	ldw	r3,-8(fp)
8111e438:	00bfff84 	movi	r2,-2
8111e43c:	1884703a 	and	r2,r3,r2
8111e440:	1001703a 	wrctl	status,r2
  
  return context;
8111e444:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8111e448:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
8111e44c:	e0ffff03 	ldbu	r3,-4(fp)
8111e450:	00a044f4 	movhi	r2,33043
8111e454:	10ba0c04 	addi	r2,r2,-6096
8111e458:	18c7883a 	add	r3,r3,r3
8111e45c:	18c7883a 	add	r3,r3,r3
8111e460:	10c5883a 	add	r2,r2,r3
8111e464:	10800017 	ldw	r2,0(r2)
8111e468:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
8111e46c:	e0bff917 	ldw	r2,-28(fp)
8111e470:	1000061e 	bne	r2,zero,8111e48c <OSTimeDlyResume+0x90>
8111e474:	e0bff717 	ldw	r2,-36(fp)
8111e478:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111e47c:	e0bff817 	ldw	r2,-32(fp)
8111e480:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
8111e484:	008010c4 	movi	r2,67
8111e488:	00004c06 	br	8111e5bc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
8111e48c:	e0bff917 	ldw	r2,-28(fp)
8111e490:	10800058 	cmpnei	r2,r2,1
8111e494:	1000061e 	bne	r2,zero,8111e4b0 <OSTimeDlyResume+0xb4>
8111e498:	e0bff717 	ldw	r2,-36(fp)
8111e49c:	e0bffa15 	stw	r2,-24(fp)
8111e4a0:	e0bffa17 	ldw	r2,-24(fp)
8111e4a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
8111e4a8:	008010c4 	movi	r2,67
8111e4ac:	00004306 	br	8111e5bc <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
8111e4b0:	e0bff917 	ldw	r2,-28(fp)
8111e4b4:	10800b8b 	ldhu	r2,46(r2)
8111e4b8:	10bfffcc 	andi	r2,r2,65535
8111e4bc:	1000061e 	bne	r2,zero,8111e4d8 <OSTimeDlyResume+0xdc>
8111e4c0:	e0bff717 	ldw	r2,-36(fp)
8111e4c4:	e0bffb15 	stw	r2,-20(fp)
8111e4c8:	e0bffb17 	ldw	r2,-20(fp)
8111e4cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
8111e4d0:	00801404 	movi	r2,80
8111e4d4:	00003906 	br	8111e5bc <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
8111e4d8:	e0bff917 	ldw	r2,-28(fp)
8111e4dc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8111e4e0:	e0bff917 	ldw	r2,-28(fp)
8111e4e4:	10800c03 	ldbu	r2,48(r2)
8111e4e8:	10803fcc 	andi	r2,r2,255
8111e4ec:	10800dcc 	andi	r2,r2,55
8111e4f0:	10000b26 	beq	r2,zero,8111e520 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
8111e4f4:	e0bff917 	ldw	r2,-28(fp)
8111e4f8:	10c00c03 	ldbu	r3,48(r2)
8111e4fc:	00bff204 	movi	r2,-56
8111e500:	1884703a 	and	r2,r3,r2
8111e504:	1007883a 	mov	r3,r2
8111e508:	e0bff917 	ldw	r2,-28(fp)
8111e50c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
8111e510:	e0bff917 	ldw	r2,-28(fp)
8111e514:	00c00044 	movi	r3,1
8111e518:	10c00c45 	stb	r3,49(r2)
8111e51c:	00000206 	br	8111e528 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
8111e520:	e0bff917 	ldw	r2,-28(fp)
8111e524:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
8111e528:	e0bff917 	ldw	r2,-28(fp)
8111e52c:	10800c03 	ldbu	r2,48(r2)
8111e530:	10803fcc 	andi	r2,r2,255
8111e534:	1080020c 	andi	r2,r2,8
8111e538:	10001b1e 	bne	r2,zero,8111e5a8 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
8111e53c:	e0bff917 	ldw	r2,-28(fp)
8111e540:	10c00d83 	ldbu	r3,54(r2)
8111e544:	d0a05103 	ldbu	r2,-32444(gp)
8111e548:	1884b03a 	or	r2,r3,r2
8111e54c:	d0a05105 	stb	r2,-32444(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8111e550:	e0bff917 	ldw	r2,-28(fp)
8111e554:	10800d03 	ldbu	r2,52(r2)
8111e558:	10c03fcc 	andi	r3,r2,255
8111e55c:	e0bff917 	ldw	r2,-28(fp)
8111e560:	10800d03 	ldbu	r2,52(r2)
8111e564:	11003fcc 	andi	r4,r2,255
8111e568:	d0a05144 	addi	r2,gp,-32443
8111e56c:	2085883a 	add	r2,r4,r2
8111e570:	11000003 	ldbu	r4,0(r2)
8111e574:	e0bff917 	ldw	r2,-28(fp)
8111e578:	10800d43 	ldbu	r2,53(r2)
8111e57c:	2084b03a 	or	r2,r4,r2
8111e580:	1009883a 	mov	r4,r2
8111e584:	d0a05144 	addi	r2,gp,-32443
8111e588:	1885883a 	add	r2,r3,r2
8111e58c:	11000005 	stb	r4,0(r2)
8111e590:	e0bff717 	ldw	r2,-36(fp)
8111e594:	e0bffc15 	stw	r2,-16(fp)
8111e598:	e0bffc17 	ldw	r2,-16(fp)
8111e59c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
8111e5a0:	11187f00 	call	811187f0 <OS_Sched>
8111e5a4:	00000406 	br	8111e5b8 <OSTimeDlyResume+0x1bc>
8111e5a8:	e0bff717 	ldw	r2,-36(fp)
8111e5ac:	e0bffd15 	stw	r2,-12(fp)
8111e5b0:	e0bffd17 	ldw	r2,-12(fp)
8111e5b4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
8111e5b8:	0005883a 	mov	r2,zero
}
8111e5bc:	e037883a 	mov	sp,fp
8111e5c0:	dfc00117 	ldw	ra,4(sp)
8111e5c4:	df000017 	ldw	fp,0(sp)
8111e5c8:	dec00204 	addi	sp,sp,8
8111e5cc:	f800283a 	ret

8111e5d0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
8111e5d0:	defffb04 	addi	sp,sp,-20
8111e5d4:	df000415 	stw	fp,16(sp)
8111e5d8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111e5dc:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111e5e0:	0005303a 	rdctl	r2,status
8111e5e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111e5e8:	e0fffe17 	ldw	r3,-8(fp)
8111e5ec:	00bfff84 	movi	r2,-2
8111e5f0:	1884703a 	and	r2,r3,r2
8111e5f4:	1001703a 	wrctl	status,r2
  
  return context;
8111e5f8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8111e5fc:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
8111e600:	d0a05617 	ldw	r2,-32424(gp)
8111e604:	e0bffd15 	stw	r2,-12(fp)
8111e608:	e0bffc17 	ldw	r2,-16(fp)
8111e60c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111e610:	e0bfff17 	ldw	r2,-4(fp)
8111e614:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
8111e618:	e0bffd17 	ldw	r2,-12(fp)
}
8111e61c:	e037883a 	mov	sp,fp
8111e620:	df000017 	ldw	fp,0(sp)
8111e624:	dec00104 	addi	sp,sp,4
8111e628:	f800283a 	ret

8111e62c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
8111e62c:	defffb04 	addi	sp,sp,-20
8111e630:	df000415 	stw	fp,16(sp)
8111e634:	df000404 	addi	fp,sp,16
8111e638:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8111e63c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111e640:	0005303a 	rdctl	r2,status
8111e644:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111e648:	e0fffd17 	ldw	r3,-12(fp)
8111e64c:	00bfff84 	movi	r2,-2
8111e650:	1884703a 	and	r2,r3,r2
8111e654:	1001703a 	wrctl	status,r2
  
  return context;
8111e658:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
8111e65c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
8111e660:	e0bfff17 	ldw	r2,-4(fp)
8111e664:	d0a05615 	stw	r2,-32424(gp)
8111e668:	e0bffc17 	ldw	r2,-16(fp)
8111e66c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111e670:	e0bffe17 	ldw	r2,-8(fp)
8111e674:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
8111e678:	0001883a 	nop
8111e67c:	e037883a 	mov	sp,fp
8111e680:	df000017 	ldw	fp,0(sp)
8111e684:	dec00104 	addi	sp,sp,4
8111e688:	f800283a 	ret

8111e68c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
8111e68c:	defffd04 	addi	sp,sp,-12
8111e690:	dfc00215 	stw	ra,8(sp)
8111e694:	df000115 	stw	fp,4(sp)
8111e698:	df000104 	addi	fp,sp,4
8111e69c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8111e6a0:	d1600a04 	addi	r5,gp,-32728
8111e6a4:	e13fff17 	ldw	r4,-4(fp)
8111e6a8:	112319c0 	call	8112319c <alt_dev_llist_insert>
}
8111e6ac:	e037883a 	mov	sp,fp
8111e6b0:	dfc00117 	ldw	ra,4(sp)
8111e6b4:	df000017 	ldw	fp,0(sp)
8111e6b8:	dec00204 	addi	sp,sp,8
8111e6bc:	f800283a 	ret

8111e6c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8111e6c0:	defffd04 	addi	sp,sp,-12
8111e6c4:	dfc00215 	stw	ra,8(sp)
8111e6c8:	df000115 	stw	fp,4(sp)
8111e6cc:	df000104 	addi	fp,sp,4
8111e6d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
8111e6d4:	1123d600 	call	81123d60 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
8111e6d8:	00800044 	movi	r2,1
8111e6dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
8111e6e0:	0001883a 	nop
8111e6e4:	e037883a 	mov	sp,fp
8111e6e8:	dfc00117 	ldw	ra,4(sp)
8111e6ec:	df000017 	ldw	fp,0(sp)
8111e6f0:	dec00204 	addi	sp,sp,8
8111e6f4:	f800283a 	ret

8111e6f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8111e6f8:	defffe04 	addi	sp,sp,-8
8111e6fc:	dfc00115 	stw	ra,4(sp)
8111e700:	df000015 	stw	fp,0(sp)
8111e704:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
8111e708:	01c0fa04 	movi	r7,1000
8111e70c:	018000c4 	movi	r6,3
8111e710:	000b883a 	mov	r5,zero
8111e714:	01200034 	movhi	r4,32768
8111e718:	21011004 	addi	r4,r4,1088
8111e71c:	11203180 	call	81120318 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8111e720:	01800084 	movi	r6,2
8111e724:	000b883a 	mov	r5,zero
8111e728:	012044b4 	movhi	r4,33042
8111e72c:	21171a04 	addi	r4,r4,23656
8111e730:	111e9440 	call	8111e944 <altera_avalon_jtag_uart_init>
8111e734:	012044b4 	movhi	r4,33042
8111e738:	21171004 	addi	r4,r4,23616
8111e73c:	111e68c0 	call	8111e68c <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
8111e740:	01800044 	movi	r6,1
8111e744:	000b883a 	mov	r5,zero
8111e748:	012044b4 	movhi	r4,33042
8111e74c:	211b2b04 	addi	r4,r4,27820
8111e750:	11201f80 	call	811201f8 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
8111e754:	000d883a 	mov	r6,zero
8111e758:	000b883a 	mov	r5,zero
8111e75c:	012044b4 	movhi	r4,33042
8111e760:	211b3704 	addi	r4,r4,27868
8111e764:	11201f80 	call	811201f8 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8111e768:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
8111e76c:	01800184 	movi	r6,6
8111e770:	000b883a 	mov	r5,zero
8111e774:	012044b4 	movhi	r4,33042
8111e778:	211b4d04 	addi	r4,r4,27956
8111e77c:	11204a40 	call	811204a4 <altera_avalon_uart_init>
8111e780:	012044b4 	movhi	r4,33042
8111e784:	211b4304 	addi	r4,r4,27916
8111e788:	111e68c0 	call	8111e68c <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE_MAC, tse_mac);
8111e78c:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( DMA_DDR_M, dma_DDR_M);
8111e790:	00a044b4 	movhi	r2,33042
8111e794:	109b7704 	addi	r2,r2,28124
8111e798:	10c00717 	ldw	r3,28(r2)
8111e79c:	00a044b4 	movhi	r2,33042
8111e7a0:	109b7704 	addi	r2,r2,28124
8111e7a4:	10800817 	ldw	r2,32(r2)
8111e7a8:	100d883a 	mov	r6,r2
8111e7ac:	180b883a 	mov	r5,r3
8111e7b0:	012044b4 	movhi	r4,33042
8111e7b4:	211b7704 	addi	r4,r4,28124
8111e7b8:	1122bf40 	call	81122bf4 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
8111e7bc:	012044b4 	movhi	r4,33042
8111e7c0:	211b9004 	addi	r4,r4,28224
8111e7c4:	111e68c0 	call	8111e68c <alt_dev_reg>
}
8111e7c8:	0001883a 	nop
8111e7cc:	e037883a 	mov	sp,fp
8111e7d0:	dfc00117 	ldw	ra,4(sp)
8111e7d4:	df000017 	ldw	fp,0(sp)
8111e7d8:	dec00204 	addi	sp,sp,8
8111e7dc:	f800283a 	ret

8111e7e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8111e7e0:	defffa04 	addi	sp,sp,-24
8111e7e4:	dfc00515 	stw	ra,20(sp)
8111e7e8:	df000415 	stw	fp,16(sp)
8111e7ec:	df000404 	addi	fp,sp,16
8111e7f0:	e13ffd15 	stw	r4,-12(fp)
8111e7f4:	e17ffe15 	stw	r5,-8(fp)
8111e7f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8111e7fc:	e0bffd17 	ldw	r2,-12(fp)
8111e800:	10800017 	ldw	r2,0(r2)
8111e804:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
8111e808:	e0bffc17 	ldw	r2,-16(fp)
8111e80c:	10c00a04 	addi	r3,r2,40
8111e810:	e0bffd17 	ldw	r2,-12(fp)
8111e814:	10800217 	ldw	r2,8(r2)
8111e818:	100f883a 	mov	r7,r2
8111e81c:	e1bfff17 	ldw	r6,-4(fp)
8111e820:	e17ffe17 	ldw	r5,-8(fp)
8111e824:	1809883a 	mov	r4,r3
8111e828:	111ef8c0 	call	8111ef8c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8111e82c:	e037883a 	mov	sp,fp
8111e830:	dfc00117 	ldw	ra,4(sp)
8111e834:	df000017 	ldw	fp,0(sp)
8111e838:	dec00204 	addi	sp,sp,8
8111e83c:	f800283a 	ret

8111e840 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8111e840:	defffa04 	addi	sp,sp,-24
8111e844:	dfc00515 	stw	ra,20(sp)
8111e848:	df000415 	stw	fp,16(sp)
8111e84c:	df000404 	addi	fp,sp,16
8111e850:	e13ffd15 	stw	r4,-12(fp)
8111e854:	e17ffe15 	stw	r5,-8(fp)
8111e858:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8111e85c:	e0bffd17 	ldw	r2,-12(fp)
8111e860:	10800017 	ldw	r2,0(r2)
8111e864:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
8111e868:	e0bffc17 	ldw	r2,-16(fp)
8111e86c:	10c00a04 	addi	r3,r2,40
8111e870:	e0bffd17 	ldw	r2,-12(fp)
8111e874:	10800217 	ldw	r2,8(r2)
8111e878:	100f883a 	mov	r7,r2
8111e87c:	e1bfff17 	ldw	r6,-4(fp)
8111e880:	e17ffe17 	ldw	r5,-8(fp)
8111e884:	1809883a 	mov	r4,r3
8111e888:	111f2480 	call	8111f248 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
8111e88c:	e037883a 	mov	sp,fp
8111e890:	dfc00117 	ldw	ra,4(sp)
8111e894:	df000017 	ldw	fp,0(sp)
8111e898:	dec00204 	addi	sp,sp,8
8111e89c:	f800283a 	ret

8111e8a0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
8111e8a0:	defffc04 	addi	sp,sp,-16
8111e8a4:	dfc00315 	stw	ra,12(sp)
8111e8a8:	df000215 	stw	fp,8(sp)
8111e8ac:	df000204 	addi	fp,sp,8
8111e8b0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8111e8b4:	e0bfff17 	ldw	r2,-4(fp)
8111e8b8:	10800017 	ldw	r2,0(r2)
8111e8bc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
8111e8c0:	e0bffe17 	ldw	r2,-8(fp)
8111e8c4:	10c00a04 	addi	r3,r2,40
8111e8c8:	e0bfff17 	ldw	r2,-4(fp)
8111e8cc:	10800217 	ldw	r2,8(r2)
8111e8d0:	100b883a 	mov	r5,r2
8111e8d4:	1809883a 	mov	r4,r3
8111e8d8:	111ee340 	call	8111ee34 <altera_avalon_jtag_uart_close>
}
8111e8dc:	e037883a 	mov	sp,fp
8111e8e0:	dfc00117 	ldw	ra,4(sp)
8111e8e4:	df000017 	ldw	fp,0(sp)
8111e8e8:	dec00204 	addi	sp,sp,8
8111e8ec:	f800283a 	ret

8111e8f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8111e8f0:	defffa04 	addi	sp,sp,-24
8111e8f4:	dfc00515 	stw	ra,20(sp)
8111e8f8:	df000415 	stw	fp,16(sp)
8111e8fc:	df000404 	addi	fp,sp,16
8111e900:	e13ffd15 	stw	r4,-12(fp)
8111e904:	e17ffe15 	stw	r5,-8(fp)
8111e908:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8111e90c:	e0bffd17 	ldw	r2,-12(fp)
8111e910:	10800017 	ldw	r2,0(r2)
8111e914:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
8111e918:	e0bffc17 	ldw	r2,-16(fp)
8111e91c:	10800a04 	addi	r2,r2,40
8111e920:	e1bfff17 	ldw	r6,-4(fp)
8111e924:	e17ffe17 	ldw	r5,-8(fp)
8111e928:	1009883a 	mov	r4,r2
8111e92c:	111ee9c0 	call	8111ee9c <altera_avalon_jtag_uart_ioctl>
}
8111e930:	e037883a 	mov	sp,fp
8111e934:	dfc00117 	ldw	ra,4(sp)
8111e938:	df000017 	ldw	fp,0(sp)
8111e93c:	dec00204 	addi	sp,sp,8
8111e940:	f800283a 	ret

8111e944 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
8111e944:	defff104 	addi	sp,sp,-60
8111e948:	dfc00e15 	stw	ra,56(sp)
8111e94c:	df000d15 	stw	fp,52(sp)
8111e950:	df000d04 	addi	fp,sp,52
8111e954:	e13ff915 	stw	r4,-28(fp)
8111e958:	e17ffa15 	stw	r5,-24(fp)
8111e95c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
8111e960:	e0bff917 	ldw	r2,-28(fp)
8111e964:	10800c04 	addi	r2,r2,48
8111e968:	e0bff415 	stw	r2,-48(fp)
8111e96c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
8111e970:	e0bff80b 	ldhu	r2,-32(fp)
8111e974:	e0fff884 	addi	r3,fp,-30
8111e978:	180b883a 	mov	r5,r3
8111e97c:	1009883a 	mov	r4,r2
8111e980:	111936c0 	call	8111936c <OSFlagCreate>
8111e984:	1007883a 	mov	r3,r2
8111e988:	e0bff417 	ldw	r2,-48(fp)
8111e98c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
8111e990:	e0bff917 	ldw	r2,-28(fp)
8111e994:	10800a04 	addi	r2,r2,40
8111e998:	e0bff515 	stw	r2,-44(fp)
8111e99c:	00800044 	movi	r2,1
8111e9a0:	e0bff78d 	sth	r2,-34(fp)
8111e9a4:	e0bff78b 	ldhu	r2,-34(fp)
8111e9a8:	1009883a 	mov	r4,r2
8111e9ac:	111c0800 	call	8111c080 <OSSemCreate>
8111e9b0:	1007883a 	mov	r3,r2
8111e9b4:	e0bff517 	ldw	r2,-44(fp)
8111e9b8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
8111e9bc:	e0bff917 	ldw	r2,-28(fp)
8111e9c0:	10800b04 	addi	r2,r2,44
8111e9c4:	e0bff615 	stw	r2,-40(fp)
8111e9c8:	00800044 	movi	r2,1
8111e9cc:	e0bff70d 	sth	r2,-36(fp)
8111e9d0:	e0bff70b 	ldhu	r2,-36(fp)
8111e9d4:	1009883a 	mov	r4,r2
8111e9d8:	111c0800 	call	8111c080 <OSSemCreate>
8111e9dc:	1007883a 	mov	r3,r2
8111e9e0:	e0bff617 	ldw	r2,-40(fp)
8111e9e4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8111e9e8:	e0bff917 	ldw	r2,-28(fp)
8111e9ec:	00c00044 	movi	r3,1
8111e9f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8111e9f4:	e0bff917 	ldw	r2,-28(fp)
8111e9f8:	10800017 	ldw	r2,0(r2)
8111e9fc:	10800104 	addi	r2,r2,4
8111ea00:	1007883a 	mov	r3,r2
8111ea04:	e0bff917 	ldw	r2,-28(fp)
8111ea08:	10800817 	ldw	r2,32(r2)
8111ea0c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
8111ea10:	e0bffa17 	ldw	r2,-24(fp)
8111ea14:	e0fffb17 	ldw	r3,-20(fp)
8111ea18:	d8000015 	stw	zero,0(sp)
8111ea1c:	e1fff917 	ldw	r7,-28(fp)
8111ea20:	01a044b4 	movhi	r6,33042
8111ea24:	31baa304 	addi	r6,r6,-5492
8111ea28:	180b883a 	mov	r5,r3
8111ea2c:	1009883a 	mov	r4,r2
8111ea30:	11235740 	call	81123574 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8111ea34:	e0bff917 	ldw	r2,-28(fp)
8111ea38:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
8111ea3c:	e0bff917 	ldw	r2,-28(fp)
8111ea40:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8111ea44:	d0e05b17 	ldw	r3,-32404(gp)
8111ea48:	e1fff917 	ldw	r7,-28(fp)
8111ea4c:	01a044b4 	movhi	r6,33042
8111ea50:	31bb4c04 	addi	r6,r6,-4816
8111ea54:	180b883a 	mov	r5,r3
8111ea58:	1009883a 	mov	r4,r2
8111ea5c:	1122ee40 	call	81122ee4 <alt_alarm_start>
8111ea60:	1000040e 	bge	r2,zero,8111ea74 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8111ea64:	e0fff917 	ldw	r3,-28(fp)
8111ea68:	00a00034 	movhi	r2,32768
8111ea6c:	10bfffc4 	addi	r2,r2,-1
8111ea70:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
8111ea74:	0001883a 	nop
8111ea78:	e037883a 	mov	sp,fp
8111ea7c:	dfc00117 	ldw	ra,4(sp)
8111ea80:	df000017 	ldw	fp,0(sp)
8111ea84:	dec00204 	addi	sp,sp,8
8111ea88:	f800283a 	ret

8111ea8c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
8111ea8c:	defff204 	addi	sp,sp,-56
8111ea90:	dfc00d15 	stw	ra,52(sp)
8111ea94:	df000c15 	stw	fp,48(sp)
8111ea98:	df000c04 	addi	fp,sp,48
8111ea9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
8111eaa0:	e0bfff17 	ldw	r2,-4(fp)
8111eaa4:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
8111eaa8:	e0bff617 	ldw	r2,-40(fp)
8111eaac:	10800017 	ldw	r2,0(r2)
8111eab0:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8111eab4:	e0bff717 	ldw	r2,-36(fp)
8111eab8:	10800104 	addi	r2,r2,4
8111eabc:	10800037 	ldwio	r2,0(r2)
8111eac0:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8111eac4:	e0bff817 	ldw	r2,-32(fp)
8111eac8:	1080c00c 	andi	r2,r2,768
8111eacc:	10009126 	beq	r2,zero,8111ed14 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
8111ead0:	e0bff817 	ldw	r2,-32(fp)
8111ead4:	1080400c 	andi	r2,r2,256
8111ead8:	10004726 	beq	r2,zero,8111ebf8 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
8111eadc:	00800074 	movhi	r2,1
8111eae0:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111eae4:	e0bff617 	ldw	r2,-40(fp)
8111eae8:	10800d17 	ldw	r2,52(r2)
8111eaec:	10800044 	addi	r2,r2,1
8111eaf0:	1081ffcc 	andi	r2,r2,2047
8111eaf4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
8111eaf8:	e0bff617 	ldw	r2,-40(fp)
8111eafc:	10c00e17 	ldw	r3,56(r2)
8111eb00:	e0bff917 	ldw	r2,-28(fp)
8111eb04:	18802726 	beq	r3,r2,8111eba4 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
8111eb08:	e0bff717 	ldw	r2,-36(fp)
8111eb0c:	10800037 	ldwio	r2,0(r2)
8111eb10:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
8111eb14:	e0bff417 	ldw	r2,-48(fp)
8111eb18:	10a0000c 	andi	r2,r2,32768
8111eb1c:	10002326 	beq	r2,zero,8111ebac <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
8111eb20:	e0bff617 	ldw	r2,-40(fp)
8111eb24:	10800d17 	ldw	r2,52(r2)
8111eb28:	e0fff417 	ldw	r3,-48(fp)
8111eb2c:	1809883a 	mov	r4,r3
8111eb30:	e0fff617 	ldw	r3,-40(fp)
8111eb34:	1885883a 	add	r2,r3,r2
8111eb38:	10801104 	addi	r2,r2,68
8111eb3c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111eb40:	e0bff617 	ldw	r2,-40(fp)
8111eb44:	10800d17 	ldw	r2,52(r2)
8111eb48:	10800044 	addi	r2,r2,1
8111eb4c:	10c1ffcc 	andi	r3,r2,2047
8111eb50:	e0bff617 	ldw	r2,-40(fp)
8111eb54:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
8111eb58:	e0bff617 	ldw	r2,-40(fp)
8111eb5c:	10800c17 	ldw	r2,48(r2)
8111eb60:	e0bffb15 	stw	r2,-20(fp)
8111eb64:	00800044 	movi	r2,1
8111eb68:	e0bffc0d 	sth	r2,-16(fp)
8111eb6c:	00800044 	movi	r2,1
8111eb70:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8111eb74:	d0a04543 	ldbu	r2,-32491(gp)
8111eb78:	10803fcc 	andi	r2,r2,255
8111eb7c:	103fd926 	beq	r2,zero,8111eae4 <__reset+0xfb0feae4>
  {
    OSFlagPost (group, flags, opt, &err);
8111eb80:	e0bffc0b 	ldhu	r2,-16(fp)
8111eb84:	e0fffc83 	ldbu	r3,-14(fp)
8111eb88:	e13ffdc4 	addi	r4,fp,-9
8111eb8c:	200f883a 	mov	r7,r4
8111eb90:	180d883a 	mov	r6,r3
8111eb94:	100b883a 	mov	r5,r2
8111eb98:	e13ffb17 	ldw	r4,-20(fp)
8111eb9c:	1119f480 	call	81119f48 <OSFlagPost>
      }
8111eba0:	003fd006 	br	8111eae4 <__reset+0xfb0feae4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
8111eba4:	0001883a 	nop
8111eba8:	00000106 	br	8111ebb0 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
8111ebac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8111ebb0:	e0bff417 	ldw	r2,-48(fp)
8111ebb4:	10bfffec 	andhi	r2,r2,65535
8111ebb8:	10000f26 	beq	r2,zero,8111ebf8 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8111ebbc:	e0bff617 	ldw	r2,-40(fp)
8111ebc0:	10c00817 	ldw	r3,32(r2)
8111ebc4:	00bfff84 	movi	r2,-2
8111ebc8:	1886703a 	and	r3,r3,r2
8111ebcc:	e0bff617 	ldw	r2,-40(fp)
8111ebd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8111ebd4:	e0bff717 	ldw	r2,-36(fp)
8111ebd8:	10800104 	addi	r2,r2,4
8111ebdc:	1007883a 	mov	r3,r2
8111ebe0:	e0bff617 	ldw	r2,-40(fp)
8111ebe4:	10800817 	ldw	r2,32(r2)
8111ebe8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8111ebec:	e0bff717 	ldw	r2,-36(fp)
8111ebf0:	10800104 	addi	r2,r2,4
8111ebf4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
8111ebf8:	e0bff817 	ldw	r2,-32(fp)
8111ebfc:	1080800c 	andi	r2,r2,512
8111ec00:	103fac26 	beq	r2,zero,8111eab4 <__reset+0xfb0feab4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8111ec04:	e0bff817 	ldw	r2,-32(fp)
8111ec08:	1004d43a 	srli	r2,r2,16
8111ec0c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8111ec10:	00002606 	br	8111ecac <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8111ec14:	e0bff717 	ldw	r2,-36(fp)
8111ec18:	e0fff617 	ldw	r3,-40(fp)
8111ec1c:	18c01017 	ldw	r3,64(r3)
8111ec20:	e13ff617 	ldw	r4,-40(fp)
8111ec24:	20c7883a 	add	r3,r4,r3
8111ec28:	18c21104 	addi	r3,r3,2116
8111ec2c:	18c00003 	ldbu	r3,0(r3)
8111ec30:	18c03fcc 	andi	r3,r3,255
8111ec34:	18c0201c 	xori	r3,r3,128
8111ec38:	18ffe004 	addi	r3,r3,-128
8111ec3c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111ec40:	e0bff617 	ldw	r2,-40(fp)
8111ec44:	10801017 	ldw	r2,64(r2)
8111ec48:	10800044 	addi	r2,r2,1
8111ec4c:	10c1ffcc 	andi	r3,r2,2047
8111ec50:	e0bff617 	ldw	r2,-40(fp)
8111ec54:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
8111ec58:	e0bff617 	ldw	r2,-40(fp)
8111ec5c:	10800c17 	ldw	r2,48(r2)
8111ec60:	e0bffa15 	stw	r2,-24(fp)
8111ec64:	00800084 	movi	r2,2
8111ec68:	e0bffd0d 	sth	r2,-12(fp)
8111ec6c:	00800044 	movi	r2,1
8111ec70:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8111ec74:	d0a04543 	ldbu	r2,-32491(gp)
8111ec78:	10803fcc 	andi	r2,r2,255
8111ec7c:	10000826 	beq	r2,zero,8111eca0 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
8111ec80:	e0bffd0b 	ldhu	r2,-12(fp)
8111ec84:	e0fffd83 	ldbu	r3,-10(fp)
8111ec88:	e13ffe04 	addi	r4,fp,-8
8111ec8c:	200f883a 	mov	r7,r4
8111ec90:	180d883a 	mov	r6,r3
8111ec94:	100b883a 	mov	r5,r2
8111ec98:	e13ffa17 	ldw	r4,-24(fp)
8111ec9c:	1119f480 	call	81119f48 <OSFlagPost>

        space--;
8111eca0:	e0bff517 	ldw	r2,-44(fp)
8111eca4:	10bfffc4 	addi	r2,r2,-1
8111eca8:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
8111ecac:	e0bff517 	ldw	r2,-44(fp)
8111ecb0:	10000526 	beq	r2,zero,8111ecc8 <altera_avalon_jtag_uart_irq+0x23c>
8111ecb4:	e0bff617 	ldw	r2,-40(fp)
8111ecb8:	10c01017 	ldw	r3,64(r2)
8111ecbc:	e0bff617 	ldw	r2,-40(fp)
8111ecc0:	10800f17 	ldw	r2,60(r2)
8111ecc4:	18bfd31e 	bne	r3,r2,8111ec14 <__reset+0xfb0fec14>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
8111ecc8:	e0bff517 	ldw	r2,-44(fp)
8111eccc:	103f7926 	beq	r2,zero,8111eab4 <__reset+0xfb0feab4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8111ecd0:	e0bff617 	ldw	r2,-40(fp)
8111ecd4:	10c00817 	ldw	r3,32(r2)
8111ecd8:	00bfff44 	movi	r2,-3
8111ecdc:	1886703a 	and	r3,r3,r2
8111ece0:	e0bff617 	ldw	r2,-40(fp)
8111ece4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8111ece8:	e0bff617 	ldw	r2,-40(fp)
8111ecec:	10800017 	ldw	r2,0(r2)
8111ecf0:	10800104 	addi	r2,r2,4
8111ecf4:	1007883a 	mov	r3,r2
8111ecf8:	e0bff617 	ldw	r2,-40(fp)
8111ecfc:	10800817 	ldw	r2,32(r2)
8111ed00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8111ed04:	e0bff717 	ldw	r2,-36(fp)
8111ed08:	10800104 	addi	r2,r2,4
8111ed0c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
8111ed10:	003f6806 	br	8111eab4 <__reset+0xfb0feab4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
8111ed14:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8111ed18:	0001883a 	nop
8111ed1c:	e037883a 	mov	sp,fp
8111ed20:	dfc00117 	ldw	ra,4(sp)
8111ed24:	df000017 	ldw	fp,0(sp)
8111ed28:	dec00204 	addi	sp,sp,8
8111ed2c:	f800283a 	ret

8111ed30 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
8111ed30:	defff904 	addi	sp,sp,-28
8111ed34:	dfc00615 	stw	ra,24(sp)
8111ed38:	df000515 	stw	fp,20(sp)
8111ed3c:	df000504 	addi	fp,sp,20
8111ed40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
8111ed44:	e0bfff17 	ldw	r2,-4(fp)
8111ed48:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8111ed4c:	e0bffb17 	ldw	r2,-20(fp)
8111ed50:	10800017 	ldw	r2,0(r2)
8111ed54:	10800104 	addi	r2,r2,4
8111ed58:	10800037 	ldwio	r2,0(r2)
8111ed5c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8111ed60:	e0bffc17 	ldw	r2,-16(fp)
8111ed64:	1081000c 	andi	r2,r2,1024
8111ed68:	10000b26 	beq	r2,zero,8111ed98 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8111ed6c:	e0bffb17 	ldw	r2,-20(fp)
8111ed70:	10800017 	ldw	r2,0(r2)
8111ed74:	10800104 	addi	r2,r2,4
8111ed78:	1007883a 	mov	r3,r2
8111ed7c:	e0bffb17 	ldw	r2,-20(fp)
8111ed80:	10800817 	ldw	r2,32(r2)
8111ed84:	10810014 	ori	r2,r2,1024
8111ed88:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8111ed8c:	e0bffb17 	ldw	r2,-20(fp)
8111ed90:	10000915 	stw	zero,36(r2)
8111ed94:	00002106 	br	8111ee1c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
8111ed98:	e0bffb17 	ldw	r2,-20(fp)
8111ed9c:	10c00917 	ldw	r3,36(r2)
8111eda0:	00a00034 	movhi	r2,32768
8111eda4:	10bfff04 	addi	r2,r2,-4
8111eda8:	10c01c36 	bltu	r2,r3,8111ee1c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
8111edac:	e0bffb17 	ldw	r2,-20(fp)
8111edb0:	10800917 	ldw	r2,36(r2)
8111edb4:	10c00044 	addi	r3,r2,1
8111edb8:	e0bffb17 	ldw	r2,-20(fp)
8111edbc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
8111edc0:	e0bffb17 	ldw	r2,-20(fp)
8111edc4:	10c00917 	ldw	r3,36(r2)
8111edc8:	e0bffb17 	ldw	r2,-20(fp)
8111edcc:	10800117 	ldw	r2,4(r2)
8111edd0:	18801236 	bltu	r3,r2,8111ee1c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
8111edd4:	e0bffb17 	ldw	r2,-20(fp)
8111edd8:	10800c17 	ldw	r2,48(r2)
8111eddc:	e0bffd15 	stw	r2,-12(fp)
8111ede0:	00800104 	movi	r2,4
8111ede4:	e0bffe0d 	sth	r2,-8(fp)
8111ede8:	00800044 	movi	r2,1
8111edec:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8111edf0:	d0a04543 	ldbu	r2,-32491(gp)
8111edf4:	10803fcc 	andi	r2,r2,255
8111edf8:	10000826 	beq	r2,zero,8111ee1c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
8111edfc:	e0bffe0b 	ldhu	r2,-8(fp)
8111ee00:	e0fffe83 	ldbu	r3,-6(fp)
8111ee04:	e13ffec4 	addi	r4,fp,-5
8111ee08:	200f883a 	mov	r7,r4
8111ee0c:	180d883a 	mov	r6,r3
8111ee10:	100b883a 	mov	r5,r2
8111ee14:	e13ffd17 	ldw	r4,-12(fp)
8111ee18:	1119f480 	call	81119f48 <OSFlagPost>
8111ee1c:	d0a05b17 	ldw	r2,-32404(gp)
    }
  }

  return alt_ticks_per_second();
}
8111ee20:	e037883a 	mov	sp,fp
8111ee24:	dfc00117 	ldw	ra,4(sp)
8111ee28:	df000017 	ldw	fp,0(sp)
8111ee2c:	dec00204 	addi	sp,sp,8
8111ee30:	f800283a 	ret

8111ee34 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
8111ee34:	defffd04 	addi	sp,sp,-12
8111ee38:	df000215 	stw	fp,8(sp)
8111ee3c:	df000204 	addi	fp,sp,8
8111ee40:	e13ffe15 	stw	r4,-8(fp)
8111ee44:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8111ee48:	00000506 	br	8111ee60 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8111ee4c:	e0bfff17 	ldw	r2,-4(fp)
8111ee50:	1090000c 	andi	r2,r2,16384
8111ee54:	10000226 	beq	r2,zero,8111ee60 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
8111ee58:	00bffd44 	movi	r2,-11
8111ee5c:	00000b06 	br	8111ee8c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8111ee60:	e0bffe17 	ldw	r2,-8(fp)
8111ee64:	10c01017 	ldw	r3,64(r2)
8111ee68:	e0bffe17 	ldw	r2,-8(fp)
8111ee6c:	10800f17 	ldw	r2,60(r2)
8111ee70:	18800526 	beq	r3,r2,8111ee88 <altera_avalon_jtag_uart_close+0x54>
8111ee74:	e0bffe17 	ldw	r2,-8(fp)
8111ee78:	10c00917 	ldw	r3,36(r2)
8111ee7c:	e0bffe17 	ldw	r2,-8(fp)
8111ee80:	10800117 	ldw	r2,4(r2)
8111ee84:	18bff136 	bltu	r3,r2,8111ee4c <__reset+0xfb0fee4c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8111ee88:	0005883a 	mov	r2,zero
}
8111ee8c:	e037883a 	mov	sp,fp
8111ee90:	df000017 	ldw	fp,0(sp)
8111ee94:	dec00104 	addi	sp,sp,4
8111ee98:	f800283a 	ret

8111ee9c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
8111ee9c:	defffa04 	addi	sp,sp,-24
8111eea0:	df000515 	stw	fp,20(sp)
8111eea4:	df000504 	addi	fp,sp,20
8111eea8:	e13ffd15 	stw	r4,-12(fp)
8111eeac:	e17ffe15 	stw	r5,-8(fp)
8111eeb0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
8111eeb4:	00bff9c4 	movi	r2,-25
8111eeb8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
8111eebc:	e0bffe17 	ldw	r2,-8(fp)
8111eec0:	10da8060 	cmpeqi	r3,r2,27137
8111eec4:	1800031e 	bne	r3,zero,8111eed4 <altera_avalon_jtag_uart_ioctl+0x38>
8111eec8:	109a80a0 	cmpeqi	r2,r2,27138
8111eecc:	1000181e 	bne	r2,zero,8111ef30 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
8111eed0:	00002906 	br	8111ef78 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
8111eed4:	e0bffd17 	ldw	r2,-12(fp)
8111eed8:	10c00117 	ldw	r3,4(r2)
8111eedc:	00a00034 	movhi	r2,32768
8111eee0:	10bfffc4 	addi	r2,r2,-1
8111eee4:	18802126 	beq	r3,r2,8111ef6c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
8111eee8:	e0bfff17 	ldw	r2,-4(fp)
8111eeec:	10800017 	ldw	r2,0(r2)
8111eef0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
8111eef4:	e0bffc17 	ldw	r2,-16(fp)
8111eef8:	10800090 	cmplti	r2,r2,2
8111eefc:	1000061e 	bne	r2,zero,8111ef18 <altera_avalon_jtag_uart_ioctl+0x7c>
8111ef00:	e0fffc17 	ldw	r3,-16(fp)
8111ef04:	00a00034 	movhi	r2,32768
8111ef08:	10bfffc4 	addi	r2,r2,-1
8111ef0c:	18800226 	beq	r3,r2,8111ef18 <altera_avalon_jtag_uart_ioctl+0x7c>
8111ef10:	e0bffc17 	ldw	r2,-16(fp)
8111ef14:	00000206 	br	8111ef20 <altera_avalon_jtag_uart_ioctl+0x84>
8111ef18:	00a00034 	movhi	r2,32768
8111ef1c:	10bfff84 	addi	r2,r2,-2
8111ef20:	e0fffd17 	ldw	r3,-12(fp)
8111ef24:	18800115 	stw	r2,4(r3)
      rc = 0;
8111ef28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8111ef2c:	00000f06 	br	8111ef6c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
8111ef30:	e0bffd17 	ldw	r2,-12(fp)
8111ef34:	10c00117 	ldw	r3,4(r2)
8111ef38:	00a00034 	movhi	r2,32768
8111ef3c:	10bfffc4 	addi	r2,r2,-1
8111ef40:	18800c26 	beq	r3,r2,8111ef74 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
8111ef44:	e0bffd17 	ldw	r2,-12(fp)
8111ef48:	10c00917 	ldw	r3,36(r2)
8111ef4c:	e0bffd17 	ldw	r2,-12(fp)
8111ef50:	10800117 	ldw	r2,4(r2)
8111ef54:	1885803a 	cmpltu	r2,r3,r2
8111ef58:	10c03fcc 	andi	r3,r2,255
8111ef5c:	e0bfff17 	ldw	r2,-4(fp)
8111ef60:	10c00015 	stw	r3,0(r2)
      rc = 0;
8111ef64:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8111ef68:	00000206 	br	8111ef74 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
8111ef6c:	0001883a 	nop
8111ef70:	00000106 	br	8111ef78 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
8111ef74:	0001883a 	nop

  default:
    break;
  }

  return rc;
8111ef78:	e0bffb17 	ldw	r2,-20(fp)
}
8111ef7c:	e037883a 	mov	sp,fp
8111ef80:	df000017 	ldw	fp,0(sp)
8111ef84:	dec00104 	addi	sp,sp,4
8111ef88:	f800283a 	ret

8111ef8c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
8111ef8c:	deffed04 	addi	sp,sp,-76
8111ef90:	dfc01215 	stw	ra,72(sp)
8111ef94:	df001115 	stw	fp,68(sp)
8111ef98:	df001104 	addi	fp,sp,68
8111ef9c:	e13ffc15 	stw	r4,-16(fp)
8111efa0:	e17ffd15 	stw	r5,-12(fp)
8111efa4:	e1bffe15 	stw	r6,-8(fp)
8111efa8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
8111efac:	e0bffd17 	ldw	r2,-12(fp)
8111efb0:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
8111efb4:	e0bffc17 	ldw	r2,-16(fp)
8111efb8:	10800a17 	ldw	r2,40(r2)
8111efbc:	e0bff815 	stw	r2,-32(fp)
8111efc0:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8111efc4:	e0bff90b 	ldhu	r2,-28(fp)
8111efc8:	e0fffb04 	addi	r3,fp,-20
8111efcc:	180d883a 	mov	r6,r3
8111efd0:	100b883a 	mov	r5,r2
8111efd4:	e13ff817 	ldw	r4,-32(fp)
8111efd8:	111c3980 	call	8111c398 <OSSemPend>

  while (space > 0)
8111efdc:	00006106 	br	8111f164 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
8111efe0:	e0bffc17 	ldw	r2,-16(fp)
8111efe4:	10800d17 	ldw	r2,52(r2)
8111efe8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
8111efec:	e0bffc17 	ldw	r2,-16(fp)
8111eff0:	10800e17 	ldw	r2,56(r2)
8111eff4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
8111eff8:	e0fff317 	ldw	r3,-52(fp)
8111effc:	e0bff417 	ldw	r2,-48(fp)
8111f000:	18800536 	bltu	r3,r2,8111f018 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
8111f004:	e0fff317 	ldw	r3,-52(fp)
8111f008:	e0bff417 	ldw	r2,-48(fp)
8111f00c:	1885c83a 	sub	r2,r3,r2
8111f010:	e0bff115 	stw	r2,-60(fp)
8111f014:	00000406 	br	8111f028 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
8111f018:	00c20004 	movi	r3,2048
8111f01c:	e0bff417 	ldw	r2,-48(fp)
8111f020:	1885c83a 	sub	r2,r3,r2
8111f024:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
8111f028:	e0bff117 	ldw	r2,-60(fp)
8111f02c:	10001e26 	beq	r2,zero,8111f0a8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
8111f030:	e0fffe17 	ldw	r3,-8(fp)
8111f034:	e0bff117 	ldw	r2,-60(fp)
8111f038:	1880022e 	bgeu	r3,r2,8111f044 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
8111f03c:	e0bffe17 	ldw	r2,-8(fp)
8111f040:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
8111f044:	e0bffc17 	ldw	r2,-16(fp)
8111f048:	10c01104 	addi	r3,r2,68
8111f04c:	e0bff417 	ldw	r2,-48(fp)
8111f050:	1885883a 	add	r2,r3,r2
8111f054:	e1bff117 	ldw	r6,-60(fp)
8111f058:	100b883a 	mov	r5,r2
8111f05c:	e13ff017 	ldw	r4,-64(fp)
8111f060:	1108ac80 	call	81108ac8 <memcpy>
      ptr   += n;
8111f064:	e0fff017 	ldw	r3,-64(fp)
8111f068:	e0bff117 	ldw	r2,-60(fp)
8111f06c:	1885883a 	add	r2,r3,r2
8111f070:	e0bff015 	stw	r2,-64(fp)
      space -= n;
8111f074:	e0fffe17 	ldw	r3,-8(fp)
8111f078:	e0bff117 	ldw	r2,-60(fp)
8111f07c:	1885c83a 	sub	r2,r3,r2
8111f080:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111f084:	e0fff417 	ldw	r3,-48(fp)
8111f088:	e0bff117 	ldw	r2,-60(fp)
8111f08c:	1885883a 	add	r2,r3,r2
8111f090:	10c1ffcc 	andi	r3,r2,2047
8111f094:	e0bffc17 	ldw	r2,-16(fp)
8111f098:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
8111f09c:	e0bffe17 	ldw	r2,-8(fp)
8111f0a0:	00bfcf16 	blt	zero,r2,8111efe0 <__reset+0xfb0fefe0>
8111f0a4:	00000106 	br	8111f0ac <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
8111f0a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
8111f0ac:	e0fff017 	ldw	r3,-64(fp)
8111f0b0:	e0bffd17 	ldw	r2,-12(fp)
8111f0b4:	18802e1e 	bne	r3,r2,8111f170 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8111f0b8:	e0bfff17 	ldw	r2,-4(fp)
8111f0bc:	1090000c 	andi	r2,r2,16384
8111f0c0:	10002d1e 	bne	r2,zero,8111f178 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
8111f0c4:	d0a04543 	ldbu	r2,-32491(gp)
8111f0c8:	10803fcc 	andi	r2,r2,255
8111f0cc:	10800058 	cmpnei	r2,r2,1
8111f0d0:	1000161e 	bne	r2,zero,8111f12c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
8111f0d4:	e0bffc17 	ldw	r2,-16(fp)
8111f0d8:	10800c17 	ldw	r2,48(r2)
8111f0dc:	e0bff215 	stw	r2,-56(fp)
8111f0e0:	00800144 	movi	r2,5
8111f0e4:	e0bff98d 	sth	r2,-26(fp)
8111f0e8:	00bfe0c4 	movi	r2,-125
8111f0ec:	e0bffa05 	stb	r2,-24(fp)
8111f0f0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8111f0f4:	d0a04543 	ldbu	r2,-32491(gp)
8111f0f8:	10803fcc 	andi	r2,r2,255
8111f0fc:	10001526 	beq	r2,zero,8111f154 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8111f100:	e0fff98b 	ldhu	r3,-26(fp)
8111f104:	e13ffa03 	ldbu	r4,-24(fp)
8111f108:	e17ffa8b 	ldhu	r5,-22(fp)
8111f10c:	e0bffb44 	addi	r2,fp,-19
8111f110:	d8800015 	stw	r2,0(sp)
8111f114:	280f883a 	mov	r7,r5
8111f118:	200d883a 	mov	r6,r4
8111f11c:	180b883a 	mov	r5,r3
8111f120:	e13ff217 	ldw	r4,-56(fp)
8111f124:	11199300 	call	81119930 <OSFlagPend>
8111f128:	00000a06 	br	8111f154 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
8111f12c:	0001883a 	nop
8111f130:	e0bffc17 	ldw	r2,-16(fp)
8111f134:	10c00d17 	ldw	r3,52(r2)
8111f138:	e0bff317 	ldw	r2,-52(fp)
8111f13c:	1880051e 	bne	r3,r2,8111f154 <altera_avalon_jtag_uart_read+0x1c8>
8111f140:	e0bffc17 	ldw	r2,-16(fp)
8111f144:	10c00917 	ldw	r3,36(r2)
8111f148:	e0bffc17 	ldw	r2,-16(fp)
8111f14c:	10800117 	ldw	r2,4(r2)
8111f150:	18bff736 	bltu	r3,r2,8111f130 <__reset+0xfb0ff130>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
8111f154:	e0bffc17 	ldw	r2,-16(fp)
8111f158:	10c00d17 	ldw	r3,52(r2)
8111f15c:	e0bff317 	ldw	r2,-52(fp)
8111f160:	18800726 	beq	r3,r2,8111f180 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8111f164:	e0bffe17 	ldw	r2,-8(fp)
8111f168:	00bf9d16 	blt	zero,r2,8111efe0 <__reset+0xfb0fefe0>
8111f16c:	00000506 	br	8111f184 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8111f170:	0001883a 	nop
8111f174:	00000306 	br	8111f184 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
8111f178:	0001883a 	nop
8111f17c:	00000106 	br	8111f184 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8111f180:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
8111f184:	e0bffc17 	ldw	r2,-16(fp)
8111f188:	10800a17 	ldw	r2,40(r2)
8111f18c:	1009883a 	mov	r4,r2
8111f190:	111c7100 	call	8111c710 <OSSemPost>

  if (ptr != buffer)
8111f194:	e0fff017 	ldw	r3,-64(fp)
8111f198:	e0bffd17 	ldw	r2,-12(fp)
8111f19c:	18801826 	beq	r3,r2,8111f200 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111f1a0:	0005303a 	rdctl	r2,status
8111f1a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111f1a8:	e0fff717 	ldw	r3,-36(fp)
8111f1ac:	00bfff84 	movi	r2,-2
8111f1b0:	1884703a 	and	r2,r3,r2
8111f1b4:	1001703a 	wrctl	status,r2
  
  return context;
8111f1b8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
8111f1bc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8111f1c0:	e0bffc17 	ldw	r2,-16(fp)
8111f1c4:	10800817 	ldw	r2,32(r2)
8111f1c8:	10c00054 	ori	r3,r2,1
8111f1cc:	e0bffc17 	ldw	r2,-16(fp)
8111f1d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8111f1d4:	e0bffc17 	ldw	r2,-16(fp)
8111f1d8:	10800017 	ldw	r2,0(r2)
8111f1dc:	10800104 	addi	r2,r2,4
8111f1e0:	1007883a 	mov	r3,r2
8111f1e4:	e0bffc17 	ldw	r2,-16(fp)
8111f1e8:	10800817 	ldw	r2,32(r2)
8111f1ec:	18800035 	stwio	r2,0(r3)
8111f1f0:	e0bff617 	ldw	r2,-40(fp)
8111f1f4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111f1f8:	e0bff517 	ldw	r2,-44(fp)
8111f1fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
8111f200:	e0fff017 	ldw	r3,-64(fp)
8111f204:	e0bffd17 	ldw	r2,-12(fp)
8111f208:	18800426 	beq	r3,r2,8111f21c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
8111f20c:	e0fff017 	ldw	r3,-64(fp)
8111f210:	e0bffd17 	ldw	r2,-12(fp)
8111f214:	1885c83a 	sub	r2,r3,r2
8111f218:	00000606 	br	8111f234 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
8111f21c:	e0bfff17 	ldw	r2,-4(fp)
8111f220:	1090000c 	andi	r2,r2,16384
8111f224:	10000226 	beq	r2,zero,8111f230 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
8111f228:	00bffd44 	movi	r2,-11
8111f22c:	00000106 	br	8111f234 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
8111f230:	00bffec4 	movi	r2,-5
}
8111f234:	e037883a 	mov	sp,fp
8111f238:	dfc00117 	ldw	ra,4(sp)
8111f23c:	df000017 	ldw	fp,0(sp)
8111f240:	dec00204 	addi	sp,sp,8
8111f244:	f800283a 	ret

8111f248 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
8111f248:	deffed04 	addi	sp,sp,-76
8111f24c:	dfc01215 	stw	ra,72(sp)
8111f250:	df001115 	stw	fp,68(sp)
8111f254:	df001104 	addi	fp,sp,68
8111f258:	e13ffc15 	stw	r4,-16(fp)
8111f25c:	e17ffd15 	stw	r5,-12(fp)
8111f260:	e1bffe15 	stw	r6,-8(fp)
8111f264:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8111f268:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
8111f26c:	e0bffd17 	ldw	r2,-12(fp)
8111f270:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
8111f274:	e0bffc17 	ldw	r2,-16(fp)
8111f278:	10800b17 	ldw	r2,44(r2)
8111f27c:	e0bff815 	stw	r2,-32(fp)
8111f280:	e03ff90d 	sth	zero,-28(fp)
8111f284:	e0bff90b 	ldhu	r2,-28(fp)
8111f288:	e0fffb44 	addi	r3,fp,-19
8111f28c:	180d883a 	mov	r6,r3
8111f290:	100b883a 	mov	r5,r2
8111f294:	e13ff817 	ldw	r4,-32(fp)
8111f298:	111c3980 	call	8111c398 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8111f29c:	00003706 	br	8111f37c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
8111f2a0:	e0bffc17 	ldw	r2,-16(fp)
8111f2a4:	10800f17 	ldw	r2,60(r2)
8111f2a8:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
8111f2ac:	e0bffc17 	ldw	r2,-16(fp)
8111f2b0:	10801017 	ldw	r2,64(r2)
8111f2b4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
8111f2b8:	e0fff417 	ldw	r3,-48(fp)
8111f2bc:	e0bff017 	ldw	r2,-64(fp)
8111f2c0:	1880062e 	bgeu	r3,r2,8111f2dc <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
8111f2c4:	e0fff017 	ldw	r3,-64(fp)
8111f2c8:	e0bff417 	ldw	r2,-48(fp)
8111f2cc:	1885c83a 	sub	r2,r3,r2
8111f2d0:	10bfffc4 	addi	r2,r2,-1
8111f2d4:	e0bff115 	stw	r2,-60(fp)
8111f2d8:	00000b06 	br	8111f308 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
8111f2dc:	e0bff017 	ldw	r2,-64(fp)
8111f2e0:	10000526 	beq	r2,zero,8111f2f8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
8111f2e4:	00c20004 	movi	r3,2048
8111f2e8:	e0bff417 	ldw	r2,-48(fp)
8111f2ec:	1885c83a 	sub	r2,r3,r2
8111f2f0:	e0bff115 	stw	r2,-60(fp)
8111f2f4:	00000406 	br	8111f308 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
8111f2f8:	00c1ffc4 	movi	r3,2047
8111f2fc:	e0bff417 	ldw	r2,-48(fp)
8111f300:	1885c83a 	sub	r2,r3,r2
8111f304:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
8111f308:	e0bff117 	ldw	r2,-60(fp)
8111f30c:	10001e26 	beq	r2,zero,8111f388 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
8111f310:	e0fffe17 	ldw	r3,-8(fp)
8111f314:	e0bff117 	ldw	r2,-60(fp)
8111f318:	1880022e 	bgeu	r3,r2,8111f324 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
8111f31c:	e0bffe17 	ldw	r2,-8(fp)
8111f320:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
8111f324:	e0bffc17 	ldw	r2,-16(fp)
8111f328:	10c21104 	addi	r3,r2,2116
8111f32c:	e0bff417 	ldw	r2,-48(fp)
8111f330:	1885883a 	add	r2,r3,r2
8111f334:	e1bff117 	ldw	r6,-60(fp)
8111f338:	e17ffd17 	ldw	r5,-12(fp)
8111f33c:	1009883a 	mov	r4,r2
8111f340:	1108ac80 	call	81108ac8 <memcpy>
      ptr   += n;
8111f344:	e0fffd17 	ldw	r3,-12(fp)
8111f348:	e0bff117 	ldw	r2,-60(fp)
8111f34c:	1885883a 	add	r2,r3,r2
8111f350:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
8111f354:	e0fffe17 	ldw	r3,-8(fp)
8111f358:	e0bff117 	ldw	r2,-60(fp)
8111f35c:	1885c83a 	sub	r2,r3,r2
8111f360:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8111f364:	e0fff417 	ldw	r3,-48(fp)
8111f368:	e0bff117 	ldw	r2,-60(fp)
8111f36c:	1885883a 	add	r2,r3,r2
8111f370:	10c1ffcc 	andi	r3,r2,2047
8111f374:	e0bffc17 	ldw	r2,-16(fp)
8111f378:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8111f37c:	e0bffe17 	ldw	r2,-8(fp)
8111f380:	00bfc716 	blt	zero,r2,8111f2a0 <__reset+0xfb0ff2a0>
8111f384:	00000106 	br	8111f38c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8111f388:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8111f38c:	0005303a 	rdctl	r2,status
8111f390:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8111f394:	e0fff717 	ldw	r3,-36(fp)
8111f398:	00bfff84 	movi	r2,-2
8111f39c:	1884703a 	and	r2,r3,r2
8111f3a0:	1001703a 	wrctl	status,r2
  
  return context;
8111f3a4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8111f3a8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8111f3ac:	e0bffc17 	ldw	r2,-16(fp)
8111f3b0:	10800817 	ldw	r2,32(r2)
8111f3b4:	10c00094 	ori	r3,r2,2
8111f3b8:	e0bffc17 	ldw	r2,-16(fp)
8111f3bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8111f3c0:	e0bffc17 	ldw	r2,-16(fp)
8111f3c4:	10800017 	ldw	r2,0(r2)
8111f3c8:	10800104 	addi	r2,r2,4
8111f3cc:	1007883a 	mov	r3,r2
8111f3d0:	e0bffc17 	ldw	r2,-16(fp)
8111f3d4:	10800817 	ldw	r2,32(r2)
8111f3d8:	18800035 	stwio	r2,0(r3)
8111f3dc:	e0bff617 	ldw	r2,-40(fp)
8111f3e0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8111f3e4:	e0bff317 	ldw	r2,-52(fp)
8111f3e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8111f3ec:	e0bffe17 	ldw	r2,-8(fp)
8111f3f0:	00802a0e 	bge	zero,r2,8111f49c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
8111f3f4:	e0bfff17 	ldw	r2,-4(fp)
8111f3f8:	1090000c 	andi	r2,r2,16384
8111f3fc:	10002a1e 	bne	r2,zero,8111f4a8 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
8111f400:	d0a04543 	ldbu	r2,-32491(gp)
8111f404:	10803fcc 	andi	r2,r2,255
8111f408:	10800058 	cmpnei	r2,r2,1
8111f40c:	1000161e 	bne	r2,zero,8111f468 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
8111f410:	e0bffc17 	ldw	r2,-16(fp)
8111f414:	10800c17 	ldw	r2,48(r2)
8111f418:	e0bff515 	stw	r2,-44(fp)
8111f41c:	00800184 	movi	r2,6
8111f420:	e0bff98d 	sth	r2,-26(fp)
8111f424:	00bfe0c4 	movi	r2,-125
8111f428:	e0bffa05 	stb	r2,-24(fp)
8111f42c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8111f430:	d0a04543 	ldbu	r2,-32491(gp)
8111f434:	10803fcc 	andi	r2,r2,255
8111f438:	10001526 	beq	r2,zero,8111f490 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8111f43c:	e0fff98b 	ldhu	r3,-26(fp)
8111f440:	e13ffa03 	ldbu	r4,-24(fp)
8111f444:	e17ffa8b 	ldhu	r5,-22(fp)
8111f448:	e0bffb04 	addi	r2,fp,-20
8111f44c:	d8800015 	stw	r2,0(sp)
8111f450:	280f883a 	mov	r7,r5
8111f454:	200d883a 	mov	r6,r4
8111f458:	180b883a 	mov	r5,r3
8111f45c:	e13ff517 	ldw	r4,-44(fp)
8111f460:	11199300 	call	81119930 <OSFlagPend>
8111f464:	00000a06 	br	8111f490 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8111f468:	0001883a 	nop
8111f46c:	e0bffc17 	ldw	r2,-16(fp)
8111f470:	10c01017 	ldw	r3,64(r2)
8111f474:	e0bff017 	ldw	r2,-64(fp)
8111f478:	1880051e 	bne	r3,r2,8111f490 <altera_avalon_jtag_uart_write+0x248>
8111f47c:	e0bffc17 	ldw	r2,-16(fp)
8111f480:	10c00917 	ldw	r3,36(r2)
8111f484:	e0bffc17 	ldw	r2,-16(fp)
8111f488:	10800117 	ldw	r2,4(r2)
8111f48c:	18bff736 	bltu	r3,r2,8111f46c <__reset+0xfb0ff46c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
8111f490:	e0bffc17 	ldw	r2,-16(fp)
8111f494:	10800917 	ldw	r2,36(r2)
8111f498:	1000051e 	bne	r2,zero,8111f4b0 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
8111f49c:	e0bffe17 	ldw	r2,-8(fp)
8111f4a0:	00bfb616 	blt	zero,r2,8111f37c <__reset+0xfb0ff37c>
8111f4a4:	00000306 	br	8111f4b4 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8111f4a8:	0001883a 	nop
8111f4ac:	00000106 	br	8111f4b4 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
8111f4b0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
8111f4b4:	e0bffc17 	ldw	r2,-16(fp)
8111f4b8:	10800b17 	ldw	r2,44(r2)
8111f4bc:	1009883a 	mov	r4,r2
8111f4c0:	111c7100 	call	8111c710 <OSSemPost>

  if (ptr != start)
8111f4c4:	e0fffd17 	ldw	r3,-12(fp)
8111f4c8:	e0bff217 	ldw	r2,-56(fp)
8111f4cc:	18800426 	beq	r3,r2,8111f4e0 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
8111f4d0:	e0fffd17 	ldw	r3,-12(fp)
8111f4d4:	e0bff217 	ldw	r2,-56(fp)
8111f4d8:	1885c83a 	sub	r2,r3,r2
8111f4dc:	00000606 	br	8111f4f8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
8111f4e0:	e0bfff17 	ldw	r2,-4(fp)
8111f4e4:	1090000c 	andi	r2,r2,16384
8111f4e8:	10000226 	beq	r2,zero,8111f4f4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
8111f4ec:	00bffd44 	movi	r2,-11
8111f4f0:	00000106 	br	8111f4f8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8111f4f4:	00bffec4 	movi	r2,-5
}
8111f4f8:	e037883a 	mov	sp,fp
8111f4fc:	dfc00117 	ldw	ra,4(sp)
8111f500:	df000017 	ldw	fp,0(sp)
8111f504:	dec00204 	addi	sp,sp,8
8111f508:	f800283a 	ret

8111f50c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8111f50c:	defffe04 	addi	sp,sp,-8
8111f510:	dfc00115 	stw	ra,4(sp)
8111f514:	df000015 	stw	fp,0(sp)
8111f518:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8111f51c:	d0a00d17 	ldw	r2,-32716(gp)
8111f520:	10000326 	beq	r2,zero,8111f530 <alt_get_errno+0x24>
8111f524:	d0a00d17 	ldw	r2,-32716(gp)
8111f528:	103ee83a 	callr	r2
8111f52c:	00000106 	br	8111f534 <alt_get_errno+0x28>
8111f530:	d0a03604 	addi	r2,gp,-32552
}
8111f534:	e037883a 	mov	sp,fp
8111f538:	dfc00117 	ldw	ra,4(sp)
8111f53c:	df000017 	ldw	fp,0(sp)
8111f540:	dec00204 	addi	sp,sp,8
8111f544:	f800283a 	ret

8111f548 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
8111f548:	defffc04 	addi	sp,sp,-16
8111f54c:	df000315 	stw	fp,12(sp)
8111f550:	df000304 	addi	fp,sp,12
8111f554:	e13ffe15 	stw	r4,-8(fp)
8111f558:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
8111f55c:	e0bffe17 	ldw	r2,-8(fp)
8111f560:	10800317 	ldw	r2,12(r2)
8111f564:	10800037 	ldwio	r2,0(r2)
8111f568:	1080040c 	andi	r2,r2,16
8111f56c:	10000226 	beq	r2,zero,8111f578 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
8111f570:	00bffc04 	movi	r2,-16
8111f574:	00003906 	br	8111f65c <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
8111f578:	e0bffe17 	ldw	r2,-8(fp)
8111f57c:	10800317 	ldw	r2,12(r2)
8111f580:	10800404 	addi	r2,r2,16
8111f584:	e0fffe17 	ldw	r3,-8(fp)
8111f588:	18c00317 	ldw	r3,12(r3)
8111f58c:	18c00404 	addi	r3,r3,16
8111f590:	19000037 	ldwio	r4,0(r3)
8111f594:	00fff7c4 	movi	r3,-33
8111f598:	20c6703a 	and	r3,r4,r3
8111f59c:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
8111f5a0:	e0bffe17 	ldw	r2,-8(fp)
8111f5a4:	10800317 	ldw	r2,12(r2)
8111f5a8:	00c03fc4 	movi	r3,255
8111f5ac:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
8111f5b0:	e0bffe17 	ldw	r2,-8(fp)
8111f5b4:	10800317 	ldw	r2,12(r2)
8111f5b8:	10800804 	addi	r2,r2,32
8111f5bc:	e0ffff17 	ldw	r3,-4(fp)
8111f5c0:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
8111f5c4:	e0bffe17 	ldw	r2,-8(fp)
8111f5c8:	10800917 	ldw	r2,36(r2)
8111f5cc:	10001126 	beq	r2,zero,8111f614 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8111f5d0:	e0bffe17 	ldw	r2,-8(fp)
8111f5d4:	10800317 	ldw	r2,12(r2)
8111f5d8:	10800404 	addi	r2,r2,16
8111f5dc:	10800037 	ldwio	r2,0(r2)
8111f5e0:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
8111f5e4:	e0bffe17 	ldw	r2,-8(fp)
8111f5e8:	10c00b17 	ldw	r3,44(r2)
8111f5ec:	e0bffd17 	ldw	r2,-12(fp)
8111f5f0:	1884b03a 	or	r2,r3,r2
8111f5f4:	10801814 	ori	r2,r2,96
8111f5f8:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8111f5fc:	e0bffe17 	ldw	r2,-8(fp)
8111f600:	10800317 	ldw	r2,12(r2)
8111f604:	10800404 	addi	r2,r2,16
8111f608:	e0fffd17 	ldw	r3,-12(fp)
8111f60c:	10c00035 	stwio	r3,0(r2)
8111f610:	00001106 	br	8111f658 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8111f614:	e0bffe17 	ldw	r2,-8(fp)
8111f618:	10800317 	ldw	r2,12(r2)
8111f61c:	10800404 	addi	r2,r2,16
8111f620:	10800037 	ldwio	r2,0(r2)
8111f624:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
8111f628:	e0bffd17 	ldw	r2,-12(fp)
8111f62c:	10801814 	ori	r2,r2,96
8111f630:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
8111f634:	e0fffd17 	ldw	r3,-12(fp)
8111f638:	00bffbc4 	movi	r2,-17
8111f63c:	1884703a 	and	r2,r3,r2
8111f640:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8111f644:	e0bffe17 	ldw	r2,-8(fp)
8111f648:	10800317 	ldw	r2,12(r2)
8111f64c:	10800404 	addi	r2,r2,16
8111f650:	e0fffd17 	ldw	r3,-12(fp)
8111f654:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
8111f658:	0005883a 	mov	r2,zero
}
8111f65c:	e037883a 	mov	sp,fp
8111f660:	df000017 	ldw	fp,0(sp)
8111f664:	dec00104 	addi	sp,sp,4
8111f668:	f800283a 	ret

8111f66c <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
8111f66c:	defffc04 	addi	sp,sp,-16
8111f670:	df000315 	stw	fp,12(sp)
8111f674:	df000304 	addi	fp,sp,12
8111f678:	e13ffe15 	stw	r4,-8(fp)
8111f67c:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
8111f680:	0001883a 	nop
8111f684:	e0bffe17 	ldw	r2,-8(fp)
8111f688:	10800317 	ldw	r2,12(r2)
8111f68c:	10800037 	ldwio	r2,0(r2)
8111f690:	1080040c 	andi	r2,r2,16
8111f694:	103ffb1e 	bne	r2,zero,8111f684 <__reset+0xfb0ff684>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
8111f698:	e0bffe17 	ldw	r2,-8(fp)
8111f69c:	10800317 	ldw	r2,12(r2)
8111f6a0:	10800404 	addi	r2,r2,16
8111f6a4:	e0fffe17 	ldw	r3,-8(fp)
8111f6a8:	18c00317 	ldw	r3,12(r3)
8111f6ac:	18c00404 	addi	r3,r3,16
8111f6b0:	19000037 	ldwio	r4,0(r3)
8111f6b4:	00fff7c4 	movi	r3,-33
8111f6b8:	20c6703a 	and	r3,r4,r3
8111f6bc:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
8111f6c0:	e0bffe17 	ldw	r2,-8(fp)
8111f6c4:	10800317 	ldw	r2,12(r2)
8111f6c8:	00c03fc4 	movi	r3,255
8111f6cc:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
8111f6d0:	e0bffe17 	ldw	r2,-8(fp)
8111f6d4:	10800317 	ldw	r2,12(r2)
8111f6d8:	10800804 	addi	r2,r2,32
8111f6dc:	e0ffff17 	ldw	r3,-4(fp)
8111f6e0:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
8111f6e4:	e0bffe17 	ldw	r2,-8(fp)
8111f6e8:	10800317 	ldw	r2,12(r2)
8111f6ec:	10800404 	addi	r2,r2,16
8111f6f0:	e0fffe17 	ldw	r3,-8(fp)
8111f6f4:	18c00317 	ldw	r3,12(r3)
8111f6f8:	18c00404 	addi	r3,r3,16
8111f6fc:	18c00037 	ldwio	r3,0(r3)
8111f700:	18c01814 	ori	r3,r3,96
8111f704:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
8111f708:	0001883a 	nop
8111f70c:	e0bffe17 	ldw	r2,-8(fp)
8111f710:	10800317 	ldw	r2,12(r2)
8111f714:	10800037 	ldwio	r2,0(r2)
8111f718:	1080040c 	andi	r2,r2,16
8111f71c:	103ffb1e 	bne	r2,zero,8111f70c <__reset+0xfb0ff70c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
8111f720:	e0bffe17 	ldw	r2,-8(fp)
8111f724:	10800317 	ldw	r2,12(r2)
8111f728:	10800404 	addi	r2,r2,16
8111f72c:	e0fffe17 	ldw	r3,-8(fp)
8111f730:	18c00317 	ldw	r3,12(r3)
8111f734:	18c00404 	addi	r3,r3,16
8111f738:	19000037 	ldwio	r4,0(r3)
8111f73c:	00fff7c4 	movi	r3,-33
8111f740:	20c6703a 	and	r3,r4,r3
8111f744:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
8111f748:	e0bffe17 	ldw	r2,-8(fp)
8111f74c:	10800317 	ldw	r2,12(r2)
8111f750:	10800037 	ldwio	r2,0(r2)
8111f754:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
8111f758:	e0bffe17 	ldw	r2,-8(fp)
8111f75c:	10800317 	ldw	r2,12(r2)
8111f760:	00c03fc4 	movi	r3,255
8111f764:	10c00035 	stwio	r3,0(r2)

  return status;
8111f768:	e0bffd03 	ldbu	r2,-12(fp)
}
8111f76c:	e037883a 	mov	sp,fp
8111f770:	df000017 	ldw	fp,0(sp)
8111f774:	dec00104 	addi	sp,sp,4
8111f778:	f800283a 	ret

8111f77c <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
8111f77c:	defff404 	addi	sp,sp,-48
8111f780:	dfc00b15 	stw	ra,44(sp)
8111f784:	df000a15 	stw	fp,40(sp)
8111f788:	df000a04 	addi	fp,sp,40
8111f78c:	e13ffb15 	stw	r4,-20(fp)
8111f790:	e17ffc15 	stw	r5,-16(fp)
8111f794:	e1bffd15 	stw	r6,-12(fp)
8111f798:	e1fffe15 	stw	r7,-8(fp)
8111f79c:	e0800217 	ldw	r2,8(fp)
8111f7a0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
8111f7a4:	e0bfff0b 	ldhu	r2,-4(fp)
8111f7a8:	d8000415 	stw	zero,16(sp)
8111f7ac:	d8000315 	stw	zero,12(sp)
8111f7b0:	e0c00417 	ldw	r3,16(fp)
8111f7b4:	d8c00215 	stw	r3,8(sp)
8111f7b8:	e0c00317 	ldw	r3,12(fp)
8111f7bc:	d8c00115 	stw	r3,4(sp)
8111f7c0:	d8800015 	stw	r2,0(sp)
8111f7c4:	e1fffe17 	ldw	r7,-8(fp)
8111f7c8:	e1bffd17 	ldw	r6,-12(fp)
8111f7cc:	e17ffc17 	ldw	r5,-16(fp)
8111f7d0:	e13ffb17 	ldw	r4,-20(fp)
8111f7d4:	111f7f00 	call	8111f7f0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
8111f7d8:	0001883a 	nop
8111f7dc:	e037883a 	mov	sp,fp
8111f7e0:	dfc00117 	ldw	ra,4(sp)
8111f7e4:	df000017 	ldw	fp,0(sp)
8111f7e8:	dec00204 	addi	sp,sp,8
8111f7ec:	f800283a 	ret

8111f7f0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
8111f7f0:	defff204 	addi	sp,sp,-56
8111f7f4:	dfc00d15 	stw	ra,52(sp)
8111f7f8:	df000c15 	stw	fp,48(sp)
8111f7fc:	df000c04 	addi	fp,sp,48
8111f800:	e13ffb15 	stw	r4,-20(fp)
8111f804:	e17ffc15 	stw	r5,-16(fp)
8111f808:	e1bffd15 	stw	r6,-12(fp)
8111f80c:	e1fffe15 	stw	r7,-8(fp)
8111f810:	e0800217 	ldw	r2,8(fp)
8111f814:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
8111f818:	e0bfff0b 	ldhu	r2,-4(fp)
8111f81c:	d8000615 	stw	zero,24(sp)
8111f820:	e0c00617 	ldw	r3,24(fp)
8111f824:	d8c00515 	stw	r3,20(sp)
8111f828:	e0c00517 	ldw	r3,20(fp)
8111f82c:	d8c00415 	stw	r3,16(sp)
8111f830:	e0c00417 	ldw	r3,16(fp)
8111f834:	d8c00315 	stw	r3,12(sp)
8111f838:	e0c00317 	ldw	r3,12(fp)
8111f83c:	d8c00215 	stw	r3,8(sp)
8111f840:	d8000115 	stw	zero,4(sp)
8111f844:	d8800015 	stw	r2,0(sp)
8111f848:	e1fffe17 	ldw	r7,-8(fp)
8111f84c:	e1bffd17 	ldw	r6,-12(fp)
8111f850:	e17ffc17 	ldw	r5,-16(fp)
8111f854:	e13ffb17 	ldw	r4,-20(fp)
8111f858:	111fd840 	call	8111fd84 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
8111f85c:	0001883a 	nop
8111f860:	e037883a 	mov	sp,fp
8111f864:	dfc00117 	ldw	ra,4(sp)
8111f868:	df000017 	ldw	fp,0(sp)
8111f86c:	dec00204 	addi	sp,sp,8
8111f870:	f800283a 	ret

8111f874 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
8111f874:	defff804 	addi	sp,sp,-32
8111f878:	dfc00715 	stw	ra,28(sp)
8111f87c:	df000615 	stw	fp,24(sp)
8111f880:	df000604 	addi	fp,sp,24
8111f884:	e13ffc15 	stw	r4,-16(fp)
8111f888:	e17ffd15 	stw	r5,-12(fp)
8111f88c:	e1bffe15 	stw	r6,-8(fp)
8111f890:	3805883a 	mov	r2,r7
8111f894:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
8111f898:	e0ffff0b 	ldhu	r3,-4(fp)
8111f89c:	d8000115 	stw	zero,4(sp)
8111f8a0:	e0800217 	ldw	r2,8(fp)
8111f8a4:	d8800015 	stw	r2,0(sp)
8111f8a8:	180f883a 	mov	r7,r3
8111f8ac:	e1bffe17 	ldw	r6,-8(fp)
8111f8b0:	e17ffd17 	ldw	r5,-12(fp)
8111f8b4:	e13ffc17 	ldw	r4,-16(fp)
8111f8b8:	111f8d40 	call	8111f8d4 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
8111f8bc:	0001883a 	nop
8111f8c0:	e037883a 	mov	sp,fp
8111f8c4:	dfc00117 	ldw	ra,4(sp)
8111f8c8:	df000017 	ldw	fp,0(sp)
8111f8cc:	dec00204 	addi	sp,sp,8
8111f8d0:	f800283a 	ret

8111f8d4 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
8111f8d4:	defff304 	addi	sp,sp,-52
8111f8d8:	dfc00c15 	stw	ra,48(sp)
8111f8dc:	df000b15 	stw	fp,44(sp)
8111f8e0:	df000b04 	addi	fp,sp,44
8111f8e4:	e13ffc15 	stw	r4,-16(fp)
8111f8e8:	e17ffd15 	stw	r5,-12(fp)
8111f8ec:	e1bffe15 	stw	r6,-8(fp)
8111f8f0:	3805883a 	mov	r2,r7
8111f8f4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
8111f8f8:	e0bfff0b 	ldhu	r2,-4(fp)
8111f8fc:	d8000615 	stw	zero,24(sp)
8111f900:	e0c00317 	ldw	r3,12(fp)
8111f904:	d8c00515 	stw	r3,20(sp)
8111f908:	d8000415 	stw	zero,16(sp)
8111f90c:	e0c00217 	ldw	r3,8(fp)
8111f910:	d8c00315 	stw	r3,12(sp)
8111f914:	d8000215 	stw	zero,8(sp)
8111f918:	d8000115 	stw	zero,4(sp)
8111f91c:	d8800015 	stw	r2,0(sp)
8111f920:	e1fffe17 	ldw	r7,-8(fp)
8111f924:	000d883a 	mov	r6,zero
8111f928:	e17ffd17 	ldw	r5,-12(fp)
8111f92c:	e13ffc17 	ldw	r4,-16(fp)
8111f930:	111fd840 	call	8111fd84 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
8111f934:	0001883a 	nop
8111f938:	e037883a 	mov	sp,fp
8111f93c:	dfc00117 	ldw	ra,4(sp)
8111f940:	df000017 	ldw	fp,0(sp)
8111f944:	dec00204 	addi	sp,sp,8
8111f948:	f800283a 	ret

8111f94c <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
8111f94c:	defff404 	addi	sp,sp,-48
8111f950:	dfc00b15 	stw	ra,44(sp)
8111f954:	df000a15 	stw	fp,40(sp)
8111f958:	df000a04 	addi	fp,sp,40
8111f95c:	e13ffb15 	stw	r4,-20(fp)
8111f960:	e17ffc15 	stw	r5,-16(fp)
8111f964:	e1bffd15 	stw	r6,-12(fp)
8111f968:	3807883a 	mov	r3,r7
8111f96c:	e0800517 	ldw	r2,20(fp)
8111f970:	e0fffe0d 	sth	r3,-8(fp)
8111f974:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
8111f978:	e0fffe0b 	ldhu	r3,-8(fp)
8111f97c:	e0bfff03 	ldbu	r2,-4(fp)
8111f980:	d8800415 	stw	r2,16(sp)
8111f984:	d8000315 	stw	zero,12(sp)
8111f988:	e0800417 	ldw	r2,16(fp)
8111f98c:	d8800215 	stw	r2,8(sp)
8111f990:	e0800317 	ldw	r2,12(fp)
8111f994:	d8800115 	stw	r2,4(sp)
8111f998:	e0800217 	ldw	r2,8(fp)
8111f99c:	d8800015 	stw	r2,0(sp)
8111f9a0:	180f883a 	mov	r7,r3
8111f9a4:	e1bffd17 	ldw	r6,-12(fp)
8111f9a8:	e17ffc17 	ldw	r5,-16(fp)
8111f9ac:	e13ffb17 	ldw	r4,-20(fp)
8111f9b0:	111f9cc0 	call	8111f9cc <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
8111f9b4:	0001883a 	nop
8111f9b8:	e037883a 	mov	sp,fp
8111f9bc:	dfc00117 	ldw	ra,4(sp)
8111f9c0:	df000017 	ldw	fp,0(sp)
8111f9c4:	dec00204 	addi	sp,sp,8
8111f9c8:	f800283a 	ret

8111f9cc <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
8111f9cc:	defff204 	addi	sp,sp,-56
8111f9d0:	dfc00d15 	stw	ra,52(sp)
8111f9d4:	df000c15 	stw	fp,48(sp)
8111f9d8:	df000c04 	addi	fp,sp,48
8111f9dc:	e13ffb15 	stw	r4,-20(fp)
8111f9e0:	e17ffc15 	stw	r5,-16(fp)
8111f9e4:	e1bffd15 	stw	r6,-12(fp)
8111f9e8:	3807883a 	mov	r3,r7
8111f9ec:	e0800617 	ldw	r2,24(fp)
8111f9f0:	e0fffe0d 	sth	r3,-8(fp)
8111f9f4:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
8111f9f8:	e0bffe0b 	ldhu	r2,-8(fp)
8111f9fc:	e0ffff03 	ldbu	r3,-4(fp)
8111fa00:	d8c00615 	stw	r3,24(sp)
8111fa04:	d8000515 	stw	zero,20(sp)
8111fa08:	e0c00517 	ldw	r3,20(fp)
8111fa0c:	d8c00415 	stw	r3,16(sp)
8111fa10:	e0c00317 	ldw	r3,12(fp)
8111fa14:	d8c00315 	stw	r3,12(sp)
8111fa18:	e0c00217 	ldw	r3,8(fp)
8111fa1c:	d8c00215 	stw	r3,8(sp)
8111fa20:	e0c00417 	ldw	r3,16(fp)
8111fa24:	d8c00115 	stw	r3,4(sp)
8111fa28:	d8800015 	stw	r2,0(sp)
8111fa2c:	000f883a 	mov	r7,zero
8111fa30:	e1bffd17 	ldw	r6,-12(fp)
8111fa34:	e17ffc17 	ldw	r5,-16(fp)
8111fa38:	e13ffb17 	ldw	r4,-20(fp)
8111fa3c:	111fd840 	call	8111fd84 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
8111fa40:	0001883a 	nop
8111fa44:	e037883a 	mov	sp,fp
8111fa48:	dfc00117 	ldw	ra,4(sp)
8111fa4c:	df000017 	ldw	fp,0(sp)
8111fa50:	dec00204 	addi	sp,sp,8
8111fa54:	f800283a 	ret

8111fa58 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
8111fa58:	defffb04 	addi	sp,sp,-20
8111fa5c:	df000415 	stw	fp,16(sp)
8111fa60:	df000404 	addi	fp,sp,16
8111fa64:	e13ffc15 	stw	r4,-16(fp)
8111fa68:	e17ffd15 	stw	r5,-12(fp)
8111fa6c:	e1bffe15 	stw	r6,-8(fp)
8111fa70:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
8111fa74:	e0bffc17 	ldw	r2,-16(fp)
8111fa78:	e0fffd17 	ldw	r3,-12(fp)
8111fa7c:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
8111fa80:	e0bffc17 	ldw	r2,-16(fp)
8111fa84:	e0ffff17 	ldw	r3,-4(fp)
8111fa88:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
8111fa8c:	e0bffc17 	ldw	r2,-16(fp)
8111fa90:	e0fffe17 	ldw	r3,-8(fp)
8111fa94:	10c00b15 	stw	r3,44(r2)
}
8111fa98:	0001883a 	nop
8111fa9c:	e037883a 	mov	sp,fp
8111faa0:	df000017 	ldw	fp,0(sp)
8111faa4:	dec00104 	addi	sp,sp,4
8111faa8:	f800283a 	ret

8111faac <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
8111faac:	defffd04 	addi	sp,sp,-12
8111fab0:	df000215 	stw	fp,8(sp)
8111fab4:	df000204 	addi	fp,sp,8
8111fab8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8111fabc:	e0bfff17 	ldw	r2,-4(fp)
8111fac0:	10800317 	ldw	r2,12(r2)
8111fac4:	10800404 	addi	r2,r2,16
8111fac8:	10800037 	ldwio	r2,0(r2)
8111facc:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
8111fad0:	e0bffe17 	ldw	r2,-8(fp)
8111fad4:	10800814 	ori	r2,r2,32
8111fad8:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8111fadc:	e0bfff17 	ldw	r2,-4(fp)
8111fae0:	10800317 	ldw	r2,12(r2)
8111fae4:	10800404 	addi	r2,r2,16
8111fae8:	e0fffe17 	ldw	r3,-8(fp)
8111faec:	10c00035 	stwio	r3,0(r2)
}
8111faf0:	0001883a 	nop
8111faf4:	e037883a 	mov	sp,fp
8111faf8:	df000017 	ldw	fp,0(sp)
8111fafc:	dec00104 	addi	sp,sp,4
8111fb00:	f800283a 	ret

8111fb04 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
8111fb04:	defffd04 	addi	sp,sp,-12
8111fb08:	df000215 	stw	fp,8(sp)
8111fb0c:	df000204 	addi	fp,sp,8
8111fb10:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8111fb14:	e0bfff17 	ldw	r2,-4(fp)
8111fb18:	10800317 	ldw	r2,12(r2)
8111fb1c:	10800404 	addi	r2,r2,16
8111fb20:	10800037 	ldwio	r2,0(r2)
8111fb24:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
8111fb28:	e0fffe17 	ldw	r3,-8(fp)
8111fb2c:	00bff7c4 	movi	r2,-33
8111fb30:	1884703a 	and	r2,r3,r2
8111fb34:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8111fb38:	e0bfff17 	ldw	r2,-4(fp)
8111fb3c:	10800317 	ldw	r2,12(r2)
8111fb40:	10800404 	addi	r2,r2,16
8111fb44:	e0fffe17 	ldw	r3,-8(fp)
8111fb48:	10c00035 	stwio	r3,0(r2)
}
8111fb4c:	0001883a 	nop
8111fb50:	e037883a 	mov	sp,fp
8111fb54:	df000017 	ldw	fp,0(sp)
8111fb58:	dec00104 	addi	sp,sp,4
8111fb5c:	f800283a 	ret

8111fb60 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
8111fb60:	defffe04 	addi	sp,sp,-8
8111fb64:	df000115 	stw	fp,4(sp)
8111fb68:	df000104 	addi	fp,sp,4
8111fb6c:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
8111fb70:	e0bfff17 	ldw	r2,-4(fp)
8111fb74:	10800784 	addi	r2,r2,30
8111fb78:	10800023 	ldbuio	r2,0(r2)
8111fb7c:	10803fcc 	andi	r2,r2,255
8111fb80:	10801fcc 	andi	r2,r2,127
8111fb84:	10000226 	beq	r2,zero,8111fb90 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
8111fb88:	00bffec4 	movi	r2,-5
8111fb8c:	00000906 	br	8111fbb4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
8111fb90:	e0bfff17 	ldw	r2,-4(fp)
8111fb94:	108007c4 	addi	r2,r2,31
8111fb98:	10800023 	ldbuio	r2,0(r2)
8111fb9c:	10803fcc 	andi	r2,r2,255
8111fba0:	1080200c 	andi	r2,r2,128
8111fba4:	10000226 	beq	r2,zero,8111fbb0 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
8111fba8:	00bfe244 	movi	r2,-119
8111fbac:	00000106 	br	8111fbb4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
8111fbb0:	0005883a 	mov	r2,zero
}
8111fbb4:	e037883a 	mov	sp,fp
8111fbb8:	df000017 	ldw	fp,0(sp)
8111fbbc:	dec00104 	addi	sp,sp,4
8111fbc0:	f800283a 	ret

8111fbc4 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
8111fbc4:	defffc04 	addi	sp,sp,-16
8111fbc8:	dfc00315 	stw	ra,12(sp)
8111fbcc:	df000215 	stw	fp,8(sp)
8111fbd0:	df000204 	addi	fp,sp,8
8111fbd4:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
8111fbd8:	d1602e04 	addi	r5,gp,-32584
8111fbdc:	e13fff17 	ldw	r4,-4(fp)
8111fbe0:	11233000 	call	81123300 <alt_find_dev>
8111fbe4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
8111fbe8:	e0bffe17 	ldw	r2,-8(fp)
8111fbec:	1000041e 	bne	r2,zero,8111fc00 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
8111fbf0:	111f50c0 	call	8111f50c <alt_get_errno>
8111fbf4:	1007883a 	mov	r3,r2
8111fbf8:	008004c4 	movi	r2,19
8111fbfc:	18800015 	stw	r2,0(r3)
  }

  return dev;
8111fc00:	e0bffe17 	ldw	r2,-8(fp)
}
8111fc04:	e037883a 	mov	sp,fp
8111fc08:	dfc00117 	ldw	ra,4(sp)
8111fc0c:	df000017 	ldw	fp,0(sp)
8111fc10:	dec00204 	addi	sp,sp,8
8111fc14:	f800283a 	ret

8111fc18 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
8111fc18:	defff104 	addi	sp,sp,-60
8111fc1c:	dfc00e15 	stw	ra,56(sp)
8111fc20:	df000d15 	stw	fp,52(sp)
8111fc24:	df000d04 	addi	fp,sp,52
8111fc28:	e13ffa15 	stw	r4,-24(fp)
8111fc2c:	e17ffb15 	stw	r5,-20(fp)
8111fc30:	e1bffc15 	stw	r6,-16(fp)
8111fc34:	e1fffd15 	stw	r7,-12(fp)
8111fc38:	e0c00217 	ldw	r3,8(fp)
8111fc3c:	e0800617 	ldw	r2,24(fp)
8111fc40:	e0fffe0d 	sth	r3,-8(fp)
8111fc44:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
8111fc48:	e0bffe0b 	ldhu	r2,-8(fp)
8111fc4c:	e0ffff03 	ldbu	r3,-4(fp)
8111fc50:	d8c00615 	stw	r3,24(sp)
8111fc54:	d8000515 	stw	zero,20(sp)
8111fc58:	d8000415 	stw	zero,16(sp)
8111fc5c:	e0c00517 	ldw	r3,20(fp)
8111fc60:	d8c00315 	stw	r3,12(sp)
8111fc64:	e0c00417 	ldw	r3,16(fp)
8111fc68:	d8c00215 	stw	r3,8(sp)
8111fc6c:	e0c00317 	ldw	r3,12(fp)
8111fc70:	d8c00115 	stw	r3,4(sp)
8111fc74:	d8800015 	stw	r2,0(sp)
8111fc78:	e1fffd17 	ldw	r7,-12(fp)
8111fc7c:	e1bffc17 	ldw	r6,-16(fp)
8111fc80:	e17ffb17 	ldw	r5,-20(fp)
8111fc84:	e13ffa17 	ldw	r4,-24(fp)
8111fc88:	111fd840 	call	8111fd84 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
8111fc8c:	0001883a 	nop
8111fc90:	e037883a 	mov	sp,fp
8111fc94:	dfc00117 	ldw	ra,4(sp)
8111fc98:	df000017 	ldw	fp,0(sp)
8111fc9c:	dec00204 	addi	sp,sp,8
8111fca0:	f800283a 	ret

8111fca4 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
8111fca4:	defffc04 	addi	sp,sp,-16
8111fca8:	df000315 	stw	fp,12(sp)
8111fcac:	df000304 	addi	fp,sp,12
8111fcb0:	e13ffe15 	stw	r4,-8(fp)
8111fcb4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8111fcb8:	e0bffe17 	ldw	r2,-8(fp)
8111fcbc:	10800317 	ldw	r2,12(r2)
8111fcc0:	10800404 	addi	r2,r2,16
8111fcc4:	10800037 	ldwio	r2,0(r2)
8111fcc8:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
8111fccc:	e0fffd17 	ldw	r3,-12(fp)
8111fcd0:	00a00434 	movhi	r2,32784
8111fcd4:	10bfffc4 	addi	r2,r2,-1
8111fcd8:	1884703a 	and	r2,r3,r2
8111fcdc:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
8111fce0:	e0bfff17 	ldw	r2,-4(fp)
8111fce4:	1004953a 	slli	r2,r2,20
8111fce8:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
8111fcec:	e0bffd17 	ldw	r2,-12(fp)
8111fcf0:	1884b03a 	or	r2,r3,r2
8111fcf4:	10800134 	orhi	r2,r2,4
8111fcf8:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8111fcfc:	e0bffe17 	ldw	r2,-8(fp)
8111fd00:	10800317 	ldw	r2,12(r2)
8111fd04:	10800404 	addi	r2,r2,16
8111fd08:	e0fffd17 	ldw	r3,-12(fp)
8111fd0c:	10c00035 	stwio	r3,0(r2)
  
  return;
8111fd10:	0001883a 	nop
}
8111fd14:	e037883a 	mov	sp,fp
8111fd18:	df000017 	ldw	fp,0(sp)
8111fd1c:	dec00104 	addi	sp,sp,4
8111fd20:	f800283a 	ret

8111fd24 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
8111fd24:	defffd04 	addi	sp,sp,-12
8111fd28:	df000215 	stw	fp,8(sp)
8111fd2c:	df000204 	addi	fp,sp,8
8111fd30:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8111fd34:	e0bfff17 	ldw	r2,-4(fp)
8111fd38:	10800317 	ldw	r2,12(r2)
8111fd3c:	10800404 	addi	r2,r2,16
8111fd40:	10800037 	ldwio	r2,0(r2)
8111fd44:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
8111fd48:	e0fffe17 	ldw	r3,-8(fp)
8111fd4c:	00bfff34 	movhi	r2,65532
8111fd50:	10bfffc4 	addi	r2,r2,-1
8111fd54:	1884703a 	and	r2,r3,r2
8111fd58:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8111fd5c:	e0bfff17 	ldw	r2,-4(fp)
8111fd60:	10800317 	ldw	r2,12(r2)
8111fd64:	10800404 	addi	r2,r2,16
8111fd68:	e0fffe17 	ldw	r3,-8(fp)
8111fd6c:	10c00035 	stwio	r3,0(r2)
  
  return;
8111fd70:	0001883a 	nop
}
8111fd74:	e037883a 	mov	sp,fp
8111fd78:	df000017 	ldw	fp,0(sp)
8111fd7c:	dec00104 	addi	sp,sp,4
8111fd80:	f800283a 	ret

8111fd84 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
8111fd84:	defff804 	addi	sp,sp,-32
8111fd88:	dfc00715 	stw	ra,28(sp)
8111fd8c:	df000615 	stw	fp,24(sp)
8111fd90:	df000604 	addi	fp,sp,24
8111fd94:	e13ffa15 	stw	r4,-24(fp)
8111fd98:	e17ffb15 	stw	r5,-20(fp)
8111fd9c:	e1bffc15 	stw	r6,-16(fp)
8111fda0:	e1fffd15 	stw	r7,-12(fp)
8111fda4:	e0c00217 	ldw	r3,8(fp)
8111fda8:	e0800817 	ldw	r2,32(fp)
8111fdac:	e0fffe0d 	sth	r3,-8(fp)
8111fdb0:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
8111fdb4:	e0bffb17 	ldw	r2,-20(fp)
8111fdb8:	108007c4 	addi	r2,r2,31
8111fdbc:	e0fffb17 	ldw	r3,-20(fp)
8111fdc0:	18c007c3 	ldbu	r3,31(r3)
8111fdc4:	19003fcc 	andi	r4,r3,255
8111fdc8:	00ffdfc4 	movi	r3,-129
8111fdcc:	20c6703a 	and	r3,r4,r3
8111fdd0:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
8111fdd4:	e0bffa17 	ldw	r2,-24(fp)
8111fdd8:	e0fffc17 	ldw	r3,-16(fp)
8111fddc:	19403fcc 	andi	r5,r3,255
8111fde0:	10c00003 	ldbu	r3,0(r2)
8111fde4:	1806703a 	and	r3,r3,zero
8111fde8:	1809883a 	mov	r4,r3
8111fdec:	2807883a 	mov	r3,r5
8111fdf0:	20c6b03a 	or	r3,r4,r3
8111fdf4:	10c00005 	stb	r3,0(r2)
8111fdf8:	e0fffc17 	ldw	r3,-16(fp)
8111fdfc:	1806d23a 	srli	r3,r3,8
8111fe00:	19403fcc 	andi	r5,r3,255
8111fe04:	10c00043 	ldbu	r3,1(r2)
8111fe08:	1806703a 	and	r3,r3,zero
8111fe0c:	1809883a 	mov	r4,r3
8111fe10:	2807883a 	mov	r3,r5
8111fe14:	20c6b03a 	or	r3,r4,r3
8111fe18:	10c00045 	stb	r3,1(r2)
8111fe1c:	e0fffc17 	ldw	r3,-16(fp)
8111fe20:	1806d43a 	srli	r3,r3,16
8111fe24:	19403fcc 	andi	r5,r3,255
8111fe28:	10c00083 	ldbu	r3,2(r2)
8111fe2c:	1806703a 	and	r3,r3,zero
8111fe30:	1809883a 	mov	r4,r3
8111fe34:	2807883a 	mov	r3,r5
8111fe38:	20c6b03a 	or	r3,r4,r3
8111fe3c:	10c00085 	stb	r3,2(r2)
8111fe40:	e0fffc17 	ldw	r3,-16(fp)
8111fe44:	180ad63a 	srli	r5,r3,24
8111fe48:	10c000c3 	ldbu	r3,3(r2)
8111fe4c:	1806703a 	and	r3,r3,zero
8111fe50:	1809883a 	mov	r4,r3
8111fe54:	2807883a 	mov	r3,r5
8111fe58:	20c6b03a 	or	r3,r4,r3
8111fe5c:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
8111fe60:	e0bffa17 	ldw	r2,-24(fp)
8111fe64:	e0fffd17 	ldw	r3,-12(fp)
8111fe68:	19403fcc 	andi	r5,r3,255
8111fe6c:	10c00203 	ldbu	r3,8(r2)
8111fe70:	1806703a 	and	r3,r3,zero
8111fe74:	1809883a 	mov	r4,r3
8111fe78:	2807883a 	mov	r3,r5
8111fe7c:	20c6b03a 	or	r3,r4,r3
8111fe80:	10c00205 	stb	r3,8(r2)
8111fe84:	e0fffd17 	ldw	r3,-12(fp)
8111fe88:	1806d23a 	srli	r3,r3,8
8111fe8c:	19403fcc 	andi	r5,r3,255
8111fe90:	10c00243 	ldbu	r3,9(r2)
8111fe94:	1806703a 	and	r3,r3,zero
8111fe98:	1809883a 	mov	r4,r3
8111fe9c:	2807883a 	mov	r3,r5
8111fea0:	20c6b03a 	or	r3,r4,r3
8111fea4:	10c00245 	stb	r3,9(r2)
8111fea8:	e0fffd17 	ldw	r3,-12(fp)
8111feac:	1806d43a 	srli	r3,r3,16
8111feb0:	19403fcc 	andi	r5,r3,255
8111feb4:	10c00283 	ldbu	r3,10(r2)
8111feb8:	1806703a 	and	r3,r3,zero
8111febc:	1809883a 	mov	r4,r3
8111fec0:	2807883a 	mov	r3,r5
8111fec4:	20c6b03a 	or	r3,r4,r3
8111fec8:	10c00285 	stb	r3,10(r2)
8111fecc:	e0fffd17 	ldw	r3,-12(fp)
8111fed0:	180ad63a 	srli	r5,r3,24
8111fed4:	10c002c3 	ldbu	r3,11(r2)
8111fed8:	1806703a 	and	r3,r3,zero
8111fedc:	1809883a 	mov	r4,r3
8111fee0:	2807883a 	mov	r3,r5
8111fee4:	20c6b03a 	or	r3,r4,r3
8111fee8:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
8111feec:	e0bffa17 	ldw	r2,-24(fp)
8111fef0:	e0fffb17 	ldw	r3,-20(fp)
8111fef4:	19403fcc 	andi	r5,r3,255
8111fef8:	10c00403 	ldbu	r3,16(r2)
8111fefc:	1806703a 	and	r3,r3,zero
8111ff00:	1809883a 	mov	r4,r3
8111ff04:	2807883a 	mov	r3,r5
8111ff08:	20c6b03a 	or	r3,r4,r3
8111ff0c:	10c00405 	stb	r3,16(r2)
8111ff10:	e0fffb17 	ldw	r3,-20(fp)
8111ff14:	1806d23a 	srli	r3,r3,8
8111ff18:	19403fcc 	andi	r5,r3,255
8111ff1c:	10c00443 	ldbu	r3,17(r2)
8111ff20:	1806703a 	and	r3,r3,zero
8111ff24:	1809883a 	mov	r4,r3
8111ff28:	2807883a 	mov	r3,r5
8111ff2c:	20c6b03a 	or	r3,r4,r3
8111ff30:	10c00445 	stb	r3,17(r2)
8111ff34:	e0fffb17 	ldw	r3,-20(fp)
8111ff38:	1806d43a 	srli	r3,r3,16
8111ff3c:	19403fcc 	andi	r5,r3,255
8111ff40:	10c00483 	ldbu	r3,18(r2)
8111ff44:	1806703a 	and	r3,r3,zero
8111ff48:	1809883a 	mov	r4,r3
8111ff4c:	2807883a 	mov	r3,r5
8111ff50:	20c6b03a 	or	r3,r4,r3
8111ff54:	10c00485 	stb	r3,18(r2)
8111ff58:	e0fffb17 	ldw	r3,-20(fp)
8111ff5c:	180ad63a 	srli	r5,r3,24
8111ff60:	10c004c3 	ldbu	r3,19(r2)
8111ff64:	1806703a 	and	r3,r3,zero
8111ff68:	1809883a 	mov	r4,r3
8111ff6c:	2807883a 	mov	r3,r5
8111ff70:	20c6b03a 	or	r3,r4,r3
8111ff74:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
8111ff78:	e0bffa17 	ldw	r2,-24(fp)
8111ff7c:	10c00103 	ldbu	r3,4(r2)
8111ff80:	1806703a 	and	r3,r3,zero
8111ff84:	10c00105 	stb	r3,4(r2)
8111ff88:	10c00143 	ldbu	r3,5(r2)
8111ff8c:	1806703a 	and	r3,r3,zero
8111ff90:	10c00145 	stb	r3,5(r2)
8111ff94:	10c00183 	ldbu	r3,6(r2)
8111ff98:	1806703a 	and	r3,r3,zero
8111ff9c:	10c00185 	stb	r3,6(r2)
8111ffa0:	10c001c3 	ldbu	r3,7(r2)
8111ffa4:	1806703a 	and	r3,r3,zero
8111ffa8:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
8111ffac:	e0bffa17 	ldw	r2,-24(fp)
8111ffb0:	10c00303 	ldbu	r3,12(r2)
8111ffb4:	1806703a 	and	r3,r3,zero
8111ffb8:	10c00305 	stb	r3,12(r2)
8111ffbc:	10c00343 	ldbu	r3,13(r2)
8111ffc0:	1806703a 	and	r3,r3,zero
8111ffc4:	10c00345 	stb	r3,13(r2)
8111ffc8:	10c00383 	ldbu	r3,14(r2)
8111ffcc:	1806703a 	and	r3,r3,zero
8111ffd0:	10c00385 	stb	r3,14(r2)
8111ffd4:	10c003c3 	ldbu	r3,15(r2)
8111ffd8:	1806703a 	and	r3,r3,zero
8111ffdc:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
8111ffe0:	e0bffa17 	ldw	r2,-24(fp)
8111ffe4:	10c00503 	ldbu	r3,20(r2)
8111ffe8:	1806703a 	and	r3,r3,zero
8111ffec:	10c00505 	stb	r3,20(r2)
8111fff0:	10c00543 	ldbu	r3,21(r2)
8111fff4:	1806703a 	and	r3,r3,zero
8111fff8:	10c00545 	stb	r3,21(r2)
8111fffc:	10c00583 	ldbu	r3,22(r2)
81120000:	1806703a 	and	r3,r3,zero
81120004:	10c00585 	stb	r3,22(r2)
81120008:	10c005c3 	ldbu	r3,23(r2)
8112000c:	1806703a 	and	r3,r3,zero
81120010:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
81120014:	e0bffa17 	ldw	r2,-24(fp)
81120018:	e0fffe17 	ldw	r3,-8(fp)
8112001c:	19403fcc 	andi	r5,r3,255
81120020:	10c00603 	ldbu	r3,24(r2)
81120024:	1806703a 	and	r3,r3,zero
81120028:	1809883a 	mov	r4,r3
8112002c:	2807883a 	mov	r3,r5
81120030:	20c6b03a 	or	r3,r4,r3
81120034:	10c00605 	stb	r3,24(r2)
81120038:	e0fffe17 	ldw	r3,-8(fp)
8112003c:	1806d23a 	srli	r3,r3,8
81120040:	19403fcc 	andi	r5,r3,255
81120044:	10c00643 	ldbu	r3,25(r2)
81120048:	1806703a 	and	r3,r3,zero
8112004c:	1809883a 	mov	r4,r3
81120050:	2807883a 	mov	r3,r5
81120054:	20c6b03a 	or	r3,r4,r3
81120058:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
8112005c:	e0bffa17 	ldw	r2,-24(fp)
81120060:	10c00703 	ldbu	r3,28(r2)
81120064:	1806703a 	and	r3,r3,zero
81120068:	10c00705 	stb	r3,28(r2)
8112006c:	10c00743 	ldbu	r3,29(r2)
81120070:	1806703a 	and	r3,r3,zero
81120074:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
81120078:	e0bffa17 	ldw	r2,-24(fp)
8112007c:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
81120080:	e0800617 	ldw	r2,24(fp)
81120084:	1007883a 	mov	r3,r2
81120088:	e0bffa17 	ldw	r2,-24(fp)
8112008c:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
81120090:	e0800717 	ldw	r2,28(fp)
81120094:	1007883a 	mov	r3,r2
81120098:	e0bffa17 	ldw	r2,-24(fp)
8112009c:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
811200a0:	e0800317 	ldw	r2,12(fp)
811200a4:	10000226 	beq	r2,zero,811200b0 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
811200a8:	00bfe044 	movi	r2,-127
811200ac:	00000106 	br	811200b4 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
811200b0:	00bfe004 	movi	r2,-128
811200b4:	e0c00417 	ldw	r3,16(fp)
811200b8:	18000226 	beq	r3,zero,811200c4 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
811200bc:	00c00084 	movi	r3,2
811200c0:	00000106 	br	811200c8 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
811200c4:	0007883a 	mov	r3,zero
811200c8:	10c4b03a 	or	r2,r2,r3
811200cc:	1007883a 	mov	r3,r2
811200d0:	e0800517 	ldw	r2,20(fp)
811200d4:	10000226 	beq	r2,zero,811200e0 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
811200d8:	00800104 	movi	r2,4
811200dc:	00000106 	br	811200e4 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
811200e0:	0005883a 	mov	r2,zero
811200e4:	1884b03a 	or	r2,r3,r2
811200e8:	1007883a 	mov	r3,r2
811200ec:	e0bfff03 	ldbu	r2,-4(fp)
811200f0:	10000426 	beq	r2,zero,81120104 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
811200f4:	e0bfff03 	ldbu	r2,-4(fp)
811200f8:	108003cc 	andi	r2,r2,15
811200fc:	100490fa 	slli	r2,r2,3
81120100:	00000106 	br	81120108 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81120104:	0005883a 	mov	r2,zero
81120108:	1884b03a 	or	r2,r3,r2
8112010c:	1007883a 	mov	r3,r2
81120110:	e0bffa17 	ldw	r2,-24(fp)
81120114:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
81120118:	01400804 	movi	r5,32
8112011c:	e13ffa17 	ldw	r4,-24(fp)
81120120:	11231380 	call	81123138 <alt_dcache_flush>
}
81120124:	0001883a 	nop
81120128:	e037883a 	mov	sp,fp
8112012c:	dfc00117 	ldw	ra,4(sp)
81120130:	df000017 	ldw	fp,0(sp)
81120134:	dec00204 	addi	sp,sp,8
81120138:	f800283a 	ret

8112013c <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
8112013c:	defff904 	addi	sp,sp,-28
81120140:	dfc00615 	stw	ra,24(sp)
81120144:	df000515 	stw	fp,20(sp)
81120148:	df000504 	addi	fp,sp,20
8112014c:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
81120150:	e0bfff17 	ldw	r2,-4(fp)
81120154:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
81120158:	e0bffb17 	ldw	r2,-20(fp)
8112015c:	10800317 	ldw	r2,12(r2)
81120160:	10800404 	addi	r2,r2,16
81120164:	e0fffb17 	ldw	r3,-20(fp)
81120168:	18c00317 	ldw	r3,12(r3)
8112016c:	18c00404 	addi	r3,r3,16
81120170:	18c00037 	ldwio	r3,0(r3)
81120174:	18e00034 	orhi	r3,r3,32768
81120178:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
8112017c:	e0bffb17 	ldw	r2,-20(fp)
81120180:	10800317 	ldw	r2,12(r2)
81120184:	10800404 	addi	r2,r2,16
81120188:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
8112018c:	e0bffb17 	ldw	r2,-20(fp)
81120190:	10800917 	ldw	r2,36(r2)
81120194:	10001226 	beq	r2,zero,811201e0 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120198:	0005303a 	rdctl	r2,status
8112019c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811201a0:	e0fffd17 	ldw	r3,-12(fp)
811201a4:	00bfff84 	movi	r2,-2
811201a8:	1884703a 	and	r2,r3,r2
811201ac:	1001703a 	wrctl	status,r2
  
  return context;
811201b0:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
811201b4:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
811201b8:	e0bffb17 	ldw	r2,-20(fp)
811201bc:	10800917 	ldw	r2,36(r2)
811201c0:	e0fffb17 	ldw	r3,-20(fp)
811201c4:	18c00a17 	ldw	r3,40(r3)
811201c8:	1809883a 	mov	r4,r3
811201cc:	103ee83a 	callr	r2
811201d0:	e0bffc17 	ldw	r2,-16(fp)
811201d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811201d8:	e0bffe17 	ldw	r2,-8(fp)
811201dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
811201e0:	0001883a 	nop
811201e4:	e037883a 	mov	sp,fp
811201e8:	dfc00117 	ldw	ra,4(sp)
811201ec:	df000017 	ldw	fp,0(sp)
811201f0:	dec00204 	addi	sp,sp,8
811201f4:	f800283a 	ret

811201f8 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
811201f8:	defffa04 	addi	sp,sp,-24
811201fc:	dfc00515 	stw	ra,20(sp)
81120200:	df000415 	stw	fp,16(sp)
81120204:	df000404 	addi	fp,sp,16
81120208:	e13ffd15 	stw	r4,-12(fp)
8112020c:	e17ffe15 	stw	r5,-8(fp)
81120210:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81120214:	e0bffd17 	ldw	r2,-12(fp)
81120218:	10800317 	ldw	r2,12(r2)
8112021c:	10800404 	addi	r2,r2,16
81120220:	00c00074 	movhi	r3,1
81120224:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81120228:	e0bffd17 	ldw	r2,-12(fp)
8112022c:	10800317 	ldw	r2,12(r2)
81120230:	10800404 	addi	r2,r2,16
81120234:	00c00074 	movhi	r3,1
81120238:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
8112023c:	e0bffd17 	ldw	r2,-12(fp)
81120240:	10800317 	ldw	r2,12(r2)
81120244:	10800404 	addi	r2,r2,16
81120248:	0007883a 	mov	r3,zero
8112024c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81120250:	e0bffd17 	ldw	r2,-12(fp)
81120254:	10800317 	ldw	r2,12(r2)
81120258:	00c03fc4 	movi	r3,255
8112025c:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
81120260:	d1602e04 	addi	r5,gp,-32584
81120264:	e13ffd17 	ldw	r4,-12(fp)
81120268:	112319c0 	call	8112319c <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
8112026c:	d8000015 	stw	zero,0(sp)
81120270:	e1fffd17 	ldw	r7,-12(fp)
81120274:	01a044b4 	movhi	r6,33042
81120278:	31804f04 	addi	r6,r6,316
8112027c:	e17fff17 	ldw	r5,-4(fp)
81120280:	e13ffe17 	ldw	r4,-8(fp)
81120284:	11235740 	call	81123574 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
81120288:	0001883a 	nop
8112028c:	e037883a 	mov	sp,fp
81120290:	dfc00117 	ldw	ra,4(sp)
81120294:	df000017 	ldw	fp,0(sp)
81120298:	dec00204 	addi	sp,sp,8
8112029c:	f800283a 	ret

811202a0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
811202a0:	defffa04 	addi	sp,sp,-24
811202a4:	dfc00515 	stw	ra,20(sp)
811202a8:	df000415 	stw	fp,16(sp)
811202ac:	df000404 	addi	fp,sp,16
811202b0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
811202b4:	0007883a 	mov	r3,zero
811202b8:	e0bfff17 	ldw	r2,-4(fp)
811202bc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
811202c0:	e0bfff17 	ldw	r2,-4(fp)
811202c4:	10800104 	addi	r2,r2,4
811202c8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811202cc:	0005303a 	rdctl	r2,status
811202d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811202d4:	e0fffd17 	ldw	r3,-12(fp)
811202d8:	00bfff84 	movi	r2,-2
811202dc:	1884703a 	and	r2,r3,r2
811202e0:	1001703a 	wrctl	status,r2
  
  return context;
811202e4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
811202e8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
811202ec:	1123c580 	call	81123c58 <alt_tick>
811202f0:	e0bffc17 	ldw	r2,-16(fp)
811202f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811202f8:	e0bffe17 	ldw	r2,-8(fp)
811202fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
81120300:	0001883a 	nop
81120304:	e037883a 	mov	sp,fp
81120308:	dfc00117 	ldw	ra,4(sp)
8112030c:	df000017 	ldw	fp,0(sp)
81120310:	dec00204 	addi	sp,sp,8
81120314:	f800283a 	ret

81120318 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81120318:	defff804 	addi	sp,sp,-32
8112031c:	dfc00715 	stw	ra,28(sp)
81120320:	df000615 	stw	fp,24(sp)
81120324:	df000604 	addi	fp,sp,24
81120328:	e13ffc15 	stw	r4,-16(fp)
8112032c:	e17ffd15 	stw	r5,-12(fp)
81120330:	e1bffe15 	stw	r6,-8(fp)
81120334:	e1ffff15 	stw	r7,-4(fp)
81120338:	e0bfff17 	ldw	r2,-4(fp)
8112033c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81120340:	d0a05b17 	ldw	r2,-32404(gp)
81120344:	1000021e 	bne	r2,zero,81120350 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
81120348:	e0bffb17 	ldw	r2,-20(fp)
8112034c:	d0a05b15 	stw	r2,-32404(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
81120350:	e0bffc17 	ldw	r2,-16(fp)
81120354:	10800104 	addi	r2,r2,4
81120358:	00c001c4 	movi	r3,7
8112035c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
81120360:	d8000015 	stw	zero,0(sp)
81120364:	e1fffc17 	ldw	r7,-16(fp)
81120368:	01a044b4 	movhi	r6,33042
8112036c:	3180a804 	addi	r6,r6,672
81120370:	e17ffe17 	ldw	r5,-8(fp)
81120374:	e13ffd17 	ldw	r4,-12(fp)
81120378:	11235740 	call	81123574 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
8112037c:	0001883a 	nop
81120380:	e037883a 	mov	sp,fp
81120384:	dfc00117 	ldw	ra,4(sp)
81120388:	df000017 	ldw	fp,0(sp)
8112038c:	dec00204 	addi	sp,sp,8
81120390:	f800283a 	ret

81120394 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81120394:	defffa04 	addi	sp,sp,-24
81120398:	dfc00515 	stw	ra,20(sp)
8112039c:	df000415 	stw	fp,16(sp)
811203a0:	df000404 	addi	fp,sp,16
811203a4:	e13ffd15 	stw	r4,-12(fp)
811203a8:	e17ffe15 	stw	r5,-8(fp)
811203ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
811203b0:	e0bffd17 	ldw	r2,-12(fp)
811203b4:	10800017 	ldw	r2,0(r2)
811203b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
811203bc:	e0bffc17 	ldw	r2,-16(fp)
811203c0:	10c00a04 	addi	r3,r2,40
811203c4:	e0bffd17 	ldw	r2,-12(fp)
811203c8:	10800217 	ldw	r2,8(r2)
811203cc:	100f883a 	mov	r7,r2
811203d0:	e1bfff17 	ldw	r6,-4(fp)
811203d4:	e17ffe17 	ldw	r5,-8(fp)
811203d8:	1809883a 	mov	r4,r3
811203dc:	1120a0c0 	call	81120a0c <altera_avalon_uart_read>
      fd->fd_flags);
}
811203e0:	e037883a 	mov	sp,fp
811203e4:	dfc00117 	ldw	ra,4(sp)
811203e8:	df000017 	ldw	fp,0(sp)
811203ec:	dec00204 	addi	sp,sp,8
811203f0:	f800283a 	ret

811203f4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
811203f4:	defffa04 	addi	sp,sp,-24
811203f8:	dfc00515 	stw	ra,20(sp)
811203fc:	df000415 	stw	fp,16(sp)
81120400:	df000404 	addi	fp,sp,16
81120404:	e13ffd15 	stw	r4,-12(fp)
81120408:	e17ffe15 	stw	r5,-8(fp)
8112040c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81120410:	e0bffd17 	ldw	r2,-12(fp)
81120414:	10800017 	ldw	r2,0(r2)
81120418:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
8112041c:	e0bffc17 	ldw	r2,-16(fp)
81120420:	10c00a04 	addi	r3,r2,40
81120424:	e0bffd17 	ldw	r2,-12(fp)
81120428:	10800217 	ldw	r2,8(r2)
8112042c:	100f883a 	mov	r7,r2
81120430:	e1bfff17 	ldw	r6,-4(fp)
81120434:	e17ffe17 	ldw	r5,-8(fp)
81120438:	1809883a 	mov	r4,r3
8112043c:	1120cb00 	call	81120cb0 <altera_avalon_uart_write>
      fd->fd_flags);
}
81120440:	e037883a 	mov	sp,fp
81120444:	dfc00117 	ldw	ra,4(sp)
81120448:	df000017 	ldw	fp,0(sp)
8112044c:	dec00204 	addi	sp,sp,8
81120450:	f800283a 	ret

81120454 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
81120454:	defffc04 	addi	sp,sp,-16
81120458:	dfc00315 	stw	ra,12(sp)
8112045c:	df000215 	stw	fp,8(sp)
81120460:	df000204 	addi	fp,sp,8
81120464:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81120468:	e0bfff17 	ldw	r2,-4(fp)
8112046c:	10800017 	ldw	r2,0(r2)
81120470:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
81120474:	e0bffe17 	ldw	r2,-8(fp)
81120478:	10c00a04 	addi	r3,r2,40
8112047c:	e0bfff17 	ldw	r2,-4(fp)
81120480:	10800217 	ldw	r2,8(r2)
81120484:	100b883a 	mov	r5,r2
81120488:	1809883a 	mov	r4,r3
8112048c:	112097c0 	call	8112097c <altera_avalon_uart_close>
}
81120490:	e037883a 	mov	sp,fp
81120494:	dfc00117 	ldw	ra,4(sp)
81120498:	df000017 	ldw	fp,0(sp)
8112049c:	dec00204 	addi	sp,sp,8
811204a0:	f800283a 	ret

811204a4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
811204a4:	defff304 	addi	sp,sp,-52
811204a8:	dfc00c15 	stw	ra,48(sp)
811204ac:	df000b15 	stw	fp,44(sp)
811204b0:	df000b04 	addi	fp,sp,44
811204b4:	e13ffd15 	stw	r4,-12(fp)
811204b8:	e17ffe15 	stw	r5,-8(fp)
811204bc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
811204c0:	e0bffd17 	ldw	r2,-12(fp)
811204c4:	10800017 	ldw	r2,0(r2)
811204c8:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
811204cc:	e0bffd17 	ldw	r2,-12(fp)
811204d0:	10800704 	addi	r2,r2,28
811204d4:	e0bffa15 	stw	r2,-24(fp)
811204d8:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
811204dc:	e0bffb0b 	ldhu	r2,-20(fp)
811204e0:	e0fffc84 	addi	r3,fp,-14
811204e4:	180b883a 	mov	r5,r3
811204e8:	1009883a 	mov	r4,r2
811204ec:	111936c0 	call	8111936c <OSFlagCreate>
811204f0:	1007883a 	mov	r3,r2
811204f4:	e0bffa17 	ldw	r2,-24(fp)
811204f8:	10c00015 	stw	r3,0(r2)
  return err;
811204fc:	e0bffc83 	ldbu	r2,-14(fp)
81120500:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81120504:	1000241e 	bne	r2,zero,81120598 <altera_avalon_uart_init+0xf4>
81120508:	e0bffd17 	ldw	r2,-12(fp)
8112050c:	10800804 	addi	r2,r2,32
81120510:	e0bff715 	stw	r2,-36(fp)
81120514:	00800044 	movi	r2,1
81120518:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8112051c:	e0bffb8b 	ldhu	r2,-18(fp)
81120520:	1009883a 	mov	r4,r2
81120524:	111c0800 	call	8111c080 <OSSemCreate>
81120528:	1007883a 	mov	r3,r2
8112052c:	e0bff717 	ldw	r2,-36(fp)
81120530:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81120534:	e0bff717 	ldw	r2,-36(fp)
81120538:	10800017 	ldw	r2,0(r2)
8112053c:	10000226 	beq	r2,zero,81120548 <altera_avalon_uart_init+0xa4>
81120540:	0005883a 	mov	r2,zero
81120544:	00000106 	br	8112054c <altera_avalon_uart_init+0xa8>
81120548:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8112054c:	1000121e 	bne	r2,zero,81120598 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
81120550:	e0bffd17 	ldw	r2,-12(fp)
81120554:	10800904 	addi	r2,r2,36
81120558:	e0bff815 	stw	r2,-32(fp)
8112055c:	00800044 	movi	r2,1
81120560:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81120564:	e0bffc0b 	ldhu	r2,-16(fp)
81120568:	1009883a 	mov	r4,r2
8112056c:	111c0800 	call	8111c080 <OSSemCreate>
81120570:	1007883a 	mov	r3,r2
81120574:	e0bff817 	ldw	r2,-32(fp)
81120578:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8112057c:	e0bff817 	ldw	r2,-32(fp)
81120580:	10800017 	ldw	r2,0(r2)
81120584:	10000226 	beq	r2,zero,81120590 <altera_avalon_uart_init+0xec>
81120588:	0005883a 	mov	r2,zero
8112058c:	00000106 	br	81120594 <altera_avalon_uart_init+0xf0>
81120590:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81120594:	10000226 	beq	r2,zero,811205a0 <altera_avalon_uart_init+0xfc>
81120598:	00800044 	movi	r2,1
8112059c:	00000106 	br	811205a4 <altera_avalon_uart_init+0x100>
811205a0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
811205a4:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
811205a8:	e0bff917 	ldw	r2,-28(fp)
811205ac:	10000f1e 	bne	r2,zero,811205ec <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
811205b0:	e0bffd17 	ldw	r2,-12(fp)
811205b4:	00c32004 	movi	r3,3200
811205b8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
811205bc:	e0bff617 	ldw	r2,-40(fp)
811205c0:	10800304 	addi	r2,r2,12
811205c4:	e0fffd17 	ldw	r3,-12(fp)
811205c8:	18c00117 	ldw	r3,4(r3)
811205cc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
811205d0:	d8000015 	stw	zero,0(sp)
811205d4:	e1fffd17 	ldw	r7,-12(fp)
811205d8:	01a044b4 	movhi	r6,33042
811205dc:	31818104 	addi	r6,r6,1540
811205e0:	e17fff17 	ldw	r5,-4(fp)
811205e4:	e13ffe17 	ldw	r4,-8(fp)
811205e8:	11235740 	call	81123574 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
811205ec:	0001883a 	nop
811205f0:	e037883a 	mov	sp,fp
811205f4:	dfc00117 	ldw	ra,4(sp)
811205f8:	df000017 	ldw	fp,0(sp)
811205fc:	dec00204 	addi	sp,sp,8
81120600:	f800283a 	ret

81120604 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
81120604:	defffa04 	addi	sp,sp,-24
81120608:	dfc00515 	stw	ra,20(sp)
8112060c:	df000415 	stw	fp,16(sp)
81120610:	df000404 	addi	fp,sp,16
81120614:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
81120618:	e0bfff17 	ldw	r2,-4(fp)
8112061c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
81120620:	e0bffc17 	ldw	r2,-16(fp)
81120624:	10800017 	ldw	r2,0(r2)
81120628:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
8112062c:	e0bffd17 	ldw	r2,-12(fp)
81120630:	10800204 	addi	r2,r2,8
81120634:	10800037 	ldwio	r2,0(r2)
81120638:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
8112063c:	e0bffd17 	ldw	r2,-12(fp)
81120640:	10800204 	addi	r2,r2,8
81120644:	0007883a 	mov	r3,zero
81120648:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
8112064c:	e0bffd17 	ldw	r2,-12(fp)
81120650:	10800204 	addi	r2,r2,8
81120654:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
81120658:	e0bffe17 	ldw	r2,-8(fp)
8112065c:	1080200c 	andi	r2,r2,128
81120660:	10000326 	beq	r2,zero,81120670 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
81120664:	e17ffe17 	ldw	r5,-8(fp)
81120668:	e13ffc17 	ldw	r4,-16(fp)
8112066c:	11206a00 	call	811206a0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
81120670:	e0bffe17 	ldw	r2,-8(fp)
81120674:	1081100c 	andi	r2,r2,1088
81120678:	10000326 	beq	r2,zero,81120688 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
8112067c:	e17ffe17 	ldw	r5,-8(fp)
81120680:	e13ffc17 	ldw	r4,-16(fp)
81120684:	11207d80 	call	811207d8 <altera_avalon_uart_txirq>
  }
  

}
81120688:	0001883a 	nop
8112068c:	e037883a 	mov	sp,fp
81120690:	dfc00117 	ldw	ra,4(sp)
81120694:	df000017 	ldw	fp,0(sp)
81120698:	dec00204 	addi	sp,sp,8
8112069c:	f800283a 	ret

811206a0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
811206a0:	defff904 	addi	sp,sp,-28
811206a4:	dfc00615 	stw	ra,24(sp)
811206a8:	df000515 	stw	fp,20(sp)
811206ac:	df000504 	addi	fp,sp,20
811206b0:	e13ffe15 	stw	r4,-8(fp)
811206b4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
811206b8:	e0bfff17 	ldw	r2,-4(fp)
811206bc:	108000cc 	andi	r2,r2,3
811206c0:	10003f1e 	bne	r2,zero,811207c0 <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
811206c4:	e0bffe17 	ldw	r2,-8(fp)
811206c8:	10c00317 	ldw	r3,12(r2)
811206cc:	e0bffe17 	ldw	r2,-8(fp)
811206d0:	10800217 	ldw	r2,8(r2)
811206d4:	1880121e 	bne	r3,r2,81120720 <altera_avalon_uart_rxirq+0x80>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
811206d8:	e0bffe17 	ldw	r2,-8(fp)
811206dc:	10800717 	ldw	r2,28(r2)
811206e0:	e0bffc15 	stw	r2,-16(fp)
811206e4:	00800044 	movi	r2,1
811206e8:	e0bffd0d 	sth	r2,-12(fp)
811206ec:	00800044 	movi	r2,1
811206f0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
811206f4:	d0a04543 	ldbu	r2,-32491(gp)
811206f8:	10803fcc 	andi	r2,r2,255
811206fc:	10000826 	beq	r2,zero,81120720 <altera_avalon_uart_rxirq+0x80>
  {
    OSFlagPost (group, flags, opt, &err);
81120700:	e0bffd0b 	ldhu	r2,-12(fp)
81120704:	e0fffd83 	ldbu	r3,-10(fp)
81120708:	e13ffdc4 	addi	r4,fp,-9
8112070c:	200f883a 	mov	r7,r4
81120710:	180d883a 	mov	r6,r3
81120714:	100b883a 	mov	r5,r2
81120718:	e13ffc17 	ldw	r4,-16(fp)
8112071c:	1119f480 	call	81119f48 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81120720:	e0bffe17 	ldw	r2,-8(fp)
81120724:	10800317 	ldw	r2,12(r2)
81120728:	10800044 	addi	r2,r2,1
8112072c:	10800fcc 	andi	r2,r2,63
81120730:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
81120734:	e0bffe17 	ldw	r2,-8(fp)
81120738:	10800317 	ldw	r2,12(r2)
8112073c:	e0fffe17 	ldw	r3,-8(fp)
81120740:	18c00017 	ldw	r3,0(r3)
81120744:	18c00037 	ldwio	r3,0(r3)
81120748:	1809883a 	mov	r4,r3
8112074c:	e0fffe17 	ldw	r3,-8(fp)
81120750:	1885883a 	add	r2,r3,r2
81120754:	10800a04 	addi	r2,r2,40
81120758:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
8112075c:	e0bffe17 	ldw	r2,-8(fp)
81120760:	e0fffb17 	ldw	r3,-20(fp)
81120764:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81120768:	e0bffe17 	ldw	r2,-8(fp)
8112076c:	10800317 	ldw	r2,12(r2)
81120770:	10800044 	addi	r2,r2,1
81120774:	10800fcc 	andi	r2,r2,63
81120778:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
8112077c:	e0bffe17 	ldw	r2,-8(fp)
81120780:	10c00217 	ldw	r3,8(r2)
81120784:	e0bffb17 	ldw	r2,-20(fp)
81120788:	18800e1e 	bne	r3,r2,811207c4 <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8112078c:	e0bffe17 	ldw	r2,-8(fp)
81120790:	10c00117 	ldw	r3,4(r2)
81120794:	00bfdfc4 	movi	r2,-129
81120798:	1886703a 	and	r3,r3,r2
8112079c:	e0bffe17 	ldw	r2,-8(fp)
811207a0:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
811207a4:	e0bffe17 	ldw	r2,-8(fp)
811207a8:	10800017 	ldw	r2,0(r2)
811207ac:	10800304 	addi	r2,r2,12
811207b0:	e0fffe17 	ldw	r3,-8(fp)
811207b4:	18c00117 	ldw	r3,4(r3)
811207b8:	10c00035 	stwio	r3,0(r2)
811207bc:	00000106 	br	811207c4 <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
811207c0:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
811207c4:	e037883a 	mov	sp,fp
811207c8:	dfc00117 	ldw	ra,4(sp)
811207cc:	df000017 	ldw	fp,0(sp)
811207d0:	dec00204 	addi	sp,sp,8
811207d4:	f800283a 	ret

811207d8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
811207d8:	defffa04 	addi	sp,sp,-24
811207dc:	dfc00515 	stw	ra,20(sp)
811207e0:	df000415 	stw	fp,16(sp)
811207e4:	df000404 	addi	fp,sp,16
811207e8:	e13ffe15 	stw	r4,-8(fp)
811207ec:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
811207f0:	e0bffe17 	ldw	r2,-8(fp)
811207f4:	10c00417 	ldw	r3,16(r2)
811207f8:	e0bffe17 	ldw	r2,-8(fp)
811207fc:	10800517 	ldw	r2,20(r2)
81120800:	18804726 	beq	r3,r2,81120920 <altera_avalon_uart_txirq+0x148>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81120804:	e0bffe17 	ldw	r2,-8(fp)
81120808:	10800617 	ldw	r2,24(r2)
8112080c:	1080008c 	andi	r2,r2,2
81120810:	10000326 	beq	r2,zero,81120820 <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81120814:	e0bfff17 	ldw	r2,-4(fp)
81120818:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8112081c:	10003226 	beq	r2,zero,811208e8 <altera_avalon_uart_txirq+0x110>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
81120820:	e0bffe17 	ldw	r2,-8(fp)
81120824:	10c00417 	ldw	r3,16(r2)
81120828:	e0bffe17 	ldw	r2,-8(fp)
8112082c:	10800517 	ldw	r2,20(r2)
81120830:	10800044 	addi	r2,r2,1
81120834:	10800fcc 	andi	r2,r2,63
81120838:	1880121e 	bne	r3,r2,81120884 <altera_avalon_uart_txirq+0xac>
      { 
        ALT_FLAG_POST (sp->events, 
8112083c:	e0bffe17 	ldw	r2,-8(fp)
81120840:	10800717 	ldw	r2,28(r2)
81120844:	e0bffc15 	stw	r2,-16(fp)
81120848:	00800084 	movi	r2,2
8112084c:	e0bffd0d 	sth	r2,-12(fp)
81120850:	00800044 	movi	r2,1
81120854:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81120858:	d0a04543 	ldbu	r2,-32491(gp)
8112085c:	10803fcc 	andi	r2,r2,255
81120860:	10000826 	beq	r2,zero,81120884 <altera_avalon_uart_txirq+0xac>
  {
    OSFlagPost (group, flags, opt, &err);
81120864:	e0bffd0b 	ldhu	r2,-12(fp)
81120868:	e0fffd83 	ldbu	r3,-10(fp)
8112086c:	e13ffdc4 	addi	r4,fp,-9
81120870:	200f883a 	mov	r7,r4
81120874:	180d883a 	mov	r6,r3
81120878:	100b883a 	mov	r5,r2
8112087c:	e13ffc17 	ldw	r4,-16(fp)
81120880:	1119f480 	call	81119f48 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
81120884:	e0bffe17 	ldw	r2,-8(fp)
81120888:	10800017 	ldw	r2,0(r2)
8112088c:	10800104 	addi	r2,r2,4
81120890:	e0fffe17 	ldw	r3,-8(fp)
81120894:	18c00417 	ldw	r3,16(r3)
81120898:	e13ffe17 	ldw	r4,-8(fp)
8112089c:	20c7883a 	add	r3,r4,r3
811208a0:	18c01a04 	addi	r3,r3,104
811208a4:	18c00003 	ldbu	r3,0(r3)
811208a8:	18c03fcc 	andi	r3,r3,255
811208ac:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
811208b0:	e0bffe17 	ldw	r2,-8(fp)
811208b4:	10800417 	ldw	r2,16(r2)
811208b8:	10800044 	addi	r2,r2,1
811208bc:	e0fffe17 	ldw	r3,-8(fp)
811208c0:	18800415 	stw	r2,16(r3)
811208c4:	10c00fcc 	andi	r3,r2,63
811208c8:	e0bffe17 	ldw	r2,-8(fp)
811208cc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
811208d0:	e0bffe17 	ldw	r2,-8(fp)
811208d4:	10800117 	ldw	r2,4(r2)
811208d8:	10c01014 	ori	r3,r2,64
811208dc:	e0bffe17 	ldw	r2,-8(fp)
811208e0:	10c00115 	stw	r3,4(r2)
811208e4:	00000e06 	br	81120920 <altera_avalon_uart_txirq+0x148>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
811208e8:	e0bffe17 	ldw	r2,-8(fp)
811208ec:	10800017 	ldw	r2,0(r2)
811208f0:	10800204 	addi	r2,r2,8
811208f4:	10800037 	ldwio	r2,0(r2)
811208f8:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
811208fc:	e0bfff17 	ldw	r2,-4(fp)
81120900:	1082000c 	andi	r2,r2,2048
81120904:	1000061e 	bne	r2,zero,81120920 <altera_avalon_uart_txirq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81120908:	e0bffe17 	ldw	r2,-8(fp)
8112090c:	10c00117 	ldw	r3,4(r2)
81120910:	00bfefc4 	movi	r2,-65
81120914:	1886703a 	and	r3,r3,r2
81120918:	e0bffe17 	ldw	r2,-8(fp)
8112091c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
81120920:	e0bffe17 	ldw	r2,-8(fp)
81120924:	10c00417 	ldw	r3,16(r2)
81120928:	e0bffe17 	ldw	r2,-8(fp)
8112092c:	10800517 	ldw	r2,20(r2)
81120930:	1880061e 	bne	r3,r2,8112094c <altera_avalon_uart_txirq+0x174>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81120934:	e0bffe17 	ldw	r2,-8(fp)
81120938:	10c00117 	ldw	r3,4(r2)
8112093c:	00beefc4 	movi	r2,-1089
81120940:	1886703a 	and	r3,r3,r2
81120944:	e0bffe17 	ldw	r2,-8(fp)
81120948:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8112094c:	e0bffe17 	ldw	r2,-8(fp)
81120950:	10800017 	ldw	r2,0(r2)
81120954:	10800304 	addi	r2,r2,12
81120958:	e0fffe17 	ldw	r3,-8(fp)
8112095c:	18c00117 	ldw	r3,4(r3)
81120960:	10c00035 	stwio	r3,0(r2)
}
81120964:	0001883a 	nop
81120968:	e037883a 	mov	sp,fp
8112096c:	dfc00117 	ldw	ra,4(sp)
81120970:	df000017 	ldw	fp,0(sp)
81120974:	dec00204 	addi	sp,sp,8
81120978:	f800283a 	ret

8112097c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
8112097c:	defffd04 	addi	sp,sp,-12
81120980:	df000215 	stw	fp,8(sp)
81120984:	df000204 	addi	fp,sp,8
81120988:	e13ffe15 	stw	r4,-8(fp)
8112098c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81120990:	00000506 	br	811209a8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
81120994:	e0bfff17 	ldw	r2,-4(fp)
81120998:	1090000c 	andi	r2,r2,16384
8112099c:	10000226 	beq	r2,zero,811209a8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
811209a0:	00bffd44 	movi	r2,-11
811209a4:	00000606 	br	811209c0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
811209a8:	e0bffe17 	ldw	r2,-8(fp)
811209ac:	10c00417 	ldw	r3,16(r2)
811209b0:	e0bffe17 	ldw	r2,-8(fp)
811209b4:	10800517 	ldw	r2,20(r2)
811209b8:	18bff61e 	bne	r3,r2,81120994 <__reset+0xfb100994>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
811209bc:	0005883a 	mov	r2,zero
}
811209c0:	e037883a 	mov	sp,fp
811209c4:	df000017 	ldw	fp,0(sp)
811209c8:	dec00104 	addi	sp,sp,4
811209cc:	f800283a 	ret

811209d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811209d0:	defffe04 	addi	sp,sp,-8
811209d4:	dfc00115 	stw	ra,4(sp)
811209d8:	df000015 	stw	fp,0(sp)
811209dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811209e0:	d0a00d17 	ldw	r2,-32716(gp)
811209e4:	10000326 	beq	r2,zero,811209f4 <alt_get_errno+0x24>
811209e8:	d0a00d17 	ldw	r2,-32716(gp)
811209ec:	103ee83a 	callr	r2
811209f0:	00000106 	br	811209f8 <alt_get_errno+0x28>
811209f4:	d0a03604 	addi	r2,gp,-32552
}
811209f8:	e037883a 	mov	sp,fp
811209fc:	dfc00117 	ldw	ra,4(sp)
81120a00:	df000017 	ldw	fp,0(sp)
81120a04:	dec00204 	addi	sp,sp,8
81120a08:	f800283a 	ret

81120a0c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
81120a0c:	deffec04 	addi	sp,sp,-80
81120a10:	dfc01315 	stw	ra,76(sp)
81120a14:	df001215 	stw	fp,72(sp)
81120a18:	df001204 	addi	fp,sp,72
81120a1c:	e13ffc15 	stw	r4,-16(fp)
81120a20:	e17ffd15 	stw	r5,-12(fp)
81120a24:	e1bffe15 	stw	r6,-8(fp)
81120a28:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
81120a2c:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
81120a30:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
81120a34:	e0bfff17 	ldw	r2,-4(fp)
81120a38:	1090000c 	andi	r2,r2,16384
81120a3c:	1005003a 	cmpeq	r2,r2,zero
81120a40:	10803fcc 	andi	r2,r2,255
81120a44:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
81120a48:	e0bffc17 	ldw	r2,-16(fp)
81120a4c:	10800817 	ldw	r2,32(r2)
81120a50:	e0bff815 	stw	r2,-32(fp)
81120a54:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81120a58:	e0bff90b 	ldhu	r2,-28(fp)
81120a5c:	e0fffb44 	addi	r3,fp,-19
81120a60:	180d883a 	mov	r6,r3
81120a64:	100b883a 	mov	r5,r2
81120a68:	e13ff817 	ldw	r4,-32(fp)
81120a6c:	111c3980 	call	8111c398 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81120a70:	00001306 	br	81120ac0 <altera_avalon_uart_read+0xb4>
    {
      count++;
81120a74:	e0bff017 	ldw	r2,-64(fp)
81120a78:	10800044 	addi	r2,r2,1
81120a7c:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
81120a80:	e0bffd17 	ldw	r2,-12(fp)
81120a84:	10c00044 	addi	r3,r2,1
81120a88:	e0fffd15 	stw	r3,-12(fp)
81120a8c:	e0fffc17 	ldw	r3,-16(fp)
81120a90:	18c00217 	ldw	r3,8(r3)
81120a94:	e13ffc17 	ldw	r4,-16(fp)
81120a98:	20c7883a 	add	r3,r4,r3
81120a9c:	18c00a04 	addi	r3,r3,40
81120aa0:	18c00003 	ldbu	r3,0(r3)
81120aa4:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
81120aa8:	e0bffc17 	ldw	r2,-16(fp)
81120aac:	10800217 	ldw	r2,8(r2)
81120ab0:	10800044 	addi	r2,r2,1
81120ab4:	10c00fcc 	andi	r3,r2,63
81120ab8:	e0bffc17 	ldw	r2,-16(fp)
81120abc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81120ac0:	e0fff017 	ldw	r3,-64(fp)
81120ac4:	e0bffe17 	ldw	r2,-8(fp)
81120ac8:	1880050e 	bge	r3,r2,81120ae0 <altera_avalon_uart_read+0xd4>
81120acc:	e0bffc17 	ldw	r2,-16(fp)
81120ad0:	10c00217 	ldw	r3,8(r2)
81120ad4:	e0bffc17 	ldw	r2,-16(fp)
81120ad8:	10800317 	ldw	r2,12(r2)
81120adc:	18bfe51e 	bne	r3,r2,81120a74 <__reset+0xfb100a74>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
81120ae0:	e0bff017 	ldw	r2,-64(fp)
81120ae4:	10003a1e 	bne	r2,zero,81120bd0 <altera_avalon_uart_read+0x1c4>
81120ae8:	e0bffc17 	ldw	r2,-16(fp)
81120aec:	10c00217 	ldw	r3,8(r2)
81120af0:	e0bffc17 	ldw	r2,-16(fp)
81120af4:	10800317 	ldw	r2,12(r2)
81120af8:	1880351e 	bne	r3,r2,81120bd0 <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
81120afc:	e0bff117 	ldw	r2,-60(fp)
81120b00:	1000071e 	bne	r2,zero,81120b20 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
81120b04:	11209d00 	call	811209d0 <alt_get_errno>
81120b08:	1007883a 	mov	r3,r2
81120b0c:	008002c4 	movi	r2,11
81120b10:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
81120b14:	00800044 	movi	r2,1
81120b18:	e0bfef05 	stb	r2,-68(fp)
        break;
81120b1c:	00003006 	br	81120be0 <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120b20:	0005303a 	rdctl	r2,status
81120b24:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120b28:	e0fff517 	ldw	r3,-44(fp)
81120b2c:	00bfff84 	movi	r2,-2
81120b30:	1884703a 	and	r2,r3,r2
81120b34:	1001703a 	wrctl	status,r2
  
  return context;
81120b38:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
81120b3c:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81120b40:	e0bffc17 	ldw	r2,-16(fp)
81120b44:	10800117 	ldw	r2,4(r2)
81120b48:	10c02014 	ori	r3,r2,128
81120b4c:	e0bffc17 	ldw	r2,-16(fp)
81120b50:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81120b54:	e0bffc17 	ldw	r2,-16(fp)
81120b58:	10800017 	ldw	r2,0(r2)
81120b5c:	10800304 	addi	r2,r2,12
81120b60:	e0fffc17 	ldw	r3,-16(fp)
81120b64:	18c00117 	ldw	r3,4(r3)
81120b68:	10c00035 	stwio	r3,0(r2)
81120b6c:	e0bff417 	ldw	r2,-48(fp)
81120b70:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120b74:	e0bff617 	ldw	r2,-40(fp)
81120b78:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
81120b7c:	e0bffc17 	ldw	r2,-16(fp)
81120b80:	10800717 	ldw	r2,28(r2)
81120b84:	e0bff215 	stw	r2,-56(fp)
81120b88:	00800044 	movi	r2,1
81120b8c:	e0bff98d 	sth	r2,-26(fp)
81120b90:	00bfe0c4 	movi	r2,-125
81120b94:	e0bffa05 	stb	r2,-24(fp)
81120b98:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81120b9c:	d0a04543 	ldbu	r2,-32491(gp)
81120ba0:	10803fcc 	andi	r2,r2,255
81120ba4:	10000a26 	beq	r2,zero,81120bd0 <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81120ba8:	e0fff98b 	ldhu	r3,-26(fp)
81120bac:	e13ffa03 	ldbu	r4,-24(fp)
81120bb0:	e17ffa8b 	ldhu	r5,-22(fp)
81120bb4:	e0bffb04 	addi	r2,fp,-20
81120bb8:	d8800015 	stw	r2,0(sp)
81120bbc:	280f883a 	mov	r7,r5
81120bc0:	200d883a 	mov	r6,r4
81120bc4:	180b883a 	mov	r5,r3
81120bc8:	e13ff217 	ldw	r4,-56(fp)
81120bcc:	11199300 	call	81119930 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
81120bd0:	e0bff017 	ldw	r2,-64(fp)
81120bd4:	1000021e 	bne	r2,zero,81120be0 <altera_avalon_uart_read+0x1d4>
81120bd8:	e0bffe17 	ldw	r2,-8(fp)
81120bdc:	103fb81e 	bne	r2,zero,81120ac0 <__reset+0xfb100ac0>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81120be0:	e0bffc17 	ldw	r2,-16(fp)
81120be4:	10800817 	ldw	r2,32(r2)
81120be8:	1009883a 	mov	r4,r2
81120bec:	111c7100 	call	8111c710 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120bf0:	0005303a 	rdctl	r2,status
81120bf4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120bf8:	e0fff717 	ldw	r3,-36(fp)
81120bfc:	00bfff84 	movi	r2,-2
81120c00:	1884703a 	and	r2,r3,r2
81120c04:	1001703a 	wrctl	status,r2
  
  return context;
81120c08:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
81120c0c:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81120c10:	e0bffc17 	ldw	r2,-16(fp)
81120c14:	10800117 	ldw	r2,4(r2)
81120c18:	10c02014 	ori	r3,r2,128
81120c1c:	e0bffc17 	ldw	r2,-16(fp)
81120c20:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81120c24:	e0bffc17 	ldw	r2,-16(fp)
81120c28:	10800017 	ldw	r2,0(r2)
81120c2c:	10800304 	addi	r2,r2,12
81120c30:	e0fffc17 	ldw	r3,-16(fp)
81120c34:	18c00117 	ldw	r3,4(r3)
81120c38:	10c00035 	stwio	r3,0(r2)
81120c3c:	e0bff417 	ldw	r2,-48(fp)
81120c40:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120c44:	e0bff317 	ldw	r2,-52(fp)
81120c48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
81120c4c:	e0bfef03 	ldbu	r2,-68(fp)
81120c50:	10000226 	beq	r2,zero,81120c5c <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
81120c54:	00bffd44 	movi	r2,-11
81120c58:	00000106 	br	81120c60 <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
81120c5c:	e0bff017 	ldw	r2,-64(fp)
  }
}
81120c60:	e037883a 	mov	sp,fp
81120c64:	dfc00117 	ldw	ra,4(sp)
81120c68:	df000017 	ldw	fp,0(sp)
81120c6c:	dec00204 	addi	sp,sp,8
81120c70:	f800283a 	ret

81120c74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81120c74:	defffe04 	addi	sp,sp,-8
81120c78:	dfc00115 	stw	ra,4(sp)
81120c7c:	df000015 	stw	fp,0(sp)
81120c80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81120c84:	d0a00d17 	ldw	r2,-32716(gp)
81120c88:	10000326 	beq	r2,zero,81120c98 <alt_get_errno+0x24>
81120c8c:	d0a00d17 	ldw	r2,-32716(gp)
81120c90:	103ee83a 	callr	r2
81120c94:	00000106 	br	81120c9c <alt_get_errno+0x28>
81120c98:	d0a03604 	addi	r2,gp,-32552
}
81120c9c:	e037883a 	mov	sp,fp
81120ca0:	dfc00117 	ldw	ra,4(sp)
81120ca4:	df000017 	ldw	fp,0(sp)
81120ca8:	dec00204 	addi	sp,sp,8
81120cac:	f800283a 	ret

81120cb0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
81120cb0:	deffec04 	addi	sp,sp,-80
81120cb4:	dfc01315 	stw	ra,76(sp)
81120cb8:	df001215 	stw	fp,72(sp)
81120cbc:	df001204 	addi	fp,sp,72
81120cc0:	e13ffc15 	stw	r4,-16(fp)
81120cc4:	e17ffd15 	stw	r5,-12(fp)
81120cc8:	e1bffe15 	stw	r6,-8(fp)
81120ccc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
81120cd0:	e0bffe17 	ldw	r2,-8(fp)
81120cd4:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
81120cd8:	e0bfff17 	ldw	r2,-4(fp)
81120cdc:	1090000c 	andi	r2,r2,16384
81120ce0:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
81120ce4:	e0bffc17 	ldw	r2,-16(fp)
81120ce8:	10800917 	ldw	r2,36(r2)
81120cec:	e0bff815 	stw	r2,-32(fp)
81120cf0:	e03ff90d 	sth	zero,-28(fp)
81120cf4:	e0bff90b 	ldhu	r2,-28(fp)
81120cf8:	e0fffb44 	addi	r3,fp,-19
81120cfc:	180d883a 	mov	r6,r3
81120d00:	100b883a 	mov	r5,r2
81120d04:	e13ff817 	ldw	r4,-32(fp)
81120d08:	111c3980 	call	8111c398 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81120d0c:	00005106 	br	81120e54 <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81120d10:	e0bffc17 	ldw	r2,-16(fp)
81120d14:	10800517 	ldw	r2,20(r2)
81120d18:	10800044 	addi	r2,r2,1
81120d1c:	10800fcc 	andi	r2,r2,63
81120d20:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
81120d24:	e0bffc17 	ldw	r2,-16(fp)
81120d28:	10c00417 	ldw	r3,16(r2)
81120d2c:	e0bff217 	ldw	r2,-56(fp)
81120d30:	1880371e 	bne	r3,r2,81120e10 <altera_avalon_uart_write+0x160>
    {
      if (no_block)
81120d34:	e0bff017 	ldw	r2,-64(fp)
81120d38:	10000526 	beq	r2,zero,81120d50 <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
81120d3c:	1120c740 	call	81120c74 <alt_get_errno>
81120d40:	1007883a 	mov	r3,r2
81120d44:	008002c4 	movi	r2,11
81120d48:	18800015 	stw	r2,0(r3)
        break;
81120d4c:	00004306 	br	81120e5c <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120d50:	0005303a 	rdctl	r2,status
81120d54:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120d58:	e0fff517 	ldw	r3,-44(fp)
81120d5c:	00bfff84 	movi	r2,-2
81120d60:	1884703a 	and	r2,r3,r2
81120d64:	1001703a 	wrctl	status,r2
  
  return context;
81120d68:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
81120d6c:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81120d70:	e0bffc17 	ldw	r2,-16(fp)
81120d74:	10800117 	ldw	r2,4(r2)
81120d78:	10c11014 	ori	r3,r2,1088
81120d7c:	e0bffc17 	ldw	r2,-16(fp)
81120d80:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81120d84:	e0bffc17 	ldw	r2,-16(fp)
81120d88:	10800017 	ldw	r2,0(r2)
81120d8c:	10800304 	addi	r2,r2,12
81120d90:	e0fffc17 	ldw	r3,-16(fp)
81120d94:	18c00117 	ldw	r3,4(r3)
81120d98:	10c00035 	stwio	r3,0(r2)
81120d9c:	e0bff417 	ldw	r2,-48(fp)
81120da0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120da4:	e0bff117 	ldw	r2,-60(fp)
81120da8:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
81120dac:	e0bffc17 	ldw	r2,-16(fp)
81120db0:	10800717 	ldw	r2,28(r2)
81120db4:	e0bff315 	stw	r2,-52(fp)
81120db8:	00800084 	movi	r2,2
81120dbc:	e0bff98d 	sth	r2,-26(fp)
81120dc0:	00bfe0c4 	movi	r2,-125
81120dc4:	e0bffa05 	stb	r2,-24(fp)
81120dc8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81120dcc:	d0a04543 	ldbu	r2,-32491(gp)
81120dd0:	10803fcc 	andi	r2,r2,255
81120dd4:	10000a26 	beq	r2,zero,81120e00 <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81120dd8:	e0fff98b 	ldhu	r3,-26(fp)
81120ddc:	e13ffa03 	ldbu	r4,-24(fp)
81120de0:	e17ffa8b 	ldhu	r5,-22(fp)
81120de4:	e0bffb04 	addi	r2,fp,-20
81120de8:	d8800015 	stw	r2,0(sp)
81120dec:	280f883a 	mov	r7,r5
81120df0:	200d883a 	mov	r6,r4
81120df4:	180b883a 	mov	r5,r3
81120df8:	e13ff317 	ldw	r4,-52(fp)
81120dfc:	11199300 	call	81119930 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
81120e00:	e0bffc17 	ldw	r2,-16(fp)
81120e04:	10c00417 	ldw	r3,16(r2)
81120e08:	e0bff217 	ldw	r2,-56(fp)
81120e0c:	18bfe726 	beq	r3,r2,81120dac <__reset+0xfb100dac>
      }
    }

    count--;
81120e10:	e0bfef17 	ldw	r2,-68(fp)
81120e14:	10bfffc4 	addi	r2,r2,-1
81120e18:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
81120e1c:	e0bffc17 	ldw	r2,-16(fp)
81120e20:	10c00517 	ldw	r3,20(r2)
81120e24:	e0bffd17 	ldw	r2,-12(fp)
81120e28:	11000044 	addi	r4,r2,1
81120e2c:	e13ffd15 	stw	r4,-12(fp)
81120e30:	10800003 	ldbu	r2,0(r2)
81120e34:	1009883a 	mov	r4,r2
81120e38:	e0bffc17 	ldw	r2,-16(fp)
81120e3c:	10c5883a 	add	r2,r2,r3
81120e40:	10801a04 	addi	r2,r2,104
81120e44:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
81120e48:	e0bffc17 	ldw	r2,-16(fp)
81120e4c:	e0fff217 	ldw	r3,-56(fp)
81120e50:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81120e54:	e0bfef17 	ldw	r2,-68(fp)
81120e58:	103fad1e 	bne	r2,zero,81120d10 <__reset+0xfb100d10>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
81120e5c:	e0bffc17 	ldw	r2,-16(fp)
81120e60:	10800917 	ldw	r2,36(r2)
81120e64:	1009883a 	mov	r4,r2
81120e68:	111c7100 	call	8111c710 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81120e6c:	0005303a 	rdctl	r2,status
81120e70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81120e74:	e0fff717 	ldw	r3,-36(fp)
81120e78:	00bfff84 	movi	r2,-2
81120e7c:	1884703a 	and	r2,r3,r2
81120e80:	1001703a 	wrctl	status,r2
  
  return context;
81120e84:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
81120e88:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81120e8c:	e0bffc17 	ldw	r2,-16(fp)
81120e90:	10800117 	ldw	r2,4(r2)
81120e94:	10c11014 	ori	r3,r2,1088
81120e98:	e0bffc17 	ldw	r2,-16(fp)
81120e9c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81120ea0:	e0bffc17 	ldw	r2,-16(fp)
81120ea4:	10800017 	ldw	r2,0(r2)
81120ea8:	10800304 	addi	r2,r2,12
81120eac:	e0fffc17 	ldw	r3,-16(fp)
81120eb0:	18c00117 	ldw	r3,4(r3)
81120eb4:	10c00035 	stwio	r3,0(r2)
81120eb8:	e0bff417 	ldw	r2,-48(fp)
81120ebc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81120ec0:	e0bff617 	ldw	r2,-40(fp)
81120ec4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
81120ec8:	e0fffe17 	ldw	r3,-8(fp)
81120ecc:	e0bfef17 	ldw	r2,-68(fp)
81120ed0:	1885c83a 	sub	r2,r3,r2
}
81120ed4:	e037883a 	mov	sp,fp
81120ed8:	dfc00117 	ldw	ra,4(sp)
81120edc:	df000017 	ldw	fp,0(sp)
81120ee0:	dec00204 	addi	sp,sp,8
81120ee4:	f800283a 	ret

81120ee8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81120ee8:	defffe04 	addi	sp,sp,-8
81120eec:	dfc00115 	stw	ra,4(sp)
81120ef0:	df000015 	stw	fp,0(sp)
81120ef4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81120ef8:	d0a00d17 	ldw	r2,-32716(gp)
81120efc:	10000326 	beq	r2,zero,81120f0c <alt_get_errno+0x24>
81120f00:	d0a00d17 	ldw	r2,-32716(gp)
81120f04:	103ee83a 	callr	r2
81120f08:	00000106 	br	81120f10 <alt_get_errno+0x28>
81120f0c:	d0a03604 	addi	r2,gp,-32552
}
81120f10:	e037883a 	mov	sp,fp
81120f14:	dfc00117 	ldw	ra,4(sp)
81120f18:	df000017 	ldw	fp,0(sp)
81120f1c:	dec00204 	addi	sp,sp,8
81120f20:	f800283a 	ret

81120f24 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
81120f24:	defffc04 	addi	sp,sp,-16
81120f28:	df000315 	stw	fp,12(sp)
81120f2c:	df000304 	addi	fp,sp,12
81120f30:	e13ffd15 	stw	r4,-12(fp)
81120f34:	e17ffe15 	stw	r5,-8(fp)
81120f38:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81120f3c:	e0bffd17 	ldw	r2,-12(fp)
81120f40:	10800037 	ldwio	r2,0(r2)
81120f44:	1080010c 	andi	r2,r2,4
81120f48:	10000226 	beq	r2,zero,81120f54 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
81120f4c:	00bff904 	movi	r2,-28
81120f50:	00001506 	br	81120fa8 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
81120f54:	e0bfff17 	ldw	r2,-4(fp)
81120f58:	10800017 	ldw	r2,0(r2)
81120f5c:	1007883a 	mov	r3,r2
81120f60:	e0bffe17 	ldw	r2,-8(fp)
81120f64:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
81120f68:	e0bffe17 	ldw	r2,-8(fp)
81120f6c:	10800104 	addi	r2,r2,4
81120f70:	e0ffff17 	ldw	r3,-4(fp)
81120f74:	18c00117 	ldw	r3,4(r3)
81120f78:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
81120f7c:	e0bffe17 	ldw	r2,-8(fp)
81120f80:	10800204 	addi	r2,r2,8
81120f84:	e0ffff17 	ldw	r3,-4(fp)
81120f88:	18c00217 	ldw	r3,8(r3)
81120f8c:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
81120f90:	e0bffe17 	ldw	r2,-8(fp)
81120f94:	10800304 	addi	r2,r2,12
81120f98:	e0ffff17 	ldw	r3,-4(fp)
81120f9c:	18c00317 	ldw	r3,12(r3)
81120fa0:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
81120fa4:	0005883a 	mov	r2,zero
}
81120fa8:	e037883a 	mov	sp,fp
81120fac:	df000017 	ldw	fp,0(sp)
81120fb0:	dec00104 	addi	sp,sp,4
81120fb4:	f800283a 	ret

81120fb8 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
81120fb8:	defffc04 	addi	sp,sp,-16
81120fbc:	df000315 	stw	fp,12(sp)
81120fc0:	df000304 	addi	fp,sp,12
81120fc4:	e13ffd15 	stw	r4,-12(fp)
81120fc8:	e17ffe15 	stw	r5,-8(fp)
81120fcc:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81120fd0:	e0bffd17 	ldw	r2,-12(fp)
81120fd4:	10800037 	ldwio	r2,0(r2)
81120fd8:	1080010c 	andi	r2,r2,4
81120fdc:	10000226 	beq	r2,zero,81120fe8 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
81120fe0:	00bff904 	movi	r2,-28
81120fe4:	00003b06 	br	811210d4 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
81120fe8:	e0bfff17 	ldw	r2,-4(fp)
81120fec:	10800017 	ldw	r2,0(r2)
81120ff0:	1007883a 	mov	r3,r2
81120ff4:	e0bffe17 	ldw	r2,-8(fp)
81120ff8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81120ffc:	e0bffe17 	ldw	r2,-8(fp)
81121000:	10800104 	addi	r2,r2,4
81121004:	e0ffff17 	ldw	r3,-4(fp)
81121008:	18c00117 	ldw	r3,4(r3)
8112100c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
81121010:	e0bffe17 	ldw	r2,-8(fp)
81121014:	10800204 	addi	r2,r2,8
81121018:	e0ffff17 	ldw	r3,-4(fp)
8112101c:	18c00217 	ldw	r3,8(r3)
81121020:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
81121024:	e0bffe17 	ldw	r2,-8(fp)
81121028:	10800304 	addi	r2,r2,12
8112102c:	e0ffff17 	ldw	r3,-4(fp)
81121030:	18c0030b 	ldhu	r3,12(r3)
81121034:	18ffffcc 	andi	r3,r3,65535
81121038:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8112103c:	e0bffe17 	ldw	r2,-8(fp)
81121040:	10800384 	addi	r2,r2,14
81121044:	e0ffff17 	ldw	r3,-4(fp)
81121048:	18c00383 	ldbu	r3,14(r3)
8112104c:	18c03fcc 	andi	r3,r3,255
81121050:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
81121054:	e0bffe17 	ldw	r2,-8(fp)
81121058:	108003c4 	addi	r2,r2,15
8112105c:	e0ffff17 	ldw	r3,-4(fp)
81121060:	18c003c3 	ldbu	r3,15(r3)
81121064:	18c03fcc 	andi	r3,r3,255
81121068:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8112106c:	e0bffe17 	ldw	r2,-8(fp)
81121070:	10800404 	addi	r2,r2,16
81121074:	e0ffff17 	ldw	r3,-4(fp)
81121078:	18c0040b 	ldhu	r3,16(r3)
8112107c:	18ffffcc 	andi	r3,r3,65535
81121080:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
81121084:	e0bffe17 	ldw	r2,-8(fp)
81121088:	10800484 	addi	r2,r2,18
8112108c:	e0ffff17 	ldw	r3,-4(fp)
81121090:	18c0048b 	ldhu	r3,18(r3)
81121094:	18ffffcc 	andi	r3,r3,65535
81121098:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8112109c:	e0bffe17 	ldw	r2,-8(fp)
811210a0:	10800504 	addi	r2,r2,20
811210a4:	0007883a 	mov	r3,zero
811210a8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
811210ac:	e0bffe17 	ldw	r2,-8(fp)
811210b0:	10800604 	addi	r2,r2,24
811210b4:	0007883a 	mov	r3,zero
811210b8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
811210bc:	e0bffe17 	ldw	r2,-8(fp)
811210c0:	10800704 	addi	r2,r2,28
811210c4:	e0ffff17 	ldw	r3,-4(fp)
811210c8:	18c00717 	ldw	r3,28(r3)
811210cc:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
811210d0:	0005883a 	mov	r2,zero
}
811210d4:	e037883a 	mov	sp,fp
811210d8:	df000017 	ldw	fp,0(sp)
811210dc:	dec00104 	addi	sp,sp,4
811210e0:	f800283a 	ret

811210e4 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
811210e4:	defff804 	addi	sp,sp,-32
811210e8:	dfc00715 	stw	ra,28(sp)
811210ec:	df000615 	stw	fp,24(sp)
811210f0:	df000604 	addi	fp,sp,24
811210f4:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
811210f8:	e0bfff17 	ldw	r2,-4(fp)
811210fc:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
81121100:	e0bffa17 	ldw	r2,-24(fp)
81121104:	10801783 	ldbu	r2,94(r2)
81121108:	10803fcc 	andi	r2,r2,255
8112110c:	10001126 	beq	r2,zero,81121154 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81121110:	e0bffa17 	ldw	r2,-24(fp)
81121114:	10800617 	ldw	r2,24(r2)
81121118:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8112111c:	1007883a 	mov	r3,r2
81121120:	00bffdc4 	movi	r2,-9
81121124:	1884703a 	and	r2,r3,r2
81121128:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8112112c:	e0bffa17 	ldw	r2,-24(fp)
81121130:	10800617 	ldw	r2,24(r2)
81121134:	e0fffb17 	ldw	r3,-20(fp)
81121138:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8112113c:	e0bffa17 	ldw	r2,-24(fp)
81121140:	10800617 	ldw	r2,24(r2)
81121144:	10800404 	addi	r2,r2,16
81121148:	00c00044 	movi	r3,1
8112114c:	10c00035 	stwio	r3,0(r2)
81121150:	00001106 	br	81121198 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81121154:	e0bffa17 	ldw	r2,-24(fp)
81121158:	10800317 	ldw	r2,12(r2)
8112115c:	10800104 	addi	r2,r2,4
81121160:	10800037 	ldwio	r2,0(r2)
81121164:	1007883a 	mov	r3,r2
81121168:	00bffbc4 	movi	r2,-17
8112116c:	1884703a 	and	r2,r3,r2
81121170:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81121174:	e0bffa17 	ldw	r2,-24(fp)
81121178:	10800317 	ldw	r2,12(r2)
8112117c:	10800104 	addi	r2,r2,4
81121180:	e0fffb17 	ldw	r3,-20(fp)
81121184:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81121188:	e0bffa17 	ldw	r2,-24(fp)
8112118c:	10800317 	ldw	r2,12(r2)
81121190:	00c08004 	movi	r3,512
81121194:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
81121198:	e0bffa17 	ldw	r2,-24(fp)
8112119c:	10800b17 	ldw	r2,44(r2)
811211a0:	10001226 	beq	r2,zero,811211ec <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811211a4:	0005303a 	rdctl	r2,status
811211a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811211ac:	e0fffd17 	ldw	r3,-12(fp)
811211b0:	00bfff84 	movi	r2,-2
811211b4:	1884703a 	and	r2,r3,r2
811211b8:	1001703a 	wrctl	status,r2
  
  return context;
811211bc:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
811211c0:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
811211c4:	e0bffa17 	ldw	r2,-24(fp)
811211c8:	10800b17 	ldw	r2,44(r2)
811211cc:	e0fffa17 	ldw	r3,-24(fp)
811211d0:	18c00c17 	ldw	r3,48(r3)
811211d4:	1809883a 	mov	r4,r3
811211d8:	103ee83a 	callr	r2
811211dc:	e0bffc17 	ldw	r2,-16(fp)
811211e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811211e4:	e0bffe17 	ldw	r2,-8(fp)
811211e8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
811211ec:	e0bffa17 	ldw	r2,-24(fp)
811211f0:	10801783 	ldbu	r2,94(r2)
811211f4:	10803fcc 	andi	r2,r2,255
811211f8:	10000a26 	beq	r2,zero,81121224 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
811211fc:	e0bffa17 	ldw	r2,-24(fp)
81121200:	10800617 	ldw	r2,24(r2)
81121204:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81121208:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
8112120c:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81121210:	e0bffa17 	ldw	r2,-24(fp)
81121214:	10800617 	ldw	r2,24(r2)
81121218:	e0fffb17 	ldw	r3,-20(fp)
8112121c:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
81121220:	00000c06 	br	81121254 <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81121224:	e0bffa17 	ldw	r2,-24(fp)
81121228:	10800317 	ldw	r2,12(r2)
8112122c:	10800104 	addi	r2,r2,4
81121230:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
81121234:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81121238:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8112123c:	e0bffa17 	ldw	r2,-24(fp)
81121240:	10800317 	ldw	r2,12(r2)
81121244:	10800104 	addi	r2,r2,4
81121248:	e0fffb17 	ldw	r3,-20(fp)
8112124c:	10c00035 	stwio	r3,0(r2)
    }

    return;
81121250:	0001883a 	nop
}
81121254:	e037883a 	mov	sp,fp
81121258:	dfc00117 	ldw	ra,4(sp)
8112125c:	df000017 	ldw	fp,0(sp)
81121260:	dec00204 	addi	sp,sp,8
81121264:	f800283a 	ret

81121268 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81121268:	defffb04 	addi	sp,sp,-20
8112126c:	df000415 	stw	fp,16(sp)
81121270:	df000404 	addi	fp,sp,16
81121274:	e13ffc15 	stw	r4,-16(fp)
81121278:	e17ffd15 	stw	r5,-12(fp)
8112127c:	e1bffe15 	stw	r6,-8(fp)
81121280:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81121284:	e0bffc17 	ldw	r2,-16(fp)
81121288:	10c01217 	ldw	r3,72(r2)
8112128c:	e0800117 	ldw	r2,4(fp)
81121290:	18800436 	bltu	r3,r2,811212a4 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
81121294:	e0bffc17 	ldw	r2,-16(fp)
81121298:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8112129c:	10803fcc 	andi	r2,r2,255
811212a0:	10000226 	beq	r2,zero,811212ac <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
811212a4:	00bffa84 	movi	r2,-22
811212a8:	00000e06 	br	811212e4 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
811212ac:	e0bffd17 	ldw	r2,-12(fp)
811212b0:	e0fffe17 	ldw	r3,-8(fp)
811212b4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
811212b8:	e0bffd17 	ldw	r2,-12(fp)
811212bc:	e0ffff17 	ldw	r3,-4(fp)
811212c0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811212c4:	e0bffd17 	ldw	r2,-12(fp)
811212c8:	e0c00117 	ldw	r3,4(fp)
811212cc:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811212d0:	e0800217 	ldw	r2,8(fp)
811212d4:	10e00034 	orhi	r3,r2,32768
811212d8:	e0bffd17 	ldw	r2,-12(fp)
811212dc:	10c00315 	stw	r3,12(r2)
    
    return 0;
811212e0:	0005883a 	mov	r2,zero
}
811212e4:	e037883a 	mov	sp,fp
811212e8:	df000017 	ldw	fp,0(sp)
811212ec:	dec00104 	addi	sp,sp,4
811212f0:	f800283a 	ret

811212f4 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
811212f4:	defff604 	addi	sp,sp,-40
811212f8:	df000915 	stw	fp,36(sp)
811212fc:	df000904 	addi	fp,sp,36
81121300:	e13ff715 	stw	r4,-36(fp)
81121304:	e17ff815 	stw	r5,-32(fp)
81121308:	e1bff915 	stw	r6,-28(fp)
8112130c:	e1fffa15 	stw	r7,-24(fp)
81121310:	e1800317 	ldw	r6,12(fp)
81121314:	e1400417 	ldw	r5,16(fp)
81121318:	e1000517 	ldw	r4,20(fp)
8112131c:	e0c00617 	ldw	r3,24(fp)
81121320:	e0800717 	ldw	r2,28(fp)
81121324:	e1bffb0d 	sth	r6,-20(fp)
81121328:	e17ffc05 	stb	r5,-16(fp)
8112132c:	e13ffd05 	stb	r4,-12(fp)
81121330:	e0fffe0d 	sth	r3,-8(fp)
81121334:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
81121338:	e0bff717 	ldw	r2,-36(fp)
8112133c:	10c01217 	ldw	r3,72(r2)
81121340:	e0800117 	ldw	r2,4(fp)
81121344:	18801936 	bltu	r3,r2,811213ac <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
81121348:	e13ff717 	ldw	r4,-36(fp)
8112134c:	20801317 	ldw	r2,76(r4)
81121350:	20c01417 	ldw	r3,80(r4)
81121354:	e13ffe0b 	ldhu	r4,-8(fp)
81121358:	213fffcc 	andi	r4,r4,65535
8112135c:	2015883a 	mov	r10,r4
81121360:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81121364:	1ac01136 	bltu	r3,r11,811213ac <alt_msgdma_construct_extended_descriptor+0xb8>
81121368:	58c0011e 	bne	r11,r3,81121370 <alt_msgdma_construct_extended_descriptor+0x7c>
8112136c:	12800f36 	bltu	r2,r10,811213ac <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81121370:	e13ff717 	ldw	r4,-36(fp)
81121374:	20801317 	ldw	r2,76(r4)
81121378:	20c01417 	ldw	r3,80(r4)
8112137c:	e13fff0b 	ldhu	r4,-4(fp)
81121380:	213fffcc 	andi	r4,r4,65535
81121384:	2011883a 	mov	r8,r4
81121388:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8112138c:	1a400736 	bltu	r3,r9,811213ac <alt_msgdma_construct_extended_descriptor+0xb8>
81121390:	48c0011e 	bne	r9,r3,81121398 <alt_msgdma_construct_extended_descriptor+0xa4>
81121394:	12000536 	bltu	r2,r8,811213ac <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81121398:	e0bff717 	ldw	r2,-36(fp)
8112139c:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
811213a0:	10803fcc 	andi	r2,r2,255
811213a4:	10800060 	cmpeqi	r2,r2,1
811213a8:	1000021e 	bne	r2,zero,811213b4 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
811213ac:	00bffa84 	movi	r2,-22
811213b0:	00002106 	br	81121438 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
811213b4:	e0bff817 	ldw	r2,-32(fp)
811213b8:	e0fff917 	ldw	r3,-28(fp)
811213bc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
811213c0:	e0bff817 	ldw	r2,-32(fp)
811213c4:	e0fffa17 	ldw	r3,-24(fp)
811213c8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811213cc:	e0bff817 	ldw	r2,-32(fp)
811213d0:	e0c00117 	ldw	r3,4(fp)
811213d4:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
811213d8:	e0bff817 	ldw	r2,-32(fp)
811213dc:	e0fffb0b 	ldhu	r3,-20(fp)
811213e0:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
811213e4:	e0bff817 	ldw	r2,-32(fp)
811213e8:	e0fffc03 	ldbu	r3,-16(fp)
811213ec:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
811213f0:	e0bff817 	ldw	r2,-32(fp)
811213f4:	e0fffd03 	ldbu	r3,-12(fp)
811213f8:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
811213fc:	e0bff817 	ldw	r2,-32(fp)
81121400:	e0fffe0b 	ldhu	r3,-8(fp)
81121404:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
81121408:	e0bff817 	ldw	r2,-32(fp)
8112140c:	e0ffff0b 	ldhu	r3,-4(fp)
81121410:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
81121414:	e0bff817 	ldw	r2,-32(fp)
81121418:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8112141c:	e0bff817 	ldw	r2,-32(fp)
81121420:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81121424:	e0800217 	ldw	r2,8(fp)
81121428:	10e00034 	orhi	r3,r2,32768
8112142c:	e0bff817 	ldw	r2,-32(fp)
81121430:	10c00715 	stw	r3,28(r2)

  return 0 ;
81121434:	0005883a 	mov	r2,zero

}
81121438:	e037883a 	mov	sp,fp
8112143c:	df000017 	ldw	fp,0(sp)
81121440:	dec00104 	addi	sp,sp,4
81121444:	f800283a 	ret

81121448 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81121448:	deffee04 	addi	sp,sp,-72
8112144c:	dfc01115 	stw	ra,68(sp)
81121450:	df001015 	stw	fp,64(sp)
81121454:	df001004 	addi	fp,sp,64
81121458:	e13ffd15 	stw	r4,-12(fp)
8112145c:	e17ffe15 	stw	r5,-8(fp)
81121460:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
81121464:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
81121468:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8112146c:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81121470:	e0bffd17 	ldw	r2,-12(fp)
81121474:	10800317 	ldw	r2,12(r2)
81121478:	10800204 	addi	r2,r2,8
8112147c:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81121480:	10bfffcc 	andi	r2,r2,65535
81121484:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81121488:	e0bffd17 	ldw	r2,-12(fp)
8112148c:	10800317 	ldw	r2,12(r2)
81121490:	10800204 	addi	r2,r2,8
81121494:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81121498:	1004d43a 	srli	r2,r2,16
8112149c:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811214a0:	e0bffd17 	ldw	r2,-12(fp)
811214a4:	10800917 	ldw	r2,36(r2)
811214a8:	e0fff417 	ldw	r3,-48(fp)
811214ac:	1880042e 	bgeu	r3,r2,811214c0 <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
811214b0:	e0bffd17 	ldw	r2,-12(fp)
811214b4:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811214b8:	e0fff317 	ldw	r3,-52(fp)
811214bc:	18800236 	bltu	r3,r2,811214c8 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
811214c0:	00bff904 	movi	r2,-28
811214c4:	0000a906 	br	8112176c <alt_msgdma_descriptor_async_transfer+0x324>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
811214c8:	e0bffd17 	ldw	r2,-12(fp)
811214cc:	10801817 	ldw	r2,96(r2)
811214d0:	e0bff615 	stw	r2,-40(fp)
811214d4:	e03ffc0d 	sth	zero,-16(fp)
811214d8:	e0bffc0b 	ldhu	r2,-16(fp)
811214dc:	e0fffc84 	addi	r3,fp,-14
811214e0:	180d883a 	mov	r6,r3
811214e4:	100b883a 	mov	r5,r2
811214e8:	e13ff617 	ldw	r4,-40(fp)
811214ec:	111c3980 	call	8111c398 <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
811214f0:	00800804 	movi	r2,32
811214f4:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811214f8:	0005303a 	rdctl	r2,status
811214fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81121500:	e0fff717 	ldw	r3,-36(fp)
81121504:	00bfff84 	movi	r2,-2
81121508:	1884703a 	and	r2,r3,r2
8112150c:	1001703a 	wrctl	status,r2
  
  return context;
81121510:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81121514:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81121518:	e0bffd17 	ldw	r2,-12(fp)
8112151c:	10800317 	ldw	r2,12(r2)
81121520:	10800104 	addi	r2,r2,4
81121524:	e0fff117 	ldw	r3,-60(fp)
81121528:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
8112152c:	e0bffd17 	ldw	r2,-12(fp)
81121530:	10800317 	ldw	r2,12(r2)
81121534:	e0fffd17 	ldw	r3,-12(fp)
81121538:	18c00317 	ldw	r3,12(r3)
8112153c:	18c00037 	ldwio	r3,0(r3)
81121540:	10c00035 	stwio	r3,0(r2)
81121544:	e0bff217 	ldw	r2,-56(fp)
81121548:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112154c:	e0bffb17 	ldw	r2,-20(fp)
81121550:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81121554:	e0bffe17 	ldw	r2,-8(fp)
81121558:	10001e26 	beq	r2,zero,811215d4 <alt_msgdma_descriptor_async_transfer+0x18c>
8112155c:	e0bfff17 	ldw	r2,-4(fp)
81121560:	10001c1e 	bne	r2,zero,811215d4 <alt_msgdma_descriptor_async_transfer+0x18c>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81121564:	00001106 	br	811215ac <alt_msgdma_descriptor_async_transfer+0x164>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81121568:	01000044 	movi	r4,1
8112156c:	11230100 	call	81123010 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81121570:	e0bff00b 	ldhu	r2,-64(fp)
81121574:	1084e230 	cmpltui	r2,r2,5000
81121578:	1000091e 	bne	r2,zero,811215a0 <alt_msgdma_descriptor_async_transfer+0x158>
            {
                alt_printf("time out after 5 msec while waiting" 
8112157c:	012044b4 	movhi	r4,33042
81121580:	21140004 	addi	r4,r4,20480
81121584:	11239540 	call	81123954 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81121588:	e0bffd17 	ldw	r2,-12(fp)
8112158c:	10801817 	ldw	r2,96(r2)
81121590:	1009883a 	mov	r4,r2
81121594:	111c7100 	call	8111c710 <OSSemPost>
				
                return -ETIME;
81121598:	00bff084 	movi	r2,-62
8112159c:	00007306 	br	8112176c <alt_msgdma_descriptor_async_transfer+0x324>
            }
            counter++; 
811215a0:	e0bff00b 	ldhu	r2,-64(fp)
811215a4:	10800044 	addi	r2,r2,1
811215a8:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
811215ac:	e0bffd17 	ldw	r2,-12(fp)
811215b0:	10c00317 	ldw	r3,12(r2)
811215b4:	e0bffd17 	ldw	r2,-12(fp)
811215b8:	10800417 	ldw	r2,16(r2)
811215bc:	e1bffe17 	ldw	r6,-8(fp)
811215c0:	100b883a 	mov	r5,r2
811215c4:	1809883a 	mov	r4,r3
811215c8:	1120f240 	call	81120f24 <alt_msgdma_write_standard_descriptor>
811215cc:	103fe61e 	bne	r2,zero,81121568 <__reset+0xfb101568>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
811215d0:	00002706 	br	81121670 <alt_msgdma_descriptor_async_transfer+0x228>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811215d4:	e0bffe17 	ldw	r2,-8(fp)
811215d8:	10001f1e 	bne	r2,zero,81121658 <alt_msgdma_descriptor_async_transfer+0x210>
811215dc:	e0bfff17 	ldw	r2,-4(fp)
811215e0:	10001d26 	beq	r2,zero,81121658 <alt_msgdma_descriptor_async_transfer+0x210>
    {
        counter = 0; /* reset counter */
811215e4:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811215e8:	00001106 	br	81121630 <alt_msgdma_descriptor_async_transfer+0x1e8>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
811215ec:	01000044 	movi	r4,1
811215f0:	11230100 	call	81123010 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811215f4:	e0bff00b 	ldhu	r2,-64(fp)
811215f8:	1084e230 	cmpltui	r2,r2,5000
811215fc:	1000091e 	bne	r2,zero,81121624 <alt_msgdma_descriptor_async_transfer+0x1dc>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
81121600:	012044b4 	movhi	r4,33042
81121604:	21141604 	addi	r4,r4,20568
81121608:	11239540 	call	81123954 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8112160c:	e0bffd17 	ldw	r2,-12(fp)
81121610:	10801817 	ldw	r2,96(r2)
81121614:	1009883a 	mov	r4,r2
81121618:	111c7100 	call	8111c710 <OSSemPost>
				
                return -ETIME;
8112161c:	00bff084 	movi	r2,-62
81121620:	00005206 	br	8112176c <alt_msgdma_descriptor_async_transfer+0x324>
            }
            counter++; 
81121624:	e0bff00b 	ldhu	r2,-64(fp)
81121628:	10800044 	addi	r2,r2,1
8112162c:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81121630:	e0bffd17 	ldw	r2,-12(fp)
81121634:	10c00317 	ldw	r3,12(r2)
81121638:	e0bffd17 	ldw	r2,-12(fp)
8112163c:	10800417 	ldw	r2,16(r2)
81121640:	e1bfff17 	ldw	r6,-4(fp)
81121644:	100b883a 	mov	r5,r2
81121648:	1809883a 	mov	r4,r3
8112164c:	1120fb80 	call	81120fb8 <alt_msgdma_write_extended_descriptor>
81121650:	103fe61e 	bne	r2,zero,811215ec <__reset+0xfb1015ec>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81121654:	00000606 	br	81121670 <alt_msgdma_descriptor_async_transfer+0x228>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81121658:	e0bffd17 	ldw	r2,-12(fp)
8112165c:	10801817 	ldw	r2,96(r2)
81121660:	1009883a 	mov	r4,r2
81121664:	111c7100 	call	8111c710 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81121668:	00bfffc4 	movi	r2,-1
8112166c:	00003f06 	br	8112176c <alt_msgdma_descriptor_async_transfer+0x324>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
81121670:	e0bffd17 	ldw	r2,-12(fp)
81121674:	10800b17 	ldw	r2,44(r2)
81121678:	10001c26 	beq	r2,zero,811216ec <alt_msgdma_descriptor_async_transfer+0x2a4>
    {

        control |= (dev->control |
8112167c:	e0bffd17 	ldw	r2,-12(fp)
81121680:	10c00d17 	ldw	r3,52(r2)
81121684:	e0bff117 	ldw	r2,-60(fp)
81121688:	1884b03a 	or	r2,r3,r2
8112168c:	10800514 	ori	r2,r2,20
81121690:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81121694:	e0fff117 	ldw	r3,-60(fp)
81121698:	00bff7c4 	movi	r2,-33
8112169c:	1884703a 	and	r2,r3,r2
811216a0:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811216a4:	0005303a 	rdctl	r2,status
811216a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811216ac:	e0fff917 	ldw	r3,-28(fp)
811216b0:	00bfff84 	movi	r2,-2
811216b4:	1884703a 	and	r2,r3,r2
811216b8:	1001703a 	wrctl	status,r2
  
  return context;
811216bc:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
811216c0:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811216c4:	e0bffd17 	ldw	r2,-12(fp)
811216c8:	10800317 	ldw	r2,12(r2)
811216cc:	10800104 	addi	r2,r2,4
811216d0:	e0fff117 	ldw	r3,-60(fp)
811216d4:	10c00035 	stwio	r3,0(r2)
811216d8:	e0bff217 	ldw	r2,-56(fp)
811216dc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811216e0:	e0bff517 	ldw	r2,-44(fp)
811216e4:	1001703a 	wrctl	status,r2
811216e8:	00001b06 	br	81121758 <alt_msgdma_descriptor_async_transfer+0x310>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
811216ec:	e0bffd17 	ldw	r2,-12(fp)
811216f0:	10c00d17 	ldw	r3,52(r2)
811216f4:	e0bff117 	ldw	r2,-60(fp)
811216f8:	1884b03a 	or	r2,r3,r2
811216fc:	10800114 	ori	r2,r2,4
81121700:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
81121704:	e0fff117 	ldw	r3,-60(fp)
81121708:	00bff3c4 	movi	r2,-49
8112170c:	1884703a 	and	r2,r3,r2
81121710:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81121714:	0005303a 	rdctl	r2,status
81121718:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112171c:	e0fffa17 	ldw	r3,-24(fp)
81121720:	00bfff84 	movi	r2,-2
81121724:	1884703a 	and	r2,r3,r2
81121728:	1001703a 	wrctl	status,r2
  
  return context;
8112172c:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
81121730:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81121734:	e0bffd17 	ldw	r2,-12(fp)
81121738:	10800317 	ldw	r2,12(r2)
8112173c:	10800104 	addi	r2,r2,4
81121740:	e0fff117 	ldw	r3,-60(fp)
81121744:	10c00035 	stwio	r3,0(r2)
81121748:	e0bff217 	ldw	r2,-56(fp)
8112174c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81121750:	e0bff817 	ldw	r2,-32(fp)
81121754:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
81121758:	e0bffd17 	ldw	r2,-12(fp)
8112175c:	10801817 	ldw	r2,96(r2)
81121760:	1009883a 	mov	r4,r2
81121764:	111c7100 	call	8111c710 <OSSemPost>
    
    return 0;
81121768:	0005883a 	mov	r2,zero
}
8112176c:	e037883a 	mov	sp,fp
81121770:	dfc00117 	ldw	ra,4(sp)
81121774:	df000017 	ldw	fp,0(sp)
81121778:	dec00204 	addi	sp,sp,8
8112177c:	f800283a 	ret

81121780 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81121780:	deffee04 	addi	sp,sp,-72
81121784:	dfc01115 	stw	ra,68(sp)
81121788:	df001015 	stw	fp,64(sp)
8112178c:	df001004 	addi	fp,sp,64
81121790:	e13ffd15 	stw	r4,-12(fp)
81121794:	e17ffe15 	stw	r5,-8(fp)
81121798:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8112179c:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
811217a0:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
811217a4:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
811217a8:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811217ac:	e0bffd17 	ldw	r2,-12(fp)
811217b0:	10800317 	ldw	r2,12(r2)
811217b4:	10800204 	addi	r2,r2,8
811217b8:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
811217bc:	10bfffcc 	andi	r2,r2,65535
811217c0:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811217c4:	e0bffd17 	ldw	r2,-12(fp)
811217c8:	10800317 	ldw	r2,12(r2)
811217cc:	10800204 	addi	r2,r2,8
811217d0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
811217d4:	1004d43a 	srli	r2,r2,16
811217d8:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
811217dc:	00807804 	movi	r2,480
811217e0:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811217e4:	00001906 	br	8112184c <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
811217e8:	01000044 	movi	r4,1
811217ec:	11230100 	call	81123010 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811217f0:	e0bff10b 	ldhu	r2,-60(fp)
811217f4:	1084e230 	cmpltui	r2,r2,5000
811217f8:	1000051e 	bne	r2,zero,81121810 <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
811217fc:	012044b4 	movhi	r4,33042
81121800:	21142c04 	addi	r4,r4,20656
81121804:	11239540 	call	81123954 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
81121808:	00bff084 	movi	r2,-62
8112180c:	0000d706 	br	81121b6c <alt_msgdma_descriptor_sync_transfer+0x3ec>
        }
        counter++;  
81121810:	e0bff10b 	ldhu	r2,-60(fp)
81121814:	10800044 	addi	r2,r2,1
81121818:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8112181c:	e0bffd17 	ldw	r2,-12(fp)
81121820:	10800317 	ldw	r2,12(r2)
81121824:	10800204 	addi	r2,r2,8
81121828:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8112182c:	10bfffcc 	andi	r2,r2,65535
81121830:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81121834:	e0bffd17 	ldw	r2,-12(fp)
81121838:	10800317 	ldw	r2,12(r2)
8112183c:	10800204 	addi	r2,r2,8
81121840:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
81121844:	1004d43a 	srli	r2,r2,16
81121848:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8112184c:	e0bffd17 	ldw	r2,-12(fp)
81121850:	10800917 	ldw	r2,36(r2)
81121854:	e0fff317 	ldw	r3,-52(fp)
81121858:	18bfe32e 	bgeu	r3,r2,811217e8 <__reset+0xfb1017e8>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8112185c:	e0bffd17 	ldw	r2,-12(fp)
81121860:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81121864:	e0fff217 	ldw	r3,-56(fp)
81121868:	18bfdf2e 	bgeu	r3,r2,811217e8 <__reset+0xfb1017e8>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
8112186c:	e0bffd17 	ldw	r2,-12(fp)
81121870:	10801817 	ldw	r2,96(r2)
81121874:	e0bff815 	stw	r2,-32(fp)
81121878:	e03ffc0d 	sth	zero,-16(fp)
8112187c:	e0bffc0b 	ldhu	r2,-16(fp)
81121880:	e0fffc84 	addi	r3,fp,-14
81121884:	180d883a 	mov	r6,r3
81121888:	100b883a 	mov	r5,r2
8112188c:	e13ff817 	ldw	r4,-32(fp)
81121890:	111c3980 	call	8111c398 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81121894:	0005303a 	rdctl	r2,status
81121898:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112189c:	e0fffb17 	ldw	r3,-20(fp)
811218a0:	00bfff84 	movi	r2,-2
811218a4:	1884703a 	and	r2,r3,r2
811218a8:	1001703a 	wrctl	status,r2
  
  return context;
811218ac:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
811218b0:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811218b4:	e0bffd17 	ldw	r2,-12(fp)
811218b8:	10800317 	ldw	r2,12(r2)
811218bc:	10800104 	addi	r2,r2,4
811218c0:	00c00804 	movi	r3,32
811218c4:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
811218c8:	e0bffd17 	ldw	r2,-12(fp)
811218cc:	10800317 	ldw	r2,12(r2)
811218d0:	e0fffd17 	ldw	r3,-12(fp)
811218d4:	18c00317 	ldw	r3,12(r3)
811218d8:	18c00037 	ldwio	r3,0(r3)
811218dc:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
811218e0:	e0bffe17 	ldw	r2,-8(fp)
811218e4:	10001f26 	beq	r2,zero,81121964 <alt_msgdma_descriptor_sync_transfer+0x1e4>
811218e8:	e0bfff17 	ldw	r2,-4(fp)
811218ec:	10001d1e 	bne	r2,zero,81121964 <alt_msgdma_descriptor_sync_transfer+0x1e4>
    {
        counter = 0; /* reset counter */
811218f0:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
811218f4:	00001106 	br	8112193c <alt_msgdma_descriptor_sync_transfer+0x1bc>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
811218f8:	01000044 	movi	r4,1
811218fc:	11230100 	call	81123010 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81121900:	e0bff10b 	ldhu	r2,-60(fp)
81121904:	1084e230 	cmpltui	r2,r2,5000
81121908:	1000091e 	bne	r2,zero,81121930 <alt_msgdma_descriptor_sync_transfer+0x1b0>
            {
                alt_printf("time out after 5 msec while writing standard" 
8112190c:	012044b4 	movhi	r4,33042
81121910:	21144004 	addi	r4,r4,20736
81121914:	11239540 	call	81123954 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81121918:	e0bffd17 	ldw	r2,-12(fp)
8112191c:	10801817 	ldw	r2,96(r2)
81121920:	1009883a 	mov	r4,r2
81121924:	111c7100 	call	8111c710 <OSSemPost>
				
                return -ETIME;
81121928:	00bff084 	movi	r2,-62
8112192c:	00008f06 	br	81121b6c <alt_msgdma_descriptor_sync_transfer+0x3ec>
            }
            counter++;    
81121930:	e0bff10b 	ldhu	r2,-60(fp)
81121934:	10800044 	addi	r2,r2,1
81121938:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8112193c:	e0bffd17 	ldw	r2,-12(fp)
81121940:	10c00317 	ldw	r3,12(r2)
81121944:	e0bffd17 	ldw	r2,-12(fp)
81121948:	10800417 	ldw	r2,16(r2)
8112194c:	e1bffe17 	ldw	r6,-8(fp)
81121950:	100b883a 	mov	r5,r2
81121954:	1809883a 	mov	r4,r3
81121958:	1120f240 	call	81120f24 <alt_msgdma_write_standard_descriptor>
8112195c:	103fe61e 	bne	r2,zero,811218f8 <__reset+0xfb1018f8>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81121960:	00002706 	br	81121a00 <alt_msgdma_descriptor_sync_transfer+0x280>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81121964:	e0bffe17 	ldw	r2,-8(fp)
81121968:	10001f1e 	bne	r2,zero,811219e8 <alt_msgdma_descriptor_sync_transfer+0x268>
8112196c:	e0bfff17 	ldw	r2,-4(fp)
81121970:	10001d26 	beq	r2,zero,811219e8 <alt_msgdma_descriptor_sync_transfer+0x268>
    {
        counter = 0; /* reset counter */
81121974:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81121978:	00001106 	br	811219c0 <alt_msgdma_descriptor_sync_transfer+0x240>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8112197c:	01000044 	movi	r4,1
81121980:	11230100 	call	81123010 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81121984:	e0bff10b 	ldhu	r2,-60(fp)
81121988:	1084e230 	cmpltui	r2,r2,5000
8112198c:	1000091e 	bne	r2,zero,811219b4 <alt_msgdma_descriptor_sync_transfer+0x234>
            {
                alt_printf("time out after 5 msec while writing extended" 
81121990:	012044b4 	movhi	r4,33042
81121994:	21145104 	addi	r4,r4,20804
81121998:	11239540 	call	81123954 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8112199c:	e0bffd17 	ldw	r2,-12(fp)
811219a0:	10801817 	ldw	r2,96(r2)
811219a4:	1009883a 	mov	r4,r2
811219a8:	111c7100 	call	8111c710 <OSSemPost>
				
                return -ETIME;
811219ac:	00bff084 	movi	r2,-62
811219b0:	00006e06 	br	81121b6c <alt_msgdma_descriptor_sync_transfer+0x3ec>
            }
            counter++;
811219b4:	e0bff10b 	ldhu	r2,-60(fp)
811219b8:	10800044 	addi	r2,r2,1
811219bc:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811219c0:	e0bffd17 	ldw	r2,-12(fp)
811219c4:	10c00317 	ldw	r3,12(r2)
811219c8:	e0bffd17 	ldw	r2,-12(fp)
811219cc:	10800417 	ldw	r2,16(r2)
811219d0:	e1bfff17 	ldw	r6,-4(fp)
811219d4:	100b883a 	mov	r5,r2
811219d8:	1809883a 	mov	r4,r3
811219dc:	1120fb80 	call	81120fb8 <alt_msgdma_write_extended_descriptor>
811219e0:	103fe61e 	bne	r2,zero,8112197c <__reset+0xfb10197c>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811219e4:	00000606 	br	81121a00 <alt_msgdma_descriptor_sync_transfer+0x280>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
811219e8:	e0bffd17 	ldw	r2,-12(fp)
811219ec:	10801817 	ldw	r2,96(r2)
811219f0:	1009883a 	mov	r4,r2
811219f4:	111c7100 	call	8111c710 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
811219f8:	00bfffc4 	movi	r2,-1
811219fc:	00005b06 	br	81121b6c <alt_msgdma_descriptor_sync_transfer+0x3ec>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81121a00:	e0bffd17 	ldw	r2,-12(fp)
81121a04:	10800317 	ldw	r2,12(r2)
81121a08:	10800104 	addi	r2,r2,4
81121a0c:	e0fffd17 	ldw	r3,-12(fp)
81121a10:	19000d17 	ldw	r4,52(r3)
81121a14:	00fff2c4 	movi	r3,-53
81121a18:	20c6703a 	and	r3,r4,r3
81121a1c:	18c00114 	ori	r3,r3,4
81121a20:	10c00035 	stwio	r3,0(r2)
81121a24:	e0bff517 	ldw	r2,-44(fp)
81121a28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81121a2c:	e0bff717 	ldw	r2,-36(fp)
81121a30:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
81121a34:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81121a38:	e0bffd17 	ldw	r2,-12(fp)
81121a3c:	10800317 	ldw	r2,12(r2)
81121a40:	10800037 	ldwio	r2,0(r2)
81121a44:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81121a48:	00001506 	br	81121aa0 <alt_msgdma_descriptor_sync_transfer+0x320>
    {
        alt_busy_sleep(1); /* delay 1us */
81121a4c:	01000044 	movi	r4,1
81121a50:	11230100 	call	81123010 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81121a54:	e0bff10b 	ldhu	r2,-60(fp)
81121a58:	1084e230 	cmpltui	r2,r2,5000
81121a5c:	1000091e 	bne	r2,zero,81121a84 <alt_msgdma_descriptor_sync_transfer+0x304>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
81121a60:	012044b4 	movhi	r4,33042
81121a64:	21146204 	addi	r4,r4,20872
81121a68:	11239540 	call	81123954 <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
81121a6c:	e0bffd17 	ldw	r2,-12(fp)
81121a70:	10801817 	ldw	r2,96(r2)
81121a74:	1009883a 	mov	r4,r2
81121a78:	111c7100 	call	8111c710 <OSSemPost>
			
            return -ETIME;
81121a7c:	00bff084 	movi	r2,-62
81121a80:	00003a06 	br	81121b6c <alt_msgdma_descriptor_sync_transfer+0x3ec>
        }
        counter++;
81121a84:	e0bff10b 	ldhu	r2,-60(fp)
81121a88:	10800044 	addi	r2,r2,1
81121a8c:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81121a90:	e0bffd17 	ldw	r2,-12(fp)
81121a94:	10800317 	ldw	r2,12(r2)
81121a98:	10800037 	ldwio	r2,0(r2)
81121a9c:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81121aa0:	e0fff017 	ldw	r3,-64(fp)
81121aa4:	e0bff617 	ldw	r2,-40(fp)
81121aa8:	1884703a 	and	r2,r3,r2
81121aac:	1000031e 	bne	r2,zero,81121abc <alt_msgdma_descriptor_sync_transfer+0x33c>
81121ab0:	e0bff017 	ldw	r2,-64(fp)
81121ab4:	1080004c 	andi	r2,r2,1
81121ab8:	103fe41e 	bne	r2,zero,81121a4c <__reset+0xfb101a4c>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
81121abc:	e0fff017 	ldw	r3,-64(fp)
81121ac0:	e0bff617 	ldw	r2,-40(fp)
81121ac4:	1884703a 	and	r2,r3,r2
81121ac8:	10000626 	beq	r2,zero,81121ae4 <alt_msgdma_descriptor_sync_transfer+0x364>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81121acc:	e0bffd17 	ldw	r2,-12(fp)
81121ad0:	10801817 	ldw	r2,96(r2)
81121ad4:	1009883a 	mov	r4,r2
81121ad8:	111c7100 	call	8111c710 <OSSemPost>
		
        return error;
81121adc:	e0bff617 	ldw	r2,-40(fp)
81121ae0:	00002206 	br	81121b6c <alt_msgdma_descriptor_sync_transfer+0x3ec>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
81121ae4:	e0bffd17 	ldw	r2,-12(fp)
81121ae8:	10800317 	ldw	r2,12(r2)
81121aec:	10800104 	addi	r2,r2,4
81121af0:	10800037 	ldwio	r2,0(r2)
81121af4:	10800814 	ori	r2,r2,32
81121af8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81121afc:	0005303a 	rdctl	r2,status
81121b00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81121b04:	e0fffa17 	ldw	r3,-24(fp)
81121b08:	00bfff84 	movi	r2,-2
81121b0c:	1884703a 	and	r2,r3,r2
81121b10:	1001703a 	wrctl	status,r2
  
  return context;
81121b14:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
81121b18:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81121b1c:	e0bffd17 	ldw	r2,-12(fp)
81121b20:	10800317 	ldw	r2,12(r2)
81121b24:	10800104 	addi	r2,r2,4
81121b28:	e0fff417 	ldw	r3,-48(fp)
81121b2c:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81121b30:	e0bffd17 	ldw	r2,-12(fp)
81121b34:	10800317 	ldw	r2,12(r2)
81121b38:	e0fffd17 	ldw	r3,-12(fp)
81121b3c:	18c00317 	ldw	r3,12(r3)
81121b40:	18c00037 	ldwio	r3,0(r3)
81121b44:	10c00035 	stwio	r3,0(r2)
81121b48:	e0bff517 	ldw	r2,-44(fp)
81121b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81121b50:	e0bff917 	ldw	r2,-28(fp)
81121b54:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
81121b58:	e0bffd17 	ldw	r2,-12(fp)
81121b5c:	10801817 	ldw	r2,96(r2)
81121b60:	1009883a 	mov	r4,r2
81121b64:	111c7100 	call	8111c710 <OSSemPost>
    
    return 0;
81121b68:	0005883a 	mov	r2,zero

}
81121b6c:	e037883a 	mov	sp,fp
81121b70:	dfc00117 	ldw	ra,4(sp)
81121b74:	df000017 	ldw	fp,0(sp)
81121b78:	dec00204 	addi	sp,sp,8
81121b7c:	f800283a 	ret

81121b80 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
81121b80:	defff804 	addi	sp,sp,-32
81121b84:	dfc00715 	stw	ra,28(sp)
81121b88:	df000615 	stw	fp,24(sp)
81121b8c:	df000604 	addi	fp,sp,24
81121b90:	e13ffc15 	stw	r4,-16(fp)
81121b94:	e17ffd15 	stw	r5,-12(fp)
81121b98:	e1bffe15 	stw	r6,-8(fp)
81121b9c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
81121ba0:	e0800217 	ldw	r2,8(fp)
81121ba4:	d8800115 	stw	r2,4(sp)
81121ba8:	e0bfff17 	ldw	r2,-4(fp)
81121bac:	d8800015 	stw	r2,0(sp)
81121bb0:	e1fffe17 	ldw	r7,-8(fp)
81121bb4:	000d883a 	mov	r6,zero
81121bb8:	e17ffd17 	ldw	r5,-12(fp)
81121bbc:	e13ffc17 	ldw	r4,-16(fp)
81121bc0:	11212680 	call	81121268 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81121bc4:	e037883a 	mov	sp,fp
81121bc8:	dfc00117 	ldw	ra,4(sp)
81121bcc:	df000017 	ldw	fp,0(sp)
81121bd0:	dec00204 	addi	sp,sp,8
81121bd4:	f800283a 	ret

81121bd8 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
81121bd8:	defff804 	addi	sp,sp,-32
81121bdc:	dfc00715 	stw	ra,28(sp)
81121be0:	df000615 	stw	fp,24(sp)
81121be4:	df000604 	addi	fp,sp,24
81121be8:	e13ffc15 	stw	r4,-16(fp)
81121bec:	e17ffd15 	stw	r5,-12(fp)
81121bf0:	e1bffe15 	stw	r6,-8(fp)
81121bf4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81121bf8:	e0800217 	ldw	r2,8(fp)
81121bfc:	d8800115 	stw	r2,4(sp)
81121c00:	e0bfff17 	ldw	r2,-4(fp)
81121c04:	d8800015 	stw	r2,0(sp)
81121c08:	000f883a 	mov	r7,zero
81121c0c:	e1bffe17 	ldw	r6,-8(fp)
81121c10:	e17ffd17 	ldw	r5,-12(fp)
81121c14:	e13ffc17 	ldw	r4,-16(fp)
81121c18:	11212680 	call	81121268 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
81121c1c:	e037883a 	mov	sp,fp
81121c20:	dfc00117 	ldw	ra,4(sp)
81121c24:	df000017 	ldw	fp,0(sp)
81121c28:	dec00204 	addi	sp,sp,8
81121c2c:	f800283a 	ret

81121c30 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81121c30:	defff804 	addi	sp,sp,-32
81121c34:	dfc00715 	stw	ra,28(sp)
81121c38:	df000615 	stw	fp,24(sp)
81121c3c:	df000604 	addi	fp,sp,24
81121c40:	e13ffc15 	stw	r4,-16(fp)
81121c44:	e17ffd15 	stw	r5,-12(fp)
81121c48:	e1bffe15 	stw	r6,-8(fp)
81121c4c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81121c50:	e0800317 	ldw	r2,12(fp)
81121c54:	d8800115 	stw	r2,4(sp)
81121c58:	e0800217 	ldw	r2,8(fp)
81121c5c:	d8800015 	stw	r2,0(sp)
81121c60:	e1ffff17 	ldw	r7,-4(fp)
81121c64:	e1bffe17 	ldw	r6,-8(fp)
81121c68:	e17ffd17 	ldw	r5,-12(fp)
81121c6c:	e13ffc17 	ldw	r4,-16(fp)
81121c70:	11212680 	call	81121268 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81121c74:	e037883a 	mov	sp,fp
81121c78:	dfc00117 	ldw	ra,4(sp)
81121c7c:	df000017 	ldw	fp,0(sp)
81121c80:	dec00204 	addi	sp,sp,8
81121c84:	f800283a 	ret

81121c88 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
81121c88:	defff004 	addi	sp,sp,-64
81121c8c:	dfc00f15 	stw	ra,60(sp)
81121c90:	df000e15 	stw	fp,56(sp)
81121c94:	df000e04 	addi	fp,sp,56
81121c98:	e13ff915 	stw	r4,-28(fp)
81121c9c:	e17ffa15 	stw	r5,-24(fp)
81121ca0:	e1bffb15 	stw	r6,-20(fp)
81121ca4:	e1fffc15 	stw	r7,-16(fp)
81121ca8:	e1000317 	ldw	r4,12(fp)
81121cac:	e0c00417 	ldw	r3,16(fp)
81121cb0:	e0800517 	ldw	r2,20(fp)
81121cb4:	e13ffd0d 	sth	r4,-12(fp)
81121cb8:	e0fffe05 	stb	r3,-8(fp)
81121cbc:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81121cc0:	e0bffd0b 	ldhu	r2,-12(fp)
81121cc4:	e0fffe03 	ldbu	r3,-8(fp)
81121cc8:	e13fff0b 	ldhu	r4,-4(fp)
81121ccc:	d9000615 	stw	r4,24(sp)
81121cd0:	d8000515 	stw	zero,20(sp)
81121cd4:	d8c00415 	stw	r3,16(sp)
81121cd8:	d8000315 	stw	zero,12(sp)
81121cdc:	d8800215 	stw	r2,8(sp)
81121ce0:	e0800217 	ldw	r2,8(fp)
81121ce4:	d8800115 	stw	r2,4(sp)
81121ce8:	e0bffc17 	ldw	r2,-16(fp)
81121cec:	d8800015 	stw	r2,0(sp)
81121cf0:	e1fffb17 	ldw	r7,-20(fp)
81121cf4:	000d883a 	mov	r6,zero
81121cf8:	e17ffa17 	ldw	r5,-24(fp)
81121cfc:	e13ff917 	ldw	r4,-28(fp)
81121d00:	11212f40 	call	811212f4 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
81121d04:	e037883a 	mov	sp,fp
81121d08:	dfc00117 	ldw	ra,4(sp)
81121d0c:	df000017 	ldw	fp,0(sp)
81121d10:	dec00204 	addi	sp,sp,8
81121d14:	f800283a 	ret

81121d18 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81121d18:	defff004 	addi	sp,sp,-64
81121d1c:	dfc00f15 	stw	ra,60(sp)
81121d20:	df000e15 	stw	fp,56(sp)
81121d24:	df000e04 	addi	fp,sp,56
81121d28:	e13ff915 	stw	r4,-28(fp)
81121d2c:	e17ffa15 	stw	r5,-24(fp)
81121d30:	e1bffb15 	stw	r6,-20(fp)
81121d34:	e1fffc15 	stw	r7,-16(fp)
81121d38:	e1000317 	ldw	r4,12(fp)
81121d3c:	e0c00417 	ldw	r3,16(fp)
81121d40:	e0800517 	ldw	r2,20(fp)
81121d44:	e13ffd0d 	sth	r4,-12(fp)
81121d48:	e0fffe05 	stb	r3,-8(fp)
81121d4c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
81121d50:	e0bffd0b 	ldhu	r2,-12(fp)
81121d54:	e0fffe03 	ldbu	r3,-8(fp)
81121d58:	e13fff0b 	ldhu	r4,-4(fp)
81121d5c:	d8000615 	stw	zero,24(sp)
81121d60:	d9000515 	stw	r4,20(sp)
81121d64:	d8000415 	stw	zero,16(sp)
81121d68:	d8c00315 	stw	r3,12(sp)
81121d6c:	d8800215 	stw	r2,8(sp)
81121d70:	e0800217 	ldw	r2,8(fp)
81121d74:	d8800115 	stw	r2,4(sp)
81121d78:	e0bffc17 	ldw	r2,-16(fp)
81121d7c:	d8800015 	stw	r2,0(sp)
81121d80:	000f883a 	mov	r7,zero
81121d84:	e1bffb17 	ldw	r6,-20(fp)
81121d88:	e17ffa17 	ldw	r5,-24(fp)
81121d8c:	e13ff917 	ldw	r4,-28(fp)
81121d90:	11212f40 	call	811212f4 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
81121d94:	e037883a 	mov	sp,fp
81121d98:	dfc00117 	ldw	ra,4(sp)
81121d9c:	df000017 	ldw	fp,0(sp)
81121da0:	dec00204 	addi	sp,sp,8
81121da4:	f800283a 	ret

81121da8 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
81121da8:	deffee04 	addi	sp,sp,-72
81121dac:	dfc01115 	stw	ra,68(sp)
81121db0:	df001015 	stw	fp,64(sp)
81121db4:	df001004 	addi	fp,sp,64
81121db8:	e13ff715 	stw	r4,-36(fp)
81121dbc:	e17ff815 	stw	r5,-32(fp)
81121dc0:	e1bff915 	stw	r6,-28(fp)
81121dc4:	e1fffa15 	stw	r7,-24(fp)
81121dc8:	e1800417 	ldw	r6,16(fp)
81121dcc:	e1400517 	ldw	r5,20(fp)
81121dd0:	e1000617 	ldw	r4,24(fp)
81121dd4:	e0c00717 	ldw	r3,28(fp)
81121dd8:	e0800817 	ldw	r2,32(fp)
81121ddc:	e1bffb0d 	sth	r6,-20(fp)
81121de0:	e17ffc05 	stb	r5,-16(fp)
81121de4:	e13ffd05 	stb	r4,-12(fp)
81121de8:	e0fffe0d 	sth	r3,-8(fp)
81121dec:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81121df0:	e0bffb0b 	ldhu	r2,-20(fp)
81121df4:	e0fffc03 	ldbu	r3,-16(fp)
81121df8:	e13ffd03 	ldbu	r4,-12(fp)
81121dfc:	e17ffe0b 	ldhu	r5,-8(fp)
81121e00:	e1bfff0b 	ldhu	r6,-4(fp)
81121e04:	d9800615 	stw	r6,24(sp)
81121e08:	d9400515 	stw	r5,20(sp)
81121e0c:	d9000415 	stw	r4,16(sp)
81121e10:	d8c00315 	stw	r3,12(sp)
81121e14:	d8800215 	stw	r2,8(sp)
81121e18:	e0800317 	ldw	r2,12(fp)
81121e1c:	d8800115 	stw	r2,4(sp)
81121e20:	e0800217 	ldw	r2,8(fp)
81121e24:	d8800015 	stw	r2,0(sp)
81121e28:	e1fffa17 	ldw	r7,-24(fp)
81121e2c:	e1bff917 	ldw	r6,-28(fp)
81121e30:	e17ff817 	ldw	r5,-32(fp)
81121e34:	e13ff717 	ldw	r4,-36(fp)
81121e38:	11212f40 	call	811212f4 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
81121e3c:	e037883a 	mov	sp,fp
81121e40:	dfc00117 	ldw	ra,4(sp)
81121e44:	df000017 	ldw	fp,0(sp)
81121e48:	dec00204 	addi	sp,sp,8
81121e4c:	f800283a 	ret

81121e50 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81121e50:	defffb04 	addi	sp,sp,-20
81121e54:	df000415 	stw	fp,16(sp)
81121e58:	df000404 	addi	fp,sp,16
81121e5c:	e13ffc15 	stw	r4,-16(fp)
81121e60:	e17ffd15 	stw	r5,-12(fp)
81121e64:	e1bffe15 	stw	r6,-8(fp)
81121e68:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81121e6c:	e0bffc17 	ldw	r2,-16(fp)
81121e70:	10c01217 	ldw	r3,72(r2)
81121e74:	e0800117 	ldw	r2,4(fp)
81121e78:	18800436 	bltu	r3,r2,81121e8c <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
81121e7c:	e0bffc17 	ldw	r2,-16(fp)
81121e80:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81121e84:	10803fcc 	andi	r2,r2,255
81121e88:	10000226 	beq	r2,zero,81121e94 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81121e8c:	00bffa84 	movi	r2,-22
81121e90:	00001406 	br	81121ee4 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
81121e94:	e0bffd17 	ldw	r2,-12(fp)
81121e98:	e0fffe17 	ldw	r3,-8(fp)
81121e9c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81121ea0:	e0bffd17 	ldw	r2,-12(fp)
81121ea4:	e0ffff17 	ldw	r3,-4(fp)
81121ea8:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81121eac:	e0bffd17 	ldw	r2,-12(fp)
81121eb0:	e0c00117 	ldw	r3,4(fp)
81121eb4:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
81121eb8:	e0fffd17 	ldw	r3,-12(fp)
81121ebc:	e0bffd17 	ldw	r2,-12(fp)
81121ec0:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81121ec4:	e0c00217 	ldw	r3,8(fp)
81121ec8:	00900034 	movhi	r2,16384
81121ecc:	10bfffc4 	addi	r2,r2,-1
81121ed0:	1884703a 	and	r2,r3,r2
81121ed4:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
81121ed8:	e0bffd17 	ldw	r2,-12(fp)
81121edc:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
81121ee0:	0005883a 	mov	r2,zero
}
81121ee4:	e037883a 	mov	sp,fp
81121ee8:	df000017 	ldw	fp,0(sp)
81121eec:	dec00104 	addi	sp,sp,4
81121ef0:	f800283a 	ret

81121ef4 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81121ef4:	defff404 	addi	sp,sp,-48
81121ef8:	df000b15 	stw	fp,44(sp)
81121efc:	df000b04 	addi	fp,sp,44
81121f00:	e13ff715 	stw	r4,-36(fp)
81121f04:	e17ff815 	stw	r5,-32(fp)
81121f08:	e1bff915 	stw	r6,-28(fp)
81121f0c:	e1fffa15 	stw	r7,-24(fp)
81121f10:	e1800517 	ldw	r6,20(fp)
81121f14:	e1400617 	ldw	r5,24(fp)
81121f18:	e1000717 	ldw	r4,28(fp)
81121f1c:	e0c00817 	ldw	r3,32(fp)
81121f20:	e0800917 	ldw	r2,36(fp)
81121f24:	e1bffb0d 	sth	r6,-20(fp)
81121f28:	e17ffc05 	stb	r5,-16(fp)
81121f2c:	e13ffd05 	stb	r4,-12(fp)
81121f30:	e0fffe0d 	sth	r3,-8(fp)
81121f34:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81121f38:	e0bff717 	ldw	r2,-36(fp)
81121f3c:	10c01217 	ldw	r3,72(r2)
81121f40:	e0800317 	ldw	r2,12(fp)
81121f44:	18801936 	bltu	r3,r2,81121fac <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
81121f48:	e13ff717 	ldw	r4,-36(fp)
81121f4c:	20801317 	ldw	r2,76(r4)
81121f50:	20c01417 	ldw	r3,80(r4)
81121f54:	e13ffe0b 	ldhu	r4,-8(fp)
81121f58:	213fffcc 	andi	r4,r4,65535
81121f5c:	2015883a 	mov	r10,r4
81121f60:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81121f64:	1ac01136 	bltu	r3,r11,81121fac <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
81121f68:	58c0011e 	bne	r11,r3,81121f70 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
81121f6c:	12800f36 	bltu	r2,r10,81121fac <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81121f70:	e13ff717 	ldw	r4,-36(fp)
81121f74:	20801317 	ldw	r2,76(r4)
81121f78:	20c01417 	ldw	r3,80(r4)
81121f7c:	e13fff0b 	ldhu	r4,-4(fp)
81121f80:	213fffcc 	andi	r4,r4,65535
81121f84:	2011883a 	mov	r8,r4
81121f88:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81121f8c:	1a400736 	bltu	r3,r9,81121fac <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
81121f90:	48c0011e 	bne	r9,r3,81121f98 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
81121f94:	12000536 	bltu	r2,r8,81121fac <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81121f98:	e0bff717 	ldw	r2,-36(fp)
81121f9c:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81121fa0:	10803fcc 	andi	r2,r2,255
81121fa4:	10800060 	cmpeqi	r2,r2,1
81121fa8:	1000021e 	bne	r2,zero,81121fb4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81121fac:	00bffa84 	movi	r2,-22
81121fb0:	00003106 	br	81122078 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
81121fb4:	e0bff817 	ldw	r2,-32(fp)
81121fb8:	e0fff917 	ldw	r3,-28(fp)
81121fbc:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
81121fc0:	e0bff817 	ldw	r2,-32(fp)
81121fc4:	e0fffa17 	ldw	r3,-24(fp)
81121fc8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
81121fcc:	e0bff817 	ldw	r2,-32(fp)
81121fd0:	e0c00117 	ldw	r3,4(fp)
81121fd4:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
81121fd8:	e0bff817 	ldw	r2,-32(fp)
81121fdc:	e0c00217 	ldw	r3,8(fp)
81121fe0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81121fe4:	e0bff817 	ldw	r2,-32(fp)
81121fe8:	e0c00317 	ldw	r3,12(fp)
81121fec:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81121ff0:	e0bff817 	ldw	r2,-32(fp)
81121ff4:	e0fffb0b 	ldhu	r3,-20(fp)
81121ff8:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
81121ffc:	e0bff817 	ldw	r2,-32(fp)
81122000:	e0fffc03 	ldbu	r3,-16(fp)
81122004:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
81122008:	e0bff817 	ldw	r2,-32(fp)
8112200c:	e0fffd03 	ldbu	r3,-12(fp)
81122010:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
81122014:	e0bff817 	ldw	r2,-32(fp)
81122018:	e0fffe0b 	ldhu	r3,-8(fp)
8112201c:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
81122020:	e0bff817 	ldw	r2,-32(fp)
81122024:	e0ffff0b 	ldhu	r3,-4(fp)
81122028:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
8112202c:	e0bff817 	ldw	r2,-32(fp)
81122030:	1019883a 	mov	r12,r2
81122034:	001b883a 	mov	r13,zero
81122038:	e33ff515 	stw	r12,-44(fp)
8112203c:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
81122040:	e0fff517 	ldw	r3,-44(fp)
81122044:	e0bff817 	ldw	r2,-32(fp)
81122048:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8112204c:	e0fff617 	ldw	r3,-40(fp)
81122050:	e0bff817 	ldw	r2,-32(fp)
81122054:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81122058:	e0c00417 	ldw	r3,16(fp)
8112205c:	00900034 	movhi	r2,16384
81122060:	10bfffc4 	addi	r2,r2,-1
81122064:	1884703a 	and	r2,r3,r2
81122068:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8112206c:	e0bff817 	ldw	r2,-32(fp)
81122070:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
81122074:	0005883a 	mov	r2,zero
}
81122078:	e037883a 	mov	sp,fp
8112207c:	df000017 	ldw	fp,0(sp)
81122080:	dec00104 	addi	sp,sp,4
81122084:	f800283a 	ret

81122088 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
81122088:	defff804 	addi	sp,sp,-32
8112208c:	dfc00715 	stw	ra,28(sp)
81122090:	df000615 	stw	fp,24(sp)
81122094:	df000604 	addi	fp,sp,24
81122098:	e13ffc15 	stw	r4,-16(fp)
8112209c:	e17ffd15 	stw	r5,-12(fp)
811220a0:	e1bffe15 	stw	r6,-8(fp)
811220a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
811220a8:	e0800317 	ldw	r2,12(fp)
811220ac:	d8800115 	stw	r2,4(sp)
811220b0:	e0800217 	ldw	r2,8(fp)
811220b4:	d8800015 	stw	r2,0(sp)
811220b8:	e1ffff17 	ldw	r7,-4(fp)
811220bc:	e1bffe17 	ldw	r6,-8(fp)
811220c0:	e17ffd17 	ldw	r5,-12(fp)
811220c4:	e13ffc17 	ldw	r4,-16(fp)
811220c8:	1121e500 	call	81121e50 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
811220cc:	e037883a 	mov	sp,fp
811220d0:	dfc00117 	ldw	ra,4(sp)
811220d4:	df000017 	ldw	fp,0(sp)
811220d8:	dec00204 	addi	sp,sp,8
811220dc:	f800283a 	ret

811220e0 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
811220e0:	defff804 	addi	sp,sp,-32
811220e4:	dfc00715 	stw	ra,28(sp)
811220e8:	df000615 	stw	fp,24(sp)
811220ec:	df000604 	addi	fp,sp,24
811220f0:	e13ffc15 	stw	r4,-16(fp)
811220f4:	e17ffd15 	stw	r5,-12(fp)
811220f8:	e1bffe15 	stw	r6,-8(fp)
811220fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81122100:	e0800217 	ldw	r2,8(fp)
81122104:	d8800115 	stw	r2,4(sp)
81122108:	e0bfff17 	ldw	r2,-4(fp)
8112210c:	d8800015 	stw	r2,0(sp)
81122110:	e1fffe17 	ldw	r7,-8(fp)
81122114:	000d883a 	mov	r6,zero
81122118:	e17ffd17 	ldw	r5,-12(fp)
8112211c:	e13ffc17 	ldw	r4,-16(fp)
81122120:	1121e500 	call	81121e50 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
81122124:	e037883a 	mov	sp,fp
81122128:	dfc00117 	ldw	ra,4(sp)
8112212c:	df000017 	ldw	fp,0(sp)
81122130:	dec00204 	addi	sp,sp,8
81122134:	f800283a 	ret

81122138 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
81122138:	defff804 	addi	sp,sp,-32
8112213c:	dfc00715 	stw	ra,28(sp)
81122140:	df000615 	stw	fp,24(sp)
81122144:	df000604 	addi	fp,sp,24
81122148:	e13ffc15 	stw	r4,-16(fp)
8112214c:	e17ffd15 	stw	r5,-12(fp)
81122150:	e1bffe15 	stw	r6,-8(fp)
81122154:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81122158:	e0800217 	ldw	r2,8(fp)
8112215c:	d8800115 	stw	r2,4(sp)
81122160:	e0bfff17 	ldw	r2,-4(fp)
81122164:	d8800015 	stw	r2,0(sp)
81122168:	000f883a 	mov	r7,zero
8112216c:	e1bffe17 	ldw	r6,-8(fp)
81122170:	e17ffd17 	ldw	r5,-12(fp)
81122174:	e13ffc17 	ldw	r4,-16(fp)
81122178:	1121e500 	call	81121e50 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
8112217c:	e037883a 	mov	sp,fp
81122180:	dfc00117 	ldw	ra,4(sp)
81122184:	df000017 	ldw	fp,0(sp)
81122188:	dec00204 	addi	sp,sp,8
8112218c:	f800283a 	ret

81122190 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
81122190:	deffee04 	addi	sp,sp,-72
81122194:	dfc01115 	stw	ra,68(sp)
81122198:	df001015 	stw	fp,64(sp)
8112219c:	df001004 	addi	fp,sp,64
811221a0:	e13ff915 	stw	r4,-28(fp)
811221a4:	e17ffa15 	stw	r5,-24(fp)
811221a8:	e1bffb15 	stw	r6,-20(fp)
811221ac:	e1fffc15 	stw	r7,-16(fp)
811221b0:	e1000417 	ldw	r4,16(fp)
811221b4:	e0c00517 	ldw	r3,20(fp)
811221b8:	e0800617 	ldw	r2,24(fp)
811221bc:	e13ffd0d 	sth	r4,-12(fp)
811221c0:	e0fffe05 	stb	r3,-8(fp)
811221c4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
811221c8:	e0bffd0b 	ldhu	r2,-12(fp)
811221cc:	e0fffe03 	ldbu	r3,-8(fp)
811221d0:	e13fff0b 	ldhu	r4,-4(fp)
811221d4:	d9000815 	stw	r4,32(sp)
811221d8:	d8000715 	stw	zero,28(sp)
811221dc:	d8c00615 	stw	r3,24(sp)
811221e0:	d8000515 	stw	zero,20(sp)
811221e4:	d8800415 	stw	r2,16(sp)
811221e8:	e0800317 	ldw	r2,12(fp)
811221ec:	d8800315 	stw	r2,12(sp)
811221f0:	e0800217 	ldw	r2,8(fp)
811221f4:	d8800215 	stw	r2,8(sp)
811221f8:	e0bffc17 	ldw	r2,-16(fp)
811221fc:	d8800115 	stw	r2,4(sp)
81122200:	e0bffb17 	ldw	r2,-20(fp)
81122204:	d8800015 	stw	r2,0(sp)
81122208:	000f883a 	mov	r7,zero
8112220c:	000d883a 	mov	r6,zero
81122210:	e17ffa17 	ldw	r5,-24(fp)
81122214:	e13ff917 	ldw	r4,-28(fp)
81122218:	1121ef40 	call	81121ef4 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
8112221c:	e037883a 	mov	sp,fp
81122220:	dfc00117 	ldw	ra,4(sp)
81122224:	df000017 	ldw	fp,0(sp)
81122228:	dec00204 	addi	sp,sp,8
8112222c:	f800283a 	ret

81122230 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81122230:	deffee04 	addi	sp,sp,-72
81122234:	dfc01115 	stw	ra,68(sp)
81122238:	df001015 	stw	fp,64(sp)
8112223c:	df001004 	addi	fp,sp,64
81122240:	e13ff915 	stw	r4,-28(fp)
81122244:	e17ffa15 	stw	r5,-24(fp)
81122248:	e1bffb15 	stw	r6,-20(fp)
8112224c:	e1fffc15 	stw	r7,-16(fp)
81122250:	e1000417 	ldw	r4,16(fp)
81122254:	e0c00517 	ldw	r3,20(fp)
81122258:	e0800617 	ldw	r2,24(fp)
8112225c:	e13ffd0d 	sth	r4,-12(fp)
81122260:	e0fffe05 	stb	r3,-8(fp)
81122264:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81122268:	e0bffd0b 	ldhu	r2,-12(fp)
8112226c:	e0fffe03 	ldbu	r3,-8(fp)
81122270:	e13fff0b 	ldhu	r4,-4(fp)
81122274:	d8000815 	stw	zero,32(sp)
81122278:	d9000715 	stw	r4,28(sp)
8112227c:	d8000615 	stw	zero,24(sp)
81122280:	d8c00515 	stw	r3,20(sp)
81122284:	d8800415 	stw	r2,16(sp)
81122288:	e0800317 	ldw	r2,12(fp)
8112228c:	d8800315 	stw	r2,12(sp)
81122290:	e0800217 	ldw	r2,8(fp)
81122294:	d8800215 	stw	r2,8(sp)
81122298:	d8000115 	stw	zero,4(sp)
8112229c:	d8000015 	stw	zero,0(sp)
811222a0:	e1fffc17 	ldw	r7,-16(fp)
811222a4:	e1bffb17 	ldw	r6,-20(fp)
811222a8:	e17ffa17 	ldw	r5,-24(fp)
811222ac:	e13ff917 	ldw	r4,-28(fp)
811222b0:	1121ef40 	call	81121ef4 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
811222b4:	e037883a 	mov	sp,fp
811222b8:	dfc00117 	ldw	ra,4(sp)
811222bc:	df000017 	ldw	fp,0(sp)
811222c0:	dec00204 	addi	sp,sp,8
811222c4:	f800283a 	ret

811222c8 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
811222c8:	deffec04 	addi	sp,sp,-80
811222cc:	dfc01315 	stw	ra,76(sp)
811222d0:	df001215 	stw	fp,72(sp)
811222d4:	df001204 	addi	fp,sp,72
811222d8:	e13ff715 	stw	r4,-36(fp)
811222dc:	e17ff815 	stw	r5,-32(fp)
811222e0:	e1bff915 	stw	r6,-28(fp)
811222e4:	e1fffa15 	stw	r7,-24(fp)
811222e8:	e1800617 	ldw	r6,24(fp)
811222ec:	e1400717 	ldw	r5,28(fp)
811222f0:	e1000817 	ldw	r4,32(fp)
811222f4:	e0c00917 	ldw	r3,36(fp)
811222f8:	e0800a17 	ldw	r2,40(fp)
811222fc:	e1bffb0d 	sth	r6,-20(fp)
81122300:	e17ffc05 	stb	r5,-16(fp)
81122304:	e13ffd05 	stb	r4,-12(fp)
81122308:	e0fffe0d 	sth	r3,-8(fp)
8112230c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81122310:	e0bffb0b 	ldhu	r2,-20(fp)
81122314:	e0fffc03 	ldbu	r3,-16(fp)
81122318:	e13ffd03 	ldbu	r4,-12(fp)
8112231c:	e17ffe0b 	ldhu	r5,-8(fp)
81122320:	e1bfff0b 	ldhu	r6,-4(fp)
81122324:	d9800815 	stw	r6,32(sp)
81122328:	d9400715 	stw	r5,28(sp)
8112232c:	d9000615 	stw	r4,24(sp)
81122330:	d8c00515 	stw	r3,20(sp)
81122334:	d8800415 	stw	r2,16(sp)
81122338:	e0800517 	ldw	r2,20(fp)
8112233c:	d8800315 	stw	r2,12(sp)
81122340:	e0800417 	ldw	r2,16(fp)
81122344:	d8800215 	stw	r2,8(sp)
81122348:	e0800317 	ldw	r2,12(fp)
8112234c:	d8800115 	stw	r2,4(sp)
81122350:	e0800217 	ldw	r2,8(fp)
81122354:	d8800015 	stw	r2,0(sp)
81122358:	e1fffa17 	ldw	r7,-24(fp)
8112235c:	e1bff917 	ldw	r6,-28(fp)
81122360:	e17ff817 	ldw	r5,-32(fp)
81122364:	e13ff717 	ldw	r4,-36(fp)
81122368:	1121ef40 	call	81121ef4 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8112236c:	e037883a 	mov	sp,fp
81122370:	dfc00117 	ldw	ra,4(sp)
81122374:	df000017 	ldw	fp,0(sp)
81122378:	dec00204 	addi	sp,sp,8
8112237c:	f800283a 	ret

81122380 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
81122380:	defffc04 	addi	sp,sp,-16
81122384:	df000315 	stw	fp,12(sp)
81122388:	df000304 	addi	fp,sp,12
8112238c:	e13ffe15 	stw	r4,-8(fp)
81122390:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
81122394:	e0bfff17 	ldw	r2,-4(fp)
81122398:	1000021e 	bne	r2,zero,811223a4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8112239c:	00bffa84 	movi	r2,-22
811223a0:	00002f06 	br	81122460 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
811223a4:	e0bfff17 	ldw	r2,-4(fp)
811223a8:	10c00317 	ldw	r3,12(r2)
811223ac:	e0bfff17 	ldw	r2,-4(fp)
811223b0:	18800226 	beq	r3,r2,811223bc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811223b4:	00bffa84 	movi	r2,-22
811223b8:	00002906 	br	81122460 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
811223bc:	e0bffe17 	ldw	r2,-8(fp)
811223c0:	10800017 	ldw	r2,0(r2)
811223c4:	1000051e 	bne	r2,zero,811223dc <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
811223c8:	e0bffe17 	ldw	r2,-8(fp)
811223cc:	e0ffff17 	ldw	r3,-4(fp)
811223d0:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
811223d4:	0005883a 	mov	r2,zero
811223d8:	00002106 	br	81122460 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
811223dc:	e0bffe17 	ldw	r2,-8(fp)
811223e0:	10c00017 	ldw	r3,0(r2)
811223e4:	e0bfff17 	ldw	r2,-4(fp)
811223e8:	1880021e 	bne	r3,r2,811223f4 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
811223ec:	00bffa84 	movi	r2,-22
811223f0:	00001b06 	br	81122460 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
811223f4:	e0bffe17 	ldw	r2,-8(fp)
811223f8:	10800017 	ldw	r2,0(r2)
811223fc:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81122400:	00000906 	br	81122428 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
81122404:	e0bffd17 	ldw	r2,-12(fp)
81122408:	10c00317 	ldw	r3,12(r2)
8112240c:	e0bfff17 	ldw	r2,-4(fp)
81122410:	1880021e 	bne	r3,r2,8112241c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81122414:	00bffa84 	movi	r2,-22
81122418:	00001106 	br	81122460 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8112241c:	e0bffd17 	ldw	r2,-12(fp)
81122420:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
81122424:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81122428:	e0bffd17 	ldw	r2,-12(fp)
8112242c:	10800317 	ldw	r2,12(r2)
81122430:	e0fffe17 	ldw	r3,-8(fp)
81122434:	18c00017 	ldw	r3,0(r3)
81122438:	10fff21e 	bne	r2,r3,81122404 <__reset+0xfb102404>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8112243c:	e0ffff17 	ldw	r3,-4(fp)
81122440:	e0bffd17 	ldw	r2,-12(fp)
81122444:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
81122448:	e0bffe17 	ldw	r2,-8(fp)
8112244c:	10800017 	ldw	r2,0(r2)
81122450:	1007883a 	mov	r3,r2
81122454:	e0bfff17 	ldw	r2,-4(fp)
81122458:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
8112245c:	0005883a 	mov	r2,zero
}
81122460:	e037883a 	mov	sp,fp
81122464:	df000017 	ldw	fp,0(sp)
81122468:	dec00104 	addi	sp,sp,4
8112246c:	f800283a 	ret

81122470 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
81122470:	defff804 	addi	sp,sp,-32
81122474:	df000715 	stw	fp,28(sp)
81122478:	df000704 	addi	fp,sp,28
8112247c:	e13ffe15 	stw	r4,-8(fp)
81122480:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
81122484:	e13fff17 	ldw	r4,-4(fp)
81122488:	2000021e 	bne	r4,zero,81122494 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8112248c:	00bffa84 	movi	r2,-22
81122490:	00005906 	br	811225f8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
81122494:	e13fff17 	ldw	r4,-4(fp)
81122498:	2015883a 	mov	r10,r4
8112249c:	0017883a 	mov	r11,zero
811224a0:	e2bffc15 	stw	r10,-16(fp)
811224a4:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811224a8:	e13fff17 	ldw	r4,-4(fp)
811224ac:	21400317 	ldw	r5,12(r4)
811224b0:	e13ffc17 	ldw	r4,-16(fp)
811224b4:	29000626 	beq	r5,r4,811224d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
811224b8:	e13fff17 	ldw	r4,-4(fp)
811224bc:	21400b17 	ldw	r5,44(r4)
811224c0:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811224c4:	29000226 	beq	r5,r4,811224d0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811224c8:	00bffa84 	movi	r2,-22
811224cc:	00004a06 	br	811225f8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
811224d0:	e13ffe17 	ldw	r4,-8(fp)
811224d4:	21000017 	ldw	r4,0(r4)
811224d8:	2000051e 	bne	r4,zero,811224f0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
811224dc:	e0bffe17 	ldw	r2,-8(fp)
811224e0:	e0ffff17 	ldw	r3,-4(fp)
811224e4:	10c00015 	stw	r3,0(r2)
		return 0;
811224e8:	0005883a 	mov	r2,zero
811224ec:	00004206 	br	811225f8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
811224f0:	e13ffe17 	ldw	r4,-8(fp)
811224f4:	21400017 	ldw	r5,0(r4)
811224f8:	e13fff17 	ldw	r4,-4(fp)
811224fc:	2900021e 	bne	r5,r4,81122508 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81122500:	00bffa84 	movi	r2,-22
81122504:	00003c06 	br	811225f8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81122508:	e13ffe17 	ldw	r4,-8(fp)
8112250c:	21000017 	ldw	r4,0(r4)
81122510:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
81122514:	e13ffe17 	ldw	r4,-8(fp)
81122518:	21000017 	ldw	r4,0(r4)
8112251c:	2011883a 	mov	r8,r4
81122520:	0013883a 	mov	r9,zero
81122524:	e23ffa15 	stw	r8,-24(fp)
81122528:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8112252c:	00001806 	br	81122590 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
81122530:	e13fff17 	ldw	r4,-4(fp)
81122534:	200d883a 	mov	r6,r4
81122538:	000f883a 	mov	r7,zero
8112253c:	e1bffc15 	stw	r6,-16(fp)
81122540:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
81122544:	e13ff917 	ldw	r4,-28(fp)
81122548:	21400317 	ldw	r5,12(r4)
8112254c:	e13ffc17 	ldw	r4,-16(fp)
81122550:	2900061e 	bne	r5,r4,8112256c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
81122554:	e13ff917 	ldw	r4,-28(fp)
81122558:	21400b17 	ldw	r5,44(r4)
8112255c:	e13ffd17 	ldw	r4,-12(fp)
81122560:	2900021e 	bne	r5,r4,8112256c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81122564:	00bffa84 	movi	r2,-22
81122568:	00002306 	br	811225f8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8112256c:	e13ff917 	ldw	r4,-28(fp)
81122570:	21000317 	ldw	r4,12(r4)
81122574:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81122578:	e13ff917 	ldw	r4,-28(fp)
8112257c:	21000b17 	ldw	r4,44(r4)
81122580:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81122584:	e13ffc17 	ldw	r4,-16(fp)
81122588:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8112258c:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81122590:	e13ff917 	ldw	r4,-28(fp)
81122594:	21400317 	ldw	r5,12(r4)
81122598:	e13ffa17 	ldw	r4,-24(fp)
8112259c:	29000426 	beq	r5,r4,811225b0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
811225a0:	e13ff917 	ldw	r4,-28(fp)
811225a4:	21400b17 	ldw	r5,44(r4)
811225a8:	e13ffb17 	ldw	r4,-20(fp)
811225ac:	293fe01e 	bne	r5,r4,81122530 <__reset+0xfb102530>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
811225b0:	e13fff17 	ldw	r4,-4(fp)
811225b4:	2005883a 	mov	r2,r4
811225b8:	0007883a 	mov	r3,zero
811225bc:	e0bffc15 	stw	r2,-16(fp)
811225c0:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
811225c4:	e0fffc17 	ldw	r3,-16(fp)
811225c8:	e0bff917 	ldw	r2,-28(fp)
811225cc:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
811225d0:	e0fffd17 	ldw	r3,-12(fp)
811225d4:	e0bff917 	ldw	r2,-28(fp)
811225d8:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
811225dc:	e0fffa17 	ldw	r3,-24(fp)
811225e0:	e0bfff17 	ldw	r2,-4(fp)
811225e4:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
811225e8:	e0fffb17 	ldw	r3,-20(fp)
811225ec:	e0bfff17 	ldw	r2,-4(fp)
811225f0:	10c00b15 	stw	r3,44(r2)
	return 0;
811225f4:	0005883a 	mov	r2,zero
}
811225f8:	e037883a 	mov	sp,fp
811225fc:	df000017 	ldw	fp,0(sp)
81122600:	dec00104 	addi	sp,sp,4
81122604:	f800283a 	ret

81122608 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
81122608:	defffc04 	addi	sp,sp,-16
8112260c:	df000315 	stw	fp,12(sp)
81122610:	df000304 	addi	fp,sp,12
81122614:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81122618:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
8112261c:	e0bfff17 	ldw	r2,-4(fp)
81122620:	1000021e 	bne	r2,zero,8112262c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
81122624:	00bffa84 	movi	r2,-22
81122628:	00001906 	br	81122690 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8112262c:	e0bfff17 	ldw	r2,-4(fp)
81122630:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81122634:	00000a06 	br	81122660 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
81122638:	e0bffd17 	ldw	r2,-12(fp)
8112263c:	10800717 	ldw	r2,28(r2)
81122640:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81122644:	e0bffe17 	ldw	r2,-8(fp)
81122648:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8112264c:	e0bffd17 	ldw	r2,-12(fp)
81122650:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81122654:	e0bffd17 	ldw	r2,-12(fp)
81122658:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8112265c:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81122660:	e0bffd17 	ldw	r2,-12(fp)
81122664:	10c00317 	ldw	r3,12(r2)
81122668:	e0bfff17 	ldw	r2,-4(fp)
8112266c:	18bff21e 	bne	r3,r2,81122638 <__reset+0xfb102638>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
81122670:	e0bffd17 	ldw	r2,-12(fp)
81122674:	10800717 	ldw	r2,28(r2)
81122678:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8112267c:	e0bffe17 	ldw	r2,-8(fp)
81122680:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81122684:	e0bffd17 	ldw	r2,-12(fp)
81122688:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
8112268c:	0005883a 	mov	r2,zero
}
81122690:	e037883a 	mov	sp,fp
81122694:	df000017 	ldw	fp,0(sp)
81122698:	dec00104 	addi	sp,sp,4
8112269c:	f800283a 	ret

811226a0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
811226a0:	defff804 	addi	sp,sp,-32
811226a4:	df000715 	stw	fp,28(sp)
811226a8:	df000704 	addi	fp,sp,28
811226ac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
811226b0:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
811226b4:	e13fff17 	ldw	r4,-4(fp)
811226b8:	2000021e 	bne	r4,zero,811226c4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
811226bc:	00bffa84 	movi	r2,-22
811226c0:	00002806 	br	81122764 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
811226c4:	e13fff17 	ldw	r4,-4(fp)
811226c8:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
811226cc:	e13fff17 	ldw	r4,-4(fp)
811226d0:	2005883a 	mov	r2,r4
811226d4:	0007883a 	mov	r3,zero
811226d8:	e0bffb15 	stw	r2,-20(fp)
811226dc:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811226e0:	00001006 	br	81122724 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
811226e4:	e0bff917 	ldw	r2,-28(fp)
811226e8:	10800f17 	ldw	r2,60(r2)
811226ec:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
811226f0:	e0bffa17 	ldw	r2,-24(fp)
811226f4:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
811226f8:	e0bff917 	ldw	r2,-28(fp)
811226fc:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81122700:	e0bff917 	ldw	r2,-28(fp)
81122704:	10800317 	ldw	r2,12(r2)
81122708:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8112270c:	e0bff917 	ldw	r2,-28(fp)
81122710:	10800b17 	ldw	r2,44(r2)
81122714:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81122718:	e0bffd17 	ldw	r2,-12(fp)
8112271c:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81122720:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81122724:	e0bff917 	ldw	r2,-28(fp)
81122728:	10c00317 	ldw	r3,12(r2)
8112272c:	e0bffb17 	ldw	r2,-20(fp)
81122730:	18800426 	beq	r3,r2,81122744 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81122734:	e0bff917 	ldw	r2,-28(fp)
81122738:	10c00b17 	ldw	r3,44(r2)
8112273c:	e0bffc17 	ldw	r2,-16(fp)
81122740:	18bfe81e 	bne	r3,r2,811226e4 <__reset+0xfb1026e4>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
81122744:	e0bff917 	ldw	r2,-28(fp)
81122748:	10800f17 	ldw	r2,60(r2)
8112274c:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81122750:	e0bffa17 	ldw	r2,-24(fp)
81122754:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81122758:	e0bff917 	ldw	r2,-28(fp)
8112275c:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
81122760:	0005883a 	mov	r2,zero
}
81122764:	e037883a 	mov	sp,fp
81122768:	df000017 	ldw	fp,0(sp)
8112276c:	dec00104 	addi	sp,sp,4
81122770:	f800283a 	ret

81122774 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81122774:	deffeb04 	addi	sp,sp,-84
81122778:	dfc01415 	stw	ra,80(sp)
8112277c:	df001315 	stw	fp,76(sp)
81122780:	df001304 	addi	fp,sp,76
81122784:	e13ffb15 	stw	r4,-20(fp)
81122788:	e17ffc15 	stw	r5,-16(fp)
8112278c:	e1bffd15 	stw	r6,-12(fp)
81122790:	3807883a 	mov	r3,r7
81122794:	e0800217 	ldw	r2,8(fp)
81122798:	e0fffe05 	stb	r3,-8(fp)
8112279c:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
811227a0:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
811227a4:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
811227a8:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
811227ac:	e0bffc17 	ldw	r2,-16(fp)
811227b0:	e0bff815 	stw	r2,-32(fp)
811227b4:	e0bffd17 	ldw	r2,-12(fp)
811227b8:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
811227bc:	e0bffb17 	ldw	r2,-20(fp)
811227c0:	10801817 	ldw	r2,96(r2)
811227c4:	e0bff615 	stw	r2,-40(fp)
811227c8:	e03ff70d 	sth	zero,-36(fp)
811227cc:	e0bff70b 	ldhu	r2,-36(fp)
811227d0:	e0fffa04 	addi	r3,fp,-24
811227d4:	180d883a 	mov	r6,r3
811227d8:	100b883a 	mov	r5,r2
811227dc:	e13ff617 	ldw	r4,-40(fp)
811227e0:	111c3980 	call	8111c398 <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
811227e4:	e0bffb17 	ldw	r2,-20(fp)
811227e8:	10800617 	ldw	r2,24(r2)
811227ec:	10800037 	ldwio	r2,0(r2)
811227f0:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
811227f4:	e0bfed17 	ldw	r2,-76(fp)
811227f8:	1080004c 	andi	r2,r2,1
811227fc:	10000626 	beq	r2,zero,81122818 <alt_msgdma_start_prefetcher_with_list_addr+0xa4>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
81122800:	e0bffb17 	ldw	r2,-20(fp)
81122804:	10801817 	ldw	r2,96(r2)
81122808:	1009883a 	mov	r4,r2
8112280c:	111c7100 	call	8111c710 <OSSemPost>
		return -EBUSY;
81122810:	00bffc04 	movi	r2,-16
81122814:	00009606 	br	81122a70 <alt_msgdma_start_prefetcher_with_list_addr+0x2fc>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81122818:	00800804 	movi	r2,32
8112281c:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122820:	0005303a 	rdctl	r2,status
81122824:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122828:	e0fff217 	ldw	r3,-56(fp)
8112282c:	00bfff84 	movi	r2,-2
81122830:	1884703a 	and	r2,r3,r2
81122834:	1001703a 	wrctl	status,r2
  
  return context;
81122838:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8112283c:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81122840:	e0bffb17 	ldw	r2,-20(fp)
81122844:	10800317 	ldw	r2,12(r2)
81122848:	10800104 	addi	r2,r2,4
8112284c:	e0ffee17 	ldw	r3,-72(fp)
81122850:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
81122854:	e0bffb17 	ldw	r2,-20(fp)
81122858:	10800317 	ldw	r2,12(r2)
8112285c:	e0fffb17 	ldw	r3,-20(fp)
81122860:	18c00317 	ldw	r3,12(r3)
81122864:	18c00037 	ldwio	r3,0(r3)
81122868:	10c00035 	stwio	r3,0(r2)
8112286c:	e0bfef17 	ldw	r2,-68(fp)
81122870:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122874:	e0bff017 	ldw	r2,-64(fp)
81122878:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8112287c:	e0bffb17 	ldw	r2,-20(fp)
81122880:	10800b17 	ldw	r2,44(r2)
81122884:	10002326 	beq	r2,zero,81122914 <alt_msgdma_start_prefetcher_with_list_addr+0x1a0>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
81122888:	e0bffb17 	ldw	r2,-20(fp)
8112288c:	10c00d17 	ldw	r3,52(r2)
81122890:	e0bfee17 	ldw	r2,-72(fp)
81122894:	1884b03a 	or	r2,r3,r2
81122898:	10800514 	ori	r2,r2,20
8112289c:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
811228a0:	e0ffee17 	ldw	r3,-72(fp)
811228a4:	00bff7c4 	movi	r2,-33
811228a8:	1884703a 	and	r2,r3,r2
811228ac:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
811228b0:	e0bfed17 	ldw	r2,-76(fp)
811228b4:	10800214 	ori	r2,r2,8
811228b8:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811228bc:	0005303a 	rdctl	r2,status
811228c0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811228c4:	e0fff417 	ldw	r3,-48(fp)
811228c8:	00bfff84 	movi	r2,-2
811228cc:	1884703a 	and	r2,r3,r2
811228d0:	1001703a 	wrctl	status,r2
  
  return context;
811228d4:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
811228d8:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
811228dc:	e0bffb17 	ldw	r2,-20(fp)
811228e0:	10800317 	ldw	r2,12(r2)
811228e4:	10800104 	addi	r2,r2,4
811228e8:	e0ffee17 	ldw	r3,-72(fp)
811228ec:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
811228f0:	e0bffb17 	ldw	r2,-20(fp)
811228f4:	10800617 	ldw	r2,24(r2)
811228f8:	e0ffed17 	ldw	r3,-76(fp)
811228fc:	10c00035 	stwio	r3,0(r2)
81122900:	e0bfef17 	ldw	r2,-68(fp)
81122904:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122908:	e0bff117 	ldw	r2,-60(fp)
8112290c:	1001703a 	wrctl	status,r2
81122910:	00002306 	br	811229a0 <alt_msgdma_start_prefetcher_with_list_addr+0x22c>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
81122914:	e0bffb17 	ldw	r2,-20(fp)
81122918:	10c00d17 	ldw	r3,52(r2)
8112291c:	e0bfee17 	ldw	r2,-72(fp)
81122920:	1884b03a 	or	r2,r3,r2
81122924:	10800114 	ori	r2,r2,4
81122928:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8112292c:	e0ffee17 	ldw	r3,-72(fp)
81122930:	00bff3c4 	movi	r2,-49
81122934:	1884703a 	and	r2,r3,r2
81122938:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8112293c:	e0ffed17 	ldw	r3,-76(fp)
81122940:	00bffdc4 	movi	r2,-9
81122944:	1884703a 	and	r2,r3,r2
81122948:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112294c:	0005303a 	rdctl	r2,status
81122950:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122954:	e0fff517 	ldw	r3,-44(fp)
81122958:	00bfff84 	movi	r2,-2
8112295c:	1884703a 	and	r2,r3,r2
81122960:	1001703a 	wrctl	status,r2
  
  return context;
81122964:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
81122968:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8112296c:	e0bffb17 	ldw	r2,-20(fp)
81122970:	10800317 	ldw	r2,12(r2)
81122974:	10800104 	addi	r2,r2,4
81122978:	e0ffee17 	ldw	r3,-72(fp)
8112297c:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81122980:	e0bffb17 	ldw	r2,-20(fp)
81122984:	10800617 	ldw	r2,24(r2)
81122988:	e0ffed17 	ldw	r3,-76(fp)
8112298c:	10c00035 	stwio	r3,0(r2)
81122990:	e0bfef17 	ldw	r2,-68(fp)
81122994:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122998:	e0bff317 	ldw	r2,-52(fp)
8112299c:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
811229a0:	e0bffb17 	ldw	r2,-20(fp)
811229a4:	10800617 	ldw	r2,24(r2)
811229a8:	10800104 	addi	r2,r2,4
811229ac:	e0fff817 	ldw	r3,-32(fp)
811229b0:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
811229b4:	e0bffb17 	ldw	r2,-20(fp)
811229b8:	10800617 	ldw	r2,24(r2)
811229bc:	10800204 	addi	r2,r2,8
811229c0:	e0fff917 	ldw	r3,-28(fp)
811229c4:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
811229c8:	e0bffe03 	ldbu	r2,-8(fp)
811229cc:	10000426 	beq	r2,zero,811229e0 <alt_msgdma_start_prefetcher_with_list_addr+0x26c>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
811229d0:	e0bfed17 	ldw	r2,-76(fp)
811229d4:	10800414 	ori	r2,r2,16
811229d8:	e0bfed15 	stw	r2,-76(fp)
811229dc:	00000406 	br	811229f0 <alt_msgdma_start_prefetcher_with_list_addr+0x27c>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
811229e0:	e0ffed17 	ldw	r3,-76(fp)
811229e4:	00bffbc4 	movi	r2,-17
811229e8:	1884703a 	and	r2,r3,r2
811229ec:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
811229f0:	e0bfff03 	ldbu	r2,-4(fp)
811229f4:	10000e26 	beq	r2,zero,81122a30 <alt_msgdma_start_prefetcher_with_list_addr+0x2bc>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
811229f8:	e0bfed17 	ldw	r2,-76(fp)
811229fc:	10800094 	ori	r2,r2,2
81122a00:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81122a04:	e0bffb17 	ldw	r2,-20(fp)
81122a08:	10800617 	ldw	r2,24(r2)
81122a0c:	10800304 	addi	r2,r2,12
81122a10:	10800037 	ldwio	r2,0(r2)
81122a14:	10000a1e 	bne	r2,zero,81122a40 <alt_msgdma_start_prefetcher_with_list_addr+0x2cc>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81122a18:	e0bffb17 	ldw	r2,-20(fp)
81122a1c:	10800617 	ldw	r2,24(r2)
81122a20:	10800304 	addi	r2,r2,12
81122a24:	00c03fc4 	movi	r3,255
81122a28:	10c00035 	stwio	r3,0(r2)
81122a2c:	00000406 	br	81122a40 <alt_msgdma_start_prefetcher_with_list_addr+0x2cc>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
81122a30:	e0ffed17 	ldw	r3,-76(fp)
81122a34:	00bfff44 	movi	r2,-3
81122a38:	1884703a 	and	r2,r3,r2
81122a3c:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
81122a40:	e0bfed17 	ldw	r2,-76(fp)
81122a44:	10800054 	ori	r2,r2,1
81122a48:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81122a4c:	e0bffb17 	ldw	r2,-20(fp)
81122a50:	10800617 	ldw	r2,24(r2)
81122a54:	e0ffed17 	ldw	r3,-76(fp)
81122a58:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
81122a5c:	e0bffb17 	ldw	r2,-20(fp)
81122a60:	10801817 	ldw	r2,96(r2)
81122a64:	1009883a 	mov	r4,r2
81122a68:	111c7100 	call	8111c710 <OSSemPost>
	 
	 return 0;
81122a6c:	0005883a 	mov	r2,zero
}
81122a70:	e037883a 	mov	sp,fp
81122a74:	dfc00117 	ldw	ra,4(sp)
81122a78:	df000017 	ldw	fp,0(sp)
81122a7c:	dec00204 	addi	sp,sp,8
81122a80:	f800283a 	ret

81122a84 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
81122a84:	defff704 	addi	sp,sp,-36
81122a88:	dfc00815 	stw	ra,32(sp)
81122a8c:	df000715 	stw	fp,28(sp)
81122a90:	dc400615 	stw	r17,24(sp)
81122a94:	dc000515 	stw	r16,20(sp)
81122a98:	df000704 	addi	fp,sp,28
81122a9c:	e13ffa15 	stw	r4,-24(fp)
81122aa0:	e17ffb15 	stw	r5,-20(fp)
81122aa4:	3007883a 	mov	r3,r6
81122aa8:	3805883a 	mov	r2,r7
81122aac:	e0fffc05 	stb	r3,-16(fp)
81122ab0:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
81122ab4:	e13ffb17 	ldw	r4,-20(fp)
81122ab8:	11226080 	call	81122608 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
81122abc:	10000226 	beq	r2,zero,81122ac8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
81122ac0:	00bffa84 	movi	r2,-22
81122ac4:	00000b06 	br	81122af4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
81122ac8:	e0bffb17 	ldw	r2,-20(fp)
81122acc:	1021883a 	mov	r16,r2
81122ad0:	0023883a 	mov	r17,zero
81122ad4:	e0fffc03 	ldbu	r3,-16(fp)
81122ad8:	e0bffd03 	ldbu	r2,-12(fp)
81122adc:	d8800015 	stw	r2,0(sp)
81122ae0:	180f883a 	mov	r7,r3
81122ae4:	800b883a 	mov	r5,r16
81122ae8:	880d883a 	mov	r6,r17
81122aec:	e13ffa17 	ldw	r4,-24(fp)
81122af0:	11227740 	call	81122774 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81122af4:	e6fffe04 	addi	sp,fp,-8
81122af8:	dfc00317 	ldw	ra,12(sp)
81122afc:	df000217 	ldw	fp,8(sp)
81122b00:	dc400117 	ldw	r17,4(sp)
81122b04:	dc000017 	ldw	r16,0(sp)
81122b08:	dec00404 	addi	sp,sp,16
81122b0c:	f800283a 	ret

81122b10 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81122b10:	defff704 	addi	sp,sp,-36
81122b14:	dfc00815 	stw	ra,32(sp)
81122b18:	df000715 	stw	fp,28(sp)
81122b1c:	dc400615 	stw	r17,24(sp)
81122b20:	dc000515 	stw	r16,20(sp)
81122b24:	df000704 	addi	fp,sp,28
81122b28:	e13ffa15 	stw	r4,-24(fp)
81122b2c:	e17ffb15 	stw	r5,-20(fp)
81122b30:	3007883a 	mov	r3,r6
81122b34:	3805883a 	mov	r2,r7
81122b38:	e0fffc05 	stb	r3,-16(fp)
81122b3c:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
81122b40:	e13ffb17 	ldw	r4,-20(fp)
81122b44:	11226a00 	call	811226a0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
81122b48:	10000226 	beq	r2,zero,81122b54 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
81122b4c:	00bffa84 	movi	r2,-22
81122b50:	00000b06 	br	81122b80 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
81122b54:	e0bffb17 	ldw	r2,-20(fp)
81122b58:	1021883a 	mov	r16,r2
81122b5c:	0023883a 	mov	r17,zero
81122b60:	e0fffc03 	ldbu	r3,-16(fp)
81122b64:	e0bffd03 	ldbu	r2,-12(fp)
81122b68:	d8800015 	stw	r2,0(sp)
81122b6c:	180f883a 	mov	r7,r3
81122b70:	800b883a 	mov	r5,r16
81122b74:	880d883a 	mov	r6,r17
81122b78:	e13ffa17 	ldw	r4,-24(fp)
81122b7c:	11227740 	call	81122774 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81122b80:	e6fffe04 	addi	sp,fp,-8
81122b84:	dfc00317 	ldw	ra,12(sp)
81122b88:	df000217 	ldw	fp,8(sp)
81122b8c:	dc400117 	ldw	r17,4(sp)
81122b90:	dc000017 	ldw	r16,0(sp)
81122b94:	dec00404 	addi	sp,sp,16
81122b98:	f800283a 	ret

81122b9c <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
81122b9c:	defffc04 	addi	sp,sp,-16
81122ba0:	dfc00315 	stw	ra,12(sp)
81122ba4:	df000215 	stw	fp,8(sp)
81122ba8:	df000204 	addi	fp,sp,8
81122bac:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
81122bb0:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
81122bb4:	d1603004 	addi	r5,gp,-32576
81122bb8:	e13fff17 	ldw	r4,-4(fp)
81122bbc:	11233000 	call	81123300 <alt_find_dev>
81122bc0:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
81122bc4:	e0bffe17 	ldw	r2,-8(fp)
81122bc8:	1000041e 	bne	r2,zero,81122bdc <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
81122bcc:	1120ee80 	call	81120ee8 <alt_get_errno>
81122bd0:	1007883a 	mov	r3,r2
81122bd4:	008004c4 	movi	r2,19
81122bd8:	18800015 	stw	r2,0(r3)
    }

    return dev;
81122bdc:	e0bffe17 	ldw	r2,-8(fp)
}
81122be0:	e037883a 	mov	sp,fp
81122be4:	dfc00117 	ldw	ra,4(sp)
81122be8:	df000017 	ldw	fp,0(sp)
81122bec:	dec00204 	addi	sp,sp,8
81122bf0:	f800283a 	ret

81122bf4 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81122bf4:	defff604 	addi	sp,sp,-40
81122bf8:	dfc00915 	stw	ra,36(sp)
81122bfc:	df000815 	stw	fp,32(sp)
81122c00:	df000804 	addi	fp,sp,32
81122c04:	e13ffd15 	stw	r4,-12(fp)
81122c08:	e17ffe15 	stw	r5,-8(fp)
81122c0c:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
81122c10:	e0bffd17 	ldw	r2,-12(fp)
81122c14:	10801783 	ldbu	r2,94(r2)
81122c18:	10803fcc 	andi	r2,r2,255
81122c1c:	10000b26 	beq	r2,zero,81122c4c <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
81122c20:	e0bffd17 	ldw	r2,-12(fp)
81122c24:	10800617 	ldw	r2,24(r2)
81122c28:	00c00104 	movi	r3,4
81122c2c:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
81122c30:	0001883a 	nop
81122c34:	e0bffd17 	ldw	r2,-12(fp)
81122c38:	10800617 	ldw	r2,24(r2)
81122c3c:	10800037 	ldwio	r2,0(r2)
81122c40:	1080010c 	andi	r2,r2,4
81122c44:	1005d0ba 	srai	r2,r2,2
81122c48:	103ffa1e 	bne	r2,zero,81122c34 <__reset+0xfb102c34>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81122c4c:	e0bffd17 	ldw	r2,-12(fp)
81122c50:	10800317 	ldw	r2,12(r2)
81122c54:	10800104 	addi	r2,r2,4
81122c58:	00c00084 	movi	r3,2
81122c5c:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81122c60:	0001883a 	nop
81122c64:	e0bffd17 	ldw	r2,-12(fp)
81122c68:	10800317 	ldw	r2,12(r2)
81122c6c:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
81122c70:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81122c74:	103ffb1e 	bne	r2,zero,81122c64 <__reset+0xfb102c64>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81122c78:	e0bffd17 	ldw	r2,-12(fp)
81122c7c:	10800317 	ldw	r2,12(r2)
81122c80:	10800104 	addi	r2,r2,4
81122c84:	10800037 	ldwio	r2,0(r2)
81122c88:	1007883a 	mov	r3,r2
81122c8c:	00bffbc4 	movi	r2,-17
81122c90:	1884703a 	and	r2,r3,r2
81122c94:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81122c98:	e0bff917 	ldw	r2,-28(fp)
81122c9c:	10800814 	ori	r2,r2,32
81122ca0:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81122ca4:	e0bffd17 	ldw	r2,-12(fp)
81122ca8:	10800317 	ldw	r2,12(r2)
81122cac:	10800104 	addi	r2,r2,4
81122cb0:	e0fff917 	ldw	r3,-28(fp)
81122cb4:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
81122cb8:	e0bffd17 	ldw	r2,-12(fp)
81122cbc:	10800317 	ldw	r2,12(r2)
81122cc0:	e0fffd17 	ldw	r3,-12(fp)
81122cc4:	18c00317 	ldw	r3,12(r3)
81122cc8:	18c00037 	ldwio	r3,0(r3)
81122ccc:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
81122cd0:	e0bffd17 	ldw	r2,-12(fp)
81122cd4:	10801783 	ldbu	r2,94(r2)
81122cd8:	10803fcc 	andi	r2,r2,255
81122cdc:	10000826 	beq	r2,zero,81122d00 <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
81122ce0:	e0bffd17 	ldw	r2,-12(fp)
81122ce4:	10800617 	ldw	r2,24(r2)
81122ce8:	10800404 	addi	r2,r2,16
81122cec:	e0fffd17 	ldw	r3,-12(fp)
81122cf0:	18c00617 	ldw	r3,24(r3)
81122cf4:	18c00404 	addi	r3,r3,16
81122cf8:	18c00037 	ldwio	r3,0(r3)
81122cfc:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
81122d00:	d1603004 	addi	r5,gp,-32576
81122d04:	e13ffd17 	ldw	r4,-12(fp)
81122d08:	112319c0 	call	8112319c <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
81122d0c:	e0bffd17 	ldw	r2,-12(fp)
81122d10:	10801804 	addi	r2,r2,96
81122d14:	e0bffb15 	stw	r2,-20(fp)
81122d18:	00800044 	movi	r2,1
81122d1c:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81122d20:	e0bffc0b 	ldhu	r2,-16(fp)
81122d24:	1009883a 	mov	r4,r2
81122d28:	111c0800 	call	8111c080 <OSSemCreate>
81122d2c:	1007883a 	mov	r3,r2
81122d30:	e0bffb17 	ldw	r2,-20(fp)
81122d34:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81122d38:	e0bffb17 	ldw	r2,-20(fp)
81122d3c:	10800017 	ldw	r2,0(r2)
81122d40:	10000226 	beq	r2,zero,81122d4c <alt_msgdma_init+0x158>
81122d44:	0005883a 	mov	r2,zero
81122d48:	00000106 	br	81122d50 <alt_msgdma_init+0x15c>
81122d4c:	00bfffc4 	movi	r2,-1
81122d50:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
81122d54:	e0bffa17 	ldw	r2,-24(fp)
81122d58:	1000081e 	bne	r2,zero,81122d7c <alt_msgdma_init+0x188>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
81122d5c:	d8000015 	stw	zero,0(sp)
81122d60:	e1fffd17 	ldw	r7,-12(fp)
81122d64:	01a044b4 	movhi	r6,33042
81122d68:	31843904 	addi	r6,r6,4324
81122d6c:	e17fff17 	ldw	r5,-4(fp)
81122d70:	e13ffe17 	ldw	r4,-8(fp)
81122d74:	11235740 	call	81123574 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
81122d78:	00000406 	br	81122d8c <alt_msgdma_init+0x198>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
81122d7c:	012044b4 	movhi	r4,33042
81122d80:	21147404 	addi	r4,r4,20944
81122d84:	11239540 	call	81123954 <alt_printf>
    }
    
    return;
81122d88:	0001883a 	nop

}
81122d8c:	e037883a 	mov	sp,fp
81122d90:	dfc00117 	ldw	ra,4(sp)
81122d94:	df000017 	ldw	fp,0(sp)
81122d98:	dec00204 	addi	sp,sp,8
81122d9c:	f800283a 	ret

81122da0 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
81122da0:	defffb04 	addi	sp,sp,-20
81122da4:	df000415 	stw	fp,16(sp)
81122da8:	df000404 	addi	fp,sp,16
81122dac:	e13ffc15 	stw	r4,-16(fp)
81122db0:	e17ffd15 	stw	r5,-12(fp)
81122db4:	e1bffe15 	stw	r6,-8(fp)
81122db8:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
81122dbc:	e0bffc17 	ldw	r2,-16(fp)
81122dc0:	e0fffd17 	ldw	r3,-12(fp)
81122dc4:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
81122dc8:	e0bffc17 	ldw	r2,-16(fp)
81122dcc:	e0ffff17 	ldw	r3,-4(fp)
81122dd0:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
81122dd4:	e0bffc17 	ldw	r2,-16(fp)
81122dd8:	e0fffe17 	ldw	r3,-8(fp)
81122ddc:	10c00d15 	stw	r3,52(r2)

    return ;
81122de0:	0001883a 	nop
}
81122de4:	e037883a 	mov	sp,fp
81122de8:	df000017 	ldw	fp,0(sp)
81122dec:	dec00104 	addi	sp,sp,4
81122df0:	f800283a 	ret

81122df4 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81122df4:	defffc04 	addi	sp,sp,-16
81122df8:	dfc00315 	stw	ra,12(sp)
81122dfc:	df000215 	stw	fp,8(sp)
81122e00:	df000204 	addi	fp,sp,8
81122e04:	e13ffe15 	stw	r4,-8(fp)
81122e08:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
81122e0c:	000d883a 	mov	r6,zero
81122e10:	e17fff17 	ldw	r5,-4(fp)
81122e14:	e13ffe17 	ldw	r4,-8(fp)
81122e18:	11214480 	call	81121448 <alt_msgdma_descriptor_async_transfer>

}
81122e1c:	e037883a 	mov	sp,fp
81122e20:	dfc00117 	ldw	ra,4(sp)
81122e24:	df000017 	ldw	fp,0(sp)
81122e28:	dec00204 	addi	sp,sp,8
81122e2c:	f800283a 	ret

81122e30 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81122e30:	defffc04 	addi	sp,sp,-16
81122e34:	dfc00315 	stw	ra,12(sp)
81122e38:	df000215 	stw	fp,8(sp)
81122e3c:	df000204 	addi	fp,sp,8
81122e40:	e13ffe15 	stw	r4,-8(fp)
81122e44:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
81122e48:	e1bfff17 	ldw	r6,-4(fp)
81122e4c:	000b883a 	mov	r5,zero
81122e50:	e13ffe17 	ldw	r4,-8(fp)
81122e54:	11214480 	call	81121448 <alt_msgdma_descriptor_async_transfer>
}
81122e58:	e037883a 	mov	sp,fp
81122e5c:	dfc00117 	ldw	ra,4(sp)
81122e60:	df000017 	ldw	fp,0(sp)
81122e64:	dec00204 	addi	sp,sp,8
81122e68:	f800283a 	ret

81122e6c <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81122e6c:	defffc04 	addi	sp,sp,-16
81122e70:	dfc00315 	stw	ra,12(sp)
81122e74:	df000215 	stw	fp,8(sp)
81122e78:	df000204 	addi	fp,sp,8
81122e7c:	e13ffe15 	stw	r4,-8(fp)
81122e80:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
81122e84:	000d883a 	mov	r6,zero
81122e88:	e17fff17 	ldw	r5,-4(fp)
81122e8c:	e13ffe17 	ldw	r4,-8(fp)
81122e90:	11217800 	call	81121780 <alt_msgdma_descriptor_sync_transfer>
}
81122e94:	e037883a 	mov	sp,fp
81122e98:	dfc00117 	ldw	ra,4(sp)
81122e9c:	df000017 	ldw	fp,0(sp)
81122ea0:	dec00204 	addi	sp,sp,8
81122ea4:	f800283a 	ret

81122ea8 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81122ea8:	defffc04 	addi	sp,sp,-16
81122eac:	dfc00315 	stw	ra,12(sp)
81122eb0:	df000215 	stw	fp,8(sp)
81122eb4:	df000204 	addi	fp,sp,8
81122eb8:	e13ffe15 	stw	r4,-8(fp)
81122ebc:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
81122ec0:	e1bfff17 	ldw	r6,-4(fp)
81122ec4:	000b883a 	mov	r5,zero
81122ec8:	e13ffe17 	ldw	r4,-8(fp)
81122ecc:	11217800 	call	81121780 <alt_msgdma_descriptor_sync_transfer>
}
81122ed0:	e037883a 	mov	sp,fp
81122ed4:	dfc00117 	ldw	ra,4(sp)
81122ed8:	df000017 	ldw	fp,0(sp)
81122edc:	dec00204 	addi	sp,sp,8
81122ee0:	f800283a 	ret

81122ee4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
81122ee4:	defff504 	addi	sp,sp,-44
81122ee8:	df000a15 	stw	fp,40(sp)
81122eec:	df000a04 	addi	fp,sp,40
81122ef0:	e13ffc15 	stw	r4,-16(fp)
81122ef4:	e17ffd15 	stw	r5,-12(fp)
81122ef8:	e1bffe15 	stw	r6,-8(fp)
81122efc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
81122f00:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81122f04:	d0a05b17 	ldw	r2,-32404(gp)
  
  if (alt_ticks_per_second ())
81122f08:	10003c26 	beq	r2,zero,81122ffc <alt_alarm_start+0x118>
  {
    if (alarm)
81122f0c:	e0bffc17 	ldw	r2,-16(fp)
81122f10:	10003826 	beq	r2,zero,81122ff4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
81122f14:	e0bffc17 	ldw	r2,-16(fp)
81122f18:	e0fffe17 	ldw	r3,-8(fp)
81122f1c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
81122f20:	e0bffc17 	ldw	r2,-16(fp)
81122f24:	e0ffff17 	ldw	r3,-4(fp)
81122f28:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122f2c:	0005303a 	rdctl	r2,status
81122f30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122f34:	e0fff917 	ldw	r3,-28(fp)
81122f38:	00bfff84 	movi	r2,-2
81122f3c:	1884703a 	and	r2,r3,r2
81122f40:	1001703a 	wrctl	status,r2
  
  return context;
81122f44:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
81122f48:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81122f4c:	d0a05c17 	ldw	r2,-32400(gp)
      
      current_nticks = alt_nticks();
81122f50:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
81122f54:	e0fffd17 	ldw	r3,-12(fp)
81122f58:	e0bff617 	ldw	r2,-40(fp)
81122f5c:	1885883a 	add	r2,r3,r2
81122f60:	10c00044 	addi	r3,r2,1
81122f64:	e0bffc17 	ldw	r2,-16(fp)
81122f68:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
81122f6c:	e0bffc17 	ldw	r2,-16(fp)
81122f70:	10c00217 	ldw	r3,8(r2)
81122f74:	e0bff617 	ldw	r2,-40(fp)
81122f78:	1880042e 	bgeu	r3,r2,81122f8c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
81122f7c:	e0bffc17 	ldw	r2,-16(fp)
81122f80:	00c00044 	movi	r3,1
81122f84:	10c00405 	stb	r3,16(r2)
81122f88:	00000206 	br	81122f94 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
81122f8c:	e0bffc17 	ldw	r2,-16(fp)
81122f90:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
81122f94:	e0bffc17 	ldw	r2,-16(fp)
81122f98:	d0e03304 	addi	r3,gp,-32564
81122f9c:	e0fffa15 	stw	r3,-24(fp)
81122fa0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81122fa4:	e0bffb17 	ldw	r2,-20(fp)
81122fa8:	e0fffa17 	ldw	r3,-24(fp)
81122fac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81122fb0:	e0bffa17 	ldw	r2,-24(fp)
81122fb4:	10c00017 	ldw	r3,0(r2)
81122fb8:	e0bffb17 	ldw	r2,-20(fp)
81122fbc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81122fc0:	e0bffa17 	ldw	r2,-24(fp)
81122fc4:	10800017 	ldw	r2,0(r2)
81122fc8:	e0fffb17 	ldw	r3,-20(fp)
81122fcc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81122fd0:	e0bffa17 	ldw	r2,-24(fp)
81122fd4:	e0fffb17 	ldw	r3,-20(fp)
81122fd8:	10c00015 	stw	r3,0(r2)
81122fdc:	e0bff817 	ldw	r2,-32(fp)
81122fe0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122fe4:	e0bff717 	ldw	r2,-36(fp)
81122fe8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
81122fec:	0005883a 	mov	r2,zero
81122ff0:	00000306 	br	81123000 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
81122ff4:	00bffa84 	movi	r2,-22
81122ff8:	00000106 	br	81123000 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
81122ffc:	00bfde84 	movi	r2,-134
  }
}
81123000:	e037883a 	mov	sp,fp
81123004:	df000017 	ldw	fp,0(sp)
81123008:	dec00104 	addi	sp,sp,4
8112300c:	f800283a 	ret

81123010 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81123010:	defffb04 	addi	sp,sp,-20
81123014:	df000415 	stw	fp,16(sp)
81123018:	df000404 	addi	fp,sp,16
8112301c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81123020:	008000c4 	movi	r2,3
81123024:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81123028:	e0fffd17 	ldw	r3,-12(fp)
8112302c:	008003f4 	movhi	r2,15
81123030:	10909004 	addi	r2,r2,16960
81123034:	1887383a 	mul	r3,r3,r2
81123038:	00817db4 	movhi	r2,1526
8112303c:	10b84004 	addi	r2,r2,-7936
81123040:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81123044:	00a00034 	movhi	r2,32768
81123048:	10bfffc4 	addi	r2,r2,-1
8112304c:	10c5203a 	divu	r2,r2,r3
81123050:	e0ffff17 	ldw	r3,-4(fp)
81123054:	1885203a 	divu	r2,r3,r2
81123058:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
8112305c:	e0bffe17 	ldw	r2,-8(fp)
81123060:	10002526 	beq	r2,zero,811230f8 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
81123064:	e03ffc15 	stw	zero,-16(fp)
81123068:	00001406 	br	811230bc <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
8112306c:	00a00034 	movhi	r2,32768
81123070:	10bfffc4 	addi	r2,r2,-1
81123074:	10bfffc4 	addi	r2,r2,-1
81123078:	103ffe1e 	bne	r2,zero,81123074 <__reset+0xfb103074>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
8112307c:	e0fffd17 	ldw	r3,-12(fp)
81123080:	008003f4 	movhi	r2,15
81123084:	10909004 	addi	r2,r2,16960
81123088:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
8112308c:	00817db4 	movhi	r2,1526
81123090:	10b84004 	addi	r2,r2,-7936
81123094:	10c7203a 	divu	r3,r2,r3
81123098:	00a00034 	movhi	r2,32768
8112309c:	10bfffc4 	addi	r2,r2,-1
811230a0:	10c5203a 	divu	r2,r2,r3
811230a4:	e0ffff17 	ldw	r3,-4(fp)
811230a8:	1885c83a 	sub	r2,r3,r2
811230ac:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
811230b0:	e0bffc17 	ldw	r2,-16(fp)
811230b4:	10800044 	addi	r2,r2,1
811230b8:	e0bffc15 	stw	r2,-16(fp)
811230bc:	e0fffc17 	ldw	r3,-16(fp)
811230c0:	e0bffe17 	ldw	r2,-8(fp)
811230c4:	18bfe916 	blt	r3,r2,8112306c <__reset+0xfb10306c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
811230c8:	e0fffd17 	ldw	r3,-12(fp)
811230cc:	008003f4 	movhi	r2,15
811230d0:	10909004 	addi	r2,r2,16960
811230d4:	1887383a 	mul	r3,r3,r2
811230d8:	00817db4 	movhi	r2,1526
811230dc:	10b84004 	addi	r2,r2,-7936
811230e0:	10c7203a 	divu	r3,r2,r3
811230e4:	e0bfff17 	ldw	r2,-4(fp)
811230e8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
811230ec:	10bfffc4 	addi	r2,r2,-1
811230f0:	103ffe1e 	bne	r2,zero,811230ec <__reset+0xfb1030ec>
811230f4:	00000b06 	br	81123124 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
811230f8:	e0fffd17 	ldw	r3,-12(fp)
811230fc:	008003f4 	movhi	r2,15
81123100:	10909004 	addi	r2,r2,16960
81123104:	1887383a 	mul	r3,r3,r2
81123108:	00817db4 	movhi	r2,1526
8112310c:	10b84004 	addi	r2,r2,-7936
81123110:	10c7203a 	divu	r3,r2,r3
81123114:	e0bfff17 	ldw	r2,-4(fp)
81123118:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8112311c:	10bfffc4 	addi	r2,r2,-1
81123120:	00bffe16 	blt	zero,r2,8112311c <__reset+0xfb10311c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81123124:	0005883a 	mov	r2,zero
}
81123128:	e037883a 	mov	sp,fp
8112312c:	df000017 	ldw	fp,0(sp)
81123130:	dec00104 	addi	sp,sp,4
81123134:	f800283a 	ret

81123138 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
81123138:	defffd04 	addi	sp,sp,-12
8112313c:	df000215 	stw	fp,8(sp)
81123140:	df000204 	addi	fp,sp,8
81123144:	e13ffe15 	stw	r4,-8(fp)
81123148:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
8112314c:	0001883a 	nop
81123150:	e037883a 	mov	sp,fp
81123154:	df000017 	ldw	fp,0(sp)
81123158:	dec00104 	addi	sp,sp,4
8112315c:	f800283a 	ret

81123160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81123160:	defffe04 	addi	sp,sp,-8
81123164:	dfc00115 	stw	ra,4(sp)
81123168:	df000015 	stw	fp,0(sp)
8112316c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81123170:	d0a00d17 	ldw	r2,-32716(gp)
81123174:	10000326 	beq	r2,zero,81123184 <alt_get_errno+0x24>
81123178:	d0a00d17 	ldw	r2,-32716(gp)
8112317c:	103ee83a 	callr	r2
81123180:	00000106 	br	81123188 <alt_get_errno+0x28>
81123184:	d0a03604 	addi	r2,gp,-32552
}
81123188:	e037883a 	mov	sp,fp
8112318c:	dfc00117 	ldw	ra,4(sp)
81123190:	df000017 	ldw	fp,0(sp)
81123194:	dec00204 	addi	sp,sp,8
81123198:	f800283a 	ret

8112319c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8112319c:	defffa04 	addi	sp,sp,-24
811231a0:	dfc00515 	stw	ra,20(sp)
811231a4:	df000415 	stw	fp,16(sp)
811231a8:	df000404 	addi	fp,sp,16
811231ac:	e13ffe15 	stw	r4,-8(fp)
811231b0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
811231b4:	e0bffe17 	ldw	r2,-8(fp)
811231b8:	10000326 	beq	r2,zero,811231c8 <alt_dev_llist_insert+0x2c>
811231bc:	e0bffe17 	ldw	r2,-8(fp)
811231c0:	10800217 	ldw	r2,8(r2)
811231c4:	1000061e 	bne	r2,zero,811231e0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
811231c8:	11231600 	call	81123160 <alt_get_errno>
811231cc:	1007883a 	mov	r3,r2
811231d0:	00800584 	movi	r2,22
811231d4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
811231d8:	00bffa84 	movi	r2,-22
811231dc:	00001306 	br	8112322c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
811231e0:	e0bffe17 	ldw	r2,-8(fp)
811231e4:	e0ffff17 	ldw	r3,-4(fp)
811231e8:	e0fffc15 	stw	r3,-16(fp)
811231ec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
811231f0:	e0bffd17 	ldw	r2,-12(fp)
811231f4:	e0fffc17 	ldw	r3,-16(fp)
811231f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
811231fc:	e0bffc17 	ldw	r2,-16(fp)
81123200:	10c00017 	ldw	r3,0(r2)
81123204:	e0bffd17 	ldw	r2,-12(fp)
81123208:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8112320c:	e0bffc17 	ldw	r2,-16(fp)
81123210:	10800017 	ldw	r2,0(r2)
81123214:	e0fffd17 	ldw	r3,-12(fp)
81123218:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8112321c:	e0bffc17 	ldw	r2,-16(fp)
81123220:	e0fffd17 	ldw	r3,-12(fp)
81123224:	10c00015 	stw	r3,0(r2)

  return 0;  
81123228:	0005883a 	mov	r2,zero
}
8112322c:	e037883a 	mov	sp,fp
81123230:	dfc00117 	ldw	ra,4(sp)
81123234:	df000017 	ldw	fp,0(sp)
81123238:	dec00204 	addi	sp,sp,8
8112323c:	f800283a 	ret

81123240 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
81123240:	defffd04 	addi	sp,sp,-12
81123244:	dfc00215 	stw	ra,8(sp)
81123248:	df000115 	stw	fp,4(sp)
8112324c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81123250:	00a044b4 	movhi	r2,33042
81123254:	10919c04 	addi	r2,r2,18032
81123258:	e0bfff15 	stw	r2,-4(fp)
8112325c:	00000606 	br	81123278 <_do_ctors+0x38>
        (*ctor) (); 
81123260:	e0bfff17 	ldw	r2,-4(fp)
81123264:	10800017 	ldw	r2,0(r2)
81123268:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8112326c:	e0bfff17 	ldw	r2,-4(fp)
81123270:	10bfff04 	addi	r2,r2,-4
81123274:	e0bfff15 	stw	r2,-4(fp)
81123278:	e0ffff17 	ldw	r3,-4(fp)
8112327c:	00a044b4 	movhi	r2,33042
81123280:	10919d04 	addi	r2,r2,18036
81123284:	18bff62e 	bgeu	r3,r2,81123260 <__reset+0xfb103260>
        (*ctor) (); 
}
81123288:	0001883a 	nop
8112328c:	e037883a 	mov	sp,fp
81123290:	dfc00117 	ldw	ra,4(sp)
81123294:	df000017 	ldw	fp,0(sp)
81123298:	dec00204 	addi	sp,sp,8
8112329c:	f800283a 	ret

811232a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
811232a0:	defffd04 	addi	sp,sp,-12
811232a4:	dfc00215 	stw	ra,8(sp)
811232a8:	df000115 	stw	fp,4(sp)
811232ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
811232b0:	00a044b4 	movhi	r2,33042
811232b4:	10919c04 	addi	r2,r2,18032
811232b8:	e0bfff15 	stw	r2,-4(fp)
811232bc:	00000606 	br	811232d8 <_do_dtors+0x38>
        (*dtor) (); 
811232c0:	e0bfff17 	ldw	r2,-4(fp)
811232c4:	10800017 	ldw	r2,0(r2)
811232c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
811232cc:	e0bfff17 	ldw	r2,-4(fp)
811232d0:	10bfff04 	addi	r2,r2,-4
811232d4:	e0bfff15 	stw	r2,-4(fp)
811232d8:	e0ffff17 	ldw	r3,-4(fp)
811232dc:	00a044b4 	movhi	r2,33042
811232e0:	10919d04 	addi	r2,r2,18036
811232e4:	18bff62e 	bgeu	r3,r2,811232c0 <__reset+0xfb1032c0>
        (*dtor) (); 
}
811232e8:	0001883a 	nop
811232ec:	e037883a 	mov	sp,fp
811232f0:	dfc00117 	ldw	ra,4(sp)
811232f4:	df000017 	ldw	fp,0(sp)
811232f8:	dec00204 	addi	sp,sp,8
811232fc:	f800283a 	ret

81123300 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
81123300:	defffa04 	addi	sp,sp,-24
81123304:	dfc00515 	stw	ra,20(sp)
81123308:	df000415 	stw	fp,16(sp)
8112330c:	df000404 	addi	fp,sp,16
81123310:	e13ffe15 	stw	r4,-8(fp)
81123314:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
81123318:	e0bfff17 	ldw	r2,-4(fp)
8112331c:	10800017 	ldw	r2,0(r2)
81123320:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
81123324:	e13ffe17 	ldw	r4,-8(fp)
81123328:	1101bb00 	call	81101bb0 <strlen>
8112332c:	10800044 	addi	r2,r2,1
81123330:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81123334:	00000d06 	br	8112336c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
81123338:	e0bffc17 	ldw	r2,-16(fp)
8112333c:	10800217 	ldw	r2,8(r2)
81123340:	e0fffd17 	ldw	r3,-12(fp)
81123344:	180d883a 	mov	r6,r3
81123348:	e17ffe17 	ldw	r5,-8(fp)
8112334c:	1009883a 	mov	r4,r2
81123350:	11241c40 	call	811241c4 <memcmp>
81123354:	1000021e 	bne	r2,zero,81123360 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
81123358:	e0bffc17 	ldw	r2,-16(fp)
8112335c:	00000706 	br	8112337c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
81123360:	e0bffc17 	ldw	r2,-16(fp)
81123364:	10800017 	ldw	r2,0(r2)
81123368:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8112336c:	e0fffc17 	ldw	r3,-16(fp)
81123370:	e0bfff17 	ldw	r2,-4(fp)
81123374:	18bff01e 	bne	r3,r2,81123338 <__reset+0xfb103338>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
81123378:	0005883a 	mov	r2,zero
}
8112337c:	e037883a 	mov	sp,fp
81123380:	dfc00117 	ldw	ra,4(sp)
81123384:	df000017 	ldw	fp,0(sp)
81123388:	dec00204 	addi	sp,sp,8
8112338c:	f800283a 	ret

81123390 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
81123390:	defffb04 	addi	sp,sp,-20
81123394:	dfc00415 	stw	ra,16(sp)
81123398:	df000315 	stw	fp,12(sp)
8112339c:	df000304 	addi	fp,sp,12
811233a0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
811233a4:	d0a00817 	ldw	r2,-32736(gp)
811233a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
811233ac:	00003106 	br	81123474 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
811233b0:	e0bffd17 	ldw	r2,-12(fp)
811233b4:	10800217 	ldw	r2,8(r2)
811233b8:	1009883a 	mov	r4,r2
811233bc:	1101bb00 	call	81101bb0 <strlen>
811233c0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
811233c4:	e0bffd17 	ldw	r2,-12(fp)
811233c8:	10c00217 	ldw	r3,8(r2)
811233cc:	e0bffe17 	ldw	r2,-8(fp)
811233d0:	10bfffc4 	addi	r2,r2,-1
811233d4:	1885883a 	add	r2,r3,r2
811233d8:	10800003 	ldbu	r2,0(r2)
811233dc:	10803fcc 	andi	r2,r2,255
811233e0:	1080201c 	xori	r2,r2,128
811233e4:	10bfe004 	addi	r2,r2,-128
811233e8:	10800bd8 	cmpnei	r2,r2,47
811233ec:	1000031e 	bne	r2,zero,811233fc <alt_find_file+0x6c>
    {
      len -= 1;
811233f0:	e0bffe17 	ldw	r2,-8(fp)
811233f4:	10bfffc4 	addi	r2,r2,-1
811233f8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
811233fc:	e0bffe17 	ldw	r2,-8(fp)
81123400:	e0ffff17 	ldw	r3,-4(fp)
81123404:	1885883a 	add	r2,r3,r2
81123408:	10800003 	ldbu	r2,0(r2)
8112340c:	10803fcc 	andi	r2,r2,255
81123410:	1080201c 	xori	r2,r2,128
81123414:	10bfe004 	addi	r2,r2,-128
81123418:	10800be0 	cmpeqi	r2,r2,47
8112341c:	1000081e 	bne	r2,zero,81123440 <alt_find_file+0xb0>
81123420:	e0bffe17 	ldw	r2,-8(fp)
81123424:	e0ffff17 	ldw	r3,-4(fp)
81123428:	1885883a 	add	r2,r3,r2
8112342c:	10800003 	ldbu	r2,0(r2)
81123430:	10803fcc 	andi	r2,r2,255
81123434:	1080201c 	xori	r2,r2,128
81123438:	10bfe004 	addi	r2,r2,-128
8112343c:	10000a1e 	bne	r2,zero,81123468 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
81123440:	e0bffd17 	ldw	r2,-12(fp)
81123444:	10800217 	ldw	r2,8(r2)
81123448:	e0fffe17 	ldw	r3,-8(fp)
8112344c:	180d883a 	mov	r6,r3
81123450:	e17fff17 	ldw	r5,-4(fp)
81123454:	1009883a 	mov	r4,r2
81123458:	11241c40 	call	811241c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8112345c:	1000021e 	bne	r2,zero,81123468 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
81123460:	e0bffd17 	ldw	r2,-12(fp)
81123464:	00000706 	br	81123484 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
81123468:	e0bffd17 	ldw	r2,-12(fp)
8112346c:	10800017 	ldw	r2,0(r2)
81123470:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81123474:	e0fffd17 	ldw	r3,-12(fp)
81123478:	d0a00804 	addi	r2,gp,-32736
8112347c:	18bfcc1e 	bne	r3,r2,811233b0 <__reset+0xfb1033b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
81123480:	0005883a 	mov	r2,zero
}
81123484:	e037883a 	mov	sp,fp
81123488:	dfc00117 	ldw	ra,4(sp)
8112348c:	df000017 	ldw	fp,0(sp)
81123490:	dec00204 	addi	sp,sp,8
81123494:	f800283a 	ret

81123498 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
81123498:	defff904 	addi	sp,sp,-28
8112349c:	dfc00615 	stw	ra,24(sp)
811234a0:	df000515 	stw	fp,20(sp)
811234a4:	df000504 	addi	fp,sp,20
811234a8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
811234ac:	00bffa04 	movi	r2,-24
811234b0:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
811234b4:	d0a03d17 	ldw	r2,-32524(gp)
811234b8:	e0bffd15 	stw	r2,-12(fp)
811234bc:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
811234c0:	e0bffe0b 	ldhu	r2,-8(fp)
811234c4:	e0fffe84 	addi	r3,fp,-6
811234c8:	180d883a 	mov	r6,r3
811234cc:	100b883a 	mov	r5,r2
811234d0:	e13ffd17 	ldw	r4,-12(fp)
811234d4:	111c3980 	call	8111c398 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
811234d8:	e03ffb15 	stw	zero,-20(fp)
811234dc:	00001906 	br	81123544 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
811234e0:	00a044b4 	movhi	r2,33042
811234e4:	1096b004 	addi	r2,r2,23232
811234e8:	e0fffb17 	ldw	r3,-20(fp)
811234ec:	18c00324 	muli	r3,r3,12
811234f0:	10c5883a 	add	r2,r2,r3
811234f4:	10800017 	ldw	r2,0(r2)
811234f8:	10000f1e 	bne	r2,zero,81123538 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
811234fc:	00a044b4 	movhi	r2,33042
81123500:	1096b004 	addi	r2,r2,23232
81123504:	e0fffb17 	ldw	r3,-20(fp)
81123508:	18c00324 	muli	r3,r3,12
8112350c:	10c5883a 	add	r2,r2,r3
81123510:	e0ffff17 	ldw	r3,-4(fp)
81123514:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
81123518:	d0e00c17 	ldw	r3,-32720(gp)
8112351c:	e0bffb17 	ldw	r2,-20(fp)
81123520:	1880020e 	bge	r3,r2,8112352c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
81123524:	e0bffb17 	ldw	r2,-20(fp)
81123528:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
8112352c:	e0bffb17 	ldw	r2,-20(fp)
81123530:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
81123534:	00000606 	br	81123550 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81123538:	e0bffb17 	ldw	r2,-20(fp)
8112353c:	10800044 	addi	r2,r2,1
81123540:	e0bffb15 	stw	r2,-20(fp)
81123544:	e0bffb17 	ldw	r2,-20(fp)
81123548:	10800810 	cmplti	r2,r2,32
8112354c:	103fe41e 	bne	r2,zero,811234e0 <__reset+0xfb1034e0>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
81123550:	d0a03d17 	ldw	r2,-32524(gp)
81123554:	1009883a 	mov	r4,r2
81123558:	111c7100 	call	8111c710 <OSSemPost>

  return rc;
8112355c:	e0bffc17 	ldw	r2,-16(fp)
}
81123560:	e037883a 	mov	sp,fp
81123564:	dfc00117 	ldw	ra,4(sp)
81123568:	df000017 	ldw	fp,0(sp)
8112356c:	dec00204 	addi	sp,sp,8
81123570:	f800283a 	ret

81123574 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81123574:	defff904 	addi	sp,sp,-28
81123578:	dfc00615 	stw	ra,24(sp)
8112357c:	df000515 	stw	fp,20(sp)
81123580:	df000504 	addi	fp,sp,20
81123584:	e13ffc15 	stw	r4,-16(fp)
81123588:	e17ffd15 	stw	r5,-12(fp)
8112358c:	e1bffe15 	stw	r6,-8(fp)
81123590:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
81123594:	e0800217 	ldw	r2,8(fp)
81123598:	d8800015 	stw	r2,0(sp)
8112359c:	e1ffff17 	ldw	r7,-4(fp)
811235a0:	e1bffe17 	ldw	r6,-8(fp)
811235a4:	e17ffd17 	ldw	r5,-12(fp)
811235a8:	e13ffc17 	ldw	r4,-16(fp)
811235ac:	11237240 	call	81123724 <alt_iic_isr_register>
}  
811235b0:	e037883a 	mov	sp,fp
811235b4:	dfc00117 	ldw	ra,4(sp)
811235b8:	df000017 	ldw	fp,0(sp)
811235bc:	dec00204 	addi	sp,sp,8
811235c0:	f800283a 	ret

811235c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
811235c4:	defff904 	addi	sp,sp,-28
811235c8:	df000615 	stw	fp,24(sp)
811235cc:	df000604 	addi	fp,sp,24
811235d0:	e13ffe15 	stw	r4,-8(fp)
811235d4:	e17fff15 	stw	r5,-4(fp)
811235d8:	e0bfff17 	ldw	r2,-4(fp)
811235dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811235e0:	0005303a 	rdctl	r2,status
811235e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811235e8:	e0fffb17 	ldw	r3,-20(fp)
811235ec:	00bfff84 	movi	r2,-2
811235f0:	1884703a 	and	r2,r3,r2
811235f4:	1001703a 	wrctl	status,r2
  
  return context;
811235f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811235fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
81123600:	00c00044 	movi	r3,1
81123604:	e0bffa17 	ldw	r2,-24(fp)
81123608:	1884983a 	sll	r2,r3,r2
8112360c:	1007883a 	mov	r3,r2
81123610:	d0a05a17 	ldw	r2,-32408(gp)
81123614:	1884b03a 	or	r2,r3,r2
81123618:	d0a05a15 	stw	r2,-32408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8112361c:	d0a05a17 	ldw	r2,-32408(gp)
81123620:	100170fa 	wrctl	ienable,r2
81123624:	e0bffc17 	ldw	r2,-16(fp)
81123628:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112362c:	e0bffd17 	ldw	r2,-12(fp)
81123630:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81123634:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
81123638:	0001883a 	nop
}
8112363c:	e037883a 	mov	sp,fp
81123640:	df000017 	ldw	fp,0(sp)
81123644:	dec00104 	addi	sp,sp,4
81123648:	f800283a 	ret

8112364c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8112364c:	defff904 	addi	sp,sp,-28
81123650:	df000615 	stw	fp,24(sp)
81123654:	df000604 	addi	fp,sp,24
81123658:	e13ffe15 	stw	r4,-8(fp)
8112365c:	e17fff15 	stw	r5,-4(fp)
81123660:	e0bfff17 	ldw	r2,-4(fp)
81123664:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123668:	0005303a 	rdctl	r2,status
8112366c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123670:	e0fffb17 	ldw	r3,-20(fp)
81123674:	00bfff84 	movi	r2,-2
81123678:	1884703a 	and	r2,r3,r2
8112367c:	1001703a 	wrctl	status,r2
  
  return context;
81123680:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81123684:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
81123688:	00c00044 	movi	r3,1
8112368c:	e0bffa17 	ldw	r2,-24(fp)
81123690:	1884983a 	sll	r2,r3,r2
81123694:	0084303a 	nor	r2,zero,r2
81123698:	1007883a 	mov	r3,r2
8112369c:	d0a05a17 	ldw	r2,-32408(gp)
811236a0:	1884703a 	and	r2,r3,r2
811236a4:	d0a05a15 	stw	r2,-32408(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811236a8:	d0a05a17 	ldw	r2,-32408(gp)
811236ac:	100170fa 	wrctl	ienable,r2
811236b0:	e0bffc17 	ldw	r2,-16(fp)
811236b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811236b8:	e0bffd17 	ldw	r2,-12(fp)
811236bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811236c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
811236c4:	0001883a 	nop
}
811236c8:	e037883a 	mov	sp,fp
811236cc:	df000017 	ldw	fp,0(sp)
811236d0:	dec00104 	addi	sp,sp,4
811236d4:	f800283a 	ret

811236d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
811236d8:	defffc04 	addi	sp,sp,-16
811236dc:	df000315 	stw	fp,12(sp)
811236e0:	df000304 	addi	fp,sp,12
811236e4:	e13ffe15 	stw	r4,-8(fp)
811236e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
811236ec:	000530fa 	rdctl	r2,ienable
811236f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
811236f4:	00c00044 	movi	r3,1
811236f8:	e0bfff17 	ldw	r2,-4(fp)
811236fc:	1884983a 	sll	r2,r3,r2
81123700:	1007883a 	mov	r3,r2
81123704:	e0bffd17 	ldw	r2,-12(fp)
81123708:	1884703a 	and	r2,r3,r2
8112370c:	1004c03a 	cmpne	r2,r2,zero
81123710:	10803fcc 	andi	r2,r2,255
}
81123714:	e037883a 	mov	sp,fp
81123718:	df000017 	ldw	fp,0(sp)
8112371c:	dec00104 	addi	sp,sp,4
81123720:	f800283a 	ret

81123724 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81123724:	defff504 	addi	sp,sp,-44
81123728:	dfc00a15 	stw	ra,40(sp)
8112372c:	df000915 	stw	fp,36(sp)
81123730:	df000904 	addi	fp,sp,36
81123734:	e13ffc15 	stw	r4,-16(fp)
81123738:	e17ffd15 	stw	r5,-12(fp)
8112373c:	e1bffe15 	stw	r6,-8(fp)
81123740:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
81123744:	00bffa84 	movi	r2,-22
81123748:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8112374c:	e0bffd17 	ldw	r2,-12(fp)
81123750:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81123754:	e0bff817 	ldw	r2,-32(fp)
81123758:	10800808 	cmpgei	r2,r2,32
8112375c:	1000271e 	bne	r2,zero,811237fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123760:	0005303a 	rdctl	r2,status
81123764:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123768:	e0fffb17 	ldw	r3,-20(fp)
8112376c:	00bfff84 	movi	r2,-2
81123770:	1884703a 	and	r2,r3,r2
81123774:	1001703a 	wrctl	status,r2
  
  return context;
81123778:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8112377c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
81123780:	00a044f4 	movhi	r2,33043
81123784:	10ba2b04 	addi	r2,r2,-5972
81123788:	e0fff817 	ldw	r3,-32(fp)
8112378c:	180690fa 	slli	r3,r3,3
81123790:	10c5883a 	add	r2,r2,r3
81123794:	e0fffe17 	ldw	r3,-8(fp)
81123798:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8112379c:	00a044f4 	movhi	r2,33043
811237a0:	10ba2b04 	addi	r2,r2,-5972
811237a4:	e0fff817 	ldw	r3,-32(fp)
811237a8:	180690fa 	slli	r3,r3,3
811237ac:	10c5883a 	add	r2,r2,r3
811237b0:	10800104 	addi	r2,r2,4
811237b4:	e0ffff17 	ldw	r3,-4(fp)
811237b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
811237bc:	e0bffe17 	ldw	r2,-8(fp)
811237c0:	10000526 	beq	r2,zero,811237d8 <alt_iic_isr_register+0xb4>
811237c4:	e0bff817 	ldw	r2,-32(fp)
811237c8:	100b883a 	mov	r5,r2
811237cc:	e13ffc17 	ldw	r4,-16(fp)
811237d0:	11235c40 	call	811235c4 <alt_ic_irq_enable>
811237d4:	00000406 	br	811237e8 <alt_iic_isr_register+0xc4>
811237d8:	e0bff817 	ldw	r2,-32(fp)
811237dc:	100b883a 	mov	r5,r2
811237e0:	e13ffc17 	ldw	r4,-16(fp)
811237e4:	112364c0 	call	8112364c <alt_ic_irq_disable>
811237e8:	e0bff715 	stw	r2,-36(fp)
811237ec:	e0bffa17 	ldw	r2,-24(fp)
811237f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811237f4:	e0bff917 	ldw	r2,-28(fp)
811237f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
811237fc:	e0bff717 	ldw	r2,-36(fp)
}
81123800:	e037883a 	mov	sp,fp
81123804:	dfc00117 	ldw	ra,4(sp)
81123808:	df000017 	ldw	fp,0(sp)
8112380c:	dec00204 	addi	sp,sp,8
81123810:	f800283a 	ret

81123814 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
81123814:	defff904 	addi	sp,sp,-28
81123818:	dfc00615 	stw	ra,24(sp)
8112381c:	df000515 	stw	fp,20(sp)
81123820:	df000504 	addi	fp,sp,20
81123824:	e13ffc15 	stw	r4,-16(fp)
81123828:	e17ffd15 	stw	r5,-12(fp)
8112382c:	e1bffe15 	stw	r6,-8(fp)
81123830:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
81123834:	e1bfff17 	ldw	r6,-4(fp)
81123838:	e17ffe17 	ldw	r5,-8(fp)
8112383c:	e13ffd17 	ldw	r4,-12(fp)
81123840:	11166cc0 	call	811166cc <open>
81123844:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
81123848:	e0bffb17 	ldw	r2,-20(fp)
8112384c:	10001c16 	blt	r2,zero,811238c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
81123850:	00a044b4 	movhi	r2,33042
81123854:	1096b004 	addi	r2,r2,23232
81123858:	e0fffb17 	ldw	r3,-20(fp)
8112385c:	18c00324 	muli	r3,r3,12
81123860:	10c5883a 	add	r2,r2,r3
81123864:	10c00017 	ldw	r3,0(r2)
81123868:	e0bffc17 	ldw	r2,-16(fp)
8112386c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
81123870:	00a044b4 	movhi	r2,33042
81123874:	1096b004 	addi	r2,r2,23232
81123878:	e0fffb17 	ldw	r3,-20(fp)
8112387c:	18c00324 	muli	r3,r3,12
81123880:	10c5883a 	add	r2,r2,r3
81123884:	10800104 	addi	r2,r2,4
81123888:	10c00017 	ldw	r3,0(r2)
8112388c:	e0bffc17 	ldw	r2,-16(fp)
81123890:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
81123894:	00a044b4 	movhi	r2,33042
81123898:	1096b004 	addi	r2,r2,23232
8112389c:	e0fffb17 	ldw	r3,-20(fp)
811238a0:	18c00324 	muli	r3,r3,12
811238a4:	10c5883a 	add	r2,r2,r3
811238a8:	10800204 	addi	r2,r2,8
811238ac:	10c00017 	ldw	r3,0(r2)
811238b0:	e0bffc17 	ldw	r2,-16(fp)
811238b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
811238b8:	e13ffb17 	ldw	r4,-20(fp)
811238bc:	11169580 	call	81116958 <alt_release_fd>
  }
} 
811238c0:	0001883a 	nop
811238c4:	e037883a 	mov	sp,fp
811238c8:	dfc00117 	ldw	ra,4(sp)
811238cc:	df000017 	ldw	fp,0(sp)
811238d0:	dec00204 	addi	sp,sp,8
811238d4:	f800283a 	ret

811238d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
811238d8:	defffb04 	addi	sp,sp,-20
811238dc:	dfc00415 	stw	ra,16(sp)
811238e0:	df000315 	stw	fp,12(sp)
811238e4:	df000304 	addi	fp,sp,12
811238e8:	e13ffd15 	stw	r4,-12(fp)
811238ec:	e17ffe15 	stw	r5,-8(fp)
811238f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
811238f4:	01c07fc4 	movi	r7,511
811238f8:	01800044 	movi	r6,1
811238fc:	e17ffd17 	ldw	r5,-12(fp)
81123900:	012044b4 	movhi	r4,33042
81123904:	2116b304 	addi	r4,r4,23244
81123908:	11238140 	call	81123814 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8112390c:	01c07fc4 	movi	r7,511
81123910:	000d883a 	mov	r6,zero
81123914:	e17ffe17 	ldw	r5,-8(fp)
81123918:	012044b4 	movhi	r4,33042
8112391c:	2116b004 	addi	r4,r4,23232
81123920:	11238140 	call	81123814 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
81123924:	01c07fc4 	movi	r7,511
81123928:	01800044 	movi	r6,1
8112392c:	e17fff17 	ldw	r5,-4(fp)
81123930:	012044b4 	movhi	r4,33042
81123934:	2116b604 	addi	r4,r4,23256
81123938:	11238140 	call	81123814 <alt_open_fd>
}  
8112393c:	0001883a 	nop
81123940:	e037883a 	mov	sp,fp
81123944:	dfc00117 	ldw	ra,4(sp)
81123948:	df000017 	ldw	fp,0(sp)
8112394c:	dec00204 	addi	sp,sp,8
81123950:	f800283a 	ret

81123954 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
81123954:	defff204 	addi	sp,sp,-56
81123958:	dfc00a15 	stw	ra,40(sp)
8112395c:	df000915 	stw	fp,36(sp)
81123960:	df000904 	addi	fp,sp,36
81123964:	e13fff15 	stw	r4,-4(fp)
81123968:	e1400215 	stw	r5,8(fp)
8112396c:	e1800315 	stw	r6,12(fp)
81123970:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
81123974:	e0800204 	addi	r2,fp,8
81123978:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8112397c:	e0bfff17 	ldw	r2,-4(fp)
81123980:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
81123984:	00006f06 	br	81123b44 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
81123988:	e0bff807 	ldb	r2,-32(fp)
8112398c:	10800960 	cmpeqi	r2,r2,37
81123990:	1000041e 	bne	r2,zero,811239a4 <alt_printf+0x50>
        {
            alt_putchar(c);
81123994:	e0bff807 	ldb	r2,-32(fp)
81123998:	1009883a 	mov	r4,r2
8112399c:	1123b800 	call	81123b80 <alt_putchar>
811239a0:	00006806 	br	81123b44 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
811239a4:	e0bff717 	ldw	r2,-36(fp)
811239a8:	10c00044 	addi	r3,r2,1
811239ac:	e0fff715 	stw	r3,-36(fp)
811239b0:	10800003 	ldbu	r2,0(r2)
811239b4:	e0bff805 	stb	r2,-32(fp)
811239b8:	e0bff807 	ldb	r2,-32(fp)
811239bc:	10006926 	beq	r2,zero,81123b64 <alt_printf+0x210>
            {
                if (c == '%')
811239c0:	e0bff807 	ldb	r2,-32(fp)
811239c4:	10800958 	cmpnei	r2,r2,37
811239c8:	1000041e 	bne	r2,zero,811239dc <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
811239cc:	e0bff807 	ldb	r2,-32(fp)
811239d0:	1009883a 	mov	r4,r2
811239d4:	1123b800 	call	81123b80 <alt_putchar>
811239d8:	00005a06 	br	81123b44 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
811239dc:	e0bff807 	ldb	r2,-32(fp)
811239e0:	108018d8 	cmpnei	r2,r2,99
811239e4:	1000081e 	bne	r2,zero,81123a08 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
811239e8:	e0bffe17 	ldw	r2,-8(fp)
811239ec:	10c00104 	addi	r3,r2,4
811239f0:	e0fffe15 	stw	r3,-8(fp)
811239f4:	10800017 	ldw	r2,0(r2)
811239f8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
811239fc:	e13ffd17 	ldw	r4,-12(fp)
81123a00:	1123b800 	call	81123b80 <alt_putchar>
81123a04:	00004f06 	br	81123b44 <alt_printf+0x1f0>
                }
                else if (c == 'x')
81123a08:	e0bff807 	ldb	r2,-32(fp)
81123a0c:	10801e18 	cmpnei	r2,r2,120
81123a10:	1000341e 	bne	r2,zero,81123ae4 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
81123a14:	e0bffe17 	ldw	r2,-8(fp)
81123a18:	10c00104 	addi	r3,r2,4
81123a1c:	e0fffe15 	stw	r3,-8(fp)
81123a20:	10800017 	ldw	r2,0(r2)
81123a24:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81123a28:	e0bffb17 	ldw	r2,-20(fp)
81123a2c:	1000031e 	bne	r2,zero,81123a3c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
81123a30:	01000c04 	movi	r4,48
81123a34:	1123b800 	call	81123b80 <alt_putchar>
                        continue;
81123a38:	00004206 	br	81123b44 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
81123a3c:	00800704 	movi	r2,28
81123a40:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
81123a44:	00000306 	br	81123a54 <alt_printf+0x100>
                        digit_shift -= 4;
81123a48:	e0bff917 	ldw	r2,-28(fp)
81123a4c:	10bfff04 	addi	r2,r2,-4
81123a50:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
81123a54:	00c003c4 	movi	r3,15
81123a58:	e0bff917 	ldw	r2,-28(fp)
81123a5c:	1884983a 	sll	r2,r3,r2
81123a60:	1007883a 	mov	r3,r2
81123a64:	e0bffb17 	ldw	r2,-20(fp)
81123a68:	1884703a 	and	r2,r3,r2
81123a6c:	103ff626 	beq	r2,zero,81123a48 <__reset+0xfb103a48>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81123a70:	00001906 	br	81123ad8 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
81123a74:	00c003c4 	movi	r3,15
81123a78:	e0bff917 	ldw	r2,-28(fp)
81123a7c:	1884983a 	sll	r2,r3,r2
81123a80:	1007883a 	mov	r3,r2
81123a84:	e0bffb17 	ldw	r2,-20(fp)
81123a88:	1886703a 	and	r3,r3,r2
81123a8c:	e0bff917 	ldw	r2,-28(fp)
81123a90:	1884d83a 	srl	r2,r3,r2
81123a94:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
81123a98:	e0bffc17 	ldw	r2,-16(fp)
81123a9c:	108002a8 	cmpgeui	r2,r2,10
81123aa0:	1000041e 	bne	r2,zero,81123ab4 <alt_printf+0x160>
                            c = '0' + digit;
81123aa4:	e0bffc17 	ldw	r2,-16(fp)
81123aa8:	10800c04 	addi	r2,r2,48
81123aac:	e0bff805 	stb	r2,-32(fp)
81123ab0:	00000306 	br	81123ac0 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
81123ab4:	e0bffc17 	ldw	r2,-16(fp)
81123ab8:	108015c4 	addi	r2,r2,87
81123abc:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
81123ac0:	e0bff807 	ldb	r2,-32(fp)
81123ac4:	1009883a 	mov	r4,r2
81123ac8:	1123b800 	call	81123b80 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81123acc:	e0bff917 	ldw	r2,-28(fp)
81123ad0:	10bfff04 	addi	r2,r2,-4
81123ad4:	e0bff915 	stw	r2,-28(fp)
81123ad8:	e0bff917 	ldw	r2,-28(fp)
81123adc:	103fe50e 	bge	r2,zero,81123a74 <__reset+0xfb103a74>
81123ae0:	00001806 	br	81123b44 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
81123ae4:	e0bff807 	ldb	r2,-32(fp)
81123ae8:	10801cd8 	cmpnei	r2,r2,115
81123aec:	1000151e 	bne	r2,zero,81123b44 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
81123af0:	e0bffe17 	ldw	r2,-8(fp)
81123af4:	10c00104 	addi	r3,r2,4
81123af8:	e0fffe15 	stw	r3,-8(fp)
81123afc:	10800017 	ldw	r2,0(r2)
81123b00:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
81123b04:	00000906 	br	81123b2c <alt_printf+0x1d8>
                      alt_putchar(*s++);
81123b08:	e0bffa17 	ldw	r2,-24(fp)
81123b0c:	10c00044 	addi	r3,r2,1
81123b10:	e0fffa15 	stw	r3,-24(fp)
81123b14:	10800003 	ldbu	r2,0(r2)
81123b18:	10803fcc 	andi	r2,r2,255
81123b1c:	1080201c 	xori	r2,r2,128
81123b20:	10bfe004 	addi	r2,r2,-128
81123b24:	1009883a 	mov	r4,r2
81123b28:	1123b800 	call	81123b80 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
81123b2c:	e0bffa17 	ldw	r2,-24(fp)
81123b30:	10800003 	ldbu	r2,0(r2)
81123b34:	10803fcc 	andi	r2,r2,255
81123b38:	1080201c 	xori	r2,r2,128
81123b3c:	10bfe004 	addi	r2,r2,-128
81123b40:	103ff11e 	bne	r2,zero,81123b08 <__reset+0xfb103b08>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
81123b44:	e0bff717 	ldw	r2,-36(fp)
81123b48:	10c00044 	addi	r3,r2,1
81123b4c:	e0fff715 	stw	r3,-36(fp)
81123b50:	10800003 	ldbu	r2,0(r2)
81123b54:	e0bff805 	stb	r2,-32(fp)
81123b58:	e0bff807 	ldb	r2,-32(fp)
81123b5c:	103f8a1e 	bne	r2,zero,81123988 <__reset+0xfb103988>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81123b60:	00000106 	br	81123b68 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81123b64:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81123b68:	0001883a 	nop
81123b6c:	e037883a 	mov	sp,fp
81123b70:	dfc00117 	ldw	ra,4(sp)
81123b74:	df000017 	ldw	fp,0(sp)
81123b78:	dec00504 	addi	sp,sp,20
81123b7c:	f800283a 	ret

81123b80 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
81123b80:	defffd04 	addi	sp,sp,-12
81123b84:	dfc00215 	stw	ra,8(sp)
81123b88:	df000115 	stw	fp,4(sp)
81123b8c:	df000104 	addi	fp,sp,4
81123b90:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
81123b94:	d0a00117 	ldw	r2,-32764(gp)
81123b98:	10800217 	ldw	r2,8(r2)
81123b9c:	100b883a 	mov	r5,r2
81123ba0:	e13fff17 	ldw	r4,-4(fp)
81123ba4:	11242e00 	call	811242e0 <putc>
#endif
#endif
}
81123ba8:	e037883a 	mov	sp,fp
81123bac:	dfc00117 	ldw	ra,4(sp)
81123bb0:	df000017 	ldw	fp,0(sp)
81123bb4:	dec00204 	addi	sp,sp,8
81123bb8:	f800283a 	ret

81123bbc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81123bbc:	defffa04 	addi	sp,sp,-24
81123bc0:	df000515 	stw	fp,20(sp)
81123bc4:	df000504 	addi	fp,sp,20
81123bc8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123bcc:	0005303a 	rdctl	r2,status
81123bd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123bd4:	e0fffc17 	ldw	r3,-16(fp)
81123bd8:	00bfff84 	movi	r2,-2
81123bdc:	1884703a 	and	r2,r3,r2
81123be0:	1001703a 	wrctl	status,r2
  
  return context;
81123be4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
81123be8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
81123bec:	e0bfff17 	ldw	r2,-4(fp)
81123bf0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
81123bf4:	e0bffd17 	ldw	r2,-12(fp)
81123bf8:	10800017 	ldw	r2,0(r2)
81123bfc:	e0fffd17 	ldw	r3,-12(fp)
81123c00:	18c00117 	ldw	r3,4(r3)
81123c04:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
81123c08:	e0bffd17 	ldw	r2,-12(fp)
81123c0c:	10800117 	ldw	r2,4(r2)
81123c10:	e0fffd17 	ldw	r3,-12(fp)
81123c14:	18c00017 	ldw	r3,0(r3)
81123c18:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81123c1c:	e0bffd17 	ldw	r2,-12(fp)
81123c20:	e0fffd17 	ldw	r3,-12(fp)
81123c24:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81123c28:	e0bffd17 	ldw	r2,-12(fp)
81123c2c:	e0fffd17 	ldw	r3,-12(fp)
81123c30:	10c00015 	stw	r3,0(r2)
81123c34:	e0bffb17 	ldw	r2,-20(fp)
81123c38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123c3c:	e0bffe17 	ldw	r2,-8(fp)
81123c40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81123c44:	0001883a 	nop
81123c48:	e037883a 	mov	sp,fp
81123c4c:	df000017 	ldw	fp,0(sp)
81123c50:	dec00104 	addi	sp,sp,4
81123c54:	f800283a 	ret

81123c58 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81123c58:	defffb04 	addi	sp,sp,-20
81123c5c:	dfc00415 	stw	ra,16(sp)
81123c60:	df000315 	stw	fp,12(sp)
81123c64:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81123c68:	d0a03317 	ldw	r2,-32564(gp)
81123c6c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81123c70:	d0a05c17 	ldw	r2,-32400(gp)
81123c74:	10800044 	addi	r2,r2,1
81123c78:	d0a05c15 	stw	r2,-32400(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81123c7c:	00002e06 	br	81123d38 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
81123c80:	e0bffd17 	ldw	r2,-12(fp)
81123c84:	10800017 	ldw	r2,0(r2)
81123c88:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81123c8c:	e0bffd17 	ldw	r2,-12(fp)
81123c90:	10800403 	ldbu	r2,16(r2)
81123c94:	10803fcc 	andi	r2,r2,255
81123c98:	10000426 	beq	r2,zero,81123cac <alt_tick+0x54>
81123c9c:	d0a05c17 	ldw	r2,-32400(gp)
81123ca0:	1000021e 	bne	r2,zero,81123cac <alt_tick+0x54>
    {
      alarm->rollover = 0;
81123ca4:	e0bffd17 	ldw	r2,-12(fp)
81123ca8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81123cac:	e0bffd17 	ldw	r2,-12(fp)
81123cb0:	10800217 	ldw	r2,8(r2)
81123cb4:	d0e05c17 	ldw	r3,-32400(gp)
81123cb8:	18801d36 	bltu	r3,r2,81123d30 <alt_tick+0xd8>
81123cbc:	e0bffd17 	ldw	r2,-12(fp)
81123cc0:	10800403 	ldbu	r2,16(r2)
81123cc4:	10803fcc 	andi	r2,r2,255
81123cc8:	1000191e 	bne	r2,zero,81123d30 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
81123ccc:	e0bffd17 	ldw	r2,-12(fp)
81123cd0:	10800317 	ldw	r2,12(r2)
81123cd4:	e0fffd17 	ldw	r3,-12(fp)
81123cd8:	18c00517 	ldw	r3,20(r3)
81123cdc:	1809883a 	mov	r4,r3
81123ce0:	103ee83a 	callr	r2
81123ce4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
81123ce8:	e0bfff17 	ldw	r2,-4(fp)
81123cec:	1000031e 	bne	r2,zero,81123cfc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
81123cf0:	e13ffd17 	ldw	r4,-12(fp)
81123cf4:	1123bbc0 	call	81123bbc <alt_alarm_stop>
81123cf8:	00000d06 	br	81123d30 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
81123cfc:	e0bffd17 	ldw	r2,-12(fp)
81123d00:	10c00217 	ldw	r3,8(r2)
81123d04:	e0bfff17 	ldw	r2,-4(fp)
81123d08:	1887883a 	add	r3,r3,r2
81123d0c:	e0bffd17 	ldw	r2,-12(fp)
81123d10:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
81123d14:	e0bffd17 	ldw	r2,-12(fp)
81123d18:	10c00217 	ldw	r3,8(r2)
81123d1c:	d0a05c17 	ldw	r2,-32400(gp)
81123d20:	1880032e 	bgeu	r3,r2,81123d30 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
81123d24:	e0bffd17 	ldw	r2,-12(fp)
81123d28:	00c00044 	movi	r3,1
81123d2c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81123d30:	e0bffe17 	ldw	r2,-8(fp)
81123d34:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81123d38:	e0fffd17 	ldw	r3,-12(fp)
81123d3c:	d0a03304 	addi	r2,gp,-32564
81123d40:	18bfcf1e 	bne	r3,r2,81123c80 <__reset+0xfb103c80>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
81123d44:	1117b440 	call	81117b44 <OSTimeTick>
}
81123d48:	0001883a 	nop
81123d4c:	e037883a 	mov	sp,fp
81123d50:	dfc00117 	ldw	ra,4(sp)
81123d54:	df000017 	ldw	fp,0(sp)
81123d58:	dec00204 	addi	sp,sp,8
81123d5c:	f800283a 	ret

81123d60 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
81123d60:	deffff04 	addi	sp,sp,-4
81123d64:	df000015 	stw	fp,0(sp)
81123d68:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
81123d6c:	000170fa 	wrctl	ienable,zero
}
81123d70:	0001883a 	nop
81123d74:	e037883a 	mov	sp,fp
81123d78:	df000017 	ldw	fp,0(sp)
81123d7c:	dec00104 	addi	sp,sp,4
81123d80:	f800283a 	ret

81123d84 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
81123d84:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
81123d88:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
81123d8c:	d1205517 	ldw	r4,-32428(gp)

      stw ra,  0(sp)
81123d90:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
81123d94:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
81123d98:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
81123d9c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
81123da0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
81123da4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
81123da8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
81123dac:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
81123db0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
81123db4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
81123db8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
81123dbc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
81123dc0:	1123ff80 	call	81123ff8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
81123dc4:	d1204f17 	ldw	r4,-32452(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
81123dc8:	d1604707 	ldb	r5,-32484(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
81123dcc:	d1205515 	stw	r4,-32428(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
81123dd0:	d1604745 	stb	r5,-32483(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
81123dd4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
81123dd8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
81123ddc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
81123de0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
81123de4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
81123de8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
81123dec:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
81123df0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
81123df4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
81123df8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
81123dfc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
81123e00:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
81123e04:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
81123e08:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
81123e0c:	f800283a 	ret

81123e10 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
81123e10:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
81123e14:	047fff84 	movi	r17,-2
      and   r18, r18, r17
81123e18:	9464703a 	and	r18,r18,r17
      wrctl status, r18
81123e1c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
81123e20:	1123ff80 	call	81123ff8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
81123e24:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
81123e28:	d4a04545 	stb	r18,-32491(gp)

      /*
       * start execution of the new task.
       */

      br 9b
81123e2c:	003fe506 	br	81123dc4 <__reset+0xfb103dc4>

81123e30 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
81123e30:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
81123e34:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
81123e38:	10800054 	ori	r2,r2,1
      wrctl status, r2
81123e3c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
81123e40:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
81123e44:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
81123e48:	dec00204 	addi	sp,sp,8

      callr r2
81123e4c:	103ee83a 	callr	r2

      nop
81123e50:	0001883a 	nop

81123e54 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
81123e54:	defff704 	addi	sp,sp,-36
81123e58:	dfc00815 	stw	ra,32(sp)
81123e5c:	df000715 	stw	fp,28(sp)
81123e60:	df000704 	addi	fp,sp,28
81123e64:	e13ffc15 	stw	r4,-16(fp)
81123e68:	e17ffd15 	stw	r5,-12(fp)
81123e6c:	e1bffe15 	stw	r6,-8(fp)
81123e70:	3805883a 	mov	r2,r7
81123e74:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
81123e78:	e0fffe17 	ldw	r3,-8(fp)
81123e7c:	00bfff04 	movi	r2,-4
81123e80:	1884703a 	and	r2,r3,r2
81123e84:	10bef704 	addi	r2,r2,-1060
81123e88:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
81123e8c:	01810904 	movi	r6,1060
81123e90:	000b883a 	mov	r5,zero
81123e94:	e13ff917 	ldw	r4,-28(fp)
81123e98:	11014fc0 	call	811014fc <memset>
81123e9c:	e0bff917 	ldw	r2,-28(fp)
81123ea0:	10c0bb04 	addi	r3,r2,748
81123ea4:	e0bff917 	ldw	r2,-28(fp)
81123ea8:	10c00115 	stw	r3,4(r2)
81123eac:	e0bff917 	ldw	r2,-28(fp)
81123eb0:	10c0d504 	addi	r3,r2,852
81123eb4:	e0bff917 	ldw	r2,-28(fp)
81123eb8:	10c00215 	stw	r3,8(r2)
81123ebc:	e0bff917 	ldw	r2,-28(fp)
81123ec0:	10c0ef04 	addi	r3,r2,956
81123ec4:	e0bff917 	ldw	r2,-28(fp)
81123ec8:	10c00315 	stw	r3,12(r2)
81123ecc:	e0fff917 	ldw	r3,-28(fp)
81123ed0:	00a044b4 	movhi	r2,33042
81123ed4:	10947c04 	addi	r2,r2,20976
81123ed8:	18800d15 	stw	r2,52(r3)
81123edc:	e0bff917 	ldw	r2,-28(fp)
81123ee0:	00c00044 	movi	r3,1
81123ee4:	10c02915 	stw	r3,164(r2)
81123ee8:	10002a15 	stw	zero,168(r2)
81123eec:	e0bff917 	ldw	r2,-28(fp)
81123ef0:	00ccc384 	movi	r3,13070
81123ef4:	10c02b0d 	sth	r3,172(r2)
81123ef8:	e0bff917 	ldw	r2,-28(fp)
81123efc:	00eaf344 	movi	r3,-21555
81123f00:	10c02b8d 	sth	r3,174(r2)
81123f04:	e0bff917 	ldw	r2,-28(fp)
81123f08:	00c48d04 	movi	r3,4660
81123f0c:	10c02c0d 	sth	r3,176(r2)
81123f10:	e0bff917 	ldw	r2,-28(fp)
81123f14:	00f99b44 	movi	r3,-6547
81123f18:	10c02c8d 	sth	r3,178(r2)
81123f1c:	e0bff917 	ldw	r2,-28(fp)
81123f20:	00f7bb04 	movi	r3,-8468
81123f24:	10c02d0d 	sth	r3,180(r2)
81123f28:	e0bff917 	ldw	r2,-28(fp)
81123f2c:	00c00144 	movi	r3,5
81123f30:	10c02d8d 	sth	r3,182(r2)
81123f34:	e0bff917 	ldw	r2,-28(fp)
81123f38:	00c002c4 	movi	r3,11
81123f3c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
81123f40:	e0bff917 	ldw	r2,-28(fp)
81123f44:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
81123f48:	e0bffa17 	ldw	r2,-24(fp)
81123f4c:	10bff304 	addi	r2,r2,-52
81123f50:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
81123f54:	e0bffb17 	ldw	r2,-20(fp)
81123f58:	10800c04 	addi	r2,r2,48
81123f5c:	e0fffc17 	ldw	r3,-16(fp)
81123f60:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
81123f64:	e0bffb17 	ldw	r2,-20(fp)
81123f68:	10800b04 	addi	r2,r2,44
81123f6c:	e0fffd17 	ldw	r3,-12(fp)
81123f70:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
81123f74:	e0bffb17 	ldw	r2,-20(fp)
81123f78:	10800a04 	addi	r2,r2,40
81123f7c:	e0fff917 	ldw	r3,-28(fp)
81123f80:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
81123f84:	00a044b4 	movhi	r2,33042
81123f88:	108f8c04 	addi	r2,r2,15920
81123f8c:	10c00104 	addi	r3,r2,4
81123f90:	e0bffb17 	ldw	r2,-20(fp)
81123f94:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
81123f98:	e0bffb17 	ldw	r2,-20(fp)
}
81123f9c:	e037883a 	mov	sp,fp
81123fa0:	dfc00117 	ldw	ra,4(sp)
81123fa4:	df000017 	ldw	fp,0(sp)
81123fa8:	dec00204 	addi	sp,sp,8
81123fac:	f800283a 	ret

81123fb0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
81123fb0:	defffe04 	addi	sp,sp,-8
81123fb4:	df000115 	stw	fp,4(sp)
81123fb8:	df000104 	addi	fp,sp,4
81123fbc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
81123fc0:	0001883a 	nop
81123fc4:	e037883a 	mov	sp,fp
81123fc8:	df000017 	ldw	fp,0(sp)
81123fcc:	dec00104 	addi	sp,sp,4
81123fd0:	f800283a 	ret

81123fd4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
81123fd4:	defffe04 	addi	sp,sp,-8
81123fd8:	df000115 	stw	fp,4(sp)
81123fdc:	df000104 	addi	fp,sp,4
81123fe0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
81123fe4:	0001883a 	nop
81123fe8:	e037883a 	mov	sp,fp
81123fec:	df000017 	ldw	fp,0(sp)
81123ff0:	dec00104 	addi	sp,sp,4
81123ff4:	f800283a 	ret

81123ff8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
81123ff8:	deffff04 	addi	sp,sp,-4
81123ffc:	df000015 	stw	fp,0(sp)
81124000:	d839883a 	mov	fp,sp
}
81124004:	0001883a 	nop
81124008:	e037883a 	mov	sp,fp
8112400c:	df000017 	ldw	fp,0(sp)
81124010:	dec00104 	addi	sp,sp,4
81124014:	f800283a 	ret

81124018 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
81124018:	deffff04 	addi	sp,sp,-4
8112401c:	df000015 	stw	fp,0(sp)
81124020:	d839883a 	mov	fp,sp
}
81124024:	0001883a 	nop
81124028:	e037883a 	mov	sp,fp
8112402c:	df000017 	ldw	fp,0(sp)
81124030:	dec00104 	addi	sp,sp,4
81124034:	f800283a 	ret

81124038 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
81124038:	deffff04 	addi	sp,sp,-4
8112403c:	df000015 	stw	fp,0(sp)
81124040:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
81124044:	0001883a 	nop
81124048:	e037883a 	mov	sp,fp
8112404c:	df000017 	ldw	fp,0(sp)
81124050:	dec00104 	addi	sp,sp,4
81124054:	f800283a 	ret

81124058 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
81124058:	deffff04 	addi	sp,sp,-4
8112405c:	df000015 	stw	fp,0(sp)
81124060:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
81124064:	0001883a 	nop
81124068:	e037883a 	mov	sp,fp
8112406c:	df000017 	ldw	fp,0(sp)
81124070:	dec00104 	addi	sp,sp,4
81124074:	f800283a 	ret

81124078 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
81124078:	deffff04 	addi	sp,sp,-4
8112407c:	df000015 	stw	fp,0(sp)
81124080:	d839883a 	mov	fp,sp
}
81124084:	0001883a 	nop
81124088:	e037883a 	mov	sp,fp
8112408c:	df000017 	ldw	fp,0(sp)
81124090:	dec00104 	addi	sp,sp,4
81124094:	f800283a 	ret

81124098 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
81124098:	deffff04 	addi	sp,sp,-4
8112409c:	df000015 	stw	fp,0(sp)
811240a0:	d839883a 	mov	fp,sp
}
811240a4:	0001883a 	nop
811240a8:	e037883a 	mov	sp,fp
811240ac:	df000017 	ldw	fp,0(sp)
811240b0:	dec00104 	addi	sp,sp,4
811240b4:	f800283a 	ret

811240b8 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
811240b8:	defffe04 	addi	sp,sp,-8
811240bc:	df000115 	stw	fp,4(sp)
811240c0:	df000104 	addi	fp,sp,4
811240c4:	e13fff15 	stw	r4,-4(fp)
}
811240c8:	0001883a 	nop
811240cc:	e037883a 	mov	sp,fp
811240d0:	df000017 	ldw	fp,0(sp)
811240d4:	dec00104 	addi	sp,sp,4
811240d8:	f800283a 	ret

811240dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
811240dc:	defffe04 	addi	sp,sp,-8
811240e0:	df000115 	stw	fp,4(sp)
811240e4:	df000104 	addi	fp,sp,4
811240e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
811240ec:	e0bfff17 	ldw	r2,-4(fp)
811240f0:	10bffe84 	addi	r2,r2,-6
811240f4:	10c00428 	cmpgeui	r3,r2,16
811240f8:	18001a1e 	bne	r3,zero,81124164 <alt_exception_cause_generated_bad_addr+0x88>
811240fc:	100690ba 	slli	r3,r2,2
81124100:	00a044b4 	movhi	r2,33042
81124104:	10904504 	addi	r2,r2,16660
81124108:	1885883a 	add	r2,r3,r2
8112410c:	10800017 	ldw	r2,0(r2)
81124110:	1000683a 	jmp	r2
81124114:	81124154 	ori	r4,r16,18693
81124118:	81124154 	ori	r4,r16,18693
8112411c:	81124164 	muli	r4,r16,18693
81124120:	81124164 	muli	r4,r16,18693
81124124:	81124164 	muli	r4,r16,18693
81124128:	81124154 	ori	r4,r16,18693
8112412c:	8112415c 	xori	r4,r16,18693
81124130:	81124164 	muli	r4,r16,18693
81124134:	81124154 	ori	r4,r16,18693
81124138:	81124154 	ori	r4,r16,18693
8112413c:	81124164 	muli	r4,r16,18693
81124140:	81124154 	ori	r4,r16,18693
81124144:	8112415c 	xori	r4,r16,18693
81124148:	81124164 	muli	r4,r16,18693
8112414c:	81124164 	muli	r4,r16,18693
81124150:	81124154 	ori	r4,r16,18693
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
81124154:	00800044 	movi	r2,1
81124158:	00000306 	br	81124168 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8112415c:	0005883a 	mov	r2,zero
81124160:	00000106 	br	81124168 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
81124164:	0005883a 	mov	r2,zero
  }
}
81124168:	e037883a 	mov	sp,fp
8112416c:	df000017 	ldw	fp,0(sp)
81124170:	dec00104 	addi	sp,sp,4
81124174:	f800283a 	ret

81124178 <atexit>:
81124178:	200b883a 	mov	r5,r4
8112417c:	000f883a 	mov	r7,zero
81124180:	000d883a 	mov	r6,zero
81124184:	0009883a 	mov	r4,zero
81124188:	11243a81 	jmpi	811243a8 <__register_exitproc>

8112418c <exit>:
8112418c:	defffe04 	addi	sp,sp,-8
81124190:	000b883a 	mov	r5,zero
81124194:	dc000015 	stw	r16,0(sp)
81124198:	dfc00115 	stw	ra,4(sp)
8112419c:	2021883a 	mov	r16,r4
811241a0:	11244c00 	call	811244c0 <__call_exitprocs>
811241a4:	00a044b4 	movhi	r2,33042
811241a8:	109b9b04 	addi	r2,r2,28268
811241ac:	11000017 	ldw	r4,0(r2)
811241b0:	20800f17 	ldw	r2,60(r4)
811241b4:	10000126 	beq	r2,zero,811241bc <exit+0x30>
811241b8:	103ee83a 	callr	r2
811241bc:	8009883a 	mov	r4,r16
811241c0:	11246400 	call	81124640 <_exit>

811241c4 <memcmp>:
811241c4:	01c000c4 	movi	r7,3
811241c8:	3980192e 	bgeu	r7,r6,81124230 <memcmp+0x6c>
811241cc:	2144b03a 	or	r2,r4,r5
811241d0:	11c4703a 	and	r2,r2,r7
811241d4:	10000f26 	beq	r2,zero,81124214 <memcmp+0x50>
811241d8:	20800003 	ldbu	r2,0(r4)
811241dc:	28c00003 	ldbu	r3,0(r5)
811241e0:	10c0151e 	bne	r2,r3,81124238 <memcmp+0x74>
811241e4:	31bfff84 	addi	r6,r6,-2
811241e8:	01ffffc4 	movi	r7,-1
811241ec:	00000406 	br	81124200 <memcmp+0x3c>
811241f0:	20800003 	ldbu	r2,0(r4)
811241f4:	28c00003 	ldbu	r3,0(r5)
811241f8:	31bfffc4 	addi	r6,r6,-1
811241fc:	10c00e1e 	bne	r2,r3,81124238 <memcmp+0x74>
81124200:	21000044 	addi	r4,r4,1
81124204:	29400044 	addi	r5,r5,1
81124208:	31fff91e 	bne	r6,r7,811241f0 <__reset+0xfb1041f0>
8112420c:	0005883a 	mov	r2,zero
81124210:	f800283a 	ret
81124214:	20c00017 	ldw	r3,0(r4)
81124218:	28800017 	ldw	r2,0(r5)
8112421c:	18bfee1e 	bne	r3,r2,811241d8 <__reset+0xfb1041d8>
81124220:	31bfff04 	addi	r6,r6,-4
81124224:	21000104 	addi	r4,r4,4
81124228:	29400104 	addi	r5,r5,4
8112422c:	39bff936 	bltu	r7,r6,81124214 <__reset+0xfb104214>
81124230:	303fe91e 	bne	r6,zero,811241d8 <__reset+0xfb1041d8>
81124234:	003ff506 	br	8112420c <__reset+0xfb10420c>
81124238:	10c5c83a 	sub	r2,r2,r3
8112423c:	f800283a 	ret

81124240 <_putc_r>:
81124240:	defffc04 	addi	sp,sp,-16
81124244:	dc000215 	stw	r16,8(sp)
81124248:	dfc00315 	stw	ra,12(sp)
8112424c:	2021883a 	mov	r16,r4
81124250:	20000226 	beq	r4,zero,8112425c <_putc_r+0x1c>
81124254:	20800e17 	ldw	r2,56(r4)
81124258:	10001b26 	beq	r2,zero,811242c8 <_putc_r+0x88>
8112425c:	30800217 	ldw	r2,8(r6)
81124260:	10bfffc4 	addi	r2,r2,-1
81124264:	30800215 	stw	r2,8(r6)
81124268:	10000a16 	blt	r2,zero,81124294 <_putc_r+0x54>
8112426c:	30800017 	ldw	r2,0(r6)
81124270:	11400005 	stb	r5,0(r2)
81124274:	30800017 	ldw	r2,0(r6)
81124278:	10c00044 	addi	r3,r2,1
8112427c:	30c00015 	stw	r3,0(r6)
81124280:	10800003 	ldbu	r2,0(r2)
81124284:	dfc00317 	ldw	ra,12(sp)
81124288:	dc000217 	ldw	r16,8(sp)
8112428c:	dec00404 	addi	sp,sp,16
81124290:	f800283a 	ret
81124294:	30c00617 	ldw	r3,24(r6)
81124298:	10c00616 	blt	r2,r3,811242b4 <_putc_r+0x74>
8112429c:	30800017 	ldw	r2,0(r6)
811242a0:	00c00284 	movi	r3,10
811242a4:	11400005 	stb	r5,0(r2)
811242a8:	30800017 	ldw	r2,0(r6)
811242ac:	11400003 	ldbu	r5,0(r2)
811242b0:	28fff11e 	bne	r5,r3,81124278 <__reset+0xfb104278>
811242b4:	8009883a 	mov	r4,r16
811242b8:	dfc00317 	ldw	ra,12(sp)
811242bc:	dc000217 	ldw	r16,8(sp)
811242c0:	dec00404 	addi	sp,sp,16
811242c4:	11126d81 	jmpi	811126d8 <__swbuf_r>
811242c8:	d9400015 	stw	r5,0(sp)
811242cc:	d9800115 	stw	r6,4(sp)
811242d0:	110782c0 	call	8110782c <__sinit>
811242d4:	d9800117 	ldw	r6,4(sp)
811242d8:	d9400017 	ldw	r5,0(sp)
811242dc:	003fdf06 	br	8112425c <__reset+0xfb10425c>

811242e0 <putc>:
811242e0:	00a044b4 	movhi	r2,33042
811242e4:	defffc04 	addi	sp,sp,-16
811242e8:	109b9c04 	addi	r2,r2,28272
811242ec:	dc000115 	stw	r16,4(sp)
811242f0:	14000017 	ldw	r16,0(r2)
811242f4:	dc400215 	stw	r17,8(sp)
811242f8:	dfc00315 	stw	ra,12(sp)
811242fc:	2023883a 	mov	r17,r4
81124300:	80000226 	beq	r16,zero,8112430c <putc+0x2c>
81124304:	80800e17 	ldw	r2,56(r16)
81124308:	10001a26 	beq	r2,zero,81124374 <putc+0x94>
8112430c:	28800217 	ldw	r2,8(r5)
81124310:	10bfffc4 	addi	r2,r2,-1
81124314:	28800215 	stw	r2,8(r5)
81124318:	10000b16 	blt	r2,zero,81124348 <putc+0x68>
8112431c:	28800017 	ldw	r2,0(r5)
81124320:	14400005 	stb	r17,0(r2)
81124324:	28800017 	ldw	r2,0(r5)
81124328:	10c00044 	addi	r3,r2,1
8112432c:	28c00015 	stw	r3,0(r5)
81124330:	10800003 	ldbu	r2,0(r2)
81124334:	dfc00317 	ldw	ra,12(sp)
81124338:	dc400217 	ldw	r17,8(sp)
8112433c:	dc000117 	ldw	r16,4(sp)
81124340:	dec00404 	addi	sp,sp,16
81124344:	f800283a 	ret
81124348:	28c00617 	ldw	r3,24(r5)
8112434c:	10c00e16 	blt	r2,r3,81124388 <putc+0xa8>
81124350:	28800017 	ldw	r2,0(r5)
81124354:	01000284 	movi	r4,10
81124358:	14400005 	stb	r17,0(r2)
8112435c:	28800017 	ldw	r2,0(r5)
81124360:	10c00003 	ldbu	r3,0(r2)
81124364:	193ff01e 	bne	r3,r4,81124328 <__reset+0xfb104328>
81124368:	280d883a 	mov	r6,r5
8112436c:	180b883a 	mov	r5,r3
81124370:	00000706 	br	81124390 <putc+0xb0>
81124374:	8009883a 	mov	r4,r16
81124378:	d9400015 	stw	r5,0(sp)
8112437c:	110782c0 	call	8110782c <__sinit>
81124380:	d9400017 	ldw	r5,0(sp)
81124384:	003fe106 	br	8112430c <__reset+0xfb10430c>
81124388:	280d883a 	mov	r6,r5
8112438c:	880b883a 	mov	r5,r17
81124390:	8009883a 	mov	r4,r16
81124394:	dfc00317 	ldw	ra,12(sp)
81124398:	dc400217 	ldw	r17,8(sp)
8112439c:	dc000117 	ldw	r16,4(sp)
811243a0:	dec00404 	addi	sp,sp,16
811243a4:	11126d81 	jmpi	811126d8 <__swbuf_r>

811243a8 <__register_exitproc>:
811243a8:	defffa04 	addi	sp,sp,-24
811243ac:	dc000315 	stw	r16,12(sp)
811243b0:	042044b4 	movhi	r16,33042
811243b4:	841b9b04 	addi	r16,r16,28268
811243b8:	80c00017 	ldw	r3,0(r16)
811243bc:	dc400415 	stw	r17,16(sp)
811243c0:	dfc00515 	stw	ra,20(sp)
811243c4:	18805217 	ldw	r2,328(r3)
811243c8:	2023883a 	mov	r17,r4
811243cc:	10003726 	beq	r2,zero,811244ac <__register_exitproc+0x104>
811243d0:	10c00117 	ldw	r3,4(r2)
811243d4:	010007c4 	movi	r4,31
811243d8:	20c00e16 	blt	r4,r3,81124414 <__register_exitproc+0x6c>
811243dc:	1a000044 	addi	r8,r3,1
811243e0:	8800221e 	bne	r17,zero,8112446c <__register_exitproc+0xc4>
811243e4:	18c00084 	addi	r3,r3,2
811243e8:	18c7883a 	add	r3,r3,r3
811243ec:	18c7883a 	add	r3,r3,r3
811243f0:	12000115 	stw	r8,4(r2)
811243f4:	10c7883a 	add	r3,r2,r3
811243f8:	19400015 	stw	r5,0(r3)
811243fc:	0005883a 	mov	r2,zero
81124400:	dfc00517 	ldw	ra,20(sp)
81124404:	dc400417 	ldw	r17,16(sp)
81124408:	dc000317 	ldw	r16,12(sp)
8112440c:	dec00604 	addi	sp,sp,24
81124410:	f800283a 	ret
81124414:	00800034 	movhi	r2,0
81124418:	10800004 	addi	r2,r2,0
8112441c:	10002626 	beq	r2,zero,811244b8 <__register_exitproc+0x110>
81124420:	01006404 	movi	r4,400
81124424:	d9400015 	stw	r5,0(sp)
81124428:	d9800115 	stw	r6,4(sp)
8112442c:	d9c00215 	stw	r7,8(sp)
81124430:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffc0>
81124434:	d9400017 	ldw	r5,0(sp)
81124438:	d9800117 	ldw	r6,4(sp)
8112443c:	d9c00217 	ldw	r7,8(sp)
81124440:	10001d26 	beq	r2,zero,811244b8 <__register_exitproc+0x110>
81124444:	81000017 	ldw	r4,0(r16)
81124448:	10000115 	stw	zero,4(r2)
8112444c:	02000044 	movi	r8,1
81124450:	22405217 	ldw	r9,328(r4)
81124454:	0007883a 	mov	r3,zero
81124458:	12400015 	stw	r9,0(r2)
8112445c:	20805215 	stw	r2,328(r4)
81124460:	10006215 	stw	zero,392(r2)
81124464:	10006315 	stw	zero,396(r2)
81124468:	883fde26 	beq	r17,zero,811243e4 <__reset+0xfb1043e4>
8112446c:	18c9883a 	add	r4,r3,r3
81124470:	2109883a 	add	r4,r4,r4
81124474:	1109883a 	add	r4,r2,r4
81124478:	21802215 	stw	r6,136(r4)
8112447c:	01800044 	movi	r6,1
81124480:	12406217 	ldw	r9,392(r2)
81124484:	30cc983a 	sll	r6,r6,r3
81124488:	4992b03a 	or	r9,r9,r6
8112448c:	12406215 	stw	r9,392(r2)
81124490:	21c04215 	stw	r7,264(r4)
81124494:	01000084 	movi	r4,2
81124498:	893fd21e 	bne	r17,r4,811243e4 <__reset+0xfb1043e4>
8112449c:	11006317 	ldw	r4,396(r2)
811244a0:	218cb03a 	or	r6,r4,r6
811244a4:	11806315 	stw	r6,396(r2)
811244a8:	003fce06 	br	811243e4 <__reset+0xfb1043e4>
811244ac:	18805304 	addi	r2,r3,332
811244b0:	18805215 	stw	r2,328(r3)
811244b4:	003fc606 	br	811243d0 <__reset+0xfb1043d0>
811244b8:	00bfffc4 	movi	r2,-1
811244bc:	003fd006 	br	81124400 <__reset+0xfb104400>

811244c0 <__call_exitprocs>:
811244c0:	defff504 	addi	sp,sp,-44
811244c4:	df000915 	stw	fp,36(sp)
811244c8:	dd400615 	stw	r21,24(sp)
811244cc:	dc800315 	stw	r18,12(sp)
811244d0:	dfc00a15 	stw	ra,40(sp)
811244d4:	ddc00815 	stw	r23,32(sp)
811244d8:	dd800715 	stw	r22,28(sp)
811244dc:	dd000515 	stw	r20,20(sp)
811244e0:	dcc00415 	stw	r19,16(sp)
811244e4:	dc400215 	stw	r17,8(sp)
811244e8:	dc000115 	stw	r16,4(sp)
811244ec:	d9000015 	stw	r4,0(sp)
811244f0:	2839883a 	mov	fp,r5
811244f4:	04800044 	movi	r18,1
811244f8:	057fffc4 	movi	r21,-1
811244fc:	00a044b4 	movhi	r2,33042
81124500:	109b9b04 	addi	r2,r2,28268
81124504:	12000017 	ldw	r8,0(r2)
81124508:	45005217 	ldw	r20,328(r8)
8112450c:	44c05204 	addi	r19,r8,328
81124510:	a0001c26 	beq	r20,zero,81124584 <__call_exitprocs+0xc4>
81124514:	a0800117 	ldw	r2,4(r20)
81124518:	15ffffc4 	addi	r23,r2,-1
8112451c:	b8000d16 	blt	r23,zero,81124554 <__call_exitprocs+0x94>
81124520:	14000044 	addi	r16,r2,1
81124524:	8421883a 	add	r16,r16,r16
81124528:	8421883a 	add	r16,r16,r16
8112452c:	84402004 	addi	r17,r16,128
81124530:	a463883a 	add	r17,r20,r17
81124534:	a421883a 	add	r16,r20,r16
81124538:	e0001e26 	beq	fp,zero,811245b4 <__call_exitprocs+0xf4>
8112453c:	80804017 	ldw	r2,256(r16)
81124540:	e0801c26 	beq	fp,r2,811245b4 <__call_exitprocs+0xf4>
81124544:	bdffffc4 	addi	r23,r23,-1
81124548:	843fff04 	addi	r16,r16,-4
8112454c:	8c7fff04 	addi	r17,r17,-4
81124550:	bd7ff91e 	bne	r23,r21,81124538 <__reset+0xfb104538>
81124554:	00800034 	movhi	r2,0
81124558:	10800004 	addi	r2,r2,0
8112455c:	10000926 	beq	r2,zero,81124584 <__call_exitprocs+0xc4>
81124560:	a0800117 	ldw	r2,4(r20)
81124564:	1000301e 	bne	r2,zero,81124628 <__call_exitprocs+0x168>
81124568:	a0800017 	ldw	r2,0(r20)
8112456c:	10003226 	beq	r2,zero,81124638 <__call_exitprocs+0x178>
81124570:	a009883a 	mov	r4,r20
81124574:	98800015 	stw	r2,0(r19)
81124578:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffc0>
8112457c:	9d000017 	ldw	r20,0(r19)
81124580:	a03fe41e 	bne	r20,zero,81124514 <__reset+0xfb104514>
81124584:	dfc00a17 	ldw	ra,40(sp)
81124588:	df000917 	ldw	fp,36(sp)
8112458c:	ddc00817 	ldw	r23,32(sp)
81124590:	dd800717 	ldw	r22,28(sp)
81124594:	dd400617 	ldw	r21,24(sp)
81124598:	dd000517 	ldw	r20,20(sp)
8112459c:	dcc00417 	ldw	r19,16(sp)
811245a0:	dc800317 	ldw	r18,12(sp)
811245a4:	dc400217 	ldw	r17,8(sp)
811245a8:	dc000117 	ldw	r16,4(sp)
811245ac:	dec00b04 	addi	sp,sp,44
811245b0:	f800283a 	ret
811245b4:	a0800117 	ldw	r2,4(r20)
811245b8:	80c00017 	ldw	r3,0(r16)
811245bc:	10bfffc4 	addi	r2,r2,-1
811245c0:	15c01426 	beq	r2,r23,81124614 <__call_exitprocs+0x154>
811245c4:	80000015 	stw	zero,0(r16)
811245c8:	183fde26 	beq	r3,zero,81124544 <__reset+0xfb104544>
811245cc:	95c8983a 	sll	r4,r18,r23
811245d0:	a0806217 	ldw	r2,392(r20)
811245d4:	a5800117 	ldw	r22,4(r20)
811245d8:	2084703a 	and	r2,r4,r2
811245dc:	10000b26 	beq	r2,zero,8112460c <__call_exitprocs+0x14c>
811245e0:	a0806317 	ldw	r2,396(r20)
811245e4:	2088703a 	and	r4,r4,r2
811245e8:	20000c1e 	bne	r4,zero,8112461c <__call_exitprocs+0x15c>
811245ec:	89400017 	ldw	r5,0(r17)
811245f0:	d9000017 	ldw	r4,0(sp)
811245f4:	183ee83a 	callr	r3
811245f8:	a0800117 	ldw	r2,4(r20)
811245fc:	15bfbf1e 	bne	r2,r22,811244fc <__reset+0xfb1044fc>
81124600:	98800017 	ldw	r2,0(r19)
81124604:	153fcf26 	beq	r2,r20,81124544 <__reset+0xfb104544>
81124608:	003fbc06 	br	811244fc <__reset+0xfb1044fc>
8112460c:	183ee83a 	callr	r3
81124610:	003ff906 	br	811245f8 <__reset+0xfb1045f8>
81124614:	a5c00115 	stw	r23,4(r20)
81124618:	003feb06 	br	811245c8 <__reset+0xfb1045c8>
8112461c:	89000017 	ldw	r4,0(r17)
81124620:	183ee83a 	callr	r3
81124624:	003ff406 	br	811245f8 <__reset+0xfb1045f8>
81124628:	a0800017 	ldw	r2,0(r20)
8112462c:	a027883a 	mov	r19,r20
81124630:	1029883a 	mov	r20,r2
81124634:	003fb606 	br	81124510 <__reset+0xfb104510>
81124638:	0005883a 	mov	r2,zero
8112463c:	003ffb06 	br	8112462c <__reset+0xfb10462c>

81124640 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
81124640:	defffd04 	addi	sp,sp,-12
81124644:	df000215 	stw	fp,8(sp)
81124648:	df000204 	addi	fp,sp,8
8112464c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
81124650:	d0204545 	stb	zero,-32491(gp)
81124654:	e0bfff17 	ldw	r2,-4(fp)
81124658:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8112465c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
81124660:	10000226 	beq	r2,zero,8112466c <_exit+0x2c>
    ALT_SIM_FAIL();
81124664:	002af070 	cmpltui	zero,zero,43969
81124668:	00000106 	br	81124670 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
8112466c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
81124670:	003fff06 	br	81124670 <__reset+0xfb104670>
